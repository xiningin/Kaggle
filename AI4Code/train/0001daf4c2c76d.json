{"cell_type":{"86605076":"code","df6c939f":"code","00f87d0a":"code","986fd4f1":"code","9b761026":"code","6f271c86":"code","97c3f99b":"code","cfa510c5":"code","374a5179":"code","df5f7c1f":"code","27060ab9":"code","4c7395ec":"code","2d2f9893":"code","35c2812a":"code","a6617a52":"code","cd2cf0ad":"code","50cc03dd":"code","4843d706":"code","09c20343":"code","4385fc90":"code","42241549":"code","edaaeecd":"code","1ed4aebf":"code","54ddeb88":"code","3307d698":"code","ebb2c2f7":"code","e54d5869":"code","39c98d5f":"code","d6c5745e":"code","966d9c8a":"code","4524758d":"code","4ef89e46":"code","82d7d8ca":"code","b6c234fb":"code","2d0e1fda":"code","434b8e0c":"code","7cececae":"code","a3edb582":"code","a149a6c4":"code","62583014":"code","15dad586":"code","877d834a":"code","a5d57693":"code","a4c281a6":"code","7e5f83ad":"code","b4b8a715":"code","8ebf5372":"code","8e116f02":"code","16694b2f":"code","aba60214":"code","9bbdc57f":"code","7a3bfebb":"code","986d3e4e":"code","09bc65e9":"code","9f192db6":"code","8f62a706":"code","d566f0b2":"code","866bcefe":"code","c57d48a5":"code","c7b71f70":"code","782c3ce4":"code","a4c6bca9":"code","63f506d8":"code","b0df2453":"code","4e959393":"code","1e0a1b86":"code","e8688784":"code","3427a8b8":"code","241bdfaa":"code","2a345714":"code","68062669":"code","6661ad27":"code","e5a99bda":"code","4fc4a21d":"code","452cca1e":"code","3abd855f":"code","cb6bfaac":"code","4da7dfe7":"code","9e71d61f":"code","a52728cb":"code","dbd14ff6":"code","bd8a9f63":"code","4640d46a":"code","c96b5411":"code","413f9a07":"code","a3f33b49":"code","7af53379":"code","5977f7af":"code","feb6d95b":"code","bce157d4":"code","47483667":"code","18f59ddc":"code","d383dee5":"code","22f00d53":"code","e657a288":"code","3a3d6ca9":"code","6885acfa":"code","3922f106":"code","f037b8fa":"code","1d244331":"code","ed43e7da":"code","c4a0c7d9":"code","abb8549b":"code","22d5f1a7":"code","25676b01":"code","9e5ab122":"code","f3d136b8":"code","240a6960":"code","42fa445a":"code","a212f377":"code","12cee4fb":"code","c6a15d66":"code","9c07e522":"code","8c76efd3":"code","26b8b7b3":"code","05189262":"code","5c2c242c":"code","47ab82bd":"code","c3964ed5":"code","a3a445ac":"code","27e84e59":"code","09a985c1":"code","e2ffe24f":"code","00c718df":"code","d30721e7":"code","533f0c45":"code","b5230e68":"code","48f93c95":"code","80096ae5":"code","fb965995":"code","41307604":"code","15e0f9d3":"code","9091b53a":"code","ac2ac7ac":"code","4820b1e9":"code","7edacbaa":"code","3bbbed26":"code","bd02d177":"code","ed25d9b2":"code","617f740b":"code","96cd3e40":"code","06dd359d":"code","5d8dbc19":"code","03f870e7":"code","d08e1e66":"code","0a35f26c":"code","27f48db8":"code","8c4e17c3":"code","bd4ab364":"code","e6ea9cab":"code","4e273e75":"code","ea162346":"code","d3193bb5":"code","bf258cbf":"code","3ee91998":"code","daf25de1":"code","91b32c22":"code","3c5f7ba6":"code","ccdf26d9":"code","10b299e5":"code","68a1e47b":"code","1aee8a93":"code","2f122e5b":"code","50b08f93":"code","4acf6d10":"code","9711f0f6":"code","b9bb5ea6":"code","4a9cfa67":"code","41910025":"code","3548485c":"code","40842d13":"code","204afb8e":"code","b307e234":"code","954ca3e4":"code","8dcaddf3":"code","fdb8d575":"code","16e57be6":"code","075b5763":"code","a898e555":"markdown","4dff5311":"markdown","ffef7d1c":"markdown","a6cc7795":"markdown","19327444":"markdown","34f430ca":"markdown","845d608e":"markdown","c3d72360":"markdown","1c3e1fb0":"markdown","3fc62a28":"markdown","ccee4822":"markdown","2451daed":"markdown","9fd822ca":"markdown","e887f5e6":"markdown","9db3d92c":"markdown","faa3d95b":"markdown","bc892c87":"markdown","ca8e5e0a":"markdown","719f2ae4":"markdown","df459c56":"markdown","91a4584a":"markdown","27f52431":"markdown","ca74117a":"markdown","a57f19d3":"markdown","c17d3103":"markdown","ac2b6b85":"markdown","275b3536":"markdown","2476da96":"markdown","7eca03a2":"markdown","ef279279":"markdown","9acd0dba":"markdown","97266564":"markdown","58aadb1d":"markdown","b78b7d75":"markdown","df0fc7d0":"markdown","bd0b9dd7":"markdown","cbe712bb":"markdown","08dac4fd":"markdown","b4ff1015":"markdown","bc711534":"markdown","b47c87d1":"markdown","63625ef7":"markdown","d20b0094":"markdown","d8c1a52c":"markdown","589730c3":"markdown","ae93e8e6":"markdown","996607a1":"markdown","60ffcfb7":"markdown","03a6fa77":"markdown","76cc2642":"markdown","90f317a2":"markdown"},"source":{"86605076":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","df6c939f":"import matplotlib as mlp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# plot simple sin & cos function\n\nplt.style.use('classic')\n\nx = np.linspace(1,10,200)\nplt.plot(x,np.sin(x))\nplt.plot(x,np.cos(x))\nplt.show()  # plt.show() starts an event loop, looks for all currently active figure objects,and opens one or more interactive windows that display your figure or figures.\n\n","00f87d0a":"%matplotlib","986fd4f1":"x = np.linspace(0, 10, 100)\nfig=plt.figure()\nplt.plot(x,np.sin(x),'_')\nplt.plot(x,np.cos(x), '_')\n\nfig.savefig('my_figure.png')\n","9b761026":"fig.canvas.get_supported_filetypes()\n","6f271c86":"# one more way to draw graph\n\nplt.figure()\n\n# create the first of two panels and set current axis\n\nplt.subplot(2,1,1) # (rows, columns, panel number)\nplt.plot(x, np.sin(x))\n\n# create the second panel and set current axis\n\nplt.subplot(2,1,2)\nplt.plot(x, np.cos(x))","97c3f99b":"# Simple Line Plots\n# Perhaps the simplest of all plots is the visualization of a single function y = f(x) . Here we will take a first look at creating a simple plot of this type. As with all the following\n# sections, we\u2019ll start by setting up the notebook for plotting and importing the func\u2010 tions we will use:\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\nimport numpy as np\n\n# For all Matplotlib plots, we start by creating a figure and an axes. In their simplest form, a figure and axes can be created as follows\n\nfig=plt.figure()\nax=plt.axis()\n\n# Once we have created an axes, we can use the ax.plot function to plot some data. Let\u2019s start with a simple sinusoid\nx=np.linspace(1,10,1000)\n\nx = np.linspace(0, 10, 2000)\nplt.plot(x, np.sin(x))\n\n# If we want to create a single figure with multiple lines, we can simply call the plot function multiple times\nplt.plot(x, np.sin(x))\nplt.plot(x, np.cos(x))\n# plt.plot(x, np.tan(x))\n\n","cfa510c5":"# Adjusting the Plot: Line Colors and Styles\n\n# The first adjustment you might wish to make to a plot is to control the line colors and styles. The plt.plot() function takes additional arguments that can be used to spec\u2010\n# ify these. To adjust the color, you can use the color keyword, which accepts a string argument representing virtually any imaginable color. The color can be specified in a variety of ways\n\n\nplt.plot(x, np.sin(x - 0), color='blue')      # specify color by name\nplt.plot(x, np.sin(x - 1), color='g')        # short color code (rgbcmyk)\nplt.plot(x, np.sin(x - 2), color='0.75')     # Grayscale between 0 and 1\nplt.plot(x, np.sin(x - 3), color='#FFDD44')      # Hex code (RRGGBB from 00 to FF)\nplt.plot(x, np.sin(x - 4), color=(1.0,0.2,0.3))    # RGB tuple, values 0 and 1\nplt.plot(x, np.sin(x - 5), color='chartreuse');     # all HTML color names supported\n\n# If no color is specified, Matplotlib will automatically cycle through a set of default colors for multiple lines.\n\n# Similarly, you can adjust the line style using the linestyle keyword\n\nplt.plot(x, x + 0, linestyle='solid')\nplt.plot(x, x + 1, linestyle='dashed')\nplt.plot(x, x + 2, linestyle='dashdot')\nplt.plot(x, x + 3, linestyle='dotted')\n    \n # For short, you can use the following codes:\n\nplt.plot(x, x + 4, linestyle='-') # solid\nplt.plot(x, x + 5, linestyle='--') # dashed\nplt.plot(x, x + 6, linestyle='-.') # dashdot\nplt.plot(x, x + 7, linestyle=':') # dotted\n","374a5179":"# If you would like to be extremely terse, these linestyle and color codes can be com\u2010 bined into a single nonkeyword argument to the plt.plot() function\n\nplt.plot(x, x + 0, '-g') # solid green  # x & x+1 is drawing a line here\nplt.plot(x, x + 1, '--c') # dashed cyan\nplt.plot(x, x + 2, '-.k') # dashdot black\nplt.plot(x, x + 3, ':r'); # dotted red\n\n# These single-character color codes reflect the standard abbreviations in the RGB (Red\/Green\/Blue) and CMYK (Cyan\/Magenta\/Yellow\/blacK) color systems, com\u2010monly used for digital color graphics.\n","df5f7c1f":"# Adjusting the Plot: Axes Limits\n\n# Matplotlib does a decent job of choosing default axes limits for your plot, but some\u2010times it\u2019s nice to have finer control. The most basic way to adjust axis limits is to use the plt.xlim() and plt.ylim() methods\n\nplt.plot(x,np.sin(x))\nplt.xlim(0, 11)\nplt.ylim(0, 1.5)","27060ab9":"# If for some reason you\u2019d like either axis to be displayed in reverse, you can simply reverse the order of the arguments\n\nplt.plot(x,np.sin(x))\nplt.xlim(10,0)\nplt.ylim(1.2, -1.2)","4c7395ec":"# A useful related method is plt.axis() (note here the potential confusion between axes with an e, and axis with an i). The plt.axis() method allows you to set the x\n# and y limits with a single call, by passing a list that specifies [xmin, xmax, ymin,ymax]\n\nplt.plot(x,np.sin(x))\nplt.axis([-1,11,0,6])","2d2f9893":"# The plt.axis() method goes even beyond this, allowing you to do things like auto\u2010 matically tighten the bounds around the current plot\n\nplt.plot(x,np.sin(x))\nplt.axis('tight')","35c2812a":"# It allows even higher-level specifications, such as ensuring an equal aspect ratio so that on your screen, one unit in x is equal to one unit in y\n\nplt.plot(x,np.sin(x))\nplt.axis('equal')","a6617a52":"# Labeling Plots\n# we\u2019ll briefly look at the labeling of plots: titles, axis labels, and simple legends.\n# Titles and axis labels are the simplest such labels\u2014there are methods that can be used to quickly set them\n\nplt.plot(x,np.sin(x))\nplt.title('A sign curve')\nplt.xlabel(\"x value\")\nplt.ylabel(\"sinx value\")","cd2cf0ad":"# When multiple lines are being shown within a single axes, it can be useful to create a plot legend that labels each line type.\n# Again, Matplotlib has a built-in way of quickly creating such a legend. It is done via the (you guessed it) plt.legend() method.\n\nplt.plot(x,np.sin(x),'g',label='sin(x)')\nplt.plot(x,np.cos(x), 'r',label='cos(x)')\n\nplt.axis('equal')\nplt.legend()  # this method is responsible for displaying legend\n\n# As you can see, the plt.legend() function keeps track of the line style and color, and matches these with the correct label. More information on specifying and formatting\n# plot legends can be found in the plt.legend() docstring;","50cc03dd":"# In the object-oriented interface to plotting, rather than calling these functions indi\u2010 vidually, it is often more convenient to use the ax.set() method to set all these prop\u2010erties at once\n\nax = plt.axes()\nax.plot(x, np.sin(x))\nax.set(xlim=(0,10),ylim=(-2,2),xlabel='x',ylabel='sin(x)',title='A sign curve')\n\n","4843d706":"# Simple Scatter Plots\n# Another commonly used plot type is the simple scatter plot, a close cousin of the line plot. Instead of points being joined by line segments, here the points are represented individually with a dot, circle, or other shape. \n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\nimport numpy as np\n\nx = np.linspace(0, 10, 30)\ny = np.sin(x)\n\nplt.plot(x,y,'o',color='black')\n\n# The third argument in the function call is a character that represents the type of sym\u2010bol used for the plotting. Just as you can specify options such as '-' and '--' to con\u2010\n# trol the line style, the marker style has its own set of short string codes. \n","09c20343":"rng = np.random.RandomState(0)\nfor marker in ['o', '.', ',', 'x', '+', 'v', '^', '<', '>', 's', 'd']:\n    plt.plot(rng.rand(5), rng.rand(5), marker,label=\"marker='{0}'\".format(marker))\n\nplt.legend(numpoints=1)\nplt.xlim(0, 1.8);","4385fc90":"# For even more possibilities, these character codes can be used together with line and color codes to plot points along with a line connecting them\nplt.plot(x,y,'-ok') # line (-), circle marker (o), black (k)","42241549":"# Additional keyword arguments to plt.plot specify a wide range of properties of the lines and markers\n\nplt.plot(x,y,'-p',color='gray',markersize=15,linewidth=4,markerfacecolor='white',markeredgecolor='gray',markeredgewidth=2)\nplt.ylim(-1.2,1.2)\nplt.xlim(0,3)\n","edaaeecd":"# Scatter Plots with plt.scatter\n\nplt.scatter(x,y,marker='o')","1ed4aebf":"# Let\u2019s show this by creating a random scatter plot with points of many colors and sizes.\n\nrng = np.random.RandomState(0)\nx = rng.randn(100)\ny = rng.randn(100)\ncolors = rng.rand(100)\nsizes = 1000 * rng.rand(100)\nplt.scatter(x, y, c=colors, s=sizes, alpha=0.3,cmap='viridis')\nplt.colorbar(); # show color scale\n\n# Notice that the color argument is automatically mapped to a color scale (shown here by the colorbar() command), and the size argument is given in pixels. In this way,\n# the color and size of points can be used to convey information in the visualization, in order to illustrate multidimensional data.","54ddeb88":"#  we might use the Iris data from Scikit-Learn, where each sample is one of three types of flowers that has had the size of its petals and sepals carefully measured\n\nfrom sklearn.datasets import load_iris\niris = load_iris()\nfeatures = iris.data.T\nplt.scatter(features[0], features[1], alpha=0.2,s=100*features[3], c=iris.target, cmap='viridis')\nplt.xlabel(iris.feature_names[0])\nplt.ylabel(iris.feature_names[1])\n","3307d698":"# Basic Errorbars\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\nimport numpy as np\n\nx=np.linspace(0,10,50)\ndy=0.9\ny=np.sin(x)+dy*np.random.randn(50)\n\nplt.errorbar(x,y,yerr=dy,fmt='.k')\n\n# Here the fmt is a format code controlling the appearance of lines and points, and has the same syntax as the shorthand used in plt.plot","ebb2c2f7":"# In addition to these basic options, the errorbar function has many options to finetune the outputs. Using these additional options you can easily customize the aesthet\u2010ics of your errorbar plot\n\nplt.errorbar(x,y,yerr=dy,fmt='o',color='black',ecolor='lightgray',elinewidth=3,capsize=0)","e54d5869":"%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\nimport numpy as np\n\n# Visualizing a Three-Dimensional Function\n\n\n# We\u2019ll start by demonstrating a contour plot using a function z = f (x, y)\n\ndef f(x,y):\n    return np.sin(x)**10+np.cos(10+y*x)*np.cos(x)\n\n\n# A contour plot can be created with the plt.contour function. It takes three arguments: a grid of x values, a grid of y values, and a grid of z values. The x and y values\n# represent positions on the plot, and the z values will be represented by the contour levels. \n\nx=np.linspace(0,5,60)\ny=np.linspace(0,5,50)\n\n# most straightforward way to prepare such data is to use the np.meshgrid function, which builds two-dimensional grids from one-dimensional arrays\n\nX,Y=np.meshgrid(x,y)\nZ=f(X,Y)\n\n# Now let\u2019s look at this with a standard line-only contour plot\n\nplt.contour(X,Y,Z,color='black')\n\n# Notice that by default when a single color is used, negative values are represented by dashed lines, and positive values by solid lines.\n\n","39c98d5f":"plt.contour(X, Y, Z, 20, cmap='RdGy')  # we chose the RdGy (short for Red-Gray) colormap","d6c5745e":"# Our plot is looking nicer, but the spaces between the lines may be a bit distracting. We can change this by switching to a filled contour plot using the plt.contourf()\n# function (notice the f at the end), which uses largely the same syntax as plt.contour()\n\nplt.contourf(X, Y, Z, 20, cmap='RdGy')\nplt.colorbar()\n\n# The colorbar makes it clear that the black regions are \u201cpeaks,\u201d while the red regions are \u201cvalleys.\u201d","966d9c8a":"# A better way to handle this is to use the plt.imshow() function, which inter\u2010prets a two-dimensional grid of data as an image.\n\nplt.imshow(Z,extent=[0,5,0,5],origin='lower',cmap='RdGy')\nplt.colorbar()\nplt.axis(aspect='image')","4524758d":"# Finally, it can sometimes be useful to combine contour plots and image plots. For example, to create the effect shown in Figure 4-34, we\u2019ll use a partially transparent\n# background image (with transparency set via the alpha parameter) and over-plot contours with labels on the contours themselves (using the plt.clabel() function\n\ncontours=plt.contour(X,Y,Z,3,color='black')\nplt.clabel(contours,inline=True,fontsize=8)\n\nplt.imshow(Z,extent=[0,5,0,5],origin='lower',cmap='RdGy',alpha=0.5)\nplt.colorbar()\n\n# The combination of these three functions\u2014plt.contour, plt.contourf, and plt.imshow\u2014gives nearly limitless possibilities for displaying this sort of threedimensional data within a two-dimensional plot.\n","4ef89e46":"# A simple histogram can be a great first step in understanding a dataset. Earlier, we saw a preview of Matplotlib\u2019s histogram function\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nplt.style.use('seaborn-white')\ndata=np.random.randn(1000)\nplt.hist(data)\n\n\n","82d7d8ca":"# The hist() function has many options to tune both the calculation and the display; here\u2019s an example of a more customized histogram\n\nplt.hist(data, bins=30, alpha=1,histtype='stepfilled', color='red',edgecolor='none')\n\n# The plt.hist docstring has more information on other customization options avail\u2010 able. I find this combination of histtype='stepfilled' along with some transpar\u2010\n# ency alpha to be very useful when comparing histograms of several distributions","b6c234fb":"x1=np.random.normal(0,0.8,1000)\nx2=np.random.normal(1,2,1000)\nx3=np.random.normal(3,4,1000)\n\ntest = dict(histtype='stepfilled', alpha=0.3, bins=40)\n\nplt.hist(x1,**test)\nplt.hist(x2,**test)\nplt.hist(x3,**test)\n","2d0e1fda":"# If you would like to simply compute the histogram (that is, count the number of points in a given bin) and not display it, the np.histogram() function is available\n\ncounts, bin_edges = np.histogram(data, bins=5)\nprint(counts)\n","434b8e0c":"# Two-Dimensional Histograms and Binnings\n\n# Just as we create histograms in one dimension by dividing the number line into bins, we can also create histograms in two dimensions by dividing points among twodimensional bins\n\n# We\u2019ll start by defining some data\u2014an x and y array drawn from a multivariate Gaussian distribution\n\nmean = [0, 0]\ncov = [[1, 1], [1, 2]]\nx, y = np.random.multivariate_normal(mean, cov, 10000).T\n\n# plt.hist2d: Two-dimensional histogram\n\n# One straightforward way to plot a two-dimensional histogram is to use Matplotlib\u2019s plt.hist2d function\n\nplt.hist2d(x,y,bins=30,cmap='Blues')\ncb=plt.colorbar()\ncb.set_label('Counts in bin')\n","7cececae":"counts,xedges,yedges=np.histogram2d(x,y,bins=30)\n\n# For the generalization of this histogram binning in dimensions higher than two, see the np.histogramdd function","a3edb582":"# plt.hexbin: Hexagonal binnings\n# The two-dimensional histogram creates a tessellation of squares across the axes. Another natural shape for such a tessellation is the regular hexagon. For this purpose,\n# Matplotlib provides the plt.hexbin routine, which represents a two-dimensional dataset binned within a grid of hexagons\n\nplt.hexbin(x, y, gridsize=30, cmap='Blues')\ncb = plt.colorbar(label='count in bin')\n\n# plt.hexbin has a number of interesting options, including the ability to specify weights for each point, and to change the output in each bin to any NumPy aggregate\n","a149a6c4":"# Kernel density estimation\n\n# Another common method of evaluating densities in multiple dimensions is kernel density estimation (KDE)\n\n# One extremely quick and simple KDE implementation exists in the scipy.stats package. Here is a quick example of using the KDE on this data\n\nfrom scipy.stats import gaussian_kde\n\n# fit an array of size [Ndim, Nsamples]\n\ndata=np.vstack([x,y])\nkde=gaussian_kde(data)\n\n# evaluate on a regular grid\n\nxgrid = np.linspace(-3.5, 3.5, 40)\nygrid = np.linspace(-6, 6, 40)\nXgrid, Ygrid = np.meshgrid(xgrid, ygrid)\nZ = kde.evaluate(np.vstack([Xgrid.ravel(), Ygrid.ravel()]))\n\n# Plot the result as an image\n\nplt.imshow(Z.reshape(Xgrid.shape),origin='lower', aspect='auto', extent=[-3.5, 3.5, -6, 6],cmap='Blues')\ncb = plt.colorbar()\ncb.set_label(\"density\")\n\n\n","62583014":"# Plot legends give meaning to a visualization, assigning labels to the various plot ele\u2010ments. We previously saw how to create a simple legend; here we\u2019ll take a look at cus\u2010\n# tomizing the placement and aesthetics of the legend in Matplotlib\n\nimport matplotlib.pyplot as plt\nplt.style.use('classic')\n%matplotlib inline\nimport numpy as np\n\nx=np.linspace(0,10,1000)\nfig,ax=plt.subplots()\nax.plot(x,np.sin(x),'b',label='sine')\nax.plot(x, np.cos(x), '--r', label='Cosine')\nax.axis('equal')\nleg=ax.legend()\n","15dad586":"# But there are many ways we might want to customize such a legend. For example, we can specify the location and turn off the frame\n\nax.legend(loc='upper left',frameon='false')\nfig","877d834a":"# We can use the ncol command to specify the number of columns in the legend\n\nax.legend(frameon=False,loc='lower center',ncol=2)\nfig","a5d57693":"# We can use a rounded box (fancybox) or add a shadow, change the transparency (alpha value) of the frame, or change the padding around the text\n\nax.legend(fancybox=True, framealpha=1, shadow=True, borderpad=1)\nfig","a4c281a6":"# Choosing Elements for the Legend\n\n# The plt.plot() command is able to create multiple lines at once, and returns a list of created line instances. Passing any of\n# these to plt.legend() will tell it which to identify, along with the labels we\u2019d like to specify\n\ny=np.sin(x[:, np.newaxis] + np.pi * np.arange(0, 2, 0.5))\nlines=plt.plot(x,y)\n\n# lines is a list of plt.Line2D instances\nplt.legend(lines[:2], ['first', 'second'])\n","7e5f83ad":"# I generally find in practice that it is clearer to use the first method, applying labels to the plot elements you\u2019d like to show on the legend\n\nplt.plot(x, y[:, 0], label='first')\nplt.plot(x, y[:, 1], label='second')\nplt.plot(x, y[:, 2:])\nplt.legend(framealpha=1, frameon=True)","b4b8a715":"# Multiple Legends\n# creating a new legend artist from scratch, and then using the lower-level ax.add_artist() method to manually add the second artist to the plot\n\nfig,ax=plt.subplots()\nlines=[]\nstyles= ['-', '--', '-.', ':']\nx = np.linspace(0, 10, 1000)\n\nfor i in range(4):\n    lines += ax.plot(x, np.sin(x - i * np.pi \/ 2),styles[i], color='black')\n    \nax.axis('equal')    \n\n# specify the lines and labels of the first legend\nax.legend(lines[:2], ['line A', 'line B'],loc='upper right', frameon=False)\n\n# Create the second legend and add the artist manually.\nfrom matplotlib.legend import Legend\n\nleg = Legend(ax, lines[2:], ['line C', 'line D'],loc='lower right', frameon=False)\nax.add_artist(leg)\n\n\n","8ebf5372":"# Customizing Colorbars\n\nimport matplotlib.pyplot as plt\nplt.style.use('classic')\n\n%matplotlib inline\nimport numpy as np\n\n# As we have seen several times throughout this section, the simplest colorbar can be created with the plt.colorbar function \n\nx = np.linspace(0, 10, 1000)\nI = np.sin(x) * np.cos(x[:, np.newaxis])\n\nplt.imshow(I)\nplt.colorbar()\n\n","8e116f02":"# We can specify the colormap using the cmap argument to the plotting function that is creating the visualization\n\nplt.imshow(I,cmap='gray')","16694b2f":"from matplotlib.colors import LinearSegmentedColormap\n\ndef grayscale_cmap(cmap):\n \"\"\"Return a grayscale version of the given colormap\"\"\"\n cmap = plt.cm.get_cmap(cmap)\n colors = cmap(np.arange(cmap.N))\n # convert RGBA to perceived grayscale luminance\n # cf. http:\/\/alienryderflex.com\/hsp.html\n RGB_weight = [0.299, 0.587, 0.114]\n luminance = np.sqrt(np.dot(colors[:, :3] ** 2, RGB_weight))\n colors[:, :3] = luminance[:, np.newaxis]\n return LinearSegmentedColormap.from_list(cmap.name + \"_gray\", colors, cmap.N)\n","aba60214":"def view_colormap(cmap):\n \"\"\"Plot a colormap with its grayscale equivalent\"\"\"\n cmap = plt.cm.get_cmap(cmap)\n colors = cmap(np.arange(cmap.N))\n cmap = grayscale_cmap(cmap)\n grayscale = cmap(np.arange(cmap.N))\n fig, ax = plt.subplots(2, figsize=(6, 2),\n subplot_kw=dict(xticks=[], yticks=[]))\n ax[0].imshow([colors], extent=[0, 10, 0, 1])\n ax[1].imshow([grayscale], extent=[0, 10, 0, 1])\n    \n view_colormap('jet')   ","9bbdc57f":"# Color limits and extensions\n\n# Matplotlib allows for a large range of colorbar customization. The colorbar itself is simply an instance of plt.Axes, so all of the axes and tick formatting tricks we\u2019ve\n# learned are applicable. The colorbar has some interesting flexibility; for example, we can narrow the color limits and indicate the out-of-bounds values with a triangular\n# arrow at the top and bottom by setting the extend property. This might come in handy","7a3bfebb":"# make noise in 1% of the image pixels\nspeckles = (np.random.random(I.shape) < 0.01)\nI[speckles] = np.random.normal(0, 3, np.count_nonzero(speckles))\nplt.figure(figsize=(10, 3.5))\nplt.subplot(1, 2, 1)\nplt.imshow(I, cmap='RdBu')\nplt.colorbar()\nplt.subplot(1, 2, 2)\nplt.imshow(I, cmap='RdBu')\nplt.colorbar(extend='both')\nplt.clim(-1, 1)","986d3e4e":"# Discrete colorbars\n\n# Colormaps are by default continuous, but sometimes you\u2019d like to represent discrete values. The easiest way to do this is to use the plt.cm.get_cmap() function, and pass\n# the name of a suitable colormap along with the number of desired bins\n\nplt.imshow(I,cmap=plt.cm.get_cmap('Blues',6))\nplt.colorbar()\nplt.clim(-1,1)","09bc65e9":"# Example: Handwritten Digits \n\n# load images of the digits 0 through 5 and visualize several of them\n\nfrom sklearn.datasets import load_digits\ndigits=load_digits(n_class=6)\n\nfig,ax=plt.subplots(8,8,figsize=(6, 6))\nfor i, axi in enumerate(ax.flat):\n     axi.imshow(digits.images[i], cmap='binary')\n     axi.set(xticks=[], yticks=[])","9f192db6":"## project the digits into 2 dimensions using IsoMap\n\nfrom sklearn.manifold import Isomap\niso=Isomap(n_components=2)\nprojection=iso.fit_transform(digits.data)\n\n# plot the results\n\nplt.scatter(projection[:, 0], projection[:, 1], lw=0.1,c=digits.target, cmap=plt.cm.get_cmap('cubehelix', 6))\nplt.colorbar(ticks=range(6), label='digit value')\nplt.clim(-0.5, 5.5)\n\n","8f62a706":"%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-white')\nimport numpy as np\n\n# plt.axes: Subplots by Hand\n\nax1=plt.axes()  # standard axes\nax2=plt.axes([0.65,0.65,0.2,0.2])","d566f0b2":"# The equivalent of this command within the object-oriented interface is fig.add_axes(). Let\u2019s use this to create two vertically stacked axes\nfig=plt.figure()\nax1 = fig.add_axes([0.1, 0.5, 0.8, 0.4],xticklabels=[], ylim=(-1.2, 1.2))\nax2 = fig.add_axes([0.1, 0.1, 0.8, 0.4],ylim=(-1.2, 1.2))\nx=np.linspace(0,10)\nax1.plot(np.sin(x))\nax2.plot(np.cos(x))","866bcefe":"# plt.subplot: Simple Grids of Subplots\nfor i in range(1, 7):\n plt.subplot(2, 3, i)\n plt.text(0.5, 0.5, str((2, 3, i)),fontsize=18, ha='center')\n    ","c57d48a5":"# The command plt.subplots_adjust can be used to adjust the spacing between these plots.\n\nfig=plt.figure()\nfig.subplots_adjust(hspace=0.4,wspace=0.4)\nfor i in range(1,7):\n    ax = fig.add_subplot(2, 3, i)\n    ax.text(0.5, 0.5, str((2, 3, i)),fontsize=18, ha='center')","c7b71f70":"# plt.subplots: The Whole Grid in One Go\n\n# Here we\u2019ll create a 2\u00d73 grid of subplots, where all axes in the same row share their y-axis scale, and all axes in the same column share their x-axis scale \n\nfig,ax= plt.subplots(2,3,sharex='col',sharey='row')\n","782c3ce4":"# # axes are in a two-dimensional array, indexed by [row, col]\nfor i in range(2):\n    for j in range(3):\n        ax[i,j].text(0.5,0.5,str((i,j)),fontsize=18,ha='center')\n        \nfig\n\n# In comparison to plt.subplot(), plt.subplots() is more consistent with Python\u2019s conventional 0-based indexing","a4c6bca9":"# plt.GridSpec: More Complicated Arrangements\n\ngrid=plt.GridSpec(2,3,wspace=0.4,hspace=0.4)\n\n#From this we can specify subplot locations and extents using the familiar Python slic\u2010ing syntax \n\nplt.subplot(grid[0,0])\nplt.subplot(grid[0, 1:])\nplt.subplot(grid[1, :2])\nplt.subplot(grid[1, 2])","63f506d8":"# # Create some normally distributed data\n\n# Create some normally distributed data\nmean = [0, 0]\ncov = [[1, 1], [1, 2]]\nx, y = np.random.multivariate_normal(mean, cov, 3000).T\n# Set up the axes with gridspec\nfig = plt.figure(figsize=(6, 6))\ngrid = plt.GridSpec(4, 4, hspace=0.2, wspace=0.2)\nmain_ax = fig.add_subplot(grid[:-1, 1:])\ny_hist = fig.add_subplot(grid[:-1, 0], xticklabels=[], sharey=main_ax)\nx_hist = fig.add_subplot(grid[-1, 1:], yticklabels=[], sharex=main_ax)\n\n\n# scatter points on the main axes\nmain_ax.plot(x, y, 'ok', markersize=3, alpha=0.2)\n# histogram on the attached axes\nx_hist.hist(x, 40, histtype='stepfilled',\norientation='vertical', color='gray')\nx_hist.invert_yaxis()\ny_hist.hist(y, 40, histtype='stepfilled',orientation='horizontal', color='gray')\ny_hist.invert_xaxis()\n","b0df2453":"# Text and Annotation\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nplt.style.use('seaborn-whitegrid')\nimport numpy as np\nimport pandas as pd","4e959393":"fig,ax=plt.subplots(facecolor='lightgray')\nax.axis([0,10,0,10])\n\n# transform=ax.transData is the default, but we'll specify it anyway\n\nax.text(1,5,\".Data:(1,5)\",transform=ax.transData)\nax.text(0.5, 0.1, \". Axes: (0.5, 0.1)\", transform=ax.transAxes)\nax.text(0.2, 0.2, \". Figure: (0.2, 0.2)\", transform=fig.transFigure)\n\nax.set_ylim(-6,6)\nax.set_xlim(0,2)\nfig","1e0a1b86":"# Arrows and Annotation\n\n# using the plt.annotate() function. This function creates some text and an arrow, and the arrows can be very flexibly specified.\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nx = np.linspace(0, 20, 1000)\nax.plot(x, np.cos(x))\nax.axis('equal')\n\nax.annotate('local maximum', xy=(6.28, 1), xytext=(10, 4),arrowprops=dict(facecolor='red', shrink=5.05))\nax.annotate('local minimum', xy=(5 * np.pi, -1), xytext=(2, -6),arrowprops=dict(arrowstyle=\"->\",connectionstyle=\"angle3,angleA=0,angleB=-90\"))","e8688784":"# The arrow style is controlled through the arrowprops dictionary, which has numerous options available.\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nx = np.linspace(0, 20, 2000)\nax.plot(x, np.cos(x))\nax.axis('equal')","3427a8b8":"# Customizing Ticks #Major and Minor Ticks\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\nimport numpy as np\n\nax = plt.axes(xscale='log', yscale='log')\n\nprint(ax.xaxis.get_major_locator())\nprint(ax.xaxis.get_minor_locator())","241bdfaa":"print(ax.xaxis.get_major_formatter())\nprint(ax.xaxis.get_minor_formatter())","2a345714":"# Hiding Ticks or Labels\n\n# the most common tick\/label formatting operation is the act of hiding ticks or labels. We can do this using plt.NullLocator() and plt.NullFormatter()\n\nax=plt.axes()\nax.plot(np.random.rand(50))\n\nax.yaxis.set_major_locator(plt.NullLocator())\nax.xaxis.set_major_formatter(plt.NullFormatter())\n","68062669":"fig,ax=plt.subplots(5,5,figsize=(5,5))\nfig.subplots_adjust(hspace=0,wspace=0)\n\n# Get some face data from scikit-learn\n\nfrom sklearn.datasets import fetch_olivetti_faces\nfaces = fetch_olivetti_faces().images\n\nfor i in range(5):\n    for j in range(5):\n        ax[i, j].xaxis.set_major_locator(plt.NullLocator())\n        ax[i, j].yaxis.set_major_locator(plt.NullLocator())\n        ax[i, j].imshow(faces[10 * i + j], cmap=\"bone\")","6661ad27":"# Reducing or Increasing the Number of Ticks\n\nfig,ax=plt.subplots(4,4,sharex=True,sharey=True)","e5a99bda":"# plt.MaxNLocator(), which allows us to specify the maximum number of ticks that will be displayed\n# # For every axis, set the x and y major locator\n\nfor axi in ax.flat:\n     axi.xaxis.set_major_locator(plt.MaxNLocator(3))\n     axi.yaxis.set_major_locator(plt.MaxNLocator(3))\n\n    \nfig\n","4fc4a21d":"# Fancy Tick Formats\n\n# Plot a sine and cosine curve\nfig, ax = plt.subplots()\nx = np.linspace(0, 3 * np.pi, 1000)\nax.plot(x, np.sin(x), lw=3, label='Sine')\nax.plot(x, np.cos(x), lw=3, label='Cosine')\n\n# Set up grid, legend, and limits\n\nax.grid(True)\nax.legend(frameon=False)\nax.axis('equal')\nax.set_xlim(0, 3 * np.pi)\n\n\nax.xaxis.set_major_locator(plt.MultipleLocator(np.pi \/ 2))\nax.xaxis.set_minor_locator(plt.MultipleLocator(np.pi \/ 4))\nfig","452cca1e":"def format_func(value,tick_number):\n# find number of multiples of pi\/2\n# we\u2019ll instead use plt.FuncFormatter, which accepts a user-defined function giving fine-grained control over the tick outputs\n    N=int(np.round(2*value\/np.pi))\n    if N==0:\n        return \"0\"\n    elif N==1:\n        return r\"$\\pi\/2$\"\n    elif N==2:\n        return r\"$\\pi$\"\n    elif N%2>0:\n        return r\"${0}\\pi\/2$\".format(N)\n    else:\n        return r\"${0}\\pi$\".format(N \/\/ 2)\n\n\nax.xaxis.set_major_formatter(plt.FuncFormatter(format_func))\n\nfig\n    \n    ","3abd855f":"# Plot Customization by Hand\n\nimport matplotlib.pyplot as plt\nplt.style.use('classic')\nimport numpy as np\n%matplotlib inline\n\nx=np.random.randn(1000)\nplt.hist(x)\n\n# We can adjust this by hand to make it a much more visually pleasing plot\n\n\n# draw solid white grid lines\nplt.grid(color='w', linestyle='solid')\n\n# hide axis spines\nfor spine in ax.spines.values():\n    spine.set_visible(False)\n\n\n","cb6bfaac":"#Changing the Defaults: rcParams\n# We\u2019ll start by saving a copy of the current rcParams dictionary, so we can easily reset these changes in the current session\n\nIPython_default=plt.rcParams.copy()\n\n#Now we can use the plt.rc function to change some of these settings\n\nfrom matplotlib import cycler\ncolors=cycler('color',['#EE6666', '#3388BB', '#9988DD','#EECC55', '#88BB44', '#FFBBBB'])\nplt.rc('axes', facecolor='#E6E6E6', edgecolor='none',axisbelow=True, grid=True, prop_cycle=colors)\nplt.rc('grid', color='w', linestyle='solid')\nplt.rc('xtick', direction='out', color='gray')\nplt.rc('ytick', direction='out', color='gray')\nplt.rc('patch', edgecolor='#E6E6E6')\nplt.rc('lines', linewidth=2)\n\nplt.hist(x)","4da7dfe7":"for i in range(4):\n    plt.plot(np.random.rand(10))\n    ","9e71d61f":"# Stylesheets\n# The available styles are listed in plt.style.available\n\nplt.style.available[:5]\n\n#The basic way to switch to a stylesheet is to call\n\n","a52728cb":"# Let\u2019s create a function that will make two basic types of plot:\n\ndef hist_and_lines():\n    np.random.seed(0)\n    fig,ax=plt.subplots(1,2,figsize=(11, 4))\n    ax[0].hist(np.random.randn(1000))\n    for i in range(3):\n        ax[1].plot(np.random.rand(10))\n    ax[1].legend(['a', 'b', 'c'], loc='lower left') ","dbd14ff6":"#Default style\n\n# reset rcParams\n\nhist_and_lines()","bd8a9f63":"#FiveThirtyEight style\nwith plt.style.context('fivethirtyeight'):\n    hist_and_lines()","4640d46a":"# ggplot\nwith plt.style.context('ggplot'):\n hist_and_lines()","c96b5411":"#Bayesian Methods for Hackers style\nwith plt.style.context('bmh'):\n hist_and_lines()","413f9a07":"# Dark background\n\nwith plt.style.context('dark_background'):\n     hist_and_lines()","a3f33b49":"# Grayscale\nwith plt.style.context('grayscale'):\n     hist_and_lines()","7af53379":"# Seaborn style\n\nimport seaborn\nhist_and_lines()","5977f7af":"# We enable three-dimensional plots by importing the mplot3d toolkit\nfrom mpl_toolkits import mplot3d\n\n# Once this submodule is imported, we can create a three-dimensional axes by passing the keyword projection='3d' to any of the normal axes creation routines\n\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = plt.axes(projection='3d')","feb6d95b":"# Three-Dimensional Points and Lines\n#we can create these using the ax.plot3D and ax.scatter3D functions.\n\nax=plt.axes(projection='3d')\n# Data for a three-dimensional line\n\nzline=np.linspace(0,15,1000)\nyline=np.cos(zline)\nxline=np.sin(zline)\n\nax.plot3D(xline,yline,zline,'red')\n\n## Data for three-dimensional scattered points\n\nzdata = 15 * np.random.random(100)\nxdata = np.sin(zdata) + 0.1 * np.random.randn(100)\nydata = np.cos(zdata) + 0.1 * np.random.randn(100)\nax.scatter3D(xdata, ydata, zdata, c=zdata, cmap='Greens')\n\n\n","bce157d4":"#Three-Dimensional Contour Plots\n\ndef f(x,y):\n    return np.sin(np.sqrt(x**2+y**2))\n\nx = np.linspace(-6, 6, 30)\ny = np.linspace(-6, 6, 30)\n\nX,Y=np.meshgrid(x,y)\nZ=f(X,Y)\n\nfig=plt.figure()\nax = plt.axes(projection='3d')\nax.contour3D(X, Y, Z, 50, cmap='binary')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\n\n#Sometimes the default viewing angle is not optimal, in which case we can use the view_init method to set the elevation and azimuthal angles. \n\nax.view_init(60,35)\nfig","47483667":"#Wireframes and Surface Plots\nfig=plt.figure()\nax = plt.axes(projection='3d')\nax.plot_wireframe(X, Y, Z, color='black')\nax.set_title('wireframe')","18f59ddc":"# A surface plot is like a wireframe plot, but each face of the wireframe is a filled poly\u2010gon. Adding a colormap to the filled polygons can aid perception of the topology of\n# the surface being visualized\n\nax = plt.axes(projection='3d')\nax.plot_surface(X, Y, Z, rstride=1, cstride=1,cmap='viridis', edgecolor='none')\nax.set_title('surface')","d383dee5":"r=np.linspace(0,6,20)\ntheta = np.linspace(-0.9 * np.pi, 0.8 * np.pi, 40)\nr,theta=np.meshgrid(r,theta)\nX=r*np.sin(theta)\nY=r*np.cos(theta)\nZ=f(X,Y)\nax = plt.axes(projection='3d')\nax.plot_surface(X, Y, Z, rstride=1, cstride=1,cmap='viridis', edgecolor='none')","22f00d53":"# Surface Triangulations\n\ntheta = 2 * np.pi * np.random.random(1000)\nr = 6 * np.random.random(1000)\nx = np.ravel(r * np.sin(theta))\ny = np.ravel(r * np.cos(theta))\nz = f(x, y)\n\n# We could create a scatter plot of the points to get an idea of the surface we\u2019re sampling from\n\nax=plt.axes(projection='3d')\nax.scatter(x,y,z,c=z,cmap='viridis',linewidth=0.5)\n\n","e657a288":"# The function that will help us in this case is ax.plot_trisurf, which creates a surface by first finding a set of triangles formed\n# between adjacent points\n\nax=plt.axes(projection='3d')\nax.plot_trisurf(x,y,z,cmap='viridis',edgecolor='none')","3a3d6ca9":"# Example: Visualizing a M\u00f6bius strip\ntheta=np.linspace(0,2*np.pi,30)\nw=np.linspace(-0.25,0.25,8)\nw,theta=np.meshgrid(w,theta)\nphi=0.5*theta\n\n# radius in x-y plane\nr = 1 + w * np.cos(phi)\n\nx = np.ravel(r * np.cos(theta))\ny = np.ravel(r * np.sin(theta))\nz = np.ravel(w * np.sin(phi))          \n","6885acfa":"# triangulate in the underlying parameterization\n\nfrom matplotlib.tri import Triangulation\ntri = Triangulation(np.ravel(w), np.ravel(theta))\nax = plt.axes(projection='3d')\nax.plot_trisurf(x, y, z, triangles=tri.triangles,cmap='viridis', linewidths=0.2)\nax.set_xlim(-1, 1); ax.set_ylim(-1, 1); ax.set_zlim(-1, 1)","3922f106":"#Seaborn Versus Matplotlib\n\nimport matplotlib.pyplot as plt\nplt.style.use('classic')\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\n\n#Now we create some random walk data:\n\n# Create some data\n\nrng = np.random.RandomState(0)\nx=np.linspace(0,10,500)\ny=np.cumsum(rng.randn(500,6),0)\n\n# Plot the data with Matplotlib defaults\nplt.plot(x,y)\nplt.legend('ABCDEF',ncol=2,loc='upper left')","f037b8fa":"import seaborn as sns\nsns.set()\n\n#Now let\u2019s rerun the same two lines as before\nplt.plot(x,y)\nplt.legend('ABCDEF', ncol=2, loc='upper left')","1d244331":"#Histograms, KDE, and densities\n# Often in statistical data visualization, all you want is to plot histograms and joint dis\u2010tributions of variables\n\ndata = np.random.multivariate_normal([0, 0], [[5, 2], [2, 2]], size=2000)\ndata = pd.DataFrame(data, columns=['x', 'y'])\n\nfor col in 'xy':\n     plt.hist(data[col], alpha=0.5)","ed43e7da":"# Rather than a histogram, we can get a smooth estimate of the distribution using a kernel density estimation, which Seaborn does with sns.kdeplot\n\nfor col in 'xy':\n    sns.kdeplot(data[col],shade=True)","c4a0c7d9":"# Histograms and KDE can be combined using distplot\n\nsns.distplot(data['x'])\nsns.distplot(data['y'])","abb8549b":"# If we pass the full two-dimensional dataset to kdeplot, we will get a two-dimensional visualization of the data\nsns.kdeplot(data)","22d5f1a7":"# We can see the joint distribution and the marginal distributions together using sns.jointplot. For this plot, we\u2019ll set the style to a white background\n\nwith sns.axes_style('white'):\n    sns.jointplot(\"x\",\"y\",data,kind='kde')","25676b01":"# There are other parameters that can be passed to jointplot\u2014for example, we can use a hexagonally based histogram instead\nwith sns.axes_style('white'):\n    sns.jointplot(\"x\",\"y\",data,kind='hex')","9e5ab122":"# Pair plots\n\niris=sns.load_dataset(\"iris\")\niris.head()","f3d136b8":"# Visualizing the multidimensional relationships among the samples is as easy as call\u2010ing sns.pairplot\n\nsns.pairplot(iris,hue='species',size=2.5)","240a6960":"# Faceted histograms\n\ntips=sns.load_dataset('tips')\ntips.head()","42fa445a":"tips['tip_pct'] = 100 * tips['tip'] \/ tips['total_bill']\ngrid = sns.FacetGrid(tips, row=\"sex\", col=\"time\", margin_titles=True)\ngrid.map(plt.hist, \"tip_pct\", bins=np.linspace(0, 40, 15))","a212f377":"# Factor plots\n\nwith sns.axes_style(style='ticks'):\n g = sns.factorplot(\"day\", \"total_bill\", \"sex\", data=tips, kind=\"box\")\n g.set_axis_labels(\"Day\", \"Total Bill\");\n","12cee4fb":"# Joint distributions\n\n# Similar to the pair plot we saw earlier, we can use sns.jointplot to show the jointdistribution between different datasets, along with the associated marginal distribu\u2010tions\nwith sns.axes_style('white'):\n sns.jointplot(\"total_bill\", \"tip\", data=tips, kind='hex')","c6a15d66":"# The joint plot can even do some automatic kernel density estimation and regression\n\nsns.jointplot(\"total_bill\",\"tip\",data=tips,kind='reg')","9c07e522":"# Bar plots\n\n# Time series can be plotted with sns.factorplot\n\nplanets=sns.load_dataset('planets')\nplanets.head()","8c76efd3":"with sns.axes_style('white'):\n    g=sns.factorplot(\"year\",data=planets,aspect=2,kind=\"count\",color=\"steelblue\")\n    g.set_xticklabels(step=5)","26b8b7b3":"with sns.axes_style('white'):\n g = sns.factorplot(\"year\", data=planets, aspect=4.0, kind='count',hue='method', order=range(2001, 2015))\n g.set_ylabels('Number of Planets Discovered')\n\n    \n    ","05189262":"# import plotly\nimport plotly as py\nfrom plotly.offline import init_notebook_mode, iplot,plot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud","5c2c242c":"# pip install plotly==3.10.0","47ab82bd":"# Read data from input files for Seaborn Plots\n\nimport numpy as np\nimport csv as csv\nimport pandas as pd\n\nmedian_house_hold_in_come = pd.read_csv('\/kaggle\/input\/fatalpoliceshootingsintheus\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\npercentage_people_below_poverty_level = pd.read_csv('\/kaggle\/input\/fatalpoliceshootingsintheus\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\npercent_over_25_completed_highSchool = pd.read_csv('\/kaggle\/input\/fatalpoliceshootingsintheus\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\nshare_race_city = pd.read_csv('\/kaggle\/input\/fatalpoliceshootingsintheus\/ShareRaceByCity.csv\/ShareRaceByCity.csv', encoding=\"windows-1252\")\nkill = pd.read_csv('\/kaggle\/input\/fatalpoliceshootingsintheus\/PoliceKillingsUS.csv', encoding=\"windows-1252\")\n","c3964ed5":"median_house_hold_in_come.head(20)","a3a445ac":"percentage_people_below_poverty_level.head(20)","27e84e59":"percent_over_25_completed_highSchool.head(20)","09a985c1":"share_race_city.head(20)","e2ffe24f":"kill.head(20)","00c718df":"percentage_people_below_poverty_level['Geographic Area'].unique()","d30721e7":"# # Poverty rate of each state\npercentage_people_below_poverty_level.replace(['-'],0.0,inplace=True)\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float)\narea_list=list((percentage_people_below_poverty_level['Geographic Area'].unique()))\narea_poverty_ratio = []\nfor i in area_list:\n    x = percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area']==i]\n    area_poverty_rate = sum(x.poverty_rate)\/len(x)\n    area_poverty_ratio.append(area_poverty_rate)\ndata = pd.DataFrame({'area_list': area_list,'area_poverty_ratio':area_poverty_ratio})\nnew_index = (data['area_poverty_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data.reindex(new_index)\n\n# visualization\n\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xticks(rotation=45)\nplt.xlabel('states')\nplt.ylabel('Poverty Rate')\nplt.title('Poverty Rate Given States')","533f0c45":"kill.head()","b5230e68":"kill.name.value_counts()","48f93c95":"percent_over_25_completed_highSchool.info()","80096ae5":"# High school graduation rate of the population that is older than 25 in states\npercent_over_25_completed_highSchool.percent_completed_hs.replace(['-'],0.0,inplace = True)\npercent_over_25_completed_highSchool.percent_completed_hs = percent_over_25_completed_highSchool.percent_completed_hs.astype(float)\narea_list = list(percent_over_25_completed_highSchool['Geographic Area'].unique())\narea_highschool = []\nfor i in area_list:\n    x = percent_over_25_completed_highSchool[percent_over_25_completed_highSchool['Geographic Area']==i]\n    area_highschool_rate = sum(x.percent_completed_hs)\/len(x)\n    area_highschool.append(area_highschool_rate)\n# sorting\ndata = pd.DataFrame({'area_list': area_list,'area_highschool_ratio':area_highschool})\nnew_index = (data['area_highschool_ratio'].sort_values(ascending=True)).index.values\nsorted_data2 = data.reindex(new_index)\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['area_list'], y=sorted_data2['area_highschool_ratio'])\nplt.xticks(rotation= 90)\nplt.xlabel('States')\nplt.ylabel('High School Graduate Rate')\nplt.title(\"Percentage of Given State's Population Above 25 that Has Graduated High School\")","fb965995":"percentage_people_below_poverty_level.head()","41307604":"percentage_people_below_poverty_level.info()","15e0f9d3":"percentage_people_below_poverty_level['Geographic Area'].unique()","9091b53a":"share_race_city.head()","ac2ac7ac":"# Percentage of state's population according to races that are black,white,native american, asian and hispanic\nshare_race_city.replace(['-'],0.0,inplace = True)\nshare_race_city.replace(['(X)'],0.0,inplace = True)\nshare_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']] = share_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']].astype(float)\narea_list = list(share_race_city['Geographic area'].unique())\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nfor i in area_list:\n    x = share_race_city[share_race_city['Geographic area']==i]\n    share_white.append(sum(x.share_white)\/len(x))\n    share_black.append(sum(x.share_black) \/ len(x))\n    share_native_american.append(sum(x.share_native_american) \/ len(x))\n    share_asian.append(sum(x.share_asian) \/ len(x))\n    share_hispanic.append(sum(x.share_hispanic) \/ len(x))\n    \n# Visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=share_white,y=area_list,color='green',alpha = 0.5,label='White' )\nsns.barplot(x=share_black,y=area_list,color='blue',alpha = 0.7,label='African American')\nsns.barplot(x=share_native_american,y=area_list,color='cyan',alpha = 0.6,label='Native American')\nsns.barplot(x=share_asian,y=area_list,color='yellow',alpha = 0.6,label='Asian')\nsns.barplot(x=share_hispanic,y=area_list,color='red',alpha = 0.6,label='Hispanic')\n\nax.legend(loc='lower right',frameon = True)\nax.set(xlabel='Percentage of Races', ylabel='States',title = \"Percentage of State's Population According to Races \")","4820b1e9":"# high school graduation rate vs Poverty rate of each state\nsorted_data['area_poverty_ratio'] = sorted_data['area_poverty_ratio']\/max( sorted_data['area_poverty_ratio'])\nsorted_data2['area_highschool_ratio'] = sorted_data2['area_highschool_ratio']\/max( sorted_data2['area_highschool_ratio'])\ndata = pd.concat([sorted_data,sorted_data2['area_highschool_ratio']],axis=1)\ndata.sort_values('area_poverty_ratio',inplace=True)\n\n# visualize\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='area_list',y='area_poverty_ratio',data=data,color='lime',alpha=0.8)\nsns.pointplot(x='area_list',y='area_highschool_ratio',data=data,color='red',alpha=0.8)\nplt.text(40,0.6,'high school graduate ratio',color='red',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'poverty ratio',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('States',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('High School Graduate  VS  Poverty Rate',fontsize = 20,color='blue')\nplt.grid()","7edacbaa":"data.head()","3bbbed26":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# pearsonr= if it is 1, there is positive correlation and if it is, -1 there is negative correlation.\n# If it is zero, there is no correlation between variables\n# Show the joint distribution using kernel density estimation\n\nsns.jointplot(data.area_poverty_ratio, data.area_highschool_ratio)\nplt.savefig('graph.png')\nplt.show()","bd02d177":"data.head()","ed25d9b2":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\ng = sns.jointplot(\"area_poverty_ratio\", \"area_highschool_ratio\", data=data,size=5, ratio=3, color=\"r\")\n","617f740b":"kill.race.head()","96cd3e40":"kill.race.value_counts","06dd359d":"# Race rates according in kill data \nkill.race.dropna(inplace = True)\nlabels = kill.race.value_counts().index\ncolors = ['grey','blue','red','yellow','green','brown']\nexplode = [0,0,0,0,0,0]\nsizes = kill.race.value_counts().values\n\n# visual\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Killed People According to Races',color = 'blue',fontsize = 15)","5d8dbc19":"data.head()","03f870e7":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# lmplot \n# Show the results of a linear regression within each dataset\nsns.lmplot(x=\"area_poverty_ratio\", y=\"area_highschool_ratio\", data=data)\nplt.show()","d08e1e66":"data.head()","0a35f26c":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# cubehelix plot\nsns.kdeplot(data.area_poverty_ratio, data.area_highschool_ratio, shade=True, cut=3)\nplt.show()","27f48db8":"data.head()","8c4e17c3":"# Show each distribution with both violins and points\n# Use cubehelix to get a custom sequential palette\npal = sns.cubehelix_palette(2, rot=-.6, dark=.4)\nsns.violinplot(data=data, palette=pal, inner=\"points\")\nplt.show()","bd4ab364":"data.corr()","e6ea9cab":"#correlation map\n# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\nf,ax = plt.subplots(figsize=(5, 10))\nsns.heatmap(data.corr(), annot=True, linewidths=0.8,linecolor=\"blue\", fmt= '.1f',ax=ax)\nplt.show()","4e273e75":"kill.head()","ea162346":"kill.manner_of_death.unique()","d3193bb5":"sns.boxplot(x=\"gender\", y=\"age\", hue=\"manner_of_death\", data=kill, palette=\"PRGn\")\nplt.show()","bf258cbf":"sns.swarmplot(x=\"gender\", y=\"age\",hue=\"manner_of_death\", data=kill)\nplt.show()","3ee91998":"data.head","daf25de1":"sns.pairplot(data)\nplt.show()","91b32c22":"kill.gender.value_counts()","3c5f7ba6":"kill.head()","ccdf26d9":"# kill properties\n# Manner of death\nsns.countplot(kill.gender)\n","10b299e5":"# kill weapon\narmed = kill.armed.value_counts()\n#print(armed)\nplt.figure(figsize=(10,7))\nsns.barplot(x=armed[:7].index,y=armed[:7].values)\nplt.ylabel('Number of Weapon')\nplt.xlabel('Weapon Types')\nplt.title('Kill weapon',color = 'blue',fontsize=15)","68a1e47b":"# Race of killed people\nkill.race.value_counts()\nsns.countplot(data=kill,x='race')\nplt.title('Race of killed people',color = 'blue',fontsize=15)","1aee8a93":"# Most dangerous cities\ncity = kill.city.value_counts()\nplt.figure(figsize=(12,8))\nsns.barplot(x=city[:12].index,y=city[:12].values)\nplt.xticks(rotation=60)\nplt.title('Most dangerous cities',color = 'red',fontsize=20)","2f122e5b":"# most dangerous states\nstate = kill.state.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=state[:20].index,y=state[:20].values)\nplt.title('Most dangerous state',color = 'blue',fontsize=15)","50b08f93":"# plotly\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n# word cloud library\nfrom wordcloud import WordCloud\n","4acf6d10":"# Read data from input files for Plotly Plots\n\nimport numpy as np\nimport csv as csv\nimport pandas as pd\n\n#educational_attainment_supplementary_data = pd.read_csv(\"\/kaggle\/input\/worlduniversityrankings-data\/educational_attainment_supplementary_data.csv\")\ncwurData = pd.read_csv('\/kaggle\/input\/worlduniversityrankings-data\/cwurData.csv')\n#education_expenditure_supplementary_data = pd.read_csv(\"\/kaggle\/input\/worlduniversityrankings-data\/education_expenditure_supplementary_data.csv\")\nschool_and_country_table = pd.read_csv('\/kaggle\/input\/worlduniversityrankings-data\/school_and_country_table.csv')\nshanghaiData = pd.read_csv('\/kaggle\/input\/worlduniversityrankings-data\/shanghaiData.csv')\ntimesData = pd.read_csv('\/kaggle\/input\/worlduniversityrankings-data\/timesData.csv')\n","9711f0f6":"timesData.head(20)","b9bb5ea6":"timesData.info","4a9cfa67":"# prepare data frame\ndf = timesData.iloc[:100,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.citations,\n                    mode = \"lines\",\n                    name = \"citations\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df.university_name)\n\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.teaching,\n                    mode = \"lines+markers\",\n                    name = \"teaching\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.university_name)\n\ndata = [trace1, trace2]\nlayout = dict(title = 'Citation and Teaching vs World Rank of Top 100 Universities',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","41910025":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:100,:]\ndf2015 = timesData[timesData.year == 2015].iloc[:100,:]\ndf2016 = timesData[timesData.year == 2016].iloc[:100,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2014.world_rank,\n                    y = df2014.citations,\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2014.university_name)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2015.world_rank,\n                    y = df2015.citations,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2015.university_name)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2016.world_rank,\n                    y = df2016.citations,\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2016.university_name)\n\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Citation',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","3548485c":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\ndf2014","40842d13":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.citations,\n                name = \"citations\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\n# create trace2 \ntrace2 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.teaching,\n                name = \"teaching\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","204afb8e":"# data preparation\ndf2016 = timesData[timesData.year == 2016].iloc[:7,:]\npie1 = df2016.num_students\npie1_list = [float(each.replace(',', '.')) for each in df2016.num_students]  # str(2,4) => str(2.4) = > float(2.4) = 2.4\nlabels = df2016.university_name\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1_list,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Number Of Students Rates\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Universities Number of Students rates\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Number of Students\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","b307e234":"df2016.info()","954ca3e4":"# data preparation\ndf2016 = timesData[timesData.year == 2016].iloc[:20,:]\nnum_students_size  = [float(each.replace(',', '.')) for each in df2016.num_students]\ninternational_color = [float(each) for each in df2016.international]\ndata = [\n    {\n        'y': df2016.teaching,\n        'x': df2016.world_rank,\n        'mode': 'markers',\n        'marker': {\n            'color': international_color,\n            'size': num_students_size,\n            'showscale': True\n        },\n        \"text\" :  df2016.university_name    \n    }\n]\niplot(data)","8dcaddf3":"# prepare data\nx2011 = timesData.student_staff_ratio[timesData.year == 2011]\nx2012 = timesData.student_staff_ratio[timesData.year == 2012]\n\ntrace1 = go.Histogram(\n    x=x2011,\n    opacity=0.75,\n    name = \"2011\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2012,\n    opacity=0.75,\n    name = \"2012\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' students-staff ratio in 2011 and 2012',\n                   xaxis=dict(title='students-staff ratio'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","fdb8d575":"# data prepararion\nx2011 = timesData.country[timesData.year == 2011]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","16e57be6":"# data preparation\nx2015 = timesData[timesData.year == 2015]\n\ntrace0 = go.Box(\n    y=x2015.total_score,\n    name = 'total score of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=x2015.research,\n    name = 'research of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","075b5763":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndataframe = timesData[timesData.year == 2015]\ndata2015 = dataframe.loc[:,[\"research\",\"international\", \"total_score\"]]\ndata2015[\"index\"] = np.arange(1,len(data2015)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=750, width=750)\niplot(fig)","a898e555":"# Table of Contents\n\n* [Section  1 - Importing matplotlib & Classic Graph](#section-one)  \n* [Section 2 - loading from a script](#section-two)\n* [Section 3 - Adjusting the Plot: Line Colors and Styles](#section-Three)\n* [Section 4 - Simple Scatter Plots](#section-four)\n* [Section 5 - Visualizing Errors Density and Contour Plots](#section-five)\n* [Section 6 - Histograms, Binnings, and Density](#section-six)\n* [Section 7 - Customizing Plot Legends](#section-seven)\n* [Section 8 - Multiple Subplots](#section-eight)\n* [Section 9 - Multiple Plots](#section-nine)\n* [Section 10 - Text & Annotation\/Text Position\/Arrow Position](#section-ten)\n* [Section 11 - Customizing Matplotlib: Configurations and Stylesheets](#section-eleven)\n* [Section 12 - Three-Dimensional Plotting in Matplotlib](#section-twelve)\n* [Section 13 - Visualization with Seaborn](#section-thirteen)\n* [Section 14 - Visualization with Plotly](#section-fourteen)\n* [Section 15 - Read data from input files for Seaborn Plots](#section-fifteen)\n* [Section 16 - Bar Plot using Seaborn](#section-sixteen)\n* [Section 17 - Point Plot using Seaborn](#section-seventeen)\n* [Section 18 - Joint Plot using Seaborn](#section-eighteen)\n* [Section 19 - Pie Plot using Seaborn](#section-ninteen)\n* [Section 20 - Lm Plot using Seaborn](#section-twenty)\n* [Section 21 - Kde Plot using Seaborn](#section-twentyone)\n* [Section 22 - Violin Plot using Seaborn](#section-twentytwo)\n* [Section 23 - Heatmap](#section-twentythree)\n* [Section 24 - Box plot](#section-twentyfour)\n* [Section 25 - Swarm Plot](#section-twentyfive)\n* [Section 26 - Pair Plot](#section-twentysix)\n* [Section 27 - Count Plot](#section-twentyseven)\n* [Section 28 - Read data from input files for Plotly Plots](#section-twentyeight)\n* [Section 29 - Line Charts Plotly Plots](#section-twentynine)\n* [Section 30 - Scatter Charts Plotly Plots](#section-thirty)\n* [Section 31 - Bar Charts Plotly Plots](#section-thirtyone)\n* [Section 32 - Pie Charts Plotly Plots](#section-thirtytwo)\n* [Section 33 - Bubble Charts Plotly Plots](#section-thirtythree)\n* [Section 34 - Histogram Plotly Plots](#section-thirtyfour)\n* [Section 35 - Word Cloud Plotly Plots](#section-thirtyfive)\n* [Section 36 - Box Plots Plotly Plots](#section-thirtysix)\n* [Section 37 - Scatter Matrix Plotly Plots](#section-thirtyseven)\n","4dff5311":"Now let\u2019s take a look at how it works with Seaborn. As we will see, Seaborn has many\nof its own high-level plotting routines, but it can also overwrite Matplotlib\u2019s default\nparameters and in turn get even simple Matplotlib scripts to produce vastly superior\noutput. We can set the style by calling Seaborn\u2019s set() method. By convention, Sea\u2010\nborn is imported as sns","ffef7d1c":"<a id=\"section-sixteen\"><\/a>\n# Section 16 - Bar Plot using Seaborn","a6cc7795":"<a id=\"section-twentysix\"><\/a>\n# Section 26 - Pair Plot","19327444":"<a id=\"section-twentyfour\"><\/a>\n# Section 24 - Box plot","34f430ca":"Sometimes it is useful to display three-dimensional data in two dimensions using\ncontours or color-coded regions. There are three Matplotlib functions that can be\nhelpful for this task: plt.contour for contour plots, plt.contourf for filled contour\nplots, and plt.imshow for showing images.","845d608e":"<a id=\"section-fifteen\"><\/a>\n# Section 15 - Read data from input files for Seaborn Plots","c3d72360":"<a id=\"section-thirteen\"><\/a>\n# Section 13 - Visualization with Seaborn","1c3e1fb0":"<a id=\"section-eight\"><\/a>\n# Section 8 - Multiple Subplots\n","3fc62a28":"The most basic method of creating an axes is to use the plt.axes function. As we\u2019ve\nseen previously, by default this creates a standard axes object that fills the entire fig\u2010\nure. plt.axes also takes an optional argument that is a list of four numbers in the\nfigure coordinate system. These numbers represent [bottom, left, width,\nheight] in the figure coordinate system, which ranges from 0 at the bottom left of the\nfigure to 1 at the top right of the figure.\nFor example, we might create an inset axes at the top-right corner of another axes by\nsetting the x and y position to 0.65 (that is, starting at 65% of the width and 65% of\nthe height of the figure) and the x and y extents to 0.2 (that is, the size of the axes is\n20% of the width and 20% of the height of the figure). ","ccee4822":"<a id=\"section-ninteen\"><\/a>\n# Section 19 - Pie Plot using Seaborn","2451daed":"<a id=\"section-Three\"><\/a>\n# Section 3 - Adjusting the Plot: Line Colors and Styles\n","9fd822ca":"<a id=\"section-thirtyone\"><\/a>\n# Section 31 - Bar Charts Plotly Plots","e887f5e6":"<a id=\"section-thirtytwo\"><\/a>\n# Section 32 - Pie Charts Plotly Plots","9db3d92c":"<a id=\"section-twenty\"><\/a>\n# Section 20 - Lm Plot using Seaborn","faa3d95b":"<a id=\"section-twentythree\"><\/a>\n# Section 23 - Heatmap","bc892c87":"<a id=\"section-nine\"><\/a>\n# Section 9 - Multiple Plots","ca8e5e0a":"<a id=\"section-thirtyfour\"><\/a>\n# Section 34 - Histogram Plotly Plots","719f2ae4":"<a id=\"section-thirtyseven\"><\/a>\n# Section 37 - Scatter Matrix Plotly Plots","df459c56":"<a id=\"section-twentyone\"><\/a>\n# Section 21 - Kde Plot using Seaborn","91a4584a":"<a id=\"section-seven\"><\/a>\n# Section 7 - Customizing Plot Legends","27f52431":"There are a few potential gotchas with imshow(), however:\n\n\u2022 plt.imshow() doesn\u2019t accept an x and y grid, so you must manually specify the\nextent [xmin, xmax, ymin, ymax] of the image on the plot.\n\n\u2022 plt.imshow() by default follows the standard image array definition where the\norigin is in the upper left, not in the lower left as in most contour plots. This\nmust be changed when showing gridded data.\n\n\n\u2022 plt.imshow() will automatically adjust the axis aspect ratio to match the input\ndata; you can change this by setting, for example, plt.axis(aspect='image') to\nmake x and y units match.\n","ca74117a":"<a id=\"section-thirtyfive\"><\/a>\n# Section 35 - Word Cloud Plotly Plots","a57f19d3":"<a id=\"section-four\"><\/a>\n# Section 4 - Simple Scatter Plots","c17d3103":"<a id=\"section-twentyseven\"><\/a>\n# Section 27 - Count Plot","ac2b6b85":"<a id=\"section-six\"><\/a>\n# Section 6 - Histograms, Binnings, and Density","275b3536":"<a id=\"section-twentytwo\"><\/a>\n# Section 22 - Violin Plot using Seaborn","2476da96":"Plotting from an IPython shell\n\nIt can be very convenient to use Matplotlib interactively within an IPython shell. IPython is built to work well with Matplotlib if you specify Matplotlib\nmode. To enable this mode, you can use the %matplotlib magic command after start\u2010\ning ipython:","7eca03a2":"<a id=\"section-twentyfive\"><\/a>\n# Section 25 - Swarm Plot","ef279279":"<a id=\"section-one\"><\/a>\n# Section  1 - Importing matplotlib & Classic Graph","9acd0dba":"<a id=\"section-seventeen\"><\/a>\n# Section 17 - Point Plot using Seaborn","97266564":"#                                    Comprehensive Guide to--Matplotlib \/ Seaborn \/ Plotly\n\nMatplotlib is a multiplatform data visualization library built on NumPy arrays, and\ndesigned to work with the broader SciPy stack.One of Matplotlib\u2019s most important features is its ability to play well with many operating systems and graphics backends. Matplotlib supports dozens of backends and\noutput types, which means you can count on it to work regardless of which operating\nsystem you are using or which output format you wish.","58aadb1d":"Saving Figures to File\nOne nice feature of Matplotlib is the ability to save figures in a wide variety of for\u2010\nmats. You can save a figure using the savefig() command. For example, to save the\nprevious figure as a PNG file, you can run this:","b78b7d75":"<a id=\"section-fourteen\"><\/a>\n# Section 14 - Visualization with Plotly","df0fc7d0":"<a id=\"section-twentyeight\"><\/a>\n# Section 28 - Read data from input files for Plotly Plots","bd0b9dd7":"Just as with plt.hist, plt.hist2d has a number of extra options to fine-tune the plot\nand the binning, which are nicely outlined in the function docstring. Further, just as\nplt.hist has a counterpart in np.histogram, plt.hist2d has a counterpart in\nnp.histogram2d, which can be used as follows:","cbe712bb":"<a id=\"section-twelve\"><\/a>\n# Section 12 - Three-Dimensional Plotting in Matplotlib","08dac4fd":"<a id=\"section-five\"><\/a>\n# Section 5 - Visualizing Errors Density and Contour Plots","b4ff1015":"The file format is inferred from the extension of the given filename.\nDepending on what backends you have installed, many different file formats are\navailable. You can find the list of supported file types for your system by using the\nfollowing method of the figure canvas object:","bc711534":"<a id=\"section-thirty\"><\/a>\n# Section 30 - Scatter Charts Plotly Plots","b47c87d1":"<a id=\"section-ten\"><\/a>\n# Section 10 - Text & Annotation\/Text Position\/Arrow Position","63625ef7":"<a id=\"section-thirtysix\"><\/a>\n# Section 36 - Box Plots Plotly Plots","d20b0094":"<a id=\"section-two\"><\/a>\n# Section 2 - loading from a script","d8c1a52c":"![image.png](attachment:image.png)","589730c3":"<a id=\"section-eleven\"><\/a>\n# Section 11 - Customizing Matplotlib: Configurations and Stylesheets","ae93e8e6":"Plotting from an IPython notebook\n\nThe IPython notebook is a browser-based interactive data analysis tool that can com\u2010\nbine narrative, code, graphics, HTML elements, and much more into a single exe\u2010\ncutable document\n\nPlotting interactively within an IPython notebook can be done with the %matplotlib\ncommand, and works in a similar way to the IPython shell. In the IPython notebook,\nyou also have the option of embedding graphics directly in the notebook, with two\npossible options:\n\n\u2022 %matplotlib notebook will lead to interactive plots embedded within the\nnotebook\n\u2022 %matplotlib inline will lead to static images of your plot embedded in the\nnotebook\n\nFor this book, we will generally opt for %matplotlib inline:\n\n%matplotlib inline\n\nAfter you run this command (it needs to be done only once per kernel\/session), any\ncell within the notebook that creates a plot will embed a PNG image of the resulting\ngraphic\n\n\n","996607a1":"<a id=\"section-twentynine\"><\/a>\n# Section 29 - Line Charts Plotly Plots","60ffcfb7":"Plotly library: Plotly's Python graphing library makes interactive, publication-quality graphs online. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts.","03a6fa77":"<a id=\"section-eighteen\"><\/a>\n# Section 18 - Joint Plot using Seaborn","76cc2642":"Importing matplotlib\nJust as we use the np shorthand for NumPy and the pd shorthand for Pandas, we will\nuse some standard shorthands for Matplotlib imports:\n\nSetting Styles\nWe will use the plt.style directive to choose appropriate aesthetic styles for our fig\u2010\nures. Here we will set the classic style, which ensures that the plots we create use the\nclassic Matplotlib style:\n","90f317a2":"<a id=\"section-thirtythree\"><\/a>\n# Section 33 - Bubble Charts Plotly Plots"}}