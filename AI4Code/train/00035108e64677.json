{"cell_type":{"2fa1f27b":"code","f3c2de19":"code","56639d19":"code","13362913":"code","ab817107":"code","6092fe8c":"code","a0e5ace3":"code","8111e543":"code","1d07ce06":"code","32f1cff2":"code","977d9ffd":"code","697468b0":"code","bf152f54":"code","13abf70f":"code","67a91c07":"code","1e7877e9":"code","ac3558e5":"code","25ec8004":"code","fc04571f":"code","9e2306cf":"code","6382fc3c":"code","43903da9":"code","977285e4":"code","d4a278de":"markdown","84f836ca":"markdown","3496fbfe":"markdown","d75feb42":"markdown","aabc28d8":"markdown","214d8ef9":"markdown","395866fa":"markdown","e470479f":"markdown","5f5145c1":"markdown","f9a24fbd":"markdown","719854c4":"markdown"},"source":{"2fa1f27b":"# Basic Libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt # we only need pyplot\nsb.set() # set the default Seaborn style for graphics","f3c2de19":"#import test and train file\neverything = pd.read_json(\"..\/input\/whats-cooking\/train.json\")\ntest = pd.read_json(\"..\/input\/whats-cooking\/test.json\")","56639d19":"#making a dict of ingredients with their total used times in the data set\ningredientData = pd.DataFrame(everything[['ingredients']])\ningredientDict = {}\nfor i in range(0,39774):\n    for ingredient in ingredientData.iloc[i][0]:\n        if ingredient not in ingredientDict.keys():\n            ingredientDict[ingredient] = 1\n        else:\n            ingredientDict[ingredient]+=1","13362913":"#sorting the dictionary according to its value\nsorted_dict={}\nsorted_keys=sorted(ingredientDict, key=ingredientDict.get, reverse=True)\nfor r in sorted_keys:\n    sorted_dict[r]= ingredientDict[r]","ab817107":"#removing the common ingredients\nuseless=[]\nfor key in sorted_dict.keys():\n    useless.append(key)\n    if len(useless)==12:\n        break\nfor i in useless:\n    del sorted_dict[i]","6092fe8c":"#getting the top 100 ingredients\ntop100=[]\nfor key in sorted_dict.keys():\n    top100.append(key)\n    if len(top100)==100:\n        break","a0e5ace3":"top100","8111e543":"# extracted into csv\n#creating a new dataset for Machine Learning\n# mlDict = {}\n# for top_ingredient in top100:\n#     mlDict[top_ingredient]=[]\n#     for i in range(0,39774):\n#         if top_ingredient in everything.iloc[i]['ingredients']:\n#             mlDict[top_ingredient].append(1)\n#         else:\n#             mlDict[top_ingredient].append(0)","1d07ce06":"# cuisine = []\n# id_=[]\n# for i in range(0,39774):\n#         cuisine.append(everything.iloc[i]['cuisine'])\n#         id_.append(everything.iloc[i]['id'])\n# mlDict['id']=id_\n# mlDict['cuisine']= cuisine\n","32f1cff2":"# mlDF=pd.DataFrame(mlDict)\n# mlDF['cuisine'] = mlDF['cuisine'].astype('category')\n# mlDF[top100] = mlDF[top100].astype('category')","977d9ffd":"# extract into CSV file\n#machine_learning_csv = mlDF.to_csv (r'C:\\Users\\limka\\OneDrive\\Documents\\NTU\\Y1S2\\CZ1015\\Mini Project\\machine_learning_csv.csv', index = None, header=True) #Don't forget to add '.csv' at the end of the path","697468b0":"mlDF = pd.read_csv('..\/input\/cooking\/kaggle cooking\/machine_learning_csv.csv')\nmlDF","bf152f54":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import export_graphviz\nimport graphviz\n\n# Recall the Legendary-Total Dataset\ny_train = pd.DataFrame(mlDF['cuisine'])   # Response\nX_train = pd.DataFrame(mlDF[top100])       # Predictor\n\n# Decision Tree using Train Data\ndectree = DecisionTreeClassifier(max_depth = 2)  # create the decision tree object\ndectree.fit(X_train, y_train)                    # train the decision tree model\n\n# Predict Response corresponding to Predictors\ny_train_pred = dectree.predict(X_train)\n\n# Check the Goodness of Fit (on Train Data)\nprint(\"Goodness of Fit of Model \\tTrain Dataset\")\nprint(\"Classification Accuracy \\t:\", dectree.score(X_train, y_train))\nprint()\n\n# Plot the Decision Tree\ntreedot = export_graphviz(dectree,                                      # the model\n                          feature_names = X_train.columns,              # the features \n                          out_file = None,                              # output file\n                          filled = True,                                # node colors\n                          rounded = True,                               # make pretty\n                          special_characters = True)                    # postscript\n\ngraphviz.Source(treedot)\n","13abf70f":"# Decision Tree using Train Data\ndectree = DecisionTreeClassifier(max_depth = 100)  # create the decision tree object\ndectree.fit(X_train, y_train)                    # train the decision tree model\n\n# Predict Response corresponding to Predictors\ny_train_pred = dectree.predict(X_train)\n\n# Check the Goodness of Fit (on Train Data)\nprint(\"Goodness of Fit of Model \\tTrain Dataset\")\nprint(\"Classification Accuracy \\t:\", dectree.score(X_train, y_train))\nprint()\n","67a91c07":"cuisine_pred = mlDF[mlDF[\"id\"].isin([\"11462\", \"40989\", \"27976\", '22213','6487','25557','27976','1299'])]\ncuisine_pred","1e7877e9":"# Extract Predictors for Prediction\nX_pred = pd.DataFrame(cuisine_pred[top100])\n\n# Predict Response corresponding to Predictors\ny_pred = dectree.predict(X_pred)\n\n# Summarize the Actuals and Predictions\ny_pred = pd.DataFrame(y_pred, columns = [\"PredType\"], index = cuisine_pred.index)\npredictedDF = pd.concat([cuisine_pred[['id','cuisine']], y_pred], axis = 1)\n\n#predicting the cusine frome some of the recipe\npredictedDF","ac3558e5":"from sklearn.ensemble import RandomForestClassifier\n\n# Random Forest using Train Data\nclf = RandomForestClassifier(n_jobs=2,n_estimators=100, random_state=0)  # create the  object\nclf.fit(X_train, y_train)                    # train the model\n\ny_train_pred = clf.predict(X_train)\n\nprint(\"Goodness of Fit of Model \\tTrain Dataset\")\nprint(\"Classification Accuracy \\t:\", clf.score(X_train, y_train))\nprint()\n","25ec8004":"# Extract Predictors for Prediction\nX_pred = pd.DataFrame(cuisine_pred[top100])\n\n# Predict Response corresponding to Predictors\ny_pred = clf.predict(X_pred)\n\n# Summarize the Actuals and Predictions\ny_pred = pd.DataFrame(y_pred, columns = [\"PredType\"], index = cuisine_pred.index)\npredictedDF = pd.concat([cuisine_pred[['id','cuisine']], y_pred], axis = 1)\n\n#predicting the cusine frome some of the recipe\npredictedDF","fc04571f":"#creating a test dataset for Machine Learning\ntestdict = {}\nfor top_ingredient in top100:\n    testdict[top_ingredient]=[]\n    for i in range(0,9944):\n        if top_ingredient in test.iloc[i]['ingredients']:\n            testdict[top_ingredient].append(1)\n        else:\n            testdict[top_ingredient].append(0)","9e2306cf":"id_=[]\nfor i in range(0,9944):\n        id_.append(test.iloc[i]['id'])\ntestdict['id']=id_","6382fc3c":"testDF=pd.DataFrame(testdict)\ntestDF[top100] = testDF[top100].astype('category')","43903da9":"#classification Tree #predicting the cusine frome some of the recipe\ncuisine_pred = testDF[testDF[\"id\"].isin([ 36914,2280,14729,4594,2237,45631,45523,4977,7124,])]\nX_pred = pd.DataFrame(cuisine_pred[top100])\n\n# Predict Response corresponding to Predictors\ny_pred = dectree.predict(X_pred)\n\n# Summarize the Actuals and Predictions\ny_pred = pd.DataFrame(y_pred, columns = [\"PredType\"], index = cuisine_pred.index)\npredictedDF = pd.concat([cuisine_pred[['id']], y_pred], axis = 1)\n\npredictedDF","977285e4":"#random forest #predicting the cusine frome some of the recipe\ncuisine_pred = testDF[testDF[\"id\"].isin([ 36914,2280,14729,4594,2237,45631,45523,4977,7124,])]\nX_pred = pd.DataFrame(cuisine_pred[top100])\n\n# Predict Response corresponding to Predictors\ny_pred = clf.predict(X_pred)\n\n# Summarize the Actuals and Predictions\ny_pred = pd.DataFrame(y_pred, columns = [\"PredType\"], index = cuisine_pred.index)\npredictedDF = pd.concat([cuisine_pred[['id']], y_pred], axis = 1)\n\npredictedDF","d4a278de":"## Prediction from classification tree","84f836ca":"## Prediction from Random Forest","3496fbfe":"# Import Basic Libraries","d75feb42":"# Creating a list consisting of the top 100 ingredients and using them to predict the cuisine later on ","aabc28d8":"# Creating DataFrame with top 100 ingredients as columns with cuisine and ID","214d8ef9":"# Using For Test set","395866fa":"# Multiclass Classification Tree","e470479f":"# Increasing Max Depth and predicting train set","5f5145c1":"# Random Forest and predicting train set","f9a24fbd":"Since the code takes very long to run with 39,000+ of rows, I've extracted it into a file. For first time users, you have to uncomment it and run the code","719854c4":"# Read test and train file"}}