{"cell_type":{"e68e6c44":"code","8e2179e8":"code","6e9c09a0":"code","66593f92":"code","f3b6a5f4":"code","52943e9d":"code","ccb92c8a":"code","5aadad2f":"code","6167a725":"code","d9a464ba":"code","4d264aa0":"code","28660f19":"code","3c173086":"code","da331ce4":"code","d97b7912":"code","28bc4606":"code","76a59f8b":"code","87f97aeb":"code","ce2d81b5":"code","b64e8b93":"code","9412beb4":"code","1c85e42f":"code","588332e6":"code","8b5c2378":"code","e8a5f200":"code","cca54191":"code","6f3561c1":"code","6c3b1351":"code","61791615":"code","212bbba1":"code","484a7cdc":"code","772d9edc":"code","f90bf476":"code","deab2bc4":"code","18c0ff1f":"code","c70e36ae":"code","94586d06":"code","b1a4750c":"code","a836d880":"code","12af62d0":"code","579daf43":"code","2f280a03":"code","2b09b7bf":"code","bb79d812":"code","48b93a4f":"code","9bedcecc":"code","3e9c2c23":"code","588771fd":"code","892644f2":"code","f7c3be5d":"code","81b0c33d":"code","ae6cab1d":"code","7a8d9ae2":"code","6d3c3ec5":"code","7806d586":"code","007e6b04":"code","ce117e1b":"code","a2b04ef1":"code","8c38c085":"code","5525af7d":"code","afe5554e":"code","96f04d11":"code","275b088e":"code","908704bc":"code","5dea21ad":"code","d709178c":"code","5f5239d4":"code","db6fe4b2":"code","e991d553":"code","f8eada2b":"code","0bdfee41":"code","a7790c3f":"code","a5b78159":"code","cbc9bfc2":"code","a190884a":"code","6318e15d":"code","e6ae68a6":"code","7a5263a6":"code","68fee403":"code","163f1388":"markdown","fcc965e3":"markdown","1162807c":"markdown","b84218f8":"markdown","9e572977":"markdown","319e8265":"markdown","f55c26d0":"markdown","aab1d07b":"markdown","40a1a0ce":"markdown"},"source":{"e68e6c44":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.metrics import roc_auc_score\nimport sklearn.metrics as metrics\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression","8e2179e8":"#pip install xgboost","6e9c09a0":"old_data=pd.read_csv(\"..\/input\/covid19-mexico-patient-health-dataset\/patient.csv\")\nold_data[\"death_date\"]=old_data[\"death_date\"].replace({\"9999-99-99\": 1})\nold_data.loc[old_data['death_date'] != 1, 'death_date'] = 0","66593f92":"old_data.nunique()","f3b6a5f4":"old_data.info()","52943e9d":"old_data['death_date']=old_data['death_date'].astype(object).astype(int)","ccb92c8a":"old_data.info()","5aadad2f":"#old_data","6167a725":"old_data.corr().abs()","d9a464ba":"one=(old_data[old_data[\"death_date\"]==0])\ntwo=(old_data[old_data[\"death_date\"]==1])\ndatam=pd.concat([one,two],ignore_index=True)","4d264aa0":"datam.corr().abs()","28660f19":"x=datam.head(3000)\ny=datam.tail(3000)\ndata=pd.concat([x,y],ignore_index=True)","3c173086":"sns.heatmap(data.corr().abs(),annot=False,linewidths=.5, cbar_kws={\"shrink\": .5})","da331ce4":"#sns.heatmap(data.corr().abs(),annot=True)\nx_train=data.drop([\"death_date\"],axis=1)\ny_train=data[\"death_date\"]\ny_train=pd.DataFrame(y_train)\ny_train","d97b7912":"x_train,x_test,y_train,y_test=train_test_split(x_train,y_train,test_size=0.2,random_state=1)\nprint (\"E\u011fitim Veri Adet:\" , x_train.shape[0])\nprint (\"E\u011fitim Label Adet:\" , y_train.shape[0])\nprint (\"Test Veri Adet:\" , x_test.shape[0])\nprint (\"Test Label Adet:\" , y_test.shape[0])","28bc4606":"y_train=pd.DataFrame(y_train)\ny_train","76a59f8b":"y_train=y_train.astype('float')\ny_test=y_test.astype('float')","87f97aeb":"#Navie Bayes\nnb=GaussianNB()\nnb.fit(x_train, y_train)\nscore_1=nb.score(x_test,y_test)\n#Decision Tree\ndecision_tree=DecisionTreeClassifier()\ndecision_tree.fit(x_train, y_train)\nscore_2=decision_tree.score(x_test,y_test)\n#Random Forest\nrandom_forest=RandomForestClassifier()\nrandom_forest.fit(x_train,y_train)\nscore_3=random_forest.score(x_test,y_test)\n#SVM\nsup_vec=SVC(random_state=3)\nsup_vec.fit(x_train,y_train)\nscore_4=sup_vec.score(x_test,y_test)\n#KNN\nknn=KNeighborsClassifier(n_neighbors=3)\nknn.fit(x_train,y_train)\nscore_5=knn.score(x_test,y_test)\n#Score\nprint (\"Navie Bayes Acc Score:\",score_1)\nprint (\"Decision Tree Acc Score:\",score_2)\nprint (\"Random Forest Acc Score:\",score_3)\nprint (\"SVM Acc Score:\",score_4)\nprint (\"KNN Acc Score:\",score_5)","ce2d81b5":"y_pred = random_forest.predict(x_test)\ny_pred_1 = nb.predict(x_test)\ny_pred_2 = decision_tree.predict(x_test)\ny_pred_3 = sup_vec.predict(x_test)\ny_pred_4 = knn.predict(x_test)","b64e8b93":"print (confusion_matrix(y_test, y_pred))\nsns.heatmap(confusion_matrix(y_test,y_pred), annot=True, lw=2,cbar=False)\nplt.ylabel(\"True Values\")\nplt.xlabel(\"Preict Value\")\nplt.title(\"Confusion_matrix\")","9412beb4":"print (classification_report(y_test,y_pred))","1c85e42f":"print (\"F1 Score:\", f1_score(y_test,y_pred))","588332e6":"Classifier =XGBClassifier()\nClassifier.fit(x_train, y_train)\ny_predic=Classifier.predict(x_test)\ncm=confusion_matrix(y_predic, y_test)\nprint (cm)","8b5c2378":"sns.heatmap(confusion_matrix(y_predic,y_test), annot=True,lw=2,cbar=False)\nplt.ylabel(\"True Values\")\nplt.xlabel(\"Preict Value\")\nplt.title(\"Confusion_matrix\")","e8a5f200":"probs=random_forest.predict_proba(x_test)\npreds=probs[:,1]\nfpr,tpr, threshold =metrics.roc_curve(y_test, y_pred)\nroc_auc=metrics.auc(fpr,tpr)\nprobs_1=nb.predict_proba(x_test)\npreds_1=probs_1[:,1]\nfpr_1,tpr_1, threshold_1 =metrics.roc_curve(y_test, y_pred_1)\nroc_auc_1=metrics.auc(fpr_1,tpr_1)\nprobs_2=decision_tree.predict_proba(x_test)\npreds_2=probs_2[:,1]\nfpr_2,tpr_2, threshold_2 =metrics.roc_curve(y_test, y_pred_2)\nroc_auc_2=metrics.auc(fpr_2,tpr_2)\n#probs_3=sup_vec.predict_proba(x_test)\n#preds_3=probs_3[:,1]\n#fpr_3,tpr_3, threshold_3 =metrics.roc_curve(y_test, y_pred_3)\n#roc_auc_3=metrics.auc(fpr_3,tpr_3)\nprobs_4=knn.predict_proba(x_test)\npreds_4=probs_4[:,1]\nfpr_4,tpr_4, threshold_4 =metrics.roc_curve(y_test, y_pred_4)\nroc_auc_4=metrics.auc(fpr_4,tpr_4)\n\nprobs_5=Classifier.predict_proba(x_test)\npreds_5=probs_5[:,1]\nfpr_5,tpr_5, threshold_5 =metrics.roc_curve(y_test, y_predic)\nroc_auc_5=metrics.auc(fpr_5,tpr_5)","cca54191":"score_6=Classifier.score(x_test,y_test)\nprint (score_6)","6f3561c1":"plt.title(\"Receiver Operating Charac\")\nplt.plot(fpr, tpr, 'b', label=\"RF=%0.2f\" % roc_auc)\nplt.plot(fpr_5, tpr_5, 'black', label=\"XGBOOST=93\" % roc_auc)\nplt.plot(fpr_2, tpr_2, 'y', label=\"DT=90\" % roc_auc)\nplt.plot(fpr_4, tpr_4, 'r', label=\"KNN=87\" % roc_auc)\nplt.plot(fpr_1, tpr_1, 'g', label=\"NB=80\" % roc_auc)\nplt.legend(loc=\"lower right\")\nplt.plot([0,1],[0,1],'r--')\nplt.xlim([0,1])\nplt.ylim([0,1])\nplt.ylabel('True Pozitive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","6c3b1351":"f_data=data.drop([\"diabetes\",\"copd\",\"asthma\",\"immunosuppression\",\"hypertension\",\"other_diseases\",\"cardiovascular\",\"obesity\",\"chronic_kidney_failure\",\"smoker\"],axis=1)","61791615":"f_data.corr().abs()","212bbba1":"sns.heatmap(f_data.corr().abs(),annot=False,linewidths=.5, cbar_kws={\"shrink\": .5})","484a7cdc":"xf_train=f_data.drop([\"death_date\"],axis=1)\nyf_train=f_data[\"death_date\"]\nyf_train=pd.DataFrame(yf_train)\nyf_train","772d9edc":"xf_train,xf_test,yf_train,yf_test=train_test_split(xf_train,yf_train,test_size=0.1,random_state=1)\nprint (\"E\u011fitim Veri Adet:\" , xf_train.shape[0])\nprint (\"E\u011fitim Label Adet:\" , yf_train.shape[0])\nprint (\"Test Veri Adet:\" , xf_test.shape[0])\nprint (\"Test Label Adet:\" , yf_test.shape[0])","f90bf476":"print (\"E\u011fitim Veri Adet:\" , xf_train.shape[0])\nprint (\"E\u011fitim Label Adet:\" , yf_train.shape[0])\nprint (\"Test Veri Adet:\" , xf_test.shape[0])\nprint (\"Test Label Adet:\" , yf_test.shape[0])\ny_train=y_train.astype('float')\ny_test=y_test.astype('float')\n#Navie Bayes\nnb.fit(xf_train, yf_train)\nscore_10=nb.score(xf_test,yf_test)\n#Decision Tree\ndecision_tree.fit(xf_train, yf_train)\nscore_11=decision_tree.score(xf_test,yf_test)\n#Random Forest\nrandom_forest.fit(xf_train,yf_train)\nscore_12=random_forest.score(xf_test,yf_test)\n#SVM\nsup_vec.fit(xf_train,yf_train)\nscore_13=sup_vec.score(xf_test,yf_test)\n#KNN\nknn.fit(xf_train,yf_train)\nscore_14=knn.score(xf_test,yf_test)\nprint (\"Navie Bayes Acc Score:\",score_10)\nprint (\"Decision Tree Acc Score:\",score_11)\nprint (\"Random Forest Acc Score:\",score_12)\nprint (\"SVM Acc Score:\",score_13)\nprint (\"KNN Acc Score:\",score_14)\nyf_pred11 = random_forest.predict(xf_test)\nyf_pred12 = nb.predict(xf_test)\nyf_pred13 = decision_tree.predict(xf_test)\nyf_pred14 = sup_vec.predict(xf_test)\nyf_pred15 = knn.predict(xf_test)","deab2bc4":"print (confusion_matrix(yf_test, yf_pred11))\nsns.heatmap(confusion_matrix(yf_pred11,yf_test), annot=True,lw=2,cbar=False)\nplt.ylabel(\"True Values\")\nplt.xlabel(\"Preict Value\")\nplt.title(\"Confusion_matrix\")","18c0ff1f":"print (classification_report(yf_test,yf_pred11))","c70e36ae":"Classifier.fit(xf_train, yf_train)\ny_predic11=Classifier.predict(xf_test)\ncm1=confusion_matrix(y_predic11, yf_test)\nprint (cm1)","94586d06":"y_predic11.shape","b1a4750c":"print (\"F1 Score:\", f1_score(yf_test,y_predic11))","a836d880":"Classifier.fit(xf_train, yf_train)\ny_predic11=Classifier.predict(xf_test)","12af62d0":"score_777=Classifier.score(xf_test,yf_test)\nprint (score_777)","579daf43":"probs22=random_forest.predict_proba(xf_test)\npreds22=probs22[:,1]\nfpr22,tpr22, threshold =metrics.roc_curve(yf_test, yf_pred11)\nroc_auc22=metrics.auc(fpr22,tpr22)\n\nprobs23=nb.predict_proba(xf_test)\npreds23=probs23[:,1]\nfpr23,tpr23, threshold23 =metrics.roc_curve(yf_test, yf_pred12)\nroc_auc23=metrics.auc(fpr23,tpr23)\n\nprobs24=decision_tree.predict_proba(xf_test)\npreds24=probs24[:,1]\nfpr24,tpr24, threshold24 =metrics.roc_curve(yf_test, yf_pred13)\nroc_auc24=metrics.auc(fpr24,tpr24)\n\n#probs_3=sup_vec.predict_proba(x_test)\n#preds_3=probs_3[:,1]\n#fpr_3,tpr_3, threshold_3 =metrics.roc_curve(y_test, y_pred_3)\n#roc_auc_3=metrics.auc(fpr_3,tpr_3)\n\nprobs25=knn.predict_proba(xf_test)\npreds25=probs25[:,1]\nfpr25,tpr25, threshold25 =metrics.roc_curve(yf_test, yf_pred15)\nroc_auc25=metrics.auc(fpr25,tpr25)\n\nprobs_99=Classifier.predict_proba(xf_test)\npreds_99=probs_99[:,1]\nfpr_99,tpr_99, threshold_99 =metrics.roc_curve(yf_test, y_predic11)\nroc_auc_99=metrics.auc(fpr_99,tpr_99)","2f280a03":"plt.title(\"Receiver Operating Charac\")\nplt.plot(fpr_99, tpr_99, 'black', label=\"XGBOOST=93\" % roc_auc)\nplt.plot(fpr22, tpr22, 'b', label=\"RF=92\" % roc_auc)\nplt.plot(fpr24, tpr24, 'y', label=\"DT=90\" % roc_auc)\nplt.plot(fpr25, tpr25, 'r', label=\"KNN=89\" % roc_auc)\nplt.plot(fpr23, tpr23, 'g', label=\"NB=82\" % roc_auc)\nplt.legend(loc=\"lower right\")\nplt.plot([0,1],[0,1],'r--')\nplt.xlim([0,1])\nplt.ylim([0,1])\nplt.ylabel('True Pozitive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","2b09b7bf":"volting=VotingClassifier(estimators=[(\"rf\",random_forest),(\"gbboost\",Classifier),(\"dt\",decision_tree)], voting=\"hard\").fit(xf_train, yf_train)","bb79d812":"score7842=volting.score(xf_test, yf_test)","48b93a4f":"score7842","9bedcecc":"volting2=VotingClassifier(estimators=[(\"rf\",random_forest),(\"gbboost\",Classifier),(\"dt\",decision_tree)], voting=\"soft\").fit(xf_train, yf_train)","3e9c2c23":"score78=volting2.score(xf_test, yf_test)","588771fd":"score78","892644f2":"volting12=VotingClassifier(estimators=[(\"rf\",random_forest),(\"gbboost\",Classifier),(\"dt\",decision_tree)], voting=\"hard\").fit(x_train, y_train)","f7c3be5d":"score123123=volting12.score(x_test, y_test)","81b0c33d":"score123123","ae6cab1d":"bag=BaggingClassifier(decision_tree, n_estimators=100, max_samples=0.8,n_jobs=-1, random_state=1).fit(xf_train, yf_train)","7a8d9ae2":"bag.score(xf_test, yf_test)","6d3c3ec5":"randomForestObject = RandomForestClassifier(n_estimators=10)\nrandomForestObject.fit(xf_train, yf_train)","7806d586":"df_test_sonuc = randomForestObject.score(xf_test, yf_test)\nprint(\"Random Forest Do\u011fruluk (test_seti): \",round(df_test_sonuc,2))","007e6b04":"yf_pred11","ce117e1b":"extra_data=pd.DataFrame(yf_pred11)\nextra_data1=pd.DataFrame(yf_pred12)\nextra_data2=pd.DataFrame(yf_pred13)\nextra_data3=pd.DataFrame(yf_pred14)\nextra_data4=pd.DataFrame(yf_pred15)\nextra_data5=pd.DataFrame(y_predic11)\n\n","a2b04ef1":"df_new  = extra_data.rename(columns={0: 'deat_date'})\ndf_new1 = extra_data.rename(columns={0: 'deat_date'})\ndf_new2 = extra_data.rename(columns={0: 'deat_date'})\ndf_new3 = extra_data.rename(columns={0: 'deat_date'})\ndf_new4 = extra_data.rename(columns={0: 'deat_date'})\ndf_new5 = extra_data.rename(columns={0: 'deat_date'})","8c38c085":"df_new=df_new.astype('int')\ndf_new1=df_new1.astype('int')\ndf_new2=df_new2.astype('int')\ndf_new3=df_new3.astype('int')\ndf_new4=df_new4.astype('int')\ndf_new5=df_new5.astype('int')\n\n","5525af7d":"data_sets=pd.concat([df_new,df_new1,df_new2,df_new3,df_new4,df_new5], ignore_index=True, axis=1)","afe5554e":"data_sets","96f04d11":"yf_test.shape","275b088e":"yf_test=pd.concat([yf_test], ignore_index=True)","908704bc":"x_new_train=data_sets.head(520)\ny_new_train=yf_test.head(520)\nx_new_test=data_sets.tail(80)\ny_new_test=yf_test.tail(80)","5dea21ad":"Classifier.fit(x_new_train, y_new_train)","d709178c":"y_pred_new=Classifier.predict(x_new_test)","5f5239d4":"score_new_pred=Classifier.score(x_new_test,y_new_test)","db6fe4b2":"score_new_pred","e991d553":"y_pred_new\n","f8eada2b":"y_pred_new_df=pd.DataFrame(y_pred_new)","0bdfee41":"fff=yf_test.tail(80)","a7790c3f":"y_pred_new=pd.DataFrame(y_pred_new)","a5b78159":"fff","cbc9bfc2":"fff=pd.concat([fff],ignore_index=True)","a190884a":"fff=fff.astype('int')\ny_pred_new=y_pred_new.astype('int')\n","6318e15d":"final=pd.concat([y_pred_new,fff], ignore_index=True,axis=1)","e6ae68a6":"fff\n","7a5263a6":"final.shape","68fee403":"final","163f1388":"# roc & auc","fcc965e3":"# Machine Learning Algorithms","1162807c":"# Ensemble","b84218f8":"# Recall,Precision and F-1 Score\n","9e572977":"# Confusion_matrix","319e8265":"# XGBoost","f55c26d0":"# Corr","aab1d07b":"# New Ensemble","40a1a0ce":"* Recall    =  TP \/ (TP + FN)\n* Precision = TP \/ (TP + FP) \n* F-Measure = (2 * Precision * Recall) \/ (Precision + Recall)"}}