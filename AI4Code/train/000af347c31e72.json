{"cell_type":{"6fa470b3":"code","1aed3f54":"code","98d1cdf3":"code","66e54b66":"code","6c44e9ba":"code","34edb51c":"code","4dd77f48":"code","00c42611":"code","c2b7f0c7":"code","cc942436":"markdown","a01ba7ea":"markdown","56806367":"markdown"},"source":{"6fa470b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1aed3f54":"train_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")\ntrain_data","98d1cdf3":"X_test = test_data.copy()\nX_train = train_data.drop(['label'], axis = 1)\ny_train = train_data['label']","66e54b66":"import matplotlib.pyplot as plt\n\ndef plot_digit(row):\n    some_digit = np.array(row)\n    some_digit_image = some_digit.reshape((28, 28))\n    plt.imshow(some_digit_image, cmap = plt.cm.binary)\n    plt.axis('off')\n    \nplot_digit(X_train.loc[0])\ny_train[0]","6c44e9ba":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)","34edb51c":"from sklearn.model_selection import cross_val_score\n\ndef get_accuracy(model, X_train = X_train, y_train = y_train):\n    model.fit(X_train, y_train)\n    scores = cross_val_score(model, X_train, y_train, cv = 3, scoring = \"accuracy\")\n    return scores.mean()","4dd77f48":"from sklearn.tree import DecisionTreeClassifier\n\ntree_clf = DecisionTreeClassifier(random_state = 42)\ntree_clf_acc = get_accuracy(tree_clf)\ntree_clf_acc","00c42611":"from sklearn.ensemble import RandomForestClassifier\n\nforest_clf = RandomForestClassifier(random_state = 42)\nforest_clf_acc = get_accuracy(forest_clf)\nforest_clf_acc","c2b7f0c7":"X_test = scaler.transform(X_test)\ny_pred = forest_clf.predict(X_test)\n\nsubmission['Label'] = y_pred\nsubmission.to_csv('submission.csv',index = False)","cc942436":"## Decision Tree Classifier","a01ba7ea":"## EDA","56806367":"## Random Forest Classifier"}}