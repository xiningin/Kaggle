{"cell_type":{"1087237d":"code","d7209f1f":"code","daf5b8ee":"code","e404213c":"code","2bad59b0":"code","86b6d03e":"code","764eb12f":"code","82d8a911":"code","650ead3e":"code","fbf1e0d0":"code","f660595c":"code","0439e231":"code","2437f0d6":"code","e303e505":"code","87e51ef3":"code","accd6a65":"code","63101200":"code","42c29c00":"code","3bf48bdf":"code","26a83b48":"code","128c9aa2":"code","ea9dff15":"code","6e4a00ce":"code","16916989":"code","5acc3e61":"code","0e6b015c":"code","b84803dc":"code","c1199d1c":"code","6edde754":"code","47ec22dd":"code","185c82c6":"code","7db9256d":"code","65d2f839":"code","3b714a52":"code","60926fa4":"code","f16ea315":"code","eeeffcbb":"code","2e5c1197":"code","8bf238ff":"code","e411500b":"code","5a4ae5c9":"code","51579f05":"code","efb41200":"code","a8fa9a97":"code","b9c7e712":"code","f1af9fc8":"code","f8a61f52":"code","98f18ecd":"code","f9c14f12":"code","0ea51dce":"markdown","7786f2b6":"markdown","964f0b98":"markdown","4cdd8d14":"markdown","326bf73e":"markdown","bc244f06":"markdown","3dc81d0e":"markdown","f57cbd13":"markdown","19d9ae83":"markdown","b6a33e1d":"markdown","d76d8be7":"markdown","fc3c6029":"markdown","6af10964":"markdown","059b3b40":"markdown","c6599912":"markdown","a2d7f5bf":"markdown","c5d94abd":"markdown","0f08a082":"markdown","fde384cb":"markdown","1458d189":"markdown","26803058":"markdown"},"source":{"1087237d":"# Data manipulation\nimport pandas as pd\nimport numpy as np\n\n# Data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nfrom pandas.plotting import scatter_matrix\n\n# Machine Learning Algorithms\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\n\n# Model Selection and Evaluation\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\n# Performance\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\n# For Missing Values\nfrom sklearn.impute import SimpleImputer\n","d7209f1f":"fifa_raw_dataset = pd.read_csv('..\/input\/data.csv')","daf5b8ee":"fifa_raw_dataset.head()","e404213c":"fifa_raw_dataset.info()","2bad59b0":"fifa_raw_dataset.shape","86b6d03e":"features = ['International Reputation', 'Overall', 'Potential', 'Reactions', 'Composure', 'Value']\nfifa_dataset = fifa_raw_dataset[[*features]]\nfifa_dataset.head()","764eb12f":"fifa_dataset.shape","82d8a911":"#parse string for millions and thousands to numeric values\ndef parseValue(x):\n    x = str(x).replace('\u20ac', '')\n    if('M' in str(x)):\n        x = str(x).replace('M', '')\n        x = float(x) * 1000000\n    elif('K' in str(x)):\n        x = str(x).replace('K', '')\n        x = float(x) * 1000\n    return float(x)\n\nfifa_dataset['Value'] = fifa_dataset['Value'].apply(parseValue)","650ead3e":"fifa_dataset.head()","fbf1e0d0":"fifa_dataset.describe()","f660595c":"# Value ditribution\nplt.figure(1, figsize=(18, 7))\nsb.set(style=\"whitegrid\")\nsb.countplot( x= 'Value', data=fifa_dataset)\nplt.title('Value distribution of all players')\nplt.show()","0439e231":"%matplotlib inline\nfifa_dataset.hist(bins=50, figsize=(20,15))\nplt.show()","2437f0d6":"corr_matrix = fifa_dataset.corr()\ncorr_matrix.shape","e303e505":"\ncorr_matrix[\"Value\"].sort_values(ascending=False)","87e51ef3":"attributes = [\"Value\", \"International Reputation\", \"Overall\",\n              \"Potential\", \"Reactions\", \"Composure\"]\nscatter_matrix(fifa_dataset[attributes], figsize=(12, 8))\nplt.show()","accd6a65":"# to make this notebook's output identical at every run\nnp.random.seed(42)","63101200":"#Split the dataset into TRAIN and TEST set. Giving 20% of data to test set.\ntrain_set, test_set = train_test_split(fifa_dataset, test_size=0.2, random_state=42)","42c29c00":"print('Train',' ','Test')\nprint(len(train_set),'+',len(test_set),'=',len(train_set)+len(test_set))","3bf48bdf":"l = list(train_set['Value'] == 0)\nprint('Zeros in output label: ',len([v for v in l if v==True] ))\nprint('\\nNaN values in following features:')\ntrain_set.isnull().any()\n\n","26a83b48":"train_set = train_set.replace(0, pd.np.nan)","128c9aa2":"imputer = SimpleImputer(strategy=\"median\")","ea9dff15":"imputer.fit(train_set)","6e4a00ce":"imputer.statistics_","16916989":"tf = imputer.transform(train_set)","5acc3e61":"fifa_dataset_tf = pd.DataFrame(tf, columns=fifa_dataset.columns)","0e6b015c":"fifa_dataset_tf.head()","b84803dc":"# No NULL value present after imputation.\nfifa_dataset_tf.isnull().any()","c1199d1c":"fifa_dataset_features = fifa_dataset_tf.drop(\"Value\", axis=1) # drop labels for training set\nfifa_dataset_labels = fifa_dataset_tf[\"Value\"].copy()","6edde754":"lin_reg = LinearRegression()\nlin_reg.fit(fifa_dataset_features, fifa_dataset_labels)","47ec22dd":"fifa_dataset_predictions = lin_reg.predict(fifa_dataset_features)\nlin_mse = mean_squared_error(fifa_dataset_labels, fifa_dataset_predictions)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","185c82c6":"score = r2_score(fifa_dataset_labels, fifa_dataset_predictions)  \nprint('Accuracy:',format(score*100,'.2f'),'%')","7db9256d":"tree_reg = DecisionTreeRegressor(random_state=42)\ntree_reg.fit(fifa_dataset_features, fifa_dataset_labels)","65d2f839":"fifa_dataset_predictions = tree_reg.predict(fifa_dataset_features)\ntree_mse = mean_squared_error(fifa_dataset_labels, fifa_dataset_predictions)\ntree_rmse = np.sqrt(tree_mse)\ntree_rmse","3b714a52":"score = r2_score(fifa_dataset_labels, fifa_dataset_predictions)  \nprint('Accuracy:',format(score*100,'.2f'),'%')","60926fa4":"forest_reg = RandomForestRegressor(n_estimators=100, random_state=42)\nforest_reg.fit(fifa_dataset_features, fifa_dataset_labels)","f16ea315":"fifa_dataset_predictions = forest_reg.predict(fifa_dataset_features)\nforest_mse = mean_squared_error(fifa_dataset_labels, fifa_dataset_predictions)\nforest_rmse = np.sqrt(forest_mse)\nforest_rmse","eeeffcbb":"score = r2_score(fifa_dataset_labels, fifa_dataset_predictions)  \nprint('Accuracy:',format(score*100,'.2f'),'%')","2e5c1197":"scores = cross_val_score(tree_reg, fifa_dataset_features, fifa_dataset_labels,\n                         scoring=\"neg_mean_squared_error\", cv=10)\ntree_rmse_scores = np.sqrt(-scores)","8bf238ff":"def display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())\n\ndisplay_scores(tree_rmse_scores)","e411500b":"lin_scores = cross_val_score(lin_reg, fifa_dataset_features, fifa_dataset_labels,\n                             scoring=\"neg_mean_squared_error\", cv=10)\nlin_rmse_scores = np.sqrt(-lin_scores)\ndisplay_scores(lin_rmse_scores)","5a4ae5c9":"forest_scores = cross_val_score(forest_reg, fifa_dataset_features, fifa_dataset_labels,\n                                scoring=\"neg_mean_squared_error\", cv=10)\nforest_rmse_scores = np.sqrt(-forest_scores)\ndisplay_scores(forest_rmse_scores)","51579f05":"param_grid = [\n    {'n_estimators': [3, 10, 30], 'max_features': [2, 3, 4]},\n    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},\n  ]\n\nforest_reg = RandomForestRegressor(random_state=42)\n\ngrid_search = GridSearchCV(forest_reg, param_grid, cv=5,\n                           scoring='neg_mean_squared_error',\n                           return_train_score=True)\ngrid_search.fit(fifa_dataset_features, fifa_dataset_labels)","efb41200":"grid_search.best_params_","a8fa9a97":"grid_search.best_estimator_","b9c7e712":"cvres = grid_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score), params)","f1af9fc8":"test_set = test_set.replace(0, pd.np.nan)\ntf = imputer.transform(test_set)\nfifa_dataset_tf = pd.DataFrame(tf, columns=fifa_dataset.columns)","f8a61f52":"fifa_dataset_features = fifa_dataset_tf.drop(\"Value\", axis=1)\nfifa_dataset_labels = fifa_dataset_tf[\"Value\"].copy()","98f18ecd":"final_model = grid_search.best_estimator_\n\nfinal_predictions = final_model.predict(fifa_dataset_features)\n\nfinal_mse = mean_squared_error(fifa_dataset_labels, final_predictions)\nfinal_rmse = np.sqrt(final_mse)\nfinal_rmse","f9c14f12":"final_model_score = r2_score(fifa_dataset_labels, final_predictions)  \nprint('Accuracy:',format(final_model_score*100,'.2f'),'%')","0ea51dce":"# Fine-Tune the Model","7786f2b6":"# Discover and visualize the data to gain insights","964f0b98":"\n# Evaluate the model on the Test Set","4cdd8d14":"# Feature Selection\n#### Based on my intuition and football knowledge, I selected below features which could be best used to predict a player's market value.","326bf73e":"### Find Correlations","bc244f06":"## Evaluation using Cross-Validation","3dc81d0e":"### Replace 'NaN' values with the median.","f57cbd13":"## Seperate the Features and Label","19d9ae83":"## Random Forest","b6a33e1d":"# Select and train a model \nBefore directly training on the test set, first train and evaluate on the training set.\nAlso, try different ML algorithms and choose which fits best on the data.","d76d8be7":"# Get the data","fc3c6029":"# Import the dependencies","6af10964":"## Linear Regression","059b3b40":"## Grid Search","c6599912":"# Take a look at the data and the datastructure.","a2d7f5bf":"## Data Cleaning","c5d94abd":"# Creating Test Set","0f08a082":"# Market Value Prediction\n\n#### Welcome to FIFA'19! Our task is to predict the market value of a football player, given FIFA'19 video game dataset.","fde384cb":"**For the purpose of exploring and visualizing the dataset, we need to first parse and convert the 'Value' feature (which is our output label) to number form.**","1458d189":"## Decision Trees","26803058":"# Prepare the data for Machine Learning algorithms"}}