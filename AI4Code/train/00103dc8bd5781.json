{"cell_type":{"7c1153a3":"code","4ac2dd22":"code","1825504f":"code","9b59a97c":"code","30db29da":"code","b1f02e24":"code","90212886":"code","3e4e0ecd":"code","b71d452c":"code","cf0895a6":"code","4cf15a1e":"code","134cdb00":"code","eb3ed63c":"code","b3acf0e5":"code","06433c90":"code","1a938a28":"code","374eef1a":"code","3fcc7146":"code","9bc0da20":"code","6193b483":"code","3c1c04e3":"code","e1a6aa82":"code","a48eeb4b":"code","ea818062":"code","b36ec1b2":"code","9e7da027":"code","236666f7":"code","91a16993":"code","de42b660":"code","e204c65d":"code","ce9e4e31":"code","dd7d6a29":"code","68213147":"code","3cacabe3":"code","ff09c355":"code","5a8cacef":"code","b3985da9":"code","c0b7e988":"code","07433d09":"code","a9a12387":"code","61d318ae":"code","5b08d04c":"code","6cf50a8d":"code","85b80a53":"code","09895c53":"code","7990a7c8":"code","099f4072":"code","88354aaf":"code","ca798005":"code","aa3e3b51":"code","6d819028":"code","d60b6f80":"code","17306117":"code","47714f72":"code","6a93a552":"code","c7ff3113":"code","8ff8a377":"code","28048c24":"code","411a2e7f":"code","0ea410b7":"code","3ef0adbe":"code","dc9e7d8d":"code","7be041d6":"code","10eef5e7":"code","453ba40b":"code","2ebb434e":"code","b8923800":"code","0660bdda":"code","21abbbd5":"code","a972d0fa":"code","c40a4f80":"markdown","7bdea879":"markdown","5cdf68c3":"markdown","5cc4cb61":"markdown","c538958d":"markdown","628e974c":"markdown","4e6a38ff":"markdown","c8d26f3b":"markdown","6d81f2b2":"markdown","db4efdb1":"markdown","2432a618":"markdown","ebeb608c":"markdown","58d4c597":"markdown","b526a9ce":"markdown","f47e9c68":"markdown","6939c266":"markdown","4349ab1c":"markdown","114d433d":"markdown","4b0ba539":"markdown"},"source":{"7c1153a3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","4ac2dd22":"df = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')","1825504f":"df","9b59a97c":"df.info()","30db29da":"plt.figure(figsize=(18, 11))\nmatrix = np.triu(df.corr())\nsns.heatmap(df.corr(),center= 0, annot=True, linewidth=0.8, mask=matrix)\n\nplt.title('Features Correlation Heatmap', fontsize = 25)","b1f02e24":"sns.pairplot(df, hue = 'Gender')","90212886":"sns.countplot(data = df, x = 'Gender')\nplt.title('Gender Countplot', fontsize = 16, y = 1.1)","3e4e0ecd":"fig, axes = plt.subplots(1,3, figsize = (15,5))\nfig.suptitle('Useful Boxplots', fontsize = 18)\n\nsns.boxplot(data = df, x = 'Gender', y = 'Age', ax = axes[0])\nsns.boxplot(data = df, x = 'Gender', y = 'Annual Income (k$)', ax = axes[1])\nsns.boxplot(data = df, x = 'Gender', y = 'Spending Score (1-100)', ax = axes[2])","b71d452c":"import pandas_profiling as pp","cf0895a6":"pp.ProfileReport(df)","4cf15a1e":"df.isnull().sum()","134cdb00":"df.drop(['CustomerID','Gender'],axis=1, inplace=True)","eb3ed63c":"df","b3acf0e5":"#libraries\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans","06433c90":"X1 = df.drop('Age', axis = 1)\nX2 = df.drop('Annual Income (k$)', axis = 1)\nX3 = df.drop('Spending Score (1-100)', axis = 1)","1a938a28":"scaler = StandardScaler()\nscaled_X1 = scaler.fit_transform(X1)\nscaled_X2 = scaler.fit_transform(X2)\nscaled_X3 = scaler.fit_transform(X3)","374eef1a":"scaled_df = scaler.fit_transform(df)","3fcc7146":"ssd1 = []\n\nfor i in range(2, 11):\n    \n    model=KMeans(n_clusters=i, random_state=101)\n    model.fit(scaled_X1)\n    \n    ssd1.append(model.inertia_)","9bc0da20":"plt.plot(range(2,11), ssd1, 'o--')\nplt.xlabel('number of clusters')\nplt.ylabel('Sum of Squared Distances')","6193b483":"X1_model = KMeans(n_clusters=5, random_state=101)","3c1c04e3":"X1_model.fit(scaled_X1)","e1a6aa82":"X1_labels = X1_model.labels_\nX1_centroids = X1_model.cluster_centers_","a48eeb4b":"X1['labels'] = X1_labels","ea818062":"X1_centroids","b36ec1b2":"for i in range(0,5):\n    plt.scatter(scaled_X1[X1_labels == i , 0] , scaled_X1[X1_labels == i , 1] , label = i+1)\nplt.scatter(X1_centroids[:,0], X1_centroids[:,1], s = 70, c = '#3d000a', label = 'centroids')\nplt.title('X1 Clusters', y = 1.05)\nplt.xlabel('Annual Income(K$)')\nplt.ylabel('Spending Score(1\u2013100)')\nplt.legend()","9e7da027":"ssd2 = []\n\nfor i in range(2, 11):\n    \n    model=KMeans(n_clusters=i, random_state=101)\n    model.fit(scaled_X2)\n    \n    ssd2.append(model.inertia_)","236666f7":"plt.plot(range(2,11), ssd2, 'o--')\nplt.xlabel('number of clusters')\nplt.ylabel('Sum of Squared Distances')\n","91a16993":"X2_model = KMeans(n_clusters=6, random_state=101)","de42b660":"X2_model.fit(scaled_X2)","e204c65d":"X2_labels = X2_model.labels_\nX2_centroids = X2_model.cluster_centers_","ce9e4e31":"X2['labels'] = X2_labels","dd7d6a29":"X2_centroids","68213147":"for i in range(0,6):\n    plt.scatter(scaled_X2[X2_labels == i , 0] , scaled_X2[X2_labels == i , 1] , label = i+1)\nplt.scatter(X2_centroids[:,0], X2_centroids[:,1], s = 70, c = '#3d000a', label = 'centroids')\nplt.title('X2 Clusters', y = 1.05)\nplt.xlabel('Age')\nplt.ylabel('Spending Score(1\u2013100)')\n#plt.legend()","3cacabe3":"ssd3 = []\n\nfor i in range(2, 11):\n    \n    model=KMeans(n_clusters=i, random_state=101)\n    model.fit(scaled_X3)\n    \n    ssd3.append(model.inertia_)","ff09c355":"plt.plot(range(2,11), ssd3, 'o--')\nplt.xlabel('number of clusters')\nplt.ylabel('Sum of Squared Distances')","5a8cacef":"X3_model = KMeans(n_clusters=3, random_state=101)","b3985da9":"X3_model.fit(scaled_X3)","c0b7e988":"X3_labels = X3_model.labels_\nX3_centroids = X3_model.cluster_centers_","07433d09":"X3['labels'] = X3_labels","a9a12387":"X3_centroids","61d318ae":"for i in range(0,3):\n    plt.scatter(scaled_X3[X3_labels == i , 0] , scaled_X3[X3_labels == i , 1] , label = i+1)\nplt.scatter(X3_centroids[:,0], X3_centroids[:,1], s = 70, c = '#3d000a', label = 'centroids')\nplt.title('X3 Clusters', y = 1.05)\nplt.xlabel('Age')\nplt.ylabel('Annual Income(K$)')\nplt.legend()","5b08d04c":"ssdf = []\n\nfor i in range(2, 11):\n    \n    model=KMeans(n_clusters=i, random_state=101)\n    model.fit(scaled_df)\n    \n    ssdf.append(model.inertia_)","6cf50a8d":"plt.plot(range(2,11), ssdf, 'o--')\nplt.xlabel('number of clusters')\nplt.ylabel('Sum of Squared Distances')","85b80a53":"df_model = KMeans(n_clusters=6, random_state=101)","09895c53":"df_model.fit(scaled_df)","7990a7c8":"df_labels = df_model.labels_\ndf_centroids = df_model.cluster_centers_","099f4072":"df['labels'] = df_labels","88354aaf":"df_centroids","ca798005":"from mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure(figsize=(15,8))\nax = Axes3D(fig)\n\nu_labels = np.unique(df_labels)\n\nfor i in u_labels:\n    \n    ax.scatter(scaled_df[df_labels == i , 0],\n               scaled_df[df_labels == i , 1],\n               scaled_df[df_labels == i , 2],\n               label = i+1, s = 50)\n    \nax.scatter(df_centroids[:,0], df_centroids[:,1], df_centroids[:,2], s = 100, c = '0', label = 'centroids')\n\nplt.title('df Clusters', y = 1.05)\nplt.legend()","aa3e3b51":"from sklearn.decomposition import PCA","6d819028":"df = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')","d60b6f80":"df.drop('CustomerID', axis=1, inplace=True)","17306117":"df = pd.get_dummies(df, drop_first=True)","47714f72":"df","6a93a552":"scaled_df = scaler.fit_transform(df)","c7ff3113":"explained_variance = []\n\nfor i in range(1,5):\n    pca = PCA(n_components = i)\n    pca.fit(scaled_df)\n    \n    explained_variance.append(np.sum(pca.explained_variance_ratio_))","8ff8a377":"plt.plot(range(1,5), explained_variance)\nplt.axhline(0.9, c='r')\nplt.axhline(0.8, c='r')","28048c24":"explained_variance","411a2e7f":"pca = PCA(n_components = 3)\npca.fit(scaled_df)","0ea410b7":"pca_samples = pca.transform(scaled_df)","3ef0adbe":"pca_df = pd.DataFrame(pca_samples)","dc9e7d8d":"#k-means\nscaled_pca_df = scaler.fit_transform(pca_df)","7be041d6":"ssdp = []\n\nfor i in range(2, 11):\n    \n    model=KMeans(n_clusters=i)\n    model.fit(scaled_pca_df)\n    \n    ssdp.append(model.inertia_)","10eef5e7":"plt.plot(range(2,11), ssdp, 'o--')\nplt.xlabel('number of clusters')\nplt.ylabel('Sum of Squared Distances')","453ba40b":"pca_df_model = KMeans(n_clusters=5, random_state=101)","2ebb434e":"pca_df_model.fit(scaled_pca_df)","b8923800":"pca_df_labels = pca_df_model.labels_\npca_df_centroids = pca_df_model.cluster_centers_","0660bdda":"pca_df['labels'] = pca_df_labels","21abbbd5":"pca_df_centroids","a972d0fa":"plt.figure(figsize=(18, 11))\nmatrix = np.triu(pca_df.corr())\nsns.heatmap(pca_df.corr(),center= 0, annot=True, linewidth=0.8, mask=matrix)\n\nplt.title('Features Correlation Heatmap', fontsize = 25)","c40a4f80":"### X2","7bdea879":"# Import the Dataset","5cdf68c3":"### scaling & deviding the dataset","5cc4cb61":"# Necessary Libraries","c538958d":"### X1","628e974c":"# EDA","4e6a38ff":"# PCA","c8d26f3b":"# 2) Pandas Profiling","6d81f2b2":"# K-Means Clustering","db4efdb1":"6 is the best number of clusters","2432a618":"5 is the best number of clusters","ebeb608c":"6 is the best number of clusters","58d4c597":"5 is the best number of clusters","b526a9ce":"### X3","f47e9c68":"3 is the best number of clusters","6939c266":"# Data Cleaning","4349ab1c":"# 1) Manual","114d433d":"### df","4b0ba539":"# Dataset Overview"}}