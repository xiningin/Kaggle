{"cell_type":{"8c6f2c2e":"code","7e1a3f88":"code","30d8f4eb":"code","32a77b83":"code","d98611ba":"code","e57a357f":"code","a8089962":"code","f58c4d73":"code","a1d3dc8b":"code","200259ff":"code","cc122aca":"code","869f97aa":"code","615b57f7":"code","34bbd6c7":"code","38d5e460":"code","8abb4e06":"code","1daf4d72":"code","757dd008":"code","16371db7":"code","e0b257c3":"code","3348d80c":"code","418a70ac":"code","0e8fd29e":"code","90fab2dd":"code","b1d4d739":"code","8c02d824":"markdown","4766df2a":"markdown","e22db99f":"markdown","cebf0f55":"markdown","6f72aacb":"markdown","e6593598":"markdown","d18cc0fe":"markdown","3df667e7":"markdown","a0ec85b7":"markdown","b028bf27":"markdown","556903f4":"markdown","032c62ce":"markdown","e61cae23":"markdown"},"source":{"8c6f2c2e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7e1a3f88":"\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport mpl_toolkits\n%matplotlib inline\nfrom sklearn.model_selection import learning_curve, GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score\n\nfrom sklearn.ensemble import GradientBoostingRegressor","30d8f4eb":"Housedata = pd.read_csv(\"..\/input\/kc_house_data.csv\")\nHousedata.head()","32a77b83":"Housedata = Housedata.drop(['id'],axis =1)\nHousedata['year_selling']=pd.to_datetime(Housedata['date']).apply(lambda s: s.year)\nHousedata['age']=Housedata['year_selling']-Housedata['yr_built']","d98611ba":"del Housedata['date']\ndel Housedata['yr_built']\n","e57a357f":"CorrelationMatrix = Housedata.corr()\nfig = plt.figure(figsize = (15,15))\nsns.heatmap(CorrelationMatrix,annot = True,cmap=\"coolwarm\")\nplt.show()\n\n","a8089962":"Housedata['bedrooms'].value_counts().plot(kind='bar')\nplt.title('Count of Bedrooms')\nplt.xlabel('Number of Bedrooms')\nplt.ylabel('Count')\nsns.despine\n","f58c4d73":"\nHousedata['bathrooms'].value_counts().plot(kind='bar')\nplt.title('Count of Bathrooms')\nplt.xlabel('Number of Bathrooms')\nplt.ylabel('Count')\nsns.despine\n","a1d3dc8b":"Housedata['floors'].value_counts().plot(kind='bar')\nplt.title('Count of floors')\nplt.xlabel('Number of floors')\nplt.ylabel('Count')\nsns.despine\n","200259ff":"plt.scatter(Housedata.sqft_living,Housedata.price)\nplt.title(\"Square Feet vs Price \")","cc122aca":"plt.scatter(Housedata.bedrooms,Housedata.price)\nplt.title(\"Bedroom and Price \")\nplt.xlabel(\"Bedrooms\")\nplt.ylabel(\"Price\")\nplt.show()\nsns.despine","869f97aa":"plt.scatter(Housedata.waterfront,Housedata.price)\nplt.title(\"Waterfront vs Price ( 0= no waterfront)\")","615b57f7":"Houseprice  = Housedata['price']\ndel  Housedata['price']","34bbd6c7":"Inputfeatures = Housedata.values","38d5e460":"Houseprice.values","8abb4e06":"from sklearn.model_selection import train_test_split\nX_train,X_test ,Y_train ,Y_test =train_test_split(Inputfeatures ,Houseprice, test_size = 0.10,random_state =2)","1daf4d72":"from sklearn.ensemble import GradientBoostingRegressor\nGBR = GradientBoostingRegressor(n_estimators=2000, max_depth=5,verbose=2,learning_rate=0.05, validation_fraction=0.1,random_state=2)\nGBR","757dd008":"GBR.fit(X_train, Y_train)\n","16371db7":"print(\"Accuracy on training data --> \", GBR.score(X_train, Y_train)*100)","e0b257c3":"print(\"Accuracy on test data \", GBR.score(X_test, Y_test)*100)","3348d80c":"PredictedpriceGBR = GBR.predict(X_test)\nPredictedprice = pd.Series(PredictedpriceGBR)\nPredictedprice[0:10]","418a70ac":"\nRealPrice = Y_test\nRealPrice[0:10]","0e8fd29e":"RealPrice = Y_test\nRealPrice=pd.Series(RealPrice)\nRealPrice[0:10]","90fab2dd":"DataframePredictedandRealPrice= pd.DataFrame({ 'RealPrice':RealPrice[0:10],'Predictedprice':PredictedpriceGBR[0:10]})\nDataframePredictedandRealPrice","b1d4d739":"ax = DataframePredictedandRealPrice.plot.bar()\nplt.xticks(rotation =90)\nplt.title('House Price Prediction using Gradient Boosting Regressor',pad = 20,fontsize = 15)","8c02d824":"## Accuracy on test data is 92.8%","4766df2a":"## Train model on training data","e22db99f":"## Feature Engineering ","cebf0f55":"## Accuracy on training data is 98.6%","6f72aacb":"## Reading Data","e6593598":"## Graph of real and predicted price for first 10 entries","d18cc0fe":"## Split data into training and testing","3df667e7":"## No features are highly correlated so will keep all features","a0ec85b7":"## Seperate houseprice  and input features from dataset","b028bf27":"## Data Visualization using bar plot ,distribution of bedrooms ,bathrooms and number of floors","556903f4":"## Build XGBoost Regression model","032c62ce":"## Correlation Matrix","e61cae23":"## Scatterplot between sqft_living vs price,bedrooms vs price ,waterfront vs price\n"}}