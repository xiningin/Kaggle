{"cell_type":{"2d035cf0":"code","37e65ad4":"code","7208c7b5":"code","7761e223":"code","f05252da":"code","f7738626":"code","3d7d3b06":"code","ba791708":"code","12a04565":"code","4d978208":"code","1b0b4bdc":"code","2d6ff45e":"code","60c14028":"code","e2ffbadc":"code","09015cfa":"code","38cb99e1":"code","e48ea398":"code","8f9cf567":"code","c975e180":"code","4b277840":"code","37b516da":"code","57500791":"code","cf951b32":"code","76611ac0":"code","61dacac4":"code","1e243615":"code","37bee51d":"code","8af59f56":"code","823f54c3":"code","3b7b6998":"code","adb9c682":"code","2cf304f5":"code","4ed2bd65":"code","1099d958":"code","798f4931":"code","c5019e0a":"code","1bca8df9":"code","df0d8a54":"code","cab737b3":"code","698fb45c":"code","ef84e5a1":"code","054377d6":"code","b884f83e":"code","7bcaaa7e":"code","0b53fdca":"code","4acd575b":"code","afd2df82":"code","3d7e70b7":"code","22b96603":"code","19e8c0de":"code","c3ebefa9":"code","b1d79b08":"code","a94d49ce":"code","297cf289":"code","3b020be6":"code","cee21472":"code","84292a0b":"code","f59e8909":"code","8748d5ab":"code","b796e767":"code","b32dd420":"markdown","8c6c8ce4":"markdown","1bc12238":"markdown","3148a4aa":"markdown","161f7928":"markdown","586de380":"markdown","3fd9371e":"markdown","c77143d4":"markdown","05748002":"markdown","76a28e2e":"markdown"},"source":{"2d035cf0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","37e65ad4":"df = pd.read_csv('..\/input\/iris-dataset\/iris.data.csv', header=None)","7208c7b5":"df.head()","7761e223":"df.tail()","f05252da":"y = df.iloc[:,4].values","f7738626":"np.unique(y)","3d7d3b06":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()","ba791708":"le = le.fit(y)","12a04565":"y = le.transform(y)","4d978208":"y","1b0b4bdc":"le.classes_","2d6ff45e":"X = df.iloc[:,[2,3]].values","60c14028":"X","e2ffbadc":"X.shape, y.shape","09015cfa":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1, stratify=y)","38cb99e1":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","e48ea398":"print('Labels counts in y:', np.bincount(y))\nprint('Labels counts in y_train:', np.bincount(y_train))\nprint('Labels counts in y_test:', np.bincount(y_test))","8f9cf567":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nsc.fit(X_train)\nX_train_std = sc.transform(X_train)\nX_test_std = sc.transform(X_test)","c975e180":"X_train_std","4b277840":"X_test_std","37b516da":"from sklearn.linear_model import LogisticRegression\nclt = LogisticRegression(random_state=1).fit(X_train_std, y_train)","57500791":"from sklearn.svm import SVC\n\nclf = SVC(gamma='auto')\n\nclf.fit(X_train_std, y_train)","cf951b32":"from sklearn.linear_model import Perceptron\n\nppn = Perceptron(max_iter=40, eta0=0.1, random_state=1)\nppn.fit(X_train_std, y_train)","76611ac0":"y_pred = clf.predict(X_test_std)","61dacac4":"y_pred","1e243615":"print('Misclassified samples: %d' % (y_test != y_pred).sum())","37bee51d":"from sklearn.metrics import accuracy_score\n\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))","8af59f56":"from matplotlib.colors import ListedColormap\nimport matplotlib.pyplot as plt\n\n\ndef plot_decision_regions(X, y, classifier, test_idx=None, resolution=0.02):\n\n    # setup marker generator and color map\n    markers = ('s', 'x', 'o', '^', 'v')\n    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')\n    cmap = ListedColormap(colors[:len(np.unique(y))])\n\n    # plot the decision surface\n    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),\n                           np.arange(x2_min, x2_max, resolution))\n    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\n    Z = Z.reshape(xx1.shape)\n    plt.contourf(xx1, xx2, Z, alpha=0.3, cmap=cmap)\n    plt.xlim(xx1.min(), xx1.max())\n    plt.ylim(xx2.min(), xx2.max())\n\n    for idx, cl in enumerate(np.unique(y)):\n        plt.scatter(x=X[y == cl, 0], \n                    y=X[y == cl, 1],\n                    alpha=0.8, \n                    c=colors[idx],\n                    marker=markers[idx], \n                    label=cl, \n                    edgecolor='black')\n\n    # highlight test samples\n    if test_idx:\n        # plot all samples\n        X_test, y_test = X[test_idx, :], y[test_idx]\n\n        plt.scatter(X_test[:, 0],\n                    X_test[:, 1],\n                    c='',\n                    edgecolor='black',\n                    alpha=1.0,\n                    linewidth=1,\n                    marker='o',\n                    s=100, \n                    label='test set')","823f54c3":"X_combined_std = np.vstack((X_train_std, X_test_std))\ny_combined = np.hstack((y_train, y_test))","3b7b6998":"X_combined_std.shape, y_combined.shape","adb9c682":"y_train.shape, y_test.shape","2cf304f5":"plot_decision_regions(X=X_combined_std, y=y_combined,\n                      classifier=ppn, test_idx=range(105, 150))\nplt.xlabel('petal length [standardized]')\nplt.ylabel('petal width [standardized]')\nplt.legend(loc='upper left')\nplt.show()","4ed2bd65":"x1_min, x1_max = X_combined_std[:, 0].min() - 1, X_combined_std[:, 0].max() + 1\nx2_min, x2_max = X_combined_std[:, 1].min() - 1, X_combined_std[:, 1].max() + 1","1099d958":"x1_min, x1_max, x2_min, x2_max","798f4931":"xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, 0.02),np.arange(x2_min, x2_max, 0.02))","c5019e0a":"xx1.shape, xx2.shape","1bca8df9":"nx, ny = (3, 3)\nx = np.linspace(0, 2, nx)\ny = np.linspace(0, 1, ny)","df0d8a54":"x","cab737b3":"y","698fb45c":"xv, yv = np.meshgrid(x, y)","ef84e5a1":"xv","054377d6":"yv","b884f83e":"xv.ravel()","7bcaaa7e":"(np.array([xx1.ravel(), xx2.ravel()]).T).shape","0b53fdca":"from io import StringIO\ncsv_data = \\\n'''A,B,C,D\n1.0,2.0,3.0,4.0\n5.0,6.0,,8.0\n10.0,11.0,12.0,'''\ndf = pd.read_csv(StringIO(csv_data))\ndf","4acd575b":"# remove rows that contain missing values\n\ndf.dropna(axis=0)","afd2df82":"# remove columns that contain missing values\n\ndf.dropna(axis=1)","3d7e70b7":"# only drop rows where all columns are NaN\n\ndf.dropna(how='all')","22b96603":"# drop rows that have less than 3 real values \n\ndf.dropna(thresh=4)","19e8c0de":"# only drop rows where NaN appear in specific columns (here: 'C')\n\ndf.dropna(subset=['C'])","c3ebefa9":"# impute missing values via the column mean\n\nfrom sklearn.preprocessing import Imputer\n\nimr = Imputer(missing_values='NaN', strategy='mean', axis=0)\nimr = imr.fit(df.values)\nimputed_data = imr.transform(df.values)\nimputed_data","b1d79b08":"import pandas as pd\n\ndf = pd.DataFrame([['green', 'M', 10.1, 'class2'],\n                   ['red', 'L', 13.5, 'class1'],\n                   ['blue', 'XL', 15.3, 'class2']])\n\ndf.columns = ['color', 'size', 'price', 'classlabel']\ndf","a94d49ce":"from sklearn.preprocessing import LabelEncoder\nX = df[['color', 'size', 'price']].values\n\ncolor_le_1 = LabelEncoder()\nX[:, 0] = color_le_1.fit_transform(X[:, 0])\nX","297cf289":"color_le_2 = LabelEncoder()\nX[:, 1] = color_le_2.fit_transform(X[:, 1])\nX","3b020be6":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(\n    [('oh_enc', OneHotEncoder(sparse=False), [0, 1]),], remainder='passthrough')","cee21472":"ct.fit_transform(X)","84292a0b":"df_wine = pd.read_csv('..\/input\/wine-quality\/winequalityN.csv')","f59e8909":"df_wine","8748d5ab":"np.unique(df_wine['type'])","b796e767":"from IPython.display import Image\nImage(\"..\/input\/percetron-image\/Perceptron.PNG\")","b32dd420":"# Task 2 Apply different kind of filtering to clean the data","8c6c8ce4":"# Eliminating samples or features with missing values","1bc12238":"# Assignment - Implement a perceptron from scratch and apply it to iris dataset given here.","3148a4aa":"# Part-2 Data Manipulation","161f7928":"# Encoding (One Hot Encoding)","586de380":"# Part-1 Applying Different Estimators For Simple Classification Problem","3fd9371e":"# Task 1 Use Classifiers: Logistic Regression, SVM and Decision Tree from sklearn","c77143d4":"# Imputing missing values","05748002":"# Training a perceptron via scikit-learn","76a28e2e":"# Wine Dataset"}}