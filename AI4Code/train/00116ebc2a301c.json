{"cell_type":{"db679b20":"code","b3f88df9":"code","135557fb":"code","a5eec221":"code","30063624":"code","b7366819":"code","6ba8ebe1":"code","f2c5e187":"code","81d42725":"code","9b5ebabe":"code","3093f76b":"code","821422ec":"code","99735156":"markdown","46d6f9e2":"markdown","12fd9b42":"markdown","f945eb86":"markdown","4f48f960":"markdown","664c5fe6":"markdown","d84ac54c":"markdown","16bd57f3":"markdown","441ac4de":"markdown","69edeef8":"markdown"},"source":{"db679b20":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport cv2\nimport json\nfrom PIL import Image\nimport shutil\nfrom tqdm import tqdm\nimport torch\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os","b3f88df9":"!mkdir -p \/root\/.config\/Ultralytics\n!cp \/kaggle\/input\/yolov5-font\/Arial.ttf \/root\/.config\/Ultralytics\/","135557fb":"# for submission format\nimport sys\nsys.path.append('..\/input\/tensorflow-great-barrier-reef')","a5eec221":"import greatbarrierreef\n\nenv = greatbarrierreef.make_env()   # initialize the environment\niter_test = env.iter_test()","30063624":"model = torch.hub.load('\/kaggle\/input\/yolov5-lib-ds', 'custom', path='\/kaggle\/input\/weights\/best.pt', source='local', force_reload=True)  # or yolov5m, yolov5l, yolov5x, custom","b7366819":"# initialise variables\nidc = 0\nsubmission_dict = {\n    'index': [],\n    'annotations': [],\n}\n\n# submit predictions\nfor (image, sample_prediction_df) in iter_test:\n    results = model(image)\n    predictions = []\n    prediction_str = ''\n    \n    submission_dict['index'].append(idc)\n    for i in results.xyxy[0].tolist():\n        x1, y1, x2, y2, _, _ = map(int, i)\n        _, _, _, _, c,_ = i\n        # if c < 0.2:\n        #     continue\n        w = x2 - x1\n        h = y2 - y1\n        predictions.append('{:.2f} {} {} {} {}'.format(c, x1, y1, w, h))\n    \n    prediction_str = ' '.join(predictions)\n    submission_dict['annotations'].append(prediction_str)\n    # sample_prediction_df['annotations'] = '0 0 0 0 0'\n    sample_prediction_df['annotations'] = ''\n    # sample_prediction_df['annotations'] = prediction_str\n    \n    for key,value in sample_prediction_df.items():\n        print(key, ':', value)\n    \n    env.predict(sample_prediction_df)\n    idc+=1","6ba8ebe1":"sample_prediction_df.head()","f2c5e187":"df= pd.DataFrame(submission_dict)\ndf.to_csv(\"submission.csv\", index = False, na_rep = '0')\ndf.head()","81d42725":"sub_df = pd.read_csv('submission.csv')\nsub_df.head()","9b5ebabe":"idc = 0\nsubmission_dict = {\n    'index': [],\n    'annotations': [],\n}\n\n# two images\nimage = (\"\/kaggle\/input\/tensorflow-great-barrier-reef\/train_images\/video_0\/0.jpg\",\"\/kaggle\/input\/tensorflow-great-barrier-reef\/train_images\/video_0\/63.jpg\")","3093f76b":"dev = False\n# dev = True\n\nif dev:\n    for path in image:\n        results = model(path)\n        predictions = []\n        prediction_str = ''\n        submission_dict['index'].append(idc)\n        print(len(results.xyxy[0].tolist()))\n        print(results.xyxy[0].tolist())\n\n        # append all results together for multiple COTS\n        for i in results.xyxy[0].tolist():\n            x1, y1, x2, y2, _, _ = map(int, i)\n            _, _, _, _, c,_ = i\n            # if c < 0.2:\n                # continue\n            w = x2 - x1\n            h = y2 - y1\n            predictions.append('{:.2f} {:d} {:d} {:d} {:d}'.format(c, x1, y1, w, h))\n\n            prediction_str = ' '.join(predictions)\n        submission_dict['annotations'].append(prediction_str)\n        idc+=1","821422ec":"print(submission_dict)\n\ndf= pd.DataFrame(submission_dict)\ndf","99735156":"## Submit predictions","46d6f9e2":"# Initialise environment","12fd9b42":"# Development\nThis section contains code for testing and development.","f945eb86":"# Submission environment\n\nThis section contains code to actually submit for the competition.","4f48f960":"## Make predictions\nSet `dev = True` to overwrite previous `submission.csv` file.","664c5fe6":"# Import modules","d84ac54c":"# Train Model","16bd57f3":"## Initialise variables and small test set","441ac4de":"## Check Submission","69edeef8":"## Create Submission"}}