{"cell_type":{"968fdb0e":"code","4870c694":"code","d6dba190":"code","a9680fb9":"code","d6dfcd9f":"code","1c367fcb":"code","5b0a6d23":"code","6c1d1862":"code","d63f38be":"code","52670b98":"code","6875d6d4":"code","12111f16":"code","71916e2b":"code","c25e4780":"code","3fe26663":"code","eac402cc":"code","6c31dc5e":"code","b093f7d5":"code","fbd03602":"code","0aab791e":"code","a95e73b6":"code","9b78212a":"code","31ae4133":"code","fe2dd65f":"code","a783eb02":"code","26ed4db1":"code","41e4d72b":"code","a56b0da7":"code","8b145c22":"code","4f4c144a":"code","8da8bafe":"code","4599fc66":"code","671244a2":"code","85a55469":"code","143794af":"code","52c72459":"code","ce218235":"code","daa7e41b":"code","67a5b171":"code","5a485390":"code","5703252d":"code","8d3a2623":"code","ddcbc4ad":"code","ff248a0f":"code","507c64f9":"code","12ee5cd5":"code","5dd4bb55":"code","29bb4b10":"code","8a542f2e":"code","ef658dc9":"markdown","01ec7e1a":"markdown","09227948":"markdown","7f6c1144":"markdown","355e86f1":"markdown"},"source":{"968fdb0e":"# Importing Packages\n\nimport numpy as np\nimport pandas as pd\nimport statistics\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\nimport os\nos.getcwd()","4870c694":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d6dba190":"# Reading File\n\nr = pd.read_excel('\/kaggle\/input\/life-expectancy\/life expectancy.xlsx')\ndf = pd.DataFrame(r)\n\n# Understanding the data\n\ndf.head()","a9680fb9":"# Checking shape : Total number of rows and columns\n\ndf.shape","d6dfcd9f":"# Checking data types\n\ndf.info()","1c367fcb":"# Checking unique values\n\ndf.nunique()","5b0a6d23":"# Describe the data\n\ndf.describe()","6c1d1862":"# Renaming the Columns\n\ndf.rename(columns = {'Country':'country','Year':'year','Status':'status','Life expectancy ':'life_expectancy',\n                     'Adult Mortality':'adult_mortality','infant deaths':'infant_deaths','Alcohol':'alcohol',\n                     'percentage expenditure':'%_expenditure','Hepatitis B':'hepatitis_b','Measles ':'measles',\n                     ' BMI ':'bmi','under-five deaths ':'>5_deaths','Polio':'polio','Total expenditure':'total_expenditure',\n                     'Diphtheria ':'diphtheria',' HIV\/AIDS':'hiv\/aids','GDP':'gdp','Population':'population',\n                     ' thinness  1-19 years':'thinness_10-19_yrs',' thinness 5-9 years':'thinness_5-9_yrs',\n                     'Income composition of resources':'hdi','Schooling':'schooling'},inplace = True)","d63f38be":"# Identifying Categorical & Numerical Cols\n\ncols = df.columns\nnum_col = df._get_numeric_data().columns.to_list()\ncat_col = list(set(cols)-set(num_col))\n\nprint('Numerical Columns')\nprint(num_col)\nprint('\\nCategorical Columns')\nprint(cat_col)","52670b98":"# Checking for Duplicates\n\ndf[df.duplicated()]","6875d6d4":"# Dealing with Null values  \n\ndf.isnull().sum()","12111f16":"# Since life_expectancy is our target\/study variable, dropping all null records in it\n\ndf.dropna(subset=['life_expectancy'],how='any',axis=0,inplace=True)\ndf.isnull().sum()","71916e2b":"# Since dataset is small in size, we won't be removing all rows having null values as it will lead to loss of information\n# Replacing null records with Median in Numerical cols\n\nfor i in df.columns.drop(['country','status']):\n    df[i].fillna(df[i].median(),inplace=True)\n\ndf.isnull().sum()","c25e4780":"# Correlation Matrix\n\nplt.figure(figsize=(15,10))\ncorr = df.corr()\nsns.heatmap(corr,annot=True,linewidths = 1)\nplt.show()","3fe26663":"# Life Expectancy Distribution\n# Most of Country having age b\/w 70 to 75 have good life expectancy\n\nplt.figure(figsize=(5,5))\nplt.title('Life Expectancy')\nsns.distplot(df['life_expectancy'])","eac402cc":"# Life expectancy Vs Status\n# Life expectancy of developed countries are greater than that of developing countries\n\nsns.barplot(x=df['status'],y=df['life_expectancy'])\nplt.show()","6c31dc5e":"# Life Expectancy Vs Year\n# Life Expectancy gets better year on year\n\nsns.lineplot(x=df['year'],y=df['life_expectancy'],marker='o')\nplt.show()","b093f7d5":"# Life Expectancy Vs Percentage of Expenditure\n# Increase in percentage expenditure increases life expectancy\n\nsns.regplot(x=df['%_expenditure'],y=df['life_expectancy'])\nplt.show()","fbd03602":"# Life Expectancy Vs GDP\n# High GDP can increase life expectancy of a country\n\nsns.regplot(x=df['gdp'],y=df['life_expectancy'])\nplt.show()","0aab791e":"# Life Expectancy Vs Schooling\n# Schooling\/education can increase income of a individual, thus helps in lifting out of poverty and increase life expectancy too\n\nsns.regplot(x=df['schooling'],y=df['life_expectancy'])\nplt.show()","a95e73b6":"# Adult Mortality Vs Year\n# Adult Mortality Rate gets reduced year on year\n\nsns.lineplot(x=df['year'],y=df['adult_mortality'],dashes=False,marker='*')\nplt.show()","9b78212a":"# Life Expectancy Vs Hiv\/Aids\n# Results showed a steadily decreasing life expectancy for people with HIV \n\nsns.regplot(x=df['hiv\/aids'],y=df['life_expectancy'])\nplt.show()","31ae4133":"# Life Expectancy Vs Polio\n# Results showed a steadily increasing life expectancy for people with Polio Immunization\n\nsns.regplot(x=df['polio'],y=df['life_expectancy'])\nplt.show()","fe2dd65f":"# Life Expectancy Vs Alcohol Consumption\n# Results showed a steadily increasing life expectancy for people having alcohol consumption\n\nsns.regplot(x=df['alcohol'],y=df['life_expectancy'])\nplt.show()","a783eb02":"# Thinness Vs Status\n# Prevalence of thinness\/malnutrition among childrens\/adults in developing countries are greater than that of developed country\n\nsns.barplot(x=df['thinness_5-9_yrs'],y=df['status'],orient=\"h\")\nplt.show()\n\nsns.barplot(x=df['thinness_10-19_yrs'],y=df['status'],orient=\"h\")\nplt.show()","26ed4db1":"# Life Expectancy Vs Income composition of resources \n# Country scores a higher Human Development Index when the lifespan is higher\n\nsns.scatterplot(df['hdi'],df['life_expectancy'])\nplt.show()","41e4d72b":"# Detecting the Outliers\n\nfor i in df[num_col]:\n    sns.boxplot(df[i])\n    plt.show()\n    ","a56b0da7":"# Handling the Potential Outliers ","8b145c22":"# Infant_Deaths, Measles, >5_deaths represents number of Infant Deaths per 1000 population. \n# That is why number beyond 1000 is unrealistic. So we will remove them as outliers.\n\n\ndf = df[df['infant_deaths'] < 1001]\ndf = df[df['measles'] < 1001]\ndf = df[df['>5_deaths'] < 1001]\n\ndf.shape","4f4c144a":"# BMI values are very unrealistic because the value more 40 considered as extreme obesity. \n# Some country has mean around greater than 60 which is not possible. So will drop that entire column.\n\ndf.drop(['bmi'],axis=1,inplace=True)\ndf.shape","8da8bafe":"# Computing Categorical cols\n\ndff = df[['status','country']]","4599fc66":"# Since values are very large in columns of %_Expenditure, Gdp, and Population. \n# It's better to take log value or use Winsorization as it brings data to a smaller range & do feature scaling on top of data\n# Since we are getting negative value for %_Expenditure after log transform so handling it by log(x+1)\n\n\ndf['%_expenditure'] = (df['%_expenditure']-df['%_expenditure'].min()+1).transform(np.log)\ndf['population'] = (df['population']+1).transform(np.log)\ndf['gdp'] = (df['gdp']+1).transform(np.log)\n#df = df.replace([np.inf, -np.inf], 0)\n\ndfl = df[['%_expenditure','population','gdp']]\ndfl.describe()","671244a2":"# Winsorization \n# For rest other columns\n\nfrom scipy.stats.mstats import winsorize\ndfw = df.drop(['%_expenditure','population','gdp','status','country'],axis=1)\nfeatures = dfw","85a55469":"def percentile_capping(df,cols,from_low_end,from_high_end):\n    for i in cols:\n        winsorize(a=df[i],limits=(from_low_end,from_high_end),inplace=True)\n        \npercentile_capping(dfw,features,.10,.10)","143794af":"dfw = pd.concat([dff,dfw,dfl],axis=1)","52c72459":"# Describing the data after trimming\/capping the outliers\n\ndfw.describe()","ce218235":"# Visualising the data after trimming\/capping the outliers\n\nfor i in dfw._get_numeric_data():\n    sns.boxplot(dfw[i])\n    plt.show()","daa7e41b":"# Load from Scikit Learn\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error\n","67a5b171":"# Since Status,Country is Categorical, coverting it to Numerical form\n\nfrom sklearn import preprocessing \nle = preprocessing.LabelEncoder() \n\ndfw['status'] = le.fit_transform(dfw['status'])\ndfw['country'] = le.fit_transform(dfw['country'])\ndfw['year'] = le.fit_transform(dfw['year'])\n\ndfw[['status','country','year']].nunique()","5a485390":"# Create Dummy Variables for Country, Status\n# One-Hot Encoding\n\nc1 = pd.get_dummies(dfw['status'],drop_first=True,prefix='status')\nc2 = pd.get_dummies(dfw['country'],drop_first=True,prefix='country')\nc3 = pd.get_dummies(dfw['year'],drop_first=True,prefix='year')\n\ndfc = pd.concat([c1,c2],axis=1)\ndfc.head()","5703252d":"# Actual Dummies\n\ndfd = pd.concat([dfw,dfc],axis=1)\ndfd.drop(['status','country','year'],axis=1,inplace=True)\ndfd.head()","8d3a2623":"# Train-Test Split\n\n# Independent variable\nX = dfd[['adult_mortality', 'infant_deaths', 'alcohol', '%_expenditure', 'hepatitis_b', 'measles', '>5_deaths', 'polio', 'total_expenditure', 'diphtheria', 'hiv\/aids', 'gdp', 'population', 'thinness_10-19_yrs', 'thinness_5-9_yrs', 'hdi', 'schooling'] + dfc.columns.to_list()]                    \n\n# Dependent variable\ny = dfd['life_expectancy']        \n\nX_train,X_test,y_train,y_test = train_test_split(X,y,random_state=37)","ddcbc4ad":"# Checking data split\n\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","ff248a0f":"# Multiple Regression fit\n\nmlr = LinearRegression()\nmlr.fit(X_train,y_train)\n\nprint('Intercept is',mlr.intercept_) \nprint('Coefficient is',mlr.coef_) ","507c64f9":"# Predictions\n\n# Training\ny_train_pred = mlr.predict(X_train)\n\n# Testing\ny_test_pred = mlr.predict(X_test)","12ee5cd5":"# Let's check how much good fit it is by calculating R-Squared\n\nprint('Mean Squared Error for training data is',mean_squared_error(y_train,y_train_pred))\nprint('Mean Absolute Error for training data is',mean_absolute_error(y_train,y_train_pred))\nprint('R2 Score for training data in MLR is',r2_score(y_train,y_train_pred))\nprint('\\n')\n\nprint('Mean Squared Error for testing data is',mean_squared_error(y_test,y_test_pred))\nprint('Mean Absolute Error for testing data is',mean_absolute_error(y_test,y_test_pred))\nprint('R2 Score for testing data in MLR is',r2_score(y_test,y_test_pred))","5dd4bb55":"# Load from Scikit Learn\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nrfr = RandomForestRegressor()\nrfr.fit(X_train,y_train)","29bb4b10":"# Predictions\n\n# Training\ny_train_pred = rfr.predict(X_train)\n\n# Testing\ny_test_pred = rfr.predict(X_test)","8a542f2e":"# Let's check how much good fit it is by calculating R-Squared\n\nprint('R2 Score for training data in MLR is',r2_score(y_train,y_train_pred))\n\nprint('R2 Score for testing data in MLR is',r2_score(y_test,y_test_pred))","ef658dc9":"#### Feature Engineering","01ec7e1a":"#### Multiple Linear Regression Model","09227948":"#### Random Forest Regressor","7f6c1144":"#### Data Cleanup ","355e86f1":"#### EDA"}}