{"cell_type":{"3da502e0":"code","cdd3ee61":"code","f1168252":"code","3cd53955":"code","8b50ca56":"code","984a25ab":"code","ab991e44":"code","9ee30b67":"code","a4b981d3":"code","d057b9f0":"code","a0faf6be":"code","491482dc":"code","f7cdd8f0":"code","cd1e9259":"code","584ad57e":"markdown","c5e6b675":"markdown","35bf2c09":"markdown","ba017bea":"markdown","3988e2a4":"markdown","4db9a47f":"markdown"},"source":{"3da502e0":"import pandas as pd\nimport numpy as np\nfrom sklearn.metrics import mean_absolute_error as mae\nfrom pandas.plotting import register_matplotlib_converters\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom fbprophet import Prophet\nfrom fbprophet.diagnostics import cross_validation, performance_metrics\nfrom fbprophet.plot import plot_cross_validation_metric\nregister_matplotlib_converters()","cdd3ee61":"path_data = '\/kaggle\/input\/weekly-deaths-in-the-netherlands\/deaths_NL.csv'\ndf = pd.read_csv(path_data)\n\ndf = df[df[\"Week\"].str.len()<20]\ndf['Week'] = df['Week'].str.replace('*', '')\ndf[\"Week\"] = pd.to_datetime(df[\"Week\"]+'0', format=\"%Y week %U%w\")\n\ndf.head()","f1168252":"plt.figure(figsize=(15,5))\nplt.plot(df.Week, df['All ages: both sexes'], label='All ages: both sexes')\nplt.legend()\nplt.show()","3cd53955":"num_week_test_set = 50\nnum_week_to_pred = 100","8b50ca56":"df_both_sexes = df[['Week', 'All ages: both sexes']]\ndf_both_sexes.columns = ['ds', 'y']\n\ntrain = df_both_sexes[:-num_week_test_set]\ntest = df_both_sexes[-num_week_test_set:]\n\ntrain_log = train.copy()\ntrain_log['y'] = np.log1p(train_log['y'])","984a25ab":"plt.figure(figsize=(15,5))\nplt.title('Train and test sets')\nplt.plot(train.ds, train.y, label='train')\nplt.plot(test.ds, test.y, label='test')\nplt.legend()\nplt.show()","ab991e44":"m = Prophet(changepoint_prior_scale=0.003, weekly_seasonality=True)\nm.fit(train)\nfuture = m.make_future_dataframe(periods=num_week_to_pred, freq='W', include_history=False)\nforecast = m.predict(future)\n# forecast['yhat'] = np.expm1(forcast.yhat)\nforecast.head()","9ee30b67":"def plot_forecast(test, forecast):\n    score = np.round(mae(test.y, forecast[:num_week_test_set].yhat), 2)\n    plt.figure(figsize=(15,5))\n    plt.title(\"Forecast last {} points.\\nProphet.\\nScore: {}\".format(num_week_to_pred, score))\n    plt.plot(test.ds, test.y, 'o-', label='test')\n    plt.plot(forecast.ds, forecast.yhat, 'o-', label='forecast')\n    plt.legend()\n    plt.show()","a4b981d3":"m.plot_components(forecast);","d057b9f0":"len(train)","a0faf6be":"cv = cross_validation(m, initial='800 days', period='10 days', horizon='10 days')","491482dc":"performance_metrics(cv)","f7cdd8f0":"plot_cross_validation_metric(cv, 'mae');","cd1e9259":"plot_forecast(test, forecast)","584ad57e":"# Import modules","c5e6b675":"# Prediction","35bf2c09":"# Train and cross validation","ba017bea":"## Validation","3988e2a4":"# Data","4db9a47f":"> ## Model train"}}