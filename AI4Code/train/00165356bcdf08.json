{"cell_type":{"c6d33594":"code","b72e08ea":"code","a155a70c":"code","3e7f75f3":"code","d63805c6":"code","6954eaa1":"code","2a58e127":"code","da7300a4":"code","ace2873e":"code","eb94c2c3":"code","77937014":"code","81a9bed2":"code","da111bdd":"code","283229d2":"code","d278a438":"code","f9f091b4":"code","ef918c67":"code","4d895003":"code","911788a5":"code","5023fa04":"code","c04b4589":"markdown","a1cf0868":"markdown","684dc0fa":"markdown","a9f1133d":"markdown","b56c7824":"markdown","2900f538":"markdown","17558962":"markdown","8c36afcd":"markdown","42749780":"markdown","07c298e4":"markdown","36f27b53":"markdown","3a74c568":"markdown","b726a2f8":"markdown","8362cff0":"markdown"},"source":{"c6d33594":"import numpy as np\nfrom scipy.spatial import distance\n\npointA = np.array([10,0,0])\npointB = np.array([0,10,0])\npointC = np.array([0,0,10])","b72e08ea":"%%time\ndistance.euclidean(pointA,pointA)","a155a70c":"%%time\nnp.linalg.norm(pointA-pointA)","3e7f75f3":"%%time\nnp.sqrt(np.dot(pointA-pointA,pointA-pointA))","d63805c6":"%%time\nnp.sqrt((pointA[0]-pointA[0])**2 + (pointA[1]-pointA[1])**2 + (pointA[2]-pointA[2])**2)","6954eaa1":"distance.euclidean(pointA,pointB)","2a58e127":"np.linalg.norm(pointA-pointB)","da7300a4":"np.sqrt(np.dot(pointA-pointB,pointA-pointB))","ace2873e":"np.sqrt((pointA[0]-pointB[0])**2 + (pointA[1]-pointB[1])**2 + (pointA[2]-pointB[2])**2)","eb94c2c3":"np.linalg.norm(pointA-pointC) == np.linalg.norm(pointA-pointB)","77937014":"import pandas as pd\nX = pd.DataFrame({\n    \"X\":[1,2,3,6,7,8,8,7,9],\n    \"Y\":[2,3,1,5,7,6,1,2,3],\n    \"C\":[\"black\",\"black\",\"black\",\"red\",\"red\",\"red\",\"blue\",\"blue\",\"blue\"]\n})\ny = pd.DataFrame({\n    \"X\":[7,3,8],\n    \"Y\":[5,2,2],\n    \"C\":[None,None,None]\n})","81a9bed2":"#G\u00f6rselle\u015ftirme amac\u0131yla matplotlib k\u00fct\u00fcphanesini \u00e7a\u011f\u0131r\u0131yoruz\nimport matplotlib.pyplot as plt","da111bdd":"plt.scatter(X.X,X.Y, s=100, color=X.C)\nplt.scatter(y.X,y.Y, s=100)","283229d2":"#skor de\u011ferlerini atamak i\u00e7in bo\u015f bir liste olu\u015fturuyoruz\nskorTablosu = []\n#test boyunca d\u00f6n\nfor testIndex in range(len(y[\"X\"])):\n    print(\"-\")\n    #e\u011fitim boyunca d\u00f6n test de\u011feriyle uzakl\u0131\u011f\u0131n\u0131 hesapla\n    for egitimIndex in range(len(X[\"X\"])):\n        #test indexi, e\u011fitim indexi ve bu noktalar\u0131n birbirine uzakl\u0131k skoru\n        print(testIndex,\"-\",egitimIndex,\" -- \",distance.euclidean([y[x][testIndex] for x in y if x!=\"C\"],[X[x][egitimIndex] for x in y if x!=\"C\"]))\n        #skorTablosuna skor de\u011ferini i\u015fle\n        skorTablosu.append(distance.euclidean([y[x][testIndex] for x in y if x!=\"C\"],[X[x][egitimIndex] for x in y if x!=\"C\"]))#euclidean hesaplamas\u0131\n    #skor tablosunun minimum de\u011ferinin indexini yazd\u0131r\n    print(skorTablosu.index(min(skorTablosu)))\n    #skorTablosu i\u00e7erisinde en k\u00fc\u00e7\u00fck de\u011ferin indexiyle renk de\u011ferini al\u0131yoruz ve k\u00fcmelenecek test de\u011ferinin renk de\u011ferini de\u011fi\u015ftiriyoruz\n    y[\"C\"][testIndex] = X[\"C\"][skorTablosu.index(min(skorTablosu))]\n    skorTablosu=[]\nX = pd.concat((X,y), axis=0)","d278a438":"plt.scatter(X.X,X.Y, s=100, color=X.C)","f9f091b4":"#G\u00f6rselle\u015ftirme amac\u0131yla plotly k\u00fct\u00fcphanesini ekleyelim\nimport plotly.graph_objs as go\n#i\u015fimizi biraz kolayla\u015ft\u0131rmas\u0131 amac\u0131yla pandas k\u00fct\u00fcphanesini de projemize dahil ediyoruz\nimport pandas as pd","ef918c67":"egitim = pd.DataFrame({\"X\":[10,9,8,1,2,3,1,2,3,1,2,3],\n                   \"Y\":[1,2,3,1,2,3,10,9,8,1,2,3],\n                   \"Z\":[1,2,3,10,9,8,1,2,3,1,2,3],\n                   \"C\":[1,1,1,2,2,2,3,3,3,4,4,4]})\n\ntest = pd.DataFrame({\"X\":[6,5,4,8],\n                   \"Y\":[6,5,4,4],\n                   \"Z\":[6,5,4,4],\n                   \"C\":[5,5,5,5]})","4d895003":"go.Figure(data =[go.Scatter3d(x = egitim['X'], y = egitim['Y'], z = egitim['Z'], mode =\"markers\",marker = dict( \n                                     size = 12, \n                                     color = egitim['C'], \n                                     opacity = 0.8\n                                   )),\n                 go.Scatter3d(x = test['X'], y = test['Y'], z = test['Z'], mode =\"markers\",marker = dict( \n                                     size = 12, \n                                     color = test['C'], \n                                     opacity = 0.8\n                                   ))])","911788a5":"#skor de\u011ferlerini atamak i\u00e7in bo\u015f bir liste olu\u015fturuyoruz\nskorTablosu = []\n#test boyunca d\u00f6n\nfor testIndex in range(len(test[\"X\"])):\n    print(\"-\")\n    #e\u011fitim boyunca d\u00f6n test de\u011feriyle uzakl\u0131\u011f\u0131n\u0131 hesapla\n    for egitimIndex in range(len(egitim[\"X\"])):\n        #test indexi, e\u011fitim indexi ve bu noktalar\u0131n birbirine uzakl\u0131k skoru\n        print(testIndex,\"-\",egitimIndex,\" -- \",distance.euclidean([test[x][testIndex] for x in test if x!=\"C\"],[egitim[x][egitimIndex] for x in test if x!=\"C\"]))\n        #skorTablosuna skor de\u011ferini i\u015fle\n        skorTablosu.append(distance.euclidean([test[x][testIndex] for x in test if x!=\"C\"],[egitim[x][egitimIndex] for x in test if x!=\"C\"]))#euclidean hesaplamas\u0131\n    #skor tablosunun minimum de\u011ferinin indexini yazd\u0131r\n    print(skorTablosu.index(min(skorTablosu)))\n    #skorTablosu i\u00e7erisinde en k\u00fc\u00e7\u00fck de\u011ferin indexiyle renk de\u011ferini al\u0131yoruz ve k\u00fcmelenecek test de\u011ferinin renk de\u011ferini de\u011fi\u015ftiriyoruz\n    test[\"C\"][testIndex] = egitim[\"C\"][skorTablosu.index(min(skorTablosu))]\n    skorTablosu=[]\negitim = pd.concat((egitim,test), axis=0)","5023fa04":"go.Figure(data =[go.Scatter3d(x = egitim['X'], y = egitim['Y'], z = egitim['Z'], mode =\"markers\",marker = dict( \n                                     size = 12, \n                                     color = egitim['C'], \n                                     opacity = 0.8\n                                   ))])","c04b4589":"Bu kernelde size 2 nokta aras\u0131nda ki mesafeyi hesaplaman\u0131n 4 farkl\u0131 yolunu g\u00f6sterece\u011fim. Bu 4 yolu da 2 farkl\u0131 \u00f6rnekte g\u00f6zlemledikten sonra ihtiyac\u0131m\u0131za g\u00f6re hangisini kullanaca\u011f\u0131m\u0131z\u0131 se\u00e7ece\u011fiz. Bu d\u00f6rt yol s\u0131rayla \u015fu \u015fekilde.\n* distance.euclidean(uzaydaBirNokta, uzaydaBaskaBirNokta)\n* np.linalg.norm(uzaydaBirNokta - uzaydaBaskaBirNokta)\n* np.sqrt(np.dot(uzaydaBirNokta - uzaydaBaskaBirNokta, uzaydaBirNokta - uzaydaBaskaBirNokta))\n* np.sqrt((uzaydaBirNoktaA - uzaydaBaskaBirNoktaA)^2 + (uzaydaBirNoktaB - uzaydaBaskaBirNoktaB)\\^2)\n\n> Bu d\u00f6rt yolda da \"euclidean distance\" yani \u00f6klid uzakl\u0131\u011f\u0131 y\u00f6ntemini kullan\u0131yoruz.\n\n> Son \u00f6rne\u011fimizde ise di\u011fer kodlar\u0131n derinine iniyoruz ve nas\u0131l \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 detayl\u0131ca g\u00f6zlemliyoruz.\n\n> Her kod h\u00fccresinde \"%%time\" ifadesiyle o kod h\u00fccresinin \u00e7al\u0131\u015fma s\u00fcresini hesaplayaca\u011f\u0131z ve en h\u0131zl\u0131 olan yolu bulaca\u011f\u0131z.","a1cf0868":"# \u0130ki boyutlu uzayda g\u00f6rselle\u015ftirme yard\u0131m\u0131yla mesafe fonksiyonuyla k\u00fcmeleme","684dc0fa":"\u00d6ncelikle skorlar\u0131 hesaplayal\u0131m ve bir s\u00f6zl\u00fc\u011fe ayn\u0131 konumda olacak \u015fekilde ve renkleri ifade edecek \u015fekilde ekleyelim","a9f1133d":"E\u011fitim ve test koordinatlar\u0131n\u0131 \u00fc\u00e7 boyutlu uzayda g\u00f6zlemleyelim","b56c7824":"Test kordinatlar\u0131n\u0131n k\u00fcmelenmi\u015f halini g\u00f6zlemleyelim","2900f538":"Kaynaklar\n* [Understanding and Using Common Similarity Measures for Text Analysis](https:\/\/programminghistorian.org\/en\/lessons\/common-similarity-measures)\n* [Similarity Functions in Python](https:\/\/medium.com\/@ashukumar27\/similarity-functions-in-python-aa6dfe721035)\n* [Five most popular similarity measures implementation in python](https:\/\/dataaspirant.com\/five-most-popular-similarity-measures-implementation-in-python\/)\n* [Similarity and Distance Metrics for Data Science and Machine Learning](https:\/\/medium.com\/dataseries\/similarity-and-distance-metrics-for-data-science-and-machine-learning-e5121b3956f8)","17558962":"\u015eimdi de test noktas\u0131n\u0131 en yak\u0131n oldu\u011fu k\u00fcmeyle ayn\u0131 renk k\u00fcmesine eklenecek \u015fekilde hesaplayal\u0131m.","8c36afcd":"# Array'ler ile noktasal benzerlik bulma yollar\u0131\n\u00d6ncelikle uzayda 3 farkl\u0131 nokta olu\u015ftural\u0131m","42749780":"\u015eimdi de pointA ile pointB aras\u0131nda ki mesafeyi bulal\u0131m.","07c298e4":"# \u00dc\u00e7 boyutlu uzayda g\u00f6rselle\u015ftirme yard\u0131m\u0131yla yak\u0131nl\u0131k fonksiyonuyla k\u00fcmeleme","36f27b53":"Eper pointA ile pointB nin mesafesini do\u011fru hesaplad\u0131ysak pointA ile pointC aras\u0131nda ki mesafeyle ayn\u0131 olmas\u0131 gerekiyor, kontrol\u00fc ger\u00e7ekle\u015ftirelim.","3a74c568":"# Noktasal benzerlikle k\u00fcmeleme\nBu kernel i\u00e7erisinde \u00f6ncelikle \u00fc\u00e7 boyutlu listelerin benzerliklerini hesaplamay\u0131 g\u00f6r\u00fcyoruz, bu hesab\u0131 yaparken euclidean distance yani \u00f6klid uzakl\u0131\u011f\u0131 form\u00fcl\u00fcn\u00fc kullan\u0131yoruz. Daha sonras\u0131nda g\u00f6rsellerle anlatmak i\u00e7in kordinat d\u00fczlemi \u00fczerinde 3 farkl\u0131 rengi temsil eden 3 farkl\u0131 k\u00fcme olu\u015fturuyoruz ve rastgele bir nokta belirtiyoruz, bu nokta hangi k\u00fcmeye yak\u0131nsa o k\u00fcmenin rengini al\u0131yor yani s\u0131n\u0131fland\u0131rma yap\u0131yoruz. Son olarak ise koordinat d\u00fczleminde yapt\u0131\u011f\u0131m\u0131z i\u015fi \u00fc\u00e7 boyutlu uzayda ger\u00e7ekle\u015ftiriyoruz.","b726a2f8":"Egitim ve test kordinatlar\u0131n\u0131 olu\u015ftural\u0131m","8362cff0":"\u0130lk \u00f6rne\u011fimizde pointA ile kendisini birbirine olan uzakl\u0131klar\u0131n\u0131 hesap edece\u011fiz, e\u011fer t\u00fcm y\u00f6ntemlerimizde do\u011fru \u00e7al\u0131\u015f\u0131rsa 0 sonucunu alaca\u011fz\u0131 ve t\u00fcm y\u00f6ntemlerin \u00e7\u0131kt\u0131lar\u0131n\u0131 birbiriyle k\u0131yaslayarak ayn\u0131 i\u015fi yap\u0131p yapmad\u0131klar\u0131ndan emin olaca\u011f\u0131z, bunu ikinci \u00f6rne\u011fimizde, pointA ve pointB aras\u0131nda ki uzakl\u0131\u011f\u0131 hesaplarken de ger\u00e7ekle\u015ftirece\u011fiz."}}