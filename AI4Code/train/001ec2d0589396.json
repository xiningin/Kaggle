{"cell_type":{"8a5e9f94":"code","0c2b61a7":"code","079e3f93":"code","f2b7ef31":"code","d196308d":"code","fab0d5e2":"code","ab4a88f5":"code","c567f41d":"code","1cc35025":"code","be4265b0":"code","012494ed":"code","01cccfe7":"code","10f639f3":"code","b10ab020":"code","ea4d2db2":"code","41559c3a":"code","859c6625":"code","01c95271":"code","454497e5":"code","88a96029":"code","c8b2cdc0":"code","7d62a95f":"markdown","fb64233f":"markdown","c5f79356":"markdown","6f1d5175":"markdown","20134ba7":"markdown","0b6ff2e9":"markdown","a9e54ec8":"markdown","156b5872":"markdown","e2b8c403":"markdown","a2c9d2bc":"markdown","470f795e":"markdown","adf29c40":"markdown","abe464ac":"markdown","d3dfc589":"markdown","e86ad58f":"markdown","ab413529":"markdown"},"source":{"8a5e9f94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c2b61a7":"import json\ndf=pd.read_json('\/kaggle\/input\/chipotle-locations\/us-states.json')\ndf.head()","079e3f93":"df['type'].value_counts()","f2b7ef31":"df['features'].head()","d196308d":"df['features'][0]","fab0d5e2":"df['features'][0].keys()","ab4a88f5":"len(df['features'][0]['geometry']['coordinates'][0])","c567f41d":"frame=pd.DataFrame()\nfor i in range(len(df['features'])):\n    ID=df['features'][i]['id']\n    state=df['features'][i]['properties']['name']\n    shape=len(df['features'][i]['geometry']['coordinates'])\n    geo=df['features'][i]['geometry']['type']\n    shape=len(df['features'][i]['geometry']['coordinates'])\n    if shape>1:\n        num=0\n        for j in range(shape):\n            num+=len(df['features'][i]['geometry']['coordinates'][j][0])\n    else:\n        num=len(df['features'][i]['geometry']['coordinates'][0])\n    frame=frame.append({'id':ID,'state':state,'geometry':geo,'shape':shape,'coordinate pairs':num},ignore_index=True)  ","1cc35025":"frame","be4265b0":"ger=pd.read_json('\/kaggle\/input\/german-recipes-dataset\/recipes.json')\nger.head()","012494ed":"ger['Ingredients'][0]","01cccfe7":"ger['num']=[len(ger['Ingredients'][i]) for i in range(len(ger))]\nger.head()","10f639f3":"sk=ger[ger['Name'].str.contains(\"Sauerkraut\")]\nsk.head()","b10ab020":"len(sk)","ea4d2db2":"Min=sk[sk['num']==sk['num'].min()]\nMin.head()","41559c3a":"len(Min)","859c6625":"#compute number of letters as length of instructions\nlen(Min.reset_index()['Instructions'][0])","01c95271":"pd.options.mode.chained_assignment = None\nMin['length']=[len(Min['Instructions'][index]) for index in Min.reset_index()['index']]\nMin","454497e5":"fix=ger.drop_duplicates(subset=['Instructions'])\nlen(fix)","88a96029":"sk2=fix[fix['Name'].str.contains(\"Sauerkraut\")]\nsk2","c8b2cdc0":"sk2['letters']=[len(sk2['Instructions'][index]) for index in sk2.reset_index()['index']]\nsk2['words']=[len(sk2['Instructions'][index].split()) for index in sk2.reset_index()['index']]\nsk2","7d62a95f":"Actually it looks like these are all repeats. Going to have to revert back and get rid of all the duplicates. This will significantly reduce the number of entries in the dataframe.","fb64233f":"This column is useless--> let's look at the features column that contains the embedded data.","c5f79356":"# Example 1: Chipotle Locations","6f1d5175":"Let's say the information we want is the id (state abbreviation), state name, geometry type, and the number of coordinate pairs provided in that given state.","20134ba7":"Looks like the top one is the better recipe given our priorities.","0b6ff2e9":"# Example 2: German Recipes","a9e54ec8":"Let's look at the first list item and see how the data is stored.","156b5872":"This is a list of dictionaries (dictionaries are like lists, but contain specified keys\/headers). This is the data we actually want.","e2b8c403":"Idea: Let's find a Sauerkraut recipe with the least amount of ingredients.","a2c9d2bc":"66 sauerkraut recipes in this dataset","470f795e":"Now which one of these has the least amount of instructions?","adf29c40":"This came out much cleaner than the previous file- the JSON file is set up in such a way that the keys directly lead to the information (there are not multiple levels of organization in which we have to dig for the data we want).","abe464ac":"Only minor thing is that the ingredients are stored as a list. Let's add to this dataset by adding a new column for the number of ingredients required.","d3dfc589":"Only two unique sauerkraut recipes here. Let's try to analytically determine which has more instructions.","e86ad58f":"Minumum number of ingredients is 12, 29 sauerkraut recipes have 12 ingredients. ","ab413529":"Reads json into a dataframe, but based on how the json is structured, only two columns are created and much information is embedded deep in the dataframe."}}