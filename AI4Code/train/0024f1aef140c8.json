{"cell_type":{"c8192130":"code","e0652636":"code","9fe1c2d8":"code","ce79ba4d":"code","a3b0f8f3":"code","77eae41c":"code","a2ff77f9":"code","e41230d1":"code","fa5c5a12":"code","20e7e49c":"code","fd5b3fdb":"code","c465106c":"code","34617201":"code","3c60c305":"code","e04522ec":"code","1a5c33b6":"code","28880668":"code","de5ac09f":"code","984934ac":"code","78516391":"code","7f7a0cc9":"code","11abaa0f":"code","87cbfa9c":"code","36c862f3":"code","19d86401":"code","9797d47d":"code","ea7905af":"code","4dd24f48":"code","9cb16e63":"code","5fc8c845":"code","544e4b45":"code","7197b66d":"code","4bcede49":"code","3f63011c":"code","d66c2fa2":"markdown","b5e966f9":"markdown","6e984200":"markdown","dcc4fe5a":"markdown","9a74dd46":"markdown","0016f805":"markdown","bef2d0f7":"markdown","2082b872":"markdown","44671ec6":"markdown","c56d6fa7":"markdown","8426670c":"markdown","46c7f0a4":"markdown","1a702f87":"markdown","ffc28692":"markdown","34126c15":"markdown","fd4dc2c1":"markdown","32239130":"markdown","e75f113f":"markdown","f28b9a40":"markdown","9115ebbe":"markdown","3b7b39a1":"markdown","f9441ce0":"markdown"},"source":{"c8192130":"import pandas as pd\nimport numpy as np\nimport math\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nimport folium\nfrom folium.plugins import HeatMap\nfrom sklearn.cluster import KMeans\nfrom wordcloud import WordCloud\n%matplotlib inline","e0652636":"ARREST_PATH = \"..\/input\/NYPD_Arrest_Data_Year_to_Date.csv\"\nEDUCATIONAL_PATH = \"..\/input\/DYCD_after-school_programs.csv\"","9fe1c2d8":"def felony_description_clean(desc):\n    \"\"\"Returns a clean string of input description.\"\"\"\n    \n    # if input is np.nan\n    if type(desc) is not str:\n        return ''\n\n    output = desc.lower()\n    output = re.sub(r'[0-9]+|etc[.]*|unknown time|unknown|-misd.', '',output)\n    output = re.sub(r'[,]+', ',',output)\n    output = re.sub(r',[ ]*possession|,[ ]*possess.|,[ ]*possessi', ' possession',output)\n    output = re.sub(r',[ ]*sale', ' sale',output)\n    output = re.split(',|&', output)\n\n    # replace 1st and 2nd if seperated by comma\n    if len(output)>1:\n        output.insert(0, output.pop(1))\n\n    output = [word for word in output if not re.findall(r'unc',word)]\n    output = ['robbery'] if 'robbery' in output else output\n    output = ' '.join(output).strip().capitalize()\n    output = output.replace('Ny','NY')\n    output = re.sub(r'[ ]+', ' ',output)\n    if output=='Obstr breath\/circul':\n        output = 'Obstruction of Breathing or Blood Circulation'\n    if output == 'Endangering welfare child':\n        output = 'Child welfare endangering'\n        \n    return output","ce79ba4d":"def code_to_borough(code):\n    \"\"\"Maps a borough code to its corresponding borough name.\"\"\"\n    \n    code_dict = {'B': 'Bronx', 'S': 'Staten Island', 'K': 'Brooklyn', 'M': 'Manhattan' , 'Q': 'Queens'}\n    return code_dict[code]","a3b0f8f3":"# read CSV\narrest_df = pd.read_csv(ARREST_PATH, index_col=False)","77eae41c":"# rename columns\narrest_df.rename(columns={\"ARREST_BORO\": \"Borough\", \"PD_DESC\": \"Felony_description\",  \"AGE_GROUP\": \"Age_group\"}, inplace = True)\n\n# clean the data\narrest_df['Borough'] = arrest_df['Borough'].apply(code_to_borough)\narrest_df['Felony_description'] = arrest_df['Felony_description'].apply(felony_description_clean)\n\n# leave only relevant columns\narrest_df= arrest_df[['Borough','Felony_description','Age_group', 'Latitude', 'Longitude']]\n\n# drop cuplicates\narrest_df.drop_duplicates(inplace=True)","a2ff77f9":"arrest_df.head()","e41230d1":"def wordcloud(df, column):\n    \"\"\"Creates and shows a wordcloud created of frequencies of values in input column.\"\"\"\n    \n    # create frequncies of felony descriptions\n    felonies_freq = Counter(df[column])\n\n    # plot wordcloud\n    wordcloud = WordCloud(width = 1200, height = 800, min_font_size = 14, colormap='Dark2', prefer_horizontal=0.85)\n    wordcloud.generate_from_frequencies(frequencies=felonies_freq)\n    plt.figure(figsize = (20, 18), facecolor = None) \n    plt.imshow(wordcloud)","fa5c5a12":"wordcloud(arrest_df, 'Felony_description')","20e7e49c":"def _address_clean(address):\n    \"\"\"Returns a clean address string.\"\"\"\n    \n    # join adress to one string (if composed of a list whic was split beacues of '\\n')\n    address = ' '.join(address)\n    \n    # put whitespace between address and zip code\n    address = f'{address[:-5]} {address[-5:]}'\n    \n    return address","fd5b3fdb":"def _coordianted_complete(coords, original_lat, original_lon):\n    \"\"\"Returns fixed Latitude and Longitude values.\"\"\"\n    \n    # create latitude and longitude floats from coords string\n    latitude_from_location, longitude_from_location = coords[1:-1].split(', ')\n    latitude_from_location = float(latitude_from_location)\n    longitude_from_location = float(longitude_from_location)\n    \n    # if latitude or longitude do not exist, populate them with coordinates extracted from 'Address_and_Coords' columns\n    if np.isnan(original_lat) or np.isnan(original_lon):\n        return latitude_from_location, longitude_from_location\n        \n    else:\n        return original_lat, original_lon","c465106c":"def address_and_coords_fix(df):\n    \"\"\"Returns lists of fixed addresses, latitudes and longitudes.\"\"\"\n\n    addresses, latitudes, longitudes = [], [], []\n\n    for tup in df.itertuples():\n\n        # split 'Address_and_Coords' values to address (might be composed of several rows) and to coordinated tuple (string)\n        *address, coords = tup.Address_and_Coords.split('\\n')\n        \n        # clean address and add to list\n        addresses.append(_address_clean(address))\n        \n        # complete coordiantes and add to lists\n        latitude, longitude = _coordianted_complete(coords, tup.Latitude, tup.Longitude)\n        latitudes.append(latitude)\n        longitudes.append(longitude)\n        \n    return addresses, latitudes, longitudes","34617201":"# read CSV\nedu_df = pd.read_csv(EDUCATIONAL_PATH)","3c60c305":"# rename columns\ncolumns_rename_map = {\n    \"BOROUGH \/ COMMUNITY\": \"Borough\", \"PROGRAM TYPE\": \"Program_type\",\n    \"PROGRAM\": \"Program\", \"SITE NAME\": \"Site_name\", \"Location 1\": 'Address_and_Coords'\n}\nedu_df.rename(columns=columns_rename_map, inplace = True)\n\n# drop duplicates and NaNs\nedu_df.dropna(subset=['Address_and_Coords'], inplace=True)\n\n# filter only New-York city boroughs\nedu_df = edu_df[edu_df['Borough'].isin(['Bronx', 'Manhattan', 'Brooklyn', 'Queens', 'Staten Island'])]\n\n# remove unnecessary columns\nedu_df = edu_df[['Program_type', 'Program', 'Site_name', 'Borough', 'Address_and_Coords', 'Latitude', 'Longitude']]\n\n# fix address and coordinates\naddresses, latitudes, longitudes = address_and_coords_fix(edu_df)\n\nedu_df['Address'] = addresses\nedu_df['Latitude'] = latitudes\nedu_df['Longitude'] = longitudes\n\n# drop duplicates (data contain a lost of duplicates, with different names)\nedu_df.drop_duplicates(subset = ['Latitude','Longitude'], inplace=True)\n\n# drop 'Address_and_Coords' column, and change columns order\nedu_df= edu_df[['Program_type', 'Program', 'Site_name', 'Borough', 'Address', 'Latitude', 'Longitude']]","e04522ec":"edu_df.head()","1a5c33b6":"# create a list of children (<18 Age_group) crime location-tuples\narrest_18_df = arrest_df[(arrest_df['Age_group']=='<18')]\narrest_18_locations = list(zip(arrest_18_df['Latitude'],arrest_18_df['Longitude']))\n\n# create a list of after-scholl activity location-tuples\nedu_positions = list(zip(edu_df['Latitude'],edu_df['Longitude']))  # create a list of locations (tuples)\n\n# create folium map centerd on the average location of crimes\nfol = folium.Map(np.mean(arrest_18_locations, axis=0), zoom_start=10, tiles = 'Stamen Terrain')  \n\n# create Heatmap of crime locations\nHeatMap(arrest_18_locations, radius = 13).add_to(fol)\n\n# add circles to denote after-school activity locations\n[folium.Circle(pos, radius=750, color='black', fill=True, fill_opacity = 0.01, weight=0.4).add_to(fol) for pos in edu_positions]\n\nfol","28880668":"def _corrected_distance(point_1, point_2, lat_corr=111.32, lon_corr=84.288):\n    \"\"\"\n    Returns the corrected distance between 2 location (location-tuples).\n\n    Folium uses Geographic Decimal degrees coordinate system.\n    As we go farther from the equator, geographic coordinate system requires a different correction.\n    The approximated corrections of measured distance in Latitude and Longitude\n    in New-York city are 111.32 and 84.288 respectively.\n    \"\"\"\n\n    lat_dist = (point_1[0] - point_2[0]) * lat_corr\n    lon_dist = (point_1[1] - point_2[1]) * lon_corr\n    return math.sqrt(lat_dist ** 2 + lon_dist ** 2)","de5ac09f":"def _in_edu_range(edu_locations, crime_locations, efficiency_range):\n    \"\"\"Returns a list of crime locations which are within efficiency range of at least one after-school activity location.\"\"\"\n    in_range_crimes = []\n\n    for crime_location in crime_locations:\n        in_range = False\n\n        # check if crime_location is within efficiency_range of any edu-location\n        for edu_location in edu_locations:\n            if _corrected_distance(crime_location, edu_location) < efficiency_range:\n                in_range = True\n                break\n\n        # if found, append to in_range_crimes list\n        if in_range:\n            in_range_crimes.append(crime_location)\n\n    return in_range_crimes","984934ac":"def _borough_locations(ed_df, arr_df, borough):\n    \"\"\"Returns lists of all after-school activities' locations and crime locations within borough.\"\"\"\n\n    temp_edu = ed_df[ed_df['Borough'] == borough]\n    edu_locs = list(zip(temp_edu['Latitude'], temp_edu['Longitude']))\n\n    temp_arr = arr_df[arr_df['Borough'] == borough]\n    arrest_locs = list(zip(temp_arr['Latitude'], temp_arr['Longitude']))\n\n    return edu_locs, arrest_locs","78516391":"def _heuristic_kmeans(crime_locations, efficiency_range, num_clusters, max_opt_groups):\n    \"\"\"\n    Returns a list of after-school activity locations recommendations.\n\n    Performs multiple K-Means clustering ,in a heuristic manner, as described above.\n    Number of locations is determined by num_clusters.\n    \"\"\"\n    \n    new_edu_options = []\n\n    for num in range(num_clusters, max_opt_groups):\n\n        # create and fit k-means model with num clusters\n        model = KMeans(n_clusters=num)\n        model.fit(crime_locations)\n\n        # a list of number of arrests which where out-of-range and now are in-range\n        new_in_range = [len(_in_edu_range([loc], crime_locations, efficiency_range)) for loc in model.cluster_centers_]\n\n        # append education locations, along with number of corresponding in-range crime locations\n        new_edu_options.append((model.cluster_centers_, new_in_range, sum(new_in_range)))\n\n    # extract maximum benefit group of generated locations\n    max_benefit = max(new_edu_options, key=lambda x: x[2])\n\n    # extract num_clusters-max-crimes new education locations\n    new_edu = max_benefit[0][np.argsort(max_benefit[1])[-num_clusters:]]\n    new_edu_scores = np.array(max_benefit[1])[np.argsort(max_benefit[1])[-num_clusters:]]\n\n    # return the locations which yielded maximal in-range crime locations\n    return new_edu, new_edu_scores","7f7a0cc9":"def _pop_string(dic):\n    \"\"\"Creates the string for folium popups.\"\"\"\n    \n    lat = str(dic['loc'][0])[:6]\n    lon = str(dic['loc'][1])[1:7]\n    return f'Location:\\nN{lat}\/W{lon}\\nScore: {dic[\"score\"]}'","11abaa0f":"def _summary(comp_loc, edu_loc, borough, in_rng, out_rng, max_rng, rec_edu_loc, num_rec):\n    \"\"\"Pretty printing.\"\"\"\n\n    new_in_range = len(_in_edu_range(rec_edu_loc, out_rng, max_rng))\n    output = f'{len(comp_loc)} <18 children crimes are recorded year to date in {borough}.\\n'\n    output += f'{len(edu_loc)} after-school programs are taking place in {borough}.\\n'\n    output += f'{len(in_rng)} of the crimes are committed within {max_rng} km of some program location.\\n'\n    output += f'{len(out_rng)} of the crimes are farther than {max_rng} km of any program location.\\n'\n    output += f'The new {num_rec} recommended location will bring {new_in_range} crimes into {max_rng} km range.'\n    return output","87cbfa9c":"def _create_map(arrest_locations, in_range_crimes, out_range_crimes, rec_edu_locations, rec_edu_scores, max_range):\n    \"\"\"\n    Return a folium map with marked out-of-range crimes, in-range crimes and circles denoting reccomendations\n    of new after-school activities' locations.\n    \"\"\"\n    \n    # create folium map centerd on the average location of crimes\n    map_center_location = np.array(arrest_locations).mean(axis=0)\n    ny_map = folium.Map(location=map_center_location, zoom_start=11,control_scale=True, tiles = 'Stamen Terrain')\n    \n    # add red markers to denote out-of-range crimes\n    [folium.CircleMarker(pos, radius=1, color='red', fill=True, weight=1).add_to(ny_map) for pos in out_range_crimes]\n    \n    # add green markers to denote in-range crimes\n    [folium.CircleMarker(pos, radius=0.8, color='green', fill=True, weight=0.8).add_to(ny_map) for pos in in_range_crimes]\n    \n    # create popup proporties for edu-locations\n    pop_dict = {i: {'loc': loc, 'score': score} for i, (loc, score) in enumerate(zip(rec_edu_locations, rec_edu_scores))}\n    \n    # add circles to denote the recommendations, and their efficiency range\n    [folium.Circle(\n        pos, radius=max_range*1000, color='black', fill=True, weight=0.7,\n        popup=_pop_string(pop_dict[i])).add_to(ny_map)\n     for i, pos in enumerate(rec_edu_locations)]\n    \n    return ny_map","36c862f3":"def edu_recommend(borough, max_range, num_rec, ed_df, arr_df, max_opt_groups=None):\n    \n    # create locations' lists of after-school activities and arrests\n    edu_locations, arrest_locations = _borough_locations(edu_df, arr_df, borough)\n    \n    # a list of all arrest locations in range of some after-school activity\n    in_range_crimes = _in_edu_range(edu_locations, arrest_locations, max_range)\n    \n    # a list of all arrest locations out of range of any after-school activity.\n    out_range_crimes = [cr for cr in arrest_locations if cr not in in_range_crimes]\n    \n    max_opt_groups = max_opt_groups if max_opt_groups else num_rec + 10\n    \n    # find best locations to cover out of range arrests\n    rec_edu_locations, rec_edu_scores = _heuristic_kmeans(out_range_crimes, max_range, num_rec, max_opt_groups)\n    \n    # create folium map\n    ny_map = _create_map(arrest_locations, in_range_crimes, out_range_crimes, rec_edu_locations, rec_edu_scores, max_range)\n    \n    #Summary string generation\n    summ = _summary(arrest_locations, edu_locations, borough,\n                   in_range_crimes, out_range_crimes, max_range, rec_edu_locations, num_rec)\n    \n    return ny_map, rec_edu_locations, rec_edu_scores, summ","19d86401":"def location_print(rec_loc, rec_loc_scores):\n    \"\"\"Pretty printing.\"\"\"\n\n    print('Ranked list of recommended locations (ranked by amount of new covered crimes):')\n    for rec, score in reversed(list(zip(rec_loc, rec_loc_scores))):\n        lat = str(rec[0])[:6]\n        lon = str(rec[1])[1:7]\n        print(f'Location N {lat} \/ W {lon} will bring {score} crimes into an after-school activity efficency range.')","9797d47d":"borough = 'Brooklyn'  # choose from 'Bronx', 'Manhattan', 'Brooklyn', 'Queens', or 'Staten Island'.\nny_map, rec_edu_locations, rec_edu_scores, summ = edu_recommend(borough, 0.7, 7, edu_df, arrest_18_df)","ea7905af":"ny_map","4dd24f48":"print(summ)","9cb16e63":"location_print(rec_edu_locations, rec_edu_scores)","5fc8c845":"arrest_18_df[(arrest_18_df['Longitude'] == -73.88143295699997) & (arrest_18_df['Latitude'] == 40.67110691100004)]","544e4b45":"borough = 'Manhattan' # choose from 'Bronx', 'Manhattan', 'Brooklyn', 'Queens', or 'Staten Island'.\nny_map, rec_edu_locations, rec_edu_scores, summ = edu_recommend(borough, 0.5, 14, edu_df, arrest_18_df)","7197b66d":"ny_map","4bcede49":"print(summ)","3f63011c":"location_print(rec_edu_locations, rec_edu_scores)","d66c2fa2":"Most of the rows (except for 20) contain coordiantes values in column 'Location 1'.<br>\nIt turns out that in rows which also contain 'Latitude' and 'Longitude' values,<br>\nthey are more accurate than the coordinates values in 'Location 1' column, like someone has fixed them.<br>\nIn rows where there are no 'Latitude' and 'Longitude' values, the coordiantes values in 'Location 1' are pretty accurate.","b5e966f9":"One thing worth to mention:<br>\nFor some reason, a lot of arrests are recorded at the exact same location. These aressts appear as 1 marker on the maps, thus hurt the visualization.<br>\nThat is the reason why the added crimes to the effective range, are more than it looks on the maps.<br>\nFor example, at location (40.671107, -73.881433) 2 arrests occured:","6e984200":"### Datasets:\nAfter school activities NYC - https:\/\/data.cityofnewyork.us\/Education\/DYCD-after-school-programs\/mbd7-jfnc\n<br>Arrest dataset of 2019 - https:\/\/data.cityofnewyork.us\/Public-Safety\/NYPD-Arrest-Data-Year-to-Date-\/uip8-fykc","dcc4fe5a":"### Recommendation tool - where to open new after-school activities:","9a74dd46":"The tool works each time only on one borough for 2 main reasons:\n- Folium map has hard time showing more than 2500 markers on one map.<br>\nThe solution of using cluster markers does not serve well the visualization of our problem.\n\n- Enabling more granularity.<br>\nE.g. one can decide how much to invest and how many new after-school activites to open, indepently for each borough.","0016f805":"### Imports and paths:","bef2d0f7":"# New-York City juvenile crime rate VS. after-school activities","2082b872":"**Example 2** - Manhattan, effective range = 0.5 km, 14 recommendations:","44671ec6":"#### The tool - edu_recommend() function operates as following, using the other utiliy fucntions:\n\n1. Creates a list of crime locations, and after-school activity locations, within a given borough.\n2. Creates a list of all crime locations within efficiency range of some (at least one) after-school activity.\n3. Creates a list of all crime locations which are out of efficiency range of any (not even one) after-school activity.\n4. Using heuristic_kmeans(), as follows:<br>\n    a. For each integer in the range [num. recommendations, num. recommendations+10] we compute KMeans clusters.<br>\n    b. For each of the clusters' options, we compute the amount of out-of-range arrests which became in-range, and choose the maximal option.<br>\n    c. From that maximal option, we again choose the num. recommendations clusters which cover the most out-of-range arrests.\n5. plotting the map.\n","c56d6fa7":"To extract juvenile crimes, we will only consider crimes of <18 age group.<br>\nThe crimes are represented by a Heatmap.<br>\nThe after-school activities are represented by circles with radius of 750 meters, in order to investigate whether the distance from such an activity influences juvenile crime rate.","8426670c":"As we observed above, some of the high crime rates areas does not have enough access to after-school activities.<br>\nWe believe it is important to at least supply access, and to enable the children the chance to attend after-school activities in these shortage areas.<br><br>\nThe following section will demonstate a tool which could recommend NYC decision makers where to open an after-school activity in poor-covarge areas.\n\n","46c7f0a4":"**Example 1** - Brooklyn, effective range = 0.7 km, 7 recommendations:","1a702f87":"### NYPD arrests dataset cleaning:","ffc28692":"This notebook extends [Assaf Cohen's](https:\/\/www.kaggle.com\/assafco) work [\"NYC Crime vs Education - GEOvisualisation tutorial\"](https:\/\/www.kaggle.com\/assafco\/nyc-crime-vs-education-geovisualisation-tutorial) by:\n1. Further exploring the data.\n2. Proposing a tool which recommends locations to open new after-school activities.\n\nThe notebook demonstrates the use of Folium maps and WordCloud visualization tools, as well as a sophisticated use of k-means algorithm.","34126c15":"We can observe that some of the high juvenile crime rates areas (such as in Manhattan) does not have enough access to after-school activities.<br>\nWe can observe that other districts do have more dense after-school activities coverage areas but still have a sginificant crime rate (such as the Bronx).\n\n#### From the examined data, one can not argue for a strong correlation between after-school activities' locations and juvenile crime rate! <br>\n\nMaybe more data could help get to this conclusion.<br>\nFor example, if we had historical data of after-school activities, we might be able to make temporal connections between activities existance and the change in juvenile crime rate over time.","fd4dc2c1":"### NYPD arrests data exploration by WordCloud:","32239130":"The 3 main arguments of edu_recommend() function are:<br>\n1. borough - Which borough to get recommendation about.\n2. max_range - What is the maximum effctive range of an activity (according to the decision makers additional data such as: popolution density, demogrphic breakdown, crime rate, and other factors).\n3. num_rec - Number of location to recommend (based on budgets, etc.).","e75f113f":"Green markers denote crimes commited within the given maximal range from some program location.<br>\nRed markers denote crimes commited farther than the maximal range of any program location.<br>\nBlack circles denote maximal range radius of the recomendations for setting up new after-school activities.\n\nPressing on the black circles will popup the location, and the number of crimes it will cover.","f28b9a40":"### After-school activities dataset cleaning:","9115ebbe":"We can cobserve the variety and frequencies of felonies commited in NYC year to date. <br>","3b7b39a1":"### Juvenile crime rate VS.  after-school activities visualization:","f9441ce0":"Green markers denote crimes commited within the given maximal range from some program location.<br>\nRed markers denote crimes commited farther than the maximal range of any program location.<br>\nBlack circles denote maximal range radius of the recomendations for setting up new after-school activities.\n\nPressing on the black circles will popup the location, and the number of crimes it will cover."}}