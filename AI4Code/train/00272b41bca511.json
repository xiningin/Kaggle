{"cell_type":{"2803cf74":"code","cb8311e0":"code","3e671acc":"code","a3df9898":"markdown","fdb97bdf":"markdown","caead480":"markdown","acfe1e76":"markdown","a8032f20":"markdown","0c0201e3":"markdown"},"source":{"2803cf74":"#################################################\n# imports \nimport numpy as np\nimport pandas as pd \nimport os,random\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform as sp_randFloat\nfrom scipy.stats import randint as sp_randInt\n\nfrom sklearn import svm\n\n#################################################\n# variables\nTRAIN_PATH = \"..\/input\/titanic\/train.csv\"\nTEST_PATH = \"..\/input\/titanic\/test.csv\"\nSAMPLE_SUBMISSION_PATH = \"..\/input\/titanic\/gender_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nID = \"PassengerId\"\nTARGET = \"Survived\"\n\nSEED = 2022\ndef seed_everything(seed=SEED):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    \nseed_everything()\n\nRS_CV = 3\nRS_N_ITER = 50\nRS_N_JOBS = -1\nRS_SCORING = 'roc_auc'\n#################################################\n# load \ntrain = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)\n#################################################\n#preprocess \n#delete unnessary column\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n#2.find null data and fill new data \ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n#3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)\n#################################################","cb8311e0":"#################################################\n#split input data and target data \nX = train.drop([TARGET],axis=1)\ny = train[TARGET]\n#################################################\n# search best parameter and model\nmodel = svm.SVC()\n\nfrom sklearn.utils.fixes import loguniform\nparameters = {\n    'C': loguniform(1e0, 1e5),\n#  'gamma': loguniform(1e-4, 1e-3),\n#  'kernel': ['rbf'],\n 'class_weight':['balanced', None]\n}\nrs = RandomizedSearchCV(estimator=model, \n                           param_distributions = parameters,\n                           scoring=RS_SCORING,\n                           cv = RS_CV, \n                           n_iter = RS_N_ITER, \n                           n_jobs=RS_N_JOBS,\n                           verbose=10)\nrs.fit(X, y)\n\n# best model \nprint(rs.best_params_)\nbestModel = rs.best_estimator_\n#################################################","3e671acc":"#################################################\n#predict\nX_test = test\npred_test = bestModel.predict(X_test)\n#################################################\n#submit\nsub = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsub[TARGET] = pred_test\nsub.to_csv(SUBMISSION_PATH, index=False)\nsub.head()\n#################################################","a3df9898":"# After Building Model","fdb97bdf":"### predict & submit","caead480":"### split data & search best model","acfe1e76":"# Build Model","a8032f20":"# Before Building Model","0c0201e3":"### imports & variables & load & preprocess"}}