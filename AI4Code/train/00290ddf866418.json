{"cell_type":{"4e6f32f6":"code","0aeca210":"code","cadfdb16":"code","fe39c117":"code","bbc5f229":"code","46cc92d1":"code","9d6ea72b":"code","d0f88604":"code","8df28832":"code","8c01934e":"code","18b4e8d6":"code","c012109d":"code","83ff0598":"code","d35f13e5":"code","cfba39db":"code","fbc1c206":"code","ace03b55":"code","671b78af":"code","61d3ad05":"code","6d6683ea":"code","2f41ebe2":"code","9dae7ae9":"code","d3345791":"markdown","91194a54":"markdown","91d97bb2":"markdown"},"source":{"4e6f32f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0aeca210":"import warnings\nimport random\n\nSEED=44\nrandom.seed(SEED)\nnp.random.seed(SEED)\npd.set_option('display.width', None)\npd.set_option('display.max_column', None)\n\nwarnings.filterwarnings('ignore')","cadfdb16":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/test.csv')","fe39c117":"train.info()","bbc5f229":"y = train.iloc[:,-1]\nX = train.iloc[:,:-1]\nZ = test","46cc92d1":"def get_obj_cols(df):\n    return [col for col in df.columns if df.dtypes[col] == np.object]","9d6ea72b":"X_objs = get_obj_cols(X)\nX_objs_idx = [X.columns.get_loc(col) for col in X_objs]\nZ_objs = get_obj_cols(Z)\nZ_objs_idx = [Z.columns.get_loc(col) for col in Z_objs]","d0f88604":"for obj in X_objs:\n    X[obj] = X[obj].astype('category').cat.codes\nfor obj in Z_objs:\n    Z[obj] = Z[obj].astype('category').cat.codes","8df28832":"X.drop('id', axis=1, inplace=True)\nZ.drop('id', axis=1, inplace=True)","8c01934e":"from sklearn.model_selection import StratifiedKFold, cross_val_score\nfrom sklearn.metrics import roc_auc_score\nK = 10","18b4e8d6":"skf = StratifiedKFold(n_splits=K, shuffle=True, random_state=SEED)","c012109d":"df_model = pd.DataFrame(columns = [*[f'model_{i}' for i in range(K)], 'average_auc'])\ndf_model","83ff0598":"import lightgbm as lgbm","d35f13e5":"params = {\n    'learning_rate':1e-2,\n    'max_bin':24,\n    'n_estimators':1000,\n    'device_type':'gpu',\n    'metric':'auc',\n    'extra_trees':True,\n    'seed':SEED,\n    'boosting_type':'goss',\n    'num_leaves':128,\n    'is_unbalance':True,\n    'categorical_feature':X_objs_idx\n}","cfba39db":"ctr = 0\nmodel = []\nauc_score = []\nfor train_idx, val_idx in skf.split(X, y):\n    Xt, Xv = X.loc[train_idx], X.loc[val_idx]\n    yt, yv = y.loc[train_idx], y.loc[val_idx]\n    \n    model.append(\n        lgbm.LGBMClassifier(**params)\n    )\n    \n    model[ctr].fit(Xt, yt)\n    yv_prob = model[ctr].predict_proba(Xv)[:,1]\n    auc_score.append(roc_auc_score(yv, yv_prob))\n    ctr+=1","fbc1c206":"df_model.loc[df_model.shape[0]] = [\n    *model,\n    np.mean(auc_score)\n]","ace03b55":"df_model['average_auc']","671b78af":"def predict(X):\n    y_prob = []\n    for i in range(K):\n        y_prob.append(df_model.loc[0, f'model_{i}'].predict_proba(X)[:,1])\n    return np.mean(np.array(y_prob), axis=0)\n\ndef metrics(y_true, y_prob):\n    print('AUC Score : ', roc_auc_score(y_true, y_prob))","61d3ad05":"from sklearn.model_selection import train_test_split","6d6683ea":"Xt, Xv, yt, yv = train_test_split(X, y, test_size=0.2, random_state=SEED)","2f41ebe2":"yv_prob = predict(Xv)\nmetrics(yv, yv_prob)","9dae7ae9":"test_prob = predict(Z)\nsubmission = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/sample_submission.csv\")\n\nsubmission.target = test_prob\nsubmission.to_csv(\"sample_subs.csv\", index=False)","d3345791":"# Training","91194a54":"# Categorical","91d97bb2":"# Read Data"}}