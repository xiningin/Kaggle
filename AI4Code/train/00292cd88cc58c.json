{"cell_type":{"786a189b":"code","22112d78":"code","9d021672":"code","f9c91da8":"code","9936fe81":"code","c1d5a07c":"code","45c2f82f":"code","4689be8c":"code","87051144":"code","2cc2da8e":"code","9a840484":"code","5b7b308f":"code","f60e3144":"code","db873189":"code","6adcefd8":"code","534d375e":"code","44d18953":"code","fb8db798":"code","b7bd8813":"code","8a62fe8c":"markdown","59dd000c":"markdown","adf34e49":"markdown","c0efc0f4":"markdown","a927b135":"markdown","a0484c5f":"markdown","fbde7275":"markdown","abe387dd":"markdown","d33c43a5":"markdown","ebc42930":"markdown","972abf28":"markdown"},"source":{"786a189b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.linear_model import LinearRegression\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","22112d78":"train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nid_test = test['Id']","9d021672":"train.head()","f9c91da8":"train.shape","9936fe81":"train.describe()","c1d5a07c":"#columns sorted by number of missing values (out of 1460 total rows)\ntrain.isnull().sum()[train.isnull().sum() > 0].sort_values(ascending=False)","45c2f82f":"#train\ntrain.drop({'Id','PoolQC','MiscFeature', 'Alley','Fence','FireplaceQu'}, axis=1, inplace=True)\n#test\ntest.drop({'Id','PoolQC','MiscFeature', 'Alley','Fence','FireplaceQu'}, axis=1, inplace=True)","4689be8c":"ord_cols = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond','HeatingQC', 'KitchenQual', \n         'GarageQual', 'GarageCond']\nevals = ['Ex', 'Gd', 'TA','Fa', 'Po']\nnum = [9, 7, 5, 3, 1]\nnum_eval = dict(zip(evals, num))\n\ntrain[ord_cols] = train[ord_cols].replace(num_eval)\ntest[ord_cols] = test[ord_cols].replace(num_eval)","87051144":"train['CentralAir'] = train['CentralAir'].apply(lambda x: 1 if x == 'Y' else 0)\ntrain['PavedDrive'] = train['PavedDrive'].apply(lambda x: 1 if x == 'Y' else 0)\n\ntest['CentralAir'] = test['CentralAir'].apply(lambda x: 1 if x == 'Y' else 0)\ntest['PavedDrive'] = test['PavedDrive'].apply(lambda x: 1 if x == 'Y' else 0)","2cc2da8e":"#train\ncat_cols = train.columns[train.dtypes == 'object']\nnum_cols = train.columns[train.dtypes != 'object']\ntrain[cat_cols] = train[cat_cols].fillna('None')\ntrain[num_cols] = train[num_cols].fillna(train[num_cols].mean())","9a840484":"#test\ncat_cols_test = test.columns[test.dtypes == 'object']\nnum_cols_test = test.columns[test.dtypes != 'object']\ntest[cat_cols_test] = test[cat_cols_test].fillna('None')\ntest[num_cols_test] = test[num_cols_test].fillna(test[num_cols_test].mean())","5b7b308f":"train.isnull().sum().sum()","f60e3144":"df_train = pd.get_dummies(train)\ndf_train.head()","db873189":"df_test = pd.get_dummies(test)\ndf_test.head()","6adcefd8":"df_train.drop({'Condition2_RRAe','Condition2_RRAn','Condition2_RRNn', 'Electrical_Mix','Electrical_None',\n 'Exterior1st_ImStucc','Exterior1st_Stone','Exterior2nd_Other','Heating_Floor', 'Heating_OthW',\n 'HouseStyle_2.5Fin','RoofMatl_ClyTile', 'RoofMatl_Membran','RoofMatl_Metal','RoofMatl_Roll',\n 'Utilities_NoSeWa',\n}, axis = 1, inplace=True)\ndf_test.drop({'MSZoning_None', 'Exterior2nd_None','Functional_None','Utilities_None',\n'SaleType_None','Exterior1st_None'}, axis = 1, inplace=True)","534d375e":"target = df_train.pop('SalePrice')","44d18953":"lr_model = LinearRegression()\nlr_model.fit(df_train, target)","fb8db798":"result = pd.DataFrame({'Id': id_test, 'SalePrice':lr_model.predict(df_test)})\nresult.head()","b7bd8813":"submission = result.to_csv('submission.csv', index = False)","8a62fe8c":"As the input is needed in numerical form, categorical features should be encoded into numerical values. I will use the Pandas method .get_dummies() to create dummy numerical variables for each categorical feature.","59dd000c":"Some of the features in the dataset are ordinal features, in this case representing an evaluation metric that has a natural ordering (e.g. from low to high). The evaluations, expressed as strings, are to replaced with a numerical scale. ","adf34e49":"# **4. Linear Regression**","c0efc0f4":"For the categorical data in the dataset, the missing values can be interpreted as a sign of a certain feature missing in the house. For instance, in the columns GarageType and BsmtQual, missing values would indicate that that specific house does not have a garage or a basement, respectively. Null values can thus be replaced with the value 'None'. \n\nFor numerical features, missing values can be computed by calculating the mean of the values in the column. ","a927b135":"The target value for the model (i.e. the Sales Price) is to be separated from the rest of the training dataframe and saved in a separate variable. The training dataset and the target variable are then used to train the model before testing it on the test dataframe. ","a0484c5f":"There are also features the values of which are expressed on a binary scale (e.g. Yes\/No). These should be rather replaced with the pair 0\/1. ","fbde7275":"# **2. Data clean-up and missing values**","abe387dd":"# **3. Encoding**","d33c43a5":"# **1. Importing Data**","ebc42930":"In some columns the amount of null values is very high, and it might make sense to remove those columns altogether. \nAt the same time, the ID column will also be removed since it carries no significance in the analysis, as it only represents a unique identifier for each house. ","972abf28":"It is worth checking the dataset for missing values and then decide how to proceed with each column that has missing values. "}}