{"cell_type":{"57a7c6c4":"code","e8628a75":"code","8b748a0b":"code","ac94703b":"code","e95fb1a0":"code","b6be7869":"code","35100cee":"code","b1172c53":"code","567085f4":"code","5264d951":"code","5ae20870":"markdown"},"source":{"57a7c6c4":"!pip install accelerate","e8628a75":"import os\nimport gc\nimport sys\nimport math\nimport time\nimport tqdm\nimport random\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import StratifiedKFold\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\n\nfrom accelerate import Accelerator\nfrom transformers import (AutoModel,AutoTokenizer,AutoConfig,\n                          AdamW,get_cosine_schedule_with_warmup)\n\nfrom colorama import Fore, Back, Style\nr_ = Fore.RED\nb_ = Fore.BLUE\nc_ = Fore.CYAN\ng_ = Fore.GREEN\ny_ = Fore.YELLOW\nm_ = Fore.MAGENTA\nsr_ = Style.RESET_ALL","8b748a0b":"train_data = pd.read_csv('..\/input\/commonlitreadabilityprize\/train.csv')\ntest_data = pd.read_csv('..\/input\/commonlitreadabilityprize\/test.csv')\nsample = pd.read_csv('..\/input\/commonlitreadabilityprize\/sample_submission.csv')\n\nnum_bins = int(np.floor(1 + np.log2(len(train_data))))\ntrain_data.loc[:,'bins'] = pd.cut(train_data['target'],bins=num_bins,labels=False)\n\ndef rmse_score(y_true,y_pred):\n    return np.sqrt(mean_squared_error(y_true,y_pred))","ac94703b":"config = {\n    'lr': 2e-5,\n    'wd':0.01,\n    'num_workers':4,\n    'batch_size':16,\n    'valid_step':10,\n    'max_len':256,\n    'epochs':3,\n    'nfolds':5,\n    'seed':42,\n    'model_path':'..\/input\/clrp-roberta-base\/clrp_roberta_base',\n}\n\nfor i in range(config['nfolds']):\n    os.makedirs(f'model{i}',exist_ok=True)\n\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONASSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True\n\nseed_everything(seed=config['seed'])\n\ntrain_data['Fold'] = -1\nkfold = StratifiedKFold(n_splits=config['nfolds'],shuffle=True,random_state=config['seed'])\nfor k , (train_idx,valid_idx) in enumerate(kfold.split(X=train_data,y=train_data['bins'])):\n    train_data.loc[valid_idx,'Fold'] = k","e95fb1a0":"class CLRPDataset(Dataset):\n    def __init__(self,df,tokenizer,max_len=128):\n        self.excerpt = df['excerpt'].to_numpy()\n        self.targets = df['target'].to_numpy()\n        self.max_len = max_len\n        self.tokenizer = tokenizer\n    \n    def __getitem__(self,idx):\n        encode = self.tokenizer(self.excerpt[idx],\n                                return_tensors='pt',\n                                max_length=self.max_len,\n                                padding='max_length',\n                                truncation=True)\n        \n        target = torch.tensor(self.targets[idx],dtype=torch.float) \n        return encode, target\n    \n    def __len__(self):\n        return len(self.excerpt)","b6be7869":"class AttentionHead(nn.Module):\n    def __init__(self, in_features, hidden_dim):\n        super().__init__()\n        self.W = nn.Linear(in_features, hidden_dim)\n        self.V = nn.Linear(hidden_dim, 1)\n\n    def forward(self, features):\n        att = torch.tanh(self.W(features))\n        score = self.V(att)\n        attention_weights = torch.softmax(score, dim=1)\n        context_vector = torch.sum(attention_weights * features, dim=1)\n        return context_vector","35100cee":"class Model(nn.Module):\n    def __init__(self,path):\n        super(Model,self).__init__()\n        self.config = AutoConfig.from_pretrained(path)        \n        self.roberta = AutoModel.from_pretrained(path,config=self.config)  \n        self.head = AttentionHead(self.config.hidden_size,self.config.hidden_size)\n        self.linear = nn.Linear(self.config.hidden_size,1)\n\n    def forward(self,**xb):\n        x = self.roberta(**xb)[0]\n        x = self.head(x)\n        x = self.linear(x)\n        return x","b1172c53":"def run(fold):\n    \n    def loss_fn(outputs,targets):\n        return torch.sqrt(nn.MSELoss()(outputs.view(-1),targets.view(-1)))\n    \n    def evaluate(model,valid_loader):\n        model.eval()\n        valid_loss = 0\n        all_targets, all_outputs = [], []\n        with torch.no_grad():\n            for i, (inputs,targets) in enumerate(valid_loader):\n                inputs = {key:val.reshape(val.shape[0],-1) for key,val in inputs.items()}\n                outputs = model(**inputs)\n                valid_loss += loss_fn(outputs,targets).item()\n                all_outputs.extend(outputs.cpu().detach().numpy().tolist())\n                all_targets.extend(targets.cpu().detach().numpy().tolist())\n\n        valid_loss \/= len(valid_loader)\n        valid_rmse = rmse_score(all_outputs,all_targets)\n        return valid_loss,valid_rmse\n        \n    def train_and_evaluate_loop(train_loader,valid_loader,model,loss_fn,optimizer,\n                                epoch,fold,best_score,valid_step,lr_scheduler=None):\n        train_loss = 0\n        for i, (inputs,targets) in enumerate(train_loader):\n            optimizer.zero_grad()\n            model.train()\n            inputs = {key:val.reshape(val.shape[0],-1) for key,val in inputs.items()}\n            outputs = model(**inputs)\n            loss = loss_fn(outputs,targets)\n            loss.backward()\n            optimizer.step()\n            \n            train_loss += loss.item()\n            \n            if lr_scheduler:\n                lr_scheduler.step()\n                        \n            if (i% valid_step ==0) or ((i+1) == len(train_loader)):\n                valid_loss,valid_rmse = evaluate(model,valid_loader) \n                        \n                if valid_rmse <= best_score:\n                    print(f\"Epoch:{epoch}|Batch: {i}|Step:{valid_step}|Train Loss:{train_loss\/(i+1)}|Valid Loss:{valid_loss}|Rmse Score: {valid_rmse}\")\n                    print(f\"{g_}Rmse Score Decreased from {best_score} to {valid_rmse}{sr_}\")\n\n                    best_score = valid_rmse\n                    torch.save(model.state_dict(),f'.\/model{fold}\/model{fold}.bin')\n                    tokenizer.save_pretrained(f'.\/model{fold}')\n                    \n        return best_score\n        \n    accelerator = Accelerator()\n    print(f\"{accelerator.device} is used\")\n    \n    x_train,x_valid = train_data.query(f\"Fold != {fold}\"),train_data.query(f\"Fold == {fold}\")\n    \n    model = Model(config['model_path'])\n    tokenizer = AutoTokenizer.from_pretrained(config['model_path'])\n    \n    train_ds = CLRPDataset(x_train,tokenizer,config['max_len'])\n    train_dl = DataLoader(train_ds,\n                        batch_size = config[\"batch_size\"],\n                        num_workers = config['num_workers'],\n                        shuffle=True,\n                        pin_memory=True,\n                        drop_last=True)\n\n    valid_ds = CLRPDataset(x_valid,tokenizer,config['max_len'])\n    valid_dl = DataLoader(valid_ds,\n                        batch_size = config[\"batch_size\"],\n                        num_workers = config['num_workers'],\n                        shuffle=False,\n                        pin_memory=True,\n                        drop_last=False)\n        \n    optimizer = AdamW(model.parameters(),lr=config['lr'],weight_decay=config['wd'])    \n    lr_scheduler = get_cosine_schedule_with_warmup(optimizer,num_warmup_steps=0,num_training_steps= config['epochs'] * len(train_dl))\n\n    model,train_dl,valid_dl,optimizer,lr_scheduler = accelerator.prepare(model,train_dl,valid_dl,optimizer,lr_scheduler)\n\n    print(f\"Fold: {fold}\")\n    best_score = 9999\n    start_time = time.time()\n    for epoch in range(config[\"epochs\"]):\n        print(f\"Epoch Started:{epoch}\")\n        best_score = train_and_evaluate_loop(train_dl,valid_dl,model,loss_fn,optimizer,epoch,fold,\n                                             best_score,config['valid_step'],lr_scheduler)\n        \n        end_time = time.time()\n        print(f\"{m_}Time taken by epoch {epoch} is {end_time-start_time:.2f}s{sr_}\")\n        start_time = end_time\n        \n    return best_score","567085f4":"best_score_per_fold = [run(f) for f in range(config['nfolds'])]","5264d951":"print(\"Best Score Per Fold: \",best_score_per_fold)\nprint(\"Mean Score: \",np.mean(best_score_per_fold))","5ae20870":"This notebook's training loop has some minor issues with loss function and it has been forked 200+ times.<br\/>\nhttps:\/\/www.kaggle.com\/maunish\/clrp-pytorch-roberta-finetune\n\nThis notebooks solves those issues. Most of the changes are in run() function.<br\/>\nThe important one is using rmse_score for scoring best model.<br\/>\nHappy coding and best of luck with the Competition."}}