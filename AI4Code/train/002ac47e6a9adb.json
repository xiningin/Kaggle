{"cell_type":{"8f99573a":"code","0531f435":"code","6630ace9":"code","8ce40feb":"code","7d3c187c":"code","47773ca9":"code","26531044":"code","e038611b":"code","89e45da2":"code","724053b3":"code","c6170b11":"code","5fece45e":"code","6b17bdb6":"code","abc77e78":"code","bc6f269f":"code","daee2848":"code","6b75f8b1":"code","c125ced2":"code","cfe443a4":"code","b2f13518":"code","b2ca1c7d":"code","335caa3f":"code","11436f4c":"code","96bb4862":"code","fbe3d2e3":"code","910aa7fa":"code","131f290f":"code","fc03ade5":"code","f2de0d3a":"markdown","642cddee":"markdown","6e793b1b":"markdown","e6ecdd95":"markdown","86be4c9f":"markdown","a5591c44":"markdown","6ad6c742":"markdown","c04b4789":"markdown","927fd2a8":"markdown","9179b2a6":"markdown"},"source":{"8f99573a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0531f435":"# Importing major libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","6630ace9":"data=pd.read_table('..\/input\/spam-classification1\/spam.tsv', sep='\\t')\ndata.head()","8ce40feb":"data.shape","7d3c187c":"data.isnull().sum()","47773ca9":"data['label'].value_counts()","26531044":"ham=data[data['label']=='ham']\nham.head()","e038611b":"spam=data[data['label']=='spam']\nspam.head()","89e45da2":"# As mentioned earlier, the shape of these 2 datasets is not same, hence let us randomly filter some samples of ham data\nham.shape, spam.shape","724053b3":"ham=ham.sample(spam.shape[0])","c6170b11":"ham.shape, spam.shape","5fece45e":"# Let's combine the datasets\ndata_new=ham.append(spam)\ndata_new.shape","6b17bdb6":"data_new.info()","abc77e78":"data_new.tail()","bc6f269f":"plt.hist(data_new[data_new['label'].astype(str)=='ham']['length'], bins=100, alpha=0.8)\nplt.show()","daee2848":"# Let's see both together\nplt.hist(data_new[data_new['label'].astype(str)=='ham']['length'], bins=100, alpha=0.8, label='ham')\nplt.hist(data_new[data_new['label'].astype(str)=='spam']['length'], bins=100, alpha=0.8, label='spam')\nplt.legend(loc='best')\nplt.show()","6b75f8b1":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.feature_extraction.text import TfidfVectorizer","c125ced2":"pd.concat([data_new.tail(),data_new.head()])","cfe443a4":"data_new.shape","b2f13518":"# Let's do the train test split\nX_train, X_test, y_train, y_test = train_test_split(data_new['message'], data_new['label'], test_size=0.3, random_state=1, shuffle=True, stratify=data_new['label'])","b2ca1c7d":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","335caa3f":"clf=Pipeline([('vectorizer', TfidfVectorizer()), \n                ('clf', RandomForestClassifier(n_estimators=100) )])\n","11436f4c":"clf.fit(X_train, y_train)","96bb4862":"y_pred=model.predict(X_test)\n","fbe3d2e3":"print(classification_report(y_test, y_pred))","910aa7fa":"print(confusion_matrix(y_test, y_pred))","131f290f":"model.predict([\"Hey watsapp???\"])","fc03ade5":"model.predict([\"Congratulations, You have won free ticket to USA this summer, TEXT WON 4555$\"])","f2de0d3a":"As can be seen, max messages have length less than 100 characters","642cddee":"### we can see there is class imbalance here hence it is better to consider same ham and spam samples. Thus we will randomly take 747 samples of ham and consider for training the model","6e793b1b":"As seen above, it has predicted correctly. Thanks","e6ecdd95":"Now, both these datasets have same shape and hence there is no class imbalanace problem","86be4c9f":"### Handling classimbalance","a5591c44":"## Data preparation","6ad6c742":"## Let's check predictions on new dataset","c04b4789":"## Let's create pipeline now of vectorizer and classifier","927fd2a8":"## Here, we will use a csv file containing hundreds of emails already classified as spam and ham(legitimate) message. We will build and train our model and will then use it to predict any real message (outside the csv as well)","9179b2a6":"## Exploratory data analysis"}}