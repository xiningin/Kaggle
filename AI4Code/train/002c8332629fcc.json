{"cell_type":{"0af198cf":"code","8ed9f10d":"code","2e921e2d":"code","6ec0dff7":"code","b4897009":"code","955c77a1":"code","88b2a9b2":"code","b5a08302":"code","5773a7c8":"code","3bbc37f8":"code","a27ad4e3":"code","7558d236":"code","0a8aaf64":"code","33706192":"code","441a06a3":"code","9a7eba92":"code","9ae2d44d":"code","0ffd053a":"code","5b45d98a":"code","ba981a4d":"code","b87ff582":"code","2ce1248c":"code","da4a1f67":"code","23f15db5":"code","a1c2b059":"code","e7a55b7f":"code","34f6b09f":"code","1316fb68":"code","10063ec0":"code","87a9dce0":"code","09e95a05":"code","29a81045":"code","191d6512":"code","0f58e91f":"code","61289482":"code","2314e985":"code","441f6d08":"code","2c06aad5":"code","0046c837":"code","1418b7a6":"code","18727278":"code","f5c84563":"code","7895c669":"code","7396e990":"code","6a3e8300":"code","f01b113a":"code","48839d89":"code","a30c330d":"code","c31c8f4f":"code","4e514373":"code","410463a0":"code","4909e549":"code","f2e99710":"code","60bab55e":"code","f2289b3c":"code","06d89c32":"code","f4172798":"code","fb1432b1":"code","4fd654f5":"code","8ddcf57b":"code","342b3034":"code","1bc9b8b8":"code","8d945667":"code","fc79a510":"code","15140677":"code","4698814c":"code","d97ae9de":"code","5d76e160":"code","ed5db9c5":"code","a5acfa9f":"code","767f40af":"code","241a442a":"code","bd29cd19":"code","30f15d42":"markdown","7fc2b00f":"markdown","bf773667":"markdown","fdc2f431":"markdown","988e331a":"markdown","c2dcae18":"markdown","32392734":"markdown","be217f32":"markdown","628c8d6a":"markdown","8e73d41b":"markdown","dd490ef5":"markdown","6a150a21":"markdown","cd1bd4f2":"markdown","01dbdd16":"markdown","ee388fb2":"markdown","d1026d98":"markdown","d242f53d":"markdown","934c242f":"markdown","0399e320":"markdown","50c9e302":"markdown","1bed000a":"markdown","de7f3eab":"markdown","8376e20b":"markdown","5c76b902":"markdown","516fff00":"markdown","06fdfaf9":"markdown","3a8692c8":"markdown","a3ba1c12":"markdown","976e9a49":"markdown","e946f229":"markdown","27ad0852":"markdown","a232e15a":"markdown","69549941":"markdown","bde08138":"markdown","44cd5216":"markdown","bae5362d":"markdown","15ebe011":"markdown","4ecf5a19":"markdown","f74e6bd7":"markdown","59b99c85":"markdown","2ca91b8d":"markdown","dc2dea3b":"markdown","f67e02c3":"markdown","abb35c1f":"markdown","3ee159be":"markdown","a968b3c7":"markdown","e3204b48":"markdown","5093bf97":"markdown","dd842194":"markdown","4467e664":"markdown"},"source":{"0af198cf":"# File : investigate-a-dataset-SOCCER_CK_Rev2_210808.ipynb\n\nimport numpy as np\nimport pandas as pd\n\nimport sqlite3\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","8ed9f10d":"conn = sqlite3.connect('..\/input\/soccer\/database.sqlite')\n#conn = sqlite3.connect('..\/data\/database.sqlite')\ntables = pd.read_sql_query(\"SELECT name FROM sqlite_master WHERE type='table'\", conn)\ntables","2e921e2d":"df_player_attr = pd.read_sql('SELECT * FROM Player_Attributes', conn)\ndf_player      = pd.read_sql('SELECT * FROM Player', conn)\ndf_match       = pd.read_sql('SELECT * FROM Match', conn)\ndf_league      = pd.read_sql('SELECT * FROM League', conn)\ndf_country     = pd.read_sql('SELECT * FROM Country', conn)\ndf_team        = pd.read_sql('SELECT * FROM Team', conn)\ndf_team_attr   = pd.read_sql('SELECT * FROM Team_Attributes', conn)","6ec0dff7":"data = [df_player_attr, df_player, df_match, df_league, df_country, df_team, df_team_attr]\n\ndef get_df_name(df):\n    name =[x for x in globals() if globals()[x] is df][0]\n    return name\n# https:\/\/stackoverflow.com\/a\/50620134\/11602203\n\nfor i in data:\n    print(f'{get_df_name(i)} \\t: {i.shape}')","b4897009":"df_player_attr.head(3)","955c77a1":"df_player_attr.columns","88b2a9b2":"df_player.head(3)","b5a08302":"# Merge : Player information + Attributes\ndf = pd.merge(df_player, df_player_attr, on='player_api_id')","5773a7c8":"print(df.shape)\ndf.head()","3bbc37f8":"# change to datetime type\ndf[['birthday', 'date']] = df[['birthday', 'date']].apply(pd.to_datetime)\n\n# birthday -> only Year (Same solution measurements leave only more recent data - followed by duplicates)\ndf.insert(2, 'birth_year', df['birthday'].dt.year)\ndf.insert(3, 'date_year', df['date'].dt.year)\ndf.insert(4, 'Age', df['date_year'] - df['birth_year'])","a27ad4e3":"# Drop useless columns\ncol_drop = ['id_x', 'id_y', 'player_fifa_api_id_x', 'player_fifa_api_id_y', 'birthday', 'date'] # 'player_api_id',\ndf.drop(col_drop, inplace=True, axis=1)\ndf.columns","7558d236":"print(df.duplicated(['player_name']).sum())\nprint(df['player_name'].nunique())","0a8aaf64":"# drop None, duplactes\n\ndf.dropna(inplace=True)\ndf.drop_duplicates(inplace=True)","33706192":"print(df.shape)\ndf.head()","441a06a3":"# Save player data as Best value\ndf.sort_values(['overall_rating', 'potential', 'date_year'], ascending=False, inplace=True)\ndf.drop_duplicates('player_name', inplace=True)\ndf.shape","9a7eba92":"df_match['date'] = df_match['date'].apply(pd.to_datetime)\ndf_match.insert(6, 'year', df_match['date'].dt.year)\ndf_match.insert(7, 'month', df_match['date'].dt.month)","9ae2d44d":"df_match.columns[51:]","0ffd053a":"df_match = df_match.loc[:,:'away_player_11'].dropna()\ndf_match.drop(['season', 'stage', 'match_api_id', 'date'], axis=1, inplace=True)","5b45d98a":"df_match.columns","ba981a4d":"df_match.loc[:,'home_player_X1':] = df_match.loc[:,'home_player_X1':].astype('int')","b87ff582":"print(df_match.shape)\ndf_match.head()","2ce1248c":"# Get player's additional data from df_match\n\nplayer_data = []\n\nfor i in range(1,23):    \n    if i<12: # home_player\n        player = 'home_player_' + str(i)\n        player_X = 'home_player_X' + str(i)\n        player_Y = 'home_player_Y' + str(i)\n        team_id = 'home_team_api_id'\n    else:   # away_player\n        player = 'away_player_' + str(i-11)\n        player_X = 'away_player_X' + str(i-11)\n        player_Y = 'away_player_Y' + str(i-11)\n        team_id = 'away_team_api_id'\n    \n    data = df_match[[player, player_X, player_Y, team_id, 'year', 'month', 'league_id']]\n    data.columns = ['player', 'X', 'Y', 'team_id', 'year', 'month', 'league_id']\n    player_data.append(data)\n\n    # \ub3d9\uc801 \ubcc0\uc218\uc120\uc5b8 (data_1, data_2, ...)\uc740 \uc544\ub798 \ucc38\uace0\n    # globals()[f'data_{i}'] = df_match[[player_home, home_X, home_Y, team_id]]    ","da4a1f67":"# Create dataframe to check player information\n\ndf_player_data = pd.concat(player_data, axis=0, ignore_index=True)\ndf_player_data.drop_duplicates(inplace=True)\ndf_player_data.sort_values('player', inplace=True)\ndf_player_data.reset_index(drop=True, inplace=True)","23f15db5":"print(df_player_data['player'].nunique())\nprint(df_player_data.shape)\ndf_player_data.head(10)","a1c2b059":"print(f\"Number of Players in df_player_data(from df_match) : {df_player_data['player'].nunique()}\")\nprint(f\"Number of Players in df : {df['player_api_id'].nunique()}\") ","e7a55b7f":"df_match_player_check = df_match.loc[:,'home_player_1':'away_player_11'].values\ndf_player_check = df['player_api_id'].values","34f6b09f":"df_match_player_check = np.unique(df_match_player_check)\ndf_player_check = np.unique(df_player_check)","1316fb68":"df_check_inter = np.intersect1d(df_match_player_check , df_player_check)\nlen(df_check_inter)","10063ec0":"df = df[df['player_api_id'].isin(df_check_inter)]\ndf.shape","87a9dce0":"def get_player_data(player_id, match_year):\n    avg = df_player_data.query('player==@player_id').mean()\n    \n    x = round(avg[1])\n    y = round(avg[2])\n    \n    if y == 1:\n        position = 'GK'\n    elif y < 6:\n        position = 'DF'\n    elif y < 9.5:\n        position = 'MF'\n    elif y >= 9.5:\n        position = 'FW'\n    \n    if x>3.5 and x<6.5:\n        side_position = 'center'\n    else:\n        side_position = 'side'\n        \n    name = df.query('player_api_id==@player_id')['player_name'].iloc[0]\n    \n    team_id = df_player_data.query('player==@player_id ').iloc[0,3] # and year==@match_year\n    team = df_team.query('team_api_id == @team_id').iloc[0,3]\n    \n    league_id = df_player_data.query('player==@player_id')['league_id'].iloc[0]\n    league = df_league.query('id == @league_id').iloc[0,2]    \n        \n    return name, position, side_position, team, league","09e95a05":"%%time\nadditional_data = df.apply(lambda x : get_player_data(x['player_api_id'], x['date_year']), axis=1)\n\n# Kaggle - Wall time: 3min 39s\n# PC - Wall time: 1min 52s","29a81045":"df['position']      = [additional_data.iloc[i][1] for i in range(len(additional_data))]\ndf['side_position'] = [additional_data.iloc[i][2] for i in range(len(additional_data))]\ndf['team']          = [additional_data.iloc[i][3] for i in range(len(additional_data))]\ndf['league']        = [additional_data.iloc[i][4] for i in range(len(additional_data))]","191d6512":"df","0f58e91f":"df.columns","61289482":"f, axes = plt.subplots(nrows=1, ncols=3, figsize=(18, 6))#, sharex=True)\n\n#sns.distplot(df['Age'], bins=20, ax=axes[0,0])\nsns.countplot(x = df['preferred_foot'],ax = axes[0])\nsns.countplot(x = df['attacking_work_rate'],ax = axes[1])\nsns.countplot(x = df['defensive_work_rate'],ax = axes[2])\nf.tight_layout()","2314e985":"df['attacking_work_rate'].unique()","441f6d08":"df['defensive_work_rate'].unique()","2c06aad5":"print(f\"Number of Leagues : {df['league'].nunique()}\")\nprint(df['league'].unique())","0046c837":"# - Total number of leagues(11) + EURO Best\ndf_league_data = df_league.copy()\ndf_league_data.drop(['id', 'country_id'], axis=1, inplace=True)\ndf_league_data.loc[11] = ['EURO best']\ndf_league_data","1418b7a6":"# Get All-star team from the input dataframe(league)\n\ndef get_allstar(players_df, df_num, md_num, fw_num, ):\n    sorted_players_df = players_df.sort_values(['overall_rating', 'potential', 'date_year'], ascending=False)\n    \n    goalkeeper = sorted_players_df.query('position==\"GK\"')[:1]\n    defender = sorted_players_df.query('position==\"DF\"')[:df_num]\n    midfielder = sorted_players_df.query('position==\"MF\"')[:md_num]\n    forward = sorted_players_df.query('position==\"FW\"')[:fw_num]\n    \n    allstar_df = pd.concat([goalkeeper, defender, midfielder, forward], axis=0, ignore_index=True)\n    \n    return allstar_df      \n    #return goalkeeper, defender, midfielder, forward","18727278":"league_allstar_dict = {}\n\nfor i in df_league['name']:\n    data = df.query('league==@i')\n    league_allstar_dict[i] = get_allstar(data, 4, 4, 2)\n\nleague_allstar_dict['EURO_best'] = get_allstar(df, 4, 4, 2)","f5c84563":"player_att_list = ['player_name', 'Age', 'overall_rating', 'position', 'team', 'league']","7895c669":"league_allstar_dict['Spain LIGA BBVA'] [player_att_list]","7396e990":"league_allstar_dict['England Premier League'] [player_att_list]","6a3e8300":"league_allstar_dict['Italy Serie A'] [player_att_list]","f01b113a":"league_allstar_dict['Germany 1. Bundesliga'] [player_att_list]","48839d89":"league_allstar_dict['France Ligue 1'] [player_att_list]","a30c330d":"print(league_allstar_dict['EURO_best'] ['league'].value_counts())\nleague_allstar_dict['EURO_best'] [player_att_list]","c31c8f4f":"# Get the average of the abilities of each league's best member\n\ndf_league_avg = pd.DataFrame()\n\nfor league in df_league['name']:\n    df_league_avg[league] =  league_allstar_dict[league].mean().loc['Age':'sliding_tackle']\ndf_league_avg['EURO_best'] = league_allstar_dict['EURO_best'].mean().loc['Age':'sliding_tackle']\ndf_league_avg = df_league_avg.T.sort_values('overall_rating', ascending=False)","4e514373":"df_league_avg","410463a0":"df_league_avg.columns","4909e549":"#pal = sns.color_palette(\"RdPu\", len(df_league_avg))\n\nvalues = df_league_avg['overall_rating']\n#pal = ['grey' if (x < max(values)) else 'red' for x in values ]\npal = ['aqua', 'red', \n       'deepskyblue', 'deepskyblue', 'deepskyblue', 'deepskyblue', \n       'greenyellow', 'greenyellow', 'greenyellow', 'greenyellow', 'greenyellow', \n       'yellow']\n\nrank = df_league_avg[\"overall_rating\"].argsort().argsort() ","f2e99710":"def draw_df_graph(target, ymin=70, ymax=95):\n    plt.figure(figsize=(12,6))\n    plt.ylim(ymin,ymax)\n    plot = sns.barplot(x='index', y=target, data=df_league_avg.reset_index(),\n                       palette=np.array(pal[::-1])[rank])\n                       # palette=np.array(pal)[rank])\n\n    # How to Annotate Bars in Barplot \n    # https:\/\/datavizpyr.com\/how-to-annotate-bars-in-barplot-with-matplotlib-in-python\/\n    for p in plot.patches:\n        plot.annotate(format(p.get_height(), '.1f'), \n                       (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                       ha = 'center', va = 'center', \n                       xytext = (0, 9), \n                       textcoords = 'offset points')\n\n    plot.set_xticklabels(plot.get_xticklabels(), rotation=90)\n    plot.set_title('Average ' + target + ' of League All-Star team players')","60bab55e":"draw_df_graph('overall_rating')","f2289b3c":"draw_df_graph('potential')","06d89c32":"draw_df_graph('Age', 20, 30)","f4172798":"Top5_leages = ['Spain LIGA BBVA', 'Italy Serie A', 'England Premier League', 'Germany 1. Bundesliga', 'France Ligue 1']","fb1432b1":"league_allstar_df = pd.DataFrame(columns=df.columns)\n\nfor leag in Top5_leages:\n    league_allstar_df = pd.concat([league_allstar_df, league_allstar_dict[leag]], axis=0) ","4fd654f5":"league_allstar_df.columns","8ddcf57b":"attributes = ['attacking_work_rate', 'defensive_work_rate', 'crossing', 'finishing',\n       'heading_accuracy', 'short_passing', 'volleys', 'dribbling', 'curve',\n       'free_kick_accuracy', 'long_passing', 'ball_control', 'acceleration',\n       'sprint_speed', 'agility', 'reactions', 'balance', 'shot_power',\n       'jumping', 'stamina', 'strength', 'long_shots', 'aggression',\n       'interceptions', 'positioning', 'vision', 'penalties', 'marking',\n       'standing_tackle', 'sliding_tackle']","342b3034":"attr_common = ['ball_control', 'dribbling', 'short_passing', 'long_passing', 'curve', 'reactions', 'positioning', 'vision', 'penalties', 'acceleration', 'crossing']\nattr_physical = ['jumping', 'stamina', 'strength', 'sprint_speed']\nattr_gk = ['gk_diving', 'gk_handling', 'gk_kicking', 'gk_positioning', 'gk_reflexes']\n\nattr_att = ['overall_rating', 'finishing','free_kick_accuracy', 'long_shots', 'shot_power', 'balance', 'heading_accuracy', 'volleys', 'agility', 'aggression']\nattr_def = ['overall_rating', 'marking', 'standing_tackle', 'sliding_tackle', 'interceptions']\n\n\n# Categorical features\n# 'attacking_work_rate', 'defensive_work_rate'","1bc9b8b8":"league_allstar_df.query('position==\"GK\"')","8d945667":"compare_df1 = league_allstar_df.groupby(['league']).mean().sort_values('overall_rating', ascending=False)\ncompare_df1","fc79a510":"compare_df1[attr_physical].T.plot.bar(figsize=(13,4))\nplt.legend(ncol=5)\nplt.ylim(50,90)\n\nplt.xticks(rotation =0)\nplt.xlabel('Physical Attributes')\nplt.ylabel('Score')\nplt.title(\"Comparision of All-star Team' Physical Attributes\")","15140677":"compare_df1[attr_common].T.plot.bar(figsize=(24,4))\nplt.legend(ncol=5)\nplt.ylim(50,90)\n\nplt.xticks(rotation =0)\nplt.xlabel('Common Attributes')\nplt.ylabel('Score')\nplt.title(\"Comparision of All-star Team's Common Attributes\")","4698814c":"compare_df = league_allstar_df.groupby(['league', 'position']).mean()\ncompare_df","d97ae9de":"compare_df.query('position==\"FW\"')[attr_att].sort_values('overall_rating',ascending=False).T.plot.bar(figsize=(20,4))\nplt.legend(ncol=5)\nplt.ylim(40,100)\n\nplt.xticks(rotation =0)\nplt.xlabel('Attacking Attributes')\nplt.ylabel('Score')\nplt.title(\"Comparision of All-star Team FW's Attacking Attributes\")","5d76e160":"compare_df.query('position==\"DF\"')  [attr_def].sort_values('overall_rating',ascending=False).T.plot.bar(figsize=(15,4))\nplt.legend(ncol=5)\nplt.ylim(65,95)\n\nplt.xticks(rotation =0)\nplt.xlabel('Defensive Attributes')\nplt.ylabel('Score')\nplt.title(\"Comparision of All-star Team DF's Defensive Attributes\")","ed5db9c5":"compare_df.query('position==\"MF\"')  [attr_att].sort_values('overall_rating',ascending=False).T.plot.bar(figsize=(20,4))\nplt.legend(ncol=5)\nplt.ylim(45,95)\n\nplt.xticks(rotation =0)\nplt.xlabel('Attacking Attributes')\nplt.ylabel('Score')\nplt.title(\"Comparision of All-star Team MF's Attacking Attributes\")","a5acfa9f":"compare_df.query('position==\"MF\"')  [attr_def].sort_values('overall_rating',ascending=False).T.plot.bar(figsize=(15,4))\nplt.legend(ncol=5)\nplt.ylim(0,100)\n\nplt.xticks(rotation =0)\nplt.xlabel('Defensive Attributes')\nplt.ylabel('Score')\nplt.title(\"Comparision of All-star Team MF's Defensive Attributes\")","767f40af":"compare_df.query('position==\"MF\"')  [['overall_rating']+attr_common].sort_values('overall_rating',ascending=False).T.plot.bar(figsize=(24,4))\nplt.legend(ncol=5)\nplt.ylim(60,95)\n\nplt.xticks(rotation =0)\nplt.xlabel('Common Attributes')\nplt.ylabel('Score')\nplt.title(\"Comparision of All-star Team MF's Common Attributes\")","241a442a":"league_allstar_df.groupby(['league']).mean().sort_values('overall_rating',ascending=False)","bd29cd19":"plt.figure(figsize=(12,8))\nsns.countplot(x='position', hue='league',data=df[:100])\nplt.legend(loc='upper right')","30f15d42":"* There are many duplicates. \n* There are a total of 10848 players.","7fc2b00f":"> Considering 'Age' together,   \n> \u25b6 **England Premier League** all-star team is the most young & talented.","bf773667":"### Question 3. Comparison with League via all-star Players","fdc2f431":"---\n---\n---","988e331a":"- Comparasions in each league are based on the All-star team (4-4-2 forrmation).\n- Spain LIGA BBVA All-star Team is the best team in Europe.\n- England Premier League all-star team is the most young & talented.","c2dcae18":"> < Common Attibutes>  \n> Spain LIGA BBVA scores high in general, but especially Technics(dribbling, ball control) and Passing (short_passing, long_passing, crossing) are extremly high.  \n> England Premier League scores low in general.","32392734":"> \u25b6 In terms of potential, **Spain LIGA BBVA** all-star team is still the best league.  \n* But in Group B, the gap between leagues is much smaller. It looks almost identical.  \n  : Max\/min shows only 1.45% in Group B","be217f32":"#### **< Position >**\n- According to https:\/\/www.kaggle.com\/hugomathien\/soccer\/discussion\/80756:    \n\n- Y coordinates :  the player is a defender, midfielder or forward.    \n   - GK if Y == [1]\n   - DF if Y == [2, 3, 4, 5]\n   - MF if Y == [6, 7, 8, 9]\n   - FW if Y == [10, 11]\n- X coordinates : the player plays on the left or on the right side of the court    \n   - Center if X == [4, 5, 6]\n   - Side   if X == [1, 2, 3,  7, 8, 9]\n \n- from https:\/\/www.kaggle.com\/zotufip\/look-at-stats-guess-position\n\n![image.png](attachment:374a3f83-a71a-45e1-a825-c7eef4ac5bbd.png)","628c8d6a":"> < MF > Defense  \n> Spain LIGA BBVA has the best MF based on overall_rating.  \n> However, compared to other leagues, the Defense attribute is not very high.","8e73d41b":"![\ud14d\uc2a4\ud2b8](https:\/\/www.tapclicks.com\/wp-content\/uploads\/How-to-Visualize-your-Data-with-Charts-and-Graphs.jpg) ","dd490ef5":"* When dividing the 100 best players in Europe by position,","6a150a21":"> #### Get Ready : Player dataset ('df')\n> * merge df_player & df_player_attr\n> * Clean the dataset\n> * Save only one player's best data","cd1bd4f2":"> < Physical Attributes >  \n> Spain LIGA BBVA has the highest stamina.  \n> England Premier League has the highest jumping and strength.  \n> Germany 1. Bundesliga has the highest sprint speed but lowest stamina.","01dbdd16":"> < FW >  \n> Spain LIGA BBVA has the best FW.  \n> Spain LIGA BBVA has the highest finishing, free_kick, long_shots, balance, agility.  \n> Italy Serie A has the highest shot_power, volleys.  \n> France Ligue1 has the highest aggression.  ","ee388fb2":"< FW >  \n- Spain LIGA BBVA has the best FW.\n- Spain LIGA BBVA has the highest finishing, free_kick, long_shots, balance, agility.  \n- Italy Serie A has the highest shot_power, volleys.  \n- France Ligue1 has the highest aggression.  ","d1026d98":"* Attributes","d242f53d":"* df_match and df's player do not match. Delete non-duplicate players","934c242f":"> #### Check df_player\n> * base information of players including **Name**","0399e320":"# [Project] Investigate a Dataset : League Comparison via All-Star Team\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","50c9e302":"> \u25b6 **Spain LIGA BBVA** league all-ster team is the best","1bed000a":"> < MF > Common  \n> Spain LIGA BBVA has the best MF based on overall_rating.  \n> Spain LIGA BBVA has the highest ball_control, short_passing, reactions, positioning, vision.  \n> In the midfield, it can be assumed that Spain league team will play with ball control and short passes based on wide vision and excellent positioning.","de7f3eab":"### **European Soccer Database**  \n\n> 25k+ matches, players & teams attributes for European Professional Football  \n\n- +25,000 matches\n- +10,000 players\n- 11 European Countries with their lead championship\n- Seasons 2008 to 2016\n- Players and Teams' attributes* sourced from EA Sports' FIFA video game series, including the weekly updates\n- Team line up with squad formation (X, Y coordinates)\n- Betting odds from up to 10 providers\n- Detailed match events (goal types, possession, corner, cross, fouls, cards etc\u2026) for +10,000 matches\n- *16th Oct 2016: New table containing teams' attributes from FIFA !","8376e20b":"### Question 4. Comparison with League via TOP 100 Players","5c76b902":"* Only the Top 5 Leages are considered","516fff00":"<a id='eda'><\/a>\n## Exploratory Data Analysis\n\n### Question 0. Basic analysis","06fdfaf9":"* attacking_work_rate, defensive_work_rate : values are not uniform (useless)","3a8692c8":"> < MF > Attacking  \n> Spain LIGA BBVA has the best MF based on overall_rating.   \n> However, compared to other leagues, the attack attribute is relatively low.","a3ba1c12":"< MF > \n- Spain LIGA BBVA has the best MF based on overall_rating.  \n- Spain league team has the highest ball_control, short_passing, reactions, positioning, vision.\n- However, Spain league team has no special strengths in attack and defense compared to other teams.\n- In the midfield, it can be assumed that Spain league team will play with ball control and short passes based on wide vision and excellent positioning.","976e9a49":"> #### Check df_player_attr\n> * Player Attributes (abilities)\n> * Position information is missing \u25b6 needs to get\n> * connected with dataframe 'df_player' by column 'player_api_id' \u25b6 needs to merge together\n> * Multiple rows for a players by date \u25b6 needs to choose the best data","e946f229":"## Limitations\n- I have selected the best attributes for each player. So the year he played his best was different. That means, the all-star team is a virtual team that cannot be formed due to the difference in time in reality\n- Attributes are divided into Attacking, Defense, Physical and Common. I followed the Football Manager 2020, but it's really hard to tell which group belongs to.","27ad0852":"< DF >  \n- England Premier League has the best DF.  \n- England Premier League has the highest marking, standing_tackle, interceptions.","a232e15a":"< Common Attributes >\n- Spain LIGA BBVA scores high in general, but especially Technics(dribbling, ball control) and Passing (short_passing, long_passing, crossing) are extremly high.\n- England Premier League scores low in general.","69549941":"> #### Get information from the Match dataset  \u25b6 df_player_data \n> * Additional data(but essential) : Position, Side-position, Team, League","bde08138":"---\n<a id='intro'><\/a>\n## Introduction\n### Questions?\n > #### *1. Who is the Best Players of each league? (All-star team)*\n > #### *2. Which is the best League-All-Star team in Europe?*\n > #### *3. Comparison with League via all-star Players*\n > #### *4. Comparison with League via TOP 100 Players* ","44cd5216":"<a id='wrangling'><\/a>\n## Data Wrangling\n\n> In this section, I will load in the data, check for cleanliness, and then trim and clean the dataset for analysis.","bae5362d":"- EURO Best team average overall-rating = 91.5\n- 'England Premirer League' , 'Italy Serie A' , 'Germany 1.Bundesliga' are similar\n- can be divided into **3 Groups**. There is a gap between each group.\n  - Group A : 'Spain LIGA BBVA', 'England Premirer League' , 'Italy Serie A' , 'Germany 1.Bundesliga', 'France Ligue 1'\n  - Group B : 'Portugal Liga ZON Sagres', 'Netherlands Eredivisie', 'Scotland Premier League', 'Switzerland Super League', 'Belgium Jupiler League'\n  - Group C : 'Portugal Liga ZON Sagres'","15ebe011":"### Data Cleaning","4ecf5a19":"* GK","f74e6bd7":"< Physical Attributest >\n- Spain LIGA BBVA has the highest stamina.  \n- England Premier League has the highest jumping and strength.  \n- Germany 1. Bundesliga has the highest sprint speed but lowest stamina.","59b99c85":"> Attribues are divided based on Football Manager 2020.\n\n![image.png](attachment:d0b5cf78-9d99-406d-8dda-4e173aba8d51.png)\n![image.png](attachment:ed7ddd5c-3baf-4eaf-a534-ed471652e199.png)","2ca91b8d":"---\n> Follwing is taken from review for reference. ","dc2dea3b":"<a id='conclusions'><\/a>\n## Conclusions","f67e02c3":"### Question 1. Who is the Best Players of each league? (All-star team)","abb35c1f":"- Get All-star team of each league\n> Comparasions in each league are based on the All-star team  \n> 4-4-2 forrmation : 4 Defenders, 4 Midfielders, 2 Forwards  \n> 2008 ~ 2016","3ee159be":"### Question 2. Which is the best League-All-Star team in Europe?","a968b3c7":"> GK has only one player on each team.  \n> Gianluigi Buffon in Italy Serie A league is the best GK","e3204b48":"> FW : Italy Serie A  \n> MF : Spain LIGA BBVA    \n> DF : England Premier League    \n> _has the most players in top 100","5093bf97":"* Okay then, What about 'potential' be?","dd842194":"### General Properties","4467e664":"> < DF >  \n> England Premier League has the best DF.  \n> England Premier League has the highest marking, standing_tackle, interceptions.  "}}