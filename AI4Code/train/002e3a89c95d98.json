{"cell_type":{"f4a0ba13":"code","7f5650be":"code","01ccba4b":"code","59ccebe6":"code","4d70fbe6":"code","768e88db":"code","c48cca4f":"code","1fe3143b":"code","94775229":"code","17eb4be6":"code","40e628c3":"code","6133a033":"code","c2cf79a2":"code","53245740":"code","5f2e7fcc":"code","c1e63313":"code","d3f9d32a":"code","3dae9e50":"code","6b4f7893":"code","ac876dd3":"code","9d112c2e":"code","21f2abda":"code","76db332e":"code","f56b4e4f":"code","7fb2f5cc":"code","54cbc92e":"code","11ca5553":"code","668082ac":"code","ac818e34":"code","0dec966b":"code","2db2c471":"code","755ac0ab":"code","ac36b5c1":"code","e9bd5ddc":"code","4d3683d2":"code","fa8def92":"code","6ab774d6":"code","7c0255d2":"code","a522b59f":"code","258e3c79":"code","81c20a53":"code","2d840789":"code","05d6b24a":"code","57a57288":"code","b0cae503":"code","1e163341":"code","e1e5b917":"code","221298dd":"code","74bf59b2":"code","48a0903d":"code","81f611b9":"code","e00654f8":"code","693c9646":"code","54c80a56":"code","dae58c6d":"code","82e3d1b2":"code","6ab3cdce":"code","7eb7488c":"code","46f4cdac":"code","0872957c":"code","5b323e78":"code","70831f59":"code","1eb3c3af":"code","d7e782ff":"code","72eada33":"code","58056780":"code","51c86e68":"code","7549147a":"code","04f025c1":"code","d03d8dfb":"code","1b911768":"code","33ba488a":"code","efb47cb8":"code","c7ed11e8":"code","f13b13d3":"code","657f5560":"code","a798d2d7":"code","4c97c70b":"code","eb1dadfc":"code","449e037c":"code","f0c3a356":"code","e4151fb5":"code","f2488da8":"code","ff3b5f3e":"code","412afed3":"code","284e387e":"code","1046824a":"code","2601fcd5":"code","915cad47":"code","ad2e0d13":"code","e2f6b3cf":"code","294142ce":"code","01ab9a17":"code","893a3f8e":"code","e4975bf8":"code","eda6dd0b":"code","be318417":"code","293a70d9":"code","a789bff1":"code","650b70d9":"code","c2f9fe03":"code","5426ed9b":"code","22a47ca9":"code","1bc7ecc2":"code","59d85a25":"code","b973e1ac":"code","966d919f":"code","32cff6cd":"code","5ebebba7":"code","6cdd0dec":"code","b0c9d9a7":"code","5495b96a":"code","14985da8":"code","3e928c89":"code","910cac01":"code","e52405e3":"code","bebd012f":"code","734b3f84":"code","a1f47bac":"code","14e12f75":"code","0ccfcb1e":"code","a857efd8":"code","1d7562a2":"code","23a52f59":"code","5bcaca86":"code","c3a1dd51":"code","97301d8f":"code","d1979ea3":"code","20029d7a":"code","66830492":"code","f74f3c79":"code","7139e0ed":"code","4ef6e764":"code","e595f6dc":"code","a13ed249":"code","f23adcf2":"code","768059b0":"code","7edc325a":"code","e04f15c6":"code","f0b0885b":"code","37127d89":"code","b8d44d87":"code","39d15dd8":"code","d1683ad8":"code","5eca79aa":"code","5f57f13e":"markdown","a972c771":"markdown","3c1fb4fc":"markdown","32f11b95":"markdown","2431faed":"markdown","c51cb775":"markdown","5b448b23":"markdown","43795078":"markdown","99120c6f":"markdown","7661861b":"markdown","55428165":"markdown","7e1eaaa3":"markdown"},"source":{"f4a0ba13":"!pip install tensorflowjs","7f5650be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01ccba4b":"print('Loading packages')\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint('These are the files to use: ',os.listdir(\"..\/input\"))\nfrom sklearn import preprocessing\nfrom statistics import mean\nfrom sklearn.metrics import accuracy_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport random\nfrom matplotlib import rcParams\n%matplotlib inline\nle = preprocessing.LabelEncoder()\nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflowjs as tfjs\npd.pandas.set_option('display.max_columns',None)\npd.pandas.set_option('display.max_rows',None)","59ccebe6":"print(tfjs.__version__)","4d70fbe6":"df = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.head()","768e88db":"import tensorflow as tf\nprint(tf.__version__)","c48cca4f":"from tensorflow.keras import models, regularizers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization\nimport numpy\nnumpy.random.seed(7)\nmodel = models.Sequential()\nmodel.add(Dense(30,input_dim=8,activation='relu'))  # Adding input layer of 30 Neurons and 15 inputs\n# model.add(Dropout(0.5))                           # Adding droupout layer to overcome overfitting\nmodel.add(Dense(15,activation='relu'))               # Adding 1 hidden layer of 15 Neurons\nmodel.add(Dropout(0.5))                              # Adding droupout layer to overcome overfitting\nmodel.add(Dense(5,activation='relu'))                # Adding 1 hidden layer of 3 Neurons\n# model.add(Dropout(0.5))                              # Adding droupout layer to overcome overfitting\nmodel.add(Dense(1,activation='sigmoid'))             # Output layer of 1 neuron of sigmoid type\n#Compile mode\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n# Fit the model\n# model.fit(train,target,epochs=150, batch_size=20, verbose=1)","1fe3143b":"model.summary()","94775229":"SEED = 42\n\ndata = df.copy()\ny = data['Outcome']\nx = data.drop(['Outcome'],axis=1)\n\n\nfrom sklearn.model_selection import train_test_split\nx_train,x_val,y_train,y_val = train_test_split(x,y,test_size = 0.1,random_state = SEED)","17eb4be6":"x_train.shape","40e628c3":"model.fit(x_train,y_train,epochs=200, batch_size=20, verbose=1)","6133a033":"tfjs.converters.save_keras_model(model, 'models_diabetes')","c2cf79a2":"from sklearn.metrics import accuracy_score\n\nprc = model.predict(x_val)\n# round predictions\nprc = [round(x[0]) for x in prc]\naccuracy_score(y_val,prc)","53245740":"#  model.save('diabetes.h5')","5f2e7fcc":"df1 = pd.read_csv('..\/input\/breastcancer-dataset\/data.csv')\ndf1.head()","c1e63313":"df1.info()","d3f9d32a":"df1[\"diagnosis\"].value_counts()","3dae9e50":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ndiag = [\"diagnosis\"]\nfor i in diag:\n    df1[i]=label_encoder.fit_transform(df1[i])","6b4f7893":"df1[\"diagnosis\"].value_counts()","ac876dd3":"corr_new_train=df1.corr()\nplt.figure(figsize=(10,20))\nsns.heatmap(corr_new_train[['diagnosis']].sort_values(by=['diagnosis'],ascending=False).head(60),vmin=-1, cmap='seismic', annot=True)\nplt.ylabel('features')\nplt.xlabel('Target')\nplt.title(\"Corelation of different fitures with target\")\nplt.show()","9d112c2e":"df1.columns","21f2abda":"fs1 = ['diagnosis', 'radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean',\n       'radius_se', 'perimeter_se', 'area_se',\n       'compactness_se', 'concavity_se', 'concave points_se', \n       'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']","76db332e":"len(fs1)","f56b4e4f":"df_fs1 = df1[fs1]\ndf_fs1.head()","7fb2f5cc":"df_fs1.info()","54cbc92e":"SEED = 42\n\ndata = df_fs1.copy()\ny = data['diagnosis']\nx = data.drop(['diagnosis'],axis=1)\n\n\nfrom sklearn.model_selection import train_test_split\nx_train,x_val,y_train,y_val = train_test_split(x,y,test_size = 0.1,random_state = SEED)","11ca5553":"x_train.shape","668082ac":"from tensorflow.keras import models, regularizers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization\nimport numpy\nnumpy.random.seed(7)\nmodel = models.Sequential()\nmodel.add(Dense(30,input_dim=25,activation='relu'))  # Adding input layer of 30 Neurons and 15 inputs\n# model.add(Dropout(0.5))                           # Adding droupout layer to overcome overfitting\nmodel.add(Dense(15,activation='relu'))               # Adding 1 hidden layer of 15 Neurons\nmodel.add(Dropout(0.5))                              # Adding droupout layer to overcome overfitting\nmodel.add(Dense(5,activation='relu'))                # Adding 1 hidden layer of 3 Neurons\n# model.add(Dropout(0.5))                              # Adding droupout layer to overcome overfitting\nmodel.add(Dense(1,activation='sigmoid'))             # Output layer of 1 neuron of sigmoid type\n#Compile mode\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n# Fit the model\n# model.fit(train,target,epochs=150, batch_size=20, verbose=1)","ac818e34":"model.summary()","0dec966b":"model.fit(x_train,y_train,epochs=200, batch_size=20, verbose=1)","2db2c471":"tfjs.converters.save_keras_model(model, 'models_cancer')","755ac0ab":"from sklearn.metrics import accuracy_score\n\nprc = model.predict(x_val)\n# round predictions\nprc = [round(x[0]) for x in prc]\naccuracy_score(y_val,prc)","ac36b5c1":"# model.save(\"breast-cancer.h5\")","e9bd5ddc":"df2 = pd.read_csv(\"..\/input\/heardiseasedata\/heart.csv\")\ndf2.head()","4d3683d2":"df2.info()","fa8def92":"df2['target'].value_counts()","6ab774d6":"corr_new_train=df2.corr()\nplt.figure(figsize=(10,20))\nsns.heatmap(corr_new_train[['target']].sort_values(by=['target'],ascending=False).head(60),vmin=-1, cmap='seismic', annot=True)\nplt.ylabel('features')\nplt.xlabel('Target')\nplt.title(\"Corelation of different fitures with target\")\nplt.show()","7c0255d2":"df2.columns","a522b59f":"fs2 = [\"cp\",\"slope\",\"restecg\",\"thalach\",\"target\"]","258e3c79":"df_fs2 = df2[fs2]\ndf_fs2.head()","81c20a53":"df_fs2.info()","2d840789":"SEED = 42\n\ndata = df_fs2.copy()\ny = data['target']\nx = data.drop(['target'],axis=1)\n\n\nfrom sklearn.model_selection import train_test_split\nx_train,x_val,y_train,y_val = train_test_split(x,y,test_size = 0.08,random_state = SEED)","05d6b24a":"x_train.shape","57a57288":"from tensorflow.keras import models, regularizers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization\nimport numpy\nnumpy.random.seed(7)\nmodel = models.Sequential()\nmodel.add(Dense(30,input_dim=4,activation='relu'))  # Adding input layer of 30 Neurons and 15 inputs\n# model.add(Dropout(0.5))                           # Adding droupout layer to overcome overfitting\nmodel.add(Dense(15,activation='relu'))               # Adding 1 hidden layer of 15 Neurons\nmodel.add(Dropout(0.5))                              # Adding droupout layer to overcome overfitting\nmodel.add(Dense(5,activation='relu'))                # Adding 1 hidden layer of 3 Neurons\n# model.add(Dropout(0.5))                              # Adding droupout layer to overcome overfitting\nmodel.add(Dense(1,activation='sigmoid'))             # Output layer of 1 neuron of sigmoid type\n#Compile mode\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n# Fit the model\n# model.fit(train,target,epochs=150, batch_size=20, verbose=1)","b0cae503":"model.summary()","1e163341":"model.fit(x_train,y_train,epochs=1000, batch_size=20, verbose=1)","e1e5b917":"from sklearn.metrics import accuracy_score\n\nprc = model.predict(x_val)\n# round predictions\nprc = [round(x[0]) for x in prc]\naccuracy_score(y_val,prc)","221298dd":"tfjs.converters.save_keras_model(model, 'model_heart')","74bf59b2":"import cv2\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Conv2D,MaxPool2D,Dropout,Flatten,Dense,BatchNormalization\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping","48a0903d":"width = 128\nheight = 128","81f611b9":"datagen = ImageDataGenerator(rescale=1\/255.0, validation_split=0.2)","e00654f8":"trainDatagen = datagen.flow_from_directory(directory='..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/',\n                                           target_size=(width,height),\n                                           class_mode = 'binary',\n                                           batch_size = 16,\n                                           subset='training')","693c9646":"valDatagen = datagen.flow_from_directory(directory='..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/',\n                                           target_size=(width,height),\n                                           class_mode = 'binary',\n                                           batch_size = 16,\n                                           subset='validation')","54c80a56":"model = Sequential()\nmodel.add(Conv2D(16,(3,3),activation='relu',input_shape=(128,128,3)))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(32,(3,3),activation='relu'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(64,(3,3),activation='relu'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(Dropout(0.3))\n\nmodel.add(Flatten())\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(1,activation='sigmoid'))","dae58c6d":"model.summary()","82e3d1b2":"model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","6ab3cdce":"early_stop = EarlyStopping(monitor='val_loss',patience=2)","7eb7488c":"history = model.fit_generator(generator = trainDatagen,\n                             steps_per_epoch = len(trainDatagen),\n                              epochs =20,\n                              validation_data = valDatagen,\n                              validation_steps=len(valDatagen),\n                             callbacks=[early_stop])","46f4cdac":"tfjs.converters.save_keras_model(model, 'malaria_model')","0872957c":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout , BatchNormalization\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nimport cv2","5b323e78":"labels = ['PNEUMONIA', 'NORMAL']\nimg_size = 150\ndef get_training_data(data_dir):\n    data = [] \n    for label in labels: \n        path = os.path.join(data_dir, label)\n        class_num = labels.index(label)\n        for img in os.listdir(path):\n            try:\n                img_arr = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n                resized_arr = cv2.resize(img_arr, (img_size, img_size)) \n                data.append([resized_arr, class_num])\n            except Exception as e:\n                print(e)\n    return np.array(data)","70831f59":"train = get_training_data('..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train')\ntest = get_training_data('..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test')\nval = get_training_data('..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val')","1eb3c3af":"x_train = []\ny_train = []\n\nx_val = []\ny_val = []\n\nx_test = []\ny_test = []\n\nfor feature, label in train:\n    x_train.append(feature)\n    y_train.append(label)\n\nfor feature, label in test:\n    x_test.append(feature)\n    y_test.append(label)\n    \nfor feature, label in val:\n    x_val.append(feature)\n    y_val.append(label)","d7e782ff":"# Normalize the data\nx_train = np.array(x_train) \/ 255\nx_val = np.array(x_val) \/ 255\nx_test = np.array(x_test) \/ 255","72eada33":"# resize data for deep learning \nx_train = x_train.reshape(-1, img_size, img_size, 1)\ny_train = np.array(y_train)\n\nx_val = x_val.reshape(-1, img_size, img_size, 1)\ny_val = np.array(y_val)\n\nx_test = x_test.reshape(-1, img_size, img_size, 1)\ny_test = np.array(y_test)","58056780":"\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range = 30,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.2, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip = True,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(x_train)","51c86e68":"model = Sequential()\nmodel.add(Conv2D(32 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu' , input_shape = (150,150,1)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(64 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(Dropout(0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(64 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(128 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(256 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Flatten())\nmodel.add(Dense(units = 128 , activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units = 1 , activation = 'sigmoid'))\nmodel.compile(optimizer = \"rmsprop\" , loss = 'binary_crossentropy' , metrics = ['accuracy'])\nmodel.summary()","7549147a":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_loss', patience = 2, verbose=1,factor=0.3, min_lr=0.000001)\n","04f025c1":"early_stop = EarlyStopping(monitor='val_loss',patience=3,mode=\"min\")","d03d8dfb":"history = model.fit(datagen.flow(x_train,y_train, batch_size = 32) ,epochs = 10 , validation_data = datagen.flow(x_val, y_val) ,callbacks = [early_stop])","1b911768":"tfjs.converters.save_keras_model(model, 'pneumonia_model')","33ba488a":"df3 = pd.read_csv(\"..\/input\/indian-liver-patient-records\/indian_liver_patient.csv\")\ndf3.head()","efb47cb8":"df3.info()","c7ed11e8":"df3[\"Albumin_and_Globulin_Ratio\"].mean()","f13b13d3":"df3[\"Albumin_and_Globulin_Ratio\"].median()","657f5560":"median = df3[\"Albumin_and_Globulin_Ratio\"].median()\n\ndf3[\"Albumin_and_Globulin_Ratio\"]=df3[\"Albumin_and_Globulin_Ratio\"].fillna(median)","a798d2d7":"df3.info()","4c97c70b":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ndiag = [\"Dataset\"]\nfor i in diag:\n    df3[i]=label_encoder.fit_transform(df3[i])","eb1dadfc":"df3[\"Dataset\"].value_counts()","449e037c":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ndiag = [\"Gender\"]\nfor i in diag:\n    df3[i]=label_encoder.fit_transform(df3[i])","f0c3a356":"df3.head()","e4151fb5":"corr_new_train=df3.corr()\nplt.figure(figsize=(10,20))\nsns.heatmap(corr_new_train[['Dataset']].sort_values(by=['Dataset'],ascending=False).head(60),vmin=-1, cmap='seismic', annot=True)\nplt.ylabel('features')\nplt.xlabel('Target')\nplt.title(\"Corelation of different fitures with target\")\nplt.show()","f2488da8":"df3.columns","ff3b5f3e":"from sklearn.utils import resample","412afed3":"# Split data on majority and minority.. minority is dataset == 2\nminority = df3[df3.Dataset==1]\nmajority = df3[df3.Dataset==0]\n\nprint('Minority size:', minority.shape)\nprint('Majority size:', majority.shape)","284e387e":"# choosing upsample as even now we do not have too much data\nminority_upsample = resample(minority, replace=True, n_samples=majority.shape[0])\nprint('Minority upsampled size:', minority_upsample.shape)","1046824a":"# merge majority with upsampled minority\ndf3_1 = pd.concat([minority_upsample, majority], axis=0)","2601fcd5":"SEED = 42\n\ndata = df3_1.copy()\ny = data['Dataset']\nx = data.drop(['Dataset'],axis=1)\n\n\nfrom sklearn.model_selection import train_test_split\nx_train,x_val,y_train,y_val = train_test_split(x,y,test_size = 0.08,random_state = SEED)","915cad47":"x_train.shape","ad2e0d13":"from tensorflow.keras import models, regularizers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization\nimport numpy\nnumpy.random.seed(7)\nmodel = models.Sequential()\nmodel.add(Dense(30,input_dim=10,activation='relu'))  \n# model.add(Dropout(0.5))                           # Adding droupout layer to overcome overfitting\nmodel.add(Dense(15,activation='relu'))               # Adding 1 hidden layer of 15 Neurons\nmodel.add(Dropout(0.5))                              # Adding droupout layer to overcome overfitting\nmodel.add(Dense(5,activation='relu'))                # Adding 1 hidden layer of 3 Neurons\n# model.add(Dropout(0.5))                              # Adding droupout layer to overcome overfitting\nmodel.add(Dense(1,activation='sigmoid'))             # Output layer of 1 neuron of sigmoid type\n#Compile mode\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])","e2f6b3cf":"model.fit(x_train,y_train,epochs=200, batch_size=20, verbose=1)","294142ce":"from sklearn.metrics import accuracy_score\n\nprc = model.predict(x_val)\n# round predictions\nprc = [round(x[0]) for x in prc]\naccuracy_score(y_val,prc)","01ab9a17":"tfjs.converters.save_keras_model(model, 'model_liver')","893a3f8e":"model.save(\"liver_701p.h5\")","e4975bf8":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport missingno as msno \nfrom sklearn.impute import KNNImputer\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\n\nimport warnings\nwarnings.simplefilter('ignore')\n\nfrom scipy.stats import randint \nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.model_selection import RandomizedSearchCV \nfrom sklearn.ensemble import RandomForestClassifier\nfrom catboost import CatBoostClassifier","eda6dd0b":"ckd_df = pd.read_csv(\"..\/input\/ckdisease\/kidney_disease.csv\")\nckd_df.head()","be318417":"ckd_df[ckd_df['classification']==1]","293a70d9":"ckd_df.info()","a789bff1":"def display_confusion_matrix(y_test,y_pred):\n  cm = confusion_matrix(y_test, y_pred_lr)\n  group_names = [\"True Neg\",\"False Pos\",\"False Neg\",\"True Pos\"]\n  group_counts = [\"{0:0.0f}\".format(value) for value in\n                cm.flatten()]\n  group_percentages = [\"{0:.2%}\".format(value) for value in\n                     cm.flatten()\/np.sum(cm)]\n  labels = [f\"{v1}\\n{v2}\\n{v3}\" for v1, v2, v3 in\n          zip(group_names,group_counts,group_percentages)]\n  labels = np.asarray(labels).reshape(2,2)\n  sns.heatmap(cm, annot=labels, fmt=\"\", cmap=\"Blues\")\n  print(classification_report(y_test, y_pred))","650b70d9":"col_dict={\"bp\":\"blood_pressure\",\n          \"sg\":\"specific_gravity\",\n          \"al\":\"albumin\",\n          \"su\":\"sugar\",\n          \"rbc\":\"red_blood_cells\",\n          \"pc\":\"pus_cell\",\n          \"pcc\":\"pus_cell_clumps\",\n          \"ba\":\"bacteria\",\n          \"bgr\":\"blood_glucose_random\",\n          \"bu\":\"blood_urea\",\n          \"sc\":\"serum_creatinine\",\n          \"sod\":\"sodium\",\n          \"pot\":\"potassium\",\n          \"hemo\":\"hemoglobin\",\n          \"pcv\":\"packed_cell_volume\",\n          \"wc\":\"white_blood_cell_count\",\n          \"rc\":\"red_blood_cell_count\",\n          \"htn\":\"hypertension\",\n          \"dm\":\"diabetes_mellitus\",\n          \"cad\":\"coronary_artery_disease\",\n          \"appet\":\"appetite\",\n          \"pe\":\"pedal_edema\",\n          \"ane\":\"anemia\"}\n\nckd_df.rename(columns=col_dict, inplace=True)\n","c2f9fe03":"ckd_df.isnull().sum()","5426ed9b":"ckd_df['diabetes_mellitus'] =ckd_df['diabetes_mellitus'].replace(to_replace={'\\tno':'no','\\tyes':'yes',' yes':'yes'})\nckd_df['coronary_artery_disease'] = ckd_df['coronary_artery_disease'].replace(to_replace='\\tno',value='no')\nckd_df['white_blood_cell_count'] = ckd_df['white_blood_cell_count'].replace(to_replace='\\t8400',value='8400')","22a47ca9":"ckd_df.classification=ckd_df.classification.replace(\"ckd\\t\",\"ckd\")","1bc7ecc2":"ckd_df[\"classification\"].value_counts()","59d85a25":"ckd_df[\"white_blood_cell_count\"]=ckd_df[\"white_blood_cell_count\"].replace(\"\\t?\", np.nan)\nckd_df[\"red_blood_cell_count\"]=ckd_df[\"red_blood_cell_count\"].replace(\"\\t?\", np.nan)\nckd_df['diabetes_mellitus'] = ckd_df['diabetes_mellitus'].replace(to_replace={'\\tno':'no','\\tyes':'yes',' yes':'yes'})\nckd_df['coronary_artery_disease'] = ckd_df['coronary_artery_disease'].replace(to_replace='\\tno',value='no')\nckd_df['white_blood_cell_count'] = ckd_df['white_blood_cell_count'].replace(to_replace='\\t8400',value='8400')\nckd_df[\"packed_cell_volume\"]= ckd_df[\"packed_cell_volume\"].replace(\"\\t?\", np.nan)","b973e1ac":"for c in ckd_df.columns:\n  print(c,ckd_df[c].unique())","966d919f":"for string_column in [\"red_blood_cells\",\"pus_cell\",\"pus_cell_clumps\",\"bacteria\",\"hypertension\",\"diabetes_mellitus\",\"coronary_artery_disease\",\"pedal_edema\",\"anemia\",\"appetite\"]:\n  ckd_df[string_column]=ckd_df[string_column].astype(str)","32cff6cd":"ckd_df['red_blood_cells']=ckd_df['red_blood_cells'].replace({'normal':1,'abnormal':0})\nckd_df['pus_cell']=ckd_df['pus_cell'].replace({'normal':1,'abnormal':0})\nckd_df['pus_cell_clumps']=ckd_df['pus_cell_clumps'].replace({'notpresent':0,'present':1})\nckd_df['bacteria']=ckd_df['bacteria'].replace({'notpresent':0,'present':1})\nckd_df['hypertension']=ckd_df['hypertension'].replace({'no':0,'yes':1})\nckd_df['diabetes_mellitus']=ckd_df['diabetes_mellitus'].replace({'no':0,'yes':1})\nckd_df['coronary_artery_disease']=ckd_df['coronary_artery_disease'].replace({'no':0,'yes':1})\nckd_df['pedal_edema']=ckd_df['pedal_edema'].replace({'no':0,'yes':1})\nckd_df['anemia']=ckd_df['anemia'].replace({'no':0,'yes':1})\nckd_df['appetite']=ckd_df['appetite'].replace({'poor':0,'good':1})","5ebebba7":"imputer = KNNImputer(n_neighbors=5, weights='uniform', metric='nan_euclidean')","6cdd0dec":"impute_columns=list(set(ckd_df.columns)-set([\"classification\"]))\nprint(impute_columns)","b0c9d9a7":"imputer.fit(ckd_df[impute_columns])","5495b96a":"X_trans=pd.DataFrame(imputer.transform(ckd_df[impute_columns]), columns=impute_columns)","14985da8":"X_trans.head()","3e928c89":"print (round((X_trans.isnull().sum() * 100\/ len(X_trans)),2).sort_values(ascending=False))","910cac01":"x=X_trans[X_trans[\"id\"].isin(ckd_df[\"id\"])].drop([\"id\"],axis=1)","e52405e3":"x.info()","bebd012f":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ndiag = [\"classification\"]\nfor i in diag:\n    ckd_df[i]=label_encoder.fit_transform(ckd_df[i])","734b3f84":"y=ckd_df[\"classification\"]","a1f47bac":"df5 = pd.concat([x,y],axis=1)\ndf5.head()","14e12f75":"df5[\"classification\"].value_counts()","0ccfcb1e":"# corr_new_train=df5.corr()\n# plt.figure(figsize=(10,20))\n# sns.heatmap(corr_new_train[['classification']].sort_values(by=['classification'],ascending=False).head(60),vmin=-1, cmap='seismic', annot=True)\n# plt.ylabel('features')\n# plt.xlabel('Target')\n# plt.title(\"Corelation of different fitures with target\")\n# plt.show()","a857efd8":"SEED = 42\n\nfrom sklearn.model_selection import train_test_split\nx_train,x_val,y_train,y_val = train_test_split(x,y,test_size = 0.08,random_state = SEED)","1d7562a2":"x_train.shape","23a52f59":"from tensorflow.keras import models, regularizers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization\nimport numpy\nnumpy.random.seed(7)\nmodel = models.Sequential()\nmodel.add(Dense(30,input_dim=24,activation='relu'))  # Adding input layer of 30 Neurons and 15 inputs\n# model.add(Dropout(0.5))                           # Adding droupout layer to overcome overfitting\nmodel.add(Dense(15,activation='relu'))               # Adding 1 hidden layer of 15 Neurons\nmodel.add(Dropout(0.5))                              # Adding droupout layer to overcome overfitting\nmodel.add(Dense(5,activation='relu'))                # Adding 1 hidden layer of 3 Neurons\n# model.add(Dropout(0.5))                              # Adding droupout layer to overcome overfitting\nmodel.add(Dense(1,activation='sigmoid'))             # Output layer of 1 neuron of sigmoid type\n#Compile mode\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])","5bcaca86":"model.summary()","c3a1dd51":"model.fit(x_train,y_train,epochs=200, batch_size=20, verbose=1)","97301d8f":"from sklearn.metrics import accuracy_score\n\nprc = model.predict(x_val)\n# round predictions\nprc = [round(x[0]) for x in prc]\naccuracy_score(y_val,prc)","d1979ea3":"tfjs.converters.save_keras_model(model, 'model_kidny')","20029d7a":"from tensorflow.keras import backend as K\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D\nfrom tensorflow.keras.layers import Activation, Dropout, BatchNormalization, Flatten, Dense, AvgPool2D,MaxPool2D\nfrom tensorflow.keras.applications.vgg16 import VGG16, preprocess_input\nfrom tensorflow.keras.optimizers import Adam, SGD, RMSprop\nimport tensorflow as tf \nfrom tensorflow.keras.preprocessing import image\nimport glob","66830492":"DATASET_DIR = \"\/kaggle\/input\/covid19-radiography-database\/COVID-19 Radiography Database\"\n\nos.listdir(DATASET_DIR)\n","f74f3c79":"normal_images = []\ncount = 0\n\nfor img_path in glob.glob(DATASET_DIR + \"\/NORMAL\/*\"):\n    count += 1\n    normal_images.append(image.load_img(str(img_path), target_size = (150,150,3)))\n    if count > 230:\n        break\n    ","7139e0ed":"covid_images = []\nfor img_path in glob.glob(DATASET_DIR + \"\/COVID-19\/*\"): \n    covid_images.append(image.load_img(str(img_path), target_size = (150,150,3)))","4ef6e764":"images_together = []\n\nfor i in normal_images:\n    images_together.append(img_to_array(i))\n    \nfor i in covid_images:\n    images_together.append(img_to_array(i))\n    \ntargets = np.zeros(len(images_together))\ntargets[:len(normal_images)-1] = 1","e595f6dc":"targets = np.array(targets)\nprint(\"targets: \",targets.shape)\ntargets = targets.reshape(-1,1)\nprint(\"new shape of targets: \",targets.shape)","a13ed249":"images_together = np.array(images_together)\nprint(\"shape of images together: \",images_together.shape)","f23adcf2":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(images_together, targets, test_size=0.25, stratify=targets)\n\nimages_together = np.concatenate((X_train, X_val))\ntargets = np.concatenate((y_train, y_val))","768059b0":"IMG_W = 150\nIMG_H = 150\nCHANNELS = 3\n\nINPUT_SHAPE = (IMG_W, IMG_H, CHANNELS)\nNB_CLASSES = 2\nEPOCHS = 35\nBATCH_SIZE = 40","7edc325a":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3), input_shape = INPUT_SHAPE, activation = \"relu\"))\nmodel.add(MaxPool2D(pool_size = (2,2)))\n\nmodel.add(Conv2D(filters = 48, kernel_size = (3,3), activation = \"relu\"))\nmodel.add(MaxPool2D(pool_size = (2,2)))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), activation = \"relu\"))\nmodel.add(MaxPool2D(pool_size = (2,2), strides = (1,1)))\nmodel.add(Dropout(0.25))\n\n#fully connected\nmodel.add(Flatten())\nmodel.add(Dense(32, activation = \"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation = \"sigmoid\"))\n\n# compile \nmodel.compile(loss = \"binary_crossentropy\",\n             optimizer = \"rmsprop\",\n             metrics = [\"accuracy\"])","e04f15c6":"model1 = Sequential()\nmodel1.add(Conv2D(16,(3,3),activation='relu',input_shape=INPUT_SHAPE))\nmodel1.add(MaxPool2D(2,2))\nmodel1.add(Dropout(0.2))\n\nmodel1.add(Conv2D(32,(3,3),activation='relu'))\nmodel1.add(MaxPool2D(2,2))\nmodel1.add(Dropout(0.3))\n\nmodel1.add(Conv2D(64,(3,3),activation='relu'))\nmodel1.add(MaxPool2D(2,2))\nmodel1.add(Dropout(0.3))\n\nmodel1.add(Flatten())\nmodel1.add(Dense(64,activation='relu'))\nmodel1.add(Dropout(0.3))\n\nmodel1.add(Dense(1,activation='sigmoid'))\n\nmodel1.compile(loss = \"binary_crossentropy\",\n             optimizer = \"rmsprop\",\n             metrics = [\"accuracy\"])","f0b0885b":"model1.summary()","37127d89":"model.summary()","b8d44d87":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                  shear_range = 0.2,\n                                  zoom_range = 0.2,\n                                  horizontal_flip = True,\n                                  validation_split = 0.25)\n\n\ntrain_generator = train_datagen.flow(\nimages_together, targets,\nbatch_size = BATCH_SIZE,\nsubset = \"training\")\n\nvalidation_generator = train_datagen.flow(\nimages_together, targets,\nbatch_size = BATCH_SIZE,\nshuffle = False,\nsubset = \"validation\")\n\n#fitting\nhist = model.fit_generator(\ntrain_generator,\nsteps_per_epoch = (450*0.75)\/\/BATCH_SIZE,\nvalidation_data = validation_generator,\nvalidation_steps = (450*0.25)\/\/ BATCH_SIZE,\nepochs = EPOCHS)","39d15dd8":"print(\"Training Accuracy: \"+str(np.round(hist.history[\"accuracy\"][-1]*100,2))+\"%\")\nprint(\"Validation Accuracy: \"+str(np.round(hist.history[\"val_accuracy\"][-1]*100,2))+\"%\")","d1683ad8":"tfjs.converters.save_keras_model(model, 'model_covid')","5eca79aa":"# \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/","5f57f13e":"# Breast cancer:","a972c771":"Training Accuracy: 98.12%\n\nValidation Accuracy: 97.5%\n\nincase of **`model`** it kinda ok, i would say. I actually never faced any situation where val_acc is almost equal to training_acc.","3c1fb4fc":"# pneumonia:","32f11b95":"# kidney:","2431faed":"# COVID:","c51cb775":"data cleaning is referenced from here https:\/\/www.kaggle.com\/mvbalaji\/ckd-prediction-using-diff-models-with-hp-tuning","5b448b23":"# malaria","43795078":"for **`model1`** the acc of both training and validation is \nTraining Accuracy: 91.61%\nValidation Accuracy: 97.5%\n\nThis is a case of overfitting.\n\n#### Solutions:\n1. Probably the network is struggling to fit the training data. Hence, try a little bit bigger network.\n\n2. Try a different Deep Neural Network. I mean to say change the architecture a bit.\n\n3. Train for longer time.\n\n4. Try using advanced optimization algorithms.\n\nhttps:\/\/stackoverflow.com\/a\/45854380\/12568833","99120c6f":"## Normal->1, covid->0","7661861b":"## Diabetes","55428165":"# Liver:","7e1eaaa3":"# Heart"}}