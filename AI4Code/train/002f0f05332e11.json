{"cell_type":{"8202440b":"code","a4e85aef":"code","d8aa8ea0":"code","6112a736":"code","37fad5e2":"code","7203143f":"code","7f4bbd37":"code","df5ec0d9":"code","7f971afc":"markdown","fe31ccfb":"markdown","412f76d2":"markdown","81bc4362":"markdown","6fad3562":"markdown","2a8d8506":"markdown"},"source":{"8202440b":"import urllib3\nimport os\nimport requests\nimport re\nfrom bs4 import BeautifulSoup\nimport sys\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","a4e85aef":"url=\"https:\/\/www.imdb.com\/chart\/top?ref_=nv_mv_250\"\nos.environ['NO_PROXY'] = 'imdb.com'\nreq = requests.get(url)\npage = req.text\n\nsoup = BeautifulSoup(page, 'html.parser')\n#print (soup.prettify())","d8aa8ea0":"links=[]\nfor a in soup.find_all('a'): #, href=True):\n    links.append(a.get('href'))\nlinks=['https:\/\/www.imdb.com'+a.strip() for a in links if a is not None and a.startswith('\/title\/tt') ]\n\n#---------------------------Remove duplicates in links\ntop_250_links=[]\nfor c in links:\n    if c not in top_250_links:\n        top_250_links.append(c)\n#top_250_links=top_250_links[2:]\n\nprint(len(top_250_links))\ntop_250_links[0:5]","6112a736":"column_list=['Rank','Movie_name' ,'URL' ,'Release_Year' ,'IMDB_Rating' ,\n'Reviewer_count' ,'Censor_Board_Rating' ,'Movie_Length' ,'Genre_1' ,\n'Genre_2' ,'Genre_3' ,'Genre_4' ,'Release_Date' ,'Story_Summary' ,\n'Director' ,'Writer_1' ,'Writer_2' ,'Writer_3' ,'Star_1' ,\n'Star_2' ,'Star_3' ,'Star_4' ,'Star_5' ,'Plot_Keywords' ,'Budget' ,\n'Gross_USA' ,'Cum_Worldwide_Gross' ,'Production_Company' \n]\ndf = pd.DataFrame(columns=column_list)#,index=t) \ndf","37fad5e2":"top_250_links[130]","7203143f":"\nfor x in np.arange(0, len(top_250_links)):\n    \n    #---------------------------Load html page for 1st movie in top 250 movies    \n\n    url=top_250_links[x]\n    req = requests.get(url)\n    page = req.text\n    soup = BeautifulSoup(page, 'html.parser')\n    \n    #---------------------------Retrieve Movie details from html page\n    Movie_name=(soup.find(\"div\",{\"class\":\"title_wrapper\"}).get_text(strip=True).split('|')[0]).split('(')[0]\n        \n    year_released=((soup.find(\"div\",{\"class\":\"title_wrapper\"}).get_text(strip=True).split('|')[0]).split('(')[1]).split(')')[0]\n        \n    imdb_rating=soup.find(\"span\",{\"itemprop\":\"ratingValue\"}).text\n    \n    reviewer_count=soup.find(\"span\",{\"itemprop\":\"ratingCount\"}).text\n    \n    subtext= soup.find(\"div\",{\"class\":\"subtext\"}).get_text(strip=True).split('|') #Censor_rating\n    if len(subtext)<4:\n        censor_rating='Not Rated'\n        movie_len=subtext[0]\n        genre_list=subtext[1].split(',')\n        while len(genre_list)<4:         genre_list.append(\" \")\n        genre_1,genre_2,genre_3,genre_4=genre_list\n        release_date=subtext[2]\n    else:\n        censor_rating=subtext[0]\n        movie_len=subtext[1]\n        genre_list=subtext[2].split(',')\n        while len(genre_list)<4:         genre_list.append(\" \")\n        genre_1,genre_2,genre_3,genre_4=genre_list\n        release_date=subtext[3]\n        \n    story_summary=soup.find(\"div\",{\"class\":\"summary_text\"}).get_text(strip=True).strip()\n    \n    #---------------------------Director,Writer and Actor details\n    b=[]\n    for a in soup.find_all(\"div\",{\"class\":\"credit_summary_item\"}):\n        c=re.split(',|:|\\|',a.get_text(strip=True))         #print(\"c - \",c)\n        b.append(c)                                         #print(''.join(a.get_text(strip=True)))\n        \n    stars=b.pop()\n    writers=b.pop()\n    directors=b.pop()\n    \n    directors=[s for s in directors if not '\u00bb' in s]\n    writers=[s for s in writers if not '\u00bb' in s]\n    stars=[s for s in stars if not '\u00bb' in s]\n    \n    stars=stars[1:min(len(stars),5)]\n    writers=writers[1:min(len(writers),3)]\n    directors=directors[1:]\n    \n    while len(stars)<5:         stars.append(\" \")\n    while len(writers)<3:         writers.append(\" \")\n    \n    star_1,star_2,star_3,star_4,star_5=stars\n    \n    writer_1,writer_2,writer_3=writers\n    \n    director=directors[0]\n    \n    #---------------------------Plot Keywords\n    b=[]\n    for a in soup.find_all(\"span\",{\"class\":\"itemprop\"}):     b.append(a.get_text(strip=True))  \n    \n    plot_keywords='|'.join(b)\n    \n    #---------------------------Commercial details and Prod Company\n    \n    \n    b=[]                    #---------------------------Remove unwanted entries\n    d={'Budget':'', 'Opening Weekend USA':'','Gross USA':'','Cumulative Worldwide Gross':'','Production Co':''}\n    for a in soup.find_all(\"div\",{\"class\":\"txt-block\"}):\n        c=a.get_text(strip=True).split(':')\n        if c[0] in d:\n            b.append(c)\n    \n    for i in b:             #---------------------------Update default values if entries are found\n            if i[0] in d: \n                d.update({i[0]:i[1]})                \n        #print(d)\n    \n    production_company=d['Production Co'].split('See more')[0]\n    cum_world_gross=d['Cumulative Worldwide Gross'].split(' ')[0]\n    gross_usa=d['Gross USA'].split(' ')[0]\n    budget=d['Budget']\n    \n    print(x,\":\",Movie_name)\n    #---------------------------Dictionary to holds all details\n    movie_dict={\n        'Rank':x+1,\n        'Movie_name' : Movie_name,\n        'URL' : url,\n        'Release_Year' : year_released,\n        'IMDB_Rating' : imdb_rating,\n        'Reviewer_count' : reviewer_count,\n        'Censor_Board_Rating' : censor_rating,\n        'Movie_Length' : movie_len,\n        'Genre_1' : genre_1,\n        'Genre_2' : genre_2,\n        'Genre_3' : genre_3,\n        'Genre_4' : genre_4,\n        'Release_Date' : release_date,\n        'Story_Summary' : story_summary,\n        'Director' : director,\n        'Writer_1' : writer_1,\n        'Writer_2' : writer_2,\n        'Writer_3' : writer_3,\n        'Star_1' : star_1,\n        'Star_2' : star_2,\n        'Star_3' : star_3,\n        'Star_4' : star_4,\n        'Star_5' : star_5,\n        'Plot_Keywords' : plot_keywords,\n        'Budget' : budget,\n        'Gross_USA' : gross_usa,\n        'Cum_Worldwide_Gross' : cum_world_gross,\n        'Production_Company' : production_company\n        }\n    #print(movie_dict['Rank'],\":\",movie_dict['Movie_name'])\n    \n    #---------------------------Append rows to dataframes using dictionary\n    df = df.append(pd.DataFrame.from_records([movie_dict],columns=movie_dict.keys() ) )\n","7f4bbd37":"df=df[column_list]  \ndf=df.set_index(['Rank'], drop=False) #should be run only once\ndf.head(20)","df5ec0d9":"df.tail(5)","7f971afc":"<h2><b>4. Define empty dataframe with required columns<\/b><\/h2>","fe31ccfb":"<h2>Hi, This is my very first kernel in Kaggle. <\/h2>\n<h2>I have presented here a Web scraping program to collect data about the IMDB top rated movies list. <\/h2>\n<h3>The top 250 movies are listed in the URL- https:\/\/www.imdb.com\/chart\/top?ref_=nv_mv_250 .\nThe algorithm collects links of all 250 movie pages, visits them and collects data for the following 27 attributes : <\/h3>\n<h3>Name of the movie, URL, Year released, IMDB rating, Number of reviewers,Censor board rating, Length of the movie, Genre 1, Genre 2, Genre 3 , Genre 4, Release date, Story summary, Director Name, Writer 1 ,Writer 2, Writer 3, Star 1, Star 2, Star 3 , Star 4, Star 5, Plot Keywords list, Budget, Gross USA ,Cumulative Worldwide Gross, Production company. <\/h3>\n<h3> The data so collected, will be cleaned and then used for analysis.<\/h3>","412f76d2":"<h2><b>3. Retrive the links for the top 250 movies from the parent html page<\/b><\/h2>","81bc4362":"<h2><b> 5. 'For' loop which visits each page out of the 250 html pages, retrives details and stores in dataframe <\/b><\/h2>","6fad3562":"<h2><b> 1. Import necessary libraries <\/b><\/h2>","2a8d8506":"<h2><b>2. Request the main webpage : IMDB top 250 Movies<\/b><\/h2>"}}