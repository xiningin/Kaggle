{"cell_type":{"7f0f2a19":"code","fb6af418":"code","98428558":"code","087a9d5c":"code","43847054":"code","553d25d8":"code","8675c974":"code","cbd84aad":"code","05b3b43f":"code","23158de5":"code","a2f26dbd":"code","cff6fdac":"code","2110e9fb":"code","bf4a4e0b":"code","ac5a2403":"code","f62f8100":"code","94c3fd6f":"code","c926fc5e":"code","6d225eae":"code","09f63e6a":"code","e340882a":"code","1a053fec":"code","e24520a7":"code","eab912b6":"code","45b7789d":"code","bc1a09c1":"code","74e1f9a0":"code","540510dd":"code","581d228e":"code","341122a5":"code","14d9067a":"code","eb63d96e":"code","61ff23ff":"code","779e13d5":"code","cc6a8e80":"code","0cc28f60":"code","6ec4b34b":"code","6cced0ee":"code","e760774a":"code","9af6f663":"code","04074a5a":"code","8bd2ba4d":"code","b0f8c4ef":"code","30f1eb9e":"code","14c3b3b6":"markdown","874399f8":"markdown","49fbb93d":"markdown","93039a28":"markdown","7f495466":"markdown","812b4f1c":"markdown","682d7fe9":"markdown","e30efc06":"markdown","62750855":"markdown","70c385b0":"markdown","cd2e60a5":"markdown","ec8b7105":"markdown","5a992625":"markdown","c07b2e62":"markdown","ca3a25a2":"markdown","230198ee":"markdown","96603049":"markdown","34a2ef7e":"markdown","a2167226":"markdown"},"source":{"7f0f2a19":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom datetime import date\nfrom iso3166 import countries\n\n%matplotlib inline","fb6af418":"!pwd","98428558":"path = \"..\/input\/basketball\/basketball.sqlite\"\n\nimport pandas as pd\nimport sqlite3\ncon = sqlite3.connect(path)\ncur = con.cursor()","087a9d5c":"# SQL select statement using Pandas\ngame2020 = pd.read_sql_query(\"SELECT * FROM game WHERE SEASON_ID=22020\", con)\nprint(\"Pandas dataframe size:\", len(game2020))\nprint(game2020.iloc[0]) # print the first record in the table \"game\" of year 2020","43847054":"game2020.head(10)","553d25d8":"# Choose the Season_Id as 22020\nselect_player = ['GAME_ID','MIN_HOME', 'TEAM_ABBREVIATION_HOME']\ngame2020[select_player].head()","8675c974":"path = \"..\/input\/basketball\/basketball.sqlite\"\n\nimport pandas as pd\nimport sqlite3\ncon = sqlite3.connect(path)\ncur = con.cursor()\n    \n# SQL select statement using Pandas\nsalary = pd.read_sql_query(\"SELECT * FROM Player_Salary\", con)\nprint(\"Pandas dataframe size:\", len(salary))\nprint(salary.iloc[0]) # print the first record in the table \"game\" of year 2020","cbd84aad":"# Slug Season as 2020-21\nsalary20_21 = salary[salary.slugSeason == \"2020-21\"]\nsalary20_21.head(10)","05b3b43f":"salary20_21.describe()","23158de5":"salary20_21.info()","a2f26dbd":"selected = ['slugSeason','nameTeam','namePlayer','value']\n\nsalary_select = salary20_21[selected].sort_values(\n    by = ['value'],\n    ascending = False\n)\n\n# Show the Salary about the player\nsalary_select.head(10)","cff6fdac":"# Change the name \"namePlayer\" to \"Player\"\nsalary_select = salary_select.rename(\n    columns = {'namePlayer':'Player'}\n)\nsalary_select.head()","2110e9fb":"# To find the salary distribution\npx.histogram(\n    salary_select.head(10),\n    x = \"Player\",\n    y = \"value\",\n    marginal = 'box',\n    hover_data = salary_select.columns,\n    title = \"Salary about the Player\"\n)","bf4a4e0b":"# Show the Salary visualization\ntmp = salary_select[salary_select['nameTeam'] == \"Brooklyn Nets\"].head(10)\npx.bar(\n    tmp,\n    x = \"Player\",\n    y = \"value\",\n    #facet_col = 'namePlayer', \n    #text = 'result_out',\n    title = \"Salary in Brooklyn Nets\"\n      )","ac5a2403":"# Export the salary info into \".CSV\"\nsalary20_21.to_csv(\"salary_20_21.csv\")","f62f8100":"# Reading CSV from (3) Dataset\npath = '..\/input\/nba-20202021-season-player-stats\/nba2021_per_game.csv'\n\nimport pandas as pd\nperformance = pd.read_csv(path)\nperformance.info()","94c3fd6f":"# Check the table \"performance\"\nperformance.head()","c926fc5e":"performance.describe()","6d225eae":"\"\"\"\n```\nPTS > Points >> PTS\nREB > Rebounds >> TRB\nAST > Assists >> AST\nSTL > Steals >> STL\nBLK > Blocks >> BLK\nFGA > Field golds Attempted >> FGA\nFGM > Field Golds Made >> FG\nFTA > Free Throws Attempted >> FTA\nFTM > Free Throws Made >> FT\nTO > Turnovers >> TOV\n```\n\"\"\"\n# Choose the element about the performance\nselected = [\n    'Player','Pos','PTS', 'TRB', 'AST', 'STL', 'BLK',\n    'FGA', 'FG', 'FTA', 'FT', 'TOV'\n           ]\nperformance_selected = performance[selected].sort_values(\n    by = ['PTS'],\n    ascending = False\n)\n\n# Show the data\nperformance_selected.head()","09f63e6a":"performance_selected.columns","e340882a":"tmp = performance_selected['Player'] == 'Stephen Curry'\nperformance_selected.loc[tmp]","1a053fec":"performance_selected.describe()","e24520a7":"# Calculated average EFF\n\n# `(PTS + REB + AST + STL + BLK \n# \u2212 ((FGA \u2212 FGM) + (FTA \u2212 FTM) + TO))`\naverage_eff = (\n    performance_selected['PTS'].mean() + \n    performance_selected['TRB'].mean() + \n    performance_selected['AST'].mean() + \n    performance_selected['STL'].mean() + \n    performance_selected['BLK'].mean() - (\n        performance_selected['FGA'].mean() -\n        performance_selected['FG'].mean()\n    ) + (\n        performance_selected['FTA'].mean() -\n        performance_selected['FT'].mean()\n    ) +\n    performance_selected['TOV'].mean()\n)\n\nprint(average_eff)","eab912b6":"# Add values of \"EFF\"\nperformance_selected['EFF'] = (\n    performance_selected['PTS'] + \n    performance_selected['TRB'] + \n    performance_selected['AST'] + \n    performance_selected['STL'] + \n    performance_selected['BLK'] - (\n        performance_selected['FGA'] -\n        performance_selected['FG'] \n    ) + (\n        performance_selected['FTA'] -\n        performance_selected['FT'] \n    ) +\n    performance_selected['TOV']\n)","45b7789d":"selected = [\n    'Player','Pos','PTS', 'TRB', 'AST', 'STL', 'BLK',\n    'FGA', 'FG', 'FTA', 'FT', 'TOV', 'EFF'\n]\n\nperformance_selected[selected].sort_values(\n    by = \"EFF\",\n    ascending = False\n).head(10)","bc1a09c1":"performance_selected.head()","74e1f9a0":"# Find the correlation of performance\nperformance_corr = performance_selected.corr()","540510dd":"# Plotly Express Heatmap about the player ability\npx.imshow(\n    performance_corr,\n    color_continuous_scale='PuBu',\n    title = \"Correlation about hte\"\n)","581d228e":"print(salary_select.columns)\nprint(performance_selected.columns)","341122a5":"fliter = ['Player','Pos', 'PTS', 'EFF']\n\ncost_eff = pd.merge(\n    salary_select,\n    performance_selected[fliter],\n    on = 'Player'\n)\n\ncost_eff = cost_eff.rename(\n    columns = {\n        'nameTeam':'Team',\n        'value':'Salary'}\n)\n\ncost_eff.sort_values(\n    by = \"EFF\",\n    ascending = False\n)\n\ncost_eff = cost_eff[[\n    'Team','Player','Pos','Salary','EFF','PTS'\n]]\n\ncost_eff.head()","14d9067a":"# Find the cost-effective ratio\ncost_eff['Ratio'] = cost_eff['EFF'] \/ cost_eff['Salary']","eb63d96e":"cost_eff.head()","61ff23ff":"# Sort the value about the Ratio\ncost_eff = cost_eff.sort_values(\n    by = 'Ratio',\n    ascending = False\n)\ncost_eff.head(10)","779e13d5":"tmp = cost_eff.head(10)\n\npx.bar(\n    tmp,\n    x = 'Player',\n    y = 'Ratio',\n    hover_data = ['Pos', 'EFF','Team'],\n    color = 'Salary',\n    height = 400,\n    title = \"Top-10 Cost-Effective Players in NBA 2020-2021\"\n)","cc6a8e80":"from plotly.subplots import make_subplots\n\ntmp = cost_eff.head(10)\n\n# Create figure with secondary y-axis\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n# Add traces\nfig.add_trace(\n    go.Bar(x=tmp['Player'], y=tmp['Salary'], name=\"yaxis data\"),\n    secondary_y=False,\n)\n\nfig.add_trace(\n    go.Bar(x=tmp['Player'], y=tmp['Ratio'], name=\"yaxis2 data\"),\n    secondary_y=True,\n)\n\n# Add figure title\nfig.update_layout(\n    title_text=\"Double Y Axis Example\",\n    barmode = 'group'\n)\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"xaxis title\")\n\n# Set y-axes titles\nfig.update_yaxes(title_text=\"<b>primary<\/b> yaxis title\", secondary_y=False)\nfig.update_yaxes(title_text=\"<b>secondary<\/b> yaxis title\", secondary_y=True)\n\nfig.show()","0cc28f60":"cost_eff.info()","6ec4b34b":"performance.to_csv(\"performance.csv\")","6cced0ee":"path = \"..\/input\/basketball\/basketball.sqlite\"\n\nimport pandas as pd\nimport sqlite3\ncon = sqlite3.connect(path)\ncur = con.cursor()\n    \n# SQL select statement using Pandas\ngame_data = pd.read_sql_query(\"SELECT * FROM game WHERE SEASON_ID=22020\", con)\nprint(\"Pandas dataframe size:\", len(game_data))\nprint(game_data.iloc[5]) # print the first record in the table \"game\" of year 2020","e760774a":"game_data.head(10)","9af6f663":"# Export Game_data to csv\ngame_data.to_csv(\"game_data.csv\")","04074a5a":"# SQL select statement using sqlite3 function (returning a list)\ncur.execute(\"SELECT * FROM game\")\nL=cur.fetchall()\nprint(\"List length:\", len(L))\nprint(L[0]) # print the first record in the table \"game\"","8bd2ba4d":"# Data NBA Play By Play Data By Season (CSV) Season 2020-2021\npath = \"..\/input\/nba-playbyplay-data-20182019\/NBA_PBP_2020-21.csv\"\n\nseason_data = pd.read_csv(path)\nprint(season_data.iloc[0]) ","b0f8c4ef":"season_data.head()","30f1eb9e":"# export data to csv\nseason_data.to_csv(\"season_data.csv\")","14c3b3b6":"# Task 01 Cost-Performance Ratio [Top-3 Players] [40%]\n\n## Description\n1. [40%] Your boss would like to know the top-3 players of the best [cost\u2013performance ratio](https:\/\/en.wikipedia.org\/wiki\/Price%E2%80%93performance_ratio) in 2020\/2021 season, where the cost and the performance can be calculated by  \n\n### I. PERFORMANCE: \n[Efficiency equation](https:\/\/en.wikipedia.org\/wiki\/Efficiency_(basketball)) based on the statistics in the **(3) Kaggle 2020\/2021 season data**.\n      \n### II. COST: \nSalary in table \"Player_Salary\" of **(1) Kaggle basketball dataset**.\n    \n#### Target\nYou are welcome to develop any better eqaution(s) to estimate the CP ratio to rank the top-3 players.","874399f8":"# Final Project - NBA Analysis\n\n### Submissions\n\n1. Every team is required to submit a jupyter notebook.\n2. In the notebook, please answer the questions using the following format.\n\n#### I. Your Findings\n- What's your findings? (by text)\n- If there is any novel idea to get this finding, please write them into the jupyter notebook. \n\n#### II. How to conduct the findings\n- How do you conduct your findings? (by Python program)\n    \n#### III. Supporting Code\n- Your submitted codes are used to **support** your findings. You could use some advanced libraries to complete this project, e.g., Scikit-learn, Keras, TensorFlow, Seaborn, etc.\n- The TAs will tell you the list of packages (and versions) that are allowed to use in this project later.","49fbb93d":"### Find the predescriptive data","93039a28":"## Data we need\nDataset 01 - (1) [Kaggle basketball dataset](https:\/\/www.kaggle.com\/wyattowalsh\/basketball)","7f495466":"### NBA Dataset CSV - \"nba2021_per_game.csv\"\n\nFile [\"nba2021_per_game.csv\"](https:\/\/www.kaggle.com\/umutalpaydn\/nba-20202021-season-player-stats?select=nba2021_per_game.csv)\n    \n#### PERFORMANCE: \n[Efficiency equation](https:\/\/en.wikipedia.org\/wiki\/Efficiency_(basketball)#:~:text=The%20NBA%20publishes%20online%20all%20of%20the%20basic,FG%20%E2%88%92%20Missed%20FT%20-%20TO%29%20%2F%20GP) based on the statistics in the **(3) Kaggle 2020\/2021 season data**.\n\n#### EFF (Efficiency)\nThe NBA publishes online all of the basic statistics recorded officially by the league. Individual player efficiency is expressed there by a stat referred to as 'efficiency' and abbreviated EFF. It is derived by a simple formula:\n\nNBA's efficiency rating:  \n`(PTS + REB + AST + STL + BLK \u2212 ((FGA \u2212 FGM) + (FTA \u2212 FTM) + TO))`\n\n```\nPTS > Points >> PTS\nREB > Rebounds >> TRB\nAST > Assists >> AST\nSTL > Steals >> STL\nBLK > Blocks >> BLK\nFGA > Field golds Attempted >> FGA\nFGM > Field Golds Made >> FG\nFTA > Free Throws Attempted >> FTA\nFTM > Free Throws Made >> FT\nTO > Turnovers >> TOV\n```\n\nThe datasets they provide\n```\neFG% > Effective Field Goal Percentage\n```\n\nThe formula was created by Kansas City sports reporter and statistician Martin Manley.[2]\n    - You could replace this equation if there is any better option.  \n    \n  ","812b4f1c":"## Data we need\nDataset 01 - (1) [Kaggle basketball dataset](https:\/\/www.kaggle.com\/wyattowalsh\/basketball)\n\nDataset 03 - (3) [Kaggle 2020\/2021 season data](https:\/\/www.kaggle.com\/umutalpaydn\/nba-20202021-season-player-stats?select=nba2021_per_game.csv)","682d7fe9":"# Preparation","e30efc06":"### Getting data from DataSet 01 - \"Game\"","62750855":"# Task 03 The Most important player in each team\n3. [20% \/ 30%] **Name the most important player** in each team.\n- You could simply use the result in **Task 1** but you may just get the basic mark (<20%) of this question.\n- If you only use **datasets (1) and (3)** to answer this task, the highest mark is 20%.\n- You could try to analyze the data in the **(2) NBA Basketball Datasets** that provides the most detail actions in every game. You will get (up to) 30% if you successfully run your analysis on this dataset.","70c385b0":"## Main Procedure\n- [ ] Confrim the target and task\n- [ ] Prepare the data we need to analysis","cd2e60a5":"### Import Data - \"game\" Table - Dataset 01","ec8b7105":"Find the performance columnst Stephen Curry\n```python\ntmp = df['namePlayer'] == 'Stephen Curry'\ndf.loc[tmp]\n```","5a992625":"### Import Table - Salary in \"Player_Salary\"\n\n#### COST: \nSalary in table \"Player_Salary\" of **(1) Kaggle basketball dataset**.\n\n**(1) Kaggle basketball dataset**","c07b2e62":"# Task 02 Winning Secret\n2. [40%] Your boss would like to know the **winning secret** from the games in 2020\/2021. \n\nPlease give your finding by carefully anaylzing the data   \nin the table \"game\" of **(1) Kaggle basketball dataset**.\n\nFor instance, you can say that the **winning secret** to win a game is   \nto **score more than your rival** since the **correlation** between the **winning status (1)** and **score more than your rival (1)** is always ONE (strongly correlated).   \n\nHowever, this is definitely a bad idea to tell this **fact** to your boss.\n\n- After a careful analysis, you may find that the [field goal percentage (FG%)](https:\/\/en.wikipedia.org\/wiki\/Field_goal_percentage) (or any other combinations) is the **winning secret**\nsince bilibala bilibala...\n\n#### Main Finding - Field Goal Percentage (FG%)","ca3a25a2":"#### Age\nAbout the age, the average age is 26. The range is 19 to 37.\n\n","230198ee":"Dataset - \"Nba 2020-2021 Season Player Stats\"\n\n\n**(3) Kaggle 2020\/2021 season data**.","96603049":"### Performance","34a2ef7e":"### Merge the table \"salary_select\" and \"performance\"","a2167226":"The current path is"}}