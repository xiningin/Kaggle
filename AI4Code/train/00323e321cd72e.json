{"cell_type":{"abf75af6":"code","01790234":"code","5ef20ea4":"code","2df960d0":"code","89344913":"markdown","b55758d1":"markdown","41b6e4cf":"markdown"},"source":{"abf75af6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01790234":"import matplotlib.pyplot as plt","5ef20ea4":"df = pd.read_csv(\"\/kaggle\/input\/monthly-gold-prices\/1979-2021.csv\")\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df.set_index('Date')\n\n# When data is missing use the first reported data\ndf = df.fillna(method='bfill')\n\n# Scale to have the most recent values all equal (current status quo)\ndf = df.div(df.iloc[-1]) \ndf = df.apply(lambda x: 1\/x)\n\n# Normalize to one each quarter\ndf = df.div(df.sum(axis=1), axis=0)\n\n# For visualizing better the y axis, show the year only at the first month\ndf['YEAR'] = df.index.year\ndf.loc[df.duplicated(['YEAR']), 'YEAR'] = \"\"\n\ndf.tail(10000).plot(kind='barh', x='YEAR',stacked=True, figsize=[15, 20], width=1) # tail() for testing purposes\nplt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5))\nplt.xlim(0,1)\nplt.show()","2df960d0":"# Now plotting it with oldest data normalized\ndf = pd.read_csv(\"\/kaggle\/input\/monthly-gold-prices\/1979-2021.csv\")\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df.set_index('Date')\n\n# When data is missing use the first reported data\ndf = df.fillna(method='bfill')\n\n# Scale to have the oldest values all equal (1979's status quo)\ndf = df.div(df.iloc[0]) # >>> ONLY DIFFERENCE TO PREVIOUS CELL\ndf = df.apply(lambda x: 1\/x)\n\n# Normalize to one each quarter\ndf = df.div(df.sum(axis=1), axis=0)\n\n# For visualizing better the y axis, show the year only at the first month\ndf['YEAR'] = df.index.year\ndf.loc[df.duplicated(['YEAR']), 'YEAR'] = \"\"\n\ndf.tail(10000).plot(kind='barh', x='YEAR',stacked=True, figsize=[15, 20], width=1) # tail() for testing purposes\nplt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5))\nplt.xlim(0,1)\nplt.show()","89344913":"# The strength of currencies\nI'm comparing the gold purchaising power for the different currencies, to see how their relative power evolved in time.","b55758d1":"## Not a nice graph for turkish people, who see their purchaising power gettin smashed every year...","41b6e4cf":"## This second graph helps better to visualize the evolution, without the Turkish lira squeezing all the least recent values\n\n#### Note how the currencies which became stronger are the Japanese and Swiss ones, which are known to be the most deflationary economies in the last decades."}}