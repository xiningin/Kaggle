{"cell_type":{"1871bc80":"code","9758b959":"code","8ef3c7b5":"code","4bfc51d6":"code","f8b34ee9":"code","5a2f4395":"code","936256c6":"code","9edac9dc":"code","6a7cdb72":"code","db2ed95e":"code","561267e3":"code","c6857c77":"code","87e56e54":"code","8cd19e8f":"code","6cbf122b":"code","072520ce":"code","0c80b7df":"code","5f72745e":"code","2212dbe5":"code","f1fe226e":"code","eaf35957":"code","e6efb20e":"code","e3cf0958":"code","e8777aa9":"code","3c0e68ab":"markdown","bdfe4baa":"markdown","16f2acaf":"markdown","101b0eeb":"markdown","eef4482a":"markdown","40879b13":"markdown","ed3b4388":"markdown","a5dc3b64":"markdown","0ccd9854":"markdown","43c52155":"markdown","c9344830":"markdown","331b9d28":"markdown","6fb4fb81":"markdown","9768374d":"markdown","656b831e":"markdown","b3654478":"markdown","87a4b0ca":"markdown"},"source":{"1871bc80":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9758b959":"import matplotlib\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestRegressor as RfReg\nimport xgboost as xgb\nfrom sklearn.linear_model import LinearRegression as LinReg","8ef3c7b5":"train_data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2021\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2021\/test.csv')\nprint(\"train data shape is:\",train_data.shape)\nprint(\"test data shape is:\",test_data.shape)\ntrain_data.head()","4bfc51d6":"train_data = train_data.drop('id',axis = 1)\ntest_data = test_data.drop('id',axis = 1)","f8b34ee9":"def brief_col(data,col):\n    print(\"Name of the column:\",col)\n    print(\"the description of the column is:\")\n    print(\"Number of missing points is:\",data[col].isna().sum())\n    print(data[col].describe())\n    plt.figure(figsize = (10,10))\n    plt.hist(data[col].tolist())\n    plt.title(col)\n    plt.show()","5a2f4395":"for col in train_data.columns:\n    print(\"in training data:\")\n    brief_col(train_data,col)\n    print(\"in test data:\")\n    if col == 'target':\n        continue\n    brief_col(test_data,col)","936256c6":"from sklearn.neighbors import KernelDensity\nfrom scipy.stats import gaussian_kde,norm\nfrom statsmodels.nonparametric.kde import KDEUnivariate\nfrom statsmodels.nonparametric.kernel_density import KDEMultivariate","9edac9dc":"import numpy as np\nfrom sklearn.utils.fixes import parse_version\n\n# `normed` is being deprecated in favor of `density` in histograms\nif parse_version(matplotlib.__version__) >= parse_version('2.1'):\n    density_param = {'density': True}\nelse:\n    density_param = {'normed': True}\n\n# ----------------------------------------------------------------------\n# Plot the progression of histograms to kernels\ndef format_func(x, loc):\n    if x == 0:\n        return '0'\n    elif x == 1:\n        return 'h'\n    elif x == -1:\n        return '-h'\n    else:\n        return '%ih' % x\n\ndef plotstimate(X):    \n    np.random.seed(1)\n    X_plot = np.array(X)[:, np.newaxis]\n    #X_plot = np.linspace(-5, 10, 1000)[:, np.newaxis]\n    bins = np.linspace(-5, 10, 10)\n\n    fig, ax = plt.subplots(1,2, sharex=True, sharey=True)\n    fig.subplots_adjust(hspace=0.05, wspace=0.05)\n\n    # histogram 1\n    #ax[0, 0].hist(X, bins=bins, fc='#AAAAFF', **density_param)\n    #ax[0, 0].text(-3.5, 0.31, \"Histogram\")\n\n    # histogram 2\n    #ax[0, 1].hist(X[:, 0], bins=bins + 0.75, fc='#AAAAFF', **density_param)\n    #ax[0, 1].text(-3.5, 0.31, \"Histogram, bins shifted\")\n\n    # tophat KDE\n    kde = KernelDensity(kernel='tophat', bandwidth=0.75).fit(X_plot)\n    log_dens = kde.score_samples(X_plot)\n    ax[0].hist(np.exp(log_dens),fc = '#AAAAFF')\n    #ax[0].scatter(X_plot[:, 0], np.exp(log_dens), fc='#AAAAFF')\n    ax[0].set_title(\"Tophat Kernel Density\")\n\n    # Gaussian KDE\n    kde = KernelDensity(kernel='gaussian', bandwidth=0.75).fit(X_plot)\n    log_dens = kde.score_samples(X_plot)\n    ax[1].hist(np.exp(log_dens),fc = '#AAAAFF')\n    #ax[1].fill(X_plot[:, 0], np.exp(log_dens), fc='#AAAAFF')\n    ax[1].set_title(\"Gaussian Kernel Density\")","6a7cdb72":"plotstimate(train_data.sample(frac = 0.01)['cont1'])","db2ed95e":"plotstimate(train_data.sample(frac = 0.01)['cont2'])","561267e3":"plotstimate(train_data.sample(frac = 0.01)['cont3'])","c6857c77":"import numpy as np\nfrom sklearn.mixture import GaussianMixture\nX = np.array(train_data[['cont1']])\ngm = GaussianMixture(n_components=2, random_state=0).fit(X)\nprint(gm.means_)\nprint(gm.weights_)\nprint(gm.covariances_)","87e56e54":"bimodal = ['cont1','cont2','cont4','cont11','cont12','cont13','cont14']\nnormal = ['cont3','cont6','cont7','cont9','cont10']\npoisson = ['cont5','cont8']\n#cont10 has a high pick near 0.8 model it as normal only, but put a check if it is 0.8 or near.\n#for poisson check if it near the lowest values which is near 0.3 for both.","8cd19e8f":"for col in bimodal:\n    X = np.array(train_data[[col]])\n    gm = GaussianMixture(n_components=2, random_state=0).fit(X)\n    train_data[col+'_label_low'] = gm.predict(X)\n    train_data[col+'_label_high'] = 1-train_data[col+'_label_low']\n    train_data[col+'_val_low'] = train_data[col]*train_data[col+'_label_low']\n    train_data[col+'_val_high'] = train_data[col]*train_data[col+'_label_high']\n    test_data[col+'_label_low'] = gm.predict(np.array(test_data[col]).reshape(-1,1))\n    test_data[col+'_label_high'] = 1-test_data[col+'_label_low']\n    test_data[col+'_val_low'] = test_data[col]*test_data[col+'_label_low']\n    test_data[col+'_val_high'] = test_data[col]*test_data[col+'_label_high']\ndef is_low_val(x):\n    if x>0.2 and x<=0.3:\n        return 1\n    return 0\ndef is_near_peak(x):\n    if x>0.75 and x<=0.85:\n        return 1\n    return 0\nfor col in poisson:\n    train_data[col+'_lowest_val'] = train_data[col].apply(lambda x: is_low_val(x))\n    test_data[col+'_lowest_val'] = test_data[col].apply(lambda x: is_low_val(x))\ntrain_data['cont10_nearHighPeak'] = train_data['cont10'].apply(lambda x: is_near_peak(x))\ntest_data['cont10_nearHighPeak'] = test_data['cont10'].apply(lambda x: is_near_peak(x))","6cbf122b":"train_data.head()","072520ce":"for col in bimodal:\n    brief_col(train_data,col+'_val_low')\n    brief_col(train_data,col+'_val_high')","0c80b7df":"print(train_data.shape)\nprint(test_data.shape)","5f72745e":"from sklearn.model_selection import train_test_split as tts\nY_train = train_data['target']\nX_train = train_data.drop('target',axis = 1)\nX_trainer,X_train_val,Y_trainer,Y_train_val = tts(X_train,Y_train,test_size = 0.2,\n                                                  shuffle = True)","2212dbe5":"from sklearn.linear_model import LinearRegression as linreg\nlinmodel = linreg(normalize = True,n_jobs = -1)\nlinmodel.fit(X_trainer,Y_trainer)\npred_trainer = linmodel.predict(X_trainer)\nprint(rsc(pred_trainer,Y_trainer))\npred_test = linmodel.predict(X_train_val)\nprint(rsc(pred_test,Y_train_val))","f1fe226e":"from sklearn.ensemble import RandomForestRegressor as rfreg\nfrom sklearn.metrics import r2_score as rsc\nregressor = rfreg(n_estimators = 128,\n                  max_depth = 4,\n                  min_samples_split = 1,\n                  max_features = 'auto',\n                  max_samples = 0.1,\n                  n_jobs = -1)\nregressor.fit(X_trainer,Y_trainer)\npred_train = regressor.predict(X_trainer)\nprint(\"train rmse is:\",rsc(Y_trainer,pred_train))\npred_train_val = regressor.predict(X_train_val)\nprint(\"test rmse is:\",rsc(Y_train_val,pred_train_val))","eaf35957":"!pip install sklearn-contrib-py-earth\nimport pyearth","e6efb20e":"from pyearth import Earth\nmars_model = Earth()\nmars_model.fit(X_trainer,Y_trainer)\npred_train = mars_model.predict(X_trainer)\nprint(\"train rmse is:\",rsc(Y_trainer,pred_train))\npred_train_val = mars_model.predict(X_train_val)\nprint(\"test rmse is:\",rsc(Y_train_val,pred_train_val))","e3cf0958":"import xgboost as xgb\nxg_reg = xgb.XGBRegressor(objective ='reg:linear', \n                          colsample_bytree = 0.3, \n                          learning_rate = 0.3,\n                          max_depth = 2, \n                          alpha = 0, \n                          n_estimators = 100)\nxg_reg.fit(X_trainer,Y_trainer)\npred_trainer = xg_reg.predict(X_trainer)\nprint(rsc(pred_trainer,Y_trainer))\npred_test = xg_reg.predict(X_train_val)\nprint(rsc(pred_test,Y_train_val))","e8777aa9":"submission_file = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2021\/sample_submission.csv')\npred_submission = regressor.predict(test_data)\nsubmission_file['target'] = pred_submission\nsubmission_file.to_csv('third_submission.csv',index = False)","3c0e68ab":"## <a id = 'section1'>Basic data exploration<\/a>:\nIn this section, we will load, check shape and column names of the data. Then we will plot the different columns of both train and test data and make basic insights and observations.","bdfe4baa":"## Tabular Playground competition:\nIn this notebook, I have explored the dataset, plotted and analyzed the features. Then I have created features from multimodal analysis. Finally I have used number of models to train and create the submission file. The model parameters provided are not the optimal ones. But I have provided suggestions on how to reach the parameters in the respective model's starting markdown. Now, the contents of this notebook are:<br\/>\n(1) [Basic data exploration](#section1)<br\/>\n(2) [Multimodal distributions and fitting of training data](#section2)<br\/>\n(3) [Modeling efforts](#section3)<br\/>\nTry forking and optimizing the models and then finally get a good result. If you are using the notebook and like the work, consider showing your appreciation. Also I am open to suggestions for improving the notebook.<br\/>","16f2acaf":"### I have left the fine tuning for the models left. You can tune it on your own and submit.\nTips for optimizing:<br\/>\n(1) increase n_estimators<br\/>\n(2) increase and check max_depth<br\/>\n(3) tune min_samples_split to optimal value, as in check different values<br\/>\n(4) Try increasing max_samples and check when the r_square score becomes better<br\/>","101b0eeb":"This fitting effectively fits the densities therefore, but there is no actionable metric which I can take from it. I will therefore try and fit gaussian mixture models to the distributions to check effectively the different origins of the bimodal variables.<br\/>\nWe will be following gaussian mixture model from[ sklearn's documentation](https:\/\/scikit-learn.org\/stable\/modules\/mixture.html).","eef4482a":"## <a id = 'section2'>Multimodal distributions and fitting of training data<\/a>:\nIn this section, we will go through each of the columns; try and fit the optimal number of modes with them; and fit proper distributions on them to properly model the data.<br\/>\nThe libraries we are using for this are sklearn, scipy and statsmodels. You can read about it more here.<br\/>\nFor multimodal distribution fitting,<br\/>\n(1)[read jakevdp's blog (he is the author of sklearn.kerneldensity)](https:\/\/jakevdp.github.io\/blog\/2013\/12\/01\/kernel-density-estimation\/)<br\/>\n(2)[read stackoverflow](https:\/\/stackoverflow.com\/questions\/6620471\/fitting-empirical-distribution-to-theoretical-ones-with-scipy-python)<br\/>\n(3)[sklearn kde fitting](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.KernelDensity.html#sklearn.neighbors.KernelDensity)<br\/>","40879b13":"Clearly we have got clear separate normal distributions from the bimodal distributions. Now that we are done creating these; let's get to training different models.","ed3b4388":"### <a id = 'rf'>Random Forest Regressor<\/a>\nBigger models are pretty slow: so need to implement the [GPU model](https:\/\/medium.com\/rapids-ai\/accelerating-random-forests-up-to-45x-using-cuml-dfb782a31bea). This will be implemented in later versions of the model.","a5dc3b64":"### <a id='xgb'>Xgboost regressor<\/a>","0ccd9854":"Now, this is a tangible resource. Using this, we will break clearly bimodal distributions into two separate variables based on their predicted labels; and assign their value to respective labelled variables. The other one will be assigned a 0 in that case.<br\/> \nAlso we will add a binary variable denoting high or low from these.<br\/>\nLet's implement it now.","43c52155":"### GMM models","c9344830":"### create submission file","331b9d28":"### <a id= 'mars'>MARS model<\/a>\nRead about it from [machine learning mastery](https:\/\/machinelearningmastery.com\/multivariate-adaptive-regression-splines-mars-in-python\/).","6fb4fb81":"### <a id = 'linear'>Linear model<\/a>","9768374d":"From the above plot these are the following important observations:\n(1) Number of variables are bimodal or multimodal. It is better idea to fit bimodal or multimodal distributions for outlier treatment and better modeling treatment.<br\/>\n(2) The train and test columns look almost similar; but there are significant difference in range and spread in some cases. So before prediction, normalizing the data is needed.<br\/>\n(3) We can get a concise normal distribution on the target dataset. On the prediction output also, we need to check the prediction's distribution so that it falls in similar distribution.<br\/>","656b831e":"##<a id='section3'> Modeling Efforts<\/a>:\nWe have tried out the following methods:<br\/>\n(1) [Linear Model](#linear)<br\/>\n(2) [Random forest regressor](#rf)<br\/>\n(3) [MARS spline regressor](#mars)<br\/>\n(4) [Xgboost regressor](#xgb)<br\/>","b3654478":"Before diving in, we will note what all features are bimodal, normal and all.","87a4b0ca":"Using sklearn kernel density to fit multimodal distribution<br\/>\nThe following example is adapted from [this example by sklearn](https:\/\/scikit-learn.org\/stable\/auto_examples\/neighbors\/plot_kde_1d.html#sphx-glr-auto-examples-neighbors-plot-kde-1d-py)."}}