{"cell_type":{"0ea54f73":"code","acd16313":"code","db57aa77":"code","ba158726":"code","16cdcf1d":"code","f4194d62":"code","43f57bf5":"code","4d98c001":"code","29e16227":"code","ecd75fb9":"code","da7357d1":"code","06a6637e":"code","6e997f1e":"code","4de15982":"code","7f82b332":"code","26f35b7c":"code","b65a0e7a":"code","fcb6281d":"code","135478db":"code","0c55611d":"code","5e6f4027":"code","6d659674":"code","82671474":"code","b817189d":"code","f50cdf57":"code","9e96a712":"code","546d321f":"code","b59fbb46":"code","3b784f32":"code","c60ff8ac":"code","65faef4e":"code","52d58461":"code","1a84984e":"code","3c64632c":"code","cafec5ae":"code","20655de5":"code","323fb61c":"code","86a86150":"code","2f655ce1":"markdown","2b71df58":"markdown","386eba1e":"markdown","bd056570":"markdown","f72519eb":"markdown","8c7fed74":"markdown","29461b16":"markdown","8bbbec99":"markdown","898c463d":"markdown","deb97852":"markdown","882f01f0":"markdown","c1a488ef":"markdown","3de0a7d7":"markdown","8b3e73d0":"markdown","7cc432fe":"markdown","b1c7217f":"markdown","52524647":"markdown","ed8c7908":"markdown"},"source":{"0ea54f73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport difflib\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nfrom PIL import Image\nimport urllib\nimport requests\nfrom matplotlib import pyplot as plt\nimport imageio\nimport textblob\nimport nltk\nimport twython\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","acd16313":"## UTILS\n\nclass color:\n   PURPLE = '\\033[95m'\n   CYAN = '\\033[96m'\n   DARKCYAN = '\\033[36m'\n   BLUE = '\\033[94m'\n   GREEN = '\\033[92m'\n   YELLOW = '\\033[93m'\n   RED = '\\033[91m'\n   BOLD = '\\033[1m'\n   UNDERLINE = '\\033[4m'\n   END = '\\033[0m'","db57aa77":"df = pd.read_csv(\"..\/input\/southparklines\/All-seasons.csv\")","ba158726":"df.head()","16cdcf1d":"df['Season'].unique()\ndf = df[df['Season']!='Season']\ndf['Season'] = [int(season) for season in df['Season']]\ndf['Episode'] = [int(episode) for episode in df['Episode']]\ndf = df.sort_values(by=['Season', 'Episode'], ignore_index=True)","f4194d62":"len(df)","43f57bf5":"df.head()","4d98c001":"sing = df[(df['Season']==7) & (df['Episode']==9)]\n\nsing\n\nfor i in range(len(sing[:8])):\n    print(sing.iloc[i,:]['Character'] + ': ' + sing.iloc[i,:]['Line'] + '\\n')","29e16227":"## UTILS\n\nclass color:\n   UNDERLINE = '\\033[4m'\n   END = '\\033[0m'\n\ndef df_read_episode(season, episode, max_number_of_lines=None):\n    df_script = df[(df['Season']==season) & (df['Episode']==episode)]\n    if max_number_of_lines is None: ## Mejorar eficiencia\n        for i in range(len(df_script)):\n            print(color.UNDERLINE + df_script.iloc[i,:]['Character'] + color.END + ': ' + df_script.iloc[i,:]['Line'] + '\\n')\n    else:\n        for i in range(len(df_script[:max_number_of_lines])):\n            print(color.UNDERLINE + df_script.iloc[i,:]['Character'] + color.END + ': ' + df_script.iloc[i,:]['Line'] + '\\n')\n            \n#Cap\u00edtulo: 'Starvin' Marvin'\ndf_read_episode(season = 1, episode = 8, max_number_of_lines=8)","ecd75fb9":"for i in range(len(df)):\n    line = df.iloc[i,:]\n    if line['Character'] == 'Boys' or line['Character'] == 'Kids':\n        for character in ['Stan','Kyle','Cartman','Kenny']:\n            line['Character'] = character\n            df = df.append(line, ignore_index=True)\n            \ndf = df[df['Character']!='Boys']        \ndf = df[df['Character']!='Kids']       \ndf = df.sort_values(by=['Season', 'Episode'], ignore_index=True)","da7357d1":"## OPTIMIZAR\n\n#for i in range(len(df)):\n#    line = df.iloc[i,:]\n#    line_Line = line['Line']\n#    last_characters = line_Line[-1:]\n#    if last_characters=='\\n':\n#        line['Line'] = line_Line[:-1]\n#        df.iloc[i,:] = line\n       ","06a6637e":"# POR HACER\n\n# Hay 215 filas, algunas dan problemas\n\ndf_commas = [characters for characters in df['Character'] if (',' in characters or '\/' in characters)]\n\ndict_commas_conflictive = {\n    'Celine, Terrance, Bob, Phillip, and people on the field' : 'Celine, Terrance, Bob, Phillip',\n    'Boys 1\/2': 'Stan, Kyle, Kenny, Cartman',\n    'Lola, Jenny, Red, and Wendy' : 'Lola, Jenny, Red, Wendy',\n    'Mike, Michael, and Pete': 'Mike, Michael, Pete',\n    'The Boys (except Cartman) and Dr. Phillips' : 'Stan, Kyle, Kenny, Dr. Phillips'\n}\n\ncommas_conflictive = ['You And Me, Girl', 'The New Lyrics, part II', 'Stuart and wife, and Receptionist',\n                     'Sixth Graders 2\/3','A singer, Goth Kids (singing)']\n\n\nfor character in commas_conflictive:\n    df = df[df['Character']!=character]\n\nfor i in range(len(df)):\n    line = df.iloc[i,:]\n    character = line['Character']\n    if character in df_commas:\n        if character in dict_commas_conflictive.keys():\n            character = dict_commas_conflictive[character]\n            df.iloc[i,:]['Character'] = character\n        if ',' in character:\n            character = character.split(',')\n        elif '\/' in character:\n            character = character.split('\/')\n        elif ' and ' in character:\n            character = character.split(' and ')\n            \n        for character_element in character:\n            line['Character'] = character_element\n            df = df.append(line, ignore_index=True)\n\n\ndf_commas_aux = [character for character in df_commas if character not in commas_conflictive]\n            \nfor character_non_valid in df_commas_aux:\n    df = df[df['Character']!=character_non_valid]\n    \ndf = df.sort_values(by=['Season', 'Episode'], ignore_index=True)","6e997f1e":"#for character in df['Character'].unique():\n#    ratio = difflib.SequenceMatcher(None, 'Cartman', character).ratio()\n#    if ratio>0.6:\n#        print(character + ': ' + str(ratio))","4de15982":"for character in df['Character'].unique()[:50]:\n    len_character = len(df[df['Character']==character])\n    if len_character <= 10:\n        print(character)\n        \n## Por cuestiones de compilaci\u00f3n, el c\u00f3digo ahora mismo solo muestran los personajes con menos\n## de diez l\u00edneas entre los cincuenta primeros, en orden de aparici\u00f3n. Se cambiar\u00e1.","7f82b332":"df['Line'] = [a.lower() for a in df['Line']]","26f35b7c":"def generate_wordcloud(words, mask, colors):\n    #word_cloud = WordCloud(width = 1600, height = 1600, background_color= None, mode='RGBA',color_func = colors, max_font_size= 400, stopwords=STOPWORDS, mask=mask).generate(words)\n    word_cloud = WordCloud(width = 1600, height = 1600, background_color= None, mode='RGBA',color_func = colors, max_font_size= 400, stopwords=STOPWORDS, mask=mask).generate(words)\n    word_cloud.generate(words)\n\n    plt.figure(figsize = (11, 11))\n    plt.imshow(word_cloud)\n    plt.axis('off')","b65a0e7a":"text_cartman = ''\n\ndf_cartman = df[df['Character']=='Cartman']\n\nfor i in range(len(df_cartman)):\n    line = df_cartman.iloc[i,:]\n    text_cartman += ' ' + line['Line'] + ' '\n    \ntext_cartman = text_cartman.replace('\\n', ' ')\n\n#mask_cartman = np.array(Image.open('..\/input\/pictures\/cartman.png'))\nmask_cartman = imageio.imread('..\/input\/pictures\/cartman.png', pilmode='RGB')\ncolors_cartman = ImageColorGenerator(mask_cartman)\n\n\n#INFO: https:\/\/amueller.github.io\/word_cloud\/generated\/wordcloud.WordCloud.html\n#RECURSOS IM\u00c1GENES: https:\/\/www.freepng.es\/","fcb6281d":"#print(text_cartman[:100])\n\ngenerate_wordcloud(text_cartman, mask_cartman,colors_cartman) # Arreglar\n\n## HAY QUE MEJORARLO, USAREMOS:  https:\/\/www.datacamp.com\/community\/tutorials\/wordcloud-python","135478db":"text_stan = ''\n\ndf_stan = df[df['Character']=='Stan']\n\nfor i in range(len(df_stan)):\n    line = df_stan.iloc[i,:]\n    text_stan += ' ' + line['Line'] + ' '\n    \ntext_stan = text_stan.replace('\\n', ' ')\n\n#mask_stan = np.array(Image.open('..\/input\/pictures\/stan.png'))\nmask_stan = imageio.imread('..\/input\/pictures\/stan.png', pilmode='RGB')\ncolors_stan = ImageColorGenerator(mask_stan)","0c55611d":"generate_wordcloud(text_stan, mask_stan, colors_stan)","5e6f4027":"text_kenny = ''\n\ndf_kenny = df[df['Character']=='Kenny']\n\nfor i in range(len(df_kenny)):\n    line = df_kenny.iloc[i,:]\n    text_kenny += ' ' + line['Line'] + ' '\n    \ntext_kenny = text_kenny.replace('\\n', ' ')\n\nmask_kenny = np.array(Image.open('..\/input\/pictures\/kenny.png'))\ncolors_kenny = ImageColorGenerator(mask_kenny)","6d659674":"generate_wordcloud(text_kenny, mask_kenny, colors_kenny) # Arreglar","82671474":"#Falta limpiar par\u00e9ntesis\n\ntext_kyle = ''\n\ndf_kyle = df[df['Character']=='Kyle']\n\nfor i in range(len(df_kyle)):\n    line = df_kyle.iloc[i,:]\n    text_kyle += ' ' + line['Line'] + ' '\n    \ntext_kyle = text_kyle.replace('\\n', ' ')\n\nmask_kyle = imageio.imread('..\/input\/pictures\/kyle.png', pilmode='RGB')\ncolors_kyle = ImageColorGenerator(mask_kyle)","b817189d":"generate_wordcloud(text_kyle, mask_kyle, colors_kyle)","f50cdf57":"text_towelie = ''\n\ndf_towelie = df[df['Character']=='Towelie']\n\nfor i in range(len(df_towelie)):\n    line = df_towelie.iloc[i,:]\n    text_towelie += ' ' + line['Line'] + ' '\n    \ntext_towelie = text_towelie.replace('\\n', ' ')\n\nmask_towelie = np.array(Image.open('..\/input\/pictures\/towelie.png'))\ncolors_towelie = ImageColorGenerator(mask_towelie)","9e96a712":"generate_wordcloud(text_towelie, mask_towelie, colors_towelie)","546d321f":"text_butters = ''\n\ndf_butters = df[df['Character']=='Butters']\n\nfor i in range(len(df_butters)):\n    line = df_butters.iloc[i,:]\n    text_butters += ' ' + line['Line'] + ' '\n    \ntext_butters = text_butters.replace('\\n', ' ')\n\nmask_butters = np.array(Image.open('..\/input\/pictures\/butters.png'))\ncolors_butters = ImageColorGenerator(mask_butters)","b59fbb46":"generate_wordcloud(text_butters, mask_butters, colors_butters)","3b784f32":"allseasons = df['Season'].unique()\ncharacters_in_all_seasons = df['Character'].unique()\n# Ya tenemos todos los personajes y todas las temporadas.\nprint(\"Total number of unique characters: {}\".format(len(characters_in_all_seasons)))\n# Comparamos ahora para cada temporada, dentro de la columna 'Season' del df, aquellos que se encuentren en la lista que hemos creado\n# con los personajes. Estamos buscando caract\u00e9res dentro de una lista que hemos creado y que tiene formato string.","c60ff8ac":"for season in allseasons:\n    character = df[df['Season'] == season].Character.unique()\n    characters_in_all_seasons = [name for name in characters_in_all_seasons if name in character]\nprint(\"Number of characters who appear in all 18 seasons: {}\".format(len(characters_in_all_seasons)))\nprint(characters_in_all_seasons)","65faef4e":"from nltk.sentiment.vader import SentimentIntensityAnalyzer\nvader = SentimentIntensityAnalyzer()\n\n# https:\/\/www.nltk.org\/api\/nltk.sentiment.html","52d58461":"print('Cartman: ' + str(vader.polarity_scores(text_cartman)))\nprint('Kyle: ' + str(vader.polarity_scores(text_kyle)))\nprint('Stan: ' + str(vader.polarity_scores(text_stan)))\nprint('Kenny: ' + ('Polarity:' +str(vader.polarity_scores(text_kenny))+','+'Polarity:' +str(vader.polarity_scores(text_kenny))+','+'Polarity:' +str(vader.polarity_scores(text_kenny)))","1a84984e":"print(TextBlob(text_cartman).sentiment)\nprint(TextBlob(text_kyle).sentiment)\nprint(TextBlob(text_stan).sentiment)\nprint(TextBlob(text_kenny).sentiment)","3c64632c":"episode1 = df[(df['Season']==1) & (df['Episode']==1)]","cafec5ae":"text_episode1 = ''\n\nfor line in episode1['Line']:\n    text_episode1 += ' ' + line","20655de5":"print('Episode 1: ' + str(vader.polarity_scores(text_episode1)))\n\nprint('Episode 1: ' + str(TextBlob(text_episode1).sentiment))","323fb61c":"for line in df['Line']:    \n    words = line.split(' ')\n    for word in words:\n        ratio = difflib.SequenceMatcher(None, 'fuck', word).ratio()\n        if ratio>0.7:\n            print(word + ': ' + str(ratio))","86a86150":"#from nltk.sentiment.vader import VaderConstants\n\n\n#from nltk.sentiment.vader import SentimentIntensityAnalyzer\n#vader = SentimentIntensityAnalyzer()\n\n\n\n","2f655ce1":" **OBJETIVOS**\n 1. Sacar nubes de palabras por personaje (a ser posible con la forma de cada personaje)\n 2. Estudiar qu\u00e9 personaje dice m\u00e1s una palabra espec\u00edfica (jew, fuck, etc.) o frases caracter\u00edsticas (you're breaking my balls, mooom...)\n 3. An\u00e1lisis de sentimientos por personaje, por temporada\n 4. Comparar vocabulario usado con puntuaci\u00f3n en IMDB (\u00bfinfluye?)\n 5. Analizar c\u00f3mo var\u00eda la participaci\u00f3n de personajes de distinta etnia o g\u00e9nero a lo largo de la serie\n 6. Ver c\u00f3mo fluct\u00faa la participaci\u00f3n de cada personaje en cada temporada de la serie","2b71df58":"# **1. Limpiamos la columna de personajes**","386eba1e":"Vamos a hacer una funci\u00f3n que nos de el guion de un cap\u00edtulo en particular, para poder leerlo y dar respuesta a estas preguntas.","bd056570":"# 3. Ver qu\u00e9 personajes aparecen en todas las temporadas","f72519eb":"Generamos una nube de palabras con las palabras m\u00e1s dichas por los personajes principales a lo largo de toda la serie","8c7fed74":"# 1.1. Personajes grupales\n\nSe consideran como personajes *Boys y Kids*. Entendiendo que se refieren a los cuatro chicos protagonistas, sustituimos cada l\u00ednea con ese *Character* asociado por cuatro l\u00edneas, una para cada uno de los chicos.","29461b16":"## 2. Generamos Word Clouds","8bbbec99":"#  1.2. Quitamos el car\u00e1cter '\\n' del final de las l\u00edneas\n \n NOTA: Hay varias l\u00edneas que tienen '...' como reducci\u00f3n de texto. Parece que no son muchas.. A mejorar en futuro.\n\n","898c463d":"# Comprobamos distintas hip\u00f3tesis\n1. ** \u00bfLas canciones cuentan como di\u00e1logo?**","deb97852":"\u00a1Parece que s\u00ed cuenta las canciones!","882f01f0":"# 1.5. Personajes con menos de diez l\u00edneas de di\u00e1logo\n# \nIdentificamos los personajes con menos de diez l\u00edneas de di\u00e1logo, puesto que puede haber cuestiones dentro del an\u00e1lisis para las que no nos interese considerarlos.","c1a488ef":"Sabemos que el cap\u00edtulo 7x09 ***Christian Rock Hard*** Cartman tiene un grupo de rock cristiano. \u00bfAparecer\u00e1n las canciones como di\u00e1logo?","3de0a7d7":"# EN PROCESO","8b3e73d0":"#  1.4. Personajes con varios nombres asociados \n\nHay personajes que aparecen con distinto nombre a lo largo de la serie, ya sea por errata, cambio de may\u00fasculas, min\u00fasculas, puntos, etc. Quitamos todas las versiones posible de cada personaje.","7cc432fe":"# 4. An\u00e1lisis de sentimientos","b1c7217f":"# 1.3. Varios personajes hablan a la vez \n \nSi hay varios personajes que dicen lo mismo al mismo tiempo, los separa por comas, guiones o por un 'and'. Haremos una l\u00ednea para cada personaje involucrado.\n","52524647":"**Ordenamos las l\u00edneas de di\u00e1logo por la temporada y por el cap\u00edtulo** \n\n*Antes quitamos las l\u00edneas de 'marcaje' (las que separan las temporadas)*","ed8c7908":"2. *\u00bfSe cuentan las frases de Jimmy como di\u00e1logo? \u00bfStarvin' Marvin aparece como personaje? \u00bfSalen los balbuceos de Timmy? etc.*"}}