{"cell_type":{"1de4b0ca":"code","d3991c35":"code","3b6fee3a":"code","c5bc02a6":"code","c9c388c1":"code","e44304f2":"code","ee3d4d27":"code","b8175ad3":"code","93bba1c3":"code","cf79cf09":"code","4cff99af":"code","5da95d76":"code","abfa8dad":"code","f4ceeeff":"code","036284ac":"code","d05ab7c8":"code","a4672e43":"code","dcfe206f":"code","aa556104":"code","6fb7153c":"code","00c5f9b4":"code","1685ae55":"code","613198b2":"code","393fcec7":"code","7549a652":"code","c3b4d722":"code","c577557b":"code","2abbef77":"code","06665fa4":"code","5bb5a91a":"code","ba37fc94":"code","9f66dc7a":"code","f4752c80":"code","339d41ef":"code","aa006042":"code","7571bf6d":"code","02e2b004":"code","801fb36b":"code","5fe4b820":"code","4ec5beaf":"code","7b869845":"code","14fe29dd":"code","d102e9ae":"code","ab9fc368":"code","da093238":"code","98775689":"code","70478d52":"code","0745d4e4":"code","1b0d7160":"code","19eeb92e":"code","517be1a9":"code","0bfb9a65":"code","9a12edf5":"code","79d4b753":"code","e4d78027":"code","fd8b7141":"code","b116a38f":"code","dd5919a0":"code","e3bf3b78":"code","4ca061ae":"code","543aa734":"code","68adc9d5":"code","d4f8ebc3":"code","64d9ce62":"code","fffad7e7":"code","54df61c2":"code","91354e8e":"code","3dce95ec":"code","b87a47d1":"code","a5543ec4":"code","1f9c5116":"code","6f8b6910":"code","a301e9da":"code","c53385ef":"code","0afe8b1b":"code","c19a0b55":"code","64242138":"code","3112eda5":"code","5950054e":"code","47c58dd6":"code","4230388a":"code","301d5277":"code","6f296a6e":"code","197a0032":"code","a86e2ca9":"markdown","18d223d5":"markdown","4c01de51":"markdown","e1eb9aea":"markdown","932e6dd1":"markdown","d5832c1e":"markdown","4473ac6c":"markdown","0eddacf9":"markdown","26ca05ee":"markdown","4e38eb70":"markdown","335fae95":"markdown","cc58575c":"markdown","9867750c":"markdown","91a8a095":"markdown","5f898511":"markdown","bb1c3613":"markdown","6f458168":"markdown","7025751a":"markdown","ca5c9ffe":"markdown","18b2d9f6":"markdown","677d69d0":"markdown","1caec413":"markdown","a1adc74a":"markdown","1ca0c2f9":"markdown","11b76da6":"markdown","035189cb":"markdown","869de0c7":"markdown","85d2adeb":"markdown","e41fcace":"markdown","be983608":"markdown","88f9c385":"markdown","df535e9f":"markdown","c5b2d2b6":"markdown","1147c8e5":"markdown","25413779":"markdown","d36b620a":"markdown","db4192c1":"markdown","70c4eadb":"markdown","b3db27d4":"markdown","f870dd38":"markdown","30aeda0a":"markdown","ff385964":"markdown","08320e01":"markdown","cb92dc05":"markdown","11035d73":"markdown","a5856678":"markdown","62bc3a66":"markdown","7286f362":"markdown","1b90cdf8":"markdown","b849d45e":"markdown","4fa0e295":"markdown","478d6cd9":"markdown","5e84d9ee":"markdown","7e0b734b":"markdown","6b45ced9":"markdown","7aee17e3":"markdown","ddf8ba87":"markdown","ebb18de0":"markdown","c4a736a6":"markdown","f4baf67b":"markdown","87ea6534":"markdown","1e87a4db":"markdown"},"source":{"1de4b0ca":"# import modules\nimport math\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport numpy as np\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\n\nfrom pandas.testing import assert_frame_equal\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\nfrom xgboost import plot_importance\nimport matplotlib.pyplot as plt\nfrom matplotlib.pylab import rcParams\n\n# set column and row display\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\nimport warnings\nwarnings.filterwarnings('ignore')","d3991c35":"# load original dataset as dataframe\ndf_original = pd.read_csv('..\/input\/17k-apple-app-store-strategy-games\/appstore_games.csv')\n\n# make a working copy of the dataframe\ndf = df_original.copy()\n\n# generate a table of those culprit rows which are duplicated\ndups = df.groupby(df.columns.tolist()).size().reset_index().rename(columns={0:'count'})\n\n# sum the final col of that table, and subtract the number of culprits\ndups['count'].sum() - dups.shape[0]\n\n","3b6fee3a":"# drop duplicates\ndf = df.drop_duplicates()\n\ndf.head()","c5bc02a6":"#get dataframe shape\nshape = df.shape\nprint('\\nDataFrame Shape :', shape)\nprint('\\nNumber of rows :', shape[0])\nprint('\\nNumber of columns :', shape[1])","c9c388c1":"df.dtypes","e44304f2":"# select preferred columns\ndf = df.loc[:,['ID', 'Name', 'Average User Rating', 'User Rating Count', 'Price', 'In-app Purchases', 'Description', 'Age Rating', 'Languages', 'Size']]\n\n#rename columns\ndf.rename(columns = {'Average User Rating':'User_Rating_Avg','User Rating Count': 'User_Rating_Count', 'In-app Purchases':'In_App_Purchases', 'Age Rating': 'Age_Rating'}, inplace = True) ","ee3d4d27":"df.isnull().sum()","b8175ad3":"# calculate rating value count\nrating_count = df['User_Rating_Avg'].value_counts()\n\nrating_count","93bba1c3":"# change float format into more readable format\npd.options.display.float_format = '{:,.2f}'.format\n\n# calculate rating value count\ndf['User_Rating_Count'].describe()","cf79cf09":"df_nan_rating = df[df['User_Rating_Avg'].isnull()]\n\ndf_nan_rating.head(10)","4cff99af":"df = df[df[\"User_Rating_Avg\"].notnull()]","5da95d76":"#get dataframe shape\nshape = df.shape\nprint('\\nDataFrame Shape :', shape)\nprint('\\nNumber of rows :', shape[0])\nprint('\\nNumber of columns :', shape[1])","abfa8dad":"# convert columns to integers\ndf = df.astype({'User_Rating_Count': 'int64', 'Size': 'int64'})","f4ceeeff":"df_40 = df[df['User_Rating_Avg'] >= 4.0]\n\n# show median\nurc_median = df_40['User_Rating_Count'].median()\nprint('\\nUser_Rating_Count median :', urc_median)","036284ac":"#get dataframe shape\nshape = df_40.shape\nprint('\\nDataFrame Shape :', shape)\nprint('\\nNumber of rows :', shape[0])\nprint('\\nNumber of columns :', shape[1])","d05ab7c8":"df_top = df_40.copy()\n\ndf_top.head(10)","a4672e43":"# check unique age groups\ndf_top['Age_Rating'].unique()","dcfe206f":"# calculate age value count\nage_count = df_top['Age_Rating'].value_counts()\n\nage_count","aa556104":"# calculate age value count percentage\nage_perc = df_top['Age_Rating'].value_counts(normalize=True) * 100\n\nage_perc","6fb7153c":"# replace characters\ndf_top.Age_Rating = df_top.Age_Rating.str.replace('+', '')\n\n# convert oolumn datatype to integer\ndf_top['Age_Rating'] = df_top['Age_Rating'].astype(np.int64,errors='ignore') \n\n# check datatypes\ndf_top.dtypes","00c5f9b4":"# check unique prices\ndf_top['Price'].unique()","1685ae55":"# calculate price count\nprice_count = df_top['Price'].value_counts()\n\nprice_count","613198b2":"# calculate price value count percentage\nprice_perc = df_top['Price'].value_counts(normalize=True) * 100\n\nprice_perc","393fcec7":"df_top_price = df_top[df_top['Price'] == 139.99]\n\ndf_top_price.head()","7549a652":"df_top = df_top[df_top.ID != 706398884]\n\n#get dataframe shape\nshape = df_top.shape\nprint('\\nDataFrame Shape :', shape)\nprint('\\nNumber of rows :', shape[0])\nprint('\\nNumber of columns :', shape[1])","c3b4d722":"df_top_free = df_top[df_top['Price'] == 0.00]","c577557b":"#get dataframe shape\nshape = df_top_free.shape\nprint('\\nDataFrame Shape :', shape)\nprint('\\nNumber of rows :', shape[0])\nprint('\\nNumber of columns :', shape[1])","2abbef77":"df_top_free = df_top_free[df_top_free['In_App_Purchases'].isnull()]","06665fa4":"#get dataframe shape\nshape = df_top_free.shape\nprint('\\nDataFrame Shape :', shape)\nprint('\\nNumber of rows :', shape[0])\nprint('\\nNumber of columns :', shape[1])","5bb5a91a":"# calculate language value count percentagea\nlanguage_perc = df_top['Languages'].value_counts(normalize=True) * 100\n\n# uncomment the line below to see the list\n#language_perc","ba37fc94":"df_top_45 = df_top[df_top['User_Rating_Avg'] >= 4.5]\n\n# calculate language value count percentagea\nlanguage_perc_45 = df_top_45['Languages'].value_counts(normalize=True) * 100\n\n# uncomment the line below to see the list\n#language_perc_45","9f66dc7a":"# calculate price value count percentage\nratecount_perc = df_top['User_Rating_Avg'].value_counts(normalize=True) * 100\n\nratecount_perc","f4752c80":"df_top['Size_Mb'] = (0.000001 * df_top['Size']) \n\n# convert oolumn datatype to integer\ndf_top['Size_Mb'] = df_top['Size_Mb'].astype(np.int64,errors='ignore') ","339d41ef":"df_top.head(10)","aa006042":"# show median\nfilesize_median = df_top['Size_Mb'].median()\nprint('\\nFile size median :', filesize_median)\n\nfilesize_mean = df_top['Size_Mb'].mean()\nprint('\\nFile size mean :', filesize_mean)","7571bf6d":"df_top[\"Size_Mb\"].describe()","02e2b004":"bins = [0, 25, 50, 75, 100, 150, 300, 600, 900, 2000, 4005]\nlabels = [1,2,3,4,5,6,7,8,9,10]\n\ndf_top['Size_Bin'] = pd.cut(df_top['Size_Mb'], bins, labels=labels)\n\ndf_top.head(10)","801fb36b":"# calculate language value count percentagea\nsize_bin_perc = df_top['Size_Bin'].value_counts(normalize=True) * 100\n\nsize_bin_perc","5fe4b820":"# change float format into more readable format\npd.options.display.float_format = '{:,.2f}'.format\n\ndf_top[\"User_Rating_Count\"].describe()","4ec5beaf":"df_top_review = df_top.copy()\ndf_top_review = df_top_review.sort_values(by = 'User_Rating_Count', ascending = False) \n\ndf_top_review.head()","7b869845":"bins = [5, 100, 150, 200, 300, 500, 1000, 3000, 6000, 15000, 3032734]\nlabels = [1,2,3,4,5,6,7,8,9,10]\n\ndf_top['Rating_Count_Bin'] = pd.cut(df_top['User_Rating_Count'], bins, labels=labels)\n\ndf_top.head(10)","14fe29dd":"df_top['In_App_Purchases'] = df_top['In_App_Purchases'].fillna(0)\ndf_top.loc[df_top['In_App_Purchases'] != 0, 'In_App_Purchases'] = 1\n\n# convert oolumn datatype to integer\ndf_top['In_App_Purchases'] = df_top['In_App_Purchases'].astype(np.int64,errors='ignore') ","d102e9ae":"# change values\ndf_top['Languages'] = df_top['Languages'].str.replace('EN', '0')\ndf_top.loc[df_top['Languages'] != \"0\", 'Languages'] = \"1\"\n\n# convert oolumn datatype to integer\ndf_top['Languages'] = df_top['Languages'].astype(np.int64,errors='ignore') \n\n#rename column\ndf_top.rename(columns = {'Languages':'Language_Option'}, inplace = True) \n\n# reset index \ndf_top.reset_index(inplace = True) \n\n# select and drop original columns relevant to task at hand\ncols = ['index']\ndf_top = df_top.drop(cols, axis=1)","ab9fc368":"df_top.head(10)","da093238":"#get dataframe shape\nshape = df_top.shape\nprint('\\nDataFrame Shape :', shape)\nprint('\\nNumber of rows :', shape[0])\nprint('\\nNumber of columns :', shape[1])","98775689":"df_bottom = df[df['User_Rating_Avg'] < 4.0]","70478d52":"#get dataframe shape\nshape = df_bottom.shape\nprint('\\nDataFrame Shape :', shape)\nprint('\\nNumber of rows :', shape[0])\nprint('\\nNumber of columns :', shape[1])","0745d4e4":"# calculate age value count\nage_count = df_bottom['Age_Rating'].value_counts()\n\nage_count","1b0d7160":"# calculate age value count percentage\nage_perc = df_bottom['Age_Rating'].value_counts(normalize=True) * 100\n\nage_perc","19eeb92e":"# replace characters\ndf_bottom.Age_Rating = df_bottom.Age_Rating.str.replace('+', '')\n\n# convert oolumn datatype to integer\ndf_bottom['Age_Rating'] = df_bottom['Age_Rating'].astype(np.int64,errors='ignore') \n\n# check datatypes\ndf_bottom.dtypes","517be1a9":"# check unique prices\ndf_bottom['Price'].unique()","0bfb9a65":"# calculate price count\nprice_count = df_bottom['Price'].value_counts()\n\nprice_count","9a12edf5":"# calculate price value count percentage\nprice_perc = df_bottom['Price'].value_counts(normalize=True) * 100\n\nprice_perc","79d4b753":"df_bottom['Size_Mb'] = (0.000001 * df_bottom['Size']) \n\n# convert oolumn datatype to integer\ndf_bottom['Size_Mb'] = df_bottom['Size_Mb'].astype(np.int64,errors='ignore') ","e4d78027":"df_bottom.head(10)","fd8b7141":"size_zero = df_bottom.loc[df_bottom['Size_Mb'] == 0]\n\nsize_zero","b116a38f":"# change value\ndf_bottom.loc[df_bottom.Size_Mb == 0, 'Size_Mb'] = 1","dd5919a0":"# show median\nfilesize_median = df_bottom['Size_Mb'].median()\nprint('\\nFile size median :', filesize_median)\n\nfilesize_mean = df_bottom['Size_Mb'].mean()\nprint('\\nFile size mean :', filesize_mean)","e3bf3b78":"df_bottom[\"Size_Mb\"].describe()","4ca061ae":"bins = [0, 25, 50, 75, 100, 150, 300, 600, 900, 2000, 3716]\nlabels = [1,2,3,4,5,6,7,8,9,10]\n\ndf_bottom['Size_Bin'] = pd.cut(df_bottom['Size_Mb'], bins, labels=labels)\n\ndf_bottom.head(10)","543aa734":"# calculate language value count percentagea\nsize_bin_perc = df_bottom['Size_Bin'].value_counts(normalize=True) * 100\n\nsize_bin_perc","68adc9d5":"df_bottom[\"User_Rating_Count\"].describe()","d4f8ebc3":"bins = [5, 100, 150, 200, 300, 500, 1000, 3000, 6000, 15000, 439776]\nlabels = [1,2,3,4,5,6,7,8,9,10]\n\ndf_bottom['Rating_Count_Bin'] = pd.cut(df_bottom['User_Rating_Count'], bins, labels=labels)\n\ndf_bottom.head(10)","64d9ce62":"df_bottom['In_App_Purchases'] = df_bottom['In_App_Purchases'].fillna(0)\ndf_bottom.loc[df_bottom['In_App_Purchases'] != 0, 'In_App_Purchases'] = 1\n\ndf_bottom['In_App_Purchases'] = df_bottom['In_App_Purchases'].astype(np.int64,errors='ignore') ","fffad7e7":"df_bottom['Languages'] = df_bottom['Languages'].str.replace('EN', '0')\ndf_bottom.loc[df_bottom['Languages'] != \"0\", 'Languages'] = \"1\"\n\ndf_bottom['Languages'] = df_bottom['Languages'].astype(np.int64,errors='ignore') \n\ndf_bottom.rename(columns = {'Languages':'Language_Option'}, inplace = True) \n\ndf_bottom.reset_index(inplace = True) \n\ncols = ['index']\ndf_bottom = df_bottom.drop(cols, axis=1)\n\ndf_bottom = df_bottom.drop_duplicates()","54df61c2":"df_bottom.head(10)","91354e8e":"#get dataframe shape\nshape = df_bottom.shape\nprint('\\nDataFrame Shape :', shape)\nprint('\\nNumber of rows :', shape[0])\nprint('\\nNumber of columns :', shape[1])","3dce95ec":"df_games = pd.concat([df_top, df_bottom], axis=0) ","b87a47d1":"#get dataframe shape\nshape = df_games.shape\nprint('\\nDataFrame Shape :', shape)\nprint('\\nNumber of rows :', shape[0])\nprint('\\nNumber of columns :', shape[1])","a5543ec4":"df_games.head(10)","1f9c5116":"df_games['IsTopGame'] = df_games['User_Rating_Avg'].apply(lambda p:1 if p >= 4.0 else 0)\n\ngame_count = df_games['IsTopGame'].value_counts()\n\ngame_count","6f8b6910":"df_games.head(10)","a301e9da":"# set plot size etc.\nsns.set(rc={'figure.figsize':(16.7,8.27)})\nsns.set(font='sans-serif', palette='colorblind')\n\n# set plot parameters\nplot = sns.countplot(x = 'Rating_Count_Bin',\n              data = df_games,\n              hue = 'IsTopGame',      \n              order = df_games['Rating_Count_Bin'].value_counts().index)\n\n# set plot title etc.\nplot.axes.set_title(\"Binned rating count and rating average\",fontsize=20)\nplot.set_xlabel(\"Rating Count Bin (1-10)\",fontsize=18)\nplot.set_ylabel(\"Number of ratings\",fontsize=18)\nplot.tick_params(labelsize=14)\nplot.legend (loc=1, fontsize = 16, fancybox=True, framealpha=1, shadow=True, borderpad=1, title = '0 = rating 3,5- .... 1 = rating 4.0+')\n\n# show plot\nplt.show()","c53385ef":"#### set plot size etc.\nsns.set(rc={'figure.figsize':(10.7,8.27)})\nsns.set(font='sans-serif', palette='colorblind')\n\n# set plot parameters\nplot = sns.countplot(x = 'In_App_Purchases',\n              data = df_games,\n              hue = 'IsTopGame',      \n              order = df_games['In_App_Purchases'].value_counts().index)\n\n# set plot title etc.\nplot.axes.set_title(\"In-app purchases and rating count\",fontsize=20)\nplot.set_xlabel(\"In-app purchases (0 = no, 1 = yes)\",fontsize=18)\nplot.set_ylabel(\"Number of ratings\",fontsize=18)\nplot.tick_params(labelsize=14)\nplot.legend (loc=1, fontsize = 16, fancybox=True, framealpha=1, shadow=True, borderpad=1, title = '0 = rating 3,5- .... 1 = rating 4.0+')\n\n# show plot\nplt.show()","0afe8b1b":"# set plot size etc.\nsns.set(rc={'figure.figsize':(12.7,10.27)})\nsns.set(font='sans-serif', palette='colorblind')\n\n# set plot parameters\nplot = sns.countplot(y = 'Price',\n              data = df_games,\n            hue = 'IsTopGame',       \n              order = df_games['Price'].value_counts().index)\n\n# set plot title etc.\nplot.axes.set_title(\"Price and number of ratings\",fontsize=18)\nplot.set_xlabel(\"Individual ratings\",fontsize=18)\nplot.set_ylabel(\"Price\",fontsize=16)\nplot.tick_params(labelsize=14)\nplot.legend (loc=4, fontsize = 16, fancybox=True, framealpha=1, shadow=True, borderpad=1, title = '0 = rating 3,5- .... 1 = rating 4.0+')\n\n# show plot\nplt.show()","c19a0b55":"# set plot size etc.\nsns.set(rc={'figure.figsize':(16.7,8.27)})\nsns.set(font='sans-serif', palette='colorblind')\n\n# set plot parameters\nplot = sns.countplot(x = 'Size_Bin',\n              data = df_games,\n              hue = 'IsTopGame',      \n              order = df_games['Size_Bin'].value_counts().index)\n\n# set plot title etc.\nplot.axes.set_title(\"Binned game size and rating average\",fontsize=20)\nplot.set_xlabel(\"Binned game size (1-10)\",fontsize=18)\nplot.set_ylabel(\"Number of ratings\",fontsize=18)\nplot.tick_params(labelsize=14)\nplot.legend (loc=1, fontsize = 16, fancybox=True, framealpha=1, shadow=True, borderpad=1, title = '0 = rating 3,5- .... 1 = rating 4.0+')\n\n# show plot\nplt.show()","64242138":"df_model = df_games.loc[:,['User_Rating_Count', 'Price', 'In_App_Purchases', 'Age_Rating', 'Language_Option', 'Size', 'Size_Bin', 'Rating_Count_Bin', 'IsTopGame']]\n\ndf_model.head(10)","3112eda5":"# check datatypes\ndf_model.dtypes","5950054e":"df_model_dummies = pd.get_dummies(df_model, columns=[\"Size_Bin\", \"Rating_Count_Bin\"], prefix=[\"Size\", \"Rating\"])","47c58dd6":"df_model_dummies.head(10)","4230388a":"X, y = df_model_dummies.loc[:, df_model_dummies.columns != 'IsTopGame'], df_model_dummies['IsTopGame']\n\nseed = 7\ntest_size = 0.1\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=seed)","301d5277":"model = XGBClassifier(learning_rate = 0.1, n_estimators=100, max_depth=5)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\npredictions = [round(value) for value in y_pred]\n\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","6f296a6e":"rcParams['figure.figsize'] = 12, 8\n\nplot_importance(model)\nplt.show()","197a0032":"print(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) ","a86e2ca9":"As noted, there are numerous factors affecting top-rated games existing outside of the scope of a data analysis. Nevertheless, as an experiment, next we will try to create a simple machine learning model based on our dataset.","18d223d5":"The largest rating count - consisting of half of reviews - in top-rated games has a 4.5 average rating with 4.0 as distant second. Conversely, rating 5.0 does not have the largest count of reviews among top-rated games. This is as such understandable, since the values we have are by default averages counted by using 5 or more individual ratings. In the same manner it can be expected that very few titles in the dataset have an average rating of 1.0.","4c01de51":"Of course, **the question of what rating actually is considered as 'good' is subjective**. There is a saying among music critics that many of the best albums often get four stars out of five, since in their cultivated view 'best' does not mean the same as 'perfect'.\n\nTo settle the question in an amicable manner, we next include both of these categories as **we continue by selecting all games with a user review of 4.0 and higher**. We give this new dataframe the name **df_40**. The reason for all this is to inspect more closely the characteristics of what are generally considered as \"good\" games, at least when average rating is concerned.\n\nWe start by checking the median value of user rating count. This gives us the figure that most games with rating of 4.0 or higher have as their number of individual reviews.","e1eb9aea":"### 2.1 Age Rating","932e6dd1":"Just over a half of top-rated games have an all-audience rating, whereas about a fifth of the rest were rated both for 9+ and 12+ audiences respectively. Although having a 17+ rating does not exclude a strategy game from getting a rating of 4.0 or higher, it does make it relatively unlikely.\n\nThe age rating column value is in string format, no next we remove the \"+\" character from its row values and convert the column to integers. By doing this we don't actually lose any information since we already know how to interpret the age rating oolumn.","d5832c1e":"## 2. Top Rated Games","4473ac6c":"To put it in a form of semi-mathematical equation, **a rating is the result of customer expectations added with user experience. The more negative the user experience is when contrasted to expectations, the more it decreases the rating the particular user will settle for.** \n\nTo explain user ratings in general, there is an old marketing theory about positive and negative reviews. According to it, a satisfied customer tells about his or her experience to five people, whereas someone with more negative buyer or customer experience shares the grudgy complaint with 20 people.\n\nOf course all this was before online era. **Nowadays the threshold for leaving either positive or negative feedback is significantly lower than before**. However it could be assumed, at least as a vague hypothesis, that an unsatisfied customer is still more prone to give a piece of his or her mind to other people. Part of this is simple self-disappointment taking the form of buyer's remorse. One cannot return digital purchases in most cases, hence the outpour of often-bitter discontent as the only way to feel some sort of vindication.\n\nTo balance this wave of negativity, marketing people have well recognized the importance of positive online reviews. Hence the emergence of \"talk-up\" reviews, which are organized attempts to affect the product reputation. I know they are an actual thing since I have personally been previously in charge for producing them at one point. Since there is no way of knowing whether the dataset includes talk-up reviews i.e. disguised marketing effort to run up the rating, in this analysis it is further assumed that all included reviews and ratings are genuine and made by actual customers.\n\nBased on this, the following research question is posed: **what are the most defining features regarding strategy games with high rating?**\n\n*February 9th 2021,*<br>\n*Jari Peltola*","0eddacf9":"With non-rated games stored aside, we continue with the rest of the dataset.","26ca05ee":"Just as a quick observation, on row 2 there is a game called **Morocco** with a size of less than one megabyte. I actually double-checked the game in the App Store, and the data is indeed correct. Actually, **Morocco's'** current version size is even smaller. \n\nTo avoid problematic zero values in the future, I will check if any other games are similarly tiny by size and then change their size to 1 Mb.","4e38eb70":"The user rating count data might become more useful with bins. Let's take another closer look at it.\n\n","335fae95":"As we can see, charging nothing for the app is the most common strategy in getting one's strategy game rated 4.0 or above. Also, over 90 percent of all top-rated games have a price of 5 US dollars or less.\n\nAs a brief intelude and just for personal interest, I will next print out the top-rated game with the hefty price of almost 140 US dollars.","cc58575c":"### 2.3 Languages","9867750c":"There is a lot of variation in files sizes among strategy game genre, since everything from math-based sudoku to graphics-heavy adventure sagas have been included in it. Next we check the new column value percentages.","91a8a095":"This section of the notebook is not about actually trying to achieve a solid model for predicting game ratings. There are two reasons for this. **First, based on analysis above, the dataset at hand does not in my opinion provide an adequate source for such model.** There are much more games with top rating than those with lower rating as well as little continuous values, as Apple has by default pre-categorized such values as average rating, age rating and price. This means that there is no more room for regressive predictions on those features. Also, as the number of possible subcategories has been set by Apple App Store, there is actually a finite number of outcomes from those categories when it comes to using the data in any modeling. In terms of cooking, the dataset is very much *precuit* instead of fresh ingredient.\n\n**The other reason is that I don't possess the necessary skills to do any reliable and comprehensive modeling.** What I am about to do is very simple, and whatever the results may be, they surely will not further enlighten the research question in any significant matter. Rather, this section of the notebook is about its creator himself trying to learn and discover new things than actually sharing something meaningful with others. \n\nAs the research question was about predicting top ratings, I will next build the simplest of classification model. The target of that model will be the **IsTopGame** column, and for features I will select the appropriate columns from the dataset.\n\nThe new binned columns are in category format, so they will first be treated with one hot encoding. Since I'm not an expert on what is about to take place, I will just let the modeling process will take over.","5f898511":"**TABLE OF CONTENTS**\n1. Introduction <br>\n*1.1 Data Exploration*<br>\n2. Top Rated Games <br>\n*2.1 Age Rating*<br>\n*2.2 Price*<br>\n*2.3 Languages*<br>\n*2.4 Review Count*<br>\n*2.5 File Size*<br>\n*2.6 Further Data Processing*<br>\n3. Data Plotting <br>\n4. Predicting Game Rating <br>","bb1c3613":"### 2.5 File Size","6f458168":"We have so far done nothing concerning the games rated lower than 4.0. We do need that data also if we are to make any predictions based on average rating. Next we fast track the remaining data to fit the top games dataframe in future concatenation.\n\nIn other words, we go through similar procedures with dataframe we name as **df_bottom**, consisting of games with lower than 4.0 rating.","7025751a":"Below we can see that top-rated games are more likely to have a file size 151-300 MB (bin 6) than lower rated titles. In general, the smaller the file size is, the greater the relative probability of the title being a lower-rated game.","ca5c9ffe":"All in all, the games with lower rating are \"more simple\" i.e. smaller by file size, as we can see.","18b2d9f6":"The rating count bins will be same as in higher rated games, with only the maximum value adjusted to data.","677d69d0":"Since the main genre (strategy game) of the dataset is fixed, we may in the future drop all genre columns. There are also other columns (such as the aforementioned icon) that do not seem relevant for our purpose. Next we will select the columns that might give us further insight regarding the research question. Also, some columns will be renamed to erase possible future issues with format and special characters.\n\nAfter that we will take a closer look at the column values.","1caec413":"Next we will take a closer look at the game prices. We start by printing the unique values, value count and percentage.","a1adc74a":"Next we can try to find out more about the possible common characteristics of these games.","1ca0c2f9":"As noted, the most common strategy in selling strategy games is to offer a free version of the game with optional content for purchase. We can see from below that this applies both to top-rated and lower-rated games.","11b76da6":"As we can see, **9359 strategy games included in the overall dataset of 16847 games - some 55 percent - do not have an average user rating**. This is because **Apple uses average rating system requiring five independent reviews**. This means that over a half of the dataset consists of games that do not meet the necessary criteria. Thus our analysis will by necessity be based on  the remaining 45 percent of all games (i.e. 7488 individual titles).\n\nFurthermore, next a new dataset will be created with only games consisting of no user average rating. ","035189cb":"One thing we can see immediately is that among lower-rated games not having enough (5 or more) individual ratings for App Store rating average is quite common. Our dataframe of lower-rated games is quite a bit smaller (1965 titles) than the top-game dataframe (5522 titles).","869de0c7":"# Rating Game: Strategy Games In Apple App Store ","85d2adeb":"To avoid any duplicate titles included in the data, next we will adjust the dataset accordingly.","e41fcace":"The average file size in top rated games is 162 MB with a lower median of 89 MB. To get a better overall grasp on file sizes, I will next \"bin\" them in the categories based on their size as megabytes. After that, these bins will be given a new value (1-10), with the smallest file size group (0 to 25 MB) or \"bin\" having value of 1 and largest (2 gigabytes to 4 gigabytes) 10. The new column **Size_Bin** will consist of these values between 1-10. The exact bin sizes - based on information above - are the following:\n<br>\n<br>\nbin_1 (0-25 MB)<br>\nbin_2 (26-50 MB)<br>\nbin_3 (51-75 MB)<br>\nbin_4 (76-100 MB)<br>\nbin_5 (101-150 MB)<br>\nbin_6 (151-300 MB)<br>\nbin_7 (301-600 MB)<br>\nbin_8 (601-900 MB)<br>\nbin_9 (901-2000 MB)<br>\nbin_10 (2001-4005 MB)<br>","be983608":"bin_6 (151-300 MB) as file size is the most populous among strategy games. This is of some value as a finding since we are talking about mobile devices with limited storage capacity as well as processing power.","88f9c385":"Out of 16847 titles in the original dataset, we now have 5523 games (about 33 percent) left with an average rating of 4.0 or higher. Thus we can hold this selection as consisting of \"good\" games at least when their average rating is considered. Let's form a new dataframe called **df_top**, which consists of those games.  ","df535e9f":"The printout provided is indeed a lengthy one, but it does prove us that some half of the top-rated games were released in English only. Of course, just about the same amount of titles have at least some language options. What is intriguing in the these options is their widescale variety. After English-only, the next popular language option (EN, ZH, ZH) includes only some two percent of games. The two \"ZH\" values refer to traditional and simplified Chinese (I checked this manually in the App Store). At the same time I found out that some titles actually had more options than in the dataset, so it is possible that localization is the trend of the future here.\n\nIf we think about a model predicting high ratings, localization does not seem to offer us any further insight. If half of the top games are in English only and the other half has language options, we are basically talking about a virtual coin toss. \n\nOne option would be to further tighten the criteria of what actually is s top-rated game. Let's see what happens with the language options if we limit the top games to be rated 4.5 and higher.\n\n***NOTE: the result is a lengthy list so printing it out has been labeled as comment.***","c5b2d2b6":"Finally, the top-rated games and lower rated games will be concatenated into one dataframe **df_games**, consisting of 7487 rows and 13 columns. ","1147c8e5":"**In written reviews, the rating language the customer uses is irrelevant in the App Store. Because App Store is location-based service, a review and its rating only show up in the specific location the person rating the app resides.**\n\nAs noted in the beginning, it can be safely assumed as a hypothesis that most games in the App Store are designed for English-speaking users. Localization does increase the potential audience but is not cost-free. Let's see what the values in the Languages column look like.\n\n***NOTE: the result is a lengthy list so printing it out has been labeled as comment***.","25413779":"### 2.2 Price","d36b620a":"We saw before that games with English-only language option formed about half of all top-rated releases. Therefore will will next transform the **Languages** column into binary form the same way as we did with in-app-purchases.\n\nFirst we replace all English-only games with a string value \"0\" after which we replace all other values with \"1\". Finally we convert the column to integers and rename the column to **Language_Option** to better fit the new content before resetting the dataframe index.","db4192c1":"Unless the dataset is biased by default, at least when App Store ratings are concerned, satisfied users are actually more prone to share their opinion, barring of course the possible deed of deliberately driving the rating up with fabricated reviews. Running up the rating should not be considered as something \"wrong\" or immoral. Aa a means for self-promotion, artists and record companies have purchased their own releases since TOP 40 charts became a thing, not mentioning having a cozy relationship with selected journalists and critics. The point here is that all this action is very much beyond the scope of a data analysis, therefore left as mere speculation by necessity.\n\nUnless something extraordinary comes up, next I will apply all the now-familiar procedures to lower rated games without further ado.","70c4eadb":"As we are still looking at prices, next we will see how many of the games offered for free include in-app purchases. For this purpose, we will first create a new dataset **df_top_free**. After that, we will further select only the games with value NaN in the in-app purchase column.","b3db27d4":"I worked previously as the screenwriter for a political satire animation series, which had both adults and children as audience. In fact, the family audience allure was the secret behind the series success, since it did not by default exclude any viewer group because of their age.\n\nIt would be interesting to see if the same applies also to strategy games in the dataset. The App Store age rating system was already discussed earlier, so let's see what the unique values and their count in the respective column look like.","f870dd38":"## 1. Introduction","30aeda0a":"Having the count of reviews as a criteria for average game ratings is of course a bit paradoxical since both ratings and reviews have often been made by the same people. Moreover, the \"talk-up\" effect i.e. fabricating reviews to run up the score is a factor to be remembered. All in all, the more popular a game becomes, the more individual ratings and reviews it will eventually have. It's just that these ratings and reviews are most useful by the time the game is released. \n\nFirst, let's go back to our dataframe including titles with rating 4.0 and higher. This leaves us three categories regarding rating (4.0, 4.5, 5.0).","ff385964":"### 2.6 Further Data Processing","08320e01":"### 2.4 Review Count","cb92dc05":"\nAs for game apps and their ratings, there are some other caveats too. According to Wikipedia, the list containing the most installed iOS games of all time looks like following (link to full article below):\n\n__[Wikipedia: Apple App Store](https:\/\/en.wikipedia.org\/wiki\/App_Store_(iOS\/iPadOS)__\n\n<br>\n\n**1**......***Candy Crush Saga<br>***\n**2**......***Subway Surfers<br>***\n**3**......***Fruit Ninja<br>***\n**4**......***Clash of Clans<br>***\n**5**......***Honour of Kings<br>***\n**6**......***Minion Rush<br>***\n**7**......***Angry Birds<br>***\n**8**......***Temple Run 2<br>***\n**9**......***Temple Run<br>***\n**10**....***Asphalt 8: Airborne<br>***\n\n<br>\n\nApple also uses specific age rating scale to all games available in the iOS App Store.\n<br>\n<br>\n**(4+)**\n<br>\nContains no objectionable material.This rating has three sub-classifications:\n<br>\n*Ages 5 and under (app is suitable for children aged 5 and under, but people aged 6 and over can also use it)*\n<br>\n*Ages 6 to 8 (app is suitable for children aged 6 to 8, but people aged 9 and over can also use it)*\n<br>\n*Ages 9 to 11 (app is suitable for children aged 9 to 11, but people aged 12 and over can also use it)*\n<br>\n<br>\n\n**(9+)** \n<br>\nMay contain mild or infrequent occurrences of cartoon, fantasy or realistic violence, and mild or infrequent mature, suggestive, or horror-themed content which may not be suitable for children under the age of 9. This rating has one sub-classification:\n<br>\n*Ages 9 to 11 (app is suitable for children aged 9 to 11, but people aged 12 and over can also use it)*\n<br>\n<br>\n**(12+)** \n<br>\nMay contain frequent or intense cartoon, fantasy or realistic violence, mild or infrequent mature or suggestive themes, mild or infrequent profanity, and simulated gambling which may not be suitable for children under the age of 12.\n<br>\n<br>\n**(17+)** \n<br>\nMay contain frequent and intense profanity, excessive cartoon, fantasy, or realistic violence, frequent and intense mature, horror, suggestive themes, sexual content, nudity, alcohol, and drugs, or a combination of any of these factors which are unsuitable for persons under 17 years of age. This includes apps with unrestricted web access. No one aged 16 and under is allowed to purchase an app rated 17+.\n<br>\n<br>\n**No Rating**\n<br>\nThese apps cannot be purchased on the App Store. \n<br>\n<br>\nTwo things here are notable. First, **most apps aimed at children are directly or indirectly purchased by adults, and the same allegedly goes for posting user ratings**. Secondly, when it comes to buyer's remorse, many of the actual apps at the iOS App Store are free, with some of them offering in-app purchases. Therefore a negative review about lack of \"bang for the buck\" may not refer to actual price but for some in-app purchase turned out to be dissatisfactory. Moreover, many apps have looked for increasing revenue by offering monthly or annual subscription option, which brings its on flavour to the mix. A subscription may evoke the classic \"Florida timeshare condo\" effect at some point: a purchase first seemed worth investing soon became a financial burden with little or no use. However, there is little or nothing for the customer to do than to wait out for the contract to expire and write a few selected words on his or her situation online.\n\nAs Apple originally set iOS Store to be used in English language, it is still by far the dominating language. App reviews can be written in any language as far as I know, but as the app rating system is the same everywhere, the user language is not an issue in rating. However, app localization is possible only with the necessary resources. This means that some independent releases may not get the global spotlight they reserve, if playing the game requires more than rudimentary language skills in English. In this case this is important since **strategy games often have more verbal an approach to actual gameplay than pure action games**. \n\nFinally, it is always possible that an app game may actually be underwhelming (or great, of course). In other words, **a game with a low rating may actually be a bad product**. Here customer expectations are a major factor. For example, if a successful and high-rated game gets a flawed sequel, the overall reaction may be even more negative than had the game not been part of a brand or franchise. Similarly, if for example a hit TV series gets its own mobile app game with little or no resemblance to the series and its positive characteristics, the game will most likely be shunned by diasppointed fans.\n\nOnly a small portion of the above can be included in a form of a dataset. Therefore **building a comprehensive model based on app dataset predicting user ratings does have its limitations**. The model can only use features included in the dataset, leaving out everything else beyond its scope. \n\nThe right thing to start with would therefore seem to be taking a closer look at what we can (and cannot) do with the original dataset. ","11035d73":"As rating count as well as app file size do not by default consist of decimal values, we convert next these columns to integer values.","a5856678":"As we have no specific data on the nature of different in-app purchases, next we provide the column **In_App_Purchases** with a binary value. The zero value in the column means that the game in question does not offer in-app purchases, whereas the value of one labels the game as offering additional content.\n\nTo achieve this, we first replace the NaN values in the column with zeros. After that we replace all other values with \"1\". As the column is still in srting object format, finally we convert its values to integers.","62bc3a66":"## 4. Predicting Game Rating","7286f362":"The game download file size is a bit of a wild card here, since the overall game capacity also consists of possible additional in-app purchase content as well as user-created settings and modifications, save files etc. However, as a feature file size is just about the only continous value with no fixed categories.\n\nAgain, I went to App Store to compare files sizes with the original dataset manually, and it appears that in the dataset file sizes are given in bytes. The Apple App Store however gives file size as megabytes (1 kilobyte is 1000 bytes, 1 megabyte is 1000 kilobytes), so next we create a new column **Size_Mb** with new, calculated megabyte values for better readability.\n\nAlso, as we are not after exact byte-size values, the new megabyte file size values will be rounded to integers for better accessibility (the App Store does the same).","1b90cdf8":"The percentage of English-only games is only slightly lower, so no considerable change took place. This is also an indication that were there for example a regressive model based on language options, the prediction result would not improve by setting the top-rated game criteria gradually higher. ","b849d45e":"We can next plot some visuals on higher and lower rated games and see if there are any significant differences. Although we are working now with one dataframe only, it is still useful to be able to divide the games in lower and higher rated titles.\n\nTherefore we start by creating a new column **IsTopGame**, with binary value 0 if game is rated 3.5 or lower, and 1 if rating is 4.0 and above.","4fa0e295":"<br>\nbin_1 (5-100 ratings)<br>\nbin_2 (101-150 ratings)<br>\nbin_3 (151-200 ratings)<br>\nbin_4 (201-300 ratings)<br>\nbin_5 (301-500 ratings)<br>\nbin_6 (501-1000 ratings)<br>\nbin_7 (1001-3000 ratings)<br>\nbin_8 (3001-6000 ratings)<br>\nbin_9 (6001-15000 ratings)<br>\nbin_10 (15001-3032734 ratings)<br>","478d6cd9":"The maximum number of reviews in the column is a whopping three million. Let's see what we are dealing with by sorting a temporary dataftame **df_top_review** by review count.","5e84d9ee":"By default, the dataset consists of games labeled as \"strategy games\" by Apple. Whereas for example a visual analysis on game icons would indeed be intriguing an idea - as suggested in the task brief - these icons in my opinion have more effect at the moment of purchase than later on customer ratings. At least I am yet to see a single rating with the included review concentrating on the shoddy outlook of a particular game's App Store icon.\n\nLet's check how much data we are actually dealing with as well as what it contains regarding data types.","7e0b734b":"The first plot divides the games based on rating count and rating average. Since there were up to three million ratings per game in some cases, the rating count was divided in ten bins, with bin 1 including games with smallest number of ratings etc. \n\nWe can see that when all games are concerned, most of them are in bin 1 (5-100 ratings) with bin 7 (1001-3000 ratings) as second largest. The gap between these two bins is something I find fascinating. When especially higher-rated games are concerned, it is almost as if reaching a count of one thousand ratings has been set as a conscious target by the raters...","6b45ced9":"The hit game **Clash Of Clans** with its spinoff both have rating counts unlike any other title in the dataset. I would very much like to investigate those ratings bit closer (somehow **Clash Of Clans** fans are very much into rating games...), but since fraud detection is not the aim of this notebook, I will instead take the given values in the dataset as such.\n\nAll this does lead to an interesting conundrum though: ***a game can have an App Store average rating only after being individually rated (i.e. purchased or at least downloaded for free followed by administered rating process) five times or more. Thus, to have a rating average - preferably a positive one - as soon as possible is an immediate advantage in the App Store compared to non-rated competitors.***.\n\nNext I will define ten bins to fit the rating count values in, ranging from our defined minimum of 63 all the way to over three million. The bins used for this are:","7aee17e3":"Games with in-app purchases had relatively more high ratings compared to lower-rated titles. This may because of bias in data, but it does seem that additional content is something strategy game players appreciate.","ddf8ba87":"If we search the app in question online, we find further information (link below) telling us that the \"game\" in question is actually a real-time stock trading app. \n\nhttps:\/\/appadvice.com\/app\/finabase-investing-stocks\/706398884\n\nMoreover, we just found out something important about the App Store ratings. 4-year-olds can hardly become stock market juggernauts, yet the app rating itself does not prevent any toddler from downloading it. In theory - *and only in theory* - any 4-year-old with could thus for example invest in a company producing intercontinental missiles, but the same kid would not be able to download a game including mild cartoon violence.\n\nAlthough the case of StockIdeal Pro does question the integrity of the dataset and its relevance, we will further consider it as an outlier. Also, as we just proved that the app we found is actually not a strategy game, we will next drop it from our dataframe. There are numerous ways of achieving this, but in this case we select everything else but the to-be-dropped app's ID.","ebb18de0":"Out of 4644 free strategy games, 1303 (about 28 percent) are totally free of charge, with no in-app purchases. Of course this is more about cash flow than actual game rating, but as such it is good to know what \"free\" in this context actually means. However, just based on numbers, an argument could be made that in-app-purchases actually increase the possibility of a game becoming high-rated. After all, additional and updated content is bound to give the game a longer shelf life in addition to extra revenue.\n\nI would argue though that there is no actual correlation between the game price and its user rating average. If someone downloads a strategy game for free and likes it, the rating is not based on the price but, rather, the user experience, as noted in the very beginning. In this sense the dataset at hand does offer only partial a view concerning our research question. ","c4a736a6":"## 3. Data Plotting","f4baf67b":"### 1.1 Data Exploration","87ea6534":"For continuity as well as coherence, next the same bins will be applied to lower rated games compared to high-rated games. Only the maximum file size will be adjusted to fit the data at hand.","1e87a4db":"We can see that the subcategories of the rating system are not included in the dataset. This information would have been useful in searching for all-audience crossover games.\n\nLet's check next the count as well as percentage of the unique values we have."}}