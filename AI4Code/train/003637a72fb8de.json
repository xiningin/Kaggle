{"cell_type":{"48caa75b":"code","3aae5760":"code","a3f072f2":"code","3f7dc652":"code","761a12d9":"code","0ed01d2b":"code","387cc5c0":"code","7705663f":"code","05d4fb12":"code","4cd790b6":"code","0b6c33f0":"code","deb31756":"code","80bb5cf3":"code","7ff91414":"code","067296c3":"code","449e1a3a":"code","7bdcfaf1":"code","b35ce7bc":"code","5c7f0c5f":"code","e300681f":"code","deebfd60":"code","1cfebe2f":"code","7de0a1ce":"code","d189b0f5":"code","5fa0c4b3":"code","91bf157d":"code","3394fa47":"code","bbe00c49":"code","2cb9ac6c":"code","847565e1":"code","6f68847b":"code","53c4e02f":"code","69445399":"code","dcd5de8a":"code","20fc8a74":"code","8ab568a1":"code","c64e7dd9":"code","4c0633ea":"code","ec35aaad":"code","a366f498":"code","21217863":"code","8442290a":"code","2e827d60":"code","7cc04505":"code","2609fbe9":"code","2c647506":"code","2f1b9474":"code","3ef9d161":"code","1a5ae3a0":"code","35f43d58":"code","e3ccba8a":"code","c3f319a0":"code","95aa57e1":"code","b1728e70":"code","6e14ec93":"code","bd41c73d":"code","b8de4874":"code","50685391":"code","78d49095":"code","be0d9aed":"code","b25940ec":"code","688657a3":"code","9f7b4475":"code","98bfb9f5":"code","4ef810ae":"code","90f94aae":"code","37729022":"code","0e28b40d":"code","3bc24ace":"code","3c799217":"code","cb1b236f":"code","9a35abf5":"code","dfa3482b":"code","6aa7595c":"code","21be2f96":"code","637a4da7":"code","6a801ef2":"code","243d3151":"code","5ed34bc9":"code","9e964331":"code","c88e6020":"code","6449344f":"code","9381b3ce":"markdown","cc5748dd":"markdown","f3313f36":"markdown","b9e02a65":"markdown","464d4841":"markdown","7829b28e":"markdown","56b808c7":"markdown","cc5ee635":"markdown","10d3ce47":"markdown","9ada4abf":"markdown","29c30d76":"markdown","16b6da3a":"markdown","7417e09b":"markdown","6622df7f":"markdown","9ed4bdc4":"markdown","0e0f4be0":"markdown","b1da9ca8":"markdown","13653961":"markdown","9af3913c":"markdown","45cfdbb2":"markdown","9fef17ec":"markdown","a960cb7c":"markdown","3d257a2c":"markdown","70d944a0":"markdown","b3ea7fbc":"markdown","6e9475a5":"markdown","eec2dbe3":"markdown","68f26cf1":"markdown","84ed2c77":"markdown","11cdcf57":"markdown","c6f73a2e":"markdown","4539fe93":"markdown","7c897ba5":"markdown","dc9f2b96":"markdown","712a6788":"markdown","c28fe1c0":"markdown","3569b6b6":"markdown","c8277399":"markdown","0df80049":"markdown","c61c77e5":"markdown","510ef774":"markdown","82f56993":"markdown","6c578ebe":"markdown","5534c404":"markdown","7e6bd2cb":"markdown","cc9a08b9":"markdown","e0960d87":"markdown"},"source":{"48caa75b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter \nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3aae5760":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","a3f072f2":"train_df.columns","3f7dc652":"train_df.head()","761a12d9":"train_df.describe()","0ed01d2b":"train_df.info()","387cc5c0":"def bar_plot(variable):\n    var=train_df[variable]\n    varValue=var.value_counts()\n    \n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \/n {}\".format(variable,varValue))\n    \n    ","7705663f":"category1=[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\n\nfor c in category1:\n    bar_plot(c)","05d4fb12":"category2=[\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{}: \/n\".format(train_df[c].value_counts()))","4cd790b6":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable])\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","0b6c33f0":"numericVar=[\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","deb31756":"#Pclass-Survived\n\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","80bb5cf3":"#Sex-Survived\n\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","7ff91414":"#SibSp-Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","067296c3":"#Parch-Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","449e1a3a":"def detect_outliers(df,features):\n    outlier_indices=[]\n    \n    for c in features:\n        #1st quartile\n        Q1=np.percentile(df[c],25)\n        #3rd quartile\n        Q3=np.percentile(df[c],75)\n        #IQR\n        IQR=Q3-Q1\n        #Outlier step\n        outlier_step=IQR*1.5\n        #detect outlier and their indices\n        outlier_list_col=df[(df[c]<Q1-outlier_step) | (df[c]<Q3+ outlier_step)].index\n        #store indeces\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices=Counter(outlier_indices) \n    multiple_outliers=list(i for i, v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers","7bdcfaf1":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","b35ce7bc":"train_df=train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis=0).reset_index(drop=True)","5c7f0c5f":"train_df_len=len(train_df)\ntrain_df=pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","e300681f":"train_df.head()","deebfd60":"train_df.columns[train_df.isnull().any()]","1cfebe2f":"train_df.isnull().sum()","7de0a1ce":"train_df[train_df[\"Embarked\"].isnull()]","d189b0f5":"train_df.boxplot(column=\"Fare\", by=\"Embarked\")\nplt.show()","5fa0c4b3":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","91bf157d":"train_df[train_df[\"Fare\"].isnull()]","3394fa47":"\ntrain_df[\"Fare\"]= train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))\n","bbe00c49":"list1=[\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot=True ,fmt=\".2f\")\nplt.show()","2cb9ac6c":"g=sns.factorplot(x=\"SibSp\", y=\"Survived\", data=train_df , kind=\"bar\" ,size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","847565e1":"g=sns.factorplot(x=\"Parch\", y=\"Survived\", data=train_df , kind=\"bar\" ,size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()\n","6f68847b":"g=sns.factorplot(x=\"Pclass\", y=\"Survived\", data=train_df , kind=\"bar\" ,size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()\n","53c4e02f":"g= sns.FacetGrid(train_df, col=\"Survived\")\ng.map(sns.distplot, \"Age\", bins=25)\nplt.show()","69445399":"g= sns.FacetGrid(train_df, col=\"Survived\", row= \"Pclass\")\ng.map(plt.hist, \"Age\", bins=25)\ng.add_legend()\nplt.show()\n","dcd5de8a":"g= sns.FacetGrid(train_df, row= \"Embarked\" , size=2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","20fc8a74":"g= sns.FacetGrid(train_df, col=\"Survived\", row= \"Embarked\" , size=2.3)\ng.map(sns.barplot,\"Sex\", \"Fare\")\ng.add_legend()\nplt.show()\n","8ab568a1":"train_df[train_df[\"Age\"].isnull()]","c64e7dd9":"sns.factorplot(x=\"Sex\", y=\"Age\", data= train_df, kind=\"box\")\nplt.show()","4c0633ea":"sns.factorplot(x=\"Sex\", y=\"Age\", hue=\"Pclass\", data= train_df, kind=\"box\")\nplt.show()","ec35aaad":"sns.factorplot(x=\"Parch\", y=\"Age\", data= train_df, kind=\"box\")\nsns.factorplot(x=\"SibSp\", y=\"Age\", data= train_df, kind=\"box\")\nplt.show()","a366f498":"train_df[\"Sex\"]=[1 if i==\"male\" else 0 for i in train_df[\"Sex\"]]","21217863":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot=True)\nplt.show()","8442290a":"index_nan_age=list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred=train_df[\"Age\"][((train_df[\"SibSp\"]==train_df.iloc[i][\"SibSp\"])& (train_df[\"Parch\"]==train_df.iloc[i][\"Parch\"])&(train_df[\"Pclass\"]==train_df.iloc[i][\"Pclass\"]))].median()\n    age_med=train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i]=age_pred\n    else:\n        train_df[\"Age\"].iloc[i]=age_med","2e827d60":"train_df[train_df[\"Age\"].isnull()]","7cc04505":"train_df['Name'].head()","2609fbe9":"name = train_df[\"Name\"]\ntrain_df[\"Title\"]=[i.split(\".\")[0].split(\",\")[-1].strip() for i in name]\ntrain_df[\"Title\"].head(10)","2c647506":"train_df[\"Title\"].unique()","2f1b9474":"sns.countplot(x=\"Title\", data=train_df)\nplt.xticks(rotation=60)\nplt.show()","3ef9d161":"train_df[\"Title\"]=train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"]=[0 if i==\"Master\" else 1 if i==\"Miss\" or i==\"Ms\" or i==\"Mlle\"or i==\"Mrs\" else 2 if i==\"Mr\" else 3 for i in train_df[\"Title\"]]","1a5ae3a0":"sns.countplot(x=\"Title\", data=train_df)\nplt.xticks(rotation=60)\nplt.show()","35f43d58":"train_df[\"Title\"].head()","e3ccba8a":"g= sns.factorplot(x=\"Title\", y=\"Survived\", data=train_df,kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\", \"other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","c3f319a0":"train_df.drop(labels=[\"Name\"], axis=1, inplace=True)","95aa57e1":"train_df.head()","b1728e70":"train_df=pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","6e14ec93":"train_df[\"Fsize\"]= train_df[\"SibSp\"]+ train_df[\"Parch\"]+1 \ntrain_df.head()","bd41c73d":"g=sns.factorplot(x=\"Fsize\",y=\"Survived\",data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","b8de4874":"train_df[\"family_size\"]=[1 if i<5 else 0 for i in train_df[\"Fsize\"]]\ntrain_df[\"family_size\"].unique()","50685391":"sns.countplot(x=\"family_size\",data=train_df)\nplt.show()","78d49095":"g=sns.factorplot(x=\"family_size\",y=\"Survived\",data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","be0d9aed":"train_df=pd.get_dummies(train_df,columns=[\"family_size\"])\ntrain_df.head()","b25940ec":"train_df[\"Embarked\"].head()","688657a3":"sns.countplot(x=\"Embarked\", data=train_df)\nplt.show()","9f7b4475":"train_df=pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","98bfb9f5":"train_df[\"Ticket\"].head()","4ef810ae":"tickets=[]\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")","90f94aae":"train_df[\"Ticket\"]=tickets\ntrain_df.head()","37729022":"train_df=pd.get_dummies(train_df, columns=[\"Ticket\"], prefix=\"T\")\ntrain_df.head()","0e28b40d":"sns.countplot(x=\"Pclass\", data=train_df)\nplt.show()","3bc24ace":"train_df[\"Pclass\"]=train_df[\"Pclass\"].astype(\"category\")\ntrain_df= pd.get_dummies(train_df, columns=[\"Pclass\"])\ntrain_df.head()","3c799217":"train_df[\"Sex\"]=train_df[\"Sex\"].astype(\"category\")\ntrain_df=pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","cb1b236f":"train_df.drop(labels=[\"PassengerId\", \"Cabin\"], axis=1, inplace=True)\ntrain_df.head()","9a35abf5":"train_df.columns","dfa3482b":"from sklearn.model_selection import train_test_split, StratifiedKFold , GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","6aa7595c":"train_df_len","21be2f96":"test=train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"], axis=1, inplace=True)\ntest.head()","637a4da7":"train=train_df[:train_df_len]\nX_train=train.drop(labels=\"Survived\", axis=1)\ny_train=train[\"Survived\"]\nX_train, X_test, y_train, y_test=train_test_split(X_train,y_train,test_size=0.33, random_state=42)\n\nprint(\"X_train\",len(X_train))\nprint(\"X_test\", len(X_test))\nprint(\"y_train\", len(y_train))\nprint(\"y_test\", len(X_test))\nprint(\"test\", len(test))\n","6a801ef2":"logreg= LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train= round(logreg.score(X_train,y_train)*100,2)\nacc_log_test=round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy %{}\".format(acc_log_train))\nprint(\"Test Accuracy %{}\".format(acc_log_test))","243d3151":"random_state=42\nclassifier=[DecisionTreeClassifier(random_state=random_state), SVC(random_state=random_state), RandomForestClassifier(random_state=random_state),LogisticRegression(random_state=random_state),KNeighborsClassifier()]\n\ndt_param_grid={\"min_samples_split\":range(10,500,20),\"max_depth\":range(1,20,2)}\n                                                                   \nsvc_param_grid={\"kernel\":[\"rbf\"],\"gamma\":[0.001,0.01,0.1,1],\"C\":[1,10,50,100,200,300,1000]}                                                                   \n                                   \nrf_param_grid={\"max_features\":[1,3,10],\"min_samples_split\":[2,3,10],\"min_samples_leaf\":[1,3,10],\"bootstrap\":[False],\"n_estimators\":[100,300],\"criterion\":[\"gini\"]}  \n                                                              \nlogreg_param_grid={\"C\":np.logspace(-3,3,7),\"penalty\":[\"l1\",\"l2\"]}                                                                  \n                                           \nknn_param_grid={\"n_neighbors\":np.linspace(1,19,10, dtype=int).tolist(),\"weights\":[\"uniform\",\"distance\"],\"metric\":[\"euclidean\",\"manhattan\"]}                                                                   \n                                                                   \nclassifier_param=[dt_param_grid,svc_param_grid,rf_param_grid,logreg_param_grid,knn_param_grid]                                                                   ","5ed34bc9":"cv_result=[]\nbest_estimators=[]\n\nfor i in range(len(classifier)):\n    \n    clf=GridSearchCV(classifier[i],param_grid=classifier_param[i],cv=StratifiedKFold(n_splits=10),scoring=\"accuracy\",n_jobs=-1,verbose=1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","9e964331":"cv_results= pd.DataFrame({\"Cross Validation Means\":cv_result,\"ML Models\":[\"DecisionTreeClassifier\", \"SVC\", \"RandomForestClassifier\",\"LogisticRegression\",\"KNeighborsClassifier\"]})\n\ng=sns.barplot(\"Cross Validation Means\",\"ML Models\", data=cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validtion Scores\")","c88e6020":"votingC = VotingClassifier(estimators=[(\"dt\",best_estimators[0]),(\"rfc\",best_estimators[2]),(\"lr\",best_estimators[3])],voting=\"soft\",n_jobs=-1)\n\nvotingC=votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","6449344f":"test_survived=pd.Series(votingC.predict(test),name=\"Survived\").astype(int)\nresults=pd.concat([test_PassengerId,test_survived],axis=1)\nresults.to_csv(\"titanic_csv\",index=False)","9381b3ce":"<a id=\"27\"><\/a>\n## Sex","cc5748dd":"<a id=\"8\"><\/a>\n# Missing Value\n*      Find Missing Value\n*      Fill Missing Value\n","f3313f36":"<a id=\"7\"><\/a>\n# Outlier Detection","b9e02a65":"<a id=\"28\"><\/a>\n## Drop PassengerId and Cabin","464d4841":"* float64(2) : Fare and Age\n* int64(5) : PassengerId,Survived,Pclass,SibSp and Parch\n* object(5) : Name, Sex, Ticket,Cabin and Embarked","7829b28e":"<a id=\"19\"><\/a>\n## Embarkes--Sex--Fare--Survived","56b808c7":"* Female passengers have much better survival rate than males.\n* Males better survival rate in Pclass 3 in C.\n* Embarked and sex will be used at training","cc5ee635":"Small families have more chance to survive than large families.","10d3ce47":"First class passengers are older than 2nd and 2nd class passengers are older than 3rd class passengers.","9ada4abf":"<a id=\"29\"><\/a>\n# Modelling ","29c30d76":"<a id=\"14\"><\/a>\n## Parch--Survived","16b6da3a":"<a id=\"24\"><\/a>\n## Embarked","7417e09b":"<a id=\"20\"><\/a>\n## Fill missing: Age Feature","6622df7f":"<a id=\"26\"><\/a>\n## Pclass","9ed4bdc4":"<a id=\"13\"><\/a>\n## SibSp--Survived","0e0f4be0":"<a id=\"4\"><\/a>\n### Categorical Variable","b1da9ca8":"Sex is not informative for age prediction.Age distribution, median seem to be same both for female and male.","13653961":"<a id=\"32\"><\/a>\n## Hyperparameter Tuning- Grid Search- Cross Validation\n\nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation\n  * Decision Tree\n  * Svm\n  * Random Forest\n  * KNN\n  * Logistic Regression","9af3913c":"<a id=\"31\"><\/a>\n## Simple Logistic Regression Model","45cfdbb2":"![](http:\/\/)# Introduction \nThe sinking of Titanic is one of the most notorious shipwreck on the history. In 1912 during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color = 'purple'>\n\nContent:\n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n     *  [Univariate Variable Analysis](#3)\n          * [Categorical Variable](#4)\n          * [Numerical Variable](#5)    \n2. [Basic Data Analysis](#6)\n2. [Outlier Detection](#7)\n2. [Missing Value](#8)\n     *  [Find Missing Value](#9)\n     *  [Fill Missing Value](#10)\n2. [Visualization](#11)\n     *  [Correlation Between Sibsp--Parch--Age--Fare--Survived](#12)\n     *  [SibSp--Survived](#13)\n     *  [Parch--Survived](#14)\n     *  [Pclass--Survived](#15)\n     *  [Age--Survived](#16)\n     *  [Pclass--Survived--Age](#17)     \n     *  [Embarked--Sex--Pclass--Survived](#18)\n     *  [Embarked--Sex--Fare--Survived](#19)\n     *  [Fill missing: Age Feature](#20)\n2. [Feature Engineering](#21)\n    * [Name--Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop PassengerId and Cabin](#28)\n2. [Modelling](#29)\n    * [Train Test Split](#30)\n    * [Simple Logistic Regression Model](#31)\n    * [Hyperparameter Tuning- Grid Search- Cross Validation](#32)\n    * [Ensemble Modelling](#33)\n    * [Prediction and Submission](#34)","9fef17ec":"<a id=\"30\"><\/a>\n## Train Test Split","a960cb7c":"Age is not correlated with sex but it is correlated with Parch,Sibsp,Pclass","3d257a2c":"<a id=\"25\"><\/a>\n## Ticket","70d944a0":"<a id=\"33\"><\/a>\n## Ensemble Modelling","b3ea7fbc":"<a id=\"17\"><\/a>\n## Pclass--Survived--Age","6e9475a5":"* Passengers who pay higher fare have better survival. Fare can be used categorical for training.","eec2dbe3":"## Find Missing Value","68f26cf1":"* SibSp and Parch can be used for new feature extraction with th=3\n* Small families have more chance to survived.\n* There is standard deviation in survival of passenger with parch=3","84ed2c77":"<a id=\"23\"><\/a>\n## Family Size","11cdcf57":"* Pclass is a important feature for model training","c6f73a2e":"<a id=\"16\"><\/a>\n## Age--Survived","4539fe93":"<a id=\"2\"><\/a>\n# Variable Description\n1. PassengerId : unique id number to each passenger\n1. Survived : passenger survive (1) or died (0)\n1. Pclass : passenger class\n1. Name : name\n1. Sex : gender of passenger\n1. Age : age of passenger\n1. SibSp : number of siblings or spouses\n1. Parch : number of parents or children\n1. Ticket : ticket number\n1. Fare : amount of money spent on ticket\n1. Cabin : cabin category\n1. Embarked : port where passenger embarked (C=Cherbourg,Q=Queenstown,S=Southampton)","7c897ba5":"Fare feature seems to have correlation with survived feature (0.26)","dc9f2b96":"<a id=\"21\"><\/a>\n# Feature Engineering\n   ","712a6788":"<a id=\"10\"><\/a>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare only has 1","c28fe1c0":"<a id=\"5\"><\/a>\n## Numerical Variable","3569b6b6":"<a id=\"11\"><\/a>\n# Visualization","c8277399":"<a id=\"1\"><\/a>\n# Load and Check Data","0df80049":"* Age<=10 has a high survival rate\n* Oldest passenger (80) survived\n* Large number of 20 years old did not survived.\n* Most passengers 15-35 age range\n* Use age feature in training\n* Use age distribution for missing value of age\n","c61c77e5":"* Having a lot of SibSp decreases the chance to survive.\n* If SibSp== 0 or 1 or 2 passenger has more chance to survive. \n* We can consider a new feature describing these categories.","510ef774":"<a id=\"18\"><\/a>\n## Embarked--Sex--Pclass--Survived","82f56993":"<a id=\"6\"><\/a>\n# Basic Data Analysis\n* Pclass-Survived\n* Sex-Survived\n* SibSp-Survived\n* Parch-Survived","6c578ebe":"<a id=\"3\"><\/a>\n# Univariate Variable Analysis\n\n* Categorical Variable : Survived, Pclass,Sex,SibSp,Parch,Cabin,Embarked, Name and Ticket\n* Numerical Variable : Age, PassengerId and Fare\n","5534c404":"<a id=\"22\"><\/a>\n## Name--Title\n","7e6bd2cb":"<a id=\"34\"><\/a>\n## Prediction and Submission","cc9a08b9":"<a id=\"12\"><\/a>\n## Correlation Between Sibsp--Parch--Age--Fare--Survived","e0960d87":"<a id=\"15\"><\/a>\n## Pclass--Survived"}}