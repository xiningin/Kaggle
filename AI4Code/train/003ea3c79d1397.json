{"cell_type":{"b5889299":"code","ee20b8e3":"code","02cab836":"code","e202cbe0":"code","ede63552":"code","dc116316":"code","b0abb152":"code","0961e850":"code","0f21e2cc":"code","4ad7996e":"code","5cd6b6e9":"code","c0a9cf24":"code","347ccd68":"code","0a2d0d6b":"code","f06f920c":"code","5682a1f8":"code","7413dd2c":"code","f4e9ef59":"code","89f98606":"code","40fce4f2":"code","cff4e466":"code","6592d67b":"code","6664dc60":"code","9ec373e3":"code","a5c0c307":"code","49e05ead":"code","cf673327":"code","a8061f0e":"code","df7b8da6":"code","ea40af23":"code","9d722770":"code","0639d797":"code","78c0574e":"code","d557ce33":"code","259b00b2":"code","1ebdc4ce":"code","afa21bac":"code","2cdcd597":"code","b3f74912":"code","3fbf5b28":"code","fdce4425":"code","e5713a9d":"code","f89561e3":"code","2298cb1f":"code","d2bab523":"code","907556bf":"code","f3a692c0":"code","7ad93a99":"code","30c2e70d":"code","990c732b":"code","06487c6f":"code","7ee40fc5":"code","a7b7a544":"code","38db99e8":"code","7ddb9c9b":"code","1dff087e":"code","756ffa1f":"code","6d9a05d0":"code","d2715677":"code","84cac08a":"markdown","41b4ca84":"markdown","302036cb":"markdown","c5d4a490":"markdown","2e2bcd67":"markdown","42a93e6e":"markdown","4234de1c":"markdown","e6f9fcf9":"markdown","835a018a":"markdown","bb19864f":"markdown","108a5898":"markdown","44a0aca9":"markdown","3aed2495":"markdown","7e045a58":"markdown","9c6edeef":"markdown","d00cde5f":"markdown","49b809ae":"markdown","2cabf9c6":"markdown","21041f27":"markdown","96640136":"markdown","47d3763c":"markdown","369f04f1":"markdown","03f531a9":"markdown","664f9af1":"markdown","6f3ae0e9":"markdown","404ef946":"markdown"},"source":{"b5889299":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ee20b8e3":"df_sample = pd.read_csv('\/kaggle\/input\/dataset\/sample.csv')\ndf_train = pd.read_csv('\/kaggle\/input\/dataset\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/dataset\/test.csv')\ndf_train.shape, df_test.shape, df_sample.shape","02cab836":"df_train.head()","e202cbe0":"df_train.isnull().sum().sum(), df_test.isnull().sum().sum()","ede63552":"df_train.columns","dc116316":"df_test.columns","b0abb152":"sns.set(rc={'figure.figsize':(25,6)})\nsns.barplot(x=\"chnl_type\", y=\"is_5g\", hue='product_type', data=df_train)","0961e850":"sns.barplot(x=\"service_type\", y=\"is_5g\", hue='product_type', data=df_train)","0f21e2cc":"sns.barplot(x=\"product_type\", y=\"is_5g\", data=df_train)","4ad7996e":"sns.barplot(x=\"term_type\", y=\"is_5g\", data=df_train)","5cd6b6e9":"sns.barplot(x=\"age\", y=\"is_5g\", hue='sex', data=df_train)","c0a9cf24":"sns.barplot(x=\"manu_name\", y=\"is_5g\", data=df_train)","347ccd68":"sns.barplot(x=\"max_rat_flag\", y=\"is_5g\", data=df_train)","0a2d0d6b":"sns.barplot(x=\"is_5g_base_cover\", y=\"is_5g\", data=df_train)","f06f920c":"sns.barplot(x=\"is_work_5g_cover\", y=\"is_5g\", data=df_train)","5682a1f8":"sns.barplot(x=\"activity_type\", y=\"is_5g\", data=df_train)","7413dd2c":"sns.barplot(x=\"is_act_expire\", y=\"is_5g\", data=df_train)","f4e9ef59":"sns.barplot(x=\"comp_type\", y=\"is_5g\", data=df_train)","89f98606":"sns.barplot(x=\"city_5g_ratio\", y=\"is_5g\", data=df_train)","40fce4f2":"sns.barplot(x=\"city_level\", y=\"is_5g\", data=df_train)","cff4e466":"sns.barplot(x=\"prov_id\", y=\"is_5g\", data=df_train)","6592d67b":"df = df_train.drop(['area_id', 'innet_months', 'total_times', 'total_flux', 'total_fee', 'pay_fee', 'age', \n                    'activity_type', 'game_app_flux', 'live_app_flux', 'video_app_flux', 'bank_cnt', 'call_days',\n                   're_call10', 'short_call10', 'long_call10'], axis=1)","6664dc60":"df_wo_days = df.drop(['active_days01', 'active_days02', 'active_days03', 'active_days04', 'active_days05',\n                      'active_days06', 'active_days07', 'active_days08', 'active_days09', 'active_days10',\n                      'active_days11', 'active_days12', 'active_days13', 'active_days14', 'active_days15',\n                      'active_days16', 'active_days17', 'active_days18','active_days19', 'active_days20',\n                      'active_days21', 'active_days22', 'active_days23'], axis=1)","9ec373e3":"df_wo_days.head()","a5c0c307":"user_id = df_test['user_id']\ndf_wo_days = df_wo_days.drop(['user_id'], axis=1)","49e05ead":"df_test = df_test.drop(['area_id', 'innet_months', 'total_times', 'total_flux', 'total_fee', 'pay_fee', 'age', \n                    'activity_type', 'game_app_flux', 'live_app_flux', 'video_app_flux', 'bank_cnt', 'call_days',\n                   're_call10', 'short_call10', 'long_call10','active_days01', 'active_days02', 'active_days03', \n                        'active_days04', 'active_days05','active_days06', 'active_days07', 'active_days08',\n                        'active_days09', 'active_days10','active_days11', 'active_days12', 'active_days13', \n                        'active_days14', 'active_days15','active_days16', 'active_days17', 'active_days18',\n                        'active_days19', 'active_days20','active_days21', 'active_days22', 'active_days23'], axis=1)","cf673327":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report","a8061f0e":"x = df_wo_days.drop(['is_5g'], axis=1)\ny = df_wo_days['is_5g']\ndf_wo_days.shape","df7b8da6":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)","ea40af23":"from sklearn.linear_model import LogisticRegression\nlogistic = LogisticRegression()\nlogistic.fit(x_train, y_train)\nprediction_lr = logistic.predict(x_test)\nprint(classification_report(y_test,prediction_lr))","9d722770":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()\ntree.fit(x_train, y_train)\nprediction_dt = tree.predict(x_test)\nprint(classification_report(y_test, prediction_dt))","0639d797":"from sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier()\nforest.fit(x_train, y_train)\nprediction_rf = forest.predict(x_test)\nprint(classification_report(y_test, prediction_rf))","78c0574e":"import xgboost\nxgb = xgboost.XGBClassifier()\nxgb.fit(x_train,y_train)\nprediction_xgb = xgb.predict(x_test)\nprint(classification_report(y_test, prediction_xgb))","d557ce33":"import keras\nfrom keras.layers import Dense\nfrom keras.models import Sequential\nfrom keras.layers import Dropout\ndf_wo_days.shape","259b00b2":"model = Sequential([\n    Dense(32, activation='relu', input_dim=19),\n    Dropout(0.5),\n    Dense(32, activation='relu'),\n    Dense(1, activation='sigmoid')\n])\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\nmodel.summary()","1ebdc4ce":"model.fit(x_train, y_train, batch_size=32, epochs=10,verbose=2)","afa21bac":"prediction_nn = model.predict(x_test)\nprediction_nn = [1 if y>=0.5 else 0 for y in prediction_nn]\nprint(classification_report(y_test, prediction_nn))","2cdcd597":"df_wo_days.shape, df_test.shape","b3f74912":"x.shape, y.shape, df_test.shape","3fbf5b28":"df_test = df_test.drop(['user_id'], axis=1)","fdce4425":"logistic.fit(x, y)\ntest_lr = logistic.predict(df_test)","e5713a9d":"forest.fit(x, y)\ntest_rf = forest.predict(df_test)","f89561e3":"tree.fit(x, y)\ntest_dt = tree.predict(df_test)","2298cb1f":"xgb.fit(x,y)\ntest_xgb = xgb.predict(df_test)","d2bab523":"test_lr.shape, test_rf.shape, test_dt.shape, test_xgb.shape","907556bf":"dt_pred = pd.DataFrame(test_dt, columns= ['5G-DT'])\nrf_pred = pd.DataFrame(test_rf, columns= ['5G-RF'])\nlr_pred = pd.DataFrame(test_lr, columns= ['5G-LR'])\nxgb_pred = pd.DataFrame(test_xgb, columns= ['5G-XGB'])","f3a692c0":"dt_pred.reset_index(inplace=True, drop=True)\nrf_pred.reset_index(inplace=True, drop=True)\nlr_pred.reset_index(inplace=True, drop=True)\nxgb_pred.reset_index(inplace=True, drop=True)","7ad93a99":"df_fin = pd.concat([user_id, lr_pred, rf_pred, dt_pred, xgb_pred], axis=1)","30c2e70d":"df_fin.head()","990c732b":"actual_result = df_sample['is_5g']","06487c6f":"df_fin = pd.concat([df_fin, actual_result], axis=1)","7ee40fc5":"df_fin.head()","a7b7a544":"true_lr = 0\nfalse_lr = 0\ntrue_rf = 0\nfalse_rf = 0\ntrue_dt = 0\nfalse_dt = 0\ntrue_xgb = 0\nfalse_xgb = 0","38db99e8":"for i in range(0, len(df_fin)-1):\n    if test_dt[i] == actual_result[i]:\n        true_dt += 1\n    else:\n        false_dt += 1\nprint('Prediction Results for Decision Tree')\nprint('Correct Predictions: {:d} - False Predictions: {:d}'.format(true_dt, false_dt))","7ddb9c9b":"for i in range(0, len(df_fin)-1):\n    if test_xgb[i] == actual_result[i]:\n        true_xgb += 1\n    else:\n        false_xgb += 1\nprint('Prediction Results for XGBoost')\nprint('Correct Predictions: {:d} - False Predictions: {:d}'.format(true_xgb, false_xgb))","1dff087e":"for i in range(0, len(df_fin)-1):\n    if test_lr[i] == actual_result[i]:\n        true_lr += 1\n    else:\n        false_lr += 1\nprint('Prediction Results for Logistic Regression')\nprint('Correct Predictions: {:d} - False Predictions: {:d}'.format(true_lr, false_lr))","756ffa1f":"for i in range(0, len(df_fin)-1):\n    if test_rf[i] == actual_result[i]:\n        true_rf += 1\n    else:\n        false_rf += 1\nprint('Prediction Results for Random Forest')\nprint('Correct Predictions: {:d} - False Predictions: {:d}'.format(true_rf, false_rf))","6d9a05d0":"acc_lr = (true_lr+1)\/len(df_fin)*100\nacc_rf = (true_rf+1)\/len(df_fin)*100\nacc_dt = (true_dt+1)\/len(df_fin)*100\nacc_xgb = (true_xgb+1)\/len(df_fin)*100\nacc_tot = acc_lr, acc_rf, acc_dt, acc_xgb\nlabels = 'Regression', 'Random Forest', 'Decision Tree', 'XGBoost'","d2715677":"plt.plot(labels, acc_tot)\nplt.ylabel('Accuracy percentage')\nplt.xlabel('Machine Learning methods')\nplt.title('5G')","84cac08a":"Channel, Service and Product types are determinant factors.","41b4ca84":"I will drop user_id before the training process. Beucause it is a challenging type and I do not want to mess with it so much. I will add that column back later on.","302036cb":"Starting now...","c5d4a490":"**LOGISTIC REGRESSION**","2e2bcd67":"We are going to make a prediction about ***is_5g*** column. The sample dataset has the correct results for ***is_5g*** column of test dataset.","42a93e6e":"* Precision: %99\n* Recall: %100\n* Accuracy: %99","4234de1c":"Now, our data looks like this.","e6f9fcf9":"There are not any missing elements on both datasets, that's nice.","835a018a":"# **5G User Prediction with Machine Learning and Deep Learning methods.**","bb19864f":"**DECISION TREE**","108a5898":"<img src=\"https:\/\/media.giphy.com\/media\/xUPOqo6E1XvWXwlCyQ\/giphy.gif\">","44a0aca9":"* Precision: %99\n* Recall: %100\n* Accuracy: %99","3aed2495":"* Precision: %99\n* Recall: %100\n* Accuracy: %99","7e045a58":"Now, I will count the true and false values that models predicted. Then I will look at the success rate of the models.","9c6edeef":"Checking to see how our different methods performed on the dataset.","d00cde5f":"# **We have come to an end to our notebook. I hope you find it informative and fun. Thank you!**","49b809ae":"**RANDOM FOREST**","2cabf9c6":"Now, I will try to look for connections for 5G users and see which categories are more important to the decision process.","21041f27":"Before we start with the predictions, we need to prepare our test dataset as well.","96640136":"**It turns out I have achieved %100 success rate with linear regression.**","47d3763c":"**NEURAL NETWORK**","369f04f1":"* Precision: %99\n* Recall: %99\n* Accuracy: %98","03f531a9":"**Predictions with the validation set look great. Now we will look at the test data.**","664f9af1":"I have checked on the test data by using sample data outputs. It seems I had great results with different models.\nNow we will look at them on a graph.","6f3ae0e9":"So far, I believe I have gathered enough information about dataset. I have looked at every column and their effect to the 5G.\nIn short, I am going to drop these columns: ***area_id, innet_months, total_times, total_flux, total_fee, pay_fee, age, activity_type, game_app_flux, live_app_flux, video_app_flux AND also the days.***","404ef946":"**XGBOOST**"}}