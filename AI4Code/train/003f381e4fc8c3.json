{"cell_type":{"661c45a6":"code","9857ab9e":"code","5f80ef5d":"code","41873b35":"code","17e1e838":"code","88ffc40b":"code","b37e191b":"code","e2ab2c4f":"code","79be0555":"code","4ca6cd7a":"code","dabb08aa":"code","1601844a":"code","de8b0a9b":"code","2caec238":"code","c3a88f06":"code","9440f066":"code","efad341a":"code","a33085fb":"code","c49fc4a1":"code","f3e376da":"code","bc34ec3a":"code","6c40dd27":"code","be782867":"code","5dce8730":"code","bc956504":"code","63d1c60e":"code","9d1bd13e":"code","d0a19aa0":"code","ce997b42":"code","963c40c8":"code","16964d8c":"markdown","43c31488":"markdown","48296280":"markdown","0b1cb364":"markdown","e41d85af":"markdown","67b28955":"markdown","09cd8b0d":"markdown","68c9a4b9":"markdown","f64a01c8":"markdown"},"source":{"661c45a6":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.simplefilter(action='ignore')","9857ab9e":"from sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn import tree\nfrom sklearn.cluster import KMeans\nfrom xgboost import XGBClassifier,XGBRFClassifier\nfrom sklearn.metrics import confusion_matrix,accuracy_score","5f80ef5d":"plt.style.use('ggplot')\n\norange_black = ['#fdc029', '#df861d', 'FF6347', '#aa3d01',\n                '#a30e15', '#800000', '#171820']\n\nplt.rcParams['figure.figsize'] = (10,5) \nplt.rcParams['figure.facecolor'] = '#FFFACD' \nplt.rcParams['axes.facecolor'] = 'FFFFE0' \nplt.rcParams['axes.grid'] = True \nplt.rcParams['grid.color'] = orange_black[3]\nplt.rcParams['grid.linestyle'] = '--' ","41873b35":"df = pd.DataFrame(load_breast_cancer().data)\ndf.columns = load_breast_cancer().feature_names\ndf['target'] = load_breast_cancer().target\ndf.head()","17e1e838":"df.shape","88ffc40b":"df.info()","b37e191b":"df.describe().T.style.bar(color='#d65f5f')","e2ab2c4f":"matrix = np.triu(df.corr(method='spearman'))\nf,ax=plt.subplots(figsize = (17,15),dpi=250)\nsns.heatmap(df.corr(method='spearman'),annot= True,fmt = \".0%\",ax=ax,\n            vmin = -1,\n            vmax = 1, mask = matrix,cmap = \"coolwarm\",\n            linewidth = 0.2,linecolor = \"white\")\nplt.xticks(rotation=70)\nplt.yticks(rotation=0)\nplt.title('Correlation matrix (spearman)', size = 30)\nplt.show()","79be0555":"plt.figure(figsize=(25,25))\nfor col,index in zip(df.columns,range(1,31)):\n    if col == 'target':\n        pass\n    else:\n        plt.subplot(6,5,index)\n        plt.hist(df.loc[df[\"target\"]==1][col],alpha=0.7,label=\"malignant\",density=True,bins=20)\n        plt.hist(df.loc[df[\"target\"]==0][col],alpha=0.7,label=\"benign\",density=True,bins=20)\n        plt.legend()\n        plt.title(col.upper())\nplt.tight_layout()\nplt.show()","4ca6cd7a":"def scatterAndBoxen(x, y):\n    global df\n    data = df.copy()\n    \n    data['TARGET'] = data['target'].replace([0, 1], ['benign'.upper(),'malignant'.upper()]) \n    plt.figure(figsize=(15,10))\n    plt.subplot(2,2,(1,2))\n    sns.scatterplot(data = data, x = x, y = y, hue = 'TARGET')\n    plt.xlabel(x.upper())\n    plt.ylabel(y.upper())\n    plt.subplot(2,2,3)\n    sns.boxenplot(data=data, x='TARGET', y = x)\n    plt.xlabel('')\n    plt.ylabel(x.upper())\n    plt.subplot(2,2,4)\n    sns.boxenplot(data=data, x='TARGET', y= y)\n    plt.xlabel('')\n    plt.ylabel(y.upper())\n    plt.show()","dabb08aa":"scatterAndBoxen('mean radius','mean area' )","1601844a":"scatterAndBoxen('mean radius','mean perimeter' )","de8b0a9b":"scatterAndBoxen('worst perimeter','mean radius' )","2caec238":"feature = []\nfor col in range(30):\n    if df.iloc[:,col].max() < 1:\n        feature.append(col)\nplt.figure(figsize=(14,10))\nsns.violinplot(data=df.iloc[:,feature], \n            orient=\"h\", palette=[\"teal\"])\nplt.title(\"Box Plot of Data\")\nplt.show()","c3a88f06":"feature = []\nfor col in range(30):\n    if df.iloc[:,col].max() > 1 and df.iloc[:,col].max() < 10:\n        feature.append(col)\nplt.figure(figsize=(14,6))\nsns.violinplot(data=df.iloc[:,feature], \n            orient=\"h\", palette=[\"teal\"])\nplt.title(\"Box Plot of Data\")\nplt.show()","9440f066":"feature = []\nfor col in range(30):\n    if df.iloc[:,col].max() > 10 and df.iloc[:,col].max() < 100:\n        feature.append(col)\nplt.figure(figsize=(14,8))\nsns.violinplot(data=df.iloc[:,feature], \n            orient=\"h\", palette=[\"teal\"])\nplt.title(\"Box Plot of Data\")\nplt.show()","efad341a":"feature = []\nfor col in range(30):\n    if df.iloc[:,col].max() > 100 and df.iloc[:,col].max() < 1000:\n        feature.append(col)\nplt.figure(figsize=(14,6))\nsns.violinplot(data=df.iloc[:,feature], \n            orient=\"h\", palette=[\"teal\"])\nplt.title(\"Box Plot of Data\")\nplt.show()","a33085fb":"feature = []\nfor col in range(30):\n    if df.iloc[:,col].max() > 1000:\n        feature.append(col)\nplt.figure(figsize=(14,6))\nsns.violinplot(data=df.iloc[:,feature], \n            orient=\"h\", palette=[\"teal\"])\nplt.title(\"Box Plot of Data\")\nplt.show()","c49fc4a1":"scaler = MinMaxScaler(feature_range=(-1, 1))\nscaler.fit(df.drop('target',axis=1))","f3e376da":"X = scaler.transform(df.drop('target',axis=1))\ny = df.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=123)","bc34ec3a":"warnings.simplefilter(action='ignore', category=FutureWarning)\nfrom yellowbrick.classifier import ROCAUC\nfrom yellowbrick.classifier import ConfusionMatrix\nfrom yellowbrick.classifier import DiscriminationThreshold","6c40dd27":"plt.style.use('ggplot')\n\norange_black = ['#fdc029', '#df861d', 'FF6347', '#aa3d01',\n                '#a30e15', '#800000', '#171820']\n\nplt.rcParams['figure.figsize'] = (10,5) \nplt.rcParams['figure.facecolor'] = '#FFFACD' \nplt.rcParams['axes.facecolor'] = 'FFFFE0' \nplt.rcParams['axes.grid'] = True \nplt.rcParams['grid.color'] = orange_black[3]\nplt.rcParams['grid.linestyle'] = '--' ","be782867":"classes = ['benign'.upper(),'malignant'.upper()]","5dce8730":"model = KNeighborsClassifier(12)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nprint(\"Acc:\",accuracy_score(y_test, y_pred))\n\nvisualizer = ROCAUC(model, classes=classes)\nvisualizer.fit(X_train, y_train)      \nvisualizer.score(X_test, y_test)        \nvisualizer.show();\n\nplt.figure(figsize=(3,3))\ncm = ConfusionMatrix(model, classes=classes)\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test)\nplt.xticks(rotation=0)\ncm.show();","bc956504":"model = LogisticRegression()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nprint(\"Acc:\",accuracy_score(y_test, y_pred))\n\nvisualizer = ROCAUC(model, classes=classes)\nvisualizer.fit(X_train, y_train)      \nvisualizer.score(X_test, y_test)        \nvisualizer.show();\n\nplt.figure(figsize=(3,3))\ncm = ConfusionMatrix(model, classes=classes)\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test)\nplt.xticks(rotation=0)\ncm.show();","63d1c60e":"model = GradientBoostingClassifier()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nprint(\"Acc:\",accuracy_score(y_test, y_pred))\n\nvisualizer = ROCAUC(model, classes=classes)\nvisualizer.fit(X_train, y_train)      \nvisualizer.score(X_test, y_test)        \nvisualizer.show();\n\nplt.figure(figsize=(3,3))\ncm = ConfusionMatrix(model, classes=classes)\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test)\nplt.xticks(rotation=0)\ncm.show();","9d1bd13e":"model = XGBClassifier()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nprint(\"Acc:\",accuracy_score(y_test, y_pred))\n\nvisualizer = ROCAUC(model, classes=classes)\nvisualizer.fit(X_train, y_train)      \nvisualizer.score(X_test, y_test)        \nvisualizer.show();\n\nplt.figure(figsize=(3,3))\ncm = ConfusionMatrix(model, classes=classes)\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test)\nplt.xticks(rotation=0)\ncm.show();","d0a19aa0":"model = XGBRFClassifier()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nprint(\"Acc:\",accuracy_score(y_test, y_pred))\n\nvisualizer = ROCAUC(model, classes=classes)\nvisualizer.fit(X_train, y_train)      \nvisualizer.score(X_test, y_test)        \nvisualizer.show();\n\nplt.figure(figsize=(3,3))\ncm = ConfusionMatrix(model, classes=classes)\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test)\nplt.xticks(rotation=0)\ncm.show();","ce997b42":"def Prediction(test):\n    global classes, model\n    \n    pred = model.predict(test.reshape(1, -1))\n    \n    if (pred == 0):\n        result = classes[0]\n    else:\n        result = classes[1]\n    return result","963c40c8":"random = np.random.randint(0,len(X_test),1)\nprint(\"Predict:\",Prediction(X_test[random]))\nprint(\"Actual:\",y_test.values[random])","16964d8c":"<a id=\"t3.\"><\/a>\n# 3. Classification","43c31488":"<a id=\"t1.\"><\/a>\n# 1. Import data and python packages","48296280":"<h1><center>Breast Cancer Prediction with AI<\/center><\/h1>\n\n<center><img src=\"https:\/\/static-01.hindawi.com\/styles\/hindawi_wide\/s3\/2019-11\/Cancer_Awareness-2019_blog_v1.0_noText.jpg?itok=CR034IE-\"><\/center>","0b1cb364":"<a id=\"t3.3\"><\/a>\n## 3.3 Models","e41d85af":"# **Introduction**\nCancer occurs when changes called mutations take place in genes that regulate cell growth. The mutations let the cells divide and multiply in an uncontrolled way.\n\nBreast cancer is cancer that develops in breast cells. Typically, the cancer forms in either the lobules or the ducts of the breast.\n\nLobules are the glands that produce milk, and ducts are the pathways that bring the milk from the glands to the nipple. Cancer can also occur in the fatty tissue or the fibrous connective tissue within your breast.\n\nThe uncontrolled cancer cells often invade other healthy breast tissue and can travel to the lymph nodes under the arms. The lymph nodes are a primary pathway that help the cancer cells move to other parts of the body.\n\n## Description\nFeatures are computed from a digitized image of a fine needle aspirate (FNA) of a breast mass. They describe characteristics of the cell nuclei present in the image.\nn the 3-dimensional space is that described in: [K. P. Bennett and O. L. Mangasarian: \"Robust Linear Programming Discrimination of Two Linearly Inseparable Sets\", Optimization Methods and Software 1, 1992, 23-34].\n\nThis database is also available through the UW CS ftp server:\nftp ftp.cs.wisc.edu\ncd math-prog\/cpo-dataset\/machine-learn\/WDBC\/\n\nAlso can be found on UCI Machine Learning Repository: https:\/\/archive.ics.uci.edu\/ml\/datasets\/Breast+Cancer+Wisconsin+%28Diagnostic%29\n\nAttribute Information:\n\n1) ID number\n2) Diagnosis (M = malignant, B = benign)\n3-32)\n\nTen real-valued features are computed for each cell nucleus:\n\na) radius (mean of distances from center to points on the perimeter)\n\nb) texture (standard deviation of gray-scale values)\n\nc) perimeter\n\nd) area\n\ne) smoothness (local variation in radius lengths)\n\nf) compactness (perimeter^2 \/ area - 1.0)\n\ng) concavity (severity of concave portions of the contour)\n\nh) concave points (number of concave portions of the contour)\n\ni) symmetry\n\nj) fractal dimension (\"coastline approximation\" - 1)\n\nThe mean, standard error and \"worst\" or largest (mean of the three\nlargest values) of these features were computed for each image,\nresulting in 30 features. For instance, field 3 is Mean Radius, field\n13 is Radius SE, field 23 is Worst Radius.\n\nAll feature values are recoded with four significant digits.\n\nMissing attribute values: none\n\nClass distribution: 357 benign, 212 malignant\n\n## Contents\n\n1. [Import data and python packages](#t1.)\n\n2. [Data visualization](#t2.)\n\n3. [Classification](#t3.)\n\n    3.1 [Split data for train and test](#t3.1)\n    \n    3.2 [Functions for models](#t3.2)\n    \n    3.3 [Models](#t3.3)\n\n4. [Result](#t4.)","67b28955":"<a id=\"t2.\"><\/a>\n# 2. Data visualization","09cd8b0d":"<a id=\"t3.2\"><\/a>\n## 3.2 Functions for models","68c9a4b9":"<a id=\"t4.\"><\/a>\n# 4. Result","f64a01c8":"<a id=\"t3.1\"><\/a>\n## 3.1 Split data for train and test"}}