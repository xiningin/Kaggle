{"cell_type":{"f88724cf":"code","0887cba0":"code","b3e68875":"code","9d87e5c8":"code","16e1f068":"code","b04c54ec":"code","46189238":"code","a0c17f96":"code","4520ba37":"code","242e9c42":"code","1a269618":"code","8e73cae6":"code","d6eb5c5c":"code","2c6e3ad4":"code","f66aaf2c":"code","2139cf87":"code","f8b0a568":"code","1111d21a":"code","317a1d0b":"code","2e781ba7":"markdown","77aa2779":"markdown","71c90e21":"markdown","df2bd5e4":"markdown","85b08bae":"markdown","52701079":"markdown","b6ee2cab":"markdown","86347f8e":"markdown","f92d43c5":"markdown","398be2d3":"markdown","72965daa":"markdown","75212aff":"markdown","0879b7bc":"markdown","9a03987a":"markdown"},"source":{"f88724cf":"print(14 * \" >\", \"\\t n.B.a. \\t\", \"< \" * 14, \"\\n\\n\\n\")\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib_venn as venn\nfrom math import pi\nfrom pandas.plotting import parallel_coordinates\nimport plotly.graph_objs as go\nimport plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0887cba0":"# Define dictionary\ndictionary = {\"column1\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\n              \"column2\":[1,2,3,4,np.nan,6,7,8,np.nan,10,np.nan,12,13,14,15,16,np.nan,18,np.nan,20],\n              \"column3\":[1,2,3,4,np.nan,6,7,8,9,10,11,12,13,np.nan,15,16,17,18,np.nan,20]}\n\n\n# Create data frame from dictionary\ndata_missingno = pd.DataFrame(dictionary) ","b3e68875":"data_missingno.head(10)","9d87e5c8":"# import missingno library\n\nimport missingno as msno\n\nmsno.matrix(data_missingno)\nplt.show()","16e1f068":"msno.bar(data_missingno)\nplt.show()","b04c54ec":"data = pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\ndata.head()","46189238":"data.rename(columns = {'fixed acidity': 'fixed_acidity', 'volatile acidity': 'volatile_acidity', 'citric acid': 'citric_acid', 'residual sugar': 'residual_sugar',\n       'free sulfur dioxide': 'free_sulfur_dioxide', 'total sulfur dioxide': 'total_sulfur_dioxide'}, inplace=True)\ndata.columns","a0c17f96":"data.info()","4520ba37":"# Make the plot\nplt.figure(figsize=(15,10))\nparallel_coordinates(data, 'quality', colormap=plt.get_cmap(\"Set1\"))\nplt.title(\"Red Wine data class visualization according to quality (3,4,5,6,7,8)\")\nplt.xlabel(\"Ingredients of data set\")\nplt.ylabel(\"level\")\nplt.savefig('graph.png')\nplt.show()","242e9c42":"# Calculate the correlation between individuals.\ncorr = data.iloc[:,0:10].corr()\ncorr","1a269618":"# import networkx library\nimport networkx as nx\n\n# Transform it in a links data frame (3 columns only):\nlinks = corr.stack().reset_index()\nlinks.columns = ['var1', 'var2','value']     # sadece 3 tane sutun aliyoruz cunku 4 ozellikten kendisi haric olani almaliyiz yani 3 adet\nlinks.head(10)","8e73cae6":"# correlation\nthreshold = -1           # Simdi bu esik degerine gore aradaki bagi gosteren bir grafik cizelim\n\n# Keep only correlation over a threshold and remove self correlation (cor(A,A)=1)\nlinks_filtered=links.loc[ (links['value'] >= threshold ) & (links['var1'] != links['var2']) ]\n \n# Build your graph\nG=nx.from_pandas_edgelist(links_filtered, 'var1', 'var2')\n \n# Plot the network\nnx.draw_circular(G, with_labels=True, node_color='orange', node_size=300, edge_color='red', linewidths=1, font_size=15)","d6eb5c5c":"data.head()","2c6e3ad4":"# venn2\nfrom matplotlib_venn import venn2\npH = data.iloc[:,0]\ncitric_acid = data.iloc[:,1]\nresidual_sugar = data.iloc[:,2]\nchlorides = data.iloc[:,3]\ndensity = data.iloc[:,4]\n# First way to call the 2 group Venn diagram\nvenn2(subsets = (len(pH)-15, len(citric_acid)-15, 15), set_labels = ('pH', 'citric_acid'))\nplt.show()","f66aaf2c":"# donut plot\nfeature_names = \"pH\",\"citric_acid\",\"residual_sugar\",\"density\"\nfeature_size = [len(pH),len(citric_acid),len(residual_sugar),len(density)]\n\n\n# create a circle for the center of plot\ncircle = plt.Circle((0,0),0.22,color = \"white\")\nplt.pie(feature_size, labels = feature_names, colors = [\"red\",\"green\",\"blue\",\"cyan\"] )\np = plt.gcf()\np.gca().add_artist(circle)\nplt.title(\"Rate of Each Materials\")\nplt.show()","2139cf87":"# spider graph\ncategories = list(data)[1:]\nN = len(categories)\nangles = [ n \/ float(N)*2*pi for n in range(N)]\nangles = angles + angles[:1]\nplt.figure(figsize = (10,10))\nax = plt.subplot(111,polar = True)\nax.set_theta_offset(pi\/2)\nax.set_theta_direction(-1)\nplt.xticks(angles[:-1],categories)\nax.set_rlabel_position(0)\nplt.yticks([0,2,4,6],[\"0\",\"2\",\"4\",\"6\"],color= \"red\", size = 7)\nplt.ylim(0,6)\n\nvalues = data.loc[0].drop(\"quality\").values.flatten().tolist()\nvalues = values + values[:1]\nax.plot(angles,values,linewidth = 1,linestyle=\"solid\",label =\"pH\" )\nax.fill(angles,values,\"b\",alpha=0.1)\n\nvalues = data.loc[1].drop(\"quality\").values.flatten().tolist()\nvalues = values + values[:1]\nax.plot(angles,values,linewidth = 1,linestyle=\"solid\",label =\"density\" )\nax.fill(angles,values,\"orange\",alpha=0.1)\nplt.legend(loc = \"upper left\",bbox_to_anchor = (0.1,0.1))\nplt.show()","f8b0a568":"# cluster map (dendogram and tree)\n\ndf = data.loc[:,[\"pH\",\"citric_acid\",\"residual_sugar\",\"density\"]]\ndf1 = data.quality\nx = dict(zip(df1.unique(),\"rgb\"))\nrow_colors = df1.map(x)\ncg = sns.clustermap(df,row_colors=row_colors,figsize=(12, 12),metric=\"correlation\")\nplt.setp(cg.ax_heatmap.yaxis.get_majorticklabels(),rotation = 0,size =8)\nplt.show()","1111d21a":"# trace1 is line plot\n# go: graph object\ntrace1 = go.Scatter(\n    x=df.index,\n    y=df.pH,\n    mode = \"markers\",\n    xaxis='x2',\n    yaxis='y2',\n    name = \"pH\",\n    marker = dict(color = 'rgba(0, 112, 20, 0.8)'),\n)\n\n# trace2 is histogram\ntrace2 = go.Histogram(\n    x=df.pH,\n    opacity=0.75,\n    name = \"pH\",\n    marker=dict(color='rgba(10, 200, 250, 0.6)'))\n\n# add trace1 and trace2\ndata1 = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.7, 1],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = ' pH Histogram and Scatter Plot'\n)\nfig = go.Figure(data=data1, layout=layout)\niplot(fig)","317a1d0b":"\nquality7 = data[data.quality == 7]\n# # data of iris virginica\nquality8 = data[data.quality == 8]\n\n# trace1 =  iris setosa\ntrace1 = go.Scatter3d(\n    x=quality7.pH,\n    y=quality7.density,\n    z=quality7.sulphates,\n    mode='markers',\n    name = \"quality-7\",\n    marker=dict(\n        color='rgb(217, 100, 100)',\n        size=12,\n        line=dict(\n            color='rgb(255, 255, 255)',\n            width=0.1\n        )\n    )\n)\n# trace2 =  iris virginica\ntrace2 = go.Scatter3d(\n    x=quality8.pH,\n    y=quality8.density,\n    z=quality8.sulphates,\n    mode='markers',\n    name = \"quality-8\",\n    marker=dict(\n        color='rgb(54, 170, 127)',\n        size=12,\n        line=dict(\n            color='rgb(204, 204, 204)',\n            width=0.1\n        )\n    )\n)\ndata2 = [trace1, trace2]\nlayout = go.Layout(\n    title = ' 3D quality-7 and quality-8',\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    )\n)\nfig = go.Figure(data=data2, layout=layout)\niplot(fig)","2e781ba7":"# Cluster Map (Seaborn)\n\n## Indicates which properties are linked to each other.","77aa2779":"# Spider Chart (Matplotlib)","71c90e21":"## The Venn diagram shows us the link between them.","df2bd5e4":"# Parallel Plots (Pandas)","85b08bae":"# Venn (Matplotlib)","52701079":"Let's look visually according to the dataframe we prepared","b6ee2cab":"## Missingno bar plot","86347f8e":"# Network Charts (Networkx)","f92d43c5":"## **The main purpose of this study is to create sample visualizations on a data set!**","398be2d3":"# Inset Plots (Plotly)","72965daa":"Donut (Matplotlib)","75212aff":"Let's give random nan values to see NaN values","0879b7bc":"**These images can be improved and made more beautiful. If there are places that are not understood, you can ask!**","9a03987a":"# Basic 3D Scatter Plot (Plotly)"}}