{"cell_type":{"6f2590cf":"code","65212cde":"code","7d8fc80f":"code","66cea36b":"code","242a777f":"code","ee540378":"code","3a6a65c5":"code","7f1b23b9":"code","253820db":"code","364357df":"code","2a5c993b":"code","932250d4":"code","aab70dae":"code","da9f4778":"code","c09b175b":"code","4c442b22":"code","ada26f19":"code","144d239c":"code","aa6e36a9":"code","70c0a159":"code","6a9a37dc":"code","e53a164e":"code","a7ebc40b":"code","6f219d9a":"code","e5b243a2":"code","9c3849a3":"code","be6ab593":"code","10d0ce46":"code","b48c48c9":"code","51ebbefa":"code","536b4c85":"code","63bbf535":"code","2a423100":"code","5f9612df":"code","56df18f5":"code","52a6c5c5":"code","795ac44e":"code","a6d5c105":"code","e1d5a3d9":"code","51e74eb9":"code","fcbdbb9e":"code","06dcfe59":"code","cae757a0":"code","7522a9a3":"code","f4f43284":"code","a9538de0":"code","4cf1d173":"code","fa941a2f":"code","0912d2e7":"code","7f3e8bcb":"code","bfd226c6":"code","ac922952":"code","88c808b0":"code","e5b1ab45":"code","6326271f":"code","48cfca77":"code","044bdc69":"markdown","d9ba9257":"markdown","164a5e42":"markdown","e66a7254":"markdown","e7bb572c":"markdown","1216b2b1":"markdown","847f4d1b":"markdown","c136fd1b":"markdown","1d4c4c92":"markdown","ebef55fa":"markdown","e20f0c54":"markdown","66ec076e":"markdown","4527e9e5":"markdown","907e88bf":"markdown","b7899ea6":"markdown","1afcd513":"markdown","3684ba33":"markdown","f4bffbda":"markdown","326de2ac":"markdown","95f7fc21":"markdown","865d8e55":"markdown","942a8b7b":"markdown","fec706c6":"markdown","97284f38":"markdown","a534be9a":"markdown","7620dee3":"markdown","8c8a51da":"markdown","27e899b2":"markdown","5c32217f":"markdown","8740e320":"markdown","8ac94bf3":"markdown","4079fe15":"markdown","ca8280d3":"markdown"},"source":{"6f2590cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65212cde":"import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport pprint\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.model_selection import cross_validate, StratifiedKFold, train_test_split\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import LabelEncoder","7d8fc80f":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\n\ndata = pd.concat([train, test], sort=False)","66cea36b":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\ntrain.info()","242a777f":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ntest.info()","ee540378":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\ntrain.head(10)","3a6a65c5":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ntest.head(10)","7f1b23b9":"sns.countplot(x='Sex', hue='Survived', data=data)\nplt.show()","253820db":"# Age \u306e\u6b20\u640d\u5024\u3092\u9664\u3044\u3066\u53ef\u8996\u5316\u3002\ndef survived_sex_and_age_hist(d):\n    facet = sns.FacetGrid(d[d['Age'].notnull()], hue=\"Survived\",aspect=2)\n    facet.map(sns.kdeplot, 'Age', shade= True)\n    facet.set(xlim=(0, d.loc[:, 'Age'].max()))\n    facet.add_legend()\n    plt.show()","364357df":"# \u5168\u4f53\nsurvived_sex_and_age_hist(train)","2a5c993b":"# \u7537\u6027\ntrain_male = train.loc[train['Sex'] == 'male']\nsurvived_sex_and_age_hist(train_male)","932250d4":"# \u5973\u6027\ntrain_female = train.loc[train['Sex'] == 'female']\nsurvived_sex_and_age_hist(train_female)","aab70dae":"sns.countplot(x='SibSp', hue='Survived', data=train)\nplt.legend(loc='upper right', title='Survived')\nplt.show()","da9f4778":"sns.countplot(x='Parch', hue='Survived', data=train)\nplt.legend(loc='upper right', title='Survived')\nplt.show()","c09b175b":"sns.countplot(x='Pclass', hue='Survived', data=train)\nplt.legend(loc='upper left', title='Survived')\nplt.show()","4c442b22":"sns.countplot(x='Embarked', hue='Survived', data=train)\nplt.legend(loc='upper right', title='Survived')\nplt.show()","ada26f19":"facet = sns.FacetGrid(data[data['Fare'].notnull()], hue=\"Survived\",aspect=2)\nfacet.map(sns.kdeplot, 'Fare', shade= True)\nfacet.set(xlim=(0, data.loc[:, 'Fare'].max()))\nfacet.add_legend()\nplt.show()","144d239c":"# \u6b6a\u5ea6\ndata['Fare'].skew()","aa6e36a9":"# \u5bfe\u6570\u5909\u63db\u3057\u305f\u30b0\u30e9\u30d5\nfare_log1p_df = data.copy()\nfare_log1p_df['Fare'] = np.log1p(fare_log1p_df['Fare'])\n\nfacet = sns.FacetGrid(fare_log1p_df[fare_log1p_df['Fare'].notnull()], hue=\"Survived\",aspect=2)\nfacet.map(sns.kdeplot, 'Fare', shade= True)\nfacet.set(xlim=(0, fare_log1p_df.loc[:, 'Fare'].max()))\nfacet.add_legend()\nplt.show()","70c0a159":"# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306a\u3089 One-hot \u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3058\u3083\u306a\u304f\u3066\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u826f\u3044\u3089\u3057\u3044\ndef label_encoding(df, feature_name):\n    le_age = LabelEncoder()\n    \n    le_age = le_age.fit(df[feature_name])\n    df.loc[:, feature_name] =  le_age.transform(df.loc[:, feature_name])","6a9a37dc":"# \u63a8\u5b9a\u306b\u4f7f\u7528\u3059\u308b\u9805\u76ee\nage_df = data[['Age', 'Pclass', 'Sex', 'Parch', 'SibSp']]\n\nknown_age_df = age_df[age_df.Age.notnull()]\nlabel_encoding(known_age_df, 'Sex')\n\nX = known_age_df.values[:, 1:]\ny = known_age_df.values[:, 0]\n\nrfr = RandomForestRegressor(random_state=0, n_estimators=100, n_jobs=-1)\nrfr.fit(X, y)\n\n# \u6b20\u640d\u5024\u306e\u63a8\u5b9a\nunknown_age_df = age_df[age_df.Age.isnull()]\nlabel_encoding(unknown_age_df, 'Sex')\n\npredicted_age = rfr.predict(unknown_age_df.values[:, 1::])\ndata.loc[(data.Age.isnull()), 'Age'] = predicted_age","e53a164e":"# \u5168\u4f53\nsurvived_sex_and_age_hist(data[data.Survived.notnull()])","a7ebc40b":"# \u7537\u6027\ndata_male = data.loc[(data['Sex'] == 'male') & (data.Survived.notnull())]\nsurvived_sex_and_age_hist(data_male)","6f219d9a":"# \u5973\u6027\ndata_female = data.loc[(data['Sex'] == 'female') & (data.Survived.notnull())]\nsurvived_sex_and_age_hist(data_female)","e5b243a2":"data.loc[data.Embarked.isnull(), 'Embarked'] = 'S'","9c3849a3":"# \u6b20\u640d\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\ndata.loc[data['Fare'].isnull(), :]","be6ab593":"fare_df = data.loc[(data['Embarked'] == 'S') & (data['Pclass'] == 3), 'Fare'].median()\ndata['Fare'] = data['Fare'].fillna(fare_df)","10d0ce46":"data['FamilySize'] = data['Parch'] + data['SibSp'] + 1","b48c48c9":"sns.countplot(x='FamilySize', hue='Survived', data=data[data.Survived.notnull()])\nplt.legend(loc='upper right', title='Survived')\nplt.show()","51ebbefa":"data['IsAlone'] = 0\ndata.loc[data['FamilySize'] == 1, 'IsAlone'] = 1","536b4c85":"sns.countplot(x='IsAlone', hue='Survived', data=data[data.Survived.notnull()])\nplt.legend(loc='upper right', title='Survived')\nplt.show()","63bbf535":"ticket_count_func = dict(data['Ticket'].value_counts())\ndata['TicketGroup'] = data['Ticket'].map(ticket_count_func)","2a423100":"sns.countplot(x='TicketGroup', hue='Survived', data=data[data.Survived.notnull()])\nplt.legend(loc='upper right', title='Survived')\nplt.show()","5f9612df":"# \u656c\u79f0\u3092\u540d\u524d\u304b\u3089\u62bd\u51fa\u3057\u3001\u30ab\u30a6\u30f3\u30c8\ndata['Honorific'] = data['Name'].map(lambda x: x.split(', ')[1].split('. ')[0])\ndata['Honorific'].value_counts()","56df18f5":"# \u30af\u30ed\u30b9\u96c6\u8a08\ncross_train = data[data.Survived.notnull()]\npd.crosstab(cross_train['Honorific'], cross_train['Survived'])","52a6c5c5":"# 10 \u4ef6\u672a\u6e80\u306e\u656c\u79f0\u306f Rare \u306b\u307e\u3068\u3081\u308b\ndata_honorific = data['Honorific'].value_counts()\ndata_honorific = data_honorific[data_honorific < 10]\n\ndata.loc[data['Honorific'].isin(data_honorific.index.values), 'Honorific'] = 'Rare'","795ac44e":"sns.countplot(x='Honorific', hue='Survived', data=data[data.Survived.notnull()])\nplt.legend(loc='upper right', title='Survived')\nplt.show()","a6d5c105":"# \u6b20\u640d\u5024\u306f Unknown \u3067\u57cb\u3081\u308b\ndata['Cabin'] = data['Cabin'].map(lambda x:'UNK' if pd.isnull(x) else str(x)[0])","e1d5a3d9":"sns.countplot(x='Cabin', hue='Survived', data=data)\nplt.legend(loc='upper right', title='Survived')\nplt.show()","51e74eb9":"data.loc[(data['Cabin'] == 'G') | (data['Cabin'] == 'T'), 'Cabin'] = 'Rare'","fcbdbb9e":"sns.countplot(x='Cabin', hue='Survived', data=data)\nplt.legend(loc='upper right', title='Survived')\nplt.show()","06dcfe59":"data['Surname'] = data['Name'].map(lambda name:name.split(',')[0].strip())\ndata['FamilyGroup'] = data['Surname'].map(data['Surname'].value_counts()) \n\nsns.countplot(x='FamilyGroup', hue='Survived', data=data[data.Survived.notnull()])\nplt.legend(loc='upper right', title='Survived')\nplt.show()","cae757a0":"# \u30c7\u30fc\u30bf\u578b\u306e\u78ba\u8a8d\ndata.dtypes","7522a9a3":"# \u540d\u7fa9\u5c3a\u5ea6\u5909\u6570\u306e\u65b9\u3092\u6570\u5024\u304b\u3089\u6587\u5b57\u5217\u306b\u5909\u63db(\u5024\u304c 3 \u3064\u3042\u308b\u304c\u6570\u5b57\u306e\u5927\u5c0f\u306b\u610f\u5473\u306f\u306a\u3044\u305f\u3081)\ndata.Pclass = data.Pclass.astype('str')","f4f43284":"# \u30c7\u30fc\u30bf\u578b\u306e\u78ba\u8a8d\ndata.dtypes","a9538de0":"# \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\ndata.head(10)","4cf1d173":"# \u6700\u5f8c\u306e submission.csv \u7528\u306b PassengerId \u306e\u4e00\u89a7\u3092\u53d6\u5f97\ntest_passenger_ids = test['PassengerId']","fa941a2f":"# \u4f7f\u7528\u3057\u306a\u3044\u7279\u5fb4\u91cf\u3092\u524a\u9664\ndata.drop(['PassengerId', 'Name', 'Ticket', 'Surname'], axis=1, inplace=True)","0912d2e7":"# \u6027\u5225\u3092\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3001\u4ed6\u306e\u540d\u7fa9\u5c3a\u5ea6\u5909\u6570\u306f One-hot \u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nlabel_encoding(data, 'Sex')\ndata = pd.get_dummies(data)","7f3e8bcb":"# \u5217\u306e\u78ba\u8a8d\ndata.columns","bfd226c6":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5206\u5272\ntrain = data[data['Survived'].notnull()]\ntest = data[data['Survived'].isnull()]\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u306f\u4e0d\u8981\u306a Survived \u3092\u524a\u9664\ntest.drop('Survived', axis=1, inplace=True)\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u304b\u3089 Survived \u4ee5\u5916\u3092\u62bd\u51fa\nX = train.values[:, 1:]  \n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u304b\u3089 Survived \u3060\u3051\u3092\u62bd\u51fa\ny = train.values[:, 0] \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0, stratify=y)","ac922952":"# \u7279\u5fb4\u91cf\u306e\u4e00\u89a7\nlist(train.columns.drop('Survived'))","88c808b0":"# \u7279\u5fb4\u91cf\u3092 20 \u500b\u307e\u3067\u3068\u3059\u308b\nselect = SelectKBest(k = 20)\n\n# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\nclf = RandomForestClassifier(random_state=0, n_estimators=100, max_depth=6, max_features='sqrt')\n\npipeline = make_pipeline(select, clf)\npipeline.fit(X_train, y_train)","e5b1ab45":"scoring = {'precision': 'precision_macro',\n           'recall': 'recall_macro',\n           'f1_score': 'f1_macro'}\n\n# n_splits \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306f 5\nskf = StratifiedKFold(shuffle=True, random_state=0)\nscores = cross_validate(pipeline, X_test, y_test, cv=skf, scoring=scoring)\n\npprint.pprint(scores)","6326271f":"plt.figure(figsize=(20, 10))\nplt.barh(\n    test.columns[np.argsort(clf.feature_importances_)],\n    clf.feature_importances_[np.argsort(clf.feature_importances_)],\n    label='RandomForestClassifier'\n)\nplt.title('RandomForestClassifier features importance')","48cfca77":"# to_csv \u3067\u4e0a\u66f8\u304d\u3055\u308c\u308b\u306f\u305a\u3060\u3051\u3069\u306a\u3093\u304b Output \u306b\u8a8d\u8b58\u3055\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u4e00\u5fdc\u6d88\u3057\u3066\u304b\u3089\u4f5c\u3063\u3066\u307f\u308b\nif os.path.exists('submission.csv'):\n    os.remove('submission.csv')\n\npredictions = pipeline.predict(test.values)\nsubmission = pd.DataFrame({'PassengerId': test_passenger_ids, 'Survived': predictions.astype(np.int32)})\n\nsubmission.to_csv('submission.csv', index=False)","044bdc69":"# \u4ea4\u5dee\u691c\u8a3c","d9ba9257":"# \u540c\u3058\u30c1\u30b1\u30c3\u30c8\u756a\u53f7\u306e\u6570\u306e\u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\n\u540c\u3058\u30c1\u30b1\u30c3\u30c8\u756a\u53f7\u3068\u3044\u3046\u3053\u3068\u306f\u540c\u5ba4\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b  \n\u5bb6\u65cf\u3068\u540c\u3058\u3067\u884c\u52d5\u3092\u5171\u306b\u3059\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u304f\u3001\u540c\u3058\u904b\u547d\u3092\u6b69\u3093\u3060\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u63a8\u6e2c\u3067\u304d\u308b","164a5e42":"\u7537\u6027\u306f 10 \u6b73\u304f\u3089\u3044\u307e\u3067\u306a\u3089\u3080\u3057\u308d\u751f\u5b58\u7387\u304c\u9ad8\u3044  \n\u4ee5\u964d\u306f\u4f55\u6b73\u3067\u3082\u751f\u5b58\u7387\u306f\u826f\u304f\u3066\u534a\u5206","e66a7254":"# \u656c\u79f0\u306e\u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\n\u540d\u524d\u304b\u3089\u656c\u79f0\u3092\u62bd\u51fa\u3059\u308b  \n\u540d\u524d\u306f First name, Middle name, Last name \u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8","e7bb572c":"\u5973\u6027\u306f 20 \u6b73\u4ee5\u4e0b\u304f\u3089\u3044\u307e\u3067\u306f\u751f\u5b58\u7387\u304c\u4f4e\u3044","1216b2b1":"# \u540c\u4e57\u3057\u305f\u89aa\u5b50\u4f9b\u306e\u6570\u3068\u751f\u5b58\u306e\u95a2\u4fc2\u6027\nSibSp \u3068\u540c\u3058\u3053\u3068\u304c\u8a00\u3048\u308b","847f4d1b":"# 1 \u4eba\u304b\u3069\u3046\u304b\u3092\u793a\u3059\u7279\u5fb4\u91cf\u306e\u8ffd\u52a0\n\u5bb6\u65cf\u304c\u3044\u306a\u3044(1 \u4eba)\u3068\u3044\u3046\u3053\u3068\u81ea\u4f53\u3082\u751f\u5b58\u7387\u306b\u5f71\u97ff\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067 1 \u4eba\u304b\u3069\u3046\u304b\u3068\u3044\u3046\u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\u3059\u308b","c136fd1b":"# \u904b\u8cc3\u306e\u6b20\u640d\u5024\u3092\u88dc\u5b8c\n\u904b\u8cc3\u306b\u95a2\u4fc2\u3057\u305d\u3046\u306a\u7279\u5fb4\u91cf\u306f\u6e2f\u3068\u30c1\u30b1\u30c3\u30c8\u306e\u30af\u30e9\u30b9  \n\u6b20\u640d\u30c7\u30fc\u30bf\u306f\u6e2f\u304c\u30b5\u30a6\u30b5\u30f3\u30d7\u30c8\u30f3\u3001\u30c1\u30b1\u30c3\u30c8\u306e\u30af\u30e9\u30b9\u304c 3 \u306a\u305f\u3081\u3001\u540c\u3058\u30c7\u30fc\u30bf\u306e\u4e2d\u592e\u5024\u3092\u53d6\u308b","1d4c4c92":"1 \u4eba\u3067\u306f\u306a\u3044\u5834\u5408\u3001\u5927\u4f53\u751f\u5b58\u3059\u308b\u304b\u4ea1\u304f\u306a\u308b\u304b\u306f\u540c\u3058\u304f\u3089\u3044\u3060\u304c\u3001 1 \u4eba\u306e\u5834\u5408\u306f\u751f\u5b58\u7387\u304c\u4f4e\u3044","ebef55fa":"1 \u4eba(\u81ea\u5206\u3060\u3051)\u307e\u305f\u306f 5 \u4eba\u4ee5\u4e0a(\u591a\u3059\u304e\u3066\u8eab\u52d5\u304d\u304c\u53d6\u308a\u306b\u304f\u3044)\u3060\u3068\u751f\u5b58\u7387\u304c\u4f4e\u3044","e20f0c54":"# \u6e2f\u306e\u6b20\u640d\u5024\u3092\u88dc\u5b8c\n2 \u4ef6\u3057\u304b\u306a\u3044\u306e\u3067\u6700\u3082\u591a\u3044\u30b5\u30a6\u30b5\u30f3\u30d7\u30c8\u30f3\u3067\u88dc\u5b8c\u3059\u308b","66ec076e":"# \u6027\u5225\u3068\u751f\u5b58\u306e\u95a2\u4fc2\u6027\n\u7537\u6027\u306e\u751f\u5b58\u7387\u304c\u4f4e\u304f\u3001\u5973\u6027\u306e\u751f\u5b58\u7387\u304c\u9ad8\u3044\u3053\u3068\u304b\u3089\u6027\u5225\u3068\u751f\u5b58\u7387\u306b\u306f\u95a2\u9023\u304c\u3042\u308b\u3068\u8a00\u3048\u308b  \n\u5b9f\u969b\u3001\u5973\u6027\u3084\u5b50\u4f9b\u306f\u512a\u5148\u3055\u308c\u3066\u3044\u305f\u3089\u3057\u3044","4527e9e5":"# Submit \u7528 CSV \u306e\u4f5c\u6210","907e88bf":"# \u5bb6\u65cf\u306e\u6570\u3092\u8868\u3059\u7279\u5fb4\u91cf\u306e\u8ffd\u52a0\n\u3053\u308c\u307e\u3067\u78ba\u8a8d\u3057\u305f\u30c7\u30fc\u30bf\u304b\u3089\u5bb6\u65cf(SibSp, Parch)\u306e\u4eba\u6570\u304c\u751f\u5b58\u7387\u306b\u5f71\u97ff\u3057\u3066\u3044\u308b\u3068\u8a00\u3048\u308b\u305f\u3081\u3001\u81ea\u8eab\u3092\u542b\u3081\u305f\u5bb6\u65cf\u306e\u4eba\u6570\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b(\u5bb6\u65cf\u306f\u57fa\u672c\u7684\u306b\u4e00\u7dd2\u306b\u9003\u3052\u3066\u3044\u308b\u3060\u308d\u3046\u304b\u3089\u904b\u547d\u3092\u5171\u306b\u3059\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044)","b7899ea6":"# \u540c\u4e57\u3057\u305f\u5144\u5f1f\u59c9\u59b9\u3001\u914d\u5076\u8005\u306e\u6570\u3068\u751f\u5b58\u306e\u95a2\u4fc2\u6027\n0 \u4eba\u3067\u306f\u751f\u5b58\u7387\u304c\u4f4e\u304f\u30011 \u4eba\u3067\u306f\u3069\u3046\u9003\u3052\u308c\u3070\u3044\u3044\u304b\u56f0\u3063\u305f\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u63a8\u6e2c\u3067\u304d\u308b  \n\u307e\u305f\u30011 \uff5e 2 \u4eba\u306a\u3089\u751f\u5b58\u7387\u304c\u9ad8\u3044\u304c\u30013 \u4eba\u3092\u8d85\u3048\u308b\u3068\u751f\u5b58\u7387\u304c\u4f4e\u304f\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u591a\u304f\u306a\u308b\u3068\u8eab\u52d5\u304d\u304c\u53d6\u308a\u306b\u304f\u304b\u3063\u305f\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u63a8\u6e2c\u3067\u304d\u308b","1afcd513":"# \u5bb6\u65cf\u306e\u6570\u306e\u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\n\u82d7\u5b57\u304c\u540c\u3058\u4eba\u3092\u5bb6\u65cf\u3068\u307f\u306a\u3059","3684ba33":"# \u30c7\u30fc\u30bf\u306e\u8981\u7d04\u60c5\u5831\u3068\u30c7\u30fc\u30bf\u629c\u7c8b\n\u5b66\u7fd2\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u5408\u308f\u305b\u3066 1309 \u4ef6","f4bffbda":"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f 418 \u4ef6  \nFare 1 \u4ef6\u306e\u6b20\u640d\u306f\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf","326de2ac":"# \u30e2\u30c7\u30eb\u69cb\u7bc9","95f7fc21":"# \u5e74\u9f62\u3068\u751f\u5b58\u306e\u95a2\u4fc2\u6027\n\u6027\u5225\u306e\u3068\u3053\u308d\u3067\u3082\u66f8\u3044\u305f\u3088\u3046\u306b\u5b50\u4f9b\u306f\u512a\u5148\u3055\u308c\u3066\u3044\u305f\u3089\u3057\u3044  \n\u5b50\u4f9b\u3068\u8a00\u3046\u3068\u66d6\u6627\u3060\u304c\u3001\u30c7\u30fc\u30bf\u304b\u3089\u5bdf\u3059\u308b\u306b\u7279\u306b 10 \u6b73\u4ee5\u4e0b\u304c\u512a\u5148\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u63a8\u6e2c\u3067\u304d\u308b","865d8e55":"# \u6b20\u640d\u5024\u3092\u88dc\u5b8c\u3057\u305f\u5e74\u9f62\u306e\u53ef\u8996\u5316","942a8b7b":"\u30b0\u30e9\u30d5\u304c\u898b\u3048\u306a\u3044\u304f\u3089\u3044 G, T \u306f\u5c11\u306a\u3044\u306e\u3067\u307e\u3068\u3081\u308b","fec706c6":"# \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3092\u53ef\u8996\u5316","97284f38":"# \u6e2f\u3068\u751f\u5b58\u306e\u95a2\u4fc2\u6027\n\u30b5\u30a6\u30b5\u30f3\u30d7\u30c8\u30f3\u304b\u3089\u4e57\u3063\u3066\u3044\u308b\u4e57\u5ba2\u304c\u591a\u3044\u306e\u306f\u51fa\u767a\u306e\u6e2f\u3067\u3042\u308b\u304b\u3089\u3068\u601d\u308f\u308c\u308b  \n\u30c7\u30fc\u30bf\u7684\u306b\u306f\u30b7\u30a7\u30eb\u30d6\u30fc\u30eb\u304b\u3089\u4e57\u3063\u3066\u3044\u308b\u4e57\u5ba2\u306e\u307f\u751f\u5b58\u7387\u304c\u9ad8\u3044\u304c\u7406\u7531\u306f\u4e0d\u660e  \nC = \u30b7\u30a7\u30eb\u30d6\u30fc\u30eb(Cherbourg)  \nQ = \u30af\u30a4\u30fc\u30f3\u30ba\u30bf\u30a6\u30f3(Queenstown)  \nS = \u30b5\u30a6\u30b5\u30f3\u30d7\u30c8\u30f3(Southampton)","a534be9a":"\u5b66\u7fd2\u30c7\u30fc\u30bf\u306f 891 \u4ef6  \nAge, Fare, Cabin, Embarked \u306b\u6b20\u640d\u304c\u3042\u308b","7620dee3":"# \u30c1\u30b1\u30c3\u30c8\u306e\u30af\u30e9\u30b9\u3068\u751f\u5b58\u306e\u95a2\u4fc2\u6027\n1 \uff5e 3 \u306f\u5c0f\u3055\u3044\u307b\u3069\u826f\u3044\u30c1\u30b1\u30c3\u30c8\u3067\u3042\u308b  \n\u305d\u308c\u3060\u3051\u304a\u91d1\u3092\u51fa\u305b\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u793e\u4f1a\u7684\u5730\u4f4d\u3082\u9ad8\u3044\u3068\u8003\u3048\u3089\u308c\u3001\u512a\u9047\u3055\u308c\u305f\u306e\u3067\u306f\u3068\u63a8\u6e2c","8c8a51da":"# \u30e2\u30c7\u30eb\u69cb\u7bc9\u524d\u306e\u51e6\u7406","27e899b2":"# \u5e74\u9f62\u306e\u6b20\u640d\u5024\u3092\u88dc\u5b8c\n\u6b20\u640d\u5024\u306e\u306a\u3044\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u56de\u5e30\u3067\u6b20\u640d\u3057\u3066\u3044\u308b\u5e74\u9f62\u3092\u63a8\u5b9a","5c32217f":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","8740e320":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n","8ac94bf3":"# \u5c45\u5ba4\u306e\u7279\u5fb4\u91cf\u3092\u88dc\u5b8c\n\u6b20\u640d\u5024\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u3044\u3089\u306a\u3044\u304b\u306a\u3068\u601d\u3063\u305f\u3051\u3069\u5165\u308c\u3066\u3044\u308b\u4eba\u304c\u591a\u3044\u306e\u3067\u5165\u308c\u308b","4079fe15":"# \u904b\u8cc3\u3068\u751f\u5b58\u306e\u95a2\u4fc2\u6027\n\u53f3\u306b\u6b6a\u3093\u3067\u3044\u308b\u305f\u3081(\u6b6a\u5ea6 > 0)\u3001\u5bfe\u6570\u5909\u63db\u3057\u3066\u78ba\u8a8d\u3059\u308b  \n\u9ad8\u3044\u65b9\u304c\u751f\u5b58\u7387\u304c\u9ad8\u304f\u3001\u5b89\u3044\u65b9\u304c\u751f\u5b58\u7387\u304c\u4f4e\u3044","ca8280d3":"1 \u4eba(\u81ea\u5206\u3060\u3051)\u307e\u305f\u306f 5 \u4eba\u4ee5\u4e0a(\u591a\u3059\u304e\u3066\u8eab\u52d5\u304d\u304c\u53d6\u308a\u306b\u304f\u3044)\u3060\u3068\u751f\u5b58\u7387\u304c\u4f4e\u3044"}}