{"cell_type":{"75652d34":"code","8d790c11":"code","60408c2f":"code","dd2e3c12":"code","e4fc6532":"code","ee1556de":"code","f1acfb59":"code","92f3acb0":"code","c76092f6":"code","c58d3fee":"code","7f76b6fc":"code","05ba235a":"code","2e738aa6":"code","70182187":"code","bb7fb87b":"code","19cbffc8":"code","c3b28f47":"code","8bcca7f1":"code","ee2652a9":"code","eab76383":"code","5c650df6":"code","0139b0f4":"code","26eae1e7":"code","7460d641":"code","f90b78ce":"code","da8c740d":"code","a21e12f4":"code","a61f29b9":"code","a9797857":"code","55e26141":"code","bddd79d0":"code","c533ab39":"code","21da35f7":"code","2b7b8e0a":"code","d777ba9c":"code","bc609c17":"code","d2e4c315":"code","860b7932":"code","d375c091":"code","f2028337":"code","fcf8e9a6":"code","e63538e3":"code","0e8733bd":"code","a8fa5470":"code","31f668e2":"code","d4ec7ce4":"code","609b3edc":"code","4d0e334f":"code","3c692ba4":"code","f42af469":"code","daca467b":"code","22cb185d":"code","522a03cb":"code","252a5add":"markdown","1bad6da9":"markdown","3299c476":"markdown","e95b1fb0":"markdown","9d9ece5b":"markdown","c06bba47":"markdown","5d2d2e88":"markdown","35ce3dbf":"markdown","ae9873da":"markdown","4747c9dc":"markdown","0bee2c7d":"markdown","5db6ab2d":"markdown","1f74d84d":"markdown","17a7c5b0":"markdown","2a6a1ecd":"markdown","e605041c":"markdown","242843d2":"markdown","20eae632":"markdown","30fd4c39":"markdown","fa8e5f7a":"markdown","9e1d4ce7":"markdown","411c4a78":"markdown","6862f98a":"markdown","86cab841":"markdown","5bc2159d":"markdown","e300f321":"markdown","9ecca8de":"markdown","10377781":"markdown","2ef1d498":"markdown","4258c23e":"markdown","fa0e4634":"markdown","954a5ba5":"markdown","251bf6d3":"markdown","2e13036e":"markdown","ca36a675":"markdown","860dce4f":"markdown","ceb1ca2d":"markdown","79ba7b30":"markdown","7b6a5080":"markdown","8396941a":"markdown","10a1a84b":"markdown","030a2346":"markdown","5f3e719c":"markdown","85cadc0d":"markdown","4ea31228":"markdown","6c6bd7f6":"markdown","2bf0bee1":"markdown","6b55b18f":"markdown","78aab501":"markdown","dcae7e01":"markdown","6f92dc51":"markdown","a6446001":"markdown","e2efdb6a":"markdown","f33b6ab4":"markdown","9fbca665":"markdown","b2f3f71a":"markdown","cc6e01d7":"markdown","21921090":"markdown","dc342a98":"markdown","23b3c56e":"markdown","7e1ffba9":"markdown","f4f84d53":"markdown","7c21d186":"markdown","b9c2052e":"markdown"},"source":{"75652d34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge,RidgeCV,Lasso,LassoCV,ElasticNet,ElasticNetCV\nfrom sklearn import metrics\nfrom math import sqrt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8d790c11":"import pandas as pd\ndf = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/train.csv')\npd.set_option('display.max_rows',20)\ndf","60408c2f":"df.info()","dd2e3c12":"df.describe()","e4fc6532":"for i in range(5,12):\n    name = df.columns[i]\n    print('{0}\u504f\u6001\u7cfb\u6570\u4e3a{1}\uff0c\u5cf0\u6001\u7cfb\u6570\u4e3a{2}'.format(name,df[name].skew(),df[name].kurt()))","ee1556de":"print('\u672a\u53bb\u91cd\uff1a',df.shape)\nprint('\u53bb\u91cd\uff1a',df.drop_duplicates().shape)","f1acfb59":"fig,axes = plt.subplots(nrows=2,ncols=2,figsize=(12,6))\nsns.boxplot(x='windspeed',data=df,ax=axes[0][0])\nsns.boxplot(x='casual',data=df,ax=axes[0][1])\nsns.boxplot(x='registered',data=df,ax=axes[1][0])\nsns.boxplot(x='count',data=df,ax=axes[1][1])","92f3acb0":"df['datetime'] = pd.to_datetime(df['datetime'])\ndf['hour'] = df.datetime.dt.hour\ndf['week'] = df.datetime.dt.dayofweek\ndf['month'] = df.datetime.dt.month\ndf['year_month'] = df.datetime.dt.strftime('%Y-%m')\ndf['date'] = df.datetime.dt.date\ndf.drop('datetime',axis=1,inplace=True)","c76092f6":"df","c58d3fee":"import numpy as np \ndf['group_season'] = np.where((df.month <=5) & (df.month >=3), 1, np.where((df.month <=8) & (df.month >=6), 2, np.where((df.month <=11) & (df.month >=9), 3, 4))) \nfig, ax = plt.subplots(2, 1, figsize=(12, 6)) \n#\u7ed8\u5236\u6c14\u6e29\u548c\u5b63\u8282\u7bb1\u7ebf\u56fe \nsns.boxplot(x='season', y='temp',data=df, ax=ax[0]) \nsns.boxplot(x='group_season', y='temp',data=df, ax=ax[1])","7f76b6fc":"df.drop('season', axis=1, inplace=True) \ndf.shape","05ba235a":"#\u8bbe\u7f6e\u5b57\u4f53 \nfont = {'family': 'cmb10'} \nmatplotlib.rc('font', **font) \n#\u5206\u522b\u8ba1\u7b97\u65e5\u671f\u548c\u6708\u4efd\u4e2d\u4f4d\u6570 \ngroup_date = df.groupby('date')['count'].median() \ngroup_month = df.groupby('year_month')['count'].median() \ngroup_month.index = pd.to_datetime(group_month.index) \nplt.figure(figsize=(16,5)) \nplt.plot(group_date.index, group_date.values, '-', color = 'b', label = 'Median number of daily leases', alpha=0.8) \nplt.plot(group_month.index, group_month.values, '-o', color='orange', label = 'Median number of monthly leases') \nplt.legend() \nplt.show()","2e738aa6":"plt.figure(figsize=(10, 6)) \nsns.boxplot(x='month', y='count', data=df) \nplt.show()","70182187":"plt.figure(figsize=(8, 4))\nsns.boxplot(x='group_season',y='count',data=df)\nplt.show()","bb7fb87b":"fig,axes = plt.subplots(nrows=3, ncols=1, figsize=(12, 10)) \nsns.boxplot(x='week',y='casual',data=df,ax=axes[0]) \nsns.boxplot(x='week',y='registered', data=df, ax=axes[1]) \nsns.boxplot(x='week',y='count', data=df, ax=axes[2]) \nplt.show()","19cbffc8":"fig, axes = plt.subplots(nrows=3, ncols=2, figsize=(12, 10)) \nsns.boxplot(x='holiday', y='casual', data=df, ax=axes[0][0]) \nsns.boxplot(x='holiday', y='registered', data=df, ax=axes[1][0]) \nsns.boxplot(x='holiday', y='count', data=df, ax=axes[2][0]) \nsns.boxplot(x='workingday', y='casual', data=df, ax=axes[0][1]) \nsns.boxplot(x='workingday', y='registered', data=df, ax=axes[1][1]) \nsns.boxplot(x='workingday', y='count', data=df, ax=axes[2][1]) \nplt.show()","c3b28f47":"plt.figure(1, figsize=(14, 8))\nplt.subplot(221)\nhour_casual = df[df.holiday==1].groupby('hour')['casual'].median()\nhour_registered = df[df.holiday==1].groupby('hour')['registered'].median()\nhour_count = df[df.holiday==1].groupby('hour')['count'].median()\nplt.plot(hour_casual.index, hour_casual.values, '-', color='r', label='casual')\nplt.plot(hour_registered.index, hour_registered.values, '-', color='g', label='registered')\nplt.plot(hour_count.index, hour_count.values, '-o', color='c', label='count')\nplt.legend()\nplt.xticks(hour_casual.index)\nplt.title('Rental of bicycles by casual and registered users during holidays')\n#\u7ed8\u5236\u7b2c\u4e8c\u4e2a\u5b50\u56fe\nplt.subplot(222)\nhour_casual = df[df.workingday==1].groupby('hour')['casual'].median()\nhour_registered = df[df.workingday==1].groupby('hour')['registered'].median()\nhour_count = df[df.workingday==1].groupby('hour')['count'].median()\nplt.plot(hour_casual.index, hour_casual.values, '-', color='r', label='casual')\nplt.plot(hour_registered.index, hour_registered.values, '-', color='g', label='registered')\nplt.plot(hour_count.index, hour_count.values, '-o', color='c', label='count')\nplt.legend()\nplt.title('Rental of bicycles by casual and registered users during weekdays')\nplt.xticks(hour_casual.index)\n#\u7ed8\u5236\u7b2c\u4e09\u4e2a\u5b50\u56fe\nplt.subplot(212)\nhour_casual = df.groupby('hour')['casual'].median()\nhour_registered = df.groupby('hour')['registered'].median()\nhour_count = df.groupby('hour')['count'].median()\nplt.plot(hour_casual.index, hour_casual.values, '-', color='r', label='casual')\nplt.plot(hour_registered.index, hour_registered.values, '-', color='g', label='registered')\nplt.plot(hour_count.index, hour_count.values, '-o', color='c', label='count')\nplt.legend()\nplt.title('Bicycle rental for casual and registered users')\nplt.xticks(hour_casual.index)\nplt.show()\n","8bcca7f1":"fig, ax = plt.subplots(3, 1, figsize=(12, 6)) \nsns.boxplot(x='weather', y='casual', hue='workingday',data=df, ax=ax[0]) \nsns.boxplot(x='weather', y='registered',hue='workingday', data=df, ax=ax[1]) \nsns.boxplot(x='weather', y='count',hue='workingday', data=df, ax=ax[2])","ee2652a9":"df","eab76383":"sns.pairplot(df[['temp', 'atemp', 'humidity', 'windspeed', 'casual', 'registered', 'count']])","5c650df6":"df['windspeed']","0139b0f4":"df.loc[df.windspeed == 0, 'windspeed'] = np.nan \ndf.fillna(method='bfill', inplace=True) \ndf.windspeed.isnull().sum()","26eae1e7":"#\u5bf9\u6570\u8f6c\u6362 \ndf['windspeed'] = np.log(df['windspeed'].apply(lambda x: x+1)) \ndf['casual'] = np.log(df['casual'].apply(lambda x: x+1)) \ndf['registered'] = np.log(df['registered'].apply(lambda x: x+1)) \ndf['count'] = np.log(df['count'].apply(lambda x: x+1)) \nsns.pairplot(df[['windspeed', 'casual', 'registered', 'count']])","7460d641":"correlation = df.corr(method='spearman') \nplt.figure(figsize=(12, 8)) \n#\u7ed8\u5236\u70ed\u529b\u56fe \nsns.heatmap(correlation, linewidths=0.2, vmax=1, vmin=-1, linecolor='w', annot=True,annot_kws={'size':8},square=True)","f90b78ce":"df.drop(['casual','registered'],axis=1,inplace=True)","da8c740d":"X = df.drop(['count','year_month','date'],axis=1)\ny = df['count']","a21e12f4":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)","a61f29b9":"rd = Ridge(alpha=1)\nrd.fit(X_train, y_train)\nprint(rd.coef_)\nprint(rd.intercept_)","a9797857":"#\u8bbe\u7f6e\u53c2\u6570\u4ee5\u53ca\u8bad\u7ec3\u6a21\u578b\nalphas = 10**np.linspace(-5, 10, 500)\nbetas = []\nfor alpha in alphas:\n    rd = Ridge(alpha = alpha)\n    rd.fit(X_train, y_train)\n    betas.append(rd.coef_)\n#\u7ed8\u5236\u5cad\u8ff9\u56fe\nplt.figure(figsize=(8,6))\nplt.plot(alphas, betas)\n#\u5bf9\u6570\u636e\u8fdb\u884c\u5bf9\u6570\u8f6c\u6362, \u4fbf\u4e8e\u89c2\u5bdf.\nplt.xscale('log')\n#\u6dfb\u52a0\u7f51\u683c\u7ebf\nplt.grid(True)\n#\u5750\u6807\u8f74\u9002\u5e94\u6570\u636e\u91cf\nplt.axis('tight')\nplt.title(r'\u6b63\u5219\u5316\u9879\u53c2\u6570$\\alpha$\u548c\u56de\u5f52\u7cfb\u6570$\\beta$\u5cad\u8ff9\u56fe')\nplt.xlabel(r'$\\alpha$')\nplt.ylabel(r'$\\beta$')\nplt.show()","55e26141":"rd_cv = RidgeCV(alphas=alphas, cv=10, scoring='r2')\nrd_cv.fit(X_train, y_train)\nrd_cv.alpha_","bddd79d0":"rd = Ridge(alpha=805.0291812295973) #, fit_intercept=False\nrd.fit(X_train, y_train)\nprint(rd.coef_)\nprint(rd.intercept_)","c533ab39":"#\u5206\u522b\u9884\u6d4b\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\nridge_y_train_pred = rd.predict(X_train)\nridge_y_test_pred = rd.predict(X_test)\n#\u5206\u522b\u8ba1\u7b97\u5176\u5747\u65b9\u6839\u8bef\u5dee\u548c\u62df\u5408\u4f18\u5ea6\nridge_y_train_rmse = sqrt(metrics.mean_squared_error(y_train, ridge_y_train_pred))\nridge_y_train_score = rd.score(X_train, y_train)\nridge_y_test_rmse = sqrt(metrics.mean_squared_error(y_test, ridge_y_test_pred))\nridge_y_test_score = rd.score(X_test, y_test)\nprint('\u8bad\u7ec3\u96c6RMSE: {0}, \u8bc4\u5206: {1}'.format(ridge_y_train_rmse, ridge_y_train_score))\nprint('\u6d4b\u8bd5\u96c6RMSE: {0}, \u8bc4\u5206: {1}'.format(ridge_y_test_rmse, ridge_y_test_score))","21da35f7":"alphas = 10**np.linspace(-5, 10, 500)\nbetas = []\nfor alpha in alphas:\n    Las = Lasso(alpha = alpha)\n    Las.fit(X_train, y_train)\n    betas.append(Las.coef_)\nplt.figure(figsize=(8,6))\nplt.plot(alphas, betas)\nplt.xscale('log')\nplt.grid(True)\nplt.axis('tight')\nplt.title(r'\u6b63\u5219\u5316\u9879\u53c2\u6570$\\alpha$\u548c\u56de\u5f52\u7cfb\u6570$\\beta$\u7684Lasso\u56fe')\nplt.xlabel(r'$\\alpha$')\nplt.ylabel(r'$\\beta$')\nplt.show()","2b7b8e0a":"Las_cv = LassoCV(alphas=alphas, cv=10)\nLas_cv.fit(X_train, y_train)\nLas_cv.alpha_","d777ba9c":"Las = Lasso(alpha=0.005074705239490466)\nLas.fit(X_train, y_train)\nprint(Las.coef_)\nprint(Las.intercept_)","bc609c17":"#\u7528Lasso\u5206\u522b\u9884\u6d4b\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6, \u5e76\u8ba1\u7b97\u5747\u65b9\u6839\u8bef\u5dee\u548c\u62df\u5408\u4f18\u5ea6\nlasso_y_train_pred = Las.predict(X_train)\nlasso_y_test_pred = Las.predict(X_test)\nlasso_y_train_rmse = sqrt(metrics.mean_squared_error(y_train, lasso_y_train_pred))\nlasso_y_train_score = Las.score(X_train, y_train)\nlasso_y_test_rmse = sqrt(metrics.mean_squared_error(y_test, lasso_y_test_pred))\nlasso_y_test_score = Las.score(X_test, y_test)\nprint('\u8bad\u7ec3\u96c6RMSE: {0}, \u8bc4\u5206: {1}'.format(lasso_y_train_rmse, lasso_y_train_score))\nprint('\u6d4b\u8bd5\u96c6RMSE: {0}, \u8bc4\u5206: {1}'.format(lasso_y_test_rmse, lasso_y_test_score))","d2e4c315":"#\u8bad\u7ec3\u7ebf\u6027\u56de\u5f52\u6a21\u578b\nLR = LinearRegression()\nLR.fit(X_train, y_train)\nprint(LR.coef_)\nprint(LR.intercept_)","860b7932":"#\u5206\u522b\u9884\u6d4b\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6, \u5e76\u8ba1\u7b97\u5747\u65b9\u6839\u8bef\u5dee\u548c\u62df\u5408\u4f18\u5ea6\nlr_y_train_pred = LR.predict(X_train)\nlr_y_test_pred = LR.predict(X_test)\nlr_y_train_rmse = sqrt(metrics.mean_squared_error(y_train, lr_y_train_pred))\nlr_y_train_score = LR.score(X_train, y_train)\nlr_y_test_rmse = sqrt(metrics.mean_squared_error(y_test, lr_y_test_pred))\nlr_y_test_score = LR.score(X_test, y_test)\nprint('\u8bad\u7ec3\u96c6RMSE: {0}, \u8bc4\u5206: {1}'.format(lr_y_train_rmse, lr_y_train_score))\nprint('\u6d4b\u8bd5\u96c6RMSE: {0}, \u8bc4\u5206: {1}'.format(lr_y_test_rmse, lr_y_test_score))","d375c091":"Els_cv = ElasticNetCV(alphas=alphas, cv=10)\nEls_cv.fit(X_train, y_train)\nEls_cv.alpha_","f2028337":"Els = ElasticNet(alpha=0.009461323755890769)\nEls.fit(X_train, y_train)\nprint(Els.coef_)\nprint(Els.intercept_)","fcf8e9a6":"#\u7528ElasticNet\u5206\u522b\u9884\u6d4b\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6, \u5e76\u8ba1\u7b97\u5747\u65b9\u6839\u8bef\u5dee\u548c\u62df\u5408\u4f18\u5ea6\nels_y_train_pred = Els.predict(X_train)\nels_y_test_pred = Els.predict(X_test)\nels_y_train_rmse = sqrt(metrics.mean_squared_error(y_train, els_y_train_pred))\nels_y_train_score = Els.score(X_train, y_train)\nels_y_test_rmse = sqrt(metrics.mean_squared_error(y_test, els_y_test_pred))\nels_y_test_score = Els.score(X_test, y_test)\nprint('\u8bad\u7ec3\u96c6RMSE: {0}, \u8bc4\u5206: {1}'.format(els_y_train_rmse, els_y_train_score))\nprint('\u6d4b\u8bd5\u96c6RMSE: {0}, \u8bc4\u5206: {1}'.format(els_y_test_rmse, els_y_test_score))","e63538e3":"def Adaptive_LASSO(X_train,y_train,max_iterations = 1000,lasso_iterations = 10, alpha = 0.005074705239490466, tol = 0.001, max_error_up = 5, title = ''):\n    \n    # set checks\n    higher  = float('inf')\n    lower   = 0\n    \n    # set lists\n    coefficients_list = []\n    iterations_list   = []\n    \n    # set variables\n    X_train  = X_train\n    y_train  = y_train\n    \n    # set constants\n    alpha    = alpha\n    tol      = tol\n    max_iter = max_iterations\n    n_lasso_iterations = lasso_iterations\n    \n    g = lambda w: np.sqrt(np.abs(w))\n    gprime = lambda w: 1. \/ (2. * np.sqrt(np.abs(w)) + np.finfo(float).eps)\n\n    n_samples, n_features = X_train.shape\n    p_obj = lambda w: 1. \/ (2 * n_samples) * np.sum((y_train - np.dot(X_train, w)) ** 2) \\\n                      + alpha * np.sum(g(w))\n\n    weights = np.ones(n_features)\n    X_w = X_train \/ weights[np.newaxis, :]\n    X_w  = np.nan_to_num(X_w)\n    X_w  = np.round(X_w,decimals = 3)\n\n    y_train    = np.nan_to_num(y_train)\n\n    adaptive_lasso = Lasso(alpha=alpha, fit_intercept=True)\n\n    adaptive_lasso.fit(X_w, y_train)\n\n    for k in range(n_lasso_iterations):\n        X_w = X_train \/ weights[np.newaxis, :]\n        adaptive_lasso = Lasso(alpha=alpha, fit_intercept=True)\n        adaptive_lasso.fit(X_w, y_train)\n        coef_ = adaptive_lasso.coef_ \/ weights\n        weights = gprime(coef_)\n        \n        print ('Iteration #',k+1,':   ',p_obj(coef_))  # should go down\n        \n        iterations_list.append(k)\n        coefficients_list.append(p_obj(coef_))\n        \n    print (np.mean((adaptive_lasso.coef_ != 0.0) == (coef_ != 0.0)))   \n    \n    coef = pd.Series(adaptive_lasso.coef_, index = X_train.columns)\n    print('=============================================================================')\n    print(\"Adaptive LASSO picked \" + str(sum(coef != 0)) + \" variables and eliminated the other \" +  str(sum(coef == 0)) + \" variables.\")\n    print('=============================================================================')\n    print(\"\u7cfb\u6570\uff1a\",adaptive_lasso.coef_)\n    print(\"\u622a\u8ddd\uff1a\",adaptive_lasso.intercept_)\n    plt.rcParams[\"figure.figsize\"] = (18,8)\n\n    # subplot of the predicted vs. actual\n\n    plt.plot(iterations_list,coefficients_list,color = 'orange')\n    plt.scatter(iterations_list,coefficients_list,color = 'green')\n    plt.title('Iterations vs. p_obj(coef_)')\n    plt.show()\n\n    # plot of the coefficients'\n\n    imp_coef = pd.concat([coef.sort_values().tail(10),])#,coef.sort_values().tail(10)\n    imp_coef.plot(kind = \"barh\", color = 'green',fontsize=14)\n    plt.title(\"Top 10 Coefficients Selected by the Adaptive LASSO Model\", fontsize = 14)\n    plt.show()\n    return adaptive_lasso","0e8733bd":"# variable selection with LASSO for the model\nmodel = Adaptive_LASSO(X_train,\n                       y_train,\n                       max_iterations = 5000,\n                       lasso_iterations = 10, \n                       alpha = 0.005074705239490466, \n                       tol = 0.001, \n                       max_error_up = 5, \n                       title = '')","a8fa5470":"# look at the coefficients in the model\ncoef = pd.Series(model.coef_, index = X_train.columns)\ncoef = pd.DataFrame(coef).reset_index()\ncoef_list = coef.loc[coef[0]!= 0.0]['index'].to_list()\nnew_X_train = X_train[coef_list]\nada_intercept = model.intercept_","31f668e2":"coef_list","d4ec7ce4":"ada_y_test_pred = np.dot(np.array(X_test),np.array(coef[0]))+ada_intercept ","609b3edc":"ada_y_train_pred = np.dot(np.array(X_train),np.array(coef[0]))+ada_intercept ","4d0e334f":"ada_y_train_pred","3c692ba4":"ada_y_train_score =  ((y_train - ada_y_train_pred)**2).sum()\/((y_train - y_train.mean())**2).sum() -1","f42af469":"ada_y_train_score","daca467b":"ada_y_test_score =  ((y_test - ada_y_test_pred)**2).sum()\/((y_test - y_test.mean())**2).sum() -1","22cb185d":"ada_y_test_score","522a03cb":"#\u7528Adaptive Lasso\u5206\u522b\u9884\u6d4b\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6, \u5e76\u8ba1\u7b97\u5747\u65b9\u6839\u8bef\u5dee\u548c\u62df\u5408\u4f18\u5ea6\nada_y_train_rmse = sqrt(metrics.mean_squared_error(y_train, ada_y_train_pred))\nada_y_test_rmse = sqrt(metrics.mean_squared_error(y_test, ada_y_test_pred))\nprint('\u8bad\u7ec3\u96c6RMSE: {0}, \u8bc4\u5206: {1}'.format(ada_y_train_rmse, ada_y_train_score))\nprint('\u6d4b\u8bd5\u96c6RMSE: {0}, \u8bc4\u5206: {1}'.format(ada_y_test_rmse, ada_y_test_score))","252a5add":"## 3.7 \u76f8\u5173\u77e9\u9635","1bad6da9":"# 3. \u7279\u5f81\u5206\u6790","3299c476":"\u901a\u8fc7\u4ee5\u4e0a\u53ef\u4ee5\u5f97\u77e5\u6570\u636e\u7ef4\u5ea610886\u884cX12\u5217, \u9664\u4e86\u7b2c\u4e00\u5217\u5176\u5b83\u5747\u663e\u793a\u4e3a\u6570\u503c, \u5177\u4f53\u7684\u683c\u5f0f\u8fd8\u8981\u8fdb\u4e00\u6b65\u67e5\u770b, \u5bf9\u4e8e\u5404\u5217\u7684\u89e3\u91ca\u4e5f\u653e\u5165\u4e0b\u4e00\u73af\u8282.","e95b1fb0":"\u672a\u6ce8\u518c\u7528\u6237: \u5728\u8282\u5047\u65e5\u8f83\u591a, \u5728\u5de5\u4f5c\u65e5\u8f83\u5c11\n\u6ce8\u518c\u7528\u6237: \u5728\u8282\u5047\u65e5\u8f83\u5c11, \u5728\u5de5\u4f5c\u65e5\u8f83\u591a\n\u603b\u7684\u6765\u8bf4, \u8282\u5047\u65e5\u79df\u8d41\u8f83\u5c11, \u5de5\u4f5c\u65e5\u79df\u8d41\u8f83\u591a, \u521d\u6b65\u731c\u6d4b\u591a\u6570\u672a\u6ce8\u518c\u7528\u6237\u79df\u8d41\u81ea\u884c\u8f66\u662f\u7528\u6765\u975e\u5de5\u4f5c\u65e5\u51fa\u6e38, \u800c\u591a\u6570\u6ce8\u518c\u7528\u6237\u5219\u662f\u5de5\u4f5c\u65e5\u7528\u6765\u4e0a\u73ed\u6216\u8005\u4e0a\u5b66.","9d9ece5b":"## 1.2 Data Overview","c06bba47":"\u7ecf\u8fc7\u5bf9\u6570\u53d8\u6362\u4e4b\u540e, \u6ce8\u518c\u7528\u6237\u548c\u6240\u6709\u7528\u6237\u7684\u79df\u8d41\u6570\u91cf\u548c\u6b63\u6001\u8fd8\u662f\u76f8\u5dee\u8f83\u5927, \u6545\u5728\u8ba1\u7b97\u76f8\u5173\u7cfb\u6570\u65f6\u9009\u62e9spearman\u76f8\u5173\u7cfb\u6570.","5d2d2e88":"## 3.5 \u5929\u6c14\u548c\u603b\u79df\u8d41\u6570\u91cf\u7684\u5173\u7cfb","35ce3dbf":"2012\u5e74\u76f8\u6bd42011\u5e74\u79df\u8d41\u6570\u91cf\u6709\u6240\u589e\u957f, \u4e14\u6ce2\u52a8\u5e45\u5ea6\u76f8\u7c7b\u4f3c.","ae9873da":"## 3.1 \u65e5\u671f\u548c\u603b\u79df\u8d41\u6570\u91cf","4747c9dc":"\u7531\u4e8e\u6ca1\u6709\u7f3a\u5931\u503c\uff0c\u53ea\u9700\u68c0\u67e5\u91cd\u590d\u503c\u3001\u5f02\u5e38\u503c","0bee2c7d":"## 1.1 Read data","5db6ab2d":"\u7531\u4e8e\u662f\u901a\u8fc7\u8089\u773c\u89c2\u5bdf\u7684, \u5176\u4e0d\u4e00\u5b9a\u662f\u6700\u4f73, \u91c7\u7528\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f: \u4ea4\u53c9\u9a8c\u8bc1\u7684\u5cad\u56de\u5f52.","1f74d84d":"## 3.6 \u5176\u4ed6\u53d8\u91cf\u548c\u603b\u79df\u8d41\u6570\u91cf\u7684\u5173\u7cfb","17a7c5b0":"## 1.4 Skew and peak\u504f\u6001\u3001\u5cf0\u6001","2a6a1ecd":"# 2. Data preprocessing\u6570\u636e\u9884\u5904\u7406","e605041c":"## 3.2 \u6708\u4efd\u548c\u603b\u79df\u8d41\u6570\u91cf","242843d2":"\u52a0\u5de5\u5b63\u8282","20eae632":"## 3.5 \u8282\u5047\u65e5, \u5de5\u4f5c\u65e5\u548c\u603b\u79df\u8d41\u6570\u91cf","30fd4c39":"\u901a\u8fc7Lasso\u56de\u5f52\u66f2\u7ebf, \u53ef\u4ee5\u770b\u51fa\u5927\u81f4\u572810\u9644\u8fd1\u6240\u6709\u53d8\u91cf\u8d8b\u4e8e\u7a33\u5b9a","fa8e5f7a":"\u98ce\u901f\u4e3a0, \u8fd9\u660e\u663e\u4e0d\u5408\u7406, \u628a\u5176\u5f53\u6210\u7f3a\u5931\u503c\u6765\u5904\u7406. \u6211\u8fd9\u91cc\u9009\u62e9\u7684\u662f\u5411\u540e\u586b\u5145.","9e1d4ce7":"\u6700\u540e\u9009\u51fa\u7684\u6700\u4f73\u6b63\u5219\u5316\u9879\u53c2\u6570\u4e3a805.03, \u7136\u540e\u7528\u8fd9\u4e2a\u53c2\u6570\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3","411c4a78":"\u540c\u6837\u91c7\u7528\u4ea4\u53c9\u9a8c\u8bc1\u9009\u62e9Lasso\u56de\u5f52\u6700\u4f18\u6b63\u5219\u5316\u9879\u53c2\u6570","6862f98a":"\u8868\u660e\u6ca1\u6709\u91cd\u590d\u503c","86cab841":"\u7b2c\u4e00\u4e2a\u56fe\u662f\u8c03\u6574\u4e4b\u524d\u7684, \u5c31\u4e2d\u4f4d\u6570\u6765\u8bf4, \u6625\u5b63\u6c14\u6e29\u6700\u4f4e, \u79cb\u5b63\u6c14\u6e29\u6700\u9ad8\n\n\u7b2c\u4e8c\u4e2a\u56fe\u662f\u8c03\u6574\u4e4b\u540e\u7684, \u5c31\u4e2d\u4f4d\u6570\u6765\u8bf4, \u51ac\u5b63\u6c14\u6e29\u6700\u4f4e, \u590f\u5b63\u6c14\u6e29\u6700\u9ad8","5bc2159d":"\u4ece\u56fe\u4e0a\u53ef\u4ee5\u770b\u51fa, \u6e29\u5ea6\u548c\u4f53\u611f\u6e29\u5ea6\u5206\u522b\u4e0e\u672a\u6ce8\u518c\u7528\u6237, \u6ce8\u518c\u7528\u6237, \u6240\u6709\u7528\u6237\u5747\u6709\u4e00\u5b9a\u7a0b\u5ea6\u7684\u6b63\u76f8\u5173, \u800c\u76f8\u5bf9\u6e7f\u5ea6\u548c\u98ce\u901f\u4e0e\u4e4b\u5448\u73b0\u4e00\u5b9a\u7a0b\u5ea6\u7684\u8d1f\u76f8\u5173. \u53e6\u5916, \u5176\u4ed6\u53d8\u91cf\u4e4b\u95f4\u4e5f\u6709\u4e0d\u540c\u7a0b\u5ea6\u7684\u76f8\u5173\u5173\u7cfb.\n\n\u53e6\u5916, \u7b2c\u56db\u5217(\u98ce\u901f)\u5728\u6563\u70b9\u56fe\u4e2d\u95f4\u6709\u660e\u663e\u7684\u95f4\u9699. \u9700\u8981\u63ea\u51fa\u8fd9\u4e00\u5757\u6765\u770b\u770b.","e300f321":"\u9664\u4e86datetime\u4e3a\u5b57\u7b26\u4e32\u578b, \u5176\u4ed6\u5747\u4e3a\u6570\u503c\u578b, \u4e14\u65e0\u7f3a\u5931\u503c.","9ecca8de":"## 4.3 \u7ebf\u6027\u56de\u5f52","10377781":"\u7ecf\u8fc7\u5bf9\u6570\u53d8\u6362\u4e4b\u540e, \u6ce8\u518c\u7528\u6237\u548c\u6240\u6709\u7528\u6237\u7684\u79df\u8d41\u6570\u91cf\u548c\u6b63\u6001\u8fd8\u662f\u76f8\u5dee\u8f83\u5927, \u6545\u5728\u8ba1\u7b97\u76f8\u5173\u7cfb\u6570\u65f6\u9009\u62e9spearman\u76f8\u5173\u7cfb\u6570.","2ef1d498":"## 2.2 \u5f02\u5e38\u503c","4258c23e":"## 4.5 Adaptive Lasso","fa0e4634":"\u8fd9\u91cc\u7684alpha\u6307\u7684\u662f\u6b63\u5219\u5316\u9879\u53c2\u6570, \u521d\u59cb\u5148\u8bbe\u7f6e\u4e3a1","954a5ba5":"\u5c31\u6d4b\u8bd5\u96c6\u548c\u8bad\u7ec3\u96c6\u5747\u65b9\u6839\u8bef\u5dee\u4e4b\u5dee\u6765\u8bf4, \u7ebf\u6027\u56de\u5f52\u6700\u5927, \u5cad\u56de\u5f52\u6700\u5c0f, \u53e6\u5916\u56de\u5f52\u5728\u6d4b\u8bd5\u96c6\u7684\u62df\u5408\u4f18\u5ea6\u6700\u5927, \u603b\u4f53\u6765\u8bf4, \u5cad\u56de\u5f52\u5728\u6b64\u6570\u636e\u96c6\u4e0a\u8868\u73b0\u7565\u4f18.\n\n\u5c31\u8fd9\u4e2a\u8bc4\u5206\u6765\u8bf4, \u4ee5\u4e0a\u6a21\u578b\u8fd8\u4e0d\u662f\u5f88\u597d, \u8fd8\u9700\u8981\u5b66\u4e60\u5176\u4ed6\u6a21\u578b, \u6bd4\u5982\u51b3\u7b56\u6811, \u968f\u673a\u68ee\u6797, \u795e\u7ecf\u7f51\u7edc\u7b49.","251bf6d3":"## 2.1 \u91cd\u590d\u503c","2e13036e":"# 1. Data Overview","ca36a675":"\u4e3a\u4e86\u65b9\u4fbf\u7eb5\u89c8\u5168\u5c40, \u6211\u5c06\u56fe\u7247\u5c3a\u5bf8\u7f29\u5c0f, \u5982\u4e0b\u56fe\u6240\u793a. \u7eb5\u8f74\u4ece\u4e0a\u5f80\u4e0b\u4f9d\u6b21\u662f\u6e29\u5ea6, \u4f53\u611f\u6e29\u5ea6, \u76f8\u5bf9\u6e7f\u5ea6, \u98ce\u901f, \u672a\u6ce8\u518c\u7528\u6237, \u6ce8\u518c\u7528\u6237, \u6240\u6709\u7528\u6237, \u6a2a\u8f74\u4ece\u5de6\u5f80\u53f3\u662f\u540c\u6837\u7684\u987a\u5e8f.","860dce4f":"## 4.1.3 \u6a21\u578b\u9884\u6d4b","ceb1ca2d":"## 3.3 \u5b63\u8282\u548c\u603b\u79df\u8d41\u6570\u91cf","79ba7b30":"## 4.1 Ridge\u56de\u5f52","7b6a5080":"## 2.3 \u6570\u636e\u52a0\u5de5","8396941a":"\u5c31\u4e2d\u4f4d\u6570\u6765\u8bf4, \u672a\u6ce8\u518c\u7528\u6237\u5468\u516d\u548c\u5468\u65e5\u8f83\u591a, \u800c\u6ce8\u518c\u7528\u6237\u5219\u5468\u5185\u8f83\u591a, \u5bf9\u5e94\u7684\u603b\u6570\u4e5f\u662f\u5468\u5185\u8f83\u591a, \u4e14\u5468\u5185\u5728\u603b\u6570\u7684\u79bb\u7fa4\u503c\u8f83\u591a(0\u4ee3\u8868\u5468\u4e00, 6\u4ee3\u8868\u5468\u65e5)","10a1a84b":"\u7531\u4e8e\u591a\u4e2a\u53d8\u91cf\u4e0d\u6ee1\u8db3\u6b63\u6001\u5206\u5e03, \u5bf9\u5176\u8fdb\u884c\u5bf9\u6570\u53d8\u6362.","030a2346":"# 5. \u603b\u7ed3","5f3e719c":"## 1.3 Descriptive statistics","85cadc0d":"\u4e0e\u4e0a\u56fe\u7684\u6ce2\u52a8\u5e45\u5ea6\u57fa\u672c\u4e00\u81f4, \u53e6\u5916\u6bcf\u4e2a\u6708\u5747\u6709\u4e0d\u540c\u7a0b\u5ea6\u7684\u79bb\u7fa4\u503c.","4ea31228":"\u4f7f\u7528lassoCV\u7ed9\u51fa\u7684alpha\u503c\uff0c\u4ee3\u5165adaptive lasso","6c6bd7f6":"\u8fd9\u91cc\u6211\u76f4\u63a5\u4f7f\u7528\u5229\u7528seaborn\u7684pairplot\u7ed8\u5236\u5269\u4f59\u7684\u6e29\u5ea6, \u4f53\u611f\u6e29\u5ea6, \u76f8\u5bf9\u6e7f\u5ea6, \u98ce\u901f\u8fd9\u56db\u4e2a\u8fde\u7eed\u53d8\u91cf\u4e0e\u672a\u6ce8\u518c\u7528\u6237\u548c\u6ce8\u518c\u7528\u6237\u7684\u5173\u7cfb\u5728\u4e00\u5f20\u56fe\u4e0a.","2bf0bee1":"temp, atemp, humidity\u4f4e\u5ea6\u504f\u6001, windspeed\u4e2d\u5ea6\u504f\u6001, casual, registered, count\u9ad8\u5ea6\u504f\u6001\ntemp, atemp, humidity\u4e3a\u5e73\u5cf0\u5206\u5e03, windspeed,casual, registered, count\u4e3a\u5c16\u5cf0\u5206\u5e03.","6b55b18f":"\u9996\u5148\u52a0\u5de5\u65e5\u671f\uff0c\u8f6c\u6362\"\u65f6\u95f4\u548c\u65e5\u671f\"\u7684\u683c\u5f0f, \u5e76\u63d0\u53d6\u51fa\u5c0f\u65f6, \u65e5, \u6708, \u5e74","78aab501":"\u663e\u7136\u7b2c\u4e8c\u5f20\u7684\u56fe\u7684\u7ed3\u679c\u8f83\u7b26\u5408\u5e38\u7406, \u6545\u5220\u9664\u53e6\u5916\u90a3\u4e00\u5217.","dcae7e01":"## 3.4 \u661f\u671f\u51e0\u548c\u79df\u8d41\u6570\u91cf","6f92dc51":"\u7528\u8fd9\u4e2a\u53c2\u6570\u91cd\u65b0\u8bad\u7ec3\u6a21\u578b","a6446001":"## 3.6 \u5c0f\u65f6\u548c\u603b\u79df\u8d41\u6570\u91cf\u7684\u5173\u7cfb","e2efdb6a":"\u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6","f33b6ab4":"## 4.4 Elastic Net","9fbca665":"\u7531\u4e8e\u6240\u6709\u7528\u6237\u7684\u79df\u8d41\u6570\u91cf\u662f\u7531\u672a\u6ce8\u518c\u7528\u6237\u548c\u6ce8\u518c\u7528\u6237\u76f8\u52a0\u800c\u6210, \u6545\u5220\u9664","b2f3f71a":"\u6e29\u5ea6, \u4f53\u8868\u6e29\u5ea6, \u76f8\u5bf9\u6e7f\u5ea6, \u98ce\u901f\u5747\u8fd1\u4f3c\u5bf9\u79f0\u5206\u5e03, \u800c\u975e\u6ce8\u518c\u7528\u6237, \u6ce8\u518c\u7528\u6237,\u4ee5\u53ca\u603b\u6570\u5747\u53f3\u8fb9\u5206\u5e03.","cc6e01d7":"### 4.1.1 \u5212\u5206\u6570\u636e\u96c6","21921090":"\u901a\u8fc7\u524d\u9762\u6211\u4eec\u77e5\u9053, \u6b63\u5219\u5316\u9879\u53c2\u6570\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\u8f83\u5927, \u4e0b\u4e00\u6b65\u6211\u4eec\u5c31\u901a\u8fc7\u5cad\u8ff9\u56fe\u6765\u9009\u62e9\u6b63\u5219\u5316\u53c2\u6570.","dc342a98":"### 4.1.2 \u6a21\u578b\u8bad\u7ec3","23b3c56e":"\u5bf9\u6bd4\u5cad\u56de\u5f52\u53ef\u4ee5\u53d1\u73b0, \u8fd9\u91cc\u7684\u56de\u5f52\u7cfb\u6570\u4e2d\u67090\u5b58\u5728, \u4e5f\u5c31\u662f\u820d\u5f03\u4e86holiday, workingday, weather\u548cgroup_season\u8fd9\u56db\u4e2a\u81ea\u53d8\u91cf.","7e1ffba9":"\u79df\u8d41\u6570\u91cf\u4f1a\u53d7\u5c0f\u65f6\u7684\u5f71\u54cd, \u6bd4\u5982\u8bf4\u4e0a\u73ed\u9ad8\u5cf0\u671f\u7b49, \u6545\u5728\u8fd9\u91cc\u5148\u4e0d\u5904\u7406\u5f02\u5e38\u503c.","f4f84d53":"## 4.2 Lasso","7c21d186":"# 4.\u56de\u5f52\u6a21\u578b","b9c2052e":"\u6700\u540e, \u518d\u7528\u4f20\u7edf\u7684\u7ebf\u6027\u56de\u5f52\u8fdb\u884c\u9884\u6d4b, \u4ece\u800c\u5bf9\u6bd4\u4e09\u8005\u4e4b\u95f4\u7684\u5dee\u5f02."}}