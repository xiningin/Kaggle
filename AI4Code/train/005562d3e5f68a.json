{"cell_type":{"68626cc5":"code","6ca161ab":"code","fa85a287":"code","136e3413":"code","4f510cd1":"code","a66961d2":"code","7d22ee2e":"code","52cc18b2":"code","37191a1b":"code","4abf77e8":"code","08604bf3":"code","9cd35364":"code","0901d143":"code","8b3ea39e":"code","d23958eb":"code","a80998d3":"code","f29dcb2e":"code","73ddca38":"code","776200fc":"code","09d376bc":"code","e893e32c":"code","6bdcc55e":"markdown","10885d7b":"markdown","e1869845":"markdown","3e26c471":"markdown","ffac6947":"markdown","d86eb707":"markdown","e7747ef2":"markdown","d3b09198":"markdown","5e814088":"markdown","754d645c":"markdown","65da1e6f":"markdown","c609796b":"markdown","ada930da":"markdown","86cdfebf":"markdown","e530275e":"markdown","5db1b9c3":"markdown","2af32a19":"markdown","319c5f45":"markdown"},"source":{"68626cc5":"# add 2 lists \nL1 = [1, 2, 3]\nL2 = [4, 5, 6]\nprint(L1+L2)","6ca161ab":"# element wise sum using numpy array \nimport numpy as np \nA1 = np.array([1, 2, 3])\nA2 = np.array([4, 5, 6])\nprint(A1+A2)","fa85a287":"import numpy as np\nimport time\nimport sys\nS = range(1000)\nprint(\"Python List: \", sys.getsizeof(5)*len(S))\n \nD = np.arange(1000)\nprint(\"Numpy Array: \", D.size*D.itemsize)","136e3413":"import time\nimport sys\n \nSIZE = 1000000\n \nL1 = range(SIZE)\nL2 = range(SIZE)\nA1 = np.arange(SIZE)\nA2 = np.arange(SIZE)\n \nstart= time.time()\nresult=[(x,y) for x,y in zip(L1,L2)]\n# time in ms \nprint((time.time()-start)*1000)\n \nstart = time.time()\nresult = A1+A2\n# time in ms \nprint((time.time()-start)*1000)","4f510cd1":"%timeit sum(range(1000))","a66961d2":"%timeit np.sum(np.arange(1000))","7d22ee2e":"# import numpy \nimport numpy as np ","52cc18b2":"# Creating 1D array\nA = np.array([1, 2, 3])\nprint(A)","37191a1b":"# type \nprint(type(A))","4abf77e8":"# create an array with categorical entities. \nX = np.array([12, 13, \"n\"])\nprint(X)","08604bf3":"# type \nprint(type(X))","9cd35364":"# Creating 2D array\nA2 = np.array([[3, 4, 5], [7, 8, 9]])\nprint(A2) ","0901d143":"# Creating 3D array\nA3 = np.array([[(1, 2, 3), (4, 5, 6)], [(7, 8, 9), (10, 11, 12)]])\nprint(A3) ","8b3ea39e":"A1 = np.array([1, 2, 3,4, 5])\n# size \nA1.size","d23958eb":"A2 = np.array([[4, 5, 6], [7, 8, 9]])\n# shape \nA2.shape ","a80998d3":"# get row \nA2.shape[0]","f29dcb2e":"# get column\nA2.shape[1]","73ddca38":"A3 = np.linspace(0, 100, 6)\n# dtypes \nA3.dtype","776200fc":"A4 = np.ones((2,3))\n# convert \nA4.astype(np.float16)","09d376bc":"A5 = np.linspace(0, 100, 20)\n# array to list \nA5.tolist() ","e893e32c":"np.info(np.linspace)","6bdcc55e":"![numpy.jpeg](attachment:numpy.jpeg)","10885d7b":"## Faster","e1869845":"### Size \n- Returns number of elements in array\n- **Syntax:** `array.size`","3e26c471":"## Creating Arrays \n- **Array:** Ordered collection of elements of basic data types of given length.\n- **Syntax**\n```python \nnp.array(object)\n```","ffac6947":"## Inspecting array properties","d86eb707":"## Calculation\n- Element wise sum is not possible in Python list. But numpy can do that it is an advantage of numpy array\n","e7747ef2":"## Array with Categorical Entities \n- Numpy can handle different categorical entities. \n- All elements are coerced into same data type ","d3b09198":"## Numpy array to Python List \n- Returns the Python list \n- **Syntax:** `array.tolist()`","5e814088":" ## Type Conversion \n - Convert array elements to type dtype\n - **Syntax:** `array.astype(dtype)`\n     - dtype - data type ","754d645c":"## Less Memory","65da1e6f":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Introduction-to-NumPy\" data-toc-modified-id=\"Introduction-to-NumPy-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Introduction to NumPy<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#What-is-NumPy?\" data-toc-modified-id=\"What-is-NumPy?-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;<\/span>What is NumPy?<\/a><\/span><\/li><li><span><a href=\"#Keypoints\" data-toc-modified-id=\"Keypoints-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;<\/span>Keypoints<\/a><\/span><\/li><li><span><a href=\"#NumPy-Array\" data-toc-modified-id=\"NumPy-Array-1.3\"><span class=\"toc-item-num\">1.3&nbsp;&nbsp;<\/span>NumPy Array<\/a><\/span><\/li><li><span><a href=\"#N-dimensional-Array\" data-toc-modified-id=\"N-dimensional-Array-1.4\"><span class=\"toc-item-num\">1.4&nbsp;&nbsp;<\/span>N-dimensional Array<\/a><\/span><\/li><li><span><a href=\"#Getting-Started\" data-toc-modified-id=\"Getting-Started-1.5\"><span class=\"toc-item-num\">1.5&nbsp;&nbsp;<\/span>Getting Started<\/a><\/span><\/li><li><span><a href=\"#Why-Numpy?\" data-toc-modified-id=\"Why-Numpy?-1.6\"><span class=\"toc-item-num\">1.6&nbsp;&nbsp;<\/span>Why Numpy?<\/a><\/span><\/li><li><span><a href=\"#Calculation\" data-toc-modified-id=\"Calculation-1.7\"><span class=\"toc-item-num\">1.7&nbsp;&nbsp;<\/span>Calculation<\/a><\/span><\/li><li><span><a href=\"#Less-Memory\" data-toc-modified-id=\"Less-Memory-1.8\"><span class=\"toc-item-num\">1.8&nbsp;&nbsp;<\/span>Less Memory<\/a><\/span><\/li><li><span><a href=\"#Faster\" data-toc-modified-id=\"Faster-1.9\"><span class=\"toc-item-num\">1.9&nbsp;&nbsp;<\/span>Faster<\/a><\/span><\/li><li><span><a href=\"#Creating-Arrays\" data-toc-modified-id=\"Creating-Arrays-1.10\"><span class=\"toc-item-num\">1.10&nbsp;&nbsp;<\/span>Creating Arrays<\/a><\/span><\/li><li><span><a href=\"#Array-with-Categorical-Entities\" data-toc-modified-id=\"Array-with-Categorical-Entities-1.11\"><span class=\"toc-item-num\">1.11&nbsp;&nbsp;<\/span>Array with Categorical Entities<\/a><\/span><\/li><li><span><a href=\"#Inspecting-array-properties\" data-toc-modified-id=\"Inspecting-array-properties-1.12\"><span class=\"toc-item-num\">1.12&nbsp;&nbsp;<\/span>Inspecting array properties<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Size\" data-toc-modified-id=\"Size-1.12.1\"><span class=\"toc-item-num\">1.12.1&nbsp;&nbsp;<\/span>Size<\/a><\/span><\/li><li><span><a href=\"#Shape\" data-toc-modified-id=\"Shape-1.12.2\"><span class=\"toc-item-num\">1.12.2&nbsp;&nbsp;<\/span>Shape<\/a><\/span><\/li><li><span><a href=\"#Data-Type\" data-toc-modified-id=\"Data-Type-1.12.3\"><span class=\"toc-item-num\">1.12.3&nbsp;&nbsp;<\/span>Data Type<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Type-Conversion\" data-toc-modified-id=\"Type-Conversion-1.13\"><span class=\"toc-item-num\">1.13&nbsp;&nbsp;<\/span>Type Conversion<\/a><\/span><\/li><li><span><a href=\"#Numpy-array-to-Python-List\" data-toc-modified-id=\"Numpy-array-to-Python-List-1.14\"><span class=\"toc-item-num\">1.14&nbsp;&nbsp;<\/span>Numpy array to Python List<\/a><\/span><\/li><li><span><a href=\"#Get-Help:-View-documentation\" data-toc-modified-id=\"Get-Help:-View-documentation-1.15\"><span class=\"toc-item-num\">1.15&nbsp;&nbsp;<\/span>Get Help: View documentation<\/a><\/span><\/li><li><span><a href=\"#References\" data-toc-modified-id=\"References-1.16\"><span class=\"toc-item-num\">1.16&nbsp;&nbsp;<\/span>References<\/a><\/span><\/li><\/ul><\/li><\/ul><\/div>","c609796b":"### Data Type\n- Returns type of elements in array\n- **Syntax:** `array.size`","ada930da":"## References\n- [1] https:\/\/numpy.org\/\n- [2] https:\/\/www.edureka.co\/blog\/python-numpy-tutorial\/\n- [3] https:\/\/github.com\/enthought\/Numpy-Tutorial-SciPyConf-2019\n- [4] https:\/\/www.datacamp.com\/community\/tutorials\/python-numpy-tutorial","86cdfebf":"## Getting Started\nUse the following import convention\n```python\nimport numpy as np\n```","e530275e":"\n## What is NumPy?\n\nNumPy is a Python package which stands for \u2018Numerical Python\u2019. It is the core library for scientific computing, which contains a powerful n-dimensional array object, provide tools for integrating C, C++ etc. It is also useful in linear algebra, random number capability etc. NumPy array can also be used as an efficient multi-dimensional container for generic data. Now, let me tell you what exactly is a python numpy array.\n\n## Keypoints \n- Numpy stands for numerical Python\n- Fundamental package for numerical computations in Python\n- a powerful N-dimensional array object\n- sophisticated (broadcasting) functions\n- tools for integrating C\/C++ and Fortran code\n- useful linear algebra, Fourier transform, and random number capabilities\n\n## NumPy Array\nNumpy array is a powerful N-dimensional array object which is in the form of rows and columns. We can initialize numpy arrays from nested Python lists and access it elements. In order to perform these numpy operations.\n\n## N-dimensional Array\n- 1Dimensional(1D) Array\n- 2Dimensional(2D) Array\n![arrays.png](attachment:arrays.png)","5db1b9c3":"## Get Help: View documentation\n- Returns a documentation\n- **Syntax:** `np.info(np.function)`\n    - function - linspace, logspace, eye, ones, zeros etc.","2af32a19":"### Shape\n- Returns dimensions of array (rows,columns)\n- **Syntax:** `array.shape`","319c5f45":"## Why Numpy?\n- Less Memory\n- Fast\n- Convenient"}}