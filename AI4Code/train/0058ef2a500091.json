{"cell_type":{"c33fe3d1":"code","6914020a":"code","d9056acf":"code","1fb7aa68":"code","eb598ff7":"code","07853345":"code","6b1ed4a9":"code","359e05e5":"code","70cd720e":"code","697c9961":"markdown","00dcb8d6":"markdown","ecefbbf4":"markdown","bedee3a7":"markdown","82ba0aa7":"markdown","364c24fc":"markdown","a6844fcd":"markdown","f84a2b65":"markdown"},"source":{"c33fe3d1":"import pandas as pd  \nimport numpy as np  \nimport matplotlib.pyplot as plt  \nimport seaborn as sns \nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.impute import SimpleImputer\n%matplotlib inline","6914020a":"def write_submissions(file_name, test_df, predictions):\n    test_df.Id = test_df.Id.astype('int32')\n\n    output = pd.DataFrame({\n        'Id': test_df.Id, 'SalePrice': predictions\n    })\n    output.to_csv(file_name, index=False)","d9056acf":"def get_categorical_columns(data_df):\n    return list(data_df.select_dtypes(include=['category', 'object']))\n\ndef get_numerical_columns(data_df):\n    return list(data_df.select_dtypes(exclude=['category', 'object'])) ","1fb7aa68":"def read_train_test_data():\n    train_df = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\n    test_df = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')\n    \n    print(\"Shape of Train Data: \" + str(train_df.shape))\n    print(\"Shape of Test Data: \" + str(test_df.shape))\n    \n    categorical_columns = get_categorical_columns(train_df)\n    print(\"No of Categorical Columns: \" + str(len(categorical_columns)))\n    numeric_columns = get_numerical_columns(train_df)\n    print(\"No of Numeric Columns: \" + str(len(numeric_columns)))\n\n    return train_df, test_df\n\ntrain_df, test_df = read_train_test_data()","eb598ff7":"categorical_columns = get_categorical_columns(train_df)\ntrain_df[categorical_columns].describe()","07853345":"numerical_columns = get_numerical_columns(train_df)\ntrain_df[numerical_columns].describe()","6b1ed4a9":"num_train_df = train_df[numerical_columns]\nnum_train_df.isnull().sum()","359e05e5":"# Preparing model\nX = train_df[numerical_columns].copy()\nX.drop(columns=[\"SalePrice\"], axis=1, inplace=True)\ny = train_df.SalePrice\n\n# Setting up imputer\nimputer = SimpleImputer(strategy='median')\nimputed_numeric_X = imputer.fit_transform(X)\n\nimputed_numeric_test = imputer.transform(test_df[X.columns])","70cd720e":"def simple_model(X, y, X_test):\n    model = DecisionTreeRegressor(random_state=1)\n    predictions = None\n    try:\n        model.fit(X, y)\n        predictions = model.predict(X_test)\n    except Exception as exception:\n        print(exception)\n        pass\n\n    return predictions\n\npredictions = simple_model(imputed_numeric_X, y, imputed_numeric_test)","697c9961":"### Finding null values\nLet's focus on numerical values ","00dcb8d6":"### Creating a function for submission","ecefbbf4":"## Importing required packages ","bedee3a7":"### Assigning the categorical and numerical variables\n","82ba0aa7":"### Having an overview of test and train data","364c24fc":"### Using decision tree regressor ","a6844fcd":"### Using SimpleImputer ","f84a2b65":"### Creating a function to get categorical and numerical column"}}