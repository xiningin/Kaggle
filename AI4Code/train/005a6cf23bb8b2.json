{"cell_type":{"c5f2184b":"code","f47f8605":"code","39bdafbd":"code","5d9284b5":"code","81b2428b":"code","a533fada":"code","59358dda":"code","cdacaca5":"code","d8059d36":"code","c4cae226":"code","11b927b7":"code","285c22c4":"code","e914ff72":"code","546978cf":"code","7786d85a":"code","41092224":"code","48745837":"code","b10bd7b9":"code","0bccac1c":"code","cd70792b":"code","ce8b56fa":"code","8bcba428":"code","b3d9fbda":"code","d187ac16":"code","1bddb219":"code","01ab59ce":"code","9c142516":"code","f44ad6dc":"code","13341465":"code","c943a815":"code","95b7d5df":"code","d42cd9cd":"code","1a4f789c":"code","b0dfc407":"code","622e53fb":"code","002f3e32":"code","1dbbebe0":"code","f315c067":"code","32691cbb":"code","4ed0eb60":"code","1de09db8":"markdown","db61c4f1":"markdown","93d06962":"markdown","d970e1da":"markdown","802819f9":"markdown","ef96e88d":"markdown","5c41b2cb":"markdown","c60d5241":"markdown","f6f92b39":"markdown","e7f676d5":"markdown","be78e575":"markdown","22ef3b7d":"markdown","7641df13":"markdown","a24437a7":"markdown","e0926045":"markdown","33306008":"markdown","4b9e828d":"markdown","ae6519ca":"markdown","6a803858":"markdown","b82bac6f":"markdown","041ffe63":"markdown","dff2d0ff":"markdown","862c55ce":"markdown","8d89c6c1":"markdown","5b16ccfe":"markdown"},"source":{"c5f2184b":"# imports\nimport numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f47f8605":"# data import\ndata = pd.read_csv('..\/input\/insurance\/insurance.csv')","39bdafbd":"data.head()","5d9284b5":"data.info()","81b2428b":"data.describe(include='all')","a533fada":"fig, ax = plt.subplots(figsize=(7, 5))\nsns.heatmap(data.corr(), annot=True, linewidths=.1, cmap=\"coolwarm\", square=True)","59358dda":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(data.sex.drop_duplicates()) \ndata.sex = le.transform(data.sex)\nle.fit(data.smoker.drop_duplicates()) \ndata.smoker = le.transform(data.smoker)\nle.fit(data.region.drop_duplicates()) \ndata.region = le.transform(data.region)\n\ndata.head()","cdacaca5":"fig, ax = plt.subplots(figsize=(8, 6))\nsns.heatmap(data.corr(), annot=True, linewidths=.1, cmap=\"coolwarm\", square=True)","d8059d36":"_ = data.hist(data.columns, figsize=(12, 12), bins=15)","c4cae226":"data.bmi.median()","11b927b7":"_ = sns.boxplot(data.charges)","285c22c4":"fig, axes = plt.subplots(1, 2, figsize=(12,6))\ndata[data['smoker']==1]['charges'].hist(bins=20, alpha=0.5, label='smokers', ax=axes[0])\ndata[data['smoker']==0]['charges'].hist(bins=20, alpha=0.5, label='NON-smokers', ax=axes[1])","e914ff72":"### \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435\nfig, ax = plt.subplots(figsize=(8,6))\nplt.hist([data[data['smoker']==1]['charges'],\n          data[data['smoker']==0]['charges']\n         ], \n         bins=20, alpha=0.5, label=['smokers','NON-smokers'])\nax.set_ylabel(\"Count\")\nax.legend(loc='upper right')","546978cf":"fig, ax = plt.subplots(figsize=(8,6))\nsns.boxplot(x=\"sex\", y=\"charges\", hue=\"smoker\", data=data)","7786d85a":"# \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\u043a\u0438 \u0438 \u043f\u0440\u043e\u0447\u0435\u0435\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, LogisticRegression, SGDRegressor\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.preprocessing import PolynomialFeatures, LabelEncoder\nfrom sklearn import utils\nfrom sklearn.metrics import r2_score,mean_squared_error,f1_score,roc_auc_score ","41092224":"X = data.drop(columns=['charges'])\ny = data['charges']","48745837":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=146)","b10bd7b9":"regressor = LinearRegression()\n\nregressor.fit(X_train, y_train)\ntest_predictions = regressor.predict(X_test)\n\nprint(regressor.score(X_test,y_test))\nprint('test mse: ', mean_squared_error(y_test, test_predictions))\nprint('r2: ', r2_score(y_test, test_predictions))","0bccac1c":"plt.figure(figsize=(10, 6))\nplt.bar(X.columns, regressor.coef_)","cd70792b":"# \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435\nmean = data.mean(axis=0)\nstd = data.std(axis=0)\n# 0 \u043c\u0430\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0438 1 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044e\ndata_s = (data - mean)\/std","ce8b56fa":"X = data_s.drop(columns=['charges'])\ny = data_s['charges']","8bcba428":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=146)","b3d9fbda":"regressor = LinearRegression()\n\nregressor.fit(X_train, y_train)\ntest_predictions = regressor.predict(X_test)\n\nprint('r2: ', regressor.score(X_test,y_test))\nprint('test mse: ', mean_squared_error(y_test, test_predictions))\n#print('r2: ', r2_score(y_test, test_predictions))","d187ac16":"_ = sns.catplot(data=data, y=\"charges\", orient=\"h\", kind=\"box\", height=4, aspect=3)","1bddb219":"p99= data_s.charges.quantile(0.99)\nprint(p99, data.charges.quantile(0.99))","01ab59ce":"data1 = data_s[data_s.charges<=p99]\nX = data1.drop(columns=['charges'])\ny = data1['charges']","9c142516":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=146)","f44ad6dc":"regressor = LinearRegression()\n\nregressor.fit(X_train, y_train)\ntest_predictions = regressor.predict(X_test)\n\nprint('r2: ', regressor.score(X_test,y_test))\nprint('mse: ', mean_squared_error(y_test, test_predictions))","13341465":"plt.figure(figsize=(10, 6))\nplt.bar(X.columns, regressor.coef_)","c943a815":"def get_cv_scores(model):\n    scores = cross_val_score(model,\n                             X_train,\n                             y_train,\n                             cv=10,\n                             scoring='r2')\n    \n    print('CV Mean: ', np.mean(scores))\n    print('STD: ', np.std(scores))","95b7d5df":"# get cross val scores\nget_cv_scores(regressor)\nprint('r2: ', regressor.score(X_test,y_test))","d42cd9cd":"f = plt.figure(figsize=(16,6))\nax = f.add_subplot(122)\nsns.distplot((y_test - test_predictions),ax=ax,color='b')\nax.axvline((y_test - test_predictions).mean(),color='k',linestyle='--')\nax.set_title('Check for Residual normality & mean: \\n Residual eror');","1a4f789c":"alphas = np.linspace(1, 1000, 1000)\n\nweights = np.empty((len(X.columns), 0))\nfor alpha in alphas:\n    ridge_regressor = Ridge(alpha)\n    ridge_regressor.fit(X_train, y_train)\n    weights = np.hstack((weights, ridge_regressor.coef_.reshape(-1, 1)))\nplt.figure(figsize=(8,6))\nplt.plot(alphas, weights.T, linewidth=3)\nplt.xlabel('regularization coef')\nplt.ylabel('weight value')\nplt.legend(X.columns)\nplt.show()","b0dfc407":"ridge_regressor = Ridge(200)\nridge_regressor.fit(X_train, y_train)\n# get cross val scores\nget_cv_scores(ridge_regressor)\nprint('r2: ', ridge_regressor.score(X_test,y_test))","622e53fb":"alphas = np.linspace(0.001, 1 , 100)\n\nplt.figure(figsize=(10, 5))\nweights = np.empty((len(X.columns), 0))\nfor alpha in alphas:\n    lasso_regressor = Lasso(alpha)\n    lasso_regressor.fit(X_train, y_train)\n    weights = np.hstack((weights, lasso_regressor.coef_.reshape(-1, 1)))\nplt.figure(figsize=(8,6))\nplt.plot(alphas, weights.T, linewidth=3)\nplt.xlabel('regularization coef')\nplt.ylabel('weight value')\nplt.legend(X.columns)\nplt.grid()\nplt.show()","002f3e32":"lasso_regressor = Lasso(0.01)\nlasso_regressor.fit(X_train, y_train)\n# get cross val scores\nget_cv_scores(lasso_regressor)\nprint('r2: ', lasso_regressor.score(X_test,y_test))","1dbbebe0":"poly = PolynomialFeatures(2)\nX_poly = poly.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.3, random_state=146)","f315c067":"regressor = LinearRegression()\nregressor.fit(X_train, y_train)\n# get cross val scores\nget_cv_scores(regressor)\nprint('r2: ', regressor.score(X_test,y_test))","32691cbb":"sgd = SGDRegressor()\nsgd_params = {\n              'loss':['squared_loss','huber','epsilon_insensitive','squared_epsilon_insensitive'], \n              'penalty': ['l1','l2','elasticnet'], \n              'learning_rate':['constant','optimal','invscaling','adaptive'], \n              'alpha': [1e-3, 1e-4, 1e-5, 1e-6, 1e-7]\n             } \ngs = GridSearchCV(sgd, sgd_params, cv=5)","4ed0eb60":"gs.fit(X_train, y_train)\nprint('best params: ', gs.best_params_)\nprint('best score on CV: ', gs.best_score_)\nprint('r2: ', gs.score(X_test, y_test))","1de09db8":"\u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0438\u0447\u0438","db61c4f1":"\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442","93d06962":"\u043f\u043e\u0441\u043b\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u0445 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u0442\u043e\u0436\u0435 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0440\u043e\u0432\u043d\u044f\u043b\u043e\u0441\u044c","d970e1da":"\u0432\u0438\u0434\u0438\u043c:    \n- \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u0430\u044f, \u043a\u0440\u043e\u043c\u0435 \u043c\u043e\u043b\u043e\u0434\u044b\u0445 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 - \u0438\u0445 \u043f\u043e\u043f\u0430\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435\n- \u043f\u043e \u0432\u0435\u0441\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0441 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u0432 \u0440\u0430\u0439\u043e\u043d\u0435 30. (\u0435\u0441\u043b\u0438 \u0432\u0435\u0440\u0438\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0443 - bmi=30 - \u044d\u0442\u043e \u0442\u043e\u0447\u043a\u0430 \u043e\u0442\u0441\u0447\u0435\u0442\u0430 \u0434\u043b\u044f \"\u043e\u0436\u0438\u0440\u0435\u043d\u0438\u044f\", google:bmi chart)   \n- charges \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0430\u0441\u0441\u0438\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u043e, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\u043c. (\u0441\u043c boxplot)\n- children, region, sex \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0431\u0435\u0437 \u043a\u0430\u043a\u0438\u0445-\u0442\u043e \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439\n- \u043a\u0443\u0440\u0438\u043b\u044c\u0449\u0438\u043a\u043e\u0432 \u043c\u0435\u043d\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0441\u0432\u044f\u0437\u0430\u043d\u0430 \u0441 \u043d\u0438\u043c\u0438 \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c   ","802819f9":"\u0441\u0442\u0430\u043b\u043e \u0445\u0443\u0436\u0435 \u0432 \u043e\u0431\u043e\u0438\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445. \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0438 \u0442\u0430\u043a \u043d\u0435 \u0431\u044b\u043b\u043e \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043a\u0430\u043a\u0438\u0445-\u0442\u043e \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u0440\u0443\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u043c \u0444\u0438\u0447.","ef96e88d":"## \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437","5c41b2cb":"\u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044e","c60d5241":"## \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","f6f92b39":"\u043d\u0435 \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u0445\u043e\u0440\u043e\u0448\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435..","e7f676d5":"\u0445\u0432\u043e\u0441\u0442 \u0441\u043f\u0440\u0430\u0432\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u043b\u0441\u044f \u0438\u0437-\u0437\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","be78e575":"\u043f\u0440\u0438\u0437\u043d\u0430\u043a \"\u043a\u0443\u0440\u0438\u043b\u044c\u0449\u0438\u043a\" \u0432\u043d\u0435 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0446\u0438\u0438 :)","22ef3b7d":"\u043d\u0430\u0440\u0438\u0441\u0443\u0435\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u043e\u043b\u044f\u043c","7641df13":"\u0441\u0442\u0430\u043b\u0430 \u0432\u0438\u0434\u043d\u0430 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u0438\u043b\u044c\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0442 \u043f\u043e\u043b\u044f \"\u043a\u0443\u0440\u0438\u043b\u044c\u0449\u0438\u043a\"","a24437a7":"\u0443\u0431\u0435\u0440\u0435\u043c \u0432\u0441\u0435, \u0447\u0442\u043e \u043d\u0438\u0436\u0435 99 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044f. \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0443\u0442 \u0441\u0430\u043c\u044b\u0435 \u044f\u0432\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b - \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0432\u0438\u0434\u043d\u044b \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f","e0926045":"\u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u0441 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439?","33306008":"\u041f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0435\u0442. \u0443\u0436\u0435 \u0445\u043e\u0440\u043e\u0448\u043e :) \u0414\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e, \u044d\u0442\u043e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u043f\u043e\u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430.","4b9e828d":"\u043d\u0430 \u0442\u0440\u0435\u0439\u043d \u0434\u0430\u043d\u043d\u044b\u0445 sgd \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0441\u0435\u0431\u044f \u0447\u0443\u0442\u044c \u043b\u0443\u0447\u0448\u0435.","ae6519ca":"\u041b\u0435\u0447\u0438\u0442\u044c \u043a\u0443\u0440\u0438\u043b\u044c\u0449\u0438\u043a\u043e\u0432 \u0434\u043e\u0440\u043e\u0436\u0435.   \n\u041c\u0435\u0436\u0434\u0443 \u041c \u0438 \u0416 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0440\u0430\u0437\u043d\u0438\u0446\u044b \u043d\u0435\u0442.","6a803858":"mse \u0442\u0435\u043f\u0435\u0440\u044c \u0432 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445, \u043d\u043e \u0432\u0441\u0451 \u0435\u0449\u0451 \u0432\u0435\u043b\u0438\u043a\u043e\u0432\u0430\u0442","b82bac6f":"\u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","041ffe63":"\u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445   \n\u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430 \u0434\u043b\u044f \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f:","dff2d0ff":"\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0442\u0440\u0430\u0442 \u0438 \u043f\u043e\u043b\u0430+\u043a\u0443\u0440\u0435\u043d\u0438\u044f","862c55ce":"\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0438 \u0444\u0438\u0447\u0435\u0439","8d89c6c1":"\u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0444\u0438\u0447\n\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0438\u0445 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435","5b16ccfe":"score \u0441\u0442\u0430\u043b \u0447\u0443\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0448\u0435. mse \u0442\u043e\u0436\u0435, \u043d\u043e \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e"}}