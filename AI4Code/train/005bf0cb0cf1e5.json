{"cell_type":{"a2dacc28":"code","4b164dc9":"code","dc6b3a89":"code","0c3e045a":"code","d3175678":"code","042cfce6":"code","6b063353":"code","bed0d2bc":"code","5182defc":"code","6e5f91c7":"code","da6e6306":"code","7a157e1b":"code","0f1e89b0":"code","d0590238":"code","c4facdbd":"code","2668f351":"code","04f1d6e4":"code","a9040cf0":"code","b603ef50":"code","5b77c1b3":"code","c822cb38":"code","c92a2527":"code","81c543e7":"markdown","517dfaf7":"markdown","6ca5dc66":"markdown","5589cf8a":"markdown","9b368f74":"markdown","c02524b2":"markdown","7e100adf":"markdown"},"source":{"a2dacc28":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","4b164dc9":"# Read stock market data\ndf = pd.read_csv(\"..\/input\/ibm-stock-market-dataset-from-alpha-vantage\/IBM_stock_market_data.csv\", index_col = 0)\n\n# Convert the index to datetime\ndf.index = pd.DatetimeIndex(df.index)\n\ndf.head()","dc6b3a89":"# Plot the stock data\nplt.figure(figsize=(16,6))\nplt.title('Close Price History', fontsize=20)\nplt.plot(df['close'].astype(float))\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.show()","0c3e045a":"# Get the close prices from the dataframe\ndata = df.filter([\"close\"]).astype(float)\ndataset = data.values\n\n# divide the data into training data and test data\ntraining_data_len = int(np.ceil(len(dataset)*.95))\n\nprint(f\"Total Length of Dataset: {len(dataset)}\")\nprint(f\"Length of Training Dataset: {training_data_len}\")\nprint(f\"Length of Test Dataset: {len(dataset) - training_data_len}\")","d3175678":"# Scale the data\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset)\n\nscaled_data","042cfce6":"# Create scaled training dataset\ntrain_data = scaled_data[0:int(training_data_len),:]\n\nx_train = []\ny_train = []\n\nfor i in range(60, len(train_data)):\n    x_train.append(train_data[i-60:i,0])\n    y_train.append(train_data[i,0])\n\n# Convert to array and reshape\nx_train, y_train = np.array(x_train), np.array(y_train)\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1],1))\n\nx_train.shape","6b063353":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM\n\n# Build the LSTM model\nmodel = Sequential()\nmodel.add(LSTM(128, return_sequences=True, input_shape=(x_train.shape[1],1)))\nmodel.add(LSTM(64, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\n\n# Compile the model\nmodel.compile(optimizer=\"adam\", loss=\"mean_squared_error\")","bed0d2bc":"model.summary()","5182defc":"# Train the model\nhistory = model.fit(x_train, y_train, batch_size=1, epochs=1)","6e5f91c7":"# Create test data\ntest_data = scaled_data[training_data_len-60:,:]\n\nx_test = []\ny_test = dataset[training_data_len:, :]\nfor i in range(60, len(test_data)):\n    x_test.append(test_data[i-60:i,0])\n\n# Convert to array and reshape\nx_test = np.array(x_test)\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))","da6e6306":"# Get the predicted price values\npredictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)","7a157e1b":"# Get root mean squared error\nrmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))\nrmse","0f1e89b0":"# Plot the data\ntrain = data[:training_data_len].copy()\nvalid = data[training_data_len:].copy()\nvalid[\"Predictions\"] = predictions\n\n# Visualize the data\nplt.figure(figsize=(16,6))\nplt.title(\"Prediction Model\", fontsize = 20)\nplt.xlabel(\"Date\", fontsize = 18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.plot(train[\"close\"])\nplt.plot(valid[[\"close\", \"Predictions\"]])\nplt.legend([\"Training Set\", \"Test Set\", \"Predictions\"], loc = \"lower right\")\nplt.show()","d0590238":"# Subtract previous day's price from the predicted price\n# 0 for decrease, and 1 for increase\nvalid.loc[:,\"Predicted Inc or Dec\"] = ( valid[\"Predictions\"] - valid[\"close\"].shift() ) > 0\nvalid.loc[:,\"Predicted Inc or Dec\"] = valid[\"Predicted Inc or Dec\"].copy().astype(int)\n\nvalid[\"Predicted Inc or Dec\"].head()","c4facdbd":"# Subtract previous day's price from the following day's price\n# 0 for decrease, and 1 for increase\nvalid.loc[:,\"Actual Inc or Dec\"] = ( valid[\"close\"] - valid[\"close\"].shift() ) > 0\nvalid.loc[:,\"Actual Inc or Dec\"] = valid[\"Actual Inc or Dec\"].astype(int)\n\nvalid[\"Actual Inc or Dec\"].head()","2668f351":"from sklearn.metrics import confusion_matrix,classification_report\n\n# Classification report\ny_test = valid[\"Actual Inc or Dec\"]\ny_pred = valid[\"Predicted Inc or Dec\"]\n\nprint(classification_report(y_test, y_pred))","04f1d6e4":"# Confusion matrix\nconfusion_matrix(y_test, y_pred)","a9040cf0":"# Create test data\ntest_data = scaled_data[training_data_len-60:training_data_len,:]\n\nx_test = []\ny_test = dataset[training_data_len:, :]\npredictions = []\n\n# Initial x_test consists only the stock price of 60 days\nfor i in range(0, 60):\n    x_test.append(test_data[i,0])\n\n# The model predicts the stock price of each day\n\nfor i in range(0 , len(scaled_data) - training_data_len):\n    temp_x = x_test[i:i+60]\n    temp_x = np.array(temp_x)\n    temp_x = np.reshape(temp_x, (1, temp_x.shape[0], 1))\n    temp_predict = model.predict(temp_x)\n    predictions.append(temp_predict[0][0])\n    \n    # Append the prediction to the x_test, so that it will be used for the next prediction\n    x_test.append(temp_predict[0][0])\n\n# Convert to array and reshape\npredictions = np.array(predictions)\npredictions = np.reshape(predictions, (predictions.shape[0],1))\npredictions.shape","b603ef50":"# Get the predicted price values using the scaler\npredictions = scaler.inverse_transform(predictions)","5b77c1b3":"# Get root mean squared error\nrmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))\nrmse","c822cb38":"# Plot the data\ntrain = data[:training_data_len].copy()\nvalid2 = data[training_data_len:].copy()\nvalid2[\"Predictions\"] = predictions\nvalid2.head()","c92a2527":"# Visualization\nplt.figure(figsize=(16,6))\nplt.title(\"Prediction Model\", fontsize = 20)\nplt.xlabel(\"Date\", fontsize = 18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.plot(train[\"close\"])\nplt.plot(valid2[[\"close\", \"Predictions\"]])\nplt.legend([\"Training Set\", \"Test Set\", \"Predictions\"], loc = \"lower right\")\nplt.show()","81c543e7":"Now we are done designing the structure of the LSTM model. Before we move on to the next step, let's look closely at the summary of the model is shown below:","517dfaf7":"It can be easily seen from the visualization that the prediction doesn't provide a credible prediction. The model does not successfully predict the overall trend nor the fluctuations of the stock prices. The assessments show that this model fails to give any meaningful information.\n\n## Conclusion\n\nStock market prediction is not an easy task because there is no guarantee that the same pattern in the past will repeat in the future. This is the area where even the experts and researchers don't aim for high accuracy. Yet, it seems to me that many people who have shallow knowledge about machine learning are susceptible to believe that such prediction is possible, due to many seemingly accurate predictions made by others. I hope this notebook will help the readers to realize the limitation of what machine learning can do. Nevertheless, there are some other approaches that you may want to try for your own study:\n\n- Try shorter time range for each instance, such as using the data of 3 days to predict the next one day. It is highly unlikely that the trend 60 days before and the trend now matches.\n- Consider other features that may correlate to the change in prices. Close price is not the only information that can be used to predict. There can be volumes, order book data, and so on.\n- Making prediction in relation to other companies' stock prices is something to be considered also.\n- Test different batch size and the number of epochs. Current model performs very differently each time it gets trained, meaning it's performance depends so much on randomness.","6ca5dc66":"An input of any LSTM layer must follow this shape:\n\n`(batch_size, time_steps, features)`\n\nBatch size is simply the number of instances of the training set, which is 5147. We are using the data from the past 60 days to predict the next day's price, so the number of time steps is 60. The number of features is 1, since we are only using the close prices. Here is the input shape of this model:\n\n`(5147, 60, 1)`\n\nAnd here is the output shape of the first LSTM layer:\n\n`(None, 60, 128)`\n\nWe have 128 as the size of output features. You might be misled to think that the model is drawing 128 traits from the past 60 days stock prices, but this is not how the LSTM is structured. Instead, the model is trying to draw 128 traits from only one feature. The model is too complex considering the very simple training data.\n\nLet's move on to the next step.","5589cf8a":"The minmax scaler may not be an appropriate method since there is no maximum price in stock price. Nevertheless, we are going to stick to this since this is not the main issue with this model.","9b368f74":"# Limitation of predicting stock market price\n___\n![](https:\/\/images.unsplash.com\/photo-1620228885847-9eab2a1adddc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=966&q=80)\n\nIs it possible to predict stock market prices? I spent some time trying to find the best quantitative investment strategy, and I ended up making my own auto-trade algorithm program. It doesn't guarantee a profit. Coincidentally, machine learning has been my recent interest, and I have been trying to find a way to use machine learning technique in this investment strategy in a hope to increase the possibility to make profits. I was able to find many sources that seem to predict future stock price very accurately, and I was very excited to use them in my algorithm. As I studied more into it, I realized that none of them were useful. I would like to share my thoughts about it in this notebook.\n\nWe can easily find a lot of stock market data analysis that are open to public. While there are some meaningful analyses out there, I find that the attempt to predict the future stock prices can be hugely misleading. The prediction graphs that many data scientists generate may seem very accurate, but in fact, they show no meaningful analysis. There are tons of outside features that correlate to the stock market price fluctuation, so that the accurate prediction of the future stock price is nearly impossible. Therefore, when the result of the stock market prediction is overly accurate, we should expect that something is wrong with the interpretation of the analysis. The goal here is to review one of the most upvoted stock market data analysis in Kaggle and provide different aspect to the model.\n\nIn this notebook, I will refer to the stock market analysis of Fares Sayah and his prediction using LSTM. I want to make it clear that I have no intention to discredit his work. This is meant to provide a different perspective that can perhaps improve future stock market analysis. The link to his work is provided here:\n\nhttps:\/\/www.kaggle.com\/faressayah\/stock-market-analysis-prediction-using-lstm\n\nThis notebook consists of two main parts. In the first part, we will walk through the original model that was used to make prediction, and in the second part, we will assess the applicability of the model.\n\n1. Walk Through the Original Model\n\n2. Assess the Applicability of the Model\n\n## 1. Walk Through the Original Model\n\nThe stock market analysis of Fares Sayah consists of 6 parts, and the future stock price prediction is done at the last part. A deep learning model LSTM, the abbreviation for Long Short Term Memory, is used to make the prediction. His model takes the stock price data of the past 60 days as an input and returns the prediction of the next day. In this notebook, we will use the same model structure, with a different stock data provided by Alpha Vantage. Alpha Vantage provides an open API that offers 20+ years of historical stock market data. We will use IBM stock price data to train the model. I used GET request method to download the data as shown below:\n\n```python\nimport requests\n\n# Request stock data from Alpha Vantage through the REST API\n# When you run this on your own, I recommend you claim your own API key on the link here:\n# https:\/\/www.alphavantage.co\/support\/#api-key\n\nurl = \"https:\/\/www.alphavantage.co\/query\"\n\nquary = {\"function\" : \"TIME_SERIES_DAILY\",\n    \"symbol\" : \"IBM\",\n    \"outputsize\" : \"full\",\n    \"datatype\" : \"json\",\n    \"apikey\" : [apikey]\n}\n\nresponse = requests.request(method = \"GET\", url = url, params = quary)\nres = response.json()[\"Time Series (Daily)\"]\n\n# Create a dataframe from the response\ndf = pd.DataFrame(res).transpose()\ndf.index = pd.DatetimeIndex(df.index)\ndf = df.sort_index()\ndf = df.rename(columns={\"1. open\": \"open\", \n    \"2. high\": \"high\", \n    \"3. low\": \"low\", \n    \"4. close\": \"close\",\n    \"5. volume\": \"volume\"})\n\n# Save as csv\ndf.to_csv(\"IBM_stock_market_data.csv\", index = True)\n```\n\nNow we have the dataset to work with.\n","c02524b2":"Here we have the visualized prediction model that many data scientists would come up with. The model seems to predict the future stock price very accurately, way too accurate to be suspicious. In fact, there is a huge flaw to this analysis. The model is only able to predict one day after, while the graph seems to tell you that this can predict for much longer than that. Therefore, the model that seems very accurate doesn't actually provide any meaningful result. The applicability of this model must be discussed, which will be done in the next part.\n\n## 2. Assess the Applicability of the Model\n\nWhen we make the stock market prediction model, we hope that this will help us with the investment decisions. Therefore, in order to assess the applicability of this model, we need to see if this model provides a meaningful result in regard to the investment. We will take two different approaches:\n\n* Short Term Prediction: Focus on whether the model predicts an increase or a decrease.\n* Long Term Prediction: Use predicted prices to predict the next one.\n   \n### Short Term Prediction: Focus on whether the model predicts an increase or a decrease\n\nWhen we predict the price just a day after, the accuracy of the price itself is not a big concern (the stock price next day will be close to the day before anyway). What we truly want to know is whether the price increases or decreases. In the following notebook, we will change the target values into a binary form, which indicates either increase or decrease.","7e100adf":"Unlike the very seemingly accurate graph above, this result tells a different story. We can see from the precision, recall, and F1-score that this is not any better than just simply guessing. This is not the model that you want to rely on when making invenstments.\n\n### Long Term Prediction: Use predicted prices to predict the next one\n\nWe now know that this model may not be suitable for short term prediction. Then we want to know if this model is suitable for long term prediction. In order to do that, we need to assume that none of the future price data exist in the first place. We will predict one instance at a time, and then include that prediction for the next prediction."}}