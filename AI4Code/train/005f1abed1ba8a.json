{"cell_type":{"6804d5f0":"code","03883c9c":"code","16cad683":"code","4edcae64":"code","c59bf450":"code","0c55cefb":"code","a2085412":"code","92e3e8d8":"code","3d050a2a":"code","1c93d0ac":"code","271af85e":"code","ddd54190":"code","acd8e7b7":"code","635ef52c":"code","3e6ffad3":"code","b250f9c4":"code","54dac969":"code","c7c04224":"code","3f8e0569":"code","bba4f0af":"code","78dee217":"code","6988c61e":"code","e86bfbe9":"code","75c56a47":"code","3ec628d0":"code","849977ed":"code","a4549891":"code","19108c43":"code","958da19a":"code","5f0755b8":"code","1d6b1acf":"code","5e14dbd6":"code","5fe82cc6":"code","c25d233e":"code","c6f45078":"code","72430e19":"code","b090c19b":"code","ee58e726":"code","29f64121":"code","aa8b5e63":"code","866a22f0":"code","f8250edd":"code","76ad391a":"code","f3807a8b":"code","1d078b46":"code","727fdc61":"code","91f6a463":"code","7eaa2747":"code","c5eea839":"code","6577a437":"code","4e865902":"code","fdf62a13":"code","d0790518":"code","6629bd48":"code","43dd5c84":"code","419dbf75":"code","6833ecc1":"code","9ad3503b":"code","9bfd62d4":"code","4095336a":"code","e24a0308":"code","90f3b994":"code","4490af05":"code","ce8fcd26":"code","6bca9693":"code","9afc924e":"code","f94b61dc":"code","c6c3114d":"code","87baa9f0":"code","d1630717":"markdown","0834a450":"markdown","3dadab1e":"markdown","adddff12":"markdown","8966f6b5":"markdown","32211b0b":"markdown"},"source":{"6804d5f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03883c9c":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('..\/input\/drug-classification\/drug200.csv')","16cad683":"df.head()","4edcae64":"df.describe()","c59bf450":"plt.figure(figsize = (20,10))\n\nsns.countplot(df['Age'])","0c55cefb":"sns.countplot(df['Sex'])","a2085412":"sns.countplot(df['BP'])","92e3e8d8":"sns.countplot(df['Cholesterol'])","3d050a2a":"sns.countplot(df['Drug'], hue='Sex', data = df)","1c93d0ac":"sns.boxplot(x = 'Sex', y = 'Na_to_K', data= df)","271af85e":"sns.boxplot(x = 'Drug', y = 'Na_to_K', data = df)","ddd54190":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\n\nfor i in list(df.columns):\n    if df[i].dtype=='object':\n        df[i]=le.fit_transform(df[i])","acd8e7b7":"plt.figure(figsize = (20,10))\nsns.heatmap(df.corr(), annot = True)","635ef52c":"df.head()","3e6ffad3":"from sklearn.model_selection import train_test_split","b250f9c4":"X = df.drop('Drug',axis=1)\ny = df['Drug']","54dac969":"X.head()","c7c04224":"from sklearn import tree\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)","3f8e0569":"from sklearn.tree import DecisionTreeClassifier","bba4f0af":"dtree = DecisionTreeClassifier()","78dee217":"dtree.fit(X_train,y_train)","6988c61e":"predictions = dtree.predict(X_test)","e86bfbe9":"from sklearn.metrics import classification_report,confusion_matrix","75c56a47":"print(classification_report(y_test,predictions))","3ec628d0":"features = list(df.columns[1:])","849977ed":"plt.figure(figsize = (20,10))\n\ntree.plot_tree(dtree,feature_names=features,filled=True,rounded=True)\n","a4549891":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)","19108c43":"rfc_pred = rfc.predict(X_test)","958da19a":"print(confusion_matrix(y_test,rfc_pred))","5f0755b8":"sns.heatmap(confusion_matrix(y_test, rfc_pred), annot=True)\n","1d6b1acf":"print(classification_report(y_test,rfc_pred))","5e14dbd6":"X = df.drop('Drug',axis=1)\ny = df['Drug'] ","5fe82cc6":"X.head()","c25d233e":"from sklearn.linear_model import LogisticRegression\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.35, random_state=0)","c6f45078":"logmodel = LogisticRegression()\n","72430e19":"logmodel.fit(X_train, y_train)\n","b090c19b":"predictions = logmodel.predict(X_test)\n","ee58e726":"sns.heatmap(confusion_matrix(y_test, predictions), annot=True)\n","29f64121":"print(classification_report(y_test, predictions))\n","aa8b5e63":"from sklearn.model_selection import train_test_split\nX = df.drop('Drug',axis=1)\ny = df['Drug'] \nX.head()","866a22f0":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 1)\n","f8250edd":"from sklearn.neighbors import KNeighborsClassifier","76ad391a":"knn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X_train,y_train)","f3807a8b":"pred = knn.predict(X_test)\n\n","1d078b46":"from sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_test,pred))","727fdc61":"sns.heatmap(confusion_matrix(y_test, pred), annot=True)\n","91f6a463":"print(classification_report(y_test,pred))\n","7eaa2747":"error_rate = []\n\n# Will take some time\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","c5eea839":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","6577a437":"knn = KNeighborsClassifier(n_neighbors=23)\n\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\n\nprint('WITH K=23')\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","4e865902":"from sklearn.model_selection import train_test_split\nX = df.drop('Drug',axis=1)\ny = df['Drug'] ","fdf62a13":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 1)","d0790518":"from sklearn.svm import SVC\nfrom sklearn.metrics import classification_report, confusion_matrix","6629bd48":"svc_model = SVC()\nsvc_model.fit(X_train, y_train)","43dd5c84":"y_predict = svc_model.predict(X_test)\n","419dbf75":"cm = confusion_matrix(y_test, y_predict)","6833ecc1":"sns.heatmap(cm, annot = True)\n","9ad3503b":"print(classification_report(y_test, y_predict))\n","9bfd62d4":"min_train = X_train.min()\nrange_train = (X_train-min_train).max()\nX_train_scaled = (X_train - min_train)\/range_train\n\nmin_test = X_test.min()\nrange_test = (X_test - min_test).max()\nX_test_scaled = (X_test - min_test)\/range_test","4095336a":"param_grid = {'C' : [0.1, 1, 10, 100], 'gamma' : [1, .1, .01, .001], 'kernel' : ['rbf']}\n","e24a0308":"from sklearn.model_selection import GridSearchCV\n","90f3b994":"grid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 4)\n","4490af05":"grid.fit(X_train_scaled, y_train)\n","ce8fcd26":"grid.best_params_\n","6bca9693":"min_test = X_test.min()\nrange_test = (X_test - min_test).max()\nX_test_scaled = (X_test - min_test)\/range_test","9afc924e":"grid_predictions = grid.predict(X_test_scaled)\n","f94b61dc":"cm = confusion_matrix(y_test, grid_predictions)","c6c3114d":"sns.heatmap(cm, annot=True)\n","87baa9f0":"print(classification_report(y_test, grid_predictions))","d1630717":"# Part 6: Building A Model (KNN)","0834a450":"# Part 2: Model (Decision Tree)","3dadab1e":"# Part 1: Importing and Visualizing Data","adddff12":"# Part 7: Building a Model (SVM)","8966f6b5":"# Part 4: Building a Model (Random Forest)","32211b0b":"# Part 5: Building A Model (Logistic Regression)"}}