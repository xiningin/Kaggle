{"cell_type":{"c78f3ac1":"code","00df24b1":"code","e0c9efc9":"code","86b06480":"code","8c895332":"code","45c26b58":"code","d11a6d95":"code","fb7fed90":"code","a5b48c40":"code","db3d3629":"code","6304a8ba":"code","f425638d":"code","e9ff94ec":"code","184d9a62":"code","e65e3476":"code","b168e187":"code","fdf68350":"code","5d7d042d":"code","6670a472":"code","e9a62fbf":"code","2ac2b702":"code","858dec96":"code","90f9fa91":"code","198c92f5":"code","3e9ef5c5":"code","e0f26177":"code","4d0de6a3":"code","0f5c5697":"code","9d475720":"code","d1fe7bc8":"code","cac885bf":"code","0969c11c":"code","fdf88d57":"code","9a0d3a90":"code","b98d7104":"code","d8c3a3fe":"code","06cdd858":"code","9a3581a1":"code","718028f5":"code","55f807d4":"code","6076db95":"code","87ac0d36":"code","bddcfc22":"code","13220e35":"code","79ad73ea":"code","a95bd208":"code","4ef9a3c7":"code","07044e61":"code","6b4e0ab7":"code","b00a8d69":"code","ec3bf146":"code","9e729b47":"code","3f26de6f":"code","4eac74fb":"code","282ccd9e":"code","1cc0a259":"code","f6ce59c6":"markdown","45a61ff3":"markdown","ffc69fd3":"markdown","72420552":"markdown","f6c8114c":"markdown","b1b68873":"markdown","4cf1e685":"markdown","135829f6":"markdown","09a20193":"markdown","001162ab":"markdown","fd5896c7":"markdown","cce9c742":"markdown","2bb5f05b":"markdown","093d6f32":"markdown","f67c507c":"markdown","e4c94d6c":"markdown","2047d160":"markdown","f8062fe3":"markdown","697d2ffc":"markdown","1798f73f":"markdown","8a76d4e1":"markdown"},"source":{"c78f3ac1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","00df24b1":"# First, we read the csv files.\ndata_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndata_gender = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ndata_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","e0c9efc9":"data_train","86b06480":"data_gender","8c895332":"data_test","45c26b58":"# Here we change the display option of pandas. \npd.options.display.max_rows = None\npd.options.display.max_columns = None\ndisplay(data_train)","d11a6d95":"pd.reset_option(\"display.max_rows\")\npd.reset_option(\"display.max_columns\")\npd.get_option(\"display.max_rows\")","fb7fed90":"pd.set_option(\"display.max_rows\",20)\ndisplay(data_test)","a5b48c40":"data_train, data_gender, data_test","db3d3629":"# We get general info about the our data set. \ndata_train.info()\n# We see that there are considerable missing values in cabin and age. ","6304a8ba":"data_gender.info()","f425638d":"data_test.info()\n# We also see here that we have considerable missing values in age and cabin. ","e9ff94ec":"# We check the features (columns)\ndata_train.columns, data_gender.columns, data_test.columns","184d9a62":"# We check the thle length of features (columns)\nlen(data_train.columns), len(data_gender.columns), len(data_test.columns)","e65e3476":"# We check the head and tail of the data set to see how the data look like. \ndata_train.head()","b168e187":"data_train.tail()","fdf68350":"data_gender.head()","5d7d042d":"data_gender.tail()","6670a472":"data_test.head()","e9a62fbf":"data_test.tail()","2ac2b702":"# We see that the survived column is missing in the data_test and the data_gender completes this data. \n# Thus, we merge these two data. We make sure that they have the same column order as data_train.\ndata_merged = pd.merge(data_gender, data_test, on = \"PassengerId\")\ndata_merged","858dec96":"# We make sure that the columns of data_train and data_merged match.\ndata_train.columns == data_merged.columns","90f9fa91":"# When we look at the PassengerId of two data sets, we see that data_train ends with 891 and data_merged ends starts with 892.\n# These means that we need to merge these two data sets vertically.\ndata = pd.concat([data_train,data_merged], ignore_index=True)\ndata","198c92f5":"data.head()","3e9ef5c5":"data.tail()","e0f26177":"data.info()","4d0de6a3":"# We check the descriptive stats of our data. describe() method takes only the integer and float values. \ndata.describe()","0f5c5697":"# We can transpose the table, if we feel that it is more readable.\n# In this table, we have number of values, mean, std, min-max values, percentile values for each column.\ndata.describe().T","9d475720":"# We can also take get the statistical values for any single column. \ndata.Age.mean()","d1fe7bc8":"data['Age'].mean()  # 2nd way of coding to call a column. ","cac885bf":"data.Age.median()","0969c11c":"data.Age.max()","fdf88d57":"perc = [.10,.20,.40,.60,.80]\ninclude = ['float','integer']\ndesc = data.describe(percentiles = perc, include = include)\ndesc.T","9a0d3a90":"correlation = data.corr()\ncorrelation","b98d7104":"# Getting the max values of correlation coefficient (as absolute values) for each variable.\ncorrelation[correlation<1].abs().max()","d8c3a3fe":"# Getting the max values of correlation coefficient (as absolute values) for each variable (Another method)\na = correlation.abs()<1\ncorrelation.abs()[a].max()\n# We see relatively strong relation between fare and passenger class.","06cdd858":"a = correlation.abs()<1\nb = correlation.abs()>0.5\ncorrelation.abs()[a&b]\n# a method to see absolute values of correlation <1 and >0.5","9a3581a1":"data.isna().sum()","718028f5":"# Getting the nan values in cabin column.\ndata[data.Cabin.isna()]\n# We see that we have 1014 rows as nan values.","55f807d4":"# Getting the data excluding nan values.\ndata[data.Cabin.isna()==False]","6076db95":"data[\"Cabin\"].value_counts()\n# We can see repeating values, we can look into these data further to infer more information.","87ac0d36":"data[\"Name\"].value_counts()\n# We see two repeating names here. ","bddcfc22":"# We can check these names whether they are the same people or not.\ndata[(data.Name == \"Connolly, Miss. Kate\") | (data.Name == \"Kelly, Mr. James\")]\n# We see that they have different information, so they are not the same persons.","13220e35":"data.Ticket.value_counts()\n# We see also here some repeating values.","79ad73ea":"data[data.Ticket == 'CA. 2343']\n# We can say for CA. 2343 that the people who have the same ticket number are from the same family.","a95bd208":"data.Survived.unique(), data.Sex.unique(), data.Pclass.unique(), data.SibSp.unique(), data.Parch.unique(), data.Embarked.unique()","4ef9a3c7":"data[(data.Parch == 0) & (data.SibSp == 0)]\n# We see that 790 people travelled alone.","07044e61":"data[(data.Parch >= 1) | (data.SibSp >= 1)]['Survived'].mean(), data[\"Survived\"].mean(), data[\"Survived\"][(data.Parch == 0) & (data.SibSp == 0)].mean()\n# We see that the mean of survival is higher in people who travel together, we can make an initial assessment that\n# families, particularly the women and children, were given priority to get on rescue boats.","6b4e0ab7":"data.Survived[data.Sex=='female'].mean(), data[\"Survived\"].mean(), data.Survived[data.Age<18].mean()\n# We see that women and passengers younger than 18 have a higher survival average than the total average. ","b00a8d69":"data.Survived.mean(), data.Survived[data.Pclass==1].mean(),data.Survived[data.Pclass==2].mean(),data.Survived[data.Pclass==3].mean()\n# We also see that passengers with higher class have survival rates above average.\n# We can look into these kind of comparisons easier with pivot tables. ","ec3bf146":"data.columns","9e729b47":"data1 = data.copy()\ndata1.rename(columns={'PassengerId':'YolcuId',\n                    'Survived':'Yasam',\n                    'Pclass':'Sinif',\n                     'Name':'Ad',\n                     'Sex':'Cinsiyet',\n                     'Age':'Yas',\n                     'SibSp':'Kardes_Es',\n                     'Parch':'Eb_Cocuk',\n                     'Ticket':'BiletId',\n                     'Fare':'Ucret',\n                     'Cabin':'Kabin',\n                     'Embarked':'Liman'}, inplace = True)\ndata1","3f26de6f":"data1.Yasam.replace(0,'yasamiyor',inplace=True)\ndata1.Yasam.replace(1,'yasiyor',inplace=True)\ndata1","4eac74fb":"# We can also define a list to make replacements. \ndata1.replace(['S','C','Q'],['Southampton','Cherbourg','Queenstown'], inplace=True)\ndata1","282ccd9e":"# data1.Kabin.fillna('Belirsiz', inplace = True)\n# data1","1cc0a259":"# We can replace NaN values with the mean so that it would not change the mean of overall data.\n# For example, we replace the NaN values in cabin with mean of Age.\ndata1.","f6ce59c6":"> # Changing values in cells","45a61ff3":"# Changing column names","ffc69fd3":"## Comparing the mean of survived travellers","72420552":"# NaN values\n- __isna()__","f6c8114c":"# Merging the data with merge and concat methods","b1b68873":"## Name","4cf1e685":"## Changing the percentiles","135829f6":"## Correlation","09a20193":"## Seeing passengers travelling alone","001162ab":"# Reading files","fd5896c7":"# Descriptive Statistics of the data","cce9c742":"# Seeing different categories in categorical variables\n- __unique()__","2bb5f05b":"## Ticket","093d6f32":"# General outlook of the data","f67c507c":"# Repeating Values\n- __value_counts()__\n- Repeating values can be important to further look into our data and infer more information.\n- Also, it can be used to confirm if we have repeating data that was entered by mistake. ","e4c94d6c":"## set_option","2047d160":"## Cabin","f8062fe3":"# Replacing NaN values\n- __fillna()__","697d2ffc":"## To reset display option","1798f73f":"## We can see all three data sets as well.","8a76d4e1":"## To see all data"}}