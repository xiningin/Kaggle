{"cell_type":{"74fb34fd":"code","a5fb1dc9":"code","a6a17b8e":"code","92648c72":"code","c30d2501":"code","147a1d19":"code","6cc8da37":"code","61f29d0c":"code","d7b03c92":"code","6dded86c":"code","0b0a77db":"code","4ad092d3":"code","cb349afa":"code","effd3c7c":"code","98b277e0":"code","924570ce":"code","2c833e26":"markdown","322704e3":"markdown","3fa1c3ff":"markdown","7edab42a":"markdown","86d1852a":"markdown","16464d01":"markdown","c4c33c07":"markdown"},"source":{"74fb34fd":"import numpy as np\nimport pandas as pd","a5fb1dc9":"n_sample = 16\nn_registered = 6","a6a17b8e":"\nn_draws = 10000\n# samples randomly for the prior\nprior = pd.Series(np.random.uniform(0.0, 1.0, n_draws))\n# draw the distributions of the prior\nprior.hist()","92648c72":"# This is either 0, 1 (binary) rate so it should follow Bernoulli distribution\n# In this case parameter is the one of the randomly generated success rate based on prior in the previous step\ndef generative_model(parameters):\n    return np.random.binomial(n_sample, parameters)","c30d2501":"# Test\nprint(generative_model(0.1))\nprint(generative_model(0.9))","147a1d19":"sim_data = list()\nfor p in prior:\n    sim_data.append(generative_model(p))","6cc8da37":"posterior = prior[[x == n_registered for x in sim_data]]","61f29d0c":"posterior","d7b03c92":"# show the distribution of the posterior\nposterior.hist()","6dded86c":"print(f\"Number of draws left: {len(posterior)}\")","0b0a77db":"print(f\"Posterior median: {'%.3f'%posterior.median()}\")","4ad092d3":"print(f\"Posterior interval: {'%.3f'%posterior.quantile(0.25)}, {'%.3f'%posterior.quantile(0.75)}\")","cb349afa":"# how is the result comparing to 20%, meaning the percentages of posteriors that we can have the registration rate as 20%\nsum(posterior >0.2)\/len(posterior)","effd3c7c":"registrations = pd.Series([np.random.binomial(n=100, p=p) for p in posterior])","98b277e0":"registrations.hist()","924570ce":"print('Registration 95%% quantile interval %d-%d'%tuple(registrations.quantile([0.025, 0.975]).values))","2c833e26":"# Simulate data based on the prior and the generative model\nWe simulate the data using the prior and the generative model. Specifically, for every prior value (for $\\rho$) we generate the number of registrations that might generate based on the selected prior and the generative model.","322704e3":"# Problem definition\nAssume that we are experimenting a marketing strategy. And would like to predict whether customers will register for our product after we show the product to her. So we went out and did a sample of a few customers (say, 16 of them) and got back the registration rate (say 6 of them registered). Then with such registration rate, how can we infer the registration probability?","3fa1c3ff":"# Posterior\nFilter out all the draws that do not match the data. I.e., we only keep the samples that out of 16 customers, 6 got registered (or the generative model generates 6). Then observe the distribution of $\\rho$ given this fact (data). The posterior will give the $\\rho$ that gives the outcomes exactly as our outcome (facts). So we can get back and check for our prior (filter it out) and get the posterior.","7edab42a":"# Bayesian data analysis explained","86d1852a":"# Prior\nWithout any knowledge we assume that our estimating parameter (e.g., $\\rho$ for a Bernoulli distribution, for success rate) is distributed from 0.0 to 1.0 uniformly. Therefore, we randomly draw 10,000 values for $\\mu$ from the uniform distribution.","16464d01":"# Generative model\nThe generative model is used to generate outcomes based on a selected prior. We are analysing either if a customer register for our product after an advertisement or not. Therefore, our generative mode folows Bernoulli distribution.","c4c33c07":" # Model future event\n Can we give th expected registrations for 100 samples"}}