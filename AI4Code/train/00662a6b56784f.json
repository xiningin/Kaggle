{"cell_type":{"02708760":"code","b3ff8033":"code","abbb05ed":"code","689a84c4":"code","6be8b01d":"code","148065d2":"code","48f59f8b":"code","d812e9e4":"code","30711c47":"code","00467fee":"code","ffb6ff2d":"code","c6e28f08":"code","a5f0b9ac":"code","99178fb8":"code","007714fc":"code","96b67fa1":"code","fc62cd77":"code","1f763895":"code","b05aff69":"code","5a0f09f9":"code","7c439d5f":"code","9109da43":"code","a7f21700":"code","5667886f":"code","ef75ca89":"code","da30cc68":"code","fde57528":"code","1e9ed2aa":"code","18ef36cb":"code","da727a6c":"code","d9a29dd6":"code","aec94a61":"code","2e63b0f9":"code","c081e194":"code","b9c07010":"code","fb9f0b86":"code","8f5af241":"code","6764c5c0":"code","345b939c":"code","416cbb49":"code","bdd201be":"code","e54813f7":"code","55e37a3c":"code","b37d7df3":"markdown","94452837":"markdown"},"source":{"02708760":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b3ff8033":"import pandas as pd\nimport numpy as np","abbb05ed":"Covid_Testing = pd.read_csv('\/kaggle\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\nCovid_Testing.head()","689a84c4":"Covid_Testing['State'].unique()","6be8b01d":"print(Covid_Testing['Date'].min())\nprint(Covid_Testing['Date'].max())","148065d2":"Covid_Summary = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\nCovid_Summary.head()","48f59f8b":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","d812e9e4":"Covid_Summary.isnull().sum()","30711c47":"Covid_Summary.info()","00467fee":"Covid_Summary = Covid_Summary.drop(['Sno','ConfirmedIndianNational', 'ConfirmedForeignNational'], axis=1)\nCovid_Summary.head()","ffb6ff2d":"Covid_Summary['Active'] = Covid_Summary['Confirmed'] - Covid_Summary['Cured'] - Covid_Summary['Deaths']\nCovid_Summary.tail()","c6e28f08":"Covid_Summary['Date'] = pd.to_datetime(Covid_Summary['Date'])","a5f0b9ac":"Covid_Summary.head()","99178fb8":"Covid_Summary.info()","007714fc":"india_cases = Covid_Summary[Covid_Summary['Date'] == Covid_Summary['Date'].max()].copy().fillna(0)\nindia_cases.index = india_cases[\"State\/UnionTerritory\"]\nindia_cases = india_cases.drop(['State\/UnionTerritory', 'Time','Date'], axis=1)","96b67fa1":"india_cases.head()","fc62cd77":"df = pd.DataFrame(pd.to_numeric(india_cases.sum())).transpose()\ndf.style.background_gradient(cmap='BuGn',axis=1)","1f763895":"Trend = Covid_Summary.groupby(['Date'])['Confirmed', 'Deaths','Cured',].sum().reset_index()","b05aff69":"Trend.head()","5a0f09f9":"fig = go.Figure(go.Bar(x= Trend.Date, y= Trend.Cured, name='Recovered'))\nfig.add_trace(go.Bar(x=Trend.Date, y= Trend.Deaths, name='Deaths'))\nfig.add_trace(go.Bar(x=Trend.Date, y= Trend.Confirmed, name='Confirmed'))\n\nfig.update_layout(barmode='stack',legend_orientation=\"h\",legend=dict(x= 0.3, y=1.1),\n                 paper_bgcolor='white',\n                 plot_bgcolor = \"white\",)\nfig.show()","7c439d5f":"import plotly.express as px","9109da43":"def horizontal_bar_chart(df, x, y, title, x_label, y_label, color):\n    fig = px.bar(df, x=x, y=y, orientation='h', title=title, \n                 labels={x.name: x_label,\n                         y.name: y_label}, color_discrete_sequence=[color])\n    fig.update_layout(yaxis={'categoryorder': 'total ascending'})\n    fig.show()","a7f21700":"top_10_death_states = india_cases.sort_values('Deaths',ascending = False)[:10]\nhorizontal_bar_chart(top_10_death_states,top_10_death_states.Deaths, top_10_death_states.index,\n                     'Top 10 States with most deaths','Number of deaths(In Thousands)','State Name','Orange')","5667886f":"top_10_confirmed_states = india_cases.sort_values('Confirmed', ascending=False)[:10]\nhorizontal_bar_chart(top_10_confirmed_states,top_10_confirmed_states.Confirmed, top_10_confirmed_states.index,\n            'Top 10 Indian States (Confirmed Cases)', 'Number of Confirmed cases (in Thousands)','States Name','blue')","ef75ca89":"top_10_recovered_states = india_cases.sort_values('Cured', ascending=False)[:10]\nhorizontal_bar_chart(top_10_recovered_states, top_10_recovered_states.Cured, top_10_recovered_states.index,\n                    'Top 10 States (Cured Cases)', 'Number of Cured cases (in Thousands)', 'States Name', 'Purple')","da30cc68":"vaccination = pd.read_csv(r\"..\/input\/covid19-in-india\/covid_vaccine_statewise.csv\")","fde57528":"vaccination.tail()","1e9ed2aa":"vaccination['Total Vaccinatons'] = vaccination['First Dose Administered']+vaccination['Second Dose Administered']\n\n#Renaming columns\nvaccination.rename(columns = {'Updated On':'Date'}, inplace = True)","18ef36cb":"Maharashtra = vaccination[vaccination[\"State\"]==\"Maharashtra\"]\nfig = px.line(Maharashtra,x=\"Date\",y=\"Total Vaccinatons\",title=\"Vaccination till date in Maharashtra\")  \nfig.update_xaxes(rangeslider_visible=True) ","da727a6c":"fig = px.line(Maharashtra,x=\"Date\",y=\"Total CoviShield Administered\",title=\"CoviShield Administered in Mahrashtra\")  \nfig.update_xaxes(rangeslider_visible=True) ","d9a29dd6":"fig = px.line(Maharashtra,x=\"Date\",y=\"Total Covaxin Administered\",title=\"Covaxin Administered in Maharashtra\")  \nfig.update_xaxes(rangeslider_visible=True) ","aec94a61":"from fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nfrom plotly.offline import iplot, init_notebook_mode","2e63b0f9":"model = Prophet()","c081e194":"Confirmed = Trend.loc[:, ['Date', 'Confirmed']] \nConfirmed.tail()","b9c07010":"Cured = Trend.loc[:, ['Date', 'Cured']] \nCured.tail()","fb9f0b86":"# Dataframe must have columns \"Date\" and \"Values\" with the dates and values  for prophet prediction\nConfirmed.columns = ['ds', 'y']\nmodel.fit(Confirmed)","8f5af241":"future = model.make_future_dataframe(periods=60) # helper function to extend the dataframe for specified days\nfuture.tail()","6764c5c0":"# yhat represents the prediction, while yhat_lower and yhat_upper represent the lower and upper bound\nforecast_india_conf = model.predict(future)\nforecast_india_conf","345b939c":"fig = plot_plotly(model, forecast_india_conf) \n\nfig.update_layout(template='plotly_white')\n\niplot(fig) ","416cbb49":"model1 = Prophet()","bdd201be":"# Dataframe must have columns \"Date\" and \"Values\" with the dates and values  for prophet prediction\nCured.columns = ['ds', 'y']\nmodel1.fit(Cured)\n\nfuture_1 = model1.make_future_dataframe(periods=60) # helper function to extend the dataframe for specified days\nfuture_1.tail()","e54813f7":"# yhat represents the prediction, while yhat_lower and yhat_upper represent the lower and upper bound\nforecast_india_cured = model1.predict(future_1)\nforecast_india_cured","55e37a3c":"fig = plot_plotly(model1, forecast_india_cured) \n\nfig.update_layout(template='plotly_white')\n\niplot(fig) ","b37d7df3":"For the prediction purpose we have use Prophet library produced by Facebook which is used for Time series Forecasting. Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data.","94452837":"### Covid-19 Advanced Analysis in India and Predictions using Fb-Prophet"}}