{"cell_type":{"522c7a69":"code","f4edae5a":"code","c7140532":"code","74969e9a":"code","f4fdcd61":"code","86db7dae":"code","2fb01775":"code","e862c218":"code","c91dada9":"code","f4dbc7c7":"code","9c22df4b":"code","270ecc8d":"code","51767286":"markdown","92de2679":"markdown","51473927":"markdown","cf69e309":"markdown","4b1a865c":"markdown","d0844b9b":"markdown"},"source":{"522c7a69":"# these are usuful libs for modeling\nfrom keras import models, layers\nimport numpy as np\nfrom keras.utils import to_categorical\nimport pandas as pd\nfrom keras.layers import Convolution2D, MaxPooling2D, Flatten, Dropout, BatchNormalization, Dense, Lambda\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f4edae5a":"# reading csvs files\ntrain = pd.read_csv(\"..\/input\/Kannada-MNIST\/train.csv\")\ntest = pd.read_csv(\"..\/input\/Kannada-MNIST\/test.csv\")\nsubmisssion = pd.read_csv(\"..\/input\/Kannada-MNIST\/sample_submission.csv\")\nsubmisssion.shape","c7140532":"submisssion.head()","74969e9a":"# scalling the value in 0-1 , so \/255. \nX = train.iloc[:,1:]\/255.\ny = train.iloc[:,0]\ntest = test\/255.\ntest = test.drop(test.columns[0],axis=1)","f4fdcd61":"# reshaping 784 to 28,28,1\nX = X.values.reshape(train.shape[0],28,28,1)\ntest = test.values.reshape(test.shape[0],28,28,1)","86db7dae":"# one hot of target values using keras's to_categorical class\ny = to_categorical(y)\n\n# splits train\/test set \nXtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size =0.3,random_state=29)","2fb01775":"Xtrain.shape, ytrain.shape, Xtest.shape, ytest.shape","e862c218":"# in model i am using BatchNormalization so for first step, i menualy normalize the batch\nmean_px = Xtrain.mean().astype(np.float32)\nstd_px = Xtrain.std().astype(np.float32)\n\ndef standardize(x): \n    return (x-mean_px)\/std_px","c91dada9":"# this is a model with dropouts layers\ndef cnn():\n    model = models.Sequential()\n    model.add(Lambda(standardize,input_shape=(28,28,1)))\n    model.add(Convolution2D(32,(3,3), activation = 'relu'))\n    model.add(BatchNormalization(axis=1))   \n    model.add(Convolution2D(64,(3,3), activation = 'relu'))\n    model.add(MaxPooling2D())\n    model.add(Convolution2D(128,(3,3), activation = 'relu'))\n    model.add(BatchNormalization(axis=1))\n    model.add(Convolution2D(128,(2,2), activation = 'relu'))\n    model.add(MaxPooling2D())\n    model.add(Flatten())\n    model.add(Dense(256, activation='relu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(256, activation='relu'))\n    model.add(Dropout(0.3))\n    model.add(Dense(10, activation='softmax'))          \n    model.compile(optimizer='adam', loss='categorical_crossentropy',\n                  metrics=['accuracy'])\n    return model          ","f4dbc7c7":"classifier = cnn()\n# traing the model with 20 epochs and 1000 batch size\nclassifier.fit(Xtrain, ytrain, epochs=20,batch_size=1000,validation_data=(Xtest,ytest))","9c22df4b":"#prediction of submission_test set\nprediction = classifier.predict(test) \npredictions = np.argmax(prediction, axis=1)","270ecc8d":"# submission\nsubmissions=pd.DataFrame({\"id\": list(range(1,len(predictions)+1)),\n                         \"label\": predictions})\nsubmissions.to_csv(\"simple_cnn.csv\", index=False, header=True)\nsubmissions.shape","51767286":"# Thank you , please upvote","92de2679":"# 3) modeling","51473927":"# 2) Prepare Data for Training","cf69e309":"# 1) Data Collection","4b1a865c":"# Kannada Digit Recognizer","d0844b9b":"# 4) Prediction and Submission\n"}}