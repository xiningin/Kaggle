{"cell_type":{"7625c411":"code","d9102b2e":"code","bc4dfee7":"code","c1ddcab6":"code","69431761":"code","59af279f":"code","908fd154":"code","0428ccd7":"code","3ce00e60":"code","5bf49d02":"code","6cc0c908":"code","e67836cd":"code","c4775c9e":"code","a504cd9d":"code","2db69f37":"code","a83a94da":"code","97631b32":"code","0260e8e5":"code","73f921a2":"code","de62c901":"code","926048ab":"code","876f33b4":"code","7867b56c":"code","de5020dc":"code","d7d8d892":"code","1ce3a895":"code","4be5c0e7":"code","fe8cf3e3":"markdown","c8f32958":"markdown","6549f78d":"markdown","7d35f238":"markdown","dd84a6ec":"markdown","aea87cd2":"markdown","909c72fe":"markdown","7e17f7c1":"markdown","0841a4d7":"markdown","2c637a4f":"markdown"},"source":{"7625c411":"import os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nfrom tqdm.notebook import tqdm\nimport torchvision.transforms as T\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\nfrom torchvision.datasets import ImageFolder\nimport PIL\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nnp.random.seed(42)","d9102b2e":"imagenet_stats = ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n\ntrain_tfms = T.Compose([\n    #T.RandomCrop(256, padding=8, padding_mode='reflect'),\n     #T.RandomResizedCrop(256, scale=(0.5,0.9), ratio=(1, 1)), \n    T.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0.1),\n    T.Resize((256, 256)),\n    T.RandomHorizontalFlip(), \n    T.RandomRotation(10),\n    T.ToTensor(), \n     T.Normalize(*imagenet_stats,inplace=True), \n    T.RandomErasing(inplace=True)\n])\n\nvalid_tfms = T.Compose([\n     T.Resize((256, 256)), \n    T.ToTensor(), \n     T.Normalize(*imagenet_stats)\n])","bc4dfee7":"dataset = ImageFolder(root='\/kaggle\/input\/indian-currency-notes-classifier\/Train\/')\n\ndataset_size = len(dataset)\ndataset_size","c1ddcab6":"testdataset = ImageFolder(root='\/kaggle\/input\/indian-currency-notes-classifier\/Test\/', transform = valid_tfms)\n\ntestdataset_size = len(testdataset)\ntestdataset_size","69431761":"\n\nclasses = dataset.classes\nclasses\n\n","59af279f":"num_classes = len(dataset.classes)\nnum_classes","908fd154":"val_size = 16\ntrain_size = len(dataset) - val_size\n\ntrain_df, val_df = random_split(dataset, [train_size, val_size])\nlen(train_df), len(val_df)","0428ccd7":"\nval_df.dataset.transform = valid_tfms\n\ntrain_df.dataset.transform = train_tfms","3ce00e60":"\n\nbatch_size = 16\n\ntrain_dl = DataLoader(train_df, batch_size, shuffle=True, \n                      num_workers=3, pin_memory=True)\nval_dl = DataLoader(val_df, batch_size*2, \n                    num_workers=2, pin_memory=True)\ntest_dl = DataLoader(testdataset, batch_size*2, \n                    num_workers=2, pin_memory=True)\n\n","5bf49d02":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))","6cc0c908":"class ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.5f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_acc']))","e67836cd":"class CnnModel2(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.wide_resnet101_2(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 7)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n\n\n# In[40]:\n\n\nmodel = CnnModel2()","c4775c9e":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","a504cd9d":"device = get_default_device()\ndevice","2db69f37":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\ntest_dl = DeviceDataLoader(test_dl, device)\nto_device(model, device);","a83a94da":"\n\nmodel = to_device(CnnModel2(), device)\n\nfor images, labels in train_dl:\n    print('images.shape:', images.shape)\n    out = model(images)\n    print('out.shape:', out.shape)\n    print('out[0]:', out[0])\n    break\n\n","97631b32":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n    \ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","0260e8e5":"history = [evaluate(model, val_dl)]\nhistory","73f921a2":"epochs = int(np.random.choice([3, 5, 7, 9, 11, 13, 15]))\nmax_lr = np.random.choice([1e-3, 5e-3, 1e-4, 5e-4, 1e-5, 5e-5, 1e-6])\ngrad_clip = np.random.choice([0.5, 0.4, 0.3, 0.2, 0.1, 0.05])\nweight_decay = np.random.choice([1e-2, 5e-2, 1e-3, 5e-3, 1e-4, 5e-4, 1e-5])\nopt_func = torch.optim.Adam\nprint('epoch = ', epochs, 'lr = ', max_lr, 'grad is ', grad_clip, 'weights = ', weight_decay)","de62c901":"torch.cuda.empty_cache()\n\n\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                             grad_clip=grad_clip, \n                             weight_decay=weight_decay, \n                             opt_func=opt_func)\n\n","926048ab":"all = []\npop = evaluate(model, val_dl)['val_acc']\nall.append(pop)\ntorch.cuda.empty_cache()\nall","876f33b4":"\nmodel = to_device(CnnModel2(), device)","7867b56c":"epochs = 11\nmax_lr = 5e-4\ngrad_clip = 0.3\nweight_decay = 5e-4\nopt_func = torch.optim.Adam\nprint('epoch = ', epochs, 'lr = ', max_lr, 'grad is ', grad_clip, 'weights = ', weight_decay)","de5020dc":"\n\n%%time\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                             grad_clip=grad_clip, \n                             weight_decay=weight_decay, \n                             opt_func=opt_func)\n\n","d7d8d892":"pop = evaluate(model, val_dl)['val_acc']\nall.append(pop)\nall","1ce3a895":"evaluate(model, val_dl)['val_acc']","4be5c0e7":"evaluate(model, test_dl)['val_acc']","fe8cf3e3":"### Perform Train Validation Split","c8f32958":"# Indian Currency Classification\n\n## By: Sergei Issaev","6549f78d":"### Define the Models","7d35f238":"Thank you for reading, and please upvote if you enjoyed! \n![](http:\/\/i.redd.it\/dfzo0lwp49951.jpg)","dd84a6ec":"### Introduction\nIn this notebook I will be using image data of different types of Indian currency to build a classifier. I will be using data provided by Gaurav Sahani at https:\/\/www.kaggle.com\/gauravsahani\/indian-currency-notes-classifier.\nThis dataset is very small by computer vision standards, with a training size of 153 images and a test size of 42. As a result, the validation error varies greatly from run to run. I have obtained 100% validation accuracy several times, but this error rate is inconsistent due to the small data size. Perhaps using external data could be a next step.","aea87cd2":"### Load in the Data","909c72fe":"### Train the Models","7e17f7c1":"### Import Libraries","0841a4d7":"### Final Results","2c637a4f":"Two fits were made - one with randomly selected hyperparameters (1) and one with hyperparameters that have shown the ability to attain 100% accuracy for validation (2). However, due to the small dataset size these numbers are still highly variable. "}}