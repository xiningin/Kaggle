{"cell_type":{"c228d7af":"code","49af7e13":"code","43c9fbb2":"code","0fb693e4":"code","11f0be57":"code","2a4fe23e":"code","e699ef70":"code","de566cf2":"code","6dd67eb9":"code","cb8020c4":"code","9c049f0a":"code","1e4a29c3":"code","dd7ffa8d":"code","2db5f0cb":"code","21dd3c78":"code","e81e93c3":"code","c6eb5583":"code","faf373cc":"code","7d362a13":"code","067691fb":"code","21fc8171":"code","dcc7ea7a":"code","070dee38":"code","f9874508":"code","5a8f990b":"code","275c9fd2":"code","f9eb2379":"code","fed03dd0":"code","d49e7da3":"code","65b45913":"code","9aae6cc5":"code","7194d0ad":"code","142556f5":"code","af01c462":"code","27d50de1":"code","b3214759":"code","6bd5820a":"code","f8fa392c":"code","cc32dc6a":"code","ea52aa8f":"code","fa2a29a4":"code","9771793e":"code","d1dc4564":"code","50be598e":"code","0b900cfc":"code","838c26ea":"code","d7368055":"code","bfe266bb":"code","415ffc23":"markdown","8b782f4f":"markdown","f96d4fa5":"markdown","f32ce9c6":"markdown","198c0a21":"markdown","e829521d":"markdown","dbeacbf3":"markdown"},"source":{"c228d7af":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","49af7e13":"!pip install dataprep","43c9fbb2":"dataset = pd.read_csv('..\/input\/life-expectancy-who\/Life Expectancy Data.csv')\ndataset.head()","0fb693e4":"dataset.info()","11f0be57":"dataset.describe()","2a4fe23e":"sns.countplot(x='Status',data=dataset)","e699ef70":"from dataprep.eda import create_report\nreport = create_report(dataset, title='My Report')\nreport","de566cf2":"dataset = dataset.drop(['Year','Country'],axis=1)\n\ndataset.head()\nsns.heatmap(pd.isnull(dataset))\ndataset.isnull().sum()","6dd67eb9":"dataset['Life expectancy ']=dataset['Life expectancy '].fillna(value=dataset['Life expectancy '].mean())\ndataset['Adult Mortality']=dataset['Adult Mortality'].fillna(value=dataset['Adult Mortality'].mean())\ncorr_data=dataset.corr()\ncorr_data\n","cb8020c4":"plt.figure(figsize=(15, 12))\nsns.heatmap(dataset.corr(),center=0,annot=True)","9c049f0a":"sns.scatterplot(x=dataset['Schooling'],y=dataset['Alcohol'])\ndef impute_Alcohol(cols):\n    al=cols[0]\n    sc=cols[1]\n    if pd.isnull(al):\n        if sc<=2.5:\n            return 4.0\n        elif 2.5<sc<=5.0:\n            return 1.5\n        elif 5.0<sc<=7.5:\n            return 2.5\n        elif 7.5<sc<=10.0:\n            return 3.0\n        elif 10.0<sc<=15:\n            return 4.0\n        elif sc>15:\n            return 10.0\n    else:\n        return al\n    \ndataset['Alcohol']=dataset[['Alcohol','Schooling']].apply(impute_Alcohol,axis=1)","1e4a29c3":"sns.heatmap(pd.isnull(dataset))","dd7ffa8d":"dataset['Alcohol']=dataset['Alcohol'].fillna(value=dataset['Alcohol'].mean())","2db5f0cb":"sns.scatterplot(x=dataset['Life expectancy '],y=dataset['Polio']);","21dd3c78":"def impute_polio(c):\n    p=c[0]\n    l=c[1]\n    if pd.isnull(p):\n        if l<=45:\n            return 80.0\n        elif 45<l<=50:\n            return 67.0\n        elif 50<l<=60:\n            return 87.44\n        elif 60<l<=70:\n            return 91\n        elif 70<l<=80:\n            return 94.3\n        elif l>80:\n            return 95\n    else:\n        return p\n    \ndataset['Polio']=dataset[['Polio','Life expectancy ']].apply(impute_polio,axis=1)","e81e93c3":"sns.scatterplot(x=dataset['Polio'],y=dataset['Diphtheria '])","c6eb5583":"def impute_Diptheria(c):\n    d=c[0]\n    p=c[1]\n    if pd.isnull(d):\n        if p<=10:\n            return 75.0\n        elif 10<p<=40:\n            return 37.0\n        elif 40<p<=45:\n            return 40.0\n        elif 45<p<=50:\n            return 50.0\n        elif 50<p<=60:\n            return 55.0\n        elif 60<p<=80:\n            return 65.0\n        elif p>80:\n            return 90.0\n    else:\n        return d\ndataset['Diphtheria ']=dataset[['Diphtheria ','Polio']].apply(impute_Diptheria,axis=1)","faf373cc":"sns.scatterplot(x=dataset['Diphtheria '],y=dataset['Hepatitis B']);","7d362a13":"def impute_HepatatisB(cols):\n    hep=cols[0]\n    dip=cols[1]\n    if pd.isnull(hep):\n        if dip<=15:\n            return 75.0\n        elif 15<dip<=30:\n            return 20.0\n        elif 30<dip<=45:\n            return 38.0\n        elif 45<dip<=60:\n            return 43.0\n        elif 60<dip<=80:\n            return 63.0\n        elif dip>80:\n            return 88.4\n    else:\n        return hep\n    \ndataset['Hepatitis B']=dataset[['Hepatitis B','Diphtheria ']].apply(impute_HepatatisB,axis=1)","067691fb":"dataset[dataset['Diphtheria ']>80.0]['Hepatitis B'].mean()","21fc8171":"sns.scatterplot(x=dataset['Life expectancy '],y=dataset[' BMI ']);","dcc7ea7a":"def impute_BMI(c):\n    b=c[0]\n    l=c[1]\n    if pd.isnull(b):\n        if l<=50:\n            return 25.0\n        elif 50<l<=60:\n            return 25.0\n        elif 60<l<=70:\n            return 32.0\n        elif 70<l<=80:\n            return 46.8\n        elif 80<l<=100:\n            return 60.0\n    else:\n        return b\n    \ndataset[' BMI ']=dataset[[' BMI ','Life expectancy ']].apply(impute_BMI,axis=1)","070dee38":"sns.scatterplot(y=dataset['Total expenditure'],x=dataset['Alcohol']);","f9874508":"def impute_Total_exp(c):\n    t=c[0]\n    a=c[1]\n    if pd.isnull(t):\n        if a<=2.5:\n            return 5.08\n        elif 2.5<a<=5.0:\n            return 6.0\n        elif 5.0<a<=10.0:\n            return 6.71\n        elif 10.0<a<=12.5:\n            return 6.9\n        elif a>12.5:\n            return 6.68\n    else:\n        return t\n    \ndataset['Total expenditure']=dataset[['Total expenditure','Alcohol']].apply(impute_Total_exp,axis=1)","5a8f990b":"sns.scatterplot(x=dataset['percentage expenditure'],y=dataset['GDP']);","275c9fd2":"def impute_GDP(c):\n    g=c[0]\n    p=c[1]\n    if pd.isnull(g):\n        if p<=1250:\n            return 1100.0\n        elif 1250<p<=2500:\n            return 1800.0\n        elif 2500<p<=3750:\n            return 2900.0\n        elif 3750<p<=7500:\n            return 3500.0\n        elif 7500<p<=8750:\n            return 4500.0\n        elif 8750<p<=10000:\n            return 5000.0\n        elif 10000<p<=11250:\n            return 5700.0\n        elif 11250<p<=12500:\n            return 7000.0\n        elif 12500<p<=15000:\n            return 8000.0\n        elif 15000<p<=17500:\n            return 9000.0\n        elif p>17500:\n            return 8500.0\n    else:\n        return g\n\ndataset['GDP']=dataset[['GDP','percentage expenditure']].apply(impute_GDP,axis=1)","f9eb2379":"\nsns.scatterplot(x=dataset['infant deaths'],y=dataset['Population']);","fed03dd0":"def impute_population(c):\n    p=c[0]\n    i=c[1]\n    if pd.isnull(p):\n        if i<=100:\n            return 0.19*((10)**9)\n        elif 100<i<=250:\n            return 0.18*((10)**9)\n        elif 250<i<=350:\n            return 0.02*((10)**9)\n        elif 350<i<=900:\n            return 0.1*((10)**9)\n        elif 900<i<=1100:\n            return 0.18*((10)**9)\n        elif 1100<i<=1250:\n            return 0.05*((10)**9)\n        elif 1250<i<=1500:\n            return 0.19*((10)**9)\n        elif 1500<i<=1750:\n            return 0.05*((10)**9)\n        elif i>1750:\n            return 0.1*((10)**9)\n    else:\n        return p\n    \ndataset['Population']=dataset[['Population','infant deaths']].apply(impute_population,axis=1)","d49e7da3":"sns.scatterplot(x=dataset[' BMI '],y=dataset[' thinness  1-19 years']);","65b45913":"def impute_Thin_1(c):\n    t=c[0]\n    b=c[1]\n    if pd.isnull(t):\n        if b<=10:\n            return 5.0\n        elif 10<b<=20:\n            return 10.0\n        elif 20<b<=30:\n            return 8.0\n        elif 30<b<=40:\n            return 6.0\n        elif 40<b<=50:\n            return 3.0\n        elif 50<b<=70:\n            return 4.0\n        elif b>70:\n            return 1.0\n    else:\n        return t\n    \ndataset[' thinness  1-19 years']=dataset[[' thinness  1-19 years',' BMI ']].apply(impute_Thin_1,axis=1)","9aae6cc5":"sns.scatterplot(x=dataset[' BMI '],y=dataset[' thinness 5-9 years'])","7194d0ad":"def impute_Thin_1(c):\n    t=c[0]\n    b=c[1]\n    if pd.isnull(t):\n        if b<=10:\n            return 5.0\n        elif 10<b<=20:\n            return 10.0\n        elif 20<b<=30:\n            return 8.0\n        elif 30<b<=40:\n            return 6.0\n        elif 40<b<=50:\n            return 3.0\n        elif 50<b<=70:\n            return 4.0\n        elif b>70:\n            return 1.0\n    else:\n        return t\n    \ndataset[' thinness 5-9 years']=dataset[[' thinness 5-9 years',' BMI ']].apply(impute_Thin_1,axis=1)","142556f5":"sns.scatterplot(x=dataset['Life expectancy '],y=dataset['Income composition of resources'])","af01c462":"def impute_Income(c):\n    i=c[0]\n    l=c[1]\n    if pd.isnull(i):\n        if l<=40:\n            return 0.4\n        elif 40<l<=50:\n            return 0.42\n        elif 50<l<=60:\n            return 0.402\n        elif 60<l<=70:\n            return 0.54\n        elif 70<l<=80:\n            return 0.71\n        elif l>80:\n            return 0.88\n    else:\n        return i\n        \ndataset['Income composition of resources']=dataset[['Income composition of resources','Life expectancy ']].apply(impute_Income,axis=1)","27d50de1":"sns.scatterplot(x=dataset['Life expectancy '],y=dataset['Schooling']);","b3214759":"def impute_schooling(c):\n    s=c[0]\n    l=c[1]\n    if pd.isnull(s):\n        if l<= 40:\n            return 8.0\n        elif 40<l<=44:\n            return 7.5\n        elif 44<l<50:\n            return 8.1\n        elif 50<l<=60:\n            return 8.2\n        elif 60<l<=70:\n            return 10.5\n        elif 70<l<=80:\n            return 13.4\n        elif l>80:\n            return 16.5\n    else:\n        return s\n    \ndataset['Schooling']=dataset[['Schooling','Life expectancy ']].apply(impute_schooling,axis=1)","6bd5820a":"dataset[(dataset['Life expectancy ']>80) & (dataset['Life expectancy ']<=90)]['Schooling'].mean()","f8fa392c":"a=list(dataset.columns)\nb=[]\nfor i in a:\n    c=dataset[i].isnull().sum()\n    b.append(c)\nnull_df=pd.DataFrame({'Feature name':a,'no. of Nan':b})\nnull_df","cc32dc6a":"#Creating 2 dummy variables to deal with numerical value\ny=dataset['Life expectancy ']\nX=dataset.drop('Life expectancy ',axis=1)\nX['Status'].unique()","ea52aa8f":"status_dummy=pd.get_dummies(X['Status'])\nX.drop(['Status'],inplace=True,axis=1)","fa2a29a4":"X=pd.concat([X,status_dummy],axis=1)\nX.shape","9771793e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=101)","d1dc4564":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 100, random_state = 0)\nregressor.fit(X_train, y_train)","50be598e":"# Predicting a new result\ny_pred = regressor.predict(X_test)\nnp.set_printoptions(precision=2)\ny_pred = np.array(y_pred)\ny_test = np.array(y_test)\n\nprint(np.concatenate((y_pred.reshape(len(y_test),1), y_test.reshape(len(y_test),1)),1))","0b900cfc":"accuracy_score =  regressor.score(X_test,y_test)\nprint(accuracy_score)","838c26ea":"print('Random Forest Classifier Accuracy:',(accuracy_score)*100,'%')","d7368055":"from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nprint(mean_squared_error(y_test,y_pred)**(0.5))","bfe266bb":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(regressor,X_train,y_train,cv=10)\naccuracies.mean()","415ffc23":"# 2.Reading the data\n**The data is saved as a csv file as LifeExpectancy.csv and it is read and stored in the dataset variable.The Year column is dropped as it will not be used in the analysis. Below the first 5 rows are shown. The data contains 21 columns and 2938 rows with the header row. The table contains data about:**\n\n1. Country\n1. Status\n1. Life Expectancy\n1. Adult Mortality\n1. Alcohol\n1. percentage expenditure\n1. Hepatitis B\n1. Measles\n1. BMI\n1. under-five deaths\n1. Polio\n1. Total expenditure\n1. Diphtheria\n1. HIV\/AIDS\n1. GDP\n1. Population\n1. thinness 1-19 years\n1. thinness 5-9 years\n1. Income composition of resources\n1. Schooling\n\n**With the exclution of Country name and Status(either developed or developing) all of the data is numeric. The values are either in years, precentages, millions or dollars in the case of Gross Domestic Product (GDP)**","8b782f4f":"# Predicting the life expectancy of different countries\n\n![](http:\/\/abcscprod.azureedge.net\/abc-of-money\/-\/media\/Project\/ABCL\/Internal_Images_526x230\/526x230\/LI\/li_ph3_181_How_Has_Life_Expectancy_of_an_Average_Person_Changed_Over_Years_526_230.webp?revision=9aaa8d4f-a7dc-4ede-92e1-2c02f03e755e&modified=20210208054305&extension=webp)\n\n### The project tries to create a model based on data provided by the World Health Organization (WHO) to evaluate the life expectancy for different countries in years. \n### The data offers a timeframe from 2000 to 2015. The data originates from here: https:\/\/www.kaggle.com\/kumarajarshi\/life-expectancy-who\/data. The output algorithms have been used to test if they can maintain their accuracy in predicting the life expectancy for data they haven\u2019t been trained.","f96d4fa5":"# 4.Train\/Test split","f32ce9c6":"## RandomForest Regression","198c0a21":"# 1.Importing libraries","e829521d":"# 3.Data Cleaning & Preprocessing the Data","dbeacbf3":"## Clean dataset with no null values"}}