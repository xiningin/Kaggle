{"cell_type":{"0b379582":"code","3397a592":"code","2fc6d595":"code","fdadee34":"code","1afb3cc1":"code","d66e4ff5":"code","8cff61b9":"code","79aff4c2":"code","0644e34f":"code","5cdf0539":"code","3c45752d":"code","918813c5":"code","291da89c":"code","f292abc0":"code","cfdf0d2c":"markdown","574c4415":"markdown","2b48131b":"markdown","070fa807":"markdown","62df460a":"markdown","7e8aad71":"markdown","f2483334":"markdown","61d77aba":"markdown","32114e4b":"markdown","e7b775e0":"markdown","85097ec2":"markdown","eb2cd9c1":"markdown","3996ae08":"markdown","5dc9e8ec":"markdown","8e463c8c":"markdown","e4e3e8fb":"markdown","68ef5e0a":"markdown","71f171ba":"markdown"},"source":{"0b379582":"# Pandas dibutuhkan untuk manipulasi dan transformasi data\nimport pandas as pd\n\n# Sklearn digunakan untuk segala hal yang berhubungan dengan machine learning modeling\n# train_test_split : untuk membagi data train menjadi data untuk training dan validasi\nfrom sklearn.model_selection import train_test_split\n\n# DecisionTreeClassifier : contoh model yang digunakan disini yaitu Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\n\n# accuracy_score : metrik validasi untuk menentukan seberapa akurat model yang dibuat\nfrom sklearn.metrics import accuracy_score","3397a592":"train = pd.read_csv('..\/input\/dscommunity-1\/train.csv')\ntrain.head()","2fc6d595":"test = pd.read_csv('..\/input\/dscommunity-1\/test.csv')\ntest.head()","fdadee34":"sample = pd.read_csv('..\/input\/dscommunity-1\/sample_submission.csv')\nsample.head()","1afb3cc1":"gender_map = {\"Wanita\":0, \"Pria\":1}\ntrain.replace({\"gender\": gender_map}, inplace=True)\ntest.replace({\"gender\": gender_map}, inplace=True)","d66e4ff5":"train.drop(['id_pasien'], axis=1, inplace=True)\ntest.drop(['id_pasien'], axis=1, inplace=True)","8cff61b9":"X = train.drop(['risiko'], axis=1)\ny = train.risiko","79aff4c2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","0644e34f":"clf = DecisionTreeClassifier()\nclf = clf.fit(X_train, y_train)","5cdf0539":"y_val = clf.predict(X_test)","3c45752d":"accuracy_score(y_test, y_val)","918813c5":"pred = clf.predict(test)\nprint(pred)","291da89c":"sample['risiko'] = pred\nsample.head()","f292abc0":"sample.to_csv(\"submission.csv\", index=False)","cfdf0d2c":"Kemudian, idealnya data tersebut harus di-split menjadi 2 buah data yaitu:\n1. Data yang beneran akan digunakan untuk **melatih** model\n2. Data **validasi**\n\nPada contoh kali ini, kita menggunakan fungsi `train_test_split` yang akan membagi data ke dalam 70% data training dan 30% data validasi.","574c4415":"# Starter Notebook: DS Community Competition 1\n\nBerdasarkan soal, kita diminta untuk memprediksi **apakah seseorang mempunya risiko penyakit jantung rendah (nilai 0) atau tinggi (nilai 1)**. Soal tersebut adalah tipe soal **klasifikasi**. Dengan kolom-kolom data yang kita miliki seperti umur, gender, tekanan darah, kolesterol, gula darah, dan lainnya, kita diminta untuk memprediksi **fitur target** yaitu kolom **risiko**.","2b48131b":"**Sample submission** merupakan format jawaban yang harus dikumpulkan","070fa807":"**Test** merupakan data uji yang harus diprediksi fitur targetnya. Perhatikan kalau di data test ini gaada fitur \/ kolom 'risiko' karena fitur tersebut adalah fitur target yang harus kita prediksi dari fitur umur, gender, tekanan_darah, dan lainnya.","62df460a":"Sekarang, model machine learning kita **sudah berhasil dilatih**. Untuk memvalidasinya, kita bisa gunakan data validasi yaitu X_test untuk melihat akurasi model. Pada awalnya, kita ngebuat prediksi dulu terhadap data X_test menggunakan model clf yang sudah dilatih tadi dengan memanggil method `.predict()`.","7e8aad71":"Kemudian kita coba lihat **skor akurasi** yang dimiliki oleh model dengan membandingkan antara nilai hasil prediksi kita yaitu y_val kepada nilai aslinya yaitu y_test. Dari hasil yang dioutputkan, misalkan ternyata nilai skor akurasi kita adalah 0.65. Artinya kita berhasil memprediksi 65% data validasi dengan benar.","f2483334":"Karena fitur \/ kolom id_pasien sepertinya hanya digunakan sebagai identifier \/ id biasa maka bisa kita hilangkan dengan cara di-**drop**. Di beberapa kasus tertentu, fitur id biasanya juga bisa berguna, tapi biar lebih simple kita drop saja.","61d77aba":"## Training\nUntuk melatih model, pertama-tama kita **load** modelnya ke dalam sebuah variabel misalnya clf (classifier). Kemudian, kita **melatih** model tersebut dengan memanggil method `.fit()` dengan argumen nilai X_train dan y_train.","32114e4b":"# Submit\nHasil submisi kalian bisa langsung disubmit dengan **mengupload file** di laman kompetisi: https:\/\/www.kaggle.com\/c\/dscommunity-1\/submit atau bisa juga mensubmit langsung dari hasil run notebook.","e7b775e0":"# Prediksi Data Uji \/ Data Test\n\nDengan adanya model machine learning di atas, kita dapat langsung **memprediksi fitur target 'risiko' dari data uji \/ data test** (test.csv) yang diberikan. Caranya sama, hanya tinggal memanggil method `.predict()`.","85097ec2":"Kemudian kita **save** dataframe di atas ke dalam submission.csv dan jangan lupa untuk **membuang indexnya** agar tidak ada kolom index tambahan.  \n\nFile tersebut akan dioutput di tab Data (bagian kanan di Kaggle Notebook) -> directory `output` -> `\/kaggle\/working\/` -> `submission.csv`","eb2cd9c1":"# Data Preprocessing\nModel yang akan kita gunakan di sini adalah **Decision Tree (DT)**. Model DT pada sklearn tidak support data kategorikal seperti string misalnya \"Pria\" atau \"Wanita\" yang ada pada kolom gender. Jadi kita konversi menjadi nilai integer terlebih dahulu dengan menggunakan **mapping**. Contohnya di sini \"Wanita\" dikodekan dengan integer 0 dan \"Pria\" dikodekan dengan integer 1.  \n\nKemudian, kita map kolom gender pada dataframe train dan test secara langsung (in place).","3996ae08":"**Train** merupakan data untuk melatih model. Kita dapat memanggil `train.head()`  untuk mengoutput bentuk tabel \/ dataframe train dan 5 contoh data pertama yang ada.","5dc9e8ec":"# Import data\nDi tahap ini akan dilakukan **pembacaan data .csv** yang sudah disediakan menggunakan fungsi `pd.read_csv()`. Data .csv tersebut akan dikonversi menjadi pandas **DataFrame**.","8e463c8c":"## Data splitting\nData latih (train) yang kita punya akan dipisahkan berdasarkan fitur\/kolomnya. **Fitur yang akan digunakan untuk memprediksi fitur target** akan dianggap sebagai variabel **X**. Sedangkan **fitur target sendiri (yaitu \"risiko\")** akan dianggap sebagai variabel **y**.","e4e3e8fb":"# Import modules","68ef5e0a":"# Modeling","71f171ba":"# Generate Submission\nLangkah terakhir adalah memasukkan hasil prediksi ke format \/ template jawaban yang sudah ada di sample_submission.csv. Di proses ini, kita tinggal mengganti nilai kolom risiko dengan hasil prediksi kita"}}