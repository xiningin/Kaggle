{"cell_type":{"c1d94f53":"code","f008f813":"code","c7a9c2ef":"code","7471f8c4":"code","deec8600":"code","0c5991b1":"code","01e7ee59":"code","f1ff4a97":"code","87c9ac6f":"code","5c5ebede":"code","f86728b9":"code","b713136c":"markdown","26ff3c15":"markdown","7abbfb11":"markdown"},"source":{"c1d94f53":"import pydicom\nimport os \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\nimport math","f008f813":"data_dir = \"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\"\npatients = os.listdir(data_dir)\nlabels_df = pd.read_csv(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv\")\nlabels_df[\"patient\"] = [(5 - len(str(l))) * \"0\" + str(l) for l in labels_df[\"BraTS21ID\"]]       ","c7a9c2ef":"print(f\" The number of different patients is {len(patients)}\")\nprint(f\" The number of patients with tumor is {sum(labels_df['MGMT_value'])}\") ","7471f8c4":"c = 0\ndims_t2w = {}\ndims_t1w = {}\ndims_t1wce = {}\ndims_flair = {}\nfor patient in patients[1:10]:\n#     print(patient)\n    c += 1\n    label = labels_df[labels_df[\"patient\"] == patient]['MGMT_value']\n    if c % 45 == 0:\n        print(f\"{c}\/585\")\n    \n    # T2w\n    path_t2w = data_dir + '\/' + patient + '\/T2w\/'\n    slices_t2w = [pydicom.dcmread(path_t2w + s) for s in os.listdir(path_t2w)]\n    slices_t2w.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    dims_t2w[patient] = (len(slices_t2w), slices_t2w[0].pixel_array.shape)\n    # T1w\n    path_t1w = data_dir + '\/' + patient + '\/T1w\/'\n    slices_t1w = [pydicom.dcmread(path_t1w + s) for s in os.listdir(path_t1w)]\n    slices_t1w.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    dims_t1w[patient] = (len(slices_t1w), slices_t1w[0].pixel_array.shape)\n    # T1wCE\n    path_t1wce = data_dir + '\/' + patient + '\/T1wCE\/'\n    slices_t1wce = [pydicom.dcmread(path_t1wce + s) for s in os.listdir(path_t1wce)]\n    slices_t1wce.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    dims_t1wce[patient] = (len(slices_t1wce), slices_t1wce[0].pixel_array.shape)\n    # FLAIR\n    path_flair = data_dir + '\/' + patient + '\/FLAIR\/'\n    slices_flair = [pydicom.dcmread(path_flair + s) for s in os.listdir(path_flair)]\n    slices_flair.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    dims_flair[patient] = (len(slices_flair), slices_flair[0].pixel_array.shape)","deec8600":"# dims_t2w # 27 (256,208)\n# dims_t1w # 29 (256,192)\n# dims_t1wce # 75 (256, 192)\n# dims_flair # 27 (256, 192)","0c5991b1":"for patient in patients[:1]:\n    # T2w\n    path_t2w = data_dir + '\/' + patient + '\/T2w\/'\n    slices_t2w = [pydicom.dcmread(path_t2w + s) for s in os.listdir(path_t2w)]\n    slices_t2w.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    \n    plt.imshow(slices_t2w[0].pixel_array)\n    plt.show()","01e7ee59":"imp_px_size = 192\n\nfor patient in patients[:1]:\n    # T1w\n    path_t1w = data_dir + '\/' + patient + '\/T1w\/'\n    slices_t1w = [pydicom.dcmread(path_t1w + s) for s in os.listdir(path_t1w)]\n    slices_t1w.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    \n    fig = plt.figure()\n    for num, each_slice in enumerate(slices_t1w[72:108]):\n        y = fig.add_subplot(6,6, num + 1)\n        new_image = cv2.resize(np.array(each_slice.pixel_array), (imp_px_size, imp_px_size))\n        y.imshow(new_image, cmap = 'gray')\n    plt.show()","f1ff4a97":"imp_px_size = 192\n\nfor patient in patients[:1]:\n    # T1w\n    path_t1wce = data_dir + '\/' + patient + '\/T1wCE\/'\n    slices_t1wce = [pydicom.dcmread(path_t1wce + s) for s in os.listdir(path_t1wce)]\n    slices_t1wce.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    \n    fig = plt.figure()\n    for num, each_slice in enumerate(slices_t1wce[72:108]):\n        y = fig.add_subplot(6,6, num + 1)\n        new_image = cv2.resize(np.array(each_slice.pixel_array), (imp_px_size, imp_px_size))\n        y.imshow(new_image, cmap = 'gray')\n    plt.show()","87c9ac6f":"imp_px_size = 208\n\nfor patient in patients[:1]:\n    # T2w\n    path_t2w = data_dir + '\/' + patient + '\/T2w\/'\n    slices_t2w = [pydicom.dcmread(path_t2w + s) for s in os.listdir(path_t2w)]\n    slices_t2w.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    \n    fig = plt.figure()\n    for num, each_slice in enumerate(slices_t2w[:36]):\n        y = fig.add_subplot(6,6, num + 1)\n        new_image = cv2.resize(np.array(each_slice.pixel_array), (imp_px_size, imp_px_size))\n        y.imshow(new_image, cmap = 'gray')\n    plt.show()","5c5ebede":"imp_px_size = 208\n\nfor patient in patients[:1]:\n    # flair\n    path_flair = data_dir + '\/' + patient + '\/FLAIR\/'\n    slices_flair = [pydicom.dcmread(path_flair + s) for s in os.listdir(path_flair)]\n    slices_flair.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    \n    fig = plt.figure()\n    for num, each_slice in enumerate(slices_flair[36:72]):\n        y = fig.add_subplot(6,6, num + 1)\n        new_image = cv2.resize(np.array(each_slice.pixel_array), (imp_px_size, imp_px_size))\n        y.imshow(new_image, cmap = 'gray')\n    plt.show()","f86728b9":"image_pixel_size = 196\nhm_slices = 20\n\ndef chunks(l, n):\n    for i in range(0, len(l), n):\n        yield l[i:i + n]\n        \ndef mean(l):\n    return sum(l)\/len(l)\n\nfor patient in patients[:10]:\n    # T2w\n    path_t2w = data_dir + '\/' + patient + '\/T2w\/'\n    slices_t2w = [pydicom.dcmread(path_t2w + s) for s in os.listdir(path_t2w)]\n    slices_t2w.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    \n    new_slices = []\n    \n    # resize pixel size\n    slices_t2w = [cv2.resize(np.array(each_slice.pixel_array), (imp_px_size, imp_px_size)) for each_slice in slices_t2w]\n    \n    # resize depth\n    c_size = math.ceil(len(slices_t2w) \/ hm_slices)\n    \n    for s_c in chunks(slices_t2w, c_size):\n        s_c = list(map(mean, zip(*s_c)))\n        new_slices.append(s_c)\n        \n    while len(new_slices) < hm_slices:\n        new_slices.append(new_slices[:-1])\n    \n    \n    print(len(new_slices))","b713136c":"# READ DATA","26ff3c15":"# VISUALIZE DATA","7abbfb11":"# RESIZE DATA\n\n### NEED TO RESIZE BOTH DEPTH AND PIXEL-GRID ?\n\n**work only with t2w for now**"}}