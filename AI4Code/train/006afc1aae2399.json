{"cell_type":{"5759270f":"code","6ccfc35b":"code","1878bd7c":"code","264c77e8":"code","d50d87d6":"code","b0033957":"markdown","153db7b7":"markdown","c9c1cab4":"markdown"},"source":{"5759270f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ccfc35b":"# Import pandas library\nimport pandas as pd\n\n# Read the file into gross\ngross = pd.read_csv('\/kaggle\/input\/disney-movies-19372016-total-gross\/disney_movies_total_gross.csv', parse_dates=['release_date'])\n\n# Print out gross\ngross.head()","1878bd7c":"\n# Sort data by the adjusted gross in descending order \ninflation_adjusted_gross_desc = gross.sort_values(by='inflation_adjusted_gross', ascending=False) \n\n# Display the top 10 movies \ninflation_adjusted_gross_desc.head(10)","264c77e8":"sdf = inflation_adjusted_gross_desc.head(10)\nfig, ax = plt.subplots(figsize=(10,10)) \nchart = sns.barplot(y=sdf.inflation_adjusted_gross, x=sdf.movie_title)\n_=chart.set_xticklabels(chart.get_xticklabels(), rotation=90)\nplt.title('Top 10 inflation adjusted gross')","d50d87d6":"\n# Extract year from release_date and store it in a new column\ngross['release_year'] = pd.DatetimeIndex(gross['release_date']).year\n\n# Compute mean of adjusted gross per genre and per year\ngroup = gross.groupby(['genre','release_year']).mean()\n\n# Convert the GroupBy object to a DataFrame\ngenre_yearly = group.reset_index()\n\n# Inspect genre_yearly \nprint(genre_yearly.head())\n\n\n# Plot the data  \n\ng=sns.relplot(kind='line', x='release_year', y='inflation_adjusted_gross', hue='genre', data=genre_yearly)\ng.fig.set_size_inches(10,10)\nplt.title('Movie genre trend')","b0033957":"# Movie genre trend\n\nFrom the top 10 movies above, it seems that some genres are more popular than others. So, we will check which genres are growing stronger in popularity. To do this, we will group movies by genre and then by year to see the adjusted gross of each genre in each year.","153db7b7":"# Top ten movies at the box office\n\nWe will check which are the 10 Disney movies that have earned the most at the box office. We can do this by sorting movies by their inflation-adjusted gross (we will call it adjusted gross from this point onward).","c9c1cab4":"# Let's load the file and see what the data looks like"}}