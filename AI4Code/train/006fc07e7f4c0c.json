{"cell_type":{"42847926":"code","9431a919":"code","6e77a494":"code","9340fcc0":"code","e4f2d1b6":"code","81e3c9b9":"code","f1a045cf":"code","3dfdaa22":"code","44cb3c7f":"code","64e0b9fb":"code","c7c056a5":"code","e2458fb8":"code","4af3a324":"code","ecc96ba3":"code","a2aae34f":"code","82169ae6":"code","dbb3cfab":"code","51d26a34":"code","7574c5e7":"code","9828627b":"code","39491f00":"code","b0c24558":"code","c6fb63c3":"code","77a191a4":"code","623c7853":"code","14b6a2c9":"code","9ec61d1d":"code","79e11024":"code","b6552e4b":"code","33be193e":"code","8aa0ffb0":"code","04907d73":"code","8ad8fa55":"code","b0838773":"code","565ec54d":"code","af6adf4f":"code","a269fc5c":"code","396d1f1d":"code","dd5ac970":"code","3324dcac":"code","cf5c9942":"code","5b7236c1":"code","11dc8ed5":"code","7c7d564a":"code","adbd7710":"code","e83a04c7":"code","6f75a35d":"code","9ea08f72":"code","f061bd7e":"code","def74423":"code","dd92826e":"code","6aa0b633":"markdown","92ca5bad":"markdown","d142900b":"markdown","770f52bb":"markdown","93d0f91c":"markdown","8f30984c":"markdown","69dbe241":"markdown","35097a7a":"markdown","4b86e2db":"markdown","0a2cfcb7":"markdown","cb930440":"markdown","a566922c":"markdown","933edec7":"markdown","ca537c15":"markdown","8f82e72b":"markdown","a4e3af90":"markdown","b6c78e32":"markdown","f4570e62":"markdown","6dfb02eb":"markdown","5c91a650":"markdown","7eafd3d9":"markdown","3f940a0a":"markdown","357d2c92":"markdown","1607e80e":"markdown","2959fe58":"markdown","80b73a34":"markdown","5e1f8666":"markdown","fc6a8407":"markdown","ca3cd7eb":"markdown","0e2a7a43":"markdown","a3ce2697":"markdown","b32e2d04":"markdown","c7a62195":"markdown","97ee1a85":"markdown","1e7b363c":"markdown","c387427d":"markdown","3a420865":"markdown","debaeb34":"markdown","5bbc91bb":"markdown"},"source":{"42847926":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","9431a919":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ntrain.head()","6e77a494":"train.info()","9340fcc0":"train.isnull().sum()","e4f2d1b6":"test.info()","81e3c9b9":"test.isnull().sum()","f1a045cf":"msno.matrix(df=train.iloc[:, :], figsize=(6, 4), color=(0.8, 0.5, 0.2))","3dfdaa22":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df= pd.DataFrame([survived, dead])\n    df.index = ['Survived', 'Dead']\n    df.plot(kind = 'bar', stacked='True', figsize=(10,5))","44cb3c7f":"f, ax = plt.subplots(1, 2, figsize=(8, 5))\n\ntrain[train['Survived']==1]['Sex'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('Sex - Survived')\ntrain[train['Survived']==0]['Sex'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[1], shadow=True)\nax[1].set_title('Sex - Dead')\nplt.show()","64e0b9fb":"bar_chart('Pclass')","c7c056a5":"bar_chart(\"SibSp\")","e2458fb8":"bar_chart(\"Parch\")","4af3a324":"bar_chart(\"Embarked\")","ecc96ba3":"fig, ax = plt.subplots(1, 2, figsize=(15, 7))\nplot = sns.distplot(train['Fare'], color='b', ax =ax[0])\nplot2 = sns.distplot(train['Fare'][train[\"Survived\"]==1], color='b',  ax =ax[1])\nplot2 = sns.distplot(train['Fare'][train[\"Survived\"]==0], color='r',  ax =ax[1])\nplot= plot.legend(loc='best')","a2aae34f":"train.describe(include='all')","82169ae6":"train = train.drop(['Ticket', 'Cabin'], axis=1)\ntest = test.drop(['Ticket', 'Cabin'], axis=1)","dbb3cfab":"southhampton= train[train[\"Embarked\"]=='S'].shape[0]\nprint('S : ', southhampton)\ncherbourg= train[train[\"Embarked\"]=='C'].shape[0]\nprint('C : ',cherbourg)\nqueenstown = train[train[\"Embarked\"]=='Q'].shape[0]\nprint('D : ',cherbourg)","51d26a34":"train=train.fillna({\"Embarked\" : \"S\"})","7574c5e7":"embarked_mapping = {'S': 1 , \"C\" : 2 , \"Q\" : 3}\ntrain[\"Embarked\"] = train[\"Embarked\"].map(embarked_mapping)\ntest[\"Embarked\"] = test[\"Embarked\"].map(embarked_mapping)\ntrain.head()","9828627b":"combine = [train, test]\nfor dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\\.', expand = False)\npd.crosstab(train['Title'],train['Sex'])","39491f00":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady','Capt','Col','Don','Dr','Major','Rev','Jonkheer','Dona'],'Other')\n    dataset['Title'] = dataset['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\n    dataset['Title'] = dataset['Title'].replace('Mile', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \ntrain[['Title', 'Survived']].groupby(['Title'], as_index = False).mean()","b0c24558":"train.loc[(train.Age.isnull())&(train.Title=='Mr'),'Age'] = 33\ntrain.loc[(train.Age.isnull())&(train.Title=='Mrs'),'Age'] = 36\ntrain.loc[(train.Age.isnull())&(train.Title=='Master'),'Age'] = 5\ntrain.loc[(train.Age.isnull())&(train.Title=='Miss'),'Age'] = 22\ntrain.loc[(train.Age.isnull())&(train.Title=='Other'),'Age'] = 46\n\ntest.loc[(test.Age.isnull())&(test.Title=='Mr'),'Age'] = 33\ntest.loc[(test.Age.isnull())&(test.Title=='Mrs'),'Age'] = 36\ntest.loc[(test.Age.isnull())&(test.Title=='Master'),'Age'] = 5\ntest.loc[(test.Age.isnull())&(test.Title=='Miss'),'Age'] = 22\ntest.loc[(test.Age.isnull())&(test.Title=='Other'),'Age'] = 46","c6fb63c3":"title_mapping = {'Mr' : 1, 'Miss' : 2, \"Mrs\" : 3, \"Master\" : 4, \"Royal\" : 5, \"Rare\" : 6 }\nfor dataset in combine:\n    dataset['Title']= dataset[\"Title\"].map(title_mapping)\n    dataset['Title']= dataset['Title'].fillna(0)\ntrain.head()","77a191a4":"train = train.drop(['Name', 'PassengerId'] , axis = 1)\ntest = test.drop(['Name', 'PassengerId'] , axis = 1)\ncombine = [train, test]\ntrain.head()","623c7853":"sex_mapping = {\"male\" : 0 , \"female\" : 1}\nfor dataset in combine:\n    dataset['Sex']= dataset['Sex'].map(sex_mapping)","14b6a2c9":"bins = [0, 5, 12, 18, 24, 35, 60, np.inf]\nlabels = ['Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = labels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = labels)\ntrain.head()","9ec61d1d":"age_mapping={'Baby' :1, 'Child':2, 'Teenager':3, 'Student':4, 'Young Adult':5, 'Adult':6, 'Senior':7}\ntrain[\"AgeGroup\"]= train[\"AgeGroup\"].map(age_mapping)\ntest[\"AgeGroup\"]= test[\"AgeGroup\"].map(age_mapping)\ntrain = train.drop(['Age'] , axis =1)\ntest = test.drop(['Age'], axis = 1)","79e11024":"test.loc[test.Fare.isnull(), 'Fare'] = test['Fare'].mean() \n\ntrain['Fare'] = train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ntest['Fare'] = test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","b6552e4b":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\nfare_plot = sns.distplot(train['Fare'], color='b', ax=ax)\nfare_plot = fare_plot.legend(loc='best')","33be193e":"train_data = train.drop([\"Survived\"], axis=1)\ntarget = train[\"Survived\"]","8aa0ffb0":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","04907d73":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits = 10 , shuffle =True, random_state = 0)","8ad8fa55":"clf = RandomForestClassifier(n_estimators = 13)","b0838773":"scoring = 'accuracy'\nscore = cross_val_score(clf, train_data , target, cv= k_fold, n_jobs=1, scoring= scoring)\nprint(score)","565ec54d":"round(np.mean(score)*100,2)","af6adf4f":"clf = KNeighborsClassifier()","a269fc5c":"scoring = 'accuracy'\nscore = cross_val_score(clf, train_data , target, cv= k_fold, n_jobs=1, scoring= scoring)\nprint(score)","396d1f1d":"round(np.mean(score)*100,2)","dd5ac970":"clf =DecisionTreeClassifier()","3324dcac":"scoring = 'accuracy'\nscore = cross_val_score(clf, train_data , target, cv= k_fold, n_jobs=1, scoring= scoring)\nprint(score)","cf5c9942":"round(np.mean(score)*100,2)","5b7236c1":"clf =GaussianNB()","11dc8ed5":"scoring = 'accuracy'\nscore = cross_val_score(clf, train_data , target, cv= k_fold, n_jobs=1, scoring= scoring)\nprint(score)","7c7d564a":"round(np.mean(score)*100,2)","adbd7710":"clf =SVC()","e83a04c7":"scoring = 'accuracy'\nscore = cross_val_score(clf, train_data , target, cv= k_fold, n_jobs=1, scoring= scoring)\nprint(score)","6f75a35d":"round(np.mean(score)*100,2)","9ea08f72":"clf = SVC()\nclf.fit(train_data, target)","f061bd7e":"prediction = clf.predict(test)","def74423":"test_Passenger = pd.read_csv('..\/input\/test.csv')\nsubmission = pd.DataFrame({\"PassengerId\":test_Passenger[\"PassengerId\"], \"Survived\" : prediction})\nsubmission.to_csv('submission.csv', index=False)","dd92826e":"submission = pd.read_csv('submission.csv')\nsubmission.head()","6aa0b633":"DecisionTreeClassifier() 79.69%","92ca5bad":"\uc800\uc7a5\ub0b4\uc5ed\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","d142900b":"\ud0d1\uc2b9 \ud56d\uad6c\ubcc4 \uc0ac\ub78c \uc218 \uc785\ub2c8\ub2e4. \n\nsouthhampton\uac00 \uac00\uc7a5 \ub9ce\uc2b5\ub2c8\ub2e4.","770f52bb":"KFold\uc758 \uad50\ucc28\uac80\uc99d\uc744 \uc774\uc6a9\ud574 \uc5b4\ub290 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud560\uc9c0 \ud310\ub2e8\ud569\ub2c8\ub2e4.","93d0f91c":"RandomForestClassifier 81.71%","8f30984c":"\uc8fc\uc5b4\uc9c4 train\ub370\uc774\ud130\uc640 test\ub370\uc774\ud130\ub97c csv\ud615\ud0dc\ub85c \uc77d\uace0, train\ub370\uc774\ud130\uc758 \uc0c1\uc7045\uac1c\uc758 \ud56d\ubaa9\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.","69dbe241":"\ud0d1\uc2b9 Class\ubcc4 \uc0dd\uc874\ud604\ud669\uc785\ub2c8\ub2e4.\n\n\uc0dd\uc874\uc790\uc758 \uacbd\uc6b0 1, 2, 3 class\uac00 \uace0\ub974\uac8c \ubd84\ud3ec\ud55c \ubc18\uba74, \uc8fd\uc740 \uc0ac\ub78c\uc740 \ub0ae\uc740 class\uc77c\uc218\ub85d \ub354 \ub9ce\uc2b5\ub2c8\ub2e4.\n\n\uc0dd\uc874\uacfc \uc0c1\uad00 \uad00\uacc4\uac00 \uc788\ub294 feature\ub85c \ud310\ub2e8\ub429\ub2c8\ub2e4.","35097a7a":"GaussianNB 80.69%","4b86e2db":"\ub300\ub7b5 \uc801\uc778 train\uc758 \uc815\ubcf4\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n\nnon-null\ub370\uc774\ud130\uc758 \uc218\uac00 \ub2e4\ub978 \uac83\uc744 \ubcf4\uc544 \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\uc911 \uacb0\uce21\uce58\uac00 \uc788\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","0a2cfcb7":"'Cabin'\uc758 \uacbd\uc6b0 \ube44\uc5b4\uc788\ub294 \ub370\uc774\ud130\uac00 \ub9ce\uace0 \ucd08\ubcf4\uc790\uac00 \uac00\uacf5\ud558\uae30 \uc5b4\ub824\uc6cc\ubcf4\uc785\ub2c8\ub2e4.\n\n\uc5f0\uc2b5 \ub2e8\uacc4\uc774\ubbc0\ub85c 'Cabin'\uacfc \ubcc4 \uc758\ubbf8\ub97c \ub2f4\uace0\uc788\uc9c0 \uc54a\uc740 \uac83 \uac19\uc740 'Ticket'\uc744 \uc81c\uac70\ud569\ub2c8\ub2e4.","cb930440":"describe\ud568\uc218\ub97c \uc774\uc6a9\ud574 \uc804\uccb4\uc801\uc778 \ud1b5\uacc4\uc815\ubcf4\ub97c \uc694\uc57d\ud574\uc11c \ud655\uc778\ud569\ub2c8\ub2e4.\n\n\uc774\uc0c1\uce58\ub97c \ud310\ubcc4\ud558\ub294\ub370 \uc720\uc6a9\ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","a566922c":"msno\ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec Train \uacb0\uce21\uce58\ub97c \uc2dc\uac01\ud654 \ud588\uc2b5\ub2c8\ub2e4.","933edec7":"\uce74\ud14c\uace0\ub9ac\ud654\ud55c \ubb38\uc790\ub370\uc774\ud130\ub97c \uc22b\uc790\ub85c mapping\ud569\ub2c8\ub2e4.\n\n\uc774\uac83\uc73c\ub85c \uc0c8\ub85c\uc6b4 AgeGroup \uceec\ub7fc\uc774 \uc0dd\uacbc\uc73c\ubbc0\ub85c Age\ub294 \uc81c\uac70\ud569\ub2c8\ub2e4.","ca537c15":"KNeighborsClassifier 81.48%","8f82e72b":"\uc774\uc81c \ud559\uc2b5\ub370\uc774\ud130\uc758 feature\uacfc label\uc744 \ubd84\ub9ac\ud569\ub2c8\ub2e4.","a4e3af90":"train\ub370\uc774\ud130 \uc911 \ube44\uc5b4\uc788\ub294 \ubd80\ubd84\uc774 \uc5bc\ub9c8\ub098 \ub418\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n\n'Age'\uc758 \uacbd\uc6b0 177\uac1c, 'Cabin'\uc758 \uacbd\uc6b0 687\uac1c, 'Embarked'\uc758 \uacbd\uc6b0 2\uac1c\uc758 \ud56d\ubaa9\uc774 \ube44\uc5b4\uc788\ub294 \uac12 \uc785\ub2c8\ub2e4.","b6c78e32":"Age\ub97c \ub098\uc774\ub300\ubcc4\ub85c \uce74\ud14c\uace0\ub9ac\ud654 \ud569\ub2c8\ub2e4.\n\n\ub108\ubb34 \ub9ce\uc740 \ubd84\ub958\uae30\uc900\uc740 \uc624\ud788\ub824 \uc131\ub2a5\uc744 \uc548\uc88b\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","f4570e62":"\uac01\uc790 \uc131\ubcc4\uc5d0 \ub9de\ub294 \uc774\ub984\uacfc \ub9e4\uce58\ud558\uace0, \uc790\uc8fc \ub4f1\uc7a5\ud558\uc9c0 \uc54a\ub294 \ub2e8\uc5b4\ub294 Other\ub85c \ud1b5\ud569\ud558\uc5ec \uc0c8\ub85c\uc6b4 'Title' \uceec\ub7fc\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n\n'Countess', 'Lady', 'Sir'\uc758 \uacbd\uc6b0 \uadc0\uc871\uc5d0\uac8c \ubd99\ub294 \uc774\ub984\uc774\ub77c Royal\ub85c \ubb36\uc5c8\ub294\ub370 \n\nRoyal\uc758 \uacbd\uc6b0 \ubaa8\ub450 \uc0dd\uc874\ud588\uc2b5\ub2c8\ub2e4.","6dfb02eb":"\ud63c\uc790 \ud0d1\uc2b9\ud55c \uacbd\uc6b0 \uc8fd\uc740 \uc0ac\ub78c\uc774 \ub354 \ub9ce\uc9c0\ub9cc,\n\n\ud568\uaed8 \ud0d1\uc2b9\ud55c \ubd80\ubaa8, \uc544\uc774\uc758 \uc218\uac00 1~2\uba85\uc778 \uacbd\uc6b0 \uc0dd\uc874\ud655\ub960\uc774 \ub354 \ub192\uc740 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.","5c91a650":"\uc131\ubcc4\uc744 \uc22b\uc790\ub85c mapping\ud569\ub2c8\ub2e4.","7eafd3d9":"\uc5ec\uc131\uc758 \uacbd\uc6b0 \ub0a8\uc131\ubcf4\ub2e4 \uc0dd\uc874\ub960\uc774 \ub192\uace0, \uc8fd\uc740 \uc0ac\ub78c\uc740 \ub300\ubd80\ubd84 \ub0a8\uc790\uc785\ub2c8\ub2e4.\n\n\uc131\ubcc4\uc740\uc0dd\uc874\uc5d0 \uc0c1\ub2f9\ud55c \uc601\ud5a5\uc744 \uc8fc\ub294 feature\ub85c \uc0dd\uac01\ub429\ub2c8\ub2e4.","3f940a0a":"\uac00\uc7a5 \ub192\uc740 \uc815\ud655\ub3c4\ub97c \uac00\uc9c4 SVC\ubaa8\ub378\uc744 \uc120\ud0dd\ud558\uace0 \ud559\uc2b5\ud569\ub2c8\ub2e4.","357d2c92":"\"Embarked\"\uc758 \uacb0\uce21 \ub370\uc774\ud130\uac00 2\uac1c\uac00 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.\n\n\ucd5c\ube48\uac12\uc778 southhampton\ub85c \ucc44\uc6cc\ub123\uaca0\uc2b5\ub2c8\ub2e4.","1607e80e":"\uc774\ubd80\ubd84\uc774 \uc57d\uac04 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. \ud0d1\uc2b9\uac1d\uc758 \uc774\ub984\uc5d0\ub294 Mr, Miss\uac19\uc740 \uc815\ubcf4\uac00 \ub2f4\uaca8\uc788\uc2b5\ub2c8\ub2e4.\n\n\uc774 \uc815\ubcf4\ub85c \ub098\uc774\ub97c \uc608\uce21\ud558\ub294\ub370 \ub3c4\uc6c0\uc744 \ubc1b\uc744 \uac83\uc785\ub2c8\ub2e4.\n\n\uc815\uaddc\ud654\uc2dd\uc744\ud1b5\ud574 \uc5b4\ub5a4 \ub2e8\uc5b4\uac00 \ub9ce\uc774 \ub4f1\uc7a5\ud588\ub294\uc9c0 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.","2959fe58":"\uc624\ub978\ucabd \uadf8\ub798\ud504\ub294 'Fare'\uc5d0 \ub300\ud55c \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \ub098\ud0c0\ub0c8\uc2b5\ub2c8\ub2e4. 0~100\uc0ac\uc774\uc758 \uac12\uc774 \ub300\ubd80\ubd84\uc744 \ucc28\uc9c0\ud569\ub2c8\ub2e4.\n\n\uc624\ub978\ucabd\uc758 \uadf8\ub798\ud504\ub294 \ube68\uac04 \uc120\uc740 \uacbd\uc6b0 Dead, \ud30c\ub780 \uc120\uc740 Survived\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \n\n\ub0ae\uc740 \uc6b4\uc784\uc758 \uacbd\uc6b0 \uc8fd\uc740 \uc0ac\ub78c\uc774 \ub354\ub9ce\uace0 \ub192\uc740 \uc6b4\uc784\uc77c\uc218\ub85d \ud655\uc2e4\ud788 \uc0dd\uc874\uc790\uac00 \ub354 \ub9ce\uc2b5\ub2c8\ub2e4.","80b73a34":"\ud0d1\uc2b9 \uc9c0\uc5ed\ubcc4 \uc0dd\uc874 \ud604\ud669\uc785\ub2c8\ub2e4. \n\nQ,S\uc9c0\uc5ed\uc758 \uacbd\uc6b0 \uc8fd\uc740 \uc0ac\ub78c\uc774 \ub354 \ub9ce\uace0 C\uc9c0\uc5ed\uc740 \uc0dd\uc874\uc790\uac00 \ub354 \ub9ce\uc2b5\ub2c8\ub2e4.","5e1f8666":"\ucef4\ud4e8\ud130\uac00 \uc778\uc2dd\ud558\ub3c4\ub85d \ubb38\uc790\ub97c \uc22b\uc790\ub85c mapping\ud569\ub2c8\ub2e4.","fc6a8407":"test\uc758 \ube44\uc5b4\uc788\ub294 Fare\ub370\uc774\ud130 \ud558\ub098\ub97c \ud3c9\uade0 \uac12\uc73c\ub85c \ucc44\uc6cc\ub123\uc2b5\ub2c8\ub2e4.\n\nFare\uc758 \ub370\uc774\ud130\ub294 0~800\uc73c\ub85c \ub2e4\uc591\ud569\ub2c8\ub2e4. \ub113\uc740 \ubc94\uc704\uc758 \ub370\uc774\ud130\ub294 \uba38\uc2e0\ub7ec\ub2dd\uc5d0 \uc545\uc601\ud5a5\uc744 \uc904 \uc218 \uc788\uc73c\ubbc0\ub85c\n\n\ub85c\uadf8\uc2a4\ucf00\uc77c\ub9c1\uc744 \ud574\uc90d\ub2c8\ub2e4.","ca3cd7eb":" \ub370\uc774\ud130 \ubd84\uc11d\uc5d0 \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.","0e2a7a43":"\uba38\uc2e0\ub7ec\ub2dd\uc744 \ud558\uae30\uc704\ud574\uc11c \ucef4\ud4e8\ud130\uc5d0\uac8c \uc815\ubcf4\ub97c \uc54c\ub824\uc918\uc57c\ud569\ub2c8\ub2e4.\n\n\ubb38\uc790\uc758 \uacbd\uc6b0 \uc778\uc2dd\uc744 \ud558\uc9c0\ubabb\ud558\ubbc0\ub85c \ubb38\uc790\ub370\uc774\ud130\ub97c \uc22b\uc790\ub85c \ubcc0\ud658\ud558\uc5ec \uc801\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\nmap\ud568\uc218\ub97c \ud1b5\ud574 \"Embarked\" column\uc758 \ub370\uc774\ud130\uc758 \uc774\ub984\uc744 \uc22b\uc790\ub85c \ubcc0\uacbd\ud569\ub2c8\ub2e4.","a3ce2697":"SVC 83.16%","b32e2d04":"\uc774\ub984\uc744 \ud1a0\ub300\ub85c \ub098\uc774\ub97c \uc608\uce21\ud558\uc5ec \uacb0\uce21\uce58\ub97c \ucc44\uc6e0\uc2b5\ub2c8\ub2e4.\n\n\ub300\ub7b5 \uc544\uc774\uc774\ub984, \uacb0\ud63c \uc5ec\ubd80\ub85c \uc608\uce21\ub41c \uc218\uce58\uc785\ub2c8\ub2e4.","c7a62195":"\uc2a4\ucf00\uc77c\ub9c1\ub41c Fare\uc758 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc785\ub2c8\ub2e4.","97ee1a85":"\ud568\uaed8 \ud0d1\uc2b9\ud55c \ud615\uc81c\uc640 \ubc30\uc6b0\uc790\uc758 \uc218\uac00 1\uba85\uc77c\uacbd\uc6b0 \uc0dd\uc874 \ud655\ub960\uc774 \ub354 \ub192\uc2b5\ub2c8\ub2e4.\n\n0\uba85 \ud639\uc740 2\uba85 \uc774\uc0c1\uc77c \uacbd\uc6b0\ub294 \uc8fd\uc740 \uc218\uac00 \ub354 \ub9ce\ub124\uc694.","1e7b363c":"\uc774\uc81c feature\uacfc 'Survived'\uc0ac\uc774\uc5d0 \uadf8\ub9bc\uc744 \uadf8\ub824 \uc0c1\uad00\uad00\uacc4\ub97c \ube44\uad50\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","c387427d":"'Age'\uc758 \uacbd\uc6b0 86\uac1c, 'Cabin'\uc758 \uacbd\uc6b0 327\uac1c, 'Fare'\uc758 \uacbd\uc6b0 1\uac1c\uc758 \ud56d\ubaa9\uc774 \ube44\uc5b4\uc788\ub294 \uac12 \uc785\ub2c8\ub2e4.","3a420865":"\uc774\ubc88\uc5d0\ub294 test\ub370\uc774\ud130\uc758 \uc815\ubcf4\ub97c \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.\n\n'Age'\uc640 'Fare', 'Cabin'\uc758 \ub370\uc774\ud130\uac00 \ubd80\ubd84\ubd80\ubd84 \ube44\uc5b4\uc788\uc2b5\ub2c8\ub2e4.","debaeb34":"Name\uc815\ubcf4\ub294 \uc0ac\uc6a9\ud574 Title\ub85c \uac00\uacf5\ud588\uc73c\ub2c8 \uc81c\uac70\ud574\uc90d\ub2c8\ub2e4.\n\nPassengerId\ub294 \uc0dd\uc874\uc5ec\ubd80\uc640 \ubcc4\ub85c \uc0c1\uad00\uc5c6\uc5b4 \ubcf4\uc5ec \uac19\uc774 \uc81c\uac70\ud569\ub2c8\ub2e4. ","5bbc91bb":"\uc608\uce21\uacb0\uacfc\ub97c \ub370\uc774\ud130 csv\ud30c\uc77c\ub85c \uc800\uc7a5\ud569\ub2c8\ub2e4."}}