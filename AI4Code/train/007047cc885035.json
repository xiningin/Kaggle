{"cell_type":{"a2a0cfc1":"code","4691c7a2":"code","ecd67bfc":"code","cf5456ae":"code","45540435":"code","154373e0":"code","548b5c11":"code","f0b2a10b":"code","9b70006b":"code","dbc914f8":"code","94babfef":"code","f4ac41a9":"code","00ce4389":"code","1473f074":"code","0f75ac5e":"code","51c051c5":"code","4ace3c07":"code","31bfef09":"code","1b1d3042":"code","639e66f3":"code","296410dc":"code","cd357e19":"code","4b6627ef":"code","548cb995":"code","49c00e95":"code","e54600d6":"code","3ee0b73e":"code","7237eb05":"code","718bf258":"code","0ace2d30":"code","ea379aef":"code","db89d9ec":"code","1dff16a2":"code","ce93836a":"code","6303979e":"code","a306db02":"code","c13917da":"code","d65b79ad":"code","6acdcc01":"code","ee40be37":"code","006db413":"code","b72ee19e":"code","a56b5a13":"code","20fe260a":"code","a6a263a8":"code","f1f544f6":"code","3a45d301":"code","88bf06d9":"code","6d9f17f2":"code","2aeb2866":"code","0102893c":"code","cb8390d7":"code","aa4133da":"code","a595aa3c":"code","d67d62f5":"code","614429aa":"code","db0f5d34":"code","2dceb6a9":"code","a392d053":"code","1364dd88":"code","39c45add":"code","f907374e":"code","9013b93b":"code","2018f9af":"code","1926220d":"code","8ffb0e2a":"code","90a90358":"code","4a163ac0":"code","2fca7785":"code","5d2f619c":"code","dae43f15":"code","2f9b5f98":"code","6e1c18ca":"code","7d4b7b07":"code","6711a7ff":"code","19146437":"code","a182f341":"code","74728639":"code","76661980":"code","af9d2bfe":"code","f51b0803":"code","6cb35082":"code","f743f3fb":"markdown","baa99696":"markdown","f7ab43e4":"markdown","5b1ea425":"markdown","39090d2e":"markdown","7978769b":"markdown","e62bf20c":"markdown","bbe85f1c":"markdown","8470c7d8":"markdown"},"source":{"a2a0cfc1":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom datetime import datetime \nimport warnings\nwarnings.filterwarnings(\"ignore\")","4691c7a2":"df = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\", index_col = 'row_id')","ecd67bfc":"df.head()","cf5456ae":"df.info()","45540435":"df.describe()","154373e0":"# checking variance in dataset features\ndf.var()","548b5c11":"#  checking skewness\ndf.skew()","f0b2a10b":"sns.histplot(df['num_sold'], kde = True)","9b70006b":"# Checking outliers\nsns.boxplot(df['num_sold'])","dbc914f8":"fig = plt.figure(figsize = (10,8))\nsns.boxplot(y = df['num_sold'], x = df['country'], hue = df['store'] )","94babfef":"df['product'].value_counts()","f4ac41a9":"fig = plt.figure(figsize = (10,8))\nsns.boxplot(y = df['num_sold'], x = df['country'], hue = df['product'] )","00ce4389":"fig = plt.figure(figsize = (10,5))\nsns.boxplot(y = df['num_sold'], x = df['store'], hue = df['product'] )","1473f074":"df['date'].dtype","0f75ac5e":"# Date time conversion\ndf['date'] = pd.to_datetime(df['date'])","51c051c5":"df['day'] = df['date'].dt.day\ndf['month'] = df['date'].dt.month\ndf['year'] = df['date'].dt.year\ndf['weekday'] = df['date'].dt.dayofweek\ndf['quarter'] = df['date'].dt.quarter\ndf['yearday'] = df['date'].dt.dayofyear","4ace3c07":"df.head(-10)","31bfef09":"fig = plt.figure(figsize = (15,7))\nsns.boxplot(y = df['num_sold'], x = df['weekday'])\nplt.show()","1b1d3042":"fig = plt.figure(figsize = (18,8))\nsns.boxplot(y = df['num_sold'], x = df['month'], hue = df['country'])\nplt.show()","639e66f3":"# fig = plt.figure(figsize = (20,5))\n# sns.lineplot(x = df['date'], y = df['num_sold'], hue = df['country'])\n# plt.show()","296410dc":"df['num_sold'].groupby(df['country']).mean()","cd357e19":"# fig = plt.figure(figsize = (20,5))\n# sns.lineplot(x = df['date'], y = df['num_sold'], hue = df['store'])\n# plt.show()","4b6627ef":"fig = plt.figure(figsize = (15,8))\nsns.boxplot(y = df['num_sold'], x = df['year'], hue = df['country'])\nplt.show()","548cb995":"df['num_sold'].var()","49c00e95":"# Variation too high, Log transformation on num_sold\n# df['num_sold'] = np.log1p(df['num_sold'])","e54600d6":"from scipy.stats import boxcox\nout = boxcox(df['num_sold'])\ndf['num_sold'] = out[0]\nlam = out[1]","3ee0b73e":"sns.histplot(df['num_sold'], kde = True)","7237eb05":"# Outliers have been removed and var, skew under limits\nsns.boxplot(df['num_sold'])\nprint(df['num_sold'].var())\ndf['num_sold'].skew()","718bf258":"df.head()","0ace2d30":"# Using Holidays data \nholiday = pd.read_csv(\"..\/input\/public-and-unofficial-holidays-nor-fin-swe-201519\/holidays.csv\")\nholiday","ea379aef":"df['holiday'] = 0\nfin_holiday = holiday.loc[holiday.country == 'Finland']\nswe_holiday = holiday.loc[holiday.country == 'Sweden']\nnor_holiday = holiday.loc[holiday.country == 'Norway']\ndf['fin holiday'] = df.date.isin(fin_holiday.date).astype(int)\ndf['swe holiday'] = df.date.isin(swe_holiday.date).astype(int)\ndf['nor holiday'] = df.date.isin(nor_holiday.date).astype(int)","db89d9ec":"df.head()","1dff16a2":"df.loc[df.country == 'Finland', 'holiday'] = df.loc[df.country == 'Finland', 'fin holiday']\ndf.loc[df.country == 'Sweden', 'holiday'] = df.loc[df.country == 'Sweden', 'swe holiday']\ndf.loc[df.country == 'Norway', 'holiday'] = df.loc[df.country == 'Norway', 'nor holiday']","ce93836a":"# df[(df['holiday']==1) | (df['weekday'] == 5) | (df['weekday'] == 6)]['holiday'] = 1","6303979e":"df.head()","a306db02":"# Using Per capita GDP as well \ngdpc = pd.read_csv(\"..\/input\/gdp-per-capita-finland-norway-sweden-201519\/GDP_per_capita_2015_to_2019_Finland_Norway_Sweden.csv\")\ngdpc","c13917da":"# Joining the data\ndf['gdpc']=0\nfor i in range(df['year'].shape[0]):\n    df['gdpc'].iloc[i] = gdpc[gdpc['year'] == df['year'].iloc[i]][df['country'].iloc[i]]","d65b79ad":"df.head()","6acdcc01":"# Checking seasonality using FFT\n\nfrom scipy.fftpack import fft\nimport numpy as np\nimport matplotlib.pyplot as plt\nfft = fft((df['num_sold'] - df['num_sold'].mean()).values)\nplt.plot(np.abs(fft))","ee40be37":"df.columns","006db413":"import math\ndef fourier(df):\n    dayofyear = df.date.dt.dayofyear\n    for product in ['Kaggle Mug', 'Kaggle Hat']:\n        df[product] = df['product'] == product\n    \n    # The three products have different seasonal patterns\n    dayofyear = df.date.dt.dayofyear\n    for k in range(1, 2):\n        df[f'sin{k}'] = np.sin(dayofyear \/ 365 * 2 * math.pi * k)\n        df[f'cos{k}'] = np.cos(dayofyear \/ 365 * 2 * math.pi * k)\n        df[f'mug_sin{k}'] = df[f'sin{k}'] * df['Kaggle Mug']\n        df[f'mug_cos{k}'] = df[f'cos{k}'] * df['Kaggle Mug']\n        df[f'hat_sin{k}'] = df[f'sin{k}'] * df['Kaggle Hat']\n        df[f'hat_cos{k}'] = df[f'cos{k}'] * df['Kaggle Hat']\n        df=df.drop([f'sin{k}', f'cos{k}'], axis=1)\n    \n    # drop temporary one hot encoding\n    df=df.drop(['Kaggle Mug', 'Kaggle Hat'], axis=1)\n    \n    return df\ndf = fourier(df)","b72ee19e":"def get_interactions(df):\n    df['KR_Sweden_Mug']=(df.country=='Sweden')*(df['product']=='Kaggle Mug')*(df.store=='KaggleRama')\n    df['KR_Sweden_Hat']=(df.country=='Sweden')*(df['product']=='Kaggle Hat')*(df.store=='KaggleRama')\n    df['KR_Sweden_Sticker']=(df.country=='Sweden')*(df['product']=='Kaggle Sticker')*(df.store=='KaggleRama')\n    df['KR_Norway_Mug']=(df.country=='Norway')*(df['product']=='Kaggle Mug')*(df.store=='KaggleRama')\n    df['KR_Norway_Hat']=(df.country=='Norway')*(df['product']=='Kaggle Hat')*(df.store=='KaggleRama')\n    df['KR_Norway_Sticker']=(df.country=='Norway')*(df['product']=='Kaggle Sticker')*(df.store=='KaggleRama')\n    df['KR_Finland_Mug']=(df.country=='Finland')*(df['product']=='Kaggle Mug')*(df.store=='KaggleRama')\n    df['KR_Finland_Hat']=(df.country=='Finland')*(df['product']=='Kaggle Hat')*(df.store=='KaggleRama')\n    df['KR_Finland_Sticker']=(df.country=='Finland')*(df['product']=='Kaggle Sticker')*(df.store=='KaggleRama')\n    \n    df['KM_Sweden_Mug']=(df.country=='Sweden')*(df['product']=='Kaggle Mug')*(df.store=='KaggleMart')\n    df['KM_Sweden_Hat']=(df.country=='Sweden')*(df['product']=='Kaggle Hat')*(df.store=='KaggleMart')\n    df['KM_Sweden_Sticker']=(df.country=='Sweden')*(df['product']=='Kaggle Sticker')*(df.store=='KaggleMart')\n    df['KM_Norway_Mug']=(df.country=='Norway')*(df['product']=='Kaggle Mug')*(df.store=='KaggleMart')\n    df['KM_Norway_Hat']=(df.country=='Norway')*(df['product']=='Kaggle Hat')*(df.store=='KaggleMart')\n    df['KM_Norway_Sticker']=(df.country=='Norway')*(df['product']=='Kaggle Sticker')*(df.store=='KaggleMart')\n    df['KM_Finland_Mug']=(df.country=='Finland')*(df['product']=='Kaggle Mug')*(df.store=='KaggleMart')\n    df['KM_Finland_Hat']=(df.country=='Finland')*(df['product']=='Kaggle Hat')*(df.store=='KaggleMart')\n    df['KM_Finland_Sticker']=(df.country=='Finland')*(df['product']=='Kaggle Sticker')*(df.store=='KaggleMart')\n    \n    return df\ndf = get_interactions(df)","a56b5a13":"# Dropping cols\ndf.drop(['date'], axis = 1, inplace = True)\ndf.head()","20fe260a":"# One hot encoding\ncol = ['country', 'store', 'product']\ndf = pd.get_dummies(df, columns = col, drop_first = True)\ndf.head()","a6a263a8":"# Checking correlations\nsns.heatmap(df[['num_sold', 'gdpc']].corr(), annot = True)","f1f544f6":"# scaling numeric features\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\ndf[['year','gdpc']] = sc.fit_transform(df[['year','gdpc']])","3a45d301":"y = df.pop('num_sold')\nX = df","88bf06d9":"X.head()","6d9f17f2":"X.columns","2aeb2866":"y.head()","0102893c":"from lightgbm import LGBMRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom catboost import CatBoostRegressor","cb8390d7":"# from sklearn.model_selection import TimeSeriesSplit\n\n# folds = TimeSeriesSplit(n_splits=5)\n","aa4133da":"# # Parameter grid\n# grid = {'iterations': [2000],\n#         'learning_rate': [0.05]\n        \n#         }\n\n# # LGBMRegressor model\n# model = CatBoostRegressor(  bootstrap_type='Bayesian',\n#                             boosting_type='Plain',\n#                             loss_function='MAE',\n#                             eval_metric='SMAPE',\n#                             l2_leaf_reg = 5,\n\n#                           verbose = 1000\n# #                           plot = True\n                          \n#                             )\n\n# # Grid Search with n-fold cross validation\n# grid_model1 = GridSearchCV(model,grid,cv=folds)\n\n# # Train classifier with optimal parameters\n# grid_model1.fit(X,y)\n\n# print(\"The best parameters across searched params:\\n\",grid_model1.best_params_)\n# print(\"The best score across searched params:\\n\",grid_model1.best_score_) #MAE","a595aa3c":"X.shape","d67d62f5":"model = CatBoostRegressor(iterations=5000,\n                            learning_rate=0.04,\n                            bootstrap_type='Bayesian',\n                            boosting_type='Plain',\n                            loss_function='MAE',\n                            l2_leaf_reg = 5, # Added as Regularization\n                            eval_metric='SMAPE',\n#                           plot = True\n#                           use_best_model = True\n                            )","614429aa":" model.fit(\n        X, y, \n        early_stopping_rounds=1000,\n        verbose=1000\n    )","db0f5d34":"model.get_feature_importance(prettified=True)","2dceb6a9":"yp = model.predict(X)","a392d053":"y.plot(figsize =(25, 8))\npd.Series(yp).plot(figsize = (25, 8), alpha=0.5)","1364dd88":"# SMAPE\ndef smape(yp, y):\n    return round(np.mean(np.abs(yp - y) \/ ((np.abs(yp) + np.abs(y))\/2))*100, 5)","39c45add":"from scipy.special import inv_boxcox\ny = inv_boxcox(y, lam)\nyp = inv_boxcox(yp, lam)","f907374e":"# sns.scatterplot(np.expm1(y),np.expm1(yp))\nsns.scatterplot(y,yp)","9013b93b":"# sns.distplot(np.expm1(y-yp))\nsns.distplot(y-yp)","2018f9af":"df_test = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv', index_col = 'row_id')\ndf_test.head()","1926220d":"df_test['date'] = pd.to_datetime(df_test['date'])\ndf_test['day'] = df_test['date'].dt.day\ndf_test['month'] = df_test['date'].dt.month\ndf_test['year'] = df_test['date'].dt.year\ndf_test['weekday'] = df_test['date'].dt.dayofweek\ndf_test['quarter'] = df_test['date'].dt.quarter\ndf_test['yearday'] = df_test['date'].dt.dayofyear","8ffb0e2a":"holiday.head()","90a90358":"df_test['holiday'] = 0\nfin_holiday = holiday.loc[holiday.country == 'Finland']\nswe_holiday = holiday.loc[holiday.country == 'Sweden']\nnor_holiday = holiday.loc[holiday.country == 'Norway']\ndf_test['fin holiday'] = df_test.date.isin(fin_holiday.date).astype(int)\ndf_test['swe holiday'] = df_test.date.isin(swe_holiday.date).astype(int)\ndf_test['nor holiday'] = df_test.date.isin(nor_holiday.date).astype(int)\ndf_test.loc[df_test.country == 'Finland', 'holiday'] = df_test.loc[df_test.country == 'Finland', 'fin holiday']\ndf_test.loc[df_test.country == 'Sweden', 'holiday'] = df_test.loc[df_test.country == 'Sweden', 'swe holiday']\ndf_test.loc[df_test.country == 'Norway', 'holiday'] = df_test.loc[df_test.country == 'Norway', 'nor holiday']\n","4a163ac0":"# df_test[(df_test['holiday']==1) | (df_test['weekday'] == 5) | (df_test['weekday'] == 6)]['holiday'] = 1","2fca7785":"df_test.head()","5d2f619c":"df_test['gdpc']=0\nfor i in range(df_test['year'].shape[0]):\n    df_test['gdpc'].iloc[i] = gdpc[gdpc['year'] == df_test['year'].iloc[i]][df_test['country'].iloc[i]]","dae43f15":"df_test[['year','gdpc']] = sc.transform(df_test[['year', 'gdpc']])","2f9b5f98":"df_test = fourier(df_test)","6e1c18ca":"df_test = get_interactions(df_test)","7d4b7b07":"df_test = pd.get_dummies(df_test, columns = col, drop_first = True)","6711a7ff":"df_test.drop(['date'], axis = 1, inplace = True)\ndf_test.head()","19146437":"df_test.columns","a182f341":"y_pred = model.predict(df_test)","74728639":"df_test.shape","76661980":"output = np.ceil(inv_boxcox(y_pred, lam))","af9d2bfe":"data1 = pd.DataFrame({'row_id': df_test.index,\n                       'num_sold': output})","f51b0803":"data1.head()","6cb35082":"data1.to_csv('submission.csv', index = False)","f743f3fb":"## EDA","baa99696":"## Modeling ","f7ab43e4":"### Slow increase in selling no can be seen year after year.","5b1ea425":"### Norway has the highest num sold for both the stores.\n### Finland has the lowest sold numbers\n### KaggleRama store has sold higher number of products in each country","39090d2e":"### Increase in the selling numbers can be seen on weekends (Day 5 and Day 6)","7978769b":"## Data Cleaning and feature engineering","e62bf20c":"### January, April and December saw increase in selling numbers and kaggle hat was leading the way.\n### Reason could be festive seasons and national holidays. ","bbe85f1c":"### Norway has the highest num sold for all the products.\n### Finland has the lowest num sold\n### Kaggle hat is sold most in all the countries.","8470c7d8":"### Kaggle hat is most sold in both the stores and Kaggle Sticker has the least selling numbers."}}