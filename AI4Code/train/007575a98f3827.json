{"cell_type":{"1aa185dc":"code","b479000f":"code","fb4aaf0b":"code","023b7179":"code","26dc4277":"code","57f6a97e":"code","bf720d00":"code","8ead914e":"code","0d07a0b4":"code","59957336":"code","1ba4a84d":"code","ce5a8a6c":"code","071a99e4":"code","ba0e35c0":"code","a7e8a57e":"code","6fd5ad7a":"code","c33a392e":"code","84cf5973":"code","93f679ab":"code","d7c45290":"code","efeafcb9":"code","7c2b65e3":"code","fddaa507":"code","aaa6f84a":"code","f35516dc":"code","ac194590":"markdown"},"source":{"1aa185dc":"# Install the fastai v2 dataset\n\n!pip uninstall fastai -y\n!pip install \/kaggle\/input\/fast-v2-offline\/dataclasses-0.6-py3-none-any.whl\n!pip install \/kaggle\/input\/fast-v2-offline\/torch-1.6.0-cp37-cp37m-manylinux1_x86_64.whl\n!pip install \/kaggle\/input\/fast-v2-offline\/torchvision-0.7.0-cp37-cp37m-manylinux1_x86_64.whl\n!pip install \/kaggle\/input\/fast-v2-offline\/fastcore-1.0.1-py3-none-any.whl\n!pip install \/kaggle\/input\/fast-v2-offline\/fastai-2.0.8-py3-none-any.whl\n\nfrom fastai.tabular.all import *\n\nimport numpy as np\nimport pandas as pd","b479000f":"train = pd.read_json('..\/input\/stanford-covid-vaccine\/train.json',lines=True)\n\ntest = pd.read_json('..\/input\/stanford-covid-vaccine\/test.json', lines=True)\nsubmission = pd.read_csv('\/kaggle\/input\/stanford-covid-vaccine\/sample_submission.csv')\n\n# test_x = pd.read_json('..\/input\/stanford-covid-vaccine\/test.json', lines=True)\n#train_y = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')","fb4aaf0b":"train_data = []\nfor mol_id in train['id'].unique():\n    sample_data = train.loc[train['id'] == mol_id]\n    sample_seq_length = sample_data.seq_length.values[0]\n    \n    for i in range(68):\n        sample_dict = {'id' : sample_data['id'].values[0],\n                       'id_seqpos' : sample_data['id'].values[0] + '_' + str(i),\n                       'sequence' : sample_data['sequence'].values[0][i],\n                       'structure' : sample_data['structure'].values[0][i],\n                       'predicted_loop_type' : sample_data['predicted_loop_type'].values[0][i],\n                       'reactivity' : sample_data['reactivity'].values[0][i],\n                       'reactivity_error' : sample_data['reactivity_error'].values[0][i],\n                       'deg_Mg_pH10' : sample_data['deg_Mg_pH10'].values[0][i],\n                       'deg_error_Mg_pH10' : sample_data['deg_error_Mg_pH10'].values[0][i],\n                       'deg_pH10' : sample_data['deg_pH10'].values[0][i],\n                       'deg_error_pH10' : sample_data['deg_error_pH10'].values[0][i],\n                       'deg_Mg_50C' : sample_data['deg_Mg_50C'].values[0][i],\n                       'deg_error_Mg_50C' : sample_data['deg_error_Mg_50C'].values[0][i],\n                       'deg_50C' : sample_data['deg_50C'].values[0][i],\n                       'deg_error_50C' : sample_data['deg_error_50C'].values[0][i]}\n        \n        \n        shifts = [1,2,3,4,5]\n        shift_cols = ['sequence', 'structure', 'predicted_loop_type']\n        for shift,col in itertools.product(shifts, shift_cols):\n            if i - shift >= 0:\n                sample_dict['b'+str(shift)+'_'+col] = sample_data[col].values[0][i-shift]\n            else:\n                sample_dict['b'+str(shift)+'_'+col] = -1\n            \n            if i + shift <= sample_seq_length - 1:\n                sample_dict['a'+str(shift)+'_'+col] = sample_data[col].values[0][i+shift]\n            else:\n                sample_dict['a'+str(shift)+'_'+col] = -1\n        \n        \n        train_data.append(sample_dict)\ntrain_data = pd.DataFrame(train_data)\ntrain_data.head()","023b7179":"test_data = []\nfor mol_id in test['id'].unique():\n    sample_data = test.loc[test['id'] == mol_id]\n    sample_seq_length = sample_data.seq_length.values[0]\n    for i in range(sample_seq_length):\n        sample_dict = {'id' : sample_data['id'].values[0],\n                       'id_seqpos' : sample_data['id'].values[0] + '_' + str(i),\n                       'sequence' : sample_data['sequence'].values[0][i],\n                       'structure' : sample_data['structure'].values[0][i],\n                       'predicted_loop_type' : sample_data['predicted_loop_type'].values[0][i]}\n        \n        shifts = [1,2,3,4,5]\n        shift_cols = ['sequence', 'structure', 'predicted_loop_type']\n        for shift,col in itertools.product(shifts, shift_cols):\n            if i - shift >= 0:\n                sample_dict['b'+str(shift)+'_'+col] = sample_data[col].values[0][i-shift]\n            else:\n                sample_dict['b'+str(shift)+'_'+col] = -1\n            \n            if i + shift <= sample_seq_length - 1:\n                sample_dict['a'+str(shift)+'_'+col] = sample_data[col].values[0][i+shift]\n            else:\n                sample_dict['a'+str(shift)+'_'+col] = -1\n        \n        test_data.append(sample_dict)\ntest_data = pd.DataFrame(test_data)\ntest_data.head()","26dc4277":"# label_encoding\nsequence_encmap = {'A': 0, 'G' : 1, 'C' : 2, 'U' : 3}\nstructure_encmap = {'.' : 0, '(' : 1, ')' : 2}\nlooptype_encmap = {'S':0, 'E':1, 'H':2, 'I':3, 'X':4, 'M':5, 'B':6}\n\nenc_targets = ['sequence', 'structure', 'predicted_loop_type']\nenc_maps = [sequence_encmap, structure_encmap, looptype_encmap]\n\nfor t,m in zip(enc_targets, enc_maps):\n    for c in [c for c in train_data.columns if t in c]:\n        train_data[c] = train_data[c].replace(m)\n        test_data[c] = test_data[c].replace(m)","57f6a97e":"not_use_cols = ['id', 'id_seqpos']\nfeatures = [c for c in test_data.columns if c not in not_use_cols]\ntargets = ['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']","bf720d00":"cat_names = features\ncont_names = []","8ead914e":"# cat_names = ['cp_type', 'cp_time', 'cp_dose']\n# cont_names = [c for c in train_x.columns if c not in cat_names and c != 'sig_id']\n# y_names = [c for c in train_y.columns if c != 'sig_id']","0d07a0b4":"y_names = ['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']","59957336":"splits = RandomSplitter(valid_pct=0.2)(range_of(train_data))\nprocs = [Categorify, Normalize]\ntab_pan = TabularPandas(train_data, procs=procs, cat_names=cat_names,\n                        cont_names=cont_names, y_names=y_names, splits=splits)","1ba4a84d":"dls = tab_pan.dataloaders(bs=4096)","ce5a8a6c":"learn = tabular_learner(dls, layers=[1024, 512, 512, 256], loss_func=MSELossFlat())","071a99e4":"learn.lr_find()","ba0e35c0":"lr = 3e-3\nlearn.fit_one_cycle(10, slice(lr\/(2.6**4),lr))#, moms=(0.8,0.7))","a7e8a57e":"# lr = 1e-3\n# learn.fit_one_cycle(5, slice(lr\/(2.6**4),lr))\n# learn.unfreeze()","6fd5ad7a":"# lr = 1e-4\n# learn.fit_one_cycle(10, slice(lr\/(2.6**4),lr))","c33a392e":"\n# learn.fit_one_cycle(20, slice(1e-5, 1e-4))","84cf5973":"# learn.fit_one_cycle(25, slice(1e-5, 1e-4))","93f679ab":"# learn.fit_one_cycle(30, slice(5e-4, 5e-3))","d7c45290":"test_dl = learn.dls.test_dl(test_data)\nsub = learn.get_preds(dl=test_dl)","efeafcb9":"sub[0].shape","7c2b65e3":"submission.head()","fddaa507":"submission[[c for c in submission.columns if c != 'id_seqpos']] = sub[0]","aaa6f84a":"submission","f35516dc":"submission.to_csv('submission.csv', index=False)","ac194590":"Reference from https:\/\/www.kaggle.com\/t88take\/openvaccine-simple-lgb-baseline\/notebook,\nhttps:\/\/www.kaggle.com\/suresk\/fastai2-starter?scriptVersionId=42023177"}}