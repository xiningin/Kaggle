{"cell_type":{"75393efe":"code","3c03216c":"code","e48cf880":"code","e4cca7d8":"code","ca792ec1":"code","dc609ccf":"code","f0d7d7ee":"code","05fdd9ae":"code","69e44c30":"code","6c2655fd":"code","9d79ed00":"code","90215867":"code","79517e69":"code","78750930":"code","d7dff966":"code","0663098f":"code","7c862db3":"code","c19e3c75":"code","660cf4f7":"code","b81b64ae":"code","6ff2d9ab":"markdown","a0af7c87":"markdown","91faccea":"markdown","cd7eee86":"markdown","03c7e332":"markdown","89eaf9af":"markdown","b96dacfd":"markdown","feb2327c":"markdown","1e605816":"markdown","fc730d73":"markdown","911e812e":"markdown","477f955f":"markdown","be854927":"markdown","9b57243d":"markdown","a36e324b":"markdown","98116b1c":"markdown"},"source":{"75393efe":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\n\nimport os\nimport random\nimport keras\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom keras.layers import Dense, Flatten, AveragePooling2D, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom keras.applications.vgg16 import VGG16\nfrom keras.models import Model","3c03216c":"c = '..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID'\nn = '..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Normal'\np = '..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Viral Pneumonia'","e48cf880":"random.seed(42)\nfilenames = os.listdir(c) + random.sample(os.listdir(n), 5000) + os.listdir(p)","e4cca7d8":"categories = []\nfor filename in filenames:\n    category = filename.split('-')[0]\n    if category == 'COVID':\n        categories.append(str(2))\n    elif category == 'Viral Pneumonia':\n        categories.append(str(1))\n    else:\n        categories.append(str(0))","ca792ec1":"for i in range(len(filenames)):\n    if 'COVID' in filenames[i]:\n        filenames[i] = os.path.join(c, filenames[i])\n    elif 'Viral Pneumonia' in filenames[i]:\n        filenames[i] = os.path.join(p, filenames[i])\n    else:\n        filenames[i] = os.path.join(n, filenames[i])\n    \n    \ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})","dc609ccf":"df.head()","f0d7d7ee":"plt.figure(figsize=(12,3))\nsplot = sns.countplot(data = df.sort_values(by='category'), y ='category', palette='cool', saturation=0.9)\nplt.bar_label(container=splot.containers[0], \n              labels=['Normal', 'Viral Pneumonia', 'COVID'], \n              label_type='center', size=15, color='w')\nplt.show()","05fdd9ae":"sample = random.choice(df['filename'])\nimage = load_img(sample)\nplt.imshow(image)\nplt.show()","69e44c30":"train_data, test_valid_data = train_test_split(df, test_size=0.2, random_state = 42, shuffle=True, stratify=df['category'])\ntrain_data = train_data.reset_index(drop=True)\ntest_valid_data = test_valid_data.reset_index(drop=True)","6c2655fd":"test_data, valid_data = train_test_split(test_valid_data, test_size=0.5, random_state = 42,\n                                         shuffle=True, stratify=test_valid_data['category'])\ntest_data = test_data.reset_index(drop=True)\nvalid_data = valid_data.reset_index(drop=True)","9d79ed00":"train_data_gen = ImageDataGenerator(\n    rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)","90215867":"train_generator = train_data_gen.flow_from_dataframe(\n    train_data, \n    x_col='filename',\n    y_col='category',\n    target_size=(224,224),\n    class_mode='categorical',\n    batch_size=15\n)","79517e69":"valid_data_gen = ImageDataGenerator(rescale=1.\/255)\n\nvalid_generator = valid_data_gen.flow_from_dataframe(\n    valid_data, \n    x_col='filename',\n    y_col='category',\n    target_size=(224,224),\n    class_mode='categorical',\n    batch_size=15\n)","78750930":"baseModel = VGG16(input_shape=(224,224,3), weights='imagenet', include_top=False)\n\nfor layer in baseModel.layers:\n    layer.trainable = False\n\nheadModel = baseModel.output\nheadModel = AveragePooling2D()(headModel)\nheadModel = Flatten()(headModel)\nheadModel = Dense(128, activation=\"relu\")(headModel)\nheadModel = Dropout(0.2)(headModel)\nheadModel = Dense(3, activation='softmax')(headModel)\n\nmodel = Model(inputs=baseModel.input, outputs=headModel)","d7dff966":"model.summary()","0663098f":"opt = Adam(learning_rate=0.0001)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])","7c862db3":"epochs = 50\nhistory = model.fit_generator(train_generator,\n                              validation_data=valid_generator, verbose=1, epochs=epochs)","c19e3c75":"model.save('Covid.h5')","660cf4f7":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))\nax1.plot(history.history['loss'], color='b', label=\"Training loss\")\nax1.plot(history.history['val_loss'], color='r', label=\"validation loss\")\nax1.set_xticks(np.arange(1, epochs, 1))\nax1.set_yticks(np.arange(0, 1, 0.1))\n\nax2.plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax2.plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nax2.set_xticks(np.arange(1, epochs, 1))\n\nlegend = plt.legend(loc='best', shadow=True)\nplt.tight_layout()\nplt.show()","b81b64ae":"sample = random.choice(test_data['filename'])\n\n\ncategory = sample.split('-')[0]\ntrue = ''\nif category == 'COVID':\n    true = 'COVID'\nelif category == 'Viral Pneumonia':\n    true = 'Viral Pneumonia'\nelse:\n    true = 'Normal'\n\nprint(f'True value is : {true}')\n    \nimage = load_img(sample, target_size=(224, 224))\nimg = img_to_array(image)\nimg = img.reshape((1, 224, 224, 3))\n\nresult = model.predict(img)\nresult = np.argmax(result, axis=-1)\nprint('Prediction is:')\nif result == 0:\n    print(\"Normal\")\nelif result == 1:\n    print(\"Viral Pneumonia\")\nelse:\n    print(\"COVID +\")\n    \nplt.imshow(image)","6ff2d9ab":"## Model Testing","a0af7c87":"## Importing Required Libraries","91faccea":"![](https:\/\/policyoptions.irpp.org\/wp-content\/uploads\/sites\/2\/2020\/07\/Facebook-WHO%E2%80%99s-COVID-19-Technology-Access-Pool-deserves-Canada%E2%80%99s-support.jpg)","cd7eee86":"### Classes\n* 0 -> Normal\n* 1 -> Viral Pneumonia\n* 2 -> COVID","03c7e332":"## Exploratory Data Analysis","89eaf9af":"## Model Training - VGG16","b96dacfd":"#### Optimizer - Adam","feb2327c":"## Plotting \n* Training & Validation Loss\n* Training & Validation Loss","1e605816":"## Data Augmentation","fc730d73":"## Data Visualization","911e812e":"#### Model Summary","477f955f":"#### Model Architecture","be854927":"## Splitting Train, Validation & Test Data","9b57243d":"## Converting to Dataframe","a36e324b":"## Saving Model","98116b1c":"## Extracting Files"}}