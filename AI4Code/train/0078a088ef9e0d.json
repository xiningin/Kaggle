{"cell_type":{"ab823455":"code","43d73073":"code","7b5f133b":"code","9fe31977":"code","75221b6c":"code","c476b248":"code","874c1af9":"code","c94d60b5":"code","4cc23cee":"code","b50c8544":"code","06e3364d":"code","15728fad":"code","a04b84b0":"code","e5e28171":"code","c6fe5062":"code","621b8d05":"code","9660f62c":"code","8ce2e14f":"code","c7f4b542":"code","8ff3aa8d":"code","196fb73e":"code","b55fd742":"markdown","8b26ea5a":"markdown","f6f09c8a":"markdown","819b5b6d":"markdown","797acf81":"markdown","67a4a298":"markdown","0414ddfd":"markdown","4201dcc1":"markdown","ec2cd20a":"markdown","c9856532":"markdown","fdbb324c":"markdown","db7f4f2a":"markdown","a2a0bfda":"markdown","674eb39a":"markdown","b6ef7201":"markdown","b244822e":"markdown","121a872e":"markdown","751bc505":"markdown","4bc2c76a":"markdown","9901b603":"markdown","7e38f1d8":"markdown","e7d926a2":"markdown","c1082a07":"markdown","c1096b48":"markdown"},"source":{"ab823455":"import os\nimport numpy as np\nimport pandas as pd\n\ndata_path = '\/kaggle\/input\/petfinder-pawpularity-score\/{:s}'","43d73073":"train_metadata = pd.read_csv(data_path.format(\"train.csv\")).set_index('Id')","7b5f133b":"import torch\nimport torchvision\n\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\n\nfrom torchvision import datasets, models, transforms\nfrom torchvision.datasets import ImageFolder\n\nfrom torch.utils.data import DataLoader,Dataset,ConcatDataset\nfrom torchvision.utils import make_grid\n\nimport time\nimport os\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm\nprint(\"PyTorch Version: \",torch.__version__)\nprint(\"Torchvision Version: \",torchvision.__version__)","9fe31977":"BATCH_SIZE=32\npath='\/kaggle\/input\/petfinder-pawpularity-score\/train'\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","75221b6c":"transfrom = transforms.Compose([\n        transforms.Resize(256),\n        transforms.CenterCrop(240),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])","c476b248":"from PIL import Image\nfrom torchvision.datasets import VisionDataset\n\nclass PawpularityDataset(VisionDataset):\n    def __init__(self, root_dir, df, transforms=None):\n        self.root_dir = root_dir\n        self.df = df\n        self.file_names = df.index\n        self.targets = df['Pawpularity'].values\n        self.meta = df.drop(columns=['Pawpularity']).values\n        self.transforms = transforms\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, index):\n        img_path = self.root_dir + '\/' + self.file_names[index] + '.jpg'\n        with open(img_path, 'rb') as f:\n            img = Image.open(f)\n            img = img.convert('RGB')\n        meta = self.meta[index, :]\n        target = self.targets[index]\n        \n        if self.transforms:\n            img = self.transforms(img)\n            \n        return img, meta, target","874c1af9":"train_dataset = PawpularityDataset(path, train_metadata, transforms=transfrom)","c94d60b5":"model = torch.jit.load('..\/input\/effcient\/eff_b1.pth')\nmodel = model.to(device)","4cc23cee":"# model = torch.load('\/kaggle\/input\/effinetb0\/EfficientNet_BaseModel')\n# for param in model.parameters():\n#     param.requires_grad = False\n# model.classifier = nn.Identity()\n# model = model.to(device)","b50c8544":"from tqdm import tqdm\n\ntrain_loader=DataLoader(train_dataset, batch_size=BATCH_SIZE,shuffle=False)\nmodel.eval()\n\nfeature, label = [], []\nfor data in tqdm(train_loader):\n  image, _, score = data[0].to(device), data[1], data[2]\n  feature.append(model(image))\n  label.append(score)\n  ","06e3364d":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import Ridge\n\nclass TradModelEstimator(object):\n    '''\n    Grid search for different models.\n    '''\n    def __init__(self, model=Ridge, param={}) -> None:\n        super().__init__()\n        fixed_param = {}\n        search_grid = {}\n        for key, value in param.items():\n            if len(value) > 1:\n                search_grid[key] = value\n            else:\n                fixed_param[key] = value[0]\n        self.Estimator = model(**fixed_param)\n        self.GSCV = GridSearchCV(self.Estimator, param_grid=search_grid,\n                                 n_jobs=-1, verbose=0, cv=5, refit='neg_root_mean_squared_error',\n                                 scoring=['neg_root_mean_squared_error', 'neg_mean_squared_error',\n                                          'neg_mean_absolute_error'])\n\n    def grid_search(self, trainX, trainY) -> any:\n        self.GSCV.fit(trainX, trainY)\n        return self.GSCV.cv_results_\n","15728fad":"SEED = 2021\nPARAM = {\n    'Ridge': {\n        \"alpha\": np.logspace(0, 7, 8),\n        \"random_state\": [SEED],\n        \"tol\": [1e-1]\n    }\n}","a04b84b0":"MODEL = Ridge\nEst = TradModelEstimator(MODEL, PARAM[MODEL.__name__])\n\nfeature = np.hstack([train_metadata.iloc[:, :-1].to_numpy(), torch.vstack(feature).to('cpu')])\nlabel = train_metadata.iloc[:, -1]\n\nfeature = feature[label < 100, :]\nlabel = label[label<100].to_numpy()\n\nprediction = Est.grid_search(feature, label)\nprint('RMSE: {:.6f}'.format(-Est.GSCV.best_score_))","e5e28171":"BATCH_SIZE_test=32\npath_test='\/kaggle\/input\/petfinder-pawpularity-score\/test'\ndevice_test = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","c6fe5062":"class PawpularityTestDataset(VisionDataset):\n    def __init__(self, root_dir, df, transforms=None):\n        self.root_dir = root_dir\n        self.df = df\n        self.file_names = df.index\n        self.transforms = transforms\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, index):\n        img_path = self.root_dir + '\/' + self.file_names[index] + '.jpg'\n        with open(img_path, 'rb') as f:\n            img = Image.open(f)\n            img = img.convert('RGB')\n        \n        if self.transforms:\n            img = self.transforms(img)\n            \n        return img","621b8d05":"test_metadata = pd.read_csv(data_path.format(\"test.csv\")).set_index('Id')","9660f62c":"test_dataset = PawpularityTestDataset(path_test, test_metadata, transforms=transfrom)","8ce2e14f":"test_loader=DataLoader(test_dataset, batch_size=BATCH_SIZE_test,shuffle=False)\nmodel.eval()\n\nfeature_test = []\nfor data in tqdm(test_loader):\n  feature_test.append(model(data.to(device)))","c7f4b542":"y_pred = Est.GSCV.best_estimator_.predict(np.hstack([test_metadata.to_numpy(), torch.vstack(feature_test).to('cpu')]))","8ff3aa8d":"submission = pd.DataFrame({'Id': test_metadata.index, 'Pawpularity': y_pred})","196fb73e":"submission.to_csv(\"submission.csv\", index=False)","b55fd742":"The cross-validation result is shown as below:","8b26ea5a":"To perform the regression, we define a grid search estimator class for all estimators in library `scikit-learn`.","f6f09c8a":"Here we load the test metadata.","819b5b6d":"## 2. Preparation","797acf81":"## 3. Feature Extraction","67a4a298":"Output the result to file.","0414ddfd":"Here we use the simple **ridge regression** model to perform regression.","4201dcc1":"Use the best regressor in cross-validation to generate the predicted Pawpularity score.","ec2cd20a":"Load the pretrained model. Due to the unavailable Internet setting in Kaggle submisson notebook. Here we pre-download the pretrained model from ","c9856532":"Here, we input the training dataset to the model. The output of the model is the feature vectors.\n\n*This cell takes about 3 min to generate all features of the training set.*","fdbb324c":"First, load the PyTorch library.","db7f4f2a":"# Pawpularity Prediction\n\n## Group Name: Noob ","a2a0bfda":"Define the dataset class for model input.","674eb39a":"Here we redefine the dataset class for test set, which doesn't contain the label data.","b6ef7201":"The metadata training set includes 9912 samples, with 12 features and 1 parpularity label in each feature.","b244822e":"Use the pretrained model to generate feature vectors.","121a872e":"Load the training dataset.","751bc505":"Here is the code of downloading the pretrained model.\n\nAfter download the original model. We replace the last layer to `nn.Identity` to obtain the feature vector.","4bc2c76a":"## Generate Result for Test Set","9901b603":"Define the transform to convert the image file to input Tensor for the PyTorch model.","7e38f1d8":"Here we set the global parameters for test set.","e7d926a2":"Set the global parameters.","c1082a07":"## 1. Load Metadata","c1096b48":"Load the test dataset."}}