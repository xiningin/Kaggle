{"cell_type":{"6208f83b":"code","10bc18c4":"code","e4b80cba":"code","26ffed1b":"code","516e99b8":"code","62b8e4af":"code","fc7e4b30":"code","394ddea2":"code","e1b93046":"markdown"},"source":{"6208f83b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#supress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","10bc18c4":"import os\n\ndirectories = ['..\/input\/100-bird-species\/birds_rev2\/test',\n                                '..\/input\/100-bird-species\/birds_rev2\/train',\n                                '..\/input\/100-bird-species\/birds_rev2\/valid']\nfor dir in directories:\n    label = []\n    path = []\n    for dirname, _,filenames in os.walk(dir):\n        for filename in filenames:\n            label.append(os.path.split(dirname)[1])\n            path.append(os.path.join(dirname,filename))\n    if dir == directories[0]:\n        df_test = pd.DataFrame(columns=['path','label'])\n        df_test['path']=path\n        df_test['label']=label\n    elif dir == directories[1]:\n        df_train = pd.DataFrame(columns=['path','label'])\n        df_train['path']=path\n        df_train['label']=label        \n    elif dir == directories[2]:\n        df_valid = pd.DataFrame(columns=['path','label'])\n        df_valid['path']=path\n        df_valid['label']=label","e4b80cba":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.preprocessing.image import ImageDataGenerator","26ffed1b":"image_size = (224,224)\nimage_shape=(224,224,3)","516e99b8":"BS = 32\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   rotation_range=10,\n                                   width_shift_range=0.1,\n                                   height_shift_range=0.1,\n                                   shear_range=0.1,\n                                   zoom_range=0.1,\n                                   horizontal_flip=True,\n                                   fill_mode='nearest')\n\nvalid_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    dataframe = df_train, x_col='path', y_col='label',\n    target_size= image_size,\n    batch_size=BS,\n    class_mode='categorical',\n    color_mode='rgb',\n    shuffle=True)\n\nvalid_generator = valid_datagen.flow_from_dataframe(\n    dataframe = df_valid, x_col='path', y_col='label',\n    target_size= image_size,\n    batch_size=BS,\n    class_mode='categorical',\n    color_mode='rgb',\n    shuffle=True)\n\ntest_generator = valid_datagen.flow_from_dataframe(\n    dataframe = df_test, x_col='path', y_col='label',\n    target_size= image_size,\n    batch_size=BS,\n    class_mode='categorical',\n    color_mode='rgb',\n    shuffle=True)\n\nfor _ in range(3):\n    img, label = train_generator.next()\n    plt.imshow(img[0])\n    plt.show()","62b8e4af":"#model\n\nresnet_model=tf.keras.applications.InceptionResNetV2(input_shape=image_shape,\n                                               include_top=False,\n                                               weights='imagenet')\nresnet_model.trainable = False\n\n\nmodel = keras.Sequential([  \n    resnet_model,\n    layers.Flatten(),\n    layers.Dense(units=1950,activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dense(units=275, activation=\"softmax\"),\n])\nmodel.summary()\n\nmodel.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n#fit\n\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nearly_stop = EarlyStopping(monitor='val_loss',patience=10)\n\nhistory = model.fit(\n    train_generator,\n    validation_data=valid_generator,\n    epochs=100,\n    verbose=1,\n    callbacks=[early_stop]\n)\n\nresult=pd.DataFrame(history.history)\nfig, ax=plt.subplots(nrows=1, ncols=2,figsize=(18,6))\nax=ax.flatten()\nax[0].plot(result[['accuracy','val_accuracy']])\nax[0].set_title(\"Accuracy\")\nax[1].plot(result[['loss','val_loss']])\nax[1].set_title(\"Loss\")","fc7e4b30":"model.evaluate(test_generator,use_multiprocessing=True,workers=10)","394ddea2":"model.save('bird_CNN_model')","e1b93046":"# Neural Network"}}