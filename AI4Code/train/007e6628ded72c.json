{"cell_type":{"1947f9f4":"code","34ace434":"code","b3df6c22":"code","bd890937":"code","67b60070":"code","a8b6281d":"markdown","2b3ad9ec":"markdown","5233a431":"markdown","362e1c79":"markdown"},"source":{"1947f9f4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34ace434":"import cv2 as cv\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom matplotlib.patches import Rectangle ","b3df6c22":"plt.figure(figsize=(20, 20))\nplt.title(\"Original\")\nplt.imshow(mpimg.imread('\/kaggle\/input\/pothole\/pothole.jpeg'))\nplt.show()","bd890937":"img = cv.imread('\/kaggle\/input\/pothole\/pothole.jpeg',0)\ntemplate = cv.imread('\/kaggle\/input\/pothole-detection\/pothole_crop.jpeg',0)\n\nplt.imshow(template,cmap = 'gray')\nplt.title('template'), plt.xticks([]), plt.yticks([])\n\nplt.show()","67b60070":"img2 = img.copy()\nw, h = template.shape[::-1]\n\nmethods = ['cv.TM_CCOEFF', 'cv.TM_CCOEFF_NORMED', 'cv.TM_CCORR',\n            'cv.TM_CCORR_NORMED', 'cv.TM_SQDIFF', 'cv.TM_SQDIFF_NORMED']\nplt.figure(figsize=(20, 20))\nplt.imshow(mpimg.imread('\/kaggle\/input\/pothole\/pothole.jpeg'))\nplt.title('Detected Point')\nresult=[]\n\nfor meth in methods:\n    img = img2.copy()\n    method = eval(meth)\n    \n    res = cv.matchTemplate(img,template,method)\n    min_val, max_val, min_loc, max_loc = cv.minMaxLoc(res)\n    \n    if method in [cv.TM_SQDIFF, cv.TM_SQDIFF_NORMED]:\n        top_left = min_loc\n    else:\n        top_left = max_loc\n\n    result+=[(meth,top_left,w,   h)]\n \n    ax = plt.gca()\n    ax.add_patch( Rectangle(top_left, w, h, fc ='none', ec ='g', lw = 4) ) \n\n    \nplt.show()","a8b6281d":"Maka hasil diatas bisa kita lihat kotak berwarna tersebut menunjukkan object pothole yang kita maksudkan, walaupun masih ada object lain disini yang buka object pothole","2b3ad9ec":"**Ketiga** - Kita lakukan proses pencarian object pothole tersebut dengan 6 metode dari OpenCV","5233a431":"**Pertama** - Kita tampilkan terlebih dahulu foto yang ingin kita deteksi**","362e1c79":"**Kedua** - Kita masukkan gambar pothole yang terdapat disana"}}