{"cell_type":{"f5fa6829":"code","00e14c7c":"code","f8bc5b58":"code","65e65452":"code","bc756b06":"code","3b07f247":"code","ac13ed67":"code","9bcf84a9":"code","40af3666":"code","7196be04":"code","9ef8b997":"code","2f5078cc":"code","177f5e36":"code","5f646d91":"code","47e1376c":"code","61319ecf":"code","968edf16":"code","faa1ec98":"code","1bc17cff":"code","d93df292":"code","90ce9553":"code","c3731942":"code","254f5ed8":"code","3767bc26":"code","937f7255":"code","59fd8921":"code","ff50b2d6":"code","880c7050":"code","3dc6b25e":"code","a0733d76":"code","e224175d":"code","f81a8afe":"code","c5ef44dd":"code","a6de1a27":"code","c1973560":"code","e9a38896":"code","6d0cfca3":"code","29d2e325":"code","af3d15a9":"code","3fff810d":"code","59ad897b":"code","175a238f":"code","75ecdff5":"code","623201a3":"code","7cdc8782":"code","96f062c9":"code","250d1889":"code","22921421":"code","c57201f2":"code","fc6d2933":"code","8237c3ac":"code","8f0719b8":"code","31edd42b":"code","d073034b":"code","f3276965":"code","7288407a":"code","2f4746ab":"code","24012075":"code","df660b1c":"code","5dd0757e":"code","191b1952":"code","acaa1ca2":"code","bef0807f":"code","a75e0cf7":"code","a954cab6":"markdown"},"source":{"f5fa6829":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport tensorflow as tf\nfrom tensorflow import keras\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM\n\nfrom tensorflow.keras.callbacks import EarlyStopping","00e14c7c":"dataset_path = '..\/input\/retail-sales-clothing-clothing-accessory-stores\/RSCCASN.csv'","f8bc5b58":"sales_data = pd.read_csv(dataset_path,  parse_dates=True, index_col='DATE')","65e65452":"type(sales_data)","bc756b06":"sales_data.columns","3b07f247":"sales_data.columns = ['Sales']","ac13ed67":"sales_data.columns","9bcf84a9":"print(sales_data.info())","40af3666":"print(sales_data.describe())","7196be04":"sales_data.head()","9ef8b997":"sales_data.tail()","2f5078cc":"sales_data.plot(figsize=(12, 8))","177f5e36":"len(sales_data)","5f646d91":"len(sales_data) - 18    # 1.5 year","47e1376c":"test_size = 18\ntest_index = len(sales_data) - test_size","61319ecf":"test_index","968edf16":"train = sales_data.iloc[:test_index]\ntest = sales_data.iloc[test_index:]","faa1ec98":"train.head()","1bc17cff":"train.tail()","d93df292":"test.head()","90ce9553":"test.tail()","c3731942":"# help(MinMaxScaler)","254f5ed8":"scaler = MinMaxScaler()","3767bc26":"scaler.fit(train)","937f7255":"scaled_train = scaler.transform(train)\nscaled_test = scaler.transform(test)","59fd8921":"scaled_train[:5]","ff50b2d6":"scaled_test[:5]","880c7050":"# help(TimeseriesGenerator)","3dc6b25e":"length = 12","a0733d76":"generator = TimeseriesGenerator(scaled_train, scaled_train, length=length, batch_size=1)","e224175d":"X, y = generator[0]","f81a8afe":"X","c5ef44dd":"y","a6de1a27":"len(X[0])","c1973560":"# help(LSTM)","e9a38896":"n_features = 1","6d0cfca3":"model = Sequential()\nmodel.add(LSTM(100, activation='relu', input_shape=(length, n_features)))\nmodel.add(Dense(1))\n\nmodel.compile(optimizer='adam', loss='mse')","29d2e325":"model.summary()","af3d15a9":"# help(EarlyStopping)","3fff810d":"early_stop = EarlyStopping(monitor='val_loss', patience=2)","59ad897b":"validation_generator = TimeseriesGenerator(scaled_test, scaled_test, length=length, batch_size=1)","175a238f":"model.fit(generator, epochs=20, \n          validation_data=validation_generator,\n          callbacks=[early_stop])","75ecdff5":"losses = pd.DataFrame(model.history.history)","623201a3":"losses.plot()","7cdc8782":"test_predictions = []\n\nfirst_eval_batch = scaled_train[-length:]\ncurrent_batch = first_eval_batch.reshape((1, length, n_features))\n\nfor i in range(len(test)):\n    \n    # get prediction 1 time  stamp ahead \n    current_pred = model.predict(current_batch)[0]\n    \n    # store prediction \n    test_predictions.append(current_pred)\n    \n    # update batch to now include prediction and drop first value \n    current_batch = np.append(current_batch[:, 1:, :], [[current_pred]], axis=1)","96f062c9":"true_prediction = scaler.inverse_transform(test_predictions)","250d1889":"test['Predictions'] = true_prediction","22921421":"test","c57201f2":"test.plot(figsize=(12, 8))","fc6d2933":"full_scaler = MinMaxScaler()\nscaled_full_data = full_scaler.fit_transform(sales_data)","8237c3ac":"length = 12\ngenerator = TimeseriesGenerator(scaled_full_data, scaled_full_data, \n                                length=length, batch_size=1)","8f0719b8":"model = Sequential()\nmodel.add(LSTM(100, activation='relu', input_shape=(length, n_features)))\nmodel.add(Dense(1))\n\nmodel.compile(optimizer='adam', loss='mse')\n\nmodel.fit(generator, epochs=8)","31edd42b":"forecast = []\n# Replace periods with whatever forecast lengt you want \nperiods = 12\n\nfirst_eval_batch = scaled_full_data[-length:]\ncurrent_batch = first_eval_batch.reshape((1, length, n_features))\n\nfor i in range(periods):\n    \n    # get prediction 1 time  stamp ahead \n    current_pred = model.predict(current_batch)[0]\n    \n    # store prediction \n    forecast.append(current_pred)\n    \n    # update batch to now include prediction and drop first value \n    current_batch = np.append(current_batch[:, 1:, :], [[current_pred]], axis=1)","d073034b":"forecast = scaler.inverse_transform(forecast)","f3276965":"sales_data","7288407a":"forecast","2f4746ab":"forecast_index = pd.date_range(start='2019-11-01', periods=periods,\n                              freq='MS')","24012075":"forecast_index","df660b1c":"forecast_data = pd.DataFrame(data=forecast, index=forecast_index, \n                             columns=['Forecast'])","5dd0757e":"forecast_data","191b1952":"forecast_data.plot()","acaa1ca2":"ax = sales_data.plot()\nforecast_data.plot(ax=ax)","bef0807f":"ax = sales_data.plot()\nforecast_data.plot(ax=ax)\nplt.xlim('2018-01-01', '2020-12-01')","a75e0cf7":"model.save('\/kaggle\/working\/RNN-LSTM.h5')","a954cab6":"**Time Series Forecasting**"}}