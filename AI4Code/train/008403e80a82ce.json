{"cell_type":{"4cb357d1":"code","bd9c7e75":"code","0c5c7a8c":"code","1a3b7d0f":"code","59e894c8":"code","d315ba1a":"code","aa479e31":"code","46b4b5f0":"code","4190a376":"code","05c7a46f":"code","662bc801":"code","78a19b00":"code","f5991e8e":"code","da018a55":"code","bdeae1a5":"code","4ba898bd":"code","344a9aca":"code","62fd34a3":"code","f447d915":"code","52c339b4":"code","f524b262":"code","35c2f82d":"code","52f48385":"code","527bb886":"code","27fcfb3a":"code","db66d07a":"code","70a48d62":"code","251fd27d":"code","4afbdcae":"code","ce5e227d":"code","a47f0a42":"code","9e912717":"code","40a98a56":"code","b270e7c7":"code","a6213cff":"code","55049a5b":"code","8d67d484":"code","bc12bfa9":"code","a8d83ddf":"markdown","728e7042":"markdown","41e49162":"markdown","25ad52ba":"markdown","e65be708":"markdown","19803c9c":"markdown","816d865e":"markdown"},"source":{"4cb357d1":"#import library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn import metrics","bd9c7e75":"employee = pd.read_csv('..\/input\/employee-future-prediction\/Employee.csv')","0c5c7a8c":"employee.shape","1a3b7d0f":"employee.head()","59e894c8":"employee.describe()","d315ba1a":"employee.info()","aa479e31":"#heatmap correlation\nplt.figure(figsize = (10,6))\nsns.heatmap(employee.corr(), vmax = 0.9, square = True)\nplt.title(\"Pearson Correlation\")\nplt.show()","46b4b5f0":"#transform data to categorical variable\ndf = pd.DataFrame(employee)\ndf['Education'] = df['Education'].astype('category')\ndf['City'] = df['City'].astype('category')\ndf['Gender'] = df['Gender'].astype('category')\ndf['EverBenched'] = df['EverBenched'].astype('category')\nprint(df.dtypes)","4190a376":"#handling categorical data\ndf['Education'] = df['Education'].cat.codes\ndf['City'] = df['City'].cat.codes\ndf['Gender'] = df['Gender'].cat.codes\ndf['EverBenched'] = df['EverBenched'].cat.codes\ndf.head()","05c7a46f":"#split data\nX = df.drop('LeaveOrNot', axis = 1)\ny = df['LeaveOrNot']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","662bc801":"#Linear Discriminant Analysis\nlda = LinearDiscriminantAnalysis()\n%time lda.fit(X_train, y_train)\nlda.score(X_test, y_test)","78a19b00":"#Gaussian Naive Bayes\nnb = GaussianNB()\n%time nb.fit(X_train, y_train)\nnb.score(X_test, y_test)","f5991e8e":"#Random Forest Classifier\nrf = RandomForestClassifier(random_state = 1, max_features = 'sqrt', n_jobs = 1, verbose = 1)\n%time rf.fit(X_train, y_train)\nrf.score(X_test, y_test)","da018a55":"#Decision Tree Classifier\ndtc = DecisionTreeClassifier(max_depth = 3)\n%time dtc.fit(X_train, y_train)\ndtc.score(X_test, y_test)","bdeae1a5":"#K-Nearest Neighbors\nknn = KNeighborsClassifier(n_neighbors = 5)\n%time knn.fit(X_train, y_train)\nknn.score(X_test, y_test)","4ba898bd":"#Support Vector Machine\nsvm = SVC(kernel = 'linear', gamma = 'auto', C = 5)\n%time svm.fit(X_train, y_train)\nsvm.score(X_test, y_test)","344a9aca":"#prepare models\nmodels = []\nmodels.append(('Linear Discriminant Analysis', LinearDiscriminantAnalysis()))\nmodels.append(('K-Nearest Neighbors', KNeighborsClassifier(n_neighbors = 5)))\nmodels.append(('Decision Tree', DecisionTreeClassifier(max_depth = 3)))\nmodels.append(('Random Forest', RandomForestClassifier(random_state = 1, max_features = 'sqrt', n_jobs = 1, verbose = 1)))\nmodels.append(('Naive Bayes', GaussianNB()))\nmodels.append(('Support Vector Machine', SVC(kernel = 'linear', gamma = 'auto', C = 5)))","62fd34a3":"#evaluate each model in turn\nresults = []\nnames = []\nscoring = 'accuracy'\nfor name, model in models:\n    kfold = KFold(n_splits = 10)\n    cv_results = cross_val_score(model, X, y, cv = kfold, scoring = scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","f447d915":"#boxplot of modelling\nfig = plt.figure(figsize = (10,6))\nfig.suptitle('Comparison of Algorithm')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names, rotation = 45)\nplt.xlabel(\"Algorithm\")\nplt.ylabel(\"Score\")\nplt.show()","52c339b4":"#prediction \ny_pred = rf.predict(X_test)\nprint(y_pred)","f524b262":"#confusion matrix\nmatrix = metrics.confusion_matrix(y_test, y_pred)\nprint(matrix)\n\nplt.figure(figsize = (10,6))\nsns.heatmap(matrix, annot = True, fmt = \".0f\", cmap = 'Blues')\nplt.title(\"Prediction\")\nplt.show()","35c2f82d":"#classification report\nreport = metrics.classification_report(y_test, y_pred)\nprint(report)","52f48385":"#defining of feature\nfeature = pd.Series(rf.feature_importances_, index = X_train.columns).sort_values(ascending = False)\nprint(feature)","527bb886":"#visualize feature\nplt.figure(figsize = (10,6))\nsns.barplot(x = feature, y = feature.index)\nplt.title(\"Feature Importance\")\nplt.xlabel('Score')\nplt.ylabel('Features')\nplt.show()","27fcfb3a":"#group education & leave or not\nedu_leave = employee.groupby(['Education', 'LeaveOrNot']).size().reset_index(name = 'Count')\nprint(edu_leave)","db66d07a":"#visualize education ~ leave or not\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'Education', y = 'Count', hue = 'LeaveOrNot', data = edu_leave)\nplt.title(\"Education ~ Leave or Not\")\nplt.show()","70a48d62":"#group city & leave or not\ncity_leave = employee.groupby(['City', 'LeaveOrNot']).size().reset_index(name = 'Count')\nprint(city_leave)","251fd27d":"#visualize city ~ leave or not\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'City', y = 'Count', hue = 'LeaveOrNot', data = city_leave)\nplt.title(\"City ~ Leave or Not\")\nplt.show()","4afbdcae":"#group gender & leave or not\ngender_leave = employee.groupby(['Gender', 'LeaveOrNot']).size().reset_index(name = 'Count')\nprint(gender_leave)","ce5e227d":"#visualize gender ~ leave or not\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'Gender', y = 'Count', hue = 'LeaveOrNot', data = gender_leave)\nplt.title(\"Gender ~ Leave or Not\")\nplt.show()","a47f0a42":"#group ever benched & leave or not\nbenched_leave = employee.groupby(['EverBenched', 'LeaveOrNot']).size().reset_index(name = 'Count')\nprint(benched_leave)","9e912717":"#visualize gender ~ leave or not\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'EverBenched', y = 'Count', hue = 'LeaveOrNot', data = benched_leave)\nplt.title(\"Ever Benched ~ Leave or Not\")\nplt.show()","40a98a56":"#count of payment tier\nemployee['PaymentTier'].value_counts()","b270e7c7":"#transform payment tier to categorical variable\nemployee.PaymentTier[employee['PaymentTier'] == 1] = 'Highest'\nemployee.PaymentTier[employee['PaymentTier'] == 2] = 'Mid Level'\nemployee.PaymentTier[employee['PaymentTier'] == 3] = 'Lowest'\nemployee.head()","a6213cff":"#group payment tier & leave or not\npayment_leave = employee.groupby(['PaymentTier', 'LeaveOrNot']).size().reset_index(name = 'Count')\nprint(payment_leave)","55049a5b":"#visualize payment tier ~ leave or not\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'PaymentTier', y = 'Count', hue = 'LeaveOrNot', data = payment_leave)\nplt.title(\"Payment Tier ~ Leave or Not\")\nplt.show()","8d67d484":"#group experience current domain & leave or not\nexperience_leave = employee.groupby(['ExperienceInCurrentDomain', 'LeaveOrNot']).size().reset_index(name = 'Count')\nprint(experience_leave)","bc12bfa9":"#visualize experience current domain ~ leave or not\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'ExperienceInCurrentDomain', y = 'Count', hue = 'LeaveOrNot', data = experience_leave)\nplt.title(\"Experience Current Domain ~ Leave or Not\")\nplt.show()","a8d83ddf":"## Check Feature Importance","728e7042":"## Visualization","41e49162":"### Random Forest model is the best score result","25ad52ba":"## Data Extraction","e65be708":"# Predict Employee Future In Company","19803c9c":"### Compare of Modelling","816d865e":"## Classification Model"}}