{"cell_type":{"c77270c3":"code","c2cfd557":"code","045e51f3":"code","cb4abcba":"code","442cfa07":"code","3c3ed222":"code","a16ad4b4":"code","40b03a07":"code","fd5995bf":"code","b2a613a2":"code","7a0b6415":"code","891073fa":"code","fdc7328b":"markdown","161c4f8e":"markdown","3e3c5495":"markdown","92f77c30":"markdown","9b91cf65":"markdown","c0d327a9":"markdown","0335f8e6":"markdown","55a73164":"markdown","8a80c33c":"markdown","74b5014d":"markdown","f0b342ad":"markdown"},"source":{"c77270c3":"import plotly_express as px\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\n\npx.scatter(gapminder2007, x=\"gdpPercap\", y=\"lifeExp\")","c2cfd557":"px.scatter(gapminder2007, x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\")","045e51f3":"px.scatter(gapminder2007, x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", size=\"pop\", size_max=60)","cb4abcba":"px.scatter(gapminder2007, x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", size=\"pop\", size_max=60, hover_name=\"country\")","442cfa07":"px.scatter(gapminder2007, x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", size=\"pop\", size_max=60,\n          hover_name=\"country\", facet_col=\"continent\", log_x=True)","3c3ed222":"px.scatter(gapminder, x=\"gdpPercap\", y=\"lifeExp\",size=\"pop\", size_max=60, color=\"continent\", hover_name=\"country\", \n           animation_frame=\"year\", animation_group=\"country\", log_x=True, range_x=[100,100000], range_y=[25,90],\n           labels=dict(pop=\"Population\", gdpPercap=\"GDP per Capita\", lifeExp=\"Life Expectancy\"))","a16ad4b4":"px.choropleth(gapminder, locations=\"iso_alpha\", color=\"lifeExp\", hover_name=\"country\", animation_frame=\"year\",\n              color_continuous_scale=px.colors.sequential.Plasma, projection=\"natural earth\")","40b03a07":"tips = px.data.tips()","fd5995bf":"px.histogram(tips, x=\"total_bill\", y=\"tip\", histfunc=\"sum\", color=\"smoker\")","b2a613a2":"px.box(tips, x=\"total_bill\", y=\"day\", orientation=\"h\", color=\"smoker\", notched=True,\n       category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"]})","7a0b6415":"px.violin(tips, y=\"tip\", x=\"smoker\", color=\"sex\", box=True, points=\"all\")","891073fa":"px.scatter(tips, x=\"total_bill\", y=\"tip\", color=\"smoker\", trendline=\"ols\", marginal_x=\"violin\", marginal_y=\"box\")","fdc7328b":"Curious about which point is which country? Add a hover_name and you can easily identify any point: never again wonder \u201cwhat is that outlier?\u201d... just mouse over the point you're interested in!","161c4f8e":"ou could facet your plots, just as easily as coloring your points with facet_col=\"continent\", and let's make the x-axis logarithmic to see things more clearly.","3e3c5495":"Maybe you're interested in more than just 2007 and you want to see how this chart evolved over time. You can animate it by setting animation_frame=\"year\" and animation_group=\"country\" to identify which circles match which ones across frames. In this final version, let's tweak some of the display here, as text like \"gdpPercap\" is kind of ugly even though it's the name of our data frame column. We can provide prettier labels that get applied throughout the figure, in legends, axis titles and hovers. We can also provide some manual bounds so the animation looks nice throughout:","92f77c30":"## Reference\n\nhttps:\/\/github.com\/plotly\/plotly_express","9b91cf65":"Because this is geographic data, we can also represent it as an animated map, which makes it clear that px can make way more than just scatterplots, and that this dataset is missing data for the former Soviet Union.","c0d327a9":"A major part of data exploration is understanding the distribution of values in a dataset, and how those distributions relate to each other. Plotly Express includes a number of functions to do just that. Visualize univariate distributions with histograms, box-and-whisker or violin plots:","0335f8e6":"You can also visualize bivariate distributions with marginal rugs, histograms, boxes or violins, and you can add trendlines too. px even helpfully adds the line's equation and R\u00b2 in the hover box for you! It uses statsmodels under the hood to do either Ordinary Least Squares (OLS) regression or Locally Weighted Scatterplot Smoothing (LOWESS).","55a73164":"Once you import Plotly Express (aka px), most plots are made with just one function call that accepts a tidy Pandas data frame, and a simple description of the plot you want to make. For example if you want a simple scatter plot, it\u2019s just px.scatter(data, x=\"column_name\", y=\"column_name\"). \n\nHere\u2019s an example with the Gapminder dataset \u2013 which comes built-in! \u2013 showing life expectancy vs GPD per capita by country for 2007:","8a80c33c":"If you want to break that down by continent, you can color your points with the color argument and px takes care of the details:","74b5014d":"## Next steps\nPhew, you've made it this far! If you want to use Plotly Express yourself, just pip install plotly_express to install it","f0b342ad":"Each point here is a country, so maybe we want to scale the points by the country population\u2026 no problem: there\u2019s an arg for that too!"}}