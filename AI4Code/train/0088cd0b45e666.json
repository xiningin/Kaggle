{"cell_type":{"5b4bb2e8":"code","d049630d":"markdown"},"source":{"5b4bb2e8":"import pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\ndf = pd.read_csv('..\/input\/africa-economic-banking-and-systemic-crisis-data\/african_crises.csv')\n\n# converting into useful numbers\n\ndf['banking_crisis'] = df['banking_crisis'].replace('crisis',np.nan)\ndf['banking_crisis'] = df['banking_crisis'].fillna(1)\ndf['banking_crisis'] = df['banking_crisis'].replace('no_crisis',np.nan)\ndf['banking_crisis'] = df['banking_crisis'].fillna(0)\n\n# removing unneccesary data\n\ndf.drop(['cc3','country'], axis=1, inplace=True)\n\n# scaling the data\n\ndf_scaled = preprocessing.scale(df)\ndf_scaled = pd.DataFrame(df_scaled, columns=df.columns)\ndf_scaled['banking_crisis'] = df['banking_crisis']\ndf = df_scaled\n\n# defining the input data, X, and the desired results, y \n\nX = df.loc[:,df.columns != 'banking_crisis']\ny = df.loc[:, 'banking_crisis']\n\n# breaking data into training data, validation data, and test data\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2)\nX_train, X_val, y_train, y_val = train_test_split(X_train,y_train, test_size = 0.2)\n\n# constructing a simple Multilayer Perceptron\n\nmodel = Sequential()\nmodel.add(Dense(32,activation = 'relu', input_dim = 11))\nmodel.add(Dense(16, activation = 'relu'))\nmodel.add(Dense(1, activation = 'sigmoid'))\nmodel.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n\n# training the network\n\nmodel.fit(X_train, y_train, epochs=200)\n\n# scoring it on the data it trained on as well as test data\n\nscores = model.evaluate(X_train, y_train)\nprint (\"Training Accuracy: %.2f%%\\n\" % (scores[1]*100))\n\nscores = model.evaluate(X_test, y_test)\nprint (\"Testing Accuracy: %.2f%%\\n\" % (scores[1]*100))\n\n# plotting the confusion matrix\n\ny_test_pred = model.predict_classes(X_test)\nc_matrix = confusion_matrix(y_test,y_test_pred)\nax = sns.heatmap(c_matrix, annot=True, xticklabels=['No Banking Crisis','Banking Crisis'], yticklabels=['No Banking Crisis','Banking Crisis'], cbar=False, cmap='Blues')\nax.set_xlabel(\"Prediction\")\nax.set_ylabel(\"Actual\")","d049630d":"Hello! This is the very first notebook I will have written in kaggle. I have tried to make a simple neural network to predict whether or not a banking crisis will occur in a given country in a given year. Although the network is simple, it is over 90% accurate in its predictions, and does not tend to severly under-predict banking crises (note the confusion matrix). This neural network was constructed with the help of examples from the book \"Neural Network Projects with Python\" by James Loy, and some lines are taken directly from there. I know this isn't a data visualization tool, but I hope you find some interest in it. Thanks!"}}