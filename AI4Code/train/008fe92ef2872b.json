{"cell_type":{"1acf92ea":"code","85109518":"code","ae38d5b9":"code","8af821cb":"code","f85b695b":"code","c26dc271":"code","f1220091":"code","301b2c6c":"code","1d98ab6f":"code","c59049d3":"code","ea783a81":"code","091ad3be":"code","5fd9fd25":"code","0cb955aa":"code","4eaba46c":"code","b95e7dc0":"code","89664574":"code","00610bcd":"code","c44f50d2":"code","1a626fed":"code","69ace46e":"markdown","0f869412":"markdown","eec20d1d":"markdown","cc95cf1b":"markdown","c8144726":"markdown","fce33607":"markdown","526a743c":"markdown","b08c824f":"markdown","beed2813":"markdown","80ee1417":"markdown","4f848184":"markdown","d6cab707":"markdown","127cd8bc":"markdown"},"source":{"1acf92ea":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\n\n#%config InlineBackend.figure_formats = {'pdf',}\n%matplotlib inline","85109518":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ae38d5b9":"%time dfTrain = pd.read_csv('..\/input\/train.csv')","8af821cb":"dfTrain.head()","f85b695b":"y = dfTrain['label'].values.flatten() \ny","c26dc271":"x = dfTrain.drop(['label'],axis=1).values \nx\n#x = x\/255.0\nx","f1220091":"from sklearn.model_selection import train_test_split\nx_train,x_dev, y_train,  y_dev = train_test_split(x,y,random_state=42)","301b2c6c":"def displayData(X,Y):\n    # set up array\n    fig, ax = plt.subplots(nrows=10, ncols=10, figsize=(15,15))\n    fig.suptitle( \"Display randomly images of the training data set\")\n    # loop over randomly drawn numbers\n    for i in range(10):\n        for j in range(10):\n            ind = np.random.randint(X.shape[0])\n            tmp = X[ind,:].reshape(28,28)\n            ax[i,j].set_title(\"Label: {}\".format(Y[ind]))\n            ax[i,j].imshow(tmp, cmap='gray_r') # display it as gray colors.\n            plt.setp(ax[i,j].get_xticklabels(), visible=False)\n            plt.setp(ax[i,j].get_yticklabels(), visible=False)\n    \n    fig.subplots_adjust(hspace=0.5, wspace=0.5)\n\ndisplayData(x_train,y_train)    ","1d98ab6f":"fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(10,5))\nax.hist(y,bins=[0,1,2,3,4,5,6,7,8,9,10], edgecolor=\"b\", histtype=\"bar\",align='left')\nax.set_title('Histogram: Training data set')\nax.set(xlabel='Number', ylabel='Frequency')\nax.xaxis.set_ticks([0,1,2,3,4,5,6,7,8,9] );\nax.axhline(y=(y.size\/10), label=\"average frequency\",linestyle='dashed',   color='r')\nax.legend()","c59049d3":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nproj = pca.fit_transform(x)\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(10,10))\nax.set_title('PCA of dataset n_components=2')\nax.scatter(proj[:,0],proj[:,1],c=y, label='number')\nax.legend()","ea783a81":"%time dfTest = pd.read_csv('..\/input\/test.csv')","091ad3be":"dfTest.head()","5fd9fd25":"dfTrain.describe()","0cb955aa":"from sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import classification_report\nimport scipy\n\nclf = MLPClassifier(solver='lbfgs',hidden_layer_sizes=(1000,),  random_state=1 ) \nbest_model = clf.fit(x\/255.0, y)","4eaba46c":"dfTrain['label_predicted'] =  best_model.predict(x\/255.0)\ndfTrain['valid_predicted'] = dfTrain.apply(lambda row: row['label_predicted']==row['label'], axis=1)","b95e7dc0":"print('Training Accuracy: {:3.2f} %'.format(best_model.score(x,y)*100))\ny_test_pred = best_model.predict(x)\n","89664574":"from sklearn.metrics import confusion_matrix\nimport seaborn as sn\nconfusion_matrix = confusion_matrix(y, y_test_pred)\nfig, ax = plt.subplots(figsize=(10,10))\n\nsn.heatmap(confusion_matrix, annot=True, ax=ax, fmt='g',vmin=0)\nax.set_ylabel(\"true label\")\nax.set_xlabel(\"predicted label\")","00610bcd":"def displayData(labeld_as, index,X,Y,Y_Pred):\n    nImages = index.values.size \n    nRows = 1+ nImages\/\/10\n    # set up array\n    fig, ax = plt.subplots(nrows=nRows, ncols=10,squeeze=False,figsize=(10+9*.5, 1+nRows+0.5*nRows))\n    fig.suptitle( \"Labeld as {} predicted otherwise\".format(labeld_as))\n    # loop over randomly drawn numbers\n    for i in range(nRows):\n        for j in range(10):\n            pos = i*10+j\n            if (pos<nImages):\n                tmp = X[index[pos],:].reshape(28,28)\n                ax[i,j].set_title(\"I:{}, P:{}\".format(index[pos],Y_Pred[index[pos]]))\n                ax[i,j].imshow(tmp, cmap='gray_r') # display it as gray colors.\n                plt.setp(ax[i,j].get_xticklabels(), visible=False)\n                plt.setp(ax[i,j].get_yticklabels(), visible=False)\n\n    fig.subplots_adjust(hspace=0.5, wspace=0.5)\n   ","c44f50d2":"for i in range(10):\n    index = dfTrain[(dfTrain['valid_predicted']==False) & (dfTrain['label']==i)].index\n    if (index.size>0):\n        displayData(i,index,x,y,y_test_pred)","1a626fed":"# load the test data set.\ndfTest = pd.read_csv('..\/input\/test.csv')\nx_test = dfTest.values\ny_test = best_model.predict(x_test\/255.)\ndfExport = pd.DataFrame( {'ImageId':range(1,y_test.size+1),'Label': y_test})\ndfExport.to_csv('prediction.csv',index=False)   ","69ace46e":"As next step we add two columns to the training dataset a prediction column and a column where the predictions where wrong.","0f869412":"We can see the number of examples for each number to detect is not even distributed. There are more 1, 3 and 7 in the dataset.","eec20d1d":"First look at the training data","cc95cf1b":"# First load the data (own it)","c8144726":"It is allways a good idea to look at the data","fce33607":"What we can clearly see is the following.\n\nThere is definitely a problem with the prediction of 8 and 9","526a743c":"## Export ","b08c824f":"# Neuronal Network with sklearn","beed2813":"Lets visualize the data via simplified principal component analysis as 2 components","80ee1417":"Lets take a closer look on the errors","4f848184":"# Goal\nThe goal in this competition is to take an image of a handwritten single digit, and determine what that digit is.\nFor every ImageId in the test set, you should predict the correct label.\n## Evaluation metric\nThis competition is evaluated on the categorization accuracy of your predictions (the percentage of images you get correct).","d6cab707":"Next figure out how often each number is represented in the training dataset","127cd8bc":"What we can see here is that we have a problem with predicting 8 and 9.\n\nAs next step let us look at the missclassfied numbers in oderder to find out whether they are labeld correctly."}}