{"cell_type":{"504c36a9":"code","028b4f32":"code","1fef99bc":"code","d5075ea0":"code","a1b36641":"code","a6851f72":"code","a71e36a8":"code","91a59812":"code","1d4b7f1f":"code","aad47aa6":"code","e8ee57af":"code","21f696fa":"code","dd54546a":"code","796eee9c":"code","8d6ec624":"markdown"},"source":{"504c36a9":"import pandas as pd\nimport numpy as np","028b4f32":"import scipy\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport numpy as np\nimport random\nimport datetime\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom scipy import stats\n\n# Imports for better visualization\nfrom matplotlib import rcParams\n#colorbrewer2 Dark2 qualitative color table\ndark2_colors = [(0.10588235294117647, 0.6196078431372549, 0.4666666666666667),\n                (0.8509803921568627, 0.37254901960784315, 0.00784313725490196),\n                (0.4588235294117647, 0.4392156862745098, 0.7019607843137254),\n                (0.9058823529411765, 0.1607843137254902, 0.5411764705882353),\n                (0.4, 0.6509803921568628, 0.11764705882352941),\n                (0.9019607843137255, 0.6705882352941176, 0.00784313725490196),\n                (0.6509803921568628, 0.4627450980392157, 0.11372549019607843)]\n\nrcParams['figure.figsize'] = (10, 4)\nrcParams['figure.dpi'] = 150\n#rcParams['axes.color_cycle'] = dark2_colors\nrcParams['lines.linewidth'] = 2\nrcParams['font.size'] = 8\nrcParams['patch.edgecolor'] = 'white'\nrcParams['patch.facecolor'] = dark2_colors[0]\nrcParams['font.family'] = 'StixGeneral'\nrcParams['axes.grid'] = True\nrcParams['axes.facecolor'] = '#eeeeee'","1fef99bc":"from subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\/\"]).decode(\"utf8\"))","d5075ea0":"train = pd.read_csv('..\/input\/astro-analytics-techsoc-iitm\/train_techsoc.csv')\ntest = pd.read_csv('..\/input\/astro-analytics-techsoc-iitm\/test_techsoc.csv')\nsample = pd.read_csv('..\/input\/astro-analytics-techsoc-iitm\/sample_submission_techsoc.csv')\ntrain.shape, test.shape, sample.shape","a1b36641":"uniq = list(set(test['sat_id']).intersection(train['sat_id']))\nfilter_train = pd.DataFrame()\nfor i in uniq:\n    df = train[train['sat_id']==i].reset_index(drop=True)\n    filter_train = filter_train.append(df)\ntrain_df = filter_train.reset_index(drop=True)\ntrain_df.head()","a6851f72":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression","a71e36a8":"%%time\npred_x = pd.DataFrame()\n\nfor sat in test['sat_id'].unique():\n    train_X = train[train['sat_id']==sat][['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']]\n    test_X = test[test['sat_id']==sat][['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']]\n    target = train[train['sat_id']==sat][['x']]\n    \n    poly = PolynomialFeatures(degree= 2)\n    train_poly_features = poly.fit_transform(train_X[['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']])\n    test_poly_features = poly.fit_transform(test_X[['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']])\n    \n    poly_regression = LinearRegression()\n    poly_regression.fit(train_poly_features,target)\n    \n    test_pred = poly_regression.predict(test_poly_features)\n    pred = pd.DataFrame()\n    pred['sat_id'] = [sat for i in range(test_X.shape[0])]\n    pred['x'] = test_pred\n    pred_x = pred_x.append(pred)\n    pred_x = pred_x.reset_index(drop=True)","91a59812":"%%time\npred_y = pd.DataFrame()\n\nfor sat in test['sat_id'].unique():\n    train_X = train[train['sat_id']==sat][['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']]\n    test_X = test[test['sat_id']==sat][['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']]\n    target = train[train['sat_id']==sat][['y']]\n    \n    poly = PolynomialFeatures(degree= 2)\n    train_poly_features = poly.fit_transform(train_X[['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']])\n    test_poly_features = poly.fit_transform(test_X[['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']])\n    \n    poly_regression = LinearRegression()\n    poly_regression.fit(train_poly_features,target)\n    \n    test_pred = poly_regression.predict(test_poly_features)\n    pred = pd.DataFrame()\n    pred['sat_id'] = [sat for i in range(test_X.shape[0])]\n    pred['y'] = test_pred\n    pred_y = pred_y.append(pred)\n    pred_y = pred_y.reset_index(drop=True)","1d4b7f1f":"%%time\npred_z = pd.DataFrame()\n\nfor sat in test['sat_id'].unique():\n    train_X = train[train['sat_id']==sat][['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']]\n    test_X = test[test['sat_id']==sat][['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']]\n    target = train[train['sat_id']==sat][['z']]\n    \n    poly = PolynomialFeatures(degree= 2)\n    train_poly_features = poly.fit_transform(train_X[['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']])\n    test_poly_features = poly.fit_transform(test_X[['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']])\n    \n    poly_regression = LinearRegression()\n    poly_regression.fit(train_poly_features,target)\n    \n    test_pred = poly_regression.predict(test_poly_features)\n    pred = pd.DataFrame()\n    pred['sat_id'] = [sat for i in range(test_X.shape[0])]\n    pred['z'] = test_pred\n    pred_z = pred_z.append(pred)\n    pred_z = pred_z.reset_index(drop=True)","aad47aa6":"%%time\npred_Vx = pd.DataFrame()\n\nfor sat in test['sat_id'].unique():\n    train_X = train[train['sat_id']==sat][['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']]\n    test_X = test[test['sat_id']==sat][['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']]\n    target = train[train['sat_id']==sat][['Vx']]\n    \n    poly = PolynomialFeatures(degree= 2)\n    train_poly_features = poly.fit_transform(train_X[['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']])\n    test_poly_features = poly.fit_transform(test_X[['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']])\n    \n    poly_regression = LinearRegression()\n    poly_regression.fit(train_poly_features,target)\n    \n    test_pred = poly_regression.predict(test_poly_features)\n    pred = pd.DataFrame()\n    pred['sat_id'] = [sat for i in range(test_X.shape[0])]\n    pred['Vx'] = test_pred\n    pred_Vx = pred_Vx.append(pred)\n    pred_Vx = pred_Vx.reset_index(drop=True)","e8ee57af":"%%time\npred_Vy = pd.DataFrame()\n\nfor sat in test['sat_id'].unique():\n    train_X = train[train['sat_id']==sat][['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']]\n    test_X = test[test['sat_id']==sat][['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']]\n    target = train[train['sat_id']==sat][['Vy']]\n    \n    poly = PolynomialFeatures(degree= 2)\n    train_poly_features = poly.fit_transform(train_X[['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']])\n    test_poly_features = poly.fit_transform(test_X[['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']])\n    \n    poly_regression = LinearRegression()\n    poly_regression.fit(train_poly_features,target)\n    \n    test_pred = poly_regression.predict(test_poly_features)\n    pred = pd.DataFrame()\n    pred['sat_id'] = [sat for i in range(test_X.shape[0])]\n    pred['Vy'] = test_pred\n    pred_Vy = pred_Vy.append(pred)\n    pred_Vy = pred_Vy.reset_index(drop=True)","21f696fa":"%%time\npred_Vz = pd.DataFrame()\n\nfor sat in test['sat_id'].unique():\n    train_X = train[train['sat_id']==sat][['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']]\n    test_X = test[test['sat_id']==sat][['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']]\n    target = train[train['sat_id']==sat][['Vz']]\n    \n    poly = PolynomialFeatures(degree= 2)\n    train_poly_features = poly.fit_transform(train_X[['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']])\n    test_poly_features = poly.fit_transform(test_X[['x_sim', 'y_sim', 'z_sim', 'Vx_sim', 'Vy_sim', 'Vz_sim']])\n    \n    poly_regression = LinearRegression()\n    poly_regression.fit(train_poly_features,target)\n    \n    test_pred = poly_regression.predict(test_poly_features)\n    pred = pd.DataFrame()\n    pred['sat_id'] = [sat for i in range(test_X.shape[0])]\n    pred['Vz'] = test_pred\n    pred_Vz = pred_Vz.append(pred)\n    pred_Vz = pred_Vz.reset_index(drop=True)","dd54546a":"sample['x'] =pred_x['x']\nsample['y'] =pred_y['y']\nsample['z'] =pred_z['z']\nsample['Vx'] =pred_Vx['Vx']\nsample['Vy'] =pred_Vy['Vy']\nsample['Vz'] =pred_Vz['Vz']","796eee9c":"sample.to_csv('poly_fit_deg_2.csv', index=False)","8d6ec624":"Please do upvote if you like it!!"}}