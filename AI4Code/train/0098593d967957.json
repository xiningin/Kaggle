{"cell_type":{"4d225736":"code","ee0a8b23":"code","64761693":"code","def462c4":"code","028047a5":"code","a383e24b":"code","c57b1819":"code","d2efb82e":"code","b7dee190":"code","1a8eb300":"code","5a0e7346":"code","1380e066":"code","b7f095d2":"code","faf27514":"code","bd7c9f4f":"code","72ed27fe":"code","0ed2c813":"code","dea92893":"code","1ee52d08":"code","b135661a":"code","f04723c3":"code","3e106353":"code","2c172be9":"code","c546c971":"code","10718c5d":"code","32bb7382":"code","883c5357":"code","c04d81ca":"code","5a40a559":"code","803ed0b3":"code","58b0b944":"code","5dd94cae":"code","8a75f56e":"code","5d3b6bda":"code","92a061a1":"code","f0190374":"code","c0212189":"code","cd8df045":"code","b16a40ed":"code","a3965ef1":"code","bbd0fc7c":"code","ba77d6e5":"code","3edc4e0a":"code","e8956b6e":"code","2f19611f":"code","8d766f1b":"code","8eaf564a":"code","ce9c89cc":"code","4a4906bb":"code","f1346194":"code","ade824cb":"code","cb4cf32c":"code","e15f9a8d":"markdown","b9c4c7bc":"markdown","92735346":"markdown","9f83398c":"markdown"},"source":{"4d225736":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        break","ee0a8b23":"import matplotlib.pyplot as plt\nimport seaborn\nimport cv2\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline","64761693":"import tensorflow as tf\nimport keras\nfrom keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,BatchNormalization\nfrom keras.models import Sequential,Model\nfrom tqdm import tqdm","def462c4":"reshape_size =90\nchannel = 3\nbatch_size = 16","028047a5":"df = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/train.csv')","a383e24b":"df.info()","c57b1819":"df.target.value_counts()","d2efb82e":"df.diagnosis.value_counts()","b7dee190":"df.sex.value_counts()","1a8eb300":"df.anatom_site_general_challenge.value_counts()","5a0e7346":"df0 = df[df.target==0]\ndf1 = df[df.target==1]","1380e066":"print(df0.shape)\nprint(df1.shape)","b7f095d2":"sdf1 = pd.concat([df0.iloc[0:2336,:],df1,df1,df1,df1])","faf27514":"sdf2 = pd.concat([df0.iloc[0:550,:],df1])","bd7c9f4f":"new_df  =sdf2.copy()","72ed27fe":"def labelfullpath(df,train=True):\n    base_path=\"..\/input\/siim-isic-melanoma-classification\/jpeg\"\n    if(train==True):\n        base_path = os.path.join(base_path,\"train\")\n    else:\n        base_path = os.path.join(base_path,\"test\")\n    fullpath = [os.path.join(base_path,img+\".jpg\") for img in df.image_name]\n    df['fullpath'] = fullpath\n    return df","0ed2c813":"new_df = labelfullpath(new_df)\nnew_df.head()","dea92893":"new_df.shape","1ee52d08":"sample_img=new_df.shape[0]\/\/2","b135661a":"# new_df['gender'] = [float(new_df['sex'].values[i]=='female') for i in range(new_df.shape[0])]\n# dict_anatom = {'oral\/genital':0,'palms\/soles':0.20,'head\/neck':0.40,'upper extremity':0.60,'lower extremity':0.80,'torso':1.0}\n# new_df['anatom_site'] = [dict_anatom[new_df['anatom_site_general_challenge'].values[i]] for i in range(new_df.shape[0])]\n# new_df['age'] = [(new_df['age_approx'].values[i])\/100.0 for i in range(new_df.shape[0])]\n# x = new_df[['gender','anatom_site','age']].values","f04723c3":"new_df.fullpath.values[0]","3e106353":"new_df,new_df_test = train_test_split(new_df,test_size=0.1,random_state=0)","2c172be9":"plt.figure(figsize = (20,10))\nnum = 1\none = new_df.head(5)\nfor i in range(5):\n    plt.subplot(1,5,num)\n    im = plt.imread(one.fullpath.values[i])\n    plt.imshow(im)\n    plt.title(im.shape)\n    plt.xlabel(one.sex.values[i]+\" \"+str(one.age_approx.values[1])+\"\\n\"+one.anatom_site_general_challenge.values[1])\n    num+=1","c546c971":"plt.figure(figsize = (20,10))\nnum = 1\none = new_df.tail(5)\nfor i in range(5):\n    plt.subplot(1,5,num)\n    im = plt.imread(one.fullpath.values[i])\n    plt.imshow(im)\n    plt.title(im.shape)\n    plt.xlabel(one.sex.values[i]+\" \"+str(one.age_approx.values[1])+\"\\n\"+one.anatom_site_general_challenge.values[1])\n    num+=1","10718c5d":"def preprocessing_images(imglist,channel=1):\n    image_arr =[] \n    for img in imglist[0]:\n        if(channel==1):\n            i = cv2.imread(img)\n        else:\n            i = cv2.imread(img)\n        i = cv2.resize(i,(reshape_size,reshape_size))\n        i = i\/255.0\n        image_arr.append(i)\n    return np.array(image_arr)    ","32bb7382":"def batchprocessing(imglist,channel=1):\n    total_len = len(imglist)\n    arrlist = np.empty((batch_size,reshape_size,reshape_size,channel), dtype=float, order='C')\n    for i in tqdm(range(total_len\/\/batch_size +1)):\n        start = i*batch_size\n        end  = start+batch_size\n        try:\n            arrlist=np.append(arrlist,preprocessing_images([imglist[start:end]]),axis=0)\n        except:\n            pass   \n    return arrlist    ","883c5357":"images = batchprocessing(new_df.fullpath.values,channel=channel)","c04d81ca":"images.shape","5a40a559":"shuffle_index = [i for i in range(0,new_df.shape[0])]\nnp.random.shuffle(shuffle_index)","803ed0b3":"shuffle_images = images[shuffle_index]\nshuffle_labels = new_df.target.values[shuffle_index]","58b0b944":"if(channel==1):    \n    fit_images = np.expand_dims(shuffle_images,axis=3)\nelse:\n    fit_images = shuffle_images\nonehot_labels = np.array([np.eye(2)[i] for i in shuffle_labels])","5dd94cae":"print(fit_images.shape)\nprint(onehot_labels.shape)","8a75f56e":"plt.imshow(shuffle_images[8],cmap = 'hot')","5d3b6bda":"def simple_model():\n    keras.backend.clear_session()\n    vgg = keras.applications.VGG16(input_shape=(reshape_size,reshape_size,channel),include_top=False,weights = 'imagenet')\n    vgg.trainable = False\n    vgg.layers[-2].trainable=True\n    mainmodel = Sequential([vgg,\n                            Flatten(),\n                           Dense(1000,activation='relu'),\n#                            Dense(1000,activation='relu'),\n#                            Dense(500,activation='relu'),\n                           Dense(2,activation='softmax')])\n    mainmodel.compile('adam','categorical_crossentropy',metrics = ['accuracy'])\n    print(mainmodel.summary())\n    print(\"input shape \",mainmodel.input_shape)\n    print(\"output shape \",mainmodel.output_shape)\n    return mainmodel","92a061a1":"model = simple_model()","f0190374":"hist = model.fit(fit_images,onehot_labels,epochs=40,batch_size=32,validation_split=0.2)","c0212189":"plt.figure(figsize=(10,7))\nplt.subplot(1,2,1)\nplt.plot(hist.history['accuracy'],label='accuracy')\nplt.plot(hist.history['loss'],label='loss')\nplt.legend()\nplt.title(\"training set\")\nplt.grid()\nplt.subplot(1,2,2)\nplt.plot(hist.history['val_accuracy'],label='val_accuracy')\nplt.plot(hist.history['val_loss'],label='val_loss')\nplt.legend()\nplt.title(\"validation set\")\nplt.grid()\nplt.ylim((0,4))","cd8df045":"test_data = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/test.csv')","b16a40ed":"test_data.head()","a3965ef1":"test_data.shape","bbd0fc7c":"test_data=labelfullpath(test_data,train=False)","ba77d6e5":"# test_data.anatom_site_general_challenge.fillna('torso',inplace=True)\n# test_data['gender'] = [float(test_data['sex'].values[i]=='female') for i in range(test_data.shape[0])]\n# dict_anatom = {'oral\/genital':0,'palms\/soles':0.20,'head\/neck':0.40,'upper extremity':0.60,'lower extremity':0.80,'torso':1.0}\n# test_data['anatom_site'] = [dict_anatom[test_data['anatom_site_general_challenge'].values[i]] for i in range(test_data.shape[0])]\n# test_data['age'] = [(test_data['age_approx'].values[i])\/100.0 for i in range(test_data.shape[0])]\n# xt = test_data[['gender','anatom_site','age']].values","3edc4e0a":"start=0\nend = 100","e8956b6e":"test_data['target']=[0 for i in range(test_data.shape[0])]","2f19611f":"imagest = batchprocessing(test_data.fullpath.values[start:end],channel=channel)\ntarget = model.predict(imagest)","8d766f1b":"test_target = np.argmax(target,axis=1)","8eaf564a":"test_data['target'][0:5] = [0,1,1,1,1]","ce9c89cc":"test_data['target'][0:5]","4a4906bb":"test_target","f1346194":"test_data['target'][start:end] = test_target\n# test_data = test_data[['image_name','target']]","ade824cb":"target.shape","cb4cf32c":"test_data.to_csv('submission.csv',index=False)","e15f9a8d":"# malignant (1) images","b9c4c7bc":"# Benign (0) images","92735346":"# Plot some Images","9f83398c":"# Count Values "}}