{"cell_type":{"6bcb7b90":"code","0a3dcb14":"code","5493c2ee":"code","68351b92":"code","69d3e024":"code","308fc377":"code","9dcf21c0":"code","06db22d0":"code","05a4dfe9":"code","722c155a":"code","6087ef27":"code","81bb720c":"code","b71d504b":"code","d9cba9bc":"code","e9b9eb2a":"code","7776ab7e":"code","40ad0ef4":"code","6fd834b9":"code","012ddbc2":"code","adaab592":"code","687134c7":"code","5b0f2198":"code","5fc502c3":"code","ae0f9659":"code","f8bbd227":"code","aa0607e5":"code","ea30469f":"code","930ad269":"code","66aaa7e5":"code","ccfcf1a3":"code","f04eeb49":"code","a032aac5":"code","5d9da625":"code","43f6bf84":"code","6cef8a6d":"code","2a452c4d":"code","e796cf2d":"code","971960ec":"code","4db99ca6":"code","425e6aff":"code","dc192a3c":"code","345017fb":"markdown","c8979688":"markdown","3affab7e":"markdown","b026f96c":"markdown","06644433":"markdown","09e14c33":"markdown","351589af":"markdown","8c2128b9":"markdown","514bce56":"markdown","2fa43dc2":"markdown","41db8d1e":"markdown","bd33a433":"markdown","5dc352bd":"markdown","5a729e1e":"markdown"},"source":{"6bcb7b90":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a3dcb14":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport statistics\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom pandas.plotting import scatter_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\n%matplotlib inline\nimport sklearn.metrics as sm\nfrom sklearn.base import TransformerMixin,BaseEstimator\nfrom sklearn.preprocessing import StandardScaler,OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestRegressor\n\npd.options.display.max_rows = 1500\npd.options.display.max_columns = 100","5493c2ee":"#read data\ntrain_set = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_set = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","68351b92":"print(len(train_set))\nprint(len(test_set))","69d3e024":"train_set.head()","308fc377":"train_set.info()","9dcf21c0":"print(len(train_set.columns))","06db22d0":"print(train_set.isnull().sum().sort_values(ascending = False))\n","05a4dfe9":"train_set=train_set.drop(columns=['PoolQC', 'MiscFeature', 'Alley', 'Fence'])\ntrain_set.describe()","722c155a":"print(len(train_set.columns))","6087ef27":"#replace categorical null values with most frequent values present in each column\ncategorical_data = train_set.select_dtypes(['object']).columns\ntrain_set[categorical_data] = train_set[categorical_data].fillna(train_set[categorical_data].mode().iloc[0])\ntrain_set[categorical_data].mode()\n","81bb720c":"#replace numerical null values with the mean value of each column\n\nnumerical_data = train_set.select_dtypes(['float64','int64']).columns\ntrain_set[numerical_data] = train_set[numerical_data].fillna(train_set[numerical_data].mean())\ntrain_set[numerical_data].mean()\n\n","b71d504b":"print(train_set.isnull().sum().sort_values(ascending = False))\n","d9cba9bc":"train_set.hist(figsize=(20,20), bins=20)\nplt.show()","e9b9eb2a":"train_set = train_set.drop(columns=['LowQualFinSF','PoolArea','MiscVal','3SsnPorch'])\nprint(len(train_set.columns))","7776ab7e":"print(train_set.dtypes)","40ad0ef4":"category_columns = train_set.select_dtypes(['object']).columns\nprint(category_columns)\ntrain_set[category_columns] = train_set[category_columns].astype('category').apply(lambda x: x.cat.codes)","6fd834b9":"float_columns = train_set.select_dtypes(['float64']).columns\nprint(float_columns)\ntrain_set['LotFrontage'] =  pd.to_numeric(train_set['LotFrontage'], errors = 'coerce')\ntrain_set['MasVnrArea'] =  pd.to_numeric(train_set['MasVnrArea'], errors = 'coerce')\ntrain_set['GarageYrBlt'] =  pd.to_numeric(train_set['GarageYrBlt'], errors = 'coerce')\ntrain_set['SalePrice'] =  pd.to_numeric(train_set['SalePrice'], errors = 'coerce')\n\ntrain_set = train_set.astype('int64')\n","012ddbc2":"print(train_set.dtypes)","adaab592":"train_set['SalePrice'].describe()","687134c7":"sns.displot(train_set['SalePrice'])","5b0f2198":"#Normalized Sales price \n#train_set.SalePrice = np.log(train_set.SalePrice)\n#sns.displot(train_set['SalePrice'])\n","5fc502c3":"correlation_matrix = train_set.corr()\ncorrelation_matrix['SalePrice'].sort_values(ascending = False)","ae0f9659":"#Heat map\ncorrelation_num = 30\ncorrelation_cols = correlation_matrix.nlargest(correlation_num,'SalePrice')['SalePrice'].index\ncorrelation_mat_sales = np.corrcoef(train_set[correlation_cols].values.T)\nsns.set(font_scale=1.25)\nf, ax = plt.subplots(figsize=(12, 9))\nhm = sns.heatmap(correlation_mat_sales, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 7}, yticklabels=correlation_cols.values, xticklabels=correlation_cols.values)\nplt.show()","f8bbd227":"y= train_set['SalePrice']\n#x = train_set[['OverallQual','GrLivArea','GarageCars','GarageArea', 'TotalBsmtSF','1stFlrSF','FullBath','YearBuilt','YearRemodAdd','TotRmsAbvGrd']]\nx= train_set.drop(columns=['SalePrice','Id'])\nprint(len(x.columns))","aa0607e5":"X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size = 0.3, random_state = 60,shuffle=True)\nprint(len(X_train))\nprint(len(X_test))\n ","ea30469f":"\nlinear_model = LinearRegression()\nlinear_model.fit(X_train, Y_train)\n\n#make predictions using linear regression\nprice_predict =(linear_model.predict(X_test))\n\n#Measure Performance \nlinear_mse = mean_squared_error(Y_test,price_predict)\nprint(\"Mean Squared error: \",linear_mse)\nlinear_SqMse = np.sqrt(linear_mse)\nprint(\"Root Mean Squared error: \", linear_SqMse)\n\nprint(\"Explain variance score for Linear Regression =\", round(sm.explained_variance_score(Y_test,price_predict),2)) \nprint(\"R2 score for Linear Regression =\", round(sm.r2_score(Y_test, price_predict), 2))\n\n","930ad269":"# Create a model with 50 decision trees\nforest_model= RandomForestRegressor(n_estimators = 50, random_state = 42)\n\n# Train the model with training data\nforest_model.fit(X_train,Y_train)\n#make predictions using random forest model\nprice_predict =(forest_model.predict(X_test))\n\n\nforest_mse = mean_squared_error(Y_test,price_predict)\nprint(\"Mean Squared Error : \" , forest_mse)\nforest_SqMse = np.sqrt(forest_mse)\nprint(\"Root Mean Squared error: \", forest_SqMse)\n\nprint(\"Explain variance score for Random Forest Regression =\", round(sm.explained_variance_score(Y_test,price_predict), 2)) \nprint(\"R2 score for Random Forest Regression =\", round(sm.r2_score(Y_test, price_predict), 2))\n\n","66aaa7e5":"test_set.head()","ccfcf1a3":"test_set.dtypes","f04eeb49":"test_set.isnull().sum().sort_values(ascending = False)","a032aac5":"\ntest_set=test_set.drop(columns=['PoolQC', 'MiscFeature', 'Alley', 'Fence','LowQualFinSF','PoolArea','MiscVal','3SsnPorch'])\ntest_set.describe()","5d9da625":"#replace categorical null values with most frequent values present in each column\ncategorical_data = test_set.select_dtypes(['object']).columns\ntest_set[categorical_data] = test_set[categorical_data].fillna(test_set[categorical_data].mode().iloc[0])\ntest_set[categorical_data].mode()\n","43f6bf84":"#replace numerical null values with the mean value of each column\n\nnumerical_data = test_set.select_dtypes(['float64','int64']).columns\ntest_set[numerical_data] = test_set[numerical_data].fillna(test_set[numerical_data].mean())\ntest_set[numerical_data].mean()\n\n\n","6cef8a6d":"test_set.isnull().sum().sort_values(ascending = False)","2a452c4d":"category_columns = test_set.select_dtypes(['object']).columns\nprint(category_columns)\ntest_set[category_columns] = test_set[category_columns].astype('category').apply(lambda x: x.cat.codes)","e796cf2d":"float_columns = test_set.select_dtypes(['float64']).columns\nprint(float_columns)\ntest_set['LotFrontage'] =  pd.to_numeric(test_set['LotFrontage'], errors = 'coerce')\ntest_set['MasVnrArea'] =  pd.to_numeric(test_set['MasVnrArea'], errors = 'coerce')\ntest_set['GarageYrBlt'] =  pd.to_numeric(test_set['GarageYrBlt'], errors = 'coerce')\ntest_set['BsmtFinSF1'] =  pd.to_numeric(test_set['BsmtFinSF1'], errors = 'coerce')\ntest_set['BsmtFinSF2'] =  pd.to_numeric(test_set['BsmtFinSF2'], errors = 'coerce')\ntest_set['BsmtUnfSF'] =  pd.to_numeric(test_set['BsmtUnfSF'], errors = 'coerce')\ntest_set['TotalBsmtSF'] =  pd.to_numeric(test_set['TotalBsmtSF'], errors = 'coerce')\ntest_set['BsmtFullBath'] =  pd.to_numeric(test_set['BsmtFullBath'], errors = 'coerce')\ntest_set['GarageCars'] =  pd.to_numeric(test_set['GarageCars'], errors = 'coerce')\ntest_set['GarageArea'] =  pd.to_numeric(test_set['GarageArea'], errors = 'coerce')\n\ntest_set = test_set.astype('int64')\n","971960ec":"test_id = test_set['Id']\ntest_x= test_set.drop(columns=['Id'])\nprint(len(test_x.columns))","4db99ca6":"y_prdict = forest_model.predict(test_x)","425e6aff":"#submission = pd.DataFrame(test_id)\nsubmission = pd.DataFrame(list(zip(test_id, y_prdict)),\n               columns =['Id', 'SalePrice'])\nsubmission.head(20)","dc192a3c":"submission.to_csv('submission.csv', index=False)","345017fb":"**Multiple Linear Regression**","c8979688":"**convert categorical into numerical**","3affab7e":"**For numerical data replace null values with the mean value of each feature**","b026f96c":"**For categorical data replace null values with the most frequently used value of each feature**","06644433":"**Test Set**","09e14c33":"**Replace Null Values**\n\n**Categorical**\n* BsmtFinType2       38\n* BsmtExposure       38\n* BsmtQual           37\n* BsmtCond           37\n* BsmtFinType1       37\n* MasVnrType          8\n* Electrical          1\n* FireplaceQu       690\n* GarageYrBlt        81\n* GarageCond         81\n* GarageType         81\n* GarageFinish       81\n* GarageQual         81\n\n**Numerical**\n* MasVnrArea          8\n* LotFrontage       259\n\n\nThe null values are replaced :\n* for categorical data -> with the most frequently used value of each feature\n* for numerical data -> the mean value of each feature \n","351589af":"**Convert categorical data into numerical format**","8c2128b9":"**Columns with null values**\n\n* PoolQC           1453\n* MiscFeature      1406\n* Alley            1369\n* Fence            1179\n* FireplaceQu       690\n* LotFrontage       259\n* GarageType         81\n* GarageYrBlt        81\n* GarageFinish       81\n* GarageQual         81\n* GarageCond         81\n* BsmtExposure       38\n* BsmtFinType2       38\n* BsmtQual           37\n* BsmtCond           37\n* BsmtFinType1       37\n\n\nPoolQC, MicsFeature, Alley, Fence, have lot of null data so I will remove those columns from dataset. \n","514bce56":"Most of the data are categorical. Before training the model, categorical data should be converted into numerical data","2fa43dc2":"**Sales prices is left Skewwed. So it should be normalized**","41db8d1e":"**Sales Price**","bd33a433":"**Heat Map**","5dc352bd":"**Correlation of each attribue with price**","5a729e1e":"**Convert float in to int**"}}