{"cell_type":{"893a2136":"code","f9765657":"code","42e870a4":"code","58416a7b":"code","2fb25a80":"code","da05a440":"code","a54193ab":"code","3b1344b9":"code","d8f258a3":"code","03d1f0ba":"code","f8a3393a":"code","671466e7":"code","68bbe861":"code","b87969ca":"code","e022f7c6":"code","a4a709bf":"code","db22d7ff":"code","513b7d9f":"code","00f30f49":"code","afa18fdf":"code","8688b626":"code","a3929a6a":"code","11b711d0":"code","6b0bd3d2":"code","dea12a24":"code","1918643a":"code","c9f8fbff":"code","a5c97040":"code","354e3139":"code","5cb2ab56":"code","f9515a40":"code","71d4bbc5":"code","1a151c68":"code","6d4d9423":"code","b13f051f":"markdown"},"source":{"893a2136":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","f9765657":"def merge_col_name(df):\n    new_cols = []\n    for i in range(len(df.columns.to_list())):\n        new_cols.append(' '.join(df.columns.to_list()[i]))\n\n    df.columns = new_cols","42e870a4":"df_19 = pd.read_csv('..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv', header=[0,1], low_memory=False)\n","58416a7b":"merge_col_name(df_19)","2fb25a80":"question_9 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q9_')]].columns\nquestion_12 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q12_')]].columns\nquestion_13 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q13_')]].columns\nquestion_14 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q14_')]].columns\nquestion_16 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q16_')]].columns\nquestion_17 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q17_')]].columns\nquestion_18 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q18_')]].columns\nquestion_20 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q20_')]].columns\nquestion_21 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q21_')]].columns\nquestion_24 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q24_')]].columns\nquestion_25 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q25_')]].columns\nquestion_26 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q26_')]].columns\nquestion_27 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q27_')]].columns\nquestion_28 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q28_')]].columns\nquestion_29 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q29_')]].columns\nquestion_30 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q30_')]].columns\nquestion_31 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q31_')]].columns\nquestion_32 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q32_')]].columns\nquestion_33 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q33_')]].columns\nquestion_34 = df_19[df_19.columns[pd.Series(df_19.columns).str.startswith('Q34_')]].columns\n\ndf_19['role_activities_count'] = df_19[question_9].count(axis=1)\ndf_19['media_plat_count'] = df_19[question_12].count(axis=1)\ndf_19['course_plat_count'] = df_19[question_13].count(axis=1)\ndf_19['data_primary_tool_count'] = df_19[question_14].count(axis=1)\ndf_19['ide_count'] = df_19[question_16].count(axis=1)\ndf_19['notebook_count'] = df_19[question_17].count(axis=1)\ndf_19['language_count'] = df_19[question_18].count(axis=1)\ndf_19['viz_lib_count'] = df_19[question_20].count(axis=1)\ndf_19['hardware_count'] = df_19[question_21].count(axis=1)\ndf_19['ml_algo_count'] = df_19[question_24].count(axis=1)\n\ndf_19['auto_ml_count'] = df_19[question_25].count(axis=1)\ndf_19['cv_method_count'] = df_19[question_26].count(axis=1)\ndf_19['nlp_method_count'] = df_19[question_27].count(axis=1)\ndf_19['ml_framework_count'] = df_19[question_28].count(axis=1)\ndf_19['cloud_plat_count'] = df_19[question_29].count(axis=1)\ndf_19['cloud_prod_count'] = df_19[question_30].count(axis=1)\ndf_19['bigdata_prod_count'] = df_19[question_31].count(axis=1)\ndf_19['ml_manage_count'] = df_19[question_32].count(axis=1)\ndf_19['auto_ml_regular_count'] = df_19[question_33].count(axis=1)\ndf_19['bigdata_prod_regular_count'] = df_19[question_34].count(axis=1)","da05a440":"cols = [question_9, question_12, question_13, question_14,\n        question_16, question_17, question_18, question_20, question_21,\n        question_24, question_25, question_26, question_27, question_28,\n        question_29, question_30, question_31, question_32, question_33,\n        question_34]\n    \ncols_id = ['question_9', 'question_12', 'question_13', 'question_14',\n        'question_16', 'question_17', 'question_18', 'question_20', 'question_21',\n        'question_24', 'question_25', 'question_26', 'question_27', 'question_28',\n        'question_29', 'question_30', 'question_31', 'question_32', 'question_33',\n        'question_34']\n ","a54193ab":"for i in range(len(cols)):\n    df_19[cols_id[i]] = df_19[cols[i]].apply(lambda row: ', '.join(row.dropna().values.astype(str)), axis=1)\n    \n    df_19.drop(cols[i], axis=1, inplace=True)","3b1344b9":"df_19.drop(['Q2_OTHER_TEXT What is your gender? - Prefer to self-describe - Text'], axis=1, inplace=True)\ndf_19.drop(['Q5_OTHER_TEXT Select the title most similar to your current role (or most recent title if retired): - Other - Text'], axis=1, inplace=True)\ndf_19.drop(['Q19_OTHER_TEXT What programming language would you recommend an aspiring data scientist to learn first? - Other - Text'], axis=1, inplace=True)","d8f258a3":"df_19.columns = ['time_in_seconds',\n              'age_range',\n              'gender',\n              'country',\n              'education',\n              'title',\n                 'company_size',\n              'data_science_workers',\n                 'business_using_ml',\n              'yearly_salary',\n              'ml_spending',\n                'data_primary_tool', \n                 'coding_years',\n              'learn_first_recommendation',\n              'tpu_avg',\n              'ml_years',\n              'role_activities_count', \n                 'media_plat_count',\n                 'course_plat_count',\n                 'data_primary_tool_count',\n                 'ide_count', \n                 'notebook_count',\n                 'language_count',\n                 'viz_lib_count',\n                 'hardware_count',\n                 'ml_algo_count',\n                 'auto_ml_count', \n                 'cv_method_count',\n                 'nlp_method_count',\n                 'ml_framework_count',\n                 'cloud_plat_count',\n                 'cloud_prod_count',\n                 'bigdata_prod_count',\n                 'ml_manage_count',\n                 'auto_ml_regular_count',\n                 'often_bigdata_products',\n                'combined_work_activities',\n                 'combined_media_plat',\n                 'combined_course_plat',\n                 'combined_data_primary_tool',\n                 'combined_IDE',\n                 'combined_notebook',\n                 'combined_lang',\n                 'combined_libs',\n                 'combined_HW',\n                 'combined_ml_algo', \n                 'combined_auto_ml',\n                 'combined_cv_method',\n                 'combined_nlp_method', \n                 'combined_ml_framework',\n                 'combined_cloud_platform',\n                 'combined_cloud_prod',\n                 'combined_bigdata_prod',\n                 'combined_ml_manage',\n                 'combined_auto_ml_regular',\n                 'combined_bigdata_prod_regular']","03d1f0ba":"# missing preprocessing step\nvalues = ['combined_IDE','combined_notebook','combined_lang','combined_libs','combined_HW','combined_ml_algo',\n       'combined_auto_ml','combined_cv_method', 'combined_nlp_method','combined_ml_framework','combined_cloud_platform',\n       'combined_cloud_prod','combined_bigdata_prod','combined_ml_manage','combined_auto_ml_regular',\n       'combined_bigdata_prod_regular', 'combined_work_activities','combined_media_plat',\n       'combined_course_plat']\n\n\ndf_19[values] = df_19[values].replace(', -\\d+','', regex=True)\ndf_19[values] = df_19[values].replace('-\\d+','', regex=True)\ndf_19[values] = df_19[values].replace(', \\d+','', regex=True)\n\ndf_19[values] = df_19[values].replace('Visual Studio \/ Visual Studio','Visual Studio Code (VSCode)', regex=True)\n","f8a3393a":"df_20 = pd.read_csv(\"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\", header=[0,1], low_memory=False)","671466e7":"merge_col_name(df_20)","68bbe861":"question_7 = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q7_')]].columns\nquestion_9 = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q9_')]].columns\nquestion_10 = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q10_')]].columns\nquestion_12 = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q12_')]].columns\nquestion_14 = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q14_')]].columns\nquestion_16 = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q16_')]].columns\nquestion_17 = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q17_')]].columns\nquestion_18 = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q18_')]].columns\nquestion_19 = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q19_')]].columns\nquestion_23 = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q23_')]].columns\n\nquestion_26_A = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q26_A_')]].columns\nquestion_27_A = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q27_A_')]].columns\nquestion_28_A = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q28_A_')]].columns\nquestion_29_A = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q29_A_')]].columns \nquestion_31_A = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q31_A_')]].columns\nquestion_33_A = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q33_A_')]].columns\nquestion_34_A = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q34_A_')]].columns\nquestion_35_A = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q35_A_')]].columns\n\nquestion_36 = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q36_')]].columns\nquestion_37 = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q37_')]].columns\nquestion_39 = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q39_')]].columns\n\nquestion_26_B = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q26_B_')]].columns \nquestion_27_B = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q27_B_')]].columns \nquestion_28_B = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q28_B_')]].columns \nquestion_29_B = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q29_B_')]].columns \nquestion_31_B = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q31_B_')]].columns\nquestion_33_B = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q33_B_')]].columns\nquestion_34_B = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q34_B_')]].columns\nquestion_35_B = df_20[df_20.columns[pd.Series(df_20.columns).str.startswith('Q35_B_')]].columns\n\ndf_20['language_count'] = df_20[question_7].count(axis=1)\ndf_20['ide_count'] = df_20[question_9].count(axis=1)\ndf_20['notebook_count'] = df_20[question_10].count(axis=1)\ndf_20['hardware_count'] = df_20[question_12].count(axis=1)\ndf_20['viz_lib_count'] = df_20[question_14].count(axis=1)\ndf_20['ml_framework_count'] = df_20[question_16].count(axis=1)\ndf_20['ml_algo_count'] = df_20[question_17].count(axis=1)\ndf_20['cv_method_count'] = df_20[question_18].count(axis=1)\ndf_20['nlp_method_count'] = df_20[question_19].count(axis=1)\ndf_20['role_activities_count'] = df_20[question_23].count(axis=1)\n\ndf_20['cloud_plat_count'] = df_20[question_26_A].count(axis=1)\ndf_20['cloud_prod_count'] = df_20[question_27_A].count(axis=1)\ndf_20['ml_prod_count'] = df_20[question_28_A].count(axis=1)\ndf_20['bigdata_prod_count'] = df_20[question_29_A].count(axis=1)\ndf_20['bi_prod_count'] = df_20[question_31_A].count(axis=1)\ndf_20['auto_ml_count'] = df_20[question_33_A].count(axis=1)\ndf_20['auto_ml_regular_count'] = df_20[question_34_A].count(axis=1)\ndf_20['ml_manage_count'] = df_20[question_35_A].count(axis=1)\n\ndf_20['deploy_count'] = df_20[question_36].count(axis=1)\ndf_20['course_plat_count'] = df_20[question_37].count(axis=1)\ndf_20['media_plat_count'] = df_20[question_39].count(axis=1)\n\ndf_20['f_cloud_plat_count'] = df_20[question_26_B].count(axis=1)\ndf_20['f_cloud_prod_count'] = df_20[question_27_B].count(axis=1)\ndf_20['f_ml_prod_count'] = df_20[question_28_B].count(axis=1)\ndf_20['f_bigdata_prod_count'] = df_20[question_29_B].count(axis=1)\ndf_20['f_bi_prod_count'] = df_20[question_31_B].count(axis=1)\ndf_20['f_auto_ml_count'] = df_20[question_33_B].count(axis=1)\ndf_20['f_auto_ml_regular_count'] = df_20[question_34_B].count(axis=1)\ndf_20['f_ml_manage_count'] = df_20[question_35_B].count(axis=1)","b87969ca":"cols = [question_7, question_9, question_10, question_12, question_14,\n        question_16, question_17, question_18, question_19, question_23,\n        question_26_A, question_27_A, question_28_A, question_29_A, question_31_A,\n        question_33_A, question_34_A, question_35_A, question_36, question_37,\n        question_39, question_26_B, question_27_B, question_28_B, question_29_B,\n        question_31_B, question_33_B, question_34_B, question_35_B]\n    \ncols_id = ['question_7', 'question_9', 'question_10', 'question_12', 'question_14',\n    'question_16', 'question_17', 'question_18', 'question_19', 'question_23',\n    'question_26_A', 'question_27_A', 'question_28_A','question_29_A', 'question_31_A',\n    'question_33_A', 'question_34_A', 'question_35_A', 'question_36', 'question_37', 'question_39',\n    'question_26_B', 'question_27_B', 'question_28_B', 'question_29_B',\n    'question_31_B', 'question_33_B', 'question_34_B', 'question_35_B']\n","e022f7c6":"for i in range(len(cols)):\n    df_20[cols_id[i]] = df_20[cols[i]].apply(lambda row: ', '.join(row.dropna().values.astype(str)), axis=1)\n    df_20.drop(cols[i], axis=1, inplace=True)","a4a709bf":"df_20.columns = ['time_in_seconds', \n                 'age_range', \n                 'gender', \n                 'country',\n                 'education',\n                 'title',\n                 'coding_years', \n                 'learn_first_recommendation',\n                 'often_computing_platform',\n                 'tpu_avg',\n                 'ml_years', \n                 'company_size', \n                 'data_science_workers', \n                 'business_using_ml',\n                 'yearly_salary', \n                 'ml_spending', \n                 'often_bigdata_products',\n                 'often_bi_tools',\n                 'data_primary_tool',\n              'language_count', \n                 'ide_count',\n                 'notebook_count',\n                 'hardware_count',\n                 'viz_lib_count',\n                 'ml_framework_count',\n                 'ml_algo_count', \n                 'cv_method_count',\n                 'nlp_method_count',\n                 'role_activities_count',\n                 'cloud_plat_count',\n                 'cloud_prod_count',\n                 'ml_prod_count',\n                 'bigdata_prod_count',\n                 'bi_prod_count',\n                 'auto_ml_count',\n                 'auto_ml_regular_count',\n                 'ml_manage_count',\n                 'deploy_count',\n                 'course_plat_count',\n                 'media_plat_count',\n                 'f_cloud_plat_count', \n                 'f_cloud_prod_count',\n                 'f_ml_prod_count',\n                 'f_bigdata_prod_count',\n                 'f_bi_prod_count',\n                 'f_auto_ml_count',\n                 'f_auto_ml_regular_count',\n                 'f_manage_ml_count',\n              'combined_lang', \n                 'combined_IDE', \n                 'combined_notebook',\n                 'combined_HW',\n                 'combined_libs',\n              'combined_ml_framework',\n                 'combined_ml_algo',\n                 'combined_cv_method',\n                 'combined_nlp_method',\n                 'combined_work_activities',\n              'combined_cloud_platform',\n                 'combined_cloud_prod',\n                 'combined_ml_prod',\n                 'combined_bigdata_prod',\n                 'combined_bi',\n              'combined_auto_ml',\n                 'combined_auto_ml_regular',\n                 'combined_ml_manage',\n                 'combined_deploy',\n                 'combined_course_plat',\n              'combined_media_plat', \n                 'combined_f_cloud_plat',\n                 'combined_f_cloud_prod',\n                 'combined_f_ml_prod',\n                 'combined_f_bigdata_prod', \n              'combined_f_bi_prod',\n                 'combined_f_automl_cat', \n                 'combined_f_automl_tool',\n                 'combined_f_manage_ml']","db22d7ff":"df_21 = pd.read_csv(\"..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\", header=[0,1], low_memory=False)","513b7d9f":"merge_col_name(df_21)","00f30f49":"question_7 = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q7_')]].columns\nquestion_9 = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q9_')]].columns\nquestion_10 = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q10_')]].columns\nquestion_12 = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q12_')]].columns\nquestion_14 = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q14_')]].columns\nquestion_16 = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q16_')]].columns\nquestion_17 = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q17_')]].columns\nquestion_18 = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q18_')]].columns\nquestion_19 = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q19_')]].columns\nquestion_24 = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q24_')]].columns\n\nquestion_27_A = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q27_A_')]].columns\nquestion_29_A = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q29_A_')]].columns \nquestion_30_A = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q30_A_')]].columns\nquestion_31_A = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q31_A_')]].columns\nquestion_32_A = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q32_A_')]].columns\nquestion_34_A = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q34_A_')]].columns\nquestion_36_A = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q36_A_')]].columns\nquestion_37_A = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q37_A_')]].columns\nquestion_38_A = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q38_A_')]].columns\n\nquestion_39 = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q39_')]].columns\nquestion_40 = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q40_')]].columns\nquestion_42 = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q42_')]].columns\n\nquestion_27_B = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q27_B_')]].columns \nquestion_29_B = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q29_B_')]].columns \nquestion_30_B = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q30_B_')]].columns\nquestion_31_B = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q31_B_')]].columns\nquestion_32_B = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q32_B_')]].columns\nquestion_34_B = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q34_B_')]].columns\nquestion_36_B = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q36_B_')]].columns\nquestion_37_B = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q37_B_')]].columns\nquestion_38_B = df_21[df_21.columns[pd.Series(df_21.columns).str.startswith('Q38_B_')]].columns\n\ndf_21['language_count'] = df_21[question_7].count(axis=1)\ndf_21['ide_count'] = df_21[question_9].count(axis=1)\ndf_21['notebook_count'] = df_21[question_10].count(axis=1)\ndf_21['hardware_count'] = df_21[question_12].count(axis=1)\ndf_21['viz_lib_count'] = df_21[question_14].count(axis=1)\ndf_21['ml_framework_count'] = df_21[question_16].count(axis=1)\ndf_21['ml_algo_count'] = df_21[question_17].count(axis=1)\ndf_21['cv_method_count'] = df_21[question_18].count(axis=1)\ndf_21['nlp_method_count'] = df_21[question_19].count(axis=1)\ndf_21['role_activities_count'] = df_21[question_24].count(axis=1)\n\ndf_21['cloud_platform_count'] = df_21[question_27_A].count(axis=1)\ndf_21['cloud_prod_count'] = df_21[question_29_A].count(axis=1)\ndf_21['storage_count'] = df_21[question_30_A].count(axis=1)\ndf_21['ml_prod_count'] = df_21[question_31_A].count(axis=1)\ndf_21['bigdata_prod_count'] = df_21[question_32_A].count(axis=1)\ndf_21['bi_count'] = df_21[question_34_A].count(axis=1)\ndf_21['auto_ml_count'] = df_21[question_36_A].count(axis=1)\ndf_21['auto_ml_regular_count'] = df_21[question_37_A].count(axis=1)\ndf_21['ml_manage_count'] = df_21[question_38_A].count(axis=1)\n\ndf_21['deploy_count'] = df_21[question_39].count(axis=1)\ndf_21['course_plat_count'] = df_21[question_40].count(axis=1)\ndf_21['media_plat_count'] = df_21[question_42].count(axis=1)\n\ndf_21['f_cloud_plat_count'] = df_21[question_27_B].count(axis=1)\ndf_21['f_cloud_prod_count'] = df_21[question_29_B].count(axis=1)\ndf_21['f_storage_count'] = df_21[question_30_B].count(axis=1)\ndf_21['f_ml_prod_count'] = df_21[question_31_B].count(axis=1)\ndf_21['f_bigdata_prod_count'] = df_21[question_32_B].count(axis=1)\ndf_21['f_bi_prod_count'] = df_21[question_34_B].count(axis=1)\ndf_21['f_automl_cat_count'] = df_21[question_36_B].count(axis=1)\ndf_21['f_automl_tool_count'] = df_21[question_37_B].count(axis=1)\ndf_21['f_manage_ml_count'] = df_21[question_38_B].count(axis=1)","afa18fdf":"cols = [question_7, question_9, question_10, question_12, question_14,\nquestion_16, question_17, question_18, question_19, question_24,\nquestion_27_A, question_29_A,  question_30_A,question_31_A, question_32_A,\nquestion_34_A, question_36_A, question_37_A, question_38_A, question_39, question_40,\nquestion_42, question_27_B, question_29_B, question_30_B, question_31_B, question_32_B,\nquestion_34_B, question_36_B, question_37_B, question_38_B]\n    \ncols_id = ['question_7', 'question_9', 'question_10', 'question_12', 'question_14',\n    'question_16', 'question_17', 'question_18', 'question_19', 'question_24',\n    'question_27_A', 'question_29_A', 'question_30_A','question_31_A', 'question_32_A',\n    'question_34_A', 'question_36_A', 'question_37_A', 'question_38_A', 'question_39', 'question_40',\n    'question_42', 'question_27_B', 'question_29_B', 'question_30_B', 'question_31_B', 'question_32_B',\n    'question_34_B', 'question_36_B', 'question_37_B', 'question_38_B']","8688b626":"for i in range(len(cols)):\n    df_21[cols_id[i]] = df_21[cols[i]].apply(lambda row: ', '.join(row.dropna().values.astype(str)), axis=1)\n    df_21.drop(cols[i], axis=1, inplace=True)","a3929a6a":"df_21.columns = ['time_in_seconds',\n              'age_range',\n              'gender',\n              'country',\n              'education',\n              'title',\n              'coding_years',\n              'learn_first_recommendation',\n              'often_computing_platform',\n              'tpu_avg',\n              'ml_years',\n              'industry',\n              'company_size',\n              'data_science_workers',\n              'business_using_ml',\n              'yearly_salary',\n              'ml_spending',\n              'best_user_experience_cloud_platforms',\n              'often_bigdata_products',\n              'often_bi_tools',\n              'data_primary_tool',\n              'language_count', \n                 'ide_count',\n                 'notebook_count',\n                 'hardware_count',\n                 'viz_lib_count',\n                 'ml_framework_count',\n                 'ml_algo_count',\n                 'cv_method_count',\n                 'nlp_method_count',\n                 'role_activities_count',\n                 'cloud_plat_count',\n                 'cloud_prod_count',\n                 'storage_count',\n                 'ml_prod_count',\n                 'bigdata_prod_count',\n                 'bi_prod_count',\n                 'auto_ml_count',\n                 'auto_ml_regular_count',\n                 'ml_manage_count',\n                 'deploy_count',\n                 'course_plat_count',\n                 'media_plat_count',\n                 'f_cloud_plat_count',\n                 'f_cloud_prod_count',\n                 'f_storage_count', \n                 'f_ml_prod_count',\n                 'f_bigdata_prod_count',\n                 'f_bi_prod_count', \n                 'f_automl_cat_count',\n                 'f_automl_tool_count',\n                 'f_manage_ml_count', \n              'combined_lang', \n                 'combined_IDE',\n                 'combined_notebook',\n                 'combined_HW',\n                 'combined_libs',\n              'combined_ml_framework',\n                 'combined_ml_algo',\n              'combined_cv_method',\n                 'combined_nlp_method',\n                 'combined_work_activities',\n              'combined_cloud_platform', \n                 'combined_cloud_prod',\n                 'combined_storage', \n                 'combined_ml_prod',\n              'combined_bigdata_prod',\n                 'combined_bi',\n                 'combined_auto_ml',\n              'combined_auto_ml_regular',\n                 'combined_ml_manage',\n                 'combined_deploy',\n              'combined_course_plat', \n                 'combined_media_plat',\n                 'combined_f_cloud_plat',\n              'combined_f_cloud_prod', \n                 'combined_f_storage_prod',\n                 'combined_f_ml_prod',\n              'combined_f_bigdata_prod', \n                 'combined_f_bi_prod',\n                 'combined_f_automl_cat',\n              'combined_f_automl_tool', \n                 'combined_f_manage_ml']","11b711d0":"def modify_tpu(df):\n    df['tpu_avg'] = df['tpu_avg'].apply(\n        lambda x: '6-25 times' if x=='6-24 times'\n        else '> 25 times' if x=='More than 25 times'\n        else x\n    )\n\nmodify_tpu(df_19)\nmodify_tpu(df_20)\nmodify_tpu(df_21)","6b0bd3d2":"def modify_ml_years(df):\n    df['ml_years'] = df['ml_years'].apply(\n        lambda x: 'Never' if x=='I do not use machine learning methods'\n        else '10-20 years' if x=='10-15 years'\n        else '20+ years' if x=='20 or more years'\n        else '<1 year' if x=='Under 1 year' or x=='< 1 years'\n        else x\n    )\n\nmodify_ml_years(df_19)\nmodify_ml_years(df_20)\nmodify_ml_years(df_21)","dea12a24":"def modify_coding_years(df):\n    df['coding_years'] = df['coding_years'].apply(\n        lambda x: 'Never' if x=='I have never written code'\n        else '1-2 years' if x=='1-3 years'\n        else '<1 year' if x=='Under 1 year' or x=='< 1 years'\n        else x\n    )\n\nmodify_coding_years(df_19)\nmodify_coding_years(df_20)\nmodify_coding_years(df_21)","1918643a":"def modify_gender(df):\n    df['gender'] = df['gender'].apply(\n        lambda x: 'Man' if x=='Male'\n        else 'Woman' if x == 'Female'\n        else 'Wont reveal' if x == 'Prefer not to say'\n        else 'Self-describe' if x == 'Prefer to self-describe'\n        else x\n    )\n\nmodify_gender(df_19)\nmodify_gender(df_20)\nmodify_gender(df_21)","c9f8fbff":"def modify_title(df):\n    df['title'] = df['title'].apply(\n        lambda x: 'Not employed' if x=='Currently not employed'\n        else 'Product\/Project Manager' if x == 'Program\/Project Manager' or x == 'Product Manager'\n        else x\n    )\n\nmodify_title(df_19)\nmodify_title(df_20)\nmodify_title(df_21)","a5c97040":"def modify_education(df):\n    df['education'] = df['education'].apply(\n        lambda x: 'Some college\/university<br>study without earning<br>a bachelor\u2019s degree' if x=='Some college\/university study without earning a bachelor\u2019s degree'\n        else 'No formal<br>education past<br>high school' if x == 'No formal education past high school'\n        else 'Professional doctorate' if x == 'Professional degree'\n        else x\n    )\n\nmodify_education(df_19)\nmodify_education(df_20)\nmodify_education(df_21)","354e3139":"# rename countries to match shapefile and perform further cleanup \ndef modify_country(df):\n    df['country'] = df['country'].apply(\n        lambda x: 'Iran' if x=='Iran, Islamic Republic of...'\n        else 'United States' if x=='United States of America'\n        else 'United Kingdom' if x=='United Kingdom of Great Britain and Northern Ireland'\n        else 'Hong Kong' if x=='Hong Kong (S.A.R.)'\n        else 'Undisclosed' if x=='I do not wish to disclose my location'\n        else x\n    )\n\nmodify_country(df_19)\nmodify_country(df_20)\nmodify_country(df_21)","5cb2ab56":"def break_range(x, df):\n    df[x].fillna('-', inplace=True)\n    df[x] = df[x].str.replace(r'[^\\d-]', '', regex=True)\n\n    new_col = x + '_avg'\n    for i in range(df.shape[0]):\n        if(df[x][i] == '-'):\n            df.at[i,new_col] = np.NaN\n        elif(df[x][i].find('-') != -1):\n            min_year = list(map(int, df[x][i].split('-')))[0]\n            max_year = list(map(int, df[x][i].split('-')))[1]\n            df.at[i,new_col] = (min_year + max_year)\/2\n        elif(df[x][i]==''):\n            df.at[i,new_col] = 0\n        else:\n            df.at[i,new_col] = int(df[x][i])\n","f9515a40":"for df in [df_19, df_20, df_21]:    \n    break_range('age_range', df)\n    break_range('yearly_salary', df)\n    break_range('coding_years', df)\n    break_range('ml_years', df)\n    break_range('company_size', df)\n    break_range('data_science_workers', df)\n    break_range('ml_spending', df)","71d4bbc5":"# check percentage of nulls in all columns and drop those with 50% null values\ndef drop_50_null(df):\n    nulls = (df.isna().sum()\/df.shape[0]).reset_index(name='perc')\n    nulls_todrop = nulls[nulls['perc']>=0.5]['index']\n\n    df.drop(nulls_todrop, axis=1, inplace=True)\n    \ndrop_50_null(df_19)\ndrop_50_null(df_20)\ndrop_50_null(df_21)","1a151c68":"country_region = pd.read_csv('..\/input\/kaggle-surveys\/country_region.csv')","6d4d9423":"df_19.to_csv('.\/df_19.csv', index=False)\ndf_20.to_csv('.\/df_20.csv', index=False)\ndf_21.to_csv('.\/df_21.csv', index=False)","b13f051f":"## Data Preprocessing"}}