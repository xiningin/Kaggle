{"cell_type":{"a8309341":"code","077fd8fe":"code","c338b121":"code","3c759a4a":"code","c2e16e9b":"code","2cd70257":"code","e116eefe":"code","155e1ac1":"code","a2e6dc82":"code","292b7212":"code","4178a9a2":"code","711c46cb":"code","3c07847e":"code","0406ee89":"code","973c517b":"code","30eee946":"code","b01c9094":"markdown","1f7e0968":"markdown"},"source":{"a8309341":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","077fd8fe":"#read data\ndata = pd.read_csv(\"..\/input\/data.csv\")","c338b121":"data.tail() #tail is opposide head","3c759a4a":"#We can drop some columns\ndata.drop([\"id\",\"Unnamed: 32\"],axis = 1,inplace = True)","c2e16e9b":"data.info()","2cd70257":"#Split Data as M&B\nM = data[data.diagnosis == \"M\"]\nB = data[data.diagnosis == \"B\"]","e116eefe":"#Visualization, Scatter Plot\n\nplt.scatter(M.radius_mean,M.area_mean,color = \"Black\",label=\"Malignant\",alpha=0.2)\nplt.scatter(B.radius_mean,B.area_mean,color = \"Orange\",label=\"Benign\",alpha=0.3)\nplt.xlabel(\"Radius Mean\")\nplt.ylabel(\"Area Mean\")\nplt.legend()\nplt.show()\n\n#We appear that it is clear segregation.","155e1ac1":"#Visualization, Scatter Plot\n\nplt.scatter(M.radius_mean,M.texture_mean,color = \"Black\",label=\"Malignant\",alpha=0.2)\nplt.scatter(B.radius_mean,B.texture_mean,color = \"Lime\",label=\"Benign\",alpha=0.3)\nplt.xlabel(\"Radius Mean\")\nplt.ylabel(\"Texture Mean\")\nplt.legend()\nplt.show()","a2e6dc82":"#change M & B \ndata.diagnosis = [1 if each == \"M\" else 0 for each in data.diagnosis]\n#seperate data as x (features) & y (labels)\ny= data.diagnosis.values\nx1= data.drop([\"diagnosis\"],axis= 1) #we remowe diagnosis for predict","292b7212":"#normalization\nx = (x1-np.min(x1))\/(np.max(x1)-np.min(x1))","4178a9a2":"#Train-Test-Split \nfrom sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest =  train_test_split(x,y,test_size=0.3,random_state=42)","711c46cb":"#Create-KNN-model\nfrom sklearn.neighbors import KNeighborsClassifier\nKNN = KNeighborsClassifier(n_neighbors = 20) #n_neighbors = K value\nKNN.fit(xtrain,ytrain) #learning model\nprediction = KNN.predict(xtest)","3c07847e":"print(\"{}-NN Score: {}\".format(20,KNN.score(xtest,ytest)))","0406ee89":"#Find Optimum K value\nscores = []\nfor each in range(1,50):\n    KNNfind = KNeighborsClassifier(n_neighbors = each)\n    KNNfind.fit(xtrain,ytrain)\n    scores.append(KNNfind.score(xtest,ytest))\n    \nplt.plot(range(1,50),scores,color=\"black\")\nplt.xlabel(\"K Values\")\nplt.ylabel(\"Score(Accuracy)\")\nplt.show()","973c517b":"#Create-KNN-model\nfrom sklearn.neighbors import KNeighborsClassifier\nKNN = KNeighborsClassifier(n_neighbors = 3) #n_neighbors = K value\nKNN.fit(xtrain,ytrain) #learning model\nprediction = KNN.predict(xtest)\n\nprint(\"{}-NN Score: {}\".format(3,KNN.score(xtest,ytest)))","30eee946":"#Create-KNN-model\nfrom sklearn.neighbors import KNeighborsClassifier\nKNN = KNeighborsClassifier(n_neighbors = 4) #n_neighbors = K value\nKNN.fit(xtrain,ytrain) #learning model\nprediction = KNN.predict(xtest)\nprint(\"{}-NN Score: {}\".format(4,KNN.score(xtest,ytest)))","b01c9094":"**KNN Algorithms**\n\n----Content\n\n1-Import Dataset\n\n2-Investigation Dataset\n\n3-Visualizaiton Dataset\n\n4-What is KNN algoritms?\n\n5-KNN with Sklearn\n\n6-Conclusion","1f7e0968":"# Conclusion\n\n1-Thank you for investigation my kernel.\n\n2-I tried K value as 3,4,5 and I find 4 optimum value.\n\n3-Finally, I found optimum value by aid of for loop.\n\n# If you like this kernel, Please Upvote :) Thanks"}}