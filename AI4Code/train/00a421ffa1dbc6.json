{"cell_type":{"1db86801":"code","619fab3e":"code","d80b578f":"code","d22760cb":"code","9a869244":"code","bcfd0a24":"code","bdc021d1":"code","a1b2d3b0":"code","c70c4424":"code","2b7b1b80":"code","f8184039":"code","95ccb8f1":"code","ee05cb30":"code","73cc3380":"code","d980568c":"code","466ff374":"markdown","618ff343":"markdown","9e90e17f":"markdown","31b577f7":"markdown","623554c1":"markdown","8fd6b0f1":"markdown","c0061c6a":"markdown","f29211b4":"markdown","8fa4e2ba":"markdown","e02757a3":"markdown","2e9589ff":"markdown","9b312226":"markdown"},"source":{"1db86801":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np","619fab3e":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)","d80b578f":"from pathlib import Path\n\ndata_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'","d22760cb":"training_tasks = sorted(os.listdir(training_path))\nprint(training_tasks[:3])","9a869244":"task_file = str(training_path \/ '00d62c1b.json')\n\nwith open(task_file, 'r') as f:\n    task = json.load(f)\n\nprint(task.keys())","bcfd0a24":"n_train_pairs = len(task['train'])\nn_test_pairs = len(task['test'])\n\nprint(f'task contains {n_train_pairs} training pairs')\nprint(f'task contains {n_test_pairs} test pairs')","bdc021d1":"display(task['train'][0]['input'])\ndisplay(task['train'][0]['output'])","a1b2d3b0":"def plot_task(task):\n    \"\"\"\n    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"\n    cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    fig, axs = plt.subplots(1, 4, figsize=(15,15))\n    axs[0].imshow(task['train'][0]['input'], cmap=cmap, norm=norm)\n    axs[0].axis('off')\n    axs[0].set_title('Train Input')\n    axs[1].imshow(task['train'][0]['output'], cmap=cmap, norm=norm)\n    axs[1].axis('off')\n    axs[1].set_title('Train Output')\n    axs[2].imshow(task['test'][0]['input'], cmap=cmap, norm=norm)\n    axs[2].axis('off')\n    axs[2].set_title('Test Input')\n    axs[3].imshow(task['test'][0]['output'], cmap=cmap, norm=norm)\n    axs[3].axis('off')\n    axs[3].set_title('Test Output')\n    plt.tight_layout()\n    plt.show()","c70c4424":"plot_task(task)","2b7b1b80":"import scipy.ndimage.morphology as mp\n\ncmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\nfig, axs = plt.subplots(1, 12, figsize=(15,5))\n\n\ndef findHoles(im):\n    Filled = mp.binary_fill_holes(im)\n    Holes = Filled.astype(int) - (im > 0).astype(int)\n    return Holes\n\nim = np.array(task['train'][0]['input'])\nout = np.array(task['train'][0]['output'])\nHoles = findHoles(im)\naxs[0].imshow(im, cmap=cmap, norm=norm)\naxs[0].set_title('input')\naxs[1].imshow(out, cmap=cmap, norm=norm)\naxs[1].set_title('output')\n\nfor FillValue in range(10):\n    Filled = np.where(Holes, FillValue, im)\n    axs[FillValue+2].imshow(Filled, cmap=cmap, norm=norm)\n    axs[FillValue+2].set_title(FillValue)\n    if (Filled==out).all():\n        print (FillValue)","f8184039":"def getFillValue(im, out, maxValue=10):\n    Holes = findHoles(im)\n    for FillValue in range(maxValue+1):\n        Filled = np.where(Holes, FillValue, im)\n        if (Filled==out).all():\n            return FillValue\n    return 0","95ccb8f1":"submission = pd.read_csv(data_path \/ 'sample_submission.csv', index_col='output_id')\ndisplay(submission.head())","ee05cb30":"def flattener(pred):\n    str_pred = str([row for row in pred])\n    str_pred = str_pred.replace(', ', '')\n    str_pred = str_pred.replace('[[', '|')\n    str_pred = str_pred.replace('][', '|')\n    str_pred = str_pred.replace(']]', '|')\n    return str_pred","73cc3380":"example_grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ndisplay(example_grid)\nprint(flattener(example_grid))","d980568c":"def getDefaultPred(task, pair_id):\n    data = task['test'][pair_id]['input'] # test pair input\n    # for the first guess, predict that output is unchanged\n    pred_1 = flattener(data)\n    # for the second guess, change all 0s to 5s\n    data = [[5 if i==0 else i for i in j] for j in data]\n    pred_2 = flattener(data)\n    # for the last gues, change everything to 0\n    data = [[0 for i in j] for j in data]\n    pred_3 = flattener(data)\n    # concatenate and add to the submission output\n    pred = pred_1 + ' ' + pred_2 + ' ' + pred_3 + ' ' \n    return pred\n\nFillerCount = 0\nfor output_id in submission.index:\n    task_id = output_id.split('_')[0]\n    pair_id = int(output_id.split('_')[1])\n    f = str(test_path \/ str(task_id + '.json'))\n    with open(f, 'r') as read_file:\n        task = json.load(read_file)\n    if all([np.array(tr['input']).shape == np.array(tr['output']).shape for tr in task['train']]):\n        FillValues = np.unique([getFillValue(np.array(tr['input']), np.array(tr['output'])) for tr in task['train']])\n        if len(FillValues)==1 and FillValues[0] > 0:\n            print('Found a Filler')\n            FillerCount += 1\n            FillValue = FillValues[0]\n            im = np.array(task['test'][pair_id]['input'])\n            Holes = findHoles(im)\n            Filled = np.where(Holes, FillValue, im).tolist()\n            pred = flattener(Filled)\n        else:\n            pred = getDefaultPred(task, pair_id)\n    else:\n        pred = getDefaultPred(task, pair_id)\n    \n    submission.loc[output_id, 'output'] = pred\n\nsubmission.to_csv('submission.csv')\nprint(f'{FillerCount} Fillers found in total')","466ff374":"# Using the correct prediction format","618ff343":"Drilling into the first `train` input-output pair, we can see the grids are expressed as 2d lists with integers 0-9.","9e90e17f":"# Illustrating the Filler Rule","31b577f7":"In each task, there are two dictionary keys, `train` and `test`. You learn the pattern from the train input-output pairs, and then apply the pattern to the `test` input, to predict an output.","623554c1":"Tasks have multiple `train` input-output pairs. Most tasks have a single `test` input-output pair, although some have more than one.","8fd6b0f1":"## Function to plot the first train\/test input\/output pairs of a task\n\nYou can use this function to plot the first `train` and `test` grids. The color aligns with what is found on the ARC app. Note though, the ARC app presents the grids to scale, where these display the grids in the same size, regardless of their dimension.","c0061c6a":"The `output_id` is the `id` of the task, followed by the index of the `test` input that you should use to make your prediction. The `output` is the predicted output of the corresponding `test` input, reformatted into a string representation. (You can make three predictions per `output_id`, delineated by a space.) Use the following function to convert from a 2d python list to the string representation.","f29211b4":"# Sample Submission Output Plus Filler Rule\n\nThis goes over the test files and when the input shape and output shapes are equal checks the filler rule, if it checks, it creates the filled output.","8fa4e2ba":"I like to use the `Path` class for my paths.","e02757a3":"# Abstraction and Reasoning Starter Notebook\n\nThis notebook will get you started on on the basics of this competition","2e9589ff":"The `training` folder has 400 JSON tasks. The names of the first three are shown below.","9b312226":"# Exploiting the Filler Example\nThis notebook is based on the starter notebook and the sample that is plotted in it where holes are filled with a new color. It explotes this simple rule to generate outputs for the test set. If there is any sample with this rule in the test set, we would get a better score than 1."}}