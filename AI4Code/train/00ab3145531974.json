{"cell_type":{"fd2acc5a":"code","bac30b0d":"code","823edabd":"code","679519e4":"code","6b6ce4ed":"code","c9ac906c":"code","8558954f":"code","48be1b62":"code","bb066558":"code","d88b2a70":"code","a683b71a":"code","b15d39be":"code","36f20a3a":"code","b3cc7081":"code","d42932ff":"markdown","02687fc5":"markdown","5194ddc8":"markdown","79fe565a":"markdown","23ce1fd5":"markdown","b5099f59":"markdown","9455225e":"markdown","e2a20126":"markdown"},"source":{"fd2acc5a":"import sqlite3\nimport pandas as pd\n\n# Establish the connection to the db\ncnx = sqlite3.connect('..\/input\/database.sqlite')","bac30b0d":"# Loading the players table\nplayers = pd.read_sql_query(\"SELECT * from Player\", cnx)\n\n# some basic validation\nprint(len(players['player_api_id']))\nprint(len(players['player_api_id'].unique()))","823edabd":"player_attributes = pd.read_sql_query(\"SELECT * from Player_Attributes\", cnx)\nplayer_attributes.head()","679519e4":"player_attributes['date'] = pd.to_datetime(player_attributes['date'])\nplayer_attribute_dates = player_attributes[['id', 'player_api_id', 'date']]","6b6ce4ed":"pd.options.mode.chained_assignment = None\nplayer_attribute_dates[\"rank\"] = player_attribute_dates.groupby(\"player_api_id\")[\"date\"].rank(method=\"first\", ascending=False)\nplayer_attribute_dates = player_attribute_dates[player_attribute_dates['rank'] == 1.0]","c9ac906c":"assert len(player_attributes['player_api_id'].unique()) == len(player_attribute_dates['player_api_id'])\nplayer_attributes.head()","8558954f":"players_attrs = player_attribute_dates.merge(player_attributes, on=['id', 'player_api_id', 'date'], how='left')\nplayer_info = pd.merge(players_attrs, players, on=['player_api_id', 'player_fifa_api_id'], how='left')\nplayer_info.head()","48be1b62":"%%capture\n!jupyter lab clean\n!pip install ipywidgets\n!jupyter nbextension enable --py widgetsnbextension","bb066558":"%matplotlib notebook\n%matplotlib inline\nimport seaborn as sns\nfrom ipywidgets import *\nimport numpy as np\nimport functools\nimport matplotlib.pyplot as plt","d88b2a70":"required_columns = ['player_name', 'height', 'weight']\nrequired_numeric_columns = ['overall_rating',\n       'potential', 'crossing', 'finishing', 'heading_accuracy',\n       'short_passing', 'volleys', 'dribbling', 'curve', 'free_kick_accuracy',\n       'short_passing', 'volleys', 'dribbling', 'curve', 'free_kick_accuracy',\n       'long_passing', 'ball_control', 'acceleration', 'sprint_speed',\n       'agility', 'reactions', 'balance', 'shot_power', 'jumping', 'stamina',\n       'strength', 'long_shots', 'aggression', 'interceptions', 'positioning',\n       'vision', 'penalties', 'marking', 'standing_tackle', 'sliding_tackle',\n       'gk_diving', 'gk_handling', 'gk_kicking', 'gk_positioning',\n       'gk_reflexes']","a683b71a":"def conjunction(*conditions):\n    return functools.reduce(np.logical_or, conditions)","b15d39be":"def get_desc():\n    return \"\"\"\nThis is an interactive dashboard to visualize the football dataset. \nThe output is a simple table with the player name, height and weight.\n\nThe default value for all the sliders are set to 0.\n\n<h4>How to use this dashboard?<\/h4>\n<h7> Let us say you want to know the list of players whose crossing rating is above 90 and whose overall rating is above 70.\nTo find that, move the slider for crossing to 90 and the slider for overall rating to 70. The table below will change dynamically.\nThe table is sorted in descending order with the column\/label that has the maximum value. In this example, the output is\nsorted in descending order with the \"crossing\" column followed by the \"overall rating\" column.\n\nBy default the output table will show the player_name, height, weight and overall_rating. You can add more columns to show by \nchoosing the columns in the multiple selection box using the \"ctrl\" or \"shift\" key.\n\"\"\"","36f20a3a":"def common_function(data):\n    required_columns = ['player_name', 'height', 'weight']\n    columns_to_display = required_columns + [column for column in data['columns_to_show']]\n    del data['columns_to_show']\n    if 'filter_by' in data.keys():\n        del data['filter_by']\n    columns = data.keys()\n    comps = [player_info[column] > data[column] for column in columns]\n    result = comps[0]\n    for comp in comps[1:]:\n        result &= comp\n    df = player_info[result]\n    re_order_numeric_columns = [item[0] for item in sorted(data.items(), key=lambda x:x[1], reverse=True)]\n    df.sort_values(re_order_numeric_columns, ascending=False,inplace=True)\n    return df\n","b3cc7081":"def plot(**data):\n    columns_to_display = required_columns + [column for column in data['columns_to_show']]\n    df = common_function(data)\n    display(df[columns_to_display])\n        \ndef height_plot(**data):\n    df = common_function(data)\n    plt.figure(figsize=(8, 3))\n    chart = sns.countplot(data=df, x='height')\n    chart.set_xticklabels(chart.get_xticklabels(), rotation=65, horizontalalignment='right')\n    title = f\"Height Distribution\"\n    chart.set_title(title)\n    \ndef weight_plot(**data):\n    df = common_function(data)\n    plt.figure(figsize=(8, 3))\n    chart = sns.countplot(data=df, x='weight')\n    chart.set_xticklabels(chart.get_xticklabels(), rotation=65, horizontalalignment='right')\n    title = f\"Weight Distribution\"\n    chart.set_title(title)\n\n\nsliders = {}\nplt.style.use('seaborn')\n%config InlineBackend.figure_format = 'svg'\n\nstyle = {'description_width': 'initial'}\nfor column in required_numeric_columns:\n    sliders[column] = IntSlider(description=f'{column}', min=0, max=100, step=1, value=0, style=style)\nslider_displays = widgets.VBox(list(sliders.values()))\n\ncolumns_to_show = widgets.SelectMultiple(\n    options=required_numeric_columns,\n    value=['overall_rating'],\n    rows=4,\n    description='Columns',\n    disabled=False,\n    layout=widgets.Layout(border='1px solid black')\n)\n\n\ncolumns_to_show_checkboxes = [widgets.Checkbox(value=False, description=column, disabled=False,  style=style) \n                              for column in required_numeric_columns]\n\nsliders['columns_to_show'] = columns_to_show\n\ndashboard_desc = get_desc()\n\n\ntitle = widgets.HTML(\n    value=\"<H2 style=\\\"font-family:Verdana\\\"><center>Interactive visualization of the Football dataset<\/center><\/H2>\",\n)\ndescription = widgets.HTML(\n    value=f\"<p style=\\\"font-family:Arial\\\">{dashboard_desc}<\/p><br>\",\n)\n\ncolumns_to_show_title = widgets.HTML(\n    value=\"<H5 style=\\\"font-family:Verdana\\\"><left>Columns to show<\/left><\/H5>\",\n)\nbreak_widget = widgets.HTML(\n    value=\"<br>\",\n)\n\nout = Output(layout=Layout(border='1px solid black'))\n\nplot_output = widgets.interactive_output(plot, sliders)\nwith out:\n    display(plot_output)\n    \nh_pixels = '200px'\navg_height_plot = widgets.interactive_output(height_plot, sliders)\nh_out = Output(layout=Layout(margin_left=\"0px\",\n    border='1px solid black',                       \n    align_items='stretch'))\nwith h_out:\n    display(avg_height_plot)\n\navg_weight_plot = widgets.interactive_output(weight_plot, sliders)\nw_out = Output(layout=Layout(margin_left=\"0px\",\n    border='1px solid black',\n    align_items='stretch'))\nwith w_out:\n    display(avg_weight_plot)\n\ncolumn_1 = VBox([slider_displays])\ncolumn_2 = VBox([HBox([out]), h_out, w_out], layout=Layout(margin_left=\"0px\",\n    border='1px solid black'))\nline_break = widgets.Output(layout={'border': '1px solid black'})\ntitle_widget = widgets.HBox([title])\ndescription_widget = widgets.HBox([description])\ndashboard = widgets.VBox([\n    title_widget,\n    description_widget,\n    line_break,\n    columns_to_show,\n    HBox([column_1, column_2])])\ndisplay(dashboard)","d42932ff":"### Import necessary libraries","02687fc5":"Having a glimpse of how the data looks like. It appears that the player attributes dataset was being updated regularly and so there is a latest date for each player attribute. Let us obtain the most recent player attribute.\n","5194ddc8":"Install necessary libraries","79fe565a":"### Load the player attributes data","23ce1fd5":"### Get the player info","b5099f59":"# Interactive analysis of the football dataset\nThe idea is to come up with an interactive dashboard where users of the dashboards can view players who are good at certain \nskills. For e.g. The list of players who are good at crossing, shooting etc.\n\n#### Note: Please make a fork of this notebook to play with the interactive dashboard. Kaggle does not render interactive dashboards.","9455225e":"### Build an interactive dashboard","e2a20126":"### Load the players data"}}