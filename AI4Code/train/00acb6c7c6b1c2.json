{"cell_type":{"36a8be81":"code","f0671b7c":"code","8484263c":"code","ab276361":"code","be4946f1":"code","39f74b28":"code","630c6ff2":"code","f7c483c1":"code","49ed6bc1":"code","b051aa28":"code","c607a143":"code","cfd50216":"code","329afaeb":"code","8aa617c3":"code","4a34b4ad":"code","d7bf1317":"code","d8395053":"code","045b0bff":"code","a75cb87d":"code","914f8d28":"code","227f668a":"code","84f3a092":"code","54e8f754":"code","50d3c7c7":"code","f3851f6c":"code","e7ce0d06":"code","d68bd0c4":"code","72af799a":"code","e26c14cc":"code","24cbef3f":"code","f85d5041":"markdown","268d7e81":"markdown","69c640f5":"markdown","0ebd92ee":"markdown","369a7b31":"markdown","183addc9":"markdown","e630acd0":"markdown","d18ef4cc":"markdown","7a5b3e02":"markdown","3bf7b002":"markdown","f5d22eff":"markdown","47af42cb":"markdown","62f8db84":"markdown","2da5759c":"markdown","cfe7093b":"markdown","b7f5ba67":"markdown","57cd867f":"markdown"},"source":{"36a8be81":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\n#\u5408\u5e76\u4e24\u4e2a\u6587\u6863\ndata_train = pd.read_csv('..\/input\/train.csv')\ndata_test = pd.read_csv('..\/input\/test.csv') #\u8fd9\u91cc\u8bfb\u53d6\u7684\u662f\u4e00\u4e2a\u8bfb\u53d6\u7684Pandas\u683c\u5f0f\ncombine = [data_train, data_test] #\u8fd9\u662f\u4e00\u4e2a\u5217\u8868","f0671b7c":"#\u6bcf\u884c\u7f3a\u5931\u503c\n#data_train.shape[1] - data_train.count(axis=1)\n#\u6bcf\u5217\u7f3a\u5931\u503c\ndata_train.shape[0] - data_train.count()\n#\u8fd9\u91cc\u7684\u7ed3\u679c\u548c\u6211\u5728\u535a\u5ba2\u770b\u5230\u7684\u4e0d\u7b26\uff0c\u4f46\u7ecf\u8fc7\u68c0\u67e5\uff0c\u7ed3\u679c\u65e0\u8bef\u3002\u731c\u6d4b\uff1a\u5b98\u65b9\u66f4\u6539\u4e86\u6570\u636e\u96c6","8484263c":"#\u67e5\u770b\u9884\u6d4b\u6837\u672c\u96c6\u5408\u5185\u7f3a\u5931\ndata_test.shape[0] - data_test.count()","ab276361":"data_train.shape","be4946f1":"data_train.columns","39f74b28":"data_train.dtypes","630c6ff2":"#\u6b64\u5904\u8bb0\u5f55\u4e00\u4e2a\u975e\u5e38\u5f3a\u608d\u7684\u67e5\u770b\u7f3a\u5931\u503c\u7684\u65b9\u6cd5\nimport missingno as msno\nmsno.matrix(data_train,figsize=(14,6))#figsize\u5236\u56fe\u5927\u5c0f","f7c483c1":"data_train.head()","49ed6bc1":"#\u65b9\u6cd5\u4e00\uff1a\u586b\u5145\u4e2d\u4f4d\u6570\nage_median = data_train.Age.median()\nage_median","b051aa28":"#\u65b9\u6cd5\u4e8c\uff1a\u6839\u636e\u6bcf\u4e2a\u4eba\u5bf9\u5e94\u7684\u79f0\u8c13\u4e2d\u4f4d\u6570\u586b\u5145\uff0c\u66f4\u52a0\u51c6\u786e\uff0c\u5982miss\u548cMrs\u53ef\u80fd\u5e74\u9f84\u4e0d\u540c\n#1.\u68c0\u67e5\u79f0\u8c13\ncount = 0 #count the number of names without \"Mr.\/Miss.\/Master.\/Dr.\/Mrs.\"\ndef check_if_the_name_including_reguler(dataset,count):\n    for data in dataset.Name:\n        if (\"Mr.\" not in data) & (\"Miss.\" not in data) & (\"Master.\" not in data) & (\"Dr.\" not in data) & (\"Mrs.\" not in data):\n            print(data)\n            count = count +1\n    print(\"\\nthe number of names without 'Mr.\/Miss.\/Master.\/Dr.\/Mrs.' is \" + str(count))\n    return count\n\ncheck_if_the_name_including_reguler(data_train,count)","c607a143":"#\u7edf\u8ba1\u6bcf\u79cd\u79f0\u8c13\u7684\u5e73\u5747\u5e74\u9f84\nage_in = []   #Mr.\/Miss.\/Master.\/Dr.\/Mrs.\nfor i in range(0,5):\n    age_in.insert(0,[0,0])\ndef count_every_call_mid(data_train,age_in):\n    #data_train.ix[\"Miss.\" in data_train.Name]\n    for data in data_train.index:\n        #print(data_train.loc[data,\"Name\"])\n        if \"Mr.\" in data_train.loc[data,\"Name\"]:\n            if not math.isnan(data_train.loc[data,\"Age\"]) :\n                age_in[0][0]+=data_train.loc[data,\"Age\"]\n                age_in[0][1]+=1\n        elif \"Miss.\" in data_train.loc[data,\"Name\"]:\n            if not math.isnan(data_train.loc[data,\"Age\"]) :\n                age_in[1][0]+=data_train.loc[data,\"Age\"]\n                age_in[1][1]+=1\n        elif \"Master.\" in data_train.loc[data,\"Name\"]:\n            if not math.isnan(data_train.loc[data,\"Age\"]) :\n                age_in[2][0]+=data_train.loc[data,\"Age\"]\n                age_in[2][1]+=1\n        elif \"Dr.\" in data_train.loc[data,\"Name\"]:\n            if not math.isnan(data_train.loc[data,\"Age\"]) :\n                age_in[3][0]+=data_train.loc[data,\"Age\"]\n                age_in[3][1]+=1\n        elif \"Mrs.\" in data_train.loc[data,\"Name\"]:\n            if not math.isnan(data_train.loc[data,\"Age\"]) :\n                age_in[4][0]+=data_train.loc[data,\"Age\"]\n                age_in[4][1]+=1\n    return age_in\n\ncount_every_call_mid(data_train,age_in)\nage_median = data_train.Age.median()\nave=[0,0,0,0,0]\nfor i in range(0,5):\n    ave[i]=age_in[i][0]\/age_in[i][1]\n    print(ave[i])#Mr.\/Miss.\/Master.\/Dr.\/Mrs.","cfd50216":"#\u5c06\u5404\u79f0\u547c\u5e74\u9f84\u5e73\u5747\u5e74\u9f84\u586b\u5145\uff0c\u975e\u5e38\u7528\u79f0\u547c\u7528\u5e73\u5747\u5e74\u9f84\u586b\u5145\ndef replace_age_by_mid_of_call(dataset):\n    for data in dataset.index:\n        #print(data_train.loc[data,\"Name\"])\n        if math.isnan(dataset.loc[data,\"Age\"]) :\n            if \"Mr.\" in dataset.loc[data,\"Name\"]:\n                dataset.loc[data,\"Age\"]=ave[0]\n            elif \"Miss.\" in dataset.loc[data,\"Name\"]:\n                dataset.loc[data,\"Age\"]=ave[1]\n            elif \"Master.\" in dataset.loc[data,\"Name\"]:\n                dataset.loc[data,\"Age\"]=ave[2]\n            elif \"Dr.\" in dataset.loc[data,\"Name\"]:\n                dataset.loc[data,\"Age\"]=ave[3]\n            elif \"Mrs.\" in dataset.loc[data,\"Name\"]:\n                dataset.loc[data,\"Age\"]=ave[4]\n            else:\n                dataset.loc[data,\"Age\"]=age_median\nreplace_age_by_mid_of_call(data_train)","329afaeb":"#\u6b64\u5904\u5bf9\u4e8epandas\u8bfb\u53d6\u7684\u6587\u4ef6\u548c\u5217\u8868\u6709\u4e0d\u540c\u7684\u5904\u7406\u683c\u5f0f\n#\u7edf\u8ba1\u6574\u4f53\u5185\u9664\u4e86\u57fa\u672c\u79f0\u547c\"Mr.\/Miss.\/Master.\/Dr.\/Mrs.\"\u4ee5\u5916\u7684\u79f0\u547c\u5360\u603b\u4f53\u79f0\u547c\u7684\u591a\u5c11\ncount = 0\nfor dataset in combine:\n    count = check_if_the_name_including_reguler(dataset,count)\n    print(\"\\n\")","8aa617c3":"#\u7edf\u8ba1\u6240\u6709\u6837\u672c\u4e2d\uff0c\u6bcf\u79cd\u79f0\u8c13\u7684\u5e73\u5747\u5e74\u9f84\uff1a\nage_in = []   #Mr.\/Miss.\/Master.\/Dr.\/Mrs.\nfor i in range(0,5):\n    age_in.insert(0,[0,0])\nfor dataset in combine:\n    age_in = count_every_call_mid(dataset,age_in)\nage_median = data_train.Age.median()\nave=[0,0,0,0,0]\nfor i in range(0,5):\n    ave[i]=age_in[i][0]\/age_in[i][1]\n    print(ave[i])#Mr.\/Miss.\/Master.\/Dr.\/Mrs.","4a34b4ad":"#\u7528\u65b0\u7684\u5e73\u5747\u503c\u586b\u5145\ndef replace_age_by_mid_of_call(dataset):\n    for data in dataset.index:\n        #print(data_train.loc[data,\"Name\"])\n        if math.isnan(dataset.loc[data,\"Age\"]) :\n            if \"Mr.\" in dataset.loc[data,\"Name\"]:\n                dataset.loc[data,\"Age\"]=ave[0]\n            elif \"Miss.\" in dataset.loc[data,\"Name\"]:\n                dataset.loc[data,\"Age\"]=ave[1]\n            elif \"Master.\" in dataset.loc[data,\"Name\"]:\n                dataset.loc[data,\"Age\"]=ave[2]\n            elif \"Dr.\" in dataset.loc[data,\"Name\"]:\n                dataset.loc[data,\"Age\"]=ave[3]\n            elif \"Mrs.\" in dataset.loc[data,\"Name\"]:\n                dataset.loc[data,\"Age\"]=ave[4]\n            else:\n                dataset.loc[data,\"Age\"]=age_median\n\nfor dataset in combine:\n    replace_age_by_mid_of_call(dataset)","d7bf1317":"#\u68c0\u67e5\u6837\u672c\u662f\u5426\u88ab\u586b\u5145\ndata_test.shape[0] - data_test.count()\n#\u68c0\u67e5\u6837\u672c\u662f\u5426\u88ab\u586b\u5145\n#data_train.shape[0] - data_train.count()","d8395053":"#\u65b9\u6cd5\u4e00\uff1a\u76f4\u63a5\u4e22\u5f03\u8be5\u7279\u5f81\n#data_train = data_train.drop(['Cabin'],axis=1)\n#\u6709\u65f6\u5019\u8fd0\u884c\u4e24\u6b21\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a\u540c\u4e00\u4e2a\u7279\u5f81\u65e0\u6cd5\u4e22\u5f03\u4e24\u6b21","045b0bff":"#\u65b9\u6cd5\u4e8c\uff1a\u5229\u7528\ndef replaceCabin(data):\n    data['Cabin'] = data['Cabin'].fillna('X')\n    data['Cabin'] = data['Cabin'].apply(lambda x: str(x)[0])\n    data['Cabin'] = data['Cabin'].replace(['A', 'D', 'E', 'T'], 'M')\n    data['Cabin'] = data['Cabin'].replace(['B', 'C'], 'H')\n    data['Cabin'] = data['Cabin'].replace(['F', 'G'], 'L')\n    data['Cabin'] = data['Cabin'].map({'X': 0, 'L': 1, 'M': 2, 'H': 3}).astype(int)\n\n# def replaceCabin(data):\n#     data['Cabin'] = data['Cabin'].fillna('X')\n#     data['Cabin'] = data['Cabin'].apply(lambda x: str(x)[0])\n# #     data['Cabin'] = data['Cabin'].replace(['A', 'D', 'E', 'T'], 'M')\n# #     data['Cabin'] = data['Cabin'].replace(['B', 'C'], 'H')\n# #     data['Cabin'] = data['Cabin'].replace(['F', 'G'], 'L')\n#     data['Cabin'] = data['Cabin'].map({'X': 0, 'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'T':8}).astype(int) \n\nfor dataset in combine:\n    replaceCabin(dataset)","a75cb87d":"# for dataset in combine:\n#     print(dataset)\n#     if 'male' not in dataset['Sex']:\n#          print(dataset['Sex'])\n#     dataset['Sex'] = dataset['Sex'].map({'female': 1, 'male': 0}).astype(int)\n\n# data_train.head()\ndata_train.replace({'Sex':{'female':1,'male':2}},inplace=True)\n# #\u5904\u7406\u9884\u6d4b\u6837\u672c\u96c6\ndata_test.replace({'Sex':{'female':1,'male':2}},inplace=True)","914f8d28":"#\u65b9\u6cd5\u4e00\uff1a\u9009\u62e9\u5e73\u5747\u503c\u586b\u5145\nfare_median = data_test.Fare.median()\ndata_test['Fare'].fillna(data_test['Fare'].dropna().median(), inplace=True)","227f668a":"#\u62bd\u53d6\u524d\u4e94\u4e2a\u6837\u672c\uff0c\u67e5\u770b\u662f\u5426\u6240\u6709\u7279\u5f81\u5747\u5f97\u5230\u5408\u9002\u5904\u7406\ndata_train.head()","84f3a092":"#\u68c0\u67e5\u9884\u6d4b\u6837\u672c\u96c6\u662f\u5426\u5bf9\u7279\u5f81\u8fdb\u884c\u4e86\u5904\u7406\ndata_test.head()","54e8f754":"# Ticket\ndf = data_train['Ticket'].value_counts()\ndf = pd.DataFrame(df)\ndf = df[df['Ticket'] > 1]\ndf_ticket = df.index.values        #\u5171\u4eab\u8239\u7968\u7684\u7968\u53f7\ntickets = data_train.Ticket.values    #\u6240\u6709\u7684\u8239\u7968\nresult = []\nfor ticket in tickets:\n    if ticket in df_ticket:\n        ticket = 1\n    else:\n        ticket = 0                 #\u904d\u5386\u6240\u6709\u8239\u7968\uff0c\u5728\u5171\u4eab\u8239\u7968\u91cc\u9762\u7684\u4e3a1\uff0c\u5426\u5219\u4e3a0\n    result.append(ticket)\nresults = pd.DataFrame(result)\nresults.columns = ['Ticket_Count']\ndata_train = pd.concat([data_train, results], axis=1)\n\ndf = data_test['Ticket'].value_counts()\ndf = pd.DataFrame(df)\ndf = df[df['Ticket'] > 1]\ndf_ticket = df.index.values        #\u5171\u4eab\u8239\u7968\u7684\u7968\u53f7\ntickets = data_test.Ticket.values    #\u6240\u6709\u7684\u8239\u7968\nresult = []\nfor ticket in tickets:\n    if ticket in df_ticket:\n        ticket = 1\n    else:\n        ticket = 0                 #\u904d\u5386\u6240\u6709\u8239\u7968\uff0c\u5728\u5171\u4eab\u8239\u7968\u91cc\u9762\u7684\u4e3a1\uff0c\u5426\u5219\u4e3a0\n    result.append(ticket)\nresults = pd.DataFrame(result)\nresults.columns = ['Ticket_Count']\ndata_test = pd.concat([data_test, results], axis=1)","50d3c7c7":"# Cabin\nfor dataset in combine:\n    dataset.loc[(dataset.Cabin.isnull()), 'Cabin'] = 0\n    dataset.loc[(dataset.Cabin.notnull()), 'Cabin'] = 1","f3851f6c":"#\u65b9\u6cd5\u4e00\uff1a\u56e0\u4e3a\u53ea\u6709\u4e24\u4e2a\uff0c\u76f4\u63a5\u4e22\u53bb\ndata_train = data_train.dropna(subset=['Embarked'])\n# for data in combine:\n#     data.loc[data['Embarked']=='S']=1\n#     data.loc[data['Embarked']=='C']=2\n#     data.loc[data['Embarked']=='Q']=2\ndata_train = data_train.replace({'Embarked':{'S':1,'C':2,'Q':3}})\ndata_test = data_test.replace({'Embarked':{'S':1,'C':2,'Q':3}})","e7ce0d06":"data_test.shape[0] - data_test.count()","d68bd0c4":"data_train.shape[0] - data_train.count()","72af799a":"#\u7279\u5f81\ndata_test_X  = data_test[['Pclass', 'Sex', 'Age','SibSp', 'Parch', 'Fare', 'Embarked','Ticket_Count','Cabin']]\nX_train = data_train[['Pclass', 'Sex', 'Age','SibSp', 'Parch', 'Fare', 'Embarked','Ticket_Count','Cabin']]\nY_train = data_train['Survived']\nX_test = data_test_X","e26c14cc":"#\u6a21\u578b\u6bd4\u8f83\n#\u968f\u673a\u68ee\u6797\nrandom_forest = RandomForestClassifier(n_estimators=250, max_depth=5, criterion='entropy')\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)","24cbef3f":"#\u6a21\u578b\u5199\u51fa\nsubmission = pd.DataFrame({\n        \"PassengerId\": data_test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('submission.csv', index=False)","f85d5041":"## Tickes\u5904\u7406","268d7e81":"\u53ef\u89c1\uff0c\u5728\u603b\u4f53\u6837\u672c\u4e2d\uff0c\u9664\u4e86\u57fa\u672c\u79f0\u547c\u4ee5\u5916\u5e76\u4e0d\u591a\u3002","69c640f5":"## Cabin\u5904\u7406","0ebd92ee":"## Embarked\u5904\u7406","369a7b31":"### \u65b9\u6cd5\u4e00:\u586b\u5145\u4e2d\u4f4d\u6570","183addc9":"\u53d1\u73b0\u5185\u6709\u4e09\u79cd\u7f3a\u5931\uff0c\u5176\u4e2d\u5e74\u9f84\u7f3a\u5931\u3001Cabin\u7f3a\u5931\u548c\u8bad\u7ec3\u96c6\u76f8\u540c\uff0c\u4f46Fare\u6570\u636e\u5185\u4f9d\u7136\u6709\u5dee\u522b\u3002","e630acd0":"## Sex\u5904\u7406","d18ef4cc":"## \u7279\u5f81","7a5b3e02":"\u7ed3\u679c\u53ef\u89c1\uff0c\u4ec520\u4eba\u6ca1\u6709\u5e26\u6709\u76f8\u5173\u79f0\u8c13\u3002\u6839\u636e\u5e78\u5b58\u8005\u624b\u518c\uff08https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/lady-duff-gordon.html\uff09 \u5176\u4e2d\u90e8\u5206\u662f\u7235\u3001\u7267\u5e08\u7b49\u7279\u6b8a\u8eab\u4efd\u7684\u4eba\u3002","3bf7b002":"### \u65b9\u6cd5\u4e09\uff1a\u5c06\u9884\u6d4b\u6837\u672c\u96c6\u548c\u8bad\u7ec3\u6837\u672c\u96c6\u5728\u4e00\u8d77\u5904\u7406\u3002\n\u56e0\u4e3a\u5728\u4e0d\u6d89\u53ca\u7ed3\u679c\uff0c\u800c\u5bf9\u5355\u4e2a\u7279\u5f81\u8fdb\u884c\u5904\u7406\u65f6\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u96c6\u5408\u770b\u4f5c\u4e00\u4e2a\u65b0\u7684\u6837\u672c\u3002\u901a\u8fc7\u8fd9\u4e2a\u201c\u65b0\u6837\u672c\u96c6\u5408\u201d\u6765\u9884\u6d4b\u7f3a\u5931\u503c\u3002","f5d22eff":"\u53d1\u73b0\u5185\u6709\u4e09\u79cd\u7f3a\u5931\u503c\uff0c\u5206\u522b\u662f\uff1aAge\uff0cCabin\uff0cEmbarked\u3002\u5176\u4e2dCabin\u7f3a\u5931\u8fc7\u5927\uff0c\u51e0\u4e4e\u5360\u603b\u4f53\u6837\u672c\u4f463\/4 \u3002Embarked\u4ec5\u6709\u4e24\u4e2a\u3002","47af42cb":"\u7531\u6b64\u5bf9\u6bd4\uff0c\u53ef\u89c1\uff0c\u4e94\u4e2a\u79f0\u547c\u7684\u5e73\u5747\u503c\u5747\u6709\u4e0d\u540c\u7a0b\u5ea6\u7684\u4fee\u6b63\u3002\u518d\u7528\u65b0\u7684\u4fee\u6b63\u503c\u586b\u5145\u7a7a\u7f3aAge\u503c\u3002","62f8db84":"## Fare\u5904\u7406\n  \u56e0\u4e3aFare\u4ec5\u5728\u9884\u6d4b\u6837\u672c\u4e2d\u7f3a\u5931\uff0c\u56e0\u6b64\uff0c\u4e0d\u80fd\u76f4\u63a5\u4e22\u5f03\u3002","2da5759c":"## Age\u7f3a\u5931\u503c\u7684\u5904\u7406\u65b9\u6cd5","cfe7093b":"### \u65b9\u6cd5\u4e8c\uff1a\u6839\u636e\u6bcf\u4e2a\u4eba\u5bf9\u5e94\u7684\u79f0\u8c13\u4e2d\u4f4d\u6570\u586b\u5145\uff0c\u66f4\u52a0\u51c6\u786e\uff0c\u5982miss\u548cMrs\u53ef\u80fd\u5e74\u9f84\u4e0d\u540c","b7f5ba67":"\u901a\u8fc7\u7edf\u8ba1\u7ed3\u679c\u8868\u660e\uff0c\u6bcf\u4e2a\u79f0\u547c\u7684\u5e74\u9f84\u548c\u5168\u79f0\u547c\u7ed3\u679c\u76f8\u5dee\u8f83\u5927\u3002","57cd867f":"## Cabin\u5904\u7406"}}