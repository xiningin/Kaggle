{"cell_type":{"22b19f5e":"code","fab0b9bb":"code","5ce947f1":"code","ef0b0deb":"code","ff6947f1":"code","c9176a01":"code","5bfafb18":"code","08b3bccc":"code","93a3f8c2":"code","89ca7b84":"code","5380017b":"code","2f78a6ff":"code","96ac258c":"code","766f0859":"code","c9f6d173":"code","39ff45d8":"code","80439996":"code","9be5c2fa":"code","d228fbaa":"code","32352ed5":"code","dda787d3":"code","21f3cfc1":"code","123dee22":"markdown","b61ac968":"markdown"},"source":{"22b19f5e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fab0b9bb":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf","5ce947f1":"dataset = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')\nX = dataset.iloc[ : , :-1].values\ny = dataset.iloc[ : , -1].values\ntest_set = pd.read_csv('..\/input\/mobile-price-classification\/test.csv')","ef0b0deb":"dataset.head(10)","ff6947f1":"dataset.describe()","c9176a01":"dataset.isnull()","5bfafb18":"dataset.info()","08b3bccc":"print(X)","93a3f8c2":"print(y)","89ca7b84":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=0)","5380017b":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","2f78a6ff":"print(X_train)","96ac258c":"print(y_train)","766f0859":"print(X_test)","c9f6d173":"print(y_test)","39ff45d8":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state=0)\nclassifier.fit(X_train, y_train)","80439996":"y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","9be5c2fa":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","d228fbaa":"X_op = test_set.iloc[ : , 1: ].values","32352ed5":"print(X_op)","dda787d3":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_op = sc.fit_transform(X_op)","21f3cfc1":"print(classifier.predict(X_op))","123dee22":"**PREDICTED VALUES OF MOBILE PRICE RANGE ON OUR TEST SET**","b61ac968":"**LOGISTIC REGRESSION**"}}