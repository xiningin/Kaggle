{"cell_type":{"b52e67d2":"code","0fdd5261":"code","4c7c4ad8":"code","7b9694bd":"code","465cdcbd":"code","1d5aa643":"code","ea4f110b":"code","010cab7b":"code","11e38c89":"code","e91fedf4":"code","db94354e":"markdown","52108abc":"markdown"},"source":{"b52e67d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0fdd5261":"%matplotlib inline\nfrom matplotlib import pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom matplotlib.patches import Rectangle\nimport matplotlib.patches as patches\n\nimport os\nimport json\nimport time\nimport numpy as np\nfrom PIL import Image\nimport torch\nfrom tqdm import tqdm\nimport cv2\nimport sys\nsys.path.append('\/kaggle\/input\/retinafacetorch')\nfrom retina import retinaface_model, detect_images","4c7c4ad8":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\nretinaface_model = retinaface_model(model_path='..\/input\/retinafacetorch\/Resnet50_Final.pth',device=device)","7b9694bd":"import pandas as pd\nx1 = pd.read_csv('..\/input\/test-face-detection-challenge-analytic-vidhya\/test_Rj9YEaI.csv')\nprint(x1)","465cdcbd":"my=cv2.imread(\"..\/input\/analytics-vidhya-face-counting\/image_data\/10022.jpg\")\nmy = cv2.cvtColor(my, cv2.COLOR_BGR2RGB)\nbboxes = detect_images(imgs=[np.float32(my)], net=retinaface_model, thresh=0.94, device=device, batch_run=False , rescale_factor = 1.1)","1d5aa643":"print(bboxes)\nprint(\"Total no. of faces: \",len(bboxes[0]))","ea4f110b":"fig,ax = plt.subplots(1)\nim = my\nax.imshow(im)\nfor b in bboxes[0]:\n    rect = patches.Rectangle((b[0],b[1]),(b[2]-b[0]),(b[3]-b[1]),linewidth=1,edgecolor='r',facecolor='none')\n    print(rect)\n    ax.add_patch(rect)\nplt.show()","010cab7b":"x3 =[]\nfor i in tqdm(range(x1.shape[0])):\n    z1 = '..\/input\/analytics-vidhya-face-counting\/image_data\/'+ x1['Name'][i]\n    #print(z1)\n    img = cv2.imread(z1 ,0)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    bboxes = detect_images(imgs=[np.float32(img)], net=retinaface_model, thresh=0.58, device=device, batch_run=False , rescale_factor = 1.3)\n    x3.append(len(bboxes[0]))\n# bboxes = detect_images(imgs=[np.float32(img) for img in imgs], net=retinaface_model, thresh=0.94, device=device)","11e38c89":"submissions = pd.DataFrame({'Name':x1['Name'],'HeadCount':x3})\nsubmissions.to_csv(\"\/kaggle\/working\/retinaface_2_thres0.58_scale1.3.csv\",index = False)","e91fedf4":"fig,ax = plt.subplots(1)\nim = cv2.imread(\"..\/input\/analytics-vidhya-face-counting\/image_data\/12745.jpg\")\nim = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)\nbboxes = detect_images(imgs=[np.float32(im)], net=retinaface_model, thresh=0.58, device=device, batch_run=False , rescale_factor = 1.3)\nax.imshow(im)\nfor b in bboxes[0]:\n    rect = patches.Rectangle((b[0],b[1]),(b[2]-b[0]),(b[3]-b[1]),linewidth=1,edgecolor='r',facecolor='none')\n    ax.add_patch(rect)\nplt.show()\nprint(\"Total no. of faces: \",len(bboxes[0]))","db94354e":"# ****'RetinaFace' to detect****","52108abc":"**Add a GPU Accelerator before running the code!**"}}