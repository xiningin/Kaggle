{"cell_type":{"6c46ee16":"code","957516c9":"code","290a98b5":"code","4865eee1":"code","86d99a21":"code","461fc768":"code","946285eb":"code","0d900904":"code","b30c92ce":"code","059351c5":"code","6d1f36e7":"code","e65052c2":"code","bb36dcc9":"code","1aef376a":"code","a3d97ca8":"code","5080daf7":"code","c6c01980":"code","615e24d5":"code","0cedcea0":"code","de0d3d52":"code","8646c680":"code","219b3b55":"code","8e740f00":"code","cf979978":"code","ef1aea5c":"code","28cc2688":"code","f4dfbc49":"code","12e9c6f1":"code","a2dbcf55":"code","98b54735":"code","cf73f902":"code","2aab7d49":"code","45e4f18b":"code","823825e5":"code","b7884eee":"code","9a714d70":"code","f5b0bbfb":"code","c2720d4d":"markdown"},"source":{"6c46ee16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","957516c9":"import numpy as np","290a98b5":"# np.linspace(start, stop, num=50, endpoint =True, retstep= False, dtype = None, axis = 0)","4865eee1":"sample_50 = np.linspace(1,10)\nsample_50[:10]","86d99a21":"import pandas as pd","461fc768":"series_1 = pd.Series(sample_50)\nprint(series_1.head())","946285eb":"# with num =  5\nsamples = np.linspace(1,10,5)\nsamples","0d900904":"# Creating another series \nsample_5 = pd.Series(samples)\nprint(sample_5)","b30c92ce":"random = np.random.rand(10)\nrandom\n","059351c5":"ran_ser = pd.Series(random)\nprint(ran_ser)","6d1f36e7":"dict = {'India': 'New Delhi' , 'Japan': 'Tokoyo' , 'UK': 'London'}\ndict_ser = pd.Series(dict)","e65052c2":"print(dict_ser)","bb36dcc9":"# Created index and values for above dict series\nprint(dict_ser.index)\nprint(dict_ser.values)","1aef376a":"# Creates series with array and explicit index\nran = np.arange(10)\nra_ser = pd.Series(ran, index=['A','B','C','D','E','F','G','H','I','J'])\nra_ser","a3d97ca8":"ra_ser.shape","5080daf7":"ra_ser.size","c6c01980":"# Slicing series from 4 to end and step = 3 \nra_ser[4::3]","615e24d5":"#Slicing the series into revrse order\nra_ser[::-1]","0cedcea0":"#Converting series into back to lists\nprint(type(ra_ser))","de0d3d52":"print(type(ra_ser.tolist()))","8646c680":"# Appending the one series to other series\ndata = ['50','100', '70', '2','5']\nda = pd.Series(data)","219b3b55":"tmp = ['500','600','700']\nda1 = pd.Series(tmp)","8e740f00":"new = da.append(da1)","cf979978":"new","ef1aea5c":"#Creating dataframe for performing some basic operations \nexam_data = {'name': ['Arun','Rama','Kanthraj','James','Emily','Michael',\n                     'Mathew','Laura','Kevin','Jonas'],\n             'score':[12,10,17,np.nan,9,30,15,np.nan,8,19],\n            'attempts':[1,3,2,3,2,3,1,1,2,1],\n            'qualify': ['yes','no','yes','no','no','yes','yes','no','no','yes']}\nlabels = ['a','b','c','d','e','f','g','h','i','j']","28cc2688":"exam_df = pd.DataFrame(exam_data, index= labels)\nexam_df","f4dfbc49":"exam_df.info()","12e9c6f1":"# Students whose score is greater than 12\nexam_df[exam_df.score > 12]","a2dbcf55":"# Score with No null value\nst_withsc = exam_df[ exam_df.score.notnull()]\nst_withsc","98b54735":"# students whose Score with Null \nst_without = exam_df[exam_df['score'].isnull()]\nst_without","cf73f902":"qual = exam_df[exam_df['qualify'] =='yes']\nqual","2aab7d49":"nqual = exam_df[exam_df['qualify'] != 'yes']\n\nnqual","45e4f18b":"#Creating New dataframe without score column\nnexam = exam_df[['name','attempts','qualify']]\nnexam","823825e5":"# find out students who attenmted i time only\natt = exam_df['attempts']\natt","b7884eee":"att.value_counts()","9a714d70":"exam_df.loc[exam_df['attempts'] == 1]","f5b0bbfb":"# get the max score \nsc = exam_df['score'].max()\nsc","c2720d4d":"Here, You can practice some of Pandas Dataframe and series data-structure opertations. "}}