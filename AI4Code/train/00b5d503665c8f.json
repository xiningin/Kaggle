{"cell_type":{"b32a1731":"code","6c0c3e33":"code","4569e025":"code","624ec60d":"code","1c4eacd4":"code","e0f5ddde":"code","4d938c96":"code","8a282ceb":"code","12d87cc8":"code","04856bff":"code","87d4357c":"code","515021f2":"code","797aee32":"code","8921af3f":"code","1b83a462":"code","a7cf5db3":"code","ffd8d271":"code","3d76c7fe":"code","b04025c6":"code","805c050c":"code","3619cf02":"code","f4d8cf21":"code","f3478fe6":"code","3813d782":"code","62e0be8b":"code","10cd596f":"code","abb20739":"code","151d6224":"code","4d931984":"code","abdac5ce":"code","94a25738":"code","06255d77":"code","5a0248d7":"code","1414f4e8":"code","9f04f787":"code","9d2d3bce":"code","66b21370":"code","992b7b1a":"code","a41eb62f":"code","5bebe5e3":"code","bf0a5c78":"code","d547fc2f":"code","cf141f6e":"code","e5ecf91b":"code","3d3d91c1":"code","8417093a":"code","2283b79f":"code","a6813e32":"code","1c51bf12":"code","74e1dd34":"code","ce7b011f":"code","991481cd":"code","b6f5f7d5":"code","5e02144c":"code","7ab4ec7b":"code","1765a902":"code","fb9f8967":"code","a4c06359":"code","9176b0c0":"code","4389416f":"code","3c5d38bc":"code","6872df38":"code","a0b8400c":"code","1f8c9e87":"code","9cd5ed92":"code","31195f51":"code","91e09d36":"code","d9f5542a":"code","aac3c258":"code","196ac0e6":"code","bed29f7f":"code","3eb8c232":"code","b90a4964":"code","9c8cebb9":"code","5515a153":"code","1b90c7d1":"code","29fce98f":"code","1d3297b4":"code","3c84d455":"code","2d671dde":"code","ecbc6866":"code","4c70f615":"code","a9cabd4c":"code","3b02dcf3":"code","177b6dd3":"code","205858fd":"code","2d9385e3":"code","9cd15e2d":"code","9549caf5":"code","6cd98b21":"code","c9b25bf9":"code","f8842616":"code","08e19766":"markdown","db07f852":"markdown","8cba6fb2":"markdown","11d68dc1":"markdown","1a6307d3":"markdown","669c078d":"markdown","9865a18a":"markdown","8006167d":"markdown","b41e622d":"markdown","a4b22268":"markdown","7eae1420":"markdown","093bc1f3":"markdown","f1d4ec6d":"markdown","61d32e76":"markdown","5e3e0835":"markdown","0ad1fc38":"markdown","9bb16c94":"markdown","a30fe074":"markdown","10866758":"markdown","b98655b1":"markdown","349c17ec":"markdown","7b420b0e":"markdown","0ecceba2":"markdown","213cdc93":"markdown","3fe9c6b1":"markdown","9d606cde":"markdown","f271cbf7":"markdown","f32954ef":"markdown","0fbd73fd":"markdown","f9adcb5a":"markdown","344a97b1":"markdown","e7c2d3a9":"markdown","eea49bc6":"markdown","7946cf6d":"markdown","7ce6286e":"markdown","2106008a":"markdown","bbb23440":"markdown","0fefdbd7":"markdown","788cbd4a":"markdown","f747b988":"markdown","d8b12eb7":"markdown","255fdb28":"markdown","e39f979e":"markdown","47be0575":"markdown","2872ea03":"markdown","443d4768":"markdown","d5e2ff72":"markdown","6043774d":"markdown"},"source":{"b32a1731":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6c0c3e33":"!pip install GeoText\n!pip install pgeocode","4569e025":"# import the necessary libraries\n\nimport numpy as np \nimport pandas as pd\nfrom datetime import date\nfrom datetime import timedelta\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import Markdown\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, plot, iplot, download_plotlyjs\nimport plotly as ply\nimport pycountry\nimport folium \nfrom folium import plugins\nimport json\nfrom pandas.io.json import json_normalize\nfrom geotext import GeoText\nfrom wordcloud import WordCloud\n\n\n\n%config InlineBackend.figure_format = 'retina'\ninit_notebook_mode(connected=True)\n\n# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\n\n# India Latitude Longitude\nIndia_Latitude = 21.7679\nIndia_Longitude = 78.8718 ","624ec60d":"# Utility Functions\n\n'''Display markdown formatted output like bold, italic bold etc.'''\ndef formatted_text(string):\n    display(Markdown(string))\n\n\n'''highlight the maximum in a Series or DataFrame'''  \ndef highlight_max(data, color='red'):\n    attr = 'background-color: {}'.format(color)\n    if data.ndim == 1:  # Series from .apply(axis=0) or axis=1\n        is_max = data == data.max()\n        return [attr if v else '' for v in is_max]\n    else:  # from .apply(axis=None)\n        is_max = data == data.max().max()\n        return pd.DataFrame(np.where(is_max, attr, ''), index=data.index, columns=data.columns)\n    \n\n\n# Utility Plotting Functions\n\ndef plotDailyReportedCasesOverTime(df, country):\n    # confirmed\n    fig = px.bar(df, x=\"Date\", y=\"Confirmed\")\n    layout = go.Layout(\n        title=go.layout.Title(text=\"Daily count of confirmed cases in \"+ country, x=0.5),\n        font=dict(size=14),\n        width=800,\n        height=500,\n        xaxis_title = \"Date\",\n        yaxis_title = \"Confirmed cases\")\n\n    fig.update_layout(layout)\n    fig.show()\n\n    # deaths\n    fig = px.bar(df, x=\"Date\", y=\"Deaths\")\n    layout = go.Layout(\n        title=go.layout.Title(text=\"Daily count of reported deaths in \"+ country, x=0.5),\n        font=dict(size=14),\n        width=800,\n        height=500,\n        xaxis_title = \"Date\",\n        yaxis_title = \"Deaths Reported\")\n\n    fig.update_layout(layout)\n    fig.show()\n\n    # recovered\n    fig = px.bar(df, x=\"Date\", y=\"Recovered\")\n    layout = go.Layout(\n        title=go.layout.Title(text=\"Daily count of recovered cases in \"+ country, x=0.5),\n        font=dict(size=14),\n        width=800,\n        height=500,\n        xaxis_title = \"Date\",\n        yaxis_title = \"Recovered Cases\")\n\n    fig.update_layout(layout)\n    fig.show()\n    \n# Cases over time\ndef scatterPlotCasesOverTime(df, country):\n    plot = make_subplots(rows=1, cols=3, subplot_titles=(\"Comfirmed\", \"Deaths\", \"Recovered\"))\n\n    subPlot1 = go.Scatter(\n                    x=df['Date'],\n                    y=df['Confirmed'],\n                    name=\"Confirmed\",\n                    line_color='orange',\n                    opacity=0.8)\n\n    subPlot2 = go.Scatter(\n                    x=df['Date'],\n                    y=df['Deaths'],\n                    name=\"Deaths\",\n                    line_color='red',\n                    opacity=0.8)\n\n    subPlot3 = go.Scatter(\n                    x=df['Date'],\n                    y=df['Recovered'],\n                    name=\"Recovered\",\n                    line_color='green',\n                    opacity=0.8)\n\n    plot.append_trace(subPlot1, 1, 1)\n    plot.append_trace(subPlot2, 1, 2)\n    plot.append_trace(subPlot3, 1, 3)\n    plot.update_layout(template=\"ggplot2\", title_text = country + '<b> - Spread of the nCov Over Time<\/b>')\n\n    plot.show()","1c4eacd4":"covid_19_India = pd.read_csv(\"..\/input\/covid19-in-india\/covid_19_india.csv\")\npopulation_India_census2011 = pd.read_csv(\"..\/input\/covid19-in-india\/population_india_census2011.csv\")\n\ncovid19_complete = pd.read_csv('..\/input\/covid19-corona-virus-india-dataset\/complete.csv', parse_dates=['Date'])\n\ncovid_19_India.head()","e0f5ddde":"# covid_19_India['Confirmed'] = covid_19_India['ConfirmedIndianNational'] + covid_19_India['ConfirmedForeignNational']\ncovid_19_India.rename(columns={'State\/UnionTerritory': 'State', 'Cured': 'Recovered'}, inplace=True)\n\ncovid_19_India.head()","4d938c96":"# covid_India_cases = pd.read_csv('..\/input\/coronavirus-cases-in-india\/Covid cases in India.csv')\n\n# # Coordinates of Indian States\n# India_Lat_Lon = pd.read_csv('..\/input\/coronavirus-cases-in-india\/Indian Coordinates.csv')\n\n# # Day by day data\n# dbd_India = pd.read_excel('..\/input\/coronavirus-cases-in-india\/per_day_cases.xlsx',sheet_name='India')\n# dbd_Italy = pd.read_excel('..\/input\/coronavirus-cases-in-india\/per_day_cases.xlsx',sheet_name=\"Italy\")\n# dbd_Korea = pd.read_excel('..\/input\/coronavirus-cases-in-india\/per_day_cases.xlsx',sheet_name=\"Korea\")\n\n# covid_India_cases.head()","8a282ceb":"# covid_India_cases.rename(columns={'Name of State \/ UT': 'State', 'Cured\/Discharged\/Migrated': 'Recovered', 'Total Confirmed cases': 'Confirmed'}, inplace=True)\n\n# # covid_India_cases['Confirmed'] = covid_India_cases['Total Confirmed cases (Indian National)'] + covid_India_cases['Total Confirmed cases ( Foreign National )']\n\n# # Active Case = confirmed - deaths - recovered\n# covid_India_cases['Active'] = covid_India_cases['Confirmed'] - covid_India_cases['Deaths'] - covid_India_cases['Recovered']\n\n# covid_India_cases.style.background_gradient(cmap=\"Blues\", subset=['Confirmed', 'Active'])\\\n#             .background_gradient(cmap=\"Greens\", subset=['Recovered'])\\\n#             .background_gradient(cmap=\"Reds\", subset=['Deaths'])","12d87cc8":"# fig = px.bar(covid_India_cases.sort_values('Confirmed', ascending=False).sort_values('Confirmed', ascending=True), \n#              x=\"Confirmed\", y=\"State\", title='Total Confirmed Cases', text='Confirmed', orientation='h', \n#              width=16*(max(covid_India_cases['Confirmed']) + 2), height=700, range_x = [0, max(covid_India_cases['Confirmed']) + 2])\n# fig.update_traces(marker_color='#0726ed', opacity=0.8, textposition='outside')\n\n# fig.update_layout(plot_bgcolor='rgb(208, 236, 245)')\n# fig.show()","04856bff":"# fig = make_subplots(rows=1, cols=2, subplot_titles=(\"Indian Cases\",\"Foreign Cases\"))\n\n# # Indian Nationals\n# Indian = covid_India_cases.sort_values('Total Confirmed cases (Indian National)', ascending=False).sort_values('Total Confirmed cases (Indian National)', ascending=False)\n\n# fig.add_trace(go.Bar( y=Indian['Total Confirmed cases (Indian National)'], x=Indian[\"State\"],  \n#                      marker=dict(color=Indian['Total Confirmed cases (Indian National)'], coloraxis=\"coloraxis\")), 1, 1)\n\n# # Foreign Nationals\n# foreign = covid_India_cases.sort_values('Total Confirmed cases ( Foreign National )', ascending=False).sort_values('Total Confirmed cases ( Foreign National )', ascending=False)\n\n# fig.add_trace(go.Bar( y=foreign['Total Confirmed cases ( Foreign National )'], x=foreign[\"State\"], \n#                      marker=dict(color=foreign['Total Confirmed cases ( Foreign National )'], coloraxis=\"coloraxis\")), 1, 2)                     \n                     \n\n# fig.update_layout(coloraxis=dict(colorscale='hsv'), showlegend=False,title_text=\"Indian vs Foreign Cases\",plot_bgcolor='rgb(255, 255, 255)')\n# fig.show()","87d4357c":"# covid_19_India.info()","515021f2":"temp = covid_19_India[[\"Date\",\"Confirmed\",\"Deaths\",\"Recovered\"]]\ntemp['Date'] = temp['Date'].apply(pd.to_datetime, dayfirst=True)\n\ndate_wise_data = temp.groupby([\"Date\"]).sum().reset_index()\n\nformatted_text('***Day wise distribution for Confirmed, Deaths and Recovered Cases***')\n# pd.set_option('display.max_rows', 100) \n# date_wise_data","797aee32":"temp = date_wise_data.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Confirmed'],\n                 var_name='Case', value_name='Count')\n# temp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case',title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig.show()","8921af3f":"# Load the Indian state geo json file\n\n# with open('..\/input\/indian-state-geojson-data\/india_state_geo.json') as file:\n#     ind_geo = json.load(file)\n\n# India_conf_choropleth = go.Figure(go.Choroplethmapbox(geojson=ind_geo, locations=Covid_India_With_Location['State'],\n#                                                       z=Covid_India_With_Location['TotalConfirmed'], colorscale='Sunset',\n#                                                       zmin=0, zmax=max(Covid_India_With_Location.TotalConfirmed), marker_opacity=0.5, marker_line_width=0))\n\n# India_conf_choropleth.update_layout(mapbox_style=\"carto-positron\", mapbox_zoom=3.5, \n#                                     mapbox_center = {\"lat\": India_Latitude, \"lon\": India_Longitude})\n\n# India_conf_choropleth.update_layout(margin={\"r\":10,\"t\":0,\"l\":10,\"b\":0})\n\n# iplot(India_conf_choropleth)\n\n","1b83a462":"# Affected States\n\nnCoV_States = covid_19_India['State'].unique().tolist()\nprint('Affected States and Union Territories...\\n')\nprint(nCoV_States)\nprint(\"\\n------------------------------------------------------------------\")\nprint(\"\\nTotal Affected States and Union Territories by Covid19: \",len(nCoV_States))","a7cf5db3":"# to plot the spread over time, we would need the data distribution spread over time starting from 22nd Jan 2020\n# so we will extract the sub-set from the original data.\n\nscatterPlotCasesOverTime(date_wise_data, \"<b>India<\/b>\")","ffd8d271":"# cases over time - confirmed vs deaths\nplotDailyReportedCasesOverTime(date_wise_data, \"INDIA\")","3d76c7fe":"# covid19_complete.columns","b04025c6":"covid19_complete.rename(columns={'Name of State \/ UT': 'State_UT', 'Cured\/Discharged\/Migrated': 'Recovered', 'Total Confirmed cases': 'Confirmed', 'Death': 'Deaths'}, inplace=True)\n\nfor i in ['Confirmed', 'Deaths', 'Recovered']:\n    covid19_complete[i] = covid19_complete[i].astype('int')\n\n# Derived Columns\ncovid19_complete['Active'] = covid19_complete['Confirmed'] - covid19_complete['Deaths'] - covid19_complete['Recovered']\ncovid19_complete['Mortality_rate(%)'] = covid19_complete['Deaths']\/covid19_complete['Confirmed'] * 100\ncovid19_complete['Recovery_rate(%)'] = covid19_complete['Recovered']\/covid19_complete['Confirmed'] * 100\n\ncovid19_complete = covid19_complete[['Date', 'State_UT', 'Latitude', 'Longitude', 'Confirmed', 'Active', 'Recovered', 'Deaths', 'Recovery_rate(%)', 'Mortality_rate(%)']]\n\ncovid19_complete.head()","805c050c":"# Get the latest data\nlatest_day = max(covid19_complete['Date'])\nday_before = latest_day - timedelta(days = 1)\n\n# state wise data and new cases reported in the last day\nlatest_day_data = covid19_complete[covid19_complete['Date']==latest_day].set_index('State_UT')\nday_before_data = covid19_complete[covid19_complete['Date']==day_before].set_index('State_UT')\n\ntemp = pd.merge(left = latest_day_data, right = day_before_data, on='State_UT', suffixes=('_latest_day', '_previous_day'), how='outer')\n\n# Get the number of new cases reported in the last day\nlatest_day_data['New_cases_reported'] = temp['Confirmed_latest_day'] - temp['Confirmed_previous_day']\nlatest = latest_day_data.reset_index()\nlatest.fillna(1, inplace=True)\n\ntemp = latest[['State_UT', 'Confirmed', 'Active', 'New_cases_reported','Recovered', 'Deaths', 'Recovery_rate(%)', 'Mortality_rate(%)']]\ntemp = temp.sort_values('Confirmed', ascending=False).reset_index(drop=True)\n\ntemp.style\\\n    .background_gradient(cmap=\"Blues\", subset=['Confirmed', 'Active', 'New_cases_reported'])\\\n    .background_gradient(cmap=\"Greens\", subset=['Recovered', 'Recovery_rate(%)'])\\\n    .background_gradient(cmap=\"Reds\", subset=['Deaths', 'Mortality_rate(%)'])\n\nordered_latest = latest.sort_values('Confirmed', ascending=False)\n# state_order = temp['State\/UT']\n\nfig = px.bar(latest.sort_values('Confirmed', ascending=False), \n             x=\"Confirmed\", y=\"State_UT\", color='State_UT', title='Confirmed Cases across the Country',\n             orientation='h', text='Confirmed', height=700,\n             color_discrete_sequence = px.colors.cyclical.IceFire)\nfig.show()","3619cf02":"date_wise_data = covid19_complete[[\"Date\", 'State_UT', \"Confirmed\",\"Deaths\",\"Recovered\",'Active']]\ndate_wise_data['Date'] = date_wise_data['Date'].apply(pd.to_datetime, dayfirst=True)\ndate_wise_data = date_wise_data.groupby([\"Date\"]).sum().reset_index()","f4d8cf21":"temp = date_wise_data.copy()\ntemp['Recovery_rate(%)'] = temp['Recovered']\/temp['Confirmed']*100\ntemp['Mortality_rate(%)'] = temp['Deaths']\/temp['Confirmed']*100","f3478fe6":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Recovery_rate(%)'],\n                    mode='lines+markers',marker_color='green'))\nfig.update_layout(title_text = 'Cummulative Recovery Rate of India')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","3813d782":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=temp['Date'], y=temp['Mortality_rate(%)'],\n                    mode='lines+markers',marker_color='red'))\nfig.update_layout(title_text = 'Cummulative Mortality Rate of India')\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=600, height=600)\nfig.show()","62e0be8b":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=date_wise_data['Date'], y=date_wise_data['Confirmed'],\n                    mode='lines+markers',marker_color='blue',name='Total Cases'))\n\nfig.add_trace(go.Scatter(x=date_wise_data['Date'],y=date_wise_data['Active'], \n                mode='lines+markers',marker_color='purple',name='Active'))\n\nfig.add_trace(go.Scatter(x=date_wise_data['Date'], y=date_wise_data['Recovered'],\n                mode='lines+markers',marker_color='green',name='Recovered'))\n\nfig.add_trace(go.Scatter(x=date_wise_data['Date'], y=date_wise_data['Deaths'], \n                mode='lines+markers',marker_color='red',name='Deaths'))\n\nfig.update_layout(title_text='Combined Weekly Trend - India',plot_bgcolor='rgb(275, 270, 273)',width=800, height=800)\nfig.show()","10cd596f":"agegroup_data = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\nagegroup_data.head()","abb20739":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=agegroup_data['AgeGroup'],y=agegroup_data['TotalCases'],line_shape='spline',fill='tonexty',fillcolor = 'orange')) \nfig.update_layout(title=\"Age wise Trend...\",yaxis_title=\"Total Number of cases\",xaxis_title=\"Age Group\")\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=800,height=600)\nfig.show()","151d6224":"temp = agegroup_data.copy()\ntemp['Percentage'] = temp['Percentage'].str.rstrip('%')\ntemp['Percentage'] = pd.to_numeric(temp['Percentage'])\ntemp.reset_index()\ntemp.set_index([\"AgeGroup\"], inplace = True, append = False, drop = True) \ntemp","4d931984":"\nplt.figure(figsize=(12,12))\n\ntemp['Percentage'].plot( kind='pie'\n           , autopct='%1.1f%%'\n           , shadow=True\n           , startangle=90)\n\nplt.title('Agewise Distribution - INDIA',size=25)\nplt.legend(loc = \"best\"\n           , fontsize = 12\n           , ncol = 1 \n           , fancybox = True\n           , framealpha = 0.80\n           , shadow = True\n           , borderpad = 1\n           , bbox_to_anchor=(1,0.5));","abdac5ce":"# url = 'https:\/\/api.covid19india.org\/raw_data.json'\n\n# # Load the first sheet of the JSON file into a data frame\n# df = pd.read_json(url, orient='columns')\n# df1 = json_normalize(df['raw_data'])\n# df1.head()","94a25738":"covid19_patients = pd.read_csv('..\/input\/covid19-corona-virus-india-dataset\/patients_data.csv')\ncovid19_patients.head()","06255d77":"covid19_patients['date_announced'] = pd.to_datetime(covid19_patients['date_announced'], dayfirst=True)\ncovid19_patients['status_change_date'] = pd.to_datetime(covid19_patients['status_change_date'], dayfirst=True)","5a0248d7":"covid19_patients.info()","1414f4e8":"px.histogram(covid19_patients, x='age_bracket', color_discrete_sequence = ['#00ff95'], nbins=50, title='Age Distribution...')","9f04f787":"covid19_patients.dropna(subset=['current_status', 'age_bracket'], inplace=True)\ncovid19_patients.reset_index(drop=True, inplace=True)\n\ncovid19_patients_deceased = covid19_patients[covid19_patients['current_status'] == 'Deceased']\ncovid19_patients_hospitalized = covid19_patients[covid19_patients['current_status'] == 'Hospitalized']\ncovid19_patients_recovered = covid19_patients[covid19_patients['current_status'] == 'Recovered']\n\nfig = go.Figure()\nfig.add_trace(go.Box(y=covid19_patients_deceased['age_bracket'], name=\"Deceased Patients\"))\nfig.add_trace(go.Box(y=covid19_patients_hospitalized['age_bracket'], name=\"Hospitalized Patients\"))\nfig.add_trace(go.Box(y=covid19_patients_recovered['age_bracket'], name=\"Recovered Patients\"))\nfig.update_layout(title_text='Indian COVID-19 Patients Outcome Age-Wise')\nfig.show()","9d2d3bce":"px.histogram(covid19_patients, x='gender', color_discrete_sequence = ['#00aeff'], title='Gender Distribution...')","66b21370":"temp = covid19_patients['gender'].value_counts().rename_axis('gender').reset_index(name='counts')\n\nfig = make_subplots(\n    rows=1, cols=1,\n    subplot_titles = ['Gender Distribution...'],\n    specs=[[{\"type\": \"pie\"}]]\n)\n\nfig.add_trace(go.Pie(values=temp.counts.tolist(), labels=['Male', 'Female'], marker_colors = ['#6a0572', '#39065a']),1,1)\nfig.show()","992b7b1a":"px.histogram(covid19_patients, x='current_status', color_discrete_sequence = ['#00aeff'], title='Current Status...')","a41eb62f":"fig = go.Figure()\n\ntemp = covid19_patients[['age_bracket', 'current_status']].dropna()\n\ngen_grp = temp.groupby('current_status').count()\n\nfig.add_trace(go.Histogram(x=temp[temp['current_status']=='Deceased']['age_bracket'], nbinsx=50, name='Deceased', marker_color='#fd0054'))\nfig.add_trace(go.Histogram(x=temp[temp['current_status']=='Recovered']['age_bracket'], nbinsx=50, name='Recovered', marker_color='#40a798'))\nfig.add_trace(go.Histogram(x=temp[temp['current_status']=='Hospitalized']['age_bracket'], nbinsx=50, name='Hospitalized', marker_color='#393e46'))\n\nfig.update_layout(showlegend=False)\nfig.update_layout(barmode='stack')\nfig.update_layout(title=\"Agr Bracket vs Current Status\")\nfig.show()","5bebe5e3":"temp = covid19_patients.groupby('nationality')['patient_number'].count().reset_index()\ntemp = temp.sort_values('patient_number')\n# temp = temp[temp['nationality']!='India']\npx.bar(temp, x='patient_number', y='nationality', orientation='h', text='patient_number', width=600,\n       color_discrete_sequence = ['#eb4034'], title='Nationality - Indian Cases vs Foreign Cases...')","bf0a5c78":"locations = covid19_patients.groupby(['detected_state', 'detected_district', 'detected_city'])['patient_number'].count().reset_index()\nlocations['country'] = 'India'\nfig = px.treemap(locations, path=[\"country\", \"detected_state\", \"detected_district\", \"detected_city\"], values=\"patient_number\", height=700,\n           title='State ---> District --> City', color_discrete_sequence = px.colors.qualitative.Prism)\n\nfig.data[0].textinfo = 'label+text+value+percent entry+percent root'\nfig.show()","d547fc2f":"days_to_status_change = covid19_patients[['date_announced', 'status_change_date', 'current_status']].dropna()\n\ndays_to_status_change = days_to_status_change[days_to_status_change['status_change_date'] != days_to_status_change['date_announced']]\ndays_to_status_change['days_to_status_change'] = days_to_status_change['status_change_date'] - days_to_status_change['date_announced']\ndays_to_status_change['days_to_status_change'] = days_to_status_change['days_to_status_change'].dt.days\n\ndays_to_recover = days_to_status_change[days_to_status_change['current_status']=='Recovered']\ndays_to_recover.head()","cf141f6e":"days_to_recover['days_to_status_change'].unique()","e5ecf91b":"px.box(days_to_status_change, x=\"current_status\", y=\"days_to_status_change\", color='current_status')","3d3d91c1":"# print(covid19_patients['notes'].value_counts())\n# print(list(covid19_patients['notes'].unique()))","8417093a":"cities = []\ncountries = []\n\n# Before extracting information from patient notes we will replace any NaN values with 'Details Awaited'\ncovid19_patients['notes'] = covid19_patients['notes'].replace(np.nan, 'Details awaited')\n\ndef extractTravelHistoryFromPatientNotes(patient_notes):\n    \n    for sent in patient_notes:\n        places = GeoText(sent)\n\n        if len(places.countries) != 0:\n            for country in places.countries:\n                countries.append(country)\n\n        if len(places.cities) != 0:\n            for city in places.cities:\n                cities.append(city)\n    \n    return list(set(countries + cities))\n        \n\npatient_travelled_places = extractTravelHistoryFromPatientNotes(list(covid19_patients['notes'].unique()))\n\nprint(\"All Patients Travel History...\\n\")\nprint(\"Travelled Places:\\n\\n\",patient_travelled_places)","2283b79f":"# convert list to string and generate the word cloud\n\nunique_string=(\" \").join(patient_travelled_places)\nwordcloud = WordCloud(width = 1000, height = 500).generate(unique_string)\n\nplt.figure(figsize=(15,8))\nplt.imshow(wordcloud)\nplt.axis(\"off\")","a6813e32":"url = 'https:\/\/api.covid19india.org\/travel_history.json'\n\n# Load the first sheet of the JSON file into a data frame\ntravel_history = pd.read_json(url, orient='columns')\ntravel_history = json_normalize(travel_history['travel_history'])\n\n\nunique_string=(\" \").join(list(travel_history.modeoftravel.unique()))\nwordcloud = WordCloud(width = 1000, height = 500).generate(unique_string)\n\nplt.figure(figsize=(15,8))\nplt.imshow(wordcloud)\nplt.axis(\"off\")","1c51bf12":"# Indian states are not captured by GeoText library. Hence we will append the states to the places list and then parse through the notes.\nIndian_States = [\"Andhra Pradesh\",\"Arunachal Pradesh \",\"Assam\",\"Bihar\",\"Chhattisgarh\",\"Goa\",\"Gujarat\",\"Haryana\",\"Himachal Pradesh\",\"Jammu and Kashmir\",\"Jharkhand\",\"Karnataka\",\n                 \"Kerala\",\"Madhya Pradesh\",\"Maharashtra\",\"Manipur\",\"Meghalaya\",\"Mizoram\",\"Nagaland\",\"Odisha\",\"Punjab\",\"Rajasthan\",\"Sikkim\",\"Tamil Nadu\",\"Telangana\",\"Tripura\",\n                 \"Uttar Pradesh\",\"Uttarakhand\",\"West Bengal\",\"Andaman and Nicobar Islands\",\"Chandigarh\",\"Dadra and Nagar Haveli\",\"Daman and Diu\",\"Lakshadweep\",\"Delhi\",\"Puducherry\"]\n\nother_places = ['USA','US', 'UK', 'UAE', 'USSR', 'Middle East', 'Bilaspur', 'Allahabad', 'Bengaluru', 'Abhudhabi', 'Abu Dhabi', 'Trivandrum', 'Scotland', 'Baharain']\nmisc = ['travelled', 'Travel history']\nfull_places_list = patient_travelled_places + Indian_States + other_places + misc\nplace_search_pattern = '|'.join(full_places_list)\n\nno_travel_hist = ['No travel history', 'no history of travel', 'No recent history of travel', 'no travel', 'not travelled recently', 'not travelled']\nno_travel_hist_search_pattern = '|'.join(no_travel_hist)\n\ndetailes_awaited = ['Details yet to recieve', 'no details', 'details awaited', 'details unknown', 'unknown', 'yet to receive details', 'details yet to receive']\ndetailes_awaited_search_pattern = '|'.join(detailes_awaited)\n\ncovid19_patients['notes'] = covid19_patients['notes'].replace('Details Awaited', 'Details awaited')\ncovid19_patients['notes'] = np.where((covid19_patients.notes.str.contains(\"No Travel history\", False)),'No travel history',covid19_patients.notes)\ncovid19_patients['notes'] = np.where((covid19_patients.notes.str.contains(\"under process\", False)),'Details awaited',covid19_patients.notes)\n\n\n\n# Create a temp copy dataframe...\ntemp = covid19_patients.copy()\n\nprimary_secondary_contact = ['father', 'mother', 'brother', 'sister', 'spouse', 'son', 'daughter', 'husband', 'wife', 'Uncle', 'Aunt', 'Family', 'relative', 'related', 'parents']\nperson_search_pattern = '|'.join(primary_secondary_contact)\n\ncontact_transmission = ['neighbour', 'working with', 'contact', 'transmission', 'doctor', 'nurse', 'Roommate', 'domestic worker', 'employee of', 'accompanied', 'driver']\ncontact_trans_search_pattern = '|'.join(contact_transmission)\n\ntemp['notes'] = np.where((temp.notes.str.contains(no_travel_hist_search_pattern, False)),'No recent travel history',temp.notes)\ntemp['notes'] = np.where((temp.notes.str.contains(place_search_pattern, False)),'Recent travel history',temp.notes)\ntemp['notes'] = np.where((temp.notes.str.contains(person_search_pattern, False)),'from family member',temp.notes)\ntemp['notes'] = np.where((temp.notes.str.contains(contact_trans_search_pattern, False)),'Contact Transmission',temp.notes)\ntemp['notes'] = np.where((temp.notes.str.contains(detailes_awaited_search_pattern, False)),'Details awaited',temp.notes)\n\ntemp = pd.DataFrame(temp.groupby('notes')['notes'].count().sort_values(ascending=False))\ntemp.columns = ['count']\ntemp = temp.reset_index()\n\ndetails_awaited = temp[temp['notes'] == 'Details awaited']\ntemp = temp[temp['notes'] != 'Details awaited']\n\n# changing the one long note to shorter text for clean view of the graph below...\n# 'Had been admitted to AIIMS Bhubaneswar on 4th April with complaint of respiratory distress. He had history of chronic hypertension'. \n# This person could possibly have had the virus transmitted locally from a carrier person as there has been no travel history or contact reasons mentioned.\n\ntemp['notes'] = temp['notes'].replace('Had been admitted to AIIMS Bhubaneswar on 4th April with complaint of respiratory distress. He had history of chronic hypertension', \n                                      'locally transmitted')","74e1dd34":"fig = px.bar(temp.head(10).sort_values('count', ascending=True), x='count', y='notes', orientation='h', text='count', width=1000,\n       color_discrete_sequence = ['#3e78b5'], title='Patient History & Notes...')\nfig.update_xaxes(title='')\nfig.update_yaxes(title='')\n\nfig.update_layout(\n    margin=dict(l=10, r=10, t=60, b=10),\n    paper_bgcolor=\"LightSteelBlue\",)","ce7b011f":"pat_wo_travel_history = temp[temp['notes'] != 'Recent travel history']\npat_w_travel_history = temp[temp['notes'] =='Recent travel history']\n\ncolors = ['#ff2e63', '#21bf73']\n\npat_wo_travel_history_percent = round(pat_wo_travel_history['count'].sum()\/covid19_patients['notes'].count()*100, 2)\npat_w_travel_history_percent = round(pat_w_travel_history['count'].sum()\/covid19_patients['notes'].count()*100, 2)\ndetails_awaited_percent = round(details_awaited['count'].sum()\/covid19_patients['notes'].count()*100, 2)\n                         \nfig = px.pie(pat_w_travel_history, values=[pat_wo_travel_history_percent, pat_w_travel_history_percent, details_awaited_percent], \n             names=['Patients with no Recent Travel History', 'Patients with Recent Travel History', 'Details Awaited'],\n             title='Patients with and without Travel History')\nfig.show()","991481cd":"other_reasons_df = covid19_patients.copy()\nother_reasons_df['notes'] = np.where((other_reasons_df.notes.str.contains(place_search_pattern, False)),' ',other_reasons_df.notes)\nother_reasons_df['notes'] = np.where((other_reasons_df.notes.str.contains('details awaited', False)),' ',other_reasons_df.notes)\n\nunique_string=(\" \").join(other_reasons_df['notes'])\nwordcloud = WordCloud(width = 1000, height = 500).generate(unique_string)\n\nplt.figure(figsize=(15,8))\nplt.imshow(wordcloud)\nplt.axis(\"off\")","b6f5f7d5":"no_of_states = covid19_complete.groupby('Date')['State_UT'].unique().apply(len).values\ndates = covid19_complete.groupby('Date')['State_UT'].unique().apply(len).index\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=dates, y=[36 for i in range(len(no_of_states))], \n                         mode='lines', name='# States \/ Union Territory', \n                         line = dict(color='#000000', dash='dash')))\n\nfig.add_trace(go.Scatter(x=dates, y=no_of_states, hoverinfo='x+y',\n                         mode='lines', name='# Affected States \/ Union Territory', \n                         line = dict(color='#2dfa48')))\n\nfig.update_layout(title='No. of affected States \/ Union Territory', \n                  xaxis_title='Date', yaxis_title='No. of affected States \/ Union Territory')\n\nfig.update_traces(textposition='top center')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()","5e02144c":"allStates = covid19_complete['State_UT'].unique().tolist()\n\nprint(\"All States\/UT affected by Covid19 -- \\n\")\nprint(allStates)\n\nprint(\"\\nTotal States\/UT affected by virus: \",len(allStates))\n","7ab4ec7b":"StateWiseData = pd.DataFrame(covid19_complete.groupby('State_UT')['Confirmed', 'Deaths', 'Recovered', 'Active'].max())\nStateWiseData['State_UT'] = StateWiseData.index\n\nStateWiseData = StateWiseData[['State_UT','Confirmed', 'Deaths', 'Recovered', 'Active']]\nStateWiseData = StateWiseData.sort_values('Confirmed',ascending=False)\n\n# Reset Index\nStateWiseData.index = np.arange(1, len(allStates)+1)\n\nformatted_text('***State wise Analysis of ''Confirmed'', ''Deaths'', ''Recovered'', ''Active'' Cases***')\nStateWiseData","1765a902":"top10 = StateWiseData[:10]\ntop10","fb9f8967":"fig, axs  = plt.subplots(2,2, figsize=(15, 12))\n\nax_x = top10['State_UT']\n\nax_y0 = top10['Confirmed']\nax_y1 = top10['Deaths']\nax_y2 = top10['Recovered']\nax_y3 = top10['Active']\n\naxs[0,0].bar(ax_x, ax_y0)\naxs[0,0].set_xlabel('Top 10 State')\naxs[0,0].set_ylabel('Confirmed Cases')\naxs[0,0].title.set_text('Confirmed')\naxs[0,0].tick_params('x', labelrotation=90)\naxs[0,0].grid(axis='both')\naxs[0,0].title.set_size(15)\n\naxs[0,1].bar(ax_x, ax_y1)\naxs[0,1].set_xlabel('Top 10 State')\naxs[0,1].set_ylabel('Death Cases')\naxs[0,1].title.set_text('Deaths')\naxs[0,1].tick_params('x', labelrotation=90)\naxs[0,1].grid(axis='both')\naxs[0,1].title.set_size(15)\n\naxs[1,0].bar(ax_x, ax_y2)\naxs[1,0].set_xlabel('Top 10 State')\naxs[1,0].set_ylabel('Recovered Cases')\naxs[1,0].title.set_text('Recovered')\naxs[1,0].tick_params('x', labelrotation=90)\naxs[1,0].grid(axis='both')\naxs[1,0].title.set_size(15)\n\naxs[1,1].bar(ax_x, ax_y2)\naxs[1,1].set_xlabel('Top 10 State')\naxs[1,1].set_ylabel('Active Cases')\naxs[1,1].title.set_text('Active')\naxs[1,1].tick_params('x', labelrotation=90)\naxs[1,1].grid(axis='both')\naxs[1,1].title.set_size(15)\n\nplt.subplots_adjust(hspace = 0.6)\nplt.subplots_adjust(wspace = 0.8)\n\nfig.suptitle(\"Covid19 - Worst Afftected States\/Union Territories - Top 10\", fontsize = 24)\nplt.show()","a4c06359":"fig = go.Figure()\nstate_list = list(top10.State_UT)\n\nfor i in range(len(state_list)):\n    state = state_list[i]\n    state_df = covid19_complete[covid19_complete.State_UT == state]\n\n    fig.add_trace(go.Scatter(x=state_df['Date'], y=state_df['Confirmed'],\n                    mode='lines+markers',name=state))\n\nfig.update_layout(title_text='Top 10 Worst Affected State\/UT for COVID19 - Confirmed Cases',plot_bgcolor='rgb(225,230,255)')\nfig.show()","9176b0c0":"fig = go.Figure()\nstate_list = list(top10.State_UT)\n\nfor i in range(len(state_list)):\n    state = state_list[i]\n    state_df = covid19_complete[covid19_complete.State_UT == state]\n\n    fig.add_trace(go.Scatter(x=state_df['Date'], y=state_df['Deaths'],\n                    mode='lines+markers',name=state))\n\nfig.update_layout(title_text='Top 10 Worst Affected State\/UT for COVID19 - Death Toll',plot_bgcolor='rgb(225,230,255)')\nfig.show()","4389416f":"fig = go.Figure()\nstate_list = list(top10.State_UT)\n\nfor i in range(len(state_list)):\n    state = state_list[i]\n    state_df = covid19_complete[covid19_complete.State_UT == state]\n\n    fig.add_trace(go.Scatter(x=state_df['Date'], y=state_df['Recovered'],\n                    mode='lines+markers',name=state))\n\nfig.update_layout(title_text='Top 10 Worst Affected State\/UT for COVID19 - Recovered Cases',plot_bgcolor='rgb(225,230,255)')\nfig.show()","3c5d38bc":"fig = go.Figure()\nstate_list = list(top10.State_UT)\n\nfor i in range(len(state_list)):\n    state = state_list[i]\n    state_df = covid19_complete[covid19_complete.State_UT == state]\n\n    fig.add_trace(go.Scatter(x=state_df['Date'], y=state_df['Active'],\n                    mode='lines+markers',name=state))\n\nfig.update_layout(title_text='Top 10 Worst Affected State\/UT for COVID19 - Current Active Cases',plot_bgcolor='rgb(225,230,255)')\nfig.show()","6872df38":"ICMR_testing_details = pd.read_csv(\"..\/input\/covid19-in-india\/ICMRTestingDetails.csv\")\nICMR_testing_details.drop(columns=['SNo', 'Source'], inplace = True)\nprint(\"ICMR Testing Data...\")\nICMR_testing_details.tail(3)","a0b8400c":"ICMR_testing_details","1f8c9e87":"ICMR_testing_details ['DateTime'] =pd.to_datetime(ICMR_testing_details.DateTime,dayfirst=True)\nICMR_testing_details ['DateTime'] = ICMR_testing_details ['DateTime'].dt.date\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=ICMR_testing_details['DateTime'], y=ICMR_testing_details['TotalSamplesTested'],\n                    mode='lines+markers',name='TotalSamplesTested'))\n\nfig.add_trace(go.Scatter(x=ICMR_testing_details['DateTime'], y=ICMR_testing_details['TotalIndividualsTested'], \n                mode='lines+markers',name='TotalIndividualsTested'))\n\nfig.add_trace(go.Scatter(x=ICMR_testing_details['DateTime'], y=ICMR_testing_details['TotalPositiveCases'], \n                mode='lines+markers',name='TotalPositiveCases'))\n\nfig.update_layout(title_text='ICMR TEST conducted for COVID19',plot_bgcolor='rgb(225,230,255)')\nfig.show()\nprint(\"** Broken lines in the last week of March is because of the missing numbers for these days. Data not uploaded in the ICMR portal...\")","9cd5ed92":"fig1 = go.Figure(data=[\n    \n    go.Bar(\n            x=ICMR_testing_details['DateTime'], \n            y=ICMR_testing_details['TotalSamplesTested']-ICMR_testing_details['TotalPositiveCases'],\n            name='COVID19 - NO',\n            marker_color='#348005'),\n            \n    go.Bar(\n            x=ICMR_testing_details['DateTime'], \n            y=ICMR_testing_details['TotalPositiveCases'],\n            name='COVID19 - YES',\n            marker_color='#FF0000')\n          ])\n\n\n# Change the bar mode\nfig1.update_layout(barmode='stack', template=\"ggplot2\",width=800, height=500, title_text = '<b>Number of Sample Tested for COVID-19 in India<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig1.show()","31195f51":"# Create a new columns for the percentage of +ve cases detected based on the testing for the day...\nICMR_testing_details['%age_+ve_vs_total_samples_tested'] = (ICMR_testing_details['TotalPositiveCases'] \/ ICMR_testing_details['TotalSamplesTested']) * 100\n\n# fig = go.Figure()\nfig2 = make_subplots(specs=[[{\"secondary_y\": True}]])\n\nfig2.add_trace(go.Bar(x=ICMR_testing_details['DateTime'], y=ICMR_testing_details['TotalSamplesTested'], name='TotalSamplesTested'), secondary_y=False)\n\nfig2.add_trace(go.Scatter(x=ICMR_testing_details['DateTime'], y=ICMR_testing_details['%age_+ve_vs_total_samples_tested'], mode='lines+markers',name='%age_+ve_vs_total_samples_tested data',\n                          yaxis=\"y2\"), secondary_y=True)\n  \n\nfig2.update_yaxes(title_text=\"<b>Total Samples Tested Till Date<\/b>\", secondary_y=False)\nfig2.update_yaxes(title_text=\"<b>Percentage of +ve Cases Detected <br><\/br> on Total Samples Tested<\/b>\", secondary_y=True)\n\nfig2.show()\n\nprint(\"** Broken lines in the last week of March is because of the missing numbers for these days. Data not uploaded in the ICMR portal...\")","91e09d36":"IND_confirmed = covid_19_India[[\"Date\",\"Confirmed\"]]\nIND_confirmed['Date'] = IND_confirmed['Date'].apply(pd.to_datetime, dayfirst=True)\nIND_confirmed = pd.DataFrame(IND_confirmed.groupby([\"Date\"]).sum().reset_index())\n\ntests_by_date = ICMR_testing_details[['DateTime', 'TotalSamplesTested']]\ntests_by_date.rename(columns={'DateTime':'Date'}, inplace=True)\n# tests_by_date['Date'] = tests_by_date['Date'].dt.date\ntests_by_date['Date'] = tests_by_date['Date'].apply(pd.to_datetime, dayfirst=True)\n\nicmr_tests_vs_confirmed = IND_confirmed.merge(tests_by_date[['Date', 'TotalSamplesTested']], on='Date')","d9f5542a":"ICMR_testing_labs = pd.read_csv(\"..\/input\/covid19-in-india\/ICMRTestingLabs.csv\")\nprint(\"ICMR Testing Labs...\")\nICMR_testing_labs.head()","aac3c258":"labtype = pd.DataFrame(ICMR_testing_labs.groupby('type')['city'].count()).reset_index()\nlabtype.rename(columns={'city': 'count'}, inplace=True)\n\nfig = go.Figure(data=[go.Bar(x=labtype['type'], y=labtype['count'])])\n# Customize aspect\nfig.update_traces(marker_color='rgb(158,202,225)', marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, opacity=0.6)\nfig.update_layout(title_text='COVID-19 Testing Labtype - Countrywide')\nfig.show()","196ac0e6":"labcity = pd.DataFrame(ICMR_testing_labs.groupby(['state', 'city'])['type'].count()).reset_index()\nlabcity.rename(columns={'type': 'count'}, inplace=True)\n\nfig = go.Figure(data=[go.Bar(x=labcity['state'], y=labcity['count'], text=list(labcity.city))])\n\n# Customize aspect\nfig.update_traces(marker_color='rgb(49,130,189)', marker_line_color='#8B0000',\n                  marker_line_width=1, opacity=0.6)\n\nlayout = go.Layout(\n    barmode='stack'\n)\n\nfig.update_layout(title_text='COVID-19 Testing Lab - State - City wise Numbers')\nfig.show()","bed29f7f":"statelabtype = pd.DataFrame(ICMR_testing_labs.groupby(['state', 'type'])['city'].count()).reset_index()\nstatelabtype.rename(columns={'city': 'count'}, inplace=True)\n\nfig = go.Figure(data=[go.Bar(x=statelabtype['state'], y=statelabtype['count'], text=list(statelabtype.type))])\n\n# Customize aspect\nfig.update_traces(marker_color='rgb(49,130,189)', marker_line_color='#8B0000',\n                  marker_line_width=1, opacity=0.6)\n\n# layout = go.Layout(\n#     barmode='stack'\n# )\n\nfig.update_layout(title_text='COVID-19 Testing Lab - State - Labtype Categories')\nfig.show()","3eb8c232":"hospitals = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nhospitals.tail()","b90a4964":"hospitals['NumSubDistrictHospitals_HMIS'] = hospitals['NumSubDistrictHospitals_HMIS'].replace(np.NaN, 0)\nhospitals.info()\n","9c8cebb9":"hospitals['TotalBeds'] = hospitals[['NumPublicBeds_HMIS', 'NumRuralBeds_NHP18', 'NumUrbanBeds_NHP18']].sum(axis=1)","5515a153":"fig = go.Figure(data=[go.Bar(\n            x=hospitals['State\/UT'], \n            y=hospitals.NumPrimaryHealthCenters_HMIS,\n            name='Primary Health Centers',\n            marker_color='#0000FF'),\n            \n            go.Bar(\n            x=hospitals['State\/UT'], \n            y=hospitals.NumCommunityHealthCenters_HMIS,\n            name='Community HealthCenters',\n            marker_color='#8B0000'),\n            \n            go.Bar(\n            x=hospitals['State\/UT'], \n            y=hospitals.NumDistrictHospitals_HMIS,\n            name='District Hospitals',\n            marker_color='#228B22'),\n\n            go.Bar(\n            x=hospitals['State\/UT'], \n            y=hospitals.NumSubDistrictHospitals_HMIS,\n            name='Sub-District Hospitals',\n            marker_color='#FFD700')])\n\nfig.update_layout(barmode='stack', template=\"ggplot2\",width=1200, height=700, title_text = '<b>Total Health Facilities Across Country Statewise<\/b>',\n                  font=dict(family=\"Arial\",color='black', size=12))\nfig.show()","1b90c7d1":"fig = go.Figure(data=[go.Bar(\n            x=hospitals['State\/UT'], \n            y=hospitals.NumPublicBeds_HMIS,\n            name='Public Beds',\n            marker_color='#0000FF'),\n            \n            go.Bar(\n            x=hospitals['State\/UT'], \n            y=hospitals.NumUrbanBeds_NHP18,\n            name='Urban Beds',\n            marker_color='#8B0000'),\n            \n            go.Bar(\n            x=hospitals['State\/UT'], \n            y=hospitals.NumRuralBeds_NHP18,\n            name='Rural Beds',\n            marker_color='#228B22')])\n\nfig.update_layout(barmode='stack', template=\"ggplot2\",width=1200, height=700, title_text = '<b>Total Available Beds Across Country Statewise<\/b>',\n                  font=dict(family=\"Arial\",color='black', size=12))\nfig.show()","29fce98f":"population_india_census2k11 = pd.read_csv('..\/input\/covid19-in-india\/population_india_census2011.csv')\npopulation_india_census2k11.rename(columns={'State \/ Union Territory':'State\/UT'}, inplace=True)\n\nhospital_and_population_data = hospitals.merge(population_india_census2k11[['State\/UT', 'Population']], on='State\/UT')\n\nhospital_and_population_data['beds_per_1000_person'] = np.round(1000*hospital_and_population_data[\"TotalBeds\"]\/hospital_and_population_data[\"Population\"], 2)","1d3297b4":"fig1 = px.scatter(hospital_and_population_data, x='State\/UT', y=\"beds_per_1000_person\")\n\nfig1.update_traces(marker=dict(size=12, line=dict(width=2, color='DarkSlateGrey')), marker_color='#0000FF', mode='lines+markers')\n\nfig1.update_layout(template=\"plotly_white\",width=800, height=700, title_text = '<b>Number of Hospital Beds Available For Every 1000 Person<\/b>', font=dict(family=\"Arial\",color='black'))\n\nfig1.show()","3c84d455":"url = 'https:\/\/api.covid19india.org\/v2\/state_district_wise.json'\n# Load the first sheet of the JSON file into a data frame\nstate_district_wise = pd.read_json(url, orient='columns')\nstate_district_wise = (pd.concat({i: json_normalize(x) for i, x in state_district_wise.pop('districtData').items()})\n         .reset_index(level=1, drop=True)\n         .join(state_district_wise)\n         .reset_index(drop=True))\n\nstate_district_wise = state_district_wise[['state', 'district', 'confirmed']]","2d671dde":"def plotDistrictwiseNumbers(state_data, state, status):\n    fig = px.bar(state_data, x='district', y=status,\n             hover_data=['district', status], color=status,\n             labels={'pop': status + 'cases - ' + state}, height=400)\n\n    fig.update_layout(title_text= '<b>' + state +' Covid19 Spread Across State District wise...<\/b>')\n    fig.show()","ecbc6866":"# spelling mismatch in the top10 data and the json data.\nstate_list = [\"Telangana\" if x==\"Telengana\" else x for x in state_list]","4c70f615":"state = state_list[0]\nstate_data = state_district_wise[state_district_wise.state == state]\n\nplotDistrictwiseNumbers(state_data, state, 'confirmed')","a9cabd4c":"state = state_list[1]\nstate_data = state_district_wise[state_district_wise.state == state]\n\nplotDistrictwiseNumbers(state_data, state, 'confirmed')","3b02dcf3":"state = state_list[2]\nstate_data = state_district_wise[state_district_wise.state == state]\n\nplotDistrictwiseNumbers(state_data, state, 'confirmed')","177b6dd3":"state = state_list[3]\nstate_data = state_district_wise[state_district_wise.state == state]\n\nplotDistrictwiseNumbers(state_data, state, 'confirmed')","205858fd":"state = state_list[4]\nstate_data = state_district_wise[state_district_wise.state == state]\n\nplotDistrictwiseNumbers(state_data, state, 'confirmed')","2d9385e3":"state = state_list[5]\n\nstate_data = state_district_wise[state_district_wise.state == state]\n\nplotDistrictwiseNumbers(state_data, state, 'confirmed')","9cd15e2d":"state = state_list[6]\n\nstate_data = state_district_wise[state_district_wise.state == state]\n\nplotDistrictwiseNumbers(state_data, state, 'confirmed')","9549caf5":"state = state_list[7]\nstate_data = state_district_wise[state_district_wise.state == state]\n\nplotDistrictwiseNumbers(state_data, state, 'confirmed')","6cd98b21":"state = state_list[8]\nstate_data = state_district_wise[state_district_wise.state == state]\n\nplotDistrictwiseNumbers(state_data, state, 'confirmed')","c9b25bf9":"state = state_list[9]\nstate_data = state_district_wise[state_district_wise.state == state]\n\nplotDistrictwiseNumbers(state_data, state, 'confirmed')","f8842616":"India = folium.Map(location = [India_Latitude,India_Longitude], min_zoom=4, max_zoom=6, zoom_start=4, tiles = 'cartodbpositron')\n\nfor lat, long, confirmed, active, deaths, recovered, state in zip(latest['Latitude'],\n                                                           latest['Longitude'],\n                                                           latest['Confirmed'],\n                                                           latest['Active'],\n                                                           latest['Deaths'],\n                                                           latest['Recovered'], \n                                                           latest['State_UT']):\n\n    if (deaths == 0):\n        folium.Marker(location=[lat, long]\n                    , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                               '<strong>State:<\/strong> ' + str(state).capitalize() + '<br>'\n                               '<strong>Confirmed:<\/strong> ' + str(int(confirmed)) + '<br>'\n                               '<strong>Active:<\/strong> ' + str(int(active)) + '<br>'\n                               '<strong>Deaths:<\/strong> ' + str(int(deaths)) + '<br>'\n                               '<strong>Recovered:<\/strong> ' + str(int(recovered)) + '<br>')\n                    , icon=folium.Icon(color='darkblue',icon='info-sign'), color='rgb(55, 83, 109)'\n                    , tooltip = str(state).capitalize(), fill_color='rgb(55, 83, 109)').add_to(India)\n\n    else:\n        folium.Marker(location=[lat, long]\n                    , popup = ('<strong>nCov Numbers:<\/strong> ' + '<br>' + \n                               '<strong>State:<\/strong> ' + str(state).capitalize() + '<br>'\n                               '<strong>Confirmed:<\/strong> ' + str(int(confirmed)) + '<br>'\n                               '<strong>Active:<\/strong> ' + str(int(active)) + '<br>'\n                               '<strong>Deaths:<\/strong> ' + str(int(deaths)) + '<br>'\n                               '<strong>Recovered:<\/strong> ' + str(int(recovered)) + '<br>')\n                    , icon=folium.Icon(color='red', icon='info-sign'), color='rgb(26, 118, 255)'\n                    , tooltip = str(state).capitalize(), fill_color='rgb(26, 118, 255)').add_to(India)\n        \nIndia\n","08e19766":"## Statewise Covid-19 Cases...","db07f852":"# State-wise Numbers and Analysis...","8cba6fb2":"### Reported Confirmed, Deaths and Recovered cases over time...","11d68dc1":"### Reasons for patients without travel history getting infected...","1a6307d3":"**Government classifies health facilities into 3 categories for COVID-19 patient care**\n\n    These COVID-19 dedicated facilities will have separate earmarked areas for suspected cases and confirmed cases, and ensure the available hospital bed capacity is used only for \n    moderate to severe cases of the infection.\n    \n    To ensure optimal utilisation of resources to provide care to novel coronavirus patients, the Union Health Ministry proposed classification of health facilities into three \n    categories COVID Care Centre, Dedicated COVID Health Centre and Dedicated COVID Hospital. These COVID-19 dedicated facilities will have separate earmarked areas for suspected \n    cases and confirmed cases, and ensure the available hospital bed capacity is used only for moderate to severe cases of the infection.\n    \n    The available data in India suggests that nearly 70 per cent of cases affected with the infection either exhibit mild or very mild symptoms. Such cases may not require admission to \n    COVID-19 blocks or dedicated COVID-19 hospitals. COVID Care Centres will offer care only for cases that have been clinically assigned as mild or very mild or as suspect cases, \n    according to the document.These centres can be makeshift facilities and can be set up in hostels, hotels, schools, stadiums, lodges, among other places, both public and private. If \n    the need be, existing quarantine facilities can also be converted into COVID Care Centres\n\n\nRead more at:\nhttps:\/\/economictimes.indiatimes.com\/news\/politics-and-nation\/government-classifies-health-facilities-into-3-categories-for-covid-19-patient-care\/articleshow\/75033608.cms?utm_source=contentofinterest&utm_medium=text&utm_campaign=cppst","669c078d":"**Install Required Libraries...**","9865a18a":"### Patient Level Analysis...\n\nData @ https:\/\/docs.google.com\/spreadsheets\/d\/e\/2PACX-1vSc_2y5N0I67wDU38DjDh35IZSIS30rQf7_NYZhtYYGU1jJYT6_kDx4YpF-qw0LSlGsBYP8pqM_a1Pd\/pubhtml\n\nAPIs available for public access @ https:\/\/api.covid19india.org\/\n\n* National time series, statewise stats and test counts\t    https:\/\/api.covid19india.org\/data.json\n\n* State-district-wise\t                                    https:\/\/api.covid19india.org\/state_district_wise.json\n\n* State-district-wise V2\t                                https:\/\/api.covid19india.org\/v2\/state_district_wise.json\n\n* Travel history\t                                        https:\/\/api.covid19india.org\/travel_history.json\n\n* Raw data\t                                            https:\/\/api.covid19india.org\/raw_data.json\n\n* States Daily changes\t                                https:\/\/api.covid19india.org\/states_daily.json\n\n","8006167d":" ## Daywise numbers of the cases reported","b41e622d":"**The above plot implies that the average recovery period from the virus is normally is the range of 2 to 3 weeks. This would be the ideal range if the quarantine guidelines are strictly adhered to...**","a4b22268":"**The above state-wise data and the plot show that Kerela and Maharashtra are the 2 worst affected states in the country followed by Karnataka, Uttar Pradesh, Telengana, Rajasthan. \nAs the numbers in these states are increasing and India entering it's 3rd week\/phase of the spread we could possibly think (though still early to say) in terms of the community level spread.**","7eae1420":"****Now lets see the spread day wise. India reported it's first case on 30th January. Post that for a long period of time for almost a month we did not see any rise in the cases being reported. The numbers have started to increase from the starting of March.****","093bc1f3":"**This above plot implies that majority of the deceased patients belong to the elderly group between thr age 55 to 70. However, the virus can affect the younger generation as well. Many of the hospitalized patients are in the age group starting from 25 to 50 years.**","f1d4ec6d":"### Number of States \/ Union Territories affected progressively...","61d32e76":"### Combined Weekly Trend - India","5e3e0835":"# State Level (top 10) Changes - Daily\n\nAPI Details @ \n\n[1] https:\/\/api.covid19india.org\/\n\n[2] https:\/\/api.covid19india.org\/v2\/state_district_wise.json","0ad1fc38":"***Labtype Insights -***\n\n* **Government Laboratories Approved and Supported (provided diagnostic kits or reagents) by ICMR:** 139\n\n* **Government Laboratories Found Suitable for COVID19 Testing approved by ICMR:** 4\n\n* **Private Laboratories for COVID-19 Testing:** 67\n\n* **Collection Sites Only:** 3","9bb16c94":"**Bottom line:**\n\n    India needs to ramp up COVID-19 testing, learn from South Korea & avoid mistakes of the european countries and the United States. Testing is most important in controling the spread of \n    the virus. As it helps controls further spread of disease, if an individual is found positive for the virus, the concerned person can be put to isolation and quarantined to stop the \n    spread.\n\n   This section, provides insights based on the data provided by [https:\/\/ourworldindata.org\/covid-testing](http:\/\/https:\/\/ourworldindata.org\/covid-testing).\n\n   As per the current situation and given India's huge population, according to the Government, \n   ***India not out of woods; needs to exponentially ramp up tests***.\n   \n    Government officials involved in strategising India's approach to contain the pandemic said the overall social distancing model adopted by the country helped in checking spread of \n    the virus compared to many developed countries including the US which reported 3,30,000 cases. As we are somewhere in between stage-2 and stage-3 currently, \"there is a need to scale \n    up testing exponentially if we want the lockdown to work\" \n\n\nRead more at:\nhttps:\/\/economictimes.indiatimes.com\/news\/politics-and-nation\/india-not-out-of-woods-needs-to-exponentially-ramp-up-tests-experts-on-covid-19-pandemic\/articleshow\/75011541.cms?utm_source=contentofinterest&utm_medium=text&utm_campaign=cppst","a30fe074":"### Covid19 - YES vs Covid19 - NO","10866758":"### Detailed Treemap - State, Ditrict, City...","b98655b1":"# INDIAN COUNCIL OF MEDICAL RESEARCH Testing...\n\n**Homepage -** [https:\/\/icmr.nic.in\/content\/covid-19](https:\/\/icmr.nic.in\/content\/covid-19)","349c17ec":"### Total Numbers vs Current Status...","7b420b0e":"# Worst Hit States - Timeline Comparison...\n\n### 1. Total Confirmed Cases","0ecceba2":"### 2. Total Death Toll","213cdc93":"### 4. Active Cases","3fe9c6b1":"### Percentage of positive cases v\/s Number of Samples Tested","9d606cde":"### Patient Notes & Travel History...","f271cbf7":"### Latest Data","f32954ef":"### Places Visited by Infected Persons...","0fbd73fd":"# India Spread Over Time...","f9adcb5a":"### 3. Recovered Cases","344a97b1":"# Essential Guidelines\n\n### #IndiaFightsCorona\n(COVID19-India : Patient Database @ https:\/\/docs.google.com\/spreadsheets\/d\/e\/2PACX-1vSc_2y5N0I67wDU38DjDh35IZSIS30rQf7_NYZhtYYGU1jJYT6_kDx4YpF-qw0LSlGsBYP8pqM_a1Pd\/pubhtml#)\n\n1.\tDon't hoard groceries and essentials. Please ensure that people who are in need don't face a shortage because of you!\t\n2.\tBe compassionate! Help those in need like the elderly and poor. They are facing a crisis which we can't even imagine!\t\n3.\tBe considerate. While buying essentials remember that you need to share with 130 crore fellow citizens!\t\t\n4.\tGoing out to buy essentials? Social Distancing is KEY! Maintain at least 2 metres distance between each other in the line.\t\n5.\tPlan ahead! Take a minute and check how much supplies you have at home. Planning lets you buy exactly what you need.\n6.\tPlan and calculate your essential needs for the next three weeks.\t\t\t\t\t\t\n7.\tHelp out the elderly by bringing them their groceries and other essentials.\t\t\t\t\t\n8.\tHelp out your employees and domestic workers by not cutting their salaries. Show the true Indian spirit!\t\t\n9.\tLockdown means LOCKDOWN! Avoid going out unless absolutely necessary. Stay safe!\t\t\t\t\n10.\tPanic mode : OFF! \u274c\n    ESSENTIALS ARE ON! \u2714\ufe0f\t\t\t\t\t\t\t\t\t\t\t\n11.\tYour essential needs will be taken care of by the government in a timely manner. Please do not hoard.\t\t\n12.\tBe a true Indian. Show compassion, Be considerate,Help those in need. We will get through this!\t\t\t\n13.\tIf you have symptoms and suspect you have coronavirus - reach out to your doctor or call state helplines. \ud83d\udcde Get help.\t\n14.\tStand against FAKE news and illegit WhatsApp forwards! Do NOT \u274c forward a message until you verify the content it contains.\n15.\tIf you have any medical queries, reach out to your state helpline, district administration or trusted doctors!\t\t\n16.\tWash your hands with soap and water often, especially after a grocery run. Keep the virus at bay.\t\t\t\n17.\tThere is no evidence that hot weather will stop the virus! You can! Stay home, stay safe.\t\t\t\n18.\tHelp the medical fraternity by staying at home!\t\t\t\t\t\t\t\n19.\tAvoid going out during the lockdown. Help break the chain of spread.\t\t\t\t\t\n20.\tCall up your loved ones during the lockdown, support each other through these times.\t\t\t\t\n21.\tThe virus does not discriminate. Why do you? DO NOT DISCRIMINATE. We are all Indians!\t\t\t\n22.\tOur brothers from the North-East are just as Indian as you! Help everyone during this crisis \u2764\ufe0f\t\t\t\n23.\tGet in touch with your local NGO's and district administration to volunteer for this cause.\t\t\t\n24.\tThis will pass too. Enjoy your time at home and spend quality time with your family! Things will be normal soon.\t\n25.\t#BreakTheChain of unverified WhatsApp forwards which spread wrong information! Do not forward unless you verify it.","e7c2d3a9":"# Indian Health System - Hospitals & Beds\n\n**More Information @** https:\/\/economictimes.indiatimes.com\/news\/politics-and-nation\/government-classifies-health-facilities-into-3-categories-for-covid-19-patient-care\/articleshow\/75033608.cms?from=mdr","eea49bc6":"### Other key factors from patient notes...","7946cf6d":"# On the Map...","7ce6286e":"# Patient Demographics\n\n## Age wise trend...","2106008a":"### Days to Recovery...","bbb23440":"### Number of Tests v\/s Confirmed Cases","0fefdbd7":"### Nationality...","788cbd4a":"### Top 10 Affected States...","f747b988":"### Current Patient Status...","d8b12eb7":"### Mode of Travel\n\nThe data is available from https:\/\/api.covid19india.org\/ is the JSON format which can be accessed using the API -\n\n**Travel history** - https:\/\/api.covid19india.org\/travel_history.json\n","255fdb28":"**Import Required Libraries and Packages...**","e39f979e":"**Hospital Beds Available For Every 1000 Person**\n\n**Census data @** https:\/\/censusindia.gov.in\/DigitalLibrary\/Tables.aspx\n\nRef for the below plot - https:\/\/www.kaggle.com\/vikassingh1996\/indiafightscorona-covid-19-stage-ii","47be0575":"# Foreign vs Indian Cases...","2872ea03":"**Many values from Age and Gender information are missing. Out of the information that is available we will try to check the trend...**","443d4768":"### Gender","d5e2ff72":"# Covid-19 - India Reports\n\n### India beats other nations in Covid response\n\n![image.png](attachment:image.png)\n\nRead more at:\nhttp:\/\/timesofindia.indiatimes.com\/articleshow\/75089755.cms?utm_source=contentofinterest&utm_medium=text&utm_campaign=cppst\n\n\n# Global Pandemic\n\nWith China reporting more than 70k cases of the virus and cases being reported from over 100 countries icluding the USA, Australia, Cambodia, Canada, Italy, Japan, France, Malaysia, Japan, South Korea, Thailand, etc.. with a global total of confirmed cases being 182,997 the World Health Organization has declared the crisis as a Pandemic. \n\n## India Reports\n\nIn several cities, many people having symptoms of the virus infection are kept under observation in hospitals. According to WHO till the 17th of March a total of 129 COVID-19 cases have been reported in India. They include 112 Indian nationals, 17 foreign nationals, 10 recovered and 2 deaths. State-wise cases of COVID-19 have been reported from 13 States\/UTs: Andhra Pradesh (1 case), Delhi (7 cases), Haryana (14 cases), Jammu & Kashmir (2 cases), Karnataka (6 cases), Kerala (24 cases), Ladakh (3 cases), Maharashtra (33 cases), Punjab (1 case), Rajasthan (4 cases), Telangana (3 cases), Tamil Nadu (1 case), Uttar Pradesh (12 cases) and Odisha (1 case).\n\n**The Govt. helpline number: 011-239 78046, will remain operational. Besides the toll-free numbers,the ministry also issued a helpline email ID - ncov2019@gmail.com.**\n\nRead more at:\nhttps:\/\/economictimes.indiatimes.com\/news\/politics-and-nation\/health-ministry-launches-new-toll-free-number-email-id-for-queries-on-covid-19\/articleshow\/74661190.cms?utm_source=contentofinterest&utm_medium=text&utm_campaign=cppst\n\n\n## Previous Work on Covid-19\n1. https:\/\/www.kaggle.com\/sauravmishra1710\/covid-19-sars-cov-2-a-geo-statistical-analysis\n2. https:\/\/www.kaggle.com\/sauravmishra1710\/covid-19-sars-cov-2-a-geographical-analysis","6043774d":"# ICMR Testing Labs\n\n**More Information on testing labs can be found @** \n\n1. https:\/\/covid.icmr.org.in\/index.php\/testing-facilities\n2. https:\/\/covid.icmr.org.in\/index.php\/testing-labs-deatails"}}