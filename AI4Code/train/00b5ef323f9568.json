{"cell_type":{"2810eb8f":"code","11cf5e94":"code","e14918ee":"code","d326c63d":"code","a844ca9d":"code","27b2da4d":"code","bb1f7e83":"code","45a57ea0":"code","d175ff80":"code","31702602":"code","d55bd131":"code","3e82b14f":"code","04b92927":"code","eaa988ac":"code","e8b6bca4":"code","3ebe7421":"code","4df5396a":"code","13b6b257":"code","d0422697":"code","5ede33b2":"code","22d14be1":"code","9414e80a":"code","adff9a89":"code","282b1236":"code","a6095521":"code","7e6b6576":"code","255ef4b3":"code","8550e7c8":"code","357ad97e":"code","4a8251f2":"code","507f7c62":"code","f142e7b5":"code","00b0109b":"code","084b2f72":"code","b2eb9277":"code","f0764ef6":"code","0ab6d779":"code","a57ed902":"code","5d669bec":"code","ee1b14a8":"code","a9cbcce7":"code","95e9bd0d":"code","71bd125c":"code","a2ee6326":"code","50ea1b61":"code","c2a0734a":"code","3e2da876":"code","adca9bd8":"code","2f936fdb":"code","95d559b1":"code","0b0d4dea":"code","f01803a1":"code","cf0ec3ae":"code","13f5e6c4":"code","78d71664":"code","dc0fad9d":"code","d5029de8":"code","f9d31625":"code","f153bad1":"code","0d124c29":"code","610f2706":"code","fb918bf5":"code","aa4db267":"code","6a10efd8":"code","70e949a6":"code","1fe65952":"code","c4c7be8f":"markdown","1ee43d2e":"markdown","be6d5dd2":"markdown","c5a3c343":"markdown","ed5ebefb":"markdown","e3ce6c63":"markdown","f85600d0":"markdown","42a07bc2":"markdown","918b14b5":"markdown","08980793":"markdown","0cbbdac7":"markdown","205fb3b9":"markdown","353de2f8":"markdown","6b711221":"markdown","4eb6d120":"markdown","58d5b4a1":"markdown","40ed7a52":"markdown","801d992c":"markdown","c5acffd0":"markdown","2d7a9250":"markdown","e785273d":"markdown","bf32a0e6":"markdown","30064d1c":"markdown","8baf9652":"markdown","34b88ec2":"markdown","6a8ce2f6":"markdown","7b40cbba":"markdown","34bacf3d":"markdown"},"source":{"2810eb8f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom xgboost import XGBRegressor\nfrom sklearn import metrics\n\n","11cf5e94":"df_sales_train = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ndf_sales_test = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')\ndf_sales_shop = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ndf_sales_item = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv')\ndf_sales_item_cat = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')","e14918ee":"df_sales_train.head()","d326c63d":"sns.boxplot(x=df_sales_train.item_price)\nplt.title('Outliers By Item Price');","a844ca9d":"sns.boxplot(x=df_sales_train.item_cnt_day)\nplt.title('Outliers By Item Day');","27b2da4d":"df_sales_train = df_sales_train[df_sales_train.item_price<100000]\ndf_sales_train = df_sales_train[df_sales_train.item_cnt_day<1001]","bb1f7e83":"median = df_sales_train[(df_sales_train.shop_id==32)&(df_sales_train.item_id==2973)&(df_sales_train.date_block_num==4)&(df_sales_train.item_price>0)].item_price.median()\ndf_sales_train.loc[df_sales_train.item_price<0, 'item_price'] = median","45a57ea0":"# \u042f\u043a\u0443\u0442\u0441\u043a \u041e\u0440\u0434\u0436\u043e\u043d\u0438\u043a\u0438\u0434\u0437\u0435, 56\ndf_sales_train.loc[df_sales_train.shop_id == 0, 'shop_id'] = 57\ndf_sales_test.loc[df_sales_test.shop_id == 0, 'shop_id'] = 57\n# \u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426 \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\"\ndf_sales_train.loc[df_sales_train.shop_id == 1, 'shop_id'] = 58\ndf_sales_test.loc[df_sales_test.shop_id == 1, 'shop_id'] = 58\n# \u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0443\u043b. \u0427\u043a\u0430\u043b\u043e\u0432\u0430 39\u043c\u00b2\ndf_sales_train.loc[df_sales_train.shop_id == 10, 'shop_id'] = 11\ndf_sales_test.loc[df_sales_test.shop_id == 10, 'shop_id'] = 11","d175ff80":"df_sales_train_grouped = df_sales_train.groupby(['shop_id','item_id']).agg({'item_cnt_day':'sum', 'item_price':'mean'}).reset_index()","31702602":"df_sales_train_grouped_negative = df_sales_train_grouped.groupby('shop_id').sum().reset_index().sort_values(by='item_cnt_day').head(10)","d55bd131":"df_sales_shop_labels = df_sales_shop.loc[df_sales_shop['shop_id'].isin(df_sales_train_grouped_negative['shop_id']),'shop_name'].reset_index()\nlegend_list  = df_sales_shop_labels.apply((lambda x : str(x['index']) + ' --> ' + x['shop_name']),axis=1)","3e82b14f":"plt.figure(figsize=(8,6))\nsns.barplot(y='shop_id',x='item_cnt_day',data=df_sales_train_grouped_negative,\n            order=df_sales_train_grouped_negative['shop_id'],orient='h')\nleg = plt.legend(legend_list,loc='best', bbox_to_anchor=(1.3, 0.515, 0.5, 0.5))\nplt.xlabel('Sales')\n\nfor item in leg.legendHandles:\n    item.set_visible(False)\nplt.title('Bottom 10 sales by shop');","04b92927":"df_sales_train_grouped_positive = df_sales_train_grouped.groupby('shop_id').sum().reset_index().sort_values(by='item_cnt_day',ascending=False).head(10)","eaa988ac":"df_sales_shop_labels = df_sales_shop.loc[df_sales_shop['shop_id'].isin(df_sales_train_grouped_positive['shop_id']),'shop_name'].reset_index()\nlegend_list  = df_sales_shop_labels.apply((lambda x : str(x['index']) + ' --> ' + x['shop_name']),axis=1)","e8b6bca4":"plt.figure(figsize=(8,6))\nsns.barplot(y='shop_id',x='item_cnt_day',data=df_sales_train_grouped_positive,\n            order=df_sales_train_grouped_positive['shop_id'],orient='h')\nleg = plt.legend(legend_list,loc='best', bbox_to_anchor=(1., 0.515, 0.5, 0.5))\nplt.xlabel('Sales')\n\nfor item in leg.legendHandles:\n    item.set_visible(False)\nplt.title('Top 10 sales by shop');","3ebe7421":"df_sales_train_grouped_negative = df_sales_train_grouped.groupby('item_id').sum().reset_index().sort_values(by='item_cnt_day').head(10)","4df5396a":"df_sales_item_labels = df_sales_item.loc[df_sales_item['item_id'].isin(df_sales_train_grouped_negative['item_id']),'item_name'].reset_index()\nlegend_list  = df_sales_item_labels.apply((lambda x : str(x['index']) + ' --> ' + x['item_name']),axis=1)","13b6b257":"plt.figure(figsize=(8,6))\nsns.barplot(x='item_id',y='item_cnt_day',data=df_sales_train_grouped_negative,\n            order=df_sales_train_grouped_negative['item_id'],orient='v')\nleg = plt.legend(legend_list,loc='best', bbox_to_anchor=(1.0, 0.515, 0.5, 0.5))\nplt.xlabel('Sales')\n\n\nfor item in leg.legendHandles:\n    item.set_visible(False)\nplt.title('Bottom 10 sales by Item');","d0422697":"df_sales_train_grouped_positive = df_sales_train_grouped.groupby('item_id').sum().reset_index().sort_values(by='item_cnt_day',ascending=False).head(10)","5ede33b2":"df_sales_item_labels = df_sales_item.loc[df_sales_item['item_id'].isin(df_sales_train_grouped_positive['item_id']),'item_name'].reset_index()\nlegend_list  = df_sales_item_labels.apply((lambda x : str(x['index']) + ' --> ' + x['item_name']),axis=1)","22d14be1":"plt.figure(figsize=(8,6))\nsns.barplot(y='item_id',x='item_cnt_day',data=df_sales_train_grouped_positive,\n            order=df_sales_train_grouped_positive['item_id'],orient='h')\nleg = plt.legend(legend_list,loc='best', bbox_to_anchor=(1.0, 0.515, 0.5, 0.5))\nplt.xlabel('Sales')\n\nfor item in leg.legendHandles:\n    item.set_visible(False)\nplt.title('Top 10 sales by Item');","9414e80a":"df_sales_train_grouped_negative = df_sales_train_grouped.sort_values(by='item_cnt_day').head(10)","adff9a89":"df_sales_train_grouped_negative['shop & item'] = df_sales_train_grouped_negative.apply((lambda x: str(x['shop_id']) + ' & '+ str(x['item_id'])),axis=1)","282b1236":"df_sales_item_labels = df_sales_item.loc[df_sales_item['item_id'].isin(df_sales_train_grouped_negative['item_id']),'item_name'].reset_index()\nlegend_list_item  = df_sales_item_labels.apply((lambda x : str(x['index']) + ' --> ' + x['item_name']),axis=1)\ndf_sales_shop_labels = df_sales_shop.loc[df_sales_shop['shop_id'].isin(df_sales_train_grouped_negative['shop_id']),'shop_name'].reset_index()\nlegend_list_shop  = df_sales_shop_labels.apply((lambda x : str(x['index']) + ' --> ' + x['shop_name']),axis=1)\n\nlegend_list = legend_list_item.append(legend_list_shop)","a6095521":"plt.figure(figsize=(8,6))\nsns.barplot(y='shop & item',x='item_cnt_day',data=df_sales_train_grouped_negative,\n            order=df_sales_train_grouped_negative['shop & item'],orient='h')\nleg = plt.legend(legend_list,loc='best', bbox_to_anchor=(1.0, 0.515, 0.5, 0.5))\nplt.xlabel('Sales')\n\nfor item in leg.legendHandles:\n    item.set_visible(False)\nplt.title('Bottom 10 Sales by Shop and item Combination');","7e6b6576":"df_sales_train_grouped_positive = df_sales_train_grouped.sort_values(by='item_cnt_day',ascending=False).head(10)","255ef4b3":"df_sales_train_grouped_positive['shop & item'] = df_sales_train_grouped_positive.apply((lambda x: str(x['shop_id']) + ' & '+ str(x['item_id'])),axis=1)","8550e7c8":"df_sales_item_labels = df_sales_item.loc[df_sales_item['item_id'].isin(df_sales_train_grouped_positive['item_id']),'item_name'].reset_index()\nlegend_list_item  = df_sales_item_labels.apply((lambda x : str(x['index']) + ' --> ' + x['item_name']),axis=1)\ndf_sales_shop_labels = df_sales_shop.loc[df_sales_shop['shop_id'].isin(df_sales_train_grouped_positive['shop_id']),'shop_name'].reset_index()\nlegend_list_shop  = df_sales_shop_labels.apply((lambda x : str(x['index']) + ' --> ' + x['shop_name']),axis=1)\n\nlegend_list = legend_list_item.append(legend_list_shop)","357ad97e":"plt.figure(figsize=(8,6))\nsns.barplot(y='shop & item',x='item_cnt_day',data=df_sales_train_grouped_positive,\n            order=df_sales_train_grouped_positive['shop & item'],orient='h')\nleg = plt.legend(legend_list,loc='best', bbox_to_anchor=(1.0, 0.515, 0.5, 0.5))\nplt.xlabel('Sales')\nfor item in leg.legendHandles:\n    item.set_visible(False)\nplt.title('Top 10 Sales by Shop and item Combination');","4a8251f2":"train = df_sales_train.groupby(['date_block_num','shop_id','item_id']).agg({'item_cnt_day':'sum', 'item_price':'mean'}).reset_index()","507f7c62":"def create_lag_feature(df,lags,col):\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n    for lag in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id','item_id',col+'_lag_'+str(lag)]\n        shifted['date_block_num'] += lag\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'],how = 'left')\n    \n    return df","f142e7b5":"train = create_lag_feature(train,range(1,13),'item_cnt_day')\ntrain.fillna(value=0,inplace=True)\n\ntrain = create_lag_feature(train,range(1,13),'item_price')\ntrain.fillna(value=0,inplace=True)","00b0109b":"train_shop = df_sales_train.groupby(['date_block_num','shop_id']).agg({'item_cnt_day':'sum', 'item_price':'mean'}).reset_index()","084b2f72":"def create_lag_feature(df,lags,col):\n    tmp = df[['date_block_num','shop_id',col]]\n    for lag in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id',col+'_shop_lag_'+str(lag)]\n        shifted['date_block_num'] += lag\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id'],how = 'left')\n    \n    return df","b2eb9277":"train_shop = create_lag_feature(train_shop,range(1,13),'item_cnt_day')\ntrain_shop.fillna(value=0,inplace=True)\n\ntrain_shop = create_lag_feature(train_shop,range(1,13),'item_price')\ntrain_shop.fillna(value=0,inplace=True)\n\n\ntrain_shop.rename(columns = {'item_cnt_day':'item_cnt_day_shop','item_price':'item_price_shop'},inplace=True)","f0764ef6":"train_item = df_sales_train.groupby(['date_block_num','item_id']).agg({'item_cnt_day':'sum', 'item_price':'mean'}).reset_index()","0ab6d779":"def create_lag_feature(df,lags,col):\n    tmp = df[['date_block_num','item_id',col]]\n    for lag in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','item_id',col+'_item_lag_'+str(lag)]\n        shifted['date_block_num'] += lag\n        df = pd.merge(df, shifted, on=['date_block_num','item_id'],how = 'left')\n    \n    return df","a57ed902":"train_item = create_lag_feature(train_item,range(1,13),'item_cnt_day')\ntrain_item.fillna(value=0,inplace=True)\n\ntrain_item = create_lag_feature(train_item,range(1,13),'item_price')\ntrain_item.fillna(value=0,inplace=True)\n\ntrain_item.rename(columns = {'item_cnt_day':'item_cnt_day_item','item_price':'item_price_item'},inplace=True)","5d669bec":"train = pd.merge(train,train_item,on=['date_block_num','item_id'],how = 'left')\ntrain = pd.merge(train,train_shop,on=['date_block_num','shop_id'],how = 'left')","ee1b14a8":"train['month'] = train['date_block_num'] % 12","a9cbcce7":"days = pd.Series([31,28,31,30,31,30,31,31,30,31,30,31])\ntrain['days'] = train['month'].map(days).astype(np.int8)","95e9bd0d":"train['Year'] = (train['date_block_num'] \/\/ 12 ) + 2013","71bd125c":"sns.pointplot(x='month', y='item_cnt_day', hue='Year', data=train,estimator=np.sum)","a2ee6326":"df_sales_shop['city'] = df_sales_shop['shop_name'].str.split(' ').map(lambda x: x[0])\ndf_sales_shop.loc[df_sales_shop.city == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\ndf_sales_shop['city_code'] = LabelEncoder().fit_transform(df_sales_shop['city'])\n\ncoords = dict()\ncoords['\u042f\u043a\u0443\u0442\u0441\u043a'] = (62.028098, 129.732555, 4)\ncoords['\u0410\u0434\u044b\u0433\u0435\u044f'] = (44.609764, 40.100516, 3)\ncoords['\u0411\u0430\u043b\u0430\u0448\u0438\u0445\u0430'] = (55.8094500, 37.9580600, 1)\ncoords['\u0412\u043e\u043b\u0436\u0441\u043a\u0438\u0439'] = (53.4305800, 50.1190000, 3)\ncoords['\u0412\u043e\u043b\u043e\u0433\u0434\u0430'] = (59.2239000, 39.8839800, 2)\ncoords['\u0412\u043e\u0440\u043e\u043d\u0435\u0436'] = (51.6720400, 39.1843000, 3)\ncoords['\u0412\u044b\u0435\u0437\u0434\u043d\u0430\u044f'] = (0, 0, 0)\ncoords['\u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439'] = (55.5952800, 38.1202800, 1)\ncoords['\u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d'] = (0, 0, 0)\ncoords['\u041a\u0430\u0437\u0430\u043d\u044c'] = (55.7887400, 49.1221400, 4)\ncoords['\u041a\u0430\u043b\u0443\u0433\u0430'] = (54.5293000, 36.2754200, 4)\ncoords['\u041a\u043e\u043b\u043e\u043c\u043d\u0430'] = (55.0794400, 38.7783300, 4)\ncoords['\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a'] = (56.0183900, 92.8671700, 4)\ncoords['\u041a\u0443\u0440\u0441\u043a'] = (51.7373300, 36.1873500, 3)\ncoords['\u041c\u043e\u0441\u043a\u0432\u0430'] = (55.7522200, 37.6155600, 1)\ncoords['\u041c\u044b\u0442\u0438\u0449\u0438'] = (55.9116300, 37.7307600, 1)\ncoords['\u041d.\u041d\u043e\u0432\u0433\u043e\u0440\u043e\u0434'] = (56.3286700, 44.0020500, 4)\ncoords['\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a'] = (55.0415000, 82.9346000, 4)\ncoords['\u041e\u043c\u0441\u043a'] = (54.9924400, 73.3685900, 4)\ncoords['\u0420\u043e\u0441\u0442\u043e\u0432\u041d\u0430\u0414\u043e\u043d\u0443'] = (47.2313500, 39.7232800, 3)\ncoords['\u0421\u041f\u0431'] = (59.9386300, 30.3141300, 2)\ncoords['\u0421\u0430\u043c\u0430\u0440\u0430'] = (53.2000700, 50.1500000, 4)\ncoords['\u0421\u0435\u0440\u0433\u0438\u0435\u0432'] = (56.3000000, 38.1333300, 4)\ncoords['\u0421\u0443\u0440\u0433\u0443\u0442'] = (61.2500000, 73.4166700, 4)\ncoords['\u0422\u043e\u043c\u0441\u043a'] = (56.4977100, 84.9743700, 4)\ncoords['\u0422\u044e\u043c\u0435\u043d\u044c'] = (57.1522200, 65.5272200, 4)\ncoords['\u0423\u0444\u0430'] = (54.7430600, 55.9677900, 4)\ncoords['\u0425\u0438\u043c\u043a\u0438'] = (55.8970400, 37.4296900, 1)\ncoords['\u0426\u0438\u0444\u0440\u043e\u0432\u043e\u0439'] = (0, 0, 0)\ncoords['\u0427\u0435\u0445\u043e\u0432'] = (55.1477000, 37.4772800, 4)\ncoords['\u042f\u0440\u043e\u0441\u043b\u0430\u0432\u043b\u044c'] = (57.6298700, 39.8736800, 2) \n\ndf_sales_shop['city_coord_l'] = df_sales_shop['city'].apply(lambda x: coords[x][0])\ndf_sales_shop['city_coord_lt'] = df_sales_shop['city'].apply(lambda x: coords[x][1])\ndf_sales_shop['country_part'] = df_sales_shop['city'].apply(lambda x: coords[x][2])\ndf_sales_shop = df_sales_shop[['shop_id','city_code', 'city_coord_l', 'city_coord_lt', 'country_part']]\n\n\ndf_sales_item_cat['split'] = df_sales_item_cat['item_category_name'].str.split('-')\ndf_sales_item_cat['type'] = df_sales_item_cat['split'].map(lambda x: x[0].strip())\ndf_sales_item_cat['type_code'] = LabelEncoder().fit_transform(df_sales_item_cat['type'])\n# if subtype is nan then type\ndf_sales_item_cat['subtype'] = df_sales_item_cat['split'].map(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\ndf_sales_item_cat['subtype_code'] = LabelEncoder().fit_transform(df_sales_item_cat['subtype'])\ndf_sales_item_cat = df_sales_item_cat[['item_category_id','type_code', 'subtype_code']]\n","50ea1b61":"train = pd.merge(train,df_sales_item[['item_id','item_category_id']],on='item_id',how='inner')\ntrain = pd.merge(train, df_sales_shop, on='shop_id',how = 'left')\ntrain = pd.merge(train, df_sales_item_cat, on='item_category_id',how = 'left')","c2a0734a":"def revenues(df):\n    df['revenue_lag_1'] = df['item_cnt_day_lag_1']*df['item_price_lag_1']\n    df['revenue_lag_item_1'] = df['item_cnt_day_item_lag_1']*df['item_price_item_lag_1']\n    df['revenue_lag_shop_1'] = df['item_cnt_day_shop_lag_1']*df['item_price_shop_lag_1']\n    \n    return df\n    ","3e2da876":"train = revenues(train)","adca9bd8":"train.to_pickle('train.pkl')","2f936fdb":"del df_sales_shop\ndel df_sales_item\ndel df_sales_item_cat\ndel df_sales_train\ndel df_sales_train_grouped\ndel df_sales_train_grouped_negative\ndel df_sales_train_grouped_positive\ndel legend_list\ndel train","95d559b1":"train = pd.read_pickle('train.pkl')","0b0d4dea":"X_train = train.drop(labels=['item_cnt_day','item_cnt_day_item','item_cnt_day_shop',\n                             'item_price','item_price_item','item_price_shop'],axis=1)\ny_train = train['item_cnt_day'].clip(0,20)\nX_test = train[(train['date_block_num']>32)].drop(labels=['item_cnt_day','item_cnt_day_item','item_cnt_day_shop',\n                             'item_price','item_price_item','item_price_shop'],axis=1)\ny_test = train[(train['date_block_num']>32)]['item_cnt_day'].clip(0,20)\n\n\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","f01803a1":"xgb = XGBRegressor(objective='reg:squarederror',\n    n_estimators=1000,\n    max_depth=10,\n    reg_alpha=0.1,\n    reg_lambda=2,\n    eta=0.2,\n    tree_method='gpu_hist')","cf0ec3ae":"xgb.fit(X_train,y_train,eval_metric=\"rmse\",\n        eval_set=[(X_train, y_train), (X_test, y_test)],\n        verbose=False,\n        early_stopping_rounds = 10)","13f5e6c4":"predxg = xgb.predict(X_test)","78d71664":"print(metrics.mean_squared_error(y_test,predxg))","dc0fad9d":"coeff_df = pd.DataFrame(xgb.feature_importances_,X_train.columns,columns=['Coefficient'])\n\nfig, ax = plt.subplots(1,1,figsize=(12,8))\ncoeff_df.sort_values(by='Coefficient',ascending=False).head(20).plot(kind='bar',ax=ax)\nplt.xlabel('Features')\nplt.title('Top 20 Features');","d5029de8":"df_sales_test['date_block_num'] = 34","f9d31625":"train_updated_columns = list()\nfor i in train.columns:\n    train_updated_column = ''\n    if i[-1].isnumeric():\n        train_updated_column = '_'.join(i.split('_')[:-1]) +'_' + str(int(i.split('_')[-1])+1)\n    elif i.find('item_cnt_day') > -1:\n        train_updated_column = i + \"_lag_1\"\n    elif i.find('item_price') > -1:\n        train_updated_column = i + \"_lag_1\"\n    else:\n        train_updated_column = i\n        \n    \n        \n    if i[-1].isnumeric():\n        if int(i.split('_')[-1]) < 12:\n            train_updated_columns.append(train_updated_column)\n    else:\n        train_updated_columns.append(train_updated_column)\n        ","f153bad1":"train['date_block_num'] +=1\ntrain = train[train['date_block_num']==34]\ntrain.drop(labels=['item_cnt_day_lag_12','item_price_lag_12','item_cnt_day_item_lag_12','item_price_item_lag_12',\n                  'item_cnt_day_shop_lag_12','item_price_shop_lag_12'],axis=1,inplace=True)\n\ntrain.columns = train_updated_columns","0d124c29":"test = pd.DataFrame()","610f2706":"prev = 0\nfor i in range(0,df_sales_test.shape[0],10000):\n    test = pd.concat([test,pd.merge(df_sales_test[prev:i], train, on=['date_block_num','shop_id','item_id'],how = 'left')],ignore_index=True)\n    prev=i\ntest = pd.concat([test,pd.merge(df_sales_test[prev:], train, on=['date_block_num','shop_id','item_id'],how = 'left')],ignore_index=True)","fb918bf5":"Id = test['ID']\ntest['month'] = test['date_block_num'] % 12\ntest['days'] = test['month'].map(days).astype(np.int8)\ntest['Year'] = (test['date_block_num'] \/\/ 12 ) + 2013\ntest.fillna(value=0,inplace=True)\ntest.drop('ID',axis=1,inplace=True)","aa4db267":"test = revenues(test)","6a10efd8":"pred_xg = xgb.predict(test[X_train.columns])","70e949a6":"pred_xg = pred_xg.reshape(pred_xg.shape[0],).clip(0,20)","1fe65952":"submission = pd.DataFrame({\n        \"ID\": Id,\n        \"item_cnt_month\": pred_xg\n    })\nsubmission.to_csv('submission.csv', index=False)","c4c7be8f":"Lag Feature are being created","1ee43d2e":"## Split train\/test","be6d5dd2":"Year","c5a3c343":"Grouping training by shop_id and Item_id","ed5ebefb":"## Test Prediction","e3ce6c63":"# Please upvote if you find my notebook intersting :)","f85600d0":"Several shops is duplicated which can be determine by shop name","42a07bc2":"Grouping by Month,Shop_id and Item_id","918b14b5":"## Bottom 10 Sales  by Item","08980793":"## Bottom 10 Sales  by Shop and item Combination","0cbbdac7":"Revenues data featuring","205fb3b9":"## Top 10 Sales  by Item","353de2f8":"## Bottom 10 Sales  by Shop","6b711221":"Here I am creating one lag for test data by just replacing subsequent column name","4eb6d120":"### Shop location and item Category","58d5b4a1":"There is one tuple with item price less than 0 replacing with median","40ed7a52":"## Top 10 Sales  by Shop and item Combination","801d992c":"## Top 10 Sales  by Shop","c5acffd0":"# Import Libraries","2d7a9250":"Month","e785273d":"# Data Visualization","bf32a0e6":"## Merging above created lag features","30064d1c":"## Feature Importance","8baf9652":"Days","34b88ec2":"Grouping by month and shop_Id only","6a8ce2f6":"# Feature Engineering","7b40cbba":"## Outlier","34bacf3d":"# XG Boost"}}