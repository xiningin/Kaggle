{"cell_type":{"6eb6a591":"code","2017bddf":"code","c85ec6f7":"code","748e424b":"code","8a4f7a8a":"code","b9a1d6ec":"code","758c5aaf":"markdown","cc06b7c8":"markdown","f7c1478b":"markdown","25a266e5":"markdown","363ada23":"markdown","e0c2255f":"markdown","9d7b3a9e":"markdown"},"source":{"6eb6a591":"'''Importing tensorflow'''\nimport tensorflow as tf","2017bddf":"'''tf.Varibale(value , name)'''\nx = tf.Variable( 2 , name = \"x\" )\ny = tf.Variable( 4 , name = \"y\" )\n\n'''equation'''\nf = x*x*y + y + 2","c85ec6f7":"'''creating session'''\nsession = tf.Session()\n\n'''initializing variables\n x = 2 and y = 4 '''\nsession.run(x.initializer)\nsession.run(y.initializer)\n\n'''evaluating f \n f = x*x*y + y + 2'''\nresult = session.run(f)\nprint(result)\n\n'''Terminating the session'''\nsession.close()","748e424b":"with tf.Session() as session :\n    '''initializing variables'''\n    x.initializer.run()\n    y.initializer.run()\n    '''evaluating f'''\n    result = f.eval()\n    '''session closed automatically'''\n    \nprint(result)","8a4f7a8a":"'''initializing a node'''\ninit = tf.global_variables_initializer()\n\nwith tf.Session() as session:\n    '''initializing all the variables'''\n    init.run()\n    '''evaluating f'''\n    result = f.eval()\n    '''session is closed automatically'''\n    \nprint(result)","b9a1d6ec":"'''Creating an Interactive session.'''\nsession = tf.InteractiveSession()\n'''initializing the global variables'''\ninit.run()\n'''evaluating f'''\nresult = f.eval()\nprint(result)\n\n'''terminating session'''\nsession.close()","758c5aaf":"# <u> TensorFlow<\/u>\n\n<center><h2>Introduction<\/h2><\/center>\n* TensorFlow is an open source software library for numerical computation , particularly well suited and fine-tuned for large-scale Machine Learning .\n* Basic principle of Tensorflow : -\n   *  In python first define a graph of computation to perform.\n   * Then TensorFlow takes that graph and runs it efficiently using optimized C++ code. Most importantly , it is possible to break up the graph into several chunks and run them in parallel across multiple CPUs or GPUs.\n* TensorFlow also supports distributed computing.\n* TensorFlow can train a network with millions of parameters on a training set composed of billions of instances with millions of features each.\n* TensorFlow is developed by the Google Brain team .\n* TensorFlow not only runs on Windows , Linux and macOS  , but also on mobile devices , including both iOS and Android .\n* It provides a very simple Python API called TF.Learn , compatible with Scikit - Learn .\n* Several other high level APIs have been built independently on top of TensorFlow , such as Keras or Pretty Tensor.\n* TensorFlow comes with a great visualization tool called as  **TensorBoard** , that allows you to browse through the computation graph , view learning curves and more. \n\n## <u>Installing TensorFlow<\/u>\n**TensorFlow CPU only** \n* Click on this link  [tensorflowcpuonly](https:\/\/www.tensorflow.org\/install\/)\n\n**TensorFlow GPU**\n* Click on this link , there is a video guide for TensorFlow GPU installation [tensorflowgpu](https:\/\/www.youtube.com\/watch?v=uIm3DMprk7M)\n\n**What are CPUs and GPUs?**\n\nA CPU (central processing unit) is often called the \u201cbrain\u201d or the \u201cheart\u201d of a computer. It is required to run the majority of engineering and office software. However, there is a multitude of tasks that can overwhelm a computer\u2019s central processor. That is when using GPU becomes essential for computing.\n\nA GPU (graphics processing unit) is a specialized type of microprocessor, primarily designed for quick image rendering. GPUs appeared as a response to graphically intense applications that put a burden on the CPU and degraded computer performance. They became a way to offload those tasks from CPUs, but modern graphics processors are powerful enough to perform rapid mathematical calculations for many other purposes apart from rendering.\n\n\n# Creating your first Graph and running it in a session .\n* TensorFlow uses a dataflow graph to represent your computation in terms of the dependencies between individual operations. This leads to a low-level programming model in which you first define the dataflow graph, then create a TensorFlow session to run parts of the graph across a set of local and remote devices.","cc06b7c8":"* In the above cell the codes do not perform any computation . It just creates a computation graph , in fact even the variables are not initialized yet.\n* To evaluate this graph , we need to open a **TensorFlow session** and use it to initialize the **variables** and evaluate **f**.\n* A TensorFlow **Session** takes care of placing the operations onto devices such as CPUs and GPUs and running them , and it holds all the variable values.\n* The following code  creates a **session , initializes the variables , and evaluate , and f then closes the session (which free up resources)**:","f7c1478b":"Inside **Jupyter** or within a **Python** shell we may prefer to create an **InteractiveSession**. The only differnce from a regular **Session** is that when an **InteractiveSession** is created it automatically sets itself as the default session , so we don't need a **with** block , but we need to close the session manually when we are done with it .","25a266e5":"Inside the **with** block , the session i set as default session . Calling **x.initializer.run()**  is equivalent to calling **tf.get_default_session().run(x.initializer)** and similar to **f.eval()** is equivalent to calling **tf.get_default_session().run(f)** . This makes the code easier to read . Moreover  , the session is automatically closed at the end of the block .\n\nInstead of manually running the initializer for every single variable , we can use the **global_variables_initiaizer()** functon . **Note** that it does not actually perform the initialization immediately , but rather creates a node in the graph that will initialize all variables when it is run:","363ada23":"**A TensorFlow program is typically split into two parts :**\n* First part builds a **computation graph** , this is called as the **construction phase**.\n* Second part **runs** it , this is called as the **execution phase**.\n\n**Contruction phase:**\n* This phase typically builds a computation graph representing the Machin Learning model and the computations required to training it . \n\n**Execution phase:**\n* This phase generally runs a loop that evaluates a training step repeatedly (for exampe, one step per mini-batch) , gradually improving the model parameters . \n\n**In the next chapter we will learn how to  Manage  Graphs , Lifecycle of a Node Value  and even do Linear Regression with TensorFlow.** ","e0c2255f":"** Creating graph  **","9d7b3a9e":"**Having  to repeat session.run( ) all the time is a bit cumbersome , but fortunately there is a better way .**"}}