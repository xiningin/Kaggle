{"cell_type":{"ae49a870":"code","6a5f654e":"code","635fe8d9":"code","5a1fee5d":"code","db233a6d":"code","e4f7fa8a":"code","b2b0d1c5":"code","80d1d792":"code","a0e159d8":"code","0ee4a985":"code","c540452c":"code","43616f50":"code","25c3f0e2":"code","7274c55f":"code","b6f9a9a3":"code","4eb9cd43":"code","cfa5a178":"code","fc0787f5":"code","02d447d8":"code","e219ce40":"code","66e38f17":"code","529b7ab4":"code","ef123930":"code","bf58f36e":"code","3fdd51dd":"code","fdf7cfb6":"code","8c3b12fa":"code","723e6cf2":"code","000ffad5":"code","071c8228":"code","aa6b0faa":"code","4b6ff5ea":"code","200e56ad":"code","042f7e40":"code","e2fb2954":"code","742fcee1":"code","5f0bc8d4":"code","5ab7a0d3":"code","01813f77":"code","f63ef892":"code","693b5c72":"code","82b035eb":"code","9f52e515":"code","22f64942":"code","298f003f":"code","d5c93417":"code","2bd7a193":"code","66b501d5":"code","7d7a95c2":"code","c1aa1274":"code","7f8e0c9a":"code","60d210d8":"code","d43a45fc":"code","2773f11d":"code","d9aebc83":"code","30c771c4":"code","216394f7":"code","58c2e0f7":"code","c945dbf1":"code","947611c2":"code","16d2f464":"code","e8d95f57":"code","3022973b":"code","7a33df34":"code","916602f0":"code","868a73b7":"code","ab14f946":"code","b11d2875":"code","ab86e7a8":"markdown","39d9bbf8":"markdown","e6bbf9f9":"markdown","3fae0c7d":"markdown","4382e49f":"markdown","cf26a61e":"markdown","85ad5b5a":"markdown","d7ebebd2":"markdown","c500523a":"markdown","ff08f112":"markdown","7dd97ea1":"markdown","7f7dfaba":"markdown","caf6be65":"markdown","8c256530":"markdown","7ade1282":"markdown","6f9009f7":"markdown","83f59bb5":"markdown","fdf59224":"markdown","20aca9e5":"markdown","30efb982":"markdown","707b129b":"markdown","2e02c166":"markdown","3a95b53d":"markdown","93b71a52":"markdown","b6adb19d":"markdown","7d4b02a8":"markdown"},"source":{"ae49a870":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# seaborn library\nimport seaborn as sns\n\n# plotly library\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# matplotlib library\nimport matplotlib.pyplot as plt\n\n%matplotlib notebook\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6a5f654e":"data = pd.read_csv('..\/input\/2017.csv')","635fe8d9":"data.info()","5a1fee5d":"data.head(10)","db233a6d":"data.columns","e4f7fa8a":"data_70 = data.iloc[:70,:] # first 20 rows of our data","b2b0d1c5":"# visualization\n\nplt.figure(figsize= (15,10))\nsns.barplot(x = data_70['Happiness.Rank'], y = data_70['Freedom'], palette = sns.cubehelix_palette(70))\nplt.xticks(rotation = 90) # slope of the words in the x axis \nplt.xlabel('Happiness Rank')\nplt.ylabel('Freedom')\nplt.title('Happiness Rank vs Freedom')\nplt.show()","80d1d792":"data.columns","a0e159d8":"# visualization\nf, ax1 = plt.subplots(figsize=(15,10))\nsns.pointplot(x='Happiness.Rank', y='Economy..GDP.per.Capita.', data=data_70, color='black', alpha=0.8)\nsns.pointplot(x='Happiness.Rank', y='Freedom', data=data_70, color='red', alpha=1)\nplt.text(50,1.65, 'Economy..GDP.per.Capita.', color='black', fontsize=16, style='italic')\nplt.text(50,1.77, 'Freedom', color='red',fontsize=16, style='italic')\nplt.xlabel('Happines Rank', fontsize=15, color='blue')\nplt.ylabel('Values', fontsize=15, color='blue')\nplt.title('Economy..GDP.per.Capita. vs Freedom', fontsize=20, color='blue')\nplt.grid()","0ee4a985":"# visualization\nf, ax1 = plt.subplots(figsize=(15,10))\nsns.pointplot(x='Happiness.Rank', y='Economy..GDP.per.Capita.', data=data_70, color='black', alpha=0.8)\nsns.pointplot(x='Happiness.Rank', y='Health..Life.Expectancy.', data=data_70, color='red', alpha=1)\nplt.text(50,1.65, 'Economy..GDP.per.Capita.', color='black', fontsize=16, style='italic')\nplt.text(50,1.74, 'Health..Life.Expectancy.', color='red',fontsize=16, style='italic')\nplt.xlabel('Happines Rank', fontsize=15, color='blue')\nplt.ylabel('Values', fontsize=15, color='blue')\nplt.title('Economy..GDP.per.Capita. vs Health..Life.Expectancy.', fontsize=20, color='blue')\nplt.grid()","c540452c":"data.columns","43616f50":"#%%\n# joint plot: economy vs health\n# kde: kernel density estimation\n# pearsonr: if it 1 we have positive correlation, if -1 negative correlation, if zero no correlation  \n\nsns.jointplot(data['Economy..GDP.per.Capita.'], data['Health..Life.Expectancy.'], kind='kde', height=8)\nplt.savefig('jointplot.png')\nplt.show()","25c3f0e2":"# we can select different kinds of joint plot\n# kind= 'kde', 'scatter', 'reg', 'resit', 'hex' \n# ratio: ratio of the size of the scatter plot to the histogram plot\nsns.jointplot(data['Economy..GDP.per.Capita.'], data['Health..Life.Expectancy.'], kind='scatter', size=8, ratio=3, color='r')\nplt.show()","7274c55f":"data.columns","b6f9a9a3":"data['Economy..GDP.per.Capita.'].iloc[0:10]","4eb9cd43":"econ = []\nfor i in range(1,7): \n     econ.append(sum (data['Economy..GDP.per.Capita.'].iloc[((i-1)*10):(i*10)]))\necon","cfa5a178":"# PIE CHART\n# Country Economies\n\n# create economy list\necon = []\nfor i in range(1,7): \n     econ.append(sum (data['Economy..GDP.per.Capita.'].iloc[((i-1)*10):(i*10)]))\n\n# create index\nindex = np.arange(1,7)\n\n# things to be used in pie plot\nlabels = index\nsizes = econ\ncolors = ['grey', 'blue', 'red', 'yellow', 'green', 'brown'] # colors of pie chart\nexplode = [0,0,0,0,0,0]\n \n# visualization\nplt.figure(figsize=(7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%') # autopct: decimal (after comma put 1 number)\nplt.title('Economy Level', color='blue', fontsize=15)\nplt.text(1.7,1,'1: Sum of the economy ratios of first 10 countries', fontsize=14)\nplt.text(1.7,0.8,'2: Sum of the economy ratios of second 10 countries', fontsize=14)\nplt.text(1.7,0.6,'3: Sum of the economy ratios of third 10 countries', fontsize=14)\nplt.text(1.7,0.4,'4: Sum of the economy ratios of fourth 10 countries', fontsize=14)\nplt.text(1.7,0.2,'5: Sum of the economy ratios of fifth 10 countries', fontsize=14)\nplt.text(1.7,0.0,'6: Sum of the economy ratios of sixth 10 countries', fontsize=14)\nplt.show()","fc0787f5":"data.columns","02d447d8":"# lmplot: shows the result of linear regression within each data set\nsns.lmplot(x='Happiness.Score', y='Economy..GDP.per.Capita.', data=data)\nplt.show()","e219ce40":"data.columns","66e38f17":"# kde plot: (kde=kernel density estimation)\nplt.subplots(figsize=(15,10))\nsns.kdeplot(data['Happiness.Score'], data['Economy..GDP.per.Capita.'], shade=True, cut=3)\nplt.xlabel('Happiness', color='purple', fontsize=14)\nplt.ylabel('Economy Level', color='purple', fontsize=14)\nplt.show()","529b7ab4":"data.columns","ef123930":"data1 = data.iloc[:,6] # Trust..Government.Corruption.\ndata2 = data.iloc[:,5] # Economy..GDP.per.Capita.\nnewdata = pd.concat([data1,data2],axis=1) # create new data\nnewdata","bf58f36e":"# violin plot\n# shows EACH distribution with both violins and points\n# use cubehelix to get a custom sequencial palette: google it as seaborn palette \n# it adjusts color of the plots\n# violinplot: At the points where the plot is fat, it means we have more points\nplt.subplots(figsize=(15,10))\npal = sns.cubehelix_palette(2, rot=-5, dark=3)\nsns.violinplot(data=newdata, palette=pal, inner='points') # data uses only numbers but not strings\nplt.show()","3fdd51dd":"data.columns","fdf7cfb6":"#correlation map\n# Visualization of Economy..GDP.per.Capita., Family and Health..Life.Expectancy. \nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.2f',ax=ax)\nplt.show()","8c3b12fa":"data.info()","723e6cf2":"data['Happines_level'] = ['HapLev 1' if x<=52 else 'HapLev 2' if x<104 else 'HapLev 3' for x in data['Happiness.Rank']]","000ffad5":"data['Economy_level'] = ['EconLev 1' if eco>1.31 else 'EconLev 2' if eco>0.99 else 'EconLev 3' \n                         for eco in data['Economy..GDP.per.Capita.']]","071c8228":"data.head()","aa6b0faa":"# Plot the orbital period with horizontal boxes\nsns.boxplot(x=\"Happines_level\", y=\"Trust..Government.Corruption.\", hue='Economy_level', data=data, palette=\"PRGn\")\nplt.show()","4b6ff5ea":"sns.swarmplot(x=\"Happines_level\", y=\"Trust..Government.Corruption.\",hue=\"Economy_level\", data=data)\nplt.show()","200e56ad":"data.columns","042f7e40":"datam = data.iloc[:, [5,6,7]]","e2fb2954":"datam.head()","742fcee1":"# pair plot\nsns.pairplot(datam)\nplt.show()","5f0bc8d4":"data.Economy_level.value_counts()","5ab7a0d3":"sns.countplot(data.Economy_level)\n# sns.countplot(data.Happines_level)\nplt.title(\"Economy Level\",color = 'blue',fontsize=15)","01813f77":"data = pd.read_csv('..\/input\/2017.csv')","f63ef892":"data.head()","693b5c72":"data.info()","82b035eb":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = data['Happiness.Rank'],\n                    y = data['Economy..GDP.per.Capita.'],\n                    mode = \"lines\",\n                    name = \"Economy GDP per Capita\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= data.Country)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = data['Happiness.Rank'],\n                    y = data['Health..Life.Expectancy.'],\n                    mode = \"lines+markers\",\n                    name = \"Health Life Expectancy.\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= data.Country)\ndata = [trace1, trace2]\nlayout = dict(title = 'Economy and Health Life Expectancy vs Country Ranks',\n              xaxis= dict(title= 'Happiness Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\nplt.savefig('line.png')\nplt.show()","9f52e515":"data = pd.read_csv('..\/input\/2017.csv')","22f64942":"data.head()","298f003f":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = data['Happiness.Rank'],\n                    y = data['Economy..GDP.per.Capita.'],\n                    mode = \"markers\",\n                    name = \"Economy\",\n                    marker = dict(color = 'rgba(0, 128, 255, 0.8)'),\n                    text= data['Country'])\n# creating trace2\ntrace2 =go.Scatter(\n                    x = data['Happiness.Rank'],\n                    y = data['Trust..Government.Corruption.'],\n                    mode = \"markers\",\n                    name = \"Trust-Goverment\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= data['Country'])\n\ndata = [trace1, trace2]\nlayout = dict(title = 'Economy and Trust-Goverment vs Happiness Rank',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Values',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","d5c93417":"data = pd.read_csv('..\/input\/2017.csv')","2bd7a193":"data.head()","66b501d5":"# prepare data frames\ndata_3 = data.iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = data_3.Country,\n                y = data_3['Generosity'],\n                name = \"Generosity\",\n                marker = dict(color = 'rgba(200, 0, 0, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_3['Happiness.Rank'])\n# create trace2 \ntrace2 = go.Bar(\n                x = data_3.Country,\n                y = data['Family'],\n                name = \"Family\",\n                marker = dict(color = 'rgba(150, 50, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_3['Happiness.Rank'])\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","7d7a95c2":"data = pd.read_csv('..\/input\/2017.csv')","c1aa1274":"# prepare data frames\ndata_3 = data.iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = data_3.Country,\n                y = data_3['Generosity'],\n                name = \"Generosity\",\n                marker = dict(color = 'rgba(200, 0, 0, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_3['Happiness.Rank'])\n# create trace2 \ntrace2 = go.Bar(\n                x = data_3.Country,\n                y = data['Family'],\n                name = \"Family\",\n                marker = dict(color = 'rgba(150, 50, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_3['Happiness.Rank'])\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"relative\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","7f8e0c9a":"data = pd.read_csv('..\/input\/2017.csv')","60d210d8":"data.head()","d43a45fc":"data_7 = data.iloc[:7,:]\ndata_7","2773f11d":"pie1 = data_7['Economy..GDP.per.Capita.']\nlabels = data_7['Country']\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Economy rates of some Countries\",\n      \"hoverinfo\":\"label+percent\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Economy rates of first 7 Countries\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Economy Level\",\n                \"x\": 0.17,\n                \"y\": 1.1\n            },\n        ]\n    }\n}\niplot(fig)","d9aebc83":"data = pd.read_csv('..\/input\/2017.csv')","30c771c4":"data.head()","216394f7":"# data preparation\ndata_20 = data.iloc[:20,:]\necon_size  = data_20['Economy..GDP.per.Capita.']*30\nfamily_color = data_20['Family']\ndata = [\n    {\n        'y': data_20['Freedom'],\n        'x': data_20['Happiness.Rank'],\n        'mode': 'markers',\n        'marker': {\n            'color': family_color,\n            'size': econ_size,\n            'showscale': True\n        },\n        \"text\" :  data_20.Country    \n    }\n]\nlayout = dict(title='Freedom vs Happiness Rank: Size=Economy, Color=Family',\n              xaxis=dict(title='Happiness Rank'),\n              yaxis=dict(title='Freedom'))\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","58c2e0f7":"data = pd.read_csv('..\/input\/2017.csv')","c945dbf1":"data.columns","947611c2":"data.head()","16d2f464":"# prepare data\nx1 = data['Economy..GDP.per.Capita.']\nx2 = data['Family']\n\ntrace1 = go.Histogram(\n    x=x1,\n    opacity=0.75,\n    name = \"Economy\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2,\n    opacity=0.75,\n    name = \"Family\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title='Economy and Family',\n                   xaxis=dict(title='Economy and Family Rates'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e8d95f57":"data = pd.read_csv('..\/input\/2017.csv')","3022973b":"data.columns","7a33df34":"trace0 = go.Box(\n    y=data['Economy..GDP.per.Capita.'],\n    name = 'Economy',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=data['Trust..Government.Corruption.'],\n    name = 'Trust to Governmetn',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","916602f0":"data = pd.read_csv('..\/input\/2017.csv')\ndata.columns","868a73b7":"# import figure factory\nimport plotly.figure_factory as ff\n\ndata_matrix = data.loc[:,[\"Health..Life.Expectancy.\",\"Freedom\", \"Happiness.Rank\", 'Economy..GDP.per.Capita.']]\ndata_matrix[\"index\"] = np.arange(1,len(data_matrix)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data_matrix, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","ab14f946":"data = pd.read_csv('..\/input\/2017.csv')\ndata.columns","b11d2875":"# first line plot\nx=data['Happiness.Rank']\ntrace1 = go.Scatter(\n    x=x,\n    y=data['Economy..GDP.per.Capita.'],\n    name = \"Economy\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=x,\n    y=data['Trust..Government.Corruption.'],\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Trust Government\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Economy and Trust Government vs Happiness Rank'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","ab86e7a8":"<a id=\"15\"><\/a>\n**2.3) Bar Chart #1**","39d9bbf8":"<a id=\"3\"><\/a>\n**1.3) JOINT PLOT (KDE)**","e6bbf9f9":"<a id=\"11\"><\/a>\n**1.12) Pair Plot**","3fae0c7d":"**2. PLOTLY**","4382e49f":"<a id=\"1\"><\/a>\n**1.1) BAR PLOT**","cf26a61e":"<a id=\"6\"><\/a>\n**1.7) KDE PLOT**","85ad5b5a":"<a id=\"5\"><\/a>\n**1.6) LM PLOT**","d7ebebd2":"<a id=\"10\"><\/a>\n**1.11) Swarm Plot**","c500523a":"<a id=\"20\"><\/a>\n**2.7) Scatter Matrix Plot**","ff08f112":"<a id=\"7\"><\/a>\n**1.8) VIOLIN PLOT**","7dd97ea1":"<a id=\"14\"><\/a>\n**2.2) Scatter**","7f7dfaba":"**1.4) JOINT PLOT (SCATTER)**","caf6be65":"<a id=\"12\"><\/a>\n**1.13) Count Plot**","8c256530":"<a id=\"16\"><\/a>\n**2.3) Pie Chart**","7ade1282":"<a id=\"13\"><\/a>\n**2.1) Line Chart**","6f9009f7":"<a id=\"8\"><\/a>\n**1.9) Heatmap**","83f59bb5":"<a id=\"2\"><\/a>\n**1.2)  POINT PLOT # 1**","fdf59224":"**1.2) POINT PLOT # 2**","20aca9e5":"<a id=\"21\"><\/a>\n**2.8) Inset Plots**","30efb982":"<a id=\"9\"><\/a>\n**1.10) Box Plot**","707b129b":"<a id=\"17\"><\/a>\n**2.4) Bubble Chart**","2e02c166":"<a id=\"18\"><\/a>\n**2.5) Histogram**","3a95b53d":"# 1. SEABORN","93b71a52":"<a id=\"19\"><\/a>\n**2.6) Box Plot**","b6adb19d":"<a id=\"4\"><\/a>\n**1.5) PIE PLOT**","7d4b02a8":"**2.2 Bar Chart #2**"}}