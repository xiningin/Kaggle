{"cell_type":{"f350b5f6":"code","546a4179":"code","a6e4ed4b":"code","2c9e6a85":"code","ab6713c4":"code","89e067ae":"code","8681ad4b":"code","13758d1f":"code","09dce52c":"code","b4d83a13":"code","553ae75c":"code","4c8f1685":"code","f0eb22c7":"code","2b9765c0":"code","c44c49f7":"code","8724b21e":"code","06114814":"code","cd35984a":"code","5390c9e5":"code","c32fe595":"code","020311b0":"code","f7baaca7":"code","1f1c4e18":"code","7e6eab8b":"code","a7c20ade":"code","b7b9a865":"code","a98cb4d6":"code","eef4d354":"code","a77efb27":"code","0a10e296":"code","5e75edbd":"code","64594678":"code","4ad3de4e":"code","6a7eac6d":"code","9538a0de":"code","5be55611":"code","8a378e08":"markdown","e282e92b":"markdown","ab8b71b8":"markdown","e5134967":"markdown","cbe72ebc":"markdown","103cd86f":"markdown","bff3a5fe":"markdown","06866271":"markdown","7bc19e5a":"markdown","68fd4364":"markdown","fcafa6b6":"markdown"},"source":{"f350b5f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","546a4179":" %config Completer.use_jedi = False","a6e4ed4b":"##### ============== Importing the libraries =============== #####\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\n%matplotlib inline\n# import pingouin as pg\ncolor = sns.color_palette()\nfrom pandas.plotting import table\nimport scipy\nfrom scipy.stats import pearsonr, spearmanr\nfrom wordcloud import WordCloud, STOPWORDS\nimport datetime as dt\nimport plotly\nimport cufflinks as cf\nimport plotly.offline\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\n","2c9e6a85":"# pro = project_data, res = resources_data\npro = pd.read_csv('\/kaggle\/input\/donorschoosedataset\/train_data.csv')\nres = pd.read_csv('\/kaggle\/input\/donorschoosedataset\/resources.csv')","ab6713c4":"def shapedf(df):\n    print(f\"Number of observations: : {df.shape[0]}\")\n    print(f\"Number of variables: {df.shape[1]}\")\n    print(f\"Number of duplicates: {df.duplicated().sum()}\")\n    print(f\"Presence of Missing values: {df.isnull().values.any()}\")\n    print(\"==========================================================\")\n    print(f\"Different datatypes: {df.dtypes.sort_values(ascending = True)}\")\n    print(\"==========================================================\")\n    print(f\"Size of datatypes: {df.dtypes.value_counts(ascending=True)}\")\n    print(\"==========================================================\")\n    ","89e067ae":"def nulldf(df):\n    detect_null_val = df.isnull().values.any()\n    if detect_null_val:\n        null_abs = df.isnull().sum()\n        null_perc = df.isnull().sum() \/ df.isnull().shape[0]*100\n        null_concat = pd.concat([null_abs, null_perc], axis = 1).round(2)\n        null_concat.columns = ['Absolute', 'Percent']\n        return null_concat.sort_values(by=\"Absolute\",ascending=False)\n    else:\n        print(\"There are no missing values\")\n        ","8681ad4b":"# Correlations\n\ndef corrsdf(x):\n    mask = np.triu(x.corr(), 1)\n    plt.figure(figsize = (19,9))\n    return sns.heatmap(x.corr(),annot = True, vmin = -1, vmax=1,\n                      square = True, cmap='spring', mask=mask);\n    \n    ","13758d1f":"## Check basic information for project data\nshapedf(pro)","09dce52c":"# Missing values in project data frame\nnulldf(pro)","b4d83a13":"# Stats description\npro.describe().round(2)","553ae75c":"# Stats description to include categorical features\npro.describe(include=\"object\")","4c8f1685":"## Correlations on project_ data\ncorrsdf(pro)","f0eb22c7":"pro['project_is_approved'].value_counts()\n","2b9765c0":"## No . of projects approved for funding\npro_approved = pro['project_is_approved'].value_counts()\ndata = [pro_approved[1], pro_approved[0]]\nlabels = '1','0'\nfig,ax = plt.subplots(figsize=(6,6))\nax.pie(data,shadow=True,labels=labels)\nax.axis('equal')\n\nax.set_title(\"Projects accepted and not accepted\")\nplt.show()","c44c49f7":"print(\"Project approved: \",(data[0]\/(data[0] + data[1]))*100,\"%\")\nprint(\"Project not approved: \",(data[1]\/(data[0] + data[1]))*100,\"%\")","8724b21e":"pro['school_state'], pro['project_is_approved']","06114814":"import plotly.graph_objs as go\nimport plotly.offline as offline\n\ntemp = pd.DataFrame(pro.groupby('school_state')['project_is_approved'].apply(np.mean)).reset_index()\ntemp.columns = ['state','project_approval']\ntemp.head(2)\n\ndata = [dict(type='choropleth',\n             autocolorscale=True,\n             locations = temp['state'],\n             z = temp['project_approval'].astype(float),\n             locationmode='USA-states',\n             text = temp['state'],\n             marker = dict(line = dict(color = 'rgb(255,255,255)',width=2)),\n             colorbar = dict(title = \"% of pro\")\n            )]\n\nlayout = dict(\n    title = 'Project Proposal Acceptance rate',\n    geo = dict(\n    scope='usa',\n    projection = dict(type='albers usa'),\n    showlakes=True,\n    lakecolor='rgb(255,255,255)',\n    ),)\n\nfig = go.Figure(data = data, layout = layout)\noffline.iplot(fig,filename='us-heat-map')","cd35984a":"print(\"======= States with lowest approval ================= \\n\")\nprint(temp.sort_values(by=['project_approval'], inplace=False).head(5))\nprint(\"\\n\\n ======= States with highest approval ================= \\n\")\nprint(temp.sort_values(by=['project_approval'], inplace=False).tail(5))","5390c9e5":"pro['essay'] = ''.join(pro[['project_essay_1','project_essay_2','project_essay_3','project_essay_4']])\npro['essay']","c32fe595":"word_count = pro['essay'].str.split().apply(len).value_counts()\nword_dict = dict(word_count)\nword_dict = dict(sorted(word_dict.items(),key=lambda kv: kv[1]))\n\nind = np.arange(len(word_dict))\nplt.figure(figsize=(20,5))\npl1 = plt.bar(ind,list(word_dict.values()))\n\nplt.xlabel('Essay word count')\nplt.ylabel('Projects count')\nplt.title('Words for each essay of the project')\nplt.xticks(ind, list(word_dict.keys()))\nplt.show()","020311b0":"shapedf(res)","f7baaca7":"res.head(5)","1f1c4e18":"res.describe(include=\"all\").round(1)","7e6eab8b":"nulldf(res)","a7c20ade":"corrsdf(res)","b7b9a865":"## Finding how many quantites are present\nres[\"quantity\"].value_counts(dropna=False)","a98cb4d6":"## Aggregation of quantity\nres.quantity.value_counts(normalize=True, bins=15).round(6)","eef4d354":"## Checking for presence of outliers \n\nx = np.sort(res['quantity'].dropna())\ny = np.arange(1,len(x)+1) \/ len(x)\nplt.plot(x,y, marker= \".\", linestyle = \"none\")\nplt.title(\"Cummulative Distribution function CDF [Item quantity]\")","a77efb27":"## Overall resources dataset statistics\nres[\"quantity\"].describe().round(2)","0a10e296":"res['quantity'].value_counts(dropna=False)","5e75edbd":"## Handle nan , null values in quantity column\n\n(res[res['quantity'] == 0]).head()","64594678":"## Checking for presence of outliers \n\nx = np.sort(res['price'].dropna())\ny = np.arange(1,len(x)+1) \/ len(x)\nplt.plot(x,y, marker= \".\", linestyle = \"none\")\nplt.title(\"Cummulative Distribution function CDF [Item price]\")","4ad3de4e":"re = res.copy()\n\nQ1 = re['price'].quantile(0.25)\nQ3 = re['price'].quantile(0.75)\nIQR = Q3-Q1\n\nre['price'] = re.price[~((re.price<(Q1 - 1.5*IQR)) |\n                      (re.price > (Q3 + 1.5*IQR)))]\n\n#Display data dispersion without the outliers\nprint(\"Price Data without outliers statistics\")\nprint(re.price.describe().round(1))\nprint(\" +++++++++++++++++++++++++ \")\n\nprint(\"Price data distribution\")\nprint(re.price.value_counts(dropna=False))\nprint(\" +++++++++++++++++++++++++ \")\n\n### We still see several NAN's and 1's\n\n## Impute (Fill) outliers by median value\n\nres['price'] = re['price'].fillna(res.price.median())\n\n# Remove negative prices\n\n# res = re[re['price']>0].copy()\n# res.drop(['price'],axis=1,inplace=True)\n\n## Checkout the data stats\n\nprint(\"Price data statistics after outliers imputation\")\nres.describe().round(2)","6a7eac6d":"## Outlier check\nplt.hist(res.price, bins=50)\nplt.title('Price data distribution', fontsize=12, loc = 'center')\nplt.ylabel('Absolute Frequency')\nplt.show()","9538a0de":"r = res.copy()\nr['amount'] = r.apply(lambda x:x['price']*x['quantity'],axis=1)\nr.head()","5be55611":"fig = plt.figure(figsize=(9,6))\nax = fig.add_subplot(111)\nax.scatter(r['quantity'],r['price'])\nax.set_xlabel(\"Item quantity\")\nax.set_ylabel(\"Item price\")\nax.set_title(\"Relation of [Price,Quantity]\")\n\n## Higher Item quanties with higher prices are not prefered by users\n","8a378e08":"## Item Quantity\n\n","e282e92b":"## Relation between price and quantity of resources","ab8b71b8":"## Project approval status\n\n","e5134967":"## Item price","cbe72ebc":"## States and their approval percentages","103cd86f":"## Please upvote my notebook if you find my answer useful and helpful. It keeps me motivated. Thanks !!\n\n# About the Donors Chose dataset:\n\nThe dataset contains project proposals. The projects which require funding are submitted by teachers. \n\n# Problem statement: \n\nPredict if a project proposal will be accepted or not accepted.\n\n# Challenges: \n\n* Read large data corpus of ever increasing dataset size quickly and efficiently.\n* Check the cost effectiveness, consistency , usefulness of accepting the project proposal submited by the teachers.\n* Find project proposals that need immediate funds approval and are of atmost importance.","bff3a5fe":"There are lot of outliers. We have to remove them using the quantile approach","06866271":"## EDA on Project data","7bc19e5a":"## Find states where the project is accepted","68fd4364":"## Textual data analysis using matplotlib and Sns","fcafa6b6":"## EDA on Resources data"}}