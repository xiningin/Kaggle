{"cell_type":{"696e2058":"code","fd5c8970":"code","c1ac7cfd":"code","7462a018":"code","7e30ae61":"code","59009117":"code","7b86c99e":"code","b527b2a3":"code","ab70079f":"code","1363453d":"code","7d0e92b8":"code","4afb56c3":"code","a15b3db3":"code","85d43e58":"code","64d2617d":"code","5b2674d6":"code","fc44f5a6":"markdown","df693416":"markdown","02a22179":"markdown","b3992271":"markdown","fbbec310":"markdown","03bdd09e":"markdown"},"source":{"696e2058":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.figure_factory as ff","fd5c8970":"infos = pd.read_excel('\/kaggle\/input\/sp-500\/SP500_Infos.xlsx')\ninfos.info()","c1ac7cfd":"infos.head()","7462a018":"stocks = pd.read_excel('\/kaggle\/input\/sp-500\/SP500_Stock_Prices.xlsx')\nstocks.info()","7e30ae61":"stocks.head()","59009117":"stocks.tail()","7b86c99e":"# check for empty fields\nnp.where(pd.isna(stocks))","b527b2a3":"# eliminate series that do not have the maximum length\nstocks = stocks[stocks['Symbol'].isin(stocks['Symbol'].value_counts()[stocks['Symbol'].value_counts() == stocks['Symbol'].value_counts().max()].index.values)]","ab70079f":"# get rid of unused colums\nstocks = stocks[['Symbol', 'Date', 'Close']]","1363453d":"px.line(stocks, x='Date', y='Close', color='Symbol')","7d0e92b8":"# normalize closing price\nstocks = stocks.assign(Normalized_Close = stocks.groupby('Symbol').transform(lambda Close: (Close - Close.mean()) \/ Close.std()))[['Symbol', 'Date', 'Normalized_Close']]","4afb56c3":"px.line(stocks, x='Date', y='Normalized_Close', color='Symbol')","a15b3db3":"stocks_wide = stocks.pivot(index='Symbol', columns='Date', values='Normalized_Close')\nfrom scipy.spatial.distance import squareform, pdist\neuclidian_distance_matrix = pd.DataFrame(squareform(pdist(stocks_wide, metric='euclidean')), columns=stocks.Symbol.unique(), index=stocks.Symbol.unique())\npx.imshow(euclidian_distance_matrix)","85d43e58":"from scipy.cluster.hierarchy import dendrogram, average\nhierarchical_euclidian_cluster = average(pdist(stocks_wide, metric='euclidean'))\nfig = ff.create_dendrogram(hierarchical_euclidian_cluster)\nfig.update_layout(width=800, height=500)\nfig.show()","64d2617d":"from scipy.cluster.hierarchy import cut_tree\nhierarchical_euclidian_cluster_10 = pd.DataFrame(cut_tree(hierarchical_euclidian_cluster, n_clusters=10), columns=['Cluster'], index=stocks.Symbol.unique())\nstocks_hec10 = stocks.join(hierarchical_euclidian_cluster_10, on='Symbol', how='left')\npx.line(stocks_hec10, x='Date', y='Normalized_Close', color='Symbol', facet_col='Cluster', facet_col_wrap=4)","5b2674d6":"# for efficacy we computed the cluters once and load that result\ndtw_cluster_10 = pd.read_json('..\/input\/sp-500\/dtw_cluster_10.json')\n# if you'd rather wait 1-2h hours instead of 1-2s please feel free to uncomment the three lines below\n# from tslearn.utils import to_time_series_dataset\n# from tslearn.clustering import TimeSeriesKMeans\n# dtw_cluster_10 = pd.DataFrame(TimeSeriesKMeans(n_clusters=10, metric='dtw').fit(to_time_series_dataset(stocks_wide.values)).labels_, columns=['Cluster'], index=stocks.Symbol.unique())\nstocks_dtw10 = stocks.join(dtw_cluster_10, on='Symbol', how='left')\npx.line(stocks_dtw10, x='Date', y='Normalized_Close', color='Symbol', facet_col='Cluster', facet_col_wrap=4)","fc44f5a6":"## 4. Cluster the data\n### 4.1 Euclidian distance matrix\nUsing purely scipy","df693416":"## 1. Read and clean the data","02a22179":"## 3. Preprocess the data","b3992271":"## 2. Clean the data","fbbec310":"### 4.2 Dynamic Time Warping\nusing tslearn","03bdd09e":"# Clustering of Stock Prices\n#### in Python, Alexandre Moeri, 22.10.2020"}}