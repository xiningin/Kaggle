{"cell_type":{"c46d1899":"code","2d5ab27e":"code","23c80a6d":"code","b6a0747e":"code","c69fe17f":"code","55312cce":"code","63589bb5":"code","9db03ed9":"code","aba6694d":"code","523905cc":"code","78ebf7df":"code","7ca96a13":"code","b673f56a":"code","ee9ede5c":"code","900b1bbe":"code","55a69f6a":"code","5d4556df":"markdown","f9044f5f":"markdown","6b109fff":"markdown","7507482d":"markdown","808f77b2":"markdown","1ad33fd4":"markdown","7e4e120e":"markdown","9987195b":"markdown","c678d340":"markdown","a46395e4":"markdown","33d618c4":"markdown","e6da3606":"markdown","b89170ae":"markdown","dc427937":"markdown","d03638c5":"markdown","3a69f082":"markdown","fed15970":"markdown"},"source":{"c46d1899":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","2d5ab27e":"dataset = pd.read_csv('..\/input\/power-plant\/Data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","23c80a6d":"dataset.head()","b6a0747e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","c69fe17f":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","55312cce":"y_pred = regressor.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","63589bb5":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","9db03ed9":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\npoly_reg = PolynomialFeatures(degree = 4)\nX_poly = poly_reg.fit_transform(X_train)\nregressor = LinearRegression()\nregressor.fit(X_poly, y_train)","aba6694d":"y_pred = regressor.predict(poly_reg.transform(X_test))\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","523905cc":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","78ebf7df":"from sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(X_train, y_train)","7ca96a13":"y_pred = regressor.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","b673f56a":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","ee9ede5c":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nregressor.fit(X_train, y_train)","900b1bbe":"y_pred = regressor.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","55a69f6a":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","5d4556df":"# Predicting the Test set results","f9044f5f":"# Evaluating the Model Performance","6b109fff":"# Predicting the test results","7507482d":"# Evaluating Polynomial Regression Model Performance","808f77b2":"In this notebook, we are going to implement **Regression Model Selection Technique** in which we will train our Dataset on multiple Regression Models and after that, we will apply **RSquare** technique to chose the best model with highest accuracy.\n\nWe are going to use following Regression Models for Best Model Selection.\n\n- Multi Linear Regression\n- Polynomial Regression\n- Decision Tree Regression\n- Random Forest Regression\n\nLets talk little about Dataset. The data set we have here is quite classic as it has no missing values and all features as well as dependent variable are in numberic form. The Dataset we have here contains information regrading **Combined Cycle Power Plant**. We have 5 columns in dataset 4 of them are features named as (**AT:Atmospheric Temperature, V:Exhaust Vacuum, AP: Ambient Pressure, RH:Relative Humidity**) and the Target Variable (**PE: Energy Output**).\n\nAnd don't worry you don't have to understand how energy works or how the physics of this dataset works. The only thing that you need to understand is that we want to predict PE Target Variable very well which turns out to be an energy output And we are predicting this dependent variable with these four features.","1ad33fd4":"Following are the Model Wise accuracies.\n\n- Multi Linear Regression Model 93% \n- Polynomial Regression Model 94%\n- Decision Tree Regresson Model 92%\n- Random Forest Regression Model 96%\n\nAs per given accuracies of Regression models on which we have trained our data. the best fit model is **Random Forest** as it gave highest accuracy **96%** as compared to other Regression Models. So, for that dataset we will go for **Random Forest Regression Model**.\nThat concludes the basics of **Regression Model Selection using Python**. Please add if i missed something or and correct me if\nthere is any mistake.","7e4e120e":"# Importing Libraries","9987195b":"# Training the Multi Linear Regression model on the Training set","c678d340":"# Evaluating Decission Tree Regression Model Performance","a46395e4":"# Splitting the dataset into the Training set and Test set","33d618c4":"# Training the Decision Tree Regression model on the Training set","e6da3606":"# Evaluating the Multi Linear Regression Model Performance","b89170ae":"# Predicting the Test Results","dc427937":"# Predicting the Test Results","d03638c5":"# Importing Dataset","3a69f082":"# Training the Polynomial Regression model on the Training set","fed15970":"# Training the Random Forest Regression model on the Training set"}}