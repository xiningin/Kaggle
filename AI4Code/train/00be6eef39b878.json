{"cell_type":{"4f76ad7f":"code","a8e89e08":"code","091ec0f9":"code","c30cd496":"code","8e474d0e":"code","0bbd5af1":"code","f8717f01":"code","b8c9714f":"code","7fabb388":"code","d20c108c":"code","f46b8ea2":"code","f236cff0":"code","81a30144":"code","7670b4ce":"code","09d2bcc0":"code","75aed328":"code","bccc11c3":"code","a38042d8":"code","5871f171":"code","2ac25e3a":"code","a486fde1":"code","49ca92ff":"code","a6322480":"code","67c6cbfa":"code","91d07c3f":"code","fe780a6c":"code","e6789b57":"code","fb98a323":"code","d5a88a25":"code","c5394bb8":"code","40f92e26":"code","7f132b18":"markdown","69c07fa7":"markdown","17331400":"markdown","1027dc57":"markdown","82819492":"markdown","c631a6e8":"markdown","60970192":"markdown","d3eed634":"markdown","5689b011":"markdown","94aa1b69":"markdown","e9818352":"markdown","1c5fcae9":"markdown","19a0b662":"markdown","998793d5":"markdown","473a6650":"markdown","9cc3baaf":"markdown","3c04eb97":"markdown","d4521fa1":"markdown","f892cad2":"markdown","d52d9ec3":"markdown","2d5e6717":"markdown","2115c29e":"markdown"},"source":{"4f76ad7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a8e89e08":"import numpy as np\nimport pandas as pd\n# Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns","091ec0f9":"#Read Data\ntrain = pd.read_csv('..\/input\/train_V2.csv')\ntest = pd.read_csv('..\/input\/test_V2.csv')","c30cd496":"train.info()","8e474d0e":"train.columns","0bbd5af1":"train.head()","f8717f01":"# Check row with NaN value\ntrain[train['winPlacePerc'].isnull()]","b8c9714f":"# Delete this player\ntrain.drop(2744604, inplace=True)","7fabb388":"# playersJoined\ntrain['playersJoined'] = train.groupby('matchId')['matchId'].transform('count')\nplt.figure(figsize=(15,10))\nsns.countplot(train[train['playersJoined']>=75]['playersJoined'])\nplt.title('playersJoined')\nplt.show()","d20c108c":"weapon = train[train['weaponsAcquired']<=20]\nsns.countplot(x='weaponsAcquired',data =weapon)","f46b8ea2":"train['healsandboosts'] = train['heals'] + train['boosts']\ntrain[['heals', 'boosts', 'healsandboosts']].tail()","f236cff0":"train['totalDistance'] = train['rideDistance'] + train['walkDistance'] + train['swimDistance']\ntrain['killsWithoutMoving'] = ((train['kills'] > 0) & (train['totalDistance'] == 0))\n\n","81a30144":"display(train[train['killsWithoutMoving'] == True].shape)\ntrain[train['killsWithoutMoving'] == True].head(10)","7670b4ce":"# Remove \ntrain.drop(train[train['killsWithoutMoving'] == True].index, inplace=True)","09d2bcc0":"train[train['roadKills'] > 10]","75aed328":"plt.figure(figsize=(12,4))\nsns.countplot(data=train, x=train['kills']).set_title('Kills')\nplt.show()","bccc11c3":"# Players who got more than 30 kills\ndisplay(train[train['kills'] > 30].shape)\ntrain[train['kills'] > 30].head(10)","a38042d8":"# Remove outliers\ntrain.drop(train[train['kills'] > 30].index, inplace=True)","5871f171":"plt.figure(figsize=(12,4))\nsns.distplot(train['longestKill'], bins=10)\nplt.show()","2ac25e3a":"display(train[train['longestKill'] >= 1000].shape)\ntrain[train['longestKill'] >= 1000].head(10)","a486fde1":"train[['walkDistance', 'rideDistance', 'swimDistance', 'totalDistance']].describe()","49ca92ff":"plt.figure(figsize=(12,4))\nsns.distplot(train['walkDistance'], bins=10)\nplt.show()","a6322480":"train.drop(train[train['walkDistance'] >= 10000].index, inplace=True)","67c6cbfa":"plt.figure(figsize=(12,4))\nsns.distplot(train['rideDistance'], bins=10)\nplt.show()","91d07c3f":"train.drop(train[train['rideDistance'] >= 20000].index, inplace=True)","fe780a6c":"plt.figure(figsize=(12,4))\nsns.distplot(train['swimDistance'], bins=10)\nplt.show()","e6789b57":"train[train['swimDistance'] >= 2000]","fb98a323":"# Remove outliers\ntrain.drop(train[train['swimDistance'] >= 2000].index, inplace=True)","d5a88a25":"plt.figure(figsize=(12,4))\nsns.distplot(train['weaponsAcquired'], bins=100)\nplt.show()","c5394bb8":"display(train[train['weaponsAcquired'] >= 80].shape)\ntrain[train['weaponsAcquired'] >= 80].head()","40f92e26":"# Remove outliers\ntrain.drop(train[train['weaponsAcquired'] >= 80].index, inplace=True)","7f132b18":"## Let's Start","69c07fa7":"### There are very few players having more then 10 kills , maximum kills = 72 ","17331400":"There is something fishy going on with these players. We are probably better off removing them from our dataset","1027dc57":"### Killing without moving\nWe try to identify cheaters by checking if people are getting kills without moving. We first identify the totalDistance travelled by a player and then set a boolean value to True if someone got kills without moving a single inch. We will remove cheaters in our outlier detection section.\n","82819492":"walk distance\n","c631a6e8":"swimDistance","60970192":"### Find more outliers","d3eed634":"### Heals and Boost\nWe create a feature called 'healsandboosts' by adding heals and boosts","5689b011":"<img src=\"https:\/\/cdn.images.express.co.uk\/img\/dynamic\/143\/590x\/PUBG-886916.jpg\">","94aa1b69":"## PUBG Data Analysis ","e9818352":"## FEATURE DESCRIPTION'S FROM KAGGLE \n*  DBNOs - Number of enemy players knocked.\n*     assists - Number of enemy players this player damaged that were killed by teammates.\n*     boosts - Number of boost items used.\n*     damageDealt - Total damage dealt. Note: Self inflicted damage is subtracted.\n*     headshotKills - Number of enemy players killed with headshots.\n*     heals - Number of healing items used.\n*     Id - Player\u2019s Id\n*    killPlace - Ranking in match of number of enemy players killed.\n*     killPoints - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.) If there is a value       \n       other than -1 in rankPoints, then any 0 in killPoints should be treated as a \u201cNone\u201d.\n*     killStreaks - Max number of enemy players killed in a short amount of time.\n*     kills - Number of enemy players killed.\n*     longestKill - Longest distance between player and player killed at time of death. This may be misleading, as downing a \n       player and driving away may lead to a large longestKill stat.\n*     matchDuration - Duration of match in seconds.\n*     matchId - ID to identify match. There are no matches that are in both the training and testing set.\n*     matchType - String identifying the game mode that the data comes from. The standard modes are \u201csolo\u201d, \u201cduo\u201d, \u201csquad\u201d, \u201c      \n      solo-fpp\u201d, \u201cduo-fpp\u201d, and \u201csquad-fpp\u201d; other modes are from events or custom matches.\n*  rankPoints - Elo-like ranking of player. This ranking is inconsistent and is being deprecated in the API\u2019s next version, so use\n      with caution. Value of -1 takes place of \u201cNone\u201d. \n*   revives - Number of times this player revived teammates.\n* rideDistance - Total distance traveled in vehicles measured in meters.\n*   roadKills - Number of kills while in a vehicle.\n*   swimDistance - Total distance traveled by swimming measured in meters.\n*   teamKills - Number of times this player killed a teammate.\n*   vehicleDestroys - Number of vehicles destroyed.\n*   walkDistance - Total distance traveled on foot measured in meters.\n*  weaponsAcquired - Number of weapons picked up.\n*  winPoints - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.) If there is a\n      value other than -1 in rankPoints, then any 0 in winPoints should be treated as a \u201cNone\u201d.\n*  groupId - ID to identify a group within a match. If the same group of players plays in different matches, they will have a       \n     different groupId each time.\n*   numGroups - Number of groups we have data for in the match.\n*   maxPlace - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data   \n    skips over placements.\n* winPlacePerc - The target of prediction. This is a percentile winning placement, where 1 corresponds to 1st place, and 0\n    corresponds to last place in the match. It is calculated off of maxPlace, not numGroups, so it is possible to have missing\n    chunks in a match.\n","1c5fcae9":"rideDistance","19a0b662":"### We have successfully removed around 1500 players ","998793d5":"In this kernal i am going to explore PUBG dataset,visualise the data and conclude something","473a6650":"### There are some player who have more kills. Let's see them\n","9cc3baaf":"### Let's check out anomalies in Distance travelled.","3c04eb97":"### Remove outliers \nplayers having kills more than 30 (remove them)","d4521fa1":"## PLOTS\nNumber of player joined","f892cad2":"#### We have to predict \"winPlacePerc\" .So we have to delete 2744604 row where \"winPlacePerc\" is Nan shown above","d52d9ec3":"Number of weapon acquired\nMostly players had less 20 weapon\n","2d5e6717":"### Players who got more than 10 roadKills\n","2115c29e":"### weaponsAcquired\n\nMost people acquire between 0 and 10 weapons in a game, but you also see some people acquire more than 80 weapons! Let's check these guys ou"}}