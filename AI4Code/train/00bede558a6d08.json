{"cell_type":{"81f903cd":"code","6b7575f8":"code","d7949b93":"code","84dbe149":"code","e7c7af3b":"code","74045619":"code","63e24cb5":"code","5c81282a":"code","6402a153":"code","0fa315c5":"code","1ea474ea":"code","c427b387":"code","70af24a3":"code","a5be233e":"code","51968f7a":"code","4198338f":"code","1efd4927":"code","e5339530":"code","3d5e24bd":"code","e7629a35":"code","b448af53":"code","5276414b":"code","37435af9":"code","9f772285":"code","99b1de3c":"code","0b93ba24":"code","22e15eae":"code","b03ee1d7":"code","45c4c549":"code","b644da77":"code","0030b811":"code","e3632665":"code","7b516672":"code","409f5838":"code","1e436ce2":"code","b282cd6f":"code","85ab346a":"code","89ae8ff0":"code","6d25c035":"code","070fddcc":"code","71682b0c":"code","2a0aff01":"code","80b365a8":"code","39d145cd":"markdown","ddd9e1d9":"markdown","40c4f7c8":"markdown","b9936ad4":"markdown","10be6b15":"markdown","2170e1a8":"markdown","de146f7e":"markdown","6a6212f9":"markdown","d2b7d3ae":"markdown","3d88d5c1":"markdown","98d18bbe":"markdown","5fee23af":"markdown","f2078ab3":"markdown","02fc2f1c":"markdown","dd145f44":"markdown","dd11b3c8":"markdown","1fb20e80":"markdown","0434850e":"markdown","f60b9d3a":"markdown","19d665be":"markdown","a6db9bb9":"markdown"},"source":{"81f903cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6b7575f8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d7949b93":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ngender_df = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","84dbe149":"df_train.head()","e7c7af3b":"df_test.head()","74045619":"df_train.info()","63e24cb5":"df_train.describe()","5c81282a":"df_train.isnull().sum()","6402a153":"\n\nplt.figure(figsize=(10, 6))\nsns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='viridis')\n","0fa315c5":"plt.figure(figsize=(10, 6))\nsns.countplot(x='Survived',data=df_train)","1ea474ea":"plt.figure(figsize=(10, 6))\nsns.countplot(x='Survived',data=df_train,hue='Sex')","c427b387":"plt.figure(figsize=(10, 6))\nsns.countplot(x='Survived',data=df_train,hue='Pclass')","70af24a3":"plt.figure(figsize=(10, 6))\nsns.displot(df_train['Age'].dropna(),kde=False,color='darkred',bins=30)","a5be233e":"plt.figure(figsize=(10, 6))\nsns.countplot(x='SibSp',data=df_train)","51968f7a":"df_train['Fare'].hist(color='green',bins=40,figsize=(10,6))","4198338f":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=df_train,palette='winter')","1efd4927":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","e5339530":"df_train['Age'] = df_train[['Age','Pclass']].apply(impute_age,axis=1)\ndf_test['Age'] = df_test[['Age','Pclass']].apply(impute_age,axis=1)","3d5e24bd":"plt.figure(figsize=(10, 6))\nsns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","e7629a35":"df_train.drop('Cabin',axis=1,inplace=True)\ndf_test.drop('Cabin',axis=1,inplace=True)","b448af53":"df_train.head()","5276414b":"df_train.fillna(0,inplace=True)\ndf_test.fillna(0,inplace=True)","37435af9":"df_train.info()","9f772285":"sex = pd.get_dummies(df_train['Sex'],drop_first=True)\nembark = pd.get_dummies(df_train['Embarked'],drop_first=True)\nsex_test = pd.get_dummies(df_test['Sex'],drop_first=True)\nembark_test = pd.get_dummies(df_test['Embarked'],drop_first=True)","99b1de3c":"df_train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)\ndf_test.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)","0b93ba24":"df_train = pd.concat([df_train,sex,embark],axis=1)\ndf_test = pd.concat([df_test,sex_test,embark_test],axis=1)","22e15eae":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df_train.drop('Survived',axis=1), df_train['Survived'], test_size=0.30,random_state=42)","b03ee1d7":"from sklearn.linear_model import LogisticRegression","45c4c549":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","b644da77":"predictions = logmodel.predict(X_test)","0030b811":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","e3632665":"from sklearn.metrics import confusion_matrix\n\nconf_mat = confusion_matrix(y_test,predictions)\nsns.heatmap(conf_mat,annot=True)\nconf_mat","7b516672":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nrfc = RandomForestClassifier()\nrfc.fit(X_train, y_train)\npred = rfc.predict(X_test)\naccuracy_score(pred, y_test)","409f5838":"print(classification_report(y_test,pred))","1e436ce2":"conf = confusion_matrix(y_test,pred)\nsns.heatmap(conf,annot=True)","b282cd6f":"conf","85ab346a":"from sklearn.tree import DecisionTreeClassifier\n\ntree = DecisionTreeClassifier()\ntree.fit(X_train, y_train)\ny_preds = tree.predict(X_test)\naccuracy_score(y_preds, y_test)","89ae8ff0":"print(classification_report(y_test,y_preds))","6d25c035":"con = confusion_matrix(y_test,y_preds)\nsns.heatmap(con,annot=True)\ncon","070fddcc":"submit=pd.read_csv('..\/input\/titanic\/gender_submission.csv')","71682b0c":"df_test['C']=0","2a0aff01":"submit['Survived']=tree.predict(df_test)","80b365a8":"submit.to_csv('submission.csv',index=False)","39d145cd":"## Random Forest Classifier","ddd9e1d9":"> The info function is used to see a concise summary of the Titanic Data frame","40c4f7c8":"> The below visual shows the people who have survived\n\n> 0 - No\n\n> 1 - Yes","b9936ad4":"## Data Cleaning","10be6b15":"> Read CSVs","2170e1a8":"> Importing Required Libraries","de146f7e":"## Logistic Regression","6a6212f9":"> The below data shows the class of the passenger who have Survived\n\n> 1 - 1st Class\n\n> 2 - 2nd Class\n\n> 3 - 3rd Class","d2b7d3ae":"> Lets check the heading of the CSV if the data has been read (Train Set)","3d88d5c1":"> The below Visual is of the Siblings and Spouse","98d18bbe":"**Features**\n\n* Passenger Id\n* Survived\n* Passenger Class [Ticket Class]\n* Name\n* Sex\n* Age\n* Siblings\/Spouses\n* Parch\n* Ticket\n* Fare\n* Cabin\n* Embarked","5fee23af":"> The below plot shows the Age of the people","f2078ab3":"> Lets check the heading of the CSV if the data has been read (Test Set)","02fc2f1c":"> The below data shows a breakdown of the Men and Female survived","dd145f44":"**Hope you Liked my ML Model.**\n\n**Please dont forget to Upvote.**\n\n**Thank you**","dd11b3c8":"> Checking for Null values in the data set","1fb20e80":"> Missing values on a heatmap which gives a better visualization of the data\n\n> Age and Cabin have missing values","0434850e":"> The describe() method analyzes both numeric and object series and also the DataFrame column sets of mixed data types.","f60b9d3a":"> The below Visual shows the Fare paid by the passengers","19d665be":"The Na values","a6db9bb9":"## Decision Tree Classifier"}}