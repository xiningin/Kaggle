{"cell_type":{"2ea64444":"code","47d7c81e":"code","f94ee62e":"code","f645d18d":"code","cd343657":"code","bf008997":"code","5e2f5c20":"code","158aaf55":"code","681df886":"code","20756c3e":"code","b90d7635":"code","23eb8a12":"code","917eafda":"code","4b41f44d":"code","6bb823ab":"code","b854bc6c":"code","34ec7737":"code","85066349":"code","2a16bad2":"code","8128b762":"code","c435d1f7":"code","1e14c3e2":"code","919bb342":"code","6fe7fe32":"code","b3f8c1a5":"code","64212639":"code","51c38720":"code","548c6b04":"code","f2451a0f":"code","2e940ed7":"code","0479eb39":"code","f277467e":"code","00000e0e":"code","da59079e":"code","f8a2eae4":"code","a5b259ad":"code","c99cf237":"code","a2907370":"code","4169edfa":"code","d70c5755":"code","a8239bb7":"code","4f8429d4":"code","80e3bc9b":"code","c92352b2":"code","2f7bb927":"code","1717507f":"code","3d617e0d":"code","c5ce84d2":"code","eb19d17a":"code","00d437a7":"code","cd4d5bd4":"code","054cfbae":"code","47b31e9f":"code","e0442f5e":"code","f19016a2":"code","8737dd0a":"code","a0472aad":"code","b6d98551":"code","5d884b61":"code","0fa3b46a":"code","2315f0a8":"code","2d9619de":"code","85719c78":"code","407e2bab":"code","e1366602":"code","7e310125":"code","4571cd54":"code","94c24747":"code","772f3689":"code","7f5864b7":"code","e2cf431c":"code","b9bfbb84":"code","b3334236":"code","7d82884a":"code","b967c9d4":"code","7a0d196a":"code","78eb9e7a":"code","02c2c07f":"code","35e14e26":"code","f0f49d4c":"code","e5532790":"code","c927ba9f":"code","0f2feedc":"code","6a5bc9e4":"code","0f4439ee":"code","f95cbbe8":"code","8599a893":"code","843571de":"code","10dd1157":"code","ef0eb009":"code","52ac9680":"code","a5bd7e42":"markdown","7413f1e3":"markdown","ba37a0f0":"markdown","60308f37":"markdown","a2969190":"markdown","63a9860c":"markdown","daeb83aa":"markdown","97cb656a":"markdown","a9255659":"markdown"},"source":{"2ea64444":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nsns.set_style('whitegrid')","47d7c81e":"df_train = pd.read_csv('..\/input\/kakr-4th-competition\/train.csv')\ndf_test = pd.read_csv('..\/input\/kakr-4th-competition\/test.csv')\nsub = pd.read_csv('..\/input\/kakr-4th-competition\/sample_submission.csv')","f94ee62e":"print(df_train.shape)\nprint(df_test.shape)","f645d18d":"df_train.info()","cd343657":"df_train.isnull().sum()","bf008997":"df_train.head()","5e2f5c20":"cont_feats = ['age', 'fnlwgt', 'education_num', 'capital_gain', 'capital_loss', 'hours_per_week']\ncat_feats = []\nfor i in df_train.columns:\n    if i not in cont_feats:\n        cat_feats.append(i)","158aaf55":"# Target Feature\uc758 \ubd88\uade0\ud615\uc774 \uc2ec\ud55c\ud3b8\n# \uc0c1\uc704 \uc18c\ub4dd\uc790\ub4e4\uc758 \ube44\uc728\uc774 \ud6e8\uc52c \uc801\ub2e4.\n\nf, ax = plt.subplots(figsize = (8,8))\n\ndf_train['income'].value_counts().plot.pie(explode = [0, 0.1], autopct = '%1.1f%%', \n                                               shadow = True, colors = ['lightcoral', 'lightskyblue'],\n                                              textprops={'fontsize': 18})\nplt.title(\"Target PiePlot\", size = 20)","681df886":"# \uc800\uc18c\ub4dd\uc740 0, \uace0\uc18c\ub4dd\uc740 1\ub85c \ub9e4\ud551\n\ndf_train['income'] = df_train['income'].apply(lambda x:0 if x == '<=50K' else 1)","20756c3e":"cont_feats","b90d7635":"# capital_gain \ubcc0\uc218\ub294 \uc774\uc0c1\uce58\uc758 \uc601\ud5a5\uc744 \uc0c1\ub2f9\ud788 \ub9ce\uc774 \ubc1b\ub294\uac83\uc73c\ub85c \ubcf4\uc778\ub2e4.\n# (75%\uae4c\uc9c0 0\uc778 \ubc18\uba74 max\uac12\uc774 99999\uc774\uae30 \ub54c\ubb38\uc5d0)\n\ndf_train[cont_feats].describe()","23eb8a12":"# \uc18c\ub4dd\uc774 \ub9ce\uc740 \uc9d1\ub2e8\uc740 40\ub300\uac00 \uac00\uc7a5 \ub9ce\ub2e4.\n# \ubc18\uba74 \uc18c\ub4dd\uc774 \uc801\uc740 \uc9d1\ub2e8\uc740 20\ub300\uac00 \uac00\uc7a5 \ub9ce\ub2e4.\n# \ub098\uc774\ub300, \uccad\uc911\ub178\ub144 feature \uc0dd\uc131\uc774 \uac00\ub2a5\ud558\ub2e4.\n\nfix, ax = plt.subplots(figsize = (9, 5))\nsns.kdeplot(df_train[df_train[\"income\"] == 0][\"age\"], ax=ax)\nsns.kdeplot(df_train[df_train[\"income\"] == 1][\"age\"], ax=ax)   \nplt.legend([\"income <= 50K\", \"income > 50K\"])\nplt.show()","917eafda":"# \ub300\ud45c\uac12\uc5d0 \ub530\ub978 \uc18c\ub4dd \ubd84\ud3ec\ub294 \uac70\uc758 \ub3d9\uc77c\ud558\ub2e4.\n\nfix, ax = plt.subplots(figsize = (9, 5))\nsns.kdeplot(df_train[df_train[\"income\"] == 0][\"fnlwgt\"], ax=ax)\nsns.kdeplot(df_train[df_train[\"income\"] == 1][\"fnlwgt\"], ax=ax)   \nplt.legend([\"income <= 50K\", \"income > 50K\"])\nplt.show()","4b41f44d":"# \uad50\uc721\uc218\uc900\uc5d0 \ub530\ub978 \uc18c\ub4dd \ubd84\ud3ec\ub294 \uc800\uc18c\ub4dd\uc758 \uacbd\uc6b0 \uad49\uc7a5\ud788 \ub744\uc5c4\ub744\uc5c4 \ubd84\ud3ec\ub418\uc5b4\uc788\ub2e4.\n# \ubc18\uba74 \uace0\uc18c\ub4dd\uc740 7.5~17.5\uae4c\uc9c0 \uace0\ub974\uac8c \ubd84\ud3ec\ub418\uc5b4 \uc788\ub2e4.\n\nfix, ax = plt.subplots(figsize = (9, 5))\nsns.kdeplot(df_train[df_train[\"income\"] == 0][\"education_num\"], ax=ax)\nsns.kdeplot(df_train[df_train[\"income\"] == 1][\"education_num\"], ax=ax)   \nplt.legend([\"income <= 50K\", \"income > 50K\"])\nplt.show()","6bb823ab":"# \ud070 \ucc28\uc774\ub294 \uc5c6\uc5b4\ubcf4\uc778\ub2e4.\n# \uc800\uc18c\ub4dd\uc758 \uacbd\uc6b0 \uc8fc\ub2f9\uadfc\ubb34\uc2dc\uac04\uc774 40\uc2dc\uac04\uc5d0 \ub300\ubd80\ubd84 \ubab0\ub824\uc788\uace0, \uadf8 \ubc11\uc73c\ub85c\ub3c4 \ubd84\ud3ec\ub418\uc5b4 \uc788\ub2e4.\n# \ubc18\uba74 \uace0\uc18c\ub4dd\uc758 \uacbd\uc6b0 40\uc2dc\uac04\uc774 \uac00\uc7a5 \ub9ce\uae34 \ud558\uc9c0\ub9cc \uc800\uc18c\ub4dd\ubcf4\ub2e4 \uadfc\ubb34\uc2dc\uac04 \ubd84\ud3ec\uac00 \ub354 \ub4b7\ucabd\uc5d0 \ubab0\ub824\uc788\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.\n\nfix, ax = plt.subplots(figsize = (9, 5))\nsns.kdeplot(df_train[df_train[\"income\"] == 0][\"hours_per_week\"], ax=ax)\nsns.kdeplot(df_train[df_train[\"income\"] == 1][\"hours_per_week\"], ax=ax)   \nplt.legend([\"income <= 50K\", \"income > 50K\"])\nplt.show()","b854bc6c":"# \uc800\uc18c\ub4dd\uacfc \uace0\uc18c\ub4dd\uc758 \ucc28\uc774\uac00 \ud655\uc5f0\ud788 \ub4dc\ub7ec\ub0a8\n# \uc774\uc0c1\uce58\ub77c\uace0 \ud310\ub2e8\ub418\ub294 99999\ub294 \uc804\ubd80 \uace0\uc18c\ub4dd\uc73c\ub85c \ubcf4\uc784\n\nfix, ax = plt.subplots(figsize = (9, 5))\nsns.kdeplot(df_train[df_train[\"income\"] == 0][\"capital_gain\"], ax=ax, bw=1.5)\nsns.kdeplot(df_train[df_train[\"income\"] == 1][\"capital_gain\"], ax=ax, bw=1.5)   \nplt.legend([\"income <= 50K\", \"income > 50K\"])\nplt.show()","34ec7737":"# \uc774\uc0c1\uce58\ud589 \ud655\uc778\n# \uc591\ub3c4\uc18c\ub4dd\uc138\uac00 \uc774\uc0c1\uce58\uc778 \ud589\uc740 \uc804\ubd80 \uace0\uc18c\ub4dd\uc73c\ub85c \ud655\uc778, \uc81c\uac70\ud558\uc9c0 \uc54a\uace0 \uc9c4\ud589\ud55c\ub2e4.\n\ndf_train.loc[df_train['capital_gain'] == 99999]['income'].value_counts()","85066349":"def corr_heatmap(cols):\n    correlations = df_train[cols].corr()\n\n    # Create color map ranging between two colors\n    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n    fig, ax = plt.subplots(figsize=(10,10))\n    sns.heatmap(correlations, cmap=cmap, vmax=1.0, center=0, fmt='.2f',\n                square=True, linewidths=.5, annot=True, cbar_kws={\"shrink\": .75})\n    plt.show();\n    \ncorr_heatmap(cont_feats+['income'])","2a16bad2":"cat_feats","8128b762":"df_train['workclass'].dtype","c435d1f7":"df_train[['workclass', 'income']].groupby(['workclass'], as_index = True).mean().sort_values(by='income', ascending = False).plot.bar()","1e14c3e2":"fig, ax = plt.subplots(figsize = (12, 6))\nsns.countplot(\"workclass\", hue = \"income\", data = df_train, ax = ax)","919bb342":"# \ud559\ub825\uc5d0 \ub530\ub77c \uc18c\ub4dd\ucc28\uc774\uac00 \uc2ec\ud55c\uac83\uc73c\ub85c \ubcf4\uc778\ub2e4.\n\ndf_train[['education', 'income']].groupby(['education'], as_index = True).mean().sort_values(by='income', ascending = False).plot.bar()","6fe7fe32":"# \uc11d\uc0ac\ud559\uc704(Masters)\ubd80\ud130 \uc800\uc18c\ub4dd\ubcf4\ub2e4 \uace0\uc18c\ub4dd\uc758 count\uac00 \ub192\uc544\uc9c4\ub2e4.\n\nfig, ax = plt.subplots(figsize = (12, 6))\nsns.countplot(\"education\", hue = \"income\", data = df_train, ax = ax)","b3f8c1a5":"df_train[['marital_status', 'income']].groupby(['marital_status'], as_index = True).mean().sort_values(by='income', ascending = False).plot.bar()","64212639":"fig, ax = plt.subplots(figsize = (12, 6))\nsns.countplot(\"marital_status\", hue = \"income\", data = df_train, ax = ax)","51c38720":"df_train[['occupation', 'income']].groupby(['occupation'], as_index = True).mean().sort_values(by='income', ascending = False).plot.bar()","548c6b04":"# \uace0\uc18c\ub4dd \uc9c1\uc5c5: Exec-managerial, Prof-specialty\n\nfig, ax = plt.subplots(figsize = (24, 6))\nsns.countplot(\"occupation\", hue = \"income\", data = df_train, ax = ax)","f2451a0f":"# \ubd80\ubaa8(\ub0a8\ud3b8, \uc544\ub0b4)\uc758 \uace0\uc18c\ub4dd\ub960\uc774 \uac00\uc7a5 \ub192\ub2e4.\n# \ub0a8\ud3b8\ubcf4\ub2e4 \uc544\ub0b4\uac00 \ub354 \ub192\uc740\uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.\n\ndf_train[['relationship', 'income']].groupby(['relationship'], as_index = True).mean().sort_values(by='income', ascending = False).plot.bar()","2e940ed7":"# \uace0\uc18c\ub4dd\ub960\uc740 \uc544\ub0b4\uac00 \ub354 \ub192\uc9c0\ub9cc \uc9d1\uacc4\ub41c count\ub294 \ub0a8\ud3b8\uc774 \ud6e8\uc52c \ub9ce\ub2e4.\n\nfig, ax = plt.subplots(figsize = (12, 6))\nsns.countplot(\"relationship\", hue = \"income\", data = df_train, ax = ax)","0479eb39":"df_train[['race', 'income']].groupby(['race'], as_index = True).mean().sort_values(by='income', ascending = False).plot.bar()","f277467e":"fig, ax = plt.subplots(figsize = (12, 6))\nsns.countplot(\"race\", hue = \"income\", data = df_train, ax = ax)","00000e0e":"df_train[['sex', 'income']].groupby(['sex'], as_index = True).mean().sort_values(by='income', ascending = False).plot.bar()","da59079e":"fig, ax = plt.subplots(figsize = (12, 6))\nsns.countplot(\"sex\", hue = \"income\", data = df_train, ax = ax)","f8a2eae4":"df_train[['native_country', 'income']].groupby(['native_country'], as_index = True).mean().sort_values(by='income', ascending = False).plot.bar()","a5b259ad":"fig, ax = plt.subplots(figsize = (20, 6))\nsns.countplot(\"native_country\", hue = \"income\", data = df_train, ax = ax)","c99cf237":"# \uae30\uc874 \uacf5\uc720\ub41c \ucee4\ub110\uc5d0\uc11c \ucc29\uc548 (\ud074\ub798\uc2a4 \ubb36\uc5b4\uc8fc\uae30)\n\nworkclass_other = ['Without-pay', 'Never-worked', '?']\ndf_train['workclass'] = df_train['workclass'].apply(lambda x: 'Other' if x in workclass_other else x)\ndf_test['workclass'] = df_test['workclass'].apply(lambda x: 'Other' if x in workclass_other else x)","a2907370":"# age \ubcc0\uc218\ub85c \ub9cc\ub4e4\uc218 \uc788\ub294 Feature \uc0dd\uc131\n\ndef age_to_cat(x):\n    if x < 20:\n        return '10\ub300 \uc774\ud558'\n    elif x < 30:\n        return '20\ub300'\n    elif x < 40:\n        return '30\ub300'\n    elif x < 50:\n        return '40\ub300'\n    elif x < 60:\n        return '50\ub300'\n    elif x < 70:\n        return '60\ub300'\n    elif x < 80:\n        return '70\ub300'\n    else:\n        return '80\ub300 \uc774\uc0c1'\n    \ndef age_to_level(x):\n    if x < 35:\n        return 'young_level'\n    elif x < 65:\n        return 'middle_level'\n    else:\n        return 'old_level'","4169edfa":"df_train['age_to_cat'] = df_train['age'].apply(age_to_cat)\ndf_test['age_to_cat'] = df_test['age'].apply(age_to_cat)","d70c5755":"df_train['age_to_level'] = df_train['age'].apply(age_to_level)\ndf_test['age_to_level'] = df_test['age'].apply(age_to_level)","a8239bb7":"# \ud559\ub825\uc5d0 \ub530\ub77c \uace0, \uc911, \uc800\ub85c \ubd84\ub958\n\ndef education_level(x):\n    if (x == 'Doctorate') or (x == 'Prof_school') or (x == 'Masters'):\n        return 'High_edu'\n    elif (x == 'Bachelors') or (x == 'Assoc_acdm') or (x == 'Assoc_voc') or (x == 'Some-college'):\n        return 'Middle-edu'\n    else:\n        return 'Low-edu'","4f8429d4":"df_train['education_level'] = df_train['education'].apply(education_level)\ndf_test['education_level'] = df_test['education'].apply(education_level)","80e3bc9b":"df_train[['education_level', 'income']].groupby(['education_level'], as_index = True).mean().sort_values(by='income', ascending = False).plot.bar()","c92352b2":"df_train['marital_status'].unique()","2f7bb927":"# \uae30\uc874 \uacf5\uc720\ub41c \ucee4\ub110\uc5d0\uc11c \ucc29\uc548 (\ud074\ub798\uc2a4 \ubb36\uc5b4\uc8fc\uae30)\n\ndf_train.loc[df_train['marital_status'] == 'Married-AF-spouse', 'marital_status'] = 'Married-civ-spouse'\ndf_test.loc[df_test['marital_status'] == 'Married-AF-spouse', 'marital_status'] = 'Married-civ-spouse'","1717507f":"# \uacb0\ud63c \uc720\ubb34 Binary\n\ndef now_married(x):\n    if x == 'Married-civ-spouse':\n        return 1\n    else:\n        return 0","3d617e0d":"df_train['now_married'] = df_train['marital_status'].apply(now_married)\ndf_test['now_married'] = df_test['marital_status'].apply(now_married)","c5ce84d2":"df_train['workclass'].unique()","eb19d17a":"# \ub4a4\uc5d0 gov\uac00 \ubd99\uc740 \uc9c1\uc885\uc740 \uacf5\ubb34\uc6d0\uc73c\ub85c \ud310\ub2e8\ud558\uace0 \ub9cc\ub4e4\uc5b4\ubcf8 Feature\n\ndef public_officer(x):\n    if (x == 'State-gov') or (x == 'Loacl-gov') or (x == 'Federal-gov'):\n        return 1\n    else:\n        return 0","00d437a7":"df_train['Public_worker'] = df_train['workclass'].apply(public_officer)\ndf_test['Public_worker'] = df_test['workclass'].apply(public_officer)","cd4d5bd4":"# \uace0\uc18c\ub4dd, \uc800\uc18c\ub4dd \ub098\ub77c\ubcc4\ub85c \ubd84\ub958 Binary\n\ndef income_per_country(x):\n    if (x == 'Vietnam') or (x == 'Mexico') or\\\n    (x == 'Puerto-Rico') or (x == 'Jamaica') or (x == 'Guatemala') or\\\n    (x == 'El-Salvador') or (x == 'Dominican-Republic') or\\\n    (x == 'Columbia'):\n        return 0\n    else:\n        return 1","054cfbae":"df_train['income_per_country'] = df_train['native_country'].apply(income_per_country)\ndf_test['income_per_country'] = df_test['native_country'].apply(income_per_country)","47b31e9f":"income_01 = ['Jamaica','Haiti','Puerto-Rico','Laos','Thailand','Ecuador',]\n\nincome_02 = ['Outlying-US(Guam-USVI-etc)','Honduras','Columbia','Dominican-Republic','Mexico','Guatemala','Portugal',\n             'Trinadad&Tobago','Nicaragua','Peru','Vietnam','El-Salvador',]\n\nincome_03 = ['Poland','Ireland','South','China',]\n\nincome_04 = ['United-States',]\n\nincome_05 = ['Greece','Scotland','Cuba','Hungary','Hong','Holand-Netherlands',]\n\nincome_06 = ['Philippines','Canada',]\n\nincome_07 = ['England','Germany',]\n\nincome_08 = ['Italy','India','Japan','France','Yugoslavia','Cambodia',]\n\nincome_09 = ['Taiwan','Iran',]\n\nincome_other=['?', ]","e0442f5e":"# \uae30\uc874 \uacf5\uc720\ub41c \ucee4\ub110\uc5d0\uc11c \ucc29\uc548 (\ud074\ub798\uc2a4 \ubb36\uc5b4\uc8fc\uae30)\n\ndef convert_country(x):\n    if x in income_01:\n        return 'income_01'\n    elif x in income_02:\n        return 'income_02'\n    elif x in income_03:\n        return 'income_03'\n    elif x in income_04:\n        return 'income_04'\n    elif x in income_05:\n        return 'income_05'\n    elif x in income_06:\n        return 'income_06'\n    elif x in income_07:\n        return 'income_07'\n    elif x in income_08:\n        return 'income_08'\n    elif x in income_09:\n        return 'income_09'\n    else:\n        return 'income_other'","f19016a2":"df_train['country_bin'] = df_train['native_country'].apply(convert_country)\ndf_test['country_bin'] = df_test['native_country'].apply(convert_country)","8737dd0a":"# \uae30\uc874 \uacf5\uc720\ub41c \ucee4\ub110\uc5d0\uc11c \ucc29\uc548 (\ud074\ub798\uc2a4 \ubb36\uc5b4\uc8fc\uae30)\n\ndf_train.loc[df_train['occupation'].isin(['Armed-Forces', 'Priv-house-serv']), 'occupation'] = 'Priv-house-serv'\ndf_test.loc[df_test['occupation'].isin(['Armed-Forces', 'Priv-house-serv']), 'occupation'] = 'Priv-house-serv'","a0472aad":"# Categoric \ubcc0\uc218 \ubcc4 Age \ub7ad\ud06c Feature \uc0dd\uc131\n\nmarital_status_data = df_train.groupby('marital_status').aggregate(np.mean)\n\nmarital_status_ranks = {}\nrank = 1\nfor idx, row in marital_status_data.sort_values(by='age').iterrows():\n    marital_status_ranks[idx] = rank\n    rank += 1","b6d98551":"for data in [df_train, df_test]:\n    marital_status_feature = []\n    for idx, row in data.iterrows():\n        marital_status_feature.append(marital_status_ranks[row.marital_status])\n    data['marital_status_ranks'] = marital_status_feature","5d884b61":"occupation_data = df_train.groupby('occupation').aggregate(np.mean)\n\noccupation_ranks = {}\nrank = 1\nfor idx, row in occupation_data.sort_values(by='age').iterrows():\n    occupation_ranks[idx] = rank\n    rank += 1","0fa3b46a":"for data in [df_train, df_test]:\n    occupation_feature = []\n    for idx, row in data.iterrows():\n        occupation_feature.append(occupation_ranks[row.occupation])\n    data['occupation_ranks'] = occupation_feature","2315f0a8":"workclass_data = df_train.groupby('workclass').aggregate(np.mean)\n\nworkclass_ranks = {}\nrank = 1\nfor idx, row in workclass_data.sort_values(by='age').iterrows():\n    workclass_ranks[idx] = rank\n    rank += 1","2d9619de":"for data in [df_train, df_test]:\n    workclass_feature = []\n    for idx, row in data.iterrows():\n        workclass_feature.append(workclass_ranks[row.workclass])\n    data['workclass_ranks'] = workclass_feature","85719c78":"df_train['capital_diff'] = df_train['capital_gain'] - df_train['capital_loss']\ndf_test['capital_diff'] = df_test['capital_gain'] - df_test['capital_loss']","407e2bab":"fix, ax = plt.subplots(figsize = (9, 5))\nsns.kdeplot(df_train[df_train[\"income\"] == 0][\"capital_diff\"], ax=ax, bw=1.5)\nsns.kdeplot(df_train[df_train[\"income\"] == 1][\"capital_diff\"], ax=ax, bw=1.5)   \nplt.legend([\"income <= 50K\", \"income > 50K\"])\nplt.show()","e1366602":"# hours_per_week \ubcc0\uc218\ub85c \ub9cc\ub4e4\uc5b4\ubcf8 Feature\n\ndf_train['hours_per_year'] = df_train['hours_per_week'] * 52\ndf_train['hours_per_month'] = df_train['hours_per_week'] * 4\ndf_train['hours_per_day'] = df_train['hours_per_week']\/7\n\ndf_test['hours_per_year'] = df_test['hours_per_week'] * 52\ndf_test['hours_per_month'] = df_test['hours_per_week'] * 4\ndf_test['hours_per_day'] = df_test['hours_per_week']\/7","7e310125":"# \ubbf8\uad6d\uc758 94\ub144 \uae30\uc900 \ucd5c\uc800\uc784\uae08\uc744 \uae30\uc900\uc73c\ub85c \uc5f0\ubd09\uc0b0\ucd9c (\ub2ec\ub7ec)\n\n#df_train['annual_salary_assum'] = df_train['hours_per_year'] * 4.25\n#df_test['annual_salary_assum'] = df_test['hours_per_year'] * 4.25","4571cd54":"#df_train['annual_salary_assum']","94c24747":"# \uc911\uc694\ub3c4\uac00 \ub192\uc740 Categorical Feature\ub85c Groupby\ud558\uc5ec \ub9cc\ub4e0 Feature\n\ndf_train['Edu_CapGn_mean'] = df_train.groupby(['education'])['capital_gain'].transform('mean')\ndf_test['Edu_CapGn_mean'] = df_test.groupby(['education'])['capital_gain'].transform('mean')\n\ndf_train['Marr_CapGn_mean'] = df_train.groupby(['marital_status'])['capital_gain'].transform('mean')\ndf_test['Marr_CapGn_mean'] = df_test.groupby(['marital_status'])['capital_gain'].transform('mean')\n\ndf_train['Occ_CapGn_mean'] = df_train.groupby(['occupation'])['capital_gain'].transform('mean')\ndf_test['Occ_CapGn_mean'] = df_test.groupby(['occupation'])['capital_gain'].transform('mean')\n\ndf_train['Edu_Capdf_mean'] = df_train.groupby(['education'])['capital_diff'].transform('mean')\ndf_test['Edu_Capdf_mean'] = df_test.groupby(['education'])['capital_diff'].transform('mean')\n\ndf_train['Marr_Capdf_mean'] = df_train.groupby(['marital_status'])['capital_diff'].transform('mean')\ndf_test['Marr_Capdf_mean'] = df_test.groupby(['marital_status'])['capital_diff'].transform('mean')\n\ndf_train['Occ_Capdf_mean'] = df_train.groupby(['occupation'])['capital_diff'].transform('mean')\ndf_test['Occ_Capdf_mean'] = df_test.groupby(['occupation'])['capital_diff'].transform('mean')","772f3689":"from category_encoders.cat_boost import CatBoostEncoder\nfrom category_encoders.one_hot import OneHotEncoder\nfrom category_encoders.leave_one_out import LeaveOneOutEncoder\n\nfinal_cat_feats = []\nfor col in df_train.columns:\n    if df_train[col].dtype == 'O':\n        append_data = col, df_train[col].nunique()\n        final_cat_feats.append(append_data)\n        \nfinal_cat_feats","7f5864b7":"high_card_feats = ['native_country', 'education', 'occupation', 'workclass', 'age_to_cat', 'marital_status', 'country_bin']\ncat_feats = ['relationship', 'race', 'sex', 'age_to_level', 'education_level']","e2cf431c":"%%time\nCBE_encoder = CatBoostEncoder()\ntrain_cbe = CBE_encoder.fit_transform(df_train[high_card_feats], df_train['income'])\ntest_cbe = CBE_encoder.transform(df_test[high_card_feats])","b9bfbb84":"df_train = pd.concat([df_train.drop(high_card_feats, axis = 1), train_cbe], axis = 1)\ndf_test = pd.concat([df_test.drop(high_card_feats, axis = 1), test_cbe], axis = 1)","b3334236":"for i in cat_feats:\n    df_train = pd.get_dummies(df_train, columns = [i], prefix = i)\n    df_test = pd.get_dummies(df_test, columns = [i], prefix = i)","7d82884a":"df_train.head()","b967c9d4":"print(df_train.shape)\nprint(df_test.shape)","7a0d196a":"# Pycaret \ud655\uc778 \uacb0\uacfc LGBM, CATBOOST, XGB \uc21c\uc73c\ub85c F1 Score\uac00 \ub192\uc740\uac83\uc744 \ud655\uc778","78eb9e7a":"from lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE","02c2c07f":"train = df_train.drop(['id', 'income'], axis = 1)\ntrain_target = df_train['income']\ndf_test.drop(['id'], axis = 1, inplace = True)","35e14e26":"CAT_bad_feature = ['hours_per_week', 'native_country', 'race_Asian-Pac-Islander', 'race_Other', 'hours_per_month']\nLGBM_bad_feature = ['native_country', 'race_Asian-Pac-Islander', 'relationship_Other-relative']\nXGB_bad_feature = ['Public_worker', 'now_married', 'education_level_High_edu', 'native_country']","f0f49d4c":"X_tr, X_val, y_tr, y_val = train_test_split(train, train_target, test_size = 0.3, random_state = 2020)","e5532790":"X_tr, y_tr = SMOTE(random_state = 2020).fit_sample(X_tr, y_tr)","c927ba9f":"CAT = CatBoostClassifier(silent = True, random_state=2020)\nLGBM = LGBMClassifier(booster = 'dart', n_estimators=1000)\nXGB = XGBClassifier(random_state=2020, booster = 'dart', n_estimators=500)\n\nCAT.fit(X_tr, y_tr)\nLGBM.fit(X_tr, y_tr)\nXGB.fit(X_tr, y_tr)","0f2feedc":"from sklearn import metrics\n\nCATpred = CAT.predict(X_val)\nLGBMpred = LGBM.predict(X_val)\nXGBpred = XGB.predict(X_val)\n\nprint('Catboost F1 SCORE: %.4f' % metrics.f1_score(y_val, CATpred))\nprint('LightGBM F1 SCORE: %.4f' % metrics.f1_score(y_val, LGBMpred))\nprint('XGBoost F1 SCORE: %.4f' % metrics.f1_score(y_val, XGBpred))","6a5bc9e4":"import eli5 \nfrom eli5.sklearn import PermutationImportance \n\nperm = PermutationImportance(XGB, scoring = \"f1\", random_state = 42).fit(X_val, y_val) \neli5.show_weights(perm, top = 80, feature_names = X_val.columns.tolist())","0f4439ee":"CAT_train = train.drop(CAT_bad_feature, axis = 1)\nLGBM_train = train.drop(LGBM_bad_feature, axis = 1)\nXGB_train = train.drop(XGB_bad_feature, axis = 1)\n\nCAT_test = df_test.drop(CAT_bad_feature, axis = 1)\nLGBM_test = df_test.drop(LGBM_bad_feature, axis = 1)\nXGB_test = df_test.drop(XGB_bad_feature, axis = 1)","f95cbbe8":"CAT.fit(CAT_train, train_target)\nLGBM.fit(LGBM_train, train_target)\nXGB.fit(XGB_train, train_target)","8599a893":"CAT_pred = CAT.predict_proba(CAT_test)[:,1]\nLGBM_pred = LGBM.predict_proba(LGBM_test)[:,1]\nXGB_pred = XGB.predict_proba(XGB_test)[:,1]","843571de":"sub['prediction'] = CAT_pred*0.4 + LGBM_pred*0.4 + XGB_pred*0.2","10dd1157":"sub['prediction'] = sub['prediction'].apply(lambda x: 1 if x >= 0.5 else 0)","ef0eb009":"sub.to_csv('base_sub.csv', index = False)","52ac9680":"sub","a5bd7e42":"## \ubc94\uc8fc\ud615 \ubcc0\uc218 \ud0d0\uc0c9","7413f1e3":"# EDA","ba37a0f0":"## \uc5f0\uc18d\ud615 \ubcc0\uc218 \ud0d0\uc0c9","60308f37":"## Final Base Model","a2969190":"# Modeling","63a9860c":"## \ub370\uc774\ud130 \uc815\ubcf4\n\n- age : \ub098\uc774 <br>\n- workclass : \uace0\uc6a9 \ud615\ud0dc<br>\n- fnlwgt : \uc0ac\ub78c \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58 (final weight\uc758 \uc57d\uc790)<br>\n- education : \uad50\uc721 \uc218\uc900 (\ucd5c\uc885 \ud559\ub825)<br>\n- education_num : \uad50\uc721 \uc218\uc900 \uc218\uce58<br>\n- marital_status: \uacb0\ud63c \uc0c1\ud0dc<br>\n- occupation : \uc5c5\uc885<br>\n- relationship : \uac00\uc871 \uad00\uacc4<br>\n- race : \uc778\uc885<br>\n- sex : \uc131\ubcc4<br>\n- capital_gain : \uc591\ub3c4 \uc18c\ub4dd<br>\n- capital_loss : \uc591\ub3c4 \uc190\uc2e4<br>\n- hours_per_week : \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04<br>\n- native_country : \uad6d\uc801<br>\n- income : \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12, target variable)<br>","daeb83aa":"# 4\ucc28 \ub300\ud68c BASELINE (EDA + Base FE + Simple ENSEMBLE)\n\n### Feedback \ubc0f Upvote \ud658\uc601\uc785\ub2c8\ub2e4! :)","97cb656a":"# Feature Engineering","a9255659":"def capital_tax_rate(data, col1, col2, col3):\n    for i in range(len(data)):\n        if (data[col1][i] == 1) and (data[col2][i] < 19750):\n            data[col3][i] = data[col2]*0.1\n        elif (data[col1][i] == 1) and (data[col2][i] < 80250):\n            data[col3][i] = data[col2]*0.12\n        else:\n            "}}