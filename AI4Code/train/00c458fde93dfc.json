{"cell_type":{"f69724a3":"code","58476813":"code","8abc56b6":"code","9842e15c":"code","8445b520":"code","ec8e91a1":"code","6ad8e805":"code","5d6f998f":"code","45c48aa9":"code","d2095522":"code","a934604d":"code","485a212d":"code","8f090581":"code","b6c6df7f":"code","9a8862b5":"code","acee6afb":"code","e934851c":"code","88e14fc1":"code","2aa48e07":"code","f6fc9ef5":"markdown","8f552382":"markdown","c0cdb01c":"markdown","397882c5":"markdown","5ee4b799":"markdown"},"source":{"f69724a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58476813":"#importing all the necessary packages now for later when building all the models.\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import SGDClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","8abc56b6":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","9842e15c":"print(train_data.shape)\ntrain_data.info()\ntrain_data.describe()","8445b520":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","ec8e91a1":"print(test_data.shape)\ntest_data.info()\ntest_data.describe()","6ad8e805":"#cleaning the training data\ntrain_data['Age'] = train_data['Age'].fillna(train_data['Age'].mean())\ntrain_data['Sex'].astype('category')\ntrain_data['Pclass'].astype('category')\n\ntrain_data.drop('Ticket', axis = 1)\ntrain_data.drop('Embarked', axis = 1)\ntrain_data.drop('Cabin', axis = 1)\ntrain_data.info()\ntrain_data.describe()","5d6f998f":"#cleaning the test data\ntest_data['Age'] = test_data['Age'].fillna(test_data['Age'].mean())\ntest_data['Fare'] = test_data['Fare'].fillna(test_data['Fare'].mean())\n\ntest_data['Sex'].astype('category')\ntest_data['Pclass'].astype('category')\n\ntrain_data.drop('Ticket', axis = 1)\ntrain_data.drop('Embarked', axis = 1)\ntest_data.drop('Cabin', axis = 1, inplace = True)\ntest_data.info()\ntest_data.describe()","45c48aa9":"#determining if one gender had a higher survival ratio to see if ratio plays a big role in one's chances of survival\nwomen = train_data.loc[train_data.Sex == 'female']['Survived']\nrate_women = sum(women)\/len(women)\n\nmen = train_data.loc[train_data.Sex == 'male']['Survived']\nrate_men = sum(men)\/len(men)\n\nprint(\"% of women who survived:\", rate_women)\nprint('% of men who survived:', rate_men)","d2095522":"data_categories = ['Pclass', 'Survived', 'Sex', 'SibSp', 'Parch', 'Embarked']\n\nfor category in data_categories:\n    print(train_data[category].value_counts(dropna = False, normalize = True).sort_index())","a934604d":"#Looking at the ratios to survived and didn't by age to see if age plays into the chances of someone survivng.\nsns.histplot(data = train_data, x = 'Age', bins = 24, hue = 'Survived')\nplt.show()","485a212d":"#Determinig if Pclass and gender correlates to a person's chance of surviing\nsns.catplot(data=train_data, x=\"Pclass\", row='Sex', hue ='Survived', kind =\"count\")","8f090581":"#creating the feature list and setting up X and y for all the models\nfeatures = ['Sex', 'Age', 'Pclass','Fare']\n\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\ny = train_data['Survived']\n\n#creatring the KNeighbors Classifier Model\nknn = KNeighborsClassifier(n_neighbors = 3)\nfitKnn = knn.fit(X, y)\npredictKnn = knn.predict(X_test)\n\nknnAcc = knn.score(X, y)\n\nprint(\"KNeighbors Classifier accuracy:\", knnAcc)","b6c6df7f":"#Linear Regression Model\nreg = LinearRegression()\nreg.fit(X, y)\nregPredict = reg.predict(X_test)\n\nregAcc = reg.score(X,y)\n\nprint(\"Linear Regression Accuracy:\", regAcc)","9a8862b5":"#Decision Tree Classifier Model\ntree = DecisionTreeClassifier(random_state = 1)\ntree.fit(X, y)\ntreePredict = tree.predict(X_test)\ntreeAcc = tree.score(X,y)\n\nprint('Decision Tree Classifier Accuracy:', treeAcc)","acee6afb":"#SGDClassifier model\nsgd = SGDClassifier(random_state = 1)\nsgd.fit(X,y)\nsgdPredict = sgd.predict(X_test)\nsgdAcc = sgd.score(X, y)\n\nprint('SGD Classifier Accuracy:', sgdAcc)","e934851c":"from sklearn.ensemble import RandomForestClassifier\n#doing the tutorial Random Forest CLassifier cause why not\n\nmodel = RandomForestClassifier(n_estimators = 100, max_depth = 5, random_state = 1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\nmodelAcc = model.score(X, y)\n\nprint('Random Forest Classifier:', modelAcc)","88e14fc1":"#honestly I just looked at the scores and determined by which had the higher score, but this how to do it while all running at once\nscores = np.array([modelAcc,treeAcc, regAcc, knnAcc, sgdAcc])\n\nhighestScore = 0\n\nfor x in scores:\n    if x > highestScore:\n        highestScore = x\n        \nif highestScore == modelAcc:\n    bestModel = predictions\nelif highestScore == treeAcc:\n    bestModel = treePredict\nelif higestScore == regAcc:\n    bestModel == regPredict\nelif highestScore == knnAcc:\n    bestModel == predictKnn\nelse:\n    bestModel == sgdAcc","2aa48e07":"#creating the output file for submitting\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': bestModel})\noutput.to_csv('submission.csv', index = False)\nprint('Your submission was succesfully saved!')","f6fc9ef5":"# Building The Models","8f552382":"# Loading Data","c0cdb01c":"# Exploratory Data Analysis","397882c5":"# Generating the submission","5ee4b799":"# Evaluating The Models"}}