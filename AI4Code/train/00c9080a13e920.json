{"cell_type":{"39f3ef7a":"code","09af45cb":"code","5e81fd95":"code","a15bdeaa":"code","e5110a4e":"code","641a9d2d":"code","b796f41c":"code","8f3cd500":"code","3cdb9ce1":"code","900047fc":"code","16ab8dae":"code","66abbcf9":"code","e4ae982f":"code","dbb9ae91":"code","d8e3cbfd":"code","65ca3f9e":"code","e87df429":"code","24dfed76":"code","afa1dfc4":"code","0445c3d0":"code","8567ac41":"code","53348c21":"markdown","6c7aec0a":"markdown","8ff5857c":"markdown","bb0a9c61":"markdown","2386de8f":"markdown","4bc24158":"markdown","4cb55782":"markdown","adbfef16":"markdown","9d07bf79":"markdown","fc46d9b7":"markdown","521077cd":"markdown","92630bb7":"markdown","989f538b":"markdown","7a32ee15":"markdown","844e9eec":"markdown","c93217e3":"markdown","0cd0ea53":"markdown","a6e647f9":"markdown","b1ec7734":"markdown","990b2c00":"markdown","22cf2935":"markdown"},"source":{"39f3ef7a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","09af45cb":"df = pd.read_csv('..\/input\/knn-project-data\/KNN_Project_Data')","5e81fd95":"df.head()","a15bdeaa":"sns.pairplot(df,hue='TARGET CLASS',palette='coolwarm')","e5110a4e":"from sklearn.preprocessing import StandardScaler","641a9d2d":"scaler = StandardScaler()","b796f41c":"scaler.fit(df.drop('TARGET CLASS',axis=1))","8f3cd500":"scaled_features = scaler.transform(df.drop('TARGET CLASS',axis=1))","3cdb9ce1":"df_feat = pd.DataFrame(scaled_features,columns=df.columns[:-1])\ndf_feat.head()","900047fc":"from sklearn.model_selection import train_test_split","16ab8dae":"X_train, X_test, y_train, y_test = train_test_split(scaled_features,df['TARGET CLASS'],test_size=0.30)","66abbcf9":"from sklearn.neighbors import KNeighborsClassifier","e4ae982f":"knn = KNeighborsClassifier(n_neighbors=1)","dbb9ae91":"knn.fit(X_train,y_train)","d8e3cbfd":"pred = knn.predict(X_test)","65ca3f9e":"from sklearn.metrics import classification_report,confusion_matrix","e87df429":"print(confusion_matrix(y_test,pred))","24dfed76":"print(classification_report(y_test,pred))","afa1dfc4":"error_rate = []\n\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","0445c3d0":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","8567ac41":"# NOW WITH K=30\nknn = KNeighborsClassifier(n_neighbors=30)\n\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\n\nprint('WITH K=30')\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","53348c21":"# Train Test Split\n\n**Use train_test_split to split your data into a training set and a testing set.**","6c7aec0a":"**Now create the following plot using the information from your for loop.**","8ff5857c":"**Convert the scaled features to a dataframe and check the head of this dataframe to make sure the scaling worked.**","bb0a9c61":"**Check the head of the dataframe.**","2386de8f":"**Fit this KNN model to the training data.**","4bc24158":"# Get the Data\n**Read the 'KNN_Project_Data csv file into a dataframe **","4cb55782":"# Import Libraries","adbfef16":"# Using KNN\n\n**Import KNeighborsClassifier from scikit learn.**","9d07bf79":"# Standardize the Variables\n\nTime to standardize the variables.\n\n**Import StandardScaler from Scikit learn.**","fc46d9b7":"**Use the .transform() method to transform the features to a scaled version.**","521077cd":"**Create a StandardScaler() object called scaler.**","92630bb7":"**Create a KNN model instance with n_neighbors=1**","989f538b":"# Retrain with new K Value\n\n**Retrain your model with the best K value and re-do the classification report and the confusion matrix.**","7a32ee15":"**Create a confusion matrix and classification report.**","844e9eec":"Model Complete !!!","c93217e3":"**Fit scaler to the features.**","0cd0ea53":"**Use the predict method to predict values using your KNN model and X_test.**","a6e647f9":"# K Nearest Neighbors Project","b1ec7734":"# Predictions and Evaluations\nLet's evaluate our KNN model!","990b2c00":"# EDA\n\nSince this data is artificial, we'll just do a large pairplot with seaborn.\n\n**Use seaborn on the dataframe to create a pairplot with the hue indicated by the TARGET CLASS column.**","22cf2935":"# Choosing a K Value\nLet's go ahead and use the elbow method to pick a good K Value!\n\n**Create a for loop that trains various KNN models with different k values, then keep track of the error_rate for each of these models with a list.**"}}