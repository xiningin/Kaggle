{"cell_type":{"39c3a197":"code","b13107d2":"code","350b9a83":"code","0dffbbc1":"code","5f069d0c":"code","4f516f98":"code","a8d67d96":"code","7bb4842d":"code","ff3d1274":"code","33edb68c":"code","b5530a99":"code","e84486ef":"code","b0f57929":"code","615232aa":"code","1d36d273":"code","65dc3ae2":"code","19b3ef80":"code","93491adf":"code","106485a2":"code","60fd1e6d":"code","cbfb7065":"markdown","596a66d6":"markdown","293eee68":"markdown","3179d774":"markdown","a2a7c77e":"markdown","a23b8063":"markdown","59c17e71":"markdown","a911d887":"markdown"},"source":{"39c3a197":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf","b13107d2":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.linear_model import RidgeClassifier, LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import SVC, LinearSVC , NuSVC\n","350b9a83":"df = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx')\ndf.head()","0dffbbc1":"df.groupby(\"SARS-Cov-2 exam result\").count()","5f069d0c":"df['SARS-Cov-2 exam result'].value_counts().plot(kind='pie', autopct='%.2f%%')","4f516f98":"sns.countplot(x='SARS-Cov-2 exam result', data=df);","a8d67d96":"Y = df['SARS-Cov-2 exam result']\nY = np.array([1 if status==\"positive\" else 0 for status in Y])\ndf = df.drop(columns=['Patient ID'])\ndf = df.drop(columns=['SARS-Cov-2 exam result'])","7bb4842d":"df = df.dropna(axis=1, how='all')   \ndf = df.dropna(axis=0, how='all')\ndf = df.dropna(thresh=2)\ndf.head()","ff3d1274":"kfold = StratifiedKFold(n_splits=30, random_state=100) # diviz\u00e3o equilibrada\nkfold","33edb68c":"df.dropna(axis=1, how='all')\ndf.head()","b5530a99":"X = df._get_numeric_data()\nX = np.nan_to_num(X.to_numpy())","e84486ef":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.333, random_state=45)","b0f57929":"from xgboost import XGBClassifier\n\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\npredictions = [round(value) for value in y_pred]\n\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Classification Report\")\nprint(metrics.classification_report(y_test, predictions,digits=4))","615232aa":"knn = KNeighborsClassifier(n_neighbors= 18 , weights= 'distance')\nknn.fit(X_train,y_train)\ny_pred = knn.predict(X_test)\n\nprint(\"Classification Report\")\nprint(metrics.classification_report(y_test, y_pred,digits=4))","1d36d273":"svc = SVC(C = 100, gamma=0.001,kernel='rbf')\nsvc.fit(X_train,y_train)\ny_pred = svc.predict(X_test)\nprint(\"Classification Report\")\nprint(metrics.classification_report(y_test, y_pred, digits=4))","65dc3ae2":"from sklearn.tree import DecisionTreeClassifier","19b3ef80":"tree_para = {'criterion':['gini','entropy'],'max_depth':[4,5,6,7,8,9,10,11,12,15,20,25,30,40,50,70,90,120,150]}\nclf = GridSearchCV(DecisionTreeClassifier(), tree_para, cv=kfold,scoring='accuracy')\nclf.fit(X_train,y_train)","93491adf":"print(clf.best_params_)","106485a2":"tree =DecisionTreeClassifier(criterion = 'entropy',max_depth = 5 )\ntree.fit(X_train,y_train)\ny_pred = tree.predict(X_test)\n\nprint(\"Classification Report\")\nprint(metrics.classification_report(y_test, y_pred,digits=4))","60fd1e6d":"from sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc\n\ngb = GradientBoostingClassifier(n_estimators=20, learning_rate = 0.5, max_features=50, max_depth = 4, random_state = 20)\ngb.fit(X_train, y_train)\npredictions = gb.predict(X_test)\n\nprint(\"Classification Report\")\nprint(classification_report(y_test, predictions,digits=4))","cbfb7065":"## XGBClassifier","596a66d6":"## KNeighborsClassifier","293eee68":"# Pre-Processing","3179d774":"# Classification","a2a7c77e":"# Graphic","a23b8063":"## DecisionTreeClassifier","59c17e71":"## GradientBoostingClassifier","a911d887":"# SVC"}}