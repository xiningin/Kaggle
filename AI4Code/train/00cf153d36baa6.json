{"cell_type":{"07cd4848":"code","b3da6714":"code","e6ae1b2b":"code","c5e3ee3f":"code","698067c5":"code","f0aff904":"code","807b7518":"markdown","5c826280":"markdown","129dd45d":"markdown","7260b7be":"markdown","333ddb3f":"markdown","fd7fb5b1":"markdown"},"source":{"07cd4848":"%%writefile IrrationalAgent.py\n# Source: https:\/\/www.kaggle.com\/jamesmcguigan\/random-seed-search-irrational-agent\/\n# Source: https:\/\/github.com\/JamesMcGuigan\/ai-games\/blob\/master\/games\/rock-paper-scissors\/rng\/IrrationalAgent.py\n\nimport re\nimport time\nfrom typing import List, Union\n\nfrom mpmath import mp\nmp.dps = 2048  # more than 1000 as 10%+ of chars will be dropped\n\n\ndef encode_irrational(irrational: Union[str,mp.mpf], offset=0) -> List[int]:\n    \"\"\"\n    Encode the irrational number into trinary\n    The irrational is converted to a string, \"0\"s are removed\n    Then each of the digits is converted to an integer % 3 and added the to sequence\n    \"\"\"\n    if isinstance(irrational, list) and all([ 0 <= n <= 2 for n in irrational ]):\n        return irrational  # prevent double encoding\n\n    string   = re.sub('[^1-9]', '', str(irrational))\n    sequence = [\n        ( int(c) + int(offset) ) % 3\n        for c in string\n    ]\n    assert len(sequence) >= 1000\n    return sequence\n\n\n\nclass IrrationalAgent():\n    \"\"\"\n    Play an fixed sequence of moves derived the digits of an irrational number\n\n    Irrational numbers are more mathematically pure source of randomness than\n    the repeating numbers used by the Mersenne Twister RNG\n\n    This agent is pure Chaos and contains no Order capable of being exploited once the game has started\n\n    Its only vulnerability is Password Attack.\n    Pleased to meet you, won't you guess my name?\n\n    There are an uncountable infinity of irrational numbers\n    Your choice of irrational is your password\n    Be irrational in your choice of irrational if want this agent to be secure\n    Alternatively choose a popular irrational with an offset to attack a specific agent\n\n    This is the true Nash Equilibrium solution to Rock Paper Scissors\n    \"\"\"\n\n    irrationals = {\n        name: encode_irrational(irrational)\n        for name, irrational in {\n            'pi':       mp.pi(),\n            'phi':      mp.phi(),\n            'e':        mp.e(),\n            'sqrt2':    mp.sqrt(2),\n            'sqrt5':    mp.sqrt(5),\n            'euler':    mp.euler(),\n            'catalan':  mp.catalan(),\n            'apery':    mp.apery(),\n            # 'khinchin':  mp.khinchin(),  # slow\n            # 'glaisher':  mp.glaisher(),  # slow\n            # 'mertens':   mp.mertens(),   # slow\n            # 'twinprime': mp.twinprime(), # slow\n        }.items()\n    }\n\n\n    def __init__(self, name='irrational', irrational: Union[str,mp.mpf] = None, offset=0, verbose=True):\n        # Irrational numbers are pure random sequences that are immune to random seed search\n        # Using name == 'irrational' causes the number to be reset each new game\n        if irrational is not None and ( name == 'irrational' or name in self.irrationals.keys() ):\n            name = 'secret'\n        if name == 'irrational':\n            irrational = self.generate_secure_irrational()\n        if name in self.irrationals.keys():\n            irrational = self.irrationals[name]\n        self.irrational = self.encode_irrational(irrational, offset=offset)\n\n        self.name       = name\n        self.offset     = offset\n        self.verbose    = verbose\n        self.reset()\n\n\n    def reset(self):\n        \"\"\"\n        Reset on the first turn of every new game\n        This allows a single instance to be run in a loop for testing\n        \"\"\"\n        self.history = {\n            \"action\":   [],\n            \"opponent\": []\n        }\n        if self.name == 'irrational':\n            irrational      = self.generate_secure_irrational()\n            self.irrational = self.encode_irrational(irrational, offset=self.offset)\n\n\n\n    def __call__(self, obs, conf):\n        return self.agent(obs, conf)\n\n    def agent(self, obs, conf):\n        \"\"\" Wrapper function for setting state in child classes \"\"\"\n\n        # Generate a new history and irrational seed for each new game\n        if obs.step == 0:\n            self.reset()\n\n        # Keep a record of opponent and action state\n        if obs.step > 0:\n            self.history['opponent'].append(obs.lastOpponentAction)\n\n        # This is where the subclassable agent logic happens\n        action = self.action(obs, conf)\n\n        # Keep a record of opponent and action state\n        self.history['action'].append(action)\n        return action\n\n\n    def action(self, obs, conf):\n        \"\"\" Play the next digit in a fixed irrational sequence \"\"\"\n        action = int(self.irrational[ obs.step % len(self.irrational) ])\n        action = (action + self.offset) % conf.signs\n        if self.verbose:\n            name = self.__class__.__name__ + ':' + self.name + (f'+{self.offset}' if self.offset else '')\n            opponent = ( self.history['opponent'] or [None] )[-1]\n            expected = ( action - 1 ) % 3\n            print(f\"{obs.step:4d} | {opponent}{self.win_symbol()} > action {action} | \" +\n                  f\"{name}\")\n        return action\n\n\n    @staticmethod\n    def generate_secure_irrational():\n        \"\"\"\n        Be irrational in your choice of irrational if want this agent to be secure\n        \"\"\"\n        irrational = sum([\n            mp.sqrt(n) * (time.monotonic_ns() % 2**32)\n            for n in range(2, 5 + (time.monotonic_ns() % 1024))\n        ])\n        return irrational\n\n\n    @classmethod\n    def encode_irrational(cls, irrational: Union[str,mp.mpf], offset=0) -> List[int]:\n        if irrational is None:\n            irrational = cls.generate_secure_irrational()\n        return encode_irrational(irrational, offset)\n\n\n\n    ### Logging\n\n    def win_symbol(self):\n        \"\"\" Symbol representing the reward from the previous turn \"\"\"\n        action   = ( self.history['action']   or [None] )[-1]\n        opponent = ( self.history['opponent'] or [None] )[-1]\n        if isinstance(action, int) and isinstance(opponent, int):\n            if action % 3 == (opponent + 1) % 3: return '+'  # win\n            if action % 3 == (opponent + 0) % 3: return '|'  # draw\n            if action % 3 == (opponent - 1) % 3: return '-'  # loss\n        return ' '\n\n\nirrational_instance = IrrationalAgent(name='pi', offset=0)\ndef irrational_agent(obs, conf):\n    return irrational_instance.agent(obs, conf)\n","b3da6714":"%run IrrationalAgent.py","e6ae1b2b":"%%writefile test_IrrationalAgent.py\nimport numpy as np\nimport pytest\nfrom kaggle_environments import evaluate\n\nfrom IrrationalAgent import IrrationalAgent\n\n\ndef test_Irrational_new_seed_each_game():\n    \"\"\" Test we can rerun a single instance of IrrationalAgent\n        and that it will generate a new irrational number for each game \"\"\"\n\n    episodeSteps = 10\n    agents = [\n        IrrationalAgent(),\n        IrrationalAgent()\n    ]\n    irrationals = [\n        agents[0].irrational,\n        agents[1].irrational\n    ]\n    assert agents[0].irrational != agents[1].irrational\n\n    results = evaluate(\n        \"rps\",\n        agents,\n        configuration={\n            \"episodeSteps\": episodeSteps,\n            # \"actTimeout\":   1000,\n        },\n        num_episodes=1,\n        # debug=True  # pull request\n    )\n    assert agents[0].irrational != agents[1].irrational\n    assert agents[0].irrational != irrationals[0]\n    assert agents[0].irrational != irrationals[1]\n    assert agents[1].irrational != irrationals[1]\n\n\n@pytest.mark.parametrize(\"name\",   IrrationalAgent.irrationals.keys())\n@pytest.mark.parametrize(\"offset\", [0,1,2])\ndef test_Irrational_vs_offset(name, offset):\n    \"\"\" Assert we can find the full irrational sequence every time \"\"\"\n    episodeSteps = 1000\n    results = evaluate(\n        \"rps\",\n        [\n            IrrationalAgent(name=name, offset=offset),\n            IrrationalAgent(name=name, offset=offset+1)\n        ],\n        configuration={\n            \"episodeSteps\": episodeSteps,\n            # \"actTimeout\":   1000,\n        },\n        # debug=True  # pull request\n    )\n    assert (results[0][0] + episodeSteps\/2.1) < results[0][1], results\n\n\n\ndef test_Irrational_vs_Irrational():\n    episodeSteps = 100\n\n    results = evaluate(\n        \"rps\",\n        [\n            IrrationalAgent(),\n            IrrationalAgent()\n        ],\n        configuration={\n            \"episodeSteps\": episodeSteps,\n            # \"actTimeout\":   1000,\n        },\n        num_episodes=100,\n        # debug=True,  # pull request\n    )\n    results = np.array(results).reshape((-1,2))\n    totals  = np.mean(results, axis=0)\n    std     = np.std(results, axis=0).round(2)\n    winrate = [ np.sum(results[:,0]-20 > results[:,1]),\n                np.sum(results[:,0]+20 < results[:,1]) ]\n\n    print('results', results)\n    print('totals',  totals)\n    print('std',     std)\n    print('winrate', winrate)\n\n    assert len(results[ results == None ]) == 0    # No errored matches\n    assert np.abs(totals[0]) < 0.2 * episodeSteps  # totals are within 20%\n    assert np.abs(totals[1]) < 0.2 * episodeSteps  # totals are within 20%\n    assert np.abs(std[0])    < 0.2 * episodeSteps  # std  within 20%\n    assert np.abs(std[1])    < 0.2 * episodeSteps  # std  within 20%\n","c5e3ee3f":"!pytest -v test_IrrationalAgent.py","698067c5":"from kaggle_environments import make, evaluate\n\nenv = make(\"rps\", configuration={\"episodeSteps\": 10}, debug=True)\nenv.run([ IrrationalAgent(name='pi'), IrrationalAgent(name='pi', offset=1) ])\nenv.render(mode=\"ipython\", width=400, height=400)","f0aff904":"%%time\nimport numpy as np\n\nagents  = [ IrrationalAgent(), IrrationalAgent() ]\nresults = evaluate(\n    \"rps\",\n    agents,\n    num_episodes=100,\n)\nresults = np.array(results).reshape((-1,2))\nresults[ results == None ] = -1\n\nprint([ getattr(agent, '__name__', agent.__class__.__name__) for agent in agents ])\nprint('winrate', [ np.sum(results[:,0]-20 > results[:,1]),\n                   np.sum(results[:,0]+20 < results[:,1])\n                 ], '\/', len(results))\nprint('totals ', np.sum(results, axis=0))\nprint('std    ', np.std(results, axis=0).round(2))","807b7518":"# Rock Paper Scissors - Irrational Agent\n\nPlay an fixed sequence of moves derived the digits of an irrational number\n\nIrrational numbers are more mathematically pure source of randomness than\nthe repeating numbers used by the Mersenne Twister RNG\n\nThis agent is pure Chaos and contains no Order capable of being exploited once the game has started\n\nIts only vulnerability is [Password Attack](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-irrational-search-agent). \nPleased to meet you, won't you guess my name?\n\nThere are an uncountable infinity of irrational numbers.\nYour choice of irrational is your password.\nBe irrational in your choice of irrational if want this agent to be secure.\nAlternatively choose a popular irrational with an offset to attack a specific agent.\n\nThis is the true Nash Equilibrium solution to Rock Paper Scissors!","5c826280":"# Demonstration","129dd45d":"# Unit Tests\n\nOne of the goals of this project was to be provably correct, thus we have unit tests for our assertions","7260b7be":"This is an example of a Password Attack. If you can guess the opponents choice of irrational number, then it is possible to get a perfect score against them using an offset.","333ddb3f":"# Further Reading\n\nThis notebook is part of a series exploring Rock Paper Scissors:\n\nIrrational\n- [PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-pi-bot)\n- [Anti-PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-pi-bot)\n- [Anti-Anti-PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-anti-pi-bot)\n- [Irrational Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-irrational-agent)\n- [Irrational Search Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-irrational-search-agent)\n- [Random Seed Search Nash Equlibrium Opening Book](https:\/\/www.kaggle.com\/jamesmcguigan\/random-seed-search-nash-equlibrium-opening-book)\n\nRNG\n- [Random Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-random-agent)\n- [RNG Statistics](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-rng-statistics)\n\nSequence\n- [De Bruijn Sequence](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-de-bruijn-sequence)\n\nOpponent Response\n- [Anti-Rotn](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-rotn)\n- [Sequential Strategies](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-sequential-strategies)\n\nStatistical \n- [Weighted Random Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-weighted-random-agent)\n- [Anti-Rotn Weighted Random](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-rotn-weighted-random)\n- [Statistical Prediction](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-statistical-prediction)\n\nMemory Patterns\n- [Naive Bayes](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-naive-bayes)\n- [Memory Patterns](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-memory-patterns)\n\nDecision Tree\n- [XGBoost](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-xgboost)\n- [Multi Stage Decision Tree](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-multi-stage-decision-tree)\n- [Decision Tree Ensemble](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-decision-tree-ensemble)\n\nNeural Networks\n- [LSTM](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-lstm)\n\nEnsemble\n- [Multi Armed Stats Bandit](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-multi-armed-stats-bandit)\n\nRoShamBo Competition Winners\n- [Iocaine Powder](https:\/\/www.kaggle.com\/jamesmcguigan\/rps-roshambo-comp-iocaine-powder)\n- [Greenberg](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-greenberg)","fd7fb5b1":"# Statistics \n\n- 460 total differential \/ (1000 steps * 100 games) = 0.45% statistical error compared to what should be a theoretical draw. \n- 460 total differential \/ 100 games = average of +4.5 extra wins per game\n- These +4.5 average extra wins are distributed between games within a normal distribution\n- Standard deviation means that 66% of random matches result in score differental of less than 25 per game.\n- The Kaggle leaderboard has set the draw threshold at +-20 points, which is based on the 50% random draw threshold.\n- A tiny 0.45% statistical advantage per step resulted in a 12\/100 = 12% winrate advantage\n- These numbers might change slightly when rerun after the notebook commit"}}