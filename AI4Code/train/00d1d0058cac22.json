{"cell_type":{"164a5920":"code","808bdd10":"code","c810d720":"code","bf4e232d":"code","33946efb":"code","9fd9d599":"code","b03b1567":"code","6a0379f6":"code","291f5cbb":"code","863d6135":"code","d426c168":"code","9d8269fb":"code","6e943055":"code","4077926c":"code","7d094ae6":"code","5cb18064":"code","17c6577c":"code","28617814":"code","9aa5b8ad":"code","b91c0c1b":"code","65eb0197":"code","fd56b0d0":"code","69161d83":"code","e1de12a9":"code","95cbf651":"code","5e17987e":"code","d428962c":"code","c73236a8":"code","90135cee":"code","06f4ea7b":"code","942ff216":"code","4e466353":"code","665378d3":"markdown","8d5530bd":"markdown","eff57800":"markdown","5c7dff0f":"markdown"},"source":{"164a5920":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd \nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns# data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","808bdd10":"df = pd.read_excel('\/kaggle\/input\/ipl-2020-dataset-dubai\/Ipl_2020.xlsx')","c810d720":"sns.set_style('darkgrid')\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (9, 5)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'","bf4e232d":"df.head()#print first five colummns","33946efb":"df.sample(5) #Print five random columns","9fd9d599":"#full information of dataset\ndf.info()","b03b1567":"#statistical dataset information\ndf.describe()","6a0379f6":"#shape of dataset\ndf.shape","291f5cbb":"#datatype of each columns\ndf.dtypes","863d6135":"#columns of dataset\nprint(df.columns)\nprint(len(df.columns))","d426c168":"df.isnull().sum()","9d8269fb":"df.isnull()","6e943055":"df.nunique()","4077926c":"#Finding the rows where the city is NaN\ndf[df.Day.isna()]","7d094ae6":"#Finding the number of IPL matches played till 2019\ndf.Match.count()","5cb18064":"ls = df['Venue'].value_counts().plot.bar(width=.7)\nls.set_xlabel('Grounds')\nls.set_ylabel('count')\nplt.show()","17c6577c":"df.corr() #correlation","28617814":"df.cov()","9aa5b8ad":"df['winner'].sort_values().value_counts()","b91c0c1b":"teju = df.cov()\nteju","65eb0197":"sns.heatmap(teju,annot = True) #heatmap","fd56b0d0":"#The graph will show the decision of fielding or batting if a team wins the toss. \nsns.countplot(y='Team-1',hue='Toss Decision',data=df)\nplt.show()","69161d83":"#The graph will show the decision of fielding or batting if a team wins the toss. \nsns.countplot(y='Team-2',hue='Toss Decision',data=df)\nplt.show()","e1de12a9":"a= df['player_of_the_match'].value_counts()\nb= a.idxmax()\n\nprint(' Who has the highest man of the match awards?\\n', b)\n\nc= df['winner'].value_counts()\nd=c.idxmax()\nprint(' Which team has won the most?\\n', d)","95cbf651":"#The graph shows the team that won the most tosses\nu=df['Toss Winner'].value_counts().plot.bar()\nfor l in u.patches:\n    u.annotate(format(l.get_height()), (l.get_x()+0.15, l.get_height()+1))\nplt.show()","5e17987e":"#Probability that the toss winner will win the match\nz=df[df['Toss Winner']==df['winner']]\nslices=[len(z),(len(df)-len(z))]\nlabels=['Yes','No']\nplt.pie(slices,labels=labels,autopct='%1.2f%%')\nfig = plt.gcf()\nplt.show()","d428962c":"#The Graph shows the top 5 most Man of the match winners\npp = df['player_of_the_match'].value_counts().head(5).plot.bar( color='Red')  \npp.set_xlabel('MOM') \npp.set_ylabel('Total')\nfor p in pp.patches:\n    pp.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+0.25))\nplt.show()","c73236a8":"#Team that won the most\nsns.countplot(x='winner', data=df)\nplt.xticks(rotation='vertical')\nplt.show()","90135cee":"plt.figure(figsize=(12,6))\nsns.countplot(x='Venue', data=df)\nplt.xticks(rotation='vertical')\nplt.show()","06f4ea7b":"plt.figure(figsize=(12,6))\nsns.countplot(x='Team-1', data=df)\nplt.xticks(rotation='vertical')\nplt.show()","942ff216":"plt.figure(figsize=(12,6))\n\nplt.title('Top Teams who win batting second are')\nsns.countplot(x='winner', data=df[df['win_by_wickets']>0])\nplt.xlabel(\"Team-1\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation='vertical')\nplt.show()","4e466353":"sns.pairplot(df)","665378d3":"# Data Cleaning","8d5530bd":"# THANK YOU","eff57800":"# LOAD THE DATASET","5c7dff0f":"# Data Visualization"}}