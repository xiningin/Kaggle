{"cell_type":{"5070719e":"code","eed0f917":"code","7d80ee35":"code","32b35b72":"code","1ee797b1":"code","4d8493a3":"code","8b2a7119":"code","5eb0255e":"code","1645f733":"code","4cd235c9":"code","886fb749":"code","a36e9cad":"code","88e1758d":"code","6bef1985":"code","a199111d":"markdown","ee274cc3":"markdown","e96a9363":"markdown","665b2a11":"markdown","614d091f":"markdown","370462c7":"markdown","fdeff3c9":"markdown","e6eaa4b9":"markdown","558e598a":"markdown","cbe1858b":"markdown","86f38718":"markdown","72dd77ee":"markdown"},"source":{"5070719e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","eed0f917":"!pip install -q efficientnet\nimport tensorflow as tf\nimport keras\nimport efficientnet.tfkeras as efn\nfrom kaggle_datasets import KaggleDatasets\nfrom tensorflow.keras.models import Sequential\nimport tensorflow.keras.layers as L\nfrom tensorflow.keras.applications import InceptionResNetV2\nfrom tensorflow.keras.layers import Dense, GlobalAveragePooling2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt","7d80ee35":"# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","32b35b72":"GCS_DS_PATH = KaggleDatasets().get_gcs_path() # you can list the bucket with \"!gsutil ls $GCS_DS_PATH\"","1ee797b1":"def format_path(fn):\n    return GCS_DS_PATH + '\/images\/' + fn + '.jpg'\n\ntrain = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/sample_submission.csv')\n\ntrain_paths = train['image_id'].apply(format_path).values\ntest_paths = test['image_id'].apply(format_path).values\n\ntrain_labels = train.loc[:, 'healthy':].values\n\nlist_train_ds = tf.data.Dataset.from_tensor_slices((train_paths, train_labels))\nlist_test_ds = tf.data.Dataset.from_tensor_slices(test_paths)","4d8493a3":"AUTOTUNE = tf.data.experimental.AUTOTUNE\nEPOCHS = 40\nBATCH_SIZE_1 = 16 * strategy.num_replicas_in_sync\nBATCH_SIZE_2 = 64\nimage_size = 800","8b2a7119":"def decode_image(filename, label=None, image_size=(image_size, image_size)):\n    bits = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(bits, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.resize(image, image_size)\n    \n    if label is None:\n        return image\n    else:\n        return image, label\n    \ndef data_augment(image, label=None):\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    \n    if label is None:\n        return image\n    else:\n        return image, label\n    \ndef prepare_for_training(ds, batch_size, cache=True, shuffle_buffer_size=512):\n    if cache:\n        if isinstance(cache, str):\n            ds = ds.cache(cache)\n        else:\n            ds = ds.cache()\n    ds = ds.map(data_augment, num_parallel_calls=AUTOTUNE)\n    ds = ds.shuffle(buffer_size=shuffle_buffer_size)\n    ds = ds.repeat()\n    ds = ds.batch(batch_size)\n    ds = ds.prefetch(buffer_size=AUTOTUNE)\n    \n    return ds","5eb0255e":"train_ds1 = list_train_ds.map(decode_image, num_parallel_calls=AUTOTUNE)\ntrain_ds1 = prepare_for_training(train_ds1, BATCH_SIZE_1)\n\ntrain_ds2 = list_train_ds.map(decode_image, num_parallel_calls=AUTOTUNE)\ntrain_ds2 = prepare_for_training(train_ds2, BATCH_SIZE_2)\n\ntest_ds = list_test_ds.map(decode_image, num_parallel_calls=AUTOTUNE)\ntest_ds = test_ds.batch(BATCH_SIZE_1)","1645f733":"with strategy.scope():\n    model1 = tf.keras.Sequential([\n        InceptionResNetV2(\n            input_shape=(image_size, image_size, 3),\n            weights='imagenet',\n            include_top=False\n        ),\n        L.GlobalAveragePooling2D(),\n        L.Dense(train_labels.shape[1], activation='softmax')\n    ])\n        \n    model1.compile(\n        optimizer = 'adam',\n        loss = 'categorical_crossentropy',\n        metrics=['categorical_accuracy']\n    )\n    model1.summary()","4cd235c9":"with strategy.scope():\n    model2 = tf.keras.Sequential([\n        efn.EfficientNetB7(\n            input_shape=(image_size, image_size, 3),\n            weights='imagenet',\n            include_top=False\n        ),\n        L.GlobalAveragePooling2D(),\n        L.Dense(train_labels.shape[1], activation='softmax'),\n    ])\n        \n    model2.compile(\n        optimizer = 'adam',\n        loss = 'categorical_crossentropy',\n        metrics=['categorical_accuracy']\n    )\n    model2.summary()","886fb749":"LR_START = 0.0001\nLR_MAX = 0.00005 * strategy.num_replicas_in_sync\nLR_MIN = 0.0001\nLR_RAMPUP_EPOCHS = 4\nLR_SUSTAIN_EPOCHS = 6\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = np.random.random_sample() * LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)","a36e9cad":"STEPS_PER_EPOCH = train_labels.shape[0] \/\/ BATCH_SIZE_1\n\nhistory1 = model1.fit(\n    train_ds1, \n    epochs=EPOCHS, \n    callbacks=[lr_callback],\n    steps_per_epoch=STEPS_PER_EPOCH,\n)","88e1758d":"STEPS_PER_EPOCH = train_labels.shape[0] \/\/ BATCH_SIZE_2\n\nhistory2 = model2.fit(\n    train_ds2, \n    epochs=EPOCHS, \n    callbacks=[lr_callback],\n    steps_per_epoch=STEPS_PER_EPOCH,\n)","6bef1985":"probs1 = model1.predict(test_ds, verbose=1)\nprobs2 = model2.predict(test_ds, verbose=1)\nprobs_avg = (probs1 + probs2) \/ 2\nsub.loc[:, 'healthy':] = probs_avg\nsub.to_csv('submission.csv', index=False)\nsub.head()","a199111d":"## Extract dataset paths","ee274cc3":"## Train Model 2","e96a9363":"# Models","665b2a11":"# TPU or GPU detection","614d091f":"# Competition data access","370462c7":"## Generate datasets","fdeff3c9":"# Training","e6eaa4b9":"# Prediction","558e598a":"## Model 1: Inception ResNetV2","cbe1858b":"## Train Model 1","86f38718":"# Datasets","72dd77ee":"## Model 2: EfficientNet B7"}}