{"cell_type":{"c3a96e79":"code","1782e8b5":"code","4f1ee562":"code","d5a7980f":"code","f616a608":"code","1e059105":"code","4ab60542":"code","af6222eb":"code","13c1b4bf":"code","e6ed8388":"code","2627f32b":"code","335f3465":"code","60bebbba":"code","cd0025db":"code","06301b0b":"code","1667f4d9":"code","fc591d08":"code","06b82599":"code","e6997264":"code","b0f77281":"code","b7f00d8a":"code","fc937a02":"code","b0e368e3":"code","bc250a77":"code","2f3c1341":"code","d4172a8a":"code","bf45dbe7":"code","c371944d":"code","ce18aa89":"code","16bc8707":"code","fa2ea087":"code","41266380":"code","d9c9f617":"code","ca8dc79b":"code","e9a26b7b":"code","5a690d1f":"code","a9506146":"code","2b13cfd7":"code","58e67c22":"code","d15b47dd":"code","42ffcd3c":"code","f1cb3b23":"code","5e561787":"code","7bf1a163":"code","cb749ab0":"code","eaa85243":"code","d7bc5a36":"code","827eaf82":"code","96c553be":"code","2abb1779":"code","d53454a6":"code","ab2ea78b":"code","d18f82d8":"code","cd6f0bea":"code","d2ab9dbc":"code","23397cac":"code","e78615a6":"code","13cfc919":"code","f5e58ae7":"code","dc172e17":"code","aa31c352":"code","c4d2b9b6":"code","9720be79":"code","8bfe141e":"code","7ac9203d":"code","f5d138a0":"code","6467b63c":"code","ec21b0d3":"code","f5d18ed3":"code","926e6156":"code","d5bc86a6":"code","a35a0fcd":"code","3eed356c":"code","53991adb":"code","9ca67142":"code","f212c08b":"markdown","c3e9376a":"markdown","4cdb7394":"markdown","b31e3270":"markdown","f0055cbd":"markdown","5e4dfa28":"markdown","29c5e410":"markdown","42703e98":"markdown","0a08792e":"markdown","1cab8f13":"markdown","fa0f6c25":"markdown","b918563c":"markdown","47ffe925":"markdown","9f96317e":"markdown","08e3761f":"markdown","1bc64c55":"markdown","69a87c09":"markdown","46b0b551":"markdown","3917c66c":"markdown","2221360b":"markdown","c49eb02f":"markdown","b956a3b5":"markdown","4194cc06":"markdown","9f947753":"markdown","7d8b8120":"markdown","0e568611":"markdown","676d4bac":"markdown","f220c26c":"markdown","96930b36":"markdown","bbbdff76":"markdown","7b118926":"markdown"},"source":{"c3a96e79":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1782e8b5":"!pip install ppscore\n### https:\/\/github.com\/8080labs\/ppscore - An alternative\/improvement to correlation matrix","4f1ee562":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport ppscore as pps\n\n#filter out warnings\nimport warnings \nwarnings.filterwarnings('ignore')\n\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\n%matplotlib inline","d5a7980f":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","f616a608":"train.columns","1e059105":"train.head()","4ab60542":"train.shape","af6222eb":"train.isnull().sum()","13c1b4bf":"sns.heatmap(train.isnull(),yticklabels=False, cmap='plasma')","e6ed8388":"train.isnull().sum().sort_values(ascending=False)[0:19]","2627f32b":"test.isnull().sum().sort_values(ascending=False)[0:33]","335f3465":"train['SalePrice'].describe()","60bebbba":"#skewness and kurtosis\nprint(\"Skewness: %f\" % train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % train['SalePrice'].kurt())","cd0025db":"#scatter plot grlivarea\/saleprice\nvar = 'GrLivArea'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","06301b0b":"#scatter plot totalbsmtsf\/saleprice\nvar = 'TotalBsmtSF'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","1667f4d9":"var = 'OverallQual'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","fc591d08":"var = 'YearBuilt'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nplt.xticks(rotation=90);","06b82599":"sns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","e6997264":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#Check the new distribution \nsns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","b0f77281":"#Correlation map to see how features are correlated with SalePrice\ncorrmat = train.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax=0.9, square=True)","b7f00d8a":"ntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.SalePrice.values\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","fc937a02":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","b0e368e3":"print(cols)","bc250a77":"#scatterplot\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train[cols], size = 2.5)\nplt.show();","2f3c1341":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head(20)","d4172a8a":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","bf45dbe7":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")\nall_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")","c371944d":"all_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")\nall_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")","ce18aa89":"all_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")\n#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","16bc8707":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)","fa2ea087":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')","41266380":"all_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)\nall_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])","d9c9f617":"all_data = all_data.drop(['Utilities'], axis=1)\nall_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")","ca8dc79b":"all_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])","e9a26b7b":"all_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])","5a690d1f":"all_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])\nall_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")","a9506146":"#Check remaining missing values if any \nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","2b13cfd7":"#MSSubClass=The building class\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","58e67c22":"final_all_data = all_data","d15b47dd":"saleprice_scaled = StandardScaler().fit_transform(train['SalePrice'][:,np.newaxis]);\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","42ffcd3c":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n# shape\nstr_cols  = all_data.select_dtypes(include = 'object').columns\nfor c in str_cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\nprint('Shape all_data: {}'.format(all_data.shape))","f1cb3b23":"final_data = all_data","5e561787":"final_data.columns","7bf1a163":"corre = pps.matrix(final_data[['OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea',\n       'TotalBsmtSF', '1stFlrSF', 'FullBath', 'YearBuilt', 'YearRemodAdd']])","cb749ab0":"corre.columns","eaa85243":"corre1 = corre.pivot(index='x', columns='y', values='ppscore')","d7bc5a36":"corre1.columns","827eaf82":"plt.figure(figsize=(12,10))\nsns.heatmap(corre1,annot=True,fmt=\".02f\",square = False)","96c553be":"#train_y = pd.concat([y_train,test['SalePrice']],axis=0)","2abb1779":"train_x,train_y = all_data[:1460],y_train","d53454a6":"train_x.shape","ab2ea78b":"train_y.shape","d18f82d8":"train_x.head()","cd6f0bea":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\n#splitting the dataset as training and testing dataset\nX_train, X_test, y_train, y_test = train_test_split(train_x,train_y)\ny_train = pd.DataFrame(y_train)\ny_test = pd.DataFrame(y_test)","d2ab9dbc":"#building the model\nlinreg = LinearRegression()\nlinreg.fit(X_train, y_train)\n\n#Accuracy\nprint(\"R-Squared Value for Training Set: {:.3f}\".format(linreg.score(X_train, y_train)))\nprint(\"R-Squared Value for Test Set: {:.3f}\".format(linreg.score(X_test, y_test)))","23397cac":"from sklearn.linear_model import Ridge\n\nridge = Ridge()\nridge.fit(X_train, y_train)\n\nprint('R-squared score (training): {:.3f}'.format(ridge.score(X_train, y_train)))\nprint('R-squared score (test): {:.3f}'.format(ridge.score(X_test, y_test)))","e78615a6":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\nridge = Ridge(alpha=20)\nridge.fit(X_train_scaled, y_train)\n\nprint('R-squared score (training): {:.3f}'.format(ridge.score(X_train_scaled, y_train)))\nprint('R-squared score (test): {:.3f}'.format(ridge.score(X_test_scaled, y_test)))","13cfc919":"from sklearn.linear_model import Lasso\n\nlasso = Lasso(max_iter = 10000)\nlasso.fit(X_train, y_train)\n\nprint('R-squared score (training): {:.3f}'.format(lasso.score(X_train, y_train)))\nprint('R-squared score (test): {:.3f}'.format(lasso.score(X_test, y_test)))","f5e58ae7":"lasso = Lasso(alpha=100, max_iter = 10000)\nlasso.fit(X_train, y_train)\n\nprint('R-squared score (training): {:.3f}'.format(lasso.score(X_train, y_train)))\nprint('R-squared score (test): {:.3f}'.format(lasso.score(X_test, y_test)))","dc172e17":"from sklearn.ensemble import RandomForestRegressor\n\nregressor = RandomForestRegressor()","aa31c352":"from sklearn.model_selection import RandomizedSearchCV\n\nn_estimators = [100, 500, 900]\ndepth = [3,5,10,15]\nmin_split=[2,3,4]\nmin_leaf=[2,3,4]\nbootstrap = ['True', 'False']\nverbose = [0]\n\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':depth,\n    #'criterion':criterion,\n    'bootstrap':bootstrap,\n    'verbose':verbose,\n    'min_samples_split':min_split,\n    'min_samples_leaf':min_leaf\n    }\n\nrandom_cv = RandomizedSearchCV(estimator=regressor,\n                               param_distributions=hyperparameter_grid,\n                               cv=5, \n                               scoring = 'neg_mean_absolute_error',\n                               n_jobs = -1, \n                               return_train_score = True,\n                               random_state=42)","c4d2b9b6":"random_cv.fit(X_train,y_train)","9720be79":"random_cv.best_estimator_","8bfe141e":"regressor = RandomForestRegressor(bootstrap='False', max_depth=15, min_samples_leaf=3,\n                      min_samples_split=4, n_estimators=500, verbose=0)\nregressor.fit(X_train,y_train)","7ac9203d":"regressor.fit(X_train,y_train)\nprint('R-squared score (training): {:.3f}'.format(regressor.score(X_train, y_train)))\nregressor.fit(X_test,y_test)\nprint('R-squared score (test): {:.3f}'.format(regressor.score(X_test, y_test)))","f5d138a0":"import xgboost","6467b63c":"regressor=xgboost.XGBRegressor()\nn_estimators = [100, 500, 900, 1100, 1500]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4]\nbase_score=[0.25,0.5,0.75,1]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }\nrandom_cv = RandomizedSearchCV(estimator=regressor,\n            param_distributions=hyperparameter_grid,\n            cv=5, n_iter=50,\n            scoring = 'neg_mean_absolute_error',n_jobs = -1,\n            verbose = 5, \n            return_train_score = True,\n            random_state=42)","ec21b0d3":"random_cv.fit(X_train,y_train)","f5d18ed3":"random_cv.best_estimator_","926e6156":"regressor = xgboost.XGBRegressor(base_score=0.25, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.1, max_delta_step=0, max_depth=2,\n             min_child_weight=1, monotone_constraints='()',\n             n_estimators=900, n_jobs=0, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)","d5bc86a6":"regressor.fit(X_train,y_train)\nprint('R-squared score (training): {:.3f}'.format(regressor.score(X_train, y_train)))\nregressor.fit(X_test,y_test)\nprint('R-squared score (test): {:.3f}'.format(regressor.score(X_test, y_test)))","a35a0fcd":"Test_X = all_data[1460:]\ny_pred = regressor.predict(Test_X)","3eed356c":"pred=pd.DataFrame(y_pred)\nsamp = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsub = pd.concat([samp['Id'],pred], axis=1)\nsub.columns=['Id','SalePrice']","53991adb":"sub","9ca67142":"sub.to_csv('submission.csv',index=False)","f212c08b":"## Necessary Imports","c3e9376a":"### Descriptive statistics summary","4cdb7394":"Percentage of Nulls calculation","b31e3270":"### Pair-wise scatter plots","f0055cbd":"Load Data","5e4dfa28":"# Lasso Regression","29c5e410":"### Whisker plot overallqual\/saleprice","42703e98":"### Grouping the data","0a08792e":"Checking out the data","1cab8f13":"## Hello there, fellow data science enthusiast!\n\n## This notebook is gonna tell you how you can use your machine learning skills to predict house prices and you'll also learn some regression techniques.\n\n## Read on! \n\n","fa0f6c25":"## Linear Regression","b918563c":"## Min-Max Scaler","47ffe925":"### Finding those Nulls!","9f96317e":"### Predicting, formatting and prep the submission file","08e3761f":"# Stay Tuned, Kindly upvote!","1bc64c55":"### Encoding the data","69a87c09":"### Filling Nulls for each column appropriately","46b0b551":"## Random Forest Regression","3917c66c":"# A Few ML Models","2221360b":"Edit 1: Normalized the data with Standard Scaler.\n\nEdit 2: Added Predictive Power Score plots for capturing non linear feature dependencies.\n\nEdit 3: Adding Submission file.","c49eb02f":"### Correlation Matrix","b956a3b5":"Correlation matrix of some selected features","4194cc06":"### Checking out some distribution plots","9f947753":"## The Undisputed XGBoost (with RSCV)","7d8b8120":"## Ridge Regression","0e568611":"A better way to visualize the NaNs","676d4bac":"### Standardizing the data","f220c26c":"# An examination of regression techniques for the classic house price prediction problem.","96930b36":"## That's it for now!, I'll be soon updating this page with more visualizations and 'easy' implementations of the 'advanced' regression algorithms!","bbbdff76":"### Predictive Power Score","7b118926":"### Normalizing the columns"}}