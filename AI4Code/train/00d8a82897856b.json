{"cell_type":{"0029ce97":"code","19928bbb":"code","33a774f5":"code","431155cb":"code","3b4ff8d7":"code","52e3025d":"code","737437a8":"code","08e72556":"code","db930344":"code","a7d19e2b":"code","29383bf7":"code","f5d0d556":"markdown","af53aee3":"markdown","704c9c39":"markdown"},"source":{"0029ce97":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport seaborn as sns\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew\n\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')","19928bbb":"arabica_data = pd.read_csv('..\/input\/coffee-quality-database-from-cqi\/arabica_data_cleaned.csv')\narabica_data.head()","33a774f5":"arabica_data_wet = arabica_data.loc[arabica_data['Processing.Method'] == 'Washed \/ Wet']\n\n# variety\uac00 \uc5c6\ub294 \uacbd\uc6b0 Other\ub85c \ubb36\uae30\narabica_data_wet['Variety'] = arabica_data_wet['Variety'].fillna('Other')\n\narabica_data_wet['Coffee_Name'] = [arabica_data_wet['Country.of.Origin'].iloc[i] + '_' + arabica_data_wet['Variety'].iloc[i]\n                                     if arabica_data_wet['Variety'].iloc[i] != 'Other'\n                                     else arabica_data_wet['Country.of.Origin'].iloc[i]\n                                     for i in range(len(arabica_data_wet))]","431155cb":"# Ordering\ntastes = ['Aroma', 'Flavor', 'Aftertaste', 'Acidity', 'Body', 'Balance']\nuniformity_sweetness = ['Uniformity', 'Sweetness']\n\n\nfor i in range(len(tastes)):\n    arabica_data_wet['{}_Rating'.format(tastes[i])] = 0\n\nfor i in range(len(arabica_data_wet)):\n    ratings = arabica_data_wet[tastes].iloc[i].sort_values(ascending = False).index\n    for rating in range(len(ratings)):\n        arabica_data_wet['{}_Rating'.format(ratings[rating])].iloc[i] = rating + 1","3b4ff8d7":"### Ordering(\uc21c\uc11c\ub97c \ub9e4\uaca8, 6 * 5 * 4 * 3 * 2 * 1\uc758 \uceec\ub7fc\uac1c\uc218\ub9cc\ud07c \ub9cc\ub4e6, \uc77c\ub2e8 \ub370\uc774\ud130\uc758 \uac1c\uc218\uac00 \uc801\uc5b4 \ud574\ub2f9 features\ub294 \ub9cc\ub4e4\uc9c0 \uc54a\uc74c.)\n\n\"\"\"arabica_data_wet['Ordering'] = 0\nOrdering = set()\n\nfeatures = tastes + uniformity_sweetnees + ['Ordering']\nfor column in arabica_data_wet.columns:\n    if column in features:\n        coffee[column] = arabica_data_wet[column]\n\"\"\"\n\n\"\"\"\n# categorical feature : \ub354\ubbf8\ubcc0\uc218\ud6c4 cluster_data\uc640 \ud569\uce68\nOrder_dummies =  pd.concat((coffee['Coffee_Name'], pd.get_dummies(coffee['Ordering'])), axis = 1).groupby('Coffee_Name').max().reset_index()\ncluster_data = pd.concat((cluster_data, Order_dummies.drop(['Coffee_Name'], axis = 1)), axis = 1)\ncluster_data.shape\n\"\"\"","52e3025d":"# numerical features : \ucee4\ud53c \uc885\ub958\uc5d0 \ub530\ub978 mean value \ucd94\uac00\ncluster_data = pd.DataFrame({'Coffee_Name' : arabica_data_wet.groupby('Coffee_Name')['Aroma'].mean().index})\nratings = ['Aroma_Rating', 'Flavor_Rating', 'Aftertaste_Rating', 'Acidity_Rating', 'Body_Rating', 'Balance_Rating']\nfeatures = tastes + uniformity_sweetness + ratings\nfor column in features:\n    cluster_data[column] = arabica_data_wet.groupby('Coffee_Name')[column].mean().values\n    ","737437a8":"# TSNE\uc5d0\ub294 \uc815\uaddc\ud654\ub97c \uac70\uce58\uc9c0 \uc54a\uc740 X\nmodel = TSNE(n_components = 2, random_state = 0, perplexity = 50)\ntsne = model.fit_transform(cluster_data.drop(['Coffee_Name'], axis = 1).values)\n\n# PCA\uc5d0\ub294 \uc815\uaddc\ud654\ub41c X\nstd = StandardScaler()\ns = std.fit_transform(cluster_data.drop(['Coffee_Name'], axis = 1))\n\npca = PCA(n_components = 7)\npca.fit(cluster_data.drop(['Coffee_Name'], axis = 1))\npc = pca.transform(cluster_data.drop(['Coffee_Name'], axis = 1))\nkmeans = KMeans(n_clusters = 35)\nkmeans.fit(pc)\n\nfr = pd.DataFrame({'tsne1' : tsne[:,0], 'tsne2' : tsne[:, 1], 'cluster' : kmeans.labels_})\n#sns.lmplot(data = fr, x = 'tsne1', y = 'tsne2', hue = 'cluster', fit_reg = False)\nprint(np.sum(pca.explained_variance_ratio_))\n\ncluster_data['Cluster'] = kmeans.labels_","08e72556":"# Blending Classification by Cluster\n# Country : [Country1, Country2 ...]\n# Rate : [0.4, 0.2, ...] \/ {X1 + X2 + ... + Xn = 1}\n\ndef blending_clustering(Country, Rate, Variety = None):\n    blend = 0\n    for i in range(len(Country)):\n        if Variety == None:\n            blend += arabica_data_wet.loc[arabica_data_wet['Country.of.Origin'] == Country[i]][features].mean().apply(lambda x: x * Rate[i])\n        else:\n            if Variety[i] == None:\n                blend += arabica_data_wet.loc[arabica_data_wet['Country.of.Origin'] == Country[i]][features].mean().apply(lambda x: x * Rate[i])\n            else:\n                blend += arabica_data_wet.loc[arabica_data_wet['Coffee_Name'] == \"{}_{}\".format(Country[i], Variety[i])][features].mean().apply(lambda x: x * Rate[i])\n    blend = pd.DataFrame([blend])\n    \n    \n    # Modeling : DecistionTreeClassifier()\n    \n    model = DecisionTreeClassifier()\n    model.fit(cluster_data.drop(['Cluster', 'Coffee_Name'], axis = 1), kmeans.labels_)\n    print(blend)\n    model.predict(blend)\n    \n    print(\"\\n cluster\ub294 '{}'\uc785\ub2c8\ub2e4. \\n\".format(int(model.predict(blend))))\n    print(\"\\n \uac19\uc740 cluster \uc548\uc5d0 '{}'\uc774 \uc788\uc2b5\ub2c8\ub2e4.\".format(list(cluster_data['Coffee_Name'].loc[cluster_data['Cluster'] == model.predict(blend)[0]])))\n    \n    return \n\n# Checking Country in this dataset.\ndef check_Country():\n    return set(arabica_data_wet['Country.of.Origin'])\n\n# Checking Variety in the Country\ndef check_Variety(Country):\n    return set(arabica_data_wet['Variety'].loc[arabica_data_wet['Country.of.Origin'] == Country].values)\n\n","db930344":"check_Country()","a7d19e2b":"check_Variety('Brazil')","29383bf7":"Country = ['Costa Rica', 'Ethiopia', 'Colombia', 'Brazil']\nRate = [.25, .25, .25, .25]\nVariety = [None, 'Ethiopian Yirgacheffe', None, None]\nblending_clustering(Country, Rate, Variety)","f5d0d556":"# Summary\n\n### blending\nAlthough these arithmetic mean can't be present for blending's tastes. When Checking the clusters, it's classification is not bad. However if I develop classification models in function of blending_clustering, like Logistick Regression, RandomForest or SVM and ensemble them, It could be more accurate. I will upgrade them.","af53aee3":"# Blending Classification by cluster.","704c9c39":"# Clustering\n### Reference(my notebook) : [Coffee_Clustering](https:\/\/www.kaggle.com\/choihanbin\/coffee-clustering)"}}