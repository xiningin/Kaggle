{"cell_type":{"642e6610":"code","e0156dc0":"code","ab38c4de":"code","e1efdb1e":"code","db47c444":"code","412e2090":"code","6d6378fe":"code","b1a17b67":"code","b94bb6be":"code","551b492b":"code","b952c131":"code","161e9dd9":"code","eacac21f":"code","a7277648":"code","aa236748":"code","1146f594":"code","f42cc6ed":"code","416c2646":"code","fef7fd47":"code","74edda50":"code","24b4af1f":"code","195468c0":"code","e4c8e055":"code","814c50fa":"code","dc82b5e4":"markdown","e68e9421":"markdown","fdbc2b6a":"markdown","4e40f4cc":"markdown"},"source":{"642e6610":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e0156dc0":"data = pd.read_csv('..\/input\/fetal-health-classification\/fetal_health.csv')","ab38c4de":"data.head()","e1efdb1e":"X = data.drop('fetal_health', axis=1)\ny = pd.DataFrame(data['fetal_health'], columns=['fetal_health'])","db47c444":"data.info()","412e2090":"data.describe().T","6d6378fe":"data.corr()['fetal_health'].drop('fetal_health').sort_values(ascending=False)","b1a17b67":"hist = X.hist(figsize=(40, 30))","b94bb6be":"# fetal_movement > .15,\n# severe_decelerations > .0.0001\n# mean_value_of_short_term_variabilty > 4.5\n# percentage_of_time_with_abnormal_long_term_variablity > 70\n# mean_value_of_long_term_variablity > 30\n# histogram_max > 210\n# histogram_number_of_zeroes > 4.2\n# histogram_mode < 95\n# histogram_variance > 160","551b492b":"# len(list(X.loc[X['fetal_movement'] > .15, 'fetal_movement'].index))\nX.loc[X['fetal_movement'] > .15, 'fetal_movement'] = X.loc[:, 'fetal_movement'].mean()","b952c131":"# len(list(X.loc[X['mean_value_of_short_term_variability'] > 4.1, 'mean_value_of_short_term_variability'].index))\nX.loc[X['mean_value_of_short_term_variability'] > 4.1, 'mean_value_of_short_term_variability'] = X.loc[:, 'mean_value_of_short_term_variability'].mean()","161e9dd9":"# len(list(X.loc[X['percentage_of_time_with_abnormal_long_term_variability'] > 72, 'percentage_of_time_with_abnormal_long_term_variability'].index))\nX.loc[X['percentage_of_time_with_abnormal_long_term_variability'] > 72, 'percentage_of_time_with_abnormal_long_term_variability'] = X.loc[:, 'percentage_of_time_with_abnormal_long_term_variability'].mean()","eacac21f":"# len(list(X.loc[X['mean_value_of_long_term_variability'] > 25.5, 'mean_value_of_long_term_variability'].index))\nX.loc[X['mean_value_of_long_term_variability'] > 25.5, 'mean_value_of_long_term_variability'] = X.loc[:, 'mean_value_of_long_term_variability'].mean()","a7277648":"# len(list(X.loc[X['histogram_max'] > 200, 'histogram_max'].index))\nX.loc[X['histogram_max'] > 200, 'histogram_max'] = X.loc[:, 'histogram_max'].mean()","aa236748":"# len(list(X.loc[X['histogram_number_of_zeroes'] > 2, 'histogram_number_of_zeroes'].index))\nX.loc[X['histogram_number_of_zeroes'] > 2, 'histogram_number_of_zeroes'] = X.loc[:, 'histogram_number_of_zeroes'].mean()","1146f594":"# len(list(X.loc[X['histogram_mode'] < 88, 'histogram_mode'].index))\nX.loc[X['histogram_mode'] < 88, 'histogram_mode'] = X.loc[:, 'histogram_mode'].mean()","f42cc6ed":"# len(list(X.loc[X['histogram_variance'] > 118, 'histogram_variance'].index))\nX.loc[X['histogram_variance'] > 118, 'histogram_variance'] = X.loc[:, 'histogram_variance'].mean()","416c2646":"info = pd.concat([X, y], axis=1).corr()[y.columns[0]].drop(y.columns[0]).sort_values(ascending=False)\nupper_columns = list(info[:9].index)\nlower_columns = list(info[10:].index)\n\ncolumns = list(X.columns)\nfrom sklearn.preprocessing import MinMaxScaler\nX = pd.DataFrame(MinMaxScaler(feature_range=(1, 3)).fit_transform(X), columns=columns) # to avoid x\/0 or something nearly returns inf values\n\nnew_arrays = np.zeros([X.shape[0], 1])\nfor i in upper_columns:\n    new_arrays = np.concatenate([new_arrays, (X[i] ** 2).values.reshape(-1, 1)], axis=1)\nfor i in upper_columns:\n    new_arrays = np.concatenate([new_arrays, (X[i] ** 2).values.reshape(-1, 1)], axis=1)\n\nfor i in upper_columns:\n    for j in lower_columns:\n        new_arrays = np.concatenate([new_arrays, (X[i] \/ X[j]).values.reshape(-1, 1)], axis=1)\n        new_arrays = np.concatenate([new_arrays, (X[j] \/ X[i]).values.reshape(-1, 1)], axis=1)\nfor i in upper_columns:\n    for j in upper_columns:\n        if i != j:\n            new_arrays = np.concatenate([new_arrays, (X[i] * X[j]).values.reshape(-1, 1)], axis=1)\nfor i in lower_columns:\n    for j in lower_columns:\n        if i != j:\n            new_arrays = np.concatenate([new_arrays, (X[i] * X[j]).values.reshape(-1, 1)], axis=1)\nX = pd.concat([pd.DataFrame(X), pd.DataFrame(new_arrays[:, 1:])], axis=1)","fef7fd47":"from sklearn.decomposition import KernelPCA\nkpca = KernelPCA(kernel='rbf', n_components=round(X.shape[1]\/6))\nkpca.fit(X)\n# X = kpca.transform(X) # if model overfits\nX = np.concatenate([X, kpca.transform(X)], axis=1) # else","74edda50":"from imblearn.over_sampling import SMOTE\nsmote = SMOTE(random_state=33)\nX_smote, y_smote = smote.fit_resample(X, y)","24b4af1f":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_smote = scaler.fit_transform(X_smote)","195468c0":"from sklearn.model_selection import train_test_split\nXsmtrain, Xsmvalid, ysmtrain, ysmvalid = train_test_split(X_smote, y_smote, test_size=.1, random_state=333)","e4c8e055":"from sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import cross_val_score","814c50fa":"from catboost import CatBoostClassifier as cbc\nmodel = cbc(n_estimators=2500, verbose=0)\nmodel.fit(Xsmtrain, ysmtrain.values.ravel())\nysmpred = model.predict(Xsmvalid)\naccuracy_score(ysmvalid, ysmpred), confusion_matrix(ysmvalid, ysmpred)","dc82b5e4":"---","e68e9421":"---","fdbc2b6a":"---","4e40f4cc":"---"}}