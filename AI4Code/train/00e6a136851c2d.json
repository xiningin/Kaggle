{"cell_type":{"1b6ed69a":"code","5fdf4270":"code","d48077f8":"code","1127af9e":"code","cc73979b":"code","fc3a640f":"code","2ad5b0ca":"code","88166e84":"code","0a788794":"code","c07b8703":"code","d7821958":"code","36f18398":"code","4ae44617":"markdown","e22930c0":"markdown","4377eeb9":"markdown","afe0c9db":"markdown","1b7c4484":"markdown","7a022505":"markdown","e3dd2abb":"markdown","4b75c1e8":"markdown","da1760fe":"markdown"},"source":{"1b6ed69a":"import pandas as pd\nimport numpy as np\n\n# Loading dataset\ndataset = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx')","5fdf4270":"dataset = dataset.dropna(axis=0, thresh=50)\ndataset = dataset.dropna(axis=1, thresh=160)\n\nX = dataset.iloc[:, 1:42]\nX = X.drop(X.columns[1], axis =1)\ny = dataset.iloc[:, 2]","d48077f8":"from sklearn.preprocessing import LabelEncoder\nlabelencoder_y = LabelEncoder()\ny = labelencoder_y.fit_transform(y)","1127af9e":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values = np.nan, strategy = \"median\")\nimputer = imputer.fit(X.iloc[:, 4:17])\nX.iloc[:, 4:17] = imputer.transform(X.iloc[:, 4:17])\nimputer = imputer.fit(X.iloc[:, 35:])\nX.iloc[:, 35:] = imputer.transform(X.iloc[:, 35:])\ndetection = X.iloc[:, 18:35]","cc73979b":"negDetectedneg, negDetectedpos, posDetectedneg, posDetectedpos = 0, 0, 0, 0\nfor line in range(191):\n    initial_row = 18\n    for row in range(17):\n        if X.iloc[line,(initial_row + row)] == 'not_detected':\n            if y[line] == 0:\n                negDetectedneg = negDetectedneg + 1\n            else:\n                negDetectedpos = negDetectedpos + 1\n        elif X.iloc[line,(initial_row + row)] == 'detected':\n            if y[line] == 0:\n                posDetectedneg = posDetectedneg + 1\n            else:\n                posDetectedpos = posDetectedpos + 1\n\nprint('Negative covid marked as \"not_detected\": ', negDetectedneg)\nprint('Positive covid marked as \"not_detected\": ', negDetectedpos)\nprint('Negative covid marked as \"detected\": ', posDetectedneg)\nprint('Positive covid marked as \"detected\": ', posDetectedpos)","fc3a640f":"import math\nfor col in range(17):\n    for line in range(191):\n        if type(detection.iloc[line,col]) == float:\n            if math.isnan(detection.iloc[line,col]):\n                detection.iloc[line,col] = 'not_detected'\n\nfor col in range(17):\n    X.iloc[:, (18 + col)] = detection.iloc[:, col]","2ad5b0ca":"for col in range(17):\n    labelencoder_X = LabelEncoder()\n    X.iloc[:, (18 + col)] = labelencoder_X.fit_transform(X.iloc[:, (18 + col)])","88166e84":"# Dividindo o dataset em conjunto de treino e conjunto de teste\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Inicializando a rede neural\nclassifier = Sequential()\n\n# Adicionando a camada de entrada e a primeira camada escondida\nclassifier.add(Dense(units = 20, kernel_initializer = 'uniform', activation = 'relu', input_dim = 40))\n\n# Adicionando a segunda camada escondida\nclassifier.add(Dense(units = 20, kernel_initializer = 'uniform', activation = 'relu'))\n\n# Adicionando a camada de sa\u00edda\nclassifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n\n# Compilando a rede neural\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n# Encaixando a rede neural no conjunto de treino\nclassifier.fit(X_train, y_train, batch_size = 10, epochs = 200)","0a788794":"# Predizendo os resultados do conjunto de teste\ny_pred = classifier.predict(X_test)\ny_pred = (y_pred > 0.5)","c07b8703":"from sklearn.metrics import accuracy_score\nprint('Acur\u00e1cia: %.2f%%' % (accuracy_score(y_test, y_pred)*100))","d7821958":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint('\\nMatriz de Confus\u00e3o\\n\\n',cm)","36f18398":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","4ae44617":"Since I'm more familiar with artificial neural networks, my first attempt was to model one tweaking with the configurations until finding the best results.","e22930c0":"Fitting the prediction of the test set in the model:","4377eeb9":"Formatting remaining categorical data:","afe0c9db":"## Accuracy","1b7c4484":"As I mentioned, there were some values missing, so I filled in with the median values for each column, although I was aware it could produce distortions in the predicted values, but since no more than 20% of the values were missing I decided to take the chance. Other attempts were made, like separating positive and negative diagnostics and using their median values, but no improvement was accomplished in them.","7a022505":"## Classification Report","e3dd2abb":"There were many columns with missing values that consisted of 'detected' or 'not_detected'. Analysing them, I found most exams were marked as \"not_detected\", no matter whether the covid-19 diagnostic was positive or not, so I made it the default value.","4b75c1e8":"## Confusion Matrix","da1760fe":"The dataset contained 5644 lines and 111 columns, but when exploring I realized most of the data was missing. So through experimentation, I found the optimal number of 191 lines and 42 columns, with most of the values filled in (although some values were still missing)."}}