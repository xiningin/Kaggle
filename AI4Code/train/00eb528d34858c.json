{"cell_type":{"36e8b378":"code","7931adba":"code","16832dd9":"code","f47130e9":"code","1abd77a9":"markdown","573c5c18":"markdown","cc350952":"markdown"},"source":{"36e8b378":"# Create a word cloud from the docket item metadata.\n\n# Connect to the database and open a cursor\nimport sqlite3\ncon = sqlite3.connect('..\/input\/ohio-supreme-court-dockets\/oh_sp_ct_dockets.sqlite')\ncursor = con.cursor()\n\n# Get a concatenation of all of the text from every docket item's description, type, and filing_parties\ncursor.execute(\"SELECT GROUP_CONCAT(description || ' ' || type || ' ' || filing_parties,' ') FROM docket_item LIMIT 10000;\")\ndocket_words = cursor.fetchone()[0]\n\n# Create a corresponding word cloud\nfrom wordcloud import WordCloud, STOPWORDS # See documentation at https:\/\/amueller.github.io\/word_cloud\/index.html\nwordcloud = WordCloud(width=1024,height=576,background_color='white',collocations=False)\ndocket_words_frequencies = wordcloud.process_text(docket_words)\nword_cloud = wordcloud.generate_from_frequencies(docket_words_frequencies)\n\n# Plot\/display the word cloud\nimport matplotlib.pyplot as plt\nplt.figure(figsize=[16, 9])\nplt.imshow(word_cloud)\nplt.axis(\"off\")\nplt.show()","7931adba":"# Organize the words and their frequencies into a sorted array\ndocket_words_frequencies_array = []\nfor item in docket_words_frequencies:\n   docket_words_frequencies_array.append( {'word':item,'count':docket_words_frequencies[item]} )\ndocket_words_frequencies_array.sort(key=lambda x: x['count'], reverse=True)\n# Print the frequencies\nitem_number = 0\nfor item in docket_words_frequencies_array:\n    item_number = item_number + 1\n    if item_number > 200:\n        break\n    print( item['word'].ljust(20),' ' + '{: > 10,d}'.format(item['count']) )\n","16832dd9":"%%html\n<!-- set up style css for the table that the following section will create -->\n<style> \ntable td, table th, table tr {text-align:left !important;}\ntd:nth-child(1) {text-align:right !important;}\n<\/style>","f47130e9":"# Connect to the database\nimport sqlite3\ncon = sqlite3.connect('..\/input\/ohio-supreme-court-dockets\/oh_sp_ct_dockets.sqlite')\n\n# Select, group, and count the docket item metadata descriptions\nimport pandas as pd\ndf = pd.read_sql_query(\"SELECT COUNT(*) AS Frequency, description AS Description FROM docket_item GROUP BY description HAVING COUNT(*) > 10 ORDER BY COUNT(*) DESC;\", con)\n\n# Replace text that is preventing group-by from doing as much as we want it to\ndf.replace(regex=[\n        '\\r',\n        '\\n',\n        r'\\d\\d\/\\d\\d\/\\d\\d',\n        r'<a href=.*?<\/a>',\n        r'\\$\\d*?\\.\\d\\d'\n    ],value=[\n        '',\n        '\u00b6',\n        'mm\/dd\/yy',\n        '<URL>',\n        '$x.xx'\n    ],inplace=True\n)\n\n# Regroup the descriptions now that those replacements have been done\ndf = df.groupby(\n    by='Description', \n    as_index=False,\n    sort=False\n)\n\n# Reaggregate the frequencies\nimport numpy as np\ndf = df.aggregate({\"Frequency\": np.sum})\n\n# Resort now that the new groupings are done\ndf.sort_values('Frequency',ascending=False,inplace=True)\n\n# Change the column order; put Frequency first to make reading the output table easier\ndf = df[['Frequency','Description']]\n\n# Display the results in an HTML table\nfrom IPython.display import display, HTML\ndisplay(HTML(df.to_html(\n    index=False,\n    formatters={'Frequency':'{: > 10,d}'.format}\n)))\n","1abd77a9":"## Common Phrases\n\nThe following section contains the most frequent docket descriptions with the following replacements:\n\n* Dates with the format mm\/dd\/yy have been replaced with the *'mm\/dd\/yy'*\n* URLs and their surrouding angle brackets have been replaced with *'&lt;URL&gt;'*. \n* Dollar and cent amounts have been replaced with *'$x.xx'*.","573c5c18":"The two sections below are based on docket item metadata held by the [clerk](https:\/\/www.supremecourt.ohio.gov\/Clerk) of the [Supreme Court of Ohio](https:\/\/www.supremecourt.ohio.gov).  To see the clerk's copy of this metadata, go to the clerk's [online docket search](https:\/\/www.supremecourt.ohio.gov\/Clerk\/ecms\/?#\/search).\n\nThe first section contains a **word cloud** based on singular words in that metadata.  It is followed by a list of those words and then a list of **common phrases** in that same metadata.\n\n## Word Cloud\n\n* The 200 most frequent words in the docket item metadata are displayed in the following word cloud.\n* After the word cloud, there is a list of those 200 words sorted by frequency.\n* 'Appellant' and 'Appellee' are more common than other terms for parties, such as Relator and Respondent.\n* Every docket item has a type:  Either 'DOCKET' or 'DECISION'.  That is why those two words appear so frequently.\n\n","cc350952":"The 200 words in the word cloud are in the following list, ordered by the frequency in descending order."}}