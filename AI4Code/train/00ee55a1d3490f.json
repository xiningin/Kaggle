{"cell_type":{"c7d4db57":"code","79df6453":"code","9f7d5421":"code","6a663000":"code","14b73bdf":"code","c27898c7":"code","7ecfddee":"code","0c247e75":"code","a1e66abe":"code","4cd7b884":"code","a2bd12cf":"code","2db69d13":"code","da3a2a8e":"code","0b670aa6":"code","324a7acd":"code","9f99743f":"code","5fc83f79":"code","f19c461d":"code","c0c2b21a":"code","b18b5a21":"code","a9437a89":"code","76bea9f1":"code","02f4dee8":"code","b7d26e0b":"code","f6e071b2":"code","808bd65a":"code","487107da":"markdown","60b88abb":"markdown","adc00989":"markdown","de0145f1":"markdown","ac9f1525":"markdown","33ce7d1f":"markdown","f994ed4f":"markdown","5aa0786c":"markdown","53390ca4":"markdown","7e6966cd":"markdown","22ffed01":"markdown","b25e5b66":"markdown","4079d8b2":"markdown","ad9b8d7f":"markdown","a6a04522":"markdown","4a4ca887":"markdown","911bc9e0":"markdown","fbb99433":"markdown","5cd7ca34":"markdown","37995356":"markdown","c287aca3":"markdown","15116cfd":"markdown","55b949c0":"markdown","7f2ea34b":"markdown","bc5a9841":"markdown","eb58e481":"markdown","9b6e02e6":"markdown","0a536d81":"markdown","d21beda7":"markdown","c3251b68":"markdown","aff6ae3b":"markdown","1b41cc68":"markdown","264a1962":"markdown","6131e0a7":"markdown","7fff157c":"markdown","3c796741":"markdown","a44851aa":"markdown","34c85edd":"markdown","71e78162":"markdown","46f93f5f":"markdown","0efb2a0d":"markdown","ad0122f7":"markdown","d733faf3":"markdown","e007526d":"markdown","6c473a59":"markdown","4d9c880e":"markdown","f738c5c6":"markdown","c102bc7a":"markdown","23ec6327":"markdown","38d659ca":"markdown","2ee6ed4d":"markdown","4b1abdfc":"markdown","996b1f3c":"markdown","9f3f5a29":"markdown","b2d60fed":"markdown"},"source":{"c7d4db57":"import matplotlib.pyplot as plt\nimport numpy as np","79df6453":"\nx = np.array([1,2,3,4,5,6])\ny1 = np.power(x,2)\ny2 = np.power(x,3)\n\nplt.style.use(\"grayscale\")\n\nplt.figure(figsize=(7,5))\n\nplt.plot(x,y1,\"b-x\", label = '$y1 = x^2$') #'b' stands for blue colour and '-' is used for line type and 'x' is used for marker\nplt.plot(x,y2,\"r-\", label = '$y2 = x^3$', lw = 3) #lw stands for linewidth. We can also write linewidth=\n\nplt.xlabel(\"X Axis\")\nplt.ylabel(\"Y Axis\")\n\nplt.legend(fontsize = 14, bbox_to_anchor = (1,1)) #adding legend options. bbox_to_anchor option anchors the legend outside the axes\n\nplt.tight_layout()\nplt.show()","9f7d5421":"x1 = [1,2,3,4]\ny1 = [5,7,9,6]\n\nplt.figure(figsize=(8,6))\n\nplt.gcf().set_facecolor(\"pink\")\nplt.bar(x1,y1, label = 'First', color = '#42B300')\n\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.title(\"Bar Chart\")\n\nplt.legend()\nplt.show()","6a663000":"x1 = [1,2,3,4]\ny1 = [5,7,9,6]\nerror = [1,2,2,1]\n\nplt.figure(figsize=(8,6))\n\nplt.gcf().set_facecolor(\"pink\")\nplt.barh(x1,y1, label = 'First', xerr = error, color = 'blue') \n\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.title(\"Bar Chart\")\n\nplt.legend()\nplt.show()","14b73bdf":"x1 = [1,3,5,7]\nx2 = [2,4,6,8]\ny1 = [7,8,5,10]\ny2 = [17,18,29,40]\n\nplt.figure(figsize=(8,6))\n\nplt.bar(x1,y1, label = 'First', color = '#42B315')\nplt.bar(x2,y2, label = 'Second', color = '#94E413')\n\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.title(\"Bar Chart\")\n\nplt.legend()\nplt.show()","c27898c7":"num1 = np.arange(1,10,2)\nnum2 = np.arange(2,11,2)\n\nplt.figure(figsize = (10,6))\n\nplt.bar(num1, num1**2, width = 0.3, color = '#FF6F00')\nplt.bar(num2, num2**2, width = 0.3, color = '#FFB300')\n\nfor x,y in zip(num1,num1**2):\n  plt.text(x, y+0.05, '%d'%y, ha='center', va = 'bottom')\n\nfor x,y in zip(num2,num2**2):\n  plt.text(x,y+0.5, '%d'%y, ha = 'center', va = 'bottom')\n\nplt.show()","7ecfddee":"plt.figure(figsize=(10,7))\nplt.style.use(\"default\")\n\nbarWidth = 0.25\n\ny1 = np.array([17,18,29,40])\ny2 = np.array([20,21,22,23])\ny3 = np.array([5,9,11,12])\n\npos1 = np.arange(len(y1))\npos2 = [x + barWidth for x in pos1]\npos3 = [x + barWidth for x in pos2]\n\nplt.bar(pos1, y1, color = '#E0BBE4', width=barWidth, label = 'Open Tickets', edgecolor = 'black')\nplt.bar(pos2, y2, color = '#FEC8D8', width=barWidth, label = 'Closed Tickets', edgecolor = 'black')\nplt.bar(pos3, y3, color = '#9EE09E', width=barWidth, label = 'Cancelled Tickets', edgecolor = 'black')\n\nplt.xticks([i+barWidth for i in range(len(y1))],['Amit', 'Sumit', 'Jimit', 'Vinit']) # used for x ticks where the name appears below the middle bar\n\nfor x,y in zip(pos1, y1):\n  plt.text(x,y+0.5, '%d' %y, ha = 'center', va = 'bottom')\n\nfor x,y in zip(pos2, y2):\n  plt.text(x,y+0.5, '%d' %y, ha = 'center', va = 'bottom')\n\nfor x,y in zip(pos3, y3):\n  plt.text(x,y+0.5, '%d' %y, ha = 'center', va = 'bottom')\n\nplt.gca().set(title = 'Bar Chart', ylabel = 'Frequency')  # gca() is used to getting axes and performing functions on axes instead of object declaration.\n\nplt.legend(loc = 'upper left')\n\n\nplt.show()","0c247e75":"x1 = ['Amit','Sumit','Jimit','Vinit']\ny1 = np.array([17,18,29,40])\ny2 = np.array([20,21,22,23])\ny3 = np.array([5,9,11,12])\n\n\nbarWidth = 0.25\n\nplt.figure(figsize=(7,7))\nplt.style.use(\"default\")\n\nplt.bar(x1,y1,label = 'Open Tickets', width = 0.5, color = '#CC99C9', edgecolor = 'black')\nplt.bar(x1,y2,label = 'Closed Tickets', bottom =  y1, width = 0.5, color = '#9EC1CF', edgecolor = 'black') #use bottom for stacking the bar on top of previous bar\nplt.bar(x1,y3,label = 'Cancelled Tickets', bottom = y1+y2, width = 0.5, color = '#9EE09E', edgecolor = 'black')\n\n#plt.text is used to plot the text in the figure at the specific location\nfor x,y in zip(x1,y1):\n  plt.text(x,(y\/2), '%d'%y, ha = 'center', va = 'bottom')\nfor x,y,z in zip(x1,y2,y1):\n  plt.text(x,(y\/2)+z, '%d'%y, ha = 'center', va = 'bottom')\nfor x,y,z,a in zip(x1,y3,y2,y1):\n  plt.text(x,(y\/2)+z+a-1, '%d'%y, ha = 'center', va = 'bottom')\n\n\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Bar & Chart')\n\nplt.legend()\nplt.show()","a1e66abe":"plt.figure(figsize=(7,5))\nplt.style.use('default')\n\narea = [48, 30, 20, 15]\n\nlabels = ['Low', 'Medium','High','Critical']\ncolors = ['#DC828F', '#F7CE76','#E8D6CF','#8C7386']\n\nplt.pie(area, labels = labels, colors = colors)\n\nplt.show()","4cd7b884":"plt.figure(figsize=(7,5))\nplt.style.use('bmh')\n\narea = [48, 30, 20, 15]\n\nlabels = ['Low', 'Medium','High','Critical']\ncolors = ['#DC828F', '#F7CE76','#E8D6CF','#8C7386']\n\n#Here 0.1 means 10 percent. ie the third piece will move out 10 percent\nexplode = [0,0,0.1,0]\n\nplt.pie(area, labels = labels, colors = colors, explode = explode)\nplt.tight_layout()\n\nplt.show()","a2bd12cf":"plt.figure(figsize=(7,5))\nplt.style.use('bmh')\n\nlabels = ['India', 'Canada', 'Japan', 'Australia', 'Russia']\nsizes = [31, 19, 15, 14, 21]  # Add upto 100%\ncolors = ['#DC828F', '#F7CE76','#E8D6CF','#8C7386', 'Red']\n\n#autopct option is used to show the percentage share of each portion\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, colors=colors,\n        wedgeprops={\"edgecolor\":\"black\",'linewidth': 1, 'linestyle': 'solid'})\n \n# Equal aspect ratio ensures that pie is drawn at the center of the figure.\nplt.axis('equal')\nplt.tight_layout() \nplt.show()","2db69d13":"plt.figure(figsize=(7,5))\nx = np.random.normal(size = 2000) # Generates 2000 standard normal random numbers\nplt.hist(x, bins = 40, color = 'yellowgreen', edgecolor = 'black')\nplt.gca().set(title = 'Histogram', ylabel = 'Frequency')\n\nplt.show()","da3a2a8e":"id = np.arange(1,101)\nage = np.random.normal(1,100,100)\nbins = [0,20,40,60,80,100]\n\nplt.hist(age, bins = bins, edgecolor = 'black')\n\nplt.title('Age distribution')\nplt.xlabel('Ages')\n\nplt.tight_layout()\n\nplt.show()\n","0b670aa6":"age = np.random.randint(1,99,10000)\nage = np.append(age,[110,111])\nbins = [0,20,40,60,80,100,120]\n\nplt.hist(age, bins = bins, edgecolor = 'black')\n\nplt.title('Age distribution')\nplt.xlabel('Ages')\n\nplt.tight_layout()\n\nplt.show()","324a7acd":"age = np.random.randint(1,99,10000)\nage = np.append(age,[110,111])\nbins = [0,20,40,60,80,100,120]\n\nplt.hist(age, bins = bins, edgecolor = 'black', log = True)\n\nplt.title('Age distribution')\nplt.xlabel('Ages')\n\nplt.tight_layout()\n\nplt.show()","9f99743f":"x = np.random.randint(1,10,10)\ny = np.random.randint(1,10,10)\n\nplt.figure(figsize = (7,5))\nplt.style.use(\"fivethirtyeight\") #adding style. Check various styles on matplotlib page\n\nplt.scatter(x,y)\n\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.title(\"Scatter plot\")\n\nplt.tight_layout()\nplt.show()","5fc83f79":"x = np.random.randint(1,10,10)\ny = np.random.randint(1,10,10)\nsize = np.random.randint(100,300,10)\ncolor = np.random.randint(1,10,10)\n\nplt.figure(figsize = (7,5))\nplt.style.use(\"default\")\nplt.gcf().set_facecolor(\"white\")\n\nplt.scatter(x,y,s = size,c = color, edgecolor = 'black', alpha = 0.75) #adding size, color, edgecolor, alpha\n\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.title(\"Scatter plot\")\n\nplt.tight_layout()\nplt.show()","f19c461d":"x = np.random.randint(1,10,10)\ny = np.random.randint(1,10,10)\nsize = np.random.randint(100,300,10)\ncolor = np.random.randint(1,10,10)\n\nplt.figure(figsize = (7,5))\nplt.style.use(\"default\")\n\nplt.scatter(x,y,s = size, c = color, cmap = 'RdYlBu' ) #adding cmap and color bar. cmap works with color parameter\n\ncbar = plt.colorbar()\ncbar.set_label(\"Satisfaction\")\n\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.title(\"Scatter plot\")\n\nplt.tight_layout()\nplt.show()","c0c2b21a":"x = np.arange(1,31)\ny = np.random.randint(2,11,size = 30)\n\nplt.figure(figsize = (7,5))\n\nplt.fill_between(x,y,color = '#E2BEF1')\nplt.plot(x,y, color = 'black')\n\nplt.title('Area Chart', fontsize = 16)\n\nplt.show()","b18b5a21":"x=np.arange(1,6)\ny=[[1,5,6,8,9], [2,3,7,10,12], [2,8,5,11,6]]\n \nplt.stackplot(x,y, labels=['A','B','C'])\nplt.legend(loc='upper left')\nplt.show()","a9437a89":"x=range(1,6)\ny1=[1,3,6,7,9]\ny2=[2,2,7,10,12]\ny3=[2,8,5,10,6]\n \nplt.stackplot(x,y1, y2, y3, labels=['A','B','C'])\nplt.legend(loc='upper left')\nplt.show()","76bea9f1":"from datetime import datetime, timedelta\nfrom matplotlib import dates as mpl_dates\n\ndates = [\n         datetime(2021,5,21),\n         datetime(2021,5,22),\n         datetime(2021,5,23),\n         datetime(2021,5,24),\n         datetime(2021,5,25),\n         datetime(2021,5,26),\n         datetime(2021,5,27)\n]\n\ny = np.random.randint(1,10,7)\n\nplt.plot_date(dates,y, ls = 'solid')\n\nplt.gcf().autofmt_xdate() # autofmt_dates auto formats the alignment of dates by rotating the dates to a certain angle.\ndate_format = mpl_dates.DateFormatter('%b, %d %Y') # changin date format\n\nplt.gca().xaxis.set_major_formatter(date_format) #using gca function to get axis object functionalities\n\nplt.tight_layout()\nplt.show()","02f4dee8":"A = list(range(1,11))\nB = np.power(A,2)\nC = np.power(A,3)\n\nx = np.arange(1,11)\n\nfig = plt.figure() # create a figure object\n\nax = fig.add_subplot() # adds axes to the figure. \n\nax.plot(x,A, label = 'A')\nax.plot(x,B, label = 'B')\nax.plot(x,C, label = 'C')\n\n#instead of using title, xlabel, and ylabel functions, with axes, we us set_title, set_xlabel, and set_ylabel functions.\nax.set_title(\"Subplotting\")\nax.set_xlabel(\"X\")\nax.set_ylabel(\"A\/B\/C\")\n\nax.legend()\n\nplt.tight_layout()\n\nplt.show()","b7d26e0b":"A = list(range(1,11))\nB = np.power(A,2)\nC = np.power(A,3)\n\nx = np.arange(1,11)\n\nfig,(ax1,ax2) = plt.subplots(2,1) # this function directly creates axes and attaches them to fig object\n\nax1.plot(x,A, label = 'A')\nax1.plot(x,B, label = 'B')\nax2.plot(x,C, label = 'C')\n\nax1.set_title(\"Subplotting 1\")\nax1.set_xlabel(\"X\")\nax1.set_ylabel(\"A\/B\")\n\nax2.set_title(\"Subplotting 2\")\nax2.set_xlabel(\"X\")\nax2.set_ylabel(\"C\")\n\nax1.legend()\nax2.legend()\n\nplt.tight_layout()\n\nplt.show()","f6e071b2":"A = list(range(1,11))\nB = np.power(A,2)\nC = np.power(A,3)\n\nx = np.arange(1,11)\n\nfig,(ax1,ax2) = plt.subplots(2,1, sharex = True) # sharex option helps us in sharing the x ticks \n\nax1.plot(x,A, label = 'A')\nax1.plot(x,B, label = 'B')\nax2.plot(x,C, label = 'C')\n\nax1.set_title(\"Subplotting 1\")\nax1.set_ylabel(\"A\/B\")\n\nax2.set_xlabel(\"X\")\nax2.set_ylabel(\"C\")\n\nax1.legend()\nax2.legend()\n\nplt.tight_layout()\n\nplt.show()","808bd65a":"A = list(range(1,11))\nB = np.power(A,2)\nC = np.power(A,3)\n\nx = np.arange(1,11)\n\nfig1,ax1 = plt.subplots()\nfig2,ax2 = plt.subplots()\n\nax1.plot(x,A, label = 'A')\nax1.plot(x,B, label = 'B')\nax2.plot(x,C, label = 'C')\n\n#instead of using title, xlabel, and ylabel functions, with axes, we us set_title, set_xlabel, and set_ylabel functions.\nax1.set_title(\"Subplotting 1\")\nax1.set_ylabel(\"A\/B\")\n\nax2.set_xlabel(\"X\")\nax2.set_ylabel(\"C\")\n\nax1.legend()\nax2.legend()\n\nplt.tight_layout()\n\nplt.show()","487107da":"__We can define our own bins as well__","60b88abb":"### ","adc00989":"### 5. Scatter Plots","de0145f1":"__Topics covered__<br>\n1. Line Chart\n2. Bar Plot\n3. Pie Chart\n4. Histograms\n5. Scatter Plots\n6. Area Plot\n7. Time Series Plot\n8. Subplotting","ac9f1525":"__Simple Scatter Plot__","33ce7d1f":"__Stacked area chart using 3 different lists for y axis__","f994ed4f":"### ","5aa0786c":"__Multiple axes by adding more axes. By default it is (1,1)__","53390ca4":"### 3. Pie Chart ","7e6966cd":"__Simple bar chart__","22ffed01":"- Area charts are used to show how values develop over time.\n- Stacked area charts can be used to show multiple series with part-to-whole ratio\/share\n- There are 2 ways to build an area chart - using fill_between() function and using stackplot() function","b25e5b66":"__Plotting multiple figures removing x labels, adjusting x_ticks only for bottom plot.__","4079d8b2":"### 7. Time series plot\n","ad9b8d7f":"#### When the lables are too long to appear clearly on x-axis, then Horizontal bar graph is the best way to present that data.","a6a04522":"__Plotting Line chart__","4a4ca887":"*__I'd be grateful for any comments or suggestions you might have. I'd request some feedback.<br>Please let me know if you'd like to propose any changes.<br>\nThankyou.__*","911bc9e0":"## 1. Line Chart","fbb99433":"__Displaying values at the top of vertical bars__","5cd7ca34":"### ","37995356":"- Bar graphs are used to compare things between different groups or to track changes over time. However, when trying to measure change over time, bar graphs are best when the changes are larger.\n- A good practice is to always sort the bar graphs","c287aca3":"__Move portion of the pie out__","15116cfd":"### ","55b949c0":"### 8. Subplots","7f2ea34b":"# Matplotlib basics for data analysis","bc5a9841":"__Data with outliers plotted where the last bin data is negligible__","eb58e481":"### ","9b6e02e6":"### ","0a536d81":"### ","d21beda7":"### 6. Area Plot ","c3251b68":"__Three bars with text on top of them__","aff6ae3b":"- Histograms are used to plot quantitative data with ranges. The data is grouped into bins or intervals.\n- The are different from bar charts. Bar charts are used to plot categorical data.","1b41cc68":"- A line plot is a graph that shows data along a number line. \n- It is best to use a line plot when comparing small changes in data. It is a quick, simple way to organize and represent your data.","264a1962":"### ","6131e0a7":"__- If data has some outliers and if we plot the histogram, the bin may not be visible sometimes.<br> We can overcome the situation using logarithmic scales__","7fff157c":"__Simple Time series plot__","3c796741":"__Plotting two different figures (two windows)__","a44851aa":"__Now plotting the data using logarithmic scales with log = True Option__","34c85edd":"__Portions of the pie are called wedges.<br>\nPie chart using wedgeprops option__","71e78162":"- A pie chart is used when we want to present the part-to-whole ratio in the data\n- It is generally used to represent the categorical data. But too many categories can clutter the chart and can make it difficult to read. Do not use pie chart if you have more than 5 categories or sections. Use stacked bar plots in that case.\n- Try to place the largest slice at the top (12 o clock) moving clockwise\n- Avoid comparing one pie chart with another\n- Avoid using 3-D pie charts","46f93f5f":"Plotting time seried data is lot like line plot. But here we are using dates. And can perform various date functions like chanding the date format, etc","0efb2a0d":"### 2. Bar Plot","ad0122f7":"__Stacked area chart using a 2 dimensional (3X5) array__","d733faf3":"__Adding cmap and color bar options__","e007526d":"- So far we have been using an object of pyplot module as plt and its functions and attributes. But we did not create any object. We can use more object oriented functionalities and create an object using plt.figure and plt.subplots methods. \n- Subplots gives us much more flexibility and using subplot objects, we can do all things that we did using pyplot object.\n","6c473a59":"__Simple pie chart__","4d9c880e":"__Stacked bars and text inside them__","f738c5c6":"__Horizontal bars using barh function__","c102bc7a":"__Simple Area chart__","23ec6327":"### ","38d659ca":"__Plotting two bars side by side using x1 and x2 consecutively__\n","2ee6ed4d":"- Scatter plot is used when you have two variables that pair well together. \n- Scatter diagram is used to show their relationship between the two variables and see if the variables are correlated or not. If yes, then positively correlated or negatively correlated.","4b1abdfc":"### 4. Histograms ","996b1f3c":"__Adding other options of scatter plot__\n","9f3f5a29":"__Simple histogram figure using 40 number of bins__","b2d60fed":"*__Please understand figure is container holding all our plots (like a window) and the axes are the plots. While working with multiple figures and axes, we have to use the subplots method__*"}}