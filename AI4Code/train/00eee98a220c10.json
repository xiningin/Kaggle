{"cell_type":{"dc6128f9":"code","916b54f4":"code","463de314":"code","e7b7a595":"code","06acce87":"code","a4a74f3a":"code","714b5524":"code","fc1b9c3e":"code","2d22be7e":"code","49153c64":"code","12457e73":"code","0a1f2a4f":"code","525ed9f1":"code","c0637cb0":"code","29810bbb":"code","174e13c8":"code","1e98a6df":"code","2b9a1f25":"code","c2d3f707":"code","0fa36b59":"code","dd87fec8":"code","d6b106a1":"code","92eb4f93":"code","6b7f4efd":"code","4d19468e":"code","5c44cbef":"code","03c52968":"code","ebb0eb82":"code","7077bec6":"code","7376c17e":"code","fc317fc9":"code","9706bf35":"code","3f40166c":"code","b47f3889":"code","56f776ee":"code","7b5ad81b":"code","644cadec":"code","3d7c72cc":"markdown"},"source":{"dc6128f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","916b54f4":"# dataset import\n\ndf = pd.read_csv('..\/input\/covid19-data-set-of-turkey\/tr-covid19.csv')\ndf.head()","463de314":"df.drop('Unnamed: 0',axis=1,inplace=True)","e7b7a595":"# dataset backup\ndf_copy = df.copy()\ndf_copy.head()","06acce87":"df.rename(columns={\"Total number of test\":\"totaltest\",\n                   \"Total number of causes\": \"totalcauses\",\n                   \"Total number of deaths\":\"totaldeaths\",\n                   \"Number of critically ill patients\":\"totalcritically\",\n                   \"Total Number of recoveries\":\"totalrecoveries\",\n                   \"number of cases\":\"dailycases\",\n                   \"number of test\":\"dailytest\",\n                   \"number of deaths\":\"dailydeaths\",\n                   \"Number of recoveries\":\"dailyrecoveries\",\n                   \"Date\": 'date',\n                   \"number of sick\":'dailysick'},inplace=True)","a4a74f3a":"df.head()","714b5524":"df.describe()","fc1b9c3e":"df.head()","2d22be7e":"from datetime import datetime,date\n\n\ndf['date'] = pd.to_datetime(df['date'],format = '%d.%m.%Y')\ndf.head().style.set_properties(subset=['date'], **{'background-color':'red','color':'white'})","49153c64":"import matplotlib.pyplot as plt\nimport seaborn as sns\nf, ax = plt.subplots(nrows=10, ncols=1, figsize=(20,30))\n\nfor i, column in enumerate(df.drop('date', axis=1).columns):\n    sns.lineplot(x=df['date'], y=df[column].fillna(method='ffill'), ax=ax[i], color='dodgerblue')\n    ax[i].set_title('Feature: {}'.format(column), fontsize=14)\n    ax[i].set_ylabel(ylabel=column, fontsize=14)\n                      \n    ax[i].set_xlim([date(2020, 3, 11), date(2021, 5,26)])   ","12457e73":"import plotly.express as px\nstartDate = '2020-11-25'\nendDate = '2021-5-26'","0a1f2a4f":"fig = px.line(df, x='date', y='dailycases', range_x=[startDate,endDate])\nfig.show()","525ed9f1":"fig = px.line(df, x='date', y='dailytest', range_x=[startDate,endDate])\nfig.show()","c0637cb0":"fig = px.line(df, x='date', y='dailydeaths', range_x=[startDate,endDate])\nfig.show()","29810bbb":"fig = px.line(df, x='date', y='dailytest', range_x=[startDate,endDate])\nfig.show()","174e13c8":"fig = px.line(df, x='date', y='dailysick', title='Time Series with Range Slider and Selectors')\n\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=1, label=\"YTD\", step=\"year\", stepmode=\"todate\"),\n            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n            dict(step=\"all\")\n        ])\n    )\n)\nfig.show()","1e98a6df":"fig = px.line(df, x=\"date\", y=df.drop(\"totaltest\",axis=1).columns,\n              hover_data={\"date\": \"|%B %d, %Y\"},\n              title='custom tick labels with ticklabelmode=\"period\"')\nfig.update_xaxes(\n    dtick=\"M1\",\n    tickformat=\"%b\\n%Y\",\n    ticklabelmode=\"period\")\nfig.show()","2b9a1f25":"import plotly.graph_objects as go\n\nfig = go.Figure(go.Scatter(\n    x = df['date'],\n    y = df['dailysick']\n))\n\nfig.update_xaxes(\n    rangeslider_visible=True,\n    tickformatstops = [\n        dict(dtickrange=[None, 1000], value=\"%H:%M:%S.%L ms\"),\n        dict(dtickrange=[1000, 60000], value=\"%H:%M:%S s\"),\n        dict(dtickrange=[60000, 3600000], value=\"%H:%M m\"),\n        dict(dtickrange=[3600000, 86400000], value=\"%H:%M h\"),\n        dict(dtickrange=[86400000, 604800000], value=\"%e. %b d\"),\n        dict(dtickrange=[604800000, \"M1\"], value=\"%e. %b w\"),\n        dict(dtickrange=[\"M1\", \"M12\"], value=\"%b '%y M\"),\n        dict(dtickrange=[\"M12\", None], value=\"%Y Y\")\n    ]\n)\n\nfig.show()","c2d3f707":"df = df.sort_values(by='date')\n\n# Check time intervals\ndf['delta'] = df['date'] - df['date'].shift(1)\n\ndf[['date', 'delta']].head()","0fa36b59":"df['delta'].sum(), df['delta'].count()","dd87fec8":"df = df.drop('delta', axis=1)\ndf.isna().sum()","d6b106a1":"plt.figure(figsize=(15,7))\nold_totaltest = df['totaltest'].copy()\ndf['totaltest'] = df['totaltest'].replace(0, np.nan)\n\nsns.lineplot(x=df['date'], y=old_totaltest, color='darkorange')\nsns.lineplot(x=df['date'], y=df['totaltest'].fillna(np.inf), color='dodgerblue')\nplt.title('Total Test Graphic')\nplt.xlabel('totaltest')\nplt.ylabel('totaltest')\nplt.xlim([date(2020, 3, 27), date(2021, 5,26)])","92eb4f93":"plt.figure(figsize=(15,7))\nold_totalcritically = df['totalcritically'].copy()\ndf['totalcritically'] = df['totalcritically'].replace(0, np.nan)\n\nsns.lineplot(x=df['date'], y=old_totalcritically, color='darkorange', label='original')\nsns.lineplot(x=df['date'], y=df['totaltest'].fillna(np.inf), color='dodgerblue', label='modified')\nplt.title('Total Critically Graphic')\nplt.xlabel('totalcritically')\nplt.ylabel('totalcritically')\nplt.xlim([date(2020, 3, 27), date(2021,5,26)])","6b7f4efd":"# Missing Values\n\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(16,5))\n\nsns.heatmap(df.T.isna(), cmap='Blues')\nax.set_title('Missing Values', fontsize=16)\n\nfor tick in ax.yaxis.get_major_ticks():\n    tick.label.set_fontsize(14)\nplt.show()","4d19468e":"fig, ax = plt.subplots(ncols=2, nrows=3, sharex=True, figsize=(16,12))\n\nsns.lineplot(df['date'], df['dailytest'], color='dodgerblue', ax=ax[0, 0])\nax[0, 0].set_title('dailytest', fontsize=14)\n\nresampled_df = df[['date','dailytest']].resample('7D', on='date').sum().reset_index(drop=False)\nsns.lineplot(resampled_df['date'], resampled_df['dailytest'], color='dodgerblue', ax=ax[1, 0])\nax[1, 0].set_title('Weekly Daily Test', fontsize=14)\n\nresampled_df = df[['date','dailytest']].resample('M', on='date').sum().reset_index(drop=False)\nsns.lineplot(resampled_df['date'], resampled_df['dailytest'], color='dodgerblue', ax=ax[2, 0])\nax[2, 0].set_title('Monthly Daily Test', fontsize=14)\n\nfor i in range(3):\n    ax[i, 0].set_xlim([date(2021, 1, 1), date(2021,5,26)])\n\nsns.lineplot(df['date'], df['dailycases'], color='dodgerblue', ax=ax[0, 1])\nax[0, 1].set_title('Daily Cases', fontsize=14)\n\nresampled_df = df[['date','dailycases']].resample('7D', on='date').mean().reset_index(drop=False)\nsns.lineplot(resampled_df['date'], resampled_df['dailycases'], color='dodgerblue', ax=ax[1, 1])\nax[1, 1].set_title('Weekly Daily Cases', fontsize=14)\n\nresampled_df = df[['date','dailycases']].resample('M', on='date').mean().reset_index(drop=False)\nsns.lineplot(resampled_df['date'], resampled_df['dailycases'], color='dodgerblue', ax=ax[2, 1])\nax[2, 1].set_title('Monthly Daily Cases', fontsize=14)\n\nfor i in range(3):\n    ax[i, 1].set_xlim([date(2021, 1, 1), date(2021,5,26)])\nplt.show()","5c44cbef":"# A year has 52 weeks (52 weeks * 7 days per week) aporx.\nrolling_window = 52\nf, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 12))\n\nsns.lineplot(x=df['date'], y=df['dailytest'], ax=ax[0], color='dodgerblue')\nsns.lineplot(x=df['date'], y=df['dailytest'].rolling(rolling_window).mean(), ax=ax[0], color='red', label='rolling mean')\nsns.lineplot(x=df['date'], y=df['dailytest'].rolling(rolling_window).std(), ax=ax[0], color='orange', label='rolling std')\nax[0].set_title('Daily Test: Non-stationary \\nnon-constant mean & non-constant variance', fontsize=14)\nax[0].set_ylabel(ylabel='Daily Test', fontsize=14)\nax[0].set_xlim([date(2021, 1, 1), date(2021, 5,26)])\n\nsns.lineplot(x=df['date'], y=df['dailycases'], ax=ax[1], color='dodgerblue')\nsns.lineplot(x=df['date'], y=df['dailycases'].rolling(rolling_window).mean(), ax=ax[1], color='red', label='rolling mean')\nsns.lineplot(x=df['date'], y=df['dailycases'].rolling(rolling_window).std(), ax=ax[1], color='orange', label='rolling std')\nax[1].set_title('Daily Cases: Non-stationary \\nvariance is time-dependent (seasonality)', fontsize=14)\nax[1].set_ylabel(ylabel='Daily Cases', fontsize=14)\nax[1].set_xlim([date(2021, 1, 1), date(2021,5,26)])\n\nplt.tight_layout()\nplt.show()","03c52968":"f, ax = plt.subplots(nrows=1, ncols=1, figsize=(20, 3))\n\nsns.lineplot(x=df['date'], y=df['dailycases'], color='red')\nax.set_xlim([date(2020, 11, 25), date(2021, 5,26)])\nplt.show()","ebb0eb82":"from sklearn.model_selection import TimeSeriesSplit\n\nN_SPLITS = 3\n\nX = df['date']\ny = df['dailycases']\n\nfolds = TimeSeriesSplit(n_splits=N_SPLITS)","7077bec6":"f, ax = plt.subplots(nrows=N_SPLITS, ncols=2, figsize=(16, 9))\n\nfor i, (train_index, valid_index) in enumerate(folds.split(X)):\n    X_train, X_valid = X[train_index], X[valid_index]\n    y_train, y_valid = y[train_index], y[valid_index]\n\n    sns.lineplot(\n        x=X_train, \n        y=y_train, \n        ax=ax[i,0], \n        color='dodgerblue', \n        label='train'\n    )\n    sns.lineplot(\n        x=X_train[len(X_train) - len(X_valid):(len(X_train) - len(X_valid) + len(X_valid))], \n        y=y_train[len(X_train) - len(X_valid):(len(X_train) - len(X_valid) + len(X_valid))], \n        ax=ax[i,1], \n        color='dodgerblue', \n        label='train'\n    )\n\n    for j in range(2):\n        sns.lineplot(x= X_valid, y= y_valid, ax=ax[i, j], color='darkorange', label='validation')\n    ax[i, 0].set_title(f\"Rolling Window with Adjusting Training Size (Split {i+1})\", fontsize=16)\n    ax[i, 1].set_title(f\"Rolling Window with Constant Training Size (Split {i+1})\", fontsize=16)\n\nfor i in range(N_SPLITS):\n    ax[i, 0].set_xlim([date(2020, 11, 25), date(2021, 5,17)])\n    ax[i, 1].set_xlim([date(2020, 11, 25), date(2021, 5,17)])\n    \nplt.tight_layout()\nplt.show()","7376c17e":"from random import randrange\nfrom pandas import Series\nfrom matplotlib import pyplot\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nseries = [i+randrange(10) for i in range(1,100)]\nresult = seasonal_decompose(series, model='additive', period=1)\nresult.plot()\npyplot.show()","fc317fc9":"df.head()","9706bf35":"import seaborn as sns\nsns.displot(df['totaltest']);","3f40166c":"#scatter plot\nvar = 'dailytest'\ndata = pd.concat([df['dailycases'], df[var]], axis=1)\ndata.plot.scatter(x=var, y='dailycases', ylim=(0,100000));","b47f3889":"#correlation matrix\ncorrmat = df.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","56f776ee":"#scatterplot\nsns.set()\ncols = ['dailytest', 'dailycases', 'dailysick', 'dailydeaths', 'dailyrecoveries']\nsns.pairplot(df[cols], size = 2.5)\nplt.show();","7b5ad81b":"#missing data (percent)\ntotal = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(9)","644cadec":"#histogram and normal probability plot\nfrom scipy import stats\nsns.displot(df['dailysick']);\nfig = plt.figure()\nres = stats.probplot(df['dailysick'], plot=plt)","3d7c72cc":"..."}}