{"cell_type":{"c206c825":"code","8b615ea1":"code","0b3cf708":"code","25575a33":"code","d666a588":"code","1391fcfe":"code","c89e9193":"code","9ce0739d":"code","0bb8800c":"code","1fec54bc":"code","106a42d4":"code","5e0e2e00":"code","61eccf46":"code","58f2ee23":"code","9efe536f":"code","7e96ce8e":"code","41f73d5e":"code","64b7453a":"code","b4dd3866":"code","6d06151e":"code","2c1790e0":"code","8296bbee":"code","1c42fd9b":"code","526a140d":"code","046a9d5a":"code","f8dff602":"code","70c25444":"code","b21a7c38":"code","c02a5987":"code","1906f62d":"code","35b5692f":"code","ae63bc2a":"code","6f6b62f1":"code","bd527567":"code","36d30269":"code","e9d34ece":"code","ff8d5b6b":"code","350978a6":"code","ed8e8584":"code","586b0c67":"code","f512b66b":"code","01e017b9":"code","690c8a36":"code","85596257":"code","74d2d0f3":"code","b3d91003":"code","01e41b2f":"code","1f18fae2":"code","e63fd16d":"code","45594353":"code","969ae03e":"code","96c8e9fa":"code","2c6eac77":"code","c8bd46d2":"code","ab90efaf":"code","2d0787fe":"code","e0ad7440":"code","3c5e395f":"code","c647d88f":"code","6f8858be":"code","9d712e4e":"code","9f4f5776":"code","ab95c363":"code","0359a609":"code","ba7d782b":"code","4f5de6e1":"code","549e2c0c":"code","cce25c54":"code","8e9a3950":"code","e0c21217":"code","eaa4be4b":"code","fa6096cc":"code","8c63bb2e":"code","0b2ecbcc":"code","3e1fd2b4":"markdown","fd7deaa0":"markdown","966e3f4e":"markdown","ac1b1707":"markdown","0e426e56":"markdown","5086fc2b":"markdown","a2bf6c60":"markdown","371f38e0":"markdown","619cb533":"markdown","5b69aa1f":"markdown","046e39b9":"markdown","111fe1df":"markdown","40560c49":"markdown","23bdcc3e":"markdown","f46391fd":"markdown","eb943381":"markdown","da17ea38":"markdown","ca249899":"markdown","aa6e1be6":"markdown","f7d55271":"markdown","39f8ec11":"markdown","edc8e954":"markdown","b410bf4b":"markdown","e7ac0d69":"markdown","abc1f5c7":"markdown","fe6fbb02":"markdown","91e8a413":"markdown","5b0275e0":"markdown","48b7a302":"markdown","a0103071":"markdown","833f2dea":"markdown","7f5189b0":"markdown","aa5bea86":"markdown"},"source":{"c206c825":"import numpy as np\nimport os\nimport imageio\nfrom skimage.transform import resize, rescale\nimport datetime\nimport os\n\nimport matplotlib.pyplot as plt","8b615ea1":"#%tensorflow_version 1.x","0b3cf708":"import tensorflow as tf\nimport numpy as np\nprint(tf.__version__)\nnp.random.seed(30)\nimport random as rn\nrn.seed(30)\nfrom keras import backend as K\ntf.compat.v1.disable_eager_execution()\n#tf.set_random_seed(30)","25575a33":"#from zipfile import ZipFile\n#with ZipFile('\/content\/drive\/My Drive\/Colab Notebooks\/Project_data.zip','r') as zip:\n#    zip.extractall()","d666a588":"train_doc = np.random.permutation(open('..\/input\/gesture-recognition-dataset\/Project_data\/train.csv').readlines())\nval_doc = np.random.permutation(open('..\/input\/gesture-recognition-dataset\/Project_data\/val.csv').readlines())\nnum_classes = 5  #number of softmax classes","1391fcfe":"curr_dt_time = datetime.datetime.now()\ntrain_path = '..\/input\/gesture-recognition-dataset\/Project_data\/train'\nval_path = '..\/input\/gesture-recognition-dataset\/Project_data\/val'\nnum_train_sequences = len(train_doc)\nprint('# training sequences =', num_train_sequences)\nnum_val_sequences = len(val_doc)\nprint('# validation sequences =', num_val_sequences)","c89e9193":"def plot_loss_accuracy(history):\n    # list all data in history\n    print(history.history.keys())\n    # summarize history for accuracy\n    plt.plot(history.history['categorical_accuracy'])\n    plt.plot(history.history['val_categorical_accuracy'])\n    plt.title('model accuracy')\n    plt.ylabel('accuracy')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'test'], loc='upper left')\n    plt.show()\n    # summarize history for loss\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title('model loss')\n    plt.ylabel('loss')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'test'], loc='upper left')\n    plt.show()","9ce0739d":"def calculate_steps(num_train_sequences, num_val_sequences, batch_size):\n    if (num_train_sequences%batch_size) == 0:\n        steps_per_epoch = int(num_train_sequences\/batch_size)\n    else:\n        steps_per_epoch = (num_train_sequences\/\/batch_size) + 1\n\n    if (num_val_sequences%batch_size) == 0:\n        validation_steps = int(num_val_sequences\/batch_size)\n    else:\n        validation_steps = (num_val_sequences\/\/batch_size) + 1\n\n    return steps_per_epoch,validation_steps","0bb8800c":"def model_callbacks(folder_name):\n    model_name = str(folder_name) + '_' + str(curr_dt_time).replace(' ','').replace(':','_') + '\/'\n   \n    if not os.path.exists(model_name):\n        os.mkdir(model_name)\n\n    filepath = model_name + 'model-{epoch:05d}-{loss:.5f}-{categorical_accuracy:.5f}-{val_loss:.5f}-{val_categorical_accuracy:.5f}.h5'\n\n    checkpoint = ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\n\n    LR = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=3, min_lr=0.0001, cooldown=1, verbose=1) # write the REducelronplateau code here\n\n    return [checkpoint, LR]    ","1fec54bc":"from keras.preprocessing.image import ImageDataGenerator\n#from keras.preprocessing.image import smart_resize\n\ndatagen = ImageDataGenerator(\n    zoom_range=0.1,\n    zca_whitening=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1)\n\n## Test code start\n#360 by 360\nimage1 = imageio.imread(\"..\/input\/gesture-recognition-dataset\/Project_data\/val\/WIN_20180907_15_30_06_Pro_Right Swipe_new\/WIN_20180907_15_30_06_Pro_00029.png\")\n#160 by 120\nimage2 = imageio.imread(\"..\/input\/gesture-recognition-dataset\/Project_data\/val\/WIN_20180926_17_56_52_Pro_Right_Swipe_new\/WIN_20180926_17_56_52_Pro_00029.png\")\n#crop the images and resize them. Note that the images are of 2 different shape \n#and the conv3D will throw error if the inputs in a batch have different shapes                    \n#print(image1.shape, image2.shape)\nimage1 = resize(image1, (120, 120), anti_aliasing=True)\nimage1 = datagen.random_transform(image1)                   \nplt.imshow(image1)\nplt.show()\nimage2 = resize(image2, (120, 120), anti_aliasing=True)\nimage2 = datagen.random_transform(image2)                 \nplt.imshow(image2)\nplt.show()\n## Test code end\n\ndef generate(source_path, folder_list, batch_size, num_images=20, height=120, width=120, augment=False):\n    #print( 'Source path = ', source_path, '; batch size =', batch_size)\n    total_frames = 30\n\n    while True:\n        t = np.random.permutation(folder_list)\n        num_batches = len(t)\/\/batch_size # calculate the number of batches\n        #img_idx = sorted(rn.sample(range(0, total_frames), num_images)) #create a list of image numbers you want to use for a particular video\n        img_idx = np.round(np.linspace(0,total_frames-1,num_images)).astype(int) #create a list of image numbers you want to use for a particular video\n\n        for batch in range(num_batches): # we iterate over the number of batches\n            batch_data   = np.zeros((batch_size, num_images, height, width, 3)) # 3 is the number of channels RGB\n            batch_labels = np.zeros((batch_size, 5)) # batch_labels is the one hot representation of the output           \n\n            for folder in range(batch_size): # iterate over the batch_size\n                imgs = os.listdir(source_path+'\/'+ t[folder + (batch*batch_size)].split(';')[0]) # read all the images in the folder\n                for idx,item in enumerate(img_idx): #  Iterate over the frames\/images of a folder to read them in\n                    image = imageio.imread(source_path+'\/'+ t[folder + (batch*batch_size)].strip().split(';')[0]+'\/'+imgs[item]).astype(np.float32)\n\n                    #crop the images and resize them. Note that the images are of 2 different shape \n                    #and the conv3D will throw error if the inputs in a batch have different shapes                    \n                    h, w, c = image.shape\n                    image = resize(image, (height, width), anti_aliasing=True)\n\n                    # Randomly transform few images of few folders; note that folders are randomly shuffled in each epoch too\n                    if augment:\n                        if np.random.randn() > 0:\n                            image = datagen.random_transform(image)                   \n\n                    batch_data[folder,idx,:,:,0] = (image[...,0])\/255 #normalise and feed in the image\n                    batch_data[folder,idx,:,:,1] = (image[...,1])\/255 #normalise and feed in the image\n                    batch_data[folder,idx,:,:,2] = (image[...,2])\/255 #normalise and feed in the image                  \n                    \n                batch_labels[folder, int(t[folder + (batch*batch_size)].strip().split(';')[2])] = 1\n\n            yield batch_data, batch_labels #you yield the batch_data and the batch_labels, remember what does yield do\n        \n        # write the code for the remaining data points which are left after full batches\n        if (len(t)%batch_size):\n            remaining_batch_size = len(t)%batch_size\n            batch_data   = np.zeros((remaining_batch_size, num_images, height, width,3)) # 3 is the number of channels RGB\n            batch_labels = np.zeros((remaining_batch_size,5)) # batch_labels is the one hot representation of the output           \n\n            for folder in range(remaining_batch_size): # iterate over the batch_size\n                imgs = os.listdir(source_path+'\/'+ t[folder + (num_batches*batch_size)].split(';')[0]) # read all the images in the folder\n                for idx,item in enumerate(img_idx): #  Iterate iver the frames\/images of a folder to read them in\n                    image = imageio.imread(source_path+'\/'+ t[folder + (num_batches*batch_size)].strip().split(';')[0]+'\/'+imgs[item]).astype(np.float32)\n                \n                    #crop the images and resize them. Note that the images are of 2 different shape \n                    #and the conv3D will throw error if the inputs in a batch have different shapes\n                    h, w, c = image.shape\n                    image = resize(image, (height, width), anti_aliasing=True)                          \n                    \n                    # Randomly transform few images of few folders; note that folders are randomly shuffled in each epoch too\n                    if augment:\n                        if np.random.randn() > 0:\n                            image = datagen.random_transform(image)                   \n\n                    batch_data[folder,idx,:,:,0] = (image[...,0])\/255 #normalise and feed in the image\n                    batch_data[folder,idx,:,:,1] = (image[...,1])\/255 #normalise and feed in the image\n                    batch_data[folder,idx,:,:,2] = (image[...,2])\/255 #normalise and feed in the image\n                    #batch_data[folder,idx,:,:,0] = (image[...,0] - image[...,0].min())\/(image[...,0].max() - image[...,0].min())#normalise and feed in the image\n                    #batch_data[folder,idx,:,:,1] = (image[...,1] - image[...,1].min())\/(image[...,1].max() - image[...,1].min())#normalise and feed in the image\n                    #batch_data[folder,idx,:,:,2] = (image[...,2] - image[...,2].min())\/(image[...,2].max() - image[...,2].min())#normalise and feed in the image\n                    \n                batch_labels[folder, int(t[folder + (num_batches*batch_size)].strip().split(';')[2])] = 1\n\n            yield batch_data, batch_labels #you yield the batch_data and the batch_labels, remember what does yield do\n","106a42d4":"from keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, GRU, LSTM, Flatten, TimeDistributed, Flatten, BatchNormalization, Activation\nfrom keras.layers.convolutional import Conv3D, MaxPooling3D, Conv2D, MaxPooling2D\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\nfrom keras.regularizers import l2\nfrom keras import optimizers","5e0e2e00":"# Common utility to create conv 3D models\ndef conv3D(conv_filters=(16, 32, 64, 128), dense_nodes=(256,128), dropout=0.25, num_images=20, height=120, width=120):\n\n    model = Sequential()\n\n    model.add(Conv3D(conv_filters[0], (3, 3, 3), padding='same', input_shape=(num_images, height, width, 3)))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling3D(pool_size=(2, 2, 2)))\n\n    model.add(Conv3D(conv_filters[1], (3, 3, 3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling3D(pool_size=(2, 2, 2)))\n    \n    model.add(Conv3D(conv_filters[2], (3, 3, 3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling3D(pool_size=(2, 2, 2)))\n    \n    model.add(Conv3D(conv_filters[3], (3, 3, 3), padding='same'))    \n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling3D(pool_size=(2, 2, 2)))\n    \n    model.add(Flatten())\n    model.add(Dense(dense_nodes[0]))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(dropout))\n\n    model.add(Dense(dense_nodes[1]))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(dropout))\n\n    model.add(Dense(num_classes))\n    model.add(Activation('softmax'))\n\n    opt = optimizers.Adam() #write your optimizer\n    model.compile(opt, loss='categorical_crossentropy', metrics=['categorical_accuracy'])    \n    \n    return model","61eccf46":"num_epochs = 25 # choose the number of epochs\nprint ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 30\nprint ('# num_frames per video =', num_frames)\nheight = 120\nwidth = 120\n\nmodel = conv3D(num_images=num_frames)\n\nprint (model.summary())","58f2ee23":"callbacks_list = model_callbacks(\"model_conv3D_1\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, num_images=num_frames)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames)","9efe536f":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                             callbacks=callbacks_list, validation_data=val_generator, \n                             validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","7e96ce8e":"plot_loss_accuracy(history)","41f73d5e":"num_epochs = 20 # choose the number of epochs\n#print ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 20\nprint ('# num_frames per video =', num_frames)\nheight = 120\nwidth = 120\n\nmodel = conv3D(num_images=num_frames)\n\nprint (model.summary())","64b7453a":"callbacks_list = model_callbacks(\"model_conv3D_2\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, num_images=num_frames)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames)","b4dd3866":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                              callbacks=callbacks_list, validation_data=val_generator, \n                              validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","6d06151e":"plot_loss_accuracy(history)","2c1790e0":"num_epochs = 20 # choose the number of epochs\nprint ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 30\nprint ('# num_frames per video =', num_frames)\nheight = 160\nwidth = 160\n\nmodel = conv3D(num_images=num_frames, height=160, width=160)\n\nprint (model.summary())","8296bbee":"callbacks_list = model_callbacks(\"model_conv3D_3\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, num_images=num_frames, height=160, width=160)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames, height=160, width=160)","1c42fd9b":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                              callbacks=callbacks_list, validation_data=val_generator, \n                              validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","526a140d":"plot_loss_accuracy(history)","046a9d5a":"num_epochs = 20 # choose the number of epochs\nprint ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 20\nprint ('# num_frames per video =', num_frames)\nheight = 160\nwidth = 160\n\nmodel = conv3D(num_images=num_frames, height=160, width=160)\n\nprint (model.summary())","f8dff602":"callbacks_list = model_callbacks(\"model_conv3D_4\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, num_images=num_frames, height=160, width=160)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames, height=160, width=160)","70c25444":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                              callbacks=callbacks_list, validation_data=val_generator, \n                              validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","b21a7c38":"plot_loss_accuracy(history)","c02a5987":"num_epochs = 15 # choose the number of epochs\nprint ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 30\nprint ('# num_frames per video =', num_frames)\nheight = 120\nwidth = 120\n\nmodel = conv3D(num_images=num_frames)\n\nprint (model.summary())","1906f62d":"callbacks_list = model_callbacks(\"model_conv3D_5\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, augment=True, num_images=num_frames)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames)","35b5692f":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                              callbacks=callbacks_list, validation_data=val_generator, \n                              validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","ae63bc2a":"plot_loss_accuracy(history)","6f6b62f1":"num_epochs = 25 # choose the number of epochs\nprint ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 30\nprint ('# num_frames per video =', num_frames)\nheight = 120\nwidth = 120\n\nconv_filters = (8, 16, 32, 64) \nmodel = conv3D(conv_filters, num_images=num_frames)\nprint (model.summary())","bd527567":"callbacks_list = model_callbacks(\"model_conv3D_6\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, num_images=num_frames)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames)","36d30269":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                              callbacks=callbacks_list, validation_data=val_generator, \n                              validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","e9d34ece":"plot_loss_accuracy(history)","ff8d5b6b":"num_epochs = 25 # choose the number of epochs\nprint ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 30\nprint ('# num_frames per video =', num_frames)\nheight = 120\nwidth = 120\n\nconv_filters = (16, 32, 64, 128)\ndense_filters = (128, 64) \nmodel = conv3D(conv_filters=conv_filters, dense_nodes=dense_filters, dropout=0.2, num_images=num_frames)\nprint (model.summary())","350978a6":"callbacks_list = model_callbacks(\"model_conv3D_7\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, augment=False, num_images=num_frames)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames)","ed8e8584":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                              callbacks=callbacks_list, validation_data=val_generator, \n                              validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","586b0c67":"plot_loss_accuracy(history)","f512b66b":"num_epochs = 25 # choose the number of epochs\nprint ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 20\nprint ('# num_frames per video =', num_frames)\nheight = 120\nwidth = 120\n\nconv_filters = (32, 64, 128, 256)\ndense_filters = (128, 128)\nmodel = conv3D(conv_filters=conv_filters,dense_nodes=dense_filters, num_images=num_frames)\nprint (model.summary())","01e017b9":"callbacks_list = model_callbacks(\"model_conv3D_8\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, augment=False, num_images=num_frames)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames)","690c8a36":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                              callbacks=callbacks_list, validation_data=val_generator, \n                              validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","85596257":"plot_loss_accuracy(history)","74d2d0f3":"#write your model here\ndef conv3D_5by5(conv_filters=(16, 32, 64, 128), dense_nodes=(256,128), dropout=0.25, num_images=20, height=120, width=120):\n\n    model = Sequential()\n\n    model.add(Conv3D(conv_filters[0], (5, 5, 5), padding='same', input_shape=(num_images, height, width, 3)))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling3D(pool_size=(2, 2, 2)))\n\n    model.add(Conv3D(conv_filters[1], (3, 3, 3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling3D(pool_size=(2, 2, 2)))\n    \n    model.add(Conv3D(conv_filters[2], (3, 3, 3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling3D(pool_size=(2, 2, 2)))\n    \n    model.add(Conv3D(conv_filters[3], (3, 3, 3), padding='same'))    \n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling3D(pool_size=(2, 2, 2)))\n    \n    model.add(Flatten())\n    model.add(Dense(dense_nodes[0]))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(dropout))\n\n    model.add(Dense(dense_nodes[1]))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(dropout))\n\n    model.add(Dense(num_classes))\n    model.add(Activation('softmax'))\n\n    opt = optimizers.Adam() #write your optimizer\n    model.compile(opt, loss='categorical_crossentropy', metrics=['categorical_accuracy'])    \n    \n    return model","b3d91003":"num_epochs = 15 # choose the number of epochs\nprint ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 30\nprint ('# num_frames per video =', num_frames)\nheight = 120\nwidth = 120\n\nmodel = conv3D_5by5(num_images=num_frames)\n\nprint (model.summary())","01e41b2f":"callbacks_list = model_callbacks(\"model_conv3D_9\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, num_images=num_frames)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames)","1f18fae2":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                              callbacks=callbacks_list, validation_data=val_generator, \n                              validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","e63fd16d":"plot_loss_accuracy(history)","45594353":"from keras.applications import mobilenet\n\ndef mobilenet_RNN(fine_tune=False, gru=False, lstm_gru_cells=128, dense_nodes=128, dropout=0.25, num_images=20, height=120, width=120):\n\n    mobilenet_transfer = mobilenet.MobileNet(weights='imagenet', include_top=False)\n    print(\"Number of layers in the pretrained mobilenet model: \", len(mobilenet_transfer.layers))\n\n    if (fine_tune):\n        # Fine-tune from this layer onwards\n        fine_tune_at = 50\n        # Freeze all the layers before the `fine_tune_at` layer\n        for layer in mobilenet_transfer.layers[:fine_tune_at]:\n            layer.trainable = False\n\n    model = Sequential()\n    model.add(TimeDistributed(mobilenet_transfer,input_shape=(num_images, height, width, 3)))\n    model.add(TimeDistributed(BatchNormalization()))\n    model.add(TimeDistributed(MaxPooling2D((2, 2))))\n    model.add(TimeDistributed(Flatten()))\n    if (gru):\n        model.add(GRU(lstm_gru_cells))\n    else:\n        model.add(LSTM(lstm_gru_cells))\n    model.add(Dropout(dropout))\n    model.add(Dense(dense_nodes, activation='relu'))\n    model.add(Dropout(dropout))\n    model.add(Dense(num_classes, activation='softmax'))\n\n    opt = optimizers.Adam() #write your optimizer\n    model.compile(opt, loss='categorical_crossentropy', metrics=['categorical_accuracy'])    \n    return model","969ae03e":"num_epochs = 20 # choose the number of epochs\nprint ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 20\nprint ('# num frames per video =', num_frames)\nheight = 120\nwidth = 120\n\nmodel = mobilenet_RNN(num_images=num_frames, gru=True)\nprint (model.summary())","96c8e9fa":"callbacks_list = model_callbacks(\"model_retrain_mobilenet_gru\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, num_images=num_frames)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames)","2c6eac77":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                              callbacks=callbacks_list, validation_data=val_generator, \n                              validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","c8bd46d2":"plot_loss_accuracy(history)","ab90efaf":"num_epochs = 20 # choose the number of epochs\nprint ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 30\nprint ('# num frames per video =', num_frames)\nheight = 120\nwidth = 120\n\nmodel = mobilenet_RNN(gru=True, num_images=num_frames)\nprint(model.summary())","2d0787fe":"callbacks_list = model_callbacks(\"model_retrain_mobilenet_gru\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, augment=True, num_images=num_frames)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames)","e0ad7440":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                              callbacks=callbacks_list, validation_data=val_generator, \n                              validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","3c5e395f":"plot_loss_accuracy(history)","c647d88f":"num_epochs = 20 # choose the number of epochs\nprint ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 20\nprint ('# num frames per video =', num_frames)\nheight = 120\nwidth = 120\n\nmodel = mobilenet_RNN(fine_tune=True, gru=True, num_images=num_frames)\nprint(model.summary())","6f8858be":"callbacks_list = model_callbacks(\"model_finetune_mobilenet_gru\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, num_images=num_frames)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames)","9d712e4e":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                              callbacks=callbacks_list, validation_data=val_generator, \n                              validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","9f4f5776":"plot_loss_accuracy(history)","ab95c363":"num_epochs = 20 # choose the number of epochs\nprint ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 20\nprint ('# num frames per video =', num_frames)\nheight = 120\nwidth = 120\n\nmodel = mobilenet_RNN(fine_tune=False, gru=False, num_images=num_frames)\nprint(model.summary())","0359a609":"callbacks_list = model_callbacks(\"model_retrain_mobilenet_lstm\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, num_images=num_frames)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames)","ba7d782b":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                              callbacks=callbacks_list, validation_data=val_generator, \n                              validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","4f5de6e1":"plot_loss_accuracy(history)","549e2c0c":"num_epochs = 20 # choose the number of epochs\nprint ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 20\nprint ('# num frames per video =', num_frames)\nheight = 120\nwidth = 120\n\nmodel = mobilenet_RNN(fine_tune=False, gru=True, num_images=num_frames, lstm_gru_cells=128, dense_nodes=64)\nprint(model.summary())","cce25c54":"callbacks_list = model_callbacks(\"model_retrain_mobilenet_gru_64\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, num_images=num_frames)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames)","8e9a3950":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                              callbacks=callbacks_list, validation_data=val_generator,\n                              validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","e0c21217":"plot_loss_accuracy(history)","eaa4be4b":"num_epochs = 25 # choose the number of epochs\nprint ('# epochs =', num_epochs)\nbatch_size = 10  #experiment with the batch size\nprint ('# batch size =', batch_size)\nnum_frames = 20\nprint ('# num frames per video =', num_frames)\nheight = 120\nwidth = 120\n\nmodel = mobilenet_RNN(fine_tune=False, gru=False, num_images=num_frames, lstm_gru_cells=128, dense_nodes=64)\nprint(model.summary())","fa6096cc":"callbacks_list = model_callbacks(\"model_retrain_mobilenet_gru_64\")\n\nsteps_per_epoch, validation_steps = calculate_steps(num_train_sequences, num_val_sequences, batch_size)\n\ntrain_generator = generate(train_path, train_doc, batch_size, augment=True, num_images=num_frames)\n\nval_generator   = generate(val_path, val_doc, batch_size, num_images=num_frames)","8c63bb2e":"history = model.fit_generator(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n                              callbacks=callbacks_list, validation_data=val_generator,\n                              validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)","0b2ecbcc":"plot_loss_accuracy(history)","3e1fd2b4":"In this block, you read the folder names for training and validation. You also set the `batch_size` here. Note that you set the batch size in such a way that you are able to use the GPU in full capacity. You keep increasing the batch size until the machine throws an error.","fd7deaa0":"Common utility for callbacks","966e3f4e":"We set the random seed so that the results don't vary drastically.","ac1b1707":"## Common Utils","0e426e56":"# Gesture Recognition\n\nIn this project, you are going to build a 3D Conv models and Conv2D+LSTM\/GRU models that will be able to predict the 5 gestures correctly. Please import the following libraries to get started.\n\n## Problem Statement\nImagine you are working as a data scientist at a home electronics company which manufactures state of the art smart televisions. You want to develop a cool feature in the smart-TV that can recognise five different gestures performed by the user which will help users control the TV without using a remote.\n\nThe gestures are continuously monitored by the webcam mounted on the TV. Each gesture corresponds to a specific command:\n\nThumbs up: Increase the volume\n\nThumbs down: Decrease the volume\n\nLeft swipe: 'Jump' backwards 10 seconds\n\nRight swipe: 'Jump' forward 10 seconds\n\nStop: Pause the movie\n\n## Understanding the Dataset\nThe training data consists of a few hundred videos categorised into one of the five classes. Each video (typically 2-3 seconds long) is divided into a sequence of 30 frames(images). These videos have been recorded by various people performing one of the five gestures in front of a webcam - similar to what the smart TV will use.\n\nNote that all images in a particular video subfolder have the same dimensions but different videos may have different dimensions. Specifically, videos have two types of dimensions - either 360x360 or 120x160 (depending on the webcam used to record the videos). Hence, you will need to do some pre-processing to standardise the videos.\n\nEach row of the CSV file represents one video and contains three main pieces of information - the name of the subfolder containing the 30 images of the video, the name of the gesture and the numeric label (between 0-4) of the video.\n\nYour task is to train a model on the 'train' folder which performs well on the 'val' folder as well.","5086fc2b":"#### Conv 3D Model with 30 frames per video and a 5 by 5 filter size (16, 32, 64, 128 filters conv 3D layers + 256 dense layer + 128 dense layer + image size 120 by 120)","a2bf6c60":"#### Conv 3D Model with 20 frames per video (32, 64, 128, 256) filters conv 3D layers + 128 dense layer + 128 dense layer + image size 120 by 120)","371f38e0":"Common utility to calculate steps","619cb533":"#### Conv 3D Model with 20 frames per video (16, 32, 64, 128 filters conv 3D layers + 256 dense layer + 128 dense layer + image size 160 by 160)","5b69aa1f":"#### Conv 3D Model with 20 frames per video (16, 32, 64, 128 filters conv 3D layers + 128 dense layer + 64 dense layer + image size 120 by 120)","046e39b9":"#### Mobilenet (re train all weights) + GRU (128 cells) + 128 dense nodes + Random data transformations on training data set","111fe1df":"The `steps_per_epoch` and `validation_steps` are used by `fit_generator` to decide the number of next() calls it need to make.\nLet us now fit the model. This will start training the model and with the help of the checkpoints, you'll be able to save the model at the end of each epoch.","40560c49":"### TRANSFER LEARNING - MobileNet Conv2d + GRU","23bdcc3e":"#### Conv 3D Model with 30 frames per video (8, 16, 32, 64 filters conv 3D layers + 256 dense layer + 128 dense layer + image size 120 by 120)","f46391fd":"#### Mobilenet (re train all weights) + 64 dense nodes","eb943381":"#### Conv 3D Model with 20 frames per video (16, 32, 64, 128 filters conv 3D layers + 256 dense layer + 128 dense layer + image size 120 by 120)","da17ea38":"#### Conv 3D Model with 30 frames per video (16, 32, 64, 128 filters conv 3D layers + 256 dense layer + 128 dense layer) + Random data transformations on training data set","ca249899":"#### Mobilenet (fine tune) + GRU (128 cells) + 128 dense nodes","aa6e1be6":"The `steps_per_epoch` and `validation_steps` are used by `fit_generator` to decide the number of next() calls it need to make.\nLet us now fit the model. This will start training the model and with the help of the checkpoints, you'll be able to save the model at the end of each epoch.","f7d55271":"#### Mobilenet (re train all weights) + GRU (128 cells) + 128 dense nodes","39f8ec11":"### Conv3d Models","edc8e954":"The `steps_per_epoch` and `validation_steps` are used by `fit_generator` to decide the number of next() calls it need to make.\nLet us now fit the model. This will start training the model and with the help of the checkpoints, you'll be able to save the model at the end of each epoch.","b410bf4b":"#### Mobilenet (re train all weights) + 64 dense nodes +  on training data set + Random data transformations","e7ac0d69":"Note here that a video is represented above in the generator as (number of images, height, width, number of channels). Take this into consideration while creating the model architecture.","abc1f5c7":"Common utility to plot loss and accuracy","fe6fbb02":"#### Conv 3D Model with 30 frames per video (16, 32, 64, 128 filters conv 3D layers + 256 dense layer + 128 dense layer + image size 120 by 120)\n","91e8a413":"The `steps_per_epoch` and `validation_steps` are used by `fit_generator` to decide the number of next() calls it need to make.\nLet us now fit the model. This will start training the model and with the help of the checkpoints, you'll be able to save the model at the end of each epoch.","5b0275e0":"## Generator\nThis is one of the most important part of the code. The overall structure of the generator has been given. In the generator, you are going to preprocess the images as you have images of 2 different dimensions as well as create a batch of video frames. You have to experiment with `img_idx`, `y`,`z` and normalization such that you get high accuracy.","48b7a302":"#### Mobilenet (re train all wieghts) + LSTM (128 cells) + 128 dense nodes\n\n\n","a0103071":"## Model\nHere you make the model using different functionalities that Keras provides. Remember to use `Conv3D` and `MaxPooling3D` and not `Conv2D` and `Maxpooling2D` for a 3D convolution model. You would want to use `TimeDistributed` while building a Conv2D + RNN model. Also remember that the last layer is the softmax. Design the network in such a way that the model is able to give good accuracy on the least number of parameters so that it can fit in the memory of the webcam.","833f2dea":"#### Conv 3D Model with 30 frames per video (16, 32, 64, 128 filters conv 3D layers + 256 dense layer + 128 dense layer + image size 160 by 160)","7f5189b0":"The `steps_per_epoch` and `validation_steps` are used by `fit_generator` to decide the number of next() calls it need to make.\nLet us now fit the model. This will start training the model and with the help of the checkpoints, you'll be able to save the model at the end of each epoch.","aa5bea86":"The `steps_per_epoch` and `validation_steps` are used by `fit_generator` to decide the number of next() calls it need to make.\nLet us now fit the model. This will start training the model and with the help of the checkpoints, you'll be able to save the model at the end of each epoch."}}