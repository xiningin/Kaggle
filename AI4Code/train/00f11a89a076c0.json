{"cell_type":{"6056e9da":"code","8957dec1":"markdown"},"source":{"6056e9da":"import numpy as np\nimport pandas as pd\n\n\nclass Adaline:\n    # Adaptive Linear Neurons (Adaline)\n\n    def __init__(self, eta=0.0001, num_epochs=1000):\n        self.eta = eta\n        self.num_epochs = num_epochs\n        self.weights = None\n        self._cost = None\n\n    def fit(self, X, y):\n        self._cost = []\n        X = np.array(X)\n        X = np.insert(X, 0, 1, 1)\n        self.weights = np.random.normal(loc=0, scale=0.01, size=X.shape[1])\n        for _ in range(self.num_epochs):\n            net_input = self.net_input(X)\n            output = self.activation(net_input)\n            errors = y - output\n            delta_weights = self.eta * X.transpose().dot(errors)\n            self.weights += delta_weights\n            self._cost.append((errors ** 2).sum() \/ 2)\n\n    def net_input(self, X):\n        return np.dot(X, self.weights)\n\n    def activation(self, x):\n        return x\n\n    def predict(self, x):\n        if type(x) == list:\n            x = np.array(x)\n            x = np.insert(x, 0, 1, 0)\n            return np.where(self.activation(self.net_input(x)) >= 0, 1, -1)\n        elif (type(x) == pd.DataFrame) or (type(x) == np.ndarray):\n            x = np.array(x)\n            x = np.insert(x, 0, 1, 1)\n            return np.where(self.activation(self.net_input(x)) >= 0, 1, -1)\n\n    def accuracy(self, X_test, y_test):\n        return sum(self.predict(X_test) == y_test) \/ len(y_test)\n\n\n# if __name__ == \"__main__\":\n    \n#     from sklearn.model_selection import train_test_split\n\n#     iris = pd.read_csv(\"iris.csv\")\n\n#     X = iris.iloc[:, :4][:100]\n#     y = iris[\"class\"][:100]\n#     y = y.apply(lambda c: 1 if c == \"Iris-setosa\" else -1)\n\n#     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)\n\n#     ada = Adaline(eta=0.0001, num_epochs=1000)\n#     ada.fit(X_train, y_train)\n\n#     print(\"Test Accuracy: {:.0%}\".format(ada.accuracy(X_test, y_test)))","8957dec1":"# Adaline (Adaptive Linear Neurons)\n\n-Barrett Duna\n\nThis is a modification to the simple perceptron. Instead of applying the step function before training, Adaline applies the weight update step before the step function as compared to Adaline."}}