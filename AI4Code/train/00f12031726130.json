{"cell_type":{"1b6449d0":"code","fa6dea6a":"code","6bb49dcc":"code","1d50444a":"code","ed54ebfc":"code","5f069c01":"code","c32412cc":"code","10e8bb7d":"code","b6dd8874":"code","ed3a1fd9":"code","e0610c6e":"code","2a9a7037":"code","41ff6388":"code","d102f43d":"code","55b95cf9":"markdown","42777bc5":"markdown","b9072394":"markdown","a52289e4":"markdown"},"source":{"1b6449d0":"# CSV file importation\nimport pandas as pd\n\ndf_anime = pd.read_csv(\"..\/input\/myanimelist\/anime_cleaned.csv\")\ndf_anime.head()\n#pd.set_option('display.max_rows', df_anime.shape[0]+1)","fa6dea6a":"df_anime.shape","6bb49dcc":"# filtering columns\n\ndf_anime = df_anime.filter(items=['title', 'type', 'source', 'episodes', 'duration', 'score', 'scored_by', 'aired_from_year'])\ndf_anime.head()","1d50444a":"import plotly.express as px\n\ntips = px.data.tips()\nfig = px.histogram(df_anime, y=\"type\", orientation=\"h\").update_xaxes(categoryorder='total ascending')\nfig.show()","ed54ebfc":"fig = px.histogram(df_anime, x=\"source\")\nfig.show()","5f069c01":"fig = px.histogram(df_anime, x=\"type\", y=\"title\", color=\"source\")\nfig.show()","c32412cc":"fig = px.histogram(df_anime, x=\"aired_from_year\")\nfig.show()","10e8bb7d":"px.scatter(df_anime,x='episodes',size= 'episodes', color='episodes')","b6dd8874":"fig = px.histogram(df_anime, x=\"duration\")\nfig.show()","ed3a1fd9":"# modifications on the duration column\nimport re \n\ndef clean_duration(duration): \n    if re.search(r'[0-9]+(?= hr)', duration):\n        hr = re.search(r'[0-9]+(?= hr)', duration).group(0)\n        if len(hr)!=2:\n            hr = '0'+hr\n    else :\n        hr = '00'\n    if re.search(r'[0-9]+(?= min)', duration):\n        mn = re.search(r'[0-9]+(?= min)', duration).group(0)\n        if len(mn)!=2:\n            mn = '0'+mn\n    else :\n        mn = '00'\n    if re.search(r'[0-9]+(?= sec)', duration):\n        sec = re.search(r'[0-9]+(?= sec)', duration).group(0)\n        if len(sec)!=2:\n            sec = '0'+sec\n    else :\n        sec = '00'\n        \n    if len(hr+':'+mn+':'+sec)==8:\n        return hr+':'+mn+':'+sec\n    else : \n        cp++1\n        return duration\n         \ndf_anime['duration'] = df_anime['duration'].apply(clean_duration)\ndf_anime","e0610c6e":"sorted_duration = df_anime.sort_values('duration', ascending=True)\nfig = px.histogram(sorted_duration, x=\"duration\")\nfig.show()","2a9a7037":"fig = px.histogram(df_anime, x=\"score\")\nfig.show()","41ff6388":"fig = px.histogram(df_anime, x=\"scored_by\")\nfig.show()","d102f43d":"px.scatter(df_anime,x='scored_by',color = 'score', size = 'score')","55b95cf9":"Shape of the csv file : 33 columns and 6668 rows\n\nChoice of only keeping the 8 following columns :","42777bc5":"*1st peak = scored_by 0 to 5000*","b9072394":"*The values of this duration column need to be homogenized. The following function is meant to give it a '00:00:00' format :*","a52289e4":"<h1 align='center'>MyAnimeList dataset processing and visualisations<\/h1>"}}