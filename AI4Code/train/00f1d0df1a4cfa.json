{"cell_type":{"15bc3156":"code","e221fc20":"code","fe095fb1":"code","5de8b10f":"code","8bf5d89a":"code","5f85cfff":"code","80c9f516":"code","11c79cbe":"code","9aae00a7":"code","992aab0e":"code","c284b8a2":"code","4c0d777f":"code","3c9794b9":"code","884100c8":"code","deb41c49":"code","da7741cf":"code","c2b461e5":"code","5e8ef0f2":"code","f860da30":"code","a74c2156":"code","991c3a2a":"code","6fd548ab":"code","3b0e5bac":"code","1c26310f":"code","3b540c61":"code","5ca46232":"code","123f38c0":"code","36833146":"code","cfd2a40b":"code","846f864f":"code","5273e314":"code","421c7b97":"code","e7842822":"code","8673d059":"code","7ae190f8":"code","d510d493":"code","b9b2dbbb":"code","67a7a9ec":"code","755f5fae":"code","415e7f3b":"code","680c137c":"code","461516ac":"code","cce0c460":"code","cbccc192":"code","908a1944":"code","4351d917":"code","f9afae39":"code","72823bff":"code","645142bf":"code","e5905c4a":"code","2678a4ac":"code","2080f744":"code","cc0ae2c2":"code","9a71cec0":"code","88ac0099":"code","0ffe906b":"code","1b3ee92e":"code","2543cabe":"code","5381b6bf":"code","c89604e9":"code","5688cd87":"code","947c8d41":"code","a2c5e128":"code","f862dd3d":"code","04f1fc47":"code","1a673b43":"code","6f5188da":"code","1516ea65":"code","8f9679b0":"code","670fc3e8":"code","0a64f08b":"code","0fd4f0ca":"code","4d2350e2":"code","19b99235":"code","6ce85022":"code","e537bbbc":"code","5debfe74":"code","1620b8d8":"code","b4ce4f26":"code","1ea57fcc":"code","db884f73":"code","45766f9f":"markdown","0bf082d6":"markdown","97446fdc":"markdown","70e9c9ac":"markdown","1a75f479":"markdown","d9122b65":"markdown","f85ce72c":"markdown","b70512ea":"markdown","26fd1163":"markdown","edd9bf10":"markdown","a6d50b2f":"markdown","c26a728d":"markdown","290547cb":"markdown","f2ebe830":"markdown","203052b2":"markdown","c27898b6":"markdown","9c125899":"markdown","a1881602":"markdown","74174f4b":"markdown","0d06cc43":"markdown","e1432342":"markdown","dad7e27c":"markdown","2027669b":"markdown","6540dbaa":"markdown","c2cf591e":"markdown","6cc2aee3":"markdown","47ba49dc":"markdown","723a79d4":"markdown","6a4ae323":"markdown","a0c399be":"markdown","dac1e582":"markdown","a802d140":"markdown","a2d58178":"markdown","89e02d8c":"markdown","349430be":"markdown","9065cd92":"markdown","1295385f":"markdown","06903f7f":"markdown","f6cded4d":"markdown","27a24249":"markdown","86437099":"markdown","5f316293":"markdown","a22214af":"markdown"},"source":{"15bc3156":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e221fc20":"file = open('\/kaggle\/input\/datalab3\/files\/adult.data', 'r')","fe095fb1":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n    data1=line.split(', ')\n    if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","5de8b10f":"print (data[1:2])","8bf5d89a":"%matplotlib inline\nimport pandas as pd\n\ndf = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()\n# we obtain the dataframe from the data","5f85cfff":"df.tail()","80c9f516":"df.shape","11c79cbe":"counts = df.groupby('country').size()\n\nprint (counts) ","9aae00a7":"counts = df.groupby('age').size() # grouping by age\nprint (counts)","992aab0e":"counts_df = pd.DataFrame(counts)\ncounts_df.columns = ['Value']\ncounts_df.sort_values(by = 'Value', ascending = False,\n                inplace = True)\ncounts_df.head(1)","c284b8a2":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape","4c0d777f":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","3c9794b9":"fm =df[(df.sex == 'Female')]\nfm.shape","884100c8":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","deb41c49":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","da7741cf":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","c2b461e5":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","5e8ef0f2":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","f860da30":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()","a74c2156":"print ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","991c3a2a":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","6fd548ab":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","3b0e5bac":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","1c26310f":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","3b540c61":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist(density=0, histtype='stepfilled', bins=20);","5ca46232":"fm_age=fm['age']\nfm_age.hist(density=0, histtype='stepfilled', bins=10);\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","123f38c0":"import seaborn as sns\nfm_age.hist(density=0, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=0, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","36833146":"fm_age.hist(density=1, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","cfd2a40b":"ml_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","846f864f":"fm_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","5273e314":"ml_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","421c7b97":"fm_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","e7842822":"ml_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","8673d059":"ml_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","7ae190f8":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())","d510d493":"df['age'].median()","b9b2dbbb":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])","67a7a9ec":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","755f5fae":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","415e7f3b":"df.shape","680c137c":"ml1_age=ml1['age']\nfm1_age=fm1['age']","461516ac":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","cce0c460":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()","cbccc192":"# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","908a1944":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","4351d917":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","f9afae39":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","72823bff":"import numpy as np\n\ncountx,divisionx = np.histogram(ml2_age, density=True)\ncounty,divisiony = np.histogram(fm2_age, density=True)","645142bf":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","e5905c4a":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.)","2678a4ac":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","2080f744":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","cc0ae2c2":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']> df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']> df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","9a71cec0":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","88ac0099":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","0ffe906b":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","1b3ee92e":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","2543cabe":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","5381b6bf":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()\n# We plot the CDF graph \n# CDF = 1-exp^-(lambda *X)","c89604e9":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","5688cd87":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()\n# We plot the PDF graph\n# PDF = lambda * exp^-(lambda *X)","947c8d41":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()\n# Exact form of the gauss distribution","a2c5e128":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, density=True, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()\n# Show the normal distribution of random data","f862dd3d":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)\n# for data that follows a distribution non-parametrically we can use kernel density estimation","04f1fc47":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","1a673b43":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","6f5188da":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18, density=True)","1516ea65":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","8f9679b0":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50,density='True')\n# x follows a normal distribution","670fc3e8":"print ('The empirical mean of the sample is ', x.mean())","0a64f08b":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)","0fd4f0ca":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","4d2350e2":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])","19b99235":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))\n# covariance of two variables","6ce85022":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","e537bbbc":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","5debfe74":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","1620b8d8":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])","b4ce4f26":"plt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","1ea57fcc":"plt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","db884f73":"plt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.gcf().set_size_inches((10,10))","45766f9f":"### Sample Variance","0bf082d6":"- 14. Show the graphics and an explain the result.\n\nThis graph shows the Probability Mass Function of the men in the data. It shows how often each bin of age appears.","97446fdc":"### Summarizing the Data","70e9c9ac":"- 21. What does the figure shows?\n\nThis figure shows the Kernel Density estimated using Gaussian kernels.","1a75f479":"- 12. Show the graphics and an explain the result.\nWe plot together the histograms of women and men. With this graph we can compare the age distribution, as well as the number of samples of each sex.\n","d9122b65":"### Relative Risk\nProbability of being promoted in time or early or late","f85ce72c":"A way to see if there is skewness is to look the dif between mean and median.","b70512ea":"- 5. How many items are there for USA? and for Mexico?\n\nNow we are grouping by country and printing the size of the data. That means, the number of rows that every country has. \n\nFor USA there is 29170 items, and for Mexico 643.","26fd1163":"Pearson coefficient helps to see skewness","edd9bf10":"We calculated 3 group of age and their percentages. We then calcualte the relative risk of getting an early promotion or a late promotion with the \"100*(1-ml2_young\/fm2_young)\"","a6d50b2f":"## Data distributions","c26a728d":"- 9. Describe an explain the result.\n\nWe have calculated the mean, variance and standard deviation. We see that the mean age for women is smaller than men, and that the standard deviation is bigger for women","290547cb":"### Mean","f2ebe830":"- 21. What do you obtained as result?\n\nMSE:  0.0009443869811595753\nThe mean squared error of a normal random distribution.\n","203052b2":"- 4. Describe an explain the result.\n\nThis function give us the number of rows and columns of our Dataframe. \nIn this case, 32561 rows and 15 columns.","c27898b6":"### Sample Median","9c125899":"- 18. Show the graphics and an explain the result.\n\nThis graph is like the one we did in question 13 but changing the number of bins.","a1881602":"## Sample and Estimated Mean, Variance and Standard Scores","74174f4b":"3. Describe and explain the result. Compare with the previous one.\n\nHere we see the end of the dataframe, we can see the number of rows in the index column (32560).","0d06cc43":"### Continuous Distribution","e1432342":"- 11. Show the graphics and an explain the result.\n\nWe do the same graph but for only the women in the dataframe.","dad7e27c":"- 7. Describe an explain the result.\n\nWe have filtered the data by sex and income. After that we have calculated the percentage of each group by dividing by the total length of rows of the same sex.","2027669b":"## Estimation","6540dbaa":"### Measuring Asymmetry","c2cf591e":"- 19. Show the graphics and an explain the result.\n\nThis graph shows both cumulative histograms, where the red line is for the women in the data and the blue one is for the men. We can see how there is a higher percentage of young women in the women data compared to the percentage of young men in the men data.","6cc2aee3":"- 13. Show the graphics and an explain the result.\n\nNow we plot the Cumulative Distribution Function. This one do not show the number of samples. Instead, it shows the probability that the age of the row in the data is less or equal to that age. ","47ba49dc":"### Data distributions","723a79d4":"- 20. Explain the result.\nHere we calculate the age mean of the men in the data as well as the age mean of the women. We calculate the difference between those ages. As we can see, the mean age of men is 2 years higher in the data.","6a4ae323":"### Normal distribution","a0c399be":"- 8. Describe an explain the result.\n\nWe calculate the mean age for the Dataframe that contains only men and only women. We do the same thing for the Dataframe that only contains the high income.","dac1e582":"- 10. Show the graphics and an explain the result.\n\nWhat we see is a histogram. The groups of age that appear more in the Dataframe have the bigger bars. ","a802d140":"- 1. What is the obtained result? What did you ask for in the previous command? Explain.\n\nThe previous code converted the file .data into a csv type file. With the print(data[1:2]) we are able to see the first row of the file.","a2d58178":"- Exercise: Obtain for the Anscombe's quartet [2] given in the figures bellow, the different estimators (mean, variance, covariance for each pair, Pearson's correlation and Spearman's rank correlation.","89e02d8c":"- 2, Describe an explain the result.\n\nOnce the data can be read and converted into a DataFrame, we rename the columns and print the first rows.","349430be":"- 17. Show the graphics and an explain the result.\n\nThis is the same graph, but the previous one was for the men in the data, and this one is for the women.","9065cd92":"- 6. What is the age of the most represented people?\n\nAge of 36 is the one most represented.\n","1295385f":"## Explanatory Analysis","06903f7f":"Covariance is a measure of the tendency of two variables to vary together.","f6cded4d":"- 15. Show the graphics and an explain the result.\n\nThis is the same graph but for the women in the sample.\n","27a24249":"### Kernel Density","86437099":"## Outliers","5f316293":"- 10. Describe an explain the result.\n\nIf we look at the median, instead at the mean we get lower values for all of them. This could be because there are outliers\/ worng values in the data or because there are huge differences between the different persons in the data.","a22214af":"- 16. Show the graphics and an explain the result.\n\nThis histogram shows the probability that one sample in the data has certain age or lower. That is the reason why the probability keeps growing as we consider a higher age."}}