{"cell_type":{"8bf26a21":"code","4e492f1a":"code","c1b8d8d8":"code","aea7ebf8":"code","4fb75c6a":"code","d7254e8c":"code","aec2721b":"code","6b3df1c7":"code","2bf54648":"code","e3e902d8":"code","2c65f14c":"code","b35331e0":"code","ca6b5380":"code","480d34cb":"code","b01a450e":"code","4b056818":"code","11909020":"code","a877ba8d":"code","ea7bfe43":"code","cf0af06b":"code","16452e44":"code","3462f5d5":"code","53a82b2a":"code","b2c92857":"code","4b0388eb":"code","78b2d697":"code","95dec9c7":"code","28b87114":"code","55df5b31":"code","b57e5a5b":"code","8aca2be8":"code","f11d4ff5":"code","9640fb10":"code","5502b417":"code","e6752ba0":"code","03aca0a1":"code","1dc3d6bc":"code","4e9cd7e0":"code","909f12e5":"code","1e083f73":"code","d20e3d09":"code","b25bdf9b":"code","37df1984":"code","e9bb191b":"code","a197256e":"code","55523d52":"code","7bc398fd":"code","ee7965bd":"code","c047e7ed":"code","7646e971":"code","c3305797":"code","cc0afe2f":"code","3e95b71a":"code","734a643a":"code","66f8558e":"code","d370605d":"code","057a2d12":"code","3e4025ab":"code","9d04ab01":"code","f0c341a3":"code","43a7c6f0":"code","89975c02":"code","e12daa91":"code","c477a53f":"code","4ca62267":"code","3e525cb6":"code","dce589b9":"code","36af6de3":"code","4acc72fe":"code","76a90c4c":"code","99fdabcb":"code","cf022191":"code","54e13590":"code","6c657062":"code","bfe92a3b":"code","f6355fee":"code","90d01042":"code","cc517a4d":"markdown","9a0e7bd4":"markdown","78e92e73":"markdown","97c491bd":"markdown","f9cb05f2":"markdown","66216faa":"markdown","3478d3b6":"markdown","a81e3b25":"markdown","0bdec4a6":"markdown","e51e6b3f":"markdown","09c58e8b":"markdown","e44d7071":"markdown","5bc92d77":"markdown","a29db3c6":"markdown","437d592f":"markdown","b1061c21":"markdown","4ec98b0d":"markdown","0fc537dc":"markdown","6234150e":"markdown","ff661335":"markdown","2442ad9e":"markdown","4aec2840":"markdown","eb7b3e1b":"markdown","ac8f3045":"markdown","5433c0a3":"markdown","7f1b1e47":"markdown","3746fe94":"markdown","b9170b49":"markdown","99f4c2fa":"markdown","254fc59f":"markdown","175c7732":"markdown","acaff16c":"markdown","1a9db372":"markdown","d2faf08f":"markdown","397ca5a8":"markdown","7c5cd5cd":"markdown","4a14747b":"markdown","63540369":"markdown","7e9c02da":"markdown","132cf4a9":"markdown","e6053ba0":"markdown","4e30a187":"markdown"},"source":{"8bf26a21":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport sklearn\nfrom sklearn import preprocessing\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nimport lightgbm as lgb\nfrom sklearn.model_selection import GridSearchCV\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import precision_score, recall_score, confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, LabelBinarizer, MultiLabelBinarizer, MinMaxScaler","4e492f1a":"sns.set_palette('colorblind')\nsns.set_style('darkgrid')","c1b8d8d8":"heart = pd.read_csv(r'\/kaggle\/input\/heart-failure-prediction\/heart.csv')","aea7ebf8":"heart","4fb75c6a":"heart.info()","d7254e8c":"encoder = LabelEncoder()","aec2721b":"heart.Age.describe()","6b3df1c7":"plt.figure(figsize=(16,12))\nsns.histplot(data=heart, x='Age')\nplt.title('Histogram of age distribution', fontsize=30)\nplt.xlabel('Age', fontsize=20)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.ylabel('Count', fontsize=20)\nplt.show()","2bf54648":"plt.figure(figsize=(16,12))\nsns.violinplot(data=heart, x='Age')\nplt.title('Violinplot of age', fontsize=30)\nplt.xlabel('Age', fontsize=20)\nplt.xticks(fontsize=15)\nplt.show()","e3e902d8":"heart.Sex.value_counts()","2c65f14c":"heart.Sex  = encoder.fit_transform(heart.Sex)","b35331e0":"labels = ['Male', 'Female']\nplt.figure(figsize=(16,12))\nplt.title('Pie Chart of the distribution of sex in the dataset', fontsize=30)\nplt.pie(x=heart.Sex.value_counts(), autopct='%d%%', labels=labels, textprops={'fontsize':25})\nplt.show()","ca6b5380":"heart.ChestPainType.value_counts()","480d34cb":"heart.ChestPainType  = encoder.fit_transform(heart.ChestPainType)","b01a450e":"labels = ['ASY', 'NAP', 'ATA', 'TA']\nplt.figure(figsize=(16,12))\nplt.title('Pie Chart of chest pain type', fontsize=30)\nplt.pie(x=heart.ChestPainType.value_counts(), autopct='%d%%', labels=labels, textprops={'fontsize':25})\nplt.show()","4b056818":"heart.RestingBP.describe()","11909020":"heart.RestingBP.value_counts().sort_index()","a877ba8d":"plt.figure(figsize=(16,12))\nsns.histplot(data=heart, x='RestingBP')\nplt.title('Histogram of resting blood pressure distribution', fontsize=30)\nplt.xlabel('Resting Blood Pressure', fontsize=20)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.ylabel('Count', fontsize=20)\nplt.show()","ea7bfe43":"heart[heart['RestingBP'] == 0]\n#This outcome is positive for heart disease, lets find the mean for the restingBP and impute the data","cf0af06b":"disease = heart[heart['HeartDisease'] == 1].copy()\ndisease.RestingBP.replace(0, np.nan, inplace=True)\n#Replace the value with a null value to ensure it doesnt influence the statistics\ndisease.RestingBP.describe()","16452e44":"#Impute the original dataset with the mean from resting BP among those with heart disease\nheart.loc[(heart['HeartDisease'] == 1 ) & (heart['RestingBP'] == 0), 'RestingBP'] = 134","3462f5d5":"heart.RestingBP.describe()","53a82b2a":"plt.figure(figsize=(16,12))\nsns.violinplot(data=heart, x='RestingBP')\nplt.title('Violinplot of resting blood pressure', fontsize=30)\nplt.xlabel('Blood Pressure', fontsize=20)\nplt.xticks(fontsize=15)\nplt.show()","b2c92857":"heart.Cholesterol.describe()","4b0388eb":"heart.Cholesterol.value_counts().sort_index()","78b2d697":"plt.figure(figsize=(16,12))\nsns.histplot(data=heart, x='Cholesterol')\nplt.title('Histogram of Cholesterol distribution', fontsize=30)\nplt.xlabel('Cholesterol', fontsize=20)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.ylabel('Count', fontsize=20)\nplt.show()","95dec9c7":"heart[heart['Cholesterol'] == 0]\n#There is a mix out outcomes for this datafield, lets split the data\n#and find the appropriate statistic to impute the data","28b87114":"disease = heart[heart['HeartDisease'] == 1].copy()\n#Replace the value with a null value to ensure it doesnt influence the statistics\ndisease.Cholesterol.replace(0, np.nan, inplace=True)\nno_disease = heart[heart['HeartDisease'] == 0].copy()\n#Replace the value with a null value to ensure it doesnt influence the statistics\nno_disease.Cholesterol.replace(0, np.nan, inplace=True)\nprint(disease.Cholesterol.describe())\nprint(no_disease.Cholesterol.describe())","55df5b31":"plt.figure(figsize=(16,12))\nsns.histplot(data=disease, x='Cholesterol', kde=True)\nsns.histplot(data=no_disease, x='Cholesterol', kde=True, color='red')\nplt.title('Histogram of Cholesterol distribution', fontsize=30)\nplt.xlabel('Cholesterol', fontsize=20)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.ylabel('Count', fontsize=20)\nplt.show()","b57e5a5b":"heart.loc[(heart['HeartDisease'] == 1 ) & (heart['Cholesterol'] == 0), 'Cholesterol'] = 246\nheart.loc[(heart['HeartDisease'] == 0 ) & (heart['Cholesterol'] == 0), 'Cholesterol'] = 232","8aca2be8":"heart.Cholesterol.describe()","f11d4ff5":"plt.figure(figsize=(16,12))\nsns.violinplot(data=heart, x='Cholesterol')\nplt.title('Violinplot of Cholesterol', fontsize=30)\nplt.xlabel('Cholesterol', fontsize=20)\nplt.xticks(fontsize=15)\nplt.show()","9640fb10":"heart.FastingBS.describe()","5502b417":"heart.FastingBS.value_counts()","e6752ba0":"labels = ['No', 'Yes']\nplt.figure(figsize=(16,12))\nplt.title('Pie Chart of the distribution of fasting blood sugar >120 mg\/dl', fontsize=30)\nplt.pie(x=heart.Sex.value_counts(), autopct='%d%%', labels=labels, textprops={'fontsize':25})\nplt.show()","03aca0a1":"heart.RestingECG.unique()","1dc3d6bc":"heart.RestingECG.value_counts()","4e9cd7e0":"heart.RestingECG  = encoder.fit_transform(heart.RestingECG)","909f12e5":"labels = ['Normal', 'LVH', 'ST']\nplt.figure(figsize=(16,12))\nplt.title('Pie Chart of the distribution of resting ECG', fontsize=30)\nplt.pie(x=heart.RestingECG.value_counts(), autopct='%d%%', labels=labels, textprops={'fontsize':25})\nplt.show()","1e083f73":"heart.MaxHR.describe()","d20e3d09":"heart.MaxHR.value_counts().sort_index()","b25bdf9b":"plt.figure(figsize=(16,12))\nsns.histplot(data=heart, x='MaxHR', kde=True, hue='HeartDisease')\nplt.title('Histogram of Maximum HR', fontsize=30)\nplt.xlabel('Maximum HR', fontsize=20)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.ylabel('Count', fontsize=20)\nplt.show()","37df1984":"plt.figure(figsize=(16,12))\nsns.violinplot(data=heart, x='MaxHR')\nplt.title('Violinplot of Maximum HR', fontsize=30)\nplt.xlabel('Maximum HR', fontsize=20)\nplt.xticks(fontsize=15)\nplt.show()","e9bb191b":"heart.ExerciseAngina.unique()","a197256e":"heart.ExerciseAngina.value_counts().sort_index()","55523d52":"heart.ExerciseAngina  = encoder.fit_transform(heart.ExerciseAngina)","7bc398fd":"labels = ['No', 'Yes']\nplt.figure(figsize=(16,12))\nplt.title('Pie Chart of the distribution of presence of angina during exercise', fontsize=30)\nplt.pie(x=heart.ExerciseAngina.value_counts(), autopct='%d%%', labels=labels, textprops={'fontsize':25})\nplt.show()","ee7965bd":"heart.Oldpeak.describe()","c047e7ed":"plt.figure(figsize=(16,12))\nsns.histplot(data=heart, x='Oldpeak', kde=True)\nplt.title('Histogram of Oldpeak', fontsize=30)\nplt.xlabel('Oldpeak', fontsize=20)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.ylabel('Count', fontsize=20)\nplt.show()","7646e971":"#Replace the value with a null value to ensure it doesnt influence the statistics\ndisease.Oldpeak.replace(0, np.nan, inplace=True)\n#Replace the value with a null value to ensure it doesnt influence the statistics\nno_disease.Oldpeak.replace(0, np.nan, inplace=True)\nprint(disease.Oldpeak.describe())\nprint(no_disease.Oldpeak.describe())","c3305797":"plt.figure(figsize=(16,12))\nsns.histplot(data=disease, x='Oldpeak', kde=True)\nsns.histplot(data=no_disease, x='Oldpeak', kde=True, color='red')\nplt.title('Histogram of Old peak distribution', fontsize=30)\nplt.xlabel('Old Peak', fontsize=20)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.ylabel('Count', fontsize=20)\nplt.show()","cc0afe2f":"heart.loc[(heart['HeartDisease'] == 1 ) & (heart['Oldpeak'] == 0), 'Oldpeak'] = 1.7\nheart.loc[(heart['HeartDisease'] == 0 ) & (heart['Oldpeak'] == 0), 'Oldpeak'] = 1.0","3e95b71a":"heart.Oldpeak.describe()","734a643a":"plt.figure(figsize=(16,12))\nsns.violinplot(data=heart, x='Oldpeak')\nplt.title('Violinplot of Oldpeak', fontsize=30)\nplt.xlabel('Oldpeak', fontsize=20)\nplt.xticks(fontsize=15)\nplt.show()","66f8558e":"heart.ST_Slope.unique()","d370605d":"heart.ST_Slope.value_counts()","057a2d12":"heart.ST_Slope  = encoder.fit_transform(heart.ST_Slope)","3e4025ab":"labels = ['Flat', 'Up', 'Down']\nplt.figure(figsize=(16,12))\nplt.title('Pie Chart of the distribution of ST Slope', fontsize=30)\nplt.pie(x=heart.ST_Slope.value_counts(), autopct='%d%%', labels=labels, textprops={'fontsize':25})\nplt.show()","9d04ab01":"heart.HeartDisease.value_counts()","f0c341a3":"labels = ['Yes', 'No']\nplt.figure(figsize=(16,12))\nplt.title('Pie Chart of the distribution of Heart Disease', fontsize=30)\nplt.pie(x=heart.HeartDisease.value_counts(), autopct='%d%%', labels=labels, textprops={'fontsize':25})\nplt.show()","43a7c6f0":"plt.figure(figsize=(20,16))\nsns.heatmap(heart.corr(), annot=True, cmap='magma')\nplt.title('Heatmap of variable correlations', fontsize=30)\nplt.xticks(fontsize=15, rotation=45)\nplt.yticks(fontsize=15, rotation=45)\nplt.show()","89975c02":"heart","e12daa91":"def algorithm_optimisation(x_train, x_test, y_train, y_test, model, scoring_fit, cv, param_grid):\n    #Takes in pre-split data, model type, scoring to judge best parameters, how many times to cross-validate\n    #and a list of parameters\n    \n    #Initiate the model with parameters\n    gs = GridSearchCV(\n        estimator=model,\n        param_grid=param_grid, \n        cv=cv, scoring=scoring_fit)\n    \n    #Fit the model with the training data and print the best parameters\n    fitted_model = gs.fit(x_train, y_train)\n    print(fitted_model.best_params_)\n    \n    #Initiate and fit a new model with the best parameters\n    model = gs.best_estimator_\n    model.fit(x_train, y_train)\n    #Predict y-values\n    y_predict = model.predict(x_test)\n    \n    #Generate and print out a confusiong matrix\n    conf_matrix = confusion_matrix(y_test, y_predict)\n    disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=model.classes_)\n    \n    fig, ax = plt.subplots(figsize=(14,14))\n    disp.plot(ax=ax)\n    plt.show()\n    \n    #Determine and print the models performance\n    accuracy = metrics.accuracy_score(y_test, y_predict)\n    precision = metrics.precision_score(y_test, y_predict)\n    recall = metrics.recall_score(y_test, y_predict)\n    f1score = metrics.f1_score(y_test, y_predict)\n    \n    print('Model Accuracy: ' + str(accuracy))\n    print('Precision: ' + str(precision))\n    print('Recall: ' + str(recall))\n    print('F1 Score ' + str(f1score))\n    \n    #Plot the models performance as a bar chart\n    data = {'Metric':['Accuracy' , 'Precision', 'Recall', 'F1 Score'], \n            'Value':[accuracy , precision, recall, f1score]}\n    df = pd.DataFrame(data)\n   \n        \n    df.plot.bar(x='Metric', y = 'Value', figsize=(16,12), legend=False, fontsize=15)\n    plt.title('Metric scores',fontsize=25)\n    plt.xlabel('Metric', fontsize=25)\n    plt.show()","c477a53f":"X = heart[['Age', 'Sex','ChestPainType', 'RestingBP', 'Cholesterol', 'FastingBS', 'RestingECG',\n          'MaxHR', 'ExerciseAngina', 'Oldpeak', 'ST_Slope']].copy()\ny = heart['HeartDisease'].copy()","4ca62267":"dummies = pd.concat([X, pd.get_dummies(heart['ChestPainType'], prefix='CPT'),\n                           pd.get_dummies(heart['RestingECG'], prefix='RECG'),\n                           pd.get_dummies(heart['ST_Slope'], prefix='STS')], axis=1)","3e525cb6":"X = dummies.drop(['ChestPainType', 'RestingECG', 'ST_Slope'], axis=1)","dce589b9":"#Initiate a minmax scaler and fit the independent varaibles to set them all between 0-1\nscaler = preprocessing.MinMaxScaler()\nx_scaled = scaler.fit_transform(X)\n\n#Turn the data back into a dataframe\nfeatures = pd.DataFrame(x_scaled, columns=X.columns)\n\n#Split the data\nx_train, x_test, y_train, y_test = train_test_split(features, y, train_size=0.8, random_state=1)","36af6de3":"model = DecisionTreeClassifier()\nmin_sample = range(2,11)\nmin_leaf = range(1,11)\nparam_grid = { 'min_samples_split': min_sample,\n              'min_samples_leaf': min_leaf,\n    'max_depth': [1,5,10,15,20,25],\n    'max_leaf_nodes': [5,10,50, 100, 200]\n}","4acc72fe":"algorithm_optimisation(x_train, x_test, y_train, y_test, model, 'f1',5, param_grid)","76a90c4c":"model = KNeighborsClassifier()\nk= range(1,101)\nparam_grid = {\n    'n_neighbors': k,\n    }","99fdabcb":"algorithm_optimisation(x_train, x_test, y_train, y_test, model, 'f1',5, param_grid)","cf022191":"model = SVC()\nc= range(1,21)\nkernel= ['linear', 'poly', 'rbf', 'sigmoid']\nparam_grid = {\n    'C': c, 'kernel': kernel\n    }","54e13590":"algorithm_optimisation(x_train, x_test, y_train, y_test, model, 'f1',5, param_grid)","6c657062":"model = LogisticRegression()\nc= range(1,21)\nsolver= ['liblinear', 'lbfgs', 'sag', 'saga', 'newton-cg']\nparam_grid = {\n    'C': c, 'solver': solver, 'max_iter': [500]\n    }","bfe92a3b":"algorithm_optimisation(x_train, x_test, y_train, y_test, model, 'f1',5, param_grid)","f6355fee":"model = LGBMClassifier()\n\n\nnum_leaf = range(2,51)\nmax_depth = range(1,31)\n\n\nparam_grid = { 'num_leaves': num_leaf, \n              'max_depth': max_depth}         \n","90d01042":"algorithm_optimisation(x_train, x_test, y_train, y_test, model, 'f1',5, param_grid)","cc517a4d":"#### Max HR","9a0e7bd4":"# KNNeighbors (Acc: 90, Prec: 91, Recall: 93, F1: 92)","78e92e73":"# Kaggle Heart Disease Dataset","97c491bd":"# Decision Tree (Acc: 88, Prec: 91, Recall: 89 F1: 90)","f9cb05f2":"The data appears slightly right-skewed, so the missing values will be imputed with median rather than mean.","66216faa":"This datafield has no issues or missing values","3478d3b6":"There appears to be no multicollinearity between the dependent variables.","a81e3b25":"The sex datafield appears to be normal, no missing values, or values that dont make sense.","0bdec4a6":"## 3: Data EDA, cleaning and visualisation","e51e6b3f":"## 2: Read Data","09c58e8b":"This datafield has no missing values or issues. The data is normally distributed.#### Exercise Angina","e44d7071":"### Prepare Dataset","5bc92d77":"There appears to be no issues with the chestpain type dataset, no missing values or values that dont make sense.","a29db3c6":"There appears to be an issue with the resting blood pressure datafield, there appears to be a single datapoint of 0 resting BP, which isnt possible given the context of the dataset. This will need to clean this up","437d592f":"## 1. Import Libraries","b1061c21":"#### Cholesterol","4ec98b0d":"# 5: Conclusion","0fc537dc":"The data now appears bimodally distributed, this is due to the large amount of values that needed to be imputed having a large effect on the distribution.","6234150e":"The values have been imputed with the median values obtained. The datafield looks clear of issues and normally distributed","ff661335":"#### Resting ECG","2442ad9e":"This datafield has no issues or missing values","4aec2840":"#### Exercise Angina","eb7b3e1b":"#### Chest Pain Type","ac8f3045":"#### Old Peak","5433c0a3":"## The best model is the LIGHTGBM tree model. The accuracy is 93.7%, with an f1-Score,recall and precision of 94.5%.","7f1b1e47":"#### ST Slope","3746fe94":"There is an issue with the cholesterol datafield, there are multiple points with 0 cholesterol, which isnt possible given the context of the dataset. This will need to clean this up.","b9170b49":"#### Fasting BS","99f4c2fa":"#### Sex","254fc59f":"# Logistic Regression (Acc: 90, Prec: 91, Recall: 92, F1: 92)","175c7732":"The data will need to min-max scaler and get dummies on all the relevant categorical datafields(ChestpainType, RestingECG, ST-Slope)","acaff16c":"There is an issue with the old peak datafield, a large proportion(1\/3) has missing values. These will be imputed to fill out the dataset","1a9db372":"# LightGBM  (Acc: 93, Prec: 94, Recall: 94, F1: 94)","d2faf08f":"### Age","397ca5a8":"## 4: Machine Learning","7c5cd5cd":"The distribution for each outcome appears normally distributed. The missing values will be imputed with mean.","4a14747b":"#### Resting BP","63540369":"This datafield has no missing values or issues. ","7e9c02da":"#### Heart Disease","132cf4a9":"There doesnt appear to be any issues with the Age column. No missing values or values that dont make sense. The data appears to be normally distributed. The mean age is 53, the minimum is 28 and the maximum is 77.","e6053ba0":"The value has been imputed with the mean from those individuals who have heart disease. The datafield looks clear and normally distributed","4e30a187":"# Support Vector (Acc: 89, Prec: 91, Recall: 91, F1: 91)"}}