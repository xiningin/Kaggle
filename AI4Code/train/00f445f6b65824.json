{"cell_type":{"2deec455":"code","6e1dfb52":"code","cce6a5a6":"code","581aef85":"code","040e0bbd":"code","a709e3e6":"code","c564b0f3":"code","84fe35c6":"code","832d62e8":"code","1a99246b":"code","e0cc3f1f":"code","cf71910b":"code","b44a3b4a":"code","c5401c0b":"code","67ec941c":"code","bdb4d7e1":"code","df8b4411":"markdown","0d0c0e0b":"markdown","0d11cf17":"markdown","82caefc5":"markdown","d04c6ff7":"markdown","334dcf6e":"markdown","17776e8e":"markdown","f81081bc":"markdown","e49081be":"markdown","c0f88f87":"markdown","0f17ead9":"markdown","4f71005c":"markdown","4497ae5e":"markdown","3313afa5":"markdown","061d6a5a":"markdown","22d6f65f":"markdown","4e0650dd":"markdown","e8c20b45":"markdown","e7a109ef":"markdown","4a83dc7c":"markdown","1765f9fc":"markdown","b18646d6":"markdown","6674499e":"markdown","c005d75b":"markdown"},"source":{"2deec455":"import numpy as np\nimport pandas as pd\nimport time\nfrom itertools import permutations, combinations\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nfrom copy import deepcopy,copy\n\ndef copy_list(lista):\n    copia = []\n    for el in lista:\n        copia.append(copy(el))\n    return copia\n\nfrom pathlib import Path\n\ndata_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n#nosound_path = Path('\/kaggle\/input\/arc-nosound-tasks\/')\n\ntraining_tasks = sorted(os.listdir(training_path))\nevaluation_tasks = sorted(os.listdir(evaluation_path))\ntest_tasks = sorted(os.listdir(test_path))\n#nosound_tasks = sorted(os.listdir(nosound_path))\n\ndef plot_one(ax, i,train_or_test,input_or_output):\n    cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    \n    input_matrix = task[train_or_test][i][input_or_output]\n    ax.imshow(input_matrix, cmap=cmap, norm=norm)\n    ax.grid(True,which='both',color='lightgrey', linewidth=0.5)    \n    ax.set_yticks([x-0.5 for x in range(1+len(input_matrix))])\n    ax.set_xticks([x-0.5 for x in range(1+len(input_matrix[0]))])     \n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_title(train_or_test + ' '+input_or_output)\n    \n\ndef plot_task(task):\n    \"\"\"\n    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"    \n    num_train = len(task['train'])\n    fig, axs = plt.subplots(2, num_train, figsize=(3*num_train,3*2))\n    for i in range(num_train):     \n        plot_one(axs[0,i],i,'train','input')\n        plot_one(axs[1,i],i,'train','output')        \n    plt.tight_layout()\n    plt.show()        \n        \n    num_test = len(task['test'])\n    fig, axs = plt.subplots(2, num_test, figsize=(3*num_test,3*2))\n    if num_test==1: \n        plot_one(axs[0],0,'test','input')\n        plot_one(axs[1],0,'test','output')     \n    else:\n        for i in range(num_test):      \n            plot_one(axs[0,i],i,'test','input')\n            plot_one(axs[1,i],i,'test','output')  \n    plt.tight_layout()\n    plt.show() \n    \n    \ndef mostra_tab(tab):\n    cmap = colors.ListedColormap(['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00','#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    fig, ax = plt.subplots(1, 1, figsize=(3,3))\n    ax.imshow(tab, cmap=cmap, norm=norm)\n    ax.grid(True,which='both',color='lightgrey', linewidth=0.5)    \n    ax.set_yticks([x-0.5 for x in range(1+len(tab))])\n    ax.set_xticks([x-0.5 for x in range(1+len(tab[0]))])     \n    ax.set_xticklabels([])\n    ax.set_yticklabels([])     \n    plt.tight_layout()\n    plt.show()\n    \ndef mostra_tabs(tabs):\n    if len(tabs)==1:\n        mostra_tab(tabs[0])\n        return\n    cmap = colors.ListedColormap(['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00','#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    fig, ax = plt.subplots(1, len(tabs), figsize=(3*len(tabs),3))\n    for i,tab in enumerate(tabs):\n        ax[i].imshow(tab, cmap=cmap, norm=norm)\n        ax[i].grid(True,which='both',color='lightgrey', linewidth=0.5)    \n        ax[i].set_yticks([x-0.5 for x in range(1+len(tab))])\n        ax[i].set_xticks([x-0.5 for x in range(1+len(tab[0]))])     \n        ax[i].set_xticklabels([])\n        ax[i].set_yticklabels([])     \n    plt.tight_layout()\n    plt.show()\n    \ndef print_molesto(molestia):\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$')\n    print('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$')\n    print('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$')\n    print()\n    print(molestia)\n    print()\n    print('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$')\n    \n    \n    \n##################################\n# Un paio di funzioni utili dopo #\n    \n#prima usavo lei\nfrom itertools import product\n#poi \u00e8 servita pi\u00f9 generalit\u00e0 :)\ndef cartesian(list_of_lists):\n    dim = len(list_of_lists)\n    if dim==0:\n        yield []\n    else:\n        for first_part in cartesian(list_of_lists[:dim-1]):\n            for second_part in list_of_lists[dim-1]:\n                yield first_part + [second_part]\n        \ndef flattener(pred):\n    str_pred = str([row for row in pred])\n    str_pred = str_pred.replace(', ', '')\n    str_pred = str_pred.replace('[[', '|')\n    str_pred = str_pred.replace('][', '|')\n    str_pred = str_pred.replace(']]', '|')\n    return str_pred\n\ndef elenca_sottoinsiemi_di(insieme,cardinalita_max=3):\n    iinsieme = range(len(insieme)) #insieme degli indici\n    sottoinsiemi_di_card = [[] for _ in range(cardinalita_max+1)]\n    sottoinsiemi_di_card[0].append([]) #di cardinalita 0 c'\u00e8 solo l'insieme vuoto\n    for c in range(1,cardinalita_max+1):\n        for sottoinsieme_ridotto,elemento in product(sottoinsiemi_di_card[c-1], iinsieme):\n            if len(sottoinsieme_ridotto)==0 or elemento>max(sottoinsieme_ridotto):\n                #genera un nuovo sottoinsieme che contiene elemento + insieme_ridotto\n                sottoinsieme = [elemento]\n                for el in sottoinsieme_ridotto:\n                    sottoinsieme.append(el)\n                sottoinsiemi_di_card[c].append(sottoinsieme)\n    lista_sottoinsiemi=[]\n    for c in range(cardinalita_max+1):\n        for sottoinsieme in sottoinsiemi_di_card[c]:\n            lista_sottoinsiemi.append([insieme[index] for index in sottoinsieme])\n    return lista_sottoinsiemi\n\ndef elenca_solo_sottoinsiemi_di(insieme,cardinalita=3):\n    iinsieme = range(len(insieme)) #insieme degli indici\n    sottoinsiemi_di_card = [[] for _ in range(cardinalita+1)]\n    sottoinsiemi_di_card[0].append([]) #di cardinalita 0 c'\u00e8 solo l'insieme vuoto\n    for c in range(1,cardinalita+1):\n        for sottoinsieme_ridotto,elemento in product(sottoinsiemi_di_card[c-1], iinsieme):\n            if len(sottoinsieme_ridotto)==0 or elemento>max(sottoinsieme_ridotto):\n                #genera un nuovo sottoinsieme che contiene elemento + insieme_ridotto\n                sottoinsieme = [elemento]\n                for el in sottoinsieme_ridotto:\n                    sottoinsieme.append(el)\n                sottoinsiemi_di_card[c].append(sottoinsieme)\n    lista_sottoinsiemi = []\n    for sottoinsieme in sottoinsiemi_di_card[cardinalita]:\n        lista_sottoinsiemi.append([insieme[index] for index in sottoinsieme])\n    return lista_sottoinsiemi\n\ndef elenca_solo_sottosequenze_di(insieme,cardinalita=3):\n    sottoinsiemi_di_card = [[] for _ in range(cardinalita+1)]\n    sottoinsiemi_di_card[0].append([]) #di cardinalita 0 c'\u00e8 solo l'insieme vuoto\n    for c in range(1,cardinalita+1):\n        for sottoinsieme_ridotto,elemento in product(sottoinsiemi_di_card[c-1], insieme):\n            if elemento not in sottoinsieme_ridotto:\n                #genera un nuovo sottoinsieme che contiene elemento + insieme_ridotto\n                sottoinsieme = [elemento]\n                for el in sottoinsieme_ridotto:\n                    sottoinsieme.append(el)\n                sottoinsiemi_di_card[c].append(sottoinsieme)\n    return sottoinsiemi_di_card[cardinalita]\n\n\n\n\ndef ide(y,x,shape,to_shape=False):\n    if to_shape:\n        return shape\n    else:\n        return y,x\ndef rotO(y,x,shape,to_shape=False):\n    if to_shape:\n        return shape[1],shape[0]\n    else:\n        return x , shape[0]-1-y\ndef rot180(y,x,shape,to_shape=False):\n    if to_shape:\n        return shape\n    else:\n        return shape[0]-1-y , shape[1]-1-x\ndef rotA(y,x,shape,to_shape=False):\n    if to_shape:\n        return shape[1],shape[0]\n    else:\n        return shape[1]-1-x , y\ndef refO(y,x,shape,to_shape=False):\n    if to_shape:\n        return shape\n    else:\n        return y , shape[1]-1-x\ndef refV(y,x,shape,to_shape=False):\n    if to_shape:\n        return shape\n    else:\n        return shape[0]-1-y , x\ndef refD1(y,x,shape,to_shape=False):\n    if to_shape:\n        return shape[1],shape[0]\n    else:\n        return x , y\ndef refD2(y,x,shape,to_shape=False):\n    if to_shape:\n        return shape[1],shape[0]\n    else:\n        return shape[1]-1-x , shape[0]-1-y\n\ndef are_equal(tab_start, tab_end, f):\n    shape_start = (len(tab_start),len(tab_start[0]))\n    shape_end = (len(tab_end),len(tab_end[0]))\n    new_shape_end = f(0,0,shape_start,to_shape=True)\n    if shape_end!=new_shape_end:\n        return False\n    for y,x in product(range(shape_start[0]),range(shape_start[1])):\n        new_y,new_x = f(y,x,shape_start)\n        if tab_end[new_y][new_x] != tab_start[y][x]:\n            return False\n    return True\n\ndef find_geo_invariants(tab):\n    invariants = []\n    for i in range(8):\n        if are_equal(tab,tab,geometry[i]):\n            invariants.append(i)\n    return invariants\n\ndef apply_transf(f,tab):\n    shape = (len(tab),len(tab[0]))\n    new_shape = f(0,0,shape,to_shape=True)\n    new_tab = [[0 for _ in range(new_shape[1])] for _ in range(new_shape[0])]\n    #mostra_tab(new_tab)\n    for y,x in product(range(shape[0]),range(shape[1])):\n        new_y,new_x = f(y,x,shape)\n        new_tab[new_y][new_x] = 0 + tab[y][x]\n    return new_tab\n\n'''\ngeometry     = [ide, rotO, rot180, rotA, refO, refV, refD1, refD2]\ngeometry_inv = [ide, rotA, rot180, rotO, refO, refV, refD1, refD2]\ngeometry_name = {0:'Identit\u00e0', 1:'Rotazione oraria', 2:'Rotazione 180 gradi', 3:'Rotazione antioraria',\n                 4:'Riflessione orizzontale', 5:'Riflessione verticale', 6:'Riflessione diagonale 1', 7:'Riflessione diagonale 2'}\n'''\ngeometry     = [ide, rotO, rotA, refO, refV, refD1, refD2, rot180]\ngeometry_inv = [ide, rotA, rotO, refO, refV, refD1, refD2, rot180]\ngeometry_name = {0:'Identit\u00e0', 1:'Rotazione oraria', 2:'Rotazione antioraria', 3:'Riflessione orizzontale',\n                 4:'Riflessione verticale', 5:'Riflessione diagonale 1', 6:'Riflessione diagonale 2',7:'Rotazione 180 gradi'}\n       ","6e1dfb52":"task_esempi = [1,7,4,9,0,5,16]\n#1 fill yellow\n#7 attacca rosso a blu\n#4 ripeti ogg con forma-colore\n#9 colora dal pi\u00f9 grande al pi\u00f9 piccolo\n#0 and logico\n#5 3x3\n#16 denoiss\n    \nfor n,task_da_fare in enumerate([1,4,7,9,0,5]):\n    print('Esempio Task numero: ',n+1)\n    task_file = str(training_path \/ training_tasks[task_da_fare])\n    with open(task_file, 'r') as f:\n        task = json.load(f)\n    plot_task(task)","cce6a5a6":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n\n# shape giusta -> 0,4,5,6,9,10,11,15\nfor n,task_da_fare in enumerate([0,4,5,9,10,15]):\n    print('PROVO TASK',n+1)\n    task_file = str(training_path \/ training_tasks[task_da_fare])\n    with open(task_file, 'r') as f:\n        task = json.load(f)\n       \n    #formatta i dati\n    inp_shape = np.array(task['train'][0]['input']).shape\n    out_shape = np.array(task['train'][0]['output']).shape \n    imgs_in, imgs_out = [], []\n    for pairIO in task['train']:\n        img_in = np.array(pairIO['input'])\n        img_out = np.array(pairIO['output'])\n        imgs_in.append(img_in)\n        imgs_out.append(img_out)\n        if img_in.shape!=inp_shape or img_out.shape!=out_shape:\n            print('no bueno')\n            break        \n    datas_in = [img_in.flatten() for img_in in imgs_in]\n    datas_out = [img_out.flatten() for img_out in imgs_out]\n    datas_in = pd.DataFrame(datas_in)\n    datas_out = pd.DataFrame(datas_out)\n            \n        \n    #allena il modello\n    model = LinearRegression().fit(datas_in, datas_out)\n       \n    \n    #visualizza risultati\n    test_img_in = np.array(task['test'][0]['input'])\n    test_img_out = np.array(task['test'][0]['output'])\n    test_data_in = test_img_in.flatten()\n    imgs_in.append(test_img_in)\n    imgs_out.append(test_img_out)\n    preds = []\n    for i in range(len(datas_in)):\n        data_in = datas_in.iloc[i].to_numpy().reshape((1,-1))\n        preds.append(model.predict(data_in).reshape(out_shape).round())\n    test_data_in = test_data_in.reshape((1,-1))\n    preds.append(model.predict(test_data_in).reshape(out_shape).round())\n    imgs_in.insert(-1,[[9]])\n    imgs_out.insert(-1,[[9]])\n    preds.insert(-1,[[9]])\n    mostra_tabs(imgs_in)\n    mostra_tabs(imgs_out)\n    mostra_tabs(preds)","581aef85":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\nclass Net(nn.Module):\n\n    def __init__(self, inp, oup):\n        super(Net, self).__init__()\n        # 1 input image channel, 6 output channels, 3x3 square convolution\n        # kernel\n        #self.conv1 = nn.Conv2d(1, 6, 3)\n        #self.conv2 = nn.Conv2d(6, 16, 3)\n        # an affine operation: y = Wx + b\n        self.fc1 = nn.Linear(inp, 2*inp) \n        self.fc2 = nn.Linear(2*inp, 2*oup)\n        self.fc3 = nn.Linear(2*oup, oup)\n\n    def forward(self, x):\n        # Max pooling over a (2, 2) window\n        #x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2))\n        # If the size is a square you can only specify a single number\n        #x = F.max_pool2d(F.relu(self.conv2(x)), 2)\n        #x = x.view(-1, self.num_flat_features(x))\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\ndef train(model, x, y, optimizer, criterion):\n    model.zero_grad()\n    output = model.forward(x)\n    loss = criterion(output,y)\n    loss.backward()\n    optimizer.step()\n    return loss, output\n\nfrom torch.optim import Adam,SGD\ncriterion = nn.MSELoss()\n\nEPOCHS = 5000\n\n\n# shape giusta -> 0,4,5,6,9,10,11,15\nfor n,task_da_fare in enumerate([4,9,10]):\n    print('PROVO TASK',n+1)\n    task_file = str(training_path \/ training_tasks[task_da_fare])\n    with open(task_file, 'r') as f:\n        task = json.load(f)\n       \n    #formatta i dati\n    inp_shape = np.array(task['train'][0]['input']).shape\n    out_shape = np.array(task['train'][0]['output']).shape \n    imgs_in, imgs_out = [], []\n    for pairIO in task['train']:\n        img_in = np.array(pairIO['input'])\n        img_out = np.array(pairIO['output'])\n        imgs_in.append(img_in)\n        imgs_out.append(img_out)\n        if img_in.shape!=inp_shape or img_out.shape!=out_shape:\n            print('no bueno')\n            break        \n    datas_in = [torch.Tensor(img_in.flatten()) for img_in in imgs_in]\n    datas_out = [torch.Tensor(img_out.flatten()) for img_out in imgs_out]\n            \n    \n    #allena la rete neurale\n    net = Net(len(datas_in[0]), len(datas_out[0]))\n    optm = SGD(net.parameters(), lr=0.0001, momentum=0.95)\n    \n    for e in range(EPOCHS):\n        for data_in, data_out in zip(datas_in, datas_out):\n            loss, predictions = train(net, data_in, data_out, optm, criterion)\n            #print(loss,predictions)\n            \n    \n    \n    #visualizza risultati\n    test_img_in = np.array(task['test'][0]['input'])\n    test_img_out = np.array(task['test'][0]['output'])\n    test_data_in = torch.Tensor(test_img_in.flatten())\n    datas_in.append(test_data_in)\n    imgs_in.append(test_img_in)\n    imgs_out.append(test_img_out)\n    preds = [net.forward(data_in).detach().numpy().reshape(out_shape).round() for data_in in datas_in]\n    imgs_in.insert(-1,[[9]])\n    imgs_out.insert(-1,[[9]])\n    preds.insert(-1,[[9]])\n    mostra_tabs(imgs_in)\n    mostra_tabs(imgs_out)\n    mostra_tabs(preds)\n    '''\n    for data_in, img_in, img_out in zip(datas_in, imgs_in, imgs_out):\n        pred = net.forward(data_in)\n        pred = pred.detach().numpy().reshape(out_shape).round() #.astype(int)\n        mostra_tabs([img_in, [[9]], img_out, pred])'''","040e0bbd":"#################################\n#  DEFINISCO LA CLASSE OGGETTI  #\n#################################\nclass Oggetto:\n    def __init__(self, forma=None, colore=None, posizione=None, colori_adiacenti=None, oggetti_adiacenti=None,\n                 tocca_bordo=None, is_specific_ASS_form=False, is_specific_ASS_color=False, is_shape_mult=False):\n        #colore:  int tra 0 e 9\n        self.colore = colore\n        #forma, dimensione e area:  tabella di 0 e 1\n        self.forma = forma\n        self.dimensione = None if forma is None else (len(self.forma),len(self.forma[0]))  # (y,x)\n        self.dimmezzi = None if forma is None else (self.dimensione[0]\/2,self.dimensione[1]\/2)  # (y,x)\n        self.area = None if forma is None else self.calcola_area()\n        #posizione e lati up down sx dx:  posizioni di centro e angoli\n        self.posizione = None if posizione is None else tuple(posizione)       # (y,x)\n        self.posizione_diag = None if posizione is None else (posizione[0]+posizione[1],posizione[0]-posizione[1]) # (somma,differenza)\n        #altri parametri vicinanza\n        self.colori_adiacenti = set() if colori_adiacenti is None else tuple(colori_adiacenti)\n        self.oggetti_adiacenti = set() if oggetti_adiacenti is None else oggetti_adiacenti\n        self.tocca_bordo = None if tocca_bordo is None else tuple(tocca_bordo)     #tupla (tocca_sopra, tocca_sotto, tocca_sx, tocca_dx)\n        self.tocca_un_bordo = None if tocca_bordo is None else tocca_bordo[0] or tocca_bordo[1] or tocca_bordo[2] or tocca_bordo[3]\n        self.tocca_solo_bordo = None if tocca_bordo is None else (tocca_bordo[0] and not tocca_bordo[1] and not tocca_bordo[2] and not tocca_bordo[3], not tocca_bordo[0] and tocca_bordo[1] and not tocca_bordo[2] and not tocca_bordo[3], not tocca_bordo[0] and not tocca_bordo[1] and tocca_bordo[2] and not tocca_bordo[3], not tocca_bordo[0] and not tocca_bordo[1] and not tocca_bordo[2] and tocca_bordo[3])\n        self.tocca_tutti_i_bordi = None if tocca_bordo is None else tocca_bordo[0] and tocca_bordo[1] and tocca_bordo[2] and tocca_bordo[3]\n        #tocca un angolo?\n        self.tocca_bordo_ORIZ = None if tocca_bordo is None else tocca_bordo[2] or tocca_bordo[3]\n        self.tocca_bordo_VERT = None if tocca_bordo is None else tocca_bordo[0] or tocca_bordo[1]\n        self.is_larghissimo = None if tocca_bordo is None else tocca_bordo[2] and tocca_bordo[3]\n        self.is_lunghissimo = None if tocca_bordo is None else tocca_bordo[0] and tocca_bordo[1]\n        self.is_specific_IF_form = False    #se \u00e8 comune a tutti i train INPUT\n        self.is_specific_IF_color = False   #se \u00e8 comune a tutti i train INPUT\n        self.is_specific_ASS_form = is_specific_ASS_form   #se \u00e8 comune a tutti i train OUTPUT\n        self.is_specific_ASS_color = is_specific_ASS_color #se \u00e8 comune a tutti i train OUTPUT\n        self.is_special_color = False       #se \u00e8 unico nell'immagine (tranne il nero)\n        self.is_special_form = False        #se \u00e8 unica nell'immagine\n        self.is_common_color = False        #se \u00e8 il pi\u00f9 frequente nell'immagine\n        self.is_common_form = False         #se \u00e8 la pi\u00f9 frequente nell'immagine\n        self.is_rarest_color = False #se \u00e8 il meno frequente dell'immagine (meglio rispetto a is_special_color???)\n        #gestione \"pi\u00f9 oggetti indicano lo stesso\" (es: oggetto tagliato dal bordo) .... coccalma\n        #self.linked = set()\n        #booleani avanzati per IF\n        self.is_cornice = self.find_is_cornice()\n        self.is_stecca = None if forma is None else self.find_is_stecca()\n        self.contiene_dueXdue = None if forma is None else self.find_contiene_dueXdue()\n        self.is_rettangolo = None if forma is None else self.area == self.dimensione[0]*self.dimensione[1]\n        #self.is_rettangolo_grande = None if self.is_rettangolo is None else self.is_rettangolo and self.dimensione[0]>1 and self.dimensione[1]>1\n        self.is_quadratoso = None if forma is None else self.dimensione[0]==self.dimensione[1]\n        self.is_bucato = None #aggiusto in Immagine\n        self.buchi = set() #aggiusto in Immagine\n        self.numero_buchi = None\n        self.figli = set() #per ora solo gli oggetti contenuti negli oggetti \"non neri\"\n        self.fratelli = set() \n        self.is_colorful = False #True solo per gli oggetti npn neri\n        self.area_order = None\n        self.area_order_rev = None\n        self.area_order_for_color = None\n        self.area_order_for_color_rev = None\n        self.piu_vicino_di_colore_diverso = None\n        self.is_shape_mult=is_shape_mult\n        \n        self.is_for_shape_out = False\n        self.is_denoised = False\n        self.is_noise = False\n        \n        #parametri per la gestione della ricerca di funzioni\n        self.is_risolto = False\n        self.is_risolvibile = False\n        self.is_come_input = False\n        \n        #find_geo_invariants(tab):\n        #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n        #\u00e8 invariante per cosa\n        #\u00e8 invariante per tutti\n            \n        \n        \n    def calcola_area(self):\n        area = 0\n        for row in self.forma:\n            for el in row:\n                area+=el\n        return area\n    def find_is_cornice(self):\n        if self.forma is None:\n            return False\n        if self.dimensione[0]<3 or self.dimensione[1]<3:\n            return False\n        for x in range(self.dimensione[1]):\n            if self.forma[0][x]==0 or self.forma[self.dimensione[0]-1][x]==0:\n                return False\n        for y in range(1,self.dimensione[0]-1):\n            if self.forma[y][0]==0 or self.forma[y][self.dimensione[1]-1]==0:\n                return False\n        for y,x in product(range(1,self.dimensione[0]-1),range(1,self.dimensione[1]-1)):\n            if self.forma[y][x]==1:\n                return False\n        return True\n    def find_is_stecca(self):\n        altezza_minima_per_chiamarlo_stecca = 2\n        if self.dimensione is None:\n            return False\n        if self.dimensione[0]==1 and self.dimensione[1]>=altezza_minima_per_chiamarlo_stecca:\n            return True\n        if self.dimensione[1]==1 and self.dimensione[0]>=altezza_minima_per_chiamarlo_stecca:\n            return True\n        return False\n    def find_contiene_dueXdue(self):\n        if self.dimensione is None:\n            return False\n        if self.is_stecca:\n            return False\n        for x,y in product(range(self.dimensione[1] - 1),range(self.dimensione[0] - 1)):\n            if self.forma[y][x]==1 and self.forma[y+1][x]==1 and self.forma[y][x+1]==1 and self.forma[y+1][x+1]==1:\n                return True\n        return False\n    def find_is_bucato(self,map_tab_to_obj):\n        #\u00e8 bucato sse il complementare (a toro) non \u00e8 connesso\n        #visita gli 0 partendo dal perimetro\n        visitati = [[False for _ in range(self.dimensione[1])] for _ in range(self.dimensione[0])]\n        def dfs(x,y):\n            x %= self.dimensione[1]\n            y %= self.dimensione[0]\n            if visitati[y][x] or self.forma[y][x]==1:\n                return 0\n            visitati[y][x]=True\n            punti_visti=1\n            for incr in [(1,0),(-1,0),(0,1),(0,-1)]:\n                punti_visti += dfs(x+incr[1],y+incr[0])\n            return punti_visti\n        punti_visti = 0\n        for x in range(self.dimensione[1]):\n            punti_visti += dfs(x,0)\n            punti_visti += dfs(x,self.dimensione[0]-1)\n        for y in range(1,self.dimensione[0]-1):\n            punti_visti += dfs(0,y)\n            punti_visti += dfs(self.dimensione[1]-1,y)\n        #se esistono 0 non visitati allora c'\u00e8 un buco\n        is_bucato=False\n        self.numero_buchi = 0\n        for x,y in product(range(self.dimensione[1]),range(self.dimensione[0])):\n            if not visitati[y][x] and self.forma[y][x]==0:\n                self.numero_buchi += 1\n                is_bucato = True\n                def dfs(x,y):\n                    if visitati[y][x] or self.forma[y][x]==1:\n                        return\n                    visitati[y][x]=True\n                    for incr in [(1,0),(-1,0),(0,1),(0,-1)]:\n                        dfs(x+incr[1],y+incr[0])\n                    tab_x = int(self.posizione[1] - self.dimmezzi[1] + x)\n                    tab_y = int(self.posizione[0] - self.dimmezzi[0] + y)\n                    self.buchi.add(map_tab_to_obj[tab_y][tab_x])\n                dfs(x,y)\n        #if punti_visti+self.area != self.dimensione[0]*self.dimensione[1]:\n        #    print('MADONNA BUCATA DA DIO NEL SONNO')\n        return is_bucato\n    def contiene(self,oggetto):\n        return oggetto in self.buchi\n    def contenuto(self,oggetto):\n        return self in oggetto.buchi\n    \n    def possiede(self,oggetto):\n        return oggetto in self.figli\n    def appartiene(self,oggetto):\n        return self in oggetto.figli\n        \n    def tocca(self,oggetto):\n        return self in oggetto.oggetti_adiacenti or oggetto in self.oggetti_adiacenti\n    \n    def is_allineato_vert(self,oggetto):\n        if self.posizione is None or self.dimmezzi is None or oggetto.posizione is None or oggetto.dimmezzi is None:\n            return False\n        #if (self.tocca_bordo[0] and self.tocca_bordo[1]) or (oggetto.tocca_bordo[0] and oggetto.tocca_bordo[1]):\n        #    return False #### MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM BOH\n        distY = 100000000\n        sopra=None\n        for a,b in cartesian([[1,-1],[1,-1]]):\n            offsetY = self.posizione[0]+a*self.dimmezzi[0] - oggetto.posizione[0]+b*oggetto.dimmezzi[0]\n            if offsetY>0:\n                if sopra is None:\n                    sopra=False\n                elif sopra is True:\n                    distY=-1\n            elif offsetY<0:\n                if sopra is None:\n                    sopra=True\n                elif sopra is False:\n                    distY=-1\n            #distY = min(distY, abs(offsetY))\n        return distY==-1\n    def is_allineato_oriz(self,oggetto):\n        if self.posizione is None or self.dimmezzi is None or oggetto.posizione is None or oggetto.dimmezzi is None:\n            return False\n        #if (self.tocca_bordo[2] and self.tocca_bordo[3]) or (oggetto.tocca_bordo[2] and oggetto.tocca_bordo[3]):\n        #    return False\n        distX = 100000000\n        sinistra=None\n        for a,b in cartesian([[1,-1],[1,-1]]):\n            offsetX = self.posizione[1]+a*self.dimmezzi[1] - oggetto.posizione[1]+b*oggetto.dimmezzi[1]\n            if offsetX>0:\n                if sinistra is None:\n                    sinistra=False\n                elif sinistra is True:\n                    distX=-1\n            elif offsetX<0:\n                if sinistra is None:\n                    sinistra=True\n                elif sinistra is False:\n                    distX=-1\n            #distX = min(distX, abs(offsetX))\n            #print(distX)\n        return distX==-1\n    \n    def distanza(self,oggetto):\n        if self in oggetto.figli or oggetto in self.figli:\n            return -2\n        if self.tocca(oggetto):\n            return -1\n        if self.posizione is None or self.dimmezzi is None or oggetto.posizione is None or oggetto.dimmezzi is None:\n            return 100000000\n        distX = 100000000\n        distY = 100000000\n        sopra=None\n        sinistra=None\n        for a,b in cartesian([[1,-1],[1,-1]]):\n            offsetX = self.posizione[1]+a*self.dimmezzi[1] - oggetto.posizione[1]+b*oggetto.dimmezzi[1]\n            offsetY = self.posizione[0]+a*self.dimmezzi[0] - oggetto.posizione[0]+b*oggetto.dimmezzi[0]\n            if offsetX>0:\n                if sinistra is None:\n                    sinistra=False\n                elif sinistra is True:\n                    distX=0\n            elif offsetX<0:\n                if sinistra is None:\n                    sinistra=True\n                elif sinistra is False:\n                    distX=0\n            if offsetY>0:\n                if sopra is None:\n                    sopra=False\n                elif sopra is True:\n                    distY=0\n            elif offsetY<0:\n                if sopra is None:\n                    sopra=True\n                elif sopra is False:\n                    distY=0   \n            distX = min(distX, abs(offsetX))\n            distY = min(distY, abs(offsetY))\n        return distX+distY\n    \n    def dista(self,oggetto,distanza_max):\n        return self.distanza(oggetto) <= distanza_max\n    \n    def stampa(self):\n        #print(self.dimensione)\n        fig,ax = plt.subplots(1, figsize=(3,3))\n        cmap = colors.ListedColormap(['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00','#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25', 'white'])\n        norm = colors.Normalize(vmin=0, vmax=10)\n        sfondo = 10 # if self.colore!=0 else -1\n        da_stampare = [[self.colore if point==1 else sfondo for point in row] for row in self.forma]\n        ax.imshow(da_stampare, cmap=cmap, norm=norm)\n        ax.grid(True,which='both',color='lightgrey', linewidth=0.5)    \n        ax.set_yticks([x-0.5 for x in range(1+self.dimensione[0])])\n        ax.set_xticks([x-0.5 for x in range(1+self.dimensione[1])]) \n        ax.set_yticklabels([])    \n        ax.set_xticklabels([])\n        #ax.set_ylim(-0.5, self.dimensione[0]-0.5)\n        #ax.set_xlim(-0.5, self.dimensione[1]-0.5)\n        str_title = '['+str(self.colore)+']  in '+str(self.posizione)\n        str_title += '   - adiacenti='+str(self.colori_adiacenti)\n        specFif = ' Fif' if self.is_specific_IF_form else ''\n        specCif = ' Cif' if self.is_specific_IF_color else ''\n        str_title += specFif+specCif\n        #str_title += str([self.lato_up, self.lato_down, self.lato_sx, self.lato_dx])\n        ax.set_title(str_title)\n        ax.set_xlabel(str(int(self.posizione[1]-self.dimmezzi[1]))+' - '+str(int(self.posizione[1]+self.dimmezzi[1])))\n        ax.set_ylabel(str(int(self.posizione[0]+self.dimmezzi[0]))+' - '+str(int(self.posizione[0]-self.dimmezzi[0])))\n        plt.tight_layout()\n        plt.show() \n        \n    def to_text(self):\n        return str(self.posizione)+' '+str(self.colore)+' '+str(self.forma)\n\n\n##################################\n#  DEFINISCO LA CLASSE IMMAGINI  #\n##################################\nclass Immagine:\n    def __init__(self,tab,comp_connesse_diagonali=True, add_ogg_non_neri=False, add_ogg_shape_mul=None, solo_quadratini=False): #gli oggetti non neri vanno aggiunti solo se l'immagine \u00e8 input\n        self.shape = (len(tab),len(tab[0]))\n        self.tab = tab\n        self.list_obj = []\n        self.forma = {}\n        self.colore = {}\n        self.posizione = {}\n        self.dimensione = {}\n        #self.colori_adiacenti = {}\n        self.comp_connesse_diagonali = comp_connesse_diagonali\n        self.solo_quadratini = solo_quadratini\n        \n        oggetti, map_tab_to_obj = self.trova_oggetti(comp_connesse_diagonali=comp_connesse_diagonali)\n        self.map_tab_to_obj = map_tab_to_obj\n        if add_ogg_non_neri:\n            #print('aggiungo oggetti non neri')\n            oggetti += self.trova_oggetti_non_neri(comp_connesse_diagonali=comp_connesse_diagonali) #usa map_tab_to_obj\n        for oggetto in oggetti:\n            self.aggiungi(oggetto) #aggiunge oggetto a list_obj e mette a posto i dizionari vari\n                    \n        \n        for ogg in self.list_obj:\n            #trova i buchi degli oggetti (parametri .is_bucato e .buchi)\n            ogg.is_bucato = ogg.find_is_bucato(self.map_tab_to_obj)\n            #trova oggetto per relazione (aggiusta il parametro)\n            ogg.piu_vicino_di_colore_diverso = self.trova_oggetto_piu_vicino_di_colore_diverso(ogg)\n        \n        \n        #aggiusta parametro oggetti AREA_ORDER\n        i_of_areas = {}\n        for index,ogg in enumerate(self.list_obj):\n            if ogg.colore==0 or ogg.colore is None: #trascura gli oggetti NERI per la classifica\n                continue \n            if ogg.area not in i_of_areas.keys():\n                i_of_areas[ogg.area] = set([index])\n            else:\n                i_of_areas[ogg.area].add(index)\n        i_and_areas = [(i_of_areas[area],area) for area in i_of_areas.keys()]\n        i_and_areas.sort(key = lambda x : x[1], reverse=True) #decrescente\n        for order,i_and_area in enumerate(i_and_areas):\n            indexes = i_and_area[0]\n            area = i_and_area[1]\n            for index in indexes:\n                if self.list_obj[index].area != area:\n                    print('dio bau miao')\n                self.list_obj[index].area_order = order\n        i_and_areas.sort(key = lambda x : x[1], reverse=False) #crescente\n        for order,i_and_area in enumerate(i_and_areas):\n            indexes = i_and_area[0]\n            for index in indexes:\n                self.list_obj[index].area_order_rev = order\n        #aggiusta parametro oggetti AREA_ORDER_for_color\n        for colore in self.colore.keys():\n            i_of_areas = {}\n            ogg_con_quel_colore = self.colore[colore]\n            if len(ogg_con_quel_colore)>1:\n                for index,ogg in enumerate(ogg_con_quel_colore):\n                    if ogg.area not in i_of_areas.keys():\n                        i_of_areas[ogg.area] = set([index])\n                    else:\n                        i_of_areas[ogg.area].add(index)\n                i_and_areas = [(i_of_areas[area],area) for area in i_of_areas.keys()]\n                #ordine decrescente\n                i_and_areas.sort(key = lambda x : x[1], reverse=True)\n                for order,i_and_area in enumerate(i_and_areas):\n                    indexes = i_and_area[0]\n                    area = i_and_area[1]\n                    for index in indexes:\n                        if ogg_con_quel_colore[index].area != area:\n                            print('dio bau miao')\n                        ogg_con_quel_colore[index].area_order_for_color = order\n                        if colore is 0:\n                            ogg_con_quel_colore[index].area_order = order\n                #ordine crescente\n                i_and_areas.sort(key = lambda x : x[1], reverse=False)\n                for order,i_and_area in enumerate(i_and_areas):\n                    indexes = i_and_area[0]\n                    for index in indexes:\n                        ogg_con_quel_colore[index].area_order_for_color_rev = order\n                        if colore is 0:\n                            ogg_con_quel_colore[index].area_order_rev = order\n        \n        #aggiusta parametro oggetti IS_SPECIAL_FORM     (aka. quelli che compaiono solo una volta nell'immagine input)\n        for forma in self.forma.keys():\n            ogg_con_quella_forma = self.forma[forma]\n            if len(ogg_con_quella_forma) == 1:\n                for ogg in ogg_con_quella_forma:\n                    ogg.is_special_form = True\n        #aggiusta parametro oggetti IS_COMMON_FORM     (aka. quelle che compaiono pi\u00f9 volte (strettamente) nell'immagine input)\n        max_occ = 0\n        max_occ_objs = []\n        for forma in self.forma.keys():\n            ogg_con_quella_forma = self.forma[forma]\n            if len(ogg_con_quella_forma)>max_occ:\n                max_occ_objs = ogg_con_quella_forma\n                max_occ = len(ogg_con_quella_forma)\n            elif len(ogg_con_quella_forma)==max_occ: #se ci sono pi\u00f9 forme che compaiono max_occ volte allora non sono cos\u00ec speciali\n                max_occ_objs = []\n        for ogg in max_occ_objs:\n            ogg.is_common_form = True\n        \n        \n        if add_ogg_shape_mul is not None:\n            print('aggiungo oggetti shape multiplier')\n            if add_ogg_shape_mul!=self.shape:\n                print('cazzo succe')\n            for oggetto in self.trova_oggetti_shape_multiplier():\n                self.aggiungi(oggetto) #aggiunge oggetto a list_obj e mette a posto i dizionari vari\n                    \n                    \n        #aggiusta parametro oggetti IS_SPECIAL_COLOR     (aka. quelli che compaiono solo una volta nell'immagine input)\n        for colore in self.colore.keys():\n            if colore is 0 or colore is None: #il nero non conta e non viene contato\n                continue\n            ogg_con_quel_colore = self.colore[colore]\n            if len(ogg_con_quel_colore) == 1: \n                for ogg in ogg_con_quel_colore:\n                    ogg.is_special_color = True\n        #aggiusta parametro oggetti IS_COMMON_COLOR    (aka. quelli che compaiono pi\u00f9 volte (strettamente) nell'immagine input)\n        max_occ = 0\n        min_occ = 10000\n        max_occ_objs = []\n        min_occ_objs = []\n        for colore in self.colore.keys():\n            if colore is 0: # or colore is 5: # trascuro nero e grigio ??? boh\n                continue\n            ogg_con_quel_colore = self.colore[colore]\n            \n            if len(ogg_con_quel_colore)>max_occ:\n                max_occ_objs = ogg_con_quel_colore\n                max_occ = len(ogg_con_quel_colore)\n            elif len(ogg_con_quel_colore)==max_occ: #se ci sono pi\u00f9 forme che compaiono max_occ volte allora non sono cos\u00ec speciali\n                max_occ_objs = []\n                \n            if len(ogg_con_quel_colore)<min_occ:\n                min_occ_objs = ogg_con_quel_colore\n                min_occ = len(ogg_con_quel_colore)\n            elif len(ogg_con_quel_colore)==min_occ: #se ci sono pi\u00f9 forme che compaiono min_occ volte allora non sono cos\u00ec speciali\n                min_occ_objs = []\n        for ogg in max_occ_objs:\n            ogg.is_common_color = True\n        for ogg in min_occ_objs:\n            ogg.is_rarest_color = True\n        \n    ####################################\n    # FUNZIONI PER gestire gli oggetti #\n    def aggiungi(self,oggetto):\n        self.list_obj.append(oggetto)\n        for attributo in ['forma','colore','posizione','dimensione']:\n            if oggetto.__dict__[attributo] != None:\n                if oggetto.__dict__[attributo] not in self.__dict__[attributo]:\n                    self.__dict__[attributo][oggetto.__dict__[attributo]] = [oggetto]\n                else:\n                    self.__dict__[attributo][oggetto.__dict__[attributo]].append(oggetto)\n                    \n    def aggiungi_oggetti_denoised(self,iterazioni=2):\n        for oggetto in self.trova_oggetti_denoised(comp_connesse_diagonali=self.comp_connesse_diagonali,iterazioni=iterazioni):\n            self.aggiungi(oggetto) #aggiunge oggetto a list_obj e mette a posto i dizionari vari\n                      \n                    \n    def get_obj_with(self,forma=None, colore=None, posizione=None):\n        if forma is not None:\n            if forma in self.forma.keys():\n                return set(self.forma[forma])\n            else:\n                return set()\n        elif colore is not None:\n            if colore in self.colore.keys():\n                return set(self.colore[colore])\n            else:\n                return set()\n        elif posizione is not None:\n            if posizione in self.posizione.keys():\n                return set(self.posizione[posizione])\n            else:\n                return set()\n            \n    def refresh_list_obj_from_map(self):\n        oggetti = set()\n        for row in self.map_tab_to_obj:\n            for ogg in row:\n                oggetti.add(ogg)\n        self.list_obj = list(oggetti)\n    \n    ########################################################################\n    # FUNZIONI PER trovare le componenti connesse di colore (aka. OGGETTI) #\n    #trova anche map_tab_to_ogg, mappa che a ogni posizione associa l'oggetto che ci sta\n    #Nota: non serve self perch\u00e9 usa solo la tabella di colori raw\n    def trova_oggetti(self, comp_connesse_diagonali = True):\n        tab = self.tab\n        dimensione = [len(tab),len(tab[0])]   # [y,x]\n        map_tab_to_obj = [[None for _ in range(dimensione[1])] for _ in range(dimensione[0])]\n        visitato = [[False for _ in range(dimensione[1])] for _ in range(dimensione[0])]\n        oggetti = []\n        for x,y in product(range(dimensione[1]),range(dimensione[0])):\n            if not visitato[y][x]:\n                obj_colore = tab[y][x]\n                obj_forma_big = [[0 for _ in range(dimensione[1])] for _ in range(dimensione[0])]\n                obj_colori_adiacenti = set()\n                obj_oggetti_adiacenti = set()\n                obj_tocca_bordo = [False for _ in range(4)]    #up, down, sx, dx\n                def dfs(x,y): #ritorna la lista di coordinate visitate\n                    if tab[y][x] != obj_colore:\n                        obj_colori_adiacenti.add(tab[y][x])\n                        if map_tab_to_obj[y][x] is not None:\n                            obj_oggetti_adiacenti.add(map_tab_to_obj[y][x])\n                        return []\n                    if visitato[y][x]:\n                        return []\n                    visitato[y][x] = True\n                    obj_forma_big[y][x] = 1\n                    incrementi = []\n                    #orizzontali\n                    if x>0:\n                        incrementi.append([-1,0])\n                    else:\n                        obj_tocca_bordo[2] = True #tocca sinistra\n                    if x+1<dimensione[1]:\n                        incrementi.append([1,0])\n                    else:\n                        obj_tocca_bordo[3] = True #tocca destra\n                    #verticali\n                    if y>0:\n                        incrementi.append([0,-1])\n                    else:\n                        obj_tocca_bordo[0] = True #tocca sopra\n                    if y+1<dimensione[0]:\n                        incrementi.append([0,1])\n                    else:\n                        obj_tocca_bordo[1] = True #tocca sotto\n                    #diagonali\n                    if comp_connesse_diagonali:\n                        if x>0 and y>0:\n                            incrementi.append([-1,-1])\n                        if x>0 and y+1<dimensione[0]:\n                            incrementi.append([-1,1])\n                        if x+1<dimensione[1] and y>0:\n                            incrementi.append([1,-1])\n                        if x+1<dimensione[1] and y+1<dimensione[0]:\n                            incrementi.append([1,1])\n                    if self.solo_quadratini:\n                        incrementi=[]\n                    punti_visitati = [[y,x]]\n                    for incr_x,incr_y in incrementi:\n                        punti_visitati += dfs(x+incr_x, y+incr_y)\n                    return punti_visitati\n                punti_visitati = dfs(x,y)\n                #qui obj_forma_big contiene la forma giusta in 0 e 1 ma \u00e8 una tabella full-dimension\n                #NOTA: il punto (x,y) appartiene all'oggetto ma non \u00e8 detto che sia in uno dei 4 angoli della forma\n                min_x, max_x, min_y, max_y = dimensione[1], 0, dimensione[0], 0\n                for tmp_x,tmp_y in product(range(dimensione[1]),range(dimensione[0])):\n                    if obj_forma_big[tmp_y][tmp_x]==1:\n                        min_x = min(min_x,tmp_x)\n                        max_x = max(max_x,tmp_x)\n                        min_y = min(min_y,tmp_y)\n                        max_y = max(max_y,tmp_y)\n                obj_dim_x = max_x-min_x+1\n                obj_dim_y = max_y-min_y+1\n                obj_forma = [[0 for _ in range(obj_dim_x)] for _ in range(obj_dim_y)]\n                for tmp_x,tmp_y in product(range(obj_dim_x),range(obj_dim_y)):\n                    obj_forma[tmp_y][tmp_x] = obj_forma_big[min_y+tmp_y][min_x+tmp_x]\n                obj_forma = tuple( tuple(row) for row in obj_forma)\n                #qui obj_forma contiene la forma giusta in 0 e 1 ritagliata in modo da non avere colonne o righe di soli 0\n                obj_posizione = (obj_dim_y\/2 + min_y, obj_dim_x\/2 + min_x)\n\n                oggetto = Oggetto(forma=obj_forma, colore=obj_colore, posizione=obj_posizione,\n                                  colori_adiacenti=obj_colori_adiacenti, oggetti_adiacenti=obj_oggetti_adiacenti,\n                                  tocca_bordo=obj_tocca_bordo)\n                oggetti.append(oggetto)\n                #mette i puntatori all'oggetto nel tab\n                for p in punti_visitati:\n                    map_tab_to_obj[p[0]][p[1]] = oggetto\n        for x,y in product(range(dimensione[1]),range(dimensione[0])):\n            if map_tab_to_obj[y][x] == None:\n                print('MALE MALE ho dei buchi nella fotuzza')\n        return oggetti, map_tab_to_obj\n    \n    def trova_oggetti_non_neri(self, comp_connesse_diagonali = True): #ocho che USA la mappa map_tab_to_obj\n        #@@@@@@@@@@@@@@@@@@@ EVITA OGGETTI LUNGHISSIMI O LARGHISSIMI\n        tab = self.tab\n        dimensione = [len(tab),len(tab[0])]   # [y,x]\n        visitato = [[False for _ in range(dimensione[1])] for _ in range(dimensione[0])]\n        is_da_trascurare = [[self.map_tab_to_obj[y][x].is_lunghissimo or self.map_tab_to_obj[y][x].is_larghissimo for x in range(dimensione[1])] for y in range(dimensione[0])] #metto visitati quei punti cos\u00ec non li considero\n        #print('trasscuro',is_da_trascurare)\n        oggetti = []\n        for x,y in product(range(dimensione[1]),range(dimensione[0])):\n            if not visitato[y][x] and tab[y][x]!=0 and not is_da_trascurare[y][x]:\n                colori_visti = set()\n                obj_forma_big = [[0 for _ in range(dimensione[1])] for _ in range(dimensione[0])]\n                obj_tocca_bordo = [False for _ in range(4)]    #up, down, sx, dx\n                def dfs(x,y): #ritorna la lista di coordinate visitate\n                    if tab[y][x] == 0 or visitato[y][x] or is_da_trascurare[y][x]:\n                        return []\n                    visitato[y][x] = True\n                    colori_visti.add(tab[y][x])\n                    obj_forma_big[y][x] = 1\n                    incrementi = []\n                    #orizzontali\n                    if x>0:\n                        incrementi.append([-1,0])\n                    else:\n                        obj_tocca_bordo[2] = True #tocca sinistra\n                    if x+1<dimensione[1]:\n                        incrementi.append([1,0])\n                    else:\n                        obj_tocca_bordo[3] = True #tocca destra\n                    #verticali\n                    if y>0:\n                        incrementi.append([0,-1])\n                    else:\n                        obj_tocca_bordo[0] = True #tocca sopra\n                    if y+1<dimensione[0]:\n                        incrementi.append([0,1])\n                    else:\n                        obj_tocca_bordo[1] = True #tocca sotto\n                    #diagonali\n                    if comp_connesse_diagonali:\n                        if x>0 and y>0:\n                            incrementi.append([-1,-1])\n                        if x>0 and y+1<dimensione[0]:\n                            incrementi.append([-1,1])\n                        if x+1<dimensione[1] and y>0:\n                            incrementi.append([1,-1])\n                        if x+1<dimensione[1] and y+1<dimensione[0]:\n                            incrementi.append([1,1])\n                    if self.solo_quadratini:\n                        incrementi = []\n                    punti_visitati = [[y,x]]\n                    for incr_x,incr_y in incrementi:\n                        punti_visitati += dfs(x+incr_x, y+incr_y)\n                    return punti_visitati\n                punti_visitati = dfs(x,y)\n                #qui obj_forma_big contiene la forma giusta in 0 e 1 ma \u00e8 una tabella full-dimension\n                #NOTA: il punto (x,y) appartiene all'oggetto ma non \u00e8 detto che sia in uno dei 4 angoli della forma\n                min_x, max_x, min_y, max_y = dimensione[1], 0, dimensione[0], 0\n                for tmp_x,tmp_y in product(range(dimensione[1]),range(dimensione[0])):\n                    if obj_forma_big[tmp_y][tmp_x]==1:\n                        min_x = min(min_x,tmp_x)\n                        max_x = max(max_x,tmp_x)\n                        min_y = min(min_y,tmp_y)\n                        max_y = max(max_y,tmp_y)\n                obj_dim_x = max_x-min_x+1\n                obj_dim_y = max_y-min_y+1\n                obj_forma = [[0 for _ in range(obj_dim_x)] for _ in range(obj_dim_y)]\n                for tmp_x,tmp_y in product(range(obj_dim_x),range(obj_dim_y)):\n                    obj_forma[tmp_y][tmp_x] = obj_forma_big[min_y+tmp_y][min_x+tmp_x]\n                obj_forma = tuple( tuple(row) for row in obj_forma)\n                #qui obj_forma contiene la forma giusta in 0 e 1 ritagliata in modo da non avere colonne o righe di soli 0\n                obj_posizione = (obj_dim_y\/2 + min_y, obj_dim_x\/2 + min_x)\n\n                if len(colori_visti)>1: #se non copre almeno due colori non ha senso aggiungerlo!\n                    oggetto = Oggetto(forma=obj_forma, colore=None, posizione=obj_posizione,\n                                      tocca_bordo=obj_tocca_bordo)\n                    #print('aggiungo multicolor',colori_visti,obj_forma)\n                    #print(visitato, is_da_trascurare)\n                    #mette i puntatori agli oggetti contenuti\n                    for p in punti_visitati:\n                        oggetto.figli.add(self.map_tab_to_obj[p[0]][p[1]])\n                    for figlio in oggetto.figli:\n                        figlio.fratelli = oggetto.figli\n                    oggetto.is_colorful = True\n                    oggetti.append(oggetto)\n        return oggetti\n    \n    def trova_oggetti_denoised(self, comp_connesse_diagonali = True, iterazioni=2): #ocho che anche lui USA la mappa map_tab_to_obj\n        tab = self.tab\n        d = Denoiser(tab,iterazioni=iterazioni)\n        denoised_tab = d.denoised_tab\n        if denoised_tab == tab:\n            return []\n        dimensione = [len(tab),len(tab[0])]   # [y,x]\n        visitato = [[False for _ in range(dimensione[1])] for _ in range(dimensione[0])]\n        is_potenziale_denoised = [[tab[y][x]!=denoised_tab[y][x] for x in range(dimensione[1])] for y in range(dimensione[0])]\n        eeei = [[1 if is_potenziale_denoised[y][x] else 0 for x in range(dimensione[1])] for y in range(dimensione[0])]  ###################################\n        #mostra_tab(eeei)\n        oggetti = []\n        for x,y in product(range(dimensione[1]),range(dimensione[0])):\n            if not visitato[y][x] and is_potenziale_denoised[y][x]:\n                obj_colore = denoised_tab[y][x]\n                obj_forma_big = [[0 for _ in range(dimensione[1])] for _ in range(dimensione[0])]\n                obj_tocca_bordo = [False for _ in range(4)]    #up, down, sx, dx\n                def dfs(x,y): #ritorna la lista di coordinate visitate\n                    if denoised_tab[y][x] != obj_colore:\n                        return []\n                    if visitato[y][x] or not is_potenziale_denoised[y][x]:\n                        return []\n                    visitato[y][x] = True\n                    obj_forma_big[y][x] = 1\n                    incrementi = []\n                    #orizzontali\n                    if x>0:\n                        incrementi.append([-1,0])\n                    else:\n                        obj_tocca_bordo[2] = True #tocca sinistra\n                    if x+1<dimensione[1]:\n                        incrementi.append([1,0])\n                    else:\n                        obj_tocca_bordo[3] = True #tocca destra\n                    #verticali\n                    if y>0:\n                        incrementi.append([0,-1])\n                    else:\n                        obj_tocca_bordo[0] = True #tocca sopra\n                    if y+1<dimensione[0]:\n                        incrementi.append([0,1])\n                    else:\n                        obj_tocca_bordo[1] = True #tocca sotto\n                    #diagonali\n                    if comp_connesse_diagonali:\n                        if x>0 and y>0:\n                            incrementi.append([-1,-1])\n                        if x>0 and y+1<dimensione[0]:\n                            incrementi.append([-1,1])\n                        if x+1<dimensione[1] and y>0:\n                            incrementi.append([1,-1])\n                        if x+1<dimensione[1] and y+1<dimensione[0]:\n                            incrementi.append([1,1])\n                    if self.solo_quadratini:\n                        incrementi = []\n                    punti_visitati = [[y,x]]\n                    for incr_x,incr_y in incrementi:\n                        punti_visitati += dfs(x+incr_x, y+incr_y)\n                    return punti_visitati\n                punti_visitati = dfs(x,y)\n                #qui obj_forma_big contiene la forma giusta in 0 e 1 ma \u00e8 una tabella full-dimension\n                #NOTA: il punto (x,y) appartiene all'oggetto ma non \u00e8 detto che sia in uno dei 4 angoli della forma\n                min_x, max_x, min_y, max_y = dimensione[1], 0, dimensione[0], 0\n                for tmp_x,tmp_y in product(range(dimensione[1]),range(dimensione[0])):\n                    if obj_forma_big[tmp_y][tmp_x]==1:\n                        min_x = min(min_x,tmp_x)\n                        max_x = max(max_x,tmp_x)\n                        min_y = min(min_y,tmp_y)\n                        max_y = max(max_y,tmp_y)\n                obj_dim_x = max_x-min_x+1\n                obj_dim_y = max_y-min_y+1\n                obj_forma = [[0 for _ in range(obj_dim_x)] for _ in range(obj_dim_y)]\n                for tmp_x,tmp_y in product(range(obj_dim_x),range(obj_dim_y)):\n                    obj_forma[tmp_y][tmp_x] = obj_forma_big[min_y+tmp_y][min_x+tmp_x]\n                obj_forma = tuple( tuple(row) for row in obj_forma)\n                #qui obj_forma contiene la forma giusta in 0 e 1 ritagliata in modo da non avere colonne o righe di soli 0\n                obj_posizione = (obj_dim_y\/2 + min_y, obj_dim_x\/2 + min_x)\n\n                oggetto = Oggetto(forma=obj_forma, colore=obj_colore, posizione=obj_posizione,\n                                      tocca_bordo=obj_tocca_bordo)\n                denoisati=set()\n                for p in punti_visitati:\n                    denoisati.add(self.map_tab_to_obj[p[0]][p[1]])\n                #if len(denoisati)>1:\n                #    print([ogg.to_text() for ogg in denoisati])\n                #    print('DENOISER CHE CAZZO FAI') #################################### aggiungere un collegamento ai vecchi ogg???\n                for ogg_predenoisss in denoisati:\n                    ogg_predenoisss.figli.add(oggetto)\n                    ogg_predenoisss.is_noise = True\n                oggetto.is_denoised = True\n                #print('ASTRAGGO OGGETTO',oggetto.to_text())\n                oggetti.append(oggetto)\n        return oggetti\n    \n    def trova_oggetto_piu_vicino_di_colore_diverso(self,oggetto_start):\n        distanze = [[100000000 for _ in range(self.shape[1])] for _ in range(self.shape[0])]\n        max_poss_dist = max(self.shape[0],self.shape[1])\n        def dfs(x,y,distanza_percorsa):                  #fa schifo la DFS!! va fatta una bfs \n            if distanza_percorsa >= distanze[y][x]:\n                return\n            if distanza_percorsa > max_poss_dist:\n                return\n            distanze[y][x] = distanza_percorsa\n            incrementi = []\n            if x>0:\n                incrementi.append([-1,0])\n            if x+1<self.shape[1]:\n                incrementi.append([1,0])\n            if y>0:\n                incrementi.append([0,-1])\n            if y+1<self.shape[0]:\n                incrementi.append([0,1])\n            if self.comp_connesse_diagonali:\n                if x>0 and y>0:\n                    incrementi.append([-1,-1])\n                if x>0 and y+1<self.shape[0]:\n                    incrementi.append([-1,1])\n                if x+1<self.shape[1] and y>0:\n                    incrementi.append([1,-1])\n                if x+1<self.shape[1] and y+1<self.shape[0]:\n                    incrementi.append([1,1])\n                \n            for incr_x,incr_y in incrementi:\n                dfs(x+incr_x, y+incr_y, distanza_percorsa+1)\n                \n        for x,y in product(range(self.shape[1]),range(self.shape[0])):\n            if self.map_tab_to_obj[y][x] is oggetto_start:\n                dfs(x,y,0)\n        \n        min_dist = 1000000\n        oggetto_bbbono = None\n        for x,y in product(range(self.shape[1]),range(self.shape[0])):\n            if distanze[y][x]>=0 and self.map_tab_to_obj[y][x].colore!=oggetto_start.colore and not self.map_tab_to_obj[y][x].tocca(oggetto_start):  #seleziono punti NON attaccati e di colore diverso\n                if distanze[y][x] < min_dist:\n                    #print('nuova min_dist',min_dist,'in',y,x)\n                    oggetto_bbbono = self.map_tab_to_obj[y][x]\n                    min_dist = distanze[y][x]\n                elif distanze[y][x] == min_dist: #se ce n'\u00e8 pi\u00f9 di uno alla stessa distanza allora non \u00e8 significativo\n                    #print('nane',y,x)\n                    if self.map_tab_to_obj[y][x] is not oggetto_bbbono:\n                        oggetto_bbbono = None\n                \n        return oggetto_bbbono\n                \n    def trova_oggetti_shape_multiplier(self):\n        oggetti = []\n        for y,row in enumerate(self.tab):\n            for x,colore in enumerate(row):\n                new_pos = (y*self.shape[0], x*self.shape[1])\n                oggetti.append(Oggetto(colore=colore, posizione=new_pos, is_shape_mult=True))\n                #dimmezzi = (y*self.shape[0], x*self.shape[1])\n                #forma = tuple( tuple(1 for _ in range(2*dimmezzi[1])) for _ in range(2*dimmezzi[0]))\n                #print(dimmezzi, forma)\n                #oggetti.append(Oggetto(forma=forma, colore=colore, is_shape_mult=True))\n        return oggetti\n          \n    \n    ##################################################################\n    # FUNZIONI PER vedere insieme tutte le forme (senza ripetizioni) #\n    def stampa(self):\n        #print(self.dimensione)\n        forme = list(self.forma.keys())\n        num_forme = len(forme)\n        if num_forme>0:\n            cmap = colors.ListedColormap(['white', '#000000'])\n            norm = colors.Normalize(vmin=0, vmax=1)\n            fig,ax = plt.subplots(1, num_forme, figsize=(3*num_forme,3))\n            for i in range(num_forme):     \n                this_forma = forme[i]\n                ax_infame = ax[i] if num_forme>=2 else ax \n                ax_infame.imshow(forme[i], cmap=cmap, norm=norm)\n                ax_infame.grid(True,which='both',color='lightgrey', linewidth=0.5)    \n                ax_infame.set_yticks([x-0.5 for x in range(1+len(this_forma))])\n                ax_infame.set_xticks([x-0.5 for x in range(1+len(this_forma[0]))]) \n                ax_infame.set_yticklabels([])    \n                ax_infame.set_xticklabels([])\n                colori_forma = set()\n                for oggetto in self.forma[this_forma]:\n                    colori_forma.add(oggetto.colore)\n                ax_infame.set_title('Occorrenze = '+str(len(self.forma[this_forma])) + '   Colori = '+str(colori_forma))\n            plt.tight_layout()\n            plt.show()  \n            \n    \n    ################################################\n    # FUNZIONI PER iterare su oggetti da risolvere #\n    def esistono_oggetti_risolvibili_non_risolti(self,input_formacolore_e_AB):\n        #print('esiste? ',self.list_obj)\n        for oggetto in self.list_obj:\n            if oggetto.is_risolvibile and not oggetto.is_risolto and input_formacolore_e_AB[oggetto][0]!=0:\n                return True\n        return False\n    def get_first_obj_risolvibile_non_risolto(self,input_formacolore_e_AB): \n       #prima priorita, cio\u00e8 prima ogg standard e poi splittati comeinput\n        #restituisce prima oggetti che hanno forma e colore dati da 1 solo ogg_input e poi quelli a cui ne servono 2\n        # tra questi, prima quelli che non hanno bisogno di rotazioni\n        #  tra questi prima i non neri poi i neri\n        #@@@@@@@@@@@@@@@@@@ dai la priorit\u00e0 a oggetti 'meno comuni'\n        #\n        for num_input in [1,2]:\n            for need_rotation in [False,True]:\n                #cio\u00e8 prendo in ordine: (input 1 no rot),(input 1 si rot),(input 2 no rot),(input 2 si rot)         \n                for nero in [False,True]:\n                    for priorita in [1,2]:\n                        for oggetto in self.list_obj:\n                            if oggetto.is_risolvibile and not oggetto.is_risolto and input_formacolore_e_AB[oggetto][0]==num_input and input_formacolore_e_AB[oggetto][4]==priorita:\n                                if (nero and oggetto.colore==0) or (not nero and oggetto.colore!=0):\n                                    if need_rotation and len(input_formacolore_e_AB[oggetto][3])==0:\n                                        print('maaaaaaa NNAGGIAAAA A QUEL PORCONEEE')\n                                        print(oggetto.to_text(),input_formacolore_e_AB[oggetto])\n                                    if (not need_rotation and 0 in input_formacolore_e_AB[oggetto][3]) or (need_rotation and 0 not in input_formacolore_e_AB[oggetto][3]):\n                                        return oggetto\n                        \n        return None\n        \n    #######################################################\n    # FUNZIONI PER USARE FUNZIONI BAU (le definisco dopo) #\n    '''def possibili_oggetti_input_per(self,fun):\n        possibili_oggetti_input = elenca_solo_sottosequenze_di(self.list_obj, cardinalita=fun.vero_numero_input)\n        if fun.is_oggB_None:\n            possibili_oggetti_input = [[oggetti_input[0]] + [None] + oggetti_input[1:] for oggetti_input in possibili_oggetti_input]\n        return possibili_oggetti_input'''\n\n    def find_obj_in_tab(self,forma,colore,posizione,g,ritorna_solo_coperture_totali=True):\n        #RETURN punti_indovinati, punti_sbagliati, oggetti_risolti (completati)\n        # pu\u00f2 sbagliare, cio\u00e8 andare su caselle di colori diversi        ---> punti_sbagliati > 0\n        # (pu\u00f2 andare su caselle di oggetti diversi ma non sbagliare)?\n        # pu\u00f2 coprire interamente un oggetto,                        \n        # pu\u00f2 coprire parzialmente un oggetto,\n        # pu\u00f2 uscire totalmente dall'immagine,                      ---> punti_sbagliati = punti_indovinati = 0\n        #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n        #da aggiungere eventuali oggetti linked\n        sbaglia = False #sbaglia se crea anche solo un pixel di colore sbagliato\n        esce = False #esce se crea una forma che sta totalmente fuori da shape output\n        incompleto = False\n        \n        dim_x_f, dim_y_f = len(forma[0]), len(forma)\n        dim_y_f, dim_x_f = geometry[g](0,0,(dim_y_f,dim_x_f),to_shape=True) #shape forma eventualmente ruotata\n        dim_x_t, dim_y_t = self.shape[1], self.shape[0]\n        x_upsx = posizione[1] - dim_x_f\/2\n        y_upsx = posizione[0] - dim_y_f\/2\n        if x_upsx != int(x_upsx) or y_upsx != int(y_upsx):\n            #print('MANNAGGIA A GESU E ALLA POSIZIONE NON INTERA') #######################################LO VISITA SPESSISSIMO ocho anche al verifica_if\n            return 0, 1, []     #la posizione non torna con la dimensione della forma \n        else:\n            x_upsx, y_upsx = int(x_upsx), int(y_upsx)\n        \n        punti_visti = 0\n        punti_sbagliati = 0\n        punti_indovinati = 0\n        oggetti_intersecati = set()\n        xs = range(max(x_upsx,0), min(x_upsx+dim_x_f, dim_x_t))\n        ys = range(max(y_upsx,0), min(y_upsx+dim_y_f, dim_y_t))\n        for x,y in product(xs,ys): #coordinate di tab nell'intersezione con forma ruotata\n            point_in_rot_form = (y-y_upsx,x-x_upsx)\n            point_in_orig_form = geometry_inv[g](point_in_rot_form[0],point_in_rot_form[1],(dim_y_f,dim_x_f))\n            if forma[point_in_orig_form[0]][point_in_orig_form[1]]==1:\n                punti_visti += 1\n                ogg_in_quel_punto = self.map_tab_to_obj[y][x]\n                if ogg_in_quel_punto.colore!=colore:\n                    sbaglia=True\n                    punti_sbagliati += 1\n                else:\n                    oggetti_intersecati.add(ogg_in_quel_punto)\n                    punti_indovinati += 1\n        oggetti_intersecati = list(oggetti_intersecati) #con lo stesso colore\n        \n        #print(punti_visti,punti_sbagliati,punti_indovinati,oggetti_intersecati)\n        \n        if punti_visti==0: #esce\n            return 0,0,[]\n        if len(oggetti_intersecati)==0: #non indovina nemmeno un punto\n            return 0,punti_sbagliati,[]\n        if len(oggetti_intersecati)==1:\n            if punti_indovinati==oggetti_intersecati[0].area: #copre un intero oggetto e non indovina altri punti\n                return punti_indovinati, punti_sbagliati, oggetti_intersecati #ocho punti_sbagliati pu\u00f2 essere >0\n            elif punti_indovinati<oggetti_intersecati[0].area: #copre parzialmente un oggetto e non indovina altri punti\n                if ritorna_solo_coperture_totali:\n                    #print('check aree',punti_indovinati,oggetti_intersecati[0].area, oggetti_intersecati[0].to_text())\n                    return punti_indovinati, punti_sbagliati, []\n                else:\n                    return punti_indovinati, punti_sbagliati, oggetti_intersecati\n            else:\n                print('GROSSO PROBLEMA O ALLA MAPPA TAB_TO_OBJ O A QUALCHE ALTRO GESU CRISTO')\n        if len(oggetti_intersecati)>1:\n            somma_aree = 0\n            for ogg_inter in oggetti_intersecati:\n                somma_aree += ogg_inter.area\n            if punti_indovinati==somma_aree:\n                return punti_indovinati, punti_sbagliati, oggetti_intersecati #ocho punti_sbagliati pu\u00f2 essere >0\n            elif punti_indovinati<somma_aree:\n                if ritorna_solo_coperture_totali:\n                    return punti_indovinati, punti_sbagliati, [] #in realt\u00e0 potrebbe esserci qualcuno tra questi oggetti coperto totalmente\n                else:\n                    return punti_indovinati, punti_sbagliati, oggetti_intersecati\n            else:\n                print('GROSSO PROBLEMA O ALLA MAPPA TAB_TO_OBJ O A QUALCHE ALTRO GESU CRISTO')\n            \n        \n    \n    \n##############################\n#  DEFINISCO LA CLASSE TASK  #\n##############################\nclass Task:\n    def __init__(self,task,comp_connesse_diagonali=True,reflected=False,solo_quadratini=False):\n        self.original_task = task\n        self.solo_quadratini = solo_quadratini\n        \n        self.train_size = len(task['train'])\n        self.train = task['train']\n        self.test_size = len(task['test'])\n        self.test = task['test']\n        \n        shape_mult_train, shape_mult_test = self.find_shape_mult_se_esistono()\n        \n        self.trainIMM = []      #lista di dizionari con key 'input' e 'output' con valori in class_Immagine\n        for n_train in range(self.train_size):\n            self.trainIMM.append({})\n            for in_or_out in ['input', 'output']:\n                tab = task['train'][n_train][in_or_out]     #tabelle raw\n                is_input = in_or_out=='input'\n                if not reflected:\n                    self.trainIMM[n_train][in_or_out] = Immagine(tab, comp_connesse_diagonali=comp_connesse_diagonali, solo_quadratini=solo_quadratini,\n                                                                 add_ogg_non_neri=is_input and not solo_quadratini, add_ogg_shape_mul=shape_mult_train[n_train] if is_input else None)\n                else:\n                    reflected_tab = apply_transf(geometry[5],tab)\n                    self.trainIMM[n_train][in_or_out] = Immagine(reflected_tab, comp_connesse_diagonali=comp_connesse_diagonali, solo_quadratini=solo_quadratini,\n                                                                 add_ogg_non_neri=is_input and not solo_quadratini, add_ogg_shape_mul=shape_mult_train[n_train] if is_input else None)\n                \n        self.testIMM = []      #lista di dizionari con key 'input' e 'output' con valori in class_Immagine\n        for n_test in range(self.test_size):\n            self.testIMM.append({})\n            for in_or_out in ['input', 'output']:\n                if in_or_out in task['test'][n_test].keys():\n                    tab = task['test'][n_test][in_or_out]     #tabelle raw\n                    is_input = in_or_out=='input'\n                    if not reflected:\n                        self.testIMM[n_test][in_or_out] = Immagine(tab, comp_connesse_diagonali=comp_connesse_diagonali, solo_quadratini=solo_quadratini,\n                                                                   add_ogg_non_neri=is_input and not solo_quadratini, add_ogg_shape_mul=shape_mult_test[n_test] if is_input else None)\n                    else:\n                        reflected_tab = apply_transf(geometry[5],tab)\n                        self.testIMM[n_test][in_or_out] = Immagine(reflected_tab, comp_connesse_diagonali=comp_connesse_diagonali, solo_quadratini=solo_quadratini,\n                                                                   add_ogg_non_neri=is_input and not solo_quadratini, add_ogg_shape_mul=shape_mult_test[n_test] if is_input else None)\n            \n        #aggiusto parametro .is_come_input degli oggetti\n        for immagine_in,immagine_out in [(self.trainIMM[i]['input'],self.trainIMM[i]['output']) for i in range(self.train_size)]: #+[(self.testIMM[i]['input'],self.testIMM[i]['output']) for i in range(self.test_size)]:\n            for oggetto_out in immagine_out.list_obj:\n                _,errori,_ = immagine_in.find_obj_in_tab(oggetto_out.forma,oggetto_out.colore,oggetto_out.posizione,0,ritorna_solo_coperture_totali=False)\n                if errori == 0:\n                    oggetto_out.is_come_input = True\n                \n        #forme e colori comuni e tutti i TRAIN (ma poi li flaggo anche nel TEST)\n        self.specific = {}\n        self.specific['IF'] = {}\n        self.specific['IF']['forms'] = self.find_common_forms('input')\n        self.specific['IF']['colors'] = self.find_common_colors('input')\n        self.specific['ASS'] = {}\n        self.specific['ASS']['forms'] = self.find_common_forms('output')\n        self.specific['ASS']['colors'] = self.find_common_colors('output')\n        \n        immagini_input_train_test = [self.trainIMM[i]['input'] for i in range(self.train_size)] + [self.testIMM[i]['input'] for i in range(self.test_size)]\n        #flaggo nell'immagine le forme e i colori specifici degli input\n        for forma_specifica in self.specific['IF']['forms']:\n            for immagine in immagini_input_train_test:\n                for oggetto in immagine.get_obj_with(forma=forma_specifica):\n                    oggetto.is_specific_IF_form=True\n        for colore_specifico in self.specific['IF']['colors']:\n            for immagine in immagini_input_train_test:\n                for oggetto in immagine.get_obj_with(colore=colore_specifico):\n                    oggetto.is_specific_IF_colors=True\n        #flaggo nell'immagine le forme e i colori specifici degli output, aggiungendoli all'input se non sono gi\u00e0 presenti\n        for forma_specifica in self.specific['ASS']['forms']:\n            colori_di_questa_forma_specifica = list(self.find_colors_of(forma_specifica,'output'))\n            colore = colori_di_questa_forma_specifica[0] if len(colori_di_questa_forma_specifica)==1 else None\n            posizioni_di_questa_forma_specifica = list(self.find_positions_of(forma_specifica,'output'))\n            posizione = posizioni_di_questa_forma_specifica[0] if len(posizioni_di_questa_forma_specifica)==1 else None\n            for immagine in immagini_input_train_test:\n                oggetti_con_quella_forma = immagine.get_obj_with(forma=forma_specifica)                    \n                if len(oggetti_con_quella_forma)==0:\n                    immagine.aggiungi(Oggetto(forma=forma_specifica,colore=colore,posizione=posizione,is_specific_ASS_form=True))\n                else:\n                    for oggetto in oggetti_con_quella_forma:\n                        oggetto.is_specific_ASS_form=True\n                    if posizione is not None:\n                        immagine.aggiungi(Oggetto(forma=forma_specifica,colore=colore,posizione=posizione,is_specific_ASS_form=True)) # non so se \u00e8 una buona ideaaaa @@@@@@@@@@@@@@@@@@@@@@@@@@\n        for colore_specifico in self.specific['ASS']['colors']:\n            #forme_di_questo_colore_specifico = list(self.find_forms_of(colore_specifico,'output'))\n            #forma = forme_di_questo_colore_specifico[0] if len(forme_di_questo_colore_specifico)==1 else None\n            for immagine in immagini_input_train_test:\n                oggetti_con_quel_colore = immagine.get_obj_with(colore=colore_specifico)\n                if len(oggetti_con_quel_colore)==0:\n                    immagine.aggiungi(Oggetto(colore=colore_specifico,is_specific_ASS_color=True))\n                else:\n                    for oggetto in oggetti_con_quel_colore:\n                        oggetto.is_specific_ASS_color=True\n        self.numero_totale_oggetti_out = 0\n        for immagine in [self.trainIMM[i]['output'] for i in range(self.train_size)]:\n            self.numero_totale_oggetti_out += len(immagine.list_obj)\n        self.numero_totale_oggetti_in = 0\n        for immagine in [self.trainIMM[i]['input'] for i in range(self.train_size)]:\n            self.numero_totale_oggetti_in += len(immagine.list_obj)\n        self.somma_totale_aree_oggetti_in = 0\n        for immagine in [self.trainIMM[i]['input'] for i in range(self.train_size)]:\n            for ogg in immagine.list_obj:\n                if ogg.area is not None:\n                    self.somma_totale_aree_oggetti_in += ogg.area\n            \n        immagini_input_num_ogg = [(i, len(self.trainIMM[i]['input'].list_obj)) for i in range(self.train_size)]\n        immagini_input_num_ogg.sort(key = lambda x: x[1])\n        self.train_input_num_ogg_sorted = [a[0] for a in immagini_input_num_ogg]\n        \n    def aggiungi_oggetti_denoised(self,iterazioni=2):\n        for immagine_in in [self.trainIMM[i]['input'] for i in range(self.train_size)]+[self.testIMM[i]['input'] for i in range(self.test_size)]:\n            immagine_in.aggiungi_oggetti_denoised(iterazioni=iterazioni)\n    \n    def find_shape_mult_se_esistono(self): #prima di creare le Immagini\n        poca_nana = ([None for _ in range(self.train_size)], [None for _ in range(self.test_size)])\n        shapes_mult_boni_train = []\n        for n in range(self.train_size):\n            shape_in = (len(self.train[n]['input']),len(self.train[n]['input'][0]))\n            shape_out = (len(self.train[n]['output']),len(self.train[n]['output'][0]))\n            shape_mult = (int(shape_out[0]\/shape_in[0]), int(shape_out[1]\/shape_in[1])) \n            if shape_mult==shape_in:\n                shapes_mult_boni_train.append(shape_mult)\n            else:\n                return poca_nana\n        shapes_mult_boni_test = []\n        for n in range(self.test_size):\n            shape_in = (len(self.test[n]['input']),len(self.test[n]['input'][0])) #non devo usare l'output perch\u00e9 non ce l'ho!!\n            shapes_mult_boni_test.append(shape_in)\n        return shapes_mult_boni_train, shapes_mult_boni_test\n            \n    ##########################################################################################\n    # trova COLORI e FORME comuni a tutti gli input e comuni a tutti gli output    nel TRAIN #\n    def find_common_colors(self,in_or_out):\n        common_colors=set(range(0,10))\n        for i in range(self.train_size):\n            tab = self.train[i][in_or_out]\n            case_colors = set()\n            for row in tab:\n                for element in row:\n                    case_colors.add(element)\n            common_colors = common_colors.intersection(case_colors)\n        return common_colors\n    def find_common_forms(self,in_or_out): \n        #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n        #da aggiungere -------> forme comuni a meno di rotazioni <---------\n        immagine = self.trainIMM[0][in_or_out]\n        common_forms=set(immagine.forma.keys())\n        for i in range(1,self.train_size):\n            immagine = self.trainIMM[i][in_or_out]\n            common_forms = common_forms.intersection(set(immagine.forma.keys()))\n        return common_forms\n    def find_colors_of(self,forma,in_or_out):\n        colori_di_questa_forma_specifica = set()\n        for immagine in [self.trainIMM[i][in_or_out] for i in range(self.train_size)]:\n            oggetti_con_quella_forma = immagine.get_obj_with(forma=forma)\n            for oggetto in oggetti_con_quella_forma:\n                colori_di_questa_forma_specifica.add(oggetto.colore)\n        return colori_di_questa_forma_specifica\n    def find_positions_of(self,forma,in_or_out):\n        posizioni_di_questa_forma_specifica = set()\n        for immagine in [self.trainIMM[i][in_or_out] for i in range(self.train_size)]:\n            oggetti_con_quella_forma = immagine.get_obj_with(forma=forma)\n            for oggetto in oggetti_con_quella_forma:\n                posizioni_di_questa_forma_specifica.add(oggetto.posizione)\n        return posizioni_di_questa_forma_specifica\n    def find_forms_of(self,colore,in_or_out):\n        forme_di_questo_colore_specifico = set()\n        for immagine in [self.trainIMM[i][in_or_out] for i in range(self.train_size)]:\n            oggetti_con_quel_colore = immagine.get_obj_with(colore=colore)\n            for oggetto in oggetti_con_quel_colore:\n                forme_di_questo_colore_specifico.add(oggetto.forma)\n        return forme_di_questo_colore_specifico\n    \n    \n    ################################################\n    # FUNZIONI PER iterare su oggetti da risolvere #\n    def metti_tutti_oggetti_risolvibili(self):\n        for i in range(self.train_size):\n            immagine_out = self.trainIMM[i]['output']\n            for oggetto in immagine_out.list_obj:\n                oggetto.is_risolvibile=True\n    def get_lista_colori_non_risolti(self):\n        oggetti = []\n        colori = set()\n        for i in range(self.train_size):\n            immagine_out = self.trainIMM[i]['output']\n            for oggetto in immagine_out.list_obj:\n                if not oggetto.is_risolto:\n                    colori.add(oggetto.colore)\n                    oggetti.append(oggetto)\n        return list(colori)\n            \n    \n    ####################################################\n    # FUNZIONE PER stampare tutte le immagini del task #\n    def stampa(self):\n        #stampa Input\n        da_stampare = 'Input'\n        if len(self.specific['IF']['colors'])>0:\n            da_stampare += '    - colori specifici ='+str(self.specific['IF']['colors'])\n        if len(self.specific['IF']['forms'])>0:\n            da_stampare += '    - forme specifiche ='+str(self.specific['IF']['forms'])\n        print(da_stampare)\n        for i in range(self.train_size):\n            self.trainIMM[i]['input'].stampa()\n        #stampa Output\n        da_stampare = 'Output'\n        if len(self.specific['ASS']['colors'])>0:\n            da_stampare += '    - colori specifici ='+str(self.specific['ASS']['colors'])\n        if len(self.specific['ASS']['forms'])>0:\n            da_stampare += '    - forme specifiche ='+str(self.specific['ASS']['forms'])\n        print(da_stampare)\n        for i in range(self.train_size):\n            self.trainIMM[i]['output'].stampa()\n    \n    ############################################################\n    # FUNZIONI PER VERIFICARE FUNZIONI BAU (le definisco dopo) #\n    def check_funzione_copertura(self,fun,test=False,solo_coperture_totali=True, with_modulo=False):\n        oggetti_trovati = set()\n        errori_fatti = 0\n        caselle_coperte = 0\n        immagini_coperte = 0\n        numero_coppie = self.train_size if not test else self.test_size\n        for i in range(numero_coppie):\n            immagine_coperta = False #coperta significa che ci ho risolto almeno un oggetto\n            immagine_in = self.trainIMM[i]['input'] if not test else self.testIMM[i]['input']\n            immagine_out = self.trainIMM[i]['output'] if not test else self.testIMM[i]['output']\n            for forma,colore,posizione in fun.applica_a_immagine(immagine_in):\n                if with_modulo:\n                    posizione = (posizione[0] % immagine_out.shape[0], posizione[1] % immagine_out.shape[1])\n                #print('         cago',posizione,colore,forma)\n                punti_indovinati, punti_sbagliati, oggetti_output = immagine_out.find_obj_in_tab(forma,colore,posizione,fun.geom,\n                                                                                ritorna_solo_coperture_totali=solo_coperture_totali)\n                #fatti ritornare quali sono i punti indovinati, magari copre un intero oggetto in pi\u00f9 parti!! @@@@@@@@@@@@@@@@@@@@@@@@@@@@ (51)\n                caselle_coperte += punti_indovinati\n                errori_fatti += punti_sbagliati\n                #if errori_fatti>0:\n                #    return errori_fatti, caselle_coperte, immagini_coperte, list(oggetti_trovati)\n                if len(oggetti_output)>0:\n                    immagine_coperta=True\n                    for oggetto_output in oggetti_output:\n                        oggetti_trovati.add(oggetto_output)\n            if immagine_coperta:\n                immagini_coperte += 1\n        fun.errori_fatti = errori_fatti\n        fun.caselle_coperte = caselle_coperte\n        fun.immagini_coperte = immagini_coperte\n        fun.oggetti_trovati = oggetti_trovati\n        return errori_fatti, caselle_coperte, immagini_coperte, list(oggetti_trovati)\n    \n    ","a709e3e6":"task_file = str(training_path \/ training_tasks[7])\nwith open(task_file, 'r') as f:\n    task = json.load(f)\nplot_task(task)\n\nt = Task(task,comp_connesse_diagonali=True)\n\nimmagine = t.trainIMM[0]['output']\nfor oggetto in immagine.list_obj:\n    oggetto.stampa()","c564b0f3":"task_file = str(training_path \/ training_tasks[1])\nwith open(task_file, 'r') as f:\n    task = json.load(f)\nplot_task(task)\n\nt = Task(task,comp_connesse_diagonali=True)\n\nfor n,immagine in enumerate([t.trainIMM[i]['output'] for i in range(5)] + [t.testIMM[0]['output']]):\n    print('Immagine ',n)\n    immagine.stampa()","84fe35c6":"###########################\n#  DEFINISCO LA CLASSE IF #\n###########################\nclass Predicato:\n    def __init__(self, attributo='', index=None, val=None, applicazione=None, appl_to_text='',complexity=1):\n        self.attributo = attributo\n        self.index = index\n        self.val = val\n        self.applicazione = applicazione\n        self.appl_to_text = appl_to_text\n        self.complexity = complexity\n    def is_True(self,oggetto):\n        if oggetto is None: #i None ritornano sempre False\n            return False\n        attr = getattr(oggetto, self.attributo)\n        if attr is None: #i None ritornano sempre False\n            return False\n        if self.index is not None:\n            attr = attr[self.index]\n            \n        if self.applicazione is None: #cio\u00e8 attr \u00e8 gi\u00e0 un booleano\n            return attr\n        \n        if self.val is None:\n            statement = self.applicazione(attr)\n        else:\n            statement = self.applicazione(attr,self.val)\n        return statement\n    def to_text(self):\n        ogg_to_text = 'oggetto.'+self.attributo+' ' if self.index is None else 'oggetto.'+self.attributo+'['+str(self.index)+'] '\n        val_to_text = '' if self.val is None else ' '+str(self.val)\n        return ogg_to_text + self.appl_to_text + val_to_text\n    def stampa(self):\n        print(self.to_text())\n    \n    @staticmethod\n    def genera(t):\n        #GENERA IF SINGOLI\n        predicati = []\n\n        #colori\n        #predicati += [Predicato(attributo='colore', val=colore, applicazione=lambda x,val: x is val, appl_to_text='is',complexity=1.9) for colore in range(10)]\n        predicati.append(Predicato(attributo='colore', applicazione=lambda x: x!=0, appl_to_text='non nero'))  # non nero\n        #predicati.append(Predicato(attributo='colore', applicazione=lambda x: x!=5, appl_to_text='non grigio'))  # non nero\n        predicati.append(Predicato(attributo='is_rarest_color'))   #predicati.append(Predicato(attributo='is_special_color'))\n        predicati.append(Predicato(attributo='is_common_color'))\n        #predicati += [Predicato(attributo='area_order_for_color',val=order, applicazione=lambda x,val: x is val, appl_to_text='is',complexity=1.5) for order in range(1)]\n        #predicati += [Predicato(attributo='area_order_for_color_rev',val=order, applicazione=lambda x,val: x is val) for order in range(1)]\n        predicati.append(Predicato(attributo='is_colorful'))\n\n        #posizioni\n        #predicati.append(Predicato(attributo='tocca_un_bordo', applicazione=lambda x: x is True, appl_to_text='is True',complexity=1.5))\n        #predicati.append(Predicato(attributo='tocca_un_bordo', applicazione=lambda x: x is False, appl_to_text='is False',complexity=1.5))\n        predicati.append(Predicato(attributo='tocca_tutti_i_bordi', applicazione=lambda x: x is True, appl_to_text='is True',complexity=0.9))\n        predicati.append(Predicato(attributo='tocca_tutti_i_bordi', applicazione=lambda x: x is False, appl_to_text='is False',complexity=1.5))\n        #predicati += [Predicato(attributo='tocca_solo_bordo', index=b,complexity=3) for b in range(4)]\n        #predicati.append(Predicato(attributo='tocca_bordo_ORIZ',complexity=3))\n        #predicati.append(Predicato(attributo='tocca_bordo_VERT',complexity=3))\n        predicati.append(Predicato(attributo='is_lunghissimo',complexity=1))\n        predicati.append(Predicato(attributo='is_larghissimo',complexity=1))\n        \n        #predicati += [Predicato(attributo='posizione', index=0, val=pos, applicazione=lambda x,val: x is val) for pos in range(3)]\n        #predicati += [Predicato(attributo='posizione', index=1, val=pos, applicazione=lambda x,val: x is val) for pos in range(3)]\n\n        #forme\n        #predicati += [Predicato(attributo='forma',val=forma, applicazione=lambda x,val: x==val, appl_to_text='==',complexity=1.5) for forma in t.specific['IF']['forms'].union(t.specific['ASS']['forms'])]\n        #predicati.append(Predicato(attributo='contiene_dueXdue', applicazione=lambda x: x is False, appl_to_text='is False',complexity=3)) # come dire is_linea\n        #predicati.append(Predicato(attributo='is_stecca'))\n        #predicati.append(Predicato(attributo='is_cornice',complexity=3))\n        predicati.append(Predicato(attributo='is_rettangolo',complexity=1.5))\n        predicati.append(Predicato(attributo='is_rettangolo', applicazione=lambda x: x is False, appl_to_text='is False',complexity=1.5))\n        #predicati.append(Predicato(attributo='is_quadratoso',complexity=1.5))\n        #predicati.append(Predicato(attributo='is_bucato',complexity=1.5))\n        #predicati += [Predicato(attributo='numero_buchi', val=n, applicazione=lambda x,val: x is val, appl_to_text='is',complexity=3) for n in range(1,4)]\n        predicati.append(Predicato(attributo='is_common_form',complexity=1.5))\n        #predicati.append(Predicato(attributo='is_common_form', applicazione=lambda x: x is False, appl_to_text='is False',complexity=3))\n        ##predicati += [Predicato(attributo='area',val=rang, applicazione=lambda x,val: x in val, appl_to_text='in') for rang in [range(2,5), range(4,8), range(8,16), range(6,20)]] ##########\n        #predicati += [Predicato(attributo='area_order',val=order, applicazione=lambda x,val: x is val, appl_to_text='is',complexity=1.6) for order in range(4)]\n        #predicati += [Predicato(attributo='area_order_rev',val=order, applicazione=lambda x,val: x is val, appl_to_text='is',complexity=1.6) for order in range(1)]\n        \n        #predicati.append(Predicato(attributo='is_denoised',complexity=0.9))\n        #predicati.append(Predicato(attributo='is_noise',complexity=0.9))\n        #predicati.append(Predicato(attributo='is_noise', applicazione=lambda x: x is False, appl_to_text='is False',complexity=0.9)) \n        \n        predicati.append(Predicato(attributo='is_shape_mult',complexity=0.9))\n        \n        #is specific IF ??  (gli specific ASS li assegno dopo solo a oggA e oggB)\n        #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n        # is L\n        # is C\n        # is cornice\n        # non contiene snodi, cio\u00e8 \u00e8 un percorso da uno a un altro\n        # is convesso e is not convesso (ma non contando i bucato)\n        # is convesso up\/down\/sx\/dx\n        #  frequenza order of forms \n        #  frequenza order of forms per color\n        #  frequenza order of colors per forms (not None solo se una forma compare pi\u00f9 di 3 volte?)   task 390\n        \n        # order per numero di buchi\n        \n        #predicati.append(Predicato(attributo='is_for_shape_out')) #is oggetto per shape output #GRAVISSIMO ERRORE! CE L'HO SOLO PER I TRAIN\n        \n        \n        def elimina_predicati_inutili(predicati,t):\n            #elimina i predicati che valgono sempre e mai     e solo una volta\n            new_predicati = []\n            for predicato in predicati:\n                vale_sempre=True\n                vale_mai=True\n                vale_massimo_una_volta=True\n                for immagine_in in [t.trainIMM[i]['input'] for i in range(t.train_size)]:\n                    for oggetto in immagine_in.list_obj:\n                        if predicato.is_True(oggetto):\n                            if not vale_mai:\n                                vale_massimo_una_volta=False\n                            vale_mai = False\n                        else:\n                            vale_sempre = False\n                if not vale_sempre and not vale_mai and not vale_massimo_una_volta:\n                    new_predicati.append(predicato)\n            return new_predicati\n        \n        def elimina_predicati_uguali(predicati,t):\n            new_predicati = []\n            for i in range(len(predicati)):\n                ne_esiste_uno_uguale = False\n                for j in range(i+1,len(predicati)):\n                    p1 = predicati[i]\n                    p2 = predicati[j]\n                    diversi = False\n                    for immagine_in in [t.trainIMM[n]['input'] for n in range(t.train_size)] + [t.testIMM[n]['input'] for n in range(t.test_size)]:\n                        for oggetto in immagine_in.list_obj:\n                            if (p1.is_True(oggetto) and not p2.is_True(oggetto)) or (not p1.is_True(oggetto) and p2.is_True(oggetto)):\n                                diversi=True\n                    if not diversi:\n                        #print(predicati[i].to_text(),'  \u00e8 uguale AAAAAAAAAAAAAAAAAAAAa  ',predicati[j].to_text())\n                        ne_esiste_uno_uguale = True\n                if not ne_esiste_uno_uguale:\n                    #print(predicati[i].to_text(),'    \u00e8 unico')\n                    new_predicati.append(predicati[i])\n            return new_predicati\n        \n        predicati = elimina_predicati_inutili(predicati, t)\n        predicati = elimina_predicati_uguali(predicati, t)\n        return predicati\n\npredicato_is_specific_ASS_form = Predicato(attributo='is_specific_ASS_form')\npredicato_is_specific_ASS_color = Predicato(attributo='is_specific_ASS_color')\n    \n    \nclass Relazione:\n    def __init__(self, attributo1='', index1=None, attributo2='', index2=None, val=None, applicazione=None, appl_to_text='', complexity=1):\n        self.attributo1 = attributo1\n        self.index1 = index1\n        self.attributo2 = attributo2\n        self.index2 = index2\n        self.val = val\n        self.applicazione = applicazione\n        self.appl_to_text = appl_to_text\n        self.complexity = complexity\n    def is_True(self,ogg1,ogg2):\n        if ogg1 is None or ogg2 is None: # i None ritornano sempre False\n            return False\n        #trovo attr1\n        if self.attributo1=='':\n            attr1 = ogg1\n        else:\n            attr1 = getattr(ogg1, self.attributo1)\n            if attr1 is None: # i None ritornano sempre False\n                return False\n            if self.index1 is not None:\n                attr1 = attr1[self.index1]\n        #trovo attr2\n        if self.attributo2=='':\n            attr2 = ogg2\n        else:\n            attr2 = getattr(ogg2, self.attributo2)\n            if attr2 is None: # i None ritornano sempre False\n                return False\n            if self.index2 is not None:\n                attr2 = attr2[self.index2]\n        \n        if self.val is None:\n            statement = self.applicazione(attr1, attr2)\n        else:\n            statement = self.applicazione(attr1, attr2, self.val)\n        return statement\n    def to_text(self):\n        ogg1_to_text = 'ogg1.'+self.attributo1 if self.index1 is None else 'ogg1.'+self.attributo1+'['+str(self.index1)+']'\n        ogg2_to_text = 'ogg2.'+self.attributo2 if self.index2 is None else 'ogg2.'+self.attributo2+'['+str(self.index2)+']'\n        val_to_text = '' if self.val is None else ' '+str(self.val)\n        return ogg1_to_text+' '+ogg2_to_text+' '+self.appl_to_text+val_to_text\n    def stampa(self):\n        print(self.to_text())\n\n    @staticmethod\n    def genera(t, costanti_posizione=[]):\n        #GENERA IF DOPPI\n        relazioni = []\n\n        relazioni.append(Relazione(attributo1='forma', attributo2='forma', applicazione=lambda x,y: x==y, appl_to_text='=='))\n        relazioni.append(Relazione(attributo1='colore', attributo2='colore', applicazione=lambda x,y: x is y, appl_to_text='is'))\n        relazioni.append(Relazione(attributo1='colore', attributo2='colore', applicazione=lambda x,y: x is not y, appl_to_text='is not'))\n        relazioni.append(Relazione(attributo1='posizione', attributo2='posizione', applicazione=lambda x,y: x==y, appl_to_text='=='))\n        #relazioni.append(Relazione(attributo1='posizione',index1=0, attributo2='posizione',index2=0, applicazione=lambda x,y: x==y, appl_to_text='==')) #troppo generico, forse ci sta metterlo con anche controllo dimmezzi==\n        #relazioni.append(Relazione(attributo1='posizione',index1=1, attributo2='posizione',index2=1, applicazione=lambda x,y: x==y, appl_to_text='=='))\n        #relazioni.append(Relazione(attributo1='posizione_diag',index1=0, attributo2='posizione_diag',index2=0, applicazione=lambda x,y: x==y, appl_to_text='==',complexity=3))\n        #relazioni.append(Relazione(attributo1='posizione_diag',index1=1, attributo2='posizione_diag',index2=1, applicazione=lambda x,y: x==y, appl_to_text='==',complexity=3))\n        relazioni.append(Relazione(applicazione=lambda x,y: x.tocca(y), appl_to_text='tocca(.)',complexity=0.9))\n        relazioni.append(Relazione(applicazione=lambda x,y: not x.tocca(y), appl_to_text='non_tocca(.)'))\n        relazioni.append(Relazione(applicazione=lambda x,y: x.contiene(y), appl_to_text='contiene(.)',complexity=0.9))\n        relazioni.append(Relazione(applicazione=lambda x,y: x.contenuto(y), appl_to_text='contenuto(.)',complexity=0.9))\n        relazioni.append(Relazione(applicazione=lambda x,y: x.possiede(y), appl_to_text='possiede(.)',complexity=0.9))\n        relazioni.append(Relazione(applicazione=lambda x,y: x.appartiene(y), appl_to_text='appartiene(.)',complexity=0.9))\n        relazioni.append(Relazione(applicazione=lambda x,y: x in y.fratelli, appl_to_text='fratelli(.)',complexity=0.9))\n        #relazioni.append(Relazione(applicazione=lambda x,y: x.dista(y,0), appl_to_text='dista0',complexity=0.9))      #solo quadratini\n        #relazioni.append(Relazione(applicazione=lambda x,y: x.dista(y,1), appl_to_text='dista1',complexity=3))      #compl alta\n        #relazioni.append(Relazione(applicazione=lambda x,y: x.dista(y,2), appl_to_text='dista2',complexity=3))\n        #relazioni.append(Relazione(applicazione=lambda x,y: x.dista(y,3), appl_to_text='dista3',complexity=3))\n        relazioni.append(Relazione(applicazione=lambda x,y: x.is_allineato_vert(y), appl_to_text='allineato_vert'))\n        relazioni.append(Relazione(applicazione=lambda x,y: x.is_allineato_oriz(y), appl_to_text='allineato_oriz'))\n\n        #relazioni += [Relazione(attributo1='posizione',index1=0, attributo2='posizione',index2=0, val=cost_pos[0], applicazione=lambda x,y,val: x==y+val, appl_to_text='== +') for cost_pos in costanti_posizione]\n        #relazioni += [Relazione(attributo1='posizione',index1=1, attributo2='posizione',index2=1, val=cost_pos[1], applicazione=lambda x,y,val: x==y+val, appl_to_text='== +') for cost_pos in costanti_posizione]\n\n        relazioni.append(Relazione(attributo1='area', attributo2='area', applicazione=lambda x,y: x<y, appl_to_text='<',complexity=1.9))\n        relazioni.append(Relazione(attributo1='area', attributo2='area', applicazione=lambda x,y: x>y, appl_to_text='>',complexity=1.9))\n        \n        relazioni.append(Relazione(attributo1='posizione',index1=0, attributo2='posizione',index2=0, applicazione=lambda x,y: x>y, appl_to_text='>',complexity=3))\n        relazioni.append(Relazione(attributo1='posizione',index1=1, attributo2='posizione',index2=1, applicazione=lambda x,y: x>y, appl_to_text='>',complexity=3))\n        relazioni.append(Relazione(attributo1='posizione',index1=0, attributo2='posizione',index2=0, applicazione=lambda x,y: x<y, appl_to_text='<',complexity=3))\n        relazioni.append(Relazione(attributo1='posizione',index1=1, attributo2='posizione',index2=1, applicazione=lambda x,y: x<y, appl_to_text='<',complexity=3))\n       \n        # \u00e8 oggetto pi\u00f9 vicino di colore diverso (che non tocca!!)\n        relazioni.append(Relazione(applicazione=lambda ogg1,ogg2: ogg2 is ogg1.piu_vicino_di_colore_diverso, appl_to_text='pi\u00f9 vicino col diverso',complexity=1.5))\n        \n        #potrebbe essere contenuto in forma\n        #potrebbe essere contenuto in buchi della forma\n        \n        \n        def elimina_relazioni_inutili(relazioni,t):\n            #elimina le relazioni che valgono sempre e mai     e solo una volta\n            new_relazioni = []\n            for relazione in relazioni:\n                vale_sempre=True\n                vale_mai=True\n                vale_massimo_una_volta=True\n                for immagine_in in [t.trainIMM[i]['input'] for i in range(t.train_size)]:\n                    for ogg1 in immagine_in.list_obj:\n                        for ogg2 in immagine_in.list_obj:\n                            if ogg1 is not ogg2:\n                                if relazione.is_True(ogg1,ogg2):\n                                    if not vale_mai:\n                                        vale_massimo_una_volta=False\n                                    vale_mai = False\n                                else:\n                                    vale_sempre = False\n                if not vale_sempre and not vale_mai and not vale_massimo_una_volta:\n                    new_relazioni.append(relazione)\n            return new_relazioni\n        def elimina_relazioni_uguali(relazioni,t):\n            new_relazioni = []\n            for i in range(len(relazioni)):\n                ne_esiste_uno_uguale = False\n                for j in range(i+1,len(relazioni)):\n                    r1 = relazioni[i]\n                    r2 = relazioni[j]\n                    diversi = False\n                    for immagine_in in [t.trainIMM[n]['input'] for n in range(t.train_size)] + [t.testIMM[n]['input'] for n in range(t.test_size)]:\n                        for ogg1 in immagine_in.list_obj:\n                            for ogg2 in immagine_in.list_obj:\n                                if ogg1 is not ogg2:\n                                    if (r1.is_True(ogg1,ogg2) and not r2.is_True(ogg1,ogg2)) or (not r1.is_True(ogg1,ogg2) and r2.is_True(ogg1,ogg2)):\n                                        diversi=True\n                    if not diversi:\n                        #print(r1.to_text(),'  \u00e8 uguale AAAAAAAAAAAAAAAAAAAAa  ',r2.to_text())\n                        ne_esiste_uno_uguale = True\n                if not ne_esiste_uno_uguale:\n                    #print(relazioni[i].to_text(),'    \u00e8 unico')\n                    new_relazioni.append(relazioni[i])\n            return new_relazioni\n        \n        relazioni = elimina_relazioni_inutili(relazioni, t)\n        #relazioni = elimina_relazioni_uguali(relazioni, t)\n        return relazioni\n\n        \n        \n#IF TRIPLI??  t 130, 147\n#  @ pos1 sta tra a pos2 e pos3\n\n#IF QUADRUPLI?\n#  @ pos1 - pos2 == pos3 - pos4 (posizione relativa uguale)\n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n##################################\n#  DEFINISCO LA CLASSE FUNZIONI  #\n##################################\nclass FUN:\n    def __init__(self,numero_input, IFs, indexes_supporto_fpos, coefficienti_f_pos_X, coefficienti_f_pos_Y, fpos_const=(0,0), geom=0, is_oggB_None=False, sgn_pos=False):\n\n        if numero_input*3-2 != len(IFs):\n            print('dio can qualcosa non va')\n        self.numero_input = numero_input\n        self.if_singoli = IFs[:numero_input]                          #size = numero_input\n        self.if_doppi_A = IFs[numero_input: 2*numero_input-1]         #size = numero_input - 1\n        self.if_doppi_B = IFs[2*numero_input-1:numero_input*3-3]                      #size = numero_input - 2\n        self.if_doppi_12 = IFs[numero_input*3-3]\n        \n        self.indexes_supporto_fpos = indexes_supporto_fpos\n        self.coefficienti_f_pos = {'x': coefficienti_f_pos_X , 'y': coefficienti_f_pos_Y}  #diz di liste di liste di interi     size=numero_supporto_input x 2\n        self.fpos_const = {'x':fpos_const[1], 'y':fpos_const[0]}  #fpos_const = (y,x)\n        self.sgn_pos = sgn_pos\n        #self.is_simmetric = True\n        #for x,y in zip(self.coefficienti_f_pos['x'],self.coefficienti_f_pos['y']):\n        #    if x!=y:\n        #        self.is_simmetric = False\n    \n        self.geom = geom\n        self.is_oggB_None = is_oggB_None\n        for relazioni in self.if_doppi_B:\n            if len(relazioni)>0:\n                self.is_oggB_None = False\n        self.vero_numero_input = numero_input-1 if self.is_oggB_None else numero_input \n        \n        #calcola COMPLESSITA funzione\n        # prima numero di oggetti in input\n        self.complessita = self.vero_numero_input\n        self.complessita *= 100\n        # poi numero di if totali\n        for ifs in IFs:\n            for condizione in ifs:\n                self.complessita += condizione.complexity\n        self.complessita *= 100\n        #self.complessita *= 3   #cos\u00ec gli IF valgono quanto 3 coeff fpos non nulli\n        # poi numero di coefficienti fpos non nulli\n        for coeffs in coefficienti_f_pos_X+coefficienti_f_pos_Y:\n            for coeff in coeffs:\n                if coeff!=0:\n                    self.complessita +=2\n            if coeffs==(1,0):\n                self.complessita -=1\n                    \n        #parametri assegnati dopo la valutazione con t.check_funzione_copertura\n        self.errori_fatti = 0\n        self.caselle_coperte = 0\n        self.immagini_coperte = 0\n        self.oggetti_trovati = []\n        \n    def get_IFs(self):\n        return self.if_singoli + self.if_doppi_A + self.if_doppi_B + [self.if_doppi_12]\n    \n    def stampa(self):\n        print('fun: di',self.vero_numero_input,'oggetti, complessita=',self.complessita,'       imm=',self.immagini_coperte,'   ogg=',len(self.oggetti_trovati))\n        #stampa oggetto A\n        oggA = '   ogg A'\n        oggA += ' (P)' if (0 in self.indexes_supporto_fpos) else '' \n        for predicato in self.if_singoli[0]:\n            oggA += '   '+predicato.to_text()\n        print(oggA)\n        for relazioni in self.if_doppi_A:\n            con_ogg = '      '\n            for relazione in relazioni:\n                con_ogg += relazione.to_text() + ' '\n            print(con_ogg)\n        #stampa oggetto B\n        if self.is_oggB_None == False:\n            oggB = '   ogg B'\n            oggB += ' (P)' if (1 in self.indexes_supporto_fpos) else '' \n            for predicato in self.if_singoli[1]:\n                oggB += '   '+predicato.to_text()\n            print(oggB)\n            for relazioni in self.if_doppi_B:\n                con_ogg = '      '\n                for relazione in relazioni:\n                    con_ogg += relazione.to_text() + ' '\n                print(con_ogg)\n        #stampa altri oggetti\n        for i in range(2, self.numero_input):\n            ogg = '   ogg '+str(i)\n            ogg += ' (P)' if (i in self.indexes_supporto_fpos) else '' \n            for predicato in self.if_singoli[i]:\n                ogg += '   '+predicato.to_text()\n            print(ogg)\n        #stampa coefficienti fposizioni\n        print('   supp coeff',self.indexes_supporto_fpos,'  sgn_pos',self.sgn_pos,'  geometry=',geometry_name[self.geom])\n        print('   coefficienti X =',self.coefficienti_f_pos['x'], ' +',self.fpos_const['x'])\n        print('   coefficienti Y =',self.coefficienti_f_pos['y'], ' +',self.fpos_const['y'])\n    \n    def f_pos(self,x_or_y,oggetti_input):\n        pos = self.fpos_const[x_or_y]\n        for i, index_ogg in enumerate(self.indexes_supporto_fpos):\n            pos += self.f_pos_singolo(x_or_y, oggetti_input[index_ogg], self.coefficienti_f_pos[x_or_y][i])\n        return pos\n    def f_pos_singolo(self,x_or_y,oggetto,coeff):\n        if oggetto==None:\n            return 0\n        else:\n            if coeff[0]==0 or oggetto.posizione is None:\n                if x_or_y == 'y':\n                    pos = oggetto.dimmezzi[0]*coeff[1]\n                elif x_or_y == 'x':\n                    pos = oggetto.dimmezzi[1]*coeff[1]\n            else:\n                if x_or_y == 'y':\n                    pos = oggetto.posizione[0]*coeff[0] + oggetto.dimmezzi[0]*coeff[1]\n                elif x_or_y == 'x':\n                    pos = oggetto.posizione[1]*coeff[0] + oggetto.dimmezzi[1]*coeff[1]\n            return pos\n            \n    #FUNZIONI PER UTILIZZO\n    def possibili_oggetti_input_per(self,immagine_in):  #prende tutti i possibili oggetti che verificano IF singoli e hanno la posizione se serve\n        possibili_oggetti_input = [[] for _ in range(self.numero_input)]\n        for i in range(self.numero_input):\n            if i==1 and self.is_oggB_None:\n                possibili_oggetti_input[1] = [None]\n                continue\n            predicati = self.if_singoli[i]  \n            for oggetto in immagine_in.list_obj:\n                verifica_tutti_gli_if = True\n                for predicato in predicati:          # controlla if singoli\n                    if not predicato.is_True(oggetto):\n                        verifica_tutti_gli_if = False\n                        break\n                for index, coeffY, coeffX in zip(self.indexes_supporto_fpos, self.coefficienti_f_pos['y'], self.coefficienti_f_pos['x']):\n                    if i==index:\n                        if oggetto.dimmezzi is None and (coeffX[1]!=0 or coeffY[1]!=0):\n                            verifica_tutti_gli_if = False\n                            break\n                        elif oggetto.posizione is None and (coeffX[0]!=0 or coeffY[0]!=0):\n                            verifica_tutti_gli_if = False\n                            break\n                        elif oggetto.posizione is None and oggetto.dimmezzi is None: # ma non dovrebbe servire davverooooooo\n                            verifica_tutti_gli_if = False\n                            break\n                #if i in self.indexes_supporto_fpos:  # controlla fposizione\n                #    if oggetto.dimmezzi is None:\n                #        verifica_tutti_gli_if = False\n                if verifica_tutti_gli_if:\n                    possibili_oggetti_input[i].append(oggetto)\n        #controlla che forma e colore siano presenti dove servono\n        if self.is_oggB_None:\n            possibili_oggetti_input[0] = [oggA for oggA in possibili_oggetti_input[0] if oggA.forma is not None and oggA.colore is not None]\n        else:\n            possibili_oggetti_input[0] = [oggA for oggA in possibili_oggetti_input[0] if oggA.forma is not None]\n            possibili_oggetti_input[1] = [oggB for oggB in possibili_oggetti_input[1] if oggB.colore is not None]\n        #restano da controllare solo gli if doppi  # e di non aver preso due volte lo stesso oggetto!!\n        return cartesian(possibili_oggetti_input)\n    \n    def verificano_if_doppi(self,oggetti_input):\n        oggA = oggetti_input[0]\n        for relazioni,oggetto in zip(self.if_doppi_A,oggetti_input[1:]):\n            for relazione in relazioni:\n                if not relazione.is_True(oggA,oggetto):\n                    return False\n        if not self.is_oggB_None:\n            oggB = oggetti_input[1]\n            if oggB.colore==oggA.colore: ############################################ sar\u00e0 una buona idea? boh\n                return False\n            for relazioni,oggetto in zip(self.if_doppi_B,oggetti_input[2:]):\n                for relazione in relazioni:\n                    if not relazione.is_True(oggB,oggetto):\n                        return False\n        if len(oggetti_input)>=4:\n            for relazione in self.if_doppi_12:\n                if not relazione.is_True(oggetti_input[2],oggetti_input[3]):\n                    return False\n        return True\n    \n    def applica_a_immagine(self,immagine_in):\n        for oggetti_input in self.possibili_oggetti_input_per(immagine_in):\n            #verifica che non ci siano oggetti doppi:\n            if len(oggetti_input)!=len(set(oggetti_input)):\n                continue\n            #verifica if doppi\n            if self.verificano_if_doppi(oggetti_input):\n                forma = oggetti_input[0].forma\n                colore = oggetti_input[0].colore if self.is_oggB_None else oggetti_input[1].colore\n                #posizione = (self.f_pos('y',oggetti_input),self.f_pos('x',oggetti_input))\n                ogg_in_fpos = [oggetti_input[i] for i in self.indexes_supporto_fpos]\n                #posizione = ( valuta_fpos(x_or_y, ogg_in_fpos, self.coefficienti_f_pos[x_or_y], self.fpos_const[x_or_y]) for x_or_y in ['y','x'] )\n                \n                shape_in_plus = ( immagine_in.shape[0]+1,immagine_in.shape[1]+1 )\n                posizione = ( valuta_fpos('y', ogg_in_fpos, self.coefficienti_f_pos['y'], self.fpos_const['y'],\n                                          sgn_pos=self.sgn_pos, geom=self.geom, shape_geom=shape_in_plus) ,\n                              valuta_fpos('x', ogg_in_fpos, self.coefficienti_f_pos['x'], self.fpos_const['x'],\n                                          sgn_pos=self.sgn_pos, geom=self.geom, shape_geom=shape_in_plus)  )\n                yield forma,colore,posizione\n    \n    \n    \n\n\ndef valuta_fpos(x_or_y,oggetti_input,coefficienti,const, modulo=None, sgn_pos=False, geom=0, shape_geom=(1,1)):\n    ans=const\n    sgn = 1\n    d = 0 if x_or_y=='y' else 1\n    if sgn_pos and len(oggetti_input)==2 and oggetti_input[0].posizione is not None and oggetti_input[1].posizione is not None:\n        if oggetti_input[0].posizione[d] - oggetti_input[1].posizione[d] < 0:\n            sgn = -1\n        elif oggetti_input[0].posizione[d] - oggetti_input[1].posizione[d] == 0: #\u00e8 un caso di merda da trattare\n            sgn = 0\n    for ogg_input,coeff in zip(oggetti_input,coefficienti):\n        rotated_pos = geometry[geom](ogg_input.posizione[0],ogg_input.posizione[1],shape_geom) if ogg_input.posizione is not None else None\n        if coeff[0]==0 and ogg_input.dimmezzi is not None:\n            ans += ogg_input.dimmezzi[d]*coeff[1]*sgn\n        elif coeff[1]==0 and ogg_input.posizione is not None:\n            ans += rotated_pos[d]*coeff[0]\n        elif ogg_input.posizione is not None and ogg_input.dimmezzi is not None:\n            ans += rotated_pos[d]*coeff[0] + ogg_input.dimmezzi[d]*coeff[1]*sgn\n        else:\n            return None #come ritornare False poi al controllo ans==\n    if modulo is not None:\n        ans = ans % modulo\n    return ans\n","832d62e8":"def aggiungi_forcolpos_in_tab(forma,colore,posizione,tab,g,reflect_XY=False):\n    dim_tab = (len(tab),len(tab[0]))\n    dim_f = (len(forma),len(forma[0]))\n    dim_rot_f = geometry[g](0,0,dim_f,to_shape=True) #shape forma eventualmente ruotata\n    upsx = (int(posizione[0]-dim_rot_f[0]\/2), int(posizione[1]-dim_rot_f[1]\/2))\n    for x,y in product(range(dim_rot_f[1]), range(dim_rot_f[0])):\n        orig_form_y, orig_form_x = geometry_inv[g](y,x,dim_rot_f)\n        if forma[orig_form_y][orig_form_x]==1:\n            tab_x = upsx[1] + x\n            tab_y = upsx[0] + y\n            if reflect_XY:\n                tab_x,tab_y = tab_y,tab_x\n            if 0<=tab_x<dim_tab[1] and 0<=tab_y<dim_tab[0]:\n                tab[tab_y][tab_x] = colore\n    return tab\n\ndef applica(funzione,immagine,old_tab):\n    tab = deepcopy(old_tab)\n    for forma,col,pos in funzione.applica_a_immagine(immagine):\n        tab = aggiungi_forcolpos_in_tab(forma,col,pos,tab,0)\n    return tab","1a99246b":"task_da_fare = 242\nprint('Esempio Task numero: ',task_da_fare)\ntask_file = str(training_path \/ training_tasks[task_da_fare])\nwith open(task_file, 'r') as f:\n    task = json.load(f)\nplot_task(task)\n\nt = Task(task,comp_connesse_diagonali=False)\n\n#FUNZIONE 1\niffA = [Predicato(attributo='colore', val=0, applicazione=lambda x,val: x is not val, appl_to_text='is not')]\nsupp_fpos = [0]\nfposX=[(1,0)]\nfposY=[(1,0)]\nfunzione1 = FUN(1, [iffA], supp_fpos, fposX, fposY, fpos_const=(0,0), geom=0, is_oggB_None=True, sgn_pos=True)\n\n#FUNZIONE 2\niffA = [Predicato(attributo='colore', val=0, applicazione=lambda x,val: x is val, appl_to_text='is')]\niffB = [Predicato(attributo='colore', val=1, applicazione=lambda x,val: x is val, appl_to_text='is')]\niffAB = [Relazione(applicazione=lambda x,y: x.tocca(y), appl_to_text='tocca')]\nsupp_fpos = [0]\nfposX=[(1,0)]\nfposY=[(1,0)]\nfunzione2 = FUN(2, [iffA,iffB,iffAB,[]], supp_fpos, fposX, fposY, fpos_const=(0,0), geom=0, is_oggB_None=False, sgn_pos=True)\n\n#APPLICAZIONE\ntabs = []\nfor immagineIO in t.trainIMM + t.testIMM:\n    immagine = immagineIO['input']\n    tabs.append([[0 for _ in range(immagine.shape[1])] for _ in range(immagine.shape[0])])\nmostra_tabs(tabs)\nfor funzione in [funzione1,funzione2]:\n    funzione.stampa()\n    \n    for n,immagineIO in enumerate(t.trainIMM + t.testIMM):\n        immagine = immagineIO['input']\n        tabs[n] = applica(funzione,immagine,tabs[n])\n    mostra_tabs(tabs)\nmostra_tabs([immagineIO['output'].tab for immagineIO in t.trainIMM + t.testIMM])","e0cc3f1f":"task_da_fare = 205\nprint('Esempio Task numero: ',task_da_fare)\ntask_file = str(training_path \/ training_tasks[task_da_fare])\nwith open(task_file, 'r') as f:\n    task = json.load(f)\nplot_task(task)\n\nt = Task(task,comp_connesse_diagonali=False)\n\n#FUNZIONE 1\niffA = [Predicato(attributo='colore', val=5, applicazione=lambda x,val: x is not val, appl_to_text='is not')]\nsupp_fpos = [0]\nfposX=[(1,0)]\nfposY=[(1,0)]\nfunzione1 = FUN(1, [iffA], supp_fpos, fposX, fposY, fpos_const=(0,0), geom=0, is_oggB_None=True, sgn_pos=True)\n\n#FUNZIONE 2\niffA = [Predicato(attributo='colore', val=0, applicazione=lambda x,val: x is not val, appl_to_text='is not')]\niff2 = [Predicato(attributo='is_colorful')]\niff3 = [Predicato(attributo='colore', val=5, applicazione=lambda x,val: x is val, appl_to_text='is')]\niffA2 = [Relazione(applicazione=lambda x,y: x.appartiene(y), appl_to_text='appartiene')]\nsupp_fpos = [0,2,3]\nfposX=[(1,0),(-1,0),(1,0)]\nfposY=[(1,0),(-1,0),(1,0)]\nfunzione2 = FUN(4, [iffA,[],iff2,iff3,[],iffA2,[],[],[],[]], supp_fpos, fposX, fposY, fpos_const=(0,0), geom=0, is_oggB_None=True, sgn_pos=False)\n\n#APPLICAZIONE\ntabs = []\nfor immagineIO in t.trainIMM + t.testIMM:\n    immagine = immagineIO['input']\n    tabs.append([[0 for _ in range(immagine.shape[1])] for _ in range(immagine.shape[0])])\nmostra_tabs(tabs)\nfor funzione in [funzione1,funzione2]:\n    funzione.stampa()\n    \n    for n,immagineIO in enumerate(t.trainIMM + t.testIMM):\n        immagine = immagineIO['input']\n        tabs[n] = applica(funzione,immagine,tabs[n])\n    mostra_tabs(tabs)\nmostra_tabs([immagineIO['output'].tab for immagineIO in t.trainIMM + t.testIMM])","cf71910b":"task_da_fare = 4\nprint('Esempio Task numero: ',task_da_fare)\ntask_file = str(training_path \/ training_tasks[task_da_fare])\nwith open(task_file, 'r') as f:\n    task = json.load(f)\nplot_task(task)\n\nt = Task(task,comp_connesse_diagonali=True)\n\n#FUNZIONE 1\niffA = [Predicato(attributo='area', val=4, applicazione=lambda x,val: x>=val, appl_to_text='>'),\n        Predicato(attributo='colore', applicazione=lambda x: x!=0, appl_to_text='non nero')]\nsupp_fpos = [0]\nfposX=[(1,0)]\nfposY=[(1,0)]\nfunzione1 = FUN(1, [iffA], supp_fpos, fposX, fposY, fpos_const=(0,0), geom=0, is_oggB_None=True, sgn_pos=True)\n\n#FUNZIONE 2\niffA = [Predicato(attributo='area', val=4, applicazione=lambda x,val: x>val, appl_to_text='>'),\n        Predicato(attributo='colore', applicazione=lambda x: x!=0, appl_to_text='non nero')]\niffB = [Predicato(attributo='area', val=4, applicazione=lambda x,val: x<=val, appl_to_text='<='),\n        Predicato(attributo='colore', applicazione=lambda x: x!=0, appl_to_text='non nero')]\nsupp_fpos = [0,1]\nfposX=[(0,-1),(1,1)]\nfposY=[(0,-1),(1,1)]\nfunzione2 = FUN(2, [iffA,iffB,[],[]], supp_fpos, fposX, fposY, fpos_const=(0,0), geom=0, is_oggB_None=False, sgn_pos=True)\n\n#FUNZIONE 3\nfposX=[(-1,-2),(2,2)]\nfposY=[(-1,-2),(2,2)]\nfunzione3 = FUN(2, [iffA,iffB,[],[]], supp_fpos, fposX, fposY, fpos_const=(0,0), geom=0, is_oggB_None=False, sgn_pos=True)\n\n#FUNZIONE 4\nfposX=[(-2,-3),(3,3)]\nfposY=[(-2,-3),(3,3)]\nfunzione4 = FUN(2, [iffA,iffB,[],[]], supp_fpos, fposX, fposY, fpos_const=(0,0), geom=0, is_oggB_None=False, sgn_pos=True)\n\n\n#APPLICAZIONE\ntabs = []\nfor immagineIO in t.trainIMM + t.testIMM:\n    immagine = immagineIO['input']\n    tabs.append([[0 for _ in range(immagine.shape[1])] for _ in range(immagine.shape[0])])\nmostra_tabs(tabs)\nfor funzione in [funzione1,funzione2,funzione3,funzione4]:\n    funzione.stampa()\n    \n    for n,immagineIO in enumerate(t.trainIMM + t.testIMM):\n        immagine = immagineIO['input']\n        tabs[n] = applica(funzione,immagine,tabs[n])\n    mostra_tabs(tabs)\nmostra_tabs([immagineIO['output'].tab for immagineIO in t.trainIMM + t.testIMM])","b44a3b4a":"###############################\n#  DEFINISCO LA CLASSE SOLVER #\n###############################\n\nclass Solver:\n    def __init__(self,task,BIG_TEMPO,task_ref=None,with_modulo=False,split_come_input=False, add_denoise=None):\n        print('Inizializzo solver')\n        self.t = task  #classe Task\n        self.t_ref = task_ref\n        self.BIG_TEMPO = BIG_TEMPO\n        self.with_modulo = with_modulo\n        \n        self.immagini_train_input = [task.trainIMM[i]['input'] for i in range(task.train_size)]\n        self.immagini_train_output = [task.trainIMM[i]['output'] for i in range(task.train_size)]\n        self.immagini_test_input = [task.testIMM[i]['input'] for i in range(task.test_size)]\n        self.immagini_test_output = [task.testIMM[i]['output'] for i in range(task.test_size)] if 'output' in task.testIMM[0].keys() else []\n        \n        self.Best_Dict = -1\n        self.Best_Q1 = -1\n        self.Best_Q2 = -1\n        self.Best_alias = None\n        \n        self.shape_input_costante = True\n        self.trova_shape_input_type()\n        self.shape_output_comeinput = True\n        self.shape_output_costante = True\n        self.shape_output_comeoggetto = True\n        self.shape_output_comeinput_per = True\n        self.shape_multiplier = None\n        self.shape_output_IGNOTA = False  #    <------------------------------------------------se \u00e8 True non risolver\u00f2 mai\n        self.trova_shape_output_type()\n        self.stampa_shape_type()\n        \n        \n        \n        self.magico_ELSE_COLORE = None\n        self.magico_ELSE_COLORE_bool = False #vero se DEVO usarlo\n        self.magico_ELSE_INPUT = None\n        #self.magico_ELSE_INPUT = None\n        self.magico_ELSE_INPUT_bool = False  #vero se DEVO usarlo \n        \n        if add_denoise is not None:\n            self.t.aggiungi_oggetti_denoised(iterazioni=add_denoise)\n        \n        self.n_coppie_AB_out_iniziali = 0\n        self.input_formacolore_e_AB = {} #[oggetto_out]     \u00e8 (int, listaAB, bool_ho_la_posizione)\n        self.occ_input_formacolore = {}  #[immagine][0\/1\/2] \u00e8  int\n        oggetti_senza_forma = self.trova_oggetti_AB()\n        \n        if split_come_input and not self.t.solo_quadratini:\n            for oggetto, n_immagine in oggetti_senza_forma:\n                immagine_out = self.t.trainIMM[n_immagine]['output']\n                pezzi = self.splitta_oggetto_come_input_e_non(oggetto, n_immagine)\n                for nuovo_oggetto in pezzi:\n                    immagine_out.aggiungi(nuovo_oggetto)\n                #print('da (colore',oggetto.colore,')')\n                #mostra_tab(oggetto.forma)\n                #print('ottengo')\n                #print([p.to_text() for p in pezzi])\n                #mostra_tabs([p.forma for p in pezzi])\n            for immagine_out in self.immagini_train_output:\n                immagine_out.refresh_list_obj_from_map()\n            oggetti_senza_forma = self.trova_oggetti_AB(priorita=2)\n            \n        #splitta anche sui diversi colori in input?? boh\n            \n        self.forme_output_IGNOTE = False #len(oggetti_senza_forma)>0  #    <------------------------------------------------se \u00e8 True non risolver\u00f2 mai\n        \n        \n        #genera IF (dopo aver trovato oggetti AB)\n        self.costanti_posizione_IF = self.trova_costanti_posizione_IF()\n        print('Aggiungo costanti posizioni agli IF',self.costanti_posizione_IF)\n        \n        self.IFsingoli_list = Predicato.genera(task)\n        self.IFdoppi_list = Relazione.genera(task, costanti_posizione=self.costanti_posizione_IF)\n        print('Ho',len(self.IFsingoli_list),'predicati e',len(self.IFdoppi_list),'relazioni in TOTALE')\n            \n        self.is_fattibile = not self.forme_output_IGNOTE and not self.shape_output_IGNOTA\n        self.ogg_che_ho_risolto = set()\n        self.funzioni = []\n        print('\u00e8 fattibile?',self.is_fattibile)\n        print()\n        \n    def splitta_oggetto_come_input_e_non(self, oggetto, n_imm): #only_same_color True\/False\n        immagine_in,immagine_out = self.t.trainIMM[n_imm]['input'], self.t.trainIMM[n_imm]['output']\n        dimensione = immagine_out.shape\n        #print('shape in',immagine_in.shape,' - shape out',immagine_out.shape,'  -> prendo out ',dimensione)\n        comp_connesse_diagonali = immagine_in.comp_connesse_diagonali\n        visitato = [[False for _ in range(dimensione[1])] for _ in range(dimensione[0])]\n        this_oggettoso = [[immagine_out.map_tab_to_obj[y][x] is oggetto for x in range(dimensione[1])] for y in range(dimensione[0])]\n        n_pezzi = 0\n        pezzi = []\n        for x,y in product(range(dimensione[1]),range(dimensione[0])):\n            if not visitato[y][x] and this_oggettoso[y][x]:\n                #print('nuovo pezzo, parto da',y,x)\n                n_pezzi+=1\n                obj_forma_big = [[0 for _ in range(dimensione[1])] for _ in range(dimensione[0])]\n                #obj_colori_adiacenti = set()\n                #obj_oggetti_adiacenti = set()\n                obj_tocca_bordo = [False for _ in range(4)]    #up, down, sx, dx     \n                def dfs(x,y,come_input):\n                    if visitato[y][x] or not this_oggettoso[y][x] or self.magico_ELSE_INPUT[n_imm][y][x]!=come_input:\n                        return []\n                    visitato[y][x] = True\n                    obj_forma_big[y][x] = 1\n                    incrementi = []\n                    #orizzontali\n                    if x>0:\n                        incrementi.append([-1,0])\n                    else:\n                        obj_tocca_bordo[2] = True #tocca sinistra\n                    if x+1<dimensione[1]:\n                        incrementi.append([1,0])\n                    else:\n                        if x+1==immagine_out.shape[1]:\n                            obj_tocca_bordo[3] = True #tocca destra\n                    #verticali\n                    if y>0:\n                        incrementi.append([0,-1])\n                    else:\n                        obj_tocca_bordo[0] = True #tocca sopra\n                    if y+1<dimensione[0]:\n                        incrementi.append([0,1])\n                    else:\n                        if y+1==immagine_out.shape[0]:\n                            obj_tocca_bordo[1] = True #tocca sotto\n                    #diagonali\n                    if comp_connesse_diagonali:\n                        if x>0 and y>0:\n                            incrementi.append([-1,-1])\n                        if x>0 and y+1<dimensione[0]:\n                            incrementi.append([-1,1])\n                        if x+1<dimensione[1] and y>0:\n                            incrementi.append([1,-1])\n                        if x+1<dimensione[1] and y+1<dimensione[0]:\n                            incrementi.append([1,1])\n                    punti_visitati = [[y,x]]\n                    for incr_x,incr_y in incrementi:\n                        punti_visitati += dfs(x+incr_x, y+incr_y, come_input)\n                    return punti_visitati\n                punti_visitati = dfs(x, y, self.magico_ELSE_INPUT[n_imm][y][x])\n                if 0<len(punti_visitati)<oggetto.area:\n                    #qui obj_forma_big contiene la forma giusta in 0 e 1 ma \u00e8 una tabella full-dimension\n                    #NOTA: il punto (x,y) appartiene all'oggetto ma non \u00e8 detto che sia in uno dei 4 angoli della forma\n                    min_x, max_x, min_y, max_y = dimensione[1], 0, dimensione[0], 0\n                    for tmp_x,tmp_y in product(range(dimensione[1]),range(dimensione[0])):\n                        if obj_forma_big[tmp_y][tmp_x]==1:\n                            min_x = min(min_x,tmp_x)\n                            max_x = max(max_x,tmp_x)\n                            min_y = min(min_y,tmp_y)\n                            max_y = max(max_y,tmp_y)\n                    obj_dim_x = max_x-min_x+1\n                    obj_dim_y = max_y-min_y+1\n                    obj_forma = [[0 for _ in range(obj_dim_x)] for _ in range(obj_dim_y)]\n                    for tmp_x,tmp_y in product(range(obj_dim_x),range(obj_dim_y)):\n                        obj_forma[tmp_y][tmp_x] = obj_forma_big[min_y+tmp_y][min_x+tmp_x]\n                    obj_forma = tuple( tuple(row) for row in obj_forma)\n                    #qui obj_forma contiene la forma giusta in 0 e 1 ritagliata in modo da non avere colonne o righe di soli 0\n                    obj_posizione = (obj_dim_y\/2 + min_y, obj_dim_x\/2 + min_x)\n\n                    new_oggetto = Oggetto(forma=obj_forma, colore=oggetto.colore, posizione=obj_posizione,   #MANCANO OGGETTI ADIACENTI!!!!\n                                      tocca_bordo=obj_tocca_bordo)\n                    pezzi.append(new_oggetto)\n                    #mette i puntatori all'oggetto nel tab\n                    for p in punti_visitati:\n                        immagine_out.map_tab_to_obj[p[0]][p[1]] = new_oggetto #sostituisco i puntatori vecchi\n        print('Ho trovato',n_pezzi,'pezzi di colore',oggetto.colore )\n        return pezzi\n    \n    \n    def filter_function(self):\n        not_bad_fun = []\n        for fun in self.funzioni:\n            errori, caselle_coperte, immagini_coperte, oggetti_trovati = self.t.check_funzione_copertura(fun,\n                                                                                solo_coperture_totali=True, with_modulo=self.with_modulo)\n            if errori==0:\n                not_bad_fun.append(fun)\n        #not_bad_fun.sort(key=lambda fun: 100000000*(100*x[3]+len(x[4]))+x[2] , reverse=True)  #lessicografico per imm_coperte,ogg_trovati,caselle_coperte\n        not_bad_fun.sort(key=lambda fun: 10000000*fun.vero_numero_input - 10000*fun.immagini_coperte - len(fun.oggetti_trovati)) \n        #print('FUNZIONI SORTATE')\n        #for fun in not_bad_fun:\n        all_ogg_trovati = set()\n        good_fun = []\n        for fun in not_bad_fun:\n            old_len = len(all_ogg_trovati)\n            for ogg in fun.oggetti_trovati:\n                all_ogg_trovati.add(ogg)\n            if len(all_ogg_trovati)>old_len:\n                good_fun.append(fun)\n            #else:\n            #    print('SCARTO')\n            #    fun.stampa()\n            #    print()\n        good_fun.sort(key=lambda fun: 10000000*fun.vero_numero_input - 10000*fun.immagini_coperte - len(fun.oggetti_trovati), reverse=True) \n        self.funzioni = good_fun\n        \n        \n    \n    def reset_oggetti_risolti_risolvibili(self):\n        self.Best_Dict = -1\n        self.Best_Q1 = -1\n        self.Best_Q2 = -1\n        self.Best_alias = None\n        self.trova_oggetti_AB()\n        #crederci sempre arrendersi mai\n        self.t.metti_tutti_oggetti_risolvibili()\n    def reset_all(self):\n        print('lancio reset all')\n        self.ogg_che_ho_risolto = set()\n        self.funzioni = []\n        for immagine_out in self.immagini_train_output:\n            for oggetto in immagine_out.list_obj:\n                oggetto.is_risolto = False\n        self.input_formacolore_e_AB = {}\n        self.reset_oggetti_risolti_risolvibili()\n        \n    def train_score(self, add_reflected=False):\n        def similitudine(tab1,tab2):\n            if len(tab1)!=len(tab2) or len(tab1[0])!=len(tab2[0]):\n                return 0\n            tot,uguali = 0,0\n            for line1,line2 in zip(tab1,tab2):\n                for p1,p2 in zip(line1,line2):\n                    tot+=1\n                    if p1==p2:\n                        uguali+=1\n            #print('AAAAAAAA',uguali,tot)\n            return uguali\/tot\n        score = 0\n        for n_train, tab_out in [(i, self.t.trainIMM[i]['output'].tab) for i in range(self.t.train_size)]:\n            guessed_tab_out = self.applica(n_train, is_train=True, add_reflected=add_reflected)\n            score += similitudine(tab_out,guessed_tab_out) \/ self.t.train_size\n            #print('BBBBBB',score)\n        return score\n                                      \n    def applica(self,where=0, what=None, starting_from=None, is_train=False, add_reflected=False):\n        if what is None:\n            what=self.funzioni\n        n_immagine = where\n        immagine_in = self.t.testIMM[n_immagine]['input'] if not is_train else self.t.trainIMM[n_immagine]['input']\n        #trova dimensioni tabella\n        final_shape = self.trova_shape_output_for(immagine_in)\n        #genera tabella\n        final_tab = [[0 for _ in range(final_shape[1])] for _ in range(final_shape[0])]\n        self.use_magico_ELSE_z(immagine_in,final_tab)\n        '''\n        if starting_from is None:\n            if self.magico_ELSE_COLORE_bool:\n                final_tab = [[self.magico_ELSE_COLORE for _ in range(final_shape[1])] for _ in range(final_shape[0])]\n            elif self.shape_output_comeinput and self.magico_ELSE_INPUT_bool:\n                final_tab = deepcopy(immagine_in.tab)\n            else:\n                final_tab = [[0 for _ in range(final_shape[1])] for _ in range(final_shape[0])]\n        else:\n            final_tab = starting_from'''\n        def aggiungi_forcolpos_in_tab(forma,colore,posizione,tab,g,reflect_XY=False):\n            dim_tab = (len(tab),len(tab[0]))\n            dim_f = (len(forma),len(forma[0]))\n            dim_rot_f = geometry[g](0,0,dim_f,to_shape=True) #shape forma eventualmente ruotata\n            upsx = (int(posizione[0]-dim_rot_f[0]\/2), int(posizione[1]-dim_rot_f[1]\/2))\n            for x,y in product(range(dim_rot_f[1]), range(dim_rot_f[0])):\n                orig_form_y, orig_form_x = geometry_inv[g](y,x,dim_rot_f)\n                if forma[orig_form_y][orig_form_x]==1:\n                    tab_x = upsx[1] + x\n                    tab_y = upsx[0] + y\n                    if reflect_XY:\n                        tab_x,tab_y = tab_y,tab_x\n                    if 0<=tab_x<dim_tab[1] and 0<=tab_y<dim_tab[0]:\n                        tab[tab_y][tab_x] = colore\n            return tab\n        #applica funzioni\n        for fun in what:\n            for forma,colore,posizione in fun.applica_a_immagine(immagine_in):\n                if self.with_modulo:\n                    posizione = (posizione[0]%final_shape[0], posizione[1]%final_shape[1])\n                final_tab = aggiungi_forcolpos_in_tab(forma,colore,posizione,final_tab,fun.geom)\n            if add_reflected:\n                immagine_in_ref = self.t_ref.testIMM[n_immagine]['input'] if not is_train else self.t_ref.trainIMM[n_immagine]['input']\n                for forma,colore,posizione in fun.applica_a_immagine(immagine_in_ref):\n                    if self.with_modulo:\n                        posizione = (posizione[0]%final_shape[0], posizione[1]%final_shape[1])\n                    final_tab = aggiungi_forcolpos_in_tab(forma,colore,posizione,final_tab,fun.geom,reflect_XY=True)\n        return final_tab\n            #reflected_tab = apply_transf(geometry[6],final_tab) #riflessione x,y  #,inplace=True un giorno lo scrivo\n    \n    def num_oggetti_non_risolti_con_formacolore(self,immagine_out):\n        quanti_oggetti_non_risolti_hanno_formacolore=0\n        for ogg_out in immagine_out.list_obj:\n            if not ogg_out.is_risolto and ogg_out.is_risolvibile and len(self.input_formacolore_e_AB[ogg_out][1])>0:\n                quanti_oggetti_non_risolti_hanno_formacolore += 1\n        return quanti_oggetti_non_risolti_hanno_formacolore\n        \n    def solve_task(self,TEMPO_boost=1, solo_funzioni_generali=True,minimo_numero_immagini=2, fermati_con_else_colore=True, STAMPA=True):\n        with_modulo = self.with_modulo\n        \n        #for ogg1 in self.t.trainIMM[0]['output'].list_obj:\n        #    print(self.input_formacolore_e_AB[ogg1])\n        if STAMPA:\n            for condizione in self.IFsingoli_list+self.IFdoppi_list:\n                condizione.stampa()\n        \n        start_solve_task = time.time()\n        #crederci sempre arrendersi mai\n        self.t.metti_tutti_oggetti_risolvibili()\n        if self.magico_ELSE_COLORE_bool: #se sono costretto a mettere magico ELSE colore allora non ha senso guardare gli oggetti di quel colore\n            print('Ho else colore forzato  ---> metto non risolvibili gli oggetti di colore',self.magico_ELSE_COLORE)\n            for imm_out in self.immagini_train_output:\n                for ogg_out in imm_out.list_obj:\n                    if ogg_out.colore is self.magico_ELSE_COLORE:\n                        ogg_out.is_risolvibile = False\n        #decidi quanto tempo impiegare        \n        TEMPO = self.BIG_TEMPO * TEMPO_boost\n        #guardo le immagini iniziando da quelle con meno oggetti in input\n        def num_coppie_AB(immagine_out):\n            n=0\n            for ogg_out in immagine_out.list_obj:\n                if ogg_out.is_risolvibile and not ogg_out.is_risolto:\n                    n += len(self.input_formacolore_e_AB[ogg_out][1])\n            return n\n        index_boni_immagini = [(index,num_coppie_AB(self.t.trainIMM[index]['output'])) for index in range(self.t.train_size)]\n        index_boni_immagini.sort(key = lambda x : x[1])  #ordinate per numero di coppie AB-out\n        if index_boni_immagini[self.t.train_size-1][1]==0: #se l'ultimo \u00e8 0 allora sono tutti 0 visto che sono in ordine crescente\n            print('Bella qualcuno ha gi\u00e0 fatto tutto il lavoro per me')\n            index_boni_immagini = []\n        else:\n            print('Ordine con cui guarder\u00f2 le immagini',[i[0] for i in index_boni_immagini],'con numero oggetti AB', index_boni_immagini)\n            ratio = [2\/3**i+0.05 for i in range(self.t.train_size)]\n            ratio_per_num_ogg = [(index_e_num[0], ratio[order]*index_e_num[1]) for order,index_e_num in enumerate(index_boni_immagini)] #proporzionale a ratio e al numero di coppie che dovr\u00f2 guardare\n            ratio_per_num_ogg.sort(key = lambda x : x[0])  #ordino per index immagini\n            ratio_per_num_ogg = [el[1] for el in ratio_per_num_ogg] #mi dimentico degli indici che tanto non servono pi\u00f9\n            ratio_per_num_ogg = [el\/sum(ratio_per_num_ogg) for el in ratio_per_num_ogg]\n            TEMPO_imm = [ratio_per_num_ogg[i]*TEMPO for i in range(self.t.train_size)]  #occhio: \u00e8 indicizzato dall'indice vero dell'immagine, non dall'ordine in cui le guardo\n            print('TEMPO TOTALE =',TEMPO,' -----> ',TEMPO_imm,'a immagine')\n            sto_guardando_oggetto_numero, sto_guardando_immagine_numero = 0, 0 #counter utili per stampare chiaramente cosa sta facendo\n            index_boni_immagini = [i[0] for i in index_boni_immagini] #qui posso anche dimenticarmi del numero di coppie, tengo solo gli indici ordinati\n        trainIMM_sorted = [(self.t.trainIMM[i]['input'], self.t.trainIMM[i]['output'],i) for i in index_boni_immagini]\n        fermati = False\n        for immagine_in, immagine_out, imm_index in trainIMM_sorted:\n            if fermati:\n                break\n            quanti_oggetti_non_risolti_hanno_formacolore = self.num_oggetti_non_risolti_con_formacolore(immagine_out)\n            if quanti_oggetti_non_risolti_hanno_formacolore==0:\n                continue\n            clock_imm = time.time()\n            TEMPO_obj = TEMPO_imm[imm_index] \/ quanti_oggetti_non_risolti_hanno_formacolore\n            print('  INIZIO Immagine',imm_index,'(',sto_guardando_immagine_numero,'^) che ha',quanti_oggetti_non_risolti_hanno_formacolore,'oggetti guardabili')\n            print('    tempo totale =',TEMPO_imm[imm_index],' -----> ',TEMPO_obj,'a oggetto')\n            \n            while immagine_out.esistono_oggetti_risolvibili_non_risolti(self.input_formacolore_e_AB):\n                tempo_residuo_immagine = TEMPO_imm[imm_index] - (time.time()-clock_imm)\n                if tempo_residuo_immagine<0:\n                    print('  TEMPO immagine sgravato')\n                    break\n                else:\n                    quanti_oggetti_non_risolti_hanno_formacolore = self.num_oggetti_non_risolti_con_formacolore(immagine_out)\n                    if quanti_oggetti_non_risolti_hanno_formacolore==0:\n                        continue\n                    else:\n                        TEMPO_obj = tempo_residuo_immagine \/ quanti_oggetti_non_risolti_hanno_formacolore\n                #if time.time()-clock_imm > 2*TEMPO_imm[imm_index]:\n                #    print('  TEMPO immagine sgravato')\n                #    break\n                if self.train_score()==1:\n                    print('GRAVIDANZA PRECOCE TRAINSCORE=1')\n                    break                \n                clock_obj = time.time()\n                oggetto_out = immagine_out.get_first_obj_risolvibile_non_risolto(self.input_formacolore_e_AB)\n                var_numero_oggettiAB = self.input_formacolore_e_AB[oggetto_out][0]\n                var_ho_la_posizione = self.input_formacolore_e_AB[oggetto_out][2]\n                if STAMPA:\n                    print('    ##################################################################################')\n                    print('    ##################################################################################')\n                    print('    ##################################################################################')\n                    print('    ##############  ALOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO  ##############')\n                    print('    ##############  --------------------------------------------------  ##############')\n                    print('    ##############   OGG',sto_guardando_oggetto_numero,' - immagine',imm_index)\n                    print('    ##############       input AB =',self.input_formacolore_e_AB[oggetto_out][0],\n                          '  input posizione in AB =',self.input_formacolore_e_AB[oggetto_out][2])\n                    print('    ##############       geometry =',self.input_formacolore_e_AB[oggetto_out][3])\n                    for linea in oggetto_out.forma:\n                        print('    ##############    ',linea)\n                    print('    ##############    c =',oggetto_out.colore)\n                    print('    ##############    p =',oggetto_out.posizione)\n                    print('    ##################################################################################')\n                    print('    ##################################################################################')\n                    print('    ##################################################################################')\n                    print('    ###  TEMPO obj =',TEMPO_obj)\n                    \n                    \n                #if sto_guardando_oggetto_numero==15:\n                #    STAMPA=True\n                funzioni_papabili = self.solve_obj(oggetto_out, immagine_in, immagine_out, TEMPO_obj,\n                                                   solo_funzioni_generali,minimo_numero_immagini, with_modulo, STAMPA)\n                self.funzioni += self.computa_funzioni_papabili(funzioni_papabili,STAMPA)\n                \n                if STAMPA:\n                    print()\n                    print('    Per oggetto',sto_guardando_oggetto_numero,'ci ho messo', time.time()-clock_obj,'secondi')\n                    print('    Colori che mancano',self.t.get_lista_colori_non_risolti())\n                    print('    Numero oggetti risolti =',len(self.ogg_che_ho_risolto),'  su un totale di',self.t.numero_totale_oggetti_out)\n                    print()\n                else:\n                    print('    Per oggetto',sto_guardando_oggetto_numero,'ci ho messo', time.time()-clock_obj,'secondi')\n                oggetto_out.is_risolvibile = False\n                \n                if STAMPA:\n                    banane = []\n                    for n in range(self.t.train_size):\n                        banane.append(self.applica(n, is_train=True))\n                    for n in range(self.t.test_size):\n                        banane.append(self.applica(n))\n                    mostra_tabs(banane)\n                    #stampa_banane(s,add_reflected=True) ###############################################################################\n                \n                if fermati_con_else_colore:\n                    if self.check_magico_ELSE_z():\n                        fermati=True\n                        break\n                    '''if self.check_magico_ELSE_COLORE():\n                        fermati=True\n                        break'''\n                \n                sto_guardando_oggetto_numero += 1\n            #fine while esistono oggetti risolvibili da risolvere\n            sto_guardando_immagine_numero += 1\n        #fine for scelta coppia di immagini da guardare\n        if STAMPA:\n            print('THE END')\n            print()\n        if not self.check_magico_ELSE_z():\n        #if not self.check_magico_ELSE_COLORE():\n            colori_non_risolti = self.t.get_lista_colori_non_risolti()\n            print('buh mi sa che ho fallito, restano i colori',colori_non_risolti)\n            print('  ho risolto',len(self.ogg_che_ho_risolto),'oggetti su un totale di',self.t.numero_totale_oggetti_out)\n            for colore in colori_non_risolti:\n                print('   mancano',len(self.t.find_forms_of(colore,'output')),'oggetti di colore', colore)\n            #da considerare il caso magico else input\n        print('Finisco solve_task con',len(self.funzioni),'funzioni in memoria, ci ho messo',time.time()-start_solve_task)\n        #self.filter_function()\n        print('Dopo il filtraggio non fatto restano',len(self.funzioni),'funzioni in memoria')\n        print()\n        if STAMPA:\n            print()\n            print()\n            print()\n            print()\n            print()\n    \n    \n    def solve_obj(self,oggetto_out,immagine_in,immagine_out,TEMPO_obj,solo_funzioni_generali,minimo_numero_immagini,with_modulo, STAMPA):\n        solo_coperture_totali = True\n        solo_almeno_due_oggetti = solo_funzioni_generali\n        curr_max_n_ogg_trovati = 0 #massimo numero di oggetti risolti da una funzione con 0 errori, quelli sotto non li provo nemmeno\n        \n        clock_obj = time.time()\n        \n        numero_oggettiAB = self.input_formacolore_e_AB[oggetto_out][0]\n        possibili_oggettiAB = self.input_formacolore_e_AB[oggetto_out][1]\n        ho_la_posizione_negli_oggettiAB = self.input_formacolore_e_AB[oggetto_out][2]\n        possibili_g = self.input_formacolore_e_AB[oggetto_out][3]\n        \n        basta_fpos_identita = True if len(immagine_in.get_obj_with(posizione=oggetto_out.posizione))>0 else False\n        if self.shape_output_costante and self.t.trainIMM[0]['output'].shape == (1,1):\n            basta_fpos_identita = False\n        if self.shape_output_costante and not self.shape_output_comeinput:\n            basta_fpos_identita = False\n        #n_ogg,  (n_ogg_fpos, n_coeff_non_zero, coeff_max),  (n_if_singoli, n_if_coppia, n_if_totali)\n        if numero_oggettiAB==1:\n            if ho_la_posizione_negli_oggettiAB:\n                livelli_incazzatura = [(1,(1,1,0),2),\n                                      (2,(1,1,0),3),\n                                      (3,(1,1,0),3),\n                                      (4,(1,1,0),4)]\n            elif basta_fpos_identita:\n                livelli_incazzatura = [(2,(1,1,0),2),\n                                      (3,(1,1,0),3),\n                                      (4,(1,1,0),3)]\n            else:\n                livelli_incazzatura = [(1,(1,2,2),3),\n                                      (2,(2,3,1),3),\n                                      #(2,(2,3,2),2),# (2,(2,3,3),2),\n                                      (3,(3,3,1),4),\n                                      (3,(3,3,2),3),\n                                      (4,(4,4,1),5)]\n                #livelli_incazzatura = [(1,(1,1,2),2),\n                #                      (2,(2,3,1),3)]\n        elif numero_oggettiAB==2:\n            if ho_la_posizione_negli_oggettiAB:\n                livelli_incazzatura = [(2,(1,1,0),3),\n                                      (3,(1,1,0),4),\n                                      (4,(1,1,0),4)]\n            elif basta_fpos_identita:\n                livelli_incazzatura = [(3,(1,1,0),6),\n                                      (4,(1,1,0),3)]\n            else:\n                livelli_incazzatura = [(2,(2,3,1),3),\n                                      (2,(2,3,2),4), #(2,(2,3,3),4),\n                                      (3,(3,3,1),5),\n                                      (3,(2,3,2),4),\n                                      (4,(3,3,1),4),\n                                      (4,(2,3,2),4)]\n        else:\n            print('Questo non dovrebbe succedere')\n            \n        ''' ROBBA DELLA SUB DA 0.97 WATCH OUT MATERIALE CHE SCOTTA\n        if numero_oggettiAB==1:\n            if ho_la_posizione_negli_oggettiAB:\n                livelli_incazzatura = [(1,(1,1,0),2),\n                                      (2,(1,1,0),3),\n                                      (3,(1,1,0),3),\n                                      (4,(1,1,0),3)]\n            elif basta_fpos_identita:\n                livelli_incazzatura = [(2,(1,1,0),2),\n                                      (3,(1,1,0),3),\n                                      (4,(1,1,0),3)]\n            else:\n                livelli_incazzatura = [(1,(1,1,2),2),\n                                      (2,(2,3,1),3),\n                                      (2,(2,3,2),2),\n                                      (3,(3,3,1),3),\n                                      (3,(3,3,2),3),\n                                      (4,(3,3,1),5)]\n                #livelli_incazzatura = [(1,(1,1,2),2),\n                #                      (2,(2,3,1),3)]\n        elif numero_oggettiAB==2:\n            if ho_la_posizione_negli_oggettiAB:\n                livelli_incazzatura = [(2,(1,1,0),2),\n                                      (3,(1,1,0),3),\n                                      (4,(1,1,0),3)]\n            elif basta_fpos_identita:\n                livelli_incazzatura = [(3,(1,1,0),6),\n                                      (4,(1,1,0),3)]\n            else:\n                livelli_incazzatura = [(2,(2,2,1),2),\n                                      (2,(2,3,2),4), #(2,(2,3,3),4),\n                                      (3,(3,3,1),5),\n                                      (3,(2,3,2),4),\n                                      (4,(3,3,1),4),\n                                      (4,(2,3,2),4)]\n                                      \n                                      \n                                      \n                                      \n                                  MERDA CASUALE    \n            if ho_la_posizione_negli_oggettiAB:\n                livelli_incazzatura = [(1,(1,1,0),3),\n                                      (2,(1,1,0),5),\n                                      (3,(1,1,0),6),\n                                      (4,(1,1,0),7)]\n            elif basta_fpos_identita:\n                livelli_incazzatura = [(2,(1,1,0),4),\n                                      (3,(1,1,0),5),\n                                      (4,(1,1,0),6)]\n            else:\n                livelli_incazzatura = [(1,(1,2,2),2),\n                                      (2,(2,3,1),3),\n                                      (2,(2,3,2),2),\n                                      (3,(3,3,1),3),\n                                      (3,(3,3,2),3),\n                                      (4,(3,3,1),5)]\n                #livelli_incazzatura = [(1,(1,1,2),2),\n                #                      (2,(2,3,1),3)]\n        elif numero_oggettiAB==2:\n            if ho_la_posizione_negli_oggettiAB:\n                livelli_incazzatura = [(2,(1,1,0),5),\n                                      (3,(1,1,0),8),\n                                      (4,(1,1,0),6)]\n            elif basta_fpos_identita:\n                livelli_incazzatura = [(3,(1,1,0),6),\n                                      (4,(1,1,0),3)]\n            else:\n                livelli_incazzatura = [(2,(2,3,1),4),\n                                      (2,(2,3,2),4), #(2,(2,3,3),4),\n                                      (3,(3,3,1),5),\n                                      (3,(2,3,2),4),\n                                      (4,(3,3,1),4),\n                                      (4,(2,3,2),4)]'''\n        \n        funzioni_papabili = [[] for _ in range(self.t.train_size + 1)] #divise gi\u00e0 per quante immagini coprono\n            \n        possibili_g_ordinati = list(possibili_g)\n        possibili_g_ordinati.sort(reverse=True)\n        #find_geo_invariants(tab)\n        \n        #################################################\n        # \n        #\n        #### fissa costanti aggiunte #### \n        for fpos_const in [(0,0)] + self.trova_costanti_posizione(): \n            if time.time()-clock_obj > TEMPO_obj:\n                if STAMPA:\n                    print('      STOP TEMPO 8 fpos const')\n                break\n            if len(funzioni_papabili[self.t.train_size]) > 0 and self.t.train_size>2:\n                if STAMPA:\n                    print('      STOP SBAMMMATO')\n                break\n\n            #### fissa  aggiunte #### \n            for g in possibili_g_ordinati:    \n                if STAMPA:\n                    print('    ######################################',geometry_name[g],'############################################')\n                if time.time()-clock_obj > TEMPO_obj:\n                    if STAMPA:\n                        print('      STOP TEMPO 7 geometriess')\n                    break\n                if len(funzioni_papabili[self.t.train_size]) > 0 and self.t.train_size>2:\n                    if STAMPA:\n                        print('      STOP SBAMMMATO')\n                    break\n                    \n                    \n                for quanti_ne_prendo, quanto_li_sposto, quanto_ci_penso in livelli_incazzatura:\n                    if time.time()-clock_obj > TEMPO_obj:\n                        if STAMPA:\n                            print('      STOP TEMPO 6 incazzatura')\n                        break\n                    if len(funzioni_papabili[self.t.train_size]) > 0 and self.t.train_size>2:\n                        if STAMPA:\n                            print('      STOP SBAMMMATO')\n                        break\n                    #fissa variabili\n                    var_numero_oggetti_input = quanti_ne_prendo #valore esatto \n                    var_numero_oggettiEXTRA = var_numero_oggetti_input - numero_oggettiAB\n                    #coefficienti fpos\n                    var_max_oggetti_per_fpos = quanto_li_sposto[0]          #valore <=\n                    var_max_coeff_nonzero_fpos = quanto_li_sposto[1]        #valore <=\n                    var_max_coeff_fpos = quanto_li_sposto[2]                #valore <=\n                    #print(possibili_fpos_const)\n                    #condizioni IF\n                    #var_max_ifsingoli_per_oggetto = quanto_ci_penso[0]   #valore <=\n                    #var_max_ifdoppi_per_coppia = quanto_ci_penso[1]      #valore <=\n                    var_max_numero_if_totali = quanto_ci_penso        #valore <=\n\n                    \n                    if STAMPA:\n                        print('      ----------------------------------------------------------------------------------')\n                        print('      - Funzioni con', var_numero_oggetti_input,'oggetti in input [ sposto=',quanto_li_sposto,' - penso=',quanto_ci_penso,']')\n                        print('                         e aggiungo costanti',fpos_const)\n                        print('      ----------------------------------------------------------------------------------')\n\n                    numero_input = 2 + var_numero_oggettiEXTRA\n                    predicati = [None for _ in range(numero_input)]\n                    possibili_predicati = [[] for _ in range(numero_input)]\n                    relazioni_oggA_oggB = []\n                    relazioni_ogg1_ogg2 = []\n                    relazioni_oggA = [None for _ in range(var_numero_oggettiEXTRA)]\n                    relazioni_oggB = [None for _ in range(var_numero_oggettiEXTRA)]\n                    possibili_relazioni = [[] for _ in range(2*var_numero_oggettiEXTRA+1)]\n\n\n                \n                        \n                    def vicinanza(oggAB):\n                        oggA,oggB = oggAB\n                        if oggB is None:\n                            vicinanza = oggetto_out.distanza(oggA)\n                            if oggA.is_denoised:\n                                vicinanza -=100\n                        else:\n                            vicinanza = oggetto_out.distanza(oggA)+oggA.distanza(oggB)\n                        return vicinanza\n                    possibili_oggettiAB.sort(key=vicinanza)\n                    #\n                    #\n                    #### fissa oggetti A e B ####\n                    for oggA,oggB in possibili_oggettiAB:\n                        if time.time()-clock_obj > TEMPO_obj:\n                            if STAMPA:\n                                print('      STOP TEMPO 5 oggA e oggB')\n                            break\n                        if len(funzioni_papabili[self.t.train_size]) > 0 and self.t.train_size>2:\n                            if STAMPA:\n                                print('      STOP SBAMMMATO')\n                            break\n                        if not are_equal(oggA.forma,oggetto_out.forma,geometry[g]):\n                            continue\n                        ##### trova predicati (IF singoli) e relazioni (IF doppi) per Oggetto A e Oggetto B #####\n                        if oggB is None:\n                            predicati[0] = self.trova_predicati_validi(oggA)\n                            predicati[1] = []\n                            #aggiunge i controlli IF specifici di assegnamento agli oggetti input che assegnano cose\n                            #if oggA.is_specific_ASS_form:\n                            #    predicati[0].append(predicato_is_specific_ASS_form)\n                            #if oggA.is_specific_ASS_color:\n                            #    predicati[0].append(predicato_is_specific_ASS_color)\n                            relazioni_oggA_oggB = []\n                        else:\n                            predicati[0] = self.trova_predicati_validi(oggA)\n                            predicati[1] = self.trova_predicati_validi(oggB)\n                            #aggiunge i controlli IF specifici di assegnamento agli oggetti input che assegnano cose\n                            #if oggA.is_specific_ASS_form:\n                            #    predicati[0].append(predicato_is_specific_ASS_form)\n                            #if oggB.is_specific_ASS_color:\n                            #    predicati[1].append(predicato_is_specific_ASS_color)\n                            relazioni_oggA_oggB = self.trova_relazioni_valide(oggA,oggB)\n\n                        if STAMPA:\n                            print('      Ho',len(predicati[0]),'predicati per A e',len(predicati[1]),'predicati per B')\n\n                        ##### trova oggetti EXTRA #####\n                        #occhio che cos\u00ec NON POSSO PRENDERE 2 oggetti extra con posizione uguale (dai non succeder\u00e0 mai)\n                        if basta_fpos_identita and not ho_la_posizione_negli_oggettiAB: #allora devo prendere un oggetto per posizione tra gli EXTRA\n                            oggetti_Xposizione = immagine_in.get_obj_with(posizione=oggetto_out.posizione)\n                            oggettiEXTRA = [ogg for ogg in immagine_in.list_obj if ogg is not oggA and ogg is not oggB and ogg not in oggetti_Xposizione]\n                            possibili_oggettiEXTRA = elenca_solo_sottoinsiemi_di(oggettiEXTRA, cardinalita=var_numero_oggettiEXTRA-1)\n                            possibili_oggettiEXTRA = [ [ogg_Xpos]+altri_ogg for ogg_Xpos,altri_ogg in product(oggetti_Xposizione,possibili_oggettiEXTRA) if ogg_Xpos not in altri_ogg]\n                        else:\n                            oggettiEXTRA = [ogg for ogg in immagine_in.list_obj if ogg is not oggA and ogg is not oggB]\n                            possibili_oggettiEXTRA = elenca_solo_sottoinsiemi_di(oggettiEXTRA, cardinalita=var_numero_oggettiEXTRA)\n                        \n                        # se c'\u00e8 oggB metti prima oggetti con stesso colore di oggA\n                        def vicinanza_ad_AB(sottoinsieme):\n                            dist_minima = 100000000\n                            for oggE in sottoinsieme:\n                                if oggB is None:\n                                    dist_minima = min(dist_minima, oggA.distanza(oggE))\n                                else:\n                                    dist_minima = min(dist_minima, oggA.distanza(oggE), oggB.distanza(oggE))\n                            if oggB is None:\n                                if len(sottoinsieme)==1:\n                                    oggE = sottoinsieme[0]\n                                    if oggE.possiede(oggA):\n                                        dist_minima -=100 #a CASOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\n                                if len(sottoinsieme)==2:\n                                    oggE1, oggE2 = sottoinsieme\n                                    if oggE1.forma==oggE2.forma:\n                                            dist_minima -= 1000\n                                    if oggE1.colore==oggE2.colore:\n                                            dist_minima -=100\n                                    if oggE1.possiede(oggA) or oggE2.possiede(oggA):\n                                        dist_minima -= 100\n                                    if (oggA in oggE1.fratelli and oggA not in oggE2.fratelli) or (oggA not in oggE1.fratelli and oggA in oggE2.fratelli):\n                                        dist_minima -= 100\n                                        \n                                    #if oggE1.contiene(oggE2) or oggE2.contiene(oggE1):\n                                    #    dist_minima -= 100\n                            else:\n                                if len(sottoinsieme)>0:\n                                    oggE = sottoinsieme[0]\n                                    if oggA.colore is None:\n                                        if oggE.colore==oggB.colore:\n                                            dist_minima -= 1 #un po' di vantaggio \n                                    elif oggE.colore==oggA.colore:\n                                        dist_minima -= 1000 # meno di ogni altro oggetto con colore diverso\n                                        if STAMPA:\n                                            print('eeei extr col',oggE.to_text())\n                            for oggE in sottoinsieme:\n                                if oggE.is_noise: #in teoria sono pochi (sperabilmente solo 1) gli oggetti con questa propriet\u00e0\n                                    dist_minima -=300\n                            return dist_minima\n                        \n                        if not self.t.solo_quadratini:\n                            possibili_oggettiEXTRA.sort(key=vicinanza_ad_AB)\n                            #if STAMPA:\n                            #    print('possibili extra per AB',oggA.to_text(),[ogg.to_text() for ogg in [oggB] if oggB is not None])\n                            #    for oggsE in possibili_oggettiEXTRA:\n                            #        print(' -',vicinanza_ad_AB(oggsE),[ogg.to_text() for ogg in oggsE])\n                        \n                        \n                        if self.t.solo_quadratini:\n                            def are_vicini(oggsE):\n                                if oggA.posizione is None:\n                                    return all([oggE.dista(oggA,0) for oggE in oggsE])\n                                else:\n                                    return all([oggE.dista(oggetto_out,0) for oggE in oggsE])\n                            def are_allined(oggsE):\n                                #posizione di oggA non pu\u00f2 mai essere None (?? vero?)\n                                if len(oggsE)==0:\n                                    return True\n                                if oggA.posizione is None:\n                                    return any([oggE.posizione[0]==oggA.posizione[0] or oggE.posizione[1]==oggA.posizione[1] for oggE in oggsE if oggE.posizione is not None])\n                                else:\n                                    return any([oggE.posizione[0]==oggetto_out.posizione[0] or oggE.posizione[1]==oggetto_out.posizione[1] for oggE in oggsE if oggE.posizione is not None])\n                            def shape_mult(oggsE):\n                                return any([oggE.is_shape_mult for oggE in oggsE]) if len(oggsE)>0 else True\n                            possibili_oggettiEXTRA = [oggsE for oggsE in possibili_oggettiEXTRA if are_vicini(oggsE) or are_allined(oggsE) or shape_mult(oggsE)] #ocho a prendere l'insieme vuoto\n                            #possibili_oggettiEXTRA = [oggsE for oggsE in possibili_oggettiEXTRA if are_allined(oggsE)] #ocho a prendere l'insieme vuoto\n                            def quanto_sballano(oggsE):\n                                if shape_mult(oggsE):\n                                    return -3\n                                for oggE in oggsE:\n                                    if oggE.posizione is None:\n                                        continue\n                                    if oggE.posizione[0]+1==oggA.posizione[0] and oggE.posizione[1]+1==oggA.posizione[1]:\n                                        return -2\n                                    for const_pos in self.costanti_posizione_IF:\n                                        if oggA.posizione is not None and oggE.posizione is not None:\n                                            if oggA.posizione[0]==oggE.posizione[0]+const_pos[0] and oggA.posizione[1]==oggE.posizione[1]+const_pos[1]:\n                                                return -1\n                                    if oggB is not None and oggA.posizione is not None and oggE.posizione is not None:\n                                        if oggE.colore==oggB.colore and (oggA.posizione[0]==oggE.posizione[0] or oggA.posizione[1]==oggE.posizione[1]):\n                                            return 0\n                                return 1\n                            possibili_oggettiEXTRA.sort(key=quanto_sballano)\n                            if STAMPA:\n                                print('possibili extra per AB',oggA.to_text(),[ogg.to_text() for ogg in [oggB] if oggB is not None])\n                                for oggsE in possibili_oggettiEXTRA:\n                                    print(' -',quanto_sballano(oggsE),[ogg.to_text() for ogg in oggsE])\n                        \n                                \n                        #\n                        #\n                        #### fissa oggetti EXTRA ####\n                        for oggettiEXTRA in possibili_oggettiEXTRA:\n                            if STAMPA and len(oggettiEXTRA)>0:\n                                print('    fisso ',len(oggettiEXTRA),'ogg extra, il primo \u00e8',oggettiEXTRA[0].to_text())\n                            #for oE in oggettiEXTRA:\n                            #    print('exx',oE.to_text())\n                            if time.time()-clock_obj > TEMPO_obj:\n                                if STAMPA:\n                                    print('      STOP TEMPO 4 oggEXTRA')\n                                break\n                            if len(funzioni_papabili[self.t.train_size]) > 0 and self.t.train_size>2:\n                                if STAMPA:\n                                    print('      STOP SBAMMMATO')\n                                break\n                            if len(oggettiEXTRA)==2:\n                                if oggettiEXTRA[0] is oggettiEXTRA[1]:\n                                    print('dio BUBUUUUUUUUUUUUUUUUUU')\n\n                            oggetti_input = [oggA,oggB] + oggettiEXTRA\n\n                            ##### trova predicati (IF singoli) per oggetti EXTRA #####\n                            for index,ogg in enumerate(oggettiEXTRA):\n                                predicati[index+2] = self.trova_predicati_validi(ogg)\n\n                            ##### trova relazioni (IF doppi) per oggetti EXTRA con A e B #####\n                            for index,ogg in enumerate(oggettiEXTRA):\n                                relazioni_oggA[index] = self.trova_relazioni_valide(oggA,ogg)\n                                relazioni_oggB[index] = self.trova_relazioni_valide(oggB,ogg)\n                            relazioni = [relazioni_oggA_oggB] + relazioni_oggA + relazioni_oggB\n                            \n                            if len(oggettiEXTRA)>=2:\n                                relazioni_ogg1_ogg2 = self.trova_relazioni_valide(oggettiEXTRA[0],oggettiEXTRA[1])\n                                \n                                \n                            #salvo predicati e relazioni trovate in una forma \"sensata\" (non \u00e8 vero fa cacare ma almeno meglio di come era prima)\n                            all_condizioni = []\n                            for rel in relazioni_oggA_oggB:\n                                all_condizioni.append(((0,1),rel))\n                            for rel in relazioni_ogg1_ogg2:\n                                all_condizioni.append(((2,3),rel))\n                            for i_ogg,rels in enumerate(relazioni_oggA):\n                                for rel in rels:\n                                    all_condizioni.append(((0,i_ogg+2),rel))\n                            for i_ogg,rels in enumerate(relazioni_oggB):\n                                for rel in rels:\n                                    all_condizioni.append(((1,i_ogg+2),rel))\n                            for i_ogg,preds in enumerate(predicati):\n                                for pred in preds:\n                                    all_condizioni.append(((i_ogg,None),pred))\n                                \n                                \n                            ##### trova oggetti in input per supporto f_posizione #####\n                            index_oggetti_usabili_per_posizione = []\n                            possibili_indexes_supporto_fpos = []\n                            if var_max_coeff_fpos==0:\n                                for i,ogg in enumerate(oggetti_input):\n                                    if ogg is not None and ogg.posizione is not None and ogg.posizione == oggetto_out.posizione:\n                                        index_oggetti_usabili_per_posizione.append(i)\n                            else:\n                                for i,ogg in enumerate(oggetti_input):\n                                    if ogg is not None and (ogg.posizione is not None or ogg.dimmezzi is not None):\n                                    #if ogg is not None and ogg.dimmezzi is not None:\n                                        index_oggetti_usabili_per_posizione.append(i)\n                            #trova i sottoinsiemi\n                            for cardinalita in range(1,var_max_oggetti_per_fpos+1):\n                                possibili_indexes_supporto_fpos += elenca_solo_sottoinsiemi_di(index_oggetti_usabili_per_posizione, cardinalita=cardinalita)\n\n                            for indexes_supporto_fpos in possibili_indexes_supporto_fpos:\n                                if time.time()-clock_obj > TEMPO_obj:\n                                    if STAMPA:\n                                        print('      STOP TEMPO 3 index fpos')\n                                    break\n                                if len(funzioni_papabili[self.t.train_size]) > 0 and self.t.train_size>2:\n                                    if STAMPA:\n                                        print('      STOP SBAMMMATO')\n                                    break\n                                ##### trova f_posizioni #####\n                                oggetti_supporto = [oggetti_input[index] for index in indexes_supporto_fpos]\n                                x_target = oggetto_out.posizione[1] - fpos_const[1]\n                                y_target = oggetto_out.posizione[0] - fpos_const[0]\n                                if len(oggetti_supporto)==2:\n                                    if STAMPA:\n                                        print('         ',[oggetti_supporto[0].posizione,oggetti_supporto[0].dimmezzi],\n                                               [oggetti_supporto[1].posizione,oggetti_supporto[1].dimmezzi],'---->(',y_target,x_target,')')\n                                    possibili_sgn_pos = [False,True]\n                                else:\n                                    possibili_sgn_pos = [False]\n                                for sgn_pos in possibili_sgn_pos:\n                                    if time.time()-clock_obj > TEMPO_obj:\n                                        if STAMPA:\n                                            print('      STOP TEMPO 2 sgn pos')\n                                        break\n                                    if len(funzioni_papabili[self.t.train_size]) > 0 and self.t.train_size>2:\n                                        if STAMPA:\n                                            print('      STOP SBAMMMATO')\n                                        break\n                                    #print('cerco fposX',oggetti_supporto[0].posizione,oggetti_supporto[0].dimmezzi,'--->',x_target)\n                                    shape_in_plus = ( immagine_in.shape[0]+1,immagine_in.shape[1]+1 )\n                                    if with_modulo:\n                                        fposizioni_X = self.trova_fposizioni_valide('x', oggetti_supporto, x_target, var_max_coeff_fpos, var_max_coeff_nonzero_fpos,\n                                                                                    modulo=immagine_out.shape[1], sgn_pos=sgn_pos, geom=g, shape_geom=shape_in_plus)\n                                        fposizioni_Y = self.trova_fposizioni_valide('y', oggetti_supporto, y_target, var_max_coeff_fpos, var_max_coeff_nonzero_fpos,\n                                                                                    modulo=immagine_out.shape[0], sgn_pos=sgn_pos, geom=g, shape_geom=shape_in_plus)\n                                    else:\n                                        fposizioni_X = self.trova_fposizioni_valide('x', oggetti_supporto, x_target, var_max_coeff_fpos, var_max_coeff_nonzero_fpos,\n                                                                                    sgn_pos=sgn_pos, geom=g, shape_geom=shape_in_plus)\n                                        fposizioni_Y = self.trova_fposizioni_valide('y', oggetti_supporto, y_target, var_max_coeff_fpos, var_max_coeff_nonzero_fpos,\n                                                                                    sgn_pos=sgn_pos, geom=g, shape_geom=shape_in_plus)\n                                        \n                                    \n                                    fposizioni_X.sort(key=lambda fposX: 0 if fposX in fposizioni_Y else 1)\n                                    fposizioni_Y.sort(key=lambda fposY: 0 if fposY in fposizioni_X else 1)\n                                    \n                                    if STAMPA:\n                                        print('         DC:',indexes_supporto_fpos,'  x',fposizioni_X,'  y',fposizioni_Y, sgn_pos)\n                                    def is_good2(sequenza, coeff_max): \n                                        #verifica che coeff_max si verifichi almeno una volta (in valore assoluto) in modo da evitare ripetizioni\n                                        massimo_raggiunto = 0\n                                        for pair in sequenza:\n                                            for elem in pair:\n                                                massimo_raggiunto = max(massimo_raggiunto,abs(elem))\n                                        return coeff_max == massimo_raggiunto\n                                    def is_good3(sequenzaX, sequenzaY):\n                                        #verifica che non ci siano oggetti che hanno tutti e 2 i coefficienti nulli sia per X che per Y\n                                        for pairX,pairY in zip(sequenzaX,sequenzaY):\n                                            if pairX==(0,0) and pairY==(0,0):\n                                                return False\n                                        return True\n                                    #\n                                    #\n                                    #### fissa coefficienti posizioni, predicati e relazioni ####\n                                    for fpos_X, fpos_Y in cartesian([fposizioni_X,fposizioni_Y]):\n                                        #print('           fpos',fpos_X,fpos_Y)\n                                        if not is_good3(fpos_X,fpos_Y):\n                                            continue\n                                        if time.time()-clock_obj > TEMPO_obj:\n                                            if STAMPA:\n                                                print('      STOP TEMPO 1 fpos')\n                                            break\n                                        if len(funzioni_papabili[self.t.train_size]) > 0 and self.t.train_size>2:\n                                            if STAMPA:\n                                                print('      STOP SBAMMMATO')\n                                            #break ############################################################# ocho al ttiempo\n\n\n                                        \n                                        gia_usato = [False for _ in range(len(all_condizioni))]\n\n                                        #no_IF = [[] for _ in range(3*len(oggetti_input)-3)] \n                                        no_IF = [[] for _ in range(3*len(oggetti_input)-2)]    #aggiunta la relazione ogg1,ogg2     \n                                        \n                                        if self.t.solo_quadratini:\n                                            if oggB is not None and oggB.forma is None and oggB.posizione is None:\n                                                print('non parto senza IF perch\u00e8 nze po ffa')\n                                                no_IF[1].append(Predicato(attributo='colore', val=oggB.colore, applicazione=lambda x,val: x is val, appl_to_text='is'))\n                                            elif oggB is not None and len(oggettiEXTRA)==1 and oggettiEXTRA[0].colore==oggB.colore:\n                                                no_IF[2 + 2*len(oggetti_input)-3].append(Relazione(attributo1='colore', attributo2='colore', applicazione=lambda x,y: x is y, appl_to_text='is')) \n                                        \n                                        funzione = FUN(len(oggetti_input), no_IF , indexes_supporto_fpos, fpos_X, fpos_Y, fpos_const=fpos_const,\n                                                               geom=g, is_oggB_None=oggB==None, sgn_pos=sgn_pos)\n\n                                        errori, caselle_coperte, immagini_coperte, oggetti_trovati = self.t.check_funzione_copertura(funzione,\n                                                                                                            solo_coperture_totali=True, with_modulo=self.with_modulo)\n                                        #print(errori,immagini_coperte,oggetti_trovati)\n                                        if oggetto_out not in oggetti_trovati:\n                                            print()\n                                            print()\n                                            print('MA GHE OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOH')\n                                            print(fpos_X,fpos_Y)\n                                        controllo_tempo = (time.time(), TEMPO_obj-time.time()+clock_obj)\n                                        if immagini_coperte>=minimo_numero_immagini or (not solo_funzioni_generali and len(oggetti_trovati)>0):\n                                            if errori==0:\n                                                funzioni_papabili[immagini_coperte].append(funzione)\n                                            elif controllo_tempo[1]>0:\n                                                if len(oggetti_trovati)>=curr_max_n_ogg_trovati:\n                                                    dati_per_fun = (indexes_supporto_fpos, fpos_X, fpos_Y, fpos_const, g, oggB==None, sgn_pos)\n                                                    if STAMPA:\n                                                        print('         lancio SOLVE_IF, errori',errori,' - imm coperte',immagini_coperte, ' - tempo',controllo_tempo[1])                 \n                                                    max_n_ogg_trovati = self.solve_magic_IF(controllo_tempo,0,no_IF,errori,len(oggetti_input),dati_per_fun,funzioni_papabili,\n                                                                                            var_max_numero_if_totali,all_condizioni,gia_usato,solo_funzioni_generali,minimo_numero_immagini,False)\n                                                    curr_max_n_ogg_trovati = max(curr_max_n_ogg_trovati, max_n_ogg_trovati)\n                                                else:\n                                                    if STAMPA:\n                                                        print('           non lancio SOLVE_IF, pochi ogg risolti',len(oggetti_trovati),'vs',curr_max_n_ogg_trovati)\n                                            else:\n                                                if STAMPA:\n                                                    print('         non ho tempo di lanciare SOLVE_IF')\n                                    #fine for scelta fpos\n                                #fine for sgn_fpos\n                            #fine for scelta oggetti supporto fpos\n                            '''\n                            if self.solo_boost_ij and self.prova_anche_boost_ij and oggA.posizione is not None:\n                                if STAMPA:\n                                    print('     e vai col boost')\n                                sgn_pos=False #non dovrebbe servire mai True qui\n                                index_oggetti_usabili_per_posizione = []\n                                for i,ogg in enumerate(oggetti_input):\n                                    if i!=0: #NON DEVO PRENDERE OGG A perch\u00e8 lo user\u00f2 per il BOOSTij\n                                        if ogg is not None and ogg.posizione is not None:\n                                            index_oggetti_usabili_per_posizione.append(i)\n                                for index_supporto_boost_ij in index_oggetti_usabili_per_posizione:\n                                    oggetto_supporto = oggetti_input[index_supporto_boost_ij]\n                                    x_ottenuta = immagine_in.shape[1]*oggetto_supporto.posizione[1] + oggA.posizione[1]\n                                    y_ottenuta = immagine_in.shape[0]*oggetto_supporto.posizione[0] + oggA.posizione[0]\n                                    if x_ottenuta==oggetto_out.posizione[1] and y_ottenuta==oggetto_out.posizione[0]:\n                                        if STAMPA:\n                                            print('     bono lui')\n                                        indexes_supporto_fpos = []\n                                        fpos_X = [(1,0)]\n                                        fpos_Y = [(1,0)]\n                                        if time.time()-clock_obj > TEMPO_obj:\n                                            if STAMPA:\n                                                print('      STOP TEMPO 3b BOOSTij')\n                                            break\n\n                                        gia_usato = [False for _ in range(len(all_condizioni))]\n\n                                        #no_IF = [[] for _ in range(3*len(oggetti_input)-3)] \n                                        no_IF = [[] for _ in range(3*len(oggetti_input)-2)]    #aggiunta la relazione ogg1,ogg2     \n\n                                        if self.t.solo_quadratini:\n                                            if oggB is not None and oggB.forma is None and oggB.posizione is None:\n                                                no_IF[1].append(Predicato(attributo='colore', val=oggB.colore, applicazione=lambda x,val: x is val, appl_to_text='is'))\n                                            elif oggB is not None and len(oggettiEXTRA)==1 and oggettiEXTRA[0].colore==oggB.colore:\n                                                no_IF[2 + 2*len(oggetti_input)-3].append(Relazione(attributo1='colore', attributo2='colore', applicazione=lambda x,y: x is y, appl_to_text='is')) \n\n                                        funzione = FUN(len(oggetti_input), no_IF , indexes_supporto_fpos, fpos_X, fpos_Y, fpos_const=fpos_const,\n                                                               geom=g, is_oggB_None=oggB==None, sgn_pos=sgn_pos, boost_ij=index_supporto_boost_ij)\n\n                                        errori, caselle_coperte, immagini_coperte, oggetti_trovati = self.t.check_funzione_copertura(funzione,\n                                                                                                            solo_coperture_totali=True, with_modulo=self.with_modulo)\n                                        controllo_tempo = (time.time(), TEMPO_obj-time.time()+clock_obj)\n                                        if immagini_coperte>=minimo_numero_immagini or (not solo_funzioni_generali and len(oggetti_trovati)>0):\n                                            if errori==0:\n                                                funzioni_papabili[immagini_coperte].append(funzione)\n                                            elif controllo_tempo[1]>0:\n                                                if len(oggetti_trovati)>=curr_max_n_ogg_trovati:\n                                                    dati_per_fun = (indexes_supporto_fpos, fpos_X, fpos_Y, fpos_const, g, oggB==None, sgn_pos)\n                                                    if STAMPA:\n                                                        print('         lancio SOLVE_IF boost_ij, errori',errori,' - imm coperte',immagini_coperte, ' - tempo',controllo_tempo[1])                 \n                                                    max_n_ogg_trovati = self.solve_magic_IF(controllo_tempo,0,no_IF,errori,len(oggetti_input),dati_per_fun,funzioni_papabili,\n                                                                                            var_max_numero_if_totali,all_condizioni,gia_usato,solo_funzioni_generali,minimo_numero_immagini,False,\n                                                                                            with_boost_ij=index_supporto_boost_ij)\n                                                    curr_max_n_ogg_trovati = max(curr_max_n_ogg_trovati, max_n_ogg_trovati)\n                                                else:\n                                                    if STAMPA:\n                                                        print('           non lancio SOLVE_IF, pochi ogg risolti',len(oggetti_trovati),'vs',curr_max_n_ogg_trovati)\n                                            else:\n                                                if STAMPA:\n                                                    print('         non ho tempo di lanciare SOLVE_IF')   \n                                '''\n                        #fine for scelta oggettiEXTRA\n                    #fine for scelta oggA e oggB\n                #fine for scelta constanti fpos\n                if STAMPA:\n                    print()\n                    print('    adesso mi incazzo di pi\u00f9')\n                    print('    ..')\n                if time.time()-clock_obj > TEMPO_obj:\n                    if STAMPA:\n                        print('     STOP TEMPO')\n                    return funzioni_papabili\n            #fine for livelli incazzatura\n        #fine for geometry\n        return funzioni_papabili\n    \n    \n    def solve_magic_IF(self,tempo,profondita,IF,old_errori,fake_num_oggetti_input,dati_per_fun,funzioni_papabili,max_profondita,all_condizioni,gia_usato,solo_funzioni_generali,minimo_numero_immagini,STAMPA): #una condizione \u00e8 una coppia ((indice\/indici), (predicato\/relazione))\n        tentativi = []\n        curr_max_n_ogg_trovati = 0\n        stringa = '             -'\n        stringa += '  '*profondita\n        #for new_i_ogg,new_cond in all_condizioni:\n        for index_cond, (new_i_ogg, new_cond) in enumerate(all_condizioni):  \n            if gia_usato[index_cond]:\n                continue\n            if profondita==0 and new_cond.complexity>1:\n                continue\n            if profondita<=1 and new_cond.complexity>=3:\n                continue\n            if time.time()-tempo[0]>tempo[1]:\n                if STAMPA:\n                    print(stringa,'STOP TEMPO SOLVE MAGIC IF')\n                return curr_max_n_ogg_trovati\n            if new_i_ogg[1] is None: #\u00e8 un predicato\n                IF[new_i_ogg[0]].append(new_cond) \n            elif new_i_ogg[0] is 0: #\u00e8 una relazione con oggA\n                IF[new_i_ogg[1]+fake_num_oggetti_input-1].append(new_cond) \n            elif new_i_ogg[0] is 1: #\u00e8 una relazione con oggB\n                IF[new_i_ogg[1]+2*fake_num_oggetti_input-3].append(new_cond) \n            elif new_i_ogg[0] is 2: #\u00e8 una relazione con oggEXTRA1\n                IF[3*fake_num_oggetti_input-3].append(new_cond) \n\n            funzione = FUN(fake_num_oggetti_input, copy_list(IF) , dati_per_fun[0], dati_per_fun[1], dati_per_fun[2], fpos_const=dati_per_fun[3], geom=dati_per_fun[4] ,is_oggB_None=dati_per_fun[5], sgn_pos=dati_per_fun[6])\n            #funzione.stampa()\n            errori, caselle_coperte, immagini_coperte, oggetti_trovati = self.t.check_funzione_copertura(funzione,\n                                                                                                    solo_coperture_totali=True, with_modulo=self.with_modulo)\n            if new_i_ogg[1] is None: #\u00e8 un predicato\n                IF[new_i_ogg[0]].pop()\n            elif new_i_ogg[0] is 0: #\u00e8 una relazione con oggA\n                IF[new_i_ogg[1]+fake_num_oggetti_input-1].pop()\n            elif new_i_ogg[0] is 1: #\u00e8 una relazione con oggB\n                IF[new_i_ogg[1]+2*fake_num_oggetti_input-3].pop() \n            elif new_i_ogg[0] is 2: #\u00e8 una relazione con oggEXTRA1\n                IF[3*fake_num_oggetti_input-3].pop() \n                \n            if immagini_coperte>=minimo_numero_immagini or (not solo_funzioni_generali and len(oggetti_trovati)>0): #quindi copro almeno un oggetto\n                #if not solo_almeno_due_oggetti or (solo_almeno_due_oggetti and len(oggetti_trovati)>=2):\n                if errori==0:\n                    funzioni_papabili[immagini_coperte].append(funzione)\n                    curr_max_n_ogg_trovati = max(curr_max_n_ogg_trovati,len(oggetti_trovati))\n                    #print('+1')\n                elif errori<old_errori:\n                    tentativi.append(((new_i_ogg,new_cond), immagini_coperte, errori, len(oggetti_trovati), index_cond))\n        if time.time()-tempo[0]>tempo[1]:\n            if STAMPA:\n                print(stringa,'STOP TEMPO SOLVE MAGIC IF')\n            return curr_max_n_ogg_trovati\n        if len(tentativi)==0:\n            if STAMPA:\n                print(stringa,'MAGIC IF facevano tutti cah\u00e0')\n            return curr_max_n_ogg_trovati\n        if profondita==max_profondita:\n            if STAMPA:\n                print(stringa,'MAGIC IF massima profondita')\n            return curr_max_n_ogg_trovati\n        tentativi.sort(key=lambda x : x[1]*1000000000-x[2], reverse=True)    # sorta per max immagini coperte e poi per min errori\n        #tentativi.sort(key=lambda x : x[1]*1000000000 + x[3]*1000000 -x[2], reverse=True)    # sorta per max immagini coperte e poi per max oggetti coperti e poi per min errori\n        #tentativi.sort(key=lambda x : x[3]*100000000 -x[2], reverse=True)    # sorta per max oggetti coperti e poi per min errori\n        max_immagini_coperte = tentativi[0][1]\n        max_n_oggetti_trovati = tentativi[0][3]\n        min_errori = tentativi[0][2]\n        if STAMPA:\n            print(stringa,max_immagini_coperte,max_n_oggetti_trovati,min_errori)\n        for tentativo in tentativi:  #################################################### REMINDER quando avr\u00f2 pi\u00f9 tempo: fare questa scrematura solo ogni due livelli\n            if tentativo[1]==max_immagini_coperte and tentativo[2]==min_errori:\n            #if tentativo[1]==max_immagini_coperte and tentativo[3]==max_n_oggetti_trovati and tentativo[2]==min_errori:\n            #if tentativo[3]==max_n_oggetti_trovati and tentativo[2]==min_errori:\n                new_i_ogg,new_cond = tentativo[0]\n                index_cond = tentativo[4]\n                if STAMPA:\n                    print(stringa,new_cond.to_text(),new_i_ogg)\n                    \n                if new_i_ogg[1] is None: #\u00e8 un predicato\n                    IF[new_i_ogg[0]].append(new_cond) \n                elif new_i_ogg[0] is 0: #\u00e8 una relazione con oggA\n                    IF[new_i_ogg[1]+fake_num_oggetti_input-1].append(new_cond) \n                elif new_i_ogg[0] is 1: #\u00e8 una relazione con oggB\n                    IF[new_i_ogg[1]+2*fake_num_oggetti_input-3].append(new_cond) \n                elif new_i_ogg[0] is 2: #\u00e8 una relazione con oggEXTRA1\n                    IF[3*fake_num_oggetti_input-3].append(new_cond) \n                gia_usato[index_cond]=True\n                    \n                max_n_ogg_trovati = self.solve_magic_IF(tempo,profondita+1,IF,tentativo[2],fake_num_oggetti_input,dati_per_fun,funzioni_papabili,max_profondita,all_condizioni,gia_usato,solo_funzioni_generali,minimo_numero_immagini,STAMPA)\n                curr_max_n_ogg_trovati = max(curr_max_n_ogg_trovati, max_n_ogg_trovati)\n                \n                gia_usato[index_cond]=False\n                if new_i_ogg[1] is None: #\u00e8 un predicato\n                    IF[new_i_ogg[0]].pop()\n                elif new_i_ogg[0] is 0: #\u00e8 una relazione con oggA\n                    IF[new_i_ogg[1]+fake_num_oggetti_input-1].pop()\n                elif new_i_ogg[0] is 1: #\u00e8 una relazione con oggB\n                    IF[new_i_ogg[1]+2*fake_num_oggetti_input-3].pop() \n                elif new_i_ogg[0] is 2: #\u00e8 una relazione con oggEXTRA1\n                    IF[3*fake_num_oggetti_input-3].pop()\n            else:\n                return curr_max_n_ogg_trovati\n        return curr_max_n_ogg_trovati\n        \n        \n    def computa_funzioni_papabili(self,funzioni_papabili,STAMPA):\n        new_ALLfunzioni = []\n        funzioni = []\n        funzioni_facili = []\n        funzioni_facili_simmetriche = []\n        ogg_che_ho_risolto_adesso = set()\n        max_immagini_coperte = 0\n        for immagini_coperte in range(self.t.train_size, 0, -1): #da tutte a 1\n            if len(funzioni_papabili[immagini_coperte])>0:\n                for fun in funzioni_papabili[immagini_coperte]:\n                    funzioni.append(fun)\n                    for ogg in fun.oggetti_trovati:\n                        ogg_che_ho_risolto_adesso.add(ogg)\n                max_immagini_coperte = immagini_coperte\n                break\n        if max_immagini_coperte==0:\n            if STAMPA:\n                print('      SBAMM un cazzo, non ho trovato nada')\n            return []\n        if STAMPA:\n            print()\n            print('       SBAAAMMMMMMMMMMMMMM   buone in ',max_immagini_coperte,'immagini')\n            print('          - ho trovato',len(funzioni),'funzioni che in totale risolvono',len(ogg_che_ho_risolto_adesso),'oggetti')\n        tot_n_oggetti_risolti_adesso = len(ogg_che_ho_risolto_adesso)\n        def complexx(fun):\n            nuovi_ogg_trovati = [ogg for ogg in fun.oggetti_trovati if not ogg.is_risolto]\n            return 100*(tot_n_oggetti_risolti_adesso-len(nuovi_ogg_trovati))+fun.complessita\n            #return 100*(tot_n_oggetti_risolti_adesso-len(fun.oggetti_trovati))+fun.complessita\n        funzioni.sort(key = complexx)\n        complessita_minima = complexx(funzioni[0])\n        funzioni_facili = [fun for fun in funzioni if complexx(fun)==complessita_minima]\n        if STAMPA:\n            print('      funzioni facili ',len(funzioni),'->',len(funzioni_facili),'       (complessita =',complessita_minima,')')\n        funzioni_facili_simmetriche = [fun for fun in funzioni_facili if fun.coefficienti_f_pos['x']==fun.coefficienti_f_pos['y']]\n        if STAMPA:\n            print('      funzioni simmetriche ',len(funzioni_facili),'->',len(funzioni_facili_simmetriche))\n\n        new_ALLfunzioni =  funzioni_facili if len(funzioni_facili_simmetriche)==0 else funzioni_facili_simmetriche\n        forme_coperte_almeno_una_volta, colori_coperti_almeno_una_volta, posizioni_coperte_almeno_una_volta = set(),set(),set()\n        for fun in new_ALLfunzioni:\n            for ogg in fun.oggetti_trovati:\n                #print('risolta ->',ogg.colore,ogg.forma)\n                forme_coperte_almeno_una_volta.add(ogg.forma)\n                colori_coperti_almeno_una_volta.add(ogg.colore)\n                posizioni_coperte_almeno_una_volta.add(ogg.posizione)\n                ogg.is_risolto = True\n                #print('    metto risolto',ogg.to_text())\n                self.ogg_che_ho_risolto.add(ogg)\n        if STAMPA:\n            print('         -forme out: ',forme_coperte_almeno_una_volta)\n            print('         -colori out: ',colori_coperti_almeno_una_volta)\n            print('         -posizioni out: ',posizioni_coperte_almeno_una_volta)\n            for fun in new_ALLfunzioni[:7]:\n                fun.stampa()\n        return new_ALLfunzioni\n    \n    \n    \n#-------------------------------------------------------------------------------------------#\n\n    def prova_a_generalizzare(self,fun,TEMPO_gen=10,possibili_fpos_const=[(0,0)],STAMPA=False):\n        #prendi gli if delle funzioni che swegano\n        #fissa quegli IF\n        #smattatela provando fpos a rota\n        t = self.t\n        clock_gen = time.time()\n        def trova_fposizioni(oggetti_input, coeff_max=1, max_non_zero_elem=4):\n            #funzione ausiliaria per trovare tutti i possibili coefficienti\n            def all_sequences_with(length=6, massimo=1):\n                if length==1:\n                    return [[valore] for valore in range(-massimo,massimo+1)]\n                all_sequences = []\n                for valore in range(-massimo,massimo+1):\n                    sequences = all_sequences_with(length=length-1, massimo=massimo)\n                    for sequence in sequences:\n                        sequence.append(valore)\n                    all_sequences += sequences\n                return all_sequences\n            fposizioni_raw_pos = all_sequences_with(length=len(oggetti_input), massimo=coeff_max)\n            fposizioni_raw_dim = all_sequences_with(length=len(oggetti_input), massimo=coeff_max)\n            fposizioni_raw = []\n            for seq_pos, seq_dim in product(fposizioni_raw_pos, fposizioni_raw_dim):\n                joint_seq = [(seq_pos[i],seq_dim[i]) for i in range(len(oggetti_input))]\n                fposizioni_raw.append(joint_seq)\n            def is_good1(sequenza,max_non_zero_elem=max_non_zero_elem):\n                #verifica che non ci siano troppi elementi diversi da 0\n                non_zero_elem = 0\n                for pair in sequenza:\n                    for elem in pair:\n                        if elem!=0:\n                            non_zero_elem += 1\n                if non_zero_elem <= max_non_zero_elem:\n                    return True\n                else:\n                    return False\n            def is_good2(sequenza,coeff_max): \n                massimo_raggiunto = 0\n                for pair in sequenza:\n                    for elem in pair:\n                        massimo_raggiunto = max(massimo_raggiunto,abs(elem))\n                return coeff_max==massimo_raggiunto\n            '''def is_good3(sequenzaX, sequenzaY): ####### ha senso qui solo se guardo solo le simmetriche!!!!!!\n                #verifica che non ci siano oggetti che hanno tutti e 2 i coefficienti nulli sia per X che per Y\n                for pairX,pairY in zip(sequenzaX,sequenzaY):\n                    if pairX==(0,0) and pairY==(0,0):\n                        return False\n                return True'''\n            fposizioni = [sequenza for sequenza in fposizioni_raw if is_good1(sequenza) and is_good2(sequenza,coeff_max)]\n            if len(oggetti_input) == 2: \n                fposizioni.append([(0.5, 0), (0.5, 0)])  #punto medio\n            return fposizioni\n        new_ALLfunzioni = []\n        IF_boni = fun.get_IFs()\n        if STAMPA:\n            print('-------------')\n            print('--------provo a generalizzare funzione')\n            fun.stampa()\n        indexes_supporto_fpos = fun.indexes_supporto_fpos\n        oggetti_supporto = [None for index in indexes_supporto_fpos]\n        def find_max(sequenza): \n            massimo_raggiunto = 0\n            for pair in sequenza:\n                for elem in pair:\n                    massimo_raggiunto = max(massimo_raggiunto,abs(elem))\n            return massimo_raggiunto\n                                    \n        coeff_max = int(max(find_max(fun.coefficienti_f_pos['x']), find_max(fun.coefficienti_f_pos['y']))) # coeff_max che amenta finch\u00e8 trovo funzioni!\n        if STAMPA:\n            print('La funzione aveva coefficiente massimo = ',coeff_max)\n        ho_speranza_di_trovare_funzioni_valide = True\n        ho_ancora_speranza_di_trovare_funzioni_valide = True\n        #ho_ancora_speranza_di_trovare_funzioni_valide = False\n        while ho_speranza_di_trovare_funzioni_valide or ho_ancora_speranza_di_trovare_funzioni_valide and coeff_max<=6:\n            if time.time()-clock_gen > TEMPO_gen:\n                break\n            if not ho_speranza_di_trovare_funzioni_valide:\n                ho_ancora_speranza_di_trovare_funzioni_valide = False\n            ho_speranza_di_trovare_funzioni_valide = False\n            coeff_max += 1\n            possibili_fpos_x = trova_fposizioni(oggetti_supporto, coeff_max=coeff_max, max_non_zero_elem=6)\n            if STAMPA:\n                print('PROVO coeff_max =',coeff_max)\n                print('   fpos possibili =',len(possibili_fpos_x))\n            #possibili_fpos_y = trova_fposizioni_valide('y', oggetti_supporto, None, coeff_max=coeff_max, max_non_zero_elem=6)\n            #print('   fpos possibili =',len(possibili_fpos_x)*len(possibili_fpos_y))\n            #for fpos_x,fpos_y in product(possibili_fpos_x,possibili_fpos_y):\n            funzioni_papabili = [[] for _ in range(t.train_size + 1)] #divise gi\u00e0 per quante immagini coprono\n            #print(possibili_fpos_const)\n            for fpos_const in possibili_fpos_const:\n                if time.time()-clock_gen > TEMPO_gen:\n                    break\n                for fpos_x,fpos_y in zip(possibili_fpos_x,possibili_fpos_x):\n                    if time.time()-clock_gen > TEMPO_gen:\n                        break\n                    new_fun = FUN(fun.numero_input, IF_boni, indexes_supporto_fpos, fpos_x, fpos_y, fpos_const=fpos_const, is_oggB_None=fun.is_oggB_None,\n                                  geom=fun.geom, sgn_pos=fun.sgn_pos)\n                    errori, caselle_coperte, immagini_coperte, oggetti_trovati = t.check_funzione_copertura(new_fun,\n                                                                                                            solo_coperture_totali=True, with_modulo=self.with_modulo)\n                    if errori==0 and immagini_coperte>1: #quindi copro almeno un oggetto\n                        #if len(oggetti_trovati)>=2:\n                        funzioni_papabili[immagini_coperte].append(new_fun)\n            \n            #new_new_ALLfunzioni = self.computa_funzioni_papabili(funzioni_papabili,STAMPA)\n            new_new_ALLfunzioni = []\n            for immagini_coperte in range(self.t.train_size, 1, -1): #da tutte a 2\n                if len(funzioni_papabili[immagini_coperte])>0:\n                    new_new_ALLfunzioni += funzioni_papabili[immagini_coperte]\n            new_ALLfunzioni += new_new_ALLfunzioni\n            if STAMPA:\n                print('PROVA coeff_max =',coeff_max,' ----->',len(new_new_ALLfunzioni))\n            if len(new_new_ALLfunzioni)>0:\n                ho_speranza_di_trovare_funzioni_valide = True\n                ho_ancora_speranza_di_trovare_funzioni_valide = True\n            #if self.check_magico_ELSE_z():\n            #    if STAMPA:\n            #        print('FINITO')\n            #    break\n        if STAMPA:\n            print('--------fine prova a generalizzare funzione')\n            print('-------------')\n        return new_ALLfunzioni\n    \n    \n#----------------------------------------------------------------------------------------#\n        \n    \n    #def prova_a_generalizzare_XY(self,fun,TEMPO_gen=10,STAMPA=False):\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ####################\n    # shape dell'input #\n    def trova_shape_input_type(self):\n        for i in range(1,self.t.train_size):\n            if self.t.trainIMM[i-1]['input'].shape != self.t.trainIMM[i]['input'].shape:\n                self.shape_input_costante = False\n        \n    #####################\n    # shape dell'output #\n    def trova_shape_output_type(self):\n        #uguale all'input\n        for i in range(self.t.train_size):\n            if self.t.trainIMM[i]['input'].shape != self.t.trainIMM[i]['output'].shape:\n                self.shape_output_comeinput = False\n        #costante per ogni output\n        for i in range(1,self.t.train_size):\n            if self.t.trainIMM[i-1]['output'].shape != self.t.trainIMM[i]['output'].shape:\n                self.shape_output_costante = False\n        #uguale alla dimensione di un'oggetto\n        for i in range(self.t.train_size):\n            immagine_input = self.t.trainIMM[i]['input']\n            shape_output = self.t.trainIMM[i]['output'].shape\n            if shape_output not in immagine_input.dimensione.keys():\n                self.shape_output_comeoggetto = False\n            else:\n                for ogg in immagine_input.dimensione[shape_output]:\n                    ogg.is_for_shape_out = True\n            #ma quale oggetto? EH\n        #uguale a dimensione input * (m,n)\n        for m,n in product(range(1,5),range(1,5)):\n            self.shape_output_comeinput_per = True\n            for i in range(self.t.train_size):\n                shape_in, shape_out = self.t.trainIMM[i]['input'].shape, self.t.trainIMM[i]['output'].shape\n                if shape_in[0]*m != shape_out[0] or shape_in[1]*n != shape_out[1]:\n                    self.shape_output_comeinput_per = False\n                    break\n            if self.shape_output_comeinput_per:\n                self.shape_multiplier = (m,n)\n                break\n        if not self.shape_output_comeinput and not self.shape_output_costante and not self.shape_output_comeoggetto and not self.shape_output_comeinput_per:\n            self.shape_output_IGNOTA = True\n            \n            self.shape_output_IGNOTA = False #provo comunque a cazzo tosto ??????\n            \n        #uguale a dimensione input per numero di oggetti \/ numero di caselle non nere \/ nere \/ numero di colori\n                \n    def stampa_shape_type(self):\n        if self.shape_input_costante:\n            print('Dimensione Input sempre costante ',self.t.trainIMM[0]['input'].shape)\n        if self.shape_output_comeinput:\n            print('Dimensione Output sempre uguale all''input')\n        if self.shape_output_costante:\n            print('Dimensione Output sempre costante ',self.t.trainIMM[0]['output'].shape)\n        if self.shape_output_comeoggetto:\n            print('Dimensione Output sempre uguale a quella di un oggetto')\n        if self.shape_output_comeinput_per:\n            print('Dimensione Output sempre uguale all''input per',self.shape_multiplier)\n        if self.shape_output_IGNOTA:\n            print('Non so che cazzo sia:')\n            for i in range(self.t.train_size):\n                print('  -',self.t.trainIMM[i]['input'].shape, self.t.trainIMM[i]['output'].shape)\n                \n    def trova_costanti_posizione_IF(self):  #per if\n        costanti_posizioni = []\n        if self.shape_output_costante and not self.shape_output_comeinput:\n            #possibili_fpos_const += [shape_output] + [ (shape_output[0],0), (0,shape_output[1]) ]\n            if self.shape_input_costante:\n                shape_input = self.t.trainIMM[0]['input'].shape\n                shape_output = self.t.trainIMM[0]['output'].shape\n                if shape_output[0]-shape_input[0] != 0 or shape_output[1]-shape_input[1] != 0:\n                    costanti_posizioni += [(shape_output[0]-shape_input[0] , shape_output[1]-shape_input[1])]\n        return costanti_posizioni\n    \n    def trova_costanti_posizione(self):\n        costanti_posizioni = []  #[(1,0),(0,1)]\n        if self.shape_output_comeinput_per and self.shape_multiplier!=(1,1):\n            if self.shape_input_costante:\n                shape_input = self.t.trainIMM[0]['input'].shape\n                shape_output = self.t.trainIMM[0]['output'].shape\n                for mult_y,mult_x in product(range(self.shape_multiplier[0]),range(self.shape_multiplier[1])):\n                    if mult_y!=0 or mult_x!=0:\n                        costanti_posizioni += [(mult_y*shape_input[0] , mult_x*shape_input[1])]\n        elif self.shape_output_costante and not self.shape_output_comeinput:\n            #possibili_fpos_const += [shape_output] + [ (shape_output[0],0), (0,shape_output[1]) ] #questi li copre la modalit\u00e0 \"with_modulo\"\n            if self.shape_input_costante:\n                shape_input = self.t.trainIMM[0]['input'].shape\n                shape_output = self.t.trainIMM[0]['output'].shape\n                #print('sssshapess',shape_input,shape_output)\n                if shape_output[0]-shape_input[0] != 0 and shape_output[1]-shape_input[1] != 0:\n                    costanti_posizioni += [(shape_output[0]-shape_input[0] , shape_output[1]-shape_input[1])]\n                if shape_output[0]-shape_input[0] != 0:\n                    costanti_posizioni += [(shape_output[0]-shape_input[0], 0)] \n                if shape_output[1]-shape_input[1] != 0:\n                    costanti_posizioni += [(0, shape_output[1]-shape_input[1])]\n        return costanti_posizioni\n                \n    def trova_shape_output_for(self, immagine_in):\n        if self.shape_output_comeinput:\n            return immagine_in.shape\n        if self.shape_output_costante:\n            return self.t.trainIMM[0]['output'].shape\n        if self.shape_output_comeinput_per:\n            return (immagine_in.shape[0]*self.shape_multiplier[0], immagine_in.shape[1]*self.shape_multiplier[1])\n        # gestisco insieme comeoggetto e ignota\n        maxY = 1\n        maxX = 1\n        shapes = set()\n        \n        for fun in self.funzioni:\n            for forma,_,posizione in fun.applica_a_immagine(immagine_in):\n                shape_f = (len(forma),len(forma[0]))\n                shape_rot_f = geometry[fun.geom](0,0,shape_f,to_shape=True) #shape forma eventualmente ruotata\n                maxY = max(maxY,round(shape_rot_f[0]\/2+posizione[0]))\n                maxX = max(maxX,round(shape_rot_f[1]\/2+posizione[1]))\n                #maxY = max(maxY,shape_rot_f[0])\n                #maxX = max(maxX,shape_rot_f[1])\n                shapes.add(shape_rot_f)\n        \n        if len(shapes)==1:\n            return list(shapes)[0]\n        return (maxY,maxX) #altrimenti ritorna il lo shape minimo che pu\u00f2 contenere tutte le forme generate , se non genero niente ritorna (1,1)\n    \n    \n    ###############\n    # magico ELSE #\n    def genera_magico_ELSE_INPUT(self): #tabelle grosse come output, casella \u00e8 True solo se esiste anche in input e \u00e8 dello stesso colore\n        self.magico_ELSE_INPUT = [[[False for _ in range(self.t.trainIMM[i]['output'].shape[1])] for _ in range(self.t.trainIMM[i]['output'].shape[0])] for i in range(self.t.train_size)]\n        for i in range(self.t.train_size):\n            immagine_in = self.t.trainIMM[i]['input']\n            immagine_out = self.t.trainIMM[i]['output']\n            for x,y in product( range(min(immagine_in.shape[1],immagine_out.shape[1])), range(min(immagine_in.shape[0],immagine_out.shape[0])) ):\n                if immagine_in.tab[y][x]==immagine_out.tab[y][x]:\n                    self.magico_ELSE_INPUT[i][y][x]=True\n    \n    def check_magico_ELSE_z(self):\n        self.Best_Dict = -1\n        self.Best_Q1 = -1\n        self.Best_Q2 = -1\n        self.Best_alias = None\n        max_Q_to_try = 4\n        pairs = []\n        for Q1 in range(1,max_Q_to_try+1):\n            for Q2 in range(1,max_Q_to_try+1):\n                pairs.append((Q1,Q2))\n        pairs.sort(key = lambda x:x[0]+x[1])\n\n        for Q1, Q2 in pairs:\n            if self.Best_Dict != -1:\n                break\n            possible = True\n            Dict = {}\n            for immagine_in, immagine_out in [(self.t.trainIMM[i]['input'],self.t.trainIMM[i]['output']) for i in range(self.t.train_size)]:\n                shape_in = immagine_in.shape\n                shape_out = immagine_out.shape\n                for y_out,x_out in product(range(shape_out[0]), range(shape_out[1])):\n                    if not immagine_out.map_tab_to_obj[y_out][x_out].is_risolto:\n                        p1 = y_out%Q1\n                        p2 = x_out%Q2\n                        y_in = y_out % shape_in[0]\n                        x_in = x_out % shape_in[1]\n                        color1 = immagine_in.map_tab_to_obj[y_in][x_in].colore\n                        color2 = immagine_out.map_tab_to_obj[y_out][x_out].colore\n                        if color1 != color2:\n                            rule = (p1, p2, color1)\n                            if rule not in Dict:\n                                Dict[rule] = color2\n                            elif Dict[rule] != color2:\n                                possible = False\n            for immagine_in, immagine_out in [(self.t.trainIMM[i]['input'],self.t.trainIMM[i]['output']) for i in range(self.t.train_size)]:\n                shape_in = immagine_in.shape\n                shape_out = immagine_out.shape\n                for y_out,x_out in product(range(shape_out[0]), range(shape_out[1])):\n                    if not immagine_out.map_tab_to_obj[y_out][x_out].is_risolto:\n                        p1 = y_out%Q1\n                        p2 = x_out%Q2\n                        y_in = y_out % shape_in[0]\n                        x_in = x_out % shape_in[1]\n                        color1 = immagine_in.map_tab_to_obj[y_in][x_in].colore\n\n                        rule = (p1,p2,color1)\n\n                        if rule in Dict:\n                            color2 = 0 + Dict[rule]\n                        else:\n                            color2 = 0 + color1\n                        if color2 != immagine_out.map_tab_to_obj[y_out][x_out].colore:\n                            possible = False \n            if possible:\n                self.Best_Dict = Dict\n                self.Best_Q1 = Q1\n                self.Best_Q2 = Q2\n        if self.Best_Dict == -1:\n            return False #meaning that we didn't find a rule that works\n        else:\n            unique_values = set(self.Best_Dict.values())\n            if len(unique_values)==1:\n                self.Best_alias = list(unique_values)[0]\n            print('(check) Metto magico ELSE z -',self.Best_Q1,self.Best_Q2,self.Best_Dict, self.Best_alias)\n            return True\n    \n    def use_magico_ELSE_z(self,immagine_in,tab):\n        if self.Best_Dict == -1:\n            return\n        shape_in = immagine_in.shape\n        shape_out = (len(tab),len(tab[0]))\n        for y_out,x_out in product(range(shape_out[0]), range(shape_out[1])):\n            p1 = y_out % self.Best_Q1\n            p2 = x_out % self.Best_Q2\n            y_in = y_out % shape_in[0]\n            x_in = x_out % shape_in[1]\n            color1 = immagine_in.map_tab_to_obj[y_in][x_in].colore\n            rule = (p1, p2, color1)\n            if rule in self.Best_Dict:\n                tab[y_out][x_out] = 0 + self.Best_Dict[rule]\n            elif self.Best_alias is not None:\n                tab[y_out][x_out] = 0 + self.Best_alias\n            else:\n                tab[y_out][x_out] = 0 + color1\n\n    \n    #########################################\n    # trova oggetti AB (per forma e colore) #\n    # aggiusta dizionari self.input_formacolore_e_AB e self.occ_input_formacolore\n    def trova_oggetti_AB(self, priorita=1):\n        self.genera_magico_ELSE_INPUT()\n        \n        oggetti_che_proprio_boh = set()\n        forme_merdose_non_al_bordo = set()\n        n_coppie_AB_out = 0\n        #for immagine_in,immagine_out in zip(self.immagini_train_input, self.immagini_train_output):\n        for n_immagine in range(self.t.train_size):\n            immagine_in = self.immagini_train_input[n_immagine]\n            immagine_out = self.immagini_train_output[n_immagine]\n            self.occ_input_formacolore[immagine_out] = [0,0,0]\n            for oggetto_out in immagine_out.list_obj:\n                if self.t.solo_quadratini and oggetto_out.posizione[0]<immagine_in.shape[0] and oggetto_out.posizione[1]<immagine_in.shape[1] and oggetto_out.colore == immagine_in.tab[int(oggetto_out.posizione[0])][int(oggetto_out.posizione[1])]:\n                    oggetto_out.is_risolto = True\n                if oggetto_out.is_risolto:\n                    self.input_formacolore_e_AB[oggetto_out] = (0,[],False,set(),None)\n                    self.occ_input_formacolore[immagine_out][0]+=1\n                    continue\n                if oggetto_out in self.input_formacolore_e_AB.keys():\n                    continue\n                ogg_Xforma = immagine_in.get_obj_with(forma=oggetto_out.forma)\n                ogg_Xcolore = immagine_in.get_obj_with(colore=oggetto_out.colore)\n                if self.shape_output_costante and self.t.trainIMM[0]['output'].shape == (1,1):\n                    ogg_Xposizione = set()\n                else:\n                    ogg_Xposizione = immagine_in.get_obj_with(posizione=oggetto_out.posizione)\n                geo_Xforma = set()\n\n                #guarda se ci sono forme mai viste :(\n                if len(ogg_Xforma)==0:\n                    occorrenze_forma = 0 #contate senza ripetizioni nella singola immagine\n                    for immagine in self.immagini_train_output: #guardo output\n                        oggetti_con_quella_forma = immagine.get_obj_with(forma=oggetto_out.forma)\n                        if len(oggetti_con_quella_forma)>0:\n                            occorrenze_forma += 1\n                    if occorrenze_forma >= 2 and oggetto_out.colore!=0: #se la forma NON \u00e8 NERA e compare in almeno 2 immagini input allora la aggiungo come \"FORMA SPECIFICA\"\n                        colori_di_questa_forma_specifica = list(self.t.find_colors_of(oggetto_out.forma,'output'))\n                        colore = colori_di_questa_forma_specifica[0] if len(colori_di_questa_forma_specifica)==1 else None\n                        posizioni_di_questa_forma_specifica = list(self.t.find_positions_of(oggetto_out.forma,'output'))\n                        posizione = posizioni_di_questa_forma_specifica[0] if len(posizioni_di_questa_forma_specifica)==1 else None\n                        #print('---< forma sconosciuta >--- ma almeno ricorrente e con colore',colore,'e posizione',posizione)\n                        self.t.specific['ASS']['forms'].add(oggetto_out.forma)  #aggiungo a forme specifiche (cos\u00ec poi ci genero anche l'if singolo)\n                        for immagine in self.immagini_train_input + self.immagini_test_input: #guardo input\n                            oggetti_con_quella_forma = immagine.get_obj_with(forma=oggetto_out.forma)\n                            if len(oggetti_con_quella_forma)==0:\n                                nuovo_oggetto = Oggetto(forma=oggetto_out.forma,colore=colore,posizione=posizione,is_specific_ASS_form=True)\n                                immagine.aggiungi(nuovo_oggetto)\n                                if immagine is immagine_in:\n                                    ogg_Xforma.add(nuovo_oggetto)\n                                    if colore is not None:\n                                        ogg_Xcolore.add(nuovo_oggetto) #colore deve essere uguale a oggetto_out.colore\n                                    if posizione is not None:\n                                        ogg_Xposizione.add(nuovo_oggetto) #posizione deve essere uguale a oggetto_out.posizione\n                                #print('aggiunto',oggetto_out.forma,'in input     con colore',colore,'e posizione',posizione)\n                            else:\n                                for oggetto in oggetti_con_quella_forma:\n                                    oggetto.is_specific_ASS_form=True\n                        geo_Xforma.add(0)\n                    else:\n                        for oggetto_in in immagine_in.list_obj:\n                            if oggetto_in.area==oggetto_out.area:\n                                for g in range(1,8):\n                                    if are_equal(oggetto_in.forma, oggetto_out.forma, geometry[g]):\n                                        #print(geometry_name[g],g)\n                                        #mostra_tabs([oggetto_in.forma, oggetto_out.forma])\n                                        ogg_Xforma.add(oggetto_in)\n                                        geo_Xforma.add(g)\n                else:\n                    geo_Xforma.add(0)\n                            \n                #guarda se ci sono colori mai visti\n                if len(ogg_Xcolore)==0:\n                    #print('---< colore sconosciuta >--- ma almeno ricorrente',oggetto_out.colore)\n                    self.t.specific['ASS']['colors'].add(oggetto_out.colore)  #aggiungo a colori specifici\n                    for immagine in self.immagini_train_input + self.immagini_test_input: #guardo input\n                        oggetti_con_quel_colore = immagine.get_obj_with(colore=oggetto_out.colore)\n                        if len(oggetti_con_quel_colore)==0:\n                            nuovo_oggetto = Oggetto(colore=oggetto_out.colore,is_specific_ASS_color=True)\n                            immagine.aggiungi(nuovo_oggetto)\n                            if immagine is immagine_in:\n                                ogg_Xcolore.add(nuovo_oggetto) #quindi ogg_Xcolore non sar\u00e0 mai vuota dopo\n                            #print('aggiunto',oggetto_out.colore,'in input')\n                        else:\n                            for oggetto in oggetti_con_quel_colore:\n                                oggetto.is_specific_ASS_color=True\n\n                #swegata posizione forse non ha sensoooooooooooooooooooooooooooooooooo\n                ho_la_posizione = False\n                \n                if True or not self.t.solo_quadratini:\n                    if len(ogg_Xposizione.intersection(ogg_Xforma))>0:\n                        ogg_Xforma = ogg_Xposizione.intersection(ogg_Xforma)\n                        ho_la_posizione = True\n                    if len(ogg_Xposizione.intersection(ogg_Xcolore))>0:\n                        ogg_Xcolore = ogg_Xposizione.intersection(ogg_Xcolore)\n                        ho_la_posizione = True\n\n                if len(ogg_Xforma)>0 and len(ogg_Xcolore)>0:\n                    #se conosco sia forma che colore di quell'oggetto_out\n                    ogg_Xformacolore = list(ogg_Xforma.intersection(ogg_Xcolore))\n                    if len(ogg_Xformacolore)>0:\n                        input_formacolore = zip(ogg_Xformacolore, [None for _ in range(len(ogg_Xformacolore))])\n                        input_formacolore = list(input_formacolore)\n                        n_coppie_AB_out+=len(input_formacolore)\n                        self.input_formacolore_e_AB[oggetto_out] = (1,input_formacolore,ho_la_posizione,geo_Xforma,priorita)\n                        self.occ_input_formacolore[immagine_out][1]+=1\n                    else:\n                        ogg_Xcolore = list(ogg_Xcolore)\n                        if self.t.solo_quadratini:\n                            def allineato(ogg):\n                                if ogg.posizione is None:\n                                    return 1\n                                if ogg.posizione[0]==oggetto_out.posizione[0] or ogg.posizione[1]==oggetto_out.posizione[1]:\n                                    return 0\n                                return 1\n                            ogg_Xcolore.sort(key=allineato)\n                        input_formacolore = product(list(ogg_Xforma),ogg_Xcolore)\n                        input_formacolore = list(input_formacolore)\n                        n_coppie_AB_out+=len(input_formacolore)\n                        self.input_formacolore_e_AB[oggetto_out] = (2,input_formacolore,ho_la_posizione,geo_Xforma,priorita)\n                        self.occ_input_formacolore[immagine_out][2]+=1\n                else:\n                    #se non so come ricostruire quell'oggetto_out (aka forma merdosa)\n                    self.input_formacolore_e_AB[oggetto_out] = (0,[],False,geo_Xforma,priorita)\n                    self.occ_input_formacolore[immagine_out][0]+=1\n                    if not oggetto_out.is_come_input:\n                        oggetti_che_proprio_boh.add((oggetto_out,n_immagine))\n                    if not oggetto_out.tocca_un_bordo:\n                        forme_merdose_non_al_bordo.add(oggetto_out)\n        #print('COPPIE AB-OUT in totale =',n_coppie_AB_out)\n        self.n_coppie_AB_out_iniziali = n_coppie_AB_out\n        \n        # oggetti in output composti solo dalle cose che non sono in input?\n        # cio\u00e8: per gli oggetti not .is_come_input e con forma ignota creo oggetto\/i in output che \u00e8 il 'ritaglio ai punti' comuni\/non comuni all'input\n\n        \n        geo_usate = set()\n        geo_comuni = set(range(1,8))\n        for _,_,_,geo_Xforma,_ in self.input_formacolore_e_AB.values():\n            if len(geo_Xforma)>0 and not 0 in geo_Xforma:\n                geo_usate = geo_usate.union(geo_Xforma)\n                geo_comuni = geo_comuni.intersection(geo_Xforma)\n        #print('Geometrie - comuni=',geo_comuni,' usate=',geo_usate)\n        if len(geo_comuni)>0:\n            #print('   uso solo le comuni')\n            for ogg_out in self.input_formacolore_e_AB.keys():\n                if len(self.input_formacolore_e_AB[ogg_out][3])>0 and not 0 in self.input_formacolore_e_AB[ogg_out][3]:\n                    self.input_formacolore_e_AB[ogg_out] = ( self.input_formacolore_e_AB[ogg_out][0], self.input_formacolore_e_AB[ogg_out][1], self.input_formacolore_e_AB[ogg_out][2],\n                                                            self.input_formacolore_e_AB[ogg_out][3].intersection(geo_comuni),  self.input_formacolore_e_AB[ogg_out][4] )\n                    if len(self.input_formacolore_e_AB[ogg_out][3])==0:\n                        print('mannaggia a jesussss')\n        #print('after commm')\n        for _,_,_,geo_Xforma,_ in self.input_formacolore_e_AB.values():\n            if len(geo_Xforma)>0 and not 0 in geo_Xforma:\n                print(geo_Xforma)               \n        \n        #if len(oggetti_che_proprio_boh)==0:\n        #    print('Bella le forme (non come input) ce le ho tutteee')\n        #else:\n        #    print('Ci sono delle forme in output che proprio non saprei risolvere, mi disp')\n    \n        return oggetti_che_proprio_boh\n    \n    \n    \n    \n    \n    \n    \n    #######################\n    # selezione predicati #\n    def trova_predicati_validi(self,oggetto):\n        predicati_validi = []\n        for predicato in self.IFsingoli_list:\n            #controlla che il predicato sia verificato per oggetto\n            if predicato.is_True(oggetto):\n                predicati_validi.append(predicato)\n        return predicati_validi\n    \n    #######################\n    # selezione relazioni #\n    def trova_relazioni_valide(self,ogg1,ogg2):\n        relazioni_valide = []\n        for relazione in self.IFdoppi_list:\n            if relazione.is_True(ogg1,ogg2):\n                relazioni_valide.append(relazione)\n                #relazione.stampa()\n        return relazioni_valide\n    \n    ########################\n    # selezione fposizioni #\n    def trova_fposizioni_valide(self, x_or_y, oggetti_input, posizione_x_or_y, coeff_max, max_non_zero_elem, modulo=None, sgn_pos=False, geom=0, shape_geom=(1,1)):\n        if coeff_max == 0: #caso speciale <--- prendi solo identita\n            #print(oggetti_input[0].posizione)\n            if len(oggetti_input)!=1 or oggetti_input[0].posizione is None:\n                return []\n            rotated_pos = geometry[geom](oggetti_input[0].posizione[0],oggetti_input[0].posizione[1],shape_geom)\n            rotated_pos_x_or_y = rotated_pos[0] if x_or_y=='y' else rotated_pos[1]\n            if rotated_pos_x_or_y!=posizione_x_or_y:\n                return []\n            else:\n                return [[(1,0)]]\n        #funzione ausiliaria per trovare tutti i possibili coefficienti\n        def all_sequences_with(length=6, massimo=1, somma=1):\n            if length==1:\n                if somma is None:\n                    return [[valore] for valore in range(-massimo,massimo+1)]\n                if somma<=massimo and somma>=-massimo:\n                    return [[somma]]\n                else:\n                    return []\n            all_sequences = []\n            for valore in range(-massimo,massimo+1):\n                new_somma = None if somma is None else somma-valore\n                sequences = all_sequences_with(length=length-1, massimo=massimo, somma=new_somma)\n                for sequence in sequences:\n                    sequence.append(valore)\n                all_sequences += sequences\n            return all_sequences\n        #fine definizione funzione ausiliaria\n        if modulo is None:\n            if self.shape_output_comeinput:\n                fposizioni_raw_pos = all_sequences_with(length=len(oggetti_input), massimo=coeff_max, somma=1)\n                fposizioni_raw_dim = all_sequences_with(length=len(oggetti_input), massimo=coeff_max, somma=None)\n            elif self.shape_output_costante: #se dim_output=costante togli il vincolo di somma 1 delle posizioni\n                fposizioni_raw_pos = all_sequences_with(length=len(oggetti_input), massimo=coeff_max, somma=None)\n                fposizioni_raw_dim = all_sequences_with(length=len(oggetti_input), massimo=coeff_max, somma=None)\n            elif self.shape_output_comeoggetto: #solo posizione relativa (?)\n                fposizioni_raw_pos = all_sequences_with(length=len(oggetti_input), massimo=coeff_max, somma=0)\n                fposizioni_raw_dim = all_sequences_with(length=len(oggetti_input), massimo=coeff_max, somma=1)\n            else:\n                fposizioni_raw_pos = all_sequences_with(length=len(oggetti_input), massimo=coeff_max, somma=None)\n                fposizioni_raw_dim = all_sequences_with(length=len(oggetti_input), massimo=coeff_max, somma=None)\n        else:\n            fposizioni_raw_pos = all_sequences_with(length=len(oggetti_input), massimo=coeff_max, somma=None)\n            fposizioni_raw_dim = all_sequences_with(length=len(oggetti_input), massimo=coeff_max, somma=None)\n            \n        def is_good1(sequenza,max_non_zero_elem=max_non_zero_elem):\n            #verifica che non ci siano troppi elementi diversi da 0\n            non_zero_elem = 0\n            for pair in sequenza:\n                for elem in pair:\n                    if elem!=0:\n                        non_zero_elem += 1\n            if non_zero_elem <= max_non_zero_elem:\n                return True\n            else:\n                return False\n        def is_good3(sequenza): #NON QUI\n            #verifica che non ci siano oggetti che hanno tutti e 2 i coefficienti nulli\n            for pair in sequenza:\n                if pair==(0,0):\n                    return False\n            return True\n        fposizioni = []\n        for seq_pos, seq_dim in product(fposizioni_raw_pos, fposizioni_raw_dim):\n            if len(seq_pos)!=len(seq_dim):\n                print('aaaaaaaa mannaggia a dio')\n            else:\n                joint_seq = [None for _ in range(len(oggetti_input))]\n                for i in range(len(oggetti_input)):\n                    joint_seq[i] = (seq_pos[i],seq_dim[i])\n                if is_good1(joint_seq):\n                    if posizione_x_or_y is not None:\n                        if valuta_fpos(x_or_y, oggetti_input, joint_seq, 0, modulo=modulo, sgn_pos=sgn_pos, geom=geom, shape_geom=shape_geom)==posizione_x_or_y:\n                            fposizioni.append(joint_seq)\n                        #else:\n                        #    print('scarto', joint_seq, '--->',valuta_fpos(x_or_y, oggetti_input, joint_seq, 0, modulo=modulo, sgn_pos=sgn_pos, geom=geom, shape_geom=shape_geom),'vs',posizione_x_or_y)\n                    else:\n                        fposizioni.append(joint_seq)\n        if len(oggetti_input) == 2: #punto medio\n            sequenza_punto_medio = [(0.5, 0), (0.5, 0)]\n            if posizione_x_or_y is not None:\n                if valuta_fpos(x_or_y, oggetti_input, sequenza_punto_medio, 0, sgn_pos=sgn_pos, geom=geom, shape_geom=shape_geom)==posizione_x_or_y:\n                    fposizioni.append(sequenza_punto_medio)\n            else:\n                fposizioni.append(sequenza_punto_medio)\n        return fposizioni\n    ","c5401c0b":"class Denoiser:\n    def __init__(self,tab, iterazioni=2):\n        self.tab = tab\n        new_tab, _, g, noise_color_eliminato= self.denoisss(tab)\n        #print(noise_color_eliminato,iterazioni)\n        if not noise_color_eliminato and iterazioni>=2:\n            #print('insisto a cazzo tosto evitando',geometry_name[g])\n            new_tab, _, g2, noise_color_eliminato = self.denoisss(new_tab, evita_g=[g])\n        if not noise_color_eliminato and iterazioni>=3:\n            #print('insisto a cazzo tosto evitando',geometry_name[g],'e',geometry_name[g2])\n            new_tab, _, _, _ = self.denoisss(new_tab, evita_g=[g,g2])\n        '''\n        new_tab=tab\n        candidati, esiste_un_colore_eliminabile = self.find_candidati_for_tab(tab)\n                \n        candidato = candidati[0]\n        noise_color = candidato[0]\n        xyg = candidato[1][0]\n        p = xyg[0][0]\n        g = xyg[0][1]\n        saltate = xyg[1]\n        print(noise_color,'--->',saltate,p,geometry_name[g])\n        new_tab = self.try_to_denoise(tab,p,g, noise_color)\n        mostra_tab(new_tab)\n            \n        if not esiste_un_colore_eliminabile:\n            print('insisto a cazzo tosto evitando',geometry_name[g])\n            candidati, esiste_un_colore_eliminabile = self.find_candidati_for_tab(new_tab,evita_g=g)\n            candidato = candidati[0]\n            noise_color = candidato[0]\n            xyg = candidato[1][0]\n            p = xyg[0][0]\n            g = xyg[0][1]\n            saltate = xyg[1]\n            print(noise_color,'--->',saltate,p,geometry_name[g])\n            new_tab = self.try_to_denoise(new_tab,p,g, noise_color)\n            mostra_tab(new_tab)\n            \n            ######################################## serve triplo per eval 336???\n        '''\n        self.denoised_tab = new_tab\n    \n    def denoisss(self,tab,evita_g=None):\n        new_tab=tab\n        candidati, esiste_un_colore_eliminabile = self.find_candidati_for_tab(tab, evita_g=evita_g)\n                \n        candidato = candidati[0]\n        noise_color = candidato[0]\n        xyg = candidato[1][0]\n        p = xyg[0][0]\n        g = xyg[0][1]\n        saltate = xyg[1]\n        #print(noise_color,'--->',saltate,p,geometry_name[g])\n        new_tab, noise_color_eliminato = self.try_to_denoise(tab,p,g, noise_color)\n        #mostra_tab(new_tab)\n        return new_tab, p, g, noise_color_eliminato\n        \n    def get_colors_in_tab(self,tab):\n        colori= set()\n        for row in tab:\n            for c in row:\n                colori.add(c)\n        return colori\n        \n    def find_perinv(self,tab,noise_color,evita_g=None):\n        shape = (len(tab),len(tab[0]))\n        pairs = []\n        for Py in range(min(shape[0],10)):\n            for Px in range(max(-shape[1]+1,-15),min(shape[1],15)):\n                pairs.append((Py,Px))\n        pairs.sort(key = lambda x:abs(x[0])+abs(x[1]))\n\n        candidati = []\n        esiste_una_che_elimina_nc = False\n        for Py,Px in pairs:\n            for g in range(8):\n                if evita_g is not None and g in evita_g:\n                    continue\n                if g is 0 and abs(Px)+abs(Py)<=1:\n                    continue\n                if g is not 0 and abs(Px)+abs(Py)>10:\n                    continue\n                geom = geometry[g]\n                giuste,totali, saltate = 0,0,0\n                noise_color_eliminabile = True\n                for y,x in product(range(shape[0]),range(shape[1])):\n                    new_y,new_x = geom(y,x,shape)\n                    if new_y+Py in range(shape[0]) and new_x+Px in range(shape[1]):\n                        if (tab[y][x]==noise_color and tab[new_y+Py][new_x+Px]!=noise_color) or (tab[y][x]!=noise_color and tab[new_y+Py][new_x+Px]==noise_color):\n                            saltate += 1\n                            continue\n                        totali += 1\n                        if tab[y][x]==tab[new_y+Py][new_x+Px]:\n                            giuste += 1\n                        if tab[y][x]==noise_color and tab[new_y+Py][new_x+Px]==noise_color:\n                            noise_color_eliminabile = False\n                    else:\n                        if tab[y][x]==noise_color:\n                            noise_color_eliminabile = False\n                if totali>0 and giuste==totali and saltate>0:\n                    if noise_color_eliminabile:\n                        esiste_una_che_elimina_nc = True\n                    #if noise_color_eliminabile:\n                    #    print(Py,Px,g)\n                    candidati.append((((Py,Px),g),saltate,noise_color_eliminabile,giuste))\n       \n        if len(candidati)>0:\n            candidati.sort(key = lambda x: x[3] if not x[2] else x[3]+1000000000, reverse=True) #prima i perinv con pi\u00f9 copertura(giustetotali) e sempre prima quelli che riescono a eliminare il noise color\n            best_copertura = candidati[0][3]\n            if not esiste_una_che_elimina_nc:\n                candidati = [c[:2] for c in candidati if c[3]==best_copertura]\n            else:\n                candidati = [c[:2] for c in candidati if c[3]==best_copertura and c[2]]\n            return best_copertura, esiste_una_che_elimina_nc, candidati\n        else:\n            return [0, False, [(((0,0),0), 1000000)]]\n    \n    def find_candidati_for_tab(self,tab,evita_g=None):\n        candidati = []\n        esiste_un_colore_eliminabile=False\n        for noise_color in self.get_colors_in_tab(tab):\n            copertura, elimina_nc, perinv = self.find_perinv(tab,noise_color,evita_g=evita_g)\n            #if elimina_nc:\n            #    print(copertura,perinv)\n            esiste_un_colore_eliminabile = esiste_un_colore_eliminabile or elimina_nc\n            #for xyg,saltate in perinv:\n            #    print(noise_color,'-->',copertura,elimina_nc,saltate,xyg,geometry_name[xyg[1]])\n            candidati.append((noise_color,perinv,copertura,elimina_nc))\n        if esiste_un_colore_eliminabile:\n            candidati = [c[:3] for c in candidati if c[3]]\n            #print('colore eliminabile')\n        candidati.sort(key=lambda c:c[2], reverse=True) #prima il\/i colori che hanno maggiore copertura\n        best_copertura = candidati[0][2]\n        #print('massima copertura',best_copertura)\n        #candidati = [c[:2] for c in candidati if c[2]==best_copertura]\n        candidati = [c[:2] for c in candidati]\n        return candidati,esiste_un_colore_eliminabile\n\n    def try_to_denoise(self,tab,p,g, noise_color):\n        shape = (len(tab),len(tab[0]))\n        new_tab = [[tab[y][x] for x in range(shape[1])] for y in range(shape[0])]\n        noise_color_eliminato = True\n        for y,x in product(range(shape[0]),range(shape[1])):\n            new_y,new_x = geometry[g](y,x,shape)\n            new_y += p[0]\n            new_x += p[1]\n            if -1<new_y<shape[0] and -1<new_x<shape[1]:\n                if tab[new_y][new_x]==noise_color and tab[y][x]!=noise_color:\n                    new_tab[new_y][new_x] = tab[y][x]\n                elif tab[y][x]==noise_color and tab[new_y][new_x]!=noise_color:\n                    new_tab[y][x] = tab[new_y][new_x]\n                else:\n                    new_tab[y][x] = tab[y][x]\n                    new_tab[new_y][new_x] = tab[new_y][new_x]\n                    if new_tab[y][x]==noise_color or new_tab[new_y][new_x]==noise_color:\n                        noise_color_eliminato=False\n            if new_tab[y][x]==noise_color:\n                noise_color_eliminato=False\n        return new_tab, noise_color_eliminato\n    ","67ec941c":"mode = 'train'\nif mode=='eval':\n    task_path = evaluation_path\n    ALL_tasks = evaluation_tasks\nelif mode=='train':\n    task_path = training_path\n    ALL_tasks = training_tasks\n    \ntask_boni = [0,1,15,78,81,86,127,224,227,250,252,278,281,289,371] #43?\n\nfor task_da_fare in task_boni:\n    print('\\n\\n\\n\\n\\n\\n PROVO TASK ',task_da_fare,'\\n')\n    task_file = str(task_path \/ ALL_tasks[task_da_fare])\n    with open(task_file, 'r') as f:\n        task = json.load(f)\n    plot_task(task)\n    t = Task(task,comp_connesse_diagonali=True)\n    #t_ref = Task(task,comp_connesse_diagonali=True,reflected=True)\n    \n    s = Solver(t, 200, with_modulo=False,split_come_input=True,add_denoise=None)\n    s.solve_task(TEMPO_boost=1, solo_funzioni_generali=True, minimo_numero_immagini=2,STAMPA=False)\n    \n    \n    for fun in s.funzioni[:5]:\n        fun.stampa()\n    print('TRAIN SCORE: ',s.train_score())\n    numero_test = len(task['test'])\n    for n_test in range(numero_test):\n        guessed_tab = s.applica(n_test)\n        mostra_tabs([task['test'][n_test]['output'], [[9]]] + [guessed_tab])","bdb4d7e1":"mode = 'eval'\nif mode=='eval':\n    task_path = evaluation_path\n    ALL_tasks = evaluation_tasks\nelif mode=='train':\n    task_path = training_path\n    ALL_tasks = training_tasks\n    \ntask_boni = [197,48,42,71,83,104,156,255,284,288,338,343]\n\nfor task_da_fare in task_boni:\n    print('\\n\\n\\n\\n\\n\\n PROVO TASK ',task_da_fare,'\\n')\n    task_file = str(task_path \/ ALL_tasks[task_da_fare])\n    with open(task_file, 'r') as f:\n        task = json.load(f)\n    plot_task(task)\n    numero_test = len(task['test'])\n    guessed_tabs = [[] for _ in range(numero_test)]\n    \n    t1 = Task(task,comp_connesse_diagonali=True)\n    t2 = Task(task,comp_connesse_diagonali=False)\n    \n    s1 = Solver(t1, 200, with_modulo=False,split_come_input=True,add_denoise=None)\n    s2 = Solver(t1, 200, with_modulo=True,split_come_input=True,add_denoise=None)\n    s3 = Solver(t1, 200, with_modulo=False,split_come_input=True,add_denoise=2)\n    s4 = Solver(t2, 200, with_modulo=False,split_come_input=True,add_denoise=None)\n    \n    for s in [s1,s2,s3,s4]:\n        s.solve_task(TEMPO_boost=1, solo_funzioni_generali=True, minimo_numero_immagini=2,STAMPA=False)\n        for fun in s.funzioni[:5]:\n            fun.stampa()\n        print('TRAIN SCORE: ',s.train_score())\n        for n_test in range(numero_test):\n            guessed_tab = s.applica(n_test)\n            guessed_tabs[n_test].append(guessed_tab)\n            \n    for n_test in range(numero_test):\n        mostra_tabs([task['test'][n_test]['output'], [[9]]] + guessed_tabs[n_test])","df8b4411":"# Esempi","0d0c0e0b":"\n___\n\n\n<br><br><br>","0d11cf17":"<br><br><br><br>\nUna regola _buona_ deve essere:\n* **corretta**, cio\u00e8 non produrre mai oggetti sbagliati\n* **generale**, cio\u00e8 produrre oggetti giusti in almeno due train point (coppie I\/O)\n\n> <h4>Lemma(?)<\/h4>\n> Aumentare la complessit\u00e0 dell'*attivazione* -> Fa diminuire gli oggetti prodotti  \n>\n> Aumentare la complessit\u00e0 dell'*azione* -> Fa aumentare gli oggetti prodotti\n<br><br>","82caefc5":"# Regole","d04c6ff7":"\n___\n\n\n<br><br><br>","334dcf6e":"<h2>Classe Predicato<\/h2>\nOgni istanza possiede il metodo _.is\\_true()_ che prende in input **un** oggetto e restituisce vero\/falso\n\n<h2>Classe Relazione<\/h2>\nOgni istanza possiede il metodo _.is\\_true()_ che prende in input **due** oggetti e restituisce vero\/falso\n\n<h2>Classe Funzione<\/h2>\nUna **regola** sar\u00e0 un'istanza della classe Funzione.  \nUna **regola** possiede il metodo _.apply()_ che:\n* in input -> prende una lista di oggetti\n* in output -> restituisce un oggetto (aka. forma,colore,posizione) \n\nL'applicazione di una regola \u00e8 divisa in due fasi:\n1. <h4>Attivazione<\/h4>\n> <h6>decide se gli oggetti in input sono \"ok\"<\/h6>\n> * lista di liste di predicati - una lista per ogni oggetto in input\n> * lista di liste di relazioni - una lista oer ogni coppia di oggetti in input  \n>\n> l'attivazione avviene per *congiunzione*\n2. <h4>Azione<\/h4>\n> <h6>decide come produrre l'oggetto in output<\/h6>\n> * da quale input prendere la forma\n> * da quale input prendere il colore\n> * da quali input prendere la posizione (e come!)\n\nnumero di input, numero di predicati e relazioni, complessit\u00e0 dell'azione -> **complessit\u00e0** di una regola\n","17776e8e":"<h3>Rete Neurale<\/h3>","f81081bc":"# Esempi tosti\nsu un campione *assolutamente casuale*","e49081be":"\n\n<br><br><br>","c0f88f87":"\n___\n\n\n<br><br><br><br><br><br>","0f17ead9":"# APPROCCIO STANDARD","4f71005c":"\n\n<h2>Classe Solver<\/h2>\nTrova le regole *buone*. <br>\n\n<h6>PSEUDOCODICE<\/h6>\n**main**\n> complessit\u00e0MAX = 1\n>\n> while (c'\u00e8 ancora tempo):\n> > provando con complessita attivazione = 0\n> > \n> > aumenta complessit\u00e0 azione finch\u00e8 non ho **generalit\u00e0**\n> > \n> > restando sotto complessit\u00e0MAX\n> > \n> > aumenta complessit\u00e0 attivazione finch\u00e8 non ho **correttezza**\n> > \n> > if (non ho perso generalit\u00e0 nel mentre):\n> > > nuova regola *buona*!!!\n> > >\n> > > if (ho risolto tutti i train):\n> > > > quit\n> > \n> > complessit\u00e0MAX += 1\n\n<br>\n**def** aumenta_complessita_attivazione(regola):\n> for predicato in all_predicati:\n> > if (regola + predicato >> regola): #parecchio mejo\n> > > aumenta_comlessit\u00e0_attivazione(regola + predicato)\n\n<br><br>\nNOTA: s\u00ec, \u00e8 tutto esponenziale ","4497ae5e":"# APPROCCIO FALLIMENTARE MA COLORATO","3313afa5":"<h3>Definisco funzioni a mano e le provo<\/h3>","061d6a5a":"# Esempi facili\nsu un campione *assolutamente casuale*","22d6f65f":"> stampa tutti gli oggetti del task \"fill yellow\":\n> > tutte le immagini, output","4e0650dd":"# Solver","e8c20b45":"<h2>\"Classe\" Preprocessing<\/h2>\nFa cose","e7a109ef":"<h3>Perch\u00e9 il machine learning NON funziona?<\/h3>\n* o non \u00e8 abbastanza complesso\n* o \u00e8 abbastanza complesso ma trova una soluzione _sbagliata_\n\n<h3>Cos'\u00e8 una soluzione?<\/h3>\n* concetto di complessit\u00e0\n* _la soluzione \u00e8 la funzione di minima complessit\u00e0 tra quelle che risolvono il train_\n","4a83dc7c":"<h3>Regressione Lineare<\/h3>","1765f9fc":"> stampa tutti gli oggetti del task \"move red\":\n> > immagine 0, output","b18646d6":"La soluzione finale ad un Task sar\u00e0 un'insieme di **regole**.\n\n\n_Ad esempio_ \n> Per il task \"move red\":\n> * \"muovi l'oggetto rosso e fagli toccare l'oggetto blu\"\n> * \"lascia l'oggetto blu fermo\"\n> * \"aggiusta lo sfondo\"\n\n> Per il task \"fill yellow\":\n> * \"colora di giallo l'oggetto nero contenuto nell'oggetto verde\"\n> * \"lascia nero l'oggetto nero non contenuto nell'oggetto verde\"\n> * \"lascia l'oggetto verde fermo\"","6674499e":"# Oggetti","c005d75b":"<h2>Classe Oggetto<\/h2>\nComponente connessa di colore (e non solo)\n* forma\n* colore\n* posione\n* _altro..._\n\n<h2>Classe Immagine<\/h2>\nLista di Oggetti\n\n<h2>Classe Task<\/h2>\nLista di coppie di Immagini (input, output)"}}