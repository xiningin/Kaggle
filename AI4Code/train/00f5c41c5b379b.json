{"cell_type":{"f65cc9c2":"code","93988889":"code","0acd546f":"code","919e2f99":"code","5fb15bbf":"code","e25167e2":"code","f009cab8":"code","61ae3f52":"code","5f2c0800":"code","4b9cc018":"code","61b5abe5":"code","f4dd8a6d":"code","48266756":"code","971fb54d":"code","50876996":"code","0e632ab4":"code","af6439d1":"code","c3ba0888":"code","00a82358":"code","0da832d4":"code","f3dc3edb":"code","5997f905":"code","eeac70d8":"code","29fdf0fe":"markdown","3e756070":"markdown","0e995bf9":"markdown","ed6937e2":"markdown","bccfd0a1":"markdown","bd57449b":"markdown","4df6f083":"markdown","df14da93":"markdown","3f0a5ea4":"markdown","83901a57":"markdown","12142ca2":"markdown","a5a70367":"markdown","8cd76aef":"markdown","14590d7d":"markdown","567b7f29":"markdown","f7bc3802":"markdown","caff2d0c":"markdown","7a9fde8c":"markdown","70c3e0fb":"markdown","3e33834c":"markdown","73adaed5":"markdown","e483f53e":"markdown","a58eacc2":"markdown"},"source":{"f65cc9c2":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns","93988889":"\ndataset = pd.read_csv('..\/input\/social-network-ads\/Social_Network_Ads.csv')\n\ndataset.head(n= 10)  # return first n no. rows\n","0acd546f":"dataset.isnull().sum()","919e2f99":"dataset.info()","5fb15bbf":"dataset.describe()","e25167e2":"sns.countplot(dataset['Purchased'])\nplt.title('Distribution of Purchased or not')\nplt.xlabel('Purchased or not')\nplt.ylabel('Frequency')\nplt.show()","f009cab8":"plt.figure(figsize = (10,6))\nplt.hist(dataset['Age'], bins  = 6, color = 'blue', rwidth = 0.98)\nplt.title('Distribution of Age')\nplt.xlabel('Different Ages')\nplt.ylabel('Frequency')","61ae3f52":"plt.figure(figsize = (10,6))\nplt.hist(dataset['EstimatedSalary'], bins = 10, color = 'green',rwidth = 0.97)\nplt.title('Distribution of EstimatedSalaries')\nplt.xlabel('Different Salaries')\nplt.ylabel('Frequency')","5f2c0800":"sns.pairplot(dataset, hue = 'Purchased')","4b9cc018":"sns.heatmap(dataset.corr(), annot = True, cmap = \"RdYlGn\")\n","61b5abe5":"\nX = dataset.iloc[:,[2,3]].values\nprint(X)","f4dd8a6d":"# dependent variable\n\ny = dataset.iloc[:,4].values\nprint(y)","48266756":"\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.25, random_state = 0)\n\n","971fb54d":"\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test  = sc.transform(X_test)\n","50876996":"print(X_train)","0e632ab4":"print(X_test)","af6439d1":"from sklearn.neighbors import KNeighborsClassifier\n\n\nerror_rate = []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    knn.fit(X_train, y_train)\n    score = knn.predict(X_test)\n    error_rate.append(1-score.mean())","c3ba0888":"plt.figure(figsize =(10,6))\nplt.plot(range(1,40), error_rate, color = 'blue', linestyle = 'dashed', marker = 'o', markerfacecolor = 'red', markersize = 10)\nplt.title('Error rate vs K-value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')\nplt.show()","00a82358":"\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)\n","0da832d4":"y_pred = classifier.predict(X_test)\n","f3dc3edb":"from sklearn.metrics import confusion_matrix,accuracy_score\ncm1 = confusion_matrix(y_test,y_pred)\nprint(cm1)   \nac1 = accuracy_score(y_test, y_pred)*100\nprint(ac1)","5997f905":"# Visualizing the Training set results\n\nplt.figure(figsize = (12,8))\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n                color = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('kNN (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","eeac70d8":"# Visualizing the Test set results\n\nplt.figure(figsize = (12,8))\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_test, y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n                color = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('kNN (Testing set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","29fdf0fe":"### Feature Scaling","3e756070":"### Load Dataset","0e995bf9":"# Data Discription:\nWe have to predict that  the person  purchased the  product or not based on the Social Network Ads.\n","ed6937e2":"### Countplot ","bccfd0a1":"#### Checking the K value ","bd57449b":"To find out  how many person purchased the product or not from the social network site dataset.","4df6f083":"### importing Libraries","df14da93":"## KNN(k-Nearest Neighbors)","3f0a5ea4":"### predict the test set","83901a57":"### Splitting Data into train and test set","12142ca2":"!Here we can see that 257 person didn't purchased the product and 143 person purchased the product from social network site.\n\n0 - 'Not Purchased'\n\n1 - 'Purchased'","a5a70367":"# Conclusion:\n-  KNN perform well on this dataset, when trying to decide whether a person purchase a product\nfrom social Network Ads or not.","8cd76aef":"### checking the datatype &  Getting information of cancer DataFrame using \u2018.info()\u2018 method","14590d7d":"## Histograms","567b7f29":"### Checking the missing values","f7bc3802":"### Evaluate the performance","caff2d0c":"###     Descriptive Statistical Analysis","7a9fde8c":"### Find the correlation B\/w the feature","70c3e0fb":"! Great Here we don't have any null values. Now we are going to check the datatype ","3e33834c":"### fitting KNN to train set","73adaed5":"### independent variable and dependent variable","e483f53e":"# Visualizing  the final Result Using KNN","a58eacc2":"- Here both diagram show the performance of  KNN model of  the train and test set result."}}