{"cell_type":{"862a011f":"code","37fe9480":"code","1a89dda0":"code","6916fdfd":"code","a6730b62":"code","e63ccf72":"code","52468d81":"code","85aa0301":"code","a04aae00":"code","2ba34115":"code","0be15431":"code","af5f1b12":"code","369d1a74":"markdown","a577c366":"markdown","b9ce6b24":"markdown","7fa4c535":"markdown","73159803":"markdown","68ac914f":"markdown","2b962127":"markdown","1a81f4d1":"markdown","99b099a2":"markdown","6e084a1d":"markdown","b4725a0e":"markdown"},"source":{"862a011f":"import os\nimport shutil\nimport pandas as pd\nfrom glob import glob\nfrom tqdm.notebook import tqdm\nfrom sklearn.model_selection import GroupKFold","37fe9480":"lbls_dir = '..\/input\/data\/BBox_List_2017.csv'\nlbls = pd.read_csv (lbls_dir)\nlbls = lbls.drop (lbls.iloc [:, 6:9], axis = 1)\nlbls.head ()","1a89dda0":"print ('number of all boxes:', len (lbls))\nprint ('number of unique patients:',len (lbls ['Image Index'].unique ()))","6916fdfd":"pathology_list = []\ni = 0\nfor class_name in lbls ['Finding Label']:\n    if class_name not in pathology_list:\n        pathology_list.append (class_name)\npathology_list","a6730b62":"lbls ['class_id'] = lbls ['Finding Label'].apply (lambda x: pathology_list.index (x))\nlbls.head ()","e63ccf72":"lbls = lbls.rename (columns = {'Bbox [x': 'x', 'h]': 'h'})\nlbls ['x'] = lbls ['x'].apply (lambda r: r \/ 1024)\nlbls ['y'] = lbls ['y'].apply (lambda r: r \/ 1024)\nlbls ['w'] = lbls ['w'].apply (lambda r: r \/ 1024)\nlbls ['h'] = lbls ['h'].apply (lambda r: r \/ 1024)\nlbls.head ()","52468d81":"# adding path to dataframe\nall_image_paths = {os.path.basename(x): x for x in glob ('..\/input\/data\/images_*\/images\/*.png')}\nlbls ['path'] = lbls ['Image Index'].map(all_image_paths.get)\nlbls.head ()","85aa0301":"lbls ['boxes'] = lbls.apply (lambda row: [row.class_id, row.x, row.y, row.w, row.h], axis = 1)\nlbls = lbls.drop (['Image Index', 'Finding Label', 'x', 'y', 'w', 'h', 'class_id'], axis = 1)\nlbls.head ()","a04aae00":"gkf  = GroupKFold(n_splits = 10)\nlbls ['fold'] = -1\nfor fold, (train_idx, val_idx) in enumerate (gkf.split (lbls, groups = lbls.path.tolist())):\n    lbls.loc [val_idx, 'fold'] = fold\nlbls.head ()","2ba34115":"train_files = []\nvalid_files  = []\nvalid_files += list (lbls [lbls.fold == 9].path.unique())\ntrain_files += list (lbls [lbls.fold != 9].path.unique())\nprint ('number of unique trian images:', len (train_files))\nprint ('number of unique valid images:', len (valid_files))\ntrain_files [:3]","0be15431":"!rm -r labels\n!mkdir labels\nfor i in range (len (lbls)):\n    fname = os.path.basename (lbls.iloc [i, 0]).replace ('png', 'txt')\n    with open (f'labels\/{fname}', 'a') as f:\n        for j in range (5):\n            f.write (str (lbls.iloc [i, 1][j]) + ' ')\n        f.write ('\\n')","af5f1b12":"os.makedirs('NIH\/train\/images', exist_ok = True)\nos.makedirs('NIH\/train\/labels', exist_ok = True)\nos.makedirs('NIH\/valid\/images', exist_ok = True)\nos.makedirs('NIH\/valid\/labels', exist_ok = True)\n\nfor files in [train_files, valid_files]:\n    for file in tqdm (files):\n        fname = file.split ('\/')[-1].split ('.')[0]\n        if files == train_files:\n            shutil.copy (file, 'NIH\/train\/images\/' + fname + '.png')\n            shutil.copy (os.path.join ('labels', fname + '.txt'), 'NIH\/train\/labels\/' + fname + '.txt')\n        else:\n            shutil.copy (file, 'NIH\/valid\/images\/' + fname + '.png')\n            shutil.copy (os.path.join ('labels', fname + '.txt'), 'NIH\/valid\/labels\/' + fname + '.txt')","369d1a74":"### Concat boxes and class ids and remove additional","a577c366":"### Normalize bounding box","b9ce6b24":"### Seprate unique patient ids","7fa4c535":"### Create labels folder and labels usig .txt file","73159803":"# Split","68ac914f":"### Class to Index","2b962127":"# Preprocess DataFrame","1a81f4d1":"### Add path of images","99b099a2":"### Use Groupfold to better split","6e084a1d":"# Create NIH Dataset for YOLO Detection","b4725a0e":"### Read Data & remove additional"}}