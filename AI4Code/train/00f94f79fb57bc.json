{"cell_type":{"19454d76":"code","38306b64":"code","1d44f8a8":"code","e0bf27e5":"code","282bc014":"code","94ef3a56":"code","5ed1f0fe":"code","972f0611":"code","37cff7cf":"code","36c155c7":"code","41a6c38b":"code","9cd9d59b":"code","ec31327e":"code","77991166":"code","b14610e5":"code","06190da1":"markdown"},"source":{"19454d76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","38306b64":"test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntrain = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')","1d44f8a8":"X_train = train.iloc[:,1:]\nY_train = train.iloc[:,0]\nX_train \/= 255\ntest \/= 255","e0bf27e5":"import tensorflow as tf\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(X_train.iloc[i,:].to_numpy().reshape((28,28)), cmap=plt.cm.binary)\n    plt.xlabel(Y_train[i])\nplt.show()","282bc014":"model = Sequential()\n\nmodel.add(Conv2D(28, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\n\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(10))","94ef3a56":"model.summary()","5ed1f0fe":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy']\n             )\n\nX_train = X_train.to_numpy().reshape((-1, 28, 28, 1))\nY_train = Y_train.to_numpy().reshape((-1, 1))","972f0611":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=3)","37cff7cf":"epochs = 10","36c155c7":"history = model.fit(X_train,Y_train,\n                    epochs = epochs,\n                    validation_data = (X_val,Y_val),\n                    steps_per_epoch=X_train.shape[0]\n                   )","41a6c38b":"plt.plot(history.history['accuracy'], label='accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.ylim([0.5, 1])\nplt.legend(loc='lower right')","9cd9d59b":"test_data = test.to_numpy().reshape((len(test), 28, 28, 1))\n\noutput = model.predict(test_data)","ec31327e":"output_labels = np.argmax(output, axis =1).reshape((len(test), 1))","77991166":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(test_data[i].reshape(28,28), cmap=plt.cm.binary)\n    plt.xlabel(output_labels[i])\nplt.show()","b14610e5":"df = pd.DataFrame(output_labels)\nsubmission = pd.DataFrame({'ImageId': df.index+1, 'Label': df[0]})\nsubmission.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","06190da1":"# Credits\n\nAdapted from [TensorFlow: Convolutional Neural Network (CNN)](https:\/\/www.tensorflow.org\/tutorials\/images\/cnn)"}}