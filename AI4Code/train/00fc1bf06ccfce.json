{"cell_type":{"d149d455":"code","a2e535f1":"code","3fe4fbd3":"code","fe8f8d4b":"code","d3a993a0":"code","e1ee2671":"code","4f86f116":"code","216b047b":"code","dafaae47":"code","a6eaf538":"code","4637e11e":"code","73c037fc":"code","11255482":"code","2d95669c":"code","a723e216":"code","d6c8f322":"code","76b4caf9":"code","8fa3aa0b":"code","878bec04":"code","62fca8dc":"code","78025c21":"code","868062fd":"code","64e0e9d7":"code","a9b3dc0d":"code","fdc20357":"code","328ae51c":"code","97ff2921":"code","c3e31e93":"code","7d4df750":"code","15befcd2":"code","c5bf450f":"code","03f72d40":"code","2b43da77":"code","ceb614c1":"code","d4fc0d97":"code","6d96a949":"code","75791293":"code","9fb4df62":"code","ee4ba3b2":"code","15c0cb16":"markdown","b9c57dc9":"markdown","41facafb":"markdown","00553b58":"markdown"},"source":{"d149d455":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a2e535f1":"df= pd.read_csv(\"..\/input\/fuel-cnsmp\/FuelConsumptionCo2.csv\")","3fe4fbd3":"df.head()","fe8f8d4b":"df.shape","d3a993a0":"df.isnull().sum()","e1ee2671":"df.columns","4f86f116":"df.describe()","216b047b":"cdf = df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB','CO2EMISSIONS']]","dafaae47":"cdf.head()","a6eaf538":"viz1 = cdf[['ENGINESIZE']]\n\nviz1.hist()\nplt.show()","4637e11e":"cdf['CYLINDERS'].hist()\nplt.show()","73c037fc":"cdf['FUELCONSUMPTION_COMB'].hist()\nplt.show()","11255482":"cdf['CO2EMISSIONS'].hist()\nplt.show()","2d95669c":"plt.scatter(cdf[\"FUELCONSUMPTION_COMB\"],cdf['CO2EMISSIONS'],  color='blue')\nplt.xlabel(\"FUELCONSUMPTION_COMB\")\nplt.ylabel(\"Emission\")\nplt.show()","a723e216":"plt.scatter(cdf[\"ENGINESIZE\"], cdf[\"CO2EMISSIONS\"],  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()","d6c8f322":"plt.scatter(cdf[\"CYLINDERS\"], cdf[\"ENGINESIZE\"],  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"CYLINDERS\")\nplt.show()","76b4caf9":"from sklearn.model_selection import train_test_split\nX = cdf[['ENGINESIZE']]\ny = cdf[[\"CO2EMISSIONS\"]]\nX_train, X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2)","8fa3aa0b":"X_train.shape","878bec04":"X_test.shape","62fca8dc":"plt.scatter(X_train[\"ENGINESIZE\"],y_train[\"CO2EMISSIONS\"],  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()","78025c21":"import numpy as np","868062fd":"#x = np.array(X_train[\"ENGINESIZE\"]).reshape(-1,1)","64e0e9d7":"x= np.array(X_train).reshape(-1,1)","a9b3dc0d":"y = np.array(y_train).reshape(-1,1)","fdc20357":"from sklearn.linear_model import LinearRegression\nregr = LinearRegression()\nregr.fit(x,y)","328ae51c":"print ('Coefficients: ', regr.coef_)\nprint ('Intercept: ',regr.intercept_)","97ff2921":"plt.scatter(x,y,  color='blue')\nplt.plot(x, regr.coef_[0][0]*x + regr.intercept_[0], '-r')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()","c3e31e93":"x_t = np.array(X_test).reshape(-1,1)\ny_t = np.array(y_test).reshape(-1,1)","7d4df750":"y_pred = regr.predict(x_t)","15befcd2":"y_pred.shape","c5bf450f":"from sklearn.metrics import r2_score\n\n\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(y_pred - y_t )))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((y_pred - y_t ) ** 2))\nprint(\"R2-score: %.2f\" % r2_score( y_pred, y_t ) )","03f72d40":"msk = np.random.rand(len(df)) < 0.8\ntrain = cdf[msk]\ntest = cdf[~msk]\nprint(\"total data\",cdf.shape)\nprint(\"data for train\",train.shape)\nprint(\"data for test\",test.shape)\n\nfrom sklearn.linear_model import LinearRegression\nregr = LinearRegression()\n\ntrain_x = np.asanyarray(train[['ENGINESIZE']])\ntrain_y = np.asanyarray(train[['CO2EMISSIONS']])\nregr.fit (train_x, train_y)\n\n# The coefficients\nprint ('Coefficients: ', regr.coef_)\nprint ('Intercept: ',regr.intercept_)\n\nfrom sklearn.metrics import r2_score\n\ntest_x = np.asanyarray(test[['ENGINESIZE']])\ntest_y = np.asanyarray(test[['CO2EMISSIONS']])\ntest_y_ = regr.predict(test_x)\n\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_ - test_y)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_ - test_y) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(test_y , test_y_) )","2b43da77":"from sklearn.model_selection import train_test_split\nX = cdf[[\"ENGINESIZE\"]]\ny = cdf[[\"CO2EMISSIONS\"]]\nX_train, X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2)\n\nregr2 = LinearRegression()\nregr2.fit(X_train,y_train)\nprint ('Coefficients: ', regr2.coef_)\nprint ('Intercept: ',regr2.intercept_)\n\ny_pred = regr2.predict(X_test)\n\nfrom sklearn.metrics import r2_score\n\n\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(y_pred - y_test )))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((y_pred - y_test ) ** 2))\nprint(\"R2-score: %.2f\" % r2_score( y_pred, y_test ) )","ceb614c1":"cdf = df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY','FUELCONSUMPTION_COMB','CO2EMISSIONS']]\ncdf.head(9)","d4fc0d97":"msk = np.random.rand(len(df)) < 0.8\ntrain = cdf[msk]\ntest = cdf[~msk]","6d96a949":"plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()","75791293":"from sklearn.linear_model import LinearRegression\nregr = LinearRegression()\nx = np.asanyarray(train[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])\ny = np.asanyarray(train[['CO2EMISSIONS']])\nregr.fit (x, y)\n# The coefficients\nprint ('Coefficients: ', regr.coef_)","9fb4df62":"y_hat= regr.predict(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])\nx = np.asanyarray(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])\ny = np.asanyarray(test[['CO2EMISSIONS']])\nprint(\"Residual sum of squares: %.2f\"\n      % np.mean((y_hat - y) ** 2))\n\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % regr.score(x, y))","ee4ba3b2":"regr =LinearRegression()\nx = np.asanyarray(train[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY']])\ny = np.asanyarray(train[['CO2EMISSIONS']])\nregr.fit (x, y)\nprint ('Coefficients: ', regr.coef_)\ny_= regr.predict(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY']])\nx = np.asanyarray(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY']])\ny = np.asanyarray(test[['CO2EMISSIONS']])\nprint(\"Residual sum of squares: %.2f\"% np.mean((y_ - y) ** 2))\nprint('Variance score: %.2f' % regr.score(x, y))\n","15c0cb16":"#### Modeling\n\nUsing sklearn package to model data.\n","b9c57dc9":"### Simple Regression Model\n\nLinear Regression fits a linear model with coefficients B = (B1, ..., Bn) to minimize the 'residual sum of squares' between the independent x in the dataset, and the dependent y by the linear approximation. \n","41facafb":"\n-   **MODELYEAR** e.g. 2014\n-   **MAKE** e.g. Acura\n-   **MODEL** e.g. ILX\n-   **VEHICLE CLASS** e.g. SUV\n-   **ENGINE SIZE** e.g. 4.7\n-   **CYLINDERS** e.g 6\n-   **TRANSMISSION** e.g. A6\n-   **FUEL CONSUMPTION in CITY(L\/100 km)** e.g. 9.9\n-   **FUEL CONSUMPTION in HWY (L\/100 km)** e.g. 8.9\n-   **FUEL CONSUMPTION COMB (L\/100 km)** e.g. 9.2\n-   **CO2 EMISSIONS (g\/km)** e.g. 182   --> low --> 0","00553b58":"# Multiple Linear Regression"}}