{"cell_type":{"c5688166":"code","3d949e67":"code","b5ddadb4":"code","05a35438":"code","8907b71b":"code","8cba0647":"code","5761e312":"code","309a2bf5":"code","550264d9":"code","98bc557f":"markdown","e957e5d7":"markdown","1d8f7ea7":"markdown","94ea9a1a":"markdown","caf860cf":"markdown","d787c144":"markdown"},"source":{"c5688166":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/\"))\n\n# Any results you write to the current directory are saved as output.","3d949e67":"ratings  = pd.read_csv('..\/input\/ratings_small.csv')\nratings.head()","b5ddadb4":"print(ratings.shape)","05a35438":"from sklearn.model_selection import train_test_split\ntrain_df,test_df = train_test_split(ratings, test_size = 0.3, random_state = 42)\nprint(train_df.shape, '\\t\\t', test_df.shape)","8907b71b":"train_df.head()","8cba0647":"df_movies_as_features = train_df.pivot(index = 'userId', columns = 'movieId',values = 'rating' )\ndf_movies_as_features.shape","5761e312":"df_movies_as_features.head()","309a2bf5":"df_movies_as_features.fillna(0, inplace = True)\ndf_movies_as_features.head()","550264d9":"from sklearn.metrics.pairwise import pairwise_distances","98bc557f":"### Loading and Reading Dataset","e957e5d7":"### Let's create User Similarity Matrix\nUsing Cosine Similarities","1d8f7ea7":"## Splitting Data into Train and Test Set","94ea9a1a":"  ####  Copy Train and Test DATASET\n  This will be used for Evaluation and","caf860cf":"### We can achieve this using dataframe's Pivot Method","d787c144":"#### As MovieID column stores, movies and our first task is to build a recommendation engine based on USER COLLABORATIVE approach, we want our data in tabular format such that: userID as index, Data i.e Unique MovieID's as Columns\/features and Ratings as Values"}}