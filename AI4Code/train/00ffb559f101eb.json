{"cell_type":{"733da258":"code","a9031e98":"code","86345e09":"code","03e305df":"code","b459e1d1":"code","2815bf0f":"code","f39d5c95":"code","be1f7417":"code","681a864c":"code","78de7b42":"code","f2b6f25c":"code","06b55fd7":"code","dc2bc25a":"code","b7609fa7":"code","db5f5f58":"markdown","1c44aebf":"markdown"},"source":{"733da258":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a9031e98":"dataframe=pd.read_csv('..\/input\/column_2C_weka.csv')\ndataframe.head()\n","86345e09":"dataframe.info() # seeking NaN values","03e305df":"dataframe=dataframe.rename(columns={'class': 'posture'})\ndataframe.head()","b459e1d1":"A = dataframe[dataframe.posture=='Abnormal']\nN = dataframe[dataframe.posture=='Normal']","2815bf0f":"plt.scatter(A.pelvic_incidence,A.lumbar_lordosis_angle,color='red',label='well_posture',alpha=0.3)\nplt.scatter(N.pelvic_incidence,N.lumbar_lordosis_angle,color='green',label='bad_posture',alpha=0.3)\nplt.xlabel('pelvic_incidence') \nplt.ylabel('lumbar_lordosis_angle') \nplt.legend()\nplt.show()\n","f39d5c95":"dataframe.posture=[1 if each==\"Abnormal\" else 0 for each in dataframe.posture]\ny=dataframe.posture.values\nx_data=dataframe.drop([\"posture\"],axis=1)","be1f7417":"# normalization\nx= (x_data-np.max(x_data))\/(np.max(x_data)-np.min(x_data))","681a864c":"x.head()","78de7b42":"# train test split\nfrom sklearn.model_selection import train_test_split\n\nx_train , x_test , y_train , y_test = train_test_split(x,y,test_size=0.3,random_state=1)","f2b6f25c":"y_train","06b55fd7":"# knn model\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn= KNeighborsClassifier(n_neighbors=13) # n_neighbors=k\nknn.fit(x_train,y_train)\nprediction= knn.predict(x_test)","dc2bc25a":"# accuracy(score)\nprint(\"{} nn score: {} \".format(13,knn.score(x_test,y_test)))","b7609fa7":"# find K values\nscore_list=[]\nfor each in range(1,15):\n    knn2=KNeighborsClassifier(n_neighbors= each)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\nplt.plot(range(1,15),score_list)\nplt.xlabel('k values')\nplt.ylabel('accuracy')\nplt.show()","db5f5f58":"# conclusion\n*  if k value is 13, x_test gives best accuracy value.\n","1c44aebf":"# KNN ALGOR\u0130THM Homework\n* In this homework i do;\n* import dataset\n* Exploratory  Data\n* visualisation dataset\n* knn algorithm with sklearn\n* conclusion"}}