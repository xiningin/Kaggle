{"cell_type":{"4a64e4ce":"code","3552a32a":"code","c1f405be":"code","f1f75e75":"code","eec5f1d3":"code","4a2d8215":"code","e772a49b":"code","ea591c39":"code","6cc3c6e5":"code","8aa23bb6":"code","a42db14e":"code","f89cdf79":"code","b1c35869":"code","053a0e6b":"code","c0559d31":"code","10b9f584":"code","4f49f009":"markdown","4b72558f":"markdown","b6aa2938":"markdown","b8ec4a4b":"markdown","bcdc33a8":"markdown","876a29af":"markdown","2dec03a5":"markdown","c398e169":"markdown","062f1b7e":"markdown","fe56cb5a":"markdown","b82be76e":"markdown","e075060b":"markdown","99f98bd5":"markdown","095d179f":"markdown","9587ef8c":"markdown","bcda38ea":"markdown","98cef4c4":"markdown"},"source":{"4a64e4ce":"!conda install -c conda-forge gdcm -y","3552a32a":"import numpy as np\nimport pandas as pd\nimport os\nimport pydicom\nimport glob\nfrom tqdm.notebook import tqdm\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nimport matplotlib.pyplot as plt\nfrom skimage import exposure\nimport cv2\nimport warnings\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\nwarnings.filterwarnings('ignore')","c1f405be":"dataset_path = Path('..\/input\/siim-covid19-detection')\nl1=dataset_path.ls()\nfor l in l1:\n    print(l)","f1f75e75":"train_study_df = pd.read_csv(dataset_path\/'train_study_level.csv')\nprint(train_study_df.shape)\ntrain_study_df.head()","eec5f1d3":"lst = np.unique(train_study_df.id)\nlen(lst)","4a2d8215":"study_classes = ['Negative for Pneumonia', 'Typical Appearance', 'Indeterminate Appearance', 'Atypical Appearance']\nnp.unique(train_study_df[study_classes].values, axis=0)","e772a49b":"plt.figure(figsize=(10,5))\nplt.bar([1,2,3,4], train_study_df[study_classes].values.sum(axis=0))\nplt.xticks([1,2,3,4], study_classes)\nplt.xlabel('Class')\nplt.ylabel('Frequency')\nplt.show()","ea591c39":"train_image_df = pd.read_csv(dataset_path\/'train_image_level.csv')\nprint(train_image_df.shape)\ntrain_image_df.head()","6cc3c6e5":"train_image_df['split_label'] = train_image_df.label.apply(lambda x:[x.split()[offs:offs+6] for offs in range(0, len(x.split()),6)])\ntrain_image_df.head()","8aa23bb6":"classes_freq = []\nbbox_areas = []\nfor i in range(len(train_image_df)):\n    for j in train_image_df.iloc[i].split_label:\n        classes_freq.append(j[0])\n        bbox_areas.append((float(j[4])-float(j[2]))*(float(j[5])*float(j[3])))\nplt.hist(classes_freq)\nplt.ylabel('Frequency')","a42db14e":"plt.hist(bbox_areas)\nplt.ylabel('Frequency')","f89cdf79":"def dicom2array(path, voi_lut=True, fix_monochrome=True):\n    dicom = pydicom.read_file(path)\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data*255).astype(np.uint8)\n    return data\n\ndef plot_img(img, size=(7,7), is_rgb=True, title=\"\", cmap='gray'):\n    plt.figure(figsize=size)\n    plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()\n    \ndef plot_imgs(imgs, cols=4, size=7, is_rgb=True, title=\"\", cmap='gray', img_size=(500, 500)):\n    rows = len(imgs)\/\/cols + 1\n    fig = plt.figure(figsize=(cols*size, rows*size))\n    for i, img in enumerate(imgs):\n        if img_size is not None:\n            img = cv2.resize(img, img_size)\n        fig.add_subplot(rows, cols, i+1)\n        plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()","b1c35869":"dicom_paths = get_dicom_files(dataset_path\/'train')\nimgs = [dicom2array(path) for path in dicom_paths[:4]]\nplot_imgs(imgs)","053a0e6b":"num_images_per_study = []\nfor i in (dataset_path\/'train').ls():\n    num_images_per_study.append(len(get_dicom_files(i)))\n    if len(get_dicom_files(i))>3:\n        print(f'Study {i} has {len(get_dicom_files(i))} images')\nplt.hist(num_images_per_study)\nplt.show()","c0559d31":"def image_path(row):\n    study_path = dataset_path\/'train'\/row.StudyInstanceUID\n    for i in get_dicom_files(study_path):\n        if row.id.split('_')[0] == i.stem:\n            return i\ntrain_image_df['image_path'] = train_image_df.apply(image_path, axis=1)\ntrain_image_df.head()","10b9f584":"imgs = []\nimage_paths = train_image_df['image_path'].values\n# map label_id to specify color\nthickness = 10\nscale = 5\nfor i in range(8):\n    image_path = random.choice(image_paths)\n    print(image_path)\n    img = dicom2array(path=image_path)\n    img = cv2.resize(img, None, fx=1\/scale, fy=1\/scale)\n    img = np.stack([img, img, img], axis=-1)\n    for i in train_image_df.loc[train_image_df['image_path'] == image_path].split_label.values[0]:\n        if i[0] == 'opacity':\n            img = cv2.rectangle(img,\n                                (int(float(i[2])\/scale), int(float(i[3])\/scale)),\n                                (int(float(i[4])\/scale), int(float(i[5])\/scale)),\n                                [255,0,0], thickness)\n    img = cv2.resize(img, (500,500))\n    imgs.append(img)\nplot_imgs(imgs, cmap=None)","4f49f009":"Extracting image paths","4b72558f":"Viewing Image Level CSV","b6aa2938":"Splitting the label attribute of image level CSV","b8ec4a4b":"install GDCM package","bcdc33a8":"Plotting bounding box in x-ray images","876a29af":"Viewing Study Level CSV","2dec03a5":"Simple EDA process","c398e169":"Print unique classes in Study Level\nNote: Target classes are One Hot Encoded","062f1b7e":"Plotting x-ray images","fe56cb5a":"Plotting Bounding Box Areas","b82be76e":"Functions to convert .dcm to numpy arrays","e075060b":"Listing all the files available","99f98bd5":"Plotting the Class vs Frequency graph - Study Level","095d179f":"Finding Class Frequency and Area under box frequency","9587ef8c":"Study with more than 3 images","bcda38ea":"Importing necessary packages","98cef4c4":"Storing unique studyIDs"}}