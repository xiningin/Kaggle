{"cell_type":{"ff6a9373":"code","2b4c216a":"code","74374591":"code","63a9d58f":"code","1cab68c0":"code","0c6bfdb6":"code","e0bad787":"code","e2e7ef1a":"code","d8f924b9":"code","8a4f78b3":"code","b371dc7b":"code","b265dd04":"code","75aa892c":"code","cb1f6849":"code","d3d416ec":"code","9e3f4edc":"code","78608ba0":"code","7b6d419a":"code","ed21d20f":"code","2c208a50":"code","e2c25ba3":"code","0272945d":"code","785510ad":"code","905f4998":"code","c2b73e3a":"code","eb5433c6":"code","ebaa091a":"code","b34606df":"code","f257fcb5":"code","d75b1ec7":"code","df299329":"code","1bd3924f":"code","8054c6f8":"code","b623c094":"code","6974f313":"code","72ad52b8":"code","bea65987":"code","97b424ee":"code","fb123114":"code","d894bcd2":"markdown","e280a869":"markdown","d32e394b":"markdown","123387ce":"markdown","1bccdc8e":"markdown","0ddef999":"markdown","b6707607":"markdown","6c9cd939":"markdown","ac7a3a9b":"markdown"},"source":{"ff6a9373":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","2b4c216a":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","74374591":"train = train.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)","63a9d58f":"train['Survived'].value_counts()","1cab68c0":"sns.countplot(x='Survived',\n             data=train,\n             order=train['Survived'].value_counts().index).set_title('Who survived or not')\nplt.show()","0c6bfdb6":"train['Pclass'].value_counts()","e0bad787":"sns.countplot(x='Survived',\n             hue='Pclass',\n             data=train,\n             order=train['Survived'].value_counts().index).set_title('Ticket Class Survival')\nplt.show()","e2e7ef1a":"train['Sex'].value_counts()","d8f924b9":"sns.countplot(x='Survived',\n             hue='Sex',\n             data=train,\n             order=train['Survived'].value_counts().index).set_title('Survival per gender')\nplt.show()","8a4f78b3":"sns.catplot(x='Pclass',\n           y='Survived',\n           col='Sex',\n           data=train,\n           kind='bar')\nplt.show()","b371dc7b":"train['Age'].describe()","b265dd04":"train['Age']","75aa892c":"median_age = train['Age'].median()\nmedian_age","cb1f6849":"train.loc[train['Age'].isnull(), 'Age'] = median_age","d3d416ec":"train['Age']","9e3f4edc":"from sklearn.preprocessing import LabelEncoder\nencoder= LabelEncoder()\ntrain['Sex'] = encoder.fit_transform(train['Sex'])","78608ba0":"train.head()","7b6d419a":"X = train[['Age', 'Sex', 'Pclass', 'Fare']]\n\n#Our target\ny = train['Survived']","ed21d20f":"X.head()","2c208a50":"y.head()","e2c25ba3":"from sklearn.model_selection import train_test_split\n\n#Spliting in train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","0272945d":"#Decicion Tree Classifier\nfrom sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier(criterion='entropy')\n\n#Training our model\nmodel.fit(X_train, y_train)","785510ad":"from sklearn.tree import export_graphviz\nexport_graphviz (model, \n                 out_file='titanic_tree.dot', \n                 feature_names=['Age','Sex', 'Pclass', 'Fare'], \n                 rounded = True, \n                 filled=True, \n                 class_names=['Not Survived', 'Survived'])\n!dot -Tpng titanic_tree.dot -o titanic_tree.png","905f4998":"from IPython.core.display import Image, display\ndisplay(Image('titanic_tree.png', width=3500, unconfined=True))","c2b73e3a":"y_pred = model.predict(X_test)\ny_pred","eb5433c6":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","ebaa091a":"from sklearn.metrics import confusion_matrix\nimport itertools","b34606df":"cnf_matrix= confusion_matrix(y_test, y_pred)\ncnf_matrix","f257fcb5":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion Matrix',\n                          cmap=plt.cm.Blues):\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n    \n    #plt.ylim(0.5, 0.5)\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    plt.ylim(1.5, -0.5) \n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('Real Class')\n    plt.xlabel('Predict Class')\n    plt.tight_layout()","d75b1ec7":"plot_confusion_matrix(cnf_matrix, classes=['Not Survived', 'Survived'])","df299329":"#Random Forest  Classifier\nfrom sklearn.ensemble import RandomForestClassifier\nmodelrf = RandomForestClassifier(criterion='entropy')\nmodelrf.fit(X_train, y_train)","1bd3924f":"y_pred = modelrf.predict(X_test)","8054c6f8":"accuracy_score(y_test, y_pred)","b623c094":"#Gradient Boosting Classifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nmodelgb = GradientBoostingClassifier()\nmodelgb.fit(X_train, y_train)","6974f313":"y_pred = modelgb.predict(X_test)","72ad52b8":"accuracy_score(y_test, y_pred)","bea65987":"#MLPClassifier\nfrom sklearn.neural_network import MLPClassifier\nmodelnn = MLPClassifier(max_iter=400)\nmodelnn.fit(X_train, y_train)","97b424ee":"y_pred = model.predict(X_test)","fb123114":"accuracy_score(y_test, y_pred)","d894bcd2":"<h1> Passager's gender <\/h1>","e280a869":"<h1> Passager ticket's class <\/h1>","d32e394b":"After converting the text file, we can see the tree below. The colors help to identify the classification given by the model:\n\nKnots or blue leaves mean that our decision tree believes the passenger SURVIVED.\n\nIn the knots and orange leaves, the tree thinks the passenger DID NOT SURVIVE. ","123387ce":"<h1> Passager's age<\/h1>","1bccdc8e":"<h1> Passengers with a target of 0 are those who did not survive the Titanic sinking, while those who did survive have a target value of 1. <\/h1>\n\n","0ddef999":"<h1> Evaluating our model <\/h1>","b6707607":"Men - 1\n\nWomen - 0","6c9cd939":"<h1> Feature Engineering<\/h1>","ac7a3a9b":"Missing values"}}