{"cell_type":{"9f74d352":"code","ee4117f5":"code","09368851":"code","bf8e7843":"code","df0ad5d9":"code","ce38156f":"code","b7c58286":"code","45ce134b":"markdown","114205fc":"markdown","3e4ed251":"markdown"},"source":{"9f74d352":"from datetime import datetime as dt\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nimport time\nimport os\nimport argparse\nimport sys\nfrom scipy.stats import norm","ee4117f5":"df = pd.read_csv('..\/input\/bay-dataset\/historical_data_89.csv')\n\ndf = df.drop(df.columns[0], axis=1)\ndf['DATE'] = pd.to_datetime(df['DATE'])\ndf = df[df['DATE'] <= '2020-12-29']\ndf['SUM_ENDING_BALANCE'] = df.iloc[:,8:11].sum(axis=1)\ndf['IS_SHIP'] = df['SUM_SHIP_IN'].apply(lambda x: int(x != 0))\n\nID = df.ATM_ID.unique()\n\ndf.T","09368851":"split_df = []\nfor sub_id in ID:\n    append_df = df[df.ATM_ID == sub_id].reset_index()\n    split_df.append(append_df)","bf8e7843":"for n,sub_df in enumerate(split_df):\n    sub_df = sub_df[['ATM_ID', 'SHIP_IN_1K', 'SHIP_IN_500', 'SHIP_IN_100',\n       'SHIP_OUT_1K', 'SHIP_OUT_500', 'SHIP_OUT_100', 'ENDING_BALANCE_1K',\n       'ENDING_BALANCE_500', 'ENDING_BALANCE_100', 'DISPENSE_1K',\n       'DISPENSE_500', 'DISPENSE_100', 'SUM_DISPENSE',\n       'SUM_SHIP_IN', 'SUM_SHIP_OUT', 'SUM_REMAIN', 'SUM_ENDING_BALANCE',\n       'IS_SHIP']]\n    nex = sub_df['IS_SHIP']\n    \n    sub_df['IS_SHIP'] = pd.Series(nex.to_list())\n    \n    sub_df['2daysbefore'] = pd.Series((sub_df['SUM_REMAIN'][-2:].to_list() + sub_df['SUM_REMAIN'][:-2].to_list()))\n    sub_df['3daysbefore'] = pd.Series((sub_df['SUM_REMAIN'][-3:].to_list() + sub_df['SUM_REMAIN'][:-3].to_list()))\n    split_df[n] = sub_df.fillna(0)","df0ad5d9":"split_df[0].T","ce38156f":"from tqdm import tqdm\nfrom sklearn.metrics import confusion_matrix\n\npd.set_option('display.float_format', lambda x: '%.2f' % x)\n\nlr = 0.01\ndef get_submission():\n    all_thresh = pd.DataFrame({})\n    for sub in tqdm(split_df):\n        a = sub.copy()\n        ATM_ID = a['ATM_ID'].unique()\n        ship_true = a.loc[a[\"IS_SHIP\"]==1]\n        ship_false = a.loc[a[\"IS_SHIP\"]==0]\n        max_ = ship_true[\"2daysbefore\"].max()\n        thresh = max_\n        max_score = 0\n        max_accuracy = 0\n        early_stopping = 1000\n        stop = 0\n        for i in range(10000):\n            stop += 1\n            if stop == early_stopping:\n                break\n            y_true = a[\"IS_SHIP\"].to_list()\n            y_pred = a[\"2daysbefore\"].apply(lambda x: int(x<=thresh)).to_list()\n            tn, fp, fn, tp = confusion_matrix(y_true, y_pred).ravel()\n            \n            precision = tp\/(tp+fp)\n            recall = tp\/(tp+fn)\n            score = 1 - abs(precision - recall)\n            accuracy = (tp+tn)\/(tp+tn+fp+fn)\n            \n            if score > max_score:\n                stop = 0\n                max_score = score\n                max_thresh = thresh\n            elif score == max_score:\n                if accuracy > max_accuracy:\n                    stop = 0\n                    max_accuracy = accuracy\n                    max_thresh = thresh\n                    \n            thresh = thresh - (1-score)*lr*thresh\n            \n        all_thresh = pd.concat((all_thresh, pd.DataFrame({'ATM_ID':ATM_ID, \n                                                          'OPM_FZ':max_thresh, \n                                                          'Score':max_score, \n                                                          'Accuracy': max_accuracy}) ))\n        \n    all_thresh.index = all_thresh['ATM_ID']\n    all_thresh.drop(columns='ATM_ID',inplace=True)\n    \n    return all_thresh\n\nsubmission = get_submission()\nsubmission","b7c58286":"submission.drop(columns=['Score','Accuracy']).to_csv('execute_result_22p26s0324.csv')","45ce134b":"# Submission","114205fc":"# Training Process","3e4ed251":"# Preparing Data"}}