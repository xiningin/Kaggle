{"cell_type":{"5ad0fd67":"code","9d50afb7":"code","a9a6f004":"code","0c2041aa":"code","3c681378":"code","20a352e3":"code","178720ef":"code","1ea59fd3":"code","417b0336":"code","10f77e53":"code","e35df62c":"code","3a6ff331":"code","1c7c3156":"code","05421076":"code","413c4ade":"code","5ca50dc1":"code","92a34b4b":"code","e9e16fa5":"code","2c50b20e":"code","12f6397e":"code","764eb8e4":"code","1fcd34e9":"code","873162de":"code","fbe9ad51":"code","51f8e5ee":"code","dcae906a":"code","e14398bb":"code","4cac3d5e":"code","a4a4280d":"code","43c73881":"code","fc74ac02":"code","9443e7ae":"code","ef9a94a9":"code","4242430d":"code","b33bf90b":"code","01391b38":"code","fac9d428":"code","fe3237e4":"code","b9eda0da":"code","a741d1ef":"code","cf60fd16":"code","896c1f2a":"code","db2831f4":"code","c4279b52":"code","6e44ed0e":"code","3d892425":"code","b7939dce":"code","f9aad846":"code","f694f67a":"code","50f4960e":"code","ab66b3ec":"code","9ae49e1f":"code","cd354067":"code","7943e4ed":"code","1b77fef1":"code","816a8efd":"code","8dc01865":"code","ddc36016":"code","533e9538":"code","e0c1de24":"markdown","f7cb2394":"markdown","a8fab6f7":"markdown"},"source":{"5ad0fd67":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d50afb7":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC","a9a6f004":"from sklearn.linear_model import LogisticRegression","0c2041aa":"df2 = pd.read_csv('..\/input\/electrical-fault-detection-and-classification\/detect_dataset.csv')","3c681378":"df2.head()","20a352e3":"df2 = df2.drop(['Unnamed: 7', 'Unnamed: 8'],1)","178720ef":"df2.head()","1ea59fd3":"df2.describe()","417b0336":"df2.info()","10f77e53":"df2.describe()","e35df62c":"y = df2.iloc[:,0].copy()\nX = df2.iloc[:,1:].copy()","3a6ff331":"y,X","1c7c3156":"y.value_counts()","05421076":"X_train, X_test,y_train,y_test = train_test_split(X,y, test_size = 0.2 , random_state = 42)","413c4ade":"scaled = StandardScaler()\nX_train_scaled = scaled.fit_transform(X_train)\nX_test_scaled = scaled.transform(X_test)","5ca50dc1":"rf = RandomForestClassifier()\nrf.fit(X_train_scaled,y_train)\ny_preds = rf.predict(X_test_scaled)","92a34b4b":"print(\"accuracy_score: \", accuracy_score(y_preds, y_test))\nprint(\"precision_score\", precision_score(y_preds, y_test))\nprint(\"recall_score\", recall_score(y_preds, y_test))\nprint(confusion_matrix(y_preds,y_test))","e9e16fa5":"def fit_performance(clf,Xtrain,ytrain,Xtest,ytest):\n    '''clf is machine learning model\n    X_train\n    X_test\n    y_train'''\n    \n    clf.fit(Xtrain,ytrain)\n    y_preds = clf.predict(Xtest)\n    print(\"accuracy_score: \", accuracy_score(y_preds, ytest))\n    print(\"precision_score\", precision_score(y_preds, ytest))\n    print(\"recall_score\", recall_score(y_preds, ytest))\n    print(confusion_matrix(y_preds,ytest))","2c50b20e":"fit_performance(RandomForestClassifier(),X_train_scaled,y_train,X_test_scaled,y_test)","12f6397e":"fit_performance(DecisionTreeClassifier(),X_train_scaled,y_train,X_test_scaled,y_test)","764eb8e4":"fit_performance(LogisticRegression(),X_train,y_train,X_test,y_test)","1fcd34e9":"fit_performance(LogisticRegression(),X_train_scaled,y_train,X_test_scaled,y_test)","873162de":"fit_performance(SVC(),X_train_scaled,y_train,X_test_scaled,y_test)","fbe9ad51":"plt.figure(figsize = (10,8))\nplt.plot(df2[df2['Output (S)'] == 0][\"Ia\"],'r')\nplt.plot(df2[df2['Output (S)'] == 1][\"Ia\"],'r--')\nplt.plot(df2[df2['Output (S)'] == 0][\"Ib\"],'b')\nplt.plot(df2[df2['Output (S)'] == 1][\"Ib\"],'b--')\nplt.plot(df2[df2['Output (S)'] == 0][\"Ic\"],'g')\nplt.plot(df2[df2['Output (S)'] == 1][\"Ic\"],'g--')","51f8e5ee":"plt.figure(figsize = (10,8))\nplt.plot(df2[\"Va\"])\nplt.plot(df2[\"Vb\"])\nplt.plot(df2[\"Vc\"])","dcae906a":"plt.figure(figsize = (10,8))\nplt.plot(df2[\"Ia\"])\nplt.plot(df2[\"Ib\"])\nplt.plot(df2[\"Ic\"])","e14398bb":"df = pd.read_csv('..\/input\/electrical-fault-detection-and-classification\/classData.csv')","4cac3d5e":"df.head()","a4a4280d":"df.info()","43c73881":"df.describe()","fc74ac02":"X = df.iloc[:,4:].copy()\ny = (df['G']*4000 + df['C']*300 + df['B']*20 + df['A']*1)\ny = y.map({4321 : 5, 321 : 4,4021 : 3, 320 : 2,4001 : 1,0 : 0  })","9443e7ae":"y.value_counts()","ef9a94a9":"def fit_performance2(clf,Xtrain,ytrain,Xtest,ytest):\n    '''clf is machine learning model\n    X_train\n    X_test\n    y_train'''\n    \n    clf.fit(Xtrain,ytrain)\n    y_preds = clf.predict(Xtest)\n    acc = accuracy_score(ytest,y_preds)\n    pre = precision_score(ytest,y_preds, average = None)\n    rec = recall_score(ytest,y_preds, average = None)\n    cm = confusion_matrix(ytest,y_preds)\n    print(\"accuracy_score: \", acc)\n    print(\"precision_score\",pre )\n    print(\"recall_score\",rec )\n    \n    return acc,pre,rec,cm","4242430d":"from sklearn.preprocessing import StandardScaler\nscaled = StandardScaler()","b33bf90b":"X_train, X_test,y_train,y_test = train_test_split(X,y, test_size = 0.2 , random_state = 42)","01391b38":"X_train_scaled = scaled.fit_transform(X_train)\nX_test_scaled = scaled.transform(X_test)","fac9d428":"scores = []","fe3237e4":"scores.append(fit_performance2(RandomForestClassifier(),X_train_scaled,y_train,X_test_scaled,y_test))","b9eda0da":"scores.append(fit_performance2(DecisionTreeClassifier(),X_train_scaled,y_train,X_test_scaled,y_test))","a741d1ef":"scores.append(fit_performance2(SVC(),X_train_scaled,y_train,X_test_scaled,y_test))","cf60fd16":"acc_score = [scores[i][0] for i in range(len(scores))]","896c1f2a":"pd.DataFrame(acc_score, index = ['Random Forest', 'Decision Tree', 'Support Vector Machine'],columns = ['Accuracy'])","db2831f4":"plt.bar(x = ['RandomForest','DecisionTree','Svm'], height = acc_score)\nplt.grid()\nplt.show()","c4279b52":"y_test.value_counts()","6e44ed0e":"y_train.value_counts()","3d892425":"df['output'] = y","b7939dce":"df.head()","f9aad846":"plt.plot(df[df['output'] == 5]['Ib'], '.')","f694f67a":"plt.plot(df[df['output'] == 0]['Ia'], '.', label = 'Ia')\nplt.plot(df[df['output'] == 0]['Ib'], '.', label = 'Ib')\nplt.plot(df[df['output'] == 0]['Ic'], '.', label = 'Ic')\nplt.legend()\nplt.show()","50f4960e":"plt.plot(df['Va'])\nplt.plot(df['Vb'])\nplt.plot(df['Vc'])","ab66b3ec":"plt.plot(df[df['output'] == 0]['Ia'],'g')\nplt.plot(df[df['output'] == 1]['Ia'],'b')\nplt.plot(df[df['output'] == 2]['Ia'],'r')\nplt.plot(df[df['output'] == 3]['Ia'],'y')\nplt.plot(df[df['output'] == 4]['Ia'],'k')\nplt.plot(df[df['output'] == 5]['Ia'],'m')","9ae49e1f":"plt.plot(df[df['output'] == 0]['Ib'],'g')\nplt.plot(df[df['output'] == 1]['Ib'],'b')\nplt.plot(df[df['output'] == 2]['Ib'],'r')\nplt.plot(df[df['output'] == 3]['Ib'],'y')\nplt.plot(df[df['output'] == 4]['Ib'],'k')\nplt.plot(df[df['output'] == 5]['Ib'],'m')","cd354067":"plt.plot(df[df['output'] == 0]['Ic'],'g')\nplt.plot(df[df['output'] == 1]['Ic'],'b')\nplt.plot(df[df['output'] == 2]['Ic'],'r')\nplt.plot(df[df['output'] == 3]['Ic'],'y')\nplt.plot(df[df['output'] == 4]['Ic'],'k')\nplt.plot(df[df['output'] == 5]['Ic'],'m')","7943e4ed":"plt.plot(df[df['output'] == 0]['Va'],'g')\nplt.plot(df[df['output'] == 1]['Va'],'b')\nplt.plot(df[df['output'] == 2]['Va'],'r')\nplt.plot(df[df['output'] == 3]['Va'],'y')\nplt.plot(df[df['output'] == 4]['Va'],'k')\nplt.plot(df[df['output'] == 5]['Va'],'m')","1b77fef1":"plt.plot(df[df['output'] == 0]['Va'],'g')\nplt.plot(df[df['output'] == 1]['Va'],'b')\nplt.plot(df[df['output'] == 2]['Va'],'r')\nplt.plot(df[df['output'] == 3]['Va'],'y')\nplt.plot(df[df['output'] == 4]['Va'],'k')\nplt.plot(df[df['output'] == 5]['Va'],'m')","816a8efd":"plt.plot(df[df['output'] == 0]['Vb'],'g')\nplt.plot(df[df['output'] == 1]['Vb'],'b')\nplt.plot(df[df['output'] == 2]['Vb'],'r')\nplt.plot(df[df['output'] == 3]['Vb'],'y')\nplt.plot(df[df['output'] == 4]['Vb'],'k')\nplt.plot(df[df['output'] == 5]['Vb'],'m')","8dc01865":"plt.plot(df[df['output'] == 0]['Vc'],'g')\nplt.plot(df[df['output'] == 1]['Vc'],'b')\nplt.plot(df[df['output'] == 2]['Vc'],'r')\nplt.plot(df[df['output'] == 3]['Vc'],'y')\nplt.plot(df[df['output'] == 4]['Vc'],'k')\nplt.plot(df[df['output'] == 5]['Vc'],'m')","ddc36016":"plt.plot(df[df['output'] == 2]['Ic'],'g')\nplt.plot(df[df['output'] == 2]['Ib'],'r')\nplt.plot(df[df['output'] == 2]['Ia'],'m')","533e9538":"plt.figure(figsize =  (12,8))\nsns.heatmap(df.corr(),annot = True )","e0c1de24":"0 - NO-FAULT\n1 - LG FAULT\n2 - LL FAULT\n3 - LLG FAULT\n4 - LLL FAULT\n5 - LLLG FAULT","f7cb2394":"# 2. Multiclass \nLL\nLLG\nLLLG\nLG","a8fab6f7":"# Fault detection\nBinary classification\nthe classes are:\n0 - No Fault and 1 - Fault. "}}