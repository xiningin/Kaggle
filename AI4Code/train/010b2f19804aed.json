{"cell_type":{"8941a5f0":"code","72110c37":"code","2bb2cc74":"code","93aa5fc7":"code","87dfbc44":"code","a879a72f":"code","ec1c29c2":"code","dada5c9e":"code","8a427bca":"code","3277a2ae":"code","28496a67":"code","cd282421":"code","f3ebb51a":"code","ae17b0f3":"code","d594fa09":"code","ab895ea5":"code","a9f7965c":"code","5fdfdb1b":"code","22875406":"code","b1a2bc54":"code","289075b7":"code","6d3ce9bb":"code","6f6ff0ee":"code","ca4d42ba":"code","cc5cadbc":"markdown","7be14a2a":"markdown","346cd130":"markdown","eda8f182":"markdown","c214dec5":"markdown","59909657":"markdown","b2d8c9b6":"markdown","2bda1d63":"markdown","bb8684db":"markdown","a751e75e":"markdown","50e6805e":"markdown"},"source":{"8941a5f0":"import numpy as np               # linear algebra - vectors and matrices\nimport matplotlib.pyplot as plt  # visualization\nimport matplotlib.cm as cm       # visualization\nimport seaborn as sns            # visualization\n%matplotlib inline\nsns.set()","72110c37":"def get_pertinence_triangle(a,m,b,x, max_degree=None):\n    \"\"\"\n    valores do conjuntos x\n    a - primeiro valor conjunto\n    m - valor mediano do conjunto\n    b - \u00faltimo valor do conjunto\n    x - valor a ser calculado\n    \"\"\"\n    if x <= a or x >= b:\n        return 0\n    \n    if x == m and max_degree != None:\n        return max_degree\n    \n    if x > a and x <= m:\n        return ((x-a)\/(m-a))\n    \n    if x > m and x < b:\n        return ((b-x)\/(b-m))\n","2bb2cc74":"# obter o M do conjunto triangular\ndef get_m(conj):\n    return float((conj[0] + conj[len(conj)-1])\/2)","93aa5fc7":"# conjuntos x crisp\nA = list(range(1, 6))\nB = list(range(3, 8))\nprint('A : ', A)\nprint('B : ', B)","87dfbc44":"# gerando a estrutura pra armazernar o conjunto fyzzy\nclass fuzzy:\n    \n    def __init__(self,size_set):\n        self.x = np.zeros(size_set)\n        self.y = np.zeros(size_set)\n        self.set = np.zeros((size_set,2))\n        self.size = size_set\n        \n    def set_x(self, conjunto):\n        for i in range(self.x.shape[0]):\n            self.x[i] = conjunto[i]\n    \n    def merge(self,verbose=False):\n        \n        for i in range(self.x.shape[0]):\n            self.set[i][0] = self.x[i]\n            self.set[i][1] = self.y[i]\n            \n        if verbose:\n            print(self.set)\n        \n    def get_y(self, x):\n        for i in range(self.x.shape[0]):\n            if x == self.x[i]:\n                return self.y[i]\n        return 0\n    \n    def view_set(self,):\n        print(self.set)\n    \n        \n        ","a879a72f":"# instanciando o conjunto\na_fuzzy = fuzzy(len(A))\nb_fuzzy = fuzzy(len(B))","ec1c29c2":"# obtendo as pertin\u00eancias para os valores de x a adicionando no conjunto a_fuzzy\nfor i in range(len(A)):\n    a_fuzzy.x[i] = A[i]\n    a_fuzzy.y[i] = get_pertinence_triangle(A[0], get_m(A), A[len(A)-1], A[i])\n\nfor i in range(len(B)):\n    b_fuzzy.x[i] = B[i]\n    b_fuzzy.y[i] = get_pertinence_triangle(B[0], get_m(B), B[len(B)-1], B[i])\n\na_fuzzy.merge(True)","dada5c9e":"b_fuzzy.merge(True)","8a427bca":"# fun\u00e7\u00e3o para plotagem dos conjuntos    \ndef plot_sets(conjuntos, labels, title=None, position=None, color_sets=None):\n    \"\"\"\n     - fun\u00e7\u00e3o para plotagem dos conjuntos 2d\n     -- plota os conjuntos em um mesmo plano\n    \"\"\"\n    \n    color = ['--bo','--go', '--ro', '--yo', '--po']\n    facecolors = [cm.jet(x) for x in np.random.rand(20)]\n    \n    fig, ax = plt.subplots(figsize=(8, 5))\n\n    indice = 0\n    for i in conjuntos:\n            plt.plot(i[:,0], i[:,1], color[indice], label=labels[indice])\n            if color_sets:\n                plt.fill_between(i[:,0], i[:,1], facecolors=facecolors[indice], alpha=0.4)\n            indice += 1 \n            \n    if position:\n        legend = ax.legend(loc=position, shadow=True, fontsize='x-large')\n    else:\n        legend = ax.legend(loc='upper left', shadow=True, fontsize='x-large')\n\n    # Put a nicer background color on the legend.\n    legend.get_frame().set_facecolor('#00FFCC')\n    plt.title(title)\n    plt.grid(True)\n","3277a2ae":"\nconjuntos = np.array([a_fuzzy.set,b_fuzzy.set])\nplot_sets(conjuntos, ['A', 'B'], 'Conjuntos Fuzzy A e B')","28496a67":"# fun\u00e7\u00e3o de uniao com operador m\u00e1ximo\ndef intersection_fuzzy(cfa,cfb):\n    \n    chaves = list(set(cfa.x) & set(cfb.x))\n    \n    fuzzy_inter = fuzzy(len(chaves))\n    fuzzy_inter.set_x(chaves)\n    \n    indice = 0\n    for i in chaves:\n        \n        fuzzy_inter.y[indice] = min(cfa.get_y(i), cfb.get_y(i))\n        indice += 1\n    fuzzy_inter.merge()    \n    return fuzzy_inter\n\nfuzzy_inter = intersection_fuzzy(a_fuzzy, b_fuzzy)","cd282421":"fuzzy_inter.merge()\nconjuntos = np.array([a_fuzzy.set, b_fuzzy.set,fuzzy_inter.set])\nplot_sets(conjuntos, ['A', 'B', 'A \u2229 B'], 'Intersec\u00e7\u00e3o entre A e B')","f3ebb51a":"# fun\u00e7\u00e3o de uniao com operador m\u00ednimo\n\ndef union_fuzzy(cfa,cfb):\n    chaves = list(set(cfa.x).union(cfb.x))\n    \n    fuzzy_union = fuzzy(len(chaves))\n    fuzzy_union.set_x(chaves)\n    \n    indice = 0\n    for i in chaves:\n        fuzzy_union.y[indice] = max(cfa.get_y(i), cfb.get_y(i))\n        indice += 1\n    \n    fuzzy_union.merge()\n    return fuzzy_union\n\nfuzzy_union = union_fuzzy(a_fuzzy, b_fuzzy)","ae17b0f3":"fuzzy_union.merge()\nconjuntos = np.array([a_fuzzy.set, b_fuzzy.set,fuzzy_union.set])\nplot_sets(conjuntos, ['A', 'B', 'A U B'], 'Uni\u00e3o entre A e B')","d594fa09":"def complemento_fuzzy(conjunto):\n    complemento = fuzzy(conjunto.size)\n    complemento.set_x(conjunto.x)\n    for i in range(conjunto.size):\n        complemento.y[i] = 1-conjunto.y[i]\n    complemento.merge()\n    return complemento","ab895ea5":"comp_a = complemento_fuzzy(a_fuzzy)\ncomp_b = complemento_fuzzy(b_fuzzy)\ncomp_a.y","a9f7965c":"conjuntos = np.array([a_fuzzy.set, comp_a.set, b_fuzzy.set, comp_b.set])\nplot_sets(conjuntos, ['A', \"'A\", 'B', \"'B\"], 'Complemento de A e B')","5fdfdb1b":"def intersection_fuzzy_produto_algebrico(cfa,cfb):\n    \n    chaves = list(set(cfa.x) & set(cfb.x))\n    \n    fuzzy_pa = fuzzy(len(chaves))\n    fuzzy_pa.set_x(chaves)\n    \n    indice = 0\n    for i in chaves:\n        \n        fuzzy_pa.y[indice] = (cfa.get_y(i) * cfb.get_y(i))\n        indice += 1\n    \n    fuzzy_pa.merge()\n    return fuzzy_pa\n    \nfuzzy_pa = intersection_fuzzy_produto_algebrico(a_fuzzy, b_fuzzy)","22875406":"\nplot_sets(np.array([a_fuzzy.set, b_fuzzy.set, fuzzy_pa.set]),\n                   ['A', 'B', \"PA\"],\n                   'Produto Alg\u00e9brico A e B')","b1a2bc54":"def intersection_fuzzy_diferenca_limitada(cfa,cfb):\n    \n    chaves = list(set(cfa.x) & set(cfb.x))\n    \n    new_fuzzy = fuzzy(len(chaves))\n    new_fuzzy.set_x(chaves)\n    \n    indice = 0\n    for i in chaves:\n        \n        new_fuzzy.y[indice] = max(0, ((cfa.get_y(i) + cfb.get_y(i))-1))\n        indice += 1\n    \n    new_fuzzy.merge()\n    return new_fuzzy\n    \nfuzzy_dl = intersection_fuzzy_diferenca_limitada(a_fuzzy, b_fuzzy)\n\nplot_sets(np.array([a_fuzzy.set, b_fuzzy.set, fuzzy_dl.set]),\n                   ['A', 'B', \"DL\"],\n                   'Diferen\u00e7a Limitada entre A e B')","289075b7":"def intersection_fuzzy_drastica(cfa,cfb):\n    \n    chaves = list(set(cfa.x) & set(cfb.x))\n    \n    new_fuzzy = fuzzy(len(chaves))\n    new_fuzzy.set_x(chaves)\n    \n    indice = 0\n    for i in chaves:\n        \n        if cfa.get_y(i) == 1:\n            new_fuzzy.y[indice] = cfb.get_y(i)\n            \n        elif cfb.get_y(i) == 1:\n            new_fuzzy.y[indice] = cfa.get_y(i)\n        else:\n            new_fuzzy.y[indice] = 0\n        \n        indice += 1\n    \n    new_fuzzy.merge()\n    return new_fuzzy\n    \nfuzzy_cd = intersection_fuzzy_drastica(a_fuzzy, b_fuzzy)\n\nplot_sets(np.array([a_fuzzy.set, b_fuzzy.set, fuzzy_cd.set]),\n                   ['A', 'B', \"DL\"],\n                   'Conjun\u00e7\u00e3o Dr\u00e1stica entre A e B')\n","6d3ce9bb":"def soma_algebrica(x, y):\n    return x + y - (x*y)\n\ndef union_fuzzy_soma_algebrica(cfa,cfb):\n    \n    chaves = list(set(cfa.x).union(cfb.x))\n    \n    new_fuzzy = fuzzy(len(chaves))\n    new_fuzzy.set_x(chaves)\n    \n    indice = 0\n    \n    for i in chaves:\n        \n        if i in cfa.x and i in cfb.x: # se tiverem a mesma chave\n            new_fuzzy.y[indice] = soma_algebrica(cfa.get_y(i), cfb.get_y(i))\n            \n        else:\n            if i in cfa.x:\n                new_fuzzy.y[indice] = cfa.get_y(i)\n            else:\n                new_fuzzy.y[indice] = cfb.get_y(i)\n        indice += 1\n\n    \n    new_fuzzy.merge()\n    return new_fuzzy\n    \nfuzzy_sa = union_fuzzy_soma_algebrica(a_fuzzy, b_fuzzy)\n\nplot_sets(np.array([a_fuzzy.set, b_fuzzy.set, fuzzy_sa.set]),\n                   ['A', 'B', \"SA\"],\n                   'Soma Alg\u00e9brica entre A e B')\n\n\n","6f6ff0ee":"def soma_limitada(x, y):\n    return min(1, (x+y))\n\ndef union_fuzzy_soma_limitada(cfa,cfb):\n    \n    chaves = list(set(cfa.x).union(cfb.x))\n    \n    new_fuzzy = fuzzy(len(chaves))\n    new_fuzzy.set_x(chaves)\n    \n    indice = 0\n    \n    for i in chaves:\n        \n        if i in cfa.x and i in cfb.x: # se tiverem a mesma chave\n            new_fuzzy.y[indice] = soma_limitada(cfa.get_y(i), cfb.get_y(i))\n            \n        else:\n            if i in cfa.x:\n                new_fuzzy.y[indice] = cfa.get_y(i)\n            else:\n                new_fuzzy.y[indice] = cfb.get_y(i)\n        indice += 1\n\n    new_fuzzy.merge()\n    return new_fuzzy\n    \nfuzzy_sl = union_fuzzy_soma_limitada(a_fuzzy, b_fuzzy)\n\nplot_sets(np.array([a_fuzzy.set, b_fuzzy.set, fuzzy_sl.set]),\n                   ['A', 'B', \"SA\"],\n                   'Soma Limitada entre A e B')\n","ca4d42ba":"\ndef soma_drastica(x, y):\n    if x == 0:\n        return y\n    elif y == 0:\n        return x\n    return 1\n\ndef union_fuzzy_soma_soma_drastica(cfa,cfb):\n    \n    chaves = list(set(cfa.x).union(cfb.x))\n    \n    new_fuzzy = fuzzy(len(chaves))\n    new_fuzzy.set_x(chaves)\n    \n    indice = 0\n    \n    for i in chaves:\n        \n        if i in cfa.x and i in cfb.x: # se tiverem a mesma chave\n            new_fuzzy.y[indice] = soma_drastica(cfa.get_y(i), cfb.get_y(i))\n            \n        else:\n            if i in cfa.x:\n                new_fuzzy.y[indice] = cfa.get_y(i)\n            else:\n                new_fuzzy.y[indice] = cfb.get_y(i)\n        indice += 1\n\n    new_fuzzy.merge()\n    return new_fuzzy\n    \nfuzzy_sd = union_fuzzy_soma_soma_drastica(a_fuzzy, b_fuzzy)\n\nplot_sets(np.array([a_fuzzy.set, b_fuzzy.set, fuzzy_sd.set]),\n                   ['A', 'B', \"SD\"],\n                   'Soma Dr\u00e1stica entre A e B')\n","cc5cadbc":"## Opera\u00e7\u00f5es padr\u00e3o\n---\n### Intersec\u00e7\u00e3o\n  * $(A \u2229 B) (x) = min(A(x), B(x))$","7be14a2a":"  * **Intersec\u00e7\u00e3o (produto) - Conjun\u00e7\u00e3o Dr\u00e1stica**\n    * $y\\; se\\; x = 1$\n    * $x\\; se\\; y = 1$\n    * $0$ caso contr\u00e1rio.","346cd130":"## Opera\u00e7\u00f5es Generalizadas\n---\n### Co-normas triangulares (s-normas): uni\u00e3o\n  * **Soma alg\u00e9brica (probabil\u00edstica):**\n     * $x\\; s2\\; y = x + y \u2013 xy$","eda8f182":"###  Uni\u00e3o\n  * $(A U B) (x) = max(A(x), B(x))$","c214dec5":"  * **Soma limitada (Lukasiewicz):**\n     * $x\\; s3\\; y\\; = min(1, x + y)$","59909657":"# Opera\u00e7\u00f5es em Conjuntos Fuzzy\n * **Opera\u00e7\u00f5es padr\u00e3o**\n   * Complemento Fuzzy\n  * Intersec\u00e7\u00e3o Fuzzy\n  * Uni\u00e3o Fuzzy\n * **Opera\u00e7\u00f5es Generalizadas**\n  * T-Normas e intersec\u00e7\u00e3o generalizada\n  * T-conormas e Uni\u00e3o generalizada\n  * Dualidade e leis de De Morgan","b2d8c9b6":"## Visualizando os Conjuntos Fuzzy","2bda1d63":"## Opera\u00e7\u00f5es Generalizadas\n---\n### T-Normas e intersec\u00e7\u00e3o generalizada\n  * **Produto Alg\u00e9brico**\n     * $x t2 y = xy$","bb8684db":"  * **Diferen\u00e7a Limitada - Conjun\u00e7\u00e3o de Lukasiewicz**\n     * $x t3 y = max(0, x + y \u20131)$","a751e75e":"  * **Uni\u00e3o (soma) dr\u00e1stica: x s4 y = :**\n    * $x\\; se\\; y = 0$\n    * $y\\; se\\; x = 0$\n    * $1$ caso contr\u00e1rio.","50e6805e":"###  Complemento\n  * $A\u2019(x) = 1 \u2013 A$"}}