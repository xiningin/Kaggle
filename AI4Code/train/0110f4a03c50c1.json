{"cell_type":{"4d095b83":"code","19524500":"code","0f94ff30":"code","29353ea1":"code","5789e4ed":"code","e0814096":"code","08b0c92a":"code","228dec63":"code","7840cb43":"code","e775cf39":"code","f5803964":"code","462d6e49":"code","480030f5":"code","5699fb38":"code","f1ad6ab5":"code","90e2aaaa":"code","01c3e999":"code","695a9c29":"code","2c2cc548":"code","a9702eda":"code","f573bde3":"code","b6ee86b3":"code","8b5aa1fb":"code","804366b3":"code","a3c6a385":"code","00ff6d0b":"code","f4c769ee":"code","fc16fae8":"code","b64ff8f9":"code","dfba994e":"code","437d8f6f":"code","175143ae":"code","e8744c2e":"code","b4fba277":"code","474224f5":"code","611956ea":"code","2b4fc68e":"code","a906f1c9":"code","99221527":"code","45710495":"code","88c1d0ef":"code","4c4350a4":"code","d76a1402":"code","afd0f531":"code","8de5b535":"code","78603d7e":"code","196a1ddb":"code","acbe0e80":"code","68ebe7e9":"code","68884616":"code","1fa1073d":"code","ed191a15":"code","1467e3f4":"code","1f1b9843":"code","d306f241":"code","fc670d61":"markdown","335fde7f":"markdown","7607ac5b":"markdown","411b8f0f":"markdown","46213634":"markdown","68277de5":"markdown","717dd951":"markdown","2a1dc8f7":"markdown","de5c1c53":"markdown","45cf2f5c":"markdown","8dbb2d73":"markdown","3f635d2e":"markdown","c5be93b8":"markdown","69ec7f54":"markdown","431c191f":"markdown","d43624e8":"markdown","ffffe9c6":"markdown","986e1720":"markdown","0aed6bbb":"markdown","d469038a":"markdown","b3d81151":"markdown","7039cea3":"markdown","1785c974":"markdown","e8067c62":"markdown"},"source":{"4d095b83":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# import sklearn.","19524500":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\",index_col=False) #calling the training data\ntest=pd.read_csv(\"..\/input\/titanic\/test.csv\",index_col=False) #calling the test data \ndataset=[train,test] # merging the train and test data into dataset variable ","0f94ff30":"train.info()","29353ea1":"train.head()","5789e4ed":"train.describe(exclude=[\"O\"])","e0814096":"train.describe(include=[\"O\"])","08b0c92a":"sns.barplot(data=train,x=\"Sex\",y=\"Survived\")\nmen=train[train[\"Sex\"]==\"male\"][\"Sex\"].count()\nsurvived_men=train[(train[\"Sex\"]==\"male\")&(train[\"Survived\"]==1)][\"Sex\"].count()\nwomen=train[train[\"Sex\"]==\"female\"][\"Sex\"].count()\nwomen_survived=train[(train[\"Sex\"]==\"female\")& (train[\"Survived\"]==1)][\"Sex\"].count()","228dec63":"print(\"the ratio of men that are survived\",str(round(survived_men*100\/men,2)))\nprint(\"the ratio of men that are survived\",str(round(women_survived*100\/women,2)))","7840cb43":"plt.hist(train.loc[train[\"Embarked\"].notnull(),\"Embarked\"],bins=3)   \nplt.show()","e775cf39":"sns.barplot(data=train,x=\"Embarked\",y=\"Survived\")\nplt.title(\"Correlation between Embarked and Survived\")\nplt.show()","f5803964":"sns.barplot(data=train,x=\"Pclass\",y=\"Survived\")\nplt.title(\"Correlation between Pclass and Survived\")\nplt.show()","462d6e49":"train[\"Category_feature\"]=pd.qcut(train[\"Fare\"],4) #divide the fare Columns into 4 equal sized bins\ntrain[\"Category_feature\"].value_counts()","480030f5":"for data in dataset:\n    data[\"Fare\"]=data[\"Fare\"].fillna(data[\"Fare\"].median())\n    data.loc[data[\"Fare\"] <= 7.91 , \"Fare\" ]=0\n    data.loc[(data[\"Fare\"] > 7.91) & (data[\"Fare\"] < 14.454),\"Fare\"]=1\n    data.loc[(data[\"Fare\"] > 14.454) & (data[\"Fare\"] <= 31.0),'Fare']=2\n    data.loc[(data[\"Fare\"] > 31.0),\"Fare\"]=3\n    data[\"Fare\"]=data[\"Fare\"].astype(int)","5699fb38":"train[\"Fare\"]=train[\"Fare\"].astype(int)\ntest[\"Fare\"].unique()","f1ad6ab5":"sns.barplot(data=train,x=\"Fare\",y=\"Survived\")\nplt.show()","90e2aaaa":"for data in dataset:\n    avg_age=data[\"Age\"].mean() #calculating the mean value  \n    avg_std=data[\"Age\"].std() #calculating the standard darivation\n    age_null_count=data[\"Age\"].isnull().sum() # finding how many null values are present \n    null_values=np.random.randint(avg_age-avg_std,avg_age+avg_std,size=age_null_count) # by using the random int we initialize the random value in range of mean and standard darivation \n    data[\"Age\"][np.isnan(data[\"Age\"])]=null_values \n    data[\"Age\"]=data[\"Age\"].astype(int)# converting the value in int \n","01c3e999":"train[\"Category_age\"]=pd.qcut(train[\"Age\"],5)","695a9c29":"for data in dataset:\n    data.loc[data[\"Age\"] <= 19.0,\"Age\"]=0    \n    data.loc[(data[\"Age\"] > 19) & (data[\"Age\"] <= 25),\"Age\"]=1\n    data.loc[(data[\"Age\"] > 25) & (data[\"Age\"] <= 31),\"Age\" ]=2\n    data.loc[(data[\"Age\"] > 31) & (data[\"Age\"] <= 40),\"Age\" ]=3\n    data.loc[(data[\"Age\"] > 40) & (data[\"Age\"] <= 80),\"Age\" ]=4","2c2cc548":"sns.barplot(data=train,x=\"Age\",y=\"Survived\")\nplt.title(\"Correlation between the Age and survived\")\nplt.show()","a9702eda":"train[[\"Parch\",\"Survived\"]].groupby('Parch',as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","f573bde3":"train[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","b6ee86b3":"for data in dataset:\n    data[\"Family_size\"]=data[\"SibSp\"] + data[\"Parch\"] + 1\ndataset[0].head()","8b5aa1fb":"for data in dataset:\n    data[\"IsAlone\"]=0\n    data.loc[data[\"Family_size\"]==1,'IsAlone']=1\nsns.heatmap(train.corr(),annot=True)\nplt.show()","804366b3":"train.head()","a3c6a385":"train[\"ticket_type\"]=train[\"Ticket\"].apply(lambda x:x[:3])\ntrain[\"ticket_type\"]=train[\"ticket_type\"].astype(\"category\")\ntrain[\"ticket_type\"]=train[\"ticket_type\"].cat.codes","00ff6d0b":"test[\"ticket_type\"]=test[\"Ticket\"].apply(lambda x:x[:3])\ntest[\"ticket_type\"]=test[\"ticket_type\"].astype(\"category\")\ntest[\"ticket_type\"]=test[\"ticket_type\"].cat.codes","f4c769ee":"for data in dataset:\n    data[\"Embarked\"]=data[\"Embarked\"].fillna(\"S\")","fc16fae8":"train[\"Has_Cabin\"]=train[\"Cabin\"].apply(lambda x:0 if type(x)==float else 1)\ntest[\"Has_Cabin\"]=train[\"Cabin\"].apply(lambda x:0 if type(x)==float else 1)","b64ff8f9":"train.head()","dfba994e":"for data in dataset:\n    data[\"Sex\"]=data[\"Sex\"].map({\"male\":1,\"female\":0})","437d8f6f":"train.head()","175143ae":"import re","e8744c2e":"def title_seacrh(name):\n    title_search=re.search('([A-Za-z]+)\\.',name)\n    if title_search:\n        return title_search.group(1)\n    return \"\"\n","b4fba277":"for data in dataset:\n    data[\"title\"]=data[\"Name\"].apply(title_seacrh)","474224f5":"dataset[0].head()","611956ea":"for data in dataset:\n    data[\"title\"].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],\"Rare\",inplace=True)\n    data[\"title\"].replace({\"Mlle\":\"Miss\",\"Mme\":\"Miss\",\"Ms\":\"Mrs\"},inplace=True)","2b4fc68e":"dataset[0]","a906f1c9":"title_mapping={\"Mr\":1,\"Mrs\":2,\"Miss\":3,\"Master\":4,\"Rare\":5}","99221527":"for data in dataset:\n    data['title']=data[\"title\"].map(title_mapping)","45710495":"dataset[1]","88c1d0ef":"useless_feature=[\"Name\",\"Ticket\",\"Cabin\"]","4c4350a4":"for data in dataset:\n    data.drop(useless_feature,axis=1,inplace=True)","d76a1402":"train.drop([\"PassengerId\",\"Category_feature\",\"Category_age\"],axis=1,inplace=True)\n","afd0f531":"for data in dataset:\n    data[\"Embarked\"]=data[\"Embarked\"].map({\"S\":1,\"Q\":2,\"C\":3})","8de5b535":"dataset[1]","78603d7e":"import xgboost \nfrom sklearn.model_selection import RandomizedSearchCV , GridSearchCV","196a1ddb":"classifer=xgboost.XGBClassifier(\nobjective= 'binary:logistic',\nmax_depth= 4,\ngamma=0.9\n)","acbe0e80":"X=train.drop(\"Survived\",axis=1)","68ebe7e9":"y=train[\"Survived\"].ravel()","68884616":"test1=test.drop(\"PassengerId\",axis=1)","1fa1073d":"classifer.fit(X,y)","ed191a15":"classifer.predict(test1)","1467e3f4":"PassengerId=test[\"PassengerId\"]","1f1b9843":"my_submission=pd.DataFrame({\"PassengerId\":PassengerId,\"Survived\":classifer.predict(test1)})","d306f241":"my_submission.to_csv(\"my_submission.csv\",index=False)","fc670d61":"> # **Describing the Numerical Data**","335fde7f":"**As we see the values of Embarked are mostly fall in S category**","7607ac5b":"**Age feature is divided into 5 equal size bin**","411b8f0f":"> # **Describe the Categorical Data**","46213634":"**Important libraries for data visualization , data analysis and classification**","68277de5":"as we can see the Ticket feature have dublicate values that means there is some sort of pattern in it !!\n","717dd951":"> **Now we will be dropping the useless feature**","2a1dc8f7":"**As we clearly see the Fare is highly correlated to Survived** (*more fare rate have highly chances of survival*)\n","de5c1c53":"**we will see who has Cabin**","45cf2f5c":"# **ML MODEL**","8dbb2d73":"**Handling the missing value**","3f635d2e":"> **NOTE:**\n> *    Parch means -> number of parents \/ children aboard the Titanic\n> *    SibSp means -> Number of Siblings \/ Spouses Aboard","c5be93b8":"> **both SibSp and Parch is related to each other, either he\\she is travelling alone or with Family**    ","69ec7f54":"**handling the missing values is Age feature**","431c191f":"**as we can Sex feature is really important because women have higher ratio of survival**","d43624e8":"**As we know by EDA that female have higher ratio of survival and in the Name feature there are titles in it** *(doing extraction of title from Name column)*","ffffe9c6":" >  >  **DONT FORGET TO UPVOTE THE NOTEBOOK** ","986e1720":"> # **To classify the passenger (whether they survived or not) we have to do the following step for the better understanding**\n\n* Exploring the data \n* Exploratory data Analysis\n* Decision Making(feature extraction and feature selection)\n* Data Cleaning & Missing data handling \n* Preparing the Data\n* Machine learning model","0aed6bbb":"> **converting the Ticket feature into numerical form to identify the pattern in it**","d469038a":"By seeing the info \n**Now we knew some important thing** \n1.  As we can see there are null values in Cabin and Age\n\n2.  Our data have different types values \n\n    * {PassengerId,Survived,Pclass,Age,SibSp,Parch,Fare} -> are numerical\n    \n    * {Name,Sex,Ticket,Cabin,Embarked} -> are categorical\n    \n3. Some feature are unnecessary like \n\n    * {PassengerID -> because it doesnot mean anything\n    \n    * {Name -> it doesnot mean anything untill and unlees there is a title in it \n    \n    * {Ticket -> itself it object dtype but we will convert it to numerical and find the pattern \n    \n    * {Cabin -> most of the values are null (that means they dont have separate cabin )\n","b3d81151":"# **SUBMISSION**","7039cea3":"> # **EDA**","1785c974":"> **if the family_Size is 1 that means a person is travelling alone**","e8067c62":"> *Thus both Pclass and Embarked are correlated to survive*"}}