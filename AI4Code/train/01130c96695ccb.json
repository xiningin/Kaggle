{"cell_type":{"08dc58f5":"code","3655bdaa":"code","b7f164d5":"code","09eb9de8":"code","3164da81":"code","71a98fdb":"code","8f265486":"code","5e059275":"code","af256af3":"code","625fb79b":"code","23ab0b00":"code","e79c1645":"code","acbafd6e":"code","ba8c7bc5":"code","adab96f5":"code","3584ff7f":"code","3dd55d03":"code","03cfec8a":"code","b7ba484b":"code","3bab961d":"code","110640d2":"code","76c9f8e0":"code","964c6a97":"code","8997b187":"code","855f1720":"code","6de55192":"code","5ee8f102":"code","8d2fbd70":"code","5927163e":"code","706b768a":"code","268e451f":"code","0b1f85e4":"code","ac635a56":"code","6bd05c91":"code","f4082e6a":"code","2dc23bb2":"code","0a035bc6":"code","480735b1":"code","3689e400":"code","db60e4e4":"code","60b73863":"code","fb8d1d09":"code","10ea2150":"code","221be34c":"code","18266e15":"code","ed8d14cc":"code","db984aa1":"code","019d3533":"code","78953046":"code","17d23300":"code","e214ae25":"code","4e3c9fdf":"code","0bb6b091":"code","e05f7de1":"code","b7717d44":"code","8e1b0216":"code","155546f8":"code","ac602a24":"markdown","af8d17bf":"markdown","007838e2":"markdown","12a80293":"markdown","35a6daf4":"markdown","bfd01d0f":"markdown","702a317b":"markdown","7594d5c7":"markdown","f5b402df":"markdown","e0f98cb9":"markdown","beef7774":"markdown","6df39f60":"markdown","25eeb6e0":"markdown","57f797c8":"markdown"},"source":{"08dc58f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3655bdaa":"# Data Analysis \nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b7f164d5":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\ntotal = [train_df, test_df]","09eb9de8":"print(train_df.columns.values)","3164da81":"train_df.head()","71a98fdb":"test_df.head()","8f265486":"train_df.tail()","5e059275":"test_df.tail()","af256af3":"train_df.info()","625fb79b":"test_df.info()","23ab0b00":"train_df.describe()","e79c1645":"train_df.describe(include=['O'])","acbafd6e":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived',ascending= False)","ba8c7bc5":"train_df[['Sex','Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Sex',ascending=False)","adab96f5":"train_df[['SibSp','Survived']].groupby([\"SibSp\"], as_index = False).mean().sort_values(by='SibSp', ascending=False)","3584ff7f":"train_df[['Parch', 'Survived']].groupby(['Parch'],as_index=False).mean().sort_values(by='Parch', ascending=False)","3dd55d03":"g1 = sns.FacetGrid(train_df, col='Survived', height=3, aspect=1.2)\ng1.map(plt.hist, 'Age', bins=20)","03cfec8a":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', height=3, aspect=1.5)\ngrid.map(plt.hist, \"Age\", alpha=0.5, bins=20)\ngrid.add_legend();","b7ba484b":"grid = sns.FacetGrid(train_df, row='Embarked', height=3, aspect=1.5)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()","3bab961d":"grid = sns.FacetGrid(train_df, row='Embarked', col='Survived',height=3, aspect=1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha= 0.5, ci = None)\ngrid.add_legend()","110640d2":"print(\"before\", train_df.shape, test_df.shape, total[0].shape, total[1].shape)\n\ntrain_df.drop(['Ticket', 'Cabin'], axis=1, inplace=True)\ntest_df.drop(['Ticket', 'Cabin'], axis=1, inplace=True)\n\ntotal=[train_df, test_df]\n\nprint(\"After\", train_df.shape, test_df.shape, total[0].shape, total[1].shape)","76c9f8e0":"for dataset in total:\n    dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\\.',expand = True)\n    \npd.crosstab(train_df['Title'], train_df['Sex'])","964c6a97":"for dataset in total:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don',\\\n                                                 'Dr', 'Major','Rev','Sir', 'Jonkheer', 'Dona'], \"Rare\")\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms','Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","8997b187":"title_mapping = {\"Mr\":1, \"Miss\":2, \"Mrs\":3, \"Master\":4, \"Rare\":5}\nfor dataset in total:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n    \ntrain_df.head()","855f1720":"train_df = train_df.drop(['Name', 'PassengerId'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)\ntotal = [train_df, test_df]\ntrain_df.shape, test_df.shape","6de55192":"for dataset in total:\n    dataset['Sex'] = dataset['Sex'].map({'female':1, 'male':0}).astype(int)\n\ntrain_df.head()","5ee8f102":"grid = sns.FacetGrid(train_df, row=\"Pclass\", col=\"Sex\",height=3, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=0.6, bins=20)\ngrid.add_legend()","8d2fbd70":"guess_ages=np.zeros((2,3))\nguess_ages","5927163e":"for dataset in total:\n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & \\\n                                  (dataset['Pclass'] == j+1)]['Age'].dropna()\n\n            age_guess = guess_df.median()\n\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            \n    for i in range(0, 2):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                    'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain_df.head()","706b768a":"train_df['Ageband'] = pd.cut(train_df['Age'], 5)\ntrain_df[['Ageband', 'Survived']].groupby(['Ageband'], as_index=False).mean().sort_values(by='Ageband', ascending=True)","268e451f":"for dataset in total:\n    dataset.loc[dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset[\"Age\"] > 16) & (dataset[\"Age\"] <=32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <=48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[dataset['Age'] > 64, 'Age']\n\ntrain_df.head()","0b1f85e4":"train_df = train_df.drop('Ageband', axis = 1)\ntotal = [train_df, test_df]\ntrain_df.head()","ac635a56":"for dataset in total:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n    \ntrain_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index= False).mean().sort_values(by='Survived', ascending=False)","6bd05c91":"for dataset in total:\n    dataset[\"IsAlone\"] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n    \ntrain_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()","f4082e6a":"train_df = train_df.drop(['Parch', 'SibSp','FamilySize'], axis = 1)\ntest_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis = 1)\n\ntotal = [train_df, test_df]\n\ntrain_df.head()","2dc23bb2":"for dataset in total:\n    dataset['Age*Class'] = dataset.Age * dataset.Pclass\n\ntrain_df.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)","0a035bc6":"freq_port = train_df.Embarked.dropna().mode()[0]\nfreq_port","480735b1":"for dataset in total:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n\ntrain_df[['Embarked','Survived']].groupby(['Embarked'],as_index=False).mean().sort_values(by='Survived',ascending=False)","3689e400":"for dataset in total:\n    dataset['Embarked'] =dataset['Embarked'].map({'S':0,'C':1,'Q':2}).astype(int)\n    \ntrain_df.head()","db60e4e4":"test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\n\ntest_df.head()","60b73863":"train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\n\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending= False)","fb8d1d09":"for dataset in total:\n    dataset.loc[dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31.0), 'Fare'] = 2\n    dataset.loc[dataset['Fare'] > 31.0, 'Fare'] = 3\n\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \ntrain_df = train_df.drop(['FareBand'], axis =1)\n\ntotal = [train_df, test_df]\n\ntrain_df.head(10)","10ea2150":"test_df.head(10)","221be34c":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nX = train_df.drop(\"Survived\", axis = 1)\ny = train_df['Survived']\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2)\nX_test = test_df.drop(\"PassengerId\", axis=1)\nX_train.shape, X_valid.shape, X_test.shape, y_train.shape, y_valid.shape","18266e15":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\ny_pred = logreg.predict(X_valid)\nlogreg.fit(X, y)\naccuracy_score(y_pred, y_valid)","ed8d14cc":"coeff_df = pd.DataFrame(X.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","db984aa1":"from sklearn.svm import SVC, LinearSVC\nsvc = SVC()\nsvc.fit(X_train,y_train)\ny_pred = svc.predict(X_valid)\nsvc.fit(X_train, y_train)\naccuracy_score(y_pred, y_valid)","019d3533":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train,y_train)\ny_pred = linear_svc.predict(X_valid)\nlinear_svc.fit(X,y)\naccuracy_score(y_pred, y_valid)","78953046":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 10)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_valid)\nknn.fit(X_train,y_train)\naccuracy_score(y_pred, y_valid)","17d23300":"from sklearn.naive_bayes import GaussianNB\ngaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\ny_pred = gaussian.predict(X_valid)\ngaussian.fit(X,y)\naccuracy_score(y_pred, y_valid)","e214ae25":"from sklearn.linear_model import Perceptron\nperceptron = Perceptron()\nperceptron.fit(X_train,y_train)\ny_pred = perceptron.predict(X_valid)\nperceptron.fit(X,y)\naccuracy_score(y_pred,y_valid)","4e3c9fdf":"from sklearn.linear_model import SGDClassifier\nsgd = SGDClassifier()\nsgd.fit(X_train, y_train)\ny_pred = sgd.predict(X_valid)\nsgd.fit(X,y)\naccuracy_score(y_pred, y_valid)","0bb6b091":"from sklearn.tree import DecisionTreeClassifier\nDTC = DecisionTreeClassifier()\nDTC.fit(X_train,y_train)\ny_pred = DTC.predict(X_valid)\nDTC.fit(X,y)\naccuracy_score(y_pred, y_valid)","e05f7de1":"from sklearn.ensemble import RandomForestClassifier \nRFC = RandomForestClassifier(n_estimators=200)\nRFC.fit(X_train,y_train)\ny_pred = RFC.predict(X_valid)\nRFC.fit(X,y)\naccuracy_score(y_pred, y_valid)","b7717d44":"final_pred = RFC.predict(X_test)\nfinal_pred","8e1b0216":"Submit = pd.DataFrame({'PassengerId':test_df['PassengerId'], 'Survived':final_pred })","155546f8":"Submit.to_csv('submission.csv', index=False)","ac602a24":"## Logistic Regression","af8d17bf":"## Perception","007838e2":"## Random Forest","12a80293":"### LinearSVC","35a6daf4":"# Importing Data","bfd01d0f":"  ## Stochastic Gradient Descent","702a317b":"# Model","7594d5c7":"## Suppport Vector Machine","f5b402df":"## Gaussian Naive Bayes","e0f98cb9":"# Analyze by Visualization","beef7774":"## KNN","6df39f60":"# Submission","25eeb6e0":"# Import Moduls","57f797c8":"## Decision Tree"}}