{"cell_type":{"10dec2b5":"code","2a079a87":"code","0d059064":"code","67b94c24":"code","c322e740":"code","6c4533c0":"code","1a87ef12":"code","58add845":"code","3f077285":"code","18b1d0b7":"code","5bdef5c5":"code","8eb94550":"code","41e048e9":"code","b289bea8":"code","c6f22011":"code","011647c8":"code","dbb7a5af":"code","ca61464c":"code","953a30b9":"code","865d4be0":"code","af19df15":"code","828dacfa":"code","2ad7fca5":"code","e95bd752":"code","13b0cbac":"markdown","0d392635":"markdown","51a8affb":"markdown"},"source":{"10dec2b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a079a87":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nimport tensorflow \n\nfrom tensorflow import keras\nfrom keras.layers import Dense","0d059064":"data=pd.read_csv('..\/input\/eeg-brainwave-dataset-feeling-emotions\/emotions.csv')","67b94c24":"data.head()","c322e740":"data.info()","6c4533c0":"data.isnull().sum().sum()","1a87ef12":"data.shape","58add845":"sample=data.loc[0,'fft_0_b':'fft_749_b']\nplt.figure(figsize=(16,10))\nplt.plot(range(len(sample)), sample)\nplt.title(\"Features fft_0_b through fft_749_b \")\nplt.show()","3f077285":"data['label'].value_counts()","18b1d0b7":"label_mapping={'NEGATIVE':0,'NEUTRAL':1,'POSITIVE':2}","5bdef5c5":"from sklearn.model_selection import train_test_split","8eb94550":"def preprocess_inputs(df):\n    df=df.copy()\n    \n    df['label']=df['label'].replace(label_mapping)\n    y=df['label'].copy()\n    X=df.drop('label',axis=1).copy()\n    \n    X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=123)\n    \n    return X_train,X_test,y_train,y_test\n","41e048e9":"X_train,X_test,y_train,y_test=preprocess_inputs(data)","b289bea8":"X_train.head(3)","c6f22011":"inputs=tf.keras.Input(shape=(X_train.shape[1]))\ninputs","011647c8":"inputs=tf.keras.Input(shape=(X_train.shape[1]))\n\nx=tf.keras.layers.Dense(64,activation='relu')(inputs)\nx=tf.keras.layers.Dense(64,activation='relu')(x)\n\noutputs=tf.keras.layers.Dense(3,activation='softmax')(x)\n\nmodel=tf.keras.Model(inputs=inputs,outputs=outputs)\n\nprint(model.summary())","dbb7a5af":"from sklearn.metrics import confusion_matrix,classification_report","ca61464c":"from sklearn.metrics import confusion_matrix,classification_report\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\nhistory=model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=32,\n    epochs=50,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=5,\n            restore_best_weights=True\n        )\n    ]\n)","953a30b9":"model_acc=model.evaluate(X_test,y_test,verbose=0)[1]\nprint(\"Test Accuracy:{:.3f}\".format(model_acc*100))","865d4be0":"y_pred=np.array(list(map(lambda x: np.argmax(x),model.predict(X_test))))\ncm=confusion_matrix(y_test,y_pred)\nclr=classification_report(y_test,y_pred,target_names=label_mapping.keys())\n\nplt.figure(figsize=(8,8))\nsns.heatmap(cm,annot=True,vmin=0,fmt='g',cbar=False,cmap='Blues')\nplt.xticks(np.arange(3)+0.5, label_mapping.keys())\nplt.yticks(np.arange(3)+0.5, label_mapping.keys())\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Confusion Matrix\")\nplt.show()\nprint(\"Classification report\\n-------------------------\\n\",clr)","af19df15":"inputs=tf.keras.Input(shape=(X_train.shape[1]))\n\nexpand_dims=tf.expand_dims(inputs, axis=2)\ngru=tf.keras.layers.GRU(256,return_sequences=True)(expand_dims)\nflatten=tf.keras.layers.Flatten()(gru)\n\noutputs=tf.keras.layers.Dense(3,activation='softmax')(flatten)\n\nmodel=tf.keras.Model(inputs=inputs,outputs=outputs)\n\nprint(model.summary())","828dacfa":"from sklearn.metrics import confusion_matrix,classification_report\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\nhistory=model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=32,\n    epochs=50,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=5,\n            restore_best_weights=True\n        )\n    ]\n)","2ad7fca5":"model_acc=model.evaluate(X_test,y_test,verbose=0)[1]\nprint(\"Test Accuracy:{:.3f}\".format(model_acc*100))","e95bd752":"y_pred=np.array(list(map(lambda x: np.argmax(x),model.predict(X_test))))\ncm=confusion_matrix(y_test,y_pred)\nclr=classification_report(y_test,y_pred,target_names=label_mapping.keys())\n\nplt.figure(figsize=(8,8))\nsns.heatmap(cm,annot=True,vmin=0,fmt='g',cbar=False,cmap='Blues')\nplt.xticks(np.arange(3)+0.5, label_mapping.keys())\nplt.yticks(np.arange(3)+0.5, label_mapping.keys())\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Confusion Matrix\")\nplt.show()\nprint(\"Classification report\\n-------------------------\\n\",clr)","13b0cbac":"RNN","0d392635":"Modelling.Use tensorflow for RNN","51a8affb":"#preprocessing"}}