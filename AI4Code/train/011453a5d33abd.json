{"cell_type":{"21db933e":"code","b7dbb780":"code","3e8f2148":"code","eaa80dab":"code","6c999042":"code","f6864981":"code","b7dd2d93":"code","b2113e4b":"code","70dc0ac9":"code","dc35d5e3":"code","24dfdd68":"code","3097e21f":"code","3d37fc68":"code","3c76d194":"code","2c85e68a":"code","bff2a9e7":"code","2ba6b897":"code","78f10d45":"code","046e5935":"code","61e01524":"code","20028689":"code","e2caafd4":"code","d4907925":"code","8230cf87":"code","7abdb6db":"code","3d07164e":"code","f8caa63e":"code","c501e818":"markdown"},"source":{"21db933e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7dbb780":"from matplotlib import pyplot as plt\nimport seaborn as sb\n","3e8f2148":"df = pd.read_csv('..\/input\/911calls-historic-data\/911.csv')","eaa80dab":"df.head(20)","6c999042":"#1 Top 10 most common zipcodes\n\ndf['zip'].value_counts().head(10)","f6864981":"#2 10 most number of towns recorded\n\ndf['twp'].value_counts().head(10)","b7dd2d93":"df['title'].unique()","b2113e4b":"df['title'].unique()","70dc0ac9":"#Now we create a reasons column using a lambda function\ndf['Reason'] = df['title'].apply(lambda title: title.split(':')[0])","dc35d5e3":"df.head(10)","24dfdd68":"df['Reason'].value_counts()\n#Here we have seen the common reasons for calling 911","3097e21f":"sb.countplot(x='Reason',data=df)","3d37fc68":"type(df['timeStamp'].iloc[0])\ndf['timeStamp'] = pd.to_datetime(df['timeStamp'])\ndf['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\ndf['Month'] = df['timeStamp'].apply(lambda time: time.month)\ndf['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)","3c76d194":"dp = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\ndf['Day of Week'] = df['Day of Week'].map(dp)","2c85e68a":"sb.countplot(x='Day of Week',data=df,hue='Reason')","bff2a9e7":"#In the above graph the legend is in center, which results in the distortion of graph\nsb.countplot(x='Day of Week',data=df,hue='Reason')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","2ba6b897":"sb.countplot(x='Month',data=df,hue='Reason')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","78f10d45":"#Perform a group by for the missing months\nmonth_m = df.groupby('Month').count()\nmonth_m.head()","046e5935":"month_m['twp'].plot().grid(True)","61e01524":"sb.lmplot(x='Month', y='twp', data = month_m.reset_index())","20028689":"df['Date']=df['timeStamp'].apply(lambda t: t.date())\nplt.figure(figsize = (8,6))\ndf.groupby('Date').count()['twp'].plot()\nplt.tight_layout()\nplt.grid(True)","e2caafd4":"#We will now perform groupby operations and visualise based on the reasons of call\nplt.figure(figsize = (8,6))\ndf[df['Reason']=='Traffic'].groupby('Date').count()['twp'].plot()\nplt.title('Traffic')\nplt.tight_layout()\nplt.grid(True)","d4907925":"plt.figure(figsize = (8,6))\ndf[df['Reason']=='Fire'].groupby('Date').count()['twp'].plot()\nplt.title('Fire')\nplt.tight_layout()\nplt.grid(True)","8230cf87":"plt.figure(figsize = (8,6))\ndf[df['Reason']=='EMS'].groupby('Date').count()['twp'].plot()\nplt.title('EMS')\nplt.tight_layout()\nplt.grid(True)","7abdb6db":"#For heatmaps ourdata should be in a matrix form, so in order to visualise in that manner we need to restructure our data\nhour_day = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()\nhour_day.head()","3d07164e":"plt.figure(figsize=(15,7.5))\nsb.heatmap(hour_day)","f8caa63e":"plt.figure(figsize=(15,7.5))\nsb.clustermap(hour_day)","c501e818":"We have time stamps, and convert them to date time format"}}