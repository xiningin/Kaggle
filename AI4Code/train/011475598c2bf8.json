{"cell_type":{"2c2e9400":"code","b365377a":"code","e6d54699":"code","e454ed57":"code","f13c0b42":"code","22b8b896":"code","e02cf531":"code","1ab5f78c":"code","e33c4c4d":"code","5892a532":"code","7be0e7e6":"code","347ea3d4":"code","ccd9b5f8":"code","699b0557":"code","2dd3783a":"code","4ecf6676":"code","fbb1f4e2":"code","b7037383":"code","682aedcc":"code","18b38346":"code","d974bbe2":"code","85b52790":"code","24886e15":"code","faa40a58":"code","812bc6e4":"code","36f192fe":"code","6c076f4f":"code","d54bcd0b":"code","41c3bce0":"code","036a5166":"code","3d81e263":"markdown","db9baba7":"markdown","70261f07":"markdown"},"source":{"2c2e9400":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b365377a":"import pandas as pd\nimport numpy as np\nimport os\n\nimport tensorflow as tf\nimport cv2\nfrom tensorflow import keras\nfrom tensorflow.keras import layers, Input\nfrom keras.layers import InputLayer, MaxPooling2D, Flatten, Dense, Conv2D, Dropout\nfrom keras.losses import BinaryCrossentropy\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions, ResNet50\nfrom tensorflow.keras.optimizers import Adam, SGD\n\n# \u0644\u062e\u0644\u0637 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nfrom PIL.Image import open\n\nfrom  matplotlib import pyplot as plt\nimport matplotlib.image as mpimg\nimport random\n%matplotlib inline","e6d54699":"# Constants\n#..\/input\/brain-tumor\n#..\/input\/brain-tumor\/Brain Tumor\/Brain Tumor\nIMAGE_DATASET = \"..\/input\/brain-tumor\/Brain Tumor\/Brain Tumor\"\nIMAGE_DATASET_RAW = r\"..\\input\\brain-tumor\\Brain Tumor\\Brain Tumor\"\nWORKING_FOLDER = \"\/kaggle\/working\"\n# \u0627\u0644\u0627\u0628\u0639\u0627\u062f \u0645\u0639 \u0639\u062f\u062f \u0627\u0644\u0645\u062d\u0627\u0648\u0644\u0627\u062a \nIMG_HEIGHT = 224\nIMG_WIDTH = 224\nEPOCHS = 50","e454ed57":"# \u062a\u0644\u0643 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0647 \u062a\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0638\u0647\u0627\u0631 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u0645\u062e\u0632\u0646\u0647 \u0641\u064a \u0627\u0644\u062f\u0627\u062e\u0644 \n# \u0644\u0630\u0627 \u0644\u0627 \u0627\u0646\u0635\u062d\u0643 \u0628\u0637\u0628\u0627\u0639\u0647 \u0627\u0644\u0645\u062e\u0632\u0646 \nfile=os.listdir(IMAGE_DATASET)","f13c0b42":"# Image3202\nplt.figure(figsize=(20,20))\ntest_folder=\"..\/input\/brain-tumor\/Brain Tumor\/Brain Tumor\/Image3202.jpg\" \nimg=mpimg.imread(test_folder)\nprint(img.size)\n","22b8b896":"# We will import the csv file containing the features and the classes of the images\n# \u0647\u0646\u0627 \u0637\u0628\u0627\u0639\u0647 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0630\u064a \u064a\u062d\u062a\u0648\u064a \u0639\u0644\u064a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0639\u0645\u0644 \u0639\u0644\u064a \u0648\u0635\u0641 \u0627\u0644\u0635\u0648\u0631 \n# \u0648\u062a\u062d\u062a\u0648\u064a \u0639\u0644\u064a \u0627\u0644\u0639\u0645\u0648\u062f \u0627\u0644\u0647\u062f\u0641 \u0627\u0644\u0630\u064a \u0646\u0631\u064a\u062f \u0648\u0635\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0647 \ncortex_df = pd.read_csv(\"..\/input\/brain-tumor\/Brain Tumor.csv\")\ncortex_df.head()","e02cf531":"print(cortex_df.shape)","1ab5f78c":"# \u0627\u0644\u0627\u0646 \u0633\u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0638\u0647\u0627\u0631 \u0628\u0639\u0636 \u0627\u0644\u0635\u0648\u0631 \nplt.figure(figsize=(20,20))\n# \u0627\u0644\u0645\u0633\u0627\u0631 \u0627\u0644\u0630\u064a \u064a\u062d\u0645\u0644 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u0645\u0631\u0627\u062f \u0639\u0631\u0636\u0647\u0627 \n# ..\/input\/brain-tumor\/Brain Tumor\/Brain Tumor\n# \u0648\u0647\u0648 \u0646\u0641\u0633 \u0627\u0644\u0645\u0633\u0627\u0631 \u0627\u0644\u0631\u0626\u064a\u0633\u064a \ntest_folder=\"..\/input\/brain-tumor\/Brain Tumor\/Brain Tumor\" \n# \u0647\u0646\u0627 \u0633\u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0639\u0631\u0636 5 \u0635\u0648\u0631 \u0641\u0642\u0637 \nfor i in range(5):\n    # \u0647\u0646\u0627 \u0646\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u0627\u062e\u062a\u064a\u0627\u0631 \u0627\u0644\u0639\u0634\u0648\u0627\u0626\u064a \u0644\u0644\u0635\u0648\u0631 \u0641\u064a \u0643\u0644 \u0645\u0631\u0647 \u0641\u064a \u0627\u0644\u0645\u062d\u0627\u0648\u0644\u0627\u062a \u0627\u0644\u062e\u0645\u0633\u0647 \n    file = random.choice(os.listdir(test_folder))\n    # \u0647\u0646\u0627 \u064a\u062d\u062f\u062b \u062a\u0636\u0645\u064a\u0646 \u0628\u064a\u0646 \u0627\u0644\u0635\u0648\u0631\u0647 \u0627\u0644\u062a\u064a \u0648\u0642\u0639 \u0639\u0644\u064a\u0647\u0627 \u0627\u0644\u0627\u062e\u062a\u064a\u0627\u0631 \u0648\u0628\u064a\u0646 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0631\u0626\u064a\u0633\u064a \u0644\u0647\u0627 \n    image_path= os.path.join(test_folder, file)\n    # \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0642\u0631\u0627\u0621\u0647 \u0627\u0644\u0635\u0648\u0631\u0647 \n    img=mpimg.imread(image_path)\n    # \u0647\u0646\u0627 \u0637\u0631\u064a\u0642\u0647 \u062c\u064a\u062f\u0647 \u0644\u0644\u0639\u0631\u0636\n    ax=plt.subplot(1,5,i+1)\n    # \u0647\u0646\u0627 \u0646\u0645\u0631\u0631 \u0627\u0633\u0645 \u0627\u0644\u0635\u0648\u0631\u0647 \u0644\u0643\u0644 \u0634\u0643\u0644 \u0645\u0646 \u0627\u0644\u0627\u0634\u0643\u0627\u0644 \u0627\u0644\u062a\u064a \u0633\u064a\u062a\u0645 \u0639\u0631\u0636\u0647\u0627 \n    ax.title.set_text(file)\n    # \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0639\u0631\u0636 \u0627\u0644\u0635\u0648\u0631\u0647 \n    plt.imshow(img)\n    # \u0647\u0630\u0627 \u064a\u0639\u0645\u0644 \u0639\u0644\u064a \u0639\u0631\u0636 \u0627\u0644\u0635\u0648\u0631 \u0641\u0642\u0637 \u0648\u0644\u0643\u0646 \u0644\u0645 \u0646\u062d\u062f\u062f \u0646\u0648\u0639 \u062a\u0644\u0643 \u0627\u0644\u0635\u0648\u0631 \u0647\u0644 \u0647\u064a \u0645\u0635\u0627\u0628\u0647 \u0627\u0645 \u063a\u064a\u0631 \u0645\u0635\u0627\u0628\u0647 ","e33c4c4d":"# \u0647\u0646\u0627 \u0646\u0646\u0634\u064a\u0621 \u0627\u0637\u0627\u0631 \u0644\u0644\u0628\u064a\u0627\u0646\u0627\u062a \n# \u062a\u0644\u0643 \u0627\u0644\u062e\u0637\u0648\u0647 \u0647\u064a \u062e\u0637\u0648\u0647 \u0647\u0627\u0645\u0647 \u0645\u0646 \u0627\u062c\u0644 \u0627\u0638\u0647\u0627\u0631 \u0627\u0648 \u062a\u0645\u0631\u064a\u0631 \u0627\u0644\u062a\u0635\u0646\u064a\u0641\u0627\u062a \u0627\u0644\u064a \u0627\u0644\u0635\u0648\u0631 \ndataset_df = pd.DataFrame()\n# \u062f\u0627\u062e\u0644 \u0647\u0630\u0627 \u0627\u0644\u0627\u0637\u0627\u0631 \u0627\u0644\u0630\u064a \u0642\u0645\u0646\u0627 \u0628\u0627\u0646\u0634\u0627\u0621\u0647 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u062f\u0631\u0627\u062c \u0627\u0648 \u0627\u0646\u0634\u0627\u0621 \u0639\u0645\u0648\u062f\u064a\u0646 \u0645\u0646 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a .\n# \u0627\u0644\u0627\u0648\u0644 \u064a\u062d\u0645\u0644 \u0627\u0633\u0645 \u0627\u0644\u0635\u0648\u0631\u0647 \u0645\u0646 \u0631\u0642\u0645 1 \u0627\u0644\u064a 3762 \u0648\u0647\u0648 \u0639\u062f\u062f \u0627\u0644\u0635\u0648\u0631 \u0628\u0627\u0644\u0643\u0627\u0645\u0644 \ndataset_df[\"Image\"] = cortex_df[\"Image\"]\ndataset_df[\"Class\"] = cortex_df[\"Class\"]\n# \u0648\u0646\u0633\u062a\u0639\u062f \u0627\u0644\u064a \u0627\u0644\u062e\u0637\u0648\u0647 \u0627\u0644\u062a\u0627\u0644\u064a\u0647 \n# \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0646\u0634\u0627\u0621 \u0644\u064a\u0633\u062a \u062c\u062f\u064a\u062f\u0647 \u0641\u0627\u0631\u063a\u0647 \u0645\u0646 \u0627\u062c\u0644 \u0627\u0644\u062a\u062e\u0632\u064a\u0646 \npath_list = []\n# ..\/input\/brain-tumor\/Brain Tumor\/Brain Tumor\n# \u0647\u0630\u0627 \u0647\u0648 \u0627\u0644\u0645\u0633\u0627\u0631 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0648\u0627\u0644\u0630\u064a \u064a\u0639\u0648\u062f \u0627\u0644\u064a \u0627\u0644\u0627\u064a\u0645\u062c \u062f\u0627\u062a\u0627\u0633\u064a\u062a\n# \u0641\u064a \u0643\u0644 \u0645\u0631\u0647 \u064a\u062a\u062d\u0642\u0642 \u0628\u0647\u0627 \u0627\u0644\u0644\u0648\u0628 \u0641\u0627\u0646 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0647 \u0627\u0644\u062a\u0627\u0644\u064a\u0647 \u062a\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0644\u0627\u0646\u062a\u0642\u0627\u0644 \u0627\u0644\u064a \u0635\u0648\u0631\u0647 \u062c\u062f\u064a\u062f\u0647 \u0645\u0646 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u0645\u062e\u0632\u0646\u0647 \n# os.listdir(IMAGE_DATASET)\n# \u0648\u0647\u064a \u062a\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0644\u0645\u0631\u0648\u0631 \u0639\u0644\u064a \u0643\u0644 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u0645\u062e\u0632\u0646\u0647 \u0641\u064a \u0627\u0644\u0645\u0633\u0627\u0631 \u0627\u0644\u062e\u0627\u0635 \u0628\u0627\u0644\u0635\u0648\u0631 \nfor img_path in os.listdir(IMAGE_DATASET):\n    # \u0647\u0646\u0627 \u064a\u062d\u062f\u062b \u062a\u0636\u0645\u064a\u0646 \u0644\u0644\u0627\u0645\u062c \u0628\u0627\u062b \u0648\u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0633\u062a\u062e\u0627\u0631\u062c\u0647\u0627 \u0648\u0645\u0646 \u062b\u0645 \u062a\u062e\u0632\u064a\u0646 \u0647\u0630\u0627 \u0627\u0644\u062a\u0636\u0645\u064a\u0646 \u062f\u0627\u062e\u0644 \u0627\u0644\u0644\u064a\u0633\u062a \u0627\u0644\u062a\u064a \u0627\u0646\u0634\u0627\u0646\u0627\u0647\u0627\n    path_list.append( os.path.join(IMAGE_DATASET,img_path))\n# \u0647\u0646\u0627 \u0646\u062d\u0627\u0648\u0644 \u0627\u0644\u0648\u0635\u0648\u0644 \u0627\u0644\u064a \u0627\u0644\u0645\u0633\u0627\u0631 \u0627\u0644\u0631\u0626\u064a\u0633\u064a \u0648\u0627\u0644\u0643\u0627\u0645\u0644 \u0644\u0643\u0644 \u0635\u0648\u0631\u0647 \n# \u0644\u0646\u0628\u062f\u0627 \u0627\u0644\u062a\u0634\u0631\u064a\u062d \u0644\u0647\u0630\u0647 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0647\n# \u0627\u0644\u0627\u0643\u0633 \u0647\u0648 \u0627\u0644\u0645\u0633\u0627\u0631 \u0627\u0648 \u0627\u0644\u062a\u0636\u0645\u064a\u0646 \u0627\u0644\u0630\u064a \u0642\u0645\u0646\u0627 \u0628\u0627\u0646\u0634\u0627\u0621\u0647 \u062f\u0627\u062e\u0644 \u0627\u0644\u0644\u064a\u0633\u062a \u0641\u064a \u0627\u0644\u0644\u0648\u0628 \u0627\u0644\u0633\u0627\u0628\u0642 \u0648\u0647\u0630\u0627 \u0647\u0648 :\n# '..\/input\/brain-tumor\/Brain Tumor\/Brain Tumor\/Image3202.jpg'\n# \u0648\u0647\u0643\u0630\u0627 \u0627\u0644\u0627\u0645\u0631 \u0645\u0639 \u0643\u0644 \u0627\u0644\u0635\u0648\u0631 \n# \u0646\u0627\u062a\u062c \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0647 \u0627\u0644\u062a\u0627\u0644\u064a\u0647 : \u0647\u0648 \u0627\u0644\u062a\u0627\u0644\u064a \n#'Image3202': '..\/input\/brain-tumor\/Brain Tumor\/Brain Tumor\/Image3202.jpg'\n# \u062a\u0644\u0643 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0647 \u062a\u0639\u0645\u0644 \u0639\u0644\u064a \u062a\u0642\u0633\u064a\u0645 \u0627\u0644\u0645\u0633\u0627\u0631 \u0627\u0644\u0630\u064a \u064a\u0645\u0631\u0631 \u0627\u0644\u064a\u0647\u0627 :\n# os.path.basename(x))[0]\n# \u0648\u062a\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0631\u062c\u0627\u0639 \u0627\u0644\u0645\u0643\u0627\u0646 \u0627\u0644\u0627\u0648\u0644 \u0645\u0646 \u0627\u0644\u0632\u0648\u062c \u0627\u0644\u0645\u0631\u062a\u0628 \u0627\u0644\u0630\u064a \u064a\u0646\u062a\u062c\npath_dict = {os.path.splitext(os.path.basename(x))[0]: x for x in path_list}\ndataset_df[\"paths\"] = cortex_df[\"Image\"].map(path_dict.get)\n# \u0647\u0646\u0627 \u0628\u064a\u062a\u0645 \u0639\u0645\u0644\u064a\u0647 \u0627\u0644\u0645\u0627\u062a\u0634\u0646\u062c \u0627\u0648 \u0627\u0644\u062a\u0645\u0631\u064a\u0631 \u0628\u064a\u0646 \u0627\u0644\u0635\u0648\u0631\u0647 \u0648\u0627\u0644\u062a\u0635\u0646\u064a\u0641 \u0627\u0644\u062e\u0627\u0635 \u0628\u0647\u0627 \u0645\u0639 \u0639\u0645\u0644 \u0627\u0639\u0627\u062f\u0647 \u062a\u0639\u064a\u064a\u0646 \u0644\u0644\u062d\u062c\u0645 \u0627\u0644\u062e\u0627\u0635 \u0628\u0627\u0644\u0635\u0648\u0631\u0647\ndataset_df[\"pixels\"] = dataset_df[\"paths\"].map(lambda x:np.asarray(open(x).resize((IMG_HEIGHT,IMG_WIDTH))))\ndataset_df.head(10)","5892a532":"dataset_df.tail()","7be0e7e6":"# \u0647\u0646\u0627 \u062a\u0645 \u0627\u0633\u062a\u062e\u0631\u0627\u062c \u0627\u0644\u0645\u0633\u0627\u0631 \u0627\u0644\u0627\u0633\u0627\u0633\u064a \n# \u0648\u0630\u0644\u0643 \u0639\u0646 \u0637\u0631\u064a\u0642 \u0627\u0644\u062f\u0645\u062c \npath_list[:5]","347ea3d4":"# \u0646\u0627\u062a\u062c \u062a\u0644\u0643 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0647 \u0647\u0648 \u0647\u0630\u0627 \u0627\u0644\u0645\u0633\u0627\u0631\u0627\u062a\n# \u0647\u0630\u0627 \u0627\u0644\u0645\u0633\u0627\u0631 \u064a\u062d\u062a\u0648\u064a \u0639\u0644\u064a \u0627\u0644\u0635\u0648\u0631\u0647 \/ \u0627\u0633\u0645 \u0627\u0644\u0635\u0648\u0631\u0647 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0633\u062a\u062e\u0631\u0627\u062c\u0647\u0627 \u0645\u0646 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0633\u064a \u0627\u0633 \u0641\u064a \u0645\u0631\u062a\u0628\u0637\u0647 \u0628\u0627\u0644\u0631\u0627\u0628\u0637 \u0627\u0644\u0630\u064a \u062a\u0645 \u0627\u0633\u062a\u062e\u0631\u0627\u062c\u0647 \u0645\u0639 \u062f\u0645\u062c \u0627\u0633\u0645 \u0627\u0644\u0635\u0648\u0631\u0647 \n#path_dict\n#{'Image3202': '..\/input\/brain-tumor\/Brain Tumor\/Brain Tumor\/Image3202.jpg',......}","ccd9b5f8":"dataset_df[\"paths\"].head(5)","699b0557":"len(dataset_df)","2dd3783a":"# \u0641\u064a \u062a\u0644\u0643 \u0627\u0644\u0645\u0631\u062d\u0644\u0647 \u062d\u062f\u062b \u062a\u062d\u0648\u064a\u0644 \u0644\u0643\u0644 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u064a \u0645\u0635\u0641\u0648\u0641\u0627\u062a \u0631\u0642\u0645\u064a\u0647 \u0645\u0646 \u0646\u0648\u0639 \u0646\u0627\u0645\u0628\u0627\u064a \n# \u0646\u0633\u062a\u0637\u064a\u0639 \u0627\u0646 \u0646\u0642\u0648\u0644 \u0627\u0646\u0647 \u0641\u064a \u062a\u0644\u0643 \u0627\u0644\u0645\u0631\u062d\u0644\u0647 \u062d\u062f\u062b \u062a\u062d\u0648\u064a\u0644 \u0643\u0627\u0645\u0644 \u0627\u0648 \u0627\u0633\u062a\u0628\u062f\u0644\u0646\u0627 \u0627\u0644\u0639\u0645\u0644 \u0645\u0646 \u0627\u0644\u0635\u0648\u0631\u0647 \u0648\u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u064a \u0627\u0644\u0645\u0644\u0641 \u0641\u0642\u0637 \u0628\u0639\u062f \u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u0633\u0627\u0628\u0642\u0647 \nimage_list = []\nfor i in range(len(dataset_df)):\n    # \u0647\u0646\u0627 \u064a\u062d\u062f\u062b \u062a\u062d\u0648\u064a\u0644 \u0644\u0644\u0628\u0643\u0633\u0644\u0632 \u0627\u0644\u062e\u0627\u0635\u0647 \u0628\u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u064a \u0627\u0644\u0646\u0648\u0639 \u0627\u0644\u0641\u0627\u0635\u0644\u0647 \u0627\u0644\u0639\u0627\u0626\u0645\u0647 \/ \u0627\u0644\u0642\u064a\u0645\u0647 \u0627\u0644\u0639\u0634\u0631\u064a\u0647\n    brain_image = dataset_df[\"pixels\"][i].astype(np.float32)\n    # \u0646\u0642\u0648\u0645 \u0628\u0639\u0645\u0644\u064a\u0647 \u062e\u0641\u0636 \u0644\u0642\u064a\u0645 \u0627\u0644\u0628\u0643\u0633\u0644 \u0627\u0644\u062e\u0627\u0635\u0647 \u0628\u0627\u0644\u0635\u0648\u0631 \n    brain_image \/= 255\n    # \u0627\u0644\u0645\u062e\u0632\u0646 \u0627\u0644\u0630\u064a \u062a\u0645 \u0627\u064a\u062f\u0627\u0639 \u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0627\u062a \u062a\u0644\u0643 \u0641\u064a\u0647 \u0647\u0648 \u0645\u062e\u0632\u0646 \u064a\u062d\u0645\u0644 \u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0627\u062a \u0648\u0644\u0643\u0646\u0647\u0627 \u0639\u0628\u0627\u0631\u0647 \u0639\u0646 \u0627\u0644\u0641\u064a\u062a\u0634\u0631\u0632 \u0641\u0642\u0637 \u0648\u0644\u064a\u0633 \u0627\u0644\u0644\u0627\u0628\u0644 \n    image_list.append(brain_image)\nX = np.array(image_list)\nprint(X.shape)","4ecf6676":"# \u0647\u0646\u0627 \u062a\u0645 \u0627\u0633\u062a\u062e\u0631\u0627\u062c \u0627\u0644\u0644\u0627\u0628\u0644\u0632 \u0645\u0646 \u0627\u0644\u0645\u0641 \ny = np.array(dataset_df.Class)\ny.shape","fbb1f4e2":"# \u0647\u0646\u0627 \u0627\u0644\u0635\u0648\u0631 \u0639\u0644\u064a \u0634\u0643\u0644 \u0645\u0635\u0641\u0648\u0641\u0627\u062a\nprint(X[:1])","b7037383":"# \u0627\u0644\u0639\u0645\u0648\u062f \u0627\u0644\u0647\u062f\u0641 \u0627\u0644\u062e\u0627\u0635 \u0628\u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u0645\u062d\u0648\u0644 \u0644\u0628\u0643\u0633\u0644\u0632 \nprint(y[:5])","682aedcc":"# \u0647\u0646\u0627 \u062a\u0645 \u062a\u0642\u0633\u064a\u0645 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nprint('The shape of the X_train :'+' '+str(X_train.shape))\nprint('The size of the X_train :'+' '+str(X_train.shape[0]))\nprint('The shape of the X_test :'+' '+str(X_test.shape))\nprint('The size of the X_test:'+' '+str(X_test.shape[0]))","18b38346":"# \u0647\u0646\u0627 \u0628\u062f\u0627\u0646\u0627 \u0641\u064a \u0628\u0646\u0627\u0621 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0639\u0646 \u0637\u0631\u064a\u0642 \u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0627\u0644\u0633\u0643\u0648\u0646\u0634\u0644 \u0645\u0648\u062f\u064a\u0644 \n# \u0648\u0644\u0643\u0646 \u0628\u062f\u0627\u0646\u0627 \u0627\u0644\u0627\u0645\u0631 \u0628\u0627\u0644\u062f\u0627\u0644\u0647 \u0627\u0644\u0627\u0633\u0627\u0633\u064a\u0647 \ndef model(input_shape):\n#     res_conv = ResNet50(include_top=False, weights=\"imagenet\", input_tensor=None, input_shape=input_shape, pooling=None)\n    model = Sequential()\n    \n    # \u0627\u0635\u0627\u0641\u0647 \u0627\u0628\u0639\u0627\u062f \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u0645\u0648\u062d\u062f\u0647 \n    model.add(Input(shape=input_shape))\n    \n    # strides :\n    # \u062a\u0645\u062b\u0644 \u0627\u0644\u062e\u0637\u0648\u0647 \u0627\u0644\u062a\u064a \u0633\u064a\u0633\u064a\u0631 \u0628\u0647\u0627 \u0627\u0644\u0641\u0644\u062a\u0631 \u0639\u0644\u064a \u0627\u0644\u0635\u0648\u0631\u0647 \u0627\u0644\u062a\u064a \u064a\u062a\u0645 \u0641\u062d\u0635\u0647\u0627 \n    # padding :\n    # \u062a\u0645\u062b\u0644 \u0646\u0648\u0639 \u0627\u0644\u062d\u0634\u0648 \u0627\u0644\u062e\u0627\u0635 \u0628\u0627\u0644\u0635\u0648\u0631\u0647 \u0648\u0627\u0644\u062d\u0634\u0648 \u0647\u0630\u0627 \u064a\u0633\u0627\u0639\u062f \u0641\u064a \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u0642\u0627\u0637 \u0648\u064a\u0632\u064a\u062f \u0645\u0646 \u062f\u0642\u0647 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \n    # kernel_size :\n    # \u0627\u062e\u062a\u064a\u0627\u0631 \u062d\u062c\u0645 \u0627\u0644\u0646\u0648\u0627\u0647 \u0647\u0648 \u0634\u064a\u0621 \u0627\u0633\u0627\u0633\u064a \u0648\u0645\u0647\u0645 \u062c\u062f\u0627 , \u0648\u0630\u0644\u0643 \u064a\u0631\u062c\u0639 \u0627\u0644\u064a :\n    # \u0627\u0646 \u0643\u0627\u0646\u062a \u0627\u0644\u0635\u0648\u0631 \u0628\u0647\u0627 \u062a\u0641\u0627\u0635\u064a\u0644 \u062f\u0642\u064a\u0642\u0647 \u0641\u0627\u0646 \u062d\u062c\u0645 \u0627\u0644\u0646\u0648\u0627\u0647 \u0627\u0644\u062d\u0627\u0644\u064a \u062c\u064a\u062f \u062c\u062f\u0627 \u0644\u062a\u0644\u0643 \u0627\u0644\u062a\u0641\u0627\u0635\u064a\u0644 \n    # \u0627\u0646 \u0643\u0627\u0646\u062a \u0627\u0644\u0635\u0648\u0631 \u062a\u062d\u062a\u0648\u064a \u0639\u0644\u064a \u0645\u0639\u0627\u0644\u0645 \u0648\u0627\u0636\u062d\u0647 \u0648\u0643\u0628\u064a\u0631\u0647 \u0641\u0627\u0646 \u0632\u064a\u0627\u062f\u0647 \u062d\u062c\u0645 \u0627\u0644\u0646\u0648\u0627\u0647 \u0647\u0648 \u0627\u0645\u0631 \u0644\u0627 \u0628\u0627\u0633 \u0628\u0647 \n    # \u0643\u0644\u0645\u0627 \u0643\u0627\u0646 \u062d\u062c\u0645 \u0627\u0644\u0646\u0648\u0627\u0647 \u0627\u0643\u0628\u0631 \u0643\u0644\u0645\u0627 \u0643\u0627\u0646 \u0641\u0642\u062f\u0627\u0646 \u0627\u0644\u062a\u0641\u0627\u0635\u064a\u0644 \u0627\u0644\u062a\u064a \u0646\u0631\u064a\u062f \u0627\u0633\u062a\u0643\u0634\u0627\u0641\u0647\u0627 \u0627\u0645\u0631\u0627 \u0648\u0627\u0631\u062f\u0627 \n    model.add(Conv2D(16, kernel_size=3, strides=(2, 2), padding=\"same\", activation=\"relu\", kernel_initializer=\"he_normal\"))\n    model.add(Conv2D(16, kernel_size=3, strides=(2, 2), padding=\"same\", activation=\"relu\", kernel_initializer=\"he_normal\"))\n    model.add(MaxPooling2D(pool_size=(2, 2), data_format=\"channels_last\", padding='same'))\n            \n    model.add(Conv2D(32, kernel_size=3, strides=(2, 2), padding=\"same\", activation=\"relu\", kernel_initializer=\"he_normal\"))\n    model.add(Conv2D(32, kernel_size=3, strides=(2, 2), padding=\"same\", activation=\"relu\", kernel_initializer=\"he_normal\"))\n    model.add(MaxPooling2D(pool_size=(2, 2), data_format=\"channels_last\", padding='same'))\n    \n    model.add(Conv2D(64, kernel_size=3, strides=(2, 2), padding=\"same\", activation=\"relu\", kernel_initializer=\"he_normal\"))\n    model.add(Conv2D(64, kernel_size=3, strides=(2, 2), padding=\"same\", activation=\"relu\", kernel_initializer=\"he_normal\"))\n    model.add(MaxPooling2D(pool_size=(2, 2), data_format=\"channels_last\", padding='same'))\n    \n#     model.add(Conv2D(128, kernel_size=3, strides=(2, 2), padding=\"same\", activation=\"relu\", kernel_initializer=\"he_normal\"))\n#     model.add(Conv2D(128, kernel_size=3, strides=(2, 2), padding=\"same\", activation=\"relu\", kernel_initializer=\"he_normal\"))\n#     model.add(MaxPooling2D(pool_size=(2, 2), data_format=\"channels_last\", padding='same'))\n    \n#     model.add(Conv2D(256, kernel_size=3, strides=(2, 2), padding=\"same\", activation=\"relu\", kernel_initializer=\"he_normal\"))\n#     model.add(Conv2D(256, kernel_size=3, strides=(2, 2), padding=\"same\", activation=\"relu\", kernel_initializer=\"he_normal\"))\n#     model.add(MaxPooling2D(pool_size=(2, 2), data_format=\"channels_last\", padding='same'))\n    \n    model.add(Flatten())\n    model.add(Dense(256, activation=\"relu\"))\n    model.add(Dense(128, activation=\"relu\"))\n#     model.add(Dropout(0.4))\n    model.add(Dense(1, activation=\"sigmoid\"))    # Never use sigmoid for binary classification\n    \n    return model","d974bbe2":"model = model(input_shape = (IMG_HEIGHT, IMG_WIDTH, 3))","85b52790":"model.summary()","24886e15":"# optimizer = Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, amsgrad=False, name=\"Adam\",)\n# \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u062a\u0639\u064a\u064a\u0646 \u062f\u0627\u0644\u0647 \u0627\u0644\u0635\u0628\u0637 \n# \u0648\u062a\u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \noptimizer = SGD(learning_rate=0.01)\nloss_fn = BinaryCrossentropy(from_logits=True)\nmodel.compile(optimizer=optimizer, loss=loss_fn, metrics=['accuracy'])","faa40a58":"# Training the model\nhistory = model.fit(x=X_train, y=y_train, epochs=EPOCHS, batch_size=10)","812bc6e4":"# \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u062d\u0641\u0638 \u0627\u0648\u0632\u0627\u0646 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0628\u0627\u0644\u0627\u0633\u0645 \u0627\u0644\u0645\u0634\u0627\u0631 \u0627\u0644\u064a\u0647 \nmodel.save(\"BrainTumorv7\")","36f192fe":"# Creating a zip of the model folder \n# \u0627\u062f\u062e\u0627\u0644 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0641\u064a \u0645\u0644\u0641 \u0645\u0636\u063a\u0648\u0637 \n# \u0628\u0639\u062f \u062a\u0644\u0643 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0647 \u064a\u0645\u0643\u0646\u0643 \u0627\u0644\u0636\u063a\u0637 \u0639\u0644\u064a \u0645\u0644\u0641 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0627\u0644\u0630\u064a \u0633\u064a\u0634\u0627\u0631 \u0627\u0644\u064a\u0647 \u0648\u0628\u0639\u062f\u0647\u0627 \u064a\u0645\u0643\u0646\u0643 \u062a\u0646\u0632\u064a\u0644 \u0627\u0644\u0627\u0648\u0632\u0627\u0646 \n!tar -zcvf BrainTumorv7.tar.gz \/kaggle\/working\/BrainTumorv7","6c076f4f":"loss = history.history[\"loss\"]\nacc = history.history[\"accuracy\"]","d54bcd0b":"epoch = np.arange(EPOCHS)\nplt.plot(epoch, loss)\n# plt.plot(epoch, val_loss)\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('Training Loss')\nplt.legend(['train', 'val'])","41c3bce0":"epoch = np.arange(EPOCHS)\nplt.plot(epoch, acc)\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Training Accuracy');","036a5166":"eval_score = model.evaluate(X_test, y_test)\nprint(\"Test loss:\", eval_score[0])\nprint(\"Test accuracy:\", eval_score[1])","3d81e263":"**The work is not finished yet. Don't worry, we will add the pre-trained neural networks, and we will see the results.\nBecause the test results in that network are fairly good results, but we will work to raise the efficiency of the model.**","db9baba7":"# Calling some important libraries","70261f07":"# work in progress"}}