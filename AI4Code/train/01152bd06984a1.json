{"cell_type":{"f1ea6891":"code","b7d16f40":"code","ac9a2261":"code","ad88aeb1":"code","720928e8":"code","2af39b12":"code","6b402265":"code","09957337":"code","180d4f16":"code","4bc89768":"code","b09f8e0f":"code","8b02edcc":"code","255dda85":"code","1df87bb8":"code","775c995c":"code","8759ae90":"code","a8105bca":"code","9b1cac06":"code","7cbb58d2":"code","23036203":"code","6fa9b5df":"code","e09d28b3":"code","a703aa3d":"code","46fefe78":"code","580cd492":"code","98655df6":"code","f117a405":"code","5c2d044b":"code","9d8707d8":"code","0d918a23":"code","763def52":"code","0d4405e8":"code","7e968181":"code","69a419d8":"code","1a67604f":"code","2c4ab6b6":"code","85ee8b12":"code","56d17c42":"markdown","f10489e4":"markdown","9fae17e3":"markdown","248cb881":"markdown","85dfb9ea":"markdown","7f5d8304":"markdown","0d09a73f":"markdown","0dbcb0fd":"markdown","b7707bf5":"markdown","d99fd498":"markdown","0b88ad0c":"markdown","802e617d":"markdown","24262dd5":"markdown","8f3ca9ea":"markdown","82364e89":"markdown","d59570b8":"markdown","ffa16da2":"markdown","0e03a148":"markdown","b3acc3d2":"markdown","3e430225":"markdown","81182cc4":"markdown","42b9ec2f":"markdown","063b1fbf":"markdown","2efb50e7":"markdown","f82bc7e0":"markdown","c8155828":"markdown","ea8a2350":"markdown","a6a4710b":"markdown","2b1a8961":"markdown","a2d1d193":"markdown","78d66764":"markdown","26904d33":"markdown","f50b0bf4":"markdown","92959bf0":"markdown","9b8691f1":"markdown","b0850f90":"markdown","fd64a1fd":"markdown","eba81b3d":"markdown","0a11d6eb":"markdown","f22c9251":"markdown","08d1bc5e":"markdown"},"source":{"f1ea6891":"from IPython import display\nfrom pathlib import Path\n\nsample_data_directory = Path(\"\/kaggle\/input\/read-your-network-of-friends-in-facebook-examples\/\")\n\n\ndisplay.Image(sample_data_directory.joinpath(\"example graph.png\"))","b7d16f40":"display.Image(sample_data_directory.joinpath(\"only_node.png\"))","ac9a2261":"display.Image(sample_data_directory.joinpath(\"you_and_friends.png\"))","ad88aeb1":"display.Image(sample_data_directory.joinpath(\"you_friends_and_mutual_connections.png\"))","720928e8":"display.Image(sample_data_directory.joinpath(\"friends_and_mutual_connections.png\"))","2af39b12":"from selenium import webdriver\nfrom webdriver_manager.chrome import ChromeDriverManager\n\ndriver = webdriver.Chrome()","6b402265":"driver = webdriver.Chrome(\"path\/to\/chromedriver.exe\")","09957337":"from webdriver_manager.chrome import ChromeDriverManager\n\ndriver = webdriver.Chrome(ChromeDriverManager().install())","180d4f16":"display.Image(sample_data_directory.joinpath(\"empty_chrome.PNG\"))","4bc89768":"driver.get(\"https:\/\/www.facebook.com\/\")","b09f8e0f":"display.Image(sample_data_directory.joinpath(\"facebook_cookies.PNG\"))","8b02edcc":"from selenium.webdriver.support.wait import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.common.by import By\n\naccept_cookies_button = WebDriverWait(driver, 10).until(\n    EC.element_to_be_clickable(\n        (By.CSS_SELECTOR, \"button[data-testid='cookie-policy-dialog-accept-button']\")\n    )\n)\n\naccept_cookies_button.click()","255dda85":"user_css_selector = \"input[name='email']\"\npassword_css_selector = \"input[name='pass']\"\n\nusername_input = WebDriverWait(driver, 10).until(\n    EC.element_to_be_clickable((By.CSS_SELECTOR, user_css_selector))\n)\npassword_input = WebDriverWait(driver, 10).until(\n    EC.element_to_be_clickable((By.CSS_SELECTOR, password_css_selector))\n)\n\nusername_input.clear()\nusername_input.send_keys(\"myuser@blablabla.com\")\npassword_input.clear()\npassword_input.send_keys(\"myPassword1232345345\")","1df87bb8":"from dotenv import dotenv_values\n\nconfig = dotenv_values(\".env\")\n\nusername_input.clear()\nusername_input.send_keys(config[\"user\"])\npassword_input.clear()\npassword_input.send_keys(config[\"password\"])","775c995c":"display.Image(sample_data_directory.joinpath(\"login_page.PNG\"))","8759ae90":"WebDriverWait(driver, 2).until(\n    EC.element_to_be_clickable((By.CSS_SELECTOR, \"button[type='submit']\"))\n).click()","a8105bca":"import time\n\ntime.sleep(2)\ndriver.get(\"https:\/\/www.facebook.com\/friends\/list\")","9b1cac06":"display.Image(sample_data_directory.joinpath(\"network_panel.PNG\"))","7cbb58d2":"import requests\n\nsession = requests.session()\nsession.cookies.update({cookie[\"name\"]: cookie[\"value\"] for cookie in driver.get_cookies()})","23036203":"import json\nimport re\n\npattern = r'\\[\"DTSGInitData\",\\[\\],{\"token\":\"\\S+\",\"async_get_token\":\"\\S+?\"},\\d+\\]'\nmatch = re.search(pattern, driver.page_source)\nfb_dtsg_token = json.loads(match.group())[2][\"token\"]","6fa9b5df":"import urllib\n\nurl = 'https:\/\/www.facebook.com\/api\/graphql\/'\n\nheaders = {\n    \"accept\": \"*\/*\",\n    \"accept-language\": \"es-ES,es;q=0.9\",\n    \"content-type\": \"application\/x-www-form-urlencoded\",\n    \"sec-ch-ua\": \"\\\" Not;A Brand\\\";v=\\\"99\\\", \\\"Google Chrome\\\";v=\\\"91\\\", \\\"Chromium\\\";v=\\\"91\\\"\",\n    \"sec-ch-ua-mobile\": \"?0\",\n    \"sec-fetch-dest\": \"empty\",\n    \"sec-fetch-mode\": \"cors\",\n    \"sec-fetch-site\": \"same-origin\",\n    \"x-fb-friendly-name\": \"FriendingCometFriendsListPaginationQuery\",\n    \"referrer\": \"https:\/\/www.facebook.com\/friends\/list\",\n    \"referrerPolicy\": \"strict-origin-when-cross-origin\",\n}\n\nresponse = session.post(\n    url,\n    headers=headers,\n    data=urllib.parse.urlencode(\n        {\n            \"fb_dtsg\": fb_dtsg_token,\n            \"fb_api_req_friendly_name\": \"FriendingCometFriendsListPaginationQuery\",\n            \"variables\": json.dumps(\n                {\n                    \"count\": 30,\n                    \"cursor\": None,\n                    \"scale\": 1,\n                }\n            ).replace(\" \", \"\"),\n            \"doc_id\": 4268740419836267,\n        }\n    )\n)","e09d28b3":"response_dict = json.loads(response.content)\nfriend_objects = response_dict[\"data\"][\"viewer\"][\"all_friends\"][\"edges\"]\n\nfriends = [\n    dict(\n        user_id=str(friend[\"node\"][\"id\"]),\n        name=friend['node']['name'],\n        link=friend['node']['url'],\n        gender=friend['node']['gender']\n    )\n    for friend in friend_objects\n    if friend[\"node\"][\"__typename\"] == \"User\"\n]\n\nprint(f\"Number of friends: {len(friends)}\")","a703aa3d":"page_info = response_dict[\"data\"][\"viewer\"][\"all_friends\"][\"page_info\"]","46fefe78":"response = session.post(\n    url,\n    headers=headers,\n    data=urllib.parse.urlencode(\n        {\n            \"fb_dtsg\": fb_dtsg_token,\n            \"fb_api_req_friendly_name\": \"FriendingCometFriendsListPaginationQuery\",\n            \"variables\": json.dumps(\n                {\n                    \"count\": 30,\n                    \"cursor\": page_info[\"end_cursor\"],\n                    \"scale\": 1,\n                }\n            ).replace(\" \", \"\"),\n            \"doc_id\": 4268740419836267,\n        }\n    )\n)\n\nresponse_dict = json.loads(response.content)\nfriend_objects = response_dict[\"data\"][\"viewer\"][\"all_friends\"][\"edges\"]\n\nfriends += [\n    dict(\n        user_id=str(friend[\"node\"][\"id\"]),\n        name=friend['node']['name'],\n        link=friend['node']['url'],\n        gender=friend['node']['gender']\n    )\n    for friend in friend_objects\n    if friend[\"node\"][\"__typename\"] == \"User\"\n]\n\nprint(f\"Number of friends: {len(friends)}\")","580cd492":"page_info = dict(has_next_page=True, end_cursor=None)\n\nurl = 'https:\/\/www.facebook.com\/api\/graphql\/'\n\nheaders = {\n    \"accept\": \"*\/*\",\n    \"accept-language\": \"es-ES,es;q=0.9\",\n    \"content-type\": \"application\/x-www-form-urlencoded\",\n    \"sec-ch-ua\": \"\\\" Not;A Brand\\\";v=\\\"99\\\", \\\"Google Chrome\\\";v=\\\"91\\\", \\\"Chromium\\\";v=\\\"91\\\"\",\n    \"sec-ch-ua-mobile\": \"?0\",\n    \"sec-fetch-dest\": \"empty\",\n    \"sec-fetch-mode\": \"cors\",\n    \"sec-fetch-site\": \"same-origin\",\n    \"x-fb-friendly-name\": \"FriendingCometFriendsListPaginationQuery\",\n    \"referrer\": \"https:\/\/www.facebook.com\/friends\/list\",\n    \"referrerPolicy\": \"strict-origin-when-cross-origin\",\n}\n\nfriends = []\n\nwhile page_info[\"has_next_page\"]:\n    response = session.post(\n        url,\n        headers=headers,\n        data=urllib.parse.urlencode(\n            {\n                \"fb_dtsg\": fb_dtsg_token,\n                \"fb_api_req_friendly_name\": \"FriendingCometFriendsListPaginationQuery\",\n                \"variables\": json.dumps(\n                    {\n                        \"count\": 30,\n                        \"cursor\": page_info[\"end_cursor\"],\n                        \"scale\": 1,\n                    }\n                ).replace(\" \", \"\"),\n                \"doc_id\": 4268740419836267,\n            }\n        )\n    )\n    \n    response_dict = json.loads(response.content)\n    friend_objects = response_dict[\"data\"][\"viewer\"][\"all_friends\"][\"edges\"]\n\n    friends += [\n        dict(\n            user_id=str(friend[\"node\"][\"id\"]),\n            name=friend['node']['name'],\n            link=friend['node']['url'],\n            gender=friend['node']['gender']\n        )\n        for friend in friend_objects\n        if friend[\"node\"][\"__typename\"] == \"User\"\n    ]\n    \n    page_info = response_dict[\"data\"][\"viewer\"][\"all_friends\"][\"page_info\"]\n    \nprint(f\"Number of friends: {len(friends)}\")","98655df6":"friend = friends[0]\n\nprofile_link = friend[\"link\"]\n\nurl_parsed = urllib.parse.urlparse(profile_link)\n\nif url_parsed.path == \"\/profile.php\":\n    mutual_friends_link =  f\"{profile_link}&sk=friends_mutual\"\nelse:\n    mutual_friends_link = f\"{profile_link}\/friends_mutual\"\n    \ndriver.get(mutual_friends_link)\ntime.sleep(1.5)","f117a405":"display.Image(sample_data_directory.joinpath(\"loading_friends.png\"))","5c2d044b":"from selenium.webdriver.common.keys import Keys\n\nloading_mutual_friends_panel_class = \"lzcic4wl j83agx80 btwxx1t3 lhclo0ds i1fnvgqd\"\nloading_mutual_friends_panel_selector = f\"div[class='{loading_mutual_friends_panel_class}'][data-visualcompletion='loading-state']\"\n\nloading_element = driver.find_elements_by_css_selector(\n    loading_mutual_friends_panel_selector\n)\n\nwhile len(loading_element) > 0:\n    driver.find_element_by_xpath('\/\/body').send_keys(Keys.END)\n    time.sleep(0.5)\n    loading_element = driver.find_elements_by_css_selector(\n        loading_mutual_friends_panel_selector\n    )","9d8707d8":"display.Image(sample_data_directory.joinpath(\"mutual_friends_panel.png\"))","0d918a23":"mutual_friends_panel_selector = \"div[data-pagelet='ProfileAppSection_0']\"\n\nmutual_friends_pannel = driver.find_element_by_css_selector(\n    mutual_friends_panel_selector\n)","763def52":"display.Image(sample_data_directory.joinpath(\"mutual_friend_link.png\"))","0d4405e8":"mutual_friend_link_class = (\n    \"oajrlxb2 g5ia77u1 qu0x051f esr5mh6w e9989ue4 r7d6kgcz rq0escxv\"\n    \" nhd2j8a9 nc684nl6 p7hjln8o kvgmc6g5 cxmmr5t8 oygrvhab hcukyx3x\"\n    \" jb3vyjys rz4wbd8a qt6c0cv9 a8nywdso i1ao9s8h esuyzwwr f1sip0of lzcic4wl gmql0nx0 gpro0wi8\"\n)\n\nmutual_friend_link_selector = f\"a[class='{mutual_friend_link_class}']\"\n\nmutual_friend_links = mutual_friends_pannel.find_elements_by_css_selector(\n    mutual_friend_link_selector\n)\n\nprint(f\"Number of mutual friends with {friend['name']}: {len(mutual_friend_links)}\")","7e968181":"mutual_friends = []\nfor link in mutual_friend_links:\n    name = link.text\n    link = link.get_attribute(\"href\")\n    mutual_friends.append(\n        dict(\n            name=name,\n            link=link\n        )\n    )","69a419d8":"def get_friend_by_link(link):\n    for friend in friends:\n        if friend[\"link\"] == link:\n            return friend\n        \n    return None\n\n\nmutual_friends = []\nfor link in mutual_friend_links:\n    name = link.text\n    link = link.get_attribute(\"href\")\n    \n    friend = get_friend_by_link(link)\n    user_id = friend[\"user_id\"]\n    gender = friend[\"gender\"]\n    \n    mutual_friends.append(\n        dict(\n            user_id = user_id,\n            name=name,\n            link=link,\n            gender = gender,\n        )\n    )","1a67604f":"loading_mutual_friends_panel_class = \"lzcic4wl j83agx80 btwxx1t3 lhclo0ds i1fnvgqd\"\nloading_mutual_friends_panel_selector = f\"div[class='{loading_mutual_friends_panel_class}'][data-visualcompletion='loading-state']\"\nmutual_friends_panel_selector = \"div[data-pagelet='ProfileAppSection_0']\"\nmutual_friend_link_class = (\n    \"oajrlxb2 g5ia77u1 qu0x051f esr5mh6w e9989ue4 r7d6kgcz rq0escxv\"\n    \" nhd2j8a9 nc684nl6 p7hjln8o kvgmc6g5 cxmmr5t8 oygrvhab hcukyx3x\"\n    \" jb3vyjys rz4wbd8a qt6c0cv9 a8nywdso i1ao9s8h esuyzwwr f1sip0of lzcic4wl gmql0nx0 gpro0wi8\"\n)\nmutual_friend_link_selector = f\"a[class='{mutual_friend_link_class}']\"\n\n\ndef visit_mutual_friends_page(friend):\n    profile_link = friend[\"link\"]\n    url_parsed = urllib.parse.urlparse(profile_link)\n\n    if url_parsed.path == \"\/profile.php\":\n        mutual_friends_link =  f\"{profile_link}&sk=friends_mutual\"\n    else:\n        mutual_friends_link = f\"{profile_link}\/friends_mutual\"\n\n    driver.get(mutual_friends_link)\n    time.sleep(1.5)\n    \n    \ndef wait_for_every_friend_to_load():\n    loading_element = driver.find_elements_by_css_selector(\n        loading_mutual_friends_panel_selector\n    )\n\n    while len(loading_element) > 0:\n        driver.find_element_by_xpath('\/\/body').send_keys(Keys.END)\n        time.sleep(0.5)\n        loading_element = driver.find_elements_by_css_selector(\n            loading_mutual_friends_panel_selector\n        )\n\ndef get_friend_by_link(link):\n    for friend in friends:\n        if friend[\"link\"] == link:\n            return friend\n        \n    return None\n\n\nmutual_friends_all = {}\nnum_friends = len(friends)\nfor i, friend in enumerate(friends, start=1):\n    print(f\"Reading mutual friends with {friend['name']}. ({i} of {num_friends})\")\n    \n    visit_mutual_friends_page(friend)\n\n    wait_for_every_friend_to_load()\n    \n    mutual_friends_pannel = driver.find_element_by_css_selector(\n        mutual_friends_panel_selector\n    )\n    \n    mutual_friend_links = mutual_friends_pannel.find_elements_by_css_selector(\n        mutual_friend_link_selector\n    )\n    \n    mutual_friends = []\n    for link in mutual_friend_links:\n        link = link.get_attribute(\"href\")\n\n        friend = get_friend_by_link(link)\n\n        mutual_friends.append(\n            dict(\n                user_id=friend[\"user_id\"],\n                name=friend[\"name\"],\n                link=link,\n                gender=friend[\"gender\"],\n            )\n        )\n    \n    mutual_friends_all[friend[\"user_id\"]] = mutual_friends","2c4ab6b6":"with open(\"my_friends_network\", \"w\") as outfile:\n    json.dump(\n        dict(\n            friend_list=friends,\n            mutual_friends=mutual_friends_all,\n        ),\n        outfile\n    )","85ee8b12":"display.Image(sample_data_directory.joinpath(\"fluid_communities.png\"))","56d17c42":"We did it!!!!! \ud83e\udd73\ud83e\udd73\ud83e\udd73\n\nNow we can use it to visualize the network in different ways, even finding different clusters of users like in this image:","f10489e4":"And what do we do with this? When sending a new request, if it is identical to the previous one, the backend will send us the same information. We must tell it that we want the next sequence of friends to start with the user with cursor equal to the `end_cursor` value we got.","9fae17e3":"Besides that, Facebook also tells you what mutual friends you have in common with each of your friends, so you know if they are friends between them. For example, you can know that your mom and dad are friends (at least in Facebook, if they don't stand each other in real life is not Facebook's fault... it's yours... just joking, let's go back to our task).","248cb881":"What else do you know? You know your friends. They are also nodes of the graph\/network. You know you are friends with them, so there are edges\/connections between you and them.","85dfb9ea":"Each of the mutual friends will appear in his own \"card\", and his or her name is a `<a>` element:","7f5d8304":"Now we can be sure that all mutual friends have been loaded. The remaining part is to just read them.\nFirst, find the panel with mutual friends.","0d09a73f":"When we execute any of the three options mentioned above (I personally, prefer the last one), a Chrome window will appear You might get a slightly different view, and probably the text you will see will be in your language. I am Spanish, so I see text in Spanish.","0dbcb0fd":"Or, if you have your user and password saved in a `.env` file, which I recommend, you can use `dotenv` to load them:","b7707bf5":"Two things to mention. One, don't worry for the fields you don't know what they mean. Just set them as I do. One of them you must pay attention is the `doc_id`. This is a number present in the request data when you inspect it with the Chrome Developer Tools. As before, I am not going to pretend what it is used for or why is necessary. Just include it. Otherwise, this will not work.\n\nI think it is a number that identifies the kind of data you are asking for. I have observed that this number changes very often but, as long as you used someone you observed, it will work. At least, it has worked for me. This means there are probably multiple valid doc_ids, which is good news. The one above is the one that works for me. I don't know if they are universal or must be customized for each user.","d99fd498":"The element\/node number 6 is connected to the element\/node number 4, and this is connected to elements 5 and 3, and so on.\n\nGraphs can also be used to model social networks, this is, networks of people. If each of the nodes is a person, and each of the edges represent whether they are friends, then we can model a friendship network with a graph and visualize it with circles and lines as above.\n\nThat's what we are going to do. But, with what social network are we going to do it? Well, we are going to use your own Facebook network.\n\n> What do you mean?\n\nFacebook is a huge social network. You can't know the structure of the whole Facebook network. There are thousands of millions of users. You don't have access to it and don't have the computation resources to process all that information. However, you can access a subset of that network. How?\n\nYou don't have access to all the information, but you have access to some. First of all, you are in Facebook (I assume, otherwise this article will not make much sense to you). So, you know that that you are a node of the network.","0b88ad0c":"Now let's continue. We got an http response with our friends\u2019 data. Let's parse it to a Python dictionary:","802e617d":"This was not easy, but we did it. Save it before your laptop runs out of battery!","24262dd5":"Good! You pressed your first button! Congratulations. Let's keep moving.\n\nNow we can fill the login fields with our user and password.","8f3ca9ea":"We will get to a screen like:","82364e89":"# Get the mutual friends of all your friends\n\nThis is the most tedious part, sorry. But now you are already here, don't give up, you will be satisfied when you get your results.\n\nWhat we are going to do is to get the edges of the network (the lines that connect the circles). And we are going to do it in the most simple and primitive way I can think of. We will just visit, one by one, each of your friends' profiles, go to the mutual friends\u2019 section, scroll down until all of them have appeared, and finally read them and save them.\n\n> Why not just use the GraphQL API again?\n\nThat is a fair question. The answer is that I have tried, and I was successful at it (in just a few seconds I had all the information downloaded), but Facebook will know that you are having a suspicious behavior and will block some of the functionalities of your account for at least a few hours, which is very inconvenient. But do not complain. This policy makes a lot of sense, since Facebook does not know if it is you doing some web scraping practice with Python, or a malicious software using your browser without your consent. So it is actually good news that Facebook protects our data in this way.\n\nAnyway, the workaround I finally used was really pretending we are a normal user visiting his friends' profiles. Until now I haven't had my account blocked.\n\nLet's start from the simple steps and then put everything together. What is the first thing we need to do? Go to our friend's profile. For that, we need the URL of that page. That is tricky, because there are two types of URLs when it comes to user profiles.\n\nSome of them, which I guess are old, have this form (the id is an example that does not exist):\n```\nhttps:\/\/www.facebook.com\/profile.php?id=123456789014389713490753713\n```\n\nBut most of them have this form:\n```\nhttps:\/\/www.facebook.com\/barack.obama.or.something\n```\n\nDepending on which of them we have, the mutual friends page has a slightly different URL. In the first case, it is a query parameter. In the second case, it is part of the path. Let's take as an example our first friend:\n","d59570b8":"It is asking us to accept cookies because we are not in our usual Chrome instance where we are already logged in and we have access to all cookies. This is a new session, and no user is logged in so, from the point of view of Facebook, we are an unknown user.\n\nTo accept the cookies, we must find the \"Accept all\" button and then click on it, but not with the mouse, but with code.\n\nBut as the page does not load instantly, we must tell Selenium to wait some seconds until the button is loaded, i.e., until there is present in the html code.\n\nWe will use a [CSS selector](https:\/\/www.w3schools.com\/cssref\/css_selectors.asp) in order to find the button, and the same approach will be used throughout the rest of the article. To see what CSS selector would find each button or any other element, you can use some Chrome extension or just open the Chrome Developer Tools (Ctrl + Shift + I) and explore the html code of the page.","ffa16da2":"In case you placed it in other folder, you can also provide the path:","0e03a148":"Goooood! We are almost there.\n\nWe know have a problem. Well, it is just a personal preference. I want to use the `user_id` as the unique identifier of each person. I could work with the profile link `link`, which is probably unique, but I just prefer the `user_id`.\n\nIt is not provided directly in the link, but we can get it from our list of friends. So, we are going to change previous loop to:\n","b3acc3d2":"# Read list of friends","3e430225":"We are logged in!!! Doesn't it feel powerful.\n\nBut let's not celebrate so early. Let's continue.\nWhat do we want to do now? We want to get our list of friends. Then we must go to the corresponding page. But first, wait a few seconds so Facebook page can load properly.","81182cc4":"The `fb_dtsg` token can be found by finding a pattern in the html source of the friend list page:","42b9ec2f":"Now, just click on the login button. Can you guess how to do it from the example above?","063b1fbf":"Each of the links has two pieces of useful information. On the one hand there is the text, which is the name of the mutual friend. The other is the URL to which it redirects, which is his or her profile link.","2efb50e7":"So, you can know your Facebook Network! It's not the whole network, but it is a subset of the whole network. It is indeed the subset you are likely most interested in.\n\nHowever, this network has a piece of information we are not really interested because it is redundant. You already know you are friends with all the rest of nodes. So, you as a node and all the edges between you and the rest of nodes is just noise. If we remove them, it leaves us with a network that only contains new information.","f82bc7e0":"Now we get into turbulent waters. We want to get the list of all our friends. There are two approaches here. One, is to manually scroll down all the friend\u2019s panel. The other is to make use of the GraphQL API to do it more efficiently and in a more elegant manner. I have chosen the second way since I find it more interesting.\n\nThe idea is this. When you scroll down through the friends panel, what is happening behind is that your browser is sending http requests to the server asking for the new batch of friends (the next 10 friends that will be visible on the screen) information in JSON format.\n\nSo, instead of doing the scroll, we will just emulate the same http requests, which uses [GraphQL](https:\/\/graphql.org\/). You don't need to know what GraphQL is, don't worry. I don't know much about it either. If you don't want to invest time researching for it, just think it is a set of rules for sharing information between the backend and frontend. It is sort of an improved way of designing web APIs.\n\nThe library we are going to use to make the http requests is [requests](https:\/\/docs.python-requests.org\/en\/master\/). All I did to create the requests is to use the Chrome Developer Tools (Network Tab) to inspect what requests have been exchanged, and see what headers and body use the ones sent to the `graphql\/` endpoint:\n","c8155828":"And this is the network we are interested in.\n\nIn this article I am going to show you how you can get the necessary information to build this graph. That information is, on the one hand, your list of friends and, on the other, the connections between them. And we are going to do this by scraping Facebooks web page, i.e., by getting the information from the html code we download to our browser every time we log in.\n\nThe main tool we are going to use is [Selenium](https:\/\/www.selenium.dev\/), a powerful Python library for this sort of projects.\n\nWhen we get all this information, I will teach you how to visualize that graph in the next article: [Organize your wedding with social network analysis in Python](https:\/\/www.listeningtothedata.com\/posts\/organize-your-wedding-with-social-network-analysis-in-python\/) (or you can go to the [Kaggle notebook](https:\/\/www.kaggle.com\/rubchume\/organize-your-wedding-with-social-network-analysis) version)\n\nIf you only want to do it but are not interested in learning how, you can also download a web app I developed using Django that does all this. Download it from the GitHub [repository](https:\/\/github.com\/rubchume\/FacebookFriendNetworkAnalyzer) and follow the instructions in the `Readme.md` file.\n\nLet's start!!!\n\n<b>Important note<\/b>\n\nFacebook changes its web design very often.\nThis means that the solution I present here might not work at the time you read this article.\n\nBut don't be sad. The process I present here is actually useful, but the specific buttons or `<div>` elements you must find might be different, so you should adapt the CSS selectors I used for the updated Facebook design.\n\n\n# Installing Selenium\n\nSelenium is a software tool that allows to automate the use of web browsers.\nIn simple words, we can perform the actions that a normal web user could take with a mouse and keyboard, but we can define them by writing code, and hence automate them, schedule them, do them repeatedly very fast, etc. The use is up to you.\n\nWhat is this useful for? Let's say, for example, that your friend begs you all weeks to like all her new pictures on Instagram. That is a tedious task. You don't like Instagram so much, and you don't even like her pictures, she uses so many filters she is unrecognizable. You don't even know why you are still friends... but that's none of my business, let's focus please.\n\nInstead of pressing the like button on all her pictures every single weekend, you can use Selenium to automate that task. You just need to write some code and Selenium will connect to, for example, Google Chrome, to like all your friend's pictures.\n\nIt can be used in a lot of programming languages, and of course has also an [API for Python](https:\/\/selenium-python.readthedocs.io\/).\n\nInstalling Selenium usually does not yield too many problems, but sometimes it can be cumbersome. Please refer to previous link for the instructions.\n\nYou need to basically a few things.\nFirst, start by installing the Python package:\n```\npip install selenium\n```\n\nThen, you need to choose what browser you are going to allow Selenium to use. I have chosen Google Chrome because it is the one I use all the time.\n\nTo allow the communication between Selenium and Chrome, you need to provide Selenium with a web driver. If you want to use Chrome like me, you can download the web driver corresponding to your Chrome version in this [link](https:\/\/sites.google.com\/a\/chromium.org\/chromedriver\/downloads).\nDownload the .zip file according to your operating system, extract the file and put it in the same folder where you are going to execute your code.\n\nFinally, you import the libraries in Python and instantiate the web driver:\n","ea8a2350":"You will have noticed two things. One is that the structure of the response is quite complex. Again, it has to do with the way in which information is formatted in GraphQL. But once you find the route to the relevant information, it is easy to deal with. There is a lot of information, but the only fields I found relevant were the user id, the name, and the profile link. I also saved the gender because I was curious about whether I have more male or female friends.\n\nThe second thing that should draw your attention is that there are just 30 friends. How is that? I thought I would be a little more popular \ud83d\ude2d.\n\nActually, I have more than 300 friends. Why are there only 30 on the list?\nWell, we told it to do so. If you pay attention to the field `count` in the request data, we asked for 30 friends, and that is what we got. And why don't we ask for 300 friends? I tried, it did not work.\n\nThe reason is that the backend only sends the browser the information for the visible friends on the panel. When you scroll down, the browser requests sequentially the next batch of friends, until it reaches the end of the list.\n\nIn the first request, we only got 30 friends because that is the only relevant information for now. Imagine how inefficient would be to download all your friend list every time you only want to chat with your best friend (which would appear probably at the top of the list). It would be a waste of bandwidth.\nAs this is the expected behavior for a normal user, they must have set a limit of 30 friends per request.\n\nBut how do we ask for the next batch of friends?\nWell, there is a \"secret\".\nWhen we got the response, there is a field which tells us whether there is more information available.\nAnd, in the case it is, it also tells us what is the `cursor` of the next friend.\n\n`cursor`? What is that? It seems that when requesting your list of friends, each friend has an alphanumeric long code (a `cursor`) associated to it. So, in the response we got, it is telling us: \"hey, there are more friends available, and the next friend in the list is the one with this cursor\".\n\nHow do you get that information? Like this:\n","a6a4710b":"Booom! Good work.\n\nNow we are on the page. But, even if we waited some time so it loads, it is very likely it is not fully loaded yet, and it will never be no matter how long you wait.\n\n> What are you talking about?\n\nRemember: Facebook does not load all the information if the user does not scroll down, otherwise it would be a waste of resources. So, if you and your friend have loads of friends in common, they won't be shown on the screen yet until you don't scroll down.\n\nHow do we know if everything is loaded? We must look for the `<div>` element that indicates that some more friends are loading:","2b1a8961":"Now we are ready to ask for the information of our first batch of friends:","a2d1d193":"The field `page_info` is an object with two fields: `has_next_page` and `end_cursor`. `has_next_page` is a Boolean that tells if there are more friends to request or if it is the end of the list. In the case there are more, `end_cursor` is the cursor of that next friend. For example:\n```JSON\n{\n    'has_next_page': True,\n    'end_cursor': 'VeryLongRandomAlphanumericSequence-x9QpwrV7w2xv2QS6DlDOOKQIIfWJAQropRaZvQUz'\n}\n```","78d66764":"In mathematics [graphs](https:\/\/en.wikipedia.org\/wiki\/Graph_theory) are\n> mathematical structures used to model pairwise relations between objects\n(Wikipedia)\n\nIn plain words, it is an abstraction to represent a group of elements and the connection between them. It can be used, for example, to represent how cities are connected by train rails. In its simplest form, a graph can be represented visually by a group of circles that represent the elements (or nodes in the graph nomenclature) and lines (or edges) connecting those circles if we want to represent a connection.\n\nThis, for example, is a graph:","26904d33":"What if we put all of this together and do this operation for all your friends?","f50b0bf4":"I teach you how to do in in the next article:\n[Organize your wedding with social network analysis in Python](https:\/\/www.listeningtothedata.com\/posts\/organize-your-wedding-with-social-network-analysis-in-python\/) (or its [Kaggle notebook](https:\/\/www.kaggle.com\/rubchume\/organize-your-wedding-with-social-network-analysis) version).","92959bf0":"However, for me the simples option is to use a utility called [webdriver_manager](https:\/\/pypi.org\/project\/webdriver-manager\/), which handles the driver download for you and saves it in a cache for future uses.","9b8691f1":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Installing-Selenium\" data-toc-modified-id=\"Installing-Selenium-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Installing Selenium<\/a><\/span><\/li><li><span><a href=\"#Log-into-Facebook\" data-toc-modified-id=\"Log-into-Facebook-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Log into Facebook<\/a><\/span><\/li><li><span><a href=\"#Read-list-of-friends\" data-toc-modified-id=\"Read-list-of-friends-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Read list of friends<\/a><\/span><\/li><li><span><a href=\"#Get-the-mutual-friends-of-all-your-friends\" data-toc-modified-id=\"Get-the-mutual-friends-of-all-your-friends-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Get the mutual friends of all your friends<\/a><\/span><\/li><\/ul><\/div>","b0850f90":"If we find that element, then we will scroll down. And if we find it again, we will scroll down again, until it has disappeared, i.e., until all friends have been loaded.","fd64a1fd":"I am not going to describe in detail the headers and body of the requests and the responses, mainly because with it will change with time likely, probably sooner than later.\n\nThis is sort of bad news for you, dear reader, because it means that you must adapt the code, I am going to show you. Anyway, the process you must follow to deduce the right headers and body is the same I followed.\n\nWhat I discovered is this. For the backend to provide you with the information you ask, it has to be sure you are who you say you are. And it does that in two ways. First, you should set the cookies for the session to be the same the Chrome instance is using. And second, you must send, in the http request data, a field called `fb_dtsg`. I am not a web developer, so I am not going to pretend I understand how GraphQL works, and what the conventions are, or why Facebook needs this `fb_dtsg` field, in addition to the cookies, to identify the user. In any case, these two values are what I needed to set right so I could get the information I wanted.\n\nThe cookies issue is easy to solve. You can access cookie fields easily with the Selenium driver, and assign them to a requests session:","eba81b3d":"NOTE: this notebook is intended to be run in your local computer, not in Kaggle. The only reason for being in Kaggle is for sharing the code conveniently.\n\nNOTE: This notebook is also published as blog article in [here](https:\/\/www.listeningtothedata.com\/posts\/read-your-network-of-friends-in-facebook-by-scraping-with-python\/).\n***","0a11d6eb":"We got our full list of friends!!! Congratulations buddy, you are half way! Rest a little and come back when you are ready for more.","f22c9251":"If this goes well, we can start with the fun.\n\n# Log into Facebook\n\nThe first step to getting our friends Facebook network is to log into Facebook. We must, first, visit the page. This is as simple as:","08d1bc5e":"As you can see, now we got another 30 friends. And you can do that until no friends are left:"}}