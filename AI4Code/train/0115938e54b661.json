{"cell_type":{"7bdb2279":"code","26008f09":"code","1393af9d":"code","2b20e565":"code","4ae6d198":"code","e7596437":"code","e2b23e8b":"code","38a4d1e2":"code","4247f3dd":"code","6b26788e":"code","1729e37a":"code","765019ad":"code","3525828d":"code","9de1a369":"code","e18f78c0":"code","b88dd7e8":"code","f9bbd493":"code","c7190155":"code","1675d090":"code","5a3760ce":"code","cb300335":"code","312c3462":"code","71ea1171":"code","41e9b98c":"code","2d3c20c1":"code","a944c11e":"code","fe5fdc28":"code","cfa76ed3":"code","a44efda6":"code","4f11f04c":"code","d09d660b":"code","99cba940":"code","d87b7d93":"code","16e397d9":"code","9ef00209":"code","97fad8a7":"code","d8dafe24":"code","c2d99791":"code","16713ec4":"code","9adfb556":"code","edc00248":"code","72195e13":"code","06d4ec19":"code","86ea68ad":"code","4f46dab1":"code","1d031f12":"code","329bb8df":"code","b5b99ff1":"code","16ece56f":"code","f8b3b75c":"markdown","60f096be":"markdown","3912c173":"markdown","ab18826d":"markdown","b9d914a4":"markdown","bc18f233":"markdown","40260166":"markdown","8f3ba65b":"markdown"},"source":{"7bdb2279":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.pandas.set_option('display.max_columns', None)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","26008f09":"import plotly.express as px\nimport plotly\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom matplotlib import rcParams\n%matplotlib inline\nfrom wordcloud import WordCloud","1393af9d":"nakuri = pd.read_csv(\"\/kaggle\/input\/jobs-on-naukricom\/home\/sdf\/marketing_sample_for_naukri_com-jobs__20190701_20190830__30k_data.csv\")\nnakuri.head()","2b20e565":"rcParams[\"figure.figsize\"] = 20,10\nnakuri.isna().sum().plot(kind=\"bar\")","4ae6d198":"nakuri.duplicated().sum()","e7596437":"job = nakuri[\"Job Title\"].value_counts()\njob_df = pd.DataFrame({\"job_title\":job.index,\"frequency\":job.values})\n","e2b23e8b":"exper = nakuri[\"Job Experience Required\"].value_counts()\nexper_df = pd.DataFrame({\"experience\":exper.index,\"frequency\":exper.values})","38a4d1e2":"fig = px.bar(data_frame=job_df[:15],x=\"frequency\",y=\"job_title\",color=\"job_title\",title=\"Most Looking Job Title\")\nfig.show()","4247f3dd":"fig = make_subplots(1,2, \n                    subplot_titles = [\"Most Prefered Job Tile\", \n                                      \"Expected Job experience\"])\nfig.append_trace(go.Bar(x=job_df[\"frequency\"][:15],\n                       y=job_df[\"job_title\"][:15],\n                       orientation='h',showlegend=False,\n                       marker=dict(color=job_df[\"frequency\"][:15], coloraxis=\"coloraxis\", showscale=False)),row=1,col=1)\n\n\nfig.append_trace(go.Bar(x=exper_df[\"frequency\"][:15],\n                       y=exper_df[\"experience\"][:15],\n                       orientation=\"h\"),row=1,col=2)\nfig.show()","6b26788e":"role = nakuri['Role Category'].value_counts().nlargest(n=10)\nfig = px.pie(role, \n       values = role.values, \n       names = role.index, \n       title=\"Top 10 Role Categories\", \n       color=role.values,\n       color_discrete_sequence=px.colors.qualitative.Prism)\nfig.update_traces(opacity=0.7,\n                  marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5)\nfig.update_layout(title_x=0.5)\nfig.show()\n","1729e37a":"location = nakuri['Location'].value_counts().nlargest(n=10)\nfig = px.bar(y=location.values,\n       x=location.index,\n       orientation='v',\n       color=location.index,\n       text=location.values,\n       color_discrete_sequence= px.colors.qualitative.Bold)\n\nfig.update_traces(texttemplate='%{text:.2s}', \n                  textposition='outside', \n                  marker_line_color='rgb(8,48,107)', \n                  marker_line_width=1.5, \n                  opacity=0.7)\n\nfig.update_layout(width=800, \n                  showlegend=False, \n                  xaxis_title=\"City\",\n                  yaxis_title=\"Count\",\n                  title=\"Top 10 cities by job count\")\nfig.show()","765019ad":"loca = nakuri[\"Location\"].value_counts()\nloc_df = pd.DataFrame({\"location\":loca.index,\"frequency\":loca.values})","3525828d":"fig = px.bar(data_frame=loc_df[:30],x=\"frequency\",y=\"location\",title=\"location which has more job openings\",color=\"location\")\nfig.show()","9de1a369":"pay_split = nakuri['Job Salary'].str[1:-1].str.split('-', expand=True)\n","e18f78c0":"#remove space in left and right \npay_split[0] =  pay_split[0].str.strip()\n#remove comma \npay_split[0] = pay_split[0].str.replace(',', '')\n#remove all character in two condition\n# 1 remove if only character\n# 2 if start in number remove after all character\npay_split[0] = pay_split[0].str.replace(r'\\D.*', '')\n#display \npay_split[0].head()","b88dd7e8":"#remove space in left and right \npay_split[1] =  pay_split[1].str.strip()\n#remove comma \npay_split[1] = pay_split[1].str.replace(',', '')\n#remove all character in two condition\n# 1 remove if only character\n# 2 if start in number remove after all character\npay_split[1] = pay_split[1].str.replace(r'\\D.*', '')\n#display \npay_split[1].head()","f9bbd493":"pay_split[0] = pd.to_numeric(pay_split[0], errors='coerce')\npay_split[1] = pd.to_numeric(pay_split[1], errors='coerce')\n","c7190155":"pay=pd.concat([pay_split[0], pay_split[1]], axis=1, sort=False)","1675d090":"pay.rename(columns={0:'min_pay', 1:'max_pay'}, inplace=True)\npay.head()","5a3760ce":"nakuri=pd.concat([nakuri, pay], axis=1, sort=False)","cb300335":"experience_split = nakuri['Job Experience Required'].str[0:-1].str.split('-', expand=True)\nexperience_split.head()","312c3462":"#remove space in left and right \nexperience_split[1] =  experience_split[1].str.strip()\n#remove comma \nexperience_split[1] = experience_split[1].str.replace('yr', '')\n#remove all character in two condition\n# 1 remove if only character\n# 2 if start in number remove after all character\nexperience_split[1] = experience_split[1].str.replace(r'yr', '')\n#display \nexperience_split[1].head()","71ea1171":"experience_split[0] = pd.to_numeric(experience_split[0], errors='coerce')\nexperience_split[1] = pd.to_numeric(experience_split[1], errors='coerce')","41e9b98c":"experience=pd.concat([experience_split[0], experience_split[1]], axis=1, sort=False)","2d3c20c1":"experience.rename(columns={0:'min_experience', 1:'max_experience'}, inplace=True)\nexperience.head()","a944c11e":"nakuri=pd.concat([nakuri, experience], axis=1, sort=False)\nnakuri.head()","fe5fdc28":"nakuri['avg_pay']=(nakuri['min_pay'].values + nakuri['max_pay'].values)\/2\nnakuri['avg_experience']=(nakuri['min_experience'].values + nakuri['max_experience'].values)\/2","cfa76ed3":"f,ax=plt.subplots(figsize=(15,5))\n\nsns.stripplot(x='min_experience', y='min_pay', data=nakuri)\n","a44efda6":"f,ax=plt.subplots(figsize=(15,5))\nsns.pointplot(x='min_experience', y='min_pay', data=nakuri)","4f11f04c":"f,ax=plt.subplots(figsize=(15,5))\nsns.stripplot(x='max_experience', y='max_pay', data=nakuri)","d09d660b":"f,ax=plt.subplots(figsize=(30,10))\nsns.pointplot(x='min_experience', y='min_pay', data=nakuri)","99cba940":"sns.pairplot(nakuri, \n             size=5, aspect=0.9, \n             x_vars=[\"min_experience\",\"max_experience\"],\n             y_vars=[\"min_pay\"],\n             kind=\"reg\")","d87b7d93":"\n\nsns.pairplot(nakuri, \n             size=5, aspect=0.9, \n             x_vars=[\"min_experience\",\"max_experience\"],\n             y_vars=[\"max_pay\"],\n             kind=\"reg\")\n","16e397d9":"sns.jointplot(x='avg_experience', y='avg_pay', data=nakuri, \n              kind=\"kde\",xlim={0,15}, ylim={0,1000000})","9ef00209":"f,ax=plt.subplots(figsize=(30,10))\nsns.stripplot(x='avg_experience', y='avg_pay', data=nakuri, jitter=True)","97fad8a7":"f,ax=plt.subplots(figsize=(30,10))\nsns.pointplot(x='avg_experience', y='avg_pay', data=nakuri)","d8dafe24":"rcParams[\"figure.figsize\"] = 15,5\nnakuri[['min_pay','Industry']].groupby([\"Industry\"]).median().sort_values(by='min_pay',ascending=False).head(10).plot.bar(color='lightgreen')\n","c2d99791":"rcParams[\"figure.figsize\"] = 15,5\nnakuri[['max_pay','Industry']].groupby([\"Industry\"]).median().sort_values(by='max_pay',ascending=False).head(10).plot.bar(color='lightblue')","16713ec4":"rcParams[\"figure.figsize\"] = 15,5\nnakuri[['avg_pay','Key Skills']].groupby([\"Key Skills\"]).median().sort_values(by='avg_pay',ascending=False).head(10).plot.bar(color='lightgreen')","9adfb556":"rcParams[\"figure.figsize\"] = 15,5\nnakuri[['avg_pay','Job Title']].groupby([\"Job Title\"]).median().sort_values(by='avg_pay',ascending=False).head(10).plot.bar(color='y')","edc00248":"mumbai = nakuri[nakuri[\"Location\"]==\"Mumbai\"]\nmumbai.head()","72195e13":"mum_job = mumbai[\"Job Title\"].value_counts()\nmum_job_df = pd.DataFrame({\n    \"title\":mum_job.index,\n    \"frequency\":mum_job.values\n})","06d4ec19":"fig = px.bar(data_frame=mum_job_df[:20],x=\"frequency\",y=\"title\",color=\"title\",title=\"Job availabe in Mumabi\")\nfig.show()","86ea68ad":"chennai = nakuri[nakuri[\"Location\"]==\"Chennai\"]\nchennai.head()","4f46dab1":"chn_job = chennai[\"Job Title\"].value_counts()\nchn_job_df = pd.DataFrame({\n    \"title\":chn_job.index,\n    \"frequency\":chn_job.values\n})","1d031f12":"fig = px.bar(data_frame=chn_job_df[:20],x=\"frequency\",y=\"title\",color=\"title\",title=\"Job availabe in Chennai\")\nfig.show()","329bb8df":"def generate_word_cloud(text):\n    wordcloud = WordCloud(\n        width = 3000,\n        height = 2000,\n        background_color = 'black').generate(str(text))\n    fig = plt.figure(\n        figsize = (10,10),\n        facecolor = 'k',\n        edgecolor = 'k')\n    plt.imshow(wordcloud, interpolation = 'bilinear')\n    plt.axis('off')\n    plt.tight_layout(pad=0)\n    plt.show()","b5b99ff1":"generate_word_cloud(nakuri[\"Key Skills\"].values[:1000])","16ece56f":"generate_word_cloud(nakuri[\"Functional Area\"].values[:1000])","f8b3b75c":"# Most Prefered Role","60f096be":"There are more Null values in the dataset , whici we will leave as of now","3912c173":"There are no duplicate values found in the dataset","ab18826d":"Roles availabe in Mumbai ","b9d914a4":"# Location wise Different Jobs","bc18f233":"# Libraries Needed","40260166":"Roles availabe in **Chennai**","8f3ba65b":"# Location which has more Job Count"}}