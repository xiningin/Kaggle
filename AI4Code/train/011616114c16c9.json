{"cell_type":{"83c9e1b0":"code","6045b7b4":"code","b1922be8":"code","4c25c81c":"code","5caa7c29":"code","c61fb72a":"code","eb996eaa":"code","d158619a":"code","62599a9f":"code","218f5288":"code","47d3fcb0":"code","b1001a9a":"markdown","d64fde3b":"markdown","f454e196":"markdown","46ef3d84":"markdown","f191fe1c":"markdown","97e23698":"markdown","eda3a41f":"markdown"},"source":{"83c9e1b0":"!apt-get install -y graphviz libgraphviz-dev libcgraph6","6045b7b4":"!pip install git+https:\/\/github.com\/danielegrattarola\/spektral","b1922be8":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom skimage.util import montage\nfrom IPython.display import Image, display, SVG, clear_output, HTML\nplt.rcParams[\"figure.figsize\"] = (6, 6)\nplt.rcParams[\"figure.dpi\"] = 125\nplt.rcParams[\"font.size\"] = 14\nplt.rcParams['font.family'] = ['sans-serif']\nplt.rcParams['font.sans-serif'] = ['DejaVu Sans']\nplt.style.use('ggplot')\nsns.set_style(\"whitegrid\", {'axes.grid': False})\nplt.rcParams['image.cmap'] = 'gray' # grayscale looks better\nimport networkx as nx\ndef draw_graph_mpl(g, \n                   pos=None, \n                   ax=None, \n                   layout_func=nx.drawing.layout.kamada_kawai_layout, \n                   draw_labels=True,\n                   figsize=(5, 5)\n                  ):\n    if ax is None:\n        fig, ax = plt.subplots(1, 1, figsize=figsize)\n    else:\n        fig = None\n    if pos is None:\n        pos = layout_func(g)\n    node_color = []\n    node_labels = {}\n    shift_pos = {}\n    for k in g:\n        node_color.append(g.nodes[k].get('color', 'green'))\n        node_labels[k] = g.nodes[k].get('label', k)\n        shift_pos[k] = [pos[k][0], pos[k][1]]\n    \n    edge_color = []\n    edge_width = []\n    edge_labels = {}\n    for e in g.edges():\n        edge_color.append(g.edges[e].get('color', 'black'))\n        edge_width.append(g.edges[e].get('width', 0.5))\n        edge_labels[e] = g.edges[e].get('label', '')\n    \n    nx.draw_networkx_edges(g, pos, font_weight='bold', edge_color=edge_color, width=edge_width, alpha=0.5, ax=ax)\n    if any([len(x)>0 for x in edge_labels.values()]):\n        nx.draw_networkx_edge_labels(g, pos, edge_labels=edge_labels, ax=ax)\n    nx.draw_networkx_nodes(g, pos, node_color=node_color, node_shape='o', node_size=800, alpha=0.25, ax=ax)\n    if draw_labels:\n        nx.draw_networkx_labels(g, pos, labels=node_labels, arrows=True, ax=ax)\n    ax.autoscale()\n    return fig, ax, pos","4c25c81c":"tri_adj = np.eye(3)\nfor i in range(3):\n    tri_adj[i, (i+1) % tri_adj.shape[0]] = 2\n    #tri_adj[(i+1) % tri_adj.shape[1],i] = 0.5\ntri_node = np.ones((3, 1))\nG = nx.from_numpy_array(tri_adj)\n\nfor k, pix_val in zip(G.nodes, tri_node):\n    G.nodes[k]['label'] = '{}\\n({:1.1f})'.format(k, pix_val[0])\nfor i,j in zip(*np.where(tri_adj>0)):\n    G.edges[(i, j)]['label'] = '{:1.1f}'.format(tri_adj[i, j])\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\nax1.imshow(tri_adj, cmap='magma')\ndraw_graph_mpl(G, ax=ax2);","5caa7c29":"from keras import Input, Model\nfrom keras.callbacks import EarlyStopping\nfrom keras.layers import Dense, Flatten\nfrom keras.optimizers import Adam\nfrom keras.regularizers import l2\n\nfrom spektral.layers import GraphConv\nfrom spektral.layers.ops import sp_matrix_to_sp_tensor\nfrom spektral.utils import normalized_laplacian","c61fb72a":"# Model definition\nX_in = Input(shape=(None, 1))\n# Pass A as a fixed tensor, otherwise Keras will complain about inputs of\n# different rank.\nA_in = Input(shape=(None, None))\ngraph_conv_1 = GraphConv(1, \n                         activation='linear',\n                         use_bias=False,\n                         weights=[1*np.ones((1, 1))]\n                        )([X_in, A_in])\nmodel = Model(inputs=[X_in, A_in], outputs=[graph_conv_1])","eb996eaa":"def show_model_results(in_node, \n                       in_adj, \n                       model, \n                       max_val=5, \n                       pos=None,\n                       figsize=(16, 4)\n                      ):\n    fig, m_axs = plt.subplots(1, 4, figsize=figsize)\n    c_node = in_node.copy()\n    ax1, *n_axs = m_axs\n    ax1.imshow(in_adj, cmap='magma')\n    G = nx.from_numpy_array(in_adj)\n    for i,j in zip(*np.where(in_adj>0)):\n        if i!=j:\n            G.edges[(i, j)]['label'] = '{:1.1f}'.format(in_adj[i, j])\n    ax1.set_title('Adjacency')\n    for i, c_ax in enumerate(n_axs, 0):\n        for j, pix_val in zip(G.nodes, c_node):\n            G.nodes[j]['label'] = '#{}\\n({:1.1f})'.format(j, pix_val[0])\n            G.nodes[j]['color'] = plt.cm.magma(pix_val[0]\/max_val)\n        _, _, pos = draw_graph_mpl(G, ax=c_ax, pos=pos);\n        c_ax.set_title('Pass #{}'.format(i) if i>0 else 'Input')\n        c_node = model.predict([c_node[None,], in_adj[None,]])[0]","d158619a":"show_model_results(tri_node, tri_adj, model)","62599a9f":"offset_adj = 0.75*np.roll(np.eye(3), shift=1, axis=0)\noffset_node = 1+np.arange(3).reshape((-1, 1))\nshow_model_results(offset_node, offset_adj, model, max_val=3)","218f5288":"xx, yy = [ax.ravel() for ax in np.meshgrid(np.arange(3), np.arange(3))]\norg_dist = np.sqrt(np.square(xx.ravel()-1)+np.square(yy.ravel()-1))\nfull_adj = np.zeros((9, 9))\nfull_adj[:, 4] = (org_dist<=1)\/(org_dist<=1).sum()\nunique_value_nodes = 1+np.arange(9).reshape((-1, 1))\n\nshow_model_results(unique_value_nodes, \n                   full_adj, \n                   model, \n                   figsize=(20, 4), \n                   pos=np.stack([xx.ravel(), yy.ravel()], -1),\n                  max_val=8\n                  )","47d3fcb0":"full_adj = np.ones((9, 9))\/9.0\nmnz_feature = 10*(unique_value_nodes==5)\nshow_model_results(mnz_feature, \n                   full_adj, \n                   model, \n                   figsize=(20, 4), \n                   pos=np.stack([xx.ravel(), yy.ravel()], -1),\n                  max_val=1\n                  )","b1001a9a":"# Build Graph NN Models","d64fde3b":"- Make the first node empty ","f454e196":"# Overview\nThe notebook is mainly done for my own benefit to better understand what graph convolutional networks do on a very basic tasks like triangles and 3x3 convolutions\nThe notebook uses the [Spektral](https:\/\/github.com\/danielegrattarola\/spektral) package for running the models.","46ef3d84":"# Simple 3x3 Convolution","f191fe1c":"## Propogate and decay\nHere we have an simple graph where the edges only pass the value to the next node and decay the value by 25%. For the results we see the nodes \"rotating\"","97e23698":"## Install Dependencies","eda3a41f":"# Simple Graph"}}