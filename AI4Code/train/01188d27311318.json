{"cell_type":{"7af8297f":"code","f45edd6b":"code","9b16d8a7":"code","0dec95b9":"code","30a63459":"code","27ad01cc":"code","c7d56166":"code","f342e236":"code","70c06a98":"code","35c8e1fb":"code","dfea40c8":"code","f9bca245":"code","7588c42d":"code","a6465e60":"code","07661215":"code","c50bf2d7":"code","8cc072d1":"code","b898b8d7":"code","1a0e2247":"code","749e270b":"code","fa241ab2":"code","ff5bd587":"code","cb695178":"code","e2e17960":"code","9c2a4ec1":"code","a0edee3c":"code","34e2cc75":"code","2a8cfc14":"code","2604f000":"code","bc98fa80":"code","a213dcdd":"markdown","52b0f66c":"markdown","219be09c":"markdown","fa2b00e7":"markdown","87c7062d":"markdown","66befd99":"markdown","ce07ec12":"markdown","03e0490c":"markdown","6d9a5f51":"markdown","8772cecd":"markdown","3af35dbd":"markdown","a623d503":"markdown","f76f4c4b":"markdown","ea106ea8":"markdown","40681742":"markdown","758de19e":"markdown","ab98f648":"markdown","d994ebd3":"markdown","a3d4730c":"markdown","59106b34":"markdown","f6780339":"markdown","9c57eb8a":"markdown","7191e777":"markdown","003d7f2c":"markdown","ca5517ae":"markdown","096ee852":"markdown","59cbbbb1":"markdown","e03bd7bb":"markdown","f5da0b95":"markdown","0b503094":"markdown","03b89be1":"markdown","8687d396":"markdown","527e21f5":"markdown","1ccfd2a2":"markdown","9fbd4748":"markdown","f1f7ee59":"markdown"},"source":{"7af8297f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as rc","f45edd6b":"df = pd.read_csv(\"..\/input\/campeonato-brasileiro-de-futebol\/campeonato-brasileiro-full.csv\")\ndf.head()","9b16d8a7":"print(df['Clube 1'].unique())","0dec95b9":"print(df['Clube 2'].unique())","30a63459":"df = df.replace(['INTERNACIONAL','REMO','MALUTROM','PALMEIRAS','BAHIA','CRUZEIRO','PONTE PRETA',\n                 'FLUMINENSE','SPORT','VASCO','SANTOS','CORINTHIANS','JUVENTUDE','FLAMENGO','GUARANI','PAYSANDU','Botafogo-RJ'],\n                ['Internacional','Remo','Malutrom','Palmeiras','Bahia','Cruzeiro','Ponte Preta',\n                 'Fluminense','Sport','Vasco','Santos','Corinthians','Juventude','Flamengo','Guarani','Paysandu','Botafogo-rj'])","27ad01cc":"# Criar coluna 'Ano'\ndf['Data'] = pd.to_datetime(df['Data'])\ndf['Ano'] = df['Data'].dt.year\n\n# Eliminar as partidas antes de 2003\ndf = df.drop(df[df.Ano < 2003].index)\n\n# Eliminar colunas que n\u00e3o ser\u00e3o usadas\ndf = df.drop(['Hor\u00e1rio', 'Dia','Rodada','Arena','Clube 1 Estado','Clube 2 Estado','Estado Clube Vencedor'], axis = 1)\n\n# Renomear colunas\ndf = df.rename(columns={\"Clube 1\":\"Mandante\",\"Clube 2\":\"Visitante\",\"Clube 1 Gols\":\"Mandante Gols\",\n                        \"Clube 2 Gols\":\"Visitante Gols\"})\n\n# Trocar \"-\" por \"Empate\" na coluna 'Vencedor'\ndf = df.replace('-','Empate')\n\n# Criar outro dataframe\ndados = df.copy()\n\n# Eliminar partidas que o Flamengo n\u00e3o jogou\ndf = df.drop(df[(df['Mandante'] != 'Flamengo') & (df['Visitante'] != 'Flamengo')].index)\n\n# Vamos dar uma olhada no dataframe\ndf.head()","c7d56166":"jogos = df.groupby('Ano')['Ano'].count()\njogos = pd.DataFrame(jogos)\njogos.columns = ['Jogos']\njogos.reset_index(level=0, inplace=True)\nprint(jogos)","f342e236":"## Partidas como mandante ##\n# Criar um dataframe para partidas como mandante\nmandante = df.copy()\nmandante = mandante.drop(mandante[mandante['Mandante'] != 'Flamengo'].index)\n\n# Criar um dataframe com n\u00ba de jogos por ano\njogos_mandante = mandante.groupby('Ano')['Ano'].count()\njogos_mandante = pd.DataFrame(jogos_mandante)\njogos_mandante.columns = ['Partidas mandante']\njogos_mandante.reset_index(level=0, inplace=True)\n\n# Dataframe com o n\u00ba de gols por edi\u00e7\u00e3o\ngols_mandante = mandante.groupby('Ano')['Mandante Gols'].sum()\ngols_mandante = pd.DataFrame(gols_mandante)\ngols_mandante.columns = ['Mandante Gols']\ngols_mandante.reset_index(level=0, inplace=True)\n\n# Dataframe com partidas e gols por edi\u00e7\u00e3o\ngp_mandante = jogos_mandante.merge(gols_mandante, how='left', on='Ano')\n\n# Criar coluna com a m\u00e9dia de gols por partida\ngp_mandante['GP Mandante'] = round(gp_mandante['Mandante Gols']\/gp_mandante['Partidas mandante'],2)\n\n## Partidas como visitante ##\n# Criar um dataframe para partidas como visitante\nvisitante = df.copy()\nvisitante = visitante.drop(visitante[visitante['Visitante'] != 'Flamengo'].index)\n\n# Criar um dataframe com n\u00ba de jogos por ano\njogos_visitante = visitante.groupby('Ano')['Ano'].count()\njogos_visitante = pd.DataFrame(jogos_visitante)\njogos_visitante.columns = ['Partidas visitante']\njogos_visitante.reset_index(level=0, inplace=True)\n\n# Dataframe com o n\u00ba de gols por edi\u00e7\u00e3o\ngols_visitante = visitante.groupby('Ano')['Visitante Gols'].sum()\ngols_visitante = pd.DataFrame(gols_visitante)\ngols_visitante.columns = ['Visitante Gols']\ngols_visitante.reset_index(level=0, inplace=True)\n\n# Dataframe com partidas e gols por edi\u00e7\u00e3o\ngp_visitante = jogos_visitante.merge(gols_visitante, how='left', on='Ano')\n\n# Criar coluna com a m\u00e9dia de gols por partida\ngp_visitante['GP Visitante'] = round(gp_visitante['Visitante Gols']\/gp_visitante['Partidas visitante'],2)\n\n## Todas as Partidas ##\ngp_geral = gp_mandante.merge(gp_visitante, how='left', on='Ano')\ngp_geral['Partidas'] = gp_geral['Partidas mandante'] + gp_geral['Partidas visitante']\ngp_geral['Gols'] = gp_geral['Mandante Gols'] + gp_geral['Visitante Gols']\ngp_geral['GP Geral'] = round(gp_geral['Gols']\/gp_geral['Partidas'],2)","70c06a98":"r = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n\nnomes = ('2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015','2016',\n        '2017','2018','2019')\n\ncoluna1 = gp_geral['Gols']\n\n# gr\u00e1fico\nbarWidth = 0.9\n# Criando a barra de gols marcados\nplt.bar(r, coluna1, color='black', width=barWidth)\n\n# Eixo X\nplt.xticks(r, nomes)\nplt.xlabel(\"Anos\")\nplt.ylabel(\"Gols\")\nplt.title(\"Gols por Ano\")\n\n# Tamanho do gr\u00e1fico\nplt.rcParams[\"figure.figsize\"] = [12,6]\n \n# Visualizar o gr\u00e1fico\nplt.show()","35c8e1fb":"coluna1 = gp_geral['GP Geral']\n\n# gr\u00e1fico\nbarWidth = 0.9\n# Criando a barra de gols marcados por partida\nplt.bar(r, coluna1, color='red', width=barWidth)\n\n# Eixo X\nplt.xticks(r, nomes)\nplt.xlabel(\"Anos\")\nplt.ylabel(\"Gols\")\nplt.title(\"Gols por Partida\")\n\n# Tamanho do gr\u00e1fico\nplt.rcParams[\"figure.figsize\"] = [12,6]\n \n# Visualizar o gr\u00e1fico\nplt.show()","dfea40c8":"coluna1 = gp_geral['Mandante Gols']\/gp_geral['Gols']\ncoluna2 = gp_geral['Visitante Gols']\/gp_geral['Gols']\n\n# gr\u00e1fico\nbarWidth = 0.9\n# Criando a barra de gols em casa\nplt.bar(r, coluna1, color='black', edgecolor='white', width=barWidth,label='Gols em Casa')\n# Criando a barra de gols fora de casa\nplt.bar(r, coluna2, bottom=coluna1, color='red', edgecolor='white', width=barWidth,label='Gols Fora')\n\n# Eixo X\nplt.xticks(r, nomes)\nplt.xlabel(\"Anos\")\nplt.ylabel(\"Propor\u00e7\u00e3o\")\nplt.title(\"Dist. de gols em casa e fora\")\n \nplt.rcParams[\"figure.figsize\"] = [12,6]\n    \n# Visualizar o gr\u00e1fico\nplt.legend()\nplt.show()","f9bca245":"# Gols por jogo\ngols = gp_geral['Gols'].sum()\npartidas =  gp_geral['Partidas'].sum()\ngols_partida = gols\/partidas\nprint(\"O Flamengo tem uma m\u00e9dia de \"+str(round(gols_partida,1))+ \" gols por partida\")\n\n# Gols por jogo em casa\ngols_casa = gp_geral['Mandante Gols'].sum()\npartidas_casa =  gp_geral['Partidas mandante'].sum()\ngols_partida_casa = gols_casa\/partidas_casa\nprint(\"Em casa, o Flamengo tem uma m\u00e9dia de \"+str(round(gols_partida_casa,1))+ \" gols por partida\")\n\n# Gols por jogo fora de casa\ngols_fora = gp_geral['Visitante Gols'].sum()\npartidas_fora =  gp_geral['Partidas visitante'].sum()\ngols_partida_fora = gols_fora\/partidas_fora\nprint(\"Fora de casa, o Flamengo tem uma m\u00e9dia de \"+str(round(gols_partida_fora,1))+ \" gols por partida\")","7588c42d":"# Contar o n\u00famero de vit\u00f3rias\nvitorias_casa=mandante.groupby('Ano')['Vencedor'].apply(lambda x: (x=='Flamengo').sum()).reset_index(name='Vit\u00f3rias')\n\n# Contar o n\u00famero de empates\nempates_casa=mandante.groupby('Ano')['Vencedor'].apply(lambda x: (x=='Empate').sum()).reset_index(name='Empates')\n\n# Juntar os dataframes\nresultado_casa = jogos_mandante.merge(vitorias_casa, how='left', on='Ano')\nresultado_casa = resultado_casa.merge(empates_casa, how='left', on='Ano')\n\n# Ajeitar coluna\nresultado_casa = resultado_casa.rename(columns={\"Partidas mandante\":\"Jogos\"}) \n\n# Criar coluna de derrotas\nresultado_casa['Derrotas']= resultado_casa['Jogos'] - resultado_casa['Vit\u00f3rias']-resultado_casa['Empates']","a6465e60":"coluna1 = resultado_casa['Vit\u00f3rias']\/resultado_casa['Jogos']\ncoluna2 = resultado_casa['Empates']\/resultado_casa['Jogos']\ncoluna3 = resultado_casa['Derrotas']\/resultado_casa['Jogos']\n\n# gr\u00e1fico\nbarWidth = 0.9\n# Criando a barra de vit\u00f3rias\nplt.bar(r, coluna1, color='black', edgecolor='white', width=barWidth,label='Vit\u00f3rias')\n# Criando a barra de empates\nplt.bar(r, coluna2, bottom=coluna1, color='red', edgecolor='white', width=barWidth,label='Empates')\n# Criando a barra de derrotas\nplt.bar(r, coluna3, bottom=[i+j for i,j in zip(coluna1, coluna2)], color='lightgray', edgecolor='white',\n        width=barWidth,label='Derrotas')\n\n# Eixo X\nplt.xticks(r, nomes)\nplt.xlabel(\"Anos\")\nplt.ylabel(\"Propor\u00e7\u00e3o\")\nplt.title(\"Dist. de resultados em casa\")\n \n# Visualizar o gr\u00e1fico\nplt.legend()\nplt.show()","07661215":"resultado_casa['% Aprov.']= round((3*resultado_casa['Vit\u00f3rias']+resultado_casa['Empates'])\/(3*resultado_casa['Jogos']),2)\nprint(resultado_casa)","c50bf2d7":"coluna1 = resultado_casa['% Aprov.']\n\n# gr\u00e1fico\nbarWidth = 0.9\n# Criando a barra de aproveitamento\nplt.bar(r, coluna1, color='black', width=barWidth)\n\n# Eixo X\nplt.xticks(r, nomes)\nplt.xlabel(\"Anos\")\nplt.ylabel(\"Aproveitamento\")\nplt.title(\"Aproveitamento em casa\")\n\nplt.rcParams[\"figure.figsize\"] = [12,6]\n \n# Visualizar o gr\u00e1fico\nplt.show()","8cc072d1":"# Contar o n\u00famero de vit\u00f3rias\nvitorias_fora=visitante.groupby('Ano')['Vencedor'].apply(lambda x: (x=='Flamengo').sum()).reset_index(name='Vit\u00f3rias')\n\n# Contar o n\u00famero de empates\nempates_fora=visitante.groupby('Ano')['Vencedor'].apply(lambda x: (x=='Empate').sum()).reset_index(name='Empates')\n\n# Juntar os dataframes\nresultado_fora = jogos_visitante.merge(vitorias_fora, how='left', on='Ano')\nresultado_fora = resultado_fora.merge(empates_fora, how='left', on='Ano') \n\n# Ajeitar coluna\nresultado_fora = resultado_fora.rename(columns={\"Partidas visitante\":\"Jogos\"})\n\n# Criar coluna de derrotas\nresultado_fora['Derrotas']= resultado_fora['Jogos'] - resultado_fora['Vit\u00f3rias']-resultado_fora['Empates']","b898b8d7":"coluna1 = resultado_fora['Vit\u00f3rias']\/resultado_fora['Jogos']\ncoluna2 = resultado_fora['Empates']\/resultado_fora['Jogos']\ncoluna3 = resultado_fora['Derrotas']\/resultado_fora['Jogos']\n\n# gr\u00e1fico\nbarWidth = 0.9\n# Criando a barra de vit\u00f3rias\nplt.bar(r, coluna1, color='black', edgecolor='white', width=barWidth,label='Vit\u00f3rias')\n# Criando a barra de empates\nplt.bar(r, coluna2, bottom=coluna1, color='red', edgecolor='white', width=barWidth,label='Empates')\n# Criando a barra de derrotas\nplt.bar(r, coluna3, bottom=[i+j for i,j in zip(coluna1, coluna2)], color='lightgray', edgecolor='white',\n        width=barWidth,label='Derrotas')\n\n# Eixo X\nplt.xticks(r, nomes)\nplt.xlabel(\"Anos\")\nplt.ylabel(\"Propor\u00e7\u00e3o\")\nplt.title(\"Dist. de resultados fora de casa\")\n \n# Visualizar o gr\u00e1fico\nplt.legend()\nplt.show()","1a0e2247":"resultado_fora['% Aprov.']= round((3*resultado_fora['Vit\u00f3rias']+resultado_fora['Empates'])\/(3*resultado_fora['Jogos']),2)\n\ncoluna1 = resultado_fora['% Aprov.']\n\n# gr\u00e1fico\nbarWidth = 0.9\n# Criando a barra de aproveitamento\nplt.bar(r, coluna1, color='black', width=barWidth)\n\n# Eixo X\nplt.xticks(r, nomes)\nplt.xlabel(\"Anos\")\nplt.ylabel(\"Aproveitamento\")\nplt.title(\"Aproveitamento fora de casa\")\n\nplt.rcParams[\"figure.figsize\"] = [12,6]\n \n# Visualizar o gr\u00e1fico\nplt.show()","749e270b":"# Deletar colunas de aproveitamento\nresultado_casa = resultado_casa.drop(['% Aprov.'], axis = 1)\nresultado_fora = resultado_fora.drop(['% Aprov.'], axis = 1)\n\n# Deletar coluna repetida\nresultado_casa = resultado_casa.drop(['Jogos'], axis = 1)\nresultado_fora = resultado_fora.drop(['Jogos'], axis = 1)\n\n# Renomear colunas\nresultado_casa = resultado_casa.rename(columns={\"Vit\u00f3rias\":\"Vit casa\",\"Empates\":\"Emp casa\",\"Derrotas\":\"Der casa\"})\nresultado_fora = resultado_fora.rename(columns={\"Vit\u00f3rias\":\"Vit fora\",\"Empates\":\"Emp fora\",\"Derrotas\":\"Der fora\"})\n\n# Juntar dataframes\nresultado = jogos.merge(resultado_casa, how='left', on='Ano')\nresultado = resultado.merge(resultado_fora, how='left', on='Ano')\n\n# Coluna de Pontos\nresultado['Pts'] = 3*(resultado['Vit casa']+resultado['Vit fora'])+resultado['Emp casa']+resultado['Emp fora']\n\n# Coluna com a propor\u00e7\u00e3o de pontos conquistados em casa\nresultado['% Pts casa']= round((3*resultado['Vit casa']+resultado['Emp casa'])\/resultado['Pts'],2)\n\n# Coluna com a propor\u00e7\u00e3o de pontos conquistados fora de casa\nresultado['% Pts fora']= round((3*resultado['Vit fora']+resultado['Emp fora'])\/resultado['Pts'],2)\n\nresultado['Vit'] = resultado['Vit casa'] + resultado['Vit fora']\nresultado['Der'] = resultado['Der casa'] + resultado['Der fora']\nresultado['Emp'] = resultado['Emp casa'] + resultado['Emp fora']","fa241ab2":"coluna1 = resultado['Vit']\/resultado['Jogos']\ncoluna2 = resultado['Emp']\/resultado['Jogos']\ncoluna3 = resultado['Der']\/resultado['Jogos']\n\n# gr\u00e1fico\nbarWidth = 0.9\n# Criando a barra de vit\u00f3rias\nplt.bar(r, coluna1, color='black', edgecolor='white', width=barWidth,label='Vit\u00f3rias')\n# Criando a barra de empates\nplt.bar(r, coluna2, bottom=coluna1, color='red', edgecolor='white', width=barWidth,label='Empates')\n# Criando a barra de derrotas\nplt.bar(r, coluna3, bottom=[i+j for i,j in zip(coluna1, coluna2)], color='lightgray', edgecolor='white',\n        width=barWidth,label='Derrotas')\n\n# Eixo X\nplt.xticks(r, nomes)\nplt.xlabel(\"Anos\")\nplt.ylabel(\"Propor\u00e7\u00e3o\")\nplt.title(\"Dist. de resultados\")\n \n# Visualizar o gr\u00e1fico\nplt.legend()\nplt.show()","ff5bd587":"resultado['% Aprov.']= round((3*resultado['Vit']+resultado['Emp'])\/(3*resultado['Jogos']),2)\n\ncoluna1 = resultado['% Aprov.']\n\n# gr\u00e1fico\nbarWidth = 0.9\n# Criando a barra de aproveitamento\nplt.bar(r, coluna1, color='black', width=barWidth)\n\n# Eixo X\nplt.xticks(r, nomes)\nplt.xlabel(\"Anos\")\nplt.ylabel(\"Aproveitamento\")\nplt.title(\"Aproveitamento de pontos\")\n\nplt.rcParams[\"figure.figsize\"] = [12,6]\n \n# Visualizar o gr\u00e1fico\nplt.show()","cb695178":"coluna1 = resultado['Pts']\n\n# gr\u00e1fico\nbarWidth = 0.9\n# Criando a barra de pontos conquistados\nplt.bar(r, coluna1, color='black', width=barWidth)\n\n# Eixo X\nplt.xticks(r, nomes)\nplt.xlabel(\"Anos\")\nplt.ylabel(\"Pontos\")\nplt.title(\"Pontos Conquistados\")\n\nplt.rcParams[\"figure.figsize\"] = [12,6]\n \n# Visualizar o gr\u00e1fico\nplt.show()","e2e17960":"coluna1 = resultado['% Pts casa']\ncoluna2 = resultado['% Pts fora']\n\n# gr\u00e1fico\nbarWidth = 0.9\n# Criando a barra de pontos conquistados em casa\nplt.bar(r, coluna1, color='black', edgecolor='white', width=barWidth,label='% Pts Casa')\n# Criando a barra de pontos conquistados fora de casa\nplt.bar(r, coluna2, bottom=coluna1, color='red', edgecolor='white', width=barWidth,label='% Pts Fora')\n\n# Eixo X\nplt.xticks(r, nomes)\nplt.xlabel(\"Anos\")\nplt.ylabel(\"Propor\u00e7\u00e3o\")\nplt.title(\"Dist. de pontos conquistados em casa e fora\")\n \nplt.rcParams[\"figure.figsize\"] = [12,6]\n    \n# Visualizar o gr\u00e1fico\nplt.legend()\nplt.show()","9c2a4ec1":"# Somar as vit\u00f3rias por advers\u00e1rio\nadversarios_vit = df.groupby('Vencedor')['Vencedor'].count()\nadversarios_vit = pd.DataFrame(adversarios_vit)\nadversarios_vit.columns = ['Vit\u00f3rias']\nadversarios_vit.reset_index(level=0, inplace=True)\n\n# Eliminar as linhas com as vit\u00f3rias do Flamengo e Empates\nadversarios_vit = adversarios_vit.drop(adversarios_vit[(adversarios_vit['Vencedor'] == 'Flamengo')].index)\nadversarios_vit = adversarios_vit.drop(adversarios_vit[(adversarios_vit['Vencedor'] == 'Empate')].index)\n\n# Ordenar o Dataframe em ordem decrescente\nadversarios_vit.sort_values(by=['Vit\u00f3rias'], inplace=True, ascending=False)\n\n# Criar gr\u00e1fico\nax = adversarios_vit.plot.barh(x='Vencedor', y='Vit\u00f3rias',color ='black',figsize=(10,10))","a0edee3c":"# Pelo dataframe 'Mandante'\ngols_adversarios_casa = mandante.groupby('Visitante')['Visitante Gols'].sum()\ngols_adversarios_casa = pd.DataFrame(gols_adversarios_casa)\ngols_adversarios_casa.columns = ['Gols Casa']\ngols_adversarios_casa.reset_index(level=0, inplace=True)\ngols_adversarios_casa.columns = ['Time','Gols Casa']\n\n# Pelo dataframe 'Visitante'\ngols_adversarios_fora = visitante.groupby('Mandante')['Mandante Gols'].sum()\ngols_adversarios_fora = pd.DataFrame(gols_adversarios_fora)\ngols_adversarios_fora.columns = ['Gols Fora']\ngols_adversarios_fora.reset_index(level=0, inplace=True)\ngols_adversarios_fora.columns = ['Time','Gols Fora']\n\n# Juntando os dataframes\ngols_adversarios = gols_adversarios_casa.merge(gols_adversarios_fora, how='left', on='Time')\n\n# Criar coluna total com os gols marcados por adversarios\ngols_adversarios['Gols'] = gols_adversarios['Gols Casa'] + gols_adversarios['Gols Fora']\n\n# Ordenar o dataframe\ngols_adversarios.sort_values(by=['Gols'], inplace=True, ascending=False)\n\n# Criar gr\u00e1fico\nax = gols_adversarios.plot.barh(x='Time', y='Gols',color ='black',figsize=(10,10))","34e2cc75":"# Criar um dataframe com a coluna de perdedores\nperdedores = df.copy()\n\n# Criar a coluna de perdedores\ncondicoes = [(perdedores['Mandante'] == perdedores['Vencedor']),(perdedores['Visitante'] == perdedores['Vencedor'])]\nvalores = [perdedores['Visitante'], perdedores['Mandante']]\nperdedores['Perdedor'] = np.select(condicoes, valores, default='Empate')\n\n# Contar o n\u00famero de vit\u00f3rias do Flamengo sobre cada advers\u00e1rio\nflamengo_vit = perdedores.groupby('Perdedor')['Perdedor'].count()\nflamengo_vit = pd.DataFrame(flamengo_vit)\nflamengo_vit.columns = ['Vit\u00f3rias']\nflamengo_vit.reset_index(level=0, inplace=True)\n\n# Eliminar as linhas com as vit\u00f3rias do Flamengo e Empates\nflamengo_vit = flamengo_vit.drop(flamengo_vit[(flamengo_vit['Perdedor'] == 'Flamengo')].index)\nflamengo_vit = flamengo_vit.drop(flamengo_vit[(flamengo_vit['Perdedor'] == 'Empate')].index)\n\n# Ordenar o Dataframe em ordem decrescente\nflamengo_vit.sort_values(by=['Vit\u00f3rias'], inplace=True, ascending=False)\n\n# Criar gr\u00e1fico\nax = flamengo_vit.plot.barh(x='Perdedor', y='Vit\u00f3rias',color ='red',figsize=(10,10))","2a8cfc14":"# Pelo dataframe 'Mandante'\ngols_flamengo_casa = mandante.groupby('Visitante')['Mandante Gols'].sum()\ngols_flamengo_casa = pd.DataFrame(gols_flamengo_casa)\ngols_flamengo_casa.columns = ['Gols Flamengo Casa']\ngols_flamengo_casa.reset_index(level=0, inplace=True)\ngols_flamengo_casa.columns = ['Time','Gols Flamengo Casa']\n\n# Pelo dataframe 'Visitante'\ngols_flamengo_fora = visitante.groupby('Mandante')['Visitante Gols'].sum()\ngols_flamengo_fora = pd.DataFrame(gols_flamengo_fora)\ngols_flamengo_fora.columns = ['Gols Flamengo Fora']\ngols_flamengo_fora.reset_index(level=0, inplace=True)\ngols_flamengo_fora.columns = ['Time','Gols Flamengo Fora']\n\n# Juntando os dataframes\ngols_flamengo = gols_flamengo_casa.merge(gols_flamengo_fora, how='left', on='Time')\n\n# Criar coluna total com os gols marcados por adversarios\ngols_flamengo['Gols'] = gols_flamengo['Gols Flamengo Casa'] + gols_flamengo['Gols Flamengo Fora']\n\n# Ordenar o dataframe\ngols_flamengo.sort_values(by=['Gols'], inplace=True, ascending=False)\n\n# Criar gr\u00e1fico\nax = gols_flamengo.plot.barh(x='Time', y='Gols',color ='red',figsize=(10,10))","2604f000":"# Fun\u00e7\u00e3o que cria lista dos dataframes de cada ano\ndef listar_df(dataframe):\n    new_df = dataframe.copy()  # Copia o dataframe input\n    anos = new_df['Ano'].unique() # Vai criar uma array com cada ano que aparece na coluna\n    anos = anos.tolist()    # Transforma a array em uma lista\n    \n    # Filtrar dataframes\n    dbs = []\n    for ano in anos:  # Vai pegar os anos na lista e usar como crit\u00e9rio para filtrar os dataframes\n        db = new_df.loc[new_df['Ano'] == ano]\n        dbs.append(db)\n       \n    return dbs\n\ndef conseguir_times(dataframe):\n    # Registrar times\n    df = dataframe.copy()\n    times = df['Mandante'].unique()\n    times = times.tolist()\n    return times\n    \n# Fun\u00e7\u00e3o que conta o n\u00famero de vit\u00f3rias\ndef contar_vit\u00f3rias(dataframe,lista):\n    vitorias_time = []\n    for item in lista:\n        filter = dataframe[\"Vencedor\"] == item\n        vitorias = dataframe[filter]['Vencedor'].count().astype(np.int64)\n        vitorias_time += [vitorias,]                                                        \n    return vitorias_time\n\n# Fun\u00e7\u00e3o que conta o n\u00famero de empates\ndef contar_empates(dataframe, lista ):\n    empates_time = []\n    for item in lista:\n        df = dataframe.copy()\n        filter1 = (df[\"Mandante\"] == item) | (df[\"Visitante\"] == item)\n        filter2 = df[\"Vencedor\"] == 'Empate'\n        df = df[(filter1) & (filter2)]\n        empates = df['Vencedor'].count().astype(np.int64)\n        empates_time += [empates,] \n    return empates_time\n\n# Fun\u00e7\u00e3o que conta o n\u00famero de derrotas\ndef contar_derrotas(dataframe, lista):\n    derrotas_time = []\n    for item in lista:\n        df = dataframe.copy()\n        filter1 = (df[\"Mandante\"] == item) | (df[\"Visitante\"] == item)\n        filter2 = (df[\"Vencedor\"] != item) & (df[\"Vencedor\"] != 'Empate')\n        df = df[(filter1) & (filter2)]\n        derrotas = df['Vencedor'].count().astype(np.int64)\n        derrotas_time += [derrotas,] \n    return derrotas_time\n\n# Fun\u00e7\u00e3o para contar gols\ndef contar_gp(dataframe, lista):\n    gp_time = [] # Gols marcados\n    for item in lista:\n        df = dataframe.copy()\n        # Somar gols marcados em casa\n        filter1 = (df[\"Mandante\"] == item)\n        df1 = df[(filter1)]\n        gp1 = df1['Mandante Gols'].sum().astype(np.int64)\n        # Somar gols marcados fora\n        filter2 = (df[\"Visitante\"] == item)\n        df2 = df[(filter2)]\n        gp2 = df2['Visitante Gols'].sum().astype(np.int64)\n        gp = gp1 + gp2\n        # Somar gols\n        gp_time += [gp,]\n\n    return gp_time\n\ndef contar_gc(dataframe, lista):\n    gc_time = [] # Gols sofridos\n    for item in lista:\n        df = dataframe.copy()\n        # Somar gols sofridos em casa\n        filter3 = (df[\"Mandante\"] == item)\n        df3 = df[(filter3)]\n        gc1 = df3['Visitante Gols'].sum().astype(np.int64)\n        # Somar gols sofridos fora\n        filter4 = (df[\"Visitante\"] == item)\n        df4 = df[(filter4)]\n        gc2 = df4['Mandante Gols'].sum().astype(np.int64)\n        gc = gc1 + gc2\n        # Somar gols\n        gc_time += [gc,]\n        \n    return gc_time\n\n# Criar lista com nossos dataframes\ndataframes = listar_df(dados)\n\n# Loop final\ntabelas = []\nfor dataframe in dataframes:\n    times = conseguir_times(dataframe)\n    vitorias = contar_vit\u00f3rias(dataframe,times)\n    empates = contar_empates(dataframe,times)\n    derrotas = contar_derrotas(dataframe,times)\n    gp = contar_gp(dataframe,times)\n    gc = contar_gc(dataframe,times)\n    \n    # Transformar listas em um dataframe\n    tabela = pd.DataFrame(list(zip(times,vitorias,empates,derrotas,gp,gc)), \n               columns =['times','vitorias','empates','derrotas','GP','GC']) \n    #Criar coluna de pontos e de saldo de gol\n    tabela['Pts'] = 3*tabela['vitorias'] + tabela['empates']\n    tabela['SG'] = tabela['GP'] + tabela['GC']\n    # Ordenar os times\n    tabela = tabela.sort_values(['Pts', 'vitorias', 'SG','GP'], ascending=[False, False, False,False])\n    # Criar coluna com posi\u00e7\u00e3o\n    posi\u00e7\u00e3o = len(tabela) + 1\n    tabela['Posi\u00e7\u00e3o'] = [i for i in range(1,posi\u00e7\u00e3o)]\n    # Ajustar ordem das colunas\n    tabela = tabela[['times','Pts','vitorias','empates','derrotas','GP','GC','SG','Posi\u00e7\u00e3o']]\n    \n    tabelas.append(tabela)\n    \n# Obter a classifica\u00e7\u00e3o do Flamengo ao longo dos anos\nfla = []\nfor tabela in tabelas:\n    for index,row in tabela.iterrows():\n        if row['times'] == 'Flamengo':\n            pos = row['Posi\u00e7\u00e3o']\n    fla.append(pos)\n\ndef conseguir_ano(dataframe):\n    new_df = dataframe.copy()  # Copia o dataframe input\n    anos = new_df['Ano'].unique() # Vai criar uma array com cada ano que aparece na coluna\n    anos = anos.tolist()    # Transforma a array em uma lista\n    return anos\n\nano = conseguir_ano(df)\n\ncampe\u00f5es = pd.DataFrame(list(zip(ano,fla)),columns =['Ano','Classifica\u00e7\u00e3o'])\n\ncampe\u00f5es.head(17)","bc98fa80":"# Vit\u00f3rias\nvitorias = resultado['Vit'].sum()\nprint('O Flamengo venceu '+str(vitorias) + ' jogos.')\n\n# Derrotas\nderrotas = resultado['Der'].sum()\nprint('O Flamengo perdeu '+str(derrotas) + ' jogos.')\n\n# Empates\nempates = resultado['Emp'].sum()\nprint('O Flamengo empatou '+str(empates) + ' jogos.')\n\n# Gols Marcados\nprint('O Flamengo marcou '+str(gols) + ' gols.')\n\n# Gols por partida\nprint('O Flamengo marcou '+str(round(gols_partida,1)) + ' gols por partida.')\n\n# Aproveitamento de pontos\npontos = 3*vitorias+empates\naproveitamento = pontos\/(3*(vitorias+derrotas+empates))\nprint('O Flamengo teve aproveitamento de '+str(100*round(aproveitamento,1)) + '%.')","a213dcdd":"### Aproveitamento de pontos fora de casa","52b0f66c":"O Flamengo sempre conquistou mais pontos em casa. Pelo gr\u00e1fico acima, 2003 \u00e9 o ano com menor propor\u00e7\u00e3o de pontos conquistados fora, enquanto 2015 \u00e9 o ano com maior propor\u00e7\u00e3o.","219be09c":"Agora, vamos fazer o mesmo para os jogos como visitante.","fa2b00e7":"# Evolu\u00e7\u00e3o da classifica\u00e7\u00e3o","87c7062d":"# Prepara\u00e7\u00e3o dos Dados","66befd99":"### Times que mais fizeram gols no Flamengo","ce07ec12":"Antes de qualquer coisa, vamos ver se os nomes dos clubes est\u00e3o corretos.","03e0490c":"\u00c9 interessante notar que apenas 2 vezes o Flamengo teve superior de 50% quando jogou como visitante. A primeira vez foi em 2016 e a segunda em 2019.","6d9a5f51":"Agora, vamos juntar os dataframes. Veremos como foi a distribui\u00e7\u00e3o de resultados e pontos para cada ano.\n\nAntes, precisamos fazer alguns ajustes. Teremos de alterar o nome das colunas para juntar os dataframes.","8772cecd":"### Gols marcados ao longo do tempo ###","3af35dbd":"### Evolu\u00e7\u00e3o de pontos conquistados ##","a623d503":"### Aproveitamento de pontos em casa","f76f4c4b":"# Conclus\u00e3o","ea106ea8":"Jogando como mandante o Flamengo teve aproveitamento inferior a 50% apenas duas vezes, 2010 e 2015.","40681742":"Farei uma an\u00e1lise da performance do Flamengo no Campeonato Brasileiro. Considerarei apenas as edi\u00e7\u00f5es com pontos corridos, isto \u00e9, a partir de 2003.\nEste kernel est\u00e1 dividido da seguinte maneira:\n\n**Prepara\u00e7\u00e3o dos dados**\n\n**Gols marcados**\n*\tTotal de gols marcados\n*\tGols marcados por partida\n*   Distribui\u00e7\u00e3o dos gols marcados em casa e fora de casa\n\n**Resultados**\n*\tDistribui\u00e7\u00e3o dos resultados em casa\n*\tAproveitamento de pontos em casa\n*   Distribui\u00e7\u00e3o de resultados fora de casa\n*   Aproveitamento de pontos fora de casa\n*   Distribui\u00e7\u00e3o geral de resultados\n*   Aproveitamento geral de pontos\n*   Evolu\u00e7\u00e3o de pontos conquistados\n*   Distribui\u00e7\u00e3o de pontos conquistados em casa e fora de casa\n\n**Advers\u00e1rios**\n*    Times que mais venceram o Flamengo\n*    Times que mais fizeram gols no Flamengo\n*    Times que mais perderam para o Flamengo\n*    Times que mais levaram gols do Flamengo\n\n**Evolu\u00e7\u00e3o da Classifica\u00e7\u00e3o**\n\n\nNa \u00faltima se\u00e7\u00e3o, boa parte do c\u00f3digo foi tirada deste do seguinte *kernel*:\nhttps:\/\/www.kaggle.com\/adaoduque\/montando-a-tabela-do-brasileirao-2019.\n\nCaso voc\u00ea encontre algum erro ou tenha alguma sugest\u00e3o de algo que eu possa melhorar (seja no c\u00f3digo ou seja na an\u00e1lise), por favor, fique a vontade para falar nos coment\u00e1rios.","758de19e":"# Advers\u00e1rio #","ab98f648":"\u00c9 poss\u00edvel ver que o Flamengo nunca marcou mais gols fora de casa do que em casa.\nAo longo desses 17 anos,qual foi o n\u00ba de gols por partida no geral, em casa e fora de casa?","d994ebd3":"### Distribui\u00e7\u00e3o dos gols em casa e fora de casa","a3d4730c":"### Distribui\u00e7\u00e3o de pontos conquistados em casa e fora de casa","59106b34":"# Gols marcados #\n\nPara facilitar, vou criar dois dataframes. Um com as partidas nas quais o Flamengo foi mandante e outro com as partidas nas quais o Flamengo foi visitante.","f6780339":"### Distribui\u00e7\u00e3o de resultados","9c57eb8a":"## Distribui\u00e7\u00e3o dos resultados em casa ##","7191e777":"# Resultados #\n\nAgora, vamos ver como o Flamengo se saiu jogando em casa e fora de casa. Aqui, vamos aproveitar os dataframes 'Mandante' e 'Visitante'.","003d7f2c":"Para facilitar o trabalho, limparei o dataframe e criarei um novo. As colunas novas ser\u00e3o:\n\n* Ano\n* Time Mandante\n* Time Visitante\n* Gols Mandante\n* Gols Visitante\n* Vencedor\n\nVamos eliminar todas as partidas antes de 2003 e todas as partidas que o Flamengo n\u00e3o disputou. Vamos eliminar as colunas que n\u00e3o ser\u00e3o usados e renomear outras colunas.","ca5517ae":"Nessa parte, veremos:\n\n* Quais times mais venceram o Flamengo\n* Quais times mais marcaram gols no Flamengo\n* Quais times mais perderam para o Flamengo\n* Quais times mais levaram gols do Flamengo","096ee852":"### Times que mais levaram gols do Flamengo","59cbbbb1":"\n\n**Refor\u00e7ando:** \nNa se\u00e7\u00e3o \"Evolu\u00e7\u00e3o da classifica\u00e7\u00e3o\", boa parte do c\u00f3digo foi copiado deste [kernel](https:\/\/www.kaggle.com\/adaoduque\/montando-a-tabela-do-brasileirao-2019).  \n\nCaso voc\u00ea encontre algum erro ou tenha alguma sugest\u00e3o de algo que eu possa melhorar (seja no c\u00f3digo ou seja na an\u00e1lise), por favor, fique a vontade para falar nos coment\u00e1rios.\n\nCaso voc\u00ea queira usar alguma parte do c\u00f3digo ou fazer a mesma an\u00e1lise para outro time, fique a vontade.","e03bd7bb":"### Aproveitamento de Pontos","f5da0b95":"### Times que mais venceram o Flamengo","0b503094":"### Distribui\u00e7\u00e3o de resultados fora de casa","03b89be1":"D\u00e1 pra ver que alguns times receberam nomes diferentes. At\u00e9 mesmo o Flamengo, que as vezes est\u00e1 'FLAMENGO' e outras vezes 'Flamengo'.\nVamos corrigir isso.","8687d396":"Enquanto em 2015 o Flamengo perdeu 8 partidas (m\u00e1ximo), em 2019, n\u00e3o perdeu uma vez.\n\nVamso agora ver o aproveitamento do time em casa. Isto \u00e9, a propor\u00e7\u00e3o entre pontos conquistados e pontos disputados.","527e21f5":"### Gols marcados por partida","1ccfd2a2":"Vamos ver como o Flamengo se saiu jogando em casa.","9fbd4748":"### Times que mais perderam para o Flamengo","f1f7ee59":"Vamos verificar o n\u00famero de jogos por ano"}}