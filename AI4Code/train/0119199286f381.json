{"cell_type":{"75e743d4":"code","49b8cc3f":"code","8f5f24dd":"code","fb7d10ce":"code","857fe9d6":"code","388de4dd":"code","4444a381":"code","69909455":"code","dcf305cd":"code","0c1e4f27":"markdown","ab9232f3":"markdown","c4e38f23":"markdown"},"source":{"75e743d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49b8cc3f":"dataframe = pd.read_csv(\"\/kaggle\/input\/gender-classification\/Transformed Data Set - Sheet1.csv\")\ndataframe.info()","8f5f24dd":"dataframe.rename(columns={'Favorite Color' :'FavoriteColor', 'Favorite Music Genre':'FavoriteMusicGenre', \n                          'Favorite Beverage':'FavoriteBeverage', 'Favorite Soft Drink':'FavoriteSoftDrink'}, inplace=True)","fb7d10ce":"from sklearn.preprocessing import LabelEncoder\ndataframe=dataframe.apply(LabelEncoder().fit_transform)\ndataframe.info()\n","857fe9d6":"X = dataframe.drop(['Gender'], axis = 1)\ny = dataframe.Gender","388de4dd":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)","4444a381":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train, y_train)\n\ny_pred = knn.predict(X_test)\nprint(\"Result for the test set is : {}\".format(y_pred))\nprint(\"Score on training set is : {:.2f}%\".format(knn.score(X_train, y_train)*100))\nprint(\"Score on test set is : {:.2f}%\".format(knn.score(X_test, y_test)*100))","69909455":"from sklearn.metrics import recall_score, precision_score, confusion_matrix","dcf305cd":"print(\"Recall score\", recall_score(y_test, y_pred, average='macro'))\nprint(\"Precision score\", precision_score(y_test, y_pred, average='macro'))\nprint (\"CONFUSION MATRIX\", confusion_matrix(y_test, y_pred))","0c1e4f27":"Using **KNN Classifier**","ab9232f3":"**Confusion Matrix, Recall score and Precision score**","c4e38f23":"Since all columns are of type object, so we will have to bring them all in type numeric to make it in machine readable format."}}