{"cell_type":{"5fc7b447":"code","5003b88d":"code","6441372b":"code","9e1dfe7d":"code","6a1ebeae":"code","09e8d21f":"code","bda2573b":"code","28195b08":"code","ce4c2672":"code","7623201e":"code","df1471ae":"code","c64889e3":"code","d3ed4c39":"code","cb96e24f":"code","250cfbe5":"code","926693e9":"code","a970146c":"code","ce000759":"code","3873d8b9":"code","3c7bca88":"code","61e1ac37":"code","acec0b1d":"code","0347cb7d":"code","2463a7d9":"code","2c536737":"code","665feb09":"code","0b5a50f6":"code","1a5a0f58":"code","751f8787":"code","d667b218":"code","8fbec9c7":"code","913cebce":"code","3aeafa47":"code","38964ebc":"markdown","bdb927d0":"markdown","71dd70b7":"markdown"},"source":{"5fc7b447":"!pip install bert-for-tf2\n!pip install sentencepiece","5003b88d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6441372b":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix, f1_score\n\n# from keras.preprocessing.text import Tokenizer\n# from keras.preprocessing.sequence import pad_sequences\n# from tqdm import tqdm\n# from keras.models import Sequential\n# from keras.layers import Embedding,LSTM,Dense,SpatialDropout1D\n# from keras.initializers import Constant\n# from keras.optimizers import Adam\n# from keras import regularizers\n# import keras.backend as K\n\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.utils import to_categorical\nimport tensorflow.keras.backend as K\nimport tensorflow_hub as hub\n\ntry:\n    %tensorflow_version 2.x\nexcept Exception:\n    pass\nimport tensorflow as tf\n\nfrom tensorflow.keras import layers\nimport bert\n","9e1dfe7d":"def recall_m(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n    recall = true_positives \/ (possible_positives + K.epsilon())\n    return recall\n\ndef precision_m(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n    precision = true_positives \/ (predicted_positives + K.epsilon())\n    return precision\n\ndef f1_m(y_true, y_pred):\n#     y_true = K.argmax(y_true_in, axis=1)\n#     y_pred = K.argmax(y_pred_in, axis=1)\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))","6a1ebeae":"train= pd.read_csv('..\/input\/extensive-pre-processing-for-bert\/processed train.csv')\ntrain.head(5)","09e8d21f":"train.loc[4,'processed_text']","bda2573b":"test=pd.read_csv('..\/input\/extensive-pre-processing-for-bert\/processed test.csv')\ntest = test.set_index(test['id'])\ntest.head(5)","28195b08":"module_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\n# module_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-12_H-768_A-12\/1\"\n#https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\n#https:\/\/tfhub.dev\/tensorflow\/bert_en_wwm_uncased_L-24_H-1024_A-16\/1\nbert_layer = hub.KerasLayer(module_url, trainable=True)\n","ce4c2672":"\"\"\"BERT Methods Predefined\"\"\"\ndef bert_encode(texts, tokenizer, max_len=50):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)\n","7623201e":"print('There are {} rows and {} columns in train'.format(train.shape[0],train.shape[1]))\nprint('There are {} rows and {} columns in train'.format(test.shape[0],test.shape[1]))","df1471ae":"BertTokenizer = bert.bert_tokenization.FullTokenizer\nvocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = BertTokenizer(vocab_file, do_lower_case)","c64889e3":"full_input = bert_encode(train.processed_text.values, tokenizer, max_len=50)\nfull_labels = train.target.values.copy()\nfull_labels_oe = to_categorical(full_labels, 2)","d3ed4c39":"train_data, val_data, train_labels, val_labels = train_test_split(train.processed_text.values, train.target.values, test_size=0.15, random_state=10)\ntrain_input = bert_encode(train_data, tokenizer, max_len=50)\nval_input = bert_encode(val_data, tokenizer, max_len=50)\ntest_input = bert_encode(test.processed_text.values, tokenizer, max_len=50)\n\ntest_labels_oe = to_categorical(test_labels, 2)\nval_labels_oe = to_categorical(val_labels, 2)","cb96e24f":"learning_rate=9e-6\ndecay=9e-2\nmax_len=50\n\nK.clear_session()","250cfbe5":"input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\ninput_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\nsegment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\npooled_output, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\nclf_output = sequence_output[:, 0, :]\n# clf_pooled = pooled_output[:, 0, :]\n\n## Type1\n# out = Dense(100, activation='relu', activity_regularizer=regularizers.l2(9e-5))(clf_output)\n# out = Dense(100, activation='relu', activity_regularizer=regularizers.l2(9e-5))(out)\n# out = Dense(100, activation='relu')(out)\n\n## Type2\n# out = Dropout(Dropout_num)(clf_output)\nout = Dense(1024, activation='relu', activity_regularizer=regularizers.l2(9e-5))(clf_output)\nout = Dense(1024, activation='relu', activity_regularizer=regularizers.l2(9e-5))(out)\nout = Dense(1024, activation='relu')(out)\n\n## Type3\n# out = clf_output\n\n\nout = Dense(1, activation='sigmoid')(out)\n\n\n## Type4\n# out = clf_output","926693e9":"sBERT = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n# sBERT.compile(SGD(lr=learning_rate, momentum=0.9), loss='binary_crossentropy', metrics=['accuracy'])\nsBERT.compile(Adam(lr=learning_rate, decay=decay), loss='binary_crossentropy', metrics=['accuracy',f1_m])\nsBERT.summary()","a970146c":"# init_weights = sBERT.get_weights()","ce000759":"# sBERT.set_weights(init_weights)\n# sBERT.layers[3].trainable = True\n# sBERT.compile(Adam(lr=9e-6, decay=9e-2), loss='binary_crossentropy', metrics=['accuracy'])","3873d8b9":"checkpoint1 = ModelCheckpoint('best_accuracy.h5',\n                             monitor='val_f1_m',\n                             save_best_only=True)\ncheckpoint2 = ModelCheckpoint('best_loss.h5',\n                             monitor='val_loss',\n                             save_best_only=True)\n\n\ntrain_history = sBERT.fit(\n    full_input, full_labels,\n    epochs = 3,\n    batch_size = 12\n#     callbacks = [checkpoint1]\n)","3c7bca88":"# # K.set_value(sBERT.optimizer.lr, 9e-7)\n# train_history = sBERT.fit(\n#     full_input, full_labels,\n#     epochs = 3,\n#     batch_size = 16\n# #     callbacks = [checkpoint1]\n# )","61e1ac37":"# sBERT.layers[3].trainable = False\n# sBERT.compile(Adam(lr=5e-4, decay=5e-2), loss='binary_crossentropy', metrics=['accuracy',f1_m])","acec0b1d":"# # K.set_value(sBERT.optimizer.lr, 5e-3)\n# sBERT.fit(\n#     full_input, full_labels,\n#     epochs = 5,\n#     callbacks=[checkpoint1],\n#     batch_size = 16\n# )","0347cb7d":"# sBERT.load_weights('testacc.h5')","2463a7d9":"bert_encoder = Model(sBERT.inputs, sBERT.layers[4].output)\nbert_encoder.summary()\n\n# bert_encoder.layers[-3].set_weights(sBERT.layers[-4].get_weights())\n# bert_encoder.layers[-2].set_weights(sBERT.layers[-3].get_weights())","2c536737":"%%time\nfull_embed = bert_encoder.predict(full_input)\ntrain_embed = bert_encoder.predict(train_input)\ntest_embed = bert_encoder.predict(test_input)","665feb09":"import pickle\nwith open('Train BERT 1024d Embed', 'ab') as fo:     \n    pickle.dump(full_embed, fo)    \n\nwith open('Test BERT 1024d Embed', 'ab') as fo:     \n    pickle.dump(test_embed, fo)  ","0b5a50f6":"# with open('Train BERT 1024d Embed', 'rb') as fo:\n#     tt = pickle.load(fo, encoding='latin1')","1a5a0f58":"from sklearn.model_selection import StratifiedKFold, KFold, GridSearchCV\nfrom sklearn.svm import SVC","751f8787":"%%time\nsvc_model = SVC(gamma=0.01, kernel='rbf', C=3)\nsvc_model.fit(full_embed, full_labels)\n# svc_model.fit(train_embed, train_labels)","d667b218":"import xgboost as xgb","8fbec9c7":"%%time\n\nclf = xgb.XGBClassifier(max_depth=200, n_estimators=400, subsample=1, learning_rate=0.07, reg_lambda=0.1, reg_alpha=0.1,\\\n                       gamma=1)\nclf.fit(full_embed, full_labels)\n# clf.fit(train_embed, train_labels)\n\npredictions = clf.predict(full_embed)\n# predictions = clf.predict(train_embed)\nprint (\"Training set f1_score :\", np.round(f1_score(train_labels, predictions),5))","913cebce":"test_pred1 = clf.predict(test_embed).round().astype(int)\ntest_pred2 = svc_model.predict(test_embed).round().astype(int)\ntest_pred3 = sBERT.predict(test_input).round().astype(int)\nprint(\"XGBOOST: \", accuracy_score(test_labels, test_pred1), f1_score(test_labels, test_pred1))\nprint(\"SVC: \",accuracy_score(test_labels, test_pred2), f1_score(test_labels, test_pred2))\nprint(\"BERT: \",accuracy_score(test_labels, test_pred3), f1_score(test_labels, test_pred3))","3aeafa47":"sub = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")\n\nsub['target'] = test_pred1\nsub.to_csv('submission_xgboost.csv', index=False)\n\nsub['target'] = test_pred2\nsub.to_csv('submission_svc.csv', index=False)\n\nsub['target'] = test_pred3\nsub.to_csv('submission_bertnn.csv', index=False)","38964ebc":"# Pickle BERT Encodings for further use","bdb927d0":"# Support Vector Machine","71dd70b7":"# BERT Encodings"}}