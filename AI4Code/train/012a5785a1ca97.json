{"cell_type":{"5f772c03":"code","c2ba8e41":"code","cad79b24":"code","6de28303":"code","9252e4c6":"code","d87aedcb":"code","6a9aaa01":"code","680f7d63":"code","607c9a5a":"code","ce76fae2":"code","50015070":"code","610326a4":"code","2884e2a1":"code","21f2ab0b":"code","7ccb7442":"code","0633a6d5":"code","afd616ac":"code","b6cbca19":"code","b0513c2b":"markdown","ec4a16d8":"markdown","c7547f78":"markdown","111002b5":"markdown","0d4c2233":"markdown","aa49627b":"markdown","be97c969":"markdown","3d32a8a9":"markdown","7767e042":"markdown"},"source":{"5f772c03":"## This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2ba8e41":"!pip install sweetviz autoviz dataprep xlrd","cad79b24":"\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly as pl\n\nimport sweetviz as sv\nfrom autoviz.AutoViz_Class import AutoViz_Class\nfrom dataprep.eda import plot, plot_correlation, plot_missing\n","6de28303":"train = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\nsample_solution = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\n\nfeature_cols = list(train.columns[1:-1])\ntarget_col = train.columns[-1]\n","9252e4c6":"print('-'*40)\nprint('Training Dataframe Shape : ')\nprint('-'*40)\nprint(train.shape)\nprint('-'*40)\nprint('Testing Dataframe Shape : ')\nprint('-'*40)\nprint(test.shape)\nprint('-'*40)\nprint(\"Feature Columns\")\nprint('-'*40)\nprint(feature_cols)\nprint('-'*40)\nprint(\"Target Column\")\nprint(target_col)\nprint('-'*40)","d87aedcb":"train.head()","6a9aaa01":"train.info()\n","680f7d63":"train.describe()","607c9a5a":"target = train['claim']\n","ce76fae2":"!pip install lazypredict","50015070":"from lazypredict.Supervised import LazyClassifier, LazyRegressor\n\nfrom sklearn.datasets import load_boston\nfrom sklearn.model_selection import train_test_split\n\n# Load data and split\nX, y = load_boston(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Fit LazyRegressor\nreg = LazyRegressor(ignore_warnings=True, random_state=1121218, verbose=False)\nmodels, predictions = reg.fit(X_train, X_test, y_train, y_test) \n\nmodels.head(50)","610326a4":"import seaborn as sns\ntrain.describe().T.style.background_gradient(cmap=\"nipy_spectral\").set_precision(2)","2884e2a1":"train[feature_cols] = train[feature_cols].fillna(train[feature_cols].mean())\ntest[feature_cols] = test[feature_cols].fillna(test[feature_cols].mean())\n","21f2ab0b":"i = 1\nplt.figure()\nfig, ax = plt.subplots(30, 4,figsize=(20, 24))\nfor feature in feature_cols:\n    plt.subplot(30, 4,i)\n    sns.histplot(train[feature],color=\"cyan\", kde=True,bins=100, label='Train')\n    sns.histplot(test[feature],color=\"pink\", kde=True,bins=100, label='Test')\n    plt.xlabel(feature, fontsize=9) \n    plt.legend()\n    i += 1","7ccb7442":"plt.show()","0633a6d5":"\nplot_missing(train)\nplot_correlation(train)\nplot(train)","afd616ac":"sweet_report = sv.analyze(train,\"claim\")\nsweet_report.show_html('sweetviz_report.html')\nsweet_report.show_notebook(w=1500, h=300, scale=0.8)","b6cbca19":"AV = AutoViz_Class()\ndf_avtrain = AV.AutoViz('..\/input\/tabular-playground-series-sep-2021\/train.csv',depVar='claim')","b0513c2b":"### Let us install the libraries","ec4a16d8":"## Kaggle - Sep2021 - Tabular Playground EDA \n\nSimple EDA of the data available ","c7547f78":"### Let us load the datasets","111002b5":"### Loading libraries first","0d4c2233":"### First Description","aa49627b":"### Target COlumn in the Dataset","be97c969":"### First - Let us use standard environment from Kaggle","3d32a8a9":"### Some basic EDA Info","7767e042":"##"}}