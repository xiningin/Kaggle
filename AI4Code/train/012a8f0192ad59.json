{"cell_type":{"94cf78e8":"code","f922c05b":"code","836f3e26":"code","263c2e05":"code","7706f4ab":"code","f67f4ba2":"code","843c883a":"code","5fb72505":"code","312952fb":"code","0084e3e8":"code","06ed4056":"code","381dcf3b":"code","f8effb19":"code","b9328e30":"code","eac2fc60":"code","6eda39fb":"code","6c7f13d8":"code","0729f8b3":"code","21e37594":"code","b33c50d8":"code","67bd0ccd":"markdown","b38e2fd6":"markdown","66c5642e":"markdown","3f7ed5f5":"markdown","fc137b43":"markdown","b3b34922":"markdown","907a0206":"markdown","1a86a55e":"markdown","83963505":"markdown","a82b50dd":"markdown","ffd207a5":"markdown","d5a47811":"markdown","730d9b2e":"markdown","319db719":"markdown","3e59bcc7":"markdown","8260270c":"markdown","03742826":"markdown","1320b067":"markdown","28e2ef88":"markdown","f44119e6":"markdown"},"source":{"94cf78e8":"#!pip install transformers","f922c05b":"#for reproducability\nSEED = 34\n\n#maximum number of words in output text\nMAX_LEN = 70","836f3e26":"input_sequence = \"I don't know about you, but there's only one thing I want to do after a long day of work\"","263c2e05":"#get transformers\nfrom transformers import TFGPT2LMHeadModel, GPT2Tokenizer\n\n#get large GPT2 tokenizer and GPT2 model\ntokenizer = GPT2Tokenizer.from_pretrained(\"gpt2-large\")\nGPT2 = TFGPT2LMHeadModel.from_pretrained(\"gpt2-large\", pad_token_id=tokenizer.eos_token_id)\n\n#tokenizer = GPT2Tokenizer.from_pretrained(\"gpt2-medium\")\n#GPT2 = TFGPT2LMHeadModel.from_pretrained(\"gpt2-medium\", pad_token_id=tokenizer.eos_token_id)\n\n#tokenizer = GPT2Tokenizer.from_pretrained(\"gpt2\")\n#GPT2 = TFGPT2LMHeadModel.from_pretrained(\"gpt2\", pad_token_id=tokenizer.eos_token_id)\n\n#view model parameters\nGPT2.summary()","7706f4ab":"#get deep learning basics\nimport tensorflow as tf\ntf.random.set_seed(SEED)","f67f4ba2":"# encode context the generation is conditioned on\ninput_ids = tokenizer.encode(input_sequence, return_tensors='tf')\n\n# generate text until the output length (which includes the context length) reaches 50\ngreedy_output = GPT2.generate(input_ids, max_length = MAX_LEN)\n\nprint(\"Output:\\n\" + 100 * '-')\nprint(tokenizer.decode(greedy_output[0], skip_special_tokens = True))","843c883a":"# set return_num_sequences > 1\nbeam_outputs = GPT2.generate(\n    input_ids, \n    max_length = MAX_LEN, \n    num_beams = 5, \n    no_repeat_ngram_size = 2, \n    num_return_sequences = 5, \n    early_stopping = True\n)\n\nprint('')\nprint(\"Output:\\n\" + 100 * '-')\n\n# now we have 3 output sequences\nfor i, beam_output in enumerate(beam_outputs):\n      print(\"{}: {}\".format(i, tokenizer.decode(beam_output, skip_special_tokens=True)))","5fb72505":"# use temperature to decrease the sensitivity to low probability candidates\nsample_output = GPT2.generate(\n                             input_ids, \n                             do_sample = True, \n                             max_length = MAX_LEN, \n                             top_k = 0, \n                             temperature = 0.8\n)\n\nprint(\"Output:\\n\" + 100 * '-')\nprint(tokenizer.decode(sample_output[0], skip_special_tokens = True))","312952fb":"#sample from only top_k most likely words\nsample_output = GPT2.generate(\n                             input_ids, \n                             do_sample = True, \n                             max_length = MAX_LEN, \n                             top_k = 50\n)\n\nprint(\"Output:\\n\" + 100 * '-')\nprint(tokenizer.decode(sample_output[0], skip_special_tokens = True), '...')","0084e3e8":"#sample only from 80% most likely words\nsample_output = GPT2.generate(\n                             input_ids, \n                             do_sample = True, \n                             max_length = MAX_LEN, \n                             top_p = 0.8, \n                             top_k = 0\n)\n\nprint(\"Output:\\n\" + 100 * '-')\nprint(tokenizer.decode(sample_output[0], skip_special_tokens = True), '...')","06ed4056":"#combine both sampling techniques\nsample_outputs = GPT2.generate(\n                              input_ids,\n                              do_sample = True, \n                              max_length = 2*MAX_LEN,                              #to test how long we can generate and it be coherent\n                              #temperature = .7,\n                              top_k = 50, \n                              top_p = 0.85, \n                              num_return_sequences = 5\n)\n\nprint(\"Output:\\n\" + 100 * '-')\nfor i, sample_output in enumerate(sample_outputs):\n    print(\"{}: {}...\".format(i, tokenizer.decode(sample_output, skip_special_tokens = True)))\n    print('')","381dcf3b":"MAX_LEN = 150","f8effb19":"prompt1 = 'In a shocking finding, scientist discovered a herd of unicorns living in a remote, previously unexplored valley, in the Andes Mountains. Even more surprising to the researchers was the fact that the unicorns spoke perfect English.'\n\ninput_ids = tokenizer.encode(prompt1, return_tensors='tf')","b9328e30":"sample_outputs = GPT2.generate(\n                              input_ids,\n                              do_sample = True, \n                              max_length = MAX_LEN,                              #to test how long we can generate and it be coherent\n                              #temperature = .8,\n                              top_k = 50, \n                              top_p = 0.85 \n                              #num_return_sequences = 5\n)\n\nprint(\"Output:\\n\" + 100 * '-')\nfor i, sample_output in enumerate(sample_outputs):\n    print(\"{}: {}...\".format(i, tokenizer.decode(sample_output, skip_special_tokens = True)))\n    print('')","eac2fc60":"prompt2 = 'Miley Cyrus was caught shoplifting from Abercrombie and Fitch on Hollywood Boulevard today.'\n\ninput_ids = tokenizer.encode(prompt2, return_tensors='tf')","6eda39fb":"sample_outputs = GPT2.generate(\n                              input_ids,\n                              do_sample = True, \n                              max_length = MAX_LEN,                              #to test how long we can generate and it be coherent\n                              #temperature = .8,\n                              top_k = 50, \n                              top_p = 0.85\n                              #num_return_sequences = 5\n)\n\nprint(\"Output:\\n\" + 100 * '-')\nfor i, sample_output in enumerate(sample_outputs):\n    print(\"{}: {}...\".format(i, tokenizer.decode(sample_output, skip_special_tokens = True)))\n    print('')","6c7f13d8":"prompt3 = 'Legolas and Gimli advanced on the orcs, raising their weapons with a harrowing war cry.'\n\ninput_ids = tokenizer.encode(prompt3, return_tensors='tf')","0729f8b3":"sample_outputs = GPT2.generate(\n                              input_ids,\n                              do_sample = True, \n                              max_length = MAX_LEN,                              #to test how long we can generate and it be coherent\n                              #temperature = .8,\n                              top_k = 50, \n                              top_p = 0.85 \n                              #num_return_sequences = 5\n)\n\nprint(\"Output:\\n\" + 100 * '-')\nfor i, sample_output in enumerate(sample_outputs):\n    print(\"{}: {}...\".format(i, tokenizer.decode(sample_output, skip_special_tokens = True)))\n    print('')","21e37594":"prompt4 = \"For today\u2019s homework assignment, please describe the reasons for the US Civil War.\"\n\ninput_ids = tokenizer.encode(prompt4, return_tensors='tf')","b33c50d8":"sample_outputs = GPT2.generate(\n                              input_ids,\n                              do_sample = True, \n                              max_length = MAX_LEN,                              #to test how long we can generate and it be coherent\n                              #temperature = .8,\n                              top_k = 50, \n                              top_p = 0.85 \n                              #num_return_sequences = 5\n)\n\nprint(\"Output:\\n\" + 100 * '-')\nfor i, sample_output in enumerate(sample_outputs):\n    print(\"{}: {}...\".format(i, tokenizer.decode(sample_output, skip_special_tokens = True)))\n    print('')","67bd0ccd":"**Now we can see why OpenAI is hesitate to release their full scale model (recall, over 1.5 billion parameters) to the general public...it has the potential to do a lot of harm when used with malevolent intentions. Luckily, they have still provided us smaller versions that allow us to demonstrate just how powerful Transformer models are when applied to natural language and how they provide an analytical space from which to study linguistics.**\n\n**Feel free to fork this notebook and experiment with your own inputs and model parameters to see what type of computer generated stories you can create!**","b38e2fd6":"## \"Miley Cyrus was caught shoplifting from Abercrombie and Fitch on Hollywood Boulevard today.\"\n\n**Can we use GPT-2 to generate fake news stories?**","66c5642e":"**Top-K Sampling seems to generate more coherent text than our random sampling before. But we can do even better:**","3f7ed5f5":"**And there we go: generating text is that easy. Our results are not great - as we can see, our model starts repeating itself rather quickly. The main issue with Greedy Search is that words with high probabilities can be masked by words in front of them with low probabilities, so the model is unable to explore more diverse combinations of words. We can prevent this by implementing Beam Search:**","fc137b43":"**We will choose the largest available GPT-2 model but it is easy to install the other sizes if you want to mess around with them:**","b3b34922":"## \"In a shocking finding, scientist discovered a herd of unicorns living in a remote, previously unexplored valley, in the Andes Mountains. Even more surprising to the researchers was the fact that the unicorns spoke perfect English.\"","907a0206":"## \"Legolas and Gimli advanced on the orcs, raising their weapons with a harrowing war cry.\"\n\n**Can we use GPT-2 to imagine alternate histories of Lord of the Rings?**","1a86a55e":"## Basic Sampling\n\n**Now we will explore indeterministic decodings - sampling. Instead of following a strict path to find the end text with the highest probability, we instead randomly pick the next word by its conditional probability distribution:**\n\n$$w_t \\sim P(w|w_{1:t-1})$$\n\n**However, when we include this randomness, the generated text tends to be incoherent (see more [here](https:\/\/arxiv.org\/pdf\/1904.09751.pdf)) so we can include the `temperature` parameter which increases the chances of high probability words and decreases the chances of low probability words in the sampling:**\n\n**We just need to set `do_sample = True` to implement sampling and for demonstration purposes (you'll shortly see why) we set `top_k = 0`:**","83963505":"# References\n\n**Below are the only references you need to implement your own GPT-2 model for text generation**\n\n\n> https:\/\/arxiv.org\/abs\/1904.09751  \n> https:\/\/openai.com\/blog\/better-language-models\/  \n> https:\/\/huggingface.co\/transformers\/model_doc\/gpt2.html  \n> https:\/\/huggingface.co\/blog\/how-to-generate  ","a82b50dd":"# II. Different Decoding Methods\n\n## First Pass (Greedy Search)\n\n**With Greedy search, the word with the highest probability is predicted as the next word i.e. the next word is updated via:**\n\n$$w_t = argmax_{w}P(w | w_{1:t-1})$$\n\n**at each timestep $t$. Let's see how this naive approach performs:**","ffd207a5":"## Top-K and Top-P Sampling\n\n**As you could have probably guessed, we can use both Top-K and Top-P sampling here. This reduces the chances of us getting weird words (low probability words) while allowing for a dynamic selection size. We need only top a value for both `top_k` and `top_p`. We can even include the inital temperature parameter if we want to, Let's now see how our model performs now after adding everything together. We will check the top 5 return to see how diverse our answers are:**","d5a47811":"# III. Benchmark Prompts\n\n**Here, we will see how well the GPT-2 model does when given some more interesting inputs. The following prompts are taken from [OpenAI's GPT2](https:\/\/openai.com\/blog\/better-language-models\/) website where they feed them to their full sized GPT2 model (and the results are astounding, I highly recommend you check out their [page](https:\/\/openai.com\/)**","730d9b2e":"## Top-K Sampling\n\n**In Top-K sampling, the top k most likely next words are selected and the entire probability mass is shifted to these k words. So instead of increasing the chances of high probability words occuring and decreasing the chances of low probabillity words, we just remove low probability words all together**\n\n**We just need to set `top_k` to however many of the top words we want to consider for our conditional probability distribution:**","319db719":"**Now that's much better! The 5 different beam hypotheses are pretty much all the same, but if we increaed `num_beams`, then we would see some more variation in the separate beams. But of course, Beam Search is not perfect either. It works well when the legnth of the generated text is more or less constant, like problems in translation or summarization, but not so much for open-ended problems like dialog or story generation (because it is much harder to find a balance between `num_beams` and `no_repeat_ngram_size`)**\n\n**Furthermore, [research](https:\/\/arxiv.org\/abs\/1904.09751) shows that human languages do not follow this 'high probability word next' distribution. This makes sense - if my words were exactly what you expected them to be, I would be quite a boring person and most people don't want to be boring! The below graph plots the difference of Beam Search and actual human speech: ![alt text](https:\/\/blog.fastforwardlabs.com\/images\/2019\/05\/Screen_Shot_2019_05_08_at_3_06_36_PM-1557342561886.png)**\n\nTaken from original paper [here](https:\/\/arxiv.org\/abs\/1904.09751)","3e59bcc7":"## \"For today\u2019s homework assignment, please describe the reasons for the US Civil War.\"\n\n**Can we use GPT-2 to do our homework?**","8260270c":"## Beam Search with N-Gram Penalities\n\n**Beam search is essentially Greedy Search but the model tracks and keeps `num_beams` of hypotheses at each time step, so the model is able to compare alternative paths as it generates text. We can also include a n-gram penalty by setting `no_repeat_ngram_size = 2` which ensures that no 2-grams appear twice. We will also set `num_return_sequences = 5` so we can see what the other 5 beams looked like**\n\n**To use Beam Search, we need only modify some parameters in the `generate` function:**","03742826":"## Top-P Sampling\n\n**Top-P sampling (also known as nucleus sampling) is similar to Top-K, but instead of choosing the top k most likely wordsm we choose the smallest set of words whose total probability is larger than p, and then the entire probability mass is shifted to the words in this set**\n\n**The main difference here is that with Top-K sampling, the size of the set of words is static (obviously) whereas in Top-P sampling, the size of the set can change. To use this sampling method, we just set `top_k = 0` and choose a value `top_p`:**","1320b067":"**Wow, we just imported a deep learning model with more than 774 million parameters in just a couple lines of code with HuggingFace. Now let's see what we can do with it:**","28e2ef88":"# Experimenting with HuggingFace - Text Generation\n\n*Author: Tucker Arrants*\n\n**I have recently decided to explore the ins and outs of the \ud83d\ude0a Transformers library and this is the next chapter in that journey. In this notebook, I will explore text generation using a GPT-2 model, which was trained to predict next words on 40GB of Internet text data. The fully trained model is actually not available as the creators were concerned about '[malicious applications of the technology](https:\/\/openai.com\/blog\/better-language-models\/)', but there is a much smaller version that is available for enthusiants to play with, which we will use here**\n\n**In this notebook, we will explore different decoding methods like Beam search, Top-K sampling, and Top-P sampling, demonstrating their performance along the way. This project is a work in progress and I will continually update it as I learn more about text generation. Feel free to comment with any questions\/suggestions:**\n\n**Update: they just released the GPT-3 model (more [here](https:\/\/www.technologyreview.com\/2020\/07\/20\/1005454\/openai-machine-learning-language-generator-gpt-3-nlp\/)) and it has 175 billion parameters and it is shockingly intelligent**","f44119e6":"# I. Intro\n\n**A language model is a machine learning model that can look at part of a sentence and predict the next word\/sequence of words. Much like the autofill features on your iPhone\/Android, GPT-2 is capable of next word prediction on a much larger and more sophisticated scale. For reference, the smallest available GPT-2 has 117 million parameters, whereas the largest one (invisible to the public) has over 1.5 billion parameters. The largest one available for public use is half the size of their main GPT-2 model**\n\n**\ud83d\ude0a Transformers makes it very easy to import this model with both PyTorch and TensorFlow - in this notebook we will be using TensorFlow but it is just as easy in PyTorch. Both the model and its Tokenizer can be imported from the `transformers` library that anyone can get by typing `!pip install transformers`. Let's see just how simple it is to generate text with a neural network. We begin with our input sequence:**"}}