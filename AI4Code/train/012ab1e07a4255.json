{"cell_type":{"1b5557ba":"code","452d9718":"code","b0b1e178":"code","6a6cd373":"code","10fd76dd":"code","d3f652c5":"code","ab94a44c":"code","32101dcc":"code","e371eab6":"code","e479707d":"code","112ba379":"code","d89368be":"code","b4f98782":"code","8f996862":"code","14a0ff9f":"code","3479b861":"code","80828014":"code","32b12dd9":"code","88120186":"code","4d11ff7a":"code","f06c65b6":"code","ef37e6e8":"code","bba83423":"code","678933c2":"code","a5bf1ae4":"code","703a5ca9":"code","dcd85744":"code","e8c8239f":"code","71af6551":"code","0f157441":"code","580f3d88":"code","378605ac":"code","252353e6":"code","e4f76661":"code","cbd6463c":"code","19fc0a25":"code","a8a3090d":"code","71750b33":"code","2169766e":"markdown","cdf0e2f1":"markdown","f6ec4111":"markdown","86f444f3":"markdown","fc21f561":"markdown","8bba7525":"markdown","7fa85483":"markdown","3e1675b4":"markdown","bdc7631b":"markdown"},"source":{"1b5557ba":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Makes graph display in notebook\n%matplotlib inline   ","452d9718":"supermarket_data = pd.read_csv('..\/input\/train.csv')","b0b1e178":"supermarket_data.head()","6a6cd373":"#Displaty the number of rows and columns\nsupermarket_data.shape","10fd76dd":"supermarket_data.describe()","d3f652c5":"supermarket_data.dtypes","ab94a44c":"#Remove Id columns\ncols_2_remove = ['Product_Identifier', 'Supermarket_Identifier', 'Product_Supermarket_Identifier']\n\nnew_data = supermarket_data.drop(cols_2_remove, axis=1)","32101dcc":"new_data.head()","e371eab6":"cat_cols = ['Product_Fat_Content','Product_Type',\n            'Supermarket _Size', 'Supermarket_Location_Type',\n           'Supermarket_Type' ]\n\nnum_cols = ['Product_Weight', 'Product_Shelf_Visibility',\n            'Product_Price', 'Supermarket_Opening_Year', 'Product_Supermarket_Sales']","e479707d":"for col in cat_cols:\n    print('Value Count for', col)\n    print(new_data[col].value_counts())\n    print(\"---------------------------\")","112ba379":"counts = new_data['Supermarket_Type'].value_counts() # find the counts for each unique category\ncounts","d89368be":"colors = ['green', 'red', 'blue', 'yellow', 'purple']\n\nfor i,col in enumerate(cat_cols):\n    fig = plt.figure(figsize=(6,6)) # define plot area\n    ax = fig.gca() # define axis  \n    \n    counts = new_data[col].value_counts() # find the counts for each unique category\n    counts.plot.bar(ax = ax, color = colors[i]) # Use the plot.bar method on the counts data frame\n    ax.set_title('Bar plot for ' + col)\n\n","b4f98782":"new_data.head(3)","8f996862":"for col in num_cols:\n    fig = plt.figure(figsize=(6,6)) # define plot area\n    ax = fig.gca() # define axis  \n\n    new_data.plot.scatter(x = col, y = 'Product_Supermarket_Sales', ax = ax)\n","14a0ff9f":"for col in cat_cols:\n    sns.set_style(\"whitegrid\")\n    sns.boxplot(col, 'Product_Supermarket_Sales', data=new_data)\n    plt.xlabel(col) # Set text for the x axis\n    plt.ylabel('Product Supermarket Sales')# Set text for y axis\n    plt.show()\n  ","3479b861":"#save the target value\ny_target = new_data['Product_Supermarket_Sales']\nnew_data.drop(['Product_Supermarket_Sales'], axis=1, inplace=True)","80828014":"new_data.head(2)","32b12dd9":"# dummy_data = pd.get_dummies(new_data)\n# dummy_data.head()","88120186":"from sklearn.preprocessing import LabelEncoder","4d11ff7a":"for cat in cat_cols:\n    lb = LabelEncoder()\n    lb.fit(list(new_data[cat].values))\n    new_data[cat] = lb.transform(list(new_data[cat].values))","f06c65b6":"new_data.head()","ef37e6e8":"new_data.isnull().sum()","bba83423":"mean_pw = np.mean(new_data['Product_Weight'])","678933c2":"new_data['Product_Weight'].fillna(mean_pw, inplace=True)","a5bf1ae4":"new_data.isnull().sum()","703a5ca9":"new_data.head()","dcd85744":"from sklearn.preprocessing import StandardScaler","e8c8239f":"scaler = StandardScaler()\nscaler.fit(new_data)\n\nscaled_data = scaler.transform(new_data)","71af6551":"scaled_data  # train data","0f157441":"from sklearn.model_selection import train_test_split","580f3d88":"X_train, X_test, Y_train, Y_test = train_test_split(scaled_data, y_target, test_size = 0.3)","378605ac":"X_test.shape","252353e6":"from sklearn.linear_model import LinearRegression\nlinear_model = LinearRegression()\nlinear_model.fit(X_train, Y_train)","e4f76661":"linear_model.predict(X_test)","cbd6463c":"from sklearn.ensemble import RandomForestRegressor\nrandom_forest = RandomForestRegressor()\nrandom_forest.fit(X_train, Y_train)","19fc0a25":"random_forest.predict(X_test)","a8a3090d":"from sklearn.metrics import mean_absolute_error","71750b33":"mean_absolute_error(Y_test, linear_model.predict(X_test))","2169766e":"Import my data","cdf0e2f1":"## FEATURE ENGINEERING\n\nTransform categorical features into numerical features","f6ec4111":"## DATA VISUALIZATION\n### BAR PLOT","86f444f3":"## PERFORM NORMALIZATION AND SCALING","fc21f561":"# Scatter plot for Numerical Features","8bba7525":"__Option 1: You can use the pandas get_dummies function when working smaller categories__","7fa85483":"## Fill in Missing Values","3e1675b4":"##Using Neural Network","bdc7631b":"Start by importing all the libraries i will be using"}}