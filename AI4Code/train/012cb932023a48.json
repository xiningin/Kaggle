{"cell_type":{"42539a85":"code","c2808132":"code","cca2a45c":"code","a7613d1e":"code","092bf49c":"code","b9b106e7":"code","d78ce4f6":"code","a08cb648":"code","c67f6cd5":"code","90c5ea17":"code","86707dc6":"code","a83fa1c9":"code","a86a1913":"code","5d680e74":"code","9039b4d7":"code","6c5cdc2c":"markdown","2bd120a2":"markdown","ec830c39":"markdown","a4458699":"markdown","125deeeb":"markdown","1e101f25":"markdown"},"source":{"42539a85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2808132":"import json\n\nfrom pathlib import Path\nfrom collections import Counter\nfrom wordcloud import WordCloud\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","cca2a45c":"pwd","a7613d1e":"folderName = Path('..\/input\/packages-used-in-kernels\/')\nfileName = 'py_packages.json'\n\nprint(folderName)\nprint(folderName \/ fileName)\n\nwith open(folderName \/ fileName) as f:\n    data = json.load(f)","092bf49c":"import_lens = [len(kernel_data) for kernel_data in data]\nN = max(import_lens)\nprint(\n    f'Maximum number of packages: {N} and Minimum number of packages: {min(import_lens)}')","b9b106e7":"def bins_labels(bins, **kwargs):\n    bin_w = (max(bins) - min(bins)) \/ (len(bins) - 1)\n    plt.xticks(np.arange(min(bins)+bin_w\/2, max(bins), bin_w), bins, **kwargs)\n    plt.xlim(bins[0], bins[-1])","d78ce4f6":"figsize = (16, 8)\nbins = list(range(0, N))\n\nplt.style.use('ggplot')\nplt.figure(figsize=figsize)\nplt.hist(import_lens, bins=bins, density=True)\nbins_labels(bins, fontsize=20)\nplt.title('Number of Imported Packages')\nplt.xlabel('Number of Packages')\nplt.ylabel('Frequency')","a08cb648":"figsize = (8, 6)\nplt.style.use('ggplot')\nplt.figure(figsize=figsize)\nplt.boxplot(import_lens, showmeans=True)\nplt.xticks(ticks=[1], labels=['No of Packages'])\nplt.title('Number of Imported Packages')","c67f6cd5":"# %%timeit -o\ncount = Counter([])\nfor kernel_data in data:\n    count.update(list(elem[1] for elem in kernel_data))","90c5ea17":"complete_text = []\nfor kernel_data in data:\n    complete_text.append(' '.join(list(elem[1] for elem in kernel_data)))","86707dc6":"package_freq = pd.Series(count)\npackage_freq","a83fa1c9":"top_10_packages = package_freq.sort_values(ascending=False)[0:10]\ntop_10_packages","a86a1913":"figsize = (16, 8)\n\nplt.style.use('ggplot')\nplt.figure(figsize=figsize)\nplt.bar(top_10_packages.index, top_10_packages\/sum(package_freq))\nplt.title('Top 10 packages')\nplt.xlabel('Package names')\nplt.ylabel('Frequency')","5d680e74":"wordcloud = WordCloud(width=800, height=800, collocations=False,\n                      background_color='white',\n                      min_font_size=10)","9039b4d7":"cloud = wordcloud.generate(' '.join(complete_text))\n\nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(cloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.show() ","6c5cdc2c":"### WordCloud","2bd120a2":"In this notebook we answer the following questions\n\n*  How many packages are imported per kernel\n\n*  What are the most frequently used packages\n\nFinally we have word cloud of the packages used.","ec830c39":"This clearly shows numpy, matplotlib, pandas are the most used packages. \n\nSurprisingly there is no mention of torch in this list!","a4458699":"Let us read the py_packages file and analyze the data to find the top python packages.","125deeeb":"### Number of Packages per Kernel","1e101f25":"### Most used packages"}}