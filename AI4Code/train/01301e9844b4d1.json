{"cell_type":{"de37fd48":"code","b0de2178":"code","a9195c21":"code","0c874019":"code","1ce0575d":"code","008d2da2":"code","423cb95c":"code","f3fd07a6":"code","a5777b7e":"code","0d4c464d":"code","dd431d25":"code","0fb0c842":"code","2d32c91a":"code","e603967e":"code","e40f8220":"code","6bfd0003":"markdown","424920db":"markdown"},"source":{"de37fd48":"import warnings\nwarnings.filterwarnings(\"ignore\")","b0de2178":"!pip install -U fedot","a9195c21":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c874019":"import lib_accii_53","1ce0575d":"close = lib_accii_53.get_Close()","008d2da2":"close","423cb95c":"from fedot.core.data.data import InputData\nfrom fedot.core.data.data_split import train_test_data_setup\nfrom fedot.core.repository.dataset_types import DataTypesEnum\nfrom fedot.core.repository.tasks import Task, TaskTypesEnum, TsForecastingParams\nfrom fedot.api.main import Fedot","f3fd07a6":"forecast_length = 20\ntask_parameters = TsForecastingParams(forecast_length=forecast_length)\n\ntask = Task(TaskTypesEnum.ts_forecasting,\n                task_parameters)\n\nfirstClose = np.array(close.iloc[:,0])\ninput_data = InputData(idx=np.arange(0, len(firstClose)),\n                       features=firstClose,\n                       target=firstClose,\n                       task=task,\n                       data_type=DataTypesEnum.ts)\ntrain_input, predict_input = train_test_data_setup(input_data)","a5777b7e":"model = Fedot(problem='ts_forecasting', task_params=task_parameters, timeout=60.0)\npipeline = model.fit(features=train_input)","0d4c464d":"pipeline.show()","dd431d25":"forecast = model.predict(features=predict_input)","0fb0c842":"model.get_metrics(metric_names=['rmse', 'mae', 'mape'], target=predict_input.target)","2d32c91a":"def plot_results(actual_time_series, predicted_values, len_train_data, y_name = 'Parameter'):\n    \n    all_len = len_train_data+len(predicted_values)\n    all_data = actual_time_series[-all_len:]\n    plt.figure(figsize=(18,7))\n    plt.plot(np.arange(0, all_len), \n             all_data, label = 'Actual values', c = 'green')\n    plt.plot(np.arange(len_train_data, len_train_data + len(predicted_values)), \n             predicted_values, label = 'Predicted', c = 'blue')\n    # Plot black line which divide our array into train and test\n    plt.plot([len_train_data, len_train_data],\n             [min(all_data), max(all_data)], c = 'black', linewidth = 1)\n    plt.ylabel(y_name, fontsize = 15)\n    plt.xlabel('Time index', fontsize = 15)\n    plt.legend(fontsize = 15, loc='upper left')\n    plt.grid()\n    plt.show()","e603967e":"plot_results(actual_time_series = firstClose,\n             predicted_values = forecast, \n             len_train_data = 5*forecast_length)","e40f8220":"pipeline.save(path='model')","6bfd0003":"https:\/\/github.com\/ITMO-NSS-team\/fedot-examples\/blob\/main\/notebooks\/latest\/4_auto_ts_forecasting.ipynb","424920db":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a"}}