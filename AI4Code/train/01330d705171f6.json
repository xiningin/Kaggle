{"cell_type":{"2db4ce68":"code","39142e69":"code","c7494eda":"code","edb9fe05":"code","d7e85ccd":"code","4f01b7cb":"code","3e2ef66d":"code","5a6649f3":"code","b61e6e4b":"code","7b7a655e":"code","bc4820e9":"code","4ff12913":"code","64019aef":"code","3ab30783":"code","153c6dea":"code","d014d205":"code","71cd0aeb":"markdown","f7b9a990":"markdown","bdff7eab":"markdown"},"source":{"2db4ce68":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39142e69":"# for data load\nimport os\n\n# for reading and processing images\nimport imageio\nfrom PIL import Image\nimport tifffile\n# !pip install imagecodecs\nimport imagecodecs\nimport cv2\n\n# for visualizations\nimport matplotlib.pyplot as plt\n\nimport numpy as np # for using np arrays\nfrom numpy import asarray\n\n# for bulding and running deep learning model\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import MaxPooling2D\nfrom tensorflow.keras.layers import Dropout \nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras.layers import Conv2DTranspose\nfrom tensorflow.keras.layers import concatenate\nfrom tensorflow.keras.losses import binary_crossentropy\nfrom sklearn.model_selection import train_test_split","c7494eda":"def LoadData (path1):\n    # Read the images folder like a list\n    image_dataset = os.listdir(path1)\n\n    # Make a list for images and masks filenames\n    orig_img = []\n    mask_img = []\n    image_dataset.sort()\n    for file in image_dataset:\n        if file.endswith('_mask.tif'):\n            mask_img.append(file)\n            orig_img.append(file.replace(\"_mask.tif\",\".tif\"))       \n\n    # Sort the lists to get both of them in same order (the dataset has exactly the same name for images and corresponding masks)\n    # orig_img.sort()\n    # mask_img.sort()\n    \n    return orig_img, mask_img","edb9fe05":"path1 = '..\/input\/ultrasound-nerve-segmentation\/train\/'\nimg, mask = LoadData (path1)\n\nshow_images = 134\n\nimg_view  = imageio.imread(path1 + img[show_images])\nmask_view = imageio.imread(path1 + mask[show_images])\n\nprint(img_view.shape)\nprint(mask_view.shape)\nfig, arr = plt.subplots(1, 2, figsize=(15, 15))\narr[0].imshow(img_view)\narr[0].set_title('Image ' + img[show_images])\narr[1].imshow(mask_view)\narr[1].set_title('Masked Image '+ mask[show_images])","d7e85ccd":"def PreprocessData(img, mask, target_shape_img, target_shape_mask, path1, path2):\n    \"\"\"\n    Processes the images and mask present in the shared list and path\n    Returns a NumPy dataset with images as 3-D arrays of desired size\n    Please note the masks in this dataset have only one channel\n    \"\"\"\n    # Pull the relevant dimensions for image and mask\n    m = len(img)                     # number of images\n    i_h,i_w,i_c = target_shape_img   # pull height, width, and channels of image\n    m_h,m_w,m_c = target_shape_mask  # pull height, width, and channels of mask\n    \n    # Define X and Y as number of images along with shape of one image\n    X = np.zeros((m,i_h,i_w,i_c), dtype=np.float32)\n    y = np.zeros((m,m_h,m_w,m_c), dtype=np.int32)\n    \n    # Resize images and masks\n    for file in img:\n        # convert image into an array of desired shape (3 channels)\n        index = img.index(file)\n        path = os.path.join(path1, file)\n        single_img = Image.open(path).convert('RGB')\n        single_img = single_img.resize((i_h,i_w))\n        single_img = np.reshape(single_img,(i_h,i_w,i_c)) \n        single_img = single_img\/256.\n        X[index] = single_img\n        \n        # convert mask into an array of desired shape (1 channel)\n        \n        single_mask_ind = mask[index]\n        path = os.path.join(path1, single_mask_ind)\n        single_mask = cv2.imread(path, cv2.IMREAD_GRAYSCALE) \n        single_mask = cv2.resize(single_mask, dsize=(m_h, m_w), interpolation=cv2.INTER_NEAREST)\n        single_mask = asarray(single_mask)\n        single_mask = single_mask[..., tf.newaxis]\n        single_mask = np.reshape(single_mask,(m_h,m_w,m_c)) \n        single_mask = single_mask\/255\n        single_mask = single_mask.astype(int) \n        y[index] = single_mask\n    return X, y","4f01b7cb":"# Define the desired shape\ntarget_shape_img = [128, 128, 3]\ntarget_shape_mask = [128, 128, 1]\n\n# Process data using apt helper function\n\nX, y = PreprocessData(img, mask, target_shape_img, target_shape_mask, path1, path1)\n\n# QC the shape of output and classes in output dataset \nprint(\"X Shape:\", X.shape)\nprint(\"Y shape:\", y.shape)\n# There are 2 classes\nprint(np.unique(y))\n\n# Visualize the output\nimage_index = 0\nfig, arr = plt.subplots(1, 2, figsize=(15, 15))\narr[0].imshow(X[image_index])\narr[0].set_title('Processed Image')\narr[1].imshow(y[image_index,:,:,0])\narr[1].set_title('Processed Masked Image ')","3e2ef66d":"def EncoderMiniBlock(inputs, n_filters=32, dropout_prob=0.3, max_pooling=True):\n    \"\"\"\n    This block uses multiple convolution layers, max pool, relu activation to create an architecture for learning. \n    Dropout can be added for regularization to prevent overfitting. \n    The block returns the activation values for next layer along with a skip connection which will be used in the decoder\n    \"\"\"\n    # Add 2 Conv Layers with relu activation and HeNormal initialization using TensorFlow \n    # Proper initialization prevents from the problem of exploding and vanishing gradients \n    # 'Same' padding will pad the input to conv layer such that the output has the same height and width (hence, is not reduced in size) \n    conv = Conv2D(n_filters, \n                  3,   # Kernel size   \n                  activation='relu',\n                  padding='same',\n                  kernel_initializer='HeNormal')(inputs)\n    conv = Conv2D(n_filters, \n                  3,   # Kernel size\n                  activation='relu',\n                  padding='same',\n                  kernel_initializer='HeNormal')(conv)\n    \n    # Batch Normalization will normalize the output of the last layer based on the batch's mean and standard deviation\n    conv = BatchNormalization()(conv, training=False)\n\n    # In case of overfitting, dropout will regularize the loss and gradient computation to shrink the influence of weights on output\n    if dropout_prob > 0:     \n        conv = tf.keras.layers.Dropout(dropout_prob)(conv)\n\n    # Pooling reduces the size of the image while keeping the number of channels same\n    # Pooling has been kept as optional as the last encoder layer does not use pooling (hence, makes the encoder block flexible to use)\n    # Below, Max pooling considers the maximum of the input slice for output computation and uses stride of 2 to traverse across input image\n    if max_pooling:\n        next_layer = tf.keras.layers.MaxPooling2D(pool_size = (2,2))(conv)    \n    else:\n        next_layer = conv\n\n    # skip connection (without max pooling) will be input to the decoder layer to prevent information loss during transpose convolutions      \n    skip_connection = conv\n    \n    return next_layer, skip_connection","5a6649f3":"def DecoderMiniBlock(prev_layer_input, skip_layer_input, n_filters=32):\n    \"\"\"\n    Decoder Block first uses transpose convolution to upscale the image to a bigger size and then,\n    merges the result with skip layer results from encoder block\n    Adding 2 convolutions with 'same' padding helps further increase the depth of the network for better predictions\n    The function returns the decoded layer output\n    \"\"\"\n    # Start with a transpose convolution layer to first increase the size of the image\n    up = Conv2DTranspose(\n                 n_filters,\n                 (3,3),    # Kernel size\n                 strides=(2,2),\n                 padding='same')(prev_layer_input)\n\n    # Merge the skip connection from previous block to prevent information loss\n    merge = concatenate([up, skip_layer_input], axis=3)\n    \n    # Add 2 Conv Layers with relu activation and HeNormal initialization for further processing\n    # The parameters for the function are similar to encoder\n    conv = Conv2D(n_filters, \n                 3,     # Kernel size\n                 activation='relu',\n                 padding='same',\n                 kernel_initializer='HeNormal')(merge)\n    conv = Conv2D(n_filters,\n                 3,   # Kernel size\n                 activation='relu',\n                 padding='same',\n                 kernel_initializer='HeNormal')(conv)\n    return conv","b61e6e4b":"def UNetCompiled(input_size=(128, 128, 3), n_filters=32, n_classes=2):\n    inputs = Input(input_size)\n\n    # Encoder includes multiple convolutional mini blocks with different maxpooling, dropout and filter parameters\n    # Observe that the filters are increasing as we go deeper into the network which will increasse the # channels of the image \n    cblock1 = EncoderMiniBlock(inputs, n_filters,dropout_prob=0, max_pooling=True)\n    cblock2 = EncoderMiniBlock(cblock1[0],n_filters*2,dropout_prob=0, max_pooling=True)\n    cblock3 = EncoderMiniBlock(cblock2[0], n_filters*4,dropout_prob=0, max_pooling=True)\n    cblock4 = EncoderMiniBlock(cblock3[0], n_filters*8,dropout_prob=0.3, max_pooling=True)\n    cblock5 = EncoderMiniBlock(cblock4[0], n_filters*16, dropout_prob=0.3, max_pooling=False) \n\n    # Decoder includes multiple mini blocks with decreasing number of filters\n    # Observe the skip connections from the encoder are given as input to the decoder\n    # Recall the 2nd output of encoder block was skip connection, hence cblockn[1] is used\n    ublock6 = DecoderMiniBlock(cblock5[0], cblock4[1],  n_filters * 8)\n    ublock7 = DecoderMiniBlock(ublock6, cblock3[1],  n_filters * 4)\n    ublock8 = DecoderMiniBlock(ublock7, cblock2[1],  n_filters * 2)\n    ublock9 = DecoderMiniBlock(ublock8, cblock1[1],  n_filters)\n\n    # Complete the model with 1 3x3 convolution layer (Same as the prev Conv Layers)\n    # Followed by a 1x1 Conv layer to get the image to the desired size. \n    # Observe the number of channels will be equal to number of output classes\n    conv9 = Conv2D(n_filters,\n                3,\n                activation='relu',\n                padding='same',\n                kernel_initializer='he_normal')(ublock9)\n\n    conv10 = Conv2D(n_classes, 1, padding='same')(conv9)\n\n    # Define the model\n    model = tf.keras.Model(inputs=inputs, outputs=conv10)\n\n    return model","7b7a655e":"# Use scikit-learn's function to split the dataset\n# Here, I have used 20% data as test\/valid set\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=123)\n\n# Call the helper function for defining the layers for the model, given the input image size\nunet = UNetCompiled(input_size=(128,128,3), n_filters=32, n_classes=2)\n\n# Check the summary to better interpret how the output dimensions change in each layer\nunet.summary()","bc4820e9":"# There are multiple optimizers, loss functions and metrics that can be used to compile multi-class segmentation models\n# Ideally, try different options to get the best accuracy\nunet.compile(optimizer=tf.keras.optimizers.Adam(), \n             loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\n# Run the model in a mini-batch fashion and compute the progress for each epoch\nresults = unet.fit(X_train, y_train, batch_size=32, epochs=20, validation_data=(X_valid, y_valid))","4ff12913":"## predict test set\npath2 = '..\/input\/ultrasound-nerve-segmentation\/test\/'\nimage_dataset = os.listdir(path2)\ntest_img = []\nfor file in image_dataset:\n    test_img.append(file)","64019aef":"# create a table with X and Y\n\nm = len(test_img)                     # number of images\ni_h,i_w,i_c = target_shape_img   # pull height, width, and channels of image\n\n# Define X and Y as number of images along with shape of one image\ntest_X = np.zeros((m,i_h,i_w,i_c), dtype=np.float32)\n\n# Resize images and masks\nfor file in test_img:\n    # convert image into an array of desired shape (3 channels)\n    index = test_img.index(file)\n    path = os.path.join(path2, file)\n    single_img = Image.open(path).convert('RGB')\n    single_img = single_img.resize((i_h,i_w))\n    single_img = np.reshape(single_img,(i_h,i_w,i_c)) \n    single_img = single_img\/256.\n    test_X[index] = single_img\n    \n\n# predict masks\ntest_y = []\nfor img in test_X:\n    img = img[np.newaxis, ...]\n    pred_y = unet.predict(img)\n    pred_mask = tf.argmax(pred_y[0], axis=-1)\n    test_y.append(pred_mask)","3ab30783":"def rle_encoding(x):\n    '''\n    x: numpy array of shape (height, width), 1 - mask, 0 - background\n    Returns run length as list\n    '''\n    dots = np.where(x.T.flatten()==1)[0] # .T sets Fortran order down-then-right\n    run_lengths = []\n    prev = -2\n    for b in dots:\n        if (b>prev+1): run_lengths.extend((b+1, 0))\n        run_lengths[-1] += 1\n        prev = b\n    return run_lengths","153c6dea":"import pandas as pd\ntest_output = pd.DataFrame(columns = ['img','pixels'])\n\nfor i,item in enumerate(test_y):\n    encoding = rle_encoding(item.numpy())\n    pixels = ' '.join(map(str, encoding))\n    df = {'img': test_img[i][:-4], 'pixels': pixels}\n    test_output = test_output.append(df, ignore_index = True)\n\ntest_output","d014d205":"test_output.to_csv('\/kaggle\/working\/submission.csv', index=False)","71cd0aeb":"## 1. UNDERSTAND THE DATA","f7b9a990":"## 2. UNET MODELING","bdff7eab":"## 3. PREDICTIONS"}}