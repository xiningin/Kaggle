{"cell_type":{"1973c10d":"code","de824525":"code","b480bff8":"code","cab4c85f":"code","48f0e203":"code","0a8f38c5":"code","6168d769":"code","799d8807":"code","cf66525b":"code","27414180":"code","8fe60e8f":"code","5292353f":"code","42533edd":"code","83846cbd":"markdown","f960b6e5":"markdown"},"source":{"1973c10d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\nimport os\nprint(os.listdir(\"..\/input\"))","de824525":"data = pd.read_csv(\"..\/input\/NBA_player_of_the_week.csv\")","b480bff8":"# First 5 rows of data.\ndata.head()","cab4c85f":"data.info()","48f0e203":"# Dropping Nan values\ndata.dropna(inplace=True)","0a8f38c5":"# I've dropped some columns bec. of that index is not starting like 0 1 2 maybe 356 389 ...\n# So i will sort and make the index to start 0 with arange.\ndata.index = np.arange(0,len(data))\ndata[\"Active season\"].value_counts()","6168d769":"data.drop(['Active season','Real_value'],axis=1,inplace=True)\ndata.head()","799d8807":"# Correlation's heatmap.\nf,ax = plt.subplots(figsize=(10,8))\nsns.heatmap(data.corr(),annot=True, linewidths=.5,fmt=\".1f\",ax=ax)\nplt.show()","cf66525b":"data.Age.plot(kind = 'line',color = 'black',label = 'AGE',linewidth=1,alpha=0.6,grid=True,linestyle = '-')\ndata[\"Seasons in league\"].plot(color = \"blue\",label = \"SEASONS IN LEAGUE\",linewidth=1,alpha=0.6,grid=True,linestyle=\"-.\")\nplt.legend(loc=\"upper right\")\nplt.xlabel(\"Age & Seasons in League\")\nplt.ylabel(\"Value\")\nplt.title(\"Age - Seasons in League Graphic\")\nplt.show()","27414180":"data.plot(kind = \"scatter\",x = \"Age\", y = \"Seasons in league\", alpha = 0.5, color=\"Black\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Seasons in league \")\nplt.title(\"Analyzing on Scatter\")\nplt.show()\nplt.savefig(\"Graphic.png\")","8fe60e8f":"data.Age.plot(kind = 'hist',bins = 50,figsize = (10,8))\nplt.show()","5292353f":"threshold = sum(data.Age)\/len(data.Age)\ndata[\"Age Comparison\"] = [\"High\" if i > threshold else \"Low\" for i in data.Age]\ndata.loc[:10,[\"Age Comparison\",\"Age\"]]","42533edd":"# Players that have high Seasons in League\nbestplayers=data[data[\"Seasons in league\"] == max(data[\"Seasons in league\"])][\"Player\"]\nbestplayers.index = np.arange(0,len(bestplayers))\nprint(\"1.player is :\"+bestplayers[0]+\"\\n2.player is :\"+bestplayers[1])","83846cbd":"***REFERENCE***\n\nhttps:\/\/www.kaggle.com\/kanncaa1\/data-sciencetutorial-for-beginners","f960b6e5":"In this kernel we will make some basic visualizations and data analysis. So let's start!"}}