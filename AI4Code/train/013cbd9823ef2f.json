{"cell_type":{"3e03e3de":"code","cbca8d8b":"code","a1adc559":"code","d866c8a5":"code","a785e87f":"code","2dab5697":"code","bcced5ff":"code","b5af84eb":"code","8bac3a77":"code","a7182b4a":"code","ff9758f9":"code","68a0f853":"code","17f38a32":"code","8e63cfd0":"code","378b3ffd":"code","6fd18ffa":"code","122c7927":"markdown","edb08d5c":"markdown","bd45923e":"markdown","8b4cdae1":"markdown","e4ade5a6":"markdown","0fa33102":"markdown"},"source":{"3e03e3de":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nfrom sklearn.metrics import classification_report, confusion_matrix","cbca8d8b":"dfs = []\n\nfor label in ['0', '1', '2', '3']:\n    dfs.append(pd.read_csv('..\/input\/emg-4\/' + label + '.csv'))","a1adc559":"for df in dfs:\n    df.columns = list(range(len(df.columns)))","d866c8a5":"data = pd.concat([df for df in dfs], axis=0).reset_index(drop=True)","a785e87f":"data","2dab5697":"print(\"Total missing values:\", data.isna().sum().sum())","bcced5ff":"y = data[64].copy()\nX = data.drop(64, axis=1).copy()","b5af84eb":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","8bac3a77":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=100)","a7182b4a":"X_train.shape","ff9758f9":"inputs = tf.keras.Input(shape=(X.shape[1],))\nx = tf.keras.layers.Dense(1024, activation='relu')(inputs)\nx = tf.keras.layers.Dropout(0.2)(x)\nx = tf.keras.layers.Dense(1024, activation='relu')(x)\nx = tf.keras.layers.Dropout(0.2)(x)\noutputs = tf.keras.layers.Dense(4, activation='softmax')(x)\n\nmodel = tf.keras.Model(inputs, outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nbatch_size = 32\nepochs = 50\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    callbacks=[\n        tf.keras.callbacks.ReduceLROnPlateau()\n    ]\n)","68a0f853":"plt.figure(figsize=(16, 10))\n\nplt.plot(range(epochs), history.history['loss'], label=\"Training Loss\")\nplt.plot(range(epochs), history.history['val_loss'], label=\"Validation Loss\")\n\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.title(\"Loss Over Time\")\n\nplt.show()","17f38a32":"model.evaluate(X_test, y_test)","8e63cfd0":"y_true = np.array(y_test)\ny_pred = np.array(list(map(lambda x: np.argmax(x), model.predict(X_test))))","378b3ffd":"cm = confusion_matrix(y_true, y_pred)\n\nplt.figure(figsize=(6, 6))\nsns.heatmap(cm, annot=True, fmt='g', cmap='Blues', cbar=False)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Confusion Matrix\")\nplt.show()","6fd18ffa":"print(classification_report(y_true, y_pred))","122c7927":"# Getting Started","edb08d5c":"# Results","bd45923e":"# Task for Today  \n\n***\n\n## Hand Gesture Classification  \n\nGiven *tabular data about four hand gestures*, let's try to classify the **gesture** of a given example.\n\nWe will use a TensorFlow ANN to make our predictions.","8b4cdae1":"# Splitting\/Scaling","e4ade5a6":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/8HLUmsMV2ho","0fa33102":"# Training"}}