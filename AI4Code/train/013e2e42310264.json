{"cell_type":{"85b1fa58":"code","6bf4fed5":"code","6c259b85":"code","f009d4dd":"code","73cfd224":"code","a0fcaa4e":"code","851498e0":"code","12e4ba9e":"code","58506e92":"code","201bb8ce":"code","4aec6996":"code","11d96778":"code","17190321":"code","eb5a78c7":"code","33a3cbd3":"code","93f3bca8":"code","33a0f53d":"code","274bf841":"markdown"},"source":{"85b1fa58":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6bf4fed5":"data=pd.read_csv(\"\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv\")","6c259b85":"data.head()","f009d4dd":"data.info()","73cfd224":"data.drop([\"id\",\"Unnamed: 32\"],axis=1,inplace=True)","a0fcaa4e":"data.diagnosis = [1 if each==\"M\" else 0 for each in data.diagnosis]","851498e0":"y=data.diagnosis.values\nx=data.iloc[:,1:]","12e4ba9e":"#normalize x\nx=(x-np.min(x))\/(np.max(x)-np.min(x))","58506e92":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)","201bb8ce":"x_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T","4aec6996":"def initial(dimension):\n    w= np.full([dimension,1],0.01)\n    b=0\n    return w,b\ndef sigmoid(z):\n    y_head=1\/(1+np.exp(-z))\n    return y_head\n    ","11d96778":"def ForwardBackward(w,b,x_train,y_train):\n    z= np.dot(w.T,x_train)+b\n    y_head = sigmoid(z)\n    loss=-y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost=(np.sum(loss))\/x_train.shape[1]\n    \n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost,gradients","17190321":"def Update(w,b,x_train,y_train,learning,itnumber):\n    index=[]\n    cost_list=[]\n    for i in range(itnumber):\n        cost,gradients=ForwardBackward(w,b,x_train,y_train)\n        w=w-learning*gradients[\"derivative_weight\"]\n        b=b-learning*gradients[\"derivative_bias\"]\n        if(i%10==0):\n            cost_list.append(cost)\n            index.append(i)\n            print(\"updated cost is {}\".format(cost))\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, cost_list","eb5a78c7":"def Predict(w,b,x_test):\n    z=np.dot(w.T,x_test)+b\n    z_=sigmoid(z)\n    y_predict=np.zeros((1,x_test.shape[1]))\n    for i in range(z_.shape[1]):\n        if z[0,i]<=0.5:\n            y_predict[0,i]=0\n        else:\n            y_predict[0,i]=1\n    return y_predict\n\n\n    ","33a3cbd3":"def LogReg(x_train,y_train,x_test,y_test,learning,itnumber):\n    dim=x_train.shape[0]\n    w,b = initial(dim)\n    parameters,cost_list=Update(w,b,x_train,y_train,learning,itnumber)\n    y_predict=Predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    print(\"Accuracy: {} %\".format(100 - np.mean(np.abs(y_predict - y_test)) * 100))","93f3bca8":"import matplotlib.pyplot as plt\nLogReg(x_train,y_train,x_test,y_test,learning=1,itnumber=30)","33a0f53d":"LogReg(x_train,y_train,x_test,y_test,learning=1.7,itnumber=300)","274bf841":"Implementing Logistic Regression Functions"}}