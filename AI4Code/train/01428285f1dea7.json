{"cell_type":{"671975c8":"code","6375f94a":"code","6452c801":"code","232e0fb0":"code","ce87bf65":"code","cb5795c3":"code","e77a4321":"code","9345a980":"code","bb622124":"code","288d99b6":"code","4b693a46":"code","f3387624":"code","cf8bc356":"code","d0558e95":"code","205345f4":"code","db77fc0a":"code","d9378e6a":"code","d5e7b84a":"code","534fa2ab":"code","c65bb39f":"code","5b3fa1aa":"code","b7150d2e":"code","df2f56aa":"code","c1ed8631":"code","a7e755c2":"code","16d55b6a":"code","56ab3c0a":"code","f1e9f503":"code","910d6c94":"code","688b8d42":"code","14dd21a4":"code","a7307cf7":"code","0ce6a161":"code","fdb8ab7b":"code","1c46e52d":"code","7d9d57c6":"code","8e29db57":"code","5cbc885d":"code","87e8ed4e":"code","5e06fa41":"code","f0dbaf14":"code","a1947a21":"code","a7f0ca8d":"code","76fd339b":"code","65ba67f9":"code","0b2d18d6":"code","696a3ebe":"code","93ed96e0":"code","8de587bd":"code","142746d9":"code","727a1138":"code","5833397f":"code","9d64a2f9":"code","03fb0811":"code","67f06180":"code","d7959b90":"code","7f7dcef9":"code","42eb6b60":"code","c7c50fba":"code","dccfa1ac":"code","b614bb6d":"code","5882082d":"code","91ded50c":"code","d0176c3e":"code","579e94b0":"code","a8f5007b":"code","5a29d078":"code","1267fc04":"code","fc088fd7":"markdown","27f38847":"markdown","c2745a6a":"markdown","f2b4d6aa":"markdown","83078e7f":"markdown","445a0308":"markdown","22183ce4":"markdown","bd484f41":"markdown","c5a5b12f":"markdown","5318d6d3":"markdown","f7a71fd0":"markdown","3b1b1016":"markdown","5ebc2c6d":"markdown","7a0aba22":"markdown","467f8215":"markdown","bcf33755":"markdown","ea367a98":"markdown","c2df29c2":"markdown","aa88d93d":"markdown","f2a5d799":"markdown","6dcba7f8":"markdown","021669dc":"markdown","873b36d5":"markdown","e4195dbe":"markdown","0ed757f6":"markdown","7a464034":"markdown","9f0e01bd":"markdown","c9fae24a":"markdown","bb1649c7":"markdown","baa4bb4e":"markdown","d65fa1c4":"markdown","70d1ca0d":"markdown","32d7915b":"markdown","52e9d96b":"markdown"},"source":{"671975c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6375f94a":"#integer(int): We use it in definitions of numbers that are external to certain (decimal numbers).\n\na = 5 #integer\nb = 7 #integer\nc = 4 #integer\nd = 10 #integer\n\nvar_sum = a + b #Adds our values a and b\nvar_subtracts = d - c #Subtracts our values d and c\n\n#we use the print () command to print our values\n\nprint(var_sum)\nprint(var_subtracts)","6452c801":"#integer(int): We use it in definitions of numbers that are external to certain (decimal numbers).\n\n#EXAMPLE 1:\na = 100\nx = 500\nd = 400\ne = 600\n\nvar_transactions = (d+e) - (a+x)\n\nprint(var_transactions)","232e0fb0":"#integer(int): We use it in definitions of numbers that are external to certain (decimal numbers).\n\n#EXAMPLE 2:\ns = 10\nd = 40\nc = 50\na = 20\n\nvar_math = ((s*d) \/ c) * a\n\nprint(var_math)","ce87bf65":"#integer(int): We use it in definitions of numbers that are external to certain (decimal numbers).\n\n#EXAMPLE 3:\nx = 4\ny = 5\nz = 8\n\nvar_math = (x+y+z)**2 #'**2'it takes the square of the released value.\n\nprint(var_math)","cb5795c3":"#float: We can say that it is a data variable containing decimal numbers other than normal numbers (example; 10.2)\n\na = 10.2 #float\nb = 9.8 #float\nc = 20.5 #float\nd = 34.2 #float\n\nvar_sum = a + b #Adds our values a and b\nvar_subtracts = d - c #Subtracts our values d and c\n\n#we use the print () command to print our values\n\nprint(var_sum)\nprint(var_subtracts)","e77a4321":"#float: We can say that it is a data variable containing decimal numbers other than normal numbers (example; 10.2)\n#integer(int): We use it in definitions of numbers that are external to certain (decimal numbers).\n\n#EXAMPLE 1\n\na = 10 #integer\nb = 2.2 #float\nc = 100 #integer\nd = 14.8 #float\n\nvar_math1 = (a*b) + (a*c) - (c*d)\n\nprint(var_math1)","9345a980":"#float: We can say that it is a data variable containing decimal numbers other than normal numbers (example; 10.2)\n#integer(int): We use it in definitions of numbers that are external to certain (decimal numbers).\n\n#EXAMPLE 2\n\na = 10 #integer\nb = 2.2 #float\nc = 100 #integer\nd = 14.8 #float\n\nvar_math2 = (a+b)**2\n\nprint(var_math2)","bb622124":"#float: We can say that it is a data variable containing decimal numbers other than normal numbers (example; 10.2)\n#integer(int): We use it in definitions of numbers that are external to certain (decimal numbers).\n\n#EXAMPLE 3\n\nx = 1000\nc = 100\nd = 10\ne = 10.5\n\nvar_math3 = ((x\/c) * d) * e + 1000\n\nprint(var_math3)","288d99b6":"#string: We use not as a number, but as a variable we assign to our texts or texts.\n\nname = \"john\" #string\nsurname = \"jackson\" #string\njob = \"doctor\" #string\n\nprint(name, surname, \"is a\", job)","4b693a46":"#string: We use not as a number, but as a variable we assign to our texts or texts.\n\n#EXAMPLE 1\n\nnumber1 = \"100\"\nnumber2 = \"300\"\n\nprint(number1,number2)\nprint(number1 + number2)","f3387624":"#string: We use not as a number, but as a variable we assign to our texts or texts.\n\n#INCORRECT EXAMPLE\n\nnumber3 = \"100\"\nnumber4 = 300\n\nprint(number3 + number4) #We can't do the aggregation of the post with an integer value.\n# TypeError: must be str, not int","cf8bc356":"#string: We use not as a number, but as a variable we assign to our texts or texts.\n\n#EXAMPLE 2\n\nname1 = \"Alex\"\nsurname2 = \"John\"\nage = 19 #integer\njob = \"Student\"\n\nprint(name1,surname2, age, \"years old and\", \"He is a\", job)","d0558e95":"#usage: dir(class) -- we write whatever class we want to call the class\n\ndir(str)","205345f4":"#usage: dir(class) -- we write whatever class we want to call the class\n\ndir(int)","db77fc0a":"# It shows which variable we use our data. usage: type(class)\n\na = 10 #integer\nb = 50 #integer\n\nx = a + b\nprint(x)\ntype(x)","d9378e6a":"# It shows which variable we use our data. usage: type(class)\n\nname4 = \"angelica\"\nsurname4 = \"john\"\n\nx = name4 + surname4\nprint(x)\ntype(x)","d5e7b84a":"# It gives us information about the text length (s) of the variable we have defined. - len(class)\n\nx = \"100\"\nc = \"he is 20 years old\"\n\nlen(x) # \"100\" converted us to 3 because its value is 3 characters","534fa2ab":"# It gives us information about the text length (s) of the variable we have defined. - len(class)\n\n#EXAMPLE 1:\n\nx = 100 #int\ny = \"20000\" #str\nz = x + len(y) #int + len(str)\n\nprint(z)","c65bb39f":"# As the name suggests, a method that allows us to change a certain value. -- variable.replace(\"value\",\"new_value\")\n\ntxt = \"He is 10 years old\"\nx = txt.replace(\"10\",\"20\")\n\nprint(txt) #default\nprint(x) #replace","5b3fa1aa":"# Converts the first character to upper case -- variable.capitalize()\n\nhigh = \"hello world\"\nhigh.capitalize()","b7150d2e":"# Converts string into lower case - variable.casefold()\n\nhigh2 = \"HELLO WORLD\"\nhigh2.casefold()","df2f56aa":"#Returns true if the string ends with the specified value. -- variable.endswith()\n\nvariable = \"hello world\"\nvariable.endswith(\"d\")","c1ed8631":"#Returns true if the string ends with the specified value. -- variable.endswith()\n\nvariable = \"hello world\"\nvariable.endswith(\"a\")","a7e755c2":"# Searches the string for a specified value and returns the position of where it was found -- variable.index()\n\nvariables = \"hello world\"\nvariables.index(\"d\")","16d55b6a":"# Searches the string for a specified value and returns the position of where it was found -- variable.index()\n\n# EXAMPLE 1:\n\nvariable2 = 10\nvariables = \"hello world\"\nvariables.index(\"d\")\n\nx = variable2 + variables.index(\"d\")\nprint(x)","56ab3c0a":"#islower: Returns True if all characters in the string are lower case\n\nis_lower = \"this a text\"\nx = is_lower.islower()\n\nprint(x)","f1e9f503":"#isupper: Returns True if all characters in the string are upper case\n\nis_upper = \"THIS A TEXT\"\nx = is_upper.isupper()\n\nprint(x)","910d6c94":"#lower: Converts a string into lower case\n\nlower_text = \"LOWER TEXT\"\nz = lower_text.lower()\n\nprint(z)","688b8d42":"#upper: Converts a string into upper case\n\nupper_text = \"upper text\"\nz = upper_text.upper()\n\nprint(z)","14dd21a4":"#strip: Returns a trimmed version of the string\n\nstrip_text = \"xx ddarkk007 xx\"\ns = strip_text.strip(\"xx\")\n\nprint(s)\n\n#lstrip: Returns a left trim version of the string\n\nlstrip_text = \"yy ddarkk007 yy\"\nl = lstrip_text.lstrip(\"yy\")\n\nprint(l)\n\n#rstrip: Returns a right trim version of the string\n\nrstrip_text = \"zz ddarkk007 zz\"\nr = rstrip_text.lstrip(\"zz\")\n\nprint(r)","a7307cf7":"#center: Returns a centered string\n\ncenter_text = \"centered string\"\nx = center_text.center(50)\n\nprint(x)","0ce6a161":"#A list is a collection which is ordered and changeable. In Python lists are written with square brackets.\n\nlist1 = [\"orange\",\"apple\",\"watermelon\"] #create a list\nprint(list1)","fdb8ab7b":"#Is list1 really a list?\n\nprint(type(list1)) #ok this a list","1c46e52d":"#You access the list items by referring to the index number:\n\nlist2 = [\"first\",\"second\",\"third\"]\nx = list2[0] #we called element 0 of the list\n\nprint(x)","7d9d57c6":"# Let's call the element at the bottom of the list\n\nlist3 = [\"first\",\"second\",\"third\"]\ny = list3[-1]\n\nprint(y)","8e29db57":"# You can specify a range of indexes by specifying where to start and where to end the range.\n\nthislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"strawberry\"]\nx = thislist[1:4] # 1.banana 2.cherry 3.orange 4.kiwi(not included)\n\nprint(x)","5cbc885d":"# Reverse the list\n\nthislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"strawberry\"]\na = thislist[::-1]\n\nprint(a)","87e8ed4e":"# To change the value of a specific item, refer to the index number:\n# default list = thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"strawberry\"]\n\nthislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"strawberry\"]\nthislist[0] = \"watermelon\"\nthislist[1] = \"apple\"\n\nprint(thislist)","5e06fa41":"# EXAMPLES\n\n# EXAMPLE 1: Create a list!\ncreate_list = [\"1\",\"2\",\"3\",\"4\",\"5\"]\n\n# EXAMPLE 2: Select the 1st element by synchronizing the list values to c\nc = create_list[0]\nprint(c)\n\n# EXAMPLE 3: Print from 1 to 3\nprint(create_list[0:3])\n\n# EXAMPLE 4: create_list query your type\nprint(type(create_list))\n\n# EXAMPLE 5: Reverse a list\nprint(create_list[::-1])","f0dbaf14":"# To add an item to the end of the list, use the append() method:\n\nx = secondlist = [\"ddarkk\",\"yellow\",\"green\",\"world\"] #default list\nprint(x)\n\nsecondlist.append(\"hello\") #append hello list\nprint(secondlist)","a1947a21":"# To add an item at the specified index, use the insert() method:\n\nthislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.insert(1, \"orange\")\n\nprint(thislist)","a7f0ca8d":"# The remove() method removes the specified item:\n\nthislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.remove(\"banana\")\nprint(thislist)","76fd339b":"# The pop() method removes the specified index, (or the last item if index is not specified):\n\nthislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.pop(1)\nprint(thislist)","65ba67f9":"# The del keyword removes the specified index:\n\nthislist = [\"apple\", \"banana\", \"cherry\"]\ndel thislist[0]\nprint(thislist)","0b2d18d6":"# The list failed because it was deleted\n\nthislist = [\"apple\", \"banana\", \"cherry\"]\ndel thislist\n\nprint(thislist)","696a3ebe":"#The clear() method empties the list:\n\nnew_list = [\"green\",\"yellow\",\"black\"]\nnew_list.clear()\nprint(new_list)","93ed96e0":"#There are ways to make a copy, one way is to use the built-in List method copy().\n\nnew_list = [\"green\",\"yellow\",\"black\"]\ncopy_list = new_list.copy()\nprint(copy_list)","8de587bd":"# There are several ways to join, or concatenate, two or more lists in Python.\n\nlist1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\n\nlist3 = list1 + list2\nprint(list3) ","142746d9":"# Use the extend() method to add list2 at the end of list1:\n\nlist1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\n\nlist1.extend(list2)\nprint(list1)","727a1138":"dir(list)","5833397f":"# Create and print a dictionary:\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nnew_dict","9d64a2f9":"#Is new_dict really a dictionaries?\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nprint(type(new_dict))","03fb0811":"# You can access the items of a dictionary by referring to its key name, inside square brackets:\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nx = new_dict[\"model\"]\nprint(x)\n\n# There is also a method called get() that will give you the same result:\n\ny = new_dict.get(\"year\")\nprint(y)","67f06180":"# You can change the value of a specific item by referring to its key name:\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nz = new_dict[\"model\"] = \"New_Dictionaries\"\nprint(new_dict)","d7959b90":"# To determine how many items (key-value pairs) a dictionary has, use the len() method.\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nprint(len(new_dict))","7f7dcef9":"# Adding an item to the dictionary is done by using a new index key and assigning a value to it:\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nnew_variable = new_dict[\"color\"] = \"red\"\n\nprint(new_variable)\nprint(new_dict)","42eb6b60":"# There are several methods to remove items from a dictionary:\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nnew_variable = new_dict[\"color\"] = \"red\"\nremove_variable = new_dict.pop(\"color\")\n\nprint(remove_variable)\nprint(new_dict)","c7c50fba":"# The del keyword removes the item with the specified key name:\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\ndel new_dict[\"year\"]\n\nprint(new_dict)","dccfa1ac":"# Convert a dictionary to a list\n\nz = list(new_dict)\nprint(z)\n","b614bb6d":"# It is also possible to use the dict() constructor to make a new dictionary:\n\nthisdict = dict(brand=\"Ford\", model=\"Mustang\", year=1964)\nthisdict","5882082d":"new1_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nmy_dict = new1_dict.copy()\n\nprint(my_dict)\n","91ded50c":"# Create a Tuple:\n\ntuple2 = (\"python\",\"ddarkk\",\"green\")\nprint(tuple2)","d0176c3e":"# You can access tuple items by referring to the index number, inside square brackets:\n\ntuple2 = (\"python\",\"ddarkk\",\"green\")\nprint(tuple2[1])","579e94b0":"# Negative indexing means beginning from the end, -1 refers to the last item, -2 refers to the second last item etc.\n\ntuple2 = (\"python\",\"ddarkk\",\"green\")\nprint(tuple2[-1])","a8f5007b":"# You can specify a range of indexes by specifying where to start and where to end the range.\n# When specifying a range, the return value will be a new tuple with the specified items.\n\ntuple2 = (\"python\",\"ddarkk\",\"green\")\nprint(tuple2[0:2])","5a29d078":"# Specify negative indexes if you want to start the search from the end of the tuple:\n\ntuple2 = (\"python\",\"ddarkk\",\"green\")\nprint(tuple2[-2:-1])","1267fc04":"\"\"\"\nOnce a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called.\nBut there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.\n\"\"\"\n\nx = (\"apple\", \"banana\", \"cherry\")\ny = list(x) #x convert to list\ny[1] = \"kiwi\"\nx = tuple(y)\n\nprint(x)","fc088fd7":"<a id='22'><\/a>\n# append() methods\nTo add an item to the end of the list, use the append() method:","27f38847":"<a id='25'><\/a>\n# pop() methods\nThe pop() method removes the specified index, (or the last item if index is not specified):","c2745a6a":"<a id='30'><\/a>\n# extend() method\nUse the extend() method to add list2 at the end of list1:","f2b4d6aa":"<a id='26'><\/a>\n# del methods\nThe del keyword removes the specified index:","83078e7f":"<a id='4'><\/a>\n## String(str)\nWe use not as a number, but as a variable we assign to our texts or texts.","445a0308":"<a id='24'><\/a>\n# remove() methods\nThe remove() method removes the specified item:","22183ce4":"<a id='5'><\/a>\n# Most Used Methods","bd484f41":"<a id='25'><\/a>\n# Dictionaries and Methods\nA dictionary is a collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values.\n\n    *Can change, new data can be added and unordered","c5a5b12f":"<a id='6'><\/a>\n## dir() method\nIt is a method that allows us to see what methods are created by Python.","5318d6d3":"<a id='8'><\/a>\n## len() method\nIt gives us information about the text length (s) of the variable we have defined.","f7a71fd0":"<a id='13'><\/a>\n# endswith() method\nReturns true if the string ends with the specified value.","3b1b1016":"<a id='19'><\/a>\n# strip() method\nReturns a trimmed version of the string","5ebc2c6d":"<a id='15'><\/a>\n# islower() method\nReturns True if all characters in the string are lower case","7a0aba22":"<a id='10'><\/a>\n# replace() method\nAs the name suggests, a method that allows us to change a certain value.","467f8215":"<a id='12'><\/a>\n# casefold() method\nConverts string into lower case","bcf33755":"<a id='23'><\/a>\n# insert() methods\nTo add an item at the specified index, use the insert() method:","ea367a98":"<a id='18'><\/a>\n# upper() method\nConverts a string into upper case","c2df29c2":"<a id='28'><\/a>\n# copy() methods\nThere are ways to make a copy, one way is to use the built-in List method copy().","aa88d93d":"<a id='14'><\/a>\n# index() method\nSearches the string for a specified value and returns the position of where it was found","f2a5d799":"<a id='29'><\/a>\n# Liste Merge\nThere are severalaways to join, or concatenate, two or more lists in Python.","6dcba7f8":"<a id='9'><\/a>\n# String Methods\nWe will apply useful and necessary methods for the articles.","021669dc":"<a id='16'><\/a>\n# isupper() method\nReturns True if all characters in the string are upper case","873b36d5":"<a id='27'><\/a>\n# clear() methods\nThe clear() method empties the list:","e4195dbe":"<a id='21'><\/a>\n# Lists and Methods\nIn this section we will look at lists and methods.\n* Features of the lists; Ordered, data can be added,removed and changed","0ed757f6":"<a id=2><\/a>\n## Integer(int)\nWe use it in definitions of numbers that are external to certain (decimal numbers).","7a464034":"<a id='20'><\/a>\n## Other Methods\n[Different and other methods](https:\/\/www.w3schools.com\/python\/python_strings.asp)","9f0e01bd":"<a id='11'><\/a>\n# capitalize() method\nConverts the first character to upper case","c9fae24a":"# Python Basics Example\n\n## Indruction: In this article, we will make examples of general python basics, I would like to get new trainings on these issues and reinforce them, and I wanted to create such an article. <u>Over time, all data will continue to be updated daily.<\/u>\n\n<font color='blue'>\n# Content\n\n1. [Introduction to Variables](#1)\n    * [Integer(int)](#2)\n    * [Float(float)](#3)\n    * [String(str)](#4)\n1. [Most Used Methods](#5)\n    * [dir() method](#6)\n    * [type() method](#7)\n    * [len() method](#8)\n    * [String Methods](#9)\n        * [replace() method](#10)\n        * [capitalize() method](#11)\n        * [casefold() method](#12)\n        * [endswith() method](#13)\n        * [index() method](#14)\n        * [islower() method](#15)\n        * [isupper() method](#16)\n        * [lower() method](#17)\n        * [upper() method](#18)\n        * [strip() method](#19)\n        * [other methods](#20)\n    * [Lists and Methods](#21)\n    * [Dictionaries and Methods](#25)\n    * [Tuples and Methods](#26)","bb1649c7":"<a id='7'><\/a>\n## type() method\nIt shows which variable we use our data.","baa4bb4e":"<a id='3'><\/a>\n## Float\nWe can say that it is a data variable containing decimal numbers other than normal numbers (example; 10.2)","d65fa1c4":"<a id='1'><\/a>\n# Introduction to Variables","70d1ca0d":"<a id='26'><\/a>\n# Tuples and Methods\nA tuple is a collection which is ordered and unchangeable. In Python tuples are written with round brackets.","32d7915b":"<a id='31'><\/a>\n# Other lists methods","52e9d96b":"<a id='17'><\/a>\n# lower() method\nConverts a string into lower case"}}