{"cell_type":{"1fb690b7":"code","5d65d64b":"code","0566003f":"code","e2a90bc7":"code","1bd1ead3":"code","325bde32":"code","265cfc3a":"code","1b774008":"code","372b2df3":"code","45b2650f":"code","807a30c2":"code","1b8d1354":"code","46dd78ae":"code","60c7bc6e":"code","a99f1466":"code","e3e0d84d":"code","3d7011a1":"code","2170943d":"code","5fae1ae1":"code","0a38194d":"code","ab1a3768":"code","0f703958":"code","8f1654c7":"code","c2f0ba62":"code","8d099dc9":"code","e4705b7d":"code","656e8835":"code","73c8d884":"code","bc66f943":"code","ea6f0a7c":"code","7b410b8c":"code","425404a4":"markdown","f53c3cac":"markdown","68a39f1e":"markdown","9bb358ef":"markdown","43134da1":"markdown","618ab8d7":"markdown","117de600":"markdown","bdc4e638":"markdown","11f634e5":"markdown","04885ad2":"markdown","f0887185":"markdown","78d92600":"markdown"},"source":{"1fb690b7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport seaborn as sb\nimport plotly.express as px\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import accuracy_score,classification_report\nimport warnings\nwarnings.simplefilter('ignore')\n\nplt.style.use('dark_background')","5d65d64b":"df = pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\ndf.head(10)","0566003f":"df.info()","e2a90bc7":"df.describe().T.style.bar(subset=['mean'], color='#205fA2').background_gradient(subset=['std'], cmap='Reds').background_gradient(subset=['50%'], cmap='PuOr')","1bd1ead3":"df.shape","325bde32":"df.isnull().sum()","265cfc3a":"msno.matrix(df,figsize=(12,8))","1b774008":"plt.figure(figsize=(12,8))\nsb.countplot(data = df ,x=\"quality\", color='w')\nplt.title(\"Quality Counts\", fontsize=15)\nplt.xlabel(\"Quality\", fontsize=14)\nplt.ylabel(\"Counts\", fontsize=14)\nplt.grid()","372b2df3":"px.violin(df, x=\"quality\", y=\"fixed acidity\", width=1000, height=600, template=\"plotly_dark\",title=\"Fixed Acidity against Quality\",orientation=\"v\")","45b2650f":"px.strip(df, x=\"quality\", y=\"citric acid\", width=1000, height=600, template=\"plotly_dark\",title=\"Citric Acid against Quality\",orientation=\"v\")","807a30c2":"px.scatter(df, x=\"quality\", y=\"residual sugar\", width=1000, height=600, template=\"plotly_dark\",title=\"Residual Sugar against Quality\")","1b8d1354":"px.scatter(df, x=\"quality\", y=\"chlorides\", width=1000, height=600, template=\"plotly_dark\",title=\"Chlorides against Quality\")","46dd78ae":"px.violin(df, x=\"quality\", y=\"density\", width=1000, height=600, template=\"plotly_dark\",title=\"Density against Quality\")","60c7bc6e":"px.bar(df, x=\"quality\", y=\"pH\", width=1000, height=600, template=\"plotly_dark\",title=\"pH against Quality\")","a99f1466":"px.box(df, x=\"alcohol\", y=\"pH\", width=1000, height=600, template=\"plotly_dark\",title=\"Alcohol against Quality\")","e3e0d84d":"plt.figure(figsize=(12,8))\nplt.hist(df['quality'], density=True, color=\"white\",orientation=\"horizontal\")\nplt.xlabel(\"Density\",fontsize=15)\nplt.ylabel(\"Quality\",fontsize=15)\nplt.title(\"Wine Quality\", fontsize=15)\nplt.grid()","3d7011a1":"sb.displot(df['pH'],height=8)\nplt.title(\"pH Count\", fontsize=15)\nplt.xlabel(\"pH\", fontsize=14)\nplt.ylabel(\"Counts\", fontsize=14)\nplt.grid()","2170943d":"sb.pairplot(df)","5fae1ae1":"plt.figure(figsize=(14,9))\nsb.heatmap(df.corr(),cmap='cubehelix_r',annot=True, linewidths=1.5)","0a38194d":"f, (ax1,ax2) = plt.subplots(1,2, figsize=(14,8))\n\nsb.boxplot(data=df, x='quality', y='volatile acidity', ax=ax1)\nax1.set_title(\"Negative Correlation between Volatile Acidity and Quality\", fontsize=10, fontweight=\"bold\")\nsb.boxplot(data=df, x='quality', y='pH', ax=ax2)\nax2.set_title(\"Negative Correlation between pH and Quality\", fontsize=10, fontweight=\"bold\")","ab1a3768":"f, (ax1,ax2) = plt.subplots(1,2, figsize=(14,8))\nsb.distplot(df['volatile acidity'], fit=norm, ax=ax1)\nax1.set_title(\"Volatile Acidity Distribution\", fontsize=14)\nsb.distplot(df['pH'], fit=norm, ax=ax2)\nax2.set_title(\"pH Distribution\", fontsize=14)","0f703958":"va = df['volatile acidity']\nq25, q75 = np.percentile(va, 25), np.percentile(va,75)\nprint(\"Qurantile 25 : {}\\n\".format(q25))\nprint(\"Qurantile 75 : {}\\n\".format(q75))\nva_iqr = q75 - q25\nprint(\"IQR of Volatile Acidity :{}\\n\".format(va_iqr))\nva_cut_off = va_iqr*1.5\nva_lower, va_upper = q25 - va_cut_off, q75 + va_cut_off\noutliers = [x for x in va if x<va_lower or x>va_upper]\nprint(\"Numbers of Outliers : {}\\n\".format(len(outliers)))\nprint(\"Outliers : {}\\n\".format(outliers))\ndf = df.drop(df[(df['volatile acidity']>va_upper) | (df['volatile acidity']<va_lower)].index)\nprint(df.shape,\"\\n\")\nprint(\"<.>\"*25)\n\n\nph = df['pH']\nq25, q75 = np.percentile(ph, 25), np.percentile(ph,75)\nprint(\"Qurantile 25 : {}\\n\".format(q25))\nprint(\"Qurantile 75 : {}\\n\".format(q75))\nph_iqr = q75 - q25\nprint(\"IQR of pH :{}\\n\".format(ph_iqr))\nph_cut_off = ph_iqr*1.5\nph_lower, ph_upper = q25 - ph_cut_off, q75 + ph_cut_off\noutliers = [x for x in ph if x<ph_lower or x>ph_upper]\nprint(\"Numbers of Outliers : {}\\n\".format(len(outliers)))\nprint(\"Outliers : {}\\n\".format(outliers))\ndf = df.drop(df[(df['pH']>ph_upper) | (df['pH']<ph_lower)].index)\nprint(df.shape,\"\\n\")\nprint(\"<.>\"*25)\n","8f1654c7":"scale = StandardScaler()","c2f0ba62":"df_scaled = scale.fit_transform(df)","8d099dc9":"x = df.iloc[:,:-1]\ny = df['quality']","e4705b7d":"xtrain, xtest, ytrain, ytest = train_test_split(x,y,train_size=.85, random_state=17)","656e8835":"svc = SVC()\nsvc.fit(xtrain,ytrain)\nsvm_ypred = svc.predict(xtest)\nsvm_as = accuracy_score(ytest,svm_ypred)\nprint(\"Accuracy Score of SVM : \",svm_as)\nprint(\"\\n\",classification_report(svm_ypred,ytest))","73c8d884":"gnb = GaussianNB()\ngnb.fit(xtrain,ytrain)\ngnb_ypred = gnb.predict(xtest)\ngnb_as = accuracy_score(ytest,gnb_ypred)\nprint(\"Accuracy Score of Gaussian Naive Bayes : \",gnb_as)\nprint(\"\\n\",classification_report(gnb_ypred,ytest))","bc66f943":"rfc = RandomForestClassifier()\nrfc.fit(xtrain,ytrain)\nrfc_ypred = rfc.predict(xtest)\nrfc_as = accuracy_score(ytest,rfc_ypred)\nprint(\"Accuracy Score of Random Forest Classifier : \",rfc_as)\nprint(\"\\n\",classification_report(rfc_ypred,ytest))","ea6f0a7c":"lg = LogisticRegression()\nlg.fit(xtrain,ytrain)\nlg_ypred = lg.predict(xtest)\nlr_as = accuracy_score(ytest,lg_ypred)\nprint(\"Accuracy Score of Logistic Regression : \",lr_as)\nprint(\"\\n\",classification_report(lg_ypred,ytest))","7b410b8c":"plt.figure(figsize=(9,6))\nmodels = ['SVM','GNB','Random Forest','Loistic Regression']\nconc = [svm_as, gnb_as, rfc_as, lr_as]\nsb.barplot(x=conc, y=models, palette='cubehelix')\nplt.title(\"Models Result\", fontsize=15)\nplt.xlabel(\"Accuracy\", fontsize=14)\nplt.ylabel(\"Models\", fontsize=14)","425404a4":"***Loistic Regression***","f53c3cac":"Here we see most negative features are : volatile acidity, pH","68a39f1e":"*Spliting*","9bb358ef":"***Exploratory Data Analysis***","43134da1":"***GNB***","618ab8d7":"***Random Forest***","117de600":"**Outliers Handle**","bdc4e638":"***If you like my kernel, please upvote!***","11f634e5":"***Importing Libraries***","04885ad2":"***Preprocessing***","f0887185":"***Result***","78d92600":"***SVM***"}}