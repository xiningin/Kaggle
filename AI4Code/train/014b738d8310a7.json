{"cell_type":{"f95214ef":"code","d2c13312":"code","189a8a69":"code","b090049a":"code","a91c33ae":"code","5345808a":"code","4fc4ffb1":"code","2350b067":"code","915bab1d":"code","34792d6a":"code","2ec11994":"code","8e7240c4":"code","c8d3bac9":"code","c2b1ec1e":"code","9327dd50":"code","70d53119":"code","13aed407":"code","959a42db":"code","6cf924a5":"markdown"},"source":{"f95214ef":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d2c13312":"data = pd.read_csv('..\/input\/logistic-regression\/Social_Network_Ads.csv')\ntrain = data.iloc[:,1:-1].values\nresult = data.iloc[:,-1].values","189a8a69":"data.head()","b090049a":"data.columns","a91c33ae":"data.dtypes","5345808a":"data.shape","4fc4ffb1":"data.isna().sum()","2350b067":"data['Purchased'].value_counts(normalize=True)","915bab1d":"data['Gender'].value_counts(normalize=True).plot.bar()","34792d6a":"sns.displot(data['Age'])","2ec11994":"Gender = pd.crosstab(data['Gender'],data['Purchased'])\nGender.div(Gender.sum(1).astype(float),axis=0).plot.bar(stacked=True,figsize=(12,6))","8e7240c4":"data.groupby('Purchased')['Age'].mean().plot.bar(title=\"Age\")","c8d3bac9":"data.groupby('Purchased')['EstimatedSalary'].mean().plot.bar(title='EstimatedSalary')","c2b1ec1e":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntrain[:,0] = le.fit_transform(train[:,0]) \n\ntrain","9327dd50":"from sklearn.model_selection import train_test_split\ndata_tr, data_te, result_tr, result_te = train_test_split(train, result, test_size=0.2, random_state=0)\n\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = data_tr\nX_test = data_te\nX_train[:, 1:] = sc.fit_transform(data_tr[:, 1:])\nX_test[:, 1:] = sc.transform(data_te[:, 1:])","70d53119":"from sklearn.linear_model import LogisticRegression \nclassifier = LogisticRegression(random_state=42) \nclassifier.fit(X_train, result_tr)","13aed407":"pred = classifier.predict(X_test)\n\n# print(pred)\n# print(result_te)\n\nfrom sklearn.metrics import confusion_matrix \ncm = confusion_matrix(result_te, pred) \n\nprint (\"Confusion Matrix : \\n\", cm) ","959a42db":"from sklearn.metrics import accuracy_score \nprint (\"Accuracy : \", accuracy_score(result_te, pred)) ","6cf924a5":"from sklearn.metrics import accuracy_score \nprint (\"Accuracy : \", accuracy_score(result_te, pred)) "}}