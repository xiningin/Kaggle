{"cell_type":{"611ba262":"code","1345994d":"code","ae57826f":"code","ff248bc5":"code","fc730e1f":"code","c2bd7b31":"code","e1f23ab3":"code","8f3c01e8":"code","90423254":"code","d265892e":"code","a2d44b18":"code","e8ddd623":"code","d8773033":"markdown","69fa3c3a":"markdown"},"source":{"611ba262":"import pandas as pd  \nimport numpy as np  \nimport matplotlib.pyplot as plt  \nimport seaborn as seabornInstance \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n%matplotlib inline","1345994d":"dataset = pd.read_csv('..\/input\/weatherww2\/Summary of Weather.csv')\ndataset","ae57826f":"dataset.plot(x='MinTemp', y='MaxTemp', style='o')  \nplt.title('MinTemp vs MaxTemp')  \nplt.xlabel('MinTemp')  \nplt.ylabel('MaxTemp')  \nplt.show()","ff248bc5":"plt.figure(figsize=(15,10))\nplt.tight_layout()\nseabornInstance.distplot(dataset['MaxTemp'])","fc730e1f":"#reshape to convert from 1D array to 2D array \n#because sklearn expects a 2D array as input\nX = dataset['MinTemp'].values.reshape(-1,1)\ny = dataset['MaxTemp'].values.reshape(-1,1)","c2bd7b31":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","e1f23ab3":"regressor = LinearRegression()\nregressor.fit(X_train, y_train)","8f3c01e8":"#To retrieve the intercept:\nprint(regressor.intercept_)\n\n#For retrieving the slope:\nprint(regressor.coef_) \n#This means that for every one unit of change in Min temperature, \n#the change in the Max temperature is about 0.92","90423254":"df = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})\ndf","d265892e":"df1 = df.head(25)\ndf1.plot(kind='bar',figsize=(16,10))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","a2d44b18":"plt.scatter(X_test, y_test,  color='gray')\nplt.plot(X_test, y_pred, color='red', linewidth=2)\nplt.show()","e8ddd623":"print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","d8773033":"The root mean squared error is 4.19, which is more than 10% of the mean value \nof the percentages of all the temperature i.e. 22.41. \nThis means that our algorithm was not very accurate \nbut can still make reasonably good predictions.","69fa3c3a":"This kernal was modeled after Nagesh Singh Chauhan's work, which can be read here:\nhttps:\/\/towardsdatascience.com\/a-beginners-guide-to-linear-regression-in-python-with-scikit-learn-83a8f7ae2b4f"}}