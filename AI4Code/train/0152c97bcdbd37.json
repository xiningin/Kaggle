{"cell_type":{"fe995524":"code","5300f87c":"code","a141bb71":"code","02376977":"code","34d21890":"code","0c8765a2":"code","16285ea6":"code","d777529f":"code","36814aff":"code","0dee4f86":"code","daf04761":"code","a4c3b4d0":"code","6829f5da":"code","269065d5":"code","441fbe89":"code","d8621392":"code","bd8bc20b":"code","451d9c21":"code","2db11f14":"code","a7724869":"code","3f1b5cd0":"code","9432e217":"code","eaa9ccc6":"code","36b5277c":"code","d6b8056f":"code","11308b08":"code","d1bb449b":"code","3cf1c6bc":"code","bedb992a":"code","d22f094e":"code","da10278c":"code","f6be1102":"code","d8ccd873":"code","93a8e852":"code","b6d7ed83":"code","d4c3a97b":"code","f0417a42":"code","6841a9cc":"code","f15c1cdb":"code","1295faa6":"code","6d6ae50a":"code","cd39935c":"code","866a5d5e":"code","e7874b68":"code","ce6a03da":"code","958a1d53":"code","b3649e96":"code","5d122738":"code","36ce5b13":"code","5a2e9c5a":"code","0f60afac":"markdown","7043b10e":"markdown","eb73aa42":"markdown","e2ecb3a0":"markdown","56bdcf59":"markdown","707b0b9b":"markdown","aa04e0bc":"markdown","64fa9212":"markdown","81725230":"markdown","34d2a54c":"markdown","127ced91":"markdown","5fbfb12d":"markdown","a4e92ff0":"markdown","a976e12c":"markdown","f5722e87":"markdown","41896bb8":"markdown","2bcfcf4c":"markdown","cd87be21":"markdown","fc7708c4":"markdown","ff48e6f8":"markdown","887aee48":"markdown","d02fef2c":"markdown","25cba3b7":"markdown","2f6c81aa":"markdown","430debf6":"markdown","5874e3fb":"markdown","636878d5":"markdown","380d6ae0":"markdown","0c5f3b96":"markdown","bed41f99":"markdown","ce4d2075":"markdown","e767b84b":"markdown"},"source":{"fe995524":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np\nimport pandas as pd \nimport copy\nimport datetime as dt\nimport os\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()\nimport cufflinks as cf\ncf.go_offline()\nimport missingno as msn\nfrom matplotlib import cm\ncolor = sns.color_palette()\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.metrics import mean_absolute_error\nfrom keras import backend as K\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nfrom IPython.display import display\n\ndef display_all(df):\n    with pd.option_context(\"display.max_rows\", 500, \"display.max_columns\", 300,'display.max_colwidth', -1):\n        display(df)\n        \n# Error Functions\n\ndef mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\ndef recall_m(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n    recall = true_positives \/ (possible_positives + K.epsilon())\n    return recall\n\ndef precision_m(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n    precision = true_positives \/ (predicted_positives + K.epsilon())\n    return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n\ndef rmse(y_true, y_pred):\n        return K.sqrt(K.mean(K.square(y_pred - y_true))) \n\ndef root_mean_squared_error(y_true, y_pred):\n    return ((y_test - y_pred) ** 2).mean() ** .5","5300f87c":"df = pd.read_csv(\"..\/input\/stack-overflow-2018-developer-survey\/survey_results_public.csv\",usecols=[\"Country\",\"Gender\",\"Age\",\"IDE\",\"JobSatisfaction\",\"Employment\",\"FormalEducation\",\"UndergradMajor\",\"DevType\",\"YearsCoding\",\"EducationTypes\",\"ConvertedSalary\",\"LanguageWorkedWith\",\"DatabaseWorkedWith\",\"FrameworkWorkedWith\",\"HoursComputer\"])","a141bb71":"display_all(df.head())","02376977":"df.drop_duplicates(keep=False,inplace=True)","34d21890":"#Removing all NULL values\ndf = df.dropna()\n\n#Remove salary lesser than 1000 and greater than 300000\ndf = df[(df['ConvertedSalary']>1000) & (df['ConvertedSalary']<300000)]\n\n# Considering only Male and Female in the dataset\ndf = df[(df['Gender'] == 'Male') | (df['Gender'] == 'Female')]\n\n# Remove age outliers\ndf = df[df['Age'] != 'Under 18 years old']\ndf = df[df['Age'] != '65 years or older']","0c8765a2":"languages = ['JavaScript','HTML','CSS','SQL','Bash\/Shell','Java','Python','C#','PHP','TypeScript','C++','C']\n\ntemp = df['LanguageWorkedWith'].str.split(';', expand=True)\n\n# Get all the possible values in this column\nnew_columns = pd.unique(temp.values.ravel())\nfor new_c in new_columns:\n    if new_c and new_c is not np.nan and new_c in languages:\n\n        # Create new column for each unique column\n        idx = df['LanguageWorkedWith'].str.contains(new_c, regex=False).fillna(False)\n        df.loc[idx, f\"{new_c}\"] = 1\n","16285ea6":"temp = df['DevType'].str.split(';', expand=True)\n\n# Get all the possible values in this column\nnew_columns = pd.unique(temp.values.ravel())\nfor new_c in new_columns:\n    if new_c and new_c is not np.nan:\n        \n        # Create new column for each unique column\n        idx = df['DevType'].str.contains(new_c, regex=False).fillna(False)\n        df.loc[idx, f\"{new_c}\"] = 1\n\n","d777529f":"temp = df['FrameworkWorkedWith'].str.split(';', expand=True)\n\n# Get all the possible values in this column\nnew_columns = pd.unique(temp.values.ravel())\nfor new_c in new_columns:\n    if new_c and new_c is not np.nan:\n        \n        # Create new column for each unique column\n        idx = df['FrameworkWorkedWith'].str.contains(new_c, regex=False).fillna(False)\n        df.loc[idx, f\"{new_c}\"] = 1\n","36814aff":"# Filling null values in encoded columns with 0\ndf = df.fillna(0)","0dee4f86":"display_all(df.head())","daf04761":"gen = pd.DataFrame(df['Gender'].dropna().str.split(';').tolist()).stack()\ngen=  gen.value_counts().sort_values(ascending=False)\nlabels = gen.index\nlabels= 'Male', 'Female', 'Non-binary or Transgender'\nf, ax1 = plt.subplots(figsize=(15,7))\n\nsizes = gen\/gen.sum() * 100\nsizes = [85.594640,12.897822 , 1.5075379]\nexplode = (0.05,0.05,0.05)\ncolors= ['#66b3ff','#c2c2f0', '#ff9999']\nax1.pie(sizes, colors = colors, labels=labels, autopct='%1.1f%%', startangle=90, pctdistance=0.85, explode = explode)\n\ncentre_circle = plt.Circle((0,0),0.50,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nax1.axis('equal')\nplt.tight_layout()\nplt.show()","a4c3b4d0":"edu = df['FormalEducation'].value_counts()\nedu = pd.DataFrame({'type':edu.index,'percent':(edu.values)*100\/sum(edu.values)})\nfig = plt.figure()\nsns.barplot(edu['percent'],edu['type'])\nplt.show()","6829f5da":"plt.figure(figsize=(15,7))\ntemp_devtype = pd.DataFrame(df['DevType'].dropna().str.split(';').tolist()).stack()\ntemp_devtype_counts = temp_devtype.value_counts().sort_values()\ntemp_devtype_counts.plot.barh(color=sns.color_palette('pastel',15))\nplt.title('DevType', fontsize=15)\nplt.yticks(fontsize=18)\nplt.show()","269065d5":"plt.figure(figsize=(15,10))\ntemp_language = pd.DataFrame(df['LanguageWorkedWith'].str.split(';').tolist()).stack()\ntemp_language_counts = temp_language.value_counts().sort_values()\ntemp_language_counts.plot.barh(color=sns.color_palette('pastel',15))\nplt.title('Most Popular Languages', fontsize=15)\nplt.yticks(fontsize=12)\nplt.show()","441fbe89":"plt.figure(figsize=(15,7))\ntemp_framework = pd.DataFrame(df['FrameworkWorkedWith'].dropna().str.split(';').tolist()).stack()\ntemp_framework_counts = temp_framework.value_counts().sort_values()\ntemp_framework_counts.plot.barh(color=sns.color_palette('pastel',15))\nplt.title('Most Popular Framework', fontsize=15)\nplt.yticks(fontsize=12)\nplt.show()","d8621392":"plt.figure(figsize=(15,10))\ntemp_ide = pd.DataFrame(df['IDE'].str.split(';').tolist()).stack()\ntemp_ide_counts = temp_ide.value_counts().sort_values()\ntemp_ide_counts.plot.barh(color=sns.color_palette(\"pastel\", 15))\nplt.title('Most Popular IDE', fontsize=15)\nplt.yticks(fontsize=12)\nplt.show()","bd8bc20b":"df['JobSatisfaction'].value_counts()\nsat = df[np.logical_or(np.logical_or(df['JobSatisfaction'] == 'Moderately satisfied', df['JobSatisfaction'] == 'Extremely satisfied'), df['JobSatisfaction'] == 'Slightly satisfied')]\n\nplt.figure(figsize=(14, 8))\nsns.countplot(data=sat, x='Country', hue='JobSatisfaction', palette='Paired', order=sat['Country'].value_counts()[:10].index)\nsns.despine(left=True)\nplt.xticks(rotation='vertical')","451d9c21":"male_female = df[df[\"Gender\"].isin(['Male', 'Female'])]\nplt.figure(figsize=(15,8))\ng=sns.countplot(x=male_female['Age'],hue=male_female['Gender'], order=male_female['Age'].dropna().sort_values().unique())\ng.set_xlabel(\"Age\")\ng.set_xticklabels(g.get_xticklabels(),rotation=90)\ng.legend(bbox_to_anchor=(1.1, 1.05))\nplt.title(\"Age Vs Gender\")\nplt.show()","2db11f14":"f, ax = plt.subplots(figsize=(18, 7))\nplt.xticks(rotation='45')\nsns.distplot(df['ConvertedSalary']);\nplt.xlabel('Annual salary', fontsize=15)","a7724869":"df1 = df.copy()\nplt.figure(figsize=(16,5))\ndf1 = df1[df1[\"Country\"].isin(['India', 'United States', 'Germany', 'United Kingdom','France','Canada','Spain','Australia','Israel'])]\ndf1 = df1.groupby('Country', as_index=False)['ConvertedSalary'].mean()\ndf1 = df1.sort_values('ConvertedSalary')\nplt.bar(df1['Country'],df1['ConvertedSalary'],color=['r', 'g', 'b', 'k', 'y', 'm', 'c'])\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Salary per annum (USD)\")\nplt.title(\"Country vs Average Salary\",fontdict={'weight': 'bold', 'size': 24})\nplt.show()","3f1b5cd0":"df1 = df.copy()\nplt.figure(figsize=(16,5))\ndf1['YearsCoding'].replace({'0-2 years':1,'3-5 years':4, '6-8 years':7, '9-11 years':10, '12-14 years':13, '15-17 years':16, '18-20 years':19,'21-23 years':22,'24-26 years':25,'27-29 years':28,'30 or more years':31},inplace=True)\ndf1 = df1.groupby('YearsCoding', as_index=False)['ConvertedSalary'].mean()\nplt.plot(df1['YearsCoding'],df1['ConvertedSalary'])\nplt.title(\"Salary vs Coding Experience\",fontdict={'weight': 'bold', 'size': 24})\nplt.xlabel(\"Progression in coding years\")\nplt.ylabel(\"Salary per annum (USD)\")\nplt.show()\nprint(\"Correlation : \" ,df1['YearsCoding']. corr(df1['ConvertedSalary']))","9432e217":"df1 = df.copy()\nplt.figure(figsize=(18,5))\ndf1 = df1[df1[\"Country\"].isin(['India', 'United States', 'Germany', 'United Kingdom','France','Canada','Spain','Australia','Israel'])]\ndf1['Country'].replace({'India':1,'Spain':2, 'France':3,'Germany':4,'Canada':5,'United Kingdom':6,'Australia':7,'Israel':8,'United States':10},inplace=True)\ndf1 = df1.groupby('Country', as_index=False)['ConvertedSalary'].mean()\ndf1 = df1.sort_values('ConvertedSalary')\n# plt.bar(df1['Country'],df1['ConvertedSalary'],color=\"rgbkymc\")\nplt.plot(df1['Country'],df1['ConvertedSalary'])\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Salary per annum (USD)\")\nplt.title(\"Country vs Average Salary\",fontdict={'weight': 'bold', 'size': 24})\nplt.show()\nprint(\"Correlation : \" ,df1['Country']. corr(df1['ConvertedSalary']))","eaa9ccc6":"df_age = df.copy()\nplt.figure(figsize=(16,5))\ndf_age['Age'].replace({'18 - 24 years old':21, '25 - 34 years old':29.5, '35 - 44 years old':39.5, '45 - 54 years old':49.5, '55 - 64 years old':59.5},inplace=True)\ndf_age = df_age.groupby('Age', as_index=False)['ConvertedSalary'].mean()\nplt.plot(df_age['Age'],df_age['ConvertedSalary'])\nplt.title(\"Salary vs Age\",fontdict={'weight': 'bold', 'size': 24})\nplt.xlabel(\"Progression in Age\")\nplt.ylabel(\"Salary per annum (USD)\")\nplt.show()\nprint(\"Correlation : \" ,df_age['Age']. corr(df1['ConvertedSalary']))","36b5277c":"df_comp = df.copy()\nplt.figure(figsize=(16,5))\ndf_comp['HoursComputer'].replace({'Less than 1 hour':1,'1 - 4 hours':2.5, '5 - 8 hours':6.5, '9 - 12 hours':10.5, 'Over 12 hours':13.5},inplace=True)\ndf_comp = df_comp.groupby('HoursComputer', as_index=False)['ConvertedSalary'].mean()\nplt.plot(df_age['Age'],df_age['ConvertedSalary'])\nplt.title(\"Salary vs HoursComputer\",fontdict={'weight': 'bold', 'size': 24})\nplt.xlabel(\"Hours on Computer\")\nplt.ylabel(\"Salary per annum (USD)\")\nplt.show()\nprint(\"Correlation : \" , df_comp['HoursComputer']. corr(df1['ConvertedSalary']))","d6b8056f":"df = df[df[\"Country\"].isin(['India', 'United States', 'Germany', 'United Kingdom','France','Canada','Spain','Australia','Israel'])]\ndf['Age'] = df['Age'].map({'18 - 24 years old':21, '25 - 34 years old':29.5, '35 - 44 years old':39.5, '45 - 54 years old':49.5, '55 - 64 years old':59.5}).astype(int)\ndf['YearsCoding'] = df['YearsCoding'].map({'0-2 years':1,'3-5 years':4, '6-8 years':7, '9-11 years':10, '12-14 years':13, '15-17 years':16, '18-20 years':19,'21-23 years':22,'24-26 years':25,'27-29 years':28,'30 or more years':31}).astype(int)\ndf['Country'] = df['Country'].map({'India':1,'Spain':2, 'France':3,'Germany':4,'Canada':5,'United Kingdom':6,'Australia':7,'Israel':8,'United States':9}).astype(int)\ndf['HoursComputer'] = df['HoursComputer'].map({'Less than 1 hour':1,'1 - 4 hours':2.5, '5 - 8 hours':6.5, '9 - 12 hours':10.5, 'Over 12 hours':13.5}).astype(int)\ndf['Gender'] = df['Gender'].map({'Female':0,'Male':1}).astype(int)","11308b08":"# After all the preprocessing\ndf.shape","d1bb449b":"# Linear Regression Model\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import confusion_matrix,accuracy_score\nregressor=LinearRegression()","3cf1c6bc":"temp_devtype = pd.DataFrame(df['DevType'].dropna().str.split(';').tolist()).stack()\ntemp_devtype_counts = temp_devtype.value_counts().sort_values()\ndevTypes = list(temp_devtype_counts.index)\ntemp_framework = pd.DataFrame(df['FrameworkWorkedWith'].dropna().str.split(';').tolist()).stack()\ntemp_framework_counts = temp_framework.value_counts().sort_values()\nframeworkTypes = list(temp_framework_counts.index)\nattributes = ['Age','Gender','YearsCoding','Country','HoursComputer','JavaScript','HTML','CSS','SQL','Bash\/Shell','Java','Python','C#','PHP','TypeScript','C++','C'] + devTypes + frameworkTypes\nx = df[attributes]\ny = df['ConvertedSalary']","bedb992a":"# Splitting data into training and testing\n\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0)","d22f094e":"#Traning the model\nregressor.fit(x_train,y_train)","da10278c":"predicted=regressor.predict(x_test)\n","f6be1102":"dframe=pd.DataFrame({'ActualSalary':y_test,'PredictedSalary':predicted})\ndframe.head()","d8ccd873":"# first_bracket = \"From 1k to 25k\"\n# second_bracket = \"From 25k to 50k\"\n# third_bracket = \"From 50k to 75k\"\n# forth_bracket = \"From 75k to 100k\"\n# fifth_bracket = \"From 100k to 150k\"\n# sixth_bracket = \"From 150k to 200k\"\n# seventh_bracket = \"From 200k to 300k\"","93a8e852":"# dframe['ActualSalaryRange'] = pd.cut(dframe['ActualSalary'], bins=[1000,25000,50000,75000,100000,150000,200000,300000], labels=[first_bracket, second_bracket, third_bracket,forth_bracket,fifth_bracket,sixth_bracket,seventh_bracket])\n# dframe['PredictedSalaryRange'] = pd.cut(dframe['PredictedSalary'], bins=[1000,25000,50000,75000,100000,150000,200000,300000], labels=[first_bracket, second_bracket, third_bracket,forth_bracket,fifth_bracket,sixth_bracket,seventh_bracket])","b6d7ed83":"seriesObj = dframe.apply(lambda x: True if abs(x['ActualSalary'] -  x['PredictedSalary'])<=20000 else False , axis=1)\nnum = len(seriesObj[seriesObj == True].index)\n\nprint(\"Accuracy: \", num\/dframe.shape[0]*100)\nprint(\"RMSE:\" , root_mean_squared_error(y_test,predicted))\n","d4c3a97b":"from sklearn.svm import SVR\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\nmodel_svr_regr = make_pipeline(StandardScaler(),  SVR(kernel=\"poly\", C=100, gamma=\"auto\", degree=3, epsilon=0.1, coef0=1))\nmodel_svr_regr.fit(x_train, y_train)\nprice_svr=model_svr_regr.predict(x_test)","f0417a42":"dframe_svr=pd.DataFrame({'ActualSalary':y_test,'PredictedSalary':price_svr})\nseriesObj = dframe_svr.apply(lambda x: True if abs(x['ActualSalary'] -  x['PredictedSalary'])<=20000 else False , axis=1)\nnum = len(seriesObj[seriesObj == True].index)\n\n\nprint(\"Accuracy: \", num\/dframe_svr.shape[0]*100)\nprint(\"RMSE:\" , root_mean_squared_error(y_test,price_svr))","6841a9cc":"from sklearn import linear_model\nmodel_r = linear_model.Ridge(normalize= True, alpha= 0.001)\nmodel_r.fit(x_train,y_train)\npriceridge = model_r.predict(x_test)","f15c1cdb":"dframe_ridge=pd.DataFrame({'ActualSalary':y_test,'PredictedSalary':priceridge})\nseriesObj = dframe_ridge.apply(lambda x: True if abs(x['ActualSalary'] -  x['PredictedSalary'])<=20000 else False , axis=1)\nnum = len(seriesObj[seriesObj == True].index)\n\nprint(\"Accuracy: \", num\/dframe_ridge.shape[0]*100)\nprint(\"RMSE:\" , root_mean_squared_error(y_test,priceridge))","1295faa6":"from sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.datasets import make_regression\nadaboost = AdaBoostRegressor(random_state=0, n_estimators=100)\nadaboost.fit(x_train, y_train)","6d6ae50a":"price_ada=model_svr_regr.predict(x_test)\n\ndframe_ada=pd.DataFrame({'ActualSalary':y_test,'PredictedSalary':price_ada})\nseriesObj = dframe_ada.apply(lambda x: True if abs(x['ActualSalary'] -  x['PredictedSalary'])<=20000 else False , axis=1)\nnum = len(seriesObj[seriesObj == True].index)\n\nprint(\"Accuracy: \", num\/dframe_ada.shape[0]*100)\nprint(\"RMSE:\" , root_mean_squared_error(y_test,price_ada))","cd39935c":"from sklearn.tree import DecisionTreeClassifier\ndtc_model = DecisionTreeClassifier(criterion='gini', splitter='best', max_depth=5, min_samples_split=3, min_samples_leaf=1)\ndtc_model.fit(x_train, y_train)","866a5d5e":"dtc_predict = dtc_model.predict(x_test)","e7874b68":"dframe_dec=pd.DataFrame({'ActualSalary':y_test,'PredictedSalary':dtc_predict})\nseriesObj = dframe_dec.apply(lambda x: True if abs(x['ActualSalary'] -  x['PredictedSalary'])<=20000 else False , axis=1)\nnum = len(seriesObj[seriesObj == True].index)\nprint(\"Accuracy: \", num\/dframe_dec.shape[0]*100)\nprint(\"RMSE:\" , root_mean_squared_error(y_test,predicted))","ce6a03da":"#Dependencies\nimport keras\nfrom keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom keras.layers import Dense, Dropout\n\n\n# Neural network\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=x.shape[1], activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation = 'linear'))\n\n","958a1d53":"model.compile(loss=rmse, optimizer='adam')","b3649e96":"history = model.fit(x_train, y_train, epochs=100, batch_size=128)","5d122738":"y_pred_ann = model.evaluate(x_test, y_test)","36ce5b13":"y_prediction = model.predict(x_test)\ny_prediction_df = y_prediction.reshape((-1,))\n","5a2e9c5a":"dframe_ann_reg = pd.DataFrame({'ActualSalary':y_test,'PredictedSalary':y_prediction_df})\n# dframe_ann_reg['Match'] = 0\nseriesObj = dframe_ann_reg.apply(lambda x: True if abs(x['ActualSalary'] -  x['PredictedSalary'])<=20000 else False , axis=1)\n# dframe_ann_reg['Match'] = dframe_ann_reg.apply(f, axis=1)\nnum = len(seriesObj[seriesObj == True].index)\nprint(dframe_ann_reg.head(20),'\\n')\nprint(\"Accuracy: \", num\/dframe_ann_reg.shape[0]*100)\nprint(\"RMSE:\" , root_mean_squared_error(y_test,y_prediction_df))\n# dframe_ann_reg.head(50)","0f60afac":"# **Support Vector Regression**","7043b10e":"# Job Satisfaction in different countries","eb73aa42":"# **Conclusion**","e2ecb3a0":"# Salary v\/s Age","56bdcf59":"# Most Popular Framework","707b0b9b":"The following models were implemented :\n* Multiple Linear Regression\n* Support Vector Regression\n* Adaboost\n* Decision Tree Classifier\n* Ridge Regression\n* Artificial Neural Network\n\nThe models are validated on the basis of accuracy (Predicted salary with a margin of 20,000 USD is considered a right prediction)\nand RMSE\n\nANN performed the best with an accuracy of 61.40% and an RMSE of 32005\n\nPredictions are only as good as the dataset. The prediction did not perform extremely well for the dataset although we got pretty good results for lots of records.","aa04e0bc":"# **Decision Tree Classifier**","64fa9212":"# Salary v\/s Hours of using Computer","81725230":"# **Import Dataset**","34d2a54c":"This is a salary prediction project using the ***Stack Overflow 2018 Developer Survey***\nIn the IT sector various features play a vital role in defining a good career as a developer. \nFor developers seeking jobs, it would be beneficial if they had a model to predict the salary range based on various features like \ncountry, years of coding, developer type, degree, skillset, and programming languages\n\n**Team Members :**\n* Surya M N - PES1UG19CS525\n* Avanish V Patil - PES1UG19CS096\n* Kedar U Shet - PES1UG19CS217\n* Tushar Y S - PES1UG19CS545","127ced91":"# Most Popular IDE","5fbfb12d":"# Most Popular Languages","a4e92ff0":"# Bar graph for Formal Education of the respondants","a976e12c":"# Salary v\/s Coding Experience","f5722e87":"# One hot encode FrameWorkedWith","41896bb8":"# Types of Developers","2bcfcf4c":"# **Ridge Regression**","cd87be21":"# **Exploratory Data Analysis**","fc7708c4":"# One hot encode LanguagesWorkedWith","ff48e6f8":"# **Adaboost**","887aee48":"# Salary v\/s Country","d02fef2c":"## **Multiple Linear Regression**","25cba3b7":"# Salary vs Country","2f6c81aa":"# Graph plotting the number of males and females in various age groups","430debf6":"# Transforming Categorical Data to Numerical Data","5874e3fb":"# **Data Preprocessing**","636878d5":"# One hot encode DevType","380d6ae0":"# **Artificial Neural Network**","0c5f3b96":"# Salary Plot","bed41f99":"# **Salary Prediction of Software Developers**","ce4d2075":"# **Salary Prediction**\n> ***Note : The metric chosen for validating the models are accuracy \n> -> We have assumed that  if the predicted salary is within the range of +\/- 20,000 USD is a correct prediction***\n\n***The attributes chosen to predict salary are :***\n* Age\n* Country\n* Gender\n* Years of Coding Experience\n* Hours working on Computer per day\n* Languages worked with\n* Developer Type\n* Framework worked with","e767b84b":"# Gender Distribution"}}