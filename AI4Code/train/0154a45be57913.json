{"cell_type":{"a1c34908":"code","cd788e71":"code","8f694362":"code","89449e76":"code","cf638f47":"code","97b84d07":"code","d1120796":"code","549282d4":"code","ef2b8569":"code","58cee5b6":"code","4281db28":"code","72f237f9":"code","2bfead05":"code","eff169f4":"code","cdcc90b9":"code","3a68ed98":"markdown","0aec1f35":"markdown","0ce7bcae":"markdown","b545e499":"markdown","b1a1748e":"markdown","1f9f0fb6":"markdown","3233de20":"markdown","544e1a05":"markdown","541d19a4":"markdown","b27995b8":"markdown","91cf6e46":"markdown","12431b1c":"markdown","00e00b8e":"markdown","1f409f7d":"markdown","2bddf75a":"markdown","41eb4e82":"markdown","51de89d4":"markdown","322c7c4f":"markdown","0cbff80e":"markdown","0df2d718":"markdown"},"source":{"a1c34908":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd788e71":"df = pd.read_csv('..\/input\/advertising\/advertising.csv')\ndf.describe","8f694362":"df.dtypes","89449e76":"df['Timestamp']=pd.to_datetime(df['Timestamp'])\ndf['Timestamp'] = (df['Timestamp'] - df['Timestamp'].min())\ndf.dtypes","cf638f47":"df.isnull().sum()","97b84d07":"df = pd.get_dummies(df, columns=['City'],dtype=float)\ndf = pd.get_dummies(df, columns=['Country'],dtype=float)","d1120796":"X=df.drop(columns=['Clicked on Ad','Ad Topic Line','Timestamp'])\ny=df['Clicked on Ad']\nX.dtypes","549282d4":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nbest=SelectKBest(score_func=chi2, k=100)\nfit1=best.fit(X,y)\ndata_scores=pd.DataFrame(fit1.scores_)\ndata_columns=pd.DataFrame(X.columns)\nscores=pd.concat([data_columns,data_scores],axis=1)\nscores.columns=['Feature','Score']\nprint(scores.nlargest(10,'Score'))","ef2b8569":"X=X[['Daily Time Spent on Site', 'Age', 'Area Income', 'Daily Internet Usage']]\nX.head()","58cee5b6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.37, random_state=1)","4281db28":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","72f237f9":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, roc_curve, classification_report\n\nknn = KNeighborsClassifier(n_neighbors=1)\nmodel = knn.fit(X_train, y_train)\nknn_predict = knn.predict(X_test)\nknn_conf_matrix = confusion_matrix(y_test, knn_predict)\nknn_acc_score = accuracy_score(y_test, knn_predict)\nprint(\"confusion matrix\")\nprint(knn_conf_matrix)\nprint(\"\\n\")\nprint(\"Accuracy of k-NN Classification:\",knn_acc_score*100,'\\n')\nprint(classification_report(y_test, knn_predict))","2bfead05":"error_rate = []\n\nfor i in range(1,20):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","eff169f4":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,6))\n\nplt.plot(range(1,20),error_rate,color='green', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=5)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","cdcc90b9":"knn = KNeighborsClassifier(n_neighbors=7)\nmodel = knn.fit(X_train, y_train)\nknn_predict = knn.predict(X_test)\nknn_conf_matrix = confusion_matrix(y_test, knn_predict)\nknn_acc_score = accuracy_score(y_test, knn_predict)\nprint(\"confusion matrix\")\nprint(knn_conf_matrix)\nprint(\"\\n\")\nprint(\"Accuracy of k-NN Classification:\",knn_acc_score*100,'\\n')\nprint(classification_report(y_test, knn_predict))","3a68ed98":"# Fourth Step : Improving the Model \/ Tunning the Model\n\nHere, we will only tune the Model based on K neighbour numbers..","0aec1f35":"Now data seems Good....\nBut Are there any null value in the data ? Let us check....","0ce7bcae":"# Second Step : Data Preparation (Inputs & Outputs)\n\nAs we have already prepare the dataset ready now we will have devide\/desect the data for further analysis.","b545e499":"So final Conclusion is,\n\nBefore tunning: the Model Accuracy of k-NN Classification: 94.05405405405406\n\nAfter tunning: the Model Accuracy of k-NN Classification: 95.4054054054054\n\n# So We get increment of 1.35% in final results for just tunning the one parameter.\n\nThank You for reaching this far.\n\nIf you require any further information please give it in Comment.\n","b1a1748e":"If we analyse the Feature (X),\n\nIt could easily be undesrtood that having 1211 features for 1000 examples is not a good scenario to train Logistic regression Model.\n\nHere, we required to identify the Features that have the maximum impact for our Target classification output. For this, we will be using the SelectKbest from the SKlearn.\n\nWe will have only first 10 most usable features to train our model.","1f9f0fb6":"By looking at the above graph, \n\nIt was noted that we have received minimum error at k neighbour value 7 and after that the error value is just oscilating and not going any further down.\n\nSo, We will select 7 as our luck number for KNN classifier..","3233de20":"# First Step : Data ","544e1a05":"# Third Step : Create a First KNN Model ","541d19a4":"I think there is a Timestamp coloumn which contains the Date&Time data. So we will convert that to have a correct data types.","b27995b8":"# Fifith Step : Recreating a KNN Model","91cf6e46":"Now, we will create two variables X - containing the our Features for our Modem & y- contains the Outcome we require to give the Model to learn from. Simple,the prediction values.","12431b1c":"What if we change the value of the K neighbours ?\n\nTo answer this, we will write below code to identify the impact on Error improvement with values of K neighbour from 1 to 20. \n\nWe will append the values of Error to have cumulative data of Error rates. ","00e00b8e":"Now, we will plot the data Error rate to identify the best suitable values of the K neighbour to have best results.","1f409f7d":"Data looks good but we require few more information before creating our prediction model.\n\nWhat are data types ?","2bddf75a":"Yes, We have successfully created a KNNModel with Good accurancy, Precision & F1 Score. \n\nQuestion is, Can we improve ?\n\nAnswer is, yea we can...","41eb4e82":"Before creating a Model, we must have to devide the data for Training and Testing datasets so that after creating a Model we can check the performace our Model.\n\ntrain_test_split is the most common option for that, Right !","51de89d4":"As you can see that all our features are raning from different values like,\n1.Area Income have values raning in - Five Digit\n2. Daily Time Spent on Site - Two Digit\n3. Age - Two Digit\n4. Daily Internet Usage - Three Digit\n\nSo, we have to first Scale them to 0 to 1 considering the Maximum & Minimum values we have in that perticular coloumn dataset..","322c7c4f":"Perfect..! No null values\nHey wait, we can build a Model with object data type columns link City, Country.\nWe need to convert them...","0cbff80e":"# This is a Simple and Direct code for Logistic Classification with the KNN Classifier.\n\nIn this workbook we are going to learn how quickly with minimum data insights we can create a data model that can predict our Classification problem data sets\n\nNote :- We will import the Libraries as when required so you can undesrtand use of each library.\n\nLet's get Started...","0df2d718":"Wow, we have worked hard for Countries and cities but in comparison to other features we can negelect them.\n\nWhy? You may ask...\n\nAnswer is, if we will train a Model considering the features do not have any importance for prediction may have adverse effects on our predictions. The Precision and F1 score of the final result will be affected.\n\nSo we will limit our features (X) to first Four. "}}