{"cell_type":{"6a430c25":"code","b27dd3ad":"code","09388ba3":"code","b448a861":"code","13beee3a":"code","b3054752":"code","4a50f7fc":"code","c6ef53ab":"code","27e1a97f":"code","4b34e3d4":"code","3d35401f":"code","49631636":"code","d2b42865":"code","8b5905bc":"code","868b97e3":"code","c0dac0b3":"code","191e8aad":"code","023646a5":"code","777789fe":"code","eab63691":"code","8c26c0c0":"code","41cb4819":"code","6f1e4b1a":"code","b919c2c4":"code","f6c0cf01":"code","6d5f74e4":"code","19f4a2e6":"code","c4fe08b9":"code","85b7e3de":"code","406223f6":"code","23153e4e":"code","949b1b0b":"code","b3a4095e":"code","8c6a8bda":"code","fcd7cdd0":"code","615db5a2":"code","ec224ce4":"code","4d96bfea":"code","ca3159e1":"code","820b399b":"code","f39c0417":"code","916f016e":"code","8d0af63e":"code","390e6b3b":"code","1d6ca04c":"code","3d233362":"code","94e5d387":"code","143f3611":"code","d8bf2b8e":"code","fcabbfb7":"code","b7369487":"code","8d5f7f9d":"code","e36ea0bd":"markdown","8bc8ae3a":"markdown","fae76b3b":"markdown","7abeb68f":"markdown","6bd5727b":"markdown","2cda9786":"markdown","843c8d59":"markdown","aa32110a":"markdown","5900f6a2":"markdown","709a1a20":"markdown","25e7ed22":"markdown","09db0817":"markdown","253e7c9d":"markdown","837673e8":"markdown","ebd7f125":"markdown","4ca3b61c":"markdown","82210d5d":"markdown","611a1092":"markdown","a83b6fdc":"markdown","bc80b070":"markdown","bed8c40f":"markdown","8044276e":"markdown","954284aa":"markdown","7b2bf81b":"markdown","3efb257d":"markdown","54391cc4":"markdown","0d818d97":"markdown","867f09c2":"markdown","3536294d":"markdown","0d77fe71":"markdown","baf7eaee":"markdown","58b63178":"markdown","12fa1aed":"markdown"},"source":{"6a430c25":"# Importing Libraries\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport random\n\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom mlxtend.classifier import StackingCVClassifier","b27dd3ad":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head()","09388ba3":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.head()","b448a861":"plt.figure(figsize=(10,6))\nax = sns.countplot(x=train_data['Survived'])","13beee3a":"plt.figure(figsize=(10,6))\nax = sns.pointplot(x=\"Pclass\",\n                   y=\"Survived\",\n                   hue=\"Sex\",\n                   data=train_data,\n                   palette={\"male\":\"g\",\"female\":\"m\"},\n                   markers=[\"^\",\"o\"],\n                   linestyles=[\"-\",\"--\"])","b3054752":"plt.figure(figsize=(10,6))\nax = sns.countplot(x= 'Sex',data = train_data, hue='Survived')","4a50f7fc":"plt.figure(figsize=(10,6))\nax = sns.boxplot(x='Age', data=train_data, hue='Survived')","c6ef53ab":"plt.figure(figsize=(10,6))\nax = sns.countplot(x='Pclass',data = train_data, hue='Survived')","27e1a97f":"f,ax = plt.subplots(figsize=(12,10))\nsns.heatmap(train_data.corr(), annot = True, cmap='coolwarm')","4b34e3d4":"corr_matrix = train_data.corr()\ncorr_matrix['Survived'].sort_values(ascending = False)","3d35401f":"sns.countplot(train_data[train_data['Survived']==1]['Pclass']).set_title('Count Survived people for each class')","49631636":"len(train_data[train_data['Pclass'] == 1]), len(train_data[train_data['Pclass'] == 2]), len(train_data[train_data['Pclass'] == 3])","d2b42865":"train_data[train_data['Pclass'] == 1]['Survived'].sum(), train_data[train_data['Pclass'] == 2]['Survived'].sum(), train_data[train_data['Pclass'] == 3]['Survived'].sum()","8b5905bc":"precentages = []\nfirst = 136\/216\nseconds = 87\/184\nthird = 119\/491\n\nprecentages.append(first)\nprecentages.append(seconds)\nprecentages.append(third)","868b97e3":"percents = pd.DataFrame(precentages)\npercents.index += 1","c0dac0b3":"percents['Pclass'] = ['1','2','3']\ncols = ['Percent','Pclass']\npercents.columns = [i for i in cols]\nsns.barplot(y = 'Percent',x= 'Pclass', data = percents).set_title('Percentage of survived passenger class')","191e8aad":"train_data.isna().sum()","023646a5":"test_data.isna().sum()","777789fe":"df = [train_data,test_data]\n\nfor d in df:\n    d['Age'].fillna(d['Age'].median(),inplace=True)","eab63691":"train_data['Cabin'].value_counts()","8c26c0c0":"for d in df:\n    d['Cabin'].fillna('C',inplace=True)","41cb4819":"train_data['Cabin'].isna().sum()","6f1e4b1a":"cabins = []\nfor i in train_data['Cabin']:\n    cabins.append(str(i))","b919c2c4":"words = []\nfor i in cabins:\n    word = i[0]\n    words.append(word)","f6c0cf01":"train_data['Cabin'] = words","6d5f74e4":"train_data['Cabin'].head()","19f4a2e6":"train_data['Cabin'].value_counts()","c4fe08b9":"cabins = []\nfor i in test_data['Cabin']:\n    cabins.append(str(i))","85b7e3de":"words = []\nfor i in cabins:\n    word = i[0]\n    words.append(word)","406223f6":"test_data['Cabin'] = words","23153e4e":"test_data['Cabin'].value_counts()","949b1b0b":"train_data['Embarked'].isna().sum()","b3a4095e":"train_data['Embarked'].value_counts()","8c6a8bda":"for d in df:\n    d['Embarked'].fillna('S',inplace=True)","fcd7cdd0":"train_data.isna().sum()","615db5a2":"for d in df:\n    d['Fare'].fillna(d['Fare'].mean(),inplace = True)","ec224ce4":"test_data.isna().sum()","4d96bfea":"train_data['Family'] = train_data.apply(lambda x: x['SibSp'] + x['Parch'], axis = 1)\ntest_data['Family'] = test_data.apply(lambda x: x['SibSp'] + x['Parch'], axis = 1)","ca3159e1":"train_data.drop(['SibSp','Name','Ticket','Parch'], axis = 1,inplace = True)\ntest_data.drop(['SibSp','Name','Ticket','Parch'], axis = 1, inplace = True)","820b399b":"train_df = pd.get_dummies(train_data)\ntest_df = pd.get_dummies(test_data)","f39c0417":"train_df.drop('PassengerId', axis = 1, inplace = True)","916f016e":"y = train_df['Survived']\ntrain_df.drop('Survived', axis=1, inplace = True)\ntrain_df.drop('Cabin_T', axis=1, inplace = True)\ntest_df.drop('PassengerId',axis=1, inplace=True)\nX = train_df\nX_test = test_df","8d0af63e":"rfc = RandomForestClassifier()","390e6b3b":"param_grid = {\n    'n_estimators':[200,500,1000],\n    'max_features':['auto'],\n    'max_depth': [6, 7, 8],\n    'criterion': ['entropy']\n    }","1d6ca04c":"CV = GridSearchCV(estimator = rfc, param_grid = param_grid, cv=5)\nCV.fit(X,y)\nCV.best_estimator_","3d233362":"rfc = RandomForestClassifier(criterion='entropy', max_depth=8, n_estimators=200)\nada = AdaBoostClassifier()\ngbc = GradientBoostingClassifier()","94e5d387":"rfc.fit(X,y)\nada.fit(X,y)\ngbc.fit(X,y)","143f3611":"model = StackingCVClassifier(classifiers = (rfc,ada,gbc),\n                                 meta_classifier = rfc,\n                                 use_features_in_secondary = True)","d8bf2b8e":"model.fit(X.values,y)","fcabbfb7":"print(model.score(X, y))","b7369487":"prediction = model.predict(X_test.values)","8d5f7f9d":"output = pd.DataFrame({'PassengerId' : test_data.PassengerId, 'Survived' : prediction})\noutput.to_csv('my_submissions.csv', index = False)","e36ea0bd":"let's make the cabin simpler into just one word","8bc8ae3a":"Ok, the higher value is S we will fill it","fae76b3b":"# Correlation","7abeb68f":"Fitting each model","6bd5727b":"# Survived People","2cda9786":"let's see if pclass really has survived correlation","843c8d59":"Looking missing value in Cabin, we will fill in the empty values in the cabin with the most number of values\n","aa32110a":"count how many people are in the class","5900f6a2":"Train the model","709a1a20":"First read the data from dataset","25e7ed22":"First we will fill age with median values","09db0817":"Ok lets make the model, for getting higher accuracy you can hypertune each model before fitting them.","253e7c9d":"# Train Data Using Stacking CV Classifier","837673e8":"count how many people are in the class survived","ebd7f125":"let's make same in test data","4ca3b61c":"Ok is almost done, we will fill missing value in test_data on fare","82210d5d":"Pclass have higher correlation value","611a1092":"init rfc for random forest classifier","a83b6fdc":"#### Now checking embarked","bc80b070":"We will fill the missing value with the higher value","bed8c40f":"## Survived People By Age ","8044276e":"## Survived People By Class And Gender","954284aa":"creating percentages","7b2bf81b":"# Prepare the data","3efb257d":"# Cleaning Data\n\nwe will looking up the missing data, and clean up them","54391cc4":"Using GridSearchCV For best estimator to random forest classifier","0d818d97":"Print model accuracy score","867f09c2":"Initiliazing param_grid","3536294d":"# Titanic Survival Predictions","0d77fe71":"Ok done for cleaning data.","baf7eaee":"from the barplot in the above we know Class 1 have higher chance to survived rather than class 3, in class 3 is smaller chance to survived","58b63178":"## Survived People By PClass","12fa1aed":"## Survived People By Gender"}}