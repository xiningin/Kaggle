{"cell_type":{"45ddc54e":"code","a84884ec":"code","1714a9f8":"code","a4fb2923":"code","2405c8f5":"code","98d9b45e":"code","51ecb03b":"code","b39cf792":"code","0a2d7a66":"code","76c46be4":"code","56437e71":"code","d68fc977":"code","24d1e3dd":"code","4a837889":"code","2c22e438":"markdown","eac6c35b":"markdown","77a8286b":"markdown","09b223b3":"markdown","91e8fb4f":"markdown","9f0d1499":"markdown","786374b5":"markdown","dfafc070":"markdown","ae155538":"markdown","ae4ed2f8":"markdown","a846ae2a":"markdown","e2e31162":"markdown","2eb34596":"markdown","0612c9dd":"markdown","6ed965db":"markdown"},"source":{"45ddc54e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a84884ec":"data = pd.read_csv(\"..\/input\/nyc-jobs.csv\")","1714a9f8":"data.head()","a4fb2923":"data.info()","2405c8f5":"data.drop(columns=\"Recruitment Contact\",axis=1,inplace=True)\ndata.info()","98d9b45e":"empty_values = {}\ncolumns = data.columns\nfor col in columns:\n    empty_values[col] = 0\n    for val in data[col].values:\n        val = str(val)\n        if val == \"nan\":\n            empty_values[col] += 1","51ecb03b":"columns = [*empty_values.keys()]\nnumber_of_missing_Values = [*empty_values.values()]\n\ndf = pd.DataFrame({\"Columns of Data Set\":columns,\"# of Missing Values\":number_of_missing_Values})\nnewIndex = (df[\"# of Missing Values\"].sort_values(ascending = False)).index.values\nsortedData = df.reindex(newIndex)\n\nplt.figure(figsize = (15,10))\nax = sns.barplot(x = sortedData[\"Columns of Data Set\"],y = sortedData[\"# of Missing Values\"])\nplt.xticks(rotation = 90)\nplt.xlabel(\"Columns of Data Set\")\nplt.ylabel(\"# of Missing Value\")\nplt.title(\"Number of Missing Values for Each Column of Our Data Set\")\n","b39cf792":"new_columns = []\nnew_values = []\n\nfor col,val in zip(columns,number_of_missing_Values):\n    if val != 0:\n        new_columns.append(col)\n        new_values.append(val)\n\ndf = pd.DataFrame({\"Columns of Data Set\":new_columns ,\"# of Missing Values\":new_values})\nnewIndex = (df[\"# of Missing Values\"].sort_values(ascending = False)).index.values\nsortedData = df.reindex(newIndex)\n\nplt.figure(figsize = (15,10))\nax = sns.barplot(x = sortedData[\"Columns of Data Set\"],y = sortedData[\"# of Missing Values\"])\nplt.xticks(rotation = 90)\nplt.xlabel(\"Columns of Data Set\")\nplt.ylabel(\"# of Missing Value\")\nplt.title(\"Number of Missing Values for Each Column of Our Data Set\")\n","0a2d7a66":"for each in sortedData[\"Columns of Data Set\"]:\n    print(each+\"---->\")\n    print(\"--------------------------\")\n    print(data[each].head())\n    print(\"--------------------------\")\n    print()","76c46be4":"plt.figure(figsize = (20,10))\nplt.plot(data[\"# Of Positions\"])\nplt.show()","56437e71":"data[\"# Of Positions\"].fillna(data[\"# Of Positions\"].median(),inplace = True)\ncnt_x = 0\ncnt_y = 0\nfor each in data[\"# Of Positions\"]:\n    if str(each) == \"nan\":\n        cnt_x += 1\n    else:\n        cnt_y += 1\n\nplt.figure(figsize = (10,5))\nplt.bar(x = \"Empty\",height = cnt_x,color =\"red\")\nplt.bar(x = \"Non Empty\",height = cnt_y,color =\"blue\")\nplt.show()","d68fc977":"number_of_position = {}\nfor title,np in zip(data[\"Business Title\"],data[\"# Of Positions\"]):\n    if title in number_of_position.keys():\n        number_of_position[title] += np\n    else:\n        number_of_position[title] = np\n        \ncolumns = [*number_of_position.keys()]\npositions = [*number_of_position.values()]\n\ndf = pd.DataFrame({\"Business Title\":columns,\"# of positions\":positions})\nnewIndex = (df[\"# of positions\"].sort_values(ascending = False)).index.values\nsortedData = df.reindex(newIndex)\n\nplt.figure(figsize = (15,10))\nax = sns.barplot(x = sortedData[\"Business Title\"][0:20],y = sortedData[\"# of positions\"])\nplt.xticks(rotation = 90)\nplt.xlabel(\"Business Title\")\nplt.ylabel(\"# of Positions\")\nplt.title(\"Relationship between Business Title and Number of Positions\")        \nplt.show()\n","24d1e3dd":"agencies = data[\"Agency\"].unique()\nfreq_Of_agencies = []\nfor agency in agencies:\n    count = len(data[data[\"Agency\"] == agency])\n    freq_Of_agencies.append(count)\n\ndf = pd.DataFrame({\"agency\":agencies,\"freq\":freq_Of_agencies})\nnewIndex = (df[\"freq\"].sort_values(ascending = False)).index.values\nsortedData = df.reindex(newIndex)\n\nplt.figure(figsize = (15,10))\nax = sns.barplot(x = sortedData[\"agency\"],y = sortedData[\"freq\"])\nplt.xticks(rotation = 90)\nplt.xlabel(\"agencies\")\nplt.ylabel(\"frequencies\")\nplt.title(\"Number of Agency in New York\")\nplt.show()\n","4a837889":"plt.figure(figsize=(15,10))\nsns.jointplot(data[\"Salary Range To\"],data[\"# Of Positions\"],size=10,color=\"r\")\nplt.xlabel(\"Salary Range To\")\nplt.ylabel(\"Number Of Positions\")\nplt.show()","2c22e438":"We can replace the nan values with median of the data for # of Positions feature.\n","eac6c35b":"We can see the some values of the data, are nan. It means data is not clean.\nwe must clean the data to use this data in algorithms such as machine learning algorithms. The cleaning data can be challenging. Let's look at the data information to find, how many value is missed.","77a8286b":"Let's look at the data.","09b223b3":"Now, We should concentrate those columns to clean the data.","91e8fb4f":"Finally ,we can search the relationship with salary range and # of positions. ","9f0d1499":"Let's look at # Of Positions feature closer.","786374b5":"We can easily see the how many number of data is empty. For example, Recruitment Contact column has 0 non-null object. It means this column is completely empty. We can't use this column. Let's start to clean data.","dfafc070":"There is no empty values in # of Positions feature anymore. Okay let's start to explore the data.\nFirsly, let's look at the relationship with Business Title and # Of Positions.","ae155538":"The upper bar graph shows us our data is almost clean. But there is problems in some columns in our data set. Let's look at this bar graph again without columns which has 0 missing values.","ae4ed2f8":"We found the all missing values for each columns of our data set. We may increase the understandability with using visualization. You know \"a picture is worths lots of words\".","a846ae2a":"Hi everyone! In this kernel, we apply EDA(Exploring Data Analysis) to Jobs in the New York City. ","e2e31162":"If you've read my kernel, thank you very much,\nIf you write a comment, I'll be appreciate to you...","2eb34596":"To start the analysis of the data, firstly we have to read data from csv file.","0612c9dd":"Now, we can look at the other missing values for our data set.","6ed965db":"After that, we'll look at frequency of each agency in our data set. Then we'll visualize that."}}