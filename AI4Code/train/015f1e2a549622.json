{"cell_type":{"fe364d08":"code","b2f8628e":"code","336528ea":"code","3a58afb9":"code","342bc74a":"code","7dcf053b":"code","ed5a0619":"code","12c0adf6":"code","b5ddf6b1":"code","a607f4e7":"code","44a7e3f4":"code","07544751":"code","95886294":"code","843c7589":"code","a2cb79af":"code","f980c2ed":"code","b2fbb8b3":"code","71a1210a":"code","d5b0f531":"code","84d266be":"code","e2e21420":"code","15b2eac6":"code","59d4c1df":"code","9d611870":"code","ca903cf9":"code","9c7f4dc9":"markdown","ab1abac5":"markdown","afeda113":"markdown","f8056cba":"markdown","92341b6b":"markdown","7070b285":"markdown","b33c8391":"markdown","9b68b15d":"markdown","cabad4c6":"markdown","a4764da3":"markdown","e7555f75":"markdown"},"source":{"fe364d08":"import pandas as pd\nimport numpy as np\nimport itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf,arma_order_select_ic\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima_model import ARIMA\nimport warnings\nwarnings.simplefilter('ignore')","b2f8628e":"train=pd.read_csv(\"..\/input\/train.csv\")","336528ea":"train.describe()","3a58afb9":"train.sample(10)","342bc74a":"df = train.groupby(['Country_Region','Province_State','Date'])['ConfirmedCases'].sum() \\\n                          .groupby(['Country_Region','Province_State']).max().sort_values() \\\n                          .groupby(['Country_Region']).sum().sort_values(ascending = False)\n\ntop5 = pd.DataFrame(df).head(5)\ntop5","7dcf053b":"fig = px.bar(top5, x=top5.index, y='ConfirmedCases', labels={'x':'Country'},\n             color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Bluyl)\nfig.update_layout(title_text='Confirmed COVID-19 cases by country')\nfig.show()","ed5a0619":"df_by_date = pd.DataFrame(train.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Turkey') &(df_by_date.Date >= '02\/02\/2020')].sort_values('ConfirmedCases',ascending = True), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Turkey')\nfig.show()","12c0adf6":"df_by_date = pd.DataFrame(train.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Iran') &(df_by_date.Date >= '02\/02\/2020')].sort_values('ConfirmedCases',ascending = True), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Iran')\nfig.show()","b5ddf6b1":"df_by_date = pd.DataFrame(train.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'France') &(df_by_date.Date >= '02\/02\/2020')].sort_values('ConfirmedCases',ascending = True), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in France')\nfig.show()","a607f4e7":"df_by_date = pd.DataFrame(train.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Italy') &(df_by_date.Date >= '02\/02\/2020')].sort_values('ConfirmedCases',ascending = True), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Italy')\nfig.show()","44a7e3f4":"df_by_date = pd.DataFrame(train.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Germany') &(df_by_date.Date >= '02\/02\/2020')].sort_values('ConfirmedCases',ascending = True), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Germany')\nfig.show()","07544751":"df=train.groupby(['Date','Country_Region']).agg('sum').reset_index()\ndf.tail(5)","95886294":"def pltCountry_cases(ConfirmedCases,*argv):\n    f, ax=plt.subplots(figsize=(100,20))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n\n        plt.plot(country['Date'],country['ConfirmedCases'],linewidth=5)\n       \n        plt.xticks(rotation=10)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of cases' )\n  ","843c7589":"pltCountry_cases('ConfirmedCases','Turkey')\n","a2cb79af":"pltCountry_cases('ConfirmedCases','France')","f980c2ed":"pltCountry_cases('ConfirmedCases','Germany')","b2fbb8b3":"pltCountry_cases('ConfirmedCases','Italy')","71a1210a":"pltCountry_cases('ConfirmedCases','Iran')","d5b0f531":"pltCountry_cases('ConfirmedCases', 'Germany','Turkey', 'Italy','Iran','France')","84d266be":"sns.set(palette = 'Set1',style='darkgrid')\n#Function for making a time serie on a designated country and plotting the rolled mean and standard \ndef roll(country,case='ConfirmedCases'):\n    ts=df.loc[(df['Country_Region']==country)]  \n    ts=ts[['Date',case]]\n    ts=ts.set_index('Date')\n    ts.astype('int64')\n    a=len(ts.loc[(ts['ConfirmedCases']>=10)])\n    ts=ts[-a:]\n    return (ts.rolling(window=4,center=False).mean().dropna())\n\n\ndef rollPlot(country, case='ConfirmedCases'):\n    ts=df.loc[(df['Country_Region']==country)]  \n    ts=ts[['Date',case]]\n    ts=ts.set_index('Date')\n    ts.astype('int64')\n    a=len(ts.loc[(ts['ConfirmedCases']>=10)])\n    ts=ts[-a:]\n    plt.figure(figsize=(100,20))\n    plt.plot(ts.rolling(window=7,center=False).mean().dropna(),label='Rolling Mean')\n    plt.plot(ts[case])\n    plt.plot(ts.rolling(window=7,center=False).std(),label='Rolling std')\n    plt.legend()\n    plt.title('Cases distribution in %s with rolling mean and standard' %country)","e2e21420":"tsC1=roll('Turkey')\nrollPlot('Turkey')","15b2eac6":"fig=sm.tsa.seasonal_decompose(tsC1.values,freq=10).plot()","59d4c1df":"def stationarity(ts):\n    print('Results of Dickey-Fuller Test:')\n    test = adfuller(ts, autolag='AIC')\n    results = pd.Series(test[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for i,val in test[4].items():\n        results['Critical Value (%s)'%i] = val\n    print (results)\n\n#For Turkey\ntsC=tsC1['ConfirmedCases'].values\nstationarity(tsC)","9d611870":"def corr(ts):\n    plot_acf(ts,lags=15,title=\"ACF\")\n    plot_pacf(ts,lags=15,title=\"PACF\")\n    \n\n#For Turkey\ncorr(tsC1)","ca903cf9":"def corr(ts):\n    plot_acf(ts,lags=5,title=\"ACF\")\n    plot_pacf(ts,lags=5,title=\"PACF\")\n    \n\n#For Turkey\ncorr(tsC1)","9c7f4dc9":"### Iran","ab1abac5":"### France","afeda113":"### Turkey","f8056cba":"### Turkey, Germany, Italy, Iran, France","92341b6b":"#### Decompose","7070b285":"### 14 Temmuz 2020\n","b33c8391":"## AutoCorrelation","9b68b15d":"#### Dickey-Fuller Test:","cabad4c6":" #### Rolling mean and standard deviation","a4764da3":"### Italy","e7555f75":"### Germany"}}