{"cell_type":{"0daf89be":"code","7c315677":"code","f7b69d84":"code","44c0a99b":"code","34f720a2":"code","3fac146b":"code","a982b226":"code","9052ba13":"code","ecc97a3c":"code","d137f44c":"code","6bc99a9b":"code","14aafe8e":"code","38d649cb":"code","6474ba7e":"code","fecaa065":"code","aae3cafd":"code","f82d5dc6":"code","ae1b0641":"code","5d0e473d":"code","1d795cb0":"code","b7b44315":"code","301263ce":"code","85e0ce88":"code","d39ec53c":"code","4073a6a0":"code","f74027d9":"markdown","896a0e0a":"markdown","c6e03094":"markdown"},"source":{"0daf89be":"import pandas as pd\nimport numpy as np\nimport os\nimport sys\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.metrics import roc_auc_score , make_scorer,accuracy_score\nfrom sklearn.model_selection import train_test_split,cross_val_score,GridSearchCV\nimport seaborn as sns\nfrom tqdm import tqdm\nfrom sklearn.externals import joblib\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.naive_bayes import GaussianNB\nfrom keras.models import Sequential\nfrom keras.layers import BatchNormalization, Convolution2D , MaxPooling2D\nfrom keras.optimizers import Adam ,RMSprop\nfrom keras.layers.core import  Lambda , Dense, Flatten, Dropout  \nfrom keras.callbacks import Callback\nimport matplotlib.pyplot as plt\nfrom imblearn.over_sampling import SMOTE\nimport operator","7c315677":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","f7b69d84":"x = train.iloc[:,2:]\ny = train['target']","44c0a99b":"x_train, x_test, y_train,y_test = train_test_split(x,\n                                                    y,\n                                                    random_state = 21,\n                                                    test_size = 0.15\n                                                  )","34f720a2":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","3fac146b":"for i in range(x_train.shape[1]):\n    ax1 = sns.distplot(x_train[(y_train==0),i])\n    ax2 = sns.distplot(x_train[(y_train==1),i])\n    plt.show()","a982b226":"##for i in range(x_train.shape[1]):\n  ##  y_train = y_train[abs(x_train[:,i]) <= 2.5]\n   ## x_train = x_train[abs(x_train[:,i]) <= 2.5]","9052ba13":"neg = len(y_train)-sum(y_train)\npos = sum(y_train)\nscale_pos_weight  = float(neg\/pos)","ecc97a3c":"XGB = XGBClassifier(scale_pos_weight=scale_pos_weight,\n                        objective='binary:logistic',\n                        random_state= 21,\n                        tree_method = 'gpu_hist',\n                        learning_rate = 0.1, ## From initial gridsearch\n                        n_estimators = 1000 ,  ## From initial gridsearch\n                        tree_depth= 3     ## From initial gridsearch\n                    )","d137f44c":"XGB.fit(x_train, y_train)","6bc99a9b":"y_preds = XGB.predict_proba(x_test)","14aafe8e":"probs_pos_XGB  = []\nfor pred in y_preds:\n    probs_pos_XGB.append(pred[1])","38d649cb":"roc_gnb = roc_auc_score(y_test,probs_pos_XGB)\nprint(roc_gnb)","6474ba7e":"GNB = GaussianNB()","fecaa065":"GNB.fit(x_train,y_train)\ny_preds_test = GNB.predict_proba(x_test)\n\nprobs_pos_test_gnb  = []\nfor pred in y_preds_test:\n    probs_pos_test_gnb.append(pred[1])\n    \nroc_test = roc_auc_score(y_test,probs_pos_test_gnb)\nprint(roc_test)","aae3cafd":"auc = {}\nfor weight in [x\/100 for x in range(0,101)]:\n    combined_preds = []\n    for i in range(x_test.shape[0]):\n        combined_pred = probs_pos_XGB[i] * weight + probs_pos_test_gnb[i] * (1-weight)\n        combined_preds.append(combined_pred)\n    auc[weight] = roc_auc_score(y_test,combined_preds)\n    ","f82d5dc6":"optimal_weight = max(auc, key=auc.get)","ae1b0641":"x_train.shape","5d0e473d":"x_sub = np.array(test.iloc[:,1:])\ny_probs_sub_XGB = XGB.predict_proba(x_sub)\ny_probs_sub_GNB = GNB.predict_proba(x_sub)","1d795cb0":"probs_pos_sub_XGB  = []\nfor pred in y_probs_sub_XGB:\n    probs_pos_sub_XGB.append(pred[1])\nprint(len(probs_pos_sub_XGB))","b7b44315":"probs_pos_sub_GNB  = []\nfor pred in y_probs_sub_GNB:\n    probs_pos_sub_GNB.append(pred[1])\nprint(len(probs_pos_sub_GNB))","301263ce":"sub_combined_preds = []\nfor i in range(x_sub.shape[0]):\n    combined_pred = probs_pos_sub_XGB[i] * optimal_weight + probs_pos_sub_GNB[i] * (1-optimal_weight)\n    sub_combined_preds.append(combined_pred)\nprint(len(sub_combined_preds))","85e0ce88":"submission = pd.DataFrame(columns = ['ID_code','Target'])","d39ec53c":"submission['ID_code']= test['ID_code'] \nsubmission['Target'] = sub_combined_preds","4073a6a0":"submission.to_csv('Submission.csv',index=False)","f74027d9":"## GNB","896a0e0a":"## Ensemble ","c6e03094":"### XGBoost \n*Paramaters tuned outside of this kernel*"}}