{"cell_type":{"ea0ee928":"code","8fc14506":"code","f5136d07":"code","b8818547":"code","d3268e52":"code","af483ce9":"code","45c2cc52":"code","d6fd3c2e":"code","107abaa6":"code","51a88ef3":"code","6d96ee02":"code","593a4177":"code","01cad3db":"code","ad6a8456":"markdown","665e3a22":"markdown"},"source":{"ea0ee928":"import datetime\nimport requests\nimport pandas as pd\nimport json\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets","8fc14506":"plt.style.use('ggplot')\n\nplt.rcParams['font.family'] = 'serif'\nplt.rcParams['font.serif'] = 'Ubuntu'\nplt.rcParams['font.monospace'] = 'Ubuntu Mono'\nplt.rcParams['font.size'] = 10\nplt.rcParams['axes.labelsize'] = 10\nplt.rcParams['axes.labelweight'] = 'bold'\nplt.rcParams['axes.titlesize'] = 18\nplt.rcParams['xtick.labelsize'] = 8\nplt.rcParams['ytick.labelsize'] = 8\nplt.rcParams['legend.fontsize'] = 10\nplt.rcParams['figure.titlesize'] = 18\n\n\ncolor = ('c', 'green', 'red')\ncat = (\"Active\", \"Recovered\", \"Decreased\")","f5136d07":"RAW_DATA = \"https:\/\/api.rootnet.in\/covid19-in\/stats\/history\"\ndata = requests.get(RAW_DATA)\njsonData = data.json()","b8818547":"history = [x['day'] for x in jsonData['data']]\nhistoryDataTotal = [x['summary']['total'] for x in jsonData['data']]\nhistoryDataRecovered = [x['summary']['discharged'] for x in jsonData['data']]\nhistoryDataDeaths = [x['summary']['deaths'] for x in jsonData['data']]\n# historyData","d3268e52":"recovered_and_deaths = [historyDataDeaths[i] + historyDataRecovered[i] for i in range(len(historyDataRecovered))]\n\nwidth = 0.35\nfig, ax = plt.subplots(figsize=(24,8))\n\nax.bar(history, historyDataTotal, width, bottom=recovered_and_deaths, label=\"Active\", color = color[0])\nax.bar(history, historyDataRecovered, width, bottom=historyDataDeaths, label=\"Recovered\", color = color[1])\nax.bar(history, historyDataDeaths, width, label=\"Death\", color = color[2])\n\nax.set_xlabel(\"DATE\")\nax.set_ylabel(\"NUMBER OF PATIENTS\")\nax.set_title(\"Patient Count in different category\")\nax.legend()\n\nplt.xticks(rotation=90)\nplt.show()","af483ce9":"fig, ax = plt.subplots(ncols=3, nrows=1,figsize=(24,8))\n\nax[0].bar(history, historyDataTotal, width, label=\"Active\", color=color[0])\nax[1].bar(history, historyDataRecovered, width, label=\"Recovered\", color = color[1])\nax[2].bar(history, historyDataDeaths, width, label=\"Death\", color= color[2])\n\nax[0].set_ylabel(\"Number of Patients\")\n\nfor i in range(3):\n    ax[i].set_xlabel(\"DATE\")\n    ax[i].set_title(\"Patient Count in {} category\".format(cat[i]))\n    ax[i].set_xticks(\"\")\n    ax[i].legend()\nplt.show()","45c2cc52":"# State based Geo Map yet to develop\n# import shapefile as shp\n# shp_path = \"https:\/\/map.igismap.com\/share-map\/export-layer\/India_Boundary\/b73ce398c39f506af761d2277d853a92\"\n# shapeFile = requests.get(shp_path)\n\n# sf = shp.Reader(shapeFile)","d6fd3c2e":"stateWise = {}\ncurrentStateWise = {}\ntotalactive = jsonData['data'][-1]['summary']['total']\ntotalrecovered = jsonData['data'][-1]['summary']['discharged']\ntotaldead = jsonData['data'][-1]['summary']['deaths']\n\nfor state in jsonData['data'][-1]['regional']:\n    currentStateWise[state['loc']] = (state['totalConfirmed']\/totalactive,state['discharged']\/totalrecovered,state['deaths']\/totaldead)\n    \nfor data in jsonData['data']:\n    for state in data['regional']:\n        stateWise[state['loc']] = (list(), list(), list(), list())\n\nfor data in jsonData['data']:\n    day = data['day']\n    for state in data['regional']:\n        stateWise[state['loc']][0].append(state['totalConfirmed'])\n        stateWise[state['loc']][1].append(state['discharged'])\n        stateWise[state['loc']][2].append(state['deaths'])\n        stateWise[state['loc']][3].append(day)\n        ","107abaa6":"cat = (\"Active\", \"Recovered\", \"Decreased\")\nrecovered_and_deaths = [historyDataDeaths[i] + historyDataRecovered[i] for i in range(len(historyDataRecovered))]\nwidth = 0.35\n\nfig, ax = plt.subplots(ncols=3, nrows=1,figsize=(24,8))\nfor key in stateWise:\n    ax[0].plot([x for counter,x in enumerate(stateWise[key][3]) if stateWise[key][0][counter] > 500], [x for x in stateWise[key][0] if x > 500], width)\n\nfor key in stateWise:\n    ax[1].plot(stateWise[key][3], stateWise[key][1], width)\n    \nfor key in stateWise:\n    ax[2].plot(stateWise[key][3], stateWise[key][2], width)\n\nax[0].set_ylabel(\"Number of Patients\")\n\nfor i in range(3):\n    ax[i].set_xlabel(\"DATE\")\n    ax[i].set_title(\"Patient Count in {} category\".format(cat[i]))\n    ax[i].set_xticks(\"\")\n    ax[i].legend()\nplt.show()","51a88ef3":"import random\n# c = list(zip(prec, labels, explode))\n# random.shuffle(c)\n# prec, labels, explode = zip(*c)\n\n\ndef func(pct):\n    if pct < 1.8:\n        return \"\"\n    else:\n        return \"{:1.1f}%\".format(pct)\n\nfig, ax = plt.subplots(ncols=2, nrows=2, figsize=(24,24))\nflataxes = []\nfor i in range(len(ax)):\n    for j in range(len(ax[0])):\n        flataxes.append(ax[i][j])\n        \nfor i in range(3):\n    explode = [0 if x[i] < 0.075 else 0.1 for x in currentStateWise.values()]\n    labels = [x if currentStateWise[x][i] > 0.009 else '' for x in currentStateWise.keys()]\n    prec = [x[i] for x in currentStateWise.values()]\n\n    c = list(zip(prec, labels, explode))\n    c.sort()\n    prec, labels, explode = zip(*c)\n\n    flataxes[i].pie(prec, explode = explode, labels=labels, autopct=lambda pct: func(pct),\n        shadow=True, startangle=90)\n\n    flataxes[i].axis(\"equal\")\n    flataxes[i].set_title(\"{} Cases percentage State-Wise\".format(cat[i]))\n\nta = [x[0]*totalactive for x in currentStateWise.values()]\ntb = [x[1]*totalrecovered for x in currentStateWise.values()]\ntc = [x[2]*totaldead for x in currentStateWise.values()]\ntd = [tb[i] + tc[i] for i in range(len(tb))]\ntx = currentStateWise.keys()\n\nflataxes[-1].bar(tx, ta , width, bottom=td, label=\"Active\", color = color[0])\nflataxes[-1].bar(tx, tb, width, bottom=tc, label=\"Recovered\", color = color[1])\nflataxes[-1].bar(tx, tc, width, label=\"Death\", color = color[2])\nflataxes[-1].set_title(\"State wise patients in different Category\")\nflataxes[-1].set_yticks([])\nflataxes[-1].grid(False)\nflataxes[-1].set_facecolor(\"white\")\n\nplt.xticks(rotation=90)\nplt.show()","6d96ee02":"x = widgets.Dropdown(\n    options=stateWise.keys(),\n    value='Delhi',\n    description='Text:',\n    disabled=False,\n)","593a4177":"import numpy as np\n\ndef plot_func(city):\n\n    width = 0.2\n    fig, ax = plt.subplots(figsize=(24,8))\n    try:\n        ax.bar(np.arange(len(history))-width, stateWise[city][0], width, label=\"Active\", color = color[0])\n        ax.bar(np.arange(len(history)), stateWise[city][1], width, label=\"Recovered\", color = color[1])\n        ax.bar(np.arange(len(history))+width, stateWise[city][2], width, label=\"Death\", color = color[2])\n    except:\n        ax.bar(np.arange(len(stateWise[city][0]))-width, stateWise[city][0], width, label=\"Active\", color = color[0])\n        ax.bar(np.arange(len(stateWise[city][1])), stateWise[city][1], width, label=\"Recovered\", color = color[1])\n        ax.bar(np.arange(len(stateWise[city][2]))+width, stateWise[city][2], width, label=\"Death\", color = color[2])\n        \n    ax.set_xlabel(\"DATE\")\n    ax.set_ylabel(\"NUMBER OF PATIENTS\")\n    ax.set_title(\"Patient Count in different category\")\n    ax.set_xticks(np.arange(len(history)))\n    ax.set_xticklabels(history)\n    ax.legend()\n\n    plt.xticks(rotation=90)\n    plt.show()","01cad3db":"x = widgets.interact(plot_func, city = widgets.Dropdown(\n                                            options=stateWise.keys(),\n                                            value='Maharashtra',\n                                            description='City:',\n                                            disabled=False,\n                                        ))","ad6a8456":"## Current Status of Case","665e3a22":"## Present Day Statistics"}}