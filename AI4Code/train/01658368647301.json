{"cell_type":{"119562c6":"code","b7118f4e":"code","0cec233a":"code","d16ca5a2":"code","9bae9d4e":"code","83a5f0f7":"code","e9cfd735":"code","7abd7178":"code","0557cee6":"code","1d0fbff6":"markdown","9f5f6e88":"markdown","79e971fe":"markdown","bbbe4941":"markdown"},"source":{"119562c6":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.metrics import mean_squared_error\n\nfrom IPython.display import clear_output\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","b7118f4e":"!pip install autoviz\n!pip install xlrd\n\nfrom autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\n\nclear_output()","0cec233a":"sample_submission = pd.read_csv(\"..\/input\/30-days-of-ml\/sample_submission.csv\")","d16ca5a2":"ff = AV.AutoViz('..\/input\/30-days-of-ml\/train.csv')","9bae9d4e":"!nvidia-smi","83a5f0f7":"from xgboost import XGBRegressor\nxgb_params = {\n    'n_estimators': 5000,\n    'learning_rate': 0.12,\n    'subsample': 0.96,\n    'colsample_bytree': 0.12,\n    'max_depth': 2,\n    'booster': 'gbtree', \n    'reg_lambda': 65.1,\n    'reg_alpha': 15.9,\n    'random_state':40\n}\n","e9cfd735":"df = pd.read_csv(\"..\/input\/30days-folds\/train_folds.csv\")\ndf_test = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/30-days-of-ml\/sample_submission.csv\")\n\nuseful_features = [c for c in df.columns if c not in (\"id\", \"target\", \"kfold\")]\nobject_cols = [col for col in useful_features if 'cat' in col]\ndf_test = df_test[useful_features]","7abd7178":"final_predictions = []\nscores = []\nfor fold in range(5):\n    xtrain =  df[df.kfold != fold].reset_index(drop=True)\n    xvalid = df[df.kfold == fold].reset_index(drop=True)\n    xtest = df_test.copy()\n\n    ytrain = xtrain.target\n    yvalid = xvalid.target\n    \n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]\n    \n    ordinal_encoder = OrdinalEncoder()\n    xtrain[object_cols] = ordinal_encoder.fit_transform(xtrain[object_cols])\n    xvalid[object_cols] = ordinal_encoder.transform(xvalid[object_cols])\n    xtest[object_cols] = ordinal_encoder.transform(xtest[object_cols])\n    \n    params ={'learning_rate': 0.12048476513286424,\n 'reg_lambda': 2.7877111396373698e-08,\n 'reg_alpha': 0.0055110804060212225,\n 'subsample': 0.6126668712919948,\n 'colsample_bytree': 0.8444075670111965,\n 'max_depth': 2}\n    \n    model = XGBRegressor(\n        random_state=0, \n        tree_method='gpu_hist',\n        gpu_id=0,\n        predictor=\"gpu_predictor\",\n        n_estimators=5000,\n        **params\n    )\n    model.fit(xtrain, ytrain, early_stopping_rounds=300, eval_set=[(xvalid, yvalid)], verbose=1000)\n    preds_valid = model.predict(xvalid)\n    test_preds = model.predict(xtest)\n    final_predictions.append(test_preds)\n    rmse = mean_squared_error(yvalid, preds_valid, squared=False)\n    print(fold, rmse)\n    scores.append(rmse)\n\nprint(np.mean(scores), np.std(scores))","0557cee6":"preds = np.mean(np.column_stack(final_predictions), axis=1)\nsample_submission.target = preds\nsample_submission.to_csv(\"xgb_submission_k\", index=False)\n\nsample_submission.head()","1d0fbff6":"# PREDICTIONS","9f5f6e88":"# AUTO EDA","79e971fe":"# MODELING","bbbe4941":"# KFOLDS\n\nThis dataset is the same as abishek thakur created!"}}