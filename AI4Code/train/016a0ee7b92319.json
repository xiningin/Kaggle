{"cell_type":{"0af9abf7":"code","6cdab1a8":"code","bd40aa9e":"code","48b15b4c":"code","f2dccd93":"code","89abdcf4":"code","13906e05":"code","787d9dfb":"code","c6830b0b":"code","8e8f9335":"code","ef48ca2e":"code","5597dc2f":"code","1216b8b8":"code","04fdb227":"code","5f47e41f":"code","1f51ff26":"code","13c2e55b":"code","1a6853e0":"code","eaac9ffe":"code","f8612a83":"code","36f4add9":"markdown","11076359":"markdown","6efa7518":"markdown","be955534":"markdown","7041deab":"markdown","911617b5":"markdown","62119c3b":"markdown"},"source":{"0af9abf7":"!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","6cdab1a8":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\n\nimport tokenization","bd40aa9e":"import matplotlib.pyplot as plt\nfrom IPython.core.display import display, HTML\n%matplotlib inline","48b15b4c":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","f2dccd93":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n    \n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(clf_output)\n    \n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=1e-5), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","89abdcf4":"%%time\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","13906e05":"train = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","787d9dfb":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","c6830b0b":"train_input = bert_encode(train.text.values, tokenizer, max_len=160)\ntest_input = bert_encode(test.text.values, tokenizer, max_len=160)\ntrain_labels = train.target.values","8e8f9335":"model = build_model(bert_layer, max_len=160)\nmodel.summary()","ef48ca2e":"# checkpoint = ModelCheckpoint('model.h5', monitor='val_loss', save_best_only=True)\n\n# train_history = model.fit(\n#     train_input, train_labels,\n#     validation_split=0.2,\n#     epochs=3,\n#     callbacks=[checkpoint],\n#     batch_size=16\n# )","5597dc2f":"model.load_weights('..\/input\/model-weights\/model.h5')\ntest_pred = model.predict(test_input)","1216b8b8":"model.layers[-3].output","04fdb227":"model.layers[-1].output","5f47e41f":"model.layers[-1].get_weights()[0].shape","1f51ff26":"all_layer_weights = model.layers[-1].get_weights()[0]\ncam_model = tf.keras.Model(inputs=model.input, \n        outputs=(model.layers[-3].output, model.layers[-1].output)) ","13c2e55b":"train","1a6853e0":"train_input[0][:2].shape","eaac9ffe":"all_layer_weights.shape","f8612a83":"for n_case in range(10):\n    \n    k = np.random.choice(np.arange(4*train.shape[0]\/\/5,train.shape[0]))\n    if len(train.loc[k,'text'])>160: continue #too wide for display\n    print('Case:\u3000' + str(n_case))\n    print('Index ' + str(k))\n    print('Raw_text: ' + train.loc[k,'text'])\n    \n    # EXTRACT INFLUENCIAL TEXT\n    _,last_conv_output, pred_vec = cam_model.predict((train_input[0][k].reshape(1,-1),train_input[1][k].reshape(1,-1),train_input[2][k].reshape(1,-1)))\n    last_conv_output = np.squeeze(last_conv_output) # last layer weights [None,160,1024]\n    pred = np.argmax(pred_vec)\n    layer_weights = all_layer_weights[:,:] # class layer weights[1024,1]\n    final_output = np.squeeze(np.dot(last_conv_output, layer_weights)) # weights [160,1]\n    \n    if pred==train.loc[k,'target']: continue #skip misclassified\n        \n    # PLOT INFLUENCE VALUE\n    idx = np.sum(train_input[1][k]) #num of token\n    v = np.argsort(final_output[:idx-1]) #sorted tokens'weights\n    mx = final_output[v[-1]] # maximum token weight\n    x = max(-10,-len(v)) # increase minimum weight thres to only highlight important words\n    mn = final_output[v[x]] \n    print('Train row %i. Predict %s. True label is %s'%(k,pred,train.loc[k,'target']))\n    \n    # DISPLAY ACTIVATION TEXT\n    html = ''\n    for j in range(1,idx):\n        x = (final_output[j]-mn)\/(mx-mn)\n        html += \"<span style='background:{};font-family:monospace'>\".format('rgba(255,255,0,%f)'%x)\n        html += tokenizer.convert_ids_to_tokens([train_input[0][k,j]])[0]+' '\n        html += \"<\/span>\"\n    html += \" (predict)\"\n    display(HTML(html))\n\n#     # DISPLAY TRUE SELECTED TEXT\n#     text1 = \" \".join(train.loc[k,'text'].lower().split()) \n#     text2 = \" \".join(train.loc[k,'selected_text'].lower().split())\n#     sp = text1.split(text2)\n#     html = \"<span style='font-family:monospace'>\"+sp[0]+\"<\/span>\"\n#     for j in range(1,len(sp)):\n#         html += \"<span style='background:yellow;font-family:monospace'>\"+text2+'<\/span>'\n#         html += \"<span style='font-family:monospace'>\"+sp[j]+\"<\/span>\"\n#     html += \" (true)\"\n#     display(HTML(html))\n#     print()","36f4add9":"# Load trained model","11076359":"\n### Bert_layer output \n**pooled_output, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])** \n\nThere are two outputs: a **pooled_output** of shape **[batch_size, 1024]** with representations for the entire input sequences and a **sequence_output** of shape **[batch_size, max_seq_length, 1024]** with representations for each input token (in context).","6efa7518":"\n## References\n\n* Source for `bert_encode` function: https:\/\/www.kaggle.com\/user123454321\/bert-starter-inference\n* All pre-trained BERT models from Tensorflow Hub: https:\/\/tfhub.dev\/s?q=bert","be955534":"# Load and Preprocess\n\n- Load BERT from the Tensorflow Hub\n- Load CSV files containing training data\n- Load tokenizer from the bert layer\n- Encode the text into tokens, masks, and segment flags","7041deab":"# Model: Build, Train, Predict, Submit","911617b5":"# CAM model part","62119c3b":"# For training"}}