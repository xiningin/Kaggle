{"cell_type":{"3e7815f8":"code","278d3a9e":"code","1bf521a0":"code","974c3981":"code","91dc378e":"code","b1f1465e":"code","80022e59":"code","0909ba6c":"code","4ae8f80f":"code","4952d0d5":"code","958044ba":"code","20e886f9":"code","9be0a65b":"code","38c0d50a":"code","38922b3f":"code","f39d2da9":"code","5184afa0":"code","d5272435":"code","485168ea":"code","61e8b2b2":"code","ba332363":"code","0152bbbc":"code","e8d4711f":"code","c35f1288":"code","cdfd249c":"code","fcdc1d6f":"code","faa38d5c":"code","63e56463":"code","6fadb6b2":"code","92c25265":"code","76117317":"code","8ad35149":"code","ec3abc10":"code","43e70bb0":"code","5904164f":"code","ce7a73a9":"code","2b558650":"code","ab1f8bf4":"code","04579f8c":"code","3aa36dae":"code","52234842":"code","d2ae40ed":"code","e9bc2c58":"code","60c0cfe9":"code","a675122d":"code","50965b45":"code","a5adaf99":"markdown","ab8a2b3b":"markdown","8f987a9c":"markdown","b9ffae94":"markdown","ab0b743a":"markdown","dc7ccc69":"markdown","52b2c3d1":"markdown","009e786f":"markdown","9a217815":"markdown"},"source":{"3e7815f8":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","278d3a9e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\n\nfrom fastai.imports import *\nfrom fastai.transforms import *\nfrom fastai.conv_learner import *\nfrom fastai.model import *\nfrom fastai.dataset import *\nfrom fastai.sgdr import *\nfrom fastai.plots import *","1bf521a0":"# make sure CUDA is available and enabled\nprint(torch.cuda.is_available(), torch.backends.cudnn.enabled)","974c3981":"comp_name = \"digit_recognizer\"\ninput_path = \"..\/input\/\"\nwd = \"\/kaggle\/working\/\"","91dc378e":"def create_symlnk(src_dir, lnk_name, dst_dir=wd, target_is_dir=False):\n    \"\"\"\n    If symbolic link does not already exist, create it by pointing dst_dir\/lnk_name to src_dir\/lnk_name\n    \"\"\"\n    if not os.path.exists(dst_dir + lnk_name):\n        os.symlink(src=src_dir + lnk_name, dst = dst_dir + lnk_name, target_is_directory=target_is_dir)","b1f1465e":"create_symlnk(input_path, \"train.csv\")\ncreate_symlnk(input_path, \"test.csv\")","80022e59":"# perform sanity check\n!ls -alh","0909ba6c":"# load data\ntrain_df = pd.read_csv(f\"{wd}train.csv\")\ntest_df = pd.read_csv(f\"{wd}test.csv\")","4ae8f80f":"train_df.head()","4952d0d5":"print(train_df.shape, test_df.shape)","958044ba":"# create validation dataset\nval_df = train_df.sample(frac=0.2, random_state=1337)\nval_df.shape","20e886f9":"# remove validation data from train dataset\ntrain_df = train_df.drop(val_df.index)\ntrain_df.shape","9be0a65b":"# separate labels from data\nY_train = train_df[\"label\"]\nY_valid = val_df[\"label\"]\nX_train = train_df.drop(\"label\", axis=1)\nX_valid = val_df.drop(\"label\", axis=1)","38c0d50a":"print(X_train.shape, X_valid.shape)\nprint(Y_train.shape, Y_valid.shape)","38922b3f":"# display an actual image\/digit\nimg = X_train.iloc[0,:].values.reshape(28,28)\nplt.imshow(img, cmap=\"gray\")","f39d2da9":"def reshape_img(matrix):\n    \"\"\"\n    Reshape an existing 2D pandas.dataframe into 3D-numpy.ndarray\n    \"\"\"\n    try:\n        return matrix.values.reshape(-1, 28, 28)\n    except AttributeError as e:\n        print(e)","5184afa0":"def add_color_channel(matrix):\n    \"\"\"\n    Add missing color channels to previously reshaped image\n    \"\"\"\n    matrix = np.stack((matrix, ) *3, axis = -1)\n    return matrix","d5272435":"def convert_ndarry(matrix):\n    \"\"\"\n    Convert pandas.series into numpy.ndarray\n    \"\"\"\n    try:\n        return matrix.values.flatten()\n    except AttributeError as e:\n        print(e)","485168ea":"# reshape data and add color channels\nX_train = reshape_img(X_train)\nX_train = add_color_channel(X_train)\nX_valid = reshape_img(X_valid)\nX_valid = add_color_channel(X_valid)\ntest_df = reshape_img(test_df)\ntest_df = add_color_channel(test_df)","61e8b2b2":"# convert y_train and y_valid into proper numpy.ndarray\nY_train = convert_ndarry(Y_train)\nY_valid = convert_ndarry(Y_valid)","ba332363":"# run sanity checks\npreprocessed_data = [X_train, Y_train, X_valid, Y_valid, test_df]\nprint([e.shape for e in preprocessed_data])\nprint([type(e) for e in preprocessed_data])","0152bbbc":"# define architecture\narch = resnet50\nsz = 28\nclasses = np.unique(Y_train)","e8d4711f":"data = ImageClassifierData.from_arrays(path=wd, \n                                       trn=(X_train, Y_train),\n                                       val=(X_valid, Y_valid),\n                                       classes=Y_train,\n                                       test=test_df,\n                                       tfms=tfms_from_model(arch, sz))","c35f1288":"# run learner with precompute enabled\nlearn = ConvLearner.pretrained(arch, data, precompute=True)","cdfd249c":"# find optimal learning rate\nlrf = learn.lr_find()","fcdc1d6f":"# plot loss vs. learning rate\nlearn.sched.plot()","faa38d5c":"# fit learner\n%time learn.fit(1e-2, 2)","63e56463":"# save model\n#learn.save(\"28_lastlayer\")","6fadb6b2":"# disable precompute and unfreeze layers\nlearn.precompute=False\nlearn.unfreeze()","92c25265":"# define differential learning rates\nlr = np.array([0.001, 0.0075, 0.01])","76117317":"# retrain full model\n%time learn.fit(lr, 3, cycle_len=1, cycle_mult=2)","8ad35149":"# save full model\n#learn.save(\"28_all\")","ec3abc10":"# get accuracy for validation set\nlog_preds, y = learn.TTA()\nprobs = np.mean(np.exp(log_preds), 0)\naccuracy_np(probs, y)","43e70bb0":"# predict on test set\n%time log_preds_test, y_test = learn.TTA(is_test=True)\nprobs_test = np.mean(np.exp(log_preds_test), 0)\nprobs_test.shape","5904164f":"# create dataframe from probabilities\ndf = pd.DataFrame(probs_test)","ce7a73a9":"# increase index by 1 to obtain proper ImageIDs\ndf.index += 1","2b558650":"# create new colum containing label with highest probability for each digit\ndf = df.assign(Label = df.values.argmax(axis=1))","ab1f8bf4":"# replicate index as dedicated ImageID column necessary for submission\ndf = df.assign(ImageId = df.index.values)","04579f8c":"# drop individual probabilites\ndf = df.drop([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], axis=1)","3aa36dae":"# reorder columns for submission\ndf = df[[\"ImageId\", \"Label\"]]","52234842":"# run sanity checks\ndf.head()","d2ae40ed":"# ...\ndf.tail()","e9bc2c58":"# ...\ndf.shape","60c0cfe9":"# write dataframe to CSV\ndf.to_csv(f\"sub_{comp_name}_{arch.__name__}.csv\", index=False)","a675122d":"def clean_up():\n    \"\"\"\n    Delete all temporary directories and symlinks in the current directory\n    \"\"\"\n    try:\n        shutil.rmtree(\"models\")\n        shutil.rmtree(\"tmp\")\n        os.unlink(\"test.csv\")\n        os.unlink(\"train.csv\")\n    except FileNotFoundError as e:\n        print(e)","50965b45":"clean_up()","a5adaf99":"# About\nThis notebook naively applies the techniques from [fastai's deep learning for coders course](http:\/\/course.fast.ai\/) - specifically those from [lesson 1](http:\/\/course.fast.ai\/lessons\/lesson1.html) - to the MNIST dataset","ab8a2b3b":"# Prepare data","8f987a9c":"# Inspect data","b9ffae94":"# Model","ab0b743a":"# Preprocessing\nPreprocessing according to advice in [fastai's forums](http:\/\/forums.fast.ai\/t\/how-to-use-kaggles-mnist-data-with-imageclassifierdata\/7653\/9)","dc7ccc69":"# Cleanup","52b2c3d1":"# Submission","009e786f":"## Helper functions to deal with Kaggle's file system limitations","9a217815":"# Setup"}}