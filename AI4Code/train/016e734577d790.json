{"cell_type":{"4ab677d8":"code","a974001d":"code","44df12aa":"code","3da2e911":"code","b6cd76cd":"code","d5ab6847":"code","675386fa":"code","c38dbfe7":"code","8b6e304c":"code","030cbec1":"code","722a136a":"code","a91c72db":"code","653d5b08":"code","c5d4330c":"code","bd369455":"code","ce555d3e":"code","8bc9dac5":"markdown","3fad161d":"markdown","f993a1b7":"markdown","dcc28ec2":"markdown","2845323d":"markdown","85e8bca2":"markdown","06f22975":"markdown","1f15b2ce":"markdown","e128e6ca":"markdown","b7c43a2c":"markdown","7b50ff87":"markdown","08b7103d":"markdown","5ce61ed0":"markdown","6be64d16":"markdown","da895596":"markdown","cfdbc731":"markdown","4e1021dc":"markdown","ad6b58e5":"markdown","c77e0ad9":"markdown","c8e29ce3":"markdown","33fa6599":"markdown","f5f75601":"markdown","7e0e6e74":"markdown","4d6518e4":"markdown","4ea8ac46":"markdown","5d64bc06":"markdown","f73782df":"markdown","53080fe3":"markdown"},"source":{"4ab677d8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy import stats \nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","a974001d":"df_item = pd.read_csv(\"..\/input\/olist_order_items_dataset.csv\")\ndf_reviews = pd.read_csv(\"..\/input\/olist_order_reviews_dataset.csv\")\ndf_orders = pd.read_csv(\"..\/input\/olist_orders_dataset.csv\")\ndf_products = pd.read_csv(\"..\/input\/olist_products_dataset.csv\")\ndf_geolocation = pd.read_csv(\"..\/input\/olist_geolocation_dataset.csv\")\ndf_sellers = pd.read_csv(\"..\/input\/olist_sellers_dataset.csv\")\ndf_order_pay = pd.read_csv(\"..\/input\/olist_order_payments_dataset.csv\")\ndf_customers = pd.read_csv(\"..\/input\/olist_customers_dataset.csv\")\ndf_category = pd.read_csv(\"..\/input\/product_category_name_translation.csv\")","44df12aa":"df_train = df_orders.merge(df_item, on='order_id', how='left')\ndf_train = df_train.merge(df_order_pay, on='order_id', how='outer', validate='m:m')\ndf_train = df_train.merge(df_reviews, on='order_id', how='outer')\ndf_train = df_train.merge(df_products, on='product_id', how='outer')\ndf_train = df_train.merge(df_customers, on='customer_id', how='outer')\ndf_train = df_train.merge(df_sellers, on='seller_id', how='outer')\n\nprint(df_train.shape)","3da2e911":"def resumetable(df):\n    print(f\"Dataset Shape: {df.shape}\")\n    summary = pd.DataFrame(df.dtypes,columns=['dtypes'])\n    summary = summary.reset_index()\n    summary['Name'] = summary['index']\n    summary = summary[['Name','dtypes']]\n    summary['Missing'] = df.isnull().sum().values    \n    summary['Uniques'] = df.nunique().values\n    summary['First Value'] = df.loc[0].values\n    summary['Second Value'] = df.loc[1].values\n    summary['Third Value'] = df.loc[2].values\n\n    for name in summary['Name'].value_counts().index:\n        summary.loc[summary['Name'] == name, 'Entropy'] = round(stats.entropy(df[name].value_counts(normalize=True), base=2),2) \n\n    return summary\n\ndef cross_heatmap(df, cols, normalize=False, values=None, aggfunc=None):\n    temp = cols\n    cm = sns.light_palette(\"green\", as_cmap=True)\n    return pd.crosstab(df[temp[0]], df[temp[1]], \n                       normalize=normalize, values=values, aggfunc=aggfunc).style.background_gradient(cmap = cm)","b6cd76cd":"resumetable(df_train)","d5ab6847":"id_cols = ['order_id', 'seller_id', 'customer_id', 'order_item_id', 'product_id', \n           'review_id', 'customer_unique_id', 'seller_zip_code_prefix']\n#categorical columns\ncat_cols = df_train.nunique()[df_train.nunique() <= 27].keys().tolist()\n# cat_cols = [x for x in cat_cols if x not in target_col]\n\n#numerical columns\nnum_cols = [x for x in df_train.columns if x not in cat_cols + id_cols]\n\n#Binary columns with 2 values\nbin_cols = df_train.nunique()[df_train.nunique() == 2].keys().tolist()\n\n#Columns more than 2 values\nmulti_cols = [i for i in cat_cols if i not in bin_cols]","675386fa":"df_train['price'].fillna(-1, inplace=True)\n\nplt.figure(figsize=(16,12))\nplt.suptitle('Price Distributions', fontsize=22)\nplt.subplot(221)\ng = sns.distplot(df_train['price'])\ng.set_title(\"Price Distributions\", fontsize=18)\ng.set_xlabel(\"Price Values\")\ng.set_ylabel(\"Probability\", fontsize=15)\n\nplt.subplot(222)\ng1 = sns.distplot(np.log(df_train['price']+1.5))\ng1.set_title(\"Price(LOG) Distributions\", fontsize=18)\ng1.set_xlabel(\"Price Values\")\ng1.set_ylabel(\"Probability\", fontsize=15)\n\nplt.subplot(212)\ng4 = plt.scatter(range(df_train.shape[0]),\n                 np.sort(df_train['price'].values), \n                 alpha=.1)\ng4= plt.title(\"ECDF of Prices\", fontsize=18)\ng4 = plt.xlabel(\"Index\")\ng4 = plt.ylabel(\"Price Distribution\", fontsize=15)\ng4 = plt.axhline(df_train[df_train['price'] != -1]['price'].mean(), color='black', \n           label='Mean Price', linewidth=2)\ng4 = plt.axhline(df_train[df_train['price'] != -1]['price'].mean() + (2.5*df_train[df_train['price'] != -1]['price'].std()),\n                 color='red', \n           label='Mean + 2*Stdev', linewidth=2)\ng4 = plt.legend()\n\nplt.subplots_adjust(hspace = 0.4, top = 0.85)\n\nplt.show()","c38dbfe7":"df_train['price_log'] = np.log(df_train['price'] + 1.5)","8b6e304c":"total = len(df_train)\n\nplt.figure(figsize=(14,6))\n\nplt.suptitle('Payment Type Distributions', fontsize=22)\n\nplt.subplot(121)\ng = sns.countplot(x='payment_type', data=df_train[df_train['payment_type'] != 'not_defined'])\ng.set_title(\"Payment Type Count Distribution\", fontsize=20)\ng.set_xlabel(\"Payment Type Name\", fontsize=17)\ng.set_ylabel(\"Count\", fontsize=17)\n\nsizes = []\nfor p in g.patches:\n    height = p.get_height()\n    sizes.append(height)\n    g.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/total*100),\n            ha=\"center\", fontsize=14) \n    \ng.set_ylim(0, max(sizes) * 1.1)\n\nplt.subplot(122)\ng = sns.boxplot(x='payment_type', y='price_log', data=df_train[df_train['payment_type'] != 'not_defined'])\ng.set_title(\"Payment Type by Price Distributions\", fontsize=20)\ng.set_xlabel(\"Payment Type Name\", fontsize=17)\ng.set_ylabel(\"Price(Log)\", fontsize=17)\n\nplt.subplots_adjust(hspace = 0.5, top = 0.8)\n\nplt.show()","030cbec1":"plt.figure(figsize=(16,12))\n\nplt.suptitle('CUSTOMER State Distributions', fontsize=22)\n\nplt.subplot(212)\ng = sns.countplot(x='customer_state', data=df_train, orient='h')\ng.set_title(\"Customer's State Distribution\", fontsize=20)\ng.set_xlabel(\"State Name Short\", fontsize=17)\ng.set_ylabel(\"Count\", fontsize=17)\ng.set_xticklabels(g.get_xticklabels(),rotation=45)\nsizes = []\nfor p in g.patches:\n    height = p.get_height()\n    sizes.append(height)\n    g.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/total*100),\n            ha=\"center\", fontsize=12) \ng.set_ylim(0, max(sizes) * 1.1)\n\nplt.subplot(221)\ng2 = sns.boxplot(x='customer_state', y='price_log', \n                 data=df_train[df_train['price'] != -1])\ng2.set_title(\"Customer's State by Price\", fontsize=20)\ng2.set_xlabel(\"State Name Short\", fontsize=17)\ng2.set_ylabel(\"Price(Log)\", fontsize=17)\ng2.set_xticklabels(g2.get_xticklabels(),rotation=45)\n\nplt.subplot(222)\ng3 = sns.boxplot(x='customer_state', y='freight_value', \n                 data=df_train[df_train['price'] != -1])\ng3.set_title(\"CUSTOMER's State by Freight Value\", fontsize=20)\ng3.set_xlabel(\"State Name Short\", fontsize=17)\ng3.set_ylabel(\"Freight Value\", fontsize=17)\ng3.set_xticklabels(g3.get_xticklabels(),rotation=45)\n\nplt.subplots_adjust(hspace = 0.5, top = 0.9)\n\nplt.show()","722a136a":"plt.figure(figsize=(16,12))\n\nplt.suptitle('SELLER State Distributions', fontsize=22)\n\nplt.subplot(212)\ng = sns.countplot(x='seller_state', data=df_train, orient='h')\ng.set_title(\"Seller's State Distribution\", fontsize=20)\ng.set_xlabel(\"State Name Short\", fontsize=17)\ng.set_ylabel(\"Count\", fontsize=17)\ng.set_xticklabels(g.get_xticklabels(),rotation=45)\nsizes = []\nfor p in g.patches:\n    height = p.get_height()\n    sizes.append(height)\n    g.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/total*100),\n            ha=\"center\", fontsize=12) \ng.set_ylim(0, max(sizes) * 1.1)\n\nplt.subplot(221)\ng2 = sns.boxplot(x='seller_state', y='price_log', \n                 data=df_train[df_train['price'] != -1])\ng2.set_title(\"Seller's State by Price\", fontsize=20)\ng2.set_xlabel(\"State Name Short\", fontsize=17)\ng2.set_ylabel(\"Price(Log)\", fontsize=17)\ng2.set_xticklabels(g2.get_xticklabels(),rotation=45)\n\nplt.subplot(222)\ng3 = sns.boxplot(x='seller_state', y='freight_value', \n                 data=df_train[df_train['price'] != -1])\ng3.set_title(\"Seller's State by Freight Value\", fontsize=20)\ng3.set_xlabel(\"State Name Short\", fontsize=17)\ng3.set_ylabel(\"Freight Value\", fontsize=17)\ng3.set_xticklabels(g3.get_xticklabels(),rotation=45)\n\nplt.subplots_adjust(hspace = 0.5, top = 0.9)\n\nplt.show()","a91c72db":"# Seting regions\nsudeste = ['SP', 'RJ', 'ES','MG']\nnordeste= ['MA', 'PI', 'CE', 'RN', 'PE', 'PB', 'SE', 'AL', 'BA']\nnorte =  ['AM', 'RR', 'AP', 'PA', 'TO', 'RO', 'AC']\ncentro_oeste = ['MT', 'GO', 'MS' ,'DF' ]\nsul = ['SC', 'RS', 'PR']\n\ndf_train.loc[df_train['customer_state'].isin(sudeste), 'cust_Region'] = 'Southeast'\ndf_train.loc[df_train['customer_state'].isin(nordeste), 'cust_Region'] = 'Northeast'\ndf_train.loc[df_train['customer_state'].isin(norte), 'cust_Region'] = 'North'\ndf_train.loc[df_train['customer_state'].isin(centro_oeste), 'cust_Region'] = 'Midwest'\ndf_train.loc[df_train['customer_state'].isin(sul), 'cust_Region'] = 'South'","653d5b08":"cross_heatmap(df_train[df_train['price'] != -1], ['seller_state', 'cust_Region'], \n              values=df_train[df_train['price'] != -1]['freight_value'], aggfunc='mean')","c5d4330c":"df_train['ord_new'] = df_train['order_item_id'].copy()\n\ndf_train.loc[df_train['order_item_id'].isin([7,8,9,10]), 'ord_new'] = '7 to 10'\ndf_train.loc[(df_train['order_item_id'] > 10), 'ord_new'] = '10 to 20'","bd369455":"plt.figure(figsize=(14,10))\n\n\nplt.subplot(211)\ng = sns.countplot(x='ord_new', data=df_train)\ng.set_title(\"Order Item Id Distribution\", fontsize=20)\ng.set_xlabel(\"State Name Short\", fontsize=17)\ng.set_ylabel(\"Count\", fontsize=17)\nsizes = []\nfor p in g.patches:\n    height = p.get_height()\n    sizes.append(height)\n    g.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/total*100),\n            ha=\"center\", fontsize=12) \ng.set_ylim(0, max(sizes) * 1.1)\n\nplt.subplot(212)\ng1 = sns.scatterplot(x='order_item_id', y='price_log',\n                     data=df_train, alpha=.2)\ng1.set_title(\"Seller's State Distribution\", fontsize=20)\ng1.set_xlabel(\"State Name Short\", fontsize=17)\ng1.set_ylabel(\"Count\", fontsize=17)\n\nplt.subplots_adjust(hspace = 0.5, top = 0.9)\n\nplt.show()","ce555d3e":"round(pd.crosstab(df_train['order_item_id'], df_train['review_score'], normalize='index') *100,2)[:12].T","8bc9dac5":"### Customer's","3fad161d":"# Seller's","f993a1b7":"## <font color=\"red\">Please if this kernel were useful for you, please <b>UPVOTE<\/b> the kernel<\/font>","dcc28ec2":"# State features\n- I will explore the Customers and sellers states;\n- Also, the distribution of price and freight values between states;","2845323d":"# Order Item Id\n- I think that this column is the total items bought. \n- Let's explore the distribution of this feature","85e8bca2":"Cool!!! Very interesting distributions. <br>\nWe can see that:\n- SP sellers have a lowest mean of freights to all regions.\n- CE sellers have high mean value\n- We can note that the sellers from southeast could have a better competitive advantage. ","06f22975":"Different of what we saw in Customer states, sellers have almost 70% of sellers products solds from SP, followed by MG and PR. <br>","1f15b2ce":"Cool. \n- 86.99% of items ordered are of only one item? It's a long tail case. ","e128e6ca":"# Freight Value mean from State to Regions","b7c43a2c":"Cool. Now, we have some understanding of how is our data. <br>\nLet's explore some features and try to find interesting patterns that could help understand the Sales and Customers.","7b50ff87":"# Starting EDA: ","08b7103d":"Wow, I think that it's very insightful. <br>\nWe can note that orders with few quantities have highest review_score's. <br>\nWhy it happens? :o ","5ce61ed0":"# Total items by Review Score","6be64d16":"# Products\n- Let's see the category's and item informations ","da895596":"# Merging Datasets","cfdbc731":"# Price Distribution \nAlmost always I start by categorical features, but as my aim here is to analyze by a financial bias, I will start understanding the Price distributions","4e1021dc":"# Dataset Description:\n### Brazilian E-Commerce Public Dataset by Olist\nWelcome! This is a Brazilian ecommerce public dataset of orders made at Olist Store. The dataset has information of 100k orders from 2016 to 2018 made at multiple marketplaces in Brazil. Its features allows viewing an order from multiple dimensions: from order status, price, payment and freight performance to customer location, product attributes and finally reviews written by customers. We also released a geolocation dataset that relates Brazilian zip codes to lat\/lng coordinates.\n\nThis is real commercial data, it has been anonymised, and references to the companies and partners in the review text have been replaced with the names of Game of Thrones great houses.\n\n## Context\nThis dataset was generously provided by Olist, the largest department store in Brazilian marketplaces. Olist connects small businesses from all over Brazil to channels without hassle and with a single contract. Those merchants are able to sell their products through the Olist Store and ship them directly to the customers using Olist logistics partners. \n\nAfter a customer purchases the product from Olist Store a seller gets notified to fulfill that order. Once the customer receives the product, or the estimated delivery date is due, the customer gets a satisfaction survey by email where he can give a note for the purchase experience and write down some comments.","ad6b58e5":"# Importing Libraries","c77e0ad9":"Cool!\nWe can see that the most common state of CUSTOMERS is SP(42.19%), followed by RJ(13.02%) and MG(11.6%). <br>\nAll this states is from the southeast region of Brazil. Also, we have many sales to RS, PR, SC (states from south region)<br>\n\n","c8e29ce3":"## Mean Freight by States\nThe objective here is to get the mean value when Seller is from X State and Customer from Y State.\n- I will select only the more frequent states to a better view ","33fa6599":"### Some useful functions to explore our data","f5f75601":"df_train.drop(['order_item_id','product_id', \n              'seller_id', 'review_id', 'customer_unique_id'], axis=1, inplace=True)","7e0e6e74":"Cool! It gives to us a clearly vision about the price distributions and now we now that.<br>\n<b>Mean Value<\/b> is: 120.65<br> \n<b>Standard Deviation is:<\/b> 184.11.<br>\nIn the graph, I set as outliers all product prices that cross the bound of Mean(120.65) + 2.5x the Stdev(184.11).<br>\nThe bound to define outliers is BRL 580.92<br>","4d6518e4":"Cool. We can see many interesting informations: <br>\n> More than 73.5% of all sales are the Payment type is Credit Card.  <br>\n> Second most common Payment Type is \"boleto\"(invoice) with almost 19.5%. <br>\n> The third more common payment type is voucher with 5.43%. <br>\nWe also have some payments from debit card and only 3 sales to not_defined ","4ea8ac46":"# Importing Datasets","5d64bc06":"# I will Keep learning in this kernel. \n# If this kernel was useful for you, please don't forget to votes up and stay tuned.","f73782df":"## Payment Type\n- To start simple, I will start exploring the Most frequent Payment Type\n- We also can see the price distributions between ","53080fe3":"## Only to organize the work I will get cols by their posible types"}}