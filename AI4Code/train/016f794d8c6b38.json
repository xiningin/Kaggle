{"cell_type":{"de489d9e":"code","460031d6":"code","dc3db6a6":"code","27f13309":"code","a81a400a":"code","2a0ab9b2":"code","f3fe1d77":"code","15ee0721":"code","0e023bf2":"code","a773f030":"code","c9261526":"code","4161258a":"code","122b4745":"code","cab14860":"code","5b172075":"code","5dc90e40":"code","e753df8f":"markdown","ea402489":"markdown"},"source":{"de489d9e":"import math\nimport itertools\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n#import matplotlib.image as mpimg\nfrom sklearn.metrics import confusion_matrix, mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import train_test_split\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.utils.np_utils import to_categorical\nimport tensorflow as tf\n\n","460031d6":"# Load the data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\ntrain_X = train.iloc[:,1:]\ntrain_y = train['label']\n\nprint(train_X.shape)\nprint(train_y.shape)\nprint(test.shape)\n\ndel train ","dc3db6a6":"train_y.value_counts()","27f13309":"train_X.isnull().sum().sum()","a81a400a":"test.isnull().any().describe()","2a0ab9b2":"# Normalize the data\ntrain_X = train_X \/ 255.0\ntest = test \/ 255.0","f3fe1d77":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\ntrain_X = train_X.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","15ee0721":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\ntrain_y = to_categorical(train_y, num_classes = 10)","0e023bf2":"# Split the train and the validation set for the fitting\ntrain_X, val_X, train_y, val_y = train_test_split(train_X, train_y, test_size = 0.2)\n","a773f030":"plt.imshow(train_X[0][:,:,0])","c9261526":"epochs = 100\nbatch_size = 512\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\n\nopt = Adam(lr=0.007)\n\nmodel.compile(optimizer = opt , loss = \"categorical_crossentropy\", metrics=[\"acc\"])","4161258a":"\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5,\n                              patience=2, min_lr=0.000001, verbose=1)\n\nearly_stopping = EarlyStopping(monitor='val_loss', patience=20, min_delta=1e-2, verbose=1, mode='auto', baseline=0.999)\n\ndatagen = ImageDataGenerator(\n    rotation_range=10,\n    zoom_range=0.1,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ndatagen.fit(train_X)\nwith tf.device('\/gpu:0'):\n    # fits the model on batches with real-time data augmentation:\n    history = model.fit_generator(datagen.flow(train_X, \n                                     train_y, \n                                     batch_size=batch_size),\n                        validation_data = (val_X, val_y),\n                        steps_per_epoch=len(train_X) \/\/ batch_size,\n                        epochs=epochs,\n                        callbacks=[reduce_lr, early_stopping])\n","122b4745":"pred_y = model.predict(val_X)\nprint('RMSE = %.6f' % math.sqrt(mean_squared_error(pred_y, val_y)))\n","cab14860":"sns.lineplot(x=range(len(history.history['val_acc'])), y=history.history['val_acc'], label='val_acc')\nsns.lineplot(x=range(len(history.history['acc'])), y=history.history['acc'], label='acc')\n","5b172075":"matrix = confusion_matrix(val_y.argmax(axis=1), pred_y.argmax(axis=1))\n\nsns.heatmap(matrix, cbar=False, annot=True, fmt='d', cmap=\"Blues\", square=True)\n","5dc90e40":"test_y = model.predict(test)\ntest_y = test_y.round()\nout_label = [ np.argmax(i) for i in test_y]\nout_imageid = [ i+1 for i in range(len(test_y))]\nout = pd.DataFrame()\nout['ImageId'] = out_imageid\nout['Label'] = out_label\n\nout.to_csv('submission.csv', index=False)\nout","e753df8f":"## Submission","ea402489":"Experimenting on the fork of the most voted kernel in this competition..."}}