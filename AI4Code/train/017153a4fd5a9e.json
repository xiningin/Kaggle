{"cell_type":{"91804c61":"code","b84a446d":"code","6ed5b4c4":"code","493c00f5":"code","f040211b":"code","61a3f1b0":"code","172340aa":"code","47a526db":"code","30f58083":"code","d6772172":"code","0299ddd0":"code","715f45dc":"code","889b4675":"code","de38f78c":"code","c4c4874e":"code","67a950d3":"code","6af120af":"code","ff5a3d7e":"code","c0c4f0b8":"code","43947451":"code","5a5209d1":"code","bf55ddd8":"code","2b8c2cd2":"code","fb270405":"code","798fe773":"markdown","1cecb20c":"markdown","094a6530":"markdown","ddc84681":"markdown","2778a62d":"markdown","c05e43af":"markdown","96b3d7ab":"markdown","1829a095":"markdown","6df4555b":"markdown","6299a72c":"markdown","c48ef037":"markdown","28ed2554":"markdown","a054655a":"markdown","09631779":"markdown","d252a1f0":"markdown","31664a6f":"markdown","fb56d64b":"markdown","1008983b":"markdown","66a47722":"markdown","a5a3081a":"markdown","d186ef7c":"markdown","cc1698de":"markdown","e8ba7cae":"markdown"},"source":{"91804c61":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport cv2\nimport random\nimport re\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b84a446d":"path = '\/kaggle\/input\/bms-molecular-translation\/'\nos.listdir(path)","6ed5b4c4":"def plot_example(image_id):\n    fig = plt.figure(figsize=(12, 7))\n    ax = fig.add_subplot(111)\n    filename = train_data.loc[image_id, 'image_id']\n    path_img ='\/'.join([path, 'train', filename[0], filename[1], filename[2]])\n    path_img = path_img+'\/'\n    img = cv2.imread(path_img+filename+'.png')\n    ax.imshow(img)\n    ax.set_title(train_data.loc[image_id, 'InChI'])\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    plt.show()\n\ndef plot_examples(list_IDs):\n    fig, axs = plt.subplots(5, 5, figsize=(25, 14))\n    fig.subplots_adjust(hspace = .2, wspace=.2)\n    axs = axs.ravel()\n    for i in range(25):\n        filename = train_data.loc[list_IDs[i], 'image_id']\n        path_img ='\/'.join([path, 'train', filename[0], filename[1], filename[2]])\n        path_img = path_img+'\/'\n        img = cv2.imread(path_img+filename+'.png')\n        axs[i].imshow(img)\n        axs[i].set_title(train_data.loc[list_IDs[i], 'InChI'][0:20]+'...')\n        axs[i].set_xticklabels([])\n        axs[i].set_yticklabels([])\n    plt.show()","493c00f5":"train_data = pd.read_csv(path+'train_labels.csv')\nsamp_subm = pd.read_csv(path+'sample_submission.csv')","f040211b":"print('Number train samples:', len(train_data.index))\nprint('Number submission samples:', len(samp_subm.index))","61a3f1b0":"train_data.head()","172340aa":"list_IDs = random.sample(list(train_data.index), 25)\nplot_examples(list_IDs)","47a526db":"def lenght_label(s):\n    return len(s)-6\n\ntrain_data['lenght_label'] = train_data['InChI'].apply(lenght_label)","30f58083":"fig = plt.figure(figsize=(8, 5))\ntrain_data['lenght_label'].hist(bins=100)\nplt.title('Distribution of label lenght', loc='left')\nplt.xlabel('Lenght of label')\nplt.ylabel('Frequency')\nplt.show()","d6772172":"def number_layer(s):\n    return len(s.split('\/'))-1\n\ntrain_data['number_layer'] = train_data['InChI'].apply(number_layer)","0299ddd0":"fig = plt.figure(figsize=(8, 5))\ntrain_data['number_layer'].hist(bins=12)\nplt.title('Distribution number of layers')\nplt.xlabel('Number layer')\nplt.ylabel('Frequency')\nplt.show()","715f45dc":"plot_example(0)","889b4675":"train_data.loc[0, 'InChI']","de38f78c":"plot_example(6)","c4c4874e":"\ntrain_data.loc[6, 'InChI']","67a950d3":"plot_example(774948)","6af120af":"train_data.loc[774948, 'InChI']","ff5a3d7e":"def split_formular_layer(s):\n    return s.split('\/')[1]\n\ntrain_data['formular'] = train_data['InChI'].apply(split_formular_layer)","c0c4f0b8":"train_data['formular'].value_counts()","43947451":"def split_formular(formular):\n    dict_formular = {k: int(v) if v else 1 for k,v in\n                     re.findall(r\"([A-Z][a-z]?)(\\d+)?\", formular)}\n    return dict_formular\n\n# Test the function\ntest_formular = train_data.loc[0, 'formular']\nprint(test_formular)\nsplit_formular(test_formular)","5a5209d1":"df_formular = pd.DataFrame(columns = ['C', 'H', 'Br','Cl','I', 'F', 'N', 'O', 'S', 'Si', 'P'])\nlist_formulars = list(train_data['formular'].value_counts().keys())\nfor formular in list_formulars[0:100]:\n    dict_formular = split_formular(formular)\n    temp = pd.DataFrame.from_dict(dict_formular, orient='index').T\n    df_formular = pd.concat([df_formular, temp])\ndf_formular.index=list_formulars[0:100]\ndf_formular.fillna(0, inplace=True)","bf55ddd8":"df_formular.head()","2b8c2cd2":"output = samp_subm\noutput.to_csv('submission.csv', index=False)","fb270405":"output.head()","798fe773":"# Libraries","1cecb20c":"### N-[(1R,2Z)-2-[(3Ar,5S,6aR)-5-[(4R)-2,2-dimethyl-1,3-dioxolan-4-yl]-2,2-dimethyl-3a,6a-dihydrofuro[2,3-d][1,3]dioxol-6-ylidene]-1-deuterioethyl]-2,2,2-trichloroacetamide\n\nWe focus on example on index 774,948 with 10 layers. For more informations look [here](https:\/\/pubchem.ncbi.nlm.nih.gov\/compound\/134870524).","094a6530":"In total there are 329,768 different formulars.\n\nThe next step is to split the formular into the atoms by there symbol and number of atomes.","ddc84681":"This is the topology of the example: <br>\n1) Main Layer<br>\n* Formular C<sub>13<\/sub>H<sub>20<\/sub>OS\n* Atom connections: c1-9(2)8-15-13-6-5-10(3)7-12(13)11(4)14\n* Hydrogen atoms: h5-7,9,11,14H,8H2,1-4H3","2778a62d":"# Data Generator\nWe define a data generator to load the image data on demand.\n\n*Comming Soon*","c05e43af":"There are a lot of duplicates:","96b3d7ab":"This is the topology of the example: <br>\n1) Main Layer<br>\n* Formular C<sub>17<\/sub>H<sub>10<\/sub>BrN<sub>3O<\/sub>\n* Atom connections: c18-14-7-3-1-5-11(14)9-12(10-19)16-20-15-8-4-2-6-13(15)17(22)21-16\n* Hydrogen atoms: h1-9,13H\n\n3) Stereochemical layer\n   \n* double bonds and cumulenes: b12-9+","1829a095":"# Exploratory Data Analysis","6df4555b":"This is the topology of the example: <br>\n1) Main Layer<br>\n* Formular C<sub>16<\/sub>H<sub>22<\/sub>Cl<sub>3<\/sub>NO<sub>6<\/sub>\n* Atom connections: c1-14(2)22-7-9(24-14)10-8(5-6-20-13(21)16(17,18)19)11-12(23-10)26-15(3,4)25-11\n* Hydrogen atoms: h5,9-12H,6-7H2,1-4H3,(H,20,21)\n\n3) Stereochemical layer\n   \n* double bonds and cumulenes: b8-5-\n* tetrahedral stereochemistry of atoms and allenes 1: t9-,10+,11-,12-\n* tetrahedral stereochemistry of atoms and allenes 1: m1\n* type of stereochemistry information: s1\n\n4) Isotopic layer\n\n* #1: i6D\n* #2: t6-,9+,10-,11+,12+\n* #3: m0","6299a72c":"# Intro\nWelcome to the [Bristol-Myers Squibb \u2013 Molecular Translation](https:\/\/www.kaggle.com\/c\/bms-molecular-translation\/overview) Competition:\n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/22422\/logos\/header.png)\n\nFor informations about the International Chemical Identifier we recommend this [link](https:\/\/en.wikipedia.org\/wiki\/International_Chemical_Identifier).\n\n<span style=\"color: royalblue;\">Please vote the notebook up if it helps you. Feel free to leave a comment above the notebook. Thank you. <\/span>","c48ef037":"### (E)-3-(2-Bromophenyl)-2-(4-oxo-4aH-quinazolin-2-yl)prop-2-enenitrile\nWe focus on example on index 6. For more informations look [here](https:\/\/pubchem.ncbi.nlm.nih.gov\/compound\/133560351).","28ed2554":"## Labels\nWe count the lenght of the labels. Every label starts with the string InChI=, so we subtract 6 of the whole label lenght:","a054655a":"# Export","09631779":"### 1-[5-methyl-2-(2-methylpropylsulfanyl)phenyl]ethanol\nWe focus on the first train data sample. For more informations look [here](https:\/\/pubchem.ncbi.nlm.nih.gov\/compound\/82265033).","d252a1f0":"To be continued ...","31664a6f":"## Focus On Examples\nFor molecular informations we recommend the [page](https:\/\/pubchem.ncbi.nlm.nih.gov\/). Next we consider 3 examples with different number of layers.","fb56d64b":"# Load Data","1008983b":"## Images\nWe plot some images and a part of the InChi string as title:","66a47722":"# Path","a5a3081a":"# Main Layer - Formular\nThe formular layer must occure in every InChI. To focus on the formular we extract the first layer.","d186ef7c":"# Functions\nWe define some helper functions for visualizations.","cc1698de":"The labels consists of layers and sublaysers which are aseparated by the delimiter \"\/\" and start with a characteristic prefix letter.\n\nThe six layers with important sublayers are:\n\n1) Main layer\n\n* Chemical formula (no prefix). This is the only sublayer that must occur in every InChI.\n* Atom connections (prefix: \"c\"). The atoms in the chemical formula (except for hydrogens) are numbered in sequence; this sublayer describes which atoms are connected by bonds to which other ones.\n* Hydrogen atoms (prefix: \"h\"). Describes how many hydrogen atoms are connected to each of the other atoms.\n\n2) Charge layer\n   \n* charge sublayer (prefix: \"q\")\n* proton sublayer (prefix: \"p\" for \"protons\")\n\n3) Stereochemical layer\n   \n* double bonds and cumulenes (prefix: \"b\")\n* tetrahedral stereochemistry of atoms and allenes (prefixes: \"t\", \"m\")\n* type of stereochemistry information (prefix: \"s\")\n4) Isotopic layer (prefixes: \"i\", \"h\", as well as \"b\", \"t\", \"m\", \"s\" for isotopic stereochemistry)\n\n5) Fixed-H layer (prefix: \"f\"); contains some or all of the above types of layers except atom connections; may end with \"o\" sublayer; never included in standard InChI\n\n6) Reconnected layer (prefix: \"r\"); contains the whole InChI of a structure with reconnected metal atoms; never included in standard InChI","e8ba7cae":"# Overview"}}