{"cell_type":{"3581eb7f":"code","097698e4":"code","5a88b1fa":"code","baa9b153":"code","949e9777":"code","6b46bdb2":"code","0ca71315":"code","c8b49517":"code","c8d09fbd":"code","487c6dc8":"code","fc5cc4b1":"code","0098dc59":"code","4089076c":"markdown","2c1b818a":"markdown","0db1e61e":"markdown","642da237":"markdown","3d46e2fb":"markdown","d659db68":"markdown","e12b5109":"markdown","6338b0f4":"markdown","dd66f37d":"markdown","a682eacb":"markdown","e18ed545":"markdown","52300871":"markdown","859c8fc5":"markdown"},"source":{"3581eb7f":"from learntools.core import binder\nbinder.bind(globals())\nfrom learntools.data_cleaning.ex2 import *\nprint(\"Setup Complete\")","097698e4":"# modules we'll use\nimport pandas as pd\nimport numpy as np\n\n# for Box-Cox Transformation\nfrom scipy import stats\n\n# for min_max scaling\nfrom mlxtend.preprocessing import minmax_scaling\n\n# plotting modules\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# read in all our data\nkickstarters_2017 = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\")\n\n# set seed for reproducibility\nnp.random.seed(0)","5a88b1fa":"# select the usd_goal_real column\noriginal_data = pd.DataFrame(kickstarters_2017.usd_goal_real)\n\n# scale the goals from 0 to 1\nscaled_data = minmax_scaling(original_data, columns=['usd_goal_real'])\n\n# plot the original & scaled data together to compare\nfig, ax=plt.subplots(1,2,figsize=(15,3))\nsns.distplot(kickstarters_2017.usd_goal_real, ax=ax[0])\nax[0].set_title(\"Original Data\")\nsns.distplot(scaled_data, ax=ax[1])\nax[1].set_title(\"Scaled data\")","baa9b153":"print('Original data\\nPreview:\\n', original_data.head())\nprint('Minimum value:', float(original_data.min()),\n      '\\nMaximum value:', float(original_data.max()))\nprint('_'*30)\n\nprint('\\nScaled data\\nPreview:\\n', scaled_data.head())\nprint('Minimum value:', float(scaled_data.min()),\n      '\\nMaximum value:', float(scaled_data.max()))","949e9777":"# select the usd_goal_real column\noriginal_goal_data = pd.DataFrame(kickstarters_2017.goal)","6b46bdb2":"# TODO: Your code here\nscaled_goal_data = minmax_scaling(original_goal_data, columns=['goal'])\n\n# Check your answer\nq1.check()","0ca71315":"# Lines below will give you a hint or solution code\n#q1.hint()\n#q1.solution()","c8b49517":"# get the index of all positive pledges (Box-Cox only takes positive values)\nindex_of_positive_pledges = kickstarters_2017.usd_pledged_real > 0\n\n# get only positive pledges (using their indexes)\npositive_pledges = kickstarters_2017.usd_pledged_real.loc[index_of_positive_pledges]\n\n# normalize the pledges (w\/ Box-Cox)\nnormalized_pledges = pd.Series(stats.boxcox(positive_pledges)[0], \n                               name='usd_pledged_real', index=positive_pledges.index)\n\n# plot both together to compare\nfig, ax=plt.subplots(1,2,figsize=(15,3))\nsns.distplot(positive_pledges, ax=ax[0])\nax[0].set_title(\"Original Data\")\nsns.distplot(normalized_pledges, ax=ax[1])\nax[1].set_title(\"Normalized data\")","c8d09fbd":"print('Original data\\nPreview:\\n', positive_pledges.head())\nprint('Minimum value:', float(positive_pledges.min()),\n      '\\nMaximum value:', float(positive_pledges.max()))\nprint('_'*30)\n\nprint('\\nNormalized data\\nPreview:\\n', normalized_pledges.head())\nprint('Minimum value:', float(normalized_pledges.min()),\n      '\\nMaximum value:', float(normalized_pledges.max()))","487c6dc8":"# get the index of all positive pledges (Box-Cox only takes positive values)\nindex_of_positive_pledges = kickstarters_2017.pledged > 0\n# get only positive pledges (using their indexes)\npositive_pledges = kickstarters_2017.pledged.loc[index_of_positive_pledges]\n# normalize the pledges (w\/ Box-Cox)\nnormalized_pledges = pd.Series(stats.boxcox(positive_pledges)[0], \n                               name='usd_pledged_real', \n                               index=positive_pledges.index)\n\n# plot both together to compare\nfig, ax=plt.subplots(1,2,figsize=(15,3))\nsns.distplot(positive_pledges, ax=ax[0])\nax[0].set_title(\"Original Data\")\nsns.distplot(normalized_pledges, ax=ax[1])\nax[1].set_title(\"Normalized data\")","fc5cc4b1":"# Check your answer (Run this code cell to receive credit!)\nq2.check()","0098dc59":"# Line below will give you a hint\n#q2.hint()","4089076c":"After scaling, all values lie between 0 and 1 (you can read this in the horizontal axis of the second plot above, and we verify in the code cell below).","2c1b818a":"# 2) Practice normalization\n\nNow you'll practice normalization. We begin by normalizing the amount of money pledged to each campaign.","0db1e61e":"How does the normalized \"usd_pledged_real\" column look different from when we normalized the \"pledged\" column?  Or, do they look mostly the same?\n\nOnce you have an answer, run the code cell below.","642da237":"In this exercise, you'll apply what you learned in the **Scaling and normalization** tutorial.\n\n# Setup\n\nThe questions below will give you feedback on your work. Run the following cell to set up the feedback system.","3d46e2fb":"# (Optional) More practice\n\nTry finding a new dataset and pretend you're preparing to perform a [regression analysis](https:\/\/www.kaggle.com\/rtatman\/the-5-day-regression-challenge). \n\n[These datasets are a good start!](https:\/\/www.kaggle.com\/rtatman\/datasets-for-regression-analysis)\n\nPick three or four variables and decide if you need to normalize or scale any of them and, if you think you should, practice applying the correct technique.\n\n# Keep going\n\nIn the next lesson, learn how to [**parse dates**](https:\/\/www.kaggle.com\/alexisbcook\/parsing-dates) in a dataset.","d659db68":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/172650) to chat with other Learners.*","e12b5109":"# Get our environment set up\n\nTo practice scaling and normalization, we're going to use a [dataset of Kickstarter campaigns](https:\/\/www.kaggle.com\/kemical\/kickstarter-projects). (Kickstarter is a website where people can ask people to invest in various projects and concept products.)\n\nThe next code cell loads in the libraries and dataset we'll be using. ","6338b0f4":"Use `original_goal_data` to create a new DataFrame `scaled_goal_data` with values scaled between 0 and 1. You must use the `minmax_scaling()` function.","dd66f37d":"Let's start by scaling the goals of each campaign, which is how much money they were asking for.  The plots show a histogram of the values in the \"usd_goal_real\" column, both before and after scaling.  ","a682eacb":"# 1) Practice scaling\n\nWe just scaled the \"usd_goal_real\" column. What about the \"goal\" column?\n\nBegin by running the code cell below to create a DataFrame `original_goal_data` containing the \"goal\" column.","e18ed545":"It's not perfect (it looks like a lot pledges got very few pledges) but it is much closer to a normal distribution!","52300871":"**This notebook is an exercise in the [Data Cleaning](https:\/\/www.kaggle.com\/learn\/data-cleaning) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/alexisbcook\/scaling-and-normalization).**\n\n---\n","859c8fc5":"We used the \"usd_pledged_real\" column. Follow the same process to normalize the \"pledged\" column. "}}