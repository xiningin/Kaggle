{"cell_type":{"051417dd":"code","58ec6431":"code","dc9630f5":"code","326b3bf3":"code","11649ada":"code","4538a1df":"code","d0dae20c":"code","52ef02e0":"code","d7dfcd47":"code","c434c40e":"code","966c8997":"code","11000858":"code","d2fcf1e1":"code","458225da":"code","b6887a56":"code","23d33b8b":"markdown","13ce3ab4":"markdown","e78e6c94":"markdown","e95ad091":"markdown","43d22f91":"markdown","cab5f76a":"markdown","995d473e":"markdown","5ed0e5e2":"markdown","50adc55b":"markdown"},"source":{"051417dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58ec6431":"import tensorflow as tf\nfrom tensorflow import keras as K\nfrom tensorflow.keras.layers import Dense, Flatten, Dropout\nfrom tensorflow.keras.models import Sequential\nimport matplotlib.pyplot as plt","dc9630f5":"train_data = pd.read_csv('\/\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n","326b3bf3":"x_train = train_data.drop('label', axis=1).copy()\ny_train = train_data['label'].copy()\nx_test = test_data.copy()","11649ada":"x_train = x_train\/255.0\nx_test = x_test\/255.0\n","4538a1df":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\nx_train = x_train.values.reshape(-1, 28, 28, 1)\nx_test = x_test.values.reshape(-1, 28, 28, 1)","d0dae20c":"from keras.utils.np_utils import to_categorical # convert to one-hot-encoding\ny_train = to_categorical(y_train, num_classes = 10)","52ef02e0":"from sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val=train_test_split(x_train, y_train, test_size=0.10, random_state=42)","d7dfcd47":"# my CNN architechture is In -> [[Conv2D->relu]*2 -> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(filters=32, kernel_size=(5,5), padding='Same', strides=(1,1), activation='relu', input_shape=(28,28,1)),\n    tf.keras.layers.Conv2D(filters=32, kernel_size=(5,5), padding='Same', strides=(1,1), activation='relu'),\n    tf.keras.layers.MaxPool2D(pool_size=(2,2)),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(filters=64, kernel_size=(3,3), padding='Same', strides=(1,1), activation='relu'),\n    tf.keras.layers.Conv2D(filters=64, kernel_size=(3,3), padding='Same', strides=(2,2), activation='relu'),\n    tf.keras.layers.MaxPool2D(pool_size=(2,2)),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(filters=128, kernel_size=(3,3), padding='Same', strides=(1,1), activation='relu'),\n    tf.keras.layers.Conv2D(filters=128, kernel_size=(3,3), padding='Same', strides=(2,2), activation='relu'),\n    tf.keras.layers.MaxPool2D(pool_size=(2,2)),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(filters=256, kernel_size=(3,3), padding='Same', strides=(1,1), activation='relu'),\n    tf.keras.layers.Conv2D(filters=256, kernel_size=(3,3), padding='Same', strides=(2,2), activation='relu'),\n    tf.keras.layers.MaxPool2D(pool_size=(2,2)),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(1024, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\nmodel.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","c434c40e":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n            featurewise_center=0,\n            samplewise_center=0,\n            featurewise_std_normalization=False,\n            samplewise_std_normalization=False,\n            zca_whitening=False,\n            zoom_range = 0.1,\n            rotation_range=10,\n            width_shift_range=0.1,\n            height_shift_range=0.1,\n            horizontal_flip=False,  \n            vertical_flip=False)\ndatagen.fit(x_train)","966c8997":"class myCallBack(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('acc') >= 1):\n            self.model.stop_training = True\ncallback = myCallBack()","11000858":"history = model.fit(x=x_train, y=y_train, epochs=30, batch_size=64, validation_data=(x_val,y_val), callbacks=callback)","d2fcf1e1":"fig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label='Training Loss')\nax[0].plot(history.history['val_loss'], color='r', label='Validation Loss', axes=ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","458225da":"final = model.predict(x_test)\nfinal = np.argmax(final,axis = 1)\nfinal = pd.Series(final, name=\"Label\")","b6887a56":"submission = pd.concat([pd.Series(range(1,len(x_test)+1),name = \"ImageId\"),final],axis = 1)\n\nsubmission.to_csv(\"CNN_digit_recognizer.csv\", index=False, header = 1)","23d33b8b":"# Split data into train and validation set","13ce3ab4":"# Rehsape","e78e6c94":"# CallBack Class","e95ad091":"# CNN Model","43d22f91":"# **Load Data**","cab5f76a":"# Normalization","995d473e":"# Evaluate The Model","5ed0e5e2":"# Label Encoding","50adc55b":"# Data Augmentation"}}