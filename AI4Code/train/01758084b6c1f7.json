{"cell_type":{"9f7dddae":"code","1c7e4b44":"code","eb930e46":"code","d6400501":"code","8ed40e12":"code","a64e34c7":"code","3663cf69":"code","815ecdba":"code","66ceb13c":"code","cbfd8d11":"code","18f1167b":"code","0144d6f0":"code","1347cf54":"code","d934bd78":"code","c3eab90c":"code","993d1837":"code","6519d9fb":"code","2b3a6fea":"code","493e5b29":"code","44dbc768":"code","07ff6103":"code","d3704f51":"code","23db3a23":"code","b87e3b30":"code","6e55873a":"code","204ddce1":"code","8a370b2f":"code","df67c30a":"code","9eaa8c47":"code","fb394d70":"code","caa9278a":"code","627f2482":"code","b60c595c":"code","89190c94":"code","b01c1583":"code","e1422690":"code","8d2a5713":"code","c0863cf3":"code","95c80267":"markdown","f4326966":"markdown","75963018":"markdown","0a65efc3":"markdown","774f8c80":"markdown","c89b0e93":"markdown","6a4f7003":"markdown","8f870e93":"markdown"},"source":{"9f7dddae":"import pandas as pd","1c7e4b44":"telco = pd.read_csv(r\"..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")","eb930e46":"telco","d6400501":"telco.sample","8ed40e12":"telco.isnull().sum()","a64e34c7":"telco['gender'].value_counts()","3663cf69":"churn = telco.Churn\nchurn.value_counts()","815ecdba":"tenure = telco.tenure\ntenure.idxmax()","66ceb13c":"import seaborn as sns","cbfd8d11":"sns.distplot(tenure)","18f1167b":"sns.distplot(telco.MonthlyCharges)","0144d6f0":"sns.pairplot(telco)","1347cf54":"telco['Churn']","d934bd78":"telco['Churn'] = telco['Churn'].map({'Yes': 1, 'No': 0})","c3eab90c":"telco['Churn']","993d1837":"telco_1 = telco.drop(['customerID', 'TotalCharges'], axis=1)","6519d9fb":"telco_1","2b3a6fea":"telco_0 = pd.get_dummies(telco_1)","493e5b29":"telco_0.columns","44dbc768":"X = telco_0.drop(columns=['Churn'])\ny = telco_0 ['Churn']","07ff6103":"from sklearn.model_selection import train_test_split","d3704f51":"X_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=1)","23db3a23":"from keras.models import Sequential","b87e3b30":"model_krs = Sequential()","6e55873a":"from keras import layers\nfrom keras.layers.core import Dropout","204ddce1":"Input_Shape = X_train.shape[1]","8a370b2f":"Input_Shape","df67c30a":"model_krs.add(layers.Dense(1024, input_shape=(Input_Shape,), activation='relu'))\n##Dropout for not memorize or overfitting the train data\nmodel_krs.add(Dropout(0.2)) ","9eaa8c47":"model_krs.add(layers.Dense(1024, activation='relu'))\nmodel_krs.add(Dropout(0.2)) ","fb394d70":"model_krs.add(layers.Dense(1, activation='sigmoid'))","caa9278a":"model_krs.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","627f2482":"model_krs.summary()","b60c595c":"fit_keras = model_krs.fit(X_train, y_train,\n          epochs=100,\n          verbose=True,\n          validation_data=(X_test, y_test),\n          batch_size=30)","89190c94":"accuracy = model_krs.evaluate(X_train, y_train, verbose=False)\nprint(\"Training Score: {:.4f}\".format(accuracy[0]))\nprint(\"Training Accuracy: {:.4f}\".format(accuracy[1]))","b01c1583":"accuracy = model_krs.evaluate(X_test, y_test, verbose=False)\nprint(\"Testing Score: {:.4f}\".format(accuracy[0]))\nprint(\"Testing Accuracy: {:.4f}\".format(accuracy[1]))","e1422690":"def plot_history(fit_keras):\n    acc = fit_keras.history['accuracy']\n    val_acc = fit_keras.history['val_accuracy']\n    loss = fit_keras.history['loss']\n    val_loss = fit_keras.history['val_loss']\n    x = range(1, len(acc) + 1)\n\n    plt.figure(figsize=(12, 5))\n    plt.subplot(1, 2, 1)\n    plt.plot(x, acc, 'b', label='Training acc')\n    plt.plot(x, val_acc, 'r', label='Testing acc')\n    plt.title('Training and Testing accuracy')\n    plt.legend()\n    plt.subplot(1, 2, 2)\n    plt.plot(x, loss, 'b', label='Training loss')\n    plt.plot(x, val_loss, 'r', label='Testing loss')\n    plt.title('Training and Testing loss')\n    plt.legend()","8d2a5713":"import matplotlib.pyplot as plt","c0863cf3":"plot_history(fit_keras)","95c80267":"### Data sample","f4326966":"### Data intro","75963018":"### DistributionPlot","0a65efc3":"### Data preparation","774f8c80":"### Null of data","c89b0e93":"### Pairplot","6a4f7003":"### Data Manipulation","8f870e93":"### Predictive modeling"}}