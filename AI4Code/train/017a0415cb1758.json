{"cell_type":{"9f85b4b0":"code","90ec9027":"code","deb5406e":"code","66328441":"code","8dd1daca":"code","23d5bf41":"code","56234c6e":"code","63cd5888":"code","860697a8":"code","36ed3e7c":"code","d32cef00":"code","d1964a24":"code","59c0c3ee":"code","12bdc9af":"code","dcc3087d":"code","bf8b9696":"code","7dd863a7":"code","cf8c63fe":"code","1b5de538":"code","dcb34d06":"code","7c03bcfa":"code","60ee67dd":"code","63cdb24c":"code","d10aa69d":"code","e3cd9118":"code","f15d62c9":"code","91fbffbc":"code","f86c0858":"code","535e274e":"code","7cb5785a":"code","9b910483":"code","c91875d8":"code","bf47e5d7":"code","8cc43b20":"code","3389611f":"code","ba7c255e":"code","108c8587":"code","1ed64203":"code","cd025101":"code","c4933847":"code","7be4e9bd":"code","d21c6cbf":"code","7d69e291":"code","ba6cfcc2":"code","a902cae3":"code","ea98ccb4":"code","ed777336":"code","8865fe5b":"code","c85cc978":"code","ca021adc":"code","2b4799ea":"code","25399bbe":"code","9cbebc73":"code","3f7b1cbb":"code","80457513":"code","0d64d46b":"code","06e88471":"code","5ce2563c":"code","79d9015b":"code","44cf3fa9":"code","4c53c2f6":"code","acab511f":"code","47ad27be":"code","4b3a382d":"code","9a6a50d0":"code","3c349f05":"code","45fa36bb":"code","bb07ad48":"code","c26dad6d":"code","95f39748":"code","bcb6fdb7":"code","280335ce":"code","9f8345ee":"code","8a4c7fa0":"code","21f569e1":"code","800d4292":"code","4f7b9685":"code","148c2a8c":"code","54dc63fb":"code","d620de0e":"code","fd638bbe":"code","8d416345":"code","f630dad8":"code","25e80650":"code","631aff0c":"code","deaa1d88":"code","2f4bc24f":"code","82b2def1":"code","2b366d5c":"code","9cd63f97":"code","7cc46b5c":"code","6c2a4808":"code","8f958fc3":"code","ac73257a":"code","8570ce2f":"code","da59117a":"code","09001c2f":"code","2535a4a4":"code","be52b7bd":"code","8a4f86ca":"code","c6d087b5":"code","e60484a8":"code","e196cfdf":"code","cea4aebd":"markdown","556407b4":"markdown","bb248f94":"markdown","eadc9cbe":"markdown","94bf593d":"markdown","73164a84":"markdown","048f1819":"markdown","f0d3dbb2":"markdown","eb9695c2":"markdown","eeaa1f75":"markdown","27ca0c1a":"markdown","161a99a9":"markdown","b4381610":"markdown","9caa733e":"markdown","16716c07":"markdown","274439cc":"markdown","b2c598ae":"markdown","3d3c11fe":"markdown","02229531":"markdown","a9dbbae2":"markdown","c5ca3e76":"markdown","62f1e3ba":"markdown","f5350842":"markdown","110965cc":"markdown","23af1412":"markdown","f2908485":"markdown","7333d4e7":"markdown","585f4505":"markdown","8adb8fc4":"markdown","f6a5e8c0":"markdown","958e2b7e":"markdown","b533bea8":"markdown","4431965c":"markdown","5a11a22d":"markdown","64485616":"markdown","0d7d693a":"markdown"},"source":{"9f85b4b0":"!pip install feature-engine\n!pip install arcticdata=='1.4'","90ec9027":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport arcticdata.ExploratoryDataAnalysis as eda\nimport arcticdata.FeatureEngineering as fe\nimport arcticdata.FeatureSelection as fs\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","deb5406e":"df = pd.read_csv('\/kaggle\/input\/ibm-hr-analytics-attrition-dataset\/WA_Fn-UseC_-HR-Employee-Attrition.csv')\ndf.head()","66328441":"from sklearn.model_selection import StratifiedShuffleSplit\n\nsplit = StratifiedShuffleSplit(n_splits=1,test_size=0.2, random_state=42)\n\nfor train_index,test_index in (split.split(df,df['Attrition'])):\n    train = df.loc[train_index]\n    test = df.loc[test_index]\n\ntrain.head()","8dd1daca":"eda.missing_data(train).head()","23d5bf41":"eda.missing_data(test).head()","56234c6e":"eda.feature_analysis(train,'Age')","63cd5888":"test[\"AgeFreq\"] = fe.discretization(train,test,variables=['Age'])['Age']\ntrain[\"AgeFreq\"] = fe.discretization(train,train,variables=['Age'])['Age']\ntest[\"AgeRange\"] = fe.discretization(train,test,variables=['Age'],method=\"equalrange\")['Age']\ntrain[\"AgeRange\"] = fe.discretization(train,train,variables=['Age'],method=\"equalrange\")['Age']\ntrain.head(3)","860697a8":"eda.feature_analysis(train,'Attrition')","36ed3e7c":"train.Attrition = train.Attrition.apply(lambda x: 1 if x=='Yes' else 0)\ntest.Attrition = test.Attrition.apply(lambda x: 1 if x=='Yes' else 0)\ntrain.head()","d32cef00":"eda.feature_analysis(train,'BusinessTravel')","d1964a24":"def compare_attrition(x):\n    print(train[[x,\"Attrition\"]].groupby([x],as_index=False).mean())\n    fig, ax = plt.subplots(figsize=(12,6))\n    sns.barplot(x=x,y=\"Attrition\",data=train,ax=ax,palette='colorblind')\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"right\"].set_visible(False)\n\ncompare_attrition(\"BusinessTravel\")","59c0c3ee":"eda.feature_analysis(train,'DailyRate')","12bdc9af":"test[\"DailyRateFreq\"] = fe.discretization(train,test,variables=['DailyRate'])['DailyRate']\ntrain[\"DailyRateFreq\"] = fe.discretization(train,train,variables=['DailyRate'])['DailyRate']\ntest[\"DailyRateRange\"] = fe.discretization(train,test,variables=['DailyRate'],method=\"equalrange\")['DailyRate']\ntrain[\"DailyRateRange\"] = fe.discretization(train,train,variables=['DailyRate'],method=\"equalrange\")['DailyRate']\ntrain.head(3)","dcc3087d":"eda.feature_analysis(train,'Department')","bf8b9696":"compare_attrition(\"Department\")","7dd863a7":"eda.feature_analysis(train,'DistanceFromHome')","cf8c63fe":"compare_attrition(\"DistanceFromHome\")","1b5de538":"test[\"DistanceFromHomeFreq\"] = fe.discretization(train,test,variables=['DistanceFromHome'])['DistanceFromHome']\ntrain[\"DistanceFromHomeFreq\"] = fe.discretization(train,train,variables=['DistanceFromHome'])['DistanceFromHome']\ntest[\"DistanceFromHomeRange\"] = fe.discretization(train,test,variables=['DistanceFromHome'],method=\"equalrange\")['DistanceFromHome']\ntrain[\"DistanceFromHomeRange\"] = fe.discretization(train,train,variables=['DistanceFromHome'],method=\"equalrange\")['DistanceFromHome']\ntrain.head(3)","dcb34d06":"eda.feature_analysis(train,'Education')","7c03bcfa":"compare_attrition('Education')","60ee67dd":"test[\"EducationFreq\"] = fe.discretization(train,test,variables=['Education'])['Education']\ntrain[\"EducationFreq\"] = fe.discretization(train,train,variables=['Education'])['Education']\ntest[\"EducationRange\"] = fe.discretization(train,test,variables=['Education'],method=\"equalrange\")['Education']\ntrain[\"EducationRange\"] = fe.discretization(train,train,variables=['Education'],method=\"equalrange\")['Education']\ntrain.head(3)","63cdb24c":"eda.feature_analysis(train,'EducationField')","d10aa69d":"compare_attrition('EducationField')","e3cd9118":"eda.feature_analysis(train,'EmployeeCount')","f15d62c9":"train.drop('EmployeeCount',axis=1,inplace=True)\ntest.drop('EmployeeCount',axis=1,inplace=True)\ntrain.head()","91fbffbc":"eda.feature_analysis(train,'EmployeeNumber')","f86c0858":"train.drop('EmployeeNumber',axis=1,inplace=True)\ntest.drop('EmployeeNumber',axis=1,inplace=True)\ntrain.head()","535e274e":"eda.feature_analysis(train,'EnvironmentSatisfaction')","7cb5785a":"compare_attrition('EnvironmentSatisfaction')","9b910483":"eda.feature_analysis(train,'Gender')","c91875d8":"compare_attrition('Gender')","bf47e5d7":"eda.feature_analysis(train,'HourlyRate')","8cc43b20":"test[\"HourlyRateFreq\"] = fe.discretization(train,test,variables=['HourlyRate'])['HourlyRate']\ntrain[\"HourlyRateFreq\"] = fe.discretization(train,train,variables=['HourlyRate'])['HourlyRate']\ntest[\"HourlyRateRange\"] = fe.discretization(train,test,variables=['HourlyRate'],method=\"equalrange\")['HourlyRate']\ntrain[\"HourlyRateRange\"] = fe.discretization(train,train,variables=['HourlyRate'],method=\"equalrange\")['HourlyRate']\ntrain.head(3)","3389611f":"eda.feature_analysis(train,'JobInvolvement')","ba7c255e":"compare_attrition('JobInvolvement')","108c8587":"eda.feature_analysis(train,'JobLevel')","1ed64203":"compare_attrition('JobLevel')","cd025101":"eda.feature_analysis(train,'JobRole')","c4933847":"def compare_attrition_big(x):\n    print(train[[x,\"Attrition\"]].groupby([x],as_index=False).mean())\n    fig, ax = plt.subplots(figsize=(19,7))\n    sns.barplot(x=x,y=\"Attrition\",data=train,ax=ax,palette='colorblind')\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"right\"].set_visible(False)\n\ncompare_attrition_big('JobRole')","7be4e9bd":"eda.feature_analysis(train,'JobSatisfaction')","d21c6cbf":"compare_attrition('JobSatisfaction')","7d69e291":"eda.feature_analysis(train,'MaritalStatus')","ba6cfcc2":"compare_attrition('MaritalStatus')","a902cae3":"eda.feature_analysis(train,'MonthlyIncome')","ea98ccb4":"test[\"MonthlyIncomeFreq\"] = fe.discretization(train,test,variables=['MonthlyIncome'])['MonthlyIncome']\ntrain[\"MonthlyIncomeFreq\"] = fe.discretization(train,train,variables=['MonthlyIncome'])['MonthlyIncome']\ntest[\"MonthlyIncomeRange\"] = fe.discretization(train,test,variables=['MonthlyIncome'],method=\"equalrange\")['MonthlyIncome']\ntrain[\"MonthlyIncomeRange\"] = fe.discretization(train,train,variables=['MonthlyIncome'],method=\"equalrange\")['MonthlyIncome']\ntrain.head(3)","ed777336":"eda.feature_analysis(train,'MonthlyRate')","8865fe5b":"test[\"MonthlyRateFreq\"] = fe.discretization(train,test,variables=['MonthlyRate'])['MonthlyRate']\ntrain[\"MonthlyRateFreq\"] = fe.discretization(train,train,variables=['MonthlyRate'])['MonthlyRate']\ntest[\"MonthlyRateRange\"] = fe.discretization(train,test,variables=['MonthlyRate'],method=\"equalrange\")['MonthlyRate']\ntrain[\"MonthlyRateRange\"] = fe.discretization(train,train,variables=['MonthlyRate'],method=\"equalrange\")['MonthlyRate']\ntrain.head(3)","c85cc978":"eda.feature_analysis(train,'NumCompaniesWorked')","ca021adc":"compare_attrition('NumCompaniesWorked')","2b4799ea":"eda.feature_analysis(train,'Over18')","25399bbe":"train.drop('Over18',axis=1,inplace=True)\ntest.drop('Over18',axis=1,inplace=True)\ntrain.head()","9cbebc73":"eda.feature_analysis(train,'OverTime')","3f7b1cbb":"train.OverTime = train.OverTime.apply(lambda x: 1 if x=='Yes' else 0)\ntest.OverTime = test.OverTime.apply(lambda x: 1 if x=='Yes' else 0)\ntrain.head()","80457513":"eda.feature_analysis(train,'PercentSalaryHike')","0d64d46b":"compare_attrition('PercentSalaryHike')","06e88471":"test[\"PercentSalaryHikeFreq\"] = fe.discretization(train,test,variables=['PercentSalaryHike'])['PercentSalaryHike']\ntrain[\"PercentSalaryHikeFreq\"] = fe.discretization(train,train,variables=['PercentSalaryHike'])['PercentSalaryHike']\ntest[\"PercentSalaryHikeRange\"] = fe.discretization(train,test,variables=['PercentSalaryHike'],method=\"equalrange\")['PercentSalaryHike']\ntrain[\"PercentSalaryHikeRange\"] = fe.discretization(train,train,variables=['PercentSalaryHike'],method=\"equalrange\")['PercentSalaryHike']\ntrain.head(3)","5ce2563c":"eda.feature_analysis(train,'PerformanceRating')","79d9015b":"compare_attrition('PerformanceRating')","44cf3fa9":"eda.feature_analysis(train,'RelationshipSatisfaction')","4c53c2f6":"compare_attrition('RelationshipSatisfaction')","acab511f":"eda.feature_analysis(train,'StandardHours')","47ad27be":"train.drop('StandardHours',axis=1,inplace=True)\ntest.drop('StandardHours',axis=1,inplace=True)\ntrain.head()","4b3a382d":"eda.feature_analysis(train,'StockOptionLevel')","9a6a50d0":"compare_attrition('StockOptionLevel')","3c349f05":"eda.feature_analysis(train,'TotalWorkingYears')","45fa36bb":"test[\"TotalWorkingYearsFreq\"] = fe.discretization(train,test,variables=['TotalWorkingYears'])['TotalWorkingYears']\ntrain[\"TotalWorkingYearsFreq\"] = fe.discretization(train,train,variables=['TotalWorkingYears'])['TotalWorkingYears']\ntest[\"TotalWorkingYearsRange\"] = fe.discretization(train,test,variables=['TotalWorkingYears'],method=\"equalrange\")['TotalWorkingYears']\ntrain[\"TotalWorkingYearsRange\"] = fe.discretization(train,train,variables=['TotalWorkingYears'],method=\"equalrange\")['TotalWorkingYears']\ntrain.head(3)","bb07ad48":"eda.feature_analysis(train,'TrainingTimesLastYear')","c26dad6d":"compare_attrition('TrainingTimesLastYear')","95f39748":"eda.feature_analysis(train,'WorkLifeBalance')","bcb6fdb7":"compare_attrition('WorkLifeBalance')","280335ce":"eda.feature_analysis(train,'YearsAtCompany')","9f8345ee":"test[\"YearsAtCompanyFreq\"] = fe.discretization(train,test,variables=['YearsAtCompany'])['YearsAtCompany']\ntrain[\"YearsAtCompanyFreq\"] = fe.discretization(train,train,variables=['YearsAtCompany'])['YearsAtCompany']\ntest[\"YearsAtCompanyRange\"] = fe.discretization(train,test,variables=['YearsAtCompany'],method=\"equalrange\")['YearsAtCompany']\ntrain[\"YearsAtCompanyRange\"] = fe.discretization(train,train,variables=['YearsAtCompany'],method=\"equalrange\")['YearsAtCompany']\ntrain.head(3)","8a4c7fa0":"eda.feature_analysis(train,'YearsInCurrentRole')","21f569e1":"compare_attrition('YearsInCurrentRole')","800d4292":"eda.feature_analysis(train,'YearsSinceLastPromotion')","4f7b9685":"compare_attrition('YearsSinceLastPromotion')","148c2a8c":"eda.feature_analysis(train,'YearsWithCurrManager')","54dc63fb":"compare_attrition('YearsWithCurrManager')","d620de0e":"test = fe.encoding(train,test,drop_last=False)\ntrain = fe.encoding(train,train,drop_last=False)\ntrain.head()","fd638bbe":"X_train = train.drop('Attrition',axis=1)\ny_train = train.Attrition\nX_test = test.drop('Attrition',axis=1)\ny_test = test.Attrition\n\nX_train.shape,y_train.shape,X_test.shape,y_test.shape","8d416345":"X_train = fe.scale(X_train)\nX_test = fe.scale(X_test)\nX_train.head()","f630dad8":"def confusion_plot():\n    print(classification_report(y_test,predicted))\n    matrix = confusion_matrix(y_test, predicted)\n    sns.heatmap(matrix, annot=True, fmt=\"d\", cmap='Blues', square=True)\n    plt.xlabel(\"predicted\")\n    plt.ylabel(\"actual\")\n    plt.show()","25e80650":"import pickle\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.model_selection import cross_val_score, cross_val_predict\n\ngnb = GaussianNB()\ngnb.fit(X_train, y_train)\n\nwith open('Naive Bayes.pickle', mode='wb') as fp:\n    pickle.dump(gnb, fp)\n    \nprint(f'score: {cross_val_score(gnb,X_train,y_train,cv=10).mean()}\\n\\n')\n\npredicted=gnb.predict(X_test)\n\nconfusion_plot()","631aff0c":"from sklearn.linear_model import LogisticRegression\nlogistic_regression = LogisticRegression(random_state=0)\nlogistic_regression.fit(X_train, y_train)\n\nwith open('Logistic Regression.pickle', mode='wb') as fp:\n    pickle.dump(logistic_regression, fp)\n\nprint(f'score: {cross_val_score(logistic_regression,X_train,y_train,cv=10).mean()}\\n\\n')\n\npredicted=logistic_regression.predict(X_test)\n\nconfusion_plot()","deaa1d88":"from sklearn.svm import SVC\nsvm = SVC(kernel='linear', C=1.0, random_state=0)\nsvm.fit(X_train, y_train)\n\nwith open('Support Vector Machine.pickle', mode='wb') as fp:\n    pickle.dump(svm, fp)\n    \nprint(f'NB score: {cross_val_score(svm,X_train,y_train,cv=10).mean()}\\n\\n')\n\nsvm2 = SVC(kernel='rbf', C=1.0, random_state=0)\nsvm2.fit(X_train, y_train)\n\nprint(f'score: {cross_val_score(svm2,X_train,y_train,cv=10).mean()}\\n\\n')\n\npredicted=svm.predict(X_test)\n\nconfusion_plot()","2f4bc24f":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5, p=2, metric='minkowski')\nknn.fit(X_train, y_train)\n\nwith open('Nearest Neighbors.pickle', mode='wb') as fp:\n    pickle.dump(knn, fp)\n    \nprint(f'score: {cross_val_score(knn,X_train,y_train,cv=10).mean()}\\n\\n')\n\npredicted=knn.predict(X_test)\n\nconfusion_plot()","82b2def1":"from sklearn.tree import DecisionTreeClassifier\ndecision_tree = DecisionTreeClassifier(criterion='entropy',random_state=0)\ndecision_tree.fit(X_train, y_train)\n\nwith open('Decision Tree.pickle', mode='wb') as fp:\n    pickle.dump(decision_tree, fp)\n    \nprint(f'score: {cross_val_score(decision_tree,X_train,y_train,cv=10).mean()}\\n\\n')\n\npredicted=decision_tree.predict(X_test)\n\nconfusion_plot()","2b366d5c":"from sklearn.ensemble import RandomForestClassifier\n\nrandom_forest = RandomForestClassifier(random_state=0)\nrandom_forest.fit(X_train, y_train)\n\nwith open('Random Forest.pickle', mode='wb') as fp:\n    pickle.dump(random_forest, fp)\n    \nprint(f'score: {cross_val_score(random_forest,X_train,y_train,cv=10).mean()}\\n\\n')\n\npredicted=random_forest.predict(X_test)\n\n\nconfusion_plot()","9cd63f97":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb = GradientBoostingClassifier()\ngb.fit(X_train, y_train)\n\nwith open('Gradient Boosting.pickle', mode='wb') as fp:\n    pickle.dump(gb, fp)\n    \nprint(f'score: {cross_val_score(gb,X_train,y_train,cv=10).mean()}\\n\\n')\n\npredicted=gb.predict(X_test)\n\n\nconfusion_plot()","7cc46b5c":"names = [\"Support Vector Machine\", \"Logistic Regression\", \"Nearest Neighbors\",\n         \"Decision Tree\",\"Random Forest\", \"Naive Bayes\",\"Gradient Boosting\"]\nresult = []\n\nprint(\"For guessing the Survived feature we used the following models:\")\nprint()\n\nfor name in names:\n    with open(name + '.pickle', 'rb') as fp:\n        clf = pickle.load(fp)    \n    clf.fit(X_train, y_train)\n    score1 = cross_val_score(clf,X_train,y_train,cv=10).mean()\n    score2 = cross_val_score(clf,X_test,y_test,cv=10).mean()\n    result.append([score1, score2])\n    \n    print(name)\n\ndf_result = pd.DataFrame(result, columns=['Train', 'Test'], index = names)\ndf_result.sort_values(\"Test\",ascending=False)","6c2a4808":"logpredtrain = LogisticRegression().fit(X_train,y_train).predict(X_train)\nlogpredtest = LogisticRegression().fit(X_train,y_train).predict(X_test)\n\nknnpredtrain = KNeighborsClassifier(n_neighbors=5, p=2, metric='minkowski').fit(X_train,y_train).predict(X_train)\nknnpredtest = KNeighborsClassifier(n_neighbors=5, p=2, metric='minkowski').fit(X_train,y_train).predict(X_test)\n\nsvmpredtrain = SVC(kernel='linear', C=1.0, random_state=0).fit(X_train,y_train).predict(X_train)\nsvmpredtest = SVC(kernel='linear', C=1.0, random_state=0).fit(X_train,y_train).predict(X_test)\n\nrfpredtrain = RandomForestClassifier(random_state=0).fit(X_train,y_train).predict(X_train)\nrfpredtest = RandomForestClassifier(random_state=0).fit(X_train,y_train).predict(X_test)","8f958fc3":"totrain = np.column_stack((X_train,logpredtrain,knnpredtrain,svmpredtrain,rfpredtrain))\ntotest = np.column_stack((X_test,logpredtest,knnpredtest,svmpredtest,rfpredtest))","ac73257a":"gb = GradientBoostingClassifier()\ngb.fit(totrain, y_train)\n\npredicted=gb.predict(totest)\n\nconfusion_plot()","8570ce2f":"trainANN = X_train.copy()\ntrainANN['Attrition'] = y_train\n\ntestANN = X_test.copy()\ntrainANN.head()","da59117a":"import tensorflow as tf\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(units=500,activation='relu',input_shape=(70,)))\nmodel.add(tf.keras.layers.Dense(units=500,activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=500,activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=500,activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=1,activation='sigmoid'))","09001c2f":"model.summary()","2535a4a4":"model.compile(optimizer='Adam',loss='binary_crossentropy',metrics=['accuracy'])\n\nepoch_hist = model.fit(X_train,y_train,epochs=100,batch_size=50)","be52b7bd":"predicted = model.predict(X_test)\npd.DataFrame(predicted).head()","8a4f86ca":"pred_bool = (predicted>0.5)\npd.DataFrame(pred_bool).head()","c6d087b5":"plt.plot(epoch_hist.history['loss'])\nplt.title('Loss function')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(['Training loss'])\nplt.show()","e60484a8":"plt.plot(epoch_hist.history['accuracy'])\nplt.title('Accuracy function')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(['Training accuracy'])\nplt.show()","e196cfdf":"print(classification_report(y_test,pred_bool))\nmatrix = confusion_matrix(y_test, pred_bool)\nsns.heatmap(matrix, annot=True, fmt=\"d\", cmap='Blues', square=True)\nplt.xlabel(\"predicted\")\nplt.ylabel(\"actual\")\nplt.show()","cea4aebd":"<br><br><br>\n# -Over18","556407b4":"<br><br><br>\n# -EmployeeNumber","bb248f94":"<br><br><br>\n# -EnvironmentSatisfaction","eadc9cbe":"<br><br><br>\n# -YearsInCurrentRole","94bf593d":"<br><br><br>\n# -PerformanceRating","73164a84":"<br><br><br>\n# MODELS","048f1819":"<br><br><br>\n# -Department","f0d3dbb2":"<br><br><br>\n# -PercentSalaryHike","eb9695c2":"<br><br><br>\n# -YearsAtCompany","eeaa1f75":"<br><br><br>\n# -TrainingTimesLastYear","27ca0c1a":"<br><br><br>\n# -Age","161a99a9":"<br><br><br>\n# -NumCompaniesWorked","b4381610":"<br><br><br>\n# -EducationField","9caa733e":"<br><br><br>\n# -MonthlyRate","16716c07":"<br><br><br>\n# -JobRole","274439cc":"<br><br><br>\n# -JobInvolvement","b2c598ae":"<br><br><br>\n# -Education","3d3c11fe":"<br><br><br>\n# -BusinessTravel","02229531":"<br><br><br>\n# -YearsSinceLastPromotion","a9dbbae2":"<br><br><br>\n# -TotalWorkingYears","c5ca3e76":"<br><br><br>\n# -StockOptionLevel","62f1e3ba":"<br><br><br>\n# -JobLevel","f5350842":"<br><br><br>\n# -MonthlyIncome","110965cc":"<br><br><br>\n# -WorkLifeBalance","23af1412":"<br><br><br>\n# -MaritalStatus","f2908485":"<br><br><br>\n# -StandardHours","7333d4e7":"<br><br><br>\n# -DailyRate","585f4505":"<br><br><br>\n# -OverTime","8adb8fc4":"<br><br><br>\n# -JobSatisfaction","f6a5e8c0":"<br><br><br>\n# -HourlyRate","958e2b7e":"<br><br><br>\n# -RelationshipSatisfaction","b533bea8":"<br><br><br>\n# -YearsWithCurrManager","4431965c":"<br><br><br>\n# -EmployeeCount","5a11a22d":"<br><br><br>\n# -DistanceFromHome","64485616":"<br><br><br>\n# -Attrition","0d7d693a":"<br><br><br>\n# -Gender"}}