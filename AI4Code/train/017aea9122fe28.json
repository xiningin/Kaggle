{"cell_type":{"92b78dec":"code","eef5a285":"code","218ec980":"code","b00697c6":"code","c0d5c0f1":"code","a29bced7":"code","314dc33b":"code","d67bb256":"code","6a1235ba":"code","b95b0c92":"code","f3e88b59":"code","7f656f91":"code","f6e9d579":"code","5c9e7ee2":"code","aab18b42":"code","14c1fa24":"code","e9f33fc1":"code","ed8a4ead":"code","2e5548f7":"code","fee00139":"code","896d7556":"code","2bef89bd":"code","41a6c6bb":"code","28f7b26b":"code","3629bd01":"markdown"},"source":{"92b78dec":"#importing python modules\/libraries\nimport pandas as panda\nimport numpy as nump\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split","eef5a285":"dataset=panda.read_csv(\"..\/input\/who_suicide_statistics.csv\")\ndataset.head(10)","218ec980":"#finding total number of null values in attributes of dataset\nprint(dataset.isnull().sum())","b00697c6":"print(dataset.count())","c0d5c0f1":"\n#removing null value rows from dataset and again checking number of null rows in dataset\ndataset.dropna(inplace=True)\nprint(dataset.isnull().sum())","a29bced7":"print(dataset.head(10))\nprint(dataset.count())","314dc33b":"#printing information of dataset\ndataset.info()","d67bb256":"#checking Age ranges\nprint(dataset.age.unique())","6a1235ba":"dataset.describe()","b95b0c92":"#checking country names\nprint(dataset['country'].unique())\nprint(\"Total Countries: \",len(dataset['country'].unique()))","f3e88b59":"#total number of population of world and suicides per year\nprint(dataset.groupby(['year']).sum())","7f656f91":"#male vs female suicide comparison\nprint(dataset.groupby('sex')['suicides_no'].sum())\ndataset.groupby('sex')['suicides_no'].sum().plot.bar(figsize=(10,5),title = \"Male\/Female\")","f6e9d579":"#Age wise Comparison\nprint(dataset.groupby('age')['suicides_no'].sum())\ndataset.groupby('age')['suicides_no'].sum().sort_index().plot.bar(figsize=(15,5),title = \"Agewise comparison\")","5c9e7ee2":"dataset[['country','suicides_no']].groupby(['country']).sum().plot(kind='bar',figsize=(50,10),label=\"Total Suicies Per country in following Year\")","aab18b42":"#checking top 5 countries highest suicide rate.\nc_suicides=dataset[['country','suicides_no']].groupby(['country']).sum()\nc_suicides = c_suicides.reset_index().sort_values(by='suicides_no', ascending=False)\ntop_5 = c_suicides[:5]\ntop_5.plot(kind='bar',figsize=(15,5),title=\"Top 5 countries with highest Suicide Rate\",x='country',y='suicides_no')","14c1fa24":"#Checking total number of suicides per year\ndataset[['year','suicides_no']].groupby(['year']).sum().plot(kind='bar',figsize=(15,7),title=\"Suicide Rate\")","e9f33fc1":"#Preprocessing, Converting AGE Groups into integer values and Gender ~ Female=0,Male=1 for model testing and predictions\nmydata=dataset\nmydata=mydata.drop(['country'],axis=1)#removed country column from 'mydata'\n#replacing age groups with integer values\nmydata['age']=mydata['age'].replace('5-14 years',0)\nmydata['age']=mydata['age'].replace('15-24 years',1)\nmydata['age']=mydata['age'].replace('25-34 years',2)\nmydata['age']=mydata['age'].replace('35-54 years',3)\nmydata['age']=mydata['age'].replace('55-74 years',4)\nmydata['age']=mydata['age'].replace('75+ years',5)\nmydata['sex']=mydata['sex'].replace('female',0)\nmydata['sex']=mydata['sex'].replace('male',1)\n\n#adding two more columns for model training and testing\n\nmydata['suicides\/100k_population']=(mydata.suicides_no\/mydata.population)\/100000\nmydata['fatality_rate']=nump.where(mydata['suicides\/100k_population']>mydata['suicides\/100k_population'].mean(),0,1)\n\n\n\n","ed8a4ead":"#Dividing dataset into training and testing sets\nX = nump.array(mydata.drop(['fatality_rate', 'suicides\/100k_population'], 1))\ny=nump.array(mydata.fatality_rate)\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=42)\n\nfrom sklearn import utils\nfrom sklearn import preprocessing\nfrom sklearn import metrics\n#Encoing labels for continous and multi class output\nlabel_enc=preprocessing.LabelEncoder()\ntrs=label_enc.fit_transform(y_train)\n\n\nprint(\"Shape of x_train: \",X_train.shape)\nprint(\"Shape of y_train: \",y_train.shape)\nprint(\"Shape of x_test: \",X_test.shape)\nprint(\"Shape of y_test: \",y_test.shape)\n\n","2e5548f7":"from sklearn.linear_model import LogisticRegression\nlogreg=LogisticRegression()\nlogreg.fit(X_train,y_train)\nprint('Logistic Regression : {:.3f}'.format(accuracy_score(y_test,logreg.predict(X_test))))","fee00139":"#Checking DecisionTreeClassifier Model and its accuracy\nfrom sklearn.tree import DecisionTreeClassifier\nmodel=DecisionTreeClassifier()\nmodel.fit(X_train,trs)\nmodel.predict(X_test)\n\nprint('Decision Tree ',accuracy_score(y_test,model.predict(X_test)))","896d7556":"#checking RandomForestClassifier Model and accuracy\nfrom sklearn.ensemble import RandomForestClassifier\nmod=RandomForestClassifier(n_estimators=100,random_state=42)\nmod.fit(X_train,trs)\nmod.predict(X_test)\nprint(\"Random Forest accuracy is: \",accuracy_score(y_test,mod.predict(X_test)))","2bef89bd":"from sklearn.metrics import classification_report\nprint(classification_report(logreg.predict(X_test),y_test))","41a6c6bb":"#classification report DecisionTreeClassifier\n\nprint(classification_report(mod.predict(X_test),y_test))","28f7b26b":"#classification report RandomForest\n\nprint(classification_report(model.predict(X_test),y_test))","3629bd01":"Importing Dataset .csv file"}}