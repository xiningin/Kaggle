{"cell_type":{"c5566f47":"code","2fb43a89":"code","b5c7ab63":"code","0fc61340":"code","ef0f81c0":"code","0fda5a51":"code","179f5a2b":"code","8d2246ac":"code","000ca009":"code","db640062":"code","7334e9e8":"code","192deb3d":"markdown"},"source":{"c5566f47":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2fb43a89":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport os, numpy as np, pandas as pd, matplotlib.pyplot as plt\n\nfrom PIL import Image\n\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import InceptionResNetV2\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense\nfrom tensorflow.keras.models import Model","b5c7ab63":"os.chdir('\/kaggle\/input\/asl-alphabet\/')\nos.listdir()","0fc61340":"# Training and test paths\ntrain_path = '.\/asl_alphabet_train\/asl_alphabet_train\/'\ntest_path = '.\/asl_alphabet_test\/asl_alphabet_test\/'","ef0f81c0":"# Class imbalance identification\nclasses = os.listdir(train_path)\nnos = []\nfor i in classes:\n    nos.append(len(os.listdir(train_path+i)))\n    \nplt.bar(classes, nos)\nplt.show()","0fda5a51":"# Visualizations\nplt.figure(figsize=(20,38))\nfor i in enumerate(classes):\n    image = os.listdir(train_path+i[1])[0]\n    image = Image.open(train_path+i[1]+'\/'+image)\n    image = np.asarray(image)\n    plt.subplot(10,3,i[0]+1)\n    plt.imshow(image)\n    plt.title('{0}\/ Shape = {1}'.format(i[1], image.shape))\nplt.show()","179f5a2b":"# Creating train and validation sets\n\ndatagen = ImageDataGenerator(rescale=1\/255, validation_split=0.3)\n\ntrain = datagen.flow_from_directory(train_path, subset='training')\nval = datagen.flow_from_directory(train_path, subset='validation')","8d2246ac":"# Defining the model\n\ndef get_model():\n    base_model = InceptionResNetV2(include_top=False, input_shape=(200,200,3))\n    \n    for layer in base_model.layers[:150]:\n        layer.trainable = False\n    for layer in base_model.layers[150:]:\n        layer.trainable = True\n    \n    x = base_model.output\n    x = GlobalAveragePooling2D()(x)\n    x = Dense(1000, activation='relu')(x)\n    pred = Dense(len(classes), activation='softmax')(x)\n    \n    model = Model(inputs=base_model.input, outputs=pred)\n    \n    return model","000ca009":"# Initiating the model\nmodel = get_model()\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics='accuracy')\nmodel.summary()","db640062":"# Training and validating the model\nmodel.fit(train, epochs=2, batch_size=100, validation_data=val)","7334e9e8":"# Predictions\nplt.figure(figsize=(20,40))\nfor i in enumerate(os.listdir(test_path)):\n    image = Image.open(test_path+'\/'+i[1])\n    image = np.asarray(image)\n    image = image\/255\n    \n    plt.subplot(10,3,i[0]+1)\n    plt.imshow(image)\n    \n    pred = np.argmax(model.predict(image.reshape(-1,200,200,3)))\n    for j in train.class_indices:\n        if pred == train.class_indices[j]:\n            prediction=j\n        else:\n            continue\n    \n    plt.title('Actual:{0} \/ Predicted:{1}'.format(i[1],prediction))","192deb3d":"There is no class imbalance"}}