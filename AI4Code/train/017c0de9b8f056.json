{"cell_type":{"f046905e":"code","4f3c0dd3":"code","89df81df":"code","98906f2d":"code","bb4a8a5b":"code","42249716":"code","35c58f04":"code","1ad20e9c":"code","ea549a65":"code","564535c7":"code","05002752":"code","a4462254":"code","546710a4":"code","c144e4aa":"code","7b20dc39":"code","3c29c5c4":"markdown","c31cfd08":"markdown","dffbcb14":"markdown","901630af":"markdown","7c9783bb":"markdown"},"source":{"f046905e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f3c0dd3":"import matplotlib.pyplot as plt\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\n\nfrom keras import models\nfrom keras import layers\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras import regularizers\n","89df81df":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntrain.head()","98906f2d":"train_labels = train['label']\ntrain1 = train.drop('label', axis=1)\n\ntrain1 = np.asarray(train1).astype('float32')\/255\ntest = np.asarray(test).astype('float32')\/255\ntrain1 = train1.reshape(train1.shape[0], 28, 28, 1)\ntest = test.reshape(test.shape[0], 28, 28, 1)\n\ntrain_labels = to_categorical(train_labels)","bb4a8a5b":"img = train1[0]*255\nimg_reshape = img.reshape(28, 28)\nplt.imshow(img_reshape)\nplt.show()","42249716":"print(train1.shape)\nprint(train_labels.shape)","35c58f04":"X_train, X_val, y_train, y_val= train_test_split(train1, train_labels, test_size=0.2)","1ad20e9c":"model = models.Sequential()\n\nmodel.add(layers.Conv2D(32, (3, 3), \n                        activation='relu', \n                        input_shape=(28, 28, 1), \n                        padding='same',\n                        kernel_regularizer=regularizers.l2(0.001)))\n\nmodel.add(layers.MaxPooling2D((2, 2), strides=(2,2)))\n\nmodel.add(layers.Conv2D(32, (3, 3), \n                        activation='relu', \n                        padding='same',\n                        kernel_regularizer=regularizers.l2(0.001)))\nmodel.add(layers.MaxPooling2D((2, 2), strides=(2,2)))\n\nmodel.add(layers.Conv2D(32, (3, 3), \n                        activation='relu', \n                        padding='same',\n                        kernel_regularizer=regularizers.l2(0.001)))\n\nmodel.add(layers.Flatten())\n\nmodel.add(layers.Dense(32, activation='relu', kernel_regularizer=regularizers.l2(0.001)))\nmodel.add(layers.Dense(10, activation='softmax'))\n\nfrom keras import optimizers\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['acc'])","ea549a65":"model.fit(X_train, y_train, \n                    batch_size=128, \n                    epochs=20, \n                    validation_data=(X_val, y_val))","564535c7":"loss=pd.DataFrame(model.history.history)\nloss[['acc', 'val_acc']].plot()","05002752":"loss[['loss', 'val_loss']].plot()","a4462254":"model.fit(train1, train_labels, \n                    batch_size=128, \n                    epochs=20)","546710a4":"predictions = model.predict(test, batch_size=32)\nimage_id = range(1, predictions.shape[0] + 1)\npred = [np.argmax(i) for i in predictions]\nsubmission = pd.DataFrame({'ImageId': image_id, 'Label': pred})\nsubmission.to_csv('digit_recognizer_submission', index=False)","c144e4aa":"submission.head()","7b20dc39":"ss=pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nss","3c29c5c4":"# Data Loading","c31cfd08":"# Data Preprocessing","dffbcb14":"# Prediction","901630af":"# CNN Model","7c9783bb":"# Model Evaluation"}}