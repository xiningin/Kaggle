{"cell_type":{"e53a41bc":"code","ce4e1f62":"code","96b7c816":"code","7bb883e3":"code","1ffb0885":"code","7a873d96":"code","81de4ca5":"code","c253dfae":"code","93d70526":"code","2e42638a":"code","d4a48284":"code","6c4dd68f":"code","85d4b81f":"code","152f7070":"code","d48f4f16":"code","6db3505a":"code","a11993f0":"code","8ab7d104":"code","8763f7d4":"code","50b775de":"code","4f942f07":"code","5e3243a8":"code","a8e19a2b":"code","d3401e54":"code","d0127145":"code","a4b6b021":"code","86d78ba9":"code","e479a988":"code","f034e726":"code","0399ddea":"code","2be58d79":"code","b6752da2":"code","11be48e9":"code","ccd4180d":"code","2c611990":"code","ef869551":"code","45dc75b9":"code","c9d33a9c":"code","b4577751":"code","6ab22f3f":"code","e07e9252":"code","74aa0fbe":"code","e89578b4":"code","80f49e31":"code","b914bac7":"code","d47385ca":"code","fe41dd97":"markdown","2db49819":"markdown","66f275c2":"markdown","3534f79f":"markdown","5af03252":"markdown","1d091f6e":"markdown","bc95d8d0":"markdown","4e24db13":"markdown","9f4dc6b1":"markdown","4ef5c154":"markdown","234011fb":"markdown","6c16be37":"markdown","185a0b1d":"markdown","9c6b4ed0":"markdown","4ecaf0d1":"markdown","82011b08":"markdown","5daf51c1":"markdown"},"source":{"e53a41bc":"!pip install scikit-learn==0.23.2","ce4e1f62":"import pandas as pd\nimport numpy as np\nimport os\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport graphviz\nimport seaborn as sns\n\nprint(\"Version Pandas\", pd.__version__)\nprint(\"Version Matplotlib\", matplotlib.__version__)\nprint(\"Version Numpy\", np.__version__)\nprint(\"Version Seaborn\", sns.__version__)\n\nos.listdir('..\/input\/tabular-playground-series-apr-2021\/')","96b7c816":"BASE_DIR = '..\/input\/tabular-playground-series-apr-2021\/'\ntrain_df = pd.read_csv(BASE_DIR + 'train.csv')\ntest_df = pd.read_csv(BASE_DIR + 'test.csv')\nsample_submission = pd.read_csv(BASE_DIR + 'sample_submission.csv')\n\n# reset_index: setting an index; drop=True: delete an index\nall_df=pd.concat([train_df, test_df]).reset_index(drop=True)\n\nprint('Rows and Columns in train dataset:', train_df.shape)\nprint('Rows and Columns in test dataset:', test_df.shape)","7bb883e3":"import random\n\n\nfrom sklearn.metrics import accuracy_score # \ubd84\ub958 \ud3c9\uac00\uc9c0\ud45c\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold\n\n# modeling\nimport lightgbm as lgb\nimport catboost as ctb\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\n\nimport warnings\nwarnings.simplefilter('ignore')","1ffb0885":"TARGET = 'Survived'\n\n# parameters\nN_ESTIMATORS= 1000\nN_SPLITS =10\nSEED = 2021\nEARLY_STOPPING_ROUNDS= 100\nVERBOSE= 100","7a873d96":"# Create random seed\ndef set_seed(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED']= str(seed)\n    np.random.seed(seed)\n    \nset_seed(SEED)","81de4ca5":"print('Missing values per columns in train dataset')\nfor col in train_df.columns:\n    temp_col=train_df[col].isnull().sum()\n    print(f'{col}: {temp_col}')\nprint()\nprint('Missing values per columns in test dataset')\nfor col in test_df.columns:\n    temp_col= test_df[col].isnull().sum()\n    print(f'{col}: {temp_col}')","c253dfae":"# Age : Age\uc758 \ud3c9\uade0\uac12 -> NA\nall_df['Age'] = all_df['Age'].fillna(all_df['Age'].mean())\n\n# Cabin: Cabin\uc758 \ubb38\uc790\uc5f4 \uc911 \uac00\uc7a5 \uccab\ubc88\uc9f8 \uc54c\ud30c\ubcb3\ub9cc \ucd94\ucd9c\n# strip(): string\uc5d0\uc11c \uacf5\ubc31 \uc81c\uac70\nall_df['Cabin']=all_df['Cabin'].fillna('X').map(lambda x: x[0].strip())\n\n# Ticket: NA <- 'X', \ubb38\uc790\uc5f4 \uc911 \uccab\ubc88\uc9f8 \ub2e8\uc5b4\ub9cc \ucd94\ucd9c\nall_df['Ticket']= all_df['Ticket'].fillna('X').map(lambda x: str(x).split()[0] \n                                                   if len(str(x).split()) > 1\n                                                  else 'X')\n\n#Pclass: Pclass\uc5d0 \ub530\ub978 Fare\uc758 \ud3c9\uade0 -> fare_map\nfare_map= all_df[['Fare','Pclass']].dropna().groupby('Pclass').median().to_dict()\nall_df['Fare']=all_df['Fare'].fillna(all_df['Pclass'].map(fare_map['Fare']))\nall_df['Fare']=np.log1p(all_df['Fare'])\n\n#Embarked: na <- 'X'\nall_df['Embarked']=all_df['Embarked'].fillna('X')\n\n#Name: First Name\ub9cc \ucd94\ucd9c\nall_df['Name']=all_df['Name'].map(lambda x: x.split(',')[0])","93d70526":"# Pclass\ubcc4\ub85c Ticket \uc21c\uc704\ndata_1=all_df.loc[all_df['Pclass']==1].groupby('Ticket')['Ticket'].count().sort_values(ascending=False)\nprint(data_1)\nprint()\ndata_2=all_df.loc[all_df['Pclass']==2].groupby('Ticket')['Ticket'].count().sort_values(ascending=False)\nprint(data_2)\nprint()\ndata_3=all_df.loc[all_df['Pclass']==3].groupby('Ticket')['Ticket'].count().sort_values(ascending=False)\nprint(data_3)\nprint()","2e42638a":"label_cols = ['Name', 'Ticket', 'Sex','Pclass','Embarked']\nonehot_cols = [ 'Cabin',]\nnumerical_cols = [ 'Age', 'SibSp', 'Parch', 'Fare']","d4a48284":"# Label Encoding \ud568\uc218\ndef label_encoder(c):\n    le = LabelEncoder()\n    return le.fit_transform(c)","6c4dd68f":"# StandardScaler(): \ud3c9\uade0\uc744 \uc81c\uac70\ud558\uace0 \ub370\uc774\ud130\ub97c \ub2e8\uc704 \ubd84\uc0b0\uc73c\ub85c \uc870\uc815, but \uc774\uc0c1\uce58\uac00 \uc788\ub2e4\uba74 \ub370\uc774\ud130\uc758 \ud655\uc0b0 \ub2ec\ub77c\uc9d0\nscaler= StandardScaler()\n\nonehot_encoded_df=pd.get_dummies(all_df[onehot_cols])\nlabel_encoded_df=all_df[label_cols].apply(label_encoder)\nnumerical_df=pd.DataFrame(scaler.fit_transform(all_df[numerical_cols]), columns= numerical_cols)\ntarget_df=all_df[TARGET]\n\nall_df=pd.concat([numerical_df, label_encoded_df, onehot_encoded_df, target_df], axis=1)","85d4b81f":"drop_list=['Survived','Parch']","152f7070":"train = all_df.iloc[:100000, :] # 100,000\uac1c \uae4c\uc9c0\ntest = all_df.iloc[100000:, :]\n\n# test set\uc5d0\uc11c\ub294 survived \uc778 \uc885\uc18d\ubcc0\uc218\ub9cc drop\ud55c\ub2e4. \ntest= test.drop('Survived', axis=1)\nmodel_results= pd.DataFrame()\nfolds= 5","d48f4f16":"test.head()","6db3505a":"y= train.loc[:, 'Survived']\nX= train.drop(drop_list, axis=1)","a11993f0":"X_train, X_valid, y_train, y_valid = train_test_split(X,y,test_size=0.25, random_state=21)","8ab7d104":"#!pip install pycaret==2.2.3","8763f7d4":"!pip install pycaret","50b775de":"from pycaret.utils import version\nimport sklearn\nprint(\"pycaret version:\", version())\nprint(\"sklearn version:\", sklearn.__version__)","4f942f07":"all_df_pycaret= pd.concat([X,y], axis=1)\nall_df_pycaret['Survived']= all_df_pycaret['Survived'].astype('int64')\nall_df_pycaret.info()","5e3243a8":"from pycaret.classification import *\n\ncategory_caret={'Sex':['0','1'],'Pclass':['0','1','2'], 'Embarked':['0','1','2','3']}\n\nsetup(data = all_df_pycaret, \n      target = 'Survived',\n      ordinal_features= category_caret,\n      #numeric_imputation = 'Age','SibSp','Name','Ticket','Fare',\n      fold=5,\n      silent = True,\n      session_id=1,\n      #data_split_shuffle=True\n      fold_shuffle=True\n\n     )\n#set_config('seed',SEED)","a8e19a2b":"#best_model = compare_models(sort = 'Accuracy', n_select = 4)","d3401e54":"#print(best_model)","d0127145":"gbc= create_model('gbc')","a4b6b021":"lgbm= create_model('lightgbm')","86d78ba9":"cb=create_model('catboost')","e479a988":"#xgb= create_model('xgboost')","f034e726":"tuned_gbc= tune_model(gbc)","0399ddea":"tuned_lgbm= tune_model(lgbm)","2be58d79":"tuned_cb=tune_model(cb)","b6752da2":"#tuned_xgb= tune_model(xgb)","11be48e9":"print(tuned_gbc)\nprint(tuned_lgbm)\nprint(tuned_cb)\n#print(tuned_xgb)","ccd4180d":"plot_model(tuned_gbc)","2c611990":"plot_model(tuned_lgbm)","ef869551":"plot_model(tuned_cb)","45dc75b9":"# train a voting classifier : soft\nblended_soft= blend_models(estimator_list=[tuned_gbc, lgbm, tuned_cb], method='soft')","c9d33a9c":"# train a voting classifier : hard\nblended_hard= blend_models(estimator_list=[tuned_gbc,tuned_cb], method='hard')","b4577751":"stacked_models=stack_models(estimator_list=[tuned_gbc,lgbm, tuned_cb])","6ab22f3f":"pred= predict_model(stacked_models, data= test)\npred.info()","e07e9252":"pred['Label']","74aa0fbe":"sample_submission['Survived']","e89578b4":"pred = pred.reset_index()","80f49e31":"pred['Label']","b914bac7":"#sample_submission = pd.read_csv(BASE_DIR + 'sample_submission.csv')\nsample_submission['Survived']= pred['Label']\nsample_submission","d47385ca":"sample_submission.to_csv('Pycaret Submission.csv', index=False)\nsample_submission.head()","fe41dd97":"### 2) Filling missing values","2db49819":"## 1. Model Training","66f275c2":"# **Scikit Learn**\n> ","3534f79f":"### 2-3.","5af03252":"### 1-1. Compare Model","1d091f6e":"### Predictions and Submissions","bc95d8d0":"### 2-1. Blend Models","4e24db13":"## Encoding","9f4dc6b1":"### 2-2. Stack Models","4ef5c154":"# Data Preprocessing","234011fb":"### 1) Null values","6c16be37":"# **Pycaret**\n> *references*\\\n> [https:\/\/www.kaggle.com\/j2hoon85\/tps-april-sklearn-pycaret-for-newbies#PyCaret](https:\/\/www.kaggle.com\/j2hoon85\/tps-april-sklearn-pycaret-for-newbies#PyCaret)\\\n> [https:\/\/www.kaggle.com\/subinium\/how-to-use-pycaret-with-feature-engineering](https:\/\/www.kaggle.com\/subinium\/how-to-use-pycaret-with-feature-engineering)\n\n> Scores\n> - Accuracy, AUC, Recall, Prec, F1-score\n> - AUC, F1-score\ub97c \ud568\uaed8 \ubcf4\ub3c4\ub85d \ud55c\ub2e4.","185a0b1d":"### 1-3. Tune Model\n- tune_model()\uc744 \uc368\uc11c \ud29c\ub2dd\ub41c \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","9c6b4ed0":"## Data split","4ecaf0d1":"# Data Import","82011b08":"### 1-2. Create Model\n- Top4 \ubaa8\ub378: gbc \/ lightgbm \/ catboost \/ xgboost","5daf51c1":"## 2. Model Ensembling"}}