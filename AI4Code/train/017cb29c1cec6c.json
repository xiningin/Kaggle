{"cell_type":{"5bcd9f53":"code","be41c2f0":"code","649111cf":"code","e128763f":"code","c008d58c":"code","fa765a11":"code","cb370b1b":"markdown"},"source":{"5bcd9f53":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('..\/input\/skin-cancer-malignant-vs-benign'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","be41c2f0":"from glob import glob \n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom skimage.io import imread\nfrom skimage.color import rgb2grey\nfrom sklearn.feature_extraction import image\nfrom sklearn.cluster import KMeans","649111cf":"mal_images = glob('..\/input\/skin-cancer-malignant-vs-benign\/data\/train\/malignant\/*')\nben_images = glob('..\/input\/skin-cancer-malignant-vs-benign\/data\/train\/benign\/*')","e128763f":"def load_images(paths):\n    tmp = []\n    for path in paths:\n        tmp.append(imread(path))\n    return tmp","c008d58c":"mal = load_images(mal_images)\nben = load_images(ben_images)","fa765a11":"\nfrom skimage import filters, segmentation\n\n# find a dividing line between 0 and 255\n# pixels below this value will be black\n# pixels above this value will be white\nfor im in mal : \n    \n    val = filters.threshold_otsu(im)\n    mask = im < val\n    clean_border = segmentation.clear_border(mask)\n    plt.imshow(clean_border, cmap='gray')\n    plt.show()\n\n# the mask object converts each pixel in the image to True or False\n# to indicate whether the given pixel is black\/white\n\n\n# apply the mask to the image object\n\n\n# plot the resulting binarized image\n","cb370b1b":" We have some image and there are objects of interest within it. So as a first step we have segmented the image by whatever be the method. If we have n number of segments within the image then we must have to mark or label those segments (may be 1,2,3...n). That means segment 1 represents a cluster of pixels (in 2D) having label 1 assigned to each.\n \nIf you have done upto this point then you can apply connected component labeling algorithm to isolate those segments in terms of individual objects. Then you can apply a suitable feature extraction technique on each segment separately and get a feature vector for each of them.\nThen you can use any classifier to classify the segments into some known classes.\nFor feature extraction and classification you can use Matlab"}}