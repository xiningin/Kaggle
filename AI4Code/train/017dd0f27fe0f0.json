{"cell_type":{"68f6195b":"code","70e9bc6d":"code","4807c8b2":"code","dc33d927":"code","40b5ccfd":"code","50fdbea5":"code","b0c98fd6":"code","2ef77089":"code","c53f1de7":"code","7adf29b0":"code","512e7b29":"code","ee48b364":"code","8610a6e6":"code","a5b8b2a7":"code","b6a2f1f5":"code","e12b75ca":"code","20918fc7":"code","add184e6":"code","28f8edec":"code","d3c8cdbb":"code","a68d3683":"code","c9e63882":"code","1357d970":"code","7f1f1652":"code","e18d9bb7":"code","b77f3d28":"code","a3f3f587":"code","20e36bc2":"code","520004a3":"code","b9e117ae":"code","65d45915":"code","bab4cfb3":"code","9cd58dfc":"code","0b4de352":"code","88a3c189":"code","390d9df7":"code","7fbb7a6b":"code","8b12f5aa":"code","f5a486a6":"code","0fbdd7e2":"code","95b58a0d":"markdown","29d79ca5":"markdown","290b4bbc":"markdown","6fc4ead8":"markdown","14fc4f51":"markdown","3ba3934c":"markdown","c7471f8c":"markdown","55d1560c":"markdown","d06d7be1":"markdown","b2aba2ed":"markdown","8964c926":"markdown","6cf45ac9":"markdown","bfc315d3":"markdown","014ddf98":"markdown","cfd30e46":"markdown","dd1d92cd":"markdown","530917c7":"markdown","32afe620":"markdown","8d9e1602":"markdown","239627d8":"markdown","0be7d432":"markdown"},"source":{"68f6195b":"# Realizando as importa\u00e7\u00f5es e definindo o corte das casas decimais, e outros valores:\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\npd.options.display.float_format = '{:.2%}'.format\npd.set_option('display.max_row', 800)# set jupyter's max row display\npd.set_option('display.max_columns', 50)# set jupyter's max column width to 50\n\nplt.style.use('ggplot')\n%matplotlib inline","70e9bc6d":"# Checkando as 5 primeiras linhas do arquivo:\ndataset = pd.read_csv('..\/input\/anv.csv', delimiter=',')\ndataset.head()","4807c8b2":"# Analisando as dimens\u00f5es do dataset:\nprint('Este DataSet possui linhas:', dataset.shape[0])\nprint('Este DataSet possui colunas:', dataset.shape[1])","dc33d927":"# Verificando se existem dados nulos:\ndataset.isnull().sum()","40b5ccfd":"dataset.drop(['codigo_ocorrencia','aeronave_tipo_icao','aeronave_pmd','aeronave_pmd_categoria','aeronave_assentos',\n              'aeronave_ano_fabricacao','aeronave_pais_fabricante','aeronave_registro_categoria','aeronave_registro_segmento',\n              'aeronave_voo_origem','aeronave_voo_destino','aeronave_fase_operacao','aeronave_fase_operacao_icao',\n              'aeronave_tipo_operacao','aeronave_nivel_dano','aeronave_dia_extracao'],axis=1, inplace = True)\ndataset.head()","50fdbea5":"# Verificando quantidade de dados nulos:\ndataset.isnull().sum()","b0c98fd6":"classification = [['aeronave_fabricante' , 'Qualitativa Nominal'],['aeronave_matricula' , 'Qualitativa Nominal'],\n            ['aeronave_operador_categoria' , 'Qualitativa Ordinal'],['aeronave_tipo_veiculo' , 'Qualitativa Nominal'],\n            ['aeronave_modelo' , 'Qualitativa Ordinal'],['aeronave_motor_tipo' , 'Qualitativa Nominal'],\n            ['aeronave_motor_quantidade' , 'Qualitativa Ordinal'],['aeronave_pais_registro' , 'Qualitativa Nominal'],\n            ['total_fatalidades' , 'Quantitativa Discreta']]\nclassification = pd.DataFrame(classification, columns=['Variavel' , 'Classifica\u00e7\u00e3o'])\nclassification","2ef77089":"manufacturer = dataset['aeronave_fabricante'].value_counts()\np_manufacturer = dataset['aeronave_fabricante'].value_counts(normalize=True)\ngf1 = pd.concat([manufacturer, p_manufacturer], axis=1, keys=['Frequ\u00eancia Absoluta', 'Frequ\u00eancia Relativa %'])\ngf1.head()\n#.head() para mostrar os 5 primeiros valores, caso deseje ver a lista completa delete-o (utilizado para facilitar vizualiza\u00e7\u00e3o)","c53f1de7":"registration = dataset['aeronave_matricula'].value_counts()\np_registration = dataset['aeronave_matricula'].value_counts(normalize=True)\ngf2 = pd.concat([registration, p_registration], axis=1, keys=['Frequ\u00eancia Absoluta', 'Frequ\u00eancia Relativa %'])\ngf2.head()\n#.head() para mostrar os 5 primeiros valores, caso deseje ver a lista completa delete-o (utilizado para facilitar vizualiza\u00e7\u00e3o)","7adf29b0":"operator_category = dataset['aeronave_operador_categoria'].value_counts()\np_operator_category = dataset['aeronave_operador_categoria'].value_counts(normalize=True)\ngf3 = pd.concat([operator_category, p_operator_category], axis=1, keys=['Frequ\u00eancia Absoluta', 'Frequ\u00eancia Relativa %'])\ngf3.head()\n#.head() para mostrar os 5 primeiros valores, caso deseje ver a lista completa delete-o (utilizado para facilitar vizualiza\u00e7\u00e3o)","512e7b29":"vehicle = dataset['aeronave_tipo_veiculo'].value_counts()\np_vehicle = dataset['aeronave_tipo_veiculo'].value_counts(normalize=True)\ngf4 = pd.concat([vehicle, p_vehicle], axis=1, keys=['Frequ\u00eancia Absoluta', 'Frequ\u00eancia Relativa %'])\ngf4.head()\n#.head() para mostrar os 5 primeiros valores, caso deseje ver a lista completa delete-o (utilizado para facilitar vizualiza\u00e7\u00e3o)","ee48b364":"model = dataset['aeronave_modelo'].value_counts()\np_model = dataset['aeronave_modelo'].value_counts(normalize=True)\ngf5 = pd.concat([model, p_model], axis=1, keys=['Frequ\u00eancia Absoluta', 'Frequ\u00eancia Relativa %'])\ngf5.head()\n#.head() para mostrar os 5 primeiros valores, caso deseje ver a lista completa delete-o (utilizado para facilitar vizualiza\u00e7\u00e3o)","8610a6e6":"engine_type = dataset['aeronave_motor_tipo'].value_counts()\np_engine_type = dataset['aeronave_motor_tipo'].value_counts(normalize=True)\ngf6 = pd.concat([engine_type, p_engine_type], axis=1, keys=['Frequ\u00eancia Absoluta', 'Frequ\u00eancia Relativa %'])\ngf6","a5b8b2a7":"engine_quantity = dataset['aeronave_motor_quantidade'].value_counts()\np_engine_quantity = dataset['aeronave_motor_quantidade'].value_counts(normalize=True)\ngf7 = pd.concat([engine_quantity, p_engine_quantity], axis=1, keys=['Frequ\u00eancia Absoluta', 'Frequ\u00eancia Relativa %'])\ngf7","b6a2f1f5":"registration_country = dataset['aeronave_pais_registro'].value_counts()\np_registration_country = dataset['aeronave_pais_registro'].value_counts(normalize=True)\ngf8 = pd.concat([registration_country, p_registration_country], axis=1, keys=['Frequ\u00eancia Absoluta', 'Frequ\u00eancia Relativa %'])\ngf8.head()\n#.head() para mostrar os 5 primeiros valores, caso deseje ver a lista completa delete-o (utilizado para facilitar vizualiza\u00e7\u00e3o)","e12b75ca":"fatalities = dataset['total_fatalidades'].value_counts()\np_fatalities = dataset['total_fatalidades'].value_counts(normalize=True)\ngf9 = pd.concat([fatalities, p_fatalities], axis=1, keys=['Frequ\u00eancia Absoluta', 'Frequ\u00eancia Relativa %'])\ngf9","20918fc7":"ax = manufacturer.plot(kind='barh', figsize=(10,200),color=\"coral\", fontsize=13);\n\nax.set_alpha(0.8)\nax.set_title(\"Porcentagem de cada empresa em rela\u00e7\u00e3o a quantidade de aeronaves no arquivo de estudo\", fontsize=16)\nax.set_xlabel(\"Quantidade de Aeronaves por Empresas\", fontsize=12);\nax.set_xticks([0, 100, 200, 300, 400, 500, 600, 700, 800])\n\ntotals = []# cria uma lista para coletar os dados de plt.patches\n\nfor i in ax.patches:# encontrar os valores e acrescentar \u00e0 lista\n    totals.append(i.get_width())\n\ntotal = sum(totals)# definir barras individuais usando a lista acima\n\nfor i in ax.patches:# get_width puxa para a esquerda ou para a direita; get_y empurra para cima ou para baixo\n    ax.text(i.get_width()+.3, i.get_y()+.38, \\\n            str(round((i.get_width()\/total)*100, 2))+'%', fontsize=13,\ncolor='dimgrey')\n\nax.invert_yaxis()# invertido para maior no topo","add184e6":"ax = registration .plot(kind='barh', figsize=(10,900),color=\"coral\", fontsize=13);\n\nax.set_alpha(0.8)\nax.set_title(\"Porcentagem de combina\u00e7\u00e3o de Marcas atribuidas por matr\u00edcula das Aeronaves\", fontsize=16)\nax.set_xlabel(\"N\u00famero de Aeronaves\", fontsize=12);\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ,11, 12])\n\ntotals = []# cria uma lista para coletar os dados de plt.patches\n\nfor i in ax.patches:# encontrar os valores e acrescentar \u00e0 lista\n    totals.append(i.get_width())\n\ntotal = sum(totals)# definir barras individuais usando a lista acima\n\nfor i in ax.patches:# get_width puxa para a esquerda ou para a direita; get_y empurra para cima ou para baixo\n    ax.text(i.get_width()+.3, i.get_y()+.38, \\\n            str(round((i.get_width()\/total)*100, 2))+'%', fontsize=13,\ncolor='dimgrey')\n\nax.invert_yaxis()# invertido para maior no topo","28f8edec":"ax = operator_category.plot(kind='barh', figsize=(10,7),color=\"coral\", fontsize=13);\n\nax.set_alpha(0.8)\nax.set_title(\"Categoria de uma aeronave separada por uso\", fontsize=16)\nax.set_xlabel(\"Quantidade de Aeronaves\", fontsize=12);\nax.set_xticks([0, 500, 1000, 1500, 2000, 2500])\n\ntotals = []# cria uma lista para coletar os dados de plt.patches\n\nfor i in ax.patches:# encontrar os valores e acrescentar \u00e0 lista\n    totals.append(i.get_width())\n\ntotal = sum(totals)# definir barras individuais usando a lista acima\n\nfor i in ax.patches:# get_width puxa para a esquerda ou para a direita; get_y empurra para cima ou para baixo\n    ax.text(i.get_width()+.3, i.get_y()+.38, \\\n            str(round((i.get_width()\/total)*100, 2))+'%', fontsize=13,\ncolor='dimgrey')\n\nax.invert_yaxis()# invertido para maior no topo","d3c8cdbb":"ax = vehicle.plot(kind='barh', figsize=(10,7),color=\"coral\", fontsize=13);\n\nax.set_alpha(0.8)\nax.set_title(\"Porcentagem referente a Categoria das Aeronaves\", fontsize=16)\nax.set_xlabel(\"Numero de Aeronaves\", fontsize=12);\nax.set_xticks([0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500])\n\ntotals = []# cria uma lista para coletar os dados de plt.patches\n\nfor i in ax.patches:# encontrar os valores e acrescentar \u00e0 lista\n    totals.append(i.get_width())\n\ntotal = sum(totals)# definir barras individuais usando a lista acima\n\nfor i in ax.patches:# get_width puxa para a esquerda ou para a direita; get_y empurra para cima ou para baixo\n    ax.text(i.get_width()+.3, i.get_y()+.38, \\\n            str(round((i.get_width()\/total)*100, 2))+'%', fontsize=13,\ncolor='dimgrey')\n\nax.invert_yaxis()# invertido para maior no topo","a68d3683":"ax = model.plot(kind='barh', figsize=(10,700),color=\"coral\", fontsize=13);\n\nax.set_alpha(0.8)\nax.set_title(\"Porcentagem de modelos diferenes para a mesma categoria\", fontsize=16)\nax.set_xlabel(\"Quantidade\", fontsize=12);\nax.set_xticks([0, 50, 100, 150, 200, 250])\n\ntotals = []# cria uma lista para coletar os dados de plt.patches\n\nfor i in ax.patches:# encontrar os valores e acrescentar \u00e0 lista\n    totals.append(i.get_width())\n\ntotal = sum(totals)# definir barras individuais usando a lista acima\n\nfor i in ax.patches:# get_width puxa para a esquerda ou para a direita; get_y empurra para cima ou para baixo\n    ax.text(i.get_width()+.3, i.get_y()+.38, \\\n            str(round((i.get_width()\/total)*100, 2))+'%', fontsize=13,\ncolor='dimgrey')\n\nax.invert_yaxis()# invertido para maior no topo","c9e63882":"ax = engine_type.plot(kind='barh', figsize=(10,7),color=\"coral\", fontsize=13);\n\nax.set_alpha(0.8)\nax.set_title(\"Porcentagem de Aeronaves por tipo de motor\", fontsize=16)\nax.set_xlabel(\"Quantidade de Aeronaves\", fontsize=12);\nax.set_xticks([0, 500, 1000, 1500, 2000, 2500, 3000, 3500])\n\ntotals = []# cria uma lista para coletar os dados de plt.patches\n\nfor i in ax.patches:# encontrar os valores e acrescentar \u00e0 lista\n    totals.append(i.get_width())\n\ntotal = sum(totals)# definir barras individuais usando a lista acima\n\nfor i in ax.patches:# get_width puxa para a esquerda ou para a direita; get_y empurra para cima ou para baixo\n    ax.text(i.get_width()+.3, i.get_y()+.38, \\\n            str(round((i.get_width()\/total)*100, 2))+'%', fontsize=13,\ncolor='dimgrey')\n\nax.invert_yaxis()# invertido para maior no topo","1357d970":"ax = engine_quantity.plot(kind='barh', figsize=(10,7),color=\"coral\", fontsize=13);\n\nax.set_alpha(0.8)\nax.set_title(\"Modelo de motor por Aeronave\", fontsize=16)\nax.set_xlabel(\"Quantidade\", fontsize=12);\nax.set_xticks([0, 500, 1000, 1500, 2000, 2500, 3000])\n\ntotals = []# cria uma lista para coletar os dados de plt.patches\n\nfor i in ax.patches:# encontrar os valores e acrescentar \u00e0 lista\n    totals.append(i.get_width())\n\ntotal = sum(totals)# definir barras individuais usando a lista acima\n\nfor i in ax.patches:# get_width puxa para a esquerda ou para a direita; get_y empurra para cima ou para baixo\n    ax.text(i.get_width()+.3, i.get_y()+.38, \\\n            str(round((i.get_width()\/total)*100, 2))+'%', fontsize=13,\ncolor='dimgrey')\n\nax.invert_yaxis()# invertido para maior no topo","7f1f1652":"ax = registration_country.plot(kind='barh', figsize=(10,20),color=\"coral\", fontsize=13);\n\nax.set_alpha(0.8)\nax.set_title(\"Porcentagem de Naves registradas por Pa\u00eds\", fontsize=16)\nax.set_xlabel(\"Quantidade\", fontsize=12);\nax.set_xticks([0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500])\n\ntotals = []# cria uma lista para coletar os dados de plt.patches\n\nfor i in ax.patches:# encontrar os valores e acrescentar \u00e0 lista\n    totals.append(i.get_width())\n\ntotal = sum(totals)# definir barras individuais usando a lista acima\n\nfor i in ax.patches:# get_width puxa para a esquerda ou para a direita; get_y empurra para cima ou para baixo\n    ax.text(i.get_width()+.3, i.get_y()+.38, \\\n            str(round((i.get_width()\/total)*100, 2))+'%', fontsize=13,\ncolor='dimgrey')\n\nax.invert_yaxis()# invertido para maior no topo","e18d9bb7":"ax = fatalities.plot(kind='barh', figsize=(10,20),color=\"coral\", fontsize=13);\n\nax.set_alpha(0.8)\nax.set_title(\"Fatalidades\", fontsize=16)\nax.set_xlabel(\"Quantidade\", fontsize=12);\nax.set_xticks([0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000])\n\ntotals = []# cria uma lista para coletar os dados de plt.patches\n\nfor i in ax.patches:# encontrar os valores e acrescentar \u00e0 lista\n    totals.append(i.get_width())\n\ntotal = sum(totals)# definir barras individuais usando a lista acima\n\nfor i in ax.patches:# get_width puxa para a esquerda ou para a direita; get_y empurra para cima ou para baixo\n    ax.text(i.get_width()+.3, i.get_y()+.38, \\\n            str(round((i.get_width()\/total)*100, 2))+'%', fontsize=13,\ncolor='dimgrey')\n\nax.invert_yaxis()# invertido para maior no topo","b77f3d28":"af = dataset[dataset.aeronave_tipo_veiculo != 'INDETERMINADA'].groupby(['aeronave_tipo_veiculo'])['total_fatalidades'].sum()\n\nax = af.plot(kind='bar',figsize=(15,7), color=['dodgerblue', 'slategray'], fontsize=13);\n\nax.set_alpha(0.8)\nax.set_title(\"Analise da quantidade de acidentes fatais por tipo de aeronave\",\nfontsize=18)\nax.set_ylabel(\"Numero de Vitimas\", fontsize=18);\nax.set_yticks([0, 200, 400, 600, 800, 1000])\nax.set_xticklabels([\"ANF\u00cdBIO\",\"AVI\u00c3O\",\"BAL\u00c3O\",\"DIRIG\u00cdVEL\",\"HELICOPTERO\",\n                    \"HIDROAVI\u00c3O\",\"PLANADOR\",\"TRIKE\",\"ULTRALEVE\"], rotation=0, fontsize=11)\n\nfor i in ax.patches:# definir barras individuais usando a lista acima \n    ax.text(i.get_x()+.04, i.get_height()+130, \\\n            str(round((i.get_height()), 2)), fontsize=11, color='dimgrey',\n                rotation=45)\n\n","a3f3f587":"ag = dataset[dataset.aeronave_motor_quantidade != '***'].groupby(['aeronave_motor_quantidade'])['aeronave_motor_quantidade'].value_counts()\nax = ag.plot(kind='bar',figsize=(15,7), color=['dodgerblue', 'slategray'], fontsize=13);\n\nax.set_alpha(0.8)\nax.set_title(\"Analise para identificar os principais tipos de motores utilizados nas aeronaves\",\nfontsize=18)\nax.set_ylabel(\"Quantidade\", fontsize=18);\nax.set_yticks([0, 500, 1000, 1500, 2000, 2500, 3000])\nax.set_xticklabels([\"BIMOTOR\",\"MONOMOTOR\",\"QUADRIMOTOR\",\"SEM TRA\u00c7\u00c3O\",\"TRIMOTOR\"], rotation=0, fontsize=11)\n\nfor i in ax.patches:# definir barras individuais usando a lista acima \n    ax.text(i.get_x()+.04, i.get_height()+130, \\\n            str(round((i.get_height()), 2)), fontsize=11, color='dimgrey',\n                rotation=45)","20e36bc2":"ar = dataset[dataset.aeronave_motor_tipo != '***'].groupby(['aeronave_motor_tipo'])['aeronave_motor_tipo'].value_counts()\nax = ar.plot(kind='bar',figsize=(15,7), color=['dodgerblue', 'slategray'], fontsize=13);\n\nax.set_alpha(0.8)\nax.set_title(\"ACIDENTES POR TIPO DE AERONAVE\",\nfontsize=18)\nax.set_ylabel(\"Quantidade\", fontsize=18);\nax.set_yticks([0, 500, 1000, 1500, 2000, 2500, 3000])\nax.set_xticklabels([\"JATO\",\"PIST\u00c3O\",\"SEM TRA\u00c7\u00c3O\",\"TURBOELICE\",\"TURBOEIXO\"], rotation=0, fontsize=11)\n\nfor i in ax.patches:# definir barras individuais usando a lista acima \n    ax.text(i.get_x()+.04, i.get_height()+130, \\\n            str(round((i.get_height()), 2)), fontsize=11, color='dimgrey',\n                rotation=45)\n","520004a3":"pd.show_versions ()","b9e117ae":"gs1 = engine_type.plot.bar(title='ACIDENTES POR TIPO DE AERONAVE')\ngs1.set_xlabel('Tipo de Aeronave')\ngs1.set_ylabel('Quantidade Acidentes')\ngs1.plot()","65d45915":"dataset.groupby(['aeronave_motor_quantidade','aeronave_tipo_veiculo'])['aeronave_tipo_veiculo'].size().unstack().plot(kind='bar',\n                                                                                                                    stacked=True)\nplt.show()","bab4cfb3":"y_axis = p_vehicle\nx_axis = range(len(y_axis))\nwidth_n = 0.5\nbar_color = 'yellow'\n\nplt.bar(x_axis, y_axis, width=width_n, color=bar_color)\nplt.show()","9cd58dfc":"test = dataset['aeronave_pais_registro'].value_counts()\ntest.plot.hist(x='Tipo de Aeronave', y='Quantidade Acidentes')","0b4de352":"plt.plot(p_engine_type)# Criando um gr\u00e1fico\n \nplt.title('Exemplo utilizando Plot')# Atribuindo um t\u00edtulo ao gr\u00e1fico\nplt.xlabel('Variavel 1')\nplt.ylabel('Variavel 2')\n \nplt.plot(p_engine_type, label = 'Uma legenda')# Atribuindo uma legenda\nplt.legend()\n\nplt.show()# Exibindo o gr\u00e1fico gerado","88a3c189":"plt.plot(p_engine_type)\nplt.title(\"Muito F\u00e1cil\")\nplt.show()","390d9df7":"dataset.groupby(['aeronave_motor_tipo','aeronave_motor_quantidade'])['aeronave_modelo'].size().unstack().plot(kind='bar',\n                                                                                                              stacked=True)\nplt.show()","7fbb7a6b":"p_model[:20].plot(kind='barh')","8b12f5aa":"test = dataset['aeronave_pais_registro'].value_counts(normalize=True)\ntest.plot.line(x='Tipo de Aeronave', y='Quantidade Acidentes')","f5a486a6":"test = dataset['aeronave_pais_registro'].value_counts()\ntest.plot.pie(x='Tipo de Aeronave', y='Quantidade Acidentes')","0fbdd7e2":"model.plot.bar()","95b58a0d":"```import pandas as pd\nresposta = [[\"idade\", \"Quantitativa Discreta\"],[\"sexo\",\"Qualitativa Nominal\"]] #vari\u00e1veis relacionadas a tempo s\u00e3o cont\u00ednuas, mas podem ser discretas pois n\u00e3o h\u00e1 perdas -- (discretiza\u00e7\u00e3o)\nresposta = pd.DataFrame(resposta, columns=[\"Variavel\", \"Classifica\u00e7\u00e3o\"])\nresposta\n```","29d79ca5":"***","290b4bbc":"# Testes de Gr\u00e1ficos","6fc4ead8":"***","14fc4f51":"- aeronave_fabricante         : Variavel Qualitativa Nominal - o index pos decidi separar por empresa.\n- aeronave_operador_categoria : Variavel Qualitativa Ordinal - A categoria de uma aeronave depende de seu uso.\n- aeronave_tipo_veiculo       : Variavel Qualitativa Nominal - Por haver um veiculo de determinada categoria.\n- aeronave_modelo             : Variavel Qualitativa Ordinal - Uma vez que existem modelos diferenes para a mesma categoria.\n- aeronave_motor_tipo         : Variavel Qualitativa Nominal - Cada aeronave possui apenas um tipo de motor.\n- aeronave_motor_quantidade   : Variavel Qualitativa Ordinal - Modelo de motor por Aeronave.\n- aeronave_pais_registro      : Variavel Qualitativa Nominal - Uma vez que cada aeronave possui um registro.\n- total_fatalidades           : Variavel Quantitativa Discreta - Valores Numer\u00e1veis.\n- aeronave_matricula          : Variavel Qualitativa Nominal - Cada aeronave tem uma \u00fanica matr\u00edcula pr\u00f3pria e cada combina\u00e7\u00e3o de marcas pode ser atribu\u00edda apenas a uma \u00fanica aeronave.\n\n#### REFER\u00caNCIAS:\n\n- [Matr\u00edcula](http:\/\/www.anac.gov.br\/assuntos\/setor-regulado\/aeronaves\/rab\/servico\/matricula)\n- [Mudan\u00e7a de Categoria](http:\/\/www.anac.gov.br\/assuntos\/setor-regulado\/aeronaves\/rab\/servico\/mudanca-de-categoria)    \n- [Aeronaves](http:\/\/www.anac.gov.br\/assuntos\/dados-e-estatisticas\/aeronaves)\n- [Descri\u00e7\u00e3o de Vari\u00e1veis](http:\/\/www.anac.gov.br\/assuntos\/dados-e-estatisticas\/descricao-de-variaveis)","3ba3934c":"#### Quest\u00e3o 1 - Item B - Tabela de frequ\u00eancia","c7471f8c":"### Quest\u00e3o 1 - Item C - Representa\u00e7\u00e3o Gr\u00e1fica\nPara cada uma das vari\u00e1veis, produza um ou mais gr\u00e1ficos, usando matplotlib, que descreva seu comportamento \/ caracteristica. Lembre-se que estes gr\u00e1ficos precisam ser compat\u00edveis com a classifica\u00e7\u00e3o da vari\u00e1vel. ","55d1560c":"##### OBS: Como estarei usando colunas que n\u00e3o tem dados Nan, n\u00e3o farei altera\u00e7\u00e3o eu excluirei as colunas que n\u00e3o irei utilizar.","d06d7be1":"# Inicio do Exerc\u00edcio\n\n##### Setup + Import Data","b2aba2ed":"***","8964c926":"***","6cf45ac9":"***","bfc315d3":"***","014ddf98":"***","cfd30e46":"#### Quest\u00e3o 1 - Item A - Classifica\u00e7\u00e3o das vari\u00e1veis","dd1d92cd":"## Quest\u00e3o 1\n**Enunciado:**  Este notebook est\u00e1 associado ao *Kaggle Dataset* chamado \"Aula1 | Exerc\u00edcio1\". Este *Kaggle Dataset* possui dois arquivos em formato CSV (anv.csv e BR_eleitorado_2016_municipio ). Escolha um dos datasets dispon\u00edveis e j\u00e1 conhecidos, a seu crit\u00e9rio. Uma vez definido o csv, escolha no m\u00ednimo 7 e no m\u00e1ximo 12 vari\u00e1veis (colunas) que voc\u00ea avalia como sendo relevantes. Para cada uma das suas vari\u00e1veis escolhidas, forne\u00e7a:\n\n\n### Quest\u00e3o 1 - Item A - Classifica\u00e7\u00e3o das vari\u00e1veis\n\nClassifique todas as vari\u00e1veis escolhidas, e construa um dataframe com sua resposta.\nExemplo:","530917c7":"# Dicas\n\n- Exemplo de acesso aos CSVs dispon\u00edveis no dataset\n> df = pd.read_csv('..\/input\/anv.csv', delimiter=',')","32afe620":"# Especializa\u00e7\u00e3o em Ci\u00eancia de Dados - Turma 2018.1 - Facens\n## Aula1 | Exerc\u00edcio 1 (valendo nota)\n\n* **Data de entrega:** 06\/nov\/2018 07:59\n* **Professor:**  Matheus Mota\n* **Aluno:** Bruno Alves Comitre\n* **RA:** 183141","8d9e1602":"#### Quest\u00e3o 1 - Item C - Representa\u00e7\u00e3o Gr\u00e1fica","239627d8":"### Quest\u00e3o 1 - Item B - Tabela de frequ\u00eancia\n\nConstrua uma tabela de frequ\u00eancia para cada uma das **vari\u00e1veis qualitativas** que voc\u00ea escolheu (caso n\u00e3o tenha escolhido nenhuma, deixe esta quest\u00e3o em branco). Uma dica: a fun\u00e7\u00e3o *value_counts()* do Pandas pode ser muito \u00fatil. =)\n","0be7d432":"##### VERS\u00d5ES INSTALADAS"}}