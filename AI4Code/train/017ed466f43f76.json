{"cell_type":{"a67b7b3a":"code","673ff3e5":"code","cb9b3483":"code","e480f6d7":"code","cd793aef":"code","802ffad7":"code","852f3e64":"code","590fb89e":"code","726622ff":"code","edfc3df4":"code","07afecae":"code","a61d53bf":"code","fcba26a0":"code","e807b4a1":"code","a710a6fe":"code","a830b706":"code","ea3bf5d5":"code","36ad7ddc":"code","738445e7":"code","91991882":"code","c83a80b6":"code","f466c458":"code","be21820f":"code","78858caa":"code","18171926":"markdown","ab83d6f4":"markdown","619752fb":"markdown","883ccaf2":"markdown","c2b54248":"markdown","54abacb6":"markdown"},"source":{"a67b7b3a":"#import some libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn import metrics\nfrom sklearn.datasets import load_boston # load the dataset\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","673ff3e5":"#know about the dataset completely\n#first load ta datset and print its keys\nboston_dataset = load_boston()\nprint(\"keys:\",boston_dataset.keys())","cb9b3483":"#label values of the dateset\nprint(\"target:\",boston_dataset['target'][:5])","e480f6d7":"#print the shape of data\nprint(\"shape of data:\",boston_dataset['data'].shape) \n#display some data\nprint(\"Data:\\n\",boston_dataset['data'][:5])","cd793aef":"#features list, from which we are going to analysis and make model\nprint(\"features name:\", boston_dataset['feature_names'])\n#already described the short terms of the feature_names above.","802ffad7":"#above data is looked like messy enough\n#convert it to a dataframe for a better look\nboston_df = pd.DataFrame(boston_dataset['data'], columns=boston_dataset['feature_names'])\n#use display for the clear look\ndisplay(boston_df.head()) #head for upper five rows","852f3e64":"#add target data into the feature list\nboston_df['PRICE'] = boston_dataset.target\ndisplay(boston_df.head()) #head for upper five rows","590fb89e":"#statistics \nboston_df.describe()\n","726622ff":"#number of unique values\nboston_df.nunique()","edfc3df4":"#see if there is any null values and sum of these null values\nboston_df.isnull().sum()\n","07afecae":"#see rows with null values\nboston_df[boston_df.isnull().any(axis=1)]","a61d53bf":"#see correlation between the features\ncrtn = boston_df.corr()\nprint(crtn.shape)","fcba26a0":"#now see your data by plotting\nplt.figure(figsize=(10,10))\nsns.heatmap(crtn, square=True, fmt='.1f', annot=True, cmap='Blues')","e807b4a1":"#now split the dataset\n#import train_test_split to split the data\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(boston_dataset['data'], boston_dataset['target'], random_state=4) \nprint(\"X train Shape:\", X_train.shape) #shape of the training data which is 75%","a710a6fe":"#display the data by which we are gonna train the model\nprint(\"X train data:\\n\", X_train[:5])","a830b706":"#first train the model\nfrom sklearn.linear_model import LinearRegression\n\n#create a Linear Regression\nlr = LinearRegression()\n\n#use training set\nlr.fit(X_train, y_train)\n\n#find the value of b\nlr.intercept_","ea3bf5d5":"#see the coefficient values of X_train\ncodf = pd.DataFrame(X_train)\ncoeffcients = pd.DataFrame([codf.columns,lr.coef_]).T\ncoeffcients = coeffcients.rename(columns={0: 'Attribute', 1: 'Coefficients'})\ndisplay(coeffcients)","36ad7ddc":"#predict the model\nyprd = lr.predict(X_train)","738445e7":"#print the evaluations\nprint('R^2:',metrics.r2_score(y_train, yprd))\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(y_train, yprd))*(len(y_train)-1)\/(len(y_train)-X_train.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(y_train, yprd))\nprint('MSE:',metrics.mean_squared_error(y_train, yprd))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_train, yprd)))","91991882":"plt.scatter(y_train, yprd)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"Prices vs Predicted prices\")\nplt.show()","c83a80b6":"plt.scatter(yprd,y_train-yprd)\nplt.title(\"Predicted vs residuals\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Residuals\")\nplt.show()","f466c458":"sns.distplot(y_train-yprd)\nplt.title(\"Histogram of Residuals\")\nplt.xlabel(\"Residuals\")\nplt.ylabel(\"Frequency\")\nplt.show()","be21820f":"# Predicting Test data\ny_test_pred = lr.predict(X_test)","78858caa":"print('R^2:', metrics.r2_score(y_test, y_test_pred))\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(y_test, y_test_pred))*(len(y_test)-1)\/(len(y_test)-X_test.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(y_test, y_test_pred))\nprint('MSE:',metrics.mean_squared_error(y_test, y_test_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test, y_test_pred)))","18171926":"**Evaluate the model**","ab83d6f4":"<p align='justify'>We can devide supervised learning into two subcategories: Classification and regression.\n\nA regression problem is when the output variable is a real or continuous value, such as \u201csalary\u201d or \u201cweight\u201d. Many different models can be used, the simplest is the linear regression. It tries to fit data with the best hyper-plane which goes through the points.\n\nHere we are going to solve a famous regression learning problem by using linear regression model. <\/p>","619752fb":"Train the model","883ccaf2":"# **Example of supervised learning with linear regression**","c2b54248":"For test data","54abacb6":"The Boston Housing Dataset is a derived from information collected by the U.S. Census Service concerning housing in the area of [Boston MA](http:\/\/www.cs.toronto.edu\/~delve\/data\/boston\/bostonDetail.html). The following describes the dataset columns:\n\nCRIM - per capita crime rate by town\n\nZN - proportion of residential land zoned for lots over 25,000 sq.ft.\n\nINDUS - proportion of non-retail business acres per town.\n\nCHAS - Charles River dummy variable (1 if tract bounds river; 0 otherwise)\n\nNOX - nitric oxides concentration (parts per 10 million)\n\nRM - average number of rooms per dwelling\n\nAGE - proportion of owner-occupied units built prior to 1940\n\nDIS - weighted distances to five Boston employment centres\n\nRAD - index of accessibility to radial highways\n\nTAX - full-value property-tax rate per $10,000\n\nPTRATIO - pupil-teacher ratio by town\n\nB - 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n\nLSTAT - % lower status of the population\n\nMEDV - Median value of owner-occupied homes in $1000's"}}