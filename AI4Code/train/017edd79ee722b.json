{"cell_type":{"dd7482ae":"code","459201fe":"code","1b892532":"code","67b7a1e1":"code","e1654cad":"code","bf18331d":"code","88930de3":"markdown","5ee22ef7":"markdown","8d3caf4b":"markdown","d761d285":"markdown","56ef2aea":"markdown"},"source":{"dd7482ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# Any results you write to the current directory are saved as output.","459201fe":"import glob\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom keras.utils.np_utils import to_categorical\n\nimg_size = (224, 224)\nimg_array_list = []\ncls_list = []\n\nimg_list1 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class1\/*.png')\nfor i in img_list1:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(0)\n\nimg_list1 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class1_def\/*.png')\nfor i in img_list1:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(1)\n\nimg_list2 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class2\/*.png')\nfor i in img_list2:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(0)\n\nimg_list2 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class2_def\/*.png')\nfor i in img_list2:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(1)\n\nimg_list3 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class3\/*.png')\nfor i in img_list3:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(0)\n\nimg_list3 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class3_def\/*.png')\nfor i in img_list3:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(1)\n\nimg_list4 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class4\/*.png')\nfor i in img_list4:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(0)\n\nimg_list2 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class4_def\/*.png')\nfor i in img_list4:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(1)\n\nimg_list5 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class5\/*.png')\nfor i in img_list5:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(0)\n\nimg_list5 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class5_def\/*.png')\nfor i in img_list5:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(1)\n\nimg_list6 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class6\/*.png')\nfor i in img_list6:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(0)\n\nimg_list6 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class6_def\/*.png')\nfor i in img_list6:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(1)\n\nX_train = np.array(img_array_list)\ny_train = to_categorical(np.array(cls_list))\n","1b892532":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, BatchNormalization\nfrom tensorflow.keras.metrics import AUC\n\n\nmodel = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(img_size[0], img_size[1], 1)))\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(3, 3)))\nmodel.add(Dropout(rate=0.25))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(3, 3)))\nmodel.add(Dropout(rate=0.25))\n\nmodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(3, 3)))\nmodel.add(Dropout(rate=0.25))\n\nmodel.add(Conv2D(filters=256, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(3, 3)))\n\nmodel.add(BatchNormalization())\n\nmodel.add(Flatten())\nmodel.add(Dense(units=128, activation='relu'))\nmodel.add(Dropout(rate=0.5))\n\nmodel.add(Dense(units=2, activation='softmax'))\n\nauc = AUC()\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy', auc])\nmodel.summary()","67b7a1e1":"model.fit(X_train, y_train, epochs=50)","e1654cad":"import glob\nfrom keras.preprocessing.image import load_img, img_to_array\n\nimg_array_list = []\n\nimg_list = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/test\/*.png')\nimg_list.sort()\nfor i in img_list:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n\nX_test = np.array(img_array_list)","bf18331d":"predict = model.predict(X_test)[:, 1]\n\nsubmit = pd.read_csv('\/kaggle\/input\/1056lab-defect-detection-extra\/sampleSubmission.csv')\nsubmit['defect'] = predict\nsubmit.to_csv('submission.csv', index=False)","88930de3":"# \u4e88\u6e2c","5ee22ef7":"# \u8a13\u7df4\u30c7\u30fc\u30bf","8d3caf4b":"# \u5b66\u7fd2","d761d285":"# \u30e2\u30c7\u30eb","56ef2aea":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf"}}