{"cell_type":{"9ea306d3":"code","67925544":"code","29aaa783":"code","2df4f16c":"code","e7a3fcde":"code","1aaa76f8":"code","b5880970":"code","65bd6f70":"code","dd3387d3":"code","230f0a4f":"code","1a2fb2cd":"code","e7d66843":"code","3f4a91a5":"code","e7efb57a":"code","9e30bd39":"code","21944e79":"code","4802465e":"markdown","3d7234a2":"markdown","99b3b34b":"markdown"},"source":{"9ea306d3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report \n\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.under_sampling import RandomUnderSampler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\n\n\nimport warnings\nwith warnings.catch_warnings():\n    warnings.simplefilter(action='ignore', category=FutureWarning)","67925544":"X = pd.read_csv('\/kaggle\/input\/the-broken-machine\/xtrain.csv')\ny = pd.read_csv('\/kaggle\/input\/the-broken-machine\/ytrain.csv')","29aaa783":"X = X[:10000]\ny = y[:10000]","2df4f16c":"X_copy = X.copy()\ny['x'].replace({0: \"OK\", 1: \"FAIL\"},inplace=True)","e7a3fcde":"X_copy = X_copy.fillna(method='bfill').fillna(method='ffill')\nX_copy.head()","1aaa76f8":"X_train, X_test, y_train, y_test = train_test_split(X_copy, y, test_size=0.2, shuffle=True, random_state=1)","b5880970":"n_components = 10\n\npca = PCA(n_components=n_components)\npca.fit(X_train)\n\nX_train_reduced = pd.DataFrame(pca.transform(StandardScaler().fit_transform(X_train)), columns=[\"PC\" + str(i) for i in range(1, n_components + 1)])\nX_test_reduced = pd.DataFrame(pca.transform(StandardScaler().fit_transform(X_test)), columns=[\"PC\" + str(i) for i in range(1, n_components + 1)])","65bd6f70":"def evaluate_model(model, X_test, y_test):\n\n    acc = model.score(X_test, y_test)\n    print(\"Acc: {:.2f}%\".format(acc*100))\n\n    y_pred = model.predict(X_test) \n\n    cm = confusion_matrix(y_test, y_pred, labels=['OK','FAIL'])\n    clr = classification_report(y_test, y_pred, labels=['OK','FAIL'])\n    \n    plt.figure(figsize=(6, 6))\n    sns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='Blues', cbar=False)\n    plt.xticks(ticks=[0.5, 1.5], labels=[\"OK\", \"FAIL\"])\n    plt.yticks(ticks=[0.5, 1.5], labels=[\"OK\", \"FAIL\"])\n    plt.xlabel(\"Predict\")\n    plt.ylabel(\"Actual\")\n    plt.title(\"Confusion Matrix\")\n    plt.show()\n    \n    print(model,\"\\n\", clr)","dd3387d3":"y_train['x'].value_counts()","230f0a4f":"lr = LogisticRegression(max_iter=10000)\nlr.fit(X_train_reduced,y_train.values.ravel())\nevaluate_model(lr,X_test_reduced, y_test.values.ravel())\n\nxgb = XGBClassifier(gamma=0,eval_metric='error',n_estimators=100)\nxgb.fit(X_train_reduced,y_train.values.ravel())\nevaluate_model(xgb,X_test_reduced, y_test.values.ravel())","1a2fb2cd":"oversampler = RandomOverSampler(random_state=1)\nX_train_os, y_train_os = oversampler.fit_resample(X_train_reduced, y_train)","e7d66843":"y_train_os['x'].value_counts()","3f4a91a5":"lr.fit(X_train_os, y_train_os.values.ravel())\nevaluate_model(lr, X_test_reduced, y_test.values.ravel())\n\nxgb.fit(X_train_os, y_train_os.values.ravel())\nevaluate_model(xgb, X_test_reduced, y_test.values.ravel())","e7efb57a":"undersampler = RandomUnderSampler(random_state=1)\nX_train_us, y_train_us = undersampler.fit_resample(X_train_reduced, y_train)","9e30bd39":"y_train_us['x'].value_counts()","21944e79":"lr.fit(X_train_us, y_train_us.values.ravel())\nevaluate_model(lr, X_test_reduced, y_test.values.ravel())\n\nxgb.fit(X_train_us, y_train_us.values.ravel())\nevaluate_model(xgb, X_test_reduced, y_test.values.ravel())","4802465e":"## UnderSampling","3d7234a2":"## PCA","99b3b34b":"## OverSampling"}}