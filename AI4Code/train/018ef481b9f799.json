{"cell_type":{"0eba7fce":"code","6bb834eb":"code","63a88f77":"code","67b32164":"code","e7c91675":"code","5027c7cf":"code","770db865":"code","5f61c6e8":"code","2aaaf29e":"code","4c20a235":"code","39ffdf3e":"code","0b65f73b":"code","0073b7a9":"code","d36fcfd2":"code","da5f1823":"code","47cbe061":"code","d716604e":"code","458d5a41":"code","2c59053d":"code","7d9c887a":"code","16dafda1":"code","8af3e590":"code","006b7235":"markdown"},"source":{"0eba7fce":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\n%matplotlib inline","6bb834eb":"df_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")\ntr = pd.concat([df_train.drop(['Survived'],axis=1), df_test])\ntr.index = tr['PassengerId']\ntr.head()","63a88f77":"tr.columns","67b32164":"# Identify empty columns.\ntr[tr.columns[tr.isnull().any()]].isnull().sum()","e7c91675":"# Make a title.\ndef create_name_title(tr):\n    tr['NameTitle'] = tr['Name'].str.extract(r'([A-Za-z]+)\\.')\n    tr['NameTitle'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],\n                            'Rare',inplace=True)\n    tr['NameTitle'].replace(['Mlle', 'Ms', 'Mme'],\n                            ['Miss', 'Miss', 'Mrs'],inplace=True)\ncreate_name_title(df_train)\ncreate_name_title(tr)\ndf_train.groupby('NameTitle')['Survived'].agg([\"mean\", \"size\"])","5027c7cf":"# Fill the empty age.\ntr_age_mean = tr.groupby('NameTitle')['Age'].mean()\ntr_age_null = tr['Age'].isnull() \n\ntr_age_mean_1 = tr_age_mean[tr.loc[tr_age_null, 'NameTitle']]\ntr_age_mean_1.index = tr[tr_age_null].index\ntr_age_mean_1\ntr.loc[tr_age_null, 'Age'] = tr_age_mean_1\ntr[tr['Age'].isnull()]","770db865":"# Make age group features.\nband = [0,9,18,27,36,45,53,62,71,100]\ndf_train['AgeBand'] = pd.cut(df_train['Age'],band)\ntr['AgeBand'] = pd.cut(tr['Age'], band)\ndf_train.groupby('AgeBand')['Survived'].agg([\"mean\", \"size\"])","5f61c6e8":"# Fill the empty Fare.\ntr.loc[tr['Fare'].isnull(), 'Fare'] = tr.query('Age>60 & Pclass==3')['Fare'].mean()","2aaaf29e":"# Fill the empty Embarked.\ndisplay(tr.loc[tr['Embarked'].isnull()])     \ndisplay(tr.groupby(['Embarked']).apply(lambda x: pd.Series(dict(\n    p_1 = (x.Pclass == 1).sum(),\n    p_2 = (x.Pclass == 2).sum(),\n    p_3 = (x.Pclass == 3).sum(),\n    cabin = (x.Cabin == 'B28' ).sum(),\n    fare_down = (x.Fare < 80).sum(),\n    fare_up = (x.Fare > 80).sum(),\n    SibSp = (x.SibSp == 0).sum(),\n    Parch = (x.Parch == 0).sum()\n))))\ntr.loc[tr['Embarked'].isnull(), 'Embarked'] = 'S'    ","4c20a235":"# PCA Method\nfrom sklearn.decomposition import PCA\n\ndef dummy_to_pca(tr, column_name:str, features) :\n    max_seq = 300\n    max_d = 15\n    col_count = tr.groupby(column_name)[column_name].count()\n    if len(col_count) > max_seq:\n        tops = col_count.sort_values(ascending=False)[0:max_seq].index\n        f =tr.loc[tr[column_name].isin(tops)][['PassengerId', column_name]]\n    else:\n        tops = col_count.index\n        f =tr[['PassengerId', column_name]]\n    f = pd.get_dummies(f, columns=[column_name])  # This method performs One-hot-encoding\n    f = f.groupby('PassengerId').mean()\n    if len(tops) < max_d:\n        max_d = len(tops)\n    pca = PCA(n_components=max_d)\n    pca.fit(f)\n    cumsum = np.cumsum(pca.explained_variance_ratio_) #\ubd84\uc0b0\uc758 \uc124\uba85\ub7c9\uc744 \ub204\uc801\ud569\n    #print(cumsum)\n    num_d = np.argmax(cumsum >= 0.99) + 1 # \ubd84\uc0b0\uc758 \uc124\uba85\ub7c9\uc774 99%\uc774\uc0c1 \ub418\ub294 \ucc28\uc6d0\uc758 \uc218\n    if num_d == 1:\n        num_d = max_d\n    pca = PCA(n_components=num_d)    \n    result = pca.fit_transform(f)\n    result = pd.DataFrame(result)\n    result.columns = [column_name + '_' + str(column) for column in result.columns]\n    result.index = f.index\n    return pd.concat([features, result], axis=1, join_axes=[features.index])","39ffdf3e":"# Mean Encoding\ndef mean_encoding(tr, feature_name):\n    mean = df_train.groupby(feature_name)['Survived'].mean()\n    tr.loc[:,feature_name] = tr[feature_name].map(mean)\n    tr.loc[tr[feature_name].isnull(), feature_name] = df_train['Survived'].mean()\n    #print(tr[feature_name+'Mean'])","0b65f73b":"# Creates a ticket label variable.\ndef create_ticket_label(tr):\n    tr['TicketLabel'] = tr['Ticket'].str.extract(r'([A-Za-z0-9\/.]+) ')\n    tr['TicketLabel'] = tr['TicketLabel'].str.replace(\"\\.\", \"\")\n    tr['TicketLabel'] = tr['TicketLabel'].str.replace(\"\/\", \"\")\n    tr['TicketLabel'] = tr['TicketLabel'].str.upper()\n    tr['TicketLabel'].replace(['CASOTON','SCOW', 'AQ3', 'AQ4', 'SOP', 'STONOQ', 'STONO2', 'SCA3', 'A'],\n                               ['CA', 'SC', 'AQ', 'AQ', 'SOPP', 'SOTONOQ', 'SOTONO2', 'SC', 'A4'],inplace=True)\n    tr['TicketLabel'].fillna('NaN', inplace=True)\n\ncreate_ticket_label(df_train)\ncreate_ticket_label(tr)\ndf_train.groupby('TicketLabel')['Survived'].agg([\"mean\", \"size\"])","0073b7a9":"# Creates a ticket label variable.\ndef create_ticket_a(tr):\n    tr['TicketA'] = tr['TicketLabel'].str[:2]\n    tr['TicketA'].fillna('NaN', inplace=True)\ncreate_ticket_a(tr)\ncreate_ticket_a(df_train)\ndf_train.groupby('TicketA')['Survived'].agg([\"mean\", \"size\"])","d36fcfd2":"# Refine the Cabin variable.\ndef create_cabin_a(tr):\n    tr['CabinA'] = tr['Cabin'].str[:1]\n    tr['CabinB'] = tr['Cabin'].str[:2]\n    tr['CabinA'].fillna('NaN', inplace=True)\n    tr['CabinB'].fillna('NaN', inplace=True)\ncreate_cabin_a(tr)\ncreate_cabin_a(df_train)\ndf_train.groupby(['CabinA','CabinB'])['Survived'].agg([\"mean\", \"size\"])","da5f1823":"# Create a family number variable.\ndef create_family_size(tr):\n    tr['FamilySize'] = tr['SibSp'] + tr['Parch'] + 1\n    tr['IsAlone'] = tr['FamilySize'] == 1\ncreate_family_size(tr)\ncreate_family_size(df_train)\ndf_train.groupby('FamilySize')['Survived'].agg([\"mean\", \"size\"])\n#df_train.groupby('IsAlone')['Survived'].agg([\"mean\", \"size\"])","47cbe061":"# Create a feature for learning. : mean_encoding\nimport sklearn.preprocessing as pp\n\ndef get_features_mean():\n    f = tr[['PassengerId','Pclass','Age', 'SibSp', 'Parch', 'Fare', 'Embarked', \n            'FamilySize', 'IsAlone', 'NameTitle','CabinA', 'CabinB', 'AgeBand', \n            'Sex', 'TicketA', 'TicketLabel']]\n    f.index = f['PassengerId']\n    mean_encoding(f, 'Sex')\n    mean_encoding(f, 'IsAlone')\n    mean_encoding(f, 'AgeBand')\n    mean_encoding(f, 'Embarked')\n    mean_encoding(f, 'NameTitle')\n    mean_encoding(f, 'CabinA')\n    mean_encoding(f, 'CabinB')\n    mean_encoding(f, 'TicketA')\n    mean_encoding(f, 'TicketLabel')\n\n    scaler = pp.StandardScaler()\n    f = pd.DataFrame(scaler.fit_transform(f), columns=f.columns)\n    f['PassengerId'] = tr.index\n    #display(f.head())\n    return f    ","d716604e":"# Create a feature for learning. : PCA\nimport sklearn.preprocessing as pp\n\ndef get_features_pca():\n    f = tr[['PassengerId','Pclass','Age', 'SibSp', 'Parch', 'Fare', 'Embarked', \n            'FamilySize', 'IsAlone', 'NameTitle','CabinA', 'Sex', 'TicketA']]\n    f.index = f['PassengerId']\n\n    f = pd.get_dummies(f, columns=['Sex', 'IsAlone','Embarked', 'NameTitle', 'CabinA', 'TicketA'])\n    f = dummy_to_pca(tr, 'TicketLabel', f)\n    f = dummy_to_pca(tr, 'AgeBand', f) \n    f = dummy_to_pca(tr, 'CabinB', f) \n    #f.columns\n    scaler = pp.StandardScaler()\n    f = pd.DataFrame(scaler.fit_transform(f), columns=f.columns)\n    f['PassengerId'] = tr.index\n    #display(f.head())\n    return f","458d5a41":"# Save the result.\ndef split_train_data(f):\n    X_train = df_train[['PassengerId']]\n    X_train = pd.merge(X_train, f, how='left')\n    #display(X_train.head())\n    y_train = df_train.Survived\n\n    X_test = df_test[['PassengerId']]\n    X_test = pd.merge(X_test, f, how='left')\n    #display(X_test.tail())\n\n    X_train.drop(['PassengerId'], axis=1, inplace=True)\n    X_test.drop(['PassengerId'], axis=1, inplace=True)\n    return X_train, y_train, X_test","2c59053d":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nimport sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\n\ndef train(X_train, y_train):    \n    clf_mlp = MLPClassifier()\n    clf_xb = XGBClassifier()\n    clf_rf = RandomForestClassifier()\n    clfs = [\n        ('xgb', clf_xb),#0.8272\n        ('rf', clf_rf), #0.8284\n        ('mlp', clf_mlp),\n    ]\n    clf_eb = VotingClassifier(estimators=clfs, voting='soft')\n    parameters = {\n        'xgb__max_depth':[4], 'xgb__min_child_weight':[4], 'xgb__gamma':[0.2],\n        'xgb__subsample':[0.9], 'xgb__colsample_bytree':[0.84],\n        'xgb__reg_alpha':[0.01], 'xgb__learning_rate':[0.2], \n        \"rf__n_estimators\":[45], \"rf__max_depth\":[20], \"rf__min_samples_leaf\":[3],\n        'mlp__solver':['adam'], 'mlp__max_iter':[1000], 'mlp__early_stopping':[True], \n        'mlp__hidden_layer_sizes':[(128,64,32)],'mlp__activation':['logistic'],\n    }\n    clf = GridSearchCV(clf_eb, parameters, n_jobs=-1, cv=5)\n    clf.fit(X_train, y_train)\n    #print(clf.best_params_)\n    score = cross_val_score(clf, X_train, y_train, cv=5, scoring='accuracy')\n    print(\"Accuracy: %0.4f (+\/- %0.4f) [%s]\" % (score.mean(), score.std(), \"eb\"))\n    return score.mean(), clf","7d9c887a":"def create_data_n_train(data_type):\n    if (data_type == 'PCA'):\n        features = get_features_pca()\n    else:\n        features = get_features_mean()\n    X_train, y_train, X_test = split_train_data(features)\n    score, clf = train(X_train, y_train) \n    pred = clf.fit(X_train, y_train).predict(X_test)\n    return score, pred     ","16dafda1":"score_pca, pred_pca = create_data_n_train('PCA')\nscore_mean, pred_mean = create_data_n_train('MEAN')\nprint('PCA Score:', score_pca, ' Mean Encoding Score: ', score_mean)","8af3e590":"submission_pca = pd.concat([df_test['PassengerId'], pd.Series(pred_pca, name=\"Survived\")] ,axis=1)\nsubmission_pca.to_csv('submission_pca.csv', index=False)\n\nsubmission_mean = pd.concat([df_test['PassengerId'], pd.Series(pred_mean, name=\"Survived\")] ,axis=1)\nsubmission_mean.to_csv('submission_mean.csv', index=False)\n\ndisplay(submission_pca.head())\ndisplay(submission_mean.head())","006b7235":"## PCA vs mean encoding"}}