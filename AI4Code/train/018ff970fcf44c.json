{"cell_type":{"fcc8537f":"code","d3b11c8d":"code","2c33643d":"code","54e2867a":"code","21866eab":"code","f4b8be94":"code","d4f84e5a":"code","f076de59":"code","dcaed011":"code","88aafa4f":"code","13708000":"code","e0d6b722":"code","56fdd81f":"code","2d5afd1b":"code","f67deced":"code","4f3363d8":"code","97816f52":"code","31f2a5e6":"code","27b73bc2":"code","99290762":"code","876aa6c7":"code","f6038b6f":"code","75eb29e9":"code","f888c015":"code","5317dd1a":"code","d78828ff":"code","fee4ed87":"code","83c1da02":"code","f4cbdd5d":"code","783034d5":"code","fcf42639":"code","1d0001d9":"code","6601237e":"code","0d9fd2d8":"code","0eec590d":"code","f30cc43b":"code","76b91409":"code","01fccf53":"code","faeda95b":"code","cd6ff86e":"code","4d538ff3":"code","2c238f0e":"code","c8c3b049":"code","8796f950":"code","7d2d4bcf":"code","7a12a649":"code","50235fbc":"code","5a99d936":"code","9c7c70ac":"code","e0c21e29":"code","a01b9599":"code","a36f3712":"code","6c6192f6":"code","99e08465":"code","c94fb420":"code","bb93a674":"code","ec625a04":"code","3e0f5b68":"markdown","8dbc6395":"markdown","ff2b26ce":"markdown","17fa5fda":"markdown","089a06de":"markdown","c86683fb":"markdown","caed5573":"markdown","85c22538":"markdown","69a71b68":"markdown","523bb79a":"markdown","1774a5e9":"markdown","07e969ca":"markdown","707c3084":"markdown","ec511f53":"markdown","6671bdfc":"markdown","a9f69c81":"markdown","b943364e":"markdown","f1915d39":"markdown","c602d367":"markdown","18929833":"markdown","56c046a7":"markdown","e44e8b96":"markdown","e1790c47":"markdown","a102f1ec":"markdown","026dedff":"markdown","29c9bebe":"markdown","c90f9650":"markdown","2aef7f28":"markdown","d2b6e47f":"markdown","c97cea10":"markdown","3290517e":"markdown","4839605e":"markdown","fc7a5938":"markdown","2b17fe4f":"markdown","992b9fa0":"markdown","248b5e4c":"markdown","517abe4c":"markdown","bbeac1f4":"markdown"},"source":{"fcc8537f":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport networkx as nx\nimport seaborn as sns\nimport regex as re\nimport operator\nimport matplotlib.pyplot as plt\n# !apt-get install graphviz graphviz-dev\n# for graph visulization\n!conda install -y graphviz pygraphviz","d3b11c8d":"files = []\nimport os\nfor dirname, _, filenames in os.walk('..\/input\/caviar'):\n    for filename in filenames:\n        files.append(os.path.join(dirname, filename))        \nsorted(files)","2c33643d":"\nphases = {}\nG = {}\nfor idx, filename in enumerate(files): \n    index = int(re.findall('[0-9]+', filename)[0])\n    var_name = \"phase\" + str(index)\n    phases[index] = pd.read_csv(filename, index_col = 0)\n    phases[index].columns = \"n\" + phases[index].columns\n    phases[index].index = phases[index].columns\n    # create graph from pandas data frame \n    G[index] = nx.from_pandas_adjacency(phases[index])\n    G[index].name = var_name","54e2867a":"nodes = []\nedges = []\n\nfor index in range(1,12):\n    print(\"Phase {} has {} Nodes and {} Edges\".format(index, len(G[index].nodes), len(G[index].edges)))\n    nodes.append(len(G[index].nodes))\n    edges.append(len(G[index].edges))\n    ","21866eab":"x_axes = [1,2,3,4,5,6,7,8,9,10,11]\n# plot nodes vs phase\nsns.scatterplot(x_axes, nodes)","f4b8be94":"x_axes = [1,2,3,4,5,6,7,8,9,10,11]\n# plot nodes vs phase\nsns.scatterplot(x_axes, edges)","d4f84e5a":"nx.draw(G[1], pos=nx.drawing.nx_agraph.graphviz_layout(G[1]), with_labels=True)  \n","f076de59":"nx.draw(G[2], pos=nx.drawing.nx_agraph.graphviz_layout(G[2]), with_labels=True)  \n","dcaed011":"nx.draw(G[3], pos=nx.drawing.nx_agraph.graphviz_layout(G[3]), with_labels=True)  \n","88aafa4f":"nx.draw(G[4], pos=nx.drawing.nx_agraph.graphviz_layout(G[4]), with_labels=True)  \n","13708000":"nx.draw(G[5], pos=nx.drawing.nx_agraph.graphviz_layout(G[5]), with_labels=True)  \n","e0d6b722":"nx.draw(G[6], pos=nx.drawing.nx_agraph.graphviz_layout(G[6]), with_labels=True)  \n","56fdd81f":"nx.draw(G[7], pos=nx.drawing.nx_agraph.graphviz_layout(G[7]), with_labels=True)  \n","2d5afd1b":"nx.draw(G[8], pos=nx.drawing.nx_agraph.graphviz_layout(G[8]), with_labels=True)  \n","f67deced":"nx.draw(G[9], pos=nx.drawing.nx_agraph.graphviz_layout(G[9]), with_labels=True)  \n","4f3363d8":"nx.draw(G[10], pos=nx.drawing.nx_agraph.graphviz_layout(G[10]), with_labels=True)  \n","97816f52":"nx.draw(G[11], pos=nx.drawing.nx_agraph.graphviz_layout(G[11]), with_labels=True)  \n","31f2a5e6":"# we are more intrested in following the role of 23 of the players in the \u201cSerero organization\" \nsereno_organization_members = ['n1','n3','n86','n83','n85','n6','n11','n88','n106','n89',\n                                  'n84','n5','n8','n76','n77','n82','n87','n96','n12','n17',\n                                  'n80','n33','n16']","27b73bc2":"import collections\ndegreeCentrality = {}\nfor index in range(1,12):\n    name = 'phase'+str(index)\n    phaseCentrality = nx.degree_centrality(G[index])\n    degreeCentrality[name] = phaseCentrality\ndegreeCentralityDataFrame = pd.DataFrame.from_dict(degreeCentrality)\n\nsereno_degreeCentrality_df = degreeCentralityDataFrame.loc[sereno_organization_members]","99290762":"sereno_degreeCentrality_df\n","876aa6c7":"import collections\nbwCentrality = {}\nfor index in range(1,12):\n    name = 'phase'+str(index)\n    phaseCentrality = nx.betweenness_centrality(G[index], normalized=True)\n    bwCentrality[name] = phaseCentrality\nbwCentrality_df = pd.DataFrame.from_dict(bwCentrality)\n\nsereno_bwCentrality_df = bwCentrality_df.loc[sereno_organization_members]","f6038b6f":"sereno_bwCentrality_df","75eb29e9":"import collections\neigenCentrality = {}\nfor index in range(1,12):\n    name = 'phase'+str(index)\n    phaseCentrality = nx.eigenvector_centrality(G[index])\n    eigenCentrality[name] = phaseCentrality\neigenCentrality_df = pd.DataFrame.from_dict(eigenCentrality)\n\nsereno_eigenCentrality_df = eigenCentrality_df.loc[sereno_organization_members]","f888c015":"sereno_eigenCentrality_df","5317dd1a":"# dictionary of Node -> List[Centrality]\nnode_phase_degree_cetrality = dict()\n# get betweenness cetrality dictionary from dataframe\ndegree_centrality_dict = sereno_degreeCentrality_df.to_dict()\n# key is phase number value is phase statistics\nfor phase, phase_stat in degree_centrality_dict.items():\n    for node, centrality in phase_stat.items():\n        if node not in node_phase_degree_cetrality:\n            node_phase_degree_cetrality[node] = []\n        # replace NAN with 0\n        value = 0 if np.isnan(centrality) else centrality\n        node_phase_degree_cetrality[node].append(value)\n        \n# Get the Mean Node betweenness centrality for all the phase\nmean_node_degree_centrality = {}\nfor node, values in  node_phase_degree_cetrality.items():\n    mean_val = sum(values)\/11\n    mean_node_degree_centrality[node] = mean_val\n    \nmean_node_degree_centrality","d78828ff":"# dictionary of Node -> List[Centrality]\nnode_phase_bw_cetrality = dict()\n# get betweenness cetrality dictionary from dataframe\nbw_centrality_dict = sereno_bwCentrality_df.to_dict()\n# key is phase number value is phase statistics\nfor phase, phase_stat in bw_centrality_dict.items():\n    for node, centrality in phase_stat.items():\n        if node not in node_phase_bw_cetrality:\n            node_phase_bw_cetrality[node] = []\n        # replace NAN with 0\n        value = 0 if np.isnan(centrality) else centrality\n        node_phase_bw_cetrality[node].append(value)\n        \n# Get the Mean Node betweenness centrality for all the phase\nmean_node_bw_centrality = {}\nfor node, values in  node_phase_bw_cetrality.items():\n    mean_val = sum(values)\/11\n    mean_node_bw_centrality[node] = mean_val\n    \nmean_node_bw_centrality","fee4ed87":"# dictionary of Node -> List[Centrality]\nnode_phase_eigen_cetrality = dict()\n# get eigen vector cetrality dictionary from dataframe\nbw_eigen_dict = sereno_eigenCentrality_df.to_dict()\n# key is phase number value is phase statistics\nfor phase, phase_stat in bw_eigen_dict.items():\n    for node, centrality in phase_stat.items():\n        if node not in node_phase_eigen_cetrality:\n            node_phase_eigen_cetrality[node] = []\n        # replace NAN with 0\n        value = 0 if np.isnan(centrality) else centrality\n        node_phase_eigen_cetrality[node].append(value)\n        \n# Get the Mean Node eigen centrality for all the phase\nmean_node_eigen_centrality = {}\nfor node, values in  node_phase_eigen_cetrality.items():\n    mean_val = sum(values)\/11\n    mean_node_eigen_centrality[node] = mean_val\n    \nmean_node_eigen_centrality","83c1da02":"sereno_degreeCentrality_df","f4cbdd5d":"sereno_eigenCentrality_df","783034d5":"sereno_bwCentrality_df","fcf42639":"\ndef getTopKCentralNodes(  df, phase, k=5):\n    getPhaseSeries = df[phase]\n    series_d = getPhaseSeries.dropna().to_dict()\n    sorted_s =  sorted(series_d.items(), key=operator.itemgetter(1),reverse=True)\n    top_k_keys = [ (k,v) for (k,v) in sorted_s][:k]\n    return top_k_keys\n","1d0001d9":"# Top 5 Central Nodes in Phase 4 Based on Degree Centrality\nphase4_top5_central_degree = getTopKCentralNodes(df = sereno_degreeCentrality_df, phase = 'phase4', k=5 )\nprint(\"Top 5 Central Nodes in Phase 4 Based on Degree Centrality {} \".format(phase4_top5_central_degree))\n# Top 5 Central Nodes in Phase 5 Based on Degree Centrality\nphase5_top5_central_degree = getTopKCentralNodes(df = sereno_degreeCentrality_df, phase = 'phase5', k=5 )\nprint(\"Top 5 Central Nodes in Phase 5 Based on Degree Centrality {}\".format(phase5_top5_central_degree))","6601237e":"# Top 5 Central Nodes in Phase 4 Based on Betweenness Centrality\nphase4_top5_bw_degree = getTopKCentralNodes(df = sereno_bwCentrality_df, phase = 'phase4', k=5 )\nprint(\"Top 5 Central Nodes in Phase 4 Based on Betweenness Centrality {} \".format(phase4_top5_bw_degree))\n# Top 5 Central Nodes in Phase 5 Based on Betweenness Centrality\nphase5_top5_bw_degree = getTopKCentralNodes(df = sereno_bwCentrality_df, phase = 'phase5', k=5 )\nprint(\"Top 5 Central Nodes in Phase 5 Based on Betweenness Centrality {}\".format(phase5_top5_bw_degree))","0d9fd2d8":"# Top 5 Central Nodes in Phase 4 Based on Eigen Vector Centrality\nphase4_top5_central_eigen = getTopKCentralNodes(df = sereno_eigenCentrality_df, phase = 'phase4', k=5 )\nprint(\"Top 5 Central Nodes in Phase 4 Based on Eigen Vector Centrality {} \".format(phase4_top5_central_eigen))\n# Top 5 Central Nodes in Phase 5 Based on Eigen Vector Centrality\nphase5_top5_central_eigen = getTopKCentralNodes(df = sereno_eigenCentrality_df, phase = 'phase5', k=5 )\nprint(\"Top 5 Central Nodes in Phase 5 Based on Eigen Vector Centrality {}\".format(phase5_top5_central_eigen))","0eec590d":"# get Top 5 Most important person in network across all phase using degree centrality\ndegree_centrality_topK_phases ={}\nfor index in range(1,12):\n    name = \"phase\"+str(index)\n    top5_phase = getTopKCentralNodes(df = sereno_eigenCentrality_df, phase = name, k=5)\n    degree_centrality_topK_phases[name] =(top5_phase)","f30cc43b":"degree_centrality_topK_phases","76b91409":"# get Top 5 Most important person in network across all phase using betweenness centrality\nbw_centrality_topK_phases ={}\nfor index in range(1,12):\n    name = \"phase\"+str(index)\n    top5_phase = getTopKCentralNodes(df = sereno_bwCentrality_df, phase = name, k=5)\n    bw_centrality_topK_phases[name] =(top5_phase)","01fccf53":"bw_centrality_topK_phases","faeda95b":"# get Top 5 Most important person in network across all phase using eigen vector centrality\neigen_centrality_topK_phases ={}\nfor index in range(1,12):\n    name = \"phase\"+str(index)\n    top5_phase = getTopKCentralNodes(df = sereno_eigenCentrality_df, phase = name, k=5)\n    eigen_centrality_topK_phases[name] =(top5_phase)\n    \neigen_centrality_topK_phases","cd6ff86e":"# get All Members Name\nAllMembers_list = list()\nfor index in range(1,12):\n    AllMembers_list.extend(phases[index].index.tolist())\nallMembers_set = set(AllMembers_list)\nOtherMembers = allMembers_set.difference(sereno_organization_members)\n","4d538ff3":"OtherMembers_degree_centrality = degreeCentralityDataFrame.loc[OtherMembers]\nOtherMembers_degree_centrality","2c238f0e":"OtherMembers_bwCentrality_df = bwCentrality_df.loc[OtherMembers]\nOtherMembers_bwCentrality_df","c8c3b049":"OtherMembers_eigenCentrality_df = eigenCentrality_df.loc[OtherMembers]\nOtherMembers_eigenCentrality_df","8796f950":"# get Top 5 Most important person in network across all phase using degree  for other members of network\nother_degree_centrality_topK_phases ={}\nfor index in range(1,12):\n    name = \"phase\"+str(index)\n    top5_phase = getTopKCentralNodes(df = OtherMembers_degree_centrality, phase = name, k=3)\n    other_degree_centrality_topK_phases[name] =(top5_phase)\nother_degree_centrality_topK_phases","7d2d4bcf":"\n# get Top 5 Most important person in network across all phase using degree  for other members of network\nother_bw_centrality_topK_phases ={}\nfor index in range(1,12):\n    name = \"phase\"+str(index)\n    top5_phase = getTopKCentralNodes(df = OtherMembers_bwCentrality_df, phase = name, k=3)\n    other_bw_centrality_topK_phases[name] =(top5_phase)\nother_bw_centrality_topK_phases","7a12a649":"\n# get Top 5 Most important person in network across all phase using Eigen Centrality  for other members of network\n\nother_eigen_centrality_topK_phases ={}\nfor index in range(1,12):\n    name = \"phase\"+str(index)\n    top5_phase = getTopKCentralNodes(df = OtherMembers_eigenCentrality_df, phase = name, k=3)\n    other_eigen_centrality_topK_phases[name] =(top5_phase)\nother_eigen_centrality_topK_phases","50235fbc":"# dictionary of Node -> List[Centrality]\nother_node_phase_degree_cetrality = dict()\n# get degree cetrality dictionary from dataframe\ndegree_centrality_dict = OtherMembers_degree_centrality.to_dict()\n# key is phase number value is phase statistics\nfor phase, phase_stat in degree_centrality_dict.items():\n    for node, centrality in phase_stat.items():\n        if node not in other_node_phase_degree_cetrality:\n            other_node_phase_degree_cetrality[node] = []\n        # replace NAN with 0\n        value = 0 if np.isnan(centrality) else centrality\n        other_node_phase_degree_cetrality[node].append(value)\n        \n# Get the Mean Node betweenness centrality for all the phase\nmean_other_node_degree_centrality = {}\nfor node, values in  other_node_phase_degree_cetrality.items():\n    mean_val = sum(values)\/11\n    mean_other_node_degree_centrality[node] = mean_val\n    \n# Top 5 nodes\nsorted_s =  sorted(mean_other_node_degree_centrality.items(), key=operator.itemgetter(1),reverse=True)\ntop_k = [ (k,v) for (k,v) in sorted_s][:6]\ntop_k","5a99d936":"# dictionary of Node -> List[Centrality]\nother_node_phase_bw_cetrality = dict()\n# get betweenness cetrality dictionary from dataframe\nother_bw_centrality_dict = OtherMembers_bwCentrality_df.to_dict()\n# key is phase number value is phase statistics\nfor phase, phase_stat in other_bw_centrality_dict.items():\n    for node, centrality in phase_stat.items():\n        if node not in other_node_phase_bw_cetrality:\n            other_node_phase_bw_cetrality[node] = []\n        # replace NAN with 0\n        value = 0 if np.isnan(centrality) else centrality\n        other_node_phase_bw_cetrality[node].append(value)\n        \n# Get the Mean Node betweenness centrality for all the phase\nmean_other_node_bw_centrality = {}\nfor node, values in  other_node_phase_bw_cetrality.items():\n    mean_val = sum(values)\/11\n    mean_other_node_bw_centrality[node] = mean_val\n    \n\n    \n# Top 5 nodes\nsorted_s =  sorted(mean_other_node_bw_centrality.items(), key=operator.itemgetter(1),reverse=True)\ntop_k = [ (k,v) for (k,v) in sorted_s][:6]\ntop_k","9c7c70ac":"# dictionary of Node -> List[Centrality]\nother_node_phase_eigen_cetrality = dict()\n# get betweenness cetrality dictionary from dataframe\nother_eigen_centrality_dict = OtherMembers_eigenCentrality_df.to_dict()\n# key is phase number value is phase statistics\nfor phase, phase_stat in other_eigen_centrality_dict.items():\n    for node, centrality in phase_stat.items():\n        if node not in other_node_phase_eigen_cetrality:\n            other_node_phase_eigen_cetrality[node] = []\n        # replace NAN with 0\n        value = 0 if np.isnan(centrality) else centrality\n        other_node_phase_eigen_cetrality[node].append(value)\n        \n# Get the Mean Node betweenness centrality for all the phase\nmean_other_node_eigen_centrality = {}\nfor node, values in  other_node_phase_eigen_cetrality.items():\n    mean_val = sum(values)\/11\n    mean_other_node_eigen_centrality[node] = mean_val\n    \n\n    \n# Top 5 nodes\nsorted_s =  sorted(mean_other_node_eigen_centrality.items(), key=operator.itemgetter(1),reverse=True)\ntop_k = [ (k,v) for (k,v) in sorted_s][:6]\ntop_k","e0c21e29":"mean_other_node_eigen_centrality","a01b9599":"\nphases = {}\ndirected_G = {}\nfor idx, filename in enumerate(files): \n    index = int(re.findall('[0-9]+', filename)[0])\n    var_name = \"phase\" + str(index)\n    phases[index] = pd.read_csv(filename, index_col = 0)\n    phases[index].columns = \"n\" + phases[index].columns\n    phases[index].index = phases[index].columns\n    # create graph from pandas data frame \n    directed_G[index] = nx.from_pandas_adjacency(phases[index], create_using=nx.DiGraph())\n    G=directed_G[index].name = var_name","a36f3712":"phase_hub_authorities = {}\n\nfor index in range(1,12):\n    phase_hub_authorities[index] = nx.algorithms.link_analysis.hits(directed_G[index], max_iter=1000000)\n    \n","6c6192f6":"n1_n3_results = {}\n\nfor index in range(1,12):\n    phase_hubs, phase_authorities = phase_hub_authorities[index]\n    result_hubs = {}\n    result_authorities = {}\n    result_hubs['n1'] = phase_hubs['n1']\n    result_hubs['n3'] = phase_hubs['n3']\n    result_authorities['n1'] = phase_authorities['n1']\n    result_authorities['n3'] = phase_authorities['n3']\n    n1_n3_results[index]=((result_hubs, result_authorities))\n    ","99e08465":"n1_n3_results","c94fb420":"directed_G[1].in_degree(), directed_G[1].out_degree()","bb93a674":"for index in range(1,12):\n    x,y = directed_G[index].in_degree(), directed_G[index].out_degree()\n    print(\"Phase\", index)\n    print(\"Indegree\",x)\n    print(\"\\n\")\n    print(\"OutDegree\",y)\n    print(\"*\"*50)\n    \n    ","ec625a04":"directed_G[1].in_degree(), directed_G[1].out_degree()","3e0f5b68":"### Find the First Majore event happened in investigation\n1. We know that First Major Event Happened in Phase 4. If we want to know the effect of Phase 4 Event then we should analyse how Graph changes in Phase 5 because of preceding event in Phase4. \n2. We will plot Phase 4 and Phase 5 graph and study how the centrality of each actor changes in Phase 4 and Phase 5. \n3. We can investigate if new actor emerges or roles of current actor changes or not.\n\n","8dbc6395":"### Phase 8","ff2b26ce":"## Centrality Measure of All 23 Selected Members of Sereno Organization","17fa5fda":"![images_networks_hw_evolution-min.jpg](attachment:8976c06c-4c2b-4cb0-bded-707ea7c446f5.jpg)\n\nX = 4 in above graph","089a06de":"### Phase 6","c86683fb":"# Introduction and Motivation\n","caed5573":"### temporal evolution of the networks\n\n1. we will determine the temporal consistency of a player's centrality , i.e. which players consistently remained active and central throughout most of the phases and which didn't?\n\n2. To answer this question, we will look at the temporal evolution of the networks and calculate the mean centrality for each of the centrality metrics, across all phases, for every player.\n\n3. **As every actor might not be present in every phase, we will attach a centrality of zero (0) to an actor for the phases in which they are not present, before calculating these statistics, so that we take a mean over all 11 phases for all actors.**\n\n","85c22538":" $\\displaystyle \\tilde{B}_ i$ = $\\frac{2}{(n-1)(n-2)}$ $\\sum _{s\\neq i\\neq t}$ $\\frac{n^ i_{st}}{g_{st}}$\n \n where $n^ i_{st}$ is the number of shortest paths between s and t that pass through i and $g_{st}$ is the total number of shortest paths between s and t. Note that this considers both orderings of each pair of nodes, so for undirected graphs, a path counts twice (as it counts both for $n^ i_{st}$ and for $n^ i_{ts}$).","69a71b68":"### evolution of the number of node and number of edges over time, from phase 1 to 11.","523bb79a":"**2. Betweenness Centrality**","1774a5e9":"### Phase 10","07e969ca":"### Phase 5","707c3084":"# Graph Visualization\n","ec511f53":"### Phase 2","6671bdfc":"    1. Degree Centrality Top 5 actor Phase 4 : ['n1', 'n3', 'n83', 'n89', 'n85'] \n\n    2. Degree Centrality Top 5 Actor Phase 5 : ['n1', 'n12', 'n3', 'n85', 'n89']\n\n\n\n    3. Betweenness Centrality Top 5 actor Phase 4 :['n1', 'n89', 'n3', 'n83', 'n8']  \n\n    4. Betweenness Centrality Top 5 Actor Phase 5 : ['n1', 'n12', 'n83', 'n85', 'n89']\n\n\n    5. Eigen Vector Centrality Top 5 Actors Phase 4 : ['n1', 'n3', 'n83', 'n85', 'n8'] \n\n    6. Eigen Vector Centrality Top5 Actors Phase 5 : ['n1', 'n12', 'n3', 'n85', 'n89']","a9f69c81":"### Mean Eigen-Vector Centrality across all phases for all players","b943364e":"### Mean Betweeness Centrality across all phases for all players","f1915d39":"### Phase 7","c602d367":"### Future Work\n\n1. The change in the network from Phase X to X+1 coincides with a major event that took place during the actual investigation.we will Identify the event and explain how the change in centrality rankings and visual patterns. [Done]\n2. While centrality helps explain the evolution of every player's role individually, we need to explore the global trends and incidents in the story in order to understand the behavior of the criminal enterprise.\n3. Identify important actor other than sereno members ( Important network other than 23 mentioned in above analysis.)\n4. If we were to study the directed version of the graph, instead of the undirected, what would we learn from comparing the in-degree and out-degree centralities of each actor? Similarly, what would we learn from the left- and right-eigenvector centralities, respectively?\n5. how the relationship between n1 and n3 evolves over the phases.\n\n### Other Ambitious and proabably open ended questions\n\n1. Would you consider that the particular strategy adopted by the police had an impact on the criminal network throughout the different phases of the investigation? What kind of impact?\n\n2. What would have happened if the police had arrested players that they had already identified, and this at each phase? Do you think they would have managed to arrest as many players as they did in the end? If you were responsible for the criminal investigation, what would have been your strategy?\n\n3. Would you say your strategy is ethical? Does it only involve the local police or does it require the help from other agents? What are the implications of your strategy in terms of international policing cooperation?\n\n4. Some ethical considerations around the potential side effects of your strategy could include the following: displacement of traffic and sudden increase of criminal activity\/chaos in another geographical area (locally, country-wide, or internationally), responsibility of a detective\/investigator towards the unrest\/chaos he\/she can create in another community etc.","18929833":"**Degree Centrality**\n\n \n  $\\displaystyle \\tilde{k}_ i\\displaystyle = \\frac{k_ i}{n-1}$\n\nwhere k_ i is the degree of node i and n is the number of nodes in the graph.","56c046a7":"### Phase 9","e44e8b96":"### Mean Eigen Vector Centrality For other members","e1790c47":"### Mean Degree Centrality across all phases for each player","a102f1ec":"### Mean Degree Centrality For other members","026dedff":"### Directed Version","29c9bebe":"This case offers a rare opportunity to study a criminal network in upheaval from police forces. This allows us to analyze changes in the network structure and to survey the reaction and adaptation of the participants while they were subjected to an increasing number of distressing constraints.\n\nThe network consists of 110 (numbered) players. Players 1-82 are the traffickers. Players 83-110 are the non-traffickers (financial investors; accountants; owners of various importation businesses, etc.). Initially, the investigation targeted Daniel Serero, the alleged mastermind of a drug network in downtown Montr\u00e9al, who attempted to import marijuana to Canada from Morocco, transiting through Spain. After the first seizure, happening in Phase 4, traffickers reoriented to cocaine import from Colombia, transiting through the United States.\n\nAccording to the police, the role of 23 of the players in the \u201cSerero organization\" are the following, listed by name (unique id):\n\nDaniel Serero (n1) : Mastermind of the network.\n\nPierre Perlini (n3) : Principal lieutenant of Serero, he executes Serero's instructions.\n\nAlain (n83) and G\u00e9rard (n86) Levy : Investors and transporters of money.\n\nWallace Lee (n85) : Takes care of financial affairs (accountant).\n\nGaspard Lino (n6): Broker in Spain.\n\nSamir Rabbat (n11): Provider in Morocco.\n\nLee Gilbert (n88): Trusted man of Wallace Lee (became an informer after the arrest).\n\nBeverly Ashton (n106): Spouse of Lino, transports money and documents.\n\nAntonio Iannacci (n89): Investor.\n\nMohammed Echouafni (n84): Moroccan investor.\n\nRichard Gleeson (n5), Bruno de Quinzio (n8) and Gabrielle Casale (n76) : Charged with recuperating the marijuana.\n\nRoderik Janouska (n77): Individual with airport contacts.\n\nPatrick Lee (n87): Investor.\n\nSalvatore Panetta (n82): Transport arrangements manager.\n\nSteve Cunha (n96): Transport manager, owner of a legitimate import company (became an informer after the arrest).\n\nErnesto Morales :(n12) Principal organizer of the cocaine import, intermediary between the Colombians and the Serero organization.\n\nOscar Nieri (n17): The handyman of Morales.\n\nRichard Brebner (n80): Was transporting the cocaine from the US to Montr\u00e9al.\n\nRicardo Negrinotti (n33): Was taking possession of the cocaine in the US to hand it to Brebner.\n\nJohnny Pacheco (n16): Cocaine provider.\n\nIn the data files (phase1.csv, phase2.csv, ), we will find matrices that report the number of wiretapped correspondences between the above players in the network, where players are identified by their unique id. we will be analyzing this time-varying network, giving a rough sketch of its shape, its evolution and the role of the actors in it.","c90f9650":"We will study a time-varying criminal network that is repeatedly disturbed by police forces. Data for this problem can be found in Caviar Directory.\n\nThe CAVIAR investigation lasted two years and ran from 1994 to 1996. The operation brought together investigation units of the Montr\u00e9al police and the Royal Canadian Mounted Police of Canada. During this two year period, 11 wiretap warrants, valid for a period of about two months each, were obtained (the 11 matrices contained in phase1.csv, phase2.csv,  correspond to these eleven, two month wiretap phases).\n\nThis case is interesting because, unlike other investigative strategies, the mandate of the CAVIAR project was to seize the drugs without arresting the perpetrators. During this period, imports of the trafficking network were hit by the police on eleven occasions.\n\n**The arrests took place only at the end of the investigation.** Monetary losses for traffickers were estimated at **32 million dollars.** Eleven seizures took place throughout the investigation. **Some phases included no seizures, and others included multiple**. The following summarizes the  seizures:\n\n<table class=\"tabular\" cellspacing=\"0\" style=\"table-layout:auto\">\n\n<tbody>\n\n<tr>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">Phase 4<\/td>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">1 seizure<\/td>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">$2,500,000<\/td>\n\n<td style=\"text-align:left; border:none\">300 kg of marijuana<\/td>\n\n<\/tr>\n\n<tr>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">Phase 6<\/td>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">3 seizures<\/td>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">$1,300,000<\/td>\n\n<td style=\"text-align:left; border:none\">2 x 15 kg of marijuana + 1 x 2 kg of cocaine<\/td>\n\n<\/tr>\n\n<tr>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">Phase 7<\/td>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">1 seizure<\/td>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">$3,500,000<\/td>\n\n<td style=\"text-align:left; border:none\">401 kg of marijuana<\/td>\n\n<\/tr>\n\n<tr>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">Phase 8<\/td>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">1 seizure<\/td>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">$360,000<\/td>\n\n<td style=\"text-align:left; border:none\">9 kg of cocaine<\/td>\n\n<\/tr>\n\n<tr>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">Phase 9<\/td>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">2 seizures<\/td>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">$4,300,000<\/td>\n\n<td style=\"text-align:left; border:none\">2 kg of cocaine + 1 x 500 kg marijuana<\/td>\n\n<\/tr>\n\n<tr>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">Phase 10<\/td>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">1 seizure<\/td>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">$18,700,000<\/td>\n\n<td style=\"text-align:left; border:none\">2200 kg of marijuana<\/td>\n\n<\/tr>\n\n<tr>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">Phase 11<\/td>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">2 seizures<\/td>\n\n<td style=\"text-align:left; border-right:1px solid black; border:none\">$1,300,000<\/td>\n\n<td style=\"text-align:left; border:none\">12 kg of cocaine + 11 kg of cocaine<\/td>\n\n<\/tr>\n\n<\/tbody>\n\n<\/table>","2aef7f28":"### Phase 11\n","d2b6e47f":"### Conclusion \n\n1. First Majore event happened in Phase 4, first seizure, happened in Phase 4. This forced the  traffickers reoriented to cocaine import from Colombia, transiting through the United States.\n2. Direct effect of this is that new sub network emerge in network that facilitate cocaine import operation in Phase 5 ( Node n12 and it's connection)\n3. This inference is supported by how the node influence is changed during Phase 4 and Phase 5. We can clearly see from the Centrality measures that n12 is important node that emerges in Phase 5.","c97cea10":"**3. Eigen Vector Centrality**","3290517e":"### Phase 4","4839605e":"# Centrality Measures\n1. Degree Centrality\n2. Betweenness Centrality \n3. Eigen Vector Centrality","fc7a5938":"### Phase 1","2b17fe4f":"### Mean Betweenness Centrality For other members","992b9fa0":"## Load Dataset\n","248b5e4c":"### Analysis of Members outside Sereno Organization","517abe4c":"### Hub and Authorities of All the actor across all phases","bbeac1f4":"### Phase 3"}}