{"cell_type":{"24ee5878":"code","244f6ab1":"code","3328aa45":"code","6c264b0d":"code","a0685ac3":"code","42e5993e":"code","544caa83":"markdown","b43c0937":"markdown"},"source":{"24ee5878":"#headers initialization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense","244f6ab1":"import os\n#path for train and test dataset\nTrain_path = '..\/input\/dataset\/dataset\/training_set'\nTest_path = '..\/input\/dataset\/dataset\/test_set'","3328aa45":"# Initialising the CNN\nclassifier = Sequential()\n\n# Step 1 - Convolution\nclassifier.add(Convolution2D(32, 3, 3, input_shape = (64, 64, 3), activation = 'relu'))\n\n# Step 2 - Pooling\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\n\n# Adding a second convolutional layer\nclassifier.add(Convolution2D(32, 3, 3, activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\n\n# Step 3 - Flattening\nclassifier.add(Flatten())\n\n# Step 4 - Full connection\nclassifier.add(Dense(output_dim = 128, activation = 'relu'))\nclassifier.add(Dense(output_dim = 1, activation = 'sigmoid'))","6c264b0d":"# Compiling the CNN\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","a0685ac3":"#Fitting the CNN to the images\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntraining_set = train_datagen.flow_from_directory(Train_path,\n                                                 target_size = (64, 64),\n                                                 batch_size = 32,\n                                                 class_mode = 'binary')\n\ntest_set = test_datagen.flow_from_directory(Test_path,\n                                            target_size = (64, 64),\n                                            batch_size = 32,\n                                            class_mode = 'binary')","42e5993e":"classifier.fit_generator(training_set,\n                         samples_per_epoch = 8000,\n                         nb_epoch = 1,            #increase number of epochs\n                         validation_data = test_set,\n                         nb_val_samples = 2000)","544caa83":"# **Convolutional Nural Network Using Keras**\nThrough this kernal I would like to show how CCN works and its implimentaion in Keras","b43c0937":"\n CNN was one of the giant steps towards perfect Computer Vision\/AI. It was initiated by [Yann LeCun, Patrick Haffner, L\u00e9eon Bottou, and Yoshua Bengio](http:\/\/http:\/\/yann.lecun.com\/exdb\/publis\/pdf\/lecun-01a.pdf). Initial Images where fed to Deep Neural Networks directly. This caused many problems like high computational intensity due to the high dimensionality of input images (256x256x3 image will have 196608 number of dimensions\/inputs). also, DNN was less accurate. Consider the image given below.\n![](https:\/\/res.mdpi.com\/entropy\/entropy-19-00242\/article_deploy\/html\/images\/entropy-19-00242-g001.png)\n\nThis image represents full steps of CNN.\n1. ** Convolution + RELU**\nConvolution is the process of adding each element of the image to its local neighbors, weighted by the kernel. This is related to a form of mathematical convolution. It should be noted that the matrix operation being performed - convolution - is not traditional matrix multiplication. A kernel, convolution matrix, or mask is a small matrix. It is used for blurring, sharpening, embossing, edge detection, and more. This is accomplished by doing a convolution between a kernel and an image.\nRELU-Rectified Linear Unit is an activation function which is used along with it and its simply an operation which converts -ve values into zeros and keeps +ve values as it is\n[](https:\/\/cdn.tinymind.com\/static\/img\/learn\/relu.png)\n2. ** Pooling**\nPooling is an operation of feature extraction and dimensionality reduction. It will extract the features from the given images region of interests by doing non-linear down-sampling.\nIt can be max Pool\/min pool. Example of a max pool is given below\n![](http:\/\/cs231n.github.io\/assets\/cnn\/maxpool.jpeg)\n\nThe above two steps repeated multiple times depending on architecture. The more convolution&pooling you do the bigger and depth feature will be taken into consideration.\n3. ** Fully Connected Layer \/ Dense Layer**\n   This is a set of a layer of fully connected DNN to process and get trained weights.This layer is followed by the output layer"}}