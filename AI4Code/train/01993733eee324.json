{"cell_type":{"e7a37081":"code","62f38be4":"code","33290a42":"code","aa1d3cd2":"code","dd7c1be3":"code","8b4c1998":"code","2fbda0aa":"code","890e8516":"code","19961c65":"code","f97b329d":"code","a0391618":"code","b273fb56":"code","8405ac41":"code","38252d03":"markdown","39f4f79b":"markdown","8ed73a81":"markdown","835727c4":"markdown","efdd1860":"markdown","b0ad264c":"markdown","b79fc457":"markdown","69e5bb52":"markdown"},"source":{"e7a37081":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","62f38be4":"\ndef tup_\u00f6rnek():\n    t=(1,2,3)\n    return t\n#print(tup_\u00f6rnek())\na,b,c=tup_\u00f6rnek()\n#print(a)  --> result: \"1\"\n\n#print(a,b,c)  --> result : 1 2 3\n","33290a42":"glob_var=2\ndef func():\n    loc_var=3\n    return loc_var\n    \nprint(glob_var)  #-->global \nprint(func())  #--> local","aa1d3cd2":"x=\"hello\"\nprint(len(x))  # len(),print() : build scope\n","dd7c1be3":"def firstfunc():\n    x=\"world\"\n    def secondfunc():\n        y=\"hello\"\n        return y\n    return secondfunc()+\" \"+x\nprint(firstfunc())\n\n#function inside function.","8b4c1998":"#***** DEFAULT FUNCTION*****\ndef default_func(x,y=10,z=20):\n    z=x+y+z\n    return z\nprint(\"DEFAULT FUNCTION:\")\nprint(default_func(5))\n\n\n#*****FLEXIBLE ARGUMENTS(args)*****\ndef flex_func(*args):\n    for i in args:\n        print(i)\nprint(\"FLEXIBLE ARGS:\")\nprint(flex_func(5,10,15))\n\n\n#----- (*kwargs)---------\ndef kwargs_fuc(**kwargs):\n    for i,j in kwargs.items():\n        print(i,\"\",j)\nprint(\"KWARGS :\")\nkwargs_fuc(a='aa',b='bb')\n        \n    ","2fbda0aa":"top=0\nfor i in range(5):\n    top+=i\nprint(top)\n    \n#***lambda function *******\n\nlambda_func=lambda x:x+x\nprint(lambda_func(5))","890e8516":"x=[1,2,3]\nanonymous_func=map(lambda x:x+2,x)\nprint(list(anonymous_func))","19961c65":"a=[1,2,3]\nb=[4,5,6]\n\nc=zip(a,b)\nprint(type(c)) \nzip_list=list(c)\nprint(zip_list)\n\n\n#un_zip()\n\nun_zip=zip(*zip_list)\nfirst_list,second_list=list(un_zip)\nprint(first_list)\nprint(second_list)\n","f97b329d":"#Example 1\nlist1=[5,10,15]\na=[i+1for i in list1]\nprint(a)","a0391618":"#Example 2\n\nlist2=[5,10,15,20,25,30]\nb=[print(str(i)+\" Even number\")if i%2==0 else print(str(i)+\" Odd number\") for i in list2]","b273fb56":"data=pd.read_csv(\"..\/input\/the-movies-dataset\/movies_metadata.csv\")\ndata.head(5)","8405ac41":"x=data.vote_count[:10]\ny=[print(i) if i>150else print(\"k\u00fc\u00e7\u00fck\") for i in x]","38252d03":" ANONYMOUS FUNCT\u0130ON\n* map() function","39f4f79b":"DEFAULT AND FLEXIBLE ARGUMENTS","8ed73a81":"NESTED FUNCT\u0130ON\n","835727c4":"zip() function","efdd1860":"LAMBDA FUNTCTION\n","b0ad264c":"LIST COMPREHENS\u0130ON","b79fc457":"SCOPE\n* GLOBAL\n* LOCAL\n* BUILD IN SCOPE","69e5bb52":"**Build scope: are defined functions in python.\nFor example;**"}}