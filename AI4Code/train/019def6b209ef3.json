{"cell_type":{"0e0928a4":"code","a4c64fa3":"code","70fb98ea":"code","59ed5199":"code","2c4725ed":"code","566080c1":"code","1ab9c1be":"code","83aa5559":"code","e0b67987":"code","5da7e0fa":"code","3ab161c6":"code","2a6ec8f1":"code","b9086791":"code","8904e67d":"code","1cd63c87":"code","fa799e93":"code","196a8100":"code","0851786d":"code","f4ec0e87":"code","7bc0d21d":"code","a845960c":"code","1795663b":"code","202a9b4c":"code","132047ee":"code","31ace951":"code","073561da":"code","afe10ff9":"code","54c9e232":"code","7e5fda4b":"code","efd9fe52":"code","a75082e1":"code","3210b3b7":"code","7b2cacb5":"code","dd564a8e":"code","c411267f":"code","15d22cc1":"code","d1952f79":"code","56e49555":"code","e21b40e6":"code","19c7b733":"code","3313521b":"code","d354bd6d":"code","df96ad1a":"code","b32f15ae":"code","c30eb394":"code","e1d4f3fb":"code","bb2f5690":"code","d48a031e":"code","d438d62f":"code","d754134a":"code","5296e763":"code","8113031f":"code","cde3d21b":"code","f97bd642":"code","7197a8c9":"code","3526358a":"code","2a8c4393":"code","e257d301":"code","8832ca11":"code","b679ef7d":"code","55850a60":"code","09e9189b":"code","4bb2ac8f":"code","31810253":"code","33df6c29":"code","5df3d8e0":"code","d2ce48c6":"code","c93ea34e":"code","192d40e9":"code","34e62005":"code","12283c9d":"code","e3a7ad90":"code","3c6e81b2":"code","bf330cd4":"code","079e8207":"code","0b37434b":"code","ac4209be":"code","c62f46a6":"code","8b0ae9cf":"code","6617058f":"code","94f84e7f":"code","218cd0e3":"code","7713e26b":"code","22384db7":"code","a8ce920a":"code","e3ae86a2":"code","d2a2a7b5":"code","b7e2dcda":"code","b0a1eeb5":"code","4c1c03c4":"code","a3942126":"code","6e5a7a50":"code","da6841a9":"code","40d0bdec":"code","eb45ea4c":"code","35b4e13b":"code","906feb1c":"code","0b9b7169":"code","e04e4c0a":"code","ea078a60":"code","d0e99910":"code","0ea0812b":"code","b714083b":"code","b6621564":"code","ed610044":"code","fe332fbe":"code","f1dd7e8f":"code","e60afd25":"code","c568dea4":"code","101be097":"code","69d48568":"code","6e0e14a8":"code","1d683d60":"code","2267f455":"code","2d5a0414":"code","1cd26b51":"code","0966a7b9":"code","b99fe81b":"code","24d87cf1":"code","3727baba":"code","592e9110":"markdown","13f712e7":"markdown","6135860b":"markdown","75bbe8e1":"markdown","7980365b":"markdown","659095fc":"markdown","1d3bdf6a":"markdown","4808760a":"markdown","3e969786":"markdown","af8450e2":"markdown","39b2a29d":"markdown","36ce402a":"markdown","05013dcf":"markdown","35ebc957":"markdown","40f7701b":"markdown","d93de88a":"markdown","5b007b36":"markdown","46b815c7":"markdown","22f5c920":"markdown","d81eace9":"markdown","884f92f0":"markdown","dbf43467":"markdown","3920618f":"markdown","a798b48b":"markdown","d979734e":"markdown","ab152a4c":"markdown","811c0fef":"markdown","e1d750b6":"markdown","e6fec3fa":"markdown","52b87975":"markdown","25559ff3":"markdown"},"source":{"0e0928a4":"# data analysis libraries:\nimport numpy as np\nimport pandas as pd\n\n# data visualization libraries:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# to ignore warnings:\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# to display all columns:\npd.set_option('display.max_columns', None)\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV","a4c64fa3":"pwd","70fb98ea":"# Read train and test data with pd.read_csv():\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n","59ed5199":"# copy data in order to avoid any change in the original:\ndf_train=train_data.copy()\ndf_test=test_data.copy()","2c4725ed":"df_train.head()","566080c1":"df_test.head()","1ab9c1be":"df_train.info()","83aa5559":"df_test.info()","e0b67987":"df_test.info()","5da7e0fa":"df_train.describe().T","3ab161c6":"df_train['Pclass'].value_counts()","2a6ec8f1":"df_train[\"Sex\"].value_counts()","b9086791":"df_train[\"SibSp\"].value_counts()","8904e67d":"df_train[\"Parch\"].value_counts()","1cd63c87":"df_train[\"Ticket\"].value_counts()","fa799e93":"df_train[\"Cabin\"].value_counts()","196a8100":"df_train[\"Embarked\"].value_counts()","0851786d":"sns.barplot(x=\"Pclass\",y=\"Survived\", data=df_train) ;","f4ec0e87":"sns.barplot(x=\"SibSp\", y=\"Survived\" , data= df_train);","7bc0d21d":"sns.barplot(x= \"Parch\" , y=\"Survived\", data=df_train);","a845960c":"sns.barplot(x=\"Sex\",y=\"Survived\" , data= df_train);","1795663b":"df_train.info()","202a9b4c":"Age_visualization=df_train[\"Age\"].dropna()","132047ee":"sns.distplot(Age_visualization, kde = False);","31ace951":"sns.kdeplot(df_train[\"Fare\"], shade = True);","073561da":"(sns\n .FacetGrid(df_train,\n                hue = \"Survived\",\n                height = 6,\n                xlim = (0, 500))\n .map(sns.kdeplot, \"Fare\", shade= True)\n .add_legend()\n);","afe10ff9":"(sns\n .FacetGrid(df_train,\n                  hue = \"Survived\",\n                  height = 5,\n                  xlim = (0, 90))\n .map(sns.kdeplot, \"Age\", shade= True)\n .add_legend()\n);","54c9e232":"df_train.head()","7e5fda4b":"df_train= df_train.drop(\"Ticket\", axis=1)\ndf_test=df_test.drop(\"Ticket\", axis=1)\ndf_train.head()\n","efd9fe52":"df_train.describe().T","a75082e1":"sns.boxplot(x=df_train[\"Fare\"]);","3210b3b7":"Q1= df_train[\"Fare\"].quantile(0.25)\nQ3= df_train[\"Fare\"].quantile(0.75)\nIQR=Q3-Q1\n\nlower_limit=Q1-1.5*IQR\nupper_limit=Q3+1.5*IQR\nupper_limit","7b2cacb5":"df_test.isnull().sum()","dd564a8e":"df_train.sort_values(\"Fare\", ascending=False).head(40)","c411267f":"df_train_Fare=df_train[\"Fare\"]","15d22cc1":"df_test_Fare=df_test[\"Fare\"]","d1952f79":"upper_fare=263","56e49555":"aykiri_df_train = (df_train_Fare>upper_fare)","e21b40e6":"aykiri_df_test = (df_test_Fare> upper_fare)\n","19c7b733":"df_train_Fare[aykiri_df_train] = upper_fare","3313521b":"df_train[\"Fare\"]=df_train_Fare","d354bd6d":"df_test_Fare[aykiri_df_test] = upper_fare","df96ad1a":"df_test[df_test[\"PassengerId\"]==1044]","b32f15ae":"df_train.sort_values(\"Fare\", ascending=False).head(20)","c30eb394":"df_test.sort_values(\"Fare\", ascending=False).head(10)","e1d4f3fb":"df_train.isnull().sum()","bb2f5690":"df_test.isnull().sum()","d48a031e":"df_train[\"Title\"] = df_train[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\ndf_test[\"Title\"] = df_test[\"Name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)","d438d62f":"df_train.head()","d754134a":"df_train['Title'] = df_train['Title'].replace([ 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ndf_train['Title'] = df_train['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ndf_train['Title'] = df_train['Title'].replace('Mlle', 'Miss')\ndf_train['Title'] = df_train['Title'].replace('Ms', 'Miss')\ndf_train['Title'] = df_train['Title'].replace('Mme', 'Mrs')","5296e763":"df_test['Title'] = df_test['Title'].replace([ 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ndf_test['Title'] = df_test['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ndf_test['Title'] = df_test['Title'].replace('Mlle', 'Miss')\ndf_test['Title'] = df_test['Title'].replace('Ms', 'Miss')\ndf_test['Title'] = df_test['Title'].replace('Mme', 'Mrs')","8113031f":"df_train.head(20)","cde3d21b":"df_train[[\"Title\",\"Age\"]].groupby(\"Title\").mean()","f97bd642":"for i in df_train[\"Title\"]:\n    if i==\"Master\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(5)\n    elif i==\"Miss\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(22) \n    elif i==\"Mr\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(32)\n    elif i==\"Mrs\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(36)\n    elif i==\"Rare\":\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(46)\n    else:\n        df_train[\"Age\"]=df_train[\"Age\"].fillna(43)","7197a8c9":"df_train.isnull().sum()","3526358a":"df_test[[\"Title\",\"Age\"]].groupby(\"Title\").mean()","2a8c4393":"for i in df_test[\"Title\"]:\n    if i==\"Master\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(7)\n    elif i==\"Miss\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(22) \n    elif i==\"Mr\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(32)\n    elif i==\"Mrs\":\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(39)\n    else:\n        df_test[\"Age\"]=df_test[\"Age\"].fillna(44)","e257d301":"df_test.isnull().sum()","8832ca11":"df_test[[\"Pclass\",\"Fare\"]].groupby(\"Pclass\").mean()","b679ef7d":"df_test[\"Fare\"] = df_test[\"Fare\"].fillna(12)","55850a60":"df_test.isnull().sum()","09e9189b":"df_train.isnull().sum()","4bb2ac8f":"df_train[\"N_cabin\"] = (df_train[\"Cabin\"].notnull().astype('int'))\ndf_test[\"N_Cabin\"] = (df_test[\"Cabin\"].notnull().astype('int'))\n\ndf_train = df_train.drop(['Cabin'], axis = 1)\ndf_test = df_test.drop(['Cabin'], axis = 1)","31810253":"df_train.head()","33df6c29":"df_train.isnull().sum()","5df3d8e0":"df_test.isnull().sum()","d2ce48c6":"df_train[\"Embarked\"].value_counts()","c93ea34e":"df_train[\"Embarked\"]=df_train[\"Embarked\"].fillna(\"S\")","192d40e9":"df_train.isnull().sum()","34e62005":"\nfrom sklearn import preprocessing\n\nlbe=preprocessing.LabelEncoder()\ndf_train[\"Embarked\"]=lbe.fit_transform(df_train[\"Embarked\"])\ndf_test[\"Embarked\"]=lbe.fit_transform(df_test[\"Embarked\"])\n","12283c9d":"df_train.head(10)","e3a7ad90":"Sex_mapping={\"male\":0,\"female\":1}\ndf_train[\"Sex\"]=df_train[\"Sex\"].map(Sex_mapping)\ndf_test[\"Sex\"]=df_test[\"Sex\"].map(Sex_mapping)","3c6e81b2":"df_train.head()","bf330cd4":"df_train[[\"Title\",\"Survived\"]].groupby([\"Title\"], as_index=False).mean().sort_values(\"Survived\")","079e8207":"Title_mapping={\"Mr\":1,\"Rare\":2,\"Master\":3,\"Miss\":4,\"Mrs\":5,\"Royal\":6}\ndf_train[\"Title\"]=df_train[\"Title\"].map(Title_mapping)\ndf_test[\"Title\"]=df_test[\"Title\"].map(Title_mapping)","0b37434b":"df_train.info()","ac4209be":"df_train.head()","c62f46a6":"df_test.head()","8b0ae9cf":"df_train = df_train.drop(['Name'], axis = 1)\ndf_test = df_test.drop(['Name'], axis = 1)","6617058f":"df_train.head()","94f84e7f":"sns.distplot(df_train[\"Age\"], kde = False);","218cd0e3":"sns.distplot(Age_visualization, kde = False);","7713e26b":"bins = [0, 13, 18, 24, 32, 75, np.inf]\nmylabels = ['Child', 'Teenager', 'Young', 'Young Adult', 'Adult', 'Senior']\ndf_train['AgeGroup'] = pd.cut(df_train[\"Age\"], bins, labels = mylabels)\ndf_test['AgeGroup'] = pd.cut(df_test[\"Age\"], bins, labels = mylabels)","22384db7":"df_train[[\"AgeGroup\",\"Survived\"]].groupby(\"AgeGroup\").mean()","a8ce920a":"# Map each Age value to a numerical value:\nage_mapping = {'Child': 1, 'Teenager': 2, 'Young': 3, 'Young Adult':4 , 'Adult': 5, 'Senior':6}\ndf_train['AgeGroup'] = df_train['AgeGroup'].map(age_mapping)\ndf_test['AgeGroup'] = df_test['AgeGroup'].map(age_mapping)","e3ae86a2":"df_train.head(10)","d2a2a7b5":"sns.kdeplot(df_train[\"Fare\"], shade = True);","b7e2dcda":"(sns\n .FacetGrid(df_train,\n                hue = \"Survived\",\n                height = 8,\n                xlim = (0, 300))\n .map(sns.kdeplot, \"Fare\", shade= True)\n .add_legend()\n);","b0a1eeb5":"df_train['FareBand'] = pd.qcut(df_train['Fare'], 10, labels = [1, 2, 3, 4,5,6,7,8,9,10])\ndf_test['FareBand'] = pd.qcut(df_test['Fare'], 10, labels = [1, 2, 3, 4,5,6,7,8,9,10])","4c1c03c4":"df_train.head(10)","a3942126":"df_train.head()","6e5a7a50":"df_train[\"FamilySize\"] =df_train[\"SibSp\"]+df_train[\"Parch\"]+1\ndf_train[\"FamilySize\"].mean()","da6841a9":"df_test[\"FamilySize\"] =df_test[\"SibSp\"]+df_test[\"Parch\"]+1\ndf_test[\"FamilySize\"].mean()","40d0bdec":"sns.distplot(df_train[\"FamilySize\"], kde = False);","eb45ea4c":"df_train['Single'] = df_train['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ndf_train['SmallFam'] = df_train['FamilySize'].map(lambda s: 1 if  2 <= s <= 3  else 0)\ndf_train['MedFam'] = df_train['FamilySize'].map(lambda s: 1 if 4 <= s <= 5 else 0)\ndf_train['LargeFam'] = df_train['FamilySize'].map(lambda s: 1 if s >= 6 else 0)","35b4e13b":"df_test['Single'] = df_test['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ndf_test['SmallFam'] = df_test['FamilySize'].map(lambda s: 1 if  2 <= s <= 3  else 0)\ndf_test['MedFam'] = df_test['FamilySize'].map(lambda s: 1 if 4 <= s <= 5 else 0)\ndf_test['LargeFam'] = df_test['FamilySize'].map(lambda s: 1 if s >= 6 else 0)","906feb1c":"df_train.head(10)","0b9b7169":"df_train = pd.get_dummies(df_train, columns = [\"Title\"])\ndf_train = pd.get_dummies(df_train, columns = [\"Embarked\"], prefix=\"Em\")\n","e04e4c0a":"df_test = pd.get_dummies(df_test, columns = [\"Title\"])\ndf_test = pd.get_dummies(df_test, columns = [\"Embarked\"], prefix=\"Em\")\n","ea078a60":"df_train[\"Pclass\"] = df_train[\"Pclass\"].astype(\"category\")\ndf_train = pd.get_dummies(df_train, columns = [\"Pclass\"],prefix=\"Pc\")","d0e99910":"df_test[\"Pclass\"] = df_test[\"Pclass\"].astype(\"category\")\ndf_test = pd.get_dummies(df_test, columns = [\"Pclass\"],prefix=\"Pc\")","0ea0812b":"df_train.head(10)","b714083b":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\npredictors = df_train.drop(['Survived', 'PassengerId'], axis=1)\ntarget = df_train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(predictors, target, test_size = 0.20, random_state = 0)","b6621564":"x_train.shape","ed610044":"x_test.shape","fe332fbe":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_test)\nacc_logreg = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_logreg)","f1dd7e8f":"from sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(x_train, y_train)\ny_pred = randomforest.predict(x_test)\nacc_randomforest = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_randomforest)","e60afd25":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\n\ngbk.fit(x_train, y_train)\ny_pred = gbk.predict(x_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","c568dea4":"gbk","101be097":"xgb_params = {\n        'n_estimators': [200, 500],\n        'subsample': [0.6, 1.0],\n        'max_depth': [2,5,8],\n        'learning_rate': [0.1,0.01,0.02],\n        \"min_samples_split\": [2,5,10]}","69d48568":"xgb = GradientBoostingClassifier()\n\nxgb_cv_model = GridSearchCV(xgb, xgb_params, cv = 10, n_jobs = -1, verbose = 2)","6e0e14a8":"xgb_cv_model.fit(x_train, y_train)","1d683d60":"xgb_cv_model.best_params_","2267f455":"xgb = GradientBoostingClassifier(learning_rate = xgb_cv_model.best_params_[\"learning_rate\"], \n                    max_depth = xgb_cv_model.best_params_[\"max_depth\"],\n                    min_samples_split = xgb_cv_model.best_params_[\"min_samples_split\"],\n                    n_estimators = xgb_cv_model.best_params_[\"n_estimators\"],\n                    subsample = xgb_cv_model.best_params_[\"subsample\"])","2d5a0414":"xgb_tuned =  xgb.fit(x_train,y_train)","1cd26b51":"y_pred = xgb_tuned.predict(x_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","0966a7b9":"feature_imp = pd.Series(xgb_tuned.feature_importances_,\n                        index=x_train.columns).sort_values(ascending=False)\n\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.xlabel('Significance Score Of Variables')\nplt.ylabel('Variables')\nplt.title(\"Variable Severity Levels\")\nplt.show()","b99fe81b":"df_test","24d87cf1":"ids = df_test['PassengerId']\npredictions = xgb_tuned.predict(df_test)\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","3727baba":"output","592e9110":"# Analysis and Visualization of Numeric and Categorical Variables","13f712e7":"## Name ","6135860b":"## Fare ","75bbe8e1":"## Gradient Boosting Classifier","7980365b":"# Data Preparations","659095fc":"## Basic summary statistics about the numerical data","1d3bdf6a":"## Librarires","4808760a":"## Name and Title","3e969786":"# Variable Transformation","af8450e2":"## Deleting Unnecessary Variables","39b2a29d":"## Sex","36ce402a":"In general, barplot is used for categorical variables while histogram, density and boxplot are used for numerical data.","05013dcf":"## Family Size","35ebc957":"## Ticket","40f7701b":"## Embarked & Title &   Pclass","d93de88a":"## Outlier Treatment","5b007b36":"# Data Understanding","46b815c7":"# Missing Value Treatment","22f5c920":"## Cabin","d81eace9":"## Deployment","884f92f0":"## Embarked","dbf43467":"## AgeGroup","3920618f":"## Visualization","a798b48b":"## Logistic Regression","d979734e":"## Loading Data","ab152a4c":"## Embarked","811c0fef":"# Modeling, Evaluation and Model Tuning","e1d750b6":"# Feature Engineering","e6fec3fa":"## Classes of some categorical variables","52b87975":"## Random Forest","25559ff3":"## Spliting the train data"}}