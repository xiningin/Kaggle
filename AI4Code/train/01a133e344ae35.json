{"cell_type":{"5c1137c1":"code","ad21c527":"code","52c02f1e":"code","7a31a881":"code","35d0f766":"code","eaf69ad9":"code","dacb93ca":"code","4cc3637d":"code","e9ef830a":"code","ac02f55e":"code","ed6cdf3f":"code","738fc0fd":"code","83dc87e1":"code","4c570d5c":"code","5b8ae6fa":"code","c8d8057c":"code","d4c79bd4":"code","38db4b86":"code","e8a86390":"code","d1afe4c6":"code","43c4787c":"code","5376d3b9":"code","256fe1cf":"code","5f09298d":"code","22c2a146":"markdown","54b78178":"markdown","954085f2":"markdown","d7671f3e":"markdown","60d5c230":"markdown","c6c87758":"markdown","e0ae8598":"markdown","f8604e9c":"markdown","0e5a476a":"markdown","5fb368f9":"markdown","96f51a74":"markdown","033d9ff7":"markdown","88acfd3f":"markdown","9dcee41e":"markdown","bb99b404":"markdown","a1d20dd6":"markdown","29c9ddef":"markdown","611fc22f":"markdown","2fa44990":"markdown","52ca3abd":"markdown","e14fe41c":"markdown","e273b7f0":"markdown","e037f6b7":"markdown"},"source":{"5c1137c1":"import pandas as pd\n# prophet by Facebook\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_absolute_error\nimport warnings; warnings.simplefilter('ignore')\nimport matplotlib.pyplot as plt\n\n","ad21c527":"#if you are running from COLAB copy the corona.csv file from  the link above in NOTES to your drive\n#from google.colab import drive\n#drive.mount('\/content\/drive')","52c02f1e":"import os\nprint(os.listdir(\"..\/input\"))\n","7a31a881":"df = pd.read_csv('..\/input\/corona-turkey\/corona.csv', sep=',')\ndf.head()","35d0f766":"df= df[['DAY','DEAD_TODAY','DEAD_TOMORROW']].copy()\ndf.tail()","eaf69ad9":"df['ds'] = pd.to_datetime(df['DAY'],  dayfirst = True)\ndf.plot(x='ds',   figsize=(10, 5))\n","dacb93ca":"newdf = df[['ds', 'DEAD_TODAY']].copy()\ndf.drop(['ds'], axis=1, inplace=True)\nnewdf.rename(columns={'DEAD_TODAY': 'y'}, inplace=True)\n\nnewdf.tail()","4cc3637d":"m = Prophet( )\nm.fit(newdf)\nhorizon= 1\nfuture = m.make_future_dataframe(periods=horizon)\nforecast = m.predict(future)\nforecast[['ds',  'yhat', 'yhat_lower', 'yhat_upper']].tail()","e9ef830a":"fig1 = m.plot(forecast)","ac02f55e":"#fig2 = m.plot_components(forecast)","ed6cdf3f":"MAE={}\n\nMAE['Prophet'] =  mean_absolute_error(newdf['y'], forecast[:-horizon]['yhat'])\n\nprint(\"MAE : {}\".format(MAE))","738fc0fd":"comparison= pd.DataFrame()\ncomparison['ds']=newdf['ds'].copy()\ncomparison['DEAD_TOMORROW']=df['DEAD_TOMORROW'].copy()\ncomparison['Prediction_Prophet'] = forecast[:-1].yhat\ncomparison.plot(title=\"comparison\",x='ds',figsize=(20, 6))","83dc87e1":"window= 3\ndf['Prediction_ SMA_3'] = df.iloc[:,1].rolling(window=window).mean()\ndf.head()","4c570d5c":"MAE['SMA_3'] =  mean_absolute_error(df[2:-1]['DEAD_TOMORROW'], df[2:-1]['Prediction_ SMA_3'])\nprint(\"MAE : {}\".format(MAE))","5b8ae6fa":"rstd = df.iloc[:,2].rolling(window=window).std()\nbands = pd.DataFrame()\nbands['DAY']= df['DAY'].copy()\nbands['lower'] = df['Prediction_ SMA_3'] - 2 * rstd\nbands['upper'] = df['Prediction_ SMA_3'] + 2 * rstd\n\n\nbands = bands.join(df['DEAD_TOMORROW']).join(df['Prediction_ SMA_3'])\nfig = plt.figure(figsize=(20, 6))\nax = bands.plot(title='Prediction_ SMA_3', figsize=(20, 6))\nax.fill_between(bands.index, bands['lower'], bands['upper'], color='#ADCCFF', alpha=0.4)\nax.set_xlabel('date')\nax.set_ylabel('DEAD TOMORROW')\nax.grid()\n\nplt.show()","c8d8057c":"comparison['Prediction_SMA_3'] = df['Prediction_ SMA_3']\nprint(comparison.tail())\ncomparison.plot(title=\"comparison\",x='ds',figsize=(20, 6))","d4c79bd4":"df['Prediction_EMA_3'] = df.iloc[:,1].ewm(span=window,adjust=False).mean()\ndf.head()\n","38db4b86":"MAE['EMA_3'] =  mean_absolute_error(df[1:-1]['DEAD_TOMORROW'], df[1:-1]['Prediction_EMA_3'])\nprint(\"MAE : {}\".format(MAE))","e8a86390":"rstd = df.iloc[:,2].rolling(window=window).std()\nbands = pd.DataFrame()\nbands['DAY']= df['DAY'].copy()\nbands['lower'] = df['Prediction_EMA_3'] - 2 * rstd\nbands['upper'] = df['Prediction_EMA_3'] + 2 * rstd\nbands = bands.join(df['DEAD_TOMORROW']).join(df['Prediction_EMA_3'])\nfig = plt.figure(figsize=(20, 6))\nax = bands.plot(title='Prediction_EMA_3', figsize=(20, 6))\nax.fill_between(bands.index, bands['lower'], bands['upper'], color='#ADCCFF', alpha=0.4)\nax.set_xlabel('date')\nax.set_ylabel('DEAD TOMORROW')\nax.grid()\nplt.show()","d1afe4c6":"comparison['Prediction_EMA_3'] = df['Prediction_EMA_3']\ncomparison.plot(title=\"comparison\",x='ds',figsize=(20, 6))","43c4787c":"print('Mean Absolute Errors (MAE): {}'.format(MAE))","5376d3b9":"errorsDF = pd.DataFrame(MAE, index=['MAE']) \nax = errorsDF.plot.bar(rot=0, figsize=(10, 7))","256fe1cf":"rstd.tail()","5f09298d":"bands.tail()","22c2a146":"## Train & Predict","54b78178":"## Record Mean Absolute Error ","954085f2":"# Conclusion\n\nGiven the data set and using the Prophet SMA, EMA to forecast next day:\n* Data has ONLY 48 days\n* EMA has the lowest error\n* The predicted loss for 02.05.2020 is -I hope and wish nobody dies- **88** by SMA & EMA\n* However, we observe that DEAD TOMORROW ***mostly close to lower band***: thus we can update our prediction down to **80** ***assuming standard deviation is around 4***!  \n","d7671f3e":"## NOTES:\n* You can acess the notebook on  [COLAB](https:\/\/colab.research.google.com\/drive\/1LBrPEFUbVsSdHO1Y_ceJXEqTq288aIgx), [GITHUB](https:\/\/github.com\/kmkarakaya\/ML_tutorials\/blob\/master\/A_Time_Series_Analysis_Corona_Death_Toll_Prediction.ipynb), or [Kaggle](https:\/\/www.kaggle.com\/kmkarakaya\/time-series-analysis-corona-death-toll-prediction) \n\n* you can watch it on [YOUTUBE](https:\/\/www.youtube.com\/watch?v=rT0UOyJjOaE&feature=youtu.be) at [my channel](https:\/\/www.youtube.com\/channel\/UCrCxCxTFL2ytaDrDYrN4_eA?view_as=subscriber).\n\n* you can download the data from [GITHUB](https:\/\/github.com\/kmkarakaya\/ML_tutorials\/blob\/master\/data\/corona.csv) or [Kaggle](https:\/\/www.kaggle.com\/kmkarakaya\/corona-turkey)\n\n* prepared by Murat Karakaya","60d5c230":"## Compare the prediction with collected data ","c6c87758":"# Prediction Method 3: Exponential Moving Average (EMA)\n\nEMA(t)\n\nEMA(t0)=(1\u2212\u03b1)\n\nEMA(t\u22121)+\u03b1 p(t)=p(t0)\n \nwhere p(t) is the price at time t and \u03b1 is called the decay parameter for the EMA. \n\n\u03b1 is related to the lag as\n\u03b1=1\/L+1\n\nand the length of the window (span) M as\n\u03b1=2\/M+1.\n\nThe reason why EMA reduces the lag is that it puts more weight on more recent observations, whereas the SMA weights all observations equally by 1\/M.\n","e0ae8598":"## Prepare data format for the Prophet Model","f8604e9c":"## Record Mean Absolute Error ","0e5a476a":"## Visualize the data in a plot.\n","5fb368f9":"## Load data","96f51a74":"#Summary\n","033d9ff7":"## Record Mean Absolute Error ","88acfd3f":"## Compare the prediction with collected data \n","9dcee41e":"## Train & Predict","bb99b404":"## Select data","a1d20dd6":"## Calculate the standard deviation & upper\/lower bands","29c9ddef":"# Prediction Method 1: Facebook's Prophet Model\n\nAs a prediction method, we will use Prophet. \n\n[More about Prophet](https:\/\/facebook.github.io\/prophet\/docs\/quick_start.html#python-api) \n\n\n","611fc22f":"## Calculate the standard deviation & upper\/lower bands\n","2fa44990":"# Prediciton of Corona Death Toll in Turkey \n\nIn this notebook, we will predict the number of patients dying due to coronavirus using simple Time Series prediction methods in Pyhthon's Pandas.\n\nFor this reason, we will use Turkey's daily reports from 13 March 2020 up to 1 May 2020\n\nLet's begin with importing dependicies and data.\n","52ca3abd":"# Prediction Method 2: Simple Moving Average (SMA)\n\nLet's calculate Simple Moving Average with 3 days window\n","e14fe41c":"## Train & Predict","e273b7f0":"## Compare the prediction with collected data ","e037f6b7":"# Collected Data"}}