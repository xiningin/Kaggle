{"cell_type":{"89fa71a4":"code","96af5e89":"code","f2d38092":"code","ec0a5fc2":"code","c89d8ba4":"code","a16ee721":"code","372e72cc":"code","c57b6e6e":"code","e172a227":"code","7f7ca514":"code","4c5b7f0d":"code","6ce9b15b":"code","fb52e0e7":"code","10fca47e":"code","da535e11":"code","97656766":"code","d9ab26ef":"code","c0c79e7a":"code","0488c81f":"code","bc883673":"code","43314274":"code","509369cf":"code","265f1140":"code","db6ab8f3":"code","c4dfc953":"code","3dc4c023":"code","f62f424b":"code","3b039c78":"code","34eac0f4":"code","40c8df7a":"code","5be70d71":"code","c6bc8e37":"code","6591a21a":"code","4d53a37c":"code","fa365cb1":"code","27ed35fe":"markdown","448d8f83":"markdown","5873a2b1":"markdown","f8cd62b7":"markdown","00cd24d6":"markdown","6fb0d2df":"markdown","1d7301b0":"markdown","5e164ff1":"markdown"},"source":{"89fa71a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96af5e89":"retail_data = pd.read_csv(\"\/kaggle\/input\/retail-analysis-with-walmart-sales-data\/WALMART_SALES_DATA.csv\")","f2d38092":"# View the first 10 rows\nretail_data.head(10)","ec0a5fc2":"# Description of the data\nretail_data.describe()","c89d8ba4":"retail_data.info()","a16ee721":"# Row with the maximum sale\nprint(retail_data[retail_data.Weekly_Sales == retail_data.Weekly_Sales.max()])","372e72cc":"maxstd=pd.DataFrame(retail_data.groupby('Store').agg({'Weekly_Sales':['std','mean']}))","c57b6e6e":"#Just resetting the index.\nmaxstd = maxstd.reset_index()","e172a227":"# coefficient of Variance = mean \/ standard Deviation\nmaxstd['COV'] = (maxstd[('Weekly_Sales','std')]\/maxstd[('Weekly_Sales','mean')]) *100","7f7ca514":"maxstd.loc[maxstd[('Weekly_Sales','std')]==maxstd[('Weekly_Sales','std')].max()]","4c5b7f0d":"# create a new column which shows the year and quarter\nretail_data['quarter'] = pd.PeriodIndex(retail_data.Date, freq='Q')","6ce9b15b":"T2012Q2 = retail_data.loc[retail_data['quarter'] == \"2012Q2\", [\"Weekly_Sales\", 'Store']]","fb52e0e7":"T2012Q3 = retail_data.loc[retail_data['quarter'] == \"2012Q3\", [\"Weekly_Sales\", 'Store']]","10fca47e":"T2012Q2_sum_per_store = pd.DataFrame(T2012Q2.groupby('Store')['Weekly_Sales'].sum())\nT2012Q2_sum_per_store.reset_index(inplace=True)\nT2012Q3_sum_per_store = pd.DataFrame(T2012Q3.groupby('Store')['Weekly_Sales'].sum())\nT2012Q3_sum_per_store.reset_index(inplace=True)","da535e11":"T2012Q2_sum_per_store['Weekly_Sales_Q3'] = T2012Q3_sum_per_store['Weekly_Sales']","97656766":"T2012Q2_sum_per_store['Growth Rate'] = ((T2012Q2_sum_per_store.Weekly_Sales_Q3 - T2012Q2_sum_per_store.Weekly_Sales)\/T2012Q2_sum_per_store.Weekly_Sales)*100","d9ab26ef":"T2012Q2_sum_per_store.loc[T2012Q2_sum_per_store['Growth Rate']==T2012Q2_sum_per_store['Growth Rate'].max()]","c0c79e7a":"import datetime as dt\nretail_data.Date = pd.to_datetime(retail_data.Date)","0488c81f":"Holiday_Week = retail_data.loc[retail_data['Holiday_Flag']==1]\n","bc883673":"from matplotlib import pyplot as plt\nimport time\nretail_data['Date'] = pd.to_datetime(retail_data.Date)","43314274":"def plot_line(df, holiday_dates, holiday_label):\n    fig, ax = plt.subplots(figsize=(15,5))\n    ax.plot(df['Date'], df['Weekly_Sales'], label=holiday_label)\n    \n    for day in holiday_dates:\n        day = dt.datetime.strptime(day, '%d-%m-%Y').date()\n        plt.axvline(x=day, linestyle='--', c='r')\n        \n    plt.title(holiday_label)\n    x_dates = df['Date'].dt.strftime('%Y-%m-%d').sort_values().unique()\n    plt.show()","509369cf":"total_sales = retail_data.groupby('Date')['Weekly_Sales'].sum().reset_index()\nSuper_Bowl=['12-2-2010', '11-2-2011', '10-2-2012']\nLabor_Day = ['10-9-2010', '9-9-2011', '7-9-2012']\nThanksgiving = ['26-11-2010', '25-11-2011', '23-11-2012']\nChristmas = ['31-12-2010', '30-12-2011', '28-12-2012']","265f1140":"plot_line(total_sales, Super_Bowl, 'Super Bowl')","db6ab8f3":"plot_line(total_sales, Labor_Day, 'Labour Day')","c4dfc953":"plot_line(total_sales, Thanksgiving, 'Thanksgiving Week')","3dc4c023":"plot_line(total_sales, Christmas, 'Christmas')","f62f424b":"from matplotlib import pyplot as plt\npd.DatetimeIndex(retail_data['Date'])\nmonthly = retail_data.groupby(pd.Grouper(key='Date', freq='1M')).sum()# groupby each 1 month\nmonthly=monthly.reset_index()\nfig, ax = plt.subplots(figsize=(10,6))\nX = monthly['Date']\nY = monthly['Weekly_Sales']\nplt.plot(X,Y)\nplt.title('Month Wise Sales')\nplt.xlabel('Months')\nplt.ylabel('Weekly_Sales')","3b039c78":"quarterly = retail_data.groupby(pd.Grouper(key='Date', freq='3M')).sum()# groupby each 3e month\nquarterly=quarterly.reset_index()\nfig, ax = plt.subplots(figsize=(10,6))\nX = quarterly['Date']\nY = quarterly['Weekly_Sales']\nplt.plot(X,Y)\nplt.title('Quarterly Sales')\nplt.xlabel('Months')\nplt.ylabel('Weekly_Sales')","34eac0f4":"semesterly = retail_data.groupby(pd.Grouper(key='Date', freq='3M')).sum()# groupby each 3e month\nsemesterly=semesterly.reset_index()\nfig, ax = plt.subplots(figsize=(10,6))\nX = semesterly['Date']\nY = semesterly['Weekly_Sales']\nplt.plot(X,Y)\nplt.title('Semester Sales')\nplt.xlabel('Years')\nplt.ylabel('Weekly_Sales')","40c8df7a":"# A little feature engineering\nimport seaborn as sns\ncorr = retail_data.corr()\n\nplt.figure(figsize=(8, 5))\nsns.heatmap(corr, annot=True)\nplt.show()","5be70d71":"retail_data['Day']=retail_data['Date'].dt.day\nretail_data = retail_data.drop('Date',axis=1)","c6bc8e37":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn.metrics import confusion_matrix, r2_score","6591a21a":"df_v2 = pd.get_dummies(retail_data, columns = ['Holiday_Flag','Store'])\ny = df_v2['Weekly_Sales']\nX= df_v2.drop(['Weekly_Sales', 'quarter'],axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)","4d53a37c":"ln_model = LinearRegression()\nln_model.fit(X_train, y_train)","fa365cb1":"y_pred = ln_model.predict(X_test)\nprint(\"r2 score:\", r2_score(y_test,y_pred))","27ed35fe":"Store 14 has the maximum standard deviation and its coefficient of Variation is 15.71","448d8f83":"## **Question 3**\nWhich store has a good quarterly growth rate?","5873a2b1":"the result above shows that there is no missinig data in the dataset","f8cd62b7":"The Store with good quarterly growth rate is Store 16","00cd24d6":"Store 14 has the maximum sale","6fb0d2df":"## **Question 2**\nWhich store has maximum standard deviation i.e., the sales vary a lot. Also, find out the coefficient of mean to standard deviation","1d7301b0":"## **Question 4**\nFind out the holiday that has the higher sales than the mean sales in non-holiday season ll together","5e164ff1":"## **Question 1**\nWhich store has the maximum sale?"}}