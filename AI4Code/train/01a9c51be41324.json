{"cell_type":{"a9617a5c":"code","eea91bf7":"code","c84073a3":"code","aa9d75be":"code","ec8c1282":"code","456e1a8a":"code","f317cd7c":"code","f1940085":"code","7f5a4342":"code","f26ade01":"code","1c12dc34":"code","1b5051f9":"code","595a6562":"code","5b00c19d":"code","b0f8d2bd":"code","6f262ffc":"code","d9148ac3":"code","dad16bb4":"code","eb9a7718":"code","02859d6f":"code","fe1c4b2c":"code","9a18b1ee":"code","6d413613":"code","28616dd3":"code","c60a2f24":"code","eaa1299a":"code","5df981ce":"code","227cd497":"markdown","3d86c80c":"markdown","3dab8c5e":"markdown","73b94be9":"markdown","b0cdf8c5":"markdown"},"source":{"a9617a5c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","eea91bf7":"import os, shutil,zipfile\nwith zipfile.ZipFile('\/kaggle\/input\/dogs-vs-cats\/train.zip', 'r') as zip:\n    zip.extractall()    \n    zip.close()","c84073a3":"from keras import layers\nfrom keras import models\nfrom keras import optimizers\nfrom keras.applications import InceptionResNetV2\nfrom keras.preprocessing import image\nimport os\nimport shutil\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom keras import Input","aa9d75be":"#this block is an quotation from the Deep Learning With Python(fran\u00e7ois chollet) book.\n\n# The path to the directory where the original\n# dataset was uncompressed\noriginal_dataset_dir = '\/kaggle\/working\/train'\n\n# The directory where we will\n# store our smaller dataset\nbase_dir = '\/kaggle\/working\/cats_and_dogs_small'\nos.mkdir(base_dir)\n\n# Directories for our training,\n# validation and test splits\ntrain_dir = os.path.join(base_dir, 'train')\nos.mkdir(train_dir)\nvalidation_dir = os.path.join(base_dir, 'validation')\nos.mkdir(validation_dir)\ntest_dir = os.path.join(base_dir, 'test')\nos.mkdir(test_dir)\n\n# Directory with our training cat pictures\ntrain_cats_dir = os.path.join(train_dir, 'cats')\nos.mkdir(train_cats_dir)\n\n# Directory with our training dog pictures\ntrain_dogs_dir = os.path.join(train_dir, 'dogs')\nos.mkdir(train_dogs_dir)\n\n# Directory with our validation cat pictures\nvalidation_cats_dir = os.path.join(validation_dir, 'cats')\nos.mkdir(validation_cats_dir)\n\n# Directory with our validation dog pictures\nvalidation_dogs_dir = os.path.join(validation_dir, 'dogs')\nos.mkdir(validation_dogs_dir)\n\n# Directory with our validation cat pictures\ntest_cats_dir = os.path.join(test_dir, 'cats')\nos.mkdir(test_cats_dir)\n\n# Directory with our validation dog pictures\ntest_dogs_dir = os.path.join(test_dir, 'dogs')\nos.mkdir(test_dogs_dir)\n\n# Copy first 2500 cat images to train_cats_dir\nfnames = ['cat.{}.jpg'.format(i) for i in range(2500)]\nfor fname in fnames:\n    src = os.path.join(original_dataset_dir, fname)\n    dst = os.path.join(train_cats_dir, fname)\n    shutil.copyfile(src, dst)\n\n# Copy next 1000 cat images to validation_cats_dir\nfnames = ['cat.{}.jpg'.format(i) for i in range(2500, 3500)]\nfor fname in fnames:\n    src = os.path.join(original_dataset_dir, fname)\n    dst = os.path.join(validation_cats_dir, fname)\n    shutil.copyfile(src, dst)\n    \n# Copy next 1500 cat images to test_cats_dir\nfnames = ['cat.{}.jpg'.format(i) for i in range(3500, 5000)]\nfor fname in fnames:\n    src = os.path.join(original_dataset_dir, fname)\n    dst = os.path.join(test_cats_dir, fname)\n    shutil.copyfile(src, dst)\n    \n# Copy first 2500 dog images to train_dogs_dir\nfnames = ['dog.{}.jpg'.format(i) for i in range(2500)]\nfor fname in fnames:\n    src = os.path.join(original_dataset_dir, fname)\n    dst = os.path.join(train_dogs_dir, fname)\n    shutil.copyfile(src, dst)\n    \n# Copy next 1000 dog images to validation_dogs_dir\nfnames = ['dog.{}.jpg'.format(i) for i in range(2500, 3500)]\nfor fname in fnames:\n    src = os.path.join(original_dataset_dir, fname)\n    dst = os.path.join(validation_dogs_dir, fname)\n    shutil.copyfile(src, dst)\n    \n# Copy next 1500 dog images to test_dogs_dir\nfnames = ['dog.{}.jpg'.format(i) for i in range(3500, 5000)]\nfor fname in fnames:\n    src = os.path.join(original_dataset_dir, fname)\n    dst = os.path.join(test_dogs_dir, fname)\n    shutil.copyfile(src, dst)","ec8c1282":"size = (172,172,3) #resized images size\nbatch_size = 160 ","456e1a8a":"#data augmentation and normalize images with using ImageDataGenerator\ntrain_datagen = image.ImageDataGenerator(rescale=1.\/255,\n                                         rotation_range=40,\n                                         width_shift_range=0.2,\n                                         height_shift_range=0.2,\n                                         shear_range=0.2,\n                                         zoom_range=0.2,\n                                         horizontal_flip=True,\n                                         fill_mode=\"nearest\")\n\nvalid_datagen = image.ImageDataGenerator(rescale=1.\/255)\n\ntest_datagen = image.ImageDataGenerator(rescale=1.\/255)","f317cd7c":"train_generator = train_datagen.flow_from_directory(\"\/kaggle\/working\/cats_and_dogs_small\/train\",\n                                                    target_size=(172,172),\n                                                    batch_size=batch_size,class_mode=\"binary\")\nvalidation_generator = valid_datagen.flow_from_directory(\"\/kaggle\/working\/cats_and_dogs_small\/validation\",\n                                                        target_size=(172,172),\n                                                         batch_size=batch_size,class_mode=\"binary\")\ntest_generator = test_datagen.flow_from_directory(\"\/kaggle\/working\/cats_and_dogs_small\/test\",\n                                                        target_size=(172,172),\n                                                  batch_size=batch_size,class_mode=\"binary\")","f1940085":"input_tensor = Input(shape=size)\nresnet = InceptionResNetV2(weights=\"imagenet\",include_top=False,\n                           input_tensor=input_tensor) #load pretrained model","7f5a4342":"#resnet.summary() ","f26ade01":"for i in resnet.layers: #freeze pretrained model\n    i.trainable = False ","1c12dc34":"#create new model and add pretrained model in this model\nx = resnet.output\nx = layers.GlobalMaxPooling2D(data_format='channels_last')(x)\nx = layers.Dropout(0.30)(x)\nx = layers.Dense(256,activation=\"relu\")(x)\nx = layers.Dropout(0.30)(x)\nx = layers.Dense(256,activation=\"relu\")(x)\nx = layers.Dense(1,activation=\"sigmoid\")(x)\nmodel = models.Model(resnet.input,x)","1b5051f9":"#model.summary()#now we have only 459,521 trainable params","595a6562":"model.compile(optimizer=\"rmsprop\",loss=\"binary_crossentropy\",metrics=[\"acc\"])","5b00c19d":"history = model.fit_generator(train_generator,\n                        steps_per_epoch=train_generator.samples\/\/batch_size,epochs=12,\n                        validation_data=validation_generator,\n                        validation_steps=validation_generator.samples\/\/batch_size)","b0f8d2bd":"epochs = range(1,len(history.history[\"acc\"])+1)","6f262ffc":"plt.plot(epochs,history.history[\"acc\"],label=\"Train Accuracy\")\nplt.plot(epochs,history.history[\"val_acc\"],label=\"Validation Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Accuracy Comp\")\nplt.legend()\nplt.show()\n\nplt.plot(epochs,history.history[\"loss\"],label=\"Train Loss\")\nplt.plot(epochs,history.history[\"val_loss\"],label=\"Validation Loss\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.title(\"Loss Comp\")\nplt.legend()\nplt.show()\n","d9148ac3":"loss,acc = model.evaluate_generator(generator=test_generator,\n                                steps=test_generator.samples\/\/batch_size)","dad16bb4":"print(\"Test Accuracy =\",acc)","eb9a7718":"liste = [x.name for x in model.layers]","02859d6f":"#select after blocks block8_10_conv to fine tunnig\nfor i in range(liste.index(\"block8_10_conv\"),len(model.layers)): \n    model.layers[i].trainable = True #unfreeze the layers","fe1c4b2c":"#compile model with very low learning rate\nmodel.compile(optimizer=optimizers.RMSprop(learning_rate=0.00005),\n              loss=\"binary_crossentropy\",metrics=[\"acc\"])","9a18b1ee":"#model.summary() #now we have 4,589,857 trainable params","6d413613":"history = model.fit_generator(train_generator,steps_per_epoch=train_generator.samples\/\/batch_size,\n                              epochs=15,validation_data=validation_generator,\n                              validation_steps=validation_generator.samples\/\/batch_size)","28616dd3":"epochs = range(1,len(history.history[\"acc\"])+1)","c60a2f24":"plt.plot(epochs,history.history[\"acc\"],label=\"Train Accuracy\")\nplt.plot(epochs,history.history[\"val_acc\"],label=\"Validation Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Accuracy Comp\")\nplt.legend()\nplt.show()\n\nplt.plot(epochs,history.history[\"loss\"],label=\"Train Loss\")\nplt.plot(epochs,history.history[\"val_loss\"],label=\"Validation Loss\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.title(\"Loss Comp\")\nplt.legend()\nplt.show()","eaa1299a":"loss,acc = model.evaluate_generator(generator=test_generator,\n                                    steps=test_generator.samples\/\/batch_size)","5df981ce":"print(\"Test Accuracy =\",acc)","227cd497":"We are spliting dataset on smaller train,validation and test set","3d86c80c":"Implementing data generator. We are using data augmentation on train test.","3dab8c5e":"# Feature Extraction\n\nStep 1 - Load pre-trained model and freeze\n\nStep 2 - Create new model and add the frozen pretrained model in this model\n\nStep 3 - Add dense layers\n\nStep 4 - Train Model","73b94be9":"# Load Pre-trained Model\n\n* We are select include_top = False. Because we are don't want dense layers.\n\n* This Model coming with trained weights on imagenet","b0cdf8c5":"# Fine Tunning\n\nStep 1 - Take the Feature Extraction(We are did this step)\n\nStep 2 - Select layers to Fine Tunning\n\nStep 3 - Train Model\n"}}