{"cell_type":{"fbd9d332":"code","5908bffe":"code","5a9aed52":"code","47dde41c":"code","46897b02":"code","8981c86f":"code","fe79e1ff":"code","db1c3c20":"code","f9fe9ba2":"code","3603fcc5":"code","cf67fb5d":"code","f7b168c4":"code","f10af0e5":"code","1abd2a35":"code","c21c746b":"code","cd065d89":"code","9d49d2df":"code","1002fd8c":"code","984fe11e":"code","581ef6ea":"code","c2c8f7f3":"code","e2b412ec":"code","bc8b430b":"code","88ae1d18":"code","be3c2e83":"code","716b67ea":"code","556075c4":"code","6d5a8373":"code","4307a9aa":"code","483a7677":"code","cdbb24ea":"code","3ce2c902":"code","390dbbae":"code","58af15da":"code","c4c272fe":"code","dd470689":"code","3a8b7a4e":"code","cbd637d0":"code","faf59222":"code","5610c9ef":"code","0ab35752":"code","c9db2297":"code","51af7275":"code","576089ef":"code","c4001cbc":"code","22cf5d47":"code","1d44395e":"code","73a9b1da":"code","16e75cfb":"code","da5ff6d5":"code","5cb33cba":"code","fd9db23b":"code","ea0174bd":"code","d6b96822":"code","b6f6086b":"code","00be1309":"code","98a4f371":"code","eabc402b":"code","210611b0":"code","be08c120":"code","aca9020b":"code","f37ca759":"code","13d614b3":"code","74e5377e":"code","14eb2746":"code","52a6eaee":"code","0943063c":"code","fae0f0be":"code","bf3cdb92":"code","3170d12a":"code","aa786fe8":"code","e14a78bb":"code","04daf9ab":"code","c9817fae":"code","82890927":"code","1dd556f4":"code","d0b36098":"code","a37a7868":"code","2825d5c9":"code","29144b94":"code","34208960":"code","3d50feed":"code","40ed9344":"code","7a70641e":"code","447ef003":"code","f0b232f6":"code","0d2c0862":"code","8cd2b9b2":"code","a91af250":"code","2c738e9b":"code","a1c9c804":"code","c2720edc":"markdown","0d8103de":"markdown","6099f1f9":"markdown","95261003":"markdown","6a742e25":"markdown","70a5b91b":"markdown","c8e291d9":"markdown","cf3cdf19":"markdown","258e072e":"markdown","85cec00f":"markdown","88567042":"markdown","3fa84142":"markdown","4ccf940d":"markdown","9c33a50f":"markdown","bd30f8e2":"markdown","26c886d1":"markdown"},"source":{"fbd9d332":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5908bffe":"!pip install py7zr\nimport py7zr","5a9aed52":"import py7zr\nfrom subprocess import check_output\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        archive = py7zr.SevenZipFile(os.path.join(dirname, filename), mode='r')\n        archive.extractall(path=\"\/kaggle\/working\")\n        archive.close()\n\nprint(check_output([\"ls\", \"..\/working\"]).decode(\"utf8\"))","47dde41c":"df_train = pd.read_csv(\"..\/working\/train.csv\")\ndf_test = pd.read_csv(\"..\/working\/test.csv\")\ndf_sub = pd.read_csv(\"..\/working\/sample_submission.csv\")\ndf_stores = pd.read_csv(\"..\/working\/stores.csv\")\ndf_items = pd.read_csv(\"..\/working\/items.csv\")\ndf_trans = pd.read_csv(\"..\/working\/transactions.csv\")\ndf_oil = pd.read_csv(\"..\/working\/oil.csv\")\ndf_holiday = pd.read_csv(\"..\/working\/holidays_events.csv\")","46897b02":"df_train.shape","8981c86f":"df_train.info()","fe79e1ff":"df_train.head()","db1c3c20":"df_train.tail()","f9fe9ba2":"train_columns = df_train.columns.tolist()\n\nfor i in range(0, len(train_columns)):\n    print(\"***\",train_columns[i],\"***\")\n    print(df_train[train_columns[i]].nunique(),'\uac1c')\n    print(df_train[train_columns[i]].value_counts(normalize=False, sort=True, dropna=False))","3603fcc5":"df_test.shape","cf67fb5d":"df_test.info()","f7b168c4":"df_test.head()","f10af0e5":"df_test.tail()","1abd2a35":"test_columns = df_test.columns.tolist()\n\nfor i in range(0, len(test_columns)):\n    print(\"***\",test_columns[i],\"***\")\n    print(df_test[test_columns[i]].nunique(),'\uac1c')\n    print(df_test[test_columns[i]].value_counts(normalize=False, sort=True, dropna=False))","c21c746b":"# onpromotion true \ub370\uc774\ud130 \ud655\uc778\n\ndf_test[df_test['onpromotion'] == True ]","cd065d89":"df_sub.head()","9d49d2df":"df_stores.shape","1002fd8c":"df_stores.head()","984fe11e":"df_stores.tail()","581ef6ea":"stores_columns = df_stores.columns.tolist()\n\nfor i in range(1, len(stores_columns)):\n    print(\"***\",stores_columns[i],\"***\")\n    print(df_stores[stores_columns[i]].nunique(),'\uac1c')\n    print(df_stores[stores_columns[i]].value_counts(normalize=False))\n","c2c8f7f3":"df_stores['city'].nunique()","e2b412ec":"df_items.shape","bc8b430b":"df_items.info()","88ae1d18":"df_items.head()","be3c2e83":"df_items.tail()","716b67ea":"item_columns = df_items.columns.tolist()\n\nfor i in range(0, len(item_columns)):\n    print(\"***\",item_columns[i],\"***\")\n    print(df_items[item_columns[i]].nunique(),'\uac1c')\n    print(df_items[item_columns[i]].value_counts(normalize=False))","556075c4":"# perishable \uc81c\ud488\uc5d0 \uc8fc\ub85c \uc5b4\ub358 \uce74\ud14c\uace0\ub9ac\uac00 \uc18d\ud558\ub294\uc9c0 \ud655\uc778\n\ndf_items[df_items['perishable'] == 1]['family'].value_counts(normalize=False)","6d5a8373":"df_trans.shape","4307a9aa":"df_trans.head()","483a7677":"df_trans.tail()","cdbb24ea":"df_trans['transactions'].describe()","3ce2c902":"trans_columns = df_trans.columns.tolist()\n\nfor i in range(0, len(trans_columns)):\n    print(\"***\",trans_columns[i],\"***\")\n    print(df_trans[trans_columns[i]].nunique(),'\uac1c')\n    print(df_trans[trans_columns[i]].value_counts(normalize=False))","390dbbae":"df_oil.shape","58af15da":"df_oil.info()","c4c272fe":"df_oil.head()","dd470689":"df_oil.tail()","3a8b7a4e":"oil_columns = df_oil.columns.tolist()\n\nfor i in range(0, len(oil_columns)):\n    print(\"***\",oil_columns[i],\"***\")\n    print(df_oil[oil_columns[i]].nunique(),'\uac1c')\n    print(df_oil[oil_columns[i]].value_counts(normalize=False, sort=True, dropna=False))","cbd637d0":"# NaN\uac12\uc774 \uc788\ub294 \uc77c\uc790 \ud655\uc778\n\ndf_oil[df_oil['dcoilwtico'] == 'NaN']\n# null_value = df_oil.loc[[0],['dcoilwtico']].to_string\n# null_value","faf59222":"df_holiday.shape","5610c9ef":"df_holiday.info()","0ab35752":"df_holiday.head(50)","c9db2297":"df_holiday.tail()","51af7275":"df_holiday[df_holiday['type'] == 'Bridge']","576089ef":"df_holiday[df_holiday['type'] == 'Work Day']","c4001cbc":"holiday_columns = df_holiday.columns.tolist()\n\nfor i in range(0, len(holiday_columns)):\n    print(\"***\",holiday_columns[i],\"***\")\n    print(df_holiday[holiday_columns[i]].nunique(),'\uac1c')\n    print(df_holiday[holiday_columns[i]].value_counts(normalize=False, sort=True, dropna=False))","22cf5d47":"import seaborn as sns \nimport matplotlib.pyplot as plt\n%matplotlib inline","1d44395e":"df_stores.head()","73a9b1da":"# Stores distribution across cities\n\nfig, ax = plt.subplots()\nfig.set_size_inches(8, 8)\nax = sns.countplot(y=df_stores['city'], data=df_stores) ","16e75cfb":"# Stores distribution across states\n\nfig, ax = plt.subplots()\nfig.set_size_inches(8, 8)\nax = sns.countplot(y=df_stores['state'], data=df_stores) ","da5ff6d5":"# Different types of stores\n\nfig, ax = plt.subplots()\nfig.set_size_inches(10, 7)\nax = sns.countplot(x=\"type\", data=df_stores, palette=\"Set2\")","5cb33cba":"# Types of stores across cities\n\nct = pd.crosstab(df_stores.city, df_stores.type)\nct","fd9db23b":"ct.plot.bar(figsize = (12, 6), stacked=True)\nplt.legend(title = 'type')\n\nplt.show()","ea0174bd":"# Types of stores across states\n\nct = pd.crosstab(df_stores.state, df_stores.type)\n\nct.plot.bar(figsize = (12, 6), stacked=True)\nplt.legend(title = 'type')\n\nplt.show()","d6b96822":"df_stores.sort_values(by=['state'])","b6f6086b":"# Distribution of different clusters\n\nfig, ax = plt.subplots()\nfig.set_size_inches(12, 7)\nax = sns.countplot(x=\"cluster\", data=df_stores)","00be1309":"# Types against clusters\n\nplt.style.use('seaborn-white')\n\ntype_cluster = df_stores.groupby(['type','cluster']).size()\ntype_cluster\n# diffrence between .size() vs .count()\n# => size includes NaN values, count does not:","98a4f371":"type_cluster.unstack().plot(kind='bar',stacked=True, colormap= 'PuBu', figsize=(13,11),  grid=False)\nplt.title('Stacked Barplot of Store types and their cluster distribution', fontsize=18)\nplt.ylabel('Count of clusters in a particular store type', fontsize=16)\nplt.xlabel('Store type', fontsize=16)\nplt.show()","eabc402b":"# cluster of stores across the different cities\n\nplt.style.use('seaborn-white')\ncity_cluster = df_stores.groupby(['city','cluster']).store_nbr.size()\ncity_cluster.unstack().plot(kind='bar',stacked=True, colormap= 'viridis', figsize=(13,11),  grid=False)\nplt.title('Stacked Barplot of Store cluster opened for each city')\nplt.ylabel('Count of stores for a particular city')\nplt.show()","210611b0":"df_items.head()","be08c120":"# Distribution of various families of items\n\nfig, ax = plt.subplots()\nfig.set_size_inches(12, 8)\nax = sns.countplot(y = \"family\", data = df_items)","aca9020b":"# Distribution of perishable goods by family\n\nct = pd.crosstab(df_items.family, df_items.perishable)\nct.plot.bar(figsize = (12, 7), stacked=True)\nplt.legend(title='perishable')\nplt.show()","f37ca759":"# Distrbution of number of unique classes per family of items.\n\nxc = df_items.groupby(['family'])['class'].nunique()\nxc","13d614b3":"xc2 = df_items.groupby(['family'])['class'].size()\nxc2","74e5377e":"fig, ax = plt.subplots()\nfig.set_size_inches(12, 6)\nxc.plot.bar(color='skyblue')\nplt.show()","14eb2746":"df_trans.head()","52a6eaee":"# \uc2a4\ud1a0\uc5b4\ubcc4 \ucd1d \uc5c5\ubb34\ub7c9 \uaddc\ubaa8\n\namount = (df_trans.groupby(['store_nbr']).sum())\nfig, ax = plt.subplots()\nfig.set_size_inches(12, 8)\nax = sns.barplot(x = amount.index, y= \"transactions\", data = amount)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 75, fontsize = 9)","0943063c":"amount_trans = pd.merge(amount, df_stores, left_on='store_nbr', right_on='store_nbr', how='left')\namount_trans.sort_values(by=['transactions'], ascending=False)","fae0f0be":"# \uc2a4\ud1a0\uc5b4\ubcc4 \ucd1d \uc5c5\ubb34\ub7c9 \ud68c\uc218\n\nnumber = (df_trans.groupby(['store_nbr']).count())\nfig, ax = plt.subplots()\nfig.set_size_inches(12, 8)\nax = sns.barplot(x = number.index, y= \"transactions\", data = number)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 75, fontsize = 9)","bf3cdb92":"number_trans= pd.merge(number, df_stores, left_on='store_nbr', right_on='store_nbr', how='left')\nnumber_trans.sort_values(by=['transactions'])","3170d12a":"# \uc77c\uc790\ubcc4 \ucd1d \uc5c5\ubb34\ub7c9 \uaddc\ubaa8\n\namount_date = (df_trans.groupby(['date']).sum())\nfig, ax = plt.subplots()\nfig.set_size_inches(12, 8)\nax = sns.barplot(x = amount_date.index, y= \"transactions\", data = amount_date)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 75, fontsize = 9)","aa786fe8":"amount_date","e14a78bb":"# \uc77c\uc790\uc815\ubcf4 \uc5f0\/\uc6d4\/\uc77c\ub85c \ub098\ub204\uae30\n\nre_trans = df_trans.copy()\ndates = re_trans['date'].str.split('-')\nprint(dates)","04daf9ab":"re_trans['year'] = dates.str.get(0)\nre_trans['month'] = dates.str.get(1)\nre_trans['day'] = dates.str.get(2)\n# re_trans.drop('date',inplace=True, axis=1)\nre_trans = re_trans[['year','month','day','store_nbr','transactions']]\nre_trans","c9817fae":"# \uc77c\uc77c \uc5c5\ubb34\ub7c9\uc774 \uac00\uc7a5 \ud070 \ub370\uc774\ud130\ndf_trans[df_trans['transactions'] == df_trans['transactions'].max()]","82890927":"# transactions\uc591\uc774 \uac00\uc7a5 \ub9ce\uc740 \ub0a0(top 100)\ntop_trans = df_trans.nlargest(100, 'transactions')\nprint(top_trans.date.unique())","1dd556f4":"# \uc77c\uc782 \uc5c5\ubb34\ub7c9\uc774 \uac00\uc7a5 \uc791\uc740 \ub370\uc774\ud130\ndf_trans[df_trans['transactions'] == df_trans['transactions'].min()]","d0b36098":"# transactions\uc591\uc774 \uac00\uc7a5 \uc801\uc740 \ub0a0(top 100)\nlower_transe = df_trans.sort_values('transactions', ascending=True).head(100)\nprint(lower_transe.date.unique())","a37a7868":"# \uc5f0\ub3c4\ubcc4 \ucd1d \uac70\ub798\ub7c9 \ubcc0\ud654\n\nyear_amount = (re_trans.groupby(['year']).sum())\nfig, ax = plt.subplots()\nfig.set_size_inches(12, 8)\nax = sns.barplot(x = year_amount.index, y= \"transactions\", data = year_amount)\nax.set_xticklabels(ax.get_xticklabels(), fontsize = 9)","2825d5c9":"year_amount[['transactions']]","29144b94":"re_trans","34208960":"# \uac01 \uc6d4\ubcc4 \uc5c5\ubb34\ub7c9 \ubcc0\ud654 \ucd94\uc774 (x= year \/ hue = month)","3d50feed":"df_oil.head()","40ed9344":"# missingno \ub77c\uc774\ube0c\ub7ec\ub9ac \ud65c\uc6a9\ud558\uc5ec null\uac12 \ud655\uc778\n\nimport missingno as msno\n\nmsno.matrix(df_oil)","7a70641e":"# oil \uac00\uaca9 \ucd5c\ub300\uce58 \uc77c\uc790 \ud655\uc778\ndf_oil[df_oil['dcoilwtico'] == df_oil['dcoilwtico'].max()]","447ef003":"# oil \uac00\uaca9 \ucd5c\uc18c\uce58 \uc77c\uc790 \ud655\uc778\ndf_oil[df_oil['dcoilwtico'] == df_oil['dcoilwtico'].min()]","f0b232f6":"# ax = sns.boxplot(x=df_oil[\"dcoilwtico\"])\nsns.boxplot(x = \"dcoilwtico\",  data = df_oil)\nplt.show()","0d2c0862":"df_oil['dcoilwtico'].describe()","8cd2b9b2":"# \uc624\uc77c\uac00\uaca9\uc758 \ubcc0\ud654\ucd94\uc774\nsns.lineplot(data=df_oil, x=\"date\", y=\"dcoilwtico\")","a91af250":"df_holiday.head()","2c738e9b":"fig, ax = plt.subplots()\nfig.set_size_inches(8, 6)\nax = sns.countplot( y=\"type\", data=df_holiday, palette=\"RdBu\")","a1c9c804":"plt.style.use('seaborn-white')\nholiday_local_type = df_holiday.groupby(['locale_name', 'type']).size()\nholiday_local_type.unstack().plot(kind='bar',stacked=True, colormap= 'magma_r', figsize=(12,10),  grid=False)\nplt.title('Stacked Barplot of locale name against event type')\nplt.ylabel('Count of entries')\nplt.show()","c2720edc":"## 5) holidays_events","0d8103de":"## 3) transactions","6099f1f9":"## 5) items.csv\n\n- Item metadata, including family, class, and perishable.\n- NOTE: Items marked as perishable have a score weight of 1.25; otherwise, the weight is 1.0.\n\n","95261003":"## 2) items","6a742e25":"## 4) stores.csv\n- Store metadata, including city, state, type, and cluster.\n- cluster is a grouping of similar stores.\n","70a5b91b":"## 1) stores","c8e291d9":"## 6) transactions.csv\n\n- The count of sales transactions for each date, store_nbr combination. Only included for the training data timeframe.\n\n","cf3cdf19":"## 3) sample_submission.csv","258e072e":"## 8) holidays_events.csv\n- Holidays and Events, with metadata\n- NOTE: Pay special attention to the transferred column. A holiday that is transferred officially falls on that calendar day, but was moved to another date by the government. A transferred day is more like a normal day than a holiday. To find the day that it was actually celebrated, look for the corresponding row where type is Transfer. For example, the holiday Independencia de Guayaquil was transferred from 2012-10-09 to 2012-10-12, which means it was celebrated on 2012-10-12. Days that are type Bridge are extra days that are added to a holiday (e.g., to extend the break across a long weekend). These are frequently made up by the type Work Day which is a day not normally scheduled for work (e.g., Saturday) that is meant to payback the Bridge.\n- Additional holidays are days added a regular calendar holiday, for example, as typically happens around Christmas (making Christmas Eve a holiday).\n","85cec00f":"## 4) oil","88567042":"## 1) train.csv","3fa84142":"# Basic Visualization","4ccf940d":"## 2) test.csv\n- Test data, with the date, store_nbr, item_nbr combinations that are to be predicted, along with the onpromotion information.\n- NOTE: The test data has a small number of items that are not contained in the training data. Part of the exercise will be to predict a new item sales based on similar products.\n- The public \/ private leaderboard split is based on time. All items in the public split are also included in the private split.\n","9c33a50f":"# 0. Load Data","bd30f8e2":"# 1. Basic EDA","26c886d1":"## 7) oil.csv\n\n- Daily oil price. Includes values during both the train and test data timeframe. (Ecuador is an oil-dependent country and it's economical health is highly vulnerable to shocks in oil prices.)\n\n"}}