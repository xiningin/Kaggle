{"cell_type":{"3c98addf":"code","a6c20c43":"code","3b0238e7":"code","267e8712":"code","a20e63a8":"code","12c5067e":"code","5e74023b":"code","db2e71a1":"code","8ee458cf":"code","a53223ee":"code","a0a19778":"code","7cc028bd":"code","3e98791d":"markdown","df07c0a5":"markdown","7051ca93":"markdown","9d2640e1":"markdown","cfb87922":"markdown"},"source":{"3c98addf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a6c20c43":"PATH = '..\/input\/dsb_2019\/'\n\nproduct_master = pd.read_csv(PATH+'product_master.csv')\ntraining_data = pd.read_csv(PATH+'training_data.csv')\ncustomer_master = pd.read_csv(PATH+'customer_master.csv')","3b0238e7":"training_data.head()","267e8712":"print('Minimum date is', min(training_data.Bill_Date))\nprint('Maximum date is',max(training_data.Bill_Date))\n\n","a20e63a8":"\ncounts = training_data.groupby(['Customer_Id']).Bill_Date.nunique()\ncounts.name = 'Number of Previous Visits'","12c5067e":"#Churn Definition: If the customer has not come in the performance window, we mark 1 else 0. Ie, whether his last visit occurs before the performance window\n\ny_var = training_data.groupby(['Customer_Id']).Bill_Date.max() < '2018-06-16'\ny_var.name = 'Churned'\ny_var","5e74023b":"Dataset = counts.to_frame().join(y_var)\nDataset.head(100)","db2e71a1":"# Distribution of customers who have churned or not\nDataset.Churned.value_counts()","8ee458cf":"# Model fitting\nimport pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt \nplt.rc(\"font\", size=14)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nsns.set(style=\"white\")\nsns.set(style=\"whitegrid\", color_codes=True)\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\n\n# Dependent variable\n\nX = Dataset['Number of Previous Visits']\ny = Dataset['Churned']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nlogreg = LogisticRegression()\n\nX_train= X_train.values.reshape(-1, 1)\nX_test= X_test.values.reshape(-1, 1)\ny_train = y_train.values.reshape(-1, 1)\ny_test = y_test.values.reshape(-1, 1)\n\nlogreg.fit(X_train, y_train)","a53223ee":"y_pred = logreg.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))","a0a19778":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nlogit_roc_auc = roc_auc_score(y_test, logreg.predict(X_test))\nfpr, tpr, thresholds = roc_curve(y_test, logreg.predict_proba(X_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","7cc028bd":"output = logreg.predict(X.values.reshape(-1,1))\noutput = pd.DataFrame(output)\noutput['Customer_Id'] = X.index\noutput.to_csv('Output.csv',index = False)\n","3e98791d":"> Simple Churn Model: Check the range of data available","df07c0a5":"Training Data","7051ca93":"Usual hygeine, divide into train and test and see if we can predict who has churned","9d2640e1":"Lets assume we are building a churn model for the last 3 months, so we need to look at the data before 3 months, ie; 3 months prior to 15th September ( aka the observation window) and see if the person comes back in the next 3 months (The performance window). \n\nSo observation window here is **1st January 2016 - 15th June 2018**\n   Performance window here is **16th June 2018 - 15th September 2018**","cfb87922":"Lets build a model with just 1 variable, the customer's number of visits previously. To see if we can predict correctly whether the person will come back or not in the next 3 months"}}