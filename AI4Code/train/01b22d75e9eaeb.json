{"cell_type":{"708e8c27":"code","17f48e1c":"code","423c331a":"code","eaa0a9d1":"code","c67a473f":"code","e19d3be3":"code","9e41b551":"code","617b4782":"code","1bdefaf1":"code","b991a609":"code","d5c62bcf":"code","55b35824":"code","e8765c12":"code","fa880806":"code","dfe1eb10":"markdown","6a235e1c":"markdown","1e84cd6a":"markdown","fa477eb0":"markdown"},"source":{"708e8c27":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.image as mpimg \nimport tensorflow as tf \nimport random \nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport tensorflow_hub as hub \nfrom tensorflow.keras import layers\nimport plotly.express as px\nimport plotly.graph_objects as go \n\nimport os","17f48e1c":"train_dir = '..\/input\/dogs-cats-images\/dataset\/training_set'\ntest_dir = '..\/input\/dogs-cats-images\/dataset\/test_set'","423c331a":"class_names = os.listdir(train_dir)\nfor folder in class_names:\n    train_images = len(os.listdir(train_dir + '\/' + folder))\n    test_images = len(os.listdir(test_dir + '\/' + folder))\n    print(folder, train_images, test_images)","eaa0a9d1":"# a function to plot a random image \ndef plot_random_image(train_dir):\n    random_dog_image = random.choice(os.listdir(train_dir + '\/' + 'dogs'))\n    random_cat_image = random.choice(os.listdir(train_dir + '\/' + 'cats'))\n    dog_img = mpimg.imread(train_dir + '\/' + 'dogs' + '\/' + random_dog_image)\n    cat_img = mpimg.imread(train_dir + '\/' + 'cats' + '\/' + random_cat_image)\n    \n    # plotting the images \n    plt.figure(figsize = (15,10))\n    \n    plt.subplot(1,2,1)\n    plt.imshow(dog_img)\n    plt.title('Dog {}'.format(dog_img.shape))\n    plt.axis(False)\n    \n    plt.subplot(1,2,2)\n    plt.imshow(cat_img)\n    plt.title('Cat {}'.format(cat_img.shape))\n    plt.axis(False);\n    \n# a function to create a model \ndef create_model(model_url, num_classes = 2):\n  # download the feature extractor model and save it \n    feature_extractor_layer = hub.KerasLayer(\n      model_url,\n      trainable = False, # freezes the already learned patterns \n      name = 'feature_extraction_layer',\n      input_shape = (224,224,3)\n    )\n\n  # model creation \n    model = tf.keras.Sequential([\n    feature_extractor_layer,\n    layers.Dense(\n        1,\n        activation = 'sigmoid',\n        name = 'output_layer'\n     )\n   ])\n\n    return model \n\n# for plotting the model loss \ndef plot_loss(history):\n    df = pd.DataFrame(history.history)\n    \n    fig = go.Figure()\n    # graph 1\n    fig.add_trace(\n        go.Scatter(\n            x = df.index,\n            y = df['loss'],\n            mode = 'lines',  # line type  \n            name = 'loss',\n            line = {         # line attributes\n                'color': 'blue'\n            }\n        )\n    )\n\n    # graph 2\n    fig.add_trace(\n        go.Scatter(\n            x = df.index,\n            y = df['val_loss'],\n            mode = 'lines', # line type \n            name = 'val_loss',\n            line = {        # line attributes\n                'color': 'red'\n            }\n        )\n    )\n\n    # changing the features of the plot \n    fig.update_layout(\n        title = 'Model Loss', # adding the title \n        xaxis = dict(           # attribures for x axis \n            showline = True,\n            showgrid = True,\n            linecolor = 'black',\n            tickfont = dict(\n                family = 'Calibri'\n            )\n        ),\n        yaxis = dict(           # attribures for y axis \n            showline = True,\n            showgrid = True,\n            linecolor = 'black',\n            tickfont = dict(\n                family = 'Times New Roman'\n            )\n        ),\n        plot_bgcolor = 'white'  # background color for the graph\n    )\n    \n    return fig\n\n# for plotting model accuracy\ndef plot_accuracy(history):\n    df = pd.DataFrame(history.history)\n    \n    fig = go.Figure()\n    # graph 1\n    fig.add_trace(\n        go.Scatter(\n            x = df.index,\n            y = df['accuracy'],\n            mode = 'lines',  # line type  \n            name = 'accuracy',\n            line = {         # line attributes\n                'color': 'green'\n            }\n        )\n    )\n\n    # graph 2\n    fig.add_trace(\n        go.Scatter(\n            x = df.index,\n            y = df['val_accuracy'],\n            mode = 'lines', # line type \n            name = 'val_accuracy',\n            line = {        # line attributes\n                'color': 'orange'\n            }\n        )\n    )\n\n    # changing the features of the plot \n    fig.update_layout(\n        title = 'Model Accuracy', # adding the title \n        xaxis = dict(           # attribures for x axis \n            showline = True,\n            showgrid = True,\n            linecolor = 'black',\n            tickfont = dict(\n                family = 'Calibri'\n            )\n        ),\n        yaxis = dict(           # attribures for y axis \n            showline = True,\n            showgrid = True,\n            linecolor = 'black',\n            tickfont = dict(\n                family = 'Times New Roman'\n            )\n        ),\n        plot_bgcolor = 'white'  # background color for the graph\n    )\n    \n    return fig","c67a473f":"plot_random_image(train_dir)","e19d3be3":"# set the seed \ntf.random.set_seed(42)\n\n# preprocess the data (scaling)\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\n\n# import data from directories and turn it into batches \ntrain_data = train_datagen.flow_from_directory(\n    directory = train_dir,\n    batch_size = 32,\n    target_size = (224,224),\n    class_mode = 'binary',\n    seed = 42\n)\n\ntest_data = test_datagen.flow_from_directory(\n    directory = test_dir,\n    batch_size = 32,\n    target_size = (224,224),\n    class_mode = 'binary',\n    seed = 42\n)","9e41b551":"# building a CNN model \nmodel_1 = tf.keras.models.Sequential([\n  tf.keras.layers.Conv2D(\n      filters = 10,\n      kernel_size = 3,\n      activation = 'relu',\n      input_shape = (224,224,3)\n  ),\n\n  tf.keras.layers.Conv2D(\n      10,\n      3,\n      activation = 'relu'\n  ),\n\n  tf.keras.layers.MaxPool2D(\n      pool_size = 2,\n      padding = 'valid'\n  ),\n\n  tf.keras.layers.Conv2D(\n      10,\n      3,\n      activation = 'relu'\n  ),\n\n  tf.keras.layers.Conv2D(\n      10,\n      3,\n      activation = 'relu'\n  ),\n\n  tf.keras.layers.MaxPool2D(\n      pool_size = 2,\n  ),\n\n  tf.keras.layers.Flatten(), \n\n  tf.keras.layers.Dense(\n      1,\n      activation = 'sigmoid'\n  )\n])\n\n\n# compile the model\nmodel_1.compile(\n    loss = tf.keras.losses.BinaryCrossentropy(),\n    optimizer = tf.keras.optimizers.Adam(),\n    metrics = ['accuracy']\n)\n\n# Fit the model\nhistory_1 = model_1.fit(\n    train_data,\n    epochs = 5,\n    steps_per_epoch = len(train_data),\n    validation_data = test_data,\n    validation_steps = int(0.25 * len(test_data))\n)","617b4782":"results_1 = model_1.evaluate(test_data)\nresults_1","1bdefaf1":"plot_loss(history_1)","b991a609":"plot_accuracy(history_1)","d5c62bcf":"efficientnet_url = 'https:\/\/tfhub.dev\/tensorflow\/efficientnet\/b0\/feature-vector\/1'\n\n# model creation\nefficientnet_model = create_model(\n    efficientnet_url,\n    num_classes = 2\n)\n\n# compile the model \nefficientnet_model.compile(\n    loss = tf.keras.losses.BinaryCrossentropy(),\n    optimizer = tf.keras.optimizers.Adam(),\n    metrics = ['accuracy']\n)\n\n# fitting the model \nefficientnet_history = efficientnet_model.fit(\n    train_data,\n    epochs = 5,\n    steps_per_epoch = len(train_data),\n    validation_data = test_data,\n    validation_steps = int(0.25 * len(test_data))\n)","55b35824":"efficientnet_results = efficientnet_model.evaluate(test_data)\nefficientnet_results","e8765c12":"plot_loss(efficientnet_history)","fa880806":"plot_accuracy(efficientnet_history)","dfe1eb10":"## Imports","6a235e1c":"## EfficientNetB0","1e84cd6a":"## CNN Model","fa477eb0":"## Important Functions "}}