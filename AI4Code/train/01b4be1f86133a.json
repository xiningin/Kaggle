{"cell_type":{"b8afb287":"code","3fa05e01":"code","522e66a1":"code","ed6bbb70":"code","fb99a0cc":"code","685c8b0b":"code","f491cf13":"code","79e1168a":"code","b12fc334":"code","3349dfd9":"code","026159d1":"code","694e1176":"code","6fb84b9e":"code","30988866":"code","510d0130":"code","cce50483":"code","ef5c6482":"code","f31b0da6":"code","23fddebc":"code","8e464917":"markdown","05175a7d":"markdown","236eaa52":"markdown","36dcc637":"markdown","24fd5ee5":"markdown","b1e508bf":"markdown","498b805d":"markdown","4115359e":"markdown","b7a8bf09":"markdown","9b0cc17f":"markdown","8225e96d":"markdown","e21b5ac2":"markdown","9ed81db3":"markdown","c4e23e7f":"markdown","b7af2599":"markdown","c5b4a17f":"markdown"},"source":{"b8afb287":"!pip install yfinance","3fa05e01":"%matplotlib inline \nimport os\nimport random\nimport pandas_datareader.data as web\nimport yfinance as yf\nimport pandas as pd\nimport datetime\nimport numpy as np\nfrom ipywidgets import interact, fixed, IntSlider\nimport matplotlib.pyplot as plt\nfrom numpy.linalg import cholesky\nimport seaborn as sns","522e66a1":"cached_data={}\ndef stock_hist(symbol, start=None, end=None, cached_data=cached_data):\n    '''Convenience function to get cached data '''\n    if not symbol in cached_data:\n        cached_data[symbol] = yf.download(symbol)\n        print(F'Loaded {symbol} num values = {len(cached_data[symbol])}')\n    return cached_data[symbol]","ed6bbb70":"tickers = ['ITC.NS', 'TCS.NS','HCLTECH.NS','INFY.NS','LT.NS','HDFCBANK.NS']\nN = len(tickers)\nhistorical  = pd.concat((stock_hist(symbol)['Adj Close'] for symbol in tickers), axis=1, keys=tickers).dropna(axis=0)","fb99a0cc":"_ = (historical).plot(figsize=(20,10),title='Stocks Price over time')\nhistorical.head(2)","685c8b0b":"returns = (historical\/historical.iloc[0]).fillna(method='backfill')\ndaily_pct_change = np.log(returns.pct_change() + 1)\nvols = daily_pct_change.std() * np.sqrt(252)","f491cf13":"_ = returns.plot(ylim=(0,130), figsize=(20,8),title='Stocks Cumulative Return over time')","79e1168a":"returns['PORTFOLIO'] = returns.iloc[:,0:N].sum(axis=1) \/N","b12fc334":"plt.figure(figsize=(20,10))\nlines = plt.plot(returns.drop('PORTFOLIO', axis=1), alpha=0.1)\nplt.ylim((0,130))\nplt.title('Portfolio Cumulative Return Over Time')\nplt.plot(returns['PORTFOLIO'], alpha=1)\nplt.legend(returns.columns)\nplt.show()","3349dfd9":"daily_pct_change = np.log(returns.pct_change() + 1)\nvols = daily_pct_change.std() * np.sqrt(252) # Annual Volatility \n\ntickers=['ITC.NS', 'TCS.NS','HCLTECH.NS','INFY.NS','LT.NS','HDFCBANK.NS']\nprices = [stock_hist(symbol)['Adj Close'] for symbol in tickers]\nprices = pd.concat((stock_hist(symbol)['Adj Close'] for symbol in tickers), axis=1, keys=tickers).dropna(axis=0)\nprices.head(2)","026159d1":"def diversicheck(symbols, start_day=0, time_horizon=365, **active):\n    filtered = [symbol for symbol in symbols if active.get(symbol, True)]\n    prices = pd.concat((stock_hist(symbol)['Adj Close'] for symbol in filtered), axis=1, keys=filtered).dropna(axis=0)\n    \n    \n    start_dates = prices.index[0] + datetime.timedelta(days = start_day)\n    end_dates = start_dates + datetime.timedelta(days=time_horizon)\n    \n    prices = prices.loc[start_dates:end_dates]\n    \n    unit_pos = prices \/ prices.iloc[0,:]\n    basket = unit_pos.sum(axis=1) \/ unit_pos.shape[1]\n    unit_pos.plot(figsize=(20,10),title='Stocks Cumulative Return over time', alpha=0.3)\n    basket.plot(figsize=(20,10),legend = True)\n    print(f'backtest from {start_dates} to {end_dates}')","694e1176":"# cached_data ={}\nprf_stocks = ['ITC.NS', 'TCS.NS','HCLTECH.NS','INFY.NS','LT.NS','HDFCBANK.NS']\nactive = dict(zip(prf_stocks, [True] * len(prf_stocks)))\n_ = interact(diversicheck, symbols =fixed(prf_stocks), start_day=IntSlider(min=0,max=252*10),\n             time_horizon=IntSlider(min=0,value=365,max=252*5),**active)","6fb84b9e":"prf_prices = pd.concat((stock_hist(symbol)['Adj Close'] for symbol in prf_stocks), axis =1, keys=prf_stocks).dropna(axis=0)\nprf_returns = (prf_prices.pct_change() + 1)[1:]\nlog_returns = np.log(prf_returns)\ncorr = log_returns.corr()","30988866":"fig, ax = plt.subplots(figsize=(10,8)) \nsns.heatmap(corr, annot=True)","510d0130":"vols = log_returns.std() * np.sqrt(252)\navg_return = (prf_returns-1).mean()","cce50483":"fig, ax = plt.subplots(figsize=(10,8))\nax.scatter(vols, avg_return*252)\nax.set_xlabel('Annualized Volatility')\nax.set_ylabel('Annualized Average Return')\nax.set_xlim(0,0.6)\nfor i, txt in enumerate(prf_stocks):\n    ax.annotate(txt, xy=(vols[i], avg_return[i]*252))","ef5c6482":"number_of_simulations = 1000\ninvestment_horizon = 60\nsimulated = pd.DataFrame([(prf_returns.iloc[random.choices(\n    range(len(prf_returns)), k=investment_horizon)]).mean(axis=1).cumprod().values \n                         for x in range(number_of_simulations)]).T\nsimulated.head(3)","f31b0da6":"simulated.plot(legend=False, linewidth=1, alpha=0.1, color='blue', figsize=(20,5))\nsimulated.quantile([0.05, 0.50, 0.95], axis=1).T.plot(figsize=(20,5))","23fddebc":"simulated.to_csv('testing1.csv', index=0) # Save Result","8e464917":"It seems fine with me with no obvious breaks and gaps between data. Also, all stock data is available at t= 0 which is good","05175a7d":"We basically plug in the ticker as parameters and we can get the whole history of the particular stock","236eaa52":"# 1 Stock Scraping using yfinance ","36dcc637":"It\u2019s probably a good practice to backfill any missing values inbetween the dates, and chop off data so that selected stocks have the same length","24fd5ee5":"# 2 Portfolio return Backtesting using Interactive Chart","b1e508bf":"If you like this kernal, Upvote!! Upvote!! Upvote!!","498b805d":"# 4 Monti-Carlo Simulation of Portfolio Return","4115359e":"However, there\u2019s nothing really concrete. Hence, we need simulation to see how our portfolio actually performed in numerical terms if history repeats in similar favour (similar return distribution).","b7a8bf09":"For simplicity, we used 1\/N equal-weighted portfolio, meaning that each stock has 1\/N weight. Feel free to build your own portfolio by replacing returns[\u2018PORTFOLIO\u2019].","9b0cc17f":"Backfill is usually used in time-series as it doesn\u2019t spoil the data from the future to the past.","8225e96d":"Basically, we randomly select the return from past and form synthetic returns for all the stocks over time-horizon (k = 60 days in this case), and we calculated our portfolio based on those synthetic returns. In this example, we simulate for 1,000 times, and get the confidence interval of our portfolio value after 60 days.","e21b5ac2":"We used cached_data to avoid repeatedly downloading the stock information again. All stock info would be stored in cached_data in a dictionary format, so that we could save it\/reuse them later.","9ed81db3":"# 3 Correlation Plot & Risk-Reward Chart","c4e23e7f":"We basically find that we need to consider more stocks (increasing n to lower volatility) and select stocks from different industry (lower non-systematic risk) to avoid such a highly correlated composition of stocks.","b7af2599":"# Basic stock analysis","c5b4a17f":"Thank You!"}}