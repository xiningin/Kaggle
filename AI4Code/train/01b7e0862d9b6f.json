{"cell_type":{"07cf39f9":"code","5f2a8c93":"code","7393e5bd":"code","91352a4b":"code","5f74e7c7":"code","fa22f1b5":"code","846d17af":"code","57416360":"code","77a64b58":"code","db1169c7":"code","47825fb9":"code","dbb8e1fc":"code","490c8c37":"code","ec8e9682":"code","2c4df9be":"code","be716e06":"code","8c1c52f9":"code","eb3c2869":"code","ac7f9eee":"code","7fc30946":"code","f1426b3a":"code","2cc3cb48":"code","a4947e76":"code","5eeff53e":"code","c522c124":"code","49da513d":"code","820b830c":"code","b7f3802a":"code","01fc172f":"code","66e4c2ee":"code","a5eeee1e":"code","f230b517":"code","63c9c6f8":"code","1c7a6c10":"code","db0a15db":"code","15c805bf":"code","b6b46347":"code","1f188dd0":"code","53577c33":"code","12d62fc5":"code","d7d355e7":"code","b5072b98":"code","c7ed8e81":"code","51d07df7":"code","79492335":"code","fad8524a":"code","fd32f454":"code","1501a4b8":"code","b7d5d3bd":"code","80923dbc":"code","eef454cb":"code","e5592345":"code","1579b32f":"code","a84f29e1":"code","962fb485":"markdown"},"source":{"07cf39f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5f2a8c93":"building_df = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/building_metadata.csv\")\nweather_train = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/weather_train.csv\")\ntrain = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/train.csv\")","7393e5bd":"building_df","91352a4b":"weather_train","5f74e7c7":"train","fa22f1b5":"train = train.merge(building_df, left_on = \"building_id\", right_on = \"building_id\", how = \"left\")","846d17af":"weather_train","57416360":"train = train.merge(weather_train, left_on = [\"site_id\", \"timestamp\"], right_on = [\"site_id\", \"timestamp\"], how = \"left\")","77a64b58":"del weather_train","db1169c7":"train[\"timestamp\"] = pd.to_datetime(train[\"timestamp\"])\ntrain[\"hour\"] = train[\"timestamp\"].dt.hour\ntrain[\"day\"] = train[\"timestamp\"].dt.day\ntrain[\"weekend\"] = train[\"timestamp\"].dt.weekday\ntrain[\"month\"] = train[\"timestamp\"].dt.month","47825fb9":"#looks like there may be some errors with some of the readings\ntrain[train[\"site_id\"] == 0].plot(\"timestamp\", \"meter_reading\")","dbb8e1fc":"train[train[\"site_id\"] == 2].plot(\"timestamp\", \"meter_reading\")","490c8c37":"train[[\"hour\", \"day\", \"weekend\", \"month\"]]","ec8e9682":"train = train.drop(\"timestamp\", axis = 1)","2c4df9be":"from sklearn.preprocessing import LabelEncoder","be716e06":"le = LabelEncoder()\ntrain[\"primary_use\"] = le.fit_transform(train[\"primary_use\"])","8c1c52f9":"categoricals = [\"building_id\", \"primary_use\", \"hour\", \"day\", \"weekend\", \"month\", \"meter\"]","eb3c2869":"train","ac7f9eee":"drop_cols = [\"precip_depth_1_hr\", \"sea_level_pressure\", \"wind_direction\", \"wind_speed\"]","7fc30946":"numericals = [\"square_feet\", \"year_built\", \"air_temperature\", \"cloud_coverage\",\n              \"dew_temperature\"]","f1426b3a":"train[categoricals + numericals]","2cc3cb48":"feat_cols = categoricals + numericals","a4947e76":"train[\"meter_reading\"].value_counts()","5eeff53e":"#maybe remove some of the high outliers because of sensor error\n# train[\"meter_reading\"] = train[\"meter_reading\"].clip(upper = train[\"meter_reading\"].quantile(.999))","c522c124":"#uncomment to plot 100 highest consuming buildings\n# import matplotlib.pyplot as plt\n# top_buildings = train.groupby(\"building_id\")[\"meter_reading\"].mean().sort_values(ascending = False).iloc[:100]\n# for value in top_buildings.index:\n#     train[train[\"building_id\"] == value][\"meter_reading\"].rolling(window = 24).mean().plot()\n#     plt.show()","49da513d":"target = np.log1p(train[\"meter_reading\"])","820b830c":"del train[\"meter_reading\"]","b7f3802a":"train = train.drop(drop_cols + [\"site_id\", \"floor_count\"], axis = 1)","01fc172f":"train","66e4c2ee":"#Based on this great kernel https:\/\/www.kaggle.com\/arjanso\/reducing-dataframe-memory-size-by-65\ndef reduce_mem_usage(df):\n    start_mem_usg = df.memory_usage().sum() \/ 1024**2 \n    print(\"Memory usage of properties dataframe is :\",start_mem_usg,\" MB\")\n    NAlist = [] # Keeps track of columns that have missing values filled in. \n    for col in df.columns:\n        if df[col].dtype != object:  # Exclude strings            \n            # Print current column type\n            print(\"******************************\")\n            print(\"Column: \",col)\n            print(\"dtype before: \",df[col].dtype)            \n            # make variables for Int, max and min\n            IsInt = False\n            mx = df[col].max()\n            mn = df[col].min()\n            print(\"min for this col: \",mn)\n            print(\"max for this col: \",mx)\n            # Integer does not support NA, therefore, NA needs to be filled\n            if not np.isfinite(df[col]).all(): \n                NAlist.append(col)\n                df[col].fillna(mn-1,inplace=True)  \n                   \n            # test if column can be converted to an integer\n            asint = df[col].fillna(0).astype(np.int64)\n            result = (df[col] - asint)\n            result = result.sum()\n            if result > -0.01 and result < 0.01:\n                IsInt = True            \n            # Make Integer\/unsigned Integer datatypes\n            if IsInt:\n                if mn >= 0:\n                    if mx < 255:\n                        df[col] = df[col].astype(np.uint8)\n                    elif mx < 65535:\n                        df[col] = df[col].astype(np.uint16)\n                    elif mx < 4294967295:\n                        df[col] = df[col].astype(np.uint32)\n                    else:\n                        df[col] = df[col].astype(np.uint64)\n                else:\n                    if mn > np.iinfo(np.int8).min and mx < np.iinfo(np.int8).max:\n                        df[col] = df[col].astype(np.int8)\n                    elif mn > np.iinfo(np.int16).min and mx < np.iinfo(np.int16).max:\n                        df[col] = df[col].astype(np.int16)\n                    elif mn > np.iinfo(np.int32).min and mx < np.iinfo(np.int32).max:\n                        df[col] = df[col].astype(np.int32)\n                    elif mn > np.iinfo(np.int64).min and mx < np.iinfo(np.int64).max:\n                        df[col] = df[col].astype(np.int64)    \n            # Make float datatypes 32 bit\n            else:\n                df[col] = df[col].astype(np.float32)\n            \n            # Print new column type\n            print(\"dtype after: \",df[col].dtype)\n            print(\"******************************\")\n    # Print final result\n    print(\"___MEMORY USAGE AFTER COMPLETION:___\")\n    mem_usg = df.memory_usage().sum() \/ 1024**2 \n    print(\"Memory usage is: \",mem_usg,\" MB\")\n    print(\"This is \",100*mem_usg\/start_mem_usg,\"% of the initial size\")\n    return df, NAlist","a5eeee1e":"train, NAlist = reduce_mem_usage(train)","f230b517":"from sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nimport lightgbm as lgb\nnum_folds = 5\nkf = KFold(n_splits = num_folds, shuffle = False, random_state = 42)\nerror = 0\nmodels = []\nfor i, (train_index, val_index) in enumerate(kf.split(train)):\n    if i + 1 < num_folds:\n        continue\n    print(train_index.max(), val_index.min())\n    train_X = train[feat_cols].iloc[train_index]\n    val_X = train[feat_cols].iloc[val_index]\n    train_y = target.iloc[train_index]\n    val_y = target.iloc[val_index]\n    lgb_train = lgb.Dataset(train_X, train_y > 0)\n    lgb_eval = lgb.Dataset(val_X, val_y > 0)\n    params = {\n            'boosting_type': 'gbdt',\n            'objective': 'binary',\n            'metric': {'binary_logloss'},\n            'learning_rate': 0.1,\n            'feature_fraction': 0.8,\n            'bagging_fraction': 0.8,\n            'bagging_freq' : 5\n            }\n    gbm_class = lgb.train(params,\n                lgb_train,\n                num_boost_round=2000,\n                valid_sets=(lgb_train, lgb_eval),\n               early_stopping_rounds=20,\n               verbose_eval = 20)\n    \n    lgb_train = lgb.Dataset(train_X[train_y > 0], train_y[train_y > 0])\n    lgb_eval = lgb.Dataset(val_X[val_y > 0] , val_y[val_y > 0])\n    params = {\n            'boosting_type': 'gbdt',\n            'objective': 'regression',\n            'metric': {'rmse'},\n            'learning_rate': 0.5,\n            'feature_fraction': 0.8,\n            'bagging_fraction': 0.8,\n            'bagging_freq' : 5\n            }\n    gbm_regress = lgb.train(params,\n                lgb_train,\n                num_boost_round=2000,\n                valid_sets=(lgb_train, lgb_eval),\n               early_stopping_rounds=20,\n               verbose_eval = 20)\n#     models.append(gbm)\n\n    y_pred = (gbm_class.predict(val_X, num_iteration=gbm_class.best_iteration) > .5) *\\\n    (gbm_regress.predict(val_X, num_iteration=gbm_regress.best_iteration))\n    error += np.sqrt(mean_squared_error(y_pred, (val_y)))\/num_folds\n    print(np.sqrt(mean_squared_error(y_pred, (val_y))))\n    break\nprint(error)","63c9c6f8":"sorted(zip(gbm_regress.feature_importance(), gbm_regress.feature_name()),reverse = True)","1c7a6c10":"import gc\ndel train","db0a15db":"del train_X, val_X, lgb_train, lgb_eval, train_y, val_y, y_pred, target","15c805bf":"gc.collect()","b6b46347":"#preparing test data\ntest = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/test.csv\")\n# test, NAlist = reduce_mem_usage(test)\ntest = test.merge(building_df, left_on = \"building_id\", right_on = \"building_id\", how = \"left\")\ndel building_df\ngc.collect()","1f188dd0":"test","53577c33":"test[\"primary_use\"] = le.transform(test[\"primary_use\"])","12d62fc5":"test, NAlist = reduce_mem_usage(test)","d7d355e7":"test","b5072b98":"gc.collect()","c7ed8e81":"weather_test = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/weather_test.csv\")\nweather_test = weather_test.drop(drop_cols, axis = 1)","51d07df7":"weather_test","79492335":"test = test.merge(weather_test, left_on = [\"site_id\", \"timestamp\"], right_on = [\"site_id\", \"timestamp\"], how = \"left\")\ndel weather_test","fad8524a":"test[\"timestamp\"] = pd.to_datetime(test[\"timestamp\"])\ntest[\"hour\"] = test[\"timestamp\"].dt.hour.astype(np.uint8)\ntest[\"day\"] = test[\"timestamp\"].dt.day.astype(np.uint8)\ntest[\"weekend\"] = test[\"timestamp\"].dt.weekday.astype(np.uint8)\ntest[\"month\"] = test[\"timestamp\"].dt.month.astype(np.uint8)\ntest = test[feat_cols]","fd32f454":"from tqdm import tqdm\ni=0\nres=[]\nstep_size = 50000\nfor j in tqdm(range(int(np.ceil(test.shape[0]\/50000)))):\n    \n    res.append(np.expm1((gbm_class.predict(test.iloc[i:i+step_size], num_iteration=gbm_class.best_iteration) > .5) *\\\n    (gbm_regress.predict(test.iloc[i:i+step_size], num_iteration=gbm_regress.best_iteration))))\n    i+=step_size","1501a4b8":"del test","b7d5d3bd":"res = np.concatenate(res)","80923dbc":"pd.DataFrame(res).describe()","eef454cb":"res.shape","e5592345":"sub = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/sample_submission.csv\")","1579b32f":"sub[\"meter_reading\"] = res","a84f29e1":"sub.to_csv(\"submission.csv\", index = False)","962fb485":"Features that are likely predictive:\n\n**Buildings**\n* primary_use\n* square_feet\n* year_built\n* floor_count (may be too sparse to use)\n\n**Weather**\n* time of day\n* holiday\n* weekend\n* cloud_coverage + lags\n* dew_temperature + lags\n* precip_depth + lags\n* sea_level_pressure + lags\n* wind_direction + lags\n* wind_speed + lags\n\n**Train**\n* max, mean, min, std of the specific building historically\n* number of meters\n* number of buildings at a siteid"}}