{"cell_type":{"4a4cbe12":"code","f74b5121":"code","828be9ed":"code","3b5801c4":"code","04c6a687":"code","96e78e76":"code","47bab895":"code","c603a535":"code","4799e89b":"code","62a4b4f7":"code","ce6247dd":"code","29b19d7c":"code","a1ac7a48":"code","febf070c":"code","9bca59bd":"code","f5293c57":"code","48443d04":"code","6ab40bd8":"code","b5659ba9":"code","7ce15b8b":"code","4c7e8d19":"code","abc84b9b":"markdown","9d58f502":"markdown","5165478f":"markdown","f6268376":"markdown","ac629105":"markdown","1fed6627":"markdown","99fb71c5":"markdown","eb38ffae":"markdown","621c86c1":"markdown","f8ef1816":"markdown","638797bb":"markdown","c9fb65ed":"markdown","6dbfe971":"markdown","05b4a3d2":"markdown","e322c798":"markdown","9712a1fd":"markdown"},"source":{"4a4cbe12":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom datetime import datetime\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, UpSampling2D, Dropout,BatchNormalization,GlobalAveragePooling2D\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\n\n","f74b5121":"cifar100 = tf.keras.datasets.cifar100\n(X_train, Y_train), (X_test,Y_test) = cifar100.load_data()","828be9ed":"def timer(start_time=None):\n  #function to track time \n  if not start_time:\n      print(datetime.now())\n      start_time = datetime.now()\n      return start_time\n  elif start_time:\n      thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n      tmin, tsec = divmod(temp_sec, 60)\n      print('Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))\n\ndef plot_acc_loss(result):\n  # function to plot the accuracy and loss graphs\n  acc = result.history['accuracy']\n  val_acc = result.history['val_accuracy']\n  loss = result.history['loss']\n  val_loss = result.history['val_loss']\n\n  plt.figure(figsize=(20, 10))\n  plt.subplot(1, 2, 1)\n  plt.title(\"Training and Validation Accuracy\")\n  plt.plot(acc,color = 'green',label = 'Training Acuracy')\n  plt.plot(val_acc,color = 'red',label = 'Validation Accuracy')\n  plt.legend(loc='lower right')\n  plt.ylabel('accuracy')\n  plt.xlabel('epoch')\n  plt.subplot(1, 2, 2)\n  plt.title('Training and Validation Loss')\n  plt.plot(loss,color = 'blue',label = 'Training Loss')\n  plt.plot(val_loss,color = 'purple',label = 'Validation Loss')\n  plt.ylabel('loss')\n  plt.xlabel('epoch')\n  plt.legend(loc='upper right')\n  plt.show()","3b5801c4":"plt.figure(figsize=(12,12))\nfor i in range(100):\n  plt.subplot(10,10,1+i)\n  plt.axis('off')\n  plt.imshow(X_train[i],cmap='gray')","04c6a687":"x_train,x_val,y_train,y_val = train_test_split(X_train, Y_train, test_size = 0.2)","96e78e76":"y_train = to_categorical(y_train, num_classes = 100)\ny_val = to_categorical(y_val, num_classes = 100)\ny_test = to_categorical(Y_test, num_classes = 100)","47bab895":"  x_train = x_train * 1.0\/255\n    \n  x_val = x_val * 1.0\/255\n\n  X_test = X_test * 1.0\/255","c603a535":"print(x_train.shape, x_val.shape, X_test.shape)\nprint(y_train.shape, y_val.shape, y_test.shape)","4799e89b":"train_datagen = ImageDataGenerator( \n        rotation_range = 10,  \n        zoom_range = 0.1, \n        width_shift_range = 0.1,  \n        height_shift_range = 0.1,\n        shear_range = 0.1,\n        horizontal_flip = True,  \n        vertical_flip = False\n        )\ntrain_datagen.fit(x_train)","62a4b4f7":"from keras.callbacks import ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(\n    monitor='val_accuracy', \n    patience=3, \n    verbose=1, \n    factor=0.6, \n    min_lr=1e-6)","ce6247dd":"from tensorflow.keras.applications.resnet50 import ResNet50\nresnet_model = ResNet50(\n    include_top = False,\n    weights = 'imagenet',\n    input_shape = (224,224,3)\n)\n\nfor layer in resnet_model.layers:\n    if isinstance(layer, BatchNormalization):\n        layer.trainable = True\n    else:\n        layer.trainable = False","29b19d7c":"resnet_model.summary()","a1ac7a48":"model=tf.keras.models.Sequential()\nmodel.add(UpSampling2D(size=(7, 7),interpolation='bilinear'))\nmodel.add(resnet_model)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dropout(.25))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(100, activation='softmax'))","febf070c":"optimizer = tf.keras.optimizers.SGD(learning_rate=1e-3, momentum=0.9)","9bca59bd":"model.compile(\n    optimizer = optimizer,\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)","f5293c57":"start_time=timer(None)\nresult=model.fit(\n    train_datagen.flow(x_train, y_train, batch_size = 128),\n    validation_data = (x_val, y_val),\n    epochs = 100,\n    verbose = 1,\n    callbacks = [learning_rate_reduction]\n)\ntimer(start_time)","48443d04":"model.summary()","6ab40bd8":"plot_acc_loss(result)\n","b5659ba9":"y_pred = np.argmax(model.predict(X_test), axis=-1)\ny_true = Y_test.ravel()\nprint(y_pred.shape,y_true.shape)\n","7ce15b8b":"print(\"Testing Accuracy: \", accuracy_score(y_true,y_pred))","4c7e8d19":"cm = confusion_matrix(y_true,y_pred)\ncm","abc84b9b":"## Importing Libraries","9d58f502":"##  Converting the output layer as per our dataset","5165478f":"## Predictions,Accuracy and Confusion Matrix","f6268376":"## Using Resnet50 for Transfer Learning and classify the Cifar - 100 data\n\n### The CIFAR-10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class. There are 50000 training images and 10000 test images","ac629105":"## Plot accuracy and Loss","1fed6627":"### **Issue** : The Cifar images are of the shape 32,32,3 and resnet model is trained on images of 224,224,3\n\n### *Solution* : Rezise Images - this is a costly operation and i eventually ran out of memory many a times\n\n### **Used Solution** : Keras provides an upsampling layer \u2013 called UpSampling2D \u2013 which allows to perform upsampling operation within neural networks \n* ### 32 * 7 = 224 \n","99fb71c5":"##  Onehot encoding of the outputs","eb38ffae":"We now Train the model on images. we are also checking to see if validation accuracy doesnt improve we will reduce learning rate though the callback","621c86c1":"##  Image Data Augmentation","f8ef1816":"Compile the model","638797bb":"### Stochastic gradient descent optimizer with momentum.","c9fb65ed":"## Splitting the train data again - we use the val set as test set and previous test set for final predictions","6dbfe971":"##  Reduce Learning Rate if accuracy is not improving for 3 epochs","05b4a3d2":"## Importing the Cifar 100 Dataset","e322c798":"##  Importing the Resnet Model","9712a1fd":"##  Plotting some images from the dataset"}}