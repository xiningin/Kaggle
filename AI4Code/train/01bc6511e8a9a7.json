{"cell_type":{"e03d90e3":"code","3e1b25f8":"code","fc526c25":"code","381dae6d":"code","3a39113a":"code","1a9b5bcf":"code","2ba4c490":"code","d9934f26":"code","16fddc3b":"code","34531012":"code","c6c3fe13":"code","83fe79d0":"code","65a786a3":"code","fa889049":"code","559ca427":"code","18ffb9fb":"code","81cfb1e5":"code","97efc4fe":"code","7b55f676":"code","e6810895":"code","e2703083":"code","211d7c24":"markdown","65f21976":"markdown","cc398489":"markdown","b2ba50de":"markdown","4379674d":"markdown","9190f32d":"markdown","62e67b05":"markdown","664012c4":"markdown","305b3b48":"markdown","be3a572f":"markdown"},"source":{"e03d90e3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))","3e1b25f8":"data = pd.read_csv(\"..\/input\/data.csv\")","fc526c25":"data.head()","381dae6d":"data.info()","3a39113a":"data.drop([\"Rank\", \"Grade\", \"Channel name\"],axis=1, inplace = True)","1a9b5bcf":"data.columns","2ba4c490":"data.max()","d9934f26":"data.min()","16fddc3b":"data['Subscribers'] = pd.to_numeric(data['Subscribers'], errors='coerce')\ndata['Video Uploads'] = pd.to_numeric(data['Video Uploads'], errors='coerce')","34531012":"data.head()","c6c3fe13":"data.dropna()","83fe79d0":"data.info()","65a786a3":"data.rename(columns={\"Video Uploads\":\"Uploads\", \"Video views\":\"Views\"}, inplace=True)","fa889049":"data.columns","559ca427":"data.plot(kind='scatter', x='Views', y='Subscribers',alpha = 1,color = 'red')\nplt.xlabel('Views')    \nplt.ylabel('Subscribers')\nplt.title('Video views - Subscribers')","18ffb9fb":"sns.lmplot(x='Subscribers', y='Views', data=data)","81cfb1e5":"rs = np.random.RandomState(33)\nd = pd.DataFrame(data=rs.normal(size=(100, 26)))\n\n# Compute the correlation matrix\ncorr = d.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","97efc4fe":"#Scatterplot\nplt.figure(figsize=(10,6))\nsns.lmplot(x='Subscribers', y='Views', data=data, fit_reg=False, hue='Uploads') ","7b55f676":"sns.set(style=\"white\")\ng = sns.PairGrid(data, diag_sharey=False)\ng.map_lower(sns.kdeplot)\ng.map_upper(sns.scatterplot)\ng.map_diag(sns.kdeplot, lw=3)","e6810895":"sns.jointplot(x=data[\"Subscribers\"], y=data[\"Views\"], kind='scatter')\nsns.jointplot(x=data[\"Subscribers\"], y=data[\"Views\"], kind='hex')\nsns.jointplot(x=data[\"Subscribers\"], y=data[\"Views\"], kind='kde')","e2703083":"plt.figure(figsize=(15,10))\nsns.swarmplot(x='Subscribers', y='Views', data=data, palette='Set2')","211d7c24":"****INTRODUCTION****\n1. **READ THE DATA**\n2. **DATA CLEANING**\n3. **DATA VISUALIZATION**","65f21976":"****MINIMUM VALUES OF DATA****","cc398489":"****DELETED RANK AND GRADE CAUSE WE DONT NEED THEM ****","b2ba50de":"****DELETED NaN VALUES****","4379674d":"****READ THE DATA****","9190f32d":"****Starting to Data Visualization Tutorial w\/ Seaborn****","62e67b05":"****MAXIMUM VALUES OF DATA****","664012c4":"****CHANGED COLUMNS NAME'S****","305b3b48":"****CONVERTING OBJECT TO INT****","be3a572f":"****THEN WE CHECKED OUR DATA'S LAST V\u0130EW****"}}