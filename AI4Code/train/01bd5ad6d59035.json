{"cell_type":{"bfa43a23":"code","3b394726":"code","758afcfa":"code","b94942ed":"code","f38d8929":"code","45db11a9":"code","08026748":"code","27b82a3b":"code","424c8da5":"code","6b0c3a10":"code","d72b6a37":"code","b0cbd2d4":"code","6ca1582b":"code","b41c2c65":"code","e8dabc93":"code","2dceb4bf":"code","71b2f653":"code","959b4490":"code","fb55ed77":"code","d4fd7e33":"code","65125c1a":"code","8290fb1b":"code","1a1809d6":"code","8dfc6a14":"code","60ab863f":"code","5e56723d":"code","9e3e919c":"code","1767faec":"code","8b7af7ec":"markdown","e70dc47e":"markdown","a0fcfddb":"markdown","e7ea4237":"markdown","95c0d6df":"markdown","0301ac95":"markdown"},"source":{"bfa43a23":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3b394726":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom scipy.stats import norm","758afcfa":"df=pd.read_csv('..\/input\/wine-quality\/winequalityN.csv')","b94942ed":"print(df.shape)\nprint(df.columns)","f38d8929":"df.info()","45db11a9":"df.describe()","08026748":"df.head()","27b82a3b":"df['quality'].describe()","424c8da5":"dfv=df['quality'].value_counts()\nprint(dfv)","6b0c3a10":"sns.histplot(df['quality'], binwidth=1,color='blue');","d72b6a37":"sns.distplot(df['quality'],bins=7);","b0cbd2d4":"print(df['quality'].skew())\nprint(df['quality'].kurt())","6ca1582b":"plt.figure(figsize=(16,6))\nsns.heatmap(df.corr(),annot=True);","b41c2c65":"#coorelation with categorical variables\nvar = 'type'\ndata = pd.concat([df['quality'], df[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"quality\", data=data)","e8dabc93":"for a in range(len(df.corr().columns)):\n    for b in range(a):\n        if abs(df.corr().iloc[a,b]) >0.7:\n            name = df.corr().columns[a]\n            print(name)","2dceb4bf":"new_df=df.drop('total sulfur dioxide',axis=1)","71b2f653":"new_df.isnull().sum()","959b4490":"new_df.update(new_df.fillna(new_df.mean()))","fb55ed77":"#missing data\ntotal = new_df.isnull().sum().sort_values(ascending=False)\npercent = (new_df.isnull().sum()\/new_df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","d4fd7e33":"# catogerical vars \nnext_df = pd.get_dummies(new_df,drop_first=True)\n# display new dataframe\nnext_df","65125c1a":"next_df1=next_df","8290fb1b":"next_df1[\"best quality\"] = [ 1 if x>=7 else 0 for x in df.quality] \nprint(next_df1)","1a1809d6":"next_df1.columns","8dfc6a14":"features=(['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',\n       'chlorides', 'free sulfur dioxide', 'density', 'pH', 'sulphates',\n       'alcohol','type_white', 'best quality'])","60ab863f":"X=next_df[features]\ny=next_df['quality']","5e56723d":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)","9e3e919c":"#importing module\nfrom sklearn.preprocessing import MinMaxScaler\n# creating normalization object \nnorm = MinMaxScaler()\n# fit data\nnorm_fit = norm.fit(X_train)\nnew_Xtrain = norm_fit.transform(X_train)\nnew_Xtest = norm_fit.transform(X_test)\n# display values\nprint(new_Xtrain)","1767faec":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import mean_squared_error\n\nrfc=RandomForestClassifier(max_depth=30,n_estimators=200,random_state=0)\nfit_rfc=rfc.fit(new_Xtrain, y_train)\nrfc_score_train=rfc.score(new_Xtrain, y_train)\nrfc_score_test=rfc.score(new_Xtest, y_test)\nprint(rfc_score_train)\nprint(rfc_score_test)","8b7af7ec":"GETTING TO KNOW OUR DATA","e70dc47e":"USING MINMAXSCALER","a0fcfddb":"ANALYSING QUALITY FUNCTION","e7ea4237":"HANDLING MISSING VALUES","95c0d6df":"Seeing the coorelation of variables with 'Quality' variable\n","0301ac95":"USING RANDOM CLASSIFIER WITH MINMAXSCALER"}}