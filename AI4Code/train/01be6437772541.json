{"cell_type":{"91e413d5":"code","ce525c9c":"code","a955f27d":"code","f192fd9e":"code","0f667449":"code","1c1f9689":"code","c694a158":"code","0bf73791":"code","8ba81ec7":"code","0628e51f":"code","31ed183a":"code","8f36e182":"code","0fb8c17c":"code","cc9d6a8d":"code","67126527":"code","d468f702":"code","0700d90c":"code","95a4d97b":"code","f20b5b40":"code","d7b86700":"code","c3f9f09a":"code","d408a511":"code","605ab69d":"code","e72eee6b":"code","ab562a72":"code","85aaea6f":"code","d311835b":"code","6f7b0940":"code","72a89880":"code","ff29d27d":"code","4a563476":"code","8556c55c":"code","e2001a7c":"code","defa0fa1":"code","2b8883d5":"code","bde41fef":"code","3faeb622":"code","910224b7":"code","9383b421":"markdown","ef7fd942":"markdown","8c2365ed":"markdown","e3c42213":"markdown","feb0e45e":"markdown","aeed4596":"markdown"},"source":{"91e413d5":"# load modules\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport pickle\n\nfrom pandas.plotting import scatter_matrix\n\n# stop warnings\nimport warnings \nwarnings.filterwarnings('ignore')","ce525c9c":"# display column limita\npd.set_option('display.max_columns',500)","a955f27d":"# load data\ntrain = pd.read_csv('..\/input\/xente-challenge\/training.csv')\nvalidation = pd.read_csv('..\/input\/xente-challenge\/test.csv')\ntrain.head()","f192fd9e":"# checking the balance of the data\nprint('The number of Non-Frauds are: ' + str(train['FraudResult'].value_counts()[0]) + ' which is', round(train['FraudResult'].value_counts()[0]\/len(train) * 100,2), '% of the dataset')\nprint('The number of Frauds are: ' + str(train['FraudResult'].value_counts()[1]) + ' which is', round(train['FraudResult'].value_counts()[1]\/len(train) * 100,2), '% of the dataset')","0f667449":"# visualize category class\nsns.countplot(x='FraudResult', data=train)","1c1f9689":"# SMOTE\n# oversampling\nfrom imblearn.over_sampling import SMOTE\n\ncount_class_0, count_class_1 = train.FraudResult.value_counts()\n\n# divide by class\ntrain_class_0 = train[train['FraudResult'] == 0]\ntrain_class_1 = train[train['FraudResult'] == 1]","c694a158":"train_class_1_over = train_class_1.sample(count_class_0, replace=True)\ntrain_test_over = pd.concat([train_class_0, train_class_1_over], axis=0)\n\nprint('Random over-sampling:')\nprint(train_test_over.FraudResult.value_counts())\n\ntrain_test_over.FraudResult.value_counts().plot(kind='bar', title='Count (FraudResult)');","0bf73791":"train1 = train_test_over ","8ba81ec7":"numeric_features = train.select_dtypes(include=[np.number])\nnumeric_features.columns","0628e51f":"categorical_features = train.select_dtypes(include=[np.object])\ncategorical_features.columns","31ed183a":"# pricing and fraudresults\nsns.countplot(y='ProviderId', data=train1, hue='FraudResult')\nplt.show","8f36e182":"# pricingstrategy and fraudresult\nsns.countplot(x='PricingStrategy', data=train1, hue='FraudResult')\nplt.show()","0fb8c17c":"# product category and fraudresult\nsns.countplot(y='ProductCategory',data = train1, hue = 'FraudResult')","cc9d6a8d":"# ProductId and fraudresult\nsns.countplot(y='ProductId', data = train1, hue = 'FraudResult')","67126527":"# channelid and fraudresult\nsns.countplot(x='ChannelId', data = train1, hue = 'FraudResult')","d468f702":"# TIME WRANGLING\n# train1\ntrain1['hour'] = pd.to_datetime(train1.TransactionStartTime).dt.hour\ntrain1['minute'] = pd.to_datetime(train1.TransactionStartTime).dt.minute\ntrain1['day'] = pd.to_datetime(train1.TransactionStartTime).dt.dayofweek\n\n# validation\nvalidation['hour'] = pd.to_datetime(validation.TransactionStartTime).dt.hour\nvalidation['minute'] = pd.to_datetime(validation.TransactionStartTime).dt.minute\nvalidation['day'] = pd.to_datetime(validation.TransactionStartTime).dt.dayofweek\n","0700d90c":"train1['period'] = np.nan\nvalidation['period'] = np.nan","95a4d97b":"# train1\ntrain1.loc[train1.hour < 7, 'period']= 'em'\ntrain1.loc[(train1.hour >= 7) & (train1.hour < 11), 'period'] = 'am'\ntrain1.loc[(train1.hour >= 11) & (train1.hour < 15), 'period'] = 'mid'\ntrain1.loc[(train1.hour >= 15) & (train1.hour < 19), 'period'] = 'eve'\ntrain1.loc[(train1.hour >= 19) & (train1.hour <=24), 'period'] = 'pm'\n\n# validation\nvalidation.loc[validation.hour < 7, 'period']= 'em'\nvalidation.loc[(validation.hour >= 7) & (validation.hour < 11), 'period'] = 'am'\nvalidation.loc[(validation.hour >= 11) & (validation.hour < 15), 'period'] = 'mid'\nvalidation.loc[(validation.hour >= 15) & (validation.hour < 19), 'period'] = 'eve'\nvalidation.loc[(validation.hour >= 19) & (validation.hour <=24), 'period'] = 'pm'","f20b5b40":"train1['minutes'] = train1['hour']*60 + train1['minute'] + train1['day']*24*60\nvalidation['minutes'] = validation['hour']*60 + validation['minute'] + validation['day']*24*60\ntrain1.head()","d7b86700":"# drop features\ntrain1 = train1.drop(['BatchId','AccountId','SubscriptionId','CustomerId','CurrencyCode','CountryCode','Amount','TransactionStartTime','hour','minute','day'], axis=1)\nvalidation = validation.drop(['BatchId','AccountId','SubscriptionId','CustomerId','CurrencyCode','CountryCode','Amount','TransactionStartTime','hour','minute','day'], axis=1)","c3f9f09a":"# normalize\nfrom sklearn.preprocessing import MinMaxScaler\n# minutes\nscaler_minutes = MinMaxScaler()\ntrain1['minutes'] = train1['minutes'].astype('float64')\ntrain1['minutes'] = scaler_minutes.fit_transform(train1.minutes.values.reshape(-1,1))\n\nvalidation['minutes'] = scaler_minutes.fit_transform(validation.minutes.values.reshape(-1,1))\n# value\nscaler_Value = MinMaxScaler()\ntrain1['Value'] = scaler_Value.fit_transform(train1.Value.values.reshape(-1,1))\n\nvalidation['Value'] = scaler_Value.fit_transform(validation.Value.values.reshape(-1,1))","d408a511":"validation1 = validation.copy()","605ab69d":"# drop Transactionid\ntrain1 = train1.drop(['TransactionId'], axis=1)\nvalidation = validation.drop(['TransactionId'], axis=1)\ntrain1.head()","e72eee6b":"# dummies\ntrain1 = pd.get_dummies(train1, prefix_sep='_', drop_first=True)\nvalidation = pd.get_dummies(validation, prefix_sep='_', drop_first=True)","ab562a72":"# drop irrelevant features\ntrain1 = train1.drop(['ProviderId_ProviderId_2','ProductId_ProductId_10','ProductId_ProductId_11','ProductId_ProductId_12','ProductId_ProductId_15','ProductId_ProductId_16','ProductId_ProductId_19','ProductId_ProductId_2','ProductId_ProductId_22','ProductId_ProductId_23','ProductId_ProductId_4','ProductId_ProductId_5','ProductId_ProductId_7','ProductId_ProductId_9','ProductCategory_data_bundles','ProductCategory_movies','ProductCategory_other','ProductCategory_ticket','ProductCategory_tv','ChannelId_ChannelId_5'], axis=1)\n# drop irrelevant features\nvalidation = validation.drop(['ProviderId_ProviderId_2','ProductId_ProductId_10','ProductId_ProductId_11','ProductId_ProductId_15','ProductId_ProductId_16','ProductId_ProductId_18','ProductId_ProductId_17','ProductId_ProductId_19','ProductId_ProductId_2','ProductId_ProductId_22','ProductId_ProductId_23','ProductId_ProductId_25','ProductId_ProductId_26','ProductId_ProductId_4','ProductId_ProductId_5','ProductId_ProductId_7','ProductId_ProductId_9','ProductCategory_data_bundles','ProductCategory_movies','ProductCategory_retail','ProductCategory_ticket','ProductCategory_tv','ChannelId_ChannelId_4','ChannelId_ChannelId_5'], axis=1)","85aaea6f":"# bring the fraudresult column to be 1st\nFraudResult = train1['FraudResult']\ntrain1.drop(['FraudResult'], axis=1, inplace=True)\ntrain1.insert(0,'FraudResult', FraudResult)","d311835b":"# rename columns\ntrain1.rename(columns={'ProviderId_ProviderId_3':'ProviderId3',\n                       'ProviderId_ProviderId_4':'ProviderId4',\n                       'ProviderId_ProviderId_5':'ProviderId5',\n                       'ProviderId_ProviderId_6':'ProviderId6',\n                       'ProductId_ProductId_13' :'ProductId13',\n                       'ProductId_ProductId_14' :'ProductId14',\n                       'ProductId_ProductId_20' :'ProductId20',\n                       'ProductId_ProductId_21' :'ProductId21',\n                       'ProductId_ProductId_24' :'ProductId24',\n                       'ProductId_ProductId_27' :'ProductId27',\n                       'ProductId_ProductId_3' :'ProductId3',\n                       'ProductId_ProductId_6' :'ProductId6',\n                       'ProductId_ProductId_8' :'ProductId8',\n                       'ProductCategory_financial_services':'financial_services',\n                       'ProductCategory_transport':'transport',\n                       'ProductCategory_utility_bill':'utility_bill',\n                       'ChannelId_ChannelId_2':'ChannelId2',\n                       'ChannelId_ChannelId_3':'ChannelId3',\n                       'period_em':'em',\n                       'period_eve':'eve',\n                       'period_mid':'mid',\n                       'period_pm':'pm'}, inplace=True)\n\nvalidation.rename(columns={'ProviderId_ProviderId_3':'ProviderId3',\n                       'ProviderId_ProviderId_4':'ProviderId4',\n                       'ProviderId_ProviderId_5':'ProviderId5',\n                       'ProviderId_ProviderId_6':'ProviderId6',\n                       'ProductId_ProductId_13' :'ProductId13',\n                       'ProductId_ProductId_14' :'ProductId14',\n                       'ProductId_ProductId_20' :'ProductId20',\n                       'ProductId_ProductId_21' :'ProductId21',\n                       'ProductId_ProductId_24' :'ProductId24',\n                       'ProductId_ProductId_27' :'ProductId27',\n                       'ProductId_ProductId_3' :'ProductId3',\n                       'ProductId_ProductId_6' :'ProductId6',\n                       'ProductId_ProductId_8' :'ProductId8',\n                       'ProductCategory_financial_services':'financial_services',\n                       'ProductCategory_transport':'transport',\n                       'ProductCategory_utility_bill':'utility_bill',\n                       'ChannelId_ChannelId_2':'ChannelId2',\n                       'ChannelId_ChannelId_3':'ChannelId3',\n                       'period_em':'em',\n                       'period_eve':'eve',\n                       'period_mid':'mid',\n                       'period_pm':'pm'}, inplace=True)","6f7b0940":"train1.head()","72a89880":"train1['exponential'] = np.log(train1['Value']**2 + train1['PricingStrategy']**2 + train1['ProviderId3']**2 + train1['ProviderId4']**2 + train1['ProviderId6']**2 + train1['ProductId13']**2 +train1['ProductId14']**2 + train1['ProductId20']**2 + train1['ProductId21']**2 + train1['ProductId24']**2 + train1['ProductId27']**2 + train1['ProductId3']**2 + train1['ProductId6']**2 + train1['ProductId8']**2 + train1['financial_services']**2 + train1['transport']**2 + train1['utility_bill']**2 + train1['ChannelId2']**2 + train1['ChannelId3']**2)\ntrain1['matrix'] = np.log(train1['ProviderId3']**2 + train1['ProviderId4']**2 + train1['ProviderId6']**2 + train1['Value']**2 + train1['ChannelId2']**2 + train1['ChannelId3']**2)\n \nvalidation['exponential'] = np.log(validation['Value']**2 + validation['PricingStrategy']**2 + validation['ProviderId3']**2 + validation['ProviderId4']**2 + validation['ProviderId6']**2 + validation['ProductId13']**2 +validation['ProductId14']**2 + validation['ProductId20']**2 + validation['ProductId21']**2 + validation['ProductId24']**2 + validation['ProductId27']**2 + validation['ProductId3']**2 + validation['ProductId6']**2 + validation['ProductId8']**2 + validation['financial_services']**2 + validation['transport']**2 + validation['utility_bill']**2 + validation['ChannelId2']**2 + validation['ChannelId3']**2)\nvalidation['matrix'] = np.log(validation['ProviderId3']**2 + validation['ProviderId4']**2 + validation['ProviderId6']**2 + validation['Value']**2 + validation['ChannelId2']**2 + validation['ChannelId3']**2)\n     ","ff29d27d":"train1.head()","4a563476":"scaler_exponential = MinMaxScaler()\ntrain1['exponential'] = train1['exponential'].astype('float64')\ntrain1['exponential'] = scaler_exponential.fit_transform(train1.exponential.values.reshape(-1,1))","8556c55c":"# selection of features\ny = train1.FraudResult\nX = train1.drop(['FraudResult'], axis=1)","e2001a7c":"# split data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)","defa0fa1":"# random forest\nfrom sklearn.ensemble import RandomForestClassifier\nRFC = RandomForestClassifier()\nRFC = RFC.fit(X_train,y_train)\ny_pred = RFC.predict(X_test)\n\n","2b8883d5":"# bring the test dataset\n# random forest\nfrom sklearn.ensemble import RandomForestClassifier\nRFC = RandomForestClassifier()\nRFC = RFC.fit(X_train,y_train)\n\nsubmit = RFC.predict(validation)","bde41fef":"submission = pd.DataFrame({'TransactionId':validation1['TransactionId'],'FraudResult':submit})","3faeb622":"submission.to_csv('submit70.csv', index=False)","910224b7":"# save the model to disk\nfilename = 'XenteFraud_detection_model_7.sav'\npickle.dump(RFC, open(filename, 'wb'))","9383b421":"FEATURE ENGINEERING","ef7fd942":"HIGEST SCORE ON THE COMPETITION IS 74.5%. HOPE TO INCREASE IN THE NEAR FUTURE","8c2365ed":"1. find the outliers outliers and remove them\n2. wrangle the time feature and include it to the rest of the data\n3. drop features that do not correlate to fraud.\n4. dummie-encoding the right features","e3c42213":"the data is highly imbalanced, non frauds = 99.8% and frauds = 0.2%. It calls for smote balancing.","feb0e45e":"BIVARIATE VISUALIZATION","aeed4596":"EXPLORATORY DATA ANALYSIS"}}