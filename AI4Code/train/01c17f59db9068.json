{"cell_type":{"57ea828e":"code","ecd9dba2":"code","7c802e36":"code","143b89b2":"code","35c6e64f":"code","610d5b63":"code","1e84ca62":"code","c71b7d95":"code","5be081b1":"code","82bc43b6":"code","f739dd77":"code","9cd94bfc":"code","e12a31fb":"code","6e7c28d7":"code","e9d91fbe":"code","62693c77":"code","21dbbdda":"code","cd7a401a":"code","f11e28f3":"code","d85f7487":"code","7572413d":"code","d403f889":"code","99328c44":"code","5733a995":"code","a4aaa9f3":"code","3cf67bad":"code","163c3079":"code","8578a135":"code","4301b1a9":"code","00dee819":"code","d94c7351":"code","f7533c04":"code","06a21ea1":"code","f8532e63":"code","4caa86fb":"code","530dd59e":"code","7529a47f":"code","a2419baa":"code","7f0d3925":"code","3290b814":"code","cc8a8a7a":"code","aab0b4fb":"code","7858041d":"code","4870c2b2":"code","1fba87fd":"code","cfe5e851":"code","dbd06395":"code","9a394613":"code","c592e771":"code","9ff14fbf":"code","5345bcf0":"code","728ea9b5":"code","7000d8e0":"code","e49f18c9":"code","3a02ffee":"code","6e53daa8":"code","fd098bae":"code","399a9c24":"code","8721a08b":"code","2fb06f75":"code","ec862fe3":"code","56d3e68a":"code","6426ad7d":"code","7322d0ee":"code","27501161":"code","a16aa37d":"code","198908de":"code","2f60b1b9":"code","d0662823":"code","792dc93d":"code","902e3aa7":"code","51cf42df":"code","97304b84":"code","8f2f8eb8":"code","13e2958c":"code","27d735ae":"code","d592f4cd":"code","a97c3b3d":"code","5fae7f63":"code","a548518b":"code","75fc8271":"code","7faac806":"code","b6fd6579":"code","9b80272f":"code","b8227422":"code","0a8e2668":"code","92770ffd":"code","fbe9f35e":"code","cf483346":"code","6c5b616c":"code","96e6d4f3":"code","eabf3544":"code","a2694586":"code","9fb9ed34":"code","0cd03480":"code","41db46d3":"code","ae7c3f83":"code","f0084830":"code","00a03b96":"code","9ec08aa6":"markdown","73188201":"markdown","74e693b7":"markdown","b71c1dfa":"markdown","9fe2c1a0":"markdown","f646cef9":"markdown","4c6c838d":"markdown","d5aa9316":"markdown","40a6c989":"markdown","8c3da3ac":"markdown","06a2cde7":"markdown","d66824eb":"markdown","e252b82d":"markdown","0c92aced":"markdown","df4d206c":"markdown","90c00110":"markdown","2cb9c026":"markdown","5724300b":"markdown","5c4dd50b":"markdown","5197341d":"markdown","e6c3dfad":"markdown","015134e4":"markdown","62dbaecb":"markdown","e656d4b0":"markdown","b641b762":"markdown","3779e112":"markdown","7ca52822":"markdown","536e32c3":"markdown","d10df58c":"markdown","260791f9":"markdown","c7ba8aa1":"markdown","864158ff":"markdown","342c493d":"markdown","ca5fcb95":"markdown","f520399a":"markdown","21591763":"markdown","088bd7a4":"markdown","e5487780":"markdown","27e9a60a":"markdown"},"source":{"57ea828e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ecd9dba2":"# Set up workspace\nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","7c802e36":"# Load data, preserve original data set\ntrain_orig = pd.read_csv('..\/input\/train.csv')\ntest_orig = pd.read_csv('..\/input\/test.csv')","143b89b2":"# Create train and test dataframes\ntrain_df = pd.DataFrame(train_orig)\ntest_df = pd.DataFrame(test_orig)\n\n# Create total df from which mean values will be calculated\ntotal_df = pd.DataFrame(train_orig)\ntotal_df = total_df.append(test_df, sort=False)","35c6e64f":"total_df.shape","610d5b63":"# How many rows \/ columns ?\ntrain_df.shape","1e84ca62":"# How many rows \/ columns ?\ntrain_df.shape","c71b7d95":"# Take a peek at the head of train_df\ntrain_df.head()","5be081b1":"# Take a peek at the tail of train_df\ntrain_df.tail()","82bc43b6":"# Descriptive stats\ntrain_df.describe()","f739dd77":"# Take a peek at the head of test_df\ntrain_df.head()","9cd94bfc":"# Scatter matrix\nscatters_train = pd.plotting.scatter_matrix(train_df, figsize=[40,40])","e12a31fb":"# Plot correlations as heatmap\n# Adapted from here: https:\/\/www.kaggle.com\/foutik\/decision-tree\ncorr = train_df.corr()\n_ , ax = plt.subplots( figsize =( 12 , 10 ) )\ncmap = sns.diverging_palette( 220 , 10 , as_cmap = True )\n_ = sns.heatmap(corr, cmap = cmap, square=True, cbar_kws={ 'shrink' : .9 }, ax=ax, annot = True, annot_kws = {'fontsize' : 12 })","6e7c28d7":"# Impact of Sex on survival rate\n# Adapted from: https:\/\/towardsdatascience.com\/play-with-data-2a5db35b279c\nprint(train_df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean())","e9d91fbe":"# Impact of Embarked on Survival rate\nprint(train_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean())","62693c77":"# Impact of SibSp on Survival rate\nprint(train_df[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean())","21dbbdda":"# Impact of Embarked on Survival rate\nprint(train_df[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean())","cd7a401a":"# Create X dataframe from train_df\nX = pd.DataFrame(train_df)","f11e28f3":"# Create 'FamilySize' column that is sum of SibSp and Parch and 1\nX['FamilySize'] = X['SibSp'] + X['Parch'] + 1\nX.head()","d85f7487":"# Create 'FamilySize' column that is sum of SibSp and Parch and 1\ntotal_df['FamilySize'] = total_df['SibSp'] + total_df['Parch'] + 1\ntotal_df.head()","7572413d":"# Impact of FamilySize on Survival rate\nprint(X[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean())","d403f889":"# Bin FamilySize based on mean survival rates\n# If FamilySize is greater than 8, 1; else, 0\n# Represents mean 0% survival rate\nX['FamSize_8+'] = 0\nX.loc[(X['FamilySize'] >= 8), 'FamSize_8+'] = 1\n# If FamilySize is 1 or 7, 1; else, 0\n# Represents mean 30-33% survival rate\nX['FamSize_1|7'] = 0\nX.loc[(X['FamilySize'] == 1) | (X['FamilySize'] == 7), 'FamSize_1|7'] = 1\n# If FamilySize is 5 or 6, 1; else, 0\n# Represents mean 13-20% survival rate\nX['FamSize_5|6'] = 0\nX.loc[(X['FamilySize'] == 5) | (X['FamilySize'] == 6), 'FamSize_5|6'] = 1\n# If FamilySize is 4, 1; else, 0\n# Represents mean 72% survival rate\nX['FamSize_4'] = 0\nX.loc[X['FamilySize'] == 4, 'FamSize_4'] = 1\n# If FamilySize is 2 or 3, 1; else, 0\n# Represents mean 55-57% survival rate\nX['FamSize_2|3'] = 0\nX.loc[(X['FamilySize'] == 2) | (X['FamilySize'] == 3), 'FamSize_2|3'] = 1\n# Check\nX.tail()","99328c44":"# Create the same data in the total_df set\n# Bin FamilySize based on mean survival rates\n# If FamilySize is greater than 8, 1; else, 0\n# Represents mean 0% survival rate\ntotal_df['FamSize_8+'] = 0\ntotal_df.loc[(total_df['FamilySize'] >= 8), 'FamSize_8+'] = 1\n# If FamilySize is 1 or 7, 1; else, 0\n# Represents mean 30-33% survival rate\ntotal_df['FamSize_1|7'] = 0\ntotal_df.loc[(total_df['FamilySize'] == 1) | (total_df['FamilySize'] == 7), 'FamSize_1|7'] = 1\n# If FamilySize is 5 or 6, 1; else, 0\n# Represents mean 13-20% survival rate\ntotal_df['FamSize_5|6'] = 0\ntotal_df.loc[(total_df['FamilySize'] == 5) | (total_df['FamilySize'] == 6), 'FamSize_5|6'] = 1\n# If FamilySize is 4, 1; else, 0\n# Represents mean 72% survival rate\ntotal_df['FamSize_4'] = 0\ntotal_df.loc[total_df['FamilySize'] == 4, 'FamSize_4'] = 1\n# If FamilySize is 2 or 3, 1; else, 0\n# Represents mean 55-57% survival rate\ntotal_df['FamSize_2|3'] = 0\ntotal_df.loc[(total_df['FamilySize'] == 2) | (total_df['FamilySize'] == 3), 'FamSize_2|3'] = 1\n# Check\ntotal_df.tail()","5733a995":"# Check percent of 'Fare' data present\nprint(X[X['Fare'].isnull()==True].shape[0] \/ X.shape[0])","a4aaa9f3":"# Check percent of 'Age' data present\nprint(X[X['Age'].isnull()==True].shape[0] \/ X.shape[0])","3cf67bad":"X.loc[(X['FamilySize'] == 11)]","163c3079":"# Find mean age of all individuals of familysize of 11\n# Return mean age of FamilySize of 7\nmean7 = total_df.loc[(total_df['FamilySize'] == 7), ['Age']].mean(skipna=True)\n# Return mean age of FamilySize of 8\nmean8 = total_df.loc[(total_df['FamilySize'] == 8), ['Age']].mean(skipna=True)\n# Return mean age of FamilySize of 11\nmean11 = ((mean7 + mean8) \/ 2)\nprint(mean11)","8578a135":"# Replace all Age data for FamilySize == 11 with 17.69\nX.loc[(X['FamilySize'] == 11) & (X['Age'].isnull()), 'Age'] = 17.69","4301b1a9":"# Find average age for familysize == 1 AND sex == male\nmeanMale1 = total_df.loc[(total_df['FamilySize'] == 1) & (total_df['Sex'] == \"male\"), ['Age']].mean(skipna=True)\nprint(meanMale1)","00dee819":"# Replace all Age data for FamilySize == 1 AND Sex == male with 32.9\nX.loc[(X['FamilySize'] == 1) & (X['Age'].isnull()) & (X['Sex'] == \"male\"), 'Age'] = 32.09","d94c7351":"# Find average age for familysize == 1 AND sex == female\nmeanFemale1 = total_df.loc[(total_df['FamilySize'] == 1) & (total_df['Sex'] == \"female\"), ['Age']].mean(skipna=True)\nprint(meanFemale1)","f7533c04":"# Replace all Age data for FamilySize == 1 AND Sex == female with 29.83\nX.loc[(X['FamilySize'] == 1) & (X['Age'].isnull()) & (X['Sex'] == \"female\"), 'Age'] = 29.83","06a21ea1":"# Find average age for familysize == 2\nmean2 = total_df.loc[(total_df['FamilySize'] == 2), ['Age']].mean(skipna=True)\nprint(mean2)","f8532e63":"# Replace all Age data for FamilySize == 2 with 32.73\nX.loc[(X['FamilySize'] == 2) & (X['Age'].isnull()), 'Age'] = 32.73","4caa86fb":"# Find average age for familysize == 3\nmean3 = total_df.loc[(X['FamilySize'] == 3), ['Age']].mean(skipna=True)\nprint(mean3)","530dd59e":"# Replace all Age data for FamilySize == 3 with 27.12\nX.loc[(X['FamilySize'] == 3) & (X['Age'].isnull()), 'Age'] = 27.12","7529a47f":"# Find average age for familysize == 4\nmean4 = total_df.loc[(total_df['FamilySize'] == 4), ['Age']].mean(skipna=True)\nprint(mean4)","a2419baa":"# Replace all Age data for FamilySize == 4 with 19.42\nX.loc[(X['FamilySize'] == 4) & (X['Age'].isnull()), 'Age'] = 19.42","7f0d3925":"# Find average age for familysize == 5\nmean5 = total_df.loc[(total_df['FamilySize'] == 5), ['Age']].mean(skipna=True)\nprint(mean5)","3290b814":"# Replace all Age data for FamilySize == 5 with 23.77\nX.loc[(X['FamilySize'] == 5) & (X['Age'].isnull()), 'Age'] = 23.77","cc8a8a7a":"# Find average age for familysize == 6\nmean6 = total_df.loc[(total_df['FamilySize'] == 6), ['Age']].mean(skipna=True)\nprint(mean6)","aab0b4fb":"# Replace all Age data for FamilySize == 6 with 20.12\nX.loc[(X['FamilySize'] == 6) & (X['Age'].isnull()), 'Age'] = 20.12","7858041d":"print(mean7)\nprint(mean8)","4870c2b2":"# Replace all Age data for FamilySize == 7 with 17.38\nX.loc[(X['FamilySize'] == 7) & (X['Age'].isnull()), 'Age'] = 17.38\n# Replace all Age data for FamilySize == 8 with 18.0\nX.loc[(X['FamilySize'] == 8) & (X['Age'].isnull()), 'Age'] = 18.0","1fba87fd":"# Impact of Pclass on Survival rate\nprint(X[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean())","cfe5e851":"# Impact of Pclass on Fare\nprint(X[['Pclass', 'Fare']].groupby(['Pclass'], as_index=False).mean())","dbd06395":"# Find average Fare for Pclass == 1\nmean_class1 = total_df.loc[(total_df['Pclass'] == 1), ['Fare']].mean(skipna=True)\nprint(mean_class1)","9a394613":"# Replace all Fare data for Pclass == 1 with 87.51\nX.loc[(X['Pclass'] == 1) & (X['Fare'].isnull()), 'Fare'] = 87.51","c592e771":"# Find average Fare for Pclass == 2\nmean_class2 = total_df.loc[(total_df['Pclass'] == 2), ['Fare']].mean(skipna=True)\nprint(mean_class2)","9ff14fbf":"# Replace all Fare data for Pclass == 2 with 21.78\nX.loc[(X['Pclass'] == 2) & (X['Fare'].isnull()), 'Fare'] = 21.78","5345bcf0":"# Find average Fare for Pclass == 3\nmean_class3 = total_df.loc[(total_df['Pclass'] == 3), ['Fare']].mean(skipna=True)\nprint(mean_class3)","728ea9b5":"# Replace all Fare data for Pclass == 3 with 13.30\nX.loc[(X['Pclass'] == 3) & (X['Fare'].isnull()), 'Fare'] = 13.30","7000d8e0":"# Create 'Fare*Class' column that is product of Fare and Pclass\nX['Fare*Class'] = X['Fare'] * X['Pclass']\nX['Fare*Class'].isnull().sum()","e49f18c9":"# Check percent of 'Cabin' data present\nprint(X[X['Cabin'].isnull()==True].shape[0] \/ X.shape[0])","3a02ffee":"# Drop 'Cabin' data because there just isn't enough of it\nX = X.drop(['Cabin'], axis=1)","6e53daa8":"# Check percent of 'Sex' data present\nprint(X[X['Sex'].isnull()==True].shape[0] \/ X.shape[0])","fd098bae":"# Convert Sex data to 0's or 1's\nX.loc[X.Sex != 'male', 'Sex'] = 0\nX.loc[X.Sex == 'male', 'Sex'] = 1","399a9c24":"# Check percent of 'Embarked' data present\nprint(X[X['Embarked'].isnull()==True].shape[0] \/ X.shape[0])","8721a08b":"# Find unique Embarked values\nX['Embarked'].unique()","2fb06f75":"# Fill all missing 'Embarked' data with 0 for unknown\nX.loc[(X['Embarked'].isnull()), 'Embarked'] = 0\n# Replace 'Embarked' == S with 1\nX.loc[(X['Embarked'] == 'S'), 'Embarked'] = 1\n# Replace 'Embarked' == C with 2\nX.loc[(X['Embarked'] == 'C'), 'Embarked'] = 2\n# Replace 'Embarked' == Q with 3\nX.loc[(X['Embarked'] == 'Q'), 'Embarked'] = 3","ec862fe3":"# Check for missing data\nX.isna().values.any()","56d3e68a":"# Check for missing data\nX.isnull().values.any()","6426ad7d":"# Drop ticket, passengerID, pclass, name, fare, parch, sibsp\n# Come back to name data to see if I can pull out titles\nX = X.drop(['Ticket'], axis=1)\nX = X.drop(['PassengerId'], axis=1)\nX = X.drop(['Pclass'], axis=1)\nX = X.drop(['Name'], axis=1)\nX = X.drop(['Fare'], axis=1)\nX = X.drop(['Parch'], axis=1)\nX = X.drop(['SibSp'], axis=1)\nX = X.drop(['FamilySize'], axis=1)","7322d0ee":"# Check for missing values\nX.isnull().values.any()","27501161":"# Check for missing values\nX.isnull().values.any()","a16aa37d":"# Check data types\nX.dtypes","198908de":"# Take a peek\nX.head()","2f60b1b9":"# Create actual_y from survived column in train_X_df\nactual_y = pd.DataFrame(X['Survived'])\n# Drop that column from train_df\nX = X.drop(['Survived'], axis=1)","d0662823":"# How many rows?\nactual_y.shape","792dc93d":"# Check for missing values\nactual_y.isnull().values.any()","902e3aa7":"# Check for missing values\nactual_y.isna().values.any()","51cf42df":"# Check data types\nactual_y.dtypes","97304b84":"# Create test_target_df from survived column in target_df\ntest_X = pd.DataFrame(test_df)\n# Save 'PassengerId' to concatenate w\/ test data output after predictions\ntest_X_passId = test_X.PassengerId\n# Check\ntest_X_passId.shape","8f2f8eb8":"# Create 'FamilySize' column that is sum of SibSp and Parch and 1\ntest_X['FamilySize'] = test_X['SibSp'] + test_X['Parch'] + 1\ntest_X.head()","13e2958c":"# Bin FamilySize based on mean survival rates\n# If FamilySize is greater than 8, 1; else, 0\n# Represents mean 0% survival rate\ntest_X['FamSize_8+'] = 0\ntest_X.loc[(test_X['FamilySize'] >= 8), 'FamSize_8+'] = 1\n# If FamilySize is 1 or 7, 1; else, 0\n# Represents mean 30-33% survival rate\ntest_X['FamSize_1|7'] = 0\ntest_X.loc[(test_X['FamilySize'] == 1) | (test_X['FamilySize'] == 7), 'FamSize_1|7'] = 1\n# If FamilySize is 5 or 6, 1; else, 0\n# Represents mean 13-20% survival rate\ntest_X['FamSize_5|6'] = 0\ntest_X.loc[(test_X['FamilySize'] == 5) | (test_X['FamilySize'] == 6), 'FamSize_5|6'] = 1\n# If FamilySize is 4, 1; else, 0\n# Represents mean 72% survival rate\ntest_X['FamSize_4'] = 0\ntest_X.loc[test_X['FamilySize'] == 4, 'FamSize_4'] = 1\n# If FamilySize is 2 or 3, 1; else, 0\n# Represents mean 55-57% survival rate\ntest_X['FamSize_2|3'] = 0\ntest_X.loc[(test_X['FamilySize'] == 2) | (test_X['FamilySize'] == 3), 'FamSize_2|3'] = 1\n# Check\ntest_X.tail()","27d735ae":"# Check percent of 'Fare' data present\nprint(test_X[test_X['Fare'].isnull()==True].shape[0] \/ test_X.shape[0])","d592f4cd":"# Find unique Pclass values\ntest_X['Pclass'].unique()","a97c3b3d":"# Replace all Fare data for Pclass == 1 with 87.41\ntest_X.loc[(test_X['Pclass'] == 1) & (test_X['Fare'].isnull()), 'Fare'] = 87.51\n# Replace all Fare data for Pclass == 2 with 21.18\ntest_X.loc[(test_X['Pclass'] == 2) & (test_X['Fare'].isnull()), 'Fare'] = 21.18\n# Replace all Fare data for Pclass == 3 with 13.30\ntest_X.loc[(test_X['Pclass'] == 3) & (test_X['Fare'].isnull()), 'Fare'] = 13.30","5fae7f63":"# Create 'Fare*Class' column that is product of Fare and Pclass\ntest_X['Fare*Class'] = test_X['Fare'] * test_X['Pclass']\ntest_X['Fare*Class'].isnull().sum()","a548518b":"# Check percent of 'Age' data present\nprint(test_X[test_X['Age'].isnull()==True].shape[0] \/ test_X.shape[0])","75fc8271":"test_X.loc[(test_X['FamilySize'] == 11)]","7faac806":"# Replace all Age data for FamilySize == 11 with 17.69\ntest_X.loc[(test_X['FamilySize'] == 11) & (test_X['Age'].isnull()), 'Age'] = 17.69\n# Replace all Age data for FamilySize == 1 AND Sex == male with 32.09\ntest_X.loc[(test_X['FamilySize'] == 1) & (test_X['Age'].isnull()) & (test_X['Sex'] == \"male\"), 'Age'] = 32.09\n# Replace all Age data for FamilySize == 1 AND Sex == female with 29.83\ntest_X.loc[(test_X['FamilySize'] == 1) & (test_X['Age'].isnull()) & (test_X['Sex'] == \"female\"), 'Age'] = 29.83\n# Replace all Age data for FamilySize == 2 with 32.73\ntest_X.loc[(test_X['FamilySize'] == 2) & (test_X['Age'].isnull()), 'Age'] = 32.73\n# Replace all Age data for FamilySize == 3 with 27.12\ntest_X.loc[(test_X['FamilySize'] == 3) & (test_X['Age'].isnull()), 'Age'] = 27.12\n# Replace all Age data for FamilySize == 4 with 19.42\ntest_X.loc[(test_X['FamilySize'] == 4) & (test_X['Age'].isnull()), 'Age'] = 19.42\n# Replace all Age data for FamilySize == 5 with 23.77\ntest_X.loc[(test_X['FamilySize'] == 5) & (test_X['Age'].isnull()), 'Age'] = 23.77\n# Replace all Age data for FamilySize == 6 with 20.12\ntest_X.loc[(test_X['FamilySize'] == 6) & (test_X['Age'].isnull()), 'Age'] = 20.12\n# Replace all Age data for FamilySize == 7 with 17.38\ntest_X.loc[(test_X['FamilySize'] == 7) & (test_X['Age'].isnull()), 'Age'] = 17.38\n# Replace all Age data for FamilySize == 8 with 18.00\ntest_X.loc[(test_X['FamilySize'] == 8) & (test_X['Age'].isnull()), 'Age'] = 18.00","b6fd6579":"# Check percent of 'Cabin' data present\nprint(test_X[test_X['Cabin'].isnull()==True].shape[0] \/ test_X.shape[0])","9b80272f":"# Check percent of 'Sex' data present\nprint(test_X[test_X['Sex'].isnull()==True].shape[0] \/ test_X.shape[0])","b8227422":"# Convert Sex data to 0's or 1's\ntest_X.loc[test_X.Sex != 'male', 'Sex'] = 0\ntest_X.loc[test_X.Sex == 'male', 'Sex'] = 1","0a8e2668":"# Check percent of 'Embarked' data present\nprint(test_X[test_X['Embarked'].isnull()==True].shape[0] \/ test_X.shape[0])","92770ffd":"# Fill all missing 'Embarked' data with 0 for unknown\ntest_X.loc[(test_X['Embarked'].isnull()), 'Embarked'] = 0\n# Replace 'Embarked' == S with 1\ntest_X.loc[(test_X['Embarked'] == 'S'), 'Embarked'] = 1\n# Replace 'Embarked' == C with 2\ntest_X.loc[(test_X['Embarked'] == 'C'), 'Embarked'] = 2\n# Replace 'Embarked' == Q with 3\ntest_X.loc[(test_X['Embarked'] == 'Q'), 'Embarked'] = 3","fbe9f35e":"# Drop ticket, pclass, name, fare, parch, sibsp, cabin\n# Come back to name data to see if I can pull out titles\ntest_X = test_X.drop(['Ticket'], axis=1)\ntest_X = test_X.drop(['Pclass'], axis=1)\ntest_X = test_X.drop(['Name'], axis=1)\ntest_X = test_X.drop(['Fare'], axis=1)\ntest_X = test_X.drop(['Parch'], axis=1)\ntest_X = test_X.drop(['SibSp'], axis=1)\ntest_X = test_X.drop(['FamilySize'], axis=1)\ntest_X = test_X.drop(['Cabin'], axis=1)\ntest_X = test_X.drop(['PassengerId'], axis=1)","cf483346":"# Take a peek\ntest_X.head()","6c5b616c":"# Check for missing values\ntest_X.isnull().values.any()","96e6d4f3":"# Check for missing values\ntest_X.isna().values.any()","eabf3544":"# Set up grid search, 5 folds\nmodel_5fold = model = tree.DecisionTreeClassifier()\nparam_grid = {'max_depth': list(range(1,11)),\n              'criterion': ['entropy', 'gini']\n              }\ngrid_5fold = GridSearchCV(model_5fold, param_grid, cv=5)","a2694586":"# Perform grid search \ngrid_5fold.fit(X, actual_y)","9fb9ed34":"# Print out best parameters\nprint(\"Best parameters: {}\".format(grid_5fold.best_params_))","0cd03480":"# Get the accuracy\n# Evaluate the tree       \ny = grid_5fold.best_estimator_.predict(X)\n# Print accuracy          \nprint(\"Accuracy: {}\".format(accuracy_score(actual_y, y)))","41db46d3":"# Add test Passenger ID's to output dataframe\nCV_GS_corrected_avg_results = pd.DataFrame(test_X_passId)\n# Create 'Survived' column to store predicted values\nCV_GS_corrected_avg_results.insert(1,'Survived', np.nan)","ae7c3f83":"# Run prediction and place output in 'Survived' column\nCV_GS_corrected_avg_results.Survived = grid_5fold.best_estimator_.predict(test_X)","f0084830":"# Take a peek\ntitanic_CV_GS_results.head()","00a03b96":"# Save output, test_predict_dt15, to .csv for submission\nCV_GS_corrected_avg_results.to_csv('CV_GS_corrected_avg_results.csv', index = False)","9ec08aa6":"#### 78.2% of test_X.Cabin data is missing.\n#### Drop it.","73188201":"### Training 'Fare' Data","74e693b7":"#### 0.0% of test_X.Embarked data is missing.","b71c1dfa":"### Test 'Age' Data","9fe2c1a0":"#### 2.4% of test_X.Fare data is missing.","f646cef9":"#### 20.6% of test_X.Age data is missing.","4c6c838d":"### Test 'Embarked' Data","d5aa9316":"### Test Data Prep","40a6c989":"## Grid Search Model","8c3da3ac":"### Training Data Prep","06a2cde7":"#### Tragic. It looks like an entire family.","d66824eb":"### Training 'Sex' Data","e252b82d":"### 0.0% test_X.Sex data is missing.","0c92aced":"\n# Justin Bosscher\n# Kaggle Titantic Comptetition\n## Fifth Submission\n## CV \/ GS with corrected mean values (taken from train and test data sets combined)\n### Forked from k-NN Back to CV \/ GS","df4d206c":"### Best parameters are gini with depth of 5.","90c00110":"### Training 'Fare'","2cb9c026":"#### Had a lot of difficulty replacing these nan's with loc.","5724300b":"### Drop Columns","5c4dd50b":"#### More than 77% of 'Cabin' data is missing.","5197341d":"## SET UP WORKSPACE","e6c3dfad":"#### Just under 20% of 'Age' data is missing.","015134e4":"#### It appears that those individuals with familysize between 2 and 4 people had the highest survival rates.\n#### In particular, if familysize was 4, you had the best chance of survival at 72.4 percent.\n#### Familysize of 2 and 3 had survival rates of 55.3 and 57.8 percent, respectively.\n#### Those members of a family that was 8 or more had the lowest survival rates.","62dbaecb":"### Training 'Embarked' Data","e656d4b0":"#### Pclass and Fare are interaction terms. Fill in missing and multiply them. Then, drop.","b641b762":"#### There is no missing 'Sex' data.","3779e112":"\n### Create Target Vector","7ca52822":"### Test 'Sex' Data","536e32c3":"### Training 'Age' Data","d10df58c":"### Drop Remaining Columns","260791f9":"## DATA PREP","c7ba8aa1":"#### No 'Fare' data is missing.","864158ff":"#### Little more than 2% of 'Embarked' data is missing.","342c493d":"### Test FamilySize Data","ca5fcb95":"#### NOTE: For the next iteration, it might be worthwhile to create average ages based on titles. Even further, can I average the ages of the parents based on gender? Would that matter?","f520399a":"### Training FamilySize Data","21591763":"#### Generally, age decreases as FamilySize increases.\n#### Why is mean age for FamilySize == 11 NaN?\n","088bd7a4":"### Test 'Cabin' Data","e5487780":"### Training 'Cabin' Data","27e9a60a":"### Test 'Fare' Data"}}