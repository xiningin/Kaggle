{"cell_type":{"6aae5d5d":"code","719e3d50":"code","c47807c2":"code","f280eaa4":"code","2c16e792":"code","f029a024":"code","32d0e689":"markdown","bd265279":"markdown","e4952899":"markdown","26a81627":"markdown","86a62497":"markdown","ea6b69f0":"markdown"},"source":{"6aae5d5d":"from pandas import read_csv\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.covariance import EllipticEnvelope\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.svm import OneClassSVM\n\nfrom sklearn.metrics import mean_absolute_error","719e3d50":"path = '..\/input\/boston-housing-dataset\/housing.csv'\ndf = read_csv(path)\n\ndata = df.values\nX, y = data[:, :-1], data[:, -1]\n\nprint(X.shape, y.shape)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=1)\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","c47807c2":"iso = IsolationForest(contamination=0.1)\nyhat = iso.fit_predict(X_train)\n\n# select all rows that are not outliers\nmask = yhat != -1\nX_train, y_train = X_train[mask, :], y_train[mask]\n# summarize the shape of the updated training dataset\nprint(X_train.shape, y_train.shape)\n\n# fit the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n# evaluate the model\nyhat = model.predict(X_test)\n\n# evaluate predictions\nmae = mean_absolute_error(y_test, yhat)\nprint('MAE: %.3f' % mae)","f280eaa4":"ee = EllipticEnvelope(contamination=0.01)\nyhat = ee.fit_predict(X_train)\n\n# select all rows that are not outliers\nmask = yhat != -1\nX_train, y_train = X_train[mask, :], y_train[mask]\nprint(X_train.shape, y_train.shape)\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n# evaluate the model\nyhat = model.predict(X_test)\n# evaluate predictions\nmae = mean_absolute_error(y_test, yhat)\nprint('MAE: %.3f' % mae)","2c16e792":"lof = LocalOutlierFactor()\nyhat = lof.fit_predict(X_train)\n# select all rows that are not outliers\nmask = yhat != -1\n\nX_train, y_train = X_train[mask, :], y_train[mask]\n# summarize the shape of the updated training dataset\nprint(X_train.shape, y_train.shape)\n# fit the model\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n# evaluate the model\nyhat = model.predict(X_test)\n\n# evaluate predictions\nmae = mean_absolute_error(y_test, yhat)\nprint('MAE: %.3f' % mae)","f029a024":"ee = OneClassSVM(nu=0.01)\nyhat = ee.fit_predict(X_train)\n# select all rows that are not outliers\nmask = yhat != -1\n\nX_train, y_train = X_train[mask, :], y_train[mask]\n# summarize the shape of the updated training dataset\nprint(X_train.shape, y_train.shape)\n\n# fit the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# evaluate the model\nyhat = model.predict(X_test)\n\n# evaluate predictions\nmae = mean_absolute_error(y_test, yhat)\nprint('MAE: %.3f' % mae)","32d0e689":"# Boston Housing - Outlier Detection","bd265279":"# Dataset","e4952899":"# Minimum Covariance Determinant\n","26a81627":"# Isolation Forest","86a62497":"# Local Outlier Factor","ea6b69f0":"# SVM"}}