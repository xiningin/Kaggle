{"cell_type":{"255fde1e":"code","e9c9f002":"code","ff2a9831":"code","0d22b7d1":"code","488adcdc":"code","d027221b":"code","454992f0":"code","9649f7b7":"code","192c1a3e":"code","f6101fa4":"code","9709ed00":"code","74e0b04f":"code","d06439f4":"code","ee39959c":"code","2a1e1f4c":"code","60af1fb0":"code","05d7444a":"code","3f1b2476":"code","b71d7fce":"code","657905bf":"code","c6474638":"code","2fbe3d86":"code","c29e0eb5":"code","c68cb31c":"code","966a705d":"code","329b4f7c":"code","4f3468d4":"code","8ed01f8b":"code","24ebb2fe":"code","d4080ed0":"code","3ab28ea1":"code","37d59487":"code","4e6fce04":"code","af6390e6":"code","0152660b":"code","d7df0b6d":"code","784d87a7":"code","b626a628":"markdown","f5041cd8":"markdown","ee71d7b8":"markdown","6c4639c7":"markdown","06040d48":"markdown","29053e25":"markdown","cf67bc61":"markdown","dbb25274":"markdown","9a4387c4":"markdown","8ec6c18c":"markdown","fe3a8364":"markdown","6d4b1dd8":"markdown"},"source":{"255fde1e":"# \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e9c9f002":"# \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 .csv \u0444\u0430\u0439\u043b\u0430 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443\ndata = pd.read_csv('..\/input\/craigslist-carstrucks-data\/vehicles.csv')\ndf = data.copy()\ndf.head()","ff2a9831":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0435\u0440\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\ndf.describe()","0d22b7d1":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u0430\u0431\u043b\u0438\u0446\u0435\ndf.info()","488adcdc":"# \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\nfig, ax = plt.subplots(figsize=(14,10))\nsns.heatmap(df.isnull(), cbar=False, cmap=\"Greys_r\")\nplt.show()","d027221b":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\nlen(df)","454992f0":"# \u0443\u0434\u0430\u043b\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \n# \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0435 \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0435 \u043d\u0430 \u0438\u0442\u043e\u0433\u043e\u0432\u0443\u044e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e\ndf.drop(columns=['id', 'url', 'region', 'region_url', \n                 'vin', 'size', 'image_url', \n                 'description', 'county', \n                 'state', 'lat', 'long'], inplace=True)","9649f7b7":"from sklearn.impute import SimpleImputer\n\n# \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 'odometer' \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0443\nimr = SimpleImputer(strategy='mean')\nimr = imr.fit(df[['odometer']])\nimputed_data = imr.transform(df[['odometer']])\ndf['odometer'] = pd.DataFrame(imputed_data)\ndf['odometer'].head()","192c1a3e":"# \u0443\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445\ndf.dropna(inplace=True)","f6101fa4":"# \u0435\u0449\u0451 \u0440\u0430\u0437 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\nfig, ax = plt.subplots(figsize=(14,10))\nsns.heatmap(df.isnull(), cbar=False, cmap=\"Greys_r\")\nplt.show()","9709ed00":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\ndf['price'].value_counts","74e0b04f":"# \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0441 \u044d\u043a\u0441\u0442\u0440\u0435\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\ndf = df[df['price'] > 1000]\ndf = df[df['price'] < 50000]","d06439f4":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0441\u0442\u0440\u043e\u043a \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\nlen(df)","ee39959c":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0443\u044e\u0441\u044f \u0432 \u0438\u0442\u043e\u0433\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\ndf.head()","2a1e1f4c":"from sklearn import preprocessing\n\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0434\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndef encode_features(dataframe):\n    result = dataframe.copy()\n    encoders = {}\n    for column in result.columns:\n        if result.dtypes[column] == np.object:\n            encoders[column] = preprocessing.LabelEncoder()\n            result[column] = encoders[column].fit_transform(result[column])\n    return result, encoders\n\n# \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043a\u0440\u043e\u043c\u0435 'description'\nencoded_df, encoders = encode_features(df) \nencoded_df.head()","60af1fb0":"# \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nencoded_df.hist(figsize=(18, 8), layout=(3,5), bins=20)\nprint('Features\\' hists plotted')","05d7444a":"# \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\nplt.subplots(figsize=(17, 15))\nsns.heatmap(encoded_df.corr(), square = True, annot=True)\nplt.show()","3f1b2476":"# \u043e\u0442\u0434\u0435\u043b\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ny = np.array(encoded_df['price'])\ndel encoded_df['price']\nX = encoded_df.values\nX.shape, y.shape","b71d7fce":"from sklearn.model_selection import train_test_split\n\n# \u0440\u0430\u0437\u043e\u0431\u044c\u0451\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435 \u0438 \u0438\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","657905bf":"from sklearn.preprocessing import StandardScaler\n\n# \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nstdsc = StandardScaler()\nX_train = stdsc.fit_transform(X_train)\nX_test = stdsc.transform(X_test)","c6474638":"%%time\nfrom sklearn.metrics import r2_score, mean_absolute_error\nfrom sklearn.linear_model import LinearRegression\n\nlinreg = LinearRegression()\nlinreg.fit(X_train, y_train)","2fbe3d86":"# \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438\npreds = linreg.predict(X_test)\nprint('R2 linreg: ', r2_score(y_test, preds))\nprint('MAE linreg: ', mean_absolute_error(y_test, preds))","c29e0eb5":"%%time\nfrom sklearn.linear_model import SGDRegressor\n\nsgd = SGDRegressor()\nsgd.fit(X_train, y_train)","c68cb31c":"# \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438\npreds = sgd.predict(X_test)\nprint('R2 sgd: ', r2_score(y_test, preds))\nprint('MAE sgd: ', mean_absolute_error(y_test, preds))","966a705d":"%%time\nfrom sklearn.tree import DecisionTreeRegressor\n\ntree = DecisionTreeRegressor()\ntree.fit(X_train, y_train)","329b4f7c":"# \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438\npreds = tree.predict(X_test)\nprint('R2 tree: ', r2_score(y_test, preds))\nprint('MAE tree: ', mean_absolute_error(y_test, preds))","4f3468d4":"%%time\nfrom sklearn.ensemble import GradientBoostingRegressor\n\ngbreg = GradientBoostingRegressor()\ngbreg.fit(X_train, y_train)","8ed01f8b":"# \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438\npreds = gbreg.predict(X_test)\nprint('R2 gbreg: ', r2_score(y_test, preds))\nprint('MAE gbreg: ', mean_absolute_error(y_test, preds))","24ebb2fe":"# \u0437\u0430\u0440\u0443\u0437\u0438\u043c tensorboard \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n!jupyter nbextension enable --py widgetsnbextension\n%load_ext tensorboard","d4080ed0":"%tensorboard --logdir logs\n\nfrom sklearn.model_selection import GridSearchCV\nimport xgboost as xgb\n\n# \u043f\u0435\u0440\u0435\u0431\u0435\u0440\u0451\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b XGBRegressor \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e GridSearchCV\n# \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e tensorboard\nalg = xgb.XGBRegressor() \ngrid = {'n_estimators': [60, 100, 120, 140], \n        'learning_rate': [0.01, 0.1],\n        'max_depth': [5, 7],\n        'reg_lambda': [0.5]}\ngs = GridSearchCV(estimator=alg, param_grid=grid, cv=5, n_jobs=-1)\n%time gs.fit(X_train, y_train)\nprint('Best score: ', gs.best_score_)\nprint('Best parameters: ', gs.best_params_)","3ab28ea1":"# \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441 \u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0438 \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nxgbreg = gs.best_estimator_\nxgbreg.fit(X_train, y_train)","37d59487":"# \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438\npreds = xgbreg.predict(X_test)\nprint('R2 xgbreg: ', r2_score(y_test, preds))\nprint('MAE xgbreg: ', mean_absolute_error(y_test, preds))","4e6fce04":"%%time\nfrom sklearn.ensemble import RandomForestRegressor \n\nrnfst = RandomForestRegressor()\nrnfst.fit(X_train, y_train)","af6390e6":"# \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438\npreds = rnfst.predict(X_test)\nprint('R2 rnfst: ', r2_score(y_test, preds))\nprint('MAE rnfst: ', mean_absolute_error(y_test, preds))","0152660b":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0438\nplt.hist(y_test - preds)","d7df0b6d":"# \u043d\u0430\u043b\u043e\u0436\u0438\u043c \u0434\u0440\u0443\u0433 \u043d\u0430 \u0434\u0440\u0443\u0433\u0430 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0438 \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nplt.hist(y_test)\nplt.hist(preds)","784d87a7":"import pickle\n\n# \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u043b\u0435\u0441\u043e\u0432\nfile = open('RandomForest_model.pickle','wb')\npickle.dump(rnfst, file)\nfile.close()","b626a628":"## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","f5041cd8":"### Gradient boosting regression","ee71d7b8":"### Random forest","6c4639c7":"### Extreme gradient boosting","06040d48":"# Used cars price prediction with different models","29053e25":"### Linear regression","cf67bc61":"### Decision tree","dbb25274":"### Stochastic gradient descent","9a4387c4":"## \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","8ec6c18c":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","fe3a8364":"* \u041d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441 R2=0.88 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438\u0441\u044c \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u043b\u0435\u0441\u043e\u0432, \u043d\u043e \u043e\u043d\u0430 \u0442\u0430\u043a\u0436\u0435 \u0438 \u043e\u0434\u043d\u0430 \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u0437\u0430\u0442\u0440\u0430\u0442\u043d\u044b\u0445 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438.","6d4b1dd8":"* \u0412 \u044d\u0442\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 **Used Cars Dataset** \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0440\u0435\u0448\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 (\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0446\u0435\u043d\u044b \u043d\u0430 \u043f\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u043d\u044b\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438) \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u0440\u0435\u0448\u0430\u044e\u0449\u0438\u0445 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0438 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0430."}}