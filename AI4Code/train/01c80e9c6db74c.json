{"cell_type":{"b315b97c":"code","e24259f5":"code","58af0b74":"code","e74d6822":"code","9683a141":"code","e844e579":"code","06c56ae2":"code","d4f45cf2":"code","cdf6baa3":"code","bb4dd466":"code","c01cf5d5":"code","746d0289":"code","9cc7de92":"code","78ced250":"code","4046aca1":"code","8d08f8e7":"code","be886605":"code","99b19ce0":"code","1960da27":"markdown","a390eb6c":"markdown","ade81b3b":"markdown","db4a30b8":"markdown","49513b65":"markdown","c84ffa99":"markdown","66b2df7b":"markdown","7565f251":"markdown","f576ee5d":"markdown","ff82eb46":"markdown","b06d9046":"markdown","64945a4c":"markdown","3fb21b75":"markdown","a7649f90":"markdown","2120e85c":"markdown"},"source":{"b315b97c":"import numpy as np \nimport pandas as pd\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.probability import FreqDist\nimport string as s\nimport re\nfrom textblob import TextBlob\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e24259f5":"df=pd.read_csv('\/kaggle\/input\/onion-or-not\/OnionOrNot.csv')\ndf.head()","58af0b74":"df.info()","e74d6822":"x=df.text\ny=df.label\ntrain_x,test_x,train_y,test_y=train_test_split(x,y,test_size=0.2,random_state=1)","9683a141":"def tokenization(text):\n    lst=text.split()\n    return lst\ntrain_x=train_x.apply(tokenization)\ntest_x=test_x.apply(tokenization)","e844e579":"def lowercasing(lst):\n    new_lst=[]\n    for i in lst:\n        i=i.lower()\n        new_lst.append(i)\n    return new_lst\ntrain_x=train_x.apply(lowercasing)\ntest_x=test_x.apply(lowercasing)    ","06c56ae2":"def remove_punctuations(lst):\n    new_lst=[]\n    for i in lst:\n        for j in s.punctuation:\n            i=i.replace(j,'')\n        new_lst.append(i)\n    return new_lst\ntrain_x=train_x.apply(remove_punctuations)\ntest_x=test_x.apply(remove_punctuations)      ","d4f45cf2":"def remove_numbers(lst):\n    nodig_lst=[]\n    new_lst=[]\n    for i in lst:\n        for j in s.digits:    \n            i=i.replace(j,'')\n        nodig_lst.append(i)\n    for i in nodig_lst:\n        if i!='':\n            new_lst.append(i)\n    return new_lst\ntrain_x=train_x.apply(remove_numbers)\ntest_x=test_x.apply(remove_numbers)","cdf6baa3":"def remove_stopwords(lst):\n    stop=stopwords.words('english')\n    new_lst=[]\n    for i in lst:\n        if i not in stop:\n            new_lst.append(i)\n    return new_lst\ntrain_x=train_x.apply(remove_stopwords)\ntest_x=test_x.apply(remove_stopwords)  ","bb4dd466":"def remove_spaces(lst):\n    new_lst=[]\n    for i in lst:\n        i=i.strip()\n        new_lst.append(i)\n    return new_lst\ntrain_x=train_x.apply(remove_spaces)\ntest_x=test_x.apply(remove_spaces)  ","c01cf5d5":"lemmatizer=nltk.stem.WordNetLemmatizer()\ndef lemmatzation(lst):\n    new_lst=[]\n    for i in lst:\n        i=lemmatizer.lemmatize(i)\n        new_lst.append(i)\n    return new_lst\ntrain_x=train_x.apply(lemmatzation)\ntest_x=test_x.apply(lemmatzation)","746d0289":"train_x=train_x.apply(lambda x: ''.join(i+' ' for i in x))\ntest_x=test_x.apply(lambda x: ''.join(i+' ' for i in x))","9cc7de92":"freq_dist={}\nfor i in train_x.head(20):\n    x=i.split()\n    for j in x:\n        if j not in freq_dist.keys():\n            freq_dist[j]=1\n        else:\n            freq_dist[j]+=1\nfreq_dist","78ced250":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfidf=TfidfVectorizer()\ntrain_1=tfidf.fit_transform(train_x)\ntest_1=tfidf.transform(test_x)","4046aca1":"train_arr=train_1.toarray()\ntest_arr=test_1.toarray()","8d08f8e7":"NB_MN=MultinomialNB()\ndef select_model(x,y,model):\n    scores=cross_val_score(model,x,y,cv=5,scoring='f1')\n    acc=np.mean(scores)\n    return acc\nselect_model(train_arr,train_y,NB_MN)","be886605":"NB_MN.fit(train_arr,train_y)\npred=NB_MN.predict(test_arr)\nprint('first 15 actual labels: ',test_y.tolist()[:20])\nprint('first 15 predicted labels: ',[pred[:20]])","99b19ce0":"from sklearn.metrics import f1_score,accuracy_score\nprint(f1_score(test_y,pred))\nprint(accuracy_score(test_y,pred))","1960da27":"<h1>Load the Dataset<\/h1>","a390eb6c":"<h1>Onion Or Not<\/h1>\n<img src='data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAASwAAACoCAMAAABt9SM9AAABI1BMVEX\/\/\/8AAAD8\/Pzv7++Li4v\/\/f\/9\/\/\/39\/fMzMzh4eFbW1v5+fkAjVHy8vK4uLh6enpOTk6urq7R0dHZ2dmcnJzk5ORjY2MxMTHCwsKQkJD3\/\/9nZ2elpaWCgoJzc3PV1dUoKChBQUFLS0sAj0+Xl5d1dXUvLy8AgkgeHh4AkU85OTkREREAgUcAiU49PT1eXl4Af0z\/9\/8WFhYAhUYAe0zr\/\/yi0r8Ah1bP6N57vKDf9+uGu6c3hWnB59fI7eTW+Oa15tC3180AdVGF0K4TglVoq40pmWpPm3iXy7MAckZ5s5k0kmovimRKlHUajmBIonlgr46g5cq47tq03cd6waCdybOz8tY+lHLS\/+8zm3RqspWmz7yAtJ+w3dJru5WWxq82pnRPq42QAAATS0lEQVR4nO1bi0PiyJPudEhISECeAuFNVESJRhEZM4c6v8WRG12cXWfPndnH3P\/\/V1xVJ4EkBGXcudu9u\/52R0LSzy9V1VXVDSEcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHByvhAT\/ZMDfPY5\/PmSJyC5XMqF\/92D+6ZAlYyRL8B9Qxsl6Ccbbf3OALMDfPZJ\/PGTinJ1NJONyZHCy4iHLS4N+ZQ+uybt\/vTVkwm18HAJkSc6098NkOrwxyDqyKMV\/9DUWza8Zqsvae0VjrK240dGXmtNe3SOonmufDAMYo6O5Ph5bYwduPitZryJrTUvJ77qYbNCaqJZe3bw7cZn5DFdj0zKHPxhXozVkqZliIlHrVl\/TUVIpNmq1rURGDfZOahn3MzwmmhRVRWk901wrl9itNRv1fKhqphHDFaWaqOaVCntUrNZ3EsnXTMBzQKlEUciMt7apm9b72+mFRGPJSggMW9\/WiQYvRG3sCT6ymQA7KWFLi4hqttvttE+hYBe+FFLbLlI57zGUTdY7i9YOdsRlaxmho0Zaa0Bre\/tYEssVK\/VMXWm8OGbfNuEnuJ9gxYmrgo7jXE0eZ7PbM6vft0yz9+\/nMiVxbL2OLEqSCSGEjrJ4mILpFogWLL9kFb4oi2+JRYFMO9TaYX35BL7mSAipRTkRWG6SMlF26upL2rrwn+CTMWE4k8fzDzcPd\/O51esNQarMvmnb9zcTgy7JojRd8OfyCrLwNRf2hCga\/mjZXIqhKi+Qla6ttJYVA2QJ2+l1ZNFSkew1ampGeYks2QOomCyNrn\/48OP9tNezLFPX9WFvMOhZcGFfTEbycjUsbqU6R\/uCbxJfR5ayMjmckacs7lxSpcDonyELrJl4FNPavhogS9gPchGSrHSTtEmKFAsvkWUA2Ifz+PbzfHzW13XQOSBqMH\/4fXb+OHuw+vZHQzIk2SeLLrt5LVmE5OO4EoRaaC6HmWWFZ8iC6R7EtrZfCpAFZePJoqSq1IlS2XpxzWQ2Sr46v53aw+GwN394r\/f7Pfvz7NoZAYVE\/mlg2j+Hm\/kOZImH8WR5k1\/MZTfpd\/0sWdtrWuuEyEI7T9xlJCRZhO4kMsVGOjrIFYClMq5v5qBtvfmXx6vJJ7BU0y+gddLJCbpq52Pdsp1wne9A1qqF8cF0YTmXg3y401iycmtbq4bIEgS0+toKWfDyKmrMKMOgEhn99ARMDaZglozrj1bPfpo5hiQZTEOvbgbgNsyNcBD918mKNVgu0DMIzEUQdlxZeIas5DoxBZTCZAnbYoxksVvPONVgfiR0FCY\/2mZ\/eHcOOvfu1u71foQrWBgNCs+k87HZt3TrsyyFXIZlN6yDFbJejC5CZESRjz4HOw8NPkPWesFynwfJEk6V8ADExaCeI0sGo+18sUGq5j85ZHT+ZFv20yOEOBJaMvlE\/vnWBiIt8xmyGDyyfJ+OBkI0+EirLaVVCt4kpBQY\/GFCaeWC5OyukAl2ntLFt1WyOoGytUyrshusGyULqmjxZD0DmRp0ct8zzbNPjiT\/cdfrD+c\/QUSDbjv6XsZsDM6orYPr8NlYuu5aPu8vZBW4LJCAZGlKtdZtHzRbC5HWctuuiuwlSgE5D4hCV4zeEeiq5IGdX09WMkCNa+HU\/eWt\/ApZwpH6jWRh6PJo901rOjGIc2Nblv3JQQkCnkC2jKuHwdDsD375D1DDuUEMv54a7re9JKtWXQzRd5crgUEHfczmsr7v2daXBdUYNW231pNVWRbz48aA6NZXyYIBLpfPTcg6Meg7W+8Pf7yidDKFSPl2IuPKCCxS8Kke5zZEOfY1cQZhskrhXveWZAVRYGUb4ZtLo7bkorKwFJ3FPeV5m7ZCVnHxpblorbq4txtHlrBcEjYhC7zQqWkOn8Az\/w3t1lew8CzTLsvA1uzM0s3++PLEmABZ9mgZE25GVhOL7kTvLqK18uJWmq5OL\/dqspbULxUgFUvWEhuRRT9bffPekYwZKOP0Giy+5MU91PgIDJm6PTFO5NkQop31ZJXjyRLgdsGfXD3jK6jv9rWD5Tws9bD+F8jytVr8rmSR2UDv25eyfG6bvacrdNYp40oynFsbuZpO8OYDhD69AFkRm7UfJKtR3PIvS4sJs4hFy7Lrovfml4HcMuW2qIo1XklWZiFZywJ\/lSyc+Whu6uZHQq5tffjjCHdvqBdS\/\/pkAfq4SyFJozEEigPHJ4vSZCbj952DSxR8j6yUFiBO9d9twh2\/u2J1vAEszWtuMb3lWpB\/NVnZRWtLc9n4DmQ9gqYNJuTSHg8fRoZPFKyFzhOadt2+lk+oLE0GZl8fvFlkZtjfSDdBp9QXPNUfoVJi8LICSRqRon2NuB7YutVw1eFcISsQDvgZsYD854JkJVaTE5uQ9Qls0Z3sjC3rYSQZhoTZBzDt8ujJGgNZg3cGBRdC\/mSFyCIvkeWbNDXerfaqBF51VmOvIHDnlATJIqXOS2RpgYfuMiyu87Ny0RV6E5sly+9Ns\/\/x13tLHzsS24lAR1QyRg89EwzW2TXOAJbH9zqq4buNyfIN6xqy0q54BleJ\/VyhpDQDN5ohsujKqvq8B58olArFYHESJosokUByAwNv2Kbe\/3xngSrCkkfQPLGA8MvQ0vv62TnmbYCsq56OScB34crLbug3kuWPrBv30IMSJYuooWxVlKyQCq+gESGLkmQzVOBFsiAsHJiY5ev3PqG\/TvyM6Qx9hr498+5JMyTLGp6TuNhQ9cK9eLI8v7ocxH4o0RuPNlkhK+ydrEpW+hmyClHJoiGXfxOyiNHDvLFpohJ6RID3PsEksmlfGBIbozS6t5hkRcjyBNmPX+LJ8magkFjEZzYRmTiySGtphWLyWXGenovj8KvBOIxqoYT9BpI1cskaXAAl7u4ORNbAjWnpvVvDyzLIj7YeR5avRI2drdrSdYiQ5ZU68GarhFMgy1Avgm4k3bSotFhBY8ii+8IaiOHVY7HHkwmUeAkSSBbwotuXkky9rTCJfB2Azunv3c1U+De6g6BHt1bUMJjm1NZJlj+e\/XqJJCspP+vmgq4VBtdLjSFrEZXHbFisy+i7YhpHFin5XbxIFrDxfmhiWg99BnYL2Lg8w52Ks8tFWvSXHmoqSNZjuHpQ5yvryKIrqlYJNRKfWPbSBjFkLSxz3O7Omvyft0keQxZdxFeb+Flfhmi6v2C6FL9TYO0BmemdEzf7cCI7QJ55917XwXkNH9w4XY6nuVayomFkIJBmg21GHwtulhQfxkmW\/5biJIvGLhk7bro4shouBuB6cJuQ9dtQN63ejJGFkORHcNb7vY\/goroBtXOH+9CPF5ZuX0UOsgVT6MlQpjRIVjTTvhtmfFUaUotIMZ4ssMzbazZZKSmUI63hPuF6shiKG5I1GYA5AmMkudv3ErruEBFOHeom\/4jzgFZtbtyYuu2EyaKk4ucN2jnqO8W7UbI0IgZivP3IQOGbuAx7AAeZ5ZN4svA6x3Y0VsmCZ8WgmT9MpL29gLVk4a54eaOsw+he75vDGfXOEUnGObhY+nAmUwiqQQmdh6FlmSB6D6Y1HcnRZD6tFBuNYr2F4ynlGdw9uXyLfdH80VS7wOvhQS0Tux0g5o6ZQJx2EiEfIy36iPZLSkzxFs+DR19oZfeIuTXlZiZ4X1uU1qKtkcZG+azfe33dvHBPgeDBoima8rsRWwclYzIfoNMwHY3GuvVkhDcsvhHhGa0+Vgsl7bkCETx\/DiypqurLu6Wh9l4uIr\/Bk0S3zFUHrZMvbLBY9rmMOmo4F70+6KQ5+IVcD63en+S1ZC3O9K09F+je3+BwXqDG2pKBpfM7tLaELN+C5MxH6ICeGECdrvfBYgF3o8uLKXjyeHjmbkRuYDE8J\/EHs74d3+U43\/\/8AXOZXA\/QKaB4xl0ybmBx1PXxD7\/NPjyd9VgkZFnTXwm4D\/2e871O3r7u3OnfD1j+bsArvQUPSzakR3Q\/wVe3epYFhp+dpLF6f8jkQ6\/fvzOeP0z6fx+SIV1NLWvwswTLnzPXMbDB\/1GmTPzWu7+W5csBLJlfZUmOrvovo7B60qIQPFCmUXZOGZpSnl2Q3L6SnhXSKNWeFU8sJxZK31mCDYmcg6Gagw81uulZY5cqEC6Xr\/GHkXQCvlcfz9BE7Lt6mlnTaADBnRsG8M6ChxV3Onu1rd3uXlJ1UwNr4JFUOW6n4EPbKh9F\/bVo+XTzuJHdK7w8ws2BPvroPajb3dXoE+7mWHefbu56Q+BpaI\/vLi5xt+Ijpk2\/kOhPK3Zwy+QlJBKr94R84MsOBs3JdjpZe456hUWUGmbV2XGaWv153wFKoIufzT1T5tshyyfyA4iRNX\/qgVD17SvDcCbnFx\/ezt5djjA+lP8c9MGDcFb8hk4CUx+UnXRiI2cqBddJ3xd1\/Sa4p7mP8AklyjbcTPpO1w5z84tJtwb1Tu7jqWO3WbexbN0VLrXZhCibkkSFPUu6bonno1OvC0QST6bSCttv9frSAq2zslrS7THpT2ADsnA7jGX3wKhbH+WThQRhjlm+uhmA6Rp8XanZaqoCTkHcbWeKnfZOqXHUzsCIKt2tgx1aarYrzdNSvQPSp1WzW3s5jSjZ3W4zSXJJmtyq1bJp6pIFkgX+aqJcJSJUKnb28QCuetxM1URKq6lmR1VTQifFzoKqtbTQhrlXQdLEZq2WUkupLNjASpXSZjYlKtA5C9TpITscSTXSykJfedLa3leh+n6eKKlO66hL0o1UswzSjD01xU0MMErLec816ToGNn+yNDzFI0f4k6bR4xSXR3Bb5agWNhXSPsA30xLaLdoQsiUtJaQhXlMIstgSOrmuSLJlQnZZmK2qQpWUMC6DOBIiu6zqkQWfMHcRRUEV2nm4A5xjXuU0BfEchCI5UhDqrkVXj8HkbblkdWoQah\/CsxymGME6CaIIGl5wtyUhPt9qwfBKrDjbDShgmgY4rwpb1SY53qNkSyiJXk8bAGh5c29aLlk6HpUBNZQxPYOHkZzzzzYwZY7vfpUiZFHS1iB2dnMwddylr+AAW8iORg\/LjDDA9gFhw0lnaBren+ianO09kbREj6waqBZMAfMVaayUhjJ1oJBuCRSVVCwwQlw13Mad0wqSlRcqlBSBgXYNQ\/UdECF4Q3VYQNzxZY4gqtdcNcc3UUGy8FVCpRIOuAj3M9BTgZLmZkeOnIuppS9hWvdf\/rjEXwo8zv58GNs6y6Q+OathobJ\/nEqxBLxHloJk5YmA98vbQFbOIyuzyGAVEjWswRIAtbxr0pgaoglyycrhnyK88lQq1SlrBUHYrhBXehBIllYW0jsVmGUWirRVEBuSyW3tkR0gNCsc7SS9045U6YBUNTFjQWEtCpIl4ljdLOQ2a6a8EVlfbbDevlwxq2Xh+ffBoNeDFRH8d7BXt450Ikd\/VdHEvsrlCFkt4i+Rq2SJnWw+zciipNA89ZK9rs0C6xQiq+mmzUExG20QGjVIFshPDchCoWJmWRFazVJGKGWhkWS9KxyhDCZZduj0kNQE7JCRpYbJcvtPeSnsDWyW5LzDMx\/I03Q+H9uWu9ujM6LYlaW\/xeOlYbJgJRGSbKaFqGSVD1k2nM2PMrJaLCFYEotss4dJVgNPdW8vyGJrqEtWxiWryjLLChZMd\/Y8NXTJgsI7QrkC7wDvqWmoWc2ifoOvoDAq8pjCyWI\/u4fQEromQtMlq7Igq8KyzWoywXrKb7IaAgnn9hxs1f0PE8eZzO5cuphPilIFXukbw1hJY1FST7nikyCudWrhKOowzqJQpLRY9TXnuIynZQpE7JbwXaJ1htr4+5wD9\/RpVXB\/fYRrPUw5h3+K0OY2rp6kCd9rXdZPGhd8pcNkIAu9icJBmpTgHywgRbwFRStdXG\/QoRFxPEmoVkBScGAKlBKzqHxgsyACwN+GiEdiQaglSb67kWRJ5M3vv\/5n78EhJzjk0R830x6YdLPfB9E6u3s7MaRV0oGrgyzax629vWqp1s5WWuBaK0q2vV2AdTF1vAWLdDtbBX\/oYC9BS9nDWrdC0l2hVu2ypGa93NjNMgNfzbaZg5lutrt1cbudzeBVjuT2j2rZEqm0Gw08438sNPH4rZJqNzGGUQ+BCqXcrnXQv624u0iozp3jKrpkwEWi3Shmd2HsmfJWYw\/X4G3huJnZP85num10gAud01oX1WG\/U8uK2iZ+Fh7sduwpnnQwDOTOePP1dj4ej+f3t7PJiLCjDivxM00n02nMVCaTabzWNP8P9CnmYdh4DWyk3VtqnjmdLVgOC8xDTOe9QCTttgQX0BT8SSehPfQiky1WAj6oVxXd3XTSXUOZEdcKLfcXdvj7C+oGnGreN9WiUmGeFtFaLdcrxTgVhpnEXljZluZ1sWHCB5g4ce4nSBW6C5hOlkfOmwkoJTsjT9iBrU1a+n8Air++dAxtkaui1P\/t4f\/SrNN\/LwzcyZGlYJRD2JkHjlVIEavk\/\/bwbxvQPxl\/ac+Gg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4OD4x+D\/wJ\/mcWQy4hJUwAAAABJRU5ErkJggg=='>\n<p>In this kernel, I am going to make a Naive bayes Classifier to classify which of the following  headlines is an onion article and which is not, and I will go through each text processing step to help me get the highest result.<\/p> ","ade81b3b":"<h1>Train The Model<\/h1>","db4a30b8":"<h3> Kernel Steps<\/h3>\n<ul>\n    <li>Load the Dataset, split it to train and test datasets<\/li>\n    <li>Tokenizing Text<\/li>\n    <li>Converting Text data to lowercase<\/li>\n    <li>Removing Punctuation<\/li>\n    <li>Removing Numbers<\/li>\n    <li>Removing Stopwords<\/li>\n    <li>Remove Spaces<\/li>\n    <li>Lemmatizing<\/li>\n    <li>Exploring Text Data<\/li>\n    <li>Converting Text to Features by TF-IDF<\/li>\n    <li>Define Naive Bayes Classifier<\/li>\n    <li>Train the Model<\/li>\n    <li> Calculate the Accuracy<\/li>\n<\/ul>","49513b65":"<h1>Converting Text to Features by TF-IDF<\/h1>\n<p>it is a method used in converting text to features<\/p>","c84ffa99":"<h1>Tokenizing Text<\/h1>\n<p>Tokenization refers to splitting text into minimal meaningful units, there is a sentence Tokenier and Word Tokenizer. we will see word Tokenizer.<\/p>","66b2df7b":"<h1>Converting Text data to lowercase<\/h1>\n<p>lowercasing will help us to have all the data in a uniform format to make sure 'NLP'and 'nlp' are treated the as the same. ","7565f251":"<h1>Accuracy<\/h1>","f576ee5d":"<h1>Define Naive Bayes Classifier<\/h1> ","ff82eb46":"<h1>Removing Stopwords<\/h1>\n<p>Stopwords are very common words that carry no meaning or less meaning compared to other keywords, and this reduce the dataset shape.<br>\n    example:<br>\n    'how','to'<\/p>","b06d9046":"<h1>Removing Numbers<\/h1>\n<p>removing Numbers will help reduce the size of the data and increase computational efficiency too.<\/p>","64945a4c":"<h1>Removing Punctuations<\/h1>\n<p>this step is very important as punctuation doesn't add any extra informations or value. hence removal of all such instances will help reduce the size of the data and increase computational efficiency and if 'nlp,' and 'nlp' the model will treat them differently because of ','.","3fb21b75":"<h1>Remove Spaces<\/h1>","a7649f90":"<h1>Exploring Text Data<\/h1>\n<p>Generate Frequency of the words in the first 20 rows<\/p>","2120e85c":"<h1>Lemmatization<\/h1>\n<p>Lemmatization is a process of extracting root word by considering the vocab. <br>\n    for example:<br>\n    'good','better','best' is lemmatized to 'good'.<\/p>"}}