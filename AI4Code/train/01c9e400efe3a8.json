{"cell_type":{"3ff9122b":"code","bd04f20b":"code","932497ad":"code","36c093a7":"code","ec1c226f":"code","bd4da8f0":"code","c4e12e55":"code","b7ed2b85":"code","d267c367":"code","5e5d3f73":"code","a98d51ff":"code","834ece3c":"code","6f737925":"code","4176ac99":"code","06aadba7":"code","38d2de6c":"code","85a64655":"code","d4259f43":"code","f94b2dfa":"code","f5850c94":"code","546cbf3d":"code","64107f6a":"code","7318b11c":"code","e4c46a82":"code","afb7abbc":"code","09502a23":"code","6b8fe5d4":"code","4ab44d69":"code","d509e717":"code","c09bb98c":"code","a0b07a0f":"code","55947923":"code","d9915158":"code","3ef70dc1":"code","3d598686":"code","50bfa2ac":"code","c1a81f42":"code","a5a82799":"code","a38d3e32":"code","334d5525":"code","f4f356bc":"code","876f72b4":"code","475ef9ed":"code","6507046f":"code","0ac79e6a":"code","35d2dd1f":"code","a53dbfc1":"code","4e8eff1c":"code","4749ef18":"code","0e207209":"code","e476e555":"code","675b1aa5":"code","eef9baeb":"code","9a5fb33d":"code","d89d9caa":"code","dbb08625":"code","e579cabe":"code","4f343aac":"code","648c1ca6":"code","16729fe3":"code","65628dcb":"code","eac9d10f":"code","bf763ae9":"code","1bd5c37e":"code","5f83f334":"markdown","020d47a1":"markdown"},"source":{"3ff9122b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sbn\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bd04f20b":"mail =pd.read_csv('..\/input\/email-classification-nlp\/SMS_train.csv', encoding='unicode_escape')","932497ad":"mail","36c093a7":"mail = mail.iloc[:,1:]","ec1c226f":"mail","bd4da8f0":"mail['Label'].value_counts().plot.pie(autopct='%1.1f%%', labels=None, legend=True)\nplt.tight_layout()","c4e12e55":"mail.isnull().sum()","b7ed2b85":"mail.shape","d267c367":"mail.count()","5e5d3f73":"mail.describe()","a98d51ff":"mail.value_counts().head(60)","834ece3c":"for i in mail[\"Label\"]:\n    sbn.scatterplot(data = i)","6f737925":"import re","4176ac99":"from nltk.stem.porter import PorterStemmer\nps = PorterStemmer()","06aadba7":"import nltk \nnltk.download(\"stopwords\")\nfrom nltk.corpus import stopwords","38d2de6c":"mail.shape","85a64655":"email = re.sub('[^a-zA-Z]',' ', mail[\"Message_body\"][0])","d4259f43":"email","f94b2dfa":"email = re.sub('[^a-zA-Z]',' ', mail[\"Message_body\"][1])","f5850c94":"email","546cbf3d":"email = email.lower()","64107f6a":"email","7318b11c":"email = email.split()","e4c46a82":"email","afb7abbc":"email = [ps.stem(word) for word in email if not word in set(stopwords.words(\"english\"))]","09502a23":"email","6b8fe5d4":"email = \" \".join(email)","4ab44d69":"email","d509e717":"myList = []\nfor i in range(957):\n    email = re.sub('[^a-zA-Z]',' ', mail[\"Message_body\"][i])\n    email = email.lower()\n    email = email.split()\n    email = [ps.stem(word) for word in email if not word in set(stopwords.words(\"english\"))]\n    email = ''.join(email)\n    myList.append(email)\n    \nprint(myList)   \n\n","c09bb98c":"myList","a0b07a0f":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features = 1500, analyzer='word', lowercase=False)","55947923":"X =cv.fit_transform(myList).toarray()","d9915158":"y = mail.iloc[:,1].values","3ef70dc1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","3d598686":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(X_train, y_train)","50bfa2ac":"y_pred1 = gnb.predict(X_test)","c1a81f42":"y_pred1","a5a82799":"accuracy_score1 = accuracy_score(y_test,y_pred1)","a38d3e32":"accuracy_score1","334d5525":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred1)","f4f356bc":"print(cm)","876f72b4":"from sklearn.linear_model import LogisticRegression\nlg = LogisticRegression(random_state = 0)\nlg.fit(X_train, y_train)\ny_pred2 = lg.predict(X_test)\ny_pred2","475ef9ed":"cm = confusion_matrix(y_test, y_pred2)","6507046f":"cm","0ac79e6a":"accuracy_score2 = accuracy_score(y_test,y_pred2)","35d2dd1f":"accuracy_score2","a53dbfc1":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3, metric = \"minkowski\")\nknn.fit(X_train, y_train)\ny_pred3 = knn.predict(X_test)\ny_pred3","4e8eff1c":"cm = confusion_matrix(y_test, y_pred3)\ncm","4749ef18":"accuracy_score3 = accuracy_score(y_test,y_pred3)","0e207209":"accuracy_score3","e476e555":"from sklearn.svm import SVC\nsvc = SVC(kernel = 'rbf')\nsvc.fit(X_train, y_train)\ny_pred4 = svc.predict(X_test)\ny_pred4","675b1aa5":"cm = confusion_matrix(y_test, y_pred4)\ncm","eef9baeb":"accuracy_score4 = accuracy_score(y_test,y_pred4)","9a5fb33d":"accuracy_score4","d89d9caa":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier(criterion = \"entropy\")\ndtc.fit(X_train, y_train)\ny_pred5 = dtc.predict(X_test)\ny_pred5","dbb08625":"cm = confusion_matrix(y_test, y_pred5)\ncm","e579cabe":"accuracy_score5 = accuracy_score(y_test,y_pred5)","4f343aac":"accuracy_score5","648c1ca6":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=10, criterion = \"entropy\", random_state=0)\nrfc.fit(X_train, y_train)\ny_pred6 = rfc.predict(X_test)\ny_pred6","16729fe3":"cm = confusion_matrix(y_test, y_pred6)\ncm","65628dcb":"accuracy_score6 = accuracy_score(y_test,y_pred6)","eac9d10f":"accuracy_score6","bf763ae9":"accuracy_scores = []\nmodels = [gnb, lg, knn, svc, dtc, rfc]\nfor model in models:\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test,y_pred)\n    accuracy_scores.append(accuracy)\n    \nprint(accuracy_scores)","1bd5c37e":"plt.bar(['GNB', 'LG', 'KNN', 'SVC', 'DTC', 'RFC'], accuracy_scores)\nplt.ylim(0.1,1.01)\nplt.title('Accuracy comparison for different models', fontsize=20, color='b')\nplt.xlabel('Models', fontsize=15, color='g')\nplt.ylabel('Accuracy Score', fontsize=15, color='m')\nplt.tight_layout()\nplt.show()","5f83f334":"![rrrr.gif](attachment:2c565844-4e62-4465-ae6c-f64da74cb244.gif)","020d47a1":"![natural+language+processing+in+healthcare+-+foresee+medical.gif](attachment:c1d32b19-057a-4a2e-a2f5-4c937967ea65.gif)"}}