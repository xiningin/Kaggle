{"cell_type":{"9efa55fd":"code","a166e4cf":"code","645ec13c":"code","c67f2ad3":"code","f5c56dce":"code","f9f4fa26":"code","582785a4":"code","52db9eaa":"code","e76d6184":"code","29f1b960":"code","b6e7cdd7":"code","ae0bbed6":"code","5f5c2fd3":"code","15529568":"code","be86db26":"code","33d4a93b":"code","4d921edc":"code","a2993773":"markdown","eb09a391":"markdown","d0e2cdbc":"markdown","ef583af8":"markdown","caf26c11":"markdown","a4167a99":"markdown","94137ab3":"markdown","a3eacdc6":"markdown","78b20276":"markdown"},"source":{"9efa55fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a166e4cf":"# Getting the data from directory to the Notebook.\n\nsalaries_by_region = pd.read_csv(\"..\/input\/salaries-by-region.csv\") \n\nsalaries_by_college_type = pd.read_csv(\"..\/input\/salaries-by-college-type.csv\")\n\ndegrees_pay_back = pd.read_csv(\"..\/input\/degrees-that-pay-back.csv\")","645ec13c":"# exploring the data types and Columns more\n\nprint(\"-------\")\nprint(\"Salaries by Region\")\nprint(\"-------\")\nprint(salaries_by_region.info())\n\nprint(\"-------\")\nprint(\"Salaries by College Type\")\nprint(\"-------\")\nprint(salaries_by_college_type.info())\n\nprint(\"-------\")\nprint(\"Degrees that pay Back\")\nprint(\"-------\")\nprint(degrees_pay_back.info())\n","c67f2ad3":"#first thing first we should define the problem by seeing te Data.\n\nsalaries_by_region.head(10)","f5c56dce":"def fix_my_salary(x):   #let's assume x is \"$70,400.00\"\n    \"\"\"this is docstring\"\"\"\n    x = str(x);   # making it string to work easily.\n    x = x[1:]     # this deletes the first char, which leaves us with x = \"70,400.00\"\n    x = x.replace(\",\",\".\") # this replaces the \" , \" with math friendly \" . \"  x = \"70.400.00\"\n    x = x[:-3]    # this would remove the unnecesarry cents and would make data simpler.  x = \"70.400\"\n    x = float(x)  # this converts our data type to float  x = 70.4  (thousand dollars.)\n    return x\n    ","f9f4fa26":"example = salaries_by_region['Starting Median Salary'][4]  #getting any example data\nprint(\" input : \" + example)\nexample = fix_my_salary(example)\nprint(\" output : \" + str(example))  # looks good.","582785a4":"x = 0;\nfor i in salaries_by_region['Starting Median Salary']:\n    salaries_by_region['Starting Median Salary'][x] = fix_my_salary(salaries_by_region['Starting Median Salary'][x])\n    x = x + 1;","52db9eaa":"salaries_by_region.head(8)","e76d6184":"salaries_by_region['Mid-Career 75th Percentile Salary'] = list(map(fix_my_salary, salaries_by_region['Mid-Career 75th Percentile Salary']))\nsalaries_by_region['Mid-Career Median Salary'] = list(map(fix_my_salary, salaries_by_region['Mid-Career Median Salary']))\nsalaries_by_region['Mid-Career 25th Percentile Salary'] = list(map(fix_my_salary, salaries_by_region['Mid-Career 25th Percentile Salary']))","29f1b960":"salaries_by_region.head(8)","b6e7cdd7":"def high_low_salary(salary):\n    \"\"\"this function creates 2 lists from one big list.\n    first array is higher values\n    second array is lower values\n    \"\"\"\n    high = list(salary > np.median(salary));   # getting the all values that are higher than median as True\n    low =  list(salary < np.median(salary));   # getting the all values that are lower than median as True\n    \n    high = np.array(salary[high])  # creating an array of only high scores\n    low = np.array(salary[low])    # creating an array of only low scores\n    \n    \n    return high,low;\n","ae0bbed6":"\nhigh,low = high_low_salary(salaries_by_region['Starting Median Salary'])   # can be used for any type of plot that shows diference between low and high\nprint(high)\nprint(\"---\")     # testing my function\nprint(low)\n\nimport matplotlib.pyplot as plt\n\nplt.clf()\nplt.figure(figsize=(10,10))\nplt.plot(high[:100], c='r')\nplt.plot(low[:100], c='b')\nplt.ylabel(\"Salary\")\nplt.show()                       # there is clearly no sense of doing this plot for the topic, but as mentioned on the top reason is increasing my python skills.","5f5c2fd3":"plus_10_percent = lambda x: x + x*0.1;\n\nincreased_salary = list(map(plus_10_percent,salaries_by_region['Starting Median Salary']))\n#To see the difference I will zip original and new salaries on one array\n\n\nzipped = zip((salaries_by_region['Starting Median Salary']),increased_salary)\n\nzipped = list(zipped)\n\nprint(zipped[7])\nprint(zipped[17])\n#Example of Default value on a function\n","15529568":"degrees_pay_back.head(10)","be86db26":"def good_inreaser(increase=25):\n    \"\"\"this function prints the jobs those get good increases depended on given increase value.\n    the increase value setted to 25 as default\n    \"\"\"\n    x = list(degrees_pay_back['Percent change from Starting to Mid-Career Salary'] > increase)\n    print(list(degrees_pay_back['Undergraduate Major'][x]))\n    ","33d4a93b":"good_inreaser();   # default example increase = 25%","4d921edc":"good_inreaser(increase=90)  # example with given value  increase = 90%","a2993773":"Let's apply this to whole Column on our dataset. by doing an iteration","eb09a391":"for the following Column I will use \"Anonymous\" function to fix values,\n\nmap( ) will do the work without me coding a for loop","d0e2cdbc":"As you can clearly see above, the creator of this dataset hasn't store the numerical values in a numerical type, such as integer or float.\n\nWhich would make Data Scientist's life easier. But since, I want to develop my Python skills, I will solve my problems as good as I can.","ef583af8":"I will create a simple lambda function to increase salaries by 10%\n","caf26c11":"Next is example for the usage of function with multiple return (tuble)","a4167a99":"Let's check my function (fix_my_salary)","94137ab3":"As seen above, we have Salary Values in a form of  [ \" $ \" + int + \" , \" + float ]. \n\nLets create a function that would change these object values on any Column to some numerical values.","a3eacdc6":"# Hello!  this is a kernel that I try to improve my python skills and get used to create useful functions for datasets.","78b20276":"Default valued Function Example on another data"}}