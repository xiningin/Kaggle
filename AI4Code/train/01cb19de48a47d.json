{"cell_type":{"0243b33a":"code","94e1cbe7":"code","267edc5a":"code","29a0726f":"code","3af5d947":"code","feb1f0a1":"code","ed6ef14d":"code","3d66d6bb":"code","81425487":"code","8581bec1":"code","e90c22f4":"code","be0e6745":"code","08a7ca6c":"code","38a05080":"markdown","622b091d":"markdown","35969ff6":"markdown","d3db4d19":"markdown","4d1b000c":"markdown","20d0a3eb":"markdown","dffdade1":"markdown","bafbd9d6":"markdown","cdb0733a":"markdown"},"source":{"0243b33a":"import pandas as pd, numpy as np, librosa as lb\nfrom pathlib import Path\nfrom IPython.display import Audio\nimport warnings\nwarnings.filterwarnings(\"ignore\") # Filter annoying librosa warnings","94e1cbe7":"DATA_ROOT = Path(\"..\/input\/birdsong-recognition\")","267edc5a":"class BirdDataset:\n    \"\"\"Fastly load and sample the audio file in order to get same wave size for batch items.\n    \n    Parameters:\n    ----------\n    sr: int\n        The sample rate, defaults to librosa's 22050 Hz.\n        \n    nseconds: int\n        Targetted duration in seconds. The wave will right-padded if it lasts less than `nseconds`.\n        This is useful when batching.\n    \"\"\"\n    def __init__(self, sr = 22050, nseconds=5):\n        self.sr = sr\n        self.nseconds = nseconds\n        self.df = pd.read_csv(DATA_ROOT\/\"train.csv\")\n        self.df.sort_values([\"ebird_code\", \"filename\"], inplace=True)\n        self.df.reset_index(drop=True, inplace=True)\n        \n    \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, i):\n        \"\"\"Load the ith wave file.\"\"\"\n        x = self.load(self.ith_file(i))\n        \n        return  self.sample(x),BIRDS_MAP[self.df.loc[i, \"ebird_code\"]]\n    \n    \n    def ith_file(self, i):\n        row = self.df.loc[i]\n        filename = \"{}\/{}\".format(row[\"ebird_code\"], row[\"filename\"])\n        return filename\n    \n    def load(self, filename, res_type = 'kaiser_best'):\n        \"\"\"Load the wave file by name.\"\"\"\n        filename = DATA_ROOT\/\"train_audio\"\/filename\n        y, _ = lb.load(filename.as_posix(), sr = self.sr, res_type=res_type)\n        return y\n    \n    def display(self, audio):\n        return Audio(self.load(audio) if isinstance(audio, str) else audio, rate=self.sr)\n    \n    \n    def sample(self, x):\n        \"\"\"Sample the wave file in order to make it last exactly `self.nseconds`.\n        The wave will be right-padded if it's shorter.\n        \"\"\"\n        max_frames = self.nseconds*self.sr\n        nframes = len(x)\n        if max_frames < nframes:\n            offset = np.random.choice(nframes - max_frames)\n            x = x[offset:offset + max_frames]\n        elif max_frames>nframes:\n            x = np.concatenate([np.concatenate([x]*(max_frames\/\/nframes)), x[-max_frames%nframes:]])\n        return x\n    \n    \n    def sample_on_load(self,filename, duration, res_type = 'kaiser_best'):\n        \"\"\"Fastly and directly sample the wave file on load time in order to make it last \n        exactly `self.nseconds`. The wave will be right-padded if it's shorter.\n        \"\"\"\n        target_duration = self.nseconds\n        filename = DATA_ROOT\/\"train_audio\"\/filename\n        \n        if duration > target_duration:\n            offset = np.random.choice(duration - target_duration)\n            x, sr = lb.load(filename, offset=offset, duration=target_duration, res_type= res_type, sr= self.sr)\n        else:\n            x, sr = lb.load(filename, sr=self.sr)\n            nframes = len(x)\n            target_frames = self.nseconds*self.sr\n            x = np.concatenate([np.concatenate([x]*(target_frames\/\/nframes)), x[-target_frames%nframes:]])\n        return x","29a0726f":"bds = BirdDataset(nseconds=5) # Sample 5 seconds  lasting audio from wave files","3af5d947":"i = 105\nrow = bds.df.loc[i]\nbird_file = \"{}\/{}\".format(row.ebird_code, row.filename)\nduration = row.duration\nbird_file,duration","feb1f0a1":"%%time\n\nx = bds.sample(bds.load(bird_file))\nprint(x.shape)\nbds.display(x)","ed6ef14d":"%%time\n\nx = bds.sample_on_load(bird_file, duration)\nprint(x.shape)\nbds.display(x)","3d66d6bb":"i = 8390\nrow = bds.df.loc[i]\nbird_file = \"{}\/{}\".format(row.ebird_code, row.filename)\nduration = row.duration\nbird_file,duration","81425487":"%%time\n\nx = bds.sample(bds.load(bird_file))\nprint(x.shape)\nbds.display(x)","8581bec1":"%%time\n\nx = bds.sample_on_load(bird_file, duration)\nprint(x.shape)\nbds.display(x)","e90c22f4":"i = 1341\nrow = bds.df.loc[i]\nbird_file = \"{}\/{}\".format(row.ebird_code, row.filename)\nduration = row.duration\nbird_file,duration","be0e6745":"%%time\n\nx = bds.sample(bds.load(bird_file))\nprint(x.shape)\nbds.display(x)","08a7ca6c":"%%time\n\nx = bds.sample_on_load(bird_file, duration)\nprint(x.shape)\nbds.display(x)","38a05080":"<h2 style=\"background-color:gray; color:white\"> A half-minute long wave file <\/h2>","622b091d":"# The dataset","35969ff6":"<h2 style=\"background-color:gray; color:white\"> A 10 minutes long wave file <\/h2>","d3db4d19":"> Sampling on laod is **7** times faster for a  **60 s** long wave file. Indeed, longer the wave and higher the gain !","4d1b000c":"<h2 style=\"text-align:center\">kkiller<\/h2>","20d0a3eb":"<h2 style=\"background-color:gray; color:white\"> A one-minute long wave file <\/h2>","dffdade1":"# Benchmark","bafbd9d6":"> Sampling on laod is **4** times faster for a  **30 s** long wave file.","cdb0733a":"> Sampling on laod is about **25** times faster for a  **10  minutes** long wave file. As there are some waves longer than 30 minutes, sampling on load is a really good hack."}}