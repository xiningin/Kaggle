{"cell_type":{"d7f6642a":"code","cbecb9bf":"code","99bb646e":"code","a6a2a940":"code","1fdd50a5":"code","a24eed65":"code","b2fb9ec1":"code","9cc6e3c3":"code","9366b161":"code","ea966119":"code","c85a5103":"code","5e4a9bf5":"code","013dc5b6":"code","cd8d6d6b":"code","a39b7b18":"code","56284425":"code","7b14ab0a":"code","6394440c":"code","89ea47cd":"code","e44ad9fe":"code","705de925":"code","72c841c1":"code","97903fd3":"code","2833eb46":"code","5a0a10b8":"code","9696488a":"code","c352a542":"code","4af8bb16":"code","f6788fff":"markdown","7ae713a0":"markdown","7a1cb5bc":"markdown","22631cd6":"markdown","fd6998e7":"markdown","ba387d9f":"markdown","bfed9880":"markdown","a33e3b27":"markdown","11eb0691":"markdown","a120ec73":"markdown","295ab833":"markdown","42f675ff":"markdown","80dab2cc":"markdown","827a6ecd":"markdown","dbf750d0":"markdown","a92db22c":"markdown","795b848e":"markdown","b9a4df7f":"markdown","d746872d":"markdown","e42c1d0b":"markdown","e2db297b":"markdown"},"source":{"d7f6642a":"# Work with Data - the main Python libraries\nimport numpy as np\nimport pandas as pd\n\n# For import data from API\nimport requests\n\n# Visualization\nimport matplotlib.pyplot as plt\n\n# Modeling and Prediction\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_absolute_error, r2_score\n\nimport warnings\nwarnings.simplefilter('ignore')","cbecb9bf":"prediction_period = 7  # Period for prediction, days","99bb646e":"# Download data via API from the Portal of RNBO of Ukraine: https:\/\/api-covid19.rnbo.gov.ua\/\n# https:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine\ncode_region = 4914  # \"Zhytomyrsk\u0430 oblast\"\nprint(f'Download daily data from the Portal of RNBO of Ukraine')\nmyfile = requests.get(f'https:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine&country={code_region}')\nopen('data', 'wb').write(myfile.content)\ndf_data = pd.read_json('data')\ndf_data","a6a2a940":"# Display the last 10 rows of the dataframe \"df_data\"\ndf_data.tail(10)","1fdd50a5":"# Calculation daily data for number of confirmed cases\ndf_data['n_confirmed'] = df_data['confirmed'].diff()\n#df_data['n_confirmed'] = df_data['confirmed']","a24eed65":"# Filtering the missing data\ndata = df_data[['dates','n_confirmed']].dropna().reset_index(drop=True)\ndata['n_confirmed'] = data['n_confirmed'].astype('int')\ndata.tail(4)","b2fb9ec1":"# Delete the last zero value\ndata = data[:-1]\ndata.tail(3)","9cc6e3c3":"# Build the plot\ndata['n_confirmed'].plot()","9366b161":"# Prepairing data for modeling with Prophet\ndata.columns = ['ds', 'y']\ndata.tail()","ea966119":"# Removing zero values\ndata = data[data['y'] > 0].reset_index(drop=True)\ndata","c85a5103":"# Devide dataset to training and validation datasets\nvalid = data[(len(data)-prediction_period):].reset_index(drop=True)\ndata = data[:(len(data)-prediction_period)]\nvalid","5e4a9bf5":"data.tail(prediction_period)","013dc5b6":"# The smallest increase in value\ndata.loc[303:305]","cd8d6d6b":"# Selection data with the biggest wave\ndf2 = data[304:].reset_index(drop=True)\ndf2","a39b7b18":"df2.plot()","56284425":"# Build Prophet model\nmodel = Prophet()\n\n# Training model for all data\nmodel.fit(data)","7b14ab0a":"# Build Prophet model with parameters ans structure \n# from the notebook https:\/\/www.kaggle.com\/vbmokin\/covid-19-in-ukraine-eda-forecasting \n# but without holidays\nmodel2 = Prophet(daily_seasonality=False, weekly_seasonality=False, yearly_seasonality=False, \n                changepoint_range=1, changepoint_prior_scale = 0.7)\nmodel2.add_seasonality(name='weekly', period=7, fourier_order=16, \n                      mode = 'multiplicative', prior_scale = 0.30)\nmodel2.add_seasonality(name='triply', period=3, fourier_order=2, \n                      mode = 'multiplicative', prior_scale = 0.15)\n\n# Training model for df2\nmodel2.fit(df2)","6394440c":"def prediction_accuracy(valid, model):\n    # Calculation prediction accuracy for valid dataset by model\n    \n    future = model.make_future_dataframe(periods = prediction_period)   # Valid data prediction\n    forecast = model.predict(future)\n    forecast = forecast[(len(forecast)-prediction_period):]\n    forecast[forecast['yhat'] < 0]['yhat'] = 0\n    y_val = forecast['yhat'].round()  # Prediction    \n    y_target = valid['y']             # Real data\n    \n    return round(mean_absolute_error(y_val, y_target)*100\/valid['y'].sum(), 2)    ","89ea47cd":"# Make a forecast for prediction_period days ahead\nfuture = model.make_future_dataframe(periods = prediction_period)\nforecast = model.predict(future)\n\n# Make values integer, and replace negative values with zero\nfeature_all = ['yhat_lower', 'yhat', 'yhat_upper']\nforecast[feature_all] = forecast[feature_all].astype('int')\nfor feature in feature_all:\n    forecast.loc[forecast[feature] < 0, feature] = 0","e44ad9fe":"# Draw plot of the values with forecasting data\nfigure = model.plot(forecast, xlabel = 'Date', ylabel = 'Number of confirmed cases')","705de925":"# Draw plot with the components (trend and weekly seasonality) of the forecasts\nfigure_component = model.plot_components(forecast)","72c841c1":"# Ouput the prediction for the next prediction_period days\nforecast[['ds', 'yhat_lower', 'yhat', 'yhat_upper']].tail(prediction_period)","97903fd3":"print(f\"Relative error (WAPE) for model = {prediction_accuracy(valid, model)}%\")","2833eb46":"# Make a forecast for prediction_period days ahead\nfuture2 = model2.make_future_dataframe(periods = prediction_period)\nforecast2 = model2.predict(future2)\n\n# Make values integer, and replace negative values with zero\nforecast2[feature_all] = forecast2[feature_all].astype('int')\nfor feature in feature_all:\n    forecast2.loc[forecast2[feature] < 0, feature] = 0","5a0a10b8":"# Draw plot of the values with forecasting data\nfigure2 = model2.plot(forecast2, xlabel = 'Date', ylabel = 'Number of confirmed cases')","9696488a":"# Draw plot with the components (trend and weekly seasonality) of the forecasts\nfigure_component2 = model2.plot_components(forecast2)","c352a542":"# Ouput the prediction for the next prediction_period days\nforecast2[['ds', 'yhat_lower', 'yhat', 'yhat_upper']].tail(prediction_period)","4af8bb16":"print(f\"Relative error (WAPE) for model = {prediction_accuracy(valid, model2)}%\")","f6788fff":"### Selection data with the biggest wave","7ae713a0":"**TASK:** Make similar calculations for the dataframe df2:\n1. Make a forecast for it for prediction_period=7 days ahead.\n2. Draw a plot of the values with forecasting data.\n3. Draw plot with the components (trend and weekly seasonality) of the forecasts.\n4. Ouput the prediction for the next prediction_period=7 days.","7a1cb5bc":"## 3. EDA & FE<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","22631cd6":"## 2. Download data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","fd6998e7":"## 5. Prediction & Visualization<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","ba387d9f":"**ADDITIONAL TASK:** Try changing the parameters of the Prophet model and evaluate how this will affect the shape of the curve and the accuracy of the simulation","bfed9880":"The adequacy of a simple model is very poor!","a33e3b27":"### For the biggest wave - df2","11eb0691":"## Acknowledgements\n\n### Datasets:\n- official data of Ukraine (https:\/\/covid19.rnbo.gov.ua\/) - via API\n- @vbmokin dataset [COVID-19 in Ukraine: daily data](https:\/\/www.kaggle.com\/vbmokin\/covid19-in-ukraine-daily-data) - for the next commits\n\n","a120ec73":"## 4. Modeling<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","295ab833":"The adequacy of a more complex model is much better.","42f675ff":"<a class=\"anchor\" id=\"0\"><\/a>\n# COVID-19 in one region of Ukraine","80dab2cc":"### For all data","827a6ecd":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","dbf750d0":"### For all data","a92db22c":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download data](#2)\n1. [EDA & FE](#3)\n1. [Modeling](#4)\n1. [Prediction & Visualization](#5)","795b848e":"### All list of API parameters\nhttps:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine\n\n### Example for region \"Zhytomyrsk\u0430 oblast\"\ncode_region = 4914","b9a4df7f":"**ADDITIONAL TASK:** Try to specify another number (instead of 304) as a reference point or other.\n\nLook all data with plot here: https:\/\/covid19.rnbo.gov.ua\/","d746872d":"Thanks Vitalii Mokin Kaggle GM, Prof. @vbmokin\n## Dataset [COVID-19 in Ukraine: daily data](https:\/\/www.kaggle.com\/vbmokin\/covid19-in-ukraine-daily-data)","e42c1d0b":"### For the biggest wave - df2","e2db297b":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)"}}