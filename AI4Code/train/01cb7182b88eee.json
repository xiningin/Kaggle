{"cell_type":{"1cb343c9":"code","baa83770":"code","a25aba2f":"code","fd24b94b":"code","5be06a65":"code","93543f6c":"code","2b38378e":"code","4151dcb0":"code","820309c7":"code","082a72bb":"code","3de3664a":"code","365acce6":"code","6fd55d3b":"code","657d5995":"code","3ff25747":"code","97d05137":"code","1bd2a8a1":"code","c3d77d1d":"code","8a5190f0":"code","1fbeaf13":"code","7865eaf7":"code","0c4632d6":"code","bb2cadfe":"code","f59e4cec":"code","fb375c4f":"code","40f33d4e":"code","6f907391":"code","6b6d07c5":"code","3d2636e8":"markdown","f1bf2248":"markdown","9bbea1e8":"markdown","6a85bd77":"markdown","f1c3785c":"markdown","fb5ac2f5":"markdown","044f45c1":"markdown","d4c5d019":"markdown","d41a291c":"markdown","90eb4616":"markdown","a042f3a0":"markdown","e22ca364":"markdown","ea9fbb58":"markdown"},"source":{"1cb343c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","baa83770":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n ","a25aba2f":"\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid',color_codes=True)\n\n#model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\n\n#preprocess.\nfrom keras.preprocessing.image import ImageDataGenerator\n\n#dl libraraies\nfrom keras import backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\nfrom keras.utils import to_categorical\n\n# specifically for cnn\nfrom keras.layers import Dropout, Flatten,Activation\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization\n \nimport tensorflow as tf\nimport random as rn\n\n# specifically for manipulating zipped images and getting numpy arrays of pixel values of images.\nimport cv2                  \nimport numpy as np  \nfrom tqdm import tqdm\nimport os                   \nfrom random import shuffle  \nfrom zipfile import ZipFile\nfrom PIL import Image\n","fd24b94b":"X=[]\nZ=[]\nIMG_SIZE=150\nFOOD_BIRIYANI_DIR='..\/input\/recipes\/briyani'\nFOOD_BURGER_DIR='..\/input\/recipes\/burger'\nFOOD_DOSA_DIR='..\/input\/recipes\/dosa\/'\nFOOD_IDLY_DIR='..\/input\/recipes\/idly'\nFOOD_PIZZA_DIR='..\/input\/recipes\/pizza\/'","5be06a65":"def assign_label(img,food_type):\n    return food_type","93543f6c":"def make_train_data(food_type,DIR):\n    for img in tqdm(os.listdir(DIR)):\n        label=assign_label(img,food_type)\n        path = os.path.join(DIR,img)\n        img = cv2.imread(path,cv2.IMREAD_COLOR)\n        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n        \n        X.append(np.array(img))\n        Z.append(str(label))\n   ","2b38378e":"make_train_data('Biriyani',FOOD_BIRIYANI_DIR)\nprint(len(X))","4151dcb0":"make_train_data('Burger',FOOD_BURGER_DIR)\nprint(len(X))","820309c7":"make_train_data('Dosa',FOOD_DOSA_DIR)\nprint(len(X))","082a72bb":"make_train_data('Idly',FOOD_IDLY_DIR)\nprint(len(X))","3de3664a":"make_train_data('Pizza',FOOD_PIZZA_DIR)\nprint(len(X))","365acce6":"fig,ax=plt.subplots(5,2)\nfig.set_size_inches(15,15)\nfor i in range(5):\n    for j in range (2):\n        l=rn.randint(0,len(Z))\n        ax[i,j].imshow(X[l])\n        ax[i,j].set_title('FOOD: '+Z[l])\n        \nplt.tight_layout()","6fd55d3b":"le=LabelEncoder()\nY=le.fit_transform(Z)\nY=to_categorical(Y,5)\nX=np.array(X)\nX=X\/255","657d5995":"x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=42)","3ff25747":"np.random.seed(42)\nrn.seed(42)\n","97d05137":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu', input_shape = (150,150,3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Conv2D(filters =96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\n \nmodel.add(Conv2D(filters = 96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(512))\nmodel.add(Activation('relu'))\nmodel.add(Dense(5, activation = \"softmax\"))\n\n    \n","1bd2a8a1":"batch_size=128\nepochs=50\n\nfrom keras.callbacks import ReduceLROnPlateau\nred_lr= ReduceLROnPlateau(monitor='val_acc',patience=3,verbose=1,factor=0.1)","c3d77d1d":" datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n","8a5190f0":"datagen.fit(x_train)","1fbeaf13":"model.compile(optimizer=Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])","7865eaf7":"model.summary()","0c4632d6":"istory = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (x_test,y_test),\n                              verbose = 1, steps_per_epoch=x_train.shape[0] \/\/ batch_size)","bb2cadfe":"model.save('my_model.h5')","f59e4cec":"plt.plot(istory.history['loss'])\nplt.plot(istory.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()\n ","fb375c4f":"plt.plot(istory.history['accuracy'])\nplt.plot(istory.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","40f33d4e":"pred=model.predict(x_test)\npred_digits=np.argmax(pred,axis=1)","6f907391":"i=0\nprop_class=[]\nmis_class=[]\n\nfor i in range(len(y_test)):\n    if(np.argmax(y_test[i])==pred_digits[i]):\n        prop_class.append(i)\n    if(len(prop_class)==8):\n        break\n\ni=0\nfor i in range(len(y_test)):\n    if(not np.argmax(y_test[i])==pred_digits[i]):\n        mis_class.append(i)\n    if(len(mis_class)==8):\n        break","6b6d07c5":"import matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\ncount=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(15,15)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].set_title(\"Predicted Food :\"+str(le.inverse_transform([pred_digits[prop_class[count]]]))\n                          +\"\\n\"+\"Actual Food : \"+str(le.inverse_transform([np.argmax(y_test[prop_class[count]])])))","3d2636e8":"Fitting on the Training set and making predcitons on the Validation set","f1bf2248":"Label Encoding the Y array","9bbea1e8":"Using a LR Annealer\u00b6","6a85bd77":"Evaluating the Model Performance","f1c3785c":"CORRECTLY CLASSIFIED FLOWER IMAGES\u00b6","fb5ac2f5":"Data Augmentation to prevent Overfitting\u00b6","044f45c1":"Visualizing some Random Images","d4c5d019":"Building the Cnn Model","d41a291c":"Splitting into Training and Validation Sets\u00b6","90eb4616":"Visualizing Predictons on the Validation Set","a042f3a0":" Importing Various Modules.\u00b6","e22ca364":" Setting the Random Seeds","ea9fbb58":"Compiling the Keras Model & Summary\u00b6"}}