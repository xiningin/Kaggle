{"cell_type":{"dbb1dbb5":"code","6089497b":"code","6ad490af":"code","154631ee":"code","e8c5317b":"code","7fe36c9a":"code","4228dc52":"code","b9646174":"code","3960875f":"code","edde3856":"code","7e0e9af6":"code","4b5a5216":"code","b9ec1697":"code","1ff25867":"code","1ad6bcfd":"code","395e368e":"code","24bfca69":"code","7f474e13":"code","985b5269":"code","f57c14b6":"code","5df28e9e":"code","d8bea4ce":"code","a946fd24":"code","ef8e9d81":"code","8fb85baa":"code","9bfaea39":"code","478b7fa4":"code","a36a6783":"code","b38e1d10":"code","f7ea55b6":"code","612a9e58":"code","d095f287":"code","d5d773bf":"code","4ebe5cb5":"code","3f7f2658":"code","0cf54947":"code","14712acc":"code","fcc9f71a":"code","55525826":"code","0ae0a3e1":"code","092e8ce6":"code","af1647d2":"code","3fc922a9":"code","990bfd84":"code","44935b0e":"code","034ea00a":"code","5cb468a2":"code","8ac30ae3":"code","eedea742":"code","c59f4060":"code","79263fd8":"code","3cd79cf9":"code","62ebd76a":"code","d3c84583":"code","1a7153f6":"code","2fcad443":"code","d8c71bee":"code","729b6a63":"code","c7104c72":"code","cc34597f":"code","29b41799":"code","2e347dba":"code","119c4c0f":"code","b7a88eb0":"markdown","d3327463":"markdown","8458dfc8":"markdown","482f2522":"markdown","105d8aed":"markdown"},"source":{"dbb1dbb5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","6089497b":"df = pd.read_csv('..\/input\/titanic\/train.csv')","6ad490af":"df.head()","154631ee":"dt = pd.read_csv('..\/input\/titanic\/test.csv')\ndt.head()","e8c5317b":"df.info()","7fe36c9a":"df.isnull().sum()","4228dc52":"dt.info()","b9646174":"dt.isnull().sum()","3960875f":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","edde3856":"sns.heatmap(dt.isnull(),yticklabels=False,cbar=False,cmap='viridis')","7e0e9af6":"df.drop(columns=['PassengerId','Name','Cabin','Ticket'],inplace=True)\ndf.head()","4b5a5216":"dt.drop(columns=['PassengerId','Name','Cabin','Ticket'],inplace=True)\ndt.head()","b9ec1697":"df['Age'].fillna(df['Age'].mean(),inplace=True)","1ff25867":"dt['Age'].fillna(dt['Age'].mean(),inplace=True)","1ad6bcfd":"dt['Fare'].fillna(dt['Fare'].mean(),inplace=True)","395e368e":"mode = df['Embarked'].mode()\nmode","24bfca69":"df['Embarked'].fillna('S',inplace=True)","7f474e13":"df['Embarked']","985b5269":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","f57c14b6":"sns.heatmap(dt.isnull(),yticklabels=False,cbar=False,cmap='viridis')","5df28e9e":"df.dtypes","d8bea4ce":"dt.dtypes","a946fd24":"df[df.select_dtypes(['object']).columns] = df.select_dtypes(['object']).apply(lambda x: x.astype('category'))","ef8e9d81":"dt[dt.select_dtypes(['object']).columns] = dt.select_dtypes(['object']).apply(lambda x: x.astype('category'))","8fb85baa":"df.dtypes","9bfaea39":"dt.dtypes","478b7fa4":"df['Age'] = df['Age'].astype('int64')","a36a6783":"dt['Age'] = dt['Age'].astype('int64')","b38e1d10":"df.dtypes","f7ea55b6":"dt.dtypes","612a9e58":"df.describe()","d095f287":"sns.countplot(x='Sex',data=df)","d5d773bf":"sns.countplot(x='Sex',hue='Survived',data=df)","4ebe5cb5":"sns.countplot(x='Pclass',hue='Survived',data=df) ","3f7f2658":"sns.distplot(x=df['Age'])","0cf54947":"sns.distplot(x=df['Fare'])","14712acc":"sns.countplot(x='Survived',hue='SibSp',data=df)","fcc9f71a":"corr = df.corr()\ncorr","55525826":"plt.figure(figsize=(10,8))\nsns.heatmap(corr,annot=True,cmap='Blues_r',square=True)","0ae0a3e1":"df.head()","092e8ce6":"dt.head()","af1647d2":"df = pd.get_dummies(df, columns=['Sex','Embarked'],drop_first=True)","3fc922a9":"df","990bfd84":"dt = pd.get_dummies(dt, columns=['Sex','Embarked'],drop_first=True)","44935b0e":"X = df.drop(columns='Survived')\nX.head()","034ea00a":"y = df['Survived']\ny","5cb468a2":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=123)","8ac30ae3":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score","eedea742":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import classification_report\n","c59f4060":"scaler = StandardScaler().fit(X_train)\ntrain_sc = scaler.transform(X_train)\ntest_sc = scaler.transform(X_test)","79263fd8":"def fit_predict_scaled(model):\n    \"\"\"The following code makes faster to evaluate a model \n    automating the fit and accuracy process\"\"\"\n    global prediction\n    model.fit(train_sc, y_train)\n    prediction = model.predict(test_sc)\n    cv = cross_val_score(model,train_sc, y_train, cv=5, scoring='accuracy')\n    return accuracy_score(y_test, prediction),np.mean(cv)","3cd79cf9":"model4 = LogisticRegression()\nmodel5 = KNeighborsClassifier()\nmodel6 = SGDClassifier()\nmodels_scaled = [model4,model5,model6]","62ebd76a":"n = 0\nfor model in models_scaled:\n    n +=1\n    print(\"Model \", n,\":\", model)\n    print(\"Accuracy and mean cv score: \", fit_predict_scaled(model))\n    print(\"Confusion Matrix: \\n\", classification_report(prediction,y_test))\n    print(\"Confusion Matrix: \",model,\"\\n\")\n    plot_confusion_matrix(model, test_sc, y_test,cmap=plt.cm.Reds , values_format='d')\n    plt.show()\n","d3c84583":"def fit_predict(model):\n    \"\"\"The following code makes faster to evaluate a model \n    automating the fit and accuracy process\"\"\"\n    global predictions\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    cv = cross_val_score(model,X_train, y_train, cv=5, scoring='accuracy')\n    return accuracy_score(y_test, predictions),np.mean(cv)","1a7153f6":"model1 = DecisionTreeClassifier()\nmodel2 = RandomForestClassifier()\nmodel3 = GradientBoostingClassifier()\n\nmodels = [model1,model2,model3]","2fcad443":"i = 0\nfor model in models:\n    i +=1\n    print(\"Model \", i,\":\", model)\n    print(\"Accuracy and mean cv score: \", fit_predict(model))\n    print(\"Confusion Matrix: \\n\", classification_report(predictions,y_test))\n    print(\"Confusion Matrix for \",model,\"\\n\")\n    plot_confusion_matrix(model, test_sc, y_test,cmap=plt.cm.Oranges , values_format='d')\n    plt.show()","d8c71bee":"from sklearn.model_selection import GridSearchCV ","729b6a63":"def parameter(classifier, model):\n    print(model)\n    print('Best Score: ' + str(classifier.best_score_))\n    print('Best Parameters: ' + str(classifier.best_params_))","c7104c72":"knn = KNeighborsClassifier()\nparam_grid_knn = {\n    'n_neighbors' : [3,5,6,7,9],\n    'leaf_size': [25,30,35,40,45],\n    'weights' : ['uniform', 'distance'],\n    'algorithm' : ['auto', 'ball_tree','kd_tree'],\n    'p' : [1,2,3]\n}\nclf_knn = GridSearchCV(knn, param_grid = param_grid_knn, cv = 5, verbose = True, n_jobs = -1)\nbest_knn = clf_knn.fit(train_sc,y_train)\nparameter(best_knn,'K Nearest Neighbors')","cc34597f":"rf = RandomForestClassifier()\nparam_grid_rf =  {\n    'n_estimators': [400,450,500,550],\n    'criterion':['gini','entropy'],\n    'bootstrap': [True],\n    'max_depth': [15, 20, 25],\n    'max_features': ['auto','log2'],\n    'min_samples_leaf': [2,3],\n    'min_samples_split': [2,3]\n}\n\n                                  \nclf_rf = GridSearchCV(rf, param_grid = param_grid_rf, cv = 5, verbose = True, n_jobs = -1)\nbest_rf = clf_rf.fit(X_train,y_train)\nparameter(best_rf,'Random Forest Classifier')","29b41799":"gb = GradientBoostingClassifier()\nparam_grid_gb = {\n    'learning_rate':[0.001, 0.01, 0.1, 0.5],\n    'n_estimators':[400,500,600],\n    'max_depth':[10, 15 , 20, 25],\n    'max_features':['auto','log2'],\n    'subsample':[0.5, 0.7, 0.9]\n}\nclf_gb = GridSearchCV(gb, param_grid = param_grid_gb, cv = 5, verbose = True, n_jobs = -1)\nbest_gb = clf_gb.fit(X_train,y_train)\nparameter(best_gb,'Gradient Boosting Classifier')","2e347dba":"best_model = best_gb.best_estimator_\nfinal_predictions = best_model.predict(dt)","119c4c0f":"df_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ndf_submission['Survived']=final_predictions\ndf_submission.to_csv('submission.csv',index=False)","b7a88eb0":"\n# PREPROCESSING","d3327463":"# EDA AND CORRELATION","8458dfc8":"# Best 3 models are KNN,RandomForest and GBoost.\nWe tune their hyperparameters now.\nUse model.get_params() to get an idea of parameters and its values.\n","482f2522":"# Test different models choose 3 best then tune them.","105d8aed":"#  ML MODEL"}}