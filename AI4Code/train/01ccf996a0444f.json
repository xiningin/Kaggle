{"cell_type":{"2d95d644":"code","07a96b44":"code","a88d3841":"code","c2ab7b23":"code","f09a81d9":"code","bda6aa8e":"code","47940984":"code","f43166fc":"code","f4eec46a":"code","984e06a3":"code","cd660307":"code","10727f09":"code","6b309d25":"code","3762d2b7":"code","2bfc5500":"code","927f7c5a":"code","b45bc12d":"markdown","ba69a637":"markdown","66e4b80b":"markdown","02339a5b":"markdown","5cf4905c":"markdown","35bbcb70":"markdown"},"source":{"2d95d644":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.optimizers import Adam ,RMSprop\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","07a96b44":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest= pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntest.head()","a88d3841":"y_train = train['label']\nx_train = train.drop(\"label\",axis = 1)","c2ab7b23":"x_train = x_train \/ 255.0\ntest = test \/ 255.0","f09a81d9":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\nx_train = x_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","bda6aa8e":"y_train = to_categorical(y_train, num_classes = 10)","47940984":"#spliting data 90% training 10% testing\nx_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size = 0.1, random_state=2)","f43166fc":"g = plt.imshow(x_train[2][:,:,0],cmap=plt.cm.binary)","f4eec46a":"model = Sequential()\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(filters = 128, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\n","984e06a3":"# Compile the model\nmodel.compile(optimizer = 'adam' , \n              loss = \"categorical_crossentropy\", \n              metrics=[\"accuracy\"])","cd660307":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","10727f09":"model.fit(x_train, y_train, batch_size = 40, epochs = 10, \n          validation_data = (x_val, y_val), verbose = 1)","6b309d25":"val_loss, val_acc = model.evaluate(x_val, y_val)\nprint(\"Loss=\", val_loss)  # model's loss (error)\nprint(\"Accuracy\", val_acc)  # model's accuracy","3762d2b7":"pred = model.predict(test)\nprint(pred)","2bfc5500":"# predict results\nreslt = model.predict(test)\n\n# select the index with the maximum probability\nreslt = np.argmax(reslt,axis = 1)\n\nreslt = pd.Series(reslt,name=\"Label\")","927f7c5a":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),reslt],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist.csv\",index=False)","b45bc12d":"# Reshaping images","ba69a637":"# **Split training**","66e4b80b":"# Evaluate the out of sample data with model","02339a5b":"# Loading data","5cf4905c":"# **CNN model**","35bbcb70":"# **Label encoding**"}}