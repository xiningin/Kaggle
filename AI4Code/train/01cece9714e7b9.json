{"cell_type":{"ae6362f4":"code","7e742237":"code","cea2e60a":"code","129034a4":"code","ad2ec852":"code","71373feb":"code","167837df":"code","a37d099d":"code","deffd479":"code","95161d72":"code","6556dc61":"code","c5cdc1fe":"code","a967f8cd":"code","0175bcee":"code","059096b5":"code","95a31872":"code","91dee761":"code","5bc52199":"code","cbd1d553":"code","b80864f0":"code","2d0124f4":"code","0e7cde21":"code","1a290d63":"code","710b2bf0":"code","ab421ef0":"code","574e2869":"code","ee7085cd":"code","367b972d":"code","89649f6a":"code","6d7e24af":"code","64e44318":"code","7675921c":"code","418da8fb":"code","8be58827":"code","06748cfa":"code","5270d93c":"code","e8efd06d":"code","2e42b0b7":"code","94c6ee7a":"code","9a710501":"code","815a0117":"code","88f99011":"code","a6c69237":"code","97bd1640":"code","7677c2c3":"code","5b3c7057":"code","a7f0b648":"code","d446ebad":"code","24cdc452":"code","a12a01d2":"code","539f5c01":"code","62052707":"code","1e0caaf1":"code","9b5f14b0":"code","682d6dec":"code","ab372185":"code","794ea01a":"code","f0f67ae4":"code","6de33c9a":"code","073314c8":"code","f55d902a":"code","cfbb6bbe":"markdown","89bcfef7":"markdown","1cff77c6":"markdown","e88e94f4":"markdown","bb0ae799":"markdown","f7629342":"markdown","5e0cd158":"markdown","aeb9171c":"markdown","2d435590":"markdown","fbb259b0":"markdown","7673ed33":"markdown","9be5e3dd":"markdown","cafcd2ef":"markdown"},"source":{"ae6362f4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/input\/water-potability\/water_potability.csv'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e742237":"#Some \u0130mport Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score, cross_val_predict\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, log_loss\nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import scale\nimport plotly.express as px\nimport statsmodels.formula.api as smf\nimport statsmodels.api as sm\nimport plotly.express as px\n\n# Data Pre-processing Libraries\n\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\n#Modelling Libraries\n\nfrom sklearn.linear_model import LogisticRegression,RidgeClassifier,SGDClassifier,PassiveAggressiveClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.svm import SVC,LinearSVC,NuSVC\nfrom sklearn.neighbors import KNeighborsClassifier,NearestCentroid\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB,BernoulliNB\nfrom sklearn.ensemble import VotingClassifier\n\n# Evaluation & CV Libraries\nfrom sklearn.metrics import precision_score,accuracy_score\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV,RepeatedStratifiedKFold\n\nimport warnings\nwarnings.filterwarnings('ignore')","cea2e60a":"df = pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")\ndf.head()","129034a4":"df.info() #We see data types.","ad2ec852":"df.shape #Our data consists of 3276 rows and 10 columns and is 2 dimensional.","71373feb":"df.describe().T\n#this part allows us to get to know the data a little bit, so we determine what we will do in the next stages.","167837df":"colors_dark = [\"#1F1F1F\", \"#313131\", '#636363', '#AEAEAE', '#DADADA']\nsns.palplot(colors_dark)","a37d099d":"\nd= pd.DataFrame(df['Potability'].value_counts())\nfig = px.pie(d,values='Potability',names=['Not Potable : 1','Potable : 0'],hole=0.8,opacity=0.8,\n            color_discrete_sequence=[colors_dark[0],colors_dark[4]],\n             labels={'1' : 'Not Potable', '0' : 'Potable','Potability':'Sample Numbers'})\n\n#fig.add_annotation(text='We can resample the data<br> to get a balanced dataset',\n                   #x=1.2,y=0.9,showarrow=False,font_size=12,opacity=0.7,font_family='monospace')\n\nfig.add_annotation(text='Potability',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\n\n#fig.update_layout(\n    #font_family='monospace',\n    #title=dict(text='Q. How many samples of water are Potable?',x=0.47,y=0.98,\n     #          font=dict(color=colors_dark[2],size=20)),\n    #legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    #hoverlabel=dict(bgcolor='white'))\n\nfig.update_traces(textposition='outside', textinfo='percent+label')\n\nfig.show()","deffd479":"df.isnull()","95161d72":"df.isnull().any()","6556dc61":"plt.title('Missing Values')\nnans = df.isna().sum().sort_values(ascending=False).to_frame()\nsns.heatmap(nans,annot=True,fmt='d',cmap='BuGn')","c5cdc1fe":"mean_ph = df['ph'].mean()\ndf['ph'].fillna(mean_ph, inplace=True)\ndf['ph'].isnull().sum()","a967f8cd":"mean_sulfate = df['Sulfate'].mean()\ndf['Sulfate'].fillna(mean_sulfate, inplace=True)\ndf['Sulfate'].isnull().sum()","0175bcee":"mean_trihalo = df['Trihalomethanes'].mean()\ndf['Trihalomethanes'].fillna(mean_trihalo, inplace=True)\ndf['Trihalomethanes'].isnull().sum()","059096b5":"plt.title('Missing Values')\nnans = df.isna().sum().sort_values(ascending=False).to_frame()\nsns.heatmap(nans,annot=True,fmt='d',cmap='BuGn')","95a31872":"fig = px.scatter_matrix(df,df.drop('Potability',axis=1),height=1250,width=1250,template='plotly_white',opacity=0.7,\n                        color_discrete_sequence=[colors_dark[0],colors_dark[4]],color='Potability',\n                       symbol='Potability',color_continuous_scale=[colors_dark[2],colors_dark[1]])\n\nfig.update_layout(font_family='monospace',font_size=10,\n                  coloraxis_showscale=False,\n                 legend=dict(x=0.02,y=1.07,bgcolor=colors_dark[4]),\n                 title=dict(text='Scatter Plot Matrix b\/w Features',x=0.5,y=0.97,\n                   font=dict(color=colors_dark[2],size=24)))\nfig.show()","91dee761":"fig = plt.figure(figsize=(22, 11))\nfig.subplots_adjust(hspace=0.4, wspace=0.4)\nax = fig.add_subplot(3, 3, 1)\nsns.distplot(df['ph'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 2)\nsns.distplot(df['Hardness'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 3)\nsns.distplot(df['Solids'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 4)\nsns.distplot(df['Chloramines'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 5)\nsns.distplot(df['Sulfate'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 6)\nsns.distplot(df['Conductivity'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 7)\nsns.distplot(df['Organic_carbon'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 8)\nsns.distplot(df['Trihalomethanes'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 9)\nsns.distplot(df['Turbidity'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nplt.show()","5bc52199":"plt.figure(figsize=(20, 17))\nmatrix = np.triu(df.corr())\nsns.heatmap(df.corr(), annot=True,linewidth=.8, mask=matrix, cmap=\"rocket\")","cbd1d553":"#Some Box Plots","b80864f0":"fig = px.box(df, x='Potability', y='ph', color=\"Potability\", points='all')\nfig.update_traces(quartilemethod=\"exclusive\") # or \"inclusive\", or \"linear\" by default\nfig.show()","2d0124f4":"fig = px.box(df, x='Potability', y='Hardness', color=\"Potability\", points='all')\nfig.update_traces(quartilemethod=\"exclusive\") # or \"inclusive\", or \"linear\" by default\nfig.show()","0e7cde21":"fig = px.box(df, x='Potability', y='Solids', color=\"Potability\", points='all')\nfig.update_traces(quartilemethod=\"exclusive\") # or \"inclusive\", or \"linear\" by default\nfig.show()","1a290d63":"fig = px.box(df, x='Potability', y='Chloramines', color=\"Potability\", points='all')\nfig.update_traces(quartilemethod=\"exclusive\") # or \"inclusive\", or \"linear\" by default\nfig.show()","710b2bf0":"fig = px.box(df, x='Potability', y='Sulfate', color=\"Potability\", points='all')\nfig.update_traces(quartilemethod=\"exclusive\") # or \"inclusive\", or \"linear\" by default\nfig.show()","ab421ef0":"fig = px.box(df, x='Potability', y='Conductivity', color=\"Potability\", points='all')\nfig.update_traces(quartilemethod=\"exclusive\") # or \"inclusive\", or \"linear\" by default\nfig.show()","574e2869":"fig = px.box(df, x='Potability', y='Organic_carbon', color=\"Potability\", points='all')\nfig.update_traces(quartilemethod=\"exclusive\") # or \"inclusive\", or \"linear\" by default\nfig.show()","ee7085cd":"fig = px.box(df, x='Potability', y='Trihalomethanes', color=\"Potability\", points='all')\nfig.update_traces(quartilemethod=\"exclusive\") # or \"inclusive\", or \"linear\" by default\nfig.show()","367b972d":"fig = px.box(df, x='Potability', y='Turbidity', color=\"Potability\", points='all')\nfig.update_traces(quartilemethod=\"exclusive\") # or \"inclusive\", or \"linear\" by default\nfig.show()","89649f6a":"#Fill outlier for ph\ndf_ph = df['ph']\nQ1_ph = df_ph.quantile(0.25)\nQ3_ph = df_ph.quantile(0.75)\nIQR_ph = Q3_ph - Q1_ph\nlow = Q1_ph - 1.5 * IQR_ph\ntop = Q3_ph + 1.5 * IQR_ph\nprint(top)\nprint(low)","6d7e24af":"(df_ph < low) | (df_ph > top)\noutlier_ph = (df_ph < low) | (df_ph > top)\noutlier_ph.head()\nprint('Sum of Outlier for PH:' , df_ph[outlier_ph].sum())","64e44318":"print(df_ph.mean())\ndf_ph[outlier_ph] = df_ph.mean()","7675921c":"#Fill outlier for Hardness\ndf_h = df['Hardness']\nQ1_h = df_h.quantile(0.25)\nQ3_h = df_h.quantile(0.75)\nIQR_h = Q3_h - Q1_h\nlow_h = Q1_h - 1.5 * IQR_h\ntop_h = Q3_h + 1.5 * IQR_h\nprint(top_h)\nprint(low_h)","418da8fb":"(df_h < low_h) | (df_h > top_h)\noutlier_h = (df_h < low_h) | (df_ph > top_h)\nprint('Sum of outlier for Hardness:' , df_h[outlier_h].sum())","8be58827":"print(df_h.mean())\ndf_h[outlier_h] = df_h.mean()","06748cfa":"#Fill outlier for Solids\ndf_solids = df['Solids']\nQ1_solids = df_solids.quantile(0.25)\nQ3_solids = df_solids.quantile(0.75)\nIQR_solids = Q3_solids - Q1_solids\nlow_s = Q1_solids - 1.5 * IQR_solids\ntop_s = Q3_solids + 1.5 * IQR_solids\nprint(top_s)\nprint(low_s)","5270d93c":"(df_solids < low_s) | (df_solids > top_s)\noutlier_solids = (df_solids < low_s) | (df_solids > top_s)\nprint('Sum of outliers for Solids:' , outlier_solids.sum())","e8efd06d":"print(df_solids.mean())\ndf_solids[outlier_solids] = df_solids.mean()","2e42b0b7":"#Fill outliers for Chloramins\ndf_ch = df['Chloramines']\nQ1_ch = df_ch.quantile(0.25)\nQ3_ch = df_ch.quantile(0.75)\nIQR_ch = Q3_ch - Q1_ch\nlow_ch = Q1_ch - 1.5 * IQR_ch\ntop_ch = Q3_ch + 1.5 * IQR_ch\nprint(top_ch)\nprint(low_ch)","94c6ee7a":"(df_ch < low_ch) | (df_ch > top_ch)\noutliers_ch = (df_ch < low_ch) | (df_ch > top_ch)\nprint('Sum of outlier for Chloramines:' , outliers_ch.sum())","9a710501":"print(df_ch.mean())\ndf_ch[outliers_ch] = df_ch.mean()","815a0117":"#Fill outlier for Conductivity\ndf_con = df['Conductivity']\nQ1_con = df_con.quantile(0.25)\nQ3_con = df_con.quantile(0.75)\nIQR_con = Q3_con - Q1_con\nlow_con = Q1_con - 1.5 * IQR_con\ntop_con = Q3_con + 1.5 * IQR_con\nprint(top_con)\nprint(low_con)","88f99011":"(df_con < low_con) | (df_con > top_con)\noutliers_con = (df_ch < low_con) | (df_con > top_con)\nprint('Sum of outliers for Conductivity:' , outliers_con.sum())","a6c69237":"print(df_con.mean())\ndf_con[outliers_con] = df_con.mean()","97bd1640":"#Fill outlier for Organic Carbon\ndf_og = df['Organic_carbon']\nQ1_og = df_og.quantile(0.25)\nQ3_og = df_og.quantile(0.75)\nIQR_og = Q3_og - Q1_og\nlow_og = Q1_og - 1.5 * IQR_og\ntop_og = Q3_og + 1.5 * IQR_og\nprint(top_og)\nprint(low_og)","7677c2c3":"(df_og < low_og) | (df_og > top_og)\noutliers_og = (df_og < low_og) | (df_og > top_og)\nprint('Sum of outliers for Organic Carbon:' , outliers_og.sum())","5b3c7057":"print(df_og.mean())\ndf_og[outliers_og] = df_og.mean()","a7f0b648":"#Fill outlier for Trihalomethanes\ndf_tr = df['Trihalomethanes']\nQ1_tr = df_tr.quantile(0.25)\nQ3_tr = df_tr.quantile(0.75)\nIQR_tr = Q3_tr - Q1_tr\nlow_tr = Q1_tr - 1.5 * IQR_tr\ntop_tr = Q3_tr + 1.5 * IQR_tr\nprint(top_tr)\nprint(low_tr)","d446ebad":"(df_tr < low_tr) | (df_tr > top_tr)\noutliers_tr = (df_tr < low_tr) | (df_tr > top_tr)\nprint('Sum of outliers for Trihalomethanes:' , outliers_tr.sum())","24cdc452":"print(df_tr.mean())\ndf_tr[outliers_tr] = df_tr.mean()","a12a01d2":"#Fill outlier for Turbidity\ndf_tur = df['Turbidity']\nQ1_tur = df_tur.quantile(0.25)\nQ3_tur = df_tur.quantile(0.75)\nIQR_tur = Q3_tur - Q1_tur\nlow_tur = Q1_tur - 1.5 * IQR_tur\ntop_tur = Q3_tur + 1.5 * IQR_tur\nprint(low_tur)\nprint(top_tur)","539f5c01":"(df_tur < low_tur) | (df_tur > top_tur)\noutliers_tur = (df_tur < low_tur) | (df_tur > top_tur)\nprint('Sum of outliers for Turbidity:' , outliers_tur.sum())","62052707":"print(df_tur.mean())\ndf_tur[outliers_tur] = df_tur.mean()","1e0caaf1":"X = df.drop('Potability',axis=1).values\ny = df['Potability'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","9b5f14b0":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","682d6dec":"models =[(\"LR\", LogisticRegression(max_iter=1000)),(\"SVC\", SVC()),('KNN',KNeighborsClassifier(n_neighbors=10)),\n         (\"DTC\", DecisionTreeClassifier()),(\"GNB\", GaussianNB()),\n        (\"SGDC\", SGDClassifier()),(\"Perc\", Perceptron()),(\"NC\",NearestCentroid()),\n        (\"Ridge\", RidgeClassifier()),(\"NuSVC\", NuSVC()),(\"BNB\", BernoulliNB()),\n         ('RF',RandomForestClassifier()),('ADA',AdaBoostClassifier()),\n        ('XGB',GradientBoostingClassifier()),('PAC',PassiveAggressiveClassifier())]\n\nresults = []\nnames = []\nlastresults = []\n\nfor name,model in models:\n    model.fit(X_train, y_train)\n    model_results = model.predict(X_test)\n    score = precision_score(y_test, model_results,average='macro')\n    results.append(score)\n    names.append(name)\n    lastresults.append((name,score))\n    \nlastresults.sort(key=lambda k:k[1],reverse=True)","ab372185":"print('The Results Feelig Good:' , lastresults)","794ea01a":"# even with such data, we got a good result from svc","f0f67ae4":"model_params = {\n    'XGB':\n    {\n        'model':GradientBoostingClassifier(),\n        'params':\n        {\n            'learning_rate':[0.0001,0.001,0.01,0.1],\n            'n_estimators':[100,200,500,1000],\n            'max_features':['sqrt','log2'],\n            'max_depth':list(range(11))\n        }\n    },\n    'Random Forest':\n    {\n        'model':RandomForestClassifier(),\n        'params':\n        {\n            'n_estimators':[20,50,100,200,400],\n            'max_features':['auto','sqrt','log2'],\n            'max_depth':list(range(1,11))\n        }\n    }\n}","6de33c9a":"cv = RepeatedStratifiedKFold(n_splits=5,n_repeats=2)\nscores=[]\nfor model_name,params in model_params.items():\n    rs = RandomizedSearchCV(params['model'],params['params'],cv=cv,n_iter=20)\n    rs.fit(X,y)\n    scores.append([model_name,dict(rs.best_params_),rs.best_score_])\ndff=pd.DataFrame(scores,columns=['Model','Parameters','Score'])\ndff","073314c8":"param=dff['Parameters']\nmodel = VotingClassifier(estimators=[\n                                     ('XGB',GradientBoostingClassifier(**param[0])),\n                                     ('RF',RandomForestClassifier(**param[1])),\n                                    ],voting='hard')\n\naccuracy=[]\nscaler = StandardScaler()\nskf = RepeatedStratifiedKFold(n_splits=5,n_repeats=2)\nskf.get_n_splits(X,y)\n\nfor train_index, test_index in skf.split(X,y):\n    \n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    \n    scaler.fit(X_train)\n    X_train = scaler.transform(X_train)\n    X_test = scaler.transform(X_test)\n    \n    model.fit(X_train,y_train)\n    predictions=model.predict(X_test)\n    score=accuracy_score(y_test,predictions)\n    accuracy.append(score)    ","f55d902a":"np.mean(accuracy)","cfbb6bbe":"# Standardizing The Data","89bcfef7":"Missing Values\n","1cff77c6":"# Exploration Data Analysis","e88e94f4":"# Hyperparameter Tuning","bb0ae799":"# Conclusion\nOur final model gave a result of 65 percent. In fact, even for such a data set, the value of 65 percent is high because the observations of the variables are mostly wrong. The values in the variables are just written so there is no accuracy margin.\n7 percent accuracy of all variables for total potable water.This shows that most of the observations in the data were entered incorrectly.In addition, it can be said that there is no correlation between the variables.Despite this, we continued the analysis and got a result of 65 percent, but I think this result is meaningless.\nThanksss...","f7629342":"# Water Potability\n\nAccess to safe drinking-water is essential to health, a basic human right and a component of effective policy for health protection. This is important as a health and development issue at a national, regional and local level. In some regions, it has been shown that investments in water supply and sanitation can yield a net economic benefit, since the reductions in adverse health effects and health care costs outweigh the costs of undertaking the interventions.\n\n1. pH value:\nPH is an important parameter in evaluating the acid\u2013base balance of water. It is also the indicator of acidic or alkaline condition of water status. WHO has recommended maximum permissible limit of pH from 6.5 to 8.5. The current investigation ranges were 6.52\u20136.83 which are in the range of WHO standards.\n\n2. Hardness:\nHardness is mainly caused by calcium and magnesium salts. These salts are dissolved from geologic deposits through which water travels. The length of time water is in contact with hardness producing material helps determine how much hardness there is in raw water. Hardness was originally defined as the capacity of water to precipitate soap caused by Calcium and Magnesium.\n\n3. Solids (Total dissolved solids - TDS):\nWater has the ability to dissolve a wide range of inorganic and some organic minerals or salts such as potassium, calcium, sodium, bicarbonates, chlorides, magnesium, sulfates etc. These minerals produced un-wanted taste and diluted color in appearance of water. This is the important parameter for the use of water. The water with high TDS value indicates that water is highly mineralized. Desirable limit for TDS is 500 mg\/l and maximum limit is 1000 mg\/l which prescribed for drinking purpose.\n\n4. Chloramines:\nChlorine and chloramine are the major disinfectants used in public water systems. Chloramines are most commonly formed when ammonia is added to chlorine to treat drinking water. Chlorine levels up to 4 milligrams per liter (mg\/L or 4 parts per million (ppm)) are considered safe in drinking water.\n\n5. Sulfate:\nSulfates are naturally occurring substances that are found in minerals, soil, and rocks. They are present in ambient air, groundwater, plants, and food. The principal commercial use of sulfate is in the chemical industry. Sulfate concentration in seawater is about 2,700 milligrams per liter (mg\/L). It ranges from 3 to 30 mg\/L in most freshwater supplies, although much higher concentrations (1000 mg\/L) are found in some geographic locations.\n\n6. Conductivity:\nPure water is not a good conductor of electric current rather\u2019s a good insulator. Increase in ions concentration enhances the electrical conductivity of water. Generally, the amount of dissolved solids in water determines the electrical conductivity. Electrical conductivity (EC) actually measures the ionic process of a solution that enables it to transmit current. According to WHO standards, EC value should not exceeded 400 \u03bcS\/cm.\n\n7. Organic_carbon:\nTotal Organic Carbon (TOC) in source waters comes from decaying natural organic matter (NOM) as well as synthetic sources. TOC is a measure of the total amount of carbon in organic compounds in pure water. According to US EPA < 2 mg\/L as TOC in treated \/ drinking water, and < 4 mg\/Lit in source water which is use for treatment.\n\n8. Trihalomethanes:\nTHMs are chemicals which may be found in water treated with chlorine. The concentration of THMs in drinking water varies according to the level of organic material in the water, the amount of chlorine required to treat the water, and the temperature of the water that is being treated. THM levels up to 80 ppm is considered safe in drinking water.\n\n9. Turbidity:\nThe turbidity of water depends on the quantity of solid matter present in the suspended state. It is a measure of light emitting properties of water and the test is used to indicate the quality of waste discharge with respect to colloidal matter. The mean turbidity value obtained for Wondo Genet Campus (0.98 NTU) is lower than the WHO recommended value of 5.00 NTU.\n\n10. Potability:\nIndicates if water is safe for human consumption where 1 means Potable and 0 means Not potable.","5e0cd158":"# Model","aeb9171c":"# Conclusion of Box Plots\nWhen we look at Box Plots, we see that there are values at the very extremes of the data. These are outliers and they destroy the integrity of the data. For example, we saw that an observation with a pH of 14 is drinkable. We can probably die if we drink that water.\nSince such observations distort the pattern of the data, I tried to fill them with means.\nAlso, there is one more thing I got out of here. It is very unlikely that these data are real data. Because the values of potable water were entered as very different values. I think the data set was prepared according to his own mind. I will continue the analysis anyway.\n","2d435590":"![finalresults.png](attachment:7313eb16-73ed-40fa-b96d-f56e6bf7860f.png)","fbb259b0":"\nAs can be understood from the distributions, the data show a normal distribution. Also, when we look at the distribution graphs, there are outliers in the majority of the data.","7673ed33":"# Final Model","9be5e3dd":"While examining the correlation between variables, I noticed that there is almost no correlation between the variables.\nI just tried to find some correlation between ph , hardness and solids, but as you can see it is very, very small.","cafcd2ef":"Under normal conditions, the ph value of potable water should be between 6.5 and 8. However, here the ph degree of potable water can be very high and very low.\nIf we look at the outliers, we can see that the values \u200b\u200bare unreasonable there, too. For example, he says that the water body with ph = 14 is drinkable. It is impossible for the water to be drinkable when the ph value is so high.\nWhen we look at the data, I think these data are not real data, the person filling the data must have filled it in according to his mind."}}