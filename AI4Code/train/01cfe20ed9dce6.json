{"cell_type":{"9926ec48":"code","7c13719f":"code","e68fe465":"code","4a20d4c1":"code","409c08ad":"code","8b24a02a":"code","b017b105":"code","27ed1c2a":"code","7792dfaf":"code","a817d15a":"code","945ec148":"code","6d65baae":"code","11271db7":"code","ff27910f":"code","d47025c8":"code","e015a712":"code","93712b0b":"code","cd18f0c2":"code","8b180587":"code","b15d9c75":"code","c4e316ca":"code","a138526a":"code","c6d1f8fb":"code","556059f2":"code","9709b70d":"markdown","3a53494d":"markdown","e668974b":"markdown","29397d82":"markdown","435b38f6":"markdown","b6a07515":"markdown","1aa3b512":"markdown","dd9c3c19":"markdown","080b002f":"markdown","5a7fa999":"markdown","251ed2da":"markdown"},"source":{"9926ec48":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport torch\nimport torch.nn as nn\nfrom torch import optim\nimport seaborn as sns","7c13719f":"df = pd.read_csv('..\/input\/insurance\/insurance.csv')","e68fe465":"print(\"shape: \", df.shape)\nprint('--------')\nprint(df.info())","4a20d4c1":"df.head()","409c08ad":"sns.pairplot(df);","8b24a02a":"sns.heatmap(df.corr());","b017b105":"sns.distplot(df['charges']);","27ed1c2a":"sns.scatterplot(x='age', y='charges',data=df, )","7792dfaf":"df.isnull().sum()","a817d15a":"# smoker encoding\ndf['smoker'] = [1 if a == 'yes' else 0 for a in df['smoker']]\n\n# region encoding\nregions = {\n    'northeast': [0, 0],\n    'northwest': [0, 1],\n    'southeast': [1, 0],\n    'southwest': [1, 1]\n    }\n\ndf['dir1'] = 0\ndf['dir2'] = 0\ndf[['dir1', 'dir2']] = [regions[dir] for dir in df['region']]\ndf = df.drop('region', axis=1)\n\n# sex encoding\ndf['sex'] = [1 if sex == 'male' else 0 for sex in df['sex']]\n    \n","945ec148":"df.head()","6d65baae":"# normalization\ntarget = df['charges'].copy()\n\nfor i in df.columns:\n    df[i] = (df[i] - min(df[i])) \/ (max(df[i] - min(df[i])))\n","11271db7":"df.head()\nprint(target.head())","ff27910f":"# training data\nX_train = torch.tensor((df.drop('charges', axis=1).iloc[:1100]).values.astype(pd.np.float32))\ny_train = torch.tensor((df['charges'].iloc[:1100]).values.astype(pd.np.float32))\n\ny_train = y_train.reshape(-1, 1)\n","d47025c8":"# model (using pytorch abstractions like Autograd)\n\ntrain_tensor = torch.utils.data.TensorDataset(X_train, y_train)\ntrainloader = torch.utils.data.DataLoader(train_tensor, batch_size=10)\nmodel = nn.Sequential(nn.Linear(7, 1))\n\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\nlosses = []\n\nepochs = 1000\nfor e in range(epochs):\n    running_loss = 0\n    main_outs = []\n    for data, targets in trainloader:\n   \n        optimizer.zero_grad()\n        outs = model.forward(data)\n\n        main_outs.extend(outs)\n        loss = criterion(outs, targets)\n        loss.backward()\n        optimizer.step()\n        \n        running_loss += loss.item()\n    else:\n        print(f\"Training loss: {running_loss\/len(trainloader)}\")\n        losses.append(running_loss\/len(trainloader))\n\n","e015a712":"plt.style.use('seaborn')\nplt.plot(losses);","93712b0b":"preds = model(X_train) * (max(target) - min(target)) + min(target)\nsns.regplot(y_test.squeeze(),denorm.squeeze());","cd18f0c2":"# testing\nX_test = torch.tensor((df.drop('charges', axis=1).iloc[1100:]).values.astype(pd.np.float32))\ny_test = torch.tensor((df['charges'].iloc[1100:]).values.astype(pd.np.float32))\n\ny_test = y_test.reshape(-1, 1)","8b180587":"# denormalize test predictions\npreds = model(X_test).clone().detach()\n\ndenorm = preds * (max(target) - min(target)) + min(target)","b15d9c75":"sns.regplot(y_test.squeeze(),denorm.squeeze());","c4e316ca":"target_tensor = torch.tensor(target.iloc[1100:].values.astype(pd.np.float32))\ntarget_tensor = target_tensor.reshape(-1, 1)\nSSE = pd.np.sqrt(sum((target_tensor - denorm)**2))\nSST = pd.np.sqrt(sum((denorm - denorm.mean())**2))","a138526a":"(1- SSE\/SST)","c6d1f8fb":"# for i in range(25):\n#   nn_.losses.append(torch.mean((y - nn_(X))**2).detach().item())\n#   print(\"#\" + str(i) + \" Loss: \" + str(torch.mean((y - nn_(X))**2).detach().item()))\n\n#   nn_.train(X, y)\n#   print(nn_.W1, nn_.W2)","556059f2":"# model\n\n# class NN (nn.Module):\n#   def __init__(self):\n#     super(NN, self).__init__()\n\n#     self.inpsize = 7\n#     self.otpsize = 1\n#     self.hdnsize = 5\n\n#     self.losses = []\n#     self.outputs = []\n\n#     self.W1 = torch.Tensor(self.inpsize, self.hdnsize) # 7 x 5\n#     self.W2 = torch.Tensor(self.hdnsize, self.otpsize) # 5 x 1\n#     self.W1.fill_(1000)\n#     self.W2.fill_(1000)\n#     self.b1 = torch.Tensor()\n\n#   def train(self, X, y):\n#     # forward + backward pass for training\n#     o = self.forward(X)\n#     self.outputs = o\n#     print(\"o: \", o)\n#     self.backward(X, y, o)\n\n#   def forward(self, X):\n#     self.z = torch.matmul(X, self.W1)\n#     self.z2 = torch.Tensor(self.z)\n\n#     # relu on hidden layer\n#     p, q = self.z.shape\n#     for i in range(p):\n#       for j in range(q):\n#         self.z2[i][j] = self.relu(self.z[i][j])\n\n#     self.z3 = torch.matmul(self.z2, self.W2)\n\n#     # o = torch.Tensor(self.z3)\n#     # r, s = self.z3.shape\n#     # for i in range(r):\n#     #   for j in range(s):\n#     #     o[i][j] = self.relu(self.z3[i][j])\n\n#     # print(o, y)\n#     return self.z3\n\n#   def sigmoid(self, s):\n#     return 1 \/ (1 + torch.exp(-s))\n\n#   def dsigmoid_dx(self, s):\n#     return s * (1 - s)\n\n#   def backward(self, X, y, o):\n#       self.o_error = 0.5*(y - o)**2 # error in output\n#       # 30000 x 1\n\n#       # print(self.o_error.shape, o.shape, y.shape)\n#       self.o_delta = torch.t(self.o_error) @ self.dsigmoid_dx(o) \n#       self.z2_error = torch.matmul(self.o_delta, torch.t(self.W2))\n\n    \n#       # .... -> 30000 x 3\n#       self.z2_delta = self.z2_error * self.dsigmoid_dx(self.z2)\n\n#       # 9 x 30000 * 30000 x 3 -> 9 x 3\n#       self.W1 += ((torch.matmul(torch.t(X), self.z2_delta)) * 0.00001)\n#       self.W2 += (torch.matmul(torch.t(self.z2), self.o_delta) * 0.00001)\n\n#   def relu(self, x):\n#     return max(torch.tensor(0), x)","9709b70d":"Lets first get a feel for the dataset. We'll use DataFrame's head(), shape and info() here.","3a53494d":"Lets calculate the coefficient of determination: $R^2 = 1 - \\frac{SSE}{SST}$","e668974b":"After our categorical encoding, we can see the data above. Something is still missing though: normalization. Though its not a strict necessity, it improves the network's training time and often gives better results. ","29397d82":"### Imports\nThe model I'll be using makes use of some very essential PyTorch features like Autograd and the almost indespensible **nn** module. We'll therefore import optim for our backpropagation, pandas for some simple ground-up pre-processing and matplotlib.pyplot for plotting some nice visualizations.","435b38f6":"### EDA","b6a07515":"### The Data","1aa3b512":"Viewing the heatmap of the correlation matrix of all the features:","dd9c3c19":"## Performing Regression with Neural Networks\nThe majority of my projects that involve neural networks are classification based. This notebook is an attempt at using a network in a regression problem. The dataset itself is simple enough: there are about 1300 rows and 6 features, including some categorical variables. Though it's apparent from the title, the target variable \"charges\" is numerical.","080b002f":"The biggest correlation, which is still not that significant, is between age and charges. There are three 'levels' in the scatterplot above, so the regression is not that straightforward.","5a7fa999":"### Network from scratch\n\nThe model above makes use of a lot of PyTorch's abstractions, and though is an important part of improving the framework's writability, this is not the best way to go in my opinion when it comes to learning and understanding the concepts and the theory in depth. To facilitate said learning, I've made an attempt to achieve similar results with a network made from scratch in PyTorch. ","251ed2da":"Its clear that there is no missing data (NaN values). But we'll have to do something about the categorical variables -- specifically, sex, smoker and region. Let's just add some dummy variables. If a categorical variable has n possible values (or classes), it would require $log_{2}(n)$ dummy variables. \n\nThe function below can be easily generalized by checking the type of each column: we are targeting the columns of type 'object'. To keep it simple, lets just hardcode the columns to encode."}}