{"cell_type":{"fe890d35":"code","fd509e9c":"code","c3ce85e6":"code","6585326e":"code","ecabff53":"code","10fd32aa":"code","2e69fe9a":"code","365108e5":"code","7e48df13":"code","0b1176a5":"code","e7614bbf":"code","8aeeb857":"code","339d4ddb":"markdown","da4a04ad":"markdown","0013b73f":"markdown","3e2c9565":"markdown","85b7b474":"markdown","3f757220":"markdown","cd6d2861":"markdown"},"source":{"fe890d35":"import os\n\nimport networkx as nx\nimport numpy as np\nimport pandas as pd","fd509e9c":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c3ce85e6":"file_path = '\/kaggle\/input\/kensho-derived-wikimedia-data\/statements.csv'\nqpq_df = pd.read_csv(file_path, dtype={'source_item_id': int, 'edge_property_id': int, 'target_item_id': int})","6585326e":"qpq_df","ecabff53":"p279g = nx.DiGraph()\np279g.add_edges_from(qpq_df[qpq_df['edge_property_id']==279][['source_item_id', 'target_item_id']].values)","10fd32aa":"root_qids = {\n    'per': 5,        # https:\/\/www.wikidata.org\/wiki\/Q5  human\n    'loc': 2221906,  # https:\/\/www.wikidata.org\/wiki\/Q2221906  geographic location\n    'org': 43229,    # https:\/\/www.wikidata.org\/wiki\/Q43229  organization\n    'bus': 4830453,  # https:\/\/www.wikidata.org\/wiki\/Q4830453 business\n    'cpy': 783794,   # https:\/\/www.wikidata.org\/wiki\/Q783794 company\n}","2e69fe9a":"subclass_qids = {\n    lbl: set(nx.ancestors(p279g, qid)).union(set([qid]))\n    for lbl, qid in root_qids.items()\n}","365108e5":"ner_df = pd.DataFrame(index=qpq_df['source_item_id'].unique())\nner_df.index.name = 'qid'","7e48df13":"mask1 = qpq_df['edge_property_id'] == 31\nfor lbl, qid in root_qids.items():\n    mask2 = qpq_df['target_item_id'].isin(subclass_qids[lbl])\n    tmp_df = qpq_df[mask1 & mask2][['source_item_id', 'target_item_id']]\n    tmp_df.set_index('source_item_id', drop=True, inplace=True)\n    tmp_df.index.name = 'qid'\n    \n    # de-duplicate index \n    tmp_df = tmp_df[~tmp_df.index.duplicated()]\n    \n    # add to dataframe\n    ner_df[lbl] = tmp_df['target_item_id']","0b1176a5":"ner_df = ner_df.dropna(how='all').fillna(0).astype(np.int)","e7614bbf":"ner_df","8aeeb857":"ner_df.to_csv('wikidata_subclass_path_ner.csv')","339d4ddb":"# Interpretation\n\nEach cell in the `ner_df` DataFrame is 0 or a Wikidata item id.  The second row indicates that [Q16 (Canada)](https:\/\/www.wikidata.org\/wiki\/Q16) has NER type location b\/c it is an [P31 (instance of)](https:\/\/www.wikidata.org\/wiki\/Property:P31) [Q3624078 (sovereign state)](https:\/\/www.wikidata.org\/wiki\/Q3624078) which is in the subclass path of the root item for location, [Q2221906 (geographic location)](https:\/\/www.wikidata.org\/wiki\/Q2221906).  Because [Q3624078 (sovereign state)](https:\/\/www.wikidata.org\/wiki\/Q3624078) is also in the subclass path of the root item for organization [Q43229 (organization)](https:\/\/www.wikidata.org\/wiki\/Q43229) it also has NER type organization.  \n\nNote that an item can be an instance of multiple other items that would make it a certain NER type.  If this happens, we use pandas to deduplicate and only record one.  For example, [Q17 (Japan)](https:\/\/www.wikidata.org\/wiki\/Q17) is an [P31 (instance of)](https:\/\/www.wikidata.org\/wiki\/Property:P31) [Q3624078 (sovereign state)](https:\/\/www.wikidata.org\/wiki\/Q3624078) and [Q112099 (island nation)](https:\/\/www.wikidata.org\/wiki\/Q112099), both of which are in the subclass path of [Q2221906 (geographic location)](https:\/\/www.wikidata.org\/wiki\/Q2221906), but we only record [Q112099 (island nation)](https:\/\/www.wikidata.org\/wiki\/Q112099).","da4a04ad":"# Define NER Root Nodes","0013b73f":"# Create NER Signatures for each Wikidata Item","3e2c9565":"# Create Subclass Directed Graph","85b7b474":"# Read Wikidata Statements ","3f757220":"# Calculate Subclasses of Each Root Node","cd6d2861":"# Kensho Derived Wikimedia Dataset (KDWD) - Create NER Labels for Wikidata Items Based on Subclass Paths"}}