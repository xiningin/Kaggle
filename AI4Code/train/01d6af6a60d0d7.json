{"cell_type":{"17ee99b5":"code","9e903d90":"code","8b0f04f2":"code","2c00d4b8":"code","98bbb8e0":"code","169a749d":"markdown"},"source":{"17ee99b5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","9e903d90":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n\ndef plot_point(df1, df2, col):\n    for a in col:\n        colors1 = '#00CED1'\n        colors2 = '#DC143C'\n        plt.figure(figsize=(12,6))\n        plt.grid()\n        plt.scatter(df1[df1['isFraud'] == 0]['TransactionDT'], df1[df1['isFraud'] == 0][a], c=colors1, alpha=0.4, s=0.5, label='NoFraud')\n        plt.scatter(df1[df1['isFraud'] == 1]['TransactionDT'], df1[df1['isFraud'] == 1][a], c=colors2, alpha=0.8, s=0.5, label='Fraud')\n        plt.grid()\n        plt.scatter(df2['TransactionDT'], df2[a], c=colors1, alpha=0.4, s=0.5)\n        plt.legend()\n        plt.show()","8b0f04f2":"train_id = pd.read_csv('..\/input\/ieee-fraud-detection\/train_identity.csv')\ntrain_trans = pd.read_csv('..\/input\/ieee-fraud-detection\/train_transaction.csv')\ntest_id = pd.read_csv('..\/input\/ieee-fraud-detection\/test_identity.csv')\ntest_trans = pd.read_csv('..\/input\/ieee-fraud-detection\/test_transaction.csv')","2c00d4b8":"train_id = reduce_mem_usage(train_id)\ntrain_trans = reduce_mem_usage(train_trans)\ntest_id = reduce_mem_usage(test_id)\ntest_trans = reduce_mem_usage(test_trans)","98bbb8e0":"index0 = ['D1','D2','D3','D4','D5','D6','D7','D8','D9','D10','D11','D12','D13','D14','D15']\nplot_point(train_trans, test_trans, index0)","169a749d":"* **When you draw a scatter plot, turn the dot size down and increase the transparency, there will be some interesting findings\u2026\u2026**"}}