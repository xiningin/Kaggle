{"cell_type":{"fa396977":"code","3d22f6b0":"code","8e7d1e76":"code","cad5c6d6":"code","d9656e15":"code","983a2a3c":"code","2b40fd41":"code","a491af76":"code","6deb6693":"code","0f9ea2f5":"code","3b818e9d":"code","5d45b412":"code","77324c07":"code","15a081f9":"code","9e79e3aa":"code","c6787bcd":"code","390e63dd":"code","b58cffb0":"code","3c6e9fc1":"code","5bdb3be1":"markdown","1b1a44c8":"markdown","3c2cc490":"markdown","99280ecc":"markdown","746e9ac4":"markdown","1e65c17b":"markdown","59f01ba6":"markdown","3d3a3599":"markdown","70424d33":"markdown","fbcf6edd":"markdown","2008b46a":"markdown","65797d33":"markdown","e96d259a":"markdown","26f3e908":"markdown","ffb39ec8":"markdown","7dd31b77":"markdown","4caf566c":"markdown"},"source":{"fa396977":"#Importing Libraries\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly #interactive visualization\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3d22f6b0":"df=pd.read_csv('\/kaggle\/input\/kickstarter-projects\/ks-projects-201801.csv')","8e7d1e76":"df.head()","cad5c6d6":"df_state = df[\"state\"].value_counts().reset_index().rename(\n    columns={\"index\": \"State\",\"state\":\"Project\"})\ndf_state","d9656e15":"fig1=px.bar(df_state, x=\"State\",y='Project',title=\"Status of Projects\")\nfig1.show()\nfig2=px.pie(df_state, values='Project',names='State',title=\"Distribuition of States\")\nfig2.show()","983a2a3c":"df_category = df[\"category\"].value_counts().reset_index().rename(\n    columns={\"index\": \"Category\",\"category\":\"Project\"})","2b40fd41":"fig3=px.bar(df_category.head(25), x='Category',y='Project',title=\"Top 25 Categories by the Number of Projects\")\nfig3.show()\ndf_category.loc[df_category['Project'] < 4000, 'Category'] = 'Other Categories' # Represent only large categories\nfig4=px.pie(df_category, values='Project',names=\"Category\",title=\"Distribuition of Projects by Category Name\")\nfig4.show()","a491af76":"main_category = df[\"main_category\"].value_counts().reset_index().rename(\n    columns={\"index\": \"Main Category\",\"main_category\":\"Project\"})","6deb6693":"fig5=px.bar(main_category, x='Main Category',y='Project',title=\"Projects by Main Category Name\")\nfig5.show()\nfig6=px.pie(main_category, values='Project',names=\"Main Category\",title=\"Distribuition of Project by Main Category Name\")\nfig6.show()","0f9ea2f5":"failed= df[df[\"state\"] == \"failed\"][\"main_category\"].value_counts().reset_index().rename(\n    columns={\"main_category\":\"Failed\",\"index\": \"Main Category\"})\nsuccessful = df[df[\"state\"] == \"successful\"][\"main_category\"].value_counts().reset_index().rename(\n    columns={\"main_category\":\"Succesful\",\"index\": \"Main Category\"})\ncanceled = df[df[\"state\"] == \"canceled\"][\"main_category\"].value_counts().reset_index().rename(\n    columns={\"main_category\":\"Canceled\",\"index\": \"Main Category\"})\nundefined = df[df[\"state\"] == \"undefined\"][\"main_category\"].value_counts().reset_index().rename(\n    columns={\"main_category\":\"Undefined\",\"index\": \"Main Category\"})\nlive = df[df[\"state\"] == \"live\"][\"main_category\"].value_counts().reset_index().rename(\n    columns={\"main_category\":\"Live\",\"index\": \"Main Category\"})\nsuspended = df[df[\"state\"] == \"suspended\"][\"main_category\"].value_counts().reset_index().rename(\n    columns={\"main_category\":\"Suspended\",\"index\": \"Main Category\"})\n\n#Maybe there is an easy way to merge the data but I wanted to try this method.\n\nmain_cats_merged=failed.merge(successful,on=\"Main Category\")\n\nstate=[canceled,undefined,live,suspended]\n\nfor i in state:\n    main_cats_merged=main_cats_merged.merge(i,on=\"Main Category\")\n\nmain_cats_merged","3b818e9d":"fig7 = go.Figure(data=[\n    go.Bar(name='Failed',    x=main_cats_merged[\"Main Category\"], y=main_cats_merged[\"Failed\"]),\n    go.Bar(name='Succesful', x=main_cats_merged[\"Main Category\"], y=main_cats_merged[\"Succesful\"]),\n    go.Bar(name='Canceled',  x=main_cats_merged[\"Main Category\"], y=main_cats_merged[\"Canceled\"]),\n    go.Bar(name='Undefined', x=main_cats_merged[\"Main Category\"], y=main_cats_merged[\"Undefined\"]),\n    go.Bar(name='Live',      x=main_cats_merged[\"Main Category\"], y=main_cats_merged[\"Live\"]),\n    go.Bar(name='Suspended', x=main_cats_merged[\"Main Category\"], y=main_cats_merged[\"Suspended\"])\n])\n# Change the bar mode\nfig7.update_layout(barmode='stack', xaxis={'categoryorder':'total descending'},title=\"Distribuition of Projects by Status\")\nfig7.show()","5d45b412":"df['launch_year']=pd.to_datetime(df['launched'], format=\"%Y\/%m\/%d\").dt.year\nfig8 = sns.countplot(df.launch_year)\nplt.xlabel(\"Year\")\nplt.ylabel(\"Project\")\nplt.title(\"Number of Projects by Years\")\nplt.show(fig8)\n","77324c07":"df_state_successful = df.loc[df.state=='successful'].drop(\n    ['ID','goal','launched','pledged','usd pledged','deadline','launch_year'],axis=1)\ndf_state_failed = df.loc[df.state=='failed'].drop(\n    ['ID','goal','launched','pledged','usd pledged','deadline','launch_year'],axis=1)","15a081f9":"successful_mean=df_state_successful.groupby(['main_category']).mean().sort_values(by=['backers'],ascending=False)\nsuccessful_mean\n","9e79e3aa":"fig9=px.bar(successful_mean, x=successful_mean.index,y=\"backers\",title=\"Backers by Main Category-Succesful Projects\")\nfig9.show()","c6787bcd":"successful_mean=df_state_successful.groupby(['main_category']).mean().sort_values(by=['usd_pledged_real'],ascending=False)\nfig10 = go.Figure()\n\nfig10.add_trace(\n    go.Bar(\n        x=successful_mean.index,\n        y=successful_mean.usd_pledged_real,\n        name=\"usd_pledged_real\"\n    ))\n\nfig10.add_trace(\n    go.Scatter(\n        x=successful_mean.index,\n        y=successful_mean.usd_goal_real,\n        name=\"usd_goal_real\",\n        mode=\"markers\"\n    ))\n\nfig10.update_layout(title=\"Pledged vs Goal Values (Real $)-Successful Projects\")\nfig10.show()","390e63dd":"failed_mean=df_state_failed.groupby(['main_category']).mean().sort_values(by=['backers'],ascending=False)\nfailed_mean","b58cffb0":"\nfig11=px.bar(failed_mean, x=failed_mean.index,y=\"backers\",title=\"Backers by Main Category-Failed\")\nfig11.show()","3c6e9fc1":"failed_mean=df_state_failed.groupby(['main_category']).mean().sort_values(by=['usd_goal_real'],ascending=False)\nfig12 = go.Figure()\n\nfig12.add_trace(\n    go.Scatter(\n        x=failed_mean.index,\n        y=failed_mean.usd_pledged_real,\n        name=\"usd_pledged_real\",\n        mode=\"markers\"\n    ))\n\nfig12.add_trace(\n    go.Bar(\n        x=failed_mean.index,\n        y=failed_mean.usd_goal_real,\n        name=\"usd_goal_real\"\n    ))\nfig12.update_layout(title=\"Pledged vs Goal Values (Real $)-Failed Projects\")\nfig12.show()","5bdb3be1":"### 2.4. Visualization by State and Main Category","1b1a44c8":"### 2.6.1. Visualization by Successful Projects-Mean","3c2cc490":"* We can see state of the projects in one graph.","99280ecc":"## 1. Importing Libraries and Data","746e9ac4":"* While games, technology and design are among the categories that attract the most attention of backers; dance, theater and art have limited backers. ","1e65c17b":"* 2015 is the most important year in terms of published projects in Kickstarter.  ","59f01ba6":"### 2.2. Visualization by Category","3d3a3599":"* Film & video category is the field with the most projects (16.8 %).\n* The second main category is music with 13.7 %. The third is publishing with 9.3% and the fourth is technology with 8.6%.","70424d33":"### 2.1. Visualization by State","fbcf6edd":"**I want to know that the projects are successful or not. Therefore i will create new data frame named 'df_state'. Then i will create Bar and Pie Charts to see the results.**","2008b46a":"## 2. Data Visualization","65797d33":"### 2.3. Visualization by Main Category","e96d259a":"### 2.5 Visualization by Year\nI used seaborn because it's has countplot function. This is easy way to plot when we need counting the raws.","26f3e908":"* As we can see that 52% of the projects is failed and successfull rate is 35.4%.","ffb39ec8":"### 2.6. Visualization by Successful and Failed Projects\nI will create two data frames for more deep analysis. One of them will be successful projects and other is failed.","7dd31b77":"* It is seen that the goals are not realistic in failed projects. We do not have a variable to measure project quality, but it can be said that one of the reasons for project failure is unrealistic goals.","4caf566c":"### 2.6.2. Visualization by Failed Projects-Mean"}}