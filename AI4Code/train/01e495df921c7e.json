{"cell_type":{"ab78380b":"code","b7d7cba6":"code","8fbe2999":"code","ac134211":"code","bb293ccd":"code","7814bbc4":"code","ed6cb193":"code","03a4b95a":"code","7416a784":"code","cbfd2f33":"code","c858ecab":"code","3c4b6963":"markdown","605995d5":"markdown","8dd2b07d":"markdown","80289f4d":"markdown","553fd946":"markdown","21dc826e":"markdown","11c73794":"markdown","e741ca70":"markdown","365a2ea3":"markdown","32ced18c":"markdown","36c8eb2c":"markdown","ee9c3788":"markdown"},"source":{"ab78380b":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport math\nimport scipy\nfrom random import choice\nfrom scipy.spatial.distance import euclidean\nfrom scipy.special import expit\nfrom tqdm import tqdm\n\n\ntrain_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)","b7d7cba6":"def standardize_dataset(train):\n    train['ToLeft'] = train.PlayDirection == \"left\"\n    train['IsBallCarrier'] = train.NflId == train.NflIdRusher\n    train['TeamOnOffense'] = \"home\"\n    train.loc[train.PossessionTeam != train.HomeTeamAbbr, 'TeamOnOffense'] = \"away\"\n    train['IsOnOffense'] = train.Team == train.TeamOnOffense # Is player on offense?\n    train['YardLine_std'] = 100 - train.YardLine\n    train.loc[train.FieldPosition.fillna('') == train.PossessionTeam,  \n            'YardLine_std'\n             ] = train.loc[train.FieldPosition.fillna('') == train.PossessionTeam,  \n              'YardLine']\n    train['X_std'] = train.X\n    train.loc[train.ToLeft, 'X_std'] = 120 - train.loc[train.ToLeft, 'X'] \n    train['Y_std'] = train.Y\n    train.loc[train.ToLeft, 'Y_std'] = 53.3 - train.loc[train.ToLeft, 'Y'] \n    train['Orientation_std'] = train.Orientation\n    train.loc[train.ToLeft, 'Orientation_std'] = np.mod(180 + train.loc[train.ToLeft, 'Orientation_std'], 360)\n    train['Dir_std'] = train.Dir\n    train.loc[train.ToLeft, 'Dir_std'] = np.mod(180 + train.loc[train.ToLeft, 'Dir_std'], 360)\n    train.loc[train['Season'] == 2017, 'Orientation'] = np.mod(90 + train.loc[train['Season'] == 2017, 'Orientation'], 360)    \n    \n    return train","8fbe2999":"dominance_df = standardize_dataset(train_df)\ndominance_df['Rusher'] = dominance_df['NflIdRusher'] == dominance_df['NflId']\n\ndominance_df.head(3)","ac134211":"def radius_calc(dist_to_ball):\n    ''' I know this function is a bit awkward but there is not the exact formula in the paper,\n    so I try to find something polynomial resembling\n    Please consider this function as a parameter rather than fixed\n    I'm sure experts in NFL could find a way better curve for this'''\n    return 4 + 6 * (dist_to_ball >= 15) + (dist_to_ball ** 3) \/ 560 * (dist_to_ball < 15)\n\n# we plot the player influence radius relation with distance to the ball\nx = np.linspace(0, 27, 250)\nplt.figure(figsize=(8, 5))\nplt.plot(x, radius_calc(x), c='g', linewidth=3, alpha=.7, label='Radius in metres')\nplt.grid()\nplt.ylim(-0.5, 11)\nplt.ylabel('Influence radius')\nplt.xlabel('Distance to the ball')\nplt.title('Influence radius as a function of the distance to the ball')\nplt.legend(loc=2)\nplt.show()","bb293ccd":"@np.vectorize\ndef compute_influence(x_point, y_point, player_id):\n    '''Compute the influence of a certain player over a coordinate (x, y) of the pitch\n    '''\n    point = np.array([x_point, y_point])\n    player_row = my_play.loc[player_id]\n    theta = math.radians(player_row[56])\n    speed = player_row[5]\n    player_coords = player_row[54:56].values\n    ball_coords = my_play[my_play['IsBallCarrier']].iloc[:, 54:56].values\n    \n    dist_to_ball = euclidean(player_coords, ball_coords)\n\n    S_ratio = (speed \/ 13) ** 2    # we set max_speed to 13 m\/s\n    RADIUS = radius_calc(dist_to_ball)  # updated\n\n    S_matrix = np.matrix([[RADIUS * (1 + S_ratio), 0], [0, RADIUS * (1 - S_ratio)]])\n    R_matrix = np.matrix([[np.cos(theta), - np.sin(theta)], [np.sin(theta), np.cos(theta)]])\n    COV_matrix = np.dot(np.dot(np.dot(R_matrix, S_matrix), S_matrix), np.linalg.inv(R_matrix))\n    \n    norm_fact = (1 \/ 2 * np.pi) * (1 \/ np.sqrt(np.linalg.det(COV_matrix)))    \n    mu_play = player_coords + speed * np.array([np.cos(theta), np.sin(theta)]) \/ 2\n    \n    intermed_scalar_player = np.dot(np.dot((player_coords - mu_play),\n                                    np.linalg.inv(COV_matrix)),\n                             np.transpose((player_coords - mu_play)))\n    player_influence = norm_fact * np.exp(- 0.5 * intermed_scalar_player[0, 0])\n    \n    intermed_scalar_point = np.dot(np.dot((point - mu_play), \n                                    np.linalg.inv(COV_matrix)), \n                             np.transpose((point - mu_play)))\n    point_influence = norm_fact * np.exp(- 0.5 * intermed_scalar_point[0, 0])\n\n    return point_influence \/ player_influence","7814bbc4":"@np.vectorize\ndef pitch_control(x_point, y_point):\n    '''Compute the pitch control over a coordinate (x, y)'''\n\n    offense_ids = my_play[my_play['IsOnOffense']].index\n    offense_control = compute_influence(x_point, y_point, offense_ids)\n    offense_score = np.sum(offense_control)\n\n    defense_ids = my_play[~my_play['IsOnOffense']].index\n    defense_control = compute_influence(x_point, y_point, defense_ids)\n    defense_score = np.sum(defense_control)\n\n    return expit(offense_score - defense_score)","ed6cb193":"# select a random play to be plotted\nmy_play_id = choice(dominance_df['PlayId'].unique())           # if you want a random play_id\nmy_play = dominance_df[dominance_df['PlayId']==20180916051806]\n\nplayer_coords = my_play[my_play['Rusher']][['X', 'Y']].values[0]\nprint('Player coordinates: ', player_coords)","03a4b95a":"front = 15\nbehind = 5\nleft = right = 20\nnum_points_meshgr = (30, 15)   # don't make it too large otherwise it'll be long to run\n\n\ncolorm = ['purple'] * 11 + ['orange'] * 11\ncolorm[np.where(my_play.Rusher.values)[0][0]] = 'black'\n\nX, Y = np.meshgrid(np.linspace(player_coords[0] - behind, \n                               player_coords[0] + front, \n                               num_points_meshgr[0]), \n                   np.linspace(player_coords[1] - left, \n                               player_coords[1] + right, \n                               num_points_meshgr[1]))\n\n# infl is an array of shape num_points with values in [0,1] accounting for the pitch control\ninfl = pitch_control(X, Y)\n\nplt.figure(figsize=(12, 8))\nplt.contourf(X, Y, infl, 12, cmap ='bwr')\nplt.scatter(my_play['X'].values, my_play['Y'].values, c=colorm)\nplt.title('Yards gained = {}, play_id = {}'.format(my_play['Yards'].values[0], my_play_id))\nplt.show()","7416a784":"class Controller:\n    '''This class is a wrapper for the two functions written above'''\n    def __init__(self, play):\n        self.play = play\n        self.vec_influence = np.vectorize(self.compute_influence)\n        self.vec_control = np.vectorize(self.pitch_control) \n        \n    def compute_influence(self, x_point, y_point, player_id):\n        '''Compute the influence of a certain player over a coordinate (x, y) of the pitch\n        '''\n        point = np.array([x_point, y_point])\n        player_row = self.play.loc[player_id]\n        theta = math.radians(player_row[56])\n        speed = player_row[5]\n        player_coords = player_row[54:56].values\n        ball_coords = self.play[self.play['IsBallCarrier']].iloc[:, 54:56].values\n\n        dist_to_ball = euclidean(player_coords, ball_coords)\n\n        S_ratio = (speed \/ 13) ** 2         # we set max_speed to 13 m\/s\n        RADIUS = radius_calc(dist_to_ball)  # updated\n\n        S_matrix = np.matrix([[RADIUS * (1 + S_ratio), 0], [0, RADIUS * (1 - S_ratio)]])\n        R_matrix = np.matrix([[np.cos(theta), - np.sin(theta)], [np.sin(theta), np.cos(theta)]])\n        COV_matrix = np.dot(np.dot(np.dot(R_matrix, S_matrix), S_matrix), np.linalg.inv(R_matrix))\n\n        norm_fact = (1 \/ 2 * np.pi) * (1 \/ np.sqrt(np.linalg.det(COV_matrix)))    \n        mu_play = player_coords + speed * np.array([np.cos(theta), np.sin(theta)]) \/ 2\n\n        intermed_scalar_player = np.dot(np.dot((player_coords - mu_play),\n                                        np.linalg.inv(COV_matrix)),\n                                 np.transpose((player_coords - mu_play)))\n        player_influence = norm_fact * np.exp(- 0.5 * intermed_scalar_player[0, 0])\n\n        intermed_scalar_point = np.dot(np.dot((point - mu_play), \n                                        np.linalg.inv(COV_matrix)), \n                                 np.transpose((point - mu_play)))\n        point_influence = norm_fact * np.exp(- 0.5 * intermed_scalar_point[0, 0])\n\n        return point_influence \/ player_influence\n    \n    \n    def pitch_control(self, x_point, y_point):\n        '''Compute the pitch control over a coordinate (x, y)'''\n\n        offense_ids = self.play[self.play['IsOnOffense']].index\n        offense_control = self.vec_influence(x_point, y_point, offense_ids)\n        offense_score = np.sum(offense_control)\n\n        defense_ids = self.play[~self.play['IsOnOffense']].index\n        defense_control = self.vec_influence(x_point, y_point, defense_ids)\n        defense_score = np.sum(defense_control)\n\n        return expit(offense_score - defense_score)\n    \n    def display_control(self, grid_size=(30, 15), figsize=(11, 7)):\n        front, behind = 15, 5\n        left, right = 20, 20\n\n        colorm = ['purple'] * 11 + ['orange'] * 11\n        colorm[np.where(self.play.Rusher.values)[0][0]] = 'black'\n        player_coords = self.play[self.play['Rusher']][['X_std', 'Y_std']].values[0]\n\n        X, Y = np.meshgrid(np.linspace(player_coords[0] - behind, \n                                       player_coords[0] + front, \n                                       grid_size[0]), \n                           np.linspace(player_coords[1] - left, \n                                       player_coords[1] + right, \n                                       grid_size[1]))\n\n        # infl is an array of shape num_points with values in [0,1] accounting for the pitch control\n        infl = self.vec_control(X, Y)\n\n        plt.figure(figsize=figsize)\n        plt.contourf(X, Y, infl, 12, cmap='bwr')\n        plt.scatter(self.play['X'].values, self.play['Y'].values, c=colorm)\n        plt.title('Yards gained = {}, play_id = {}'.format(self.play['Yards'].values[0], \n                                                           self.play['PlayId'].unique()[0]))\n        plt.show()","cbfd2f33":"# Example: how to use the class?\ncontrol = Controller(my_play)\ncoords = my_play.iloc[1, 54:56].values         # let's compute the influence at the location of the first player\npitch_control = control.vec_control(*coords)\npitch_control","c858ecab":"control.display_control()","3c4b6963":"* **v_1 update**: as in the reference paper, I created a function that modulates the influence radius of a player as a function of his distance to the ball. Indeed, the farther you're from the ball, the biggest influence you can have in terms of pitch covering. I reimplemented their function but I'm sure you could gain some insight by adapting it with \"NFL relevant\" values.\n* **v_5 update**: 2 main modifications: (1) I speed up the code by modifying calls to the dataframe (2-3 times faster but there's still room for improvement) ; (2) I created a class wrapping the functions defined in the first part, including the display of the pitch control visually (+ some typo fixes). ","605995d5":"Quoting from the paper : specifically, the player\u2019s influence I at a given location p for a given player i at time t is defined by a bivariate normal distribution with mean $\\mu_i(t)$ and covariance matrix $\\sum_i(t)$, given the player\u2019s velocity $s$ and angle $\\theta$. For a given location in space $p$ at time $t$, the probability density function of player $i$ influence area is defined by a standard multivariate normal distribution. The player\u2019s influence likelihood is then\ndefined as the normalization of $f$ at the given location $p$ by the value of $f$ at player\u2019s current location $p_i(t)$, as shown in the following equation :\n<break>\n$I_i(p,t) = \\frac{f_i(p,t)}{f_i(p_i(t),t)}$","8dd2b07d":"# Little Standardization Step","80289f4d":"# Presentation","553fd946":"# Pitch Control","21dc826e":"Just a little preprocessing step to ensure we have the X and Y standardized","11c73794":"**Don't hesitate if you have any question!**","e741ca70":"# Player influence Area","365a2ea3":"In this notebook, I code the **VIP hint** given by @MichaelLopez. You can find the paper at : http:\/\/www.lukebornn.com\/papers\/fernandez_ssac_2018.pdf \n<break>\n\nI just implemented their version of the algorithm, without any specific attention to the particular context of this competition. I think several thing can be tailored to be \"NFL specific\". I mainly refer of the influence `radius` of a player, which is set to lie in $[4, 10]$ in football, but that may well be very different here. \nOnce you have the influence of the player and the pitch control, you'll have to create features from that.","32ced18c":"# Imports","36c8eb2c":"### Class Wrapper","ee9c3788":"Quoting from the paper : based on this, we present a pitch control model that summarizes the level of influence of every player,and outputs a degree of control for any part of the pitch. Equation 2 presents the pitch control level at\na location $p$ at time $t$, where $i$ and $j$ refers to the index of the player in each opposing team. Here the logistic function transforms the substraction of the accumulated individual influence area of each team into a degree of control within the $[0, 1]$ range. Also, since we are defining a team-oriented pitch control model, a single player without any influence of any other player at its current location only controls\n`logistic(1) = 0.73` of the space. This provides the need of higher density of players near a given area to provide higher level of control in that area.\nWe have the following equation : \n<break>\n$PC(p,t)=\\sigma(\\sum_i I(p,t) - \\sum_j I(p,t))$  ($\\sigma$ is the logistic function)"}}