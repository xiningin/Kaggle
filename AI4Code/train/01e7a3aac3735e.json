{"cell_type":{"0f3c6138":"code","74af0497":"code","43eb458b":"code","562e0ee8":"code","8c65d3a6":"code","a4b50a1e":"code","1b106381":"code","f64b99f3":"code","28d6e1c9":"code","1341ab26":"code","b5b2790d":"code","9f702670":"code","a0b95fb5":"code","16a08951":"code","6d5f3736":"code","b72e129a":"code","49e68a1d":"code","4ba56b90":"code","279ea9f0":"code","cc492972":"code","9e417e20":"code","0f74ef66":"code","69f5da8e":"code","569aad4c":"code","5bd1a6d7":"code","4446893a":"code","d41adb5b":"code","635c4b64":"code","c1dbbdc6":"code","01a0240c":"code","03f9e80f":"code","ff83cac2":"code","c42cb665":"code","52e1e7ed":"code","73058da1":"code","a3d36cb0":"code","11225426":"code","6ded6f0f":"code","024c21c2":"code","48e72cfb":"code","fc194b29":"code","49d3816d":"code","90d3b8cd":"code","db464706":"code","c9150b88":"code","12475f0c":"code","ea4abceb":"code","e4f2a0bd":"code","c2c8a5ae":"code","46c220fe":"code","d29cf45d":"code","dc8fcd08":"code","2ce9d612":"code","d1903e0f":"code","de164ca7":"code","28c961c8":"code","8067c22a":"code","55479512":"code","748dce5b":"code","c7a64a60":"code","5ad7081f":"code","84f52ca4":"code","0bfaf309":"code","5c18d9a3":"code","eae2d4a2":"code","182f2bdf":"code","eaa5def4":"code","9cb9c013":"code","4f581359":"code","75b11a42":"code","66bddb6b":"code","c05f2eba":"code","6de0b816":"code","a2a2e041":"code","d84a4dd8":"code","1985043a":"code","ccd2a55d":"code","ecdc11a7":"code","97f592ea":"code","4b4170ac":"code","dba180b5":"code","f8c818ef":"markdown","e4acd6f9":"markdown","1fc0356c":"markdown","d40d0e8d":"markdown","1c4bcef7":"markdown","790e919e":"markdown","2433ea44":"markdown","60d5c79d":"markdown","55d5c7e4":"markdown","be8d640a":"markdown","925e5309":"markdown","f74fb9a5":"markdown","fc587510":"markdown","a16b029f":"markdown","7d402aec":"markdown","0196f9c9":"markdown","2c14f512":"markdown","6b238dd9":"markdown","0b34479a":"markdown","95468c30":"markdown","aadb52a9":"markdown","28fafe6a":"markdown","3b8aec58":"markdown"},"source":{"0f3c6138":"# Importing Libraries.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.preprocessing import MinMaxScaler , StandardScaler\nfrom sklearn.ensemble import AdaBoostClassifier , GradientBoostingClassifier , RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV , train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score , accuracy_score,classification_report\nfrom sklearn.metrics import plot_roc_curve\nfrom sklearn.metrics import roc_auc_score\n\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.over_sampling import ADASYN\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import TomekLinks\nfrom imblearn.combine import SMOTETomek","74af0497":"# Reading dataset.\n\nheart=pd.read_csv(r\"C:\\\\Users\\drvcp\\Downloads\\heart_failure_clinical_records_dataset.csv\")\nheart.head()","43eb458b":"# Understanding Dataset.\n# Predictors= 11 , Target  = 1 , Total dataset = 299 observations , No Null Values.\n\nheart.info()","562e0ee8":"heart=heart.astype(int)","8c65d3a6":"heart.info()","a4b50a1e":"# Description of values. \n\nheart.describe()","1b106381":"# Checking data distribution of Blood Investigations.\n\ndata=['creatinine_phosphokinase','platelets' , 'serum_sodium' , 'serum_creatinine']\n\nj=1\n\nplt.figure(figsize=[20,3])\nfor i in data:\n    plt.subplot(1,4,j)\n    sns.boxplot(heart[i])\n    j=j+1\nplt.show()","f64b99f3":"# Checking Blood Investigation values and Death Events.\n\nplt.figure(figsize=[25,3])\nsns.pairplot(data=heart,x_vars=['creatinine_phosphokinase','platelets' , 'serum_sodium' , 'serum_creatinine'],\n             y_vars='DEATH_EVENT',hue='DEATH_EVENT' , diag_kind=None)\nplt.show()","28d6e1c9":"# Distribution of Heart Ejection Fraction. \n\nplt.figure(figsize=[15,3])\nsns.countplot(heart.ejection_fraction)\nplt.title(\"Heart Ejection Fraction CountPlot\")\nplt.yticks(np.arange(0,60,step=5))\nplt.grid()\nplt.show()","1341ab26":"# Effect of Ejection Fraction on Death Events.\n\nplt.figure(figsize=[15,3])\nsns.countplot(data=heart , x='ejection_fraction' , hue='DEATH_EVENT')\nplt.legend(loc='upper right' , title='DEATH_EVENT')\nplt.yticks(np.arange(0,60,step=10))\nplt.title(\"Effect of Ejection Fraction on Death Events\")\nplt.grid()\nplt.show()","b5b2790d":"# Distribution of Categorical Variables.\n\ndata2= ['anaemia' , 'sex' , 'smoking' , 'diabetes' , 'high_blood_pressure']\n\nj=1\n\nplt.figure(figsize=[20,3])\nfor i in data2:\n    plt.subplot(1,5,j)\n    sns.countplot(heart[i])\n    plt.yticks(np.arange(0,210,step=20))\n    plt.grid()\n    j=j+1\nplt.show()","9f702670":"# Effect of Categorical Variables on Death Events.\n\ncat1=['anaemia','sex','smoking','diabetes','high_blood_pressure']\n\nj=1\n\nplt.figure(figsize=[25,3])\nfor i in cat1:\n    plt.subplot(1,5,j)\n    sns.countplot(data=heart,x= heart[i], hue=\"DEATH_EVENT\")\n    plt.yticks(np.arange(0,180,step=20))\n    plt.grid()\n    j=j+1\nplt.show()","a0b95fb5":"# Correlation Matrix.\n\nplt.figure(figsize=[15,5])\nsns.heatmap(heart.corr() , cmap= 'GnBu_r' ,linewidths=1.5,linecolor='grey')\nplt.show()","16a08951":"# Follow Up Period.\n\nsns.distplot(heart.time)\nplt.title(\"Follow Up Period Distribution\")\nplt.grid()\nplt.show()","6d5f3736":"# Binning of Follow up Days - 0 to 6 months, 6 to 12 months and 12 months and above.\n\ndays=[0 , 180 , 360]\nlabs=[\"< 6_months\" , \"6-12 months\"]","b72e129a":"heart[\"follow_up_period\"]=pd.cut(heart.time , bins= days , labels = labs)","49e68a1d":"heart[\"follow_up_period\"].value_counts(normalize=True).sort_values().plot.bar(plt.figure(figsize=[5,3]))\nplt.title(\"Follow Up Visit percentage within 6 Months and 12 months\")\nplt.yticks(np.arange(0.0, 1 , step=0.1))\nplt.grid()\nplt.show()\n\n\n# Higher follow ups are observed between 0 to 6 months.","4ba56b90":"plt.figure(figsize=[8,3])\nsns.countplot(data=heart , x='follow_up_period' , hue='DEATH_EVENT')\nplt.legend(loc='upper right' , title='DEATH_EVENT')\nplt.yticks(np.arange(0,120,step=10))\nplt.title(\"follow_up_period and Death Events\")\nplt.grid()\nplt.show()","279ea9f0":"# Agewise distribution of Patients.\n\nsns.distplot(heart.age)\nplt.title(\"Age Distribution\")\nplt.grid()\nplt.show()","cc492972":"# Binning of Age. \n\nage_yr=[0,40,50,60,70,80,90,100]\nlab=[\"<40\" , \"40-50\" , \"50-60\" , \"60-70\" , \"70-80\" ,\"80-90\" , \">90\"]","9e417e20":"heart['age_group']=pd.cut(heart.age,bins = age_yr,labels=lab)","0f74ef66":"heart[\"age_group\"].value_counts(normalize=True).sort_values().plot.bar(plt.figure(figsize=[5,3]))\nplt.title(\"Age_Group Percentage\")\nplt.yticks(np.arange(0.0, 1 , step=0.1))\nplt.grid()\nplt.show()","69f5da8e":"# Age Group and death Events.\n\nplt.figure(figsize=[15,3])\nsns.countplot(data=heart , x='age_group' , hue='DEATH_EVENT')\nplt.legend(loc='upper right' , title='DEATH_EVENT')\nplt.yticks(np.arange(0,60,step=10))\nplt.title(\"Age Group and Death Events\")\nplt.grid()\nplt.show()","569aad4c":"# Checking Class Imbalance.\n\nheart[\"DEATH_EVENT\"].value_counts(normalize= True).sort_values().plot.bar(plt.figure(figsize=[5,3]))\nplt.title(\"Death Events\")\nplt.yticks(np.arange(0.0, 1 , step=0.1))\nplt.grid()\nplt.show()\n\n\n# Data is faily distributed in 70-30% split. High imbalance is not observed.","5bd1a6d7":"# One Hot Encoding for newly created Categorical Variables.\n\ndummies=pd.get_dummies(heart[['age_group' , 'follow_up_period']] , drop_first=True, prefix= \"new\")\nheart= pd.concat([heart, dummies],axis=1)\nheart=heart.drop(heart[['age' , 'time' , 'age_group' , 'follow_up_period']] , axis= 1)","4446893a":"heart.head()","d41adb5b":"heart=heart.astype(float)","635c4b64":"y=heart.pop('DEATH_EVENT')\nX=heart","c1dbbdc6":"X_train,X_test,y_train,y_test=train_test_split(X,y,train_size= 0.7 , random_state=42)","01a0240c":"X_train.shape,X_test.shape,y_train.shape,y_test.shape","03f9e80f":"# Capping outliers to 3 Standard Deviation.\n\ndef cap_outliers(array, k=3):\n    upper_limit = array.mean() + k*array.std()\n    lower_limit = array.mean() - k*array.std()\n    array[array<lower_limit] = lower_limit\n    array[array>upper_limit] = upper_limit\n    return array","ff83cac2":"X_train = X_train.apply(cap_outliers, axis=0)","c42cb665":"# Scaling feature variables.\n\nscaler=StandardScaler()\nX_train_scaled=scaler.fit_transform(X_train)\nX_test_scaled=scaler.fit_transform(X_test)","52e1e7ed":"lg=LogisticRegression(n_jobs=-1 , random_state= 100 , max_iter=100)","73058da1":"lg1=lg.fit(X_train_scaled,y_train)\ny_pred_lg1=lg1.predict(X_test_scaled)","a3d36cb0":"Accuracy_Score_lg1= accuracy_score(y_test ,y_pred_lg1)\nPrecision_Score_lg1=precision_score(y_test ,y_pred_lg1)\nRecall_Score_lg1=recall_score(y_test ,y_pred_lg1)","11225426":"print(\"Classification report \\n\" , classification_report (y_test ,y_pred_lg1))","6ded6f0f":"plot_roc_curve(lg1, X_test_scaled, y_test,drop_intermediate=False)\nplt.show()","024c21c2":"from statsmodels.stats.outliers_influence import variance_inflation_factor","48e72cfb":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","fc194b29":"X_train.columns","49d3816d":"X_vif_train=X_train[['anaemia', 'creatinine_phosphokinase', 'diabetes',\n       'high_blood_pressure','serum_creatinine',\n       'sex', 'smoking','new_70-80',\n       'new_80-90', 'new_>90', 'new_6-12 months']]\nX_vif_test=X_test[[ 'anaemia', 'creatinine_phosphokinase', 'diabetes',\n       'high_blood_pressure','serum_creatinine',\n       'sex', 'smoking','new_70-80',\n       'new_80-90', 'new_>90', 'new_6-12 months']]","90d3b8cd":"lg2=LogisticRegression(n_jobs=-1 , random_state= 100 , max_iter=100)","db464706":"log2=lg2.fit(X_vif_train,y_train)\ny_pred_lg2=log2.predict(X_vif_test)","c9150b88":"Accuracy_Score_lg2= accuracy_score(y_test ,y_pred_lg2)\nPrecision_Score_lg2=precision_score(y_test ,y_pred_lg2)\nRecall_Score_lg2=recall_score(y_test ,y_pred_lg2)","12475f0c":"print(\"Classification report \\n\" , classification_report (y_test ,y_pred_lg2))","ea4abceb":"rf=RandomForestClassifier(n_jobs= - 1 , random_state=42 , oob_score= True)","e4f2a0bd":"para={'max_depth' : [2,3,5,7,10,15],\n     'min_samples_leaf': [5,10,20,50,100],\n     'n_estimators':[10,25,50,100]}","c2c8a5ae":"grid=GridSearchCV(rf,param_grid = para,n_jobs=-1,cv=4)","46c220fe":"%%time\n\ngrid.fit(X_train,y_train)","d29cf45d":"grid.best_estimator_","dc8fcd08":"grid.best_params_","2ce9d612":"grid.best_score_","d1903e0f":"best_grid=grid.best_estimator_","de164ca7":"rfc_best=best_grid.fit(X_train,y_train)","28c961c8":"y_pred_rfc=best_grid.predict(X_test)","8067c22a":"Accuracy_Score_RF= accuracy_score(y_test ,y_pred_rfc)\nPrecision_Score_RF=precision_score(y_test ,y_pred_rfc)\nRecall_Score_RF=recall_score(y_test ,y_pred_rfc)","55479512":"print(\"Classification report \\n\" , classification_report (y_test ,y_pred_rfc))","748dce5b":"shallow_tree=DecisionTreeClassifier(random_state=100,max_depth=7)\ndt=shallow_tree.fit(X_train , y_train)\ny_pred_dt=dt.predict(X_test)\nprint(\"Classification report \\n\" , classification_report (y_test ,y_pred_dt))","c7a64a60":"estimator=list(range(1,100,2))\n\nabc_score=[]\n\nfor i in estimator:\n    ABC=AdaBoostClassifier(base_estimator= shallow_tree,n_estimators=i,random_state= 42)","5ad7081f":"ABC.fit(X_train,y_train)","84f52ca4":"y_abc_pred=ABC.predict(X_test)","0bfaf309":"Accuracy_Score_ABC= accuracy_score(y_test ,y_abc_pred)\nPrecision_Score_ABC=precision_score(y_test ,y_abc_pred)\nRecall_Score_ABC=recall_score(y_test ,y_abc_pred)","5c18d9a3":"print(\"Classification report \\n\" , classification_report (y_test ,y_abc_pred))","eae2d4a2":"xgb=XGBClassifier(random_state=42)","182f2bdf":"paras=({'max_depth' : [2,4,6,8,10,15,20],\n       'min_child_weight': [2,4,6,8,10],\n       'n_estimator':[10,20,50,100,200]})","eaa5def4":"grid_xgb=GridSearchCV(estimator= xgb,param_grid=paras,\n    n_jobs=-1,\n    cv=4,\n    verbose=1)","9cb9c013":"grid_xgb.fit(X_train,y_train)","4f581359":"bestgrid_xgb=grid_xgb.best_estimator_","75b11a42":"bestgrid_xgb.fit(X_train,y_train)","66bddb6b":"y_pred_xgb=bestgrid_xgb.predict(X_test)","c05f2eba":"Accuracy_Score_XGB= accuracy_score(y_test ,y_pred_xgb)\nPrecision_Score_XGB=precision_score(y_test ,y_pred_xgb)\nRecall_Score_XGB=recall_score(y_test ,y_pred_xgb)","6de0b816":"print(\"Classification report \\n\" , classification_report (y_test ,y_pred_xgb))","a2a2e041":"bestgrid_xgb.feature_importances_","d84a4dd8":"from sklearn import svm","1985043a":"SVC = svm.SVC(C=1,kernel=\"linear\")\nSVC.fit(X_train_scaled , y_train)\ny_pred_svc=SVC.predict(X_test_scaled)","ccd2a55d":"Accuracy_Score_SVC= accuracy_score(y_test ,y_pred_svc)\nPrecision_Score_SVC=precision_score(y_test ,y_pred_svc)\nRecall_Score_SVC=recall_score(y_test ,y_pred_svc)","ecdc11a7":"print(\"Classification report \\n\" , classification_report (y_test ,y_pred_svc))","97f592ea":"plot_roc_curve(clf, X_test_scaled, y_test,drop_intermediate=False)\nplt.show()","4b4170ac":"model_score=[['Logistic Regression-1' , Accuracy_Score_lg1 , Precision_Score_lg1 , Recall_Score_lg1],\n            ['Logistic Regression-2' , Accuracy_Score_lg2 , Precision_Score_lg2 , Recall_Score_lg2],\n            ['Random Forest Classifier' , Accuracy_Score_RF , Precision_Score_RF, Recall_Score_RF],\n            ['Adaboost Classifier' , Accuracy_Score_ABC , Precision_Score_ABC, Recall_Score_ABC],\n            ['XGB Classifier',Accuracy_Score_XGB , Precision_Score_XGB, Recall_Score_XGB],\n            ['Support Vector Machine Classifier' , Accuracy_Score_SVC , Precision_Score_SVC, Recall_Score_SVC]]","dba180b5":"model_score_f=pd.DataFrame(model_score, columns=['Model' , 'Accuracy' , 'Precision','Recall'])\nmodel_score_f=round(model_score_f,2)\nmodel_score_f.sort_values(by= 'Accuracy' , ascending= False)","f8c818ef":"#### AdaBoost Classifier","e4acd6f9":"### Multivariate Analysis","1fc0356c":"#### Random Forest Classifier","d40d0e8d":"#### Observation 5 - Effect of Ejection Fraction on Death Events.\n- Higher deaths observed for ejection fraction between 20% to 38%.\n- no survivals are observed for Ejection fraction less than 15%.","1c4bcef7":"#### Observation 1 - Dataset Summary\n- values of creatinine_phosphokinase , platelets show very high variance.\n- Anaemia, Diabetes, High Blood Pressure , Sex, Smoking are categorical variables converted in to binary form.","790e919e":"#### Outcome\n\n- As goal of the study is to predict mortality based on the given feature, it is important for Model to predict\ntrue deaths casued due to CVD.\n- Hence we will be primararily look for higher Precision Score.\n\n- Higher precision score is obtained through Logistic Regression model. Hence we can deploy Logistic Regression model.\n\n- Factors positively correlated with Death events are Age , High Blood Pressure and High Creatinine Level.\n- Higher deaths are observed for Male gender. \n- Higher deaths are observed for pateints who visited the doctor within 6 months, indicating severity of their disease, therefore requirement of follow up with doctor.\n- Further to this we can apply KNN to understand patient grouping and apply group specific Treatment and Lifestyle modification.","2433ea44":"#### Observation 9 - Age Group and Death Events\n- Higher deaths are observed for patients between 50 to 60 years of age.\n- Survival is lowest for patients above 90 years.","60d5c79d":"#### Logistic Regression Model 1","55d5c7e4":"#### Observation 6 - Distribution of Categorical Variables.\n- around 43% patients reported having anaemia.\n- approximately 67 % reported patients were Male. indicating higher prevalance of CVD in Male gender.\n- approximately 33% patients reported to be Smokers.\n- approximately 40% patients are diabetic.\n- approximately 33% patients reported to have High Blood Pressure.","be8d640a":"#### Observation 3 - Effect of Blood Investigation levels on Death Events.\n- Graph indicates higher death when sodium, creatinine and creatinine phosphokinase level is higher. ","925e5309":"#### Logistic Regression Model 2 - with VIF ","f74fb9a5":"#### Support Vector Machine Classifier","fc587510":"#### Observation 7 - Correlation Matrix\n- Age, Creatinine level show high postive correlation with Death events.\n- Ejection Fraction and Sodium level show inverse relation.\n- Overall matrix shows features are fairly correlated with each other.","a16b029f":"#### Observation 8 - Distribution of Follow Up Period\n- Higher percentage of follow up is observed around 4 months.\n- Since the distribution does not follow normal distribution curve, hence we will consider period wise data.","7d402aec":"### Problem Statement:\n- Cardiovascular diseases (CVDs) are the number 1 cause of death globally.\n- Taking an estimated 17.9 million lives each year, which accounts for 31% of all deaths worlwide.\n- Hence early detection of CVD is important to avoid evntual mortality.\n- Early detection can aid in treatment line, behavioural and lifestyle related changes.\n- The dataset contains 11 factors involved in progression of CVD. \n\n### Goal \n- This study aims at predicting mortality caused by Heart Failure.","0196f9c9":"#### Observation 4 - Ejection Fraction\n- 72% patients have ejection fraction between 25% to 40%. \n- 10% patients reported ejection fraction around 60 %\n- Normal Ejection fraction is between 55 to 70%","2c14f512":"#### Compiling Model Scores","6b238dd9":"### Univariate Analysis","0b34479a":"#### Observation 6 - Effect of Categorical Variables on Death Events.\n- Anaemia - death events are equal in anaemic and non anaemic patients.\n- Sex - Death events are high in Male gender as compared to Female.\n- Smoking - higher survival is observed in Non Smokers.\n- Diabetes - death events are equal in diabetic and non diabetic patients.\n- High Blood Pressure - Higher survival is observed in patients do not having high blood pressure.","95468c30":"#### Observation 2 - Distribution of Blood Investigations\n- creatinine_phosphokinase , Platelets show high outliers on upper side. \n- sodium level has normal distribution.","aadb52a9":"#### Extreme Gradient Boost - XGB Classifier","28fafe6a":"## Heart Failure Prediction","3b8aec58":"### Model Building.\n- Steps:\n    - Separating Target Variable.\n    - Train and Test Split.\n    - Fitting Classifier Model - Logistic Regression , Random Forest Classifier , \n                               - AdaBoost Classifier, XGB Classifier, Support Vector Machine Classifier.\n    - Compiling Results.\n    "}}