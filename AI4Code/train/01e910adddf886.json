{"cell_type":{"a806dc46":"code","cae72525":"code","49f84de7":"code","1922c6a0":"code","46eccb7b":"code","6f34ab26":"code","13e62e3b":"code","f949ccf1":"code","ea2f493c":"code","9f7905ff":"code","ee899683":"code","27e7079c":"code","682a2629":"code","4ad5976e":"code","c1ebb90a":"code","b1837fb3":"code","64a3a1b4":"code","5f809501":"code","40b54919":"markdown","b4b80895":"markdown","eff33311":"markdown","dc568c7c":"markdown","09f23458":"markdown"},"source":{"a806dc46":"import os\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.metrics import r2_score, mean_squared_log_error\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom matplotlib import pyplot as plt","cae72525":"input_dir = '..\/input\/house-prices-advanced-regression-techniques'\ntrain_fn = os.path.join(input_dir, 'train.csv')\ntest_fn = os.path.join(input_dir, 'test.csv')","49f84de7":"# Loading Files\ntrain = pd.read_csv(train_fn)\ntest = pd.read_csv(test_fn)","1922c6a0":"data = pd.concat([train, test], ignore_index=True)","46eccb7b":"row_count = data.shape[0]","6f34ab26":"null_val = ((data.isnull().sum() \/ row_count)*100).to_frame().reset_index()","13e62e3b":"null_val.columns = ['Column', 'Null Val']","f949ccf1":"abv_50_nan = null_val.loc[null_val['Null Val'] > 50, 'Column'].tolist()\nnull_val_cols = null_val.loc[~(null_val['Column'].isin(abv_50_nan)) & (null_val['Null Val'] > 0), 'Column'].tolist()[:-1]","ea2f493c":"for col in null_val_cols:\n    col_dtype = data[col].dtype\n    if col_dtype == 'object':\n        mode = data[col].value_counts().index[0]\n        data[col] = data[col].fillna(mode)\n    else:\n        median = data[col].median()\n        data[col] = data[col].fillna(median)","9f7905ff":"drop_cols = ['Id'] + abv_50_nan\nprocessed_data = data.drop(drop_cols, axis=1)","ee899683":"le = LabelEncoder()\nfor col in processed_data.select_dtypes('object').columns:\n    processed_data[col] = le.fit_transform(processed_data[col])","27e7079c":"new_train = processed_data[processed_data['SalePrice'].notnull()]","682a2629":"new_test = processed_data[processed_data['SalePrice'].isnull()].drop(['SalePrice'], axis=1)","4ad5976e":"X = new_train.drop('SalePrice', axis=1)\ny = new_train['SalePrice']","c1ebb90a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","b1837fb3":"model_dict = {\n    'LinearRegession': LinearRegression(),\n    'Ridge': Ridge(alpha=10.0),\n    'Lasso': Lasso(alpha=10.0),\n    'RandomForestRegressor': RandomForestRegressor(random_state=0, n_estimators=100, max_depth=4),\n    'GradientBoostingRegressor': GradientBoostingRegressor(random_state=0, n_estimators=100, max_depth=4, learning_rate=0.1),\n    'XGBRegressor': XGBRegressor(random_state=0, n_estimators=100, max_depth=4, learning_rate=0.1, subsample=0.8),\n    'LGBMRegressor': LGBMRegressor(random_state=0, n_estimators=100, max_depth=4)\n}","64a3a1b4":"data_list = list()\nfor name, model in model_dict.items():\n    data_dict = dict()\n    model.fit(X_train, y_train)\n    train_score = model.score(X_train, y_train)\n    test_score = model.score(X_test, y_test)\n    data_dict['model'] = name\n    data_dict['train_score'] = train_score\n    data_dict['test_score'] = test_score\n    data_list.append(data_dict)\nscore_df = pd.DataFrame(data_list)\nscore_df['score_diff'] = score_df['train_score'] - score_df['test_score']\nmodel_df = score_df.sort_values(['test_score'], ascending=[False])\nmodel_df[model_df['test_score'] > 0.75]","5f809501":"X = new_train.drop('SalePrice', axis=1)\ny = new_train['SalePrice']\nfor ind, m_name in enumerate(model_df['model'].tolist()):\n    model = model_dict[m_name].fit(X, y)\n    predictions = model.predict(new_test)\n    test['SalePrice'] = predictions\n    test[['Id', 'SalePrice']].to_csv('Submission{}_{}.csv'.format(ind+1, m_name), index=False)","40b54919":"## LabelEncode Categorical Columns","b4b80895":"## Model Building","eff33311":"data_list = list()\nfor val in [i for i in range(1, 11)]:\n    model = LGBMRegressor(random_state=0, max_depth=5, n_estimators=50)\n    model.fit(X_train, y_train)\n    train_score = model.score(X_train, y_train)\n    test_score = model.score(X_test, y_test)\n    data_dict = dict()\n    data_dict['Rate'] = val\n    data_dict['train_score'] = train_score\n    data_dict['test_score'] = test_score\n    data_list.append(data_dict)\n    break\n\nscore_df = pd.DataFrame(data_list)\nscore_df['score_diff'] = score_df['train_score'] - score_df['test_score']\nscore_df.sort_values(['score_diff', 'test_score'], ascending=[True, False])","dc568c7c":"## Predictions","09f23458":"## Missing Value"}}