{"cell_type":{"566bfa7a":"code","3a9064dd":"code","c501c488":"code","a6532d28":"code","1d7476b3":"code","e9f3de4b":"code","3ac76168":"code","7f893900":"code","67730f4d":"code","3eb8d505":"code","3d18b0ae":"code","93570235":"code","bbf80bd3":"code","6f59eb29":"code","09487671":"code","03eec099":"code","c0400781":"code","d547b419":"code","b6181300":"code","6e98e38f":"code","21f8a71a":"code","53fa966f":"code","4d4fa5bb":"code","67bf0899":"code","4b7448ef":"code","bd81a77d":"code","1164ca9a":"code","e2c37dbf":"code","f9d52ba5":"code","bc939218":"markdown","06cc4c6f":"markdown","812dfa0b":"markdown","eb31c080":"markdown","ca5397ed":"markdown","4a4b598d":"markdown","641d09f6":"markdown","2aca5809":"markdown","5f23cc9e":"markdown","07252a96":"markdown","f7cc17f8":"markdown","31db0d85":"markdown","0146492b":"markdown","81a25e7d":"markdown"},"source":{"566bfa7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a9064dd":"import numpy as np\nimport pandas as pd\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport fbprophet # Necessary for forecasting.","c501c488":"df = pd.read_csv('..\/input\/covid19turkey\/Covid19-Turkey.csv')","a6532d28":"#Adding number of days column.\nnumber_of_days = pd.DataFrame(np.arange(1,len(df.Date)+1,1))\na = {\"Number Of Days\": number_of_days.values}\ndf = df.assign(**a)\ndf.head()","1d7476b3":"#Adding daily deaths column.\nyesterday_deaths = 0\nDaily_deaths = []\nfor current_deaths in df['Total Deaths']:\n    if current_deaths>yesterday_deaths:\n        Daily_deaths.append(current_deaths-yesterday_deaths)\n    else :\n        Daily_deaths.append(0)\n    yesterday_deaths = current_deaths\nDaily_deaths=pd.DataFrame(Daily_deaths)\ndf['Daily Deaths'] = Daily_deaths","e9f3de4b":"#Adding daily recovered column.\nyesterday_recovered = 0\nDaily_recovered = []\nfor current_recovered in df['Total Recovered']:\n    if current_recovered>yesterday_recovered:\n        Daily_recovered.append(current_recovered-yesterday_recovered)\n    else :\n        Daily_recovered.append(0)\n    yesterday_recovered = current_recovered\nDaily_recovered=pd.DataFrame(Daily_recovered)\ndf['Daily Recovered'] = Daily_recovered","3ac76168":"sns.lineplot(x=\"Number Of Days\", y=\"Total Cases\", data = df)","7f893900":"sns.lineplot(x=\"Number Of Days\", y=\"Daily Cases\", data = df)","67730f4d":"sns.lineplot(x=\"Number Of Days\", y=\"Total Deaths\", data = df)","3eb8d505":"sns.lineplot(x=\"Number Of Days\", y=\"Daily Deaths\", data = df)","3d18b0ae":"plt.plot(df['Number Of Days'],df['Daily Test Cases'],color ='blue',label ='Daily Test Cases')\nplt.plot(df['Number Of Days'],df['Daily Cases'],color ='red',label='Daily Cases')\nplt.legend()\nplt.xlabel('Number Of Days')\nplt.ylabel('Value')","93570235":"plt.plot(df['Number Of Days'],df['Daily Recovered'],color ='blue',label ='Daily Recovered')\nplt.plot(df['Number Of Days'],df['Daily Cases'],color ='red',label='Daily Cases')\nplt.plot(df['Number Of Days'],df['Total Cases'],color ='green',label ='Total Cases')\nplt.legend()\nplt.xlabel('Number Of Days')\nplt.ylabel('Value')","bbf80bd3":"tc=df['Total Cases']\nnod=df['Number Of Days']\ndate = df[\"Date\"]\ndate = date.str.replace(\"\/\",\"-\")\ntc_nod = pd.DataFrame({\"Total Cases\": tc,\"Date\": date})\ntd=df['Total Deaths']\ntd_nod = pd.DataFrame({\"Total Deaths\": td,\"Date\": date})\ntr=df['Total Recovered']\ntr_nod = pd.DataFrame({\"Total Recovered\": tr,\"Date\": date})\ndc=df['Daily Cases']\ndc=pd.DataFrame({\"Daily Cases\": dc,\"Date\": date})","6f59eb29":"tc_nod = tc_nod.rename(columns={'Date': 'ds', 'Total Cases': 'y'})\nfbp1 = fbprophet.Prophet()\nfbp1.fit(tc_nod)","09487671":"future1 = fbp1.make_future_dataframe(periods=30,freq=\"M\")\nfuture1.tail()","03eec099":"forecast1 = fbp1.predict(future1)\nforecast1[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","c0400781":"fig1 = fbp1.plot(forecast1)\nplt.xlabel('Days')\nplt.ylabel('Total Cases')\nplt.ticklabel_format(style='plain', axis='y')","d547b419":"td_nod = td_nod.rename(columns={'Date': 'ds', 'Total Deaths': 'y'})\nfbp2 = fbprophet.Prophet()\nfbp2.fit(td_nod)","b6181300":"future2 = fbp2.make_future_dataframe(periods=30,freq=\"M\")\nfuture2.tail()","6e98e38f":"forecast2 = fbp2.predict(future2)\nforecast2[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","21f8a71a":"fig2 = fbp2.plot(forecast2)\nplt.xlabel('Date')\nplt.ylabel('Total Deaths')\nplt.ticklabel_format(style='plain', axis='y')","53fa966f":"tr_nod = tr_nod.rename(columns={'Date': 'ds', 'Total Recovered': 'y'})\nfbp3 = fbprophet.Prophet()\nfbp3.fit(tr_nod)","4d4fa5bb":"future3 = fbp3.make_future_dataframe(periods=30,freq=\"M\")\nfuture3.tail()","67bf0899":"forecast3 = fbp3.predict(future3)\nforecast3[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","4b7448ef":"fig3 = fbp3.plot(forecast3)\nplt.xlabel('Days')\nplt.ylabel('Total Recovered')\nplt.ticklabel_format(style='plain', axis='y')","bd81a77d":"dc = dc.rename(columns={'Date': 'ds', 'Daily Cases': 'y'})\nfbp4 = fbprophet.Prophet()\nfbp4.fit(dc)","1164ca9a":"future4 = fbp4.make_future_dataframe(periods=100,freq=\"D\")\nfuture4.tail()","e2c37dbf":"forecast4 = fbp4.predict(future4)\nforecast4[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","f9d52ba5":"fig4 = fbp4.plot(forecast4)\nplt.xlabel('Days')\nplt.ylabel('Daily Cases')","bc939218":"# Reading Dataset and Adding Some Necessary Columns","06cc4c6f":"**Total Cases, Daily Case, and Daily Recovered by Days**","812dfa0b":"# Visualization","eb31c080":"**Total Cases by Days**","ca5397ed":"**Daily Cases by Days**","4a4b598d":"**Total Deaths by Days**","641d09f6":"**Total Deaths Forecasting**","2aca5809":"**Total Test Cases and Daily Cases by Days**","5f23cc9e":"**Daily Deaths by Days**","07252a96":"**Making Some New DataFrames from Dataset for Forecasting**","f7cc17f8":"# Forecasting","31db0d85":"**Total Cases Forecasting**","0146492b":"**Daily Cases Forecasting**","81a25e7d":"**Total Recovered Forecasting**"}}