{"cell_type":{"ed1e43d3":"code","d1f3656e":"code","555b2217":"code","ed188844":"code","d7c89a36":"code","dc03de9a":"code","05653b1a":"code","120ee6ac":"code","0e888bc1":"code","c23a82ab":"code","d081e26b":"code","dc377342":"code","0e306a45":"code","233b1d4a":"code","ad13bee2":"code","7f144ea1":"code","12a170cc":"code","47339224":"code","899a7e5d":"code","df287fa1":"code","19fa97e3":"code","6a2085e8":"code","264560c5":"code","65d7cda6":"code","acee6e22":"code","02405c6e":"code","b786d0d4":"code","bc39b27d":"code","3dcf5d79":"code","d426b4ca":"code","743dbaf2":"code","159e53bb":"code","4183f266":"code","969fefb1":"code","7079c387":"code","80afd814":"code","ce54c03d":"code","e1f72e92":"code","96c9689b":"code","5ee1c4b9":"code","6cab5981":"code","29a4bfe7":"code","7397bcf1":"code","92e31926":"code","eaa7b7e0":"code","617e5411":"code","8c03497d":"code","01ccd008":"markdown","96ca1919":"markdown","2fe2e810":"markdown","3ed26f53":"markdown","89bec7a9":"markdown","a4c687a6":"markdown","93f8d58d":"markdown","178af760":"markdown","19571789":"markdown","0b8a5e7f":"markdown","8fc652d2":"markdown","10917cf7":"markdown","873e68ef":"markdown","f926b2ea":"markdown","7765fb32":"markdown","ca3710a3":"markdown"},"source":{"ed1e43d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d1f3656e":"import pandas as pd\nfrom datetime import date\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport missingno as msno\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, \\\n    roc_auc_score, confusion_matrix, classification_report, plot_roc_curve\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.simplefilter(action = \"ignore\")\n","555b2217":"def load():\n    data = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\n    return data\ndf = load()","ed188844":"print(\"##################### Shape #####################\")\nprint(df.shape)\nprint(\"##################### Types #####################\")\nprint(df.dtypes)\nprint(\"##################### Head #####################\")\nprint(df.head())\nprint(\"##################### Tail #####################\")\nprint(df.tail())\nprint(\"##################### NA #####################\")\nprint(df.isnull().sum())\nprint(\"##################### Describe ##############\")\nprint(df.describe([0.10,0.25,0.50,0.75,0.90,0.95,0.99]).T)","d7c89a36":"# Hedef de\u011fi\u015fken de\u011ferleri \ndf[\"Outcome\"].value_counts()","dc03de9a":"print(100 * df[\"Outcome\"].value_counts() \/ len(df))","05653b1a":"#Say\u0131sal ve Ayn\u0131 Zamanda KAtegorik olmayan De\u011fi\u015fkenleri Yakal\u0131yoruz\nnum_cols = [col for col in df.columns if df[col].dtypes != \"O\"]\nnum_but_cat = [col for col in df.columns if df[col].nunique() < 10 and df[col].dtypes != \"O\"]\nnum_cols = [col for col in num_cols if col not in num_but_cat]\nnum_cols","120ee6ac":"# Say\u0131sal De\u011fi\u015fkenler i\u00e7in Histogram Grafikleri \nfig, ax = plt.subplots(4,2, figsize=(16,16))\nsns.distplot(df.Age, bins = 20, ax=ax[0,0]) \nsns.distplot(df.Pregnancies, bins = 20, ax=ax[0,1]) \nsns.distplot(df.Glucose, bins = 20, ax=ax[1,0]) \nsns.distplot(df.BloodPressure, bins = 20, ax=ax[1,1]) \nsns.distplot(df.SkinThickness, bins = 20, ax=ax[2,0])\nsns.distplot(df.Insulin, bins = 20, ax=ax[2,1])\nsns.distplot(df.DiabetesPedigreeFunction, bins = 20, ax=ax[3,0]) \nsns.distplot(df.BMI, bins = 20, ax=ax[3,1]) ","0e888bc1":"# De\u011fi\u015fkenlerin Hedef De\u011fi\u015fkenin 0 ve 1 olma Durumuna G\u00f6re Ortalamalar\u0131 \nfor col in num_cols:\n    print(df.groupby(\"Outcome\").agg({col: \"mean\"}), end = \"\\n\\n\")","c23a82ab":"# De\u011fi\u015fkenlerin Birbirleri Aras\u0131 Korelasyonu\ncorr = df.corr()\nsns.heatmap(corr)\nplt.show()","d081e26b":"# Eksik De\u011ferler \ndf.isnull().sum()","dc377342":"# 0 de\u011ferlerinin NA de\u011ferlere d\u00f6n\u00fc\u015ft\u00fcr\u00fclmesi \nzero_columns = [\"Glucose\",\"BloodPressure\",\"Insulin\",\"BMI\",\"SkinThickness\"]\nfor col in zero_columns:\n    df[col] = np.where(df[col] == 0, np.nan, df[col])","0e306a45":"# Eksik De\u011ferler \ndf.isnull().sum()","233b1d4a":"msno.matrix(df)\n\nplt.show()","ad13bee2":"# Olu\u015fturdu\u011fumuz NA de\u011ferlere meadian atamas\u0131 yap\u0131yoruz. \nfor col in num_cols:\n    df[(df[\"Outcome\"] == 0) & (df[col].isnull() == True)] = df[(df[\"Outcome\"] == 0) & (df[col].isnull() == True)].fillna(df[df[\"Outcome\"] == 0].median())\n    df[(df[\"Outcome\"] == 1) & (df[col].isnull() == True)] = df[(df[\"Outcome\"] == 1) & (df[col].isnull() == True)].fillna(df[df[\"Outcome\"] == 1].median())\n","7f144ea1":"# Eksik De\u011ferler ve Betimsel \u0130statistikler \ndf.isnull().sum()\n","12a170cc":"df.describe().T","47339224":"\nfor col in num_cols:   \n    q1 = df[col].quantile(0.25)\n    q3 = df[col].quantile(0.75)\n    iqr = q3 - q1\n    up_limit = q3 + 1.5 * iqr\n    low_limit = q1 - 1.5 * iqr\n    if df[df[col] > up_limit].any(axis=None):\n        print(col,\"YES\",(low_limit,up_limit))\n    elif df[df[col] < low_limit].any(axis=None):\n        print(col,\"YES\",(low_limit,up_limit))\n    else: \n        print(col,\"NO\",(low_limit,up_limit))\n        ","899a7e5d":"# Replace with Thresholds\nfor col in num_cols:\n    q1 = df[col].quantile(0.25)\n    q3 = df[col].quantile(0.75)\n    iqr = q3 - q1\n    up_limit = q3 + 1.5 * iqr\n    low_limit = q1 - 1.5 * iqr\n    df.loc[(df[col] < low_limit), col] = low_limit\n    df.loc[(df[col] > up_limit), col] = up_limit\n    if df[df[col] > up_limit].any(axis=None):\n        print(col,\"YES\",(low_limit,up_limit))\n    elif df[df[col] < low_limit].any(axis=None):\n        print(col,\"YES\",(low_limit,up_limit))\n    else: \n        print(col,\"NO\",(low_limit,up_limit))","df287fa1":"df.describe().T","19fa97e3":"def fea_eng(df):\n    df[\"INPEDIGREE\"] = df[\"Insulin\"] * df[\"DiabetesPedigreeFunction\"]\n    df[\"SKINBMI\"] = df[\"SkinThickness\"] * df[\"BMI\"]\n\n    df.loc[(df[\"BloodPressure\"] > 60) & (df[\"BloodPressure\"] <= 80),\"NEW_BP_CAT\"]= \"Ideal\"\n    df.loc[(df[\"BloodPressure\"] > 80) & (df[\"BloodPressure\"] < 90),\"NEW_BP_CAT\"]= \"NormalBP\"\n    df.loc[(df[\"BloodPressure\"] >= 90) & (df[\"BloodPressure\"] < 120),\"NEW_BP_CAT\"]= \"Hyper\"\n    df.loc[(df[\"BloodPressure\"] >= 120),\"NEW_BP_CAT\"]= \"Hypertensive crisis\"\n    df.loc[(df[\"BloodPressure\"] <= 60),\"NEW_BP_CAT\"]= \"Hypo\"\n\n    df.loc[(df[\"Pregnancies\"] == 0) ,\"NEW_P_CAT\"]= \"No_Child\"\n    df.loc[(df[\"Pregnancies\"] > 0) & (df[\"Pregnancies\"] <= 3 ),\"NEW_P_CAT\"]= \"Child_03\"\n    df.loc[(df[\"Pregnancies\"] > 3) & (df[\"Pregnancies\"] <= 6 ),\"NEW_P_CAT\"]= \"Child_36\"\n    df.loc[(df[\"Pregnancies\"] > 6) ,\"NEW_P_CAT\"]= \"Too_much\"\n\n    df.loc[(df[\"BMI\"] < 18.5) ,\"NEW_BMI_CAT\"]= \"UnderWeight\"\n    df.loc[(df[\"BMI\"] >= 18.5) & (df[\"BMI\"] <= 24.9 ),\"NEW_BMI_CAT\"]= \"NormalBMI\"\n    df.loc[(df[\"BMI\"] >= 25) & (df[\"BMI\"] <= 30 ),\"NEW_BMI_CAT\"]= \"Overweight\"\n    df.loc[(df[\"BMI\"] > 30) & (df[\"BMI\"] <= 35 ),\"NEW_BMI_CAT\"]= \"Type1_Obese\"\n    df.loc[(df[\"BMI\"] > 35) & (df[\"BMI\"] <= 40 ),\"NEW_BMI_CAT\"]= \"Type2_Obese\"\n    df.loc[(df[\"BMI\"] > 40) ,\"NEW_BMI_CAT\"]= \"Morbid_Obese\"\n\n    df.loc[(df[\"Insulin\"] < 70) ,\"NEW_I_CAT\"]= \"Hypoglycemia\"\n    df.loc[(df[\"Insulin\"] >= 70) & (df[\"Insulin\"] < 100 ),\"NEW_I_CAT\"]= \"NormalI\"\n    df.loc[(df[\"Insulin\"] >= 100) & (df[\"Insulin\"] <= 125 ),\"NEW_I_CAT\"]= \"PrediabetityI\"\n    df.loc[(df[\"Insulin\"] >= 126) ,\"NEW_I_CAT\"]= \"DiabetesI\"\n\n    df.loc[(df[\"Glucose\"] < 100) ,\"NEW_G_CAT\"]= \"Lower\"\n    df.loc[(df[\"Glucose\"] >= 100) & (df[\"Glucose\"] < 140 ),\"NEW_G_CAT\"]= \"NormalG\"\n    df.loc[(df[\"Glucose\"] >= 140) & (df[\"Glucose\"] <= 199 ),\"NEW_G_CAT\"]= \"PrediabetityG\"\n    df.loc[(df[\"Glucose\"] >= 200) ,\"NEW_G_CAT\"]= \"DiabetesG\"\n\n    df.loc[(df[\"Age\"] < 30) ,\"NEW_AGE_CAT\"]= \"Young\"\n    df.loc[(df[\"Age\"] >= 30) & (df[\"Age\"] < 40 ),\"NEW_AGE_CAT\"]= \"Middle\"\n    df.loc[(df[\"Age\"] >= 40) & (df[\"Age\"] < 50 ),\"NEW_AGE_CAT\"]= \"Old\"\n    df.loc[(df[\"Age\"] >= 50) ,\"NEW_AGE_CAT\"]= \"Elder\"\n    return df","6a2085e8":"df = fea_eng(df)","264560c5":"df.columns = [col.upper() for col in df.columns]","65d7cda6":"# Feature Engineering sonucunda olu\u015fan eksik de\u011fer var m\u0131? Kontrol edelim.\ndf.isnull().sum()","acee6e22":"# Feature Engineering Sonras\u0131 De\u011fi\u015fken Tutma \u0130\u015flemini Tekrarlamal\u0131y\u0131z\nnum_cols = [col for col in df.columns if df[col].dtypes != \"O\"]\nnum_but_cat = [col for col in df.columns if df[col].nunique() < 10 and df[col].dtypes != \"O\"]\nnum_cols = [col for col in num_cols if col not in num_but_cat]\nnum_cols","02405c6e":"# Kategorik De\u011fi\u015fkenler Olu\u015fturdu\u011fumuz i\u00e7in Onlar\u0131 da Yakal\u0131yoruz.\ncat_cols = [col for col in df.columns if df[col].dtypes == \"O\"]\ncat_cols = cat_cols + num_but_cat\ncat_cols","b786d0d4":"binary_col = [col for col in df.columns if\n                  df[col].dtype not in [int, float] and df[col].nunique() == 2]\nfor col in binary_col:\n    labelencoder = LabelEncoder()\n    df[col] = labelencoder.fit_transform(df[col])","bc39b27d":"ohe_cols = [col for col in df.columns if 10 >= df[col].nunique() > 2]\ndf = pd.get_dummies(df, columns=ohe_cols, drop_first = True)","3dcf5d79":"for col in num_cols:\n    transformer = RobustScaler().fit(df[[col]])\n    df[col] = transformer.transform(df[[col]])","d426b4ca":"y = df[\"OUTCOME\"]\nX = df.drop([\"OUTCOME\"], axis=1)\n","743dbaf2":"X_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.20, random_state=1)","159e53bb":"log_model = LogisticRegression().fit(X_train, y_train)\nlog_model.intercept_\n","4183f266":"log_model.coef_","969fefb1":"# Tahmin'lerin olu\u015fturulmas\u0131 ve kaydedilmesi\ny_pred = log_model.predict(X_train)\ny_pred[0:10]","7079c387":"y_train[0:10]","80afd814":"# S\u0131n\u0131f olas\u0131l\u0131klar\u0131 (0. indextekiler 0 a ait olma 1. indekstekiler 1 s\u0131n\u0131f\u0131na ait olma)\nlog_model.predict_proba(X_train)[0:10]","ce54c03d":"# 1. s\u0131n\u0131fa ait olma olas\u0131l\u0131klar\u0131:\ny_prob = log_model.predict_proba(X_train)[:, 1]","e1f72e92":"# Train Accuracy\ny_pred = log_model.predict(X_train)\naccuracy_score(y_train, y_pred)","96c9689b":"# Test\n# AUC Score i\u00e7in y_prob\ny_prob = log_model.predict_proba(X_test)[:, 1]","5ee1c4b9":"# Di\u011fer metrikler i\u00e7in y_pred\ny_pred = log_model.predict(X_test)","6cab5981":"# ACCURACY\naccuracy_score(y_test, y_pred)   ","29a4bfe7":"# PRECISION\nprecision_score(y_test, y_pred)","7397bcf1":"# RECALL\nrecall_score(y_test, y_pred)","92e31926":"# F1\nf1_score(y_test, y_pred)","eaa7b7e0":"# Roc E\u011frisi\nplot_roc_curve(log_model, X_test, y_test)\nplt.title('ROC Curve')\nplt.plot([0, 1], [0, 1], 'r--')\nplt.show()","617e5411":"# AUC\nroc_auc_score(y_test, y_prob)","8c03497d":"# Modeli olu\u015fturdu\u011fumuz de\u011fi\u015fkenlerin etki d\u00fczeylerini g\u00f6steren feature importance grafi\u011fini olu\u015fturuyoruz.\nimport math as mt\nfeature_importance = pd.DataFrame(X_train.columns, columns = [\"feature\"])\nfeature_importance[\"importance\"] = pow(mt.e, log_model.coef_[0])\nfeature_importance = feature_importance.sort_values(by = [\"importance\"], ascending=False)\nax = feature_importance.plot.barh(x='feature', y='importance', figsize=(15,10), fontsize=10)\nplt.xlabel('Importance', fontsize=20)\nplt.ylabel('Features', fontsize=10)\n# plt.yticks(rotation=50)\nplt.show()","01ccd008":"# 1) Ke\u015fif\u00e7i Veri Analizi (EDA)","96ca1919":"# 5) Model ve Final ","2fe2e810":"Umar\u0131m faydal\u0131 olmu\u015ftur. Konu ile ilgili yazd\u0131\u011f\u0131m medium yaz\u0131s\u0131na a\u015fa\u011f\u0131daki linkten ula\u015fabilirsiniz. \n\nhttps:\/\/kutlucagdas.medium.com\/ad%C4%B1m-ad%C4%B1m-%C3%B6zellik-m%C3%BChendisli%C4%9Fi-8cf4fa0e5f81","3ed26f53":"# 4) Encoding and Scale","89bec7a9":"# 4.2) One-Hot Encoding","a4c687a6":"# 2) Veri \u00d6n \u0130\u015fleme (Data Preprocessing)","93f8d58d":"# 2.2) Ayk\u0131r\u0131 De\u011ferler (Outliers)\n","178af760":"# Final Ba\u015far\u0131 De\u011felendirme ","19571789":"# Diabetes Prediction with Logistic Regression  \nVeri seti ABD'deki Ulusal Diyabet-Sindirim-B\u00f6brek Hastal\u0131klar\u0131 Enstit\u00fcleri'nde tutulan b\u00fcy\u00fck veri setinin par\u00e7as\u0131d\u0131r.\n\nABD'deki Arizona Eyaleti'nin en b\u00fcy\u00fck 5. \u015fehri olan Phoenix \u015fehrinde ya\u015fayan 21 ya\u015f ve \u00fczerinde olan Pima Indian kad\u0131nlar\u0131 \u00fczerinde yap\u0131lan diyabet ara\u015ft\u0131rmas\u0131 i\u00e7in kullan\u0131lan verilerdir.\n\n**De\u011fi\u015fkenler**\n\n**Pregnancies** \u2013 Hamilelik say\u0131s\u0131\n\n**Glucose** \u2013 Kandaki gukoz de\u011feri\n-Oral glikoz tolerans testinde 2 saatlik plazma glikoz konsantrasyonu\n\n**SkinThickness** \u2013 Cilt Kal\u0131nl\u0131\u011f\u0131\n\n**BMI** \u2013 V\u00fccut Kitle Endeksi\n\n**Insulin** \u2013 2 saatlik serum ins\u00fclini (mu U\/ml)\n\n**Blood Pressure** \u2013 Kan Bas\u0131nc\u0131 (K\u00fc\u00e7\u00fck tansiyon) (mm Hg)\n\n**DiabetesPedigreeFunction**: \u2013 Fonksiyon\n-Oral glikoz tolerans testinde 2 saatlik plazma glikoz konsantrasyonu\n\n**Age** \u2013 Ya\u015f (y\u0131l)\n\n**Outcome** \u2013 Hastal\u0131\u011fa sahip (1) ya da de\u011fil (0)\n\n","0b8a5e7f":"# 3) \u00d6zellik M\u00fchendisli\u011fi(Feature Engineering)","8fc652d2":"# 4.1) Label Encoding","10917cf7":"# Gerekli Import \u0130\u015flemleri","873e68ef":"# 2.1) Eksik De\u011ferler (Missing Values)","f926b2ea":"# 4.3) Robust Scaler","7765fb32":"Veri setinde her ne kadar NA de\u011fer g\u00f6zlemlenmiyor olsa da de\u011fi\u015fkenlerin \u00e7o\u011funda s\u0131f\u0131r de\u011feri bol miktarda g\u00f6zlemlenmektedir. \"min\" ve \"quantile\" de\u011ferlerini g\u00f6zlemleyecek olursak; SkinThickness, BMI ve Insulin gibi de\u011fi\u015fkenlerde s\u0131f\u0131r de\u011ferinin a\u011f\u0131rl\u0131\u011f\u0131n\u0131 g\u00f6zlemleyebiliriz. \u0130nsan v\u00fccudu i\u00e7in imkans\u0131za yak\u0131n bir durum oldu\u011fu i\u00e7in biz s\u0131f\u0131r de\u011ferlerine ilerleyen s\u00fcre\u00e7lerde NA muamelesi yapaca\u011f\u0131z ","ca3710a3":"# Data"}}