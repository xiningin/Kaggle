{"cell_type":{"43d6960b":"code","e86ad086":"code","5f864374":"code","b2baa462":"code","61d18d85":"code","ebaae321":"code","8b5cc163":"code","bb6abb51":"code","dc467854":"code","81fa6694":"code","890a2a1f":"code","16fd50ac":"code","51c8abc9":"code","9bfac98b":"code","aeba745e":"code","8d878b5c":"code","c8f96a27":"code","e765c62d":"code","95b1117c":"code","5daee009":"code","82ec15e3":"code","26ad94df":"code","9bc8320a":"code","707cb957":"code","e078c99e":"code","d6e67c24":"code","4d11cfc2":"code","8021c11f":"code","cf9a5a86":"markdown","0e280fe9":"markdown","f0c5b5c0":"markdown","df3c5e0e":"markdown","2e09c8c4":"markdown","1c518396":"markdown","5bc19030":"markdown","40158af1":"markdown","da8a0ef8":"markdown","8d38e60f":"markdown","6465bc47":"markdown"},"source":{"43d6960b":"import numpy as np\nimport pandas as pd\nfrom pandas import Series, DataFrame # Libraries to work the data\n\nimport matplotlib.pyplot as plt # Libraries for data visualization\nfrom matplotlib import rcParams","e86ad086":"all_energy = pd.read_csv('..\/input\/d\/marianacondeo\/all-energy-statistics\/all_energy_statistics.csv')\n# SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \\UXXXXXXXX escape was appearing \n# and was solved by using the double \\\\, the reason must be because first backslash in your string is being interpreted as a special character\n# Source of the resolution : https:\/\/stackoverflow.com\/questions\/37400974\/unicode-error-unicodeescape-codec-cant-decode-bytes-in-position-2-3-trunca\n\n#all_energy.head()\n#print(all_energy[250:350])\n#print(all_energy[7500:7550]) \n#all_energy.describe()\n#all_energy.shape\n#all_energy.describe(include=['object']) -> Counts the rows and columns of all the dataframe\n#all_energy[all_energy.country_or_area.str.contains(\"Germany\")] #-> Counts the rows and columns for the specified region\n","5f864374":"all_energy_1= all_energy.drop([\"quantity_footnotes\"], axis=1 )\n\nall_energy_1.head()","b2baa462":"all_energy_EU = all_energy_1[(all_energy_1.values  == \"Germany\")\n                             |(all_energy_1.values  == \"Austria\" )\n                             |(all_energy_1.values  == \"Belgium\" )\n                             |(all_energy_1.values  == \"Czech Republic\" )\n                             |(all_energy_1.values  == \"Bulgaria\" )\n                             |(all_energy_1.values  == \"Cyprus\" )\n                             |(all_energy_1.values  == \"Croatia\" )\n                             |(all_energy_1.values  == \"Denmark\" )\n                             |(all_energy_1.values  == \"Slovakia\" )\n                            |(all_energy_1.values  == \"Slovenia\" )\n                            |(all_energy_1.values  == \"Spain\" )\n                            |(all_energy_1.values  == \"Estonia\" )\n                            |(all_energy_1.values  == \"Finland\" )\n                            |(all_energy_1.values  == \"France\" )\n                            |(all_energy_1.values  == \"Greece\" )\n                            |(all_energy_1.values  == \"Hungary\" )\n                            |(all_energy_1.values  == \"Ireland\" )\n                            |(all_energy_1.values  == \"Italy\" )\n                            |(all_energy_1.values  == \"Latvia\" )\n                            |(all_energy_1.values  == \"Lithuania\" )\n                            |(all_energy_1.values  == \"Luxembourg\" )\n                            |(all_energy_1.values  == \"Malta\") \n                             |(all_energy_1.values  == \"Holand\" )\n                            |(all_energy_1.values  == \"Poland\" )\n                            |(all_energy_1.values  == \"Portugal\" )\n                            |(all_energy_1.values  == \"Romania\" )\n                            |(all_energy_1.values  == \"Sweden\" )]\n\n\n#all_energy_EU.describe(include=['object'])\n#all_energy_EU[all_energy_EU.country_or_area.str.contains(\"Luxemburg\")].describe(include='object')","61d18d85":"#pd.value_counts(all_energy_EU.country_or_area)\nEU_member = pd.unique(all_energy_EU['country_or_area'])\nprint(EU_member)\ncount = np.count_nonzero(EU_member)\nprint(count)","ebaae321":"all_energy_EU_corrected = all_energy_1[(all_energy_1.values  == \"Germany\")\n                             |(all_energy_1.values  == \"Austria\" )\n                             |(all_energy_1.values  == \"Belgium\" )\n                             |(all_energy_1.values  == \"Czechia\" )\n                             |(all_energy_1.values  == \"Bulgaria\" )\n                             |(all_energy_1.values  == \"Cyprus\" )\n                             |(all_energy_1.values  == \"Croatia\" )\n                             |(all_energy_1.values  == \"Denmark\" )\n                             |(all_energy_1.values  == \"Slovakia\" )\n                            |(all_energy_1.values  == \"Slovenia\" )\n                            |(all_energy_1.values  == \"Spain\" )\n                            |(all_energy_1.values  == \"Estonia\" )\n                            |(all_energy_1.values  == \"Finland\" )\n                            |(all_energy_1.values  == \"France\" )\n                            |(all_energy_1.values  == \"Greece\" )\n                            |(all_energy_1.values  == \"Hungary\" )\n                            |(all_energy_1.values  == \"Ireland\" )\n                            |(all_energy_1.values  == \"Italy\" )\n                            |(all_energy_1.values  == \"Latvia\" )\n                            |(all_energy_1.values  == \"Lithuania\" )\n                            |(all_energy_1.values  == \"Luxembourg\" )\n                            |(all_energy_1.values  == \"Malta\") \n                             |(all_energy_1.values  == \"Netherlands\" )\n                            |(all_energy_1.values  == \"Poland\" )\n                            |(all_energy_1.values  == \"Portugal\" )\n                            |(all_energy_1.values  == \"Romania\" )\n                            |(all_energy_1.values  == \"Sweden\" )]","8b5cc163":"EU_member_corrected = pd.unique(all_energy_EU_corrected['country_or_area'])\nprint(EU_member_corrected)\ncount_corrected = np.count_nonzero(EU_member_corrected)\nprint(count_corrected)","bb6abb51":"all_energy_EU_corrected.to_csv('C:\\\\Users\\\\maria\\\\Documents\\\\Training\\\\Data Science Portfolio\\\\Exploratory Data Analysis (EDA)\\\\International Energy Statistics\\\\all_energy_EU_corrected.csv')","dc467854":"variables_available= pd.unique(all_energy_EU_corrected['commodity_transaction'])\nprint(variables_available)\nprint(np.count_nonzero(variables_available))","81fa6694":"Geothermal = all_energy_EU_corrected [all_energy_EU_corrected.commodity_transaction == \"Electricity - total geothermal production\"].sort_values(\"year\")\n\n#Geothermal.shape\n#Geothermal.head()\nGeothermal.head()","890a2a1f":"Hydro = all_energy_EU_corrected [all_energy_EU_corrected.commodity_transaction == \"Electricity - total hydro production\"].sort_values(\"year\")\n\nHydro.head()\nHydro.shape","16fd50ac":"Nuclear = all_energy_EU_corrected [all_energy_EU_corrected.commodity_transaction == \"Electricity - total nuclear production\"].sort_values(\"year\")\n\n\nNuclear.head()\nNuclear.shape","51c8abc9":"Solar = all_energy_EU_corrected [all_energy_EU_corrected.commodity_transaction == \"Electricity - total solar production\"].sort_values(\"year\")\n\n\nSolar.head()\n#Solar.shape","9bfac98b":"Thermal = all_energy_EU_corrected [all_energy_EU_corrected.commodity_transaction == \"Electricity - total thermal production\"].sort_values(\"year\")\n\n\nThermal.head()\nThermal.shape","aeba745e":"Tide_wave = all_energy_EU_corrected [all_energy_EU_corrected.commodity_transaction == \"Electricity - total tide, wave production\"].sort_values(\"year\")\n\n\nTide_wave.head()\nTide_wave.shape","8d878b5c":"Wind = all_energy_EU_corrected [all_energy_EU_corrected.commodity_transaction == \"Electricity - total wind production\"].sort_values(\"year\")\n\n\nWind.head()\nWind.shape","c8f96a27":"Gross_demand = all_energy_EU_corrected [all_energy_EU_corrected.commodity_transaction == \"Electricity - Gross demand\"].sort_values(\"year\")\n\n\nGross_demand.head()\nGross_demand.shape","e765c62d":"Gross_production = all_energy_EU_corrected [all_energy_EU_corrected.commodity_transaction == \"Electricity - Gross production\"].sort_values(\"year\")\n\n\nGross_production.head()\n#Gross_production.shape\n\n#Note for future improvement : the dataset definition for each renewable source should have been done differently\n# as it is right now the only way I could plot it was by year and by source. In the future I must re-do this\n# with a different dataset organization to allow me to plot the evolution of each source by country and by \n# year in a line graph. ","95b1117c":"Geothermal_annual = Geothermal[['year', 'quantity']]\n#Geothermal_annual.isnull().sum()\nGeothermal_annual.describe\n#print(Geothermal_annual)","5daee009":"rcParams['figure.figsize'] = 10, 8\n\nx=Geothermal_annual.year\ny=Geothermal_annual.quantity\ncolor=['orange']\n\nplt.title('Evolution of electricity production from Geothermal sources for EU countries from 1990 to 2014')\nplt.xlabel('Year')\nplt.ylabel('Electricity produced by Geothermal Energy [Milion kW.h]', labelpad =12)\nplt.xlim([1989,2015])\nplt.grid()\nplt.bar(x,y, width=0.6,color=color,align='center')","82ec15e3":"Hydro_annual = Hydro[['year', 'quantity']]\n#Hydro_annual.isnull().sum()\nHydro_annual.describe\n#Hydro_annual.shape\n#print(Hydro_annual)","26ad94df":"rcParams['figure.figsize'] = 10, 8\n\nx=Hydro_annual.year\ny=Hydro_annual.quantity\ncolor=['blue']\n\nplt.title('Evolution of electricity production from Hydro sources for EU countries from 1990 to 2014')\nplt.xlabel('Year')\nplt.ylabel('Electricity produced by Hydro Energy [Milion kW.h]', labelpad =12)\nplt.xlim([1989,2015])\nplt.grid()\nplt.bar(x,y, width=0.6,color=color,align='center')","9bc8320a":"Nuclear_annual = Nuclear[['year', 'quantity']]\nNuclear_annual.isnull().sum()\nNuclear_annual.describe\n#Nuclear_annual.shape\n#print(Nuclear_annual)","707cb957":"rcParams['figure.figsize'] = 10, 8\n\nx=Nuclear_annual.year\ny=Nuclear_annual.quantity\ncolor=['grey']\n\nplt.title('Evolution of electricity production from Nuclear sources for EU countries from 1990 to 2014')\nplt.xlabel('Year')\nplt.ylabel('Electricity produced by Nuclear Energy [Milion kW.h]', labelpad =12)\nplt.xlim([1989,2015])\nplt.grid()\nplt.bar(x,y, width=0.6,color=color,align='center')","e078c99e":"Solar_annual = Solar[['year', 'quantity']]\n#Solar_annual.isnull().sum()\n#Solar_annual.describe\n#Solar_annual.shape\nprint(Solar_annual)","d6e67c24":"rcParams['figure.figsize'] = 10, 8\n\nx=Solar_annual.year\ny=Solar_annual.quantity\ncolor=['khaki']\n\nplt.title('Evolution of electricity production from Solar sources for EU countries from 1990 to 2014')\nplt.xlabel('Year')\nplt.ylabel('Electricity produced by Solar Energy [Milion kW.h]', labelpad =12)\nplt.xlim([1989,2015])\nplt.grid()\nplt.bar(x,y, width=0.6,color=color,align='center')","4d11cfc2":"Thermal_annual = Thermal[['year', 'quantity']]\n#Thermal_annual.isnull().sum()\n#Thermal_annual.describe\n#Thermal_annual.shape\nprint(Thermal_annual)","8021c11f":"rcParams['figure.figsize'] = 10, 8\n\nx=Thermal_annual.year\ny=Thermal_annual.quantity\ncolor=['darkgoldenrod']\n\nplt.title('Evolution of electricity production from Thermal sources for EU countries from 1990 to 2014')\nplt.xlabel('Year')\nplt.ylabel('Electricity produced by Thermal Energy [Milion kW.h]', labelpad =12)\nplt.xlim([1989,2015])\nplt.grid()\nplt.bar(x,y, width=0.6,color=color,align='center')","cf9a5a86":"# Importing the dataset from the csv file and checking the dataset format","0e280fe9":"# Dataframe analysis and graph definition","f0c5b5c0":"# Introduction","df3c5e0e":"#  **European Union Electricity Production from Renewable Sources**","2e09c8c4":"Now new dataframes will be created to group each of the variables that later will be ploted. The goal is to plot the total EU production\/ demand by year of each of the following variables: \n* Total electricity geothermal production \n* Total electricity hydro production \n* Total electricity nuclear production \n* Total electricity solar production \n* Total electricity thermal production \n* Total electricity tide, wave production \n* Total electricity wind production \n* Electricity Gross production \n* Electricity Gross demand","1c518396":"# Creating the EU dataset with the 27 countries","5bc19030":"# Importing the necessary Libraries","40158af1":"The current environmental crisis mankind is facing created an urgent need for change in the ways electricity is produced worldwide. The Kyoto protocol, in September 1997, joined 192 countries that agreed on promoting the use of renewable energy sources for electricity production. \n\nSince then European Union has been setting new targets for renewable energy production for their member states, the current goal is to achieve 32% of electricity production from renewable sources within the EU by 2030. \n\nThe code presented below intends to be a simple exploratory data analysis project whose goal is to plot the evolution of the electricity production from several renewable sources for the current 27 member states in the period of 1990 to 2014.\n\nThe code is based on the dataset of *International Energy Statistics*. \nAlong the code comments were left highlighting pieces of code that should be improved in the future. \n","da8a0ef8":"The new dataframe containing the data regarding all the EU members was checked in order to assess if all the countries are present in the selection. Only 25 countries are present in the selection. After a double checking the International Energy Statistics dataset and the code that defines the dataframe containing the EU contries data it was identified that some countries name are not specified in the same way, such as: \n* Holand is called Netherlands in the dataset \n* Czech Republic is called Czechia","8d38e60f":"Removing non relevant columns ","6465bc47":"# Defining the variables in study"}}