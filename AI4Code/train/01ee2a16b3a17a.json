{"cell_type":{"486187a9":"code","a465eaba":"code","128aacee":"code","bef7bcd1":"code","7f739be0":"code","dea5981d":"code","b0e59176":"code","39d72dc2":"code","898c9522":"code","bd6daf04":"code","246dda15":"code","3fa0e3ff":"markdown"},"source":{"486187a9":"#Packages\n#--Web scraping packages\nfrom bs4 import BeautifulSoup\nimport requests\nimport pandas as pd\nimport numpy as np\nfrom prettytable import PrettyTable\nimport re\nimport random","a465eaba":"class Recipe:\n    def __init__(self, name, conditionList, link, imageUrl, ingredientList):\n        self._name = name\n        self._conditionList = conditionList\n        self._link = link\n        self._imageUrl = imageUrl\n        self._ingredientList = ingredientList\n        \n    def getName(self):\n        return self._name\n    \n    def getConditionList(self):\n        return self._conditionList\n    \n    # getter method\n    def get_link(self):\n        return self._link\n    \n    # getter method\n    def get_imageUrl(self):\n        return self._imageUrl\n    \n    # getter method\n    def get_ingredientList(self):\n        return self._ingredientList\n\n    # setter method\n    def set_name(self, x):\n        self._name = x\n        \n    # setter method\n    def set_conditionList(self, x):\n        self._conditionList = x\n        \n    # setter method\n    def set_link(self, x):\n        self._link = x\n        \n    # setter method\n    def set_imageUrl(self, x):\n        self._imageUrl = x\n        \n    # setter method\n    def set_ingredientList(self, x):\n        self._ingredientList = x\n        \n    def toString(self):\n        return \"[\" + \"Recipe Name: \" + self._name +\",\\n\"+ \"Conditions: \" + str(self._conditionList) +\",\\n\" + \"Website: \" + self._link +\",\\n\"+ \"Image: \" + self._imageUrl +\",\\n\"+ \"Ingredients\" +str(self._ingredientList)","128aacee":"#load URLs we want to scrape into an array\nBASE_URL = ['https:\/\/www.eatingwell.com\/recipes\/18052\/health-condition\/bone-health\/',\n           'https:\/\/www.eatingwell.com\/recipes\/17899\/health-condition\/diabetic\/',\n           'https:\/\/www.eatingwell.com\/recipes\/18055\/health-condition\/high-blood-pressure\/',\n           'https:\/\/www.eatingwell.com\/recipes\/18015\/health-condition\/low-cholesterol\/',\n           'https:\/\/www.eatingwell.com\/recipes\/18054\/health-condition\/healthy-pregnancy\/',\n           'https:\/\/www.eatingwell.com\/recipes\/18008\/health-condition\/heart-healthy\/']\n","bef7bcd1":"recipe_name = []\nrecipe_link = []","7f739be0":"listCat = ['bone-health', 'diabetic', 'high-blood-pressure', 'low-cholesterol', 'healthy-pregnancy', 'heart-healthy']\nlistCatItems = []\ncounter = 0;\n\nt = PrettyTable(['Recipe', 'Link'])\n\n\nfor eachUrl in BASE_URL:\n    listItems = []\n    \n    html = requests.get(eachUrl).text\n    soup = BeautifulSoup(html, \"html.parser\")\n    itemReferenceAndTitle = soup.find_all(\"a\", class_=\"card__titleLink manual-link-behavior\")\n    \n    t.clear_rows()\n    t = PrettyTable(['Recipe', 'Link'])\n    itemCounter = 0\n    for item in itemReferenceAndTitle:\n        \n        if(itemCounter % 2 == 0):\n            a = str(item)\n            hrefIndex = (a.find(\"href=\"))\n            titleIndex = (a.find(\"title=\"))\n\n            hrefSub = a[hrefIndex+6:len(a)]\n            titleSub = a[titleIndex+7:len(a)]\n\n            hrefSub = hrefSub[0:hrefSub.find(\"\\\"\")]\n            titleSub = titleSub[0:titleSub.find(\"\\\"\")]\n\n            titleSub = titleSub.replace(\"amp\", \"\")\n            titleSub = titleSub.replace(\";\", \"\")\n\n            recipe_name.append(titleSub)\n            recipe_link.append(hrefSub)\n        itemCounter = itemCounter + 1\n\n    counter = counter + 1\n    #print(t)","dea5981d":"print(len(recipe_name))\nprint(len(recipe_link))\n\nall_recipes_list = []","b0e59176":"def getRecipeConditions(soup):\n    #Get list of conditions\n    condition = []\n\n    soupHits = soup.find_all(\"li\", class_=\"nutrition-profile-item\")\n\n    for div in soupHits:\n        condition.append(div.find('a').contents[0])\n    return condition","39d72dc2":"def getRecipeImageUrl(soup):\n    #Get Image\n    image = \"\"\n    \n    soupHits = soup.find_all(\"button\", class_=\"icon icon-image-zoom\")\n    quoted = re.compile('\"[^\"]*\"')\n    for line in str(soupHits).split(' '):\n        if \"data-image\" in line:\n            image = (quoted.findall(line)[0].replace(\"\\\"\", \"\"))\n    return image","898c9522":"def getRecipeIngredients(soup):\n    #Get ingredients\n    ingredients = []\n    \n    soupHits = soup.find_all(\"span\", class_=\"ingredients-item-name\")\n\n    for item in str(soupHits).split(\"span class=\\\"\"):\n        if(\"ingredients-item-name\" in item):\n            a = (item.replace(\"ingredients-item-name\\\">\", \"\").split(\" <\/span>\")[0])\n            ingredients.append(a)\n    return ingredients\n        ","bd6daf04":"numberOfRecipesToPull = 200\nfor counter in range(1,numberOfRecipesToPull):\n    link = recipe_link[counter]\n                       \n    html = requests.get(link).text\n    soup = BeautifulSoup(html, \"html.parser\")\n    \n    name = recipe_name[counter]\n    \n    conditions = getRecipeConditions(soup)\n    image = getRecipeImageUrl(soup)\n    ingredients = getRecipeIngredients(soup)\n    #coreIngredients = applyExclusionList(ingredients)\n    \n    #if(counter % 20 == 0):\n    print(counter, end =\"-\")\n    \n    \n    all_recipes_list.append(Recipe(name, conditions, link, image, ingredients))","246dda15":"#Show random 5 recipes\nfor counter in range (0, 4):\n    print(random.choice(all_recipes_list).toString())\n    print(\"\")\n","3fa0e3ff":"# Web Scraping Model Recipe Output"}}