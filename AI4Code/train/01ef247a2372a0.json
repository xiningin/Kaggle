{"cell_type":{"2182a091":"code","493ea8a1":"code","d15048b5":"code","1e6bbc30":"code","10f421f6":"code","a2557a21":"code","5ad64291":"code","b62b3bda":"code","b80b30a9":"code","be69dd40":"code","a72a8f0e":"code","9aa7771c":"code","83244d87":"code","4dbcde7e":"code","44423d99":"markdown","7b837573":"markdown","74b69b96":"markdown","927e7bcb":"markdown","b1f4c528":"markdown","81e8f671":"markdown","e88403f2":"markdown","50c50a94":"markdown","0307088c":"markdown","7248af9b":"markdown","f7b40b7f":"markdown","93f112e8":"markdown","8c3b32b9":"markdown","96ab4edb":"markdown","78936365":"markdown","9a6a0aef":"markdown","ad21d3ba":"markdown","aa25fcb0":"markdown"},"source":{"2182a091":"###Loading in useful packages\n\n#for linear algebra\nimport numpy as np\n\n#for data manipulation\nimport pandas as pd\n\n#for plotting\nimport matplotlib.pyplot as pp\nimport seaborn as sns\n%matplotlib inline\n\n#For surpressing warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#For opening Zip files\nimport zipfile as zf","493ea8a1":"dtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int8',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float16',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float16',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }\n","d15048b5":"#Change the training and testing sets to pickle format\n\n#I have commented these out because I have already completed this step and these files are avaliable on my drive now.\n\n#pd.read_csv(zf.ZipFile(\"\/content\/drive\/My Drive\/Microsoft\/train.zip\").open(\"train.csv\"), dtype=dtypes).to_pickle(\"\/content\/drive\/My Drive\/Microsoft\/train.pkl\")\n#pd.read_csv(zf.ZipFile(\"\/content\/drive\/My Drive\/Microsoft\/test.zip\").open(\"test.csv\"), dtype=dtypes).to_pickle(\"\/content\/drive\/My Drive\/Microsoft\/test.pkl\")","1e6bbc30":"#Opening the saved pickles - which contain the data :)\n\ntrain = pd.read_pickle(\"..\/input\/mctrain\/train.pkl\")\ntest =pd.read_pickle(\"..\/input\/mctest\/test.pkl\")","10f421f6":"#Looking at shape of training data, i.e number of rows and columns\n\nprint(\"Training data dimensions\",train.shape)\nprint(\"Testing data dimension\",test.shape)","a2557a21":"#Training variable data types\ntrain.info()","5ad64291":"#Make a dictionary of all the variables\nall_the_vars = list(train.drop(['MachineIdentifier','HasDetections'],axis=1))\n\n#Make a list of categorical variables\ncat_vars = [i for i in all_the_vars if (train[i].dtype.name == 'category') | (train[i].dtype.name == 'object')]\n\n#Make a list of binary variables\nbin_vars = [i for i in all_the_vars if len(train[i].value_counts()) <= 2 ]\n\n#Make a list of pure numerical variables\nnum_vars = [i for i in all_the_vars if (i not in cat_vars) & (i not in bin_vars)]\n\nprint('We have ',len(all_the_vars),' explanatory variables')\nprint('We have ',len(cat_vars),' categorical variables')\nprint('We have ',len(bin_vars),' binary variables')\nprint('We have ',len(num_vars),' numerical variables')\n","b62b3bda":"#Let's examine the distribution of HasDetections\nj = train['HasDetections'].value_counts()\nj = j\/len(train)\nj.plot.bar()\npp.title('Distribution of HasDetections')\npp.xlabel('HasDetections values')\npp.ylabel('Proportion')\npp.show()","b80b30a9":"for i in cat_vars:\n  length = len(train)\n  j = train[i].value_counts() \/ length\n  j = j.sort_values(ascending=False)\n  j = j.iloc[:10]\n  x = list(j.index)\n  y = list(j.values)\n  z= list()\n\n  for j in x:\n    z.append(train['HasDetections'].loc[train[i]==j].mean())\n  \n\n  fig, ax1 = pp.subplots()\n  ax1.bar(x,y)\n  pp.xticks(x,y)\n  locs, labels = pp.xticks()\n  pp.setp(labels, rotation=90)\n  pp.title(i)\n  pp.ylabel('Proportion')\n  pp.xlabel(i + ' values')\n\n  ax2 = ax1.twinx()\n  ax2.plot(x,z,'r',linestyle='-', marker='o')\n  ax1.grid(False)\n  ax2.grid(False)\n  pp.ylabel('P(HasDetections == 1)')\n\n  pp.show()\n  \n","be69dd40":"for i in bin_vars:\n  length = len(train)\n  j = train[i].value_counts() \/ length\n  j = j.sort_values(ascending=False)\n  x = list(j.index)\n  y = list(j.values)\n  z= list()\n\n  for j in x:\n    z.append(train['HasDetections'].loc[train[i]==j].mean())\n  \n\n  fig, ax1 = pp.subplots()\n  ax1.bar(x,y)\n  pp.title(i)\n  pp.ylabel('Proportion')\n  pp.xlabel(i + ' values')\n\n  ax2 = ax1.twinx()\n  ax2.plot(x,z,'r',linestyle='-', marker='o')\n  ax1.grid(False)\n  ax2.grid(False)\n  pp.ylabel('P(HasDetections == 1)')\n\n  pp.show()","a72a8f0e":"import gc\ngc.collect()","9aa7771c":"for i in num_vars:\n  length = len(train)\n  j = train[i].value_counts() \/ length\n  j = j.sort_values(ascending=False)\n  x = np.array(j.index)\n  y = np.array(j.values)\n  z= list()\n\n  ax = sns.kdeplot(train[i].loc[train['HasDetections']==1],label='HasDetections ==1',color='r')\n  ax = sns.kdeplot(train[i].loc[train['HasDetections']==0],label='HasDetections ==0',color='b')\n  pp.title(i)\n  pp.ylabel('Density')\n  pp.xlabel(i+' values')\n\n  \n  pp.show()","83244d87":"#Let's creating a series which contains the proportion of missing values for each variable\nmis_val = 100 * train.isnull().sum()\/len(train)\n\n#Let's view variables with missing values\nmis_val[mis_val >0].sort_values(ascending=False)\n","4dbcde7e":"#Save them to separate pickles\n#train.to_pickle(\"\/content\/drive\/My Drive\/Microsoft\/train.pkl\")\n#test.to_pickle(\"\/content\/drive\/My Drive\/Microsoft\/test.pkl\")","44423d99":"So my criteria for potentially useful variables or parts of variables is whether is\n| P(HasDetections ==1) - 0.5 |  > 0.04 :\n\n'ProductName_windowsintune', 'EngineVersion', 'AppVersion','AvSigVersion' , 'Platform_windows2016', 'Processor_x86', 'Processor_am64', 'OsVer','OsPlatformSubRelease', ' OsBuildLab', 'SkuEdition_Server', 'PuaMode_audit', 'SmartScreen_RequireAdmin', 'SmartScreen_ExisitsNotSet ', 'Census_MDC2FormFactor', 'Census_DeviceFamily_Windows.Server','Census_DeviceFamily_Windows', 'Censor_ProcessorClass_mid', 'Census_ProcessorClass_high', 'Census_PrimaryDiskTypeName_UNKNOWN', 'Census_PrimaryDiskTypeName_Unspecified', 'Census_ChassisTypeName_Other', 'Census_PowerPlatformRoleName_Slate', 'Census_PowerPlatformRoleName_AppliancePC' ,'Census_PowerPlatformRoleName_EntepriseServer', 'Census_InternalBatteryType_nimh', ##'Census_InternalBatteryType_log20'##, 'Census_OSVersion',  'Census_OSArchitecture_x86', ''Census_OSArchitecture_am64'', 'Census_OSBranch', 'Census_OSInstallTypeName', 'Census_OSWUAutoUpdateOptionsName_DownloadNotify', 'Census_GenuineStateName_UNKNOWN', 'Census_ActivationChannel' and 'Census_FlightRing'\n","7b837573":"# 3. Checking Missing Values","74b69b96":"As always, let's begin by loading in useful packages.....","927e7bcb":"# Save the files\n\nSo we've accomplished our three aims and in our next kernels, we'll deal with missing values and possibly add new variables","b1f4c528":"# 1. Determining the types of variables\n","81e8f671":"The first step prior to loading in the data is to specify the data types for each of the variables and the size of each data type. This will save memory because Python automatically assigns 64 bits to each numeric variables,regardless of whether it actually needs it, by specifying the size of data type, we'll save memory.","e88403f2":"# Loading in the data","50c50a94":"Let's make a bar chart of the 'HasDetections' variables, to gain an idea of how it's distributed...","0307088c":"# 2. Seeing the relationship which the explanatory variables have with the response variable, 'HasDetections'\n","7248af9b":"# Microsoft Malware Prediction EDA Part 1\n\nIn this kernel, we'll load in the data and explore the data.\n\nWe have three aims:\n\n1. To check the variable types\n\n2. To see the relationship each variable has our response variable, ' HasDetections'\n\n3. To see how the missing values are distributed\n\nLet's get going!","f7b40b7f":"Let's see the breakdown of missing values in our training data\n","93f112e8":"Okay , so we have 82 different columns variables. Training has 83 because the it has the response variable column\n\nLet's try and distinguish the variable types","8c3b32b9":"When , I initally ran this on Google Colab, my next step was to unzip and save the file to somewhere else. I have done this already and, as a result, I have commented out the code.","96ab4edb":"For pure numerics, my criteria is whether there appears to at least one siginificant divergence between the lines, it's a subjective measure. the notable variables seem  to be:\n\n'DefaultBrowsersIdentifier' , 'AVProductStatesIdentifier', 'AVProductsInstalled' , 'CountryIdentifier', 'CityIdentifier', 'UacLuaenable', 'Censor_ProcessorModelIdentifier', 'Census_PrimaryDiskTotalCapacity' , 'Census_SystemVolumeTotalCapacity', 'Census_TotalPhysicalRAM', 'Census_InternalPrimaryDiagnonalDisplaySizeInInches' , 'Census_InternalPrimaryDisplayResolutionVertical', 'Census_FirmwareManufacturerIdentifier'\n ","78936365":"Okay, so it looks like a pretty even split between not having malware detected and having malware detected.\n\nIf we just use historical training data, it seems that getting malware is a coin flip. Keeping this in mind, let's see how each features interacts with 'HasDetections' and if the probabilities of detecting malware for each feature are more insightful than a coin flip.","9a6a0aef":"Over half of our variables have missing values :(\n\n\nPuaMode, Censor_ProcessorClass,DefaultBrowerIdentifier, Census_IsFlightingInternal,Census_InternalBatteryType,Census_ThresholdOptIn and Census_IsWIMBootEnabled have the greatest proportion of missing values.\n\nHaving dug further, PuaMode, Census_InternalBatteryType and SmartScreen seem potentially viable, intuitively. \nI'm very tempted,however, to remove the other  variables  with high ratios of missing values BUT let's  examine the data further before doing this.","ad21d3ba":"For binary variables,same criteria as before, the notable areas seem to be:\n\n'Wdft_IsGamer_1',  'Census_IsAlwaysOnAlwaysConnectedCapable_1', 'Census_IsPenCapable_1', 'Census_IsTouchEnabled_1' , 'Census_IsVirtualDevice_1', ##'Cenus_IsWIMBootEnabled_1'##, ##'Census_ThresholdOptIn_1'##, 'Census_IsFlightingInternal_1', 'Census_IsPortableOperatingSystem', 'Census_HasOpticalDiskDrive' , ##'Firewall_0'## ,'SMode_1', 'PuaMode_audit' , 'AutoSampleOptIn_1 ', 'IsProtected_0', 'IsSxsPassiveMode_1'","aa25fcb0":"We have **29 categorical variables** , **20 binary varibales**, and **33 pure numeric variables**\n\nNotice that our target variable, **HasDetections** - which is at the bottom of the list-is an integer variable. It's values are either 0 or 1.\n\n*Also note that  **MachineIdentifier** is the just the id for each computer. Not an explanatory variable*\n\n"}}