{"cell_type":{"fa501220":"code","08e34115":"code","c5ffdc51":"code","adfaa033":"code","4ec401e6":"code","983827de":"code","efd0f57f":"code","1d3feff5":"code","222197c6":"code","593dc0b5":"code","04d6bdbb":"code","20424157":"code","e0caa031":"code","1d7f52c2":"code","a8ebac54":"code","1acb16fe":"code","67fdb367":"code","93a23427":"code","49003f06":"code","d609ab75":"code","acae26ec":"markdown","ad3eae8d":"markdown","7793885c":"markdown","8b572bf1":"markdown","fea429a9":"markdown","77fa5556":"markdown"},"source":{"fa501220":"import pandas as pd\nimport numpy as np\nfrom keras.utils.np_utils import to_categorical","08e34115":"# load\u6570\u636e\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","c5ffdc51":"# \u6570\u636e\u51c6\u5907\nY_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1)\nX_train = X_train \/ 255.0\nX_test = test \/ 255.0\nX_train = X_train.values.reshape(-1,28,28,1)\nX_test = X_test.values.reshape(-1,28,28,1)\nY_train = to_categorical(Y_train, num_classes = 10)","adfaa033":"import matplotlib.pyplot as plt\n# PREVIEW IMAGES\nplt.figure(figsize=(15,4.5))\nfor i in range(30):  \n    plt.subplot(3, 10, i+1)\n    plt.imshow(X_train[i].reshape((28,28)),cmap=plt.cm.binary)\n    plt.axis('off')\nplt.subplots_adjust(wspace=-0.1, hspace=-0.1)\nplt.show()","4ec401e6":"# \u6570\u636e\u589e\u5f3a\nfrom keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\n        rotation_range=10,  \n        zoom_range = 0.10,  \n        width_shift_range=0.1, \n        height_shift_range=0.1)","983827de":"# \u5c55\u793a\nX_train3 = X_train[9,].reshape((1,28,28,1))\nY_train3 = Y_train[9,].reshape((1,10))\nplt.figure(figsize=(15,4.5))\nfor i in range(30):  \n    plt.subplot(3, 10, i+1)\n    X_train2, Y_train2 = datagen.flow(X_train3,Y_train3).next()\n    plt.imshow(X_train2[0].reshape((28,28)),cmap=plt.cm.binary)\n    plt.axis('off')\n    if i==9: X_train3 = X_train[11,].reshape((1,28,28,1))\n    if i==19: X_train3 = X_train[18,].reshape((1,28,28,1))\nplt.subplots_adjust(wspace=-0.1, hspace=-0.1)\nplt.show()","efd0f57f":"from tensorflow import keras\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\nfrom tensorflow.keras.optimizers import RMSprop\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","1d3feff5":"Y = train[\"label\"]\nX = train.drop(labels = [\"label\"],axis = 1)\nplt.imshow(X.values[0].reshape(28,28), cmap=plt.cm.binary)\nplt.show()\nprint('Label: {}'.format(Y[0]))","222197c6":"num_classes = 10\nx = X.values.reshape(42000, 28, 28, 1)\nx = x.astype('float32')\nx \/= 255\ny = keras.utils.to_categorical(Y, num_classes)\nprint(y[0])","593dc0b5":"from sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(x, y, test_size = 0.1, random_state=5)\nprint('\u8bad\u7ec3\u96c6: {}'.format(len(x_train)))\nprint('\u6d4b\u8bd5\u96c6: {}'.format(len(x_val)))","04d6bdbb":"# \u5efa\u6a21\nmodel = Sequential()\nmodel.add(Conv2D(20, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=(28,28,1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(40, kernel_size=(3,3), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.summary()","20424157":"model.compile(loss='categorical_crossentropy',\n              optimizer=RMSprop(),\n              metrics=['accuracy'])","e0caa031":"batch_size = 32\nepochs = 20\n\n\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='model.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    keras.callbacks.EarlyStopping(monitor='val_loss', patience=10,verbose=1)\n]\n\nhistory = model.fit(x_train, y_train,\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    callbacks = callbacks_list,\n                    verbose=1,\n                    validation_data=(x_val, y_val))","1d7f52c2":"print(history.history)","a8ebac54":"# \u8bad\u7ec3\u635f\u5931\u51fd\u6570\nfig, ax = plt.subplots(1,2, figsize=(16,8))\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","1acb16fe":"from tensorflow.keras.models import load_model\nmodel = load_model('model.h5')\n\nscore = model.evaluate(x_val, y_val, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","67fdb367":"print(y_train[10])\nprint(model.predict(x_train[10].reshape((1,28,28,1))))\nprint(model.predict_classes(x_train[10].reshape((1,28,28,1))))","93a23427":"import itertools\n\n#Plot the confusion matrix. Set Normalize = True\/False\ndef plot_confusion_matrix(cm, classes, normalize=True, title='Confusion matrix', cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.figure(figsize=(10,10))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        cm = np.around(cm, decimals=2)\n        cm[np.isnan(cm)] = 0.0\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","49003f06":"y_pred = model.predict_classes(x_val)\n\ny_test_c = np.argmax(y_val, axis=1)\ntarget_names = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n\ncm = confusion_matrix(y_test_c, y_pred)\nplot_confusion_matrix(cm, target_names, normalize=False, title='Confusion Matrix')\n\nprint('Classification Report')\nprint(classification_report(y_test_c, y_pred, target_names=target_names))","d609ab75":"# \u5f97\u51fakaggle\u6d4b\u8bd5\u96c6\u7ed3\u679c\ntest = pd.read_csv(\"..\/input\/test.csv\")\nprint(\"Qtde de testes: {}\".format(len(test)))\n\nx_test = test.values.reshape(len(test),28,28,1)\nx_test = x_test.astype('float32')\nx_test \/= 255\n\ny_pred = model.predict_classes(x_test)\n\ni = 0\nplt.imshow(test.values[i].reshape(28,28), cmap=plt.cm.binary)\nplt.show()\nprint('Previsto: {}'.format(y_pred[i]))\n\nresults = pd.Series(y_pred,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,len(y_pred)+1),name = \"ImageId\"),results],axis = 1)\nprint(submission.head(10))\n\nsubmission.to_csv(\"mlp_mnist_v1.csv\",index=False)","acae26ec":"# Thanks\n[CNN simples com Keras para Iniciantes by MAUR\u00cdCIO FIGUEIREDO](www.kaggle.com\/mauriciofigueiredo\/cnn-simples-com-keras-para-iniciantes)  \n[25 Million Images! [0.99757] MNIST by CHRIS DEOTTE](www.kaggle.com\/cdeotte\/25-million-images-0-99757-mnist)","ad3eae8d":"# \u6570\u636e\u5206\u6790","7793885c":"# Kaggle \u6570\u636e\u5305","8b572bf1":"# Kaggle \u7ed3\u679c\n![result](https:\/\/cdn.jsdelivr.net\/gh\/chen0495\/newpicgo\/img2021\/202111031634153.png)","fea429a9":"# \u6570\u636e\u589e\u5f3a","77fa5556":"# \u6784\u5efa\u6a21\u578b"}}