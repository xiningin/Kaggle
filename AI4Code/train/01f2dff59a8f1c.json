{"cell_type":{"20d2c77b":"code","72c29d83":"code","7fa0a956":"code","c27edc9a":"code","21f10572":"code","ffc7ed10":"code","834bbed1":"markdown"},"source":{"20d2c77b":"from numpy import asarray\nfrom numpy import exp\nfrom numpy import sqrt\nfrom numpy import cos\nfrom numpy import e\nfrom numpy import pi\nfrom numpy import argsort\nfrom numpy.random import randn\nfrom numpy.random import rand\nfrom numpy.random import seed","72c29d83":"def objective(v):\n\tx, y = v\n\treturn -20.0 * exp(-0.2 * sqrt(0.5 * (x**2 + y**2))) - exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) + e + 20","7fa0a956":"def in_bounds(point, bounds):\n\t# enumerate all dimensions of the point\n\tfor d in range(len(bounds)):\n\t\t# check if out of bounds for this dimension\n\t\tif point[d] < bounds[d, 0] or point[d] > bounds[d, 1]:\n\t\t\treturn False\n\treturn True","c27edc9a":"def es_comma(objective, bounds, n_iter, step_size, mu, lam):\n\tbest, best_eval = None, 1e+10\n\t# calculate the number of children per parent\n\tn_children = int(lam \/ mu)\n\t# initial population\n\tpopulation = list()\n\tfor _ in range(lam):\n\t\tcandidate = None\n\t\twhile candidate is None or not in_bounds(candidate, bounds):\n\t\t\tcandidate = bounds[:, 0] + rand(len(bounds)) * (bounds[:, 1] - bounds[:, 0])\n\t\tpopulation.append(candidate)\n\t# perform the search\n\tfor epoch in range(n_iter):\n\t\t# evaluate fitness for the population\n\t\tscores = [objective(c) for c in population]\n\t\t# rank scores in ascending order\n\t\tranks = argsort(argsort(scores))\n\t\t# select the indexes for the top mu ranked solutions\n\t\tselected = [i for i,_ in enumerate(ranks) if ranks[i] < mu]\n\t\t# create children from parents\n\t\tchildren = list()\n\t\tfor i in selected:\n\t\t\t# check if this parent is the best solution ever seen\n\t\t\tif scores[i] < best_eval:\n\t\t\t\tbest, best_eval = population[i], scores[i]\n\t\t\t\tprint('%d, Best: f(%s) = %.5f' % (epoch, best, best_eval))\n\t\t\t# create children for parent\n\t\t\tfor _ in range(n_children):\n\t\t\t\tchild = None\n\t\t\t\twhile child is None or not in_bounds(child, bounds):\n\t\t\t\t\tchild = population[i] + randn(len(bounds)) * step_size\n\t\t\t\tchildren.append(child)\n\t\t# replace population with children\n\t\tpopulation = children\n\treturn [best, best_eval]","21f10572":"# seed the pseudorandom number generator\nseed(1)\n# define range for input\nbounds = asarray([[-5.0, 5.0], [-5.0, 5.0]])\n# define the total iterations\nn_iter = 5000\n# define the maximum step size\nstep_size = 0.15\n# number of parents selected\nmu = 20\n# the number of children generated by parents\nlam = 100","ffc7ed10":"# perform the evolution strategy (mu, lambda) search\nbest, score = es_comma(objective, bounds, n_iter, step_size, mu, lam)\nprint('Done!')\nprint('f(%s) = %f' % (best, score))","834bbed1":"# Evolution Strategies"}}