{"cell_type":{"06446a9b":"code","2552556c":"code","1b3e8351":"code","9a12de2b":"code","585ffe64":"code","236b227c":"code","abe39a61":"code","9a0264b9":"code","899f6189":"code","23685624":"code","142eea28":"code","e3d0c184":"code","71bab284":"code","291267a8":"code","92cc80ad":"code","5fa50a0b":"markdown","e0f4b255":"markdown","5b42227b":"markdown","b33923ac":"markdown","5a36c6a2":"markdown","503eca7e":"markdown","96293dc8":"markdown","45fe12a3":"markdown","6b24094a":"markdown","0b734a3e":"markdown","1ce0ed84":"markdown","4d514944":"markdown","dc28f90a":"markdown","72991f1a":"markdown","055bf149":"markdown","88d69bc9":"markdown","3bf4281b":"markdown","e11c8a25":"markdown","6b0a0168":"markdown","0de31e6d":"markdown"},"source":{"06446a9b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2552556c":"events = pd.read_csv('..\/input\/events.csv')\nevents.sample(10)\n#events.info()\n","1b3e8351":"events.isnull().sum()","9a12de2b":"x = list()\nx = events['event'].value_counts()\n#type(x)\n\nprop_of_events = x\/ sum(x)\nprop_of_events","585ffe64":"perc_conv = x[2]*100\/x[1]\nperc_conv","236b227c":"#Define new data frame which doesn't have 'view' events\nevents_non_view = events[(events['event'] != \"view\")]\nevents_non_view.sample(5)","abe39a61":"events_non_view[events_non_view['visitorid'] == 1303838]","9a0264b9":"events_non_view[(events_non_view[\"visitorid\"] == 1210136) & (events_non_view[\"itemid\"] == 253214)]","899f6189":"#An alternative way of checking addtocart and transaction logged for a user and a different item.\ncond1 = (events_non_view[\"visitorid\"] == 1210136)\ncond2 = (events_non_view[\"itemid\"] == 396732)\n\nevents_non_view[cond1 & cond2]","23685624":"events.groupby('event').count()","142eea28":"unique_visitors = events.groupby('event')['visitorid'].nunique()\nunique_visitors","e3d0c184":"len(events['visitorid'].unique())","71bab284":"perc_uniq_visitors = unique_visitors\/ sum(unique_visitors)\nprint(perc_uniq_visitors)","291267a8":"perc_uniq_visitors[1]*100\/perc_uniq_visitors[0]","92cc80ad":"#mask = (events_non_view[\"visitorid\"] == 1210136) & events_non_view[\"itemid\"] == 396732)\n#events_non_view.ix[mask, events_non_view]\n#events_non_view[events_non_view['visitorid'] == 1210136] & events_non_view[events_non_view['itemid'] == 396732]","5fa50a0b":"## Percentage of purchases","e0f4b255":"### Sample data frame for the visitorid: 1303838 (randomly chosen)","5b42227b":"Considering the earlier [assumption](https:\/\/www.kaggle.com\/akshayreddykotha\/how-effectively-business-is-driving-conversions#Percentage-of-purchases), the proportions are:","b33923ac":"# Extra study","5a36c6a2":"## Load packages","503eca7e":"# Solution","96293dc8":"This leads us to consider the observations where transactions happened i.e the observations with a transaction id logged. All we need is the number of entries which were added to cart and purchased.","45fe12a3":"For each item purchased, \n1. It could have been added to cart and then purchased\n2. It could have been directly purchased. This happens rarely.\n\n**Assumption**: To make a successful purchase, a visitor will go through adding the item to the cart.","6b24094a":"This is more like getting the counts per category but in a tabular format just like a correlation matrix. But what we want is the number of unique `visitorid`s per `event` type.","0b734a3e":"Intuitively, the proportion of numbers makes sense with what happens on a day-to-day basis.","1ce0ed84":"As the data was collected over a span of 4.5 months, **32.4%** of items which were added to the cart made a transaction\/ purchase provided that the assumption above holds true. An item level calculation was done as the main goal is the number of transactions occurred after adding the items to the cart. And it is **0.81%** of all the data, simply put as ~**8 per 1000 sessions** made a purchase on the company's website (It could be repeated entry of the same visitor in any of the event category).","4d514944":"## Null value presence?","dc28f90a":"**Assumption**: All the null values in the `transactionid` column mean that no transaction occured with respect to that particular `itemid` - `visitorid` combination at a particular timestamp.","72991f1a":"The above proportion gives the percentage of unique visitors who added to the cart and made a purchase relative to those who had just added an item to the cart. The number of absolute transactions remains same at **8 per 1000**. The calculation on a unique visitor basis helps us understand if the data is biased to some users who followed the series of steps adding to the item to the cart (`addtocart`), and made many of the transactions\/ purchases (`transaction`). Clearly, that is not the case.","055bf149":"### Sample visitor who purchased an item two times by adding it to the cart two different times","88d69bc9":"# Problem at hand\nMeasure how many people are completing a series of steps like Add To Cart and Purchase to see how effectively a business is driving conversions.","3bf4281b":"Data: https:\/\/www.kaggle.com\/retailrocket\/ecommerce-dataset\/home\n\nThe data was collected over a span of 4.5 months by [RetailRocket](https:\/\/retailrocket.net\/).","e11c8a25":"## Load relevant data","6b0a0168":"![](http:\/\/)This is one such visitor who didn't make a transaction but added two different items to cart in the span of 4.5 months.","0de31e6d":"To cross check, calculate the total number of unique visitorids:"}}