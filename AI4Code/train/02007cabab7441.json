{"cell_type":{"09f2ce01":"code","81e18ce3":"code","d250889b":"code","8d065354":"code","2c6da744":"code","495fba43":"code","3367b296":"code","f0dfbdc8":"code","d56e58a2":"code","748bc7cf":"code","a8ac5be3":"code","66757d83":"code","dedf62c4":"code","07ef63eb":"code","07c251c1":"code","6836b027":"code","c208283f":"code","9ca41bd5":"code","c9ed5941":"code","a19d0923":"code","3db35f80":"code","44c2b65c":"code","e096acb6":"code","3dc7de56":"code","34f85330":"code","70c867fc":"code","f99438f0":"code","bb8482f3":"code","c3f86baf":"code","d7d32bd8":"code","ab5380c3":"markdown","156b7679":"markdown","18a63025":"markdown","a57db93e":"markdown","0891c88f":"markdown","3d0c2ee1":"markdown","3fe4087d":"markdown","1d04b002":"markdown"},"source":{"09f2ce01":"import pandas as pd\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom urllib.request import urlopen\nimport json\nimport requests\nimport re\nimport math\nimport warnings\nwarnings.filterwarnings('ignore')","81e18ce3":"confirmed_color = 'navy'\nrecovered_color = 'green'\ndeath_color = 'indianred'\nactive_color = 'purple'","d250889b":"df1 = \"https:\/\/api.covid19india.org\/state_district_wise.json\"\ndf2 = \"https:\/\/api.covid19india.org\/data.json\"","8d065354":"def getting_data(url):\n    response = requests.get(url)\n    data = response.content.decode('utf-8')\n    return data","2c6da744":"df_state = json.loads(getting_data(df1))\ndf = json.loads(getting_data(df2))","495fba43":"lis = []\nstate_names = df_state.keys()\nfor state in state_names:\n    district_names = df_state[state]['districtData'].keys() #Districts of Current State\n    for district in district_names:\n        temp = df_state[state]['districtData'][district]\n        var_lis = [state,district,temp.get('confirmed'),temp.get('recovered'),\n                   temp.get('active'),temp.get('deceased')]\n        lis.append(var_lis)\n    district_wise = pd.DataFrame(lis,columns=['State\/UT','District','Confirmed',\n                                              'Recovered','Active','Death'])\ndistrict_wise.head()","3367b296":"temp = [[i['state'],i['confirmed'],i['recovered'],i['active'],i['deaths'],\n         i['lastupdatedtime'],i['deltaconfirmed'],i['deltarecovered'],\n         i['deltadeaths']] for i in df['statewise']]\nstatewise_total = pd.DataFrame(temp,columns=['State\/UT','Confirmed','Recovered',\n                                          'Active','Death','LastUpdateTime',\n                              'DeltaConfirmed','DeltaRecovered','DeltaDeath'])\nstatewise_total['Confirmed']=statewise_total['Confirmed'].astype('int')\nstatewise_total['Recovered']=statewise_total['Recovered'].astype('int')\nstatewise_total['Active']=statewise_total['Active'].astype('int')\nstatewise_total['Death']=statewise_total['Death'].astype('int')\nstatewise_total['DeltaConfirmed']=statewise_total['DeltaConfirmed'].astype('int')\nstatewise_total['DeltaRecovered']=statewise_total['DeltaRecovered'].astype('int')\nstatewise_total['DeltaDeath']=statewise_total['DeltaDeath'].astype('int')\nstatewise_total['RecoveryRate%'] = round(statewise_total['Recovered']\/statewise_total['Confirmed']*100,2)\nstatewise_total['MortalityRate%'] = round(statewise_total['Death']\/statewise_total['Confirmed']*100,2)\nstatewise_total['Active\/100 Confirmed'] = round(statewise_total['Active']\/statewise_total['Confirmed']*100,2)\nfor i,y in enumerate(statewise_total['LastUpdateTime']):\n    statewise_total['LastUpdateTime'][i] = pd.to_datetime(y.split(' ')[0])\nstatewise_total['LastUpdateTime'] = pd.to_datetime(statewise_total['LastUpdateTime'])\nstatewise_total.head()","f0dfbdc8":"timeseries = [list(i.values()) for i in df['cases_time_series']]\ntimeseries = pd.DataFrame(timeseries,columns=df['cases_time_series'][0].keys())\n# timeseries.rename(columns={'date':'Date'},inplace=True)\n# timeseries['Date']=timeseries['Date'].replace({' January':'-01-2020',' February':'-02-2020',\n#                                                ' March':'-03-2020',' April':'-04-2020',\n#                                                ' May':'-05-2020',' June':'-06-2020'},regex=True)\n# timeseries['Date']= pd.to_datetime(timeseries['Date'])\n# timeseries.set_index('Date',inplace=True)\ntimeseries['dailyconfirmed'] = timeseries['dailyconfirmed'].astype('int')\ntimeseries['dailydeceased'] = timeseries['dailydeceased'].astype('int')\ntimeseries['dailyrecovered'] = timeseries['dailyrecovered'].astype('int')\ntimeseries['totalconfirmed'] = timeseries['totalconfirmed'].astype('int')\ntimeseries['totaldeceased'] = timeseries['totaldeceased'].astype('int')\ntimeseries['totalrecovered'] = timeseries['totalrecovered'].astype('int')\ntimeseries['7dyMnConfirmed'] = timeseries.totalconfirmed.rolling(7).mean().fillna(0).astype(int)\ntimeseries['7dyMnRecovered'] = timeseries.totalrecovered.rolling(7).mean().fillna(0).astype(int)\ntimeseries['7dyMnDeceased'] = timeseries.totaldeceased.rolling(7).mean().fillna(0).astype(int)\ntimeseries.head()","d56e58a2":"values = [list(i.values())[-5:] for i in df[\"tested\"]]\ntests = pd.DataFrame(values, columns=list(df[\"tested\"][0].keys())[-5:])\nfor i,value in enumerate(tests['totalsamplestested']):\n    if value=='':\n      avg = math.ceil((int(tests['totalsamplestested'].iloc[i-1])+int(tests['totalsamplestested'].iloc[i+1]))\/2)\n      tests['totalsamplestested'].iloc[i] = avg #Taking avg from previous and next value for three missing values\ntests['totalsamplestested'] = tests['totalsamplestested'].astype('int')\nfor i,value in enumerate(tests['testspermillion']):\n    if value=='':\n      avg = math.ceil((int(tests['testspermillion'].iloc[i-1])+int(tests['testspermillion'].iloc[i+1]))\/2)\n      tests['testspermillion'].iloc[i] = avg #Taking avg from previous and next value for three missing values\ntests['testspermillion'] = tests['testspermillion'].astype('int')\n#tests.head()","748bc7cf":"time_series_state = pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest'\n                                        '\/state_wise_daily.csv')\ndel time_series_state['TT']\ntime_series_state = time_series_state.melt(id_vars=['Status','Date'], \n                      value_vars=time_series_state.columns[2:],\n                      value_name='Census',var_name='State')\ntime_series_state = time_series_state.pivot_table(index=['Date', 'State'], \n                                                columns=['Status'], \n                                                values='Census')\ntime_series_state = time_series_state.reset_index()","a8ac5be3":"given_data = json.loads(getting_data(df1))\nstate_names = given_data.keys()\ngiven_lis = []\nfor state in state_names:\n    #district_names = df_state[state]['statecode'].keys() \n    #print(a[state]['statecode'],state)\n    given_lis.append([given_data[state]['statecode'],state])\ngiven_dic = {}\nfor i in given_lis:\n    given_dic[i[0]] = i[1]\ngiven_dic['DD'] = 'Daman and Diu'\n#code = pd.DataFrame(given_dic.items(),columns={'Code','State'})\ntime_series_state['State-Name'] = time_series_state['State'].map(given_dic)\ntime_series_state['Date'] = pd.to_datetime(time_series_state['Date'])\ntime_series_state.set_index('Date',inplace=True)\n#time_series_state.head()","66757d83":"temp = pd.DataFrame(timeseries.iloc[-1].T)\ntemp = temp.T\ntemp['totalactive'] = int(temp.totalconfirmed)-int(temp.totalrecovered)-int(temp.totaldeceased)\ntemp = temp.melt(value_vars=['totalconfirmed','totalrecovered','totalactive','totaldeceased'])\nfig = px.treemap(temp, path=[\"variable\"], values=\"value\", height=250, \n                 color_discrete_sequence=[confirmed_color, recovered_color,active_color,death_color])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","dedf62c4":"temp = statewise_total[statewise_total['State\/UT']!='Total']\ntemp = temp[temp['State\/UT']!='State Unassigned']\nfig = go.Figure(data=[\n    go.Bar(name='Death', y=temp['State\/UT'], x=temp['Death'],orientation='h',marker_color=death_color),\n    go.Bar(name='Recovered', y=temp['State\/UT'], x=temp['Recovered'],orientation='h',marker_color=recovered_color),\n    go.Bar(name='Confirmed', y=temp['State\/UT'], x=temp['Confirmed'],orientation='h',marker_color=confirmed_color)\n])\nfig.update_layout(barmode='stack',title='Statewise Confirmed\/Recovered\/Death Stacked', xaxis_title=\"Cases\", yaxis_title=\"State\/UT\", \n                      yaxis_categoryorder = 'total ascending', height = 1000,\n                      uniformtext_minsize=8, uniformtext_mode='hide',template='simple_white')\nfig.show()","07ef63eb":"temp = statewise_total[statewise_total['State\/UT']!='Total']\ntemp = temp[temp['State\/UT']!='State Unassigned']\nfig = go.Figure()\nfig.add_trace(go.Scatter(y=temp['Death'], x=temp['State\/UT'],\n                    mode='lines+markers',\n                    name='Death',marker_color=death_color))\nfig.add_trace(go.Scatter(y=temp['Recovered'], x=temp['State\/UT'],\n                    mode='lines+markers',\n                    name='Recovered',marker_color=recovered_color))\nfig.add_trace(go.Scatter(y=temp['Active'], x=temp['State\/UT'],\n                    mode='lines+markers', name='Active',marker_color=active_color))\nfig.add_trace(go.Scatter(y=temp['Confirmed'], x=temp['State\/UT'],\n                    mode='lines+markers', name='Confirmed',marker_color=confirmed_color))\nfig.update_layout(height=900,width= 1200, title_text=\"Statewise Cases\",template='simple_white')\nfig.show()","07c251c1":"temp = statewise_total[statewise_total['State\/UT']!='Total']\ntemp = temp[temp['State\/UT']!='State Unassigned']\nfig = go.Figure()\nfig.add_trace(go.Scatter(y=temp['MortalityRate%'], x=temp['State\/UT'],\n                    mode='lines+markers',\n                    name='Mortality Rate',marker_color=death_color))\nfig.add_trace(go.Scatter(y=temp['RecoveryRate%'], x=temp['State\/UT'],\n                    mode='lines+markers',\n                    name='Recovery Rate',marker_color=recovered_color))\nfig.add_trace(go.Scatter(y=temp['Active\/100 Confirmed'], x=temp['State\/UT'],\n                    mode='lines+markers', name='Active\/100 Confirmed',marker_color=active_color))\nfig.update_layout(height=700,width= 1200, title_text=\"Statewise Cases per 100 Confirmed\",template='simple_white')\nfig.show()","6836b027":"fig = px.bar(timeseries, x='date', y='totalconfirmed', color_discrete_sequence=[confirmed_color],template='simple_white')\nfig.update_layout(title='Confirmed', xaxis_title=\"Date\", yaxis_title=\"No. of Confirmed Cases\")\nfig.add_scatter(x=timeseries['date'],y=timeseries['7dyMnConfirmed'],name='7 day mean Confirmed',\n                marker={'color': 'red','opacity': 0.6,'colorscale': 'Viridis'},)\nfig.show()","c208283f":"fig = px.bar(timeseries, x='date', y='totalrecovered', \n             color_discrete_sequence=[recovered_color],template='simple_white')\nfig.update_layout(title='Recovered', xaxis_title=\"Date\", yaxis_title=\"No. of Recovered Cases\")\nfig.add_scatter(x=timeseries['date'],y=timeseries['7dyMnRecovered'],name='7 day mean Recovered',\n                marker={'color': 'red','opacity': 0.6,'colorscale': 'Viridis'},)\nfig.show()","9ca41bd5":"fig = px.bar(timeseries, x='date', y='totaldeceased', \n             color_discrete_sequence=[death_color],template='simple_white')\nfig.update_layout(title='Death', xaxis_title=\"Date\", yaxis_title=\"No. of Deceased Cases\")\nfig.add_scatter(x=timeseries['date'],y=timeseries['7dyMnDeceased'],name='7 day mean Deceased',\n                marker={'color': 'black','opacity': 0.6,'colorscale': 'Viridis'},)\nfig.show()","c9ed5941":"fig = px.line(color_discrete_sequence=[confirmed_color],template='simple_white')\nfig.add_scatter(x=timeseries['date'],y=timeseries['dailyconfirmed'],name='Daily Confirmed',marker={'color': confirmed_color,'opacity': 0.6,'colorscale': 'Viridis'},)\nfig.add_scatter(x=timeseries['date'],y=timeseries['dailyrecovered'],name='Daily Recovered',marker={'color': recovered_color,'opacity': 0.6,'colorscale': 'Viridis'},)\nfig.add_scatter(x=timeseries['date'],y=timeseries['dailydeceased'],name='Daily Death',marker={'color': death_color,'opacity': 0.6,'colorscale': 'Viridis'})\nfig.update_layout(title='Day Wise Analysis', xaxis_title=\"Date\", yaxis_title=\"No. of Cases\")\nfig.show()","a19d0923":"timeseries['totalactive'] = timeseries.totalconfirmed-timeseries.totalrecovered-timeseries.totaldeceased\nfig = px.line(color_discrete_sequence=[confirmed_color],template='simple_white')\nfig.add_scatter(x=timeseries['date'],y=timeseries['totalconfirmed'],name='Total Confirmed',marker={'color': confirmed_color,'opacity': 0.6,'colorscale': 'Viridis'},)\nfig.add_scatter(x=timeseries['date'],y=timeseries['totalrecovered'],name='Total Recovered',marker={'color': recovered_color,'opacity': 0.6,'colorscale': 'Viridis'},)\nfig.add_scatter(x=timeseries['date'],y=timeseries['totaldeceased'],name='Total Death',marker={'color': death_color,'opacity': 0.6,'colorscale': 'Viridis'})\nfig.add_scatter(x=timeseries['date'],y=timeseries['totalactive'],name='Total Active',marker={'color': active_color,'opacity': 0.6,'colorscale': 'Viridis'})\nfig.update_layout(title='Total Cases', xaxis_title=\"Date\", yaxis_title=\"No. of Cases\")\nfig.show()","3db35f80":"temp = district_wise.sort_values('Confirmed').tail(21)\nfig = go.Figure(data=[\n    go.Bar(name='Death', y=temp['District'], x=temp['Death'].head(21),orientation='h',marker_color=death_color),\n    go.Bar(name='Recovered', y=temp['District'], x=temp['Recovered'].head(21),orientation='h',marker_color=recovered_color),\n    go.Bar(name='Confirmed', y=temp['District'], x=temp['Confirmed'].head(21),orientation='h',marker_color=confirmed_color)\n])\nfig.update_layout(barmode='stack',title='Top21 Confirmed\/Recovered\/Death Stacked', xaxis_title=\"Cases\", yaxis_title=\"District\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide',template='simple_white')\nfig.show() #Here Unknown is Delhi","44c2b65c":"district_wise = district_wise[district_wise['State\/UT']!='State Unassigned']\ndistrict_wise.sort_values('Confirmed', ascending= False).head(30).fillna(0).style\\\n                        .background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Death\"])\\\n                        .background_gradient(cmap='RdPu',subset=[\"Active\"])","e096acb6":"temp = district_wise.groupby(['State\/UT','District'])['Death'].sum().reset_index()\nfig = px.treemap(temp, path=['State\/UT','District'], values=\"Death\", \n                 height=1000, title='Number of Deceased Cases', \n                 color_discrete_sequence = px.colors.qualitative.Plotly)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","3dc7de56":"fig = px.sunburst(district_wise, path=['State\/UT','District'],\n                    values='Confirmed', color='State\/UT',\n                    hover_data=[\"Confirmed\", \"Recovered\",'Death' ]\n                    )\nfig.update_layout(height=1000, title_text=\"Districtwise Confirmed Cases\")\nfig.show()","34f85330":"fig = px.sunburst(district_wise, path=['State\/UT','District'],\n                    values='Recovered', color='State\/UT',\n                    hover_data=[\"Confirmed\", \"Recovered\",'Death' ]\n                    )\nfig.update_layout(height=1000, title_text=\"Districtwise Recovered Cases\")\nfig.show()","70c867fc":"fig = px.sunburst(district_wise, path=['State\/UT','District'],\n                    values='Death', color='State\/UT',\n                    hover_data=[\"Confirmed\", \"Recovered\",'Death' ]\n                    )\nfig.update_layout(height=1000, title_text=\"Districtwise Deceased Cases\")\nfig.show()","f99438f0":"temp = pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest'\n                                '\/state_wise_daily.csv')\ntemp = temp[temp['Status']=='Confirmed']\nfig = go.Figure()\n# fig.add_trace(go.Scatter(y=temp['TT'], x=temp['Date'],\n#                     mode='lines+markers',name='Total'))\nfig.add_trace(go.Scatter(y=temp['UP'], x=temp['Date'],\n                    mode='lines+markers',name='Uttar Pradesh'))\nfig.add_trace(go.Scatter(y=temp['MH'], x=temp['Date'],\n                    mode='lines+markers',name='Maharashtra'))\nfig.add_trace(go.Scatter(y=temp['DL'], x=temp['Date'],\n                    mode='lines+markers',name='Delhi'))\nfig.add_trace(go.Scatter(y=temp['PB'], x=temp['Date'],\n                    mode='lines+markers',name='Punjab'))\nfig.add_trace(go.Scatter(y=temp['RJ'], x=temp['Date'],\n                    mode='lines+markers',name='Rajasthan'))\nfig.update_layout(title_text=\"Daywise Confirmed Cases of States\",\n                  template='simple_white',height=700)\nfig.show()","bb8482f3":"temp = pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest'\n                                '\/state_wise_daily.csv')\ntemp = temp[temp['Status']=='Confirmed']\ntemp['TTtotal'] = temp['TT'].cumsum()\ntemp['UPtotal'] = temp['UP'].cumsum()\ntemp['DLtotal'] = temp['DL'].cumsum()\ntemp['GJtotal'] = temp['GJ'].cumsum()\ntemp['PBtotal'] = temp['PB'].cumsum()\ntemp['RJtotal'] = temp['RJ'].cumsum()\ntemp['7dyMnUP'] = temp.UPtotal.rolling(7).mean().fillna(0).astype(int)\ntemp['7dyMnDL'] = temp.DLtotal.rolling(7).mean().fillna(0).astype(int)\ntemp['7dyMnGJ'] = temp.GJtotal.rolling(7).mean().fillna(0).astype(int)\ntemp['7dyMnPB'] = temp.PBtotal.rolling(7).mean().fillna(0).astype(int)\ntemp['7dyMnRJ'] = temp.RJtotal.rolling(7).mean().fillna(0).astype(int)\ntemp['7dyMnTT'] = temp.TTtotal.rolling(7).mean().fillna(0).astype(int)","c3f86baf":"fig1 = make_subplots(rows=3, cols=2, shared_xaxes=False)\nfig1.add_trace(go.Bar(x=temp['Date'], y=temp['TTtotal'],name='Total'),1,1)\nfig1.add_trace(go.Scatter(x=temp['Date'], y=temp['7dyMnTT'], name=\"7 day Mean Total\"), row=1, col=1)\nfig1.add_trace(go.Bar(x=temp['Date'], y=temp['UPtotal'],name='Uttar Pradesh'),1,2)\nfig1.add_trace(go.Scatter(x=temp['Date'], y=temp['7dyMnUP'], name=\"7 day Mean UP\"), row=1, col=2)\nfig1.add_trace(go.Bar(x=temp['Date'], y=temp['DLtotal'],name='Delhi'),2,1)\nfig1.add_trace(go.Scatter(x=temp['Date'], y=temp['7dyMnDL'], name=\"7 day Mean Delhi\"), row=2, col=1)\nfig1.add_trace(go.Bar(x=temp['Date'], y=temp['GJtotal'],name='Gujarat'),2,2)\nfig1.add_trace(go.Scatter(x=temp['Date'], y=temp['7dyMnGJ'], name=\"7 day Mean Gujarat\"), row=2, col=2)\nfig1.add_trace(go.Bar(x=temp['Date'], y=temp['PBtotal'],name='Punjab'),3,1)\nfig1.add_trace(go.Scatter(x=temp['Date'], y=temp['7dyMnPB'], name=\"7 day Mean Punjab\"), row=3, col=1)\nfig1.add_trace(go.Bar(x=temp['Date'], y=temp['RJtotal'],name='Rajasthan'),3,2)\nfig1.add_trace(go.Scatter(x=temp['Date'], y=temp['7dyMnRJ'], name=\"7 day Mean Rajasthan\"), row=3, col=2)\nfig1.update_layout(template='simple_white',height = 1500,\n                   title='State Confirmed Commulative Distribution')#showlegend=False,\nfig1.show()\n","d7d32bd8":"fig = make_subplots(rows=3, cols=1,shared_xaxes=True)\nfig.add_trace(go.Scatter(x=tests['updatetimestamp'], y=tests['totalsamplestested'],mode='lines+markers',\n                         name='Total Sample Tested',marker_color='blue'), row=1, col=1)\nfig.add_trace(go.Scatter(x=tests['updatetimestamp'], y=tests['totalsamplestested'].diff(),mode='lines+markers',\n                         name='Daily Tests',marker_color='green'), row=2, col=1)\nfig.add_trace(go.Scatter(x=tests['updatetimestamp'], y=tests['testspermillion'],mode='lines+markers',\n                         name='Tests Per Million',marker_color='red'), row=3, col=1)\nfig.update_layout(template='simple_white',height = 1000,\n                   title='Tests in India')\nfig.show()","ab5380c3":"## District Wise Conditional Formatting(Top30)","156b7679":"### Please upvote and Comment\ud83d\ude0b","18a63025":"## Dataset Source and Credit\n* https:\/\/api.covid19india.org\/","a57db93e":"## Total Cases in India","0891c88f":"## Loading Required Libraries","3d0c2ee1":"## Top21 District Affected","3fe4087d":"## Statewise Cases in India","1d04b002":"## Total cases in India Analysis with 7-day Average"}}