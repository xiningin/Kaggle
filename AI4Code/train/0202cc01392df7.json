{"cell_type":{"e2178454":"code","2e76435e":"code","2b547d0d":"code","04929260":"code","95c8e23a":"code","0c8ebaf5":"code","b6ab5afe":"code","88f62c6f":"code","0eb0c8d3":"code","76160e52":"code","74a70b62":"code","e172cc2f":"code","45507792":"code","c19f6d69":"code","e7e67a90":"code","6e1507ea":"code","422ed3b7":"code","61bd479a":"code","36a7d221":"code","ec0808f1":"code","36d79353":"code","020efcde":"code","c9442e77":"markdown","f10191b7":"markdown","1a713cbe":"markdown","dfbb70e0":"markdown","3c1830d3":"markdown","3cea2848":"markdown","412368de":"markdown","3b627b87":"markdown","8c684b03":"markdown","81a414bd":"markdown"},"source":{"e2178454":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         os.path.join(dirname, filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2e76435e":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom skimage.io import imread\nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras import Sequential\nfrom keras.applications import MobileNetV2\nfrom keras.layers import Dense\nfrom keras.preprocessing import image","2b547d0d":"brain_df = pd.read_csv('..\/input\/brain-tumor\/Brain Tumor.csv',usecols=[0,1])\nbrain_df.head()","04929260":"brain_df.isna().sum()","95c8e23a":"brain_df['Class'].value_counts()","0c8ebaf5":"#plot the value count\nsns.countplot(brain_df['Class'])","b6ab5afe":"path_list = []\nbase_path = '..\/input\/brain-tumor\/Brain Tumor\/Brain Tumor'\nfor entry in os.listdir(base_path):\n    path_list.append( os.path.join(base_path,entry))","88f62c6f":"#create path dictonary and then map itto brain_df['pathes']\npathes_dict={os.path.splitext(os.path.basename(x))[0]: x for x in path_list}\nbrain_df['pathes'] = brain_df['Image'].map(pathes_dict.get)","0eb0c8d3":"brain_df.head()","76160e52":"\nfor x in range (0 ,9):\n    img = imread(brain_df['pathes'][x])\n    plt.imshow(img)\n    plt.subplot(3,3,x+1)","74a70b62":"from PIL.Image import open\nbrain_df['pixels']=brain_df['pathes'].map(lambda x:np.asarray(open(x).resize((224,224))))\n","e172cc2f":"brain_df.head()","45507792":"image_list = []\nfor i in range(0,len(brain_df)):\n    # load image\n    brain_img = brain_df['pixels'][i].astype(np.float32)\n    img_array = image.img_to_array(brain_img)\n     # append to list of all images\n    image_list.append(keras.applications.mobilenet_v2.preprocess_input(img_array))\n    \n# convert image list to single array\n# Our feature\nX = np.array(image_list)\n\n# print shape of X\nprint(X.shape)","c19f6d69":"# get the class label as np.array\ny = np.array(brain_df.Class)","e7e67a90":"y","6e1507ea":"X_train,X_test,y_train,y_test = train_test_split(X,y\n                                                 ,test_size=0.2\n                                                ,random_state=0)\n\n\nprint('The shape of the X_train :'+' '+str(X_train.shape))\nprint('The size of the X_train :'+' '+str(X_train.shape[0]))\nprint('The shape of the X_test :'+' '+str(X_test.shape))\nprint('The size of the X_test:'+' '+str(X_test.shape[0]))","422ed3b7":"num_classes = 1\nmodel = Sequential()\nmodel.add(MobileNetV2(input_shape=(224, 224, 3),weights=\"imagenet\"\n                             ,include_top=False))\nmodel.add(keras.layers.GlobalAveragePooling2D())\nmodel.add( Dense(num_classes, activation='sigmoid',name='preds'))\nmodel.layers[0].trainable= False\n# show model summary\nmodel.summary()\n","61bd479a":"model.compile(\n    # set the loss as binary_crossentropy\n    loss=keras.losses.binary_crossentropy,\n    # set the optimizer as stochastic gradient descent\n    optimizer=keras.optimizers.SGD(lr=0.001),\n    # set the metric as accuracy\n    metrics=['accuracy']\n)\n\n\n# mock-train the model \nmodel.fit(\n    X_train[:,:,:,:],\n    y_train[:],\n    epochs=110,\n    verbose=1,\n    validation_data=(X_test[:,:,:,:], y_test[:])\n)\nmodel.save(\"model_brain.h5\")\nprint(\"Saved model to disk\")","36a7d221":"pretrained_cnn = keras.models.load_model('.\/model_brain.h5')\n\n# evaluate model on holdout set\neval_score = pretrained_cnn.evaluate(X_test,y_test)\n# print loss score\nprint('Eval loss:',eval_score[0])\n# print accuracy score\nprint('Eval accuracy:',eval_score[1] )","ec0808f1":"y_pred = pretrained_cnn.predict_classes(X_test)","36d79353":"from sklearn.metrics import confusion_matrix , classification_report\ntarget_classes = ['No Tumor','Tumor']\nclassification_report(y_test , y_pred , output_dict = True\n                      , target_names=target_classes)","020efcde":"confusion_matrix(y_test , y_pred ) ","c9442e77":"### Check if there is any null value or not ","f10191b7":"## Get a closer insights about our dataset","1a713cbe":"## plotting some samples from the dataset","dfbb70e0":"## Build model(MobileNet)","3c1830d3":"### Check imbalance or not\n##### we could deal with it later on by performing data augmentation","3cea2848":"## Importing our libraries","412368de":"### There is only 81 images out of 753 testing images are misclassified ","3b627b87":"## Splitting the dataset to training set(80%) and testing set (20%)","8c684b03":"## preprocessing our dataset before using MobileNet","81a414bd":"## Get our data ready!!"}}