{"cell_type":{"2a821885":"code","7867046c":"code","2237f320":"code","0d5b420a":"code","3d407c97":"code","3fab6da5":"code","9a658c03":"code","1eceabe5":"code","9eed3a5d":"code","51db6f6c":"code","73057acc":"code","542604d8":"code","3edb6235":"code","d7ecc239":"code","fc6c17f3":"code","692f4f7c":"code","d91125b0":"code","6ca84e50":"code","1daec9a9":"code","28e6f53d":"code","547ddbd4":"code","bb9bbb40":"code","49a8133c":"code","cd399085":"code","83cff32b":"code","6c003168":"code","aa00c86b":"code","5c36018e":"code","0fed6f06":"code","d28de1db":"code","7eb758db":"code","e8548a45":"code","34b1bf09":"code","82f4e7bc":"markdown","bc390e5b":"markdown","341ffb0f":"markdown","e1f66c7c":"markdown","f1f369a6":"markdown","803751f8":"markdown","c7618a7b":"markdown"},"source":{"2a821885":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7867046c":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","2237f320":"df=pd.read_csv('..\/input\/data-science-day1-titanic\/DSB_Day1_Titanic_train.csv')","0d5b420a":"df","3d407c97":"df.describe()","3fab6da5":"df.info()","9a658c03":"target=\"Survived\"\nfeatures=[col for col in df.columns if col not in ['PassengerId ',target]]\nnum=[col for col in features if df[col].dtype in ['int64','float64']]\ncat=[col for col in features if df[col].dtype == 'object' ]","1eceabe5":"print(num)\nprint(cat)","9eed3a5d":"df[num].info()","51db6f6c":"df[cat].info()","73057acc":"df[ ['Sex','Survived']].groupby(['Sex'],as_index=False).mean()","542604d8":"sns.countplot(x=df['Sex'],hue=df['Survived'])","3edb6235":"df[[\"Pclass\",\"Survived\"]].groupby(['Pclass'],as_index=False).mean()","d7ecc239":"sns.countplot(df[\"Pclass\"],hue=df[\"Survived\"])","fc6c17f3":"df[num].isnull().sum()","692f4f7c":"# Observations\n# The above code shows that there are some null values in the numerical data \n","d91125b0":"df[cat].isnull().sum()","6ca84e50":"# Observations\n# The above code shows that there are some null values in the Categorical data like Cabin,Embarked\n","1daec9a9":"df[\"Age\"].mean()\ndf[\"Age\"].fillna(29.69,inplace=True)","28e6f53d":"from sklearn.impute import SimpleImputer\nnum_imputer=SimpleImputer(strategy=\"mean\")\ndf[\"Age\"]=num_imputer.fit_transform(df[[\"Age\"]])","547ddbd4":"df[num].isnull().sum()","bb9bbb40":"# Lets clean Dataset of Categorical variable\n# for categorical variable we want to use mode function (strategy='most_frequent')","49a8133c":"cat_imputer=SimpleImputer(strategy='most_frequent')\ndf['Cabin']=cat_imputer.fit_transform(df[[\"Cabin\"]])\ncat2_imputer=SimpleImputer(strategy='most_frequent')\ndf['Embarked']=cat2_imputer.fit_transform(df[[\"Embarked\"]])","cd399085":"df[cat].isnull().sum()","83cff32b":"df.isnull().sum()","6c003168":"df=df.drop('Name',axis=1)","aa00c86b":"df=df.drop('Ticket',axis=1)","5c36018e":"df","0fed6f06":"from sklearn.preprocessing import OneHotEncoder\nenc=OneHotEncoder(drop=\"first\")\nenc_df=pd.DataFrame(enc.fit_transform(df[['Embarked']]).toarray())\ndf_ohe=df.join(enc_df)\ndf_ohe.drop('Embarked',axis='columns',inplace=True)\n","d28de1db":"df_ohe","7eb758db":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\ndf_age=pd.DataFrame(sc.fit_transform(df[[\"Age\"]]))","e8548a45":"df_age","34b1bf09":"df_ohe","82f4e7bc":"We can clean numerical data with the help of fillna and Sklearn library","bc390e5b":"loading dataset","341ffb0f":"we don't want Name,Ticket columns so we we drop this columns","e1f66c7c":"# Importing all Libraries","f1f369a6":"# Data Cleaning","803751f8":"# Data preprocessing\n## Encoding\n# OneHotEncoding ----> Nominal Variable\n\n","c7618a7b":"# Feature Scaling\n\nwe are scaling data and converting the numerical data into Zeros and ones"}}