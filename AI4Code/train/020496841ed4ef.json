{"cell_type":{"b2abf725":"code","935a6dfa":"code","e3a48fc6":"code","3e1b46e5":"code","242ca10b":"code","0651021b":"code","48d74860":"code","45df9f5b":"code","b16ebe18":"code","a86e0199":"code","b63277c0":"code","2b067459":"code","c150cde7":"code","9c919030":"code","5297778b":"code","141c11c3":"code","91ab7b16":"code","69d70399":"code","b9c5a808":"code","eeecdfde":"code","8e517678":"code","c19e17b9":"code","ac98a28b":"code","be21b2e2":"code","bd04694f":"code","79f62c26":"code","a8b5d3bb":"code","922016d0":"code","1a27d219":"code","804aadcc":"code","ff7e5204":"code","9161e05c":"code","e814f077":"code","2c23bcb4":"code","dbdd269a":"code","74d64675":"code","36f5b0d3":"code","b17ccb58":"code","f26f7b72":"code","62867253":"code","b09843c6":"code","417696da":"markdown","69188437":"markdown","7735470c":"markdown","d6ae0787":"markdown","2de34862":"markdown","902be7b8":"markdown","aadf78d9":"markdown","021bd6e0":"markdown","9acaad0d":"markdown","506d135f":"markdown","7112966c":"markdown","59d39a01":"markdown","33662f17":"markdown","a527516b":"markdown","6304beee":"markdown","3b437146":"markdown","bdc37e24":"markdown","ff23cc1c":"markdown","aab3a954":"markdown"},"source":{"b2abf725":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","935a6dfa":"import matplotlib.pyplot as plt\n","e3a48fc6":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}","3e1b46e5":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","242ca10b":"football\n","0651021b":"edu = pd.read_csv('\/kaggle\/input\/ense32020\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","48d74860":"edu.head()","45df9f5b":"edu.head(2)","b16ebe18":"edu.tail()","a86e0199":"edu.tail(2)","b63277c0":"edu[10:14]","2b067459":"edu.describe()","c150cde7":"edu['GEO']","9c919030":"edu.iloc[90:94][['TIME','GEO']]\n","5297778b":"edu.max(axis = 0)","141c11c3":"edu.head(8)","91ab7b16":"edu[edu['Value'] > 6.5].tail()","69d70399":"edu['Value'] > 6.5","b9c5a808":"edu[edu[\"Value\"].isnull()].head()","eeecdfde":"edu.max(axis = 0)","8e517678":"edu.max(axis = 1)","c19e17b9":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","ac98a28b":"s = edu[\"Value\"]\/100\ns.head()","be21b2e2":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","bd04694f":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","79f62c26":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","a8b5d3bb":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","922016d0":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","1a27d219":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","804aadcc":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","ff7e5204":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","9161e05c":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","e814f077":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","2c23bcb4":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","dbdd269a":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","74d64675":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","36f5b0d3":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","b17ccb58":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","f26f7b72":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","62867253":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","b09843c6":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","417696da":"Which is the size of the edu DataFrame (rows x columns)?\n**384 rows \u00d7 3 columns** \n","69188437":"cela affiche vrai ou faux pour v\u00e9rifier l'in\u00e9galit\u00e9 >6,5 pour chaque ligne","7735470c":"affiche le max valeurs de chaque colonne ","d6ae0787":".append per met d'ajouter une ligne de valeur dans le dataframe","2de34862":"importation des biblioth\u00e8ques : maplotlib (plt) ; pandas (pd) ; numpy (np)","902be7b8":"cr\u00e9ation d'un dataframe ","aadf78d9":"affiche les lignes pour lesquelles la valeur n'est pas d\u00e9finie (NAN : missing values)","021bd6e0":"affiche la valeur max de chaque ligne ","9acaad0d":"What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame\n\naffiche les lignes pour lesquelles la valeur de la serie VALUE est sup\u00e9rieure \u00e0 6.5. C'est une Serie. ","506d135f":"What does this index return? What does the first index represent? And the second one?\n\nCet index retourne les 4 valeurs entre la donn\u00e9e 90 et 93. TIME et GEO sont les series \u00e0 afficher.","7112966c":"What do you observe regarding the parameter ascending=False? les valeurs sont class\u00e9es dans l'ordre croissant \n\n","59d39a01":"changer la distribution des donn\u00e9es dans le tableau ","33662f17":"remplacer les valeurs non d\u00e9finies par 0","a527516b":"regroupement de donn\u00e9es","6304beee":"classer les valeurs par odre croissant ou d\u00e9croissant ","3b437146":"#**What happens if we give a number as argument to the method head()?** Si on choisit un argument de 2, cela permet d'afficher les 2 premi\u00e8res lignes. ","bdc37e24":"Which measures does the result show? It seems that it shows some default values, can you guess which ones?\n\nce sont des valeurs calcul\u00e9es pour caract\u00e9riser les donn\u00e9es (max, min, moyenne,...)","ff23cc1c":"en changeant l'argument je peux modifier le nombre de ligne que je souhaite afficher","aab3a954":"What does the method tail()return?\n'tail' affiche les derni\u00e8res lignes du tableau. De la meme facon, en choisissant un argument de 2, on peut choisir d'aficher suelement les 2 derni\u00e8res lignes. "}}