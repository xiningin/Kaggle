{"cell_type":{"d806a775":"code","a2da568f":"code","cb477b26":"code","7ac22b8e":"code","37304475":"code","a093a891":"code","696844c6":"code","89879908":"code","d99e9069":"code","63b237cd":"code","4a90ffb9":"markdown","613e9ef7":"markdown","bb93bac8":"markdown","547db4f1":"markdown","a055666c":"markdown","8792485a":"markdown","efb608b1":"markdown","714b9bde":"markdown","bebdd29f":"markdown","007e5c9b":"markdown"},"source":{"d806a775":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model\nfrom sklearn.metrics import r2_score","a2da568f":"data = pd.read_csv(\"\/kaggle\/input\/covid19-data-of-india\/covid_cases.csv\")\nprint(data.head())","cb477b26":"data = data[[\"Timestamp\",\"Number of cases\"]]\nprint(data)","7ac22b8e":"plt.scatter(data[\"Timestamp\"],data[\"Number of cases\"],color=\"blue\")\nplt.xlabel(\"Timestamp\")\nplt.ylabel(\"Number of cases\")\nplt.show()","37304475":"train = data[:(int((len(data)*0.8)))]\ntest = data[(int((len(data)*0.8))):]\npre_timestamp=(data[[\"Timestamp\"]][\"Timestamp\"].iloc[-1])+86400","a093a891":"regr = linear_model.LinearRegression()\n\ntrain_x=np.array(train[[\"Timestamp\"]])\ntrain_y=np.array(train[[\"Number of cases\"]])\n\nregr.fit(train_x,train_y)","696844c6":"plt.scatter(train[\"Timestamp\"], train[\"Number of cases\"], color=\"blue\")\nplt.plot(train_x, regr.coef_*train_x + regr.intercept_,'-r')\nplt.xlabel(\"Timestamp\")\nplt.ylabel(\"Number of cases\")","89879908":"def get_regression_predictions(input_features,intercept,slope):\n predicted_values = input_features*slope + intercept\n return predicted_values","d99e9069":"estimatd_cases = get_regression_predictions(pre_timestamp,regr.intercept_[0],regr.coef_[0][0])\nprint (\"Estimated Cases :\",str(int(estimatd_cases)))","63b237cd":"test_x = np.array(test[[\"Timestamp\"]])\ntest_y = np.array(test[[\"Number of cases\"]])\ntest_y_ = regr.predict(test_x)\n\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_-test_y)))\nprint(\"Mean sum of squares (MSE): %.2f\" % np.mean((test_y_ - test_y) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(test_y_ , test_y) )","4a90ffb9":"Reading from the .csv files","613e9ef7":"Fuction to get the prediction","bb93bac8":"Plotting the data","547db4f1":"Plotting the best fit","a055666c":"Predicting","8792485a":"Importing all the necessary libs.","efb608b1":"Checking for accuracy","714b9bde":"Training","bebdd29f":"Taking the necessary from the csv","007e5c9b":"80% for training\n20% for testing\nand taking the timestamp to predict on"}}