{"cell_type":{"41ed6ba5":"code","66831e12":"code","66d7afd2":"code","03e95490":"code","748bde4e":"code","9c37276b":"code","f43d0956":"code","cbfcbae2":"code","f0251c6f":"code","e11cca94":"code","287b8be9":"code","c97f946c":"code","4231e7ff":"code","413d4493":"code","d39fd54f":"code","c89e92aa":"code","6a499f5f":"code","8a128f56":"code","e4137ffb":"code","42cd484d":"code","855211e7":"code","2b96e47e":"code","65819a81":"markdown","e2a7e38c":"markdown","8d1a5c7f":"markdown","ea7f28e3":"markdown","2fe51c4b":"markdown","4856e9e1":"markdown","28e5dcef":"markdown","74293ef5":"markdown","16ccb603":"markdown","04b50bc6":"markdown","d147070b":"markdown","28c25183":"markdown","5de3b1d9":"markdown","612e99f1":"markdown","1a76c9c2":"markdown","c7dcf621":"markdown","efbac9d8":"markdown","be7715c3":"markdown","52e47c06":"markdown","11169928":"markdown","c1abd6bd":"markdown","4bedc154":"markdown","5a4d033c":"markdown","5c1c5125":"markdown","0e6f45dd":"markdown","d03638ac":"markdown","4958465d":"markdown","e160b853":"markdown","f863fdeb":"markdown","c486f15c":"markdown","055726dd":"markdown","67aaa95d":"markdown","83e543dc":"markdown","86812fb1":"markdown","56fb13d1":"markdown"},"source":{"41ed6ba5":"import pandas as pd, numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer","66831e12":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsubm = pd.read_csv('..\/input\/sample_submission.csv')","66d7afd2":"label_cols = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']\ntrain['none'] = 1-train[label_cols].max(axis=1)\ntrain.describe()","03e95490":"COMMENT = 'comment_text'\ntrain[COMMENT].fillna(\"unknown\", inplace=True)\ntest[COMMENT].fillna(\"unknown\", inplace=True)","748bde4e":"import re, string\nre_tok = re.compile(f'([{string.punctuation}\u201c\u201d\u00a8\u00ab\u00bb\u00ae\u00b4\u00b7\u00ba\u00bd\u00be\u00bf\u00a1\u00a7\u00a3\u20a4\u2018\u2019])')\ndef tokenize(s): return re_tok.sub(r' \\1 ', s).split()","9c37276b":"n = train.shape[0]\nvec = TfidfVectorizer(ngram_range=(1,2), tokenizer=tokenize,\n               min_df=3, max_df=0.9, strip_accents='unicode', use_idf=1,\n               smooth_idf=1, sublinear_tf=1 )\ntrn_term_doc = vec.fit_transform(train[COMMENT])\ntest_term_doc = vec.transform(test[COMMENT])","f43d0956":"trn_term_doc, test_term_doc","cbfcbae2":"def pr(y_i, y):\n    p = x[y==y_i].sum(0)\n    return (p+1) \/ ((y==y_i).sum()+1)","f0251c6f":"x = trn_term_doc\ntest_x = test_term_doc","e11cca94":"def get_mdl(y):\n    y = y.values\n    r = np.log(pr(1,y) \/ pr(0,y))\n    m = LogisticRegression(C=4, dual=True)\n    x_nb = x.multiply(r)\n    return m.fit(x_nb, y), r","287b8be9":"x = trn_term_doc\nj = label_cols[0]\nj","c97f946c":"y = train[j]\ny = y.values","4231e7ff":"p = x[y==1].sum(0)+1\nq = x[y==0].sum(0)+1","413d4493":"p_n_bk = p.sum()\nq_n_bk = q.sum()\nr_bk = np.log( (p\/p_n_bk) \/ (q\/q_n_bk))","d39fd54f":"np.allclose(r_bk, np.log(p\/q) + np.log(q_n_bk\/p_n_bk))","c89e92aa":"p_n_jh = (y==1).sum()+1\nq_n_jh = (y==0).sum()+1\nr_jh = np.log( (p\/p_n_jh) \/ (q\/q_n_jh))","6a499f5f":"np.allclose(r_jh, np.log(p\/q) + np.log(q_n_jh\/p_n_jh))","8a128f56":"cnst = np.log(q_n_jh\/p_n_jh) - np.log(q_n_bk\/p_n_bk)\ncnst","e4137ffb":"np.allclose(r_jh, r_bk + cnst)","42cd484d":"xm = x.multiply(r_bk) ","855211e7":"xmjh = x.multiply(r_jh)","2b96e47e":"np.allclose(xmjh.tocsr()[0].todense(), \n            (xm + x*cnst)[0].todense())","65819a81":"preds = np.zeros((len(test), len(label_cols)))\n\nfor i, j in enumerate(label_cols):\n    print('fit', j)\n    m,r = get_mdl(train[j])\n    preds[:,i] = m.predict_proba(test_x.multiply(r))[:,1]","e2a7e38c":"## Looking at the data\n\nThe training data contains a row per comment, with an id, the text of the comment, and 6 different labels that we'll try to predict.","8d1a5c7f":"So when it coms to the elementwise product.","ea7f28e3":"So `x*cnst` is all the difference that fed into the  logstic regression models. - hence JH's explanation: \"Normally yes, but here that is rolled into the bias term in the logistic regression automatically\".\n\n","2fe51c4b":"Therefore the `r` from the paper and the `r` from JH's kernel only differs by a constant `np.log(q_n_bk\/p_n_bk) - np.log(q_n_jh\/p_n_jh)`","4856e9e1":"We'll create a list of all the labels to predict, and we'll also create a 'none' label so we can see how many comments have no labels. We can then summarize the dataset.","28e5dcef":"Take the first label.","74293ef5":"submid = pd.DataFrame({'id': subm[\"id\"]})\nsubmission = pd.concat([submid, pd.DataFrame(preds, columns = label_cols)], axis=1)\nsubmission.to_csv('submission.csv', index=False)","16ccb603":"JH kernel version `xmjh`","04b50bc6":"Many question about how `r` is computed. In the paper it's equation (2) which uses l1 norm, but the above used the length (`(y==y_i).sum()`). We take one label and break down the steps to calculate `r`. ","d147070b":"The length of the comments varies a lot.","28c25183":"Here's a couple of examples of comments, one toxic, and one with no labels.","5de3b1d9":"In Jeremy Howard's Kernel [NB-SVM strong linear baseline](https:\/\/www.kaggle.com\/jhoward\/nb-svm-strong-linear-baseline),  the log-count ratio `r` (in equation (2) of [Baselines and Bigrams: Simple, Good Sentiment and Topic Classi\ufb01cation](https:\/\/nlp.stanford.edu\/pubs\/sidaw12_simple_sentiment.pdf)) is implemented differently from the paper: the paper uses l1 norm, and the kernel used the vector length (`(y==y_i).sum()`). Many have questions about this and JH's explanation: \"Normally yes, but here that is rolled into the bias term in the logistic regression automatically.\"\n\nThe last part of this notebook \"Explain the 1norm\" looks into this difference and provides some explanation. The rest of the orginal \"NB-SVM strong linear baseline\" kernel is left unchanged.","612e99f1":"## Building the model\n\nWe'll start by creating a *bag of words* representation, as a *term document matrix*. We'll use ngrams, as suggested in the NBSVM paper.","1a76c9c2":"## Explain the 1norm","c7dcf621":"We can see that because \"logAB=logA+logB\", `r` can be broken down to `np.log(p\/q)` and `np.log(q_n_bk\/p_n_bk)`, where the L1 norms only appears in the 2nd part.","efbac9d8":"This is the paper implementation of the L1 norms `p_n_bk` and `q_n_bk`. (`p` and `q` are positive so l1 norm is just the sum).","be7715c3":"lens = train.comment_text.str.len()\nlens.mean(), lens.std(), lens.max()","52e47c06":"We have `xmjh = xm + x*cnst`","11169928":"This is JH's implementation in the kernel. Instead of the L1 norm, the normalizing terms are vector length `p_n_jh` and `q_n_jh`.","c1abd6bd":"And finally, create the submission file.","4bedc154":"train['comment_text'][0]","5a4d033c":"train['comment_text'][2]","5c1c5125":"Use `p` and `q` and the paper does.","0e6f45dd":"There are a few empty comments that we need to get rid of, otherwise sklearn will complain.","d03638ac":"This creates a *sparse matrix* with only a small number of non-zero elements (*stored elements* in the representation  below).","4958465d":"Fit a model for one dependent at a time:","e160b853":"We can see that because \"logAB=logA+logB\", `r` can be broken down to `np.log(p\/q)` and `np.log(q_n_jh\/p_n_jh)`, where the normalizing terms only appears in the 2nd part.","f863fdeb":"Paper version `xm`","c486f15c":"Here's the basic naive bayes feature equation:","055726dd":"It turns out that using TF-IDF gives even better priors than the binarized features used in the paper. I don't think this has been mentioned in any paper before, but it improves leaderboard score from 0.59 to 0.55.","67aaa95d":"train.head()","83e543dc":"## Introduction\n\nThis kernel shows how to use NBSVM (Naive Bayes - Support Vector Machine) to create a strong baseline for the [Toxic Comment Classification Challenge](https:\/\/www.kaggle.com\/c\/jigsaw-toxic-comment-classification-challenge) competition. NBSVM was introduced by Sida Wang and Chris Manning in the paper [Baselines and Bigrams: Simple, Good Sentiment and Topic Classi\ufb01cation](https:\/\/nlp.stanford.edu\/pubs\/sidaw12_simple_sentiment.pdf). In this kernel, we use sklearn's logistic regression, rather than SVM, although in practice the two are nearly identical (sklearn uses the liblinear library behind the scenes).\n\nIf you're not familiar with naive bayes and bag of words matrices, I've made a preview available of one of fast.ai's upcoming *Practical Machine Learning* course videos, which introduces this topic. Here is a link to the section of the video which discusses this: [Naive Bayes video](https:\/\/youtu.be\/37sFIak42Sc?t=3745).","86812fb1":"len(train),len(test)","56fb13d1":"lens.hist();"}}