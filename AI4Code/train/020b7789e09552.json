{"cell_type":{"a3fd30e6":"code","efe779a5":"code","969c54ea":"code","806836b9":"code","17dce68c":"code","955b20b9":"code","5b43c257":"code","1fef9ca8":"code","6cc7f442":"code","9790af83":"code","c16e0788":"code","305aa5f4":"code","0cd1bbf6":"code","6310fd41":"code","f734faea":"code","8d8ca465":"code","8d020f20":"code","4360f064":"code","a227863e":"code","b08f06cf":"code","4db0a781":"code","3baddf23":"code","15da1b5e":"code","6ba3183f":"code","451414b4":"code","3317ca01":"code","ad82f2fd":"code","67263eca":"code","1174568c":"code","a30c31e5":"code","08df526a":"code","015708a2":"code","029a798c":"code","5ab2ad6b":"code","a17df7d0":"code","869b513d":"code","7276ac9f":"code","450602dc":"code","cad1e47b":"code","30d09b9c":"code","c4e30303":"code","a9603f1a":"code","922bf2c8":"code","c3c499eb":"code","618b512e":"code","eb30f5b2":"code","3bf77304":"code","aa4d47f7":"code","554cf73a":"markdown","9cd2e01d":"markdown","9ca4c0f0":"markdown","0a3110be":"markdown","79d501e1":"markdown","676ed87f":"markdown","6a57b341":"markdown","18b0923b":"markdown","17870c75":"markdown","436a4e9c":"markdown","12c9d66b":"markdown","4e7cf781":"markdown","45648fb6":"markdown","6511109f":"markdown","212aa5e0":"markdown","7c6f3436":"markdown","b8030558":"markdown","12a191e1":"markdown"},"source":{"a3fd30e6":"#import libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n%matplotlib inline\n#import data\ndata = pd.read_csv(\"..\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv\")\n#preview top five rows in the dataset\ndata.head()","efe779a5":"#check the number of row and columns in the imported data\ndata.shape   #614 rows and 13 columns","969c54ea":"#check the description of the data such as mean,count, min, max for each numeric cell\ndata.describe()","806836b9":"data[\"Credit_History\"].median() #median value of 1","17dce68c":"#check if Credit_History is in % or 0 and 1 values\ndata.groupby([\"Credit_History\"])[\"Loan_ID\"].count() ","955b20b9":"#check the number of null records per column\ndata.isnull().sum()\n","5b43c257":"#remove the Loan_ID column as it's not needed as an independent variable for the model. \n#it's just an ID to uniquely identify each row and does not describe the data in anyway.\ndata = data.drop(columns = (\"Loan_ID\") )\ndata.head()","1fef9ca8":"#Drop null values in all the categorical columns\ndata = data.dropna(subset = [\"Gender\",\"Married\",\"Dependents\",\"Education\",\"Self_Employed\",\"Credit_History\",\"Property_Area\"])\ndata.isnull().sum()","6cc7f442":"#Fill null values in columns with continous data with the mean of each column\ndata[\"LoanAmount\"] = data[\"LoanAmount\"].fillna(data[\"LoanAmount\"].mean())\ndata[\"Loan_Amount_Term\"] = data[\"Loan_Amount_Term\"].fillna(data[\"Loan_Amount_Term\"].mean())\ndata.isnull().sum()","9790af83":"#Loan Status by Marital Status\nsb.countplot(x=data[\"Married\"], hue = data[\"Loan_Status\"], data = data)","c16e0788":"#LoanAmount distribution\ndata[\"LoanAmount\"].plot.hist(data[\"LoanAmount\"])","305aa5f4":"fig = data.groupby(\"Dependents\")[\"Loan_Status\"].count().plot.bar(color = \"red\")\nfig.set_ylabel('Count')\nfig.set_title(\"Count of loans requested by No of Dependents\")\n\n\n","0cd1bbf6":"#Check for correlation between all numeric columns\nplt.title('Correlation Matrix')\nsb.heatmap(data.corr(),annot=True)","6310fd41":"#this scatter plot also shows the correlation above.\ndata.plot.scatter(\"ApplicantIncome\", \"LoanAmount\", color = \"blue\")","f734faea":"data.groupby([\"Gender\"])[\"Loan_Status\"].count() #Female and Male","8d8ca465":"data.groupby([\"Married\"])[\"Loan_Status\"].count() #Yes and No","8d020f20":"data.groupby([\"Dependents\"])[\"Loan_Status\"].count() #0, 1, 2, 3+ and Male","4360f064":"data.groupby([\"Education\"])[\"Loan_Status\"].count() #Graduate and Non Graduate","a227863e":"data.groupby([\"Self_Employed\"])[\"Loan_Status\"].count() #Yes or No","b08f06cf":"data.groupby([\"Loan_Status\"])[\"Loan_Status\"].count() #Y or N","4db0a781":"data.groupby([\"Property_Area\"])[\"Loan_Status\"].count() #Rural, Semiurban or Urban","3baddf23":"data[\"Gender\"] = data[\"Gender\"].replace([\"Female\",\"Male\"], [0, 1])\ndata[\"Married\"] = data[\"Married\"].replace([\"No\",\"Yes\"], [0, 1])\ndata[\"Dependents\"] = data[\"Dependents\"].replace([\"0\",\"1\",\"2\",\"3+\"], [0, 1,2,3])\ndata[\"Education\"] = data[\"Education\"].replace([\"Not Graduate\",\"Graduate\"], [0, 1])\ndata[\"Self_Employed\"] = data[\"Self_Employed\"].replace([\"No\",\"Yes\"], [0, 1])\ndata[\"Loan_Status\"] = data[\"Loan_Status\"].replace([\"N\",\"Y\"], [0, 1])\ndata[\"Property_Area\"] = data[\"Property_Area\"].replace([\"Rural\",\"Semiurban\", \"Urban\"], [0, 1, 2])\ndata.head()","15da1b5e":"#check data types of all the columns to make sure they are all numeric (float or integer)\ndata.dtypes","6ba3183f":"fig, ax = plt.subplots(figsize=(10,5))  \nsb.heatmap(data.corr(),annot = True, ax=ax)\n\n","451414b4":"#Import libraries\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score\n\n#Define x and y (independent variable(s) and dependent variable respectively)\ny = pd.DataFrame(data.iloc[:,11:])\nx = pd.DataFrame(data.iloc[:,0:11])\n\n#Split the data into training and testing data\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.30, random_state = 1)\n\n#Initialize and fit Logistic Regression Model\nclassifier = LogisticRegression(max_iter = 10000)\nclassifier.fit(x_train,y_train.values.ravel())","3317ca01":"#Pass the test data (x_test) to the model to predict y\ny_pred = classifier.predict(x_test)\ny_pred","ad82f2fd":"#score your model\nclassifier.score(x_train,y_train)","67263eca":"confusion_matrix(y_test,y_pred)","1174568c":"#check the share of total predictions that were accurate (possitive and negative)\naccuracy_score(y_test,y_pred)","a30c31e5":"#check the share of total positive prediction that were accurate\nprecision_score(y_test,y_pred)","08df526a":"#checks the share of all the positives in the test data that the model was able to accurately predict\nrecall_score(y_test,y_pred)","015708a2":"#weighted average of the precision score and recall score\nf1_score(y_test,y_pred)","029a798c":"#Initialize and fit Decision Tree Model\ndt_classifier = DecisionTreeClassifier()\ndt_classifier.fit(x_train,y_train)","5ab2ad6b":"#Pass the test data (x_test) to the model to predict y\ndt_y_pred = dt_classifier.predict(x_test)\ndt_y_pred","a17df7d0":"#score your model\ndt_classifier.score(x_train,y_train)","869b513d":"confusion_matrix(y_test,dt_y_pred)","7276ac9f":"#check the share of total predictions that were accurate (both positive and negative)\naccuracy_score(y_test,dt_y_pred)","450602dc":"#check the share of total positive prediction that were accurate\nprecision_score(y_test,dt_y_pred)","cad1e47b":"#checks the share of all the positives in the test data that the model was able to accurately predict\nrecall_score(y_test,dt_y_pred)","30d09b9c":"#weighted average of the precision score and recall score\nf1_score(y_test,dt_y_pred)","c4e30303":"#Initialize and fit Random Forest Model\nrf_classifier = RandomForestClassifier()\nrf_classifier.fit(x_train,y_train.values.ravel())","a9603f1a":"#Pass the test data (x_test) to the model to predict y\nrf_y_pred = rf_classifier.predict(x_test)\nrf_y_pred","922bf2c8":"#score your model\nrf_classifier.score(x_train,y_train)","c3c499eb":"confusion_matrix(y_test,rf_y_pred)","618b512e":"#check the share of total predictions that were accurate (both positive and negative)\naccuracy_score(y_test,rf_y_pred)","eb30f5b2":"#check the share of total positive prediction that were accurate\nprecision_score(y_test,rf_y_pred)","3bf77304":"#checks the share of all the positives in the test data that the model was able to accurately predict\nrecall_score(y_test,rf_y_pred)","aa4d47f7":"#weighted average of the precision score and recall score\nf1_score(y_test,rf_y_pred)","554cf73a":"Replace all non numeric category data to integers e.g. Yes and No to 1 and 0 for better model performance","9cd2e01d":"This shows that Credit_History is a categorical data with 0 and 1 values (Good or Bad)","9ca4c0f0":"**EXPLORATORY ANALYSIS**","0a3110be":"#From the correlation matrix, we can see that Credit_History has the highest correlation with the Loan_Status which makes sense as your credit history should determine to a large extent if you can access a loan or not.","79d501e1":"It can be deduced from the chart above that there's a correlation between the Loan Amount and the income of both the Applicant and Coapplicant.","676ed87f":"**DECISION TREE**","6a57b341":"**HANDLING NULL VALUES**","18b0923b":"**IMPORT LIBRARIES AND LOAD DATA**","17870c75":"Task: Create a Machine Learning model that approves or decline a loan application based on the information provided.\n\nProblem Type: Binary Classification.\n\nPublished by Adedayo Okubanjo.","436a4e9c":"**Logistic Regression has the best accuracy score followed by Random Forest then Decision Tree.**\n\n1) Logistics Regression\n* Accuracy Score = 81%\n* Recall Score = 99%\n* Precision Score = 77%\n* F1_Score = 87%\n\n2) Decision Tree\n* Accuracy Score = 73%\n* Recall Score = 80%\n* Precision Score = 78%\n* F1_Score = 79%\n\n3) Random Forest\n* Accuracy Score = 78%\n* Recall Score = 94%\n* Precision Score = 77%\n* F1_Score = 85%","12c9d66b":"There are outlier in the loan amount but most of the loans are around the 100 to < 200 range.","4e7cf781":"**LOGISTIC REGRESSION**","45648fb6":"Logistics Regression\n\n* Accuracy Score = 81%\n* Recall Score = 99%\n* Precision Score = 77%\n* F1_Score = 87%\n\nDecision Tree\n* Accuracy Score = 73%\n* Recall Score = 80%\n* Precision Score = 78%\n* F1_Score = 79%","6511109f":"**RANDOM FOREST**","212aa5e0":"From previewing the data, we can already see that we need to convert some of the independent variables to integers: Gender, Married, Education, Self_Employed and Property_Area to integers.","7c6f3436":"Looking deeper into the credit history column shows","b8030558":"Logistics Regression performed well (Accuracy of 81%)\n\n* Accuracy Score = 81%\n* Recall Score = 99%\n* Precision Score = 77%\n* F1_Score = 87%","12a191e1":"We can already see that Credit_History is between 0 and 1 from the min and max rows and with 75% of the records having value as 1.\n\nCredit_History column also has a mean of 0.842199."}}