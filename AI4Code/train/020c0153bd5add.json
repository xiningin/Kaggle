{"cell_type":{"410d838f":"code","6423b41b":"code","efd3d5f2":"code","ba11b541":"code","44c24a04":"code","d41a05d0":"code","68e4928b":"code","f159a9b3":"code","557206b5":"code","0398042a":"code","0a5b30c5":"code","436f7ae0":"code","eda96094":"code","ae450857":"code","e1a0455a":"markdown","1364fb52":"markdown","ff0d7f7b":"markdown","917ac285":"markdown"},"source":{"410d838f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6423b41b":"import matplotlib.pyplot as plt\ndf=pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")","efd3d5f2":"\ndf.info() #Data has 6 features and 1 class object. All features are float.","ba11b541":"df.head() #We can see in head table, our features numeric ranges are different among them.","44c24a04":"df[\"class\"] = [1 if i == \"Abnormal\" else 0 for i in df[\"class\"]] #We convert our class to 0-1 from Normal-Abnormal.","d41a05d0":"np.unique(df[\"class\"]) #Control the changing.","68e4928b":"AN = df[df[\"class\"]==1] #Class of abnormal(1) was stored on AN\nN=df[df[\"class\"]==0]#Class of normal(0) was stored on N\n\nAN.info()\nN.info()","f159a9b3":"plt.scatter(AN.sacral_slope,AN.pelvic_radius,color=\"blue\",label=\"Abnormal\")\nplt.scatter(N.sacral_slope,N.pelvic_radius,color=\"green\",label=\"Normal\")\nplt.xlabel(\"Sacral Slope\")\nplt.xlabel(\"Pelvic Radius\")\nplt.legend()\nplt.show() #These two features does not help to classify the normal\/abnormal","557206b5":"plt.scatter(AN.pelvic_incidence,AN.pelvic_radius,color=\"blue\",label=\"Abnormal\")\nplt.scatter(N.pelvic_incidence,N.pelvic_radius,color=\"green\",label=\"Normal\")\nplt.xlabel(\"Pelvic Incidence\")\nplt.xlabel(\"Pelvic Radius\")\nplt.legend()\nplt.show()#These two features does not help to classify the normal\/abnormal(nearly same with previous graph)","0398042a":"y=df[\"class\"].values\nx_data=df.drop([\"class\"],axis=1).values\n","0a5b30c5":"#Normalization\nx=(x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data))","436f7ae0":"#Train-Test Split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n","eda96094":"#KNN Model\n\nfrom sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=5)\nknn.fit(x_train,y_train)\nprediction=knn.predict(x_test)\n\n\nprint(\"{} nn score: {}\".format(5,knn.score(x_test,y_test)))","ae450857":"#Find k values\n\nscore_list=[]\nfor each in range(1,50):\n    knn2=KNeighborsClassifier(n_neighbors=each)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\nplt.plot(range(1,50),score_list)\nplt.xlabel(\"k values\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show() #Helping with this graph,we can see wich k value has the max accuracy for our data set.","e1a0455a":"<a id = \"1\"><a><br>\nDefinition dataset","1364fb52":"# INTRODUCTION # \n\n2C Weka.csv was used in this kernel.This data set has 2 different class as abnormal and normal.\nWe will use KNN Classifier.\n\nContent : \n\n1. [Definition dataset](#1)\n1. [Visualization](#2)\n1. [KNN Algorithm](#3)","ff0d7f7b":"<a id =\"2\"><a><br>\n**Visualization**","917ac285":"<a id =\"3\"><a><br>\n**KNN Algorithm**"}}