{"cell_type":{"d709adef":"code","c6df108b":"code","50d90ed6":"code","6ed7d3d2":"code","363f9e00":"code","a40b6051":"code","12e4bd8d":"code","322f0e36":"code","3908e212":"code","00a8f4d4":"code","e0388b86":"code","59a8cf13":"code","97ca74bc":"code","5fb7556d":"code","eb90e002":"code","ae9389a0":"code","cf3153e0":"code","5cc11515":"code","c69c8550":"code","f7dc1425":"code","f83c8cb5":"code","74094b60":"code","70d1887d":"code","b7160e6c":"code","c1c72db4":"code","e81c956b":"code","9a353caa":"code","da5b1235":"code","62e66cf6":"code","a8dcbe2e":"code","c1cecf52":"code","08cbec05":"code","d365f5ad":"code","b199f458":"code","1967e0f2":"code","e4a8fc36":"markdown","1484e908":"markdown","b35992ea":"markdown","2a2b29db":"markdown","86c169ef":"markdown","2e5b0303":"markdown","e0d81753":"markdown","7eb53620":"markdown","ae4c1d25":"markdown","de39ed59":"markdown","bd4963e6":"markdown","9e1c470a":"markdown","de2ca704":"markdown","86e8db73":"markdown","0e0fdb38":"markdown","f15e6b15":"markdown","3cd34be1":"markdown","f98fbe11":"markdown","4476de89":"markdown","1b17e1d4":"markdown","cfc0a84c":"markdown","827a9b5c":"markdown"},"source":{"d709adef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom sklearn import datasets\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c6df108b":"carvaan_insurance = pd.read_csv('\/kaggle\/input\/caravan-insurance-challenge\/caravan-insurance-challenge.csv')\ncarvaan_insurance","50d90ed6":"rename_carvaan_insurance = carvaan_insurance.rename({'MOSTYPE':'Customer_Subtype',\n                          'MAANTHUI':'Number_of_houses',\n                          'MGEMOMV':'Avg_size_household',\n                          'MGEMLEEF':'Avg_age',\n                          'MOSHOOFD':'Customer_main_type',\n                          'MGODRK':'Roman_catholic',\n                          'MGODPR':'Protestant',\n                           'MGODOV':'Other_religion',\n                           'MGODGE':'No_religion',\n                           'MRELGE':'Married',\n                           'MRELSA':'Living_together',\n                           'MRELOV':'Other_relation',\n                           'MFALLEEN':'Singles',\n                           'MFGEKIND':'Household_without_children',\n                           'MFWEKIND':'Household_with_children',\n                           'MOPLHOOG':'Highlevel_education',\n                           'MOPLMIDD':'Mediumlevel_education',\n                           'MOPLLAAG':'Lowerlevel_education',\n                           'MBERHOOG':'High_status',\n                           'MBERZELF':'Entrepreneur',\n                           'MBERBOER':'Farmer',\n                           'MBERMIDD':'Middle_management',\n                           'MBERARBG':'Skilled_labourers',\n                           'MBERARBO':'Unskilled_labourers',\n                           'MSKA':'Socialclass_A',\n                           'MSKB1':'Socialclass_B1',\n                           'MSKB2':'Socialclass_B2',\n                           'MSKC':'Socialclass_C',\n                           'MSKD':'Socialclass_D',\n                           'MHHUUR':'Rented_house',\n                           'MHKOOP':'Home_owners',\n                           'MAUT1':'1_car',\n                           'MAUT2':'2_cars',\n                           'MAUT0':'No_car',\n                           'MZFONDS':'National_HealthService',\n                           'MZPART':'Private_health_insurance',\n                           'MINKM30':'Income_30',\n                           'MINK3045':'Income30_45',\n                           'MINK4575':'Income45_75',\n                           'MINK7512':'Income75_122',\n                           'MINK123M':'Income_123',\n                           'MINKGEM':'Average_income',\n                           'MKOOPKLA':'Purchasing_power_class',\n                           'PWAPART':'private_thirdparty_insurance',\n                          'PWABEDR':'thirdparty_insurance_firms',\n                          'PWALAND':'thirdparty_insurance_agriculture',\n                          'PPERSAUT':'car_policies',\n                          'PBESAUT':'delivery van policies',\n                          'PMOTSCO':'motorcycle\/scooter_policies',\n                          'PVRAAUT':'lorry_policies',\n                           'PAANHANG':'trailer_policies',\n                           'PTRACTOR':'tractor_policies',\n                           'PWERKT':'agricultural_machines_policies',\n                           'PBROM':'moped_policies',\n                           'PLEVEN':'life_insurances',\n                           'PPERSONG':'private_accident_insurance_policies',\n                           'PGEZONG':'family_accidents_insurance_policies',\n                           'PWAOREG':'disability_insurance_policies',\n                           'PBRAND':'fire_policies',\n                           'PZEILPL':'surfboard_policies',\n                           'PPLEZIER':'boat_policies',\n                           'PFIETS':'bicycle_policies',\n                           'PINBOED':'property_insurance_policies',\n                           'PBYSTAND':'social_security_insurance_policies',\n                           'AWAPART':'private_thirdparty_insurance_1_12',\n                           'AWABEDR':'Number_thirdparty_insurance_firms',\n                           'AWALAND':'Number_thirdparty_insurance_agriculture',\n                           'APERSAUT':'Number_car_policies',\n                           'ABESAUT':'Number_delivery_van_policies',\n                           'AMOTSCO':'Number_motorcycle\/scooter_policies',\n                           'AVRAAUT':'Number_lorry_policies',\n                           'AAANHANG':'Number_trailer_policies',\n                           'ATRACTOR':'Number_tractor_policies',\n                           'AWERKT':'Number_agricultural_machines_policies',\n                           'ABROM':'Number_moped_policies',\n                           'ALEVEN':'Number_life_insurances',\n                           'APERSONG':'Number_privatAvg_size_householde_accident_insurance_policies',\n                           'AGEZONG':'Number_family_accidents_insurance_policies',\n                           'AWAOREG':'Number_disability_insurance_policies',\n                           'ABRAND':'Number_fire_policies',\n                           'AZEILPL':'Number_surfboard_policies',\n                           'APLEZIER':'Number_boat_policies',\n                           'AFIETS':'Number_bicycle_policies',\n                           'AINBOED':'Number_property_insurance_policies',\n                           'ABYSTAND':'Number_social_security_insurance_policies',\n                           'CARAVAN':' Number_mobilehome_policies_0_1'}, \n                 axis=1)\n \n#rename_carvaan_insurance","6ed7d3d2":"# pd.set_option('display.max_columns', None)\n# pd.set_option('display.max_rows', None)\n# rename_carvaan_insurance['Income_30'].value_counts()\n# rename_carvaan_insurance['Income30_45'].value_counts()\n# rename_carvaan_insurance['Income45_75'].value_counts()\n# rename_carvaan_insurance['Income75_122'].value_counts()\n# rename_carvaan_insurance['Income_123'].value_counts()\n# rename_carvaan_insurance['Private_health_insurance'].value_counts()","363f9e00":"rename_carvaan_insurance.describe()","a40b6051":"carvaan_correlation = rename_carvaan_insurance[['Number_of_houses','Avg_age','Average_income','Customer_main_type','Roman_catholic','No_religion','Private_health_insurance','Avg_size_household','Home_owners','Married','Number_family_accidents_insurance_policies','Number_disability_insurance_policies','Number_fire_policies','Number_surfboard_policies','Number_boat_policies','Number_bicycle_policies','Number_property_insurance_policies','Number_social_security_insurance_policies']]\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\na = carvaan_correlation.corr()\na.head(20)","12e4bd8d":"correlation_carvaan = sns.clustermap(carvaan_correlation.iloc[:, 1:20].corr(), annot=True, fmt = \".2f\", cmap = \"coolwarm\")\ncorrelation_carvaan","322f0e36":"# g = sns.clustermap(rename_carvaan_insurance.iloc[:, 1:20].corr(), annot=True, fmt = \".2f\", cmap = \"coolwarm\")\n# g","3908e212":"sns.distplot(rename_carvaan_insurance[\"Average_income\"], bins=16, color=\"purple\")","00a8f4d4":"sns.distplot(rename_carvaan_insurance[\"Private_health_insurance\"], bins=16, color=\"blue\")","e0388b86":"sns.set_style('ticks')\nsns.jointplot(x = 'Highlevel_education', y = 'Average_income', data = rename_carvaan_insurance, kind='kde')","59a8cf13":"sns.set_style('ticks')\nsns.jointplot(x = 'Number_fire_policies', y = 'Average_income', data = rename_carvaan_insurance, kind='kde')","97ca74bc":"sns.set_style('ticks')\nsns.jointplot(x = 'Home_owners', y = 'Average_income', data = rename_carvaan_insurance, kind='kde')","5fb7556d":"sns.set_style('ticks')\nsns.jointplot(x = 'Average_income', y = 'Private_health_insurance', data = rename_carvaan_insurance, kind='kde')","eb90e002":"#x = rename_carvaan_insurance[['Average_income','Highlevel_education','Household_with_children','Married','Number_of_houses','Home_owners']]\nx = rename_carvaan_insurance[['Average_income']]\ny = rename_carvaan_insurance[['Private_health_insurance']]\nmodel_insurances = sm.OLS(x,y).fit()\nprediction_insurances = model_insurances.predict(x)\nmodel_insurances.summary()","ae9389a0":"# rename_carvaan_insurance.plot(x='Private_health_insurance', y='Average_income', style='o')\n# plt.title('Average Income vs Private Health Insurance')\n# plt.xlabel('Incomes')\n# plt.ylabel('Percentage Insurance')\n# plt.show()","cf3153e0":"x = rename_carvaan_insurance[['Average_income']]\ny = rename_carvaan_insurance[['Private_health_insurance']]\nx = sm.add_constant(x)\nmodel_insurances = sm.OLS(y,x).fit()\nprediction_insurances = model_insurances.predict(x)\nmodel_insurances.summary()","5cc11515":"fig = sm.graphics.plot_partregress_grid(model_insurances, fig=plt.figure(figsize=(20,12)))","c69c8550":"# X = rename_carvaan_insurance\n# Y = rename_carvaan_insurance[\"Average_income\"]\ncarvaan_insurances = rename_carvaan_insurance.drop([\"ORIGIN\"], axis = 1)\n#carvaan_insurances","f7dc1425":"X = carvaan_insurances[['Average_income']]\nY = rename_carvaan_insurance[['Private_health_insurance']]\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)\nlm = LinearRegression()\nmodel = lm.fit(X_train,Y_train)\npredictions = lm.predict(X)\nlm.score(X,Y)","f83c8cb5":"X = carvaan_insurances[['Number_of_houses','Avg_size_household','Avg_age','Customer_main_type','Roman_catholic','No_religion','Private_health_insurance','Avg_size_household','Home_owners','Number_fire_policies','Married','Number_family_accidents_insurance_policies','Number_disability_insurance_policies','Number_fire_policies','Number_surfboard_policies','Number_boat_policies','Number_privatAvg_size_householde_accident_insurance_policies','Number_bicycle_policies','Number_property_insurance_policies','Number_social_security_insurance_policies']]\nY = carvaan_insurances[['Average_income']]\nX = sm.add_constant(X)\nmodel_insurances = sm.OLS(Y,X).fit()\nprediction_insurances = model_insurances.predict(X)\nmodel_insurances.summary()","74094b60":"# X = carvaan_insurances.iloc[:,:-1].values\n# Y = carvaan_insurances.iloc[:,1].values\n# X = X.drop(\"Average_income\", 1)\nX = carvaan_insurances[['Number_of_houses','Avg_size_household','Avg_age','Customer_main_type','Roman_catholic','No_religion','Private_health_insurance','Avg_size_household','Home_owners','Number_fire_policies','Married','Number_family_accidents_insurance_policies','Number_disability_insurance_policies','Number_fire_policies','Number_surfboard_policies','Number_boat_policies','Number_privatAvg_size_householde_accident_insurance_policies','Number_bicycle_policies','Number_property_insurance_policies','Number_social_security_insurance_policies']]\nY = carvaan_insurances[['Average_income']]\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)\nlm = LinearRegression()\nmodel = lm.fit(X_train,Y_train)\npredictions = lm.predict(X)\nmodel.score(X,Y)","70d1887d":"model.coef_","b7160e6c":"model.intercept_","c1c72db4":"The result should be approximately Coefficent:\n        -9.49373079e-02,  7.81713841e-02, -1.00978615e-01,\n        -7.96435261e-02,  1.05429362e-01,  3.78331605e-02,\n         1.66272892e-01,  7.81713841e-02,  9.77441286e-02,\n         5.33136190e-03,  1.08002079e-01,  8.67035422e-02,\n        -4.21708707e-01,  5.33136190e-03, -2.02242846e-01,\n         2.28472449e-04, -1.68738803e-01,  7.29316616e-02,\n         2.78768154e-01,  2.87326091e-02 and\nThe result should be approximately Coefficent is 2.45819083 respectively.\n\nNow that we have trained our algorithm, it\u2019s time to make some predictions. To do so, we will use our test data and see how accurately our algorithm predicts the percentage score. ","e81c956b":"y_pred = model.predict(X_test)\ny_pred","9a353caa":"X = carvaan_insurances[['Average_income']].values.reshape(-1,1)\nY = carvaan_insurances[['Private_health_insurance']].values.reshape(-1,1)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)\nlm = LinearRegression()\nmodel = lm.fit(X_train,Y_train)\npredictions = lm.predict(X)\nmodel.score(X,Y)\nY_test = np.array(list(Y_test))\ny_pred = np.array(y_pred)\nPredicted_Actual = pd.DataFrame({'Actual': Y_test.flatten(), 'Predicted': y_pred.flatten()})\nPredicted_Actual.head(25)","da5b1235":"flatten_Graph = Predicted_Actual.head(25)\nflatten_Graph.plot(kind='bar',figsize=(16,10))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","62e66cf6":"X1 = carvaan_insurances[['Number_of_houses','Avg_size_household','Avg_age','Customer_main_type','Roman_catholic','No_religion','Private_health_insurance','Avg_size_household','Home_owners','Number_fire_policies','Married','Number_family_accidents_insurance_policies','Number_disability_insurance_policies','Number_fire_policies','Number_surfboard_policies','Number_boat_policies','Number_privatAvg_size_householde_accident_insurance_policies','Number_bicycle_policies','Number_property_insurance_policies','Number_social_security_insurance_policies']]\nY1 = carvaan_insurances[['Private_health_insurance']]\n# X = X.drop(\"Average_income\", 1)\nX_train, X_test, Y_train, Y_test = train_test_split(X1, Y1, test_size=0.2, random_state=0)\nlm1 = LinearRegression()\nmodel = lm1.fit(X_train,Y_train)\npredictions = lm1.predict(X1)\nlm1.score(X1,Y1)","a8dcbe2e":"lm1.coef_","c1cecf52":"lm1.intercept_","08cbec05":"from sklearn.metrics import accuracy_score, mean_squared_error\npredictions = lm.fit(X_train,Y_train).predict(X_test)\nprint(mean_squared_error(predictions, Y_test))","d365f5ad":"# features_cols = ['Private_health_insurance','Home_owners','Number_fire_policies','Married']\n# X = carvaan_insurances[features_cols]\n# Y = carvaan_insurances[\"Average_income\"]\nX = carvaan_insurances[['Average_income']]\n# X = X.drop(\"Average_income\", 1)\nY = carvaan_insurances[['Number_of_houses','Avg_size_household','Avg_age','Customer_main_type','Roman_catholic','No_religion','Private_health_insurance','Avg_size_household','Home_owners','Number_fire_policies','Married','Number_family_accidents_insurance_policies','Number_disability_insurance_policies','Number_fire_policies','Number_surfboard_policies','Number_boat_policies','Number_privatAvg_size_householde_accident_insurance_policies','Number_bicycle_policies','Number_property_insurance_policies','Number_social_security_insurance_policies']]\nlinear_regressor = LinearRegression()  # create object for the class\nlinear_regressor.fit(X, Y)  # perform linear regression\nlist(zip(features_cols,linear_regressor.coef_ ))","b199f458":"X2 = carvaan_insurances[['Average_income']]\n# X = X.drop(\"Average_income\", 1)\nY2 = carvaan_insurances[['Number_of_houses','Avg_size_household','Avg_age','Customer_main_type','Roman_catholic','No_religion','Private_health_insurance','Avg_size_household','Home_owners','Number_fire_policies','Married','Number_family_accidents_insurance_policies','Number_disability_insurance_policies','Number_fire_policies','Number_surfboard_policies','Number_boat_policies','Number_privatAvg_size_householde_accident_insurance_policies','Number_bicycle_policies','Number_property_insurance_policies','Number_social_security_insurance_policies']]\nlinear_regressor = LinearRegression()  # create object for the class\nlinear_regressor.fit(X2, Y2)  # perform linear regression\nlist(zip(X2,linear_regressor.coef_ ))","1967e0f2":"X1 = carvaan_insurances[['Private_health_insurance']]\n# X = X.drop(\"Average_income\", 1)\nY1 = carvaan_insurances[['Number_of_houses','Avg_size_household','Average_income','Avg_age','Customer_main_type','Roman_catholic','No_religion','Avg_size_household','Home_owners','Number_fire_policies','Married','Number_family_accidents_insurance_policies','Number_disability_insurance_policies','Number_fire_policies','Number_surfboard_policies','Number_boat_policies','Number_privatAvg_size_householde_accident_insurance_policies','Number_bicycle_policies','Number_property_insurance_policies','Number_social_security_insurance_policies']]\nlinear_regressor = LinearRegression()  # create object for the class\nlinear_regressor.fit(X1, Y1)  # perform linear regression\nlist(zip(X1,linear_regressor.coef_ ))","e4a8fc36":"As you can see the partial regression plot confirms the influence on the partial relationship between income and Private Health Insurances. The cases greatly decrease the effect of income on Private Health Insurances. Dropping these cases confirms this.\nAs you can see the relationship between the variation in Private Health Insurances explained by Average Income conditionalseems to be linear, though you can see there are some observations that are exerting considerable influence on the relationship.","1484e908":"Though our model is not very precise, the predicted percentages are close to the actual ones.","b35992ea":"Based on this datasets, I analyze to explore the datasets, rename the columns name, and this data sets is supervised learning datasets.\nCalculating the correlation coefficent to analyze the relationship between the variables.\nApplying various methods and techiques and evualting the resulting model. \nComparing the models to select the best one.\n","2a2b29db":"To estimated probability density function over the data.","86c169ef":"This is the R\u00b2 score of our model. As you probably remember, this the percentage of explained variance of the predictions. ","2e5b0303":"With the constant term the coefficients are different. Without a constant we are forcing our model to go through the origin, but now we have a y-intercept at 0.2560. ","e0d81753":"Another Analze shows, there is highly correlation coefficent between the Average income and Private health insurances.\nMajority of the customers having income less than 75,000 and majority of customers not preferring to having private health insurances.","7eb53620":"The data file contains the following fields:\n\n    ORIGIN: train or test, as described above\n    MOSTYPE: Customer Subtype; see L0\n    MAANTHUI: Number of houses 1 - 10\n    MGEMOMV: Avg size household 1 - 6\n    MGEMLEEF: Avg age; see L1\n    MOSHOOFD: Customer main type; see L2\n\n** Percentages in each group, per postal code (see L3)**:\n\n    MGODRK: Roman catholic\n    MGODPR: Protestant ...\n    MGODOV: Other religion\n    MGODGE: No religion\n    MRELGE: Married\n    MRELSA: Living together\n    MRELOV: Other relation\n    MFALLEEN: Singles\n    MFGEKIND: Household without children\n    MFWEKIND: Household with children\n    MOPLHOOG: High level education\n    MOPLMIDD: Medium level education\n    MOPLLAAG: Lower level education\n    MBERHOOG: High status\n    MBERZELF: Entrepreneur\n    MBERBOER: Farmer\n    MBERMIDD: Middle management\n    MBERARBG: Skilled labourers\n    MBERARBO: Unskilled labourers\n    MSKA: Social class A\n    MSKB1: Social class B1\n    MSKB2: Social class B2\n    MSKC: Social class C\n    MSKD: Social class D\n    MHHUUR: Rented house\n    MHKOOP: Home owners\n    MAUT1: 1 car\n    MAUT2: 2 cars\n    MAUT0: No car\n    MZFONDS: National Health Service\n    MZPART: Private health insurance\n    MINKM30: Income < 30.000\n    MINK3045: Income 30-45.000\n    MINK4575: Income 45-75.000\n    MINK7512: Income 75-122.000\n    MINK123M: Income >123.000\n    MINKGEM: Average income\n    MKOOPKLA: Purchasing power class\n","ae4c1d25":"We'll rename the columns for convenience and cleaniness.","de39ed59":" Can you predict who would be interested in buying a caravan insurance policy and give an explanation why?","bd4963e6":"Drop the Origin Variable as this variable is categorical and In Modeling is better for output result if we have all numerical variable. ","9e1c470a":"OLS stands for Ordinary Least Squares and the method \u201cLeast Squares\u201d means that we\u2019re trying to fit a regression line that would minimize the square of distance from the regression line (see the previous section of this post). Date and Time are pretty self-explanatory :) So as number of observations. Df of residuals and models relates to the degrees of freedom \u2014 \u201cthe number of values in the final calculation of a statistic that are free to vary.\u201d\n\nThe data is \"linear\". That is, the dependent variable (Private Health Insurance) is a linear function of independent variables (Average Income).\nR- square is 0.719 is being a perfect fit between the average income and private health insurances.\nAs expected, Income will be a strong predictor of Private health insurances, corroborated by a significant p-value for the coefficient of Income in the model.\n\nThe coefficient of 1.0042 means that as the RM variable increases by 1, the predicted value of MDEV increases by 1.0042. A few other important values are the R-squared \u2014 the percentage of variance our model explains; the standard error is the standard deviation of the sampling distribution of a statistic, most commonly of the mean; the t scores and p-values, for hypothesis test \u2014 the RM has statistically significant p-value; there is a 95% confidence intervals for the RM meaning we predict at a 95% percent confidence that the value of RM is between 0.992 and 1.017.","de2ca704":"The estimates of individual linear regression coefficients and the quality of the overall fit. \nR2 measures how much of the variation in the response variable y is explained by variation in the regressors X ","86e8db73":"Now compare the actual output values for X_test with the predicted values, execute the following script:","0e0fdb38":"The \u201cPrivate Health Insurance\u201d variable appears skewed in nature and most of the Average Income values are in the range of 0 to 5.\nMeans Majority of customers having no private health insurances. ","f15e6b15":"Model Evaluation Metrics for Regression\nMean Squared Error is the mean of the squared errors.","3cd34be1":"Avergae size household and Married have a highly positive correlation between each other.\nIn our datasets majority of members are married and having most of the memebrs having 3 household size.","f98fbe11":"#Linear Regression Model","4476de89":"This is a small exploration of the data from the 9822 rows and 87 columns Caravan Insurance data.\nThe goal of the challenge was to try to predict whether or customers would be interested in buying caravan insurance.\nHere we will be exploring the data a little bit, and then trying to see\nif we can predict whether or not customers have health insurance.","1b17e1d4":"In this, I studied the most fundamental machine learning algorithms i.e. linear regression.\nI implemented both simple linear regression and multiple linear regression with the help of the Scikit-Learn machine learning library and others helpful library.\n\n","cfc0a84c":"The \u201cAverage Income\u201d variable appears skewed in nature and most of the Average Income values are in the range of 2 to 5.\nMeans Majority if customers having insurances less than 75000.","827a9b5c":"The Mean Squared Error is 6.328323041957195e-30 used as a default metric for evaluation of the performance of most regression algorithms "}}