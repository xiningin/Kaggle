{"cell_type":{"a34af28c":"code","286bc79a":"code","2d1852d5":"code","699f4e30":"code","00ce194e":"code","710d37f3":"code","117f119b":"code","798cfafb":"code","a1facec0":"code","2f5b9896":"code","d6fe7896":"code","963cdea6":"code","21010a1f":"code","baac5a5e":"code","13ff8b14":"code","64a75e33":"code","1b071da8":"code","15a1c37a":"code","2b01c564":"markdown","bd11238e":"markdown","7f0680ca":"markdown","bbee6881":"markdown"},"source":{"a34af28c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.cluster.hierarchy import linkage, dendrogram\nfrom sklearn.cluster import KMeans, AgglomerativeClustering, AffinityPropagation\nfrom sklearn.mixture import GaussianMixture \nimport os\nimport cv2\nimport random","286bc79a":"data = pd.read_csv(\"..\/input\/pokemons-and-there-stats\/pokemon_df.csv\")\ndata[0:10]","2d1852d5":"data.info()","699f4e30":"data2=data[['Attack','Defence']]","00ce194e":"def doAgglomerative(X, nclust=2):\n    model = AgglomerativeClustering(n_clusters=nclust,affinity='euclidean',linkage='ward')\n    clust_labels1 = model.fit_predict(X)\n    return (clust_labels1)\n\nclust_labels1 = doAgglomerative(data2,20)\nagglomerative = pd.DataFrame(clust_labels1)\ndata2.insert((data2.shape[1]),'agglomerative',agglomerative)","710d37f3":"data3=data2\ndata3['Name']=data['Name']\ndata3","117f119b":"for i in range(20):\n    names0=data3[data3['agglomerative']==i]['Name'] \n    print('### Agglomerative '+str(i))\n    print(list(set(names0)))\n    print()","798cfafb":"data2.groupby('agglomerative').mean()","a1facec0":"fig = plt.figure()\nax = fig.add_subplot(111)\nscatter = ax.scatter(data2['Attack'],data2['Defence'],c=agglomerative[0],s=50)\nax.set_title('Agglomerative Clustering')\nax.set_xlabel('Attack')\nax.set_ylabel('Defence')\nplt.rcParams['figure.figsize'] = (6,5)\nplt.colorbar(scatter)","2f5b9896":"NamesA=data2[data2['agglomerative']==6]['Name']\nprint(list(NamesA))","d6fe7896":"filesA=[]\nfor item in set(NamesA):\n    filesA+=[item.lower()+'.png']\nprint(len(filesA))","963cdea6":"img_dir='\/kaggle\/input\/pokemon-images-and-types\/images\/images'","21010a1f":"filesA2=[]\nfor i in range(len(filesA)):\n    if cv2.imread(os.path.join(img_dir,filesA[i])) is not None:\n        filesA2+=[os.path.join(img_dir,filesA[i])]\nrandom.shuffle(filesA2)","baac5a5e":"fig, axs = plt.subplots(3,3,figsize=(9,9))\nfor i in range(9):\n    r=i\/\/3\n    c=i%3\n    img1 = cv2.imread(filesA2[i])\n    file=filesA2[i].split('\/')[-1][0:-4]\n    ax=axs[r][c].axis(\"off\")\n    ax=axs[r][c].set_title(file)\n    ax=axs[r][c].imshow(img1)\nplt.show()","13ff8b14":"NamesB=data2[data2['agglomerative']==17]['Name']\nprint(list(NamesB))","64a75e33":"filesB=[]\nfor item in set(NamesB):\n    filesB+=[item.lower()+'.png']\nprint(len(filesB))","1b071da8":"filesB2=[]\nfor i in range(len(filesB)):\n    if cv2.imread(os.path.join(img_dir,filesB[i])) is not None:\n        filesB2+=[os.path.join(img_dir,filesB[i])]\nrandom.shuffle(filesB2)","15a1c37a":"fig, axs = plt.subplots(3,3,figsize=(9,9))\nfor i in range(9):\n    r=i\/\/3\n    c=i%3\n    img1 = cv2.imread(filesB2[i])\n    file=filesB2[i].split('\/')[-1][0:-4]\n    ax=axs[r][c].axis(\"off\")\n    ax=axs[r][c].set_title(file)\n    ax=axs[r][c].imshow(img1)\nplt.show()","2b01c564":"# Group of attack ability max","bd11238e":"# Pokemons Stats Clustering \nhttps:\/\/www.kaggle.com\/stpeteishii\/pokemons-stats-clustering<br\/>\n<div align=\"left\">\n<img src=\"https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle\" alt=\"upvote\">\n<\/div>","7f0680ca":"# Clusering","bbee6881":"# Group of attack ability min"}}