{"cell_type":{"3d312a4d":"code","192b1553":"code","1e363047":"code","9dcc4a85":"code","6325e220":"code","7bc6ff0d":"code","599c0e08":"code","993af4fc":"code","9cf27b45":"code","45f15b0c":"code","72115e57":"code","a5cb01ed":"markdown"},"source":{"3d312a4d":"# Importing the necessary libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.preprocessing import sequence\nfrom tensorflow.keras.layers import Bidirectional, LSTM, Dense\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler, RobustScaler, MinMaxScaler\nfrom sklearn.feature_selection import SelectKBest, f_regression\nfrom sklearn.metrics import mean_absolute_error, accuracy_score, recall_score, precision_score\nfrom sklearn.model_selection import train_test_split \nfrom tensorflow.keras.callbacks import LearningRateScheduler\nfrom tensorflow.keras.optimizers.schedules import ExponentialDecay","192b1553":"# Reading the files.\n\ndf_train = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/test.csv\")\ndf_sub = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/sample_submission.csv\")","1e363047":"#def add_features(df):\n#    df['area'] = df['time_step'] * df['u_in']\n#    df['area'] = df.groupby('breath_id')['area'].cumsum()\n#    df['cross']= df['u_in']*df['u_out']\n#    df['cross2']= df['time_step']*df['u_out']\n#    df['u_in_cumsum'] = (df['u_in']).groupby(df['breath_id']).cumsum()\n#    df['one'] = 1\n#    df['count'] = (df['one']).groupby(df['breath_id']).cumsum()\n#    df['u_in_cummean'] =df['u_in_cumsum'] \/df['count']\n#    df['breath_id_lag']=df['breath_id'].shift(1).fillna(0)\n#    df['breath_id_lag2']=df['breath_id'].shift(2).fillna(0)\n#    df['breath_id_lagsame']=np.select([df['breath_id_lag']==df['breath_id']],[1],0)\n#    df['breath_id_lag2same']=np.select([df['breath_id_lag2']==df['breath_id']],[1],0)\n#    df['u_in_lag'] = df['u_in'].shift(1).fillna(0)\n#    df['u_in_lag'] = df['u_in_lag']*df['breath_id_lagsame']\n#    df['u_in_lag2'] = df['u_in'].shift(2).fillna(0)\n#    df['u_in_lag2'] = df['u_in_lag2']*df['breath_id_lag2same']\n#    df['u_out_lag2'] = df['u_out'].shift(2).fillna(0)\n#    df['u_out_lag2'] = df['u_out_lag2']*df['breath_id_lag2same']\n#    return df\n\n#train_x = add_features(train_x)\n#test = add_features(df_test)\n\nn_steps = 80\n\n# dividing the data into features and target variable.\ntrain_x = df_train.drop(columns=[\"pressure\", \"id\", \"breath_id\"])\ntest = df_test.drop(columns=[\"id\", \"breath_id\"])\n\n#scalar = MinMaxScaler()\n#train_x = scalar.fit_transform(train_x)\n#test_19 = scalar.fit_transform(test_19)\n\ntrain_y = df_train[\"pressure\"].to_numpy().reshape(-1, 80)\ntrain_x = train_x.to_numpy().reshape(-1, 80, train_x.shape[-1])\ntest = test.to_numpy().reshape(-1, 80, test.shape[-1])","9dcc4a85":"# Create Bi-LSTM model\n\ndef get_model():\n    act = \"selu\"\n    model = keras.Sequential([\n        layers.InputLayer(input_shape=(80,5)),\n        layers.Bidirectional(layers.LSTM(128, return_sequences=True)),\n        layers.Bidirectional(layers.LSTM(256, return_sequences=True)),\n        layers.Bidirectional(layers.LSTM(1028, return_sequences=True)),\n        #layers.Bidirectional(layers.LSTM(2048, return_sequences=True)),\n        #layers.Dropout(0.2),\n        #layers.Flatten(),\n        #layers.Dense(128, activation=act),\n        #layers.Dense(256, activation=act),\n        #layers.Dense(50, activation=act),\n        layers.Dense(1)\n    ])\n    return model\n\n\nmodel = get_model()\nmodel.compile(optimizer=\"adam\", loss=\"mae\")\n\nmodel.summary()","6325e220":"# Fit Bi-LSTM\n\ndef fit_model(mod):\n    early_stop = keras.callbacks.EarlyStopping(monitor = 'val_loss',\n                                               patience = 5)\n    history = mod.fit(train_x, train_y, epochs = 100,\n                        validation_split = 0.3, batch_size = 32, \n                        shuffle = False, callbacks = [early_stop]\n                       )\n    return history\n\nhistory_bilstm = fit_model(model)","7bc6ff0d":"prediction = model.predict(test)\n\npred = prediction.flatten()\n\nsns.displot(pred)","599c0e08":"def sub(test_prediction):\n    df = pd.DataFrame({\"id\":df_test.id, \"pressure\":test_prediction})\n    return df\n\nsubmission = sub(pred)\n\nsubmission.shape","993af4fc":"# saving the model\n\nmodel.save(\"Bi-LSTM-1-val_loss: 0.2526.h5\")","9cf27b45":"#model1 = keras.models.load_model(\"..\/input\/google-brain-ventilator-models\/Bi-LSTM-1-val_loss_ 0.315.h5\") #19\n#model2 = keras.models.load_model(\"..\/input\/google-brain-ventilator-models\/Bi-LSTM-1-val_loss_ 0.38.h5\") #19\n#model3 = keras.models.load_model(\"..\/input\/google-brain-ventilator-models\/Bi-LSTM-1-val_loss_ 0.29.h5\") #9\nmodel4 = keras.models.load_model(\"..\/input\/google-brain-ventilator-models\/Bi-LSTM-1-val_loss_ 0.2526.h5\") #9\nmodel5 = keras.models.load_model(\"..\/input\/google-brain-ventilator-models\/Bi-LSTM-val_loss_ 0.2644.h5\") #9\n\n#prediction1 = model1.predict(test)\n#prediction2 = model2.predict(test)\nprediction4 = model4.predict(test)\nprediction5 = model5.predict(test)\n\n#prediction1 = prediction1.flatten()\n#prediction2 = prediction2.flatten()\nprediction4 = prediction4.flatten()\nprediction5 = prediction5.flatten()\n\nfinal_prediction = (prediction4+prediction5)\/2\n\nsns.displot(final_prediction)","45f15b0c":"# creating the submission file.\n\ndef sub(test_prediction):\n    df = pd.DataFrame({\"id\":df_test.id, \"pressure\":test_prediction})\n    return df\n\nsubmission = sub(final_prediction)\n\nsubmission.shape","72115e57":"submission.to_csv(\"submission_ensemble_2_models_final_submission.csv\", index=False)","a5cb01ed":"# Ensemble "}}