{"cell_type":{"87858857":"code","6c522d72":"code","47ffce16":"code","28637562":"code","752d24a7":"code","f154568d":"code","4394b273":"code","f9aea1da":"code","512fc50a":"code","57a52a85":"code","69ac98c6":"code","2fce12ef":"code","b73f585f":"code","567d625e":"code","48a827f0":"code","5261bc44":"code","89e3eda5":"code","f16a75c1":"code","5dd01608":"code","357100d7":"code","78b71e41":"code","4382f7c0":"code","0af69890":"markdown","9649924f":"markdown","de2d124d":"markdown","9ad62be2":"markdown","9fc7b02a":"markdown"},"source":{"87858857":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c522d72":"import pandas as pd\n\ndata1 = pd.read_csv('..\/input\/big-data-certification-study\/breast-cancer-wisconsin.csv')\n\n#print(data1)","47ffce16":"X =data1[data1.columns[1:10]]\ny= data1[[\"Class\"]]\n\n#print(X)\n","28637562":"print(y)","752d24a7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train , y_test = train_test_split(X,y,stratify=y, random_state=42)","f154568d":"from sklearn.preprocessing import MinMaxScaler \n\nscaler = MinMaxScaler()\nscaler.fit(X_train )\nscaler.fit(X_train)\nX_scaled_train=scaler.transform(X_train)\nX_scaled_test=scaler.transform(X_test)","4394b273":"from sklearn.neighbors import KNeighborsClassifier\nmodel=KNeighborsClassifier()\nmodel.fit(X_scaled_train, y_train)\npred_train=model.predict(X_scaled_train)\nmodel.score(X_scaled_train, y_train)","f9aea1da":"from sklearn.metrics import confusion_matrix\nconfusion_train=confusion_matrix(y_train, pred_train)\nprint(\"\ud6c8\ub828\ub370\uc774\ud130 \uc624\ucc28\ud589\ub82c:\\n\", confusion_train)","512fc50a":"from sklearn.metrics import classification_report\ncfreport_train=classification_report(y_train, pred_train)\nprint(\"\ubd84\ub958\uc608\uce21 \ub808\ud3ec\ud2b8:\\n\", cfreport_train)","57a52a85":"pred_test=model.predict(X_scaled_test)\nmodel.score(X_scaled_test, y_test)","69ac98c6":"confusion_test=confusion_matrix(y_test, pred_test)\nprint(\"\ud14c\uc2a4\ud2b8\ub370\uc774\ud130 \uc624\ucc28\ud589\ub82c:\\n\", confusion_test)","2fce12ef":"from sklearn.metrics import classification_report\ncfreport_test=classification_report(y_test, pred_test)\nprint(\"\ubd84\ub958\uc608\uce21 \ub808\ud3ec\ud2b8:\\n\", cfreport_test)","b73f585f":"param_grid={'n_neighbors': [1, 3, 5, 7, 9, 11]}\nfrom sklearn.model_selection import GridSearchCV\ngrid_search=GridSearchCV(KNeighborsClassifier(), param_grid, cv=5)\ngrid_search.fit(X_scaled_train, y_train)","567d625e":"print(\"Best Parameter: {}\".format(grid_search.best_params_))\nprint(\"Best Score: {:.4f}\".format(grid_search.best_score_))\nprint(\"TestSet Score: {:.4f}\".format(grid_search.score(X_scaled_test, y_test)))","48a827f0":"data2=pd.read_csv('..\/input\/big-data-certification-study\/house_price.csv', encoding='utf-8')\nX=data2[data2.columns[1:5]]\ny=data2[[\"house_value\"]]","5261bc44":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test=train_test_split(X, y, random_state=42)","89e3eda5":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\nscaler.fit(X_train)\nX_scaled_train=scaler.transform(X_train)\nX_scaled_test=scaler.transform(X_test)","f16a75c1":"from sklearn.neighbors import KNeighborsRegressor\nmodel=KNeighborsRegressor()\nmodel.fit(X_scaled_train, y_train)\npred_train=model.predict(X_scaled_train)\nmodel.score(X_scaled_train, y_train)","5dd01608":"pred_test=model.predict(X_scaled_test)\nmodel.score(X_scaled_test, y_test)","357100d7":"# RMSE (Root Mean Squared Error)\nimport numpy as np\nfrom sklearn.metrics import mean_squared_error \nMSE_train = mean_squared_error(y_train, pred_train)\nMSE_test = mean_squared_error(y_test, pred_test)\nprint(\"\ud6c8\ub828   \ub370\uc774\ud130 RMSE:\", np.sqrt(MSE_train))\nprint(\"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 RMSE:\", np.sqrt(MSE_test))","78b71e41":"param_grid={'n_neighbors': [1, 3, 5, 7, 9, 11]}\nfrom sklearn.model_selection import GridSearchCV\ngrid_search=GridSearchCV(KNeighborsRegressor(), param_grid, cv=5)\ngrid_search.fit(X_scaled_train, y_train)","4382f7c0":"print(\"Best Parameter: {}\".format(grid_search.best_params_))\nprint(\"Best Score: {:.4f}\".format(grid_search.best_score_))\nprint(\"TestSet Score: {:.4f}\".format(grid_search.score(X_scaled_test, y_test)))","0af69890":"\uae30\ubcf8\ubaa8\ub378 \uc801\uc6a9","9649924f":"\uae30\ubcf8\ubaa8\ub378 \uc801\uc6a9 KNeighborsRegressor","de2d124d":"Grid Search","9ad62be2":"Grid Search","9fc7b02a":"Regression "}}