{"cell_type":{"cd97fed4":"code","d74c23f2":"code","2b349b13":"code","fb2003bb":"code","996c7b39":"code","64b08e58":"code","def3bd67":"markdown","c1d6e66e":"markdown","3dbd42e2":"markdown","7ca13bdd":"markdown","7e18e9e8":"markdown","c31fc763":"markdown"},"source":{"cd97fed4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import neighbors\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import TimeSeriesSplit\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d74c23f2":"## Read in the data\neq = pd.read_csv(\"..\/input\/train.csv\", dtype={'acoustic_data': np.int16,\n                                     'time_to_failure': np.float64})\n## Print the first five lines\nprint(eq.head(5))","2b349b13":"## Number of rows for each segment\nrows = 150000\n## Get the number of segments\nsegments = int(np.floor(eq.shape[0] \/ rows))\n## Initialize X values and y values\nX_train = pd.DataFrame(index=range(segments), dtype=np.float64, columns=range(0,1500))\ny_train = pd.DataFrame(index=range(segments), dtype=np.float64, columns=['time_to_failure'])\n## Create features for each segment\nfor seg_id in tqdm(range(segments)):\n    ## Get segment values\n    seg = eq.iloc[range((seg_id*rows),((seg_id+1)*rows))]\n    ## Sort the values\n    x = np.sort(seg['acoustic_data'].values)\n    ## Sum values of the quantile and put in X matrix\n    X_train.loc[seg_id,:] = np.reshape(x, (-1, 100)).sum(axis=-1)\n    ## Get the time to failure of final observation\n    y_train.loc[seg_id, 'time_to_failure'] = seg['time_to_failure'].values[-1];\n\ny_train = np.ravel(y_train);","fb2003bb":"f, axarr = plt.subplots(2, 2)\naxarr[0, 0].scatter(X_train.iloc[:,0], y_train)\naxarr[0, 1].scatter(X_train.iloc[:,50], y_train)\naxarr[1, 0].scatter(X_train.iloc[:,100], y_train)\naxarr[1, 1].scatter(X_train.iloc[:,149], y_train)\nfor ax in axarr.flat:\n    ax.set(xlabel='Quantile Sum', ylabel='Time to failure')\nfor ax in axarr.flat:\n    ax.label_outer()","996c7b39":"## Create pipline for cross validation using the standard scaler\nknn_pl = make_pipeline(preprocessing.StandardScaler(),\n                       neighbors.KNeighborsRegressor(500, weights='uniform', metric='manhattan'))\n## Perform 5 fold cross validation\nscores = cross_val_score(knn_pl, X_train, y_train, cv=5, scoring='neg_mean_absolute_error')\nnp.mean(scores)","64b08e58":"knn_final = neighbors.KNeighborsRegressor(500, weights='uniform', metric='manhattan')\nscaler = preprocessing.StandardScaler()\nscaler.fit(X_train)\nknn_final.fit(scaler.transform(X_train), y_train)\n\nsubmission = pd.read_csv('..\/input\/sample_submission.csv', index_col='seg_id')\nX_test = pd.DataFrame(dtype = np.float64, index = submission.index,columns=range(0,1500))\nfor seg_id in tqdm(X_test.index):\n    seg = pd.read_csv('..\/input\/test\/' + seg_id + '.csv')\n    xc = np.sort(seg['acoustic_data'].values)\n    X_test.loc[seg_id,:] = np.reshape(xc, (-1, 100)).sum(axis=-1)\n\nsubmission['time_to_failure'] = knn_final.predict(scaler.transform(X_test))\nprint(submission.head(5))\n\nsubmission.to_csv('knn_std.csv')","def3bd67":"Let's plot some of the quantiles against the time to failure.  Each of the quantiles appears to contain some sort of information.","c1d6e66e":"In this kernel I present a very simple K-nearest neighbors model based on the quantiles of the distribution. Although simple, the model does quite well.  It might be possible to include the predictions from this model as a feature in some other model or they could be used as part of model averaging.  Enjoy!","3dbd42e2":"We get a cross validation score of 2.16. Not bad for such a simple model!","7ca13bdd":"Here we perform 5-fold cross validation of a KNN model after using a standard scaler.","7e18e9e8":"First load in the data and required packages","c31fc763":"Here we take the raw values of the acoustic data, sort them, and average over every 100 values.  "}}