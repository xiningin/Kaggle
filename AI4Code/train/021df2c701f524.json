{"cell_type":{"3346a092":"code","fdbd2122":"code","998a69c8":"code","2f74ea7f":"code","3a6c25b1":"code","fd0b498c":"code","02831a36":"code","2717d9ac":"code","9bb90c83":"code","c11c853e":"code","759a8ef0":"code","bf4b96a0":"code","128ad223":"code","1e7d0ef9":"code","3e744220":"code","27f8054d":"code","d0a4b909":"code","6ac892fd":"code","9b0aad8d":"code","837fc552":"code","09ae1241":"code","898e0639":"code","7e2eaeed":"code","f1809fca":"code","35ee9152":"code","a00e3329":"code","fc33dafa":"code","c769946e":"code","5cbff47b":"code","7e47ddf1":"code","20e35252":"code","c709fd22":"code","539fe573":"code","b7e3d4fa":"markdown"},"source":{"3346a092":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdbd2122":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.model_selection import train_test_split\nfrom pylab import plot, show, subplot, specgram, imshow, savefig\nfrom sklearn import preprocessing\nfrom sklearn import metrics\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score,f1_score, confusion_matrix\n%matplotlib inline","998a69c8":"df = pd.read_csv(\"\/kaggle\/input\/loan-data-set\/loan_data_set.csv\")\ndf.sample(5)","2f74ea7f":"df.shape","3a6c25b1":"df.dtypes","fd0b498c":"df.describe(include='all')","02831a36":"df.isna().sum()","2717d9ac":"df.LoanAmount.fillna(df.LoanAmount.mean(),inplace=True)\ndf.Loan_Amount_Term.fillna(df.Loan_Amount_Term.mean(),inplace=True)","9bb90c83":"df.dropna(how=\"any\",inplace=True)","c11c853e":"df.isna().sum()","759a8ef0":"df.drop(\"Loan_ID\",axis=1,inplace=True)","bf4b96a0":"le = LabelEncoder()\ndf[\"Gender\"] = le.fit_transform(df[\"Gender\"])\ndf[\"Married\"] = le.fit_transform(df[\"Married\"])\ndf[\"Dependents\"] = le.fit_transform(df[\"Dependents\"])\ndf[\"Self_Employed\"] = le.fit_transform(df[\"Self_Employed\"])\ndf[\"Education\"] = le.fit_transform(df[\"Education\"])\ndf[\"Property_Area\"] = le.fit_transform(df[\"Property_Area\"])\ndf[\"Loan_Status\"] = le.fit_transform(df[\"Loan_Status\"])","128ad223":"df.dtypes","1e7d0ef9":"fig,ax=plt.subplots(figsize=(15,8))\nsns.heatmap(data=df.corr().round(2),annot=True,linewidths=0.5,cmap=\"Blues\")\nplt.show()","3e744220":"def plot_feature_importance(importance,names,model_type):\n\n    #Create arrays from feature importance and feature names\n    feature_importance = np.array(importance)\n    feature_names = np.array(names)\n\n    #Create a DataFrame using a Dictionary\n    data={'feature_names':feature_names,'feature_importance':feature_importance}\n    fi_df = pd.DataFrame(data)\n\n    #Sort the DataFrame in order decreasing feature importance\n    fi_df.sort_values(by=['feature_importance'], ascending=False,inplace=True)\n\n    #Define size of bar plot\n    plt.figure(figsize=(10,8))\n    #Plot Searborn bar chart\n    sns.barplot(x=fi_df['feature_importance'], y=fi_df['feature_names'])\n    #Add chart labels\n    plt.title(model_type + ' FEATURE IMPORTANCE')\n    plt.xlabel('FEATURE IMPORTANCE')\n    plt.ylabel('FEATURE NAMES')","27f8054d":"rf_model = RandomForestClassifier().fit(df.drop(\"Loan_Status\",axis=1),df[\"Loan_Status\"])","d0a4b909":"plot_feature_importance(rf_model.feature_importances_,df.drop(\"Loan_Status\",axis=1).columns,'RANDOM FOREST')","6ac892fd":"gbc_model = GradientBoostingClassifier().fit(df.drop(\"Loan_Status\",axis=1),df[\"Loan_Status\"])","9b0aad8d":"plot_feature_importance(gbc_model.feature_importances_,df.drop(\"Loan_Status\",axis=1).columns,'GRADIENT BOOSTING')","837fc552":"abc_model = AdaBoostClassifier().fit(df.drop(\"Loan_Status\",axis=1),df[\"Loan_Status\"])","09ae1241":"plot_feature_importance(abc_model.feature_importances_,df.drop(\"Loan_Status\",axis=1).columns,'ADA BOOST')","898e0639":"fig,ax=plt.subplots(figsize=(4,5))\nsns.countplot(x = \"Education\", data=df, order = df[\"Education\"].value_counts().index)\nplt.show()","7e2eaeed":"sns.relplot(x=\"ApplicantIncome\", y=\"LoanAmount\", data=df, col=\"Gender\",color=\"Blue\",alpha=0.3)\nplt.show()","f1809fca":"g=sns.relplot(x=\"Loan_Amount_Term\", y=\"LoanAmount\", data=df,kind=\"line\",hue=\"Education\",ci=None)\ng.fig.set_size_inches(15,7)\nplt.show()","35ee9152":"parameters = {'kernel':('linear', 'rbf'), 'C':[1, 10]}\nsvc = SVC()\nclf = GridSearchCV(svc, parameters)","a00e3329":"X = df.drop('Loan_Status',axis=1)\ny = df['Loan_Status']","fc33dafa":"Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.3, random_state=30)","c769946e":"clf.fit(Xtrain, ytrain)","5cbff47b":"clf.best_params_","7e47ddf1":"pred = clf.best_estimator_.predict(Xtest)","20e35252":"confusion_matrix(ytest,pred)","c709fd22":"print(\"Accuracy score: {0}%\".format((accuracy_score(ytest,pred)*100).round(2)))","539fe573":"fig,ax=plt.subplots(figsize=(10,5))\nsns.regplot(x=ytest,y=pred,marker=\"*\")\nplt.show()","b7e3d4fa":"### Top 5 features are,\n\n* Credit_History\n* ApplicantIncome\n* LoanAmount\n* CoapplicantIncome\n* Loan_Amount_Term\n\n"}}