{"cell_type":{"9759a7e7":"code","112264e6":"code","a5d2e2dc":"code","86d71e72":"code","308cb863":"code","bcf9ede0":"code","23d41352":"code","6fd3c34e":"code","cc7071d5":"code","6604c05a":"code","c81c9bc6":"code","36f681f9":"code","42f315a9":"code","9e7c8c1f":"code","424d68b1":"code","2a5de76c":"code","5c22e9df":"code","914a5be3":"code","1a72e8da":"markdown","d63fa922":"markdown","396c3711":"markdown","fed30a05":"markdown","502f7250":"markdown","9c0c64b6":"markdown","af6ebfc7":"markdown","306a4b92":"markdown","6cdf954e":"markdown"},"source":{"9759a7e7":"import numpy as np\nimport pandas as pd\n\nimport re\nimport string\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel","112264e6":"# MovieLens Dataset\nmovies = pd.read_csv('..\/input\/movielens\/ml-latest-small\/movies.csv')","a5d2e2dc":"movies.head(15)","86d71e72":"movies.describe()","308cb863":"movies = movies.dropna()\n\nmovies.drop_duplicates(subset='title', keep='first', inplace=True)","bcf9ede0":"movies.describe()","23d41352":"content_data = movies[['title','genres']]\ncontent_data = content_data.astype(str)\ncontent_data['content'] = content_data['title'] + ' ' + content_data['genres']","6fd3c34e":"content_data.head()","cc7071d5":"content_data = content_data.reset_index()\nindices = pd.Series(content_data.index, index=content_data['title'])\n\ncontent_data.head()","6604c05a":"tfidf = TfidfVectorizer(stop_words='english')\n# Remove stopwords\n\ntfidf_matrix = tfidf.fit_transform(content_data['genres'])\n# Let's try with just the genres as our content","c81c9bc6":"# Shape of tfidf_matrix\ntfidf_matrix.shape","36f681f9":"print(tfidf_matrix)","42f315a9":"cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","9e7c8c1f":"print(cosine_sim)","424d68b1":"def get_content_based_recommendations(title, similarity=cosine_sim, n_sim=10):\n    idx = indices[title]\n    \n    # Get the pairwsie similarity scores of all movies with given movie\n    sim_scores = list(enumerate(similarity[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the n_sim most similar movies\n    if n_sim > 0:\n        n = n_sim + 1\n        sim_scores = sim_scores[1:n]\n    else:    \n        sim_scores = sim_scores[1:11]\n    \n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the n_sim most similar movies\n    return list(content_data['title'].iloc[movie_indices])","2a5de76c":"recomm_movies_for_ToyStory1995 = get_content_based_recommendations('Toy Story (1995)', cosine_sim, n_sim=15)\nfor movie in recomm_movies_for_ToyStory1995:\n        print(movie)","5c22e9df":"recomm_movies_for_Heat1995 = get_content_based_recommendations('Heat (1995)', cosine_sim)\nfor movie in recomm_movies_for_Heat1995:\n        print(movie)","914a5be3":"recomm_movies_for_DraculaDeadAndLovingIt1995 = get_content_based_recommendations('Dracula: Dead and Loving It (1995)', cosine_sim, n_sim=15)\nfor movie in recomm_movies_for_DraculaDeadAndLovingIt1995:\n        print(movie)","1a72e8da":"### Clean the data","d63fa922":"### Convert the collection to a matrix of TF-IDF features","396c3711":"# Content Based Movie Recommendation System\n\n## Using TF-IDF","fed30a05":"### Utility Function to return a list of movies to be recommended","502f7250":"### Read Data","9c0c64b6":"### Imports","af6ebfc7":"#### Top 15 recommendations for 'Toy Story (1995)'","306a4b92":"#### Top 15 recommendations for 'Dracula: Dead and Loving It (1995)'","6cdf954e":"#### Top 10 recommendations for 'Heat (1995)'"}}