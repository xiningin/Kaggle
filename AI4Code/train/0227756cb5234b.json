{"cell_type":{"03a6836b":"code","0674d565":"code","13d8f5d1":"code","88db2378":"code","75233191":"code","643ca266":"code","1a845a96":"code","8d5456cb":"code","828e048a":"code","a0638400":"code","b5d83ad9":"code","94ac502e":"code","881580fe":"code","96c07e8f":"code","2469e20a":"code","ed3e764a":"code","1630131b":"code","cd77c524":"code","f7a8e9a4":"code","224957ff":"code","02ec6fbf":"code","ea937899":"code","3cfe2505":"code","9026feb2":"code","8a9f2bc4":"code","33ec9bec":"code","8e03f559":"code","22de0fbe":"code","196934ee":"code","40621527":"code","4bd0586d":"code","56313083":"code","e2f695b3":"code","12eb1f2f":"code","15660dc2":"code","c6193dd0":"code","bd4e2584":"code","d891b223":"code","6edf32ce":"code","994b73d6":"code","f504a275":"code","fdc0524b":"code","155084de":"code","6e0c13d2":"markdown","44286341":"markdown","09024fd9":"markdown","db719893":"markdown","a0d5bcd2":"markdown","1a92ec3e":"markdown","2a638f66":"markdown","9b06f465":"markdown","11875819":"markdown","5c2941db":"markdown","fbf6e79f":"markdown","9fb1eb74":"markdown","8308808f":"markdown","d828310f":"markdown","8c5542da":"markdown","408d0fa6":"markdown","7fe3e776":"markdown","ceaaeea0":"markdown","09cad444":"markdown","a8f36a15":"markdown","aa1f14d8":"markdown","5750d469":"markdown"},"source":{"03a6836b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style = 'whitegrid')\n\nimport textwrap\nfrom wordcloud import WordCloud, STOPWORDS ","0674d565":"data = pd.read_csv('..\/input\/data-scientist-jobs\/DataScientist.csv')\ndata","13d8f5d1":"# Drop Columns\ndata.drop(['Unnamed: 0', 'Company Name', 'Headquarters','Competitors'], axis = 1, inplace = True)\ndata = data.set_index(['index'])\ndata.head()","88db2378":"# Change data with -1 values into NaN\ndata = data.replace([-1, -1.0, '-1'], np.nan)\nprint(data.isnull().sum(axis = 0))","75233191":"# fill row data contain nan values in columns Easy Apply\ndata['Easy Apply'].fillna('FALSE', inplace = True)\n# Drop row data contain nan values\ndata.dropna(axis = 0, inplace = True)","643ca266":"comment_words = ''\nstopwords = set(STOPWORDS)\n\nfor val in data['Job Title']:\n    val = str(val)\n    tokens = val.split()\n    \n    for i in range(len(tokens)):\n        tokens[i] = tokens[i].lower()\n    \n    comment_words += \" \".join(tokens)+\" \"\n\nwordcloud = WordCloud(width = 800, height = 400, background_color = 'white'\n                      , stopwords = stopwords, min_font_size = 10).generate(comment_words)\n\nfig, ax = plt.subplots(figsize = (16, 16))\nax.grid(False)\nax.imshow((wordcloud))\nfig.tight_layout(pad=0)\nplt.show()","1a845a96":"data= data[data['Job Title'].str.contains('Data Scientist|Data Science')]\ndata","8d5456cb":"data['Salary Estimate']= data['Salary Estimate'].str.replace('(', '').str.replace(')', '').str.replace('Glassdoor est.', '').str.replace('Employer est.', '')","828e048a":"data['Min Salary'],data['Max Salary']=data['Salary Estimate'].str.split('-').str\ndata['Min Salary']=data['Min Salary'].str.strip(' ').str.strip('$').str.strip('K').fillna(0).astype(int)\ndata['Max Salary'] = data['Max Salary'].str.replace('Per Hour','')\ndata['Max Salary']=data['Max Salary'].str.strip(' ').str.strip('$').str.strip('K').fillna(0).astype(int)\n","a0638400":"fig, ax = plt.subplots(1,2, figsize = [16,4])\n\nsns.distplot(ax = ax[0], a = data['Min Salary'])\n\nsns.distplot( ax = ax[1], a = data['Max Salary'])\nplt.show()","b5d83ad9":"data['Revenue'].replace(['Unknown \/ Non-Applicable'], np.nan, inplace = True)\ndata[['Revenue']]","94ac502e":"dataview = data.groupby('Location')['Job Title'].count().reset_index()\ndataview = dataview.sort_values('Job Title', ascending = False).head(10)\n\nfig, ax = plt.subplots(figsize = [16,5])\nsns.barplot(data = dataview, x = 'Location', y = 'Job Title', ax = ax)\nax.set_ylabel('Count Jobs')\nax.set_yticks(np.arange(0, 200, step = 20))\nfor index,dataview in enumerate(dataview['Job Title'].astype(int)):\n       ax.text(x=index-0.1 , y =dataview+1 , s=f\"{dataview}\" , fontdict=dict(fontsize=10))\nplt.show()","881580fe":"dataview = data.pivot_table(index = 'Location', columns = 'Sector', values = 'Job Title', aggfunc = 'count')\ndataview.fillna(0, inplace = True)\ndataview['Total'] = dataview.sum(axis = 1)\ndataview.reset_index(inplace = True)\ndataview.sort_values('Total', ascending = False).head(10)","96c07e8f":"pd.melt(dataview, \n            id_vars=['Location'], \n            value_vars=list(dataview.columns[1:-1]), \n            var_name='Sector', \n            value_name='Sum of Value').sort_values('Sum of Value', ascending = False)","2469e20a":"dataview1 = dataview.sort_values('Total', ascending = False).head(5)\n","ed3e764a":"max_width = 15\nfig, ax = plt.subplots(5,1 , figsize = [18,20])\nfor i in range(0,5):\n    dataview1 = dataview.sort_values('Total', ascending = False).head(5)\n    dataview1 = dataview1[i:i+1]\n    dataview1.dropna(axis = 1, inplace = True)\n    dataview1 = pd.melt(dataview1, \n                id_vars=['Location'], \n                value_vars=list(dataview1.columns[1:-1]),\n                var_name='Sector', \n                value_name='Sum of Value').sort_values('Sum of Value', ascending = False)\n    \n    dataview1 = dataview1.sort_values('Sum of Value', ascending = False).head(5)\n    sns.barplot(ax=ax[i], data = dataview1, x ='Sector', y = 'Sum of Value')\n    ax[i].set_title(\"Top 5 Sector Open Job Data Science in  '\"+ dataview1.iloc[0,0]+\"'\", fontsize = 16)\n    ax[i].set_xlabel('Sector', fontsize = 14)\n    ax[i].set_ylabel('Count of Jobs', fontsize = 14)\n    ax[i].set_xticklabels(textwrap.fill(x.get_text(), max_width) for x in ax[i].get_xticklabels())\n    ax[i].set_yticks(np.arange(0, 85, step = 10))\n    ax[i].tick_params(labelsize = 12)\n\n    \n    for index,dataview1 in enumerate(dataview1['Sum of Value'].astype(int)):\n        ax[i].text(x=index-0.05 , y =dataview1+1 , s=f\"{dataview1}\" , fontdict=dict(fontsize=16))\n    fig.subplots_adjust(wspace = 0.1, hspace = 1)\nplt.show()","1630131b":"dataview = data.pivot_table(index = 'Location', columns = 'Industry', values = 'Job Title', aggfunc = 'count')\ndataview.fillna(0, inplace = True)\ndataview['Total'] = dataview.sum(axis = 1)\ndataview.reset_index(inplace = True)\ndataview.sort_values('Total', ascending = False).head(10)","cd77c524":"pd.melt(dataview, \n            id_vars=['Location'], \n            value_vars=list(dataview.columns[1:-1]),\n            var_name='Industry', \n            value_name='Sum of Value').sort_values('Sum of Value', ascending = False)","f7a8e9a4":"dataview1 = dataview.sort_values('Total', ascending = False).head(5)\n","224957ff":"max_width = 15\nfig, ax = plt.subplots(5,1 , figsize = [18,20])\nfor i in range(0,5):\n    dataview1 = dataview.sort_values('Total', ascending = False).head(5)\n    dataview1 = dataview1[i:i+1]\n    dataview1.dropna(axis = 1, inplace = True)\n    dataview1 = pd.melt(dataview1, \n                id_vars=['Location'], \n                value_vars=list(dataview1.columns[1:-1]), \n                var_name='Industry', \n                value_name='Sum of Value').sort_values('Sum of Value', ascending = False)\n    \n    dataview1 = dataview1.sort_values('Sum of Value', ascending = False).head(5)\n    \n    sns.barplot(ax=ax[i], data = dataview1, x ='Industry', y = 'Sum of Value')\n    ax[i].set_title(\"Top 5 Industry Open Job Data Science in  '\"+ dataview1.iloc[0,0]+\"'\", fontsize = 16)\n    ax[i].set_xlabel('Industry', fontsize = 14)\n    ax[i].set_ylabel('Count of Jobs', fontsize = 14)\n    ax[i].set_xticklabels(textwrap.fill(x.get_text(), max_width) for x in ax[i].get_xticklabels())\n    ax[i].set_yticks(np.arange(0, 45, step = 5))\n    ax[i].tick_params(labelsize = 12)\n    \n    for index,dataview1 in enumerate(dataview1['Sum of Value'].astype(int)):\n        ax[i].text(x=index-0.05 , y =dataview1+1 , s=f\"{dataview1}\" , fontdict=dict(fontsize=16))\n    fig.subplots_adjust(wspace = 0.1, hspace = 1)\nplt.show()","02ec6fbf":"dataview = data.pivot_table(index = 'Location', columns = 'Salary Estimate', values = 'Job Title', aggfunc = 'count')\n#dataview.replace(0, inplace = True)\ndataview['Total'] = dataview.sum(axis = 1)\ndataview.reset_index(inplace = True)\ndataview.sort_values('Total', ascending = False).head(10)","ea937899":"pd.melt(dataview, \n            id_vars=['Location'], \n            value_vars=list(dataview.columns[1:-1]),\n            var_name='Salary Estimate', \n            value_name='Sum of Value').sort_values('Sum of Value', ascending = False)","3cfe2505":"dataview1 = dataview.sort_values('Total', ascending = False).head(5)","9026feb2":"max_width = 15\nfig, ax = plt.subplots(5,1 , figsize = [18,20])\nfor i in range(0,5):\n    dataview1 = dataview.sort_values('Total', ascending = False).head(5)\n    dataview1 = dataview1[i:i+1]\n    dataview1.dropna(axis = 1, inplace = True)\n    dataview1 = pd.melt(dataview1, \n                id_vars=['Location'], \n                value_vars=list(dataview1.columns[1:-1]), \n                var_name='Salary Estimate', \n                value_name='Sum of Value').sort_values('Sum of Value', ascending = False)\n    \n    dataview1 = dataview1.sort_values('Sum of Value', ascending = False).head(5)\n    \n    sns.barplot(ax=ax[i], data = dataview1, x ='Salary Estimate', y = 'Sum of Value')\n    ax[i].set_title(\"Top 5 Salary Estimate Open Job Data Science in  '\"+ dataview1.iloc[0,0]+\"'\", fontsize = 16)\n    ax[i].set_xlabel('Salary Estimate', fontsize = 14)\n    ax[i].set_ylabel('Count of Jobs', fontsize = 14)\n    ax[i].set_xticklabels(textwrap.fill(x.get_text(), max_width) for x in ax[i].get_xticklabels())\n    ax[i].set_yticks(np.arange(0, 35, step = 5))\n    ax[i].tick_params(labelsize = 12)\n\n    \n    for index,dataview1 in enumerate(dataview1['Sum of Value'].astype(int)):\n        ax[i].text(x=index-0.05 , y =dataview1+1 , s=f\"{dataview1}\" , fontdict=dict(fontsize=16))\n    fig.subplots_adjust(wspace = 0.1, hspace = 1)\nplt.show()","8a9f2bc4":"dataview_top=data.groupby('Location')[['Max Salary','Min Salary']].mean().sort_values(['Max Salary','Min Salary'],ascending=False).head(10)\ndataview_top.reset_index(inplace = True)\n\ndataview_bot=data.groupby('Location')[['Max Salary','Min Salary']].mean().sort_values(['Max Salary','Min Salary'],ascending=True).head(10)\ndataview_bot.reset_index(inplace = True)\n\nprint(dataview_top, '\\n')\nprint(dataview_bot)","33ec9bec":"max_width = 15\ndata_salary = [dataview_top, dataview_bot]\ndata_title = ['Top 10', 'Bottom 10']\nfig, ax = plt.subplots(2,1, figsize = (24,14))\nfig.subplots_adjust(hspace = 0.5)\nfor i in range(0,2):\n    sns.barplot(ax = ax[i], data = data_salary[i], x = 'Location', y = 'Max Salary', color = 'orangered', label = 'Max Salary')\n    sns.barplot(ax = ax[i], data = data_salary[i], x = 'Location', y = 'Min Salary', color = 'darkslateblue', label = 'Min Salary')\n    ax[i].legend()\n    ax[i].set_title(data_title[i]+' Average Salary in Each Location', fontsize = 20)\n    ax[i].set_ylabel('Salary', fontsize = 20)\n    ax[i].set_xlabel('Location', fontsize = 20)\n    ax[i].set_xticklabels(textwrap.fill(x.get_text(), max_width) for x in ax[i].get_xticklabels())\n    ax[i].set_yticks(np.arange(0, 300, step = 50))\n    ax[i].tick_params(labelsize = 18)\n    \nplt.show()","8e03f559":"dataview_top=data.groupby('Sector')[['Max Salary','Min Salary']].mean().sort_values(['Max Salary','Min Salary'],ascending=False).head(10)\ndataview_top.reset_index(inplace = True)\n\ndataview_bot=data.groupby('Sector')[['Max Salary','Min Salary']].mean().sort_values(['Max Salary','Min Salary'],ascending=True).head(10)\ndataview_bot.reset_index(inplace = True)\n\nprint(dataview_top, '\\n')\nprint(dataview_bot)","22de0fbe":"max_width = 15\ndata_salary = [dataview_top, dataview_bot]\ndata_title = ['Top 10', 'Bottom 10']\nfig, ax = plt.subplots(2,1, figsize = (24,14))\nfig.subplots_adjust(hspace = 0.5)\nfor i in range(0,2):\n    sns.barplot(ax = ax[i], data = data_salary[i], x = 'Sector', y = 'Max Salary', color = 'orangered', label = 'Max Salary')\n    sns.barplot(ax = ax[i], data = data_salary[i], x = 'Sector', y = 'Min Salary', color = 'darkslateblue', label = 'Min Salary')\n    ax[i].legend()\n    ax[i].set_title(data_title[i]+' Average Salary in Each Sector', fontsize = 20)\n    ax[i].set_ylabel('Salary', fontsize = 20)\n    ax[i].set_xlabel('Sector', fontsize = 20)\n    ax[i].set_xticklabels(textwrap.fill(x.get_text(), max_width) for x in ax[i].get_xticklabels())\n    ax[i].set_yticks(np.arange(0, 175, step = 25))\n    ax[i].tick_params(labelsize = 18)\n    \nplt.show()","196934ee":"dataview_top=data.groupby('Industry')[['Max Salary','Min Salary']].mean().sort_values(['Max Salary','Min Salary'],ascending=False).head(10)\ndataview_top.reset_index(inplace = True)\n\ndataview_bot=data.groupby('Industry')[['Max Salary','Min Salary']].mean().sort_values(['Max Salary','Min Salary'],ascending=True).head(10)\ndataview_bot.reset_index(inplace = True)\n\nprint(dataview_top, '\\n')\nprint(dataview_bot)","40621527":"max_width = 15\ndata_salary = [dataview_top, dataview_bot]\ndata_title = ['Top 10', 'Bottom 10']\nfig, ax = plt.subplots(2,1, figsize = (24,14))\nfig.subplots_adjust(hspace = 0.5)\nfor i in range(0,2):\n    sns.barplot(ax = ax[i], data = data_salary[i], x = 'Industry', y = 'Max Salary', color = 'orangered', label = 'Max Salary')\n    sns.barplot(ax = ax[i], data = data_salary[i], x = 'Industry', y = 'Min Salary', color = 'darkslateblue', label = 'Min Salary')\n    ax[i].legend()\n    ax[i].set_title(data_title[i]+' Average Salary in Each Industry', fontsize = 20)\n    ax[i].set_ylabel('Salary', fontsize = 20)\n    ax[i].set_xlabel('Industry', fontsize = 20)\n    ax[i].set_xticklabels(textwrap.fill(x.get_text(), max_width) for x in ax[i].get_xticklabels())\n    ax[i].set_yticks(np.arange(0, 200, step = 25))\n    ax[i].tick_params(labelsize = 18)\n    \nplt.show()","4bd0586d":"dataview = data.groupby('Easy Apply')['Job Title'].count().reset_index()\ndataview","56313083":"fig, ax = plt.subplots()\nax =sns.barplot(ax = ax, data = dataview, x = 'Easy Apply', y = 'Job Title' )\nax.set_title('Easy Apply Data Science Job')\nax.set_ylabel('Counts of Jobs')\nplt.show()","e2f695b3":"data['Revenue'].unique().tolist()","12eb1f2f":"dataview = data.copy()\ndataview['Revenue'].replace(['Unknown \/ Non-Applicable'], np.nan, inplace = True)\ndataview['Revenue'].dropna(axis = 0, inplace = True)\ndataview = dataview.groupby('Revenue')['Job Title'].count().reset_index()\ndataview.sort_values('Job Title', ascending = False, inplace = True)\ndataview","15660dc2":"max_width = 15\nfig, ax = plt.subplots(figsize = (16,4))\nsns.barplot(ax = ax, data = dataview, x='Revenue', y = 'Job Title', palette = 'deep')\nax.set_title('Count Job Based Revenue')\nax.set_ylabel('Count Jobs')\nax.set_xticklabels(textwrap.fill(x.get_text(), max_width) for x in ax.get_xticklabels())\nfor index,dataview in enumerate(dataview['Job Title'].astype(int)):\n        ax.text(x=index-0.1 , y =dataview+1 , s=f\"{dataview}\" , fontdict=dict(fontsize=12))\nplt.show()","c6193dd0":"dataview = data.groupby('Rating')['Job Title'].count().reset_index()\ndataview.sort_values('Job Title', ascending = False).head()","bd4e2584":"fig, ax = plt.subplots(figsize = (16, 8))\n#sns.barplot(ax = ax, data = dataview, x = 'Rating', y = 'Job Title', order = dataview.sort_values('Job Title', ascending = False).Rating)\nsns.barplot(ax = ax, data = dataview, x = 'Rating', y = 'Job Title', palette = 'deep')\nax.set_ylabel('Count Jobs')\nfor index,dataview in enumerate(dataview['Job Title'].astype(int)):\n        ax.text(x=index-0.1 , y =dataview , s=f\"{dataview}\" , fontdict=dict(fontsize=10))\nplt.show()","d891b223":"dataview_top = data.groupby('Location')['Rating'].mean().reset_index()\ndataview_top = dataview_top.sort_values('Rating', ascending = False).head(10)\n\ndataview_bot = data.groupby('Location')['Rating'].mean().reset_index()\ndataview_bot = dataview_bot.sort_values('Rating', ascending = True).head(10)\n\nprint(dataview_top, '\\n' )\nprint(dataview_bot)","6edf32ce":"max_width = 15\ndata_rating = [dataview_top, dataview_bot]\ndata_title = ['Top 10', 'Bottom 10']\nfig, ax = plt.subplots(2,1, figsize = (24,14))\nfig.subplots_adjust(hspace = 0.5)\nfor i in range(0,2):\n    sns.barplot(ax = ax[i], data = data_rating[i], x = 'Location', y = 'Rating', color = 'orangered', label = 'Rating')\n    ax[i].set_title(data_title[i]+' Average Rating Company in Each Location', fontsize = 20)\n    ax[i].set_ylabel('Rating', fontsize = 20)\n    ax[i].set_xlabel('Location', fontsize = 20)\n    ax[i].set_xticklabels(textwrap.fill(x.get_text(), max_width) for x in ax[i].get_xticklabels())\n    ax[i].set_yticks(np.arange(0, 5, step = 0.5))\n    for index, data_rating[i] in enumerate(np.round(data_rating[i]['Rating'], 2)):\n        ax[i].text(x=index-0.1 , y =data_rating[i] , s=f\"{data_rating[i]}\" , fontdict=dict(fontsize=16))\n    ax[i].tick_params(labelsize = 18)\n    \nplt.show()","994b73d6":"dataview_top = data.groupby('Sector')['Rating'].mean().reset_index()\ndataview_top = dataview_top.sort_values('Rating', ascending = False).head(10)\n\ndataview_bot = data.groupby('Sector')['Rating'].mean().reset_index()\ndataview_bot = dataview_bot.sort_values('Rating', ascending = True).head(10)\n\nprint(dataview_top, '\\n' )\nprint(dataview_bot)","f504a275":"max_width = 15\ndata_rating = [dataview_top, dataview_bot]\ndata_title = ['Top 10', 'Bottom 10']\nfig, ax = plt.subplots(2,1, figsize = (24,14))\nfig.subplots_adjust(hspace = 0.5)\nfor i in range(0,2):\n    sns.barplot(ax = ax[i], data = data_rating[i], x = 'Sector', y = 'Rating', color = 'orangered', label = 'Rating')\n    ax[i].set_title(data_title[i]+' Average Rating Company in Each Sector', fontsize = 20)\n    ax[i].set_ylabel('Rating', fontsize = 20)\n    ax[i].set_xlabel('Sector', fontsize = 20)\n    ax[i].set_xticklabels(textwrap.fill(x.get_text(), max_width) for x in ax[i].get_xticklabels())\n    ax[i].set_yticks(np.arange(0, 5, step = 0.5))\n    for index, data_rating[i] in enumerate(np.round(data_rating[i]['Rating'], 2)):\n        ax[i].text(x=index-0.1 , y =data_rating[i] , s=f\"{data_rating[i]}\" , fontdict=dict(fontsize=16))\n    ax[i].tick_params(labelsize = 18)\n    \nplt.show()","fdc0524b":"dataview_top = data.groupby('Industry')['Rating'].mean().reset_index()\ndataview_top = dataview_top.sort_values('Rating', ascending = False).head(10)\n\ndataview_bot = data.groupby('Industry')['Rating'].mean().reset_index()\ndataview_bot = dataview_bot.sort_values('Rating', ascending = True).head(10)\n\nprint(dataview_top, '\\n' )\nprint(dataview_bot)","155084de":"max_width = 15\ndata_rating = [dataview_top, dataview_bot]\ndata_title = ['Top 10', 'Bottom 10']\nfig, ax = plt.subplots(2,1, figsize = (26,14))\nfig.subplots_adjust(hspace = 0.5)\nfor i in range(0,2):\n    sns.barplot(ax = ax[i], data = data_rating[i], x = 'Industry', y = 'Rating', color = 'orangered', label = 'Rating')\n    ax[i].set_title(data_title[i]+' Average Rating Company in Each Industry', fontsize = 20)\n    ax[i].set_ylabel('Rating', fontsize = 20)\n    ax[i].set_xlabel('Industry', fontsize = 20)\n    ax[i].set_xticklabels(textwrap.fill(x.get_text(), max_width) for x in ax[i].get_xticklabels())\n    ax[i].set_yticks(np.arange(0, 5, step = 0.5))\n    for index, data_rating[i] in enumerate(np.round(data_rating[i]['Rating'], 2)):\n        ax[i].text(x=index-0.1 , y =data_rating[i] , s=f\"{data_rating[i]}\" , fontdict=dict(fontsize=16))\n    ax[i].tick_params(labelsize = 18)\n    \nplt.show()","6e0c13d2":"## Location Vs Salary Estimate","44286341":"## Salary Vs Location","09024fd9":"## Location vs Industry","db719893":"# Preprocessing Data","a0d5bcd2":"# Analysis and Visualization","1a92ec3e":"# Salary","2a638f66":"# Easy Apply","9b06f465":"### Cleaning Revenue Column Values","11875819":"## Cleaning Job Title Columns","5c2941db":"## Cleaning Columns","fbf6e79f":"## Rating vs Industry","9fb1eb74":"# Revenue","8308808f":"## Salary Vs Sector","d828310f":"## Drop Columns and Rows","8c5542da":"## Rating vs Sector","408d0fa6":"### Cleaning Salary Column Values","7fe3e776":"## Salary Vs Industry","ceaaeea0":"## Rating","09cad444":"## Location vs Sector","a8f36a15":"## Rating vs Location","aa1f14d8":"from the figure above, we know open recruitments its not only for data scientist job. So, we drop data which doesn't contain data scientist or data science in Job title columns, because we want to explore only data scientist jobs.","5750d469":"# Location"}}