{"cell_type":{"5050eb16":"code","2700e95d":"code","60838f9b":"code","043133eb":"code","54c2bc37":"code","dc8e033d":"code","f33d765d":"code","1c8a8c25":"code","4a1a5852":"code","b808e34b":"code","ba413cc2":"code","a0b58fc5":"code","c6888568":"code","02ff12e0":"code","52296307":"code","cb36e2ba":"code","2ef9f651":"code","948fc9d7":"code","0cf1f1c1":"code","3ded18b0":"code","039361c8":"code","966f41bc":"code","ba7b6cb5":"code","09953980":"code","7dfa738a":"code","a3b994ff":"markdown","6dea2933":"markdown","3bbe9ca5":"markdown","e004d9e5":"markdown","c4a0da70":"markdown","e9e0d861":"markdown","c392edd8":"markdown","3f8f5e48":"markdown","3fe3d3e7":"markdown","d531a3f7":"markdown","c4a16d43":"markdown","95b5fbd0":"markdown","106398d6":"markdown","f7a382ba":"markdown","5c8f4b1a":"markdown","6aeb3128":"markdown"},"source":{"5050eb16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2700e95d":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport warnings\nwarnings.simplefilter(\"ignore\")","60838f9b":"data = pd.read_csv(\"..\/input\/iris-flower-dataset\/IRIS.csv\")\ndata.head()","043133eb":"data.shape\n# 150 samples","54c2bc37":"# How many flowers for each species are present?\ndata[\"species\"].value_counts()\n#Iris is a balanced dataset as the number of data points for every class is 50.","dc8e033d":"# 2-D Scatter plot with color-coding for each flower type\/class\/species.\n \nsns.set_style(\"whitegrid\");\n\nsns.FacetGrid(data, hue=\"species\", size=4) \\\n   .map(plt.scatter, \"sepal_length\", \"sepal_width\") \\\n   .add_legend();\nplt.show();\n\n# Notice that the blue points (setosa) can be easily seperated \n# from orange and green by drawing a line. \n# But orange (versicolor) and green (virginica) data points cannot be easily seperated.\n","f33d765d":"# 2-D Scatter plot with color-coding for each flower type\/class\/species.\n \nsns.set_style(\"whitegrid\");\n\nsns.FacetGrid(data, hue=\"species\", size=4) \\\n   .map(plt.scatter, \"petal_length\", \"petal_width\") \\\n   .add_legend();\nplt.show();\n\n# Notice that the blue points (setosa) can be easily seperated \n# from orange and green by drawing a line. \n# But orange (versicolor) and green (virginica) data points cannot be easily seperated (although better than\n# than sepal ).\n","1c8a8c25":"## Cannot visualize higher dimensional patterns in 3-D and 4-D. \n# Only possible to view 2D patterns.\n# plt.close();\nsns.set_style(\"whitegrid\");\nsns.pairplot(data, hue=\"species\", size=3);\nplt.show()\n# NOTE: the diagnol elements are PDFs for each feature. ","4a1a5852":"#1-D scatter plot of petal-length\n\niris_setosa = data.loc[data[\"species\"] == \"Iris-setosa\"];\niris_virginica = data.loc[data[\"species\"] == \"Iris-virginica\"];\niris_versicolor = data.loc[data[\"species\"] == \"Iris-versicolor\"];\n\n\nplt.plot(iris_setosa[\"petal_length\"], np.zeros_like(iris_setosa['petal_length']), '*')\nplt.plot(iris_versicolor[\"petal_length\"], np.zeros_like(iris_versicolor['petal_length']), '*')\nplt.plot(iris_virginica[\"petal_length\"], np.zeros_like(iris_virginica['petal_length']), '*')\n\nplt.show()\n\n# Disadvantages of 1-D scatter plot: \n    # very hard to make sense as points \n    # are overlapping a lot.\n    # Are there better ways of visualizing 1-D scatter plots?","b808e34b":"# histogram of petal length\nsns.FacetGrid(data, hue=\"species\", size=5) \\\n   .map(sns.distplot, \"petal_length\") \\\n   .add_legend();\nplt.show();","ba413cc2":"# histogram of petal width\nsns.FacetGrid(data, hue=\"species\", size=5) \\\n   .map(sns.distplot, \"petal_width\") \\\n   .add_legend();\nplt.show();","a0b58fc5":"# histogram of sepal length\n\nsns.FacetGrid(data, hue=\"species\", size=5) \\\n   .map(sns.distplot, \"sepal_length\") \\\n   .add_legend();\nplt.show();","c6888568":"sns.FacetGrid(data, hue=\"species\", size=5) \\\n   .map(sns.distplot, \"sepal_width\") \\\n   .add_legend();\nplt.show();","02ff12e0":"counts, bin_edges = np.histogram(iris_setosa['petal_length'], bins=10, \n                                 density = True)\n\nprint(counts) # the values of histogram\nprint()\nprint(bin_edges) # the edges of bins\n\n# count - y; bin_edges - x\nplt.plot(bin_edges[1:], counts)","52296307":"# calculating pdf\npdf = counts\/(sum(counts))\n\n# calculating cdf\ncdf = np.cumsum(pdf)\n\nprint(\"pdf = \", pdf)\nprint()\nprint(\"cdf = \", cdf)","cb36e2ba":"# plotting \nplt.plot(bin_edges[1:], pdf, label = 'pdf')\nplt.plot(bin_edges[1:], cdf, label = 'cdf')\nplt.legend()","2ef9f651":"# plotting all the three species together to see if they can be seperated\n\n## iris_setosa\ncount, bin_edges = np.histogram(iris_setosa['petal_length'], bins = 10, density = True)\npdf = counts \/ sum(counts)\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:], pdf)\nplt.plot(bin_edges[1:], cdf)\n\n\n## iris_virginica\ncounts, bin_edges = np.histogram(iris_virginica['petal_length'], bins = 10, density = True)\npdf = counts \/ sum(counts)\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:], pdf)\nplt.plot(bin_edges[1:], cdf)\n\n\n## versicolor\ncounts, bin_edges = np.histogram(iris_versicolor['petal_length'], bins=10, density = True)\npdf = counts \/ sum(counts)\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)","948fc9d7":"print(\"Means:\")\n\nprint(np.mean(iris_setosa[\"petal_length\"]))\nprint(np.mean(iris_virginica[\"petal_length\"]))\nprint(np.mean(iris_versicolor[\"petal_length\"]))\n\nprint(\"\\nStd-dev:\");\nprint(np.std(iris_setosa[\"petal_length\"]))\nprint(np.std(iris_virginica[\"petal_length\"]))\nprint(np.std(iris_versicolor[\"petal_length\"]))\n","0cf1f1c1":"#Median, \nprint(\"\\nMedians:\")\nprint(np.median(iris_setosa[\"petal_length\"]))\n\n#Median with an outlier: not getting affected\nprint(np.median(np.append(iris_setosa[\"petal_length\"],50)));\n\nprint(np.median(iris_virginica[\"petal_length\"]))\nprint(np.median(iris_versicolor[\"petal_length\"]))","3ded18b0":"print(\"Quantiles:\")\nprint(np.percentile(iris_setosa[\"petal_length\"],np.arange(0, 100, 25))) # 25th, 50th, 75th, 100th\n\nprint(np.percentile(iris_virginica[\"petal_length\"],np.arange(0, 100, 25)))\n\nprint(np.percentile(iris_versicolor[\"petal_length\"], np.arange(0, 100, 25)))\n\n\nprint(\"\\n90th Percentiles:\")\nprint(np.percentile(iris_setosa[\"petal_length\"],90))\nprint(np.percentile(iris_virginica[\"petal_length\"],90))\nprint(np.percentile(iris_versicolor[\"petal_length\"], 90))","039361c8":"from statsmodels import robust\nprint (\"\\nMedian Absolute Deviation\")\nprint(robust.mad(iris_setosa[\"petal_length\"]))\nprint(robust.mad(iris_virginica[\"petal_length\"]))\nprint(robust.mad(iris_versicolor[\"petal_length\"]))","966f41bc":"\n#Box-plot with whiskers: another method of visualizing the  1-D scatter plot more intuitivey.\n# The Concept of median, percentile, quantile.\n\n\n#NOTE: In the plot below, a technique call inter-quartile range is used in plotting the whiskers. \n\n#Whiskers in the plot below don't correposnd to the min and max values.\n\n#Box-plot can be visualized as a PDF on the side-ways.\n\nplt.figure(figsize=(15,12))\nsns.boxplot(x='species',y='petal_length', data=data)\nplt.grid(True)\nplt.show()","ba7b6cb5":"plt.figure(figsize = (15, 12))\nsns.violinplot(x=\"species\", y=\"petal_length\", data=data, size=8)\nplt.show()","09953980":"#2D Density plot, contors-plot\nsns.jointplot(x=\"petal_length\", y=\"petal_width\", data=iris_setosa, kind=\"kde\")\nplt.show()","7dfa738a":"#2D Density plot, contors-plot\nsns.jointplot(x=\"petal_length\", y=\"petal_width\", hue = 'species', data=data, kind=\"kde\")\nplt.show()","a3b994ff":"### Quantiles, Percentiles, IQR.\n* **Percentile** tells, about what percent of point is less than the current value. Say, 40 percentile of a data is 120; then 40% percent of data is less than 120, 60% percent of data values are greater than 120.\n\n* **Quantiles**: \n    * 1st quantile: 25th percentile\n    * 2nd quantile: 50th percentile\n    * 3rd quantile: 75th percentile\n    * 4th quantile: 100th percentile\n    \n    \n* IQR = (75th percentile) - (25th percentile)\n\n","6dea2933":"#### From the above plot, we can clearly seperate the 3 species (specially setosa from rest)\n* For versicolor and verginica, the sepation is although not that perfect, but based upon the histogram we can estimate it.\n* Say at 4.5, although we have both versicolor and verginica, but the chances of versicolor is more. \n* similarly, at 5, the chances of virginica is more\n* So there will be some errors, but majority of time, if points lie in intersection region, we will be able to correctly classify them","3bbe9ca5":"### Violin Plots\n* combines the benefits of both histograms and boxplots\n* Denser regions of the data are fatter, and sparser ones thinner \n* violin plots holds box plots inside them\n* on the side, it plots density (smoothen histograms)\n","e004d9e5":"#### Observations:\n* For setosa, the petal length typically lies between 1 - 2\n* For verginica, the petal length typically lies between 3.2 to 5.1. But near to 0.2 percent of verginica flowers with petal length greater than 4.8 collide with versicolor\n* For  versicolor, the petal length typically lies between 4.8 to 6.9. But 0.2 percent of flowers with petal lengthless 5.1 collide with verginica","c4a0da70":"#### Observations\n* petal_length along with any other feature seems to be the most useful features to identify various flower types.\n* While Setosa can be easily identified (linearly seperable), Virginica and Versicolor have some overlap (almost linearly seperable).\n","e9e0d861":"### Box and Whiskers plot\n* Histogram helps to give idea regarding distribution of data,\n* Boxplot helps to give all info regarding percentiles\n* Whiskers: (75 percentile + 1.5 * IQR, 25 percentile - 1.5 * IQR)","c392edd8":"### Histograms:\n* Histograms and Probability Density Functions (PDF) using KDE","3f8f5e48":"### Multivariate probability density plot and contour plot\n* In prob density plot, where there is more data, the curve will go up\n* In contour plot, the color is deep\/dark where there is more data points","3fe3d3e7":"## Reading data","d531a3f7":"#### CDF\n* Disadv of PDF: we cannot say what percentage of versicolor points have a petal_length of less than 5?\n* Need for Cumulative Distribution Function (CDF)\n    * We can visually see what percentage of versicolor flowers have a petal_length of less than 5","c4a16d43":"#### pairwise scatter plot: Pair-Plot","95b5fbd0":"#### Observations:\n* Based on the histograms, we can see if we have to consider just a single feature then petal_length will be the best.\n* Petal_widht comes next, as it is seperating the 3 species quite well too","106398d6":"#### MAD - Median absolute deviation\n* calculation: median of (abs(x_i - median))\n* MAD is like Standard Deviation, but is robust to outliers","f7a382ba":"### Mean, Variance, Std-deviation, Median\n* Mean tells us about the average of petal length for each species\n* Standard Deviation\/variance tells us about the spead of data for each species\n\n* **Outliers** can put an impact on mean, variance values\n\n* **Median** is robust to a small number of outliers. Only if more than half of the values are outliers (or corrupted), the median would get deviated","5c8f4b1a":"## Importing Libraries","6aeb3128":"## EDA "}}