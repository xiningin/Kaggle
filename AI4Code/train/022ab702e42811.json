{"cell_type":{"204e1624":"code","401c8a72":"code","4b07783e":"code","27f8370c":"code","879fbdef":"code","ba2a25cf":"code","52cea33a":"code","498c74ec":"code","2ae223e4":"code","6fd545e0":"code","b3cd779b":"code","39fbabde":"code","19f0fb85":"code","bcfcbc0e":"code","9d72cb7f":"code","94a0358d":"code","4bb4cb63":"code","ec7c3aa6":"code","705e3265":"code","8a26404a":"code","bfba81c5":"code","7e95dcc6":"code","66cd01a9":"code","d3a3a215":"code","78c93118":"code","499609ae":"code","fae05c7d":"code","8c7c8dbe":"code","9d401892":"code","95d193c7":"code","ad7f6946":"code","d04984d1":"code","1f74aeaf":"code","4ccab62e":"code","8723235a":"code","cf7bebe3":"code","50ac9b45":"code","2391feb0":"code","9755c21b":"code","2df3d5f4":"code","6c9377aa":"code","f527b914":"code","144ba25f":"code","769cf843":"markdown","03dd337a":"markdown","4f5c5805":"markdown","3614aa17":"markdown","4be42614":"markdown","38a58eb3":"markdown","8d0c9fa5":"markdown","cc98cc3a":"markdown","2caab769":"markdown"},"source":{"204e1624":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport re\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel","401c8a72":"df = pd.read_csv('..\/input\/top-anime\/Anime Dataset\/anime.csv')\ndf_syn = pd.read_csv('..\/input\/top-anime\/Anime Dataset\/anime_synopsis.csv')\ndf_full = df.merge(df_syn, on='Title', how='left')","4b07783e":"df_full.sample(5)","27f8370c":"df_full.isnull().sum()","879fbdef":"df_full.info()","ba2a25cf":"# Change Voters type data to int from object\ndf_full['Voters'] = df_full['Voters'].apply(lambda x: re.sub(\",\",\"\",x)) # Remove ','(comma) from values\ndf_full['Voters'] = df_full['Voters'].astype('int32')","52cea33a":"histcol = ['Rating','Voters']\nplt.figure(figsize=(15,10))\nfor i,column in enumerate(histcol):  \n    plt.subplot(len(histcol), 2, i+1)\n    plt.suptitle(\"Distribution\")\n    plt.hist(df_full[column])\n    plt.title(f\"{column}\")\n    plt.tight_layout()","498c74ec":"columns = ['Production','Source']\nplt.figure(figsize=(15,10))\nfor i,column in enumerate(columns):  \n    plt.subplot(len(columns), 2, i+1)\n    plt.suptitle(\"Top 10 Values\")\n    sns.countplot(data=df_full, x=column, order=df_full[column].value_counts().iloc[:10].index)\n    plt.title(f\"{column}\")\n    plt.xticks(rotation=45)\n    plt.tight_layout()","2ae223e4":"# Split genre\ngenre = df_full['Genre']\nclean_genre = genre.apply(lambda x: re.sub(\" \",\"\",x))\nclean_genre = clean_genre.apply(lambda x: re.sub(\",\",\" \",x))\njoin_genre = ' '.join([text for text in clean_genre])\ngenre_count = pd.Series(join_genre.split()).value_counts()","6fd545e0":"# Plot Genre\ngenre_count.plot(kind='bar')\nplt.title('Top Genre')\nplt.show()","b3cd779b":"# Split Theme\ntheme = df_full['Theme']\nclean_theme = theme.apply(lambda x: re.sub(\" \",\"\",x))\nclean_theme = clean_theme.apply(lambda x: re.sub(\",\",\" \",x))\njoin_theme = ' '.join([text for text in clean_theme])\ntheme_count = pd.Series(join_theme.split()).value_counts()","39fbabde":"# Plot Theme\nplt.figure(figsize=(10,5))\ntheme_count.plot(kind='bar')\nplt.title('Top Theme')\nplt.show()","19f0fb85":"# Anime with the most episode\ndf_mostepisode = df_full[['Title','Episodes']]\ndf_mostepisode = df_mostepisode.set_index('Title', drop=True)\ndf_mostepisode = df_mostepisode[~(df_mostepisode['Episodes']=='?')] # Drop anime with '?' episode\ndf_mostepisode['Episodes'] = df_mostepisode['Episodes'].astype('int32')\ndf_mostepisode.sort_values('Episodes', ascending=False).head(10).plot(kind='bar')\nplt.title('Top 10 Anime With the Most Episode')\nplt.ylabel('Count')","bcfcbc0e":"# Anime with highest Rating\nfig, ax = plt.subplots(1,2,figsize=(15,10))\nplot_order = df_full.groupby('Title')['Rating'].sum().sort_values(ascending=False).index.values\nsns.barplot(data=df_full, x='Title', y='Rating', order=plot_order[:10], ax=ax[0])\nax[0].title.set_text('Top 10 Anime Highest Rating')\nax[0].set_xticklabels(plot_order[:10],rotation=90)\nsns.barplot(data=df_full, x='Title', y='Rating', order=plot_order[-10:], ax=ax[1])\nax[1].title.set_text('Top 10 Anime Lowest Rating')\nax[1].set_xticklabels(plot_order[-10:],rotation=90)\nplt.tight_layout()\nplt.show()","9d72cb7f":"# Anime with the most Votes\nfig, ax = plt.subplots(1,2,figsize=(15,10))\nplot_order = df_full.groupby('Title')['Voters'].sum().sort_values(ascending=False).index.values\nsns.barplot(data=df_full, x='Title', y='Voters', order=plot_order[:10], ax=ax[0])\nax[0].title.set_text('Top 10 Anime Highest Vote')\nax[0].set_xticklabels(plot_order[:10],rotation=90)\nsns.barplot(data=df_full, x='Title', y='Voters', order=plot_order[-10:], ax=ax[1])\nax[1].title.set_text('Top 10 Anime Lowest Vote')\nax[1].set_xticklabels(plot_order[-10:],rotation=90)\nplt.tight_layout()\nplt.show()","94a0358d":"# Production House With the Most Votes\nfig, ax = plt.subplots(1,2,figsize=(15,10))\nplot_order = df_full.groupby('Production')['Voters'].sum().sort_values(ascending=False)\ndf_full.groupby('Production')['Voters'].sum().sort_values(ascending=False).head(10).plot(kind='bar',ax=ax[0])\nax[0].title.set_text('Top 10 Production Highest Vote')\nax[0].set_xticklabels(plot_order[:10].index,rotation=90)\ndf_full.groupby('Production')['Voters'].sum().sort_values(ascending=True).head(10).plot(kind='bar',ax=ax[1])\nax[1].title.set_text('Top 10 Production Lowest Vote')\nax[1].set_xticklabels(plot_order[-10:].index,rotation=90)\nplt.show()","4bb4cb63":"# Oldest Anime\ndf_date = df_full[['Title','Airdate']]\ndf_date = df_date.dropna() # Drop NaN \ndf_date['Airdate'] = df_date['Airdate'].apply(lambda x: ','.join(x.split(',')[:2])) # Only take MM-DD,YYYY\ndf_date = df_date[~(df_date['Airdate'].str.contains('\\?\\?\\? \\?\\?'))] # Remove value with not fix month and date\ndf_date['Airdate'] = df_date['Airdate'].apply(lambda x: re.sub('\\?\\?', '', x))\ndf_date['Airdate'] = pd.to_datetime(df_date['Airdate']) # Change data type to datetime\ndf_date.sort_values('Airdate').head(10)","ec7c3aa6":"# The latest anime whose airdate is fixed\ndf_date.sort_values('Airdate', ascending=False).head(10)","705e3265":"# Calculate mean of vote average column\nC = df_full['Rating'].mean()\nC","8a26404a":"# Calculate the minimum number of votes required to be in the chart, m\nm = df_full['Voters'].quantile(0.90)\nprint(m)","bfba81c5":"# Filter out all qualified animes into a new DataFrame\nq_anime = df_full.copy().loc[df_full['Voters'] >= m]\nq_anime.shape","7e95dcc6":"# Function that computes the weighted rating of each movie\ndef weighted_rating(x, m=m, C=C):\n    v = x['Voters']\n    R = x['Rating']\n    # Calculation based on the IMDB formula\n    return (v\/(v+m) * R) + (m\/(m+v) * C)","66cd01a9":"# Define a new feature 'score' and calculate its value with `weighted_rating()`\nq_anime['score'] = q_anime.apply(weighted_rating, axis=1)","d3a3a215":"#Sort movies based on score calculated above\nq_anime.sort_values('score', ascending=False)[['Title','Voters','Rating','score']].head(10)","78c93118":"# Lower all text\ndf_full['Synopsis'] = df_full['Synopsis'].apply(lambda x: str.lower(x))","499609ae":"# Fit text to TFIDF\ntfidf = TfidfVectorizer(stop_words='english')\ntfidf_matrix = tfidf.fit_transform(df_full['Synopsis'])","fae05c7d":"# Create cosine similarity with linear kernel\ncosine_sim = linear_kernel(tfidf_matrix,tfidf_matrix)","8c7c8dbe":"# Create indices for anime title\nindices = pd.Series(df_full.index, index=df_full['Title']).drop_duplicates()\nindices[:10]","9d401892":"# Function that takes in anime title as input and outputs most similar anime\ndef get_recommendations(title, ind=indices ,cosine_sim=cosine_sim):\n    idx = ind[title]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:11]\n    anime_indices = [i[0] for i in sim_scores]\n    return df_full['Title'].iloc[anime_indices]","95d193c7":"# Random Anime title\nanime = df_full['Title'].sample(1).values[0]\nanime","ad7f6946":"# Get recommendation\nget_recommendations(anime)","d04984d1":"# Make copy first\ndf_copy = df_full.copy()","1f74aeaf":"# Select the column as attribute\nAttrCols = ['Production','Source','Genre','Theme']","4ccab62e":"# Func to clean the data\ndef clean_data(x):\n    x = str.lower(x.replace(\" \", \"\"))\n    x = re.sub(\"-\", '', x)\n    x = re.sub(\",\", ' ', x)\n    return x","8723235a":"# Apply the clean_data func to df\nfor AttrCol in AttrCols:\n    df_copy[AttrCol] = df_copy[AttrCol].apply(clean_data)","cf7bebe3":"df_copy.sample(5)","50ac9b45":"# Func to join all attr\ndef create_soup(x):\n    return x['Production'] + ' ' + x['Source'] + ' ' + x['Genre'] + ' ' + x['Theme']","2391feb0":"df_copy['Soup'] = df_copy.apply(create_soup, axis=1)","9755c21b":"df_copy['Soup']","2df3d5f4":"# Give value to data with CountVectorizer\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(df_copy['Soup'])","6c9377aa":"cosine_sim2 = linear_kernel(count_matrix,count_matrix)","f527b914":"comic2 = df_copy['Title'].sample(1).values[0]\ncomic2","144ba25f":"get_recommendations(comic2,cosine_sim=cosine_sim2)","769cf843":"![](https:\/\/images.tutorialedge.net\/images\/python\/recommender-system-python\/image2-19.png)\n\n","03dd337a":"<h2 style='background:#DBC3DA; border:0; color:black'><center> 3. Recommendation From Attribute <\/center><\/h2> ","4f5c5805":"<h1 style='background:#CCE2CB; border:0; color:black'><center> EDA <\/center><\/h1>","3614aa17":"Before we were plot anime with the highest rating, but for a recommendation, we can't use that, because it's unfair, there could be an anime with a high rating but only a few votes, so we will normalize them with metric","4be42614":"<h2 style='background:#DBC3DA; border:0; color:black'><center> 1. Recommendation From Rating <\/center><\/h2> ","38a58eb3":"<h1 style='background:#CCE2CB; border:0; color:black'><center> Load Data <\/center><\/h1> ","8d0c9fa5":"<h1 style='background:#CCE2CB; border:0; color:black'><center> Importing Libraries <\/center><\/h1> ","cc98cc3a":"<h1 style='background:#CCE2CB; border:0; color:black'><center> RECOMMENDATION SYSTEM <\/center><\/h1> ","2caab769":"<h2 style='background:#DBC3DA; border:0; color:black'><center> 2. Recommendation From Synopsis <\/center><\/h2> "}}