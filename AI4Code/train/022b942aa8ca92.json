{"cell_type":{"477df106":"code","aff0ff00":"code","592c8ab5":"code","bb5b8ffe":"code","da72bb23":"code","6a84bf11":"code","23ce841c":"code","cafd1db2":"code","c0914034":"code","bf30be4e":"code","1ea0c7b5":"code","3afd2dce":"code","58189425":"code","bb010727":"code","269ace7b":"code","e07e2699":"code","a3820bbd":"code","92b8d96c":"code","a796b7d4":"code","c69172f5":"code","a82abd66":"code","7a2b4b0b":"code","b7311e78":"code","2796363e":"code","562e4736":"code","dfdd8c63":"code","00c532d9":"code","fbd0244b":"markdown","d015c6b6":"markdown","682b1080":"markdown","8d8bccc7":"markdown","e909c61d":"markdown","b8777b95":"markdown","3ab5c52f":"markdown","16401eec":"markdown","bab568c9":"markdown"},"source":{"477df106":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nfrom datetime import datetime, date\nfrom calendar import day_name","aff0ff00":"df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv', index_col='row_id')\ndf.date= pd.to_datetime(df.date)\ndf.head()","592c8ab5":"def convert_detail_days(frame, column):\n    frame['Year'] = frame[column].apply(lambda x: x.year)\n    frame['Month'] = frame[column].apply(lambda x: x.month)\n    frame['DayOfMonth'] = frame[column].apply(lambda x: x.day)\n    frame['DayOfWeek'] = frame[column].apply(lambda x: day_name[x.dayofweek])\n    frame['DayOfYear'] = frame[column].apply(lambda x: x.dayofyear)\n    frame['WeekOfYear'] = frame[column].apply(lambda x: x.weekofyear)\n# ----------------\nconvert_detail_days(df, 'date')\ndf.head()","bb5b8ffe":"def plot_query_store(store, ax):\n    df_agg = df[df.store == store].groupby(by=['WeekOfYear', 'DayOfWeek']).median().reset_index()\n    sb.heatmap(\n        df_agg.pivot(\n            index='WeekOfYear',\n            columns='DayOfWeek',\n            values='num_sold'\n        )[['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']],\n        cmap=\"YlGnBu\",\n        vmin=0, \n        vmax=1200,\n        ax=ax\n    )\n    ax.set_title(store)\n# --------------------\nf, axes = plt.subplots(1, 2, figsize=(12,11))\nplot_query_store('KaggleMart', ax=axes[0])\nplot_query_store('KaggleRama', ax=axes[1])\nplt.show()","da72bb23":"def plot_query_week_and_feature(store, year, column, ax):\n    df_agg = df[(df.store == store) & (df.Year == year)].groupby(by=['DayOfWeek', column]).median().reset_index()\n    df_agg.num_sold = df_agg.num_sold.astype(int)\n    sb.heatmap(\n        df_agg.pivot(\n            index=column,\n            columns='DayOfWeek',\n            values='num_sold'\n        )[['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']].T,\n        cmap=\"YlGnBu\",\n        vmin=0, \n        vmax=1000,\n        annot=True, fmt=\"d\",\n        ax=ax\n    )\n    ax.set_title(store + ' - ' + str(year))","6a84bf11":"for year in [2015, 2016, 2017, 2018]:\n    f, axes = plt.subplots(1, 2, figsize=(15,3))\n    plot_query_week_and_feature('KaggleMart', year = year, column='product', ax = axes[0])\n    plot_query_week_and_feature('KaggleRama', year = year, column='product', ax = axes[1])\n    plt.show()","23ce841c":"for year in [2015, 2016, 2017, 2018]:\n    f, axes = plt.subplots(1, 2, figsize=(15,3))\n    plot_query_week_and_feature('KaggleMart', year = year, column='country', ax = axes[0])\n    plot_query_week_and_feature('KaggleRama', year = year, column='country', ax = axes[1])\n    plt.show()    ","cafd1db2":"from statsmodels.stats.diagnostic import acorr_ljungbox\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX","c0914034":"from IPython.display import display_html\ndef displaySideBySide(dict_table):\n    style = 'style=\"color: black; text-align: center; font-size: 14px; font-weight: bold;\"'\n    html_str=''\n    for name, df in dict_table.items():\n        html_str += df.to_html().replace(\n            '<table border=\"1\" class=\"dataframe\">',\n            '<table border=\"1\" class=\"dataframe\"> <caption ' + style + '>' + name + '<\/caption>'\n        )\n    display_html(html_str.replace('table','table style=\"display:inline\"'),raw=True)","bf30be4e":"def groupByWeekOfYear(frame, store, country, product):\n    fr = frame[\n        (frame.store == store) & \n        (frame.country == country) & \n        (frame['product'] == product) \n    ].groupby(by=['Year','WeekOfYear']).sum().reset_index()\n    fr.index = list(fr.index + 1)\n    fr = fr[['num_sold']]\n    return fr\n# ----------------\ndf_KaggleRama = groupByWeekOfYear(df, store='KaggleRama', country='Norway', product='Kaggle Hat') \nprint(df_KaggleRama.shape)\ndf_KaggleRama.head()","1ea0c7b5":"def plot_acf_pacf(series, maxlags=20):\n    fig =plt.figure(figsize=(15,8), dpi= 100)\n    fig.subplots_adjust(bottom=0.025, left=0.025, top = 0.975, right=0.975)\n    ax1 = fig.add_subplot(2, 1, 1)\n    ax1.plot(\n        series.index,\n        series.values\n    )\n    ax2 = fig.add_subplot(2, 2, 3)\n    plot_acf(series, lags=50, ax=ax2)\n    ax3 = fig.add_subplot(2, 2, 4)\n    plot_pacf(series, lags=maxlags, method='ywm', ax=ax3)\n    plt.show()\n# -------------\nplot_acf_pacf(df_KaggleRama.num_sold, maxlags=50)","3afd2dce":"def plot_seasonal_decompose(data, model='add', period=12):\n    result_add = seasonal_decompose(\n        data, \n        model='add',\n        period=period,\n        extrapolate_trend='freq'\n    )\n    plt.rcParams.update({'figure.figsize': (12,8)})\n    result_add.plot().suptitle('', fontsize=22)\n    plt.show()\n    return result_add\n# ----------------\ndecomposeResult = plot_seasonal_decompose(\n    df_KaggleRama.num_sold, \n    model='add',\n    period=53,\n)","58189425":"def test_Augmented_Dickey_Fuller(data, anpha=0.05):\n    result = adfuller(data)\n    stationary = 'is non-stationary' if (result[1] >= anpha) else 'is stationary'\n    print('ADF Statistic: %f' % result[0])\n    print('p-value:', result[1], '->', stationary)\n    print('Critical Values:')\n    for key, value in result[4].items():\n        print('\\t%s: %.3f' % (key, value))\n# ------------------\ntest_Augmented_Dickey_Fuller(df_KaggleRama.num_sold)","bb010727":"def split_Train_Test_TimeSeries(frame, split):\n    n_length = len(frame) - split\n    train = frame[0: (n_length)]\n    test = frame[n_length : len(frame)]\n    return train, test\n# --------------\ntrain_Rama, test_Rama = split_Train_Test_TimeSeries(df_KaggleRama.num_sold, 15)\nprint(train_Rama.shape)\nprint(test_Rama.shape)","269ace7b":"def fit_Model_SARIMA(train, test, order, seasonal_order, forecast=5, freq='D', isShowAIC=True):\n    model = SARIMAX(\n        train,\n        order=order,\n        seasonal_order=seasonal_order,\n        freq=freq\n    )\n    model_fit = model.fit()\n    # print(str(test.head(1).index[0]) , ' - ' , str(test.tail(1).index[0]))\n    pre_val = model_fit.predict(\n        start = test.head(1).index[0], \n        end = test.tail(1).index[0]\n    )\n    fc_val = model_fit.forecast(len(test) + forecast)\n    fc_val = fc_val.tail(forecast)\n    if isShowAIC:\n        print('AIC: ', model_fit.summary())\n    return pre_val, fc_val, model_fit\n# ------------------------\npredict_values_Rama, forecast_values_Rama, model_ts = fit_Model_SARIMA(\n    train=train_Rama,\n    test=test_Rama,\n    order=(0,1,1),\n    seasonal_order=(1,1,0,53),\n    forecast=5,\n    freq=None\n)","e07e2699":"def plot_Show_Model_TimeSeries(train, test, predict, forecast, isFullTrain=True, numberTrain=15):\n    plt.figure(figsize=(15, 3))\n    if isFullTrain == True:\n        plt.plot(\n            train.index,\n            train.values,\n            color='gray',\n            label='train'\n        )\n    else:\n        end = len(train)\n        start = end - numberTrain\n        train_show = train[start : end]\n        plt.plot(\n            train_show.index,\n            train_show.values,\n            color='gray',\n            label='train'\n        )\n    plt.plot(\n        test.index,\n        test.values,\n        color='blue',\n        label='test'\n    )\n    plt.plot(\n        predict.index,\n        predict.values,\n        color='red',\n        label='predict'\n    )\n    plt.plot(\n        forecast.index,\n        forecast.values,\n        color='green',\n        label='forecast'\n    )\n    plt.legend(loc =\"upper left\")\n    plt.show()\n# ---------------    \nplot_Show_Model_TimeSeries(\n    train_Rama, test_Rama, predict_values_Rama, forecast_values_Rama,\n    isFullTrain=False, numberTrain=15\n)","a3820bbd":"df_KaggleMart = groupByWeekOfYear(df, store='KaggleMart', country='Norway', product='Kaggle Hat') \nprint(df_KaggleMart.shape)\ndf_KaggleMart.head()","92b8d96c":"plot_acf_pacf(df_KaggleMart.num_sold, maxlags=50)","a796b7d4":"decomposeResult = plot_seasonal_decompose(\n    df_KaggleMart.num_sold, \n    model='add',\n    period=53,\n)","c69172f5":"test_Augmented_Dickey_Fuller(df_KaggleMart.num_sold)","a82abd66":"train_Mart, test_Mart = split_Train_Test_TimeSeries(df_KaggleMart.num_sold, 15)\nprint(train_Mart.shape)\nprint(test_Mart.shape)","7a2b4b0b":"predict_values_Mart, forecast_values_Mart, model_ts = fit_Model_SARIMA(\n    train=train_Mart,\n    test=test_Mart,\n    order=(0,1,1),\n    seasonal_order=(1,1,0,53),\n    forecast=5,\n    freq=None\n)","b7311e78":"plot_Show_Model_TimeSeries(\n    train_Mart, test_Mart, predict_values_Mart, forecast_values_Mart,\n    isFullTrain=False, numberTrain=15\n)","2796363e":"displaySideBySide({\n    'KaggleRama': pd.DataFrame({\n        'Test' : test_Rama,\n        'Predict' : predict_values_Rama\n    }),\n    'KaggleMart': pd.DataFrame({\n        'Test' : test_Mart,\n        'Predict' : predict_values_Mart\n    }),\n    'Forecast_Rama' : pd.DataFrame({\n        'Forecast' : forecast_values_Rama\n    }),\n    'Forecast_Mart' : pd.DataFrame({\n        'Forecast' : forecast_values_Mart\n    })\n})","562e4736":"def plot_compare(preR, forR, preM, forM, title=''):\n    plt.figure(figsize=(7, 3))\n    plt.plot(\n        pd.concat([preR, forR]).index,\n        pd.concat([preR, forR]).values,\n        color='#BA4A00',\n        label='Rama'\n    )\n    plt.plot(\n        pd.concat([preM, forM]).index,\n        pd.concat([preM, forM]).values,\n        color='#F0B27A',\n        label='Mart'\n    )\n    plt.title(title)\n    plt.legend(loc =\"upper left\")\n    plt.show()\n# -----------------\nplot_compare(\n    preR = predict_values_Rama,\n    forR = forecast_values_Rama,\n    preM = predict_values_Mart,\n    forM = forecast_values_Mart,\n    title='Norway - Kaggle Hat'\n)","dfdd8c63":"import sys\nif not sys.warnoptions:\n    import warnings\n    warnings.simplefilter(\"ignore\")","00c532d9":"# country = 'Norway'\n# product = 'Kaggle Hat'\nlist_country = ['Finland', 'Sweden']\nlist_product = ['Kaggle Mug', 'Kaggle Sticker']\nfor country in list_country:\n    for product in list_product:\n        \n        df_KaggleMart = groupByWeekOfYear(df, store='KaggleMart', country=country, product=product) \n        df_KaggleRama = groupByWeekOfYear(df, store='KaggleRama', country=country, product=product)\n\n        train_Rama, test_Rama = split_Train_Test_TimeSeries(df_KaggleRama.num_sold, 15)\n        train_Mart, test_Mart = split_Train_Test_TimeSeries(df_KaggleMart.num_sold, 15)\n\n        predict_values_Rama, forecast_values_Rama, model_Rama = fit_Model_SARIMA(\n            train=train_Rama, test=test_Rama,\n            order=(0,1,1), seasonal_order=(1,1,0,53),\n            forecast=5, isShowAIC=False, freq=None\n        )\n        predict_values_Mart, forecast_values_Mart, model_Mart = fit_Model_SARIMA(\n            train=train_Mart, test=test_Mart,\n            order=(0,1,1), seasonal_order=(1,1,0,53),\n            forecast=5, isShowAIC=False, freq=None\n        )\n        plot_compare(\n            preR = predict_values_Rama,\n            forR = forecast_values_Rama,\n            preM = predict_values_Mart,\n            forM = forecast_values_Mart,\n            title= country + ' - ' + product\n        )","fbd0244b":"# KaggleRama - Norway - Kaggle Hat","d015c6b6":"# Other Country - Product","682b1080":"# Explore Time Series","8d8bccc7":"Select KaggleRama, because The values higher The KaggleMart in all product and country.","e909c61d":"# KaggleMart - Norway - Kaggle Hat","b8777b95":"# Explore Data","3ab5c52f":"# Decide","16401eec":"# Load Train Data","bab568c9":"# Compare KaggleRama - KaggleMart"}}