{"cell_type":{"0eae271b":"code","1756ed97":"code","1711364c":"code","a448dbe5":"code","37bbfa22":"code","ae820419":"code","4d0a692f":"code","e4ffd020":"code","ac101c89":"code","e859b2f7":"code","dbfe6dec":"code","dc1b5e6e":"code","84535e04":"code","acfe1175":"code","5c350dec":"code","5f9031e9":"code","e22aba7c":"code","c250cfb6":"code","2fb8d11b":"code","2496d9bd":"code","04aef842":"code","2f03bfd9":"code","9dea821f":"code","483e693f":"code","0064bec6":"code","29a09537":"code","aaf35c3a":"code","7cfb5bcf":"code","7d7a80ec":"code","d191ef42":"code","9aa93919":"code","4400a8f3":"code","f2bd985d":"code","40e7bda1":"code","7f2fa722":"code","a8602bb3":"code","61e39ce2":"code","33bc908a":"code","c3c48fba":"code","3862333e":"code","fb03e0aa":"code","2f09741a":"code","0c103dc9":"code","17040e7e":"code","281de299":"code","03190540":"code","8d62d9a8":"code","127237f5":"code","e432ac8c":"code","511d7b3e":"code","f776a0af":"code","5d36ff0c":"code","bf4013b4":"code","4a6d7f53":"code","a4a83575":"code","90168fe9":"code","344dffe9":"code","77f80254":"code","b2541cb0":"code","324be357":"code","1367d3cd":"code","55bf0d6c":"code","6a9e97f3":"code","78fd102f":"code","bb1a826e":"code","50f79112":"code","3d7ea9f4":"code","e21c96d1":"code","e64f6dd0":"code","5e60432b":"code","891fdee7":"code","a4ee3832":"code","4b101f6f":"code","37f3158f":"code","01080e9b":"code","7f3b696e":"code","a4280495":"code","539c71d3":"code","c68485f7":"code","48cf4534":"code","299dae56":"code","42da30f6":"code","e35e9c43":"markdown","444f5d5a":"markdown","57d84ae6":"markdown","8127d49e":"markdown","f1907c17":"markdown","07b165ec":"markdown","bc38e247":"markdown","bd21a362":"markdown","8f9db31c":"markdown","1536426a":"markdown","cf12e1b8":"markdown","8cd48271":"markdown","45283143":"markdown","0b39bebe":"markdown","c0f0c1c7":"markdown","61a76ac4":"markdown","bb0cbda6":"markdown","9804e8c2":"markdown"},"source":{"0eae271b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","1756ed97":"train_data=pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest_data=pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')","1711364c":"train_data.head()","a448dbe5":"train_data.columns","37bbfa22":"train_data.describe()","ae820419":"train_data.isnull().sum()","4d0a692f":"train_data.describe(include=['O'])","e4ffd020":"train_data.corr()","ac101c89":"sns.pairplot(data=train_data)","e859b2f7":"#Age column is normally distributed a little right skewed , now we won't change it\nplt.figure(figsize=(15,6))\nsns.histplot(train_data['Age'],kde=True)","dbfe6dec":"plt.figure(figsize=(15,6))\nsns.histplot(np.log(train_data['Age']),kde=True)","dc1b5e6e":"plt.figure(figsize=(15,6))\nsns.histplot(data=train_data,x=\"Age\",hue=\"Survived\",binwidth=2,multiple='stack')","84535e04":"plt.figure(figsize=(15,6))\nsns.boxplot(data=train_data,x=\"Age\")\n#AS there is not a any outlier in the \"Age\" column , we can continue ","acfe1175":"#Filling the \"Age\" column with mean value \ntrain_data[\"Age\"]=train_data['Age'].fillna(train_data['Age'].mean())\nprint(train_data[\"Age\"].mean())","5c350dec":"#Right Skewed data\nplt.figure(figsize=(15,6))\nsns.histplot(train_data[\"Fare\"],kde=True,binwidth=2)","5f9031e9":"#By taking log of \"fare\" column data no more normally distributed , so we will continue without lof\nplt.figure(figsize=(15,6))\nsns.histplot(np.log(train_data['Fare']),kde=True)","e22aba7c":"plt.figure(figsize=(15,6))\nsns.histplot(data=train_data,x=\"Fare\",hue=\"Survived\",binwidth=2,multiple='stack')","c250cfb6":"#train_data[\"Fare\"]=train_data['Fare'].fillna(train_data['Fare'].median())\ntrain_data[\"Fare\"]=train_data['Fare'].fillna(train_data['Fare'].mean())\ntrain_data['Fare'].mean()","2fb8d11b":"train_data.isnull().sum()","2496d9bd":"train_data['Name'].value_counts()","04aef842":"train_data['Cabin'].value_counts()","2f03bfd9":"#1).Taking first letter from cabin columns and trying to analyse which cabin have more survival rate\n#2). We can use this as a feature but filling of more than 65k values with mode will be foolish\n#3). Regression Method may help but we will not consider this for now\ndf=pd.DataFrame({'Cabin_pro':train_data['Cabin'].str[0],'Survive':train_data['Survived']})\nplt.figure(figsize=(15,6))\nsns.countplot(data=df,x=df[\"Cabin_pro\"],hue=df['Survive'])","9dea821f":"train_data=train_data.drop(['Name'],axis=1)\ntrain_data=train_data.drop(['Ticket'],axis=1)\ntrain_data=train_data.drop(['Cabin'],axis=1)\ntrain_data=train_data.drop(['PassengerId'],axis=1)","483e693f":"train_data.head()","0064bec6":"train_data['Pclass'].value_counts()","29a09537":"#People with pclass 3 has not-survived more\nplt.figure(figsize=(15,6))\nsns.countplot(data=train_data,x=train_data['Pclass'],hue=train_data['Survived'])","aaf35c3a":"train_data[['Survived','Pclass']].groupby('Pclass',as_index='False').mean().sort_values(by='Survived',ascending=False)","7cfb5bcf":"train_data['Sex'].value_counts()","7d7a80ec":"plt.figure(figsize=(15,6))\nsns.countplot(data=train_data,x=train_data['Sex'],hue=train_data['Survived'])","d191ef42":"train_data[\"Embarked\"].value_counts()","9aa93919":"train_data[['Survived','Embarked']].groupby('Embarked',as_index='False').mean().sort_values(by='Survived',ascending=False)","4400a8f3":"plt.figure(figsize=(15,6))\nsns.countplot(data=train_data,x=train_data['Embarked'],hue=train_data['Survived'])","f2bd985d":"train_data['Embarked']=train_data[\"Embarked\"].fillna(train_data['Embarked'].dropna().mode()[0])\n","40e7bda1":"train_data.isnull().sum()","7f2fa722":"train_data[\"AgeBand\"]=pd.cut(train_data[\"Age\"],4)\ntrain_data[['Survived','AgeBand']].groupby('AgeBand',as_index='False').mean().sort_values(by='Survived',ascending=False)","a8602bb3":"train_data.loc[train_data['Age']<=21.81,'Age']=0\ntrain_data.loc[(train_data['Age']>21.81) & (train_data['Age']<=43.54),'Age']=1\ntrain_data.loc[(train_data['Age']>43.54) & (train_data['Age']<=65.27),'Age']=2\ntrain_data.loc[(train_data['Age']>65.27) & (train_data['Age']<=87),'Age']=3\ntrain_data.loc[train_data['Age']>87,'Age']\n    \ntrain_data.head()\n    ","61e39ce2":"train_data[\"FareBand\"]=pd.cut(train_data[\"Fare\"],3)\ntrain_data[['Survived','FareBand']].groupby('FareBand',as_index='False').mean().sort_values(by='Survived',ascending=False)","33bc908a":"train_data.loc[train_data['Fare']<=248.673,'Fare']=0\ntrain_data.loc[(train_data['Fare']>248.673) & (train_data['Fare']<=496.667),'Fare']=1\ntrain_data.loc[(train_data['Fare']>496.667) & (train_data['Fare']<=744.66),'Fare']=2\ntrain_data.loc[train_data['Fare']>744.66,'Fare']\n    \ntrain_data.head()\n    ","c3c48fba":"#Dropping \"AgeBand\" and \"FareBand\" Column\ntrain_data=train_data.drop(['AgeBand','FareBand'],axis=1)","3862333e":"#Mapping \"Sex\" column \ntrain_data['Sex']=train_data['Sex'].map({'male':0,'female':1}).astype(int)","fb03e0aa":"#Mapping \"Embarked\" Column\ntrain_data[\"Embarked\"]=train_data['Embarked'].map({\"S\":0,\"C\":1,\"Q\":2}).astype(int)","2f09741a":"train_data.head(10)","0c103dc9":"#Making new Column \"FamilySize\"=\"Parch\"+\"SibSp\"\ntrain_data[\"FamilySize\"]=train_data[\"Parch\"]+train_data[\"SibSp\"]+1\ntrain_data[\"FamilySize\"].value_counts()","17040e7e":"plt.figure(figsize=(15,6))\nsns.countplot(data=train_data,x='FamilySize',hue='Survived')","281de299":"train_data[['Survived','FamilySize']].groupby('FamilySize',as_index='False').mean().sort_values(by='Survived',ascending=False)","03190540":"g=train_data.corr()\nplt.figure(figsize=(15,6))\nsns.heatmap(g,annot=True)","8d62d9a8":"train_data=train_data.drop(['SibSp',\"Parch\"],axis=1)","127237f5":"train_data","e432ac8c":"test_data=pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')\ntest_data.head(10)","511d7b3e":"test_data.isnull().sum()","f776a0af":"test_data=test_data.drop(['Ticket'],axis=1)\ntest_data=test_data.drop(['Cabin'],axis=1)\ntest_data=test_data.drop(['PassengerId'],axis=1)\ntest_data=test_data.drop(['Name'],axis=1)","5d36ff0c":"#Age column is normally distributed and little right skewed\nplt.figure(figsize=(15,6))\nsns.histplot(test_data[\"Age\"],kde=True)","bf4013b4":"plt.figure(figsize=(15,6))\n\nsns.histplot(np.log(test_data[\"Age\"]),kde=True)","4a6d7f53":"test_data[\"Age\"]=test_data['Age'].fillna(test_data['Age'].mean())","a4a83575":"plt.figure(figsize=(15,6))\nsns.histplot(test_data[\"Fare\"],kde=True)","90168fe9":"plt.figure(figsize=(15,6))\nsns.histplot(np.log(test_data[\"Fare\"]),kde=True)","344dffe9":"test_data[\"Fare\"]=test_data['Fare'].fillna(test_data['Fare'].mean())","77f80254":"test_data['Embarked']=test_data[\"Embarked\"].fillna(test_data['Embarked'].dropna().mode()[0])","b2541cb0":"test_data.loc[test_data['Age']<=21.81,'Age']=0\ntest_data.loc[(test_data['Age']>21.81) & (test_data['Age']<=43.54),'Age']=1\ntest_data.loc[(test_data['Age']>43.54) & (test_data['Age']<=65.27),'Age']=2\ntest_data.loc[(test_data['Age']>65.27) & (test_data['Age']<=87),'Age']=3\ntest_data.loc[test_data['Age']>87,'Age']\n    \ntest_data.head(20)\n","324be357":"test_data.loc[test_data['Fare']<=248.673,'Fare']=0\ntest_data.loc[(test_data['Fare']>248.673) & (test_data['Fare']<=496.667),'Fare']=1\ntest_data.loc[(test_data['Fare']>496.667) & (test_data['Fare']<=744.66),'Fare']=2\ntest_data.loc[test_data['Fare']>744.66,'Fare']\n    \ntest_data.head(100)\n","1367d3cd":"test_data['Sex']=test_data['Sex'].map({'male':0,'female':1}).astype(int)","55bf0d6c":"test_data[\"Embarked\"]=test_data['Embarked'].map({\"S\":0,\"C\":1,\"Q\":2}).astype(int)","6a9e97f3":"test_data.head()","78fd102f":"test_data[\"FamilySize\"]=test_data[\"Parch\"]+test_data[\"SibSp\"]+1","bb1a826e":"test_data=test_data.drop(['SibSp',\"Parch\"],axis=1)","50f79112":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV,RandomizedSearchCV\nimport optuna","3d7ea9f4":"y_train=train_data['Survived']\nx_train=train_data.drop(['Survived'],axis=1)\n\n","e21c96d1":"def objective_rf(trial):\n    y_train=train_data['Survived']\n    x_train=train_data.drop(['Survived'],axis=1)\n\n    n_estimators = trial.suggest_int('n_estimators', 2, 300)\n    max_depth = int(trial.suggest_loguniform('max_depth', 2, 50))\n    clf = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth)\n    return cross_val_score(clf, x_train, y_train, \n           n_jobs=-1, cv=5,scoring='f1').mean()\n","e64f6dd0":"study_rf= optuna.create_study(direction='maximize')\nstudy_rf.optimize(objective_rf, n_trials=40)\n","5e60432b":"trial_rf= study_rf.best_trial\nprint(trial_rf.value)\nprint(trial_rf.params)","891fdee7":"model_rf=RandomForestClassifier(n_estimators= 200, max_depth= 6)\n","a4ee3832":"res_rf=model_rf.fit(x_train,y_train)","4b101f6f":"pred_rf=res_rf.predict(test_data)","37f3158f":"test_data1=pd.read_csv('\/content\/test.csv')\nres=pd.DataFrame({\"PassengerId\":test_data1['PassengerId'],\"Survived\":pred_rf})\nres.to_csv(\"submission_ary_rf\",index=False)","01080e9b":"import lightgbm as lgb","7f3b696e":"def objective_lgbm(trial):\n    y_train=train_data['Survived']\n    x_train=train_data.drop(['Survived'],axis=1)\n\n    n_estimators = trial.suggest_int('n_estimators', 2, 300)\n    max_depth = int(trial.suggest_int('max_depth', 2, 50))\n    learning_rate=trial.suggest_loguniform('learning_rate',0.001,1)\n    colsample_bytree=trial.suggest_loguniform(\"colsample_bytree\",0.1, 1)\n    num_leaves=trial.suggest_int('num_leaves',10,300)\n    reg_alpha= trial.suggest_loguniform('reg_alpha',0.1,1)\n    reg_lambda= trial.suggest_loguniform('reg_lambda',0.1,1)\n    min_split_gain=trial.suggest_loguniform('min_split_gain',0.1,1)\n    subsample=trial.suggest_loguniform('subsample',0.1,1)    \n    clf = lgb.LGBMClassifier(n_estimators=n_estimators, max_depth=max_depth,\n                            learning_rate=learning_rate,colsample_bytree=colsample_bytree,\n                            num_leaves=num_leaves,reg_alpha=reg_alpha,reg_lambda=reg_lambda,\n                            min_split_gain=min_split_gain,subsample=subsample)\n    return cross_val_score(clf, x_train, y_train, \n           n_jobs=-1, cv=5,scoring='f1').mean()\n","a4280495":"study_lgbm= optuna.create_study(direction='maximize')\nstudy_lgbm.optimize(objective_lgbm, n_trials=40)\n","539c71d3":"trial_lgbm= study_lgbm.best_trial\nprint(trial_lgbm.value)\nprint(trial_lgbm.params)","c68485f7":"model_lgbm=lgb.LGBMClassifier(n_estimators=244, max_depth=2, learning_rate=0.1811549889997839, \n                              colsample_bytree=0.8014731846804227, num_leaves=195, reg_alpha=0.6526035476086431, \n                              reg_lambda=0.17416065696048297, \n                              min_split_gain=0.437591342130419,subsample= 0.4082158418003157)","48cf4534":"clf_lgbm=model_lgbm.fit(x_train,y_train)\n","299dae56":"pred=clf_lgbm.predict(test_data)","42da30f6":"res1=pd.DataFrame({\"PassengerId\":test_data1['PassengerId'],\"Survived\":pred})\nres1.to_csv(\"submission_ary_LGBM\",index=False)","e35e9c43":"## **FARE**","444f5d5a":"## **Got 78.9% accuracy on making submissions**","57d84ae6":"**Name : This column has 92144 unique values and it doesn't contribute to the data because we can't decide whether the person will survive or not based on his\/her . But yes , I designations were there i.e Mr, Mrs , Captain then we can consider it as a feature**\n\n**Ticket : This column has different values either numeric,alphanumeric and it is not contributing to the results**\n\n**Cabin : This column has more than 65K null values that means we don't know where are most of the people in the ship**\n\n**PassengerId : This column is just a series number from 1 to 100k , it is of no use**","8127d49e":"# **MODEL AND PREDICTION**","f1907c17":"# **TEST DATA**","07b165ec":"**AS we can see as there is not significant +ve or -ve correlation between the any two columns so we are not going to drop any column and will continue with these features**","bc38e247":"# **TPS-APRIL TITANIC DATASET COMPETITION**","bd21a362":"**Can we do something here with familysize column?\nYes We can encode it 0 and 1 values based on survival rate and size of family , but but we can't make our data too simple for the model . So we are leaving it without encoding**","8f9db31c":"# **ANALYSIS OF COLUMNS**","1536426a":"## **AGE**","cf12e1b8":"### **RANDOM FOREST CLASSIFIER**","8cd48271":"### Same working as a train_data , you can skip if you want","45283143":"### **LightGBM Classifier**","0b39bebe":"**Embarked has 250 null values so it's obvious we can fill it with mode value**","c0f0c1c7":"# **OVERVIEW**","61a76ac4":"## **Pclass,Sex and Embarked**","bb0cbda6":"# **MANUAL ENCODING**","9804e8c2":"**Filling the age value with mean value , we can also fill it with median value and with the help of regression method by taking \"Age\" as a target value**"}}