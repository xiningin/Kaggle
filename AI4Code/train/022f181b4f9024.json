{"cell_type":{"e39c74f8":"code","18af7f84":"code","9b4d6257":"code","94c221b0":"code","fe24fe3d":"code","0511b7bd":"code","9270c3d9":"code","f0008e92":"code","172408ed":"code","da272d87":"code","a40ba6fc":"code","1d6f9535":"code","fd15a92a":"code","b4c0194e":"code","b92502d2":"code","34b91de6":"code","e2adfcd3":"code","a07fbdd4":"code","af5c8241":"code","adb49a1b":"code","e79eb086":"code","de522505":"code","c6862382":"code","7180345c":"code","104c2895":"code","0e502802":"code","67ec199b":"markdown","b87a3fea":"markdown","66691aff":"markdown","617deb47":"markdown","ce71060a":"markdown","72da88f0":"markdown","5e3504dc":"markdown","0e26dd73":"markdown","c4ae7193":"markdown","c658e1b5":"markdown","4bf686aa":"markdown","1f815e73":"markdown","af6cda63":"markdown","53b7f84d":"markdown","928b1950":"markdown","4e7f2003":"markdown","b9136ff7":"markdown","2ce98542":"markdown","ae2cd316":"markdown","976a0520":"markdown","f10d0bd7":"markdown","4b5cf2ce":"markdown","329ac0fb":"markdown","19eec6c3":"markdown","5bb7b9a3":"markdown","b1ce773d":"markdown","d32a9229":"markdown","9fae325a":"markdown","d3a4623e":"markdown"},"source":{"e39c74f8":"# Import Packages \nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Read Data \nAuto = pd.read_csv(\"..\/input\/autompg-dataset\/auto-mpg.csv\")","18af7f84":"Auto.head() # by default will print 5 obs. \n# Auto.head(10) # will print first 10 obs. ","9b4d6257":"Auto.tail() # by default will print last 5 obs. \n# Auto.tail(7) # will print last 7 obs.","94c221b0":"Auto.columns","fe24fe3d":"Auto.shape","0511b7bd":"Auto.info()","9270c3d9":"for i in list(Auto['horsepower']):\n    print(i, end=', ')","f0008e92":"median_horsepower = Auto[\"horsepower\"][Auto[\"horsepower\"]!=\"?\"].median()\nAuto[\"horsepower\"] = Auto[\"horsepower\"].replace('?', median_horsepower).astype(int)","172408ed":"Auto[\"cylinders\"] = pd.Series(Auto[\"cylinders\"], dtype = \"category\")","da272d87":"Auto.loc[Auto['origin'] == 1, 'origin'] = \"American\"\nAuto.loc[Auto['origin'] == 2, 'origin'] = \"European\"\nAuto.loc[Auto['origin'] == 3, 'origin'] = \"Japanese\"\n\nAuto[\"origin\"] = pd.Series(Auto[\"origin\"], dtype = \"category\")","a40ba6fc":"Auto = Auto.drop(columns=[\"model year\", \"car name\"])","1d6f9535":"Auto.head()","fd15a92a":"Auto.describe()","b4c0194e":"Auto.corr()","b92502d2":"Auto_European = Auto[Auto[\"origin\"] == \"European\"]\nAuto_European.head()","34b91de6":"Auto_Power = Auto[Auto[\"horsepower\"] > 110]\nAuto_Power.head()","e2adfcd3":"Auto_Power_Mpg = Auto[(Auto[\"horsepower\"] > 110) & (Auto[\"mpg\"] > 20)]\nAuto_Power_Mpg.head()","a07fbdd4":"new_subset = Auto[{\"mpg\",\"cylinders\",\"horsepower\"}]\nnew_subset.head()","af5c8241":"plt.figure(figsize=(12,10))\ncor = Auto.corr()\nsns.heatmap(cor, annot=True)\nplt.show()","adb49a1b":"Auto.plot(kind = \"scatter\", x = \"weight\", y = \"mpg\", color = \"Red\")\nplt.show()","e79eb086":"colors = {'American':'Red', 'European':'Green', 'Japanese':'Blue'}\nAuto.plot(kind = \"scatter\", x = \"weight\", y = \"mpg\", \n          color = Auto['origin'].map(colors))\nplt.show()","de522505":"Auto.plot(kind = \"hist\", y = \"mpg\", color = \"Gold\")\nplt.show()","c6862382":"Auto.plot(kind = \"hist\", y = \"mpg\",bins = 30, color = \"Gold\")\nplt.show()","7180345c":"Auto.boxplot(column = \"horsepower\",showfliers=False)\nplt.show()","104c2895":"Auto.boxplot(column = \"mpg\", by = \"origin\")\nplt.show()","0e502802":"plt.bar(pd.unique(Auto[\"origin\"]),\n        Auto[\"origin\"].value_counts(),\n        color = [\"Red\",\"Blue\",\"Green\"])\nplt.xlabel(\"Origin\")\nplt.ylabel(\"Counts\")\nplt.title(\"Number of cars from different origins\")\nplt.show()","67ec199b":"After seeing summary statistics for each variables seperately, the correlations of the variables is what we may wish to see before going into detail. To achieve a correlation matrix, all you need to use _corr()_ function. This function will return a matrix where you can see correlation values between 2 variables. ","b87a3fea":"# Explanatory Data Analysis for Absolute Beginners\n\nThis kaggle kernel covers Explanatory Data Analysis (EDA) for one of the most famous data set, Auto-MPG.\n\nFor a newbie data scientist, I believe this kernel will be illuminative and again for those who starts writing in Python can make use of this kernel. \n\nLet's start with importing some packages and the data set;","66691aff":"## Data Manipulation\n\nSometimes the data that we have is not the data we need or can use directly. For example, we may have some missing values, or different type of alphabets, unmatching date types, etc. Those can be considered minor problems but solutions may be difficult. ","617deb47":"Now, store only mpg, cylinders, horsepower variables in a new subset.","ce71060a":"### Box Plot\n\nBoxplots provide information about the concentration, shape, distribution, range of a continuous variable. Let's obtain a boxplot for Horsepower in Auto data set.","72da88f0":"## Creating Visuals\n\nWe have seen that numbers can be very informative however, having 'a lot' of numbers may be confusing or even boring for most of the people. Rather than 'playing' with numbers too much, we can get some help from cool visuals that gives strong information of the whole data set or just of a single variable. ","5e3504dc":"## More on Impressions\n\nWe have seen what we firstly had to see, now it is time to have some numerical impressions. \n\nPersonally, I prefer to see the summary statistics of the data set. \n\nQuick question: What does summary statistics mean ??? \n\nSummary statistics provide statistical information about your data set. Mean, standard deviation, range, minimum-maximum points, etc. are summarize your data, give statistical insight of your data. \n\nIn python, to see summary statistics easily for each one of the variables you have, all you need to use _describe_ function. This function can provide; count, mean, standard deviation, minimum value, maximum value, and quantiles of each _numeric_ variable.","0e26dd73":"We have 'cylinders' variable which represents the number of cylinders of those cars'. Althought it looks like 'cylinders' variable is a numeric variable, in fact it has to be treated like a __'categorical'__ variable. \n\nLet's convert it to a __'categorical'__ variable.","c4ae7193":"## Sub-sampling & Filtering\n\nSometimes data sets can be too big to handle, and sometimes not all the information in the data is required for a specific task. Instead of digging the whole data set for a specific task you can creates sub-samples from that 'big' data with some basic queries. \n\nNow, first create a sub-sample from Auto data set, consisting only European cars. ","c658e1b5":"One of the most important thing to have a look at is the dimension of the data frame. You can use _shape_ function to see the number of rows (observations) and columns (variables, features) you have in your data frame. The function will return to a tuple where you will see first the number of rows and second the number of columns you have in the data frame.","4bf686aa":"Let's see the final version of the data frame. ","1f815e73":"### Correlation Plot (Heat Map)\n\nLet's recall that we created a correlation matrix earlier to see the correalation values between numeric variables. Now, we can create a 'plot' that show again correalation values between numeric variables in our data set.","af6cda63":"### Histogram\n\nHistograms are used to see the distribution numerical data. Here let's create a primitive example for mpg variable. Default version divides the data to 10 bins. ","53b7f84d":"### Scatter Plot\n\nFrom the Correlation Plot above, we are able to see that there is a strong negative relationship between weight and mpg. That means, the more the car weighs, the more gas it consumes. \n\nLet's obtain a scatter plot to see the relationship between weight and mpg.","928b1950":"Moreover, let's assume we are not going to use 'model year' and car name variables and we want to remove them from the data frame. ","4e7f2003":"However, sometimes increasing or decreasing the number of bins in a histogram may provide valuable information. There is a 'bins' option inside the function. Now let's increase the number of bins to 25.","b9136ff7":"Like _head()_ function we have also _tail()_ function which returns the last 5 observations in the data frame by default. Again, you can specify the number of observations you would like to see.","2ce98542":"This scatter plot confirms that there is a strong negative relationship between weight and mpg.","ae2cd316":"Now, add another condition, \n\nCreate another sub-sample of cars satisfying following conditions HP > 100 and mpg > 20","976a0520":"Sometimes you may forget or misspell the names of variables you have in your data frame. For those times, using _head()_ command to see those variable names may not be a good idea. Instead you can use _columns_ functions to see the variable names in your data frame.","f10d0bd7":"Also, there is another function that provides strong information about the types of the variables (or features). The _info()_ function provides some sort of a table including the name of the variables, how many nonmissing values in each variables and data types of those variable. Also, it provides the dimentions of tha data frame.  ","4b5cf2ce":"## First Impressions are Important !! \n\nTo understand the characteristics of the data set or to get a first 'impression', printing a small part of the data is always suggested. Here we can use _head()_ function to print the first 5 observations of the data set by default. However, if you would like to see more or less than 5 observations, you can specify the number of observations you want to see.","329ac0fb":"Now, we are able to see that 'horsepower' variable is stored as an object, now we have to be a little bit suspicious about something. The variable is most likely to have some non-numeric items.\n\nLet's have a look at all the values stored in 'horsepower' variable.\n","19eec6c3":"Also, assume that we know the fact that 'origin' represents where those cars from, and it has to be considered as a __'categorical'__ variable with 3 levels, \n\n1 = American,\n\n2 = European,\n\n3 = Japanese.\n\nSo, let's convert 1's with 'American', 2's with 'European' and 3's with 'Japanese'. Then save it as a __'categorical'__ variable.","5bb7b9a3":"You can add another layer, or 3rd dimension by coloring the points in the scatter plot. Let's now assume that you want to add origin factor to the previous scatter plot. ","b1ce773d":"There are some question marks 'horsepower' variable. This could be considered some sort of a missing value issue. \n\nTo convert 'horsepower' variable to numeric, we have to get rid of question marks, '?', in the variable. We can delete those rows or we can impute values where '?' are located. \n\nLet's make a median imputation for those '?', then convert 'horsepower' to integers.","d32a9229":"## Bar Plot\n\nBar plots are used to visualize the count or the percentage of certain variable. \n\nLet's now obtain a basic bar plot for origin variable.  ","9fae325a":"Now, lets filter down by horsepower. Assume that you are only interested in cars more than 110 HP. ","d3a4623e":"You can also create boxplots for grouped data. Here in the next plot you will see there is 3 boxplots for mpg variable for different origins. In other words, it illustrates the distributions of mpg variable by origin."}}