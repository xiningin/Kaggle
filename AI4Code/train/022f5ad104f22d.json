{"cell_type":{"62fd3acb":"code","2f75c67f":"code","3fd3e93a":"code","bc620260":"code","05d931aa":"code","9c315d86":"code","490bd026":"code","3814c8fa":"code","b0254762":"code","252432a2":"code","25687e2b":"code","0ae9a1d4":"code","df335632":"code","2003ee62":"code","5749b210":"code","5bb84008":"code","73cc0a89":"code","4b00b2be":"code","3d795a06":"code","586079c5":"code","ca546e5c":"code","836be591":"code","a37e0b2a":"markdown","b3ec0eab":"markdown","ae0af88a":"markdown","c73ecc52":"markdown","89bc3370":"markdown","2ec73cdf":"markdown","17fa8dcb":"markdown","af9ac0fe":"markdown","bb54300c":"markdown","a9a12988":"markdown","d286fd23":"markdown","97df6ac9":"markdown","9c7217d1":"markdown","21a33e1d":"markdown","d2282496":"markdown","c75c281a":"markdown","4906544c":"markdown"},"source":{"62fd3acb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f75c67f":"df = pd.read_csv(\"\/kaggle\/input\/fake-news\/train.csv\")\ndf.head()","3fd3e93a":"df.isnull().sum()","bc620260":"df = df.dropna()","05d931aa":"x = df.drop('label',axis = 1)\ny = df['label']","9c315d86":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Flatten,Dense,Embedding,LSTM,Dropout\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences","490bd026":"messages = x.copy()\n##Since we drop Null values from our Dataset ,so we need to Reset Index of our Dataset\nmessages.reset_index(inplace=True)","3814c8fa":"import nltk\nimport re\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer","b0254762":"nltk.download(\"stopwords\")","252432a2":"ps = PorterStemmer()\ncorpus = []\nfor i in range(0,len(messages)):\n    result = re.sub('[^a-zA-Z]',' ',messages['title'][i])  \n    result = result.lower()\n    result = result.split()\n    \n    result = [ps.stem(word) for word in result if not word in stopwords.words(\"english\")]\n    result = \" \".join(result)\n    corpus.append(result)\n","25687e2b":"corpus","0ae9a1d4":"#Vocabulary Size\nvoc_size = 5000\nonehot_repr = [one_hot(words,voc_size) for words in corpus]\nonehot_repr","df335632":"sent_length = 20\nembeded_docs = pad_sequences(onehot_repr,padding= 'pre',maxlen = sent_length)\nembeded_docs","2003ee62":"embeded_docs[0]","5749b210":"embedding_vector_features = 40\nmodel = Sequential()\nmodel.add(Embedding(voc_size,embedding_vector_features,input_length = sent_length))\nmodel.add(Dropout(0.3))\nmodel.add(LSTM(100))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(optimizer = 'adam',loss ='binary_crossentropy',metrics=['accuracy'])","5bb84008":"x_final = np.array(embeded_docs)\ny_final = np.array(y)\nx_train,x_test,y_train,y_test = train_test_split(x_final,y_final,test_size=0.33,random_state=42)","73cc0a89":"model.summary()","4b00b2be":"history = model.fit(x_train,y_train,validation_data =(x_test,y_test),batch_size=64,epochs=10)","3d795a06":"import matplotlib.pyplot as plt\ndef plot_learning_curve(history,epochs):\n    #Accuracy\n    epoch_range = range(1,epochs+1)\n    plt.plot(epoch_range,history.history['accuracy'])\n    plt.plot(epoch_range,history.history[\"val_accuracy\"])\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Accuracy\")\n    plt.legend([\"Train\",\"Val\"],loc =\"upper left\")\n    plt.show()\n    \n    \n    ","586079c5":"plot_learning_curve(history,10)","ca546e5c":"y_pred = model.predict_classes(x_test)\naccuracy_score(y_test,y_pred)","836be591":"from mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import confusion_matrix\nmat = confusion_matrix(y_test,y_pred)\nplot_confusion_matrix(mat,figsize=(6,6),show_normed=True)","a37e0b2a":"> <h4>We are going to use \"Title\" to classify our News is Fake or Real,So \"title\" is our Independent variable,whereas our target is to detect our News is Fake or Not,So here our dependent\/target variable is label,So Let's get the Independent & Dependent variable<\/h4>","b3ec0eab":">Performance Matrics & Accuracy","ae0af88a":"- result.lower:\n - By this we are going to replace all the words in Lower case,So that all are treated as equally","c73ecc52":"- So We should train our model by 2 epochs,Because at 2 epochs we are getting a Perfect model with perfect accuracy for both train & validation","89bc3370":"- Pad_Sequences:\n - The pad_sequences() function in the Keras deep learning library can be used to pad variable length sequences.\n   The default padding value is 0.0, which is suitable for most applications, although this can be changed by      specifying the preferred value via the \u201cvalue\u201d argument.\n  - By this we are going to make all the sentances in same length.There are 2 types of Padding \"Pre\" and \n   \"Post\",pre means it's going to add 0 in front and post means it's goint add 0 in back","2ec73cdf":">Import necessary libraries for data preprocessing","17fa8dcb":">We have so many Null values ,so let's drop these Null Values","af9ac0fe":"---\n\n<h1 style=\"text-align: center;font-size: 20px;color: magenta\">Thanks for reading the Notebook<\/h1>\n\n---","bb54300c":"> <h3> Some important information: <\/h3>","a9a12988":"- ps.stem()\n -  Stemming is the process of producing morphological variants of a root\/base word. Stemming programs are    \n    commonly referred to as stemming algorithms or stemmers. A stemming algorithm reduces the words \n    \u201cchocolates\u201d, \u201cchocolatey\u201d, \u201cchoco\u201d to the root word, \u201cchocolate\u201d and \u201cretrieval\u201d, \u201cretrieved\u201d, \u201cretrieves\u201d \n    reduce to the stem \u201cretrieve\u201d","d286fd23":">Data Preprocessing","97df6ac9":"---\n\n<h1 style=\"text-align: center;font-size: 40px;color: magenta\">Fake News Classifier using LSTM<\/h1>\n\n---","9c7217d1":"> <h3> One Hot representation<\/h3>","21a33e1d":"> <h3>Creating Model<\/h3>","d2282496":"> <h3>Now  let's import Necessary libraries for LSTM<\/h3>","c75c281a":">Embedding Representation","4906544c":"- re.sub()\n  -  Replace with regular expression\n  -  Replace multiple substrings with the same string\n  -  Replace using the matched part\n  -  Get the count of replaced parts\n  - Here we are going to replace all regural expression which are not between a to z or A to Z with whitespace."}}