{"cell_type":{"a607097b":"code","db12abda":"code","3a05bf02":"code","2d811ee7":"code","48f7bdff":"code","a7c878c5":"code","eb6f44a5":"code","fd64bc8d":"code","08db956b":"code","337a73c9":"code","a8c597c3":"code","cf94e70f":"code","cacf7a30":"code","05c98b99":"code","95ae434b":"code","e2d00e25":"code","2e655221":"code","b5668284":"code","24bfd33e":"code","c1c79a22":"code","0d7129b3":"code","b521c5c7":"code","697ef27c":"code","c355c133":"code","0920d96a":"code","b5bc82cc":"markdown","90b13f89":"markdown","bf31922f":"markdown","7d69d6fb":"markdown","f24c6bdd":"markdown","c59425ba":"markdown","dc91f7d1":"markdown","69611a22":"markdown","439c7942":"markdown"},"source":{"a607097b":"import pandas as pd\nfrom sklearn import preprocessing  \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error ","db12abda":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","3a05bf02":"df","2d811ee7":"label_encoder = preprocessing.LabelEncoder()  # label encoding for columns not with int\/float type values","48f7bdff":"df['MSZoning'] = label_encoder.fit_transform(df['MSZoning'])   # label encoding column - MSZoning for an example \ndf","a7c878c5":"l = list(zip(df.dtypes, df.columns))  # listing all columns with their datatypes\nl","eb6f44a5":"# converting all object type data into string for label encoding\na = ['Street','Alley','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC','CentralAir','Electrical','KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive','PoolQC','Fence','MiscFeature','SaleType','SaleCondition']\nfor i in a:\n  df[i] = df[i].astype('|S')\ndf  ","fd64bc8d":"# checking from above and label encoding columns that are required to be encoded\nlabel_object = {}\na = ['Street','Alley','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC','CentralAir','Electrical','KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive','PoolQC','Fence','MiscFeature','SaleType','SaleCondition']\nfor i in a:\n  labelencoder = label_encoder\n  labelencoder.fit(df[i])\n  df[i] = labelencoder.fit_transform(df[i])\n  label_object[i] = labelencoder\ndf # getting final encoded dataframe","08db956b":"# checking for columns that may contain NULL values\nb = list(zip(df.isnull().any(), df.columns))\nb","337a73c9":"# replacing all null values with 0\ndf = df.fillna(0)\ndf","a8c597c3":"# verifying that no null value is present now\ndf.isnull().any()","cf94e70f":"# splitting data into 70:30 ratio for training and testing\ndata = df.values\nX, y = data[:,:-1], data[:,-1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=10)","cacf7a30":"# initialising the model\nmodel = LinearRegression()","05c98b99":"# training the model with train data\nmodel.fit(X_train, y_train)","95ae434b":"# making predictions\ny_pred = model.predict(X_test)","e2d00e25":"# checking accuracy using Mean Squared Error\nmean_squared_error(y_test,y_pred) ","2e655221":"test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","b5668284":"test","24bfd33e":"c = ['MSZoning','Street','Alley','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC','CentralAir','Electrical','KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive','PoolQC','Fence','MiscFeature','SaleType','SaleCondition']\nfor i in c:\n  test[i] = test[i].astype('|S')\ntest","c1c79a22":"# label encoding\nlabel_objectTest = {}\nfor i in c:\n  labelencoder = label_encoder\n  labelencoder.fit(test[i])\n  test[i] = labelencoder.fit_transform(test[i])\n  label_objectTest[i] = labelencoder\ntest","0d7129b3":"# replacing all NULL values with 0\ntest = test.fillna(0)\ntest  # our testing dataset is ready to be used for making predictions ","b521c5c7":"# getting Ids of all houses whose sale prices are to be predicted \nd = pd.DataFrame(test['Id'])","697ef27c":"final_pred = model.predict(test)","c355c133":"# getting our final predictions dataframe ready\nPredictions = pd.DataFrame(final_pred)\nPredictions = Predictions.rename(columns={0:'SalePrice'})\nPredictions = d.join(Predictions)\nPredictions","0920d96a":"# saving predictions to csv file\nPredictions.to_csv('Predictions.csv',index=False)","b5bc82cc":"### Dataset Cleaning","90b13f89":"### Linear Regression Model ","bf31922f":"### Getting our Training Data","7d69d6fb":"### Data Preprocessing","f24c6bdd":"### Getting our Testing Data for making Predictions","c59425ba":"# House Prices Prediction Using Linear Regression","dc91f7d1":"### Making Final Predictions ","69611a22":"### Splitting Data for Training and Testing","439c7942":"### Importing Libraries"}}