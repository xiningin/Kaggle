{"cell_type":{"7e171cab":"code","33e2fce1":"code","805c6811":"code","6ab433d7":"code","25e6d53e":"code","72be7453":"code","c4444724":"code","fb5b4799":"code","35f518a7":"code","9f9f32bb":"code","f79f8645":"code","174ae945":"code","b2f14bc8":"code","e937e725":"code","a6ed91ef":"code","0cb9c8e3":"code","3981ac0e":"code","49377223":"code","124a6e6e":"code","3003b6f4":"code","239379c0":"code","070a2d6a":"code","46844301":"code","1c3f84ce":"code","bdfc89b4":"code","5350e414":"code","d9ef9867":"code","19b4f6ae":"code","d0cbfb2d":"code","8b2d2b60":"markdown","d06fe1d4":"markdown","bbb3e7a1":"markdown","a6ae8100":"markdown","91e00196":"markdown","fea971eb":"markdown","f19803d7":"markdown","e1448e9f":"markdown","d059973c":"markdown","aeae5c67":"markdown","8456dd16":"markdown","b12da8a1":"markdown","eacc0f96":"markdown"},"source":{"7e171cab":"# necessary imports\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport tensorflow as tf\nfrom tensorflow import keras\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","33e2fce1":"# loading data\n\nfashion_mnist = tf.keras.datasets.fashion_mnist\n(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()","805c6811":"# shape of data\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","6ab433d7":"# data type of dataset\nX_train.dtype, X_test.dtype, y_train.dtype, y_test.dtype","25e6d53e":"# creating validation data snd scaling data to range (0-1)\n\nX_valid, X_train = X_train[:4000], X_train[4000:] \/ 255\ny_valid, y_train = y_train[:4000], y_train[4000:]\nX_test = X_test \/ 255","72be7453":"# looking at first two images\n\nplt.figure(figsize = (15, 4))\nplotnumber = 1\n\nfor i in range(2):\n    if plotnumber <= 2:\n        ax = plt.subplot(1, 2, plotnumber)\n        plt.imshow(X_train[i], cmap = 'binary')\n        plt.axis('off')\n        \n    plotnumber += 1\n  \nplt.tight_layout()\nplt.show()","c4444724":"y_train","fb5b4799":"class_names = [\"T-shirt\/top\", \"Trouser\", \"Pullover\", \"Dress\", \"Coat\",\n               \"Sandal\", \"Shirt\", \"Sneaker\", \"Bag\", \"Ankle boot\"]","35f518a7":"class_names[y_train[0]], class_names[y_train[1]] ","9f9f32bb":"X_valid.shape","f79f8645":"X_test.shape","174ae945":"plt.figure(figsize = (15, 6))\nplotnumber = 1\n\nfor i in range(51):\n    if plotnumber <= 50:\n        ax = plt.subplot(5, 10, plotnumber)\n        plt.imshow(X_train[i], cmap = 'binary')\n        plt.axis('off')\n        plt.title(class_names[y_train[i]], fontdict = {'fontsize'  : 12, 'color' : 'black'})\n        \n    plotnumber += 1\n  \nplt.tight_layout()\nplt.show()","b2f14bc8":"# building sequential model\n\nmodel = keras.models.Sequential([\n    keras.layers.Flatten(input_shape = [28, 28]),\n    keras.layers.Dense(100, activation = 'relu'),\n    keras.layers.Dense(70, activation = 'relu'),\n    keras.layers.Dense(50, activation = 'relu'),\n    keras.layers.Dense(20, activation = 'relu'),\n    keras.layers.Dense(10, activation = 'softmax')\n])","e937e725":"# summary of model\nmodel.summary()","a6ed91ef":"# compiling model\n\nmodel.compile(loss = tf.keras.losses.SparseCategoricalCrossentropy(),\n              optimizer = tf.keras.optimizers.Adam(), metrics = ['accuracy'])","0cb9c8e3":"# fitting model\n\nmodel_history = model.fit(X_train, y_train, validation_data = (X_valid, y_valid), epochs = 50)","3981ac0e":"# evaluating model\n\nmodel.evaluate(X_test, y_test)","49377223":"from tensorflow.keras.utils import plot_model\n\nplot_model(model, show_shapes = True)","124a6e6e":"plt.figure(figsize = (12, 6))\nplt.style.use('fivethirtyeight')\n\ntrain_loss = model_history.history['loss']\nval_loss = model_history.history['val_loss'] \nepoch = range(1, 51)\nsns.lineplot(epoch, train_loss, label = 'Training Loss')\nsns.lineplot(epoch, val_loss, label = 'Validation Loss')\nplt.title('Training and Validation Loss\\n')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(loc = 'best')\nplt.show()","3003b6f4":"plt.figure(figsize = (12, 6))\n\ntrain_loss = model_history.history['accuracy']\nval_loss = model_history.history['val_accuracy'] \nepoch = range(1, 51)\nsns.lineplot(epoch, train_loss, label = 'Training accuracy')\nsns.lineplot(epoch, val_loss, label = 'Validation accuracy')\nplt.title('Training and Validation Accuracy\\n')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(loc = 'best')\nplt.show()","239379c0":"# making predictions\n\ny_probs = model.predict(X_test)\ny_preds = y_probs.argmax(axis = 1)\n\ny_preds[:100]","070a2d6a":"# function for confusion matrix\n\nimport itertools\nfrom sklearn.metrics import confusion_matrix\n\n# Our function needs a different name to sklearn's plot_confusion_matrix\ndef make_confusion_matrix(y_true, y_pred, classes=None, figsize=(10, 10), text_size=15): \n  \"\"\"Makes a labelled confusion matrix comparing predictions and ground truth labels.\n\n  If classes is passed, confusion matrix will be labelled, if not, integer class values\n  will be used.\n\n  Args:\n    y_true: Array of truth labels (must be same shape as y_pred).\n    y_pred: Array of predicted labels (must be same shape as y_true).\n    classes: Array of class labels (e.g. string form). If `None`, integer labels are used.\n    figsize: Size of output figure (default=(10, 10)).\n    text_size: Size of output figure text (default=15).\n  \n  Returns:\n    A labelled confusion matrix plot comparing y_true and y_pred.\n\n  Example usage:\n    make_confusion_matrix(y_true=test_labels, # ground truth test labels\n                          y_pred=y_preds, # predicted labels\n                          classes=class_names, # array of class label names\n                          figsize=(15, 15),\n                          text_size=10)\n  \"\"\"  \n  # Create the confustion matrix\n  cm = confusion_matrix(y_true, y_pred)\n  cm_norm = cm.astype(\"float\") \/ cm.sum(axis=1)[:, np.newaxis] # normalize it\n  n_classes = cm.shape[0] # find the number of classes we're dealing with\n\n  # Plot the figure and make it pretty\n  fig, ax = plt.subplots(figsize=figsize)\n  cax = ax.matshow(cm, cmap=plt.cm.Blues) # colors will represent how 'correct' a class is, darker == better\n  fig.colorbar(cax)\n\n  # Are there a list of classes?\n  if classes:\n    labels = classes\n  else:\n    labels = np.arange(cm.shape[0])\n  \n  # Label the axes\n  ax.set(title=\"Confusion Matrix\",\n         xlabel=\"Predicted label\",\n         ylabel=\"True label\",\n         xticks=np.arange(n_classes), # create enough axis slots for each class\n         yticks=np.arange(n_classes), \n         xticklabels=labels, # axes will labeled with class names (if they exist) or ints\n         yticklabels=labels)\n  \n  # Make x-axis labels appear on bottom\n  ax.xaxis.set_label_position(\"bottom\")\n  ax.xaxis.tick_bottom()\n\n  # Set the threshold for different colors\n  threshold = (cm.max() + cm.min()) \/ 2.\n\n  # Plot the text on each cell\n  for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n    plt.text(j, i, f\"{cm[i, j]} ({cm_norm[i, j]*100:.1f}%)\",\n             horizontalalignment=\"center\",\n             color=\"white\" if cm[i, j] > threshold else \"black\",\n             size=text_size)","46844301":"plt.style.use('seaborn-dark')\nmake_confusion_matrix(y_true=y_test, \n                      y_pred=y_preds,\n                      classes=class_names,\n                      figsize=(15, 15),\n                      text_size=10)","1c3f84ce":"import random\n\n# Create a function for plotting a random image along with its prediction\ndef plot_random_image(model, images, true_labels, classes):\n  \"\"\"Picks a random image, plots it and labels it with a predicted and truth label.\n\n  Args:\n    model: a trained model (trained on data similar to what's in images).\n    images: a set of random images (in tensor form).\n    true_labels: array of ground truth labels for images.\n    classes: array of class names for images.\n  \n  Returns:\n    A plot of a random image from `images` with a predicted class label from `model`\n    as well as the truth class label from `true_labels`.\n  \"\"\" \n  # Setup random integer\n  i = random.randint(0, len(images))\n  \n  # Create predictions and targets\n  target_image = images[i]\n  pred_probs = model.predict(target_image.reshape(1, 28, 28)) # have to reshape to get into right size for model\n  pred_label = classes[pred_probs.argmax()]\n  true_label = classes[true_labels[i]]\n\n  # Plot the target image\n  plt.imshow(target_image, cmap=plt.cm.binary)\n\n  # Change the color of the titles depending on if the prediction is right or wrong\n  if pred_label == true_label:\n    color = \"green\"\n  else:\n    color = \"red\"\n\n  # Add xlabel information (prediction\/true label)\n  plt.xlabel(\"Pred: {} {:2.0f}% (True: {})\".format(pred_label,\n                                                   100*tf.reduce_max(pred_probs),\n                                                   true_label),\n             color=color) # set the color to green or red","bdfc89b4":"plt.figure(figsize = (15, 12))\nplotnumber = 1\n\nfor i in range(15):\n    if plotnumber <= 15:\n        ax = plt.subplot(5, 3, plotnumber)\n        plot_random_image(model=model, \n                  images=X_test, \n                  true_labels=y_test, \n                  classes=class_names)\n        \n    plotnumber += 1\n  \nplt.tight_layout()\nplt.show()","5350e414":"X_new = X_test[:5]\ny_proba = model.predict(X_new)\ny_proba.round(2)","d9ef9867":"y_pred = model.predict_classes(X_new)\ny_pred","19b4f6ae":"np.array(class_names)[y_pred]","d0cbfb2d":"y_new = y_test[:5]\nplt.figure(figsize=(9.2, 4.4))\nfor index, image in enumerate(X_new):\n    plt.subplot(1, 5, index + 1)\n    plt.imshow(image, cmap=\"binary\", interpolation=\"nearest\")\n    plt.axis('off')\n    plt.title(class_names[y_test[index]], fontsize=12)\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","8b2d2b60":"<p style = \"font-size : 25px; color : #34656d ; font-family : 'Comic Sans MS'; \"><strong>Here, the classification model actually classified all five images correctly<\/strong><\/p> ","d06fe1d4":"<p style = \"font-size : 34px; color : #fed049 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #007580; border-radius: 5px 5px;\"><strong>Training and Evaluating the Image Classification Model<\/strong><\/p> ","bbb3e7a1":"<p style = \"font-size : 34px; color : #fed049 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #007580; border-radius: 5px 5px;\"><strong>Use the Model to Make Predictions<\/strong><\/p> ","a6ae8100":"<p style = \"font-size : 40px; color : #34656d ; font-family : 'Comic Sans MS'; \"><strong>Let\u2019s take a look at a sample of the images in the dataset:<\/strong><\/p> ","91e00196":"<p style = \"font-size : 34px; color : #fed049 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #007580; border-radius: 5px 5px;\"><strong>Visualizing Training and Validation Loss<\/strong><\/p> ","fea971eb":"<p style = \"font-size : 34px; color : #fed049 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #007580; border-radius: 5px 5px;\"><strong>Looking at some Random Predictions<\/strong><\/p> ","f19803d7":"<p style = \"font-size : 49px; color : #393e46 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #00adb5; border-radius: 5px 5px;\"><strong>Image Classification with ANN<\/strong><\/p>","e1448e9f":"<p style = \"font-size : 25px; color : #34656d ; font-family : 'Comic Sans MS'; \"><strong>The validation set contains 4,000 images, and the test set contains 10,000 images:<\/strong><\/p> ","d059973c":"<p style = \"font-size : 45px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #f9b208; border-radius: 5px 5px;\"><strong>Model Building<\/strong><\/p> ","aeae5c67":"<p style = \"font-size : 34px; color : #fed049 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #007580; border-radius: 5px 5px;\"><strong>Visualizing Training and Validation accuracy<\/strong><\/p> ","8456dd16":"<p style = \"font-size : 34px; color : #fed049 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #007580; border-radius: 5px 5px;\"><strong>Compiling the Image Classification Model<\/strong><\/p> ","b12da8a1":"<p style = \"font-size : 35px; color : #f55c47 ; font-family : 'Comic Sans MS'; \"><strong>If you like my work, please do Upvote.<\/strong><\/p> ","eacc0f96":"<p style = \"font-size : 34px; color : #fed049 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #007580; border-radius: 5px 5px;\"><strong>Visualizing model<\/strong><\/p> "}}