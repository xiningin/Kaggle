{"cell_type":{"0b843217":"code","5336713c":"code","439fdada":"code","d1066bc2":"code","f4fcb31c":"code","2fe75d11":"code","202da38c":"code","94b726d5":"code","10cd89b3":"code","e912a0c8":"code","cef9758a":"code","f2b58b42":"code","90473b3e":"code","2556374b":"code","0872fca7":"code","52d65797":"code","b0c51781":"code","7f442b11":"code","272d477f":"code","a8ade7da":"markdown","41bbdbc0":"markdown","0b93af8f":"markdown","82d84fae":"markdown"},"source":{"0b843217":"import numpy as np\nimport pandas as pd\n\n\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\n\ndata = pd.concat([train, test], sort=False)\n\ndata['Sex'].replace(['male', 'female'], [0, 1], inplace=True)\ndata['Embarked'].fillna(('S'), inplace=True)\ndata['Embarked'] = data['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)\ndata['Fare'].fillna(np.mean(data['Fare']), inplace=True)\ndata['Age'].fillna(data['Age'].median(), inplace=True)\ndata['FamilySize'] = data['Parch'] + data['SibSp'] + 1\ndata['IsAlone'] = 0\ndata.loc[data['FamilySize'] == 1, 'IsAlone'] = 1","5336713c":"data.head()","439fdada":"delete_columns = ['Name', 'PassengerId', 'Ticket', 'Cabin']\ndata.drop(delete_columns, axis=1, inplace=True)\n\ntrain = data[:len(train)]\ntest = data[len(train):]\n\ny_train = train['Survived']\nX_train = train.drop('Survived', axis=1)\nX_test = test.drop('Survived', axis=1)","d1066bc2":"X_train.head()","f4fcb31c":"from sklearn.model_selection import train_test_split\n\n\nX_train, X_valid, y_train, y_valid = \\\n    train_test_split(X_train, y_train, test_size=0.3,\n                                 random_state=0, stratify=y_train)","2fe75d11":"categorical_features = ['Embarked', 'Pclass', 'Sex']","202da38c":"params = {\n    'objective': 'binary'\n}","94b726d5":"import lightgbm as lgb\n\n\nlgb_train = lgb.Dataset(X_train, y_train,\n                                         categorical_feature=categorical_features)\nlgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train,\n                                         categorical_feature=categorical_features)\n\nmodel = lgb.train(params, lgb_train,\n                               valid_sets=[lgb_train, lgb_eval],\n                               verbose_eval=10,\n                               num_boost_round=1000,\n                               early_stopping_rounds=10)\n\ny_pred = model.predict(X_test, num_iteration=model.best_iteration)","10cd89b3":"y_pred[:10]","e912a0c8":"params = {\n    'objective': 'binary',\n    'max_bin': 300,\n    'learning_rate': 0.05,\n    'num_leaves': 40\n}","cef9758a":"lgb_train = lgb.Dataset(X_train, y_train,\n                                         categorical_feature=categorical_features)\nlgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train,\n                                         categorical_feature=categorical_features)\n\nmodel = lgb.train(params, lgb_train,\n                               valid_sets=[lgb_train, lgb_eval],\n                               verbose_eval=10,\n                               num_boost_round=1000,\n                               early_stopping_rounds=10)\n\ny_pred = model.predict(X_test, num_iteration=model.best_iteration)","f2b58b42":"y_pred[:10]","90473b3e":"y_pred = (y_pred > 0.5).astype(int)\ny_pred[:10]","2556374b":"sub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\n\nsub['Survived'] = y_pred\nsub.to_csv('submission_lightgbm_handtuning.csv', index=False)\n\nsub.head()","0872fca7":"import optuna\nfrom sklearn.metrics import log_loss\n\n\ndef objective(trial):\n    params = {\n        'objective': 'binary',\n        'max_bin': trial.suggest_int('max_bin', 1, 500),\n        'learning_rate': 0.05,\n        'num_leaves': trial.suggest_int('num_leaves', 1, 512),\n    }\n\n    lgb_train = lgb.Dataset(X_train, y_train,\n                                             categorical_feature=categorical_features)\n    lgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train,\n                                            categorical_feature=categorical_features)\n\n    model = lgb.train(params, lgb_train,\n                                   valid_sets=[lgb_train, lgb_eval],\n                                   verbose_eval=10,\n                                   num_boost_round=1000,\n                                   early_stopping_rounds=10)\n\n    y_pred_valid = model.predict(X_valid, num_iteration=model.best_iteration)\n    score = log_loss(y_valid, y_pred_valid)\n    return score","52d65797":"study = optuna.create_study(sampler=optuna.samplers.RandomSampler(seed=0))\nstudy.optimize(objective, n_trials=40)","b0c51781":"study.best_params","7f442b11":"params = {\n    'objective': 'binary',\n    'max_bin': study.best_params['max_bin'],\n    'learning_rate': 0.05,\n    'num_leaves': study.best_params['num_leaves']\n}\n\nlgb_train = lgb.Dataset(X_train, y_train,\n                                         categorical_feature=categorical_features)\nlgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train,\n                                         categorical_feature=categorical_features)\n\nmodel = lgb.train(params, lgb_train,\n                               valid_sets=[lgb_train, lgb_eval],\n                               verbose_eval=10,\n                               num_boost_round=1000,\n                               early_stopping_rounds=10)\n\ny_pred = model.predict(X_test, num_iteration=model.best_iteration)","272d477f":"y_pred = (y_pred > 0.5).astype(int)\n\nsub['Survived'] = y_pred\nsub.to_csv('submission_lightgbm_optuna.csv', index=False)\n\nsub.head()","a8ade7da":"# Optuna\u3092\u4f7f\u3046","41bbdbc0":"# \u624b\u52d5\u3067\u8abf\u6574","0b93af8f":"This notebook is a sample code with Japanese comments.\n\n# 2.6 \u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u304a\u6c17\u6301\u3061\uff1f\uff01\u3000\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3057\u3066\u307f\u3088\u3046","82d84fae":"## LightGBM"}}