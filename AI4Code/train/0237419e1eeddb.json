{"cell_type":{"5f16c1ad":"code","dd4f1349":"code","f01277b4":"code","1e54c73e":"code","d3410967":"code","a6084384":"code","dcccac91":"code","622316da":"code","c81c3a0c":"code","d651780c":"code","d42ede7f":"code","744f8ff3":"code","b2044a84":"code","38766a9b":"code","14adc7e8":"code","a05aa2d5":"code","c5b2ab5d":"code","3d425757":"code","5ee3ffce":"code","61ee05fa":"code","41f9ab06":"code","ac830cb2":"code","f798a902":"code","54af175c":"code","d231f2a5":"code","bce448ba":"code","3bc9b649":"code","b02f04ef":"code","80b79f69":"code","6324a7f8":"code","a4bf745e":"markdown","74b68098":"markdown","68e76dce":"markdown","51437bbd":"markdown","91058ac1":"markdown","f6015868":"markdown","c303f65a":"markdown","d3920e76":"markdown","06377517":"markdown","f4b32432":"markdown","034b67e7":"markdown","71b37647":"markdown","2c9e88bf":"markdown","4fb368a1":"markdown","bd5f0273":"markdown"},"source":{"5f16c1ad":"import pandas as pd \nimport numpy as np\n\nfrom sklearn.model_selection import GridSearchCV, train_test_split\n\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nimport warnings","dd4f1349":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")","f01277b4":"df = pd.concat([train_data,test_data],axis = 0, ignore_index=True)","1e54c73e":"df.describe()","d3410967":"df.drop(['PassengerId', 'Ticket', 'Name'],axis = 1 , inplace = True)","a6084384":"df['Survived'].mean()","dcccac91":"train_data.groupby(df['Cabin'].isnull())['Survived'].mean()","622316da":"df['Cabin_indicator'] = np.where(df['Cabin'].isnull(), 0, 1)\ndf.drop('Cabin', axis=1, inplace=True)","c81c3a0c":"df.isnull().sum()","d651780c":"embarked_mode = df.Embarked.mode()\ndf = df.fillna({'Age': df.Age.median(),'Fare': df.Fare.median(),'Embarked': embarked_mode[0]})","d42ede7f":"df.isnull().sum()","744f8ff3":"df[\"Sex\"] = df[\"Sex\"].map({\"male\": 0, \"female\":1})\ndf[\"Embarked\"] = df[\"Embarked\"].map({\"S\": 0, \"C\":1, \"Q\":2})","b2044a84":"df[\"Age_bin\"] = pd.cut(df[\"Age\"], bins = [-1,5,10,15,20,25,40,45,50,55,60,70,80], labels=[0,1,2,3,4,5,6,7,8,9,10,11]).astype(int)\ndf.drop([\"Age\"],axis=1)\n\ndf['Fare_bin'] = pd.cut(df['Fare'].astype(int), 5, labels=[0, 1, 2, 4, 6])\ndf.drop(['Fare'],axis=1)","38766a9b":"df.head()","14adc7e8":"X = df[~df[\"Survived\"].isnull()].drop([\"Survived\"],axis =1)\ny = df[~df[\"Survived\"].isnull()][\"Survived\"]","a05aa2d5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)","c5b2ab5d":"rf = RandomForestClassifier(random_state=0)\nrf_params = {\n    'criterion': ['gini', 'entropy'], \n    'max_depth': range(6, 15),\n    'n_estimators': range(40, 80, 10),\n    'min_samples_split': range(2, 6),\n   'min_samples_leaf': range(1, 4)\n    }\nrf_grid = GridSearchCV(rf, rf_params, n_jobs=-1, cv = 5)\nrf_grid.fit(X_train, y_train)\nrf_best = rf_grid.best_estimator_\nrf_best.get_params()","3d425757":"rf_best.score(X_test, y_test)","5ee3ffce":"warnings.filterwarnings(\"ignore\", message=\"One or more of the test scores are non-finite\") \nwarnings.filterwarnings(\"ignore\", message=\"Estimator fit failed. The score on this train-test partition for these parameters will be set to nan.\") ","61ee05fa":"logr = LogisticRegression()\nlogr_params = {\"solver\":[\"liblinear\",\"saga\", \"lbfgs\", \"newton-cg\"],\n    \"penalty\": [\"l2\",\"l1\", \"elasticnet\", \"none\"],\n    \"C\": [0.01,0.5,1,3,4],\n    \"max_iter\": [4000]\n}\nlogr_grid = GridSearchCV(logr, logr_params, n_jobs=-1, cv = 5)\nlogr_grid.fit(X_train, y_train)\nlogr_best = logr_grid.best_estimator_\nlogr_best.get_params()","41f9ab06":"logr_best.score(X_test, y_test)","ac830cb2":"svc = SVC(probability=True)\nsvc_params = {\"kernel\" : [\"linear\"], \"C\" : [ 0.01, 0.1, 0.5, 1, 2], \"gamma\":[\"scale\", \"auto\"]}\nsvc_grid = GridSearchCV(svc, svc_params, n_jobs=-1, cv = 4)\nsvc_grid.fit(X_train, y_train)\nsvc_best = svc_grid.best_estimator_\nsvc_best.get_params()","f798a902":"svc_best.score(X_test, y_test)","54af175c":"vc = VotingClassifier([(\"svc\",svc_best),\n                       (\"logr\",logr_best),\n                       (\"rf\",rf_best)],\n                      voting = \"soft\")\n\nvc.fit(X_train,y_train)","d231f2a5":"vc.score(X_test, y_test)","bce448ba":"test_data = df[~df[\"Survived\"].notnull()].drop([\"Survived\"],axis =1)","3bc9b649":"test_data.head()","b02f04ef":"vc.fit(X, y)","80b79f69":"prediction = vc.predict(test_data).astype(int)\nprediction","6324a7f8":"pd.DataFrame({\n    \"PassengerId\": range(892,len(prediction)+892),\n    \"Survived\": prediction\n    }).to_csv('submission.csv', index = False, header = True)","a4bf745e":"\u041e\u0431\u0443\u0447\u0438\u043c \u0442\u0440\u0438 \u043c\u043e\u0434\u0435\u043b\u0438: RandomForest, LogisticRegression \u0438 SVC \u2014 \u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0433\u043e\u043b\u043e\u0441\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438.\n\n\u041f\u043e\u0434\u0431\u043e\u0440 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432.\nRandom Forest.","74b68098":"# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","68e76dce":"\u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0451\u043c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442.","51437bbd":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0449\u0435\u0433\u043e \u0433\u043e\u043b\u043e\u0441\u0430 \u0440\u0430\u043d\u0435\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. ","91058ac1":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0414\u043b\u044f \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u0432\u043e\u0437\u044c\u043c\u0451\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, Fare \u2014 \u0442\u0430\u043a\u0436\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0439, Embarked \u2014 \u043c\u043e\u0434\u0443. ","f6015868":"# \u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","c303f65a":"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b.","d3920e76":"\u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435.","06377517":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435","f4b32432":"\u041b\u044e\u0434\u0438, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e Cabin, \u0432\u044b\u0436\u0438\u0432\u0430\u043b\u0438 \u0447\u0443\u0442\u044c \u0440\u0435\u0436\u0435. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0445\u0440\u0430\u043d\u044f\u0449\u0438\u0439, \u0443 \u043a\u043e\u0433\u043e \u0431\u044b\u043b\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u0430\u0431\u0438\u043d\u0435, \u0438 \u0443\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Cabin.","034b67e7":"\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 Age \u0438 Fare \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u043c \u0433\u0440\u0443\u043f\u043f\u0443, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u044c.","71b37647":"SVC","2c9e88bf":"\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f\n\n\u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0435 \u0432\u0441\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 solver \u0438 penalty \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b, \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u0443\u0435\u043c \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f.","4fb368a1":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","bd5f0273":"\u0423\u0434\u0430\u043b\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442."}}