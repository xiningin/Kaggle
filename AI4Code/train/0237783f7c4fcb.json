{"cell_type":{"ed2cc428":"code","4739cb7e":"code","1cd1ca5e":"code","f157c150":"code","69fab370":"code","9cb57d61":"code","4f1c8679":"code","9fa09a8b":"code","97e27690":"code","bae23a98":"code","91c7bd7f":"markdown","dcd6b158":"markdown","fc53682a":"markdown","dc20474c":"markdown","15a68adc":"markdown","2e9a9d7b":"markdown","7c635b59":"markdown","ab850ea4":"markdown","2594b5fe":"markdown","3eccfb5e":"markdown"},"source":{"ed2cc428":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport sklearn\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4739cb7e":"train_data = pd.read_csv(\"\/kaggle\/input\/..\/input\/cap-4611-2021-fall-assignment-1\/train.csv\")\ntrain_data.head()\n\nprint(train_data.info())","1cd1ca5e":"test_data = pd.read_csv(\"\/kaggle\/input\/..\/input\/cap-4611-2021-fall-assignment-1\/test.csv\")\ntest_data.head()","f157c150":"sns.barplot(x=train_data['Age Group'], y=train_data['Total Deaths'])\n","69fab370":"\ntrain_data['Total Deaths'] = train_data['Total Deaths'].fillna(0)","9cb57d61":"size = len(train_data['Total Deaths'])\n\narr = [0] * size;\ni = 0\nj = 0\n\nwhile(j < size) :\n    i = (i + 1) % 10\n    j = j + 1\n    arr[j-1] = i;\n    ","4f1c8679":"\nx = arr\n\ny = train_data['Total Deaths'].tolist()\n\nx = sm.add_constant(x)\n  \nresult = sm.OLS(y, x).fit()\n\n","9fa09a8b":"print(result.summary())","97e27690":"newSize = len(test_data['id'])\nnewArr = [0] * newSize;\ni = 0\nj = 0\nwhile(j < newSize) :\n    i = (i + 1) % 10\n    j = j + 1\n    newArr[j-1] = i;\n    \nnewArr = sm.add_constant(newArr)\npredictions = result.predict(newArr)\n\n","bae23a98":"output = pd.DataFrame({'id': test_data['id'], 'COVID-19 Deaths': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","91c7bd7f":"**FIXING MISSING VALUES**\n\nBecause we have determined that we will be using the age and total deaths features, we must fix any missing values. After examining the data we can see that there are many missing values in: total deaths. We will fill all these empty slots with 0.","dcd6b158":"**Creating Ordinary Least Squares Model**","fc53682a":"**Creating submission**","dc20474c":"**Describing Data**","15a68adc":"**Data Transformation**","2e9a9d7b":"**Loadng Data and Examining its Shape**","7c635b59":"Here it is determined that age group is a major factor on deaths. Deaths increase very quickly as you go up in age group. In the graph we can see that there are no major outliers, just an exponential increase. ","ab850ea4":"After examining the data, we can see that of the featuers we will be using, deaths are numerical fbut age groups are categorical. To use the age group data we must first create numerical data from it. Looking back at the shape of the data we can see that the age groups are always in ascending order, and there are 9 of them. So we will create and array the same size as the data, and fill it with values 0-9 in repeating order. ","2594b5fe":"**Creating predictions**","3eccfb5e":"**Data analysis and checking for outliers**"}}