{"cell_type":{"547f68e3":"code","807edf0e":"code","659b6b7f":"code","5d426c23":"code","83711ba5":"code","e90dd87b":"code","2c971463":"code","d91ef514":"code","700ce0be":"code","d26eda16":"code","c821f355":"code","e8e80cef":"code","af21a4e1":"code","3037f40d":"code","5f41b9d5":"code","6067fc9b":"code","b56c4f17":"code","1ff8d244":"code","9646affe":"code","2e268daf":"code","06d72b96":"code","d7fefb55":"code","c6644f72":"code","0bfd7e03":"code","4f58e354":"code","2d9410f3":"code","c4f0e0a0":"code","e3384673":"code","dff26565":"code","032da8af":"code","1168be0a":"code","1a8bab98":"code","44607529":"code","b6f6cf88":"code","908cef0e":"code","c3c34485":"code","6d140996":"code","2aeb0564":"code","f1ed8b78":"code","e415f2a1":"code","d1b1087f":"code","ab4a6608":"code","c4cf6093":"code","6ce6c907":"code","e139794b":"code","edae0665":"code","6e6f71de":"code","9a2b8b6e":"code","ab1aa269":"code","87453d29":"code","2107ff7d":"code","47457f3e":"code","e61fbd63":"code","629e6190":"code","15361e4e":"code","5f5a8e44":"code","b72c9552":"code","0e910d80":"code","ff0f2dbf":"code","2dfad61a":"code","9a1baf4d":"code","6672e381":"code","214b4f7a":"code","a6db0003":"code","2b066b7a":"code","f90c3c4e":"code","86e1d56b":"code","e175ac39":"code","40e418e6":"code","ffff4f19":"code","68d5fb5b":"code","df5ac7f2":"code","d0726846":"code","74949381":"code","8c1fe3d9":"code","c54470ff":"code","dfdff6d5":"code","2ff60900":"code","b5d282e3":"code","1608f55a":"code","f23af2c4":"code","62c3ac0d":"code","6a08f1e3":"code","acbde76a":"code","d3302389":"code","9236fa8b":"code","b04ab643":"code","032bf29b":"code","e77d4f69":"code","81d0b9fe":"code","a02e89eb":"code","a2fc028b":"code","85c75ce7":"code","e8500d13":"code","fb4a3b27":"code","77a3b147":"code","bf776fb3":"code","8c8128fd":"code","93bb81d9":"code","63f9f5e7":"code","a1ef8e02":"code","9e34fa3d":"code","44acd3af":"markdown","48a0fb01":"markdown","d93d7a57":"markdown","65433a52":"markdown","3e257303":"markdown","5454beab":"markdown","de31c65e":"markdown","ccad85ec":"markdown","48cd78bf":"markdown","a1059879":"markdown","42bf868d":"markdown","87e9fa42":"markdown","8451e65b":"markdown","acb677d4":"markdown","3e256a83":"markdown","5911a04a":"markdown","c568e10f":"markdown","44ab9ff6":"markdown","5b8f937c":"markdown","9d942385":"markdown","262f8bb2":"markdown","6b0a737b":"markdown","6b862a6f":"markdown","4a59aedc":"markdown","7b14b97c":"markdown","d9e8a4e2":"markdown","55a9110a":"markdown","074c4e6b":"markdown","6c9aef8e":"markdown","d8ddc837":"markdown","481b0236":"markdown","5b32d3f1":"markdown","325013c7":"markdown","80d435a2":"markdown","63984291":"markdown","217c7a1b":"markdown","0f5aabee":"markdown","dc565ce9":"markdown","401f7e15":"markdown","2632ee44":"markdown","834565cb":"markdown","81750df9":"markdown","fdbb7d15":"markdown","4acaef7b":"markdown","d2c663ac":"markdown","28ca0cee":"markdown","76a66915":"markdown","a4c43ff6":"markdown","d3221039":"markdown","9f72fb95":"markdown","c4c2b8fd":"markdown","0cefb657":"markdown","d8cb9751":"markdown","829cf8e6":"markdown","7d2fbf49":"markdown","f51ec207":"markdown","eccc6318":"markdown","5870493d":"markdown","69d7df39":"markdown","2cd201a3":"markdown","6754f5d2":"markdown","36ecc800":"markdown","4f7bf709":"markdown","bdaa50e6":"markdown","eebc59ba":"markdown","eaba8c49":"markdown","c8d2dda1":"markdown","83c20fc8":"markdown","9fbfe040":"markdown","af41ee48":"markdown","70e2f1e6":"markdown","a0385fce":"markdown","21d121cc":"markdown","22983607":"markdown","2ef6ba96":"markdown","76107f86":"markdown","afc0458c":"markdown","bb86b305":"markdown","fe248f14":"markdown","75ca8efd":"markdown","52f4f805":"markdown","a92aace9":"markdown","e6c057d9":"markdown","96eaee81":"markdown","ee554ce9":"markdown","8983dd6b":"markdown","a108c658":"markdown"},"source":{"547f68e3":"# import the needed libraries\nimport numpy as np\nimport pandas as pd\nimport ast \nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = 10,6\nplt.xkcd() # let's have some funny plot\n%matplotlib inline","807edf0e":"# load data to pandas dataframe\ndf = pd.read_csv('..\/input\/zomato.csv')","659b6b7f":"# explore the top five rows\ndf.head()","5d426c23":"# get some info about data \ndf.info()","83711ba5":"# make a copy of our data\ndata = df.copy()","e90dd87b":"# explore columns related to the addrress\ndata.loc[:,['address','location','listed_in(city)']].sample(8,random_state=1)","2c971463":"# drop unnecessary columns\ncolumn_to_drop = ['address','url' ,'listed_in(city)', 'phone']\ndata.drop(columns=column_to_drop, axis=1,inplace=True)\n","d91ef514":"# check the columns now\ndata.columns","700ce0be":"# rename non descriptive columns\n# As per metadat 'listed_in(type)' is a type of meal\ndata.rename(columns={'approx_cost(for two people)': 'average_cost', 'listed_in(type)': 'meal_type'}, inplace=True)","d26eda16":"data.sample(3,random_state=1)","c821f355":"# check for duplicate values\ndata.duplicated().sum()","e8e80cef":"# drop the duplicates\ndata.drop_duplicates(inplace=True)","af21a4e1":"# check for null values\n((data.isna().sum()\/data.shape[0])*100).round(2)","3037f40d":"# check for unique values in the rate column\ndata.rate.unique()","5f41b9d5":"# adjust rate column \n# convert \"NEW\" & \"-\" to np.nan\ndata.rate.replace(('NEW','-'),np.nan,inplace =True)\n# first make it as string\ndata.rate = data.rate.astype('str')\n# remove the \"\/5\" \ndata.rate = data.rate.apply(lambda x: x.replace('\/5','').strip())\n# convert column type to float\ndata.rate = data.rate.astype('float')","6067fc9b":"# test for data type\ndata.rate.dtype","b56c4f17":"# check for unique values\ndata.rate.unique()","1ff8d244":"# if we check for each value type\ntype(data.reviews_list[0])","9646affe":"# return to a list of tuples\ndata.reviews_list = data.reviews_list.apply(lambda x: ast.literal_eval(x))","2e268daf":"# check for our work now\ntype(data.reviews_list[0])","06d72b96":"# check for the first input\ndata.reviews_list[0][0]","d7fefb55":"# extract the rate for the first input from the review column\nx = [float(i[0].replace('Rated','').strip()) for i in data.reviews_list[0]]\nround((sum(x)\/len(x)),1)","c6644f72":"# first rate column \ndata.rate[0]","0bfd7e03":"def get_rate(x):\n    '''\n    extract the rate value out of a string inside tuple\n    '''\n    # ensure that x is not Null and there is more than one rate\n    if not x or len(x) <= 1:\n        return None\n    rate = [float(i[0].replace('Rated','').strip())  for i in x if type(i[0])== str]\n    return round((sum(rate)\/len(rate)),1)","4f58e354":"# create new column\ndata['review_rate']  = data.reviews_list.apply(lambda x : get_rate(x))","2d9410f3":"# compare\ndata.loc[:,['review_rate','rate']].sample(10,random_state=1)","c4f0e0a0":"# get the before number of null values\ndata.rate.isna().sum()","e3384673":"# apply the changes\nnan_index = data.query('rate != rate & review_rate == review_rate').index\nfor i in nan_index:\n    data.loc[i,'rate'] = data.loc[i,'review_rate'] ","dff26565":"# update the number of null values now\ndata.rate.isna().sum()","032da8af":"# check now\n((data.isna().sum()\/data.shape[0])*100).round(2)","1168be0a":"# first let's drop the review_rate column now\ndata.drop(columns='review_rate',axis=1,inplace=True)","1a8bab98":"# drop null values\ndata.dropna(subset=['rate', 'average_cost'],inplace=True)","44607529":"# test for data size\ndata.shape","b6f6cf88":"# check for percentage of null values \n((data.isna().sum()\/data.shape[0])*100).round(2)","908cef0e":"# fix the name column\ndata.name = data.name.apply(lambda x: x.title())","c3c34485":"# convert Yes\/No to True\/False in coumns online_order & book_table\ndata.online_order.replace(('Yes','No'),(True,False),inplace =True)\ndata.book_table.replace(('Yes','No'),(True,False),inplace =True)","6d140996":"# adjust the average_cost column\ndata.average_cost = data.average_cost.apply(lambda x: int(x.replace(',','')))","2aeb0564":"# check for values\ndata.average_cost.unique()","f1ed8b78":"# create cost_range column\nbins = [0,200, 500, 1000, 3000, 6000]\nlabels = ['very cheap','cheap','moderate','expensive','extra expensive']\ndata['cost_range']= pd.cut(data.average_cost, bins=bins,labels=labels)","e415f2a1":"# we will do the same for rate column\nbins =[0,2,3,4,5]\nlabels =['low','moderate','high','exceptional']\ndata['rate_range'] = pd.cut(data.rate, bins=bins,labels=labels)","d1b1087f":"data.loc[:,['rate','rate_range']].sample(5,random_state=1)","ab4a6608":"# clear the text\ndef clear_text(t):\n    '''\n    clear the input text t\n    '''\n    return ' '.join([i[1].replace(\"RATED\\n  \",'') for i in t]).encode('utf8').decode('ascii',errors='replace').\\\n           replace('?','').replace('\ufffd','').replace('\\n','').replace('.',' ').strip().lower()","c4cf6093":"# make a new column reviews_text\ndata['reviews_text'] = data.reviews_list.apply(lambda x: clear_text(x))","6ce6c907":"# check part of reviews text for the first restaurant\ndata.reviews_text[0][:500]","e139794b":"data.dish_liked.nunique()","edae0665":"# make lower case\ndata.dish_liked = data.dish_liked.apply(lambda x:x.lower().strip() if isinstance(x,str) else x)","6e6f71de":"# collect the dishes' names and make a menu list for all kind of dishes\nmenu_list = [e.strip() for i in data.dish_liked.tolist() if isinstance(i,str) and len(i) >0 for e in i.split(',')]\n\n# Now collect the unique dish name \nmenu_set = set(menu_list)","9a2b8b6e":"# example\ndata.dish_liked[10000]","ab1aa269":"# the solution \nmenu_set.intersection(data.reviews_text[10000].split(' '))","87453d29":"#creat a new column for the reviewed dish\ndata['dish_n_review'] = data.reviews_text.apply(lambda x: ', '.join(list(menu_set.intersection(x.split(' ')))))","2107ff7d":"# get sample to compare\ndata.query('dish_liked != dish_liked')[['dish_liked','dish_n_review']].sample(5,random_state=1)","47457f3e":"# fill in the missing values in dish_liked column with data from reviews\nnan_index = data.query('dish_liked != dish_liked & dish_n_review == dish_n_review').index\nfor i in nan_index:\n    data.loc[i,'dish_liked'] = data.loc[i,'dish_n_review']","e61fbd63":"# Now let's test our work\ndata.dish_liked[10000]","629e6190":"del menu_list\ndel menu_set","15361e4e":"# check for null values\n((data.isna().sum()\/data.shape[0])*100).round(3)","5f5a8e44":"# plotting parameters\n# set the color for all graphs\ncolors = ['grey' for i in range(data.location.nunique())]\ncolors[0] = 'orange'","b72c9552":"# collect the column with string (object type)\nstr_cols = [i for i in data.columns if (data[i].dtypes == object)]\n# show a sample of these columns\ndata[str_cols].sample(5,random_state=1)","0e910d80":"# set a function to count the values in a comma separated string \ndef clear_text_2pd(x):\n    'extract the data and count it from comma separted string values in column x returns a pd.Series ready to plot'\n    return pd.Series([e.strip() for i in data[data[x].notnull()][x] for e in i.split(',') if e!='[]' if i ])","ff0f2dbf":"# plot 2 bar plots\nplt.rcParams['figure.figsize'] = 12,6\nplt.subplot(1,2,1)\n# top 10 reviewed dishes\nclear_text_2pd('dish_n_review').value_counts()[:10].plot('bar',color=colors,grid=True)\nplt.title('Top 10 reviewed dishes in Bangalore', weight='bold')\nplt.xlabel('Dish')\nplt.ylabel('Count')\n\n# top 10 dish_liked\nplt.subplot(1,2,2)\nclear_text_2pd('dish_liked').value_counts()[:10].plot('bar',color=colors,grid=True)\nplt.title('Top 10 liked dishes in Bangalore', weight='bold')\nplt.xlabel('Dish')\nplt.ylabel('Count')\nplt.tight_layout();","2dfad61a":"# plot 2 bar plots\nplt.rcParams['figure.figsize'] = 12,6\nplt.subplot(1,2,1)\n# top 10 restaurants types\nclear_text_2pd('rest_type').value_counts()[:10].plot('bar',color=colors,grid=True)\nplt.title('Top 10 resturants\\' types in Bangalore', weight='bold')\nplt.xlabel('Restaurant Type')\nplt.ylabel('Count');\n\nplt.subplot(1,2,2)\n# top 10 restaurants Chain\nclear_text_2pd('name').value_counts()[:10].plot('bar',color=colors,grid=True)\nplt.title('Top 10 resturants\\' Chain in Bangalore', weight='bold')\nplt.xlabel('Chain Name')\nplt.ylabel('Count')\nplt.tight_layout();","9a1baf4d":"# top 10 cuisines\nclear_text_2pd('cuisines').value_counts()[:10].plot('bar',color=colors,grid=True)\nplt.title('Top 10 Cuisines in Bangalore', weight='bold')\nplt.xlabel('Cuisines')\nplt.ylabel('Count');","6672e381":"# collect only those related to country culture\nintern_cusine = []\nfor i in clear_text_2pd('cuisines'):\n    if i[-2:] == 'an' or i[-2:] == 'se' or i[-2:] == 'ai':\n        intern_cusine.append(i)\npd.Series(intern_cusine).value_counts()[:10].plot('bar',color= colors)\nplt.title('Top 10 International Cuisines in Bangalore',weight='bold');\ndel intern_cusine","214b4f7a":"# plot 2 bar plots\nplt.rcParams['figure.figsize'] = 12,6\nplt.subplot(1,2,1)\n# top 10 menu_item\nclear_text_2pd('menu_item').value_counts()[:10].plot('bar',color=colors,grid=True)\nplt.title('Top 10 Menu item in Bangalore', weight='bold')\nplt.xlabel('Menu item')\nplt.ylabel('Count')\n\nplt.subplot(1,2,2)\n# top 10 meal_type\nclear_text_2pd('meal_type').value_counts()[:10].plot('bar',color=colors,grid=True)\nplt.title('Top 10 Meal Type in Bangalore', weight='bold')\nplt.xlabel('Meal Type')\nplt.ylabel('Count')\nplt.tight_layout();","a6db0003":"# histogram for restaurants average_rate\nplt.rcParams['figure.figsize'] = 12,6\nplt.subplot(1,2,1)\ndata.rate.hist(color='grey')\nplt.axvline(x= data.rate.mean(),ls='--',color='yellow')\nplt.title('Rate Distribution',weight='bold')\nplt.xlabel('Rate')\nplt.ylabel('Count')\n\nplt.subplot(1,2,2)\ndata.rate_range.value_counts().plot('bar',color=colors,grid=True)\nplt.title('Rate range Distribution',weight='bold')\nplt.xlabel('Rate range')\nplt.ylabel('Number of restaurants')\nplt.xticks(rotation=0)\nplt.tight_layout();","2b066b7a":"# votes vs rate\ndata.plot(kind='scatter',x='rate',y='votes',marker='o',color='m',grid=True)\nplt.title('Votes Versus Rate');","f90c3c4e":"# votes vs rate\ndata.plot(kind='scatter',x='rate',y='average_cost',marker='o',color='y',grid=True)\nplt.title('Average cost for Two Persons Versus Rate',weight='bold');","86e1d56b":"sns.heatmap(data.corr());","e175ac39":"# location\ndata.location.value_counts()[:10].plot('bar',color=colors)\nplt.title('Restaurant Distribution over location listed in Zomato.com',weight='bold')\nplt.xlabel('Resturant\\'s Location')\nplt.ylabel('Number of Restaurants');","40e418e6":"plt.rcParams['figure.figsize'] = 15,8;\ndata.groupby(['location','rate_range']).size().groupby(level=0).apply(lambda x: 100 * x \/ x.sum()).\\\nunstack().plot(kind='bar',stacked=True,color=['b','orange','w','grey'])\nplt.gca().yaxis.set_major_formatter(mtick.PercentFormatter())\nplt.axhline(y =80 ,ls='--',color='y')\nplt.axhline(y =25 ,ls='--',color='m');","ffff4f19":"loc_cuisine = data.groupby('location')['cuisines'].value_counts().sort_values(ascending=False)\nind = loc_cuisine.index.levels[0]\ntop_cuisine , rest_count =[],[]\nfor i in ind:\n    top_cuisine.append(loc_cuisine[i].index[0])\n    rest_count.append(loc_cuisine[i][0])","68d5fb5b":"# location's top cuisine\npd.DataFrame({'location':ind,'top_cuisine':top_cuisine,'rest_count':rest_count})\n","df5ac7f2":"del top_cuisine \ndel rest_count","d0726846":"from collections import Counter\nloc_dish = data.groupby('location')['dish_liked'].value_counts()\nind = loc_dish.index.levels[0]\ntop_dish = []\nfor i in ind:\n    dish_counter = Counter([e.strip() for e in ','.join(loc_dish[i].index).split(',') if e])\n    top_dish.append(','.join(i[0] for i in dish_counter.most_common()[:1]))","74949381":"# location's top dish\nloc_dish_df = pd.DataFrame({'location':ind,'top_dish':top_dish})\ndel top_dish\nloc_dish_df","8c1fe3d9":"plt.rcParams['figure.figsize'] = 9,6\nplt.subplot(1, 2, 1)\ndata.online_order.value_counts().plot('pie',colors=colors)\n# add white circle to male donut plot\nw_circle=plt.Circle( (0,0), 0.7, color='white')\np=plt.gcf()\np.gca().add_artist(w_circle)\nplt.title('Online Order Service',weight ='bold');\n\nplt.subplot(1, 2, 2)\ndata.book_table.value_counts().plot('pie',colors=colors)\n# add white circle to male donut plot\nw_circle=plt.Circle( (0,0), 0.7, color='white')\np=plt.gcf()\np.gca().add_artist(w_circle)\nplt.title('Book Table Service',weight ='bold')\nplt.tight_layout();\nplt.rcParams['figure.figsize'] = 8,6","c54470ff":"# total number of restaurants in dataset\nn_rest = data.shape[0]\nprint(f'Percentage of Restuarants have online order service: {((data.online_order.sum() \/ n_rest)*100).round(2)} %')\nprint(f'Percentage of Restuarants have Book table service: {((data.book_table.sum() \/ n_rest)*100).round(2)} %')","dfdff6d5":"# collect the rate and online order columns\nplt.rcParams['figure.figsize'] = 12,6\ndata_to_plot = pd.crosstab(data.rate, data.online_order)\ndata_to_plot.plot(grid= True,color=colors);\n# set the average rate line\nplt.axvline(data.rate.mean(),color=\"y\",linewidth=0.75,ls=\"--\")\nplt.title('Online Order VS Rate',weight='bold')\nplt.ylabel('Number of Restaurants')\nplt.xlabel('Rate');","2ff60900":"data.query('online_order == True')[['name','rate','average_cost','location']].\\\nsort_values(by=['average_cost','rate'],ascending=[True,False])[:1]","b5d282e3":"# collect the rate and online order columns\nplt.rcParams['figure.figsize'] = 12,6\ndata_to_plot = pd.crosstab(data['rate'], data['book_table'])\ndata_to_plot.plot(grid=True,color=colors);\n# set the average rate line\nplt.axvline(x=data.rate.mean(),color=\"black\",linewidth=0.75,ls=\"--\")\nplt.title('Book Table VS Rate',weight='bold')\nplt.ylabel('Number of Restaurants')\nplt.xlabel('Rate');","1608f55a":"# compare book_table average rate vs all rate\nprint(f'Average rate for all restaurants: {round(data.rate.mean(),2)}')\nprint(f\"Average rate for book_table serrvice restaurants: {round(data.query('book_table == True')['rate'].mean(),2)}\")","f23af2c4":"# online_order rate\ndata.query('online_order == True')['rate'].mean()","62c3ac0d":"# having both sevices\ndata.query('online_order == True & book_table == True')['rate'].mean()","6a08f1e3":"# characteristics of restuarants with book_table service\n# set averages of votes, rates and cost in case book_table service\ndata.query('book_table == True')[['votes','rate','average_cost']].mean()","acbde76a":"# set averages of votes, rates and cost in case online_order service\ndata.query('online_order == True')[['votes','rate','average_cost']].mean()","d3302389":"data.query('book_table == True')[['name','rate','average_cost','votes','location']].\\\nsort_values(by=['average_cost','votes','rate'],ascending=[True,False,False])[:1]","9236fa8b":"# location versus cost_range\nplt.rcParams['figure.figsize'] = 15,9;\ndata.groupby(['location','cost_range']).size().groupby(level=0).apply(lambda x: 100 * x \/ x.sum()).\\\nunstack().plot(kind='bar',stacked=True,color=['c','w','orange','grey','m'])\nplt.gca().yaxis.set_major_formatter(mtick.PercentFormatter());","b04ab643":"# number of unique locations in our dataset\ndata.location.nunique()","032bf29b":"# locations with certain cost style\nplt.rcParams['figure.figsize'] = 9,6\nloc_cost_df = data.groupby(['location','cost_range']).size().groupby(level=0).apply(lambda x: 100 * x \/ x.sum()).\\\nunstack()\nloc_cost_df.query('location == \"Hebbal\" | location == \"Rajarajeshwari Nagar\" | location == \"Central Bangalore\"\\\n| location == \"Lavelle Road\"| location == \"Kengeri\"| location == \"Sankey Road\"').plot(kind='bar');","e77d4f69":"data.groupby('location')['votes'].sum().sort_values(ascending=False)[:10].plot('bar',color=colors)\nplt.title('Top 10 Voted neighbourhoods',weight='bold')\nplt.ylabel('Count');","81d0b9fe":"# get the average votes & rate\navg_votes = data.votes.mean()\navg_rate = data.rate.mean()\n# get the more reliable and relevant datapoints those with high votes , high rates and from lowest possible price\nrel_data = data.query('votes >=@avg_votes & rate >=@avg_rate').sort_values(['average_cost','votes','rate']\\\n                                                                           ,ascending=[True,False,False])\n# the top best list\nrel_data[['name','rate','votes','cuisines','average_cost','location']][:10]","a02e89eb":"#rel_data.groupby('location')[['rate','votes','rest_type','average_cost']].value_counts()\nplt.rcParams['figure.figsize'] = 12,8\nrel_data['location'].value_counts()[:10].sort_values(ascending=False).plot('bar',color =colors);","a2fc028b":"# cusinies from the most reliable data\nplt.rcParams['figure.figsize']= 9,6\nrel_data['cuisines'].value_counts().sort_values(ascending=False)[:5].plot('bar',color=colors);","85c75ce7":"# average_price from the most reliable data\nrel_data['average_cost'].mean()","e8500d13":"# location versus meal_type\nplt.rcParams['figure.figsize'] = 15,9;\ndata.groupby(['location','meal_type']).size().groupby(level=0).apply(lambda x: 100 * x \/ x.sum()).\\\nunstack().plot(kind='bar',stacked=True,color=['c','b','w','grey','orange','black','m'])\nplt.gca().yaxis.set_major_formatter(mtick.PercentFormatter())\nplt.legend(loc='best');","fb4a3b27":"meal_to_rate = pd.crosstab(data['meal_type'], data['rate_range'])\n# the cheap area will be colored as white for ease of visibility\nplt.rcParams['figure.figsize'] = 9,6\nmeal_to_rate.div(meal_to_rate.sum(1).astype(float), axis = 0).plot(kind = 'barh', stacked = True)\nplt.legend(loc='best')\nplt.title('Meal type Vs rate category',weight='bold');","77a3b147":"data.groupby('meal_type')['votes'].sum().sort_values(ascending=False).plot('bar',color=colors,title='Votes per Meal');","bf776fb3":"data.query('rate >= 4.5 & average_cost >= 3000')[['name','votes','rate','average_cost','meal_type','location']].\\\nsort_values(by=['rate','votes','average_cost'],ascending=[False,False,False])","8c8128fd":"# get the max rate\nmax_rate = data.rate.max()\nmax_vote = data.votes.max()\n\ndata.query('rate <= @max_rate & votes == @max_vote')[['name','votes','rate','average_cost','meal_type','location']].\\\nsort_values(by=['rate','votes','average_cost'],ascending=[False,False,False])","93bb81d9":"\nfrom wordcloud import WordCloud\nwordcloud = (WordCloud(width=1440, height=1080).generate_from_frequencies(rel_data.name.value_counts()))\n\n\nfig = plt.figure(1,figsize=(15, 15))\nplt.imshow(wordcloud)\nplt.axis('off');\n\n","63f9f5e7":"# top reliable chain\nrel_data.name.value_counts()[:10].plot('bar',color=colors)\nplt.title('Top reliable chain',weight='bold');","a1ef8e02":"text = ' '.join(data.reviews_text)","9e34fa3d":"from wordcloud import WordCloud, STOPWORDS \n \ncomment_words = ' '\nstopwords = set(STOPWORDS) \n\nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='white', \n                stopwords = stopwords, \n                min_font_size = 10).generate(text) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (12, 12), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) ","44acd3af":"# Cleaning Data","48a0fb01":"It's quiet fair now that all our dataset has rate and average_cost","d93d7a57":"- As we can notice from the above chart that **North indian** at the top of cuisines provided in Bangalore\n- Still we find some bars for Fast Food, Biryani which is not related to specific culture\/ or cuisines\n- Let's extract those related to country culture wise","65433a52":"So croweded as we have **92** locations, but you can notice the following:\n> - The majority of restaurants in the cheap price category (200-500) as average-cost for 2 persons\n- Some neibourhood has style of cost range like and not limited to:\n    1. Central Bamglore & Kengri : 100% of resturants in the cheap region\n    2. Lavelle Road: has expensive style majpority\n    3. Sankey Road: has expensive and extra expensive restuarants with little moderate and neither cheap nor very cheap\n    4. Rajarajeshwari Nagar : has the moderate style of cost_range 500-1000\n    5. Hebbbal : divided between very cheap and moderate    \n- Likely certain locations affected by the level of population hence the costing strategy differs\nTo get more focus let seprate those locations to get the idea","3e257303":"- We can say that having a book_table service is more important than online_order service, likely to get higher rate score!\n- People tends to pay more, vote more, and give higher rate scores for restaurants with book_table service\n- Awesome !!","5454beab":"- **Chicken Friend Rice** is the top menu item listed in restaurants in Bangalore.\n- That's satisfy our conclusion that the most liked dish and the most reviewed was **Chicken**\n- **Delivery** meal_types rocks in Bangalore.","de31c65e":"## 2. Removing duplicates\n- We are going to remove duplicates data when the entire rows is duplicated\n- As same name could be available for other meal types and hence other ratings and average cost (this is a chain restaurant)","ccad85ec":"To answer this question let's first define the best restaurant:\nThis will be as:\n- has the highest possible rate , above average plus,\n- has the highest number of votes as it will more reliable plus\n- has the lowest possible cost","48cd78bf":"### Customer mind","a1059879":"So now, we can replace this missed values from the dish_n_review","42bf868d":"**Update**","87e9fa42":"## 5. Adjust name column\n> To unify the name column we will make all values as titles","8451e65b":"BTM has the highest number of restaurnts","acb677d4":"Back to our job for deleting Null values\n> - We are intersted in this analysis for the rate and average_cost relationship , so we'll drop null values in these two columns\n- But first let's have a look on the review list column\n- We here are trying to save as much of our data","3e256a83":"- As we can see that each element in our review_list is a tuple the first item is that tuple is the rate inputed by the user whle writting his\/her review.\n- We can make use of this to down the number of missed values in that column.\n- Let's make a try\n- We are going to extract the rate for the first input restaurant in our data from the review column","5911a04a":"### How much?","c568e10f":"## 8. Create the dish_n_review  column \n\n> - extact the dished been reviewed from the review text","44ab9ff6":"More clear here that if your restaturat has not the book table service you still have the opportinity to have a similar rate as other restaurant provide this service.\nMost of the restaurant has not this service\n- while at rate around 4.2 we notice higher number of restaurants at this rate and provide book_table service","5b8f937c":"> **Himanshu Poddar wrote**\n> \n> > Actually the two columns..... listed in(city) and location are different. location means where the restaurant actually is and listed in(city) means the restaurant also delivers to that place beside the area where it is located. Thats why we have 51K data.","9d942385":"The most common chain restaurant with high rate , high votes and good prices is **Onesta**","262f8bb2":"- The North indian cuisine at the top of the best by far.","6b0a737b":"> - KM 5th Block has the highest votes","6b862a6f":"### Quick insights","4a59aedc":"#### Where?\n#### Answer:","7b14b97c":"A lot of the values in these columns appeared as comma separated and contains much information behind if we split it and count each separately","d9e8a4e2":"### Cusine trend per Location","55a9110a":"As expected that those are rated above average are likely getting higher votes","074c4e6b":"> - So, Now we found this column has **'NEW' ,\"-\"** values which should replaced by np.nan\n- there is \/5 as extra and no need for it\n- values represents as strings instead of float\n","6c9aef8e":"## 6. Adjust column types \n> - online_order & book_table presented as strings instead of bools (working with True\/False make it easier to analyze)\n- average-cost as strings instead of int\n- add the cost_range column for ease of classification","d8ddc837":"> It seems that a lot of neighbourhoods are characterised by a certain type of dish liked","481b0236":"First as we are intersted in the **rate** of a restaurant let's have a look about its distribution among the dataset","5b32d3f1":"Please upvote and feel free to comment below","325013c7":"## Restaurant Distribution over location","80d435a2":"### Rate ","63984291":"# Getting Insights","217c7a1b":"### Notes:\n- we are going to make a new column of cost_ranges which will be as follows:\n> - very cheap : 0-200\n - cheap : 200-500\n - moderate : 500-1000 \n - expensive : 1000-3000\n - very expensive : 3000-6000\n- we will do the same for average_rate column, so we can get insights from categories","0f5aabee":"- As per the above answer from dataset creator, so we are going to keep the location column and drop the address and listed_in(city) columns\n- columns **url** , **phone** , we are not interested in ,to be dropped too","dc565ce9":"## 8. Clean the dish_like  column \n\n> - make it all as lowercase.\n- some missing values could be extracted also from the review_list","401f7e15":"### 3. How the book table service affects the restaurant rate?","2632ee44":"## 3. Removing Null values","834565cb":"#### Where?\n#### Answer:\nAt **Srinidhi Sagar** you can order online with highest average rate at **3.9** for the cheapest average cost for 2 persons","81750df9":"- Rim Naam , Karavall , Alba branches are the top of this group","fdbb7d15":"> - **Quick Bites** is the most commom restaurant type in Bangalore.\n> - **Onesta** and **Cafe Coffee Day** are the biggest chains in Bangalore.","4acaef7b":"### 7. Where one can find the best restaurants in Bangalore?","d2c663ac":"> - I guess it's quiet clean now.\n- It's time for the fun part of getting insights with data visualtisation","28ca0cee":"- We can see in the above table that  most neighbourhoods are characterised by certain type of cuisine either North or South Indian. \n- some has North Inidan and chinese","76a66915":"- The average price for most appreciated restaurants is around 1000 for two persons","a4c43ff6":"**Chicken** at the top of list either liked or reviewed","d3221039":"> - So, Here we have three columns all refer to same piece of information that we are interested in, **address**\n- Let's select which one to keep and delete the others","9f72fb95":"### 1. How many  Restuarants have online order service? & book table service?","c4c2b8fd":"> - As we notice here that it's almost normal distribution with average at **3.7**\n> - The majority of restaurants rated beteen 3 and 4 (High range)\n> - That cklarify the high competetion in this market in Bangalore.","0cefb657":"### Top Dish liked  per Location","d8cb9751":"- Byg Brewski Brewing Company branhces are the top of this group","829cf8e6":"> - All locations have large numbers of its restaurantas as highly rated restaurants which is matching with previous conclusion\n- There are a lot of locations where around 20% of its restaurants are exceptionally rated that means above 4 out 5.\n- Brigade Road, Church Street, Lavelle Road, MG Road and Residency Road has more than **30%** of its restaurants are exceprtionally rated\n- Lavell Road has the highest percentage around **75%** of its resturants in exceptionally rated categroy\n> - It's quiet clear that different locations has different rate style","7d2fbf49":"### 5.What is the relation between votes and neighbouhood?","f51ec207":"## 4. Adjust  review list column\n> - This column appears as string instaed of list of tuples\n- using ast library to return it back to list and then accessing it for more and easy analysis\n- extract the review text only from each tuple in each list and clear it\n-  make a new column reviews_text","eccc6318":"### Before removing null values \n\n> - As we notice around 50 % of data will be lost if we delete the nan values in dish_liked column\n- We will keep that column for now\n- let's check for rate column as it contains 15% of its points as null value","5870493d":"## Rate relation with Location","69d7df39":"- Now we can drop the menu_list & menu_set","2cd201a3":"## 1. Adjust column names and dropped irrelevant columns","6754f5d2":"- We save around  1000 records ","36ecc800":"### 8.What is the relation between meal_type and location?","4f7bf709":"* Now, let's make a new column for the rate extracted fom review, we will call it review_rate","bdaa50e6":"### 9. What is the relation between meal type and the rating?","eebc59ba":"## Top 10 cusines in Bangalore","eaba8c49":"> Its quiet clear that the majority of restaurants in our dataset has online order services but  minority with book table service, which is may due to the nature of city and people styple of living in a hustle life","c8d2dda1":"Cool !!, Now we could do that for all other missing values in dish_liked column but first let's create the dish_n_review column","83c20fc8":"### Finally , top rated , top voted","9fbfe040":"As we notice from the above chart that having the online order service has no effect on rating the restaurants , except that we can found at the same level of rate there is much number of restaurants that has online order serivce especially above the average rate of 3.7.","af41ee48":"__Hi Kagglers,__\n\nWelcome to my kernel\n- **I have learned a lot in this little journey with Bangalore restaurants, hope you do too :)**\n- **Plase feel free to share your insights, toughts and\/or comments below, and upvote if you like it**\n\n\nIn this analysis I have tried to get in deep understanding of the data and get new insights\nSo my approach is as follows:\n\n- Clean the data as possible \n- Not to lose much records by ease of just removing the missing values\n- Make cleaning for the reviews_list column, it contains much useful info\n\nThe apptoach stepwise as follow:\n\n### Ceaning Data\n   - #### 1. Adjust column names and dropped irrelevant columns\n   - #### 2. Removing duplicates\n   - #### 3. Removing Null values\n   - #### 4. return  review list column to its type as list of tuples instead of string and clean it.\n   - #### 5. Adjust name column\n   - #### 6. Adjust column types \n   - #### 8. Clean the dish_like  column \n\n### Finally  Getting Insights and  Data Visualisation\n\nWithout further due, let's start !","70e2f1e6":"### What cuisine?","a0385fce":"### 4.What is the relation between cost and neighbouhood?","21d121cc":"- even if we notice a little difference it will be more valuable than just throw columns\n- let's make our function","22983607":"**Correlation**","2ef6ba96":"Business wise, one should be careful before going into **Quick Bites** restaurants as more than 16000 restaurants serve in this category !","76107f86":"> - Again **North Indian** at the top, followed by **Chinese** then **South indian**.\n> - We can see different cultrurs from all over the world like Italian, American ,Asian and Arabian\n> - Highly diversified market","afc0458c":"## Top 10 dish liked and reviewed dish in Bangalore","bb86b305":"## 7. Clean the review list column \n> - After returning it back to its nature of a list of tuples, we are able now to extract the reviews text\n- hope to get more insights about each restaurants from its reviewers","fe248f14":"As we now has the unique list of dishes we now could replace those with null values with some useful data","75ca8efd":"### 6. What are the best restaurants in Bangalore ?","52f4f805":"The pubs and Bars & the Drinks and nightlife gets more of rate may be as they are not much located.","a92aace9":"## Top restaurants type and Top restaurant chain in Bangalore","e6c057d9":"- Again here if you go through each color you will get the hint that\n- Each location has dominat types of meal\n- Each meal has tendency to be more in certain locations like:\n    1. Kengri has high percentage of its restaurant as Cafe type\n    2. Rajarajeshwari Nagar has nothing but Delivery ! same in Central Bangalore\n    3. Pennya : 100% as Dineout\n    4. Langford Town : you will find the highest mix  of drinks& nightlife and pubs beside dineout\n    5. Commercial street: around 20% of its restaiurants in the dessert type","96eaee81":"Most of these are located in **Basavanagudi** with similar cuisines","ee554ce9":"- Quiet close!\n- Now, to replace the missing values in rate column with those from review_column","8983dd6b":"At **Fogg** you can book a table with highest average rate at **5** for the cheapest average cost for 2 persons of **200**","a108c658":"+ Koramangala 7th Block is at the top of the list \n- Without taking average_cost in consideration"}}