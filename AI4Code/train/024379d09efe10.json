{"cell_type":{"1845f305":"code","544fbfed":"code","4c7beac8":"code","c817ab87":"code","35201f8a":"code","5dfd049a":"code","47ec5d78":"code","5dd959b4":"code","9e22d614":"code","8a58b4c8":"code","dd0e6ca0":"code","d1b51691":"code","a66e1783":"code","40c7ca9d":"code","9b460b20":"code","6c70dc34":"code","89aa85af":"code","8b74dc4f":"code","663648d1":"code","2c76bd1d":"code","f0afde98":"code","af35cf6f":"code","1f0508d6":"code","50dbfdb1":"code","c8243d74":"code","37aae013":"code","ea157bd8":"code","c0bc0623":"code","d8678167":"code","9a1a3a36":"code","2ba5d850":"code","9d1ae68a":"code","d120f214":"code","809ba1ab":"code","6b66ceef":"code","78357850":"code","ed56f5ab":"code","e0209aea":"code","5a027f3d":"code","4b469b7e":"markdown","4252b25b":"markdown","e9a0ff6f":"markdown","6d297cae":"markdown","1930a368":"markdown","fd3b0032":"markdown","6ac6deb2":"markdown","1b42a194":"markdown","d615aea5":"markdown"},"source":{"1845f305":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport seaborn as sns\nimport matplotlib.ticker as ticker\nimport plotly.graph_objs as go\nimport missingno as msno\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\nimport descartes\nimport geopandas as gpd\nfrom shapely.geometry import Point, Polygon\n%matplotlib inline","544fbfed":"cases_in_india = pd.read_csv(\"..\/input\/coronavirus-cases-in-india\/Covid cases in India.csv\")\ncoordinates = pd.read_csv(\"..\/input\/coronavirus-cases-in-india\/Indian Coordinates.csv\")\nper_day = pd.read_excel(\"..\/input\/coronavirus-cases-in-india\/per_day_cases.xlsx\")\n\nage_group = pd.read_csv(\"..\/input\/covid19-in-india\/AgeGroupDetails.csv\")\nbedsIndia = pd.read_csv(\"..\/input\/covid19-in-india\/HospitalBedsIndia.csv\")\ntestLabs = pd.read_csv(\"..\/input\/covid19-in-india\/ICMRTestingLabs.csv\")\nind_detail = pd.read_csv(\"..\/input\/covid19-in-india\/IndividualDetails.csv\")\nstatewise = pd.read_csv(\"..\/input\/covid19-in-india\/StatewiseTestingDetails.csv\")\ncov_india = pd.read_csv(\"..\/input\/covid19-in-india\/covid_19_india.csv\")\ncensus2011 = pd.read_csv(\"..\/input\/covid19-in-india\/population_india_census2011.csv\")\ndistrict = pd.read_csv(\"..\/input\/district-dataset\/district_level_latest.csv\")\npnb_latlng = pd.read_csv(\"..\/input\/punjab-latlng\/punjab_lat_lng - Sheet1.csv\")","4c7beac8":"census = census2011[[\"State \/ Union Territory\", \"Density\"]]\n# statewis = statewise.groupby(\"State\").tail(1).reset_index()\nstatewis = statewise[statewise.groupby(['State'])['Positive'].transform(max) == statewise['Positive']]\n\nden_pop = pd.merge(census, statewis, how = \"inner\", left_on = \"State \/ Union Territory\", right_on = \"State\")\nden_pop[\"Density\"] = den_pop[\"Density\"].apply(lambda x : x.replace(\".\", \"\"))\nden_pop[\"Density\"] = den_pop[\"Density\"].apply(lambda x : int(x.split(\"(\")[0].split(\"\/\")[0].replace(\",\", \"\")))","c817ab87":"den_pop","35201f8a":"plt.figure(figsize = (6, 6))\n\nsns.scatterplot(\"Density\", \"Positive\", data = den_pop, s = 80, color = \"red\")\nplt.xlim([0, 2000])\nplt.ylim([0, 30000])\nsns.set(font_scale = 1.5)\nplt.title(\"Variation of Covid-19 cases with Population density\", pad = 50)\nsns.set(font_scale = 1)\nplt.xlabel(\"Density\")\nplt.ylabel(\"Positive\")\nsns.despine()","5dfd049a":"ind_detail.head(1)","47ec5d78":"plt.figure(figsize = (5, 5))\nsns.countplot(x = \"gender\", data = ind_detail)","5dd959b4":"ind_detail = ind_detail[(ind_detail[\"age\"] != '28-35')]\nind_detail = ind_detail[~ind_detail['age'].isnull()]\nind_detail[\"age\"] = ind_detail[\"age\"].apply(float)\nage_category = pd.cut(ind_detail.age,bins=[0,10,22,35,50,70,100],labels=['0-10','10-22','22-35','35-50', '50-70','70-100'])\nind_detail[\"age\"] = age_category","9e22d614":"data = ind_detail.copy()\nindex = data.groupby(\"age\")[\"age\"].count().index\n# values = data.groupby(\"age\")[\"age\"].count().values\npercent_values = []\nfor age_gp in data[\"age\"].unique():\n    total = len(data[data[\"current_status\"] == \"Recovered\"])\n    recovered = len(data[(data[\"age\"] == age_gp) & (data[\"current_status\"] == \"Recovered\")])\n    percent_values.append((recovered\/total) * 100)\n    \n    \nplt.figure(figsize = (10, 6))\nplt.xlabel(\"Age Groups\")\nplt.ylabel(\"Percentage of Recovered\")\nsns.barplot(x = index, y = percent_values)\nplt.title(\"Recovered vs Age Group\")","8a58b4c8":"data[\"current_status\"].unique()","dd0e6ca0":"percent_values = []\nfor age_gp in data[\"age\"].unique():\n    total = len(data[data[\"current_status\"] == \"Hospitalized\"])\n    recovered = len(data[(data[\"age\"] == age_gp) & (data[\"current_status\"] == \"Hospitalized\")])\n    percent_values.append((recovered\/total) * 100)\n    \n    \nplt.figure(figsize = (10, 6))\nplt.xlabel(\"Age Groups\")\nplt.ylabel(\"Percentage of hospitalized\")\nsns.barplot(x = index, y = percent_values)\nplt.title(\"Hospitalized vs Age Group\")","d1b51691":"percent_values = []\nfor age_gp in data[\"age\"].unique():\n    total = len(data[data[\"current_status\"] == \"Deceased\"])\n    recovered = len(data[(data[\"age\"] == age_gp) & (data[\"current_status\"] == \"Deceased\")])\n    percent_values.append((recovered\/total) * 100)\n    \n    \nplt.figure(figsize = (10, 6))\nplt.xlabel(\"Age Groups\")\nplt.ylabel(\"Percentage of Deceased\")\nsns.barplot(x = index, y = percent_values)\nplt.title(\"Deceased vs Age Group\")","a66e1783":"plt.figure(figsize = (15, 8))\nsns.countplot(x = \"age\", data = ind_detail)\nplt.xticks(rotation = 90)","40c7ca9d":"punjab = district[district[\"state name\"] == \"Punjab\"].reset_index(drop = True)\npunjab.head()","9b460b20":"plt.figure(figsize =(12, 7))\nplt.title(\"Confirmed cases in Punjab districts\")\nax = sns.barplot(x = \"confirmed\", y = \"district\", data = punjab.sort_values(by = \"confirmed\", ascending = False))\nax.set_xlabel(\"Confirmed cases\")","6c70dc34":"plt.figure(figsize =(15, 8))\nplt.title(\"Recovered cases in Punjab districts\")\nax = sns.barplot(x = \"recovered\", y = \"district\", data = punjab.sort_values(by = \"recovered\", ascending = False))\nax.set_xlabel(\"recovered cases\")","89aa85af":"pnb_latlng[\"Lat\"] = pnb_latlng[\"Lat\"].apply(lambda x : x[:2])\npnb_latlng[\"Lng\"] = pnb_latlng[\"Lng\"].apply(lambda x : x[:2])\npunjab = pd.merge(punjab, pnb_latlng, left_on = \"district\", right_on = \"State\", how = \"inner\")\npunjab","8b74dc4f":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=per_day['Date'], y=per_day['Total Cases'],\n                    mode='lines+markers',name='Total Cases'))\n\nfig.add_trace(go.Scatter(x=per_day['Date'], y=per_day['New Cases'], \n                mode='lines',name='New Cases'))\n\nfig.update_layout(title_text='Trend of Coronavirus Cases in India(Cumulative cases)',plot_bgcolor='rgb(250, 242, 242)')\n\nfig.show()","663648d1":"train = per_day.iloc[:85, 1:2].values\ntest = per_day.iloc[85:, 1:2].values\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nsc = MinMaxScaler(feature_range = (0, 1))\ntrain_scaled = sc.fit_transform(train)\n\nX_train = []\ny_train = []\nfor i in range(20, len(train)):\n    X_train.append(train_scaled[i - 20:i])\n    y_train.append(train_scaled[i])\n\nX_train = np.array(X_train)\ny_train = np.array(y_train)\n\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\n\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\n\n\nreg = Sequential()\nreg.add(LSTM(units = 30, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nreg.add(Dropout(0.2))\n\nreg.add(LSTM(units = 30, return_sequences = True))\nreg.add(Dropout(0.2))\n\nreg.add(LSTM(units = 30, return_sequences = True))\nreg.add(Dropout(0.2))\n\nreg.add(LSTM(units = 30, return_sequences = False))\nreg.add(Dropout(0.2))\n\nreg.add(Dense(units = 1))\n\n\nreg.compile(optimizer = \"adam\", loss = \"mean_squared_error\")\nhistory = reg.fit(X_train, y_train, epochs = 25, batch_size = 8)\n\n\n\ntotal_data = per_day.iloc[:, 1:2]\ninputs = total_data[len(total_data) - len(test) - 20:].values\ninputs = inputs.reshape(-1, 1)\ninputs = sc.transform(inputs)\nX_test = []\nfor i in range(20, 20 + len(test)):\n    X_test.append(inputs[i - 20:i])\n    \n\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\n\n\n\npredictions = reg.predict(X_test)\npredictions = sc.inverse_transform(predictions)\n\nfig, ax = plt.subplots(1,1,figsize=(10,8))\nax.plot(np.arange(len(test)), test, label = \"actual\")\nax.plot(np.arange(len(test)), predictions, label = \"predictions\")\nax.set_xlabel(\"Days\")\nax.set_ylabel(\"Actual vs Predicted\")\nplt.legend(loc = 2)","2c76bd1d":"def mean_sq_error(pred, actual):\n    mse = mean_squared_error(actual, pred)\n    return np.sqrt(mse)","f0afde98":"print(f\"Root mean square error is equal to {mean_sq_error(predictions, test)}\")","af35cf6f":"X_train = np.arange(1, len(per_day) + 1).reshape(-1, 1)\ny_train = per_day.iloc[:, 1].values.reshape(-1, 1)","1f0508d6":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import PolynomialFeatures","50dbfdb1":"polynomial_features= PolynomialFeatures(degree=3)\nx_poly = polynomial_features.fit_transform(X_train)","c8243d74":"model = LinearRegression()\nmodel.fit(x_poly, y_train)","37aae013":"y_poly_pred = model.predict(x_poly)","ea157bd8":"plt.figure(figsize = (15, 8))\nplt.plot(X_train, y_train, label = \"actual\")\nplt.plot(X_train, y_poly_pred, label = \"predictions\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Actual vs Predicted\")\nplt.legend(loc = 2)","c0bc0623":"rmse = np.sqrt(mean_squared_error(y_train, y_poly_pred))\nprint(f\"Root Mean Square Error value is {rmse}\")","d8678167":"X_test = np.arange(96, 96 + 60).reshape(-1, 1)\nx_test_poly = polynomial_features.transform(X_test)\npredictions = model.predict(x_test_poly)\n\ndates = pd.date_range(start='5\/4\/2020', periods = 60)\ndf = pd.DataFrame()\ndf[\"Date\"] = dates\ndf[\"predictions\"] = predictions\n\ndf[\"predictions\"] = df[\"predictions\"].apply(lambda x : int(x))\n\nprint(f\"Predictions for June 15: {df[df['Date'] == '2020-06-15'].values[0][1]}\")\nprint(f\"Predictions for June 30: {df[df['Date'] == '2020-06-30'].values[0][1]}\")","9a1a3a36":"data = per_day[\"Total Cases\"].values","2ba5d850":"forecast_t = []\nA_prev = 0\nF_prev = 0\nalpha = 0.75\nfor i in range(len(data)):\n    F_t = alpha * A_prev + (1 - alpha) * F_prev\n    forecast_t.append(int(round(F_t)))\n    F_prev = F_t\n    A_prev = data[i]","9d1ae68a":"plt.figure(figsize = (15, 8))\nplt.plot(np.arange(len(data)), data, label = \"actual\")\nplt.plot(np.arange(len(data)), np.array(forecast_t), label = \"predictions\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Actual vs Predicted\")\nplt.legend(loc = 2)","d120f214":"rmse = np.sqrt(mean_squared_error(data, np.array(forecast_t)))\nprint(f\"Root Mean Square Error value is {rmse}\")","809ba1ab":"per_day[\"shifted\"] = per_day[\"Total Cases\"].shift(-1)","6b66ceef":"per_day[\"growth_ratio\"] = per_day[\"shifted\"]\/per_day[\"Total Cases\"]","78357850":"growth_ratio = per_day[\"growth_ratio\"].median()","ed56f5ab":"predictions = []\ninitial = per_day.iloc[-1, 1]\nfor i in range(60):\n    new_pred = initial * growth_ratio\n    predictions.append(int(round(new_pred)))\n    initial = new_pred","e0209aea":"dates = pd.date_range(start='5\/4\/2020', periods = 60)\ndf = pd.DataFrame()\ndf[\"Date\"] = dates\ndf[\"predictions\"] = predictions\n\n\nprint(f\"Predictions for June 15: {df[df['Date'] == '2020-06-15'].values[0][1]}\")\nprint(f\"Predictions for June 30: {df[df['Date'] == '2020-06-30'].values[0][1]}\")","5a027f3d":"plt.figure(figsize = (15, 8))\nplt.xlabel(\"Next 60 days\")\nplt.ylabel(\"Total cases predicted\")\n\nplt.plot(predictions)","4b469b7e":"# Corona virus variation with Gender, Age","4252b25b":"# LSTM","e9a0ff6f":"# Analysing Punjab Data","6d297cae":"# Proportion of people recovered, hospitalized and Deceased w.r.t different age groups","1930a368":"Predictions for next 60 days","fd3b0032":"# Exponential smoothing","6ac6deb2":"Ft = \u03b1At\u22121 + (1 \u2212 \u03b1)Ft\u22121","1b42a194":"# Predicting for 15 June and 30 June","d615aea5":"# Taking the growth ratio"}}