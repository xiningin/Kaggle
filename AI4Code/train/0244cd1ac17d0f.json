{"cell_type":{"8edcc7b4":"code","b1c9cae2":"code","8255ac3a":"code","9d6fd6b5":"code","e1ff6de2":"code","60130c1a":"code","09e46cdd":"code","da38b51b":"code","cf83052b":"code","79485049":"code","65f5f44f":"code","58072bee":"code","1a184416":"code","f8e5fd55":"code","66c8f97e":"code","3fde13f4":"markdown","ce13555e":"markdown","77eddef4":"markdown","abf65978":"markdown","e9b92b60":"markdown","5cbe8cea":"markdown","fe1f1e7e":"markdown","6af8cd56":"markdown","ab9f9e9c":"markdown","7f1f93a3":"markdown","8921cc3f":"markdown","7d346e77":"markdown","a4bfb344":"markdown"},"source":{"8edcc7b4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import misc\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score, mean_squared_error, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KDTree, BallTree, KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegressionCV\nfrom sklearn import svm\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import utils\nimport seaborn as sns\n%matplotlib inline\n\n","b1c9cae2":"data = pd.read_csv('..\/input\/marvel-wikia-data.csv')\ndata.head()","8255ac3a":"data.drop('urlslug', axis=1, inplace=True)\ndata.drop('EYE', axis=1, inplace=True)\ndata.drop('HAIR', axis=1, inplace=True)\ndata.drop('FIRST APPEARANCE', axis=1, inplace=True)\ndata.drop('name', axis=1, inplace=True)\ndata.head()\n","9d6fd6b5":"sns.factorplot('SEX',data=data,kind=\"count\")","e1ff6de2":"sns.factorplot('ALIGN',data=data,kind=\"count\")","60130c1a":"fig = plt.figure(figsize=(10,4))\nfig.add_subplot(121)\ndata.ALIGN[data['SEX'] == 'Male Characters'].value_counts().plot(kind='pie')\nfig.add_subplot(122)\ndata.ALIGN[data['SEX'] == 'Female Characters'].value_counts().plot(kind='pie')","09e46cdd":"fig = plt.figure(figsize=(10,4))\nfig.add_subplot(121)\ndata.ALIVE[data['SEX'] == 'Male Characters'].value_counts().plot(kind='pie')\nfig.add_subplot(122)\ndata.ALIVE[data['SEX'] == 'Female Characters'].value_counts().plot(kind='pie')","da38b51b":"fig = plt.figure(figsize=(10,4))\nfig.add_subplot(121)\ndata.ALIGN[data['ALIVE'] == 'Living Characters'].value_counts().plot(kind='pie')\nfig.add_subplot(122)\ndata.ALIGN[data['ALIVE'] == 'Deceased Characters'].value_counts().plot(kind='pie')","cf83052b":"data['ALIGN'].replace('Good Characters',2, inplace = True)\ndata['ALIGN'].replace('Bad Characters',1, inplace = True)\ndata['ALIGN'].replace('Neutral Characters',3, inplace = True)\ndata['SEX'].replace('Male Characters', 2, inplace = True)\ndata['SEX'].replace('Female Characters', 1, inplace = True)\ndata['SEX'].replace('Genderfluid Characters', 3, inplace = True)\ndata['SEX'].replace('Agender Characters', 4, inplace = True)\ndata['ALIVE'].replace('Living Characters', 1, inplace = True)\ndata['ALIVE'].replace('Deceased Characters', 0, inplace = True)\ndata['ID'].replace('Secret Identity', 2, inplace = True)\ndata['ID'].replace('Public Identity', 1, inplace = True)\ndata['ID'].replace('No Dual Identity', 3, inplace = True)\ndata['ID'].replace('Known to Authorities Identity', 4, inplace = True)\ndata['GSM'].replace('Bisexual Characters', 1, inplace = True)\ndata['GSM'].replace('Transvestites', 2, inplace = True)\ndata['GSM'].replace('Homosexual Characters', 3, inplace = True)\ndata['GSM'].replace('Pansexual Characters', 4, inplace = True)\ndata['GSM'].replace('Transgender Characters', 5, inplace = True)\ndata['GSM'].replace('Genderfluid Characters', 6, inplace = True)\ndata.replace(np.nan, 0,inplace=True)\ndata.ALIVE = data.ALIVE.astype(int)\ndata.head()\n","79485049":"gsm = data['GSM'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\ngsm_scaled = min_max_scaler.fit_transform(gsm)\ndata['GSM'] = pd.DataFrame(gsm_scaled)\n\nid = data['ID'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\nid_scaled = min_max_scaler.fit_transform(id)\ndata['ID'] = pd.DataFrame(id_scaled)\n\n\nsex = data['SEX'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\nsex_scaled = min_max_scaler.fit_transform(sex)\ndata['SEX'] = pd.DataFrame(sex_scaled)\n\nalign = data['ALIGN'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\nalign_scaled = min_max_scaler.fit_transform(align)\ndata['ALIGN'] = pd.DataFrame(align_scaled)\n\npage_id = data['page_id'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\npage_id_scaled = min_max_scaler.fit_transform(page_id)\ndata['page_id'] = pd.DataFrame(page_id_scaled)\n\napp = data['APPEARANCES'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\napp_scaled = min_max_scaler.fit_transform(app)\ndata['APPEARANCES'] = pd.DataFrame(app_scaled)\n\nyear = data['Year'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\nyear_scaled = min_max_scaler.fit_transform(year)\ndata['Year'] = pd.DataFrame(year_scaled)\n\ndata.head()","65f5f44f":"data['ALIVE'].corr(data['GSM'])","58072bee":"trainX, testX, trainY, testY = train_test_split(data[['GSM', 'SEX', 'ALIGN','ID']], data['ALIVE'], test_size = 0.3)","1a184416":"dtc = DecisionTreeClassifier()\ndtc.fit(trainX, trainY)\naccuracy = dtc.score(testX, testY)\nprint(accuracy)","f8e5fd55":"lr = LogisticRegressionCV()\nlr.fit(trainX, trainY)\naccuracy = lr.score(testX, testY)\nprint(accuracy)","66c8f97e":"kNN = KNeighborsClassifier()\nkNN.fit(trainX, trainY)\naccuracy = kNN.score(testX, testY)\nprint(accuracy)","3fde13f4":"**Decitison Tree Algorithm**","ce13555e":"\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u0436\u0438\u0432\u044b\u0445 \u0438 \u043c\u0435\u0440\u0442\u0432\u044b\u0445 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0435\u0439 \u043c\u0443\u0436\u0441\u043a\u043e\u0433\u043e \u0438 \u0436\u0435\u043d\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u043b\u0430","77eddef4":"\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445, \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438 \u043d\u0435\u0439\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0435\u0439","abf65978":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432","e9b92b60":"\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445, \u043d\u0435\u0439\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0435\u0439 \u043c\u0443\u0436\u0441\u043a\u043e\u0433\u043e \u0438 \u0436\u0435\u043d\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u043b\u0430\n","5cbe8cea":"**Marvel Comics Classification**","fe1f1e7e":"**Logistic Regression Algorithm**","6af8cd56":"\u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","ab9f9e9c":"\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0435\u0439 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u043b\u043e\u0432","7f1f93a3":"\u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","8921cc3f":"\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445, \u043d\u0435\u0439\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0435\u0439 \u0436\u0438\u0432\u044b\u0445 \u0438 \u043c\u0435\u0440\u0442\u0432\u044b\u0445","7d346e77":"**k Nearest Neighbor**","a4bfb344":"\u0417\u0430\u043c\u0435\u043d\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435"}}