{"cell_type":{"10d811db":"code","285c60cf":"code","e67df7fd":"code","716e73e4":"code","e664f0f9":"code","08a90877":"code","6076cdc6":"code","3737c01f":"code","7b9b6b05":"code","5bc9226e":"code","f97fe80c":"code","648a84d2":"code","d9a27085":"code","4468d657":"code","e33ad64b":"code","41b06c6c":"code","75ec941f":"code","8cd77ff5":"code","c11f2c87":"code","38e86512":"code","5f06d208":"code","ad8ca41a":"code","b2f19b6e":"code","6dceaa36":"markdown","549822d7":"markdown","ee62fe8c":"markdown","1eed9353":"markdown","c548d1d5":"markdown"},"source":{"10d811db":"# Import the libraries\nimport pandas as pd\nimport numpy as np\nimport geopandas as gpd\nimport folium\nimport datetime","285c60cf":"# Create a folium map as an example\nfolium.Map(location = [40.71958611647166, -74.0431174635887],\n           tiles='cartodbpositron',\n           zoom_start=12)","e67df7fd":"# Importing data\nnyc = pd.read_csv('..\/input\/nyc_data.csv')\nnyc.head(2)","716e73e4":"# Check the type of the 'starttime variable'\ntype(nyc.loc[0,'starttime'])","e664f0f9":"# Setting the right format for starttime and stoptime\nnyc['starttime'] = nyc['starttime'].str[:-5]\nnyc['stoptime'] = nyc['stoptime'].str[:-5]\nnyc['starttime'] = pd.to_datetime(nyc['starttime'])\nnyc['stoptime'] = pd.to_datetime(nyc['stoptime'])\n\n# Define the startime as index\nnyc = nyc.set_index('starttime')\nnyc['type'] = 'station'\nnyc.head(1)","08a90877":"# Aggregate number of trips for each start station by hour of the day\nstart = nyc.pivot_table('tripduration', \n                     index = ['start station id', \n                              'start station latitude', \n                              'start station longitude', \n                              nyc.index.hour],\n                     columns = 'type',\n                     aggfunc='count').reset_index()\n\nstart.head()","6076cdc6":"# Get the daily average\ndays = nyc.index.day.max()\nstart['station'] = start['station']\/days","3737c01f":"# Change the name of the columns\nstart.columns = ['station_id', 'lat', 'lon', 'hour', 'count']\n# Create a color variable for mapping\nstart['fillColor'] = '#53c688'\n# Change the color for those stations with less than one daily trip\nstart.loc[start['count']<1, 'fillColor'] = '#586065'\nstart.head(1)","7b9b6b05":"# Create the geojson with the right format to use in the folium plugin\nimport datetime\ndef create_geojson_features(df):\n    features = []\n    \n    for _, row in df.iterrows():\n        feature = {\n            'type': 'Feature',\n            'geometry': {\n                'type':'Point', \n                'coordinates':[row['lon'],row['lat']]\n            },\n            'properties': {\n                'time': pd.to_datetime(row['hour'], unit='h').__str__(),\n                'style': {'color' : ''},\n                'icon': 'circle',\n                'iconstyle':{\n                    'fillColor': row['fillColor'],\n                    'fillOpacity': 0.8,\n                    'stroke': 'true',\n                    'radius': row['count'] + 5\n                }\n            }\n        }\n        features.append(feature)\n    return features\n\nstart_geojson = create_geojson_features(start)\nstart_geojson[0]","5bc9226e":"# Create the map and animate the data\nfrom folium.plugins import TimestampedGeoJson\n\nnyc_map = folium.Map(location = [40.71958611647166, -74.0431174635887],\n                    tiles = \"CartoDB Positron\",\n                    zoom_start = 14)\n\nTimestampedGeoJson(start_geojson,\n                  period = 'PT1H',\n                  duration = 'PT1M',\n                  transition_time = 1000,\n                  auto_play = True).add_to(nyc_map)\nnyc_map","f97fe80c":"# Do the same as before in the opposite direction to have both in a dual map\n\nnyc1= nyc.reset_index().set_index('stoptime')\nend = nyc1.pivot_table('tripduration', \n                     index = ['end station id', \n                              'end station latitude', \n                              'end station longitude', \n                              nyc1.index.hour],\n                     columns = 'type',\n                     aggfunc='count').reset_index()\n\nend['station'] = end['station']\/days\n\nend.columns = ['station_id', 'lat', 'lon', 'hour', 'count']\nend['fillColor'] = '#e64c4e'\nend.loc[end['count']<1, 'fillColor'] = '#586065'","648a84d2":"# Create the geojson with the right format to animate \nend_geojson = create_geojson_features(end)","d9a27085":"# Create the dual map with both directions animated\nfrom folium.plugins import DualMap\n\ndualmap = DualMap(location = [40.71958611647166, -74.0431174635887],\n                 tiles = 'cartodbpositron',\n                 zoom_start = 14)\n\nTimestampedGeoJson(start_geojson,\n                  period = 'PT1H',\n                  duration = 'PT1M',\n                  transition_time = 250,\n                  auto_play = True).add_to(dualmap.m1)\n\nTimestampedGeoJson(end_geojson,\n                  period = 'PT1H',\n                  duration = 'PT1M',\n                  transition_time = 250,\n                  auto_play = True).add_to(dualmap.m2)\n\ndualmap","4468d657":"# Get the stations with more interactions\ndf = nyc.pivot_table('tripduration', \n                     index = ['start station name', \n                              'end station name',],\n                     columns = ['type'],\n                     aggfunc='count').reset_index().sort_values(by='station', ascending=False)\ndf.head()","e33ad64b":"# Take the top stations as a mask to filter data afterwards\nmask1 = df[\"start station name\"].head(10)\nmask2 = df[\"end station name\"].head(10)\nmask = mask1.append(mask2)\nmask = mask.unique()\nmask","41b06c6c":"# Get the peak hours\nnyc['time_of_day'] = pd.cut(nyc.index.hour,\n                            [0,6,10,16,20,24],\n                            labels = ['am_valley', 'am_peak', 'mid_valley', 'pm_peak', 'pm_valley'], \n                            right=False)\n\nam = nyc.loc[nyc['time_of_day'] == 'am_peak', :]\npm = nyc.loc[nyc['time_of_day'] == 'pm_peak', :]","75ec941f":"# We'll take the station 'Grove St PATH and analyze it's commutes patterns \n# in the morning and the afternoon\n\nto_st_path = am.loc[(am['end station name'] == 'Grove St PATH') & (am['start station name'].isin(mask)), :]\nfrom_st_path = pm.loc[(pm['start station name'] == 'Grove St PATH') & (pm['end station name'].isin(mask)), :]\n\nto_st_path.head(1)","8cd77ff5":"to_st_path = to_st_path.pivot_table('tripduration',\n                                   index = ['start station name', \n                                            'start station latitude',\n                                            'start station longitude',\n                                            'end station name',\n                                            'end station latitude',\n                                            'end station longitude'],\n                                   columns = ['type'],\n                                   aggfunc='count').reset_index().sort_values(by='station', ascending=False)\n\nto_st_path","c11f2c87":"from_st_path = from_st_path.pivot_table('tripduration',\n                                   index = ['start station name', \n                                            'start station latitude',\n                                            'start station longitude',\n                                            'end station name',\n                                            'end station latitude',\n                                            'end station longitude'],\n                                   columns = ['type'],\n                                   aggfunc='count').reset_index().sort_values(by='station', ascending=False)\n\nfrom_st_path","38e86512":"# The weight scale will be from 1-10 \n# 365 --> 10\n# 124 --> 1\n\n# 365station\/10weight=124station\/1weight --> 1weight=124station*10weight\/365station\n# 265*10\/365= 7.26\n\n# The delay has to be higher for lower numbers\n# To\n# y=a*x + b --> x=628 --> y=100 --> 100=628*a + b --> b = 100 - 628*a --> b = \n# y=a*x + b --> 800=188*a + 100 - 628*a --> 700 = (188 - 628)*a = -440*a --> a=-700\/440 --> a = -2.9\n\n# From\n# y=a*x + b --> x=365 --> y=100 --> 100=365*a + b --> b = 100 - 365*a --> b = 1160\n# y=a*x + b --> 800=124*a + 100 - 365*a --> 700 = (124 - 365)*a = -241*a --> a=-700\/241 --> a = -2.9\n\nto_st_path['weight'] = to_st_path['station']*10\/(to_st_path['station'].max())\nfrom_st_path['weight'] = from_st_path['station']*10\/(from_st_path['station'].max())\n\na_to_st_path = (800-100)\/(to_st_path['station'].min() - to_st_path['station'].max())\nb_to_st_path = 100 - to_st_path['station'].max()*a_to_st_path\n\na_from_st_path = (800-100)\/(from_st_path['station'].min() - from_st_path['station'].max())\nb_from_st_path = 100 - from_st_path['station'].max()*a_from_st_path\n\nto_st_path['delay'] = a_to_st_path*to_st_path['station'] + b_to_st_path\nfrom_st_path['delay'] = a_from_st_path*from_st_path['station'] + b_from_st_path","5f06d208":"from folium.plugins import DualMap\n\ndualmap = DualMap(location = [to_st_path.loc[0, 'end station latitude'], to_st_path.loc[0, 'end station longitude']],\n                         tiles='cartodbpositron',\n                         zoom_start=15)\n\nto_st_path.apply(lambda row: folium.plugins.AntPath([(row['start station latitude'],\n                                                      row['start station longitude']),\n                                                     (row['end station latitude'],\n                                                      row['end station longitude'])],\n                                                    color='blue',\n                                                    weight = row['weight'],\n                                                    delay = row['delay']).add_to(dualmap.m1),\n                   axis=1)\n\nfrom_st_path.apply(lambda row: folium.plugins.AntPath([(row['start station latitude'],\n                                                        row['start station longitude']),\n                                                       (row['end station latitude'],\n                                                        row['end station longitude'])],\n                                                      color='blue',\n                                                      weight = row['weight'],\n                                                      delay = row['delay']).add_to(dualmap.m2),\n                   axis=1)\n\ndualmap","ad8ca41a":"# Create the list of lists needed to use the plugin\n# Check the documentation for more details\ndf_hour_list = []\nhours = pd.Series(nyc.index.hour.unique().sort_values())\n\ndef create_list(hour):\n    df_hour_list.append(nyc.loc[nyc.index.hour == hour,\n                                ['start station latitude',\n                                 'start station longitude']].\n                        groupby(['start station latitude', \n                                 'start station longitude']).sum().reset_index().values.tolist())\n    \nhours.apply(create_list);","b2f19b6e":"# This map shows an animated view of the stops with their radius depending on the total amount of trips\n# and a dynamic view of the events that take place as a heatmap\n\nfrom folium.plugins import HeatMapWithTime\n\n# Add trip events to the map\nmap_time = folium.Map(location=[40.71958611647166, -74.0431174635887], tiles=\"CartoDB Positron\", zoom_start=14)\n\nHeatMapWithTime(df_hour_list, \n                auto_play=True, \n                max_opacity=0.5, \n                gradient = {0.2: '#FBD973', 0.4: '#fa782f', 0.75: '#F16578', 1: '#782890'}).add_to(map_time)\n\nmap_time","6dceaa36":"# DualMap","549822d7":"# Heatmap","ee62fe8c":"# AntPath","1eed9353":"**Heads up:** This notebook has the code of the article published in LinkedIn: \nIf you want to get a deeper explanation of each cell, I recommend you to read the article [here](https:\/\/medium.com\/p\/visualizing-nyc-bike-data-on-interactive-and-animated-maps-with-folium-plugins-c2d7645cd19b?source=email-9cb2a72cad71--writer.postDistributed&sk=d2237ce96bd8a490ac4e3dc7029fd8bb). \n\nThe code is also available for download on GitHub [here](https:\/\/github.com\/Bondify\/Python\/blob\/master\/Visualizing%20NYC%20Bike%20Data%20on%20interactive%20and%20animated%20maps%20with%20Folium%20plugins.ipynb).","c548d1d5":"# TimeStampedGeoJson"}}