{"cell_type":{"18ef76ef":"code","518216cb":"code","7bf1a987":"code","d4abb481":"code","47fc4fe0":"code","ab750c02":"code","4e7ea723":"code","8d27e6b0":"code","bc1653c0":"code","5aa9b96f":"code","68526b38":"code","0dbbf939":"code","3d5caf15":"code","18661243":"code","c82eaeeb":"code","2385e0e5":"code","785fec1c":"code","432c06c1":"code","fefa9d94":"code","6fed06c5":"code","85b1c9a4":"code","57ea1005":"code","034164f6":"markdown"},"source":{"18ef76ef":"from types import SimpleNamespace\nfrom collections import Counter\nimport os\nimport re\nimport pathlib\nimport array\nimport pickle\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport pandas as pd\nimport math","518216cb":"DATASET_VERSION = 'ca-100'\nCOMPETITION_ROOT = '..\/input\/vectors2'\nDATASET_ROOT = f'..\/input\/text-preprocessing\/data\/{DATASET_VERSION}'\nWORKING_ROOT = f'data\/{DATASET_VERSION}'\nDATASET_PREFIX = 'ca.wiki'","7bf1a987":"params = SimpleNamespace(\n    embedding_dim = 256,\n    window_size = 5,\n    batch_size = 2048,\n    epochs = 4,\n    preprocessed = f'{DATASET_ROOT}\/{DATASET_PREFIX}',\n    working = f'{WORKING_ROOT}\/{DATASET_PREFIX}',\n    modelname = f'{WORKING_ROOT}\/{DATASET_VERSION}.pt',\n    train = True\n)","d4abb481":"try:\n    from google.colab import drive\n    drive.mount('\/content\/drive')\n    pathlib.Path('\/content\/drive\/My Drive\/POE\/vectors').mkdir(parents=True, exist_ok=True)\n    os.chdir('\/content\/drive\/My Drive\/POE\/vectors')\nexcept:\n    pass","47fc4fe0":"class Vocabulary(object):\n    def __init__(self, pad_token='<pad>', unk_token='<unk>', eos_token='<eos>'):\n        self.token2idx = {}\n        self.idx2token = []\n        self.pad_token = pad_token\n        self.unk_token = unk_token\n        self.eos_token = eos_token\n        if pad_token is not None:\n            self.pad_index = self.add_token(pad_token)\n        if unk_token is not None:\n            self.unk_index = self.add_token(unk_token)\n        if eos_token is not None:\n            self.eos_index = self.add_token(eos_token)\n\n    def add_token(self, token):\n        if token not in self.token2idx:\n            self.idx2token.append(token)\n            self.token2idx[token] = len(self.idx2token) - 1\n        return self.token2idx[token]\n\n    def get_index(self, token):\n        if isinstance(token, str):\n            return self.token2idx.get(token, self.unk_index)\n        else:\n            return [self.token2idx.get(t, self.unk_index) for t in token]\n\n    def __len__(self):\n        return len(self.idx2token)\n\n    def save(self, filename):\n        with open(filename, 'wb') as f:\n            pickle.dump(self.__dict__, f)\n\n    def load(self, filename):\n        with open(filename, 'rb') as f:\n            self.__dict__.update(pickle.load(f))","ab750c02":"def batch_generator(idata, target, batch_size, shuffle=True):\n    nsamples = len(idata)\n    if shuffle:\n        perm = np.random.permutation(nsamples)\n    else:\n        perm = range(nsamples)\n\n    for i in range(0, nsamples, batch_size):\n        batch_idx = perm[i:i+batch_size]\n        if target is not None:\n            yield idata[batch_idx], target[batch_idx]\n        else:\n            yield idata[batch_idx], None","4e7ea723":"def load_preprocessed_dataset(prefix):\n    # Try loading precomputed vocabulary and preprocessed data files\n    token_vocab = Vocabulary()\n    token_vocab.load(f'{prefix}.vocab')\n    data = []\n    for part in ['train', 'valid', 'test']:\n        with np.load(f'{prefix}.{part}.npz') as set_data:\n            idata, target = set_data['idata'], set_data['target']\n            data.append((idata, target))\n            print(f'Number of samples ({part}): {len(target)}')\n    print(\"Using precomputed vocabulary and data files\")\n    print(f'Vocabulary size: {len(token_vocab)}')\n    return token_vocab, data","8d27e6b0":"def train(model, criterion, optimizer, idata, target, batch_size, device, log=False):\n    model.train()\n    total_loss = 0\n    ncorrect = 0\n    ntokens = 0\n    niterations = 0\n    for X, y in batch_generator(idata, target, batch_size, shuffle=True):\n        # Get input and target sequences from batch\n        X = torch.tensor(X, dtype=torch.long, device=device)\n        y = torch.tensor(y, dtype=torch.long, device=device)\n\n        model.zero_grad()\n        output = model(X)\n        loss = criterion(output, y)\n        loss.backward()\n        optimizer.step()\n        # Training statistics\n        total_loss += loss.item()\n        ncorrect += (torch.max(output, 1)[1] == y).sum().item()\n        ntokens += y.numel()\n        niterations += 1\n        if niterations == 200 or niterations == 500 or niterations % 1000 == 0:\n            print(f'Train: wpb={ntokens\/\/niterations}, num_updates={niterations}, accuracy={100*ncorrect\/ntokens:.1f}, loss={total_loss\/ntokens:.2f}')\n\n    total_loss = total_loss \/ ntokens\n    accuracy = 100 * ncorrect \/ ntokens\n    if log:\n        print(f'Train: wpb={ntokens\/\/niterations}, num_updates={niterations}, accuracy={accuracy:.1f}, loss={total_loss:.2f}')\n    return accuracy, total_loss","bc1653c0":"def validate(model, criterion, idata, target, batch_size, device):\n    model.eval()\n    total_loss = 0\n    ncorrect = 0\n    ntokens = 0\n    niterations = 0\n    y_pred = []\n    with torch.no_grad():\n        for X, y in batch_generator(idata, target, batch_size, shuffle=False):\n            # Get input and target sequences from batch\n            X = torch.tensor(X, dtype=torch.long, device=device)\n            output = model(X)\n            if target is not None:\n                y = torch.tensor(y, dtype=torch.long, device=device)\n                loss = criterion(output, y)\n                total_loss += loss.item()\n                ncorrect += (torch.max(output, 1)[1] == y).sum().item()\n                ntokens += y.numel()\n                niterations += 1\n            else:\n                pred = torch.max(output, 1)[1].detach().to('cpu').numpy()\n                y_pred.append(pred)\n\n    if target is not None:\n        total_loss = total_loss \/ ntokens\n        accuracy = 100 * ncorrect \/ ntokens\n        return accuracy, total_loss\n    else:\n        return np.concatenate(y_pred)","5aa9b96f":"# Create working dir\npathlib.Path(WORKING_ROOT).mkdir(parents=True, exist_ok=True)","68526b38":"# Select device\nif torch.cuda.is_available():\n    device = torch.device('cuda')\nelse:\n    device = torch.device('cpu')\n    print(\"WARNING: Training without GPU can be very slow!\")","0dbbf939":"vocab, data = load_preprocessed_dataset(params.preprocessed)","3d5caf15":"# 'El Periodico' validation dataset\nvalid_x_df = pd.read_csv(f'{COMPETITION_ROOT}\/x_valid.csv')\ntokens = valid_x_df.columns[1:]\nvalid_x = valid_x_df[tokens].apply(vocab.get_index).to_numpy(dtype='int32')\nvalid_y_df = pd.read_csv(f'{COMPETITION_ROOT}\/y_valid.csv')\nvalid_y = valid_y_df['token'].apply(vocab.get_index).to_numpy(dtype='int32')","18661243":"def attention(query, key, value, mask=None, dropout=None):\n    \"Compute 'Scaled Dot Product Attention'\"\n    d_k = query.size(-1)\n    scores = torch.matmul(query, key.transpose(-2, -1)) \\\n             \/ math.sqrt(d_k)\n    if mask is not None:\n        scores = scores.masked_fill(mask == 0, -Inf)\n    p_attn = F.softmax(scores, dim = -1)\n    if dropout is not None:\n        p_attn = dropout(p_attn)\n    return torch.matmul(p_attn, value), p_attn","c82eaeeb":"class SelfAttention(nn.Module):\n    def __init__(self, embed_dim, bias=True):\n        super().__init__()\n        self.k_proj = nn.Linear(embed_dim, embed_dim, bias=bias)\n        self.v_proj = nn.Linear(embed_dim, embed_dim, bias=bias)\n        self.q_proj = nn.Linear(embed_dim, embed_dim, bias=bias)\n        self.out_proj = nn.Linear(embed_dim, embed_dim, bias=bias)\n        self.reset_parameters()\n\n    def reset_parameters(self):\n        # Empirically observed the convergence to be much better with the scaled initialization\n        nn.init.xavier_uniform_(self.k_proj.weight, gain=1 \/ math.sqrt(2))\n        nn.init.xavier_uniform_(self.v_proj.weight, gain=1 \/ math.sqrt(2))\n        nn.init.xavier_uniform_(self.q_proj.weight, gain=1 \/ math.sqrt(2))\n        nn.init.xavier_uniform_(self.out_proj.weight)\n        if self.out_proj.bias is not None:\n            nn.init.constant_(self.out_proj.bias, 0.)\n\n    # B = Batch size\n    # W = Number of context words (left + right)\n    # E = embedding_dim\n    def forward(self, x):\n        # x shape is (B, W, E)\n        q = self.q_proj(x)\n        # q shape is (B, W, E)\n        k = self.k_proj(x)\n        # k shape is (B, W, E)\n        v = self.v_proj(x)\n        # k shape is (B, W, E)\n        y, _ = attention(q, k, v)\n        # y shape is (B, W, E)\n        y = self.out_proj(y)\n        # y shape is (B, W, E)\n        return y","2385e0e5":"class TransformerLayer(nn.Module):\n    def __init__(self, d_model, dim_feedforward=512, dropout=0.1, activation=\"relu\"):\n        super().__init__()\n        self.self_attn = SelfAttention(d_model)\n        # Implementation of Feedforward model\n        self.linear1 = nn.Linear(d_model, dim_feedforward)\n        self.dropout = nn.Dropout(dropout)\n        self.linear2 = nn.Linear(dim_feedforward, d_model)\n        self.norm1 = nn.LayerNorm(d_model)\n        self.norm2 = nn.LayerNorm(d_model)\n        self.dropout1 = nn.Dropout(dropout)\n        self.dropout2 = nn.Dropout(dropout)\n\n    def forward(self, src):\n        src2 = self.self_attn(src)\n        src = src + self.dropout1(src2)\n        src = self.norm1(src)\n        src2 = self.linear2(self.dropout(F.relu(self.linear1(src))))\n        src = src + self.dropout2(src2)\n        src = self.norm2(src)\n        return src","785fec1c":"class Predictor(nn.Module):\n    def __init__(self, num_embeddings, embedding_dim, context_words=4):\n        super().__init__()\n        self.emb = nn.Embedding(num_embeddings, embedding_dim, padding_idx=0)\n        self.lin = nn.Linear(embedding_dim, num_embeddings, bias=False)\n        self.att = TransformerLayer(embedding_dim)\n        self.position_embedding = nn.Parameter(torch.Tensor(context_words, embedding_dim))\n        nn.init.xavier_uniform_(self.position_embedding)\n\n    # B = Batch size\n    # W = Number of context words (left + right)\n    # E = embedding_dim\n    # V = num_embeddings (number of words)\n    def forward(self, input):\n        # input shape is (B, W)\n        e = self.emb(input)\n        # e shape is (B, W, E)\n        u = e + self.position_embedding\n        # u shape is (B, W, E)\n        v = self.att(u)\n        # v shape is (B, W, E)\n        x = v.sum(dim=1)\n        # x shape is (B, E)\n        y = self.lin(x)\n        # y shape is (B, V)\n        return y","432c06c1":"model = Predictor(len(vocab), params.embedding_dim).to(device)","fefa9d94":"print(model)\nfor name, param in model.named_parameters():\n    print(f'{name:20} {param.numel()} {list(param.shape)}')\nprint(f'TOTAL                {sum(p.numel() for p in model.parameters())}')","6fed06c5":"optimizer = torch.optim.Adam(model.parameters())\ncriterion = nn.CrossEntropyLoss(reduction='sum')\n\ntrain_accuracy = []\nwiki_accuracy = []\nvalid_accuracy = []\nfor epoch in range(params.epochs):\n    acc, loss = train(model, criterion, optimizer, data[0][0], data[0][1], params.batch_size, device, log=True)\n    train_accuracy.append(acc)\n    print(f'| epoch {epoch:03d} | train accuracy={acc:.1f}%, train loss={loss:.2f}')\n    acc, loss = validate(model, criterion, data[1][0], data[1][1], params.batch_size, device)\n    wiki_accuracy.append(acc)\n    print(f'| epoch {epoch:03d} | valid accuracy={acc:.1f}%, valid loss={loss:.2f} (wikipedia)')\n    acc, loss = validate(model, criterion, valid_x, valid_y, params.batch_size, device)\n    valid_accuracy.append(acc)\n    print(f'| epoch {epoch:03d} | valid accuracy={acc:.1f}%, valid loss={loss:.2f} (El Peri\u00f3dico)')\n\n# Save model\ntorch.save(model.state_dict(), params.modelname)","85b1c9a4":"# 'El Periodico' test dataset\nvalid_x_df = pd.read_csv(f'{COMPETITION_ROOT}\/x_test.csv')\ntest_x = valid_x_df[tokens].apply(vocab.get_index).to_numpy(dtype='int32')\ny_pred = validate(model, None, test_x, None, params.batch_size, device)\ny_token = [vocab.idx2token[index] for index in y_pred]","57ea1005":"submission = pd.DataFrame({'id':valid_x_df['id'], 'token': y_token}, columns=['id', 'token'])\nprint(submission.head())\nsubmission.to_csv('submission.csv', index=False)","034164f6":"The **xavier_normal_()** initialization function fills the input Tensor with values according to the method described in **Understanding the difficulty of training deep feedforward neural networks** - Glorot, X. & Bengio, Y. (2010), using a uniform distribution. The resulting tensor will have values sampled from a uniform distribution \\\\(\\mathcal{U}(-a, a)\\\\) where\n\n\\\\(    a = \\text{gain} \\times \\sqrt{\\frac{6}{\\text{fan\\_in} + \\text{fan\\_out}}}\\\\)\n\nAlso known as Glorot initialization."}}