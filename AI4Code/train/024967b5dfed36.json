{"cell_type":{"cb74fe04":"code","912c2881":"code","228d262d":"code","77f4d064":"code","dcfb404a":"code","ef67bd04":"code","c5fd519b":"code","8a1fd1d6":"code","6b3ec499":"code","457c0610":"code","82bcba68":"code","db2561fc":"code","975ed2bb":"code","08919b0a":"code","4d825038":"code","e040fa42":"code","b58a4938":"code","3a51d818":"code","38c0ff2d":"code","ca4a7e6b":"code","d03f04fc":"code","1648b148":"code","d852d584":"markdown","0ab2c022":"markdown","0276ff40":"markdown","8f71b11f":"markdown","fbb32de5":"markdown","a9f97240":"markdown"},"source":{"cb74fe04":"!pip install git+https:\/\/github.com\/darecophoenixx\/wordroid.sblo.jp","912c2881":"%matplotlib inline\nfrom IPython.display import SVG\nfrom tensorflow.keras.utils import model_to_dot","228d262d":"import numpy as np\nimport pandas as pd\nfrom sklearn import datasets\nfrom sklearn.metrics import f1_score, classification_report, confusion_matrix\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tensorflow.keras.utils import to_categorical","77f4d064":"from keras_ex.gkernel import GaussianKernel, GaussianKernel2, GaussianKernel3\n\nfrom tensorflow.keras.layers import Input, Dense\nfrom tensorflow.keras.models import Model","dcfb404a":"n_samples = 1500\n\nX, y = datasets.make_moons(n_samples=n_samples, noise=0.08, random_state=0)\ndf = pd.DataFrame(X)\ndf.columns = [\"col1\", \"col2\"]\ndf['cls'] = y\n\nsns.lmplot(x=\"col1\", y=\"col2\", hue=\"cls\", data=df, fit_reg=False, height=8)","ef67bd04":"np.random.seed(0)\nnum_lm = 20\n\nr0 = np.random.rand(num_lm) * (X[:,0].max() - X[:,0].min()) + X[:,0].min()\nr1 = np.random.rand(num_lm) * (X[:,1].max() - X[:,1].min()) + X[:,1].min()\ninit_wgt = np.c_[r0, r1]","c5fd519b":"# np.random.seed(0)\n# num_lm = 20\n# init_wgt = X[np.random.choice(range(X.shape[0]), size=num_lm, replace=False)] + \\\n#            np.random.normal(scale=0.01, size=num_lm*2).reshape(num_lm, 2)\n# init_wgt.shape","8a1fd1d6":"np.random.seed(0)\nnum_lm2 = 5\n\ndef make_modelz():\n    inp = Input(shape=(2,), name='inp')\n    oup = inp\n    \n    oup_gk1 = GaussianKernel3(num_lm, 2, name='gkernel1', weights=[init_wgt, np.log(np.array([1.\/(2.*2*0.1)]))])(oup)\n    model_gk1 = Model(inp, oup_gk1)\n    \n    oup = Dense(1, activation='sigmoid')(oup_gk1)\n    \n    model = Model(inp, oup)\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    \n    return {\n        'model': model,\n        'model_gk1': model_gk1,\n    }\n\nmodels = make_modelz()\nmodel = models['model']\nmodel.summary()","6b3ec499":"wgt = model.get_layer('gkernel1').get_weights()[0]\ndf = pd.DataFrame(np.vstack([X, wgt]))\ndf.columns = [\"col1\", \"col2\"]\ndf['cls'] = [str(ee) for ee in y] + ['Init Landmark']*wgt.shape[0]\nsns.lmplot(x=\"col1\", y=\"col2\", hue=\"cls\", data=df, fit_reg=False, height=8)","457c0610":"model.fit(X, y, verbose=0,\n          batch_size=32,\n          epochs=150)","82bcba68":"wgt = model.get_layer('gkernel1').get_weights()[0]\nprint('trained gamma >>>', np.exp(model.get_layer('gkernel1').get_weights()[1]))\ndf = pd.DataFrame(np.vstack([X, wgt]))\ndf.columns = [\"col1\", \"col2\"]\ndf['cls'] = [str(ee) for ee in y] + ['Landmark trained']*wgt.shape[0]\nsns.lmplot(x=\"col1\", y=\"col2\", hue=\"cls\", data=df, fit_reg=False, height=8)","db2561fc":"y_pred = model.predict(X)\n\nprint(classification_report(y, 0.5<y_pred))\nconfusion_matrix(y, 0.5<y_pred)","975ed2bb":"from matplotlib.colors import ListedColormap\n\nh = .05\nx_min, x_max = X[:, 0].min() - .1, X[:, 0].max() + .1\ny_min, y_max = X[:, 1].min() - .1, X[:, 1].max() + .1\n# x_min, x_max = -2, 3\n# y_min, y_max = -1.5, 2.5\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h),\n                     np.arange(y_min, y_max, h))\n\ny_pred = model.predict(np.c_[xx.ravel(order='C'), yy.ravel(order='C')], batch_size=1024)\nprint(y_pred.shape)\n\ncm = plt.cm.coolwarm\ncm_bright = ListedColormap(['#FF0000', '#0000FF'])\ny_pred = y_pred.reshape(xx.shape)\nprint(y_pred.shape)\nplt.figure(figsize=(10, 8))\n#plt.imshow(y_pred)\nplt.contourf(xx, yy, y_pred, 100, cmap=cm, alpha=1)\n#levels = (0, 0.25, 0.5, 0.75, 1)\n#plt.contourf(xx, yy, y_pred, levels=levels, cmap=cm, alpha=1)\nplt.scatter(X[:,0], X[:,1], c=y, cmap=cm_bright, edgecolors='k')","08919b0a":"digits = datasets.load_digits()\nX, y = digits.data, digits.target","4d825038":"X = X.reshape((X.shape[0], -1))","e040fa42":"X_sc = X \/ 16.0\nX_sc.shape","b58a4938":"y_cat = to_categorical(y)","3a51d818":"'''\nchose landmarks from sample\npick 10 data each digit\n'''\nnp.random.seed(0)\nnum_lm0 = 10\nnum_lm = num_lm0 * 10\ninit_list = []\nfor ii in range(10):\n    init_wgt0 = X_sc[y==ii]\n    init_wgt0 = init_wgt0[np.random.choice(range(init_wgt0.shape[0]), size=num_lm0, replace=False)] + \\\n                np.random.normal(scale=0.01, size=num_lm0*64).reshape(num_lm0, 64)\n    init_list.append(init_wgt0)\ninit_wgt = np.vstack(init_list)\ninit_wgt = init_wgt[np.random.permutation(range(init_wgt.shape[0]))]\ninit_wgt.shape","38c0ff2d":"plt.imshow(X[0].reshape((8,8)))","ca4a7e6b":"plt.imshow(init_wgt[0].reshape((8,8)))","d03f04fc":"np.random.seed(0)\n\ninp = Input(shape=(64,), name='inp')\noup = GaussianKernel3(num_lm, 64,\n                      weights=[init_wgt, np.log(np.array([1.\/(2.*64*0.1)]))],\n                      name='gkernel1')(inp)\noup = Dense(10, activation='softmax')(oup)\nmodel = Model(inp, oup)\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.summary()","1648b148":"model.fit(X_sc, y_cat, verbose=0,\n          batch_size=32,\n          epochs=150)","d852d584":"# Moon Data\n---","0ab2c022":"## Train","0276ff40":"# scikit-learn digits\n---","8f71b11f":"[Welcome to GaussianKernel layer page! (keras RBF layer)](<https:\/\/github.com\/darecophoenixx\/wordroid.sblo.jp\/wiki\/GaussianKernel-layer-(keras-RBF-layer)>)","fbb32de5":"## Create Model","a9f97240":"## plot sample data and initial landmarks"}}