{"cell_type":{"ea54abfd":"code","a1ad16da":"code","400b91ab":"code","41ebfcf5":"code","56ac92ef":"code","4034d155":"code","74f86eb2":"code","865ac8ff":"code","758810e7":"code","b1afebc0":"code","54d32e7c":"code","f7bde0d5":"code","364348eb":"code","a657ac26":"code","1952542c":"code","c1384612":"code","d12c2cfa":"code","495a0d5c":"code","a311d41f":"code","7be583ff":"code","d0a347dc":"code","fb74ef1e":"code","e3497328":"code","71bf35ab":"code","a67f5368":"code","afde73cc":"code","446e2b9e":"markdown","8efb3c8b":"markdown","0df25701":"markdown","6d44a5f0":"markdown","9b99abd1":"markdown","c0876b36":"markdown","32cfc120":"markdown","0007d048":"markdown","a380e180":"markdown","45e4c63c":"markdown","d9e66b40":"markdown","779496f4":"markdown","9e811f60":"markdown","a9429c42":"markdown"},"source":{"ea54abfd":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","a1ad16da":"df = pd.read_csv('..\/input\/company-bankruptcy-prediction\/data.csv')","400b91ab":"df.head()","41ebfcf5":"df.info()","56ac92ef":"df.isnull().sum().sum() # Check null values","4034d155":"df.describe().T","74f86eb2":"over_max_count = 0\nover_max_cols = []\nunder_min_count = 0\nunder_min_cols = []\nfor col in df.columns:\n    max_value = max(df[col])\n    min_value = min(df[col])\n    \n    if max_value > 1:\n        over_max_count += 1\n        over_max_cols.append(col)\n    if min_value < 0:\n        under_min_count += 1\n        under_min_cols.append(col)\n        \n    print('column : {}'.format(col))\n    print('max : {}'.format(max_value))\n    print('min : {}'.format(min_value))\n    print('----------------------------------------------------------')\nprint('********************')\nprint('********************')\nprint('********************')\nprint('over max count : ', over_max_count)\nprint('under min count : ', under_min_count)","865ac8ff":"over_max_cols","758810e7":"len(over_max_cols)","b1afebc0":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\ndf[over_max_cols] = scaler.fit_transform(df[over_max_cols])","54d32e7c":"df[over_max_cols]","f7bde0d5":"# test\ndf[over_max_cols[0]].max()","364348eb":"for col in df[over_max_cols]:\n        \n    print('column : {}'.format(col))\n    print('max : {}'.format(max_value))\n    print('min : {}'.format(min_value))\n    print('----------------------------------------------------------')\n","a657ac26":"df","1952542c":"X = df.drop('Bankrupt?', axis=1)","c1384612":"y = df['Bankrupt?']","d12c2cfa":"X.shape, y.shape","495a0d5c":"from sklearn.model_selection import train_test_split","a311d41f":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)","7be583ff":"print(X_train.shape, y_train.shape, X_test.shape, y_test.shape)","d0a347dc":"X_train","fb74ef1e":"y_train","e3497328":"from sklearn.neighbors import KNeighborsClassifier as KNN","71bf35ab":"# check over\/underfitting\ntrain_scores = []\ntest_scores = []\nfor i in range(1, 10): # n_neighbors = 1~9\n    model = KNN(n_neighbors=i)\n    model.fit(X_train,y_train)\n    \n    train_scores.append(model.score(X_train,y_train))\n    test_scores.append(model.score(X_test,y_test))","a67f5368":"plt.plot(range(1,10), train_scores, label='train_accuracy')\nplt.plot(range(1,10), test_scores, label='test_accuracy')\nplt.xlabel('n_neighbors')\nplt.ylabel('Accuracy')\nplt.legend();","afde73cc":"model = KNN(n_neighbors=4)\nmodel.fit(X_train, y_train)\nprint('Final - Accuracy : ', model.score(X_test, y_test))","446e2b9e":"**We have to Min_Max_Scale to 24 cols equally**","8efb3c8b":"> sklearn.neighbors.KNeighborsClassifier([scikit-learn 0.24.1 documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.KNeighborsClassifier.html))","0df25701":"**I Think all valued are Min-Max-Scaled already. Let's check them**","6d44a5f0":"### Step 1. Data Description","9b99abd1":"**Well done**","c0876b36":"> sklearn.preprocessing.MinMaxScaler([scikit-learn 0.24.1 documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.MinMaxScaler.html))","32cfc120":"### Step 3. Machine Learning Modeling and Prediction","0007d048":"**I Think 4 seems to be suitable as a N-Neighbors**","a380e180":"**All Values are numeric, continuous variable. Then Easy way, Let's Try KNN Algorithm.**","45e4c63c":"### Step 2. Data Preprocessing","d9e66b40":"---\n### Kernel Index\n- Step 1. Data Description\n- Step 2. Data Preprocessing\n- Step 3. Machine Learning Modeling and Prediction","779496f4":"Previously, We have to split data to build generalized model","9e811f60":"# Bankruptcy Prediction with KNN - For Machine Learning Newbie:)\n\n---\n## Info \n### Context\nThe data were collected from the Taiwan Economic Journal for the years 1999 to 2009. Company bankruptcy was defined based on the business regulations of the Taiwan Stock Exchange.\n\n### Attribute Information\n\n**Y = Output feature, X = Input features)**\n\n- Y - Bankrupt?: Class label\n- X1 - ROA(C) before interest and depreciation before interest: Return On Total Assets(C)\n- X2 - ROA(A) before interest and % after tax: Return On Total Assets(A)\n- X3 - ROA(B) before interest and depreciation after tax: Return On Total Assets(B)\n- X4 - Operating Gross Margin: Gross Profit\/Net Sales\n- X5 - Realized Sales Gross Margin: Realized Gross Profit\/Net Sales\n- X6 - Operating Profit Rate: Operating Income\/Net Sales\n- X7 - Pre-tax net Interest Rate: Pre-Tax Income\/Net Sales\n- X8 - After-tax net Interest Rate: Net Income\/Net Sales\n- X9 - Non-industry income and expenditure\/revenue: Net Non-operating Income Ratio\n- X10 - Continuous interest rate (after tax): Net Income-Exclude Disposal Gain or Loss\/Net Sales\n- X11 - Operating Expense Rate: Operating Expenses\/Net Sales\n- X12 - Research and development expense rate: (Research and Development Expenses)\/Net Sales\n- X13 - Cash flow rate: Cash Flow from Operating\/Current Liabilities\n- X14 - Interest-bearing debt interest rate: Interest-bearing Debt\/Equity\n- X15 - Tax rate (A): Effective Tax Rate\n- X16 - Net Value Per Share (B): Book Value Per Share(B)\n- X17 - Net Value Per Share (A): Book Value Per Share(A)\n- X18 - Net Value Per Share (C): Book Value Per Share(C)\n- X19 - Persistent EPS in the Last Four Seasons: EPS-Net Income\n- X20 - Cash Flow Per Share\n- X21 - Revenue Per Share (Yuan \u00a5): Sales Per Share\n- X22 - Operating Profit Per Share (Yuan \u00a5): Operating Income Per Share\n- X23 - Per Share Net profit before tax (Yuan \u00a5): Pretax Income Per Share\n- X24 - Realized Sales Gross Profit Growth Rate\n- X25 - Operating Profit Growth Rate: Operating Income Growth\n- X26 - After-tax Net Profit Growth Rate: Net Income Growth\n- X27 - Regular Net Profit Growth Rate: Continuing Operating Income after Tax Growth\n- X28 - Continuous Net Profit Growth Rate: Net Income-Excluding Disposal Gain or Loss Growth\n- X29 - Total Asset Growth Rate: Total Asset Growth\n- X30 - Net Value Growth Rate: Total Equity Growth\n- X31 - Total Asset Return Growth Rate Ratio: Return on Total Asset Growth\n- X32 - Cash Reinvestment %: Cash Reinvestment Ratio\n- X33 - Current Ratio\n- X34 - Quick Ratio: Acid Test\n- X35 - Interest Expense Ratio: Interest Expenses\/Total Revenue\n- X36 - Total debt\/Total net worth: Total Liability\/Equity Ratio\n- X37 - Debt ratio %: Liability\/Total Assets\n- X38 - Net worth\/Assets: Equity\/Total Assets\n- X39 - Long-term fund suitability ratio (A): (Long-term Liability+Equity)\/Fixed Assets\n- X40 - Borrowing dependency: Cost of Interest-bearing Debt\n- X41 - Contingent liabilities\/Net worth: Contingent Liability\/Equity\n- X42 - Operating profit\/Paid-in capital: Operating Income\/Capital\n- X43 - Net profit before tax\/Paid-in capital: Pretax Income\/Capital\n- X44 - Inventory and accounts receivable\/Net value: (Inventory+Accounts Receivables)\/Equity\n- X45 - Total Asset Turnover\n- X46 - Accounts Receivable Turnover\n- X47 - Average Collection Days: Days Receivable Outstanding\n- X48 - Inventory Turnover Rate (times)\n- X49 - Fixed Assets Turnover Frequency\n- X50 - Net Worth Turnover Rate (times): Equity Turnover\n- X51 - Revenue per person: Sales Per Employee\n- X52 - Operating profit per person: Operation Income Per Employee\n- X53 - Allocation rate per person: Fixed Assets Per Employee\n- X54 - Working Capital to Total Assets\n- X55 - Quick Assets\/Total Assets\n- X56 - Current Assets\/Total Assets\n- X57 - Cash\/Total Assets\n- X58 - Quick Assets\/Current Liability\n- X59 - Cash\/Current Liability\n- X60 - Current Liability to Assets\n- X61 - Operating Funds to Liability\n- X62 - Inventory\/Working Capital\n- X63 - Inventory\/Current Liability\n- X64 - Current Liabilities\/Liability\n- X65 - Working Capital\/Equity\n- X66 - Current Liabilities\/Equity\n- X67 - Long-term Liability to Current Assets\n- X68 - Retained Earnings to Total Assets\n- X69 - Total income\/Total expense\n- X70 - Total expense\/Assets\n- X71 - Current Asset Turnover Rate: Current Assets to Sales\n- X72 - Quick Asset Turnover Rate: Quick Assets to Sales\n- X73 - Working capitcal Turnover Rate: Working Capital to Sales\n- X74 - Cash Turnover Rate: Cash to Sales\n- X75 - Cash Flow to Sales\n- X76 - Fixed Assets to Assets\n- X77 - Current Liability to Liability\n- X78 - Current Liability to Equity\n- X79 - Equity to Long-term Liability\n- X80 - Cash Flow to Total Assets\n- X81 - Cash Flow to Liability\n- X82 - CFO to Assets\n- X83 - Cash Flow to Equity\n- X84 - Current Liability to Current Assets\n- X85 - Liability-Assets Flag: 1 if Total Liability exceeds Total Assets, 0 otherwise\n- X86 - Net Income to Total Assets\n- X87 - Total assets to GNP price\n- X88 - No-credit Interval\n- X89 - Gross Profit to Sales\n- X90 - Net Income to Stockholder's Equity\n- X91 - Liability to Equity\n- X92 - Degree of Financial Leverage (DFL)\n- X93 - Interest Coverage Ratio (Interest expense to EBIT)\n- X94 - Net Income Flag: 1 if Net Income is Negative for the last two years, 0 otherwise\n- X95 - Equity to Liability\n\n","a9429c42":"Check index (shuffle, X-y match)"}}