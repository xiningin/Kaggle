{"cell_type":{"1d509f32":"code","68c9333b":"code","c3d6bc49":"code","2867ca92":"code","7e7b53d4":"code","19991d07":"code","eb8c2e6c":"code","bccf74b9":"code","88d5989d":"code","5f58ea33":"code","6f9ea764":"code","45a67815":"markdown","e5859e39":"markdown","3f65b45c":"markdown","7b874dfa":"markdown","80cf4432":"markdown","847f03b6":"markdown"},"source":{"1d509f32":"import numpy as np\nimport pandas as pd\npd.set_option('max_columns', None)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso","68c9333b":"data = pd.read_csv('..\/input\/spctornado\/Tornadoes_SPC_1950to2015.csv')","c3d6bc49":"data","2867ca92":"data.info()","7e7b53d4":"def onehot_encode(df, column):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=column)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","19991d07":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop date column (redundant)\n    df = df.drop('date', axis=1)\n    \n    # Drop id columns\n    df = df.drop(['om', 'stn'], axis=1)\n    \n    # Drop fc column (irrelevant)\n    df = df.drop('fc', axis=1)\n    \n    # Extract time features\n    df['time'] = pd.to_datetime(df['time'])\n    df['hour'] = df['time'].apply(lambda x: x.hour)\n    df['minute'] = df['time'].apply(lambda x: x.minute)\n    df = df.drop('time', axis=1)\n    \n    # One-hot encode the nominal features\n    for column in ['tz', 'st', 'stf']:\n        df = onehot_encode(df, column=column)\n    \n    # Split df into X and y\n    y = df['mag']\n    X = df.drop('mag', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","eb8c2e6c":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","bccf74b9":"X_train","88d5989d":"y_train","5f58ea33":"models = {\n    \"    Linear Regression\": LinearRegression(),\n    \"Ridge (L2) Regression\": Ridge(),\n    \"Lasso (L1) Regression\": Lasso()\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")","6f9ea764":"for name, model in models.items():\n    print(name + \" R^2 Score: {:.5f}\".format(model.score(X_test, y_test)))","45a67815":"# Results","e5859e39":"# Preprocessing","3f65b45c":"# Task for Today  \n\n***\n\n## Tornado Magnitude Prediction  \n\nGiven *data about tornadoes*, let's try to predict the **magnitude** of a given tornado.\n\nWe will use three linear regression models to make our predictions. ","7b874dfa":"# Training","80cf4432":"# Getting Started","847f03b6":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/DdjHrSiESwM"}}