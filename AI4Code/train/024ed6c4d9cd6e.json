{"cell_type":{"14fdcf27":"code","03bbe944":"code","e76ca090":"code","92b7cb7e":"code","860a4409":"code","c60cc3e5":"code","cace493f":"code","5e95c07f":"code","63ca2bca":"code","5f49cbae":"code","a087fbed":"code","af65bb31":"code","ca0ed5d0":"code","61f65e30":"code","3e92be0c":"code","29526506":"code","bd71e2ba":"code","b569f4af":"code","259f1356":"code","b9b64a6d":"code","19908553":"code","da31f43a":"code","a5a61289":"code","abaab410":"code","a44e019b":"code","3d0ed6c1":"code","ffe813cf":"code","24b600c7":"code","2703da12":"code","9a0862b7":"markdown","907f4009":"markdown","5086daf5":"markdown","0de6fce5":"markdown","93161c4f":"markdown","cc5b3283":"markdown","8407a102":"markdown","9efe655b":"markdown"},"source":{"14fdcf27":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\nimport warnings\nimport os \nwarnings.filterwarnings(\"ignore\")\nimport datetime\n","03bbe944":"data=pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\n","e76ca090":"data.head()      #displaying the head of dataset they gives the 1st to 5 rows of the data","92b7cb7e":"data.describe()      #description of dataset ","860a4409":"data.info()","c60cc3e5":"data.shape       #569 rows and 33 columns","cace493f":"data.columns     #displaying the columns of dataset","5e95c07f":"data.value_counts","63ca2bca":"data.dtypes","5f49cbae":"data.isnull().sum()","a087fbed":"data.drop('Unnamed: 32', axis = 1, inplace = True)\n","af65bb31":"data","ca0ed5d0":"data.corr()","61f65e30":"plt.figure(figsize=(18,9))\nsns.heatmap(data.corr(),annot = True, cmap =\"Accent_r\")\n\n\n\n","3e92be0c":"sns.barplot(x=\"id\", y=\"diagnosis\",data=data[160:190])\nplt.title(\"Id vs Diagnosis\",fontsize=15)\nplt.xlabel(\"Id\")\nplt.ylabel(\"Diagonis\")\nplt.show()\nplt.style.use(\"ggplot\")\n","29526506":"sns.barplot(x=\"radius_mean\", y=\"texture_mean\", data=data[170:180])\nplt.title(\"Radius Mean vs Texture Mean\",fontsize=15)\nplt.xlabel(\"Radius Mean\")\nplt.ylabel(\"Texture Mean\")\nplt.show()\nplt.style.use(\"ggplot\")\n","bd71e2ba":" \nmean_col = ['diagnosis','radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean']\n\nsns.pairplot(data[mean_col],hue = 'diagnosis', palette='Accent')\n","b569f4af":"sns.violinplot(x=\"smoothness_mean\",y=\"perimeter_mean\",data=data)","259f1356":"plt.figure(figsize=(14,7))\nsns.lineplot(x = \"concavity_mean\",y = \"concave points_mean\",data = data[0:400], color='green')\nplt.title(\"Concavity Mean vs Concave Mean\")\nplt.xlabel(\"Concavity Mean\")\nplt.ylabel(\"Concave Points\")\nplt.show()\n\n","b9b64a6d":"worst_col = ['diagnosis','radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']\n\nsns.pairplot(data[worst_col],hue = 'diagnosis', palette=\"CMRmap\")","19908553":"# Getting Features\n\nx = data.drop(columns = 'diagnosis')\n\n# Getting Predicting Value\ny = data['diagnosis']\n","da31f43a":"\n#train_test_splitting of the dataset\nfrom sklearn.model_selection import train_test_split \nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)\n","a5a61289":"print(len(x_train))\n","abaab410":"print(len(x_test))","a44e019b":"print(len(y_train))","3d0ed6c1":"print(len(y_test))","ffe813cf":"from sklearn.ensemble import GradientBoostingClassifier\ngbc=GradientBoostingClassifier()\ngbc.fit(x_train,y_train)\n","24b600c7":"y_pred=gbc.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,mean_squared_error,r2_score\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Training Score: \",gbc.score(x_train,y_train)*100)\nprint(gbc.score(x_test,y_test))\n","2703da12":"print(accuracy_score(y_test,y_pred)*100)","9a0862b7":"# TRAINING AND TESTING DATA","907f4009":"**So we have to drop the Unnamed: 32 coulumn which contains NaN values**","5086daf5":"**So we get a accuracy score of 95.61 % using GradientBoostingClassifier**","0de6fce5":"# MODELS","93161c4f":"# IMPORTING THE LIBRARIES","cc5b3283":"#  Gradient Boosting Classifier","8407a102":"# VISUALIZING THE DATA","9efe655b":"# LOADING THE DATASET"}}