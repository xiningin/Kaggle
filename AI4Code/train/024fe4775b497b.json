{"cell_type":{"347ebbe7":"code","72c20b75":"code","6a186d53":"code","e59fbf4e":"code","cab02687":"code","4d55837b":"code","644f3ba0":"code","182ad3f6":"code","f2d5e2ed":"code","2abfc6f3":"code","4e7fb729":"code","eae55d1e":"code","fe351e80":"code","b967b50d":"code","f8757215":"code","c0b24032":"code","fe7c85e2":"code","6726eaba":"code","797c9cf2":"code","2b2fae71":"code","73f38917":"code","e9418c5d":"code","8ce63842":"code","2781870d":"code","dca02b7d":"code","2397c9d3":"code","5ced9d57":"code","bcaeb84e":"code","d98d9a43":"code","5c1094c2":"code","c8a66134":"code","2387c223":"markdown","465468d8":"markdown","e4e9954f":"markdown","648fe25d":"markdown"},"source":{"347ebbe7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(color_codes=True)\nimport tensorflow as tf\nfrom tensorflow import keras\nimport warnings\nwarnings.filterwarnings(\"ignore\")","72c20b75":"df_mnist=pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")","6a186d53":"df_mnist","e59fbf4e":"x=df_mnist.iloc[:,1:]\ny=df_mnist.iloc[:,:1]","cab02687":"x=x\/255","4d55837b":"x.values.shape","644f3ba0":"images=[]\nfor i,value in x.iterrows():\n    img_arr=value.values.reshape(28,28)\n    images.append(img_arr)","182ad3f6":"images=np.array(images)","f2d5e2ed":"images=images.reshape(len(images),28,28,1)","2abfc6f3":"images.shape","4e7fb729":"from sklearn.model_selection import train_test_split","eae55d1e":"train_x_full, test_x, train_y_full, test_y=train_test_split(images,y,test_size=0.2,random_state=42)\ntrain_x, valid_x, train_y, valid_y= train_test_split(train_x_full, train_y_full ,test_size=0.2, random_state=42)","fe351e80":"fig=plt.gcf()\nfig.set_size_inches(8,5)\nplt.imshow(train_x[0,:].reshape(28,28))\nplt.grid(False)\nplt.show()","b967b50d":"fig=plt.gcf()\nfig.set_size_inches(8,5)\nplt.imshow(train_x[0,:].reshape(28,28),cmap=\"gray\",interpolation=\"nearest\")\nplt.grid(False)\nplt.show()","f8757215":"train_x.shape[1:]","c0b24032":"from kerastuner.tuners import Hyperband","fe7c85e2":"def build_model(hp):\n    model= keras.models.Sequential(\n        [\n        keras.layers.Conv2D(filters= hp.Int(\"conv_1_filter\", min_value=32, max_value=128, step=16), \n                            kernel_size= hp.Choice(\"conv_1_kernel\",[3,5]), strides=1, padding=\"same\", activation=\"relu\", name=\"conv1\"),\n         \n        keras.layers.Conv2D(filters= hp.Int(\"conv_2_filter\", min_value=32, max_value=64, step=16), \n                            kernel_size= hp.Choice(\"conv_2_kernel\", [3,5]), padding=\"same\", activation=\"relu\", name=\"conv2\"),\n        keras.layers.MaxPool2D(),\n        \n        keras.layers.Conv2D(filters=hp.Int(\"conv_3_filter\", min_value=32, max_value=64, step=16),\n                            kernel_size= hp.Choice(\"conv_3_kernel\", [1,3]), padding=\"same\", activation=\"relu\", name=\"conv3\"),\n        keras.layers.MaxPool2D(),\n        keras.layers.Flatten(),\n        keras.layers.Dropout(0.25),\n        keras.layers.Dense(units= hp.Int(\"hidden_1_units\", min_value=32, max_value=128, step=32), activation=\"relu\", name=\"hidden\"),\n        keras.layers.Dropout(0.5),\n        keras.layers.Dense(10, activation=\"softmax\")\n        ]\n    )\n    model.compile(optimizer=keras.optimizers.Nadam(learning_rate= hp.Choice(\"learning_rate\", [1e-3, 1e-4, 1e-5])),\n              loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])\n    return model","6726eaba":"hyperband_tuner = Hyperband(\n    build_model,\n    objective= \"val_accuracy\",\n    max_epochs=10,\n    factor=3,\n    directory=\"mnist_project\",\n    project_name= \"Digit_Recognizer\"\n)","797c9cf2":"hyperband_tuner.search_space_summary()","2b2fae71":"hyperband_tuner.search(train_x, train_y, epochs=10, batch_size=32, validation_data= (valid_x,valid_y))","73f38917":"hyperband_tuner.results_summary()","e9418c5d":"hps= hyperband_tuner.get_best_hyperparameters(num_trials=1)[0]\nbest_model= hyperband_tuner.get_best_models(num_models=1)[0]","8ce63842":"# evaluation on training data made by us\nbest_model.evaluate(train_x, train_y)","2781870d":"hyper_model= hyperband_tuner.hypermodel.build(hps)","dca02b7d":"Model = hyper_model.fit(train_x, train_y, epochs=10, batch_size=32, validation_data=(valid_x, valid_y))","2397c9d3":"# evaluation on testing data made by us\naccuracy_test=hyper_model.evaluate(test_x, test_y)","5ced9d57":"print(\"Accuracy on test set=\",round(accuracy_test[1],4))","bcaeb84e":"# predicted numbers\npred_y=hyper_model.predict(test_x).argmax(axis=1)\npred_y","d98d9a43":"fig=plt.gcf()\nfig.set_size_inches(8,5)\nplt.imshow(test_x[0,:].reshape(28,28))\nplt.grid(False)\nplt.show()","5c1094c2":"fig=plt.gcf()\nfig.set_size_inches(8,5)\nplt.imshow(test_x[1,:].reshape(28,28),cmap=\"gray\",interpolation=\"nearest\")\nplt.grid(False)\nplt.show()","c8a66134":"fig=plt.gcf()\nfig.set_size_inches((15,6))\nplt.plot(pd.DataFrame(Model.history))\nplt.legend(labels=[\"loss\",\"accuracy\",\"val_loss\",\"val_accuracy\"])\nplt.grid(True)\nplt.show()","2387c223":"## Hyper-parameter Tuning","465468d8":"# 3. Visualising the Loss, Accuracy","e4e9954f":"# 1. Data Preprocessing","648fe25d":"# 2. Model Building"}}