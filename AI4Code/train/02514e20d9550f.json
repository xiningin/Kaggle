{"cell_type":{"2197971c":"code","6f0461ea":"code","5ffd2e5f":"code","857404cb":"code","7357c033":"code","484b286a":"code","48578cb4":"code","2db57541":"code","9b4ebb07":"code","40243db0":"code","c68cde8c":"code","bed9cb4d":"code","a132dea7":"code","524d4a19":"code","2b68d159":"code","3db83233":"code","68dd4757":"code","2018afab":"code","d2db426b":"code","8e93890f":"code","980c6a83":"code","1d93cdaf":"code","67aba2ad":"code","daa36bd8":"code","ba9f5153":"code","a0f49f56":"code","122d971f":"code","f1eb9f74":"code","3c43c7b5":"code","a24f0717":"code","3cbb7999":"code","ab711a45":"code","49e1a1f1":"code","9b06ceb6":"code","cb087f9b":"code","3e691c26":"code","73e9e71e":"code","23f76b67":"markdown","0c92b2cd":"markdown","0a948adb":"markdown","61ad2be1":"markdown","b4434abd":"markdown","60d3d446":"markdown","9b978152":"markdown","308f0aa3":"markdown","d5d1607c":"markdown","ba0bedd5":"markdown","bc683f5c":"markdown","5b77ed05":"markdown","0bdc4131":"markdown","93673ca8":"markdown","5907dfb4":"markdown","629394c4":"markdown","f900c26f":"markdown","e40f71d6":"markdown","19d1da44":"markdown","ed32215c":"markdown","96ed3de7":"markdown"},"source":{"2197971c":"%%HTML\n<style>\n.gold { background-color:#ffcc55; font-weight:bold; }\n.silver { background-color:#99ccee; font-weight:bold; }\n.bronze { background-color:#bbaabb; font-weight:bold; }\n.bagel { background-color:#ffffff; color: #dddddd; }\n<\/style>","6f0461ea":"target_word = 'shakeup'\nhighlights = {\n    r'(public|private)' : '#ffff99',\n    r'(leaderboard|lb)' : '#99ffff',\n}\n\nreplacements = [\n    # example usage:\n    dict(pat='(shake)[\\s-]+(up)', repl=r'\\1\\2', case=False)\n]\n\n# Number of characters to show either side of the central search column\nn_context_chars = 39\n\n# Must specify these in the <pre> tag.\n# (Without it you get white text on white background.)\nbackground = 'white'\ncolor = 'black'","5ffd2e5f":"import re\nimport html\nimport calendar\nimport unidecode\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom bs4 import BeautifulSoup\nfrom collections import Counter\nfrom IPython.display import HTML, display\n\nMK = Path(f'..\/input\/meta-kaggle')\nNROWS = None\n\npd.options.display.max_rows = 200","857404cb":"digits = '\u24ea\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\u246a\u246b\u246c\u246d\u246e\u246f\u2470\u2471\u2472\u2473\u3251\u3252\u3253\u3254\u3255\u3256\u3257\u3258\u3259\u325a\u325b\u325c\u325d\u325e\u325f\u32b1\u32b2\u32b3\u32b4\u32b5\u32b6\u32b7\u32b8\u32b9\u32ba\u32bb\u32bc\u32bd\u32be\u32bf\ud83c\udf1f'\ndigit_codes = np.asarray(list(digits))\nmedal_classes = np.asarray([ 'bagel', 'gold', 'silver', 'bronze' ])\npad = n_context_chars * ' '\npre_style = f'background:{background}; color:{color}; white-space: pre;'\nmedal_mark_tags = np.asarray([f'<mark class=\"{c}\">' for c in medal_classes])","7357c033":"# Highlight words that appear in series\n# Using <mark> instead of <font> ruins the text alignment in Firefox.\ndef highlight(series):\n    for term, highlight_color in highlights.items():\n        pattern = r'(\\b%s\\w*)' % (term,)\n        frep = lambda m: f'<font style=\"background-color:{highlight_color};\">{m.group(1)}<\/font>'\n        series = series.str.replace(pattern, frep, case=False)\n    return series\n\n\n# clean for use in html attr=\"text\" using double quotes\ndef clean_for_html_attr(txt):\n    return html.escape(txt, quote=True)\n\n\n# replace unicode, remove quotes and normalise spaces\ndef clean_for_line_display(txt):\n    txt = unidecode.unidecode(txt)\n    txt = re.sub(r'\\[quote.*\\[\/quote\\]', ' ', txt, flags=re.S)\n    txt = re.sub(r'\\s+', ' ', txt)\n    return txt\n\n\ndef parse_html(r):\n    txt = BeautifulSoup(r, 'html').text\n    return clean_for_html_attr(txt), clean_for_line_display(txt)\n\n\ndef read_csv(csv, **kwargs):\n    return pd.read_csv(MK \/ csv, **kwargs)","484b286a":"comps = read_csv('Competitions.csv')\ncomps = comps.dropna(subset=['ForumId'])\ncomps = comps.drop_duplicates(subset=['ForumId'], keep='last')\ncomps['ForumId'] = comps['ForumId'].astype(int)\ncomps = comps.set_index('ForumId')\n\nkdf = read_csv('Kernels.csv').set_index('Id')\n\nusers = read_csv('Users.csv').set_index('Id')\nkdf = kdf.join(users[['UserName']].add_prefix('Kernel'), on='AuthorUserId')\n\nforums = read_csv('Forums.csv').set_index('Id')\n\ntopics = read_csv('ForumTopics.csv').set_index('Id')\n\nmsgs = read_csv('ForumMessages.csv', nrows=NROWS)\nmsgs = msgs.dropna(subset=['Message'])\nmsgs = msgs.set_index('Id')\nmsgs = msgs.sort_index()","48578cb4":"for opt in replacements:\n    msgs['Message'] = msgs.Message.str.replace(**opt)","2db57541":"votes = read_csv('ForumMessageVotes.csv')\nvotes = votes.drop_duplicates(subset=['Id'])\nvotes = votes.set_index('Id')\n\nmsgs['Votes'] = votes.ForumMessageId.value_counts()\nmsgs['Medal'] = msgs['Medal'].fillna(0).astype(int)\nmsgs['Votes'] = msgs['Votes'].fillna(0).astype(int)\nmsgs['VoteIcon'] = msgs['Votes'].clip(0, 50) # use 51 for the \ud83c\udf1f icon","9b4ebb07":"idx = msgs.Message.str.contains(target_word, case=False)\nidx.sum()","40243db0":"%%time\nparsed = msgs.loc[idx, 'Message'].apply(parse_html)\nmsgs.loc[idx, 'Preview'] = parsed.str[0]\nmsgs.loc[idx, 'Clean'] = parsed.str[1]","c68cde8c":"term = '(.{,%d})(%s)(.{,%d})' % (n_context_chars, target_word, n_context_chars)\nterm","bed9cb4d":"res = msgs.Clean.str.extractall(term, re.IGNORECASE)\nres = res.fillna('').reset_index()\nres.shape","a132dea7":"# Sneak preview\nres.head()","524d4a19":"res[0] = (pad + res[0]).str[-n_context_chars:]\nres[2] = (res[2] + pad).str[:n_context_chars]","2b68d159":"res[[0, 2]] = res[[0, 2]].applymap(html.escape)","3db83233":"res = res.join(msgs, on='Id')","68dd4757":"res = res.join(users, on='PostUserId')","2018afab":"res = res.join(topics, on='ForumTopicId')","d2db426b":"res = res.join(comps.rename(columns={'Title': 'CompetitionTitle', 'Id': 'CompetitionId'}), on='ForumId')","8e93890f":"res = res.join(kdf[['KernelUserName', 'CurrentUrlSlug']], on='KernelId')","980c6a83":"res.Title = res.Title.fillna('<missing>').apply(clean_for_html_attr)","1d93cdaf":"res.PostDate = pd.to_datetime(res.PostDate)","67aba2ad":"general_forums = {\n    15: 'general',\n    208: 'getting-started',\n    809: 'product-feedback',\n    2239: 'questions-and-answers',\n    2241: 'data',\n    17686: 'learn-forum',\n}\n\nres['Forum'] = res.ForumId.map(general_forums)","daa36bd8":"res['Url'] = (res.ForumId.map(general_forums).fillna('data') + '\/' +\n              res.ForumTopicId.map(str))","ba9f5153":"idx = res.ForumId.isin(comps.index)\nidx.sum()","a0f49f56":"res.loc[idx, 'Url'] = ('c\/' + res.loc[idx, 'Slug'] + '\/discussion\/' +\n                       res.ForumTopicId.map(str))","122d971f":"idx = ~res.KernelId.isnull()\nidx.sum()","f1eb9f74":"res.loc[idx, 'Url'] = (res.loc[idx, 'KernelUserName'] + '\/' +\n                       res.loc[idx, 'CurrentUrlSlug'] + '\/comments')","3c43c7b5":"color_key_list = [f'<mark class={c}>{c}<\/mark>' for c in medal_classes]\nHTML('Medal Colors: ' + ' '.join(color_key_list))","a24f0717":"def prep(series):\n    return (series + '\\n').fillna('')\n\n\n# Make a list of arrays and pd.Series; each entry is part of a line.\n# Some fields are optional e.g. res.CompetitionTitle will be N\/A for some rows.\n# So add prefix and newline and do fillna('') separately - N\/A values result in no line\nparts = [\n    # First entry has to be a series\n    pd.Series(medal_mark_tags[res.Medal]),\n    pd.Series(digit_codes[res.VoteIcon]),\n    '<\/mark> ',\n    highlight(res[0]),  # context: left\n    '<a title=\"',\n    prep('Topic: ' + res.Title),\n    prep('Forum: ' + res.Forum),\n    prep('Competition: ' + res.CompetitionTitle),\n    prep('Kernel: ' + res.CurrentUrlSlug + ' by ' + res.KernelUserName),\n    prep('User: ' + res.DisplayName + ' [' + res.UserName + ']'),\n    prep('Date: ' + res.PostDate.dt.strftime('%c')),\n    '\\n',\n    prep('Message:\\n' + res.Preview),\n    '\" href=\"https:\/\/www.kaggle.com\/',\n    prep(res['Url'] + '#' + res.Id.map(str)),  # message Id for link anchor\n    '\">',\n    res[1],  # middle: search term\n    '<\/a>',\n    highlight(res[2]),  # context: right\n]\n\n# This joins the series & arrays into one series.\nlines = np.add.reduce(parts)\nlines = lines.to_frame('Text')\nlines['Date'] = res.PostDate\nlines['Year'] = res.PostDate.dt.year\nlines['Month'] = res.PostDate.dt.month","3cbb7999":"markup = ''\nfor year, year_df in lines.groupby('Year'):\n    markup += f'<h1 id=\"{year}\">{year}<\/h1>'\n    if len(year_df) >= 20:\n        # separate month headings\n        for month, month_df in year_df.groupby('Month'):\n            contents = '\\n'.join(month_df['Text'])\n            markup += f'<h1 id=\"{year}-{month}\">{year} &mdash; {calendar.month_name[month]}<\/h1>'\n            markup += f'<pre style=\"{pre_style}\">{contents}<\/pre>'\n    else:\n        # year as one block\n        contents = '\\n'.join(year_df['Text'])\n        markup += f'<pre style=\"{pre_style}\">{contents}<\/pre>'\nHTML(markup)","ab711a45":"plt.rc('figure', figsize=(12, 9))\nplt.rc('font', size=14)","49e1a1f1":"uniq = res.drop_duplicates(subset=['Id'])","9b06ceb6":"uniq.PostDate.dt.year.value_counts().sort_index()","cb087f9b":"uniq.PostDate.hist(bins=50)\nplt.title(f'Mentions of \"{target_word}\" on Kaggle Forums');","3e691c26":"gb = uniq.groupby('PostDate')\ngb.Votes.sum().cumsum().plot(title=f'Cumulative Mentions of \"{target_word}\" on Kaggle Forums')\ngb.size().cumsum().plot(label='Posts')\nplt.grid()\nplt.legend();","73e9e71e":"_ = \"\"\"\nRe-run to include recently completed competitions:\n\n\tSlug:rsna-miccai-brain-tumor-radiogenomic-classification\n\tSlug:nfl-health-and-safety-helmet-assignment\n\tSlug:ventilator-pressure-prediction\n\tSlug:chaii-hindi-and-tamil-question-answering\n\tSlug:tabular-playground-series-oct-2021\n\tSlug:tabular-playground-series-nov-2021\n\n\"\"\"","23f76b67":"Replace special chars with html entities, which will render as one character","0c92b2cd":"# Stats","0a948adb":"# Read","61ad2be1":"# Tend\n\nFix widths of context","b4434abd":"Regex for actual text search","60d3d446":"See [Issue: ForumMessageVotes contents duplicated](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle\/discussion\/181883) - must use drop_duplicates","9b978152":"# Format\n\nDisplay all matches with a link to the actual post and verbose \"title\" attribute that summarises it:\n\n- Topic Title\n- Competition | Kernel | Dataset\n- User\n- Date\n- Message itself!\n","308f0aa3":"# Results\n\nMouse over the central word for a preview of the full message.","d5d1607c":"Settings you can try to alter but perhaps best as they are","ba0bedd5":"This is a quick way to search for all mentions of \"shakeup\" on the forums.\nNote that active competitions are not included in the data.\n\nThis is a fork of:\n\nhttps:\/\/www.kaggle.com\/jtrotman\/the-garden-of-forking-paths","bc683f5c":"Key for the medal colors:\n","5b77ed05":"# Import","0bdc4131":"Add fields into results","93673ca8":"### Competition URLs","5907dfb4":"# Search\n\nFirst: a fast scan","629394c4":"So there you have it,\na history of shakeup discussions on Kaggle, and @BreakfastPirate was indeed the first to quantify it!\n\n________\n#### See Also:\nhttps:\/\/www.kaggle.com\/jtrotman\/the-garden-of-forking-paths\n","f900c26f":"# Settings\n\nYou can alter","e40f71d6":"# Link\n\nMaking links to actual contents:\n\nIf KernelId set - Author\/CurrentSlug\n\nIf ForumId in comps - \/c\/Slug\/discussion\/[topicID]\n\nIf ParentForumId==9 custom url for each: below are de facto parts of URL for discussions in *general* forums.","19d1da44":"Do the search - `res` has one row per hit","ed32215c":"parse_html only for messages that contain our key search word","96ed3de7":"### Kernel URLs"}}