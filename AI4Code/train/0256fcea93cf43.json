{"cell_type":{"f5709b10":"code","dcae1cb6":"code","8e861a79":"code","4864b484":"code","bddf414e":"code","e2e9c0fd":"code","336dc95e":"code","33b37ee7":"code","d6b0053e":"code","bbc21472":"code","e5b3798f":"code","0c7cb239":"code","92fdd3fa":"code","79118710":"code","1c8188ed":"code","f57d334d":"code","b79725eb":"code","10a705ff":"code","5ecdaa71":"code","c1ccdba4":"code","95711a1f":"code","9d5de372":"code","223c04da":"code","86bd4978":"code","55fd79b4":"code","50a31cb1":"code","8d0f3d4b":"code","bfa9a064":"code","da51f3ce":"code","6f810bf1":"code","db29b898":"code","55392ef3":"markdown","c8cadfa2":"markdown","f2f3fd3c":"markdown","bef222c6":"markdown","fa3b6154":"markdown","21e27beb":"markdown","0da15ba9":"markdown","269998fa":"markdown","a9b83246":"markdown","4d3d1969":"markdown","215dd058":"markdown","87b16bf0":"markdown","545f93fe":"markdown","c99f14d4":"markdown","6370f7e4":"markdown","21c45790":"markdown","a1a29592":"markdown","7a8e52d8":"markdown","cb07adb5":"markdown","08e113da":"markdown","086a9540":"markdown","21e041e8":"markdown","2219be9b":"markdown","9b486796":"markdown","5cea5d2d":"markdown","4e58f1e8":"markdown","547e3edd":"markdown"},"source":{"f5709b10":"import numpy as np\nimport pandas as pd\n \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\n \n# import os\nimport math","dcae1cb6":"df_summary = pd.read_csv('..\/input\/covid-dataset-1st-oct-21\/worldometer_coronavirus_summary_data.csv') \ndf_summary.head()","8e861a79":"df= pd.read_csv('..\/input\/covid-dataset-1st-oct-21\/worldometer_coronavirus_daily_data.csv')\ndf.head()","4864b484":"df.dtypes","bddf414e":"from datetime import datetime, timedelta\ndateparse = lambda x: datetime.strptime(x, '%Y-%m-%d')","e2e9c0fd":"df = pd.read_csv('..\/input\/covid-dataset-1st-oct-21\/worldometer_coronavirus_daily_data.csv',parse_dates=['date'], date_parser=dateparse)\ndf.head()","336dc95e":"df.dtypes","33b37ee7":"trace = go.Pie(labels=['Total Recovered', 'Total Active', 'Total Deaths'],\n               values=[df_summary.total_recovered.sum(), df_summary.active_cases.sum(), df_summary.total_deaths.sum()], \n               title=\"<b>Global Covid19 <br> Cases<\/b>\",\n               title_font_size=18,\n               hovertemplate=\"<b>%{label}<\/b><br>%{value}<br><i>%{percent}<\/i>\",\n               #hoverinfo='percent+value+label', \n               textinfo='percent',\n               textposition='inside',\n               hole=0.6,\n               showlegend=True,\n               marker=dict(colors=[\"#A904DE\", \"#FF5733\", \"C5A803\"],\n                           line=dict(color='#000000',\n                                     width=2),\n                          ),\n               name=\"\"\n              )\nfig=go.Figure(data=[trace])\nfig.show()","d6b0053e":"def add_commas(num):\n    out = \"\"\n    counter = 0\n    for n in num[::-1]: #counting the digits jumping 3 digits at a time from the right\n        counter += 1 #keep counting \n        if counter == 4: #if it's a 4 digit number, then just count once\n            counter = 1  #if it's a 4 digit number, then just count once\n            out = \",\" + out # a 'comma' and 'nothing' , we will  use it below\n        out = n + out #noe add the comma and 'nothing' after counting every 3 digits from the right.\n    return out","bbc21472":"add_commas(str(200000000))","e5b3798f":"log_scale_vals = list(range(0,25,2))\nscale_vals = (np.exp2(log_scale_vals)).astype(int).astype(str)\nscale_vals = list(map(add_commas, scale_vals))\nscale_vals ","0c7cb239":"df_summary['log(Total Confirmed)'] = np.log2(df_summary['total_confirmed'])\ndf_summary['Total Confirmed'] = df_summary['total_confirmed'].apply(lambda x: add_commas(str(x)))\n \nfig = px.choropleth(df_summary,\n                    locations=\"country\",\n                    color=\"log(Total Confirmed)\",\n                    locationmode = 'country names',\n                    hover_name='country',\n                    hover_data=['Total Confirmed'],\n                    color_continuous_scale='reds',\n                    title = '<b>Covid19 Confirmed Cases Around The Globe<\/b>')\n \n \nlog_scale_vals = list(range(0,25,2))\nscale_vals = (np.exp2(log_scale_vals)).astype(int).astype(str)\n \nscale_vals = list(map(add_commas, scale_vals))\n \nfig.update_layout(title_font_size=22,\n                  margin={\"r\":20, \"l\":30},\n                  coloraxis={#\"showscale\":False,\n                            \"colorbar\":dict(title=\"<b>Confirmed Cases<\/b><br>\",\n                                            #range=[np.log(50), np.log(6400)],\n                                            titleside=\"top\",\n                                            tickmode=\"array\",\n                                            tickvals=log_scale_vals,\n                                            ticktext=scale_vals\n                                        )},\n                 )\n \nfig.show()","92fdd3fa":"fig = px.treemap(df_summary, path=[\"country\"], values=\"total_confirmed\", height = 750,\n                 title=\"<b>Total Confirmed Cases Breakdown by Country<\/b>\",\n                 color_discrete_sequence = px.colors.qualitative.Set3)\n\nfig.update_traces(textinfo = \"label+text+value\")\nfig.show()","79118710":"#pip install --upgrade plotly","1c8188ed":"def plot_stats(country):\n    if country in [\"USA\", \"UK\"]:\n        country_prefix = \"the \"\n    else:\n        country_prefix = \"\"\n    df_country = df[df.country == country]\n    df_country.set_index('date', inplace=True)\n\n    # Plot 1\n    if not all(df_country.cumulative_total_cases.isna()):\n        layout = go.Layout(\n            yaxis={'range':[0, df_country.cumulative_total_cases[-1] * 1.05],\n                  'title':'Coronavirus Confirmed Cases'},\n            xaxis={'title':''},\n            )\n\n        fig = px.area(df_country, x=df_country.index, y=\"cumulative_total_cases\",\n                      title=f\"<b>Cumulative Total Confirmed Cases in {country_prefix}{country}<br>from {df_country.index[0].strftime('%Y-%m-%d')} till {df_country.index[-1].strftime('%Y-%m-%d')}<\/b>\",\n                      template='plotly_dark')\n\n        fig.update_traces(line={'width':5})\n\n        fig.update_layout(layout)\n        fig.show()\n\n    # Plot 2\n    if not all(df_country.daily_new_cases.isna()):\n        layout = go.Layout(\n            yaxis={'range':[0, df_country.daily_new_cases.max() * 1.05],\n                  'title':'Daily New Coronavirus Confirmed Cases'},\n            xaxis={'title':''},\n            template='plotly_dark',\n            title=f\"<b>Daily New Cases in {country_prefix}{country}<br>from {df_country.index[0].strftime('%Y-%m-%d')} till {df_country.index[-1].strftime('%Y-%m-%d')}<\/b>\",\n            )\n\n        MA7 = df_country.daily_new_cases.rolling(7).mean().dropna().astype(int)\n\n        fig = go.Figure()\n        fig.add_trace(go.Bar(name=\"Daily Cases\", x=df_country.index, y=df_country.daily_new_cases))\n        fig.add_trace(go.Scatter(name=\"7-Day Moving Average\", x=df_country.index[df_country.shape[0] - MA7.shape[0]:], y=MA7, line=dict(width=3)))\n\n        fig.update_layout(layout)\n        fig.show()\n\n    # Plot 3\n    if not all(df_country.cumulative_total_deaths.isna()):\n        layout = go.Layout(\n            yaxis={'range':[0, df_country.cumulative_total_deaths[-1] * 1.05],\n                  'title':'Coronavirus Deaths'},\n            xaxis={'title':''},\n            )\n\n        fig = px.area(df_country, x=df_country.index, y=\"cumulative_total_deaths\",\n                      title=f\"<b>Cumulative Total Deaths in {country_prefix}{country}<br>from {df_country.index[0].strftime('%Y-%m-%d')} till {df_country.index[-1].strftime('%Y-%m-%d')}<\/b>\",\n                      template='plotly_dark')\n\n        fig.update_traces(line={'color':'red', 'width':5})\n\n        fig.update_layout(layout)\n        fig.show()\n\n    # Plot 4\n    if not all(df_country.daily_new_deaths.isna()):\n        layout = go.Layout(\n            yaxis={'range':[0, df_country.daily_new_deaths.max() * 1.05],\n                  'title':'Daily New Coronavirus Deaths'},\n            xaxis={'title':''},\n            template='plotly_dark',\n            title=f\"<b>Daily Deaths in {country_prefix}{country}<br>from {df_country.index[0].strftime('%Y-%m-%d')} till {df_country.index[-1].strftime('%Y-%m-%d')}<\/b>\",\n            )\n\n        MA7 = df_country.daily_new_deaths.rolling(7).mean().dropna().astype(int)\n\n        fig = go.Figure()\n        fig.add_trace(go.Bar(name=\"Daily Deaths\", x=df_country.index, y=df_country.daily_new_deaths, marker_color='red'))\n        fig.add_trace(go.Scatter(name=\"7-Day Moving Average\", x=df_country.index[df_country.shape[0] - MA7.shape[0]:], y=MA7, line={'width':3, 'color':'white'}))\n\n        fig.update_layout(layout)\n        fig.show()\n\n    # Plot 5\n    if not all(df_country.active_cases.isna()):\n        layout = go.Layout(\n            yaxis={'range':[0, df_country.active_cases.max() * 1.05],\n                  'title':'Active Coronavirus Cases'},\n            xaxis={'title':''},\n            )\n\n        fig = px.line(df_country, x=df_country.index, y=\"active_cases\",\n                      title=f\"<b>Active Cases in {country_prefix}{country}<br>from {df_country.index[0].strftime('%Y-%m-%d')} till {df_country.index[-1].strftime('%Y-%m-%d')}<\/b>\",\n                      template='plotly_dark')\n\n        fig.update_traces(line={'color':'yellow', 'width':5})\n\n        fig.update_layout(layout)\n        fig.show()","f57d334d":"plot_stats(\"India\")","b79725eb":"plot_stats('USA')","10a705ff":"plot_stats('Brazil')","5ecdaa71":"\nplot_stats('China')","c1ccdba4":"plot_stats('UK')","95711a1f":"plot_stats('Italy')","9d5de372":"df[df.date == df.date.min()]","223c04da":"\nfig = px.area(df[df.country.isin(df[df.date == df.date.max()].sort_values(\"active_cases\", ascending=False).iloc[:20].country)].sort_values(\"active_cases\", ascending=False),\n              x=\"date\", y=\"active_cases\", color=\"country\", template=\"plotly_dark\")#, groupnorm='percent')\n\nfig.update_traces(line={\"width\":1.25})\nfig.update_layout(title = f\"Top 20 Countries with Most Active Cases on {df.date.max().strftime('%Y-%m-%d')}\",\n                  xaxis={\"title\": \"\"},\n                  yaxis={\"title\":\"Active Cases\"})","86bd4978":"\ndf['continent'] = df.apply(lambda row: df_summary[df_summary.country == row.country].iloc[0].continent, axis=1)\n\ndf","55fd79b4":"\n\ndef plot_continent(continent):\n    df_continent = df[df.continent == continent]\n    fig = px.line(df_continent, x=\"date\", y=\"cumulative_total_cases\", color=\"country\", #log_y=True,\n                  line_group=\"country\", hover_name=\"country\", template=\"plotly_dark\")\n\n    annotations = []\n    # Adding labels\n    ys = []\n    for tr in fig.select_traces():\n        ys.append(tr.y[-1])\n    y_scale = 0.155 \/ max(ys)\n    for tr in fig.select_traces():\n        # labeling the right_side of the plot\n        size = max(1, int(math.log(tr.y[-1], 1.1) * tr.y[-1] * y_scale))\n        annotations.append(dict(x=tr.x[-1] + timedelta(hours=int((2 + size\/5) * 24)), y=tr.y[-1],\n                                xanchor='left', yanchor='middle',\n                                text=tr.name,\n                                font=dict(family='Arial',\n                                          size=7+int(size\/2)\n                                         ),\n                                showarrow=False))\n        fig.add_trace(go.Scatter(\n            x=[tr.x[-1]],\n            y=[tr.y[-1]],\n            mode='markers',\n            name=tr.name,\n            marker=dict(color=tr.line.color, size=size)\n        ))\n    fig.update_traces(line={'width':1})\n    fig.update_layout(annotations=annotations, showlegend=False, uniformtext_mode='hide',\n                      title=f\"<b>Cumulative Total Coronavirus Cases in {continent}<br>between {df_continent.date.min().strftime('%Y-%m-%d')} and {df_continent.date.max().strftime('%Y-%m-%d')}<\/b>\",\n                      yaxis={'title':'Coronavirus Confirmed Cases'},\n                      xaxis={'title':''}\n                     )\n    fig.show()","50a31cb1":"plot_continent(\"Asia\")","8d0f3d4b":"plot_continent(\"Europe\")","bfa9a064":"plot_continent(\"Africa\")","da51f3ce":"plot_continent(\"North America\")","6f810bf1":"plot_continent(\"South America\")","db29b898":"plot_continent(\"Australia\/Oceania\")","55392ef3":"<br>\n\n## **2.3. UK (The Mutant)**","c8cadfa2":"## **2.1. USA (The Leader)**","f2f3fd3c":"Let's create a small function that will put commas in our figures to make it readable.","bef222c6":"## **4.5. South America**","fa3b6154":"<br>\n\n## **4.1. Asia**","21e27beb":"<br>\n\n## **Total Coronavirus Confirmed Cases Breakdown by Country**","0da15ba9":"<br>\n\n## **2.0. India (Delta Out Break)**","269998fa":"From the above observations, we can notice that we have a **recovery** rate of **89.4%** of the cases whereas **2.08%** ended up **death** cases, also **8.5%** are still **active** cases currently. While a 2.07% death rate might not seem like much for non-data scientists, this number is exceptionally high, especially when we're talking about people's lives! Now, many would argue that those are merely reported cases, and many other cases went unreported cause the majority of people infected didn't even test themselves. That being said, and looking at the actual numbers rather than percentages, the total reported coronavirus-caused deaths cases accumulates to over 3.5 million deaths!\n\nTo further help in conveying the insane numbers we got up in this pie-chart, I've written a small handy script that compares each number to the population of some countries! Take a look at the cell below to get a better feel for the numbers!","a9b83246":"It is obvious from the above plot that **USA** has the largest total cases followed by **India** and then **Brazil** and so on...","4d3d1969":"<br>\n\n## **4.6. Australia\/Oceania**","215dd058":"### **Confirmed Cases Around The Globe**","87b16bf0":"<br>\n\n# **2. Visualize Covid19 Data by Country**","545f93fe":"## 2.2 Brazil","c99f14d4":"<br>\n\n## **4.2. Europe**","6370f7e4":"Now we have the **date** in the right form.","21c45790":"<br>\n\n## **1. Global Statistics**","a1a29592":"<br>\n\n# **3. Most Affected Countries**","7a8e52d8":"<br>\n\n# **4. Visualize Data by Continent**\n\n\n","cb07adb5":"First add **continent** column to the **df** dataframe so that you can use the **df** dataframe to do this.","08e113da":"**Import the necessary libraries**","086a9540":"<br>\n\n## **2.4. Italy (The Early Chaos)**","21e041e8":"<br>\n\n## **4.4. North America**","2219be9b":"<br>\n\n## **4.3. Africa**","9b486796":"The **Covid19** pandemic is one of the most detrimental things that has happened to humanity. It is even paramount to highlight that covid19 has claim lives of humans more than **World War I** and **World War II**. \n\nIt is therefore crucial for us to analyze and have insights about the impact this evil disease is having on humanity.\n\nThis notebook serves to analyze and visualize the progress of this pandemic from various angles and perspectives. Also, it helps you to re-enforce your concepts of **Python** and **Data Analysis**!\n\n**Table of content:**\n\n    1. Global Statistics\n    2. Visualize Data by Country\n      2.1. USA (The Leader)\n      2.2. China (The Origin)\n      2.3. UK (The Mutant)\n      2.4. Italy (The Early Chaos)\n      2.5. India (The Latest Chaos)\n    3. Visualize Data by Continent\n      3.1. Asia\n      3.2. Europe\n      3.3. Africa\n      3.4. North America\n      3.5. South America\n      3.6. Australia\/Oceania\n    4. Most Affected Countries\n    ","5cea5d2d":"# **Visualise By Country**","4e58f1e8":"## **2.3. China (The Origin)**","547e3edd":"We can see that the date is in wrong data type format. It is represented as **'Object'** but it is supposed to be in a **datetime** format.\n\nWe will therefore use the "}}