{"cell_type":{"a58f2362":"code","b933abbd":"code","eac7dc54":"code","d394cc61":"code","e790fed0":"code","9e41c870":"code","38af84c4":"code","ff23969c":"code","822026e4":"code","74122f1e":"code","77a9db35":"code","8b7b6852":"code","c8462868":"code","ae91bc42":"code","919d6b57":"code","1380db7c":"code","b97f8344":"code","8094eecb":"code","17e5f2ac":"code","e530138d":"code","719cdc31":"code","1392dbd0":"code","3aa28ee8":"code","49cda9fd":"code","3f12803a":"code","862c0b47":"code","2dc93b54":"code","63e9d237":"code","ab90778e":"code","699937e3":"code","be65feb9":"markdown","65552ea7":"markdown","7e91ff3b":"markdown","1ae10580":"markdown","79fa7b69":"markdown","dce94293":"markdown","1237f758":"markdown","3aa2cbf9":"markdown","3a55541f":"markdown","e9fd46ef":"markdown","fccfe87c":"markdown"},"source":{"a58f2362":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b933abbd":"# dataset location: https:\/\/www.kaggle.com\/itssuru\/bike-sharing-system-washington-dc","eac7dc54":"import numpy as np\nimport pandas as pd\nimport datetime as dt\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d394cc61":"train = pd.read_csv('\/kaggle\/input\/bike-sharing-system-washington-dc\/train_bikes.csv',parse_dates=['datetime'])\ntest = pd.read_csv('\/kaggle\/input\/bike-sharing-system-washington-dc\/test_bikes.csv',parse_dates=['datetime'])","e790fed0":"train.head()","9e41c870":"train.isnull().sum()","38af84c4":"test.isnull().sum()","ff23969c":"train.dtypes","822026e4":"train.describe().transpose()","74122f1e":"useful_columns = ['datetime','season','holiday','workingday','weather','temp','atemp','humidity','windspeed']\n\ntarget = train['count']\ntrain = train[useful_columns]\ntest = test[useful_columns]","77a9db35":"date_time = train.pop('datetime')\ndate_time_test = test.pop('datetime')","8b7b6852":"timestamp_s = date_time.map(dt.datetime.timestamp)\ntimestamp_test = date_time_test.map(dt.datetime.timestamp)","c8462868":"timestamp_s","ae91bc42":"day = 24*60*60\nyear = (365.2425)*day\ntrain.loc[:,'Day sin'] = np.sin(timestamp_s * (2 * np.pi \/ day))\ntrain.loc[:,'Day cos'] = np.cos(timestamp_s * (2 * np.pi \/ day))\n\ntrain.loc[:,'Year sin'] = np.sin(timestamp_s * (2 * np.pi \/ year))\ntrain.loc[:,'Year cos'] = np.cos(timestamp_s * (2 * np.pi \/ year))\n\ntest.loc[:,'Day sin'] = np.sin(timestamp_test * (2 * np.pi \/ day))\ntest.loc[:,'Day cos'] = np.cos(timestamp_test * (2 * np.pi \/ day))\n\ntest.loc[:,'Year sin'] = np.sin(timestamp_test * (2 * np.pi \/ year))\ntest.loc[:,'Year cos'] = np.cos(timestamp_test * (2 * np.pi \/ year))","919d6b57":"train.head()","1380db7c":"plt.plot(np.array(train['Day sin'])[:25])\nplt.plot(np.array(train['Day cos'])[:25])\nplt.xlabel('Time [h]')\nplt.title('Time of day signal')","b97f8344":"column_indices = {name: i for i, name in enumerate(train.columns)}\n\nn = len(train)\ntrain_df = train[0:int(n*0.8)]\ntrain_target = target[0:int(n*0.8)]\n\nval_df = train[int(n*0.8):]\nval_target = target[int(n*0.8):]\n\n\nnum_features = train.shape[1]","8094eecb":"train_mean = train_df.mean()\ntrain_std = train_df.std()\n\ntrain_df = (train_df - train_mean) \/ train_std\nval_df = (val_df - train_mean) \/ train_std\ntest_df = (test_df - train_mean) \/ train_std","17e5f2ac":"train_df.describe()","e530138d":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom xgboost import XGBRegressor\n\nimport sklearn.metrics as sm","719cdc31":"# Random Forest Regressor\nrandom_forest = RandomForestRegressor()\n\n# K Nearest Neighbors Regressor\nkneighbors = KNeighborsRegressor()\n\n# SGD Regressor\nsgd = SGDRegressor()\n\n# xgb regressor\nxgb = XGBRegressor()","1392dbd0":"regressors_dict = {'random_forest':random_forest,'kneighbors':kneighbors,'sgd':sgd,'xgb':xgb}","3aa28ee8":"mae_df = pd.DataFrame(columns = [\"regressor\",\"score\"])\nmse_df = pd.DataFrame(columns=[\"regressor\",\"score\"])\n\nfor regressor_name in regressors_dict.keys():\n    regressor = regressors_dict[regressor_name]\n    regressor.fit(train_df, train_target)\n    predictions = regressor.predict(val_df)\n    \n    mae =  round(sm.mean_absolute_error(predictions, val_target), 2)\n    mse = round(sm.mean_squared_error(predictions, val_target), 2)\n    \n    mae_row = pd.DataFrame({'regressor':regressor_name,'score':mae}, index=[0])\n    mae_df = mae_df.append(mae_row)\n    \n    mse_row = pd.DataFrame({'regressor':regressor_name,'score':mse}, index=[0])\n    mse_df = mse_df.append(mse_row)\n    \n    print(\"Mean absolute error \" + regressor_name + \" =\", mae) \n    print(\"Mean squared error \" + regressor_name + \" =\", mse)\n    print(\"-\"*20)\n    \nmae_df = mae_df.reset_index(drop=True)\nmse_df = mse_df.reset_index(drop=True)","49cda9fd":"plt.title('MAE Classifier Comparisons')\nsns.set_color_codes(\"muted\")\nsns.barplot(x='score', y='regressor', data=mae_df, color=\"b\")\nplt.xlabel('MAE Score')\nplt.ylabel('Regressor')\nplt.show()","3f12803a":"plt.title('MSE Classifier Comparisons')\nsns.set_color_codes(\"muted\")\nsns.barplot(x='score', y='regressor', data=mse_df, color=\"b\")\nplt.xlabel('MSE Score')\nplt.ylabel('Regressor')\nplt.show()","862c0b47":"random_forest.fit(train_df, train_target)","2dc93b54":"predictions = random_forest.predict(val_df)","63e9d237":"test.head()","ab90778e":"test_predictions = random_forest.predict(test)","699937e3":"test_predictions = pd.DataFrame(test_predictions)\ntest_predictions.head(20)","be65feb9":"# Making Final Predictions","65552ea7":"# Feature Engineering","7e91ff3b":"I'm going to use random_forest since it performs the best","1ae10580":"# Importing the Data","79fa7b69":"## Checking the Data Types\nAll of the data is numerical, which means I won't need to do any label encoding or one hot encoding. The datetime, which is the index, can be modified to reflect time of the year. This is most likely going to be cyclical and dependent on the time of year","dce94293":"## Split the data","1237f758":"## Inspecting the data\nI will be predicting the 'count' feature. I will also most likely want to remove the 'registered' feature since it looks like this feature contains information about the count that the AI model shouldn't have access to when making predictions since that would be an example of target leakage. I'm not quite sure what the 'casual' column is, but it may also be a source of leakage.\n\nAlso, I can see that there is a season feature, which will be helpful. Having features on the season and the time of year could be useful. \n\nI'm going to normalize the data for preprocessing.","3aa2cbf9":"Without tuning the hyperparameters, the random_forest regressor seems to be performing the best","3a55541f":"# EDA\n## Checking if there are null values\nThere are no null values in the training or test data","e9fd46ef":"## Normalize the data\nIt is important to scale features before training an AI algorithm. Normalization is a common way of doing this scaling. Subtract the mean and divide by the standard deviation of each feature.\n\nThe mean and standard deviation should only be computed using the training data so that the models have no access to the values in the validation and test sets.","fccfe87c":"# Feed into AI algorithms"}}