{"cell_type":{"a94905a9":"code","d324ddec":"code","003d390e":"code","ac0d291d":"code","df4b1ab4":"code","223b3f33":"code","fb21725d":"code","474ba1e0":"code","bbff6cf1":"code","b9207704":"code","198b8cf4":"markdown","4ffd04ce":"markdown","fcd64087":"markdown","f097e35c":"markdown","be245598":"markdown","165835ca":"markdown","d8ae1b2e":"markdown","c2909c7d":"markdown","2b0513a9":"markdown","8f421e12":"markdown","f39544bc":"markdown","76d8286f":"markdown","d7f1bb49":"markdown","5dbf2ef8":"markdown"},"source":{"a94905a9":"from IPython.core.display import display, HTML, Javascript\n\n# ----- Notebook Theme -----\ncolor_map = ['#16a085', '#e8f6f3', '#d0ece7', '#a2d9ce', '#73c6b6', '#45b39d', \n                        '#16a085', '#138d75', '#117a65', '#0e6655', '#0b5345']\n\nprompt = color_map[-1]\nmain_color = color_map[0]\nstrong_main_color = color_map[1]\ncustom_colors = [strong_main_color, main_color]\n\ncss_file = ''' \n\ndiv #notebook {\nbackground-color: white;\nline-height: 20px;\n}\n\n#notebook-container {\n%s\nmargin-top: 2em;\npadding-top: 2em;\nborder-top: 4px solid %s; \/* light orange *\/\n-webkit-box-shadow: 0px 0px 8px 2px rgba(224, 212, 226, 0.5); \/* pink *\/\n    box-shadow: 0px 0px 8px 2px rgba(224, 212, 226, 0.5); \/* pink *\/\n}\n\ndiv .input {\nmargin-bottom: 1em;\n}\n\n.rendered_html h1, .rendered_html h2, .rendered_html h3, .rendered_html h4, .rendered_html h5, .rendered_html h6 {\ncolor: %s; \/* light orange *\/\nfont-weight: 600;\n}\n\ndiv.input_area {\nborder: none;\n    background-color: %s; \/* rgba(229, 143, 101, 0.1); light orange [exactly #E58F65] *\/\n    border-top: 2px solid %s; \/* light orange *\/\n}\n\ndiv.input_prompt {\ncolor: %s; \/* light blue *\/\n}\n\ndiv.output_prompt {\ncolor: %s; \/* strong orange *\/\n}\n\ndiv.cell.selected:before, div.cell.selected.jupyter-soft-selected:before {\nbackground: %s; \/* light orange *\/\n}\n\ndiv.cell.selected, div.cell.selected.jupyter-soft-selected {\n    border-color: %s; \/* light orange *\/\n}\n\n.edit_mode div.cell.selected:before {\nbackground: %s; \/* light orange *\/\n}\n\n.edit_mode div.cell.selected {\nborder-color: %s; \/* light orange *\/\n\n}\n'''\ndef to_rgb(h): \n    return tuple(int(h[i:i+2], 16) for i in [0, 2, 4])\n\nmain_color_rgba = 'rgba(%s, %s, %s, 0.1)' % (to_rgb(main_color[1:]))\nopen('notebook.css', 'w').write(css_file % ('width: 95%;', main_color, main_color, main_color_rgba, main_color,  main_color, prompt, main_color, main_color, main_color, main_color))\n\ndef nb(): \n    return HTML(\"<style>\" + open(\"notebook.css\", \"r\").read() + \"<\/style>\")\nnb()","d324ddec":"%%time\n\nimport pandas as pd\n\npd_train = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/train.csv')\npd_test = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/test.csv')","003d390e":"!pip3 install -U polars","ac0d291d":"%%time\n\nimport polars as pl\n\npolar_train = pl.read_csv('..\/input\/tabular-playground-series-feb-2022\/train.csv')\npolar_test = pl.read_csv('..\/input\/tabular-playground-series-feb-2022\/test.csv')","df4b1ab4":"%%time\n\nimport dask.dataframe as dd\n\ndd_train = dd.read_csv('..\/input\/tabular-playground-series-feb-2022\/train.csv')\ndd_test = dd.read_csv('..\/input\/tabular-playground-series-feb-2022\/test.csv')","223b3f33":"%%time\n\nimport cudf\n\ncudf_train = cudf.read_csv('..\/input\/tabular-playground-series-feb-2022\/train.csv')\ncudf_test = cudf.read_csv('..\/input\/tabular-playground-series-feb-2022\/test.csv')","fb21725d":"%%time\n\nimport datatable as dt\n\ndt_train = dt.fread('..\/input\/tabular-playground-series-feb-2022\/train.csv')\ndt_test = dt.fread('..\/input\/tabular-playground-series-feb-2022\/test.csv')","474ba1e0":"!pip install modin","bbff6cf1":"!pip install modin[ray]","b9207704":"%%time\n\nimport os\nos.environ[\"MODIN_ENGINE\"] = \"ray\"  # Modin will use Ray\nimport modin.pandas as pd\n\nmod_train = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/train.csv')\nmod_test = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/test.csv')","198b8cf4":"<h1 style=\"font-size:60px;color:#16a085\"><strong>Polars<\/strong> <strong style=\"font-size:60px;color:black\">DataFrame:<\/strong><\/h1>","4ffd04ce":"<h3>Meh... It's fine, but not worth the hype. There was not much difference between Modin and Pandas. Only a few seconds difference.\ud83d\ude15<\/h3>","fcd64087":"<h1 style=\"font-size:60px;color:#16a085\"><strong>Final<\/strong> <strong style=\"font-size:60px;color:black\">Verdict:<\/strong><\/h1>\n\n<h3>There are many such libraries out there that help us manage huge dataframes with minimal effort and ease.<\/h3>\n\n<h3>Dask was definitely the fastest one here.\ud83d\udd25\ud83d\ude92<\/h3>\n\n<h3>I will definitely try to use Dask and Polars in this competition and in my real life use cases.<\/h3>\n\n<h3>Finally, at the end of the day, it's all upto you. How you want to work with your data. You are the Captain of your ship and you should choose what works best for you.<\/h3>\n\n<h3>You guys can read more about them from <a href=\"https:\/\/www.kaggle.com\/c\/tabular-playground-series-feb-2022\/discussion\/304496\" style=\"text-decoration:none\">here<\/a><\/h3>.\n\n<h3 style=\"text-align:center;color:#16a085\">If you like this minimalistic notebook, consider dropping an upvote.\ud83d\ude01<\/h3>","f097e35c":"<h1 style=\"font-size:60px;color:#16a085\"><strong>Dask<\/strong> <strong style=\"font-size:60px;color:black\">DataFrame:<\/strong><\/h1>","be245598":"<h1 style=\"font-size:60px;color:#16a085\"><strong>DataTable<\/strong> <strong style=\"font-size:60px;color:black\">Python:<\/strong><\/h1>","165835ca":"<h3>Datatable definitely is fast, but it definitely takes some time to get used to.<\/h3>\n\n<h3><a href=\"https:\/\/www.kaggle.com\/sudalairajkumar\/getting-started-with-python-datatable\" style=\"text-decoration:none\">Here<\/a> is a wonderful notebook that talks about the same.<\/h3>","d8ae1b2e":"<h3>Polars is Super Fast! Only a few seconds to load this data!\ud83d\ude32<\/h3>\n\n<h3>More about Polars <a href=\"https:\/\/pola-rs.github.io\/polars-book\/user-guide\/\" style=\"text-decoration:none\">here<\/a>.<\/h3>","c2909c7d":"<h3>This took longer than I expected, but it is certainly faster than Pandas.\ud83d\ude43<\/h3>\n\n<h3>One thing to note here is that you should have your GPU enabled to leverage the power of CUDF.<\/h3>\n\n<h3>More about CUDF <a href=\"https:\/\/docs.rapids.ai\/api\/cudf\/stable\/\" style=\"text-decoration:none\">here<\/a>.<\/h3>","2b0513a9":"<h1 style=\"font-size:60px;color:#16a085\"><strong>Modin<\/strong> <strong style=\"font-size:60px;color:black\">DataFrame:<\/strong><\/h1>","8f421e12":"<h1 style=\"font-size:60px;color:#16a085\"><strong>Pandas<\/strong> <strong style=\"font-size:60px;color:black\">DataFrame:<\/strong><\/h1>","f39544bc":"<h3>This is probably how long I last in bed... \ud83d\ude25<\/h3>\n\n<h3>More about Dask <a href=\"https:\/\/docs.dask.org\/en\/stable\/dataframe.html\" style=\"text-decoration:none\">here<\/a>.<\/h3>","76d8286f":"<h3>By the time Pandas finished loading the DataFrame, I got triple PhD from Havard. \ud83e\udd23<\/h3>\n\n<h3>We will use this as our Baseline.<\/h3>","d7f1bb49":"<h1 style=\"font-size:60px;color:#16a085\"><strong>Rapidsai\/CUDF<\/strong> <strong style=\"font-size:60px;color:black\">DataFrame:<\/strong><\/h1>","5dbf2ef8":"<h1 style=\"font-size:60px;color:#16a085\"><strong>Notebook<\/strong> <strong style=\"font-size:60px;color:black\">Motivation:<\/strong><\/h1>\n\n<h3>Many times, we wouldn't have small datasets to work with. The real world datasets are huge, and with humans generating data every second, possibilities to explore more and more data increases exponentially!<\/h3>\n\n<h3>Often loading such big data with Pandas can be a pain. Situation like these motivated me to look for alternate solutions on the internet and on Kaggle.<\/h3>\n\n<h3>Let us explore a few such tricks!\ud83d\ude09<\/h3>"}}