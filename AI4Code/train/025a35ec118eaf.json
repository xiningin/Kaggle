{"cell_type":{"7c6aaa2f":"code","19b2474a":"code","d35380f7":"code","4b9d4520":"code","c84b8b47":"code","e4b32d35":"code","35b3138c":"code","9b6c7af8":"code","4b458347":"code","e29bc81f":"code","4b7a09f2":"code","4941f357":"code","c6322db0":"code","fa2e9e8e":"code","ec3e8faa":"code","44e36006":"code","294e0b12":"code","1f397e51":"code","a4e01118":"code","ba9d0b57":"code","020c3cbd":"code","25fa82f3":"code","3eb61080":"code","8635fb42":"code","e5a25c48":"code","6afd40f0":"markdown","f6ba01bb":"markdown","6532ae46":"markdown","8e1b7640":"markdown","88d259c8":"markdown","e7081f3c":"markdown","b1a8bff8":"markdown","9d36c656":"markdown","1611dfd4":"markdown","fb62c4b6":"markdown","5bb96b8c":"markdown","5d27e4da":"markdown","fdafbdc1":"markdown","acfda72f":"markdown","6b648c02":"markdown","badcb7fb":"markdown","dbd086c8":"markdown"},"source":{"7c6aaa2f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","19b2474a":"data=pd.read_csv('\/kaggle\/input\/pubg-finish-placement-prediction\/train_V2.csv')","d35380f7":"train=data.copy()","4b9d4520":"index=train[train['winPlacePerc'].isnull()==True].index\n","c84b8b47":"train.drop(index,inplace=True)","e4b32d35":"train.info()","35b3138c":"train.drop(columns={'killPlace','killPoints','killStreaks','maxPlace','winPoints'},inplace=True)","9b6c7af8":"import matplotlib.pyplot as plt\n\nimport seaborn as sns\nplt.style.use('fivethirtyeight')","4b458347":"f,size=plt.subplots(figsize=(15,10))\nsns.heatmap(train.corr(),annot=True,fmt='.1f',ax=size)","e29bc81f":"walk=train.copy()\nwalk=walk[walk['walkDistance']<walk['walkDistance'].quantile(0.99)]\nbins_new=plt.hist(walk['walkDistance'],bins=10)[1]","4b7a09f2":"\nwalk['walkDistance'] = pd.cut(walk['walkDistance'], bins_new, labels=['0-400m','400-850m', '850-1320m', '1320-1750m','1750-2190m','2190-2650m','2650-3080m','3080-3500m','3500-4000m','4000+'])\nplt.figure(figsize=(15,8))\nsns.boxplot(x=\"walkDistance\", y=\"winPlacePerc\", data=walk)\n","4941f357":"groups=train.copy()\ngroups=groups[groups['winPlacePerc']<=1 & (groups['winPlacePerc']>0.8)]\nplt.figure(figsize=(15,8))\nsns.countplot(y=groups['matchType'],data=groups)","c6322db0":"comparison=train.copy()\ncomparison=comparison[comparison['winPlacePerc']<=1 & (comparison['winPlacePerc']>0.8)]\ntrace1=comparison['heals']<comparison['heals'].quantile(0.99)\ntrace2=comparison['boosts']<comparison['boosts'].quantile(0.99)\n\ncomparison=comparison[trace1 & trace2]\nplt.figure(figsize=(15,8))\nsns.distplot(comparison['heals'],hist=False,color='lime')\nsns.distplot(comparison['boosts'],hist=False,color='blue')\n\nplt.text(4,0.6,'heals',color='lime',fontsize = 17)\nplt.text(4,0.55,'Boosts',color='blue',fontsize = 17)\nplt.title('heals vs boosts')\n","fa2e9e8e":"vehicles=train.copy()\nplt.figure(figsize=(15,8))\nsns.pointplot(x='vehicleDestroys',y='winPlacePerc',data=vehicles)\nplt.xlabel('Number of Vehicle Destroys')\nplt.ylabel('Win Percentage')\nplt.title('Vehicle Destroys\/ Win Ratio')\nplt.grid()\nplt.show()","ec3e8faa":"swim = train.copy()\n\nswim['swimDistance'] = pd.cut(swim['swimDistance'], [-1, 0, 5, 20, 5286], labels=['0m','1-5m', '6-20m', '20m+'])\n\nplt.figure(figsize=(15,8))\nsns.boxplot(x=\"swimDistance\", y=\"winPlacePerc\", data=swim)\n\n\n","44e36006":"killings=train.copy()\nplt.figure(figsize=(15,8))\nsns.pointplot(x='kills',y='winPlacePerc',data=killings)\nplt.xlabel('kills')\nplt.ylabel('Win Percentage')\nplt.title('kills\/ Win Ratio')\nplt.grid()\nplt.show()","294e0b12":"newdata=train.copy()\nnewdata=newdata[newdata['winPlacePerc']==1]\nplt.figure(figsize=(15,8))\nsns.pointplot(x='kills',y='winPlacePerc',data=killings,color='#CC0000')\nsns.pointplot(x='headshotKills',y='winPlacePerc',data=killings,color='blue')\n","1f397e51":"train['totalDistance'] = train['walkDistance']+train['rideDistance']+train['swimDistance']\ntrain['boostsPerWalkDistance'] = train['boosts']\/(train['walkDistance']+1)","a4e01118":"df=train.copy()\ndf=df[df['boostsPerWalkDistance']<df['boostsPerWalkDistance'].quantile(0.99)]\nbi=plt.hist(df['boostsPerWalkDistance'])[1]\nbi\n","ba9d0b57":"df['boostsPerWalkDistance'] = pd.cut(df['boostsPerWalkDistance'], bi, labels=['0-0.0008m','0.0009-0.0016m', '0.0017-0.0025m', '0.00266-0.0033m','0.0034-0.0041m','0.0042-0.0049m','0.005-0.0058m','0.0059-0.0065m','0.0066-0.0074m','0.0074+'])\nplt.figure(figsize=(15,8))\nsns.boxplot(y=\"boostsPerWalkDistance\", x=\"winPlacePerc\", data=df)","020c3cbd":"train['weaponsAcquiredPerWalkDistance'] = train['weaponsAcquired']\/(train['walkDistance']+1)","25fa82f3":"train.columns","3eb61080":"weapons=train.copy()\nweapons=weapons[weapons['weaponsAcquiredPerWalkDistance']<weapons['weaponsAcquiredPerWalkDistance'].quantile(0.99)]\nbi_=plt.hist(weapons['weaponsAcquiredPerWalkDistance'])[1]\nbi_","8635fb42":"weapons['weaponsAcquiredPerWalkDistance'] = pd.cut(weapons['weaponsAcquiredPerWalkDistance'], bi_, labels=['0-0.015m','0.016-0.031m', '0.032-0.046m', '0.047-0.062m','0.063-0.077m','0.078-0.093m','0.094-0.108m','0.109-0.124m','0.125-0.139m','0.139+'])\nplt.figure(figsize=(15,8))\nsns.boxplot(y=\"weaponsAcquiredPerWalkDistance\", x=\"winPlacePerc\", data=weapons)","e5a25c48":"train['team'] = ['1' if i>50 else '2' if (i>25 & i<=50) else '4' for i in train['numGroups']]","6afd40f0":"# Conclusion 8:\n1. As we have seen earlier from the heatmap that there was some correlation between boosts and walk distance.From this graph we find an interesting trend.The boosts when taken with a short distance proves to be more effective and increases our chances of winning than the boosts taken after travelling long distances\n1. The maximum effectiveness occurs when the boost perwalk distance is between 0.0017-0.0025m","f6ba01bb":"## **The data types of the columns are okay.But the data is not clean yet as there are some tideness issues.There are some columns which are not required in this analysis.We will drop them.**","6532ae46":"# Main Idea:\n This visualisation has been created in order to point the do and dont's of a pubg match","8e1b7640":"### Some additional information that we  get from here are:\n1. **There is some correlation between walkDistance and weaponsAcquired**\n1. **There is some correlation between boosts and walkadistance**\n1. **There is a huge negative correlation between DBNOs and numgroups**","88d259c8":"# Conclusion 1:\n1. **Walking more somehow increases our chances of winning or rather getting a better rank**\n1. **The suitable range of distance to be walked lies between 3500-4500m.This highly increases our chances of winning **\n1. **This means that more is the amount of movement less would be the damage caused by our enemies**","e7081f3c":"# Conclusion 3:\n  1. **A pubg player who secured a good rank in a pubg game took more number of boosts than number of heals.**\n  1.  **Thus for better performance in a pubg game try to rely on boosts rather than heals** ","b1a8bff8":"### Now the data is clean and we proceed with the clean data","9d36c656":"*** New columns of total distance and boosts per walk Distance are created**\n","1611dfd4":"# Conclusion 4:\n**1. Destroying a vehicle increases your chances of winning**","fb62c4b6":"# Conclusion 6:\n\n**This shows an obvious trend that more will be the number of killings more will be the chances of winning**\n","5bb96b8c":"### winPlacePerc has one missing value..We will drop the missing value row as no column has any data in this case","5d27e4da":"# Conclusion 7:\n**1. We see here in the case of winners headshotKills were more effective than normal kills. Thus preferring head shot kills over normal kills increases our chances of winning.**","fdafbdc1":"# Conclusion 9:\n1. Again we have seen from the heatmap that there was some correlation between weapons acquired and walk distance.From here we observe another intereseting trend that weapons need to be acquired within a very short distance of walking in order to increase the winning percentage\n1. The weapons acquired per walk distance should be between the range less than 0.015m. Otherwise the chances of winning falls drastically","acfda72f":"# FEATURE ENGINEERING","6b648c02":"# Conclusion 2:\n1. For better performance and to get a good finishing rank squadd-fpp is the most preferred group type,followed by duo \n   fpp and then squad.. Thus being in group is always advantageous while playing a pubg match ","badcb7fb":"## Looking at the above Heatmap we can colnclude that 'winPlacePerc' depends on:\n\n1.  **walkDistance**\n1.  **weaponsAcquired,boosts**\n1.  **damageDealt,heals,kills,longestKills**\n1.  **DBNO's,headshotKills,rideDistance,assists**\n1.  **Revives**\n1.  **swimDistance,vehicalDestroys**","dbd086c8":"# Conclusion 5:\n**1. Swimming for more distances increases your chances of winning.. This suggests the fact again that greater the movement greater would be the chances of you being damaged by your enemy**"}}