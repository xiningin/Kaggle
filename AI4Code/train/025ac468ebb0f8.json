{"cell_type":{"59d6a970":"code","b1d75303":"code","f2feb319":"code","b365b4ed":"code","3138ed9a":"code","89f84a0e":"code","d28616d6":"code","87e33bb9":"code","99113994":"code","4322833f":"code","e175a08f":"code","acc602bd":"code","92092c35":"code","9e7afefa":"code","31915674":"code","672bf459":"code","b6386b5e":"code","63c6e170":"code","ddec3238":"code","90d874f0":"code","3d957935":"code","3461b50a":"code","7ab2d9fe":"code","2a9279d6":"code","c9012e0b":"code","8cf83d8b":"code","27009a61":"code","aba937a0":"code","6b6da38a":"code","b2324a1a":"code","5dc757ef":"markdown","2921d146":"markdown","cabfecd9":"markdown","a4086b44":"markdown","44f63a06":"markdown","3f001b05":"markdown","5204ce2b":"markdown","4b6ccb90":"markdown","5e3be8d3":"markdown","d09129cf":"markdown","0f1b0c14":"markdown","96551fbd":"markdown","e81a1900":"markdown","895e8717":"markdown","abc73678":"markdown","5d2f2490":"markdown","60f3545c":"markdown","2622e5c3":"markdown","1ca72cd7":"markdown","b295a3db":"markdown"},"source":{"59d6a970":"# Import Python packages\nimport numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\n\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nimport plotly.plotly as py\ninit_notebook_mode(connected=True)\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', 5000)\nsns.set(style=\"whitegrid\")","b1d75303":"Responce = pd.read_csv('..\/input\/kaggle-survey-2018\/freeFormResponses.csv').loc[1:, :]\nMultipleResponce = pd.read_csv('..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv').loc[1:, :]\nSurveySchema = pd.read_csv('..\/input\/kaggle-survey-2018\/SurveySchema.csv').loc[1:, :]\nMultipleResponce_tmp = pd.read_csv('..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv')","f2feb319":"MultipleResponce['Q9_avg'] = MultipleResponce['Q9'].apply(lambda x: 5 if x == '0-10,000'\n                            else (15 if x == '10-20,000' else (25 if x == '20-30,000' else (35 if x == '30-40,000' \n                            else (45 if x == '40-50,000' else (55 if x == '50-60,000' else (65 if x == '60-70,000' \n                            else (75 if x == '70-80,000' else (85 if x == '80-90,000' else (95 if x == '90-100,000' \n                            else (112 if x == '100-125,000' else (137 if x == '125-150,000' else (175 if x == '150-200,000' \n                            else (225 if x == '200-250,000' else (275 if x == '250-300,000' else (400 if x == '300-400,000' \n                            else (450 if x == '400-500,000' else (500 if x == '500,000+' else 0)\n                            ))))))))))))))))) #.value_counts()\nMultipleResponce['Q2_avg'] = MultipleResponce['Q2'].apply(lambda x: 20 if x == '18-21'\n                            else (23 if x == '22-24' else (27 if x == '25-29' else (32 if x == '30-34' \n                            else (37 if x == '35-39' else (42 if x == '40-44' else (47 if x == '45-49' \n                            else (55 if x == '50-59' else (65 if x == '60-79' else (75 if x == '70-79' \n                            else (80 if x == '80+' else 30)\n                            ))))))))))\nMultipleResponce['Q8_avg'] = MultipleResponce['Q8'].apply(lambda x: 1 if x == '0-1'\n                            else (2 if x == '1-2' else (5 if x == '5-10' else (3 if x == '2-3' \n                            else (4 if x == '3-4' else (15 if x == '10-15' else (5 if x == '4-5' \n                            else (20 if x == '15-20' else (25 if x == '20-25' else (30 if x == '30 +' \n                            else (99 if x == '25-30' else 0)\n                            ))))))))))\nMultipleResponce['Q24_avg'] = MultipleResponce['Q24'].apply(lambda x: 2 if x == '1-2 years'\n                            else (5 if x == '3-5 years' else (1 if x == '< 1 year' else (10 if x == '5-10 years' \n                            else (20 if x == '10-20 years' else (0 if x == 'I have never written code' else (30 if x == '20-30 years' \n                            else (99 if x == '30+ ' else 0)\n                            )))))))\nMultipleResponce['Q25_avg'] = MultipleResponce['Q25'].apply(lambda x: 1 if x == '< 1 year'\n                            else (2 if x == '1-2 years' else (3 if x == '2-3 years' else (4 if x == '3-4 years' \n                            else (10 if x == '5-10 years' else (5 if x == '4-5 years' else (15 if x == '10-15 years' \n                            else (20 if x == '20+ years' else (0 if x == 'I have never studied machine learning but plan to learn in the future'\n                            else (-1 if x == 'I have never studied machine learning and I do not plan to' else 0)\n                            )))))))))\nMultipleResponce['Q2'] = MultipleResponce['Q2'].apply(lambda x: '50-59' if x in ['50-54','55-59']\n                            else ('60+' if x in ['60-69','70-79','80+'] else x ))\nMultipleResponce['Q3'] = MultipleResponce['Q3'].apply(lambda x: 'Hong Kong' if x == 'Hong Kong (S.A.R.)'\n                            else ('Iran' if x == 'Iran, Islamic Republic of...'\n                            else ('United Kingdom' if x == 'United Kingdom of Great Britain and Northern Ireland'\n                            else ('United States' if x == 'United States of America'\n                            else ('Vietnam' if x == 'Viet Nam'\n                            else ('Other' if x == 'I do not wish to disclose my location'       \n                            else x\n                            )))))) \nMultipleResponce['Q4'] = MultipleResponce['Q4'].apply(lambda x: 'High school' if x == 'No formal education past high school'\n                            else ('High school' if x == 'Some college\/university study without earning a bachelor\u2019s degree'\n                            else x\n                            ))\nMultipleResponce['Q9'] = MultipleResponce['Q9'].apply(lambda x: 'Do not want to say' if x == 'I do not wish to disclose my approximate yearly compensation'\n                            else x\n                            )\nMultipleResponce['Q10_new'] = MultipleResponce['Q10'].apply(lambda x: 'We are exploring ML methods' if x == 'We are exploring ML methods (and may one day put a model into production)'\n                            else ('We are exploring ML methods' if x == 'We use ML methods for generating insights (but do not put working models into production)'\n                            else x\n                            ))\n","b365b4ed":"def prep_data(df, group_col, target):\n    data = df.copy()\n    data = pd.DataFrame(data.groupby([group_col])[target].agg(['size','mean','sum']))\n    data['mean'] = np.round(data['mean'],1)\n    data = data.reset_index()\n    data.columns = ['val', 'cnt', 'mean','sum']\n    return data.sort_values(by = 'mean', ascending=False)","3138ed9a":"data = prep_data(pd.DataFrame(MultipleResponce), 'Q9', 'Q9_avg')\ndata['cnt'] = np.round(100*data['cnt']\/data['cnt'].sum(),1)\n\nsns.set(rc={'figure.figsize':(12,7)}, style=\"whitegrid\")\nax = sns.barplot(x='cnt', y='val', data=data, \n                 order=['Do not want to say', \n                        '0-10,000', '10-20,000', '20-30,000', '30-40,000', '40-50,000', '50-60,000', '60-70,000',  '70-80,000', '80-90,000','90-100,000',\n                        '100-125,000', '125-150,000', '150-200,000', '200-250,000', '250-300,000', '300-400,000', '400-500,000', '500,000+'], \n                 palette=np.array(['#dc0000', '#c8c8c8','#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8'\n                                   , '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8'])            \n                )\nax.set_title(\"Yearly salary in $USD\",fontsize=16,weight='bold')\nax.set_xlabel(\"Percentage %\",fontsize=12)\nax.set_ylabel(\"\", fontsize=12)\nax.text(15, 4, 'One on four do not want \\nto say about salary', ha='left', fontsize=14, color = '#dc0000')\n#, ha=\"left\", va=\"center\", size=10, bbox=dict(boxstyle=\"square\", fc=\"w\")\nsns.despine(offset=10, trim=True)\n\nplt.show()\n","89f84a0e":"MultipleResponce = MultipleResponce[MultipleResponce['Q9'] != 'Do not want to say']","d28616d6":"data = prep_data(pd.DataFrame(MultipleResponce), 'Q9', 'Q9_avg')\ndata['sum'] = data['sum'] \/1000\nplt.subplots(1, 2, figsize = (18, 9), sharey = True, gridspec_kw = {'wspace': 0.05})\n\nplt.subplot(1, 2, 1)\n\nax = sns.barplot(x='sum', y='val', data=data, \n                 palette=np.array(['#00cc00', '#c8c8c8','#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8'\n                                    , '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#dc0000'])                )\nax.set_title(\"Yearly income for whole group\",fontsize=18,weight='bold')\nax.set_xlabel(\"Yearly income in $ MILLION\",fontsize=12)\nax.set_ylabel(\"\", fontsize=12)\nax.text(35, 0.6, '63 people \\nearned abount 31.5 million $', ha='left', fontsize=16, color = '#00cc00')\nax.text(35, 17.5, '4.4k people (28%) \\nearned abount 22 million $', ha='left', fontsize=16, color = '#dc0000')\nsns.despine(offset=10, trim=True)\n\nplt.subplot(1, 2, 2)\nax = sns.barplot(x='cnt', y='val', data=data, \n                 palette=np.array(['#00cc00', '#c8c8c8','#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8'\n                                    , '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#dc0000'])\n                )\nax.set_title(\"Number of people by yearly income\",fontsize=18,weight='bold')\nax.set_xlabel(\"Number of people from the survey\",fontsize=12)\nax.text(900,9, '63 richest people earned as much \\nas 6,300 people from the smallest \\ngroup would earn', ha='left', fontsize=16, color = 'black')\nax.set_ylabel(\"\", fontsize=12)\nsns.despine(offset=10, trim=True)","87e33bb9":"data = prep_data(pd.DataFrame(MultipleResponce.fillna('Not employed')), 'Q6', 'Q9_avg')\nMultipleResponce['Q6'] = MultipleResponce['Q6'].apply(lambda x: 'Other' if x in data[data['cnt'] < 100]['val'].unique() else x)\ndata = prep_data(pd.DataFrame(MultipleResponce.fillna('Not employed')), 'Q6', 'Q9_avg')","99113994":"plt.subplots(1, 2, figsize = (18, 9), sharey = True, gridspec_kw = {'wspace': 0.05})\n\nplt.subplot(1, 2, 1)\n\nax = sns.barplot(x='mean', y='val', data=data, \n                 palette=np.array(['#00cc00', '#00cc00','#00cc00', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8'\n                                   , '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#dc0000', '#dc0000'])\n                )\nax.set_title(\"Yearly income ($ k) by current job\",fontsize=18,weight='bold')\nax.set_xlabel(\"Yearly income in $ thousands\",fontsize=12)\nax.set_ylabel(\"\", fontsize=12)\nax.text(40, 15, 'More then 5.3k people (28%) \\nare students or unemployed', ha='left', fontsize=16, color = '#dc0000')\nsns.despine(offset=10, trim=True)\n\nplt.subplot(1, 2, 2)\nax = sns.barplot(x='cnt', y='val', data=data, \n                 palette=np.array(['#00cc00', '#00cc00','#00cc00', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8'\n                                   , '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#dc0000', '#dc0000'])\n                )\nax.set_title(\"Number of people by current job\",fontsize=18,weight='bold')\nax.set_xlabel(\"Number of people from the survey\",fontsize=12)\nax.text(600,1.5, 'People managing people or \\nproducts are paid the best (6%)', ha='left', fontsize=16, color = '#00cc00')\nax.set_ylabel(\"\", fontsize=12)\nsns.despine(offset=10, trim=True)","4322833f":"MultipleResponce = MultipleResponce[MultipleResponce['Q6'] != 'Student']\nMultipleResponce = MultipleResponce[MultipleResponce['Q6'] != 'Not employed']\nMultipleResponce = MultipleResponce[MultipleResponce['Q7'] != 'I am a student']\nMultipleResponce = MultipleResponce[MultipleResponce['Q9_avg'] != 0]\n\nconst_mean = round(MultipleResponce['Q9_avg'].mean(),1)\nconst_median = round(MultipleResponce['Q9_avg'].median(),1)\n\n#print(const_mean)\n#print(const_median)","e175a08f":"data = prep_data(pd.DataFrame(MultipleResponce), 'Q2', 'Q9_avg')\n\nplt.subplots(1, 2, figsize = (18, 9), sharey = True, gridspec_kw = {'wspace': 0.05})\n\nplt.subplot(1, 2, 1)\n\nax = sns.barplot(x='mean', y='val', data=data, \n                 palette=np.array(['#00cc00', '#c8c8c8','#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#1245ff', '#c8c8c8', '#dc0000'])            \n                )\nax.set_title(\"Yearly income ($ k) by age\",fontsize=18,weight='bold')\nax.set_xlabel(\"Yearly income in $ thousands\",fontsize=12)\nax.set_ylabel(\"Age group\", fontsize=12)\nax.text(80, 6.3, 'The largest group are people \\nafter graduation starting \\nwith their careers (29%)', ha='left', fontsize=16, color = '#1245ff')\nax.text(60, 3.3, 'Perfect income dependence', ha='left', rotation = '52', fontsize=16, color = 'black')\n\nax.annotate(\"\",\n            xy=(130, 0.1), xycoords='data',\n            xytext=(30, 8), textcoords='data',\n            arrowprops=dict(arrowstyle=\"fancy\", \n                            color=\"0.5\",\n                            patchB=0,\n                            shrinkB=20,\n                            connectionstyle=\"arc3,rad=0.0\",\n                            ),\n            )\n\n\nsns.despine(offset=10, trim=True)\n\nplt.subplot(1, 2, 2)\nax = sns.barplot(x='cnt', y='val', data=data, \n                 palette=np.array(['#00cc00', '#c8c8c8','#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#1245ff', '#c8c8c8', '#dc0000'])  \n                )\n\n\nax.set_title(\"Number of people by age\",fontsize=18,weight='bold')\nax.set_xlabel(\"Number of people from the survey\",fontsize=12)\nax.set_ylabel(\"\", fontsize=12)\nsns.despine(offset=10, trim=True)","acc602bd":"data = prep_data(pd.DataFrame(MultipleResponce), 'Q8', 'Q9_avg')\n\nplt.subplots(1, 2, figsize = (18, 9), sharey = True, gridspec_kw = {'wspace': 0.05})\n\nplt.subplot(1, 2, 1)\n\nax = sns.barplot(x='mean', y='val', data=data, \n                 palette=np.array(['#00cc00', '#c8c8c8','#c8c8c8', '#c8c8c8', '#c8c8c8', '#1245ff', '#c8c8c8', '#c8c8c8', '#dc0000', '#dc0000', '#dc0000'])            \n                )\nax.set_title(\"Yearly income by work experience (in years)\",fontsize=18,weight='bold')\nax.set_xlabel(\"Yearly income in $ thousands\",fontsize=12)\nax.set_ylabel(\"Work experience is years\", fontsize=12)\nax.text(67, 3.5, 'Perfect income dependence', ha='left', rotation = '56', fontsize=16, color = 'black')\n\nax.annotate(\"\",\n            xy=(145, 0.1), xycoords='data',\n            xytext=(45, 10), textcoords='data',\n            arrowprops=dict(arrowstyle=\"fancy\", \n                            color=\"0.5\",\n                            patchB=0,\n                            shrinkB=2,\n                            connectionstyle=\"arc3,rad=0.0\",\n                            ),\n            )\n\n\nsns.despine(offset=10, trim=True)\n\nplt.subplot(1, 2, 2)\nax = sns.barplot(x='cnt', y='val', data=data, \n                palette=np.array(['#00cc00', '#c8c8c8','#c8c8c8', '#c8c8c8', '#c8c8c8', '#1245ff', '#c8c8c8', '#c8c8c8', '#dc0000', '#dc0000', '#dc0000'])\n                )\n\nax.text(1200, 4.3, 'The first large group of ML precursors \\nfrom before 2014', ha='left', fontsize=16, color = '#1245ff')\nax.text(1200, 7.3, 'More and more interest in the field \\nrelated to data year by year', ha='left', fontsize=16, color = '#dc0000')\nax.annotate(\"\",\n            xy=(2700, 10), xycoords='data',\n            xytext=(1600, 8), textcoords='data',\n            arrowprops=dict(arrowstyle=\"fancy\", \n                            color=\"0.5\",\n                            patchB=0,\n                            shrinkB=2,\n                            connectionstyle=\"arc3,rad=-0.3\",\n                            ),\n            )\nax.text(2200, 8.2, '+ 50% !', ha='left', fontsize=16, rotation = -35, color = '#dc0000', weight='bold')\n\nax.set_title(\"Number of people by work experience  (in years)\",fontsize=18,weight='bold')\nax.set_xlabel(\"Number of people from the survey\",fontsize=12)\nax.set_ylabel(\"\", fontsize=12)\nsns.despine(offset=10, trim=True)","92092c35":"data = prep_data(pd.DataFrame(MultipleResponce), 'Q26', 'Q9_avg')\n\nplt.subplots(1, 2, figsize = (18, 9), sharey = True, gridspec_kw = {'wspace': 0.05})\n\nplt.subplot(1, 2, 1)\n\nax = sns.barplot(x='mean', y='val', data=data, \n                 palette=np.array(['#00cc00', '#c8c8c8','#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8'])\n                )\n#ax.text(15, 2, 'The first large group of ML precursors \\nfrom before 2014', ha='left', fontsize=16, color = '#1245ff')\nax.set_title(\"Do you consider yourself to be a data scientist?\",fontsize=18,weight='bold')\nax.set_xlabel(\"Yearly income in $ thousands\",fontsize=12)\nax.set_ylabel(\"\", fontsize=12)\nsns.despine(offset=10, trim=True)\n\nplt.subplot(1, 2, 2)\nax = sns.barplot(x='cnt', y='val', data=data, \n                 palette=np.array(['#00cc00', '#c8c8c8','#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8'])\n                )\n\nax.set_title(\"Do you consider yourself to be a data scientist?\",fontsize=18,weight='bold')\nax.set_xlabel(\"Number of people from the survey\",fontsize=12)\nax.set_ylabel(\"\", fontsize=12)\nsns.despine(offset=10, trim=True)","9e7afefa":"data = prep_data(pd.DataFrame(MultipleResponce), 'Q4', 'Q9_avg')\n\nplt.subplots(1, 2, figsize = (18, 9), sharey = True, gridspec_kw = {'wspace': 0.05})\n\nplt.subplot(1, 2, 1)\n\nax = sns.barplot(x='mean', y='val', data=data, \n                 palette=np.array(['#00cc00', '#c8c8c8','#c8c8c8', '#c8c8c8', '#c8c8c8', '#dc0000'])            \n                )\nax.set_title(\"Yearly income ($ k) by education\",fontsize=18,weight='bold')\nax.set_xlabel(\"Yearly income in $ thousands\",fontsize=12)\nax.set_ylabel(\"\", fontsize=12)\n\nsns.despine(offset=10, trim=True)\n\nplt.subplot(1, 2, 2)\nax = sns.barplot(x='cnt', y='val', data=data, \n                palette=np.array(['#00cc00', '#c8c8c8','#c8c8c8', '#c8c8c8', '#c8c8c8', '#dc0000'])   \n                )\n\nax.set_title(\"Number of people by education\",fontsize=18,weight='bold')\nax.set_xlabel(\"Number of people from the survey\",fontsize=12)\nax.set_ylabel(\"\", fontsize=12)\nsns.despine(offset=10, trim=True)","31915674":"data = prep_data(pd.DataFrame(MultipleResponce.fillna('No information')), 'Q37', 'Q9_avg')\nMultipleResponce['Q37'] = MultipleResponce['Q37'].apply(lambda x: 'Other' if x in data[data['cnt'] < 100]['val'].unique() else x)\ndata = prep_data(pd.DataFrame(MultipleResponce.fillna('No information')), 'Q37', 'Q9_avg')","672bf459":"MultipleResponce['Q37'] = MultipleResponce['Q37'].apply(lambda x: 'University Courses' if x == 'Online University Courses'\n                            else x\n                            )\n\ndata = prep_data(pd.DataFrame(MultipleResponce.fillna('No information')), 'Q37', 'Q9_avg')\n\nplt.subplots(1, 2, figsize = (20, 9), sharey = True, gridspec_kw = {'wspace': 0.05})\n\nplt.subplot(1, 2, 1)\n\nax = sns.barplot(x='mean', y='val', data=data, \n                 palette=np.array(['#00cc00', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#1245ff', '#c8c8c8','#c8c8c8', '#c8c8c8', '#dc0000', '#dc0000'])            \n                )\nax.set_title(\"Yearly income ($ k) by online education\",fontsize=18,weight='bold')\nax.set_xlabel(\"Yearly income in $ thousands\",fontsize=12)\nax.set_ylabel(\"\", fontsize=12)\nax.text(55, 8.6, 'Why???', ha='left', fontsize=16, color = '#dc0000')\n\nsns.despine(offset=10, trim=True)\n\nplt.subplot(1, 2, 2)\nax = sns.barplot(x='cnt', y='val', data=data, \n                 palette=np.array(['#00cc00', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#1245ff', '#c8c8c8','#c8c8c8', '#c8c8c8', '#dc0000', '#dc0000'])            \n                )\n\nax.text(3000, 3.2, 'Every second person did not provide \\nany information...', ha='left', fontsize=16, color = '#1245ff')\nax.text(3000, 5.2, '...but that means that up to 50% \\nlearn online!', ha='left', fontsize=16, color = '#1245ff')\n\nax.set_title(\"Number of people by online education\",fontsize=18,weight='bold')\nax.set_xlabel(\"Number of people from the survey\",fontsize=12)\nax.set_ylabel(\"Online platforms\", fontsize=12)\nsns.despine(offset=10, trim=True)","b6386b5e":"data = prep_data(pd.DataFrame(MultipleResponce.fillna('No information')), 'Q37', 'Q2_avg')\nsns.set(rc={'figure.figsize':(12,7)}, style=\"whitegrid\")\nax = sns.barplot(x='mean', y='val', data=data, \n                 palette=np.array(['#c8c8c8', '#00cc00','#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#1245ff'\n                                   , '#dc0000', '#dc0000'])            \n                )\n\nax.set_title(\"Avarage age by online education\",fontsize=16,weight='bold')\nax.set_xlabel(\"Avarage age\",fontsize=12)\nax.set_ylabel(\"Online platforms\", fontsize=12)\nsns.despine(offset=10, trim=True)\n\nplt.show()","63c6e170":"data = prep_data(pd.DataFrame(MultipleResponce.fillna('I do not know')), 'Q10_new', 'Q9_avg')\n\nax = sns.barplot(x='mean', y='val', data=data, \n                 palette=np.array(['#00cc00', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#dc0000'])            \n                )\nax.set_title(\"Yearly income ($ k) by company usage of ML methods\",fontsize=18,weight='bold')\nax.set_xlabel(\"Yearly income in $ thousands\",fontsize=12)\nax.set_ylabel(\"\", fontsize=12)\nax.text(45, 4.2, 'Maybe soon these companies will wake up \\nfrom the winter sleep', ha='left', fontsize=16, color = '#dc0000')\n\nsns.despine(offset=10, trim=True)\n","ddec3238":"# download data with country name 4 hole world\nall_country = pd.read_csv('..\/input\/survey-data\/2014_world_gdp_with_codes.csv')\nall_country.columns = ['country', 'mean', 'CODE']\nall_country = all_country[['country', 'mean']]\nall_country['mean'] = 0\n\nlocations = pd.DataFrame(MultipleResponce.groupby(['Q3'])['Q9_avg'].agg(['mean']))\nlocations['mean'] = np.round(locations['mean'],0)\nlocations = locations.reset_index()\nlocations.columns = ['country', 'mean']\nlocations = locations.sort_values(by = 'country', ascending=True)\nlocations.head()\n\nlocations = pd.merge(all_country, locations, how='left', on='country', sort=True).fillna(0)\nlocations = locations.drop(columns=['mean_x'])\nlocations.columns = ['country', 'mean']\n\ndata = [ dict(\n        type = 'choropleth',\n        locations = locations['country'],\n        locationmode = 'country names',\n        z = locations['mean'],\n        text = locations['country'],\n        colorscale = [[0,\"rgb(235, 0, 0)\"],[0.5,\"rgb(235, 235, 0)\"],[1,\"rgb(220, 220, 220)\"]],\n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '$',\n            title = 'Avarage yearly salary in $'),\n      ) ]\n\nlayout = dict(\n    title = '<b>Avarage yearly salary in $<\/b>',\n    geo = dict(\n        showframe = False,\n        showcoastlines = False,\n        projection = dict(\n            type = 'Mercator'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False, filename='d3-world-map' )","90d874f0":"BigMacIndex = pd.read_csv('..\/input\/bigmacindex\/BigMacIndex.csv')\nBigMacIndex = BigMacIndex[BigMacIndex['date'] == '2018-07-01']\nBigMacIndex.rename(columns={'name':'Q3'}, inplace=True)\nBigMacIndex['Q3'] = BigMacIndex['Q3'].apply(lambda x: 'United Kingdom' if x == 'Britain'\n                            else x)\nBigMacIndex['BigMacIndex'] = BigMacIndex['local_price']\/BigMacIndex['dollar_ex']\nBigMacIndex = BigMacIndex[['Q3','BigMacIndex']]\n\nBigMacIndex.sort_values(by='BigMacIndex').head()\n\nMultipleResponce = pd.merge(MultipleResponce, BigMacIndex, left_index=False, right_index=False, how='left')\nMultipleResponce['BigMacIndex'] = MultipleResponce['BigMacIndex'].fillna(MultipleResponce['BigMacIndex'].mean())\n\nMultipleResponce['Q9_BigMacDaily'] = (1000*MultipleResponce['Q9_avg']\/365)\/MultipleResponce['BigMacIndex']","3d957935":"locations = pd.DataFrame(MultipleResponce.groupby(['Q3'])['Q9_BigMacDaily'].agg(['mean']))\nlocations['mean'] = np.round(locations['mean'],0)\nlocations = locations.reset_index()\nlocations.columns = ['country', 'mean']\nlocations = locations.sort_values(by = 'country', ascending=True)\n\nlocations = pd.merge(all_country, locations, how='left', on='country', sort=True).fillna(0)\nlocations = locations.drop(columns=['mean_x'])\nlocations.columns = ['country', 'mean']\n\ndata = [ dict(\n        type = 'choropleth',\n        locations = locations['country'],\n        locationmode = 'country names',\n        z = locations['mean'],\n        text = locations['country'],\n        colorscale = [[0,\"rgb(235, 0, 0)\"],[0.5,\"rgb(235, 235, 0)\"],[1,\"rgb(235, 235, 235)\"]],\n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '',\n            title = 'Daily salary in BiG Macs'),\n      ) ]\n\nlayout = dict(\n    title = '<b>Avarage daily salary in Big Macs <\/b>',\n    geo = dict(\n        showframe = False,\n        showcoastlines = False,\n        projection = dict(\n            type = 'Mercator'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\ntmp = iplot( fig, validate=False, filename='d3-world-map' )","3461b50a":"from lightgbm import LGBMClassifier\nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.model_selection import KFold, StratifiedKFold, train_test_split\nimport matplotlib.pyplot as plt\nimport gc\n\ndef one_hot_encoder(df, nan_as_category = True):\n    original_columns = list(df.columns)\n    categorical_columns = [col for col in df.columns if df[col].dtype == 'object']\n    df = pd.get_dummies(df, columns= categorical_columns, dummy_na= nan_as_category)\n    new_columns = [c for c in df.columns if c not in original_columns]\n    return df, new_columns\n\ndef kfold_lightgbm(df, num_folds, stratified = False, debug= False, n_estimators=1000, max_depth=4, early_stopping_rounds=100,\n                  num_leaves = 16, learning_rate = 0.02, reg_alpha = 0.04, reg_lambda = 0.07, subsample = 0.85,\n                  colsample_bytree = 1.0, min_split_gain = 0.02, min_child_weight = 40,\n                  min_child_samples = 20, min_data_in_leaf = 20):\n    # Divide in training\/validation and test data\n    #train_df = df[df['TARGET'].notnull()]\n    #test_df = df[df['TARGET'].isnull()]\n    train_df, test_df = train_test_split(df,test_size=0.2, random_state=2018)\n    print(\"Starting LightGBM. Train shape: {}, test shape: {}\".format(train_df.shape, test_df.shape))\n    del df\n    gc.collect()\n    # Cross validation model\n    if stratified:\n        folds = StratifiedKFold(n_splits= num_folds, shuffle=True, random_state=2018)\n    else:\n        folds = KFold(n_splits= num_folds, shuffle=True, random_state=2018)\n    # Create arrays and dataframes to store results\n    oof_preds = np.zeros(train_df.shape[0])\n    sub_preds = np.zeros(test_df.shape[0])\n    \n    sub_preds_train = np.zeros(train_df.shape[0])\n    \n    feature_importance_df = pd.DataFrame()\n    feats = [f for f in train_df.columns if f not in ['TARGET']]\n    \n    for n_fold, (train_idx, valid_idx) in enumerate(folds.split(train_df[feats], train_df['TARGET'])):\n        train_x, train_y = train_df[feats].iloc[train_idx], train_df['TARGET'].iloc[train_idx]\n        valid_x, valid_y = train_df[feats].iloc[valid_idx], train_df['TARGET'].iloc[valid_idx]\n\n        # LightGBM parameters found by Bayesian optimization\n        clf = LGBMClassifier(\n            n_jobs = 4,\n            n_estimators = n_estimators, \n            learning_rate = learning_rate, \n            num_leaves = num_leaves, \n            subsample = subsample, \n            colsample_bytree = colsample_bytree,\n            max_depth = max_depth, \n            reg_alpha = reg_alpha, \n            reg_lambda = reg_lambda, \n            min_split_gain = min_split_gain, \n            min_child_weight = min_child_weight, \n            min_child_samples = min_child_samples,\n            min_data_in_leaf = min_data_in_leaf,\n            silent = -1,\n            verbose = -1, )\n\n        clf.fit(train_x, train_y, eval_set=[(train_x, train_y), (valid_x, valid_y)], \n            eval_metric= 'auc', verbose= 100, early_stopping_rounds= early_stopping_rounds)\n\n        oof_preds[valid_idx] = clf.predict_proba(valid_x, num_iteration=clf.best_iteration_)[:, 1]\n        sub_preds += clf.predict_proba(test_df[feats], num_iteration=clf.best_iteration_)[:, 1] \/ folds.n_splits\n        sub_preds_train += clf.predict_proba(train_df[feats], num_iteration=clf.best_iteration_)[:, 1] \/ folds.n_splits\n        \n        fold_importance_df = pd.DataFrame()\n        fold_importance_df[\"feature\"] = feats\n        fold_importance_df[\"importance\"] = clf.feature_importances_\n        fold_importance_df[\"fold\"] = n_fold + 1\n        feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n        print('Fold %2d AUC : %.6f' % (n_fold + 1, roc_auc_score(valid_y, oof_preds[valid_idx])))\n         \n        del clf, train_x, train_y, valid_x, valid_y\n        gc.collect()\n\n    print('Full AUC score %.6f' % roc_auc_score(train_df['TARGET'], oof_preds))\n    fpr, tpr, _ = roc_curve(train_df['TARGET'], oof_preds)\n\n    #display_importances(feature_importance_df)\n    return feature_importance_df, fpr, tpr, roc_auc_score(train_df['TARGET'], oof_preds)\n\n# Display\/plot feature importance\ndef display_importances(feature_importance_df_):\n    cols = feature_importance_df_[[\"feature\", \"importance\"]].groupby(\"feature\").mean().sort_values(by=\"importance\", ascending=False)[:10].index\n    best_features = feature_importance_df_.loc[feature_importance_df_.feature.isin(cols)]\n    plt.figure(figsize=(8, 10))\n    sns.barplot(x=\"importance\", y=\"feature\", data=best_features.sort_values(by=\"importance\", ascending=False))\n    plt.title('LightGBM Features (avg over folds)')\n    plt.tight_layout()\n    #plt.savefig('lgbm_importances01.png')","7ab2d9fe":"probka = MultipleResponce.copy()\nprobka['TARGET'] = probka['Q9_BigMacDaily'].apply(lambda x: 1 if x >= 60 else 0)\nprobka['Time from Start to Finish (seconds)'] = probka['Time from Start to Finish (seconds)'].astype('int64')\n\nchar_list = []\nout_list = []\n\nfor c in probka.columns:\n    if (\"OTHER\" in c) or (\"TEXT\" in c) or (\"Q34\" in c) or (\"Q35\" in c) or (c in ['Q9','Q9_avg','Q9_BigMacDaily','BigMacIndex', 'Q47_Part_16', 'Q2', 'Time from Start to Finish (seconds)']):\n        out_list.append(c)\n    else:\n        char_list.append(c)     \n\nprobka = probka[char_list]\n\n# Categorical features with One-Hot encode\nprobka, cat_cols = one_hot_encoder(probka, False) ","2a9279d6":"feats1 = [f for f in probka.columns]\nfeat_importance1, fpr1, tpr1, roc_score1  = kfold_lightgbm(probka[feats1], num_folds= 4, stratified= False, debug= False, n_estimators = 1000, early_stopping_rounds = 50)\n\ntmp1 = feat_importance1.groupby(['feature'])['importance'].agg(['mean','sum', 'max'])","c9012e0b":"tmp1.sort_values(by = 'mean', ascending = False).head(10)","8cf83d8b":"feats2 = [f for f in probka.columns if ('Q3' not in f)]\nfeat_importance2, fpr2, tpr2, roc_score2 = kfold_lightgbm(probka[feats2], num_folds= 4, stratified= False, debug= False, n_estimators = 1000, early_stopping_rounds = 50)\n\ntmp2 = feat_importance2.groupby(['feature'])['importance'].agg(['mean','sum', 'max'])","27009a61":"tmp2.sort_values(by = 'mean', ascending = False).head(10)","aba937a0":"f1 = tmp1.sort_values(by = 'mean', ascending = False).head(10)\nf2 = tmp2.sort_values(by = 'mean', ascending = False).head(10)\n\nindex1 = pd.Index(['Q8_Years of experience','Q2_Age', 'Q3_Live in USA', 'Q24_Expirience in writing code to analyze data', 'Q7_Academics education'\n             ,'Q13_Use Notepad++','Q10_We have well established ML methods','Q42_Important is revenue and business goals'\n             , 'Q25_How many years have you used machine learning methods','Q11_My role: Build prototypes to explore applying ML to new areas'])\nf1 = f1.set_index(index1, inplace = False)\n\nindex2 = pd.Index(['Q8_Years of experience','Q2_Age', 'Q24_Expirience in writing code to analyze data', 'Q7_Academics education'\n             ,'Q13_Use Notepad++', 'Q25_How many years have you used machine learning methods','Q10_We have well established ML methods'\n             ,'Q42_Important is revenue and business goals','Q11_My role: Build prototypes to explore applying ML to new areas'\n             ,'Q10_We do not use ML methods'])\nf2 = f2.set_index(index2, inplace = False)\n\nplt.subplots(2, 1, figsize = (9, 18), sharey = True, gridspec_kw = {'wspace': 0.05})\n\nplt.subplot(2, 1, 1)\n\nax = sns.barplot(x='mean', y=f1.index, data=f1, \n                 palette=np.array(['#00cc00', '#00cc00','#00cc00', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8'])            \n                )\nax.set_title(\"Top 10 char - all data\",fontsize=18,weight='bold')\nax.set_xlabel(\"Importance\",fontsize=12)\nax.set_ylabel(\"\", fontsize=12)\n\nsns.despine(offset=10, trim=True)\n\nplt.subplot(2, 1, 2)\nax = sns.barplot(x='mean', y=f2.index, data=f2, \n                palette=np.array(['#00cc00', '#00cc00','#00cc00', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8', '#c8c8c8'])            \n                )\n\nax.set_title(\"Top 10 char - without countries\",fontsize=18,weight='bold')\nax.set_xlabel(\"Importance\",fontsize=12)\nax.set_ylabel(\"\", fontsize=12)\nsns.despine(offset=10, trim=True)","6b6da38a":"trace0 = go.Scatter(x=[0, 1], y=[0, 1], \n                    mode='lines', \n                    line=dict(color='lightgray', width=1, dash='dash'),\n                    showlegend=False)\n\ntrace1 = go.Scatter(x=fpr1, y=tpr1, \n                    mode='lines', \n                    line=dict(color='#00cc00', width=3),\n                    name='Model predicting income (All Characteristis)'\n                   )\n\ntrace2 = go.Scatter(x=fpr2, y=tpr2, \n                    mode='lines', \n                    line=dict(color='#dc0000', width=3),\n                    name='Model predicting income <br>(without affecting the place of living in the world)'\n                   )\n\nlayout = go.Layout(title='<b>ROC Curve<\/b><br><i>Gini: ' + str(round(100*(2*roc_score1 - 1),1)) +'% vs ' + str(round(100*(2*roc_score2 - 1),1)) +'% <\/i> ', \n                     height=400, \n                     width=700,\n                     showlegend=True,\n                     legend=dict(x=0.4, y=0.5),\n                     xaxis=dict(title='% of negatives'),\n                     yaxis=dict(title='% of positives'),\n                    )\n\nfig = go.Figure(data=[trace1, trace2], layout=layout)\n\niplot(fig)","b2324a1a":"data_m = prep_data(pd.DataFrame(MultipleResponce[MultipleResponce['Q1']=='Male']), 'Q4', 'Q9_avg')\ndata_f = prep_data(pd.DataFrame(MultipleResponce[MultipleResponce['Q1']=='Female']), 'Q4', 'Q9_avg')\ndata_f['mean'] = -1*data_f['mean']\n\nlayout = go.Layout(title = '<b>Does the academic title affect your income?<\/b>',\n                   yaxis=go.layout.YAxis(automargin=True),\n                   xaxis=go.layout.XAxis(\n                       range=[-70, 70],\n                       tickvals=[-60, -40, -20, 0, 20, 40, 60],\n                       ticktext=[60, 40, 20, 0, 20, 40, 60],\n                       title='Avarage yearly income in thousands of $'),\n                   barmode='overlay',\n                   bargap=0.1, \n                   annotations=[\n                    dict(\n                        x = -50, y = 5, text='<b>In every group <br>womens earn less<\/b>',showarrow=False,\n                    ),]\n                  )\n\ndata = [go.Bar(y=data_f['val'],\n               x=data_m['mean'],\n               orientation='h',\n               name='Men',\n               hoverinfo='x',\n               marker=dict(color='powderblue')\n               ),\n        go.Bar(y=data_f['val'],\n               x=data_f['mean'],\n               orientation='h',\n               name='Women',\n               text=-1*data_f['mean'],\n               hoverinfo='text',\n               marker=dict(color='pink')\n               )]\n\niplot(dict(data=data, layout=layout)) \n\nMultipleResponce['Q8_new'] = MultipleResponce['Q8'].apply(lambda x: '0-5' if x in ['0-1','1-2','2-3','3-4','4-5']\n                            else ('20+' if x in ['20-25','25-30','30 +'] else x ))\n\ndata_m = prep_data(pd.DataFrame(MultipleResponce[MultipleResponce['Q1']=='Male']), 'Q8_new', 'Q9_avg')\ndata_f = prep_data(pd.DataFrame(MultipleResponce[MultipleResponce['Q1']=='Female']), 'Q8_new', 'Q9_avg')\n\ndata_f['mean'] = -1*data_f['mean']\n\nlayout = go.Layout(title = '<b>... and work experience?<\/b>',\n                   yaxis=go.layout.YAxis(automargin=True),\n                   xaxis=go.layout.XAxis(\n                       range=[-150, 150],\n                       tickvals=[-120, -80, -40, 0, 40, 80, 120],\n                       ticktext=[120, 80, 40, 0, 40, 80, 120],\n                       title='Avarage yearly income in thousands of $'),\n                   barmode='overlay',\n                   bargap=0.1, \n                   annotations=[\n                    dict(\n                        x = -100, y = 3.8, text='<b>In every group with <br>5+ experience <br>womens earn less',showarrow=False,\n                    ),]\n                  )\n\ndata = [go.Bar(y=data_f['val'],\n               x=data_m['mean'],\n               orientation='h',\n               name='Men',\n               hoverinfo='x',\n               marker=dict(color='powderblue')\n               ),\n        go.Bar(y=data_f['val'],\n               x=data_f['mean'],\n               orientation='h',\n               name='Women',\n               text=-1*data_f['mean'],\n               hoverinfo='text',\n               marker=dict(color='pink')\n               )]\n\niplot(dict(data=data, layout=layout)) ","5dc757ef":"# Epilogue\n...a year passed. Draco, hugging his daughter, looked at her and wondered\n\n>\"*And who are you going to be my sweet baby when you grow up?*\"\n\nThe girl pointed to her father.\n\n>\"*Oh, you want to do what I do?*\"\n\nDraco pulled out hastily concerned about the previous notes. He had something else to check.","2921d146":">\"*You were right again my Princess.*\" nodded Draco.\n\n>\"*I would like to have the same confidence like you have*\" he said loudly with a smile.\n\n>\"*And self-confidence and knowing your own value is also important in my opinion.*\" - she added","cabfecd9":">\"*Well, I already know quite a lot, but one more questions darling*\"\n\n>\"*What question?*\" Abigil asked\n\n>\"*Are you ready to move to another city or country?*\" - he asked gently lifting an eyebrow\n\nShe suddenly became sad. She went to the window and looked away. She thought about the family and friends waiting for them  at home.\n>\"*I do not know. Is this the only way that we have to  leave the country to earn more?\"*\n\n>\"*Let's look for answers,*\" said Draco","a4086b44":">\"*Something does not fit here ... it would be a good alternative for further learning at home to help my growing family. But why people who learn on some platforms, didn't achive higher income?*\"- Draco considered.\n\nHe began walking around the room and nervously biting his nails.\n\n>*\"I know,*\" he shouted, \"*because these are different populations of  people. But how to prove it?*\"","44f63a06":"> \"*So the conclusion is simple- the managers earn the most*\" - thought Draco for a moment.\n\n>\"*It makes sense. They're managing people who deal with data, they need to know what they're doing. If they did not know, young wolves would quickly bite them. Let's throw people away at the beginning of their path. *\" - he murmured removing students from data and wondering what discoveries he would see again.\n\n>\"*Honey, I do not know what you coud do to become a manager*\" - his princess smiled entering the room - \"* you are too young and you lack experience*\".\n\n","3f001b05":">*\"Hmm ... There is so tiny difference  so I stay home -  for me family happiness is the most important *\" he summed up, glancing at the sleeping as an angel beautiful wife cuddled in a pillow.","5204ce2b":"-----------------------------------------------------------------------------------\n## References:\n\n[1] Information about the BIG MAC Index: https:\/\/www.economist.com\/news\/2018\/07\/11\/the-big-mac-index\n\nData about BIG Mac Index: https:\/\/raw.githubusercontent.com\/TheEconomist\/big-mac-data\/master\/source-data\/big-mac-source-data.csv\n\n[2] List of countries taken from:https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_world_gdp_with_codes.csv\n\n[3] Inspirations from other Kernels:\n- https:\/\/www.kaggle.com\/andresionek\/what-makes-a-kaggler-valuable\n- https:\/\/www.kaggle.com\/headsortails\/what-we-do-in-the-kernels-a-kaggle-survey-story\n- https:\/\/www.kaggle.com\/lytyakov\/kaggler-from-india-who-are-you\n","4b6ccb90":">\"*Well, so the world is not so simple. So many dependencies and how not to get lost in it*\" - said Draco\n\n>\"*Darling, what industry would you like to work in? What are especially you interested in?*\" - Abi asked him to provoke  deeper reflection what he really want to do.\n\n>\"*It does not matter where, if only it would fulfill two simple conditions: there would be a lot of data, and I would be stupidest person in the team.*\"\n\n>\"*Why?*\" - she asked laughing.\n\n>\"*To get knowledge from everyone. *\" Draco replied","5e3be8d3":"> \"*So it really is*\" he thought. \"*I will analyze the secret of differences between people who have the highest income and those who earn the lowest.*\"\n\nDraco looked at the sheet left by the wizard.\n\n>\"*Let's see if there are any traps, for example groups of people, which can disrupt the picture of the whole. I have to be sure if my observations are correct. \"*","d09129cf":"A teardrop licked at him with the tip of his eye. He hugged the little princess more firmly.\n\n>\"***I hope that before you grow up it will change ...***\"\n<img src=\"http:\/\/www.thespiritualindian.com\/wp-content\/uploads\/2016\/01\/tears-are-good.jpg\" width=\"30%\">","0f1b0c14":"> \"*I have heard that the world is heavily stratified, i.e. 99% of the world's money belongs to 1% of the richest people, I wonder if this is also here ...*\" asked Draco himself","96551fbd":">\"*Hmm ... but there is one country that stands out from the others. What if I exclude such information? It's interesting what the difference would be.*\"","e81a1900":"# Quo vadis? [(*)](https:\/\/en.wikipedia.org\/wiki\/Quo_vadis%3F)\n### A story about searching for the path by the young data scientist","895e8717":">\"*Well, we know a lot now, experience, age  and self confidence are crucial. Let's focus on  education*\" Draco added.","abc73678":">\"*Where such a radical difference come from?*\" Abigail asked, looking over his shoulder at the results.\n\n>\"*The answer seems simple to me *\" said Draco. \"*People with a doctorate hold higher positions in companies. And I also know a few people from universities who have resigned from scientific career  at universities and decided to find a  well paid jobs in private sector in companies.*\"\n\n>\"*Just remember, baby, before you start heading towards a doctorate, how much hard work does it cost, maybe it's worth thinking to choose different way of educating?*\" - said the young wife.\n\n>\"*What do you mean?*\"\n\n>\"*Maybe it's better to sit at home, cuddle your wife and look after your baby?*\" - she smiled","5d2f2490":"# FINAL CONCLUSION\n***It does not matter where you live, what you studied or in what industry you work. The most important thing is to collect experience, work in companies which use ML and develop applications . If you do what you like, remember - you do not have to hurry. Money will come ***\n","60f3545c":"A smile appeared- he understood that there is no such big distinction anymore.\n\n>\"*Hmm ... The last thing. How to put data into machine learning model? I wonder what would come out and what will be important ...  and  whether it will confirm what I have in my head ...*\" Draco said.","2622e5c3":">\"*Hmm ... okay, I do not know every year's average annual earnings. Let's exclude them would not disturb me*\" he said confidently, making sure he was doing well.","1ca72cd7":"Draco was sad. He saw how it looks in the world. He knew  exactly that his princess  would prefer to stay.\n\n>\"*Something does not suit me here.*\" he began to scratch his head. He looked around the room and grabbed the sandwich.\n\n>\"*Hungry Draco is a bad Draco*\" - he smiled to himself.\n\nHe looked at the sandwich while eating. He earlier had jumped out from honeymoon hotel and bought it in a nearby store for 8  EUR. He remembered that a few days before leaving for the vacations, he bought in his city the same andwich for 3 PLN (his homeland currency, worth  four times less than EUR).\n\n>\"*I have information on yearly incomes in dollars , but not everywhere the same dollar is worth as much as anywhere else in the world.*\"\n\nA flash, one thought ... Draco remembered that McDonald has restaurants in almost every country. And the price of BigMac adapts to currency and purchasing power.","b295a3db":"Behind the seven mountains, behind seven forests on the beach by the sea ...\n\n>\"*Hey Draco! I haven't seen you so thoughtful recently *\" said the beautiful woman, grabbing the man's hand.\n\n>\"*Sorry, princess. I have never felt so much responsibility that rests on my shoulders *\" he answered. \n\nHe stood behind a woman wearing a beautiful white dress and gave her a loving hug. \n\n<img src=\"https:\/\/draxe.com\/wp-content\/uploads\/2018\/05\/HUGS_HEADER_2.jpg\" width=\"50%\">\n\n>*\"I want you to be happy and I assure  you will never not miss anything. You have been my wife for several hours and I will  become father in next seven months. My princess, I have just started to perceive at the world differently *\"- he said -\" *I know that money does not give me happiness, but I would like to earn enough  to  buy security and peace.  I want  my  money work for us and I don't want us to work for money. I wish we could afford to spend a lot of time together and realize our own passions and dreams. Is it wrong?*\"\n\n>\"*It's nothing bad, honey*\" - Abigail replied. \"*I will leave you with your thoughts, I will wait in the beach house*\" she whispered, smiling flirtatiously. \n\nDraco stayed on the beach. He has been fighting with his thoughts for a long time. The sun has  disappeared.\n\n>\"*If only I knew what to do or where to go ...*\" - Draco thought. \n\nArranging all kinds of plans for the future and considering various directions, he suddenly fall asleep In the morning he woke up and to his surprise he saw a thick book with a piece of paper on it.\n<img src=\"https:\/\/apekshadrishtikon.files.wordpress.com\/2013\/06\/old_armenian_book_by_deviantik.jpg\" width=\"20%\">\n\n>\"*You will find the answer to your question in the middle. Especially for young people like you, I prepared myself for such an event to help you, but you have to look carefully at this information ... Good luck*\" - Grandmaster Kaggle wizard. It turned out that the book is filled with surveys of people from around the world.\n\nDraco immediately ran to the beach house, where he spent his honeymoon with his pregnant wife Abigail. He sat down at the desk and began to quietly look around curiously, not to wake Abi.\n\n>\"*I do not believe, is there really an answer?\"* - he shouted curiously, looking through the pages.\n\n>\"*Let's take a closer look ...*\""}}