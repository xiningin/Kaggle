{"cell_type":{"45bb2e79":"code","6d2dd4ea":"code","ae6ebce7":"code","3a0e0c25":"code","4a6a85e8":"code","7848a070":"code","254a53a0":"code","84a17e83":"code","5739469c":"code","b5edd227":"code","cd9652a3":"code","0adebfc8":"code","b8f29be5":"code","dafc4f78":"code","bc97b28d":"code","532996b9":"code","136ab299":"code","62c74051":"code","b2728e4a":"code","d6f434c5":"code","294b79d4":"code","4ba69c38":"code","c6804715":"code","33dd42b1":"code","173d6ceb":"code","bbf4dfdf":"code","361fbadb":"code","af72b785":"code","16a71b3f":"markdown","ac11d63a":"markdown","3d5a58d2":"markdown","bf9aa575":"markdown","dac7cc6b":"markdown"},"source":{"45bb2e79":"# Input data files are available in the read-only \"..\/input\/\" directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6d2dd4ea":"# scintific computing libraries\nimport pandas as pd                                      \nimport numpy as np                    \nfrom scipy import optimize, stats        \n\n# visualisation libraries\nimport matplotlib.pyplot as plt                      \nimport seaborn as sns                \n\n# algorithmic library\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom lightgbm import LGBMRegressor\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, KFold\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.utils import resample\nfrom sklearn.pipeline import Pipeline\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense, Flatten, Dropout\nfrom tensorflow.keras.layers import LeakyReLU, PReLU, ELU\nfrom keras.utils import np_utils","ae6ebce7":"df_train = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nprint(df_train.shape)\ndf_train.head()","3a0e0c25":"df_shops = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\nprint(df_shops.shape)\ndf_shops.head()","4a6a85e8":"df_items = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nprint(df_items.shape)\ndf_items.head()","7848a070":"df_item_categories = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nprint(df_item_categories.shape)\ndf_item_categories.head()","254a53a0":"df_test = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\nprint(df_test.shape)\ndf_test.head()","84a17e83":"df_train.head()","5739469c":"df_train.dtypes","b5edd227":"df_train.isnull().sum()","cd9652a3":"df_train.drop(['date_block_num','item_price'], axis=1, inplace=True)","0adebfc8":"df_train['date'] = pd.to_datetime(df_train['date'], dayfirst=True)\ndf_train['date'] = df_train['date'].apply(lambda x: x.strftime('%Y-%m'))\ndf_train.head()","b8f29be5":"# \u5c06df_train\u5148\u6309\u7167data,\u7136\u540e\u518d\u6309\u7167shop_id, \u6700\u540e\u518d\u6309\u7167item_id\u8fdb\u884c\u6392\u5e8f\ndf = df_train.groupby(['date','shop_id','item_id']).sum()\ndf.head()\n","dafc4f78":"df = df.pivot_table(index=['shop_id','item_id'], columns='date', values='item_cnt_day', fill_value=0)\ndf.reset_index(inplace=True)\ndf.head()","bc97b28d":"# \u5c06df_test\u4e0edf\u4e24\u8868\u8fdb\u884c\u5408\u5e76\uff0c\u6309\u7167\u3010\u2018shop_id\u2019, \u2018item_id\u2019\u3011\u5408\u5e76\ndf_test = pd.merge(df_test, df, on=['shop_id','item_id'], how='left')\ndf_test.drop(['ID', '2013-01'], axis=1, inplace=True)\ndf_test.head()","532996b9":"df_test = df_test.fillna(0)\ndf_test.head()","136ab299":"Y_train_1 = df_test['2015-10'].values\nprint(Y_train_1.shape)","62c74051":"# \u62ff\u539f\u6765\u7684df\u6587\u4ef6\u8fdb\u884c\u8bad\u7ec3\uff0c\u800c\u4e0d\u662f\u62ffdf_test\u6587\u4ef6\u8fdb\u884c\u8bad\u7ec3\nY_train = df['2015-10'].values\nX_train = df.drop(['2015-10'], axis = 1)\nX_test = df_test\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape)","b2728e4a":"'''X_train = StandardScaler().fit(X_train).transform(X_train)\nX_test = StandardScaler().fit(X_test).transform(X_test)'''","d6f434c5":"# \u5c06\u8bad\u7ec3\u6837\u672c\u5206\u6210\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nx_train, x_test, y_train, y_test = train_test_split( X_train, Y_train, test_size=0.2, random_state=4)\nprint ('Train set:', x_train.shape,  y_train.shape)\nprint ('Test set:', x_test.shape,  y_test.shape)","294b79d4":"LR = LinearRegression()\nLR.fit(x_train,y_train)\n\nprint('Train set mse:', mean_squared_error(y_train, LR.predict(x_train)))\nprint('Test set mse:', mean_squared_error(y_test, LR.predict(x_test)))\nprint('Test set score:', LR.score(x_train,y_train))","4ba69c38":"RFR = RandomForestRegressor(n_estimators = 100)\nRFR.fit(x_train,y_train)\n\nprint('Train set mse:', mean_squared_error(y_train, RFR.predict(x_train)))\nprint('Test set mse:', mean_squared_error(y_test, RFR.predict(x_test)))\nprint('Test set score:', RFR.score(x_train,y_train))","c6804715":"'''GBR = GradientBoostingRegressor(n_estimators = 50 , max_depth = 3)\nGBR.fit(x_train,y_train)\n\nprint('Train set mse:', mean_squared_error(y_train, GBR.predict(x_train)))\nprint('Test set mse:', mean_squared_error(y_test, GBR.predict(x_test)))\nprint('Test set score:', GBR.score(x_train,y_train))'''","33dd42b1":"'''model=LGBMRegressor(n_estimators=200, learning_rate=0.03, max_depth=8)\nmodel.fit(x_train,y_train)\n\nprint('Train set mse:', mean_squared_error(y_train, model.predict(x_train)))\nprint('Test set mse:', mean_squared_error(y_test, model.predict(x_test)))\nprint('Test set score:', model.score(x_train,y_train))'''","173d6ceb":"prediction = LR.predict(X_test)","bbf4dfdf":"prediction = list(map(round, prediction))\nprediction","361fbadb":"df_submission = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\nprint(df_submission.shape)\ndf_submission.head()","af72b785":"df_submission['item_cnt_month'] = prediction\ndf_submission.to_csv('prediction.csv', index=False)\ndf_submission.head()","16a71b3f":"## Data Acquisition","ac11d63a":"## Data Preprocessing","3d5a58d2":"## Submission","bf9aa575":"## Model Development","dac7cc6b":"### \u5f97\u5230\u4e86\u53ef\u4ee5\u8bad\u7ec3\u96c6df_test\uff0c\u884c\u4e3a\u6837\u672c\uff0c\u5217\u4e3a2013-2015\u5e74\u6bcf\u4e2a\u6708\u7684\u9500\u552e\u91cf"}}