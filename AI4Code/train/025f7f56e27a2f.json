{"cell_type":{"1fd59d9e":"code","53047d4b":"code","dbe839b1":"code","0556be0e":"code","e1424a31":"code","448109a3":"code","45801cbb":"code","86346691":"code","07844f96":"code","9f96c04b":"code","5e62eb0b":"code","99477c65":"code","a65bb484":"code","19678a17":"code","7b8c26a2":"code","703410c5":"markdown","d7717aa1":"markdown","b6fc70f2":"markdown","a54a887d":"markdown","acbc3534":"markdown","6cdecbec":"markdown","9a6f3f47":"markdown","9c484da8":"markdown","dc5be30b":"markdown","a54ea322":"markdown","d4e872ca":"markdown","d086b3ae":"markdown","e2c0d5b2":"markdown"},"source":{"1fd59d9e":"import time\n\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.manifold import TSNE","53047d4b":"print(os.listdir('..\/input'))","dbe839b1":"train_images = np.load('..\/input\/kmnist-train-imgs.npz')['arr_0']\ntest_images = np.load('..\/input\/kmnist-test-imgs.npz')['arr_0']\ntrain_labels = np.load('..\/input\/kmnist-train-labels.npz')['arr_0']\ntest_labels = np.load('..\/input\/kmnist-test-labels.npz')['arr_0']","0556be0e":"plt.figure()\nplt.imshow(train_images[0])\nplt.colorbar()\nplt.grid(False)","e1424a31":"train_images = train_images \/ 255.0\ntest_images = test_images \/ 255.0","448109a3":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i], cmap=plt.cm.binary)\n    plt.xlabel(train_labels[i])","45801cbb":"# Sample from the training set\nsample_size = 8000\n\nnp.random.seed(2018)\nidx = np.random.choice(60000, size=sample_size, replace=False)\ntrain_sample = train_images.reshape(60000, -1)[idx, :]\nlabel_sample = train_labels[idx]\n\n# Generate 2D embedding with TSNE\nembeddings = TSNE(verbose=2).fit_transform(train_sample)","86346691":"# Visualize TSNE embedding\nvis_x = embeddings[:, 0]\nvis_y = embeddings[:, 1]\n\nplt.figure(figsize=(10,7))\nplt.scatter(vis_x, vis_y, c=label_sample, cmap=plt.cm.get_cmap(\"jet\", 10), marker='.')\nplt.colorbar(ticks=range(10))\nplt.clim(-0.5, 9.5)\nplt.show()","07844f96":"import tensorflow.keras as keras\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras import backend as K\n\nfrom sklearn.neighbors import KNeighborsClassifier","9f96c04b":"X_train_flat = train_images.reshape(60000, -1)\nX_test_flat = test_images.reshape(10000,-1)\n\n# Keras inputs\nx_train = np.expand_dims(train_images, axis=-1)\nx_test = np.expand_dims(test_images, axis=-1)\ny_train = keras.utils.to_categorical(train_labels)\ny_test = keras.utils.to_categorical(test_labels)","5e62eb0b":"neigh = KNeighborsClassifier(n_neighbors=4, n_jobs=-1)\nneigh.fit(X_train_flat, train_labels)\nprint(\"k-NN Test Accuracy:\", neigh.score(X_test_flat, test_labels))","99477c65":"img_rows, img_cols = 28, 28\nbatch_size = 128\nnum_classes = 10\nepochs = 12","a65bb484":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=(img_rows, img_cols, 1)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation='softmax'))","19678a17":"model.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(x_test, y_test))","7b8c26a2":"score = model.evaluate(x_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","703410c5":"## References\n\n1. Deep Learning for Classical Japanese Literature. Tarin Clanuwat et al. arXiv:1812.01718\n\n### Links\n* Original Paper repository: https:\/\/github.com\/rois-codh\/kmnist\n* Multicore TSNE: https:\/\/github.com\/DmitryUlyanov\/Multicore-TSNE\n* Inspiration: https:\/\/www.tensorflow.org\/tutorials\/keras\/basic_classification","d7717aa1":"### Simple CNN with Keras","b6fc70f2":"Let's visualize the dataset using T-SNE. The algorithm will take a minute or two to run.","a54a887d":"Display some sample images to get an idea of the distribution","acbc3534":"We first scale the dataset.","6cdecbec":"This is very close to the reported accuracy of 91.56% by Clanuwat et al.","9a6f3f47":"### k-NN Baselines\nWarning: This is very slow! Skip this if you want to directly try out the CNN model.","9c484da8":"# Classification Models","dc5be30b":"### Preprocess the Data","a54ea322":"# Exploratory Analysis","d4e872ca":"### Visualization","d086b3ae":"Note that .npz files are stored as a dictionary, therefore we need to access its keys to retrieve the numpy array. In this case, it is `'arr_0'`.","e2c0d5b2":"Again, the accuracy is very close to the 95.12% reported on the paper."}}