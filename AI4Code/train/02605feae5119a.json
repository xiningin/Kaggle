{"cell_type":{"883f4a3b":"code","219a0454":"code","9a507698":"code","43813929":"code","900e2ce6":"code","c97a0d7c":"code","66fecab5":"code","44799f9c":"code","ad00daab":"code","61113654":"code","c92c29e0":"code","ef8bbf41":"code","09a0aa5d":"code","fb577e3e":"code","7a09204e":"code","d11a3373":"code","fff4b4c0":"code","37297ab5":"code","d69a3814":"code","2cbe0d45":"code","8d646536":"code","9a9547f3":"code","2ac09431":"code","1c5e9981":"code","aa4918c4":"code","0ab37288":"code","f6adb24d":"code","94d5a0e4":"code","a91ad498":"code","03d5a768":"code","fdc53510":"markdown","03c14158":"markdown","22da8d57":"markdown","1368833c":"markdown","c0141f13":"markdown","0f89f027":"markdown","6f81c5e0":"markdown","62d73ab9":"markdown","130bf2b2":"markdown","cbed91dd":"markdown","ee15c681":"markdown","4b9b5e5d":"markdown","2c1efe17":"markdown","78ecc659":"markdown","3886ce7a":"markdown","9bd207f4":"markdown","d53fa105":"markdown"},"source":{"883f4a3b":"import numpy as np\nimport pandas as pd\nimport math\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly import tools\npy.init_notebook_mode(connected=True)","219a0454":"NFA_df = pd.read_csv(\"..\/input\/NFA 2018.csv\")","9a507698":"NFA_df.info()","43813929":"def extract_country_by_record(df,country_name,record):\n    country_foot_print=df[df.country.isin([country_name])]\n    country_by_record = country_foot_print [country_foot_print.record.isin([record])]\n    return country_by_record\n\ndef extract_countries_feature_by_year (df,countries_list,feature,year,record=\"BiocapPerCap\"):\n    excluded_countries=[]\n    feature_values=[]\n    available_countries=[]\n    for i in range (0,len(countries_list)):\n        country_by_record = extract_country_by_record(df,countries_list[i],record)\n        feature_value = country_by_record.loc[lambda df1: country_by_record.year == year][feature].values\n        if  feature_value.size==0 or math.isnan(feature_value[0]) :\n            excluded_countries.append(countries_list[i])\n        else:\n            feature_values.append(feature_value[0]) \n            available_countries.append(countries_list[i])\n            \n#  activate if you need to print the excluded countries in the year\n#     if len(excluded_countries) != 0:\n#         print(\"excluded countries in {0} are : \".format(year))\n#         for i in excluded_countries:\n#             print(i)\n    return feature_values, available_countries, excluded_countries \ndef print_excluded_countries (excluded_countries,year):\n    if len(excluded_countries) != 0:\n        print(\"excluded countries from dataset in {0} are : \".format(year))\n        for i in excluded_countries:\n            print(i)   \n            \ndef calculate_growth_rate(present,past,period):\n    #present : present year , past: past year , period: number of years between present and past\n    percentage_growth_rate = ((present - past)\/(past*period))*100\n    return percentage_growth_rate","900e2ce6":"arab_countries = ['Egypt','Algeria','Bahrain','Libyan Arab Jamahiriya',\n                 'Jordan','Iraq','Mauritania','Morocco',\n                  'Saudi Arabia','Kuwait','Qatar','Sudan (former)',\n                 'Oman','Tunisia','United Arab Emirates','Yemen',\n                  'Lebanon','Syrian Arab Republic','Somalia','Comoros','Djibouti']\n\ncolors = ['blue','gray','red','green','pink',\n          'steelblue','yellow','magenta','brown',\n          'orange','tan','seagreen','olive',\n          'turquoise','mintcream','yellowgreen',\n          'darkkhaki','coral','chocolate','rosybrown',\n          'dodgerblue','heather']\n\nyears=np.sort(NFA_df.year.unique())\n\narab_df = pd.DataFrame()\nfor country in arab_countries:\n    arab_df=arab_df.append(NFA_df[NFA_df.country.isin([country])])","c97a0d7c":"regoin=[]\nsub_region=[]\nfor country in arab_countries:\n    regoin.append(arab_df[arab_df.country.isin([country])][\"UN_region\"].unique()[0])\n    sub_region.append(arab_df[arab_df.country.isin([country])][\"UN_subregion\"].unique()[0])\nregoin_labels = pd.Series(regoin).value_counts().index\nregoin_values = pd.Series(regoin).value_counts().values\nsub_region_labels = pd.Series(sub_region).value_counts().index\nsub_regoin_values = pd.Series(sub_region).value_counts().values\n\ntrace0  = go.Bar(x= regoin_labels,\n                 y= regoin_values,\n                 marker=dict(color='#f0000a',\n                             line=dict(color='rgb(8,48,107)',\n                                       width=1.5,)),\n                 opacity=0.7,\n                name = 'regoin',\n                hoverinfo=\"x + y\")\ntrace1  = go.Bar(x= sub_region_labels,\n                 y= sub_regoin_values,\n                 marker=dict(color='#fff000',\n                             line=dict(color='rgb(8,48,107)',\n                                       width=1.5,)),\n                 opacity=0.6,\n                name = 'sub_regoin',\n               hoverinfo=\"x + y\" )\ngo_plot = [trace0,trace1]\nlayout = go.Layout(\n    title='Arab countries distrbution according to regions',)\nfig = go.Figure(data=go_plot, layout=layout)\n\npy.iplot(fig)","66fecab5":"population,available_countries,excluded_countries=extract_countries_feature_by_year(arab_df,arab_countries,'population',2014)\navailable_countries.append(\"Sudan\")\npopulation.append(37737900)\npopulation_df = pd.DataFrame({'countery':available_countries,'population':population}).sort_values(by='population',ascending=True) \npopulation_list = list (population_df['population'])\ncountries = list (population_df['countery'])\nannotations = []\ny_nw = np.array(population_list)\n\nfor ydn,  xd in zip(y_nw, countries):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x', yref='y',\n                            y=xd, x=ydn + 5000000,\n                            text='{:,} M'.format(np.round(ydn\/10**6,2)),\n                            font=dict(family='Arial', size=12,\n                                      color='rgb(50, 0, 50)'),\n                            showarrow=False))\nfig  = {\n  \"data\": [\n    {\n      \"values\": population_list,\n      \"labels\": countries,\n      \"hoverinfo\":\"label+percent\",\n      \"hole\": .3,\n      \"type\": \"pie\",\n      'domain': {'x': [.4, 1],\n                       'y': [0.2, .8]},\n            'hoverinfo':'label+percent',\n            'textinfo':'percent'\n    },\n      {\n          \"x\": population_list,\n          \"y\": countries,\n          \"type\": \"bar\",\n          \"orientation\" :'h',\n          \"hoverinfo\":\"x\",\n          \"marker\" : dict(color='rgba(128, 0, 128,0.7)',\n                          line=dict(color='rgb(255,0,255)',\n                                       width=2)),\n          \n          \"opacity\":0.7,\n          \"name\":\"Population\",\n          } \n  ],\n  \"layout\": {\n        \"title\":\"Arab countries population 2014\",\n        'annotations': annotations,\n        \"yaxis\":dict(\n            showgrid=False,\n            showline=False,\n            showticklabels=True,\n            tickfont=dict(family='Arial', size=12,color='rgb(50, 0, 50)')),\n        \"width\": 1000,\n        \"height\":700,\n    \"paper_bgcolor\":'rgb(250, 240, 250)',\n    \"plot_bgcolor\":'rgb(250, 240, 250)',\n      \n}}\n\n\npy.iplot(fig)","44799f9c":"traces = []\nannotations = []\nfor i in range(len(arab_countries)):\n    country_by_record = extract_country_by_record(arab_df,arab_countries[i],'BiocapPerCap')\n    traces.append(go.Scatter(\n            x=country_by_record['year'],\n            y=country_by_record['population'],\n            mode='lines',\n            line=dict(color=colors[i], width=1.5),\n            text= arab_countries[i],\n            hoverinfo=\"text + x + y\",\n            connectgaps=True,\n            name =arab_countries[i],\n            textfont=dict(family='Arial', size=12),\n    ))\nlayout = go.Layout(\n    title = \"Arab countries population growth\",\n   xaxis=dict(\n            showline=True,\n            showgrid=True,\n            showticklabels=True,\n            linecolor='rgb(150, 150, 150)',\n            linewidth=2,\n            gridcolor='rgb(90, 90, 90)',\n            ticks='outside',\n            tickcolor='rgb(80, 80, 80)',\n            tickwidth=2,\n            ticklen=5,\n            tickfont=dict(\n            family='Arial',\n            size=13,\n            color='rgb(180, 180, 180)',\n        ),\n    ),\n    yaxis=dict(\n            showgrid=True,\n            zeroline=True,\n            showline=False,\n            gridcolor='rgb(80, 80, 80)',\n            showticklabels=True,\n            tickcolor='rgb(150, 150, 150)',\n            tickwidth=2,\n            ticklen=5,\n            tickfont=dict(\n            family='Arial',\n            size=13,\n            color='rgb(180, 180, 180)')\n    ),\n   font=dict(family='Arial', size=12,\n            color='rgb(180, 180, 180)'),\n            showlegend=True, \n            width = 900,\n            height = 700,\n            paper_bgcolor='rgba(0, 0, 0,.9)',\n            plot_bgcolor='rgba(0, 0, 0,0)'\n)\n    \nfig = go.Figure(data=traces, layout= layout)\npy.iplot(fig)","ad00daab":"population_2000,available_countries,excluded_countries_2000=extract_countries_feature_by_year(arab_df,arab_countries,'population',2000)\npopulation_2010,available_countries,excluded_countries_2010=extract_countries_feature_by_year(arab_df,arab_countries,'population',2010)\npopulation_growth_rate = []\nfor i in range (0,len(population_2000)):\n    growth_rate = np.round(calculate_growth_rate(population_2010[i],population_2000[i],10),2)\n    population_growth_rate.append(growth_rate)\ngrowth_rate_df = pd.DataFrame({\"country\":available_countries,\"growth rate\":population_growth_rate}).sort_values(by=\"growth rate\",ascending=False)\nprint_excluded_countries(excluded_countries_2000,2000)  \nprint_excluded_countries(excluded_countries_2010,2010)\ntable = go.Table(header=dict(values=['Country', 'Growth rate']),\n        cells=dict(values= [growth_rate_df['country'],growth_rate_df['growth rate'].astype(str)+\"%\"]))\npy.iplot([table])","61113654":"growth_rate_df=growth_rate_df.sort_values(by=\"growth rate\",ascending=True)\ntrace0  = go.Bar(x= growth_rate_df[\"growth rate\"],\n                 y= growth_rate_df[\"country\"],\n                 orientation ='h',\n                 marker=dict(color='rgba(255, 255, 0, 1.0)',\n                             line=dict(color='rgba(250, 80, 0, 1.0)',\n                                       width=4)),\n                opacity=0.7,\n                hoverinfo=\"x + y\")\n\nannotations = []\ny_nw = np.array(growth_rate_df[\"growth rate\"])\nfor ydn,  xd in zip(y_nw, growth_rate_df[\"country\"]):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x', yref='y',\n                            y=xd, x=ydn+0.9,\n                            text='{:,} %'.format(np.round(ydn,2)),\n                            font=dict(family='Arial', size=12,\n                                      color='rgba(250, 80, 0, 1.0)'),\n                            showarrow=False))\nlayout = go.Layout(\n                title='Arab countries annual growth rate of population [2000-2010]',\n                margin=dict(\n                        l=130,\n                        r=20,\n                        t=30,\n                        b=30,\n                    ),\n               annotations = annotations,\n               xaxis=dict(showgrid=True,\n                       gridcolor=\"rgba(250, 80, 0, .2)\",\n                       showticklabels=True,\n                       tickfont=dict(family='Arial', size=12,color='rgba(250, 80, 0, 1.0)')),\n               yaxis=dict(showgrid=False,\n                       showline=True,\n                       linecolor='rgba(250, 80, 0, 1.0)',\n                       showticklabels=True,\n                       tickfont=dict(family='Arial', size=12,color='rgba(250, 80, 0, 1.0)')),\n               font=dict(family='Arial', size=12,\n                       color='rgba(250, 80, 0, 1.0)'),\n               width = 1000,\n               height = 600,\n               paper_bgcolor='rgba(0, 0, 0,1)',\n               plot_bgcolor='rgba(0, 0, 0,0)',\n             )\n# Adding labels\n# Creating two subplots\n\n\nfig = go.Figure(data=[trace0], layout=layout)\n\npy.iplot(fig)","c92c29e0":"arab_countrs_population = []\nfor year in years:\n    sum_population_per_year = np.array(extract_countries_feature_by_year(arab_df,arab_countries,'population',year)[0]).sum()\n    arab_countrs_population.append(sum_population_per_year)\n","ef8bbf41":"arab_population_growth_rate = calculate_growth_rate(arab_countrs_population[49],arab_countrs_population[24],25)\ntrace0 = go.Scatter(\n    x= years[24:49],\n    y= arab_countrs_population[24:49],\n    hoverinfo = 'name+x+y',\n    name='Population',\n    mode = \"lines\",\n    line=dict(\n        color='rgba(220,220,150,1)',\n        width= 3)\n    )\nlayout = go.Layout(\n    title = \"Arab countries total population growth\",\n    annotations = [dict(xref = 'x', yref = 'y',\n                      x = 1990, y = arab_countrs_population[45],\n                      text='growth rate = {0} %'.format(np.round(arab_population_growth_rate,2)),\n                      font=dict(family='Arial', size=20,\n                                color='rgba(200, 150, 0, 1.0)'),\n                      showarrow=False)],\n\n    xaxis=dict(\n        showline=False,\n        showgrid=True,\n        showticklabels=True,\n        linecolor='rgb(150, 150, 150)',\n        linewidth=2,\n        gridcolor='rgb(90, 90, 90)',\n        ticks='outside',\n        tickcolor='rgb(80, 80, 80)',\n        tickwidth=2,\n        ticklen=5,\n        tickfont=dict(\n            family='Arial',\n            size=13,\n            color='rgb(180, 180, 180)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=True,\n        zeroline=True,\n        showline=False,\n        gridcolor='rgb(80, 80, 80)',\n        showticklabels=True,\n        tickcolor='rgb(180, 180, 180)',\n        tickwidth=2,\n        ticklen=5,\n        tickfont=dict(\n            family='Arial',\n            size=13,\n            color='rgb(180, 180, 180)')\n    ),\n   font=dict(family='Arial', size=12,\n             color='rgb(180, 180, 180)'),\n    showlegend=True, \n    width = 900,\n    height = 700,\n    paper_bgcolor='rgba(0, 0, 0,.95)',\n    plot_bgcolor='rgba(0, 0, 0,0)',\n)\n    \nfig = go.Figure(data=[trace0], layout= layout)\npy.iplot(fig)","09a0aa5d":"\ntraces = []\nannotations = []\nfor i in range(len(arab_countries)):\n    country_by_record = extract_country_by_record(arab_df,arab_countries[i],'BiocapPerCap')\n    traces.append(go.Scatter(\n        x=country_by_record['year'],\n        y=country_by_record['Percapita GDP (2010 USD)'],\n        mode='lines',\n        line=dict(color=colors[i], width=1.5),\n        text= arab_countries[i]+\"<br>\"+ country_by_record['Percapita GDP (2010 USD)'].dropna().apply(lambda x:int(x)).astype(str)+\" $\",\n        hoverinfo=\"text + x \",\n        connectgaps=True,\n        name =arab_countries[i],\n        textfont=dict(family='Arial', size=12),\n    ))\n\nworld_by_record = extract_country_by_record(NFA_df,'World','BiocapPerCap')\ntraces.append(go.Scatter(\n        x=world_by_record['year'],\n        y=world_by_record['Percapita GDP (2010 USD)'],\n        mode='lines',\n        line=dict(color=\"rgb(255,0,0)\", width=2.5, dash = 'dash'),\n        text= \"World\"+\"<br>\"+ world_by_record['Percapita GDP (2010 USD)'].dropna().apply(lambda x:int(x)).astype(str)+\" $\",\n        hoverinfo=\"text + x \",\n        connectgaps=True,\n        name =\"World\",\n        textfont=dict(family='Arial', size=12),\n    ))\n    \nlayout = go.Layout(\n    title = \"Arab countries GDP per capita\",\n    xaxis=dict(\n        showline=True,\n        showgrid=True,\n        showticklabels=True,\n        linecolor='rgb(150, 150, 150)',\n        linewidth=2,\n        gridcolor='rgb(90, 90, 90)',\n        ticks='outside',\n        tickcolor='rgb(80, 80, 80)',\n        tickwidth=2,\n        ticklen=5,\n        tickfont=dict(\n            family='Arial',\n            size=13,\n            color='rgb(180, 180, 180)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=True,\n        zeroline=True,\n        showline=False,\n        gridcolor='rgb(80, 80, 80)',\n        showticklabels=True,\n        tickcolor='rgb(150, 150, 150)',\n        tickwidth=2,\n        ticklen=5,\n        tickfont=dict(\n            family='Arial',\n            size=13,\n            color='rgb(180, 180, 180)')\n    ),\n   font=dict(family='Arial', size=12,\n             color='rgb(180, 180, 180)'),\n    showlegend=True, \n    width = 900,\n    height = 700,\n    paper_bgcolor='rgba(0, 0, 0,.95)',\n    plot_bgcolor='rgba(0, 0, 0,0)',\n)\n    \nfig = go.Figure(data=traces, layout= layout)\npy.iplot(fig)\n","fb577e3e":"gdp,avilable_countries,excluded_countries = extract_countries_feature_by_year (arab_df,arab_countries,'Percapita GDP (2010 USD)',2014,record=\"BiocapPerCap\")\nlocations = []\ncountries = avilable_countries + excluded_countries \nfor c in countries:\n    country_by_record = extract_country_by_record(arab_df,c,\"BiocapPerCap\")\n    code = country_by_record.loc[lambda df1: country_by_record.year == 2014]['ISO alpha-3 code'].values\n    if  not (code.size==0):\n        locations.append (country_by_record.loc[lambda df1: country_by_record.year == 2014]['ISO alpha-3 code'].values[0])\n    else:\n        locations.append(\"SDN\")    # only sudan dose not have and data after 2014 so it return empety array\n    \nfor i in range(len(excluded_countries)):\n    gdp.append(\"NAN\")  \ndata = [ dict(\n        type = 'choropleth',\n        locations = locations,\n        z = gdp,\n        text = countries  ,\n        colorscale = [[0,\"rgb(5, 10, 172)\"],[0.35,\"rgb(40, 60, 190)\"],[0.5,\"rgb(70, 100, 245)\"],\\\n            [0.6,\"rgb(90, 120, 245)\"],[0.7,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"]],\n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5 )\n        ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '$',\n            title = 'GDP per capita<br> US$'),\n      ) ]\n\nlayout = dict(\n    title = '2014 Arab countries GDP per capita',\n    geo = dict(\n        showframe = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'equirectangular'\n        )\n    )\n    )\n\nfig = dict( data=data, layout=layout )\npy.iplot( fig, validate=False )","7a09204e":"GDP,available_countries, excluded_countries=extract_countries_feature_by_year(arab_df,arab_countries,'Percapita GDP (2010 USD)',2014)\nGDP_df = pd.DataFrame({'country':available_countries,'GDP':GDP}).sort_values(by='GDP',ascending=True)\ntrace0  = go.Bar(x= GDP_df[\"GDP\"],\n                 y= GDP_df[\"country\"],\n                 orientation ='h',\n                 marker=dict(color='rgba(255, 255, 0, 1.0)',\n                             line=dict(color='rgba(250, 80, 0, 1.0)',\n                                       width=4)),\n                 opacity=0.7,\n                 name=\"GDP\",\n                hoverinfo=\"name+x + y\")\n\nannotations = []\ny_nw = np.array(GDP_df[\"GDP\"])\nfor ydn,  xd in zip(y_nw, GDP_df[\"country\"]):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x', yref='y',\n                            y=xd, x=ydn+3000,\n                            text='{:,} $'.format(np.int(ydn)),\n                            font=dict(family='Arial', size=12,\n                                      color='rgba(250, 80, 0, 1.0)'),\n                            showarrow=False))\n    \nlayout = go.Layout(\n    title='2014 Arab countries GDP per cabita',\n     margin=dict(\n        l=130,\n        r=20,\n        t=30,\n        b=30,\n    ),\n    annotations = annotations,\n    xaxis=dict(showgrid=True,\n               gridcolor=\"rgba(250, 80, 0, .2)\",\n               showticklabels=True,\n               tickfont=dict(family='Arial', size=12,color='rgba(250, 80, 0, 1.0)')),\n    yaxis=dict(showgrid=False,\n               showline=False,\n               linecolor='rgba(250, 80, 0, 1.0)',\n               showticklabels=True,\n               tickfont=dict(family='Arial', size=12,color='rgba(250, 80, 0, 1.0)')),\n    font=dict(family='Arial', size=12,\n             color='rgba(250, 80, 0, 1.0)'),\n    width = 1000,\n    height = 600,\n    paper_bgcolor='rgba(0, 0, 0,1)',\n    plot_bgcolor='rgba(0, 0, 0,0)',\n             )\n# Adding labels\n# Creating two subplots\n\n\nfig = go.Figure(data=[trace0], layout=layout)\n\npy.iplot(fig)","d11a3373":"cuntries = extract_countries_feature_by_year(arab_df,arab_countries,'Percapita GDP (2010 USD)',2014)[1]\ny = extract_countries_feature_by_year(arab_df,cuntries,'Percapita GDP (2010 USD)',2014)[0]\nx = extract_countries_feature_by_year(arab_df,cuntries,'population',2014)[0]\n\ncolors = np.random.rand(22)\ntext = []\nfor i in range (len(cuntries)):\n    text.append(cuntries[i]+\"<br>\"+\"GDP Percap: {0} K\".format(np.round((y[i]\/10**3),2))+\"<br>\"+\"population: {0} M\".format(np.round((x[i]\/10**6),2)))\nannotations = []\ny_nw = np.array(y)\nfor ydn,  xd , c in zip(y_nw, x,cuntries):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x', yref='y',\n                            y=ydn, x=xd,\n                            text= c,\n                            font=dict(family='Raleway', size=12,\n                                      color='rgba(50, 50, 50, 1.0)'),\n                           showarrow=False))\n# The marker size is proportional to population\ntrace = go.Scatter(x=x,\n                y=y,\n                text = text,\n                mode='markers',\n                hoverinfo = 'text ',\n                marker={'size': x,        \n                        'color': colors,\n                        'opacity': 0.6,\n                        'sizemode' : 'area',\n                        'sizeref' : 40000,\n                        'colorscale': 'Viridis'\n                       });\nlayout = go.Layout(title = \" GDP and Population\",\n                  yaxis=dict(title = \"GDP per capita\"),\n                  xaxis=dict(title = \"Population\"),\n                  height = 700)\nfig = go.Figure(data=[trace],layout = layout)\npy.iplot(fig)","fff4b4c0":"arab_consumption_corr=arab_df[arab_df.record.isin([\"EFConsPerCap\"])].drop('year',axis=1).corr()\ncons_heatmap = go.Heatmap(z=arab_consumption_corr.values,x=arab_consumption_corr.index,y=arab_consumption_corr.index)\nlayout = go.Layout(title = \"Correlation between features according to ecological footprint (per capita)\")\nfig = go.Figure(data=[cons_heatmap], layout=layout)\n\npy.iplot(fig)","37297ab5":"biocapcity_corr=arab_df[arab_df.record.isin([\"BiocapPerCap\"])].drop(['year','carbon'],axis=1).corr()\nbiocap_heatmap = go.Heatmap(z=biocapcity_corr.values,x=biocapcity_corr.index,y=biocapcity_corr.index)\nlayout = go.Layout(title = \"Correlation between features according to biocapcity\")\nfig = go.Figure(data=[biocap_heatmap], layout=layout)\n\npy.iplot(fig)\n","d69a3814":"record ={1:['BiocapPerCap','EFConsPerCap','rgba(0,255,0,1)','rgba(255,0,0,1)'],\n         2:['BiocapTotGHA','EFConsTotGHA','rgba(0,140,0,1)','rgba(140,0,0,1)'],}\n\nfor c in range (0,len(arab_countries)):\n    fig = tools.make_subplots(rows=1, cols=2, specs=[[{},{}]], horizontal_spacing=0.1,\n                         subplot_titles=[\"BioCapacity vs Ecological footprint (per capita)\",\"BioCapacity vs Ecological footprint (GHA)\"])\n    for r in record.keys():\n            country_by_record_bio = extract_country_by_record(arab_df,arab_countries[c],record[r][0])\n            country_by_record_cons = extract_country_by_record(arab_df,arab_countries[c],record[r][1])\n            trace1 = go.Scatter(\n            x=country_by_record_bio['year'],\n            y=country_by_record_bio['total'],\n            mode= 'lines',\n            name = record[r][0],\n            line=dict(color=record[r][2], width=1.5),\n            hoverinfo=\"y + x \",\n            textfont=dict(family='Arial', size=12),\n        )\n            trace2 = go.Scatter(\n            x=country_by_record_cons['year'],\n            y=country_by_record_cons['total'],\n            mode='lines',\n            name = record[r][1],\n            line=dict(color=record[r][3], width=1.5),\n            hoverinfo=\"y + x \",\n            textfont=dict(family='Arial', size=12),\n        )\n            data= [trace1,trace2]\n\n            fig.append_trace(trace1, 1, r)\n            fig.append_trace(trace2, 1, r)\n    fig['layout'].update(height=450, width=1000,\n                     title=arab_countries[c])\n    py.iplot(fig)\n\n\n","2cbe0d45":"Arab_BiocapTotal = []\nArab_EFConsTotal = []\nArab_BiocapPerCap = []\nArab_EFConsPerCap = []\nworld_BiocapTotal = []\nworld_EFConsTotal = []\nmean_BiocapPerCap = []\nmean_EFConsPerCap = []\nfor year in years :\n    sum_BiocapTotal_value = np.array(extract_countries_feature_by_year(arab_df,arab_countries,'total',year,record= 'BiocapTotGHA')[0]).sum()\n    sum_EFConsTotal_value = np.array(extract_countries_feature_by_year(arab_df,arab_countries,'total',year,record='EFConsTotGHA')[0]).sum()\n    sum_population_per_year = np.array(extract_countries_feature_by_year(arab_df,arab_countries,'population',year)[0]).sum()\n    world_BiocapTotal.append(np.array(extract_countries_feature_by_year(NFA_df,['World'],'total',year,record= 'BiocapTotGHA')[0]))\n    world_EFConsTotal.append(np.array(extract_countries_feature_by_year(NFA_df,['World'],'total',year,record= 'EFConsTotGHA')[0]))\n    Arab_BiocapTotal.append(sum_BiocapTotal_value)\n    Arab_EFConsTotal.append(sum_EFConsTotal_value)\n    Arab_BiocapPerCap.append(sum_BiocapTotal_value\/sum_population_per_year)\n    Arab_EFConsPerCap.append(sum_EFConsTotal_value\/sum_population_per_year)\n    mean_BiocapPerCap.append(np.array(extract_countries_feature_by_year(arab_df,arab_countries,'total',year)[0]).mean())\n    mean_EFConsPerCap.append(np.array(extract_countries_feature_by_year(arab_df,arab_countries,'total',year,record='EFConsPerCap')[0]).mean())","8d646536":"fig = tools.make_subplots(rows=2, cols=2, specs=[[{},{}],[{'colspan': 2}, None]], horizontal_spacing=0.1, vertical_spacing = 0.1,\n                         subplot_titles=[\"Per capita\",\"Mean (per capita)\",\"Total (GHA)\"])\n\narab_biocapPerCap_plt = go.Scatter(\n            x=years[19:],\n            y=Arab_BiocapPerCap[19:],\n            mode= 'lines',\n            name = \"Biocapcity\",\n            line=dict(color=\"green\", width=1.5),\n            hoverinfo=\"y + x \",\n            textfont=dict(family='Arial', size=12),\n        )\narab_EFperCap_plt = go.Scatter(\n            x=years[19:],\n            y=Arab_EFConsPerCap[19:],\n            mode='lines',\n            name = \"Ecological footprint\",\n            line=dict(color=\"red\", width=1.5),\n            hoverinfo=\"y + x \",\n            textfont=dict(family='Arial', size=12),\n        )\n\nfig.append_trace(arab_biocapPerCap_plt, 1, 1)\nfig.append_trace(arab_EFperCap_plt, 1, 1)\n\narab_meanBiocapPerCap_plt = go.Scatter(\n            x=years[19:],\n            y=mean_BiocapPerCap[19:],\n            mode= 'lines',\n            showlegend = False,\n            line=dict(color=\"green\", width=1.5),\n            hoverinfo=\"y + x \",\n            textfont=dict(family='Arial', size=12),\n        )\narab_meanEFperCap_plt = go.Scatter(\n            x=years[19:],\n            y=mean_EFConsPerCap[19:],\n            mode='lines',\n            showlegend = False,\n            line=dict(color=\"red\", width=1.5),\n            hoverinfo=\"y + x \",\n            textfont=dict(family='Arial', size=12),\n        )\n\nfig.append_trace(arab_meanBiocapPerCap_plt, 1, 2)\nfig.append_trace(arab_meanEFperCap_plt, 1, 2)\n\narab_totalBiocap_plt = go.Scatter(\n            x=years[19:],\n            y=Arab_BiocapTotal[19:],\n            mode= 'lines',\n            showlegend = False,\n            line=dict(color=\"green\", width=1.5),\n            hoverinfo=\"y + x \",\n            textfont=dict(family='Arial', size=12),\n        )\narab_totalEF_plt = go.Scatter(\n            x=years[19:],\n            y=Arab_EFConsTotal[19:],\n            mode='lines',\n            showlegend = False,\n            line=dict(color=\"red\", width=1.5),\n            hoverinfo=\"y + x \",\n            textfont=dict(family='Arial', size=12),\n        )\n\nfig.append_trace(arab_totalBiocap_plt, 2, 1)\nfig.append_trace(arab_totalEF_plt, 2, 1)\n\n            \nfig['layout'].update(height=900, width=1000,\n                     title= \"Arab World BioCapacity vs Ecological footprint\")\npy.iplot(fig)","9a9547f3":"difference  = []\ncountries_list = []\ndeficit_or_reserve = []\nfor country in arab_countries:\n    BiocapPerCap=np.array(extract_countries_feature_by_year(arab_df,[country],'total',2014)[0])\n    EFConsPerCap=np.array(extract_countries_feature_by_year(arab_df,[country],'total',2014,record=\"EFConsPerCap\")[0])\n    difference_value = BiocapPerCap - EFConsPerCap\n    if difference_value < 0 :\n        deficit_or_reserve.append (\"deficit\")\n        difference.append(np.abs(difference_value[0]))\n    if difference_value > 0 :\n        deficit_or_reserve.append(\"reserve\")\n        difference.append(difference_value[0])\n    if difference_value.size==0:\n        deficit_or_reserve.append(\"nan\")\n        difference.append(np.NAN)\n    countries_list.append(country)\ndefict_reserve_df = pd.DataFrame({\"country\":countries_list,\"deficit\/reserve\":deficit_or_reserve,\"value\":difference}).dropna().sort_values(by=\"value\",ascending=False)\n","2ac09431":"trace0 = go.Bar(\n    y=defict_reserve_df[defict_reserve_df['deficit\/reserve'].isin(['deficit'])]['country'],\n    x=defict_reserve_df[defict_reserve_df['deficit\/reserve'].isin(['deficit'])]['value'],\n    orientation ='h',\n    name='Deficit',\n    marker=dict(\n        color='rgb(180,0,0)'\n    )\n)\ntrace1 = go.Bar(\n    y=defict_reserve_df[defict_reserve_df['deficit\/reserve'].isin(['reserve'])]['country'],\n    x=defict_reserve_df[defict_reserve_df['deficit\/reserve'].isin(['reserve'])]['value'],\n    orientation ='h',\n    name='Reserve',\n    marker=dict(\n        color='rgb(0,180,0)',\n    )\n)\ndata = [trace0, trace1]\nlayout = go.Layout(title = \"Arab countries Ecological footprint [Deficit\/Reserve] (per capita) 2014\",\n                   yaxis = dict(showline = False,\n                               zeroline = False),\n                   width=900,height=500,\n                   margin=dict(\n                        l=140,\n                        r=20,\n                        t=30,\n                        b=30)\n                   )\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","1c5e9981":"defict_reserve_df","aa4918c4":"def extract_defict_value (df,country_name):\n    c =df[df.country.isin([country_name])]\n    if c['deficit\/reserve'].values.size !=0 :\n        if (c['deficit\/reserve'].values[0]=='deficit'):\n            return c['value'].values[0]\n         \ndeficit_value = []\nfor c in cuntries :\n    if extract_defict_value(defict_reserve_df,c) != None:\n        deficit_value.append(extract_defict_value(defict_reserve_df,c))\n    else:\n        continue\n","0ab37288":"cuntries = extract_countries_feature_by_year(arab_df,arab_countries,'Percapita GDP (2010 USD)',2014)[1]\ncuntries.remove('Mauritania')     # remove Mauritania as it has no deficit \nx = extract_countries_feature_by_year(arab_df,cuntries,'Percapita GDP (2010 USD)',2014)[0]\ny = deficit_value\ncolors = np.random.rand(100)\nsz = (np.array(y)*10000)\ntext = []\nfor i in range (len(cuntries)):\n    text.append(cuntries[i]+\"<br>\"+\"GDP: {0} K\".format(np.round((x[i]\/10**3),2))+\"<br>\"+\"Deficit: {0}\".format(np.round((y[i]),2)))\nannotations = []\ny_nw = np.array(y)\nfor ydn,  xd , c in zip(y_nw, x,cuntries):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x', yref='y',\n                            y=ydn, x=xd,\n                            text= c,\n                            font=dict(family='Raleway', size=11,\n                                      color='rgba(50, 50, 50, 1.0)'),\n                            showarrow=False))\ntrace = go.Scatter(x=x,\n                y=y,\n                text = text,\n                mode='markers',\n                hoverinfo = 'text ',\n                marker={'size': sz,\n                        'color': colors,\n                        'opacity': 0.5,\n                        'sizemode' : 'area',\n                        'sizeref' : 80,\n                        'colorscale': 'Viridis'\n                       });\nlayout = go.Layout(title= \" Ecological deficit and GDP\",\n                  yaxis=dict(title = \"Ecological deficit (per capita)\"),\n                  xaxis=dict(title = \"GDP per capita\"),\n                  annotations = annotations,\n                  height = 700,\n                  width = 1500)\nfig = go.Figure(data=[trace],layout = layout)\npy.iplot(fig)","f6adb24d":"import datetime\narab_eod_dates = []\neod_dates_world=[]\ndef calc_earth_overshot_day(biocap,ecofootp):\n    eod = (np.array(biocap) \/ np.array(ecofootp))*365\n    return eod\neod_arab = calc_earth_overshot_day(Arab_BiocapTotal,Arab_EFConsTotal)\neod_world = calc_earth_overshot_day(world_BiocapTotal,world_EFConsTotal)\neod_month_arab = []\neod_month_world = []\nfor i in range (0,len(eod_arab)):\n    if eod_arab[i]>365:\n        arab_eod_dates.append(\"no EOD\")\n        eod_month_arab.append(\"no EOD\")\n    if eod_world[i]>365:\n        eod_dates_world.append(\"no EOD\")\n        eod_month_world.append(\"no EOD\")\n    if eod_arab[i] < 365:\n        date_arab = datetime.datetime(years[i],1,1) + datetime.timedelta(days=eod_arab[i])\n        eod_month_arab.append(date_arab.strftime('%b'))\n        arab_eod_dates.append(date_arab.strftime('%b-%d'))\n    if eod_world[i] < 365:\n        date_world = datetime.datetime(years[i],1,1) + datetime.timedelta(days=int(eod_world[i]))\n        eod_month_world.append(date_world.strftime('%b'))\n        eod_dates_world.append(date_world.strftime('%b-%d'))\n        #[19:] represents the year that the EOD begins to appear \neod_df = pd.DataFrame({\"year\":years[19:],\"Arab Earth Overshoot Day\":arab_eod_dates[19:],\"World Earth Overshoot Day\":eod_dates_world[19:]})\neod_df","94d5a0e4":"EOD_arab_plt = go.Scatter(\n            x=eod_df['year'],\n            y= eod_month_arab[19:],\n            mode= 'lines',\n            name = \"Arab EOD\",\n            text = eod_df[\"Arab Earth Overshoot Day\"],\n            line=dict(color=\"green\", width=1.5),\n            hoverinfo=\"name + text + x \",\n            textfont=dict(family='Arial', size=12),\n        )\nEOD_world_plt = go.Scatter(\n            x=eod_df['year'],\n            y= eod_month_world[19:],\n            mode= 'lines',\n            name = \"World EOD\",\n            text = eod_df[\"World Earth Overshoot Day\"],\n            line=dict(color=\"red\", width=1.5),\n            hoverinfo=\"name + text + x \",\n            textfont=dict(family='Arial', size=12),\n        )\nlayout = go.Layout(title= \"Earth Overshoot Day\",\n                  yaxis=dict(title = \"Month\"),\n                  xaxis=dict(title = \"Year\"),\n                  height = 500,\n                  width = 800)\n\nfig = go.Figure(data=[EOD_arab_plt,EOD_world_plt],layout=layout)\npy.iplot(fig)","a91ad498":"Arab_carbon,available_countries,excluded_countries=extract_countries_feature_by_year(arab_df,arab_countries,'carbon',2014,record=\"EFConsPerCap\")\ncarbon_df = pd.DataFrame({'country':available_countries,'carbon':Arab_carbon}).sort_values(by='carbon',ascending=False)","03d5a768":"avail_countris = extract_countries_feature_by_year(arab_df,carbon_df['country'],'Percapita GDP (2010 USD)',2014)[1]\ny = avail_countris\nx = extract_countries_feature_by_year(arab_df,avail_countris,'Percapita GDP (2010 USD)',2014)[0]\nsize = extract_countries_feature_by_year(arab_df,avail_countris,'carbon',2014,record=\"EFConsPerCap\")[0]\ncolors = size\ntext = []\nfor i in range (len(avail_countris)):\n    text.append(y[i]+\"<br>\"+\"GDP Percap: {0} K\".format(np.round((x[i]\/10**3),2))+\"<br>\"+\"EFcarbon: {0} \".format(np.round((np.array(size)[i]),2)))\n\ntrace = go.Scatter(x=x,\n                y=y,\n                text = text,\n                mode='markers',\n                hoverinfo = 'text ',\n                name = \"EFCarbon\",\n                showlegend = False,\n                marker={'size': size,        \n                        'color': colors,\n                        'opacity': 0.6,\n                        'sizemode' : 'area',\n                        'sizeref' : 0.005,\n                        'colorscale': 'Portland',\n                         'showscale' : True,\n                         'cmax' : np.max(size),\n                         'cmin' : np.min(size),\n                         'colorbar' : dict( y= 0.52,\n                                            len= .8,\n                                            x = 1,\n                                            title = \"EF Carbon\",\n                                            titlefont = dict(size=15))\n                       },\n                  \n                  );\nlayout = go.Layout(\n                  title = \"Ecological footprint of Carbon and GDP (per capita) [2014]\",\n                  xaxis=dict(title = \"GDP (per capita)\",\n                             titlefont = dict (family = \"Arial\"),\n                             zeroline=False),\n                  yaxis=dict(\n                        zeroline=True,\n                        showticklabels=True,\n                        tickfont=dict(family='Arial', size=12)),\n                  margin=dict(\n                        l=140,\n                        r=20,\n                        t=40,\n                        b=45,),\n                  width = 1000,\n                  height = 700)\nfig = go.Figure(data=[trace],layout = layout)\npy.iplot(fig)\n","fdc53510":"# Ecological footprint analysis\n[The Ecological footprint ](https:\/\/en.wikipedia.org\/wiki\/Ecological_footprint) is a way to measure the interaction between people and the enviroment or nature by measuring the needs of people from nature and the ability of nature to renew this needs. so, the footprint depends heavily on the number of people and thier ways and behaviors in consumption the natural resources.\n\nThe biocapacity is a way to represent the available amount of natural resources for human consumptions. The biocapacity of an area is calculated by multiplying the actual physical area by the yield factor and the appropriate equivalence factor. \n ","03c14158":"The plot shows that the richest countries has the highest deficit and the poorest one has the lowest deficit. It indictes that the higher the income in the country the higher the consumption of its residents as they have the ability to buy more. The contrast happens with the poorest countries.","22da8d57":"**Arab countries distrbution according to regions**","1368833c":"# Population analysis\nThe dataset dose not have population data for Sudan because after the end of the civil war Sudan splits into two countries Sudan in the north and South Sudan in the south. That is why sudan found under the name Sudan (former) . Even that Sudan is considered one of the most populated arab countries with population reached approximately to 40 million. \n As I compare between the countries according to the available data which ended in 2014. I appended the population of Sudan to the list to have more clear comparison. The source of population data for sudan in 2014 is [here](https:\/\/www.google.com.eg\/publicdata\/explore?ds=d5bncppjof8f9_&ctype=l&strail=false&bcs=d&nselm=h&met_y=sp_pop_totl&scale_y=lin&ind_y=false&rdim=country&idim=country:SDN&ifdim=country&hl=en&dl=en&ind=false&icfg) .\n\n![](http:\/\/newsimg.bbc.co.uk\/media\/images\/42426000\/gif\/_42426259_sou_sud_jub_map203.gif)","c0141f13":"The plot shows  the strong relation between the GDP and the carbon EF. The countries with high GDP have a high carbon EF. it indicates that they have a high carbon emission so, they need more forests to neutralize this emission.","0f89f027":"# Arab Countries Ecological Footprint Analysis according to NFA  \nThe National Footprint Accounts (NFAs) measure the ecological resource use and resource capacity of nations over time using . \n\nThe dataset uses  [the global hectare](https:\/\/recyclenation.com\/green-glossary\/global-hectare-gha\/) unit to measure the ecological footprint. The global hectare is based on the area-weighted average productivity of usable land and water in a given year. Because different land types have different productivity, a global hectare of, for example, cropland, would occupy a smaller physical area than the much less biologically productive pasture land, as more pasture would be needed to provide the same biocapacity as one hectare of cropland. Because world bioproductivity varies slightly from year to year, the value of a GHA may change slightly from year to year. \nwe will use this dataset to analyse the ecological footprint of Arab countries or Arab world. \n\n![Arab World](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/e4\/The_Arab_Countries.png)[The Arab world](https:\/\/en.wikipedia.org\/wiki\/Arab_world#cite_note-Frishkopf-6) (Arabic: \u0627\u0644\u0639\u0627\u0644\u0645 \u0627\u0644\u0639\u0631\u0628\u064aalso known as the Arab nation or the Arab states or countries currently consists of the 22 Arab countries of the Arab League. The Arab League includes Algeria, Bahrain, Comoros, Djibouti, Egypt, Iraq, Jordan, Kuwait, Lebanon, Libya, Mauritania, Morocco, Oman,  Palestine , Qatar, Saudi Arabia, Somalia, Sudan, Syria, Tunisia, the United Arab Emirates, and Yemen. By adding Iran and Turkey they will represent the Middle East and North Africa region or MENA region.    \n![](https:\/\/thumbs.dreamstime.com\/b\/carte-et-environs-de-ligue-arabe-28727740.jpg)\n\nUnfortunately, The dataset dose not include any information about Palestine, hope to include it in the next versions as it is very important Arabic Country. So, the analysis will be for the remaining 21 countries.\n\n****Dataset columns descrbtion****\n\n***Country:*** Country name\n\n***ISO:*** alpha-3 code of the country.\n\n***UN_region:*** Region of the country.\n\n***UN_subregion:*** Subregion of the country.\n\n***year:*** Year in which values are calculated.\n\n***record:*** Description of reported global hectares.\n\n***crop_land:*** Global hectares of crop land (used for crops & crop-derived products) available or demanded. Biocapacity = Footprint of production because all biocapacity is used for production.\n\n***grazing_land:*** Global hectares of grazing land (used for meat, dairy, leather, etc.) available or demanded.\nIncludes global hectares used for grazing, but not crop land used to produce feed for animals.\nforest_landGlobal hectares of forest land available (for sequestration and timber, pulp, or timber products) or demanded (for timber, pulp, or timber products).\n\n***fishing_ground:*** Global hectares of marine and inland fishing grounds (used for fish & fish products) available or demanded.\n\n***built_up_land:*** Global hectares of built-up land (land cover of human infrastructure) available or demanded. Not traded. Biocapacity equals Footprint of Production because 100% of biocapacity covered counts as that demanded by infrastructure coverage.\n\n***carbon:*** Global hectares of world-average forest required to sequester carbon emissions.\n\n***total:*** The sum of all land types for this country, year, and record.\n\n***Percapita GDP (2010 USD):*** Per capita GDP in constant 2010 USD (source: World Bank).\n\n***population:*** population rounded to thousands (FAO estimate).","6f81c5e0":"**Dataset information**","62d73ab9":"**Correlation between features according to Ecological footprint**","130bf2b2":"**Population and  GDP per capita**","cbed91dd":"## Conclusion\n\n**The analysis shows that:**\n1.  There are strong gabs between the Arab countries especially in the GDP. \n2. There is strong relation between the GDP and Ecological footprint. The high the GDP, the high the Ecological footprint.\n3. The high deficit in the Ecological footprint happens with the countries with high GDP.\n4. In arab countries the high populated countries have low GDP per capita.\n5. The  Carbon Ecological footprint increased  proportionally with the GDP.","ee15c681":"**Analysing the Deficit\/Reserve values of Ecological footprint**\n\nThe deficit happens if the needs of the country exeeds its natural resources ability to renew itself. It means that they need extra resources to cover their needs. In contrary, the reserve happens if the needs could be covered by the available natural resources of the country or region. ","4b9b5e5d":"# Carbon Footprint\nThe carbon footprint is the required amount of forest land to absorb the emitted carbon.  the number reflects the amount of emitted carbon for every country.","2c1efe17":"**All countries as one big country**","78ecc659":"**Correlation between features according to biocapcity**","3886ce7a":"**Calculate the Earth Overshoot Day**\n\nEarth Overshoot Day (EOD), is the calculated illustrative calendar date on which humanity\u2019s resource consumption for the year exceeds Earth\u2019s capacity to regenerate those resources that year. Earth Overshoot Day is calculated by dividing the world biocapacity (the amount of natural resources generated by Earth that year).\n\n$\\mathbf {Earth Overshoot Day = (  Biocapacity  \/   Ecological Footprint ) x 365}$","9bd207f4":"**Countries Biocapacity vs Ecological Footprint**\n\nThe high the gab between the biocapacity and the consumption for biocapacity means that the country has the enough natural resources to cover its needs. So, in this section we will analyse the available data for biocapacity and Ecological Footprint Consumption (EFCons) to see if the resources is enough to cover people consumption. ","d53fa105":"# Gross Domestic Product (GDP) analysis\n\nGross domestic product (GDP) is the best way to measure a country's economy. GDP is the total value of all products produced by the people and companies in the country. It doesn't matter if they are citizens or foreign-owned companies. If they are located within the country's boundaries, the government counts their production as GDP.\nIn the dataset there is the GDP per Capita for countries which is considered a better way to compare the GDP between them. This divides GDP by the population.So, It\u2019s a good way to measure  the country's standard of living.\n"}}