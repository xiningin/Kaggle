{"cell_type":{"c38e475f":"code","0266f73d":"code","b87b9936":"code","a561a550":"code","832d10eb":"code","27340b43":"code","de240081":"code","44c76097":"code","5b2c9606":"code","c60fd353":"code","ad5bd456":"code","49c5246a":"code","c7f34a1d":"code","ca48488b":"code","ef22d0bb":"code","984adc2c":"code","bb6444a7":"code","7f660a50":"markdown","907ed299":"markdown","69e433b4":"markdown","9b5fa04e":"markdown","a346569b":"markdown"},"source":{"c38e475f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0266f73d":"import matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport math\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM","b87b9936":"df = pd.read_csv('\/kaggle\/input\/ford-stock-data\/F.csv')\ndf.head()","a561a550":"fig = px.line(df, x='Date', y=\"Close\",title='Close Price History')\n\nfig.update_traces(line=dict(color='gold'))\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,},\n                 paper_bgcolor='rgb(248, 248, 255)',\n                 plot_bgcolor='rgb(248, 248, 255)',\n                 title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },\n                        'x':0.45,'y':0.9})\nfig.show()","832d10eb":"data = df.filter(['Close'])\n\ndataset = data.values\n\ntraining_data_len = math.ceil(len(dataset)* .8)\n\ntraining_data_len","27340b43":"scaler = MinMaxScaler(feature_range=(0,1))\n\nscaled_data = scaler.fit_transform(dataset)\n\nscaled_data","de240081":"train_data = scaled_data[0:training_data_len, : ]\n\nx_train = []\ny_train = []\n\nfor i in range(60, len(train_data)):\n    x_train.append(train_data[i-60:i, 0])\n    y_train.append(train_data[i,0])","44c76097":"x_train , y_train = np.array(x_train), np.array(y_train)\n\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n\nx_train.shape","5b2c9606":"model = Sequential()\nmodel.add(LSTM(50, return_sequences =True, input_shape=(x_train.shape[1],1)))\nmodel.add(LSTM(50, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))","c60fd353":"model.compile(optimizer='adam', loss='mean_squared_error') \n#optimizer is used to improve on loss function & loss function is used to measure how the model did on training data.","ad5bd456":"model.fit(x_train,y_train, batch_size=1,epochs=1)\n# epochs is number of iteration when entire dataset is passed forward & backward through a neural network","49c5246a":"test_data = scaled_data[training_data_len - 60:, :]\n\nx_test = []\ny_test = dataset[training_data_len: , :]\n\nfor i in range(60, len(test_data)):\n    x_test.append(test_data[i-60:i,0])","c7f34a1d":"x_test = np.array(x_test)","ca48488b":"x_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1], 1))","ef22d0bb":"pred = model.predict(x_test)\ny_pred = scaler.inverse_transform(pred)","984adc2c":"from sklearn.metrics import mean_squared_error\n\nrmse = np.sqrt(np.mean(y_pred - y_test)**2)\nrmse","bb6444a7":"train = data[: training_data_len]\nvalid = data[training_data_len :]\nvalid['predictions'] = y_pred\n\nplt.figure(figsize=(15,6))\nplt.title('Model')\nplt.xlabel('Date',fontsize=18)\nplt.ylabel('Close Prices USD $')\nplt.plot(train['Close'])\nplt.plot(valid[['Close','predictions']])\nplt.legend(['Train','Val','Predictions'])\nplt.show()\n","7f660a50":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:black;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:white;\n              text-align:center;\">\n                            Build LSTM Model\n              \n<\/p>\n<\/div>","907ed299":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:black;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:white;\n              text-align:center;\">\n                            Scaling Data\n              \n<\/p>\n<\/div>","69e433b4":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:black;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:white;\n              text-align:center;\">\n                            Compile Model\n              \n<\/p>\n<\/div>","9b5fa04e":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:black;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:white;\n              text-align:center;\">\n                            Converting Data into Array + Reshaping The Data\n              \n<\/p>\n<\/div>","a346569b":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:black;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:white;\n              text-align:center;\">\n                            Splitting Data\n              \n<\/p>\n<\/div>"}}