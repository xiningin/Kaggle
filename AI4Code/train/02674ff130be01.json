{"cell_type":{"03c6c653":"code","b9a199c7":"code","9c4c41af":"code","e7dcc7e7":"code","1cce50ca":"code","464e5270":"code","fcc81c50":"code","2ada2577":"code","09139468":"code","a2a6e2a1":"code","766748ef":"code","f85b5ca9":"code","91bfe15a":"code","6036b7b9":"code","af628742":"code","fe96c1f5":"code","bafb24f5":"code","289a8cb6":"code","10296988":"code","1ea6417f":"code","5589bc54":"code","e268e5af":"code","bc5d2afd":"code","5d74eb91":"code","247b1375":"code","5f6f0308":"code","073f3fc5":"code","9265d270":"code","a5598fa5":"code","37cfba2b":"code","c5362192":"code","480724f6":"code","e7002fec":"code","1b2116d5":"code","a4b0a34e":"markdown","b8c1f1e7":"markdown","1a43d0b4":"markdown","e16da7b7":"markdown","871852e6":"markdown","a640500a":"markdown","26fefa3b":"markdown","246c77f5":"markdown","ee3b3f1e":"markdown","e6e1368f":"markdown","75b64b9d":"markdown","306c28ab":"markdown","59e8eef2":"markdown","a412bed2":"markdown","6d629f53":"markdown"},"source":{"03c6c653":"%matplotlib inline\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_colwidth', None)\n#pd.set_option('display.max_rows', None)\n\nfrom glob import glob\n\nimport re\nimport gc\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display\n\nfrom tqdm import tqdm, tqdm_notebook\ntqdm.pandas()\n\nimport plotly.express as px #Plotly Express\n\nfrom plotly.offline import iplot\n\n#to link plotly to pandas\nimport cufflinks as cf\ncf.go_offline()\ncf.set_config_file(offline = False, world_readable = True)\n\nimport plotly.io as pio\npio.templates.default = 'plotly_white'\n\nimport itertools\nimport collections\nfrom collections import Counter\n\nfrom nltk.corpus import stopwords\n\nimport re\nfrom wordcloud import WordCloud\n\nplt.rcParams[\"figure.figsize\"] = (12, 8)\nplt.rcParams['axes.titlesize'] = 16\nplt.style.use('seaborn-whitegrid')\nsns.set_palette('Set3')\n\nimport os\nprint(os.listdir('..\/input\/online-retail\/'))\n\nimport warnings\nwarnings.simplefilter('ignore')","b9a199c7":"df = pd.read_csv('..\/input\/online-retail\/Online_Retail.csv')\nprint(df.shape)\ndf.head()","9c4c41af":"df.describe().T","e7dcc7e7":"df.info()","1cce50ca":"missing = df.isna().sum().reset_index()\nmissing.columns = ['features', 'total_missing']\nmissing['percent'] = (missing['total_missing'] \/ len(df)) * 100\nmissing.index = missing['features']\ndel missing['features']\n\nmissing['total_missing'].iplot(kind = 'bar', \n                               title = 'Missing Values Plot in Dataset',\n                               xTitle = 'Features',\n                               yTitle = 'Count')\nmissing.T","464e5270":"df['TotalAmount'] = df['Quantity'] * df['UnitPrice']","fcc81c50":"sns.distplot(df['TotalAmount'], bins = 10);","2ada2577":"print(f\"Number of unique StockCode: {df['StockCode'].nunique()}\")","09139468":"df['StockCode'].value_counts()[:50].sort_values(ascending = True).iplot(kind = 'bar', \n                                                                  orientation = 'h',\n                                                                  yTitle = 'Stock Code',\n                                                                  title = 'Countplot of StockCode')","a2a6e2a1":"df[df['StockCode'] == '85123A']['Description'][0]","766748ef":"sns.distplot(df['Quantity'], bins = 10);","f85b5ca9":"print(f\"Number of unique CustomerID: {df['CustomerID'].nunique()}\")","91bfe15a":"print(f\"Number of unique Country: {df['Country'].nunique()}\")","6036b7b9":"df['Country'].value_counts()[:15].sort_values(ascending = True).iplot(kind = 'bar', \n                                                                  orientation = 'h',\n                                                                  yTitle = 'Country',\n                                                                  title = 'Countplot of Country')","af628742":"print(f\"Number of unique Invoice numbers: {df['InvoiceNo'].nunique()}\")","fe96c1f5":"df.groupby('InvoiceNo')['TotalAmount'].sum()","bafb24f5":"df.groupby('InvoiceNo')['TotalAmount'].sum().plot(kind = 'box');","289a8cb6":"df[df['Quantity'] < 0]","10296988":"def plot_wordcloud(data, col, text = None):\n    stop = stopwords.words('english')\n    all_words = [word for each in data[col] for word in str(each).lower().split() if word not in stop]\n    word_freq = Counter(all_words)\n\n    wordcloud = WordCloud(width = 900,\n                          height = 500,\n                          max_words = 200,\n                          max_font_size = 100,\n                          relative_scaling = 0.5,\n                          background_color = \"rgba(255, 255, 255, 0)\", \n                          mode = \"RGBA\",\n                          normalize_plurals = True).generate_from_frequencies(word_freq)\n    plt.figure(figsize = (16, 12))\n    plt.imshow(wordcloud, interpolation = 'bilinear')\n    plt.title(text, fontsize = 16)\n    plt.axis(\"off\")\n    plt.show()","1ea6417f":"plot_wordcloud(df, 'Description', 'WordCloud of Product Description')","5589bc54":"print(f\"Number of Unique product descriptions: {df['Description'].nunique()}\")\nprint(f\"Number of Unique product descriptions: {df['StockCode'].nunique()}\")","e268e5af":"stockcode_des = df.groupby('StockCode')['Description'].count()\nstockcode_des = stockcode_des[stockcode_des.values > 0]\nprint(f\"There are {len(stockcode_des)} StockCode with more than 1 Description\")","bc5d2afd":"for i, sc in enumerate(stockcode_des.index):\n    print(sc, '-', df[df['StockCode'] == sc]['Description'].isna().sum())\n    print(df[df['StockCode'] == sc]['Description'].unique())\n    if i > 5: break","5d74eb91":"for i, sc in tqdm_notebook(enumerate(stockcode_des.index)):\n    if df[df['StockCode'] == sc]['Description'].isna().any():\n        temp = df[df['StockCode'] == sc]['Description']\n        fill = temp.value_counts().index[0]\n        df['Description'].loc[temp.index] = df['Description'].loc[temp.index].fillna(fill)\n    if len(df[df['StockCode'] == sc]['Description'].unique()) > 1:\n        temp = df[df['StockCode'] == sc]['Description']\n        un = temp.unique()\n        repl = un[0]\n        df['Description'].loc[temp.index] = df['Description'].loc[temp.index].replace(un[1:], repl)","247b1375":"#Check\nfor i, sc in enumerate(stockcode_des.index):\n    print(sc, '-', df[df['StockCode'] == sc]['Description'].isna().sum())\n    print(df[df['StockCode'] == sc]['Description'].unique())\n    if i > 5: break","5f6f0308":"#Convert InvoiceDate to datetime format\ndf['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'], infer_datetime_format = True)\ndf['InvDoW'] = df['InvoiceDate'].dt.dayofweek #Monday - 0\ndf['InvMonth'] = df['InvoiceDate'].dt.month\ndf['InvYear'] = df['InvoiceDate'].dt.year\ndf['InvHour'] = df['InvoiceDate'].dt.hour\ndf['InvDay'] = df['InvoiceDate'].dt.day","073f3fc5":"top_selling = df.groupby('Description')['TotalAmount'].sum().sort_values(ascending = False)[:30]\n\ntop_selling.iplot(kind = 'bar', \n                  orientation = 'h',\n                  yTitle = 'Product Description',\n                  title = '30 Top Selling Products in terms of Sales',\n                    )","9265d270":"df.groupby('Description')['TotalAmount'].sum().sort_values(ascending = False)[-10:].iplot(kind = 'bar', \n                                                                  orientation = 'v',\n                                                                  yTitle = 'Product Description',\n                                                                  title = 'Negative Sales - Charges\/Discounts\/Samples')","a5598fa5":"df.groupby('InvMonth')['TotalAmount'].sum().iplot(kind = 'bar', \n                                                  yTitle = 'Sales',\n                                                  title = 'Total Sales by Invoice Month'\n                                                 )","37cfba2b":"df.groupby('InvDoW')['TotalAmount'].sum().iplot(kind = 'bar', \n                                                  yTitle = 'Sales',\n                                                  title = 'Total Sales by Invoice Day of Week'\n                                                 )","c5362192":"df.groupby('InvHour')['TotalAmount'].sum().iplot(kind = 'bar', \n                                                  yTitle = 'Sales',\n                                                  title = 'Total Sales by Hour of the Day'\n                                                 )","480724f6":"top_month = pd.pivot_table(data = df[df['Description'].isin(top_selling[:5].index)], index = ['InvMonth'], \n               columns = 'Description', values = 'Quantity', aggfunc = 'sum', fill_value = 0)\n\nlayout1 = cf.Layout(\n                    height = 600,\n                    width = 1100\n                    )\ntop_month.iplot(kind = 'bar', yTitle = 'Quantity Sold', \n               title = 'Total Quantity Sold by Month of top 5 products', \n               )","e7002fec":"print(f\"Avg. UnitPrice of DOTCOM POSTAGE: {df['UnitPrice'][df['Description'] == 'DOTCOM POSTAGE'].mean()}\")\nprint(f\"Avg. UnitPrice of JUMBO BAG RED: {df['UnitPrice'][df['Description'] == 'JUMBO BAG RED RETROSPOT'].mean()}\")","1b2116d5":"df.head(2)","a4b0a34e":"__There are values that are in negative__","b8c1f1e7":"- Looks like mostly there is 'nan' in place of the Description for a partucular StockCode\n- From above we see that we have to impute NaNs in Description based on StockCode","1a43d0b4":"- Let's check the missing values","e16da7b7":"- 25% of CustomerID is missing","871852e6":"StockCode: 85123A is highest selling","a640500a":"- Saturday seems to off day for the stores","26fefa3b":"- The stores are open between 6 am and 9 pm","246c77f5":"- Sales has crossed 1M in the last 4 months of the year with November being the top month","ee3b3f1e":"- These could be wrong entries that can be removed from the dataset","e6e1368f":"- 'DOTCOM POSTAGE' has high UnitPrice ","75b64b9d":"- There is a mismatch between number of unique number of StockCodes and Descriptions - 4070 unique StockCodes","306c28ab":"__Quantity__","59e8eef2":"# WIP..","a412bed2":"Create a feature for total purchase price","6d629f53":"United Kingdom is where the most number of transactions has happened"}}