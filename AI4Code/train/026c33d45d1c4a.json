{"cell_type":{"a70cf84d":"code","a5a30409":"code","46effe6f":"code","73d3b1df":"code","a6d47a4c":"code","3cedbddc":"code","a027d710":"markdown","fde07c65":"markdown","c7883433":"markdown","249ac164":"markdown","ea024689":"markdown","c6d48244":"markdown","7bbf3eda":"markdown"},"source":{"a70cf84d":"# 1. Enable Internet in the Kernel (Settings side pane)\n\n# 2. Curl cache may need purged if v0.1.6 cannot be found (uncomment if needed). \n# !curl -X PURGE https:\/\/pypi.org\/simple\/kaggle-environments\n\n# Halite environment was defined in v0.2.1\n!pip install 'kaggle-environments>=0.2.1'","a5a30409":"from kaggle_environments import evaluate, make\n\nenv = make(\"halite\", debug=True)\nenv.render()","46effe6f":"%%writefile submission.py\n# for Debug previous line (%%writefile submission.py) should be commented out, uncomment to write submission.py\n\n#FUNCTIONS###################################################\ndef get_map(obs):\n    \"\"\" get map as two dimensional array of objects and set amounts of halite in each cell \"\"\"\n    game_map = []\n    for x in range(conf.size):\n        game_map.append([])\n        for y in range(conf.size):\n            game_map[x].append({\n                # value will be ID of owner\n                \"shipyard\": None,\n                # value will be ID of owner\n                \"ship\": None,\n                # value will be amount of halite\n                \"ship_cargo\": None,\n                # amount of halite\n                \"halite\": obs.halite[conf.size * y + x]\n            })\n    return game_map\n\ndef get_vortex_units_coords_and_update_map(v_env):\n    \"\"\" get lists of coords of Vortex's units and update locations of ships and shipyards on the map \"\"\"\n    # arrays of (x, y) coords\n    vortex_shipyards_coords = []\n    vortex_ships_coords = []\n    # place on the map locations of units of every player\n    for player in range(len(v_env[\"obs\"].players)):\n        # place on the map locations of every shipyard of the player\n        shipyards = list(v_env[\"obs\"].players[player][1].values())\n        for shipyard in shipyards:\n            x = shipyard % conf.size\n            y = shipyard \/\/ conf.size\n            # place shipyard on the map\n            v_env[\"map\"][x][y][\"shipyard\"] = player\n            if player == v_env[\"obs\"].player:\n                vortex_shipyards_coords.append((x, y))\n        # place on the map locations of every ship of the player\n        ships = list(v_env[\"obs\"].players[player][2].values())\n        for ship in ships:\n            x = ship[0] % conf.size\n            y = ship[0] \/\/ conf.size\n            # place ship on the map\n            v_env[\"map\"][x][y][\"ship\"] = player\n            v_env[\"map\"][x][y][\"ship_cargo\"] = ship[1]\n            if player == v_env[\"obs\"].player:\n                vortex_ships_coords.append((x, y))\n    return vortex_shipyards_coords, vortex_ships_coords\n\ndef get_c(c):\n    \"\"\" get coordinate, considering donut type of the map \"\"\"\n    return c % conf.size\n\ndef get_directions(i0, i1, i2, i3):\n    \"\"\" get list of directions in a certain sequence \"\"\"\n    return [directions_list[i0], directions_list[i1], directions_list[i2], directions_list[i3]]\n\ndef clear(x, y, player, game_map, cargo):\n    \"\"\" check if cell is safe to move in \"\"\"\n    # if there is no ship or hostile ship has less or equal amount of halite\n    if (game_map[x][y][\"ship\"] == None or\n            (game_map[x][y][\"ship\"] != player and game_map[x][y][\"ship_cargo\"] > cargo)):\n        return True\n    return False\n\ndef define_tiers_corners():\n    \"\"\" define coordinates of corners for every tier  \"\"\"\n    for tier in tiers:\n        tier[\"corners_coords\"][\"NE\"][\"x\"] = get_c(vortex_center[\"x\"] + tier[\"to_center\"])\n        tier[\"corners_coords\"][\"NE\"][\"y\"] = get_c(vortex_center[\"y\"] - tier[\"to_center\"])\n        tier[\"corners_coords\"][\"SE\"][\"x\"] = get_c(vortex_center[\"x\"] + tier[\"to_center\"])\n        tier[\"corners_coords\"][\"SE\"][\"y\"] = get_c(vortex_center[\"y\"] + tier[\"to_center\"])\n        tier[\"corners_coords\"][\"SW\"][\"x\"] = get_c(vortex_center[\"x\"] - tier[\"to_center\"])\n        tier[\"corners_coords\"][\"SW\"][\"y\"] = get_c(vortex_center[\"y\"] + tier[\"to_center\"])\n        tier[\"corners_coords\"][\"NW\"][\"x\"] = get_c(vortex_center[\"x\"] - tier[\"to_center\"])\n        tier[\"corners_coords\"][\"NW\"][\"y\"] = get_c(vortex_center[\"y\"] - tier[\"to_center\"])\n        \ndef at_tier_corner(x, y, tier):\n    \"\"\" check if ship is at tier's corner \"\"\"\n    for c in tier[\"corners_coords\"]:\n        if x == tier[\"corners_coords\"][c][\"x\"] and y == tier[\"corners_coords\"][c][\"y\"]:\n            return True\n    return False\n\ndef define_some_globals(configuration):\n    \"\"\" define some of the global variables \"\"\"\n    global conf\n    global low_amount_of_halite\n    global min_halite_to_unload\n    global globals_not_defined\n    conf = configuration\n    low_amount_of_halite = conf.maxCellHalite * 0.75\n    min_halite_to_unload = conf.spawnCost\n    globals_not_defined = False\n\ndef adapt_environment(observation, configuration):\n    \"\"\" adapt environment for the Vortex \"\"\"\n    v_env = {}\n    v_env[\"obs\"] = observation\n    v_env[\"ships_keys\"] = list(v_env[\"obs\"].players[v_env[\"obs\"].player][2].keys())\n    v_env[\"ships_values\"] = list(v_env[\"obs\"].players[v_env[\"obs\"].player][2].values())\n    v_env[\"shipyards_keys\"] = list(v_env[\"obs\"].players[v_env[\"obs\"].player][1].keys())\n    if globals_not_defined:\n        define_some_globals(configuration)\n        vortex_center[\"x\"] = v_env[\"ships_values\"][0][0] % conf.size\n        vortex_center[\"y\"] = v_env[\"ships_values\"][0][0] \/\/ conf.size\n        define_tiers_corners()\n    v_env[\"map\"] = get_map(v_env[\"obs\"])\n    v_env[\"vortex_halite\"] = v_env[\"obs\"].players[v_env[\"obs\"].player][0]\n    v_env[\"vortex_shipyards_coords\"], v_env[\"vortex_ships_coords\"] = get_vortex_units_coords_and_update_map(v_env)\n    # reset current amounts of ships in tiers\n    for tier in tiers:\n        tier[\"ships_amount\"] = 0\n    # calculate current amounts of ships in tiers\n    for i in range(len(v_env[\"ships_keys\"])):\n        if v_env[\"ships_keys\"][i] in ships_data:\n            tiers[ships_data[v_env[\"ships_keys\"][i]][\"tier\"]][\"ships_amount\"] += 1\n    return v_env\n    \ndef actions_of_ships(v_env):\n    \"\"\" actions of every ship in the Vortex \"\"\"\n    actions = {}\n    for i in range(len(v_env[\"ships_keys\"])):\n        x = v_env[\"vortex_ships_coords\"][i][0]\n        y = v_env[\"vortex_ships_coords\"][i][1]\n        ship_key = v_env[\"ships_keys\"][i]\n        # if this is a new ship\n        if ship_key not in ships_data:\n            for tier in tiers:\n                if tier[\"ships_amount\"] < tier[\"ships_max_amount\"]:\n                    ships_data[ship_key] = {\n                        # ship is being assigned to this tier\n                        \"tier\": tier[\"number\"],\n                        # list of directions to move through\n                        \"directions\": movement_tactics[tier[\"tactics_index\"]][\"directions\"],\n                        \"directions_index\": 0,\n                        # ship is currently moving to its tier\n                        \"moving_to_tier\": True,\n                        # ship is currently moving to shipyard\n                        \"moving_to_shipyard\": False,\n                        # ship is currently at its tier\n                        \"at_tier\": False\n                    }\n                    tier[\"ships_amount\"] += 1\n                    break\n        ship = ships_data[ship_key]\n        # if it is last step\n        if (v_env[\"obs\"].step == (conf.episodeSteps - 2) and\n                v_env[\"ships_values\"][i][1] >= conf.convertCost):\n            actions[ship_key] = \"CONVERT\"\n            v_env[\"map\"][x][y][\"ship\"] = None\n            tiers[ship[\"tier\"]][\"ships_amount\"] -= 1\n            continue\n        # if ship is at vortex center\n        if vortex_center[\"x\"] == x and vortex_center[\"y\"] == y:\n            ship[\"moving_to_shipyard\"] = False\n            # if there is no shipyard and enough halite to create one\n            if (v_env[\"map\"][x][y][\"shipyard\"] == None and\n                    (v_env[\"vortex_halite\"] + v_env[\"ships_values\"][i][1]) >= conf.convertCost):\n                actions[ship_key] = \"CONVERT\"\n                v_env[\"map\"][x][y][\"ship\"] = None\n                tiers[ship[\"tier\"]][\"ships_amount\"] -= 1\n                continue\n            # else move to ship's tier\n            else:\n                ship[\"moving_to_tier\"] = True\n                ship[\"directions_index\"] = 0\n        # if ship is moving to its tier\n        if ship[\"moving_to_tier\"]:\n            # move north\n            x_next = directions_list[0][\"x\"](x)\n            y_next = directions_list[0][\"y\"](y)\n            if clear(x_next, y_next, v_env[\"obs\"].player, v_env[\"map\"], v_env[\"map\"][x][y][\"ship_cargo\"]):\n                actions[ship_key] = directions_list[0][\"direction\"]\n                v_env[\"map\"][x][y][\"ship\"] = None\n                v_env[\"map\"][x_next][y_next][\"ship\"] = v_env[\"obs\"].player\n                if y_next == tiers[ship[\"tier\"]][\"corners_coords\"][\"NE\"][\"y\"]:\n                    ship[\"moving_to_tier\"] = False\n                    ship[\"at_tier\"] = True\n        # if ship is moving to shipyard\n        elif ship[\"moving_to_shipyard\"] != False:\n            x_next = ship[\"moving_to_shipyard\"][\"x\"](x)\n            y_next = ship[\"moving_to_shipyard\"][\"y\"](y)\n            if clear(x_next, y_next, v_env[\"obs\"].player, v_env[\"map\"], v_env[\"map\"][x][y][\"ship_cargo\"]):\n                actions[ship_key] = ship[\"moving_to_shipyard\"][\"direction\"]\n                v_env[\"map\"][x][y][\"ship\"] = None\n                v_env[\"map\"][x_next][y_next][\"ship\"] = v_env[\"obs\"].player\n        # if ship is at its tier and harvesting is not possible\n        elif (ship[\"at_tier\"] and\n                (not tiers[ship[\"tier\"]][\"harvesting\"] or v_env[\"map\"][x][y][\"halite\"] <= low_amount_of_halite)):\n            # if ship has enough halite to unload it at shipyard\n            if (v_env[\"ships_values\"][i][1] > min_halite_to_unload and (y == vortex_center[\"y\"] or\n                    (x == vortex_center[\"x\"] and y == tiers[ship[\"tier\"]][\"corners_coords\"][\"SE\"][\"y\"]))):\n                if y == vortex_center[\"y\"]:\n                    # if ship is at eastern border of the tier\n                    if x == tiers[ship[\"tier\"]][\"corners_coords\"][\"SE\"][\"x\"]:\n                        # move west\n                        x_next = directions_list[3][\"x\"](x)\n                        if clear(x_next, y, v_env[\"obs\"].player, v_env[\"map\"], v_env[\"map\"][x][y][\"ship_cargo\"]):\n                            ship[\"moving_to_shipyard\"] = directions_list[3]\n                            actions[ship_key] = ship[\"moving_to_shipyard\"][\"direction\"]\n                            v_env[\"map\"][x][y][\"ship\"] = None\n                            v_env[\"map\"][x_next][y][\"ship\"] = v_env[\"obs\"].player\n                            ship[\"at_tier\"] = False\n                    # if ship is at western border of the tier\n                    elif x == tiers[ship[\"tier\"]][\"corners_coords\"][\"SW\"][\"x\"]:\n                        # move east\n                        x_next = directions_list[1][\"x\"](x)\n                        if clear(x_next, y, v_env[\"obs\"].player, v_env[\"map\"], v_env[\"map\"][x][y][\"ship_cargo\"]):\n                            ship[\"moving_to_shipyard\"] = directions_list[1]\n                            actions[ship_key] = ship[\"moving_to_shipyard\"][\"direction\"]\n                            v_env[\"map\"][x][y][\"ship\"] = None\n                            v_env[\"map\"][x_next][y][\"ship\"] = v_env[\"obs\"].player\n                            ship[\"at_tier\"] = False\n                # if ship is at southern border of the tier\n                elif x == vortex_center[\"x\"] and y == tiers[ship[\"tier\"]][\"corners_coords\"][\"SE\"][\"y\"]:\n                    # move north\n                    y_next = directions_list[0][\"y\"](y)\n                    if clear(x, y_next, v_env[\"obs\"].player, v_env[\"map\"], v_env[\"map\"][x][y][\"ship_cargo\"]):\n                        ship[\"moving_to_shipyard\"] = directions_list[0]\n                        actions[ship_key] = ship[\"moving_to_shipyard\"][\"direction\"]\n                        v_env[\"map\"][x][y][\"ship\"] = None\n                        v_env[\"map\"][x][y_next][\"ship\"] = v_env[\"obs\"].player\n                        ship[\"at_tier\"] = False\n            else:\n                directions_index = ship[\"directions_index\"]\n                if at_tier_corner(x, y, tiers[ship[\"tier\"]]):\n                    directions_index += 1\n                    if directions_index >= len(ship[\"directions\"]):\n                        directions_index = 0\n                x_next = ship[\"directions\"][directions_index][\"x\"](x)\n                y_next = ship[\"directions\"][directions_index][\"y\"](y)\n                if clear(x_next, y_next, v_env[\"obs\"].player, v_env[\"map\"], v_env[\"map\"][x][y][\"ship_cargo\"]):\n                    ship[\"directions_index\"] = directions_index\n                    actions[ship_key] = ship[\"directions\"][ship[\"directions_index\"]][\"direction\"]\n                    v_env[\"map\"][x][y][\"ship\"] = None\n                    v_env[\"map\"][x_next][y_next][\"ship\"] = v_env[\"obs\"].player\n    return actions\n     \ndef action_of_shipyard(actions, v_env):\n    \"\"\" action of the Vortex's shipyard \"\"\"\n    # if there is a shipyard\n    if v_env[\"map\"][vortex_center[\"x\"]][vortex_center[\"y\"]][\"shipyard\"] == v_env[\"obs\"].player:\n        # if there is enough halite and shipyard is empty\n        if (v_env[\"vortex_halite\"] >= conf.spawnCost and\n                v_env[\"map\"][vortex_center[\"x\"]][vortex_center[\"y\"]][\"ship\"] == None):\n            # if there is a place for a ship in some tier\n            for tier in tiers:\n                if tier[\"ships_amount\"] < tier[\"ships_max_amount\"]:\n                    tier[\"ships_amount\"] += 1\n                    v_env[\"vortex_halite\"] -= conf.spawnCost\n                    actions[v_env[\"shipyards_keys\"][0]] = \"SPAWN\"\n                    v_env[\"map\"][vortex_center[\"x\"]][vortex_center[\"y\"]][\"ship\"] = v_env[\"obs\"].player\n    return actions\n\n\n#GLOBAL_VARIABLES#############################################\nconf = None\n# coordinates of Vortex's center\nvortex_center = {\"x\": None, \"y\": None}\n# amount of halite that is considered to be too low for harvesting\nlow_amount_of_halite = None\n# minimal amount of halite to unload at shipyard\nmin_halite_to_unload = None\n# object with ship ids and their data\nships_data = {}\n# not all global variables are defined\nglobals_not_defined = True\n\n# list of directions\ndirections_list = [\n    {\n        \"direction\": \"NORTH\",\n        \"x\": lambda z: z,\n        \"y\": lambda z: get_c(z - 1)\n    },\n    {\n        \"direction\": \"EAST\",\n        \"x\": lambda z: get_c(z + 1),\n        \"y\": lambda z: z\n    },\n    {\n        \"direction\": \"SOUTH\",\n        \"x\": lambda z: z,\n        \"y\": lambda z: get_c(z + 1)\n    },\n    {\n        \"direction\": \"WEST\",\n        \"x\": lambda z: get_c(z - 1),\n        \"y\": lambda z: z\n    }\n]\n\n# list of movement tactics\nmovement_tactics = [\n    # W -> S -> E -> N\n    {\"directions\": get_directions(3, 2, 1, 0)},\n    # E -> S -> W -> N\n    {\"directions\": get_directions(1, 2, 3, 0)}\n]\nmovement_tactics_amount = len(movement_tactics)\n\n# vortex tiers and their properties\ntiers = [\n    {\n        # number of the tier\n        \"number\": 0,\n        # distance to vortex center\n        \"to_center\": 1,\n        # maximum amount of ships on this tier\n        \"ships_max_amount\": 1,\n        # current amount of ships on this tier\n        \"ships_amount\": 0,\n        # index of movement tactics\n        \"tactics_index\": 0,\n        # coordinates of tier's borders\n        \"corners_coords\": {\"NE\": {}, \"SE\": {}, \"SW\": {}, \"NW\": {}},\n        # is halite harvesting allowed\n        \"harvesting\": True\n    },\n    {\n        # number of the tier\n        \"number\": 1,\n        # distance to vortex center\n        \"to_center\": 2,\n        # maximum amount of ships on this tier\n        \"ships_max_amount\": 3,\n        # current amount of ships on this tier\n        \"ships_amount\": 0,\n        # index of movement tactics\n        \"tactics_index\": 1,\n        # coordinates of tier's borders\n        \"corners_coords\": {\"NE\": {}, \"SE\": {}, \"SW\": {}, \"NW\": {}},\n        # is halite harvesting allowed\n        \"harvesting\": True\n    },\n    {\n        # number of the tier\n        \"number\": 2,\n        # distance to vortex center\n        \"to_center\": 3,\n        # maximum amount of ships on this tier\n        \"ships_max_amount\": 5,\n        # current amount of ships on this tier\n        \"ships_amount\": 0,\n        # index of movement tactics\n        \"tactics_index\": 0,\n        # coordinates of tier's borders\n        \"corners_coords\": {\"NE\": {}, \"SE\": {}, \"SW\": {}, \"NW\": {}},\n        # is halite harvesting allowed\n        \"harvesting\": True\n    },\n    {\n        # number of the tier\n        \"number\": 3,\n        # distance to vortex center\n        \"to_center\": 4,\n        # maximum amount of ships on this tier\n        \"ships_max_amount\": 9,\n        # current amount of ships on this tier\n        \"ships_amount\": 0,\n        # index of movement tactics\n        \"tactics_index\": 1,\n        # coordinates of tier's borders\n        \"corners_coords\": {\"NE\": {}, \"SE\": {}, \"SW\": {}, \"NW\": {}},\n        # is halite harvesting allowed\n        \"harvesting\": True\n    }\n]\n\n\n#THE_VORTEX####################################################\ndef vortex_agent(observation, configuration):\n    \"\"\" INTO THE VORTEX!!! \"\"\"\n    v_env = adapt_environment(observation, configuration)\n    actions = actions_of_ships(v_env)\n    actions = action_of_shipyard(actions, v_env)\n    return actions","73d3b1df":"if \"vortex_agent\" in globals():\n    # reset variables\n    ships_data = {}\n    globals_not_defined = True\n\n    # Play as first position against random agent.\n    trainer = env.train([None, \"random\"])\n\n    observation = trainer.reset()\n\n    while not env.done:\n        my_action = vortex_agent(observation, env.configuration)\n        print(\"Step: {0}, My Action: {1}\".format(observation.step, my_action))\n        observation, reward, done, info = trainer.step(my_action)\n        # env.render(mode=\"ipython\", width=100, height=90, header=False, controls=False)\n    env.render()","a6d47a4c":"def mean_reward(rewards):\n    wins = 0\n    ties = 0\n    loses = 0\n    for r in rewards:\n        r0 = 0 if r[0] is None else r[0]\n        r1 = 0 if r[1] is None else r[1]\n        if r0 > r1:\n            wins += 1\n        elif r1 > r0:\n            loses += 1\n        else:\n            ties += 1\n    return f'wins={wins\/len(rewards)}, ties={ties\/len(rewards)}, loses={loses\/len(rewards)}'\n\n# Run multiple episodes to estimate its performance.\n# Setup agentExec as LOCAL to run in memory (runs faster) without process isolation.\nprint(\"Vortex Agent vs Random Agent:\", mean_reward(evaluate(\n    \"halite\",\n    [\"submission.py\", \"random\", \"random\", \"random\"],\n    num_episodes=10, configuration={\"agentExec\": \"LOCAL\"}\n)))","3cedbddc":"#env.run([\"submission.py\", \"submission.py\", \"submission.py\", \"submission.py\"])\nenv.run([\"submission.py\", \"random\", \"random\", \"random\"])\nenv.render(mode=\"ipython\", width=800, height=600)","a027d710":"# Test your Agent","fde07c65":"# Debug your Agent","c7883433":"# Create a Submission (agent)","249ac164":"# Submit to Competition\n\n1. Commit this kernel.\n2. View the commited version.\n3. Go to \"Data\" section and find submission.py file.\n4. Click \"Submit to Competition\"\n5. Go to [My Submissions](https:\/\/kaggle.com\/c\/halite\/submissions) to view your score and episodes being played.","ea024689":"# Create Halite Environment","c6d48244":"# Evaluate your Agent","7bbf3eda":"# Install kaggle-environments"}}