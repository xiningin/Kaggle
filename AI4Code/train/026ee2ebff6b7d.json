{"cell_type":{"f462cf84":"code","4b0558fd":"code","06cf031f":"code","9bd2d491":"code","c0387ad1":"code","ffa1dc64":"code","77bdf1f1":"code","f5b6eab0":"code","38499f22":"code","acea40a3":"code","75207353":"code","3800606d":"code","2c7a4437":"code","5f9ff0b7":"code","b0d90006":"code","ac13f6ef":"code","e612a01f":"code","4a4b998e":"code","eab8761c":"code","172856d0":"code","2e03b013":"markdown","c2e92670":"markdown","f95f44f7":"markdown","461356e4":"markdown","cbcf59ab":"markdown","8fa471a7":"markdown","6cc85ce8":"markdown","ca89d53d":"markdown","7dea6511":"markdown","f377138e":"markdown","6c8d7f33":"markdown","d91e7c0f":"markdown","5a91b414":"markdown","8cb0d871":"markdown","b2de1a3b":"markdown","fc34eb3c":"markdown","68fed058":"markdown","fbdf0c2b":"markdown","004ce43f":"markdown"},"source":{"f462cf84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b0558fd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport missingno as msno\n","06cf031f":"train  = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n# tt = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","9bd2d491":"train.columns = map(str.lower, train.columns)","c0387ad1":"train.shape\n","ffa1dc64":"train.size","77bdf1f1":"train.head()","f5b6eab0":"train.columns","38499f22":"train.info()","acea40a3":"train.describe()","75207353":"col = train.columns\nfor i in col:\n    skewness = np.array(train[col].skew())\n    kurtosis = np.array(train[col].kurt())\n    mean = np.array(train[col].mean())\n    median = np.array(train[col].median())\n    variance = np.array(train[col].var())\n    \n    data_frame = pd.DataFrame({'skewness':skewness,\n                               'kurtosis':kurtosis, \n                               'Mean':mean,\n                               'Median':median, \n                               'variance':variance},\n                              \n                              index=num_features,\n                              columns={'skewness',\n                                       'kurtosis',\n                                       'Mean',\n                                       'Median',\n                                       'variance'})\nprint(data_frame)","3800606d":"num_features = ['passengerid', 'survived', 'pclass', 'age', 'sibsp', 'parch', 'fare' ]\nsns.pairplot(train[num_features])","2c7a4437":"\ndef categorical_feature_summarized(dataframe, x=None, y=None, hue=None, palette='Set1', verbose=True):\n    '''\n    \n    helper function that gives a quick summary of a given column of categorical data\n    \n    Arguments\n    =============\n    dataframe: pandas df\n    x: str, horizontal axis to plot the label of categorical data\n    y: str, vertical xis to plot hte label of the categorical data\n    hue: str, if you want to comparer it to any other variable\n    palette: array-like, color of the graph\/plot\n    \n    \n    Returns\n    ==============\n    Quick summary of the categorical data\n    \n    \n    '''\n    \n    if x==None:\n        column_interested = y\n        \n    else:\n        column_interested = x\n    series = dataframe[column_interested]\n    print(series.describe())\n    print('mode', series.mode())\n    \n    if verbose:\n        print('='*80)\n        print(series.value_counts())\n        \n        \n    sns.countplot(x=x, y=y, hue=hue, data=dataframe, palette = palette)\n    plt.show()\n    \n    '''\n    \n    categorical_summarized does is it takes in a dataframe, together with some input arguments and \n    outputs the following:\n        1. The count, mean, std, min, max, and quartiles for numerical data or\n        2. the count, unique, top class, and frequency of the top class for non-numerical data.\n        3. Class frequencies of the interested column, if verbose is set to 'True'\n        4. Bar graph of the count of each class of the interested column\n    \n    '''","5f9ff0b7":"for i in train.columns:\n    categorical_feature_summarized(train, x=i)","b0d90006":"train.corr()['survived'].sort_values(ascending=False)","ac13f6ef":"#Heatmap\ndef heatmap(df):\n    \n    '''\n    this function takes data frame a input and returns the\n    heatmap as output.\n    \n    Arguments\n    ====================\n    df : Dataframe or Series \n    \n    \n    Returns\n    ===========\n    heatmap\n    '''\n    corr = df.corr()   #create a correlation df\n    fig,ax = plt.subplots(figsize = (10,10))   # create a blank canvas\n    colormap = sns.diverging_palette(220,10, as_cmap=True)   #Generate colormap\n    sns.heatmap(corr, cmap=colormap, annot=True, fmt='.2f')   #generate heatmap with annot(display value) and place floats in map\n#    plt.xticks(range(len(corr.columns)), corr.columns);   #apply  xticks(labels of features)\n#    plt.yticks(range(len(corr.columns)), corr.columns)   #apply yticks (labels of features)\n    plt.show()\n    ","e612a01f":"heatmap(train)","4a4b998e":"train.isna().sum()","eab8761c":"print('total missing values: ', train.isna().sum().sum(), 'out of', train.size, 'total entries') ","172856d0":"msno.heatmap(train)","2e03b013":"## Correlation","c2e92670":"## 1.5. Spread of Data - variance","f95f44f7":"# Import the Libraries","461356e4":"# Lowercase the columns of the data ","cbcf59ab":"## 1. 1. Lets look at the data","8fa471a7":"## Quick Summary of the Categorical Features","6cc85ce8":"Passenger Class and Fare Play a vital role in the survival of the passenger","ca89d53d":"## Missing Values","7dea6511":"## 1. 3. Info gives information about the types of data present in our data set","f377138e":"# 1. Descriptive Analysis","6c8d7f33":"Describe gives us the information about the mean, Median, Standard Deviation, inter-quartile range (Measure of Variability) and Minimum and Maximum values in each column. \nPS - Describe only gives information about the numerical data.","d91e7c0f":"Only Age, Cabin and Embarked have missing values","5a91b414":" ## Modality - Measure of number of peaks","8cb0d871":"## 1. 2. **Columns of the data**","b2de1a3b":"## Heatmap","fc34eb3c":"# Import the Data","68fed058":"## 1. 4. Describe your Data","fbdf0c2b":"## Shape and size","004ce43f":"# Exploratory Data Analysis"}}