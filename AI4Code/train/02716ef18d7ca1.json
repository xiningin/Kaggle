{"cell_type":{"49f93914":"code","4598f466":"code","8bcd8b54":"code","17c54470":"code","f7367364":"code","14b996e0":"code","b7e74f7f":"code","cd659821":"code","177acf17":"code","7ea1cfbf":"code","21995496":"code","1fd036bc":"code","b3d26b8e":"code","f012178b":"code","2f601ef0":"code","5b4bfa46":"code","ce3b5f0f":"code","5c959305":"code","04a5493f":"code","95f34162":"code","bd791374":"code","2312e01b":"code","3ef551d2":"code","89869dda":"code","46bad249":"markdown","a4e050da":"markdown","0410c8f5":"markdown","6032b70f":"markdown","dac1f269":"markdown","b59ed3c7":"markdown","8cf446a7":"markdown"},"source":{"49f93914":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4598f466":"#First \u0131 will import some visualization libaries\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8bcd8b54":"#I will read csv file that includes data about US trend videos\ndata=pd.read_csv(\"\/kaggle\/input\/youtube-new\/USvideos.csv\")\ndata.head()","17c54470":"data.info()","f7367364":"data.describe().T","14b996e0":"data.columns","b7e74f7f":"data.likes.plot(kind=\"line\",color=\"red\",label=\"likes\",linewidth=1,alpha=0.5,linestyle=\":\")\ndata.dislikes.plot(color=\"green\",label=\"dislikes\",linewidth=1,alpha=0.5,linestyle=\"-\")\nplt.legend(loc=\"upper right\")\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\nplt.title(\"Line Plot\")\nplt.show()\n","cd659821":"data.plot(kind=\"scatter\",x=\"views\",y=\"likes\",color=\"purple\")\nplt.xlabel(\"views\")\nplt.ylabel(\"likes\")\nplt.title(\"Views Likes Scatter Plot\")\nplt.show()","177acf17":"data.views.plot(kind=\"hist\",bins=50,figsize = (10,10), grid = True)\nplt.show()","7ea1cfbf":"# To create a dictionary\ndict={'name':'CRonaldo','team':'Juventus'}\nprint(dict)","21995496":"# update existing entry\ndict[\"name\"]='Dybala'\nprint(dict)","1fd036bc":"# Add new entry\ndict[\"nation\"]=\"Arjantina\"\nprint(dict)","b3d26b8e":"# remove entry with key 'nation'\ndel dict['nation']\nprint(dict)","f012178b":"# check include or no\nprint('name' in dict)","2f601ef0":"# remove all entries in dict\ndict.clear()\nprint(dict)","5b4bfa46":"# 1 - Filtering Pandas data frame\ndata[data['likes']>500000]","ce3b5f0f":"# Filtering data with 'and' logical\ndata[(data['views']>500000) & (data['likes']>900000)]","5c959305":"data[data['likes']>5000000][['title','tags']].sort_values(\"tags\",ascending=False)","04a5493f":"data['likes'].mean()","95f34162":"data['dislikes'].mean()","bd791374":"data[(data[\"views\"].max())==data[\"views\"]][\"title\"]","2312e01b":"data[data[\"views\"].min()==data[\"views\"]][\"title\"]","3ef551d2":"data.sort_values(\"views\",ascending=False).head(10)","89869dda":"data.groupby(\"category_id\").mean().sort_values(\"likes\",ascending=False)[\"likes\"].head(5)","46bad249":"**SCATTER PLOT**","a4e050da":"Pandas Filters Example","0410c8f5":"# DICTIONARY","6032b70f":"**HISTOGRAM**","dac1f269":"# MATPLOTLIB","b59ed3c7":"**LINE PLOT**","8cf446a7":"# PANDAS"}}