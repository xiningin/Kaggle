{"cell_type":{"55f27d08":"code","b75781ec":"code","b90246eb":"code","38f2d3c1":"code","f37ee307":"code","0e598064":"code","777705f1":"code","8a58b709":"code","3395781d":"code","1e80d9cb":"code","63c4487d":"code","029a2221":"code","3b74d3c2":"code","31d6dcfa":"code","5ecda635":"code","57ad11a8":"code","61589789":"code","ada714fd":"code","9a157667":"code","cbb03029":"code","13ccefe1":"code","e46785e6":"code","33fff4b8":"code","da715a62":"code","e1b12c33":"code","04298766":"code","11315d1f":"code","2240758a":"code","c4f82aae":"code","20f32f4d":"code","f59c779e":"code","1fce455d":"code","c3a21e92":"code","5f02648e":"code","df8d3ba1":"code","8f3f0386":"code","cad7408b":"code","19193ef3":"code","5e73c061":"code","3e1fa19a":"code","5dd7a49d":"code","a9d4f179":"code","a3d647ef":"code","3380e174":"code","13d8cc56":"code","f5cbe9e8":"code","cf77cbd8":"code","3f8ea832":"code","bf48a32c":"code","56b652fc":"code","c05fa940":"code","0affd004":"code","c8d5a18e":"code","d4204deb":"code","3a4a17ff":"code","29e721b8":"code","2de48e1e":"markdown","309cf20a":"markdown","f451d11f":"markdown","29afb870":"markdown","a168395f":"markdown","d9205cef":"markdown","ca67cd46":"markdown","a3a5b113":"markdown"},"source":{"55f27d08":"# Initial Python environment setup...\nimport numpy as np # linear algebra\nimport pandas as pd # CSV file I\/O (e.g. pd.read_csv)\nimport os # reading the input files we have access to\n\nprint(os.listdir('..\/input'))","b75781ec":"train_df =  pd.read_csv('..\/input\/train.csv', nrows = 10_000_000)\ntrain_df.dtypes","b90246eb":"test_df = pd.read_csv(\"..\/input\/test.csv\")","38f2d3c1":"test_df.dtypes","f37ee307":"# Given a dataframe, add two new features 'abs_diff_longitude' and\n# 'abs_diff_latitude' reprensenting the \"Manhattan vector\" from\n# the pickup location to the dropoff location.\n\n\ndef add_travel_vector_features(df):\n    df['abs_diff_longitude'] = (df.dropoff_longitude - df.pickup_longitude).abs()\n    df['abs_diff_latitude'] = (df.dropoff_latitude - df.pickup_latitude).abs()\n    \n    \n\nadd_travel_vector_features(train_df)\n","0e598064":"add_travel_vector_features(test_df)","777705f1":"train_df.columns","8a58b709":"print(train_df.isnull().sum())","3395781d":"print('Old size: %d' % len(train_df))\ntrain_df = train_df.dropna(how = 'any', axis = 0)\nprint('New size: %d' % len(train_df))","1e80d9cb":"plot = train_df.iloc[:2000].plot.scatter('abs_diff_longitude', 'abs_diff_latitude')","63c4487d":"print('Old size: %d' % len(train_df))\ntrain_df = train_df[(train_df.abs_diff_longitude < 5.0) & (train_df.abs_diff_latitude < 5.0)]\nprint('New size: %d' % len(train_df))","029a2221":"train_df = train_df[(train_df.abs_diff_longitude < 5.0) & (train_df.abs_diff_latitude < 5.0)]","3b74d3c2":"train_df.head()","31d6dcfa":"train_df['pickup_datetime'][0][11:19]","5ecda635":"list1 = list(train_df['pickup_datetime'])               # Creating an extra col of pickup time,extracting from pickup_datetime\n\nfor i in range(len(list1)):\n    list1[i] = list1[i][11:19]\n\ntrain_df['pickup_time'] = list1\n\n\n\nlist2 = list(test_df['pickup_datetime'])\n\nfor i in range(len(list2)):\n    list2[i] = list2[i][11:19]\n\ntest_df['pickup_time'] = list2\n    ","57ad11a8":"train_df.head()","61589789":"test_df.head()","ada714fd":"x=pd.Timestamp(train_df['pickup_datetime'][0][:-4]).dayofweek\nx","9a157667":"# Creating an extra col for day of the week\n\nlist1 = list(train_df['pickup_datetime'])\n\nfor i in range(len(list1)):\n    list1[i] = pd.Timestamp(list1[i][:-4]).dayofweek\n\ntrain_df['weekday'] = list1\n\n\nlist2 = list(test_df['pickup_datetime'])\n\nfor i in range(len(list2)):\n    list2[i] = pd.Timestamp(list2[i][:-4]).dayofweek\n\ntest_df['weekday'] = list2\n","cbb03029":"test_df.head()","13ccefe1":"# Dropping \"pickup_datetime\" col\n\ntrain_df.drop(\"pickup_datetime\",axis=1,inplace=True)\ntest_df.drop(\"pickup_datetime\",axis=1,inplace=True)","e46785e6":"test_df.head()","33fff4b8":"train_df.head()","da715a62":"col = test_df.columns.tolist()\ncol = col[:6] + col[8:] +col[6:8]\ncol\n\ntest_df = test_df[col]\ntest_df.head()","e1b12c33":"train_df.shape","04298766":"train_df['weekday'].replace(to_replace=[i for i in range(0,7)],\n                           value=[\"monday\",\"tuesday\",'wednesday','thursday','friday','saturday','sunday'],\n                           inplace=True)\n\ntest_df['weekday'].replace(to_replace=[i for i in range(0,7)],\n                           value=[\"monday\",\"tuesday\",'wednesday','thursday','friday','saturday','sunday'],\n                           inplace=True)","11315d1f":"train_df.head()","2240758a":"test_df.head()","c4f82aae":"train_one_hot = pd.get_dummies(train_df['weekday'])\ntrain_df = pd.concat([train_df,train_one_hot],axis=1)\n\ntest_one_hot = pd.get_dummies(test_df['weekday'])\ntest_df = pd.concat([test_df,test_one_hot],axis=1)\n","20f32f4d":"test_df.head()","f59c779e":"train_df.head()","1fce455d":"train_df.drop(\"weekday\",axis=1,inplace=True)\ntest_df.drop(\"weekday\",axis=1,inplace=True)","c3a21e92":"a = train_df['pickup_time'][0].split(\":\")\n(int(a[0])*100) + int(a[1]) + float(a[2])\/100\n","5f02648e":"# Converting pickup_time to float\n\nlist1 = list(train_df['pickup_time'])\nfor i in range(len(list1)):\n    a = list1[i].split(\":\")\n    list1[i] = (int(a[0])*100) + int(a[1]) + float(a[2])\/100\n\ntrain_df['pickup_time'] = list1\n\nlist2 = list(test_df['pickup_time'])\nfor i in range(len(list2)):\n    a = list2[i].split(\":\")\n    list2[i] = (int(a[0])*100) + int(a[1]) + float(a[2])\/100\n\ntest_df['pickup_time'] = list2\n","df8d3ba1":"train_df.head()","8f3f0386":"test_df.head()","cad7408b":"# rearranging cols\ntest_df = test_df[train_df.drop('fare_amount',axis=1).columns]","19193ef3":"test_df.head()","5e73c061":"train_df.head()","3e1fa19a":"# Calculating distance in kms\n\nR = 6373.0\nlat1 =np.asarray(np.radians(train_df['pickup_latitude']))\nlon1 = np.asarray(np.radians(train_df['pickup_longitude']))\nlat2 = np.asarray(np.radians(train_df['dropoff_latitude']))\nlon2 = np.asarray(np.radians(train_df['dropoff_longitude']))\n\ndlon = lon2 - lon1\ndlat = lat2 - lat1\nls1=[] \na = np.sin(dlat\/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon\/ 2)**2\nc = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))\ndistance = R * c\n\n    \ntrain_df['Distance']=np.asarray(distance)*0.621\n\n\n\nlat1 =np.asarray(np.radians(test_df['pickup_latitude']))\nlon1 = np.asarray(np.radians(test_df['pickup_longitude']))\nlat2 = np.asarray(np.radians(test_df['dropoff_latitude']))\nlon2 = np.asarray(np.radians(test_df['dropoff_longitude']))\n\ndlon = lon2 - lon1\ndlat = lat2 - lat1\n \na = np.sin(dlat \/ 2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon\/ 2)**2\nc = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))\ndistance = R * c\ntest_df['Distance']=np.asarray(distance)*0.621","5dd7a49d":"train_df.head()","a9d4f179":"test_df.head()","a3d647ef":"# Calculated distances in ref to the airport\n\nR = 6373.0\nlat1 =np.asarray(np.radians(train_df['pickup_latitude']))\nlon1 = np.asarray(np.radians(train_df['pickup_longitude']))\nlat2 = np.asarray(np.radians(train_df['dropoff_latitude']))\nlon2 = np.asarray(np.radians(train_df['dropoff_longitude']))\n\nlat3=np.zeros(len(train_df))+np.radians(40.6413111)\nlon3=np.zeros(len(train_df))+np.radians(-73.7781391)\ndlon_pickup = lon3 - lon1\ndlat_pickup = lat3 - lat1\nd_lon_dropoff=lon3 -lon2\nd_lat_dropoff=lat3-lat2\na1 = np.sin(dlat_pickup\/2)**2 + np.cos(lat1) * np.cos(lat3) * np.sin(dlon_pickup\/ 2)**2\nc1 = 2 * np.arctan2(np.sqrt(a1), np.sqrt(1 - a1))\ndistance1 = R * c1\ntrain_df['Pickup_Distance_airport']=np.asarray(distance1)*0.621\n\na2=np.sin(d_lat_dropoff\/2)**2 + np.cos(lat2) * np.cos(lat3) * np.sin(d_lon_dropoff\/ 2)**2\nc2 = 2 * np.arctan2(np.sqrt(a2), np.sqrt(1 - a2))\ndistance2 = R * c2\n\n    \ntrain_df['Dropoff_Distance_airport']=np.asarray(distance2)*0.621\n\n\n\nlat1 =np.asarray(np.radians(test_df['pickup_latitude']))\nlon1 = np.asarray(np.radians(test_df['pickup_longitude']))\nlat2 = np.asarray(np.radians(test_df['dropoff_latitude']))\nlon2 = np.asarray(np.radians(test_df['dropoff_longitude']))\n\nlat3=np.zeros(len(test_df))+np.radians(40.6413111)\nlon3=np.zeros(len(test_df))+np.radians(-73.7781391)\ndlon_pickup = lon3 - lon1\ndlat_pickup = lat3 - lat1\nd_lon_dropoff=lon3 -lon2\nd_lat_dropoff=lat3-lat2\na1 = np.sin(dlat_pickup\/2)**2 + np.cos(lat1) * np.cos(lat3) * np.sin(dlon_pickup\/ 2)**2\nc1 = 2 * np.arctan2(np.sqrt(a1), np.sqrt(1 - a1))\ndistance1 = R * c1\ntest_df['Pickup_Distance_airport']=np.asarray(distance1)*0.621\n\na2=np.sin(d_lat_dropoff\/2)**2 + np.cos(lat2) * np.cos(lat3) * np.sin(d_lon_dropoff\/ 2)**2\nc2 = 2 * np.arctan2(np.sqrt(a2), np.sqrt(1 - a2))\ndistance2 = R * c2\n\ntest_df['Dropoff_Distance_airport']=np.asarray(distance2)*0.621\n","3380e174":"# Rounding off data to two decimal places\n\ntrain_df['Distance']=np.round(train_df['Distance'],2)\ntrain_df['Pickup_Distance_airport']=np.round(train_df['Pickup_Distance_airport'],2)\ntrain_df['Dropoff_Distance_airport']=np.round(train_df['Dropoff_Distance_airport'],2)\n\ntest_df['Distance']=np.round(test_df['Distance'],2)\ntest_df['Pickup_Distance_airport']=np.round(test_df['Pickup_Distance_airport'],2)\ntest_df['Dropoff_Distance_airport']=np.round(test_df['Dropoff_Distance_airport'],2)","13d8cc56":"train_df.drop(['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude'],axis=1,inplace=True)\ntest_df.drop(['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude'],axis=1,inplace=True)","f5cbe9e8":"train_df.head()","cf77cbd8":"test_df.head()","3f8ea832":"print(train_df.shape , test_df.shape)","bf48a32c":"from sklearn.model_selection import train_test_split\n\nX=train_df.drop(['key','fare_amount'],axis=1)\ny=train_df['fare_amount']\n\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.01,random_state=80)","56b652fc":"print(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","c05fa940":"from sklearn.linear_model import LinearRegression\nreg=LinearRegression()\nreg.fit(X_train,y_train)\nreg.score(X_test,y_test)","0affd004":"predictions = reg.predict(test_df.drop(\"key\",axis=1))\npredictions = np.round(predictions,2)\npredictions","c8d5a18e":"Submission=pd.DataFrame(data=predictions,columns=['fare_amount'])\n\nSubmission['key']=test_df['key']\n\nSubmission=Submission[['key','fare_amount']]","d4204deb":"Submission.set_index('key',inplace=True)","3a4a17ff":"Submission.reset_index().head()","29e721b8":"Submission.to_csv('Submission.csv')","2de48e1e":"We expect most of these values to be very small (likely between 0 and 1) since it should all be differences between GPS coordinates within one city.  For reference, one degree of latitude is about 69 miles.  However, we can see the dataset has extreme values which do not make sense.  Let's remove those values from our training set. Based on the scatterplot, it looks like we can safely exclude values above 5 (though remember the scatterplot is only showing the first 2000 rows...)","309cf20a":"### Setup training data\nFirst let's read in our training data.  Kernels do not yet support enough memory to load the whole dataset at once, at least using `pd.read_csv`.  The entire dataset is about 55M rows, so we're skipping a good portion of the data, but it's certainly possible to build a model using all the data.","f451d11f":"There are a small amount, so let's remove them from the dataset.","29afb870":"### Explore and prune outliers\nFirst let's see if there are any `NaN`s in the dataset.","a168395f":"Latitude: 40.6413111 Longitude: -73.7781391 Of John F Kennedy Airport\n","d9205cef":"Let's create two new features in our training set representing the \"travel vector\" between the start and end points of the taxi ride, in both longitude and latitude coordinates.  We'll take the absolute value since we're only interested in distance traveled. Use a helper function since we'll want to do the same thing for the test set later.","ca67cd46":"# This is a basic Starter Kernel for the New York City Taxi Fare Prediction Playground Competition \nHere we'll use a simple linear model based on the travel vector from the taxi's pickup location to dropoff location which predicts the `fare_amount` of each ride.\n\nThis kernel uses some `pandas` and mostly `numpy` for the critical work.  There are many higher-level libraries you could use instead, for example `sklearn` or `statsmodels`.  ","a3a5b113":"Now let's quickly plot a subset of our travel vector features to see its distribution."}}