{"cell_type":{"c457301b":"code","02b8a2b5":"code","06eafb50":"code","a7cb7bbe":"code","74f6b876":"code","d836b700":"code","2c5dad86":"code","01a840a0":"code","9744f95c":"code","01247872":"markdown","d6c074fb":"markdown","7f421081":"markdown","56ced026":"markdown","8060be32":"markdown","6cb85ce1":"markdown","8e813933":"markdown","fc8dc443":"markdown","80c9e88a":"markdown","dcfa50bd":"markdown","a592381d":"markdown","a1c667ff":"markdown"},"source":{"c457301b":"import os\nimport time\nimport numpy as np\nimport pandas as pd\nfrom easydict import EasyDict as edict\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# image\nimport PIL\nfrom PIL import Image\nimport torchvision","02b8a2b5":"train = pd.read_csv('..\/input\/petfinder-pawpularity-score\/train.csv')","06eafb50":"# target distribution\nsns.histplot(train['Pawpularity'])","a7cb7bbe":"fig = plt.figure(figsize = (15,10))\nfor i, feat in enumerate(train.columns[1:-1]):\n    plt.subplot(3,4,i+1)\n    sns.boxplot(data = train, x = feat, y = 'Pawpularity')\n    plt.title(feat)\n    plt.xlabel('')\n    plt.ylabel('')","74f6b876":"bins = np.linspace(0,100,10)\nlabels = [1,2,3,4,5,6,7,8,9]\ntrain['score_bin'] = pd.cut(train['Pawpularity'], bins, labels = labels)","d836b700":"fig = plt.figure(figsize = (20, 30))\ni = 1\nfor label in labels:\n    df = train[train.score_bin == label]\n    idx = np.random.choice(df.index, 5)\n    imgs = train.loc[idx, 'Id']\n    for img in imgs:\n        img_path = os.path.join('..\/input\/petfinder-pawpularity-score\/train', img)+'.jpg'\n        image = Image.open(img_path)\n        plt.subplot(9,5,i)\n        plt.imshow(image)\n        plt.xticks([])\n        plt.yticks([])\n        if i%5 == 1:\n            plt.ylabel('score group{}'.format(label))\n        i+=1","2c5dad86":"resolution_bin = {1:[], 2:[], 3:[], 4:[], 5:[], 6:[], 7:[], 8:[], 9:[]}\nimg_files = list(train['Id'].values)\n\ndef resolution(img_tensor):\n    return img_tensor.shape[1]*img_tensor.shape[2]\n\nstart = time.time()\nfor i, img_file in enumerate(img_files):\n    img_tensor = torchvision.transforms.ToTensor()(Image.open(os.path.join('..\/input\/petfinder-pawpularity-score\/train', img_file)+'.jpg'))\n    resol = resolution(img_tensor)\n    score_bin = train.loc[train['Id'] == img_file, 'score_bin'].values[0]\n    resolution_bin[score_bin].append(resol)\n    if i%1000 == 0:\n        print('{} images processed'.format(i))\nprint('{} minutes elapsed'.format((time.time()-start)\/60))","01a840a0":"score_bin = []\nresols = []\nfor key, item in resolution_bin.items():\n    for element in item:\n        score_bin.append(key)\n        resols.append(element)\ndf = pd.DataFrame({'score_bin':score_bin, 'resolution':resols})","9744f95c":"fig = plt.figure(figsize = (15, 10))\nsns.boxplot(data = df, x = 'score_bin', y = 'resolution')","01247872":"Do you have insights about characteristics of pictures that has high Pawpularity score? Unfortunately, I don't.. Therefore we need DeepLearning based model that can extract complicated feature of the images.","d6c074fb":"### Pawpularity score binning","7f421081":"Let's visually check random set of images of each Pawpularity score bin.","56ced026":"As we can see, the distribution is little right-skewed but close to normal disturbution. ","8060be32":"### target distribution\n\nFirst, I will check distribution of the target variable(Pawpularity Score).","6cb85ce1":"### relation to metadata","8e813933":"Let's check out the relationship between target and each meta-data variables.","fc8dc443":"As we can see, there is no meta-data feature that has drastic effect on Pawpularity score. Using binary meta data as a raw seems to be result in poor peformance.\n\nTherefore I tried to treat metadata as **text data** and apply SOTA multimodal encoder **CLIP** to transform text to feature vector. ","80c9e88a":"### Resolution of images according to Pawpularity score","dcfa50bd":"Goal of this competition is to predict **Pawpularity Score**, which indicates popularity of animals.\nGiven **picture** of an animal and **metadata of the picture**, Our model have to Pawpularity score between 0 and 100. \n\nEach image contains one or more animals and meta data contains binary features of each image *(such as **human in the picture(1) or not(0)**  or  **focus is clear(1) or not(0)** )*","a592381d":"I came up with intuitive idea that \"Picture of high resolution might has higher Pawpularity score\". So I check out the result by visualizing relationship between Resolution and corresponding score bin. ","a1c667ff":"# 1. EDA"}}