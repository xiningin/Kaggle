{"cell_type":{"99f452fa":"code","0f013adb":"code","6f24ead8":"code","3acc270e":"code","5b1c3396":"code","6b7c7cf8":"code","190d1fef":"code","79549c9b":"code","d1f8bc65":"code","cfca0df4":"code","1c1abaee":"code","9006043f":"code","98f96fdf":"code","859aa218":"code","a95cc031":"code","dddd6670":"code","75c8a991":"code","a6abcc5a":"code","a352d180":"code","bed3cfea":"code","95c2de40":"code","cf3afc21":"code","940f91e5":"code","30598678":"code","ea2f645e":"code","4bd4bed7":"code","b96a2ba5":"code","ee457109":"code","d6f7821f":"code","039a51f9":"markdown","9e6c27dd":"markdown","e8435677":"markdown","a74d5bd8":"markdown","8c7886e1":"markdown","3e914cd4":"markdown","168bb19e":"markdown","28d795cc":"markdown","147e208d":"markdown","2b7ceeac":"markdown","cb9b1ec2":"markdown","1290f3d8":"markdown","f92e3081":"markdown","837cc97f":"markdown","fe35f62f":"markdown","a87f9ac3":"markdown","cf3798be":"markdown"},"source":{"99f452fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import mean_squared_error as mse\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0f013adb":"!head -3 \/kaggle\/input\/national-stock-exchange-time-series\/infy_stock.csv","6f24ead8":"df = pd.read_csv(\"..\/input\/national-stock-exchange-time-series\/infy_stock.csv\",\n                 usecols=['Date', 'Close'], parse_dates=['Date'],index_col='Date')\ndf.head()","3acc270e":"df.info()","5b1c3396":"print(\"Min:\",df.index.min())\nprint(\"Max:\",df.index.max())","6b7c7cf8":"plt.figure(figsize=(17,5))\ndf.Close.plot()\nplt.title(\"Closing Price\",fontsize=20)\nplt.show()","190d1fef":"# The Split\nplt.figure(figsize=(17,5))\nstock_price = pd.concat([df.Close[:'2015-06-12']\/2,df.Close['2015-06-15':]]) # adjustment\nplt.plot(stock_price)\nplt.title(\"Closing Price Adjusted\",fontsize=20)\nplt.show()","79549c9b":"#helper function to plot the stock prediction\nprev_values = stock_price.iloc[:180]\ny_test = stock_price.iloc[180:]\n\ndef plot_pred(pred,title):\n    plt.figure(figsize=(17,5))\n    plt.plot(prev_values,label='Train')\n    plt.plot(y_test,label='Actual')\n    plt.plot(pred,label='Predicted')\n    plt.ylabel(\"Stock prices\")\n    plt.title(title,fontsize=20)\n    plt.legend()\n    plt.show()","d1f8bc65":"#Average of previous values\ny_av = pd.Series(np.repeat(prev_values.mean(),68),index=y_test.index)\nmse(y_av,y_test)","cfca0df4":"plot_pred(y_av,\"Average\")","1c1abaee":"weight = np.array(range(0,180))\/180\nweighted_train_data =np.multiply(prev_values,weight)\n\n# weighted average is the sum of this weighted train data by the sum of the weight\n\nweighted_average = sum(weighted_train_data)\/sum(weight)\ny_wa = pd.Series(np.repeat(weighted_average,68),index=y_test.index)\n\nmse(y_wa,y_test)","9006043f":"plot_pred(y_wa,\"Weighted Average\")","98f96fdf":"y_train = stock_price[80:180]\ny_test = stock_price[180:]\nprint(\"y train:\",y_train.shape,\"\\ny test:\",y_test.shape)","859aa218":"X_train = pd.DataFrame([list(stock_price[i:i+80]) for i in range(100)],\n                       columns=range(80,0,-1),index=y_train.index)\nX_test = pd.DataFrame([list(stock_price[i:i+80]) for i in range(100,168)],\n                       columns=range(80,0,-1),index=y_test.index)\n\nX_train","a95cc031":"y_ma = X_test.mean(axis=1)\nmse(y_ma,y_test)","dddd6670":"plot_pred(y_ma,\"Moving Average\")","75c8a991":"weight = np.array(range(1,81))\/80\n#weighted moving average\ny_wma = X_test@weight\/sum(weight)\nmse(y_wma,y_test)","a6abcc5a":"plot_pred(y_wma,\"Weighted Moving Average\")","a352d180":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\n\nlr.fit(X_train,y_train)\ny_lr = lr.predict(X_test)\ny_lr = pd.Series(y_lr,index=y_test.index)\n\nmse(y_test,y_lr)","bed3cfea":"plot_pred(y_lr,\"Linear Regression\")","95c2de40":"weight = np.array(range(1,101))\/100\nwlr = LinearRegression()\n\nwlr.fit(X_train,y_train,weight)\ny_wlr = wlr.predict(X_test)\ny_wlr = pd.Series(y_wlr,index=y_test.index)\n\nmse(y_test,y_wlr)","cf3afc21":"plot_pred(y_wlr,\"Weighted Linear Regression\")","940f91e5":"from sklearn.linear_model import Lasso\nlasso = Lasso()\n\nlas = lasso.fit(X_train,y_train)\ny_las = las.predict(X_test)\ny_las = pd.Series(y_las,index = y_test.index)\n\nmse(y_las,y_test)","30598678":"plot_pred(y_las,\"Lasso Regression\")","ea2f645e":"from keras.models import Sequential\nfrom keras.layers import Dense\n\n#moving average Neural Network\nma_nn = Sequential([Dense(64,input_shape=(80,),activation='relu'), \n                    Dense(32,activation='linear'),Dense(1)])\n\nma_nn.compile(loss='mse',optimizer='rmsprop',metrics=['mae','mse'])\n\nhistory = ma_nn.fit(X_train, y_train, epochs=250, batch_size=32, validation_split=0.25)","4bd4bed7":"plt.plot(history.history['mse'],label='Training loss')\nplt.plot(history.history['val_mse'], label='Validation loss')\nplt.title(\"Mean Squared error\")\nplt.xlabel(\"Number of Epochs\")\nplt.legend()\nplt.show()","b96a2ba5":"loss_nn,mae_nn,mse_nn = ma_nn.evaluate(X_test,y_test)\nprint(\"\\nloss:\",loss_nn,\"\\nmae:\",mae_nn,\"\\nmse:\",mse_nn)","ee457109":"y_nn = ma_nn.predict(X_test)\ny_nn = pd.Series(y_nn[:,0],index=y_test.index)\nmse(y_nn,y_test)","d6f7821f":"plot_pred(y_nn,\"Moving Average Prediction\")","039a51f9":"# 2. Weighted Mean\n\nWe shall give more weightage to the data which are close to the last day in training data, while calculating the mean. The last day in the training set will get a weightage of 1(=180\/180) and the first day will get a weightage of 1\/180.","9e6c27dd":"And now we have an adjusted time series of Infosys stock prices.\n\nLets now Predict the Stock price based on various methods. \n \n* We will predict the values on last 68 days in the series.\n* We will use Mean squared error as a metrics to calculate the error in our prediction.\n* We will compare the results of various methods at the end.","e8435677":"# 4. Linear regression\n   In this method, we will perform a linear regression on our dataset. The values will be predicted as a linear combination of the previous 80 days values. ","a74d5bd8":"The above methods are simple models. We will see more about classical time series analysis in the another notebook (Will update soon).\n\nFeedbacks are most welcomed!","8c7886e1":"# 3. Moving Average\n   We have to predict the 68 values in data set and for each values we will get the average of previous 80 days.  \n   This will be a simple mean of each column in the y_test.","3e914cd4":"We have data on working days only and so there are 248 data with start date as 01-01-2015 and end date as 31-12-2015.","168bb19e":"# 7. Lasso Regression\n\nLinear Regression with L1 regulations.","28d795cc":" There are 100 days in training and 68 days in testing set. We will construct the features, that is the last 80 days stock for each date in the y_train and y_test. This would be our target variable.","147e208d":"# 8. Moving window Neural Network\n\nWe construct a simple Feed Forward network taking 80 features as our input.","2b7ceeac":"      X_train is now a collection of 100 dates as index and a collection of stock prices of previous 80 days as features.\n    \n      Similarlily, X_test is now a collection of 68 dates as index and a collection of stock prices of previous 80 days as features.\n      \n      NOTE: Here 76 working days from '2015-05-04', the stock had a price of 986.725 and 77 working days from '2015-05-05', the stock has the same value. You can see the similarity of values along the diagonal. This is because consecutitive data will be similar to the previous except it drops the last value, shifts and has a new value.\n      \n      We will use these values for stock price prediction in the other four methods.","cb9b1ec2":"# Introduction\n\n   This is an attempt to predict Stock prices based on Stock prices of previous days. [The stock market](https:\/\/www.investopedia.com\/terms\/s\/stockmarket.asp) refers to the collection of markets and exchanges where regular activities of buying, selling, and issuance of shares of publicly-held companies take place. \n   \n  This is a time series analysis and we will see simple eight ways to predict the Stock prices. The various models to be used are:\n   1. Average\n   2. Weighted Average\n   3. Moving Average\n   4. Moving Weighted Average\n   5. Linear Regression\n   6. Weighted Linear Regression\n   7. Lasso Regression\n   8. Moving Window Neural Network ","1290f3d8":"# Adjustment for split-up\n\nThere is a huge drop on 15\/06\/2015, this was the [fifth split](https:\/\/www.splithistory.com\/infy\/) in Infosys Share price. If we take this whole data, the prediction might not be  as expected as there is a split in between!\n\nWe have to either drop the data or adjust the values before split. Since the split is 2 for 1, we can normalize the data prior to split by dividing them by 2. (Old shares are half that of today's share).","f92e3081":"# The Data\n   \n   \n   The data we use for prediction would be for closing price of [Infosys](https:\/\/www.infosys.com\/) in NSE for the business days in 2015. So we will import only the Date column and Closing price column. ","837cc97f":"    For the other methods we will predict the value of stock price on a day based on the values of stock prices of 80 days prior to it. So in our series we will not consider the first eight days (since there previous eighty days is not in the series).\n    We have to test the last 68 values. This would be based on the last 80 days stock prices of each day in the test data.\n    Since we have neglected first 80 and last 68 is our test set, the train dataset will be between 80 and 180 (100 days).","fe35f62f":"# 4. Weighted Moving Average\n\nWe will obtain the stock price on the test date by calculating the weighted mean of past 80 days. The last of the 80 day will have a weightage of 1(=80\/80) and the first will have a weightage of 1\/80. ","a87f9ac3":"# 6. Weighted Linear Regression\nWe will provide weightage to our input data rather than the features. ","cf3798be":"# 1. Average \n\nThis is the simplest model. We will get as average of the previous values and predict it as the forecast. "}}