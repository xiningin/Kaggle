{"cell_type":{"e27cc6d6":"code","85da5e43":"code","2bf568b2":"code","7e61d848":"code","6e0a3535":"code","38054b1f":"code","5619c723":"code","3c384c90":"code","7e3911e2":"code","9071337e":"code","0dfb0069":"code","c44cdb1a":"code","e4400742":"code","6991245d":"code","16c80415":"code","cba6c6e8":"code","3b62398d":"code","3667551d":"code","39559930":"code","2b62a318":"code","460fb287":"code","a3088270":"code","e99312cc":"code","f6e4678a":"code","87de31f3":"code","13887f98":"code","c7c9ea84":"code","0a3d8ddb":"code","20752de6":"code","d97ef84e":"code","3f04dfc9":"code","4e662b03":"markdown","64097667":"markdown","20291c81":"markdown","ff20a4a5":"markdown","0775630a":"markdown","736ba26f":"markdown","8cd6b0cd":"markdown","874208e8":"markdown","0435cea9":"markdown","eb039126":"markdown","282de631":"markdown","cfc776ba":"markdown","d8819440":"markdown","549107c2":"markdown","c7735c6e":"markdown","566f6e84":"markdown","92103da4":"markdown","e8afe38a":"markdown","94f773f9":"markdown","52b0dbf3":"markdown","8c761dcb":"markdown"},"source":{"e27cc6d6":"import numpy as np\nimport pandas as pd ","85da5e43":"df = pd.read_csv('..\/input\/water-potability\/water_potability.csv')\ndf.head()","2bf568b2":"df.info()","7e61d848":"import matplotlib.pyplot as plt\n\nlabels = []\nfor i, df_visualize in enumerate(df.groupby([\"Potability\"])):\n    labels.append(df_visualize[0])\n    plt.bar(i, df_visualize[1].count(), label=df_visualize[0])\nplt.xticks(range(len(labels)), labels)\nplt.legend()\nplt.title('Potability')\nplt.show()","6e0a3535":"data = df.groupby(\"Potability\")[\"ph\"].sum()\npie, ax = plt.subplots(figsize=[10,6])\nlabels = data.keys()\nplt.pie(x=data, autopct=\"%.1f%%\", labels=labels, pctdistance=0.5)\nplt.title(\"Potability\", fontsize=14)","38054b1f":"df.hist(figsize=(15,15))\nplt.show()","5619c723":"df.corr()","3c384c90":"import seaborn as sb\n\n\nplt.figure(figsize=(12,10))\nsb.heatmap(df.corr(), annot=True)","7e3911e2":"df[df.columns[1:]].corr()['Potability'][:].sort_values(ascending=False)","9071337e":"df.isnull().sum()","0dfb0069":"df['ph'].fillna(value=df['ph'].median(),inplace=True)\ndf['Sulfate'].fillna(value=df['Sulfate'].median(),inplace=True)\ndf['Trihalomethanes'].fillna(value=df['Trihalomethanes'].median(),inplace=True)","c44cdb1a":"df.isnull().sum()","e4400742":"x = df.drop(['Potability'], axis='columns')\ny = df.Potability","6991245d":"from sklearn.preprocessing import MinMaxScaler\n\n\nfeatures_scaler = MinMaxScaler()\nfeatures = features_scaler.fit_transform(x)\nfeatures","16c80415":"from sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nmodel_params = {\n    'svm': {\n        'model': SVC(gamma='auto'),\n        'params' : {\n            'C': [1,10,20,30,50],\n            'kernel': ['rbf','linear','poly']\n        }  \n    },\n    'random_forest': {\n        'model': RandomForestClassifier(),\n        'params' : {\n            'n_estimators': [10,50,100]\n        }\n    },\n    'logistic_regression' : {\n        'model': LogisticRegression(solver='liblinear',multi_class='auto'),\n        'params': {\n            'C': [1,5,10]\n        }\n    },\n    'KNN' : {\n        'model': KNeighborsClassifier(),\n        'params': {\n            'n_neighbors': [3,7,11,13]\n        }\n    }\n    \n}","cba6c6e8":"from sklearn.model_selection import GridSearchCV\nscores = []\n\nfor model_name, mp in model_params.items():\n    clf =  GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)\n    clf.fit(features, y)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\n    \ndf_score = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndf_score","3b62398d":"sb.barplot(x=\"model\", y=\"best_score\", data=df_score)\nplt.ylim(0, 1)","3667551d":"row_score_max = df_score['best_score'].argmax()\ndf_score.loc[[row_score_max]]","39559930":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(features, y, test_size=0.25, random_state=101)","2b62a318":"model = RandomForestClassifier(n_estimators=100)\nmodel.fit(x_train,y_train)\nmodel.score(x_test,y_test)","460fb287":"from sklearn.metrics import confusion_matrix\n\n\ny_predicted = model.predict(x_test)\ncm = confusion_matrix(y_test,y_predicted)\nplt.figure(figsize = (10,7))\nsb.heatmap(cm, annot=True, fmt=\".1f\")\nplt.xlabel('Predicted')","a3088270":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_predicted))","e99312cc":"y.value_counts()","f6e4678a":"from imblearn.over_sampling import SMOTE\nsmote = SMOTE(sampling_strategy='minority')\nx_sm, y_sm = smote.fit_resample(features, y)\n\ny_sm.value_counts()","87de31f3":"from sklearn.model_selection import GridSearchCV\nscores = []\n\nfor model_name, mp in model_params.items():\n    clf =  GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)\n    clf.fit(x_sm, y_sm)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\n    \ndf_score_smote = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndf_score_smote","13887f98":"sb.barplot(x=\"model\", y=\"best_score\", data=df_score_smote)\nplt.ylim(0, 1)","c7c9ea84":"row_score_max_smote = df_score_smote['best_score'].argmax()\ndf_score_smote.loc[[row_score_max_smote]]","0a3d8ddb":"x_train_smote, x_test_smote, y_train_smote, y_test_smote = train_test_split(x_sm, y_sm, test_size=0.25, random_state=101)","20752de6":"model_smote = RandomForestClassifier(n_estimators=100)\nmodel_smote.fit(x_train_smote,y_train_smote)\nmodel_smote.score(x_test_smote,y_test_smote)","d97ef84e":"y_predicted_smote = model_smote.predict(x_test_smote)\ncm = confusion_matrix(y_test_smote,y_predicted_smote)\nplt.figure(figsize = (10,7))\nsb.heatmap(cm, annot=True, fmt=\".1f\")\nplt.xlabel('Predicted')","3f04dfc9":"print(classification_report(y_test_smote,y_predicted_smote))","4e662b03":"### Check the imbalance dataset","64097667":"### Cross validation and hyperparemeter using a new dataset","20291c81":"#  **Water Quality Potability Prediction**","ff20a4a5":"# Exploratory Data Analysis","0775630a":"### Handle Imbalance using **SMOTE**","736ba26f":"### Cross Validation and Hyperparameter Tuning","8cd6b0cd":"Access to safe drinking-water is essential to health, a basic human right and a component of effective policy for health protection. This is important as a health and development issue at a national, regional and local level. In some regions, it has been shown that investments in water supply and sanitation can yield a net economic benefit, since the reductions in adverse health effects and health care costs outweigh the costs of undertaking the interventions.","874208e8":"# Try handle imbalance dataset to get better result","0435cea9":"### Confusion Matrix","eb039126":"### Check the null value of the data","282de631":"### Fill the null value with the **median** value","cfc776ba":"### Find the best alghoirtm and the best parameter","d8819440":"### Check the correlation of each column","549107c2":"### Classification Report","c7735c6e":"# **Conclusion**\n## With handle imbalance dataset with SMOTE highly affect the F1-score of the \"1\" Potabilty from **0.46** to **0.74**","566f6e84":"### Display the result again to compare before and after handle imbalance dataset","92103da4":"### Check the histogram of the data","e8afe38a":"# Data Explanation\n* ph: pH of 1. water (0 to 14).\n* Hardness: Capacity of water to precipitate soap in mg\/L.\n* Solids: Total dissolved solids in ppm.\n* Chloramines: Amount of Chloramines in ppm.\n* Sulfate: Amount of Sulfates dissolved in mg\/L.\n* Conductivity: Electrical conductivity of water in \u03bcS\/cm.\n* Organic_carbon: Amount of organic carbon in ppm.\n* Trihalomethanes: Amount of Trihalomethanes in \u03bcg\/L.\n* Turbidity: Measure of light emiting property of water in NTU.\n* Potability: Indicates if water is safe for human consumption. Potable - 1 and Not potable - 0","94f773f9":"### Normalize Data using **MinMaxScaler**","52b0dbf3":"### Read dataset","8c761dcb":"### Display the result of the best alghoritm"}}