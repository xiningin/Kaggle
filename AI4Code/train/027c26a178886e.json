{"cell_type":{"8685b69b":"code","554ab0b6":"code","ac969aed":"code","ab4afa4e":"code","55f3cc00":"code","a04ba342":"code","d1f1ec8a":"code","761b275d":"code","c687df55":"code","eed643b0":"code","6e0d4056":"code","2a839dfe":"code","4466909d":"code","f5594411":"code","cbeff899":"code","25625190":"markdown","f80eaead":"markdown"},"source":{"8685b69b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","554ab0b6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ac969aed":"#reading the csv file\nbkyln_df=pd.read_csv('..\/input\/brooklyn-99-episode-data\/brooklyn99_episodes.csv')\nbkyln_df","ab4afa4e":"#checking the columns\nbkyln_df.columns","55f3cc00":"#chcking is there any missing values in columns\nbkyln_df.isnull().sum()","a04ba342":"#importing the imdb ratings dataset\nimdb_df=pd.read_csv('..\/input\/brooklyn-99-episode-data\/brooklyn99_imdb.csv')\nimdb_df.head()","d1f1ec8a":"#checking null values in columns\nimdb_df.isnull().sum()","761b275d":"#checking columns details\nimdb_df.columns","c687df55":"#conversion of original_date to year month day for better plotting\nbkyln_df[['year','month','day']]=bkyln_df['original_air_date'].str.split('-',expand=True)","eed643b0":"#removal of unimportant columns in the dataset\nbkyln_new=bkyln_df.drop(['original_air_date','prod_code'],axis=1)\nbkyln_new.head()","6e0d4056":"bkyln_new.info()","2a839dfe":"#conversion of year column[object] to int\nbkyln_df['year']=bkyln_df['year'].astype(int)","4466909d":"#ploting the data\nfig = plt.figure(figsize=(12,5))\nsns.barplot(x=bkyln_df['year'].value_counts().index,y=bkyln_df['year'].value_counts().values)\nsns.despine()\nplt.title('Year of Episodes Distripution',weight='bold',fontsize=20)","f5594411":"#checking the season and viewers\nx=bkyln_new['month']\n# y=bkyln_new['us_viewers']\nplt.hist(x)\nplt.show()","cbeff899":"#checking the yearly and monthly views\nfig,ax= plt.subplots(1,2,figsize=(14,6))\nax[0].pie(bkyln_df.groupby(['year'])['us_viewers'].sum().values,labels=bkyln_df.groupby(['year'])['us_viewers'].sum().index,autopct='%1.1f%%')\nax[1].pie(bkyln_df.groupby(['month'])['us_viewers'].sum().values,labels=bkyln_df.groupby(['month'])['us_viewers'].sum().index,autopct='%1.1f%%')\nax[0].set_xlabel('Yearly Views',weight='semibold',fontsize=15)\nax[1].set_xlabel('Monthly Views',weight='semibold',fontsize=15)\nplt.suptitle('% of Yearly Views & Monthly Views',weight='bold',fontsize=20)","25625190":"Episodes Yearly Distribution ","f80eaead":"Yearly and Monthly views"}}