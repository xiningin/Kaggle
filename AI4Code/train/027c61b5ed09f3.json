{"cell_type":{"06cc84e4":"code","ff0420dc":"code","fb7f03f8":"code","43936c84":"code","c226d934":"code","3474160d":"code","d8ec1ec1":"code","c17a343b":"code","23706828":"code","0aaed2af":"code","46ec1dcc":"code","40be4b1a":"code","6dffb700":"code","c2275df2":"code","1e986203":"code","a7ab6330":"markdown","0ee3f1f3":"markdown","bde3d0c8":"markdown","ff1242ac":"markdown"},"source":{"06cc84e4":"# check if the plotly is installed or not\n!pip install plotly","ff0420dc":"# import the libraries\nimport numpy as np\nimport pandas as pd \nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.subplots import make_subplots\nimport plotly.offline as py","fb7f03f8":"# load the cutomer data\ndf = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ndf.head()","43936c84":"df.info()","c226d934":"# creating a two dimentional matrix \nx = df.iloc[:,[3,4]].values","3474160d":"# find the optimal number of clusters using elbow method\n\nWCSS = []\nfor i in range(1,11):\n    model = KMeans(n_clusters = i,init = 'k-means++')\n    model.fit(x)\n    WCSS.append(model.inertia_)\nfig = plt.figure(figsize = (7,7))\nplt.plot(range(1,11),WCSS, linewidth=4, markersize=12,marker='o',color = 'green')\nplt.xticks(np.arange(11))\nplt.xlabel(\"Number of clusters\")\nplt.ylabel(\"WCSS\")\nplt.show()\n","d8ec1ec1":"# since elbow occured at 5, hence the optimal number of clusters for the mall data is 5 \n\nmodel = KMeans(n_clusters = 5, init = \"k-means++\", max_iter = 300, n_init = 10, random_state = 0)\ny_clusters = model.fit_predict(x)","c17a343b":"plt.figure(figsize = (20,10))\nplt.scatter(x[y_clusters == 0,0],x[y_clusters == 0,1],s = 50, c = 'green', label = \"High income - Less spending\")\nplt.scatter(x[y_clusters == 1,0],x[y_clusters == 1,1],s = 50, c = 'blue', label = \"medium income - medium spending\")\nplt.scatter(x[y_clusters == 2,0],x[y_clusters == 2,1],s = 50, c = 'black', label = \"Hign income - high spending\")\nplt.scatter(x[y_clusters == 3,0],x[y_clusters == 3,1],s = 50, c = 'red', label = \"Less income - high spending\")\nplt.scatter(x[y_clusters == 4,0],x[y_clusters == 4,1],s = 50, c = 'pink', label = \"Less income and less spending\")\nplt.scatter(model.cluster_centers_[:,0],model.cluster_centers_[:,1], s = 100, c = \"yellow\", label = \"centroids\")\nplt.xlabel(\"Anual income(k$) -- >\")\nplt.ylabel(\"spending score out of 100 -- >\")\nplt.legend()\nplt.show()","23706828":"# input matrix for segmentation\nx = df[['Age','Annual Income (k$)','Spending Score (1-100)']].values","0aaed2af":"# find the optimal number of clusters using elbow method  -- >This is for 3 features = [age,anual income,spending score]\n\nWCSS = []\nfor i in range(1,11):\n    model = KMeans(n_clusters = i,init = 'k-means++')\n    model.fit(x)\n    WCSS.append(model.inertia_)\nfig = plt.figure(figsize = (7,7))\nplt.plot(range(1,11),WCSS, linewidth=4, markersize=12,marker='o',color = 'red')\nplt.xticks(np.arange(11))\nplt.xlabel(\"Number of clusters\")\nplt.ylabel(\"WCSS\")\nplt.show()","46ec1dcc":"# finding the clusters based on input matrix \"x\"\nmodel = KMeans(n_clusters = 5, init = \"k-means++\", max_iter = 300, n_init = 10, random_state = 0)\ny_clusters = model.fit_predict(x)","40be4b1a":"# countplot to check the number of clusters and number of customers in each cluster\nsns.countplot(y_clusters)","6dffb700":"print(x[y_clusters == 0,0][1])\nprint(x[y_clusters == 0,1][1])\nprint(x[y_clusters == 0,2][1])","c2275df2":"# 3d scatterplot using matplotlib\n\nfig = plt.figure(figsize = (15,15))\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x[y_clusters == 0,0],x[y_clusters == 0,1],x[y_clusters == 0,2], s = 40 , color = 'blue', label = \"cluster 0\")\nax.scatter(x[y_clusters == 1,0],x[y_clusters == 1,1],x[y_clusters == 1,2], s = 40 , color = 'orange', label = \"cluster 1\")\nax.scatter(x[y_clusters == 2,0],x[y_clusters == 2,1],x[y_clusters == 2,2], s = 40 , color = 'green', label = \"cluster 2\")\nax.scatter(x[y_clusters == 3,0],x[y_clusters == 3,1],x[y_clusters == 3,2], s = 40 , color = '#D12B60', label = \"cluster 3\")\nax.scatter(x[y_clusters == 4,0],x[y_clusters == 4,1],x[y_clusters == 4,2], s = 40 , color = 'purple', label = \"cluster 4\")\nax.set_xlabel('Age of a customer-->')\nax.set_ylabel('Anual Income-->')\nax.set_zlabel('Spending Score-->')\nax.legend()\nplt.show()\n","1e986203":"# 3d scatterplot using plotly\nScene = dict(xaxis = dict(title  = 'Age -->'),yaxis = dict(title  = 'Spending Score--->'),zaxis = dict(title  = 'Annual Income-->'))\n\n# model.labels_ is nothing but the predicted clusters i.e y_clusters\nlabels = model.labels_\ntrace = go.Scatter3d(x=x[:, 0], y=x[:, 1], z=x[:, 2], mode='markers',marker=dict(color = labels, size= 10, line=dict(color= 'black',width = 10)))\nlayout = go.Layout(margin=dict(l=0,r=0),scene = Scene,height = 800,width = 800)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\nfig.show()","a7ab6330":"**Now I'm going to include 3 independant variables such as age, anual income and the spending score in segmentation algorithm.**","0ee3f1f3":"From the above countplot we can see that there are more number of customers in the cluster 2(green color).\nsame colors are used to plot the clusters(In 3d scatter plot below).","bde3d0c8":"** Work in progress....**\n\nPlease upvote if you like this.","ff1242ac":"From the above elbow method, we can see that the optimal number of clusters == 5\n"}}