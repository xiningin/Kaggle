{"cell_type":{"384cbdc6":"code","b4f036b8":"code","7abd0468":"code","7a487f74":"code","dd16c341":"code","3b1589fd":"code","377527c1":"code","085a0d32":"code","1547a86e":"code","2e56e823":"code","ba7a42c2":"code","13cecec5":"code","37bf84c8":"code","8c0e2036":"code","6d08dfeb":"code","98e5d662":"code","820ec025":"code","5766c78c":"code","24c41c6a":"code","470836fc":"code","b14b0655":"code","c52c66ee":"code","b2567e72":"code","0b19b47f":"code","0cb72347":"code","6a12a25f":"code","90ec0bc1":"code","c052ee40":"code","2007f52e":"code","4e2d1569":"code","e29e3e76":"code","cc0ef8db":"code","05d80134":"code","41c84be6":"code","ad56ecd7":"code","2d161a73":"markdown","bffaa518":"markdown","5effbfa8":"markdown","113773e5":"markdown","d739163d":"markdown","0f6d3b58":"markdown","83a93cf8":"markdown","7569d967":"markdown","2c7ba3af":"markdown","b73c4f2c":"markdown"},"source":{"384cbdc6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4f036b8":"genres = pd.read_csv('\/kaggle\/input\/dataset-of-songs-in-spotify\/genres_v2.csv')\nplaylist = pd.read_csv('\/kaggle\/input\/dataset-of-songs-in-spotify\/playlists.csv')\ngenres.head()","7abd0468":"genres.describe()","7a487f74":"genres.info()","dd16c341":"genres.isnull().sum()","3b1589fd":"import seaborn as sns \nimport matplotlib.pyplot as plot","377527c1":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ngenres['genre_encoded'] = le.fit_transform(genres['genre'])\ngenres.head() ","085a0d32":"print(genres.columns)","1547a86e":"X = genres[['danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',\n       'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo',  'duration_ms',\n       'time_signature']]\n\ny = genres[['genre_encoded']]\n\nfeatures = ['danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',\n       'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo','duration_ms' ]\nX.head()","2e56e823":"genres['genre'].unique()\n","ba7a42c2":"display(genres[['danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',\n       'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo',\n       'type', 'id', 'uri', 'track_href', 'analysis_url', 'duration_ms',\n       'time_signature','genre']].groupby(['mode','key','genre']).agg([\"max\",'mean',\"min\"]).style.background_gradient(cmap=\"Oranges\"))","13cecec5":"def ploting(feature): \n    plot.figure(figsize= (24,12))\n    g = sns.catplot(x=feature, y ='genre', data = genres, kind = 'bar' )\n    g.set_ylabels('Genre')\n\n    plot.show()\n","37bf84c8":"for x in features:\n    ploting(x)","8c0e2036":"def ploting2(feature):    \n    sns.regplot(x = genres[feature], y = genres['genre'],fit_reg = False)\n    plot.show()","6d08dfeb":"for x in features:\n    ploting2(x)","98e5d662":"corr = genres.corr()\nplot.figure(figsize = (30,12))\nsns.heatmap(corr,vmax =1 ,vmin = -1,linewidth = 5, square =True, annot =True ,annot_kws ={'size':8},fmt ='.1f',cmap='BrBG_r')\nplot.title('Correlation')\nplot.show()","820ec025":"genres['genre'].unique()","5766c78c":"from sklearn.model_selection import train_test_split\nX_train, X_test , y_train ,y_test = train_test_split(X,y,random_state =0)","24c41c6a":"accuracy = [['model','accuracy']]","470836fc":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)","b14b0655":"yhat = model.predict(X_test)","c52c66ee":"from sklearn.metrics import accuracy_score\n\naccuracy.append(['LogisticRegression', accuracy_score(y_test , yhat, normalize =True)])\naccuracy_score(y_test , yhat, normalize =True)","b2567e72":"from sklearn.naive_bayes import GaussianNB\nmodel = GaussianNB()\nmodel.fit(X_train,y_train)","0b19b47f":"yhat = model.predict(X_test)","0cb72347":"accuracy.append(['Naive Bayes' ,accuracy_score(y_test,yhat)])\naccuracy_score(y_test,yhat)","6a12a25f":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(max_depth=10, min_samples_split=10, random_state=42)\nclf.fit(X_train,y_train)","90ec0bc1":"yhat= clf.predict(X_test)","c052ee40":"accuracy.append(['DecisionTreeClassifier',accuracy_score(y_test,yhat)])\naccuracy_score(y_test,yhat)","2007f52e":"from sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier(n_neighbors = 8)\nmodel.fit(X_train,y_train)","4e2d1569":"yhat = model.predict(X_test)\n","e29e3e76":"accuracy.append(['K-Nearest Neighbours',accuracy_score(y_test,yhat)])\naccuracy_score(y_test,yhat)","cc0ef8db":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(max_depth = 10 , random_state  = 0)\nmodel.fit(X_train,y_train)","05d80134":"yhat = model.predict(X_test)","41c84be6":"accuracy.append(['Random Forest',accuracy_score(y_test,yhat)])\naccuracy_score(y_test,yhat)","ad56ecd7":"from prettytable import PrettyTable\ntable = PrettyTable()\ntable.field_names = accuracy[0]\nfor i in range(len(accuracy)):\n    if i!=0:\n        table.add_row(accuracy[i])\nprint(table)","2d161a73":"# Visualization","bffaa518":"using K-Nearest Neighbours ","5effbfa8":"Using DecisionTreeClassifier","113773e5":"# Conclusion","d739163d":"# Model Selection","0f6d3b58":"### From the table available we can see the random tree is giving the best accuracy","83a93cf8":"using Random Forest","7569d967":"Using Naive Bayes","2c7ba3af":"# Results ","b73c4f2c":"Checking with LogisticRegression"}}