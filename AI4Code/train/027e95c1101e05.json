{"cell_type":{"cdf8e225":"code","bee56bc3":"code","dd546155":"code","e54ca0d8":"code","2eb504df":"code","fbdd1ef6":"code","7941716f":"code","936cc77e":"code","3c262b57":"code","d15bf12f":"code","89ab2a1d":"code","4ed8d95f":"code","5d54c9e4":"code","91002c66":"code","15079f25":"code","7377a8b3":"code","01c433d2":"code","1fdbe966":"code","572bfb90":"code","aa9aa479":"code","99fd6bf1":"code","0a1691d2":"code","a1ad6500":"code","18d3ab88":"code","143e709e":"code","c1ae18f3":"code","0fcdd0a1":"code","035ac020":"code","e45d714d":"code","f00c580e":"code","0fdb031e":"markdown","f4f2d307":"markdown","7cb39e63":"markdown","16f04e11":"markdown","aacb1d80":"markdown","a90df322":"markdown","2d6493de":"markdown","ff8531c1":"markdown","c9887b03":"markdown"},"source":{"cdf8e225":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport geopandas as gpd\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/groen-gebieden-tilburg'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bee56bc3":"### Importeren van de data in een geopanda dataframe.\ngroen_gebieden_data = gpd.read_file('\/kaggle\/input\/groen-gebieden-tilburg\/groen_gebieden_tilburg.json')\ngroen_gebieden_data.head(5)\n","dd546155":"### Data stadsbuurten omzetten in geopanda dataframe\nstadsbuurten_data = gpd.read_file('\/kaggle\/input\/groen-gebieden-tilburg\/buurten_tilburg.json')\nstadsbuurten_data.head(5)","e54ca0d8":"### Alle parken en het aantal rijen\ngroen_gebieden_data['omschrijving'].value_counts()","2eb504df":"### Maken van de kaart\nax = stadsbuurten_data.plot(figsize=(12, 12), color='none', edgecolor='grey')\ngroen_gebieden_data.plot(color='green', ax=ax)","fbdd1ef6":"import folium","7941716f":"### Interactieve kaart aanmaken met folium\nm = folium.Map(location=[51.55, 5.08], zoom_start=12, tiles='cartodbpositron')\n\n### Toevoegen buurten\nfor _, r in stadsbuurten_data.iterrows():\n    #without simplifying the representation of each borough, the map might not be displayed\n    #sim_geo = gpd.GeoSeries(r['geometry'])\n    sim_geo = gpd.GeoSeries(r['geometry']).simplify(tolerance=0.001)\n    geo_j = sim_geo.to_json()\n    geo_j = folium.GeoJson(data=geo_j,\n                           style_function=lambda x: {'fillColor': 'lightgrey', 'weight':1, 'color':'#202020'})\n    folium.Popup(r['buurtnaam'],['oppervlakte']).add_to(geo_j)\n    geo_j.add_to(m)\n    \n### Toevoegen groen gebieden\nfor _, r in groen_gebieden_data.iterrows():\n    #without simplifying the representation of each borough, the map might not be displayed\n    #sim_geo = gpd.GeoSeries(r['geometry'])\n    sim_geo = gpd.GeoSeries(r['geometry']).simplify(tolerance=0.001)\n    geo_j = sim_geo.to_json()\n    geo_j = folium.GeoJson(data=geo_j,\n                           style_function=lambda x: {'fillColor':'green','weight':0.5,'color':'#202020'})\n    folium.Popup(r['omschrijving']).add_to(geo_j)\n    geo_j.add_to(m)\n\n### Kaart weergeven\nm","936cc77e":"### Importeren van de bomendata in een geopanda dataframe.\nbomen_data = gpd.read_file('\/kaggle\/input\/groen-gebieden-tilburg\/bomen.json')\nbomen_data.head(5)","3c262b57":"### Hoeveel bomen zijn er gemeten in Tilburg? P.S. Meteen is te zien dat er veel nullwaardes zijn.\nbomen_data.count()","d15bf12f":"### Voor de analyse willen we ten eerste alleen hoge bomen. Laten we kijken welke boomhoogtes er zijn.\nbomen_data['boomhoogte'].unique()","89ab2a1d":"### Hoeveel bomen zijn groter dan 24 meter?\nhoge_bomen = bomen_data[bomen_data.boomhoogte == '> 24 m.']\nhoge_bomen.count()","4ed8d95f":"### Met de hoge bomen wordt verder gewerkt\nhoge_bomen.head(5)","5d54c9e4":"### Onnodige kolommen worden verwijderd\nhoge_bomen = hoge_bomen.drop(columns=['datum_gemeten', 'bwz_attributen', 'bwz_ligging', 'boombeheer_attributen', 'diameter'])","91002c66":"hoge_bomen.head(1)","15079f25":"hoge_bomen['standplaats'].unique()","7377a8b3":"### Er zijn verkeerde values zoals > 24 m. Dat is geen goede waarde behalve bij lengte. \n### Ook zijn er None values. Dit geldt ook voor andere kolommen\nhoge_bomen['nederlandse_boomnaam'].unique()","01c433d2":"### None values omzetten naar 'onbekend'\nhoge_bomen = hoge_bomen.fillna('onbekend')","1fdbe966":"### Er lijkt \u00e9en rij in te zitten die niet klopt.\nhoge_bomen[hoge_bomen.plantjaar == '> 24 m.']","572bfb90":"### Drop rij\nhoge_bomen = hoge_bomen[hoge_bomen.plantjaar != '> 24 m.']","aa9aa479":"### Geen nulwaardes meer\nhoge_bomen.count()","99fd6bf1":"hoge_bomen.head(3)","0a1691d2":"oude_hoge_bomen = hoge_bomen[hoge_bomen.plantjaar != 'onbekend']\noude_hoge_bomen['plantjaar'].unique()","a1ad6500":"import datetime\nhuidig_jaar = datetime.datetime.now().year\nhonderd_jaar_geleden = huidig_jaar - 100\noude_hoge_bomen = oude_hoge_bomen[oude_hoge_bomen.plantjaar < str(honderd_jaar_geleden)]\noude_hoge_bomen.head(2)","18d3ab88":"# Alle oude hoge bomen toevoegen aan de map, dat zijn er 324\nfor idx, row in oude_hoge_bomen.iterrows():\n    folium.Marker([row['latitude'], row['longitude']], popup=row['nederlandse_boomnaam'] + ' (plantjaar: ' + row['plantjaar'] +')').add_to(m)\n\n# Display the map\nm\n\n# Er lijkt geen correlatie te zijn tussen hoge bomen en groengebieden","143e709e":"stadsbuurten_data.head(2)","c1ae18f3":"hoge_bomen.head(2)","0fcdd0a1":"### Er wordt een join uitgevoerd. Er wordt gekeken in welke stadsbuurt de hoge bomen liggen.\nfrom shapely.geometry import Point\nhoge_bomen_met_buurt = gpd.sjoin(hoge_bomen, stadsbuurten_data, op='within')","035ac020":"hoge_bomen_met_buurt.head(3)","e45d714d":"### Aantal hoge bomen per buurtnummer\nbomen_count = hoge_bomen_met_buurt.buurtnummer.value_counts()\nbomen_count.head()","f00c580e":"### Interactieve kaart aanmaken met folium\n### We willen een kaart zonder groengebieden, anders is het niet goed leesbaar.\nm2 = folium.Map(location=[51.55, 5.08], zoom_start=12, tiles='cartodbpositron')\n\n# Add a choropleth map to the base map\nfolium.Choropleth(geo_data=stadsbuurten_data.__geo_interface__, \n           data=bomen_count, \n           key_on=\"feature.properties.buurtnummer\", \n           fill_color='YlGnBu',\n           zorder=3,\n           nan_fill_color='none',\n           legend_name='Aantal bomen hoger dan 24 meter.'\n          ).add_to(m2)\n\n# Alle oude hoge bomen toevoegen aan de map, dat zijn er 324\nfor idx, row in oude_hoge_bomen.iterrows():\n    folium.Marker([row['latitude'], row['longitude']], popup=row['nederlandse_boomnaam'] + ' (plantjaar: ' + row['plantjaar'] +')').add_to(m2)\n\n### Toevoegen buurten\nfor _, r in stadsbuurten_data.iterrows():\n    #without simplifying the representation of each borough, the map might not be displayed\n    #sim_geo = gpd.GeoSeries(r['geometry'])\n    sim_geo = gpd.GeoSeries(r['geometry']).simplify(tolerance=0.001)\n    geo_j = sim_geo.to_json()\n    geo_j = folium.GeoJson(data=geo_j,\n                           style_function=lambda x: {'fillColor': 'lightgrey', 'weight':1, 'color':'#202020'})\n    folium.Popup(r['buurtnaam'],['oppervlakte']).add_to(geo_j)\n    geo_j.add_to(m2)    \n    \n# Display the map\nm2","0fdb031e":"### 3. Data cleaning bomen Tilburg","f4f2d307":"#### Explore de dataset. Welke waarden zitten er allemaal in de kolommen?","7cb39e63":"### 4. Bomen plotten op kaart","16f04e11":"#### 4.2 Aantal hoge bomen toevoegen als choropleth","aacb1d80":"## Het toepassen van geopandas bij het gebruik van Tilburgse datasets van ckan.dataplatform.nl","a90df322":"#### Dataset opschonen","2d6493de":"#### 4.1 Hoge bomen ouder dan 100 jaar op kaart toevoegen als markers","ff8531c1":"### 1. Inladen van de datasets","c9887b03":"### 2. Visualiseren met Folium "}}