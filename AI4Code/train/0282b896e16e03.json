{"cell_type":{"60f87d58":"code","65629c16":"code","5759f6a9":"code","ceca1017":"code","87a7a214":"code","9710f85f":"code","84b28e12":"code","fc5bb284":"code","1c019062":"code","eba574c7":"code","53a49967":"code","14689d5e":"code","c121ea99":"code","c120a0f1":"code","1f894151":"code","85e5376b":"code","32b00926":"code","ecc49a24":"code","f50cfb99":"markdown","f0009584":"markdown","82558fa7":"markdown"},"source":{"60f87d58":"%matplotlib inline\nimport os\nimport numpy as np\nfrom skimage.io import imread\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom glob import glob\nfrom skimage.filters import threshold_otsu\nfrom skimage.morphology import opening, closing, ball, label\nfrom scipy.ndimage import binary_fill_holes, distance_transform_cdt # much faster than euclidean\nfrom skimage.feature import peak_local_max\nfrom skimage.segmentation import mark_boundaries, watershed\ntry:\n    # old skimage\n    from skimage.util.montage import montage2d\nexcept ImportError:\n    # new skimage\n    from skimage.util import montage as montage2d\nmontage_pad = lambda x: montage2d(np.pad(x, [(0,0), (10, 10), (10, 10)], mode = 'constant', constant_values = 0))\nimport gc # since memory gets tight very quickly\ngc.enable()\nbase_dir = os.path.join('..', 'input')","65629c16":"all_tiffs = glob(os.path.join(base_dir, 'ufilt_16bit\/ufilt_16bit\/*'))\ntiff_df = pd.DataFrame(dict(path = all_tiffs))\ntiff_df['frame'] = tiff_df['path'].map(lambda x: os.path.splitext(os.path.basename(x))[0])\ntiff_df['experiment'] = tiff_df['frame'].map(lambda x: '_'.join(x.split('_')[0:-1]))\ntiff_df['slice'] = tiff_df['frame'].map(lambda x: int(x.split('_')[-1]))\nprint('Images Found:', tiff_df.shape[0])\ntiff_df = tiff_df.sort_values(['experiment','slice'])\nfirst_exp = tiff_df['experiment'].values[0]\nfirst_df = tiff_df[tiff_df['experiment'].isin([first_exp])]\nmax_slice = first_df['slice'].max()\nfor _, c_row in first_df.head(max_slice\/\/2).tail(1).iterrows():\n    t_img = imread(c_row['path'])\n    print(t_img.dtype, t_img.shape, np.percentile(t_img.ravel(), 5), np.percentile(t_img.ravel(), 95))\nfirst_df.head(max_slice\/\/2).tail(1)","5759f6a9":"from tqdm import tqdm_notebook\nfrom skimage.io import imread_collection\nout_vols = {}\nfor c_group, c_df in tqdm_notebook(tiff_df.groupby('experiment'), desc = 'Experiment'):\n    first_path = c_df['path'].iloc[0]\n    first_dir = os.path.dirname(first_path)\n    cur_collection = imread_collection(os.path.join(first_dir, '*'), \n                                       conserve_memory=True)\n    out_vols[c_group] = cur_collection.concatenate()[:, 200:-200, 200:-200].astype('uint16') # read and crop\n    print(c_group, 'loaded', out_vols[c_group].shape)\ngc.collect()","ceca1017":"def threshold_otsu_2(img):\n    return threshold_otsu(img[img<threshold_otsu(img)])\nfor k,v in out_vols.items():\n    print(k, v.shape)\n    fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(20, 8))\n    ax1.imshow(montage_pad(v[::10]), cmap = 'bone')\n    ax1.axis('off')\n    ax1.set_title('Axial Slices - {}'.format(k))\n    ax2.imshow(montage_pad(v.swapaxes(0,1)[::30]), cmap = 'bone')\n    ax2.axis('off')\n    ax2.set_title('Sagittal Slices - {}'.format(k))\n    ax3.hist(v.ravel(), 100)\n    ax3.axvline(threshold_otsu(v))\n    ax3.axvline(threshold_otsu_2(v))\n    ax3.set_yscale(\"log\", nonposy='clip')\n    fig.savefig('{}_slices.png'.format(k))","87a7a214":"from skimage.filters import gaussian\nfrom scipy.ndimage import zoom\nfor k,v in tqdm_notebook(out_vols.items()):\n    out_vols[k] = gaussian(zoom(v, 0.5, order = 3), .5)\ngc.collect();","9710f85f":"for k,v in out_vols.items():\n    print(k, v.shape)\n    fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(20, 8))\n    ax1.imshow(montage_pad(v[::10]), cmap = 'bone')\n    ax1.axis('off')\n    ax1.set_title('Axial Slices - {}'.format(k))\n    ax2.imshow(montage_pad(v.swapaxes(0,1)[::30]), cmap = 'bone')\n    ax2.axis('off')\n    ax2.set_title('Sagittal Slices - {}'.format(k))\n    ax3.hist(v.ravel(), 100)\n    ax3.axvline(threshold_otsu(v))\n    ax3.axvline(threshold_otsu_2(v))\n    ax3.set_yscale(\"log\", nonposy='clip')\n    fig.savefig('{}_filtered_slices.png'.format(k))","84b28e12":"%%time\nout_segs = {}\nfor k,v in tqdm_notebook(out_vols.items()):\n    thresh_img = v > threshold_otsu(v)\n    bw_seg_img = closing(\n            opening(thresh_img, ball(2)),\n            ball(1)\n        )\n    thresh_img_2 = (v > threshold_otsu_2(v)) & (v < threshold_otsu(v))\n    bw_seg_img_2 = closing(\n            opening(thresh_img_2, ball(2)),\n            ball(1)\n        )\n    bw_out_img = np.zeros(bw_seg_img_2.shape, dtype = np.uint8)\n    bw_out_img[bw_seg_img_2>0]=1\n    bw_out_img[bw_seg_img>0]=2\n    del thresh_img, bw_seg_img, thresh_img_2, bw_seg_img_2\n    out_segs[k] = bw_out_img","fc5bb284":"for k,v in out_segs.items():\n    print(k, v.shape)\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8))\n    ax1.imshow(montage_pad(v[::5]), cmap = 'bone')\n    ax1.set_title('Axial Slices - {}'.format(k))\n    ax2.imshow(montage_pad(v.swapaxes(0,1)[::15]), cmap = 'bone')\n    ax2.set_title('Sagittal Slices - {}'.format(k))\n    fig.savefig('{}_slices.png'.format(k))","1c019062":"import plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as FF\nfrom scipy.ndimage import zoom\nfrom skimage import measure\npy.init_notebook_mode()","eba574c7":"for k,v in out_segs.items():\n    smooth_pt_img = zoom(v[20:-20, 200:-200, 200:-200], (0.5, 0.25, 0.25), order = 3)\n    print(k, smooth_pt_img.shape)\n    verts, faces, _, _ = measure.marching_cubes_lewiner(\n        smooth_pt_img, # you can make it bigger but the file-size gets HUUUEGE \n        smooth_pt_img.mean())\n    x, y, z = zip(*verts)\n    ff_fig = FF.create_trisurf(x=x, y=y, z=z,\n                               simplices=faces,\n                               title=\"Segmentation {}\".format(k),\n                               aspectratio=dict(x=1, y=1, z=1),\n                               plot_edges=False)\n    c_mesh = ff_fig['data'][0]\n    c_mesh.update(lighting=dict(ambient=0.18,\n                                diffuse=1,\n                                fresnel=0.1,\n                                specular=1,\n                                roughness=0.1,\n                                facenormalsepsilon=1e-6,\n                                vertexnormalsepsilon=1e-12))\n    c_mesh.update(flatshading=False)\n    py.iplot(ff_fig)","53a49967":"from skimage.io import imsave\nfor k,v in out_segs.items():\n    imsave('{}_seg.tif'.format(k), v.astype(np.uint8))","14689d5e":"%%time\nout_dm = {}\nfor k,v in out_segs.items():\n    out_dm[k] = distance_transform_cdt(v)","c121ea99":"for k,v in out_dm.items():\n    print(k, v.shape)\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8))\n    ax1.imshow(montage_pad(v[::5]), cmap = 'nipy_spectral')\n    ax1.set_title('Axial Slices - {}'.format(k))\n    ax2.imshow(montage_pad(v.swapaxes(0,1)[::20]), cmap = 'nipy_spectral')\n    ax2.set_title('Sagittal Slices - {}'.format(k))\n    fig.savefig('{}_slices.png'.format(k))","c120a0f1":"from skimage.io import imsave\nfor k,v in out_dm.items():\n    imsave('{}_dmap.tif'.format(k), v.astype(np.uint8))","1f894151":"del out_dm\ngc.collect() # force garbage collection","85e5376b":"%%time\nout_label = {}\nfor k,v in out_segs.items():\n    out_label[k] = label(v)","32b00926":"from skimage.segmentation import mark_boundaries\nfor k,v in out_label.items():\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8))\n    lab_mtg = montage_pad(v[10:-10:25]).astype(int)\n    vol_mtg = montage_pad(out_vols[k][10:-10:25]).astype(np.float32)\n    \n    color_mtg = plt.cm.bone(np.clip(vol_mtg\/vol_mtg.max(), 0,1))[:,:,:3]\n    ax1.imshow(mark_boundaries(image = color_mtg, label_img = lab_mtg) , cmap = 'gist_earth')\n    ax1.set_title('Axial Slices - {}'.format(k))\n    lab_mtg = montage_pad(v.swapaxes(0,1)[10:-10:60]).astype(int)\n    vol_mtg = montage_pad(out_vols[k].swapaxes(0,1)[10:-10:60]).astype(np.float32)\n    color_mtg = plt.cm.autumn(np.clip(vol_mtg\/vol_mtg.max(), 0,1))[:,:,:3]\n\n    ax2.imshow(mark_boundaries(image = color_mtg, label_img = lab_mtg, color = (0,0,1)))\n    ax2.set_title('Sagittal Slices - {}'.format(k))\n    fig.savefig('{}_labels.png'.format(k))","ecc49a24":"from skimage.segmentation import mark_boundaries\nmiddle_slice = lambda x: x[x.shape[0]\/\/2]\nfor k,v in out_label.items():\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8))\n    lab_mtg = middle_slice(v[10:-10:25]).astype(int)\n    vol_mtg = middle_slice(out_vols[k][10:-10:25]).astype(np.float32)\n    \n    color_mtg = plt.cm.bone(np.clip(vol_mtg\/vol_mtg.max(), 0,1))[:,:,:3]\n    ax1.imshow(mark_boundaries(image = color_mtg, label_img = lab_mtg) , cmap = 'gist_earth')\n    ax1.set_title('Axial Slice - {}'.format(k))\n    lab_mtg = middle_slice(v.swapaxes(0,1)[10:-10:60]).astype(int)\n    vol_mtg = middle_slice(out_vols[k].swapaxes(0,1)[10:-10:60]).astype(np.float32)\n    color_mtg = plt.cm.autumn(np.clip(vol_mtg\/vol_mtg.max(), 0,1))[:,:,:3]\n\n    ax2.imshow(mark_boundaries(image = color_mtg, label_img = lab_mtg, color = (0,0,1)))\n    ax2.set_title('Sagittal Slice - {}'.format(k))\n    fig.savefig('{}_labels_mid.png'.format(k))","f50cfb99":"# Loading Using Image Collection\nWe can use the `imread_collection` in scikit-image to load an entire folder full of TIFFs as a single stack","f0009584":"# Filter and Downsample\nWe can apply a filter to remove some of the noise and then downsample the image.","82558fa7":"# Overview\nThe goal of the kernel is to compare the NMC datasets and in particular try to identify the structural changes that occur between the 0 and 2000bar images. We apply a number of basic techniques to the images to segment and quantify the structures inside. The 3D renderings are very low resolution representations of the data and serve to show the large scale differences and hint at the best kinds of quantitative metrics to extract. "}}