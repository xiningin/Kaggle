{"cell_type":{"0edd1ac2":"code","905e298d":"code","2b9b170d":"code","13691fca":"code","af2891e7":"code","ae83a9e3":"code","18ba245e":"code","18a6d64e":"code","e6a4aa11":"code","0467f80e":"code","0e02562e":"code","c34f2d15":"code","d9d149ab":"code","8a4d807e":"markdown","7150a881":"markdown","3fa705cf":"markdown","2a833c5b":"markdown"},"source":{"0edd1ac2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport scipy.stats as stat\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import f1_score\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nn_leaves = 32\ndepth = 6\nn_shift = 2","905e298d":"train = pd.read_csv('..\/input\/data-without-drift-with-kalman-filter\/train.csv')\ntest = pd.read_csv('..\/input\/data-without-drift-with-kalman-filter\/test.csv')\nsubmission = pd.read_csv('..\/input\/liverpool-ion-switching\/sample_submission.csv')","2b9b170d":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        if col != 'time':\n            col_type = df[col].dtypes\n            if col_type in numerics:\n                c_min = df[col].min()\n                c_max = df[col].max()\n                if str(col_type)[:3] == 'int':\n                    if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                        df[col] = df[col].astype(np.int8)\n                    elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                        df[col] = df[col].astype(np.int16)\n                    elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                        df[col] = df[col].astype(np.int32)\n                    elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                        df[col] = df[col].astype(np.int64)  \n                else:\n                    if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                        df[col] = df[col].astype(np.float16)\n                    elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                        df[col] = df[col].astype(np.float32)\n                    else:\n                        df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","13691fca":"def shift(df, n):\n    for i in range(1,n+1):\n        df['signal-' + str(i)] = [0]*i + list(df['signal'].values[:-i])\n        df['signal+' + str(i)] = list(df['signal'].values[i:]) + [0]*i\n    return df","af2891e7":"t = train[:500000]\noutlier = list(t[(t.signal>-1)&(t.open_channels==0)].index)\ntrain.at[outlier, 'signal'] = -1.6\n\nt = train[500000:1000000]\noutlier = list(t[(t.signal>0)&(t.open_channels==0)].index)\ntrain.at[outlier, 'signal'] = -1.6\n\ndel t","ae83a9e3":"for i in range(6):\n    fig,axes=plt.subplots(1,2)\n    df1 = pd.concat([train[:3500000], train[4000000:]], axis=0)\n    df2 = pd.concat([train[:2000000], train[2500000:3500000], train[4000000:4500000]], axis=0)\n    vec1=df1[df1.open_channels == i].signal\n    vec2=df2[df2.open_channels == i].signal\n    sns.distplot(vec1,bins=100,ax=axes[0], kde =False).set_title('open_channels={0}'.format(i))\n    sns.distplot(vec2,bins=100,ax=axes[1], kde =False).set_title('open_channels={0}'.format(i))\ndel df1, df2","18ba245e":"dic_model = {}\nd = {}\nfor i in range(10):\n    d['batch{0}'.format(i)] = shift(train[500000*i:500000*(i+1)], n_shift).drop('time',axis=1)\ndf1 = pd.concat([d['batch0'],d['batch1'],d['batch2'],d['batch3'],d['batch5'],d['batch6'],d['batch8']], axis=0).sample(frac=1)\ndf2 = pd.concat([d['batch4'], d['batch9']], axis=0)","18a6d64e":"stat_info = {}\nfor val in df1.open_channels.value_counts().index:\n    stat_info['std_g1c{0}'.format(val)] = df1[df1.open_channels == val].signal.std()\n    stat_info['mean_g1c{0}'.format(val)] = df1[df1.open_channels == val].signal.mean()\nfor val in df2.open_channels.value_counts().index:\n    stat_info['std_g2c{0}'.format(val)] = df2[df2.open_channels == val].signal.std()\n    stat_info['mean_g2c{0}'.format(val)] = df2[df2.open_channels == val].signal.mean()\ndef normal_distribution_feature(df, group):   \n    cols = df.columns\n    for col in df.columns:\n        if col != 'open_channels':\n            if group == 1:\n                for val in range(6):\n                    df[col+'_norm_c{0}'.format(val)] = stat.norm(stat_info['mean_g1c{0}'.format(val)],stat_info['std_g1c{0}'.format(val)]).pdf(df[col])\n            else:\n                for val in range(1,11):\n                    df[col+'_norm_c{0}'.format(val)] = stat.norm(stat_info['mean_g2c{0}'.format(val)],stat_info['std_g2c{0}'.format(val)]).pdf(df[col])\n\n             \n    return df","e6a4aa11":"df1 = reduce_mem_usage(normal_distribution_feature(df1, 1))\ndf2 = reduce_mem_usage(normal_distribution_feature(df2, 2))","0467f80e":"def fit_lgb(X, y, upper_bound):\n    lomodel = []\n    kf = KFold(n_splits=5, random_state=1, shuffle=False)\n    \n    params = {'objective': 'huber',\n              'num_leaves': n_leaves,\n              'max_depth':depth,\n              \"metric\": 'rmse',\n              'n_jobs': -1,\n              'random_state': 1\n              }\n    \n    lopred=[]\n    for train_index, test_index in kf.split(X):\n        X_train, X_valid = X.iloc[train_index], X.iloc[test_index]\n        y_train, y_valid = y.iloc[train_index], y.iloc[test_index]\n    \n        d_train = lgb.Dataset(X_train, label=y_train)\n        d_valid = lgb.Dataset(X_valid, label=y_valid)    \n        \n        model = lgb.train(params,\n                          train_set=d_train,\n                          num_boost_round=1000,\n                          valid_sets=d_valid,\n                          verbose_eval='None',\n                          early_stopping_rounds=30,\n                          learning_rates=lambda iter:max(0.1**(iter\/\/10),0.001),\n                         )\n        \n        lomodel.append(model)\n        pred = model.predict(X_valid, num_iteration=model.best_iteration)\n        pred = np.round(np.clip(pred,0,upper_bound)).astype(int)\n        lopred.append(pred)\n        print(f1_score(y_valid, pred, average=None))\n        print('\\n')\n\n    \n    return lomodel,lopred\n\ndic_model['lomodel1'],lopred1 = fit_lgb(df1.drop(['open_channels'], axis = 1), df1.open_channels, 5)\ndic_model['lomodel2'],lopred2 = fit_lgb(df2.drop(['open_channels'], axis = 1), df2.open_channels, 10)","0e02562e":"lopred = lopred1+lopred2\npred = np.array([])\nfor i in lopred:\n    pred = np.append(pred, i)\n    \nprint('f1 score for each group:',f1_score(np.concatenate((df1.open_channels,df2.open_channels)), pred, average=None),\n      'macro f1 score:',f1_score(np.concatenate((df1.open_channels,df2.open_channels)), pred, average='macro'))","c34f2d15":"def clip(data, group):\n    if group == 1:\n        data = np.clip(data, 0,5)\n    else:\n        data = np.clip(data, 0,10)\n    return data\n\n\ntest_group = [1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1]\nsub = np.array([])\nfor i in range(20):\n    group = test_group[i]\n    lomodel = dic_model['lomodel'+str(group)]\n    data = normal_distribution_feature(shift(test[100000*i:100000*(i+1)], n_shift).drop('time',axis=1),group)\n    pred = 0\n    for model in lomodel:\n        pred += model.predict(data, num_iteration=model.best_iteration)\n    pred = np.round(clip((pred \/ len(lomodel)), group)).astype(int)\n    sub = np.append(sub, pred)","d9d149ab":"submission['open_channels'] = np.array(np.round(sub,0), np.int)\nsubmission.to_csv('submission.csv', index=False, float_format='%.4f')","8a4d807e":"# Preprocess","7150a881":"# Model","3fa705cf":"# Two models\nBased on the plots below, it shows that batches with open_channels as [0,1], [0,1,2,3], [0,1,2,3,4,5] have different distribution from those with open_channels as [0~10]\n\nThanks for https:\/\/www.kaggle.com\/miklgr500\/ghost-drift-and-outliers ~~~\n\nWe can use the (signal - mean) \/ std to estimate the result since all signals for each groups meet the normal distribution.","2a833c5b":"# Data Cleaning"}}