{"cell_type":{"9e334924":"code","db7fdc79":"code","28baaef3":"code","c3ff63b2":"code","c1466c6d":"code","afd05c11":"code","2e8f452f":"code","6f03ec9a":"code","32e613e3":"code","7062dd88":"code","dcd93355":"code","d2f8a29b":"code","7f75b6c5":"code","21151b3f":"code","e701dd58":"code","ad1fa17e":"code","c297a0b1":"code","42e01c1e":"code","84ec4e0d":"code","d3ab7c42":"code","3deac7cb":"code","a33da3d2":"code","4a04dfdd":"code","74a6056b":"code","f535338e":"code","76da43bc":"code","73c9c9f4":"code","573d6aa2":"markdown","cf6ce644":"markdown","0b8d0624":"markdown","cdc98540":"markdown","5d5da890":"markdown","145bd66b":"markdown","701a9f2d":"markdown","89d1710b":"markdown","7efe94a2":"markdown","2110d5e6":"markdown"},"source":{"9e334924":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")","db7fdc79":"data = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\ndata.head()","28baaef3":"data.info()","c3ff63b2":"for i in data.columns :\n    print(i)\n    print(data[i].value_counts())\n    print('-'*10)","c1466c6d":"data = data.drop(['veil-type', 'stalk-root'],axis=1)","afd05c11":"import matplotlib\nmatplotlib.rcParams.update({'font.size': 22})\ni = 1\nplt.figure(figsize=(40,80))\nfor col in data.columns :\n    if col != 'class' :\n        plt.subplot(10,3,i)\n        i += 1\n        sns.countplot(x='class', hue=col, data=data)\n\nmatplotlib.rcParams.update({'font.size': 12})","2e8f452f":"X, Y = data.drop(['class'],axis=1), data[['class']]","6f03ec9a":"Y['class'] = (Y['class'] == 'e').astype('int8')\nY.head()","32e613e3":"X.head()","7062dd88":"from sklearn.preprocessing import LabelEncoder\n\nlabel_encoder = LabelEncoder()\n\nfor col in X.columns:\n    X[col] = label_encoder.fit_transform(X[col])","dcd93355":"X.head()","d2f8a29b":"from sklearn.preprocessing import OneHotEncoder\n\nn,m = X.shape\n\nX_encoded = np.ones((n,0))\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\n\nt = 0\ncols = {}\n\nfor col in X.columns :\n    n = len(X[col].unique()) - 1\n    cols[col] = (t, t+n)\n    t += n\n    X_encoded = np.hstack((X_encoded, OH_encoder.fit_transform(X[[col]])[:,:-1]))\n\nX_encoded = pd.DataFrame(X_encoded)","7f75b6c5":"X_encoded.head()","21151b3f":"data = pd.DataFrame(X_encoded)\ndata['class'] = Y['class']\ndata.head()","e701dd58":"plt.figure(figsize=(30,2))\nsns.heatmap(data.corr().loc[['class'],:], cmap='coolwarm')","ad1fa17e":"idx = []\ncorr = data.corr().loc[['class'],:]\nfor col in data.corr().loc[['class'],:] :\n    if col != 'class' and abs(corr.iloc[0][col]) > 0.3 :\n        idx.append(col)\nlen(idx)","c297a0b1":"X_data = X_encoded[idx]","42e01c1e":"high_corr_features = set()\nfor i in idx :\n    for k in cols :\n        if cols[k][0] <= i < cols[k][1] :\n            high_corr_features.add(k)","84ec4e0d":"print(high_corr_features)","d3ab7c42":"X_data.head()","3deac7cb":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(X_data,Y,test_size=0.2)","a33da3d2":"print(x_train.shape,y_train.shape, x_test.shape, y_test.shape)","4a04dfdd":"from sklearn.neighbors import KNeighborsClassifier\n\ntest_accuracy,train_accuracy = [],[]\n\nfor i in range(1,20) :\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train, y_train)\n    train_accuracy.append(knn.score(x_train, y_train))\n    test_accuracy.append(knn.score(x_test, y_test))","74a6056b":"plt.plot(test_accuracy)\nplt.plot(train_accuracy)\nplt.legend(['test','train'])\nplt.ylabel('accuracy')\nplt.xlabel('k')\nplt.show()","f535338e":"knn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(x_train, y_train)\n\nY_predicted = knn.predict(x_test)","76da43bc":"Y_predicted = ['p' if pred == 1 else 'e' for pred in Y_predicted]","73c9c9f4":"prediction = pd.DataFrame(Y_predicted, columns=['class'])\nprediction.head()","573d6aa2":"### One-hot encoding","cf6ce644":"### Label Encoding","0b8d0624":"### Separating target and data","cdc98540":"#### Since there is only one unique value for veil-type, we can drop it.\n#### Since a lot of values of stalk root are missing, we will drop it.","5d5da890":"### We conclude that the following 11 features out of the 22 features are the most indicative of a posionous mushroom\n1. stalk-surface-below-ring (silky)\n2. odor (foul)\n3. ring-type (large)\n4. gill-size (broad)\n5. habitat (path)\n6. spore-print-color (chocolate, white)\n7. bruises (no)\n8. population (several)\n9. gill-spacing (close)\n10. gill-color (buff)\n11. stalk-surface-above-ring (silky)","145bd66b":"### Taking the value of k to be **_5_**","701a9f2d":"### Encoding target ","89d1710b":"### Train Test Split","7efe94a2":"### Conclusions that can be drawn :\n* A mushroom without bruises is more likely to be poisonous than a mushroom with no bruises\n* A mushroom with no odor is likely to be edible whereas a mushroom with fihsy odor is likely to be poisonous\n* A mushroom with large rings is likely to be poisonous whereas a mushroom with pendant ring is likely to be edible\n* A mushroom with population of type several is likely to be poisonous\n* A mushroom with habitat as path is likely to be posionous\n* A mushroom with spore print color of chocolate or white is likely to be poisonouse whereas of color black or brown is likely to be edible","2110d5e6":"### Training and Testing the Model"}}