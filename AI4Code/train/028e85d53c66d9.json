{"cell_type":{"d097b857":"code","e53c1f5d":"code","340d6952":"code","d6112ca0":"code","9e54b563":"code","a49f88ad":"code","fbadcffd":"code","c10578a9":"code","2a633845":"code","b86986ae":"code","198f2a91":"code","f4aa380a":"code","21412842":"code","4a247500":"code","8594daf0":"code","712ab770":"code","038ccb67":"code","9fc98894":"code","9ffe3455":"code","39749036":"code","dc485dbd":"code","89b36929":"code","d829bb66":"code","a33c433d":"code","df7bc768":"code","b9736334":"code","e83fb56d":"code","6e409309":"code","dcee60be":"code","80ad33a7":"code","481fcdec":"code","b8df7b4c":"code","1d5cd817":"code","2f35d76a":"code","3c33cb41":"code","5be6b6d7":"code","960e4789":"code","5a60e9c5":"code","68b47868":"code","985ede9c":"code","e60bacd8":"code","a8796044":"code","45b5fdc8":"code","006575c5":"code","d14681f7":"code","8f67ac02":"markdown","61606c27":"markdown","796ab2a3":"markdown","d526f6d5":"markdown","d76830f8":"markdown","d3afacc7":"markdown","73bd8e88":"markdown","4c5b4eac":"markdown","cc76d0d9":"markdown","cc86a90a":"markdown","7d11629b":"markdown","0dd0cda5":"markdown","5648e563":"markdown","36f50d42":"markdown","9ddd8325":"markdown","cfa5bcba":"markdown","c2bd7c84":"markdown","591db62b":"markdown","bd4c2d1c":"markdown","e873d0ba":"markdown","b23a2640":"markdown","946fbffa":"markdown","534cceec":"markdown","82a9b0a1":"markdown","60cec55d":"markdown","32344b53":"markdown","d1187792":"markdown","4372717b":"markdown","a188fd00":"markdown","95ede2b4":"markdown","293dca82":"markdown","7302331d":"markdown"},"source":{"d097b857":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport numpy as np\nimport matplotlib.ticker as ticker\nfrom sklearn import preprocessing\n%matplotlib inline","e53c1f5d":" !wget -O loan_train.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/loan_train.csv","340d6952":"df = pd.read_csv('loan_train.csv')\ndf.head()","d6112ca0":"df.shape","9e54b563":"df['due_date'] = pd.to_datetime(df['due_date'])\ndf['effective_date'] = pd.to_datetime(df['effective_date'])\ndf.head()","a49f88ad":"df['loan_status'].value_counts()","fbadcffd":"import seaborn as sns\n\nbins = np.linspace(df.Principal.min(), df.Principal.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set2\", col_wrap=2)\ng.map(plt.hist, 'Principal', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","c10578a9":"bins = np.linspace(df.age.min(), df.age.max(), 10)\nprint(bins)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set3\", col_wrap=2)\ng.map(plt.hist, 'age', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","2a633845":"df['dayofweek'] = df['effective_date'].dt.dayofweek\nbins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()","b86986ae":"df['weekend'] = df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ndf.head()","198f2a91":"df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)","f4aa380a":"df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ndf.head()","21412842":"df.groupby(['education'])['loan_status'].value_counts(normalize=True)","4a247500":"df[['Principal','terms','age','Gender','education']].head()","8594daf0":"Feature = df[['Principal','terms','age','Gender','weekend']]\nFeature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)\nFeature.drop(['Master or Above'], axis = 1,inplace=True)\nFeature.head()","712ab770":"X = Feature\nX[0:5]","038ccb67":"y = df['loan_status'].values\ny[0:5]","9fc98894":"X","9ffe3455":"X= preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]","39749036":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","dc485dbd":"from sklearn.neighbors import KNeighborsClassifier\nkNN_model  = KNeighborsClassifier(n_neighbors=3)\nkNN_model .fit(X_train, y_train)\nkNN_model ","89b36929":"yhat = kNN_model.predict(X_test)\nyhat[0:5]","d829bb66":"from sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test, yhat))\nprint(classification_report(y_test, yhat))\nprint(np.mean(yhat != y_test))","a33c433d":"error = []\n\n# Calculating error for K values between 1 and 40\nfor i in range(1, 15):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    pred_i = knn.predict(X_test)\n    error.append(np.mean(pred_i != y_test))","df7bc768":"error","b9736334":"plt.figure(figsize=(12, 6))\nplt.plot(range(1, 15), error, color='red', linestyle='dashed', marker='*',\n         markerfacecolor='blue', markersize=10)\nplt.title('Error Rate K Value')\nplt.xlabel('K Value')\nplt.ylabel('Mean Error')","e83fb56d":"from sklearn.neighbors import KNeighborsClassifier\nk = 7\n#Train Model and Predict  \nkNN_model = KNeighborsClassifier(n_neighbors=k).fit(X_train,y_train)\nkNN_model","6e409309":"from sklearn.tree import DecisionTreeClassifier\nDT_model = DecisionTreeClassifier(criterion=\"entropy\", max_depth = 6)\nDT_model.fit(X_train,y_train)\nDT_model","dcee60be":"yhat = DT_model.predict(X_test)\nyhat","80ad33a7":"print(np.mean(yhat != y_test))","481fcdec":"from sklearn import svm\nSVM_model = svm.SVC()\nSVM_model.fit(X_train, y_train)","b8df7b4c":"yhat = SVM_model.predict(X_test)\nyhat","1d5cd817":"print(np.mean(yhat != y_test))","2f35d76a":"from sklearn.linear_model import LogisticRegression\nLR_model = LogisticRegression(C=0.01).fit(X_train,y_train)\nLR_model","3c33cb41":"yhat = LR_model.predict(X_test)\nyhat","5be6b6d7":"print(np.mean(yhat != y_test))","960e4789":"from sklearn.metrics import jaccard_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import log_loss","5a60e9c5":" !wget -O loan_test.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/loan_test.csv","68b47868":"test_df = pd.read_csv('loan_test.csv')\ntest_df.head()","985ede9c":"test_df['due_date'] = pd.to_datetime(test_df['due_date'])\ntest_df['effective_date'] = pd.to_datetime(test_df['effective_date'])\ntest_df['dayofweek'] = test_df['effective_date'].dt.dayofweek\ntest_df['weekend'] = test_df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ntest_df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ntest_Feature = test_df[['Principal','terms','age','Gender','weekend']]\ntest_Feature = pd.concat([test_Feature,pd.get_dummies(test_df['education'])], axis=1)\ntest_Feature.drop(['Master or Above'], axis = 1,inplace=True)\ntest_X = preprocessing.StandardScaler().fit(test_Feature).transform(test_Feature)\ntest_X[0:5]","e60bacd8":"test_y = test_df['loan_status'].values\ntest_y[0:5]","a8796044":"knn_yhat = kNN_model.predict(test_X)\nprint(\"KNN Jaccard index: %.2f\" % jaccard_score(test_y, knn_yhat,pos_label = \"PAIDOFF\"))\nprint(\"KNN F1-score: %.2f\" % f1_score(test_y, knn_yhat, average='weighted') )","45b5fdc8":"DT_yhat = DT_model.predict(test_X)\nprint(\"DT Jaccard index: %.2f\" % jaccard_score(test_y, DT_yhat,pos_label = \"PAIDOFF\"))\nprint(\"DT F1-score: %.2f\" % f1_score(test_y, DT_yhat, average='weighted') )","006575c5":"SVM_yhat = SVM_model.predict(test_X)\nprint(\"SVM Jaccard index: %.2f\" % jaccard_score(test_y, SVM_yhat,pos_label = \"PAIDOFF\"))\nprint(\"SVM F1-score: %.2f\" % f1_score(test_y, SVM_yhat, average='weighted') )","d14681f7":"LR_yhat = LR_model.predict(test_X)\nLR_yhat_prob = LR_model.predict_proba(test_X)\nprint(\"LR Jaccard index: %.2f\" % jaccard_score(test_y, LR_yhat,pos_label = \"PAIDOFF\"))\nprint(\"LR F1-score: %.2f\" % f1_score(test_y, LR_yhat, average='weighted') )\nprint(\"LR LogLoss: %.2f\" % log_loss(test_y, LR_yhat_prob))","8f67ac02":"## Convert Categorical features to numerical values","61606c27":"## Support Vector Machine","796ab2a3":"First, download and load the test set:","d526f6d5":"## Report\nYou should be able to report the accuracy of the built model using different evaluation metrics:","d76830f8":"#### Feature selection\n\nLets defind feature sets, X:","d3afacc7":"Load Data From CSV File","73bd8e88":"## Classification ","4c5b4eac":"Let\u2019s see how many of each class is in our data set","cc76d0d9":"Lets download the dataset","cc86a90a":"Convert to date time object","7d11629b":"86 % of female pay there loans while only 73 % of males pay there loan","0dd0cda5":"##### Use one hot encoding technique to conver categorical varables to binary variables and append them to the feature Data Frame ","5648e563":"#### Load Test set for evaluation ","36f50d42":"Lets look at gender:","9ddd8325":"##### Lets look at the day of the week people get the loan ","cfa5bcba":"Lets convert male to 0 and female to 1:\n","c2bd7c84":"### Data visualization and pre-processing","591db62b":"What are our lables?","bd4c2d1c":"## Logistic Regression","e873d0ba":"| Field          | Description                                                                           |\n|----------------|---------------------------------------------------------------------------------------|\n| Loan_status    | Whether a loan is paid off on in collection                                           |\n| Principal      | Basic principal loan amount at the                                                    |\n| Terms          | Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule |\n| Effective_date | When the loan got originated and took effects                                         |\n| Due_date       | Since it\u2019s one-time payoff schedule, each loan has one single due date                |\n| Age            | Age of applicant                                                                      |\n| Education      | Education of applicant                                                                |\n| Gender         | The gender of applicant                                                               |","b23a2640":"### Pre-processing: Feature selection\/extraction","946fbffa":"## Model Evaluation using Test set\n","534cceec":"### One Hot Encoding\n##### How about education?","82a9b0a1":"##### Feature befor One Hot Encoding","60cec55d":"## K Nearest Neighbor(KNN)\nNotice: You should find the best k to build the model with the best accuracy.  \n**warning:** You should not use the __loan_test.csv__ for finding the best k, however, you can split your train_loan.csv into train and test to find the best __k__.","32344b53":" load a dataset using Pandas library, and apply the following algorithms, and find the best one for this specific dataset by accuracy evaluation methods.\n","d1187792":"#### About dataset\nThis dataset is about past loans. The Loan_train.csv data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:","4372717b":"## Decision Tree","a188fd00":"Now, it is your turn, use the training set to build an accurate model. Then use the test set to report the accuracy of the model\nYou should use the following algorithm:\n- K Nearest Neighbor(KNN)\n- Decision Tree\n- Support Vector Machine\n- Logistic Regression\n\n\n\n__Notice:__ \n- You can go above and change the pre-processing, feature selection, feature-extraction, and so on, to make a better model.\n- You should use either scikit-learn, Scipy or Numpy libraries for developing the classification algorithms.\n- You should include the code of the algorithm in the following cells.","95ede2b4":"| Algorithm          | Jaccard | F1-score | LogLoss |\n|--------------------|---------|----------|---------|\n| KNN                |0.65     |0.63      | NA      |\n| Decision Tree      |0.71     |0.67      | NA      |\n| SVM                |0.78     |0.76      | NA      |\n| LogisticRegression |0.74     |0.63      |0.52     |","293dca82":"### Normalize Data \n\nData Standardization give data zero mean and unit variance (technically should be done after train test split )","7302331d":"We see that people who get the loan at the end of the week dont pay it off, so lets use Feature binarization to set a threshold values less then day 4"}}