{"cell_type":{"929a915a":"code","6cf5f070":"code","2e899919":"code","bc827ea2":"code","7a68963e":"code","4f6c6838":"code","26c09fae":"code","f0c51d1d":"code","3be6906b":"code","3da286ac":"code","405a5b7f":"code","ab662a7a":"code","f6865fa7":"code","d1df2c10":"code","b153ca6a":"code","e01ecd6b":"code","83fb7ac5":"code","9194144b":"code","c5017b22":"code","4bb03dcd":"code","4ba14166":"code","d6c4897b":"code","016e0d16":"code","5f0ffc33":"code","9ec7bd7c":"markdown","a080b66b":"markdown","b2e14ff6":"markdown","05eebc69":"markdown","f6e8e831":"markdown","13f09b76":"markdown","b8c02227":"markdown","f0170e0c":"markdown","311be9fd":"markdown","6863cebd":"markdown","433dc8f4":"markdown","21a26fa6":"markdown","d6214e60":"markdown","685e6629":"markdown","f8b7dcb4":"markdown","88cdf0f7":"markdown","3e55b9a1":"markdown","ddc94db8":"markdown","1249b7eb":"markdown","d13187ef":"markdown","4d986287":"markdown","655152ea":"markdown"},"source":{"929a915a":"# section 1 importing Libs:\n\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport os \n# my style:\nsns.set(style= \"whitegrid\")\n\n# My favourite Library for visualisation \nfrom plotly import __version__\nimport cufflinks as cf\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\ncf.go_offline()\n\nimport plotly.figure_factory as ff\nimport plotly.offline as py\n##for online plotting use import plotly.plotly as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\nfrom plotly import tools","6cf5f070":"df = pd.read_csv(\"..\/input\/pricepersqft.csv\")\ndf_rent = pd.read_csv(\"..\/input\/price.csv\")","2e899919":"df.head(10)","bc827ea2":"df_rent.head(10)","7a68963e":"df.describe()","4f6c6838":"df_rent.describe()","26c09fae":"print(\"\\n\"+\"In the month of November 2010, Maximum and Minimum Price Per Square Feet \")\nprint(df[df[\"November 2010\"]==df[\"November 2010\"].max()][[\"Metro\",\"County\", \"November 2010\"]])\nprint(df[df[\"November 2010\"]==df[\"November 2010\"].min()][[\"City\",\"Metro\", \"County\", \"November 2010\"]])\nprint(\"____________________________________________________________\")\n\nprint(\"\\n\"+\"In the month January 2011, Maximum and Minimum Price Per Square Feet \")\nprint(df[df[\"January 2011\"]==df[\"January 2011\"].max()][[\"City\", \"County\", \"January 2011\"]])\nprint(df[df[\"January 2011\"]==df[\"January 2011\"].min()][[\"City\",\"Metro\", \"County\", \"January 2011\"]])\nprint(\"____________________________________________________________\")\n\nprint(\"\\n\"+\"In the month January 2012, Maximum and Minimum Price Per Square Feet \")\nprint(df[df[\"January 2012\"]==df[\"January 2012\"].max()][[\"City\", \"County\", \"January 2012\"]])\nprint(df[df[\"January 2012\"]==df[\"January 2012\"].min()][[\"City\",\"Metro\", \"County\", \"January 2012\"]])\nprint(\"____________________________________________________________\")\n\nprint(\"\\n\"+\"In the month January 2013, Maximum and Minimum Price Per Square Feet \")\nprint(df[df[\"January 2013\"]==df[\"January 2013\"].max()][[\"City\", \"County\", \"January 2013\"]])\nprint(df[df[\"January 2013\"]==df[\"January 2013\"].min()][[\"City\",\"Metro\", \"County\", \"January 2013\"]])\nprint(\"____________________________________________________________\")\n\nprint(\"\\n\"+\"In the month January 2014, Maximum and Minimum Price Per Square Feet \")\nprint(df[df[\"January 2014\"]==df[\"January 2014\"].max()][[\"City\", \"County\", \"January 2014\"]])\nprint(df[df[\"January 2014\"]==df[\"January 2014\"].min()][[\"City\",\"Metro\", \"County\", \"January 2014\"]])\nprint(\"____________________________________________________________\")\n\nprint(\"\\n\"+\"In the month January 2015, Maximum and Minimum Price Per Square Feet \")\nprint(df[df[\"January 2015\"]==df[\"January 2015\"].max()][[\"City\", \"County\", \"January 2015\"]])\nprint(df[df[\"January 2015\"]==df[\"January 2015\"].min()][[\"City\",\"Metro\", \"County\", \"January 2015\"]])\nprint(\"____________________________________________________________\")\n\nprint(\"\\n\"+\"In the month January 2016, Maximum and Minimum Price Per Square Feet \")\nprint(df[df[\"January 2016\"]==df[\"January 2016\"].max()][[\"City\", \"County\", \"January 2016\"]])\nprint(df[df[\"January 2016\"]==df[\"January 2016\"].min()][[\"City\",\"Metro\", \"County\", \"January 2016\"]])\nprint(\"____________________________________________________________\")\n","f0c51d1d":"state_count = df[\"State\"].value_counts()\n\ntrace = go.Bar(\n    x=state_count.index,\n    y=state_count.values,\n    marker=dict(\n        color = ([\"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\",\n            \"linen\", \"magenta\", \"maroon\", \"mediumaquamarine\",\n            \"mediumblue\", \"mediumorchid\", \"mediumpurple\",\"mediumblue\", \"mediumorchid\", \"mediumpurple\", \"hotpink\", \"indianred\", \"indigo\",\n            \"ivory\", \"khaki\", \"lavender\",\"lightyellow\", \"lime\", \"limegreen\",\n            \"linen\", \"magenta\", \"maroon\", \"mediumaquamarine\",\n            \"mediumblue\", \"mediumorchid\", \"mediumpurple\", \"hotpink\", \"indianred\", \"indigo\",\n            \"ivory\", \"khaki\", \"lavender\"])))\nlayout = go.Layout(\n    title='States with Highest listing', yaxis = dict(title = 'Frequency'))\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n\n\n\n\nlabel = state_count.index\nsize = state_count.values\ncolors = [\"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\",\n            \"linen\", \"magenta\", \"maroon\"]\ntrace = go.Pie(labels=label, \n               values=size, \n               marker=dict(colors=colors))\nlayout = go.Layout(\n    title='State Distribution')\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n\n\n\n#plt.figure(figsize = (15, 8))\n#sns.set_context(\"paper\",font_scale= 2)\n#sns.barplot(state_count.index, state_count.values, order = state_count.index)\n#plt.xlabel(\"States\")\n#plt.xticks(rotation = 90)\n#plt.ylabel(\"Total Number of Listings\")\n#plt.tight_layout()\n#plt.show()","3be6906b":"# Highest 20 Metro's\nmetro_count = df[\"Metro\"].value_counts().head(20)\n\ntrace = go.Bar(\n    x=metro_count.index,\n    y=metro_count.values,\n    marker=dict(\n        color = ([\"lightblue\", \"lightyellow\", \"lime\", \"limegreen\",\n            \"linen\", \"magenta\", \"maroon\", \"mediumaquamarine\",\n            \"mediumblue\", \"mediumorchid\", \"mediumpurple\",\"mediumblue\", \"mediumorchid\", \"mediumpurple\", \"hotpink\", \"indianred\", \"indigo\",\n            \"ivory\", \"khaki\", \"lavender\" ])))\n\nlayout = go.Layout(\n    title='20 Metro with Highest listing', yaxis = dict(title = 'Frequency'))\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n\nlabel = metro_count.index\nsize = metro_count.values\ncolors = ['skyblue', 'orange', '#96D38C', '#D0F9B1']\ntrace = go.Pie(labels=label, \n               values=size, \n               marker=dict(colors=colors))\nlayout = go.Layout(\n    title='Top 20 Metro Distribution')\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n\n\n# This block of code for Metro listing count plot is optional. (for my github page) \n# As plotly does not work on github.\n#plt.figure(figsize=(25,10))\n#sns.set_context(\"paper\",font_scale= 2)\n#sns.barplot(x=metro_count.index, y= metro_count.values, order= metro_count.index )\n#plt.xlabel(\"Metro\")\n#plt.xticks(rotation = 90)\n#plt.ylabel(\"Total Number of Listings\")\n#plt.tight_layout()\n#plt.show()","3da286ac":"years = list(set([y.split( )[1] for y in df.columns[6:]]))\nmonths = df.columns[6:]","405a5b7f":"# Getting a dataframe of boston city only:\nboston = df[df[\"Metro\"]==\"Boston\"]\nboston.head()","ab662a7a":"boston_r = df_rent[df_rent[\"Metro\"]==\"Boston\"]\nboston_r.head()","f6865fa7":"boston_r = df_rent[df_rent[\"Metro\"]==\"Boston\"]","d1df2c10":"# Let's see most expensive & least expensice city in boston:\nprint(\" Highest Price Per Square Feet for Jan'10 and Jan'17\")\nprint(boston[boston[\"November 2010\"] == boston[\"November 2010\"].max()][[\"City\", \"Metro\", \"November 2010\"]])\nprint(boston[boston[\"January 2011\"] == boston[\"January 2011\"].max()][[\"City\", \"Metro\", \"January 2011\"]])\nprint(boston[boston[\"January 2017\"] == boston[\"January 2017\"].max()][[\"City\", \"Metro\", \"January 2017\"]])\nprint(\"_______________________________________________________\")\n\nprint(\" Lowest Price Per Square Feet for Jan'10 and Jan'17\")\nprint(boston[boston[\"November 2010\"] == boston[\"November 2010\"].min()][[\"City\", \"Metro\", \"November 2010\"]])\nprint(boston[boston[\"January 2011\"] == boston[\"January 2011\"].min()][[\"City\", \"Metro\", \"January 2011\"]])\nprint(boston[boston[\"January 2017\"] == boston[\"January 2017\"].min()][[\"City\", \"Metro\", \"January 2017\"]])\nprint(\"________________________________________________________\")","b153ca6a":"#Variable assig\nbos_pi = boston[\"County\"].value_counts()\ncolors = [\"lightblue\", \"lightyellow\", \"lime\", \"limegreen\",\"magenta\", \"maroon\", \"mediumaquamarine\"]\n\n# Pie chart\ntrace = go.Pie(labels=bos_pi.index,\n              values = bos_pi.values, \n              marker= dict(colors = colors))\n\nlayout = go.Layout(title=\"Distribution in Boston\")\n\ndata =[trace]\nfig = go.Figure(data=data, layout = layout)\npy.iplot(fig)\n\n#For Scatter plot\ntrace = go.Scatter(x = months, \n                  y= np.nanmedian(boston[months], axis = 0),\n                    mode='markers', marker=dict(size=3,color = ('orange')),\n                   name = \"Boston Median PPSFT\")\n\n\n\n#For Scatter plot\ntrace1 = go.Scatter(x = months, \n                  y= np.nanmedian(boston_r[months], axis = 0),\n                    mode='markers', marker=dict(size=4,color = ('red')), \n                   name = \"Boston Median Rent\")\n\n\nfig = tools.make_subplots(rows=1, cols=2,\n                          subplot_titles=('PPSFT Boston','Median Rent Boston'))\n\nfig.append_trace(trace, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nlayout = go.Layout(title=\"Median index price of boston\", \n                   xaxis= dict(title= \"Months\"),yaxis=dict(title=\"PPSFT\"))\n\nfig['layout'].update(showlegend=False, title='Price in Boston Per Square Feet VS Rent')\npy.iplot(fig)\n","e01ecd6b":"ny = df[df[\"Metro\"]==\"New York\"]\nny.head(1)\nny_nj = ny.groupby(\"State\")[months].median()\n","83fb7ac5":"ny_rent = df_rent[df_rent[\"Metro\"]==\"New York\"]\nny_rent.head(1)\nny_nj_rent = ny.groupby(\"State\")[months].median()\n","9194144b":"\nstat1 = list (set([x for x in ny[\"State\"]]))\n#np.median(ny[ny[\"State\"]==stat[0]][months], axis = 0)\n\n# For Scatter Plot \ntrace1 = go.Scatter(x = months, \n                  y= np.nanmedian(ny[ny[\"State\"]==stat1[2]][months], axis = 0),\n                    mode='markers', marker=dict(size=5,color = ('aqua')), \n                   name = \"New York\")\ntrace2 = go.Scatter(x = months, \n                  y= np.nanmedian(ny[ny[\"State\"]==stat1[0]][months], axis = 0),\n                    mode='markers', marker=dict(size=5,color = ('navy')),\n                   name = \"New Jersey\")\n\nlayout = go.Layout(title=\"Median PPSFT price of NY, NJ\", \n                   xaxis= dict(title= \"Months\"),yaxis=dict(title=\"PPSFT\"))\n\ndata = [trace1, trace2]\nfig = go.Figure(data = data, layout=layout)\npy.iplot(fig)\n\n\n\n\n\ntrace1 = go.Scatter(x = months, \n                  y= np.nanmedian(ny_rent[ny_rent[\"State\"]==stat1[2]][months], axis = 0),\n                    mode='markers', marker=dict(size=5,color = ('aqua')), \n                   name = \"New York\")\ntrace2 = go.Scatter(x = months, \n                  y= np.nanmedian(ny_rent[ny_rent[\"State\"]==stat1[0]][months], axis = 0),\n                    mode='markers', marker=dict(size=5,color = ('navy')),\n                   name = \"New Jersey\")\n\n\n\nfig = tools.make_subplots(rows= 1 , cols=2, subplot_titles=('Median NY Rent','Median NJ Rent'))\nfig.append_trace(trace1, 1,1)\nfig.append_trace(trace2, 1,2)\n\nfig['layout'].update(showlegend=False, title='Median Rent Price of New York VS New Jersey')\npy.iplot(fig)\n\n\n\n\n# Box Plot block of code:\nny_gr = ny.groupby(\"State\")[months].median()\nprint(ny_gr)\ntrace0 = go.Box(y=ny_gr.loc[\"NJ\"],name=\"New Jersey\",fillcolor='navy')\ntrace1 = go.Box(y=ny_gr.loc[\"NY\"],name=\"New York\",fillcolor='lime')\ntrace2 = go.Box(y=ny_gr.loc[\"PA\"],name=\"Pensylvania\",fillcolor='aqua')\n\nlayout = go.Layout(title  =\" Boxplot of NY, NJ, PA\")\ndata = [trace0, trace1, trace2]\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)","c5017b22":"states = list(df[\"State\"].unique())\nstate_group = df.groupby(\"State\")[months].median().reset_index()\nstate_group.head(5)","4bb03dcd":"trace0 = go.Scatter(x= months, \n                    y = np.nanmedian(df[df[\"State\"]==\"NY\"][months], axis = 0),\n                    mode='markers', marker=dict(size=3),\n                    name = \"NY\")\n\ntrace1 =go.Scatter(x= months, \n                    y = np.nanmedian(df[df[\"State\"]==\"CA\"][months], axis = 0), mode='markers', marker=dict(size=3),\n                   name = \"CA\")\ntrace2 = go.Scatter(x= months, \n                    y = np.nanmedian(df[df[\"State\"]==\"HI\"][months], axis = 0),\n                    mode='markers', marker=dict(size=3),\n                    name = \"HI\")\n\ntrace3 = go.Scatter(x= months, \n                    y = np.nanmedian(df[df[\"State\"]==\"DC\"][months], axis = 0), \n                    mode='markers', marker=dict(size=3),\n                    name = \"DC\")\n\ntrace4 = go.Scatter(x= months, \n                    y = np.nanmedian(df[df[\"State\"]==\"AZ\"][months], axis = 0),\n                    mode='markers', marker=dict(size=3),\n                    name = \"AZ\")\n\ntrace5 = go.Scatter(x= months, \n                    y = np.nanmedian(df[df[\"State\"]==\"FL\"][months], axis = 0),\n                    mode='markers', marker=dict(size=3),\n                    name = \"FL\")\n\ntrace6 = go.Scatter(x= months, \n                    y = np.nanmedian(df[df[\"State\"]==\"TX\"][months], axis = 0),\n                    mode='markers', marker=dict(size=3),\n                    name = \"TX\")\n\ntrace7 = go.Scatter(x= months, \n                    y = np.nanmedian(df[df[\"State\"]==\"IL\"][months], axis = 0), \n                    mode='markers', marker=dict(size=3),\n                    name = \"IL\")\n\ntrace8 = go.Scatter(x= months, \n                    y = np.nanmedian(df[df[\"State\"]==\"NC\"][months], axis = 0), \n                    mode='markers', marker=dict(size=3),\n                    name = \"NC\")\n\ntrace9 = go.Scatter(x= months, \n                    y = np.nanmedian(df[df[\"State\"]==\"NV\"][months], axis = 0),\n                    mode='markers', marker=dict(size=3),\n                    name = \"NV\")\n\ntrace10 = go.Scatter(x= months, \n                    y = np.nanmedian(df[df[\"State\"]==\"OK\"][months], axis = 0),\n                     mode='markers', marker=dict(size=3),\n                     name = \"OK\")\n\nlayout = go.Layout(title = \"Median PPSFT for top 20 States\", xaxis= dict(title = \"PPSFT\"),\n                  yaxis = dict(title = \"Months\"))\ndata = [trace0, trace1, trace2, trace3, trace4, trace5, trace6, trace7, trace8, trace9, trace10]\nfig =go.Figure(data=data, layout = layout) \npy.iplot(fig)\n\n\n\n#Matplotlib plot\nplt.figure(figsize=(17,22))\n\nfor st in states:\n    st_pick = df[df[\"State\"] == st][months]\n    plt.plot(months, np.nanmedian(st_pick, axis=0), label = st)\n\nplt.title(\"Median PPSFT for all States\")    \nplt.xlabel(\"Months\")\nplt.ylabel(\"PPSFT\")\nplt.xticks(rotation = 90)\nplt.legend(bbox_to_anchor = (1.1, 1), loc = 2, borderaxespad = 0)\nplt.show()","4ba14166":"plt.figure(figsize = (17, 22))\nfor s in states:\n    pr = df[df[\"State\"] == s]\n    r = min(pr[\"Population Rank\"])\n    pr = pr[pr[\"Population Rank\"] == r]\n    label = \"{} {}\".format(s, pr[\"City\"].unique())\n    pr = pr[months]\n    plt.plot(pr.columns, np.transpose(pr.values), label = label)\n    \nplt.title(\"PPSFT in Largest Population Cities by State\", fontsize = 25)\nplt.xticks(rotation = 90)\nplt.legend(bbox_to_anchor = (1.05, 1), loc = 2, borderaxespad = 0.)\nplt.show()\n","d6c4897b":"trace0 = go.Scatter(x= months, \n                    y = np.nanmedian(df_rent[df_rent[\"State\"]==\"NY\"][months], axis = 0), name = \"NY\")\n\ntrace1 =go.Scatter(x= months, \n                    y = np.nanmedian(df_rent[df_rent[\"State\"]==\"CA\"][months], axis = 0), name = \"CA\")\ntrace2 = go.Scatter(x= months, \n                    y = np.nanmedian(df_rent[df_rent[\"State\"]==\"HI\"][months], axis = 0), name = \"HI\")\n\ntrace3 = go.Scatter(x= months, \n                    y = np.nanmedian(df_rent[df_rent[\"State\"]==\"DC\"][months], axis = 0), name = \"DC\")\n\ntrace4 = go.Scatter(x= months, \n                    y = np.nanmedian(df_rent[df_rent[\"State\"]==\"AZ\"][months], axis = 0), name = \"AZ\")\n\ntrace5 = go.Scatter(x= months, \n                    y = np.nanmedian(df_rent[df_rent[\"State\"]==\"FL\"][months], axis = 0), name = \"FL\")\n\ntrace6 = go.Scatter(x= months, \n                    y = np.nanmedian(df_rent[df_rent[\"State\"]==\"TX\"][months], axis = 0), name = \"TX\")\n\ntrace7 = go.Scatter(x= months, \n                    y = np.nanmedian(df_rent[df_rent[\"State\"]==\"IL\"][months], axis = 0), name = \"IL\")\n\ntrace8 = go.Scatter(x= months, \n                    y = np.nanmedian(df_rent[df_rent[\"State\"]==\"NC\"][months], axis = 0), name = \"NC\")\n\ntrace9 = go.Scatter(x= months, \n                    y = np.nanmedian(df_rent[df_rent[\"State\"]==\"NV\"][months], axis = 0), name = \"NV\")\n\ntrace10 = go.Scatter(x= months, \n                    y = np.nanmedian(df_rent[df_rent[\"State\"]==\"OK\"][months], axis = 0), name = \"OK\")\n\nlayout = go.Layout(title = \"Median RENT for top 20 States\", xaxis= dict(title = \"RENT\"),\n                  yaxis = dict(title = \"Months\"))\ndata = [trace0, trace1, trace2, trace3, trace4, trace5, trace6, trace7, trace8, trace9, trace10]\nfig =go.Figure(data=data, layout = layout) \npy.iplot(fig)\n\n\n\n#Matplotlib plot\nplt.figure(figsize=(17,22))\n\nfor st in states:\n    st_pick = df_rent[df_rent[\"State\"] == st][months]\n    plt.plot(months, np.nanmedian(st_pick, axis=0), label = st)\n\nplt.title(\"Median RENT for all States\", fontsize = 20)    \nplt.xlabel(\"Months\", fontsize = 20)\nplt.ylabel(\"RENT\", fontsize = 20)\nplt.xticks(rotation = 90)\nplt.legend(bbox_to_anchor = (1.1, 1), loc = 2, borderaxespad = 0)\nplt.show()","016e0d16":"cal= df[df[\"State\"]==\"CA\"]\ncal.head(10)","5f0ffc33":"cal_met= cal[\"Metro\"].unique()\n#cal_met\n\nplt.figure(figsize=(17,22))\nfor met in cal_met:\n    met_price = cal[cal[\"Metro\"]== met][months]\n    plt.plot(months, np.nanmedian(met_price, axis = 0), label = met)\n\n\nplt.title(\"Median PPSFT of Metros in California \", fontsize =20)    \n\nplt.xlabel(\"Months\", fontsize = 20)\nplt.ylabel(\"PPSFT\", fontsize = 20)\nplt.xticks(rotation = 90)\nplt.legend(bbox_to_anchor = (1.1, 1), loc = 2, borderaxespad = 0)\nplt.show()","9ec7bd7c":"### Section 3\n######  Basic Question and Answer Section:","a080b66b":"### Let's see what both the dataset is about:\n#### A brief information about the PPSFT dataset. \n*  Number of observations (n) = 11919 \n*  Number of columns (p) = 81 \n* 5 object type columns, rest are floats \n\n#### A brief information about the Rent  dataset. \n*  Number of observations (n) = 13131\n*  Number of columns (p) = 81 \n* Data Type: float(17), int(60), object(4)\n\n###### Run dataframe.info() for more details","b2e14ff6":"###### 3.  Median PPSFT for all States:","05eebc69":"######  Zillow's Mission: \n\nIs to \u201cbuild the largest, most-trusted, and vibrant home-related marketplace in the world.\u201d Spaulding noted that trust is paramount for a company like Zillow. He brought up how many real estate agents think Zillow is in business to cut brokers out of their industry.\n\n###### Throughout this notebook. I have used plotly, which is a library built on top of d3.js that has a steep-learning curve JavaScript library. There are Plotly API for Matlab, R, Python that helps us to create interactive visuals and dashboards. In other words, we can manipulate data manipulations in Pandas DataFrame and create interactive visual works easily.\n\n\n###### In this notebook I will be focusing on Exploratory Data Analysis on the Price Per Square Feets of the house  in the USA. My aim is to do visual analysis of price varrying from State to State and providing some basic answers to general questions about the dataset.\n\n\n###  Report Structure: <a id =\"0\"><a\/> <br>\n1. Importing the Libraries\n2. Importing the Data Set\n3. Exploring the Data Set\n4. Basic Q\/A Section\n5. Data Analysis and Visualisation \n6. Conclusion \n","f6e8e831":"###### Top 20 Metro's distribution with highest listings:","13f09b76":"######  1. Let's explore more about Boston Metro:","b8c02227":"The above Data Frame gives the gerneral specification of the columns: \nMean, Standard Deviation, Minimum, Maximum values in every column.\n######  Alot of questions can be answered using the above DF:\n1. Minimum, Maximum values in each columns.\n2. What is the mean, standard deviation of the columns and get the specifications which we see in a Boxplot. ","f0170e0c":"######  Section 1: \n*  Importing the Libraries:\n","311be9fd":"###### 4. Lastly, let's take a look at California State. And, compare few of its metro.","6863cebd":"###### Head of the Datasets:","433dc8f4":"######  Median Rent for all States:","21a26fa6":"######  Note: Washington DC has the Highest PPSFT and Rent prince. Following by Hawai at second place.****","d6214e60":"###### Plot coparison between Median Rent and PPSFT in Boston","685e6629":"###  Section 2: \n  ######  Importing the Data Set \n","f8b7dcb4":"###### I hihgly recommend to use SQL to get more detailed and concise abstractions\/answers from a data set but we can also do alot in Python. However the block of codes can get huge. \n* We can see in the above report The City :  Fisher Island, County: Miami- Dade has the highest Price Per Square Feet Rate in the begining of the all the Years. \n* While on the other hand the minimum Price Per Sq Ft has varied among the Cities: Fort Mitchell,  Wheeler, State Road County: Surry and Elkin.","88cdf0f7":"###### A brief description about botht the data sets.\n1. PPSFT dataset\n2. Rent Dataset","3e55b9a1":" #### Why median prices instead of mean prices: \n In their press releases, the Qu\u00e9bec Federation of Real Estate Boards and the province's real estate boards are now using the median price to report on the evolution of property prices. Th National Association of Realtors in the United States has been using this measure for quite some time now to discuss property prices. Let us examine why the median is generally a better indicator than the average when dealing with property prices. The median is the middle point that divides a series into two equal parts. In our case, the median price allows you to divide all transactions into two equal parts: 50% of transactions occur at a price that is lower than the median price and\nthe other 50% occur at a price that is higher. For example, a median price of $150,000  indicates\nthat 50 percent of properties sold for less than $150,000 and the other 50% sold for more.\nThe advantage of the median as a measure  central tendency is that it is not adversely influenced by extreme numbers. And conversely, the disadvantage of the average is that it can be influenced by extreme numbers, which can lead to major distortions that bias data interpretation. Consider a geographical area in which property prices are generally in the $150,000 to $200,000 range. If, in one particular month, a property that is not representative of the geographic area sells for $2,000,000, this transaction pulls the average higher and results in an over-estimate of price growth in the area. The median price is not influenced by this $2,000,000 transaction. It thereby provides a truer reflection of the market in terms of prices and in terms of growth between two periods. Regardless of whether the median price or the average price is used, the fewer transactions there are on which to base the calculation, the more the data needs to be interpreted with caution. The standard for this calculation is a minimum of 30 transactions. With fewer than 30 transactions, there is increased risk that neither the median price nor the average price will provide a valid measure of the market value of all properties. The QFREB therefore uses this 30-sale minimum rule to determine whether or not to publish a median or average price. \n\n#### Source: QFREB  market analytics department. ","ddc94db8":"### Section:\n###### Data Analysis and Visualisation ","1249b7eb":" ######  2. let's explore about New York Metro \n \n###### Comparing between New Jersey and New York","d13187ef":"###### PPSFT of Cities accorind to their Population","4d986287":"# This kernel is under active upgradation\n","655152ea":"######  * Total number of listing for all the States: "}}