{"cell_type":{"68b8ed13":"code","6ceb7304":"code","424058f2":"code","e1fc1ada":"code","a2e620e1":"code","4931afd3":"code","aa921c41":"code","e4735841":"code","a35e79d9":"code","4c4d03ae":"code","e7c4d904":"code","91e7151d":"code","f65a2c14":"code","db67afc3":"code","ff1cb370":"code","992e5774":"code","f7210152":"code","ed1de437":"code","0494784e":"code","372393bb":"code","71983f9f":"code","37b58f05":"code","1fbe829d":"code","97ea4fdd":"code","931eb09e":"markdown","198ba858":"markdown","6f77d9fd":"markdown","c2d7cc1e":"markdown","5288acc2":"markdown","34b839e5":"markdown","e317be81":"markdown","18df9db0":"markdown","7cdda683":"markdown","e69cc5ab":"markdown","d43b9fed":"markdown","58edbb17":"markdown","3aa31271":"markdown","33093cb5":"markdown","8a024776":"markdown","4b7f481d":"markdown","7b827f26":"markdown","6ea6cdba":"markdown","626f6637":"markdown","626003e5":"markdown","1bf435e6":"markdown"},"source":{"68b8ed13":"from scipy.stats import skew\nimport numpy as np\n\ndef trimmed_skewness(x):\n    sorted_x = np.sort(x)\n    trimmed_x = sorted_x[1:-1]\n    return skew(trimmed_x)","6ceb7304":"K_VALUES = [100, 200, 300] # Number of nearest neighbors to look at\nBASE_METRIC = 'anomaly' # Could be 'model_residual' ","424058f2":"import pandas as pd\n\nraw_data = pd.read_csv('..\/input\/mag-modeling-results.csv', dtype={'source_id': str})\nlen(raw_data)","e1fc1ada":"import numpy as np\n\nORIG_LABEL = 'phot_g_mean_mag'\n\ndef get_position_frame(data_frame):\n    new_frame = pd.DataFrame(columns=['source_id', 'x', 'y', 'z'])\n    new_frame['source_id'] = data_frame['source_id'].values\n    distance = data_frame['distance'].values\n    latitude = np.deg2rad(data_frame['b'].values)\n    longitude = np.deg2rad(data_frame['l'].values)\n    new_frame['z'] = distance * np.sin(latitude)\n    projection = distance * np.cos(latitude)\n    new_frame['x'] = projection * np.cos(longitude)\n    new_frame['y'] = projection * np.sin(longitude)\n    new_frame['blend_' + ORIG_LABEL] = data_frame['blend_' + ORIG_LABEL]\n    new_frame['model_residual'] = data_frame['model_residual']\n    new_frame['anomaly'] = data_frame['anomaly']\n    new_frame['ra'] = data_frame['ra']\n    new_frame['dec'] = data_frame['dec']\n    new_frame['color_index'] = data_frame['color_index']\n    new_frame[ORIG_LABEL] = data_frame[ORIG_LABEL]\n    new_frame['tycho2_id'] = data_frame['tycho2_id']\n    return new_frame","a2e620e1":"pos_data = get_position_frame(raw_data)\nraw_data = None # Discard","4931afd3":"from sklearn.neighbors import BallTree\n\nball_tree = BallTree(pos_data[['x', 'y', 'z']])","aa921c41":"from scipy.stats import skew\n\nmax_k = np.max(K_VALUES)\nbase_metric_series = pos_data[BASE_METRIC].values\nidx_source_id = pos_data.columns.get_loc('source_id')\nidx_x = pos_data.columns.get_loc('x')\nidx_y = pos_data.columns.get_loc('y')\nidx_z = pos_data.columns.get_loc('z')\nskewness_matrix = []\nrow_index = 0\nfor row in pos_data.itertuples(index=False):\n    source_id = row[idx_source_id]\n    source_pos = [row[idx_x], row[idx_y], row[idx_z]]\n    # Get the K+1 nearest neighbors; results sorted by distance.\n    distance_matrix, index_matrix = ball_tree.query([source_pos], k=max_k + 1)\n    indexes = index_matrix[0]\n    distances = distance_matrix[0]\n    # The closest star is the current star - leave it out.\n    assert indexes[0] == row_index\n    assert distances[0] == 0\n    skewness_row = []\n    for k in K_VALUES:\n        leave_one_out_indexes = indexes[1:k + 1]\n        base_metric_neighbors = base_metric_series[leave_one_out_indexes]    \n        assert len(base_metric_neighbors) == k\n        skewness = trimmed_skewness(base_metric_neighbors)\n        skewness_row.append(skewness)\n    skewness_matrix.append(skewness_row)\n    row_index += 1\nskewness_frame = pd.DataFrame(skewness_matrix, columns=['k' + str(k) for k in K_VALUES])","e4735841":"skewness_frame.head(5)","a35e79d9":"skewness_means = [np.mean(skewness_frame['k' + str(k)]) for k in K_VALUES]\nskewness_means","4c4d03ae":"skewness_scales = [np.std(skewness_frame['k' + str(k)]) for k in K_VALUES]\nskewness_scales","e7c4d904":"for i in range(len(K_VALUES)):\n    k = K_VALUES[i]\n    cn = 'k' + str(k)\n    skewness_frame[cn] = (skewness_frame[cn] - skewness_means[i]) \/ skewness_scales[i]","91e7151d":"skewness_frame.head(5)","f65a2c14":"best_std_skewness_series = []\nbest_k_series = []\nfor row in skewness_frame.itertuples(index=False):\n    idx_max = np.argmax(np.abs(row))\n    best_std_skewness_series.append(row[idx_max])\n    best_k_series.append(K_VALUES[idx_max])","db67afc3":"pos_data['best_std_skewness'] = best_std_skewness_series\npos_data['skewness_k'] = best_k_series","ff1cb370":"pos_data.head(5)[['source_id', 'skewness_k', 'best_std_skewness']]","992e5774":"n_to_show = 2000\nhigh_outliers = pos_data.sort_values('best_std_skewness', ascending=False).head(n_to_show)\nlow_outliers = pos_data.sort_values('best_std_skewness', ascending=True).head(n_to_show)\nrandom_stars = pos_data.sample(n_to_show)","f7210152":"import plotly.plotly as py\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport warnings\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)\npy.init_notebook_mode(connected=False)","ed1de437":"def plot_pos_frame(pos_frame, star_color, sun_color = 'blue', bstar_color = 'black'):    \n    star_color = [(bstar_color if row['source_id'] == '2081900940499099136' else (sun_color if row['source_id'] == 'sun' else star_color)) for _, row in pos_frame.iterrows()]\n    trace1 = go.Scatter3d(\n        x=pos_frame['x'],\n        y=pos_frame['y'],\n        z=pos_frame['z'],\n        mode='markers',\n        text=pos_frame['source_id'],\n        marker=dict(\n            size=3,\n            color=star_color,\n            opacity=0.5\n        )\n    )\n    scatter_data = [trace1]\n    layout = go.Layout(\n        margin=dict(\n            l=0,\n            r=0,\n            b=0,\n            t=0\n        )\n    )\n    fig = go.Figure(data=scatter_data, layout=layout)\n    py.iplot(fig)","0494784e":"def get_sun():\n    new_frame = pd.DataFrame(columns=['source_id', 'x', 'y', 'z'])\n    new_frame.loc[0] = ['sun', 0.0, 0.0, 0.0]\n    new_frame.reset_index(inplace=True, drop=True)\n    return new_frame","372393bb":"bstar_frame = pos_data[pos_data['source_id'] == '2081900940499099136']\nhigh_outliers_with_extras = pd.concat([high_outliers, bstar_frame, get_sun()])\nlow_outliers_with_extras = pd.concat([low_outliers, bstar_frame, get_sun()])\nrandom_with_extras = pd.concat([random_stars, bstar_frame, get_sun()])","71983f9f":"plot_pos_frame(high_outliers_with_extras, 'green')","37b58f05":"plot_pos_frame(low_outliers_with_extras, 'red')","1fbe829d":"plot_pos_frame(random_with_extras, 'gray')","97ea4fdd":"pos_data.to_csv('stars_with_trimmed_skewness_of_' + BASE_METRIC + '.csv', index=False)","931eb09e":"Notably, these clusters are more discrete and less scattered than those of right-skewed regions. This indicates skewness estimates are less likely to be spurious.\n\nAs a mildly interesting observation, we note that the edge of a neighborhood that heavily skews left is between Earth and KIC 8462852.\n\nFor comparison, this is a depiction of random stars from the dataset:","198ba858":"We will consider a few different values of *K*, since the most appropriate value could easily vary from one star to the next. The value of *K* that produces the most extreme skewness metric (after standardization) will be picked.","6f77d9fd":"## Output\nLet's write the *pos_data* frame, which includes columns from the original dataset, rectangular positions, and the new *best_std_skewness* column.","c2d7cc1e":"## Addition of rectangular coordinates\nWe will add x-y-z coordinates to each row of the data frame. The *X* axis points to the galactic center.","5288acc2":"The sun will be rendered in blue.","34b839e5":"Standardized skewness looks as follows.","e317be81":"We will also render KIC 8462852, for reference, in black.","18df9db0":"<a id=\"3d-scatter-charts\"><\/a>\nFirst, let's look at outliers that skew right, i.e. those that have a major excess of unusually dim neighbors. These are not SETI candidates per se, but the regions depicted could be considered regions of interest. Finding small clusters here and there is not surprising. Bigger clusters could be indicative of a pattern.","7cdda683":"## Main routine\nIn order to find a star's K nearest neighbors, we will use sklearn's BallTree implementation.","e69cc5ab":"## Standardization\nThe distribution of skewness depends on *K*, so we should standardize it before making a final selection.","d43b9fed":"The BallTree produces an ordered list of nearest neighbors, including the start being tested. We will, of course, remove the nearest neighbor. We're effectively making this a leave-one-out validation run. It means the skewness metric of a star depends only on its neighbors and does not depend on the *anomaly* of the star, unless it does a priori.","58edbb17":"Now we include our usual boilerplate code for rendering stars in interactive 3D scatter charts.","3aa31271":"## Data\nThe dataset we will use is the output of a previously posted kernel titled *[New Stellar Magnitude Model](https:\/\/www.kaggle.com\/solorzano\/new-stellar-magnitude-model-dysonian-seti)*. We're primarily interested in the *anomaly* column, defined as the locally standardized magnitude model residual.","33093cb5":"## Space distribution of skewness outliers\nLet's get 2000 stars at each end of the *best_std_skewness* distribution, and 2000 random stars.","8a024776":"## Final selection\nFrom each row we will select the standardized skewness whose absolute value is greatest.","4b7f481d":"## Overview\nThe Hart-Tipler argument (aka the Fermi paradox) suggests that extraterrestrial civilizations should be everywhere, or they do not exist. Let's partially adopt that as a workable hypothesis: They are everywhere \u2014 just not here. What would that look like? By analogy, humans are \"everywhere\" on Earth, but regional clustering of populations should be considered. In fact, 95% of the world's population lives in 10% of the available land.\n\nOne way to select SETI candidates under a Dysonian framework is to look for stars that are dimmer than their spectrophotometric characteristics indicate (Zackrisson et al. 2018). This single-variable approach is statistically limited (\u0106irkovi\u0107 2018). There are many reasons why a star may appear to be an outlier. If you look at hundreds of thousands of them, of course a few hundred will be extreme outliers, just by chance.\n\nWe can add a second dimension. For each star we will have:\n\n* A magnitude anomaly metric, which comes from a [previously trained and fairly sensitive model](https:\/\/www.kaggle.com\/solorzano\/new-stellar-magnitude-model-dysonian-seti).\n* The skewness of the *anomaly* distribution of the star's K nearest neighbors.\n\nThe two metrics are independent, in theory, because skewness results are leave-one-out estimates. In [Part 2 of the series](https:\/\/www.kaggle.com\/solorzano\/multi-stellar-seti-candidate-selection-part-2) we will look at how we can use these metrics to select multi-stellar SETI candidates probabilistically. \n\nRegions that heavily skew right and left are depicted in <a href=\"#3d-scatter-charts\">3D scatter charts<\/a>. Skewness results are made available in the output tab.\n\n**Updates:**\n* 9\/1\/2018: Training data and output of the stellar magnitude model changed in order to deal with line-of-sight artifacts, so this kernel was re-run and analysis remarks were updated accordingly.","7b827f26":"Obvious line-of-sight artifacts are not there, which is good. The distribution is slightly tilted, but that's likely a reflection of the distribution of stars in the Northern and Southern Hemispheres in the dataset.\n\nLet's now look at outliers whose neighbors heavily skew left.","6ea6cdba":"## References\n\nM. \u0106irkovi\u0107 (2018). _Astroengineering, Dysonian SETI, and naturalism: A new Catch-22_. https:\/\/doi.org\/10.1016\/j.actaastro.2018.07.051\n\nZackrisson et al. (2018). _SETI with Gaia: The observational signatures of nearly complete Dyson spheres_. arXiv:1804.08351 ","626f6637":"The results look as follows. ","626003e5":"## Strategy\nWe would like to determine if the *anomaly* distribution of a star's K nearest neighbors has an excess of unusually dim (or bright) stars. To ensure this determination is not affected by the star's position or regional error (presumably some regional distortions remain), the neighbor distribution is considered in isolation, without prior assumptions about the *anomaly* mean and standard deviation.\n\nWe will take advantage of a [standard skewness](https:\/\/docs.scipy.org\/doc\/scipy-0.13.0\/reference\/generated\/scipy.stats.skew.html) function, except we will trim the left-most and right-most elements of the distribution. A single extreme outlier can easily distort the apparent skewness of a region. Removal should help stabilize the results.","1bf435e6":"Finally, we will add these results to the *pos_data* frame."}}