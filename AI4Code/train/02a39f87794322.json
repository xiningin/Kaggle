{"cell_type":{"6ec25cb4":"code","a86cecbd":"code","d9a651ac":"code","8e84ed8a":"code","123b605b":"code","2e0e716f":"code","cd872b7c":"code","ee4632e6":"code","9e1189e4":"code","8c484351":"code","04144132":"code","be4bfc40":"code","2f0920f7":"code","b505efb2":"code","8c241d59":"code","8a06fb69":"code","b5cc7220":"code","9eab237a":"code","d19c6fbc":"code","e60c92b7":"code","3942aa9b":"code","a6164967":"code","88b7a148":"code","11971b3d":"code","f6b39555":"code","e0c049ff":"code","b278f535":"code","5628731e":"code","38260e17":"code","028e1779":"code","c04db016":"code","12ee5214":"code","9dd18008":"code","db60b851":"code","a2886b1a":"code","2198f8a2":"code","92c877ef":"code","7844838f":"code","bf3134fd":"code","c1756cc1":"code","91857ba2":"code","529aafde":"code","aaaf5785":"code","3f80a854":"code","ab7b3f5c":"code","635e322d":"code","ac7d12fb":"code","a3e30449":"code","a84cf275":"code","ab2d0a39":"code","9e00b77d":"code","1a6c4ece":"code","6009c56a":"code","bcad2c97":"code","367752ea":"code","187cb36f":"code","e5106af0":"code","17ccd7e5":"code","93ab80f6":"code","3d648fda":"code","e9ffffcf":"code","8fe8ed52":"code","b582d6bd":"code","61b73a38":"code","17d589cb":"code","cd275221":"code","a86bc8e0":"code","1715ad6b":"code","36b5a5ce":"code","6545a588":"code","74a90382":"code","c4b4d299":"code","e1b8850d":"code","41567e81":"code","a62892e7":"code","c1a3170f":"code","b4390bdf":"code","b64226ae":"code","8db1bcef":"code","3fc8a731":"code","81370f71":"code","9b3a56f5":"code","017a2897":"code","0b99c7e0":"code","3e1b39bd":"code","5c25d184":"markdown","c5f06f38":"markdown","0c488c4d":"markdown","f9f99893":"markdown","1455a957":"markdown","ee4e176f":"markdown","f63bb08d":"markdown","0476cd38":"markdown","62bc56de":"markdown","e0fbaac1":"markdown","7cedd8cd":"markdown","1b07a36d":"markdown","5061a733":"markdown","7e798903":"markdown","e67a0e19":"markdown","c0530eac":"markdown","baa25e9e":"markdown","419cb31d":"markdown","b9e17b19":"markdown","d21e3897":"markdown","f914ac95":"markdown","86d14bc7":"markdown","ce2de4cf":"markdown","b430a03a":"markdown","43869e65":"markdown","87b5ef0a":"markdown","cc122070":"markdown","cbcb8951":"markdown","304db2da":"markdown","36ab2191":"markdown","11e9eefc":"markdown","2bed4aca":"markdown","e73180b9":"markdown","bd542663":"markdown","fc226b3d":"markdown","72d822f3":"markdown","60fd0af0":"markdown","5084a6d8":"markdown"},"source":{"6ec25cb4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a86cecbd":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime as dt","d9a651ac":"train = pd.read_csv(\"..\/input\/recruit-restaurant-visitor-forecasting-data\/air_visit_data.csv\")\ndate_info = pd.read_csv(\"..\/input\/recruit-restaurant-visitor-forecasting-data\/date_info.csv\")\ntest = pd.read_csv(\"..\/input\/recruit-restaurant-visitor-forecasting-data\/sample_submission.csv\")\n\ndate_info = date_info.rename(columns={'calendar_date': \"visit_date\"})\n# \u65e5\u4ed8\u3068\u5e97\u8217\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u308b\u3068\u304d\u306b\u4f7f\u3046\u30c0\u30df\u30fc\u5909\u6570\ndate_info[\"dammy\"] = \"dammy\"\ndate_info","8e84ed8a":"def back_store_name(txt):\n    id = txt\n    #_\u533a\u5207\u308a\u3067\u53f3\u304b\u30891\u756a\u76ee\u306e\u6587\u5b57\u3092\u5207\u308a\u5206\u3051\u308b\n    txt_split = txt.rsplit(\"_\",1)\n    # \u5207\u308a\u5206\u3051\u305f\u6587\u5b57\u5217\u306e\u3046\u3061\u30010\u756a\u76ee\u3092\u8fd4\u3059\n    return txt_split[0]\n\ndef back_date_name(txt):\n    id = txt\n    txt_split = txt.rsplit(\"_\",1)\n    return txt_split[1]\n\n#\u65b0\u3057\u3044\u5217\u306e\u540d\u524d = \u5f15\u6570\u3068\u3057\u3066\u95a2\u6570\u306b\u5165\u308c\u3066\u51e6\u7406\u3059\u308b\u5217\u306e\u540d\u524d\ntest.loc[:,\"air_store_id\"] = test[\"id\"].apply(back_store_name)\ntest.loc[:,\"visit_date\"] = test[\"id\"].apply(back_date_name)\n# test = test.drop(columns = \"id\")\ntest","123b605b":"data_all = pd.concat([train,test])","2e0e716f":"data_all","cd872b7c":"from sklearn.preprocessing import LabelEncoder #Library for LabelEncoding\n\ndata_all_le = pd.DataFrame()\ndata_all_le[\"air_store_id\"] = data_all[\"air_store_id\"]\nle_unique = data_all_le.air_store_id.unique()\n\ndata_all_le_unique = pd.DataFrame(data=le_unique)\ndata_all_le_unique.columns = [\"air_store_id_enc\"]\n\ndata_all_le_unique_before = data_all_le_unique[\"air_store_id_enc\"]\ndata_all_le_unique_before = pd.DataFrame(data_all_le_unique_before)\ndata_all_le_unique_before.columns = [\"air_store_id\"]\n\ndata_all_le_unique","ee4632e6":"for c in data_all_le_unique:\n    le = LabelEncoder()\n    le.fit(data_all_le_unique[c])\n    data_all_le_unique[c] = le.transform(data_all_le_unique[c])\n\n# \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u524d\u5f8c\u306e\u6bd4\u8f03\ndata_all_le_unique = data_all_le_unique.join(data_all_le_unique_before)\ndata_all_le_unique","9e1189e4":"store_info =  data_all_le_unique.rename(columns={'air_store_id': 'air_store_id_moto'})\nstore_info = store_info.rename(columns={'air_store_id_enc': 'air_store_id'})\n# \u65e5\u4ed8\u3068\u5e97\u8217\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u308b\u3068\u304d\u306b\u4f7f\u3046\u30c0\u30df\u30fc\u5909\u6570\nstore_info[\"dammy\"] = \"dammy\"\nstore_info","8c484351":"air_store_info = pd.read_csv(\"..\/input\/recruit-restaurant-visitor-forecasting-data\/air_store_info.csv\")\ngenre_le = pd.DataFrame()\ngenre_le[\"air_genre_name\"] = air_store_info.air_genre_name\narea_le = pd.DataFrame()\narea_le[\"air_area_name\"] = air_store_info.air_area_name\narea_le","04144132":"# \u983b\u5ea6\u306e\u9ad8\u3044\u9806\u306b\u5e97\u8217\u306e\u540d\u79f0\u3092\u51fa\u3059\nunique_area = area_le.air_area_name.value_counts()\nu_area_df = pd.DataFrame(unique_area)\nu_area_df.head(20)","be4bfc40":"import re\ndef area2group2(area):\n    if re.match(r'T\u014dky\u014d.*',area) !=None:\n        return 0\n    if re.match(r'\u014csaka.*',area) !=None:\n        return 1\n    if re.match(r'Hokkaid\u014d.*',area) !=None:\n        return 2    \n    if re.match(r'Fukuoka.*',area) !=None:\n        return 3\n    if re.match(r'Niigata.*',area) !=None:\n        return 4\n    if re.match(r'Hiroshima.*',area) !=None:\n        return 5\n    if re.match(r'Shizuoka.*',area) !=None:\n        return 6\n    if re.match(r'Miyagi.*',area) !=None:\n        return 7\n    else:\n        return -1\n\nwarea = [area2group2(area) for area in area_le.air_area_name]\narea_le['area_cluster'] = warea","2f0920f7":"# area_le.loc[(area_le.area_cluster==8),\"area_cluster\"] = -1\narea_le.loc[(area_le['area_cluster'] ==8), 'area_cluster'] = -1\narea_le","b505efb2":"area_le.loc[176]","8c241d59":"area_le.loc[(area_le.area_cluster==8)]","8a06fb69":"area_le_cluster = area_le.area_cluster\narea_le_cluster_df = pd.DataFrame(area_le_cluster)\narea_le = area_le.drop(columns=\"area_cluster\")","b5cc7220":"# \u30b8\u30e3\u30f3\u30eb\u306e\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nfor c in genre_le:\n    le_g = LabelEncoder()\n    le_g.fit(genre_le[c])\n    genre_le[c] = le_g.transform(genre_le[c])\n\n#\u30a8\u30ea\u30a2\u306e\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nfor c in area_le:\n    le_a = LabelEncoder()\n    le_a.fit(area_le[c])\n    area_le[c] = le_a.transform(area_le[c])","9eab237a":"area_le","d19c6fbc":"area_le = area_le.join(area_le_cluster_df)","e60c92b7":"area_le","3942aa9b":"air_store_info_genre = pd.DataFrame()\nair_store_info_genre[\"id\"] = air_store_info.air_genre_name\nair_store_info_genre = air_store_info_genre.join(genre_le)\n\n# \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u305f\u7279\u5fb4\u91cf\u3092\u7d50\u5408\nair_store_info = air_store_info.drop(columns = \"air_genre_name\")\nair_store_info = air_store_info.join(genre_le)\nair_store_info = air_store_info.drop(columns = \"air_area_name\")\nair_store_info = air_store_info.join(area_le)\n# \u6700\u3082\u6765\u5e97\u8005\u306e\u591a\u3044\u66dc\u65e5\u60c5\u5831\u3068\u7d50\u5408\u3059\u308b\u305f\u3081\u306b\u30bd\u30fc\u30c8\u3057index\u3092\u3064\u3051\u306a\u304a\u3059\nair_store_info = air_store_info.sort_values(by='air_store_id')\n# index\u3092\u3064\u3051\u306a\u304a\u3059\nair_store_info = air_store_info.reset_index(drop=True)\nair_store_info = air_store_info.rename(columns={'air_store_id': 'air_store_id_moto'})\nair_store_info","a6164967":"air_store_info_genre","88b7a148":"s_id = air_store_info_genre.id.value_counts()\ns_genre = air_store_info_genre.air_genre_name.value_counts()\ns_id_df = pd.DataFrame(s_id)\ns_id_df = s_id_df.reset_index(drop=False)\ns_id_df = s_id_df.drop(columns='id')\ns_genre_df= pd.DataFrame(s_genre)\ns_genre_df = s_genre_df.reset_index(drop=False)\ns_genre_df.columns = [\"store_id_le\",\"frequency\"]\ns_id_genre_df = s_id_df.join(s_genre_df)\ns_id_genre_df","11971b3d":"store_info = pd.merge(air_store_info, store_info, on=\"air_store_id_moto\",how=\"outer\")\nstore_info","f6b39555":"data_all = pd.merge(data_all, data_all_le_unique, on=\"air_store_id\",how=\"inner\")\ndata_all = data_all.drop(columns = \"air_store_id\")\ndata_all = data_all.rename(columns={'air_store_id_enc': 'air_store_id'})\ndata_all","e0c049ff":"# \u65e5\u306b\u3061\u306e\u30e6\u30cb\u30fc\u30af\u30d0\u30ea\u30e5\u30fc(517\u65e5)\u00d7\u5e97\u8217\u306e\u30e6\u30cb\u30fc\u30af\u30d0\u30ea\u30e5\u30fc(829\u5e97\u8217)\u306e\u30c7\u30fc\u30bf\u3092\u7528\u610f\ndata_all_date = pd.merge(date_info, store_info, on=[\"dammy\"],how=\"outer\")\n\n# \u8907\u6570\u30ad\u30fc\u3092\u4f7f\u3063\u305f\u30de\u30fc\u30b8\u3067\u65e5\u4ed8\u3001\u5e97\u8217\u3054\u3068\u306b\u6765\u5e97\u8005\u6570\u3092\u30de\u30fc\u30b8\ndata_all = pd.merge(data_all_date, data_all, on=[\"air_store_id\",\"visit_date\"],how=\"outer\")\ndata_all = data_all.fillna(0)\n\ndata_all","b278f535":"# data_all\u306evisitors\u304c200\u3092\u8d85\u3048\u308b\u5834\u5408\u306f0\u306b\u3059\u308b\ndata_all.loc[data_all[\"visitors\"] > 200, \"visitors\"] = 0","5628731e":"data_all","38260e17":"# 2017-04-18\t\ndef back_year(txt):\n    visit_date = txt\n    txt_split = txt.rsplit(\"-\",2)\n    return txt_split[0]\n\ndef back_month(txt):\n    visit_date = txt\n    txt_split = txt.rsplit(\"-\",2)\n    #04\u6708\u306e\u3088\u3046\u306a\u8a18\u8ff0\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3001int\u578b\u3067\u8fd4\u3059\n    return int(txt_split[1])\n\ndef back_day(txt):\n    visit_date = txt\n    txt_split = txt.rsplit(\"-\",2)\n    return int(txt_split[2])\n\ndata_all.loc[:,\"year\"] = data_all[\"visit_date\"].apply(back_year)\ndata_all.loc[:,\"month\"] = data_all[\"visit_date\"].apply(back_month)\ndata_all.loc[:,\"day\"] = data_all[\"visit_date\"].apply(back_day)\ndata_all","028e1779":"columns_drop = [\"air_store_id_moto\",\"dammy\"] \ndata_all = data_all.drop(columns = columns_drop)","c04db016":"# \u4e0b\u8a18\u306e\u3088\u3046\u306a\u5909\u63db\u30eb\u30fc\u30eb\u3067\u7f6e\u63db\ndef back_downum(txt):\n    day_of_week= txt\n    day_of_week = txt.replace(\"Monday\",\"1\")\n    day_of_week = day_of_week.replace(\"Tuesday\",\"2\")\n    day_of_week = day_of_week.replace(\"Wednesday\",\"3\")\n    day_of_week = day_of_week.replace(\"Thursday\",\"4\")\n    day_of_week = day_of_week.replace(\"Friday\",\"5\")\n    day_of_week = day_of_week.replace(\"Saturday\",\"6\")\n    day_of_week = day_of_week.replace(\"Sunday\",\"7\")\n#     day_of_week = int(day_of_week)\n    return day_of_week\n\ndata_all.loc[:,\"day_of_week\"] = data_all[\"day_of_week\"].apply(back_downum)\ndata_all[\"day_of_week\"] = data_all.day_of_week.astype('int64')\ndata_all","12ee5214":"data_all[\"year\"] = data_all.year.astype('int64')\ndata_all[\"visitors\"] = data_all.visitors.astype('int64')\ndata_all","9dd18008":"weatherData = pd.read_csv(\"..\/input\/recruit-restaurant-visitor-forecasting-data\/WeatherData.csv\")\nweatherData.to_csv(\"weatherData.csv\", index=False)\n# \u6c17\u8c61\u30c7\u30fc\u30bf\u3092\u5229\u7528\nle_wether = weatherData.area_name\nle_wether_df = pd.DataFrame(le_wether)\nle_wether_df = le_wether_df.rename(columns={'area_name': 'air_area_name'})\nle_wether_df[\"tag\"] = \"weather\"\nle_wether_df","db60b851":"weatherData = weatherData.rename(columns={'area_name': 'air_area_name'})","a2886b1a":"weatherData = weatherData.rename(columns={'calendar_date': 'visit_date'})","2198f8a2":"\ndef area2group(area):\n    if re.match(r'tokyo.*',area) !=None:\n        return 0\n    if re.match(r'osaka.*',area) !=None:\n        return 1\n    if re.match(r'hokkaido.*',area) !=None:\n        return 2    \n    if re.match(r'fukuoka.*',area) !=None:\n        return 3\n    if re.match(r'niigata.*',area) !=None:\n        return 4\n    if re.match(r'hiroshima.*',area) !=None:\n        return 5\n    if re.match(r'shizuoka.*',area) !=None:\n        return 6\n    if re.match(r'miyagi.*',area) !=None:\n        return 7\n    else:\n        return -1\n\nwarea = [area2group(area) for area in weatherData.air_area_name]\nweatherData['area_cluster'] = warea\nweatherData","92c877ef":"# \u6b20\u640d\u306e\u591a\u3044\u60c5\u5831\u306f\u843d\u3068\u3059\nweatherData = weatherData.drop(['avg_vapor_pressure', 'avg_humidity', 'avg_sea_pressure', 'avg_local_pressure',\"solar_radiation\",\"cloud_cover\",\"deepest_snowfall\",\"total_snowfall\"], axis=1)\nweatherData","7844838f":"# \u65e5\u4ed8\u60c5\u5831\u306b\u5909\u63db\u3059\u308b\nweatherData[\"visit_date\"] = pd.to_datetime(weatherData['visit_date'])\nweatherData['visit_date'] = weatherData['visit_date'].dt.date\nweatherData","bf3134fd":"weatherData[\"precipitation\"] = weatherData[\"precipitation\"].fillna(0)\nweatherData[\"avg_temperature\"] = weatherData[\"avg_temperature\"].fillna(0)\nweatherData[\"hours_sunlight\"] = weatherData[\"hours_sunlight\"].fillna(0)\nweatherData[\"avg_wind_speed\"] = weatherData[\"avg_wind_speed\"].fillna(0)\nweatherData[\"high_temperature\"] = weatherData[\"high_temperature\"].fillna(0)\nweatherData[\"low_temperature\"] = weatherData[\"low_temperature\"].fillna(0)","c1756cc1":"# \u5e97\u8217\u3001\u66dc\u65e5\u3054\u3068\u306eDataFrame\u3092\u4f5c\u6210\u3059\u308b\nunique_date = weatherData['visit_date'].unique()\ndate_df = pd.concat(\n    [\n        pd.DataFrame({\n            'visit_date': unique_date,\n            'area_cluster': [i] * len(unique_date)\n        }) for i in range(-1,8)\n    ],\n    axis=0,\n    ignore_index=True).reset_index(drop=True)\n\n\n#\u5404\u5e97\u8217\u306e\u6765\u5e97\u8005\u6570\u306e\u6700\u5927\u3001\u5e73\u5747\u3001\u6700\u983b\u5024\u3001\u5024\u306e\u30ab\u30a6\u30f3\u30c8\ntmp = weatherData.groupby(\n    ['visit_date', 'area_cluster'],\n    as_index=False)['precipitation'].mean().rename(columns={\n        'precipitation': 'mean_precipitation'\n    })\ndate_df = pd.merge(date_df, tmp, how='left', on=['visit_date', 'area_cluster'])\n\ntmp = weatherData.groupby(\n    ['visit_date', 'area_cluster'],\n    as_index=False)['avg_temperature'].mean().rename(columns={\n        'avg_temperature': 'avg_temperature'\n    })\ndate_df = pd.merge(date_df, tmp, how='left', on=['visit_date', 'area_cluster'])\n\ntmp = weatherData.groupby(\n    ['visit_date', 'area_cluster'],\n    as_index=False)['hours_sunlight'].mean().rename(columns={\n        'hours_sunlight': 'mean_hours_sunlight'\n    })\ndate_df = pd.merge(date_df, tmp, how='left', on=['visit_date', 'area_cluster'])\n\ntmp = weatherData.groupby(\n    ['visit_date', 'area_cluster'],\n    as_index=False)['avg_wind_speed'].mean().rename(columns={\n        'avg_wind_speed': 'avg_wind_speed'\n    })\ndate_df = pd.merge(date_df, tmp, how='left', on=['visit_date', 'area_cluster'])\n\ntmp = weatherData.groupby(\n    ['visit_date', 'area_cluster'],\n    as_index=False)['high_temperature'].mean().rename(columns={\n        'high_temperature': 'high_temperature'\n    })\ndate_df = pd.merge(date_df, tmp, how='left', on=['visit_date', 'area_cluster'])\n\ntmp = weatherData.groupby(\n    ['visit_date', 'area_cluster'],\n    as_index=False)['low_temperature'].mean().rename(columns={\n        'low_temperature': 'low_temperature'\n    })\ndate_df = pd.merge(date_df, tmp, how='left', on=['visit_date', 'area_cluster'])\n\ndate_df = date_df.reset_index(drop=False)\ndate_df.to_csv(\"date_df.csv\", index=False)\ndate_df","91857ba2":"data_all_unique = data_all['visit_date'].unique()\ndata_all_unique = pd.DataFrame(data_all_unique)\ndata_all_unique.columns = [\"visit_date\"]\n\ndata_all_unique_all = pd.DataFrame()\ndata_all_unique_all = pd.concat([data_all_unique,data_all_unique,\n                                 data_all_unique,data_all_unique,\n                                 data_all_unique,data_all_unique,\n                                 data_all_unique,data_all_unique,\n                                 data_all_unique])\n\ndata_all_unique_all = data_all_unique_all.reset_index(drop=False)\ndata_all_unique_all = data_all_unique_all.drop(columns=\"index\")\n\ndata_all_unique_all = data_all_unique_all.reset_index(drop=False)\ndata_all_unique_all.to_csv(\"data_all_unique_all.csv\", index=False)\ndata_all_unique_all","529aafde":"date_df_merge = pd.merge(date_df, data_all_unique_all, on=\"index\")\n\n# \u540d\u524d\u3092\u4fee\u6b63\u3059\u308b\ndate_df_merge = date_df_merge.rename(columns={'visit_date_d': 'visit_date'})\ndate_df_merge = date_df_merge.rename(columns={'visit_date_y': 'visit_date'})\ndate_df_merge","aaaf5785":"date_df_merge.loc[:,\"year\"] = date_df_merge[\"visit_date\"].apply(back_year)\ndate_df_merge.loc[:,\"month\"] = date_df_merge[\"visit_date\"].apply(back_month)\ndate_df_merge.loc[:,\"day\"] = date_df_merge[\"visit_date\"].apply(back_day)\n\ndate_df_merge[\"year\"] = date_df_merge.year.astype('int64')\n\ndate_df_merge","3f80a854":"# \u6c17\u8c61\u60c5\u5831\u3092\u30de\u30fc\u30b8\ndata_all = pd.merge(data_all,date_df_merge,\n                    on=[\"year\",\"month\",\"day\",\"area_cluster\"],\n                    how=\"outer\")\ndata_all","ab7b3f5c":"data_all = data_all.drop(columns = \"visit_date_x\")\ndata_all = data_all.rename(columns={'visit_date_y': 'visit_date'})","635e322d":"data_all","ac7d12fb":"# str\u2192datetime\u5f62\u5f0f\u306b\u5909\u63db\u3057\u3066\u3001\u65e5\u4ed8\u3092\u65e5\u4ed8\u3068\u3057\u3066\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\ndata_all['visit_date'] = pd.to_datetime(data_all['visit_date'])\n\ndata_all.loc[(data_all['visit_date'] <= dt.datetime(2017,4,22)), 'set'] = 'train'","a3e30449":"train_temp = pd.DataFrame()\ntrain_temp = data_all.loc[data_all.set == \"train\"]","a84cf275":"# \u5e97\u8217\u3001\u66dc\u65e5\u3054\u3068\u306eDataFrame\u3092\u4f5c\u6210\u3059\u308b\nunique_stores = train_temp['air_store_id'].unique()\nstores = pd.concat(\n    [\n        pd.DataFrame({\n            'air_store_id': unique_stores,\n            'day_of_week': [i] * len(unique_stores)\n        }) for i in range(1,8)\n    ],\n    axis=0,\n    ignore_index=True).reset_index(drop=True)\n\n\n#\u5404\u5e97\u8217\u306e\u6765\u5e97\u8005\u6570\u306e\u6700\u5927\u3001\u5e73\u5747\u3001\u6700\u983b\u5024\u3001\u5024\u306e\u30ab\u30a6\u30f3\u30c8\ntmp = train_temp.groupby(\n    ['air_store_id', 'day_of_week'],\n    as_index=False)['visitors'].mean().rename(columns={\n        'visitors': 'ave_visitors'\n    })\nstores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_week'])\n\ntmp = train_temp.groupby(\n    ['air_store_id', 'day_of_week'],\n    as_index=False)['visitors'].max().rename(columns={\n        'visitors': 'max_visitors'\n    })\nstores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_week'])\n\ntmp = train_temp.groupby(\n    ['air_store_id', 'day_of_week'],\n    as_index=False)['visitors'].median().rename(columns={\n        'visitors': 'median_visitors'\n    })\nstores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_week'])\n\ntmp = train_temp.groupby(\n    ['air_store_id', 'day_of_week'],\n    as_index=False)['visitors'].count().rename(columns={\n        'visitors': 'count_visitors'\n    })\nstores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_week'])\n\nstores","ab2d0a39":"data_all","9e00b77d":"train_temp = pd.DataFrame()\ntrain_temp = data_all.loc[data_all.set == \"train\"]\ntrain_temp3 = data_all.loc[(data_all.year ==2017) & (data_all.month ==3)]\ntrain_temp4 = data_all.loc[(data_all.year ==2017) & (data_all.month ==4)]\ntrain_temp = pd.concat([train_temp3, train_temp4])","1a6c4ece":"#\u5404\u5e97\u8217\u306e\u6765\u5e97\u8005\u6570\u306e\u6700\u5927\u3001\u5e73\u5747\u3001\u6700\u983b\u5024\u3001\u5024\u306e\u30ab\u30a6\u30f3\u30c8\ntmp = train_temp.groupby(\n    ['air_store_id', 'day_of_week'],\n    as_index=False)['visitors'].mean().rename(columns={\n        'visitors': 'ave_visitors34'\n    })\nstores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_week'])\n\n# tmp = train_temp.groupby(\n#     ['air_store_id', 'day_of_week'],\n#     as_index=False)['visitors'].max().rename(columns={\n#         'visitors': 'max_visitors34'\n#     })\n# stores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_week'])\n\n# tmp = train_temp.groupby(\n#     ['air_store_id', 'day_of_week'],\n#     as_index=False)['visitors'].median().rename(columns={\n#         'visitors': 'median_visitors34'\n#     })\n# stores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_week'])\n\n# tmp = train_temp.groupby(\n#     ['air_store_id', 'day_of_week'],\n#     as_index=False)['visitors'].count().rename(columns={\n#         'visitors': 'count_visitors34'\n#     })\n# stores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_week'])\n\nstores","6009c56a":"train_temp = data_all.loc[data_all.set == \"train\"]\ntrain_temp5 = data_all.loc[(data_all.year ==2016) & (data_all.month ==5)]\ntrain_temp = train_temp5\n\n#\u5404\u5e97\u8217\u306e\u6765\u5e97\u8005\u6570\u306e\u5e73\u5747\ntmp = train_temp.groupby(\n    ['air_store_id', 'day_of_week'],\n    as_index=False)['visitors'].mean().rename(columns={\n        'visitors': 'ave_visitors5'\n    })\nstores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_week'])","bcad2c97":"train_temp = data_all.loc[data_all.set == \"train\"]\ntrain_temp2 = data_all.loc[(data_all.year ==2017) & (data_all.month ==2)]\ntrain_temp = train_temp2\n\n#\u5404\u5e97\u8217\u306e\u6765\u5e97\u8005\u6570\u306e\u5e73\u5747\ntmp = train_temp.groupby(\n    ['air_store_id', 'day_of_week'],\n    as_index=False)['visitors'].mean().rename(columns={\n        'visitors': 'ave_visitors2'\n    })\nstores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_week'])","367752ea":"train_temp = data_all.loc[data_all.set == \"train\"]\ntrain_temp3 = data_all.loc[(data_all.year ==2017) & (data_all.month ==3)]\ntrain_temp = train_temp3\n\n#\u5404\u5e97\u8217\u306e\u6765\u5e97\u8005\u6570\u306e\u5e73\u5747\ntmp = train_temp.groupby(\n    ['air_store_id', 'day_of_week'],\n    as_index=False)['visitors'].mean().rename(columns={\n        'visitors': 'ave_visitors3'\n    })\nstores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_week'])","187cb36f":"train_temp = data_all.loc[data_all.set == \"train\"]\ntrain_temp4 = data_all.loc[(data_all.year ==2017) & (data_all.month ==4)]\ntrain_temp = train_temp4\n\n#\u5404\u5e97\u8217\u306e\u6765\u5e97\u8005\u6570\u306e\u5e73\u5747\ntmp = train_temp.groupby(\n    ['air_store_id', 'day_of_week'],\n    as_index=False)['visitors'].mean().rename(columns={\n        'visitors': 'ave_visitors4'\n    })\nstores = pd.merge(stores, tmp, how='left', on=['air_store_id', 'day_of_week'])","e5106af0":"stores","17ccd7e5":"data_all = pd.merge(data_all, stores, how='left', on=['air_store_id', 'day_of_week'])\ndata_all","93ab80f6":"data_all.set","3d648fda":"train_temp = pd.DataFrame()\ntrain_temp = data_all.loc[data_all.set == \"train\"]\ntrain_temp","e9ffffcf":"# \u5e97\u8217\u3001\u66dc\u65e5\u3054\u3068\u306eDataFrame\u3092\u4f5c\u6210\u3059\u308b\nunique_area = train_temp['air_area_name'].unique()\nstores_area = pd.concat(\n    [\n        pd.DataFrame({\n            'air_area_name': unique_area,\n            'air_genre_name': [i] * len(unique_area)\n        }) for i in range(0,14)\n    ],\n    axis=0,\n    ignore_index=True).reset_index(drop=True)\n\nstores_area","8fe8ed52":"#\u5404\u30a8\u30ea\u30a2\u5e97\u8217\u306e\u6765\u5e97\u8005\u6570\u306e\u6700\u5927\u3001\u5e73\u5747\u3001\u6700\u983b\u5024\u3001\u5024\u306e\u30ab\u30a6\u30f3\u30c8\ntmp = train_temp.groupby(\n    ['air_genre_name', 'air_area_name'],\n    as_index=False)['visitors'].mean().rename(columns={\n        'visitors': 'ave_visitors_area_genre'\n    })\n\ntmp","b582d6bd":"stores_area = pd.merge(stores_area, tmp, how='left', on=['air_genre_name', 'air_area_name'])\nstores_area","61b73a38":"stores_area.sort_values(by='ave_visitors_area_genre', ascending=False)","17d589cb":"data_all = pd.merge(data_all, stores_area, how='left', on=['air_area_name', 'air_genre_name'])\ndata_all","cd275221":"store_visitors = train_temp.groupby(['air_store_id']).visitors.agg([sum,len,max,min])\nstore_visitors[\"ave\"] = store_visitors[\"sum\"] \/\/ store_visitors[\"len\"]\n# \u6765\u5e97\u8005\u6570\u306e\u5e73\u5747\u3067\u30bd\u30fc\u30c8\nstore_visitors.sort_values(by='ave', ascending=False)","a86bc8e0":"%%time\nstore_all_7 = pd.DataFrame()\nstore_all_14 = pd.DataFrame()\nstore_all_21 = pd.DataFrame()\nstore_all_28 = pd.DataFrame()\nstore_all_35 = pd.DataFrame()\nstore_all_42 = pd.DataFrame()\nstore_all_49 = pd.DataFrame()\nstore_all_56 = pd.DataFrame()\nstore_all_63 = pd.DataFrame()\nstore_all_70 = pd.DataFrame()\nstore_all_77 = pd.DataFrame()\nstore_all_84 = pd.DataFrame()\n\nfor c in range(0,829,1):\n    \n    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = data_all.loc[data_all.air_store_id == c]\n    # 7\u65e5\u524d\u306e\u6765\u5e97\u8005\u6570\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag7\"] = store[\"visitors\"].shift(7).rolling(window=1).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_7 = pd.concat([store_all_7, store])\n    \n    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = data_all.loc[data_all.air_store_id == c]\n    # 14\u65e5\u524d\u306e\u6765\u5e97\u8005\u6570\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag14\"] = store[\"visitors\"].shift(14).rolling(window=1).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_14 = pd.concat([store_all_14, store])\n    \n    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = data_all.loc[data_all.air_store_id == c]\n    # 21\u65e5\u524d\u306e\u6765\u5e97\u8005\u6570\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag21\"] = store[\"visitors\"].shift(21).rolling(window=1).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_21 = pd.concat([store_all_21, store])\n\n    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = data_all.loc[data_all.air_store_id == c]\n    # 28\u65e5\u524d\u306e\u6765\u5e97\u8005\u6570\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag28\"] = store[\"visitors\"].shift(28).rolling(window=1).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_28 = pd.concat([store_all_28, store])\n    \n    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = data_all.loc[data_all.air_store_id == c]\n    # 35\u65e5\u524d\u306e\u6765\u5e97\u8005\u6570\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag35\"] = store[\"visitors\"].shift(35).rolling(window=1).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_35 = pd.concat([store_all_35, store])\n    \n        # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = data_all.loc[data_all.air_store_id == c]\n    # 35\u65e5\u524d\u306e\u6765\u5e97\u8005\u6570\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag42\"] = store[\"visitors\"].shift(42).rolling(window=1).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_42 = pd.concat([store_all_42, store])\n    \n    \n        # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = data_all.loc[data_all.air_store_id == c]\n    # 35\u65e5\u524d\u306e\u6765\u5e97\u8005\u6570\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag49\"] = store[\"visitors\"].shift(49).rolling(window=1).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_49 = pd.concat([store_all_49, store])\n    \n            # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = data_all.loc[data_all.air_store_id == c]\n    # 35\u65e5\u524d\u306e\u6765\u5e97\u8005\u6570\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag56\"] = store[\"visitors\"].shift(56).rolling(window=1).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_56 = pd.concat([store_all_56, store])\n    \n                # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = data_all.loc[data_all.air_store_id == c]\n    # 35\u65e5\u524d\u306e\u6765\u5e97\u8005\u6570\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag63\"] = store[\"visitors\"].shift(63).rolling(window=1).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_63 = pd.concat([store_all_63, store])\n    \n                # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = data_all.loc[data_all.air_store_id == c]\n    # 35\u65e5\u524d\u306e\u6765\u5e97\u8005\u6570\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag70\"] = store[\"visitors\"].shift(70).rolling(window=1).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_70 = pd.concat([store_all_70, store])\n    \n                    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = data_all.loc[data_all.air_store_id == c]\n    # 35\u65e5\u524d\u306e\u6765\u5e97\u8005\u6570\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag77\"] = store[\"visitors\"].shift(77).rolling(window=1).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_77 = pd.concat([store_all_77, store])\n    \n                    # c\u3067\u6307\u5b9a\u3057\u305f\u5e97\u8217id\u3092\u6301\u3064DataFrame\u3092\u62fe\u3063\u3066\u304f\u308b(\u5e97\u8217\u5225\u306b\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u5f97\u308b\u305f\u3081\u306b)\n    store = data_all.loc[data_all.air_store_id == c]\n    # 35\u65e5\u524d\u306e\u6765\u5e97\u8005\u6570\u3092\u53d6\u5f97\n    x_lag = pd.DataFrame()\n    x_lag[\"lag84\"] = store[\"visitors\"].shift(84).rolling(window=1).mean()\n    store = store.join(x_lag)\n    # \u6b20\u640d\u5024\u306f\u3001\u305d\u306e\u5e97\u8217\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3067\u57cb\u3081\u308b\n    ave = store_visitors['ave'][c]\n    store = store.fillna(ave)\n    store_all_84 = pd.concat([store_all_84, store])\n    \n# \u5168\u7bc4\u56f2\u306e\u30c7\u30fc\u30bf\u3067\u3084\u308b\u30683min\u304f\u3089\u3044\u304b\u304b\u308b","1715ad6b":"# id\u3067\u30bd\u30fc\u30c8\u3057\u306a\u304a\u3059\nstore_all_7 = store_all_7.sort_index()\nstore_all_14 = store_all_14.sort_index()\nstore_all_21 = store_all_21.sort_index()\nstore_all_28 = store_all_28.sort_index()\nstore_all_35 = store_all_35.sort_index()\nstore_all_42 = store_all_42.sort_index()\nstore_all_49 = store_all_49.sort_index()\nstore_all_56 = store_all_56.sort_index()\nstore_all_63 = store_all_63.sort_index()\nstore_all_70 = store_all_70.sort_index()\nstore_all_77 = store_all_77.sort_index()\nstore_all_84 = store_all_84.sort_index()\n# \u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u7d50\u5408\u3057\u3066lag_all\nlag_all = pd.DataFrame()\nlag_all[\"lag7\"] = store_all_7.lag7\nlag_all[\"lag14\"] = store_all_14.lag14\nlag_all[\"lag21\"] = store_all_21.lag21\nlag_all[\"lag28\"] = store_all_28.lag28\nlag_all[\"lag35\"] = store_all_35.lag35\nlag_all[\"lag42\"] = store_all_42.lag42\nlag_all[\"lag49\"] = store_all_49.lag49\nlag_all[\"lag56\"] = store_all_56.lag56\nlag_all[\"lag63\"] = store_all_63.lag63\nlag_all[\"lag70\"] = store_all_70.lag70\nlag_all[\"lag77\"] = store_all_77.lag77\nlag_all[\"lag84\"] = store_all_84.lag84\n\nlag_all[\"air_store_id\"] = store_all_7.air_store_id\nlag_all[\"visit_date\"] = store_all_7.visit_date\nlag_all","36b5a5ce":"data_all = pd.merge(data_all,lag_all,on=[\"air_store_id\",\"visit_date\"],how=\"outer\")\ndata_all","6545a588":"data_all[\"lag_mean_42-84\"] = (data_all[\"lag42\"]+\n                              data_all[\"lag49\"]+\n                              data_all[\"lag56\"]+\n                              data_all[\"lag63\"]+\n                              data_all[\"lag70\"]+\n                              data_all[\"lag77\"]+\n                              data_all[\"lag84\"])\/7\n\ndata_all[\"lag_mean_7-14\"] = (data_all[\"lag7\"]+\n                             data_all[\"lag21\"])\/2\n\ndata_all[\"lag_mean_7-21\"] = (data_all[\"lag7\"]+\n                             data_all[\"lag14\"]+\n                             data_all[\"lag21\"])\/3\n\ndata_all[\"lag_mean_7-28\"] = (data_all[\"lag7\"]+\n                             data_all[\"lag14\"]+\n                             data_all[\"lag14\"]+\n                             data_all[\"lag21\"])\/4\n\n\ndata_all[\"lag_mean_42-49\"] = (data_all[\"lag42\"]+\n                              data_all[\"lag49\"])\/2\n\n\ndata_all[\"lag_mean_42-56\"] = (data_all[\"lag42\"]+\n                              data_all[\"lag49\"]+\n                              data_all[\"lag56\"])\/3\n\ndata_all[\"lag_mean_42-63\"] = (data_all[\"lag42\"]+\n                              data_all[\"lag49\"]+\n                              data_all[\"lag56\"]+\n                              data_all[\"lag63\"])\/4\n\ndata_all[\"lag_mean_42-70\"] = (data_all[\"lag42\"]+\n                              data_all[\"lag49\"]+\n                              data_all[\"lag56\"]+\n                              data_all[\"lag63\"]+\n                              data_all[\"lag70\"])\/5\n\ndata_all[\"lag_mean_42-77\"] = (data_all[\"lag42\"]+\n                              data_all[\"lag49\"]+\n                              data_all[\"lag56\"]+\n                              data_all[\"lag63\"]+\n                              data_all[\"lag70\"]+\n                              data_all[\"lag77\"])\/6\n\ndata_all","74a90382":"data_all.visit_date","c4b4d299":"reserve = pd.read_csv(\"..\/input\/recruit-restaurant-visitor-forecasting-data\/hpg_reserve.csv\")\nhpg_store_info = pd.read_csv(\"..\/input\/recruit-restaurant-visitor-forecasting-data\/hpg_store_info.csv\")\nstore_id_relation = pd.read_csv(\"..\/input\/recruit-restaurant-visitor-forecasting-data\/store_id_relation.csv\")\n\nreserve","e1b8850d":"reserve_id = pd.merge(reserve, store_id_relation, on=[\"hpg_store_id\"], how = \"outer\")\n# 150\u5e97\u8217\u3076\u3093\u3057\u304b\u5909\u63db\u3067\u304d\u308b\u30c7\u30fc\u30bf\u304c\u306a\u3044\u306e\u3067\u3001\u3072\u3068\u307e\u305a\u4eca\u3042\u308b\u3082\u306e\u3060\u3051\u6b8b\u3059\nreserve_id = reserve_id.dropna(axis=0)\n\ndef back_date_name(txt):\n    visit_datetime = txt\n    #_\u533a\u5207\u308a\u3067\u53f3\u304b\u30891\u756a\u76ee\u306e\u6587\u5b57\u3092\u5207\u308a\u5206\u3051\u308b\n    txt_split = txt.rsplit(\" \",1)\n    # \u5207\u308a\u5206\u3051\u305f\u6587\u5b57\u5217\u306e\u3046\u3061\u30010\u756a\u76ee\u3092\u8fd4\u3059\n    return txt_split[0]\n\n\nreserve_id.loc[:,\"visit_date\"] = reserve_id[\"visit_datetime\"].apply(back_date_name)\nreserve_id.loc[:,\"reserve_date\"] = reserve_id[\"reserve_datetime\"].apply(back_date_name)\n\nreserve_id = reserve_id.drop(columns = \"visit_datetime\")\nreserve_id = reserve_id.drop(columns = \"reserve_datetime\")\nreserve_id = reserve_id.drop(columns = \"hpg_store_id\")\nreserve_id","41567e81":"store_id_relation","a62892e7":"hpg_store_info","c1a3170f":"reserve_id = pd.merge(reserve_id, data_all_le_unique, on=[\"air_store_id\"], how=\"inner\")\nreserve_id = reserve_id.drop(columns = \"air_store_id\")\n# \u540d\u524d\u5909\u66f4\nreserve_id = reserve_id.rename(columns={'air_store_id_enc': 'air_store_id'})\nreserve_id","b4390bdf":"reserve_id.air_store_id.unique()","b64226ae":"reserve_id.visit_date","8db1bcef":"reserve_id.visit_date = pd.to_datetime(reserve_id['visit_date'])\nreserve_id.visit_date","3fc8a731":"# \u4e88\u7d04\u30c7\u30fc\u30bf\u306edata_all\u3078\u30de\u30fc\u30b8\ndata_all = pd.merge(data_all, reserve_id, on=[\"air_store_id\",\"visit_date\"], how=\"outer\")\ndata_all = data_all.drop(columns = \"reserve_date\")\ndata_all","81370f71":"# \u5168\u3066\u306e\u30e9\u30d9\u30eb\u3092not-test\u3067\u57cb\u3081\u308b\ndata_all['set'] = 'not-test'","9b3a56f5":"data_all = data_all.drop(['lag77', 'lag84'], axis=1)\n# data_all = data_all.drop(['max_visitors34','median_visitors34','count_visitors34'], axis=1)","017a2897":"data_all","0b99c7e0":"for col in data_all:\n    print(col)","3e1b39bd":"data_all.to_csv(\"data_all.csv\", index=False)","5c25d184":"# 3\u6708\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570","c5f06f38":"# \u30e9\u30b0\u7279\u5fb4\u91cf\u304b\u3089\u7279\u5fb4\u91cf\u3092\u4f5c\u308b\n* lag42-84\u306e\u5e73\u5747\u5024\u3092\u5165\u308c\u308b\n<br>41\u307e\u3067\u306f\u610f\u56f3\u7684\u306b\u843d\u3068\u3057\u3066\u308b\u3082\u306e\u3082\u3042\u308b\u306e\u3067\n* lag42-49\n<br>5\u6708\u306e\u30c7\u30fc\u30bf\u306f7-14\u306e\u30e9\u30b0\u7279\u5fb4\u91cf\u306f\u306a\u3044\u306e\u3067\u300142\u65e5\u4ee5\u4e0a\u524d\u306e\u3067\u30fc\u305f\u3092\u4f7f\u3046\u7279\u5fb4\u91cf\u3092\u5897\u3084\u3057\u3066\u307f\u308b\n","0c488c4d":"# reserve_id\u306evisit_date\u304cdtype: datetime64[ns]\u306b\u306a\u3063\u3066\u306a\u3044\u306e\u3067\u5909\u63db\u304c\u5fc5\u8981","f9f99893":"# \u90fd\u9053\u5e9c\u770c\u60c5\u5831\u3092\u6b8b\u3057\u3066\u304a\u304f\n(\u3042\u3068\u3067\u6c17\u8c61\u60c5\u5831\u3068\u7d10\u3065\u3051\u305f\u3044)","1455a957":"# \u5e97\u3054\u3068\u306e\u60c5\u5831\u3092data_all\u3078\u30de\u30fc\u30b8","ee4e176f":"# \u30b7\u30d5\u30c8\u7279\u5fb4\u91cf\u306e\u4f5c\u6210","f63bb08d":"# \u7279\u5fb4\u91cf\u3092\u30c9\u30ed\u30c3\u30d7\n\u7cbe\u5ea6\u306b\u60aa\u5f71\u97ff\u3092\u53ca\u307c\u3059\u7279\u5fb4\u91cf\u3092\u843d\u3068\u3059","0476cd38":"# \u65e5\u4ed8\u00d7\u5e97\u8217\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5168\u90e8\u7528\u610f\u3059\u308b\n2016\/1\/1\u306b\u304a\u3044\u3066\u3001\u3059\u3079\u3066\u306e\u5e97\u8217\u3067\u306e\u5404\u65e5\u4ed8\u306b\u304a\u3051\u308b\u6765\u5e97\u8005\u6570\u3092\u6301\u3064<br>\nDataFrame data_all\u3092\u4f5c\u6210\u3059\u308b<br>\n\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u3001store_info(air_store_info.csv\u306e\u60c5\u5831\u3092\u542b\u3080)\u3092\u7d50\u5408\u3059\u308b","62bc56de":"# 2\u6708\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570","e0fbaac1":"# \u30a8\u30ea\u30a2\u30fb\u30b8\u30e3\u30f3\u30eb\u3054\u3068\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\n\u7279\u5b9a\u306e\u30a8\u30ea\u30a2\u306e\u3042\u308b\u30b8\u30e3\u30f3\u30eb\u306e\u5e97\u8217\u306e\u6765\u5e97\u8005\u6570\u3092\u898b\u308b<br>\n\u3064\u307e\u308a\u3001\u65b0\u5bbf\u533a\u306b\u3042\u308b\u30e9\u30fc\u30e1\u30f3\u5c4b\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3092\u307e\u3068\u3081\u305fdateFreame\u3092\u7528\u610f\u3059\u308b","7cedd8cd":"# test\u3068train\u3092\u5408\u4f53","1b07a36d":"# \u4ee3\u8868\u7684\u306a\u90fd\u9053\u5e9c\u770c\u3054\u3068\u306b\u30a8\u30ea\u30a2\u5206\u3051","5061a733":"# \u66dc\u65e5\u3092\u6570\u5b57\u306b\u5909\u63db","7e798903":"# \u4e88\u7d04\u30c7\u30fc\u30bf\u306e\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","e67a0e19":"# \u5e97\u8217\u60c5\u5831\u306b\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u305f\u5e97\u8217ID\u3092\u7d10\u3065\u3051","c0530eac":"# \u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u7d50\u5408","baa25e9e":"# \u6b20\u640d\u5024\u306e\u51e6\u7406\n\u6b20\u640d\u5024\u306f0\u3068\u3059\u308b","419cb31d":"# data_all\u306e\u65e5\u4ed8\u4e00\u89a7\u3092\u4f5c\u308b","b9e17b19":"# \u4e88\u7d04\u30c7\u30fc\u30bf\u306e\u5229\u7528","d21e3897":"# air_store_info.csv\u3092\u5229\u7528","f914ac95":"# \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","86d14bc7":"# \u6765\u5e97\u8005\u304c\u591a\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u307f\u308b\n\u30a8\u30ea\u30a245\u3001\u30b8\u30e3\u30f3\u30eb13\u304c\u6700\u3082\u5e73\u5747\u6765\u5e97\u8005\u6570\u304c\u591a\u3044","ce2de4cf":"# \u4ee5\u4e0a\u3001\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u306f\u7d42\u4e86\n","b430a03a":"# 3-4\u6708\u306e\u5e97\u8217\u30fb\u66dc\u65e5\u3054\u3068\u306e\u6765\u5e97\u8005\u6570\u306e\u30ea\u30b9\u30c8\u3092\u8ffd\u52a0\n  \u76f4\u8fd12\u30ab\u6708\u306e\u30c7\u30fc\u30bf\u306e\u5e97\u8217\u3054\u3068\u306e\u5e73\u5747\u5024\u3092submit\u3059\u308b\u3068\u3001\u305d\u308c\u3060\u3051\u3067\u30b9\u30b3\u30a2\u304c\u304b\u306a\u308a\u9ad8\u3044\u306e\u3067\u7279\u5fb4\u91cf\u3068\u3057\u3066\u8003\u616e\u3059\u308b\n  <br>\n  \u7d71\u8a08\u91cf\u306e\u3046\u3061\u3001\u5e73\u5747\u4ee5\u5916\u306f\u30b9\u30b3\u30a2\u3092\u4e0a\u3052\u308b\u52b9\u679c\u304c\u898b\u3089\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3044\u308b","43869e65":"# \u30c7\u30fc\u30bf\u578b\u3092\u5909\u66f4","87b5ef0a":"# data_all\u306b\u6c17\u8c61\u30c7\u30fc\u30bf\u3092\u30de\u30fc\u30b8","cc122070":"# Recruit Restaurant Visitor Forecasting\n\u51e6\u7406\u6642\u9593\uff1a16\u5206<br>\n\u524d\u51e6\u7406\u306e\u6982\u8981\n* \u7279\u5fb4\u91cf\u3092\u4f5c\u6210(\u65e5\u4ed8\u3001\u5e97\u8217\u306e\u30d4\u30fc\u30af\u66dc\u65e5)\n* \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u5909\u63db(\u5e97\u8217ID\u3068\u5e97\u8217\u30ab\u30c6\u30b4\u30ea)\n* \u30e9\u30b0\u7279\u5fb4\u91cf(7,14...84\u65e5\u524d\u306e\u6765\u5e97\u8005\u6570)\n* \u5929\u6c17\u60c5\u5831\u3092\u5229\u7528\u3001\u5730\u57df\u306f\u4ee3\u8868\u7684\u306a8\u90fd\u9053\u5e9c\u770c\u3068\u305d\u306e\u4ed6\u306b\u5206\u985e\n* 2016\/5\u6708\u30682017\/2,3,4\u6708\u306e\u5e97\u8217\u3054\u3068\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3092\u7279\u5fb4\u91cf\u306b\u8ffd\u52a0\n* \u30a8\u30ea\u30a2\u30fb\u30b8\u30e3\u30f3\u30eb\u3054\u3068\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570\u3092\u7279\u5fb4\u91cf\u306b\u8ffd\u52a0\n* \u30b7\u30d5\u30c8\u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\n* \u30e9\u30b0\u7279\u5fb4\u91cf\u306e\u7d71\u8a08\u5024(\u4e3b\u306b\u5e73\u5747)\n* \u4e88\u7d04\u30c7\u30fc\u30bf\u306e\u5229\u7528(air\u3068hpg\u304c\u7d10\u3065\u3051\u3089\u308c\u308b150\u5e97\u8217\u306e\u307f)\n\nProcessing time: 16 minutes <br>\nOverview of pretreatment\n* Create features (date, peak day of the store)\n* Convert categorical variables (store ID and store category)\n* Rug features (7,14 ... 84 days ago)\n* Using weather information, the area is classified into 8 representative prefectures and others\n* Added the average number of visitors to each store in May 2016 and February, March, and April 2017 to the features.\n* Added the average number of visitors by area and genre to the features\n* Added shift features\n* Statistics of lag features (mainly average)\n* Use of reservation data (only 150 stores where air and hpg are linked)\n<br><br>\n\u30b3\u30fc\u30c9\u30923\u3064\u306b\u5206\u5272\u3057\u3066\u3044\u307e\u3059<br>\nThe code is divided into three<br>\nhttps:\/\/www.kaggle.com\/mnthasi\/recruit-restaurant-01-pre\nhttps:\/\/www.kaggle.com\/mnthasi\/recruit-restaurant-02-lightgbm-japanese\nhttps:\/\/www.kaggle.com\/mnthasi\/recruit-restaurant-03-ensemble-japanese","cbcb8951":"# \u5e97\u8217\u60c5\u5831\u3092\u6301\u3064store_info\u306e\u5b9a\u7fa9","304db2da":"# \u5404\u5e97\u8217\u306e\u66dc\u65e5\u30fb\u5e97\u3054\u3068\u306e\u6765\u5e97\u8005\u6570\u306e\u307e\u3068\u3081","36ab2191":"# \u6c17\u8c61\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","11e9eefc":"# \u3082\u3068\u3068\u306a\u308b\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58","2bed4aca":"# 4\u6708\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570","e73180b9":"# test\u30bb\u30c3\u30c8\u306eid\u306e\u51e6\u7406","bd542663":"# \u65e5\u4ed8\u60c5\u5831\u3092\u8ffd\u52a0\nvisit_date\u3092\u30ad\u30fc\u306b\u3057\u3066\u30de\u30fc\u30b8\u3057\u3088\u3046\u3068\u3057\u305f\u304c\u306a\u305c\u304b\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\nvisit_date\u3092day,year,month\u306b\u308f\u3051\u3066\u3001\u3053\u308c\u3089\u3092\u30ad\u30fc\u306b\u3057\u3066\u30de\u30fc\u30b8\u3059\u308b","fc226b3d":"# year,month,day\u306e\u5217\u3092\u4f5c\u6210","72d822f3":"# \u524d\u5e745\u6708\u306e\u5e73\u5747\u6765\u5e97\u8005\u6570","60fd0af0":"# \u5730\u57df\u30af\u30e9\u30b9\u30bf\u30fc\u3001\u65e5\u4ed8\u3054\u3068\u306b\u5e73\u5747\u5024\u3092\u3068\u308b\n\u5404\u5730\u57df\u3001\u65e5\u4ed8\u3054\u3068\u306b\u3001\u6c17\u6e29\u3084\u964d\u6c34\u91cf\u306e\u5e73\u5747\u3092\u3068\u308b\u3002\u6b20\u640d\u5730\u306f0\u3067\u57cb\u3081\u3066\u3044\u308b\u306e\u3067\u3001\u5e73\u5747\u306f\u82e5\u5e72\u4f4e\u304f\u306a\u308b\u61f8\u5ff5\u3082\u3042\u308b","5084a6d8":"# \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5f8c\u306eID\u3068\u30b8\u30e3\u30f3\u30eb\u540d\u306e\u5bfe\u5fdc\u8868"}}