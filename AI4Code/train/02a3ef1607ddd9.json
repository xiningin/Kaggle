{"cell_type":{"e049d135":"code","7b514277":"code","794c218c":"code","f45b63d1":"code","488d131a":"code","99241ead":"code","07451855":"code","234ec069":"code","9223db66":"code","ea5d538f":"code","3a6616e2":"code","4c4ed13f":"code","46f30b8a":"code","e1a9bbc8":"code","606ab00f":"code","1ccce977":"code","bdb758b7":"code","8da4b10b":"code","6fe30078":"code","5226481b":"code","2d3eb7b1":"code","699abacd":"code","da8db1ee":"code","e68d444b":"code","bc3a8c39":"code","56e60443":"code","4ff7a3e3":"markdown","83aafd25":"markdown","92add6e3":"markdown","9c4655e5":"markdown","364406a6":"markdown","9ac8e6c6":"markdown","f174b58d":"markdown","1a143b58":"markdown","f18c5d45":"markdown","8a7f1c6e":"markdown","6a46d600":"markdown","f658cd38":"markdown","46fa231b":"markdown","d09cbba7":"markdown","3b51b3ac":"markdown","f3c29553":"markdown"},"source":{"e049d135":"import pandas as pd\nimport numpy as np","7b514277":"df = pd.read_csv(\"..\/input\/churn-in-telecoms-dataset\/bigml_59c28831336c6604c800002a.csv\")\ndf.head().T","794c218c":"print(df['churn'].value_counts())\nby_churn = df['churn'].value_counts()\nby_churn.plot(kind='bar', colormap='cividis')","f45b63d1":"df['churn'] = df['churn'].map({False: 0, True: 1})\ndf2 = pd.get_dummies(df, columns=['state', 'area code'])\ndf2['international plan'] = df2['international plan'].map({'no': 0, 'yes': 1})\ndf2['voice mail plan'] = df2['voice mail plan'].map({'no': 0, 'yes': 1})\ndf3 = df2.drop(['phone number'], axis=1)\ny = df3['churn']\ndf4 = df3.drop('churn', axis=1)\ndf4.info()","488d131a":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = scaler.fit_transform(df4)\nprint(X[:5])","99241ead":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.25, random_state=42)","07451855":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)","234ec069":"y_pred = knn.predict(X_valid)\nprint(y_pred[:5])","9223db66":"print(y_valid[:5])","ea5d538f":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_valid, y_pred))","3a6616e2":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\nknn = KNeighborsClassifier(n_neighbors=5)\nscores = cross_val_score(knn, X, y, \n                         cv=kf, scoring='accuracy')\nprint('\u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438:', scores)\nprint('\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438:', np.mean(scores))","4c4ed13f":"from sklearn.model_selection import GridSearchCV\n\nknn_params = {'n_neighbors': np.arange(1, 51)}\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\nknn_grid = GridSearchCV(knn, knn_params, cv=kf, scoring='accuracy')\nknn_grid.fit(X_train, y_train)","46f30b8a":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nprint(knn_grid.best_params_)\n\n# \u041b\u0443\u0447\u0448\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c\nprint(knn_grid.best_estimator_)","e1a9bbc8":"# \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0432 \u0432\u0438\u0434\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\npd.DataFrame(knn_grid.cv_results_).T","606ab00f":"import matplotlib.pyplot as plt\nresults_df = pd.DataFrame(knn_grid.cv_results_)\nplt.plot(results_df['param_n_neighbors'], results_df['mean_test_score'])\n\nplt.xlabel('n_neighbors')\nplt.ylabel('Test accuracy')\nplt.title('Validation curve')\nplt.show()","1ccce977":"knn = KNeighborsClassifier(n_neighbors=7, weights='distance')\n\nknn_params = {'p': np.linspace(1, 10, 20)}\n\nknn_grid = GridSearchCV(knn, knn_params, cv=kf, scoring='accuracy')\nknn_grid.fit(X_train, y_train)","bdb758b7":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nprint(knn_grid.best_params_)\n\n# \u041b\u0443\u0447\u0448\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c\nprint(knn_grid.best_estimator_)","8da4b10b":"# \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0432 \u0432\u0438\u0434\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\npd.DataFrame(knn_grid.cv_results_).T","6fe30078":"results_df = pd.DataFrame(knn_grid.cv_results_)\nplt.plot(results_df['param_p'], results_df['mean_test_score'])\n\nplt.xlabel('p')\nplt.ylabel('Test accuracy')\nplt.title('Validation curve')\nplt.show()","5226481b":"from sklearn.neighbors import RadiusNeighborsClassifier\nrnc = RadiusNeighborsClassifier(radius=6.77)\nrnc.fit(X_train, y_train)","2d3eb7b1":"y_pred = rnc.predict(X_valid)\nprint(accuracy_score(y_valid, y_pred))","699abacd":"rnc = RadiusNeighborsClassifier()\n\nrnc_params = {'radius': np.linspace(8, 50, 30)}\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\nrnc_grid = GridSearchCV(rnc, rnc_params, cv=kf, scoring='accuracy')\nrnc_grid.fit(X_train, y_train)","da8db1ee":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nprint(rnc_grid.best_params_)\n\n# \u041b\u0443\u0447\u0448\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c\nprint(rnc_grid.best_estimator_)","e68d444b":"results_df = pd.DataFrame(rnc_grid.cv_results_)\nplt.plot(results_df['param_radius'], results_df['mean_test_score'])\n\nplt.xlabel('radius')\nplt.ylabel('Test accuracy')\nplt.title('Validation curve')\nplt.show()","bc3a8c39":"from sklearn.neighbors import NearestCentroid\nclf = NearestCentroid()\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_valid)\nprint(accuracy_score(y_valid, y_pred))","56e60443":"kf = KFold(n_splits=5, shuffle=True, random_state=42)\nscores = cross_val_score(clf, X, y, \n                         cv=kf, scoring='accuracy')\nprint('\u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0438:', scores)\nprint('\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438:', np.mean(scores))","4ff7a3e3":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c RadiusNeighborsClassifier","83aafd25":"***\u0412\u044b\u0431\u043e\u0440 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 kNN***","92add6e3":"**\u0414\u0440\u0443\u0433\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b**","9c4655e5":"\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438.","364406a6":"\u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c \u043f\u0440\u0438 k=7 \u0438 p=3.8421052631578947 \u0441 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 0.859149","9ac8e6c6":"**\u041e\u0431\u0443\u0447\u0438\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438**","f174b58d":"**\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u0431\u043b\u043e\u043a\u043e\u0432**","1a143b58":"\u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c \u043f\u0440\u0438 k=7 \u0441 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 0.859551","f18c5d45":"***\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445\n\u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 kNN***","8a7f1c6e":"**\u041e\u0442\u044b\u0449\u0435\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 kNN**","6a46d600":"**\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445**","f658cd38":"\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u043c\u043e\u0434\u0435\u043b\u044c \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u0430 \u0443\u0433\u0430\u0434\u0430\u0442\u044c 4 \u0440\u0430\u0437\u0430 \u0438\u0437 5, \u0438\u043b\u0438 \u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0432\u043d\u0430 \u043e\u043a\u043e\u043b\u043e 85%.","46fa231b":"**\u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445**","d09cbba7":"\u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f NearestCentroid","3b51b3ac":"**\u041e\u0446\u0435\u043d\u0438\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435**","f3c29553":"**\u0420\u0430\u0437\u043e\u0431\u044a\u0435\u043c \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e (\u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e) \u0432\u044b\u0431\u043e\u0440\u043a\u0438**"}}