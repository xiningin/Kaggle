{"cell_type":{"dea4d702":"code","5e642de3":"code","d582ef16":"code","46a428d3":"code","9bd80d65":"code","3705d712":"code","72f2b016":"code","2b91af65":"code","a5305282":"code","7b88d4d5":"code","9d969e1d":"code","4cf56586":"code","022aa994":"code","83cd5152":"code","0aaccd8e":"code","4fc72e64":"code","8a2d8d9f":"code","0e1dd8fb":"code","e9199409":"code","c1e4f003":"code","7fbd42d2":"code","57b24a14":"code","84c2c880":"code","f1eb96c1":"code","53a13fac":"code","e58a5d91":"code","992a6f4a":"code","a7e169d2":"code","9cae35cf":"code","c3deff45":"code","24332135":"code","41c00239":"code","b6dea3d7":"code","6d5d6ce6":"code","2a4ebe60":"code","a20f15d6":"code","d0c57507":"code","b8469bd7":"code","9036ace4":"code","da6f0f4c":"code","76acc74a":"code","cb68b79c":"code","34d5279e":"code","2ef5e16c":"code","f927245e":"code","211b4680":"code","34a9bcc8":"code","d1356c48":"code","fd2d4a13":"code","ff6ebc37":"markdown","9384e04b":"markdown","8ee317a4":"markdown","34af1db8":"markdown","1e3f0a27":"markdown","2a3a3ffe":"markdown","a08cd1c0":"markdown","2b6f60ee":"markdown","0c213165":"markdown","18303f61":"markdown","38553eb5":"markdown","e17f50c6":"markdown","91f57105":"markdown","7de0e440":"markdown","94cd30d5":"markdown","aa9f34b3":"markdown","96ac51dd":"markdown","dd2d0214":"markdown","4e00d217":"markdown","c24568e9":"markdown","45b7270f":"markdown","72529d88":"markdown","a977cebf":"markdown","951f7dab":"markdown","55fda730":"markdown","9d4c3845":"markdown","3e2fad33":"markdown","3c06a774":"markdown","3bf6a7c2":"markdown","0765ff37":"markdown","7089eea4":"markdown","5f119b65":"markdown","48fa41c9":"markdown","020a749d":"markdown","82c394ce":"markdown","423f4731":"markdown","816bddc4":"markdown","0231d555":"markdown","a14a6bda":"markdown"},"source":{"dea4d702":"# upload your kaggle API token (you can get that from your account)\nfrom google.colab import files\nuploaded = files.upload()","5e642de3":"# Importing libraries\n%matplotlib inline\n\n# Run this to create a kaggle environment\n# !pip install -q kaggle\n# !mkdir -p ~\/.kaggle\n# !cp kaggle.json ~\/.kaggle\/\n# !chmod 600 \/root\/.kaggle\/kaggle.json\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","d582ef16":"# Get data from kaggle \nimport zipfile\n# Download data\n!kaggle datasets download -d imdevskp\/corona-virus-report\/\n!kaggle datasets download -d sudalairajkumar\/novel-corona-virus-2019-dataset\/\n!kaggle datasets download -d imdevskp\/covid19-corona-virus-india-dataset\n!kaggle datasets download -d sudalairajkumar\/covid19-in-italy\/\n# UnZip data\nzip_ref = zipfile.ZipFile(\"corona-virus-report.zip\", 'r')\nzip_ref.extractall()\nzip_ref = zipfile.ZipFile(\"novel-corona-virus-2019-dataset.zip\", 'r')\nzip_ref.extractall()\nzip_ref = zipfile.ZipFile(\"covid19-corona-virus-india-dataset.zip\", 'r')\nzip_ref.extractall()\nzip_ref = zipfile.ZipFile(\"covid19-in-italy.zip\", 'r')\nzip_ref.extractall()\nzip_ref.close()","46a428d3":"!ls","9bd80d65":"# load the data\ndata = pd.read_csv(\"covid_19_clean_complete.csv\")","3705d712":"data.head(5)","72f2b016":"# Replacing all the NaN values with Country\/Region\ndata[\"Province\/State\"].fillna(data[\"Country\/Region\"], inplace=True)","2b91af65":"# Get the latest data of every country\/city\ndata['Date'] = pd.to_datetime(data['Date'])\ndata['Date'] = data['Date'].dt.strftime('%m\/%d\/%Y')\ndata1 = data.sort_values('Date')\ndata = data1.loc[data1[\"Date\"]==max(data1['Date'])][['Date',\"Lat\",\"Long\",'Province\/State',\"Country\/Region\",\"Confirmed\",\"Deaths\",\"Recovered\"]]\n\n# lets also add active cases in every country\ndata[\"Active\"] = data[\"Confirmed\"] - data[\"Deaths\"] - data[\"Recovered\"]","a5305282":"data.head(5)","7b88d4d5":"\nlatest_data_aggregated = data.groupby([\"Date\",\"Province\/State\",\"Country\/Region\"],as_index=False)[\"Date\",\"Lat\",\"Long\",\"Province\/State\",\"Country\/Region\",\"Confirmed\",\"Deaths\",\"Recovered\",\"Active\"].sum()","9d969e1d":"us_data = pd.read_csv(\"covid_19_data.csv\")\n# Get the latest data of every country\/city\nus_data['Last Update'] = pd.to_datetime(us_data['Last Update'])\nus_data['Last Update'] = us_data['Last Update'].dt.strftime('%m\/%d\/%Y')\nus_data1 = us_data.sort_values('Last Update')\nus_data = us_data1.loc[us_data1[\"Last Update\"]==max(us_data1['Last Update'])][['Last Update','Province\/State',\"Country\/Region\",\"Confirmed\",\"Deaths\",\"Recovered\"]]\n\n# lets also add active cases in every country\nus_data[\"Active\"] = us_data[\"Confirmed\"] - us_data[\"Deaths\"] - us_data[\"Recovered\"]","4cf56586":"us_data = us_data[us_data[\"Country\/Region\"]==\"US\"]","022aa994":"from geopy.geocoders import Nominatim\ngeolocator = Nominatim(user_agent=\"us lat and long\")\nlat, long_data = [],[]\nd={}\nfor i in list(us_data['Province\/State']):\n  location = geolocator.geocode(i)\n  try:\n    d[i] = {\"lat\":location.latitude,\"long\":location.longitude}\n  except:\n    d[i] = {\"lat\":0,\"long\":0}\nus_data[\"Lat\"] = 0\nus_data[\"Long\"] = 0\nus_data1[\"Lat\"] = 0\nus_data1[\"Long\"] = 0\n\nfor i in list(us_data['Province\/State']):\n  us_data.loc[us_data['Province\/State'] == i, 'Lat'] = d[i][\"lat\"]\n  us_data.loc[us_data['Province\/State'] == i, 'Long'] = d[i][\"long\"]\n  us_data1.loc[us_data1['Province\/State'] == i, 'Lat'] = d[i][\"lat\"]\n  us_data1.loc[us_data1['Province\/State'] == i, 'Long'] = d[i][\"long\"]","83cd5152":"import folium\nlatitude = 39.91666667\nlongitude = 116.383333\nworld_map = folium.Map(location=[latitude, longitude], zoom_start=3.5,tiles='cartodbpositron')\nfor lat, lon, Confirmed,Deaths,Recovered,Active,name in zip(us_data['Lat'], us_data['Long'], us_data['Confirmed'],us_data['Deaths'],us_data['Recovered'],us_data['Active'], us_data['Province\/State']):\n    folium.CircleMarker([lat, lon],\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(Confirmed) + '<br>'\n                                '<strong>Active Cases<\/strong>: ' + str(Active) +'<br>'\n                                '<strong>Recovered Cases<\/strong>: ' + str(Recovered) +'<br>'\n                                '<strong>Deaths Cases<\/strong>: ' + str(Deaths) +'<br>'),\n                        color='red',\n                        \n                        fill_color='#e84545',\n                        radius=10).add_to(world_map)\nworld_map","0aaccd8e":"china_data = latest_data_aggregated[latest_data_aggregated[\"Country\/Region\"]==\"China\"]","4fc72e64":"import folium\nlatitude = 39.91666667\nlongitude = 116.383333\nworld_map = folium.Map(location=[latitude, longitude], zoom_start=3.5,tiles='cartodbpositron')\nfor lat, lon, Confirmed,Deaths,Recovered,Active,name in zip(china_data['Lat'], china_data['Long'], china_data['Confirmed'],china_data['Deaths'],china_data['Recovered'],china_data['Active'], china_data['Province\/State']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(Confirmed) + '<br>'\n                                '<strong>Active Cases<\/strong>: ' + str(Active) +'<br>'\n                                '<strong>Recovered Cases<\/strong>: ' + str(Recovered) +'<br>'\n                                '<strong>Deaths Cases<\/strong>: ' + str(Deaths) +'<br>'),\n                        color='red',\n                        \n                        fill_color='#e84545',\n                        fill_opacity=0.7 ).add_to(world_map)\nworld_map","8a2d8d9f":"# Get the latest data of every country\/city\nitaly_Data = pd.read_csv(\"covid19_italy_region.csv\")\nitaly_Data['Date'] = pd.to_datetime(italy_Data['Date'])\nitaly_Data['Date'] = italy_Data['Date'].dt.strftime('%m\/%d\/%Y')\nitaly_Data1 = italy_Data.sort_values('Date')\nitaly_Data = italy_Data1.loc[italy_Data1[\"Date\"]==max(italy_Data1['Date'])][['Date',\"Latitude\",\"Longitude\",'RegionName',\"TotalPositiveCases\",\"Deaths\",\"Recovered\"]]\n\n# lets also add active cases in every country\nitaly_Data[\"Active\"] = italy_Data[\"TotalPositiveCases\"] - italy_Data[\"Deaths\"] - italy_Data[\"Recovered\"]\nitaly_Data.rename(columns={'Latitude':'Lat'}, inplace=True)\nitaly_Data.rename(columns={'Longitude':'Long'}, inplace=True)\nitaly_Data.rename(columns={'TotalPositiveCases':'Confirmed'}, inplace=True)","0e1dd8fb":"import folium\nlatitude = 39.91666667\nlongitude = 116.383333\nworld_map = folium.Map(location=[latitude, longitude], zoom_start=3.5,tiles='cartodbpositron')\nfor lat, lon, Confirmed,Deaths,Recovered,Active,name in zip(italy_Data['Lat'], italy_Data['Long'], italy_Data['Confirmed'],italy_Data['Deaths'],italy_Data['Recovered'],italy_Data['Active'], italy_Data['RegionName']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(Confirmed) + '<br>'\n                                '<strong>Active Cases<\/strong>: ' + str(Active) +'<br>'\n                                '<strong>Recovered Cases<\/strong>: ' + str(Recovered) +'<br>'\n                                '<strong>Deaths Cases<\/strong>: ' + str(Deaths) +'<br>'),\n                        color='red',\n                        \n                        fill_color='#e84545' ).add_to(world_map)\nworld_map","e9199409":"india_data = pd.read_csv(\"complete.csv\")\n# Get the latest data of every country\/city\nindia_data['Date'] = pd.to_datetime(india_data['Date'])\nindia_data['Date'] = india_data['Date'].dt.strftime('%m\/%d\/%Y')\nindia_data1 = india_data.sort_values('Date')\nindia_data = india_data1.loc[india_data1[\"Date\"]==max(india_data1['Date'])][['Date','Name of State \/ UT',\"Total Confirmed cases (Indian National)\",\"Total Confirmed cases ( Foreign National )\",\"Cured\/Discharged\/Migrated\",\"Latitude\",\"Longitude\",\"Death\"]]\n\n# lets also add active cases in every country\nindia_data[\"Confirmed\"] = india_data[\"Total Confirmed cases (Indian National)\"] + india_data[\"Total Confirmed cases ( Foreign National )\"]\nindia_data[\"Active\"] = india_data[\"Confirmed\"] - india_data[\"Death\"] - india_data['Cured\/Discharged\/Migrated']\nindia_data1[\"Confirmed\"] = india_data1[\"Total Confirmed cases (Indian National)\"] + india_data1[\"Total Confirmed cases ( Foreign National )\"]\nindia_data1[\"Active\"] = india_data1[\"Confirmed\"] - india_data1[\"Death\"] - india_data1['Cured\/Discharged\/Migrated']\n\nindia_data.rename(columns={'Latitude':'Lat','Longitude':\"Long\",'Cured\/Discharged\/Migrated':'Cured'}, inplace=True)","c1e4f003":"import folium\nlatitude = 39.91666667\nlongitude = 116.383333\nworld_map = folium.Map(location=[latitude, longitude], min_zoom=4, max_zoom=6, zoom_start=4 ,tiles='cartodbpositron')\nfor lat, lon, Confirmed,Deaths,Recovered,Active,name in zip(india_data['Lat'], india_data['Long'], india_data[\"Confirmed\"],india_data['Death'],india_data['Cured'],india_data['Active'], india_data['Name of State \/ UT']):\n    folium.CircleMarker([lat, lon],\n                        fill='#e84545',\n                        tooltip = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(Confirmed) + '<br>'\n                                '<strong>Active Cases<\/strong>: ' + str(Active) +'<br>'\n                                '<strong>Recovered Cases<\/strong>: ' + str(Recovered) +'<br>'\n                                '<strong>Deaths Cases<\/strong>: ' + str(Deaths) +'<br>'),\n                        color='red',\n                        radius = 10).add_to(world_map)\nworld_map","7fbd42d2":"fig = px.scatter_geo(us_data2, lat=\"Lat\", lon=\"Long\", color='Confirmed', size='Confirmed', projection=\"natural earth\",\n                     hover_name=\"Province\/State\", scope='world', animation_frame=\"Last Update\", \n                     range_color=[0, max(us_data2['Confirmed'])])\nfig.show()","57b24a14":"data1[\"Active\"] = data1[\"Confirmed\"] - data1[\"Deaths\"] - data1[\"Recovered\"]\nlatest_data_aggregated = data1.groupby([\"Date\",\"Province\/State\",\"Country\/Region\"],as_index=False)[\"Date\",\"Lat\",\"Long\",\"Province\/State\",\"Country\/Region\",\"Confirmed\",\"Deaths\",\"Recovered\",\"Active\"].sum()\nchina_data = latest_data_aggregated[latest_data_aggregated[\"Country\/Region\"]==\"China\"]","84c2c880":"fig = px.scatter_geo(china_data, lat=\"Lat\", lon=\"Long\", color='Province\/State', size='Confirmed', projection=\"natural earth\",\n                     hover_name=\"Province\/State\", scope='asia', animation_frame=\"Date\", center={'lat':20, 'lon':78}, \n                     range_color=[0, max(china_data['Confirmed'])])\nfig.show()","f1eb96c1":"# lets also add active cases in every country\nitaly_Data1[\"Active\"] = italy_Data1[\"TotalPositiveCases\"] - italy_Data1[\"Deaths\"] - italy_Data1[\"Recovered\"]","53a13fac":"fig = px.scatter_geo(italy_Data1, lat=\"Latitude\", lon=\"Longitude\", color='RegionName', size='TotalPositiveCases', projection=\"natural earth\",\n                     hover_name=\"RegionName\", scope='europe', animation_frame=\"Date\", \n                     range_color=[0, max(italy_Data1['TotalPositiveCases'])])\nfig.show()","e58a5d91":"fig = px.scatter_geo(india_data1, lat=\"Latitude\", lon=\"Longitude\", color='Confirmed', size='Confirmed', projection=\"natural earth\",\n                     hover_name=\"State\/UT\", scope='asia', animation_frame=\"Date\", center={'lat':20, 'lon':78}, \n                     range_color=[0, max(india_data1['Confirmed'])])\nfig.show()","992a6f4a":"latest_data = data1.loc[data1[\"Date\"]==max(data1['Date'])][['Date',\"Lat\",\"Long\",'Province\/State',\"Country\/Region\",\"Confirmed\",\"Deaths\",\"Recovered\"]]\nlatest_data_aggregated = latest_data.groupby([\"Date\",\"Province\/State\",\"Country\/Region\"],as_index=False)[\"Date\",\"Lat\",\"Long\",\"Province\/State\",\"Country\/Region\",\"Confirmed\",\"Deaths\",\"Recovered\"].sum()\nchina_data = latest_data_aggregated[latest_data_aggregated[\"Country\/Region\"]==\"China\"]","a7e169d2":"from plotly.subplots import make_subplots\n\n# Confirmed cases in China\nfig_c = px.bar(china_data.sort_values('Confirmed', ascending=False)[:15][::-1], \n             x='Confirmed', y='Province\/State',text='Confirmed', orientation='h')\n#fig.show()\n\n# Confirmed cases in US\n\nfig_d = px.bar(us_data.sort_values('Confirmed', ascending=False)[:15][::-1], \n             x='Confirmed', y='Province\/State', text='Confirmed', orientation='h')\n#fig.show()\n\n# Confirmed cases in Italy\nfig_r = px.bar(italy_Data.sort_values('Confirmed', ascending=False)[:15][::-1], \n             x='Confirmed', y='RegionName', text='Confirmed', orientation='h')\n#fig.show()\n\n# Confirmed cases in India\nfig_a = px.bar(india_data.sort_values('Confirmed', ascending=False)[:15][::-1], \n             x='Confirmed', y='Name of State \/ UT', text='Confirmed', orientation='h')\n#fig.show()\n\n\nfig = make_subplots(rows=2, cols=2, shared_xaxes=False, vertical_spacing=0.08, horizontal_spacing=0.1,\n                    subplot_titles=(\"Confirmed China\", \"Confirmed us\", \"Confirmed Italy\", \"Confirmed India\"))\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\nfig.add_trace(fig_r['data'][0], row=2, col=1)\nfig.add_trace(fig_a['data'][0], row=2, col=2)\nfig.update_layout(height=800, title_text=\"Top 15\")","9cae35cf":"from plotly.subplots import make_subplots\n\n# Deaths cases in China\nfig_c = px.bar(china_data.sort_values('Deaths', ascending=False)[:15][::-1], \n             x='Deaths', y='Province\/State',text='Deaths', orientation='h')\n#fig.show()\n\n# Deaths cases in US\n\nfig_d = px.bar(us_data.sort_values('Deaths', ascending=False)[:15][::-1], \n             x='Deaths', y='Province\/State', text='Deaths', orientation='h')\n#fig.show()\n\n# Deaths cases in Italy\nfig_r = px.bar(italy_Data.sort_values('Deaths', ascending=False)[:15][::-1], \n             x='Deaths', y='RegionName', text='Deaths', orientation='h')\n#fig.show()\n\n# Deaths cases in India\nfig_a = px.bar(india_data.sort_values('Death', ascending=False)[:15][::-1], \n             x='Death', y='Name of State \/ UT', text='Death', orientation='h')\n#fig.show()\n\n\nfig = make_subplots(rows=2, cols=2, shared_xaxes=False, vertical_spacing=0.08, horizontal_spacing=0.1,\n                    subplot_titles=(\"Deaths China\", \"Deaths us\", \"Deaths Italy\", \"Deaths India\"))\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\nfig.add_trace(fig_r['data'][0], row=2, col=1)\nfig.add_trace(fig_a['data'][0], row=2, col=2)\nfig.update_layout(height=800, title_text=\"Top 15\")","c3deff45":"from plotly.subplots import make_subplots\n\n# Recovered cases in China\nfig_c = px.bar(china_data.sort_values('Recovered', ascending=False)[:15][::-1], \n             x='Recovered', y='Province\/State',text='Recovered', orientation='h')\n#fig.show()\n\n# Recovered cases in US\n\nfig_d = px.bar(us_data.sort_values('Recovered', ascending=False)[:15][::-1], \n             x='Recovered', y='Province\/State', text='Recovered', orientation='h')\n#fig.show()\n\n# Recovered cases in Italy\nfig_r = px.bar(italy_Data.sort_values('Recovered', ascending=False)[:15][::-1], \n             x='Recovered', y='RegionName', text='Recovered', orientation='h')\n#fig.show()\n\n# Deaths cases in India\nfig_a = px.bar(india_data.sort_values('Cured', ascending=False)[:15][::-1], \n             x='Cured', y='Name of State \/ UT', text='Cured', orientation='h')\n#fig.show()\n\n\nfig = make_subplots(rows=2, cols=2, shared_xaxes=False, vertical_spacing=0.08, horizontal_spacing=0.1,\n                    subplot_titles=(\"Recovered China\", \"Recovered us\", \"Recovered Italy\", \"Recovered India\"))\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\nfig.add_trace(fig_r['data'][0], row=2, col=1)\nfig.add_trace(fig_a['data'][0], row=2, col=2)\nfig.update_layout(height=800, title_text=\"Top 15\")","24332135":"latest_data_aggregated = data1.groupby([\"Date\",\"Country\/Region\"],as_index=False)[\"Date\",\"Lat\",\"Long\",\"Province\/State\",\"Country\/Region\",\"Confirmed\",\"Deaths\",\"Recovered\",\"Active\"].sum()\nchina_data = latest_data_aggregated[latest_data_aggregated[\"Country\/Region\"]==\"China\"]\nus_data = latest_data_aggregated[latest_data_aggregated[\"Country\/Region\"]==\"US\"]\nitaly_Data = latest_data_aggregated[latest_data_aggregated[\"Country\/Region\"]==\"Italy\"]\nindia_data = latest_data_aggregated[latest_data_aggregated[\"Country\/Region\"]==\"India\"]\n","41c00239":"# confirmed cases china\nfig_c = px.line(china_data, x=\"Date\", y=\"Confirmed\")\n\n# confirmed cases us\nfig_d = px.line(us_data, x=\"Date\", y=\"Confirmed\")\n\n# confirmed cases italy\nfig_r = px.line(italy_Data, x=\"Date\", y=\"Confirmed\")\n\n# confirmed cases india\nfig_a = px.line(india_data, x=\"Date\", y=\"Confirmed\")\n\nfig = make_subplots(rows=2, cols=2, shared_xaxes=False, vertical_spacing=0.2, horizontal_spacing=0.1,\n                    subplot_titles=(\"confirmed cases china\", \"confirmed cases us\", \"confirmed cases italy\", \"confirmed cases india\"))\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\nfig.add_trace(fig_r['data'][0], row=2, col=1)\nfig.add_trace(fig_a['data'][0], row=2, col=2)\nfig.update_layout(height=800, title_text=\"Worwide data over time\")","b6dea3d7":"# confirmed cases china\nfig_c = px.line(china_data, x=\"Date\", y=\"Confirmed\", log_y=True, title=\"confirmed cases china\")\nfig_c.show()\n# confirmed cases us\nfig_d = px.line(us_data, x=\"Date\", y=\"Confirmed\", log_y=True, title=\"confirmed cases us\")\nfig_d.show()\n# confirmed cases italy\nfig_r = px.line(italy_Data, x=\"Date\", y=\"Confirmed\", log_y=True, title=\"confirmed cases italy\")\nfig_r.show()\n# confirmed cases india\nfig_a = px.line(india_data, x=\"Date\", y=\"Confirmed\", log_y=True, title=\"confirmed cases india\")\nfig_a.show()","6d5d6ce6":"# confirmed cases china\nfig_c = px.bar(china_data, x=\"Date\", y=\"Confirmed\", barmode='group',\n             height=400)\n\n# Dconfirmed cases US\nfig_d = px.bar(us_data, x=\"Date\", y=\"Deaths\", barmode='group',\n             height=400)\n\n# confirmed cases Italy\nfig_r = px.bar(italy_Data, x=\"Date\", y=\"Recovered\", barmode='group',\n             height=400)\n\n# confirmed cases India\nfig_a = px.bar(india_data, x=\"Date\", y=\"Active\", barmode='group',\n             height=400)\n\nfig = make_subplots(rows=2, cols=2, shared_xaxes=False, vertical_spacing=0.2, horizontal_spacing=0.1,\n                    subplot_titles=(\"Confirmed cases china\", \"Confirmed cases US\", \"Confirmed cases Italy\", \"Confirmed cases India\"))\nfig.add_trace(fig_c['data'][0], row=1, col=1)\nfig.add_trace(fig_d['data'][0], row=1, col=2)\nfig.add_trace(fig_r['data'][0], row=2, col=1)\nfig.add_trace(fig_a['data'][0], row=2, col=2)\nfig.update_layout(height=800, title_text=\"country data over time\",plot_bgcolor='rgb(250, 242, 242)')","2a4ebe60":"china_data","a20f15d6":"data = data1[data1['Date'] == max(data1['Date'])]\nlatest_data_aggregated = data.groupby([\"Date\",\"Province\/State\",\"Country\/Region\"],as_index=False)[\"Date\",\"Lat\",\"Long\",\"Province\/State\",\"Country\/Region\",\"Confirmed\",\"Deaths\",\"Recovered\",\"Active\"].sum()\nflg = latest_data_aggregated[latest_data_aggregated[\"Country\/Region\"]==\"China\"]\n\nflg['mortalityRate'] = round((flg['Deaths']\/flg['Confirmed'])*100, 2)\ntemp = flg[flg['Confirmed']>100]\ntemp = temp.sort_values('mortalityRate', ascending=False)\n\nfig = px.bar(temp.sort_values(by=\"mortalityRate\", ascending=False)[:10][::-1],\n             x = 'mortalityRate', y = 'Province\/State', \n             title='Deaths per 100 Confirmed Cases', text='mortalityRate', height=800, orientation='h',\n             color_discrete_sequence=['darkred']\n            )\nfig.show()","d0c57507":"data = us_data1[us_data1['Last Update'] == max(us_data1['Last Update'])]\nlatest_data_aggregated = data.groupby([\"Last Update\",\"Province\/State\",\"Country\/Region\"],as_index=False)[\"Last Update\",\"Lat\",\"Long\",\"Province\/State\",\"Country\/Region\",\"Confirmed\",\"Deaths\",\"Recovered\"].sum()\nflg = latest_data_aggregated[latest_data_aggregated[\"Country\/Region\"]==\"US\"]\n\nflg['mortalityRate'] = round((flg['Deaths']\/flg['Confirmed'])*100, 2)\ntemp = flg[flg['Confirmed']>100]\ntemp = temp.sort_values('mortalityRate', ascending=False)\n\nfig = px.bar(temp.sort_values(by=\"mortalityRate\", ascending=False)[:10][::-1],\n             x = 'mortalityRate', y = 'Province\/State', \n             title='Deaths per 100 Confirmed Cases', text='mortalityRate', height=800, orientation='h',\n             color_discrete_sequence=['darkred']\n            )\nfig.show()","b8469bd7":"data = italy_Data1[italy_Data1['Date'] == max(italy_Data1['Date'])]\nflg = data.groupby([\"Date\",\"RegionName\"],as_index=False)[\"Date\",\"RegionName\",\"TotalPositiveCases\",\"Deaths\",\"Recovered\"].sum()\n\nflg['mortalityRate'] = round((flg['Deaths']\/flg['TotalPositiveCases'])*100, 2)\ntemp = flg[flg['TotalPositiveCases']>100]\ntemp = temp.sort_values('mortalityRate', ascending=False)\n\nfig = px.bar(temp.sort_values(by=\"mortalityRate\", ascending=False)[:10][::-1],\n             x = 'mortalityRate', y = 'RegionName', \n             title='Deaths per 100 Confirmed Cases', text='mortalityRate', height=800, orientation='h',\n             color_discrete_sequence=['darkred']\n            )\nfig.show()","9036ace4":"data = india_data1[india_data1['Date'] == max(india_data1['Date'])]\nflg = data.groupby([\"Date\",\"State\/UT\"],as_index=False)[\"Date\",\"State\/UT\",\"Confirmed\",\"Death\",\"Cured\/Discharged\/Migrated\"].sum()\n\nflg['mortalityRate'] = round((flg['Death']\/flg['Confirmed'])*100, 2)\ntemp = flg[flg['Confirmed']>100]\ntemp = temp.sort_values('mortalityRate', ascending=False)\n\nfig = px.bar(temp.sort_values(by=\"mortalityRate\", ascending=False)[:10][::-1],\n             x = 'mortalityRate', y = 'State\/UT', \n             title='Deaths per 100 Confirmed Cases', text='mortalityRate', height=800, orientation='h',\n             color_discrete_sequence=['darkred']\n            )\nfig.show()","da6f0f4c":"import plotly.graph_objs as go\n\nchina_data = data1[data1['Date'] == max(data1['Date'])]\nchina_data = china_data[china_data[\"Country\/Region\"]==\"China\"]\ntemp = china_data.sort_values('Confirmed', ascending=False)[:15][::-1]\nfig = go.Figure(data=[\n    go.Bar(name='Active', y=temp['Province\/State'], x=temp['Active'], orientation='h'),\n    go.Bar(name='Deaths', y=temp['Province\/State'], x=temp['Deaths'], orientation='h'),\n    go.Bar(name='Recovered', y=temp['Province\/State'], x=temp['Recovered'], orientation='h')\n])\n# Change the bar mode\nfig.update_layout(barmode='stack', height=900)\nfig.update_traces(textposition='outside')\nfig.show()","76acc74a":"import plotly.graph_objs as go\n\nus_data = us_data1[us_data1['Last Update'] == max(us_data1['Last Update'])]\nus_data = us_data[us_data[\"Country\/Region\"]==\"US\"]\ntemp = us_data.sort_values('Confirmed', ascending=False)[:15][::-1]\nfig = go.Figure(data=[\n    go.Bar(name='Active', y=temp['Province\/State'], x=temp['Confirmed'], orientation='h'),\n    go.Bar(name='Deaths', y=temp['Province\/State'], x=temp['Deaths'], orientation='h'),\n    go.Bar(name='Recovered', y=temp['Province\/State'], x=temp['Recovered'], orientation='h')\n])\n# Change the bar mode\nfig.update_layout(barmode='stack', height=900)\nfig.update_traces(textposition='outside')\nfig.show()","cb68b79c":"import plotly.graph_objs as go\n\nitaly_Data = italy_Data1[italy_Data1['Date'] == max(italy_Data1['Date'])]\ntemp = italy_Data.sort_values('TotalPositiveCases', ascending=False)[:15][::-1]\nfig = go.Figure(data=[\n    go.Bar(name='Active', y=temp['RegionName'], x=temp['TotalPositiveCases'], orientation='h'),\n    go.Bar(name='Deaths', y=temp['RegionName'], x=temp['Deaths'], orientation='h'),\n    go.Bar(name='Recovered', y=temp['RegionName'], x=temp['Recovered'], orientation='h')\n])\n# Change the bar mode\nfig.update_layout(barmode='stack', height=900)\nfig.update_traces(textposition='outside')\nfig.show()","34d5279e":"import plotly.graph_objs as go\n\nindia_data = india_data1[india_data1['Date'] == max(india_data1['Date'])]\ntemp = india_data.sort_values('Confirmed', ascending=False)[:15][::-1]\nfig = go.Figure(data=[\n    go.Bar(name='Active', y=temp['State\/UT'], x=temp['Confirmed'], orientation='h'),\n    go.Bar(name='Deaths', y=temp['State\/UT'], x=temp['Death'], orientation='h'),\n    go.Bar(name='Recovered', y=temp['State\/UT'], x=temp['Cured\/Discharged\/Migrated'], orientation='h')\n])\n# Change the bar mode\nfig.update_layout(barmode='stack', height=900)\nfig.update_traces(textposition='outside')\nfig.show()","2ef5e16c":"# Confirmed cases in china\nfig = px.pie(china_data, values='Confirmed', names='Province\/State', title='Confirmed cases worldwide')\nfig.show()\n\n# Recovered Cases in china\nfig = px.pie(china_data, values='Recovered', names='Province\/State', title='Recovered cases worldwide')\nfig.show()\n\n# Death cases in china\nfig = px.pie(china_data, values='Deaths', names='Province\/State', title='Death cases worldwide')\nfig.show()","f927245e":"# Confirmed cases in US\nfig = px.pie(us_data, values='Confirmed', names='Province\/State', title='Confirmed cases worldwide')\nfig.show()\n\n# Recovered Cases in US\nfig = px.pie(us_data, values='Recovered', names='Province\/State', title='Recovered cases worldwide')\nfig.show()\n\n# Death cases in US\nfig = px.pie(us_data, values='Deaths', names='Province\/State', title='Death cases worldwide')\nfig.show()","211b4680":"# Confirmed cases in Italy\nfig = px.pie(italy_Data, values='Confirmed', names='RegionName', title='Confirmed cases worldwide')\nfig.show()\n\n# Recovered Cases in Italy\nfig = px.pie(italy_Data, values='Recovered', names='RegionName', title='Recovered cases worldwide')\nfig.show()\n\n# Death cases in Italy\nfig = px.pie(italy_Data, values='Deaths', names='RegionName', title='Death cases worldwide')\nfig.show()","34a9bcc8":"# Confirmed cases in India\nfig = px.pie(india_data, values='Confirmed', names='State\/UT', title='Confirmed cases worldwide')\nfig.show()\n\n# Recovered Cases in India\nfig = px.pie(india_data, values='Cured\/Discharged\/Migrated', names='State\/UT', title='Recovered cases worldwide')\nfig.show()\n\n# Death cases in India\nfig = px.pie(india_data, values='Death', names='State\/UT', title='Death cases worldwide')\nfig.show()","d1356c48":"data = data1[data1['Date'] == max(data1['Date'])]\nchina_data = data[data[\"Country\/Region\"]==\"China\"]\nchina_data = china_data.groupby(\"Date\",as_index=False)[\"Confirmed\",\"Deaths\",\"Recovered\",\"Active\"].sum()\nus_data = data[data[\"Country\/Region\"]==\"US\"]\nitaly_data = data[data[\"Country\/Region\"]==\"Italy\"]\nindia_data = data[data[\"Country\/Region\"]==\"India\"]","fd2d4a13":"plt.pie([china_data[\"Active\"], china_data[\"Deaths\"], china_data[\"Recovered\"]], labels=[\"Active\",\"Deaths\",\"Recovered\"],\n           autopct=None)\nplt.show()","ff6ebc37":"**<h4>Active vs Recovered vs Deaths plot in Italy<\/h4>**","9384e04b":"**<h1>Pie charts of cases country wise<\/h1>**","8ee317a4":"**<h4>Let's see how the confirmed cases grown over time in Italy<\/h4>**\n","34af1db8":"**<h2>Let's see how this is over time in countries<\/h2>**","1e3f0a27":"**<h4>Deats per 100 Confirmed cases in India<\/h4>**","2a3a3ffe":"**<h1>lets see how these are over time country wide with line charts<\/h1>**","a08cd1c0":"**<h4>Deats per 100 Confirmed cases in US<\/h4>**","2b6f60ee":"**<h2>Let's see how it is in country wide with Map<\/h2>**","0c213165":"**<h1>lets see the top 15 states in coutries<\/h1>**","18303f61":"**<h2><b>Step 1 - Getting Data<\/b><\/h2>**","38553eb5":"**<h4>confirmed cases till now in US<\/h4>**","e17f50c6":"**<h4>Active vs Recovered vs Deaths plot in China<\/h4>**","91f57105":"**<h4>Pie charts of cases in India<\/h4>**","7de0e440":"**<h4>Let's see how the confirmed cases grown over time in China<\/h4>**\n","94cd30d5":"**<h1>Deats per 100 Confirmed cases<\/h1>**","aa9f34b3":"**```I'm going to do exploratory data analysis on covid-19 data ```**\n- I'm using data from kaggle and github\n- Global covid-19 data https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report\/\n- Global covid-19 data https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset\/\n- India covid-19 data https:\/\/www.kaggle.com\/imdevskp\/covid19-corona-virus-india-dataset\n- Italy covid-19 data https:\/\/www.kaggle.com\/sudalairajkumar\/covid19-in-italy\/\n- Time series covid-19 data https:\/\/github.com\/CSSEGISandData\/COVID-19.git","96ac51dd":"**<h4>lets see the top 15 states in coutries with confirmed cases<\/h4>**\n\n","dd2d0214":"**<h4>confirmed cases till now in China<\/h4>**","4e00d217":"**<h4>Active vs Recovered vs Deaths plot in India<\/h4>**","c24568e9":"**<h4>Deats per 100 Confirmed cases in Italy<\/h4>**","45b7270f":"**<h4>lets see how confirmed cases over countries line charts<\/h4>**","72529d88":"**<h1>Active vs Death vs Recovered through Pie charts of cases in India<\/h1>**","a977cebf":"**<h4>Deats per 100 Confirmed cases in China<\/h4>**","951f7dab":"**<h1>Bar plots<\/h1>**","55fda730":"**<h4>lets see the top 15 states in coutries with Death cases<\/h4>**\n\n\n\n","9d4c3845":"**<h4>Let's see how the confirmed cases grown over time in India<\/h4>**\n","3e2fad33":"**<h1>Deats per 100 Confirmed cases<\/h1>**","3c06a774":"**<h4>Pie charts of cases in US<\/h4>**","3bf6a7c2":"**<h1>lets see how these are over country wide with line charts(Logarithmic Scale)<\/h1>**","0765ff37":"**<h4>lets see the top 15 states in Recovered with Death cases<\/h4>**\n\n\n\n","7089eea4":"**<h4>Cases till now in India<\/h4>**","5f119b65":"**<h4>Pie charts of cases in china<\/h4>**","48fa41c9":"**<h4>Cases till now in Italy<\/h4>**","020a749d":"**<h4>Let's see how the confirmed cases grown over time in US<\/h4>**\n","82c394ce":"**<h4>Deats per 100 Confirmed cases in china<\/h4>**","423f4731":"**<h4>Pie charts of cases in italy<\/h4>**","816bddc4":"**<h4>Active vs Recovered vs Deaths plot in US<\/h4>**","0231d555":"**<h4>Pie charts of cases in China<\/h4>**","a14a6bda":"**<h1>Active vs Recovered vs Deaths plot<\/h1>**"}}