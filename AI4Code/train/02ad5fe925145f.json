{"cell_type":{"697c8723":"code","ef2cf8e0":"code","62640832":"code","a2964a54":"code","aa25d24e":"code","983b6070":"code","3503f4b9":"code","e116f52e":"code","3e689fb9":"code","0ae4ad8c":"code","32b73c8e":"code","274dc479":"code","d2b25941":"code","9aa094ca":"code","ebc0bb7f":"code","3b3a4669":"code","c92a0609":"code","54d3f049":"code","0cafec21":"code","18b84691":"code","d07b987f":"code","fbf06231":"code","d2fdd8f6":"code","82e72009":"code","bba8bc93":"code","55e3db88":"code","19e376c5":"code","b8ab862c":"code","d5fe952e":"code","c23089d4":"code","fd20798a":"code","5b98b7ee":"code","0910d20c":"code","da824b96":"code","ddf9e4f1":"code","bc8244c2":"code","3580bd5f":"code","b056c551":"code","95c65b4f":"code","8f1fe561":"code","71765f54":"code","e96bf6e0":"code","b56bcaab":"code","e0913256":"code","47379cf9":"code","b1ec6020":"code","edd44ab7":"code","e90ade59":"code","f46a1c11":"code","77869990":"code","0ed96865":"code","8fa8de2b":"code","33066175":"code","360aeba8":"code","081c67af":"code","04a19003":"code","b1d53894":"code","8d0c9fac":"code","bfeb83e9":"code","4ede5163":"code","9c989b0d":"code","3a2d2dfa":"code","57eb6430":"code","0a1bdbe9":"code","f84c918e":"code","92bcb4d5":"code","853549df":"code","4a6042b0":"code","64635f80":"code","18a09451":"code","b3e0da63":"code","1229228c":"code","f15ff373":"code","33349a0b":"code","c7f2d94c":"code","7b95003e":"code","24d5bec7":"code","cd9d92a4":"code","63df8e40":"code","b1a13aac":"code","0132588a":"code","8d7caaa3":"code","3c63fe22":"code","541549fd":"code","57a306ab":"code","6184d4b2":"code","2408cc01":"code","e6acc438":"code","e23bd59d":"markdown","9c7e7510":"markdown","116a6217":"markdown","de6ba79e":"markdown","d97597d3":"markdown","5ead2e92":"markdown","51c67f11":"markdown","dc49b813":"markdown","67abe616":"markdown","3fd76995":"markdown","bc1f6f60":"markdown","faf530d9":"markdown","a6b6e469":"markdown","0e4ce9f8":"markdown","ec75be3a":"markdown","98ebaeb7":"markdown","0bc8c4a4":"markdown","2d94dd4f":"markdown","c1b64ea2":"markdown","630f03f4":"markdown","97581e46":"markdown","46fb635e":"markdown","b4896f3c":"markdown","73edcbe9":"markdown","7008dff5":"markdown","18c6cc97":"markdown","b3df7a39":"markdown","aec464bc":"markdown","86dd88e4":"markdown","9e0869a9":"markdown","78db3187":"markdown","1e76d576":"markdown","38e2de01":"markdown","fa6d99b3":"markdown"},"source":{"697c8723":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom collections import Counter\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ef2cf8e0":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","62640832":"train_df.columns","a2964a54":"train_df.head()","aa25d24e":"train_df.describe()","983b6070":"train_df.info()","3503f4b9":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","e116f52e":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","3e689fb9":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","0ae4ad8c":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","32b73c8e":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","274dc479":"# Plcass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","d2b25941":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","9aa094ca":"# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","ebc0bb7f":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","3b3a4669":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","c92a0609":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","54d3f049":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","0cafec21":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","18b84691":"train_df.head()","d07b987f":"train_df.columns[train_df.isnull().any()]","fbf06231":"train_df.isnull().sum()","d2fdd8f6":"train_df[train_df[\"Embarked\"].isnull()]","82e72009":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","bba8bc93":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","55e3db88":"train_df[train_df[\"Fare\"].isnull()]","19e376c5":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","b8ab862c":"train_df[train_df[\"Fare\"].isnull()]","d5fe952e":"import seaborn as sns\nlist1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","c23089d4":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","fd20798a":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","5b98b7ee":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","0910d20c":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","da824b96":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","ddf9e4f1":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","bc8244c2":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","3580bd5f":"train_df[train_df[\"Age\"].isnull()]","b056c551":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","95c65b4f":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","8f1fe561":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","71765f54":"#train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","e96bf6e0":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","b56bcaab":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","e0913256":"train_df[train_df[\"Age\"].isnull()]","47379cf9":"train_df[\"Name\"].head(10)","b1ec6020":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","edd44ab7":"train_df[\"Title\"].head(10)","e90ade59":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","f46a1c11":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","77869990":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","0ed96865":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","8fa8de2b":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","33066175":"train_df.head()","360aeba8":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","081c67af":"train_df.head()","04a19003":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","b1d53894":"train_df.head()","8d0c9fac":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","bfeb83e9":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","4ede5163":"train_df.head(10)","9c989b0d":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","3a2d2dfa":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","57eb6430":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","0a1bdbe9":"train_df[\"Embarked\"].head()","f84c918e":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","92bcb4d5":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","853549df":"train_df[\"Ticket\"].head(20)","4a6042b0":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","64635f80":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","18a09451":"train_df[\"Ticket\"].head(20)","b3e0da63":"train_df.head()","1229228c":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","f15ff373":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","33349a0b":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","c7f2d94c":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","7b95003e":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","24d5bec7":"train_df.columns","cd9d92a4":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","63df8e40":"train_df_len","b1a13aac":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","0132588a":"test.head()","8d7caaa3":"#train df tamamini al dene.\ntrain = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\n#verilerin olceklenmesi\nfrom sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\n\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","3c63fe22":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","541549fd":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","57a306ab":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","6184d4b2":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","2408cc01":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","e6acc438":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","e23bd59d":"### Hyperparameter Tuning -- Grid Search -- Cross Validation","9c7e7510":"### Simple Logistic Regression","116a6217":"### Sex","de6ba79e":"### Name -- Title","d97597d3":"### Fill Missing: Age Feature","5ead2e92":"### Numerical Variable","51c67f11":"### Embarked -- Sex -- Fare -- Survived","dc49b813":"# Basic Data Analysis","67abe616":"# Univariate Variable Analysis","3fd76995":"# Missing Values","bc1f6f60":"### Family Size","faf530d9":"### Ticket","a6b6e469":"# Variable Description","0e4ce9f8":"### SibSp -- Survived","ec75be3a":"### Embarked -- Sex -- Pclass -- Survived","98ebaeb7":"# Visualization","0bc8c4a4":"### Pclass -- Survived","2d94dd4f":"# Feature Engineering","c1b64ea2":"### Fill Missing Value","630f03f4":"# Train - Test Split","97581e46":"### Pclass","46fb635e":"### Prediction and Submission","b4896f3c":"### Categorical Variable","73edcbe9":"### Pclass -- Survived -- Age","7008dff5":"### Embarked","18c6cc97":"# Load and Check Data","b3df7a39":"### Ensemble Modeling","aec464bc":"### Find Missing Values","86dd88e4":"### Age -- Survived","9e0869a9":"### Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","78db3187":"### Parch -- Survived","1e76d576":"### Drop Passenger ID and Cabin","38e2de01":"### Outlier Detection","fa6d99b3":"# Modeling"}}