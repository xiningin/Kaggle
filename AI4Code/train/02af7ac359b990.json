{"cell_type":{"5679e0c2":"code","03e13184":"code","35bfd1a2":"code","c6af0765":"code","f25964a8":"code","e63d6585":"code","4d54ec22":"code","56399789":"code","2fb15b0b":"code","6857f0b4":"code","2de61a86":"code","c9154838":"code","5da22252":"code","988c198f":"code","b9e01725":"code","c10a194c":"code","a30bc504":"code","7a314258":"code","635a2513":"code","769c5ad8":"code","41d7df9e":"code","f14109e0":"code","aae34481":"code","d55ab75e":"code","08acc918":"code","611c1b8d":"code","3727f9f8":"code","9f695048":"code","d0ae9aa1":"code","ab47e886":"code","bdc2d2f3":"code","56d45a02":"code","82195dbd":"code","ceb24247":"code","4765d51e":"code","f75f310d":"code","17500035":"code","59bea9dd":"code","a59c3a8d":"code","90d82935":"code","97d76017":"code","0352d859":"code","d8d8afe4":"code","5b2ab69b":"code","bfd04e7d":"code","f0501e93":"code","8ffb2e36":"code","27997998":"code","c5c21261":"code","d126c306":"code","8752a932":"code","11127177":"code","7b08b793":"code","086c0e88":"code","c693348b":"code","c328e046":"code","9e1e2a33":"code","1b4b802d":"code","986bef89":"code","8980e77e":"code","f02c6144":"code","54c56ea6":"code","53c9e301":"code","f7459b3f":"code","e856a410":"code","11a8fb2e":"code","67b4cfa2":"code","968f286a":"code","de175a2a":"code","f1c6fd2e":"code","0a8ce5d5":"code","be883f14":"code","ffac81c2":"code","f3768642":"code","f13d8542":"code","8f0fafa2":"code","0e7cecf9":"code","f9aac775":"code","e5b492b5":"code","cee60aee":"code","22371c7b":"code","d2b92f43":"code","2605ab57":"code","fdcc2c5e":"code","2fb2f70b":"code","4a8a050e":"code","204059f9":"code","5d622e8e":"code","dc174052":"code","94457245":"code","e7aec265":"code","a75a341b":"code","9419fde9":"code","31360959":"markdown","f98bc47b":"markdown","77de189c":"markdown","ec4d54f9":"markdown","6f873fb6":"markdown","ea549aec":"markdown","8d5c3616":"markdown","b99eee73":"markdown","ba326a38":"markdown","b3356ee0":"markdown","d962cb99":"markdown","56e3cc1d":"markdown","493f8f49":"markdown","57984021":"markdown","71da59e7":"markdown","06b6e081":"markdown","074e0b82":"markdown","be0ecc44":"markdown","774e1f5c":"markdown","934a8ef2":"markdown","81ce6fc8":"markdown","5469a5c7":"markdown","8876bc3f":"markdown"},"source":{"5679e0c2":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport random\nimport time\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\nfrom scipy.io import loadmat\nimport nibabel as nib\nimport csv\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom scipy.ndimage.filters import convolve\nfrom skimage import data, io, filters\nimport skimage\nfrom skimage.morphology import convex_hull_image, erosion\nfrom IPython import display\nfrom scipy.ndimage import gaussian_filter\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\nimport matplotlib.patches as patches\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN,\\\nLSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D,Reshape, Conv2DTranspose,\\\nLeakyReLU, GaussianNoise, GlobalMaxPooling2D, ReLU, Input, Concatenate\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.datasets import mnist\nimport keras\nfrom keras.models import Model\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","03e13184":"Ring_Main_Path = Path(\"..\/input\/saturn-ring-image-set-nasa-cassini-mission\/Saturn_Ring_Data_NASA\")","35bfd1a2":"JPG_List = list(Ring_Main_Path.glob(r\"*.jpg\"))","c6af0765":"print(\"LEN LIST: \",len(JPG_List))","f25964a8":"JPG_Series = pd.Series(JPG_List,name=\"RING_JPG\").astype(str)","e63d6585":"print(\"LEN SERIES: \",len(JPG_Series))\nprint(\"LEN PATH: \",len(JPG_Series[0]))","4d54ec22":"print(JPG_Series.head(-1))","56399789":"print(\"EXAMPLE PATH:\\n\",JPG_Series[4])\nprint(\"---\"*20)\nprint(\"EXAMPLE PATH:\\n\",JPG_Series[49000])","2fb15b0b":"for step_index, path_count in zip(JPG_Series, range(len(JPG_Series))): \n         for word in step_index:     \n            if word == \"W\":\n                print(step_index)\n                print(\"------\")\n                print(\"WHERE: \",path_count)","6857f0b4":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nSplitting_Params = \"..\/input\/saturn-ring-image-set-nasa-cassini-mission\/Saturn_Ring_Data_NASA\/\"\n\nTarget_Output_W = Example_Path_W.split(Splitting_Params)\nTarget_Output_N = Example_Path_N.split(Splitting_Params)\n\nW_Target = Target_Output_W[1][0]\nN_Target = Target_Output_N[1][0]\n\nprint(\"W: \",W_Target)\nprint(\"---\"*5)\nprint(\"N: \",N_Target)","2de61a86":"plt.style.use(\"Solarize_Light2\")","c9154838":"Example_Path_W = JPG_Series[16]\nExample_Path_N = JPG_Series[15]\n\nfigure,axis = plt.subplots(1,2,figsize=(12,12))\n\nExample_W_IMG = cv2.cvtColor(cv2.imread(Example_Path_W),cv2.COLOR_BGR2RGB)\nExample_N_IMG = cv2.cvtColor(cv2.imread(Example_Path_N),cv2.COLOR_BGR2RGB)\n\naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(\"WEST\")\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(\"NORT\")\naxis[1].imshow(Example_N_IMG)","5da22252":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,2,figsize=(12,12))\n\nExample_W_IMG = cv2.cvtColor(cv2.imread(Example_Path_W),cv2.COLOR_BGR2RGB)\nExample_N_IMG = cv2.cvtColor(cv2.imread(Example_Path_N),cv2.COLOR_BGR2RGB)\n\naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(\"WEST\")\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(\"NORT\")\naxis[1].imshow(Example_N_IMG)","988c198f":"plt.style.use(\"dark_background\")","b9e01725":"Example_Path_W = JPG_Series[16]\nExample_Path_N = JPG_Series[15]\n\nfigure,axis = plt.subplots(1,4,figsize=(15,15))\n\nExample_W_IMG = cv2.cvtColor(cv2.imread(Example_Path_W),cv2.COLOR_BGR2RGB)\nExample_N_IMG = cv2.cvtColor(cv2.imread(Example_Path_N),cv2.COLOR_BGR2RGB)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,220,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,220,255,cv2.THRESH_BINARY)\n\naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(\"WEST\")\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(\"NORT\")\naxis[1].imshow(Example_N_IMG)\n\naxis[2].set_xlabel(Threshold_W.shape)\naxis[2].set_ylabel(Threshold_W.size)\naxis[2].set_title(\"WEST THRESHOLD\")\naxis[2].imshow(Threshold_W)\n\naxis[3].set_xlabel(Threshold_N.shape)\naxis[3].set_ylabel(Threshold_N.size)\naxis[3].set_title(\"NORT THRESHOLD\")\naxis[3].imshow(Threshold_N)","c10a194c":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\nExample_W_IMG = cv2.cvtColor(cv2.imread(Example_Path_W),cv2.COLOR_BGR2RGB)\nExample_N_IMG = cv2.cvtColor(cv2.imread(Example_Path_N),cv2.COLOR_BGR2RGB)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,100,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,100,255,cv2.THRESH_BINARY)\n\naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(\"WEST\")\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(\"NORT\")\naxis[1].imshow(Example_N_IMG)\n\naxis[2].set_xlabel(Threshold_W.shape)\naxis[2].set_ylabel(Threshold_W.size)\naxis[2].set_title(\"WEST THRESHOLD\")\naxis[2].imshow(Threshold_W)\n\naxis[3].set_xlabel(Threshold_N.shape)\naxis[3].set_ylabel(Threshold_N.size)\naxis[3].set_title(\"NORT THRESHOLD\")\naxis[3].imshow(Threshold_N)","a30bc504":"Example_Path_W = JPG_Series[58]\nExample_Path_N = JPG_Series[57]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\nExample_W_IMG = cv2.cvtColor(cv2.imread(Example_Path_W),cv2.COLOR_BGR2RGB)\nExample_N_IMG = cv2.cvtColor(cv2.imread(Example_Path_N),cv2.COLOR_BGR2RGB)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,100,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,100,255,cv2.THRESH_BINARY)\n\naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(\"WEST\")\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(\"NORT\")\naxis[1].imshow(Example_N_IMG)\n\naxis[2].set_xlabel(Threshold_W.shape)\naxis[2].set_ylabel(Threshold_W.size)\naxis[2].set_title(\"WEST THRESHOLD\")\naxis[2].imshow(Threshold_W)\n\naxis[3].set_xlabel(Threshold_N.shape)\naxis[3].set_ylabel(Threshold_N.size)\naxis[3].set_title(\"NORT THRESHOLD\")\naxis[3].imshow(Threshold_N)","7a314258":"Example_Path_W = JPG_Series[58]\nExample_Path_N = JPG_Series[57]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\nExample_W_IMG = cv2.cvtColor(cv2.imread(Example_Path_W),cv2.COLOR_BGR2RGB)\nExample_N_IMG = cv2.cvtColor(cv2.imread(Example_Path_N),cv2.COLOR_BGR2RGB)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,100,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,100,255,cv2.THRESH_BINARY)\n\naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(\"WEST\")\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(\"NORT\")\naxis[1].imshow(Example_N_IMG)\n\naxis[2].set_xlabel(Threshold_W[:,:,0].shape)\naxis[2].set_ylabel(Threshold_W[:,:,0].size)\naxis[2].set_title(\"WEST THRESHOLD\")\naxis[2].imshow(Threshold_W[:,:,0],cmap=\"jet\")\n\naxis[3].set_xlabel(Threshold_N[:,:,0].shape)\naxis[3].set_ylabel(Threshold_N[:,:,0].size)\naxis[3].set_title(\"NORT THRESHOLD\")\naxis[3].imshow(Threshold_N[:,:,0],cmap=\"jet\")","635a2513":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\nExample_W_IMG = cv2.cvtColor(cv2.imread(Example_Path_W),cv2.COLOR_BGR2RGB)\nExample_N_IMG = cv2.cvtColor(cv2.imread(Example_Path_N),cv2.COLOR_BGR2RGB)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,100,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,100,255,cv2.THRESH_BINARY)\n\naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(\"WEST\")\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(\"NORT\")\naxis[1].imshow(Example_N_IMG)\n\naxis[2].set_xlabel(Threshold_W[:,:,0].shape)\naxis[2].set_ylabel(Threshold_W[:,:,0].size)\naxis[2].set_title(\"WEST THRESHOLD\")\naxis[2].imshow(Threshold_W[:,:,0],cmap=\"jet\")\n\naxis[3].set_xlabel(Threshold_N[:,:,0].shape)\naxis[3].set_ylabel(Threshold_N[:,:,0].size)\naxis[3].set_title(\"NORT THRESHOLD\")\naxis[3].imshow(Threshold_N[:,:,0],cmap=\"jet\")","769c5ad8":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\nExample_W_IMG = cv2.cvtColor(cv2.imread(Example_Path_W),cv2.COLOR_BGR2RGB)\nExample_N_IMG = cv2.cvtColor(cv2.imread(Example_Path_N),cv2.COLOR_BGR2RGB)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,100,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,100,255,cv2.THRESH_BINARY)\n\nCanny_W = cv2.Canny(Threshold_W,10,100)\nCanny_N = cv2.Canny(Threshold_N,10,100)\n\naxis[0].set_xlabel(Canny_W.shape)\naxis[0].set_ylabel(Canny_W.size)\naxis[0].set_title(\"WEST CANNY\")\naxis[0].imshow(Canny_W)\n\naxis[1].set_xlabel(Canny_N.shape)\naxis[1].set_ylabel(Canny_N.size)\naxis[1].set_title(\"NORT CANNY\")\naxis[1].imshow(Canny_N)\n\naxis[2].set_xlabel(Threshold_W.shape)\naxis[2].set_ylabel(Threshold_W.size)\naxis[2].set_title(\"WEST THRESHOLD\")\naxis[2].imshow(Threshold_W)\n\naxis[3].set_xlabel(Threshold_N.shape)\naxis[3].set_ylabel(Threshold_N.size)\naxis[3].set_title(\"NORT THRESHOLD\")\naxis[3].imshow(Threshold_N)","41d7df9e":"Example_Path_W = JPG_Series[58]\nExample_Path_N = JPG_Series[57]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\nExample_W_IMG = cv2.cvtColor(cv2.imread(Example_Path_W),cv2.COLOR_BGR2RGB)\nExample_N_IMG = cv2.cvtColor(cv2.imread(Example_Path_N),cv2.COLOR_BGR2RGB)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,100,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,100,255,cv2.THRESH_BINARY)\n\nCanny_W = cv2.Canny(Threshold_W,10,100)\nCanny_N = cv2.Canny(Threshold_N,10,100)\n\naxis[0].set_xlabel(Canny_W.shape)\naxis[0].set_ylabel(Canny_W.size)\naxis[0].set_title(\"WEST CANNY\")\naxis[0].imshow(Canny_W)\n\naxis[1].set_xlabel(Canny_N.shape)\naxis[1].set_ylabel(Canny_N.size)\naxis[1].set_title(\"NORT CANNY\")\naxis[1].imshow(Canny_N)\n\naxis[2].set_xlabel(Threshold_W.shape)\naxis[2].set_ylabel(Threshold_W.size)\naxis[2].set_title(\"WEST THRESHOLD\")\naxis[2].imshow(Threshold_W)\n\naxis[3].set_xlabel(Threshold_N.shape)\naxis[3].set_ylabel(Threshold_N.size)\naxis[3].set_title(\"NORT THRESHOLD\")\naxis[3].imshow(Threshold_N)","f14109e0":"Example_Path_W = JPG_Series[58]\nExample_Path_N = JPG_Series[57]\nfont = cv2.FONT_HERSHEY_COMPLEX\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,100,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,100,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nfor cnt_W in Contours_W:\n  \n    approx_W = cv2.approxPolyDP(cnt_W, 0.09 * cv2.arcLength(cnt_W, True), True)\n \n    cv2.drawContours(Example_W_IMG, [approx_W], 0, (0, 0, 255), 5) \n  \n    n = approx_W.ravel() \n    i = 0\n  \n    for j in n :\n        \n        if (i % 2 == 0):\n            x = n[i]\n            y = n[i + 1]\n  \n            string = str(x) + \" \" + str(y) \n  \n            if (i == 0):\n                cv2.putText(Example_W_IMG, \"+\", (x, y),\n                                font, 0.5, (255, 0, 0)) \n            else:\n                # text on remaining co-ordinates.\n                cv2.putText(Example_W_IMG, string, (x, y), \n                          font, 0.5, (0, 255, 0)) \n        i = i + 1\n        \n        \n\nfor cnt_N in Contours_N:\n  \n    approx_N = cv2.approxPolyDP(cnt_N, 0.09 * cv2.arcLength(cnt_N, True), True)\n \n    cv2.drawContours(Example_N_IMG, [approx_N], 0, (0, 0, 255), 5) \n  \n    n = approx_N.ravel() \n    i = 0\n  \n    for j in n :\n        \n        if (i % 2 == 0):\n            x = n[i]\n            y = n[i + 1]\n  \n            string = str(x) + \" \" + str(y) \n  \n            if (i == 0):\n                cv2.putText(Example_N_IMG, \"+\", (x, y),\n                                font, 0.5, (255, 0, 0)) \n            else:\n                # text on remaining co-ordinates.\n                cv2.putText(Example_N_IMG, string, (x, y), \n                          font, 0.5, (0, 255, 0)) \n        i = i + 1\n\naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(\"WEST\")\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(\"NORT\")\naxis[1].imshow(Example_N_IMG)\n\naxis[2].set_xlabel(Threshold_W.shape)\naxis[2].set_ylabel(Threshold_W.size)\naxis[2].set_title(\"WEST THRESHOLD\")\naxis[2].imshow(Threshold_W)\n\naxis[3].set_xlabel(Threshold_N.shape)\naxis[3].set_ylabel(Threshold_N.size)\naxis[3].set_title(\"NORT THRESHOLD\")\naxis[3].imshow(Threshold_N)","aae34481":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\nfont = cv2.FONT_HERSHEY_COMPLEX\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,100,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,100,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nfor cnt_W in Contours_W:\n  \n    approx_W = cv2.approxPolyDP(cnt_W, 0.09 * cv2.arcLength(cnt_W, True), True)\n \n    cv2.drawContours(Example_W_IMG, [approx_W], 0, (0, 0, 255), 5) \n  \n    n = approx_W.ravel() \n    i = 0\n  \n    for j in n :\n        \n        if (i % 2 == 0):\n            x = n[i]\n            y = n[i + 1]\n  \n            string = str(x) + \" \" + str(y) \n  \n            if (i == 0):\n                cv2.putText(Example_W_IMG, \"+\", (x, y),\n                                font, 0.5, (255, 0, 0)) \n            else:\n                # text on remaining co-ordinates.\n                cv2.putText(Example_W_IMG, string, (x, y), \n                          font, 0.5, (0, 255, 0)) \n        i = i + 1\n        \n        \n\nfor cnt_N in Contours_N:\n  \n    approx_N = cv2.approxPolyDP(cnt_N, 0.09 * cv2.arcLength(cnt_N, True), True)\n \n    cv2.drawContours(Example_N_IMG, [approx_N], 0, (0, 0, 255), 5) \n  \n    n = approx_N.ravel() \n    i = 0\n  \n    for j in n :\n        \n        if (i % 2 == 0):\n            x = n[i]\n            y = n[i + 1]\n  \n            string = str(x) + \" \" + str(y) \n  \n            if (i == 0):\n                cv2.putText(Example_N_IMG, \"+\", (x, y),\n                                font, 0.5, (255, 0, 0)) \n            else:\n                # text on remaining co-ordinates.\n                cv2.putText(Example_N_IMG, string, (x, y), \n                          font, 0.5, (0, 255, 0)) \n        i = i + 1\n\naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(\"WEST\")\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(\"NORT\")\naxis[1].imshow(Example_N_IMG)\n\naxis[2].set_xlabel(Threshold_W.shape)\naxis[2].set_ylabel(Threshold_W.size)\naxis[2].set_title(\"WEST THRESHOLD\")\naxis[2].imshow(Threshold_W)\n\naxis[3].set_xlabel(Threshold_N.shape)\naxis[3].set_ylabel(Threshold_N.size)\naxis[3].set_title(\"NORT THRESHOLD\")\naxis[3].imshow(Threshold_N)","d55ab75e":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\nfont = cv2.FONT_HERSHEY_COMPLEX\nfigure,axis = plt.subplots(1,2,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,100,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,100,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nfor cnt_W in Contours_W:\n  \n    approx_W = cv2.approxPolyDP(cnt_W, 0.0009 * cv2.arcLength(cnt_W, True), True)\n \n    cv2.drawContours(Example_W_IMG, [approx_W], 0, (255, 255, 255), 5) \n  \n    n = approx_W.ravel() \n    i = 0\n  \n    for j in n :\n        \n        if (i % 2 == 0):\n            x = n[i]\n            y = n[i + 1]\n  \n            string = str(x) + \" \" + str(y) \n  \n            if (i == 0):\n                cv2.putText(Example_W_IMG, \"+\", (x, y),\n                                font, 0.3, (255, 0, 0)) \n            else:\n                # text on remaining co-ordinates.\n                cv2.putText(Example_W_IMG, string, (x, y), \n                          font, 0.3, (255, 0, 0)) \n        i = i + 1\n        \n        \n\nfor cnt_N in Contours_N:\n  \n    approx_N = cv2.approxPolyDP(cnt_N, 0.0009 * cv2.arcLength(cnt_N, True), True)\n \n    cv2.drawContours(Example_N_IMG, [approx_N], 0, (255, 255, 255), 5) \n  \n    n = approx_N.ravel() \n    i = 0\n  \n    for j in n :\n        \n        if (i % 2 == 0):\n            x = n[i]\n            y = n[i + 1]\n  \n            string = str(x) + \" \" + str(y) \n  \n            if (i == 0):\n                cv2.putText(Example_N_IMG, \"+\", (x, y),\n                                font, 0.3, (255, 0, 0)) \n            else:\n                # text on remaining co-ordinates.\n                cv2.putText(Example_N_IMG, string, (x, y), \n                          font, 0.3, (0, 255, 0)) \n        i = i + 1\n\naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(\"WEST\")\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(\"NORT\")\naxis[1].imshow(Example_N_IMG)","08acc918":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\nfont = cv2.FONT_HERSHEY_COMPLEX\nfigure,axis = plt.subplots(1,2,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nfor cnt_W in Contours_W:\n  \n    approx_W = cv2.approxPolyDP(cnt_W, 0.009 * cv2.arcLength(cnt_W, True), True)\n \n    cv2.drawContours(Example_W_IMG, [approx_W], 0, (255, 255, 255), 2) \n  \n    n = approx_W.ravel() \n    i = 0\n  \n    for j in n :\n        \n        if (i % 2 == 0):\n            x = n[i]\n            y = n[i + 1]\n  \n            string = str(x) + \" \" + str(y) \n  \n            if (i == 0):\n                cv2.putText(Example_W_IMG, \"+\", (x, y),\n                                font, 0.3, (255, 0, 0)) \n            else:\n                # text on remaining co-ordinates.\n                cv2.putText(Example_W_IMG, string, (x, y), \n                          font, 0.3, (255, 0, 0)) \n        i = i + 1\n        \n        \n\nfor cnt_N in Contours_N:\n  \n    approx_N = cv2.approxPolyDP(cnt_N, 0.009 * cv2.arcLength(cnt_N, True), True)\n \n    cv2.drawContours(Example_N_IMG, [approx_N], 0, (255, 255, 255), 2) \n  \n    n = approx_N.ravel() \n    i = 0\n  \n    for j in n :\n        \n        if (i % 2 == 0):\n            x = n[i]\n            y = n[i + 1]\n  \n            string = str(x) + \" \" + str(y) \n  \n            if (i == 0):\n                cv2.putText(Example_N_IMG, \"+\", (x, y),\n                                font, 0.3, (255, 0, 0)) \n            else:\n                # text on remaining co-ordinates.\n                cv2.putText(Example_N_IMG, string, (x, y), \n                          font, 0.3, (0, 255, 0)) \n        i = i + 1\n\naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(\"WEST\")\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(\"NORT\")\naxis[1].imshow(Example_N_IMG)","611c1b8d":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,2,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nfor cnt_W in Contours_W:\n  \n    approx_W = cv2.approxPolyDP(cnt_W, 0.009 * cv2.arcLength(cnt_W, True), True)\n \n    cv2.drawContours(Example_W_IMG, [approx_W], 0, (255, 255, 255), 2) \n  \n    n_W = approx_W.ravel() \n        \n        \n\nfor cnt_N in Contours_N:\n  \n    approx_N = cv2.approxPolyDP(cnt_N, 0.009 * cv2.arcLength(cnt_N, True), True)\n \n    cv2.drawContours(Example_N_IMG, [approx_N], 0, (255, 255, 255), 2) \n  \n    n_N = approx_N.ravel() \n\naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(n_W)\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(n_N)\naxis[1].imshow(Example_N_IMG)","3727f9f8":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,2,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nfor cnt_W in Contours_W:\n  \n    approx_W = cv2.approxPolyDP(cnt_W, 0.009 * cv2.arcLength(cnt_W, True), True)\n \n    cv2.drawContours(Example_W_IMG, [approx_W], 0, (255, 255, 255), 2) \n  \n    n_W = approx_W.ravel() \n        \n        \n\nfor cnt_N in Contours_N:\n  \n    approx_N = cv2.approxPolyDP(cnt_N, 0.009 * cv2.arcLength(cnt_N, True), True)\n \n    cv2.drawContours(Example_N_IMG, [approx_N], 0, (255, 255, 255), 2) \n  \n    n_N = approx_N.ravel() \n\naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(n_W)\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(n_N)\naxis[1].imshow(Example_N_IMG)","9f695048":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,2,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nfor cnt_W in Contours_W:\n  \n    approx_W = cv2.approxPolyDP(cnt_W, 0.009 * cv2.arcLength(cnt_W, True), True)\n \n    cv2.drawContours(Example_W_IMG, [approx_W], 0, (255, 255, 255), 2) \n  \n    n_W = approx_W.ravel() \n        \n        \n\nfor cnt_N in Contours_N:\n  \n    approx_N = cv2.approxPolyDP(cnt_N, 0.009 * cv2.arcLength(cnt_N, True), True)\n \n    cv2.drawContours(Example_N_IMG, [approx_N], 0, (255, 255, 255), 2) \n  \n    n_N = approx_N.ravel() \n\naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(f\"TYPE APPROX: {type(n_W)}\")\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(f\"TYPE APPROX: {type(n_N)}\")\naxis[1].imshow(Example_N_IMG)","d0ae9aa1":"print(\"APPROX W:\\n\",approx_W,\"\\n\")\nprint(\"APPROX N:\\n\",approx_N,\"\\n\")","ab47e886":"print(\"SHAPE APPROX W:\\n\",approx_W.shape,\"\\n\")\nprint(\"SHAPE APPROX N:\\n\",approx_N.shape,\"\\n\")","bdc2d2f3":"print(\"SHAPE APPROX W:\\n\",approx_W[0].shape,\"\\n\")\nprint(\"SHAPE APPROX N:\\n\",approx_N[0].shape,\"\\n\")","56d45a02":"Ravel_W = approx_W.ravel()\nRavel_N = approx_N.ravel()\n\nprint(\"RAVEL W:\\n\",Ravel_W,\"\\n\")\nprint(\"RAVEL N:\\n\",Ravel_N,\"\\n\")\nprint(\"---\"*10)\nprint(\"SHAPE RAVEL W:\\n\",Ravel_W.shape,\"\\n\")\nprint(\"SHAPE RAVEL N:\\n\",Ravel_N.shape,\"\\n\")","82195dbd":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,2,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_W = np.zeros((Example_W_IMG.shape[0], Example_W_IMG.shape[1]), dtype=np.float32)\nExample_Testing_N = np.zeros((Example_N_IMG.shape[0], Example_N_IMG.shape[1]), dtype=np.float32)\n\nfor cnt_W in Contours_W:\n  \n    approx_W = cv2.approxPolyDP(cnt_W, 0.009 * cv2.arcLength(cnt_W, True), True)\n \n    Draw_W = cv2.drawContours(Example_Testing_W, [approx_W], 0, (255, 255, 255), 2) \n        \n        \n\nfor cnt_N in Contours_N:\n  \n    approx_N = cv2.approxPolyDP(cnt_N, 0.009 * cv2.arcLength(cnt_N, True), True)\n \n    Draw_N = cv2.drawContours(Example_Testing_N, [approx_N], 0, (255, 255, 255), 2) \n\n\naxis[0].set_xlabel(Draw_W.shape)\naxis[0].set_ylabel(Draw_W.size)\naxis[0].set_title(f\"TRANSFORM WEST\")\naxis[0].imshow(Draw_W)\n\naxis[1].set_xlabel(Draw_N.shape)\naxis[1].set_ylabel(Draw_N.size)\naxis[1].set_title(\"TRANSFORM NORT\")\naxis[1].imshow(Draw_N)","ceb24247":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,2,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_W = np.zeros((Example_W_IMG.shape[0], Example_W_IMG.shape[1]), dtype=np.float32)\nExample_Testing_N = np.zeros((Example_N_IMG.shape[0], Example_N_IMG.shape[1]), dtype=np.float32)\n\nfor cnt_W in Contours_W:\n  \n    approx_W = cv2.approxPolyDP(cnt_W, 0.009 * cv2.arcLength(cnt_W, True), True)\n \n    Draw_W = cv2.drawContours(Example_Testing_W, [approx_W], 0, (255, 255, 255), 2) \n        \n        \n\nfor cnt_N in Contours_N:\n  \n    approx_N = cv2.approxPolyDP(cnt_N, 0.009 * cv2.arcLength(cnt_N, True), True)\n \n    Draw_N = cv2.drawContours(Example_Testing_N, [approx_N], 0, (255, 255, 255), 2)\n    \n    \nGaus_W = gaussian_filter(Draw_W,sigma=5,truncate=5*5)\nGaus_N = gaussian_filter(Draw_N,sigma=5,truncate=5*5)\n\naxis[0].set_xlabel(Gaus_W.shape)\naxis[0].set_ylabel(Gaus_W.size)\naxis[0].set_title(f\"GAUS LIGHT WEST\")\naxis[0].imshow(Gaus_W)\n\naxis[1].set_xlabel(Gaus_N.shape)\naxis[1].set_ylabel(Gaus_N.size)\naxis[1].set_title(\"GAUS LIGHT NORT\")\naxis[1].imshow(Gaus_N)","4765d51e":"Example_Path_W = JPG_Series[58]\nExample_Path_N = JPG_Series[57]\n\nfigure,axis = plt.subplots(1,2,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_W = np.zeros((Example_W_IMG.shape[0], Example_W_IMG.shape[1]), dtype=np.float32)\nExample_Testing_N = np.zeros((Example_N_IMG.shape[0], Example_N_IMG.shape[1]), dtype=np.float32)\n\nfor cnt_W in Contours_W:\n  \n    approx_W = cv2.approxPolyDP(cnt_W, 0.009 * cv2.arcLength(cnt_W, True), True)\n \n    Draw_W = cv2.drawContours(Example_Testing_W, [approx_W], 0, (255, 255, 255), 2) \n        \n        \n\nfor cnt_N in Contours_N:\n  \n    approx_N = cv2.approxPolyDP(cnt_N, 0.009 * cv2.arcLength(cnt_N, True), True)\n \n    Draw_N = cv2.drawContours(Example_Testing_N, [approx_N], 0, (255, 255, 255), 2)\n    \n    \nGaus_W = gaussian_filter(Draw_W,sigma=5,truncate=5*5)\nGaus_N = gaussian_filter(Draw_N,sigma=5,truncate=5*5)\n\naxis[0].set_xlabel(Gaus_W.shape)\naxis[0].set_ylabel(Gaus_W.size)\naxis[0].set_title(f\"GAUS LIGHT WEST\")\naxis[0].imshow(Gaus_W)\n\naxis[1].set_xlabel(Gaus_N.shape)\naxis[1].set_ylabel(Gaus_N.size)\naxis[1].set_title(\"GAUS LIGHT NORT\")\naxis[1].imshow(Gaus_N)","f75f310d":"Example_Path_W = JPG_Series[58]\nExample_Path_N = JPG_Series[57]\n\nfigure,axis = plt.subplots(1,2,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_W = cv2.GaussianBlur(Example_W_IMG, (11,11), 0)\nblur_N = cv2.GaussianBlur(Example_N_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_W)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_N)\n\nCanny_W = cv2.Canny(Threshold_W, 50, 100)\nCanny_N = cv2.Canny(Threshold_N, 50, 100)\n\nlightcontours_W, _ = cv2.findContours(Canny_W, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_N, _ = cv2.findContours(Canny_N, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\n\nfor (i, c) in enumerate(lightcontours_W):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    cv2.circle(Example_W_IMG, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    points.append([[int(cX), int(cY)]])\n    \n    \nfor (i, c) in enumerate(lightcontours_N):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    cv2.circle(Example_N_IMG, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    points_N.append([[int(cX), int(cY)]])\n    \n\n    \naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(f\"LIGHT WEST\")\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(\"LIGHT NORT\")\naxis[1].imshow(Example_N_IMG)","17500035":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,2,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_W = cv2.GaussianBlur(Example_W_IMG, (11,11), 0)\nblur_N = cv2.GaussianBlur(Example_N_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_W)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_N)\n\nCanny_W = cv2.Canny(Threshold_W, 50, 100)\nCanny_N = cv2.Canny(Threshold_N, 50, 100)\n\nlightcontours_W, _ = cv2.findContours(Canny_W, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_N, _ = cv2.findContours(Canny_N, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\n\nfor (i, c) in enumerate(lightcontours_W):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    cv2.circle(Example_W_IMG, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    points.append([[int(cX), int(cY)]])\n    \n    \nfor (i, c) in enumerate(lightcontours_N):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    cv2.circle(Example_N_IMG, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    points_N.append([[int(cX), int(cY)]])\n    \n\n    \naxis[0].set_xlabel(Example_W_IMG.shape)\naxis[0].set_ylabel(Example_W_IMG.size)\naxis[0].set_title(f\"LIGHT WEST\")\naxis[0].imshow(Example_W_IMG)\n\naxis[1].set_xlabel(Example_N_IMG.shape)\naxis[1].set_ylabel(Example_N_IMG.size)\naxis[1].set_title(\"LIGHT NORT\")\naxis[1].imshow(Example_N_IMG)","59bea9dd":"print(\"W POINT LEN: \", len(points))\nprint(\"N POINT LEN: \", len(points_N))","a59c3a8d":"print(points)\nprint(points_N)","90d82935":"for (i, c) in enumerate(lightcontours_W):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    cv2.circle(Example_W_IMG, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    points.append([[int(cX), int(cY)]])\n    print(points)\n    \nprint(\"-----\"*10)\n\n\nfor (i, c) in enumerate(lightcontours_N):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    cv2.circle(Example_N_IMG, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    points_N.append([[int(cX), int(cY)]])\n    print(points_N)","97d76017":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,2,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_W = cv2.GaussianBlur(Example_W_IMG, (11,11), 0)\nblur_N = cv2.GaussianBlur(Example_N_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_W)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_N)\n\nCanny_W = cv2.Canny(Threshold_W, 50, 100)\nCanny_N = cv2.Canny(Threshold_N, 50, 100)\n\nlightcontours_W, _ = cv2.findContours(Canny_W, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_N, _ = cv2.findContours(Canny_N, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\n\nfor (i, c) in enumerate(lightcontours_W):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_W = cv2.circle(Example_W_IMG, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(lightcontours_N):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_N = cv2.circle(Example_N_IMG, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n\n    \naxis[0].set_xlabel(Cir_W.shape)\naxis[0].set_ylabel(Cir_W.size)\naxis[0].set_title(f\"LIGHT WEST\")\naxis[0].imshow(Cir_W)\n\naxis[1].set_xlabel(Cir_N.shape)\naxis[1].set_ylabel(Cir_N.size)\naxis[1].set_title(\"LIGHT NORT\")\naxis[1].imshow(Cir_N)","0352d859":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,2,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_W = cv2.GaussianBlur(Example_W_IMG, (11,11), 0)\nblur_N = cv2.GaussianBlur(Example_N_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_W)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_N)\n\nCanny_W = cv2.Canny(Threshold_W, 50, 100)\nCanny_N = cv2.Canny(Threshold_N, 50, 100)\n\nlightcontours_W, _ = cv2.findContours(Canny_W, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_N, _ = cv2.findContours(Canny_N, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_W = np.zeros((Example_W_IMG.shape[0], Example_W_IMG.shape[1]), dtype=np.float32)\nExample_Testing_N = np.zeros((Example_N_IMG.shape[0], Example_N_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(lightcontours_W):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_W = cv2.circle(Example_Testing_W, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(lightcontours_N):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_N = cv2.circle(Example_Testing_N, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_W = gaussian_filter(Cir_W,sigma=5,truncate=5*5)\nGaus_N = gaussian_filter(Cir_N,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_W.shape)\naxis[0].set_ylabel(Gaus_W.size)\naxis[0].set_title(f\"TRANSFORM LIGHT WEST\")\naxis[0].imshow(Gaus_W)\n\naxis[1].set_xlabel(Gaus_N.shape)\naxis[1].set_ylabel(Gaus_N.size)\naxis[1].set_title(\"TRANSFORM LIGHT NORT\")\naxis[1].imshow(Gaus_N)","d8d8afe4":"Example_Path_W = JPG_Series[58]\nExample_Path_N = JPG_Series[57]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_W = cv2.GaussianBlur(Example_W_IMG, (11,11), 0)\nblur_N = cv2.GaussianBlur(Example_N_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_W)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_N)\n\nCanny_W = cv2.Canny(Threshold_W, 50, 100)\nCanny_N = cv2.Canny(Threshold_N, 50, 100)\n\nlightcontours_W, _ = cv2.findContours(Canny_W, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_N, _ = cv2.findContours(Canny_N, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_W = np.zeros((Example_W_IMG.shape[0], Example_W_IMG.shape[1]), dtype=np.float32)\nExample_Testing_N = np.zeros((Example_N_IMG.shape[0], Example_N_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(lightcontours_W):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_W = cv2.circle(Example_Testing_W, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(lightcontours_N):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_N = cv2.circle(Example_Testing_N, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_W = gaussian_filter(Cir_W,sigma=5,truncate=5*5)\nGaus_N = gaussian_filter(Cir_N,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_W.shape)\naxis[0].set_ylabel(Gaus_W.size)\naxis[0].set_title(f\"TRANSFORM LIGHT WEST\")\naxis[0].imshow(Gaus_W)\n\naxis[1].set_xlabel(Gaus_N.shape)\naxis[1].set_ylabel(Gaus_N.size)\naxis[1].set_title(\"TRANSFORM LIGHT NORT\")\naxis[1].imshow(Gaus_N)\n\naxis[2].set_xlabel(Example_W_IMG.shape)\naxis[2].set_ylabel(Example_W_IMG.size)\naxis[2].set_title(f\"WEST\")\naxis[2].imshow(Example_W_IMG)\n\naxis[3].set_xlabel(Example_N_IMG.shape)\naxis[3].set_ylabel(Example_N_IMG.size)\naxis[3].set_title(\"NORT\")\naxis[3].imshow(Example_N_IMG)","5b2ab69b":"Example_Path_W = JPG_Series[58]\nExample_Path_N = JPG_Series[57]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_W = cv2.GaussianBlur(Example_W_IMG, (11,11), 0)\nblur_N = cv2.GaussianBlur(Example_N_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_W)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_N)\n\nCanny_W = cv2.Canny(Threshold_W, 50, 100)\nCanny_N = cv2.Canny(Threshold_N, 50, 100)\n\nlightcontours_W, _ = cv2.findContours(Canny_W, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_N, _ = cv2.findContours(Canny_N, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_W = np.zeros((Example_W_IMG.shape[0], Example_W_IMG.shape[1]), dtype=np.float32)\nExample_Testing_N = np.zeros((Example_N_IMG.shape[0], Example_N_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(lightcontours_W):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_W = cv2.circle(Example_Testing_W, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(lightcontours_N):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_N = cv2.circle(Example_Testing_N, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_W = gaussian_filter(Cir_W,sigma=5,truncate=5*5)\nGaus_N = gaussian_filter(Cir_N,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_W.shape)\naxis[0].set_ylabel(Gaus_W.size)\naxis[0].set_title(f\"TRANSFORM LIGHT WEST\")\naxis[0].imshow(Gaus_W,cmap=\"hot\")\n\naxis[1].set_xlabel(Gaus_N.shape)\naxis[1].set_ylabel(Gaus_N.size)\naxis[1].set_title(\"TRANSFORM LIGHT NORT\")\naxis[1].imshow(Gaus_N,cmap=\"hot\")\n\naxis[2].set_xlabel(Example_W_IMG.shape)\naxis[2].set_ylabel(Example_W_IMG.size)\naxis[2].set_title(f\"WEST\")\naxis[2].imshow(Example_W_IMG)\n\naxis[3].set_xlabel(Example_N_IMG.shape)\naxis[3].set_ylabel(Example_N_IMG.size)\naxis[3].set_title(\"NORT\")\naxis[3].imshow(Example_N_IMG)","bfd04e7d":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\nExample_W_IMG = cv2.imread(Example_Path_W,cv2.IMREAD_GRAYSCALE)\nExample_N_IMG = cv2.imread(Example_Path_N,cv2.IMREAD_GRAYSCALE)\n\n_,Threshold_W = cv2.threshold(Example_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Example_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_W = cv2.GaussianBlur(Example_W_IMG, (11,11), 0)\nblur_N = cv2.GaussianBlur(Example_N_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_W)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_N)\n\nCanny_W = cv2.Canny(Threshold_W, 50, 100)\nCanny_N = cv2.Canny(Threshold_N, 50, 100)\n\nlightcontours_W, _ = cv2.findContours(Canny_W, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_N, _ = cv2.findContours(Canny_N, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_W = np.zeros((Example_W_IMG.shape[0], Example_W_IMG.shape[1]), dtype=np.float32)\nExample_Testing_N = np.zeros((Example_N_IMG.shape[0], Example_N_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(lightcontours_W):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_W = cv2.circle(Example_Testing_W, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(lightcontours_N):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_N = cv2.circle(Example_Testing_N, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_W = gaussian_filter(Cir_W,sigma=5,truncate=5*5)\nGaus_N = gaussian_filter(Cir_N,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_W.shape)\naxis[0].set_ylabel(Gaus_W.size)\naxis[0].set_title(f\"TRANSFORM LIGHT WEST\")\naxis[0].imshow(Gaus_W,cmap=\"hot\")\n\naxis[1].set_xlabel(Gaus_N.shape)\naxis[1].set_ylabel(Gaus_N.size)\naxis[1].set_title(\"TRANSFORM LIGHT NORT\")\naxis[1].imshow(Gaus_N,cmap=\"hot\")\n\naxis[2].set_xlabel(Example_W_IMG.shape)\naxis[2].set_ylabel(Example_W_IMG.size)\naxis[2].set_title(f\"WEST\")\naxis[2].imshow(Example_W_IMG)\n\naxis[3].set_xlabel(Example_N_IMG.shape)\naxis[3].set_ylabel(Example_N_IMG.size)\naxis[3].set_title(\"NORT\")\naxis[3].imshow(Example_N_IMG)","f0501e93":"Example_Path_W = JPG_Series[1]\nExample_Path_N = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\n\nExample_W_IMG = cv2.cvtColor(cv2.imread(Example_Path_W),cv2.COLOR_BGR2RGB)\nExample_N_IMG = cv2.cvtColor(cv2.imread(Example_Path_N),cv2.COLOR_BGR2RGB)\n\nGray_W_IMG = cv2.cvtColor(Example_W_IMG,cv2.COLOR_RGB2GRAY)\nGray_N_IMG = cv2.cvtColor(Example_N_IMG,cv2.COLOR_RGB2GRAY)\n\n_,Threshold_W = cv2.threshold(Gray_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Gray_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_W = cv2.GaussianBlur(Gray_W_IMG, (11,11), 0)\nblur_N = cv2.GaussianBlur(Gray_N_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_W)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_N)\n\nCanny_W = cv2.Canny(Threshold_W, 50, 100)\nCanny_N = cv2.Canny(Threshold_N, 50, 100)\n\nlightcontours_W, _ = cv2.findContours(Canny_W, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_N, _ = cv2.findContours(Canny_N, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_W = np.zeros((Gray_W_IMG.shape[0], Gray_W_IMG.shape[1]), dtype=np.float32)\nExample_Testing_N = np.zeros((Gray_N_IMG.shape[0], Gray_N_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(lightcontours_W):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_W = cv2.circle(Example_Testing_W, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(lightcontours_N):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_N = cv2.circle(Example_Testing_N, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_W = gaussian_filter(Cir_W,sigma=5,truncate=5*5)\nGaus_N = gaussian_filter(Cir_N,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_W.shape)\naxis[0].set_ylabel(Gaus_W.size)\naxis[0].set_title(f\"TRANSFORM LIGHT WEST\")\naxis[0].imshow(Gaus_W,cmap=\"hot\")\n\naxis[1].set_xlabel(Gaus_N.shape)\naxis[1].set_ylabel(Gaus_N.size)\naxis[1].set_title(\"TRANSFORM LIGHT NORT\")\naxis[1].imshow(Gaus_N,cmap=\"hot\")\n\naxis[2].set_xlabel(Example_W_IMG.shape)\naxis[2].set_ylabel(Example_W_IMG.size)\naxis[2].set_title(f\"WEST\")\naxis[2].imshow(Example_W_IMG)\n\naxis[3].set_xlabel(Example_N_IMG.shape)\naxis[3].set_ylabel(Example_N_IMG.size)\naxis[3].set_title(\"NORT\")\naxis[3].imshow(Example_N_IMG)","8ffb2e36":"Example_Path_W = JPG_Series[241]\nExample_Path_N = JPG_Series[240]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\n\nExample_W_IMG = cv2.cvtColor(cv2.imread(Example_Path_W),cv2.COLOR_BGR2RGB)\nExample_N_IMG = cv2.cvtColor(cv2.imread(Example_Path_N),cv2.COLOR_BGR2RGB)\n\nGray_W_IMG = cv2.cvtColor(Example_W_IMG,cv2.COLOR_RGB2GRAY)\nGray_N_IMG = cv2.cvtColor(Example_N_IMG,cv2.COLOR_RGB2GRAY)\n\n_,Threshold_W = cv2.threshold(Gray_W_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_N = cv2.threshold(Gray_N_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_W, _= cv2.findContours(Threshold_W, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_N, _= cv2.findContours(Threshold_N, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_W = cv2.GaussianBlur(Gray_W_IMG, (11,11), 0)\nblur_N = cv2.GaussianBlur(Gray_N_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_W)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_N)\n\nCanny_W = cv2.Canny(Threshold_W, 50, 100)\nCanny_N = cv2.Canny(Threshold_N, 50, 100)\n\nlightcontours_W, _ = cv2.findContours(Canny_W, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_N, _ = cv2.findContours(Canny_N, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_W = np.zeros((Gray_W_IMG.shape[0], Gray_W_IMG.shape[1]), dtype=np.float32)\nExample_Testing_N = np.zeros((Gray_N_IMG.shape[0], Gray_N_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(lightcontours_W):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_W = cv2.circle(Example_Testing_W, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(lightcontours_N):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_N = cv2.circle(Example_Testing_N, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_W = gaussian_filter(Cir_W,sigma=5,truncate=5*5)\nGaus_N = gaussian_filter(Cir_N,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_W.shape)\naxis[0].set_ylabel(Gaus_W.size)\naxis[0].set_title(f\"TRANSFORM LIGHT WEST\")\naxis[0].imshow(Gaus_W,cmap=\"hot\")\n\naxis[1].set_xlabel(Gaus_N.shape)\naxis[1].set_ylabel(Gaus_N.size)\naxis[1].set_title(\"TRANSFORM LIGHT NORT\")\naxis[1].imshow(Gaus_N,cmap=\"hot\")\n\naxis[2].set_xlabel(Example_W_IMG.shape)\naxis[2].set_ylabel(Example_W_IMG.size)\naxis[2].set_title(f\"WEST\")\naxis[2].imshow(Example_W_IMG)\n\naxis[3].set_xlabel(Example_N_IMG.shape)\naxis[3].set_ylabel(Example_N_IMG.size)\naxis[3].set_title(\"NORT\")\naxis[3].imshow(Example_N_IMG)","27997998":"Example_Path_I = JPG_Series[24]\nExample_Path_II = JPG_Series[20]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\n\nExample_I_IMG = cv2.cvtColor(cv2.imread(Example_Path_I),cv2.COLOR_BGR2RGB)\nExample_II_IMG = cv2.cvtColor(cv2.imread(Example_Path_II),cv2.COLOR_BGR2RGB)\n\nGray_I_IMG = cv2.cvtColor(Example_I_IMG,cv2.COLOR_RGB2GRAY)\nGray_II_IMG = cv2.cvtColor(Example_II_IMG,cv2.COLOR_RGB2GRAY)\n\n_,Threshold_I = cv2.threshold(Gray_I_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_II = cv2.threshold(Gray_II_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_I, _= cv2.findContours(Threshold_I, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_II, _= cv2.findContours(Threshold_II, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_I = cv2.GaussianBlur(Gray_I_IMG, (11,11), 0)\nblur_II = cv2.GaussianBlur(Gray_II_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_I)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_II)\n\nCanny_I = cv2.Canny(Threshold_I, 50, 100)\nCanny_II = cv2.Canny(Threshold_II, 50, 100)\n\nlightcontours_I, _ = cv2.findContours(Canny_I, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_II, _ = cv2.findContours(Canny_II, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_I = np.zeros((Gray_I_IMG.shape[0], Gray_I_IMG.shape[1]), dtype=np.float32)\nExample_Testing_II = np.zeros((Gray_II_IMG.shape[0], Gray_II_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(Contours_I):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_I = cv2.circle(Example_Testing_I, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(Contours_II):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_II = cv2.circle(Example_Testing_II, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_I = gaussian_filter(Cir_I,sigma=5,truncate=5*5)\nGaus_II = gaussian_filter(Cir_II,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_I.shape)\naxis[0].set_ylabel(Gaus_I.size)\naxis[0].set_title(f\"TRANSFORM LIGHT RANDOM\")\naxis[0].imshow(Gaus_I,cmap=\"hot\")\n\naxis[1].set_xlabel(Gaus_II.shape)\naxis[1].set_ylabel(Gaus_II.size)\naxis[1].set_title(\"TRANSFORM LIGHT RANDOM\")\naxis[1].imshow(Gaus_II,cmap=\"hot\")\n\naxis[2].set_xlabel(Example_I_IMG.shape)\naxis[2].set_ylabel(Example_I_IMG.size)\naxis[2].set_title(f\"RANDOM\")\naxis[2].imshow(Example_I_IMG)\n\naxis[3].set_xlabel(Example_II_IMG.shape)\naxis[3].set_ylabel(Example_II_IMG.size)\naxis[3].set_title(\"RANDOM\")\naxis[3].imshow(Example_II_IMG)","c5c21261":"Example_Path_I = JPG_Series[20000]\nExample_Path_II = JPG_Series[10000]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\n\nExample_I_IMG = cv2.cvtColor(cv2.imread(Example_Path_I),cv2.COLOR_BGR2RGB)\nExample_II_IMG = cv2.cvtColor(cv2.imread(Example_Path_II),cv2.COLOR_BGR2RGB)\n\nGray_I_IMG = cv2.cvtColor(Example_I_IMG,cv2.COLOR_RGB2GRAY)\nGray_II_IMG = cv2.cvtColor(Example_II_IMG,cv2.COLOR_RGB2GRAY)\n\n_,Threshold_I = cv2.threshold(Gray_I_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_II = cv2.threshold(Gray_II_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_I, _= cv2.findContours(Threshold_I, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_II, _= cv2.findContours(Threshold_II, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_I = cv2.GaussianBlur(Gray_I_IMG, (11,11), 0)\nblur_II = cv2.GaussianBlur(Gray_II_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_I)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_II)\n\nCanny_I = cv2.Canny(Threshold_I, 50, 100)\nCanny_II = cv2.Canny(Threshold_II, 50, 100)\n\nlightcontours_I, _ = cv2.findContours(Canny_I, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_II, _ = cv2.findContours(Canny_II, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_I = np.zeros((Gray_I_IMG.shape[0], Gray_I_IMG.shape[1]), dtype=np.float32)\nExample_Testing_II = np.zeros((Gray_II_IMG.shape[0], Gray_II_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(Contours_I):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_I = cv2.circle(Example_Testing_I, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(Contours_II):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_II = cv2.circle(Example_Testing_II, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_I = gaussian_filter(Cir_I,sigma=5,truncate=5*5)\nGaus_II = gaussian_filter(Cir_II,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_I.shape)\naxis[0].set_ylabel(Gaus_I.size)\naxis[0].set_title(f\"TRANSFORM LIGHT RANDOM\")\naxis[0].imshow(Gaus_I,cmap=\"hot\")\n\naxis[1].set_xlabel(Gaus_II.shape)\naxis[1].set_ylabel(Gaus_II.size)\naxis[1].set_title(\"TRANSFORM LIGHT RANDOM\")\naxis[1].imshow(Gaus_II,cmap=\"hot\")\n\naxis[2].set_xlabel(Example_I_IMG.shape)\naxis[2].set_ylabel(Example_I_IMG.size)\naxis[2].set_title(f\"RANDOM\")\naxis[2].imshow(Example_I_IMG)\n\naxis[3].set_xlabel(Example_II_IMG.shape)\naxis[3].set_ylabel(Example_II_IMG.size)\naxis[3].set_title(\"RANDOM\")\naxis[3].imshow(Example_II_IMG)","d126c306":"Example_Path_I = JPG_Series[25000]\nExample_Path_II = JPG_Series[15000]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\n\nExample_I_IMG = cv2.cvtColor(cv2.imread(Example_Path_I),cv2.COLOR_BGR2RGB)\nExample_II_IMG = cv2.cvtColor(cv2.imread(Example_Path_II),cv2.COLOR_BGR2RGB)\n\nGray_I_IMG = cv2.cvtColor(Example_I_IMG,cv2.COLOR_RGB2GRAY)\nGray_II_IMG = cv2.cvtColor(Example_II_IMG,cv2.COLOR_RGB2GRAY)\n\n_,Threshold_I = cv2.threshold(Gray_I_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_II = cv2.threshold(Gray_II_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_I, _= cv2.findContours(Threshold_I, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_II, _= cv2.findContours(Threshold_II, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_I = cv2.GaussianBlur(Gray_I_IMG, (11,11), 0)\nblur_II = cv2.GaussianBlur(Gray_II_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_I)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_II)\n\nCanny_I = cv2.Canny(Threshold_I, 50, 100)\nCanny_II = cv2.Canny(Threshold_II, 50, 100)\n\nlightcontours_I, _ = cv2.findContours(Canny_I, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_II, _ = cv2.findContours(Canny_II, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_I = np.zeros((Gray_I_IMG.shape[0], Gray_I_IMG.shape[1]), dtype=np.float32)\nExample_Testing_II = np.zeros((Gray_II_IMG.shape[0], Gray_II_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(Contours_I):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_I = cv2.circle(Example_Testing_I, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(Contours_II):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_II = cv2.circle(Example_Testing_II, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_I = gaussian_filter(Cir_I,sigma=7,truncate=7*5)\nGaus_II = gaussian_filter(Cir_II,sigma=7,truncate=7*5)\n    \naxis[0].set_xlabel(Gaus_I.shape)\naxis[0].set_ylabel(Gaus_I.size)\naxis[0].set_title(f\"TRANSFORM LIGHT RANDOM\")\naxis[0].imshow(Gaus_I,cmap=\"hot\")\n\naxis[1].set_xlabel(Gaus_II.shape)\naxis[1].set_ylabel(Gaus_II.size)\naxis[1].set_title(\"TRANSFORM LIGHT RANDOM\")\naxis[1].imshow(Gaus_II,cmap=\"hot\")\n\naxis[2].set_xlabel(Example_I_IMG.shape)\naxis[2].set_ylabel(Example_I_IMG.size)\naxis[2].set_title(f\"RANDOM\")\naxis[2].imshow(Example_I_IMG)\n\naxis[3].set_xlabel(Example_II_IMG.shape)\naxis[3].set_ylabel(Example_II_IMG.size)\naxis[3].set_title(\"RANDOM\")\naxis[3].imshow(Example_II_IMG)","8752a932":"Example_Path_I = JPG_Series[25]\nExample_Path_II = JPG_Series[15]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\n\nExample_I_IMG = cv2.cvtColor(cv2.imread(Example_Path_I),cv2.COLOR_BGR2RGB)\nExample_II_IMG = cv2.cvtColor(cv2.imread(Example_Path_II),cv2.COLOR_BGR2RGB)\n\nGray_I_IMG = cv2.cvtColor(Example_I_IMG,cv2.COLOR_RGB2GRAY)\nGray_II_IMG = cv2.cvtColor(Example_II_IMG,cv2.COLOR_RGB2GRAY)\n\n_,Threshold_I = cv2.threshold(Gray_I_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_II = cv2.threshold(Gray_II_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_I, _= cv2.findContours(Threshold_I, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_II, _= cv2.findContours(Threshold_II, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_I = cv2.GaussianBlur(Gray_I_IMG, (11,11), 0)\nblur_II = cv2.GaussianBlur(Gray_II_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_I)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_II)\n\nCanny_I = cv2.Canny(Threshold_I, 50, 100)\nCanny_II = cv2.Canny(Threshold_II, 50, 100)\n\nlightcontours_I, _ = cv2.findContours(Canny_I, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_II, _ = cv2.findContours(Canny_II, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_I = np.zeros((Gray_I_IMG.shape[0], Gray_I_IMG.shape[1]), dtype=np.float32)\nExample_Testing_II = np.zeros((Gray_II_IMG.shape[0], Gray_II_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(Contours_I):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_I = cv2.circle(Example_Testing_I, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(Contours_II):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_II = cv2.circle(Example_Testing_II, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_I = gaussian_filter(Cir_I,sigma=5,truncate=5*5)\nGaus_II = gaussian_filter(Cir_II,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_I.shape)\naxis[0].set_ylabel(Gaus_I.size)\naxis[0].set_title(f\"TRANSFORM LIGHT RANDOM\")\naxis[0].imshow(Gaus_I,cmap=\"hot\")\n\naxis[1].set_xlabel(Gaus_II.shape)\naxis[1].set_ylabel(Gaus_II.size)\naxis[1].set_title(\"TRANSFORM LIGHT RANDOM\")\naxis[1].imshow(Gaus_II,cmap=\"hot\")\n\naxis[2].set_xlabel(Example_I_IMG.shape)\naxis[2].set_ylabel(Example_I_IMG.size)\naxis[2].set_title(f\"RANDOM\")\naxis[2].imshow(Example_I_IMG)\n\naxis[3].set_xlabel(Example_II_IMG.shape)\naxis[3].set_ylabel(Example_II_IMG.size)\naxis[3].set_title(\"RANDOM\")\naxis[3].imshow(Example_II_IMG)","11127177":"Example_Path_I = JPG_Series[1111]\nExample_Path_II = JPG_Series[11]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\n\nExample_I_IMG = cv2.cvtColor(cv2.imread(Example_Path_I),cv2.COLOR_BGR2RGB)\nExample_II_IMG = cv2.cvtColor(cv2.imread(Example_Path_II),cv2.COLOR_BGR2RGB)\n\nGray_I_IMG = cv2.cvtColor(Example_I_IMG,cv2.COLOR_RGB2GRAY)\nGray_II_IMG = cv2.cvtColor(Example_II_IMG,cv2.COLOR_RGB2GRAY)\n\n_,Threshold_I = cv2.threshold(Gray_I_IMG,110,255,cv2.THRESH_BINARY)\n_,Threshold_II = cv2.threshold(Gray_II_IMG,110,255,cv2.THRESH_BINARY)\n\nContours_I, _= cv2.findContours(Threshold_I, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_II, _= cv2.findContours(Threshold_II, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_I = cv2.GaussianBlur(Gray_I_IMG, (11,11), 0)\nblur_II = cv2.GaussianBlur(Gray_II_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_I)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_II)\n\nCanny_I = cv2.Canny(Threshold_I, 50, 100)\nCanny_II = cv2.Canny(Threshold_II, 50, 100)\n\nlightcontours_I, _ = cv2.findContours(Canny_I, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_II, _ = cv2.findContours(Canny_II, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_I = np.zeros((Gray_I_IMG.shape[0], Gray_I_IMG.shape[1]), dtype=np.float32)\nExample_Testing_II = np.zeros((Gray_II_IMG.shape[0], Gray_II_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(Contours_I):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_I = cv2.circle(Example_Testing_I, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(Contours_II):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_II = cv2.circle(Example_Testing_II, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_I = gaussian_filter(Cir_I,sigma=5,truncate=5*5)\nGaus_II = gaussian_filter(Cir_II,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_I.shape)\naxis[0].set_ylabel(Gaus_I.size)\naxis[0].set_title(f\"TRANSFORM LIGHT RANDOM\")\naxis[0].imshow(Gaus_I,cmap=\"hot\")\n\naxis[1].set_xlabel(Gaus_II.shape)\naxis[1].set_ylabel(Gaus_II.size)\naxis[1].set_title(\"TRANSFORM LIGHT RANDOM\")\naxis[1].imshow(Gaus_II,cmap=\"hot\")\n\naxis[2].set_xlabel(Example_I_IMG.shape)\naxis[2].set_ylabel(Example_I_IMG.size)\naxis[2].set_title(f\"RANDOM\")\naxis[2].imshow(Example_I_IMG)\n\naxis[3].set_xlabel(Example_II_IMG.shape)\naxis[3].set_ylabel(Example_II_IMG.size)\naxis[3].set_title(\"RANDOM\")\naxis[3].imshow(Example_II_IMG)","7b08b793":"Example_Path_I = JPG_Series[2587]\nExample_Path_II = JPG_Series[2]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\n\nExample_I_IMG = cv2.cvtColor(cv2.imread(Example_Path_I),cv2.COLOR_BGR2RGB)\nExample_II_IMG = cv2.cvtColor(cv2.imread(Example_Path_II),cv2.COLOR_BGR2RGB)\n\nGray_I_IMG = cv2.cvtColor(Example_I_IMG,cv2.COLOR_RGB2GRAY)\nGray_II_IMG = cv2.cvtColor(Example_II_IMG,cv2.COLOR_RGB2GRAY)\n\n_,Threshold_I = cv2.threshold(Gray_I_IMG,110,255,cv2.THRESH_TOZERO_INV)\n_,Threshold_II = cv2.threshold(Gray_II_IMG,110,255,cv2.THRESH_TOZERO_INV)\n\nContours_I, _= cv2.findContours(Threshold_I, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_II, _= cv2.findContours(Threshold_II, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_I = cv2.GaussianBlur(Gray_I_IMG, (11,11), 0)\nblur_II = cv2.GaussianBlur(Gray_II_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_I)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_II)\n\nCanny_I = cv2.Canny(Threshold_I, 50, 100)\nCanny_II = cv2.Canny(Threshold_II, 50, 100)\n\nlightcontours_I, _ = cv2.findContours(Canny_I, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_II, _ = cv2.findContours(Canny_II, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_I = np.zeros((Gray_I_IMG.shape[0], Gray_I_IMG.shape[1]), dtype=np.float32)\nExample_Testing_II = np.zeros((Gray_II_IMG.shape[0], Gray_II_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(Contours_I):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_I = cv2.circle(Example_Testing_I, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(Contours_II):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_II = cv2.circle(Example_Testing_II, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_I = gaussian_filter(Cir_I,sigma=5,truncate=5*5)\nGaus_II = gaussian_filter(Cir_II,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_I.shape)\naxis[0].set_ylabel(Gaus_I.size)\naxis[0].set_title(f\"TRANSFORM LIGHT RANDOM\")\naxis[0].imshow(Gaus_I,cmap=\"hot\")\n\naxis[1].set_xlabel(Gaus_II.shape)\naxis[1].set_ylabel(Gaus_II.size)\naxis[1].set_title(\"TRANSFORM LIGHT RANDOM\")\naxis[1].imshow(Gaus_II,cmap=\"hot\")\n\naxis[2].set_xlabel(Example_I_IMG.shape)\naxis[2].set_ylabel(Example_I_IMG.size)\naxis[2].set_title(f\"RANDOM\")\naxis[2].imshow(Example_I_IMG)\n\naxis[3].set_xlabel(Example_II_IMG.shape)\naxis[3].set_ylabel(Example_II_IMG.size)\naxis[3].set_title(\"RANDOM\")\naxis[3].imshow(Example_II_IMG)","086c0e88":"Example_Path_I = JPG_Series[3451]\nExample_Path_II = JPG_Series[44]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\n\nExample_I_IMG = cv2.cvtColor(cv2.imread(Example_Path_I),cv2.COLOR_BGR2RGB)\nExample_II_IMG = cv2.cvtColor(cv2.imread(Example_Path_II),cv2.COLOR_BGR2RGB)\n\nGray_I_IMG = cv2.cvtColor(Example_I_IMG,cv2.COLOR_RGB2GRAY)\nGray_II_IMG = cv2.cvtColor(Example_II_IMG,cv2.COLOR_RGB2GRAY)\n\n_,Threshold_I = cv2.threshold(Gray_I_IMG,110,255,cv2.THRESH_TOZERO_INV)\n_,Threshold_II = cv2.threshold(Gray_II_IMG,110,255,cv2.THRESH_TOZERO_INV)\n\nContours_I, _= cv2.findContours(Threshold_I, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_II, _= cv2.findContours(Threshold_II, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_I = cv2.GaussianBlur(Gray_I_IMG, (11,11), 0)\nblur_II = cv2.GaussianBlur(Gray_II_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_I)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_II)\n\nCanny_I = cv2.Canny(Threshold_I, 50, 100)\nCanny_II = cv2.Canny(Threshold_II, 50, 100)\n\nlightcontours_I, _ = cv2.findContours(Canny_I, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_II, _ = cv2.findContours(Canny_II, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_I = np.zeros((Gray_I_IMG.shape[0], Gray_I_IMG.shape[1]), dtype=np.float32)\nExample_Testing_II = np.zeros((Gray_II_IMG.shape[0], Gray_II_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(Contours_I):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_I = cv2.circle(Example_Testing_I, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(Contours_II):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_II = cv2.circle(Example_Testing_II, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_I = gaussian_filter(Cir_I,sigma=5,truncate=5*5)\nGaus_II = gaussian_filter(Cir_II,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_I.shape)\naxis[0].set_ylabel(Gaus_I.size)\naxis[0].set_title(f\"TRANSFORM LIGHT RANDOM\")\naxis[0].imshow(Gaus_I,cmap=\"hot\")\n\naxis[1].set_xlabel(Gaus_II.shape)\naxis[1].set_ylabel(Gaus_II.size)\naxis[1].set_title(\"TRANSFORM LIGHT RANDOM\")\naxis[1].imshow(Gaus_II,cmap=\"hot\")\n\naxis[2].set_xlabel(Example_I_IMG.shape)\naxis[2].set_ylabel(Example_I_IMG.size)\naxis[2].set_title(f\"RANDOM\")\naxis[2].imshow(Example_I_IMG)\n\naxis[3].set_xlabel(Example_II_IMG.shape)\naxis[3].set_ylabel(Example_II_IMG.size)\naxis[3].set_title(\"RANDOM\")\naxis[3].imshow(Example_II_IMG)","c693348b":"Example_Path_I = JPG_Series[4511]\nExample_Path_II = JPG_Series[567]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\n\nExample_I_IMG = cv2.cvtColor(cv2.imread(Example_Path_I),cv2.COLOR_BGR2RGB)\nExample_II_IMG = cv2.cvtColor(cv2.imread(Example_Path_II),cv2.COLOR_BGR2RGB)\n\nGray_I_IMG = cv2.cvtColor(Example_I_IMG,cv2.COLOR_RGB2GRAY)\nGray_II_IMG = cv2.cvtColor(Example_II_IMG,cv2.COLOR_RGB2GRAY)\n\n_,Threshold_I = cv2.threshold(Gray_I_IMG,110,255,cv2.THRESH_TOZERO_INV)\n_,Threshold_II = cv2.threshold(Gray_II_IMG,110,255,cv2.THRESH_TOZERO_INV)\n\nContours_I, _= cv2.findContours(Threshold_I, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_II, _= cv2.findContours(Threshold_II, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_I = cv2.GaussianBlur(Gray_I_IMG, (11,11), 0)\nblur_II = cv2.GaussianBlur(Gray_II_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_I)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_II)\n\nCanny_I = cv2.Canny(Threshold_I, 50, 100)\nCanny_II = cv2.Canny(Threshold_II, 50, 100)\n\nlightcontours_I, _ = cv2.findContours(Canny_I, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_II, _ = cv2.findContours(Canny_II, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_I = np.zeros((Gray_I_IMG.shape[0], Gray_I_IMG.shape[1]), dtype=np.float32)\nExample_Testing_II = np.zeros((Gray_II_IMG.shape[0], Gray_II_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(Contours_I):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_I = cv2.circle(Example_Testing_I, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(Contours_II):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_II = cv2.circle(Example_Testing_II, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_I = gaussian_filter(Cir_I,sigma=5,truncate=5*5)\nGaus_II = gaussian_filter(Cir_II,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_I.shape)\naxis[0].set_ylabel(Gaus_I.size)\naxis[0].set_title(f\"TRANSFORM LIGHT RANDOM\")\naxis[0].imshow(Gaus_I,cmap=\"hot\")\n\naxis[1].set_xlabel(Gaus_II.shape)\naxis[1].set_ylabel(Gaus_II.size)\naxis[1].set_title(\"TRANSFORM LIGHT RANDOM\")\naxis[1].imshow(Gaus_II,cmap=\"hot\")\n\naxis[2].set_xlabel(Example_I_IMG.shape)\naxis[2].set_ylabel(Example_I_IMG.size)\naxis[2].set_title(f\"RANDOM\")\naxis[2].imshow(Example_I_IMG)\n\naxis[3].set_xlabel(Example_II_IMG.shape)\naxis[3].set_ylabel(Example_II_IMG.size)\naxis[3].set_title(\"RANDOM\")\naxis[3].imshow(Example_II_IMG)","c328e046":"Example_Path_I = JPG_Series[889]\nExample_Path_II = JPG_Series[8]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\n\nExample_I_IMG = cv2.cvtColor(cv2.imread(Example_Path_I),cv2.COLOR_BGR2RGB)\nExample_II_IMG = cv2.cvtColor(cv2.imread(Example_Path_II),cv2.COLOR_BGR2RGB)\n\nGray_I_IMG = cv2.cvtColor(Example_I_IMG,cv2.COLOR_RGB2GRAY)\nGray_II_IMG = cv2.cvtColor(Example_II_IMG,cv2.COLOR_RGB2GRAY)\n\n_,Threshold_I = cv2.threshold(Gray_I_IMG,110,255,cv2.THRESH_TOZERO_INV)\n_,Threshold_II = cv2.threshold(Gray_II_IMG,110,255,cv2.THRESH_TOZERO_INV)\n\nContours_I, _= cv2.findContours(Threshold_I, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_II, _= cv2.findContours(Threshold_II, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_I = cv2.GaussianBlur(Gray_I_IMG, (11,11), 0)\nblur_II = cv2.GaussianBlur(Gray_II_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_I)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_II)\n\nCanny_I = cv2.Canny(Threshold_I, 50, 100)\nCanny_II = cv2.Canny(Threshold_II, 50, 100)\n\nlightcontours_I, _ = cv2.findContours(Canny_I, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_II, _ = cv2.findContours(Canny_II, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_I = np.zeros((Gray_I_IMG.shape[0], Gray_I_IMG.shape[1]), dtype=np.float32)\nExample_Testing_II = np.zeros((Gray_II_IMG.shape[0], Gray_II_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(Contours_I):\n    points = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_I = cv2.circle(Example_Testing_I, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(Contours_II):\n    points_N = []\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_II = cv2.circle(Example_Testing_II, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_I = gaussian_filter(Cir_I,sigma=5,truncate=5*5)\nGaus_II = gaussian_filter(Cir_II,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_I.shape)\naxis[0].set_ylabel(Gaus_I.size)\naxis[0].set_title(f\"TRANSFORM LIGHT RANDOM\")\naxis[0].imshow(Gaus_I,cmap=\"hot\")\n\naxis[1].set_xlabel(Gaus_II.shape)\naxis[1].set_ylabel(Gaus_II.size)\naxis[1].set_title(\"TRANSFORM LIGHT RANDOM\")\naxis[1].imshow(Gaus_II,cmap=\"hot\")\n\naxis[2].set_xlabel(Example_I_IMG.shape)\naxis[2].set_ylabel(Example_I_IMG.size)\naxis[2].set_title(f\"RANDOM\")\naxis[2].imshow(Example_I_IMG)\n\naxis[3].set_xlabel(Example_II_IMG.shape)\naxis[3].set_ylabel(Example_II_IMG.size)\naxis[3].set_title(\"RANDOM\")\naxis[3].imshow(Example_II_IMG)","9e1e2a33":"Example_Path_I = JPG_Series[5555]\nExample_Path_II = JPG_Series[3]\n\nfigure,axis = plt.subplots(1,4,figsize=(20,20))\n\n\nExample_I_IMG = cv2.cvtColor(cv2.imread(Example_Path_I),cv2.COLOR_BGR2RGB)\nExample_II_IMG = cv2.cvtColor(cv2.imread(Example_Path_II),cv2.COLOR_BGR2RGB)\n\nGray_I_IMG = cv2.cvtColor(Example_I_IMG,cv2.COLOR_RGB2GRAY)\nGray_II_IMG = cv2.cvtColor(Example_II_IMG,cv2.COLOR_RGB2GRAY)\n\n_,Threshold_I = cv2.threshold(Gray_I_IMG,110,255,cv2.THRESH_TOZERO_INV)\n_,Threshold_II = cv2.threshold(Gray_II_IMG,110,255,cv2.THRESH_TOZERO_INV)\n\nContours_I, _= cv2.findContours(Threshold_I, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nContours_II, _= cv2.findContours(Threshold_II, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nblur_I = cv2.GaussianBlur(Gray_I_IMG, (11,11), 0)\nblur_II = cv2.GaussianBlur(Gray_II_IMG, (11,11), 0)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_I)\n(minVal_N, maxVal_N, minLoc_N, maxLoc_N) = cv2.minMaxLoc(blur_II)\n\nCanny_I = cv2.Canny(Threshold_I, 50, 100)\nCanny_II = cv2.Canny(Threshold_II, 50, 100)\n\nlightcontours_I, _ = cv2.findContours(Canny_I, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nlightcontours_II, _ = cv2.findContours(Canny_II, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nExample_Testing_I = np.zeros((Gray_I_IMG.shape[0], Gray_I_IMG.shape[1]), dtype=np.float32)\nExample_Testing_II = np.zeros((Gray_II_IMG.shape[0], Gray_II_IMG.shape[1]), dtype=np.float32)\n\nfor (i, c) in enumerate(Contours_I):\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_I = cv2.circle(Example_Testing_I, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \n    \nfor (i, c) in enumerate(Contours_II):\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Cir_II = cv2.circle(Example_Testing_II, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n    \nGaus_I = gaussian_filter(Cir_I,sigma=5,truncate=5*5)\nGaus_II = gaussian_filter(Cir_II,sigma=5,truncate=5*5)\n    \naxis[0].set_xlabel(Gaus_I.shape)\naxis[0].set_ylabel(Gaus_I.size)\naxis[0].set_title(f\"TRANSFORM LIGHT RANDOM\")\naxis[0].imshow(Gaus_I,cmap=\"hot\")\n\naxis[1].set_xlabel(Gaus_II.shape)\naxis[1].set_ylabel(Gaus_II.size)\naxis[1].set_title(\"TRANSFORM LIGHT RANDOM\")\naxis[1].imshow(Gaus_II,cmap=\"hot\")\n\naxis[2].set_xlabel(Example_I_IMG.shape)\naxis[2].set_ylabel(Example_I_IMG.size)\naxis[2].set_title(f\"RANDOM\")\naxis[2].imshow(Example_I_IMG)\n\naxis[3].set_xlabel(Example_II_IMG.shape)\naxis[3].set_ylabel(Example_II_IMG.size)\naxis[3].set_title(\"RANDOM\")\naxis[3].imshow(Example_II_IMG)","1b4b802d":"print(\"MIN VAL: \",minVal)\nprint(\"MAX VAL: \",maxVal)\nprint(\"MIN LOC: \",minLoc)\nprint(\"MAX LOC: \",maxLoc)","986bef89":"Target_Data = JPG_Series[0:1200]","8980e77e":"print(type(Target_Data))","f02c6144":"TARGET_IMG_LIST = []\nTRANS_IMG_LIST = []\n\nfor x_image,m_image in zip(Target_Data.values,Target_Data.values):\n    \n    Reading_IMG = cv2.cvtColor(cv2.imread(x_image),cv2.COLOR_BGR2RGB)\n    \n    Gray_IMG = cv2.cvtColor(Reading_IMG,cv2.COLOR_RGB2GRAY)\n    \n    _,Threshold_IMG = cv2.threshold(Gray_IMG,110,255,cv2.THRESH_TOZERO_INV)\n    \n    Contours_IMG, _= cv2.findContours(Threshold_IMG, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n    \n    blur_IMG = cv2.GaussianBlur(Gray_IMG, (11,11), 0)\n    \n    (minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(blur_IMG)\n    \n    Canny_IMG = cv2.Canny(Threshold_IMG, 50, 100)\n    \n    lightcontours_IMG, _ = cv2.findContours(Canny_IMG, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n    \n    Testing_IMG = np.zeros((Gray_IMG.shape[0], Gray_IMG.shape[1]), dtype=np.float32)\n    \n    for (i, c) in enumerate(Contours_IMG):\n        (x, y, w, h) = cv2.boundingRect(c)\n        ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n        Cir_IMG = cv2.circle(Testing_IMG, (int(cX), int(cY)), int(radius),(255, 255, 255), 1)\n        \n    Gaus_IMG = gaussian_filter(Cir_IMG,sigma=5,truncate=5*5)\n    \n    Resized_IMG = cv2.resize(Reading_IMG,(180,180))\n    Resized_GAUS = cv2.resize(Gaus_IMG,(180,180))\n    \n    TARGET_IMG_LIST.append(Resized_IMG)\n    TRANS_IMG_LIST.append(Resized_GAUS)","54c56ea6":"print(len(TARGET_IMG_LIST))\nprint(len(TRANS_IMG_LIST))","53c9e301":"print(\"WHEN IT IS ARRAY IMAGE SHAPE: \",np.shape(np.array(TARGET_IMG_LIST)))\nprint(\"WHEN IT IS ARRAY MASK SHAPE: \",np.shape(np.array(TRANS_IMG_LIST)))","f7459b3f":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(TRANS_IMG_LIST[100])\naxis[0].set_xlabel(TRANS_IMG_LIST[100].shape)\naxis[0].set_title(\"HEAT MAP\")\naxis[1].imshow(TARGET_IMG_LIST[100])\naxis[1].set_xlabel(TARGET_IMG_LIST[100].shape)\naxis[1].set_title(\"ORIGINAL\")","e856a410":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(TRANS_IMG_LIST[1])\naxis[0].set_xlabel(TRANS_IMG_LIST[1].shape)\naxis[0].set_title(\"HEAT MAP\")\naxis[1].imshow(TARGET_IMG_LIST[1])\naxis[1].set_xlabel(TARGET_IMG_LIST[1].shape)\naxis[1].set_title(\"ORIGINAL\")","11a8fb2e":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(TRANS_IMG_LIST[134])\naxis[0].set_xlabel(TRANS_IMG_LIST[134].shape)\naxis[0].set_title(\"HEAT MAP\")\naxis[1].imshow(TARGET_IMG_LIST[134])\naxis[1].set_xlabel(TARGET_IMG_LIST[134].shape)\naxis[1].set_title(\"ORIGINAL\")","67b4cfa2":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(TRANS_IMG_LIST[1119])\naxis[0].set_xlabel(TRANS_IMG_LIST[1119].shape)\naxis[0].set_title(\"HEAT MAP\")\naxis[1].imshow(TARGET_IMG_LIST[1119])\naxis[1].set_xlabel(TARGET_IMG_LIST[1119].shape)\naxis[1].set_title(\"ORIGINAL\")","968f286a":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(TRANS_IMG_LIST[444])\naxis[0].set_xlabel(TRANS_IMG_LIST[444].shape)\naxis[0].set_title(\"HEAT MAP\")\naxis[1].imshow(TARGET_IMG_LIST[444])\naxis[1].set_xlabel(TARGET_IMG_LIST[444].shape)\naxis[1].set_title(\"ORIGINAL\")","de175a2a":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(TRANS_IMG_LIST[542])\naxis[0].set_xlabel(TRANS_IMG_LIST[542].shape)\naxis[0].set_title(\"HEAT MAP\")\naxis[1].imshow(TARGET_IMG_LIST[542])\naxis[1].set_xlabel(TARGET_IMG_LIST[542].shape)\naxis[1].set_title(\"ORIGINAL\")","f1c6fd2e":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(TRANS_IMG_LIST[777])\naxis[0].set_xlabel(TRANS_IMG_LIST[777].shape)\naxis[0].set_title(\"HEAT MAP\")\naxis[1].imshow(TARGET_IMG_LIST[777])\naxis[1].set_xlabel(TARGET_IMG_LIST[777].shape)\naxis[1].set_title(\"ORIGINAL\")","0a8ce5d5":"Train_Set = np.array(TARGET_IMG_LIST,dtype=\"float32\")\nTransformation_Set = np.array(TRANS_IMG_LIST,dtype=\"float32\")\n\nTrain_Set = Train_Set \/ 255.\nTransformation_Set = Transformation_Set \/ 255.","be883f14":"print(Train_Set.shape)\nprint(Transformation_Set.shape)","ffac81c2":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Train_Set[777])\naxis[0].set_xlabel(Train_Set[777].shape)\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Transformation_Set[777])\naxis[1].set_xlabel(Transformation_Set[777].shape)\naxis[1].set_title(\"HEAT MAP\")","f3768642":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Train_Set[33])\naxis[0].set_xlabel(Train_Set[33].shape)\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Transformation_Set[33])\naxis[1].set_xlabel(Transformation_Set[33].shape)\naxis[1].set_title(\"HEAT MAP\")","f13d8542":"Checkpoint_Model = tf.keras.callbacks.ModelCheckpoint(monitor=\"val_accuracy\",\n                                                      save_best_only=True,\n                                                      save_weights_only=True,\n                                                      filepath=\".\/modelcheck\")\nReduce_Model = tf.keras.callbacks.ReduceLROnPlateau(monitor=\"val_accuracy\",\n                                                   factor=0.2,\n                                                    min_delta=0.0001,\n                                                   patience=5)","8f0fafa2":"compile_loss = \"binary_crossentropy\"\ncompile_optimizer = Adam(lr=0.0000001)\noutput_class = 1","0e7cecf9":"Encoder_G = Sequential()\nEncoder_G.add(Conv2D(32,(7,7),kernel_initializer = 'he_normal'))\nEncoder_G.add(BatchNormalization())\nEncoder_G.add(ReLU())\n#\nEncoder_G.add(Conv2D(64,(7,7),kernel_initializer = 'he_normal'))\nEncoder_G.add(BatchNormalization())\nEncoder_G.add(ReLU())\n#\nEncoder_G.add(Conv2D(128,(2,2),kernel_initializer = 'he_normal'))\nEncoder_G.add(BatchNormalization())\nEncoder_G.add(ReLU())\n\n\nDecoder_G = Sequential()\nDecoder_G.add(Conv2DTranspose(64,(7,7)))\nDecoder_G.add(ReLU())\n#\nDecoder_G.add(Conv2DTranspose(32,(7,7)))\nDecoder_G.add(ReLU())\n#\nDecoder_G.add(Conv2DTranspose(output_class,(2,2)))\nDecoder_G.add(ReLU())","f9aac775":"Auto_Encoder = Sequential([Encoder_G,Decoder_G])\nAuto_Encoder.compile(loss=compile_loss,optimizer=compile_optimizer,metrics=[\"mse\"])","e5b492b5":"Model_AutoEncoder = Auto_Encoder.fit(Train_Set,Transformation_Set,epochs=25,callbacks=[Checkpoint_Model,Reduce_Model])","cee60aee":"Prediction_IMG = Auto_Encoder.predict(Train_Set[:10])","22371c7b":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 1\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_HEAT = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_HEAT)\naxis[1].set_xlabel(Predict_HEAT.shape)\naxis[1].set_ylabel(Predict_HEAT.size)\naxis[1].set_title(\"PREDICTION\")","d2b92f43":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 5\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_HEAT = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_HEAT)\naxis[1].set_xlabel(Predict_HEAT.shape)\naxis[1].set_ylabel(Predict_HEAT.size)\naxis[1].set_title(\"PREDICTION\")","2605ab57":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 8\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_HEAT = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_HEAT)\naxis[1].set_xlabel(Predict_HEAT.shape)\naxis[1].set_ylabel(Predict_HEAT.size)\naxis[1].set_title(\"PREDICTION\")","fdcc2c5e":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 6\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_HEAT = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_HEAT)\naxis[1].set_xlabel(Predict_HEAT.shape)\naxis[1].set_ylabel(Predict_HEAT.size)\naxis[1].set_title(\"PREDICTION\")","2fb2f70b":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 7\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_HEAT = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_HEAT)\naxis[1].set_xlabel(Predict_HEAT.shape)\naxis[1].set_ylabel(Predict_HEAT.size)\naxis[1].set_title(\"PREDICTION\")","4a8a050e":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nTarget_Predict = JPG_Series[2000]\nReading_Target = cv2.cvtColor(cv2.imread(Target_Predict),cv2.COLOR_BGR2RGB)\nResized_Target = cv2.resize(Reading_Target,(180,180))\nResized_p_Target = Resized_Target.reshape(-1,Resized_Target.shape[0],Resized_Target.shape[1],Resized_Target.shape[2])\nPrediction_DIFF = Auto_Encoder.predict(Resized_p_Target)\n\n\naxis[0].imshow(Resized_Target)\naxis[0].set_xlabel(Resized_Target.shape)\naxis[0].set_ylabel(Resized_Target.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Prediction_DIFF[0],cmap=\"hot\")\naxis[1].set_xlabel(Prediction_DIFF[0].shape)\naxis[1].set_ylabel(Prediction_DIFF[0].size)\naxis[1].set_title(\"PREDICTION\")","204059f9":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nTarget_Predict = JPG_Series[2330]\nReading_Target = cv2.cvtColor(cv2.imread(Target_Predict),cv2.COLOR_BGR2RGB)\nResized_Target = cv2.resize(Reading_Target,(180,180))\nResized_p_Target = Resized_Target.reshape(-1,Resized_Target.shape[0],Resized_Target.shape[1],Resized_Target.shape[2])\nPrediction_DIFF = Auto_Encoder.predict(Resized_p_Target)\n\n\naxis[0].imshow(Resized_Target)\naxis[0].set_xlabel(Resized_Target.shape)\naxis[0].set_ylabel(Resized_Target.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Prediction_DIFF[0],cmap=\"hot\")\naxis[1].set_xlabel(Prediction_DIFF[0].shape)\naxis[1].set_ylabel(Prediction_DIFF[0].size)\naxis[1].set_title(\"PREDICTION\")","5d622e8e":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nTarget_Predict = JPG_Series[2130]\nReading_Target = cv2.cvtColor(cv2.imread(Target_Predict),cv2.COLOR_BGR2RGB)\nResized_Target = cv2.resize(Reading_Target,(180,180))\nResized_p_Target = Resized_Target.reshape(-1,Resized_Target.shape[0],Resized_Target.shape[1],Resized_Target.shape[2])\nPrediction_DIFF = Auto_Encoder.predict(Resized_p_Target)\n\n\naxis[0].imshow(Resized_Target)\naxis[0].set_xlabel(Resized_Target.shape)\naxis[0].set_ylabel(Resized_Target.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Prediction_DIFF[0],cmap=\"hot\")\naxis[1].set_xlabel(Prediction_DIFF[0].shape)\naxis[1].set_ylabel(Prediction_DIFF[0].size)\naxis[1].set_title(\"PREDICTION\")","dc174052":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nTarget_Predict = JPG_Series[3000]\nReading_Target = cv2.cvtColor(cv2.imread(Target_Predict),cv2.COLOR_BGR2RGB)\nResized_Target = cv2.resize(Reading_Target,(180,180))\nResized_p_Target = Resized_Target.reshape(-1,Resized_Target.shape[0],Resized_Target.shape[1],Resized_Target.shape[2])\nPrediction_DIFF = Auto_Encoder.predict(Resized_p_Target)\n\n\naxis[0].imshow(Resized_Target)\naxis[0].set_xlabel(Resized_Target.shape)\naxis[0].set_ylabel(Resized_Target.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Prediction_DIFF[0],cmap=\"hot\")\naxis[1].set_xlabel(Prediction_DIFF[0].shape)\naxis[1].set_ylabel(Prediction_DIFF[0].size)\naxis[1].set_title(\"PREDICTION\")","94457245":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nTarget_Predict = JPG_Series[4002]\nReading_Target = cv2.cvtColor(cv2.imread(Target_Predict),cv2.COLOR_BGR2RGB)\nResized_Target = cv2.resize(Reading_Target,(180,180))\nResized_p_Target = Resized_Target.reshape(-1,Resized_Target.shape[0],Resized_Target.shape[1],Resized_Target.shape[2])\nPrediction_DIFF = Auto_Encoder.predict(Resized_p_Target)\n\n\naxis[0].imshow(Resized_Target)\naxis[0].set_xlabel(Resized_Target.shape)\naxis[0].set_ylabel(Resized_Target.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Prediction_DIFF[0],cmap=\"hot\")\naxis[1].set_xlabel(Prediction_DIFF[0].shape)\naxis[1].set_ylabel(Prediction_DIFF[0].size)\naxis[1].set_title(\"PREDICTION\")","e7aec265":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nTarget_Predict = JPG_Series[5438]\nReading_Target = cv2.cvtColor(cv2.imread(Target_Predict),cv2.COLOR_BGR2RGB)\nResized_Target = cv2.resize(Reading_Target,(180,180))\nResized_p_Target = Resized_Target.reshape(-1,Resized_Target.shape[0],Resized_Target.shape[1],Resized_Target.shape[2])\nPrediction_DIFF = Auto_Encoder.predict(Resized_p_Target)\n\n\naxis[0].imshow(Resized_Target)\naxis[0].set_xlabel(Resized_Target.shape)\naxis[0].set_ylabel(Resized_Target.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Prediction_DIFF[0],cmap=\"hot\")\naxis[1].set_xlabel(Prediction_DIFF[0].shape)\naxis[1].set_ylabel(Prediction_DIFF[0].size)\naxis[1].set_title(\"PREDICTION\")","a75a341b":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nTarget_Predict = JPG_Series[6666]\nReading_Target = cv2.cvtColor(cv2.imread(Target_Predict),cv2.COLOR_BGR2RGB)\nResized_Target = cv2.resize(Reading_Target,(180,180))\nResized_p_Target = Resized_Target.reshape(-1,Resized_Target.shape[0],Resized_Target.shape[1],Resized_Target.shape[2])\nPrediction_DIFF = Auto_Encoder.predict(Resized_p_Target)\n\n\naxis[0].imshow(Resized_Target)\naxis[0].set_xlabel(Resized_Target.shape)\naxis[0].set_ylabel(Resized_Target.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Prediction_DIFF[0],cmap=\"hot\")\naxis[1].set_xlabel(Prediction_DIFF[0].shape)\naxis[1].set_ylabel(Prediction_DIFF[0].size)\naxis[1].set_title(\"PREDICTION\")","9419fde9":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nTarget_Predict = JPG_Series[7811]\nReading_Target = cv2.cvtColor(cv2.imread(Target_Predict),cv2.COLOR_BGR2RGB)\nResized_Target = cv2.resize(Reading_Target,(180,180))\nResized_p_Target = Resized_Target.reshape(-1,Resized_Target.shape[0],Resized_Target.shape[1],Resized_Target.shape[2])\nPrediction_DIFF = Auto_Encoder.predict(Resized_p_Target)\n\n\naxis[0].imshow(Resized_Target)\naxis[0].set_xlabel(Resized_Target.shape)\naxis[0].set_ylabel(Resized_Target.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Prediction_DIFF[0],cmap=\"hot\")\naxis[1].set_xlabel(Prediction_DIFF[0].shape)\naxis[1].set_ylabel(Prediction_DIFF[0].size)\naxis[1].set_title(\"PREDICTION\")","31360959":"# PARAMETERS AND CALLBACKS","f98bc47b":"##### VAL AND LOC OVERVIEW","77de189c":"##### SIMPLE","ec4d54f9":"#### PREDICTION WITH SAME SAMPLE","6f873fb6":"* we need to check all W path directories","ea549aec":"# OBSERVATION AND METHOD DETERMINATION","8d5c3616":"##### CANNY AND POLYDP","b99eee73":"# PACKAGES AND LIBRARIES","ba326a38":"# DATA PROCESS","b3356ee0":"##### THRESHOLD","d962cb99":"##### APPROX TRANSFORM","56e3cc1d":"##### LIGHT POINT OVERVIEW","493f8f49":"# HISTORY\n\n* For more than a decade, NASA\u2019s Cassini spacecraft shared the wonders of Saturn and its family of icy moons\u2014taking us to astounding worlds where methane rivers run to a methane sea and where jets of ice and gas are blasting material into space from a liquid water ocean that might harbor the ingredients for life.\n\n#### The Latest\n* 10 Ways to Celebrate Pi Day with NASA on March 14\n#### What Are NASA's Lucky Peanuts?\n* Cassini revealed in great detail the true wonders of Saturn, a giant world ruled by raging storms and delicate harmonies of gravity.\n\n* Cassini carried a passenger to the Saturn system, the European Huygens probe\u2014the first human-made object to land on a world in the distant outer solar system.\n\n* After 20 years in space \u2014 13 of those years exploring Saturn \u2014 Cassini exhausted its fuel supply. And so, to protect moons of Saturn that could have conditions suitable for life, Cassini was sent on a daring final mission that would seal its fate. After a series of nearly two dozen nail-biting dives between the planet and its icy rings, Cassini plunged into Saturn\u2019s atmosphere on Sept. 15, 2017, returning science data to the very end.","57984021":"##### CONTOURS","71da59e7":"#### PREDICTION WITH DIFFERENT SAMPLE","06b6e081":"##### APPROX OVERVIEW","074e0b82":"# MODEL","be0ecc44":"#### PATH & INFORMATION","774e1f5c":"#### TO ARRAY","934a8ef2":"#### JPG PATH PROCESS","81ce6fc8":"#### LIGHT","5469a5c7":"#### VISION ANALYSIS","8876bc3f":"#### SPLITTING PROCESS"}}