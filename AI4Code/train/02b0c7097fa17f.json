{"cell_type":{"3dedd066":"code","f1f4c00d":"code","d8148fea":"code","406952f9":"code","f5d1f6d8":"code","0b12da88":"code","2f18b1f7":"code","7c479f0d":"code","098afcfa":"code","1c6c9896":"code","02e69f40":"code","4f5cd9c8":"code","f8d1792d":"code","36625d2f":"code","ec091d34":"code","f3a9022d":"code","f2a30c97":"code","e9334bdf":"code","f6173c95":"code","4c7db163":"code","f9846504":"code","9bc741c3":"code","d8641de1":"code","15385655":"code","1daae8d1":"code","6aa5e19e":"code","484067b9":"code","67d3814e":"markdown","d38371ab":"markdown","903fa019":"markdown","82ef6037":"markdown","efddb07e":"markdown","2cfd14c3":"markdown","92db29b7":"markdown","40c99512":"markdown"},"source":{"3dedd066":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom cv2 import cv2\nimport zipfile\nimport os\nimport matplotlib.pyplot as plt","f1f4c00d":"TEST_DIR = '..\/input\/dogs-vs-cats-redux-kernels-edition\/test.zip'\nTRAIN_DIR = '..\/input\/dogs-vs-cats-redux-kernels-edition\/train.zip'","d8148fea":"#you can execute this  only once\nwith zipfile.ZipFile(TRAIN_DIR,'r') as trainfile:\n    trainfile.extractall()\nwith zipfile.ZipFile(TEST_DIR,'r') as trainfile:\n    trainfile.extractall()","406952f9":"!ls","f5d1f6d8":"testdir ='test\/'\ntraindir = 'train\/'","0b12da88":"test_images = [testdir+i for i in os.listdir(testdir)]\nall_images = [traindir+i for i in os.listdir(traindir)]\n\nlimit = int( 0.8* len(all_images))\n\ntrain_images = all_images[0:limit]\nvalidation_images = all_images[limit:]","2f18b1f7":"img = cv2.imread(train_images[1])\nplt.imshow(img)","7c479f0d":"rows, columns = 160,160","098afcfa":"def getallimages(path):\n    actualdata = np.ndarray((len(path),rows,columns,3),dtype=np.uint8)\n    for index , file in enumerate(path):\n        img = cv2.imread(file)\n        img= cv2.resize(img, (rows, columns), interpolation=cv2.INTER_CUBIC)\n#         img = tf.cast(img,tf.float32)\n#         img = (img\/127.5) - 1\n#         img = tf.image.resize(img, (rows, columns))\n        actualdata[index] = img\n    return actualdata\ntrain = getallimages(train_images)\ntest = getallimages(test_images)\n","1c6c9896":"validation = getallimages(validation_images)","02e69f40":"test.shape","4f5cd9c8":"label = [1 if 'dog' in i else 0 for i in train_images]\nvalidation_label = [1 if 'dog' in i else 0 for i in validation_images]\n\nvalidation_label[:10]","f8d1792d":"image_shape = (rows,rows,3)","36625d2f":"type(train)","ec091d34":"base_model = tf.keras.applications.ResNet101(\n    weights = 'imagenet', include_top=False, input_shape=image_shape)","f3a9022d":"base_model.trainable=False","f2a30c97":"base_model.summary()","e9334bdf":"model = tf.keras.Sequential([\n    base_model,\n    tf.keras.layers.GlobalAveragePooling2D(),\n   \n    tf.keras.layers.Dense(1,activation='sigmoid')\n    \n])","f6173c95":"model.summary()","4c7db163":"# train_dataset = tf.data.Dataset.from_tensor_slices((train,label))\n# validation_ds = tf.data.Dataset.from_tensor_slices((validation,validation_label))\n\n# BATCH_SIZE = 64\n# SHUFFLE_BUFFER_SIZE = 10000\n# validation_batches = validation_ds.batch(BATCH_SIZE)\n# train_dataset = train_dataset.shuffle(SHUFFLE_BUFFER_SIZE).batch(BATCH_SIZE)","f9846504":"base_learning_rate = 0.001\n# you can use this tootf.keras.optimizers.RMSprop(learning_rate=base_learning_rate\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),\n              metrics=['accuracy'])","9bc741c3":"epochs = 10\nvalidation_steps=20\n\n# model.evaluate(validation,validation_label, steps = validation_steps)","d8641de1":"model.fit(x=np.array(train),y=np.array(label),validation_data=(np.array(validation),np.array(validation_label)) ,batch_size=128,epochs=epochs,shuffle=True)","15385655":"prediction  = model.predict_proba(test,verbose=1)","1daae8d1":"plt.xlabel(prediction[4][0])\nplt.imshow(test[4])","6aa5e19e":"# model.save('dgvscat.h5)","484067b9":" \ntest_id = [i.split('\/')[1][:-4] for i in test_images]\n\npredictions_df = pd.DataFrame({'id': test_id, 'label': prediction[:,0]})\npredictions_df\npredictions_df.to_csv(\"submission.csv\", index=False,header=True)","67d3814e":"**We freeze the base layer ie its weights are not going to be retraning the model**","d38371ab":"lets create a function which will read the image using opencv library","903fa019":"now we extract the images (i have no idea on how to work with elements of zip files without extracting them)","82ef6037":"Now lets see if the files are extracted or not","efddb07e":"small visualization","2cfd14c3":"now lets get the full path of train images and test images","92db29b7":"we will create a training batch now\n","40c99512":"we need some labels too so lets add y which will be our label "}}