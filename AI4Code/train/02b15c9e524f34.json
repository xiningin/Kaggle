{"cell_type":{"25fc26a0":"code","3cafd761":"code","5e8909d1":"code","1c9c78fb":"code","be35943b":"code","1439247b":"code","1e338c0b":"code","4baca121":"code","a9ee1ff4":"code","17050e92":"code","5eac0fdb":"code","e360dd9b":"code","ff355d07":"code","89de2ef7":"code","0bcfe23e":"code","4ff21de5":"code","b7a81a99":"code","cf8e727b":"code","3d264f27":"code","6e822c93":"code","86237d76":"code","1ef1d5c1":"code","538f1c63":"code","1bc7f3c3":"markdown","1c9846f9":"markdown","d7862f8b":"markdown","5db381f3":"markdown","00436738":"markdown","8a437f56":"markdown","267c5a0b":"markdown","d32cb97e":"markdown","35a66420":"markdown","ae810468":"markdown","e01912a2":"markdown","88739ef9":"markdown","0fabaa8f":"markdown","9a27f64d":"markdown","7dfbc8a1":"markdown","129913dc":"markdown","bab3fb4e":"markdown","d3ea8d20":"markdown"},"source":{"25fc26a0":"import torch \nimport torch.nn as nn\nimport cv2\nimport pytorch_lightning as pl\nfrom pytorch_lightning.core.lightning import LightningModule\n\nfrom torch.utils.data import Dataset,DataLoader \nimport pydicom\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport sys\nimport random\nimport glob\nimport time\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n\nimport seaborn as sns","3cafd761":"if os.path.exists(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\"):\n    data_directory = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification'\n    pytorch3dpath = \"..\/input\/efficientnet3d\/EfficientNet-PyTorch-3D-master\"\nelse:\n    data_directory = '\/media\/roland\/data\/kaggle\/rsna-miccai-brain-tumor-radiogenomic-classification'\n    pytorch3dpath = \"EfficientNet-PyTorch-3D\"\n    \nmri_types = ['FLAIR','T1w','T1wCE','T2w']\nSIZE = 256\nNUM_IMAGES = 64\n","5e8909d1":"df = pd.read_csv(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv\")\ndf = df.loc[df['BraTS21ID'] != 109]\ndf = df.loc[df['BraTS21ID'] != 709]\ndf = df.reset_index(drop=True)\ndf","1c9c78fb":"sample_df = pd.read_csv(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/sample_submission.csv\")","be35943b":"X = df[[\"BraTS21ID\"]]\ny = df[[\"MGMT_value\"]]\ntrain_x,test_x,train_y,test_y = train_test_split(X,y,test_size = 0.25 , random_state = 42,stratify=y[\"MGMT_value\"])\ntest_x,val_x,test_y,val_y = train_test_split(test_x,test_y,test_size = 0.25 , random_state = 42, stratify=test_y[\"MGMT_value\"])\nprint(len(train_x) , \"\\n\" , len(test_x) , \"\\n\" , len(val_x))","1439247b":"def load_dicom_image(path, img_size=SIZE):\n    dicom = pydicom.read_file(path)\n    data = dicom.pixel_array\n    if np.min(data)==np.max(data):\n        data = np.zeros((img_size,img_size))\n        return data\n    data = data - np.min(data)\n    if np.max(data) != 0:\n        data = data \/ np.max(data)\n    \n    #data = (data * 255).astype(np.uint8)\n    data = cv2.resize(data, (img_size, img_size))\n    return data\n\ndef load_dicom_images_3d(scan_id, num_imgs=NUM_IMAGES, img_size=SIZE, mri_type=\"FLAIR\", split=\"train\"):\n\n    files = sorted(glob.glob(f\"{data_directory}\/{split}\/{scan_id}\/{mri_type}\/*.dcm\"))\n    \n    middle = len(files)\/\/2\n    num_imgs2 = num_imgs\/\/2\n    p1 = max(0, middle - num_imgs2)\n    p2 = min(len(files), middle + num_imgs2)\n    img3d = np.stack([load_dicom_image(f) for f in files[p1:p2]]).T \n    if img3d.shape[-1] < num_imgs:\n        n_zero = np.zeros((img_size, img_size, num_imgs - img3d.shape[-1]))\n        img3d = np.concatenate((img3d,  n_zero), axis = -1)\n            \n    return np.expand_dims(img3d,0)\n","1e338c0b":"load_dicom_images_3d(\"00002\").shape","4baca121":"class RSNA_Dataset(Dataset):\n    def __init__(self, paths, targets=None, mri_type=\"Flair\", label_smoothing=0.0, split=\"train\"):\n        self.paths = paths\n        self.targets = targets\n        self.mri_type = mri_type\n        self.label_smoothing = label_smoothing\n        self.split = split\n          \n    def __len__(self):\n        return len(self.paths)\n    \n    def __getitem__(self, index):\n        scan_id = self.paths[index]\n        if self.targets is None:\n            data = load_dicom_images_3d(str(scan_id).zfill(5),split = \"test\")\n        else:\n            data = load_dicom_images_3d(str(scan_id).zfill(5))\n\n        if self.targets is None:\n            return torch.tensor(data).float()\n        else:\n            y = torch.tensor(abs(self.targets[index]-self.label_smoothing), dtype=torch.float)\n            return torch.tensor(data).float(),y","a9ee1ff4":"train_dataset = RSNA_Dataset(\n                train_x[\"BraTS21ID\"].values,\n                train_y[\"MGMT_value\"].values\n)\n\ntest_dataset = RSNA_Dataset(\n                    val_x[\"BraTS21ID\"].values,\n                    val_y[\"MGMT_value\"].values\n)\n\nvalidation_dataset = RSNA_Dataset(\n                    test_x[\"BraTS21ID\"].values,\n                    test_y[\"MGMT_value\"].values\n)\n\npredict_dataset = RSNA_Dataset(\n                    sample_df[\"BraTS21ID\"].values,\n)","17050e92":"class RSNA_DataModule(pl.LightningDataModule):\n    def __init__(self):\n        super().__init__()\n        self.train = train_dataset\n        self.val = validation_dataset\n        self.test = test_dataset\n        self.predict = predict_dataset\n        \n    def train_dataloader(self):\n        return DataLoader(self.train,batch_size = 20,shuffle = True,num_workers=1)\n    def val_dataloader(self):  \n        return DataLoader(self.val,batch_size = 20,shuffle = False,num_workers=1)\n    def test_dataloader(self):\n        return DataLoader(self.test,batch_size = 22,shuffle = False,num_workers=1)\n    def predict_dataloader(self):\n        return DataLoader(self.predict,batch_size = 1,shuffle = False,num_workers=1)","5eac0fdb":"image , label  = next(iter(DataLoader(train_dataset,batch_size = 1,shuffle = True)))\nprint(image,label)","e360dd9b":"package_path = \"..\/input\/efficientnet3d\/EfficientNet-PyTorch-3D-master\"\nsys.path.append(package_path)\nfrom efficientnet_pytorch_3d import EfficientNet3D\nneural_network = EfficientNet3D.from_name(\"efficientnet-b1\", override_params={'num_classes': 1}, in_channels=1) ","ff355d07":"from sklearn.metrics import roc_curve,auc\n\nprobs = nn.Sigmoid() # Since we're using binary cross entropy we use the Sigmoid function to convert the Logits into probabilities\n\ndef get_score(y_pred,y):\n    probabilities = []\n    for x in y_pred:\n        prob = probs(x)\n        top_p, top_class = prob.topk(1, dim = -1)\n        probabilities.append(float(top_p))\n    y = [float(t) for t in y]\n    logistic_fpr , logistic_tpr,_ = roc_curve(y , probabilities)\n    aoc_score = auc(logistic_fpr , logistic_tpr)\n    return aoc_score","89de2ef7":"class RSNA_Model(pl.LightningModule):\n    def __init__(self):\n        super().__init__()\n        self.neural_net = neural_network\n        \n    def forward(self,x):\n        return self.neural_net(x)\n    \n    def configure_optimizers(self):\n        optimizer = torch.optim.Adam(self.parameters() , lr = 1e-4)\n        sch = torch.optim.lr_scheduler.StepLR(optimizer, step_size = 20, gamma=0.5, last_epoch=-1, verbose=False)\n        return {\n        \"optimizer\": optimizer,\n        \"lr_scheduler\": {\n            \"scheduler\": sch,\n          #  \"monitor\": \"\",\n        },\n    }\n    \n    def training_step(self,batch,batch_idx):\n        x,y = batch\n        y_pred = self(x)\n        y = y.unsqueeze(-1)\n        loss = torch.nn.functional.binary_cross_entropy_with_logits(y_pred,y)\n        return loss\n    \n    def validation_step(self,batch,batch_idx):\n        x,y = batch\n        y_pred = self(x)\n        y = y.unsqueeze(-1)\n        loss = torch.nn.functional.binary_cross_entropy_with_logits(y_pred,y)\n        self.log(\"auc_score\" ,get_score(y_pred,y) )\n        return loss\n    def test_step(self,batch,batch_idx):\n        x,y = batch\n        y_pred = self(x)\n        y = y.unsqueeze(-1)\n        loss = torch.nn.functional.binary_cross_entropy_with_logits(y_pred,y)\n        self.log(\"test_loss : \" , loss)\n        return loss","0bcfe23e":"from pytorch_lightning.callbacks import ModelCheckpoint\ncheckpoint_callback = ModelCheckpoint(\n                            monitor = \"auc_score\",\n                            mode = \"max\",\n)","4ff21de5":"%%time\nfrom pytorch_lightning import Trainer\nmodel = RSNA_Model()\nmodule = RSNA_DataModule()\nmodel.load_from_checkpoint('..\/input\/d\/aristotle609\/efficient3d-checkpoint\/FLAIR-Best_Checkpoint.ckpt')\ntrainer = Trainer(max_epochs=15,gpus = 1,  callbacks = [checkpoint_callback])\ntrainer.fit(model,module)","b7a81a99":"result = trainer.test()\nprint(result)","cf8e727b":"predictons = trainer.predict()","3d264f27":"probabilities = []\nfor x in predictons:\n    prob = probs(x)\n    top_p, top_class = prob.topk(1, dim = 1)\n    probabilities.append(float(top_p))","6e822c93":"trainer.save_checkpoint(\"FLAIR-Best_Checkpoint.ckpt\")# this will save the checkpoint","86237d76":"import shutil\nshutil.rmtree(\".\/lightning_logs\") # you might want to keep the logs if you want to plot them on a graph since I won't be using them I have deleted them","1ef1d5c1":"data = {\n    'BraTS21ID' : list(sample_df[\"BraTS21ID\"]),\n    'MGMT_value' : probabilities\n}\nsubmission = pd.DataFrame(data)\nsubmission.to_csv(\"submission.csv\", index=False)","538f1c63":"display(pd.read_csv(\".\/submission.csv\"))\nsns.displot(submission[\"MGMT_value\"])","1bc7f3c3":"we'll be using a pretrained EfficentNet Model for our model and change the number of classes to 1 since we're going to be using binary classification","1c9846f9":"# **Predictions**","d7862f8b":"The cell below is a functoin that returns the auc score on the validation. We're Using auc score since it;s the metric thats being used with the competition. The metrics auc and roc have been explained very well in this [video](https:\/\/www.youtube.com\/watch?v=4jRBRDbJemM&vl=en)","5db381f3":"the cell below will will passes to the trainer and will return the model with the highest \"auc_score\"","00436738":"The goal of this notebook is to build a Functioning model for the **Flair** MRI type. After building a model for each MRI type one should be able to make a separate notebook combining all of them. ","8a437f56":"# **Dependencies**","267c5a0b":"you can test the trainer below. For more accurate results I would recommend increasing the test size.","d32cb97e":" **This notebook attempts to use Pytorch Lightning to speed up the process to modeling.\n A large part of this code was taken from Roland Leuthy the link to his notebook is [here](https:\/\/www.kaggle.com\/rluethy\/efficientnet3d-with-one-mri-type). It's a great notebook and he has managed to get a great score on the leaderboard.**\n\nThis notebook uses [Pytorch Lightning](https:\/\/www.pytorchlightning.ai\/) if you know Pytorch you should be able to pick this up quite quickly. I'll attempt explain the best I can in this notebook.\n\n","35a66420":"# **Dataset**","ae810468":"I have already used the model and made a checkpoint. You can load checkpoints so you won't have to resume training from scratch. The best part about lightning is that you only have to declare the number of gpus you want to use and Lightning will handle the rest. Note that 15 epochs will take around 45mins on a gpu and 6 hours on a cpu.","e01912a2":"# **Data Preprocessing**","88739ef9":"# **Data**","0fabaa8f":"![](https:\/\/images.unsplash.com\/photo-1559757175-5700dde675bc?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=889&q=80)","9a27f64d":"Sanity Check: To check the data we're sending to the model","7dfbc8a1":"The model, optimizers are all set up in the lightning Module class. Notice the \"auc_score\" being logged in the validation step we're going to be using that to monitor our models performance.","129913dc":"you could directly send the code to the trainer but I find using the lightning datamodule to be more visually pleasing and cleaner","bab3fb4e":"# **Training**","d3ea8d20":"The preprocessing will convert each FLAIR dicom file for that patient into a 3D image of dimensions 64,256,256"}}