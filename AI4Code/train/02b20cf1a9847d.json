{"cell_type":{"12a5ced3":"code","82f2ca2d":"code","37941823":"code","47eaebf1":"code","40e4d94f":"code","d52c0071":"code","f363eeae":"code","371c1434":"code","54948af4":"code","c9ad2752":"code","c3bbb8f6":"code","4f23cf2d":"code","6ec5a757":"code","09f8e50c":"code","02acefc2":"code","6eaea39c":"code","7a5f2716":"code","a16960bd":"code","67248478":"code","7307b405":"code","44b35e6a":"code","2977825a":"markdown","4ca62a88":"markdown","ba464b4d":"markdown","530c56a3":"markdown","d535da50":"markdown","7739922e":"markdown","f39b34db":"markdown","939e8a49":"markdown","dad19e5f":"markdown","c73aeb85":"markdown","b3f489b6":"markdown","c535763b":"markdown","8a7306aa":"markdown","7221c59e":"markdown","da8cea7e":"markdown","436e9ea3":"markdown","7451aad4":"markdown","ae425ac5":"markdown"},"source":{"12a5ced3":"import numpy as np\nimport os\nimport matplotlib.pyplot as plot\nfrom PIL import Image\nimport cv2\nimport random\nimport seaborn as sns","82f2ca2d":"from keras.models import Model\nfrom keras.optimizers import Adam\nfrom keras.utils import plot_model\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.layers import Input, Conv2D, Activation, Add, Conv2DTranspose\nfrom keras.applications.vgg16 import VGG16","37941823":"train_folder=\"\/kaggle\/input\/cityscapes-image-pairs\/cityscapes_data\/cityscapes_data\/train\"\nvalid_folder=\"\/kaggle\/input\/cityscapes-image-pairs\/cityscapes_data\/cityscapes_data\/val\"\nwidth = 256\nheight = 256\nclasses = 13\nbatch_size = 10\nnum_of_training_samples = len(os.listdir(train_folder)) \nnum_of_testing_samples = len(os.listdir(valid_folder))","47eaebf1":"def LoadImage(name, path):\n    img = Image.open(os.path.join(path, name))\n    img = np.array(img)\n    \n    image = img[:,:256]\n    mask = img[:,256:]\n    \n    return image, mask","40e4d94f":"def bin_image(mask):\n    bins = np.array([20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240])\n    new_mask = np.digitize(mask, bins)\n    return new_mask","d52c0071":"def getSegmentationArr(image, classes, width=width, height=height):\n    seg_labels = np.zeros((height, width, classes))\n    img = image[:, : , 0]\n\n    for c in range(classes):\n        seg_labels[:, :, c] = (img == c ).astype(int)\n    return seg_labels","f363eeae":"def give_color_to_seg_img(seg, n_classes=13):\n    \n    seg_img = np.zeros( (seg.shape[0],seg.shape[1],3) ).astype('float')\n    colors = sns.color_palette(\"hls\", n_classes)\n    \n    for c in range(n_classes):\n        segc = (seg == c)\n        seg_img[:,:,0] += (segc*( colors[c][0] ))\n        seg_img[:,:,1] += (segc*( colors[c][1] ))\n        seg_img[:,:,2] += (segc*( colors[c][2] ))\n\n    return(seg_img)","371c1434":"def DataGenerator(path, batch_size=10, classes=13):\n    files = os.listdir(path)\n    while True:\n        for i in range(0, len(files), batch_size):\n            batch_files = files[i : i+batch_size]\n            imgs=[]\n            segs=[]\n            for file in batch_files:\n                #file = random.sample(files,1)[0]\n                image, mask = LoadImage(file, path)\n                mask_binned = bin_image(mask)\n                labels = getSegmentationArr(mask_binned, classes)\n\n                imgs.append(image)\n                segs.append(labels)\n\n            yield np.array(imgs), np.array(segs)","54948af4":"train_gen = DataGenerator(train_folder, batch_size=batch_size)\nval_gen = DataGenerator(valid_folder, batch_size=batch_size)","c9ad2752":"imgs, segs = next(train_gen)\nimgs.shape, segs.shape","c3bbb8f6":"image = imgs[0]\nmask = give_color_to_seg_img(np.argmax(segs[0], axis=-1))\nmasked_image = cv2.addWeighted(image\/255, 0.5, mask, 0.5, 0)\n\nfig, axs = plot.subplots(1, 3, figsize=(20,20))\naxs[0].imshow(image)\naxs[0].set_title('Original Image')\naxs[1].imshow(mask)\naxs[1].set_title('Segmentation Mask')\n#predimg = cv2.addWeighted(imgs[i]\/255, 0.6, _p, 0.4, 0)\naxs[2].imshow(masked_image)\naxs[2].set_title('Masked Image')\nplot.show()","4f23cf2d":"def fcn(vgg, classes = 13, fcn8 = False, fcn16 = False):\n    pool5 = vgg.get_layer('block5_pool').output \n    pool4 = vgg.get_layer('block4_pool').output\n    pool3 = vgg.get_layer('block3_pool').output\n    \n    conv_6 = Conv2D(1024, (7, 7), activation='relu', padding='same', name=\"conv_6\")(pool5)\n    conv_7 = Conv2D(1024, (1, 1), activation='relu', padding='same', name=\"conv_7\")(conv_6)\n    \n    conv_8 = Conv2D(classes, (1, 1), activation='relu', padding='same', name=\"conv_8\")(pool4)\n    conv_9 = Conv2D(classes, (1, 1), activation='relu', padding='same', name=\"conv_9\")(pool3)\n    \n    deconv_7 = Conv2DTranspose(classes, kernel_size=(2,2), strides=(2,2))(conv_7)\n    add_1 = Add()([deconv_7, conv_8])\n    deconv_8 = Conv2DTranspose(classes, kernel_size=(2,2), strides=(2,2))(add_1)\n    add_2 = Add()([deconv_8, conv_9])\n    deconv_9 = Conv2DTranspose(classes, kernel_size=(8,8), strides=(8,8))(add_2)\n    \n    if fcn8 :\n        output_layer = Activation('softmax')(deconv_9)\n    elif fcn16 :\n        deconv_10 = Conv2DTranspose(classes, kernel_size=(16,16), strides=(16,16))(add_1)\n        output_layer = Activation('softmax')(deconv_10)\n    else :\n        deconv_11 = Conv2DTranspose(classes, kernel_size=(32,32), strides=(32,32))(conv_7)\n        output_layer = Activation('softmax')(deconv_11)\n    \n    model = Model(inputs=vgg.input, outputs=output_layer)\n    return model","6ec5a757":"vgg = VGG16(include_top=False, weights='imagenet', input_shape=(width, height, 3))","09f8e50c":"model = fcn(vgg, fcn8=True)\nmodel.summary()","02acefc2":"plot_model(model)","6eaea39c":"adam = Adam(lr=0.001, decay=1e-06)\nmodel.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])","7a5f2716":"filepath = \"best-model-vgg.hdf5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')\ncallbacks_list = [checkpoint]","a16960bd":"history = model.fit_generator(train_gen, epochs=20, steps_per_epoch=num_of_training_samples\/\/batch_size,\n                       validation_data=val_gen, validation_steps=num_of_testing_samples\/\/batch_size,\n                       callbacks=callbacks_list, use_multiprocessing=True)","67248478":"model.load_weights(\"best-model-vgg.hdf5\")","7307b405":"loss = history.history[\"val_loss\"]\nacc = history.history[\"val_accuracy\"] #accuracy\n\nplot.figure(figsize=(12, 6))\nplot.subplot(211)\nplot.title(\"Val. Loss\")\nplot.plot(loss)\nplot.xlabel(\"Epoch\")\nplot.ylabel(\"Loss\")\n\nplot.subplot(212)\nplot.title(\"Val. Accuracy\")\nplot.plot(acc)\nplot.xlabel(\"Epoch\")\nplot.ylabel(\"Accuracy\")\n\nplot.tight_layout()\nplot.savefig(\"learn.png\", dpi=150)\nplot.show()","44b35e6a":"#val_gen = DataGenerator(valid_folder)\nmax_show = 1\nimgs, segs = next(val_gen)\npred = model.predict(imgs)\n\nfor i in range(max_show):\n    _p = give_color_to_seg_img(np.argmax(pred[i], axis=-1))\n    _s = give_color_to_seg_img(np.argmax(segs[i], axis=-1))\n\n    predimg = cv2.addWeighted(imgs[i]\/255, 0.5, _p, 0.5, 0)\n    trueimg = cv2.addWeighted(imgs[i]\/255, 0.5, _s, 0.5, 0)\n    \n    plot.figure(figsize=(12,6))\n    plot.subplot(121)\n    plot.title(\"Prediction\")\n    plot.imshow(predimg)\n    plot.axis(\"off\")\n    plot.subplot(122)\n    plot.title(\"Original\")\n    plot.imshow(trueimg)\n    plot.axis(\"off\")\n    plot.tight_layout()\n    plot.savefig(\"pred_\"+str(i)+\".png\", dpi=150)\n    plot.show()","2977825a":"## Generator function to generate data batches","4ca62a88":"## Bin Segmentation Mask ","ba464b4d":"## Segmentation Masks to Categorical Arrays ","530c56a3":"For preprocessing the dataset and defining the model, we have defined several helper functions -\n\n* `LoadImage` - Loads a single image and its corresponding segmentation map \n    * **Arguements** :\n        * `name` - Name of the image file\n        * `path` - Path to the image directory\n    * **Returns** - A tuple of 2 numpy arrays (image and segmentation map)\n    \n    \n* `bin_image` - Bin a segmentation map (Converts pixels from range (0, 255) to (0, classes))\n    * **Arguements** :\n        * `mask` - Original segmentation map\n    * **Returns** - New segmentation mask after binning pixel values\n    \n    \n* `getSegmentationArr` - Convert RGB segmentation maps to categorical maps used for training our model\n    * **Arguements** :\n        * `image` - Segmentation mask after binning\n        * `classes` - Number of categories or unique pixel values (13)\n        * `width` - Width of segmentation map\n        * `height` - Height of segmentation map\n    * **Returns** - Categorical segmentation map (width, height, classes)\n    \n    \n* `give_color_to_seg_img` - Convert categorical arrays back to colored segmentation maps\n    * **Arguements** : \n        * `seg` - Categorical segmentation map (width, height, classes)\n        * `n_classes` - Number of categories or unique pixel values (13) \n    * **Returns** - Colored segmentation map (width, height, 3)\n    \n    \n* `DataGenerator` - Returns data in form of batches\n    * **Arguements** :\n        * `path` - location or path of the image directory\n        * `batch_size` - size of each batch\n        * `classes` - Number of categories or unique pixel values (13)\n    * **Returns** - Tuple of `batch_size` number of images and segmentation maps\n    \n    \n* `fcn` - Creates the FCN model\n    * **Arguements** :\n        * `vgg` - VGG16 pretrained model\n        * `classes` - Number of categories or unique pixel values (13)\n        * `fcn8` - Set True to use FCN-8s model\n        * `fcn16` - Set True to use FCN-16s model\n    * **Returns** - FCN model\n    * **Note** - If both `fcn8` and `fcn16` arguements are set to False, it returns FCN-32s model by default","d535da50":"## Load Image and Segmentation Mask","7739922e":"## References\n\n* [Fully Convolutional Networks for Semantic Segmentation](https:\/\/www.cv-foundation.org\/openaccess\/content_cvpr_2015\/papers\/Long_Fully_Convolutional_Networks_2015_CVPR_paper.pdf)\n* [Fully Convolutional Networks (FCN) for 2D segmentation](http:\/\/www.deeplearning.net\/tutorial\/fcn_2D_segm.html)\n* [Learn about Fully Convolutional Networks for semantic segmentation](https:\/\/fairyonice.github.io\/Learn-about-Fully-Convolutional-Networks-for-semantic-segmentation.html)\n* [An Introduction to different Types of Convolutions in Deep Learning](https:\/\/towardsdatascience.com\/types-of-convolutions-in-deep-learning-717013397f4d)","f39b34db":"## Initialize Variables","939e8a49":"## Helper Functions","dad19e5f":"## Import Dependencies","c73aeb85":"## Segmentation model - FCN+Transfer Learning","b3f489b6":"So let's dive into the code and see how the above model can be implemented \ud83d\ude01.","c535763b":"## Categorical Arrays to Colored Segmentation Masks","8a7306aa":"## Validation and Vizualization","7221c59e":"## Train our model","da8cea7e":"Hello World \ud83d\ude03! This is my first kaggle notebook, where I will be implementing Fully Convolutional Networks for semantic segmentation on images using `Keras`. For building our model, we have used the `cityscapes-image-pairs` dataset, containing 2975 images which are used for training and 500 images for validating the performance of our model.","436e9ea3":"![FCN](https:\/\/www.jeremyjordan.me\/content\/images\/2018\/05\/Screen-Shot-2018-05-16-at-10.34.02-PM.png)\n\nImage segmentation can be interpreted as a classification problem, where the task is to classify each pixel of the image into a particular class. To build an end-to-end pixel-to-pixel segmentation network, our model must be capable of extracting rich spatial information from the images. A typical CNN used for classification takes an image as input, passes it through a series of convolutional and pooling layers and uses fully-connected layers in the end to output a fixed length vector, thus discarding all the spatial information from the original image. However, if the fully-connected layers at the end are replaced by convolutional layers, we get coarse spatial features as output instead of vectors, which can be further upsampled to form the classification maps corresponding to our image.\n\n![Segmentation Architecture](https:\/\/csdl-images.computer.org\/trans\/tp\/2017\/04\/figures\/shelh3-2572683.gif)\n\nThe architecture used in this notebook is shown in the figure above. The segmentation operation performed by the network can be divided into two parts -\n\n* **Downsampling operation -** This part is simple. Our image is propagated through a series of convolutional and pooling layers to extract the spatial information. For this I have used the `VGG-16` architecture initialized with weights pretrained on the Imagenet dataset. The final fully connected layers of the network are discarded and two new convolutional layers `conv6` and `conv7` are added in their place. While training, the entire model is trained, thus fine-tuning the pretrained weights on our dataset.\n\n* **Upsampling operation -** This generates the classification map from the feature map produced in the Downsampling operation. The operation is also referred as deconvolution or fractionally strided convolution operation, i.e. features of smaller spatial resolution are mapped to larger spatial resolution. Depending upon the upsampling strategy, our network can be of three types as shown in the figure -\n\n    * **FCN-32s** - Directly produces segmentation map from `conv7` layer by using transpose convolution with stride 32\n    * **FCN-16s** - Add 1 x 1 convolution on `pool4` and fuse it with 2X upsampled `conv7`. The segmentation map is then produced by using a transpose convolution on the result with stride 16 \n    * **FCN-8s** - Add 1 x 1 convolution on `pool3` and fuse it with 2X upsampled fused predictions of `conv7` and `pool4`. The segmentation map is then produced by using a transpose convolution on the result with stride 8","7451aad4":"After importing the libraries, we initialize all the necessary variables - \n* `train_folder` - Path for training images\n* `valid_folder` - Path for testing images\n* `width` - Width of an image\n* `height` - Height of an image\n* `classes` - No. of discrete pixel values in the segmentation maps (no. of labels)\n* `batch_size` - Size of a single batch\n* `num_of_training_samples` - Total number of training samples\n* `num_of_testing_samples` - Total number of testing samples","ae425ac5":"## Visualize Data Samples"}}