{"cell_type":{"0265f863":"code","ce98a90b":"code","bb11a948":"code","68a1c99f":"code","35f8d877":"code","cee8e2e7":"code","c22db9ac":"code","43c680b4":"code","50fd39ca":"code","163d5c81":"code","25741501":"code","76643118":"code","84a0aea8":"markdown","db7151bb":"markdown","348a3af1":"markdown","da63bd5b":"markdown","a7ef7360":"markdown","469dea70":"markdown","99d0ec6a":"markdown","20cf2d8c":"markdown","1ff1a06d":"markdown","7b4b80bf":"markdown","d1922879":"markdown","c2d217f9":"markdown"},"source":{"0265f863":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce98a90b":"!wget https:\/\/dl.fbaipublicfiles.com\/MLQA\/MLQA_V1.zip","bb11a948":"import zipfile\nwith zipfile.ZipFile('\/kaggle\/working\/MLQA_V1.zip') as zip_ref:\n    zip_ref.extractall('\/kaggle\/working\/')","68a1c99f":"import os\nimport sys\nimport random\nimport argparse\nimport json\nimport nltk\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\n\n# sys.setdefaultencoding('utf8')\nrandom.seed(42)\nnp.random.seed(42)","35f8d877":"mlqa_train_data = '\/kaggle\/working\/MLQA_V1\/dev\/dev-context-hi-question-hi.json'\nmlqa_test_data = '\/kaggle\/working\/MLQA_V1\/test\/test-context-hi-question-hi.json'\n\nwith open(mlqa_train_data, 'r') as file_input:\n    train_file = json.load(file_input)\n    \nwith open(mlqa_test_data, 'r') as file_input:\n    test_file = json.load(file_input)","cee8e2e7":"def preprocess(dataset, tier):\n    num_exs = 0 \n    examples = []\n\n    for articles_id in tqdm(range(len(dataset['data'])), desc=\"Preprocessing {}\".format(tier)):\n        article_paragraphs = dataset['data'][articles_id]['paragraphs']\n        for pid in range(len(article_paragraphs)):\n            context = article_paragraphs[pid]['context']\n            qas = article_paragraphs[pid]['qas'] \n            for qn in qas:\n                question = qn['question'] \n                ans_text = qn['answers'][0]['text']\n                ans_start_charloc = qn['answers'][0]['answer_start']\n                ans_end_charloc = ans_start_charloc + len(ans_text)\n                examples.append(\n                    {\n                        # 'id':articles_id,\n                        'context':context, \n                        'question':question, \n                        'answer_text':ans_text, \n                        'answer_start':ans_start_charloc, \n                        # 'answer_end':ans_end_charloc\n                    }\n                )\n\n                num_exs += 1\n    print(num_exs)    \n    return examples","c22db9ac":"examples_train = preprocess(train_file, 'dev')\nexamples_test = preprocess(test_file, 'test')","43c680b4":"examples = examples_train + examples_test\nmlqa = pd.DataFrame(examples)\nmlqa['language'] = 'hindi'","50fd39ca":"!git clone https:\/\/github.com\/deepmind\/xquad.git","163d5c81":"xquad_train_file = '\/kaggle\/working\/xquad\/xquad.hi.json'\n\nwith open(xquad_train_file, 'r') as file_input:\n    train_file = json.load(file_input)\n    \nexamples_train = preprocess(train_file, 'dev')\nxquad = pd.DataFrame(examples_train)\nxquad['language'] = 'hindi'","25741501":"import os, shutil\nfolder = '\/kaggle\/working\/'\nfor filename in os.listdir(folder):\n    file_path = os.path.join(folder, filename)\n    try:\n        if os.path.isfile(file_path) or os.path.islink(file_path):\n            os.unlink(file_path)\n        elif os.path.isdir(file_path):\n            shutil.rmtree(file_path)\n    except Exception as e:\n        print('Failed to delete %s. Reason: %s' % (file_path, e))","76643118":"mlqa.to_csv('mlqa_hindi.csv', index=False)\nxquad.to_csv('xquad.csv', index=False)","84a0aea8":"Load the extracted data in train_file and test_file","db7151bb":"# xquad","348a3af1":"Process the train_file and test_file by using abouve process funtion","da63bd5b":"# Pls do UPVOTE","a7ef7360":"Delete extra file and folder","469dea70":"Import libraries","99d0ec6a":"Load data in train_file and test_file.\nAdd a column of language.","20cf2d8c":"Design a function to Process the load data and return it in a dict form","1ff1a06d":"Add a colum of language ","7b4b80bf":"# Download the zip file of MLQA\n","d1922879":"# MLQA","c2d217f9":"Extract data for zip file"}}