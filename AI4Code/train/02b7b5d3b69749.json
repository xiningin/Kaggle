{"cell_type":{"70f83a40":"code","ba9e39a3":"code","37b6d88e":"code","02c8ef38":"code","8cc1ff53":"code","93ae0fa8":"code","bc4e4046":"code","8c470e02":"code","bd7fea64":"code","c7187c2e":"code","6e484ca6":"code","2983e76e":"code","15202268":"code","2cf30c60":"code","3d937576":"code","376001ae":"code","488160a9":"markdown","1537f0bb":"markdown","4164e87e":"markdown","b2551fe1":"markdown","5061082e":"markdown","edb6d54b":"markdown"},"source":{"70f83a40":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nfrom datetime import timedelta\n\n# Data Visualization Liraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport plotly.offline as pyo\nimport plotly.graph_objs as go\nfrom IPython.display import display, Markdown\n\n#hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\npyo.init_notebook_mode()\n\n#display max columns of pandas dataframe\npd.set_option('display.max_columns', None)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ba9e39a3":"cov = pd.read_csv('..\/input\/uncover\/UNCOVER_v4\/UNCOVER\/johns_hopkins_csse\/johns-hopkins-covid-19-daily-dashboard-cases-over-time.csv')\ncov_country = pd.read_csv('..\/input\/uncover\/UNCOVER_v4\/UNCOVER\/johns_hopkins_csse\/johns-hopkins-covid-19-daily-dashboard-cases-by-country.csv')","37b6d88e":"cov_country.head()\n","02c8ef38":"cov.head()","8cc1ff53":"# Helper Function - Missing data check\ndef missing_data(data):\n    missing = data.isnull().sum()\n    available = data.count()\n    total = (missing + available)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).round(4)\n    return pd.concat([missing, available, total, percent], axis=1, keys=['Missing', 'Available', 'Total', 'Percent']).sort_values(['Missing'], ascending=False)","93ae0fa8":"missing_data(cov_country)","bc4e4046":"cov_country = cov_country.drop(['people_tested','people_hospitalized','iso3'],axis = 1)","8c470e02":"cov_country[cov_country.lat.isnull()]","bd7fea64":"covid_country = cov_country.dropna()","c7187c2e":"new_df = pd.DataFrame(covid_country[[\"confirmed\",\"deaths\",\"recovered\",\"active\"]].sum()).transpose()\nnew_df['mortality_rate'] = covid_country['mortality_rate'].mean()\nnew_df['incident_rate'] = covid_country['incident_rate'].mean()\nnew_df","6e484ca6":"import folium\nfrom folium.plugins import MarkerCluster\n#empty map\nworld_map= folium.Map(tiles=\"cartodbpositron\")\nmarker_cluster = MarkerCluster().add_to(world_map)\n#for each coordinate, create circlemarker of user percent\nfor i in range(len(covid_country)):\n        lat = covid_country.iloc[i]['lat']\n        long = covid_country.iloc[i]['long']\n        radius=5\n        popup_text = \"\"\"Country : {}<br>\n                    Confimed : {}<br>\n                    Deaths : {}<br>\n                    Recovered : {}<br>\"\"\"\n        popup_text = popup_text.format(covid_country.iloc[i]['country_region'],\n                                   covid_country.iloc[i]['confirmed'],\n                                       covid_country.iloc[i]['deaths'],\n                                       covid_country.iloc[i]['recovered']\n                                   )\n        folium.CircleMarker(location = [lat, long], radius=radius, popup= popup_text, fill =True).add_to(marker_cluster)\n#show the map\nworld_map","2983e76e":"fig = px.choropleth(covid_country, locations=\"country_region\",\n                    color=covid_country[\"confirmed\"], \n                    hover_name=\"country_region\", \n                    hover_data=[\"deaths\"],\n                    locationmode=\"country names\")\n\nfig.update_layout(title_text=\"Confirmed Cases Heat Map (Log Scale)\")\nfig.update_coloraxes(colorscale=\"blues\")\n\nfig.show()","15202268":"# Top 20 countries with highest confirmed cases\ncovid_country_top20=covid_country.sort_values(\"confirmed\",ascending=False).head(20)\n\nfig = px.bar(covid_country_top20, \n             x=\"country_region\",\n             y=\"confirmed\",\n             orientation='v',\n             height=800,\n             title='Top 20 countries with COVID19 Confirmed Cases',\n            color='country_region')\nfig.show()","2cf30c60":"# Top 20 countries with highest active cases\ncovid_country_top20=covid_country.sort_values(\"active\",ascending=False).head(20)\nfig = px.bar(covid_country_top20, \n             x=\"country_region\",\n             y=\"active\",\n             orientation='v',\n             height=800,\n             title='Top 20 countries with COVID19 Active Cases',\n            color='country_region')\nfig.show()","3d937576":"# Top 20 countries with highest recovered cases\ncovid_country_top20=covid_country.sort_values(\"recovered\",ascending=False).head(20)\nfig = px.bar(covid_country_top20, \n             x=\"country_region\",\n             y=\"recovered\",\n             orientation='v',\n             height=800,\n             title='Top 20 countries with COVID19 Recovered Cases',\n            color='country_region')\nfig.show()","376001ae":"corr= covid_country.corr()\nplt.figure(figsize=(16,16))\nsns.heatmap(corr,cmap=\"YlGnBu\",annot=True)","488160a9":"# Field description\n* Country_Region - The name of the Country\n* Last_Update - The most recent date the file was pushed\n* Lat - Latitude\n* Long_ - Longitude\n* Confirmed - Aggregated confirmed case count for the state\n* Deaths - Aggregated Death case count for the state\n* Recovered - Aggregated Recovered case count for the state\n* Active - Aggregated confirmed cases that have not been resolved (Active = Confirmed - Recovered - Deaths)\n* Incident_Rate - confirmed cases per 100,000 persons\n* Mortality_Rate - Number recorded deaths * 100\/ Number confirmed cases","1537f0bb":"# correlation between dimensions","4164e87e":"> Filtering out the rows with missing latitude and longitude data.","b2551fe1":"* It seems both these data points belong to cruise ships and not necessarily associated with any country\n* Hence dropping these rows temporarily","5061082e":"# Till date global cases reported","edb6d54b":"> Dropping off columns with 100% missing values and unnecessary ones"}}