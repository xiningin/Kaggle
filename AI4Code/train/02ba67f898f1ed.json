{"cell_type":{"34e84b4d":"code","8ba8dd14":"code","d30cc6f1":"code","8ed6cb17":"code","30f18042":"code","f45b4ce4":"code","47c6319f":"code","50b64a06":"code","bbd37700":"code","893c9116":"code","be36a7fa":"code","c98cfd2c":"code","193a222e":"code","da757060":"code","2d564ee2":"code","f574c4a2":"code","41af1d57":"code","11d6d74b":"code","fe9fc488":"code","4bf7aadc":"code","0735f743":"code","68563ec3":"code","3a636800":"code","0952367b":"code","93410b4d":"code","f028ca90":"code","991b8c55":"code","c30625cf":"code","81e938a2":"code","12a2c948":"code","01d2ec0f":"code","2c167ba5":"code","3319a739":"code","2a27cd53":"code","e4f4269c":"code","3b7dbc94":"code","e92bf63a":"code","006d1859":"code","51c15aad":"code","00abe8e7":"code","8dab789d":"code","54c10e19":"code","4dd8ccd1":"code","d1c2e0cb":"code","9c86d7e4":"code","8f6453ae":"code","407aa3bf":"code","d259ad0c":"code","d68a3756":"code","0099b22e":"code","2832cc62":"code","db40e5af":"code","dbd9cdf0":"code","699e07b9":"code","70ed2d8b":"code","d86c515a":"code","6176c6cc":"code","92dc2ea6":"code","5c9be637":"code","0b39baa1":"code","2719f643":"code","85c3bc0b":"code","65165aae":"code","a98fc073":"code","9cb65ea9":"code","7b7cabf3":"code","595bf147":"code","97baf0f8":"code","3d4cbd97":"code","4fdc7c8c":"code","9ee076da":"code","568328f7":"markdown","b65714bf":"markdown","62d34ae6":"markdown","f1c4cf9a":"markdown","e8d3f023":"markdown","e0d00e96":"markdown","ea0f9fd6":"markdown","8eb69663":"markdown","b8fcf027":"markdown","5abcd87a":"markdown","5cb05ef9":"markdown","871a1b71":"markdown","bb538c1d":"markdown","353a4531":"markdown","cb22ceb4":"markdown","abc93d4a":"markdown","7f5358aa":"markdown","f97f3424":"markdown","6dd1b113":"markdown","01bfb337":"markdown","21979d5d":"markdown","c04b03f6":"markdown","c6488421":"markdown","ca7d09fc":"markdown","b9fc3c1b":"markdown","87e0260e":"markdown","96596b35":"markdown","d1780463":"markdown","205dd2cb":"markdown","6c30086c":"markdown","34ebdfe9":"markdown","90ccfb1e":"markdown","12959a71":"markdown","a4ab1b7c":"markdown","9da74c49":"markdown"},"source":{"34e84b4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8ba8dd14":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","d30cc6f1":"train_df.columns","8ed6cb17":"train_df.head()","30f18042":"train_df.describe()","f45b4ce4":"train_df.info()","47c6319f":"def bar_plot(variable):\n    var = train_df[variable]\n    varValue = var.value_counts()\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frenquency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable, varValue))","50b64a06":"category1= [\"Survived\", \"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor i in category1:\n    bar_plot(i)","bbd37700":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor i in category2:\n    print(\"{} \\n\".format(train_df[i].value_counts()))\n    ","893c9116":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","be36a7fa":"numericVar = [\"Fare\",\"Age\"]\nfor i in numericVar:\n    plot_hist(i)","c98cfd2c":"# pclass - survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean()","193a222e":"# Sex - survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending= False)","da757060":"# SibSp - survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending= False)","2d564ee2":"# Parch - survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending= False)","f574c4a2":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        Q1 = np.percentile(df[c],25)\n        Q3 = np.percentile(df[c],75)\n        IQR = Q3 - Q1\n        outlier_step = IQR * 1.5\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers\n","41af1d57":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","11d6d74b":"train_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","fe9fc488":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","4bf7aadc":"train_df.columns[train_df.isnull().any()]","0735f743":"train_df.isnull().sum()","68563ec3":"train_df[train_df[\"Embarked\"].isnull()]","3a636800":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","0952367b":"train_df[\"Embarked\"]= train_df[\"Embarked\"].fillna(\"C\")","93410b4d":"train_df[train_df[\"Embarked\"].isnull()]","f028ca90":"train_df[train_df[\"Fare\"].isnull()]","991b8c55":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","c30625cf":"train_df[train_df[\"Fare\"].isnull()]","81e938a2":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot = True, fmt= \".2f\")\nplt.show()","12a2c948":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 7)\nplt.show()","01d2ec0f":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", data = train_df, kind = \"bar\", size = 7)\nplt.show()","2c167ba5":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 7)\nplt.show()","3319a739":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","2a27cd53":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 3)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","e4f4269c":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 3)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","3b7dbc94":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 3)\ng.map(sns.barplot, \"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","e92bf63a":"train_df[train_df[\"Age\"].isnull()]","006d1859":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind = \"box\")\nplt.show()","51c15aad":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","00abe8e7":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","8dab789d":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Parch\"]))].median()\n    age_median = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_median","54c10e19":"train_df[\"Name\"].head(10)","4dd8ccd1":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","d1c2e0cb":"train_df[\"Title\"].unique()","9c86d7e4":"sns.countplot(x= \"Title\",data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","8f6453ae":"train_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]","407aa3bf":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\nplt.show()","d259ad0c":"train_df.drop(labels = [\"Name\"],axis  =1, inplace = True)","d68a3756":"train_df = pd.get_dummies(train_df,columns = [\"Title\"])\ntrain_df.head()","0099b22e":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1 \ntrain_df.head()","2832cc62":"g = sns.factorplot(x  =\"Fsize\",y = \"Survived\",data = train_df,kind = \"bar\")\nplt.show()","db40e5af":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","dbd9cdf0":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])","699e07b9":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","70ed2d8b":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","d86c515a":"train_df.Ticket.unique()","6176c6cc":"train_df = pd.get_dummies(train_df, columns = [\"Ticket\"], prefix = \"T\")\ntrain_df.head()","92dc2ea6":"sns.countplot(x = \"Pclass\",data = train_df)\nplt.show()","5c9be637":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Pclass\"])\ntrain_df.head()","0b39baa1":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns = [\"Sex\"])\ntrain_df.head(10)","2719f643":"train_df.drop(labels = [\"PassengerId\",\"Cabin\"],axis = 1,inplace = True)","85c3bc0b":"train_df.columns","65165aae":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n# e \u00e7\u00fc\u015f amk","a98fc073":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)\ntest.head(10)","9cb65ea9":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","7b7cabf3":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = logreg.score(X_train, y_train)\nacc_log_test = logreg.score(X_test, y_test)\nprint(acc_log_train)\nprint(acc_log_test)","595bf147":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","97baf0f8":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","3d4cbd97":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","4fdc7c8c":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","9ee076da":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","568328f7":"<a id = \"23\" ><a\/><br>\n## Family size","b65714bf":"<a id = \"30\" ><a\/><br>\n## train_test_split","62d34ae6":"<a id = \"9\" ><a\/><br>\n## Find Missing Value","f1c4cf9a":"<a id = \"16\" ><a\/><br>\n## Age -- Survived","e8d3f023":"<a id = \"3\" ><a\/><br>\n# Univariate Variable Analysis\n    * Categoricial Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticked, Sipsp and Parch\n    * Numericial Variable: Age, Passanger Id, Fare","e0d00e96":"<a id = \"15\" ><a\/><br>\n## Pclass -- Survived","ea0f9fd6":"<a id = \"22\" ><a\/><br>\n## Name -- Title","8eb69663":"<a id = \"29\" ><a\/><br>\n# Modeling","b8fcf027":"<a id = \"1\" ><a\/>\n# Load and Check data","5abcd87a":"<a id = \"8\" ><a\/><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","5cb05ef9":"<a id = \"14\" ><a\/><br>\n## Parch -- Survived","871a1b71":"<a id = \"7\" ><a\/><br>\n# Outlier Detection","bb538c1d":"<a id = \"13\" ><a\/><br>\n## SibSp -- Survived","353a4531":"<a id = \"12\" ><a\/><br>\n##  Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","cb22ceb4":"<a id = \"2\" ><a\/>\n# Variable Description\n1. PassengerId\n2. Survived\n3. Pclass\n4. Name\n5. Sex\n6. Age\n7. SibSp\n8. Parch\n9. Ticket\n10. Fare \n11. Cabin Embarked","abc93d4a":"<a id = \"27\" ><a\/><br>\n## Sex","7f5358aa":"<a id = \"17\" ><a\/><br>\n## Pclass -- Survived -- Age","f97f3424":"<a id = \"10\" ><a\/><br>\n## Fill Missing Value","6dd1b113":"<a id = \"31\" ><a\/><br>\n## Simple Logistic Regression","01bfb337":"<a id = \"28\" ><a\/><br>\n## Drop PassangerId and Cabin","21979d5d":"<a id = \"20\" ><a\/><br>\n## Fill missing Age","c04b03f6":"<a id = \"21\" ><a\/><br>\n# Feature Engineering","c6488421":"<a id = \"19\" ><a\/><br>\n## Embarked -- Sex -- Fare -- Survived","ca7d09fc":"# Introduction\nI did it to practice by looking at DataiTeam's tutorial. I wanted to write step by step to learn\nhttps:\/\/www.kaggle.com\/kanncaa1\/dataiteam-titanik-eda\/notebook\n\n\n### Content: \n\n1. [Load and Check data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categoricial Variable](#4)\n        * [Numerical Variable ](#5)\n1. [Basic Data Analysis](#6)\n\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [ Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill missing Age](#20)\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop PassengerId and Cabin](#28)\n1. [Modeling](#29)\n    * [train_test_split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","b9fc3c1b":"<a id = \"26\" ><a\/><br>\n## Pclass","87e0260e":"<a id = \"33\" ><a\/><br>\n## Ensemble Modeling","96596b35":"<a id = \"4\" ><a\/><br>\n## Categoricial Variable","d1780463":"<a id = \"34\" ><a\/><br>\n## Prediction and Submission","205dd2cb":"<a id = \"18\" ><a\/><br>\n## Embarked -- Sex -- Pclass -- Survived","6c30086c":"<a id = \"5\" ><a\/><br>\n## Numericial Variable","34ebdfe9":"<a id = \"6\" ><a\/><br>\n# Basic Data Analysis\n* Pclass - survived\n* Sex - survived\n* SibSp - survived\n* Parch - survived","90ccfb1e":"<a id = \"24\" ><a\/><br>\n## Embarked","12959a71":"<a id = \"32\" ><a\/><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation","a4ab1b7c":"<a id = \"11\" ><a\/><br>\n# Visualization\n    ","9da74c49":"<a id = \"25\" ><a\/><br>\n## Ticket"}}