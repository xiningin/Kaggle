{"cell_type":{"00387ab5":"code","a6e05885":"code","2c5b6951":"code","98681a4e":"code","2968ba13":"code","663eea53":"code","56adcabb":"code","9e656306":"code","806947bc":"code","11bf4475":"code","52582855":"code","83579631":"code","81fdf337":"code","fcfcf8f3":"code","1dec781e":"code","b02898f1":"markdown"},"source":{"00387ab5":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","a6e05885":"df = pd.read_csv(\"..\/input\/Admission_Predict_Ver1.1.csv\")","2c5b6951":"df.head()","98681a4e":"df.corr()","2968ba13":"df.isnull().sum()","663eea53":"# Performing Normalization for GRE Score and TOEFL Score columns\nfrom sklearn import preprocessing\nminmax_scaler = preprocessing.MinMaxScaler()\nminmax_scaler_fit=minmax_scaler.fit(df[['GRE Score', 'TOEFL Score']])\nNormalizedGREScoreAndTOEFLScore = minmax_scaler_fit.transform(df[['GRE Score', 'TOEFL Score']])\n\n\n# Creating a separate Data Frame just to store new standardized columns\nNormalizedGREScoreAndTOEFLScoreData=pd.DataFrame(NormalizedGREScoreAndTOEFLScore,columns=['GRE Score', 'TOEFL Score'])\nNormalizedGREScoreAndTOEFLScoreData.head()","56adcabb":"df['GRE Score']=NormalizedGREScoreAndTOEFLScoreData['GRE Score']\ndf['TOEFL Score']=NormalizedGREScoreAndTOEFLScoreData['TOEFL Score']\ndf.head()","9e656306":"PredictorColumns=list(df.columns)\nPredictorColumns.remove('Serial No.')\nPredictorColumns.remove('Chance of Admit ')","806947bc":"X=df[PredictorColumns].values\ny=df['Chance of Admit '].values","11bf4475":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=10)","52582855":"#Random Forest\nfrom sklearn.ensemble import RandomForestRegressor\nclf = RandomForestRegressor(n_estimators=100,criterion='mse')\n#print(clf)\nRF=clf.fit(X_train,y_train)","83579631":"%matplotlib inline\n# Plotting the importance of variables\nfeature_importances = pd.Series(RF.feature_importances_, index=PredictorColumns)\n\n# Plotting the feature importance for Top 10 most important columns\nfeature_importances.nlargest(10).plot(kind='barh')","81fdf337":"# Predicting the Rating values for testing data\nPredAdmit = RF.predict(X_test)\n\n# Creating a DataFrame of Zomato Testing data\nAdmitData=pd.DataFrame(X_test, columns=PredictorColumns)\nAdmitData['ChancesOfAdmit']=y_test\nAdmitData['PredictedChancesOfAdmit']=PredAdmit\nAdmitData.head()","fcfcf8f3":"# Calculating the Absolute Percentage Error committed in each prediction\nAdmitData['APE']=100 * (abs(AdmitData['ChancesOfAdmit'] - AdmitData['PredictedChancesOfAdmit'])\/AdmitData['ChancesOfAdmit'])\n","1dec781e":"\nprint('Mean Absolute Percent Error(MAPE): ',round(np.mean(AdmitData['APE'])), '%')\nprint('Average Accuracy of the model: ',100 - round(np.mean(AdmitData['APE'])), '%')","b02898f1":"**Randomforest to Predict graduate Admission**"}}