{"cell_type":{"0fee88d4":"code","0c4dac2d":"code","9c61bba5":"code","8f5909e8":"code","04a60e51":"code","bd8fb719":"code","07952fe3":"code","e9a230ba":"code","5fbf94e2":"code","7966663d":"code","3c7ada7a":"code","392c3a34":"code","7648bde3":"code","2ac27133":"code","2cf02b81":"code","bbf2e731":"code","58f9f260":"code","33d65454":"code","41f2039d":"code","d9b16b5d":"code","1d263017":"code","514fcd70":"code","71b043fa":"code","0c51c09e":"code","c6af7504":"code","0f4afdf9":"code","c076d11f":"code","4f24df48":"code","5fd830a5":"code","d16cab34":"code","ffe6523c":"code","a16d8dad":"code","4a852924":"code","d8c828a4":"code","ea79044d":"code","dc2e81b2":"markdown","0a8de38b":"markdown","5072ecae":"markdown","adff8570":"markdown","70ef8db1":"markdown","884b6fd7":"markdown","da1aa2bf":"markdown","b908df02":"markdown","6cf69212":"markdown","80df89bf":"markdown","3d120024":"markdown","512e95ef":"markdown","477ed05e":"markdown"},"source":{"0fee88d4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","0c4dac2d":"dataset = pd.read_csv('..\/input\/wine-m\/train.csv')","9c61bba5":"dataset.head()","8f5909e8":"dataset.info()","04a60e51":"dataset.describe()","bd8fb719":"print(dataset.target.value_counts())\ndataset.target.value_counts().plot(kind='bar')\nplt.show()","07952fe3":"fig, ax = plt.subplots(5,3 , figsize = (15,20)) # Making Subplots\n\nsns.barplot(data = dataset, y =\"alcohol\", x=\"target\", ax=ax[0,0]);\nsns.barplot(data = dataset, y =\"malic_acid\", x=\"target\", ax=ax[0,1]);\nsns.barplot(data = dataset, y =\"ash\", x=\"target\", ax=ax[0,2]);\nsns.barplot(data = dataset, y =\"alcalinity_of_ash\", x=\"target\", ax=ax[1,0]);\nsns.barplot(data = dataset, y =\"magnesium\", x=\"target\", ax=ax[1,1]);\nsns.barplot(data = dataset, y =\"total_phenols\", x=\"target\", ax=ax[1,2]);\nsns.barplot(data = dataset, y =\"flavanoids\", x=\"target\", ax=ax[2,0]);\nsns.barplot(data = dataset, y =\"nonflavanoid_phenols\", x=\"target\", ax=ax[2,1]);\nsns.barplot(data = dataset, y =\"proanthocyanins\", x=\"target\", ax=ax[2,2]);\nsns.barplot(data = dataset, y =\"color_intensity\", x=\"target\", ax=ax[3,0]);\nsns.barplot(data = dataset, y =\"hue\", x=\"target\", ax=ax[3,1]);\nsns.barplot(data = dataset, y =\"od280\/od315_of_diluted_wines\", x=\"target\", ax=ax[3,2]);\nsns.barplot(data = dataset, y =\"proline\", x=\"target\", ax=ax[4,0]);","e9a230ba":"# Splitting datset to X and y axis \n\nX=dataset.iloc[: , 1:14].values\ny=dataset.iloc[: ,-1].values","5fbf94e2":"X","7966663d":"y","3c7ada7a":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2, random_state=0)","392c3a34":"#Feature Scaling\n\nfrom sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","7648bde3":"# Adding layers and activation function\n\nimport tensorflow as tf\nann=tf.keras.models.Sequential()\n\nann.add(tf.keras.layers.Dense(units=6,activation='relu'))\nann.add(tf.keras.layers.Dense(units=6,activation='relu'))\nann.add(tf.keras.layers.Dense(units=1,activation='tanh'))\n\n#Compiling\nann.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy'])","2ac27133":"# Training the model\n\nann.fit(X_train,y_train,batch_size=32,epochs=200)","2cf02b81":"# Prediction on Test data\n\ny_pred = ann.predict(X_test)\ny_pred = (y_pred > 0.5)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","bbf2e731":"# Calculating quality for model\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","58f9f260":"# KNN:K Nearest Neighbour\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier=KNeighborsClassifier(n_neighbors=5)\nclassifier.fit(X_train,y_train)","33d65454":"# Training the model\ny_pred=classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","41f2039d":"# Calculating quality for model\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","d9b16b5d":"from sklearn.tree import DecisionTreeClassifier  \nclassifier= DecisionTreeClassifier(criterion='entropy', random_state=0)  \nclassifier.fit(X_train, y_train)  ","1d263017":"# Training the model\ny_pred=classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","514fcd70":"# Calculating quality for model\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","71b043fa":"from sklearn.naive_bayes import GaussianNB  \nclassifier = GaussianNB()  \nclassifier.fit(X_train, y_train)  ","0c51c09e":"# Training the model\ny_pred=classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","c6af7504":"# Calculating quality for model\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","0f4afdf9":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg = logreg.fit(X_train,y_train)\n","c076d11f":"# Training the model\ny_pred=classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","4f24df48":"# Calculating quality for model\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","5fd830a5":"from sklearn.svm import SVC\nclassifier = SVC(kernel='rbf', random_state = 1)\nclassifier.fit(X_train,y_train)","d16cab34":"# Training the model\ny_pred=classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\nfinal_classifier = classifier","ffe6523c":"# Calculating quality for model\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","a16d8dad":"# In this case maximum quality is for SVM so we will use this algorithm\n\nfin_test_data = pd.read_csv('..\/input\/wine-m\/test.csv')\ntest_data = fin_test_data.drop('id',axis=1)\ntest_data = sc.fit_transform(test_data)","4a852924":"fin_predictions = final_classifier.predict(test_data)\nfin_predictions","d8c828a4":"sample_sub = pd.read_csv('..\/input\/wine-m\/sample_submit.csv')\nsample_sub","ea79044d":"output = pd.DataFrame({'id':fin_test_data.id,'target':fin_predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","dc2e81b2":"## Importing Libraries","0a8de38b":"### Applying Decision Tree","5072ecae":"# Model Selection","adff8570":"### Support Vector Machine","70ef8db1":"### Applying ANN","884b6fd7":"## Data Visualisation","da1aa2bf":"## Machine Learning Models","b908df02":"### Applying KNN","6cf69212":"## Loading Dataset","80df89bf":"### Applying Naive Bayes","3d120024":"## Splitting Data in Train and Test","512e95ef":"### Logistic Regression","477ed05e":"## Final Prediction Using most Efficient algorithm\n"}}