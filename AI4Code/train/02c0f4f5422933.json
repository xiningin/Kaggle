{"cell_type":{"949b0725":"code","b4f91d7d":"code","eb1b3b6f":"code","2275f372":"code","a7f93a8a":"code","a1170680":"code","bbaf39fe":"code","8ec10fc8":"code","0eba7d84":"code","1822bbf8":"code","b714240b":"code","824f0c3b":"code","7346bf29":"code","ed2376ea":"code","4f9d0037":"code","5be2e6da":"code","9ebde413":"code","b9adba0f":"code","b499246e":"code","bf1e4cc3":"code","37934236":"code","0f63f22f":"code","9b4ec9b3":"markdown","2f88d8a8":"markdown","298c3134":"markdown","7d425058":"markdown"},"source":{"949b0725":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfrom tqdm import tqdm\nimport cv2\nimport random as rn","b4f91d7d":"pd.options.mode.chained_assignment = None\n%config Completer.use_jedi = False\n\nfrom IPython.core.interactiveshell import InteractiveShell   \nInteractiveShell.ast_node_interactivity = \"all\"","eb1b3b6f":"os.listdir('\/kaggle\/input\/cassava-leaf-disease-classification')\n\n# tfrecords is a tensorflow file format for storing the images\n# json files are mainly used for data transfer (mostly text)\n# csv files contains image file names and their corresponding labels","2275f372":"# Reading json files to know different classes of possible leaf disease\n\nimport json\n\nwith open('\/kaggle\/input\/cassava-leaf-disease-classification\/label_num_to_disease_map.json') as f:\n    print(json.loads(f.read()))","a7f93a8a":"img_lbl = pd.read_csv('\/kaggle\/input\/cassava-leaf-disease-classification\/train.csv')\nimg_lbl.head()","a1170680":"# Removing Duplicate images as mentioned in the discussion ('1562043567.jpg', '3551135685.jpg', '2252529694.jpg' are duplicate)\n\nimg_lbl=img_lbl[~img_lbl['image_id'].isin(['1562043567.jpg', '3551135685.jpg', '2252529694.jpg'])]","bbaf39fe":"img_lbl['label'].value_counts()\n\n# Cassava Mosaic Disease (CMD) is the most spread leaf disease.\n# Cassava Bacterial Blight (CBB) is the least spread leaf disease.","8ec10fc8":"# importing some random images\n\nX=[]   # variable to store leaf images\nZ=[]   # variable to store leaf diseases\n\nfor img, dseas in tqdm(img_lbl.sample(9).values):\n    image=cv2.imread('\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\/{}'.format(img),cv2.IMREAD_COLOR)\n    image=cv2.resize(image,(600,600))\n    X.append(image)    # Appending the images into X\n    Z.append(dseas)    # Appending the image labels into Z","0eba7d84":"fig, ax=plt.subplots(3,3)\nfig.set_size_inches(20,20)\nl=0\nfor row in range(3):    \n    for col in range(3):\n        ax[row,col].imshow(X[l])\n        ax[row,col].set_title('Disease Class : '+str(Z[l]))\n        l=l+1\n\nplt.tight_layout\nsns.set(font_scale=1.5)","1822bbf8":"# Splitting data into train and validation\n\nfrom sklearn.model_selection import train_test_split\ntrain, validation = train_test_split(img_lbl,test_size=0.2,shuffle=True,stratify=img_lbl['label'])","b714240b":"from keras.models import Sequential\nfrom keras.layers import Conv2D,GlobalAveragePooling2D,Dense,Flatten,BatchNormalization,Dropout,MaxPooling2D,AvgPool2D\nfrom tensorflow.keras.applications import EfficientNetB3\nimport tensorflow as tf","824f0c3b":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# Imagedatagenerator for training\ndatagen_trng = ImageDataGenerator(preprocessing_function=tf.keras.applications.efficientnet.preprocess_input,\n                                  rescale=1.\/255,\n                                  rotation_range=30,\n                                  width_shift_range=0.3,\n                                  height_shift_range=0.3,\n                                  shear_range=0.2,\n                                  zoom_range=0.3,\n                                  horizontal_flip=True,\n                                  fill_mode='nearest')\n\n# label should be converted to string to be used\ntrain['label']=train['label'].astype('str')                        \n\n# Augmenting Images for training\ntrain_datagen=datagen_trng.flow_from_dataframe(dataframe=train,\n                                               directory='\/kaggle\/input\/cassava-leaf-disease-classification\/train_images',\n                                               x_col=\"image_id\",\n                                               y_col=\"label\",\n                                               color_mode=\"rgb\",\n                                               target_size=(420,420),\n                                               batch_size=16,\n                                               seed=42,\n                                               class_mode=\"categorical\")","7346bf29":"# Imagedatagenerator for validation\ndatagen_valid = ImageDataGenerator(rescale=1.\/255,\n                                   preprocessing_function=tf.keras.applications.efficientnet.preprocess_input)\n\n# label should be converted to string to be used\nvalidation['label']=validation['label'].astype('str')\n\n# Augmenting Images for validating\nvalid_datagen=datagen_valid.flow_from_dataframe(dataframe=validation,\n                                                directory='\/kaggle\/input\/cassava-leaf-disease-classification\/train_images',\n                                                x_col='image_id',\n                                                y_col=\"label\",\n                                                color_mode=\"rgb\",\n                                                target_size=(420,420),\n                                                batch_size=16,\n                                                seed=42,\n                                                class_mode=\"categorical\")","ed2376ea":"# Defining model\n\nmodel=Sequential()\nmodel.add(EfficientNetB3(include_top=False,weights='imagenet',input_shape=(420,420,3)))\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Flatten())\nmodel.add(Dense(128,activation='relu',bias_regularizer=tf.keras.regularizers.l1_l2()))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(256,activation='relu',bias_regularizer=tf.keras.regularizers.l1_l2()))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(5,activation='softmax'))\n\nmodel.compile(optimizer=tf.keras.optimizers.Adam(),loss=tf.keras.losses.CategoricalCrossentropy(),metrics=tf.keras.metrics.CategoricalAccuracy())\nmodel.summary()","4f9d0037":"# Defining callbacks\n\nfrom keras.callbacks import EarlyStopping,ReduceLROnPlateau\n\nearly_stop=EarlyStopping(monitor='val_loss',\n                         min_delta=0.002,\n                         patience=3,\n                         mode='min',\n                         verbose=1,\n                         restore_best_weights=True)\n\nreduce_lr=ReduceLROnPlateau(monitor='val_loss',\n                            patience=2,\n                            factor=0.1,\n                            mode='min',\n                            min_lr=1e-6,verbose=1)","5be2e6da":"model.fit(train_datagen,\n          batch_size=train_datagen.n\/\/train_datagen.batch_size,\n          epochs=25,verbose=1,shuffle=True,\n          validation_data=valid_datagen,\n          callbacks=[early_stop,reduce_lr])","9ebde413":"## Saving the model as HDF5\nmodel.save('casava_leaf_disease.h5')","b9adba0f":"# Loading submission file\nsub_csv=pd.read_csv('\/kaggle\/input\/cassava-leaf-disease-classification\/sample_submission.csv')","b499246e":"# Loading test images\ndatagen_test=ImageDataGenerator(rescale=1.\/255,\n                                preprocessing_function=tf.keras.applications.efficientnet.preprocess_input)\n\ntest_datagen=datagen_test.flow_from_dataframe(dataframe=sub_csv,\n                                              directory='\/kaggle\/input\/cassava-leaf-disease-classification\/test_images',\n                                              x_col='image_id',\n                                              target_size=(420,420),\n                                              color_mode='rgb',\n                                              batch_size=16,\n                                              class_mode=None)","bf1e4cc3":"# Doing predictions on test data\nfinal_rslt=np.argmax(model.predict(test_datagen))","37934236":"# Creating Final output\nfinal_results=pd.DataFrame({'image_id':sub_csv.image_id,'label':final_rslt})\nfinal_results","0f63f22f":"final_results.to_csv('submission.csv',index=False)","9b4ec9b3":"# Augmenting Images","2f88d8a8":"## Importing Libraries","298c3134":"# Model Creation","7d425058":"## Checking our model on test data"}}