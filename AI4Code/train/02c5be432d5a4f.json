{"cell_type":{"320975ac":"code","58201fea":"code","7bfcebd8":"code","ca41f7de":"code","ecb9b20e":"code","b08aa42c":"code","ed72df5f":"code","fa9c4f8b":"code","65967e1b":"code","568fb79e":"code","eb4b8a51":"code","464f6388":"code","668ed66f":"code","f01abc68":"code","b8f1c9bc":"code","1522acc5":"code","ab4f8d55":"code","5c7b1305":"code","3750851f":"code","9299535a":"code","739397a9":"code","62f69a6c":"code","ac1d8428":"code","6220cc54":"code","bf889c4a":"code","848bd8fa":"code","3243a479":"code","dfba0004":"code","1b8dd4a0":"code","a9d03541":"code","02d34444":"code","936710fe":"code","1879d223":"code","db812b56":"code","ecade97c":"code","0a41c9fe":"code","2b19e359":"markdown","183e7668":"markdown","b38b7e9a":"markdown","d1d3aca7":"markdown","44e688f4":"markdown","b03ca1de":"markdown","983f28d4":"markdown","f23d7d1c":"markdown"},"source":{"320975ac":"import numpy as np \nimport pandas as pd\n\nimport os\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D, BatchNormalization\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array, ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping\n\n\nfrom sklearn.utils import shuffle\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\n\nimport matplotlib.pyplot as plt","58201fea":"letters = pd.read_csv(\"..\/input\/classification-of-handwritten-letters\/letters.csv\")\nletters2 = pd.read_csv(\"..\/input\/classification-of-handwritten-letters\/letters2.csv\")\nletters3 = pd.read_csv(\"..\/input\/classification-of-handwritten-letters\/letters3.csv\")\n","7bfcebd8":"source = pd.Series([])\n\nletters[\"source\"] = source\nletters2[\"source\"] = source\nletters3[\"source\"] = source\nfor i in range(len(letters)): \n    letters[\"source\"][i] = \"\/letters\"\n\nfor i in range(len(letters2)): \n    letters2[\"source\"][i] = \"\/letters2\"\n    \nfor i in range(len(letters3)):\n    letters3[\"source\"][i] = \"\/letters3\"\n","ca41f7de":"data = pd.concat((letters, letters2, letters3), axis = 0, ignore_index = True)","ecb9b20e":"data.shape","b08aa42c":"data.head()","ed72df5f":"data.tail()","fa9c4f8b":"data = shuffle(data, random_state = 42).reset_index(drop = True)","65967e1b":"data.head()","568fb79e":"data.tail()","eb4b8a51":"dirname = \"..\/input\/classification-of-handwritten-letters\"\nimgs = []\nfor i in range(len(data)):\n    imgs.append(load_img(os.path.join(dirname + data[\"source\"][i], data[\"file\"][i]), target_size = (32, 32)))","464f6388":"imgs_array = np.array([img_to_array(img) for img in imgs])\/255","668ed66f":"imgs_array.shape","f01abc68":"targets = []\nfor i, row in data.iterrows(): \n    t = [data.letter[i], data.background[i]]\n    targets.append(t)","b8f1c9bc":"targets_array = np.array(targets)","1522acc5":"X_train, X_val, y_train, y_val = train_test_split(imgs_array, targets_array, \n                                                test_size=0.2,  \n                                                random_state=42)","ab4f8d55":"mlb = MultiLabelBinarizer()\ny_train = mlb.fit_transform(y_train)\ny_val = mlb.transform(y_val)","5c7b1305":"for (i, target) in enumerate(mlb.classes_):\n    print(\"{}. {}\".format(i + 1, target))","3750851f":"def display_image(images, list_of_labels = np.arange(15)): \n    plt.figure(figsize=(12,12))\n    for i in list_of_labels: \n        plt.subplot(3, 5, i+1)\n        plt.title('Letter: %s \\n'%targets[i][0]+\\\n                    'Background: %s\\n'%targets[i][1],\n                         fontsize=18)\n        plt.imshow(imgs[i])\n        \n    plt.subplots_adjust(bottom = 0.001)\n    plt.subplots_adjust(top = 0.99)\n    plt.show()\n   ","9299535a":"display_image(imgs_array)","739397a9":"print(\"shape of X_train: {} \\nshape of X_val: {} \\nshape of y_train: {} \\nshape of y_val: {}\".format(\n    X_train.shape, X_val.shape, y_train.shape, y_val.shape))","62f69a6c":"img_rows = 32\nimg_cols = 32\nchannels = 3\nclasses = len(mlb.classes_)\n\nmodel = Sequential()\n\nmodel.add(Conv2D(64, kernel_size = (3, 3), padding = 'Same',\n                     activation = 'relu',\n                     input_shape = (img_rows, img_cols, channels)))\nmodel.add(BatchNormalization(axis=-1))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Conv2D(64, (3, 3), padding = 'Same', activation = 'relu'))\nmodel.add(BatchNormalization(axis=-1))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(128, (3, 3), padding = 'Same', activation = 'relu'))\nmodel.add(BatchNormalization(axis=-1))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Conv2D(128, (3, 3), padding = 'Same', activation = 'relu'))\nmodel.add(BatchNormalization(axis=-1))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(1024, activation = 'relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(classes, activation='sigmoid'))\n\nmodel.summary()\n\n\n","ac1d8428":"model.compile(loss=keras.losses.binary_crossentropy,\n              optimizer='adam',\n              metrics=['accuracy'])","6220cc54":"aug = ImageDataGenerator(\n        rotation_range=5, \n        zoom_range = 0.2, \n        width_shift_range=0.2,  \n        height_shift_range=0.2 \n        )","bf889c4a":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor = 'val_loss', mode = 'min', verbose = 1, patience = 10)","848bd8fa":"BS = 32\nEPOCHS = 100\nhistory = model.fit(x=aug.flow(X_train, y_train, batch_size = BS),\n                    steps_per_epoch = len(X_train)\/\/BS,   \n                    epochs = EPOCHS,\n                    verbose = 1,\n                    validation_data = (X_val, y_val), callbacks=[early_stop])","3243a479":"loss_accuracy = pd.DataFrame(model.history.history)","dfba0004":"loss_accuracy.plot()\nplt.title(\"Training Loss and Accuracy\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"upper left\")","1b8dd4a0":"predictions = model.predict(X_val)","a9d03541":"predictions[predictions>0.5] = 1\npredictions[predictions<=0.5] = 0","02d34444":"print(classification_report(y_val, predictions))","936710fe":"pred_results = mlb.inverse_transform(predictions)\ntrue_results = mlb.inverse_transform(y_val)","1879d223":"correct = 0 \ntotal = 0 \nfor i in range(len(y_val)):\n    if pred_results[i] == true_results[i]:\n        correct += 1\n        \n    total += 1 \n    \nprint(\"Accuracy: \", round(correct\/total, 3))","db812b56":"def display_predicted_image(images, list_of_labels = np.arange(15)): \n    plt.figure(figsize=(12,12))\n    for i in list_of_labels:\n        if len(pred_results[i]) != 2:\n            print(\"Sorry, prediction {} has the wrong size, WRONG PREDICTION\".format(i+1))\n        else:\n            plt.subplot(3, 5, i+1)\n            plt.title('Prediction %s \\n'%(i+1)+\\\n                        'True Letter: %s \\n'%true_results[i][1]+\\\n                            'True Background: %s\\n'%true_results[i][0]+\\\n                                'Predicted Letter: %s \\n'%pred_results[i][1]+\\\n                                  'Predicted Background: %s \\n'%pred_results[i][0],\n                                     fontsize=18)\n        \n            plt.imshow(images[i])\n        \n    plt.subplots_adjust(bottom = 0.005)\n    plt.subplots_adjust(top = 1.5)\n    plt.subplots_adjust(left = 0.125)\n    plt.subplots_adjust(right = 1.5)\n    plt.show()","ecade97c":"display_predicted_image(X_val, list_of_labels = np.arange(15))","0a41c9fe":"model.save(\"handwritten_classification_model.h5\")\nprint(\"Saved model to disk\")","2b19e359":"There are 33 distinct letters and 4 different backgrounds. \n\nBackrground Labels: \n* 0 => striped\n* 1 => gridded\n* 2 => no background\n* 3 => graph paper","183e7668":"# Data Collection and Preprocessing ","b38b7e9a":"# The CNN Model","d1d3aca7":"# Saving the model","44e688f4":"# Import Necessary Packages","b03ca1de":"# Model Evaluation","983f28d4":"Both the letter and the background are considered as labels.\n\nTargets is a list of 2 element lists where the first element is the letter and the second is the background. ","f23d7d1c":"Scikir-learn library's MultiLabelBinarizer allows to one-hot encode features with multiple labels. "}}