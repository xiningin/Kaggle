{"cell_type":{"b70329a2":"code","3ef2828b":"code","4509cc69":"code","75dba9f9":"code","c73b2fe6":"code","cf8af4fe":"code","5dfa4fb0":"code","8e6cea17":"code","704df559":"code","2f746701":"code","f9f884ee":"code","0d9abdf1":"code","c17a20d2":"code","998964dc":"code","00f443ab":"code","635a1ec0":"code","9ee288e0":"code","6acece96":"code","032cf2cd":"code","ccb60a7b":"code","a934f0f2":"code","2bd58d4f":"code","37c6626c":"code","2858c7aa":"code","ceb82167":"code","c03147f0":"code","d0ffbc35":"code","1f43a4e6":"code","74069b64":"code","947198b2":"code","68ebfcf0":"markdown","68be2802":"markdown","69c8bf50":"markdown","e86b288d":"markdown","238379f1":"markdown","013694ac":"markdown","7c46af76":"markdown","b2dc9b72":"markdown","0e9139ee":"markdown","cf0c6c6d":"markdown","ab3ee12b":"markdown","6d93822e":"markdown","43d44e1b":"markdown","f9c5f79e":"markdown","3854cd47":"markdown","1a44ba94":"markdown","77774450":"markdown","59e3237c":"markdown","49570d79":"markdown","c7192051":"markdown"},"source":{"b70329a2":"import pandas as pd \npd.set_option(\"display.max_rows\", None, \"display.max_columns\", None)\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\nimport numpy as np \nimport seaborn as sns \nimport matplotlib.pyplot as plt \nimport plotly.express as px\nimport matplotlib.image as image\nimport plotly.graph_objects as go\nimport plotly.io as pio","3ef2828b":"from IPython.core.display import HTML\nHTML(\"\"\"\n<style>\n.output_png {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n<\/style>\n\"\"\")","4509cc69":"df = pd.read_csv(r'..\/input\/premier-league\/results.csv')\ndf.head()","75dba9f9":"for colname in df.select_dtypes(include=['float64']):\n    df[colname]=df[colname].astype(int)","c73b2fe6":"df.info()","cf8af4fe":"df.describe()","5dfa4fb0":"df.nunique()","8e6cea17":"df.isnull().sum()","704df559":"for colname in df.select_dtypes(include=['float64']):\n    df[colname]=df[colname].astype(int)","2f746701":"conditions1 = [\n    (df['home_goals'] > df['away_goals']),\n    (df['home_goals'] < df['away_goals']),\n    (df['home_goals'] == df['away_goals']) ]\n\nconditions2 = [\n    (df['home_goals'] < df['away_goals']),\n    (df['home_goals'] > df['away_goals']),\n    (df['home_goals'] == df['away_goals']) ]\n\n\nvalues = [3,0,1]\n\ndf['HomeTeam points'] = np.select(conditions1, values)\ndf['AwayTeam points'] = np.select(conditions2, values)\n","f9f884ee":"def goals(team):\n    \n    if team in df.home_team.unique():\n\n        # Filter for a single team home matches\n        team_home= df.loc[(df.home_team==team)].reset_index()\n        \n        # Group by the goals scored and recieved in home matches for every season \n        x = pd.DataFrame(team_home.groupby(['season'])[['home_goals','away_goals']].apply(sum))\n\n        # rename the columns\n        x.rename(columns={\"home_goals\": \"goals scored Home\",\"away_goals\": \"goals conceded Home\"},inplace =True)\n        team_away = df.loc[(df.away_team==team)].reset_index()\n\n        # Filter for a single team away matches\n        y = pd.DataFrame(team_away.groupby(['season'])[['home_goals','away_goals']].apply(sum))\n\n        # Rename the columns\n        y.rename(columns={\"away_goals\": \"goals scored Away\",\"home_goals\": \"goals conceded Away\"},inplace=True)\n        \n        # Concate the home and away datasets\n        result = pd.concat([x, y], axis=1)\n\n        # New columns for more detailed information\n        result['Total Goals scored']=result['goals scored Home']+result['goals scored Away']\n        result['Total Goals conceded']=result['goals conceded Home']+result['goals conceded Away']\n        result['Goal Difference'] = result['Total Goals scored'] - result['Total Goals conceded']\n\n        # Drop NaN values\n        result.dropna(subset = result.columns, inplace=True)\n        result.reset_index()\n\n        # Drop unneccesary columns\n        result.drop(columns=['goals scored Home','goals scored Away','goals conceded Away','goals conceded Home'],inplace=True)\n        \n        # Data visualization\n        fig = px.scatter(data_frame=result, x=\"Total Goals scored\",y=\"Total Goals conceded\",text=result.index,template='simple_white', width=1200, height=800,title='{} team performance from 2006\/2007 season to 2017\/2018 season'.format(team))\n        fig.show()\n        return result","0d9abdf1":"goals('Liverpool')","c17a20d2":"def WLD(team):\n    \n    TeamHomeMatches=pd.DataFrame()\n    TeamAwayMatches=pd.DataFrame()\n    summary = pd.DataFrame()\n\n    for season in df.season.unique():\n\n        if team in df.home_team.unique():\n\n            filter = df.loc[(df['home_team']=='Liverpool')&(df.season==season)]\n            test2 =pd.DataFrame(filter.result.value_counts())\n            test2.rename(columns={'result':season},index={'H':'W','A':'L'},inplace=True)\n            TeamHomeMatches = pd.concat([TeamHomeMatches,test2],axis=1)\n            TeamHomeMatches.fillna('0',inplace=True)\n            TeamHomeMatches= TeamHomeMatches.reindex([\"W\", \"D\", \"L\"])\n            for x in TeamHomeMatches.columns:\n                TeamHomeMatches[x]=TeamHomeMatches[x].astype(int)\n\n            # Away matches\n            filter6 = df.loc[(df['away_team']=='Liverpool')&(df.season==season)]\n            test5 =pd.DataFrame(filter6.result.value_counts())\n            test5.rename(columns={'result':season},index={'H':'L','A':'W'},inplace=True)\n            TeamAwayMatches = pd.concat([TeamAwayMatches,test5],axis=1)\n            TeamAwayMatches.fillna('0',inplace=True)\n            TeamAwayMatches=TeamAwayMatches.reindex([\"W\", \"D\", \"L\"])\n            for x in TeamAwayMatches.columns:\n                TeamAwayMatches[x]=TeamAwayMatches[x].astype(int)\n\n            summary = TeamAwayMatches.add(TeamHomeMatches, fill_value=0)\n\n    display(summary)","998964dc":"WLD('Manchester City')","00f443ab":"def HA_goals(season):\n\n    if season in df.season.unique():\n\n        df2 = pd.DataFrame(df.loc[df.season==season])\n\n        # Group the goals scored home\n        home = pd.DataFrame(df2.groupby(['home_goals'])['home_goals'].count())\n        home.rename(columns={'home_goals':'Goals by home teams'},inplace=True)\n\n        # Group the goals scored away\n        away = pd.DataFrame(df2.groupby(['away_goals'])['away_goals'].count())\n        away.rename(columns={'away_goals':'Goals by away teams'},inplace=True)\n\n        goalsCount= pd.concat([home,away],axis=1)\n        goalsCount.fillna(0,inplace=True)\n        for x in goalsCount.columns:\n            goalsCount[x]=goalsCount[x].astype(int)\n\n        display(goalsCount)\n\n        # Plot the data\n        fig = go.Figure(data=[\n        go.Bar(name='Home', x=goalsCount.index, y=goalsCount['Goals by home teams']),\n        go.Bar(name='Away', x=goalsCount.index, y=goalsCount['Goals by away teams'])\n        ])\n        # Change the bar mode\n        fig.update_layout(title_text='Home\/Away Goals Distribution in {} Season'.format(season),width=1200, height=800)\n        fig.show()\n","635a1ec0":"HA_goals('2008-2009')","9ee288e0":"def season(season):\n    if season in df.season.unique():\n\n        AllSeasons=pd.DataFrame()\n\n        # Filter for matches in a specific season\n        seasonhbd= pd.DataFrame(df.loc[df.season==season]).reset_index(drop=True)\n        \n        # Group by home and away points for every team in the season\n        points_home = seasonhbd.groupby(['home_team'])['HomeTeam points'].sum()\n        points_away = seasonhbd.groupby(['away_team'])['AwayTeam points'].sum()\n        \n        # Concat the two dataframes\n        points = pd.concat([points_home,points_away],axis=1)\n\n        # Rename the columns\n        points.rename(columns={\"HomeTeam points\":\"H Pts\",\"AwayTeam points\":\"A Pts\"},inplace=True)\n        \n        # Group by home and away goals scored for every team in the season\n        goals_home = seasonhbd.groupby(['home_team'])['home_goals'].sum()\n        goals_away = seasonhbd.groupby(['away_team'])['away_goals'].sum()\n\n        # Concat the two dataframes\n        goals_scored = pd.concat([goals_home,goals_away],axis=1)\n        \n        # Group by home and away goals recieved for every team in the season\n        goals_recieved_home = seasonhbd.groupby(['home_team'])['away_goals'].sum()\n        goals_recieved_away = seasonhbd.groupby(['away_team'])['home_goals'].sum()\n        \n        # Concat the previous two dataframes\n        goals_recieved = pd.concat([goals_recieved_home,goals_recieved_away],axis=1)\n\n        # Rename the columns\n        goals_scored.rename(columns={\"home_goals\": \"HGS\",\"away_goals\": \"AGS\"},inplace=True)\n        goals_recieved.rename(columns={\"away_goals\": \"HGR\",\"home_goals\": \"AGR\"},inplace=True)\n\n        goals = pd.concat([goals_scored,goals_recieved],axis=1)\n        total = pd.concat([goals,points],axis=1)\n\n        # New columns for more detailed information\n        total['Pts']=total['H Pts']+total['A Pts']\n        total['TGS']=total['HGS']+total['AGS']\n        total['TGR']=total['HGR']+total['AGR']\n        total['GD']=total['TGS']-total['TGR']\n        total['Goals Per 90\"']=total['TGS']\/38\n        total['Goals Per 90\"']=total['Goals Per 90\"'].round(2)\n\n        # sort the teams according to their Attacking performance \n        total = total.sort_values(by='TGS',ascending=False)\n        total['Attack #']=np.arange(1,21,1)\n\n        # sort the teams according to their Defensive performance \n        total = total.sort_values(by='TGR',ascending=True)\n        total['Defence #']=np.arange(1,21,1)\n\n        # Sort the teams according to their position in this season\n        total = total.sort_values(by='Pts',ascending=False)\n        total['Pl']=38\n\n        # Rearrange the columns in the dataframe\n        total =total.reindex(['Pl','HGS','AGS','HGR','AGR','TGS','Attack #','TGR','Defence #','GD','Goals Per 90\"','H Pts','A Pts','Pts'], axis=1)\n\n        # Display the season final table\n        display(total)\n        \n        # Data visualization\n        fig = px.bar(total, x=total.index, y='Pts',width=1200, height=750,labels={\n                     \"index\": \"Teams\",\n                     \"Pts\": \"Points\"},template='simple_white',title='The Final Rankings For Season {}'.format(season))\n        fig.show()\n","6acece96":"season(\"2009-2010\")","032cf2cd":"def BiggestMatches(season):\n    \n    if season in df.season.unique():\n        Matches=pd.DataFrame(df.loc[df.season==season].reset_index(drop=True))\n\n        awayMatch = Matches.loc[Matches['away_goals'].idxmax()]\n        homeMatch = Matches.loc[Matches['home_goals'].idxmax()]\n\n        print(\"The biggest number of goals scored in a single match by a home team :\")\n        print('\\n')\n        display(homeMatch)\n        print(\"\\n\")\n        print(\"The biggest number of goals scored in a single match by an away team :\")\n        print(\"\\n\")\n        display(awayMatch)\n","ccb60a7b":"BiggestMatches(\"2007-2008\")","a934f0f2":"Allseasons=pd.DataFrame()\nfor season in df.season.unique():\n\n    # Filter by matches in a single season \n    seasonhbd= pd.DataFrame(df.loc[df.season==season]).reset_index(drop=True)\n\n    # Group by home and away points for every team in the season\n    points_home = seasonhbd.groupby(['home_team'])['HomeTeam points'].sum()\n    points_away = seasonhbd.groupby(['away_team'])['AwayTeam points'].sum()\n\n    points = pd.concat([points_home,points_away],axis=1)\n\n    # Rename some columns \n    points.rename(columns={\"HomeTeam points\":\"H Pts\",\"AwayTeam points\":\"A Pts\"},inplace=True)\n\n    # Group by home and away goals scored for every team in the season\n    goals_home = seasonhbd.groupby(['home_team'])['home_goals'].sum()\n    goals_away = seasonhbd.groupby(['away_team'])['away_goals'].sum()\n\n    goals_scored = pd.concat([goals_home,goals_away],axis=1)\n\n    # Group by home and away goals scored for every team in the season\n    goals_recieved_home = seasonhbd.groupby(['home_team'])['away_goals'].sum()\n    goals_recieved_away = seasonhbd.groupby(['away_team'])['home_goals'].sum()\n\n    goals_recieved = pd.concat([goals_recieved_home,goals_recieved_away],axis=1)\n\n    # Rename some columns \n    goals_scored.rename(columns={\"home_goals\": \"HGS\",\"away_goals\": \"AGS\"},inplace=True)\n    goals_recieved.rename(columns={\"away_goals\": \"HGR\",\"home_goals\": \"AGR\"},inplace=True)\n\n    goals = pd.concat([goals_scored,goals_recieved],axis=1)\n    total = pd.concat([goals,points],axis=1)\n\n    # New columns for more detailed information\n    total['Pts']=total['H Pts']+total['A Pts']\n    total['TGS']=total['HGS']+total['AGS']\n    total['TGR']=total['HGR']+total['AGR']\n    total['GD']=total['TGS']-total['TGR']\n    total['Goals Per 90\"']=total['TGS']\/38\n    total['Goals Per 90\"']=total['Goals Per 90\"'].round(2)\n    total['Pl']=38\n    total['Season']=season\n\n    # sort the teams according to their Attacking performance \n    total = total.sort_values(by='TGS',ascending=False)\n    total['Attack #']=np.arange(1,21,1)\n    \n    # sort the teams according to their Defensive performance \n    total = total.sort_values(by='TGR',ascending=True)\n    total['Defence #']=np.arange(1,21,1)\n\n    # Sort the teams according to their position in this season\n    total = total.sort_values(by='Pts',ascending=False)\n    total['#']=np.arange(1,21,1)\n\n    # Rearrange the columns in the dataframe\n    total =total.reindex(['Season','#','Pl','HGS','AGS','HGR','AGR','TGS','Attack #','TGR','Defence #','GD','Goals Per 90\"','H Pts','A Pts','Pts'], axis=1)\n\n    # Group all the tables in one big table\n    Allseasons = pd.concat([Allseasons,total],axis=0)\n\ndisplay(Allseasons.head())","2bd58d4f":"all = pd.read_csv(r'..\/input\/epl-summary\/EPL Summary.csv')\n\nall.head()","37c6626c":"C=all.loc[all['#']==1].reset_index(drop=True)\ndisplay(C)\nfig = px.line(C, x=\"Season\", y=\"Pts\",text=\"Team\",template='plotly_dark', width=1200, height=750,title='Points of the Champion of Every Season')\nfig.show()","2858c7aa":"A=all.loc[all['Attack #']==1].reset_index(drop=True)\ndisplay(A)\nfig = px.line(A, x=\"Season\", y=\"TGS\",text=\"Team\",template='plotly_dark', width=1200, height=750,title='The Strongest Attack in Every Season')\nfig.show()","ceb82167":"D=all.loc[all['Defence #']==1].reset_index(drop=True)\ndisplay(D)\nfig2 = px.line(A, x=\"Season\", y=\"TGR\",text=\"Team\", width=1200, height=750,template='plotly_dark',title='The Strongest Defence in Every Season')\nfig2.show()","c03147f0":"merseyside = [\"Liverpool\",\"Everton\"]\nfor team in merseyside:\n    merseysideDerby=pd.DataFrame(df.loc[(df['home_team'].isin(merseyside))&(df['away_team'].isin(merseyside))].reset_index(drop=True))\nmerseysideDerby  \n    ","d0ffbc35":"ManDerby = [\"Manchester United\",\"Manchester City\"]\nfor team in merseyside:\n    ManchesterDerby=pd.DataFrame(df.loc[(df['home_team'].isin(ManDerby))&(df['away_team'].isin(ManDerby))].reset_index(drop=True))\nManchesterDerby\n    ","1f43a4e6":"LDNDerby = [\"Arsenal\",\"Chelsea\"]\nfor team in LDNDerby:\n    LondonDerby=pd.DataFrame(df.loc[(df['home_team'].isin(LDNDerby))&(df['away_team'].isin(LDNDerby))].reset_index(drop=True))\nLondonDerby","74069b64":"NLDNDerby = [\"Tottenham Hotspur\",\"Arsenal\"]\nfor team in NLDNDerby:\n    NorthLondonDerby=pd.DataFrame(df.loc[(df['home_team'].isin(NLDNDerby))&(df['away_team'].isin(NLDNDerby))].reset_index(drop=True))\nNorthLondonDerby","947198b2":"NWDerby = [\"Liverpool\",\"Manchester United\"]\nfor team in NWDerby:\n    NorthWestDerby=pd.DataFrame(df.loc[(df['home_team'].isin(NWDerby))&(df['away_team'].isin(NWDerby))].reset_index(drop=True))\nNorthWestDerby","68ebfcf0":"## **Famous derbies in the EPL**","68be2802":"### **Manchester Derby**","69c8bf50":"### **London Derby**","e86b288d":"### **North London Derby**","238379f1":"## **The strongest defence in every season**","013694ac":"# **Data Wrangling**","7c46af76":"## **Win\/Lose\/Draw analysis for a selected team**","b2dc9b72":"## **The goals scored and conceded for a selected team**","0e9139ee":"## **The biggest score in home and away matches in a selected season**","cf0c6c6d":"# **Exploratory Data Analysis (EDA)**","ab3ee12b":"##  **All seasons standings tables**","6d93822e":"**To be continued**","43d44e1b":"Explainaton for the table","f9c5f79e":"# **Data Exploration**","3854cd47":"## **The strongest Attack in every season**","1a44ba94":"## **The final table for a selected season**","77774450":"### **Merseyside Derby**","59e3237c":"### **North West Derby**","49570d79":"## **The champion of every season**","c7192051":"## **Home\/Away goals distribution in a selected season**"}}