{"cell_type":{"fc12d734":"code","b159f4f8":"code","f0cb141f":"code","7d2de944":"code","caba2abb":"code","471dc5e8":"code","add27a06":"code","a7f1ece1":"code","23becf9d":"code","e3fe211c":"code","aec1bdaf":"code","1d966500":"code","a0e1e66b":"code","60ad43ee":"code","922a4911":"code","16c3ad19":"code","050392a2":"code","578cafc4":"code","f9372e1b":"code","93daeec4":"code","f0b1f79f":"code","3c6366ef":"code","6d5cf2e1":"code","bb284c57":"code","92390573":"code","eda27c16":"code","8ce2d920":"code","f7e90c83":"code","044a284c":"code","f54c662c":"code","1521e506":"code","d9a6a3bf":"code","1e803e1b":"code","a0178196":"code","b01c9b50":"code","df92861e":"code","952a4ed8":"code","a06c24fa":"code","808c79b0":"code","99c0513b":"code","8cbeb151":"code","919e1781":"code","94cf8789":"code","346ac0c9":"code","a67f0609":"code","05f08fa5":"code","1a76e918":"code","3b6a4328":"code","40647869":"code","f13f59bc":"code","e630dfa7":"code","d01b3f70":"code","7a4a2a2b":"markdown"},"source":{"fc12d734":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input- directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b159f4f8":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom matplotlib.gridspec import GridSpec\npd.set_option('display.max_columns', 100)\nimport plotly.offline as py\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\n#for the millions format function\nfrom matplotlib.ticker import FuncFormatter\nimport matplotlib.ticker as tkr\nimport matplotlib as mpl\nfrom datetime import datetime, timedelta\nfrom pandas import DataFrame\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nfrom nltk.corpus import stopwords\nimport re\n\n\ndef thousand_count_y(y, pos):\n    return '{:.0f} K'.format(y*1e-3)\nformatter_thousand_count_y = FuncFormatter(thousand_count_y)\n#ax2.yaxis.set_major_formatter(formatter_thousand_count_y)\n\ndef millons_count_y(y, pos):\n    return '{:.0f} M'.format(y*1e-6)\nformatter_millons_count_y = FuncFormatter(millons_count_y)\n#ax2.yaxis.set_major_formatter(formatter_millons_count_y)\n\ndef thousand_count_x(x, pos):\n    return '{:.0f} K'.format(x*1e-3)\nformatter_thousand_count_x = FuncFormatter(thousand_count_x)\n#ax2.yaxis.set_major_formatter(formatter_thousand_count_x)\n\ndef millons_count_x(x, pos):\n    return '{:.0f} M'.format(x*1e-6)\nformatter_millons_count_x = FuncFormatter(millons_count_x)\n#ax2.yaxis.set_major_formatter(formatter_millons_count_x)\n#__________________________________________________________________________\ndef thousand_real_y(y, pos):\n    return 'R${:.0f} K'.format(y*1e-3)\nformatter_thousand_real_y = FuncFormatter(thousand_real_y)\n#ax2.yaxis.set_major_formatter(formatter_thousand_real_y)\n\ndef millons_real_y(y, pos):\n    return 'R${:.1f} M'.format(y*1e-6)\nformatter_millons_real_y = FuncFormatter(millons_real_y)\n#ax2.yaxis.set_major_formatter(formatter_millons_real_y)\n\ndef thousand_real_x(x, pos):\n    return 'R${:.0f} K'.format(x*1e-3)\nformatter_thousand_real_x = FuncFormatter(thousand_real_x)\n#ax2.yaxis.set_major_formatter(formatter_thousand_real_x)\n\ndef millons_real_x(x, pos):\n    return 'R${:.1f} M'.format(x*1e-6)\nformatter_millons_real_x = FuncFormatter(millons_real_x)\n#ax2.yaxis.set_major_formatter(formatter_millons_real_x)\n","f0cb141f":"customer = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_customers_dataset.csv\")\nsellers = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_sellers_dataset.csv\")\nreviews = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_order_reviews_dataset.csv\")\nitems = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_order_items_dataset.csv\")\nproducts = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_products_dataset.csv\")\ngeolocation = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_geolocation_dataset.csv\")\nproduct_category = pd.read_csv(\"..\/input\/brazilian-ecommerce\/product_category_name_translation.csv\")\norders = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_orders_dataset.csv\")\norder_payments = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_order_payments_dataset.csv\")\n","7d2de944":"print(customer.columns.to_list())\nprint()\nprint(sellers.columns.to_list())\nprint()\nprint(products.columns.to_list())\nprint()\nprint(geolocation.columns.to_list())\nprint()\nprint(product_category.columns.to_list())\nprint()\nprint(reviews.columns.to_list())\nprint()\nprint(items.columns.to_list())\nprint()\nprint(order_payments.columns.to_list())\nprint()\nprint(orders.columns.to_list())\n\n","caba2abb":"print(customer.isnull().sum())\nprint()\nprint(customer.shape)\nprint()\nprint(customer.info())","471dc5e8":"# Change data type for date columns in dataframe orders\ntimestamp_cols = ['order_purchase_timestamp', 'order_approved_at', 'order_delivered_carrier_date', \n                  'order_estimated_delivery_date']\nfor col in timestamp_cols:\n    orders[col] = pd.to_datetime(orders[col])\n\n# Extracting attributes for purchase date - Year and Month\norders['order_purchase_year'] = orders['order_purchase_timestamp'].apply(lambda x: x.year)\norders['order_purchase_month'] = orders['order_purchase_timestamp'].apply(lambda x: x.month)\norders['order_purchase_month_name'] = orders['order_purchase_timestamp'].apply(lambda x: x.strftime('%b'))\norders['order_purchase_year_month'] = orders['order_purchase_timestamp'].apply(lambda x: x.strftime('%Y%m'))\norders['order_purchase_date'] = orders['order_purchase_timestamp'].apply(lambda x: x.strftime('%Y%m%d'))\n\n# Extracting attributes for purchase date - Day and Day of Week\norders['order_purchase_day'] = orders['order_purchase_timestamp'].apply(lambda x: x.day)\norders['order_purchase_dayofweek'] = orders['order_purchase_timestamp'].apply(lambda x: x.dayofweek)\norders['order_purchase_dayofweek_name'] = orders['order_purchase_timestamp'].apply(lambda x: x.strftime('%a'))\n\n# Extracting attributes for purchase date - Hour and Time of the Day\norders['order_purchase_hour'] = orders['order_purchase_timestamp'].apply(lambda x: x.hour)\nhours_bins = [-0.1, 6, 12, 18, 23]\nhours_labels = ['Dawn', 'Morning', 'Afternoon', 'Night']\norders['order_purchase_time_day'] = pd.cut(orders['order_purchase_hour'], hours_bins, labels=hours_labels)\n\n# Delete 2016 data\norders.drop(orders.loc[orders[\"order_purchase_year\"]==2016].index, inplace=True)","add27a06":"customer.head()","a7f1ece1":"#remove duplicate values\ncustomer = customer.drop_duplicates(subset=[\"customer_unique_id\"])\ncustomer[\"customer_city\"] = customer[\"customer_city\"].str.capitalize()\ncustomer.head()","23becf9d":"#The 10 cities with the most clients\nclients_by_city = customer.groupby(\"customer_city\").count()[\"customer_unique_id\"].reset_index().sort_values(by=\"customer_unique_id\",ascending=False).head(10)\nclients_by_city.rename(columns = {\"customer_unique_id\":\"total\"}, inplace=True)\nclients_by_city\n","e3fe211c":"#The 10 states with the most clients\nclients_by_state = customer.groupby([\"customer_state\"]).count()[\"customer_unique_id\"].reset_index().sort_values(by=\"customer_unique_id\",ascending=False).head(10)\nclients_by_state.rename(columns = {\"customer_unique_id\":\"total\"}, inplace=True)\nclients_by_state","aec1bdaf":"# merge elements of the data frame (customer, purchase date) to know the trend of how many customers made their first purchase\nclients_x_date = pd.merge(customer, orders, on = \"customer_id\")\nclients_x_date.head()\n","1d966500":"sellers[\"seller_city\"] = sellers[\"seller_city\"].str.capitalize()\nsellers.head()","a0e1e66b":"#The 10 cities with the most sellers\nsellers_by_city = sellers.groupby(\"seller_city\").count()[\"seller_id\"].reset_index().sort_values(by=\"seller_id\",ascending=False).head(10)\nsellers_by_city.rename(columns = {\"seller_id\":\"total\"}, inplace=True)\nsellers_by_city.head()","60ad43ee":"#The 10 states with the most sellers\nsellers_by_states = sellers.groupby(\"seller_state\").count()[\"seller_id\"].reset_index().sort_values(by=\"seller_id\",ascending=False).head(10)\nsellers_by_states.rename(columns = {\"seller_id\":\"total\"}, inplace=True)\nsellers_by_states.head()","922a4911":"# merge elements of the data frame (customer, purchase date) to know the trend of how many customers made their first purchase\nsellers_x_date = pd.merge(items,orders, on = \"order_id\")\nsellers_x_date = sellers_x_date.drop_duplicates(subset=[\"seller_id\"])\nsellers_x_date.head()\n","16c3ad19":"fig = plt.figure(constrained_layout=True, figsize=(15, 12))\n\n# Axis definition\ngs = GridSpec(5, 2, figure=fig)\nax1 = fig.add_subplot(gs[0, 0])\nax2 = fig.add_subplot(gs[0, 1])\nax3 = fig.add_subplot(gs[1, :])\n#ax4 = fig.add_subplot(gs[1, 1])\nax5 = fig.add_subplot(gs[2, 0])\nax6 = fig.add_subplot(gs[2, 1])\n#ax7 = fig.add_subplot(gs[3, 1])\nax8 = fig.add_subplot(gs[3, :])\n\n#Customer city\nsns.barplot(x=\"total\", y=\"customer_city\", data=clients_by_city, ax=ax1, palette='viridis')\nax1.set_title(\"The 10 cities with the most clients\", size=14, color='black')\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\nfor rect in ax1.patches:\n    ax1.annotate('{:,.0f}'.format(rect.get_width()),(rect.get_width(),rect.get_y() + rect.get_height() \/ 2),\n                xytext=(0, 0),textcoords='offset points', va='center', ha='left', size=12)\nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\nax1.spines['left'].set_visible(False)\nax1.spines['bottom'].set_visible(False)\nax1.axes.get_xaxis().set_visible(False) \n\n#Customer states\nsns.barplot(x=\"total\", y='customer_state', data=clients_by_state, ax=ax2, palette=\"YlGnBu\")\nax2.set_title(\"The 10 states with the most clients\", size=14, color='black')\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\nfor rect in ax2.patches:\n    ax2.annotate('{:,.0f}'.format(rect.get_width()),(rect.get_width(),rect.get_y() + rect.get_height() \/ 2),\n                xytext=(0, 0),textcoords='offset points', va='center', ha='left', size=12)\nax2.spines['top'].set_visible(False)\nax2.spines['right'].set_visible(False)\nax2.spines['left'].set_visible(False)\nax2.spines['bottom'].set_visible(False)\nax2.axes.get_xaxis().set_visible(False)\n\n#Customer per year\nsns.lineplot(x=\"order_purchase_year_month\", y=\"order_id\", data=clients_x_date.groupby(\"order_purchase_year_month\").agg({\"order_id\" : \"count\"}).reset_index(),ax=ax3, alpha=0.8,\n             color='darkslateblue', linewidth=1, marker='o', markersize=4)\nsns.barplot(x=\"order_purchase_year_month\", y=\"order_id\", data=clients_x_date.groupby(\"order_purchase_year_month\").agg({\"order_id\" : \"count\"}).reset_index(),ax=ax3, alpha=0.1)\nax3.set_title(\"Customer Evolution\", size=14, color=\"black\")\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\nax3.set_ylim(0,9000)\n#plt.setp(ax3.get_xticklabels(), rotation=45)\nfor p in ax3.patches:\n        ax3.annotate('{:,.0f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()),\n                    ha=\"center\", va=\"top\", xytext=(0, 15), textcoords=\"offset points\", \n                    color= \"black\", size=12)\nax3.spines[\"top\"].set_visible(False)\nax3.spines[\"right\"].set_visible(False)\nax3.spines[\"left\"].set_visible(False)\nax3.set_yticklabels([])\nax3.set_yticks([])\n\n#Total de Customers\nax3.text(-1.5, 8000, \"93,447\", fontsize=22, ha='center', color=\"navy\")\nax3.text(-1.5, 7200, \"Total Customers\", fontsize=10, ha='center')\nax3.text(-1.5, 5000, \"41,067\", fontsize=18, ha='center', color=\"navy\")\nax3.text(-1.5, 4200, \"Customers 2017\", fontsize=8, ha='center')\nax3.text(-1.5, 2000, \"52,410\", fontsize=18, ha='center', color=\"navy\")\nax3.text(-1.5, 1200, \"Customers 2018\", fontsize=8, ha='center')\n\n# Sellers city\nsns.barplot(x=\"total\", y=\"seller_city\", data=sellers_by_city, ax=ax5, palette='viridis')\nax5.set_title(\"The 10 cities with the most sellers\", size=14, color='black')\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\nfor rect in ax5.patches:\n    ax5.annotate('{:,.0f}'.format(rect.get_width()),(rect.get_width(),rect.get_y() + rect.get_height() \/ 2),\n                xytext=(0, 0),textcoords='offset points', va='center', ha='left', size=12)\nax5.spines['top'].set_visible(False)\nax5.spines['right'].set_visible(False)\nax5.spines['left'].set_visible(False)\nax5.spines['bottom'].set_visible(False)\nax5.axes.get_xaxis().set_visible(False)\n\n# Sellers states\nsns.barplot(x=\"total\", y=\"seller_state\", data=sellers_by_states, ax=ax6, palette=\"YlGnBu\")\nax6.set_title(\"The 10 states with the most sellers\", size=14, color='black')\nax6.set_xlabel(\"\")\nax6.set_ylabel(\"\")\nfor rect in ax6.patches:\n    ax6.annotate('{:,.0f}'.format(rect.get_width()),(rect.get_width(),rect.get_y() + rect.get_height() \/ 2),\n                xytext=(0, 0),textcoords='offset points', va='center', ha='left', size=12)\nax6.spines['top'].set_visible(False)\nax6.spines['right'].set_visible(False)\nax6.spines['left'].set_visible(False)\nax6.spines['bottom'].set_visible(False)\nax6.axes.get_xaxis().set_visible(False)\n\n#Sellers per year\nsns.lineplot(x=\"order_purchase_year_month\", y=\"order_id\", data=sellers_x_date.groupby(\"order_purchase_year_month\").agg({\"order_id\" : \"count\"}).reset_index(),ax=ax8,\n             color='darkslateblue', linewidth=1, marker='o', markersize=5)\nsns.barplot(x=\"order_purchase_year_month\", y=\"order_id\", data=sellers_x_date.groupby(\"order_purchase_year_month\").agg({\"order_id\" : \"count\"}).reset_index(),ax=ax8, alpha=0.1)\nax8.set_title(\"Seller Evolution\", size=14, color=\"black\")\nax8.set_xlabel(\"\")\nax8.set_ylabel(\"\")\nax8.set_ylim(0, 500)\nplt.setp(ax8.get_xticklabels(), rotation=45)\nfor p in ax8.patches:\n        ax8.annotate('{:,.0f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()),\n                    ha=\"center\", va=\"top\", xytext=(0, 15), textcoords=\"offset points\", \n                    color= \"black\", size=12)\nax8.spines[\"top\"].set_visible(False)\nax8.spines[\"right\"].set_visible(False)\nax8.spines[\"left\"].set_visible(False)\nax8.set_yticklabels([])\nax8.set_yticks([])\n        \n#Total de Sellers\nax8.text(-1.5, 460, \"3068\", fontsize=22, ha='center', color=\"navy\")\nax8.text(-1.5, 420, \"Total Sellers\", fontsize=10, ha='center')\nax8.text(-1.5, 300, \"1,236\", fontsize=18, ha='center', color=\"navy\")\nax8.text(-1.5, 260, \"Sellers 2017\", fontsize=8, ha='center')\nax8.text(-1.5, 140, \"1,832\", fontsize=18, ha='center', color=\"navy\")\nax8.text(-1.5, 100, \"Sellers 2018\", fontsize=8, ha='center')\n\n\nplt.suptitle(\"Customers and Sellers (2017-2018)\", size=18)\n\n#plt.tight_layout()","050392a2":"fig = plt.figure(constrained_layout=True, figsize=(15, 8))\n\n# Axis definition\ngs = GridSpec(2, 2, figure=fig)\nax1 = fig.add_subplot(gs[0, :])\nax2 = fig.add_subplot(gs[1, 0])\nax3 = fig.add_subplot(gs[1, 1])\n\n# Lineplot - Evolution of e-commerce orders along time \nsns.lineplot(x=\"order_purchase_year_month\", y=\"order_id\", data=orders.groupby(\"order_purchase_year_month\").agg({\"order_id\" : \"count\"}).reset_index(), ax=ax1, legend=False,\n              marker='o',markersize=8)\nsns.barplot(x=\"order_purchase_year_month\", y=\"order_id\", data=orders.groupby(\"order_purchase_year_month\").agg({\"order_id\" : \"count\"}).reset_index(), ax=ax1, alpha=0.1)\n#plt.setp(ax1.get_xticklabels(), rotation=45)\nax1.set_title(\"Orders in Brazilian e-commerce\", size=14, color='black')\nax1.set_ylabel(\"\")\nax1.set_xlabel(\"\")\nax1.set_ylim(0,8500)\nfor p in ax1.patches:\n        ax1.annotate('{:,.0f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='bottom', xytext=(0, 5), textcoords='offset points',\n                    color= 'black', size=12)\nax1.spines[\"top\"].set_visible(False)\nax1.spines[\"right\"].set_visible(False)\nax1.spines[\"left\"].set_visible(False)\nax1.set_yticklabels([])\nax1.set_yticks([])\n\n#Total Orders\nax1.text(-1, 7600, \"96,708\", fontsize=22, ha='center', color=\"navy\")\nax1.text(-1, 7200, \"Total Customers\", fontsize=10, ha='center')\nax1.text(-1, 6000, \"42,697\", fontsize=18, ha='center', color=\"navy\")\nax1.text(-1, 5600, \"Customers 2017\", fontsize=8, ha='center')\nax1.text(-1, 4400, \"54,011\", fontsize=18, ha='center', color=\"navy\")\nax1.text(-1, 4000, \"Customers 2018\", fontsize=8, ha='center')\n\n# Barchart - Total of orders by day of week\nday_order= [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\nsns.countplot(x=\"order_purchase_dayofweek_name\", data=orders, order=day_order, ax=ax2, palette=\"GnBu_r\")\nax2.set_title(\"Orders by Day of Week\", size=14, color='black')\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\nfor p in ax2.patches:\n        ax2.annotate('{:,.0f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()),\n                    ha=\"center\", va=\"bottom\", xytext=(0, 1), textcoords=\"offset points\",\n                    color= \"black\")\nax2.spines['top'].set_visible(False)\nax2.spines['right'].set_visible(False)\nax2.yaxis.set_major_formatter(formatter_thousand_count_y)\n\n# Barchart - Total of orders by time of the day\nsns.countplot(x=\"order_purchase_time_day\", data=orders,ax=ax3, palette=\"GnBu\")\nax3.set_title(\"Orders by Time of the Day\", size=14, color='black')\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\nfor p in ax3.patches:\n        ax3.annotate('{:,.0f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()),\n                     ha=\"center\", va=\"bottom\", xytext=(0, 1), textcoords=\"offset points\",\n                    color= \"black\")\nax3.spines['top'].set_visible(False)\nax3.spines['right'].set_visible(False)\nax3.yaxis.set_major_formatter(formatter_thousand_count_y)\n\n\n\n#plt.tight_layout()\nplt.show()","578cafc4":"#We group order_id of items.csv to get the total cost of the order. (this because the purchase breakdown comes)\nprice = items.groupby(\"order_id\").agg({ 'price': 'sum', 'freight_value': 'sum'}).reset_index()\nprice[\"total\"] = price[\"price\"] + price[\"freight_value\"]\nprice\n\n\n#We join the prices of the dataframe with the dataframe of orders, to calculate the sales by year, month, etc.\nsales = pd.merge(price, orders, on=\"order_id\")\nsales.head()","f9372e1b":"sales_year_month = sales.groupby(by=[\"order_purchase_year\", \"order_purchase_year_month\",\"order_purchase_month_name\"]).agg({\"order_id\": \"count\",\"price\": \"sum\",\"freight_value\": \"sum\",\"total\": \"sum\"}).reset_index()\nsales_year_month.head()","93daeec4":"#sales_year = sales.groupby(by=[\"order_purchase_year\"]).agg({\"order_id\": \"count\",\"price\": \"sum\",\"freight_value\": \"sum\",\"total\": \"sum\"}).reset_index()\nsales_year = sales.groupby(by=[\"order_purchase_year\"]).agg({\"total\": \"sum\"}).reset_index()\nsales_year","f0b1f79f":"fig = plt.figure(constrained_layout=True, figsize=(15, 10))\n\n# Axis definition\ngs = GridSpec(3, 2, figure=fig)\nax1 = fig.add_subplot(gs[0, :])\nax2 = fig.add_subplot(gs[1, :])\nax3 = fig.add_subplot(gs[2,:])\n\n\n\nmonth_order= [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\nsns.barplot(x=\"order_purchase_month_name\", y=\"price\", data=sales_year_month.loc[sales_year_month[\"order_purchase_year\"]==2017], order=month_order, ax=ax1, color=\"skyblue\", label=\"Price\")\nsns.barplot(x=\"order_purchase_month_name\", y=\"freight_value\", data=sales_year_month.loc[sales_year_month[\"order_purchase_year\"]==2017], order=month_order, ax=ax1, color=\"yellow\", label=\"Freight\")\n\nax1.set_title(\"Order value and shipping cost 2017\", size=16)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\nax1.legend(loc=\"upper right\")\nfor p in ax1.patches:\n        ax1.annotate('R${:,.0f}'.format(p.get_height()+5.9), (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='top',\n                    color= 'black')\nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\nax1.yaxis.set_major_formatter(formatter_millons_real_y)\n\nax1.text(1, 900000, f'R$7,142,672', fontsize=20, color='mediumseagreen', ha='center')\nax1.text(1, 820000, 'Amount sold', fontsize=10, ha='center')\n\n\nsns.barplot(x=\"order_purchase_month_name\", y=\"price\", data=sales_year_month.loc[sales_year_month[\"order_purchase_year\"]==2018], order=month_order, ax=ax2, color=\"skyblue\", label=\"Price\")\nsns.barplot(x=\"order_purchase_month_name\", y=\"freight_value\", data=sales_year_month.loc[sales_year_month[\"order_purchase_year\"]==2018], order=month_order, ax=ax2, color=\"yellow\", label=\"Freight\")\nax2.set_title(\"Order value and shipping cost 2018\", size=16)\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\nax2.legend(loc=\"upper right\")\nfor p in ax2.patches:\n        ax2.annotate('R${:,.0f}'.format(p.get_height()+5.9), (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='top',\n                    color= 'black')\nax2.spines['top'].set_visible(False)\nax2.spines['right'].set_visible(False)\nax2.yaxis.set_major_formatter(formatter_millons_real_y)\n\nax2.text(9, 950000, f'R$8,643,697', fontsize=20, color='mediumseagreen', ha='center')\nax2.text(9, 800000, 'It has reached 21% more than in 2017 \\nwithout ending 2018', fontsize=10, ha='center')\n\nsns.lineplot(x=\"order_purchase_month_name\", y='total', data=sales_year_month.loc[sales_year_month[\"order_purchase_year\"]==2017], ax=ax3,linewidth=3.0, label=\"2017\", marker='o', markersize=8)\nsns.lineplot(x=\"order_purchase_month_name\", y='total', data=sales_year_month.loc[sales_year_month[\"order_purchase_year\"]==2018], ax=ax3,linewidth=3.0,label=\"2018\", marker='o', markersize=8)\nax3.set_title(\"Total purchases per month\", size=16, color='black')\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\nax3.spines['top'].set_visible(False)\nax3.spines['right'].set_visible(False)\nax3.yaxis.set_major_formatter(formatter_millons_real_y)\n\nplt.suptitle(\"\")","3c6366ef":"# merge elements of the data frame (order_payments, orders) to know the trend of the payment method of the customers\npay = pd.merge(order_payments, orders, on=\"order_id\")\npay[\"payment_type\"] = pay[\"payment_type\"].str.capitalize()\n#Grouping for pie chart, what is the most used payment method?\npay1 = pay.groupby(by=[\"payment_type\"]).agg({\"order_id\": \"count\",\"payment_value\": \"sum\"}).reset_index().sort_values(by=\"order_id\",ascending=False)\n#pay1[\"%\"] = pay1[\"order_id\"] \/ pay1[\"order_id\"].sum() * 100\n#pay1=round(pay1,0)\npay1","6d5cf2e1":"#Group for bar chart to count transactions by payment type.\npay2 = pay.groupby(by=[\"payment_type\", \"order_purchase_year\"]).agg({\"order_id\": \"count\"}).reset_index().sort_values(by=[\"order_purchase_year\",\"order_id\"],ascending=False)\npay2.head()","bb284c57":"#Group to know which are the trends of the payment methods\n#pay.groupby(by=[\"order_purchase_year\", \"order_purchase_year_month\",\"order_purchase_month_name\"]).agg({\"order_id\": \"count\",\"price\": \"sum\",\"freight_value\": \"sum\",\"total\": \"sum\"}).reset_index()\npay3 = pay.groupby(by=[\"order_purchase_year_month\", \"payment_type\"]).agg({\"order_id\": \"count\"}).reset_index().sort_values(by=['order_purchase_year_month', 'order_id'], ascending=[True, False])\npay3.head()","92390573":"fig = plt.figure(constrained_layout=True, figsize=(15, 10))\n\n# Axis definition\ngs = GridSpec(2, 3, figure=fig)\nax1 = fig.add_subplot(gs[0, 0])\nax2 = fig.add_subplot(gs[0, 1:])\n#ax3 = fig.add_subplot(gs[0, 2])\nax4 = fig.add_subplot(gs[1,:])\n\ncolors_list = ['yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']\nexplode = (0.1, 0.1, 0.1, 0.1, 0.8)\n\nax1.pie(pay1[\"order_id\"], explode=explode, autopct='%1.1f%%',shadow=True, startangle=40,pctdistance=0.8, colors=colors_list)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax1.legend(labels=pay1[\"payment_type\"], loc='best')\nax1.set_title(\"Most used payment method\", size=14, color='black')\n\nsns.barplot(x=\"order_id\", y=\"payment_type\", data=pay2,  ax=ax2, hue=\"order_purchase_year\", palette=\"Set2\")\nax2.legend(loc=\"best\")\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\nax2.set_title(\"Numbers of transactions by payment type\", size=14, color=\"black\" )\nfor rect in ax2.patches:\n    ax2.annotate('{:,.0f}'.format(rect.get_width()),(rect.get_width(),rect.get_y() + rect.get_height() \/ 2),\n                xytext=(0, 0),textcoords='offset points', va='center', ha='left', size=12)\nax2.spines['top'].set_visible(False)\nax2.spines['right'].set_visible(False)\nax2.spines['bottom'].set_visible(False)\nax2.axes.get_xaxis().set_visible(False) \n#ax2.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n    \nsns.lineplot(x='order_purchase_year_month', y='order_id', data=pay3, ax=ax4, hue='payment_type',legend=False,\n             style='payment_type', size='payment_type', palette=colors_list, marker='o',markersize=8)\nax4.legend(labels=pay3[\"payment_type\"], loc='upper left',fontsize=12)\nax4.set_title(\"Trend in the payment method\", size=14, color=\"black\")\nax4.set_xlabel(\"\")\nax4.set_ylabel(\"\")\nplt.setp(ax4.get_xticklabels(), rotation=45)\nax4.spines['top'].set_visible(False)\nax4.spines['right'].set_visible(False)\nax4.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n\nplt.suptitle(\"Payment method\", size=18)\n\nplt.show()\n","eda27c16":"#merge data frame elements (products, product category) to know the English name of the products\nproducts = pd.merge(products, product_category, on=\"product_category_name\")\n#products\n\n#Assemble a new dataframe with only product_id and the English name of the product\nproducts = products[[\"product_id\", \"product_category_name_english\"]]\n#products.head()\n\n#We put the product category in the items file\nproducts = pd.merge(items, products, on=\"product_id\")\n#products\n\n#We calculate the total that the customer paid for the product\nproducts[\"total\"] = products[\"price\"] + products[\"freight_value\"]\n#new dataframe with the columns we just need\nproducts = products[[\"order_id\", \"product_id\", \"price\" , \"freight_value\", \"total\", \"product_category_name_english\"]]\n#products\n\n#We join our dataframe products with orders to obtain the information of the dates\nproducts = pd.merge(products, orders, on=\"order_id\")\n#products\n\n#new dataframe with the columns we just need\nproducts = products[[\"product_id\", \"price\" , \"freight_value\", \"total\", \"product_category_name_english\",\"order_purchase_year\",\"order_purchase_month_name\",\"order_purchase_year_month\"]]\nproducts[\"product_category_name_english\"] = products[\"product_category_name_english\"].str.capitalize()\nproducts.head()\n","8ce2d920":"#We group by category to generate the scatter plot\nproducts_category = products.groupby(\"product_category_name_english\").agg({\"order_purchase_year_month\" : \"count\",\"total\" : \"sum\"}).reset_index().sort_values(by=\"order_purchase_year_month\", ascending=False).head(20)\nproducts_category.head()\n","f7e90c83":"#We group by category to generate the bar plot\nproducts_category_year = products.groupby(by=[\"product_category_name_english\",\"order_purchase_year\"]).agg({\"order_purchase_year_month\" : \"count\",\"total\" : \"sum\"}).reset_index().sort_values(by=[\"order_purchase_year\",\"order_purchase_year_month\"], ascending=[True,False])\nproducts_category_year.head()","044a284c":"products_cat_trends = products.groupby(by=[\"product_category_name_english\",\"order_purchase_year_month\"]).agg({\"order_purchase_year\" : \"count\",\"total\" : \"sum\"}).reset_index().sort_values(by=[\"order_purchase_year_month\",\"order_purchase_year\",\"product_category_name_english\"], ascending=[True,False,True])\n#We remove the data from 2016, we are only analyzing 2017 and 2018\nproducts_cat_trends.drop(products_cat_trends.loc[products_cat_trends[\"order_purchase_year_month\"]==\"201609\"].index, inplace=True)\nproducts_cat_trends.drop(products_cat_trends.loc[products_cat_trends[\"order_purchase_year_month\"]==\"201610\"].index, inplace=True)\nproducts_cat_trends.drop(products_cat_trends.loc[products_cat_trends[\"order_purchase_year_month\"]==\"201612\"].index, inplace=True)\n\n#We filter the categories that are in the Top 5 by category in 2017 y 2018\nproducts_cat_trends = products_cat_trends[(products_cat_trends[\"product_category_name_english\"]==\"Bed_bath_table\") | \n                                  (products_cat_trends[\"product_category_name_english\"]==\"Furniture_decor\")|\n                                  (products_cat_trends[\"product_category_name_english\"]==\"Sports_leisure\")|\n                                  (products_cat_trends[\"product_category_name_english\"]==\"Health_beauty\")|\n                                  (products_cat_trends[\"product_category_name_english\"]==\"Computers_accessories\")]\nproducts_cat_trends.head()","f54c662c":"fig = plt.figure(constrained_layout=True, figsize=(15, 15))\n\n# Axis definition\ngs = GridSpec(9, 2, figure=fig)\nax1 = fig.add_subplot(gs[:3,0:])\nax2 = fig.add_subplot(gs[3:5, 0])\nax3 = fig.add_subplot(gs[3:5, 1])\nax4 = fig.add_subplot(gs[5:,0:])\n\nfor product in products_category[\"product_category_name_english\"].unique():\n    data = products_category[products_category[\"product_category_name_english\"] == product]\n    ax1.scatter(data['total'],data['order_purchase_year_month'],\n                s=0.5*data['order_purchase_year_month']**1,\n                alpha = 0.5,\n                label=product)\n    \nfor index, row in products_category.iterrows():\n    ax1.annotate(row['product_category_name_english'],\n                 (row['total'], row['order_purchase_year_month']),\n                 textcoords=\"offset points\",\n                 xytext=(0,5),\n                 ha='left')\n\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"Number of pieces\")\nax1.set_title(\"The 20 best-selling categories\",size=14)\nax1.set_ylim(0,14000)\nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\nax1.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('$R{x:,.0f}'))\nax1.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n\nsns.barplot(x=\"product_category_name_english\", y=\"order_purchase_year_month\", data=products_category_year.loc[products_category_year[\"order_purchase_year\"]==2017].head(5), ax=ax2, palette=\"Blues_r\")\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"Number of pieces\")\nax2.set_yticklabels([])\nax2.set_yticks([])\nax2.set_title(\"Top 5 best-selling categories 2017\", size=14)\n#ax2.set_ylim(0,6000)\nplt.setp(ax2.get_xticklabels(), rotation=30)\nfor p in ax2.patches:\n        ax2.annotate('{:,.0f}'.format(p.get_height()+5.9), (p.get_x()+0.4, p.get_height()),\n                    ha=\"center\", va=\"bottom\", xytext=(0, 1), textcoords=\"offset points\",\n                    color= 'black', size=12)\n#ax2.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\nax2.spines['top'].set_visible(False)\nax2.spines['left'].set_visible(False)\nax2_twx = ax2.twinx()\nsns.lineplot(x=\"product_category_name_english\", y='total', data=products_category_year.loc[products_category_year[\"order_purchase_year\"]==2017].head(5), ax=ax2_twx, linewidth=1.0, color=\"darkblue\", marker=\"o\", markersize=8)\n#ax2_twx.set_ylim(0,990000)\nax2_twx.set_ylabel(\"Amount\")\nax2_twx.spines['top'].set_visible(False)\nax2_twx.spines['left'].set_visible(False)\nax2_twx.yaxis.set_major_formatter(formatter_thousand_real_y)\n\nsns.barplot(x=\"product_category_name_english\", y=\"order_purchase_year_month\", data=products_category_year.loc[products_category_year[\"order_purchase_year\"]==2018].head(5), ax=ax3, palette=\"Blues_r\")\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"Number of pieces\")\nax3.set_yticklabels([])\nax3.set_yticks([])\nax3.set_title(\"Top 5 best-selling categories 2018\", size=14)\nfor p in ax3.patches:\n        ax3.annotate('{:,.0f}'.format(p.get_height()+5.9), (p.get_x()+0.4, p.get_height()),\n                    ha=\"center\", va=\"bottom\", xytext=(0, 1), textcoords=\"offset points\",\n                    color= 'black', size=12)\nax3.spines['top'].set_visible(False)\nax3.spines['left'].set_visible(False)\nplt.setp(ax3.get_xticklabels(), rotation=30)\nax3_twx = ax3.twinx()\nsns.lineplot(x=\"product_category_name_english\", y='total', data=products_category_year.loc[products_category_year[\"order_purchase_year\"]==2018].head(5), ax=ax3_twx, linewidth=1.0, color=\"darkblue\", marker=\"o\", markersize=8)\n#ax3_twx.set_ylim(0,990000)\nax3_twx.set_ylabel(\"Amount\")\nax3_twx.yaxis.set_major_formatter(formatter_thousand_real_y)\nax3_twx.spines['top'].set_visible(False)\nax3_twx.spines['top'].set_visible(False)\nax3_twx.spines['left'].set_visible(False)\n\nsns.lineplot(x='order_purchase_year_month', y='order_purchase_year', data=products_cat_trends, ax=ax4, hue='product_category_name_english',legend=False, style='product_category_name_english', size='product_category_name_english', marker='o', linewidth=3)\nax4.legend(labels=products_cat_trends[\"product_category_name_english\"], loc='upper left', fontsize=12)\nax4.set_title(\"Top 5 trend 2017-2018\", size=14)\nax4.set_ylabel(\"Number of pieces\")\nax4.set_xlabel(\"\")\nax4.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\nax4.spines['top'].set_visible(False)\nax4.spines['right'].set_visible(False)\n\n","1521e506":"#We group by product to generate the scatter plot\nproducts_top = products.groupby(by=[\"product_id\",\"product_category_name_english\"]).agg({\"order_purchase_month_name\" : \"count\",\"total\" : \"sum\"}).reset_index().sort_values(by=\"order_purchase_month_name\", ascending=False).head(10)\nproducts_top.head()","d9a6a3bf":"#We group by product to generate the bar plot\nproducts_top_year = products.groupby(by=[\"product_id\",\"order_purchase_year\"]).agg({\"order_purchase_year_month\" : \"count\",\"total\" : \"sum\"}).reset_index().sort_values(by=[\"order_purchase_year\",\"order_purchase_year_month\"], ascending=[True,False])\n#We remove the data from 2016, we are only analyzing 2017 and 2018\nproducts_top_year.drop(products_top_year.loc[products_top_year[\"order_purchase_year\"]==2016].index, inplace=True)\nproducts_top_year.head()","1e803e1b":"fig = plt.figure(constrained_layout=True, figsize=(15, 10))\n\n# Axis definition\ngs = GridSpec(4, 2, figure=fig)\nax1 = fig.add_subplot(gs[:2, 0])\nax2 = fig.add_subplot(gs[:2, 1])\nax3 = fig.add_subplot(gs[2:,0])\nax4 = fig.add_subplot(gs[2:,1])\n\nsns.barplot(x=\"order_purchase_month_name\", y=\"product_id\",  data=products_top, ax=ax1, palette=\"rocket\")\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"Product ID\")\nax1.set_title(\"Numbers of pieces sold\",size=14)\nfor rect in ax1.patches:\n    ax1.annotate('{:,.0f}'.format(rect.get_width()),(rect.get_width(),rect.get_y() + rect.get_height() \/ 2),\n                xytext=(0, 0),textcoords='offset points', va='center', ha='right', size=12, color=\"white\")    \nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\nax1.spines['left'].set_visible(False)\nax1.spines['bottom'].set_visible(False)\nax1.axes.get_xaxis().set_visible(False)\n    \nsns.barplot(x=\"total\", y=\"product_id\",  data=products_top, ax=ax2, palette=\"rocket\")\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\nax2.set_title(\"Amount sold\", size=14)\nfor rect in ax2.patches:\n    ax2.annotate('R${:,.0f}'.format(rect.get_width()),(rect.get_width(),rect.get_y() + rect.get_height() \/ 2),\n                xytext=(0, 0),textcoords='offset points', va='center', ha='right', size=12, color=\"white\")    \nax2.spines['top'].set_visible(False)\nax2.spines['right'].set_visible(False)\nax2.spines['left'].set_visible(False)\nax2.spines['bottom'].set_visible(False)\nax2.axes.get_xaxis().set_visible(False)\nax2.axes.get_yaxis().set_visible(False)\n\nsns.barplot(x=\"product_id\", y=\"order_purchase_year_month\", data=products_top_year.loc[products_top_year[\"order_purchase_year\"]==2017].head(10), ax=ax3, palette=\"Purples_r\")\nax3.set_xlabel(\"Product ID\")\nax3.set_ylabel(\"Number Of Pieces Sold\")\nplt.setp(ax3.get_xticklabels(), rotation=90)\nax3.set_title(\"Most seller in 2017\", size=14)\nax3.set_yticklabels([])\nax3.set_yticks([])\nfor p in ax3.patches:\n        ax3.annotate('{:,.0f}'.format(p.get_height()+5.9), (p.get_x()+0.4, p.get_height()),\n                    ha=\"center\", va=\"bottom\", xytext=(0, 1), textcoords=\"offset points\",\n                    color= 'black', size=12)\nax3.spines['top'].set_visible(False)\nax3.spines['left'].set_visible(False)\nax3_twx = ax3.twinx()\nsns.lineplot(x=\"product_id\", y='total', data=products_top_year.loc[products_top_year[\"order_purchase_year\"]==2017].head(10), ax=ax3_twx, linewidth=1.0, color=\"darkblue\", marker=\"o\", markersize=8)\nax3_twx.set_ylabel(\"Amount Sold\")\nax3_twx.spines['top'].set_visible(False)\nax3_twx.spines['left'].set_visible(False)\nax3_twx.yaxis.set_major_formatter(formatter_thousand_real_y)\n\nsns.barplot(x=\"product_id\", y=\"order_purchase_year_month\", data=products_top_year.loc[products_top_year[\"order_purchase_year\"]==2018].head(10), ax=ax4, palette=\"Purples_r\")\nax4.set_xlabel(\"Product ID\")\nax4.set_ylabel(\"Number Of Pieces Sold\")\nplt.setp(ax4.get_xticklabels(), rotation=90)\nax4.set_title(\"Most seller in 2018\", size=14)\nax4.set_yticklabels([])\nax4.set_yticks([])\nfor p in ax4.patches:\n        ax4.annotate('{:,.0f}'.format(p.get_height()+5.9), (p.get_x()+0.4, p.get_height()),\n                    ha=\"center\", va=\"bottom\", xytext=(0, 1), textcoords=\"offset points\",\n                    color= 'black', size=12)\nax4.spines['top'].set_visible(False)\nax4.spines['left'].set_visible(False)\nax4_twx = ax4.twinx()\nsns.lineplot(x=\"product_id\", y='total', data=products_top_year.loc[products_top_year[\"order_purchase_year\"]==2018].head(10), ax=ax4_twx, linewidth=1.0, color=\"darkblue\", marker=\"o\", markersize=8)\nax4_twx.set_ylabel(\"Amount Sold\")\nax4_twx.spines['top'].set_visible(False)\nax4_twx.spines['left'].set_visible(False)\nax4_twx.yaxis.set_major_formatter(formatter_thousand_real_y)\n\nplt.suptitle(\"Number of Pieces and Amount Sold \\nby Products\", size=16)","a0178196":"order_status = orders.groupby(\"order_status\").size().reset_index().sort_values(by=0,ascending=False)\norder_status[\"order_status\"] = order_status[\"order_status\"].str.capitalize()\norder_status","b01c9b50":"fig = make_subplots(rows=1, cols=1, \n                    specs=[[{\"type\": \"pie\"}]],\n                    vertical_spacing=0, horizontal_spacing=0.02,\n                    subplot_titles=(\"\"))\n\nfig.add_trace(go.Pie(values= order_status[0], labels=order_status[\"order_status\"], name='Store type',\n                     marker=dict(colors=['#334668','#496595','#6D83AA','#91A2BF','#C8D0DF']), hole=0.7,\n                    hoverinfo='label+value', textinfo='label + value'), \n                    row=1, col=1)\n\nfig.update_yaxes(showgrid=False, ticksuffix=' ', categoryorder='total ascending', row=1, col=1)\nfig.update_xaxes(visible=False, row=1, col=1)\nfig.update_yaxes(visible=False, row=1, col=1)\nfig.update_layout(height=400, bargap=0.4,\n                  margin=dict(b=0,r=20,l=20), xaxis=dict(tickmode='linear'),\n                  title_text=\"Orders Status (2016-2018)\",\n                  template=\"plotly_white\",\n                  title_font=dict(size=22, color='black', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'), \n                  hoverlabel=dict(bgcolor=\"#f2f2f2\", font_size=13, font_family=\"Lato, sans-serif\"),\n                  showlegend=False)\nfig.update_traces(rotation=90)\nfig.update_traces(textposition=\"auto\", selector=dict(type='pie'))","df92861e":"#We group the orders to know the seller\nfreight_value = items.groupby(by=[\"order_id\", \"seller_id\"]).agg({\"price\" : \"count\",\"freight_value\" : \"sum\"}).reset_index().sort_values(by=\"price\", ascending=False)\n#freight_value\n# We group the freight value and the sales to know the dates made to the freight\nfreight_value = pd.merge(freight_value, sales, on = \"order_id\")\n#freight_value\n# We group the freight value and the sellers to know the city and state of the seller\nfreight_value = pd.merge(freight_value, sellers, on = \"seller_id\")\n#freight_value\n# We select the columns necessary for the analysis\nfreight_value = freight_value[[\"seller_id\", \"order_purchase_year\", \"order_purchase_year_month\",\"order_purchase_timestamp\", \"order_delivered_carrier_date\" , \"order_delivered_customer_date\", \"order_estimated_delivery_date\", \"freight_value_x\", \"seller_city\", \"seller_state\"]]\nfreight_value.head()","952a4ed8":"# We check if there are rows that do not contain data\nfreight_value.isnull().sum()","a06c24fa":"# We eliminate the rows that do not contain data in the columns \"order delivered carrier date\" and \"order delivered customer date\"\nfreight_value = freight_value.dropna(subset=[\"order_delivered_customer_date\",\"order_delivered_carrier_date\"])\n#freight_value.head()\n\n#Convert column order_delivered_customer_date (object) to datetime\nfreight_value[\"order_delivered_customer_date\"] = freight_value[\"order_delivered_customer_date\"].apply(pd.to_datetime)\n\n# Formatting dates to calculate delivery time\nfreight_value[\"order_purchase_timestamp\"] = pd.to_datetime(freight_value[\"order_purchase_timestamp\"].dt.strftime(\"%Y-%m-%d\"))\nfreight_value[\"order_delivered_carrier_date\"] = pd.to_datetime(freight_value[\"order_delivered_carrier_date\"].dt.strftime(\"%Y-%m-%d\"))\nfreight_value[\"order_delivered_customer_date\"] = pd.to_datetime(freight_value[\"order_delivered_customer_date\"].dt.strftime(\"%Y-%m-%d\"))\n\n# We take the difference of days between the columns\nfreight_value[\"time_delivery_customer\"] = freight_value[\"order_delivered_customer_date\"] - freight_value[\"order_purchase_timestamp\"]\nfreight_value[\"time_delivery_estimated\"] = freight_value[\"order_delivered_customer_date\"] - freight_value[\"order_estimated_delivery_date\"]\nfreight_value[\"time_purchase_estimated_day_time\"] = freight_value[\"order_estimated_delivery_date\"] - freight_value[\"order_purchase_timestamp\"]\n\n#freight_value\n\n# We convert the two columns into str\nfreight_value[\"time_delivery_customer\"] = freight_value[\"time_delivery_customer\"].astype(str)\nfreight_value[\"time_delivery_estimated\"] = freight_value[\"time_delivery_estimated\"].astype(str)\nfreight_value[\"time_purchase_estimated_day_time\"] = freight_value[\"time_purchase_estimated_day_time\"].astype(str)\n\nseparator_c = freight_value[\"time_delivery_customer\"].str.rsplit(\" \", n=1, expand=True)\nseparator_c.columns = [\"customer_day_time\", \"1\"]\nseparator_c = separator_c.drop(columns = [\"1\"])\nfreight_value = pd.concat([freight_value, separator_c], axis=1)\n\nseparator_d = freight_value[\"time_delivery_estimated\"].str.rsplit(\" \", n=1, expand=True)\nseparator_d.columns = [\"delivery_day_time\", \"2\"]\nseparator_d = separator_d.drop(columns = [\"2\"])\nfreight_value = pd.concat([freight_value, separator_d], axis=1)\n\nseparator_pe = freight_value[\"time_purchase_estimated_day_time\"].str.rsplit(\" \", n=1, expand=True)\nseparator_pe.columns = [\"purchase_estimated_day_time\", \"2\"]\nseparator_pe = separator_pe.drop(columns = [\"2\"])\nfreight_value = pd.concat([freight_value, separator_pe], axis=1)\n\nfreight_value[\"customer_day_time\"] = freight_value[\"customer_day_time\"].astype(int)\nfreight_value[\"delivery_day_time\"] = freight_value[\"delivery_day_time\"].astype(int)\nfreight_value[\"purchase_estimated_day_time\"] = freight_value[\"purchase_estimated_day_time\"].astype(int)","808c79b0":"## Rangos para asignar\nconditionlist = [\n    (freight_value[\"delivery_day_time\"] <=0),(freight_value[\"delivery_day_time\"] > 0)]\n\n## Nombre de los rangos de acuerdo a la entrega\nchoicelist = [\"On Time\", \"Out of Time\"]\nfreight_value['delivery_status'] = np.select(conditionlist, choicelist, default='Not Specified')","99c0513b":"delivery_status = freight_value.groupby(\"delivery_status\").count()[\"seller_id\"].reset_index()\ndelivery_status","8cbeb151":"delivery_status_year = freight_value.groupby(by=[\"order_purchase_year\",\"delivery_status\"]).count()[\"seller_id\"].reset_index()\ndelivery_status_year","919e1781":"#The 5 states that take the most time compared to the estimated date\ndelivery_low = freight_value[(freight_value[\"delivery_day_time\"]>=1)]\ndelivery_low = delivery_low.groupby(\"seller_state\").mean()[\"delivery_day_time\"].reset_index().sort_values(by=\"delivery_day_time\",ascending=False).head(10)\ndelivery_low","94cf8789":"#The 5 states that take less time to deliver compared to the estimated date\ndelivery_fast = freight_value[(freight_value[\"delivery_day_time\"]<=0)]\ndelivery_fast = delivery_fast.groupby(\"seller_state\").mean()[\"delivery_day_time\"].reset_index().sort_values(by=\"delivery_day_time\",ascending=True).head(10)\ndelivery_fast","346ac0c9":"delivery = freight_value.groupby(\"seller_state\").agg({\"freight_value_x\":\"mean\", \"customer_day_time\":\"mean\", \"purchase_estimated_day_time\": \"mean\"}).reset_index().sort_values(by=\"freight_value_x\", ascending=False)\ndelivery.head()","a67f0609":"fig = plt.figure(constrained_layout=True, figsize=(15, 20))\n\n# Axis definition\ngs = GridSpec(6, 2, figure=fig)\nax1 = fig.add_subplot(gs[0, 0])\nax2 = fig.add_subplot(gs[0, 1:])\nax3 = fig.add_subplot(gs[1, :])\nax4 = fig.add_subplot(gs[2, 0])\nax5 = fig.add_subplot(gs[2, 1])\nax6 = fig.add_subplot(gs[3, :])\n\ncolors_list = ['lightskyblue', 'lightgreen']\nexplode = (0.0, 0.2)\n\nax1.pie(delivery_status[\"seller_id\"], autopct='%1.1f%%',shadow=True, startangle=40,pctdistance=0.8, explode=explode, colors=colors_list)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax1.legend(labels=delivery_status[\"delivery_status\"], loc='upper left')\nax1.set_title(\"Delivery Status\", size=14, color='black')\n\nsns.barplot(x=\"order_purchase_year\", y=\"seller_id\", data=delivery_status_year, ax=ax2, hue=\"delivery_status\", palette=\"mako\")\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\nax2.legend(loc=\"best\")\nax2.set_title(\"Delivery Status \\nPer Year\", size=14, color=\"black\")\nfor p in ax2.patches:\n        ax2.annotate('{:,.0f}'.format(p.get_height()), (p.get_x()+0.2, p.get_height()),\n                    ha=\"center\", va=\"bottom\", xytext=(0, 1), textcoords=\"offset points\",\n                    color= 'black')\nax2.spines['top'].set_visible(False)\nax2.spines['right'].set_visible(False)\nax2.spines['left'].set_visible(False)\nax2.set_yticklabels([])\nax2.set_yticks([])\n\n\nsns.histplot(data=freight_value, x=freight_value[\"delivery_day_time\"], kde=True, ax=ax3, color=colors_list, hue=freight_value[\"delivery_status\"])\nax3.set_xlim(-40,20)\nax3.set_xlabel(\"Days\")\nax3.set_ylabel(\"\")\nax3.set_title(\"Difference between the estimated delivery date and the actual delivery date\", size=14, color=\"black\")\nax3.spines['top'].set_visible(False)\nax3.spines['right'].set_visible(False)\nax3.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))\n\nsns.barplot(x=\"delivery_day_time\", y=\"seller_state\",  data=delivery_low, ax=ax4, color=\"darkblue\")\nax4.set_xlabel(\"Days\")\nax4.set_ylabel(\"\")\nax4.set_title(\"The 10 states that take longer to deliver compared to the estimated date\",size=14, color=\"black\")\nfor rect in ax4.patches:\n    ax4.annotate('{:,.0f} days'.format(rect.get_width()),(rect.get_width(),rect.get_y() + rect.get_height() \/ 2),\n                xytext=(0, 0),textcoords='offset points', va='center', ha='right', size=12, color=\"white\")\nax4.spines['top'].set_visible(False)\nax4.spines['right'].set_visible(False)\nax4.spines['left'].set_visible(False)\nax4.spines['bottom'].set_visible(False)\nax4.axes.get_xaxis().set_visible(False)\n\nsns.barplot(x=\"delivery_day_time\", y=\"seller_state\",  data=delivery_fast, ax=ax5, color=\"darkblue\")\nax5.set_xlabel(\"Days\")\nax5.set_ylabel(\"\")\nax5.set_title(\"The 10 states that take less time to deliver compared to the estimated date\",size=14, color=\"black\")\nfor rect in ax5.patches:\n    ax5.annotate('{:,.0f} days'.format(rect.get_width()),(rect.get_width(),rect.get_y() + rect.get_height() \/ 2),\n                xytext=(-1, 0),textcoords='offset points', va='center', ha='left', size=12, color=\"white\")\nax5.spines['top'].set_visible(False)\nax5.spines['right'].set_visible(False)\nax5.spines['left'].set_visible(False)\nax5.spines['bottom'].set_visible(False)\nax5.axes.get_xaxis().set_visible(False)\n\nsns.barplot(x=\"seller_state\", y=\"freight_value_x\", data=delivery, ax=ax6, color=\"dodgerblue\")\n#ax6.legend(loc=\"best\")\nax6.set_xlabel(\"States\")\nax6.set_ylabel(\"Average freight cost\")\nax6.set_title(\"Average Delivery Cost and Shipping\", size=14, color=\"black\", loc='left')\nfor p in ax6.patches:\n        ax6.annotate('R${:,.0f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()),\n                    ha=\"center\", va=\"bottom\", xytext=(0, 1), textcoords=\"offset points\",\n                    color= 'black', size=12)\nax6.spines['top'].set_visible(False)\nax6.spines['left'].set_visible(False)\nax6.set_yticklabels([])\nax6.set_yticks([])\nax6_twx = ax6.twinx()\nsns.lineplot(x=\"seller_state\", y='customer_day_time', data=delivery, ax=ax6_twx, linewidth=1.0, color=\"darkblue\", marker=\"o\", markersize=7)\nsns.lineplot(x=\"seller_state\", y='purchase_estimated_day_time', data=delivery, ax=ax6_twx, linewidth=1.0, color=\"darkgreen\", marker=\"o\", markersize=8)\nax6_twx.set_ylabel(\"Days\")\nax6_twx.spines['top'].set_visible(False)\nax6_twx.spines['left'].set_visible(False)\n\nax6_twx.annotate(f'Average Estimated Delivery Time', (\"AM\", 48), xytext=(75, 25), \n             textcoords='offset points', bbox=dict(boxstyle=\"round4\", fc=\"w\", pad=.8),\n             arrowprops=dict(arrowstyle='-|>', fc='w'), color='darkblue', ha='center')\n\nax6_twx.annotate(f'Average Delivery Time', (\"AM\", 39), xytext=(100, 25), \n             textcoords='offset points', bbox=dict(boxstyle=\"round4\", fc=\"w\", pad=.8),\n             arrowprops=dict(arrowstyle='-|>', fc='w'), color='darkgreen', ha='center')\n\n\nplt.suptitle(\"Freight times and costs\", size=18)","05f08fa5":"reviews = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_order_reviews_dataset.csv\")\nprint(reviews.isnull().sum())\nprint()\nprint(reviews.shape)\nprint()\nprint(reviews.info())","1a76e918":"## Rangos para asignar\nconditionlist = [\n    (reviews[\"review_score\"] <=2),(reviews[\"review_score\"] == 3),(reviews[\"review_score\"] >= 4)]\n\n## Nombre de los rangos de acuerdo a la entrega\nchoicelist = [\"Negative\", \"Neutral\", \"Positive\"]\nreviews[\"score_classification\"] = np.select(conditionlist, choicelist, default='Not Specified')\n\n## Rangos para asignar\nconditionlist = [\n    (reviews[\"review_comment_message\"].isnull())]\n\n## Nombre de los rangos de acuerdo a la entrega\nchoicelist = [\"No Comment\"]\nreviews[\"comment_classification\"] = np.select(conditionlist, choicelist, default=\"With Comments\")\n\nreviews.head()","3b6a4328":"#Filter what has information\ncomments = reviews[reviews.review_comment_message.notnull()]\ncomments = comments[[\"review_id\", \"review_comment_message\"]]\ncomments.head()","40647869":"#from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n#from nltk.corpus import stopwords\n#import re\n\n# Defining a function to remove the stopwords and to lower the comments\ndef stopwords_removal(text, cached_stopwords=stopwords.words('portuguese')):\n    return [c.lower() for c in text.split() if c.lower() not in cached_stopwords]\n\nreview_comment_message = [' '.join(stopwords_removal(review)) for review in comments[\"review_comment_message\"]]\ncomments[\"review_comment_message\"] = review_comment_message\n\ndef re_hiperlinks(text_list):\n    \"\"\"\n    Args:\n    ----------\n    text_list: list object with text content to be prepared [type: list]\n    \"\"\"\n    \n    # Applying regex\n    pattern = 'http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'\n    return [re.sub(pattern, ' ', r) for r in text_list]\n\n# Applying RegEx\nreviews_hiperlinks = re_hiperlinks(review_comment_message)\ncomments[\"review_comment_message\"] = reviews_hiperlinks\n\ndef re_dates(text_list):\n    \"\"\"\n    Args:\n    ----------\n    text_list: list object with text content to be prepared [type: list]\n    \"\"\"\n    \n    # Applying regex\n    pattern = '([0-2][0-9]|(3)[0-1])(\\\/|\\.)(((0)[0-9])|((1)[0-2]))(\\\/|\\.)\\d{2,4}'\n    return [re.sub(pattern, ' ', r) for r in text_list]\n\n# Applying RegEx\nreviews_dates = re_dates(reviews_hiperlinks)\ncomments[\"review_comment_message\"] = reviews_dates\n\ndef re_money(text_list):\n    \"\"\"\n    Args:\n    ----------\n    text_list: list object with text content to be prepared [type: list]\n    \"\"\"\n    \n    # Applying regex\n    pattern = '[R]{0,1}\\$[ ]{0,}\\d+(,|\\.)\\d+'\n    return [re.sub(pattern, '  ', r) for r in text_list]\n\n# Applying RegEx\nreviews_money = re_money(reviews_dates)\ncomments[\"review_comment_message\"] = reviews_money\n\ndef re_numbers(text_list):\n    \"\"\"\n    Args:\n    ----------\n    text_series: list object with text content to be prepared [type: list]\n    \"\"\"\n    \n    # Applying regex\n    return [re.sub('[0-9]+', '  ', r) for r in text_list]\n\n# Applying RegEx\nreviews_numbers = re_numbers(reviews_money)\ncomments[\"review_comment_message\"] = reviews_numbers\n\ndef re_negation(text_list):\n    \"\"\"\n    Args:\n    ----------\n    text_series: list object with text content to be prepared [type: list]\n    \"\"\"\n    \n    # Applying regex\n    return [re.sub('([nN][\u00e3\u00c3aA][oO]|[\u00f1\u00d1]| [nN] )', '  ', r) for r in text_list]\n\n# Applying RegEx\nreviews_negation = re_negation(reviews_numbers)\ncomments[\"review_comment_message\"] = reviews_negation\n\ndef re_special_chars(text_list):\n    \"\"\"\n    Args:\n    ----------\n    text_series: list object with text content to be prepared [type: list]\n    \"\"\"\n    \n    # Applying regex\n    return [re.sub('\\W', ' ', r) for r in text_list]\n\n# Applying RegEx\nreviews_special_chars = re_special_chars(reviews_negation)\ncomments[\"review_comment_message\"] = reviews_special_chars\n\ndef re_whitespaces(text_list):\n    \"\"\"\n    Args:\n    ----------\n    text_series: list object with text content to be prepared [type: list]\n    \"\"\"\n    \n    # Applying regex\n    white_spaces = [re.sub('\\s+', ' ', r) for r in text_list]\n    white_spaces_end = [re.sub('[ \\t]+$', '', r) for r in white_spaces]\n    return white_spaces_end\n\n# Applying RegEx\nreviews_whitespaces = re_whitespaces(reviews_special_chars)\ncomments[\"review_comment_message\"] = reviews_whitespaces\n\ncomments.head()","f13f59bc":"#from PIL import Image\n#mask = np.array(Image.open(\"..\/input\/imagenes\/olist.png\"))\n#mask\n\n# Transforming like mask\n#transf_mask = np.ndarray((mask.shape[0], mask.shape[1]), np.int32)\n#for i in range(len(mask)):\n#    transf_mask[i] = [255 if px == 0 else 0 for px in mask[i]]","e630dfa7":"mask = np.array(Image.open(\"..\/input\/imagenes\/olist.png\"))\n#mask\nwordcloud = WordCloud(width=5280, height=720,mask=mask, background_color='white', max_words=100).generate(str(reviews_whitespaces))\n#plt.imshow(wordcloud)\n#plt.axis('off')","d01b3f70":"fig = plt.figure(constrained_layout=True, figsize=(15, 10))\n\n# Axis definition\ngs = GridSpec(2, 2, figure=fig)\nax1 = fig.add_subplot(gs[0, 0])\nax2 = fig.add_subplot(gs[0, 1:])\nax3 = fig.add_subplot(gs[1, :])\n#ax4 = fig.add_subplot(gs[2, 0])\n#ax5 = fig.add_subplot(gs[2, 1])\n#ax6 = fig.add_subplot(gs[3, :])\n\nsns.barplot(x=\"review_score\", y=\"review_id\", data=reviews.groupby(\"review_score\").count()[\"review_id\"].reset_index(), ax=ax1, color=\"dodgerblue\")\nax1.set_xlabel(\"Score\", size=12)\nax1.set_ylabel(\"\")\nax1.set_title(\"Score Received by Reviews\", size=14, color=\"black\")\nfor p in ax1.patches:\n        ax1.annotate('{:,.0f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()),\n                    ha=\"center\", va=\"bottom\", xytext=(0, 1), textcoords=\"offset points\",\n                    color= 'black', size=12)\nax1.spines['top'].set_visible(False)\nax1.spines['left'].set_visible(False)\nax1.spines['right'].set_visible(False)\nax1.set_yticklabels([])\nax1.set_yticks([])\n\ncomment_classification = reviews.groupby(\"comment_classification\").count()[\"review_id\"].reset_index()\ncolors_list = ['lightskyblue', 'lightgreen']\nexplode = (0.0, 0.05)\n\nax2.pie(comment_classification[\"review_id\"], autopct='%1.1f%%',shadow=True, startangle=40,pctdistance=0.8, explode=explode, colors=colors_list)\nax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax2.legend(labels=comment_classification[\"comment_classification\"], loc='upper right')\nax2.set_title(\"Percentage of Comments Received\", size=14, color='black')\n\nax3.imshow(wordcloud)\nax3.axis('off')\nax3.set_title(\"Most Commented Words\", size=14, color='black')\n\nplt.suptitle(\"Reviews\", size=18)","7a4a2a2b":"##### "}}