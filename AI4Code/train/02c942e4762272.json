{"cell_type":{"22333d65":"code","1bd83461":"code","78f06b89":"code","78654593":"code","e451db07":"code","8a8305fd":"code","97f80306":"code","b4a18d56":"code","70aa4758":"code","5ae7f0fc":"code","275e904d":"code","2497b9ff":"code","c83e9d8f":"code","f2b2364a":"code","cdddaacf":"code","90653176":"code","1a39b8a6":"markdown"},"source":{"22333d65":"import keras.backend as K\nfrom keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D, Reshape, Flatten\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import RMSprop\nfrom keras.models import Model\nfrom sklearn.utils import shuffle\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport numpy as np\nimport scipy\nfrom tqdm import tqdm_notebook as tqdm\nimport glob\nimport cv2","1bd83461":"IMG_SHAPE = (28, 28)","78f06b89":"X = np.concatenate([np.load('..\/input\/%s-%s-imgs.npz'%(dset, kind))['arr_0'] for dset in ['k49', 'kmnist'] for kind in ['train', 'test']])                          ","78654593":"X2 = np.array([cv2.resize(cv2.imread(x, cv2.IMREAD_GRAYSCALE),(28,28), interpolation=cv2.INTER_NEAREST) for x in tqdm(glob.glob('..\/input\/kkanji\/*\/*\/*'))])","e451db07":"X = np.concatenate([X, X2])\/255\ndel X2","8a8305fd":"X = X.reshape(X.shape + (1,))","97f80306":"def print_sample_images(n=16):\n    sample = np.random.choice(range(X.shape[0]), n)\n    plt.subplots(1, n, figsize=(20,4))\n    for i, img in enumerate(sample):\n        plt.subplot(1, n, i+1)\n        plt.imshow(X[sample[i]].reshape(IMG_SHAPE), cmap='magma')\n        plt.axis('off')\n    plt.tight_layout()\n    plt.show()\n    \nprint_sample_images()","b4a18d56":"datagen = ImageDataGenerator(\n    featurewise_center=False,\n    samplewise_center=False,\n    featurewise_std_normalization=False,\n    samplewise_std_normalization=False,\n    zca_whitening=False,\n    rotation_range=5,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    brightness_range=None,\n    shear_range=0,\n    zoom_range=0.1,\n    fill_mode='constant',\n    cval=0,\n    horizontal_flip=False,\n    vertical_flip=False,\n    preprocessing_function=None,\n    data_format=None,\n    validation_split=None\n)","70aa4758":"def view_aug(x, n=10):\n    print\n    plt.subplots(1, n+1, figsize=(20,5))\n    for i in range(n+1):\n        aug = x if i==0 else next(datagen.flow(np.array([x]), np.array([0]), batch_size=1))[0][0]\n        plt.subplot(1, n+1, i+1)\n        plt.imshow(aug.reshape(IMG_SHAPE), cmap='magma')\n        plt.title(\"Original\" if i==0 else \"Aug #%s\"%i)\n        plt.axis('off')\n    plt.tight_layout()\n    plt.show()\n\nview_aug(X[np.random.randint(0, X.shape[0])])","5ae7f0fc":"def conv_autoencoder(input_shape, latent_dim):\n    i = Input(input_shape, name=\"input\")\n    x = Conv2D(32, kernel_size=(3, 3), activation='relu', padding='same')(i)\n    x = MaxPooling2D(pool_size=(2, 2), padding='same')(x)\n    x = Conv2D(16, kernel_size=(3, 3), activation='relu', padding='same')(x)\n    x = MaxPooling2D(pool_size=(2, 2), padding='same')(x)\n    x = Conv2D(8, kernel_size=(3, 3), activation='relu', padding='same')(x)\n    shape = K.int_shape(x)[1:]\n    x = Flatten()(x)\n    m = Dense(latent_dim, name=\"middle\", activation='relu')(x)\n    \n    encoder = Model(i, m, name='encoder')\n\n    l = Input(shape=(latent_dim,), name='decoder_input')\n    x = Dense(shape[0]*shape[1]*shape[2], activation='relu')(l)\n    x = Reshape(shape)(x)\n    x = Conv2D(16, kernel_size=(3, 3), activation='relu', padding='same')(x)\n    x = UpSampling2D((2, 2))(x)\n    x = Conv2D(32, kernel_size=(3, 3), activation='relu', padding='same')(x)\n    x = UpSampling2D((2, 2))(x)\n    o = Conv2D(1, kernel_size=(3, 3), activation='sigmoid', padding='same', name=\"output\")(x)\n\n    decoder = Model(l, o, name='decoder')\n    \n    model = Model(i, decoder(encoder(i)), name='autoencoder')\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['mse'])\n\n    return model, encoder, decoder","275e904d":"autoencoder, encoder, decoder = conv_autoencoder(IMG_SHAPE+(1,), 64)","2497b9ff":"encoder.summary()\ndecoder.summary()","c83e9d8f":"def imgenerator(imgs, batch_size):\n    for b in range(0, len(imgs), batch_size):\n        arr = imgs[b:b+batch_size]\n        next(datagen.flow(arr, np.zeros(arr.shape), batch_size=10))[0]\n        yield (arr, arr)","f2b2364a":"BATCH_SIZE=32\nautoencoder.fit_generator(imgenerator(X, BATCH_SIZE), steps_per_epoch=np.ceil(X.shape[0]\/BATCH_SIZE), epochs=1)","cdddaacf":"def print_sample_autoencodings(n=5):\n    plt.subplots(2, n, figsize=(20,4))\n    imgs = np.random.choice(range(X.shape[0]), n)\n    preds = autoencoder.predict(X[imgs])\n    for i in range(n):\n        plt.subplot(2, n, i+1)\n        plt.imshow(X[imgs[i]].reshape(IMG_SHAPE), cmap='magma')\n        plt.axis('off')\n        plt.subplot(2, n, n+i+1)\n        plt.imshow(preds[i].reshape(IMG_SHAPE), cmap='magma')\n        plt.axis('off')\n    plt.show()\n    \nprint_sample_autoencodings()","90653176":"def print_sample_autoencodings(n=10):\n    plt.subplots(1, n+2, figsize=(20,4))\n    imgs = np.random.choice(range(X.shape[0]), 2)\n    p1 = encoder.predict(X[imgs[:1]])\n    p2 = encoder.predict(X[imgs[1:]])\n    for i in range(n+2):\n        plt.subplot(1, n+2, i+1)\n        v = (i*p1 + (n+1-i)*p2)\/(n+1)\n        plt.imshow(decoder.predict(v)[0].reshape(IMG_SHAPE), cmap='gray')\n        plt.title(\"%.2f\"%(i\/(n+1)))\n        plt.axis('off')\n    plt.tight_layout()\n    plt.show()\n    \nprint_sample_autoencodings()","1a39b8a6":"# Augmentation"}}