{"cell_type":{"6ef5c431":"code","463db328":"code","34cf003f":"code","4abeca80":"code","4e3d00f4":"code","9ee91df4":"code","6d11ca54":"code","8c4a290c":"code","a51bfc86":"code","fe54bf03":"code","5e1dc2ce":"code","6dceac02":"code","a5618fbc":"code","431cdf56":"code","f08035c1":"code","68106c59":"code","909bc8d1":"code","cae4404f":"code","dced381e":"code","85b35a8f":"code","b093607d":"code","e697e308":"code","3d3a80b1":"code","d5f4f924":"code","45633cd9":"code","c82146fb":"code","55251c8c":"code","ee5975ca":"code","b8a49f26":"code","f8e84985":"code","e090aede":"code","6c2f6f56":"code","351f844a":"code","c66e9ef3":"code","060b1ed4":"code","0ec607ea":"code","cea9587c":"code","6eff9fd2":"code","5f9deea5":"code","426d68f4":"code","1785a881":"code","dcc4310c":"code","c276ace2":"code","f57099d9":"code","a85e0a4d":"code","fb3d9b79":"code","9970dfb8":"code","fecebd88":"code","40960a3d":"code","896a52ef":"code","cec60d42":"code","d670e1ce":"code","f5366ab0":"code","ece184d0":"code","60be9c1e":"code","6fff61aa":"code","c55267a8":"code","e440ddec":"code","e62f65ea":"code","1c5b3896":"code","4e2a4cd7":"code","736553b1":"code","b2decac6":"code","b421188c":"code","f0589216":"code","ad921cc9":"code","60e58728":"code","c560ae66":"code","425a6f81":"code","e80f290d":"code","5ed47b02":"code","5c600c28":"code","054552fd":"code","6b0896f0":"code","7bf9fde8":"code","2e513429":"code","7f93ce9b":"code","19ad36b6":"code","b2431699":"code","6148f6b1":"code","0d59d6ca":"code","8970c5df":"code","7dcd2059":"code","c10e365f":"code","a0539533":"code","8daa5f78":"code","0098debf":"code","72495883":"code","738ed79d":"code","7a421de2":"code","a38fbec3":"code","4fac7d72":"code","1ccb29fd":"code","9dc24dd7":"code","b228e349":"code","5b633ef9":"code","700d89b8":"code","afaca961":"code","f7363d29":"code","35b06c5b":"code","d7ac1d6a":"code","294f6e52":"code","441ac127":"code","35f99f71":"code","c806924b":"code","030afaa2":"code","24708d9a":"code","e6f2b080":"code","f6252419":"code","591a6047":"code","5ca7a2dd":"code","a7713a1e":"code","8fc2931e":"code","800b8fdf":"code","49a51b70":"code","62a33f30":"code","90399552":"code","60894136":"code","b27f232b":"code","f701228d":"code","f29e1a78":"code","89392558":"markdown","468546f1":"markdown","51504bff":"markdown","02714f20":"markdown","f20358b7":"markdown"},"source":{"6ef5c431":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVC\nfrom sklearn import tree\nfrom keras import Model\nfrom keras.models import Sequential\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import GridSearchCV\nfrom keras.layers import Dense , Dropout\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.callbacks import EarlyStopping\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","463db328":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","34cf003f":"train.shape","4abeca80":"train.info()","4e3d00f4":"train.isnull().sum()","9ee91df4":"train.describe()","6d11ca54":"train.head()","8c4a290c":"train.Age.fillna(round(train.Age.mean(),2),inplace = True)","a51bfc86":"labelencoder = LabelEncoder()\ntrain['SexLabel'] = labelencoder.fit_transform(train['Sex'])\ntrain.head()","fe54bf03":"max_value = train.Fare.max()\nprint(max_value)\nmin_value = train.Fare.min()\nprint(min_value)\ndef scale_fare(x):\n    s = (max_value - x)\/(max_value - min_value)\n    return round(s,3)\n\ntrain.Fare = train.Fare.apply(scale_fare)","5e1dc2ce":"train.head()","6dceac02":"enc = OneHotEncoder(handle_unknown='ignore')\nenc_df = pd.DataFrame(enc.fit_transform(train[['Survived']]).toarray())\ntrain = train.join(enc_df)\ntrain.head()","a5618fbc":"# train.rename(columns={0:'Survived0',1:'Survived1'},inplace = True)\n# train.head()","431cdf56":"corr = train.corr()\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\nf, ax = plt.subplots(figsize=(11, 9))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr, mask=mask,cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5,annot=True, cbar_kws={\"shrink\": .5})","f08035c1":"trainy = train.Survived\ntrainy.head()","68106c59":"trainy2 = train[[0,1]]","909bc8d1":"trainx = train.drop('Survived',axis = 1)\ntrainx.head()","cae4404f":"X_train, X_test, y_train, y_test = train_test_split(trainx[['Pclass','SexLabel','Fare','Age','SibSp','Parch']]\n                                                    ,trainy\n                                                    , test_size=0.15, random_state=0)","dced381e":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.head()","85b35a8f":"test.isnull().sum()","b093607d":"test.Age.fillna(round(test.Age.mean(),2),inplace = True)\ntest.Fare.fillna(round(test.Fare.mean(),4),inplace = True)","e697e308":"max_value = test.Fare.max()\nprint(max_value)\nmin_value = test.Fare.min()\nprint(min_value)\ndef scale_fare(x):\n    s = (max_value - x)\/(max_value - min_value)\n    return round(s,3)\n\ntest.Fare = test.Fare.apply(scale_fare)","3d3a80b1":"labelencoder = LabelEncoder()\ntest['SexLabel'] = labelencoder.fit_transform(test['Sex'])","d5f4f924":"test.head()","45633cd9":"LR = LogisticRegression()\nsolver = ['newton-cg','lbfgs','liblinear','sag','saga']\nweight = ['balanced', None]\nparameters = {'solver':solver,\n              'class_weight':weight}","c82146fb":"clf = GridSearchCV(LR, parameters)\nclf.fit(trainx[['Pclass','SexLabel','Fare','Age','SibSp','Parch']],trainy)","55251c8c":"best_parameters = pd.DataFrame(clf.cv_results_)\nbest_parameters.head()","ee5975ca":"indexs = best_parameters[best_parameters['rank_test_score'] == 1].index[0]\nbest_parameters.loc[indexs,'params']","b8a49f26":"best_parameters.loc[indexs,'mean_test_score']","f8e84985":"LR = LogisticRegression()\nsolver = ['newton-cg','lbfgs','liblinear','sag','saga']\nweight = ['balanced', None]\nparameters = {'solver':solver,\n              'class_weight':weight}\n\nclf = GridSearchCV(LR, parameters)","e090aede":"clf.fit(trainx[['Pclass','SexLabel','Fare','Age','Parch']],trainy)\nbest_parameters = pd.DataFrame(clf.cv_results_)\nindexs = best_parameters[best_parameters['rank_test_score'] == 1].index[0]\nbest_parameters.loc[indexs,'params']","6c2f6f56":"best_parameters.loc[indexs,'mean_test_score']","351f844a":"LR = LogisticRegression()\nsolver = ['newton-cg','lbfgs','liblinear','sag','saga']\nweight = ['balanced', None]\nparameters = {'solver':solver,\n              'class_weight':weight}\n\nclf = GridSearchCV(LR, parameters)","c66e9ef3":"clf.fit(trainx[['Pclass','SexLabel','Fare','Age','SibSp']],trainy)\nbest_parameters = pd.DataFrame(clf.cv_results_)\nindexs = best_parameters[best_parameters['rank_test_score'] == 1].index[0]\nbest_parameters.loc[indexs,'params']","060b1ed4":"best_parameters.loc[indexs,'mean_test_score']","0ec607ea":"LR = LogisticRegression()\nsolver = ['newton-cg','lbfgs','liblinear','sag','saga']\nweight = ['balanced', None]\nparameters = {'solver':solver,\n              'class_weight':weight}\n\nclf = GridSearchCV(LR, parameters)","cea9587c":"clf.fit(trainx[['Pclass','SexLabel','Fare','Age']],trainy)\nbest_parameters = pd.DataFrame(clf.cv_results_)\nindexs = best_parameters[best_parameters['rank_test_score'] == 1].index[0]\nbest_parameters.loc[indexs,'params']","6eff9fd2":"best_parameters.loc[indexs,'mean_test_score']","5f9deea5":"LR = LogisticRegression(solver='sag',class_weight=None)\nLR.fit(X_train, y_train)","426d68f4":"y_pred = LR.predict(X_test)\ny_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","1785a881":"counter = 0\ny_pred['index'] = 0\nfor indexs in X_test.index.values:\n    y_pred['index'][counter] = indexs\n    counter = counter +  1","dcc4310c":"y_pred = y_pred.set_index('index')\ny_pred.head(5)","c276ace2":"y_test = pd.DataFrame(y_test,columns=['Survived'])\ny_test.head(5)","f57099d9":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.head(5)","a85e0a4d":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","fb3d9b79":"print(classification_report(y_test, y_pred))","9970dfb8":"count_misclassified = (common.Survived != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","fecebd88":"LR = LogisticRegression(solver='sag',class_weight=None)\nLR.fit(trainx[['Pclass','SexLabel','Fare','Age','SibSp','Parch']],trainy)","40960a3d":"y_pred = LR.predict(test[['Pclass','SexLabel','Fare','Age','SibSp','Parch']])\ny_pred = pd.DataFrame(y_pred,columns=['Survived'])\ny_pred.head(5)","896a52ef":"y_pred['PassengerId'] = test['PassengerId']\ny_pred.head(5)","cec60d42":"len(y_pred)","d670e1ce":"y_pred = y_pred[['PassengerId','Survived']]\ny_pred.to_csv('Submission_Logestic.csv',index = False)","f5366ab0":"svm = SVC()\nkernel = ['linear','poly','rbf','sigmoid']\nweight = ['balanced', None]\nparameters = {'kernel':kernel,\n              'class_weight':weight}","ece184d0":"clf = GridSearchCV(svm, parameters)\nclf.fit(trainx[['Pclass','SexLabel','Fare','Age','SibSp','Parch']],trainy)","60be9c1e":"best_parameters = pd.DataFrame(clf.cv_results_)\nbest_parameters.head()","6fff61aa":"indexs = best_parameters[best_parameters['rank_test_score'] == 1].index[0]\nbest_parameters.loc[indexs,'params']","c55267a8":"best_parameters.loc[indexs,'mean_test_score']","e440ddec":"# svm = SVC()\n# kernel = ['linear','poly','rbf','sigmoid']\n# weight = ['balanced', None]\n# parameters = {'kernel':kernel,\n#               'class_weight':weight}\n\n# clf = GridSearchCV(svm, parameters)","e62f65ea":"# clf.fit(trainx[['Pclass','SexLabel','Fare','Age','Parch']],trainy)\n# best_parameters = pd.DataFrame(clf.cv_results_)\n# indexs = best_parameters[best_parameters['rank_test_score'] == 1].index[0]\n# best_parameters.loc[indexs,'params']","1c5b3896":"# best_parameters.loc[indexs,'mean_test_score']","4e2a4cd7":"clf.fit(trainx[['Pclass','SexLabel','Fare','Age']],trainy)\nbest_parameters = pd.DataFrame(clf.cv_results_)\nindexs = best_parameters[best_parameters['rank_test_score'] == 1].index[0]\nbest_parameters.loc[indexs,'params']","736553b1":"best_parameters.loc[indexs,'mean_test_score']","b2decac6":"svm = SVC(kernel = 'linear' ,class_weight ='balanced')\nsvm.fit(X_train, y_train)","b421188c":"y_pred = svm.predict(X_test)\ny_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","f0589216":"counter = 0\ny_pred['index'] = 0\nfor indexs in X_test.index.values:\n    y_pred['index'][counter] = indexs\n    counter = counter +  1","ad921cc9":"y_pred = y_pred.set_index('index')\ny_pred.head(5)","60e58728":"y_test = pd.DataFrame(y_test,columns=['Survived'])\ny_test.head(5)","c560ae66":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.head(5)","425a6f81":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","e80f290d":"print(classification_report(y_test, y_pred))","5ed47b02":"count_misclassified = (common.Survived != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","5c600c28":"svm = SVC(kernel = 'linear' ,class_weight ='balanced')\nsvm.fit(trainx[['Pclass','SexLabel','Fare','Age','SibSp','Parch']],trainy)","054552fd":"y_pred = svm.predict(test[['Pclass','SexLabel','Fare','Age','SibSp','Parch']])\ny_pred = pd.DataFrame(y_pred,columns=['Survived'])\ny_pred.head(5)","6b0896f0":"y_pred['PassengerId'] = test['PassengerId']\ny_pred.head(5)","7bf9fde8":"y_pred = y_pred[['PassengerId','Survived']]\ny_pred.to_csv('Submission_bestSVM_gridsearch.csv',index = False)","2e513429":"DT = tree.DecisionTreeClassifier()\ncriterion = ['gini', 'entropy']\nmax_depth = [3,4,5,6,7,8,9]\nmin_sample = [10,15,20,25,40,50,60,70,100]\nweight = ['balanced', None]\nparameters = {'criterion':criterion,\n              'max_depth':max_depth,\n              'min_samples_split':min_sample,\n              'class_weight':weight}","7f93ce9b":"clf = GridSearchCV(DT, parameters)\nclf.fit(trainx[['Pclass','SexLabel','Fare','Age','SibSp','Parch']],trainy)","19ad36b6":"best_parameters = pd.DataFrame(clf.cv_results_)\nbest_parameters.head()","b2431699":"indexs = best_parameters[best_parameters['rank_test_score'] == 1].index[0]\nbest_parameters.loc[indexs,'params']","6148f6b1":"best_parameters.loc[indexs,'mean_test_score']","0d59d6ca":"DT = tree.DecisionTreeClassifier()\ncriterion = ['gini', 'entropy']\nmax_depth = [3,4,5,6,7,8,9]\nmin_sample = [10,15,20,25,40,50,60,70,100]\nweight = ['balanced', None]\nparameters = {'criterion':criterion,\n              'max_depth':max_depth,\n              'min_samples_split':min_sample,\n              'class_weight':weight}\n\nclf = GridSearchCV(DT, parameters)","8970c5df":"clf.fit(trainx[['Pclass','SexLabel','Fare','Age','Parch']],trainy)\nbest_parameters = pd.DataFrame(clf.cv_results_)\nindexs = best_parameters[best_parameters['rank_test_score'] == 1].index[0]\nbest_parameters.loc[indexs,'params']","7dcd2059":"best_parameters.loc[indexs,'mean_test_score']","c10e365f":"DT = tree.DecisionTreeClassifier()\ncriterion = ['gini', 'entropy']\nmax_depth = [3,4,5,6,7,8,9]\nmin_sample = [10,15,20,25,40,50,60,70,100]\nweight = ['balanced', None]\nparameters = {'criterion':criterion,\n              'max_depth':max_depth,\n              'min_samples_split':min_sample,\n              'class_weight':weight}\n\nclf = GridSearchCV(DT, parameters)","a0539533":"clf.fit(trainx[['Pclass','SexLabel','Fare','Age']],trainy)\nbest_parameters = pd.DataFrame(clf.cv_results_)\nindexs = best_parameters[best_parameters['rank_test_score'] == 1].index[0]\nbest_parameters.loc[indexs,'params']","8daa5f78":"best_parameters.loc[indexs,'mean_test_score']","0098debf":"DT = tree.DecisionTreeClassifier(criterion= 'entropy',max_depth = 8 ,min_samples_split = 15,class_weight =None )\nDT.fit(X_train, y_train)","72495883":"tree.plot_tree(DT) ","738ed79d":"y_pred = DT.predict(X_test)\ny_pred = pd.DataFrame(y_pred,columns=['y_pred'])\ny_pred.head(5)","7a421de2":"counter = 0\ny_pred['index'] = 0\nfor indexs in X_test.index.values:\n    y_pred['index'][counter] = indexs\n    counter = counter +  1","a38fbec3":"y_pred = y_pred.set_index('index')\ny_pred.head(5)","4fac7d72":"y_test = pd.DataFrame(y_test,columns=['Survived'])\ny_test.head(5)","1ccb29fd":"common = y_test.merge(y_pred, left_index=True, right_index=True)\ncommon.head(5)","9dc24dd7":"mat = confusion_matrix(y_test,y_pred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\nplt.xlabel('true label')\nplt.ylabel('predicted label')","b228e349":"print(classification_report(y_test, y_pred))","5b633ef9":"count_misclassified = (common.Survived != common.y_pred).sum()\nprint('Misclassified samples: {}'.format(count_misclassified))\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint('Accuracy: {:.2f}'.format(accuracy))","700d89b8":"DT = tree.DecisionTreeClassifier(criterion= 'entropy',max_depth = 8 ,min_samples_split = 15,class_weight =None )\nDT.fit(trainx[['Pclass','SexLabel','Fare','Age','SibSp','Parch']],trainy)","afaca961":"y_pred = DT.predict(test[['Pclass','SexLabel','Fare','Age','SibSp','Parch']])\ny_pred = pd.DataFrame(y_pred,columns=['Survived'])\ny_pred.head(5)","f7363d29":"y_pred['PassengerId'] = test['PassengerId']\ny_pred.head(5)","35b06c5b":"y_pred = y_pred[['PassengerId','Survived']]\ny_pred.to_csv('Submission_bestDT_gridsearch.csv',index = False)","d7ac1d6a":"def create_model(nlayer1 = 20 , active1 = 'relu' ,\n                 nlayer2 = 10 ,active2 = 'relu',\n                 nlayer3 = 4 ,active3 = 'relu'):\n    # create model\n    model = Sequential()\n    model.add(Dense(nlayer1, input_dim=6, activation= active1))\n    model.add(Dropout(0.2))\n    model.add(Dense(nlayer2, activation=active2))\n    model.add(Dense(nlayer3, activation=active3))\n    model.add(Dense(2, activation='softmax'))\n    # Compile model\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n\n\n\nmodel = KerasClassifier(build_fn=create_model, verbose=0, validation_split=0.2)\n\nneurons1 = [20,10]\nneurons2 = [15,10]\nneurons3 = [4]\nnepochs = [30]\nnbatch_size = [5,15,50]\nactive_func = ['relu','linear','tanh']\n\nparam_grid = {\"epochs\" :nepochs ,'batch_size':nbatch_size,\n              \"nlayer1\":neurons1,\"nlayer2\":neurons2,\"nlayer3\":neurons3,\n              \"active1\":active_func,\"active2\":active_func,\"active3\":active_func}\n\nstopper = EarlyStopping(monitor='val_accuracy', patience=8, verbose=1)\nfit_params = dict(callbacks=[stopper])","294f6e52":"clf = GridSearchCV(estimator=model, param_grid=param_grid)\nclf.fit(trainx[['Pclass','SexLabel','Fare','Age','SibSp','Parch']],trainy2,**fit_params)","441ac127":"best_parameters = pd.DataFrame(clf.cv_results_)\nbest_parameters.head()","35f99f71":"indexs = best_parameters[best_parameters['rank_test_score'] == 1].index[0]\nbest_parameters.loc[indexs,'params']","c806924b":"best_parameters.loc[indexs,'mean_test_score']","030afaa2":"active1= 'relu'\nactive2= 'linear'\nactive3= 'linear'\nbatch_size = 5\nepochs= 30\nnlayer1= 20\nnlayer2= 10\nnlayer3= 4","24708d9a":"model = Sequential()\nmodel.add(Dense(nlayer1, input_dim=6, activation= active1))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(nlayer2, activation=active2))\nmodel.add(Dense(nlayer3, activation=active3))\nmodel.add(Dense(2, activation='softmax'))\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nstopper = EarlyStopping(monitor='val_accuracy', patience=8, verbose=1)\nmodel.fit(trainx[['Pclass','SexLabel','Fare','Age','SibSp','Parch']],trainy2,\n          batch_size = batch_size,\n          epochs = epochs,\n          verbose=0, validation_split=0.2 ,callbacks=[stopper])","e6f2b080":"pred = model.predict(test[['Pclass','SexLabel','Fare','Age','SibSp','Parch']])\npred = pd.DataFrame(pred)\npred['Survived'] = pred.idxmax(axis=1)\npred['PassengerId'] = test['PassengerId']\nresult = pred[['PassengerId','Survived']]\nresult.head()","f6252419":"result.to_csv('submission_best_nn3.csv',index = False)","591a6047":"def create_model(nlayer1 = 20 , active1 = 'relu' ,\n                 nlayer2 = 10 ,active2 = 'relu',\n                 nlayer3 = 4 ,active3 = 'relu'):\n    # create model\n    model = Sequential()\n    model.add(Dense(nlayer1, input_dim=5, activation= active1))\n    model.add(Dropout(0.2))\n    model.add(Dense(nlayer2, activation=active2))\n    model.add(Dense(nlayer3, activation=active3))\n    model.add(Dense(2, activation='softmax'))\n    # Compile model\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n\n\n\nmodel = KerasClassifier(build_fn=create_model, verbose=0, validation_split=0.2)\n\nneurons1 = [20,10]\nneurons2 = [15,10]\nneurons3 = [4]\nnepochs = [30]\nnbatch_size = [5,15,50]\nactive_func = ['relu','linear','tanh']\n\nparam_grid = {\"epochs\" :nepochs ,'batch_size':nbatch_size,\n              \"nlayer1\":neurons1,\"nlayer2\":neurons2,\"nlayer3\":neurons3,\n              \"active1\":active_func,\"active2\":active_func,\"active3\":active_func}\n\nstopper = EarlyStopping(monitor='val_accuracy', patience=8, verbose=1)\nfit_params = dict(callbacks=[stopper])","5ca7a2dd":"clf = GridSearchCV(estimator=model, param_grid=param_grid)\nclf.fit(trainx[['Pclass','SexLabel','Fare','Age','Parch']],trainy2,**fit_params)","a7713a1e":"best_parameters = pd.DataFrame(clf.cv_results_)\nindexs = best_parameters[best_parameters['rank_test_score'] == 1].index[0]\nbest_parameters.loc[indexs,'params']","8fc2931e":"best_parameters.loc[indexs,'mean_test_score']","800b8fdf":"def create_model(nlayer1 = 20 , active1 = 'relu' ,\n                 nlayer2 = 10 ,active2 = 'relu',\n                 nlayer3 = 4 ,active3 = 'relu'):\n    # create model\n    model = Sequential()\n    model.add(Dense(nlayer1, input_dim=4, activation= active1))\n    model.add(Dropout(0.2))\n    model.add(Dense(nlayer2, activation=active2))\n    model.add(Dense(nlayer3, activation=active3))\n    model.add(Dense(2, activation='softmax'))\n    # Compile model\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n\n\n\nmodel = KerasClassifier(build_fn=create_model, verbose=0, validation_split=0.2)\n\nneurons1 = [20,10]\nneurons2 = [15,10]\nneurons3 = [4]\nnepochs = [30]\nnbatch_size = [5,15,50]\nactive_func = ['relu','linear','tanh']\n\nparam_grid = {\"epochs\" :nepochs ,'batch_size':nbatch_size,\n              \"nlayer1\":neurons1,\"nlayer2\":neurons2,\"nlayer3\":neurons3,\n              \"active1\":active_func,\"active2\":active_func,\"active3\":active_func}\n\nstopper = EarlyStopping(monitor='val_accuracy', patience=8, verbose=1)\nfit_params = dict(callbacks=[stopper])","49a51b70":"clf = GridSearchCV(estimator=model, param_grid=param_grid)\nclf.fit(trainx[['Pclass','SexLabel','Fare','Age']],trainy2,**fit_params)","62a33f30":"best_parameters = pd.DataFrame(clf.cv_results_)\nindexs = best_parameters[best_parameters['rank_test_score'] == 1].index[0]\nbest_parameters.loc[indexs,'params']","90399552":"best_parameters.loc[indexs,'mean_test_score']","60894136":"def create_model(nlayer1 = 20 , active1 = 'relu' ,\n                 nlayer2 = 10 ,active2 = 'relu',\n                 nlayer3 = 4 ,active3 = 'relu'):\n    # create model\n    model = Sequential()\n    model.add(Dense(nlayer1, input_dim=5, activation= active1))\n    model.add(Dropout(0.2))\n    model.add(Dense(nlayer2, activation=active2))\n    model.add(Dense(nlayer3, activation=active3))\n    model.add(Dense(2, activation='softmax'))\n    # Compile model\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n\n\n\nmodel = KerasClassifier(build_fn=create_model, verbose=0, validation_split=0.2)\n\nneurons1 = [20,10]\nneurons2 = [15,10]\nneurons3 = [4]\nnepochs = [30]\nnbatch_size = [5,15,50]\nactive_func = ['relu','linear']\n\nparam_grid = {\"epochs\" :nepochs ,'batch_size':nbatch_size,\n              \"nlayer1\":neurons1,\"nlayer2\":neurons2,\"nlayer3\":neurons3,\n              \"active1\":active_func,\"active2\":active_func,\"active3\":active_func}\n\nstopper = EarlyStopping(monitor='val_accuracy', patience=8, verbose=1)\nfit_params = dict(callbacks=[stopper])","b27f232b":"clf = GridSearchCV(estimator=model, param_grid=param_grid)\nclf.fit(trainx[['Pclass','SexLabel','Fare','Age','SibSp']],trainy2,**fit_params)","f701228d":"best_parameters = pd.DataFrame(clf.cv_results_)\nindexs = best_parameters[best_parameters['rank_test_score'] == 1].index[0]\nbest_parameters.loc[indexs,'params']","f29e1a78":"best_parameters.loc[indexs,'mean_test_score']","89392558":"# SVM","468546f1":"# Logistic Regression","51504bff":"# Deep Learning Models","02714f20":"# Preprocessing","f20358b7":"# Decision Tree"}}