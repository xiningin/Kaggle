{"cell_type":{"66e33ec0":"code","3b8b8e00":"code","e68addc0":"code","f67da30a":"code","7d3747c3":"code","8e7b21c7":"code","6027ea8a":"code","0934fa40":"code","c99dd170":"code","efae6a06":"code","034a2725":"code","181d6f74":"code","b6130992":"code","7caa88c6":"code","814b21e4":"code","2f652d46":"code","9cac0da7":"code","086c82f8":"code","07a13b6c":"code","66bb5745":"code","46a35e19":"code","3442494d":"code","638fa147":"code","d0ab0767":"code","870c2b2f":"code","97e21155":"code","3a16d2d0":"code","6c53b941":"code","923bc316":"code","ddb367b6":"code","834f2e54":"code","92aca2da":"code","81706afa":"code","c295d694":"code","582c87a3":"code","8fcdf994":"code","dd2421f1":"code","9448d2e2":"code","79957e2b":"code","495453ed":"code","e18637f0":"code","487958e9":"code","5697b4fb":"code","9cba0fe6":"code","2a7456cc":"code","5b2cea1f":"code","f2afe33b":"code","bed76573":"code","e9e6d8df":"code","6e1c640a":"code","0d213ca1":"code","a25e59a6":"code","77f493c4":"code","96ece459":"code","6b4e8a3a":"code","ee3e00d6":"code","e310e836":"code","56a02879":"code","54e3ee06":"code","90dc2396":"code","0d24677b":"code","65344e70":"code","506f531e":"code","310cd27f":"code","ff4df9b8":"code","539b4833":"code","262ff777":"code","426f2c49":"code","ced3fbfa":"markdown","f5535406":"markdown","c0fbb4e4":"markdown","866da6e9":"markdown","1a4ff367":"markdown","34ae058f":"markdown","46f3b48b":"markdown","a99a4b2e":"markdown","d94f427a":"markdown","ca226d95":"markdown","3b9b7401":"markdown","4e666a99":"markdown","63ccac9d":"markdown","64223fca":"markdown","9dbc754b":"markdown","06a064c3":"markdown","8762cdb1":"markdown","3124e04b":"markdown","b78e7af2":"markdown","8f357503":"markdown","c2a75d55":"markdown","5c8955be":"markdown","d6c68b83":"markdown","74b656ad":"markdown","7ba68c5b":"markdown"},"source":{"66e33ec0":"import torch\nimport torchvision\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision.transforms import ToTensor\nfrom torchvision.utils import make_grid\nfrom torch.utils.data.dataloader import DataLoader\nfrom torch.utils.data import random_split\nimport pandas as pd\nimport seaborn as sns\nfrom colorama import Fore, Back, Style\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","3b8b8e00":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","e68addc0":"train.shape","f67da30a":"test.shape","7d3747c3":"train.head()","8e7b21c7":"test.head()","6027ea8a":"train.isnull().sum()","0934fa40":"red = Fore.RED\ngrn = Fore.GREEN\nblu = Fore.BLUE\nylw = Fore.YELLOW\nwht = Fore.WHITE","c99dd170":"def plot_distribution(feature,color):\n    plt.figure(dpi=125)\n    sns.distplot(train[feature],color=color);\n    print(\"{}Max value of {} is {}\\n{}Min value of {} is {}\\n{}Mean value of {} is {}\\n{}Std value of {} is {}\\n{}Median value of {} is {}\".format(red,feature,train[feature].max(),blu,feature,train[feature].min(),grn,feature,train[feature].mean(),ylw,feature,train[feature].std(),wht,feature,train[feature].median()));","efae6a06":"plot_distribution('Age','green')","034a2725":"sns.set(style = 'darkgrid')\nplt.figure(dpi=125)\nsns.countplot(x=train.Sex, hue=train.Survived, data=train,edgecolor = sns.color_palette('dark',2));","181d6f74":"plt.figure(dpi=125)\nsns.countplot(x = train.Sex, hue = train.Pclass,data = train,edgecolor = sns.color_palette('dark',3));","b6130992":"plt.figure(dpi=125)\nsns.countplot(x = train.Survived, hue = train.Pclass, data = train,edgecolor = sns.color_palette('dark',1));","7caa88c6":"plt.figure(dpi=125)\nsns.countplot(x = train.Pclass, hue = train.Survived, data = train,edgecolor = sns.color_palette('dark',5));","814b21e4":"train.groupby('Pclass').Survived.value_counts()","2f652d46":"plt.figure(dpi=125)\nsns.countplot(x = train.Embarked, hue = train.Sex, data = train,edgecolor = sns.color_palette('dark',6));","9cac0da7":"plt.figure(dpi=125)\nsns.countplot(x = train.Embarked, hue = train.Survived, data = train);","086c82f8":"train['family'] = train['SibSp'] + train['Parch'] + 1","07a13b6c":"plt.figure(dpi=125)\nsns.countplot(x = train.family, hue = train.Survived, data = train);","66bb5745":"train.groupby('family').Survived.value_counts()","46a35e19":"for i in range(len(train)):\n    if(train['family'][i] > 1):\n        train['family'][i] = 1\n    else:\n        train['family'][i] = 0","3442494d":"plt.figure(dpi=125)\nsns.countplot(x = train.family, hue = train.Survived, data = train);","638fa147":"train['Cabin'].fillna('S',inplace=True)","d0ab0767":"train.groupby('Cabin').Survived.value_counts()","870c2b2f":"for i in range(len(train)):\n    train['Cabin'][i] = train['Cabin'][i][0]","97e21155":"train.groupby('Cabin').Survived.value_counts()","3a16d2d0":"plt.figure(dpi = 125)\nsns.countplot(x = train.Cabin,hue = train.Survived, data = train)","6c53b941":"plt.figure(dpi=125)\nplot_distribution('Fare','orange')","923bc316":"train['fare_val'] = 0\nfor i in range(len(train)):\n    if(train['Fare'][i] > 32.0):\n        train['fare_val'][i] = 1","ddb367b6":"train.groupby('fare_val').Survived.value_counts()","834f2e54":"plt.figure(dpi=125)\nsns.countplot(x = train.fare_val, hue = train.Survived, data = train);","92aca2da":"#family\ntest['family'] = test['SibSp'] + test['Parch'] + 1\nfor i in range(len(test)):\n    if(test['family'][i] > 1):\n        test['family'][i] = 1\n    else:\n        test['family'][i] = 0\n        \n#Cabin\ntest['Cabin'].fillna('S',inplace=True)\n\nfor i in range(len(test)):\n    test['Cabin'][i] = test['Cabin'][i][0]\n    \n#Fare\ntest['fare_val'] = 0\nfor i in range(len(test)):\n    if(test['Fare'][i] > 32.0):\n        test['fare_val'][i] = 1","81706afa":"features = [##'PassengerId',\n            'Pclass',\n            #'Name',\n            'Sex',\n            'Age',\n            ##'SibSp',\n            ##'Parch',\n            'family',#derived from SibSp & Parch\n            #'Ticket',\n            ##'Fare',\n            'fare_val',#derived from Fare\n            #'Cabin',\n            'Embarked'\n           ]\n\ntarget = 'Survived'","c295d694":"train[features].isnull().sum()","582c87a3":"test[features].isnull().sum()","8fcdf994":"'''Age_mean = train['Age'].mean()\ntrain['Age'] = train['Age'].fillna(value = Age_mean)\n\nAge_mean_t = test['Age'].mean()\ntest['Age'] = test['Age'].fillna(value = Age_mean_t)\nf\"'train',{Age_mean}, 'test',{Age_mean_t}\"''';","dd2421f1":"Age_std = train['Age'].std()\ntrain['Age'] = train['Age'].fillna(value = Age_std)\n\nAge_std_t = test['Age'].std()\ntest['Age'] = test['Age'].fillna(value = Age_std_t)\nf\"'train',{Age_std}, 'test',{Age_std_t}\"","9448d2e2":"from sklearn.preprocessing import LabelEncoder\n\nlbl = LabelEncoder()\n\ntrain['Sex'] = lbl.fit_transform(train[['Sex']].values.ravel())\ntest['Sex'] = lbl.fit_transform(test[['Sex']].values.ravel())","79957e2b":"train['Embarked'] = train['Embarked'].fillna(value=train['Embarked'].mode()[0])\ntest['Embarked'] = test['Embarked'].fillna(value=test['Embarked'].mode()[0])\n","495453ed":"train_ds = train[features]\ntest_ds = test[features]","e18637f0":"train_ds = pd.get_dummies(columns = ['Pclass','Embarked'],data=train_ds,drop_first = True)\ntest_ds = pd.get_dummies(columns = ['Pclass','Embarked'],data=test_ds,drop_first = True)","487958e9":"print(train_ds.head())\ntrain_ds.shape","5697b4fb":"print(test_ds.head())\ntest_ds.shape","9cba0fe6":"#train_ds.drop(columns = ['Cabin_T'],inplace = True)","2a7456cc":"y_train = train[target]","5b2cea1f":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(train_ds, y_train, test_size=0.30)","f2afe33b":"X_train.columns","bed76573":"from sklearn.model_selection import train_test_split,cross_val_score,RandomizedSearchCV,GridSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","e9e6d8df":"'''rfc = RandomForestClassifier()\n\nparams = {'n_estimators': [200,500,800,1000,1200],\n          'max_depth': [3,5,7],\n          'criterion':['entropy', 'gini'],\n          'min_samples_leaf' : [1, 2, 3, 4, 5],\n          'max_features':['auto'],\n          'min_samples_split': [3, 5, 10],\n          'max_leaf_nodes':[2,3,5,7],\n          }\n\nrfc_cv = GridSearchCV(rfc, params, cv = 5, n_jobs=-1, verbose=2).fit(X_train, y_train)'''","6e1c640a":"rfc = XGBClassifier()\n\nparams = {'n_estimators': [200,500,800,1000,1200],\n          'max_depth': [3,5,7],\n          'objective' : ['binary:logistic'],\n          'min_samples_leaf' : [1, 2, 3, 4, 5],\n          'max_leaf_nodes':[2,3,5,7],\n          'min_child_weight': [1, 5, 10],\n          'gamma': [0.5, 1, 1.5, 2, 5],\n          }\n\nrfc_cv = RandomizedSearchCV(rfc, params, cv = 10, n_jobs=-1, verbose=2).fit(X_train, y_train)","0d213ca1":"'''import lightgbm as lgb\n\n\nlgb_train = lgb.Dataset(train_ds, y_train)\nlgb_valid = lgb.Dataset(X_valid, y_valid, reference = lgb_train)'''","a25e59a6":"'''params = {'learning_rate' : [0.01, 0.02, 0.03, 0.04, 0.05, 0.08, 0.1, 0.2, 0.3, 0.4],\n              'n_estimators' : [100, 200, 300, 400, 500, 600, 800, 1000, 1500, 2000],\n              'num_leaves': [6, 12, 26, 34, 50], \n              'reg_alpha': [0, 1e-1, 1, 2, 5, 7, 10, 50, 100],\n              'min_child_weight': [1e-5, 1e-3, 1e-2, 1e-1, 1, 1e1, 1e2, 1e3, 1e4], \n              'max_depth': [-1, 1, 2, 3, 4, 5, 6, 7],\n              'min_child_samples': [100, 200, 300, 400 , 500],\n              'colsample_bytree': [0.4, 0.8 ,0.12],\n              'reg_lambda': [0, 1e-1, 1, 5, 10, 20, 50, 100]}'''","77f493c4":"'''lgb_cf = lgb.LGBMClassifier(objective = 'binary', metric = 'None',n_jobs=-1)'''","96ece459":"#lgb_cv = GridSearchCV(estimator=lgb_cf, param_distributions = params, n_iter=500,scoring='accuracy',cv=5,refit=True,verbose=True).fit(X_train, y_train,eval_set = [(X_valid,y_valid)])","6b4e8a3a":"rfc_cv.best_params_\nbest_model = rfc_cv.best_estimator_\n\nprint(best_model)\nprint(rfc_cv.best_score_)","ee3e00d6":"rfc_pred = best_model.predict(X_valid)\n\nprint(\"Accuracy: \", accuracy_score(y_valid, rfc_pred))\n\nprint(\"\\nConfusion Matrix\\n\")\nprint(confusion_matrix(y_valid, rfc_pred))","e310e836":"import pickle\n\nfilename = 'Titanic_model.sav'\npickle.dump(best_model, open(filename, 'wb'))","56a02879":"loaded_model = pickle.load(open(filename, 'rb'))\nresult = loaded_model.score(X_valid, y_valid)\nprint(result)","54e3ee06":"print(rfc_pred)","90dc2396":"passId = test[['PassengerId']].values","0d24677b":"test_ds.head()","65344e70":"final_pred = best_model.predict(test_ds)","506f531e":"sub = {'PassengerId':passId.ravel(), 'Survived':final_pred}","310cd27f":"submission_csv = pd.DataFrame(sub)","ff4df9b8":"submission_csv.head()","539b4833":"submission_csv.to_csv('final_sub_titanic_xgb_V.csv',index = False)","262ff777":"x = pd.read_csv(\".\/final_sub_titanic_xgb_V.csv\")","426f2c49":"x.head()","ced3fbfa":"# Creating a XGBoost Model with Grid Search \u2764\ufe0f\u200d\ud83d\udd25","f5535406":"# My Submission \ud83d\ude4b\u200d\u2642\ufe0f","c0fbb4e4":"## Saving the Model \ud83d\udcbe","866da6e9":"This seems kinda random .. only people with family member size of 2,3,4 survived greater than the rest \ud83e\udd14\ud83e\udd14.","1a4ff367":"People with greater fare had a higher rate of survival","34ae058f":"There were many people from both genders in 3rd class(as expected)... the second most filled class was 1st class ... this maybe suggests huge price difference between classes.. not sure though \ud83e\udd37\u200d\u2642\ufe0f\ud83e\udd37\u200d\u2642\ufe0f","46f3b48b":"### Fare","a99a4b2e":"# Importing libraries\ud83d\udcda","d94f427a":"Most people survived were from 1st class.. so people in 1st class had a greater chance of survival","ca226d95":"people from cabins C,E,D,B,F were more likely to survive","3b9b7401":"# Getting data \ud83d\udcbd","4e666a99":"The minimum fare is 0.0 which means there was\/were someone\/some people with a free ride in titanic(probably in 1st class) \ud83d\ude05\ud83d\ude05","63ccac9d":"# EDA \ud83d\udcca","64223fca":"# To-Do\ud83d\udccb\n## Trying different models","9dbc754b":"people with family had greater rate of survival","06a064c3":"### Cabin","8762cdb1":"As we can confirm females had a greater survival rate compared to males.","3124e04b":"Only people from 1st class had a greater survival rate compared to classes 2 and 3... maybe there were fewer people in 1st class","b78e7af2":"Well there weren't fewer people in 1st class.. so we can conclude that people in first class did indeed had a higher chance and rate of survival","8f357503":"More people survived from Cherbourg compared to other two","c2a75d55":"## Loading the Model \ud83d\udd03","5c8955be":"# Data Preprocessing \ud83d\uddc4\ufe0f","d6c68b83":"#### Making same modifications to test dataset","74b656ad":"As we know from the disaster.. women and children were the first to be evacuated.. mean age is 29.6, median age is 28.. both of which are >18 which suggests the people with missing ages are adults ... standard deviation is 14.5 which is <18 which suggests they are chilren..","7ba68c5b":"### Family"}}