{"cell_type":{"44e3be0b":"code","aa646ece":"code","3658b9fa":"code","99ad6b66":"code","0fd63175":"code","a3075ef0":"code","95646afa":"code","d3933ae1":"code","e277b4b4":"code","49a66bfb":"code","22e7756d":"code","63b2b93c":"code","0d426346":"code","d7c34969":"code","3a4cb766":"code","11776a7e":"markdown","96e845fb":"markdown","852febaa":"markdown","2a737332":"markdown","ab9cbf62":"markdown"},"source":{"44e3be0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n!pip install pywedge\nimport pywedge as pw\n\n!pip3 install pandas_profiling --upgrade\nimport pandas_profiling as pp\nfrom pandas_profiling import ProfileReport\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa646ece":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","3658b9fa":"df_train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_train.head(5)","99ad6b66":"df_train.shape","0fd63175":"df_train.columns","a3075ef0":"df_train.dtypes","95646afa":"df_train.isna().sum().sort_values()","d3933ae1":"df_train.info()","e277b4b4":"df_train.describe()","49a66bfb":"df_train.describe().style.background_gradient(axis=1,cmap=sns.light_palette('green', as_cmap=True))","22e7756d":"dash = pw.Pywedge_Charts(df_train, c=None, y='Survived')\ndashboard = dash.make_charts()","63b2b93c":"df_train=pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test=pd.read_csv('..\/input\/titanic\/test.csv')","0d426346":"blm = pw.baseline_model(df_train, df_test, c=None, y='Survived', type='Regression')\nblm.Regression_summary()","d7c34969":"#blm.predictions_baseline","3a4cb766":"#import pandas_profiling as pp\n#from pandas_profiling import ProfileReport\npp.ProfileReport(df_train)","11776a7e":"***loading the dataset***","96e845fb":"***we are here handle regression. so we use type='regression' , you can use classification as type for classification problem***","852febaa":"# pandas_profiling\nGenerates profile reports from a pandas DataFrame. The pandas df.describe() function is great but a little basic for serious exploratory data analysis. pandas_profiling extends the pandas DataFrame with df.profile_report() for quick data analysis.\n\n***For each column the following statistics - if relevant for the column type - are presented in an interactive HTML report:***\n\n*Type inference: detect the types of columns in a dataframe.*\n\n*Essentials: type, unique values, missing values*\n\n*Quantile statistics like minimum value, Q1, median, Q3, maximum, range, interquartile range*\n\n*Descriptive statistics like mean, mode, standard deviation, sum, median absolute deviation, coefficient of variation, kurtosis, skewness*\n\n***Most frequent values***\n\n    Histograms\n\n    Correlations highlighting of highly correlated variables, Spearman, Pearson and Kendall matrices\n\n    Missing values matrix, count, heatmap and dendrogram of missing values\n\n    Duplicate rows Lists the most occurring duplicate rows\n\n    Text analysis learn about categories (Uppercase, Space), scripts (Latin, Cyrillic) and blocks (ASCII) of text data","2a737332":"# What is Pywedge?\nPywedge is an open-source python library which is a complete package that helps you in Visualizing the data, Pre-process the data and also create some baseline models which can be further tuned to make the best machine learning model for the data.\n\n***!pip install pywedge***\n\n***import pywedge as pw***","ab9cbf62":"## Preprocessing the data"}}