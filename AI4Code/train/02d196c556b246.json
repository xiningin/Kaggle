{"cell_type":{"63380ef7":"code","ecb32078":"code","2452950f":"code","566eaf12":"code","5c12b9cb":"code","13428ba0":"code","205488f7":"code","7b6882ec":"code","4c30de9b":"code","3ac17a0b":"code","a8c366c5":"code","e75111c1":"code","5cbd9faf":"code","aa7b8c34":"code","72c80f00":"code","6db3d6e2":"code","97366dc9":"code","f21e784d":"code","faa9bb10":"code","c8318271":"code","f3b0956c":"code","1ef3d5f2":"code","ed99b63e":"code","14469cdb":"code","41d9ba2b":"code","6f30ebdb":"code","4567326e":"code","b6569729":"code","c69da355":"code","52ae249e":"code","eb66204c":"code","91d63627":"code","40d07046":"code","51175a34":"code","016b1305":"code","09ac6ea5":"code","5d1a7df4":"code","c76317de":"code","c25bf1cb":"code","5eb9016a":"code","81bd0b73":"code","da1c9c08":"code","3b49f37c":"code","8ffa4312":"code","e6bd1744":"code","d803e74d":"code","8fa06277":"code","4c38e925":"code","9156cbb1":"code","d26a1f20":"code","dabe9bbf":"code","c6edba0b":"code","5af2ad84":"code","312b6efc":"code","ed288a8b":"code","acec7813":"code","2914b8e8":"code","535a1c89":"markdown","5d23ca2e":"markdown","fe8d9643":"markdown","af5eb1b4":"markdown","450dec3a":"markdown","fe22b80a":"markdown","b7e535e6":"markdown","1b8f6306":"markdown","0e4c1412":"markdown","5c04b80a":"markdown","29907f54":"markdown","9eeee206":"markdown","da7adaa4":"markdown","e89feb22":"markdown","04498eef":"markdown","deabafc5":"markdown"},"source":{"63380ef7":"# Create a Simple Pandas Series\n\nimport pandas as pd\n\ndata = [4, 100, 200, 500]\n\ns = pd.Series(data)\ns","ecb32078":"# Set the index of Pandas Series\n\ns = pd.Series(data, index=['a', 1, 'b9', 'myIndex'])\ns","2452950f":"# Set the type of Pandas Series\n\ns = pd.Series(data, index=['a', 1, 'b9', 'myIndex'], dtype='float64')\ns","566eaf12":"# Accessing element of Pandas Series\n\nprint(f\"b9 index of Pandas Series: {s['b9']}\")","5c12b9cb":"# Some basic functionalities of Pandas Series\n\nprint(f\"dtype: {s.dtype}\")\nprint(f\"size: {s.size}\")\nprint(\"\\nTop 2 element of Pandas Series\\n\")\nprint(s.head(2))\nprint(\"\\nBottom 2 element of Pandas Series\\n\")\nprint(s.tail(2))","13428ba0":"# Create a Simple Pandas DataFrame\n\nimport pandas as pd\n\ndata = [4, 100, 200, 500]\n\ndf = pd.DataFrame(data)\ndf","205488f7":"# List of List as Data of Pandas DataFrame\n\nimport pandas as pd\n\nlist_of_list = [['Alex',10],['Bob',12],['Clarke',13], ['Ann', 17]]\n\ndf = pd.DataFrame(list_of_list)\ndf","7b6882ec":"# Set Column name, Row name, and type of Pandas DataFrame\n\ndf = pd.DataFrame(list_of_list, columns=['Name', 'Age'], index=['rank1', 'rank2', 'rank3', 'rank4'], dtype='float64')\ndf","4c30de9b":"# Accessing element of Pandas DataFrame\n\nprint(f\"Age of Rank2 of Pandas DataFrame: {df['Age']['rank2']}\")       #[column][index]","3ac17a0b":"# Get certain column value\n\ndf[\"Name\"]","a8c366c5":"# Get certain index value\n\ndf.iloc[0]","e75111c1":"df.loc['rank2']","5cbd9faf":"# Some basic functionalities of Pandas DataFrame\n\nprint(f\"shape: {df.shape}\")\nprint(f\"size: {df.size}\")\nprint(\"\\nTop 2 element of Pandas DataFrame\\n\")\nprint(df.head(2))\nprint(\"\\nBottom 2 element of Pandas DataFrame\\n\")\nprint(df.tail(2))","aa7b8c34":"import pandas as pd\n\nlist_of_list = [['Alex',10],['Bob',12],['Clarke',13], ['Ann', 17]]\n\ndf = pd.DataFrame(list_of_list, columns=['Name', 'Age'], index=['rank1', 'rank2', 'rank3', 'rank4'], dtype='float64')\ndf","72c80f00":"# Reindex the Pandas DataFrame\nreindexed = df.reindex(index=['rank1','rank4', 'rank5'], columns=['Name', 'Age', 'Birthday'])\nreindexed","6db3d6e2":"# Reindex to Align with Other Objects\n\nimport numpy as np\n\ndf1 = pd.DataFrame(np.random.randn(10,3),columns=['col1','col2','col3'])\ndf2 = pd.DataFrame(np.random.randn(7,3),columns=['col1','col2','col3'])\n\ndf1 = df1.reindex_like(df2)\nprint(df1)\nprint(f\"df1 shape: {df1.shape}\")\nprint('\\n')\n\ndf1 = pd.DataFrame(np.random.randn(10,3),columns=['col1','col2','col3'])\ndf2 = pd.DataFrame(np.random.randn(7,3),columns=['col1','col2','col3'])\n\ndf2 = df2.reindex_like(df1)\nprint(df2)\nprint(f\"df2 shape: {df2.shape}\")","97366dc9":"# Rename Column and Index\n\nlist_of_list = [['Alex',10],['Bob',12],['Clarke',13], ['Ann', 17]]\n\ndf = pd.DataFrame(list_of_list, columns=['Name', 'Age'], index=['rank1', 'rank2', 'rank3', 'rank4'])\nprint(df)\n\nprint(\"\\nAfter renaming the rows and columns:\")\nrenamed = df.rename(columns={'Name' : 'First Name'}, index = {'rank1' : '1st', 'rank2' : '2nd', 'rank3' : '3rd', 'rank4' : '4th'})\nprint(renamed)","f21e784d":"renamed","faa9bb10":"print(\"==== For Loop ====\")\nfor col in renamed:\n    print(col)\nprint('\\n')\n\nprint(\"==== Iteritems ====\")\nfor column, value in renamed.iteritems():\n   print(column)\n   print(f\"The value of {column}:\")\n   print(value)\n   print('\\n')\n\nprint(\"==== iterrows ====\")\nfor index, value in renamed.iterrows():\n   print(index)\n   print(f\"The value of {index}:\")\n   print(value)\n   print('\\n')","c8318271":"import pandas as pd\nimport numpy as np\n\nunsorted_df = pd.DataFrame(np.random.choice(range(100), size=(10,2), replace=False),index=np.random.choice(range(10), size=10, replace=False),columns=['col2','col1'])\nunsorted_df","f3b0956c":"# Sort by Index\n\nsorted_by_index_df = unsorted_df.sort_index()   # unsorted_df.sort_index(ascending=False)\nsorted_by_index_df","1ef3d5f2":"# Sort by Column\n\nsorted_by_column_df = unsorted_df.sort_index(axis=1)\nsorted_by_column_df","ed99b63e":"# Sort by Value\n\nunsorted_df = pd.DataFrame(np.random.choice(range(10), size=(10,3)),index=np.random.choice(range(10), size=10, replace=False),columns=['col2', 'col3', 'col1'])\n\nsorted_by_value_df = unsorted_df.sort_values(by=['col1','col3', 'col2'])\nsorted_by_value_df","14469cdb":"# Concat with axis=0\n\ndf1 = pd.DataFrame({\n   'Name': ['Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':['sub1','sub2','sub4','sub6','sub5'],\n   'Marks_scored':[98,90,87,69,78]},\n   index=[1,2,3,4,5])\n\ndf2 = pd.DataFrame({\n   'Name': ['Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':['sub2','sub4','sub3','sub6','sub5'],\n   'Marks_scored':[89,80,79,97,88]},\n   index=[1,2,3,4,5])\n\npd.concat([df1,df2])","41d9ba2b":"# Append\n\ndf1 = pd.DataFrame({\n   'Name': ['Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':['sub1','sub2','sub4','sub6','sub5'],\n   'Marks_scored':[98,90,87,69,78]},\n   index=[1,2,3,4,5])\n\ndf2 = pd.DataFrame({\n   'Name': ['Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':['sub2','sub4','sub3','sub6','sub5'],\n   'Marks_scored':[89,80,79,97,88]},\n   index=[1,2,3,4,5])\n\ndf1.append(df2)","6f30ebdb":"# Concat with axis=1\n\ndf1 = pd.DataFrame({\n   'Name': ['Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':['sub1','sub2','sub4','sub6','sub5'],\n   'Marks_scored':[98,90,87,69,78]},\n   index=[1,2,3,4,5])\n\ndf2 = pd.DataFrame({\n   'Name': ['Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':['sub2','sub4','sub3','sub6','sub5'],\n   'Marks_scored':[89,80,79,97,88]},\n   index=[1,3,2,5,4])\n\npd.concat([df1,df2],axis=1)","4567326e":"import pandas as pd\n\nleft = pd.DataFrame({\n   'id':[1,2,3,4,5],\n   'Name': ['Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],\n   'subject_id':['sub1','sub2','sub4','sub6','sub5']})\n\nright = pd.DataFrame(\n   {'id':[0,2,3,4,5],\n   'Name': ['Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],\n   'subject_id':['sub2','sub4','sub3','sub6','sub5']})","b6569729":"left","c69da355":"right","52ae249e":"# Merge Two DataFrames on a Key\n\npd.merge(left,right,on='id')","eb66204c":"# Merge Two DataFrames on Multiple Keys\n\npd.merge(left,right,on=['id','subject_id'])","91d63627":"# Left Join\n\npd.merge(left, right, on='subject_id', how='left')","40d07046":"# Right Join\n\npd.merge(left, right, on='subject_id', how='right')","51175a34":"# Outer Join\n\npd.merge(left, right, how='outer', on='subject_id')","016b1305":"# Inner Join\n\npd.merge(left, right, on='subject_id', how='inner')","09ac6ea5":"info = pd.DataFrame({\"Person\":[\"Parker\", \"Smith\", \"William\", \"John\"],  \"Age\": [27, 29, np.nan, 32] })\ninfo","5d1a7df4":"info.count(axis='index')","c76317de":"info.count(axis='columns')","c25bf1cb":"info = {'Name': [100, 200, 300],   \n        'age' : [33, 28, 39]}     \ndata = pd.DataFrame(info)    \ndata","5eb9016a":"# Sum of each column\n\ndata.sum(axis=0)","81bd0b73":"# Sum of each index\n\ndata.sum(axis=1)","da1c9c08":"info = pd.DataFrame({\"A\":[8, 2, 7, 12, 6],   \n                   \"B\":[26, 19, 7, 5, 9],    \n                   \"C\":[10, 11, 15, 4, 3],   \n                   \"D\":[16, 24, 14, 22, 1]})     \ninfo  ","3b49f37c":"# Mean of each column\n\ninfo.mean(axis = 0)  ","8ffa4312":"# Mean of each index\n\ninfo.mean(axis = 1) ","e6bd1744":"var_list = range(100)\n\ndata = pd.DataFrame(np.random.choice(var_list, size=(5,5)),columns=['A', 'B', 'C', 'D', 'E'],index=['1st', '2nd', '3rd', '4th', '5th'])\ndata","d803e74d":"first_odd_number_greater_than_ten = 0\n\nfor element in data.loc['4th']:\n    print(element)\n    if element % 2 != 0 and element > 10:\n        first_odd_number_greater_than_ten = element\n        break\n\nprint(f\"First odd number in the 4th row that is greater than 10: {first_odd_number_greater_than_ten}\")","8fa06277":"var_list = range(100)\n\ndata1 = pd.DataFrame(np.random.choice(var_list, size=(5,5)),columns=['A', 'B', 'C', 'D', 'E'],index=['1st', '2nd', '3rd', '4th', '5th'])\ndata1","4c38e925":"data2 = pd.DataFrame(np.random.choice(var_list, size=(5,5)),columns=['A', 'B', 'C', 'D', 'E'],index=['1st', '2nd', '3rd', '4th', '5th'])\ndata2","9156cbb1":"sum = int((data1.mean(axis=1) + data2.mean(axis=1))['2nd'])\nsum","d26a1f20":"data1","dabe9bbf":"data2","c6edba0b":"appended_data = data1.append(data2)\nappended_data","5af2ad84":"int(appended_data['B'].median())","312b6efc":"var_list = range(10)\n\ndata1 = pd.DataFrame(np.random.choice(var_list, size=(5,5)),columns=['A', 'B', 'C', 'D', 'E'],index=['1st', '2nd', '3rd', '4th', '5th'])\ndata1","ed288a8b":"data2 = pd.DataFrame(np.random.choice(var_list, size=(5,5)),columns=['A', 'B', 'C', 'D', 'E'],index=['1st', '2nd', '3rd', '4th', '5th'])\ndata2","acec7813":"outer_join_data = pd.merge(data1, data2, how='outer', on=['B', 'C', 'D'])\nouter_join_data","2914b8e8":"outer_join_data['E_x'].count()","535a1c89":"# Pandas DataFrame\nA two-dimensional data structure; aligned in a tabular fashion in rows and columns.\n\n**Features**\n* Potentially columns are of different types\n* Size \u2013 Mutable\n* Labeled axes (rows and columns)\n* Can Perform Arithmetic operations on rows and columns","5d23ca2e":"# Pandas DataFrame - Mean\n\nUse to return the mean of the values for the requested axis.","fe8d9643":"1. Given dataframe, ***data***. Print the first odd number that is greater than 10 in the 4th row of ***data***. If there is no odd number that is greater than 10 in the 4th row, print 0.","af5eb1b4":"# Pandas DataFrame - Sum\n\nUse to return the sum of the values for the requested axis by the user.","450dec3a":"# Pandas DataFrame Count\n\nA method that is used to count the number of non-NA cells for each column or row.","fe22b80a":"# Iterating Pandas DataFrame\nYou may iterate DataFrame either by column or index.","b7e535e6":"# Python Pandas\n\npandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool, built on top of the Python programming language.","1b8f6306":"2. Given are 2 dataframes, data1 and data2. Print the sum of the average values of the 2nd rows of both dataframes as an integer.","0e4c1412":"# Sorting Pandas DataFrame\nThere are two kinds of sorting available in Pandas. They are \u2212\n* By column or index\n* By Actual Value","5c04b80a":"# PROBLEM SOLVING","29907f54":"3. Given 2 dataframes, **data1** and **data2**. Stack the 2 dataframes, one on top of the other, and return the median of the column named **B** as an integer","9eeee206":"4. Given are 2 dataframes, data1 and data2. Perform a full column-wise outer join of the 2 dataframes on columns B, C and D, and print the count of all entries not equal to null in column E_x of the resulting dataframe.","da7adaa4":"# Python Pandas - Merging\/Joining\n\nPandas has full-featured, high performance in-memory join operations idiomatically very similar to relational databases like SQL.\n\nPandas provides a single function, merge, as the entry point for all standard database join operations between DataFrame objects\n\n**left** \u2212 A DataFrame object.\n\n**right** \u2212 Another DataFrame object.\n\n**on** \u2212 Columns (names) to join on. Must be found in both the left and right DataFrame objects.\n\n**left_on** \u2212 Columns from the left DataFrame to use as keys. Can either be column names or arrays with length equal to the length of the DataFrame.\n\n**right_on** \u2212 Columns from the right DataFrame to use as keys. Can either be column names or arrays with length equal to the length of the DataFrame.\n\n**left_index** \u2212 If True, use the index (row labels) from the left DataFrame as its join key(s). In case of a DataFrame with a MultiIndex (hierarchical), the number of levels must match the number of join keys from the right DataFrame.\n\n**right_index** \u2212 Same usage as left_index for the right DataFrame.\n\n**how** \u2212 One of 'left', 'right', 'outer', 'inner'. Defaults to inner. Each method has been described below.\n\n**sort** \u2212 Sort the result DataFrame by the join keys in lexicographical order. Defaults to True, setting to False will improve the performance substantially in many cases.","e89feb22":"# Pandas DataFrame: Concat and Append\n\n**Concat** gives the flexibility to join based on the axis( all rows or all columns)\n\n**Append** is the specific case (axis=0) of concat","04498eef":"# Pandas Series\nA one-dimensional labeled array capable of holding data of any type.","deabafc5":"# Pandas Reindexing\nChanges the row labels and column labels of a DataFrame. To reindex means to conform the data to match a given set of labels along a particular axis.\n\n**Multiple operations can be accomplished through indexing:**\n* Reorder the existing data to match a new set of labels.\n* Insert missing value (NA) markers in label locations where no data for the label existed."}}