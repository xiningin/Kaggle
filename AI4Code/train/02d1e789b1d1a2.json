{"cell_type":{"312aff07":"code","80918d36":"code","ad22dadc":"code","d30b79be":"code","4a81084c":"code","4642633a":"code","993b2457":"code","f5f652ce":"code","669a816c":"code","7d8f6ef2":"code","30f97fc9":"code","0932b000":"code","c0762539":"code","e6f3a068":"code","a312d9e4":"code","43cb2e3d":"code","7394be51":"code","f4f5065e":"markdown","7d216139":"markdown","66917049":"markdown","5bdba325":"markdown","f4fa81c6":"markdown","64cde0e3":"markdown","5625f9e1":"markdown","f0cd8dad":"markdown","9d85ce33":"markdown","125889e1":"markdown"},"source":{"312aff07":"# TITANIC DATASET \n# task type: Classification\n\n# imports\nimport pandas as pd\nimport numpy as np\nimport numpy.random as npr\nimport matplotlib.pyplot as plt\n\n# load data\ntrData = pd.read_csv(\"..\/input\/titanic\/train.csv\",sep=\",\") \nteData = pd.read_csv(\"..\/input\/titanic\/test.csv\", sep=\",\")","80918d36":"# DATA FOR VISUALIZATIONS #1\n# separate passanger on age and correlate with gender, class, embarkment point and family members\n\n# age intervals\nageBins = np.arange(0,81,5,dtype=int)\n# overall (last bin for NaN age)\novA = np.empty(len(ageBins))\novD = np.empty(len(ageBins))\n# males\nmaA = np.empty(len(ageBins))\nmaD = np.empty(len(ageBins))\n# females\nfeA = np.empty(len(ageBins))\nfeD = np.empty(len(ageBins))\n# first class\nfiA = np.empty(len(ageBins))\nfiD = np.empty(len(ageBins))\n# second class\nseA = np.empty(len(ageBins))\nseD = np.empty(len(ageBins))\n# third class\nthA = np.empty(len(ageBins))\nthD = np.empty(len(ageBins))\n\nlabels = []\n\nfor i in range(ageBins.size-1):\n    # overall\n    ovA[i] = len(trData[(trData[\"Survived\"]==1) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1])])\n    ovD[i] = len(trData[(trData[\"Survived\"]==0) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1])])\n    # males\n    maA[i] = len(trData[(trData[\"Survived\"]==1) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1]) & trData[\"Sex\"].str.match(\"male\")])\n    maD[i] = len(trData[(trData[\"Survived\"]==0) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1]) & trData[\"Sex\"].str.match(\"male\")])\n    # females\n    feA[i] = len(trData[(trData[\"Survived\"]==1) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1]) & trData[\"Sex\"].str.match(\"female\")])\n    feD[i] = len(trData[(trData[\"Survived\"]==0) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1]) & trData[\"Sex\"].str.match(\"female\")])\n    # first class\n    fiA[i] = len(trData[(trData[\"Survived\"]==1) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1]) & (trData[\"Pclass\"]==1)])\n    fiD[i] = len(trData[(trData[\"Survived\"]==0) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1]) & (trData[\"Pclass\"]==1)])\n    # second class\n    seA[i] = len(trData[(trData[\"Survived\"]==1) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1]) & (trData[\"Pclass\"]==2)])\n    seD[i] = len(trData[(trData[\"Survived\"]==0) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1]) & (trData[\"Pclass\"]==2)])   \n    # third class\n    thA[i] = len(trData[(trData[\"Survived\"]==1) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1]) & (trData[\"Pclass\"]==3)])\n    thD[i] = len(trData[(trData[\"Survived\"]==0) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1]) & (trData[\"Pclass\"]==3)])\n    # labels for plot\n    labels.append(str(ageBins[i]) + \"-\" + str(ageBins[i+1]))\n\n# age = NaN values\novA[-1] = len(trData[(trData[\"Survived\"]==1) & (trData[\"Age\"].isna())])\novD[-1] = len(trData[(trData[\"Survived\"]==0) & (trData[\"Age\"].isna())])\nmaA[-1] = len(trData[(trData[\"Survived\"]==1) & (trData[\"Age\"].isna()) & (trData[\"Sex\"].str.match(\"male\"))])\nmaD[-1] = len(trData[(trData[\"Survived\"]==0) & (trData[\"Age\"].isna()) & (trData[\"Sex\"].str.match(\"male\"))])\nfeA[-1] = len(trData[(trData[\"Survived\"]==1) & (trData[\"Age\"].isna()) & (trData[\"Sex\"].str.match(\"female\"))])\nfeD[-1] = len(trData[(trData[\"Survived\"]==0) & (trData[\"Age\"].isna()) & (trData[\"Sex\"].str.match(\"female\"))])\nfiA[-1] = len(trData[(trData[\"Survived\"]==1) & (trData[\"Age\"].isna()) & (trData[\"Pclass\"]==1)])\nfiD[-1] = len(trData[(trData[\"Survived\"]==0) & (trData[\"Age\"].isna()) & (trData[\"Pclass\"]==1)])\nseA[-1] = len(trData[(trData[\"Survived\"]==1) & (trData[\"Age\"].isna()) & (trData[\"Pclass\"]==2)])\nseD[-1] = len(trData[(trData[\"Survived\"]==0) & (trData[\"Age\"].isna()) & (trData[\"Pclass\"]==2)])\nthA[-1] = len(trData[(trData[\"Survived\"]==1) & (trData[\"Age\"].isna()) & (trData[\"Pclass\"]==3)])\nthD[-1] = len(trData[(trData[\"Survived\"]==0) & (trData[\"Age\"].isna()) & (trData[\"Pclass\"]==3)])\nlabels.append(\"NaN\")\n\n# create dataframe\nvisData = pd.DataFrame({\"labels\":labels, \"all_alive\":ovA, \"all_dead\":ovD, \"male_alive\":maA, \"male_dead\":maD, \"female_alive\":feA,\n                    \"female_dead\":feD, \"first_alive\":fiA, \"first_dead\":fiD, \"second_alive\":seA, \"second_dead\":seD,\n                    \"third_alive\":thA, \"third_dead\":thD})\n\n# delete useless variables\ndel labels, ovA, ovD, maA, maD, feA, feD, fiA, fiD, seA, seD, thA, thD, i","ad22dadc":"# DATA VISUALIZATION #1\n# age: overall + gender\n\nwidth = 0.35\nx = np.arange(len(visData[\"labels\"]))\n\nfig, ax = plt.subplots(3, 2, figsize=(23,10))\nfig.suptitle(\"Mortality aboard the Titanic on age and gender\", fontsize=20)\n\n# overall percentage\nax[0,0].bar(x - width\/2, visData[\"all_alive\"]\/(visData[\"all_alive\"]+visData[\"all_dead\"]), width, label=\"Overall surived\", color=\"forestgreen\")\nax[0,0].bar(x + width\/2, visData[\"all_dead\"]\/(visData[\"all_alive\"]+visData[\"all_dead\"]), width, label=\"Overall died\", color=\"indianred\")\nax[0,0].set(xticks=x, xticklabels=visData[\"labels\"].values, yticks=[0,0.5,1])\nax[0,0].legend()\n# overalls\nax[0,1].bar(x - width\/2, visData[\"all_alive\"], width, label=\"Overall surived\", color=\"forestgreen\")\nax[0,1].bar(x + width\/2, visData[\"all_dead\"], width, label=\"Overall died\", color=\"indianred\")\nax[0,1].set(xticks=x, xticklabels=visData[\"labels\"].values)\nax[0,1].legend()\n# male percentage\nax[1,0].bar(x - width\/2, visData[\"male_alive\"]\/(visData[\"male_alive\"]+visData[\"male_dead\"]), width, label=\"Males surived\", color=\"forestgreen\")\nax[1,0].bar(x + width\/2, visData[\"male_dead\"]\/(visData[\"male_alive\"]+visData[\"male_dead\"]), width, label=\"Males died\", color=\"indianred\")\nax[1,0].set(ylabel=\"Percentage %\", xticks=x, xticklabels=visData[\"labels\"].values, yticks=[0,0.5,1])\nax[1,0].legend()\n# male\nax[1,1].bar(x - width\/2, visData[\"male_alive\"], width, label=\"Males surived\", color=\"forestgreen\")\nax[1,1].bar(x + width\/2, visData[\"male_dead\"], width, label=\"Males died\", color=\"indianred\")\nax[1,1].set(ylabel=\"# of people\", xticks=x, xticklabels=visData[\"labels\"].values)\nax[1,1].legend()\n# female percentage\nax[2,0].bar(x - width\/2, visData[\"female_alive\"]\/(visData[\"female_alive\"]+visData[\"female_dead\"]), width, label=\"Female surived\", color=\"forestgreen\")\nax[2,0].bar(x + width\/2, visData[\"female_dead\"]\/(visData[\"female_alive\"]+visData[\"female_dead\"]), width, label=\"Female died\", color=\"indianred\")\nax[2,0].set(xlabel=\"Age\", xticks=x, xticklabels=visData[\"labels\"].values, yticks=[0,0.5,1])\nax[2,0].legend()\n# female\nax[2,1].bar(x - width\/2, visData[\"female_alive\"], width, label=\"Females surived\", color=\"forestgreen\")\nax[2,1].bar(x + width\/2, visData[\"female_dead\"], width, label=\"Females died\", color=\"indianred\")\nax[2,1].set(xlabel=\"Age\", xticks=x, xticklabels=visData[\"labels\"].values)\nax[2,1].legend()","d30b79be":"# DATA VISUALIZATION #2\n# age + class\n\nfig, ax = plt.subplots(3, 2, figsize=(23,10))\nfig.suptitle(\"Mortality aboard the Titanic on age and passanger class\", fontsize=20)\n\n# first class percentage\nax[0,0].bar(x - width\/2, visData[\"first_alive\"]\/(visData[\"first_alive\"]+visData[\"first_dead\"]), width, label=\"First surived\", color=\"forestgreen\")\nax[0,0].bar(x + width\/2, visData[\"first_dead\"]\/(visData[\"first_alive\"]+visData[\"first_dead\"]), width, label=\"First died\", color=\"indianred\")\nax[0,0].set(xticks=x, xticklabels=visData[\"labels\"].values, yticks=[0,0.5,1])\nax[0,0].legend()\n# first\nax[0,1].bar(x - width\/2, visData[\"first_alive\"], width, label=\"First surived\", color=\"forestgreen\")\nax[0,1].bar(x + width\/2, visData[\"first_dead\"], width, label=\"First died\", color=\"indianred\")\nax[0,1].set(xticks=x, xticklabels=visData[\"labels\"].values)\nax[0,1].legend()\n# second percentage\nax[1,0].bar(x - width\/2, visData[\"second_alive\"]\/(visData[\"second_alive\"]+visData[\"second_dead\"]), width, label=\"Second surived\", color=\"forestgreen\")\nax[1,0].bar(x + width\/2, visData[\"second_dead\"]\/(visData[\"second_alive\"]+visData[\"second_dead\"]), width, label=\"Second died\", color=\"indianred\")\nax[1,0].set(ylabel=\"Percentage %\", xticks=x, xticklabels=visData[\"labels\"].values, yticks=[0,0.5,1])\nax[1,0].legend()\n# second\nax[1,1].bar(x - width\/2, visData[\"second_alive\"], width, label=\"Second surived\", color=\"forestgreen\")\nax[1,1].bar(x + width\/2, visData[\"second_dead\"], width, label=\"Second died\", color=\"indianred\")\nax[1,1].set(ylabel=\"# of people\", xticks=x, xticklabels=visData[\"labels\"].values)\nax[1,1].legend()\n# third percentage\nax[2,0].bar(x - width\/2, visData[\"third_alive\"]\/(visData[\"third_alive\"]+visData[\"third_dead\"]), width, label=\"Third surived\", color=\"forestgreen\")\nax[2,0].bar(x + width\/2, visData[\"third_dead\"]\/(visData[\"third_alive\"]+visData[\"third_dead\"]), width, label=\"Third died\", color=\"indianred\")\nax[2,0].set(xlabel=\"Age\", xticks=x, xticklabels=visData[\"labels\"].values, yticks=[0,0.5,1])\nax[2,0].legend()\n# third\nax[2,1].bar(x - width\/2, visData[\"third_alive\"], width, label=\"Third surived\", color=\"forestgreen\")\nax[2,1].bar(x + width\/2, visData[\"third_dead\"], width, label=\"Third died\", color=\"indianred\")\nax[2,1].set(xlabel=\"Age\", xticks=x, xticklabels=visData[\"labels\"].values)\nax[2,1].legend()\n","4a81084c":"# DATA TREATMENT #1\n\n# relabel data\n# gender\ntrData = trData.replace(\"male\",0)\ntrData = trData.replace(\"female\",1)\nteData = teData.replace(\"male\",0)\nteData = teData.replace(\"female\",1)","4642633a":"# number of people without age in testing and training datasets\nprint(\"Number of people with unknown age (train dataset): \" + str(len(trData[trData[\"Age\"].isna()])))\nprint(\"Number of people with unknown age (test dataset): \" + str(len(teData[teData[\"Age\"].isna()])))","993b2457":"# DATA FOR VISUALIZATIONS #2\n\n# age estimation\n# possible leads:\n# - number of siblings\/parents (guardians)\n# - fare\n# - name prefix (master = young boy)\n\n# age distributions\n# variables\nnumMaster = np.empty(len(ageBins))\nnumMr = np.empty(len(ageBins))\nnumMiss = np.empty(len(ageBins))\nnumMs = np.empty(len(ageBins))\n# number of parents\/children\nnumParch0 = np.empty(len(ageBins))\nnumParch1 = np.empty(len(ageBins))\nnumParch2 = np.empty(len(ageBins))\n# number of siblings\/spouses\nnumSibsp0 = np.empty(len(ageBins))\nnumSibsp1 = np.empty(len(ageBins))\nnumSibsp2 = np.empty(len(ageBins))\n\nfor i in range(ageBins.size-1):\n    # number fo people with title \"master\" = young boy or \"Mr\"\n    numMaster[i] = len(trData[(trData[\"Name\"].str.contains(\"Master.\")) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1])])\n    numMr[i] = len(trData[(trData[\"Name\"].str.contains(\"Mr.\")) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1]) & (trData[\"Sex\"]==0)])\n    # number fo people with title \"miss\" = unmarried lady\n    numMiss[i] = len(trData[(trData[\"Name\"].str.contains(\"Miss.\")) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1])])\n    numMs[i] = len(trData[(trData[\"Name\"].str.contains(\"Mrs.\")) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1])])\n    # parents\/children: 0, 1-2, >2\n    numParch0[i] = len(trData[(trData[\"Parch\"]==0) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1])])\n    numParch1[i] = len(trData[(trData[\"Parch\"]>0) & (trData[\"Parch\"]<=2) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1])])\n    numParch2[i] = len(trData[(trData[\"Parch\"]>2) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1])])\n    # siblings\/spouses: 0, 1-2, >2\n    numSibsp0[i] = len(trData[(trData[\"SibSp\"]==0) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1])])\n    numSibsp1[i] = len(trData[(trData[\"SibSp\"]>0) & (trData[\"SibSp\"]<=2) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1])])\n    numSibsp2[i] = len(trData[(trData[\"SibSp\"]>2) & (trData[\"Age\"]>ageBins[i]) & (trData[\"Age\"]<=ageBins[i+1])])\n\n# number of people with unknown age\nnumMaster[-1] = len(trData[(trData[\"Name\"].str.contains(\"Master.\")) & (trData[\"Age\"].isna())])\nnumMr[-1] = len(trData[(trData[\"Name\"].str.contains(\"Mr.\")) & (trData[\"Age\"].isna()) & (trData[\"Sex\"]==0)])\nnumMiss[-1] = len(trData[(trData[\"Name\"].str.contains(\"Miss.\")) & (trData[\"Age\"].isna())])\nnumMs[-1] = len(trData[(trData[\"Name\"].str.contains(\"Mrs.\")) & (trData[\"Age\"].isna())])\nnumParch0[-1] = len(trData[(trData[\"Parch\"]==0) & (trData[\"Age\"].isna())])\nnumParch1[-1] = len(trData[(trData[\"Parch\"]>0) & (trData[\"Parch\"]<=2) & (trData[\"Age\"].isna())])\nnumParch2[-1] = len(trData[(trData[\"Parch\"]>2) & (trData[\"Age\"].isna())])\nnumSibsp0[-1] = len(trData[(trData[\"SibSp\"]==0) & (trData[\"Age\"].isna())])\nnumSibsp1[-1] = len(trData[(trData[\"SibSp\"]>0) & (trData[\"SibSp\"]<=2) & (trData[\"Age\"].isna())])\nnumSibsp2[-1] = len(trData[(trData[\"SibSp\"]>2) & (trData[\"Age\"].isna())])\n\n# add to visData dataframe\nvisData[\"prefix_master\"] = numMaster\nvisData[\"prefix_mr\"] = numMr\nvisData[\"prefix_miss\"] = numMiss\nvisData[\"prefix_ms\"] = numMs\nvisData[\"parents_none\"] = numParch0\nvisData[\"parents_1-2\"] = numParch1\nvisData[\"parents_>2\"] = numParch2\nvisData[\"siblings_none\"] = numSibsp0\nvisData[\"siblings_1-2\"] = numSibsp1\nvisData[\"siblings_>2\"] = numSibsp2\n\n# delete unused variables\ndel numMiss, numMr, numMs, numMaster, numParch0, numParch1, numParch2, numSibsp0, numSibsp1, numSibsp2","f5f652ce":"# DATA VISUALIZATION #3\n# visualizing data to correctly determine missing age\n\nfig, ax = plt.subplots(2, 2, figsize=(23,8))\nfig.suptitle(\"Data visualization for determining age in leftover passangers\", fontsize=20)\n\nax[0,0].bar(x + width\/2, visData[\"prefix_master\"], width, label=\"prefix: Master.\", color=\"tab:blue\")\nax[0,0].bar(x - width\/2, visData[\"prefix_mr\"], width, label=\"prefix: Mr.\", color=\"tab:olive\")\nax[0,0].set(title=\"Male name prefix\", xticks=x, xticklabels=visData[\"labels\"].values)\nax[0,0].legend()\n\nax[0,1].bar(x + width\/2, visData[\"prefix_miss\"], width, label=\"prefix: Miss.\", color=\"tab:blue\")\nax[0,1].bar(x - width\/2, visData[\"prefix_ms\"], width, label=\"prefix: Mrs.\", color=\"tab:olive\")\nax[0,1].set(title=\"Female name prefix\", xticks=x, xticklabels=visData[\"labels\"].values)\nax[0,1].legend()\n\nax[1,0].bar(x - width\/2, visData[\"parents_none\"], width\/2, label=\"parents\/children: none\", color=\"tab:blue\")\nax[1,0].bar(x, visData[\"parents_1-2\"], width\/2, label=\"parents\/children: 1-2\", color=\"tab:green\")\nax[1,0].bar(x + width\/2, visData[\"parents_>2\"], width\/2, label=\"parents\/children: >2\", color=\"tab:red\")\nax[1,0].set(title=\"number of parents\/children\", xticks=x, xticklabels=visData[\"labels\"].values)\nax[1,0].legend()\n\nax[1,1].bar(x - width\/2, visData[\"siblings_none\"], width\/2, label=\"siblings\/spouses: none\", color=\"tab:blue\")\nax[1,1].bar(x, visData[\"siblings_1-2\"], width\/2, label=\"siblings\/spouses: 1-2\", color=\"tab:green\")\nax[1,1].bar(x + width\/2, visData[\"siblings_>2\"], width\/2, label=\"siblings\/spouses: >2\", color=\"tab:red\")\nax[1,1].set(title=\"number of siblings\/spouses\", xticks=x, xticklabels=visData[\"labels\"].values)\nax[1,1].legend()\n\n# clear unused variables\ndel x","669a816c":"# DATA TREATMENT #2\n# 1) age of all people with \"master\" prefix is < 15\n\n# all people with \"master\"\n# known age from testing data\nmAge = trData[\"Age\"][(trData[\"Name\"].str.contains(\"Master.\")) & trData[\"Age\"].notna()]\n# append \"masters\" from testing data\nmAge = mAge.append(teData[\"Age\"][(teData[\"Name\"].str.contains(\"Master.\")) & teData[\"Age\"].notna()], ignore_index=True) \n\n# number of masters with unknown age \nunknown = len(trData[(trData[\"Name\"].str.contains(\"Master.\")) & trData[\"Age\"].isna()])\nunknown = unknown + len(teData[(teData[\"Name\"].str.contains(\"Master.\")) & teData[\"Age\"].isna()])\n\n# creating distribution (pandas dataframe, col1 = age, col2 = amount of people with said age)\nmAge = mAge.round(decimals=0) # round to integer\ndf = pd.DataFrame({\"age\": np.sort(mAge.unique())})\n# number of people with specific age\nnPeople = np.empty(len(df[\"age\"]))\nfor row in df.itertuples():\n    nPeople[row[0]] = len(mAge[mAge == row[1]])\ndf[\"num_of_people\"] = nPeople\n# normalize number of people <0,1>, y in following calulcation\ndf[\"num_of_people\"] = df[\"num_of_people\"].div(np.max(df[\"num_of_people\"]))\n\n# generate new ages according to distribution (x = age, y = distribution (number of people))\ngeneratedAge = np.ones(unknown)\ngeneratedAge[:] = np.NaN\nj = 0\n# repeated until required amopunt of ages is generated\nwhile np.isnan(generatedAge[-1]):\n    # generated x (age), y (distribution result) pairs\n    # generate according to ages in array\n    x = npr.randint(0, high=np.max(df[\"age\"]))\n    # skip loop step if this age is not present\n    if ~(df[\"age\"].isin([x]).any()):\n        continue\n    y = npr.rand(1)\n    # check if this pairs falls into the distribution\n    if y <= (df.loc[df[\"age\"] == x][\"num_of_people\"].item()):\n        generatedAge[j] = x\n        j += 1\n\n# compare generated distribution with original distribution?\nfig, ax = plt.subplots(figsize=(12,4))\nfig.suptitle(\"Comparison of real and generated age distribution; Master. prefix\", fontsize=20)\nax.hist(mAge, bins=len(df[\"age\"]), label=\"Real ages\")\nax.hist(generatedAge, bins=len(df[\"age\"]), label=\"Generated ages\", alpha=0.8, color=\"tab:red\")\nax.set(xlabel=\"age\", ylabel=\"quantity\")\nax.legend()\n\n# assign generated age to random ageless \"master\"\n# training data\npId = trData.index[(trData[\"Name\"].str.contains(\"Master.\")) & (trData[\"Age\"].isna())].tolist()\ntrLen = len(pId)\nfor i, val in enumerate(pId):\n    trData.at[val,\"Age\"] = generatedAge[i]\n# testing data\npId = teData.index[(teData[\"Name\"].str.contains(\"Master.\")) & (teData[\"Age\"].isna())].tolist()\nfor i, val in enumerate(pId):\n    teData.at[val,\"Age\"] = generatedAge[i+trLen]\n\n# clear unused variables\ndel x, y, fig, ax, df, mAge, unknown, pId, trLen, i, val, j, nPeople, generatedAge","7d8f6ef2":"# DATA TREATMENT #3\n\n# all people with \"Mr\"\n# known age from testing data\nmAge = trData[\"Age\"][(trData[\"Name\"].str.contains(\"Mr.\")) & trData[\"Age\"].notna() & (trData[\"Sex\"]==0)]\n# append \"Mr.\" from testing data\nmAge = mAge.append(teData[\"Age\"][(teData[\"Name\"].str.contains(\"Mr.\")) & teData[\"Age\"].notna() & (teData[\"Sex\"]==0)], ignore_index=True) \n\n# number of masters with unknown age \nunknown = len(trData[(trData[\"Name\"].str.contains(\"Mr.\")) & trData[\"Age\"].isna() & (trData[\"Sex\"]==0)])\nunknown = unknown + len(teData[(teData[\"Name\"].str.contains(\"Mr.\")) & teData[\"Age\"].isna() & (teData[\"Sex\"]==0)])\n\n# creating distribution (pandas dataframe, col1 = age, col2 = amount of people with said age)\nmAge = mAge.round(decimals=0) # round to integer\ndf = pd.DataFrame({\"age\": np.sort(mAge.unique())})\n# number of people with specific age\nnPeople = np.empty(len(df[\"age\"]))\nfor row in df.itertuples():\n    nPeople[row[0]] = len(mAge[mAge == row[1]])\ndf[\"num_of_people\"] = nPeople\n# normalize number of people <0,1>, y in following calulcation\ndf[\"num_of_people\"] = df[\"num_of_people\"].div(np.max(df[\"num_of_people\"]))\n\n# generate new ages according to distribution (x = age, y = distribution (number of people))\ngeneratedAge = np.ones(unknown)\ngeneratedAge[:] = np.NaN\nj = 0\n# repeated until required amopunt of ages is generated\nwhile np.isnan(generatedAge[-1]):\n    # generated x (age), y (distribution result) pairs\n    # generate according to ages in array\n    x = npr.randint(0, high=np.max(df[\"age\"]))\n    # skip loop step if this age is not present\n    if ~(df[\"age\"].isin([x]).any()):\n        continue\n    y = npr.rand(1)\n    # check if this pairs falls into the distribution\n    if y <= (df.loc[df[\"age\"] == x][\"num_of_people\"].item()):\n        generatedAge[j] = x\n        j += 1\n\n# compare generated distribution with original distribution\nfig, ax = plt.subplots(figsize=(12,4))\nfig.suptitle(\"Comparison of real and generated age distribution; Mr. prefix\", fontsize=20)\nax.hist(mAge, bins=len(df[\"age\"]), label=\"Real ages\")\nax.hist(generatedAge, bins=len(df[\"age\"]), label=\"Generated ages\", alpha=0.8, color=\"tab:red\")\nax.set(xlabel=\"age\", ylabel=\"quantity\")\nax.legend()\n\n# assign generated age to random ageless \"mr\"\n# training data\npId = trData.index[(trData[\"Name\"].str.contains(\"Mr.\")) & (trData[\"Age\"].isna()) & (trData[\"Sex\"]==0)].tolist()\ntrLen = len(pId)\nfor i, val in enumerate(pId):\n    trData.at[val,\"Age\"] = generatedAge[i]\n# testing data\npId = teData.index[(teData[\"Name\"].str.contains(\"Mr.\")) & (teData[\"Age\"].isna()) & (teData[\"Sex\"]==0)].tolist()\nfor i, val in enumerate(pId):\n    teData.at[val,\"Age\"] = generatedAge[i+trLen]\n\n# # clear unused variables\ndel x, y, fig, ax, df, mAge, unknown, pId, trLen, i, val, j, nPeople, generatedAge","30f97fc9":"# DATA TREATMENT #4\n\n# all people with \"Mrs\"\n# known age from testing data\nmAge = trData[\"Age\"][(trData[\"Name\"].str.contains(\"Mrs.\")) & trData[\"Age\"].notna()]\n# append \"Mr.\" from testing data\nmAge = mAge.append(teData[\"Age\"][(teData[\"Name\"].str.contains(\"Mrs.\")) & teData[\"Age\"].notna()], ignore_index=True) \n\n# number of masters with unknown age \nunknown = len(trData[(trData[\"Name\"].str.contains(\"Mrs.\")) & trData[\"Age\"].isna()])\nunknown = unknown + len(teData[(teData[\"Name\"].str.contains(\"Mrs.\")) & teData[\"Age\"].isna()])\n\n# creating distribution (pandas dataframe, col1 = age, col2 = amount of people with said age)\nmAge = mAge.round(decimals=0) # round to integer\ndf = pd.DataFrame({\"age\": np.sort(mAge.unique())})\n# number of people with specific age\nnPeople = np.empty(len(df[\"age\"]))\nfor row in df.itertuples():\n    nPeople[row[0]] = len(mAge[mAge == row[1]])\ndf[\"num_of_people\"] = nPeople\n# normalize number of people <0,1>, y in following calulcation\ndf[\"num_of_people\"] = df[\"num_of_people\"].div(np.max(df[\"num_of_people\"]))\n\n# generate new ages according to distribution (x = age, y = distribution (number of people))\ngeneratedAge = np.ones(unknown+1) # +1 for that weird lady with Ms. prefix\ngeneratedAge[:] = np.NaN\nj = 0\n# repeated until required amopunt of ages is generated\nwhile np.isnan(generatedAge[-1]):\n    # generated x (age), y (distribution result) pairs\n    # generate according to ages in array\n    x = npr.randint(0, high=np.max(df[\"age\"]))\n    # skip loop step if this age is not present\n    if ~(df[\"age\"].isin([x]).any()):\n        continue\n    y = npr.rand(1)\n    # check if this pairs falls into the distribution\n    if y <= (df.loc[df[\"age\"] == x][\"num_of_people\"].item()):\n        generatedAge[j] = x\n        j += 1\n\n# compare generated distribution with original distribution\nfig, ax = plt.subplots(figsize=(12,4))\nfig.suptitle(\"Comparison of real and generated age distribution; Mrs. prefix\", fontsize=20)\nax.hist(mAge, bins=len(df[\"age\"]), label=\"Real ages\")\nax.hist(generatedAge, bins=len(df[\"age\"]), label=\"Generated ages\", alpha=0.8, color=\"tab:red\")\nax.set(xlabel=\"age\", ylabel=\"quantity\")\nax.legend()\n\n# assign generated age to random ageless \"mrs\"\n# training data\npId = trData.index[(trData[\"Name\"].str.contains(\"Mrs.\")) & (trData[\"Age\"].isna())].tolist()\ntrLen = len(pId)\nfor i, val in enumerate(pId):\n    trData.at[val,\"Age\"] = generatedAge[i]\n# testing data\npId = teData.index[(teData[\"Name\"].str.contains(\"Mrs.\")) & (teData[\"Age\"].isna())].tolist()\nfor i, val in enumerate(pId):\n    teData.at[val,\"Age\"] = generatedAge[i+trLen]\n# That one lady with Ms. prefix\npId = teData.index[(teData[\"Name\"].str.contains(\"Ms. Bridget\")) & (teData[\"Age\"].isna())].tolist()\nteData.at[pId,\"Age\"] = generatedAge[-1]\n\n# # clear unused variables\ndel x, y, fig, ax, df, mAge, unknown, pId, trLen, i, val, j, nPeople, generatedAge","0932b000":"# DATA TREATMENT #5\n\n# all people with \"Miss\"\n# known age from testing data\nmAge = trData[\"Age\"][(trData[\"Name\"].str.contains(\"Miss.\")) & trData[\"Age\"].notna()]\n# append \"Mr.\" from testing data\nmAge = mAge.append(teData[\"Age\"][(teData[\"Name\"].str.contains(\"Miss.\")) & teData[\"Age\"].notna()], ignore_index=True) \n\n# number of masters with unknown age \nunknown = len(trData[(trData[\"Name\"].str.contains(\"Miss.\")) & trData[\"Age\"].isna()])\nunknown = unknown + len(teData[(teData[\"Name\"].str.contains(\"Miss.\")) & teData[\"Age\"].isna()])\n\n# creating distribution (pandas dataframe, col1 = age, col2 = amount of people with said age)\nmAge = mAge.round(decimals=0) # round to integer\ndf = pd.DataFrame({\"age\": np.sort(mAge.unique())})\n# number of people with specific age\nnPeople = np.empty(len(df[\"age\"]))\nfor row in df.itertuples():\n    nPeople[row[0]] = len(mAge[mAge == row[1]])\ndf[\"num_of_people\"] = nPeople\n# normalize number of people <0,1>, y in following calulcation\ndf[\"num_of_people\"] = df[\"num_of_people\"].div(np.max(df[\"num_of_people\"]))\n\n# generate new ages according to distribution (x = age, y = distribution (number of people))\ngeneratedAge = np.ones(unknown) \ngeneratedAge[:] = np.NaN\nj = 0\n# repeated until required amopunt of ages is generated\nwhile np.isnan(generatedAge[-1]):\n    # generated x (age), y (distribution result) pairs\n    # generate according to ages in array\n    x = npr.randint(0, high=np.max(df[\"age\"]))\n    # skip loop step if this age is not present\n    if ~(df[\"age\"].isin([x]).any()):\n        continue\n    y = npr.rand(1)\n    # check if this pairs falls into the distribution\n    if y <= (df.loc[df[\"age\"] == x][\"num_of_people\"].item()):\n        generatedAge[j] = x\n        j += 1\n\n# compare generated distribution with original distribution\nfig, ax = plt.subplots(figsize=(12,4))\nfig.suptitle(\"Comparison of real and generated age distribution; Miss. prefix\", fontsize=20)\nax.hist(mAge, bins=len(df[\"age\"]), label=\"Real ages\")\nax.hist(generatedAge, bins=len(df[\"age\"]), label=\"Generated ages\", alpha=0.8, color=\"tab:red\")\nax.set(xlabel=\"age\", ylabel=\"quantity\")\nax.legend()\n\n# assign generated age to random ageless \"Miss\"\n# training data\npId = trData.index[(trData[\"Name\"].str.contains(\"Miss.\")) & (trData[\"Age\"].isna())].tolist()\ntrLen = len(pId)\nfor i, val in enumerate(pId):\n    trData.at[val,\"Age\"] = generatedAge[i]\n# testing data\npId = teData.index[(teData[\"Name\"].str.contains(\"Miss.\")) & (teData[\"Age\"].isna())].tolist()\nfor i, val in enumerate(pId):\n    teData.at[val,\"Age\"] = generatedAge[i+trLen]\n\n# # clear unused variables\ndel x, y, fig, ax, df, mAge, unknown, pId, trLen, i, val, j, nPeople, generatedAge","c0762539":"# number of people without age in testing and training datasets\nprint(\"Number of people with unknown age (train dataset): \" + str(len(trData[trData[\"Age\"].isna()])))\nprint(\"Number of people with unknown age (test dataset): \" + str(len(teData[teData[\"Age\"].isna()])))","e6f3a068":"# DATA TREATMENT #6\n# finishing data preparation for ML models\n# creating dummy variables for embarkment\ntrData = trData.join(pd.get_dummies(trData[\"Embarked\"]))\nteData = teData.join(pd.get_dummies(trData[\"Embarked\"]))\n\n# getting rid of data containing NaNs \ntrData = trData[(trData[\"Age\"].notna()) & (trData[\"Embarked\"].notna())]\nteData = teData[(teData[\"Age\"].notna()) & (teData[\"Embarked\"].notna())]\n\n# there is one person in teData who has NaN for fare \n# take everyone in same age (60+-5 years) and same class (3rd) and take mean value\nfarestr = trData[(trData[\"Age\"]>55) & (trData[\"Age\"]<65) & (trData[\"Pclass\"]==3) & (trData[\"SibSp\"]==0) & (trData[\"Parch\"]==0)]\nteData.at[152,\"Fare\"] = np.mean(farestr[\"Fare\"])\n\n\n# delete useless columns\nids = teData[\"PassengerId\"] # keep ids for later\ntrData = trData.drop(columns=[\"PassengerId\",\"Name\",\"Ticket\",\"Cabin\",\"Embarked\"])\nteData = teData.drop(columns=[\"PassengerId\",\"Name\",\"Ticket\",\"Cabin\",\"Embarked\"])\n\n# scale the data using standard scaler\n# important for some models\nfrom sklearn.preprocessing import StandardScaler\n\n# setup scaler\nscaler = StandardScaler()\nscaler.fit(trData.drop(columns=\"Survived\"))\ntrainX = scaler.transform(trData.drop(columns=\"Survived\"))\ntrainY = trData[\"Survived\"]\ntestX = scaler.transform(teData)","a312d9e4":"# MODEL TEST \n# using cross validation from sklearn\n\n# imports\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\n\n# prepare vector for scores\nscores = np.empty([6,10])\n\n# use cross validation \nscores[0,:] = cross_val_score(LinearSVC(random_state=42, max_iter=10000), trainX, trainY, cv=10)\nscores[1,:] = cross_val_score(LogisticRegression(C=100, max_iter=100), trainX, trainY, cv=10)\nscores[2,:] = cross_val_score(LogisticRegression(C=0.001, max_iter=100), trainX, trainY, cv=10)\nscores[3,:] = cross_val_score(DecisionTreeClassifier(max_depth=3), trainX, trainY, cv=10)\nscores[4,:] = cross_val_score(DecisionTreeClassifier(max_depth=5), trainX, trainY, cv=10)\nscores[5,:] = cross_val_score(DecisionTreeClassifier(max_depth=8), trainX, trainY, cv=10)\n\n# names of models for xticks\nmodels = [\"LinearSVC\", \"Logistic regression (C=100)\", \"Logistic regression (C=0.001)\", \"Decision tree depth = 3\", \"Decision tree depth = 5\", \"Decision tree depth = 8\"]\n\n# plot results\nfig, ax = plt.subplots(figsize=(12,6))\nfig.suptitle(\"Comparison of different models using cross_val_score\", fontsize=20)\nax.imshow(scores)\nax.set(yticks=np.arange(len(models)), yticklabels=models, xticks=([]))\n# write the score into the heatmap\nfor i in range(scores.shape[0]):\n    for j in range(scores.shape[1]):\n        ax.text(j, i, np.round(scores[i, j],2), ha=\"center\", va=\"center\", color=\"k\")\n\n# clear variables\ndel scores, models, fig, ax, i, j, trainX, trainY, testX, scaler","43cb2e3d":"# FINAL MODEL testing\n# random forest\n\n# imports\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\n\n# random forest doesnt require scalling, let's take normal data\ndataX = trData.drop(columns=\"Survived\")\ndataY = trData[\"Survived\"]\n\n\nforest = RandomForestClassifier(n_estimators=100, max_depth=5, max_features='sqrt', random_state=0)\n\nscore = cross_val_score(forest, dataX, dataY, cv=10)\n\nprint(\"Cross validation score: %.4g +- %.4g \" % (np.mean(score), np.std(score)))","7394be51":"# FINAL MODEL\n\nforest.fit(dataX, dataY)\n\nresult = pd.DataFrame({\"PassengerId\": ids, \"Survived\": forest.predict(teData)})\nresult.to_csv(\"results.csv\", index=False)\nresult.head()","f4f5065e":"# 5 - Searching for final model\n\nI selected several classification models and run cross validation on them to determine which one is suited the most. Winner was decision tree. ","7d216139":"There is only one passenger with unknown name remaining. It was some doctor. I decided to discard his entry\n\n# 4 - Leftover data preparation\n\nOnly things remaing was to get rid of useless columns and filling fare for one passenger.\nFor finding model I'll use, I also scaled the data using StandardScaler","66917049":"Another interesting point was, that disregarding gender, being in a first class increase your chance of surviving. Being in third class was a death sentence","5bdba325":"# Noob's First Titanic Submission\n\nFew notes to start things off:\n1. I have zero previous experience with data science, althrough I have experience with math (no statistics tho) and data processing \n2. Before doing this notebook, I finished Introduction to Machine Learning with Python by Andreas C. M\u00fcller and Sarah Guido (fairly good book)\n3. This notebook is mainly for me so I can go back to it and remember how I solved some things\n4. If you see some blatant stupidity, please let me know in the comments, I'm always up for learning something new","f4fa81c6":"# 1 - Selecting data for visualization\n\nI decided that most interesting would be to plot survivability on age for genders and passanger classes","64cde0e3":"# 7 - Creating data for submission\n\nAnd now just fit the data and create results. If you have some suggestions, please let me know in the comments.","5625f9e1":"What we can see in the plot above, being a women helped you a lot.\n","f0cd8dad":"# 2 - Visualization of the data","9d85ce33":"# 3 - Filling empty data\n\n1. Following problem occured as a lot of people don't have their age present in the dataset.\n1. I decided to visualize their prefixes and family status on age\n1. In the end, I decided to generate new ages according to age distribution of name prefixes","125889e1":"# 6 - Creating final model\n\n1. To increase precision I selected random forest \n2. As trees don't require data scalling I took the original data "}}