{"cell_type":{"1fb21e43":"code","e587b537":"code","eebd3385":"code","e20aabee":"code","a53870d0":"code","286561c7":"code","7dc2d777":"code","0405d5df":"code","7c2cfe89":"code","e71956c4":"code","0370fefa":"code","ec55b697":"code","706ef855":"code","dcfb0e42":"code","18557fc6":"code","10a558dc":"code","956965c7":"code","b146b3d5":"code","03a0d6e8":"code","c4e597d4":"code","8ca36d41":"code","dd2c22cb":"code","06dc2b70":"code","cf14f173":"code","31a1ef63":"code","d63f996a":"code","897ffe8e":"code","58a2e64f":"code","cda58c81":"code","f2f03268":"code","0b5b3a7c":"code","6f8c10b5":"code","88af2da6":"code","2aa6dc6d":"code","0028cd5f":"code","18f02ca0":"code","79c9ac30":"code","4c2d68f5":"markdown","33b39c83":"markdown","8f8713a6":"markdown","15ee8eba":"markdown","797355cd":"markdown","ee9164c3":"markdown","82a19ea4":"markdown","e8154eb1":"markdown","a6d85b73":"markdown","ef3efdc1":"markdown","1779a4a8":"markdown","3f3b9edd":"markdown","093b223d":"markdown","420c88a7":"markdown","9095b4d2":"markdown"},"source":{"1fb21e43":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport gc,os,sys\nimport operator \n\nfrom keras import initializers, regularizers, constraints, optimizers, layers, callbacks\nfrom keras import backend as K\nfrom keras.engine import InputSpec, Layer\nfrom keras.callbacks import ModelCheckpoint, Callback, EarlyStopping, ReduceLROnPlateau\nfrom keras.preprocessing.text import Tokenizer, text_to_word_sequence\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Dense, Input, LSTM, Embedding, Dropout, Activation, Conv1D, GRU, CuDNNGRU, CuDNNLSTM, BatchNormalization\nfrom keras.layers import Bidirectional, GlobalMaxPool1D, MaxPooling1D, Add, Flatten, Masking\nfrom keras.layers import GlobalAveragePooling1D, GlobalMaxPooling1D, concatenate, SpatialDropout1D\nfrom keras.models import Model, load_model\nfrom keras.optimizers import Adam\n\nsns.set_style('darkgrid')\npd.options.display.float_format = '{:,.3f}'.format","e587b537":"%%time\ntrain = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/train.csv')\ntest = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv')\n\nprint(train.shape, test.shape)","eebd3385":"# Memory saving function credit to https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.\n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                #if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                #    df[col] = df[col].astype(np.float16)\n                #el\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        #else:\n            #df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB --> {:.2f} MB (Decreased by {:.1f}%)'.format(\n        start_mem, end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","e20aabee":"train = reduce_mem_usage(train)\ntest = reduce_mem_usage(test)","a53870d0":"train.head()","286561c7":"test.head()","7dc2d777":"train['target'].describe()","0405d5df":"#train['target'].hist(bins=50, figsize=(10,3))\n#sns.distplot(train['target'], bins=50, kde=True)\n\ntarget_bin = pd.cut(train['target'], [0, 0.01, 0.2, 0.4, 0.6, 0.8, 0.99, 1], right=False).value_counts()\ntarget_bin = pd.Series(target_bin)\ntarget_bin.plot.bar(color='navy', figsize=(8,3), title='target histgram (by range)')\ntarget_bin.to_frame().T","7c2cfe89":"train.sort_values(['target'], ascending=False).head()","e71956c4":"train.sort_values(['target']).head()","0370fefa":"# word-count histgram\nword_counts = train['comment_text'].apply(lambda x: len(x.split()))\nword_counts.hist(bins=50, figsize=(10,3))\n\nprint('max words: ', max(word_counts))\nprint('sum words: ', sum(word_counts))\ndel word_counts","ec55b697":"print('toxic comment:\\n', train[train['target'] == 1]['comment_text'].iloc[0])\nprint()\nprint('non-toxic comment:\\n', train[train['target'] == 0]['comment_text'].iloc[0])","706ef855":"all_df = pd.concat([train, test], sort=False)\ndel (train, test)\ngc.collect()","dcfb0e42":"all_df['comment_text'].values[0]","18557fc6":"all_df['comment_text'] = all_df['comment_text'].apply(lambda x: x.lower())","10a558dc":"contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"can not\", \"'cause\": \"because\",\n                       \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\", \n                       \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \n                       \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\n                       \"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \n                       \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\", \n                       \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\",\n                       \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\",\n                       \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",\n                       \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\",\n                       \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \n                       \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\",\n                       \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\n                       \"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \n                       \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \n                       \"needn't\": \"need not\", \"needn't've\": \"need not have\",\n                       \"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \n                       \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\",\n                       \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \n                       \"she'd've\": \"she would have\", \"she'll\": \"she will\",\n                       \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \n                       \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \n                       \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\n                       \"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\",\n                       \"there'd\": \"there would\", \"there'd've\": \"there would have\", \n                       \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \n                       \"they'd've\": \"they would have\", \"they'll\": \"they will\", \n                       \"they'll've\": \"they will have\", \"they're\": \"they are\", \n                       \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\",\n                       \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \n                       \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\",\n                       \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\",\n                       \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \n                       \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \n                       \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \n                       \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \n                       \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\",\n                       \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\",\n                       \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \n                       \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\n                       \"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \n                       \"you'd've\": \"you would have\", \"you'll\": \"you will\", \n                       \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\" }\n\ndef clean_contractions(text, mapping):\n    specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n    for s in specials:\n        text = text.replace(s, \"'\")\n    text = ' '.join([mapping[t] if t in mapping else t for t in text.split(\" \")])\n    return text\n\nall_df['comment_text'] = all_df['comment_text'].apply(lambda x: clean_contractions(x, contraction_mapping))","956965c7":"def preprocess(data):\n    def clean_special_chars(text):\n        punct = \"\/-'?!.,#$%\\'()*+-\/:;<=>@[\\\\]^_`{|}~`\" + '\"\"\u201c\u201d\u2019' + '\u221e\u03b8\u00f7\u03b1\u2022\u00e0\u2212\u03b2\u2205\u00b3\u03c0\u2018\u20b9\u00b4\u00b0\u00a3\u20ac\\\u00d7\u2122\u221a\u00b2\u2014\u2013&\u2026'\n        for p in punct:\n            text = text.replace(p, ' ')\n        for p in '0123456789':\n            text = text.replace(p, ' ')\n        #for p in \"?!.,\":\n        #    text = text.replace(p, ' ' + p)\n        return text\n\n    data = data.astype(str).apply(lambda x: clean_special_chars(x))\n    return data\n\nall_df['comment_text'] = preprocess(all_df['comment_text'])","b146b3d5":"table = str.maketrans('\u1d00\u0299\u1d04\u1d05\u1d07\u0493\u0262\u029c\u026a\u1d0a\u1d0b\u029f\u1d0d\u0274\u1d0f\u1d18\u0280\u1d1b\u1d1c\u1d20\u1d21\u028f\u1d22', 'abcdefghijklmnoprtuvwyx')\nall_df['comment_text'] = all_df['comment_text'].apply(lambda x: x.translate(table))","03a0d6e8":"text_to_word_sequence(all_df['comment_text'].values[0])","c4e597d4":"train = all_df[all_df['target'].notnull()]\ntest = all_df[all_df['target'].isnull()]\n\nX_train = train.drop(['id','target'], axis=1)\nY_train = (train['target'] >= 0.5).astype(int)\nX_test  = test.drop(['id','target'], axis=1)\n#train_id  = train['id']\n#test_id  = test['id']\n\nprint(X_train.shape, X_test.shape)","8ca36d41":"del (all_df, train, test)\ngc.collect()\n\nprint(pd.DataFrame([[val for val in dir()], [sys.getsizeof(eval(val)) for val in dir()]],\n                   index=['name','size']).T.sort_values('size', ascending=False).reset_index(drop=True)[:5])","dd2c22cb":"TOXICITY_COLUMN = 'target'\nTEXT_COLUMN = 'comment_text'\nMAX_NUM_WORDS = 300000\nTOKENIZER_FILTER = '\\r\\t\\n'\n\n# Create a text tokenizer.\ntokenizer = Tokenizer(num_words=MAX_NUM_WORDS, filters=TOKENIZER_FILTER)\ntokenizer.fit_on_texts(list(X_train[TEXT_COLUMN]) + list(X_test[TEXT_COLUMN]))","06dc2b70":"counter = sorted(dict(tokenizer.word_docs).items(), key=lambda x:x[1], reverse=True)\nwordcount = pd.Series([x[1] for x in counter], [x[0] for x in counter])\ndel counter\n\nwordcount[:30].plot.bar(color='navy', width=0.7, figsize=(12,3))","cf14f173":"tokenizer_tx = Tokenizer(num_words=MAX_NUM_WORDS, filters=TOKENIZER_FILTER)\ntokenizer_tx.fit_on_texts(list(X_train.loc[Y_train == 1, TEXT_COLUMN]))\n\ncounter = sorted(dict(tokenizer_tx.word_docs).items(), key=lambda x:x[1], reverse=True)\nwordcount_tx = pd.Series([x[1] for x in counter], [x[0] for x in counter])\n\nwordcount_stats = pd.concat([wordcount, wordcount_tx], axis=1, keys=[0, 'toxic'], sort=False)\nwordcount_only_tx = wordcount_stats[wordcount_stats[0] * 0.8 <= wordcount_stats['toxic']].copy()\nwordcount_only_tx.drop('toxic', axis=1, inplace=True)\nwordcount_only_tx = wordcount_only_tx[wordcount_only_tx[0] > 1]\n\nprint(len(wordcount_only_tx))\nwordcount_only_tx[:10]","31a1ef63":"wordcount = pd.concat([wordcount_only_tx, wordcount])[0]\ndel counter, wordcount_tx, wordcount_stats, wordcount_only_tx","d63f996a":"wordsum = wordcount.sum()\n\nn_words = len(wordcount)\ncumsum_rate = wordcount.cumsum() \/ wordsum\ncover_rate = {}\nfor i in range(100, 90, -1):\n    p = i \/ 100\n    cover_rate[str(i)+'%'] = n_words - len(cumsum_rate[cumsum_rate > p])\ndel cumsum_rate\n\npd.Series(cover_rate).plot.barh(color='navy', figsize=(12, 3), title='vocab-size by coverage-rate')\npd.Series(cover_rate).to_frame().T","897ffe8e":"VOCAB_SIZE = 50000\n\nprint('covered', wordcount[VOCAB_SIZE], 'times word')","58a2e64f":"%%time\n\nEMBEDDINGS_DIMENSION = 300\nCRAWL_EMBEDDING_PATH = '..\/input\/fasttext-crawl-300d-2m\/crawl-300d-2M.vec'\nGLOVE_EMBEDDING_PATH = '..\/input\/glove840b300dtxt\/glove.840B.300d.txt'\n\ndef get_coefs(word, *arr):\n    return word, np.asarray(arr, dtype='float32')\n\ndef load_embeddings(path):\n    with open(path) as f:\n        return dict(get_coefs(*line.strip().split(' ')) for line in f)\n\ndef build_matrix(path):\n    embedding_index = load_embeddings(path)\n    embedding_matrix = np.zeros((VOCAB_SIZE + 1, EMBEDDINGS_DIMENSION))\n    unknown_words = []\n    for i in range(VOCAB_SIZE):\n        try:\n            word = wordcount.index[i]\n            embedding_matrix[i] = embedding_index[word]\n        except KeyError:\n            unknown_words.append(word)\n    return embedding_matrix, unknown_words\n\ncrawl_matrix, unknown_words_crawl = build_matrix(CRAWL_EMBEDDING_PATH)\nglove_matrix, unknown_words_glove = build_matrix(GLOVE_EMBEDDING_PATH)\n\nword2index = dict((wordcount.index[i], i) for i in range(VOCAB_SIZE))\n\nembedding_matrix = np.concatenate([crawl_matrix, glove_matrix], axis=-1)\n#embedding_matrix = glove_matrix\nembedding_matrix.shape","cda58c81":"words_count = len(unknown_words_crawl)\nprint('n unknown words (crawl):', words_count, ', {:.3%} of all words'.format(words_count \/ n_words))\nprint('unknown words (crawl):', unknown_words_crawl)\nwords_count = len(unknown_words_glove)\nprint('n unknown words (glove):', words_count, ', {:.3%} of all words'.format(words_count \/ n_words))\nprint('unknown words (glove):', unknown_words_glove)","f2f03268":"del crawl_matrix, unknown_words_crawl\ndel glove_matrix, unknown_words_glove\ndel wordcount\ngc.collect()","0b5b3a7c":"MAX_SEQUENCE_LENGTH = 256\n\ndef word_index(word):\n    try:\n        return word2index[word]\n    except KeyError:\n        return VOCAB_SIZE\n\n# All comments must be truncated or padded to be the same length.\ndef pad_text(texts, tokenizer):\n    matrix = [list(map(word_index, text_to_word_sequence(t, filters=TOKENIZER_FILTER))) for t in texts]\n    return pad_sequences(matrix, maxlen=MAX_SEQUENCE_LENGTH)\n\ntrain_text = pad_text(X_train[TEXT_COLUMN], tokenizer)\ntest_text = pad_text(X_test[TEXT_COLUMN], tokenizer)","6f8c10b5":"del (X_train, X_test)\ngc.collect()\n\nprint(pd.DataFrame([[val for val in dir()], [sys.getsizeof(eval(val)) for val in dir()]],\n                   index=['name','size']).T.sort_values('size', ascending=False).reset_index(drop=True)[:10])","88af2da6":"def build_model(lr=0.0, lr_d=0.0, units=64, spatial_dr=0.0, \n                dense_units=0, dr=0.1, conv_size=32, epochs=20):\n    \n    file_path = \"best_model.hdf5\"\n    check_point = ModelCheckpoint(file_path, monitor=\"val_loss\", verbose=1, save_best_only=True, mode=\"min\")\n    early_stop = EarlyStopping(monitor=\"val_loss\", mode=\"min\", patience=3)\n\n    sequence_input = Input(shape=(MAX_SEQUENCE_LENGTH,), dtype='int32')\n    embedding_layer = Embedding(*embedding_matrix.shape,\n                            weights=[embedding_matrix],\n                            input_length=MAX_SEQUENCE_LENGTH,\n                            trainable=True)\n    \n    x = embedding_layer(sequence_input)\n    x = SpatialDropout1D(spatial_dr)(x)\n    x = Bidirectional(CuDNNGRU(units, return_sequences=True))(x)   \n    x = Conv1D(conv_size, 2, padding=\"valid\", kernel_initializer=\"he_uniform\")(x)\n  \n    avg_pool1 = GlobalAveragePooling1D()(x)\n    max_pool1 = GlobalMaxPooling1D()(x)     \n    \n    x = concatenate([avg_pool1, max_pool1])\n    x = BatchNormalization()(x)\n    x = Dense(int(dense_units \/ 2), activation='relu')(x)\n    x = Dropout(dr)(x)\n    \n    preds = Dense(1, activation='sigmoid')(x)\n    \n    model = Model(inputs=sequence_input, outputs=preds)\n    model.compile(loss=\"binary_crossentropy\", optimizer=Adam(lr=lr, decay=lr_d), metrics=[\"accuracy\"])\n    model.summary()\n    history = model.fit(train_text, Y_train, batch_size=1024, epochs=epochs, validation_split=0.1, \n                        verbose=1, callbacks=[check_point, early_stop])\n   \n    model = load_model(file_path)\n    return model","2aa6dc6d":"model = build_model(lr=1e-3, lr_d=1e-7, units=64, spatial_dr=0.2, dense_units=64, dr=0, conv_size=64, epochs=20)\npred = model.predict(test_text)","0028cd5f":"submission = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/sample_submission.csv', index_col='id')\nsubmission['prediction'] = pred\nsubmission.reset_index(drop=False, inplace=True)\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","18f02ca0":"submission['prediction'].describe()","79c9ac30":"target_bin = pd.cut(submission['prediction'], [0, 0.01, 0.2, 0.4, 0.6, 0.8, 0.99, 1], right=False).value_counts()\ntarget_bin = pd.Series(target_bin)\ntarget_bin.plot.bar(color='navy', figsize=(10,3))\ntarget_bin.to_frame().T","4c2d68f5":"### target","33b39c83":"# Submit","8f8713a6":"### Text normalization","15ee8eba":"# Data analysis","797355cd":"### tokenize text","ee9164c3":"## Preprocessing","82a19ea4":"### vocabulary size","e8154eb1":"### non-toxic data","a6d85b73":"### embedding matrix","ef3efdc1":"### toxic data","1779a4a8":"### comment_text","3f3b9edd":"### word-id matrix","093b223d":"### toxic words","420c88a7":"# Predict","9095b4d2":"# Feature engineering"}}