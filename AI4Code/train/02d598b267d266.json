{"cell_type":{"f6b7648a":"code","002a5dd8":"code","23589c59":"code","d7e8f92c":"code","14dc817f":"code","e03fc928":"markdown","9cdb2f62":"markdown","53e5363c":"markdown"},"source":{"f6b7648a":"%matplotlib inline\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.datasets import load_boston\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nmydata=load_boston()\nprint(mydata.DESCR)","002a5dd8":"X = pd.DataFrame(mydata.data, columns=mydata.feature_names)\ny = mydata.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\nfrom sklearn import linear_model\nlm=linear_model.LinearRegression()","23589c59":"lm.fit(X,y)\ny_predict=lm.predict(X)\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nprint(\"model1 MSE :\",mean_squared_error(y,y_predict))\nprint(\"model1 MAE :\",mean_absolute_error(y,y_predict))\nprint(\"model1 R-square :\",r2_score(y,y_predict))","d7e8f92c":"intercepts=pd.DataFrame(np.ones(506),columns=[\"00\"]) # create intercept term\ndat=pd.DataFrame(mydata.data) \nX=pd.concat([intercepts,dat],axis=1) # combine intercept term with other terms \nX=np.matrix(X) # transform DataFrame into array\ny=mydata.target\ny=y.reshape(506,1)\ny=np.matrix(y)","14dc817f":"beta = ((X.T@X).I)@X.T@y # metrix of coefficient\ny_predict = X@beta\n\nprint('model2 MSE\uff1a',mean_squared_error(y,y_predict))\nprint(\"model2 MAE :\",mean_absolute_error(y,y_predict))\nprint(\"model2 R-square :\",r2_score(y,y_predict))","e03fc928":"## 1. Using Built-in model of sklearn to construct linear regression model.","9cdb2f62":"### In conclusion, there is still very little difference because computer will calculate numerically if we use the built-in model. ","53e5363c":"## 2. Using traditional method to construct linear regression model."}}