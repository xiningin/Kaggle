{"cell_type":{"1fc9e4bd":"code","43de3292":"code","921a9ca7":"code","07ee3b4a":"code","ec0c8764":"code","b6cc25b8":"code","32fde2a8":"code","a4194ab9":"code","0383117c":"code","a808f081":"code","a0654560":"code","6f8b9164":"code","c86a6697":"code","c0925079":"code","21be206c":"code","8580478b":"code","8db384f7":"code","f4abdd03":"code","dfb3520c":"code","a77f0658":"code","9678f9fd":"code","0bc53d79":"code","b974eb59":"code","310ab732":"code","460a9d44":"code","6209ef94":"code","2cb0e564":"code","8b1bc7c2":"code","5b43a4c3":"code","105edf5c":"code","a523d8b9":"code","2159eb0c":"code","3d791795":"code","553a2324":"code","1392e350":"code","4acf74e1":"code","ef53869f":"code","37ff6dfe":"code","fcaf361a":"code","a8a982cd":"code","9fa8cea0":"code","41d91b2a":"code","6e13c766":"code","af108b29":"code","8f49b5e1":"code","c10f396a":"code","8358f43e":"markdown","429e56e8":"markdown","c1cdce68":"markdown","8a998726":"markdown","18f4d92f":"markdown","f7d5c3fd":"markdown","94159246":"markdown","45b78db6":"markdown","1a26396f":"markdown","73e4772f":"markdown","0d7b90e1":"markdown","000b81e8":"markdown","6407bdd5":"markdown","1a23f15d":"markdown","03000802":"markdown","a9295ebb":"markdown","baffd23a":"markdown","ee805d55":"markdown","f25ebd0f":"markdown","ad846175":"markdown","fde02619":"markdown","a1833e12":"markdown","81934b21":"markdown","a2586518":"markdown","529a1452":"markdown","e3b91cd1":"markdown","5cb76516":"markdown","1e50cee7":"markdown","843df723":"markdown"},"source":{"1fc9e4bd":"import pandas as pd #Data Analysis\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#from sklearn.linear_model import LogisticRegression\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","43de3292":"df_train=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_test=pd.read_csv(\"..\/input\/titanic\/test.csv\")\nprint(\"Train Shape:\",df_train.shape)\nprint(\"Test Shape:\",df_test.shape)","921a9ca7":"df_train.head()","07ee3b4a":"df_train.describe(include='all')","ec0c8764":"df_train.Sex=df_train.Sex.astype('category')\ndf_train.Pclass=df_train.Pclass.astype('category')\ndf_train.Embarked=df_train.Embarked.astype('category')","b6cc25b8":"df_train.corrwith(df_train.Survived)","32fde2a8":"df_train.info()","a4194ab9":"df_train.columns","0383117c":"df_train_test=pd.concat([df_train.drop('Survived', axis=1),df_test])\ndf_train_test.shape","a808f081":"# Function to plot null values in each column\ndef na_plotter(df):\n    val_na=df.isna().sum().sort_values(ascending=False)\n    val_na=round(val_na*100\/df_train.shape[0],2)\n    val_na=val_na[val_na>0]\n    plt.figure(figsize=(8,4))\n    plt.title(\"Percentage of Null Values\", fontsize=16)\n    sns.barplot(val_na, y=val_na.index, orient='h')\n    plt.ylabel(\"Features\")\n    plt.xlabel(\"Percentage Null Values\")\n    plt.show()","a0654560":"# Null values in train data\nna_plotter(df_train)","6f8b9164":"# Null values in test data\nna_plotter(df_test)","c86a6697":"# Null values in full data\nna_plotter(df_train_test)","c0925079":"# New feature CabinBool: CabinBool=1 if Cabin Data Available, else CabinBool=0\ndf_train[\"CabinBool\"]=0\ndf_test[\"CabinBool\"]=0\ndf_train_test[\"CabinBool\"]=0\n\ndf_train.CabinBool[df_train.Cabin.isna()==False]=1\ndf_train_test.CabinBool[df_train_test.Cabin.isna()==False]=1","21be206c":"#Count Plot Cabin Bool Vs Survival\nplt.figure(figsize=(6,4))\nplt.title(\"Cabin Bool Vs Survival\", fontsize=16)\nsns.countplot(df_train.CabinBool, hue=df_train.Survived)\nplt.show()","8580478b":"#Pie Chart Cabin Bool Vs Survival\nplt.figure(figsize=(8,4))\nplt.subplot(1,2,1)\nplt.title(\"Cabin data Available\", fontsize=16)\nx=df_train.Survived[df_train.CabinBool==1].value_counts()\nlabel=[\"Survived\", \"Deceased\"]\nplt.pie([x[1],x[0]], labels=label, autopct='%1.1f%%')\n#plt.show()\n\nplt.subplot(1,2,2)\nplt.title(\"Cabin Data Not Available\", fontsize=16)\nx=df_train.Survived[df_train.CabinBool==0].value_counts()\nlabel=[\"Survived\", \"Deceased\"]\nplt.pie([x[1],x[0]], labels=label, autopct='%1.1f%%')\nplt.show()","8db384f7":"#Countplot Cabin Bool Vs Political Class\nplt.figure(figsize=(6,4))\nplt.title(\"Cabin Bool Vs Political Class\", fontsize=16)\nsns.countplot('Pclass', hue='CabinBool', data=df_train_test)\nplt.show()","f4abdd03":"#Pie Chart Cabin Bool Vs Political Class\nplt.figure(figsize=(8,4))\nplt.subplot(1,2,1)\nplt.title(\"Cabin data Available\", fontsize=16)\nx=df_train_test.Pclass[df_train.CabinBool==1].value_counts()\nlabel=[\"Upper Class\", \"Middle Class\", \"Lower Class\"]\nplt.pie([x[1],x[2],x[3]], labels=label, autopct='%1.1f%%')\n\nplt.subplot(1,2,2)\nplt.title(\"Cabin Data Not Available\", fontsize=16)\nx=df_train_test.Pclass[df_train.CabinBool==0].value_counts()\nlabel=[\"Upper Class\", \"Middle Class\", \"Lower Class\"]\nplt.pie([x[1],x[2],x[3]], labels=label, autopct='%1.1f%%')\nplt.show()","dfb3520c":"#Pie Chart CabinBool Vs Gender\nplt.figure(figsize=(8,4))\nplt.subplot(1,2,1)\nplt.title(\"Male Travelers\", fontsize=16)\nx=df_train.CabinBool[df_train.Sex=='male'].value_counts()\nlabel=[\"Cabin NA\", \"Cabin Available\"]\nplt.pie([x[0],x[1]], labels=label, autopct='%1.1f%%')\n\nplt.subplot(1,2,2)\nplt.title(\"Female Travelers\", fontsize=16)\nx=df_train.CabinBool[df_train.Sex=='female'].value_counts()\nlabel=[\"Cabin NA\", \"Cabin Available\"]\nplt.pie([x[0],x[1]], labels=label, autopct='%1.1f%%')\nplt.show()","a77f0658":"plt.figure(figsize=(8,4))\nsns.boxplot('Age','CabinBool', data=df_train_test, orient='h')\nplt.show()","9678f9fd":"#BoxPlot Age Vs CabinBool\ntemp_df=df_train_test[df_train_test.Age.isna()==False]\nplt.figure(figsize=(8,4))\nsns.distplot(temp_df.Age[temp_df.CabinBool==0], label=\"Cabin NA\")\nsns.distplot(temp_df.Age[temp_df.CabinBool==1], label=\"Cabin Avail\")\nplt.xlim(0,100)\nplt.show()","0bc53d79":"plt.figure(figsize=(8,4))\nsns.boxplot('Fare','CabinBool', data=df_train_test, orient='h')\nplt.show()","b974eb59":"print(\"Fare where Cabin Bool is available:\")\nprint(\"Mean : \", round(df_train_test[df_train_test.CabinBool==1].Fare.mean(),2))\nprint(\"Median : \", df_train_test[df_train_test.CabinBool==1].Fare.median())\n\nprint(\"Fare where Cabin Bool is not available:\")\nprint(\"Mean : \", round(df_train_test[df_train_test.CabinBool==0].Fare.mean(),2))\nprint(\"Median : \", df_train_test[df_train_test.CabinBool==0].Fare.median())","310ab732":"#Count plot SibSp Vs Survival\nplt.figure(figsize=(10,4))\nplt.subplot(1,2,1)\nplt.title(\"SibSp Vs Survival\", fontsize=16)\nsns.countplot(df_train.SibSp, hue=df_train.Survived)\n\n#Count plot Parch Vs Survival\nplt.subplot(1,2,2)\nplt.title(\"Parch Vs Survival\", fontsize=16)\nsns.countplot(df_train.Parch, hue=df_train.Survived)\nplt.show()","460a9d44":"# New feature SibSpBool: SibSpBool=1 if traveling with sibling\/spouse, else SibSpBool=0 \ndf_train[\"SibSpBool\"]=0\ndf_train_test[\"SibSpBool\"]=0\ndf_train.SibSpBool[df_train.SibSp!=0]=1\ndf_train_test.SibSpBool[df_train_test.SibSp!=0]=1\n# New feature ParchBool: ParchBool=1 if traveling with Parent\/Child, else SibSpBool=0\ndf_train[\"ParchBool\"]=0\ndf_train_test[\"ParchBool\"]=0\ndf_train.ParchBool[df_train.Parch!=0]=1\ndf_train_test.ParchBool[df_train_test.Parch!=0]=1","6209ef94":"#Count plot SibSpBool Vs Survival\nplt.figure(figsize=(10,4))\nplt.subplot(1,2,1)\nplt.title(\"SibSpBool Vs Survival\", fontsize=16)\nsns.countplot(df_train.SibSpBool, hue=df_train.Survived)\n\n#Count plot ParchBool Vs Survival\nplt.subplot(1,2,2)\nplt.title(\"ParchBool Vs Survival\", fontsize=16)\nsns.countplot(df_train.ParchBool, hue=df_train.Survived)\nplt.show()","2cb0e564":"# New Feature FamilySize: sum of Parch and SibSp\ndf_train[\"FamilySize\"]=df_train.Parch+df_train.SibSp\ndf_train_test[\"FamilySize\"]=df_train_test.Parch+df_train_test.SibSp\n\n#New Feature FamBool: 1 if FamilySize>0, 0 if FamilySize=0\ndf_train[\"FamBool\"]=0\ndf_train_test[\"FamBool\"]=0\ndf_train.FamBool[df_train.FamilySize!=0]=1\ndf_train_test.FamBool[df_train_test.FamilySize!=0]=1","8b1bc7c2":"#Count plot FamilySize and FamBool Vs Survival \nplt.figure(figsize=(10,4))\nplt.subplot(1,2,1)\nplt.title(\"FamilySize Vs Survival\", fontsize=16)\nsns.countplot(df_train.FamilySize, hue=df_train.Survived)\n\nplt.subplot(1,2,2)\nplt.title(\"FamBool Vs Survival\", fontsize=16)\nsns.countplot(df_train.FamBool, hue=df_train.Survived)\nplt.show()","5b43a4c3":"#Pie Chart Traveling with Family Vs Survival\nplt.figure(figsize=(8,4))\nplt.subplot(1,2,1)\nplt.title(\"Traveling with Family\", fontsize=16)\nx=df_train.Survived[df_train.FamBool==1].value_counts()\nlabel=[\"Survived\", \"Deceased\"]\nplt.pie([x[1],x[0]], labels=label, autopct='%1.1f%%')\n#plt.show()\n\nplt.subplot(1,2,2)\nplt.title(\"Traveling Solo\", fontsize=16)\nx=df_train.Survived[df_train.FamBool==0].value_counts()\nlabel=[\"Survived\", \"Deceased\"]\nplt.pie([x[1],x[0]], labels=label, autopct='%1.1f%%')\nplt.show()","105edf5c":"plt.figure(figsize=(10,4))\nplt.subplot(1,2,1)\nplt.title(\"SipSpBool Vs Political Class\", fontsize=16)\nsns.countplot('SibSpBool', hue='Pclass', data=df_train_test)\n\nplt.subplot(1,2,2)\nplt.title(\"ParchBool Vs Political Class\", fontsize=16)\nsns.countplot('ParchBool', hue='Pclass', data=df_train_test)\nplt.show()","a523d8b9":"print(\"Percentage of Passengers Traveling with Sibling\/Spouse\")\nprint(f\"Upper Class: {round(df_train_test[df_train_test.Pclass==1].SibSpBool.mean()*100,2)}%\")\nprint(f\"Middle Class: {round(df_train_test[df_train_test.Pclass==2].SibSpBool.mean()*100,2)}%\")\nprint(f\"Lower Class: {round(df_train_test[df_train_test.Pclass==3].SibSpBool.mean()*100,2)}%\")\n\nprint(\"Percentage of Passengers Traveling with Parents\/Children\")\nprint(f\"Upper Class: {round(df_train_test[df_train_test.Pclass==1].ParchBool.mean()*100,2)}%\")\nprint(f\"Middle Class: {round(df_train_test[df_train_test.Pclass==2].ParchBool.mean()*100,2)}%\")\nprint(f\"Lower Class: {round(df_train_test[df_train_test.Pclass==3].ParchBool.mean()*100,2)}%\")","2159eb0c":"# Countplot Family vs Political Class\nplt.figure(figsize=(10,4))\nplt.subplot(1,2,1)\nplt.title(\"FamBool Vs Political Class\", fontsize=16)\nsns.countplot('FamBool', hue='Pclass', data=df_train_test)\n\nplt.subplot(1,2,2)\nplt.title(\"FamilySize Vs Political Class\", fontsize=16)\nsns.countplot('FamilySize', hue='Pclass', data=df_train_test)\nplt.show()","3d791795":"print(\"Percentage of Passengers Traveling with Family\")\nprint(f\"Upper Class: {round(df_train_test[df_train_test.Pclass==1].FamBool.mean()*100,2)}%\")\nprint(f\"Middle Class: {round(df_train_test[df_train_test.Pclass==2].FamBool.mean()*100,2)}%\")\nprint(f\"Lower Class: {round(df_train_test[df_train_test.Pclass==3].FamBool.mean()*100,2)}%\")","553a2324":"#Pie Chart Traveling with Family Vs Political Class\nplt.figure(figsize=(12,4))\n\nplt.subplot(1,3,1)\nplt.title(\"Upper Class\", fontsize=16)\nx=df_train.FamBool[df_train.Pclass==1].value_counts()\nlabel=[\"Traveling Solo\", \"With Family\"]\nplt.pie([x[0],x[1]], labels=label, autopct='%1.1f%%')\n\nplt.subplot(1,3,2)\nplt.title(\"Middle Class\", fontsize=16)\nx=df_train.FamBool[df_train.Pclass==2].value_counts()\nlabel=[\"Traveling Solo\", \"With Family\"]\nplt.pie([x[0],x[1]], labels=label, autopct='%1.1f%%')\n\nplt.subplot(1,3,3)\nplt.title(\"Lower Class\", fontsize=16)\nx=df_train.FamBool[df_train.Pclass==3].value_counts()\nlabel=[\"Traveling Solo\", \"With Family\"]\nplt.pie([x[0],x[1]], labels=label, autopct='%1.1f%%')\n\nplt.show()","1392e350":"#Pie Chart Traveling with Family Vs Gender\nplt.figure(figsize=(8,4))\nplt.subplot(1,2,1)\nplt.title(\"Male Travelers\", fontsize=16)\nx=df_train.FamBool[df_train.Sex=='male'].value_counts()\nlabel=[\"Solo Traveler\", \"With Family\"]\nplt.pie([x[0],x[1]], labels=label, autopct='%1.1f%%')\n\nplt.subplot(1,2,2)\nplt.title(\"Female Travelers\", fontsize=16)\nx=df_train.FamBool[df_train.Sex=='female'].value_counts()\nlabel=[\"Solo Traveler\", \"With Family\"]\nplt.pie([x[0],x[1]], labels=label, autopct='%1.1f%%')\nplt.show()","4acf74e1":"#BoxPlot Age Vs Fare\ntemp_df=df_train_test[df_train_test.Age.isna()==False]\nplt.figure(figsize=(8,4))\nsns.distplot(temp_df.Age[temp_df.FamBool==0], label=\"Solo\")\nsns.distplot(temp_df.Age[temp_df.FamBool==1], label=\"Family\")\nplt.xlim(0,100)\nplt.show()","ef53869f":"#BoxPlot FamBool Vs Fare\nplt.figure(figsize=(8,4))\nsns.boxplot('Fare','FamBool', data=df_train_test, orient='h')\nplt.show()","37ff6dfe":"print(\"Fare where FamBool is available:\")\nprint(\"Mean : \", round(df_train_test[df_train_test.FamBool==1].Fare.mean(),2))\nprint(\"Median : \", df_train_test[df_train_test.FamBool==1].Fare.median())\n\nprint(\"Fare where FamBool is not available:\")\nprint(\"Mean : \", round(df_train_test[df_train_test.FamBool==0].Fare.mean(),2))\nprint(\"Median : \", df_train_test[df_train_test.FamBool==0].Fare.median())","fcaf361a":"print(\"Unique Embarked in Train : \",df_train.Embarked.unique())\nprint(\"Unique Embarked in Train : \",df_test.Embarked.unique())","a8a982cd":"print(\"Number of Null values for Embarked in Train data : \",df_train.Embarked.isna().sum())","9fa8cea0":"df_train_test.Embarked.fillna(df_train_test.Embarked.mode()[0], inplace=True)\ndf_train_test.isna().sum()","41d91b2a":"plt.figure(figsize=(6,4))\nplt.title(\"Port of Embarkation Vs Survival\", fontsize=16)\nsns.countplot('Embarked', hue='Survived', data=df_train)\nplt.show()","6e13c766":"sns.boxplot(df_train.Age, y=df_train.Sex)","af108b29":"sns.boxplot(df_train.Survived, df_train.Age, hue=df_train.Sex)","8f49b5e1":"sns.boxplot(df_train.Sex,df_train.Survived)","c10f396a":"sns.countplot(df_train.Sex, hue=df_train.Survived)","8358f43e":"### CabinBool Vs Political Class","429e56e8":"Observation:\n* Majority of the solo travellers are of the age group 15-45. Able-bodied working age population.\n* Family travelers is more evenly distributed including children, young and the elderly.","c1cdce68":"It is observed that passengers with family-members is more likely to survive.","8a998726":"### Age vs FamBool","18f4d92f":"<<<<<<< * High Fare where Cabin data is not available to be examined *>>>>>>>>\n    ","f7d5c3fd":"Observation: \n* Passengers with cabin data available have paid considerably more that passenger with cabin data not available. \n* This strengthens the assumption that cabin data is available if passenger is traveling in a cabin and not because of inadequacy in data collection.\n* A large number of outliers are present in where cabin bool is not available, further scrutiny is required.\n* Due to the effect of outliers, mean of the Fares have moved towards the higher side, it is safe to use median value of fares. ","94159246":"For performing EDA not involving survival and Feature Engineering, it is better to combine train data without the 'Survived' column and test data.","45b78db6":"Observation:\n* Passengers with cabin data available have more chance of survival","1a26396f":"Passengers embarked on Titanic from three ports \n* S: Southampton, United Kingdom\n* C: Cherbourg, France\n* Q: Queenstown, Ireland","73e4772f":"* Parch : Number of Parents\/Children on board.\n* SibSp : Number of Siblings\/Spouse(s?) on board.","0d7b90e1":"### Join train and test data","000b81e8":"## Is it the Lone wolf or the Wolf Pack that survives?","6407bdd5":"# Exploratory Data Analysis","1a23f15d":"Observation:\n* Around 80% of records in test data and around 35% of records in test data does not have value for Cabin.\n* This might be due to the following reasons: \n<br>(a) indequate data collection\n<br>(b) Cabin number was not assigned to all passengers, maybe the passengers who travelled in lower classes(dormitories) did not have have cabin. \n* If (a) is the reason, we can drop the column as most of the records are null.\n* If (b) is the reason, presence of value for 'Cabin' column may have an influence on chance of survival.\n\n* Age is not avalable for around 20% records in train data and 10% records in test data we will fill the null values with the mean age.\n\n* Embarked is not availabe for few records in train, which will be filled with the mode of the column.\n\n* Fare is not available for few records in test data, which will be filled with mean. ","03000802":"### Cabin bool Vs Survival","a9295ebb":"Observation: \n* Passengers with family have paid considerably than the solo travellers. \n* A large number of outliers are present in where FamBool is not available, further scrutiny is required.\n* Due to the effect of outliers, mean of the Fares have moved towards the higher side, it is safe to use median value of fares. ","baffd23a":"## Port of Embarkation Vs Survival","ee805d55":"### FamilyBool Vs Gender","f25ebd0f":"### CabinBool Vs Gender","ad846175":"### Null Values","fde02619":"# To Be Continued...","a1833e12":"Since the number of null values is very small, we will fill the NA value with mode of the data.","81934b21":"## Cabin","a2586518":"### FamilyBool Vs Fare","529a1452":"## Load Data","e3b91cd1":"Observation:\n* Cabin data is availability is highest for Upper Class, followed by middle class and is lowest for lower class.","5cb76516":"### Age Vs Cabin Bool","1e50cee7":"## Import Statements","843df723":"### CabinBool vs Fare"}}