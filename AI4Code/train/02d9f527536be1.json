{"cell_type":{"e1a8ad80":"code","f267602a":"code","028592c9":"code","8dcb358d":"code","61bff2a4":"code","4008c5a0":"code","6d4bdf44":"code","4f96e73f":"code","ab2a61e9":"code","2e8ebed7":"code","ebc96ae2":"code","a0d04e02":"code","df67639a":"code","0f42a0a1":"code","b14a9e1c":"code","4e556346":"code","13d1d949":"code","2ff247a4":"code","2e2cc871":"code","620a8389":"code","397d6fb7":"code","31640530":"code","6beca0f1":"code","64aaa407":"code","927d0c58":"code","017060bf":"code","b95e34e6":"code","47d2651c":"code","a3ab2b96":"code","965bf4b5":"code","2dca24b1":"code","9f1ef636":"code","59645230":"code","b35779e1":"code","819b2e08":"code","fab7bd37":"code","792bf0b6":"code","3e4c5cb4":"code","21cd7c16":"code","789c998c":"code","f7d6f8b9":"code","02f463e0":"code","f17d1cfc":"code","113fba8a":"code","a2ff8934":"code","6ae7f609":"code","fc4dd30c":"code","283c894a":"code","f0a2d037":"code","7374b178":"code","d6739555":"code","20f9ddc2":"code","d1c41417":"code","daa3c65e":"code","02483294":"code","1f4648f0":"code","a87a0bd7":"code","cca36350":"markdown","a4924aaf":"markdown","4a6689b2":"markdown","11f2005f":"markdown"},"source":{"e1a8ad80":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns # used for plot interactive graph.\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom pylab import rcParams\n# figure size in inches\n%matplotlib inline\nplt.style.use('seaborn-white')\n\n# machine learning\nfrom sklearn import datasets, linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.cluster import KMeans\nfrom sklearn import metrics #accuracy measure\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f267602a":"df = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')\ndf_reviews = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv')","028592c9":"df_reviews.shape","8dcb358d":"df.shape","61bff2a4":"df_reviews.head()","4008c5a0":"df.head()","6d4bdf44":"df_reviews.info()","4f96e73f":"df.info()","ab2a61e9":"df.isna().sum()","2e8ebed7":"df_reviews.isna().sum()","ebc96ae2":"#calculating the RATING based on mean value\ndf['Rating'].fillna((df['Rating'].mean()), inplace=True)","a0d04e02":"df.isna().sum()","df67639a":"#droping the rest of na values\ndf1 = df.dropna()","0f42a0a1":"df1.isna().sum()","b14a9e1c":"#final data shape\ndf1.shape","4e556346":"#check for the duplicated data based on the column APP name\ndf1[df1.duplicated(['App'])]","13d1d949":"df1[df1['App']==\"Quick PDF Scanner + OCR FREE\"]","2ff247a4":"df1.shape","2e2cc871":"df1.sort_values(by=['Reviews'], inplace=True)","620a8389":"df1.head()","397d6fb7":"#Drop the duplicates based on the app names\ndf2 = df1.drop_duplicates(keep='last',subset=['App'])","31640530":"df2.shape","6beca0f1":"df2.head()","64aaa407":"#Converting the Installs number into float value and copying in a different column\ndf2['Installs_num'] = df2['Installs'].apply(lambda x: float(x.split(\"+\")[0].replace(\",\",\"\")))","927d0c58":"#converting the price into float values\ndf2['Price_USD'] = df2['Price'].apply(lambda x: float(x.replace(\"$\",\"\")))","017060bf":"#Converting reviews count into int\ndf2['Reviews_count']= df1['Reviews'].apply(lambda x: int(x))","b95e34e6":"df2.head()","47d2651c":"len(df2[df2.Size == \"Varies with device\"])","a3ab2b96":"df2['Size'].replace('Varies with device',np.nan,inplace=True)","965bf4b5":"df2.head()","2dca24b1":"df2[\"Size\"] = (df2[\"Size\"].replace(r'[kM]+$', '', regex=True).astype(float) * df2[\"Size\"].str.extract(r'[\\d\\.]+([kM]+)', expand=False).fillna(1).replace([\"k\",\"M\"], [10**3, 10**6]).astype(int))","9f1ef636":"df2.head()","59645230":"df2[\"Android Ver\"].replace('Varies with device',np.nan,inplace=True)","b35779e1":"#finding out the minimum android version supported for the apps\nimport re\ndf2['min_android_version'] = df2[\"Android Ver\"].apply(lambda x: re.sub(\"[a-zA-Z]\",\"\", str(x)))","819b2e08":"df2.head()","fab7bd37":"df2['Rating'].describe()","792bf0b6":"df2.isna().sum().sort_values(ascending = False)","3e4c5cb4":"df2['Size'].fillna((df2['Size'].mean()), inplace=True)","21cd7c16":"#Our final data frame with all the extra values removed\ndf3 = df2.drop(['Reviews','Installs','Price','Android Ver'],axis='columns')","789c998c":"df3.head()","f7d6f8b9":"#Total Number of applications in each categories.\n\nfig = plt.figure(figsize=(20,10)) \ndf3.groupby('Category').count()[\"App\"].sort_values(ascending=True).plot(kind='barh',title='Number of apps\/Category', fontsize=15)\nplt.ylabel('Count') \n\n#how to display %age on secondary axis on bar plot","02f463e0":"#What is the average rating of the applications in each categories?\nfig = plt.figure(figsize=(16,8)) \ndf3.groupby('Category').mean().sort_values(by='Rating',ascending='False')['Rating'].plot(kind='barh',title='Average app rating', fontsize=10)\nplt.ylabel('Star Rating') \nplt.style.use('seaborn-white')","f17d1cfc":"#What is the average price of applications in each categories?\nfig = plt.figure(figsize=(16,8)) \ndf3.groupby('Category').mean().sort_values(by='Price_USD',ascending='False')['Price_USD'].plot(kind='barh',title='Price in USD', fontsize=10)\nplt.ylabel('App category') \nplt.xlabel('Average price - USD') ","113fba8a":"fig = plt.figure(figsize=(16,8)) \nlabels = df3['Category'].value_counts(sort = True).index\nsizes = df3['Category'].value_counts(sort = True)\nplt.pie(sizes,labels=labels,autopct='%1.1f%%', shadow=True)\nplt.title('Top categories',size = 20)\nplt.legend(labels, loc=\"best\")\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","a2ff8934":"df3.head()","6ae7f609":"#What are the applications and categories with, most number of reviews, highest rating, most revenue through installs, most number of installs?\n#df3[\"Reviews_count\"]==df3.Reviews_count.max()\nprint(\"Maximum number of reviews count is of : \"+ df3[df3['Reviews_count']==df3.Reviews_count.max()][\"App\"].iloc[0] + \" with a value of \" + str(df3.Reviews_count.max()))\nprint(\"Maximum Rating is of : \"+ df3[df3['Rating']==df3.Rating.max()][\"App\"].iloc[0] + \" with a value of \" + str(df3.Rating.max()))\nprint(\"Maximum number of installs is of : \"+ df3[df3['Installs_num']==df3.Installs_num.max()][\"App\"].iloc[0] + \" with a value of \" + str(df3.Installs_num.max()))\nprint(\"Maximum price is of : \"+ df3[df3['Price_USD']==df3.Price_USD.max()][\"App\"].iloc[0] + \" with a value of \" + str(df3.Price_USD.max()))\n","fc4dd30c":"#What is the average size of the applications?\nprint(\"Mean size \" + str(df3[\"Size\"].mean()\/(1024*1024)) + \" Mb\") #converting in MB\nprint(\"Heaviest app size \" + str(df3[\"Size\"].max()\/(1024*1024)) + \" Mb\") #converting in MB\nprint(\"Smalles app size \" + str(df3[\"Size\"].min()\/(1024*1024)) + \" Mb\") #converting in MB","283c894a":"#What are the categories with, most number of reviews, highest rating, most revenue through installs, most number of installs?\nfig = plt.figure(figsize=(16,8)) \ndf3.groupby('Category').sum().sort_values(by='Installs_num',ascending='False')['Installs_num'].plot(kind='bar',title='Installs', fontsize=10)\nplt.ylabel('Number of Install') ","f0a2d037":"\nfig = plt.figure(figsize=(16,8)) \nlabels = df3['Content Rating'].value_counts(sort = True).index\nsizes = df3['Content Rating'].value_counts(sort = True)\nplt.pie(sizes,labels=labels,autopct='%1.1f%%', shadow=True)\nplt.title('Content Rating',size = 20)\nplt.show()","7374b178":"#added in version 16\ndf10= df3.copy()","d6739555":"#added in version 16\ndef is_free(price):\n    if price > 0:\n        return 1\n    else:\n        return 0","20f9ddc2":"df3.isna().sum()","d1c41417":"df10[\"is_free\"] = df10[\"Price_USD\"].apply(lambda x: int(is_free(x))) ","daa3c65e":"df10.head()","02483294":"#How many percent of applications are free and how many are paid?\n#to check how many apps are free\nfig = plt.figure(figsize=(16,8)) \nlabels = ['0 = Free','1 = Paid']\nsizes = df10['is_free'].value_counts(sort = True)\nplt.pie(sizes,labels=labels,autopct='%1.1f%%', shadow=True)\nplt.title('Free vs Paid apps',size = 20)\nplt.legend()\nplt.show()","1f4648f0":"fig = plt.figure(figsize=(16,8)) \nplt.hist(df3['Rating'],edgecolor = 'black', log=True)\nplt.title(\"Rating distribution\")\nplt.xlabel('Rating')\nplt.tight_layout()\nplt.legend()","a87a0bd7":"fig = plt.figure(figsize=(16,8)) \nplt.hist(df3['Price_USD'],edgecolor = 'black', log=True)\nplt.title(\"Price of apps\")\nplt.xlabel('Price')\nplt.tight_layout()\nplt.legend()","cca36350":"# Observations\n\n* Finance apps are the costliest one\n* Games are the most installed category of the apps.\n* Average rating is irrelevant to the category\n* Around 19.7% of the apps are related to family\n* 81.8% of the apps belong to everyone category","a4924aaf":"# Step 1 - Understanding the data","4a6689b2":"# Step 3 - Data analysis","11f2005f":"# Step 2 - Cleaning the data"}}