{"cell_type":{"c374b9a8":"code","9c453dff":"code","3b7cdb6e":"code","e39a7c3c":"code","d92e35b5":"code","b48281e3":"code","76294fbe":"code","702a1857":"code","da34d8ac":"code","972730f4":"code","3c0b353d":"code","f22894d3":"code","ebc024f2":"code","7b4cc05a":"code","ac364891":"code","ff6a0ad9":"code","35111c05":"code","5337ecb9":"code","a2ab1e5c":"code","6fb85848":"code","e5221efb":"code","e7160a43":"code","d2265f17":"code","ad2d1368":"code","c3cb59f8":"code","72e34665":"code","0838746b":"code","98f53938":"code","7b40f732":"code","49c1bca0":"code","5e80f229":"code","4f873524":"code","373624fd":"code","eb41f4a7":"code","491810a0":"code","02ecbf9c":"code","f0d3c2a1":"code","a386e773":"code","e4f0d9a4":"code","57aa90f8":"code","eb5218d3":"code","fde1fef0":"markdown","b4348249":"markdown","8dcc8ff8":"markdown","cb230a68":"markdown","9d112ea9":"markdown"},"source":{"c374b9a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9c453dff":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams['figure.figsize']=(8,6)","3b7cdb6e":"df=pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')\ndf.head()","e39a7c3c":"df.shape","d92e35b5":"df.info()","b48281e3":"df.isnull().sum()","76294fbe":"df['veil-type'].value_counts()","702a1857":"df['class'].value_counts()","da34d8ac":"sns.countplot(x='cap-shape',hue='class',data=df)","972730f4":"#separating the independent and dependent data\nX=df.drop(['class','veil-type'],axis=1)\ny=df['class']","3c0b353d":"fig,axis=plt.subplots(5,4,figsize=(25,25))\nj=0\nk=0\nfor i in X.columns.tolist():\n    sns.countplot(x=i,hue='class',data=df,ax=axis[j,k])\n    if k==3:\n        j+=1\n        k=0\n    else:\n        k+=1\n    if j==5:\n        break","f22894d3":"#as all the columns are of object data type, converting the values into numerical values\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nfor i in X.columns.tolist():\n    X[i]=le.fit_transform(X[i])","ebc024f2":"X.head()","7b4cc05a":"#checking corelation between the instances\nplt.figure(figsize=(15,15))\nsns.heatmap(X.corr(),annot=True,fmt='.2f',cmap='Blues')","ac364891":"#checking all the instances that are highly corelated\nvalue=X.corr()\nvariables=set()\nfor i in range(len(value)):\n    for j in range(i+1,len(value)):\n        if value.iloc[i,j]>0.7:\n            print(value.iloc[i,j])\n            print(X.columns.tolist()[i],X.columns.tolist()[j])\n            variables.add(X.columns.tolist()[i])\nprint(variables)","ff6a0ad9":"#removing the highly corelated column\nX.drop('gill-attachment',axis=1,inplace=True)\nX.head()","35111c05":"X.shape","5337ecb9":"from sklearn.ensemble import ExtraTreesClassifier\netc=ExtraTreesClassifier(n_estimators=100,random_state=42)\netc.fit(X,y)\nfeature_values=pd.Series(etc.feature_importances_)\nfeature_values.index=X.columns\nfeature_values","a2ab1e5c":"plt.figure(figsize=(12,10))\nfeature_values.sort_values(ascending=False).plot(kind='barh')","6fb85848":"from sklearn.preprocessing import StandardScaler\nss=StandardScaler()\nX_norm=ss.fit_transform(X)","e5221efb":"X_norm[0:5]","e7160a43":"#separating train and test dataset\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X_norm,y,test_size=0.15,random_state=42)\nX_train.shape,y_train.shape,X_test.shape,y_test.shape","d2265f17":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier(n_estimators=250)\nrfc.fit(X_train,y_train)\nyhat=rfc.predict(X_test)","ad2d1368":"from sklearn.metrics import confusion_matrix,classification_report,f1_score,accuracy_score,precision_score,recall_score","c3cb59f8":"print('Accuracy: ',accuracy_score(y_test,yhat))","72e34665":"sns.heatmap(confusion_matrix(y_test,yhat),annot=True,fmt='.0f')","0838746b":"print(classification_report(y_test,yhat))","98f53938":"print(f1_score(y_test,yhat,average='weighted'))","7b40f732":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression(solver='sag',random_state=42)\nlr.fit(X_train,y_train)\nyhat=lr.predict(X_test)","49c1bca0":"accuracy_score(y_test,yhat)","5e80f229":"sns.heatmap(confusion_matrix(y_test,yhat),annot=True,fmt='.0f')","4f873524":"print(classification_report(y_test,yhat))","373624fd":"f1_score(y_test,yhat,average='weighted')","eb41f4a7":"from sklearn.svm import SVC\nsc=SVC()\nsc.fit(X_train,y_train)\nyhat=sc.predict(X_test)","491810a0":"accuracy_score(y_test,yhat)","02ecbf9c":"sns.heatmap(confusion_matrix(y_test,yhat),annot=True,fmt='.0f')","f0d3c2a1":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train,y_train)\nyhat=knn.predict(X_test)","a386e773":"accuracy_score(y_test,yhat)","e4f0d9a4":"sns.heatmap(confusion_matrix(y_test,yhat),annot=True,fmt='.0f')","57aa90f8":"precision_score(y_test,yhat,average='weighted')","eb5218d3":"recall_score(y_test,yhat,average='weighted')","fde1fef0":"**Support Vector Classifier**","b4348249":"**Random Forest Classifier**","8dcc8ff8":"**Logistic Regression**","cb230a68":"# Applying different Models to predict the accuracy","9d112ea9":"**As 'Veil-type' column consists only constant values, removing the column from the dataset**"}}