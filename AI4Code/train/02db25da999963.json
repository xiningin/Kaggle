{"cell_type":{"6275ad3f":"code","61035c04":"code","59ccaa41":"code","cd2fb9ed":"code","28c493e6":"code","bc84f3c0":"code","bbf25b0d":"code","f366a886":"code","867e9a14":"code","2f602b88":"code","6e4816cd":"code","a6734fc5":"code","9c36d04a":"code","02b7a49d":"code","2fb926d8":"code","1bf9d6e4":"code","6fc02423":"code","e9a14a52":"code","7fecd450":"code","72d1bfc1":"code","012becd4":"code","b6f362e3":"markdown","48c4f75e":"markdown","05501012":"markdown","a90ae132":"markdown","9f6f89e2":"markdown","647137fb":"markdown","538208d9":"markdown","cc230aaa":"markdown","f482c204":"markdown","ba1975b3":"markdown","a056c703":"markdown","24176ad3":"markdown","de74067e":"markdown","92dd437a":"markdown","f1ef7435":"markdown","3f47116f":"markdown","0ad0752c":"markdown","fb651075":"markdown","a994166e":"markdown"},"source":{"6275ad3f":"import numpy as np\nimport pandas as pd\n\nimport random\nfrom tqdm import tqdm\nfrom pathlib import Path\n\nimport cv2\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom skmultilearn.model_selection import iterative_train_test_split\n\nimport itertools\nfrom scipy.sparse import lil_matrix, coo_matrix\nfrom collections import defaultdict, Counter\n\nfrom sklearn.metrics import fbeta_score\nfrom albumentations import (OneOf, Compose, HorizontalFlip, RandomCrop, \n                            RandomBrightness, RandomContrast, \n                            ShiftScaleRotate, IAAAdditiveGaussianNoise)\n\nimport keras\nimport keras.backend as K\nfrom keras.models import Model\nfrom keras.optimizers import Adam\nfrom keras.callbacks import Callback, ReduceLROnPlateau, ModelCheckpoint\nfrom keras.layers import Input, GlobalAveragePooling2D, Dense, Dropout, Concatenate, Lambda, Layer","61035c04":"DATA_ROOT = Path('..\/input\/imet-2019-fgvc6\/')\n\nlabel_df = pd.read_csv(DATA_ROOT\/'labels.csv')\nprint(f\"Number of attributes = {len(label_df)}\")\n\nculture_df = label_df[label_df['attribute_name'].str.startswith('culture')]\nprint(f\"Number of cultures = {len(culture_df)}\")\n\ntag_df = label_df[label_df['attribute_name'].str.startswith('tag')]\nprint(f\"Number of tags = {len(tag_df)}\")","59ccaa41":"label_df.sample(n=25).sort_values('attribute_id')","cd2fb9ed":"data_df = pd.read_csv(DATA_ROOT\/'train.csv')\ndata_df['attribute_ids'] = data_df['attribute_ids'].str.split().map(lambda x_list: [int(x) for x in x_list])","28c493e6":"sample_df = data_df.sample(n=10)\n\nfor _, row in sample_df.iterrows():\n    img = cv2.imread(str(DATA_ROOT \/ 'train' \/ (row['id']+'.png')))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n    labels = '\\n'.join([label_df.loc[label]['attribute_name'] for label in row['attribute_ids']])\n\n    _, axs = plt.subplots(1, 2, figsize=(12, 4))\n        \n    axs[0].imshow(img)\n    axs[0].title.set_text(row['id'])\n    \n    axs[1].text(0, 0.5, labels, fontsize=12, ha='left', va='center')\n    axs[1].axis('off')\n    \n    plt.show()","bc84f3c0":"# train_df, valid_df = train_test_split(data_df, test_size=0.2, random_state=42)","bbf25b0d":"# attributes = data_df['attribute_ids'].tolist()\n\n# row = list(itertools.chain(*[[i]*len(attributes[i]) for i in range(len(data_df))]))\n# col = list(itertools.chain(*attributes))\n\n# y = coo_matrix(([1]*len(row), (row, col)), shape=(len(data_df), len(label_df))).tolil()\n\n# train_df, _, valid_df, _ = iterative_train_test_split(data_df.values, y, test_size=0.2)\n# train_df = pd.DataFrame(train_df, columns=['id', 'attribute_ids'])\n# valid_df = pd.DataFrame(valid_df, columns=['id', 'attribute_ids'])","f366a886":"def make_folds(n_folds: int) -> pd.DataFrame:\n    df = pd.read_csv(DATA_ROOT \/ 'train.csv')\n    cls_counts = Counter(cls for classes in df['attribute_ids'].str.split() for cls in classes)\n    fold_cls_counts = defaultdict(int)\n    folds = [-1] * len(df)\n    for item in tqdm(df.sample(frac=1, random_state=42).itertuples(), total=len(df)):\n        cls = min(item.attribute_ids.split(), key=lambda cls: cls_counts[cls])\n        fold_counts = [(f, fold_cls_counts[f, cls]) for f in range(n_folds)]\n        min_count = min([count for _, count in fold_counts])\n        random.seed(item.Index)\n        fold = random.choice([f for f, count in fold_counts if count == min_count])\n        folds[item.Index] = fold\n        for cls in item.attribute_ids.split():\n            fold_cls_counts[fold, cls] += 1\n    df['fold'] = folds\n    return df\n\nfold_df = make_folds(5)\nfold_df['attribute_ids'] = fold_df['attribute_ids'].str.split().map(lambda x_list: [int(x) for x in x_list])\n\ntrain_df = fold_df[fold_df['fold'] != 0].reset_index(drop=True)\nvalid_df = fold_df[fold_df['fold'] == 0].reset_index(drop=True)","867e9a14":"train_attributes = list(itertools.chain(*train_df['attribute_ids'].tolist()))\nprint(\"Total train images: \", len(train_df))\nprint(\"Total train attributes: \", len(train_attributes))\n\nplt.figure(figsize=(12, 3))\nvalues, counts = np.unique(train_attributes, return_counts=True)\nplt.bar(values, counts)\nplt.show()\n\nvalid_attributes = list(itertools.chain(*valid_df['attribute_ids'].tolist()))\nprint(\"Total validation images: \", len(valid_df))\nprint(\"Total validation attributes: \", len(valid_attributes))\n\nplt.figure(figsize=(12, 3))\nvalues, counts = np.unique(valid_attributes, return_counts=True)\nplt.bar(values, counts)\nplt.show()","2f602b88":"!pip install -U git+https:\/\/github.com\/qubvel\/efficientnet","6e4816cd":"from efficientnet.keras import EfficientNetB3, preprocess_input","a6734fc5":"EPOCHS = 8\nBATCH_SIZE = 32\n\nINPUT_SHAPE = (288, 288, 3)\nNUM_CLASS = len(label_df)","9c36d04a":"def augment(p=1.0):\n    return Compose([\n        HorizontalFlip(p=0.5),\n#         OneOf([\n#             RandomBrightness(0.1, p=1.0),\n#             RandomContrast(0.1, p=1.0),\n#         ], p=0.3),\n        ShiftScaleRotate(shift_limit=0.1, scale_limit=0.0, rotate_limit=15, p=0.3),\n#         IAAAdditiveGaussianNoise(p=0.3),      \n        RandomCrop(INPUT_SHAPE[0], INPUT_SHAPE[1])\n    ], p=p)","02b7a49d":"class DataGenerator(keras.utils.Sequence):\n    def __init__(self, df, batch_size, shuffle=True):\n        self.df = df        \n        self.indices = np.arange(len(self.df))\n        \n        self.batch_size = batch_size        \n        self.shuffle = shuffle\n        \n        if self.shuffle:\n            np.random.shuffle(self.indices)\n\n        self.path = DATA_ROOT \/ 'train'\n\n    def __len__(self):\n        return int(np.ceil(len(self.df)\/self.batch_size))\n\n    def __getitem__(self, idx):\n        batch_indices = self.indices[idx*self.batch_size: (idx+1)*self.batch_size]        \n        \n        batch_images = np.zeros((len(batch_indices), *INPUT_SHAPE))\n        batch_labels = np.zeros((len(batch_indices), NUM_CLASS))\n        \n        for i in range(len(batch_indices)):\n            row = self.df.iloc[batch_indices[i]]\n            \n            path = self.path \/ (row['id']+'.png')\n            img = cv2.cvtColor(cv2.imread(str(path)), cv2.COLOR_BGR2RGB)\n        \n            img = augment()(image=img)['image']\n            batch_images[i] = preprocess_input(img)\n            \n            for label in row['attribute_ids']:\n                batch_labels[i][label] = 1\n                \n        batch_images = np.array(batch_images, np.float32)\n        return batch_images, batch_labels\n    \n    def on_epoch_end(self):\n        if self.shuffle:\n            np.random.shuffle(self.indices)","2fb926d8":"train_generator = DataGenerator(train_df, BATCH_SIZE)\nvalid_generator = DataGenerator(valid_df, BATCH_SIZE, shuffle=False)","1bf9d6e4":"def create_model(input_shape):\n    base_model = EfficientNetB3(weights='imagenet', include_top=False, input_shape=input_shape)\n    input_tensor = base_model.input\n    \n    x = GlobalAveragePooling2D()(base_model.output)\n    x = Dense(512, activation='relu',name='final_features')(x)\n    x = Dropout(0.5)(x)\n    output = Dense(NUM_CLASS, activation='sigmoid')(x)\n\n    model = Model(input_tensor, output)\n    return model\n\nmodel = create_model(INPUT_SHAPE)\nmodel.summary()","6fc02423":"train_f2_hist = []\nvalid_f2_hist = []\n\ndef generate_labels(df):\n    labels = np.zeros((len(df), NUM_CLASS))\n\n    for i, row in df.iterrows():\n        for label in row['attribute_ids']:\n            labels[i][label] = 1\n            \n    return labels\n\ndef _make_mask(argsorted, top_n: int):\n    mask = np.zeros_like(argsorted, dtype=np.uint8)\n    col_indices = argsorted[:, -top_n:].reshape(-1)\n    row_indices = [i \/\/ top_n for i in range(len(col_indices))]\n    mask[row_indices, col_indices] = 1\n    return mask\n\ndef binarize_prediction(predictions, threshold: float, min_labels=1, max_labels=10):\n    assert predictions.shape[1] == NUM_CLASS\n    argsorted = predictions.argsort(axis=1)\n    max_mask = _make_mask(argsorted, max_labels)\n    min_mask = _make_mask(argsorted, min_labels)\n    prob_mask = predictions > threshold\n    return (max_mask & prob_mask) | min_mask\n\nclass F2Evaluation(Callback):\n    def __init__(self, interval=1):\n        super(Callback, self).__init__()\n\n        self.interval = interval        \n        self.train_generator = DataGenerator(train_df, BATCH_SIZE, shuffle=False)\n        \n        self.train_y = generate_labels(train_df)\n        self.valid_y = generate_labels(valid_df)        \n        \n    def predict(self, generator, y_true):\n        predictions = self.model.predict_generator(generator, verbose=1)\n        \n        best_threshold = 0.0\n        best_score = 0.0\n        \n        for threshold in np.arange(0.05, 0.55, 0.05):\n            #y_pred = np.where(predictions > threshold, 1, 0)\n            y_pred = binarize_prediction(predictions, threshold)\n            \n            f2_score = fbeta_score(y_true, y_pred, beta=2, average='samples')\n            \n            if f2_score > best_score:\n                best_score = f2_score\n                best_threshold = threshold\n            \n        return best_score, best_threshold        \n\n    def on_epoch_end(self, epoch, logs={}):\n        if epoch % self.interval != 0:\n            return\n        \n        train_f2_score, train_threshold = self.predict(self.train_generator, self.train_y)\n        valid_f2_score, valid_threshold = self.predict(valid_generator, self.valid_y)\n        \n        train_f2_hist.append(train_f2_score)             \n        print(\"train f2 = %.4f (threshold = %.2f)\" % (train_f2_score, train_threshold))        \n\n        valid_f2_hist.append(valid_f2_score)             \n        print(\"valid f2 = %.4f (threshold = %.2f)\" % (valid_f2_score, valid_threshold))\n\n        if valid_f2_score >= max(valid_f2_hist):\n            print('save checkpoint: ', valid_f2_score)\n            self.model.save_weights('model_bestf2.h5')\n\nf2_metric = F2Evaluation(interval=1)","e9a14a52":"model.compile(loss='binary_crossentropy', optimizer=Adam(3e-4))\n\nhist = model.fit_generator(train_generator, \n                           validation_data=valid_generator, \n                           epochs=EPOCHS, verbose=1,\n                           callbacks=[f2_metric], \n                           use_multiprocessing=True, workers=2)","7fecd450":"plt.plot(range(1, EPOCHS+1), hist.history['loss'], label='train_loss')\nplt.plot(range(1, EPOCHS+1), hist.history['val_loss'], label='valid_loss')\nplt.legend()\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.show()\n\nplt.plot(range(1, EPOCHS+1), train_f2_hist, label='train_f2')\nplt.plot(range(1, EPOCHS+1), valid_f2_hist, label='valid_f2')\nplt.legend()\nplt.ylabel('f2')\nplt.xlabel('epoch')\nplt.show()","72d1bfc1":"model.load_weights('model_bestf2.h5')\npredictions = np.zeros((len(valid_df), NUM_CLASS))\n\nfor _ in range(4):\n    predictions += model.predict_generator(valid_generator, verbose=1)\npredictions \/= 4\n\ny_true = generate_labels(valid_df)\ny_pred = binarize_prediction(predictions, 0.1)\n\nvalid_f2_score = fbeta_score(y_true, y_pred, beta=2, average='samples')\nprint(\"valid tta f2 = %.4f (threshold = 0.10)\" % valid_f2_score)","012becd4":"sample_df = valid_df.sample(n=10)\n\nfor i, row in sample_df.iterrows():\n    img = cv2.imread(str(DATA_ROOT \/ 'train' \/ (row['id']+'.png')))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    \n    plt.title(row['id'])\n    plt.imshow(img)\n    plt.show()\n\n    true_labels = ', '.join([label_df.loc[label]['attribute_name'] \n                             for label in row['attribute_ids']])\n    \n    pred_labels = ', '.join([label_df.loc[label]['attribute_name'] \n                             for label in np.where(y_pred[i]==1)[0]])\n    \n    print(\"True labels = \" + true_labels)\n    print(\"Predicted labels = \" + pred_labels)","b6f362e3":"# Model","48c4f75e":"\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19 iMet Collection 2019 \u0e19\u0e35\u0e49 \u0e17\u0e32\u0e07 ThAIKeras \u0e01\u0e47\u0e44\u0e14\u0e49\u0e40\u0e02\u0e49\u0e32\u0e23\u0e48\u0e27\u0e21 \u0e41\u0e25\u0e30\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e04\u0e27\u0e49\u0e32\u0e40\u0e2b\u0e23\u0e35\u0e22\u0e0d\u0e40\u0e07\u0e34\u0e19\u0e21\u0e32\u0e04\u0e23\u0e2d\u0e07 \u0e43\u0e19\u0e40\u0e27\u0e25\u0e32\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e44\u0e14\u0e49\u0e43\u0e0a\u0e49[\u0e42\u0e04\u0e49\u0e14](https:\/\/www.kaggle.com\/lopuhin\/imet-2019-submission)\u0e0a\u0e31\u0e49\u0e19\u0e14\u0e35\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13 [Konstantin Lopuhin](https:\/\/www.kaggle.com\/lopuhin) \u0e40\u0e1b\u0e47\u0e19\u0e08\u0e38\u0e14\u0e15\u0e31\u0e49\u0e07\u0e15\u0e49\u0e19 \u0e0b\u0e36\u0e48\u0e07\u0e15\u0e2d\u0e19\u0e19\u0e35\u0e49\u0e04\u0e38\u0e13 Lopuhin \u0e01\u0e47\u0e44\u0e14\u0e49\u0e40\u0e1b\u0e47\u0e19 grandmaster \u0e41\u0e25\u0e49\u0e27 \u0e15\u0e49\u0e2d\u0e07\u0e02\u0e2d\u0e02\u0e2d\u0e1a\u0e04\u0e38\u0e13\u0e41\u0e25\u0e30\u0e41\u0e2a\u0e14\u0e07\u0e04\u0e27\u0e32\u0e21\u0e22\u0e34\u0e19\u0e14\u0e35\u0e44\u0e27\u0e49 \u0e13 \u0e17\u0e35\u0e48\u0e19\u0e35\u0e49\u0e14\u0e49\u0e27\u0e22\u0e04\u0e23\u0e31\u0e1a\n\n\u0e17\u0e48\u0e32\u0e19\u0e1c\u0e39\u0e49\u0e2d\u0e48\u0e32\u0e19\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e19\u0e33 notebook \u0e19\u0e35\u0e49 \u0e44\u0e1b\u0e23\u0e31\u0e19\u0e40\u0e25\u0e48\u0e19\u0e2b\u0e23\u0e37\u0e2d\u0e41\u0e01\u0e49\u0e44\u0e02\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21\u0e44\u0e14\u0e49 \u0e2b\u0e32\u0e01\u0e1e\u0e1a\u0e02\u0e49\u0e2d\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14\u0e2b\u0e23\u0e37\u0e2d\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e2a\u0e07\u0e2a\u0e31\u0e22\u0e15\u0e23\u0e07\u0e44\u0e2b\u0e19 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e1a\u0e2d\u0e01\u0e21\u0e32\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07\u0e19\u0e35\u0e49 \u0e2b\u0e23\u0e37\u0e2d\u0e17\u0e35\u0e48[\u0e40\u0e27\u0e47\u0e1a\u0e1a\u0e2d\u0e23\u0e4c\u0e14](https:\/\/thaikeras.com\/community\/)\u0e02\u0e2d\u0e07 ThAIKeras \u0e01\u0e47\u0e44\u0e14\u0e49\u0e04\u0e23\u0e31\u0e1a","05501012":"\u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e\u0e17\u0e35\u0e48\u0e2a\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19 input \u0e43\u0e2b\u0e49\u0e01\u0e31\u0e1a\u0e42\u0e21\u0e40\u0e14\u0e25\u0e08\u0e30\u0e21\u0e35\u0e01\u0e32\u0e23\u0e17\u0e33 image augmentation \u0e01\u0e48\u0e2d\u0e19 \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07 image augmentation \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e28\u0e36\u0e01\u0e29\u0e32\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21\u0e44\u0e14\u0e49\u0e08\u0e32\u0e01\u0e2d\u0e35\u0e01 [workshop \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32](https:\/\/www.kaggle.com\/ratthachat\/workshop-augmentation-image-ai-for-eyes-2)","a90ae132":"\u0e44\u0e1f\u0e25\u0e4c labels.csv \u0e08\u0e30\u0e1a\u0e2d\u0e01\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e17\u0e35\u0e48\u0e21\u0e35\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e17\u0e35\u0e48\u0e2d\u0e48\u0e32\u0e19\u0e44\u0e1f\u0e25\u0e4c\u0e21\u0e32\u0e41\u0e25\u0e49\u0e27 \u0e40\u0e23\u0e32\u0e25\u0e2d\u0e07\u0e14\u0e39\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e01\u0e31\u0e19\u0e04\u0e23\u0e31\u0e1a","9f6f89e2":"# Data","647137fb":"\u0e14\u0e49\u0e27\u0e22\u0e04\u0e27\u0e32\u0e21\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e1e\u0e34\u0e1e\u0e34\u0e18\u0e20\u0e31\u0e13\u0e11\u0e4c\u0e02\u0e19\u0e32\u0e14\u0e43\u0e2b\u0e0d\u0e48 \u0e08\u0e36\u0e07\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e21\u0e35\u0e02\u0e2d\u0e07\u0e2a\u0e30\u0e2a\u0e21\u0e2d\u0e22\u0e39\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e08\u0e33\u0e19\u0e27\u0e19\u0e21\u0e32\u0e01 \u0e1b\u0e23\u0e30\u0e21\u0e32\u0e13 1.5 \u0e25\u0e49\u0e32\u0e19\u0e0a\u0e34\u0e49\u0e19 \u0e43\u0e19\u0e08\u0e33\u0e19\u0e27\u0e19\u0e19\u0e35\u0e49\u0e21\u0e35\u0e2d\u0e22\u0e39\u0e48\u0e2a\u0e2d\u0e07\u0e41\u0e2a\u0e19\u0e0a\u0e34\u0e49\u0e19\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e17\u0e33\u0e01\u0e32\u0e23\u0e16\u0e48\u0e32\u0e22\u0e20\u0e32\u0e1e \u0e41\u0e25\u0e30\u0e08\u0e31\u0e14\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22\u0e41\u0e25\u0e49\u0e27 \u0e43\u0e19\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e02\u0e2d\u0e07\u0e07\u0e32\u0e19\u0e28\u0e34\u0e25\u0e1b\u0e30 \u0e16\u0e49\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49 AI \u0e40\u0e02\u0e49\u0e32\u0e21\u0e32\u0e0a\u0e48\u0e27\u0e22 \u0e01\u0e47\u0e08\u0e30\u0e25\u0e14\u0e40\u0e27\u0e25\u0e32\u0e41\u0e25\u0e30\u0e04\u0e27\u0e32\u0e21\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e21\u0e19\u0e38\u0e29\u0e22\u0e4c\u0e25\u0e07\u0e44\u0e14\u0e49 \u0e08\u0e36\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e17\u0e35\u0e48\u0e21\u0e32\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19 [iMet Collection 2019](https:\/\/www.kaggle.com\/c\/imet-2019-fgvc6\/) \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e19\u0e36\u0e07\u0e02\u0e2d\u0e07 [FGVC6 workshop](https:\/\/sites.google.com\/view\/fgvc6\/) \u0e43\u0e19\u0e07\u0e32\u0e19 [CVPR conference](http:\/\/cvpr2019.thecvf.com\/) \u0e1b\u0e35\u0e19\u0e35\u0e49\n\n<img src=\"https:\/\/i.imgur.com\/KtKv0Nr.png\" alt=\"logo\">\n<center>(\u0e42\u0e25\u0e42\u0e01\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19 iMet Collection 2019)<\/center>","538208d9":"\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e17\u0e23\u0e19\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27 \u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e32\u0e25\u0e2d\u0e07\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e42\u0e21\u0e40\u0e14\u0e25\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49 \u0e42\u0e14\u0e22\u0e21\u0e35\u0e01\u0e32\u0e23\u0e17\u0e33 tta (test-time augmentation) \u0e04\u0e37\u0e2d\u0e17\u0e33\u0e01\u0e32\u0e23\u0e17\u0e33\u0e19\u0e32\u0e22\u0e2b\u0e25\u0e32\u0e22\u0e04\u0e23\u0e31\u0e49\u0e07 \u0e14\u0e49\u0e27\u0e22 augmentation \u0e17\u0e35\u0e48\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e01\u0e31\u0e19 \u0e41\u0e25\u0e49\u0e27\u0e40\u0e2d\u0e32\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e21\u0e32\u0e40\u0e09\u0e25\u0e35\u0e48\u0e22 \u0e27\u0e34\u0e18\u0e35\u0e19\u0e35\u0e49\u0e08\u0e30\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e2a\u0e39\u0e07\u0e02\u0e36\u0e49\u0e19","cc230aaa":"\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e2d\u0e48\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 \u0e41\u0e25\u0e30\u0e41\u0e2a\u0e14\u0e07\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 \u0e0b\u0e36\u0e48\u0e07\u0e08\u0e30\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e14\u0e49\u0e27\u0e22\u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e\u0e02\u0e2d\u0e07\u0e07\u0e32\u0e19\u0e28\u0e34\u0e25\u0e1b\u0e4c \u0e01\u0e31\u0e1a\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e02\u0e2d\u0e07\u0e07\u0e32\u0e19\u0e28\u0e34\u0e25\u0e1b\u0e4c\u0e0a\u0e34\u0e49\u0e19\u0e19\u0e31\u0e49\u0e19\u0e46","f482c204":"\u0e2a\u0e48\u0e27\u0e19 input \u0e17\u0e35\u0e48\u0e1b\u0e49\u0e2d\u0e19\u0e43\u0e2b\u0e49\u0e01\u0e31\u0e1a\u0e42\u0e21\u0e40\u0e14\u0e25 \u0e08\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e14\u0e49\u0e27\u0e22 generator \u0e0b\u0e36\u0e48\u0e07\u0e43\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e49\u0e17\u0e33\u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49\u0e04\u0e25\u0e32\u0e2a\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19 extension \u0e02\u0e2d\u0e07 `keras.utils.Sequence` \u0e41\u0e25\u0e30\u0e21\u0e35\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `__getitem__` \u0e40\u0e1b\u0e47\u0e19\u0e2b\u0e25\u0e31\u0e01\u0e17\u0e35\u0e48\u0e08\u0e30\u0e2a\u0e48\u0e07 minibatch \u0e01\u0e25\u0e31\u0e1a\u0e21\u0e32 \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 generator \u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2d\u0e48\u0e32\u0e19\u0e44\u0e14\u0e49[\u0e17\u0e35\u0e48\u0e19\u0e35\u0e48](https:\/\/stanford.edu\/~shervine\/blog\/keras-how-to-generate-data-on-the-fly)\u0e04\u0e23\u0e31\u0e1a","ba1975b3":"<hr>\n\n\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e19\u0e35\u0e49\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e22\u0e32\u0e01\u0e2d\u0e22\u0e39\u0e48\u0e1e\u0e2d\u0e2a\u0e21\u0e04\u0e27\u0e23 \u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e32\u0e22\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e43\u0e2b\u0e49\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e15\u0e23\u0e07\u0e01\u0e31\u0e1a\u0e17\u0e35\u0e48\u0e1c\u0e39\u0e49\u0e40\u0e0a\u0e35\u0e48\u0e22\u0e27\u0e0a\u0e32\u0e0d\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e21\u0e32 \u0e17\u0e31\u0e49\u0e07\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e2b\u0e25\u0e32\u0e22\u0e2a\u0e32\u0e40\u0e2b\u0e15\u0e38\u0e14\u0e49\u0e27\u0e22\u0e01\u0e31\u0e19 \u0e2d\u0e32\u0e17\u0e34\u0e40\u0e0a\u0e48\u0e19\n* \u0e1a\u0e32\u0e07\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e04\u0e48\u0e2d\u0e19\u0e02\u0e49\u0e32\u0e07\u0e08\u0e30\u0e40\u0e09\u0e1e\u0e32\u0e30\u0e40\u0e08\u0e32\u0e30\u0e08\u0e07 \u0e41\u0e25\u0e30\u0e21\u0e35\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e43\u0e19 training data \u0e19\u0e49\u0e2d\u0e22\n* \u0e2a\u0e48\u0e27\u0e19 culture \u0e43\u0e19\u0e1a\u0e32\u0e07\u0e20\u0e32\u0e1e\u0e2d\u0e32\u0e08\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e14\u0e39\u0e2d\u0e2d\u0e01\u0e44\u0e14\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e0a\u0e31\u0e14\u0e40\u0e08\u0e19 \u0e41\u0e25\u0e30\u0e2a\u0e48\u0e27\u0e19 tag \u0e43\u0e19\u0e1a\u0e32\u0e07\u0e20\u0e32\u0e1e\u0e15\u0e49\u0e2d\u0e07\u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e40\u0e25\u0e47\u0e01\u0e46 \u0e19\u0e49\u0e2d\u0e22\u0e46 \u0e43\u0e2b\u0e49\u0e14\u0e35 \u0e08\u0e36\u0e07\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e19\u0e31\u0e49\u0e19\n* \u0e1a\u0e32\u0e07\u0e04\u0e23\u0e31\u0e49\u0e07\u0e04\u0e33\u0e15\u0e2d\u0e1a\u0e17\u0e35\u0e48\u0e42\u0e21\u0e40\u0e14\u0e25\u0e17\u0e33\u0e19\u0e32\u0e22\u0e21\u0e32\u0e01\u0e47\u0e16\u0e37\u0e2d\u0e27\u0e48\u0e32\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e41\u0e25\u0e49\u0e27 \u0e41\u0e15\u0e48\u0e43\u0e19 label \u0e08\u0e23\u0e34\u0e07\u0e15\u0e01\u0e2b\u0e25\u0e48\u0e19\u0e44\u0e1b (\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19\u0e04\u0e23\u0e31\u0e49\u0e07\u0e19\u0e35\u0e49\u0e27\u0e31\u0e14\u0e1c\u0e25\u0e14\u0e49\u0e27\u0e22 F2 score \u0e17\u0e35\u0e48\u0e40\u0e19\u0e49\u0e19 recall \u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32 \u0e16\u0e49\u0e32\u0e42\u0e21\u0e40\u0e14\u0e25\u0e15\u0e2d\u0e1a\u0e40\u0e01\u0e34\u0e19\u0e21\u0e32\u0e08\u0e30\u0e14\u0e35\u0e01\u0e27\u0e48\u0e32\u0e15\u0e2d\u0e1a\u0e02\u0e32\u0e14\u0e44\u0e1b\u0e04\u0e23\u0e31\u0e1a)\n\n\u0e42\u0e04\u0e49\u0e14\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e32\u0e18\u0e34\u0e15\u0e40\u0e1a\u0e37\u0e49\u0e2d\u0e07\u0e15\u0e49\u0e19 \u0e22\u0e31\u0e07\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e1b\u0e23\u0e31\u0e1a\u0e1b\u0e23\u0e38\u0e07\u0e43\u0e2b\u0e49\u0e04\u0e27\u0e32\u0e21\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e2a\u0e39\u0e07\u0e02\u0e36\u0e49\u0e19\u0e44\u0e14\u0e49\u0e2d\u0e35\u0e01 \u0e17\u0e48\u0e32\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e19\u0e43\u0e08\u0e2d\u0e32\u0e08\u0e28\u0e36\u0e01\u0e29\u0e32\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21\u0e08\u0e32\u0e01\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e02\u0e2d\u0e07\u0e1c\u0e39\u0e49\u0e40\u0e02\u0e49\u0e32\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e2d\u0e31\u0e19\u0e14\u0e31\u0e1a\u0e2a\u0e39\u0e07 \u0e43\u0e19\u0e2b\u0e19\u0e49\u0e32 [discussion](https:\/\/www.kaggle.com\/c\/imet-2019-fgvc6\/discussion) \u0e2b\u0e23\u0e37\u0e2d\u0e08\u0e32\u0e01[\u0e40\u0e1b\u0e40\u0e1b\u0e2d\u0e23\u0e4c\u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07](https:\/\/paperswithcode.com\/task\/fine-grained-image-classification)","a056c703":"\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e16\u0e36\u0e07\u0e15\u0e2d\u0e19\u0e19\u0e35\u0e49\u0e01\u0e47\u0e08\u0e30\u0e40\u0e23\u0e34\u0e48\u0e21\u0e40\u0e17\u0e23\u0e19\u0e42\u0e21\u0e40\u0e14\u0e25\u0e44\u0e14\u0e49 \u0e42\u0e14\u0e22\u0e43\u0e2b\u0e49 loss \u0e40\u0e1b\u0e47\u0e19 `binary_crossentropy` \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e01\u0e31\u0e1a\u0e1b\u0e31\u0e0d\u0e2b\u0e32 multi-label classification \u0e2a\u0e48\u0e27\u0e19 optimizer \u0e01\u0e47\u0e43\u0e0a\u0e49\u0e40\u0e1b\u0e47\u0e19 [Adam](https:\/\/arxiv.org\/abs\/1412.6980) \u0e1b\u0e01\u0e15\u0e34\u0e04\u0e23\u0e31\u0e1a","24176ad3":"\u0e43\u0e19\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19\u0e04\u0e23\u0e31\u0e49\u0e07\u0e19\u0e35\u0e49 \u0e27\u0e31\u0e14\u0e1c\u0e25\u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 [F2 score](https:\/\/en.wikipedia.org\/wiki\/F1_score#Definition) \u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e04\u0e25\u0e32\u0e2a `F2Evaluation` \u0e40\u0e1b\u0e47\u0e19 callback \u0e02\u0e2d\u0e07 Keras \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e01\u0e32\u0e23\u0e13\u0e4c\u0e04\u0e48\u0e32 F2 \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e2a\u0e34\u0e49\u0e19\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19\u0e17\u0e38\u0e01\u0e23\u0e2d\u0e1a\n\n\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 output \u0e08\u0e32\u0e01\u0e42\u0e21\u0e40\u0e14\u0e25\u0e40\u0e1b\u0e47\u0e19 probability \u0e02\u0e2d\u0e07\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e08\u0e36\u0e07\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e33\u0e2b\u0e19\u0e14 threshold \u0e44\u0e27\u0e49\u0e27\u0e48\u0e32\u0e04\u0e48\u0e32 probability \u0e2a\u0e39\u0e07\u0e40\u0e01\u0e34\u0e19\u0e01\u0e27\u0e48\u0e32\u0e40\u0e17\u0e48\u0e32\u0e44\u0e2b\u0e23\u0e48 \u0e08\u0e36\u0e07\u0e08\u0e30\u0e15\u0e2d\u0e1a\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e19\u0e35\u0e49\u0e2d\u0e2d\u0e01\u0e21\u0e32 \u0e42\u0e14\u0e22\u0e44\u0e14\u0e49\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e04\u0e48\u0e32 threshold \u0e15\u0e31\u0e49\u0e07\u0e41\u0e15\u0e48 0.05 \u0e16\u0e36\u0e07 0.5 \u0e14\u0e39\u0e27\u0e48\u0e32\u0e04\u0e48\u0e32 threshold \u0e44\u0e2b\u0e19 \u0e08\u0e30\u0e43\u0e2b\u0e49\u0e04\u0e27\u0e32\u0e21\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14 \u0e41\u0e25\u0e30\u0e1e\u0e1a\u0e27\u0e48\u0e32\u0e04\u0e48\u0e32 threshold \u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 0.1 \u0e14\u0e35\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e04\u0e23\u0e31\u0e1a\n\n\u0e19\u0e2d\u0e01\u0e08\u0e32\u0e01\u0e19\u0e35\u0e49 \u0e08\u0e30\u0e43\u0e2a\u0e48\u0e40\u0e07\u0e37\u0e48\u0e2d\u0e19\u0e44\u0e02\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21\u0e27\u0e48\u0e32\u0e44\u0e21\u0e48\u0e43\u0e2b\u0e49\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e40\u0e01\u0e34\u0e19 10 \u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48 \u0e41\u0e25\u0e30\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e19\u0e49\u0e2d\u0e22\u0e43\u0e2b\u0e49\u0e15\u0e2d\u0e1a\u0e2d\u0e2d\u0e01\u0e21\u0e32 1 \u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e40\u0e2a\u0e21\u0e2d \u0e42\u0e14\u0e22\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e04\u0e33\u0e15\u0e2d\u0e1a\u0e08\u0e32\u0e01 output \u0e02\u0e2d\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25 \u0e08\u0e30\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `binarize_prediction`","de74067e":"\u0e43\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e49 \u0e40\u0e23\u0e32\u0e08\u0e30\u0e19\u0e33\u0e42\u0e21\u0e40\u0e14\u0e25 [EfficientNet](https:\/\/arxiv.org\/abs\/1905.11946) \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19 SOTA \u0e17\u0e32\u0e07 computer vision \u0e43\u0e19\u0e1b\u0e31\u0e08\u0e08\u0e38\u0e1a\u0e31\u0e19\u0e21\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e42\u0e14\u0e22\u0e40\u0e23\u0e34\u0e48\u0e21\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23\u0e42\u0e2b\u0e25\u0e14\u0e42\u0e04\u0e49\u0e14 EfficientNet \u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e19 Keras \u0e21\u0e32\u0e04\u0e23\u0e31\u0e1a","92dd437a":"\u0e43\u0e19\u0e02\u0e31\u0e49\u0e19\u0e41\u0e23\u0e01 \u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e32\u0e14\u0e39\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e01\u0e31\u0e19\u0e01\u0e48\u0e2d\u0e19 \u0e42\u0e14\u0e22\u0e07\u0e32\u0e19\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e08\u0e33\u0e41\u0e19\u0e01\u0e27\u0e48\u0e32\u0e20\u0e32\u0e1e\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e08\u0e31\u0e14\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e43\u0e14\u0e44\u0e14\u0e49\u0e1a\u0e49\u0e32\u0e07 \u0e42\u0e14\u0e22\u0e41\u0e15\u0e48\u0e25\u0e30\u0e20\u0e32\u0e1e\u0e01\u0e47\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e08\u0e31\u0e14\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e2b\u0e25\u0e32\u0e22\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e44\u0e14\u0e49 \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e19\u0e35\u0e49\u0e08\u0e36\u0e07\u0e16\u0e37\u0e2d\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19 multi-label classification \u0e19\u0e2d\u0e01\u0e08\u0e32\u0e01\u0e19\u0e35\u0e49\u0e01\u0e47\u0e22\u0e31\u0e07\u0e19\u0e31\u0e1a\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19 fine-grained visual recognition \u0e19\u0e31\u0e48\u0e19\u0e04\u0e37\u0e2d\u0e43\u0e19\u0e01\u0e32\u0e23\u0e08\u0e30\u0e41\u0e22\u0e01\u0e41\u0e22\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e44\u0e14\u0e49\u0e19\u0e31\u0e49\u0e19 \u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e25\u0e07\u0e25\u0e36\u0e01\u0e44\u0e1b\u0e16\u0e36\u0e07\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e23\u0e39\u0e1b\u0e20\u0e32\u0e1e\u0e14\u0e49\u0e27\u0e22\n\n\u0e43\u0e19\u0e07\u0e32\u0e19\u0e19\u0e35\u0e49\u0e21\u0e35\u0e2d\u0e22\u0e39\u0e48\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 1103 \u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48 \u0e42\u0e14\u0e22\u0e41\u0e1a\u0e48\u0e07\u0e2d\u0e2d\u0e01\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e2d\u0e07\u0e2a\u0e48\u0e27\u0e19 \u0e04\u0e37\u0e2d culture \u0e0b\u0e36\u0e48\u0e07\u0e1a\u0e2d\u0e01\u0e27\u0e48\u0e32\u0e07\u0e32\u0e19\u0e28\u0e34\u0e25\u0e1b\u0e4c\u0e0a\u0e34\u0e49\u0e19\u0e19\u0e35\u0e49\u0e21\u0e32\u0e08\u0e32\u0e01\u0e27\u0e31\u0e12\u0e19\u0e18\u0e23\u0e23\u0e21\u0e44\u0e2b\u0e19 \u0e41\u0e25\u0e30 tag \u0e17\u0e35\u0e48\u0e1a\u0e2d\u0e01\u0e27\u0e48\u0e32\u0e07\u0e32\u0e19\u0e28\u0e34\u0e25\u0e1b\u0e4c\u0e0a\u0e34\u0e49\u0e19\u0e19\u0e35\u0e49\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e01\u0e31\u0e1a\u0e2d\u0e30\u0e44\u0e23\u0e1a\u0e49\u0e32\u0e07","f1ef7435":"\u0e2a\u0e27\u0e31\u0e2a\u0e14\u0e35\u0e04\u0e23\u0e31\u0e1a \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a workshop \u0e02\u0e2d\u0e07 [ThAIKeras](https:\/\/thaikeras.com\/) \u0e43\u0e19\u0e04\u0e23\u0e31\u0e49\u0e07\u0e19\u0e35\u0e49 \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49 deep learning \u0e21\u0e32\u0e08\u0e33\u0e41\u0e19\u0e01\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e02\u0e2d\u0e07\u0e07\u0e32\u0e19\u0e28\u0e34\u0e25\u0e1b\u0e30\u0e43\u0e19\u0e1e\u0e34\u0e1e\u0e34\u0e18\u0e20\u0e31\u0e13\u0e11\u0e4c [The Metropolitan Museum of Art](https:\/\/www.metmuseum.org\/) (\u0e2b\u0e23\u0e37\u0e2d the Met) \u0e42\u0e14\u0e22\u0e1e\u0e34\u0e1e\u0e34\u0e18\u0e20\u0e31\u0e13\u0e11\u0e4c\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e1e\u0e34\u0e1e\u0e34\u0e18\u0e20\u0e31\u0e13\u0e11\u0e4c\u0e28\u0e34\u0e25\u0e1b\u0e30\u0e17\u0e35\u0e48\u0e43\u0e2b\u0e0d\u0e48\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e43\u0e19\u0e2d\u0e40\u0e21\u0e23\u0e34\u0e01\u0e32 \u0e41\u0e25\u0e30\u0e21\u0e35\u0e1c\u0e39\u0e49\u0e40\u0e02\u0e49\u0e32\u0e0a\u0e21\u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e31\u0e19\u0e14\u0e31\u0e1a\u0e2a\u0e32\u0e21\u0e02\u0e2d\u0e07\u0e42\u0e25\u0e01 \u0e23\u0e2d\u0e07\u0e08\u0e32\u0e01 Mus\u00e9e du Louvre \u0e41\u0e25\u0e30 National Museum of China \u0e40\u0e25\u0e22\u0e04\u0e23\u0e31\u0e1a\n\n<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n\t<tr>        \n        <td style=\"width:31%\"><img src=\"https:\/\/i.imgur.com\/CjpiU69.png\" alt=\"the Met\"><\/td>\n        <td style=\"width:69%\"><img src=\"https:\/\/i.imgur.com\/P6sPZRk.png\" alt=\"Arts\"><\/td>\n    <\/tr>\n<\/table>\n\n<center>(the Met \u0e41\u0e25\u0e30\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e07\u0e32\u0e19\u0e28\u0e34\u0e25\u0e1b\u0e30\u0e2d\u0e31\u0e19\u0e40\u0e25\u0e37\u0e48\u0e2d\u0e07\u0e0a\u0e37\u0e48\u0e2d\u0e17\u0e35\u0e48\u0e08\u0e31\u0e14\u0e41\u0e2a\u0e14\u0e07\u0e20\u0e32\u0e22\u0e43\u0e19\u0e1e\u0e34\u0e1e\u0e34\u0e18\u0e20\u0e31\u0e13\u0e11\u0e4c)<\/center>","3f47116f":"\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e19\u0e35\u0e49 \u0e40\u0e23\u0e32\u0e21\u0e32\u0e14\u0e39\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e20\u0e32\u0e1e\u0e43\u0e19 validation set \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e08\u0e23\u0e34\u0e07\u0e40\u0e1b\u0e23\u0e35\u0e22\u0e1a\u0e40\u0e17\u0e35\u0e22\u0e1a\u0e01\u0e31\u0e1a\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e17\u0e35\u0e48\u0e42\u0e21\u0e40\u0e14\u0e25\u0e17\u0e33\u0e19\u0e32\u0e22\u0e44\u0e14\u0e49\u0e01\u0e31\u0e19\u0e04\u0e23\u0e31\u0e1a","0ad0752c":"\u0e43\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e19\u0e35\u0e49\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25 EfficientNet \u0e41\u0e1a\u0e1a B3 \u0e42\u0e14\u0e22\u0e21\u0e35 pretrained weight \u0e08\u0e32\u0e01 ImageNet \u0e41\u0e25\u0e30\u0e17\u0e33 global average pooling \u0e15\u0e48\u0e2d\u0e08\u0e32\u0e01 convolutional layer \u0e0a\u0e31\u0e49\u0e19\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22 \u0e41\u0e25\u0e49\u0e27\u0e40\u0e1e\u0e34\u0e48\u0e21 dense layer \u0e0a\u0e31\u0e49\u0e19\u0e19\u0e36\u0e07 \u0e01\u0e48\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e0a\u0e31\u0e49\u0e19 output \u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49 sigmoid activation \u0e08\u0e33\u0e19\u0e27\u0e19\u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a\u0e2b\u0e21\u0e27\u0e14\u0e2b\u0e21\u0e39\u0e48\u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e23\u0e31\u0e1a","fb651075":"\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a notebook \u0e19\u0e35\u0e49 \u0e08\u0e30\u0e41\u0e1a\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e2d\u0e07\u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48\u0e46 \u0e42\u0e14\u0e22\u0e43\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e41\u0e23\u0e01\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e41\u0e19\u0e30\u0e19\u0e33\u0e16\u0e36\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49 \u0e41\u0e25\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 \u0e01\u0e48\u0e2d\u0e19\u0e08\u0e30\u0e44\u0e1b\u0e16\u0e36\u0e07\u0e2a\u0e48\u0e27\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e2d\u0e07 \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e23\u0e32\u0e08\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e08\u0e33\u0e41\u0e19\u0e01\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e02\u0e2d\u0e07\u0e07\u0e32\u0e19\u0e28\u0e34\u0e25\u0e1b\u0e30\u0e01\u0e31\u0e19\u0e04\u0e23\u0e31\u0e1a\n\n<hr>","a994166e":"\u0e15\u0e48\u0e2d\u0e21\u0e32\u0e40\u0e23\u0e32\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e41\u0e1a\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 \u0e2d\u0e2d\u0e01\u0e40\u0e1b\u0e47\u0e19 training data \u0e41\u0e25\u0e30 validation data \u0e42\u0e14\u0e22\u0e04\u0e27\u0e23\u0e08\u0e30\u0e41\u0e1a\u0e48\u0e07\u0e43\u0e2b\u0e49\u0e01\u0e32\u0e23\u0e01\u0e23\u0e30\u0e08\u0e32\u0e22\u0e02\u0e2d\u0e07\u0e04\u0e25\u0e32\u0e2a\u0e21\u0e35\u0e04\u0e48\u0e32\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e46 \u0e01\u0e31\u0e19 \u0e43\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e31\u0e49\u0e07\u0e2a\u0e2d\u0e07\u0e0a\u0e38\u0e14 \u0e41\u0e25\u0e30\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e21\u0e35\u0e25\u0e31\u0e01\u0e29\u0e13\u0e30\u0e40\u0e1b\u0e47\u0e19 multi label \u0e01\u0e32\u0e23\u0e41\u0e1a\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e30\u0e43\u0e0a\u0e49\u0e27\u0e34\u0e18\u0e35 [iterative stratification](http:\/\/lpis.csd.auth.gr\/publications\/sechidis-ecmlpkdd-2011.pdf)\n\n\u0e41\u0e15\u0e48\u0e17\u0e27\u0e48\u0e32\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e41\u0e1a\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e41\u0e1a\u0e1a\u0e19\u0e35\u0e49 \u0e42\u0e14\u0e22\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e42\u0e04\u0e49\u0e14\u0e02\u0e2d\u0e07 [scikit-mulitlearn](http:\/\/scikit.ml\/) \u0e2b\u0e23\u0e37\u0e2d[\u0e42\u0e04\u0e49\u0e14\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13 Lopuhin](https:\/\/github.com\/lopuhin\/kaggle-imet-2019\/blob\/master\/imet\/make_folds.py) \u0e41\u0e25\u0e49\u0e27\u0e1e\u0e1a\u0e27\u0e48\u0e32\u0e01\u0e32\u0e23\u0e01\u0e23\u0e30\u0e08\u0e32\u0e22\u0e02\u0e2d\u0e07\u0e04\u0e25\u0e32\u0e2a\u0e43\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e31\u0e49\u0e07\u0e2a\u0e2d\u0e07\u0e0a\u0e38\u0e14\u0e44\u0e21\u0e48\u0e04\u0e48\u0e2d\u0e22\u0e08\u0e30\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e01\u0e31\u0e19 \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\u0e01\u0e47\u0e15\u0e32\u0e21 \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e19\u0e33\u0e44\u0e1b\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e04\u0e48\u0e32\u0e04\u0e27\u0e32\u0e21\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e08\u0e32\u0e01 validation data \u0e41\u0e25\u0e30\u0e04\u0e48\u0e32\u0e04\u0e27\u0e32\u0e21\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e02\u0e2d\u0e07 test data \u0e01\u0e47\u0e22\u0e31\u0e07\u0e2a\u0e2d\u0e14\u0e04\u0e25\u0e49\u0e2d\u0e07\u0e01\u0e31\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e04\u0e23\u0e31\u0e1a"}}