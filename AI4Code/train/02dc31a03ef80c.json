{"cell_type":{"08e5bd48":"code","0e585a9e":"code","e70edacf":"code","f252a086":"code","625e3230":"code","3524f7d5":"code","c1dbca61":"code","5064775a":"code","4680e8ed":"code","63994158":"code","5291df5e":"code","5d653a4e":"code","54dbc04b":"code","732a5a76":"code","e7532b31":"code","38faed4f":"code","de732610":"code","25408217":"code","a8fbf5f2":"code","eb8eb514":"code","5d3651bd":"code","8f2965aa":"code","52aeeb0e":"code","04b2c010":"code","a50c4808":"code","91a534f9":"code","cc26140f":"code","2c84784c":"code","ed93ccfa":"code","04bb587d":"code","cb846794":"code","a2c8b18b":"code","31f36030":"code","c81bdb45":"code","1c63e481":"code","014da9d3":"code","253a796a":"code","32104634":"code","aade680a":"code","249b13c3":"code","7d4c07b4":"code","a09cd139":"code","c359ddd1":"code","10efa5d0":"code","2aaba935":"code","ac6ea9c3":"code","4f1ef7c8":"code","c5c085bb":"code","ad62c61e":"code","2fd0aa8e":"code","adf36a00":"code","53d6cf84":"code","77488565":"code","5458c963":"code","5398ba07":"code","bcb88840":"code","4d7df9a4":"code","c5eafe44":"code","39428860":"code","0ae20e09":"code","536564c9":"code","5dbf4203":"code","c808b137":"code","dffe0455":"code","df3036bc":"code","cb163189":"code","53b19176":"code","adc4e4fb":"code","741739ec":"markdown","b280d128":"markdown","978901a3":"markdown","e0c71a09":"markdown","aeadfbe8":"markdown","0152c8bd":"markdown","91e5e8ea":"markdown","dd24950a":"markdown","717533f7":"markdown","f021354a":"markdown","f86cb9b4":"markdown","857b5d3d":"markdown","0154aa4c":"markdown"},"source":{"08e5bd48":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0e585a9e":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u043c\u0435\u0441\u0442\u043e \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0435 \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445\nfrom pandas.api.types import is_datetime64_any_dtype as is_datetime\nfrom pandas.api.types import is_categorical_dtype\n\ndef reduce_mem_usage(df, use_float16=False):\n    \"\"\"\n    Iterate through all the columns of a dataframe and modify the data type to reduce memory usage.        \n    \"\"\"\n    \n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print(\"Memory usage of dataframe is {:.2f} MB\".format(start_mem))\n    \n    for col in df.columns:\n        if is_datetime(df[col]) or is_categorical_dtype(df[col]):\n            continue\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if use_float16 and c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype(\"category\")\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print(\"Memory usage after optimization is: {:.2f} MB\".format(end_mem))\n    print(\"Decreased by {:.1f}%\".format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","e70edacf":"submission = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')\nsales_df = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\ncalendar_df = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\nprices_df = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')","f252a086":"submission = reduce_mem_usage(submission, True)\nsales_df = reduce_mem_usage(sales_df, True)\ncalendar_df = reduce_mem_usage(calendar_df, True)\nprices_df = reduce_mem_usage(prices_df, True)","625e3230":" f\"Shapes of df's: submission - {submission.shape}, sales - {sales_df.shape}, calendar - {calendar_df.shape}, prices - {prices_df.shape}\"","3524f7d5":"\"\"\"id - HOBBIES_2_004_WI_1 - \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u044d\u0442\u043e 4 \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 2-\u0439 \u043f\u043e\u0434\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \"\u0425\u043e\u0431\u0431\u0438\" \u0432 1-\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435 \u0448\u0442\u0430\u0442\u0430 WI\nvalidation - \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 id \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f - \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0441 1914 \u043f\u043e 1941 \u0434\u0435\u043d\u044c\nevaluation - \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 id \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f - \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0441 1942 \u043f\u043e 1969 \u0434\u0435\u043d\u044c\nF1 - F28 - 28 \u0434\u043d\u0435\u0439 \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430 \"\"\"\nsubmission.sample(3)","c1dbca61":"submission[submission.id.apply(lambda r: r.endswith('validation'))].shape, \\\nsubmission[submission.id.apply(lambda r: r.endswith('evaluation'))].shape, ","5064775a":"\"\"\"id - \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0432 submission \u0441 \u0442\u043e\u0439 \u043b\u0438\u0448\u044c \u0440\u0430\u0437\u043d\u0438\u0446\u0435\u0439, \u0447\u0442\u043e \u0442\u0443\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f\nitem_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u043e\u0432\u0430\u0440\u0430 (FOODS_3_629 - 629 \u0442\u043e\u0432\u0430\u0440 3-\u0439 \u043f\u043e\u0434\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0415\u0434\u0430)\ndept_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0434\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\ncat_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\nstore_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\nstate_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0448\u0442\u0430\u0442\u0430\nd_1..d_1913 - \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u043a\u0443\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0442\u043e\u0432\u0430\u0440\u0443 \u0437\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c\n\"\"\"\nsales_df.sample(3)","4680e8ed":"sales_df.describe()","63994158":"sales_df.info()","5291df5e":"\"\"\"date - \u0434\u0430\u0442\u0430\nwm_yr_wk - \u043d\u043e\u043c\u0435\u0440 \u043d\u0435\u0434\u0435\u043b\u0438\nweekday - \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438\nwday - \u043d\u043e\u043c\u0435\u0440 \u0434\u043d\u044f \u043d\u0435\u0434\u0435\u043b\u0438\nmonth - \u043d\u043e\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0446\u0430\nyear - \u0433\u043e\u0434\nd - \u043d\u043e\u043c\u0435\u0440 \u0434\u043d\u044f\nevent_name_1 - \u0438\u043c\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u043b\u043e \u0432 \u044d\u0442\u043e\u0442 \u0434\u0435\u043d\u044c\nevent_type_1 - \u0442\u0438\u043f \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u043b\u043e \u0432 \u044d\u0442\u043e\u0442 \u0434\u0435\u043d\u044c\nevent_name_2 - \u0438\u043c\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f 2, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u043b\u043e \u0432 \u044d\u0442\u043e\u0442 \u0434\u0435\u043d\u044c\nevent_type_2 - \u0442\u0438\u043f \u0441\u043e\u0431\u044b\u0442\u0438\u044f 2, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u043b\u043e \u0432 \u044d\u0442\u043e\u0442 \u0434\u0435\u043d\u044c\nsnap_CA, snap_TX, snap_WI - (SNAP - \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043c\u043e\u0449\u0438 \u0432 \u043f\u0438\u0442\u0430\u043d\u0438\u0438) - \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0431\u044b\u043b\u043e \u043b\u0438 \u0432 \u044d\u0442\u043e\u0442 \u0434\u0435\u043d\u044c \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u0448\u0442\u0430\u0442\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043e\u0431\u0438\u044f \u043f\u043e \u043f\u0438\u0442\u0430\u043d\u0438\u044e\n\"\"\"\ncalendar_df.head(5)","5d653a4e":"calendar_df.event_name_1.value_counts()","54dbc04b":"calendar_df.event_type_1.value_counts()","732a5a76":"calendar_df.event_name_2.value_counts()","e7532b31":"calendar_df.event_type_2.value_counts()","38faed4f":"calendar_df.describe()","de732610":"calendar_df.info()","25408217":"calendar_df.snap_CA.sum(), calendar_df.snap_TX.sum(), calendar_df.snap_WI.sum(), ","a8fbf5f2":"\"\"\"store_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 (\u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0448\u0442\u0430\u0442\u0430)\nitem_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430 (\u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \u0438 \u043f\u043e\u0434\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \u0442\u043e\u0432\u0430\u0440\u0430)\nwm_yr_wk - \u043d\u043e\u043c\u0435\u0440 \u043d\u0435\u0434\u0435\u043b\u0438\nsell_price - \u0446\u0435\u043d\u0430 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435 \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u043d\u0435\u0434\u0435\u043b\u0435\n\"\"\"\nprices_df.sample(5)","eb8eb514":"prices_df.describe()","5d3651bd":"prices_df.info()","8f2965aa":"sales_df.groupby('state_id').sum().T.plot(subplots=True, figsize=(16, 8))","52aeeb0e":"sales_df.groupby('store_id').sum().T.plot(subplots=True, figsize=(16, 10))","04b2c010":"sales_df.groupby('cat_id').sum().loc[:,'d_1':'d_51'].T.plot(subplots=False, figsize=(16, 10))","a50c4808":"sales_df['sum_for_peariod'] = sales_df.iloc[:, 6:].sum(axis=1)","91a534f9":"sales_df.groupby('store_id')['sum_for_peariod'].describe()","cc26140f":"# sales_df[]\nsales_df[sales_df['sum_for_peariod'] == sales_df['sum_for_peariod'].min()]","2c84784c":"sales_df[sales_df['sum_for_peariod'] == sales_df['sum_for_peariod'].max()]","ed93ccfa":"sales_df.groupby('cat_id').sum_for_peariod.sum()","04bb587d":"sales_df.groupby(['cat_id', 'store_id']).sum_for_peariod.agg([min, max, np.mean, np.std])","cb846794":"sales_df.sample(5)","a2c8b18b":"calendar_df.sample(3)","31f36030":"events_days = pd.concat([sales_df.loc[:, :'state_id'],\n                         sales_df[calendar_df[:1913][~calendar_df.event_type_1[:1913].isna()].d]],\n                       axis = 1)\nevents_days.sample(5)","c81bdb45":"not_events_days = pd.concat([sales_df.loc[:, :'state_id'],\n                         sales_df[calendar_df[:1913][(calendar_df.event_type_1[:1913].isna())&(calendar_df.event_type_2[:1913].isna())].d]],\n                       axis = 1)\nnot_events_days.sample(5)","1c63e481":"events_days.groupby(['state_id', 'cat_id']).sum().T.plot(subplots=False, figsize=(16, 8))","014da9d3":"not_events_days.groupby(['state_id', 'cat_id']).sum().T.plot(subplots=True, figsize=(16, 8))","253a796a":"events_days.groupby(['store_id', 'cat_id']).sum()","32104634":"not_events_days.groupby(['store_id', 'cat_id']).sum() #.T.plot(subplots=True, figsize=(16, 20))","aade680a":"calendar_df","249b13c3":"snapCA = pd.concat([not_events_days.loc[not_events_days.state_id=='CA', :'state_id'],\n                         not_events_days.loc[not_events_days.state_id=='CA', calendar_df[:1913][(calendar_df[:1913].snap_CA==1) & (calendar_df.event_type_1[:1913].isna())].d]],\n                       axis = 1)\nsnapTX = pd.concat([not_events_days.loc[not_events_days.state_id=='TX', :'state_id'],\n                         not_events_days.loc[not_events_days.state_id=='TX', calendar_df[:1913][(calendar_df[:1913].snap_TX==1)  & (calendar_df.event_type_1[:1913].isna())].d]],\n                       axis = 1)\nsnapWI = pd.concat([not_events_days.loc[not_events_days.state_id=='WI', :'state_id'],\n                         not_events_days.loc[not_events_days.state_id=='WI', calendar_df[:1913][(calendar_df[:1913].snap_WI==1)  & (calendar_df.event_type_1[:1913].isna())].d]],\n                       axis = 1)\nnot_snapCA = pd.concat([not_events_days.loc[not_events_days.state_id=='CA', :'state_id'],\n                         not_events_days.loc[not_events_days.state_id=='CA', calendar_df[:1913][(calendar_df[:1913].snap_CA==0)  & (calendar_df.event_type_1[:1913].isna())].d]],\n                       axis = 1)\nnot_snapTX = pd.concat([not_events_days.loc[not_events_days.state_id=='TX', :'state_id'],\n                         not_events_days.loc[not_events_days.state_id=='TX', calendar_df[:1913][(calendar_df[:1913].snap_TX==0)  & (calendar_df.event_type_1[:1913].isna())].d]],\n                       axis = 1)\nnot_snapWI = pd.concat([not_events_days.loc[not_events_days.state_id=='WI', :'state_id'],\n                         not_events_days.loc[not_events_days.state_id=='WI', calendar_df[:1913][(calendar_df[:1913].snap_WI==0)  & (calendar_df.event_type_1[:1913].isna())].d]],\n                       axis = 1)","7d4c07b4":"snapCA.groupby(['state_id', 'cat_id']).sum().T.plot(subplots=False, figsize=(16, 8))","a09cd139":"not_snapCA.groupby(['state_id', 'cat_id']).sum().T.plot(subplots=False, figsize=(16, 8))","c359ddd1":"prices_df.sample(5)","10efa5d0":"one_item = prices_df[prices_df.item_id == 'FOODS_3_133']\nfor id in one_item.store_id.unique():\n    df =  one_item[one_item.store_id==id]\n    df.plot.scatter('wm_yr_wk','sell_price', title=id)","2aaba935":"prices_df[(prices_df.item_id == 'HOBBIES_1_001') & (prices_df.store_id == 'TX_1')].wm_yr_wk.values","ac6ea9c3":"sales_df[(sales_df.item_id == 'HOBBIES_1_001') & (sales_df.store_id=='CA_1')].groupby('store_id').sum() #calendar_df.wm_yr_wk == 11353","4f1ef7c8":"sales_df\n","c5c085bb":"# \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c, \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043e\u0442 \u043b\u0438\u0448\u043d\u0438\u0445 \u0441\u0441\u044b\u043b\u043e\u043a \u0432 \u043f\u0430\u043c\u044f\u0442\u0438, \u0431\u0438\u0431\nfrom  datetime import datetime, timedelta\nimport gc\nimport lightgbm as lgb\n\n# \u0437\u0430\u0434\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\npd.options.display.max_columns = 50\n# \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043c\u0435\u043d \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0438\u0445 \u0442\u0438\u043f\u0430\u043c \u0434\u0430\u043d\u043d\u044b\u0445\nCAL_DTYPES={\"event_name_1\": \"category\", \"event_name_2\": \"category\", \"event_type_1\": \"category\", \n         \"event_type_2\": \"category\", \"weekday\": \"category\", 'wm_yr_wk': 'int16', \"wday\": \"int16\",\n        \"month\": \"int16\", \"year\": \"int16\", \"snap_CA\": \"float32\", 'snap_TX': 'float32', 'snap_WI': 'float32' }\nPRICE_DTYPES = {\"store_id\": \"category\", \"item_id\": \"category\", \"wm_yr_wk\": \"int16\",\"sell_price\":\"float32\" }\n\nFIRST_DAY = 800 # \u0415\u0441\u043b\u0438 \u0445\u043e\u0442\u0438\u0442\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0442\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 '1' -->  \u041d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0440\u0438\u0441\u043a, \u0447\u0442\u043e \u043d\u0435 \u0445\u0432\u0430\u0442\u0438\u0442 \u043f\u0430\u043c\u044f\u0442\u0438 !\nh = 28 # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435\nmax_lags = 366 # \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044f\u0441\u044c \u043d\u0430 \u043a\u0430\u043a\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u043d\u0435\u0439 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \ntr_last = 1913 # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0434\u0435\u043d\u044c \u0434\u043b\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438\nfday = datetime(2016,4, 25) # \u0434\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0434\u043d\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\nfday","ad62c61e":"# \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432 \u043e\u0434\u043d\u0443\ndef create_dt(is_train = True, nrows = None, first_day = 1200):\n    # \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0446\u0435\u043d. \u041a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043d\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u0430 \u0442\u0438\u043f\u0430 int\n    prices = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sell_prices.csv\", dtype = PRICE_DTYPES)\n    for col, col_dtype in PRICE_DTYPES.items():\n        if col_dtype == \"category\":\n            prices[col] = prices[col].cat.codes.astype(\"int16\")\n            prices[col] -= prices[col].min()\n    # \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c. \u041a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043d\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u0430 \u0442\u0438\u043f\u0430 int\n    cal = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/calendar.csv\", dtype = CAL_DTYPES)\n    cal[\"date\"] = pd.to_datetime(cal[\"date\"])\n    for col, col_dtype in CAL_DTYPES.items():\n        if col_dtype == \"category\":\n            cal[col] = cal[col].cat.codes.astype(\"int16\")\n            cal[col] -= cal[col].min()\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0434\u0435\u043d\u044c, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435\n    start_day = max(1 if is_train  else tr_last-max_lags, first_day)\n    numcols = [f\"d_{day}\" for day in range(start_day,tr_last+1)] # \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    catcols = ['id', 'item_id', 'dept_id','store_id', 'cat_id', 'state_id'] # \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    dtype = {numcol:\"float32\" for numcol in numcols} # \u0437\u0430\u0434\u0430\u0435\u043c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n    dtype.update({col: \"category\" for col in catcols if col != \"id\"})\n    # \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u043a\u0443\u043f\u043a\u0430\u0445\n    dt = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\", \n                     nrows = nrows, usecols = catcols + numcols, dtype = dtype)\n    # \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n    for col in catcols:\n        if col != \"id\":\n            dt[col] = dt[col].cat.codes.astype(\"int16\")\n            dt[col] -= dt[col].min()\n    # \u0435\u0441\u043b\u0438 \u0438\u043c\u0435\u0435\u043c \u0434\u0435\u043b\u043e \u0441 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u043c \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u043e \u0437\u0430\u0434\u0430\u0435\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u0434\u043d\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\n    if not is_train:\n        for day in range(tr_last+1, tr_last+ 2*h +1):\n            dt[f\"d_{day}\"] = np.nan\n    # \n    dt = pd.melt(dt,\n                  id_vars = catcols,\n                  value_vars = [col for col in dt.columns if col.startswith(\"d_\")],\n                  var_name = \"d\",\n                  value_name = \"sales\")\n    \n    dt = dt.merge(cal, on= \"d\", copy = False)\n    dt = dt.merge(prices, on = [\"store_id\", \"item_id\", \"wm_yr_wk\"], copy = False)\n    \n    return dt","2fd0aa8e":"def create_fea(dt):\n    lags = [7, 28]\n    lag_cols = [f\"lag_{lag}\" for lag in lags ]\n    for lag, lag_col in zip(lags, lag_cols):\n        dt[lag_col] = dt[[\"id\",\"sales\"]].groupby(\"id\")[\"sales\"].shift(lag)\n\n    wins = [7, 28]\n    for win in wins :\n        for lag,lag_col in zip(lags, lag_cols):\n            dt[f\"rmean_{lag}_{win}\"] = dt[[\"id\", lag_col]].groupby(\"id\")[lag_col].transform(lambda x : x.rolling(win).mean())\n\n    \n    \n    date_features = {\n        \n        \"wday\": \"weekday\",\n        \"week\": \"weekofyear\",\n        \"month\": \"month\",\n        \"quarter\": \"quarter\",\n        \"year\": \"year\",\n        \"mday\": \"day\",\n#         \"ime\": \"is_month_end\",\n#         \"ims\": \"is_month_start\",\n    }\n    \n#     dt.drop([\"d\", \"wm_yr_wk\", \"weekday\"], axis=1, inplace = True)\n    \n    for date_feat_name, date_feat_func in date_features.items():\n        if date_feat_name in dt.columns:\n            dt[date_feat_name] = dt[date_feat_name].astype(\"int16\")\n        else:\n            dt[date_feat_name] = getattr(dt[\"date\"].dt, date_feat_func).astype(\"int16\")\n","adf36a00":"%%time\n\ndf = create_dt(is_train=True, first_day= FIRST_DAY)\ndf.shape","53d6cf84":"df.head()","77488565":"df.info()","5458c963":"df = reduce_mem_usage(df)","5398ba07":"%%time\n\ncreate_fea(df)\ndf.shape","bcb88840":"df.info()","4d7df9a4":"df.head()","c5eafe44":"df.dropna(inplace = True)\ndf.shape","39428860":"df = reduce_mem_usage(df)","0ae20e09":"cat_feats = ['item_id', 'dept_id','store_id', 'cat_id', 'state_id'] + [\"event_name_1\", \"event_name_2\", \"event_type_1\", \"event_type_2\"]\nuseless_cols = [\"id\", \"date\", \"sales\",\"d\", \"wm_yr_wk\", \"weekday\"]\ntrain_cols = df.columns[~df.columns.isin(useless_cols)]\nX_train = df[train_cols]\ny_train = df[\"sales\"]","536564c9":"train_data = lgb.Dataset(X_train, label = y_train, categorical_feature=cat_feats, free_raw_data=False)\nfake_valid_inds = np.random.choice(len(X_train), 1000000)\nfake_valid_data = lgb.Dataset(X_train.iloc[fake_valid_inds], label = y_train.iloc[fake_valid_inds],categorical_feature=cat_feats,\n                             free_raw_data=False)   # This is just a subsample of the training set, not a real validation set !","5dbf4203":"params = {\n        \"objective\" : \"poisson\",\n        \"metric\" :\"rmse\",\n        \"force_row_wise\" : True,\n        \"learning_rate\" : 0.075,\n#         \"sub_feature\" : 0.8,\n        \"sub_row\" : 0.75,\n        \"bagging_freq\" : 1,\n        \"lambda_l2\" : 0.1,\n#         \"nthread\" : 4\n        \"metric\": [\"rmse\"],\n    'verbosity': 1,\n    'num_iterations' : 1500,\n#     'device' : 'gpu'\n}","c808b137":"%%time\n\nm_lgb = lgb.train(params, train_data, valid_sets = [fake_valid_data], verbose_eval=50) ","dffe0455":"%%time\n\nte = create_dt(False)\nte.shape","df3036bc":"df = reduce_mem_usage(df)","cb163189":"%%time\n\nfor i in range(0, 28):\n    day = fday + timedelta(days=i)\n    print(i, day)\n    tst = te[(te.date >= day - timedelta(days=max_lags)) & (te.date <= day)].copy()\n    create_fea(tst)\n    tst = tst.loc[tst.date == day , train_cols]\n    te.loc[te.date == day, \"sales\"] = 1.02*m_lgb.predict(tst) # magic multiplier by kyakovlev","53b19176":"%%time\n\nte_sub = te.loc[te.date >= fday, [\"id\", \"sales\"]].copy()\nte_sub.loc[te.date >= fday+ timedelta(days=h), \"id\"] = te_sub.loc[te.date >= fday+timedelta(days=h), \n                                                                      \"id\"].str.replace(\"validation$\", \"evaluation\")\nte_sub[\"F\"] = [f\"F{rank}\" for rank in te_sub.groupby(\"id\")[\"id\"].cumcount()+1]\nte_sub = te_sub.set_index([\"id\", \"F\" ]).unstack()[\"sales\"][[f\"F{i}\" for i in range(1,29)]].reset_index()\nte_sub.fillna(0., inplace = True)\nte_sub.to_csv(\"submission.csv\",index=False)\nte_sub.shape","adc4e4fb":"te_sub.head(10)","741739ec":"## \u0420\u0430\u0437\u0432\u0435\u0434\u043e\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","b280d128":"\u0414\u0440\u0435\u0432\u043e\u0432\u0438\u0434\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u043f\u043e 3 \u0448\u0442\u0430\u0442\u0430\u043c. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0442\u0430\u0442\u0435 \u0432\u0437\u044f\u0442\u043e 3-4 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430.\n\n\u0422\u0430\u043a \u0436\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0442\u043e\u0432\u0430\u0440\u043e\u0432: \u0435\u0434\u0430, \u0445\u043e\u0431\u0431\u0438, \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0445\u043e\u0437\u044f\u0439\u0441\u0442\u0432\u043e - \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0431\u044c\u044e\u0442\u0441\u044f \u043d\u0430 \u043f\u043e\u0434\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438, \u0430 \u0442\u0435 \u0443\u0436\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u043e\u0432\u0430\u0440\u044b","978901a3":"\u0414\u0430\u043b\u0435\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u043e\u0440\u043e\u043d. \u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u044b, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c:\n\nhttps:\/\/www.kaggle.com\/headsortails\/back-to-predict-the-future-interactive-m5-eda\n\nhttps:\/\/www.kaggle.com\/robikscube\/m5-forecasting-starter-data-exploration\n\nhttps:\/\/www.kaggle.com\/tarunpaparaju\/m5-competition-eda-models","e0c71a09":"### \u041f\u0435\u0440\u0432\u044b\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435.","aeadfbe8":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430","0152c8bd":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439","91e5e8ea":"### \u0410\u043d\u0430\u043b\u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \"sales_df\"","dd24950a":"# \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043c\u0435\u0441\u0442\u0435 \u0438 \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c","717533f7":"![image.png](attachment:image.png)","f021354a":"\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430 \u0437\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c \u0437\u0430 \u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434","f86cb9b4":"\u0410\u043d\u0430\u043b\u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0446\u0435\u043d","857b5d3d":"# \u041f\u043e\u044d\u0442\u0430\u043f\u043d\u044b\u0439 \u0440\u0430\u0437\u0431\u043e\u0440 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f M5 Forecasting - Accuracy","0154aa4c":"\u041a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c - \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044f\u0445 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0434\u0430\u0442\u0435"}}