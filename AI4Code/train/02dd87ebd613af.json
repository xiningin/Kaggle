{"cell_type":{"e680f17d":"code","fbc2e4dd":"code","0a39edd1":"code","546235ed":"code","6cb7e342":"code","7a3b70cd":"code","bf9db0a4":"code","11cf1c15":"code","5645fae2":"code","53e375ff":"code","5251b67f":"code","1fe9a407":"code","47898fba":"code","87c8ca84":"code","6679c81a":"code","a9714636":"code","fd76a2eb":"code","5d72cf8c":"code","b8cefb05":"code","48b8d653":"code","c70b5dc4":"code","e5649117":"code","16205141":"code","c12391fc":"code","7fc170e0":"code","94267a12":"code","a2ada0bc":"code","b3f55a26":"code","c26ccaee":"code","f7b9a7f9":"code","0cab7764":"code","de3ebe79":"code","3cf44c5a":"code","543b3fe7":"code","9fd7639e":"code","4f9b2c88":"code","965ddff8":"code","ab4be863":"code","18cbd169":"code","c35ffd81":"code","c478e4b8":"code","7bdb6588":"code","b4b96b15":"code","15148674":"code","58a1e2ee":"code","635ca1ea":"code","ea073a6d":"code","58eb31f4":"code","f29d2949":"code","3af39103":"code","8bf74763":"code","a9f30228":"code","8ae1959c":"code","59c3e832":"code","ea1eeff9":"code","0c01060f":"code","0e99dd6f":"code","6c613a1e":"code","cccb2c53":"code","094cde0b":"code","d9b709ce":"code","a50df8d2":"code","3a9ca949":"code","8e6a242a":"code","0d66968e":"code","2e0e107d":"code","6fa2df2a":"code","8c5d566a":"code","a657d0f9":"code","099cee8e":"code","479ed409":"code","00689895":"code","ba373a93":"code","cef12a6c":"code","c5914c71":"code","272c3c92":"code","ee06d099":"code","748e6015":"code","a7d0bde4":"code","54d2e642":"code","95e68def":"code","b3e1e9c2":"code","76133455":"code","0246bdb6":"code","f56b023d":"code","7967174d":"code","8e7d2b53":"code","6645cba2":"code","255ec40b":"code","7267137b":"code","a35667ba":"code","332b9476":"code","6e1982c8":"code","2f43142b":"code","a5583654":"code","cfc8ccb6":"code","d0fb0055":"code","3d5b9d1f":"code","814a8488":"code","129d0c2d":"code","135b1fbc":"code","3536e589":"code","473ffdee":"code","c5d8b372":"code","ca4e31d8":"code","669123f0":"code","7c653d0c":"code","c9b208a4":"code","df9fd194":"code","2e51665f":"code","22ce2944":"code","22db17b2":"code","7cb20e0c":"code","8aca9ae5":"code","29d5289a":"code","aea22334":"code","70559063":"code","a4d3b730":"code","822204b7":"code","1b7b0f1c":"code","a724deae":"code","511a6990":"code","9988093d":"code","256e6970":"code","7599ddbc":"code","6ce0107c":"code","64e7c503":"code","c9776d55":"code","4acc0220":"code","f2af7071":"code","8e9bde48":"code","e536c17d":"code","809fec93":"code","5a3202e8":"code","54e24165":"code","3f7cecce":"code","a8a54e75":"code","8ac3d8b8":"code","820205b9":"code","fa0ccc6e":"code","ba94b5f2":"code","faac9110":"code","deecfdea":"code","1f47d558":"code","5cacffd1":"code","051ac5d0":"code","16abe379":"code","5769eb2c":"code","912084f2":"code","46683d93":"code","5757b98e":"code","fb593121":"code","02c52c9d":"code","1bfaa959":"code","b0b1e8de":"code","4cea925d":"code","6e862035":"code","4b27713a":"code","c1df53d6":"code","867aca67":"code","602cdffa":"code","e51f6889":"code","13baf352":"code","96d49d7d":"code","340d82b6":"code","a02176e2":"code","1d486890":"code","691f008c":"code","9870c210":"code","4e060d75":"code","ba32d3f7":"code","da42a9cc":"code","be469c63":"code","5b9093eb":"code","c23760d7":"code","56e8b4c0":"code","d240d1ee":"code","a83f046e":"code","dd7fb4a7":"code","c0be0e8a":"code","5dde8390":"code","39e5973a":"code","05cd69ae":"code","cfca2d19":"code","128e8ed4":"code","5f674757":"code","5631e716":"code","4590978a":"code","c441a275":"code","74a5a457":"code","348dc877":"code","fb588a12":"code","12365f7e":"code","0d78c552":"code","b88537a2":"code","6b349475":"code","8726c040":"code","4ed188c7":"code","2f73fd5b":"code","2dca89d7":"code","72e7e7b0":"code","8cc03961":"code","befb8fe1":"markdown","3a2a77a8":"markdown","d6044539":"markdown","4f9c5d23":"markdown","6a975b4e":"markdown","6d5d24c2":"markdown","bd4b2236":"markdown","3e2789ba":"markdown","65461794":"markdown","6395b257":"markdown","3ee1359a":"markdown","37e0f2ce":"markdown","6cecba3d":"markdown","230cf900":"markdown","01137032":"markdown","319b436f":"markdown","59ec1d83":"markdown","cadd8946":"markdown","4b43adcb":"markdown","67eac059":"markdown","2b5d7616":"markdown","15ae120c":"markdown","d45edf5f":"markdown","50bf787e":"markdown","431b3b57":"markdown","663376d0":"markdown","1667e9fa":"markdown","5f7edef1":"markdown","482cfa7d":"markdown","e3ed4a1e":"markdown","5bcc160d":"markdown","df4e68a4":"markdown","3039caaf":"markdown","3c719b78":"markdown","c9947c7d":"markdown","f23dc696":"markdown","9d625996":"markdown","696469de":"markdown","5e5de806":"markdown","bc27f7e8":"markdown","e70d88c9":"markdown","72e0d3e4":"markdown","6b787317":"markdown","c4e08e26":"markdown","25335f73":"markdown","cd06a377":"markdown","03cbef97":"markdown","d6bbc9be":"markdown","a69a47c7":"markdown","23157c4e":"markdown","07f32099":"markdown","4ba13435":"markdown","2fbb9fe8":"markdown","03f1a151":"markdown","1e2f60db":"markdown","76747b1e":"markdown","d53243c0":"markdown","72ffdc92":"markdown","7ab1e2f1":"markdown","64f8dec5":"markdown","36a69155":"markdown","61d87a39":"markdown","5783979d":"markdown","e26a313c":"markdown","0845c9f7":"markdown","82434694":"markdown","38e638af":"markdown","ed68784e":"markdown","76febef8":"markdown","71e7c553":"markdown","a5b9b46f":"markdown","6ad50b19":"markdown","48d9e1bb":"markdown","484e6e71":"markdown","88382d61":"markdown","fbe6100d":"markdown","7c7b82b1":"markdown","e491a2c7":"markdown","d504602c":"markdown","501ae5d9":"markdown","a8e593d3":"markdown","2b64ad68":"markdown","b71dc335":"markdown","0a78e139":"markdown","d250e0f9":"markdown","f4785eb0":"markdown"},"source":{"e680f17d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fbc2e4dd":"# \u0418\u043c\u043f\u043e\u0440\u0442 \u0432\u0441\u0435\u0445 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\nimport numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\nfrom catboost import CatBoostRegressor\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","0a39edd1":"# \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f\nimport warnings\nwarnings.filterwarnings('ignore')","546235ed":"# \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430 \u0437\u0430\u0434\u0430\u0435\u043c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0448\u0440\u0438\u0444\u0442\u0430\nmatplotlib.rcParams.update({'font.size': 14})","6cb7e342":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    \"\"\" \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0443 R^2 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \"\"\"\n    \n    # \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0438 \u0432\u044b\u0432\u043e\u0434 \u043d\u0430 \u043f\u0435\u0447\u0430\u0442\u044c\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u0440\u043e\u043a\u0435\n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n     # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u0440\u043e\u043a\u0435\n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","7a3b70cd":"# \u0417\u0430\u043f\u0438\u0448\u0435\u043c \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u043a \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c\u0443 \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0443 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443 \nTRAIN_DATASET_PATH = '..\/input\/course-project\/train.csv'\nTEST_DATASET_PATH = '..\/input\/course-project\/test.csv'","bf9db0a4":"# \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 (\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439) \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ntrain_df = pd.read_csv(TRAIN_DATASET_PATH)\ntrain_df.head()","11cf1c15":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435\ntrain_df.dtypes","5645fae2":"# \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ntest_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df.head()","53e375ff":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0442\u0435\u0441\u0442\u0435, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 \u043b\u0438 \u043e\u043d\u0438 \u0441 \u0442\u0440\u0435\u0439\u043d\u043e\u043c\ntest_df.dtypes","5251b67f":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u0445\nprint('train:\\t\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432: {},\\t\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432: {}'.format(*train_df.shape))\nprint('test:\\t\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432: {},\\t\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432: {}'.format(*test_df.shape))","1fe9a407":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u0445 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442\ntrain_df.shape[1] - 1 == test_df.shape[1]","47898fba":"def draw_train_hist(feature_name, bins_count=30, y_log=False):\n    \"\"\" \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0433\u0440\u0430\u0444\u0438\u043a \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 feature_name \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \"\"\"\n    train_df[feature_name].hist(figsize=(10, 10), bins=bins_count, grid=True)\n    if y_log:\n        plt.yscale('log')\n    \n    plt.xlabel(feature_name)\n    plt.ylabel('Count')\n    \n    plt.title(f'Distribution of {feature_name}')\n    plt.show()","87c8ca84":"def draw_countplot(feature_name):\n    \"\"\" \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0441\u0442\u043e\u043b\u0431\u0447\u0430\u0442\u0443\u044e \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 feature_name \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \"\"\"\n    plt.figure(figsize=(8, 5))\n\n    sns.countplot(x=feature_name, data=train_df)\n\n    plt.title(f'Distribution of {feature_name}')\n    plt.show()","6679c81a":"def draw_jointplot(feature_name1, feature_name2):\n    \"\"\" \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0433\u0440\u0430\u0444\u0438\u043a \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 feature_name1, feature_name2 \"\"\"\n    grid = sns.jointplot(train_df[feature_name1], train_df[feature_name2], kind='reg')\n    grid.fig.set_figwidth(8)\n    grid.fig.set_figheight(8)\n\n    plt.show()","a9714636":"def print_quantile(feature_name, min_value=0.025, max_value=0.975):\n    \"\"\" \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438 \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c min_value, max_value \"\"\"\n    quantile_min = train_df[feature_name].quantile(min_value)\n    quantile_max = train_df[feature_name].quantile(max_value)\n    \n    print(feature_name)\n    print(f'{min_value * 100}% quantile:\\t{quantile_min}')\n    print(f'{max_value * 100}% quantile:\\t{quantile_max}')\n    return quantile_min, quantile_max","fd76a2eb":"def create_outlier(feature_name, condition):\n    \"\"\" \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0439 \u0432\u044b\u0431\u0440\u043e\u0441 \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 feature_name \"\"\"\n    outlier_feature_name = f'{feature_name}_outlier'\n    train_df[outlier_feature_name] = 0\n    train_df.loc[condition, outlier_feature_name] = 1","5d72cf8c":"# \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\ntarget_name = 'Price'","b8cefb05":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0442\u0430\u0440\u0433\u0435\u0442\u0430 \u0438 \u0437\u0430\u043f\u043e\u043c\u043d\u0438\u043c \u0438\u0445 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0434\u0430\u043b\u0435\u0435\ntarget_mean = train_df[target_name].mean()\ntarget_median = train_df[target_name].median()\ntarget_mode = train_df[target_name].mode()[0]\n\nprint('mean:\\t', target_mean)\nprint('median:\\t', target_median)\nprint('mode:\\t', target_mode)","48b8d653":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u043f\u043e\u043a\u0430\u0436\u0435\u043c \u043d\u0430 \u044d\u0442\u043e\u043c \u0436\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0432\u044b\u0448\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\nplt.figure(figsize = (16, 8))\n\n# \u0421\u0430\u043c\u0430 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430\nsns.distplot(train_df[target_name], bins=100)\n\n# \u0412\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043b\u0438\u043d\u0438\u0438 \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\nplt.axvline(x=target_mean, label='mean', color='orange', linestyle=':', linewidth=4)\nplt.axvline(x=target_median, label='median', color='green', linestyle='--', linewidth=4)\nplt.axvline(x=target_mode, label='mode', color='red', linestyle='-.', linewidth=4)\n\nplt.title('Distribution of price')\nplt.legend()\nplt.show()","c70b5dc4":"# \u0417\u0434\u0435\u0441\u044c \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0447\u0438\u0441\u0442\u043e \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u0434\u0430 \u0437\u0434\u0435\u0441\u044c \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0440\u0430\u043d\u0434\u043e\u043c\ntrain_df[target_name].value_counts()","e5649117":"# \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 - \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u0442\u0438\u043f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 Id, DistrictId \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0439, \u043f\u043e\u043c\u0435\u0447\u0430\u044f, \u0447\u0442\u043e \u043e\u043d\u0438 \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 (\u0434\u043b\u044f DistrictID \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0443, \u0447\u0442\u043e \n# \u044f\u0432\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0432\u043e\u0430\u043d\u043e, \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043e \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435)\ntrain_df['Id'] = train_df['Id'].astype(str)\ntrain_df['DistrictId'] = train_df['DistrictId'].astype(str)","16205141":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\ntrain_df.describe()","c12391fc":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0435\u0449\u0435 \u0440\u0430\u0437 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e \u0442\u0438\u043f\u0430\u043c\ntrain_df.info()","7fc170e0":"# \u0414\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0431\u0435\u0437 \u0442\u0430\u0440\u0433\u0435\u0442\u0430, \u0442\u0430\u0440\u0433\u0435\u0442 \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c\ntrain_num_features_df = train_df.select_dtypes(include=['float64', 'int64'])\ntrain_num_features_df.drop(target_name, axis=1, inplace=True)\ntrain_num_features_df.head()","94267a12":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0435\u0449\u0435 \u0440\u0430\u0437, \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 \u0432\u0441\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430\ntrain_num_features_df.describe()","a2ada0bc":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u0441\u0435\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ntrain_num_features_df.hist(figsize=(16, 16), bins=20, grid=False)\nplt.show()","b3f55a26":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Rooms, \u0447\u0442\u043e\u0431\u044b \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n# \u0412\u043a\u043b\u044e\u0447\u0438\u043c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0430\u0441\u0448\u0442\u0430\u0431, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\ndraw_train_hist('Rooms', y_log=True)","c26ccaee":"# \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u043b\u0438 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u0430, \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438\ntrain_df['Rooms'].describe()","f7b9a7f9":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043a\u043e\u043c\u043d\u0430\u0442, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0447\u0430\u0449\u0435 \u0438 \u0440\u0435\u0436\u0435 \u0432\u0441\u0435\u0433\u043e\ntrain_df['Rooms'].value_counts()","0cab7764":"# \u0412\u0438\u0434\u043d\u043e, \u0443 \u044d\u0442\u0438\u0445 10-\u0442\u0438 \u043a\u043e\u043c\u043d\u0430\u0442\u043d\u044b\u0445 \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u043f\u043e\u043b\u043e\u0449\u0430\u0434\u044c, \u0447\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f \u0434\u0443\u043c\u0430\u044e, \u0447\u0442\u043e \u044d\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441\ntrain_df[train_df['Rooms'] == 10]","de3ebe79":"# \u0417\u0434\u0435\u0441\u044c \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u043f\u043e\u0445\u043e\u0436\u0430 \u043d\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0443\u044e, \u0442\u043e \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0438 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043d\u0430\u0442, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u044d\u0442\u043e \u0442\u043e\u0436\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\ntrain_df[train_df['Rooms'] == 6]","3cf44c5a":"# \u0417\u0434\u0435\u0441\u044c \u0435\u0449\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043c\u043d\u0430\u0442 \u0441 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e, \u0442\u043e\u0447\u043d\u043e \u0432\u044b\u0431\u0440\u043e\u0441\ntrain_df[train_df['Rooms'] == 19]","543b3fe7":"# \u041d\u043e\u043b\u044c \u043a\u043e\u043c\u043d\u0430\u0442 \u0431\u044b\u0442\u044c \u043d\u0435 \u043c\u043e\u0436\u0435\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u044d\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439\ntrain_df[train_df['Rooms'] == 0]","9fd7639e":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0435\u0449\u0435 \u0440\u0430\u0437 \u043c\u0435\u0434\u0438\u0430\u043d\u0443\ntrain_df['Rooms'].median()","4f9b2c88":"# \u0417\u0430\u0432\u0435\u0434\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043f\u043e\u043c\u0435\u0447\u0430\u044e\u0449\u0438\u0439 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u043a\u043e\u043c\u043d\u0430\u0442\ncondition = (train_df['Rooms'] == 0) | (train_df['Rooms'] >= 6)\ncreate_outlier('Rooms', condition)","965ddff8":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0434\u043e\u0431\u0430\u0432\u0438\u043b \u043b\u0438 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\ntrain_df.head()","ab4be863":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043f\u043e\u043c\u0435\u0442\u0438\u043b \u043b\u0438 1 \u0432\u044b\u0431\u0440\u043e\u0441\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntrain_df[train_df['Rooms'] == 10]","18cbd169":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n# \u041a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0441 0 \u043a\u043e\u043c\u043d\u0430\u0442 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0434\u043d\u043e\u043a\u043e\u043c\u043d\u0430\u0442\u043d\u044b\u043c\u0438\ntrain_df.loc[train_df['Rooms'] == 0, 'Rooms'] = 1\n# \u0410 \u0432 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430\u0445 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442 >=6 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443 = 2\ntrain_df.loc[train_df['Rooms'] >= 6, 'Rooms'] = train_df['Rooms'].median()","c35ffd81":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0437\u0430\u043c\u0435\u043d\u0438\u043b \u0447\u0435\u0440\u0435\u0437 \u043c\u0435\u0442\u043a\u0443 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\ntrain_df[train_df['Rooms_outlier'] == 1]","c478e4b8":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0435\u0449\u0435 \u0440\u0430\u0437 \u0441\u0443\u043c\u043c\u0443 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043a\u043e\u043c\u043d\u0430\u0442, \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c\ntrain_df['Rooms'].value_counts()","7bdb6588":"# \u0415\u0449\u0435 \u0440\u0430\u0437 \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\ndraw_train_hist('Rooms', y_log=True)","b4b96b15":"# \u0418 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\ntrain_df['Rooms'].describe()","15148674":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 KitchenSquare, \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0430\u0441\u0448\u0442\u0430\u0431 \u0434\u043b\u044f \u043e\u0441\u0438 y, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\ndraw_train_hist('KitchenSquare', bins_count=100, y_log=True)","58a1e2ee":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0435 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u0435\ntrain_df['KitchenSquare'].describe()","635ca1ea":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u043f\u043e \u043f\u043b\u043e\u0437\u0430\u0434\u0438 \u043a\u0443\u0445\u043d\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0447\u0430\u0449\u0435\n# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u043a\u0443\u0445\u043d\u0438 \u0441 1 \u043c^2, \u0447\u0442\u043e \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\ntrain_df['KitchenSquare'].value_counts()","ea073a6d":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u0437\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 250 (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0437\u044f\u043b\u0438 \u0438\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430)\n# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044f \u044d\u0442\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0441 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u044d\u0442\u043e \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u0432\u044b\u0431\u0440\u043e\u0441, \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u044d\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0445\u043e\u0436\u0438 \u043d\u0430 \u0433\u043e\u0434,\n# \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a KitchenSquare\ntrain_df[train_df['KitchenSquare'] > 250]","58eb31f4":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438 \u0438 \u0437\u0430\u0432\u0435\u0434\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043d\u0438\u0445\nquantile_min, quantile_max = print_quantile('KitchenSquare')\n# \u0422\u0430\u043a\u0436\u0435 \u0437\u0430\u0432\u0435\u0434\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0430 \u0432 \u043c\u0435\u043d\u044c\u0448\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443\nkitchen_square_min = 3","f29d2949":"# \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043c\u0435\u0442\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ncondition = (train_df['KitchenSquare'] < kitchen_square_min) | (train_df['KitchenSquare'] > quantile_max)\ncreate_outlier('KitchenSquare', condition)","3af39103":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043a\u0430\u043a \u043f\u043e\u043c\u0435\u0442\u0438\u043b \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u043a\u0443\u0445\u043d\u0438\ntrain_df.head()","8bf74763":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0441\u0430\u043c\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u043c\u0435\u043d\u044c\u0448\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c kitchen_square_min\ntrain_df.loc[train_df['KitchenSquare'] < kitchen_square_min, 'KitchenSquare'] = kitchen_square_min\n# \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 (> 97.5% \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f) \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439\ntrain_df.loc[train_df['KitchenSquare'] > quantile_max, 'KitchenSquare'] = train_df['KitchenSquare'].median()","a9f30228":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0437\u0430\u043c\u0435\u043d\u0438\u043b \u043f\u043e \u043c\u0435\u0442\u043a\u0443 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\ntrain_df[train_df['KitchenSquare_outlier'] == 1]","8ae1959c":"# \u0415\u0449\u0435 \u0440\u0430\u0437 \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e \u043f\u043b\u043e\u0449\u0430\u0434\u0430\u043c \u043a\u0443\u0445\u043d\u0438, \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0440\u0430\u0437\u0431\u0440\u043e\u0441 \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u0441\u0442\u0430\u043b \u043c\u0435\u043d\u044c\u0448\u0435, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442, \u0438 \u0441\u0430\u043c\u043e\u0435 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043f\u0435\u0440\u044c 3 \u043c^2\ntrain_df['KitchenSquare'].value_counts()","59c3e832":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c, \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0442\u0435\u043f\u0435\u0440\u044c \u043d\u0435\u0442\ndraw_train_hist('KitchenSquare')","ea1eeff9":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0435\u0449\u0435 \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\ntrain_df['KitchenSquare'].describe()","0c01060f":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Square\ndraw_train_hist('Square', y_log=True)","0e99dd6f":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0438\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u044d\u0442\u043e \u0442\u043e\u0436\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u0445\ntrain_df['Square'].describe()","6c613a1e":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 2.5% \u0438 97.5% \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \n# \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u0430\u043a \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u043d\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u0443\u0434\u0443\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438\nq_min_square, q_max_square = print_quantile('Square')","cccb2c53":"# \u0412\u043e\u0437\u044c\u043c\u0435\u043c \u043f\u043e\u043a\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u0430 (\u0438\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0441 250 \u0435\u0441\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f)\n# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0432\u0441\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e\u0445\u043e\u0436\u0438 \u043d\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u043d\u043e \u0435\u0441\u0442\u044c \u043e\u0434\u0438\u043d \u043e\u0431\u044a\u0435\u043a\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0432\u044b\u0431\u0440\u043e\u0441 \u043d\u0435 \u043f\u043e\u0445\u043e\u0436, \u044d\u0442\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 \u0441 Id = 5548, \u0442\u0430\u043c \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u0438 \n# \u0438 \u044d\u0442\u043e \u0434\u043e\u0440\u043e\u0433\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430\ntrain_df[train_df['Square'] > 250]","094cde0b":"# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 300 \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043d\u044b\u043c\u0438\ntrain_df[train_df['Square'] > 300]","d9b709ce":"# \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c \u044d\u0442\u0443 \u0432\u0435\u0440\u0445\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443\nsquare_max = 300","a50df8d2":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f\n# \u0421\u0440\u0435\u0434\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0435\u0441\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u043c\u0435\u043d\u044c\u0448\u0435 \u044d\u0442\u043e\u0433\u043e \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f, \u043d\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0432\u043f\u043e\u043b\u043d\u0435 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e\n# \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 Id = 2357 - \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0434\u0435\u0448\u0435\u0432\u0430\u044f \u043e\u0434\u043d\u043e\u043a\u043e\u043c\u043d\u0430\u0442\u043d\u0430\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 \u0441 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e\ntrain_df[train_df['Square'] < q_min_square]","3a9ca949":"# \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u0437\u044f\u0442\u044c \u0435\u0449\u0435 \u043c\u0435\u043d\u044c\u0448\u0435\n# \u0422\u0443\u0442 \u043a\u0430\u043a \u0431\u0443\u0434\u0442\u043e \u0442\u043e\u0436\u0435 \u0435\u0441\u0442\u044c \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u0445\u043e\u0442\u044c \u0438 \u0441 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e, \u043c\u043e\u0436\u0435\u0442 \u044d\u0442\u043e \u043a\u043e\u043c\u043d\u0430\u0442\u0430 \u0432 \u043e\u0431\u0449\u0435\u0436\u0438\u0442\u0438\u0438\n# \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 Id = 523 - \u0434\u0435\u0448\u0435\u0432\u0430\u044f \u043e\u0434\u043d\u043e\u043a\u043e\u043c\u043d\u0430\u0442\u043d\u0430\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 \u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e 18 \u043c^2\ntrain_df[train_df['Square'] < 20]","8e6a242a":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u0437\u044f\u0442\u044c \u0435\u0449\u0435 \u043c\u0435\u043d\u044c\u0448\u0435\n# \u0412\u043e\u0442 \u0442\u0443\u0442 \u0432\u0440\u043e\u0434\u0435 \u0431\u044b \u0443\u0436\u0435 \u0432\u0441\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b\ntrain_df[train_df['Square'] < 15]","0d66968e":"# \u0417\u0430\u043f\u043e\u043c\u043d\u0438\u043c \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0438\u0436\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b\nsquare_min = 15","2e0e107d":"# \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043c\u0435\u0442\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f square_min, square_max, \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u043d\u0435\u0435\ncondition = (train_df['Square'] < square_min) | (train_df['Square'] > square_max)\ncreate_outlier('Square', condition)","6fa2df2a":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043f\u043e\u043c\u0435\u0442\u0438\u043b\ntrain_df[condition]","8c5d566a":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439\ntrain_df.loc[condition, 'Square'] = train_df['Square'].median()","a657d0f9":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043a\u0430\u043a \u0437\u0430\u043c\u0435\u043d\u0438\u043b \u043f\u043e \u043c\u0435\u0442\u043a\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\ntrain_df[train_df['Square_outlier'] == 1]","099cee8e":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c\n# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0440\u0430\u0437\u0431\u0440\u043e\u0441\u0430 \u0441\u0442\u0430\u043b\u043e \u043c\u0435\u043d\u044c\u0448\u0435, \u0442\u043e\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e = 250 \u043c^2 \u043c\u044b \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u043b\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c, \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0435\u0433\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u043f\u0440\u0430\u0432\u0430 \u0435\u0441\u0442\u044c \u0445\u0432\u043e\u0441\u0442\ndraw_train_hist('Square')","479ed409":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\ntrain_df['Square'].describe()","00689895":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 LifeSquare, \u043f\u043e \u043e\u0441\u0438 y \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u043c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0430\u0441\u0448\u0442\u0430\u0431, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0447\u0435\u043d\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\ndraw_train_hist('LifeSquare', y_log=True)","ba373a93":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\n# \u041e\u0442\u0441\u044e\u0434\u0430 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0443 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0438\u0445\ntrain_df['LifeSquare'].describe()","cef12a6c":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\ntrain_df['LifeSquare'].isna().sum()","c5914c71":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\ntrain_df['LifeSquare_nan'] = train_df['LifeSquare'].isna() * 1\n# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043a\u0430\u043a \u0437\u0430\u043c\u0435\u043d\u0438\u043b\ntrain_df.head()","272c3c92":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0443 - \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c\nextra_square_s = train_df['Square'] - train_df['LifeSquare'] - train_df['KitchenSquare']\nextra_square_s","ee06d099":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u0440\u0435\u0434\u0438 \u043d\u0438\u0445 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435\nextra_square_s[extra_square_s < 0]","748e6015":"# \u041e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u043e\u0436\u0435 \u0435\u0441\u0442\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0441\u0440\u0435\u0434\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043d\u0435 nan-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n# \u042d\u0442\u043e \u0438 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 LifeSquare, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c nan'\u044b\nextra_square_median = extra_square_s[(extra_square_s > 0) & ~(extra_square_s.isna())].median()\nextra_square_median","a7d0bde4":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 LifeSquare \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435 LifeSquare = Square - KitchenSquare - extra_square_median\ncondition = (train_df['LifeSquare'].isna()) & (~train_df['Square'].isna()) & (~train_df['KitchenSquare'].isna())\ntrain_df.loc[condition, 'LifeSquare'] = train_df.loc[condition, 'Square'] - train_df.loc[condition, 'KitchenSquare'] - extra_square_median","54d2e642":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u043c\u0435\u0442\u043a\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\ntrain_df[train_df['LifeSquare_nan'] == 1]","95e68def":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u043c\u0438 \u043e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \ntrain_df['LifeSquare'].describe()","b3e1e9c2":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u0447\u0442\u043e\u0431\u044b \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0435\u0441\u0442\u044c\ndraw_train_hist('LifeSquare', bins_count=20, y_log=True)","76133455":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\ntrain_df['LifeSquare'].describe()","0246bdb6":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c 2.5% \u0438 97.5% \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \n# \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u0430\u043a \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u043d\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u0443\u0434\u0443\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438\nq_life_square_min, q_life_square_max = print_quantile('LifeSquare')","f56b023d":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435 [0, 250], \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043a\u0430\u043a\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0447\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0437 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443,\n# \u0442\u043e \u0435\u0441\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0441 \u043a\u0430\u043a\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u044b\ntrain_df['LifeSquare'].hist(figsize=(10, 10), bins=200, grid=True)\n\nplt.xlabel('LifeSquare')\nplt.ylabel('Count')\n\nplt.xlim([0, 250])\n\nplt.title('Distribution of LifeSquare')\nplt.show()","7967174d":"# \u0418\u0437 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441\u043e 150\n# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0442\u0443\u0442 \u043a\u0430\u043a \u0431\u0443\u0434\u0442\u043e \u0435\u0441\u0442\u044c \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 Id = 4991 - 3-\u0445 \u043a\u043e\u043c\u043d\u0430\u0442\u043d\u0430\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e (\u043c\u043e\u0436\u0435\u0442 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0431\u043e\u043b\u044c\u0448\u0438\u0435)\ntrain_df[train_df['LifeSquare'] > 150]","8e7d2b53":"# \u041f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u0437\u044f\u0442\u044c \u0435\u0449\u0435 \u0431\u043e\u043b\u044c\u0448\u0435\n# \u0422\u0443\u0442 \u0443\u0436\u0435 \u043a\u0430\u043a \u0431\u0443\u0434\u0442\u043e \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u0435\u0441\u0442\u044c \u043e\u0433\u0440\u043d\u043e\u043c\u043d\u044b\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u043e \u0432\u0441\u0435\u0445 \u044d\u0442\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u0445 LifeSquare > Square, \u0447\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u043d\u043e\ntrain_df[train_df['LifeSquare'] > 250]","6645cba2":"# \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u043f\u043e\u043c\u043d\u0438\u043c \u044d\u0442\u043e \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b\nlife_square_max = 250","255ec40b":"# \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043d\u0438\u0436\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u043e\u0437\u044c\u043c\u0435\u043c 2.5% \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c\n# \u0422\u0443\u0442 \u0432\u0440\u043e\u0434\u0435 \u0431\u044b \u0435\u0441\u0442\u044c \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0431\u044a\u0435\u043a\u0442\u044b c Id = 8800, 8998, 10635 - \u043e\u0434\u043d\u043e\u043a\u043e\u043c\u043d\u0430\u0442\u043d\u044b\u0435 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0432\u0440\u043e\u0434\u0435 \u0441 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e\ntrain_df[train_df['LifeSquare'] < q_life_square_min]","7267137b":"#  \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 10\n# \u0422\u0443\u0442 \u0443\u0436\u0435 \u0432\u0440\u043e\u0434\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u044b\ntrain_df[train_df['LifeSquare'] < 10]","a35667ba":"# \u0417\u0430\u043f\u043e\u043c\u043d\u0438\u043c \u043d\u0438\u0436\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443\nlife_square_min = 10","332b9476":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0435\u0442\u043a\u0443 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\ncondition = (train_df['LifeSquare'] < life_square_min) | (train_df['LifeSquare'] > life_square_max)\ncreate_outlier('LifeSquare', condition)","6e1982c8":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u043b \u043c\u0435\u0442\u043a\u0443\ntrain_df[condition]","2f43142b":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u0441\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443\ntrain_df.loc[condition, 'LifeSquare'] = train_df['LifeSquare'].median()","a5583654":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043a\u0430\u043a \u0437\u0430\u043c\u0435\u043d\u0438\u043b\ntrain_df[train_df['LifeSquare_outlier'] == 1]","cfc8ccb6":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u043e\u0432\u0443\u044e \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u0432\u0438\u0434\u043d\u043e \u0447\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u0440\u043e\u043f\u0430\u043b\u0438\ndraw_train_hist('LifeSquare')","d0fb0055":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043d\u0430 \u043d\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\ntrain_df['LifeSquare'].describe()","3d5b9d1f":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043a\u0430\u043a \u0431\u0443\u0434\u0442\u043e \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u044d\u0442\u043e \u0434\u0430\u043b\u0435\u0435\ndraw_train_hist('HouseFloor', y_log=True)","814a8488":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\ntrain_df['HouseFloor'].describe()","129d0c2d":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0443\u043c\u043c\u0443 \u043f\u043e \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044f\u043c \u0434\u043e\u043c\u043e\u0432\n# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0434\u043e\u043c\u043e\u0432 \u0441 17 \u044d\u0442\u0430\u0436\u0430\u043c\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e\n# \u0422\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u0434\u043e\u043c\u0430 \u0441 117 \u0438 99 \u044d\u0442\u0430\u0436\u0430\u043c\u0438, \u043e\u043d\u0438 \u043f\u043e\u0445\u043e\u0436\u0438 \u043d\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n# \u0415\u0441\u0442\u044c \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u0434\u043e\u043c\u043e\u0432 \u0441 0 \u044d\u0442\u0430\u0436\u0430\u043c\u0438 - \u043d\u0435\u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e\u0441\u0442\u044c\ntrain_df['HouseFloor'].value_counts()","135b1fbc":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432\u0441\u0435\u0445 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0434\u043e\u043c\u043e\u0432\ntrain_df['HouseFloor'].sort_values().unique()","3536e589":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0432 \u0442\u0435\u0445 \u0434\u043e\u043c\u0430\u0445, \u0433\u0434\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 = 0, \u043a\u0430\u043a\u043e\u0439 \u044d\u0442\u0430\u0436 \u0443\u043a\u0430\u0437\u0430\u043d \u0432 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0435\n# \u041d\u0435 \u043f\u043e\u0445\u043e\u0436\u0435, \u0447\u0442\u043e \u0442\u0430\u043c, \u0433\u0434\u0435 \u0443\u043a\u0430\u0437\u0430\u043d 0 \u044d\u0442\u0430\u0436\u0435\u0439, \u0438\u043c\u0435\u043b\u0441\u044f \u0432 \u0432\u0438\u0434\u0443 1 \u044d\u0442\u0430\u0436, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u044d\u0442\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u044b \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443\ntrain_df[train_df['HouseFloor'] == 0]","473ffdee":"# \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 0 \u044d\u0442\u0430\u0436\u0435\u0439\nhouse_floor_min = 0\n# 95 - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u041c\u043e\u0441\u043a\u0432\u0430-\u0441\u0438\u0442\u0438\nhouse_floor_max = 95","c5d8b372":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u043c\u0435\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\ncondition = (train_df['HouseFloor'] == house_floor_min) | (train_df['HouseFloor'] > house_floor_max)\ncreate_outlier('HouseFloor', condition)","ca4e31d8":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043a\u0430\u043a \u043f\u043e\u043c\u0435\u0442\u0438\u043b\ntrain_df[condition]","669123f0":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439\ntrain_df.loc[condition, 'HouseFloor'] = train_df['HouseFloor'].median()","7c653d0c":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043a\u0430\u043a \u0437\u0430\u043c\u0435\u043d\u0438\u043b \u043f\u043e \u043c\u0435\u0442\u043a\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\ntrain_df[train_df['HouseFloor_outlier'] == 1]","c9b208a4":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\ndraw_train_hist('HouseFloor', y_log=True)","df9fd194":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\ntrain_df['HouseFloor'].describe()","2e51665f":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0435\u0449\u0435 \u0440\u0430\u0437 \u0432\u0435\u0441\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0434\u043e\u043c\u043e\u0432\ntrain_df['HouseFloor'].sort_values().unique()","22ce2944":"# \u0418 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0435\u0449\u0435 \u0440\u0430\u0437 \u0441\u0443\u043c\u043c\u0443 \u043f\u043e \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044f\u043c\ntrain_df['HouseFloor'].value_counts()","22db17b2":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u0447\u0442\u043e\u0431\u044b \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\ndraw_train_hist('Floor', y_log=True)","7cb20e0c":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\ntrain_df['Floor'].describe()","8aca9ae5":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u044d\u0442\u0430\u0436\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e\ntrain_df['Floor'].value_counts()","29d5289a":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0432 \u0446\u0435\u043b\u043e\u043c \u043a\u0430\u043a\u0438\u0435 \u044d\u0442\u0430\u0436\u0438 \u0435\u0441\u0442\u044c \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\ntrain_df['Floor'].sort_values().unique()","aea22334":"# \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u043d\u0435\u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u0438 \u044d\u0442\u0430\u0436\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\ncondition = train_df['Floor'] > train_df['HouseFloor']","70559063":"# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432\n(condition).sum()","a4d3b730":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0442\u0430\u043a\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b\ntrain_df[train_df['Floor'] > train_df['HouseFloor']]","822204b7":"# \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043c\u0435\u0442\u0438\u043c \u044d\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor_outlier'] = 1","1b7b0f1c":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043c\u0435\u0442\u0438\u043b\ntrain_df[train_df['Floor'] > train_df['HouseFloor']]","a724deae":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043e\u0442 1 \u0434\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u044d\u0442\u043e\u043c \u0434\u043e\u043c\u0435, \u0433\u0434\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430\n# \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0434\u043b\u044f \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 random\nrandom.seed(100)\ntrain_df.loc[condition, 'Floor'] = train_df.loc[condition, 'HouseFloor'].apply(lambda x: random.randint(1, x))","511a6990":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043a\u0430\u043a \u0437\u0430\u043c\u0435\u043d\u0438\u043b\ntrain_df[condition]","9988093d":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u043d\u0435\u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \n(train_df['Floor'] > train_df['HouseFloor']).sum()","256e6970":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445\n# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043d\u0435 \u043e\u0441\u043e\u0431\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u043b\u0430\u0441\u044c\ndraw_train_hist('Floor', y_log=True)","7599ddbc":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\ntrain_df['Floor'].describe()","6ce0107c":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u043f\u043e \u044d\u0442\u0430\u0436\u0430\u043c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\ntrain_df['Floor'].value_counts()","64e7c503":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u0447\u0442\u043e\u0431\u044b \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n# \u041f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\ndraw_train_hist('HouseYear', y_log=True)","c9776d55":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\n# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043e\u043d\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438\u0441\u044c \u043d\u0435\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438, \u044d\u0442\u043e \u0435\u0449\u0435 \u0440\u0430\u0437 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442 \u0442\u043e, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\ntrain_df['HouseYear'].describe()","4acc0220":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u043f\u043e \u0433\u043e\u0434\u0430\u043c\n# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0433\u043e\u0434\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 - 4968 \u0438 20052011, \u044d\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u044b\ntrain_df['HouseYear'].value_counts()","f2af7071":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0433\u043e\u0434\u043e\u0432 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438\ntrain_df['HouseYear'].sort_values().unique()","8e9bde48":"# \u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0433\u043e\u0434, \u0442\u0435 \u0433\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0431\u0443\u0434\u0443\u0442 \u043f\u043e\u043c\u0435\u0447\u0435\u043d\u044b \u043a\u0430\u043a \u0432\u044b\u0431\u0440\u043e\u0441\u044b\ncurr_year = datetime.now().year\ncurr_year","e536c17d":"type(curr_year)","809fec93":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u043c\u0435\u0442\u043a\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\ncondition = train_df['HouseYear'] > curr_year\ncreate_outlier('HouseYear', condition)","5a3202e8":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043f\u043e\u043c\u0435\u0442\u0438\u043b\ntrain_df[condition]","54e24165":"# \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0433\u043e\u0434\ntrain_df.loc[condition, 'HouseYear'] = curr_year","3f7cecce":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0437\u0430\u043c\u0435\u043d\u0438\u043b \u043f\u043e \u043c\u0435\u0442\u043a\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\ntrain_df[train_df['HouseYear_outlier'] == 1]","a8a54e75":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0433\u0438\u0441\u0442\u0433\u0440\u0430\u043c\u043c\u0443 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c\n# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442\ndraw_train_hist('HouseYear')","8ac3d8b8":"# \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b\u0438\u0441\u044c\ntrain_df['HouseYear'].describe()","820205b9":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u0447\u0442\u043e\u0431\u044b \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\ndraw_train_hist('Healthcare_1')","fa0ccc6e":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\ntrain_df['Healthcare_1'].describe()","ba94b5f2":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n# \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432 \u043f\u043e\u0447\u0442\u0438 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\ntrain_df['Healthcare_1'].isna().sum()","faac9110":"# \u0414\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n# \u041f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u043c\u0435\u0442\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\ntrain_df['Healthcare_1_nan'] = train_df['Healthcare_1'].isna() * 1","deecfdea":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ntrain_df.select_dtypes(include='object').columns.tolist()","1f47d558":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\ntrain_df['DistrictId'].value_counts()","5cacffd1":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u0441\u0438\u043b\u044c\u043d\u043e \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0430\ntrain_df['Ecology_2'].value_counts()","051ac5d0":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0442\u0430\u043a\u0436\u0435 \u044d\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\ndraw_countplot('Ecology_2')","16abe379":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0430\ntrain_df['Ecology_3'].value_counts()","5769eb2c":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u044d\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\ndraw_countplot('Ecology_3')","912084f2":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0430\ntrain_df['Shops_2'].value_counts()","46683d93":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0442\u0430\u043a\u0436\u0435 \u044d\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\ndraw_countplot('Shops_2')","5757b98e":"plt.figure(figsize=(18, 10))\n\nsns.set(font_scale=1.4)\n\ncorr_matrix = train_df.corr()\ncorr_matrix = np.round(corr_matrix, 2)\ncorr_matrix[np.abs(corr_matrix) < 0.3] = 0\n\nsns.heatmap(corr_matrix, annot=True, linewidths=.5, cmap='coolwarm')\n\nplt.title('Correlation matrix')\nplt.show()","fb593121":"# \u0414\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Rooms\ndraw_jointplot('Rooms', 'Price')","02c52c9d":"# \u0414\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Square\ndraw_jointplot('Square', 'Price')","1bfaa959":"class DataPreprocessing:\n    \"\"\" \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \"\"\"\n    \n    def __init__(self):\n        \"\"\" \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430 \"\"\"\n        # Series \u0441 \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430         \n        self.medians = None\n        # Series \u0441 \u043c\u043e\u0434\u0430\u043c\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n        self.modas = None\n        # \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f 97.5% \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f \u0434\u043b\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043d\u0438\n        self.quantile_max_kitchen_square = None\n        # \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u044b \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 (Square - LifeSquare - KitchenSquare)\n        self.median_extra_square = None\n    \n    def fit(self, X):\n        \"\"\" \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a \"\"\"\n        # \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u044b \u0438 \u043c\u043e\u0434\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n        self.medians = X.median()\n        self.modas = X.mode().iloc[0]\n        \n        # \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c \u0434\u043b\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043d\u0438\n        self.quantile_max_kitchen_square = X['KitchenSquare'].quantile(0.975)\n        # \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n        extra_square_s = X['Square'] - X['LifeSquare'] - X['KitchenSquare']\n        # \u0417\u0430\u043f\u043e\u043c\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438      \n        self.median_extra_square = extra_square_s[(extra_square_s > 0) & ~(extra_square_s.isna())].median()\n        \n        # \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445      \n        self.num_features = ['Rooms', 'KitchenSquare', 'Square', 'LifeSquare', 'HouseFloor', 'Floor', 'HouseYear', 'Healthcare_1']\n        # \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\n        self.cat_features = ['DistrictId', 'Ecology_2', 'Ecology_3', 'Shops_2']\n    \n    def transform(self, X):\n        \"\"\" \u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \"\"\"\n        \n        def create_outlier(feature_name, condition):\n            \"\"\" \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0438\u0440\u0437\u043d\u0430\u043a\u0430 - \u043c\u0435\u0442\u043a\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u0430 \"\"\"\n            outlier_feature_name = f'{feature_name}_outlier'\n            X[outlier_feature_name] = 0\n            X.loc[condition, outlier_feature_name] = 1\n        \n        # Rooms ---------------------------------------------------------\n        rooms_max = 6\n        \n        # \u041f\u043e\u043c\u0435\u0442\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b    \n        condition = (X['Rooms'] == 0) | (X['Rooms'] >= rooms_max)\n        create_outlier('Rooms', condition)\n        \n        # \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n        X.loc[X['Rooms'] == 0, 'Rooms'] = 1\n        X.loc[X['Rooms'] >= rooms_max, 'Rooms'] = self.medians['Rooms']\n        \n        # KitchenSquare -------------------------------------------------\n        kitchen_square_min = 3\n        \n        # \u041f\u043e\u043c\u0435\u0442\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b    \n        condition = (X['KitchenSquare'] < kitchen_square_min) | (X['KitchenSquare'] > self.quantile_max_kitchen_square)\n        create_outlier('KitchenSquare', condition)\n        \n        # \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n        X.loc[X['KitchenSquare'] < kitchen_square_min, 'KitchenSquare'] = kitchen_square_min\n        X.loc[X['KitchenSquare'] > self.quantile_max_kitchen_square, 'KitchenSquare'] = self.medians['KitchenSquare']\n        \n        # Square ----------------------------------------------------------\n        square_min = 15\n        square_max = 300\n        \n        # \u041f\u043e\u043c\u0435\u0442\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b  \n        condition = (X['Square'] < square_min) | (X['Square'] > square_max)\n        create_outlier('Square', condition)\n        \n        # \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n        X.loc[condition, 'Square'] = self.medians['Square']\n        \n        # LifeSquare ------------------------------------------------------\n        # \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n        # \u041f\u043e\u043c\u0435\u0442\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        \n        # \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n        condition = (X['LifeSquare'].isna()) & (~X['Square'].isna()) & (~X['KitchenSquare'].isna())\n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - self.median_extra_square\n        \n        # \u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n        life_square_min = 10\n        life_square_max = 250\n        \n        # \u041f\u043e\u043c\u0435\u0442\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n        condition = (X['LifeSquare'] < life_square_min) | (X['LifeSquare'] > life_square_max)\n        create_outlier('LifeSquare', condition)\n        \n        # \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n        X.loc[condition, 'LifeSquare'] = self.medians['LifeSquare']\n        \n        # HouseFloor ------------------------------------------------------\n        house_floor_max = 95\n        \n        # \u041f\u043e\u043c\u0435\u0442\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n        condition = (X['HouseFloor'] == 0) | (X['HouseFloor'] > house_floor_max)\n        create_outlier('HouseFloor', condition)\n        \n        # \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n        X.loc[condition, 'HouseFloor'] = self.medians['HouseFloor']\n        \n        # Floor -----------------------------------------------------------\n        # \u041f\u043e\u043c\u0435\u0442\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n        condition = X['Floor'] > X['HouseFloor']\n        X.loc[condition, 'HouseFloor_outlier'] = 1\n        \n        # \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n        # \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0434\u043b\u044f \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438\n        random.seed(21)\n        X.loc[condition, 'Floor'] = X.loc[condition, 'HouseFloor'].apply(lambda x: random.randint(1, x))\n        \n        # HouseYear -------------------------------------------------------\n        curr_year = datetime.now().year\n        \n        # \u041f\u043e\u043c\u0435\u0442\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n        condition = X['HouseYear'] > curr_year\n        create_outlier('HouseYear', condition)\n        \n        # \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n        X.loc[condition, 'HouseYear'] = curr_year\n        \n        # Healthcare_1 ----------------------------------------------------\n        # \u041f\u043e\u043c\u0435\u0442\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n        X['Healthcare_1_nan'] = X['Healthcare_1'].isna() * 1\n        \n        # \u0421\u0430\u043c\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u043e\u043a\u0430 \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u0441\u044f \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439, \u043d\u043e \u043f\u043e\u0442\u043e\u043c \u043f\u043e\u0437\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n        \n        # \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f nan-\u044b ------------------------------------------------------------------------------------\n        X[self.num_features] = X[self.num_features].fillna(self.medians[self.num_features])\n        X[self.cat_features] = X[self.cat_features].fillna(self.modas[self.cat_features])\n        \n        return X\n    ","b0b1e8de":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nbinary_to_numbers = {'A': 0, 'B': 1}","4cea925d":"# \u041a\u0430\u043a \u043c\u044b \u0432\u044b\u044f\u0441\u043d\u0438\u043b\u0438 \u0438\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 EDA \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u0432\u0438\u0434\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\ntrain_df['Ecology_2'] = train_df['Ecology_2'].replace(binary_to_numbers)\ntrain_df['Ecology_3'] = train_df['Ecology_3'].replace(binary_to_numbers)\ntrain_df['Shops_2'] = train_df['Shops_2'].replace(binary_to_numbers)","6e862035":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043a\u0430\u043a \u0437\u0430\u043c\u0435\u043d\u0438\u043b\ntrain_df.head()","4b27713a":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0437\u0430\u043c\u0435\u043d\u0443\ntrain_df[['Ecology_2', 'Ecology_3', 'Shops_2']]","c1df53d6":"# \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\ndistrict_size = train_df['DistrictId'].value_counts().reset_index().rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\ndistrict_size","867aca67":"# \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u043a \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c\u0443\ntrain_df = train_df.merge(district_size, on='DistrictId', how='left')\ntrain_df.head()","602cdffa":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0443\u043c\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043f\u043e \u044d\u0442\u0438\u043c \u0434\u0432\u0443\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c, \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043f\u043e\u0440\u043e\u0432\u043d\u0443\n(train_df['DistrictSize'] > 100).value_counts()","e51f6889":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a isDistrictLarge, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u0440\u0430\u0439\u043e\u043d\u0443 (\u0431\u043e\u043b\u044c\u0448\u043e\u043c\u0443 \u0438\u043b\u0438 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u043c\u0443) \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0434\u043e\u043c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430\ntrain_df['IsDistrictLarge'] = (train_df['DistrictSize'] > 100).astype(int)\ntrain_df.head()","13baf352":"# \u0421\u0433\u0440\u0443\u043f\u043f\u0438\u043f\u0443\u0435\u043c \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 DistrictId \u0438 Rooms, \u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0446\u0435\u043d\u044b\nmed_price_by_district = train_df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByDistrict'})\nmed_price_by_district.head()","96d49d7d":"# \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u043a \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c\u0443 \u043f\u043e DistrictId \u0438 Rooms\ntrain_df = train_df.merge(med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\ntrain_df.head()","340d82b6":"# \u0421\u0433\u0440\u0443\u043f\u043f\u0438\u043f\u0443\u0435\u043c \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c Rooms \u0438 HouseYear, \u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0446\u0435\u043d\u044b\nmed_price_by_floor_year = train_df.groupby(['Floor', 'HouseYear'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByFloorYear'})\nmed_price_by_floor_year.head()","a02176e2":"# \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u043a \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c\u0443 \u043f\u043e Floor \u0438 HouseYear\ntrain_df = train_df.merge(med_price_by_floor_year, on=['Floor', 'HouseYear'], how='left')\ntrain_df.head()","1d486890":"class FeatureGenerator:\n    \"\"\" \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \"\"\"\n    \n    def __init__(self):\n        self.binary_to_numbers = None\n        self.district_size = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n        \n        self.median_med_price_by_district = None\n        self.median_med_price_by_floor_year = None\n        self.mode_district_size = None\n    \n    def fit(self, X, y=None):\n        # \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictSize\n        self.district_size = X['DistrictId'].value_counts().reset_index().rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n        self.mode_district_size = self.district_size['DistrictSize'].mode()[0]\n        \n        # Target encoding\n        if y is not None:\n            # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043e\u043f\u0438\u044e \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430\n            X_copy = X.copy()\n            \n            # \u0414\u043e\u0430\u0431\u0432\u043b\u044f\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0432 \u043a\u043e\u043f\u0438\u044e \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438\n            X_copy['Price'] = y.values\n            \n            # MedPriceByDistrict\n            self.med_price_by_district = X_copy.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByDistrict'})\n            self.median_med_price_by_district = self.med_price_by_district['MedPriceByDistrict'].median()\n            \n            # MedPriceByFloorYear\n            self.med_price_by_floor_year = X_copy.groupby(['Floor', 'HouseYear'], as_index=False).agg({'Price':'median'}).rename(columns={'Price':'MedPriceByFloorYear'})\n            self.median_med_price_by_floor_year = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n        \n    \n    def transform(self, X):\n        # \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438        \n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictSize\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        X['DistrictSize'].fillna(self.mode_district_size, inplace=True)\n        \n        # IsDistrictLarge\n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X['MedPriceByDistrict'].fillna(self.median_med_price_by_district, inplace=True)\n            \n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['Floor', 'HouseYear'], how='left')\n            X['MedPriceByFloorYear'].fillna(self.median_med_price_by_floor_year, inplace=True)\n        \n        return X","691f008c":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\ntrain_df.columns.tolist()","9870c210":"# \u0412\u043e\u0437\u043c\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 Healthcare_1 \u043d\u0435 nan, \u043d\u0430 \u043d\u0438\u0445 \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c\nX = train_df[~train_df['Healthcare_1'].isna()]","4e060d75":"# \u0423\u0431\u0435\u0434\u0438\u043c\u0441\u044f, \u0447\u0442\u043e \u0432 \u044d\u0442\u043e\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0438\u0433\u0434\u0435 \u043d\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\nX.isna().sum()","ba32d3f7":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u043d\u043d\u044b\u0445 \u0443 \u043d\u0430\u0441 \u0431\u0443\u0434\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nX.shape","da42a9cc":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 - Healthcare_1\n# \u0418 \u0443\u0434\u0430\u043b\u0430\u0435\u043c Price, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u0431\u0447\u0443\u0447\u0430\u0442\u044c \u044d\u0442\u0443 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u043c \u0442\u0435\u0441\u0442\u0435, \u0430 \u0442\u0430\u043c \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442\nX = X.drop(columns=['Id', 'DistrictId', 'Healthcare_1', 'Price'])","be469c63":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f \u043c\u043e\u0434\u0435\u043b\u044c\nX.columns.tolist()","5b9093eb":"# \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0442\u0430\u0440\u0433\u0435\u0442\u0430 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Healthcare_1, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 nan\ny = train_df.loc[~train_df['Healthcare_1'].isna(), 'Healthcare_1']","c23760d7":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0435\u0449\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0430\u0440\u0433\u0435\u0442\u0430\ny","56e8b4c0":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0435\u0449\u0435 \u0440\u0430\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nX","d240d1ee":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","a83f046e":"# \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u043b\u0435\u0441\u0430\nrf_model = RandomForestRegressor(criterion='mse',\n                                 max_depth=10, # \u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u0430  \n                                 min_samples_leaf=10, # \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439 \u0432 \u043b\u0438\u0441\u0442\u0435 \u0434\u0435\u0440\u0435\u0432\u0430\n                                 random_state=21, \n                                 n_estimators=100  # \u043a\u043e\u043b-\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432\n                                 )\n\nrf_model.fit(X_train, y_train)","dd7fb4a7":"# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\ny_train_preds = rf_model.predict(X_train)\ny_valid_preds = rf_model.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_valid_preds)","c0be0e8a":"class HealthcareNanFiller:\n    \"\"\" \u041a\u043b\u0430\u0441\u0441 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \"\"\"\n    \n    def __init__(self):\n        self.model = RandomForestRegressor(criterion='mse',\n                                           max_depth=10, # \u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u0430  \n                                           min_samples_leaf=10, # \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439 \u0432 \u043b\u0438\u0441\u0442\u0435 \u0434\u0435\u0440\u0435\u0432\u0430\n                                           random_state=21, \n                                           n_estimators=100  # \u043a\u043e\u043b-\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432\n                                          )\n        # \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439         \n        self.target_name = 'Healthcare_1'\n        # \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n        self.feature_names = ['Rooms', 'Square', 'LifeSquare','KitchenSquare','Floor','HouseFloor','HouseYear','Ecology_1','Ecology_2','Ecology_3',\n                              'Social_1','Social_2','Social_3','Helthcare_2','Shops_1','Shops_2','Rooms_outlier','KitchenSquare_outlier','Square_outlier',\n                              'LifeSquare_nan','LifeSquare_outlier','HouseFloor_outlier','HouseYear_outlier','DistrictSize','IsDistrictLarge','MedPriceByDistrict',\n                              'MedPriceByFloorYear','Healthcare_1_nan']\n    \n    def fit(self, X):\n        X_train = X[self.feature_names]\n        \n        # \u0423\u0431\u0438\u0440\u0430\u0435\u043c nan'\u044b\n        X_train = X_train[X_train['Healthcare_1_nan'] == 0]\n        y_train = X.loc[X['Healthcare_1_nan'] == 0, self.target_name]\n        \n        # \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\n        self.model.fit(X_train, y_train)\n        \n    \n    def transform(self, X):\n        # \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n        X_preds = X[self.feature_names]\n        # \u0414\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0431\u0435\u0440\u0435\u043c \u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 nan'\u0430\u043c\u0438\n        X_preds = X_preds[X_preds['Healthcare_1_nan'] == 1]\n        \n        # \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n        y_preds = self.model.predict(X_preds)\n        \n        # \u0417\u0430\u043c\u0435\u043d\u0438\u043c nan'\u044b\n        X.loc[X['Healthcare_1_nan'] == 1, self.target_name] = y_preds\n        \n        return X\n    \n    ","5dde8390":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\ntrain_df.columns.tolist()","39e5973a":"# \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfeature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear', \n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3', 'Healthcare_1','Helthcare_2', 'Shops_1', 'Shops_2']\n\n# \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0441\u0430\u043c\u0438\nnew_feature_names = ['KitchenSquare_outlier', 'Square_outlier', 'LifeSquare_nan', 'LifeSquare_outlier',\n                     'HouseFloor_outlier', 'Healthcare_1_nan', 'DistrictSize', 'IsDistrictLarge', \n                     'MedPriceByFloorYear']\n\n# \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\ntarget_name = 'Price'","05cd69ae":"# \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0437\u0430\u043d\u043e\u0432\u043e\ntrain_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\n# \u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0431\u0435\u0437 \u0442\u0430\u0440\u0433\u0435\u0442\u0430\nX = train_df.drop(columns=target_name)\n# \u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0438\u0437 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\ny = train_df[target_name]","cfca2d19":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 X \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","128e8ed4":"# \u041a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\npreprocessor = DataPreprocessing()\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435\npreprocessor.fit(X_train)\n\n# \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043a\u043e \u0432\u0441\u0435\u043c\u0443\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","5f674757":"# \u041a\u043b\u0430\u0441\u0441 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfeatures_gen = FeatureGenerator()\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435\nfeatures_gen.fit(X_train, y_train)\n\n# \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043a\u043e \u0432\u0441\u0435\u043c\u0443\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","5631e716":"# \u041a\u043b\u0430\u0441\u0441 \u043c\u043e\u0434\u0435\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 Healthcare_1\nfiller = HealthcareNanFiller()\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435\nfiller.fit(X_train)\n\n# \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043a\u043e \u0432\u0441\u0435\u043c\u0443\nX_train = filler.transform(X_train)\nX_valid = filler.transform(X_valid)\ntest_df = filler.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","4590978a":"# \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nX_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","c441a275":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432\nX_train.shape, X_valid.shape, test_df.shape","74a5a457":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\nX_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","348dc877":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c CatBoostRegressor \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\ncb_model = CatBoostRegressor(logging_level='Silent')\n\n# \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u0441\u0435\u0442\u043a\u0435\n# cb_model = CatBoostRegressor(depth=6, l2_leaf_reg=3, learning_rate=0.03)\n# \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u0441\u0435\u0442\u043a\u0435, \u043f\u043b\u044e\u0441 \u0440\u0443\u0447\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\n# cb_model = CatBoostRegressor(depth=8, l2_leaf_reg=3, learning_rate=0.03, min_data_in_leaf=5, n_estimators=500)","fb588a12":"# \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\ncb_model.fit(X_train,y_train,verbose=False)","12365f7e":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\ny_train_preds = cb_model.predict(X_train)\ny_valid_preds = cb_model.predict(X_valid)\n\n# \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435\nevaluate_preds(y_train, y_train_preds, y_valid, y_valid_preds)","0d78c552":"cv_score = cross_val_score(cb_model, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=21))\ncv_score","b88537a2":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438\nfeature_importances = pd.DataFrame(zip(X_train.columns, cb_model.feature_importances_), columns=['feature_name', 'importance'])\nfeature_importances.sort_values(by='importance', ascending=False)","6b349475":"# cb_model_test = CatBoostRegressor()\n# grid = {'learning_rate': [0.03, 0.05, 0.1],\n#         'depth': [4, 6, 8, 10],\n#         'l2_leaf_reg': [1, 3, 5, 7, 9],\n#         'logging_level':['Silent'],\n#         'random_seed': [21]\n#        }\n\n# gs = GridSearchCV(cb_model_test, grid, \n#                   scoring='r2', # \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \n#                   cv=KFold(n_splits=5,\n#                            random_state=21, \n#                            shuffle=True),\n#                   n_jobs=-1\n#                   )\n\n# gs.fit(X_train, y_train)","8726c040":"# \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u044e\u0442 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0443\u044e \u043c\u0435\u0442\u0440\u0438\u043a\u0443\n# \u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0438\u0441\u044c \u0442\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: depth=6, l2_leaf_reg=3, learning_rate=0.03\n# gs.best_params_","4ed188c7":"# \u041d\u0430\u0438\u043b\u0443\u0447\u0448\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430\n# gs.best_score_","2f73fd5b":"# \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0448\u0430\u0431\u043b\u043e\u043d \u0444\u0430\u0439\u043b\u0430 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043d\u0430 Kaggle\nsubmit = pd.read_csv('\/kaggle\/input\/course-project\/sample_submission.csv')\nsubmit.head()","2dca89d7":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\npredictions = cb_model.predict(test_df)\npredictions","72e7e7b0":"# \u041f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c\nsubmit['Price'] = predictions\nsubmit.head()","8cc03961":"# \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u043c\u0438 \u0432 \u0444\u0430\u0439\u043b\nsubmit.to_csv('cb_grid_upd.csv', index=False)","befb8fe1":"#### **LifeSquare** <a class='anchor' id='life_square'>","3a2a77a8":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 <a class='anchor' id='feature_generate'>","d6044539":"#### **Rooms** <a class='anchor' id='rooms'>","4f9c5d23":"### \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 <a class='anchor' id='corr_matrix'>","6a975b4e":"## \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 <a class='anchor' id='features'>","6d5d24c2":"#### **Ecology_2** <a class='anchor' id='ecology_2'>","bd4b2236":"\u0418\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443","3e2789ba":"\u0422\u0435\u043f\u0435\u0440\u044c \u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u043c\u0435\u043d\u044c\u0448\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443","65461794":"Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0433\u0434\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430","6395b257":"\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u044b\u044f\u0441\u043d\u0438\u043b\u0438, \u0447\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f = 0 \u0438 >= 6, \u043f\u043e\u043c\u0435\u0442\u0438\u043c \u0438\u0445 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u043c 1 \u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439","3ee1359a":"\u0414\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Shops_2 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438.","37e0f2ce":"#### **HouseYear** <a class='anchor' id='house_year'>","6cecba3d":"# \u041a\u043b\u0430\u0441c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 <a class='anchor' id='preprocessing_class'>","230cf900":"#### **Floor** <a class='anchor' id='floor'>","01137032":"\u041f\u0443\u0441\u0442\u044c \u0440\u0430\u0439\u043e\u043d\u044b, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u043c\u043e\u0432 \u0431\u043e\u043b\u044c\u0448\u0435 100, \u0431\u0443\u0434\u0443\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438, \u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u043c\u0438, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u044d\u0442\u043e\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f.","319b436f":"\u0421\u0430\u043c\u044b\u0435 \u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 0, 6, 10, 19, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445, \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u044d\u0442\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c","59ec1d83":"**\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","cadd8946":"\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 13 \u043c^2 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u044b \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u043f\u043e \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043d\u0438","4b43adcb":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","67eac059":"\u041d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043a\u0430\u043a \u0431\u0443\u0434\u0442\u043e \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u044d\u0442\u043e \u0434\u0430\u043b\u0435\u0435.","2b5d7616":"Square - \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","15ae120c":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u044d\u0442\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443 = Square - KitchenSquare - \u043f\u043e\u043f\u0440\u0430\u0432\u043a\u0430,\n\n\u0433\u0434\u0435 \u0437\u0430 \u043f\u043e\u043f\u0440\u0430\u0432\u043a\u0443 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Square - LifeSquare - KithcenSquare, \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0433\u0434\u0435 LifeSquare != nan","d45edf5f":"# \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435\n1. [\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445](#load)\n2. [EDA \u0438 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445](#eda)\n    * [\u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439](#target)\n    * [\u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#features)\n        * [\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438](#num_features) \n            * [Rooms](#rooms)\n            * [KitchenSquare](#kitchen_square)\n            * [Square](#square)\n            * [LifeSquare](#life_square)\n            * [HouseFloor](#house_floor)\n            * [Floor](#floor)\n            * [HouseYear](#house_year)\n            * [Healthcare_1](#healthcare_1)\n        * [\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438](#cat_features)\n            * [DistrictId](#district_id)\n            * [Ecology_2](#ecology_2)\n            * [Ecology_3](#ecology_3)\n            * [Shops_2](#shops_2)\n        * [\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439](#corr_matrix)\n    * [\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435](#target_feature_an)\n3. [\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445](#preprocessing_class)\n4. [\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#feature_generate)\n    * [Dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435](#dummies)\n    * [DistrictSize, IsDistrictLarge](#district)\n    * [MedPriceByDistrict](#med_price_by_district)\n    * [MedPriceByFloorYear](#med_price_by_floor_year)\n5. [\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#feature_generator)\n6. [\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 Healthcare_1](#healthcare_1_model)\n6. [\u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#features_select)\n7. [\u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test](#train_test_split)\n8. [\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438](#model)","50bf787e":"#### **DistrictId** <a class='anchor' id='district_id'>","431b3b57":"\u041a\u0430\u043a \u043c\u044b \u0432\u044b\u044f\u0441\u043d\u0438\u043b\u0438 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 Rooms \u0438 Square \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a Price. \u042d\u0442\u0443 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u0435\u0449\u0435 \u043f\u0440\u043e\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c jointplot.","663376d0":"\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e-\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438","1667e9fa":"**\u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f**","5f7edef1":"### \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 <a class='anchor' id='cat_features'>","482cfa7d":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test <a class='anchor' id='train_test_split'>","e3ed4a1e":"#### **Ecology_3** <a class='anchor' id='ecology_3'>","5bcc160d":"Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u0432 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0435.","df4e68a4":"\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0447\u0430\u0441\u0442\u043e\u0441\u0442\u043d\u043e\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0442\u043e \u0435\u0441\u0442\u044c \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 id \u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c","3039caaf":"**\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 LifeSquare**","3c719b78":"\u041d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u044d\u0442\u043e \u0434\u0430\u043b\u0435\u0435","c9947c7d":"# \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 <a class='anchor' id='feature_generator'>","f23dc696":"**\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430**","9d625996":"\u0414\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ecology_3 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438.","696469de":"\u0414\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ecology_2 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438.","5e5de806":"## DistrictSize, IsDistrictLarge <a class='anchor' id='district'>","bc27f7e8":"\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e-\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.","e70d88c9":"# EDA \u0438 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 <a class='anchor' id='eda'>","72e0d3e4":"## \u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <a class='anchor' id='target_feature_an'>","6b787317":"\u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043b\u0430 \u0445\u043e\u0440\u043e\u0448\u043e","c4e08e26":"\u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043b\u0438\u043d\u0438\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043f\u043e\u0447\u0442\u0438 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u0430\u044f, \u0447\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0441\u0438\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438.","25335f73":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 <a class='anchor' id='load'>","cd06a377":"**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n\n* **Id** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* **DistrictId** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* **Rooms** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* **Square** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* **LifeSquare** - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* **KitchenSquare** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* **Floor** - \u044d\u0442\u0430\u0436\n* **HouseFloor** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* **HouseYear** - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* **Ecology_1, Ecology_2, Ecology_3** - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* **Social_1, Social_2, Social_3** - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* **Healthcare_1, Helthcare_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* **Shops_1, Shops_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* **Price** - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","03cbef97":"Healthcare_1 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f","d6bbc9be":"**\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435**","a69a47c7":"DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430, \u0433\u0434\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430","23157c4e":"\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442 Rooms-Square, LifeSquare-Sqaure \u0435\u0441\u0442\u044c \u043f\u0440\u044f\u043c\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f, \u0442\u043e \u0435\u0441\u0442\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043c\u043d\u0430\u0442, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u044c, \u044d\u0442\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0442\u0440\u0430\u0436\u0435\u043d\u0430 \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439. \u0422\u0430\u043a\u0436\u0435 \u0432\u0438\u0434\u043d\u043e, \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 Rooms \u0438 Square \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a Price \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0445 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u043f\u0440\u044f\u043c\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f > 0.5, \u043d\u0430 \u0438\u0445 \u043e\u0441\u043d\u043e\u0432\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c Target Encoding, \u043e\u0434\u043d\u0430\u043a\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u0443 \u0441\u0438\u043b\u044c\u043d\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e (\u0442\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 - \u0441\u0438\u043b\u044c\u043d\u0430\u044f \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438). \u0422\u0430\u043a\u0436\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0441\u0438\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 Social_1-Social_2 (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043f\u043e\u0447\u0442\u0438 1). \u0412 \u0446\u0435\u043b\u043e\u043c \u044d\u0442\u043e \u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u0431\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438.","07f32099":"### \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 <a class='anchor' id='num_features'>","4ba13435":"\u0422\u0435\u043f\u0435\u0440\u044c \u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u043c\u0435\u043d\u044c\u0448\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443","2fbb9fe8":"KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","03f1a151":"HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430","1e2f60db":"#### **Shops_2** <a class='anchor' id='shops_2'>","76747b1e":"## Dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 <a class='anchor' id='dummies'>","d53243c0":"#### **KitchenSquare** <a class='anchor' id='kitchen_square'>","72ffdc92":"#### **Healthcare_1** <a class='anchor' id='healthcare_1'>","7ab1e2f1":"LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","64f8dec5":"Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432 \u0432 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0433\u0434\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430","36a69155":"\u041f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u0438 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","61d87a39":"Floor - \u044d\u0442\u0430\u0436 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","5783979d":"**\u041f\u043e\u0438\u0441\u043a \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u043e \u0441\u0435\u0442\u043a\u0435 \u0434\u043b\u044f CatBoost**","e26a313c":"\u041f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u0438 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043a\u0430\u043a \u0431\u0443\u0434\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442, \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0441 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043e\u043c\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u044d\u0442\u0430\u0436 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u044d\u0442\u0430\u0436 \u0434\u043e\u043c\u0430\n\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","0845c9f7":"**\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 LifeSquare**","82434694":"# \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 <a class='anchor' id='features_select'>","38e638af":"\u041e\u0444\u043e\u0440\u043c\u0438\u043c \u0441\u0430\u043c \u043a\u043b\u0430\u0441\u0441","ed68784e":"HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435","76febef8":"## MedPriceByDistrict <a class='anchor' id='med_price_by_district'>","71e7c553":"#### **HouseFloor** <a class='anchor' id='house_floor'>","a5b9b46f":"\u0411\u044b\u043b \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d \u043f\u043e\u0438\u0441\u043a \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u043e \u0441\u0435\u0442\u043a\u0435, \u0438 \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u0431\u044b\u043b\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0430. \u0422\u0430\u043a\u0436\u0435 \u0431\u044b\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0430 \u0440\u0443\u0447\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u044d\u0442\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435, \u043e\u0434\u043d\u0430\u043a\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043d\u0435 \u043e\u043a\u0430\u0437\u0430\u043b\u0438\u0441\u044c \u043b\u0443\u0447\u0448\u0435 \u0442\u0435\u0445, \u0447\u0442\u043e \u0431\u044b\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u043f\u0440\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.","6ad50b19":"\u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","48d9e1bb":"\u0411\u044b\u043b\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0442\u0440\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 RandomForestRegressor, GradientBoosting \u0438 CatBoostRegressor. \u0421\u0430\u043c\u044b\u0439 \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0438 \u0431\u044b\u043b \u043f\u043e\u043a\u0430\u0437\u0430\u043d \u043c\u043e\u0434\u0435\u043b\u044c\u044e CatBoostRegressor, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0430\u043b\u0435\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u044d\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c.","484e6e71":"#### **Square** <a class='anchor' id='square'>","88382d61":"## MedPriceByFloorYear <a class='anchor' id='med_price_by_floor_year'>","fbe6100d":"\u0411\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c, \u0447\u0442\u043e \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 97.5% \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f - \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0438\u0445 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439\n\n\n\u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u043f\u043b\u043e\u0449\u0430\u0434\u0438 <=3 \u044d\u0442\u043e \u0442\u043e\u0436\u0435 \u0432\u044b\u0431\u0440\u043e\u0441 \u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u043c 3","7c7b82b1":"\u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u043f\u0440\u0438 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438","e491a2c7":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0446\u0435\u043d \u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0432 \u041c\u043e\u0441\u043a\u0432\u0435. \u0420\u0430\u0431\u043e\u0442\u0430 \u0431\u044b\u043b\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043f\u043e \u043a\u0443\u0440\u0441\u0443 \"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Python \u0434\u043b\u044f Data Science: Numpy, Matplotlib, Scikit-learn\".","d504602c":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 <a class='anchor' id='model'>","501ae5d9":"Ecology_2 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0433\u0434\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430","a8e593d3":"\u041d\u0435\u043a\u043e\u0442\u0440\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f TargetEncoding.","2b64ad68":"# \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 Healthcare_1 <a class='anchor' id='healthcare_1_model'>","b71dc335":"\u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u0446\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430.","0a78e139":"\u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043a\u0430\u043a \u0431\u0443\u0434\u0442\u043e \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u044d\u0442\u043e \u0434\u0430\u043b\u0435\u0435","d250e0f9":"## \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 <a class='anchor' id='target'>","f4785eb0":"\u0418\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443"}}