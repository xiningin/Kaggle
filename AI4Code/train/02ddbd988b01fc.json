{"cell_type":{"95e46f7f":"code","93804770":"code","ac24b1cd":"code","76b741e5":"code","26114530":"code","24510a32":"code","46857861":"code","d71828e8":"code","386424ab":"code","c901a915":"code","a8de9fcb":"code","ec420ac4":"code","391926bf":"code","84587d2a":"code","b7f2b9ee":"code","5ce05f4e":"code","d54d5627":"code","bdbe4565":"code","3a3c7491":"code","9cc649dc":"code","01173ea7":"code","9e464df5":"code","94e37d1d":"code","2f42cfaf":"code","39d2b456":"markdown","7af6f01f":"markdown","caed3a56":"markdown","9069e05e":"markdown","91e8514a":"markdown","5c8e853d":"markdown","3108f7de":"markdown","3eef0a55":"markdown","4b8e9e31":"markdown"},"source":{"95e46f7f":"import numpy as np\nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","93804770":"import seaborn as sns\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nfrom matplotlib import style\nfrom xgboost import XGBRegressor\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport math\n","ac24b1cd":"def root_mean_squared_log_error(y_valid, y_preds):\n    \"\"\"Calculate root mean squared error of log(y_true) and log(y_pred)\"\"\"\n    if len(y_preds)!=len(y_valid): return 'error_mismatch'\n    y_preds_new = [math.log(x) for x in y_preds]\n    y_valid_new = [math.log(x) for x in y_valid]\n    return mean_squared_error(y_valid_new, y_preds_new, squared=False)","76b741e5":"house_data = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv.gz')\nhouse_data.head()","26114530":"house_data.shape","24510a32":"print(house_data.columns[house_data.isna().any()].tolist())\nlen(house_data.columns[house_data.isna().any()].tolist())","46857861":"plt.rcParams['figure.figsize']=35,35\ng = sns.heatmap(house_data.corr(),annot=True, fmt = \".1f\", cmap = \"coolwarm\" )","d71828e8":"sns.barplot(x='YearRemodAdd', y='SalePrice', data=house_data, palette=\"rocket\")","386424ab":"sns.barplot(x='YearBuilt', y='SalePrice', data=house_data, palette=\"rocket\")","c901a915":"sns.barplot(x='LandSlope', y='SalePrice', data=house_data)","a8de9fcb":"sns.barplot(x='LandContour', y='SalePrice', data=house_data)","ec420ac4":"sns.barplot(x='OverallQual', y='SalePrice', data=house_data)","391926bf":"sns.barplot(x='GarageCars', y='SalePrice', data=house_data)","84587d2a":"sns.barplot(x='Fireplaces', y='SalePrice', data=house_data)","b7f2b9ee":"lot_price = house_data['LotArea'] + house_data['SalePrice']\nsns.distplot(lot_price).bins= '100'","5ce05f4e":"frontage_price = house_data['LotFrontage'] + house_data['SalePrice']\nsns.distplot(frontage_price)","d54d5627":"features = [x for x in house_data.columns if x not in ['SalePrice']]\nX = house_data[features]\ny = house_data['SalePrice']\nX.columns.to_list()","bdbe4565":"X_feat_eng = X.copy()\nX_feat_eng['years_since_update'] = X_feat_eng['YearRemodAdd'] - X_feat_eng['YearBuilt']\nX_feat_eng['geometry'] = X_feat_eng['LotArea'] \/ X_feat_eng['LotFrontage']\nX_feat_eng['land_topology'] = X_feat_eng['LandSlope'] + '_' + X_feat_eng['LandContour']\nX_feat_eng['value_proposition'] = X_feat_eng['YearBuilt'] * X_feat_eng['OverallQual']\nX_feat_eng['finished_basement'] = X_feat_eng['BsmtFinSF1'] > 0\nX_feat_eng['garage_value'] = X_feat_eng['YearBuilt'] * X_feat_eng['GarageCars']\nX_feat_eng['misc_value'] = X_feat_eng['Fireplaces'] + X_feat_eng['OverallQual']\n\nX_feat_eng = X_feat_eng.drop(columns=['GarageCars'])\n\nfeature_numerical_cols = [cname for cname in X_feat_eng.columns if \n                X_feat_eng[cname].dtype in ['int64', 'float64']]\n\nfeature_categorical_cols = [cname for cname in X_feat_eng.columns if\n                    X_feat_eng[cname].nunique() < 50 and \n                    X_feat_eng[cname].dtype in ['object', 'bool']]\n\n\nfeature_numerical_transformer = SimpleImputer(strategy='constant')\n\nfeature_categorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])","3a3c7491":"feature_preprocessor = ColumnTransformer(\n    transformers=[\n        ('num', feature_numerical_transformer, feature_numerical_cols),\n        ('cat', feature_categorical_transformer, feature_categorical_cols)\n])\n","9cc649dc":"feature_model = XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.6, gamma=0.0, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.02, max_delta_step=0, max_depth=4,\n             min_child_weight=0.0, monotone_constraints='()',\n             n_estimators=1250, n_jobs=0, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=0.8,\n             tree_method='exact', validate_parameters=1, verbosity=None)\n\nfeature_clf = Pipeline(steps=[('feature_preprocessor', feature_preprocessor),('feature_model', feature_model)])\n\nfeature_X_train, feature_X_valid, feature_y_train, feature_y_valid = train_test_split(X_feat_eng, y, random_state=0)\n\nfeature_clf.fit(feature_X_train, feature_y_train, feature_model__verbose=False) \nfeature_preds = feature_clf.predict(feature_X_valid)","01173ea7":"print('RMSLE:', root_mean_squared_log_error(feature_y_valid, feature_preds))","9e464df5":"X_test = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv.gz')","94e37d1d":"X_test['years_since_update'] = X_test['YearRemodAdd'] - X_test['YearBuilt']\nX_test['geometry'] = X_test['LotArea'] \/ X_test['LotFrontage']\nX_test['land_topology'] = X_test['LandSlope'] + '_' + X_test['LandContour']\nX_test['value_proposition'] = X_test['YearBuilt'] * X_test['OverallQual']\nX_test['finished_basement'] = X_test['BsmtFinSF1'] > 0\nX_test['garage_value'] = X_test['YearBuilt'] * X_test['GarageCars']\nX_test['misc_value'] = X_test['Fireplaces'] + X_test['OverallQual']\n\nX_test = X_test.drop(columns=['GarageCars'])\n\nfeature_clf.fit(X_feat_eng, y, feature_model__verbose=False)","2f42cfaf":"pred = feature_clf.predict(X_test)\nopt = pd.DataFrame({'Id': X_test.Id,\n                       'SalePrice': pred})\nopt.to_csv('submission.csv', index=False)","39d2b456":"# Libraries","7af6f01f":"Here in matplotlib you can change the default rc setting by using rcParams","caed3a56":"**Error**","9069e05e":"Model Creation for Housing Prices\n# Housing Prices Competition for Kaggle Learn Users\nOngoing\nTop 3%\n\n\n\n\nHousing Prices Competition for Kaggle Learn Users : https:\/\/www.kaggle.com\/c\/home-data-for-ml-course\n\nHouse Prices - Advanced Regression Techniques : https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques","91e8514a":"Special thanks to **@Erkan Hatipo\u011flu** for the following function.","5c8e853d":"# Data ","3108f7de":"Initial Data Load and Analysis","3eef0a55":"# Exploratory Dat Analysis","4b8e9e31":"# Feature and Prediction Target Split"}}