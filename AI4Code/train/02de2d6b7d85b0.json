{"cell_type":{"aadf9460":"code","7643b5e4":"code","291c37ba":"code","07bd1aa9":"code","9c05f8a4":"code","b17b753f":"code","ed06b831":"code","f84f076c":"code","7f37f033":"code","5c18a0c7":"code","2ca0ee92":"code","e88817e9":"code","ba2cdb81":"code","b2b16c72":"code","d35ddf9e":"code","45c53993":"code","b47d97a3":"code","3136c46a":"code","1a72e8f1":"code","8cbb3043":"code","834f20f9":"code","217624c9":"code","74976d68":"code","5055ed45":"code","ebdbd087":"code","3cbf411e":"code","3f334c7a":"code","4bdb6c8c":"code","af99e8c4":"markdown","bc477764":"markdown","bf396781":"markdown","ae5f3581":"markdown","9a47d280":"markdown","920f9813":"markdown","e652462b":"markdown","17b242b9":"markdown","c09d16ca":"markdown","e596e3d7":"markdown","06a4814e":"markdown","b35515ec":"markdown","813b6ec0":"markdown"},"source":{"aadf9460":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7643b5e4":"lol_df = pd.read_csv(\"\/kaggle\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv\")","291c37ba":"lol_df.head()\n","07bd1aa9":"lol_df.describe","9c05f8a4":"lol_df.info()","b17b753f":"blue_df = lol_df.iloc[:,1:20]\nred_df = lol_df.iloc[:,21:]\nred_df[\"redWins\"] = lol_df.blueWins\nred_df[\"redWins\"] = [1 if i==0 else 0 for i in red_df[\"redWins\"]]","ed06b831":"fig, ax = plt.subplots(figsize=(20,5))\nsns.heatmap(blue_df.corr(), annot = True, fmt = \".2f\",ax=ax)\nplt.show()","f84f076c":"fig, ax = plt.subplots(figsize=(20,5))\nsns.heatmap(red_df.corr(), annot = True, fmt = \".2f\",ax=ax)\nplt.show()","7f37f033":"sns.countplot(lol_df.blueWins)\n#sns.countplot(kill.manner_of_death)\nplt.title(\"Blue Wins\",color = 'blue',fontsize=15)","5c18a0c7":"g = sns.factorplot(x = \"redWins\", y = \"redTotalExperience\", kind = \"bar\", data = red_df, size = 6)\ng.set_ylabels(\"Red Total Experince\")\ng.set_xlabels(\"Red Wins\")\nplt.show()","2ca0ee92":"g = sns.factorplot(x = \"blueWins\", y = \"blueTotalExperience\", kind = \"bar\", data = blue_df, size = 6)\ng.set_ylabels(\"Blue Total Experince\")\ng.set_xlabels(\"Blue Wins\")\nplt.show()","e88817e9":"g = sns.factorplot(x = \"blueWins\", y = \"blueAvgLevel\", kind = \"bar\", data = blue_df, size = 6)\ng.set_ylabels(\"Blue Average Level\")\ng.set_xlabels(\"Blue Wins\")\nplt.show()","ba2cdb81":"g = sns.factorplot(x = \"redWins\", y = \"redAvgLevel\", kind = \"bar\", data = red_df, size = 6)\ng.set_ylabels(\"Blue Average Level\")\ng.set_xlabels(\"Blue Wins\")\nplt.show()","b2b16c72":"g = sns.factorplot(x = \"redWins\", y = \"redTotalGold\", kind = \"bar\", data = red_df, size = 6)\ng.set_ylabels(\"Red Total Gold\")\ng.set_xlabels(\"Red Wins\")\nplt.show()","d35ddf9e":"g = sns.factorplot(x = \"blueWins\", y = \"blueCSPerMin\",data=lol_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Blue CS Per min\")\ng.set_xlabels(\"Blue Wins\")\na = sns.factorplot(x = \"blueWins\", y = \"redCSPerMin\",data=lol_df ,kind = \"bar\", size = 6)\na.set_ylabels(\"Red CS Per min\")\na.set_xlabels(\"Blue Wins\")\nplt.show()\n","45c53993":"list1=lol_df[lol_df.columns[1:-1]].apply(lambda x: x.corr(lol_df['blueWins']))\nlist2=[]\nfor i in list1.index:\n    if (-0.2<list1[i]<0.2):\n        list2.append(i)\n        \nlol_df.drop(list2,axis=1,inplace=True)\nlol_df.drop(\"gameId\",axis=1,inplace=True)","b47d97a3":"y=lol_df[\"blueWins\"]\nx=lol_df.iloc[:,1:]","3136c46a":"\nx = (x-np.min(x))\/(np.max(x)-np.min(x))","1a72e8f1":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=42)","8cbb3043":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\n\ngrid = {\"n_neighbors\":np.arange(1,50)}\n\nknn = KNeighborsClassifier()\n\nknn_cv=GridSearchCV(knn,grid,cv=10)\n\nknn_cv.fit(x_train,y_train)\n\nprint(\"tuned hypermeter = \",knn_cv.best_params_)\n\nprint(\"tuned hypermeter = \",knn_cv.best_score_)","834f20f9":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier \ngrid = {\"n_estimators\":[100,200,300,400,500]}\nrf = RandomForestClassifier()\nrf_cv=GridSearchCV(rf,grid,cv=10,n_jobs = -1,verbose = 1)\nrf_cv.fit(x_train,y_train)\nprint(\"tuned hypermeter = \",rf_cv.best_params_)\n\nprint(\"tuned hypermeter = \",rf_cv.best_score_)","217624c9":"from sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier()\ndt_param_grid={\"min_samples_split\":range(10,500,20),\n              \"max_depth\":range(1,20,2)}\ndt_cv=GridSearchCV(dt,dt_param_grid,cv=10)\ndt_cv.fit(x_train,y_train)\nprint(\"tuned hypermeter = \",dt_cv.best_params_)\n\nprint(\"tuned hypermeter = \",dt_cv.best_score_)","74976d68":"from sklearn.svm import SVC\n\nsvm =SVC()\nfrom sklearn.model_selection import cross_val_score\n\naccuracies = cross_val_score(estimator=svm,X = x_train,y = y_train,cv=10)\n\nprint(\"mean =\", np.mean(accuracies))\n\nprint(\"std =\", np.std(accuracies))","5055ed45":"from sklearn.naive_bayes import GaussianNB\n\nnb=GaussianNB()\n\naccuracies2 = cross_val_score(estimator=nb,X = x_train,y = y_train,cv=10)\n\nprint(\"mean =\", np.mean(accuracies2))\n\nprint(\"std =\", np.std(accuracies2))","ebdbd087":"from sklearn.linear_model import LogisticRegression\n\nparam_girid = {\"C\":np.logspace(-3,3,7),\"penalty\":[\"l1\",\"l2\"]} #l1=lassa l2 =ridge\n\nlogreg= LogisticRegression()\n\nlogreg_cv=GridSearchCV(logreg,param_girid,cv=10)\n\nlogreg_cv.fit(x_train,y_train)\n\n\nprint(\"tuned hyperparameter = \",logreg_cv.best_params_)\n\nprint(\"accuracy = \", logreg_cv.best_score_)","3cbf411e":"from sklearn.metrics import confusion_matrix\nlog_reg = LogisticRegression(C=1, penalty=\"l2\")\nlog_reg.fit(x_train,y_train)\ny_predict=log_reg.predict(x_train)\ncm = confusion_matrix(y_train,y_predict)\n\n#%%\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nf , ax = plt.subplots(figsize=(5,5))\n\nsns.heatmap(cm,annot = True,linewidths =0.5,linecolor =\"Red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()\nprint(\"Score= \",log_reg.score(x_test,y_test))","3f334c7a":"from sklearn.metrics import confusion_matrix\nnb=GaussianNB()\nnb.fit(x_train,y_train)\ny_predict2=nb.predict(x_train)\ncm = confusion_matrix(y_train,y_predict2)\n\n#%%\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nf , ax = plt.subplots(figsize=(5,5))\n\nsns.heatmap(cm,annot = True,linewidths =0.5,linecolor =\"Red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()\nprint(\"Score= \",nb.score(x_test,y_test))","4bdb6c8c":"from sklearn.ensemble import VotingClassifier\nvotingC = VotingClassifier(estimators = [(\"lr\",LogisticRegression(C=1, penalty=\"l2\")),\n                                        (\"gnb\",GaussianNB())],                        \n                                        voting = \"soft\")\nvotingC = votingC.fit(x_train, y_train)\nprint(\"Score= \", votingC.score(x_test,y_test))","af99e8c4":"## Correlation for Blue Team","bc477764":"1. [Load and Check Data](#1)\n2. [Visualization Part](#2)\n3. [SuperVised Classification](#3)","bf396781":"## Correlation for Blue Team","ae5f3581":"* Gold Difference vs Number of Wins","9a47d280":"* Average Level vs Number of Wins","920f9813":"## KNN","e652462b":"<a id=\"1\" >\n\n# Load and Check Data","17b242b9":"<a id=\"2\" >\n    \n# Visualization Part","c09d16ca":"* Number of Blue Wins and Loss","e596e3d7":"## Random Forest","06a4814e":"## Decision Tree","b35515ec":"<a id=\"3\" >\n    \n# SuperVised Classification","813b6ec0":"* Total Experince vs Number of Wins"}}