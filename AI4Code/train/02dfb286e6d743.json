{"cell_type":{"52a75817":"code","0c9960a3":"code","5193dc78":"code","a4648d93":"code","2f949577":"code","87a17b16":"code","31764a9e":"code","18464e88":"code","f2c311b9":"code","45cd839b":"code","2293267f":"code","751251aa":"code","c7589715":"code","e058b643":"code","40d985cf":"code","eaf1f585":"code","9940b76c":"code","ef520bef":"markdown","651dc1bf":"markdown","f1fbf7ea":"markdown","e7f70004":"markdown","310304a1":"markdown","24c8df3d":"markdown","8f3916da":"markdown","5afa27a4":"markdown","dc5290c6":"markdown","48fd76bc":"markdown"},"source":{"52a75817":"import numpy as np # linear algebra\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport re\n%matplotlib inline","0c9960a3":"# Loading the data\ndf= pd.read_csv('..\/input\/planecrashinfo_20181121001952.csv')\ndf.head(2)","5193dc78":"#we have to replace '?' with NaN\ndf.replace(\"?\", np.nan, inplace = True)\ndf.head(2)","a4648d93":"df.shape","2f949577":"#check for where all there are missing values\ndf.isnull().nunique()","87a17b16":"#plot to see which columns have most missing values\nn = np.arange(13)\n# x stores the data returned by isnull().value_counts() on each column\nx = [[df.iloc[:,i].isnull().value_counts()]for i in range(13)]\n\n#y stores only the \"false\" of the isnull().value_counts()\ny = [x[i][0][0] for i in range(len(x))]\ny.sort()\n\ny","31764a9e":"plt.bar(n, y, 0.45)\nplt.title(\"Count of non-missing values in our dataset\")\nplt.xticks(n, df.columns, rotation =90)\nplt.xlabel(\"columns\")\nplt.ylabel(\"number of non-missing values\")\nplt.show()","18464e88":"df[\"aboard_numbers\"] = df[\"aboard\"].str[0:4].str.strip()\ndf[\"aboard_numbers\"].str.replace(\"^\\?\", \"?\")\ndf[\"aboard_numbers\"].replace(\"?\", np.nan, inplace = True)\ndf[\"aboard_numbers\"].isnull().value_counts()\n","f2c311b9":"df[\"aboard_numbers\"].replace(\"?\", np.nan, inplace = True)\ndf[\"aboard_numbers\"] = pd.to_numeric(df[\"aboard_numbers\"] )\ndf[\"aboard_numbers\"].isnull().value_counts()","45cd839b":"df[\"fatalities\"].head(5)","2293267f":"# pd.Series(df.fatalities == '?').value_counts()#no '?'\ndf[\"fatalities\"] = df[\"fatalities\"].str[0:4].str.strip()\ndf[\"fatalities\"].str.replace(\"^\\?\", \"?\")\ndf[\"fatalities\"].replace(\"?\", np.nan, inplace = True)\ndf[\"fatalities\"] = pd.to_numeric(df[\"fatalities\"] )\n\n","751251aa":"df[\"fatalities\"].isnull().value_counts()","c7589715":"df_operator = df[[\"aboard_numbers\", \"fatalities\", \"operator\"]]","e058b643":"df_operator.operator.value_counts()[0:10].plot(kind='bar',figsize=(16,8),title='Frequency of crash based on operator')","40d985cf":"df_operator.groupby(\"operator\")[[\"fatalities\"]].sum().sort_values(by = \"fatalities\", ascending = False)[0:10].plot(kind='bar',figsize=(16,8),title='Fatalities Based on Operator')","eaf1f585":"df_op_act = df[[\"operator\", \"ac_type\", \"fatalities\", \"aboard_numbers\"]]\ndf_aeroflot_actype = df_op_act[df_op_act[\"operator\"] == \"Aeroflot\"].ac_type.value_counts()[:13].plot(kind='bar',figsize=(16,8),title='Frequency of crash based on ac_type')\n","9940b76c":"\ndf_aeroflot_ac_vs_fatalities = df_op_act[df_op_act[\"operator\"] == \"Aeroflot\"].groupby([\"ac_type\"])[[\"fatalities\"]].sum().sort_values(by = \"fatalities\", ascending = False)[:13]\ndf_aeroflot_ac_vs_fatalities.reset_index(inplace = True)\ndf_aeroflot_ac_vs_fatalities.plot.bar(x = \"ac_type\", y= \"fatalities\")\n","ef520bef":"Aeroflot has large numbers of crashes and fatalities, let us look at them","651dc1bf":"We have to do the same thing for fatalities","f1fbf7ea":"we can drop the NaN values as they are very few in number","e7f70004":"We see that we have \"?\" instead of NA's, let's remove them first","310304a1":"We will extract the non-missing values and see which columns have the most missing values.","24c8df3d":"Let us see the top 10 operators with highest fatilities ","8f3916da":"If we check the \"aboard\" columns, it still has \"?\" values, we shall replace the \"?\" using regex","5afa27a4":"Let us see which operator are the most frequent to crash","dc5290c6":"Now we will replace those remaining '?' with a NaN","48fd76bc":"We import the required libraries"}}