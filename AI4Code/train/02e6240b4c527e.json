{"cell_type":{"9dc4caa9":"code","ffbbe63a":"code","b483597d":"code","7c97caa2":"code","ffbfa0cc":"code","ffcd5a7b":"code","82385948":"code","bd232b2a":"code","46e8df70":"code","b7781ece":"code","3089138d":"code","b5cc7a15":"code","8247dfe7":"code","6c816936":"code","74b4be8f":"code","5af96e8b":"code","226e015d":"code","1d96f58f":"code","1aff1d60":"code","6cd530d7":"markdown","96fc954f":"markdown","3e252c82":"markdown","9412a30c":"markdown","23b89f13":"markdown","5d5f913f":"markdown","9fb759db":"markdown","64515b8c":"markdown","9c61cfd6":"markdown","1851c83f":"markdown","d0256822":"markdown","aa5c79ea":"markdown","1e515a81":"markdown","731c2603":"markdown","167b1b37":"markdown","9c152a3f":"markdown","c4d7f94a":"markdown","c8c15669":"markdown","e552a57d":"markdown","f33bc603":"markdown","f6b4b42f":"markdown","b88350b6":"markdown","f924fd69":"markdown","ee0a5edb":"markdown","9fb137de":"markdown","e1e2752c":"markdown","8f0ebb21":"markdown","25ac4070":"markdown"},"source":{"9dc4caa9":"import numpy as np\nimport tensorflow as tf  # Importing the TensorFlow Library\nfrom tensorflow import keras  # Import Keras from TensorFlow","ffbbe63a":"from tensorflow.keras import Sequential\nfrom tensorflow.keras import layers","b483597d":"# Define Sequential model with 3 layers\nmodel = keras.Sequential(\n    [\n        layers.Dense(2, activation=\"relu\", name=\"layer1\"),\n        layers.Dense(3, activation=\"relu\", name=\"layer2\"),\n        layers.Dense(4, name=\"layer3\"),\n    ]\n)\n# Call model on a test input\nx = tf.ones((3, 3))\ny = model(x)\ny","7c97caa2":"# Create 3 layers\nlayer1 = layers.Dense(2, activation=\"relu\", name=\"layer1\")\nlayer2 = layers.Dense(3, activation=\"relu\", name=\"layer2\")\nlayer3 = layers.Dense(4, name=\"layer3\")\n\n# Call layers on a test input\nx = tf.ones((3, 3))\ny = layer3(layer2(layer1(x)))  # <-- notice how layers are stacked ","ffbfa0cc":"model = keras.Sequential(\n    [\n        layers.Dense(2, activation=\"relu\"),\n        layers.Dense(3, activation=\"relu\"),\n        layers.Dense(4),\n    ]\n)","ffcd5a7b":"model = keras.Sequential()\nmodel.add(layers.Dense(2, activation=\"relu\"))\nmodel.add(layers.Dense(3, activation=\"relu\"))\nmodel.add(layers.Dense(4))","82385948":"model = keras.Sequential(name=\"my_sequential\")\nmodel.add(layers.Dense(2, activation=\"relu\", name=\"layer1\"))\nmodel.add(layers.Dense(3, activation=\"relu\", name=\"layer2\"))\nmodel.add(layers.Dense(4, name=\"layer3\"))","bd232b2a":"# Method 1\nmodel = keras.Sequential()\nmodel.add(keras.Input(shape=(4,))) # Why (4,) and not 4? Because we want our input to be a Vector (1D Tensor)\nmodel.add(layers.Dense(2, activation=\"relu\"))","46e8df70":"# Method 2\nmodel = keras.Sequential()\nmodel.add(layers.Dense(2, activation=\"relu\", input_shape=(4,)))  # Combining the 2 code lines into 1","b7781ece":"model.summary()","3089138d":"from tensorflow.keras.utils import plot_model\nplot_model(model)","b5cc7a15":"# example of a model defined with the sequential api\n\n# define the model\nmodel = Sequential()\nmodel.add(layers.Dense(10, input_shape=(8,)))  \nmodel.add(layers.Dense(1))\n\nmodel.summary()","8247dfe7":"# example of a model defined with the sequential api\nfrom tensorflow.keras.layers import Dense\n\n# define the model\nmodel = Sequential()\nmodel.add(Dense(100, input_shape=(8,)))\nmodel.add(Dense(80))\nmodel.add(Dense(30))\nmodel.add(Dense(10))\nmodel.add(Dense(5))\nmodel.add(Dense(1))\n\nmodel.summary()","6c816936":"plot_model(model)","74b4be8f":"from tensorflow.keras import Input\n\n# define the layers\nx_in = Input(shape=(8,))","5af96e8b":"dense = layers.Dense(64, activation=\"relu\")\nx = layers.Dense(10)(x_in)","226e015d":"x_out = layers.Dense(1)(x)","1d96f58f":"# example of a model defined with the functional api\nfrom tensorflow.keras import Model\n\n# define the layers\nx_in = Input(shape=(8,))\nx = Dense(10)(x_in)\nx_out = Dense(1)(x)\n# define the model\nmodel = Model(inputs=x_in, outputs=x_out)\n\n# print summary\nmodel.summary()","1aff1d60":"plot_model(model)","6cd530d7":"In the above summary you can see that:\n* The name of our model is \"sequential_4\"\n* It has one layer of type Dense\n* The output shape of the layer is (None,2). \n\n  The output shapes are given by `(batch_size, units)`. Since we haven't specified a batch size and have the no. of units as 2, the output shape became (None,2).\n* The number of parameters is 10. \nThe number of parameters in a Dense Layer are calculated as :\n\n\n  ```\n        number_parameters = output_size * (input_size + 1) \n  ```\n  So in this case, # parameters = 2 * (4+1) = 2*5 = 10\n\n**The number along with the layer i.e the 7 in dense_7 or along with model name i.e 4 in \"sequential_4\" is automatically generated by Tensorflow Keras, starting from 1. Each time you create a new layer, it is assigned a new number so that the autogenerated names of layers are unique and do not clash between each other.**","96fc954f":"Instead of typing layers.Dense again and again, we can import Dense from tensorflow.keras.layers and use it directly.\n\nFor example, here is a deep MLP with five hidden layers. ","3e252c82":"### 2.5 Model Summary\nTensorflow Keras provides a way to summarize a model. It can be very useful when building a Sequential model incrementally to be able to display the summary of the model.\n\nThe summary is textual and includes information about:\n\n1. The layers and their order in the model.\n2. The output shape of each layer.\n3. The number of parameters (weights) in each layer.\n4. The total number of parameters (weights) in the model.\n\nThe summary can be created by calling the summary() function on the model as `model.summary`.\n\nNote: The Input Layer is not displayed in summary because it merely decides the input shape and is not necessarily a layer.","9412a30c":"There are two ways to create a model using Layers:\n1. Sequential Models\n2. Functional Models\n\nLet's have a look at both of them.","23b89f13":"### 2.6 Plotting a Model\nIt's always nice to visualise the models and see how each layer is connected to another. This can be done with the `plot_model` function from `tensorflow.keras.utils`.\n\nCurrently, our model only has 1 Dense Layer so the displayed architecture will be very simple.\n\nPlotting models is particularly useful in case of large models involving many interconnected layers.","5d5f913f":"In general, it's a recommended best practice to always specify the input shape of a Sequential model in advance if you know what it is.","9fb759db":"4. Once connected, we define a Model object and specify the input and output layers. The complete example is listed below.","64515b8c":"is equivalent to this function:","9c61cfd6":"2. You create a new node in the graph of layers by calling a layer on this inputs object.\nNext, a fully connected layer can be connected to the input by calling the layer and passing the input layer. This will return a reference to the output connection in this new layer.","1851c83f":"Remember that the model summary in Sequential API didn't display the input layer? \n\nThe Functional API displays the Input Layer in model summary as well.","d0256822":"As such, the Functional API allows for more complicated model designs, such as models that may have multiple input paths (separate vectors) and models that have multiple output paths (e.g. a word and a number).\n\nThe functional API can be a lot of fun when you get used to it.","aa5c79ea":"You can also create a Sequential model incrementally via the `add()` method:","1e515a81":"Note that the visible layer of the network is defined by the \u201cinput_shape\u201d argument on the first hidden layer. That means in the above example, the model expects the input for one sample to be a vector of eight numbers.\n\nThe sequential API is easy to use because you keep calling model.add() until you have added all of your layers.\n\n","731c2603":"### 2.4 Adding an Input \nGenerally, all layers in Keras need to know the shape of their inputs in order to be able to create their weights since the shape of the weights depends on the shape of the inputs.\n\nWhen you create a\nSequential model without an input shape, it isn't \"built\": it has no weights. The weights are created\nwhen the model first sees some input data.\n\nOne easy way to do that is to start your model by passing an Input object to your model, so that it knows its input shape from the start:","167b1b37":"## 2.Sequential Model API\nThe sequential model API is the **simplest** and is the recommended API when getting started.\n\nSequential model can be thought of as a **plain stack of layers** \n\nIt is referred to as \u201csequential\u201d because it involves defining a Sequential class and adding layers to the model one by one in a linear manner, from input to output.\n\n\n","9c152a3f":"**Dense Layer**\n\n\n*   A dense layer is just a regular layer of neurons in a neural network. \n*   It is the most common and frequently used layer.\n*   Look at the middle layer in the previous image. Each neuron receives input from all the neurons in the previous layer and is thus called densely connected or dense.\n\n\n","c4d7f94a":"**Importing Libraries**\n\n* The Sequential library from tensorflow.keras is used to build Sequential models.\n\n* layers is used to create each layer of the model.","c8c15669":"1. First, an input layer must be defined via the Input class, and the shape of an input sample is specified.","e552a57d":"3. We can then connect this to an output layer in the same manner.\n","f33bc603":"## 1.Layers\nThe neurons in a neural network are divided into layers.\n\n![](https:\/\/i.imgur.com\/McMOhuQ.png)\n\nWhile we know them with the names Input, Hidden and Output, Tensorflow doesn\u2019t go by those names. It wants the user to specify the type of that particular layer.\n\nFor utilising the different types of layers we have available, Tensorflow provides a submodule called layers that we can import as follows:\n\n`from tensorflow.keras import layers`\n","f6b4b42f":"### 2.3 Giving name to the layers.\nYou can even add a `name` argument to name the different layers:","b88350b6":"## 4.Conclusion\nThat's all with the methods of building Deep Learning Models!\n\n","f924fd69":"### 2.2 Creating a Sequential model\n\nYou can create a Sequential model by passing a list of layers to the Sequential\nconstructor:","ee0a5edb":"### 2.1 Understanding a Sequential Model conceptually","9fb137de":"## 3.Functional Model API (Advanced)\nThe functional API is **more complex** but is also **more flexible**.\nUnlike the stack of layers in Sequential API, the functional API is a way to build graphs of layers.\n\nIt involves clearly connecting the output of one layer to the input of another layer. Each connection is specified.\n\nLet's take the same example as above and create a Functional model:","e1e2752c":"Notice how **one layer is stacked on top of another** in the last line. That's exactly what a Sequential Model does.","8f0ebb21":"### 2.7 Example\nThe example below defines a Sequential DNN that:\n* accepts 8 inputs, \n* has one hidden layer with 10 nodes (i.e. neurons) defined manually\n* and then an output layer with one node to predict a numerical value.","25ac4070":"# Agenda\n1. Layers\n2. Sequential Model API\n\n  2.1 Understanding a Sequential Model conceptually\n\n  2.2 Creating a Sequential Model\n\n  2.3 Giving names to the layers\n\n  2.4 Adding an input\n\n  2.5 Model Summary\n\n  2.6 Example\n\n3. Functional Model API \n4. Conclusion\n"}}