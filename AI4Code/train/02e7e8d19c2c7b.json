{"cell_type":{"e17562c0":"code","eb71f8b9":"code","d8f4a90c":"code","fc2d8eee":"code","5d021fb7":"code","4ba0d2c9":"code","bbea2b5b":"code","ca03cf0a":"code","998dfe85":"code","b9722959":"code","5c3118bc":"code","4f55481c":"code","239b118e":"code","d97a7e13":"code","4cbe1d01":"code","dac09a52":"code","bfff4897":"code","c8cec1e7":"code","e3767569":"code","12790ed7":"code","e26c75c4":"code","33635c45":"code","d3b0071b":"markdown","2b6a0560":"markdown","6e562f1f":"markdown","710f8101":"markdown","56b1d160":"markdown"},"source":{"e17562c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n\ndir_data = r'..\/input\/'\nprint(os.listdir(dir_data))\n\n\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport time\n\nimport numpy as np\nimport scipy.sparse as sp\nfrom sklearn.preprocessing import MaxAbsScaler, scale, StandardScaler, MinMaxScaler\n\nimport tensorflow as tf\nprint(tf.__version__)\n\n\n## plotting\nimport matplotlib.pyplot as plt\nimport pylab as pl\nimport seaborn as sns\n%matplotlib inline\n# Any results you write to the current directory are saved as output.\n\n","eb71f8b9":"## function to import csv and do QC\n\ndef import_QC(folder,file_in,sep_file=','):\n    \"\"\"\n    The function performs CSV file import and performs\n    QC of shape and head\n    \n    outputs a pandas dataframe\n    \"\"\"\n    ## Import data\n    file_in = folder + '\/' + file_in \n    temp_df = pd.read_csv(file_in,sep=sep_file)\n    \n    ## QC dataframe \n    print(temp_df.shape)\n    print(temp_df.head())\n    \n    ## return\n    return(temp_df)","d8f4a90c":"## Import data training\nfolder = dir_data\nfile_in = r'One_Year_of_FitBitChargeHR_Data.csv'\ntracker_df = import_QC(folder,file_in)","fc2d8eee":"## Convert the date column datatype to datatime and \n## extract the day of the month\n\ntracker_df['Date'] = pd.to_datetime(tracker_df['Date'],format='%d-%m-%Y')\ntracker_df['Date_only'] = pd.to_datetime(tracker_df['Date']).dt.day","5d021fb7":"tracker_df.index = tracker_df['Date']\ndel tracker_df['Date']","4ba0d2c9":"## sum  the slow, moderate and intense activity and create 'all_activity'\n\ntracker_df['all_activity'] = tracker_df[['Minutes_of_intense_activity','Minutes_of_moderate_activity','Minutes_of_slow_activity']].sum(axis=1)\n\n","bbea2b5b":"print(tracker_df.dtypes)\ntracker_df.head()","ca03cf0a":"### Groupby the day of the month and make a boxplot of calories burnt\n\n# figure size\nplt.figure(figsize=(15,8))\n\n# Usual boxplot\nax = sns.boxplot(x='Date_only', y='Calories', data=tracker_df)\n \n# Add jitter with the swarmplot function.\nax = sns.swarmplot(x='Date_only', y='Calories', data=tracker_df, color=\"grey\")\n\nax.set_title('Box plot of Calories with Jitter bu day of the month')","998dfe85":"## Groupby the weekday and plot statistics by day of the week\n\nby_weekday = pd.DataFrame()\nby_weekday['Calories'] = tracker_df['Calories'].groupby(tracker_df.index.dayofweek).sum()\nby_weekday['Week_day'] = ['Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat', 'Sun']\n\n# figure size\nplt.figure(figsize=(15,8))\n\n# simple barplot\nax = sns.barplot(x='Week_day', y='Calories',  data=by_weekday)\n\nax.set_title('Barplot of calories by the day of the week')","b9722959":"### Scatterplot of Calories Vs intense activity\n\n# figure size\nplt.figure(figsize=(15,8))\n\n# Simple scatterplot\nax = sns.scatterplot(x='Calories', y='Minutes_of_intense_activity', data=tracker_df)\n\nax.set_title('Scatterplot of calories and intense_activities')","5c3118bc":"### Scatterplot of Calories Vs moderate activity\n\n# figure size\nplt.figure(figsize=(15,8))\n\n# Simple scatterplot\nax = sns.scatterplot(x='Calories', y='Minutes_of_moderate_activity', data=tracker_df)\n\nax.set_title('Scatterplot of calories and moderate_activities')","4f55481c":"### Scatterplot of Calories Vs slow activity\n\n# figure size\nplt.figure(figsize=(15,8))\n\n# Simple scatterplot\nax = sns.scatterplot(x='Calories', y='Minutes_of_slow_activity', data=tracker_df)\n\nax.set_title('Scatterplot of calories and slow_activities')","239b118e":"### Scatterplot of Calories Vs all_activity\n\n# figure size\nplt.figure(figsize=(15,8))\n\n# Simple scatterplot\nax = sns.scatterplot(x='Calories', y='all_activity', data=tracker_df)\n\nax.set_title('Scatterplot of calories and all_activities')","d97a7e13":"## plot the raw values \n\ncol_select = ['Calories','Minutes_of_intense_activity','Minutes_of_moderate_activity','Minutes_of_slow_activity','all_activity']\nwide_df = tracker_df[col_select]\n\n# figure size\nplt.figure(figsize=(15,8))\n\n# timeseries plot using lineplot\nax = sns.lineplot(data=wide_df)\n\nax.set_title('Un-normalized value of calories and different activities')","4cbe1d01":"## Calculate the rolling averages\n\ncalories_roll = tracker_df['Calories'].rolling(window='10D').mean()\nslow_activity_roll = tracker_df['Minutes_of_slow_activity'].rolling(window='10D').mean()\nmoderate_activity_roll = tracker_df['Minutes_of_moderate_activity'].rolling(window='10D').mean()\nintense_activity_roll = tracker_df['Minutes_of_intense_activity'].rolling(window='10D').mean()\nall_activity_roll = tracker_df['all_activity'].rolling(window='10D').mean()","dac09a52":"## Plot all the rolling averages\n\ncol_select = ['Calories','Minutes_of_intense_activity','Minutes_of_moderate_activity','Minutes_of_slow_activity','all_activity']\nwide_df = pd.concat([calories_roll,slow_activity_roll,moderate_activity_roll,intense_activity_roll,all_activity_roll],axis=1)\n\n# figure size\nplt.figure(figsize=(15,8))\n\n# timeseries plot using lineplot\nax = sns.lineplot(data=wide_df)\n\nax.set_title('Un-normalized rolling mean of calories and different activities')\n","bfff4897":"## Plot the scaled rolling averages\n\nwide_df = pd.concat([calories_roll,slow_activity_roll,moderate_activity_roll,intense_activity_roll,all_activity_roll],axis=1)\nscaler = MinMaxScaler()\n\nwide_df_scaled = pd.DataFrame(scaler.fit_transform(wide_df), columns=wide_df.columns)\n# figure size\nplt.figure(figsize=(15,8))\n\n# timeseries plot using lineplot\nax = sns.lineplot(data=wide_df_scaled )\n\nax.set_title('Rolling mean of calories and different activities')","c8cec1e7":"## Plot the scaled rolling averages\n\nwide_df = pd.concat([calories_roll,intense_activity_roll],axis=1)\nscaler = MinMaxScaler()\n\nwide_df_scaled = pd.DataFrame(scaler.fit_transform(wide_df), columns=wide_df.columns)\n# figure size\nplt.figure(figsize=(15,8))\n\n# timeseries plot using lineplot\nax = sns.lineplot(data=wide_df_scaled )\n\nax.set_title('Rolling mean of calories and intense activities')","e3767569":"## Plot the scaled rolling averages\n\nwide_df = pd.concat([calories_roll,moderate_activity_roll],axis=1)\nscaler = MinMaxScaler()\n\nwide_df_scaled = pd.DataFrame(scaler.fit_transform(wide_df), columns=wide_df.columns)\n# figure size\nplt.figure(figsize=(15,8))\n\n# timeseries plot using lineplot\nax = sns.lineplot(data=wide_df_scaled )\n\nax.set_title('Rolling mean of calories and moderate activities')","12790ed7":"## Plot the scaled rolling averages\n\nwide_df = pd.concat([calories_roll,slow_activity_roll],axis=1)\nscaler = MinMaxScaler()\n\nwide_df_scaled = pd.DataFrame(scaler.fit_transform(wide_df), columns=wide_df.columns)\n# figure size\nplt.figure(figsize=(15,8))\n\n# timeseries plot using lineplot\nax = sns.lineplot(data=wide_df_scaled )\n\nax.set_title('Rolling mean of calories and slow activities')","e26c75c4":"## Plot the scaled rolling averages\n\nwide_df = pd.concat([calories_roll,all_activity_roll],axis=1)\nscaler = MinMaxScaler()\n\nwide_df_scaled = pd.DataFrame(scaler.fit_transform(wide_df), columns=wide_df.columns)\n# figure size\nplt.figure(figsize=(15,8))\n\n# timeseries plot using lineplot\nax = sns.lineplot(data=wide_df_scaled )\n\nax.set_title('Rolling mean of calories and all activities')","33635c45":"wide_df = pd.concat([calories_roll,slow_activity_roll,moderate_activity_roll,intense_activity_roll,all_activity_roll],axis=1)\n\nf, ax = pl.subplots(figsize=(10, 8))\ncorr_temp = wide_df.corr()\nax = sns.heatmap(corr_temp, mask=np.zeros_like(corr_temp, dtype=np.bool), \n                 cmap=sns.diverging_palette(220, 10, as_cmap=True),\n                 annot=True, square=True)\n\nax.set_title('Correlation between calories and different activities')","d3b0071b":"#### Determine the correlation between different activities and calories, and plot a heatmap","2b6a0560":"#### Rolling average of intense, modirate and slow activity along with Calories burnt","6e562f1f":"### Import data and perform QC","710f8101":"#### Plot the intense, modirate and slow activity along with Calories burnt","56b1d160":"## Fitbit Charge 1 year tracking data\n\n#### Dataset location https:\/\/www.kaggle.com\/alketcecaj\/one-year-of-fitbit-chargehr-data\n\n\n- datetime aggregate by weeks and months http:\/\/blog.josephmisiti.com\/group-by-datetimes-in-pandas\n- python time seies data analysis https:\/\/jakevdp.github.io\/PythonDataScienceHandbook\/03.11-working-with-time-series.html\n- python date time https:\/\/predictablynoisy.com\/date-time-python\n\n\n\nAnalysis steps\n\n+ Read the data\n+ Feature engineering (Capture the date month, Calculate the sum of all activities)\n- Plot the activite time Vs calories\n- Determine the correlation between different activites and calories"}}