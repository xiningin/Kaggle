{"cell_type":{"45601297":"code","7e75d1e7":"code","80b833e4":"code","848e6b0e":"code","1d95eaaf":"code","4ec8fa3d":"code","eb9b0d1b":"code","74de1878":"code","e22aba67":"code","efc4e109":"code","78c753b5":"code","b4e4fe60":"code","5f97bc48":"code","39adf17a":"code","f8968ce4":"code","7fdf5c86":"code","d474292c":"code","ad4bdddc":"code","c11420b2":"code","d2c93d12":"code","3c7c8a76":"code","93ca8720":"code","2b805c14":"code","929c5eb2":"code","3067c180":"code","03ffcd17":"code","944f3019":"code","50286904":"code","c4bd313a":"code","3e7e2465":"code","c4a6fb8c":"code","13278c61":"code","fb5941a3":"code","8388626a":"code","8071cd70":"code","a35bb0df":"code","abaa8152":"code","769ac7b0":"code","63dac68c":"code","2d591536":"code","e420d76a":"code","6890c342":"code","258c0797":"code","ecafc5cc":"code","9ed6ba53":"code","1a2056f3":"code","10074645":"code","e3a17376":"code","862546ca":"code","4f295955":"code","bb9f97bf":"code","5d271454":"code","579017b2":"code","ac4d2d44":"code","245dfd34":"code","aafc388f":"code","610a838f":"code","0354963e":"code","9eeeb2f0":"code","59ecb3b3":"code","f1017df0":"code","f6bf42c3":"code","b10090be":"code","8fd1bcd7":"code","dff1f147":"code","33d675b8":"code","783d9600":"code","8a17bdbf":"code","3bc5b95a":"code","42880c25":"code","d1df5aaf":"code","30ada434":"code","667aac04":"code","83ef6323":"code","fba80beb":"code","c253c878":"code","fa76c87c":"code","d0891098":"code","37ce4db4":"code","a5cedfe2":"code","f27c3d64":"code","71754c1a":"code","a46aca75":"code","0cd63e4f":"code","1fa34851":"code","a6c27f2a":"code","df529959":"markdown","f45c1dbe":"markdown","726fbd89":"markdown","f58b1f27":"markdown","7ea4157e":"markdown","4e848f27":"markdown","cf1960c3":"markdown","fe376eb9":"markdown","48748cc0":"markdown","2a17d1c0":"markdown","14712246":"markdown","7444b2fa":"markdown","23e96cf9":"markdown","48bfab21":"markdown","b71b4286":"markdown","a4b73916":"markdown","9a6cb02d":"markdown","3f553df6":"markdown","a0559eb2":"markdown","1ebdef79":"markdown","8e2fd295":"markdown","032cce62":"markdown","97236915":"markdown","3681108f":"markdown","89e0c7da":"markdown","0c313d09":"markdown","ee16ea39":"markdown","811701ac":"markdown","45daa570":"markdown","ddee96de":"markdown","4ecc9350":"markdown","ffe10370":"markdown","82a6e19f":"markdown","18bf99b4":"markdown","0697b8fa":"markdown","bfcaa0ce":"markdown","1fe0d677":"markdown","a8a4a2d1":"markdown","51829d55":"markdown","618ad24a":"markdown","14b57bfb":"markdown","243f1c76":"markdown","df1bc1af":"markdown"},"source":{"45601297":"import pandas as pd\nimport numpy as np","7e75d1e7":"movies = pd.read_csv(\"..\/input\/pandas-cookbook-data\/data\/movie.csv\")\nmovies.head()","80b833e4":"cols = [\n    \"actor_1_name\",\n    \"actor_2_name\",\n    \"actor_3_name\",\n    \"director_name\"\n]\nmovies_actor_director = movies[cols]\nmovies_actor_director.head()","848e6b0e":"type(movies[[\"director_name\"]]) # if i pass a list on the index operation it will return a DataFrame...","1d95eaaf":"type(movies[\"director_name\"]) # if i pass just a string on the index operation it will return a Series...","4ec8fa3d":"print(type(movies.loc[:, [\"director_name\"]]))\nmovies.loc[:, [\"director_name\"]].head()","eb9b0d1b":"print(type(movies.loc[:, \"director_name\"]))\nmovies.loc[:, \"director_name\"].head()","74de1878":"def shorten(col):\n    #print(\"col type:\", type(col), \"col:\", col)\n    return(\n        str(col)\n        .replace(\"facebook_likes\", \"fb\")\n        .replace(\"_for_reviews\", \"\")\n    )\n\nmovies = movies.rename(columns=shorten)\nmovies.head()","e22aba67":"movies.dtypes.value_counts()","efc4e109":"movies.select_dtypes(include=\"int\").head()","78c753b5":"movies.select_dtypes(include=\"number\").head()","b4e4fe60":"movies.select_dtypes(include=[\"int\", \"object\"]).head(3)","5f97bc48":"movies.select_dtypes(exclude=\"float\").head(3)","39adf17a":"movies.filter(like=\"fb\").head(3)","f8968ce4":"# the 'cols' list is defined above...\nmovies.filter(items=cols).head(3)","7fdf5c86":"movies.filter(regex=r\"\\d\").head(3) ## searching for a column that have a digit somewhere in their name.","d474292c":"movies.columns","ad4bdddc":"## cat: categorical\n## cont: continuous\ncat_core = [ #1\n    \"movie_title\",\n    \"title_year\",\n    \"content_rating\",\n    \"genres\"\n]\ncat_people = [ #2\n    \"director_name\",\n    \"actor_1_name\",\n    \"actor_2_name\",\n    \"actor_3_name\"\n]\ncat_other = [ #3\n    \"color\",\n    \"country\",\n    \"language\",\n    \"plot_keywords\",\n    \"movie_imdb_link\"\n]\ncont_fb = [ #4\n    \"director_fb\",\n    \"actor_1_fb\",\n    \"actor_2_fb\",\n    \"actor_3_fb\",\n    \"cast_total_fb\",\n    \"movie_fb\"\n]\ncont_finance = [ #5\n    \"budget\",\n    \"gross\"\n]\ncont_num_reviews = [ #6\n    \"num_voted_users\",\n    \"num_user\",\n    \"num_critic\"\n]\ncont_other = [ #7\n    \"imdb_score\",\n    \"duration\",\n    \"aspect_ratio\",\n    \"facenumber_in_poster\"\n]","c11420b2":"new_col_order = (\n    cat_core\n    + cat_people\n    + cat_other\n    + cont_fb\n    + cont_finance\n    + cont_num_reviews\n    + cont_other\n)","d2c93d12":"set(movies.columns) == set(new_col_order)","3c7c8a76":"movies = movies[new_col_order]\nmovies.head(3)","93ca8720":"movies.shape","2b805c14":"movies.size","929c5eb2":"movies.ndim","3067c180":"len(movies) # when a DataFrame is passed to the built-in len() function it returns the number of rows...","03ffcd17":"movies.count().head()","944f3019":"movies.select_dtypes(include=\"number\").min() # I could also use .max() .mean() .median() .std()","50286904":"movies.select_dtypes(include=\"number\").min(skipna=False).head() ## with skipna=False, only numeric columns with missing values will calculate a result.","c4bd313a":"movies.describe().T.head(3)","3e7e2465":"movies.describe(percentiles=[0.01, 0.3, 0.99]).T.head(3) ## using the 'percentiles' paramenter","c4a6fb8c":"movies.isnull().head()","13278c61":"movies.isna().head()","fb5941a3":"movies.isnull().sum().head(10) # counts the number of missing values in each column","8388626a":"movies.isnull().sum().sum()","8071cd70":"movies.isnull().any().any()","a35bb0df":"movies.isnull().dtypes.value_counts()","abaa8152":"(\n    movies\n    .select_dtypes([\"object\"])\n    .columns\n    .to_list()\n)","769ac7b0":"colleges = pd.read_csv(\"..\/input\/pandas-cookbook-data\/data\/college.csv\", index_col=\"INSTNM\")","63dac68c":"colleges.shape","2d591536":"colleges.head(3)","e420d76a":"try:\n    colleges + 5\n    print(\"it was possible to do that operation...\")\nexcept TypeError:\n    print(\"it is only possible to do this operation if the DataFrame has an homogeneous numeric data type...\")","6890c342":"college_ugds = colleges.filter(like=\"UGDS_\")\nprint(college_ugds.shape)\ncollege_ugds.head()","258c0797":"try:\n    college_ugds_plus_5 = college_ugds + 5\n    print(\"it was possible to do that operation...\")\nexcept TypeError:\n    print(\"it is only possible to do this operation if the DataFrame has an homogeneous numeric data type...\")","ecafc5cc":"college_ugds_plus_5.head()","9ed6ba53":"name = \"Northwest-Shoals Community College\"\ncollege_ugds.loc[name]","1a2056f3":"college_ugds.loc[name].round(2)","10074645":"(college_ugds.loc[name] + 0.0001).round(2)","e3a17376":"(college_ugds + 0.00501).head()","862546ca":"((college_ugds + 0.00501) \/\/ 0.01).head() # rounding to the nearest whole number percentage","4f295955":"college_ugds_op_round = ((college_ugds + 0.00501) \/\/ 0.01 \/ 100)\ncollege_ugds_op_round.head()","bb9f97bf":"college_ugds_round = (college_ugds + 0.00001).round(2)\ncollege_ugds_round.head()","5d271454":"college_ugds_op_round.equals(college_ugds_round)","579017b2":"0.045 + 0.005","ac4d2d44":"college2 = (\n    college_ugds\n    .add(0.00501)\n    .floordiv(0.01)\n    .div(100)\n)\ncollege2.head()","245dfd34":"college2.equals(college_ugds_op_round)","aafc388f":"np.nan","610a838f":"np.nan == np.nan","0354963e":"None == None","9eeeb2f0":"print(np.nan > 5)\nprint(5 >= np.nan)\nprint(np.nan != 5)","59ecb3b3":"(college_ugds == 0.0019).head(3)","f1017df0":"(college_ugds == 0.0019).sum().sum()","f6bf42c3":"college_self_compare = college_ugds == college_ugds\ncollege_self_compare.head()","b10090be":"college_self_compare.all() # the == operator does not work well with the missing values","8fd1bcd7":"(college_ugds == np.nan).sum()","dff1f147":"college_ugds.isna().sum()","33d675b8":"college_ugds.equals(college_ugds)","783d9600":"college_ugds.eq(0.0019).head(3) # same as college_ugds == .0019","8a17bdbf":"from pandas.testing import assert_frame_equal","3bc5b95a":"assert_frame_equal(college_ugds, college_ugds) is None","42880c25":"college_ugds.count() # by default axis=0 or \"index\", index direction: vertical |","d1df5aaf":"college_ugds.count(axis=\"columns\") # columns is the direction, horizontal ------","30ada434":"college_ugds.sum(axis=\"columns\").head()","667aac04":"college_ugds.median()#axis=\"index\")","83ef6323":"college_ugds_cumsum = college_ugds.cumsum(axis=1)\ncollege_ugds_cumsum.head()","fba80beb":"pd.read_csv(\"..\/input\/pandas-cookbook-data\/data\/college_diversity.csv\", index_col=\"School\")","c253c878":"(\n    college_ugds\n    .isnull()\n    .sum(axis=\"columns\")\n    .sort_values(ascending=False)\n)#.sum()","fa76c87c":"college_ugds.shape","d0891098":"college_ugds = college_ugds.dropna(how=\"all\")\ncollege_ugds.shape","37ce4db4":"college_ugds.isnull().sum()","a5cedfe2":"college_ugds.ge(0.15).head()","f27c3d64":"diversity_metric = college_ugds.ge(0.15).sum(axis=\"columns\")\ndiversity_metric.sort_values(ascending=False).head()","71754c1a":"diversity_metric.value_counts()","a46aca75":"college_ugds.loc[\n    [\n        \"Regency Beauty Institute-Austin\",\n        \"Central Texas Beauty College-Temple\"\n    ]\n]","0cd63e4f":"us_news_top = [\n    \"Rutgers University-Newark\",\n    \"Andrews University\",\n    \"Stanford University\",\n    \"University of Houston\",\n    \"University of Nevada-Las Vegas\"\n]\ndiversity_metric.loc[us_news_top]","1fa34851":"(college_ugds > 0.01).all(axis=1).any()","a6c27f2a":"print(\"tank you!\")","df529959":"So the correct way to compare 2 DataFrames is with the method `.equals()` (the `.eq()` method is equivalent to the `==` operator, and compares element by element):","f45c1dbe":"Now using the `.equals()` DataFrame method to test the equality of two DataFrames:","726fbd89":"### 01 - Selecting Multiple DataFrame columns:","f58b1f27":"We can also use `.loc[]` to pull out a column by name. We are going to get a DataFrame it we pass a list, and a Series if we passa a string. The `:`(collon) is for sellecting all the rows:","7ea4157e":".. Now filtering the data and trying to redo that operation:","4e848f27":".. now completing the manual round:","cf1960c3":"... or I may replace the the operators with their method equivalents:","fe376eb9":"Now i just need to pass the new column order to the indexing operator of the DataFrame:","48748cc0":"### 07 - Comparing Missing Values:","2a17d1c0":"From the book: \"Inside the pandas.testing sub-package, a function exists that developers should use when\ncreating unit tests. The assert_frame_equal function raises an AssertionError if two\nDataFrames are not equal. It returns None if the two DataFrames are equal:\"","14712246":"Organizing the names sensibly into lists so that the above guideline is followed:","7444b2fa":".. checking if the set with the new column names is the same as the old:","23e96cf9":"The `.dropna()` method has the `how` parameter, which defaults to the string `'any'`, but may also be changed to `'all'`. When set to `'any'`, it drops rows that contain one or more missing values. When set to `'all'`, it only drops rows where all values are missing:","48bfab21":".. or we can exclude some types:","b71b4286":"Pandas does \"bankers rounding\":","a4b73916":"... Amazingly 2 schools have more than 15% in five different race categories.","9a6cb02d":"### 03 - Ordering Column Names:\n\"[...] The following is a guideline to order columns:\n* Classify each column as either categorical or continuous\n* Group common columns within the categorical and continuous columns\n* Place the most important groups of columns first with categorical columns before continuous ones [...]\"","3f553df6":"Instead of using `==` to find missing numbers use the `.isna()` method:","a0559eb2":"Studying the distribution of data types in each column by counting them:","1ebdef79":"Determining whether any school has all nine race categories exceeding 1%:","8e2fd295":"### 04 - Summarizing a Data Frame:","032cce62":"First, lets rename a bunch of columns at once:","97236915":"trying to add a 5 to the DataFrame will raise a `TypeError`:","3681108f":"The `axis` parameter is almost always set to `0` by defualt.","89e0c7da":"Many DataFrame methods have an `axis` parameter.| `axis=\"index\"` is the same as `axis=0`, and `axis=\"columns\"` is the same as `axis=1`:","0c313d09":"NumPy NaN is not equal to itself:","ee16ea39":"\"Now use the round DataFrame method to do the rounding automatically for us. Due to bankers rounding, we add a small fraction before rounding\"","811701ac":"#### Now using the `.select_dtypes()` method to select only the columns with the desired type:","45daa570":".. or using the `regex` parameter, for using regular expressions:","ddee96de":"## Summary of my work over the Chapter 02 of \"Pandas 1.x Cookbook\" by Harrison & Petrou.\n### In this notebook I'll cover:\n1. Selecting Multiple Data Frame Columns;\n2. Selecting Columns with methods;\n3. Ordering Column Names;\n4. Summarizing a Data Frame;\n5. Chaining DataFrame Methods;\n6. DataFrame operations;\n7. Comparing Missing Values;\n8. Transposing the direction of a DataFrame operation;\n9. Determining College Campus Diversity.\n","4ecc9350":"The bellow operation using the `==` operator will yild some `False` values, as missing values do not compare equally with one another.","ffe10370":"### 08 - Transposing the direction of a DataFrame operation:","82a6e19f":"As you can se below, although the DataFrame has missing values, it did find any, because `np.nan` is not equal itself:","18bf99b4":"### 09 - Determining College Campus Diversity:","0697b8fa":"Look at the subtle difference on the following 2 cells:","bfcaa0ce":"#### Now using the `.filter()` method:\nThe `like` parameter is checking for substrings in column names:","1fe0d677":"### 02 - Selecting Columns with methods:\n`.select_dtypes()` and `.filter()`:","a8a4a2d1":"Pandas uses a NumPy NaN (`np.nan`) object to represent a missing value:","51829d55":".. or using the `items` parameter I can pass a list of column names:","618ad24a":"### 06 - DataFrame operations:","14b57bfb":"### 05 - Chaining DataFrame Methods:","243f1c76":"Showing the inexactness of floating-point numbers:","df1bc1af":"Comparing each element to a scalar value:"}}