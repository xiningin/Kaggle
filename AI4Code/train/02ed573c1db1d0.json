{"cell_type":{"3ae6f195":"code","6afe3e0e":"code","5f58eb8e":"code","b9960ab9":"code","c3921980":"code","8e343030":"code","214cdf95":"code","345a2732":"code","c2808795":"code","671f43fa":"code","17b9fc98":"code","bd31c7e3":"code","2e59b301":"markdown","958c3d80":"markdown","d5b62193":"markdown","45ba1898":"markdown","bb897645":"markdown","3a4af3e6":"markdown","1b10a9c0":"markdown","9a7b05a3":"markdown","72d81809":"markdown","8ef8cc0b":"markdown","898f3999":"markdown","5eb2064f":"markdown","cf7324e9":"markdown"},"source":{"3ae6f195":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6afe3e0e":"from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\ndata = pd.read_csv(\"..\/input\/voicegender\/voice.csv\") # datam\u0131z otomatik olarak import edildi.","5f58eb8e":"data.label=[1 if each ==\"male\" else 0 for each in data.label]\nprint(data.info())","b9960ab9":"y=data.label.values.reshape(-1,1)\nx_data=data.drop([\"label\"],axis=1)","c3921980":"x=(x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","8e343030":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)","214cdf95":"x_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T","345a2732":"def initialize_weights_and_bias(dimention):\n    w=np.full((dimention,1),0.01)\n    b=0.0\n    return w,b\n\n#w,b=initialize_weights_and_bias(30)\n    \ndef sigmoid(z):\n    y_head=1\/(1+np.exp(-z))\n    return y_head","c2808795":"def forward_backward_propagation(w,b,x_train,y_train):\n    z=np.dot(w.T,x_train)+b\n    y_head=sigmoid(z)\n    loss=-y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost=(np.sum(loss))\/x_train.shape[1]\n    \n    derivative_weight=(np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias=np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients={\"derivative_weight\":derivative_weight,\"derivative_bias\":derivative_bias}\n    \n    return cost,gradients","671f43fa":"def update (w,b,x_train,y_train,learning_rate,number_of_iteration):\n    cost_list=[]\n    cost_list2=[]\n    index=[]\n    \n    for i in range(number_of_iteration):\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        \n        w=w-learning_rate*gradients[\"derivative_weight\"]\n        b=b-learning_rate*gradients[\"derivative_bias\"]\n        if i%10==0:\n            cost_list2.append(cost)\n            index.append(i)\n            print(\"Cost after iteration: %i: %f\"%(i,cost))\n            \n    parameters={\"weight\":w,\"bias\":b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation=\"vertical\")\n    plt.xlabel(\"Number of Iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters,gradients,cost_list","17b9fc98":"def predict(w,b,x_test):\n    z=sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    \n    for i in range(z.shape[1]):\n        if z[0,i]<=0.5:\n            Y_prediction[0,i]=0\n        else:\n            Y_prediction[0,i]=1\n    return Y_prediction","bd31c7e3":"def logistic_regression(x_train,y_train,x_test,y_test,learning_rate,num_iterations):\n    \n    dimension = x_train.shape[0]\n    \n    w,b=initialize_weights_and_bias(dimension)\n    \n    parameters,gradients,cost_list=update(w,b,x_train,y_train,learning_rate,num_iterations)\n    \n    y_prediction_test=predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    \n    print(\"test accuracy: {}\".format(100-np.mean(np.abs(y_prediction_test-y_test))*100))\n    \nlogistic_regression(x_train,y_train,x_test,y_test,learning_rate=3,num_iterations=1000)","2e59b301":"* x_datam\u0131z\u0131n i\u00e7erisinde bulunan featurelar ayn\u0131 aral\u0131kta olmad\u0131\u011f\u0131ndan bu de\u011ferler i\u015flendi\u011finde herhangi bir feature de\u011ferleri k\u00fc\u00e7\u00fck oldu\u011funda bir ba\u015fka feature de\u011feri o de\u011ferleri g\u00f6t\u00fcrebilir dolay\u0131s\u0131yla bunlar\u0131 e\u015fit bir \u015fekilde da\u011f\u0131tarak 0 ile 1 aras\u0131na her bir feature \u0131 scale ediyoruz.","958c3d80":"* Verilerimizin %20 sini e\u011fitti\u011fimiz %80 lik b\u00f6l\u00fcm\u00fcyle test etmek i\u00e7in ay\u0131rma i\u015flemini yapt\u0131k.","d5b62193":"* Verilerimizi update fonksiyonuna g\u00f6nderdik g\u00fcncellenip en optimize hale geldikten sonra accuracy mizi ekranda g\u00f6r\u00fcnt\u00fcledik.","45ba1898":"* Verileri daha rahat g\u00f6r\u00fcnt\u00fclemek i\u00e7in bunlar\u0131n transpozunu ald\u0131k.","bb897645":"* weight ve bias de\u011fi\u015fkenlerimize default de\u011ferleri att\u0131k.\n* Sigmoid fonksiyonu yaz\u0131ld\u0131.","3a4af3e6":"* for d\u00f6ng\u00fcs\u00fc i\u00e7erisinde verdi\u011fimiz iterasyon say\u0131s\u0131 kadar weight ve bias de\u011ferlerimizi g\u00fcncelledik.","1b10a9c0":"* **Datam\u0131z\u0131n i\u00e7erisinde olan \"label\" adl\u0131 feature de\u011ferleri string tipinde oldu\u011fundan bunu say\u0131sal de\u011fere d\u00f6n\u00fc\u015ft\u00fcr\u00fcyoruz.D\u00f6n\u00fc\u015ft\u00fcrd\u00fckden sonra info komutu ile datay\u0131 tekrar ekrana yazd\u0131rarak kontrol ettik.**","9a7b05a3":"* G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi label adl\u0131 feature int64 tipinde oldu.","72d81809":"* Her bir eleman\u0131na 0.01 de\u011feri at\u0131lan weight matrisimizi x train ile \u00e7arp\u0131p bias de\u011ferimizle toplad\u0131k.Daha sonra bu z de\u011ferimizi sigmoid fonksiyonuna sokarak her bir de\u011ferimizi 0 ile 1 de\u011feri aras\u0131na scale ettik.\n* Loss fonksiyonunu bulduk ve bunlar\u0131n toplam\u0131n\u0131n ortalamas\u0131ndan cost de\u011ferimizi bulduk.\n* weight ve bias de\u011fi\u015fkenlerin t\u00fcrevlerini ald\u0131k.\n* cost ve gradients de\u011ferlerini d\u00f6nd\u00fcrd\u00fck.\n","8ef8cc0b":"* Kad\u0131n erkek datam\u0131z\u0131n bulundu\u011fu feature de\u011ferlerini y de\u011fi\u015fkenine, bu feature'\u0131n olmad\u0131\u011f\u0131 di\u011fer datalar\u0131 da x_data adl\u0131 de\u011fi\u015fkenimize atad\u0131k.\n\n* reshape(-1,1) komutunu kullanarak sklearn k\u00fct\u00fcphanesi ile datam\u0131z\u0131(matris) uyumlu hale getiriyoruz.\n* axis = 1 datam\u0131z\u0131n stunlar\u0131 anlam\u0131na geliyor.","898f3999":"* G\u00f6r\u00fcld\u00fc\u011f\u00fc gibi cost de\u011ferimiz 10 iterasyona kadar artm\u0131\u015f sonras\u0131nda d\u00fc\u015fm\u00fc\u015ft\u00fcr.","5eb2064f":"# Bu \u00f6devde kad\u0131n erkek seslerini lojistik regresyon kullanarak cost de\u011ferini en aza indirmeye \u00e7al\u0131\u015faca\u011f\u0131z.","cf7324e9":"* De\u011ferlerimizi pretict ediyoruz optimize hale getiriyoruz."}}