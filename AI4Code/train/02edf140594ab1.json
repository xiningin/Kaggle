{"cell_type":{"fcab557c":"code","51641843":"code","2ce45d5f":"code","afa3640e":"code","419dbdc8":"code","d99b82c7":"code","fb6b82ed":"code","86e2436b":"code","fc5f84c3":"code","b5fec77b":"code","ea2a31aa":"code","1f8a20de":"code","3e5a3a06":"code","20175595":"code","aca535e6":"code","3eb334c9":"code","7948864f":"code","1dfbc830":"markdown","adafe419":"markdown","38479bee":"markdown","8bf3b6a9":"markdown"},"source":{"fcab557c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","51641843":"import pandas as pd\ndf = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","2ce45d5f":"df.head()","afa3640e":"df.info()","419dbdc8":"df.drop('Unnamed: 32', axis = 1, inplace =True)","d99b82c7":"df.describe()","fb6b82ed":"from sklearn.ensemble import RandomForestClassifier\n#from sklearn.model_selection import GridSearchCV #for choosing the best n_estimator \nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor","86e2436b":"clas_model = RandomForestClassifier(n_estimators=100, random_state=42)  \nreg_model = RandomForestRegressor(n_estimators=100, random_state=42)","fc5f84c3":"x = df.drop(['diagnosis', 'id'], axis = 1)\ny = df.diagnosis","b5fec77b":"y.head()","ea2a31aa":"x.head()","1f8a20de":"label = LabelEncoder()\nlabel_y = label.fit_transform(y)\n#label_y_enc = label.transform(y)","3e5a3a06":"label_y","20175595":"X_train, X_valid, y_train, y_valid = train_test_split(x, label_y,\n                                                      train_size=0.8, test_size=0.2,\n                                                      random_state=0)","aca535e6":"def score_dataset_classifier(X_train, X_valid, y_train, y_valid):\n    model = clas_model\n    model.fit(X_train, y_train)\n    preds = model.predict(X_valid)\n    return mean_absolute_error(y_valid, preds, preds)","3eb334c9":"def score_dataset_reg(X_train, X_valid, y_train, y_valid):\n    model = reg_model\n    model.fit(X_train, y_train)\n    preds = model.predict(X_valid)\n    return mean_absolute_error(y_valid, preds)","7948864f":"print('the score for classifier method is: ')\nprint(score_dataset_classifier(X_train, X_valid, y_train, y_valid)) \nprint('the score for regressor method is: ') \nprint(score_dataset_reg(X_train, X_valid, y_train, y_valid)) ","1dfbc830":"# Note:\nthis notebook to test my understanding of what i have learned so far, so all comments hat can help me improving are welcome, and thanks in advance ","adafe419":"**Using classifier method**","38479bee":"# **Conclusion**\n\n\n\nusing classifier for categorical data where one and zero only can apply results in better predections\n","8bf3b6a9":"# future investigations \nwill need to check the same but with more categorical options data, where one will be using the hot coding and the other wont "}}