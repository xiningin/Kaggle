{"cell_type":{"802366ef":"code","84a9e2b7":"code","ed2ac781":"code","89f178e7":"code","b66a8fd7":"code","5043d1dc":"code","a5d74385":"code","d5e2631d":"code","ceb0ba62":"code","5247b721":"code","ec295946":"code","33f286c5":"code","3cfe00f8":"code","b8056a09":"code","ffd4dcf8":"code","f27ce979":"code","b5e51597":"code","41384064":"markdown","578b2558":"markdown"},"source":{"802366ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","84a9e2b7":"#read in data\nX_train = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\nX_test = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\n\ny_train = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv').drop(columns=['sig_id'])","ed2ac781":"def encode_dummies(df):\n    df['treatment'] = 1*(df.cp_type == 'trt_cp')\n    df['D1'] = 1*(df.cp_dose == 'D1')\n    df['cp_time'] = df.cp_time\/24\n    return df.drop(columns = ['sig_id', 'cp_type', 'cp_dose'])","89f178e7":"X_train = encode_dummies(X_train)\nX_test = encode_dummies(X_test)\n\ngene_list = ['g-'+str(i) for i in range(772)]\ngene_exp = X_train[gene_list].values\n\ncell_list = ['c-'+str(i) for i in range(100)]\ncell_via = X_train[cell_list].values","b66a8fd7":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import log_loss\nfrom sklearn.utils import resample\nfrom joblib import dump, load\nfrom sklearn.ensemble import GradientBoostingClassifier","5043d1dc":"def pca_features(df, var_list, n):\n    '''\n    df: dataframe\n    var_list: variable list to be fitted\n    n: number of components\n\n    return: (fitted PCA model, principal components)\n    '''\n    pca = PCA(n_components=n)\n    pca_features = pca.fit_transform(df[var_list])\n    return (pca, pca_features)\n\ndef df_to_array(df, var_list, gene, cell):\n    '''\n    return: numpy array with transformed principal components\n    '''\n    a = df.drop(columns=var_list).values\n    a = np.hstack((a, gene, cell))\n    return a\n\ndef pca_transform(X_train_2, X_train_val):\n    '''\n    Run PCA on training data and transform both train and test data according to obtained components\n\n    X_train_2: dataframe, training data \n    X_train_val: dataframe, test\/validation data\n\n    return: X_train, X_val, y_train, y_val as numpy array\n    '''\n\n    # X_train_2, X_train_val, y_train_2, y_train_val = train_test_split(X_train, y_train, test_size = 0.2, random_state=47)\n\n    gene_list = ['g-'+str(i) for i in range(772)]\n    cell_list = ['c-'+str(i) for i in range(100)]\n\n    pca_gene, gene_features = pca_features(X_train_2, gene_list, 50)\n    pca_cell, cell_features = pca_features(X_train_2, cell_list, 10)\n\n    X_train_2 = df_to_array(X_train_2, gene_list+cell_list, gene_features, cell_features)\n    X_train_val = df_to_array(X_train_val, gene_list+cell_list, pca_gene.transform(X_train_val[gene_list]), pca_cell.transform(X_train_val[cell_list]))\n\n    # y_train_2 = y_train_2.values\n    # y_train_val = y_train_val.values\n\n    return X_train_2, X_train_val\n\ndef upsample(X, y, i):\n    '''\n    upsample positive response in the ith column of y matrix to size 1000\n    '''\n    # indices of positive response in the ith column\n    idx1 = np.where(y[:,i]==1)[0]\n    # indices of negative response in the ith column\n    idx0 = np.where(y[:,i]==0)[0]\n    # sample with replacement \n    up_idx = np.random.choice(idx1, replace = True, size = 1000)\n    X_upsampled = np.vstack((X[idx0], X[up_idx.T]))\n    y_upsampled = np.vstack(((y[idx0, i:(i+1)], y[up_idx.T, i:(i+1)])))\n\n    return X_upsampled, y_upsampled[:,0]","a5d74385":"\n\n# #predict probability\n# gbc = GradientBoostingClassifier(learning_rate=0.01, max_features=40, n_estimators=180)\n# train_loss = []\n# y_test_pred = []\n# for i in range(y_train_2.shape[1]):\n#     y_train_one = y_train_2[:,i]\n\n#     X_train_upsampled, y_train_upsampled = upsample(X_train_2, y_train_2, i)\n\n#     gbc.fit(X_train_upsampled, y_train_upsampled)\n#     y_train_pred = gbc.predict_proba(X_train_2)\n#     y_pred = gbc.predict_proba(X_test_2)[:,1]\n\n#     train_loss.append(log_loss(y_train_one, y_train_pred, labels=[0,1]))\n#     y_test_pred.append(y_pred)\n\n# y_pred = np.array(y_test_pred)\n# y_pred = y_pred.T\n\n# #convert to dataframe\n# col = y_train.columns\n# y_pred_df = pd.DataFrame(y_pred, columns = col)\n# sig_id = pd.read_csv('test_features.csv')[['sig_id']]\n# y_pred_df = sig_id.join(y_pred_df)\n\n# #write to output\n# y_pred_df.to_csv('submission.csv')","d5e2631d":"X_train_2, X_test_2 = pca_transform(X_train, X_test)\ny_train_2 = y_train.values\n\nrf = RandomForestClassifier(n_estimators=250, max_depth=30)\nrf.fit(X_train_2, y_train_2)\n\ny_pred_prob = rf.predict_proba(X_test_2)\n\ny_pred = []\nfor i in range(len(y_pred_prob)):\n    y_pred.append(y_pred_prob[i][:,1])\n\ny_pred_rf = np.array(y_pred).T\n","ceb0ba62":"# #convert to dataframe\n# col = y_train.columns\n# y_pred_df = pd.DataFrame(y_pred, columns = col)\n# sig_id = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')[['sig_id']]\n# y_pred_df = sig_id.join(y_pred_df)\n\n# #write to output\n# y_pred_df.to_csv('submission.csv', index=False)","5247b721":"import torch\nfrom torch import nn, optim\nimport torch.nn.functional as F \nimport torch.utils.data as data","ec295946":"X_train.values","33f286c5":"train_data = data.TensorDataset(torch.from_numpy(X_train.values), torch.from_numpy(y_train.values))\ntrainloader = data.DataLoader(train_data, batch_size = 256, shuffle=True)\n\ntest_data = torch.from_numpy(X_test.values)","3cfe00f8":"class Net(nn.Module):\n  \n    def __init__(self, n_features, drop_rate):\n        super(Net, self).__init__()\n        self.linear1 = nn.Linear(n_features, 500)\n        self.linear2 = nn.Linear(500, 400)\n        self.linear3 = nn.Linear(400, 300)\n        self.linear4 = nn.Linear(300, 206)\n        # self.linear5 = nn.Linear(200, 206)\n\n\n    def forward(self, x):\n        x = F.relu(self.linear1(x))\n        x = F.dropout(x, p=drop_rate)\n        x = F.relu(self.linear2(x))\n        x = F.dropout(x, p=drop_rate)\n        x = F.relu(self.linear3(x))\n        x = F.dropout(x, p=drop_rate)\n        x = self.linear4(x)\n        # x = F.dropout(x, p=drop_rate)\n        # x = self.linear5(x)\n\n        return torch.sigmoid(x)","b8056a09":"drop_rate = 0.2\nnet = Net(X_train.shape[1], drop_rate)\n\ncriterion = nn.BCELoss()\noptimizer = optim.Adam(net.parameters(), lr=0.0008, weight_decay=0.00005)\n\nfor epoch in range(15):\n\n    train_loss = []\n\n    for batch in trainloader:\n\n        optimizer.zero_grad()\n\n        y_pred = net(batch[0].float())\n        loss = criterion(y_pred, batch[1].float())\n        loss.backward()\n        optimizer.step()\n\n        train_loss.append(loss.item())\n        \nprint(\"training loss:\", np.mean(train_loss))","ffd4dcf8":"# Generate predictions on test features\nnet.eval()\ny_pred = net(test_data.float())\ny_pred_nn = y_pred.detach().numpy()\n","f27ce979":"y_pred = (y_pred_rf+y_pred_nn)\/2","b5e51597":"\n# Convert to submission format\ncol = y_train.columns\ny_pred_df = pd.DataFrame(y_pred, columns = col)\nsig_id = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')[['sig_id']]\ny_pred_df = sig_id.join(y_pred_df)\n\n#write to output\ny_pred_df.to_csv('submission.csv', index=False)","41384064":"# Training with Random Forest","578b2558":"# Training with Neural Netword"}}