{"cell_type":{"3526f104":"code","87319512":"code","6b70855b":"code","68f7e86a":"code","e9efa62d":"code","60b0a675":"code","6d1ab6e2":"code","8eedbc83":"code","6bdc8c70":"code","c5e99371":"code","f7b4d8da":"code","7371c345":"code","3a547c64":"code","347a554f":"code","92e3416d":"code","b99502e2":"code","b8385756":"code","05c4c1e5":"code","27d3b208":"code","5f336758":"code","c56ddcb2":"code","dd434021":"code","b7f2173a":"code","95e30446":"code","611677d0":"code","62eb10ec":"code","16387bdc":"code","173dab54":"code","10069bf9":"code","3f983654":"code","036337dd":"code","c035dbc3":"code","b635e4b7":"code","af02c0c5":"code","6f018a36":"code","6d911136":"code","34b78f6b":"markdown","789a88c8":"markdown","7e123a6f":"markdown","7f93b6a9":"markdown","4d333955":"markdown","d4654ea1":"markdown","8fccb38a":"markdown","d421b96f":"markdown","8f331424":"markdown","8a7d9ac9":"markdown"},"source":{"3526f104":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87319512":"!pip install dython\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom dython.nominal import  compute_associations\nplt.style.use('fivethirtyeight')","6b70855b":"x_train = pd.read_csv('..\/input\/neolen-house-price-prediction\/train.csv')\nx_test = pd.read_csv('..\/input\/neolen-house-price-prediction\/test.csv')","68f7e86a":"x_train.head()","e9efa62d":"x_train.info()","60b0a675":"x_train.describe()","6d1ab6e2":"x_test.head()","8eedbc83":"x_test.info()\n","6bdc8c70":"x_train.dropna(axis=0, subset=['SalePrice'], inplace=True)\n","c5e99371":"x_train.drop(['Id'], axis=1, inplace=True)\nid_ = x_test.Id\n\nx_test.drop(['Id'], axis=1, inplace=True)","f7b4d8da":"x_train.info()","7371c345":"x_train.SalePrice.hist(bins=60, rwidth=.8, figsize=(10,5))\nplt.title('houses\\' price')\nplt.show()","3a547c64":"plt.scatter(x_train.YrSold,x_train.SalePrice)\nplt.show()","347a554f":"missing_val = pd.DataFrame(x_train.isnull().sum(), columns=['missing_val'])\nnull_comp_df = missing_val.sort_values('missing_val',ascending = [False])\nnull_comp_df\n","92e3416d":"numeric_cols = [cname for cname in x_train.columns if x_train[cname].dtype in ['int64', 'float64']]\ncategorical_cols = [cname for cname in x_train.columns if x_train[cname].dtype == 'object' ]","b99502e2":"plt.subplots(figsize=(15,2))\nnumerical_corr_table = compute_associations(x_train[numeric_cols])\nprint(numerical_corr_table[['SalePrice']].sort_values(by=['SalePrice']))\nsns.heatmap(numerical_corr_table[['SalePrice']].sort_values(by=['SalePrice']).T)\nplt.title(f\" Corelations between {'SalePrice'} and numerical features.\")\nnumerical_corr_table","b8385756":"categorical_cols.append('SalePrice')","05c4c1e5":"plt.subplots(figsize=(15,2))\ncorr_table = compute_associations(x_train[categorical_cols])\nprint(corr_table[['SalePrice']].sort_values(by=['SalePrice']))\nsns.heatmap(corr_table[['SalePrice']].sort_values(by=['SalePrice']).T)\nplt.title(f\" Corelations between {'SalePrice'} and categorical features.\")\ncorr_table","27d3b208":"num_correlated = numerical_corr_table[['SalePrice']][numerical_corr_table['SalePrice']>0.5].index.tolist()\ncat_correlated = corr_table[['SalePrice']][corr_table['SalePrice']>0.5].index.tolist()","5f336758":"x_train_num = x_train[num_correlated[:-1]]\ny_train = x_train[num_correlated[-1]]\nx_train_num.head()","c56ddcb2":"x_train_cat = x_train[cat_correlated[:-1]]\nx_train_cat.head()","dd434021":"x_test_num = x_test[num_correlated[:-1]]\nx_test_num.head()","b7f2173a":"x_test_cat = x_test[cat_correlated[:-1]]\nx_test_cat.head()","95e30446":"x_train_cat_one = pd.get_dummies(x_train_cat)\nx_train_cat_one.info()","611677d0":"x_test_cat_one = pd.get_dummies(x_test_cat)\nx_test_cat_one.info()","62eb10ec":"from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(missing_values=np.nan, strategy='median')\n# start imputing\narray = imputer.fit_transform(x_train_num)\n# convert to dataframe again\nx_train_num_imputed = pd.DataFrame(array, columns=x_train_num.columns)\n\nx_train_num_imputed.head()","16387bdc":"from sklearn.impute import SimpleImputer\n\nimputer2 = SimpleImputer(missing_values=np.nan, strategy='median')\n# start imputing\narray2 = imputer2.fit_transform(x_test_num)\n# convert to dataframe again\nx_test_num_imputed = pd.DataFrame(array2, columns=x_test_num.columns)\n\nx_test_num_imputed.head()","173dab54":"x_train_final = pd.concat([x_train_num_imputed,x_train_cat_one], axis = 1)\n# x_train_final.dropna(axis=0, inplace=True)\n","10069bf9":"x_train_final.head()","3f983654":"x_test_num_imputed.head()","036337dd":"x_test_final = pd.concat([x_test_num_imputed,x_test_cat_one], axis = 1 )\nx_train_final, x_test_final = x_train_final.align(x_test_final, join='left', axis=1)\n\n#  x_test_final.dropna(axis=0, inplace=True)\nx_test_final.fillna(value = 0 , inplace=True)\n\nx_test_final","c035dbc3":"from sklearn.linear_model import LinearRegression\nfrom ml_metrics import rmse\n\nmodel = LinearRegression()\n# Fit the model\nmodel.fit(x_train_final, y_train)\n# Get the R-squared\nmodel.score(x_train_final, y_train)","b635e4b7":"y_pred = model.predict(x_train_final)\n# x = list(map (int , y_pred))","af02c0c5":"print(\"RMSE :\")\nprint(rmse(np.log(y_train), np.log(y_pred)))","6f018a36":"y_pred = model.predict(x_test_final)\n","6d911136":"output = pd.DataFrame({'Id': id_,\n                       'SalePrice': y_pred})\noutput.to_csv('submission.csv', index= False)\n","34b78f6b":"## One-hot encode the categorical data ","789a88c8":"# Select the features with high Correlation ","7e123a6f":"## Test model ","7f93b6a9":"## Import libraries ","4d333955":"## Separate Numerical columns from Categorical columns\n","d4654ea1":"## Read data","8fccb38a":"## Build model\n","d421b96f":"## concatenate numerical and categorical data","8f331424":"## Data exploring","8a7d9ac9":"## Data imputation"}}