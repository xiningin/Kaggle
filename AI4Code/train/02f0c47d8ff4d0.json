{"cell_type":{"2a617ae6":"code","f63f663a":"code","c459b1e2":"code","a43f41c9":"code","f9260c30":"code","1a7aca3e":"code","68725aee":"code","6ff20c2e":"code","d1c99dd0":"code","6974dddd":"code","abba7c8d":"code","8e870000":"code","55d56646":"code","051b9a6a":"code","7618e1b5":"code","b4a493a6":"code","b5398e24":"code","ff7d5069":"code","f45c6895":"code","5a410e8f":"markdown","88670e14":"markdown","707a83b6":"markdown","d85c5a60":"markdown","cc105f18":"markdown","94e5c7b8":"markdown","3400948e":"markdown"},"source":{"2a617ae6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f63f663a":"# function to load data\ndef load_data(file_path):\n    return pd.read_csv(file_path)","c459b1e2":"districts = load_data('\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv') # districts data\ndistricts.head() # return top 5 rows of a data frame","a43f41c9":"# number of data points for the districts_info dataset\nprint(f\" There are {districts.shape[0]} rows and {districts.shape[1]} columns of districts_info dataset.\")","f9260c30":"products = load_data('\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv') # products data\nproducts.head()","1a7aca3e":"# number of data points for the districts_info dataset\nprint(f\" There are {products.shape[0]} rows and {products.shape[1]} columns of products_info dataset.\")","68725aee":"#load engagement data\ndef load_engagement(path):\n    dataframes = {}\n    engagement_data_list = os.listdir(path)\n    for data in engagement_data_list:\n        engmnt = pd.read_csv(path + data)\n        engmnt['district'] = [data.split('.')[0] for _ in range(len(engmnt))]\n        dataframes[data.split('.')[0]] = engmnt\n    return dataframes","6ff20c2e":"# missing values and data information for engagement dataset\ndef missing_eng(data):\n    missing_data, rows = data[list(data.keys())[0]].isna().sum(), 0\n    for key in data.keys():\n        rows += len(data[key])\n        if key != list(data.keys())[0]:\n            missing_data += data[key].isna().sum()\n    return missing_data, rows\nengagement_data = load_engagement('\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data\/')","d1c99dd0":"# how many missing values exist or better still what is the % of missing values in the dataset?\ndef percent_missing(df, d_type):\n\n    # Calculate total number of cells in dataframe\n    totalCells = np.product(df.shape)\n\n    # Count number of missing values per column\n    missingCount = df.isnull().sum()\n\n    # Calculate total number of missing values\n    totalMissing = missingCount.sum()\n\n    # Calculate percentage of missing values\n    print(f\"The {d_type} dataset contains\", round(((totalMissing\/totalCells) * 100), 2), \"%\", \"of missing values.\")\n    \npercent_missing(products, 'products_info')\npercent_missing(districts, 'districts_info')\n","6974dddd":"# Now which column(s) has missing values for the products_info dataset\npro_msg_info = products.isna().sum()\npro_col = list(pro_msg_info.keys())\npro_msg_info","abba7c8d":"# calculate the missing value for each columns in the products_info dataset\nfor pdct in pro_col:\n    print(f\"Total missing values for {pdct} column is {pro_msg_info[pdct]}\")","8e870000":"# Now which column(s) has missing values for the districts_info dataset\ndist_msg_info = districts.isna().sum()\ndist_col = list(dist_msg_info.keys())\ndist_msg_info","55d56646":"# calculate the missing value for the districts_info\nfor dst in dist_col:\n    print(f\"Total missing value for {dst} column is {dist_msg_info[dst]}\")","051b9a6a":"# calculate the missing value for the engagement dataset\nenge_mssing_data, enge_rows = missing_eng(engagement_data)\nprint(f\"Total number of rows in the engagement dataset are: {enge_rows}.\")\nprint(f'\\nMissing value informatin \\n {enge_mssing_data}\\n')\n\nenge_mssing_d = list(enge_mssing_data.keys())\nfor eg in enge_mssing_d:\n    print(f\"Total missing value for {eg} column is {enge_mssing_data[eg]}\")","7618e1b5":"# plot state distribution for districts\ndef district_count_plot(df, col, title, hue=None):\n    plt.figure(figsize=(20, 7))\n    sns.countplot(data = df, y=col, hue=hue, order=df[col].value_counts().index)\n    plt.title(title, size=20)\n    plt.xlabel(col, fontsize=16)\n    plt.ylabel(\"Count\", fontsize=16)\n    plt.show()\ndistrict_count_plot(districts, 'state', 'State Distribution for district')","b4a493a6":"# plot distribution of schools by locale\ndef pie_plot(df):\n    fig = plt.figure()\n    ax = fig.add_axes([0,0,1,1])\n    ax.axis('equal')\n    locale = list(df['locale'])\n    num_schools = list(df['district_id'])\n    ax.pie(num_schools, labels = locale,autopct='%1.1f%%')\n    plt.title(\"Distribution of schools by locale\")\n    plt.show()\n    \nlocalschool = districts[['district_id', 'locale']].groupby('locale').count().reset_index()\npie_plot(localschool)","b5398e24":"# plot distribution of school by  state\nschool_state = districts[['district_id', 'state']].groupby('state').count().reset_index()\nplt.figure(figsize=(12,7))\nplt.title(\"Distribution of schools by state\")\nsns.barplot(y = school_state['state'], x = school_state['district_id'])\nplt.show()","ff7d5069":"def school_district(df, col, title, hue=None):\n    plt.figure(figsize=(20, 7))\n    sns.countplot(data = df, y=col, hue=hue, order=df[col].value_counts().index)\n    plt.title(title, size=20)\n    plt.xlabel(col, fontsize=16)\n    plt.ylabel(\"Count\", fontsize=16)\n    plt.show()\nschool_district(districts, 'locale', 'Locale Distribution')","f45c6895":"# bar plot for top 10 providers\ndef top10_bar_plot(df, x_col, y_col, title=''):\n    plt.figure(figsize=(20, 7))\n    sns.barplot(data = df, x=x_col, y=y_col)\n    plt.title(title, size=20)\n    plt.xlabel(x_col, fontsize=16)\n    plt.ylabel(y_col, fontsize=16)\n    plt.show()\nresult = products['Provider\/Company Name'].value_counts()\nresult = result.head(10)\ntop_providers = pd.DataFrame({'Company': result.index, 'Count': result})\ntop10_bar_plot(top_providers, \"Count\", \"Company\", title='Top 10 providers')","5a410e8f":"### Products dataset","88670e14":"### Engagement dataset","707a83b6":"# Load data","d85c5a60":"# Visualization","cc105f18":"# Handling Missing Values","94e5c7b8":"### Districts dataset","3400948e":"# Import libraries"}}