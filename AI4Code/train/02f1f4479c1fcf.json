{"cell_type":{"7af3e90f":"code","3ca50d51":"code","04d6a8d5":"code","376885c3":"code","a24ed761":"code","bc6e3ba3":"code","40c515aa":"code","77a9a72d":"code","fa1392b8":"code","db3e4b28":"code","128ff820":"code","54001ef5":"code","1744aac4":"code","0c350cb3":"code","2c0b07e1":"code","b8c5735e":"code","5e6591c3":"markdown","e0908a4c":"markdown","57d49bb7":"markdown"},"source":{"7af3e90f":"import torch\nimport torch.nn.functional as F\nfrom torchvision import datasets,transforms\nfrom torch import nn\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport wandb\nimport random\nimport tensorflow as tf","3ca50d51":"key = open(\"..\/input\/keyfile\/key.txt\").read()","04d6a8d5":"wandb.login(key=key)","376885c3":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","a24ed761":"config = {\n    'lr': 0.0025,\n    'epochs': 100,\n    'dropout': True\n}","bc6e3ba3":"run = wandb.init(project=\"tutorial\", entity=\"oodds\", job_type='test', config=config)","40c515aa":"transform_train = transforms.Compose([transforms.Resize((32,32)),  #resises the image so it can be perfect for our model.\n                                      transforms.RandomHorizontalFlip(), # FLips the image w.r.t horizontal axis\n                                      transforms.RandomRotation(10),     #Rotates the image to a specified angel\n                                      transforms.RandomAffine(0, shear=10, scale=(0.8,1.2)), #Performs actions like zooms, change shear angles.\n                                      transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2), # Set the color params\n                                      transforms.ToTensor(), # comvert the image to tensor so that it can work with torch\n                                      transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)) #Normalize all the images\n                               ])\n \n \n \ntransform = transforms.Compose([transforms.Resize((32,32)),\n                               transforms.ToTensor(),\n                               transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n                               ])\ntraining_dataset = datasets.CIFAR10(root='.\/data', train=True, download=True, transform=transform_train) # Data augmentation is only done on training images\nvalidation_dataset = datasets.CIFAR10(root='.\/data', train=False, download=True, transform=transform)\n \ntraining_loader = torch.utils.data.DataLoader(training_dataset, batch_size=100, shuffle=True) # Batch size of 100 i.e to work with 100 images at a time\nvalidation_loader = torch.utils.data.DataLoader(validation_dataset, batch_size = 100, shuffle=False)","77a9a72d":"# We need to convert the images to numpy arrays as tensors are not compatible with matplotlib.\ndef im_convert(tensor):  \n    image = tensor.cpu().clone().detach().numpy() # This process will happen in normal cpu.\n    image = image.transpose(1, 2, 0)\n    image = image * np.array((0.5, 0.5, 0.5)) + np.array((0.5, 0.5, 0.5))\n    image = image.clip(0, 1)\n    return image","fa1392b8":"# Different classes in CIPHAR 10 dataset. \nclasses = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')","db3e4b28":"# We iter the batch of images to display\ndataiter = iter(training_loader) # converting our train_dataloader to iterable so that we can iter through it. \nimages, labels = dataiter.next() #going from 1st batch of 100 images to the next batch\nfig = plt.figure(figsize=(25, 4)) \n\n# We plot 20 images from our train_dataset\nfor idx in np.arange(20):\n    ax = fig.add_subplot(2, 10, idx+1, xticks=[], yticks=[]) \n    plt.imshow(im_convert(images[idx])) #converting to numpy array as plt needs it.\n    ax.set_title(classes[labels[idx].item()])","128ff820":"class LeNet(nn.Module):\n    def __init__(self, dropout):\n        super().__init__()\n        self.conv1 = nn.Conv2d(3, 16, 3, 1, padding=1) # input is color image, hence 3 i\/p channels. 16 filters, kernal size is tuned to 3 to avoid overfitting, stride is 1 , padding is 1 extract all edge features.\n        self.conv2 = nn.Conv2d(16, 32, 3, 1, padding=1) # We double the feature maps for every conv layer as in pratice it is really good.\n        self.conv3 = nn.Conv2d(32, 64, 3, 1, padding=1)\n        self.fc1 = nn.Linear(4*4*64, 500) # I\/p image size is 32*32, after 3 MaxPooling layers it reduces to 4*4 and 64 because our last conv layer has 64 outputs. Output nodes is 500\n        if dropout: self.dropout1 = nn.Dropout(0.5)\n        else: self.dropout1 = None\n        self.fc2 = nn.Linear(500, 10) # output nodes are 10 because our dataset have 10 different categories\n    def forward(self, x):\n        x = F.relu(self.conv1(x)) #Apply relu to each output of conv layer.\n        x = F.max_pool2d(x, 2, 2) # Max pooling layer with kernal of 2 and stride of 2\n        x = F.relu(self.conv2(x))\n        x = F.max_pool2d(x, 2, 2)\n        x = F.relu(self.conv3(x))\n        x = F.max_pool2d(x, 2, 2)\n        x = x.view(-1, 4*4*64) # flatten our images to 1D to input it to the fully connected layers\n        x = F.relu(self.fc1(x))\n        if self.dropout1:\n            x = self.dropout1(x) # Applying dropout b\/t layers which exchange highest parameters. This is a good practice\n        x = self.fc2(x)\n        return x","54001ef5":"model = LeNet(dropout=wandb.config['dropout']).to(device) # run our model on cuda GPU for faster results\nmodel","1744aac4":"criterion = nn.CrossEntropyLoss() # same as categorical_crossentropy loss used in Keras models which runs on Tensorflow\noptimizer = torch.optim.Adam(model.parameters(), lr = wandb.config['lr']) # fine tuned the lr","0c350cb3":"%%wandb\n\nepochs = wandb.config['epochs']\nrunning_loss_history = []\nrunning_corrects_history = []\nval_running_loss_history = []\nval_running_corrects_history = []\n\nrun.watch(model)\nwandb_table = []\n\n\nfor e in range(epochs): # training our model, put input according to every batch.\n  \n    running_loss = 0.0\n    running_corrects = 0.0\n    val_running_loss = 0.0\n    val_running_corrects = 0.0\n\n    for inputs, labels in training_loader:\n        inputs = inputs.to(device) # input to device as our model is running in mentioned device.\n        labels = labels.to(device)\n        outputs = model(inputs) # every batch of 100 images are put as an input.\n        loss = criterion(outputs, labels) # Calc loss after each batch i\/p by comparing it to actual labels. \n\n        optimizer.zero_grad() #setting the initial gradient to 0\n        loss.backward() # backpropagating the loss\n        optimizer.step() # updating the weights and bias values for every single step.\n\n        _, preds = torch.max(outputs, 1) # taking the highest value of prediction.\n        running_loss += loss.item()\n        running_corrects += torch.sum(preds == labels.data) # calculating te accuracy by taking the sum of all the correct predictions in a batch.\n\n    with torch.no_grad(): # we do not need gradient for validation.\n        for val_inputs, val_labels in validation_loader:\n            val_inputs = val_inputs.to(device)\n            val_labels = val_labels.to(device)\n            val_outputs = model(val_inputs)\n            val_loss = criterion(val_outputs, val_labels)\n            run.log({\n                'maximum_value': val_inputs.max().cpu().detach().numpy(),\n                'minimal_value_eval': val_inputs.min().cpu().detach().numpy(),\n                'mean_value_eval': val_inputs.mean().cpu().detach().numpy(),\n                'std_eval': val_inputs.std().cpu().detach().numpy(),\n            })\n            if random.random() < 0.01:\n                idx =  random.randint(0,len(val_inputs)-1)\n                wandb_table.append([wandb.Image(torch.permute(val_inputs[idx], (1, 2, 0)).cpu().detach().numpy()),val_labels[idx].cpu().detach().numpy() ,torch.argmax(val_outputs[idx]).cpu().detach().numpy() ,e])\n\n                    \n                \n\n        _, val_preds = torch.max(val_outputs, 1)\n        val_running_loss += val_loss.item()\n        val_running_corrects += torch.sum(val_preds == val_labels.data)\n\n        epoch_loss = running_loss\/len(training_loader) # loss per epoch\n        epoch_acc = running_corrects.float()\/ len(training_loader) # accuracy per epoch\n        running_loss_history.append(epoch_loss) # appending for displaying \n        running_corrects_history.append(epoch_acc)\n\n        val_epoch_loss = val_running_loss\/len(validation_loader)\n        val_epoch_acc = val_running_corrects.float()\/ len(validation_loader)\n        val_running_loss_history.append(val_epoch_loss)\n        val_running_corrects_history.append(val_epoch_acc)\n        \n        \n        run.log({\"train_loss\": epoch_loss, \"train_acc\":epoch_acc.item(), \"val_loss\": val_epoch_loss, 'val_acc': val_epoch_acc.item()})\n        \n        print('epoch :', (e+1))\n        print('training loss: {:.4f}, acc {:.4f} '.format(epoch_loss, epoch_acc.item()))\n        print('validation loss: {:.4f}, validation acc {:.4f} '.format(val_epoch_loss, val_epoch_acc.item()))","2c0b07e1":"wandb_table = [[x[0], classes[int(x[1])], classes[int(x[2])], x[3]] for x in wandb_table]\n\nwandb_table_2 = [x for x in wandb_table]\nt = [\"Image\",\"actual label\", \"predicted label\", 'epoch']\n\nrun.log({\"custom_data_table\": wandb.Table(data=wandb_table_2,\n                                columns = t)})","b8c5735e":"run.finish()","5e6591c3":"Defining our Model","e0908a4c":"Converting the Input images to plot using plt","57d49bb7":"## Narz\u0119dzia s\u0142u\u017c\u0105ce do monitoringu\n- WandB - Chmurowe roziw\u0105zanie do monitorowania eksperyment\u00f3w oraz optymalizacji parametr\u00f3w lokalnie, dla pojedy\u0144czej osoby lub zespo\u0142\u00f3w (open source)\n- Neptune - Chmurowe rozwi\u0105zanie do monitorowania eksperyment\u00f3w dla jednej osoby w wersji darmowej\n- MLflow - Lokalne rozwi\u0105zanie do monitorowania eksperyment\u00f3w oraz deploymentu modelu\n"}}