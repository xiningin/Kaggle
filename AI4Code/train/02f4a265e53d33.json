{"cell_type":{"5e63a9b1":"code","bbb546a4":"code","f71c3aa3":"code","93843720":"code","53195a8a":"code","1e329239":"code","3d9c695f":"code","c4499989":"code","34690b1e":"code","bd4a8767":"code","a320d111":"code","c1a42392":"code","8853997a":"code","709826c9":"code","97edb1dc":"code","c1a2a86b":"code","7e67419b":"code","5922c652":"code","c7a75b4e":"code","4541b773":"code","dc8dcc46":"code","4187600a":"code","28744c16":"code","a5057bc8":"code","ced67219":"code","c9b8ed44":"markdown","753c8912":"markdown","126834e1":"markdown","96c0aedb":"markdown","52784024":"markdown","a4cd1df2":"markdown"},"source":{"5e63a9b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bbb546a4":"pip install openpyxl","f71c3aa3":"pip install xlrd","93843720":"#Library and Functions\n\nimport pandas as pd\npd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)\nfrom mlxtend.frequent_patterns import apriori, association_rules\n\n\ndef outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\n\ndef retail_data_prep(dataframe):\n    dataframe.drop(dataframe[dataframe[\"StockCode\"]==\"POST\"].index, inplace=True)\n    dataframe.dropna(inplace=True)\n    dataframe = dataframe[~dataframe[\"Invoice\"].str.contains(\"C\", na=False)]\n    dataframe = dataframe[dataframe[\"Quantity\"] > 0]\n    dataframe = dataframe[dataframe[\"Price\"] > 0]\n    replace_with_thresholds(dataframe, \"Quantity\")\n    replace_with_thresholds(dataframe, \"Price\")\n    return dataframe","53195a8a":"df_ = pd.read_excel(\"..\/input\/online-retail-ii-data-set-from-ml-repository\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\")\ndf = df_.copy()\ndf = retail_data_prep(df)\n\ndf.head()","1e329239":"#Germany customers produce association rule\ndf = df[df['Country'] == \"Germany\"]\n\ndf.head(10)\n","3d9c695f":"# all possible products will be put in the columns\n# If there is a product in the cart, the value will be 1, otherwise 0 will be assigned\n\ndf.groupby(['Invoice', 'Description']).agg({\"Quantity\": \"sum\"}).head(20)\n\ndf.groupby(['Invoice', 'Description']).agg({\"Quantity\": \"sum\"}).unstack()\n\ndf.groupby(['Invoice', 'Description']).agg({\"Quantity\": \"sum\"}).unstack().fillna(0)\n\ninvoice_product_df = df.groupby(['Invoice', 'Description'])['Quantity'].sum().unstack().fillna(0).applymap(lambda x: 1 if x > 0 else 0)\n\n\ndef create_invoice_product_df(dataframe, id=False):\n    if id:\n        return dataframe.groupby(['Invoice', \"StockCode\"])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\n    else:\n        return dataframe.groupby(['Invoice', 'Description'])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\n\n\n","c4499989":"invoice_product_df = create_invoice_product_df(df)\ninvoice_product_df.head()","34690b1e":"frequent_itemsets = apriori(invoice_product_df, min_support=0.01, use_colnames=True)\n\nfrequent_itemsets.tail(20)","bd4a8767":"rules = association_rules(frequent_itemsets, metric=\"support\", min_threshold=0.01)\n\nrules.tail()","a320d111":"def create_invoice_product_df(dataframe, id=False):\n    if id:\n        return dataframe.groupby(['Invoice', \"StockCode\"])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\n    else:\n        return dataframe.groupby(['Invoice', 'Description'])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\n    \ninvoice_product_df = create_invoice_product_df(df)\ninvoice_product_df.head()\n    \n    ","c1a42392":"frequent_itemsets = apriori(invoice_product_df, min_support=0.01, use_colnames=True)\n\nfrequent_itemsets.tail(20)","8853997a":"def create_rules(dataframe, id=True, country=\"France\"):\n    dataframe = dataframe[dataframe['Country'] == country]\n    dataframe = create_invoice_product_df(dataframe, id)\n    frequent_itemsets = apriori(dataframe, min_support=0.01, use_colnames=True)\n    rules = association_rules(frequent_itemsets, metric=\"support\", min_threshold=0.01)\n    return rules\n","709826c9":"rules_grm = create_rules(df, country=\"Germany\")","97edb1dc":"rules_grm","c1a2a86b":"# conviction : expected frequency of x without y\n# Is it normal for the lift value to be the same in two different combinations?","7e67419b":"def check_id(dataframe, stock_code):\n    product_name = dataframe[dataframe[\"StockCode\"] == stock_code][[\"Description\"]].values[0].tolist()\n    print(product_name)\n\ndf[df[\"StockCode\"] == 21987][[\"Description\"]].values[0].tolist()","5922c652":"check_id(df, 21987)","c7a75b4e":"check_id(df, 23235)","4541b773":"check_id(df, 22747)","dc8dcc46":"def arl_recommender(rules_df, product_id, rec_count=1):\n    sorted_rules = rules_df.sort_values(\"lift\", ascending=False)\n    recommendation_list = []\n    for i, product in sorted_rules[\"antecedents\"].items():\n        for j in list(product):\n            if j == product_id:\n                recommendation_list.append(list(sorted_rules.iloc[i][\"consequents\"]))\n    recommendation_list = list({item for item_list in recommendation_list for item in item_list})\n    return recommendation_list[:rec_count]\n\n\nsorted_rules = rules_grm.sort_values(\"lift\", ascending=False)\n\nfor i, product in sorted_rules[\"antecedents\"].items():\n    print(i,list(product))\n    break\n","4187600a":"arl_recommender(rules_grm, 21987, 1)\ncheck_id(df, arl_recommender(rules_grm, 21987, 1)[0])","28744c16":"arl_recommender(rules_grm, 23235, 1)\ncheck_id(df, arl_recommender(rules_grm, 23235, 1)[0])","a5057bc8":"arl_recommender(rules_grm, 22747, 2)\ncheck_id(df, arl_recommender(rules_grm, 22747, 1)[0])","ced67219":"check_id(df, arl_recommender(rules_grm, 21987, 1)[0])\ncheck_id(df, arl_recommender(rules_grm, 23235, 1)[0])\ncheck_id(df, arl_recommender(rules_grm, 22747, 1)[0])\n","c9b8ed44":"* USER 1 product id: 21987\n* USER 2 product id: 23235\n* USER 3 product id: 22747","753c8912":"**What are the names of the products whose IDs are given?**","126834e1":"**Let's Make a Product Suggestion for the Users in the Cart**","96c0aedb":"*Names of Recommended Products*","52784024":"# Purpose: Suggesting a Product to Users at the CART Stage\n","a4cd1df2":"* USER 1 product id: 21987\n* USER 2 product id: 23235\n* USER 3 product id: 22747"}}