{"cell_type":{"0a74ce45":"code","6bb6c03f":"code","e00f75c8":"code","a17fbe3f":"code","05bb742b":"code","6480d640":"code","77f19893":"code","52f8eb56":"code","1a130351":"code","ad1fef3f":"code","6e85965a":"code","ec9b4136":"code","577cd6c0":"code","22ef5e51":"code","0d5adaf7":"code","fb02a35d":"code","90f5ce52":"code","608dc2be":"code","926d159d":"markdown","b2a1720c":"markdown","58846223":"markdown","e7e512ba":"markdown","5a943cd9":"markdown","c2ed2c19":"markdown","46cb814c":"markdown","5511004a":"markdown","91bd37b0":"markdown","22d3e8a3":"markdown","3d094d28":"markdown"},"source":{"0a74ce45":"# Importing the libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.models import Sequential\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6bb6c03f":"# Reading the data\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","e00f75c8":"# Seperating features and label\ny_train = train[\"label\"]\nX_train = train.drop([\"label\"], axis=1)","a17fbe3f":"# Size of the training data\nX_train.shape","05bb742b":"X_train.head(5)","6480d640":"# Visualize the number of digits under each class\nplt.figure(figsize=(9, 5))\nsns.countplot(y_train)\nplt.title(\"Count plot\");","77f19893":"y_train.value_counts()","52f8eb56":"# Displaying some training samples\nimg_matrix = X_train.iloc[100].to_numpy()\nimg_matrix = img_matrix.reshape(28, 28)\n\nplt.imshow(img_matrix, cmap=plt.cm.binary)","1a130351":"# Normalization\nX_train = tf.keras.utils.normalize(X_train, axis=1)\ntest = tf.keras.utils.normalize(test, axis=1)","ad1fef3f":"# Reshape\nX_train = X_train.values.reshape(-1, 28, 28)\ntest = test.values.reshape(-1, 28, 28)","6e85965a":"X_train, X_eval, y_train, y_eval = train_test_split(X_train, y_train, test_size=0.1, random_state=42)","ec9b4136":"X_train.shape, X_eval.shape, y_train.shape, y_eval.shape","577cd6c0":"# 1: Building the model\nmodel = Sequential()\nmodel.add(Flatten())\nmodel.add(Dense(128, activation=tf.nn.relu))\nmodel.add(Dense(128, activation=tf.nn.relu))\nmodel.add(Dense(10, activation=tf.nn.sigmoid))\n\n# 2. Compile the model\nmodel.compile(optimizer=\"adam\",\n             loss=\"sparse_categorical_crossentropy\",\n             metrics=[\"accuracy\"])\n\n# 3. Train the model\nhistory = model.fit(X_train, y_train,\n         validation_data=(X_eval, y_eval),\n         epochs=100)","22ef5e51":"history_df = pd.DataFrame(history.history)\nhistory_df.loc[:, [\"loss\", \"accuracy\"]].plot()\nhistory_df.loc[:, [\"val_loss\", \"val_accuracy\"]].plot()","0d5adaf7":"# Summary of the scores\nhistory_df.describe()","fb02a35d":"results = model.predict(test)\nresults = np.argmax(results, axis=1)\n\nsubmission = pd.DataFrame({\"ImageId\": [i for i in range(1, 28001)] , \"Label\": list(results)})\n\nsubmission.to_csv(\"mnist_submission.csv\", index=False)","90f5ce52":"plt.imshow(test[10].reshape(28, 28))","608dc2be":"submission.iloc[10]","926d159d":"## 3: Feature Engineering\n\nFeature engineering is an essential step of data preprocessin, this helps the model converge much faster.\nWe will be performing 3 main steps here\n1. Normalization - We will perform grey scale normalization to reduce the illumination difference it also helps the model train faster\n2. Reshape - We will drop the shape to 28x28. We will be adding an extra dimension, i.e 28x28x1 (Greyscale data). We have to add this extra dimension for keras, as \n3. Label Encoding - encoding labels to one hot vectors","b2a1720c":"## 1: Exploratory Data Analysis\n\nPerforming EDA on the training dataset","58846223":"# 8. Random Validation\n\nA random sample of the test set is taken to validate with the predictions made by the model","e7e512ba":"There seem to be an equal distribution of class labels","5a943cd9":"## 7. Submit Results","c2ed2c19":"## 6: Visualize Train and Validation Results","46cb814c":"Since the validation accuracy is over ~ 97.9, the same model will be used to submit the result.","5511004a":"# MNIST Classification using Tensorflow\n\nTraining a Deep Learning model on handwritten digits using Tensorflow and Keras to accurately predict the test set\n\nKaggle link to the challenge - https:\/\/www.kaggle.com\/c\/digit-recognizer\n\n## Contents","91bd37b0":"## 4: Train Test Split\n\nSplitting `X_train` into training data (90%) and test data (10%) using `sklearn.model_selection.train_test_split`","22d3e8a3":"## 0: Importing libraries and the dataset","3d094d28":"## 5: Creating, Training and Fitting the model"}}