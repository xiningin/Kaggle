{"cell_type":{"ca22e8fa":"code","144005cb":"code","3757cf6d":"code","ba774bfa":"code","67c53386":"code","3551dae7":"code","68b1c41f":"code","98387564":"code","b240bc99":"code","596571b2":"code","7bdb721d":"code","f151f62e":"code","7a535e79":"code","f495d3a3":"code","e2619ad2":"code","abfddfcd":"code","19d966ce":"code","511bf709":"code","307e997e":"code","10c55d7d":"code","dba829b2":"code","be49cb61":"code","2dd5b8de":"code","62873010":"code","5cf48afa":"code","3a7dfabf":"code","710bc813":"code","caefe81a":"code","b2cbc4ac":"code","84da7eb6":"code","72e6751b":"code","fc1d95b9":"code","dbadfbff":"code","e36ffd6f":"code","04b47465":"code","46a43e28":"code","b47a42f9":"code","7affa697":"code","5af552e0":"code","5b832bed":"code","fe3978cd":"code","64a65f80":"code","7ff6fa42":"code","2dd4ba62":"code","a781b343":"code","2c9cfc98":"code","464cf2c0":"code","9727239f":"code","7b7f7f1b":"code","20530cb6":"code","0c63222f":"code","99d9b907":"code","97e015d7":"code","83618f89":"code","98687534":"code","c722bda4":"code","7fd55d54":"code","39e106fa":"code","8ff55292":"code","e02255f4":"code","cfb8184b":"code","dcfde6dd":"code","6c7869a6":"code","ae8f1a22":"code","39ca71a0":"code","95ef3a7d":"code","d2e8d896":"code","866fccb9":"code","3acd635d":"code","2de6eeee":"code","21878de3":"code","b066a1e4":"code","26c1a35c":"code","866e7e7a":"code","6ee95d78":"code","aa66d05c":"code","a7bd96bd":"code","ada08562":"code","10d6ff3c":"code","3e63d807":"code","31ebe099":"code","66c73f0a":"code","bd0776b6":"code","461f6a37":"code","4f3a9494":"code","7c974023":"code","2d79b6ec":"markdown","f090d24b":"markdown","e002dd39":"markdown","add9b5e0":"markdown","8c7b907e":"markdown","9e99913e":"markdown","2d007cd6":"markdown","2583677e":"markdown","64bb32d2":"markdown","ab69d117":"markdown","e97e47a8":"markdown","28fca9af":"markdown","d1865779":"markdown","46b9d24f":"markdown","29612c87":"markdown","3f155b85":"markdown","dec14004":"markdown","143b239d":"markdown","78a65136":"markdown","8e675c5e":"markdown"},"source":{"ca22e8fa":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n# Ignorar warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n\nimport keras\nfrom keras.layers import Dense, Dropout\nfrom keras.models import Input, Model\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\n\n","144005cb":"#Cargar Data\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf = df_train.append(df_test , ignore_index = True)\n\n#Inspecciones\ndf_train.shape, df_test.shape, df_train.columns.values","3757cf6d":"#Vericicar Nulls\ndf.Pclass.isnull().sum()","ba774bfa":"#Comparacion de las columnas Pclass y Survived\ndf[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()","67c53386":"#Grafica de comparacion de Pclass y Survived\nsns.barplot(data=df,x='Pclass',y='Survived')","3551dae7":"df['Title'] = df.Name.map( lambda x: x.split(',')[1].split( '.' )[0].strip())\n\n\n#Contamos la cantida de personas que hay por \"Titulo\"\ndf['Title'].value_counts()","68b1c41f":"#Se modifican los valores en la tabla \ndf['Title'] = df['Title'].replace('Mlle', 'Miss') #Se reemplaza Mlle por Miss\ndf['Title'] = df['Title'].replace(['Mme','Lady','Ms'], 'Mrs') #Se reemplaza Mme, Lady y Ms por Mrs\ndf.Title.loc[ (df.Title !=  'Master') & (df.Title !=  'Mr') & (df.Title !=  'Miss') #Todos los distintos se les asigna Others\n             & (df.Title !=  'Mrs')] = 'Others'\n\n# Comparando Title y Survived\ndf[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()\n","98387564":"df = pd.concat([df, pd.get_dummies(df['Title'])], axis=1).drop(labels=['Name'], axis=1)","b240bc99":"#Grafica Para analizar cuantas personas sobrevivieron segun su Title\nsns.barplot(data=df,x='Title',y='Survived')","596571b2":"#Verificamos si hay Nulls \ndf.Sex.isnull().sum()","7bdb721d":"#Comparando Sex y Survived\ndf[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()","f151f62e":"#Grafica de comparacion de Sex y Survived\nsns.barplot(data=df,x='Sex',y='Survived')","7a535e79":"#Mapeamos la columna Sex \n\ndf.Sex = df.Sex.map({'male':0, 'female':1})","f495d3a3":"#Verificamos si hay Nulls\ndf.Age.isnull().sum()","e2619ad2":"#Verificamos si hay null\ndf.SibSp.isnull().sum(axis=0), df.Parch.isnull().sum(axis=0)","abfddfcd":"#Creamos una columna nueva y Sumamos los valores en las columnas SibSp y Parch\ndf['Family'] = df['SibSp'] + df['Parch'] + 1","19d966ce":"#Comparando Family y Survives\ndf[['Family', 'Survived']].groupby(['Family'], as_index=False).mean()","511bf709":"sns.barplot(data=df,x='Family',y='Survived')","307e997e":"#Contamos la cantidad de personas en familias\ndf['Family'].value_counts()","10c55d7d":"#Agrupamos las familias de 4 o mas integrantes\ndf.Family = df.Family.map(lambda x: 0 if x > 4 else x)","dba829b2":"#Comparando Family y Survived\ndf[['Family', 'Survived']].groupby(['Family'], as_index=False).mean()","be49cb61":"#Grafica de compracacion de Family y Survived\nsns.barplot(data=df,x='Family',y='Survived')","2dd5b8de":"#Verificamos si hay Nulls\ndf.Ticket.isnull().sum(axis=0)\n","62873010":"#Traemos solo la primera letra de la columna ticket\ndf.Ticket = df.Ticket.map(lambda x: x[0])","5cf48afa":"# Comparando Ticket y Survived\ndf[['Ticket', 'Survived']].groupby(['Ticket'], as_index=False).mean()","3a7dfabf":"#Grafica de compracacion de Ticket y Survived\nsns.barplot(data=df,x='Ticket',y='Survived')","710bc813":"#contamos la cantidad de personas por cada tipo de ticket\ndf['Ticket'].value_counts()\n","caefe81a":"#Comparando Ticket con Fare\ndf[['Ticket', 'Fare']].groupby(['Ticket'], as_index=False).mean()\n","b2cbc4ac":"#Grafica de compracacion de Ticket y Fare\nsns.barplot(data=df,x='Ticket',y='Fare')","84da7eb6":"#Comparando Ticket con Pclass\ndf[['Ticket', 'Pclass']].groupby(['Ticket'], as_index=False).mean()\n","72e6751b":"#Grafica de compracacion de Ticket y Pclass\nsns.barplot(data=df,x='Ticket',y='Pclass')","fc1d95b9":"#Verificamos si hay nulls\ndf.Fare.isnull().sum()\n","dbadfbff":"#Buscandolo por el ticket\ndf.Ticket[df.Fare.isnull()]\n","e36ffd6f":"#Buscandolo por la Pclass\ndf.Pclass[df.Fare.isnull()]\n","04b47465":"#Buscandolo por la cabina\ndf.Cabin[df.Fare.isnull()]\n","46a43e28":"#Buscandolo por el puerto de embarque\ndf.Embarked[df.Fare.isnull()]\n","b47a42f9":"#Verificamos si hay Nulls\ndf.Cabin.isnull().sum(axis=0)","7affa697":"#Como hay tantos valores nulls Eliminamos la columna para no afectar los resultados\ndf = df.drop(labels=['Cabin'], axis=1)\n","5af552e0":"# Verificamos si hay Nulls\ndf.Embarked.isnull().sum()","5b832bed":"#Cambiamos las dos nulls asignandoles 'S'\ndf.Embarked.fillna('S',inplace=True)\n","fe3978cd":"#Grafica de comparacion entre Embarked y Survived\nsns.barplot(data=df,x='Embarked',y='Survived')","64a65f80":"#Comparando Embarked y Survived agregando otras caracteristicas\ndf[['Embarked', 'Survived','Pclass','Fare', 'Age', 'Sex']].groupby(['Embarked'], as_index=False).mean()","7ff6fa42":"#Usando boxplot para visualizar la distribucion de la tarifa en cada Pclass\n\nsns.boxplot('Pclass','Fare',data=df)\nplt.ylim(0, 300) # ignorando la data cuya tarifa > 500\nplt.show()","2dd4ba62":"#Companando Pclass y Fare\ndf[['Pclass', 'Fare']].groupby(['Pclass']).mean()\n","a781b343":"#Grafica de comparacion entre Pclass y Fare\nsns.barplot(data=df,x='Pclass',y='Fare')","2c9cfc98":"#Dividimos la desviacion estandar por la media. Una relacion mas baja significa una distribucion mas apretada en la tarifa en cada clase\ndf[['Pclass', 'Fare']].groupby(['Pclass']).std() \/ df[['Pclass', 'Fare']].groupby(['Pclass']).mean()","464cf2c0":"#grafica de la distribucion de la tarifa por cada ticke\nsns.boxplot('Ticket','Fare',data=df)\nplt.ylim(0, 300) # ignorar la data con la tarifa mayor a 500\nplt.show()","9727239f":"#Comparamos Ticket con Fare\ndf[['Ticket', 'Fare']].groupby(['Ticket']).mean()\n","7b7f7f1b":"#Se divide la desviasion estanar entre la media\ndf[['Ticket', 'Fare']].groupby(['Ticket']).std() \/  df[['Ticket', 'Fare']].groupby(['Ticket']).mean()","20530cb6":"#Grafica de Tarifas por cada puerto de embarque\nsns.boxplot('Embarked','Fare',data=df)\nplt.ylim(0, 300) # ignoramos la data cuya tarifa sea mayor que 500\nplt.show()","0c63222f":"#Comparando Embarked y Fare\ndf[['Embarked', 'Fare']].groupby(['Embarked']).mean()\n","99d9b907":"#Grafica de comparacion de Embarked y Fare\nsns.barplot(data=df,x='Embarked',y='Fare')","97e015d7":"#Se divide la desviasion estandar entre la media\ndf[['Embarked', 'Fare']].groupby(['Embarked']).std() \/  df[['Embarked', 'Fare']].groupby(['Embarked']).mean()\n","83618f89":"guess_Fare = df.Fare.loc[ (df.Ticket == '3') & (df.Pclass == 3) & (df.Embarked == 'S')].median()\ndf.Fare.fillna(guess_Fare , inplace=True)\n\n# Vemos los valores de la media de la Tarifa para las personas que murieron y sobrevivieron\ndf[['Fare', 'Survived']].groupby(['Survived'],as_index=False).mean()","98687534":"#Visualizamos la distribucion de la tarifa de las personas que sobrevivieron y de las que murieron\n\ngrid = sns.FacetGrid(df, hue='Survived', height=4, aspect=1.5)\ngrid.map(plt.hist, 'Fare', alpha=.5, bins=range(0,210,10))\ngrid.add_legend()\nplt.show()","c722bda4":"#Vemos la relacion entre la Tarifa y Survided usando un scatter plot\n\ndf[['Fare', 'Survived']].groupby(['Fare'],as_index=False).mean().plot.scatter('Fare','Survived')\nplt.show()","7fd55d54":"#Dividimos la Tarifa en 5 intervalos con la misma cantidad de personas (Fare-Bin)\ndf['Fare-bin'] = pd.qcut(df.Fare,5,labels=[1,2,3,4,5]).astype(int)\n\n# Comparamos Fare-bin y Survived\ndf[['Fare-bin', 'Survived']].groupby(['Fare-bin'], as_index=False).mean()","39e106fa":"#Comparamos entre Title y Age\ngrid = sns.FacetGrid(df, col='Title', height=3, aspect=0.8, sharey=False)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=range(0,105,5))\nplt.show()","8ff55292":"#Visuaizamos la media de Age por cada Title\ndf[['Title', 'Age']].groupby(['Title']).mean()\n","e02255f4":"#Visuaizamos la desviasion estandar de Age por cada Title\ndf[['Title', 'Age']].groupby(['Title']).std()\n","cfb8184b":"#Comparamos Fare-bin y Age\n\ngrid = sns.FacetGrid(df, col='Fare-bin', height=3, aspect=0.8, sharey=False)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=range(0,105,5))\nplt.show()","dcfde6dd":"#Comparacion entre SibSp y Age\ngrid = sns.FacetGrid(df, col='SibSp', col_wrap=4, height=3.0, aspect=0.8, sharey=False)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=range(0,105,5))\nplt.show()","6c7869a6":"#Visuaizamos la media de Age por cada SibSp\ndf[['SibSp', 'Age']].groupby(['SibSp']).mean()\n","ae8f1a22":"#Visuaizamos la desviasion estandar de Age por cada SibSp\n\ndf[['SibSp', 'Age']].groupby(['SibSp']).std()\n","39ca71a0":"#Comparacion entre Parch y Age\n\ngrid = sns.FacetGrid(df, col='Parch', col_wrap=4, height=3.0, aspect=0.8, sharey=False)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=range(0,105,5))\nplt.show()","95ef3a7d":"#Visuaizamos la media de Age por cada Parch\n\ndf[['Parch', 'Age']].groupby(['Parch']).mean()\n","d2e8d896":"#Visualizamos la desviacion estandar de Age por cada Parch\n\ndf[['Parch', 'Age']].groupby(['Parch']).std()\n","866fccb9":"#Eliminamos la columna de embarque por ofrecer poca informacion relevante\ndf = df.drop(labels='Embarked', axis=1)","3acd635d":"#Notamos que en lugar de utilizar Title, deberiamos usar su correspondiente dummy variables\n\n\n\ndf_sub = df[['Age','Master','Miss','Mr','Mrs','Others','Fare-bin','SibSp']]\n\nX_train  = df_sub.dropna().drop('Age', axis=1)\ny_train  = df['Age'].dropna()\nX_test = df_sub.loc[np.isnan(df.Age)].drop('Age', axis=1)\n\nregressor = RandomForestRegressor(n_estimators = 300)\nregressor.fit(X_train, y_train)\ny_pred = np.round(regressor.predict(X_test),1)\ndf.Age.loc[df.Age.isnull()] = y_pred\n\ndf.Age.isnull().sum(axis=0) # ya no mas null","2de6eeee":"bins = [ 0, 4, 12, 18, 30, 50, 65, 100] # Esto es algo arbitrario\nage_index = (1,2,3,4,5,6,7) #('baby','child','teenager','young','mid-age','over-50','senior')\ndf['Age-bin'] = pd.cut(df.Age, bins, labels=age_index).astype(int)\n\ndf[['Age-bin', 'Survived']].groupby(['Age-bin'],as_index=False).mean()","21878de3":"df[['Ticket', 'Survived']].groupby(['Ticket'], as_index=False).mean()\n","b066a1e4":"df['Ticket'].value_counts()\n","26c1a35c":"df['Ticket'] = df['Ticket'].replace(['A','W','F','L','5','6','7','8','9'], '4')\n\n# Comparamos nuevamente\ndf[['Ticket', 'Survived']].groupby(['Ticket'], as_index=False).mean()","866e7e7a":"df = pd.get_dummies(df,columns=['Ticket'])\n","6ee95d78":"df = df.drop(labels=['SibSp','Parch','Age','Fare','Title'], axis=1)\ny_train = df[0:891]['Survived'].values\nX_train = df[0:891].drop(['Survived','PassengerId'], axis=1).values\nX_test  = df[891:].drop(['Survived','PassengerId'], axis=1).values","aa66d05c":"precisiones_globales=[]\nepochs = 200\ndef graf_model(train_history):\n    f = plt.figure(figsize=(15,10))\n    ax = f.add_subplot(121)\n    ax2 = f.add_subplot(122)\n    # summarize history for accuracy\n    ax.plot(train_history.history['binary_accuracy'])\n    ax.plot(train_history.history['val_binary_accuracy'])\n    ax.set_title('model accuracy')\n    ax.set_ylabel('accuracy')\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'test'], loc='upper left')\n    # summarize history for loss\n    ax2.plot(train_history.history['loss'])\n    ax2.plot(train_history.history['val_loss'])\n    ax2.set_title('model loss')\n    ax2.set_ylabel('loss')\n    ax2.set_xlabel('epoch')\n    ax2.legend(['train', 'test'], loc='upper left')\n    plt.show()\ndef precision(model, registrar=False):\n    y_pred = model.predict(X_train)\n    train_auc = roc_auc_score(y_train, y_pred)\n    y_pred = model.predict(val_dfX)\n    val_auc = roc_auc_score(val_dfY, y_pred)\n    print('Train AUC: ', train_auc)\n    print('Vali AUC: ', val_auc)\n    if registrar:\n        precisiones_globales.append([train_auc,val_auc])","a7bd96bd":"# Normalizamos los inputs\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","ada08562":"print(\"Entrenamiento: \",X_train.shape)\nprint(\"Test : \",X_test.shape)","10d6ff3c":"X_train,val_dfX,y_train, val_dfY = train_test_split(X_train,y_train , test_size=0.20, stratify=y_train)\nprint(\"Entrenamiento: \",X_train.shape)\nprint(\"Validacion : \",val_dfX.shape)","3e63d807":"def func_model():   \n    inp = Input(shape=(17,))\n    x=Dense(8, activation=\"relu\", kernel_initializer='glorot_normal')(inp)\n    x=Dense(8, activation=\"relu\", kernel_initializer='glorot_normal')(x)\n    x=Dense(1, activation=\"sigmoid\", kernel_initializer='glorot_normal')(x)\n    model = Model(inputs=inp, outputs=x)\n    model.compile(loss='binary_crossentropy', optimizer='Adam', metrics=['binary_accuracy'])\n    return model\nmodel = func_model()\nprint(model.summary())","31ebe099":"train_history = model.fit(X_train, y_train, batch_size = 32, epochs = epochs, validation_data=(val_dfX, val_dfY))","66c73f0a":"graf_model(train_history)\nprecision(model, True)","bd0776b6":"def func_model_reg():   \n    inp = Input(shape=(17,))\n    x=Dropout(0.1)(inp)\n    x=Dense(8, activation=\"relu\", kernel_initializer='glorot_normal')(inp)\n    x=Dropout(0.3)(x)\n    x=Dense(8, activation=\"relu\", kernel_initializer='glorot_normal')(x)\n    x=Dropout(0.3)(x)\n    x=Dense(1, activation=\"sigmoid\", kernel_initializer='glorot_normal')(x)\n    model = Model(inputs=inp, outputs=x)\n    model.compile(loss='binary_crossentropy', optimizer='Adam', metrics=['binary_accuracy'])\n    return model","461f6a37":"modelR = func_model_reg()\nprint(modelR.summary())\nfinalTrain = modelR.fit(X_train, y_train, batch_size=32, epochs=epochs, validation_data=(val_dfX, val_dfY), verbose=0)","4f3a9494":"graf_model(finalTrain)\nprecision(modelR)","7c974023":"y_pred = model.predict(X_test)\ny_final = (y_pred > 0.5).astype(int).reshape(X_test.shape[0])\n\noutput = pd.DataFrame({'PassengerId': df_test['PassengerId'], 'Survived': y_final})\noutput.to_csv('prediction.csv', index=False)","2d79b6ec":"# Columna Sex","f090d24b":"# Precision de los datos","e002dd39":"#  **Cargar Data**","add9b5e0":"# Columna Embarked","8c7b907e":"# Columna Name","9e99913e":"# Analisis y estudio de datos","2d007cd6":"# Graficas","2583677e":"# Leyenda","64bb32d2":"# Columna Ticket","ab69d117":"# Importar Librerias","e97e47a8":"# Columna Cabin","28fca9af":"# Columna Pclass","d1865779":"# Inicializando la red neuronal","46b9d24f":"\n* **Survival:** Sobreviviente 0 = No, 1 = Si\n\n* **Pclass:** Clase del ticket 1 = 1ra, 2 = 2da, 3 = 3ra\n\n* **Sex:** Sexo\n\n* **Age:** Edad\n\n* **SibSp:** # de hermanos \/ parejas abordo del Titanic\n\n* **Parch:** # of padres \/ hijos abordo del Titanic. Como algunos ni\u00f1os viajaron con su ni\u00f1era se le asigno el Parch = 0\n\n* **Ticket:** numero del ticket\n\n* **Fare:** Tarifa del pasajero\n\n* **Cabin:** Numero de cabina\n\n* **Embarked:** Puerto de Embarque C = Cherbourg, Q = Queenstown, S = Southampton","29612c87":"# Entrenando la Red Neuronal","3f155b85":"# Columna Age","dec14004":"# Columna SibSp y Parch","143b239d":"# Regularizacion","78a65136":"# Columna Fare","8e675c5e":"# Modelo"}}