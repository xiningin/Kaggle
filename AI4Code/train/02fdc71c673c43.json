{"cell_type":{"b88b0464":"code","8a1c673b":"code","ec752040":"code","4e3560ec":"code","be66d404":"code","b2c739d6":"code","fe80daf5":"code","cf4edd2f":"code","426acbe4":"code","6620d425":"code","ac0ebb5e":"code","154e3d80":"code","c5db1bde":"code","5891d830":"code","d75870c0":"code","633f3084":"code","6b29978c":"code","95cbfd73":"code","d42a760a":"code","80d08231":"code","4561afdd":"code","16ef2ab7":"code","ab48846a":"code","91f55bc8":"code","affae15a":"code","dbad9e77":"code","f66ce98a":"code","8ed2820f":"code","21416fb6":"code","04fcde64":"code","ffbaad4e":"code","fccaaf37":"code","db1f9d70":"code","055db826":"code","1c337aa5":"code","8e902624":"code","06618f9f":"code","1603650b":"code","41de0aa7":"code","ad92af82":"code","14a9c7c5":"code","ab2d668e":"code","fec50459":"code","e21abc3f":"code","c71c61b2":"code","173225a2":"code","c3ea9137":"code","6ec59f5a":"code","fbc5e0cf":"code","1a18877d":"code","a341a45d":"code","dc2ab3ba":"code","d0b454fd":"code","50e779e9":"code","283f580e":"code","c74707b0":"code","df76b07c":"code","f6540057":"code","e7dacadf":"code","2fe89ba8":"code","5de13537":"code","f482be15":"code","6106ed06":"code","59c02b2d":"code","d309484a":"code","31626736":"code","3fec70aa":"code","8c535dda":"code","504d5ed5":"code","e5185227":"code","60c9f058":"markdown","bd6d987d":"markdown","4626f2bc":"markdown","7db6cc6a":"markdown","6363130e":"markdown","6d43a6fc":"markdown","68747578":"markdown","7f83c25c":"markdown","b716d741":"markdown","013e1741":"markdown","b6484749":"markdown","27efb2a0":"markdown","0ab75efa":"markdown","8d79449f":"markdown","773917f7":"markdown"},"source":{"b88b0464":"import pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')","8a1c673b":"import sqlite3\naddress = '..\/input\/soccer\/database.sqlite'\ncon = sqlite3.connect(address)","ec752040":"# in this sqlite query we join three tables and the table 'team' is used twice with HT and AT aliases\nmatches = pd.read_sql(\"\"\"SELECT season,\n                                date,\n                                Country.name AS country_name, \n                                League.name AS league_name,\n                                HT.team_long_name AS home_team,\n                                AT.team_long_name AS away_team,\n                                home_team_goal,\n                                away_team_goal,\n                                B365H,\n                                B365D,\n                                B365A,\n                                BWH,\n                                BWD,\n                                BWA                                    \n                                    FROM Match\n                                    JOIN Country on Country.id = Match.country_id\n                                    JOIN League on League.id = Match.league_id\n                                    LEFT JOIN Team AS HT on HT.team_api_id = Match.home_team_api_id\n                                    LEFT JOIN Team AS AT on AT.team_api_id = Match.away_team_api_id\n                                \"\"\", con)","4e3560ec":"# show all columns\npd.options.display.max_columns = None","be66d404":"matches","b2c739d6":"# delete all rows with NaN-values, these are for leagues with missing information on bets\nmatches = matches.dropna()\nmatches","fe80daf5":"# results are not available in the original database, so we have to calculate the result with this function\n\ndef label_result (row):\n    if row['home_team_goal'] > row['away_team_goal']:\n        return 1\n    if row['home_team_goal'] == row['away_team_goal']:\n        return 0\n    if row['home_team_goal'] < row['away_team_goal']:\n        return 2","cf4edd2f":"matches.apply (lambda row: label_result(row), axis=1)","426acbe4":"# adding relults to the table\nmatches['result'] = matches.apply (lambda row: label_result(row), axis=1)\nmatches.head()","6620d425":"print(\"Number of teams in our 'matches' table: {}\".format(matches['home_team'].nunique()))","ac0ebb5e":"# teams with most wins at home\nhome_wins = pd.DataFrame(matches.loc[matches['result'] == 1, 'home_team'].value_counts().reset_index().values, columns=[\"team\", \"number_of_wins\"])\nhome_wins = home_wins.sort_index(axis = 0, ascending=True)\nhome_wins.head(5)","154e3d80":"# teams with most wins away\naway_wins = pd.DataFrame(matches.loc[matches['result'] == 2, 'away_team'].value_counts().reset_index().values, columns=[\"team\", \"number_of_wins\"])\naway_wins = away_wins.sort_index(axis = 0, ascending=True)\naway_wins.head(5)","c5db1bde":"# teams with most wins in total\nwins = pd.merge(home_wins, away_wins, on='team')\nwins['number_of_wins'] = wins['number_of_wins_x'] + wins['number_of_wins_y']\nwins.drop(['number_of_wins_x', 'number_of_wins_y'], axis=1, inplace=True)\nwins.sort_values(by=['number_of_wins'], ascending=False).head(10)","5891d830":"# we calculate which team was valued higher by a betting company,\n# if both teams have the same coefficient on the win, we consider it as a bet on draw\ndef label_prediction (row):\n    if row['B365H'] < row['B365D'] and row['B365H'] < row['B365A']:\n        return 1\n    if row['B365A'] < row['B365D'] and row['B365A'] < row['B365H']:\n        return 2\n    else:\n        return 0","d75870c0":"matches.apply (lambda row: label_prediction(row), axis=1)","633f3084":"matches['B365_prediction'] = matches.apply (lambda row: label_prediction(row), axis=1)\nmatches.head()","6b29978c":"# the same function for the second betting company\n\ndef label_prediction2 (row):\n    if row['BWH'] < row['BWD'] and row['BWH'] < row['BWA']:\n        return 1\n    if row['BWA'] < row['BWD'] and row['BWA'] < row['BWH']:\n        return 2\n    else:\n        return 0","95cbfd73":"matches.apply (lambda row: label_prediction2(row), axis=1)","d42a760a":"matches['BW_prediction'] = matches.apply (lambda row: label_prediction2(row), axis=1)\nmatches.head()","80d08231":"# function to check if betting companies agree\ndef bets_agree (row):\n    if row['B365_prediction'] == row['BW_prediction']:\n        return True\n    else:\n        return False","4561afdd":"matches.apply (lambda row: bets_agree(row), axis=1)","16ef2ab7":"matches['bets_agree'] = matches.apply (lambda row: bets_agree(row), axis=1)\nmatches.head()","ab48846a":"matches.loc[matches.bets_agree == False]","91f55bc8":"matches.loc[matches.result == matches.B365_prediction]","affae15a":"matches.loc[matches.result == matches.BW_prediction]","dbad9e77":"bets_disagree = matches.loc[matches.bets_agree == False]\nbets_disagree.head()","f66ce98a":"# check if a prediction was correct\ndef B365_correct (row):\n    if row['B365_prediction'] == row['result']:\n        return True\n    else:\n        return False","8ed2820f":"matches.apply (lambda row: B365_correct(row), axis=1)","21416fb6":"matches['B365_correct'] = matches.apply (lambda row: B365_correct(row), axis=1)\nmatches.head()","04fcde64":"def BW_correct (row):\n    if row['BW_prediction'] == row['result']:\n        return True\n    else:\n        return False","ffbaad4e":"matches.apply (lambda row: BW_correct(row), axis=1)","fccaaf37":"matches['BW_correct'] = matches.apply (lambda row: BW_correct(row), axis=1)\nmatches.head()","db1f9d70":"B365_wrong = matches.loc[matches.B365_correct == False]\nB365_wrong.head()","055db826":"B365_wrong.country_name.value_counts()","1c337aa5":"BW_wrong = matches.loc[matches.BW_correct == False]\nBW_wrong.head()","8e902624":"BW_wrong.country_name.value_counts()","06618f9f":"B365_unpredicted_teams = pd.DataFrame(B365_wrong.home_team.value_counts().reset_index().values, columns=[\"team\", \"number_of_matches\"])","1603650b":"B365_unpredicted_teams = B365_unpredicted_teams.sort_index(axis = 0, ascending=True)\nB365_unpredicted_teams.head()","41de0aa7":"B365_unpredicted_teams_away = pd.DataFrame(B365_wrong.away_team.value_counts().reset_index().values, columns=[\"team\", \"number_of_matches\"])\nB365_unpredicted_teams_away = B365_unpredicted_teams_away.sort_index(axis = 0, ascending=True)\nB365_unpredicted_teams_away.head()","ad92af82":"B365_unpredicted_teams = pd.merge(B365_unpredicted_teams, B365_unpredicted_teams_away, on='team')","14a9c7c5":"B365_unpredicted_teams['number_of_matches'] = B365_unpredicted_teams['number_of_matches_x'] + B365_unpredicted_teams['number_of_matches_y']","ab2d668e":"B365_unpredicted_teams.drop(['number_of_matches_x', 'number_of_matches_y'], axis=1, inplace=True)","fec50459":"B365_unpredicted_teams.sort_values(by=['number_of_matches'], ascending=False).head()","e21abc3f":"BW_unpredicted_teams = pd.DataFrame(BW_wrong.home_team.value_counts().reset_index().values, columns=[\"team\", \"number_of_matches\"])\nBW_unpredicted_teams = BW_unpredicted_teams.sort_index(axis = 0, ascending=True)\nBW_unpredicted_teams_away = pd.DataFrame(BW_wrong.away_team.value_counts().reset_index().values, columns=[\"team\", \"number_of_matches\"])\nBW_unpredicted_teams_away = BW_unpredicted_teams_away.sort_index(axis = 0, ascending=True)\nBW_unpredicted_teams = pd.merge(BW_unpredicted_teams, BW_unpredicted_teams_away, on='team')\nBW_unpredicted_teams['number_of_matches'] = BW_unpredicted_teams['number_of_matches_x'] + BW_unpredicted_teams['number_of_matches_y']\nBW_unpredicted_teams.drop(['number_of_matches_x', 'number_of_matches_y'], axis=1, inplace=True)\nBW_unpredicted_teams.sort_values(by=['number_of_matches'], ascending=False).head()","c71c61b2":"unpredicted_teams_total = pd.merge(BW_unpredicted_teams, B365_unpredicted_teams, on='team')\nunpredicted_teams_total['number_of_matches'] = unpredicted_teams_total['number_of_matches_x'] + unpredicted_teams_total['number_of_matches_y']\nunpredicted_teams_total .drop(['number_of_matches_x', 'number_of_matches_y'], axis=1, inplace=True)\nunpredicted_teams_total .sort_values(by=['number_of_matches'], ascending=False).head(10)","173225a2":"bets_disagree_teams = pd.DataFrame(bets_disagree.home_team.value_counts().reset_index().values, columns=[\"team\", \"number_of_matches\"])\nbets_disagree_teams = bets_disagree_teams.sort_index(axis = 0, ascending=True)\nbets_disagree_away = pd.DataFrame(bets_disagree.away_team.value_counts().reset_index().values, columns=[\"team\", \"number_of_matches\"])\nbets_disagree_away = bets_disagree_away.sort_index(axis = 0, ascending=True)\nbets_disagree_teams = pd.merge(bets_disagree_teams, bets_disagree_away, on='team')","c3ea9137":"bets_disagree_teams['number_of_matches'] = bets_disagree_teams['number_of_matches_x'] + bets_disagree_teams['number_of_matches_y']\nbets_disagree_teams.drop(['number_of_matches_x', 'number_of_matches_y'], axis=1, inplace=True)\nbets_disagree_teams.sort_values(by=['number_of_matches'], ascending=False).head()","6ec59f5a":"# check if a game was an upset to a favourite\n# favourite is a team who has a coefficient on win lower than 1.5\n\ndef label_upset_B365 (row):\n    if row['result'] == 1 and row['B365A'] < 1.5:\n        return True\n    if row['result'] == 2 and row['B365H'] < 1.5:\n        return True\n    else:\n        return False","fbc5e0cf":"matches.apply (lambda row: label_upset_B365(row), axis=1)","1a18877d":"matches['upset_B365'] = matches.apply (lambda row: label_upset_B365(row), axis=1)\nmatches.head()","a341a45d":"matches.upset_B365.value_counts()","dc2ab3ba":"def label_upset_BW (row):\n    if row['result'] == 1 and row['BWA'] < 1.5:\n        return True\n    if row['result'] == 2 and row['BWH'] < 1.5:\n        return True\n    else:\n        return False","d0b454fd":"matches.apply (lambda row: label_upset_BW(row), axis=1)","50e779e9":"matches['upset_BW'] = matches.apply (lambda row: label_upset_BW(row), axis=1)\nmatches.head()","283f580e":"B365_upset = matches.loc[matches.upset_B365 == True]\nB365_upset.head()","c74707b0":"B365_upset.country_name.value_counts()","df76b07c":"BW_upset = matches.loc[matches.upset_BW == True]\nBW_upset.head()","f6540057":"BW_upset.country_name.value_counts()","e7dacadf":"upset_teams = pd.DataFrame(B365_upset.loc[B365_upset['result'] == 1, 'home_team'].value_counts().reset_index().values, columns=[\"team\", \"number_of_upsets\"])\nupset_teams = upset_teams.sort_index(axis = 0, ascending=True)\nupset_teams.head()","2fe89ba8":"upset_teams_away = pd.DataFrame(B365_upset.loc[B365_upset['result'] == 2, 'away_team'].value_counts().reset_index().values, columns=[\"team\", \"number_of_upsets\"])\nupset_teams_away = upset_teams_away.sort_index(axis = 0, ascending=True)\nupset_teams_away.head()","5de13537":"upsets = pd.merge(upset_teams, upset_teams_away, on='team')\nupsets['number_of_upsets'] = upsets['number_of_upsets_x'] + upsets['number_of_upsets_y']\nupsets.drop(['number_of_upsets_x', 'number_of_upsets_y'], axis=1, inplace=True)\nupsets.sort_values(by=['number_of_upsets'], ascending=False).head(7)","f482be15":"upseted_teams = pd.DataFrame(B365_upset.loc[B365_upset['result'] == 2, 'home_team'].value_counts().reset_index().values, columns=[\"team\", \"number_of_upsets\"])\nupseted_teams = upseted_teams.sort_index(axis = 0, ascending=True)\nupseted_teams.head(7)","6106ed06":"upseted_teams_away = pd.DataFrame(B365_upset.loc[B365_upset['result'] == 1, 'away_team'].value_counts().reset_index().values, columns=[\"team\", \"number_of_upsets\"])\nupseted_teams_away = upseted_teams_away.sort_index(axis = 0, ascending=True)\nupseted_teams_away.head(7)","59c02b2d":"upseted = pd.merge(upseted_teams, upseted_teams_away, on='team')\nupseted['number_of_upsets'] = upseted['number_of_upsets_x'] + upseted['number_of_upsets_y']\nupseted.drop(['number_of_upsets_x', 'number_of_upsets_y'], axis=1, inplace=True)\nupseted.sort_values(by=['number_of_upsets'], ascending=False).head(10)","d309484a":"upseted.sort_values(by=['number_of_upsets']).head(10)","31626736":"# function to check how often a match had a clear favourite\ndef label_favourite_B365 (row):\n    if row['B365H'] < 1.5 or row['B365A'] < 1.5:\n        return True\n    else:\n        return False","3fec70aa":"matches.apply (lambda row: label_favourite_B365(row), axis=1)","8c535dda":"matches['favourite_B365'] = matches.apply (lambda row: label_favourite_B365(row), axis=1)\nmatches.head()","504d5ed5":"print(\"Percent of matches with a clear favourite: {}%\".format(round((len(matches.loc[matches.favourite_B365 == True]) \/ len(matches)) * 100, 1)))","e5185227":"print(\"Percent of upsets in matches with a clear favourite: {}%\".format(round((len(matches.loc[matches.upset_B365 == True]) \/ len(matches.loc[matches.favourite_B365 == True])) * 100, 1)))","60c9f058":"**Arsenal** and **Liverpool** suffered the most upsets at home and **Celtic** suffered the most upsets away and in total.","bd6d987d":"# 3. Who is the most unpredictable team?","4626f2bc":"We see that **betting companies disagree on Scotch teams** the most often.","7db6cc6a":"# 2. Who won the most matches?","6363130e":"**Barcelona** out of **259** teams had the **most wins** both at **home** and **away**.","6d43a6fc":"We see that **both** betting companies are making **wrong** bets in **France** more often than anywhere else.","68747578":"**Atl\u00e9tico Madrid** is a team with the fewest losses to teams who were considered underdogs.","7f83c25c":"If we combine bets by both companies, we see that **three French teams** (Stade Rennais FC, Girondins de Bordeaux, Toulouse FC) are the **most unpredictable** to them with **Everton from England** sharing the third place. ","b716d741":"We see that about **every 5th match had a clear favourite and only in 8.1% of these matches a favourite lost**.","013e1741":"# 1. Read and clean data","b6484749":"According to both betting companies **England** had **the most upsets** and from the top 6 leagues **France had the fewest**.","27efb2a0":"![](https:\/\/images.unsplash.com\/photo-1428200698796-38743f953a43?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1189&q=80)","0ab75efa":"# 4. Who delivered the most upsets?","8d79449f":"We'll analyze data on **9 top European leagues for 8 seasons** (2008\/2009 - 2015\/2016). There are 11 leagues in the original dataset, but we dropped 2 leages because they had missing values in columns with information about bets.\n\nThe main purpose of this notebook is to find out **in which cases betting companies made a wrong bet**.","773917f7":"When playing at home, **Real Sociedad** upseted favouties more often than any other team. **Aston Villa** was dangerous when playing against favourites away and **Den Haag** delivered the most upsets in total."}}