{"cell_type":{"836bd7a9":"code","d928708a":"code","871e25b2":"code","2837a605":"code","50bf3b43":"code","cf332101":"code","dcdd8987":"code","e4ae01dd":"code","8b54c540":"code","c39e028a":"code","83019c33":"code","f49bcd24":"code","7a58570c":"code","4968221f":"code","257ec2d3":"code","203ddeaa":"code","7ef644ad":"code","c703ec90":"code","58a1ea58":"code","83554c07":"code","b4abbdce":"code","d8fc79f6":"code","a8eefd99":"code","9035f6bd":"code","50938135":"code","64bd974b":"code","9e7dda60":"code","34777157":"code","d18ad799":"code","7110dc30":"code","03ca578e":"code","2be5072e":"code","097ddf96":"code","291d3dc8":"code","ca645a4e":"code","cc13dc55":"code","0ad52668":"code","52b51592":"markdown","d27cb061":"markdown","dc34175d":"markdown","5d6d1e61":"markdown"},"source":{"836bd7a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d928708a":"\ndf = pd.read_csv(\"\/kaggle\/input\/salary-data-with-age-and-experience\/Salary_Data.csv\")","871e25b2":"df.head()","2837a605":"df.info()","50bf3b43":"df.isna().sum()","cf332101":"df.describe()","dcdd8987":"from sklearn.model_selection import train_test_split","e4ae01dd":"X=df.drop([\"Salary\"],axis =1)","8b54c540":"y= df[\"Salary\"]","c39e028a":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.25,random_state=42)","83019c33":"from sklearn.linear_model import LinearRegression,Lasso,Ridge,ElasticNet","f49bcd24":"lr = LinearRegression()","7a58570c":"lm_model = lr.fit(X_train,y_train)","4968221f":"pred = lm_model.predict(X_test)","257ec2d3":"from sklearn.metrics import accuracy_score,r2_score","203ddeaa":"r2_score(y_test,pred)","7ef644ad":"ls = Lasso()","c703ec90":"ls_model = ls.fit(X_train,y_train)","58a1ea58":"preds = ls_model.predict(X_test)","83554c07":"r2_score(y_test,preds)","b4abbdce":"ridge = Ridge(alpha = 0.1)","d8fc79f6":"rd_model = ridge.fit(X_train,y_train)","a8eefd99":"predicts = rd_model.predict(X_test)","9035f6bd":"r2_score(y_test,predicts)","50938135":"from sklearn.linear_model import RidgeCV","64bd974b":"ridge= Ridge()\nlambdalar = 10**np.linspace(10,-2,100)*0.5\nkatsay\u0131lar = []\n\nfor i in lambdalar:\n    ridge.set_params(alpha=i)\n    ridge.fit(X_train,y_train)\n    katsay\u0131lar.append(ridge.coef_)\n    \nax=plt.gca()\nax.plot(lambdalar*2,katsay\u0131lar)\nax.set_xscale(\"log\")\nplt.axis(\"tight\")\nplt.xlabel(\"lambda\")\nplt.ylabel(\"katsay\u0131lar\")","9e7dda60":"ridge_cv = RidgeCV(alphas =lambdalar,\n                  scoring = \"neg_mean_squared_error\",\n                  normalize = True)","34777157":"ridge_cv.fit(X_train,y_train)","d18ad799":"op_alpha = ridge_cv.alpha_\nprint(op_alpha)","7110dc30":"ridge_tuned = Ridge(alpha = op_alpha, normalize = True).fit(X_train,y_train)","03ca578e":"predict = ridge_tuned.predict(X_test)","2be5072e":"r2_score(y_test,predict)","097ddf96":"els = ElasticNet()","291d3dc8":"els_model = els.fit(X_train,y_train)","ca645a4e":"print(\"Coef: \",els_model.coef_)\nprint(\"Intercept: \",els_model.intercept_)","cc13dc55":"pred = els_model.predict(X_test)","0ad52668":"r2_score(y_test,pred)","52b51592":"## Lasso Reg","d27cb061":"## ElasticNet","dc34175d":"## Linear Reg","5d6d1e61":"## Ridge Reg"}}