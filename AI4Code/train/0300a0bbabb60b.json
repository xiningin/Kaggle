{"cell_type":{"f69d11f4":"code","3b349a72":"code","d13f7904":"code","a1f12ec6":"code","fcf83ab6":"code","b375f93a":"code","48196d5a":"code","5ea579f5":"code","c81c97ba":"code","bb90b83c":"code","4fa4e68f":"code","3aa40d5a":"code","ea641730":"code","5c24c28b":"code","e4f164e8":"code","be77a70c":"code","7932d567":"code","316eeeeb":"code","b71f3ccd":"code","60b983dc":"code","9eac3491":"code","04f52744":"code","f9829abd":"code","efa32e4c":"code","c21003e8":"code","07e45f9b":"code","95bd7b8c":"code","be786db5":"code","9186639b":"code","5ec42bf1":"code","cca44164":"code","a7976a39":"code","8afa2320":"code","6b6b8a2b":"code","6cd4033e":"code","d7f3523a":"code","60c885d2":"code","a9e52beb":"code","25afe9d1":"code","64547606":"code","5661f803":"code","46073bec":"code","dc6a02af":"code","a8d530e5":"code","976d0c4e":"code","8d4e2ced":"code","04817edc":"code","318c8582":"code","fad0dbd2":"code","c822ceb1":"code","4bb5f102":"code","e2b49bae":"code","03f6f368":"code","cd6da207":"code","832540cf":"code","4ef2322f":"markdown","1f978e20":"markdown","e2da8ce1":"markdown","712f8ee2":"markdown","b985476f":"markdown","15321597":"markdown","b7768a09":"markdown","18dcb588":"markdown","c784e726":"markdown","d45580f3":"markdown","48ae6139":"markdown","4c1820ae":"markdown","2f57c448":"markdown","e4368c77":"markdown","3df1f181":"markdown","cccfb2b2":"markdown","a9440242":"markdown","756be0fd":"markdown","60a50686":"markdown","e2a01496":"markdown","6bfb0625":"markdown"},"source":{"f69d11f4":"def print_text():\n    print('this is text')","3b349a72":"# call the function\nprint_text()","d13f7904":"def print_this(x):\n    print(x)","a1f12ec6":"# call the function\nprint_this(3)","fcf83ab6":"# prints 3, but doesn't assign 3 to n because the function has no return statement\nn = print_this(3)","b375f93a":"def square_this(x):\n    return x**2\nsquare_this(5)","48196d5a":"# include an optional docstring to describe the effect of a function\ndef square_this(x):\n    \"\"\"Return the square of a number.\"\"\"\n    return x**2\nprint(square_this.__doc__)    # .__doc__  returns the docstring","5ea579f5":"# call the function\nsquare_this(3)","c81c97ba":"# assigns 9 to var, but does not print 9\nvar = square_this(3)","bb90b83c":"def calc(a, b, op='add'):\n    if op == 'add':\n        return a + b\n    elif op == 'sub':\n        return a - b\n    else:\n        print('valid operations are add and sub')","4fa4e68f":"# call the function\ncalc(10, 4, op='add')","3aa40d5a":"# unnamed arguments are inferred by position\ncalc(10, 4, 'add')","ea641730":"# default for 'op' is 'add'\ncalc(10, 4)","5c24c28b":"calc(10, 4, 'sub')","e4f164e8":"calc(10, 4, 'div')","be77a70c":"def stub():\n    pass","7932d567":"def min_max(nums):\n    return min(nums), max(nums)","316eeeeb":"# return values can be assigned to a single variable as a tuple\nnums = [1, 2, 3]\nmin_max_num = min_max(nums)\nmin_max_num","b71f3ccd":"# return values can be assigned into multiple variables using tuple unpacking\nmin_num, max_num = min_max(nums)\nprint(min_num)\nprint(max_num)","60b983dc":"# define a function the \"usual\" way\ndef squared(x):\n    return x**2","9eac3491":"# define an identical function using lambda\nsquared = lambda x: x**2","04f52744":"# without using lambda\nsimpsons = ['homer', 'marge', 'bart']\ndef last_letter(word):\n    return word[-1]\nsorted(simpsons, key=last_letter)","f9829abd":"# using lambda\nsorted(simpsons, key=lambda word: word[-1])","efa32e4c":"##  For Loops and While Loops\n\n# includes the start value but excludes the stop value\nrange(0, 3)","c21003e8":"# default start value is 0\nrange(3)","07e45f9b":"# third argument is the step value\nrange(0, 5, 2)","95bd7b8c":"# not the recommended style\nfruits = ['apple', 'banana', 'cherry']\nfor i in range(len(fruits)):\n    print(fruits[i].upper())","be786db5":"# recommended style\nfor fruit in fruits:\n    print(fruit.upper())","9186639b":"# iterate through two things at once (using tuple unpacking)\nfamily = {'dad':'homer', 'mom':'marge', 'size':6}\nfor key, value in family.items():\n    print(key, value)","5ec42bf1":"# use enumerate if you need to access the index value within the loop\nfor index, fruit in enumerate(fruits):\n    print(index, fruit)","cca44164":"for fruit in fruits:\n    if fruit == 'banana':\n        print('Found the banana!')\n        break    # exit the loop and skip the 'else' block\nelse:\n    # this block executes ONLY if the for loop completes without hitting 'break'\n    print(\"Can't find the banana\")","a7976a39":"count = 0\nwhile count < 5:\n    print('This will print 5 times')\n    count += 1    # equivalent to 'count = count + 1'","8afa2320":"## Comprehensions","6b6b8a2b":"# for loop to create a list of cubes\nnums = [1, 2, 3, 4, 5]\ncubes = []\nfor num in nums:\n    cubes.append(num**3)\ncubes","6cd4033e":"# equivalent list comprehension\ncubes = [num**3 for num in nums]\ncubes","d7f3523a":"# for loop to create a list of cubes of even numbers\ncubes_of_even = []\nfor num in nums:\n    if num % 2 == 0:\n        cubes_of_even.append(num**3)\ncubes_of_even","60c885d2":"# equivalent list comprehension\n# syntax: [expression for variable in iterable if condition]\ncubes_of_even = [num**3 for num in nums if num % 2 == 0]\ncubes_of_even","a9e52beb":"# for loop to cube even numbers and square odd numbers\ncubes_and_squares = []\nfor num in nums:\n    if num % 2 == 0:\n        cubes_and_squares.append(num**3)\n    else:\n        cubes_and_squares.append(num**2)\ncubes_and_squares","25afe9d1":"# equivalent list comprehension (using a ternary expression)\n# syntax: [true_condition if condition else false_condition for variable in iterable]\ncubes_and_squares = [num**3 if num % 2 == 0 else num**2 for num in nums]\ncubes_and_squares","64547606":"# for loop to flatten a 2d-matrix\nmatrix = [[1, 2], [3, 4]]\nitems = []\nfor row in matrix:\n    for item in row:\n        items.append(item)\nitems","5661f803":"# equivalent list comprehension\nitems = [item for row in matrix\n              for item in row]\nitems","46073bec":"fruits = ['apple', 'banana', 'cherry']\nunique_lengths = {len(fruit) for fruit in fruits}\nunique_lengths","dc6a02af":"fruit_lengths = {fruit:len(fruit) for fruit in fruits}\nfruit_lengths\n\nfruit_indices = {fruit:index for index, fruit in enumerate(fruits)}\nfruit_indices","a8d530e5":"simpsons = ['homer', 'marge', 'bart']\nmapper = map(len, simpsons)\nmapper","976d0c4e":"for i in mapper:\n    print(i)","8d4e2ced":"# equivalent list comprehension\n[len(word) for word in simpsons]","04817edc":"mapper = map(lambda word: word[-1], simpsons)\nfor i in mapper:\n    print(i)","318c8582":"# equivalent list comprehension\n[word[-1] for word in simpsons]","fad0dbd2":"nums = range(5)\niterator = filter(lambda x: x % 2 == 0, nums) \nfor element in iterator:\n    print(element)","c822ceb1":"# equivalent list comprehension\n[num for num in nums if num % 2 == 0]","4bb5f102":"from functools import reduce\n\ndata = [1,2,3,4]\nreduce(lambda x,y: x * y, data)","e2b49bae":"# print each elemt of a list using for loop\na = [1,2,3,4,5,6]  \n\nfor element in a:\n    print(element)","03f6f368":"# square each element of a list and append to a new list\nb = []  # empty list\nfor element in a:\n    b.append(element*element)\n    \nprint(b)    ","cd6da207":"# populate a dictionary using a for loop\nname = ['joe', 'jonas', 'Kit', 'Harrington', 'Liam', 'Neeson']\nweight = [15, 18, 17, 22, 25, 23]\ndictionary = {}\n\nfor i in range(0,6):\n    dictionary[name[i]] = weight[i]\n\ndictionary","832540cf":"# Lets print some shapes to get comfortable with loops\n\n# pyramid\nfor i in range(10):\n    print((10-i)*' ' + i*'* ')\n\n# half diamond\nfor i in range(10):\n    if i < 6:\n        print(i*' *')\n    else:\n        print((10 - i)*' *')\n\n# full diamond\nfor i in range(10):\n    if i < 6:\n        print((10-i)*' ' + i*'* ')\n    else:\n        print((i*' ' + (10 - i)*'* '))\n    ","4ef2322f":"**Dictionary comprehension:**","1f978e20":"##  Defining Functions","e2da8ce1":"**for-each loop**\n- In python, the for loop is called 'for each loop' ( that is the way we read it. \"for each element in iterable\")\n- We use it to iterate over a series, list, string etc any iterable","712f8ee2":"**`Reduce` returns a single value after applying a function on an iterable**\nexample, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n((((1+2)+3)+4)+5). ","b985476f":"**Set comprehension:**","15321597":"**Define a function with one argument and no return values:**","b7768a09":"**`for` loops:**","18dcb588":"**Return two values from a single function:**","c784e726":"**`for`\/`else` loop:**","d45580f3":"**`map` applies a function to every element of a sequence and returns a list (Python 2) or iterator (Python 3):**","48ae6139":"**`while` loop:**","4c1820ae":"**Define a function with two 'positional arguments' (no default values) and one 'keyword argument' (has a default value):**","2f57c448":"**Define a function with no arguments and no return values:**","e4368c77":"**Define a function with one argument and one return value:**","3df1f181":"**Use `pass` as a placeholder if you haven't written the function body:**","cccfb2b2":"**List comprehension:**","a9440242":"##  Map, Filter and Reduce","756be0fd":"**`filter` returns a list (Python 2) or iterator (Python 3) containing the elements from a sequence for which a condition is `True`:**","60a50686":"## Loops","e2a01496":"**Sort a list of strings by the last letter:**","6bfb0625":"## Anonymous (Lambda) Functions\n\n- Primarily used to temporarily define a function for use by another function"}}