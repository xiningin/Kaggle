{"cell_type":{"49c4a270":"code","6feea2a7":"code","3d4e33eb":"code","8527194a":"code","9cd173cd":"code","fe97592e":"code","d1c31a54":"code","0526fbed":"code","39a27603":"code","8d4342a8":"code","333ae23a":"code","1326138a":"code","b2539e7c":"code","b1157e1a":"markdown","7670ea93":"markdown","8518ca15":"markdown","85425fea":"markdown","a9b85e90":"markdown","a8a159c5":"markdown","300e23f9":"markdown","deb4be92":"markdown","3fa6817a":"markdown","918829d4":"markdown","dd7736be":"markdown","59fe0f20":"markdown","70070b26":"markdown","56c8561e":"markdown","8a62ca28":"markdown","8fc21344":"markdown"},"source":{"49c4a270":"pip install highlight_text","6feea2a7":"import pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt \nimport matplotlib.patheffects as path_effects\nimport matplotlib.patches as mpatches\nimport matplotlib.image as mpimg\nfrom matplotlib import rcParams\nfrom matplotlib.patches import Arc\nimport numpy as np\nfrom highlight_text import fig_text\nimport seaborn as sns\nimport requests\nfrom bs4 import BeautifulSoup\nimport plotly.graph_objects as go\nimport json","3d4e33eb":"# Entering the league's  link\nlink = \"https:\/\/understat.com\/league\/Bundesliga\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n\n# Get the table \nstrings = scripts[2].string \n\n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)","8527194a":"# Creating the dataframe\ndf =  pd.DataFrame(data['136']['history'])\n\n# Selecting the useful columns \ndf = df[['xG','xGA','npxG','npxGA','xpts','npxGD']]\n\n# Creating one new column\ndf['Match'] = np.arange(1,35)\n\n# Creating the rolling\/moving average columns\ndf['xGdif'] = df['xG']-df['xGA']\n","9cd173cd":"#Filtering negative and positive xG diff\ndf_pos = df[df['xGdif']>0]\ndf_neg = df[df['xGdif']<0]\n\ndf_pos['xGdif'] = np.round(df_pos['xGdif'],2)\ndf_neg['xGdif'] = np.round(df_neg['xGdif'],2)\n\n# Display column \nprint(\"Negative dif\")\ndisplay(df_neg['xGdif'])\nprint(\"Positive dif\")\ndisplay(df_pos['xGdif'])","fe97592e":"# Entering the league's  link\nlink = \"https:\/\/understat.com\/team\/RasenBallsport_Leipzig\/2020\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the table \nstrings = scripts[1].string \n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)","d1c31a54":"df1 = pd.DataFrame(data)\n# Home and Away fixtures\ndf_a = df1['a'].apply(pd.Series)\ndf_h = df1['h'].apply(pd.Series)\n# Append both together\ndf_lei = pd.DataFrame(df_h)\ndisplay(df_h,df_a)","0526fbed":"df1['short_title_h'] = df_h['short_title']\ndf1['short_title_a'] = df_a['short_title']\n\n# Appending home and away together \n\ndf1 = df1[['short_title_h','short_title_a']]\ndf1['final'] = df1['short_title_h']+df1['short_title_a']","39a27603":"df1['final'] = df1['final'].str.replace(\"RBL\",\"\") # Eliminate the LEI name from the column\nteams_played = df1['final'].tolist() # And now create a list containing the teams\nprint(\"These are the temas played aginst RB Leipzig in the 2020\/2021 Season\")\ndisplay(teams_played)","8d4342a8":"# Draw plot\nplt.style.use('fivethirtyeight')\nfig,ax = plt.subplots(figsize = (10,8))\nplt.hlines(y=df_pos['Match'], xmin=0, xmax=df_pos['xGdif'], color='cyan', alpha=0.4, linewidth=8,label='Positive xG')\nplt.hlines(y=df_neg['Match'], xmin=0, xmax=df_neg['xGdif'], color='red', alpha=0.4, linewidth=8,label='Negative xG')\nax.tick_params(axis='x', colors='gray')\nax.tick_params(axis='y', colors='gray')\nplt.xticks([-3,-2.5,-2,-1.5,-1,-0.5,0,0.5,1,1.5,2,2.5,3])\n#plt.yticks(np.arange(1,35))\nplt.yticks((np.arange(1,35)),teams_played, rotation='horizontal',fontsize=10)\nplt.gca().xaxis.grid(False)\nplt.gca().yaxis.grid(False)\n# title\nfig_text(0.08,1.03, s=\"Leipzig 2021 Season xG Differential\\n\", fontsize = 25, fontweight = \"light\")\nfig_text(0.08,0.97, s=\" <Positive xG> vs <Negative xG>\",highlight_textprops=[{\"color\":'cyan'}, {'color':\"red\"}], fontsize = 20, fontweight=\"light\")\n# text\nfig_text(0.45,0.01, s=\"xG Differential\\n\", fontsize = 20, fontweight = \"bold\", color = \"black\")\nfig_text(0.0001,0.6, s=\"Teams\\n\", fontsize = 20, fontweight = \"bold\", color = \"black\",rotation=90)\n# Annotation for Positive Differential\nfor i in range(len(df_pos['Match'].tolist())):\n    plt.annotate(df_pos['xGdif'].tolist()[i], (df_pos['xGdif'].tolist()[i]+0.2, df_pos['Match'].tolist()[i]),c='black',size=10,ha='center',va='center')\n# Annotation for Negative Differential\nfor i in range(len(df_neg['Match'].tolist())):\n    plt.annotate(df_neg['xGdif'].tolist()[i], (df_neg['xGdif'].tolist()[i]-0.2, df_neg['Match'].tolist()[i]),c='black',size=10,ha='center',va='center')","333ae23a":"# Draw plot\nplt.style.use('fivethirtyeight')\nfig,ax = plt.subplots(figsize = (10,8))\nplt.hlines(y=df_pos['Match'], xmin=0, xmax=df_pos['xGdif'], color='cyan', alpha=0.4, linewidth=7,label='Positive xG')\nplt.hlines(y=df_neg['Match'], xmin=0, xmax=df_neg['xGdif'], color='red', alpha=0.4, linewidth=7,label='Negative xG')\nax.tick_params(axis='x', colors='gray')\nax.tick_params(axis='y', colors='gray')\nplt.xticks([-3,-2.5,-2,-1.5,-1,-0.5,0,0.5,1,1.5,2,2.5,3])\nplt.yticks(np.arange(1,35))\nplt.gca().xaxis.grid(False)\nplt.gca().yaxis.grid(False)\n# title\nfig_text(0.08,1.03, s=\"Leipzig 2021 Season xG Differential\\n\", fontsize = 25, fontweight = \"light\")\nfig_text(0.08,0.97, s=\" <Positive xG> vs <Negative xG>\",highlight_textprops=[{\"color\":'cyan'}, {'color':\"red\"}], fontsize = 20, fontweight=\"light\")\n# text\nfig_text(0.45,0.01, s=\"xG Differential\\n\", fontsize = 20, fontweight = \"bold\", color = \"black\")\nfig_text(0.01,0.6, s=\"Matches\\n\", fontsize = 20, fontweight = \"bold\", color = \"black\",rotation=90)\n# Annotation for Positive Differential\nfor i in range(len(df_pos['Match'].tolist())):\n    plt.annotate(df_pos['xGdif'].tolist()[i], (df_pos['xGdif'].tolist()[i]+0.2, df_pos['Match'].tolist()[i]),c='black',size=10,ha='center',va='center')\n# Annotation for Negative Differential\nfor i in range(len(df_neg['Match'].tolist())):\n    plt.annotate(df_neg['xGdif'].tolist()[i], (df_neg['xGdif'].tolist()[i]-0.2, df_neg['Match'].tolist()[i]),c='black',size=10,ha='center',va='center')","1326138a":"# plot \n# Draw plot\nfig,ax = plt.subplots(figsize = (10,8))\nplt.hlines(y=df_pos['Match'], xmin=0, xmax=df_pos['xGdif'], color='black', alpha=0.7, linewidth=7,label='Positive xG')\nplt.hlines(y=df_neg['Match'], xmin=0, xmax=df_neg['xGdif'], color='black', alpha=0.7, linewidth=7,label='Negative xG')\nax.tick_params(axis='x', colors='gray')\nax.tick_params(axis='y', colors='gray')\nplt.xticks([-3,-2.5,-2,-1.5,-1,-0.5,0,0.5,1,1.5,2,2.5,3])\nplt.yticks(np.arange(1,35))\nplt.gca().xaxis.grid(False)\nplt.gca().yaxis.grid(False)\nplt.yticks((np.arange(1,35)),teams_played, rotation='horizontal',fontsize=10)\n# title\nfig_text(0.08,1.03, s=\"Leipzig 2021 Season xG Differential\\n\", fontsize = 25, fontweight = \"light\")\nfig_text(0.08,0.97, s=\" <Positive xG> vs <Negative xG>\",highlight_textprops=[{\"color\":'cyan'}, {'color':\"red\"}], fontsize = 20, fontweight=\"light\")\n# text\nfig_text(0.45,0.01, s=\"xG Differential\\n\", fontsize = 20, fontweight = \"bold\", color = \"black\")\nfig_text(0.01,0.6, s=\"Teams\\n\", fontsize = 20, fontweight = \"bold\", color = \"black\",rotation=90)\n# Annotation for Positive Differential\nfor i in range(len(df_pos['Match'].tolist())):\n    plt.annotate(df_pos['xGdif'].tolist()[i], (df_pos['xGdif'].tolist()[i]+0.2, df_pos['Match'].tolist()[i]),c='cyan',size=10,ha='center',va='center')\n# Annotation for Negative Differential\nfor i in range(len(df_neg['Match'].tolist())):\n    plt.annotate(df_neg['xGdif'].tolist()[i], (df_neg['xGdif'].tolist()[i]-0.2, df_neg['Match'].tolist()[i]),c='red',size=10,ha='center',va='center')","b2539e7c":"neg = [12,15,18,23,27,32] # Matches with negative differential\npos = [1,2,3,4,5,6,7,8,9,10,11,13,14,16,17,19,20,21,22,24,25,26,28,29,30,31,33,34]\nyears = np.arange(1,4)\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=neg, y=df_neg['xGdif'],\n                marker_color='crimson',\n                name='Negative xG'))\nfig.add_trace(go.Bar(x=pos, y=df_pos['xGdif'],\n                marker_color='cyan',\n                name='Positive xG'))\nfig.update_layout(title_text='Differential xG for RB Leipzig')\nfig.show()","b1157e1a":"<a id=\"2.\"><\/a>\n# Importing libraries","7670ea93":"<a id=\"6.\"><\/a>\n# Plotly","8518ca15":"<a id=\"5.3\"><\/a>\n## Diverging bars with text II","85425fea":"<a id=\"7.\"><\/a>\n# References \nHere are the websites and the main references for this notebook : \n\n   1. https:\/\/www.machinelearningplus.com\/plots\/top-50-matplotlib-visualizations-the-master-plots-python\/\n   \n   \n   2. https:\/\/github.com\/mckayjohns\/Viz-Templates\/blob\/master\/movingaverages.ipynb","a9b85e90":"As we have now the json file, we'll select the key for the dictionary number 136 and history and select the columns required for the plot.","a8a159c5":"<a id=\"1.1\"><\/a>\n# Notebook content ","300e23f9":"<a id=\"3.\"><\/a>\n# Scraping xG data\nWe'll extract the data from Understat as usual and it\"ll be from the standings table data. \n\n**Remember it is possible to obtain both full table standings and the team performance over the 34 games and in this case we'll extract the data for each of the 38 games for RB Leipzig and the 2020\/2021 Season**","deb4be92":"<a id=\"1.\"><\/a>\n# Introduction \nIn this notebook we'll evaluate a yearly performance for RB Leipzig using the Expected Goals metric and it's difference. This notebook was heavily inspired by fews plots created in this web page [Machine Learning Plus](https:\/\/www.machinelearningplus.com\/plots\/top-50-matplotlib-visualizations-the-master-plots-python\/) and this [McKay Johns tutorial](https:\/\/github.com\/mckayjohns\/Viz-Templates\/blob\/master\/movingaverages.ipynb)\n\nHere are some of the other notebooks created for the Understat Series :\n\n1. [Understat Series : Webscraping of Understat using the Beautiful Soup](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-beautiful-soup)\n2. [Understat Series : Understat package](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-understat-package)\n\n3. [Understat Series : Webscraping using Selenium](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-selenium)\n\n4. [Understat Series : Webscraping using for loops](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-for-loops)\n\n5. [Understat Series : Probabilities and Random](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-probabilities-and-random)\n\n6. [Understat Series : Diverging plots](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-diverging-plots)\n\n7. [Understat Series : xG Rolling averages](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-rolling-averages)\n\n8. [Understat Series : xG Flow Chart](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-flow-chart)\n\n9. [Understat Series : Shotmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-shotmaps)\n\n10. [Understat Series : Heatmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-heatmaps)\n\n11. [Understat Series : Top 2 Goalscorers](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-top-2-goalscorers)\n\n12. [Understat Series : Dashboards](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-dashboards)","3fa6817a":"* [1. Introduction](#1.)\n    - [1.1. Notebook Content.](#1.1)\n* [2.Importing libraries.](#2.)\n* [3.Scraping xG Data.](#3.)\n* [4. Scraping match fixtures](#4.)\n* [5. Diverging plots](#5.)\n   -  [5.1. Divergin bars.](#5.1)\n   -  [5.2. Diverging bars with text](#5.2)\n   -  [5.3. Diverging bars with text II](#5.3)\n* [7. Plotly](#7.)\n* [8. References](#8.)","918829d4":"Here we added the the names together in order to eliminate the RBL characters and have the name of the team Leicester City played against that weekend.","dd7736be":"<a id=\"4.\"><\/a>\n# Scraping match fixtures\nNow let's proceed to scrape the fixtures for RB Leipzig Bundesliga 2020\/2021 Season","59fe0f20":"Now we have a problem, the json data provided us with a home and away team names , meaning one week RB Leipzig was the home team and Bayern or any other team, was the away team , but that's not what interests us right now, instead of the home and away teams we want to know the teams Leipzig played against  no matter home or away that played against RB Leipzig so for that we are going to add the home and away teams text data together and later eliminate it to get the actual teams that played against RB Leipzig that same season.","70070b26":"<a id=\"5.1\"><\/a>\n## Diverging bars \n","56c8561e":"# Understat Series : Diverging plots\n\n\n**By Jose Gonzalez**\n![image.png](attachment:image.png)\n","8a62ca28":"<a id=\"5.2\"><\/a>\n## Diverging bars with text\nInstead of the teams played, the number of matches in order : ","8fc21344":"<a id=\"5.\"><\/a>\n# Diverging Plots\nOnce we've scraped and solved some minor problems let's plot the data"}}