{"cell_type":{"68ecf359":"code","8b5c6e14":"code","615d12c9":"code","d39b9e07":"code","3932b111":"code","5537ca16":"code","f13e71db":"code","5c7fb63c":"code","94248a0a":"code","759c5c40":"code","49ff592d":"code","160d0bd6":"code","9178cae6":"code","7909f291":"code","a7bfda89":"code","38aa86d3":"code","83032410":"code","688e051e":"code","c5b59cc1":"markdown","3cbf0509":"markdown","08a5ec29":"markdown","c7f942d9":"markdown","b1440136":"markdown"},"source":{"68ecf359":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b5c6e14":"# Import Python Packages\n# PyTesseract and Tika-Python for OCR\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport shutil\nimport PIL\nimport os\nfrom os import walk\nfrom shutil import copytree, ignore_patterns\nfrom collections import Counter\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\nfrom wand.image import Image as Img\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', 500)\n#mueller_report = pd.read_csv('..\/input\/data-science-cheat-sheets\/Interview Questions\/AI Questions.pdf') # one row per line","615d12c9":"# Define helper function for plotting word clouds\ndef wordCloudFunction(df,column,numWords):\n    # adapted from https:\/\/www.kaggle.com\/benhamner\/most-common-forum-topic-words\n    topic_words = [ z.lower() for y in\n                       [ x.split() for x in df[column] if isinstance(x, str)]\n                       for z in y]\n    word_count_dict = dict(Counter(topic_words))\n    popular_words = sorted(word_count_dict, key = word_count_dict.get, reverse = True)\n    popular_words_nonstop = [w for w in popular_words if w not in stopwords.words(\"english\")]\n    word_string=str(popular_words_nonstop)\n    wordcloud = WordCloud(stopwords=STOPWORDS,\n                          background_color='white',\n                          max_words=numWords,\n                          width=1000,height=1000,\n                         ).generate(word_string)\n    plt.clf()\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.show()","d39b9e07":"# Define helper function for plotting word bar graphs\ndef wordBarGraphFunction(df,column,title):\n    # adapted from https:\/\/www.kaggle.com\/benhamner\/most-common-forum-topic-words\n    topic_words = [ z.lower() for y in\n                       [ x.split() for x in df[column] if isinstance(x, str)]\n                       for z in y]\n    word_count_dict = dict(Counter(topic_words))\n    popular_words = sorted(word_count_dict, key = word_count_dict.get, reverse = True)\n    popular_words_nonstop = [w for w in popular_words if w not in stopwords.words(\"english\")]\n    plt.barh(range(50), [word_count_dict[w] for w in reversed(popular_words_nonstop[0:50])])\n    plt.yticks([x + 0.5 for x in range(50)], reversed(popular_words_nonstop[0:50]))\n    plt.title(title)\n    plt.show()","3932b111":"# Preview the data folder\ninputFolder = '..\/input\/'\nfor root, directories, filenames in os.walk(inputFolder):\n    for filename in filenames: \n        print(os.path.join(root,filename))\n        \n# Move data to folder with read\/write access\noutputFolder = '\/kaggle\/working\/pdfs\/'\nshutil.copytree(inputFolder,outputFolder,ignore=ignore_patterns('*.db'))\nfor root, directories, filenames in os.walk(outputFolder, topdown=False):\n    for file in filenames:\n        try:\n            shutil.move(os.path.join(root, file), outputFolder)\n        except OSError:\n            pass\nprint(os.listdir(outputFolder))","5537ca16":"# Look at page 11\npdf = os.path.join(outputFolder,'misC.pdf[11]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/misC.jpg') # intro page to preview later","f13e71db":"# Parse a PDF file and convert it to CSV using PyTesseract\nimport pytesseract\npdfimage = Image.open('\/kaggle\/working\/misC.jpg')\ntext = pytesseract.image_to_string(pdfimage)  \ndf = pd.DataFrame([text.split('\\n')])","5c7fb63c":"# Plot WordCloud of page 11\nplt.figure(figsize=(10,10))\nwordCloudFunction(df.T,0,10000000)\nplt.figure(figsize=(10,10))\nwordBarGraphFunction(df.T,0,\"Most Common Words on Page 11 of misC\")","94248a0a":"# Parse a PDF file and convert it to CSV using Tika-Python\n!pip install tika\nimport tika\nfrom tika import parser\ntika.initVM()\nparsed = parser.from_file('\/kaggle\/working\/misC.jpg') \ntext = parsed[\"content\"]\ndf = pd.DataFrame([text.split('\\n')])\ndf.drop(df.iloc[:, 1:46], inplace=True, axis=1)","759c5c40":"# Convert PDF to JPG and then convert JPG to CSV\n# I will do this for Pages 1 to 16 but\n# Eventually I should loop through the entire document\n\n# PDF to JPG for p11\npdf = os.path.join(outputFolder,'misC.pdf[11]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/misC.jpg')\npdfimage11 = Image.open('\/kaggle\/working\/misC.jpg')","49ff592d":"# PDF to JPG for p14\npdf = os.path.join(outputFolder,'misC.pdf[14]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/misC.jpg')\npdfimage14 = Image.open('\/kaggle\/working\/misC.jpg')\n\n# PDF to JPG for p12\npdf = os.path.join(outputFolder,'misC.pdf[12]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/misC.jpg')\npdfimage12 = Image.open('\/kaggle\/working\/misC.jpg')","160d0bd6":"# Parse a PDF file and convert it to CSV using PyTesseract (p11)\ntext = pytesseract.image_to_string(pdfimage11)\ndf = pd.DataFrame([text.split('\\n')])\ndf.drop(df.iloc[:, 27:], inplace=True, axis=1)\ndf.drop(df.iloc[:, :3], inplace=True, axis=1)\ndf.columns = range(df.shape[1])","9178cae6":"# Parse a PDF file and convert it to CSV using Tika-Python (p1-16)\ntika.initVM()\nparsed = parser.from_file('\/kaggle\/working\/misC.jpg')\nparsed2 = parser.from_file('\/kaggle\/working\/misC.jpg')\n\ntext = parsed[\"content\"]\ndf2 = pd.DataFrame([text.split('\\n')])\ndf2.drop(df2.iloc[:, 1:50], inplace=True, axis=1)\ndf2.drop(df2.iloc[:, 26:], inplace=True, axis=1)\ndf2.columns = range(df2.shape[1])\n\ntext = parsed2[\"content\"]\ndf3 = pd.DataFrame([text.split('\\n')])\ndf3.drop(df3.iloc[:, :50], inplace=True, axis=1)\ndf3.drop(df3.iloc[:, 22:], inplace=True, axis=1)\ndf3.columns = range(df3.shape[1])\n\ndfcombined = pd.concat([df, df2, df3]) # combine pages 1-16","7909f291":"#Explore page 3 - Mueller Report. Here I don't know how many pages each Cheat Sheet. There are 30 pages \nw, h = pdfimage12.size # crop image\npdfimage12.crop((0, 1240, w, h-1300)) # display exerpt of PDF","a7bfda89":"# Convert PDF to JPG and then convert JPG to CSV\n# I will do this for Pages 1 to 16 but\n# Eventually I should loop through the entire document\n\n# PDF to JPG for p11\npdf = os.path.join(outputFolder,'misC.pdf[11]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/misC.jpg')\npdfimage11 = Image.open('\/kaggle\/working\/misC.jpg')","38aa86d3":"#Explore page 3 - Mueller Report. Here I don't know how many pages each Cheat Sheet. There are 30 pages \nw, h = pdfimage11.size # crop image\npdfimage11.crop((0, 1240, w, h-1300)) # display exerpt of PDF","83032410":"# Pages 11, 12 and 14\ndfcombined.head() # preview csv of 1-16","688e051e":"# Clean up the notebook\n!apt-get install zip # install zip\n!zip -r pdfs.zip \/kaggle\/working\/pdfs\/ # zip up a few files\n!rm -rf pdfs\/* # remove everything else","c5b59cc1":"![](https:\/\/www.mdpi.com\/children\/children-07-00069\/article_deploy\/html\/images\/children-07-00069-g001-550.jpg)https:\/\/www.mdpi.com\/2227-9067\/7\/7\/69","3cbf0509":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","08a5ec29":"#Codes from Paul Mooney https:\/\/www.kaggle.com\/paultimothymooney\/what-is-inside-of-the-mueller-report\/notebook","c7f942d9":"#PDF to CSV\n\nConvert Page 3 of PDF to CSV (Method 1 of 2: PyTesseract)","b1440136":"#Multisystem Inflammatory Syndrome in Children (MIS-C)\n\nMultisystem inflammatory syndrome in children (MIS-C), also known as pediatric inflammatory multisystem syndrome, is a new dangerous childhood disease that is temporally associated with coronavirus disease 2019 (COVID-19). The review aimed to describe the typical presentation and outcomes of children diagnosed with this hyperinflammatory condition.\n\nPublished: September 04, 2020.  DOI:https:\/\/doi.org\/10.1016\/j.eclinm.2020.100527\n\nhttps:\/\/www.thelancet.com\/journals\/eclinm\/article\/PIIS2589-5370(20)30271-6\/fulltext#seccesectitle0001"}}