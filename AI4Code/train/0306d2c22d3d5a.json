{"cell_type":{"be69c7af":"code","ffc987a2":"code","d71997e3":"code","be2368b4":"code","44add072":"code","9acb6ae9":"code","b7cd0b48":"code","03e3ef35":"code","38bb04b8":"code","42190fe8":"code","3b19567e":"code","2e365462":"code","0c64070b":"code","8b1ac0a7":"code","6ffad8b9":"code","68bae7dd":"code","37645b13":"code","0c7355a5":"code","884c146b":"code","682e4f50":"code","e20961d3":"code","80bccf3e":"code","5cf219c5":"code","89df4fe8":"code","dfd6670a":"code","f9c88833":"code","007dcfc7":"code","d37eaf65":"code","4b38288a":"code","30a1b2dc":"code","0841cb7a":"code","879439b5":"code","ab65de36":"code","aa67dcdf":"code","a2f4fbcb":"code","0f9bc4be":"code","35866c83":"code","c560b462":"code","8c855034":"code","a99b122c":"code","5c998d7e":"code","9402cad6":"code","a7f9684b":"code","f8e36397":"code","3742f119":"code","293140f8":"code","0c2d1d32":"code","071ac64b":"code","1d5717f9":"code","ad45e35e":"code","2fbe7f52":"code","36004f8a":"code","fdba4ead":"code","2928a4ec":"code","b6c91663":"code","c0272da4":"code","bb8fca91":"code","d319857d":"code","5da195d5":"code","b9116c1e":"code","18062971":"code","0eb5d525":"code","48bdf4a6":"code","b0af63cf":"markdown","3ffdaf9b":"markdown","551b93dd":"markdown","043dc667":"markdown","da68188f":"markdown","34eced66":"markdown","0a482ed4":"markdown","6b35cb03":"markdown","4d167f22":"markdown","06cae259":"markdown","767a5045":"markdown","ed2937a7":"markdown","3be619f4":"markdown","98d41f35":"markdown","e1212157":"markdown","2cc25a43":"markdown","878ffe2d":"markdown","58308596":"markdown","bb69ae2c":"markdown","97bb575c":"markdown","944e337e":"markdown","0959f978":"markdown","ea139bcd":"markdown","f965ec3b":"markdown","42088124":"markdown","8272a70c":"markdown","bc318840":"markdown","3b995ba3":"markdown","cb4a9f60":"markdown","fb74bf9a":"markdown","a67a27f9":"markdown","78ce7560":"markdown","0bc8a509":"markdown","0e7839cb":"markdown","d0a6b031":"markdown","3eb66595":"markdown","724eb42d":"markdown","a5ecb3fc":"markdown","f25b5f4e":"markdown","e4393f70":"markdown","3ac938af":"markdown","d397e964":"markdown","2299c25f":"markdown","eda4d54b":"markdown","e31ad731":"markdown","27db77e5":"markdown","6be9be20":"markdown","ea4cb08a":"markdown","b89508f2":"markdown","358aabae":"markdown","0592ced6":"markdown","7656f5c6":"markdown","b500248e":"markdown","f9a41a68":"markdown","879ca535":"markdown","ae90239f":"markdown","2b013642":"markdown","5560ac64":"markdown","9cfe73bc":"markdown","38b6b94b":"markdown","d9fda595":"markdown","7ff283e5":"markdown","6cd021c1":"markdown","0176e3d2":"markdown","eb2f21c3":"markdown","253fb7cf":"markdown","a8c8d0ca":"markdown","afd5ac3e":"markdown"},"source":{"be69c7af":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom datetime import datetime, date\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.metrics import r2_score, mean_squared_log_error\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom xgboost import XGBRegressor\n%matplotlib inline\npd.pandas.set_option('display.max_columns', None)","ffc987a2":"df_train = pd.read_csv('..\/input\/bike-count-prediction-data-set\/train.csv')\ndf_test = pd.read_csv('..\/input\/bike-count-prediction-data-set\/test.csv')","d71997e3":"df_train.head()","be2368b4":"df_test.head()","44add072":"df_train.shape, df_test.shape","9acb6ae9":"data_types_train = pd.DataFrame(df_train.dtypes, columns = ['Train'])\ndata_types_test = pd.DataFrame(df_test.dtypes, columns = ['Test'])\ndata_types = pd.concat([data_types_train, data_types_test], axis = 1)\ndata_types","b7cd0b48":"missing_values_train = pd.DataFrame(df_train.isna().sum(), columns = ['Train'])\nmissing_values_test = pd.DataFrame(df_test.isna().sum(), columns = ['Test'])\nmissing_values = pd.concat([missing_values_train, missing_values_test], axis = 1)\nmissing_values","03e3ef35":"df_train['yyyymmdd'] = df_train['datetime'].apply(lambda x : x.split()[0])\ndf_train['year'] = df_train['yyyymmdd'].apply(lambda dateString : datetime.strptime(dateString,'%Y-%m-%d').year)\ndf_train['month'] = df_train['yyyymmdd'].apply(lambda dateString : datetime.strptime(dateString,'%Y-%m-%d').month)\ndf_train['date'] = df_train['yyyymmdd'].apply(lambda dateString : datetime.strptime(dateString,'%Y-%m-%d').day)\ndf_train['hour'] = df_train['datetime'].apply(lambda x : x.split()[1].split(\":\")[0])\ndf_train = df_train.drop(['datetime', 'yyyymmdd'], axis = 1)","38bb04b8":"df_test['yyyymmdd'] = df_test['datetime'].apply(lambda x : x.split()[0])\ndf_test['year'] = df_test['yyyymmdd'].apply(lambda dateString : datetime.strptime(dateString,'%Y-%m-%d').year)\ndf_test['month'] = df_test['yyyymmdd'].apply(lambda dateString : datetime.strptime(dateString,'%Y-%m-%d').month)\ndf_test['date'] = df_test['yyyymmdd'].apply(lambda dateString : datetime.strptime(dateString,'%Y-%m-%d').day)\ndf_test['hour'] = df_test['datetime'].apply(lambda x : x.split()[1].split(\":\")[0])\ndf_test = df_test.drop(['datetime', 'yyyymmdd'], axis = 1)","42190fe8":"week = []\nfor i in df_train['date']:\n    if i < 8:\n        week.append(1)\n    elif i >= 8 and i < 16:\n        week.append(2)\n    elif i >=16 and i < 22:\n        week.append(3)\n    else:\n        week.append(4)\ndf_train['week'] = week","3b19567e":"week = []\nfor i in df_test['date']:\n    if i < 8:\n        week.append(1)\n    elif i >= 8 and i < 16:\n        week.append(2)\n    elif i >=16 and i < 22:\n        week.append(3)\n    else:\n        week.append(4)\ndf_test['week'] = week","2e365462":"df_train['hour'] = df_train['hour'].astype('object').astype(int)\ndf_test['hour'] = df_test['hour'].astype('object').astype(int)","0c64070b":"df_train.columns","8b1ac0a7":"df_test.columns","6ffad8b9":"data_types_train = pd.DataFrame(df_train.dtypes, columns = ['Train'])\ndata_types_test = pd.DataFrame(df_test.dtypes, columns = ['Test'])\ndata_types = pd.concat([data_types_train, data_types_test], axis = 1)\ndata_types","68bae7dd":"df_train.head()","37645b13":"df_test.head()","0c7355a5":"df_train[['temp', 'atemp', 'humidity', 'windspeed', 'casual', 'registered', 'count']].describe()","884c146b":"df_test[['temp', 'atemp', 'humidity', 'windspeed', 'casual', 'registered']].describe()","682e4f50":"fig, ax = plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(df_train.corr(), vmax = 1, vmin = -1, square = False, annot = True)","e20961d3":"df_train.groupby('season')['count'].sum().plot.bar()\nplt.xticks(rotation = 0, fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel('Season', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","80bccf3e":"df_train.groupby('holiday')['count'].sum().plot.bar()\nplt.xticks(rotation = 0, fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel('Holiday', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","5cf219c5":"df_train.groupby('workingday')['count'].sum().plot.bar()\nplt.xticks(rotation = 0, fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel('Working Day', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","89df4fe8":"df_train.groupby('weather')['count'].sum().plot.bar()\nplt.xticks(rotation = 0, fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel('Weather', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","dfd6670a":"sns.regplot(x = df_train['atemp'], y = df_train['count'], line_kws = {'color': 'red'})\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Actual Temperature', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","f9c88833":"sns.regplot(x = df_train['humidity'], y = df_train['count'], line_kws = {'color': 'red'})\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Humidity', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","007dcfc7":"sns.regplot(x = df_train['windspeed'], y = df_train['count'], line_kws = {'color': 'red'})\nplt.xticks(fontsize = 10, ha = \"right\")\nplt.yticks(fontsize = 10)\nplt.xlabel('Wind Speed', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","d37eaf65":"df_train.groupby('year')['count'].sum().plot.bar()\nplt.xticks(rotation = 0, fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel('Year', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","4b38288a":"new_df = df_train[df_train['month'] < 7]\nnew_df.groupby('year')['count'].sum().plot.bar()\nplt.xticks(rotation = 0, fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel('Year', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","30a1b2dc":"df_train.groupby('month')['count'].sum().plot.bar()\nplt.xticks(rotation = 0, fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel('Month', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","0841cb7a":"df_train.groupby('week')['count'].sum().plot.bar()\nplt.xticks(rotation = 0, fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel('Week', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","879439b5":"df_train.groupby('hour')['count'].sum().plot.bar()\nplt.xticks(rotation = 0, fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel('Hour', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","ab65de36":"sns.boxplot(y = df_train['atemp'])\nplt.title('Train Actual Temperature')\nplt.show()\nsns.boxplot(y = df_test['atemp'])\nplt.title('Test Actual Temperature')\nplt.show()","aa67dcdf":"sns.distplot(df_train['atemp'])\nplt.title('Train Actual Temperature')\nplt.show()\nsns.distplot(df_test['atemp'])\nplt.title('Test Actual Temperature')\nplt.show()","a2f4fbcb":"sns.boxplot(y = df_train['humidity'])\nplt.title('Train Humidity')\nplt.show()\nsns.boxplot(y = df_test['humidity'])\nplt.title('Test Humidity')\nplt.show()","0f9bc4be":"sns.distplot(df_train['humidity'])\nplt.title('Train Humidity')\nplt.show()\nsns.distplot(df_test['humidity'])\nplt.title('Test Humidity')\nplt.show()","35866c83":"sns.boxplot(y = df_train['windspeed'])\nplt.title('Train Wind Speed')\nplt.show()\nsns.boxplot(y = df_test['windspeed'])\nplt.title('Test Wind Speed')\nplt.show()","c560b462":"sns.distplot(df_train['windspeed'])\nplt.title('Train Wind Speed')\nplt.show()\nsns.distplot(df_test['windspeed'])\nplt.title('Test Wind Speed')\nplt.show()","8c855034":"df_train['windspeed'] = df_train['windspeed'] ** (1\/2)\ndf_test['windspeed'] = df_test['windspeed'] ** (1\/2)\nsns.distplot(df_train['windspeed'])\nplt.title('Train Wind Speed')\nplt.show()\nsns.distplot(df_test['windspeed'])\nplt.title('Test Wind Speed')\nplt.show()","a99b122c":"wind_speed_train = []\nfor i in df_train['windspeed']:\n    if i < (df_train['windspeed'].mean() - (2 * df_train['windspeed'].std())):\n        wind_speed_train.append(df_train['windspeed'].mean() - (2 * df_train['windspeed'].std()))\n    elif i > (df_train['windspeed'].mean() + (2 * df_train['windspeed'].std())):\n        wind_speed_train.append(df_train['windspeed'].mean() + (2 * df_train['windspeed'].std()))\n    else:\n        wind_speed_train.append(i)\ndf_train['windspeed'] = wind_speed_train\nwind_speed_test = []\nfor j in df_test['windspeed']:\n    if j < (df_test['windspeed'].mean() - (2 * df_test['windspeed'].std())):\n        wind_speed_test.append(df_test['windspeed'].mean() - (2 * df_test['windspeed'].std()))\n    elif j > (df_test['windspeed'].mean() + (2 * df_test['windspeed'].std())):\n        wind_speed_test.append(df_test['windspeed'].mean() + (2 * df_test['windspeed'].std()))\n    else:\n        wind_speed_test.append(j)\ndf_test['windspeed'] = wind_speed_test","5c998d7e":"sns.boxplot(y = df_train['count'])\nplt.title('Train Count')\nplt.show()","9402cad6":"sns.distplot(df_train['count'])\nplt.title('Train Count')\nplt.show()","a7f9684b":"df_train['count'] = df_train['count'] ** (1\/3)\nsns.distplot(df_train['count'])\nplt.title('Train Count')\nplt.show()","f8e36397":"count_train = []\nfor i in df_train['count']:\n    if i < (df_train['windspeed'].mean() - (2 * df_train['windspeed'].std())):\n        count_train.append(df_train['windspeed'].mean() - (2 * df_train['windspeed'].std()))\n    elif i > (df_train['windspeed'].mean() + (2 * df_train['windspeed'].std())):\n        count_train.append(df_train['windspeed'].mean() + (2 * df_train['windspeed'].std()))\n    else:\n        count_train.append(i)\ndf_train['count'] = count_train","3742f119":"df_train_scaled = pd.DataFrame(StandardScaler().fit_transform(df_train.drop('count', axis = 1)), columns = df_test.columns)\ndf_test_scaled = pd.DataFrame(StandardScaler().fit_transform(df_test), columns = df_test.columns)","293140f8":"df_train_scaled.head()","0c2d1d32":"df_test_scaled.head()","071ac64b":"pca_columns = []\nfor i in range(df_train_scaled.shape[1]):\n    pca_columns.append('PC' + str(i+1))\npca_model = PCA()\npca_model.fit(df_train_scaled)\ndf_pca_train = pd.DataFrame(pca_model.transform(df_train_scaled), columns = pca_columns)\nexplained_info_train = pd.DataFrame(pca_model.explained_variance_ratio_, columns=['Explained Info']).sort_values(by = 'Explained Info', ascending = False)\nimp = []\nfor i in range(explained_info_train.shape[0]):\n    imp.append(explained_info_train.head(i).sum())\nexplained_info_train_sum = pd.DataFrame()\nexplained_info_train_sum['Variable'] = pca_columns\nexplained_info_train_sum['Importance'] = imp\nexplained_info_train_sum","1d5717f9":"pca_columns = []\nfor i in range(8):\n    pca_columns.append('PC' + str(i+1))\npca_model = PCA(n_components = 8)\npca_model.fit(df_train_scaled)\ndf_pca_train = pd.DataFrame(pca_model.transform(df_train_scaled), columns = pca_columns)","ad45e35e":"df_pca_train.head()","2fbe7f52":"pca_model = PCA(n_components = 8)\npca_model.fit(df_test_scaled)\ndf_pca_test = pd.DataFrame(pca_model.transform(df_test_scaled), columns = pca_columns)","36004f8a":"X = df_pca_train\ny = df_train['count']\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.3, random_state = 17)\nX_test = df_pca_test","fdba4ead":"X_train.shape, X_val.shape, y_train.shape, y_val.shape, X_test.shape","2928a4ec":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train, X_train_sm)\nlr = lr.fit()\nprint(lr.summary())","b6c91663":"X_val_sm = sm.add_constant(X_val)\ny_pred_val = lr.predict(X_val_sm)\nr2_score(y_val, y_pred_val)","c0272da4":"models = [LinearRegression(), Lasso(), Ridge(), DecisionTreeRegressor(), RandomForestRegressor(), AdaBoostRegressor(), GradientBoostingRegressor(), KNeighborsRegressor(), SVR(), XGBRegressor()]\nmodel_names = ['LinearRegression', 'Lasso', 'Ridge', 'DecisionTreeRegressor', 'RandomForestRegressor', 'AdaBoostRegressor', 'GradientBoostingRegressor', 'KNeighborsRegressor', 'SVR', 'XGBRegressor']\nr2_train = []\nr2_val = []\nfor model in models:\n    mod = model\n    mod.fit(X_train, y_train)\n    y_pred_train = mod.predict(X_train)\n    y_pred_train = y_pred_train.clip(0)\n    y_pred_val = mod.predict(X_val)\n    y_pred_val = y_pred_val.clip(0)\n    r2_train.append(r2_score(y_train, y_pred_train))\n    r2_val.append(r2_score(y_val, y_pred_val))\ndata = {'Modelling Algorithm' : model_names, 'Train R2' : r2_train, 'Validation R2' : r2_val}\ndata = pd.DataFrame(data)\ndata['Difference'] = ((np.abs(data['Train R2'] - data['Validation R2'])) * 100)\/(data['Train R2'])\ndata.sort_values(by = 'Validation R2', ascending = False)","bb8fca91":"svr = SVR()\npossible_parameter_values = {'gamma' : [float(x)\/10000 for x in range(100001)],\n                             'C' : [float(x)\/10 for x in range(1001)]}\nsvr_rs_cv = RandomizedSearchCV(estimator = svr, param_distributions = possible_parameter_values, cv = 10, scoring = 'r2')\nsvr_rs_cv.fit(X_train, y_train)\nsvr_rs_cv.best_params_","d319857d":"svr_rs_cv.best_score_","5da195d5":"svr = SVR(gamma = 0.0516, C = 84.2)\nsvr.fit(X_train, y_train)\ny_pred_val = svr.predict(X_val)\ny_pred_val = y_pred_val.clip(0)","b9116c1e":"np.sqrt(mean_squared_log_error(y_val, y_pred_val))","18062971":"svr = SVR(gamma = 0.0516, C = 84.2)\nsvr.fit(X_train, y_train)\ny_pred_test = svr.predict(X_test)\ny_pred_test = y_pred_test.clip(0)\ny_pred_test = (y_pred_test) ** 3\ny_pred_test = pd.DataFrame(y_pred_test, columns = ['Predicted Counts'])\ny_pred_test = y_pred_test.round(decimals = 0)\ny_pred_test['Predicted Counts'] = y_pred_test['Predicted Counts'].astype('float').astype(int)\ny_pred_test.head()","0eb5d525":"y_pred_test.to_csv('Prediction.csv')","48bdf4a6":"pca_columns = []\nfor i in range(8):\n    pca_columns.append('PC' + str(i+1))\norg_var = pd.DataFrame(pca_model.components_, index = pca_columns, columns = df_train_scaled.columns)\nvalues = []\nfor i in org_var.columns:\n    values.append(org_var[i].sum())\ndep_var = pd.DataFrame()\ndep_var['Variables'] = df_train_scaled.columns\ndep_var['Values'] = values\ndep_var.sort_values(by = 'Values', ascending = False)","b0af63cf":"### Relation Between Season and Count","3ffdaf9b":"### Importing Libraries","551b93dd":"### Shape of Train and Test Data","043dc667":"### Scaled Train Data","da68188f":"### Train Data","34eced66":"### Data Types of Train and Test Data","0a482ed4":"### Shapes of the Data Sets","6b35cb03":"### Transforming Wind Speed","4d167f22":"### Extracting Information from Datetime Column and Dropping It","06cae259":"        So 8 variables are making upto 80% of the information.","767a5045":"### Checking with Statsmodels.api","ed2937a7":"        Bookings are increasing with the increase in actual temperature.","3be619f4":"        72% bookings are done in weather 1.\n\n        95% bookings are done in weathers 1 and 2.","98d41f35":"### Numerical Analysis of Train Data Continuous Variables","e1212157":"### Relation Between Holiday and Count","2cc25a43":"### Relation Between Dependent Variables and Count","878ffe2d":"### Humidity in Train and Test Data","58308596":"### Removing Outliers in Count","bb69ae2c":"### Best Score","97bb575c":"### Scaling Data Sets","944e337e":"### Converting Hour Column to Int Type","0959f978":"### Relation Between the First 6 Months of Each Year with Count","ea139bcd":"### Numerical Analysis of Test Data Continuous Variables","f965ec3b":"### Scaled Test Data","42088124":"### Transforming Count","8272a70c":"### Tuning Hyperparameters","bc318840":"### Relation Between Wind Speed and Count","3b995ba3":"        16% bookings are done in June.\n        \n        31% bookings are done in May and June.\n        \n        67% bookings are done during January to June.\n        \n        54% bookings are done during March to June.","cb4a9f60":"### Actual Temperature in Train and Test Data","fb74bf9a":"### Relation Between Weather and Count","a67a27f9":"        Bookings are decreasing with the increase in humidity.","78ce7560":"        Bookings are slightly increasing with the increase in wind speed.","0bc8a509":"### Categorizing Date Column Into Week","0e7839cb":"### Relation Between Actual Temperature and Count","d0a6b031":"### Relation Between Month and Count","3eb66595":"### Relation Between Year and Count","724eb42d":"### R2 for Different Algorithms","a5ecb3fc":"        98% bookings are done on non-holidays.","f25b5f4e":"        42% bookings are done in season 2.\n\n        64% bookings are done in seasons 2 and 3.","e4393f70":"        55% bookings are done in between 12 noon to 8 pm.\n\n        74% bookings are done in between 8 am to 8 pm.","3ac938af":"### RMSLE","d397e964":"### Relation Between Hour and Count","2299c25f":"### Relation Between Humidity and Count","eda4d54b":"### Train, Validation and Test Data Sets","e31ad731":"### Train Data Correlation","27db77e5":"        69% bookings are done on working days.","6be9be20":"        64% bookings are done in the first 6 months of 2012.","ea4cb08a":"### Columns of Train and Test Data","b89508f2":"### Train Data","358aabae":"### Data Types of Train and Test Data","0592ced6":"### Removing the Outliers in Wind Speed","7656f5c6":"### Final Model and Prediction","b500248e":"        30% bookings are done in the last week of a month.\n        \n        51% bookings are done in second half of the month.","f9a41a68":"### Exporting Predictions to CSV","879ca535":"        57% bookings are done in 2011.\n        \n        This data is not that valuable as we don't have the complete 2012 data with us. It is just upto June 2012.\n        \n        However we can compare the first six months of these two years.","ae90239f":"### Feature Selection","2b013642":"### Test Data","5560ac64":"### Validation Data R2","9cfe73bc":"        SVR is the best algorithm to build the model.","38b6b94b":"### Count in Train Data","d9fda595":"### Wind Speed in Train and Test Data","7ff283e5":"### Relation Between Week and Count","6cd021c1":"### Test Data","0176e3d2":"### Relation Between Working Day and Count","eb2f21c3":"        Count is very highly positively related to registered and casual.\n\n        Season is very highly positively related to month.\n\n        Temperature is very highly positively related to actual temperature\n        \n        Date is very highly positively related to week as we have created week out of date column.","253fb7cf":"###  Reading Data Sets","a8c8d0ca":"### Missing Values in Train and Test Data","afd5ac3e":"### Checking the Model"}}