{"cell_type":{"33eb2df2":"code","a9ffda96":"code","e5331b09":"code","46e91f28":"code","17ca7b69":"code","64cca316":"code","17419276":"code","5dd4e96d":"code","cc5617e4":"code","3d3d1183":"code","ad829394":"code","5bbb212f":"code","e68d1a9c":"code","321d5ad9":"code","5e6932e6":"code","2aa89109":"code","339096f6":"code","e905cd1a":"code","9505bf41":"code","0e4d76d3":"code","b5cd20a8":"code","39f61bb5":"code","a965b89d":"code","5f293e38":"code","3eb844ba":"code","78d07b0a":"code","c6168002":"code","7b91ce40":"code","84263255":"code","e3a9bc51":"code","e5bf715a":"code","2571b372":"code","b66ce7b8":"markdown","1939541b":"markdown","ad8b02ec":"markdown","59be5d91":"markdown","f4fb5a1e":"markdown","60c6027a":"markdown","863d07c0":"markdown"},"source":{"33eb2df2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9ffda96":"df = pd.read_csv('\/kaggle\/input\/wine-quality\/winequalityN.csv')\ndf.head()","e5331b09":"df.describe()","46e91f28":"df.info()","17ca7b69":"#check for null values\ndf.isnull().sum()","64cca316":"#fill the missing values\nfor col, value in df.items():\n    if col != 'type':\n        df[col] = df[col].fillna(df[col].mean())","17419276":"df.isnull().sum()","5dd4e96d":"#create boxplot\nfig,ax = plt.subplots(ncols=6, nrows = 2,figsize =(20,10))\nindex=0\nax = ax.flatten()\n\nfor col,value in df.items():\n    if col!='type':\n        sns.boxplot(y=col,data=df,ax = ax[index])\n        index+=1\nplt.tight_layout(pad=0.5,w_pad=0.7,h_pad=5.0)\n        ","cc5617e4":"#create displot\n#fig, ax = plt.subplots(ncols= 6,nrows =2, figsize= (20,10))\nindex =0\nax = ax.flatten()\nfor col,value in df.items():\n    if col!= 'type':\n        sns.displot(value, ax = ax[index])\n        index+=1\nplt.tight_layout(pad=0.5,w_pad=0.7,h_pad=5.0)","3d3d1183":"#log tranformation\ndf['free sulfur dioxide_log']= np.log(df['free sulfur dioxide'])","ad829394":"sns.displot(df['free sulfur dioxide_log'])","5bbb212f":"df['alcohol_log']= np.log(df['alcohol'])\nsns.displot(df['alcohol_log'])","e68d1a9c":"df['total sulfur dioxide_log']= np.log(df['total sulfur dioxide'])\nsns.displot(df['total sulfur dioxide_log'])","321d5ad9":"df['volatile acidity_log']= np.log(df['volatile acidity'])\nsns.displot(df['volatile acidity_log'])","5e6932e6":"df['residual sugar_log']= np.log(df['residual sugar'])\nsns.displot(df['residual sugar_log'])","2aa89109":"df.head()","339096f6":"col = ['residual sugar','alcohol','free sulfur dioxide','volatile acidity','total sulfur dioxide']\ndf = df.drop(columns = col, axis =1)\ndf.head()","e905cd1a":"sns.countplot(df['type'])","9505bf41":"sns.countplot(df['quality'])","0e4d76d3":"df.corr()","b5cd20a8":"plt.figure(figsize = (12,10))\nsns.heatmap(df.corr(), annot = True)","39f61bb5":"x = df.drop(columns = ['type','quality'])\ny = df['quality']\n","a965b89d":"y.value_counts()","5f293e38":"from imblearn.over_sampling import SMOTE\noversample = SMOTE(k_neighbors=4)\n# TRANSFORM THE DATASET\nx,y = oversample.fit_resample(x,y)","3eb844ba":"y.value_counts()","78d07b0a":"#classify function\nfrom sklearn.model_selection import cross_val_score, train_test_split\ndef classify(model,x,y):\n    x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=34)\n    #train model\n    model.fit(x_train,y_train)\n    print('Accuracy ', model.score(x_test,y_test)*100)\n    \n    #cross validation\n    score = cross_val_score(model,x,y,cv=5)\n    print('CV Score ', np.mean(score)*100)","c6168002":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nclassify(model,x,y)","7b91ce40":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nclassify(model,x,y)","84263255":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nclassify(model,x,y)","e3a9bc51":"from sklearn.ensemble import ExtraTreesClassifier\nmodel = ExtraTreesClassifier()\nclassify(model,x,y)","e5bf715a":"from xgboost import XGBClassifier\nmodel = XGBClassifier()\nclassify(model,x,y)","2571b372":"import lightgbm\nmodel = lightgbm.LGBMClassifier()\nclassify(model,x,y)\n","b66ce7b8":"# Class Imbalancement","1939541b":"# correlation matrix","ad8b02ec":"# load dataset","59be5d91":"# Preprocessing the dataset","f4fb5a1e":"# Exploratory analysis","60c6027a":"# model training","863d07c0":"# input split"}}