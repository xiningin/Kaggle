{"cell_type":{"9c48a375":"code","d4f1e5a2":"code","3e34cc5e":"code","0770d9a4":"code","62645633":"code","6896b889":"code","ac590880":"code","f49e01a3":"code","c887ff6c":"code","c07ac9b2":"code","06fa640c":"code","fa98a02e":"code","df4283dc":"code","00e42e54":"code","23c9c428":"code","5eeef853":"code","0f29ffb2":"code","c6fe5203":"code","a013cdbc":"code","4e91f7b9":"code","933b5773":"code","507cb98f":"code","835c18e5":"code","3a5cd3c1":"code","520265a1":"code","dc269d96":"code","3f26fb55":"code","74079d0c":"code","e5c9c3a2":"code","3160ecde":"code","7db88922":"code","11b1894d":"markdown","0b7ce01b":"markdown","e9396bca":"markdown","52ed5d8f":"markdown","6988e367":"markdown","8b7c5c88":"markdown","d5834ad0":"markdown","5ee95985":"markdown","d27c3e76":"markdown","4cc33a82":"markdown","bc2105fb":"markdown","d7caf36a":"markdown","db7d703b":"markdown","cb840219":"markdown","ea703a90":"markdown","dd297564":"markdown","a360e298":"markdown","99a9a485":"markdown","be1ec1ed":"markdown","6e4bd1f1":"markdown","b51dd6a2":"markdown","458ffb46":"markdown","7873e6bf":"markdown","18bcbce7":"markdown","21111d86":"markdown"},"source":{"9c48a375":"import pandas as pd\nimport numpy as np\nautos = pd.read_csv(r\"..\/input\/autos.csv\", encoding=\"Windows-1252\", nrows=50000)","d4f1e5a2":"autos.isnull().sum()","3e34cc5e":"cols = [\"date_crawled\", \"name\", \"seller\", \"offer_type\", \"dollar_price\", \"ab_test\",\n        \"vehicle_type\", \"registration_year\", \"gearbox\", \"power_ps\", \"model\",\n       \"kilometer\", \"registration_month\", \"fuel_type\", \"brand\", \"unrepaired_damage\",\n        \"ad_created\", \"pictures_number\", \"postal_code\",  \"last_seen_online\"]\nautos.columns = cols","0770d9a4":"autos.head()","62645633":"print(autos[\"pictures_number\"].sum())\nprint(autos[\"ab_test\"].unique())\nprint(autos[\"offer_type\"].unique())\nprint(autos['seller'].unique())\nautos.drop([\"pictures_number\", \"ab_test\", \"offer_type\", \"seller\"], axis=1, inplace=True)","6896b889":"autos.info()","ac590880":"autos.describe()","f49e01a3":"autos.dollar_price = autos.dollar_price.astype(np.uint32)\nautos.kilometer = autos.kilometer.astype(np.uint32)\nautos.power_ps = autos.power_ps.astype(np.uint16)\nautos.registration_month = autos.registration_month.astype(np.uint8)\nautos.registration_year = autos.registration_year.astype(np.uint16)\nautos.postal_code = autos.postal_code.astype(np.uint32)","c887ff6c":"autos.info()","c07ac9b2":"print(autos.dollar_price.value_counts().sort_index().head())\nprint(autos.dollar_price.unique().shape)\nc_dollar_prices = autos.dollar_price.copy()\ns_dollar_prices = c_dollar_prices.sort_values(ascending=False)\ns_dollar_prices.index = autos.index\nprint(s_dollar_prices.head())","06fa640c":"v_dollar_prices = autos[autos[\"dollar_price\"] > 100000].copy()\nv_dollar_prices.sort_values(by=['dollar_price'], ascending=False, inplace=True)\nv_dollar_prices[['name', 'kilometer', 'dollar_price']].head(20)","fa98a02e":"v_dollar_prices._is_copy is None","df4283dc":"autos.dollar_price.value_counts().sort_index().head(20)","00e42e54":"print((~autos[\"dollar_price\"].between(500,245000)).sum() \/ autos.shape[0])\nautos = autos[autos[\"dollar_price\"].between(500,245000)]\nv_dollar_prices = autos[autos[\"dollar_price\"] >= 50000].copy()\nv_dollar_prices.sort_values(by=['dollar_price'], ascending=False, inplace=True)\nv_dollar_prices.head(20)","23c9c428":"autos.loc[(autos[\"vehicle_type\"] == \"kombi\") & (autos[\"dollar_price\"] > 50000), \"dollar_price\"]","5eeef853":"autos.index","0f29ffb2":"autos.index = range(45081)","c6fe5203":"print(autos['vehicle_type'].unique(), autos['fuel_type'].unique())","a013cdbc":"mapping_vehicle_type = {\n    'coupe': 'coup\u00e9',\n    'kleinwagen': 'small car',\n    'kombi': 'station wagon',\n    'cabrio': 'convertible',\n    'andere': 'other',\n    'hybrid':'hybrid',\n    'limousine':'limousine',\n    'bus':'bus'\n                        }\n\nmapping_fuel_type = {\n    'benzin': 'gasoline',\n    'diesel': 'diesel',\n    'lpg': 'liquefied petroleum gas',\n    'andere': 'other',\n    'cng': 'compressed natural gas',\n    'elekto':'electric'\n                    }\n\nautos['vehicle_type'] = autos['vehicle_type'].map(mapping_vehicle_type)\nautos['fuel_type'] = autos['fuel_type'].map(mapping_fuel_type)","4e91f7b9":"autos[['date_crawled','ad_created','last_seen_online']].head()","933b5773":"date_col = ['date_crawled', 'ad_created', 'last_seen_online']\nfor col in date_col:\n    autos[col] = autos[col].str[:10]","507cb98f":"autos['date_crawled'].value_counts(normalize=True).sort_index(ascending=True)","835c18e5":"a = autos['ad_created'].value_counts(normalize=True).sort_index(ascending=False)\nb = a[a > 0.02]\nb","3a5cd3c1":"autos['last_seen_online'].value_counts(normalize=True).sort_index(ascending=False)","520265a1":"(autos['ad_created'] <= autos['last_seen_online']).all()","dc269d96":"a = (autos['registration_year'] > 2016)\nb = a[a == True]\nb.count()","3f26fb55":"cars_by_year = autos['registration_year'].value_counts().sort_index(ascending=False)\nautos.loc[autos[\"registration_year\"].between(2017,2018), \"registration_year\"] = 2016\nprint(cars_by_year.head(12))\nprint(cars_by_year.tail(12))","74079d0c":"(~autos[\"registration_year\"].between(1945,2016)).sum() \/ autos.shape[0]","e5c9c3a2":"# Many ways to select rows in a dataframe that fall within a value range for a column.\n# Using `Series.between()` is one way.\nautos = autos[autos[\"registration_year\"].between(1945,2016)]\nautos[\"registration_year\"].value_counts(normalize=True).head(10)","3160ecde":"p_brands = autos['brand'].value_counts(normalize=True)\np_brands","7db88922":"brand_mean_price = {}\nbrands = p_brands[p_brands > 0.01].index\nfor b in brands:\n    mean_price = int(autos.loc[autos.brand == b, \"dollar_price\"].mean())\n    mean_mileage = int(autos.loc[autos.brand == b, \"kilometer\"].mean())\n    mean_year = int(autos.loc[autos.brand == b, \"registration_year\"].mean())\n    brand_mean_price[b] = [mean_price, mean_mileage, mean_year]\ndf = pd.DataFrame.from_dict(brand_mean_price, orient='index', columns=['mean_price', 'mean_mileage', 'mean_year'])\ndf.head()","11b1894d":"~50% of the cars were last seen online during the three last days the website was crawled. We can infer that the crawler needs to put a value in the last_seen_online column even if the ad is still active. If we have to analyse the car sales, we will then exclude these three days from the analysis.","0b7ce01b":"There is exactly 2381 different prices from $0 to $12345678. We can easily deduce that some of these values are wrong and will bias our analysis. Let's have a deeper check to decide which range of prices we will keep.","e9396bca":"~10% of the data have been removed which represents a important number of outliers.","52ed5d8f":"There are a number of listings with prices below \\$40, including about 1,500 at \\$0. There are also a small number of listings with very high values, including 9 at around or over $1 million.\n\nGiven that eBay is an auction site, there could legitimately be items where the opening bid is \\$1. The opening bid does not however represent the real value of a car, we then decide to fix the minimal price for a car to $500 because we need prices to be real if we want to make some comparisons between brands for example. We remove anything above \\$245,000, since it seems that prices increase steadily to that number and then double to next number.","6988e367":"v_dollar_prices does not refer the original dataframe, we can then make new assignments without modifying the original dataframe and without getting the SettingWithCopy Warning.","8b7c5c88":"The dataset contains 20 columns, most of which are strings.\nSome columns have null values, but none have more than ~20% null values.\nThe column names use camelcase instead of Python's preferred snakecase, which means we can't just replace spaces with underscores.","d5834ad0":"To carry out the analysis of the car price within each brand, we are going to consider only brands that represent at least 1% of the whole dataset, there are 16 brands. We need enough data to perform this kind of analysis to avoid mistaking due to an inconsistency of the data. A wrong price has more impact if the number of total prices is low.","5ee95985":"Based on the information we got from the data within each column, we decide to delete the following ones:\n - pictures_number because all  values are equal to zero\n - ab_test takes two different values: 'test' and 'control' that are not relevant for our analysis\n - offer_type takes two different values 'Angebot' and 'Gesuch' that are not relevant for our analysis\n - seller takes only one value","d27c3e76":"We then reduced the memory usage by 1.5 MB out of 6.1 MB, i.e. 25%, just by optimizing the types of numerical data for 50,000 rows. ","4cc33a82":"Let's check the consistency of the data and the reliability of the crawler by comparing the date the ad was created and the last time it was seen online:","bc2105fb":"#### Exploring the dates columns\n\nThere are 5 columns that should represent date values. Some of these columns were created by the crawler, some came from the website itself. We can differentiate by referring to the data dictionary:\n\n- `date_crawled`: added by the crawler\n- `last_seen`: added by the crawler\n- `ad_created`: from the website\n- `registration_month`: from the website\n- `registration_year`: from the website","d7caf36a":"As we removed data from the original data frame, it's cleaner to reset the index as we did in the cell above.","db7d703b":"Some of the data in the registration_year column are wrong, a registration superior to April 2016 is not possible based on the date of the latest crawling. Given  the important number of cars between 2017 and 2019, we could change these values to 2016 for example.  We can consider that a registration before 1945 is also an error. Even if some ads might be right, there is a high probabilty to find outliers.","cb840219":"The cars were crawled each day between March 2016, 5th and March 2016, 7th. The repartition of the data collection is uniform, each day ~3% of the data were collected.","ea703a90":"The percentage of values that we are going to remove from the dataset is marginal (less than 0.1%)","dd297564":"#### View of the various vehicle and fuel types","a360e298":"You'll notice that the first 10 characters represent the day (e.g. 2016-03-12). To understand the date range, we can extract just the date values, use Series.value_counts() to generate a distribution, and then sort by the index.\n\nTo select the first 10 characters in each column, we can use Series.str[:10]","99a9a485":"The ads crawled were created between March 2015, 20th and April 2016, 7th. We notice that 93% of them were created between March 2016, 5th and April 2016, 7th. It's in line with the dates the website was crawled. We can infer that an ad has a lifetime of approximately one month. We could for example neglect the ads created before March 2016 depending on our analysis.","be1ec1ed":"### Analysing Used Car Data from Ebay\n\nWe are going to work on a dataset of used cars listed  from Ebay Kleinanzeigen, the German based version of Ebay.  \n\nThe original data was originally scraped from [Orges Leka database](https:\/\/www.kaggle.com\/orgesleka\/used-cars-database), The version of the dataset we will be working with is a sample of the first 50,000 data points to run the code faster. That will not affect our analysis.","6e4bd1f1":"The mean prices are in line with our knowledge on the brand real prices. The three more expensive brands are respectively Audi, Bmw and Mercedes because of their high standards. More affordable brands like Renault, Fiat, Opel and Peugeot have a cheaper mean price. We could also add the mean year of registration per brand to improve the analysis. ","b51dd6a2":"#### We use a dictionary and the map function to convert vehicle and fuel types from German to English","458ffb46":"Based on min and max values of numerical data above, we notice that we can reduce the memory usage by storing the data in more optimal types. For example, prices, kilometers and registration years are all positive values, we can use unsigned integers to store them instead of int64 and reduce the memory allocation.","7873e6bf":"All the ads were created before they were last seen online, then the crawling worked properly.","18bcbce7":"### What happened this time?\n\nThe first part of the above operation selects the price column. When pandas selects a single column from a DataFrame, pandas creates a view and not a copy. A view just means that no new object has been created. df['price'] references the price column in the original DataFrame.\n\nThis is analogous to the list example where we assigned an entire list to a new variable. No new object is created, just a new reference to the one already in existence.\n\nSince no new data has been created, the assignment will modify the original DataFrame.\n\n### Why is a warning triggered when our operation completed successfully?\n\nPandas does not know if you want to modify the original DataFrame or just the first subset selection.\n\nFor instance, you could have selected the price column as a Series to do further analysis with it without affecting the original DataFrame.\n\nTo get an independent copy, we called the copy method. ","21111d86":"The df.infos() method gives us information about the number of observations, each column data type and the memory used by the df. We can have more details about numerical values with the df.describe() method."}}