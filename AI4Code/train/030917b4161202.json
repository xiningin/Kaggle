{"cell_type":{"5826081e":"code","d55564bf":"code","be9d6289":"code","81a75274":"code","284ab315":"code","30ad6e80":"code","e19e0b90":"code","3121f7db":"code","18f974d9":"code","3d142ffb":"code","7bfaf6c0":"code","bf7618f6":"code","48e1e376":"code","852e0d70":"code","6b3f3b34":"code","fe98e725":"code","ebe99e45":"code","41bcc05d":"code","89c46481":"code","eef40c76":"code","b70fd57a":"code","7f0133a7":"code","d826c78e":"code","2e2a7156":"code","72583de5":"code","d12047f1":"code","15449512":"code","b9d71065":"code","65566d6c":"code","13d15d33":"code","8944bb02":"code","918c6a50":"code","5453198d":"code","7223e1dc":"code","26cf17bc":"code","f5263a6a":"code","6fb610da":"code","7b3ccbd8":"code","af1cbfc2":"code","865afefa":"code","4c2719f2":"code","fd62fe2b":"code","44ede225":"markdown","749dc206":"markdown","198b2995":"markdown","17757a0e":"markdown","601c38be":"markdown","966ed44f":"markdown","c1ea9339":"markdown","3a925119":"markdown","3545ed77":"markdown","113e00a2":"markdown","47b4030e":"markdown","03be093e":"markdown","2c5e702c":"markdown","c66b8c44":"markdown","51f2305f":"markdown","b9a082d9":"markdown","858b7016":"markdown","e851ef71":"markdown","a299c700":"markdown","c9fc2ba9":"markdown","9de0dff1":"markdown","157997dd":"markdown","827f0ce8":"markdown","c4134fac":"markdown","ad524682":"markdown","a679179b":"markdown","8dc2649f":"markdown","49bbe701":"markdown","be9857dc":"markdown","0f22f8cf":"markdown","c726d97a":"markdown","7efec1a0":"markdown"},"source":{"5826081e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d55564bf":"df_store = pd.read_csv('..\/input\/supermarket-sales\/supermarket_sales - Sheet1.csv')","be9d6289":"df_store.head()","81a75274":"df_store.shape","284ab315":"df_store.info()","30ad6e80":"df_store.duplicated().any()","e19e0b90":"df_store[df_store.duplicated()]","3121f7db":"df_store.isna().sum()","18f974d9":"df_store.loc[:, df_store.isna().any()].columns","3d142ffb":"df_store.head()","7bfaf6c0":"df_store.rename(columns={'Customer type': 'Customer_type', \n                       'Product line': 'Product_line', \n                       'Unit price': 'Unit_price', \n                       'Tax 5%': 'Tax_5%', \n                       'gross margin percentage': 'Gross_margin_percentage', \n                       'gross income': 'Gross_income','Invoice ID': 'Invoice_ID', 'cogs': 'Cogs' }, inplace=True)","bf7618f6":"df_store['Date'] = pd.to_datetime(df_store['Date']).dt.date\ndf_store['month_year'] = pd.to_datetime(df_store['Date']).dt.to_period('M')\ndf_store['month_year'] = df_store['month_year'].astype('str')","48e1e376":"df_store['Purchasing_time'] = df_store['Time'].str[:2]\ndf_store['Purchasing_time'] = df_store['Purchasing_time'].astype('int8')\ndf_store = df_store.drop(columns={'Time'})","852e0d70":"df_store.head()","6b3f3b34":"print('This dataset is from between',df_store['Date'].min(),'-',df_store['Date'].max())","fe98e725":"df_store[['Branch','City']].nunique()","ebe99e45":"print('We have',df_store['Customer_type'].nunique(),'Different Customer Type , That is :',df_store['Customer_type'].unique())","41bcc05d":"print('We have',df_store['Product_line'].nunique(),'Different Product Line Type , That is :',df_store['Product_line'].unique())","89c46481":"print('We have',df_store['Payment'].nunique(),'Different Payment Type , That is :',df_store['Payment'].unique())","eef40c76":"df_store.describe()","b70fd57a":"sns.heatmap(np.round(df_store.corr(),2), annot=True)","7f0133a7":"df_store[['City']].value_counts()","d826c78e":"sns.countplot(x='City', hue='Gender',data=df_store).set_title(\"Number of customers by gender in each branch\")\nax = plt.gca()\n\n# ylim max value to be set\ny_max = df_store[['City','Gender']].value_counts().max() \nax.set_ylim([0, y_max+20])\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=12, ha='center', va='bottom')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.show()","2e2a7156":"sns.countplot(x='City', hue='Customer_type',data=df_store).set_title(\"Number of customers by Customer type in each branch\")\nax = plt.gca()\n\n# ylim max value to be set\ny_max = df_store[['City','Gender']].value_counts().max() \nax.set_ylim([0, y_max+20])\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=12, ha='center', va='bottom')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.show()\nplt.show()","72583de5":"sns.barplot(x=\"City\", y=\"Total\" ,data=df_store, estimator=sum, ci = None).set_title('Net sales generated by each city(branch)')\nax = plt.gca()\n\n# ylim max value to be set\ny_max = df_store.groupby('City')['Total'].sum().max() \nax.set_ylim([0, y_max*1.2])\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=10, ha='center', va='bottom')\nplt.xticks(rotation=0)\nplt.show()","d12047f1":"sns.boxplot(x=df_store['City'], y=df_store['Gross_income'])\nplt.show()","15449512":"sns.boxplot(x=df_store['Gender'], y=df_store['Total'])","b9d71065":"pd.pivot_table(df_store, values='Total', index='Product_line', columns='Gender', aggfunc='sum')","65566d6c":"plt.figure(figsize=(12,5))\nsns.barplot(x=\"Product_line\", y=\"Total\",hue='Gender' ,data=df_store, estimator=sum, ci = None).set_title('Net sales generated by each city(branch) accross all product lines.')\nax = plt.gca()\n\n# ylim max value to be set\n#y_max = df_store[['City','Gender']].value_counts().max() \n#ax.set_ylim([0, y_max])\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=9, ha='center', va='bottom')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.xticks(rotation=0)\nplt.show()","13d15d33":"pd.pivot_table(df_store, values='Total', index='Product_line', columns='Customer_type', aggfunc='sum')","8944bb02":"plt.figure(figsize=(12,5))\nsns.barplot(x=\"Product_line\", y=\"Total\",hue='Customer_type' ,data=df_store, estimator=sum, ci = None)\nplt.title('Net sales generated by each Customer Type accross all product lines.')\nax = plt.gca()\n\n# ylim max value to be set\n#y_max = df_store[['City','Gender']].value_counts().max() \n#ax.set_ylim([0, y_max])\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=9, ha='center', va='bottom')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.xticks(rotation=0)\nplt.show()","918c6a50":"df_store = df_store.sort_values(['month_year','Date'],ascending=True)","5453198d":"plt.figure(figsize=(12,5))\nsns.barplot(data=df_store, x=\"month_year\", y=\"Total\", hue=\"City\", estimator=sum ,ci=None).set_title('Net income generated by branch per month.')\nplt.xlabel('Month')\nplt.show()","7223e1dc":"df_store['Day'] = pd.to_datetime(df_store['Date']).dt.day_name()","26cf17bc":"day = df_store.groupby('Day')['Total'].sum().reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\nday = day.reset_index()","f5263a6a":"plt.figure(figsize=(10, 6))\nsns.barplot(x=\"Day\", y=\"Total\" ,data=day, estimator=sum, ci = None)\nax = plt.gca()\n\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=9, ha='center', va='bottom')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.xticks(rotation=0)\nplt.show()","6fb610da":"plt.figure(figsize=(12,5))\ndf_store[df_store['City']=='Yangon'].groupby(['Purchasing_time'])['Quantity'].mean().plot()\ndf_store[df_store['City']=='Mandalay'].groupby(['Purchasing_time'])['Quantity'].mean().plot()\ndf_store[df_store['City']=='Naypyitaw'].groupby(['Purchasing_time'])['Quantity'].mean().plot()\nplt.xticks(np.arange(10, 21, step=1))\n#plt.yticks(np.arange(0, 500, step=50))\nplt.legend(['Yangon','Mandalay','Naypyitaw'])\nplt.title('Product Sales Per Hour.')\nplt.show()","7b3ccbd8":"size = df_store[df_store['Customer_type']=='Member']['Payment'].value_counts()\nlabels = ['Cash', 'Credit Card','Ewallet']\nplt.title('Frequently used payments by Member')\ncolors = sns.color_palette('pastel')[0:10]\nplt.pie(size, labels=labels,colors=colors ,autopct='%1.0f%%', startangle=90)\nplt.show()","af1cbfc2":"sizes = df_store[df_store['Customer_type']=='Normal']['Payment'].value_counts()\nlabels = ['Cash', 'Credit Card','Ewallet']\nplt.title('Frequently used payments by Non Member')\ncolors = sns.color_palette('pastel')[0:10]\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.0f%%', startangle=90)\nplt.show()","865afefa":"sns.boxplot(x=df_store['Payment'], y=df_store['Total'])\nplt.show()","4c2719f2":"df_store.groupby('City')['Rating'].mean().sort_values(ascending=False).plot(kind='bar')\nfor i,j in enumerate(df_store.groupby('City')['Rating'].mean().sort_values(ascending=False)):\n    plt.text(i,j+0.2 ,str(round(j,2)),ha='center',fontweight='bold',fontsize='x-large')\nplt.ylim(0,8)\nplt.title('The Highest Rating By City')\nplt.xticks(rotation=0)\nplt.show()","fd62fe2b":"df_store[df_store['City']=='Naypyitaw'].groupby('Product_line')['City'].count().sort_values(ascending=False).plot(kind='bar')\nplt.show()","44ede225":"### Result\n- Naypyitaw is the most sales and also the profitable branch in terms of gross income.","749dc206":"### Result\n- All payment methods are significantly used.\n- Credit Card payments methods are almost equally used among members and non-members.\n- Members use more credit Card and Cash payment.\n- Non-members use slightly larger Cash payments","198b2995":"## 5. Month-Wise Sales of Different Branches","17757a0e":"Context\n\nThe growth of supermarkets in most populated cities are increasing and market competitions are also high. The dataset is one of the historical sales of supermarket company which has recorded in 3 different branches for 3 months data. Predictive data analytics methods are easy to apply with this dataset.\n\nAttribute information\n\n- Invoice id: Computer generated sales slip invoice identification number\n- Branch: Branch of supercenter (3 branches are available identified by A, B and C).\n- City: Location of supercenters\n- Customer type: Type of customers, recorded by Members for customers using member card and Normal for without member card.\n- Gender: Gender type of customer\n- Product line: General item categorization groups - Electronic accessories, Fashion accessories, Food and beverages, Health and beauty, Home and lifestyle, Sports and travel\n- Unit price: Price of each product in '$'\n- Quantity: Number of products purchased by customer\n- Tax: 5% tax fee for customer buying\n- Total: Total price including tax\n- Date: Date of purchase (Record available from January 2019 to March 2019)\n- Time: Purchase time (10am to 9pm)\n- Payment: Payment used by customer for purchase (3 methods are available \u2013 Cash, Credit card and Ewallet)\n- COGS: Cost of goods sold\n- Gross margin percentage: Gross margin percentage\n- Gross income: Gross income\n- Rating: Customer stratification rating on their overall shopping experience (On a scale of 1 to 10)","601c38be":"## Exploratory Data Analysis (EDA)","966ed44f":"### Data Cleaning","c1ea9339":"## Make Some Visualizations","3a925119":"### Changing column name","3545ed77":"### Result :\n- Tuesday and saturday have larger sale in the week.\n- Monday has the least sale in the week.","113e00a2":"## 6. Which days of the week have most sales?","47b4030e":"### Result\n- Because Naypyitaw Branch is the most sales and profitable , also the highest Rating than other. \n- hence the expansion plan should be based on this city.\n- and Fashion accessories and food and beverages are the most sold these products should be focused on for expansion","03be093e":"## 1. In which Branch That the most visiting prefer by Gender and Type Customer","2c5e702c":"### Result\n- Total Sales by Payment is similar for all payment","c66b8c44":"### Result \n- Male customers contribute larger amount of sales from \"Health adn Beauty\".\n- Female customers contribute larger amount of sales from \"Fashion Accessories\", \"Food and Beverages\" and \"Home and Lifestyle\".","51f2305f":"### Little Insight","b9a082d9":"we have 3 branches in 3 cities","858b7016":"### Check Missing Value","e851ef71":"### Result\n- Yangon Branch have the most visited from 2019-01-01 - 2019-03-30\n- Yangon Branch have the most visted by male and also the most visted by non mamber\n- Naypyitaw Branch have the most visited by female and also the most visted by member\n- Each Branch has almost the same number of visitors, both by gender and by type of consumer","a299c700":"## Description About Dataset","c9fc2ba9":"## 8. Which Payment that used By Costumer?","9de0dff1":"## 7. Which hour of the day is the busiest?","157997dd":"### Result\n- Non-Members contribute larger amount of sales from \"Electronic Accessories\".\n- Members contribute larger amount of sales from \"Food and Beverages\".\n","827f0ce8":"## 9. Is there any relationship between Payment and Sales? ","c4134fac":"### Result\n- Total Sales by Gender is similar for both male and female, but female spend little bit higher than male","ad524682":"### Data Understanding","a679179b":"## 10. Which city should be chosen for expansion and which products should it focus on?","8dc2649f":"## 3. Is there any relationship between Gender and Sales?","49bbe701":"## 4. Which products are more purchased by different customer segments?","be9857dc":"## Import basic modules","0f22f8cf":"### Result : \n- for Mandalay and Naypyitaw , Peak is observed in the 14th hour i.e 2 pm of the day\n- for Yangon , Peak is observed in the 19th hour i.e 7 pm of the day","c726d97a":"### #Result :\n- Sales of the branches is almost similar.\n- From January, the sales have slightly decreased for each branch.\n- Mandalay has most consistent sales.","7efec1a0":"## 2. Which branch is the most sales and profitable?"}}