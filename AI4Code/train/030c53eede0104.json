{"cell_type":{"802c2712":"code","2b490460":"code","8bad125b":"code","1a2e873e":"code","694c16d7":"code","07719822":"code","c6c623c9":"code","079b0031":"code","c76f008c":"code","669b245d":"code","4fdcc370":"code","e0fdf076":"code","66e39589":"code","f00d4083":"markdown"},"source":{"802c2712":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\"))","2b490460":"#import the data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","8bad125b":"train.head()\ntest.head()","1a2e873e":"# dataset discovery\ntrain.info\ntest.info\ntrain.columns\ntrain.dtypes\ntest.dtypes","694c16d7":"# create new dataframes\ntrain_df = train\ntest_df = test","07719822":"# parse the json objects in the train dataframe\nimport json\nfrom pandas.io.json import json_normalize\n#train_df = train_df.join(json_normalize(train_df[\"totals\"].tolist()).add_prefix(\"totals.\")).drop([\"totals\"], axis=1)\ntrain_df = train_df.join(json_normalize(train_df['trafficSource'].map(json.loads).tolist()).add_prefix('trafficSource.'))\\\n    .drop(['trafficSource'], axis=1)\ntrain_df = train_df.join(json_normalize(train_df['device'].map(json.loads).tolist()).add_prefix('device.'))\\\n    .drop(['device'], axis=1)\ntrain_df = train_df.join(json_normalize(train_df['geoNetwork'].map(json.loads).tolist()).add_prefix('geoNetwork.'))\\\n    .drop(['geoNetwork'], axis=1)\ntrain_df = train_df.join(json_normalize(train_df['totals'].map(json.loads).tolist()).add_prefix('totals.'))\\\n    .drop(['totals'], axis=1)\ntrain_df.head()","c6c623c9":"# parse the json objects in the test dataframe\n\ntest_df = test_df.join(json_normalize(test_df['trafficSource'].map(json.loads).tolist()).add_prefix('trafficSource.'))\\\n    .drop(['trafficSource'], axis=1)\ntest_df = test_df.join(json_normalize(test_df['device'].map(json.loads).tolist()).add_prefix('device.'))\\\n    .drop(['device'], axis=1)\ntest_df = test_df.join(json_normalize(test_df['geoNetwork'].map(json.loads).tolist()).add_prefix('geoNetwork.'))\\\n    .drop(['geoNetwork'], axis=1)\ntest_df = test_df.join(json_normalize(test_df['totals'].map(json.loads).tolist()).add_prefix('totals.'))\\\n    .drop(['totals'], axis=1)\ntest_df.head()\n#test_df.dtypes","079b0031":"#train_df['totals.transactionRevenue'].unique()","c76f008c":"#transform the date colummns - conver integer to date \ntrain_df['visitStartTime'] = pd.to_datetime(train_df['visitStartTime'],unit='s')\ntrain_df['date'] = pd.to_datetime(train_df['date'].astype(str),format='%Y%m%d')\n\ntest_df['visitStartTime'] = pd.to_datetime(test_df['visitStartTime'],unit='s')\ntest_df['date'] = pd.to_datetime(test_df['date'].astype(str),format='%Y%m%d')","669b245d":"# import required libraries\nimport xgboost as xgb\nfrom sklearn.preprocessing import StandardScaler,Imputer\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.pipeline import Pipeline,FeatureUnion\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn_pandas import DataFrameMapper, CategoricalImputer","4fdcc370":"train_df.head()","e0fdf076":"# find the index of columns of interest\ncols = [\"channelGrouping\",\"socialEngagementType\",\"visitNumber\",\"trafficSource.adContent\",\"trafficSource.adwordsClickInfo.adNetworkType\",\"trafficSource.adwordsClickInfo.criteriaParameters\",\"trafficSource.adwordsClickInfo.gclId\"\n        ,\"trafficSource.adwordsClickInfo.isVideoAd\",\"trafficSource.adwordsClickInfo.page\",\"trafficSource.adwordsClickInfo.slot\",\"trafficSource.campaign\",\"trafficSource.isTrueDirect\",\"trafficSource.keyword\",\"trafficSource.medium\"\n       ,\"trafficSource.referralPath\",\"trafficSource.source\",\"device.deviceCategory\",\"geoNetwork.city\",\"geoNetwork.continent\",\"geoNetwork.country\",\"geoNetwork.metro\",\"geoNetwork.networkDomain\",\"geoNetwork.region\",\"geoNetwork.subContinent\",\"totals.bounces\",\"totals.hits\",\"totals.newVisits\",\"totals.pageviews\",\"totals.visits\",\"totals.transactionRevenue\"]\n#train_df.head()\n[train_df.columns.get_loc(c) for c in train_df.columns if c in cols]\n[test_df.columns.get_loc(c) for c in test_df.columns if c in cols]\n","66e39589":"# split the train data into a matrix of predictor variables and a vector of target variable\nX_train, y_train = train_df.iloc[:,[0,4,6,8,9,10,12,13,14,15,17,18,19,20,21,22,25,38,40,41,46,47,48,49,50,51,52,54]],train_df.iloc[:,53]\nX_test = test_df.iloc[:,[0,4,6,8,9,10,12,13,14,15,16,17,18,19,20,21,24,37,39,40,45,46,47,48,49,50,51,52]]\nX_train.head()\ny_train.head()\nX_test.head()\nX_train.info()\nX_test.info()\n","f00d4083":"## Clustering for dataset exploration"}}