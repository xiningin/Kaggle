{"cell_type":{"3a36cb24":"code","576b72ed":"code","ad5d6d2a":"code","b7ccf65f":"code","949162f5":"code","7d89b9a2":"code","530c4bdb":"code","3eb39d17":"code","b7409a3e":"code","84d0d030":"code","b50ad39a":"markdown"},"source":{"3a36cb24":"# All imports \nimport numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport xml.etree.ElementTree as ET\nimport re\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames:\n       # print(os.path.join(dirname, filename))","576b72ed":"# Reading and setting up the data frame from TCX file\nride_time = []\nHR_rate = []\nlat = []\nlon = []\nalt = []\ndist = []\ncadence = []\nspeed = []\nwatt = []\nwith open('\/kaggle\/input\/tcx-file-cycling-dataset\/360_Loop.tcx') as xml_file:\n    xml_str = xml_file.read()\n    xml_str = re.sub(' xmlns=\"[^\"]+\"', '', xml_str, count=1)\n    root = ET.fromstring(xml_str)\n    activities = root.findall('.\/\/Activity')\n    for activity in activities:\n        tracking_points = activity.findall('.\/\/Trackpoint')\n        for tracking_point in list(tracking_points):\n            children = list(tracking_point)\n            ride_time.append(children[0].text)\n            HR_rate.append(list(children[4])[0].text)\n            lat.append(list(children[1])[0].text)\n            lon.append(list(children[1])[1].text)\n            alt.append(children[2].text)\n            dist.append(children[3].text)\n            cadence.append(children[5].text)\n            speed.append(list(children[6])[0][0].text)\n            watt.append(list(children[6])[0][1].text)\n            \n","ad5d6d2a":"#Creating a new DataFrame\nrider = pd.DataFrame({'Time':ride_time,\n                      'HR Rate':HR_rate,\n                     'Latitude':lat,\n                     'Logitude':lon,\n                     'Altitude':alt,\n                     'Distance':dist,\n                     'Cadance':cadence,\n                     'speed':speed,\n                     'watt':watt})\nrider.head()","b7ccf65f":"rider.describe()","949162f5":"def findMean(data):\n    data = data.astype(float)\n    return data.mean()","7d89b9a2":"cut1 = rider.iloc[0:1000]\ncut2 = rider.iloc[1001:2000]\ncut3 = rider.iloc[2001:3000]\ncut4 = rider.iloc[3001:4000]\ncut5 = rider.iloc[4001:5000]\ncut6 = rider.iloc[5001:6000]\ncut7 = rider.iloc[6001:7000]\ncut8 = rider.iloc[7001:8000]\n\ncuts = [cut1,cut2,cut3,cut4,cut5,cut6,cut7,cut8]\n\nspeed_mean = []\ndistance_mean = []\nhr_mean = []\nwatt_mean = []\ncadance_mean = []\nfor c in cuts:\n    speed_mean.append(findMean(c['speed']))\n    distance_mean.append(findMean(c['Distance'])*0.001)# converting meters to KM *0.001\n    hr_mean.append(findMean(c['HR Rate']))\n    watt_mean.append(findMean(c['watt']))\n    cadance_mean.append(findMean(c['Cadance']))\n    \n","530c4bdb":"\n\nplt.figure(figsize=(12,6))\nplt.title(\"Speed chart on Distance\")\nplt.xlabel(\"Distance(km)\")\nplt.ylabel(\"Speed(mph)\")\nsns.lineplot(x=distance_mean,y=speed_mean)","3eb39d17":"plt.figure(figsize=(12,6))\nplt.title(\"Heart Rate with Distance\")\nplt.xlabel(\"Distance(km)\")\nplt.ylabel(\"HR\")\nsns.lineplot(x=distance_mean,y=hr_mean)","b7409a3e":"plt.figure(figsize=(12,6))\nplt.title(\"Cadance with Distance\")\nplt.xlabel(\"Distance(km)\")\nplt.ylabel(\"Cadance\")\nsns.lineplot(x=distance_mean,y=cadance_mean)","84d0d030":"plt.figure(figsize=(12,6))\nplt.title(\"Power with Distance\")\nplt.xlabel(\"Distance(km)\")\nplt.ylabel(\"watt\")\nsns.lineplot(x=distance_mean,y=watt_mean)","b50ad39a":"This is a simple notebook showing the data of a rider from an TCX file. Line graphs are plotted using Distance and other parameters."}}