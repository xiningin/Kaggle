{"cell_type":{"bd4eb395":"code","c8d1d988":"code","d9e008b7":"code","7a5b0754":"code","2c996989":"code","adda26c4":"code","8324de21":"code","03c8eb5f":"code","35697ffa":"code","4e2a3eb8":"code","2a66e1ae":"code","1747e903":"code","a0501fcb":"code","b7259423":"code","d738e4f5":"code","734375c0":"code","6f439669":"code","fcce4bfb":"code","d57ab7f7":"code","5a2e10bd":"code","eec87c9c":"code","2f826085":"code","96ae7900":"code","694b87ef":"code","fccfcca5":"code","39e149bb":"code","40e47e3e":"code","11506942":"code","54445a48":"code","925fc17e":"code","869e2531":"code","b3d4855f":"code","2062bff9":"markdown","a14fefbf":"markdown","a4e20677":"markdown","231d993e":"markdown","bb7aabeb":"markdown","4c12c686":"markdown","6937d181":"markdown","549739e9":"markdown","eede729b":"markdown","b6e85af8":"markdown","221d27f6":"markdown","01da5790":"markdown","c87b9487":"markdown","023cc55d":"markdown"},"source":{"bd4eb395":"# \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport numpy as np # \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0430\u043b\u0433\u0435\u0431\u0440\u0430\nimport pandas as pd # \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\nimport os # \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439\nimport time","c8d1d988":"## \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0434 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\nfrom sklearn.datasets import make_blobs, make_classification, make_regression, make_biclusters\nimport sklearn.datasets as ds","d9e008b7":"## \u0421\u0431\u043e\u0440 \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u0435\u0434\u0438\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e\nfrom sklearn.pipeline import make_pipeline, Pipeline","7a5b0754":"## \u0421 \u044d\u0442\u0438\u043c \u0435\u0449\u0435 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f, \u043d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e\nfrom sklearn.compose import make_column_transformer, make_column_selector\nfrom sklearn.compose import ColumnTransformer, TransformedTargetRegressor\n\nfrom sklearn.feature_extraction import DictVectorizer, FeatureHasher","2c996989":"## \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445\nfrom sklearn.impute import SimpleImputer, KNNImputer\nfrom sklearn.impute import MissingIndicator","adda26c4":"## \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n# \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0448\u043a\u0430\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nfrom sklearn.preprocessing import RobustScaler, StandardScaler, MinMaxScaler, MaxAbsScaler, Normalizer\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u043d\u043e\u0432\u044b\u0435 \u0444\u043e\u0440\u043c\u044b \u0437\u0430 \u0441\u0447\u0435\u0442 \u0434\u0438\u0441\u043a\u0440\u0435\u0442\u0438\u0437\u0430\u0446\u0438\u0438\nfrom sklearn.preprocessing import Binarizer, KBinsDiscretizer, QuantileTransformer\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u043d\u043e\u0432\u044b\u0435 \u0444\u043e\u0440\u043c\u044b \u0437\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0445 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439\nfrom sklearn.preprocessing import FunctionTransformer, PolynomialFeatures, PowerTransformer\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 (\u043c\u0435\u0442\u043e\u043a, \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u0432)\nfrom sklearn.preprocessing import LabelBinarizer, LabelEncoder, MultiLabelBinarizer","8324de21":"## \u0412\u044b\u0431\u043e\u0440 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn.feature_selection import SelectKBest,RFE,SelectFromModel,SelectPercentile,VarianceThreshold\nfrom sklearn.feature_selection import chi2,f_classif,f_regression","03c8eb5f":"## \u041c\u043e\u0434\u0435\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV, SGDClassifier, Perceptron\nfrom sklearn.neighbors import KNeighborsClassifier, NearestCentroid, RadiusNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import StackingClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import BaggingClassifier\n# \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingClassifier","35697ffa":"## \u041c\u043e\u0434\u0435\u043b\u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import SGDRegressor, Lasso, Ridge, BayesianRidge, ElasticNet, HuberRegressor, Lars\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.ensemble import VotingRegressor\nfrom sklearn.ensemble import BaggingRegressor\n# \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingRegressor","4e2a3eb8":"## \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\n# \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\nfrom sklearn.metrics import f1_score, precision_score, recall_score, accuracy_score, log_loss, roc_auc_score\n# \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\nfrom sklearn.metrics import max_error, mean_absolute_error, mean_squared_error, mean_squared_log_error, r2_score\n# \u0441\u0432\u043e\u0434\u043d\u044b\u0435 \u043e\u0442\u0447\u0435\u0442\u044b \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\nfrom sklearn.metrics import classification_report, confusion_matrix\n# \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043a\u0440\u0438\u0432\u044b\u0445 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn.metrics import plot_confusion_matrix, plot_precision_recall_curve, plot_roc_curve\n","2a66e1ae":"## \u041c\u0435\u0442\u043e\u0434\u044b \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n# \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 https:\/\/scikit-learn.org\/stable\/auto_examples\/cluster\/plot_cluster_comparison.html#sphx-glr-auto-examples-cluster-plot-cluster-comparison-py\nfrom sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN, MiniBatchKMeans\nfrom sklearn.cluster import Birch, AffinityPropagation, FeatureAgglomeration, MeanShift, OPTICS\nfrom sklearn.cluster import SpectralBiclustering, SpectralClustering, SpectralCoclustering","1747e903":"## \u0414\u0435\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\nfrom sklearn.decomposition import PCA, NMF, SparsePCA, IncrementalPCA, KernelPCA, MiniBatchSparsePCA\nfrom sklearn.decomposition import TruncatedSVD, LatentDirichletAllocation\nfrom sklearn.decomposition import MiniBatchDictionaryLearning, FactorAnalysis, FastICA, DictionaryLearning, SparseCoder\nfrom sklearn.manifold import TSNE, MDS, SpectralEmbedding","a0501fcb":"## \u041c\u0435\u0442\u043e\u0434\u044b \u0432\u044b\u0431\u043e\u0440\u0430 \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0432\u044b\u0431\u043e\u0440\u0430 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import learning_curve","b7259423":"breast_cancer = ds.load_breast_cancer(return_X_y=False ,as_frame=True)\ndf = breast_cancer.data\ndf['target'] = breast_cancer.target\ndf.sample(3)","d738e4f5":"print(breast_cancer.DESCR)","734375c0":"breast_cancer.feature_names","6f439669":"X, y = df.drop('target', axis=1), df['target']","fcce4bfb":"tsne = TSNE(n_components=2).fit_transform(X)\npca = PCA(n_components=2).fit_transform(X)\nmnf = NMF(n_components=2).fit_transform(X)\nmds = MDS(n_components=2).fit_transform(X)\nspectr = SpectralEmbedding(n_components=2).fit_transform(X)\n\ncluster_colors = {0: 'black', 1: 'red', 2: 'green', 3: 'blue',}#  3: 'pink', 4: 'grey', 5: 'yellow', 6: 'orange', 7: 'brown',\n                  #8: 'silver', 9: 'lime', 10:'navy', 11:'salmon', 12:'cyan', 13:'tan', 14:'olive'}\ncluster_names = {0:'0',1:'1',2:'2',2:'3',4:'4'}\n\ndef make_pic(vectors, df, name_vectors, target='target'):\n    x, y = vectors[:,0 ], vectors[:,1]\n    plt.scatter(x, y,\n                color=df[target].map(cluster_colors), marker='o')\n    plt.title(name_vectors)\n    plt.grid(True, linestyle='-', color='0.75')\n    plt.show()\n    \nfor i, vec in zip([tsne, pca, mnf, mds, spectr], ['TSNE', 'PCA', 'NMF', 'MDS', 'SpectralEmbedding']):\n    make_pic(i, df, vec) ","d57ab7f7":"def clf_validation(clf, X, y, val_mode='cv', cv=5, is_gs=False):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n    if is_gs:\n        pass\n    if val_mode=='cv':\n        scores = cross_val_score(clf, X, y, cv=cv, n_jobs=os.cpu_count())\n        print(np.mean(scores))\n    elif val_mode=='rep':\n        clf.fit(X_train,y_train)\n        predict = clf.predict(X_test)\n        print(roc_auc_score(y_test, predict))\n        print(classification_report(y_test, predict))\n    else:\n        clf.fit(X_train,y_train)\n        plot_confusion_matrix(clf, X_test, y_test)\n        plot_roc_curve(clf, X_test, y_test)","5a2e10bd":"start = time.time()\nlogreg = LogisticRegression(n_jobs=os.cpu_count())\nclf_validation(logreg, X, y)\n\nprint(\"All Process took: {:.2f} seconds\".format(time.time() - start))","eec87c9c":"start = time.time()\nlogreg = LogisticRegression(n_jobs=os.cpu_count())\nclf_validation(logreg, X, y, 'rep')\n\nprint(\"All Process took: {:.2f} seconds\".format(time.time() - start))","2f826085":"start = time.time()\nlogreg = LogisticRegression(n_jobs=os.cpu_count())\nclf_validation(logreg, X, y, 'pic')\n\nprint(\"All Process took: {:.2f} seconds\".format(time.time() - start))","96ae7900":"logreg = LogisticRegression(n_jobs=-1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\nlogreg.fit(X_train, y_train)","694b87ef":"pred = logreg.predict_proba(X_test)[:,1]\npred = [0 if p <= 0.6 else 1 for p in pred]\nprint(classification_report(y_test, pred))","fccfcca5":"start = time.time()\nparameters = {'C':[0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 100.0, 1000.0]}\nlogreg = LogisticRegression(n_jobs=os.cpu_count())\nclf = GridSearchCV(logreg, parameters, cv=5)\n\nclf_validation(clf, X, y, 'rep')\n\nprint(\"All Process took: {:.2f} seconds\".format(time.time() - start))","39e149bb":"start = time.time()\nparameters = {'C':[0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 100.0, 1000.0]}\nlogreg = LogisticRegression(n_jobs=os.cpu_count())\nclf = GridSearchCV(logreg, parameters, cv=5)\n\nclf_validation(clf, X, y, 'cv')\n\nprint(\"All Process took: {:.2f} seconds\".format(time.time() - start))","40e47e3e":"start = time.time()\nparameters = {'C':[0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 100.0, 1000.0]}\nlogreg = LogisticRegression(n_jobs=os.cpu_count())\nclf = GridSearchCV(logreg, parameters, cv=5)\n\nclf_validation(clf, X, y, 'pic')\n\nprint(\"All Process took: {:.2f} seconds\".format(time.time() - start))","11506942":"start = time.time()\nparameters = {'C':[0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 100.0, 1000.0]}\nlogreg = LogisticRegression(n_jobs=os.cpu_count())\nclf = GridSearchCV(logreg, parameters, cv=5)\n\nclf_validation(clf, X, y, 'pic')\n\nprint(\"All Process took: {:.2f} seconds\".format(time.time() - start))","54445a48":"start = time.time()\nparameters = {'C':[0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 100.0, 1000.0]}\nlogreg = LogisticRegression(n_jobs=os.cpu_count())\nclf = GridSearchCV(logreg, parameters, cv=5)\nclf.fit(X_train, y_train)\n\n\nprint(\"All Process took: {:.2f} seconds\".format(time.time() - start))","925fc17e":"logreg = LogisticRegression(**clf.best_params_, n_jobs=os.cpu_count())\nlogreg.fit(X, y)","869e2531":"# \u0437\u0430\u043f\u0438\u0441\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0434\u0438\u0441\u043a \u0438 \u0447\u0442\u0435\u043d\u0438\u0435 \u0435\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\nimport pickle\nwith open('logreg.pcl', 'wb') as file:\n    pickle.dump(clf, file)\n    \nwith open('logreg.pcl', 'rb') as file:\n    clf = pickle.load(file)\n","b3d4855f":"# \u0427\u0443\u0436\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0438 \u043f\u0440\u0438\u043a\u0440\u0443\u0442\u0438\u0442\u044c \u043a \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f\u043c\ndef plot_learning_curve(degree=2, alpha=0.01):\n    train_sizes = np.linspace(0.05, 1, 20)\n    logit_pipe = Pipeline([('scaler', StandardScaler()), ('poly', PolynomialFeatures(degree=degree)), \n                           ('sgd_logit', SGDClassifier(n_jobs=-1, random_state=17, alpha=alpha))])\n    N_train, val_train, val_test = learning_curve(logit_pipe,\n                                                  X, y, train_sizes=train_sizes, cv=5,\n                                                  scoring='roc_auc')\n    plot_with_err(N_train, val_train, label='training scores')\n    plot_with_err(N_train, val_test, label='validation scores')\n    plt.xlabel('Training Set Size'); plt.ylabel('AUC')\n    plt.legend()\n\ndef plot_boundary(clf, X, y, plot_title):\n    xx, yy = np.meshgrid(np.linspace(-3, 3, 50),\n                     np.linspace(-3, 3, 50))\n    clf.fit(X, y)\n    # plot the decision function for each datapoint on the grid\n    Z = clf.predict_proba(np.vstack((xx.ravel(), yy.ravel())).T)[:, 1]\n    Z = Z.reshape(xx.shape)\n\n    image = plt.imshow(Z, interpolation='nearest',\n                           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n                           aspect='auto', origin='lower', cmap=plt.cm.PuOr_r)\n    contours = plt.contour(xx, yy, Z, levels=[0], linewidths=2,\n                               linetypes='--')\n    plt.scatter(X[:, 0], X[:, 1], s=30, c=y, cmap=plt.cm.Paired)\n    plt.xticks(())\n    plt.yticks(())\n    plt.xlabel(r'$x_1$')\n    plt.ylabel(r'$x_2$')\n    plt.axis([-3, 3, -3, 3])\n    plt.colorbar(image)\n    plt.title(plot_title, fontsize=12);\n    \ndef visualize_coefficients(classifier, feature_names, n_top_features=25):\n    # get coefficients with large absolute values \n    coef = classifier.coef_.ravel()\n    positive_coefficients = np.argsort(coef)[-n_top_features:]\n    negative_coefficients = np.argsort(coef)[:n_top_features]\n    interesting_coefficients = np.hstack([negative_coefficients, positive_coefficients])\n    # plot them\n    plt.figure(figsize=(15, 5))\n    colors = [\"red\" if c < 0 else \"blue\" for c in coef[interesting_coefficients]]\n    plt.bar(np.arange(2 * n_top_features), coef[interesting_coefficients], color=colors)\n    feature_names = np.array(feature_names)\n    plt.xticks(np.arange(1, 1 + 2 * n_top_features), feature_names[interesting_coefficients], rotation=60, ha=\"right\");","2062bff9":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","a14fefbf":"### \u0411\u0438\u0431\u0438\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","a4e20677":"\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b","231d993e":"![image.png](attachment:image.png)","bb7aabeb":"## \u041f\u0435\u0440\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440","4c12c686":"### \u041e\u0431\u0449\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","6937d181":"![image.png](attachment:image.png)","549739e9":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e \u0431\u0435\u0437 \u043a\u0430\u043a\u0438\u0445 \u043b\u0438\u0431\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0434\u0430\u043d\u043d\u044b\u0445","eede729b":"## \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","b6e85af8":"** penalty {\u2018l1\u2019, \u2018l2\u2019, \u2018elasticnet\u2019, \u2018none\u2019}, default=\u2019l2\u2019 - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u043e\u0440\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u0432 \u0448\u0442\u0440\u0430\u0444\u043d\u044b\u0445 \u0441\u0430\u043d\u043a\u0446\u0438\u044f\u0445. \u0420\u0435\u0448\u0430\u0442\u0435\u043b\u0438 \u00abnewton-cg\u00bb, \u00absag\u00bb \u0438 \u00ablbfgs\u00bb \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0448\u0442\u0440\u0430\u0444\u044b l2. \u00abelasticnet\u00bb \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0448\u0430\u0442\u0435\u043b\u0435\u043c \u00absaga\u00bb. \u0415\u0441\u043b\u0438 \u00ab\u043d\u0435\u0442\u00bb (\u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043b\u0438\u0431\u043b\u0438\u043d\u0435\u0439\u043d\u044b\u043c \u0440\u0435\u0448\u0430\u0442\u0435\u043b\u0435\u043c), \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f.\n\n** C: float, default=1.0 - \u041e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0441\u0438\u043b\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438; \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e. \u041a\u0430\u043a \u0438 \u0432 \u043c\u0430\u0448\u0438\u043d\u0430\u0445 \u043e\u043f\u043e\u0440\u043d\u044b\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432, \u043c\u0435\u043d\u044c\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442 \u0431\u043e\u043b\u0435\u0435 \u0441\u0438\u043b\u044c\u043d\u0443\u044e \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044e.\n\n** solver{\u2018newton-cg\u2019, \u2018lbfgs\u2019, \u2018liblinear\u2019, \u2018sag\u2019, \u2018saga\u2019}, default=\u2019lbfgs\u2019 - \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0437\u0430\u0434\u0430\u0447\u0435 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n- \u0414\u043b\u044f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u00abliblinear\u00bb - \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0432\u044b\u0431\u043e\u0440, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a \u00absag\u00bb \u0438 \u00absaga\u00bb \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445.\n- \u0414\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u043c\u0443\u043b\u044c\u0442\u0438\u043a\u043b\u0430\u0441\u0441\u0430 \u0442\u043e\u043b\u044c\u043a\u043e 'newton-cg', 'sag', 'saga' \u0438 'lbfgs' \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u043c\u043d\u043e\u0433\u043e\u0447\u043b\u0435\u043d\u043d\u0443\u044e \u043f\u043e\u0442\u0435\u0440\u044e; \u00abLiblinear\u00bb \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d \u0441\u0445\u0435\u043c\u0430\u043c\u0438 \u00ab\u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0442\u0438\u0432 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445\u00bb.\n- \"newton-cg\", \"lbfgs\", \"sag\" \u0438 \"saga\" \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 L2 \u0438\u043b\u0438 \u0431\u0435\u0437 \u0448\u0442\u0440\u0430\u0444\u0430\n- 'liblinear' \u0438 'saga' \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0448\u0442\u0440\u0430\u0444 L1\n- \u00absaga\u00bb \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0448\u0442\u0440\u0430\u0444 \u00abelasticnet\u00bb\n- \u00abliblinear\u00bb \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0448\u0442\u0440\u0430\u0444\u043e\u0432 = \u00ab\u043d\u0435\u0442\u00bb\n- \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0431\u044b\u0441\u0442\u0440\u0430\u044f \u0441\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u00absag\u00bb \u0438 \u00absaga\u00bb \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u043e\u043c. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043a\u0435\u0439\u043b\u0435\u0440\u0430 \u0438\u0437 sklearn.preprocessing.\n","221d27f6":"![image.png](attachment:image.png)","01da5790":"#### \u0417\u0430\u0434\u0430\u0447\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \"\u0420\u0430\u043a \u043c\u043e\u043b\u043e\u0447\u043d\u043e\u0439 \u0436\u0435\u043b\u0435\u0437\u044b\"","c87b9487":"# \u0428\u0430\u0431\u043b\u043e\u043d \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0447 DS","023cc55d":"#### \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f"}}