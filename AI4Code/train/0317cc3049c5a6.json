{"cell_type":{"4d7caf90":"code","6822fd50":"code","555225b2":"code","2f06c4c5":"code","2d5e9d51":"code","f4e4cc51":"code","fba15e86":"code","a76c5f00":"code","8f8e7c93":"code","d534db3b":"code","46990558":"code","991fd602":"code","1e9f6b8c":"code","ed87b75e":"code","30cb9df7":"code","6a2fbd57":"code","b1c0dcf7":"code","b9f6b550":"code","a0354e03":"code","46aea18a":"code","d22c5054":"code","67760ba7":"code","4461877b":"code","247de951":"code","9932dab9":"code","b68d8f14":"code","e7f9e6a2":"code","e177c2a9":"code","69957da5":"code","ef5da26c":"code","448d7cd3":"code","739d66a3":"code","bc48e23e":"code","fda17b91":"code","a956f640":"code","d4974f81":"code","6fde4788":"code","f7595ae6":"code","2e8708f8":"markdown","43574941":"markdown","0e5ffbb2":"markdown","cb32a86f":"markdown","41dac01a":"markdown","3659f0cd":"markdown","b30fc0ec":"markdown","8264cfb1":"markdown","ac0e1c2b":"markdown","efc3aa2f":"markdown","0bd6004a":"markdown"},"source":{"4d7caf90":"import os\nimport random\nfrom tqdm import tqdm","6822fd50":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport cv2\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import load_img,ImageDataGenerator","555225b2":"from tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing import image\n\nfrom sklearn.preprocessing import LabelEncoder","2f06c4c5":"from tensorflow.keras.applications import EfficientNetB0\nfrom keras.applications import ResNet152V2\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Flatten,Dense,Conv2D,MaxPooling2D,Dropout,GlobalAveragePooling2D\n\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import ModelCheckpoint,EarlyStopping,ReduceLROnPlateau","2d5e9d51":"os.listdir(\"..\/input\/brain-tumor-classification-mri\/Training\")","f4e4cc51":"root = \"..\/input\/brain-tumor-classification-mri\/\"","fba15e86":"classes_ = os.listdir(\"..\/input\/brain-tumor-classification-mri\/Training\")","a76c5f00":"train_dir = root+\"Training\/\"\ntest_dir = root+ \"Testing\/\"","8f8e7c93":"files_path_dict = {}\nfor class_ in os.listdir(train_dir):\n    files_path_dict[class_] = list(map(lambda x: train_dir+class_+'\/'+x, os.listdir(train_dir+class_)))","d534db3b":"plt.figure(figsize=(15,15))\n\nind=0\nfor c in classes_:\n    random.shuffle(files_path_dict[c])\n    path_lis = files_path_dict[c][:5]\n    \n    for i in range(1, 5):\n        ind+=1\n        plt.subplot(4,4,ind)\n        \n        plt.imshow(load_img(path_lis[i]))\n        plt.title(c)","46990558":"#Feeding Training Data to X_train and y_train\n\ntrain_glioma = train_dir + \"glioma_tumor\"\ntrain_meningioma = train_dir + \"meningioma_tumor\"\ntrain_no_tumour = train_dir + \"no_tumor\"\ntrain_pituitary = train_dir + \"pituitary_tumor\"\n\nX_train = []\ny_train = []\n\nfor i in tqdm(os.listdir(train_glioma)):\n    path = os.path.join(train_glioma,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_train.append(img)\n    y_train.append('Glioma')\n    \nfor i in tqdm(os.listdir(train_meningioma)):\n    path = os.path.join(train_meningioma,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_train.append(img)\n    y_train.append('Meningioma')\n    \nfor i in tqdm(os.listdir(train_no_tumour)):\n    path = os.path.join(train_no_tumour,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_train.append(img)\n    y_train.append('No_Tumour')   \n    \nfor i in tqdm(os.listdir(train_pituitary)):\n    path = os.path.join(train_pituitary,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_train.append(img)\n    y_train.append('Pituitary')    ","991fd602":"#Feeding Testing Data to X_train and y_train\n\ntest_glioma = test_dir + \"glioma_tumor\"\ntest_meningioma = test_dir + \"meningioma_tumor\"\ntest_no_tumour = test_dir + \"no_tumor\"\ntest_pituitary = test_dir + \"pituitary_tumor\"\n\nX_test = []\ny_test = []\n\nfor i in tqdm(os.listdir(test_glioma)):\n    path = os.path.join(test_glioma,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_test.append(img)\n    y_test.append('Glioma')\n    \nfor i in tqdm(os.listdir(test_meningioma)):\n    path = os.path.join(test_meningioma,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_test.append(img)\n    y_test.append('Meningioma')\n    \n\nfor i in tqdm(os.listdir(test_no_tumour)):\n    path = os.path.join(test_no_tumour,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_test.append(img)\n    y_test.append('No_Tumour') \n    \nfor i in tqdm(os.listdir(test_pituitary)):\n    path = os.path.join(test_pituitary,i)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    X_test.append(img)\n    y_test.append('Pituitary')    ","1e9f6b8c":"X_train = np.array(X_train)\ny_train = np.array(y_train)\n\nprint(\"Image shape:\", X_train.shape[1:])\nprint(\"Number of Training samples:\", X_train.shape[0])","ed87b75e":"X_test = np.array(X_test)\ny_test = np.array(y_test)\n\nprint(\"Image shape:\", X_test.shape[1:])\nprint(\"Number of Testing samples:\", X_test.shape[0])","30cb9df7":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(9,5))\nsns.countplot(y_train)\nplt.title(\"Train class balance\")\nplt.show()","6a2fbd57":"plt.figure(figsize=(9,5))\nsns.countplot(y_test)\nplt.title('Test class balance')\nplt.show()","b1c0dcf7":"LE = LabelEncoder() # initialize encoder\ny_train = LE.fit_transform(y_train)\ny_test = LE.fit_transform(y_test)","b9f6b550":"print(y_train)\nprint(y_train.shape)\nprint(\"Unique Counts:\")\nunique,counts = np.unique(y_train,return_counts=True)\nprint(unique,counts)","a0354e03":"print(y_test)\nprint(y_test.shape)\nprint(\"Unique Counts:\")\nunique1,counts1 = np.unique(y_test,return_counts=True)\nprint(unique1,counts1)","46aea18a":"y_train = to_categorical(y_train)#num_classes = 4\ny_train.shape","d22c5054":"y_test = to_categorical(y_test)#num_classes = 4\ny_test.shape","67760ba7":"img_size=224\ntrain_datagen = ImageDataGenerator(rotation_range=30,height_shift_range=0.2,\n                                  zoom_range = 0.3,horizontal_flip=True)#rescale=(1.\/255),\ntest_datagen = ImageDataGenerator()#rescale=(1.\/255)\n\ntrain_gen = train_datagen.flow_from_directory(directory = train_dir,target_size=(img_size,img_size),class_mode =\"categorical\",\n                                              batch_size=32)\ntest_gen = test_datagen.flow_from_directory(directory = test_dir,target_size=(img_size,img_size),class_mode =\"categorical\",\n                                              batch_size=32)","4461877b":"sample_x,sample_y = next(train_gen)\nplt.figure(figsize=(12,9))\nfor i in range(6):\n    plt.subplot(2,3,i+1)\n    sample = image.array_to_img(sample_x[i])\n    plt.xlabel(np.argmax(sample_y[i]))\n    plt.imshow(sample)\nplt.show()","247de951":"effnet = EfficientNetB0(weights = \"imagenet\",include_top=False,input_shape=(img_size,img_size,3))","9932dab9":"# Adding global pooling\n\nmodel = effnet.output\nmodel = GlobalAveragePooling2D()(model)\nmodel = Dropout(0.5)(model)\nmodel = Dense(4,activation = \"softmax\")(model)\n\nmodel = Model(inputs = effnet.input,outputs = model)\n\nmodel.summary()","b68d8f14":"# compiling model\n\nmodel.compile(optimizer=Adam(lr=0.0001),loss=\"categorical_crossentropy\",metrics = [\"accuracy\"])\n\ncheckpoint = ModelCheckpoint(\"effnet.h5\",monitor=\"val_accuracy\",save_best_only=True,mode=\"auto\",verbose=1)\nearlystop = EarlyStopping(monitor=\"val_accuracy\",patience=5,mode=\"auto\",verbose=1)\nreduce_lr = ReduceLROnPlateau(monitor = 'val_accuracy', factor = 0.3, \n                              patience = 2, min_delta = 0.001, \n                              mode = 'auto', verbose = 1)","e7f9e6a2":"history = model.fit(X_train,y_train,epochs=25,validation_data = (X_test,y_test),verbose=1,\n                              callbacks=[checkpoint,reduce_lr,earlystop])","e177c2a9":"val_loss,val_acc = model.evaluate(X_test,y_test)\nprint(f\"Validation Loss: {val_loss}\")\nprint(f\"Validation Accuracy: {val_acc}\")","69957da5":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\nepochs = range(1,19)\nplt.subplot(1,2,1)\nplt.plot(epochs,history.history[\"accuracy\"],'go-')\nplt.plot(epochs,history.history[\"val_accuracy\"],'ro-')\nplt.title(\"Model Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend(['Train','Val'],loc = \"upper left\")\n\nplt.subplot(1,2,2)\nplt.plot(epochs,history.history[\"loss\"],'go-')\nplt.plot(epochs,history.history[\"val_loss\"],'ro-')\nplt.title(\"Model Loss\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend(['Train','Val'],loc = \"upper left\")\n\nplt.show()","ef5da26c":"y_pred= model.predict(X_test)\ny_pred = np.argmax(y_pred,axis=1)\ny_pred[:15]","448d7cd3":"unique,counts = np.unique(y_pred,return_counts=True)\nprint(unique,counts)","739d66a3":"y_test_new = np.argmax(y_test,axis=1)","bc48e23e":"from sklearn.metrics import classification_report,confusion_matrix,f1_score,accuracy_score, recall_score,roc_auc_score,precision_score\n\n\nclf_report = classification_report(y_test_new,y_pred)\nprint(clf_report)\nprint('Model accuracy score  : {0:0.4f}'. format(accuracy_score(y_test_new, y_pred)))\nprint('Model F1 score  : {0:0.4f}'. format(f1_score(y_test_new, y_pred, average='weighted')))\nprint('Model Recall score  : {0:0.4f}'. format(recall_score(y_test_new, y_pred,average='weighted')))\n#print('Model AUC score : {0:0.4f}'. format(roc_auc_score(y_test_new, y_pred,multi_class='ovr')))\nprint('Model Precision  : {0:0.4f}'. format(precision_score(y_test_new, y_pred,average='weighted')))\n","fda17b91":"from sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\n\ncm = confusion_matrix(y_test_new,y_pred)\nplot_confusion_matrix(conf_mat = cm,figsize=(8,7),class_names = ['Glioma',\n                                                                 'Meningioma','No_Tumour','Pituitary'],\n                      show_normed=True);","a956f640":"plt.figure(figsize=(12,9))\nfor i in range(10):\n    pred_res = \"Correctly predicted!\"\n    sample_idx = random.choice(range(len(X_test)))\n    plt.subplot(2,5,i+1)\n    plt.imshow(X_test[sample_idx])\n    if y_pred[sample_idx] != y_test_new[sample_idx]:\n        pred_res = \"Mispredicted!\"\n    plt.xlabel(f\"Actual: {y_test_new[sample_idx]}\\n Predicted: {y_pred[sample_idx]}\\n {pred_res}\")\n    \nplt.tight_layout()\nplt.show()","d4974f81":"tf.keras.utils.plot_model","6fde4788":"\n\ntf.keras.utils.plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)\n\n","f7595ae6":"\n\ntf.keras.utils.plot_model(\n    model,\n    to_file=\"model.png\",\n    show_shapes=False,\n   \n    show_layer_names=True,\n    rankdir=\"TB\",\n    expand_nested=False,\n    \n)\n\n","2e8708f8":" ## Data preprocessing","43574941":"### Confusion Matrix","0e5ffbb2":"## Training","cb32a86f":"### Encoding labels","41dac01a":"## Testing","3659f0cd":"### Checking class balance","b30fc0ec":"## Model architecture","8264cfb1":"### Classification Report","ac0e1c2b":"## Model Evaluation","efc3aa2f":"## Data augmentation","0bd6004a":"### categorical encoding"}}