{"cell_type":{"9127cdb6":"code","c6f9d419":"code","0b3aeea3":"code","db3389d4":"code","2c3913ce":"code","75c41b7f":"code","73f06cb1":"code","c92b4f87":"code","26d76042":"code","de862f90":"code","dc5f5b5c":"code","dfc91a04":"markdown","e12ad3c3":"markdown","c8a1f4b9":"markdown","bb8b88da":"markdown","2b2d0bb3":"markdown","62e7c0d6":"markdown","762a23db":"markdown","afe208c2":"markdown","24814147":"markdown"},"source":{"9127cdb6":"# Code you have previously used to load data\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Path of the file to read\niowa_file_path = '..\/input\/home-data-for-ml-course\/train.csv'\n\nhome_data = pd.read_csv(iowa_file_path)\ny = home_data.SalePrice\nfeature_columns = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = home_data[feature_columns]\n\n# Specify Model\niowa_model = DecisionTreeRegressor()\n# Fit Model\niowa_model.fit(X, y)\n\nprint(\"First in-sample predictions:\", iowa_model.predict(X.head()))\nprint(\"Actual target values for those homes:\", y.head().tolist())\n\n# Set up code checking\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.machine_learning.ex4 import *\nprint(\"Setup Complete\")","c6f9d419":"iowa_model.fit(X, y)","0b3aeea3":"# Import the train_test_split function and uncomment\nfrom sklearn.model_selection import train_test_split\n\n# fill in and uncomment\ntrain_X,test_X, train_y, test_y = train_test_split(X,y,random_state = 1)\nmy_model = DecisionTreeRegressor()\n# train_X, val_X, train_y, val_y = ____\n#print(train_X)\nstep_1.check()\nfrom sklearn.tree import DecisionTreeRegressor","db3389d4":"# The lines below will show you a hint or the solution.\n# step_1.hint() \nstep_1.solution()\n","2c3913ce":"# You imported DecisionTreeRegressor in your last exercise\n# and that code has been copied to the setup code above. So, no need to\n# import it again\n\n# Specify the model\n#iowa_model = DecisionTreeRegressor(random_state=1)\n\nmy_model.fit(test_X,test_y)\n# Fit iowa_model with the training data.\n#iowa_model = DecisionTreeRegressor(random_state=1)\n#iowa_model.fit(train_X, train_y)\n#step_2.check()","75c41b7f":"step_2.hint()\n#step_2.solution()","73f06cb1":"# Predict with all validation observations\nfrom sklearn.metrics import mean_absolute_error\n#val_predictions = my_model.predict(test_X)\nval_predictions = iowa_model.predict(test_X)\nval_predictions\nstep_3.check()","c92b4f87":"# step_3.hint()\n step_3.solution()","26d76042":"# print the top few validation predictions\nprint(test_X,test_y)\n# print the top few actual prices from validation data\nprint(train_X,train_y)","de862f90":"from sklearn.metrics import mean_absolute_error\nval_mae = mean_absolute_error(val_predictions, val_y)\n\n# uncomment following line to see the validation_mae\n#print(val_mae)\nprint (val_mae)\nstep_4.check()","dc5f5b5c":"# step_4.hint()\n step_4.solution()","dfc91a04":"## Recap\nYou've built a model. In this exercise you will test how good your model is.\n\nRun the cell below to set up your coding environment where the previous exercise left off.","e12ad3c3":"## Step 2: Specify and Fit the Model\n\nCreate a `DecisionTreeRegressor` model and fit it to the relevant data.\nSet `random_state` to 1 again when creating the model.","c8a1f4b9":"# Exercises\n\n## Step 1: Split Your Data\nUse the `train_test_split` function to split up your data.\n\nGive it the argument `random_state=1` so the `check` functions know what to expect when verifying your code.\n\nRecall, your features are loaded in the DataFrame **X** and your target is loaded in **y**.\n","bb8b88da":"## Step 3: Make Predictions with Validation data\n","2b2d0bb3":"---\n**[Machine Learning Home Page](https:\/\/www.kaggle.com\/learn\/intro-to-machine-learning)**\n\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum) to chat with other Learners.*","62e7c0d6":"What do you notice that is different from what you saw with in-sample predictions (which are printed after the top code cell in this page).\n\nDo you remember why validation predictions differ from in-sample (or training) predictions? This is an important idea from the last lesson.\n\n## Step 4: Calculate the Mean Absolute Error in Validation Data\n","762a23db":"**[Machine Learning Home Page](https:\/\/www.kaggle.com\/learn\/intro-to-machine-learning)**\n\n---\n","afe208c2":"Inspect your predictions and actual values from validation data.","24814147":"Is that MAE good?  There isn't a general rule for what values are good that applies across applications. But you'll see how to use (and improve) this number in the next step.\n\n# Keep Going\n\nYou are ready for **[Underfitting and Overfitting](https:\/\/www.kaggle.com\/dansbecker\/underfitting-and-overfitting).**\n"}}