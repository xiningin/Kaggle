{"cell_type":{"c188e84f":"code","d65bf396":"code","63e9a450":"code","abbef893":"code","ea206d22":"code","70b8cd52":"code","640d66f0":"code","f8e6a4c4":"code","bf5b2a88":"markdown","c819e731":"markdown"},"source":{"c188e84f":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","d65bf396":"from fastai.vision import *\nfrom fastai.callbacks.hooks import *\nfrom fastai.utils.mem import *","63e9a450":"v2_model_path = Path('\/kaggle\/input\/brain-segmentation-v2-models')\ndata_path = Path('\/kaggle\/input\/lgg-mri-segmentation\/kaggle_3m\/')","abbef893":"# WARNING: If you used any customized classes when creating your learner, \n# you must first define these classes first before executing load_learner.\nclass SegmentationLabelListWithDiv(SegmentationLabelList): # TODO: rename\n    def open(self, fn): return open_mask(fn, div=True)\nclass SegmentationItemListWithDiv(SegmentationItemList):\n    _label_cls = SegmentationLabelListWithDiv","ea206d22":"learn = load_learner(v2_model_path, 'stage-2-big-export.pkl')","70b8cd52":"# inference without target\ndata = DataBunch.load_empty(v2_model_path, 'big-databunch-export.pkl')\nimage_list = (ImageList.from_folder(data_path)\n                .filter_by_func(lambda x: not x.name.endswith('_mask.tif')))\ndata.add_test(image_list, tfms=None, tfm_y=False)\ndata_items = data.test_ds","640d66f0":"# inference with target\nsrc = (SegmentationItemListWithDiv.from_folder(data_path, recurse=True)\n       .filter_by_func(lambda x: not x.name.endswith('_mask.tif'))\n       .split_by_rand_pct(0.2)\n       .label_from_func(lambda x: x.parents[0] \/ (x.stem + '_mask' + x.suffix), classes=['n', 'y']))\ndata = (src # no transformations\n        .databunch(bs=32)\n        .normalize(imagenet_stats))\ndata_items = data.valid_ds","f8e6a4c4":"# pick an image at random - so you can re-run this cell to see different images\ndata_item = random.choice(data_items)\n# or you could use a specific image\n# data_item = data_items[0]\nsize = 5\nimg = data_item[0]\nimg.show(figsize=(size, size), title='input image')\ntarget = data_item[1]\nif not isinstance(target, EmptyLabel):\n    print('inference with target')\n    target.show(figsize=(size, size), title='target mask')\nelse:\n    print('inference without target')\npred = learn.predict(img)\npred[0].show(figsize=(size, size), title='predicted mask')\nif not isinstance(target, EmptyLabel):\n    img.show(figsize=(size, size), y=target, title='input with target mask')\nimg.show(figsize=(size, size), y=pred[0], title='input with predicted mask')","bf5b2a88":"The cell below will make a prediction (as we're doing segmentation, this means create a mask).\n\nRun one of the cells above to either do;\n- inference without target or\n- inference with target","c819e731":"# Use a pre-trained model to create segmentation masks\n\nThis notebook uses the models created by the v2 commit of https:\/\/www.kaggle.com\/peter88b\/brain-segmentation-fastai;\nhttps:\/\/www.kaggle.com\/peter88b\/brain-segmentation-fastai\/output?scriptVersionId=24252708"}}