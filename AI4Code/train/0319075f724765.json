{"cell_type":{"ba7300a0":"code","2e4e8d12":"code","155c0c82":"code","013d80c4":"code","180876e3":"code","42954dbc":"code","e0681d93":"code","99748152":"code","e62b050a":"code","5a933124":"code","62009278":"code","919b6fd6":"code","1f179ba3":"code","361e41a1":"code","3da1e5e4":"code","57ba060b":"code","b4d53cbf":"code","7a1ed69c":"code","e223a3db":"code","c277db49":"code","4a8897f5":"code","b2c0adc2":"code","4e275bb7":"code","f4efde36":"code","4d7e1e25":"code","d9a43bf1":"code","fe1a26cf":"code","5db2600b":"code","cf943627":"code","9a67580c":"code","389c09c2":"code","c0cdb10d":"code","4adc7146":"code","0a1926c7":"code","d44c1624":"code","8f06bf7d":"code","954b33a9":"code","630baf3e":"markdown","a4ecea32":"markdown","af473328":"markdown","e0307f11":"markdown","048e3354":"markdown","49155f60":"markdown","efdd35eb":"markdown","62c25462":"markdown","4c7f812f":"markdown","cf278d8c":"markdown","de32dfa9":"markdown","a2f471c4":"markdown","ec55d15e":"markdown","9fac67a3":"markdown","28ea4082":"markdown","63e399ac":"markdown","abb45573":"markdown","b3860f63":"markdown","5012a84b":"markdown","e99b3bea":"markdown","fc451c4a":"markdown","0d16665d":"markdown","fde57eaf":"markdown","73f830e1":"markdown","1029333c":"markdown","9bd46f20":"markdown","d31460b7":"markdown","ed1c950e":"markdown","55068049":"markdown","4024dc81":"markdown","0cd2cb58":"markdown","55bbfdfe":"markdown","bb7ece39":"markdown","e89bc473":"markdown","6b361f68":"markdown","f2d61478":"markdown","22edf3cf":"markdown","0c64242c":"markdown","20bcc270":"markdown","1da6c61e":"markdown","bb119599":"markdown","aaad5c11":"markdown","3376e617":"markdown","c8eb02e9":"markdown","3135ff1a":"markdown"},"source":{"ba7300a0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import Imputer\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.utils import shuffle\nfrom sklearn.ensemble import RandomForestClassifier\n\npd.set_option('display.max_columns', 100)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2e4e8d12":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","155c0c82":"train.head()","013d80c4":"train.tail()","180876e3":"train.shape","42954dbc":"train.drop_duplicates()\ntrain.shape","e0681d93":"test.shape","99748152":"train.info()","e62b050a":"data=[]\nfor f in train.columns:\n    # Defining the role\n    if f =='target':\n        role='target'\n    elif f == 'id':\n        role = 'id'\n    else:\n        role = 'input'\n        \n    # Defining the level\n    if 'bin' in f or f == 'target':\n        level = 'binary'\n    elif 'cat' in f or f == 'id':\n        level = 'nominal'\n    elif train[f].dtype == float:\n        level = 'interval'\n    elif train[f].dtype == int:\n        level = 'ordinal'\n    \n    # Initialize keep to True for all variables except for id\n    keep = True\n    if f == 'id':\n        keep = False\n    \n    # Defining the data type\n    dtype = train[f].dtype\n    \n    # Creating a Dict that contains all the metadata for the variable\n    f_dict = {\n        'varname': f,\n        'role': role,\n        'level': level,\n        'keep':keep,\n        'dtype':dtype\n    }\n    data.append(f_dict)\n    \nmeta = pd.DataFrame(data, columns=['varname', 'role', 'level', 'keep', 'dtype'])\nmeta.set_index('varname', inplace=True)","5a933124":"meta","62009278":"meta[(meta.level == 'nominal') & (meta.keep)].index","919b6fd6":"pd.DataFrame({'count':meta.groupby(['role', 'level'])['role'].size()}).reset_index()","1f179ba3":"v = meta[(meta.level == 'interval') & (meta.keep)].index\ntrain[v].describe()","361e41a1":"v = meta[(meta.level == 'ordinal') & (meta.keep)].index\ntrain[v].describe()","3da1e5e4":"v = meta[(meta.level=='binary') & (meta.keep)].index\ntrain[v].describe()","57ba060b":"desired_apriori=0.10\n\n# Get the indices per target value\nidx_0 = train[train.target==0].index\nidx_1 = train[train.target==1].index\n\n# Get original number of records per target value\nnb_0 = len(train.loc[idx_0])\nnb_1 = len(train.loc[idx_1])\n\n# Calculate the undersampling rate and resulting number of records with target=0\nundersampling_rate = ((1-desired_apriori)*nb_1)\/(nb_0*desired_apriori)\nundersampled_nb_0 = int(undersampling_rate*nb_0)\nprint('Rate to undersample records with target=0: {}'.format(undersampling_rate))\nprint('Number of records with target=0 after undersampling: {}'.format(undersampled_nb_0))\n\n# Randomly select records with target=0 to get at the desired a priori\nundersampled_idx = shuffle(idx_0, random_state=37, n_samples=undersampled_nb_0)\n\n# Construct list with remaining indices\nidx_list = list(undersampled_idx) + list(idx_1)\n\n# Return undersample data frame\ntrain = train.loc[idx_list].reset_index(drop=True)","b4d53cbf":"vars_with_missing = []\n\nfor f in train.columns:\n    missings = train[train[f] == -1][f].count()\n    if missings > 0:\n        vars_with_missing.append(f)\n        missings_perc = missings\/train.shape[0]\n        \n        print('Variable {} has {} records ({:.2%}) with missing values'.format(f, missings, missings_perc))\nprint('In total, there are {} variables with missing values'.format(len(vars_with_missing)))","7a1ed69c":"# Dropping the variables with too many missing values\nvars_to_drop = ['ps_car_03_cat', 'ps_car_05_cat']\ntrain.drop(vars_to_drop, inplace=True, axis=1)\nmeta.loc[(vars_to_drop), 'keep'] = False # Updating the meta","e223a3db":"# Imputing with the mean or mode\nmean_imp = Imputer(missing_values=-1, strategy='mean', axis=0)\nmode_imp = Imputer(missing_values=-1, strategy='most_frequent', axis=0)\ntrain['ps_reg_03'] = mean_imp.fit_transform(train[['ps_reg_03']]).ravel()\ntrain['ps_car_12'] = mean_imp.fit_transform(train[['ps_car_12']]).ravel()\ntrain['ps_car_13'] = mean_imp.fit_transform(train[['ps_car_14']]).ravel()\ntrain['ps_car_11'] = mode_imp.fit_transform(train[['ps_car_11']]).ravel()","c277db49":"v = meta[(meta.level=='nominal') & (meta.keep)].index\n\nfor f in v:\n    dist_values = train[f].value_counts().shape[0]\n    print('Variable {} has {} distinct values'.format(f, dist_values))","4a8897f5":"# Scrips by https:\/\/www.kaggle.com\/ogrellier\n# Code : https:\/\/www.kaggle.com\/ogrellier\/python-target-encoding-for-categorical-features\n\ndef add_noise(series, noise_level):\n    return series * (1 + noise_level * np.random.randn(len(series)))\n\ndef target_encode(trn_series=None,\n                 tst_series=None,\n                 target=None,\n                 min_samples_leaf=1,\n                 smoothing=1,\n                 noise_level=0):\n    \"\"\"\n    Smoothing is computed like in the following paper by Daniele Micci-Barreca\n    https:\/\/kaggle2.blob.core.windows.net\/forum-message-attachments\/225952\/7441\/high%20cardinality%20categoricals.pdf\n    trn_series : training categorical feature as a pd.Series\n    tst_series : test categorical feature as a pd.Series\n    target : target data as a pd.Series\n    min_samples_leaf (int) : minimum samples to take category average into account\n    smoothing (int) : smoothing effect to balance categorical average vs prior  \n    \"\"\"\n    assert len(trn_series) == len(target)\n    assert trn_series.name == tst_series.name\n    temp = pd.concat([trn_series, target], axis=1)\n    # Compute target mean\n    averages = temp.groupby(by=trn_series.name)[target.name].agg(['mean', 'count'])\n    # Compute smoothing\n    smoothing = 1 \/ (1 + np.exp(-(averages[\"count\"] - min_samples_leaf) \/ smoothing))\n    # Apply average function to all target data\n    prior = target.mean()\n    # The bigger the count the less full_avg is taken into account\n    averages[target.name] = prior * (1 - smoothing) + averages[\"mean\"] * smoothing\n    averages.drop([\"mean\", \"count\"], axis=1, inplace=True)\n    # Apply averages to trn and tst series\n    ft_trn_series = pd.merge(\n        trn_series.to_frame(trn_series.name),\n        averages.reset_index().rename(columns={'index': target.name, target.name: 'average'}),\n        on=trn_series.name,\n        how='left')['average'].rename(trn_series.name + '_mean').fillna(prior)\n    # pd.merge does not keep the index so restore it\n    ft_trn_series.index = trn_series.index \n    ft_tst_series = pd.merge(\n        tst_series.to_frame(tst_series.name),\n        averages.reset_index().rename(columns={'index': target.name, target.name: 'average'}),\n        on=tst_series.name,\n        how='left')['average'].rename(trn_series.name + '_mean').fillna(prior)\n    # pd.merge does not keep the index so restore it\n    ft_tst_series.index = tst_series.index\n    return add_noise(ft_trn_series, noise_level), add_noise(ft_tst_series, noise_level)","b2c0adc2":"train_encoded, test_encoded = target_encode(train['ps_car_11_cat'],\n                                            test['ps_car_11_cat'],\n                                            target=train.target,\n                                            min_samples_leaf = 100,\n                                            smoothing=10,\n                                            noise_level=0.01)\n\ntrain['ps_car_11_cat_te'] = train_encoded\ntrain.drop('ps_car_11_cat', axis=1, inplace=True)\nmeta.loc['ps_car_11_cat', 'keep'] = False # Updating the meta\ntest['ps_car_11_cat_te'] = test_encoded\ntest.drop('ps_car_11_cat', axis=1, inplace=True)","4e275bb7":"v = meta[(meta.level=='nominal') & (meta.keep)].index\n\nfor f in v:\n    plt.figure()\n    fig, ax = plt.subplots(figsize=(20,10))\n    # Calculate the percentage of target=1 per category value\n    cat_perc = train[[f, 'target']].groupby([f], as_index=False).mean()\n    cat_perc.sort_values(by='target', ascending=False, inplace=True)\n    # Bar plot\n    # Order the bars descending on target mean\n    sns.barplot(ax=ax, x=f, y='target', data=cat_perc, order=cat_perc[f])\n    plt.ylabel('% target', fontsize=18)\n    plt.xlabel(f, fontsize=18)\n    plt.tick_params(axis='both', which='major', labelsize=18)\n    plt.show()","f4efde36":"def corr_heatmap(v):\n    correlations = train[v].corr()\n    \n    # create color map ranging between two colors\n    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n    \n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(correlations, cmap=cmap, vmax=1.0, center=0, fmt='.2f', square=True,\\\n               linewidth=.5, annot=True, cbar_kws={'shrink':.75})\n    plt.show()\n\nv = meta[(meta.level=='interval') & (meta.keep)].index\ncorr_heatmap(v)","4d7e1e25":"s = train.sample(frac=0.1)","d9a43bf1":"sns.lmplot(x='ps_reg_02', y='ps_reg_03', data=s, hue='target', palette='Set1',\\\n          scatter_kws={'alpha':0.3})\nplt.show()","fe1a26cf":"sns.lmplot(x='ps_car_12', y='ps_car_13', data=s, hue='target', palette='Set1',\\\n          scatter_kws={'alpha':0.3})\nplt.show()","5db2600b":"sns.lmplot(x='ps_car_12', y='ps_car_14', data=s, hue='target', palette='Set1',\\\n          scatter_kws={'alpha':0.3})\nplt.show()","cf943627":"sns.lmplot(x='ps_car_15', y='ps_car_13', data=s, hue='target', palette='Set1',\\\n          scatter_kws={'alpha':0.3})\nplt.show()","9a67580c":"v = meta[(meta.level=='ordinal') & (meta.keep)].index\ncorr_heatmap(v)","389c09c2":"v = meta[(meta.level=='nominal') & (meta.keep)].index\nprint('Before dummification we have {} variables in train'.format(train.shape[1]))\ntrain = pd.get_dummies(train, columns=v, drop_first=True)\nprint('After dummification we have {} variables in train'.format(train.shape[1]))","c0cdb10d":"v = meta[(meta.level=='interval') & (meta.keep)].index\npoly = PolynomialFeatures(degree=2, interaction_only=False, include_bias=False)\ninteractions = pd.DataFrame(data=poly.fit_transform(train[v]), columns=poly.get_feature_names(v))\ninteractions.drop(v, axis=1, inplace=True) # Remove the original columns\n# Concat the interaction variables to the train data\nprint('Before creating interactions we have {} variables in train'.format(train.shape[1]))\ntrain=pd.concat([train, interactions], axis=1)\nprint('After creating interactions we have {} variables in train'.format(train.shape[1]))","4adc7146":"selector = VarianceThreshold(threshold=.01)\nselector.fit(train.drop(['id', 'target'], axis=1)) # Fit to train without id and target variables\nf = np.vectorize(lambda x:not x) # Function to toggle boolean array elemets\nv = train.drop(['id', 'target'], axis=1).columns[f(selector.get_support())]\nprint('{} variables have too low variance.'.format(len(v)))\nprint('These variables are {}'.format(list(v)))","0a1926c7":"X_train = train.drop(['id', 'target'], axis=1)\ny_train = train['target']\n\nfeat_labels = X_train.columns\n\nrf = RandomForestClassifier(n_estimators=1000, random_state=0, n_jobs=-1)\n\nrf.fit(X_train, y_train)\nimportances = rf.feature_importances_\n\nindices = np.argsort(rf.feature_importances_)[::-1]\n\nfor f in range(X_train.shape[1]):\n    print('%2d) %-*s %f' % (f + 1, 330, feat_labels[indices[f]], importances[indices[f]]))","d44c1624":"sfm = SelectFromModel(rf, threshold='median', prefit=True)\nprint('Number of features before selection: {}'.format(X_train.shape[1]))\nn_features = sfm.transform(X_train).shape[1]\nprint('Number of features after selection: {}'.format(n_features))\nselected_vars = list(feat_labels[sfm.get_support()])","8f06bf7d":"train = train[selected_vars + ['target']]","954b33a9":"scaler = StandardScalerdardScaler()\nscaler.fit_transform(train.drop(['target'], axis=1))","630baf3e":"### Ordinal variables","a4ecea32":"This adds extra interaction variables to the train data. Thanks to the get_feature_names method we can assign column names to these new variables. ","af473328":"- **ps_car_03_cat and ps_car_05_cat** have a large proportion of records with missing values. Remove these variables. \n- For the other categorical variables with missing values, we can leave the missing value -1 as such. \n- **ps_reg_03** (continuous) has missing values for 18% of all records. Replace by the mean. \n- **ps_car_11** (ordinal) has only 5 records with missing values. Replace by the mode. \n- **ps_car_12** (continuous) has only 1 records with missing value. Replace by the mode. \n- **ps_car_14** (continuous) has missing values for 7% of all records. Replace by the mean. ","e0307f11":"ps_car_12 and ps_car_14","048e3354":"### Binary variables","49155f60":"## Exploratory Data Visualization\n\n### Categorical variables\n\nLet's look into the categorical variables and the proportion of customers with target = 1","efdd35eb":"As we can see from the variables with missing values, it is a good idea to keep the missing values as a separate category value, instead of replacing them by the mode for instance. The customers with a missing value appear to have a much higher (in some cases much lower) probability to ask for an insurance claim. ","62c25462":"There are a strong correlations between the variables:\n- ps_reg_02 and ps_reg_03 (0.7)\n- ps_car_12 and ps_car13 (0.67)\n- ps_car_12 and ps_car14 (0.58)\n- ps_car_13 and ps_car15 (0.67)\n\nSeaborn has some handy plots to visualize the (linear) relationship between variables. We could use a pairplot to visualize the relationship between the variables. But because the heatmap already showed the limited number of correlated variables, we'll look at each of the highly correlated variables separately. \n\n**NOTE**: I take a sample of the train data to speed up the process. ","4c7f812f":"## Loading Packages","cf278d8c":"## Concusion\n\nHopefully, this notebook helped you with some tips on how to start with this competition. Feel free to vote for it. And if you have questions, post a comment. ","de32dfa9":"**reg variables**\n- only ps_reg_03 has missing values\n- the range (min to max) differs between the variables. We could apply scaling (eg. StandardScaler), but it depends on the classifier we will want to use. \n\n**car variables**\n- ps_car_12 and ps_car_15 have missing values\n- again, the range differs and we could apply scaling. \n\n**calc variables**\n- no missing values\n- this seems to be some kind of ratio as the maximum is 0.9\n- all three calc variables have very similar distributions\n\n**Overall**, we can see that the range of the interval variables is rather small. Perhaps some transformation (eg. log) is already applied in order to anoymize the data?","a2f471c4":"Allright, so now what? How can we decide which of the correlated variables to keep? We could perform Principal Component Analysis (PCA) on the variables to reduce the dimensions. In the AllState Claims Severity Competition I made this kernel to do that. But as the number of correlated variables is rather low, we will let the model do the heavy lifting. ","ec55d15e":"We indeed see the following. \n\n- binary variables\n- categorical variables of which the category values are integers\n- other variables with integer or float values\n- variables with -1 representing missing values\n- the target variable and an ID variable\n\nLet's look at the number of rows and columns in the train data. ","9fac67a3":"- A priori in the train data is 3.645%, which is **strongly imbalanced**.\n- From the means we can conclude that for most variables the value is zero in most cases. ","28ea4082":"We would lose rather many variables if we would select based on variance. But becuase we do not have so many variables, we'll let the classifier chose. For data sets with many more variables this could reduce the processing time. \n\nSklearn also comes with other feature selection methods. One of these methods is SelectFromModel in which you let another classifier select the best features and continue with these. Below I'll show you how to do that with a Random Forest. \n\n**Selecting features with a Random Forest and SelectFromModel**\n\nHere we'll base feature selection on the feature importances of a random forest. With Sklarn's SelectFromModel you can then specify how many variables you want to keep. You can set a threshold on the level of feature importance manually. But we'll simply select the top 50% best variables. \n\nThe code in the cell below is borrowed from the GitHub repo of Sebastian Raschka. This repo contains code samples of his book Python Machine Learning, which is an absolue must to read. ","63e399ac":"## Feature engineering \n\n### Creating dummy variables\n\nThe values of the categorical variables do not represent any order or magnitude. For instance, category 2 is not twice the value of category 1. Therefore, we can create dummy variables to deal with that. We drop the first dummy variable as this information can be derived from the other dummy variables generated for the categories of the original variable. ","abb45573":"ps_car_12 and ps_car_13","b3860f63":"ps_car_13 and ps_car_15","5012a84b":"## Data at First Sight\n\nHere is an excerpt of the data description for the competition.\n\n- Features that belong to **similar grouping are tagged** as such in the feature names (eg. ind, reg, car, calc)\n- Feature names include the postfix **bin** to indicate binary features and **cat** to indicate categorical features. \n- Features **without these designations are either continuous or ordinal**.\n- Values of -1 indicate that the feature was missing from the observation. \n- The **target** columns signifies whether or not a claim was filed for that policy holder. \n\nOk, that's important information to get us started. Let's have a quick look at the first and last rows to confirm all of this. ","e99b3bea":"- Only one missing variable: ps_car_11\n- We could apply scaling to deal with the different ranges","fc451c4a":"## Feature selection\n\n### Removing features with low or zero variance\n\nPersonally, I prefer to let the classifier algorithm chose which features to keep. But there is one thing that we can do ourselfs. That is removing features with no or a very low variance. Sklearn has a handy method to do that: **VarianceThreshold**. By default it removes features with zero variance. This will not be applicable for this competition as we saw there are no zero-variance variables in the previous steps. But if we would remove features with less than 1% variance, we would remove 31 variable. ","0d16665d":"### Interval variables","fde57eaf":"We have 59 variables and 595.212 rows. Let's see if we have the same number of variables in the test data. \n\nLet's see if there are duplicate rows in the training data. ","73f830e1":"### Creating interaction variables","1029333c":"We are missing one variable in the test set, but this is the target variable. So that's fine. Let's now investigate how many variables of each type we have. \n\nSo later on we can create dummy variables for the 14 categorical variables. The bin variables are already binary and do not need dummification. ","9bd46f20":"### Interval variables\n\nChecking the correlations between interval variables. A heatmap is a good way to viualize the correlation between variables. The code below is based on an example by Michael Waskom","d31460b7":"Only **ps_car_11_cat** has many distinct values, although it is still reasonalbe. \n\n**EDIT**: nickycan made an excellent remark on the fact that my first solution could lead to data leakage. He also pointed me to another kernel made by oliver which deals with that. I therefore replaced this part with the kernel of oliver. All credits go to him. It is so great what you can learn by participating in the Kaggle competitions :)","ed1c950e":"## Data Quality Checks\n\n### Checking missing values\nMissings are represented as -1","55068049":"For the ordinal variables we do not see many correlations. We could, on the other hand, look at how the distributions are when grouping by the target value. ","4024dc81":"Below the number of variables per role and level are displayed.","0cd2cb58":"Example to extract all nominal variables that are not dropped","55bbfdfe":"## Laoading Data","bb7ece39":"### Checking the cardinality of the categorical variables\n\nCardinality refers to the number of different values in a variable. As we will create dummy variables from the categorical variables later on, we need to check whether there are variables with many distinct values. We should handle these variables differently as they would result in many dummy variables. ","e89bc473":"So, creating dummy variables adds 52 variables to the training set. ","6b361f68":"## Feature Scaling\n\nAs mentioned before, we can apply standard scaling to the traing data. Some classifiers perform better when this is done. ","f2d61478":"No duplicate rows, so that's fine. ","22edf3cf":"## Descriptive Statistics\n\nWe can also apply the describe method on the dataframe. However, it doesn't make much sense to calculate the mean, std, ... on categorical variables and the id variable. We'll explore the categorical variables visually later. \n\nThanks to our meta file we can easily select the variables on which we want to compute the descriptive statistics. To keep things clear, well do this per data type. ","0c64242c":"**Checking the correlations between ordinal variables**","20bcc270":"## Handling imbalanced classes\n\nAs we mentioned above the proportion of records with target=1 is far less than target=0. This can lead to a model that has great accuracy but does have any added value in practice. Two possible strategies to deal with this problem are:\n- oversampling records with target=1\n- undersampling records with target=0\n\nThere are many more strategies of course and MachineLearningMastery.com give a nice overview. As we have a rather large training set, we can go for **undersampling**. ","1da6c61e":"## Metadata\n\nTo facilitate the data management, we'll store meta-information about the variables in a DataFrame. This will be helpful when we want to select specific variables for anaysis, visualization, modeling...\n\nConcretely we will store:\n\n- role : input, ID, target\n- level : nominal, interval, ordinal, binary\n- keep : True or False\n- dytpe : int, float, str","bb119599":"This is the second time that I've rewritten the kernel of [Data Preparation & Exploration](https:\/\/www.kaggle.com\/bertcarremans\/data-preparation-exploration) made by [Bert Carremans](https:\/\/www.kaggle.com\/bertcarremans).","aaad5c11":"ps_reg_02 and ps_reg_03\n\nAs the regression line shows, there is a linear relationship between these variables. Thanks to the hue parameter we can see that the regression lines for target=0 and target=1 are the same. ","3376e617":"With SelectFromModel we can specify which prefit classifier to use and what the threshold is for the feature importances. With the get_support method we can then limit the number of variables in the train data. ","c8eb02e9":"## Introduction\n\nThis notebook aims at getting a good insight in the data for the PorteSeguro competition. Besides that, it gives some tips and tricks to prepare your data for modeling. The notebook consists of the following main section.\n\n1. Visual inspection of your data\n2. Defining the metadata\n3. Descriptive statistics\n4. Handling imbalanced classes\n5. Data quality checks\n6. Exploratory data visualization\n7. Feature engineering\n8. Feature selection\n9. Feature scaling","3135ff1a":"Again, with the info() method we see that the data type is integer or float. No null values are present in the data set. That's normal because missing values are replaced by -1. We'll look into that later. "}}