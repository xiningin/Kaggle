{"cell_type":{"c6d533ac":"code","bcab7967":"code","a9b286ed":"code","4f3b9524":"code","5879c841":"code","f1ec5176":"code","15fe7fdc":"code","5bded32c":"code","024adb73":"code","111d3a56":"code","0032fd85":"code","5ccb2fb9":"code","a2b3b667":"code","5f2f48c2":"code","26449f8c":"code","8cb2b4fb":"code","b34dff89":"code","cef2e1f8":"code","67bf2ba8":"code","2996b26e":"code","d99bc00b":"code","97ab383f":"code","b105e92e":"code","51abfef0":"code","2145daf0":"code","ba578921":"markdown","64c376cd":"markdown","2894410e":"markdown","6289eb59":"markdown","bf3a1ff1":"markdown","76503637":"markdown","0fc6c00e":"markdown","005c71d3":"markdown","d74fb158":"markdown","5a804e0c":"markdown","f013aa90":"markdown"},"source":{"c6d533ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bcab7967":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n","a9b286ed":"df=pd.read_csv('..\/input\/calcofi\/bottle.csv')\ndf.head(8)\n","4f3b9524":"X=df.iloc[:,5].values\nY=df.iloc[:,6].values","5879c841":"print(X)","f1ec5176":"print(Y)","15fe7fdc":"X=np.reshape(X,(864863,1))\nY=np.reshape(Y,(len(Y),-1))","5bded32c":"print(X)","024adb73":"print(Y)","111d3a56":"print(np.any(np.isnan(X)))  #If true Missing Value available\nprint(np.any(np.isnan(Y)))","0032fd85":"from sklearn.impute import SimpleImputer as sp\nimputer=sp(missing_values=np.nan,strategy='mean')\nimputer.fit(X)\nimputer.fit(Y)\nX=imputer.transform(X)\nY=imputer.transform(Y)\n","5ccb2fb9":"print(X)\n","a2b3b667":"print(Y)","5f2f48c2":"Y=np.reshape(Y,(-1))\n","26449f8c":"print(Y)","8cb2b4fb":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=0)\n","b34dff89":"print(X_train)","cef2e1f8":"print(X_test)","67bf2ba8":"print(Y_train)","2996b26e":"print(Y_test)","d99bc00b":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nX_train=sc.fit_transform(X_train)\nX_test=sc.fit_transform(X_test)\nprint(X_train)\nprint(X_test)","97ab383f":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(X_train,Y_train)\n\n","b105e92e":"Y_pre=lr.predict(X_train)\nprint(Y_pre)","51abfef0":"plt.scatter(X_train,Y_train,color='green')\nplt.plot(X_train,Y_pre,color='red')\nplt.title('Temperature Vs Salinity')\nplt.xlabel('Temperature')\nplt.ylabel('Salinity')\nplt.show()","2145daf0":"plt.scatter(X_test,Y_test,color='green')\nplt.plot(X_train,Y_pre,color='red')\nplt.title('Temperature Vs Salinity')\nplt.xlabel('Temperature')\nplt.ylabel('Salinity')\nplt.show()","ba578921":"# **Reshaping arrays**","64c376cd":"# **Importing Libraries**","2894410e":"# **Splitting into training and test set**","6289eb59":"# **Predicting Result**","bf3a1ff1":"# **Creating Dependent and Independent Vectors**","76503637":"# **Showing Results with plots**","0fc6c00e":"# **Feature Scaling**","005c71d3":"> # **Checking For Missing Values**","d74fb158":"# **Importing Data**","5a804e0c":"# **Training The Model**","f013aa90":"# **Removing missing values with mean**"}}