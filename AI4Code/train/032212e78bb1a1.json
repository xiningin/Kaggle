{"cell_type":{"33af6ec5":"code","89070547":"code","3d60b23b":"code","80a4651b":"code","31acb55b":"code","911635a4":"code","6f1bb9f1":"code","7f6cf684":"code","10492b58":"code","1d92ff33":"markdown","945700bf":"markdown","e34069b3":"markdown"},"source":{"33af6ec5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","89070547":"trainTable = pd.read_csv('..\/input\/train.csv')\nsampleSubmission = pd.read_csv('..\/input\/sample_submission.csv')\ntestTable = pd.read_csv('..\/input\/test.csv')","3d60b23b":"trainTable.describe()","80a4651b":"sampleSubmission.describe()","31acb55b":"testTable.describe()","911635a4":"X = np.asarray(trainTable.iloc[:, 1:]).astype(np.float32)\/255.0\nY = np.asarray(trainTable.iloc[:, 0])\nprint(X.shape)\nprint(Y.shape)","6f1bb9f1":"# using linear, multi-class SVM so that everything can be done within minutes\nfrom sklearn.svm import LinearSVC\n\n# leave some samples out for performance evaluation\ntrX, trY = X[:-2000, :], Y[:-2000]\ntsX, tsY = X[-2000:, :], Y[-2000:]\n\nsvm = LinearSVC(verbose=True)\nsvm.fit(trX, trY)","7f6cf684":"from sklearn.metrics import accuracy_score, confusion_matrix\n\nprY = svm.predict(tsX)\nacc = accuracy_score(tsY, prY)\nconfMat = confusion_matrix(tsY, prY)\n\nprint(acc)\nprint(confMat)","10492b58":"# generate output\n\noutX = np.asarray(testTable).astype(np.float32)\/255.0\nprint(outX.shape)\n\noutY = svm.predict(outX)\nprint(outY.shape)\n\nresult = np.zeros([outY.size, 2], np.int)\nresult[:, 0] = np.arange(1, outY.size + 1)\nresult[:, 1] = outY\n\npdOut = pd.DataFrame(result, columns=['ImageId', 'Label'])\npdOut.to_csv('output.csv', index=False)","1d92ff33":"Let's strat with the basics! This is literally the easiest and most classical database when it comes to machine learning.","945700bf":"It seems like the pixel data is in the range $[0, 255]$, let's standardize them into $[0, 1]$.","e34069b3":"It seems like pixel data is in the range $[0, 255]$. Let's standradize them into $[0, 1]$."}}