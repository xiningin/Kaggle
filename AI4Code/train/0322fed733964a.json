{"cell_type":{"87ce5450":"code","d3942669":"code","2a403b65":"code","03d7ee10":"code","cd0f4241":"code","d043b05a":"code","d161961d":"code","84da02e4":"code","c365b538":"code","0b550945":"code","e890bd12":"code","ef7f40ae":"code","7f9388f0":"code","d474e4ee":"code","85fca2a5":"code","a531dfab":"code","3bc0817a":"code","ef4d9dd4":"code","f93b466a":"code","6a8e84c6":"code","784b45a7":"code","9db4a5b5":"code","4cf76c47":"code","cec4e4b5":"code","e9c4d7b5":"code","d4413409":"code","2327a93e":"code","6c3c2457":"code","3f298c48":"code","ad141ac3":"code","dc338980":"code","cdf88499":"code","f45b4949":"code","6f499994":"markdown","7e08ad02":"markdown","caccaa61":"markdown","c302b8f3":"markdown","1794a4ae":"markdown","ae61f69f":"markdown","182a7214":"markdown","7858a89f":"markdown","ee3eaebe":"markdown","21331390":"markdown","52c50650":"markdown","7ec33492":"markdown","56be799e":"markdown","ba025455":"markdown","d501d5c9":"markdown","a58294be":"markdown","8a2a2df2":"markdown","90c9d0cb":"markdown","60ac02c2":"markdown","b06706c0":"markdown","adc642be":"markdown","3369f471":"markdown","9fbccc06":"markdown"},"source":{"87ce5450":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d3942669":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport plotly.offline as py\ncolor = sns.color_palette()\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\nimport plotly.tools as tls\n\n%matplotlib inline","2a403b65":"from sklearn.preprocessing import RobustScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier","03d7ee10":"df = pd.read_csv('..\/input\/sloan-digital-sky-survey-dr16\/Skyserver_12_30_2019 4_49_58 PM.csv')","cd0f4241":"df.head()","d043b05a":"df.shape","d161961d":"df.info()","84da02e4":"df.describe()","c365b538":"df['class'].value_counts()","0b550945":"df.drop(['run', 'rerun', 'camcol', 'field', 'objid', 'specobjid', 'fiberid'], axis = 1, inplace= True)\ndf.head(3)","e890bd12":"df.isnull().sum()","ef7f40ae":"sns.set_style('darkgrid')\nplt.figure(figsize = (8, 6))\nsns.countplot(df['class'], palette = 'magma')","7f9388f0":"sns.pairplot(data = df, palette = 'Dark2', hue = 'class')","d474e4ee":"fig, ((ax1, ax2, ax3, ax4, ax5), (ax6, ax7, ax8, ax9, ax10)) = plt.subplots(nrows=2, ncols=5, figsize = (25, 12))\nsns.boxplot(ax=ax1, x = 'class', y = 'ra', hue = 'class', data = df)\nsns.boxplot(ax=ax2, x = 'class', y = 'dec', hue = 'class', data = df)\nsns.boxplot(ax=ax3, x = 'class', y = 'u', hue = 'class', data = df)\nsns.boxplot(ax=ax4, x = 'class', y = 'g', hue = 'class', data = df)\nsns.boxplot(ax=ax5, x = 'class', y = 'r', hue = 'class', data = df)\nsns.boxplot(ax=ax6, x = 'class', y = 'i', hue = 'class', data = df)\nsns.boxplot(ax=ax7, x = 'class', y = 'z', hue = 'class', data = df)\nsns.boxplot(ax=ax8, x = 'class', y = 'redshift', hue = 'class', data = df)\nsns.boxplot(ax=ax9, x = 'class', y = 'plate', hue = 'class', data = df)\nsns.boxplot(ax=ax10, x = 'class', y = 'mjd', hue = 'class', data = df)","85fca2a5":"sns.lmplot(x = 'plate', y='mjd', data = df, hue='class', col = 'class', palette='Set1', scatter_kws= {'edgecolor':'white', 'alpha':0.8, 'linewidths': 0.5})\nsns.lmplot(x = 'i', y='z', data = df, hue='class', col = 'class', palette='magma', scatter_kws= {'edgecolor':'white', 'alpha':0.8, 'linewidths': 0.5})\nsns.lmplot(x = 'r', y='g', data = df, hue='class', col = 'class', palette='Dark2', scatter_kws= {'edgecolor':'white', 'alpha':0.8, 'linewidths': 0.5})","a531dfab":"fig, (ax1, ax2, ax3) = plt.subplots(ncols = 3, figsize = (24, 6))\nsns.distplot(df[df['class'] == 'STAR'].redshift, ax = ax1, bins = 30, color = 'g')\nsns.distplot(df[df['class'] == 'GALAXY'].redshift, ax = ax2, bins = 30, color = 'r')\nsns.distplot(df[df['class'] == 'QSO'].redshift, ax = ax3, bins = 30, color = 'b')","3bc0817a":"df.var()","ef4d9dd4":"corr = df.corr()\nplt.figure(figsize = (10, 8))\nsns.heatmap(corr, annot = True)","f93b466a":"labels = {'STAR':1, 'GALAXY':2, 'QSO':3}\ndf.replace({'class':labels}, inplace = True)\ndf.head()","6a8e84c6":"pca = PCA(n_components = 3)\ndf_pca = pca.fit_transform(df[['u', 'g', 'r', 'i', 'z']])\n\ndf = pd.concat((df, pd.DataFrame(df_pca)), axis = 1)\ndf.rename({0:'F1', 1:'F2', 2:'F3'}, axis = 1, inplace = True)\ndf.drop(['u', 'g', 'r', 'i', 'z'], axis = 1, inplace = True)\ndf.head(3)","784b45a7":"X = df.drop('class', axis = 1).values\ny = df['class'].values","9db4a5b5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 123)","4cf76c47":"robust = RobustScaler()\nX_train = robust.fit_transform(X_train)\nX_test = robust.transform(X_test)","cec4e4b5":"lr = LogisticRegression(max_iter=120)\nlr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)\nprint('Classification Report: \\n', classification_report(y_test, y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, y_pred))\nlr_train_acc = lr.score(X_train, y_train)\nprint('Training Score: ', lr_train_acc)\nlr_test_acc = lr.score(X_test, y_test)\nprint('Testing Score: ', lr_test_acc)","e9c4d7b5":"svc = SVC()\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)\nprint('Classification Report: \\n', classification_report(y_test, y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, y_pred))\nsvc_train_acc = svc.score(X_train, y_train)\nprint('Training Score: ', svc_train_acc)\nsvc_test_acc = svc.score(X_test, y_test)\nprint('Testing Score: ', svc_test_acc)","d4413409":"dt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)\nprint('Classification Report: \\n', classification_report(y_test, y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, y_pred))\ndt_train_acc = dt.score(X_train, y_train)\nprint('Training Score: ', dt_train_acc)\ndt_test_acc = dt.score(X_test, y_test)\nprint('Testing Score: ', dt_test_acc)","2327a93e":"rf = RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\nprint('Classification Report: \\n', classification_report(y_test, y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, y_pred))\nrf_train_acc = rf.score(X_train, y_train)\nprint('Training Score: ', rf_train_acc)\nrf_test_acc = rf.score(X_test, y_test)\nprint('Testing Score: ', rf_test_acc)","6c3c2457":"adb = AdaBoostClassifier(rf)\nadb.fit(X_train, y_train)\ny_pred = adb.predict(X_test)\nprint('Classification Report: \\n', classification_report(y_test, y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, y_pred))\nadb_train_acc = adb.score(X_train, y_train)\nprint('Training Score: ', adb_train_acc)\nadb_test_acc = adb.score(X_test, y_test)\nprint('Testing Score: ', adb_test_acc)","3f298c48":"gdb = GradientBoostingClassifier()\ngdb.fit(X_train, y_train)\ny_pred = adb.predict(X_test)\nprint('Classification Report: \\n0', classification_report(y_test, y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, y_pred))\ngdb_train_acc = gdb.score(X_train, y_train)\nprint('Training Score: ', gdb_train_acc)\ngdb_test_acc = gdb.score(X_test, y_test)\nprint('Testing Score: ', gdb_test_acc)","ad141ac3":"error_rate = []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","dc338980":"plt.figure(figsize = (10,8))\nplt.plot(range(1,40), error_rate, color='blue', linestyle='dashed', marker='o', markerfacecolor='red', markersize=10)","cdf88499":"knn = KNeighborsClassifier(n_neighbors= 5)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nprint('Classification Report: \\n', classification_report(y_test, y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, y_pred))\nknn_train_acc = knn.score(X_train, y_train)\nprint('Training Score: ', knn_train_acc)\nknn_test_acc = knn.score(X_test, y_test)\nprint('Testing Score: ', knn_test_acc)","f45b4949":"trace1 = go.Bar(\n    x=['Logistic Regression','SVC','Decision Tree','Random Forest','AdaBoost','Gradient Boosting','KNN'],\n    y=[lr_test_acc,svc_test_acc,dt_test_acc,rf_test_acc,adb_test_acc,gdb_test_acc,knn_test_acc],\n    name = 'Accuracy Comparisons of the 4 algorithms',\n        marker=dict(\n                \n    ),\n)\n\nlayout = go.Layout(\n    title='Test Accuracy Score Ratio'\n)\n\ndata = [trace1]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Ratio\")","6f499994":"# Exploratory Data Analysis","7e08ad02":"Ensemble Methods","caccaa61":"Data separation into features and labels","c302b8f3":"K Nearest Neighbors Classification","1794a4ae":"# Importing Required Libraries and Reading Data","ae61f69f":"Plotting Test Accuracies of different classifiers","182a7214":"# Time to Train","7858a89f":"As we saw in heatmap of correlation that features u, g, r, i, z are highly correlating so we will use PCA on them and reduce 5 features to 3 features for better accuracy.","ee3eaebe":"Because of presence of outliers we will be using RobustScaler to perform scaling on the data. For more about it look here:\nhttps:\/\/towardsdatascience.com\/normalization-vs-standardization-quantitative-analysis-a91e8a79cebf","21331390":"Support Vector Classification","52c50650":"Encoding Class labels to integers","7ec33492":"Plotting error rate vs. number of neighbors","56be799e":"Dimension Reduction using PCA","ba025455":"There is no compelling reason to have a deep understanding of stars, system or quasars - yet we would already be able to advise which features are probably not going to be identified with the target variable 'class'. \n\nobjid and specobjid are only identifiers for getting to the rows back when they were put away in the original databank. Along these lines we won't need them for classification as they are not identified with the result. \n\nSignificantly more: The features 'run', 'rerun', 'camcol' and 'field' are values which describe portions of the camera right when mentioning the objective fact, for example 'run' speaks to the comparing check which caught the oject.\n\nWe'll drop these features.","d501d5c9":"# Data Visualization","a58294be":"The redshift can be an estimate(!) for the distance from the earth to a object in space.","8a2a2df2":"Machine Learning Methods used here:\n1. Logistic Regression\n2. Support Vector Machines**\n3. Decision Tree\n4. K Nearest Neighbors\n5. Ensemble Methods(Random Forest, Adaboost, Gradient Boost)","90c9d0cb":"# Feature Engineering","60ac02c2":"Correlation using heatmap","b06706c0":"Using Boxplot to get a picture about outliers","adc642be":"Splitting data into train and test set","3369f471":"Decision Tree Classifier","9fbccc06":"Logistic Regression "}}