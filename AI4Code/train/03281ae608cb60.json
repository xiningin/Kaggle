{"cell_type":{"e2ddf10b":"code","c31d6ced":"code","3175dcdc":"code","cff9d526":"code","8e94ffcc":"code","852905fa":"code","2c8baae8":"code","6679cb16":"code","f4b33bae":"code","29432a9c":"code","4fc4abc1":"code","e72fb61b":"code","fad9719e":"code","c72319ef":"code","53eff31b":"code","d5370df3":"code","f3a6faa2":"code","13b22ca9":"code","9f1f6110":"code","c381ee0d":"code","0d5e4efa":"code","b853a311":"code","0315a437":"code","7b52cf7f":"code","4d06f770":"code","709fd6a3":"code","45da5750":"code","bf3a22ae":"code","e463cf87":"code","04c2fd95":"code","114d10c3":"code","6d018e9d":"code","53d73828":"code","98844c25":"code","ebeb8d21":"code","6dcbcf42":"code","22254dab":"code","8e051d31":"code","ee1c2b4a":"code","e3fee25b":"markdown","dfc4ab17":"markdown","1bfeea27":"markdown","993b4567":"markdown","e3cff13f":"markdown","87044354":"markdown","a4670515":"markdown","db32b6fe":"markdown","bad5737a":"markdown","bd14a5a3":"markdown","1020125e":"markdown","a33e5d03":"markdown","5e843be3":"markdown","113e2178":"markdown","d84650e6":"markdown","2f588adc":"markdown","b499ce5e":"markdown","cebbf702":"markdown","cfcf36d9":"markdown","0f4fece3":"markdown","55f7a9da":"markdown","f071e4b7":"markdown","e6fd81b2":"markdown","0d6cadc2":"markdown","f8b1b230":"markdown","e890541d":"markdown","1c77948c":"markdown"},"source":{"e2ddf10b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c31d6ced":"import matplotlib.pyplot as plt #Visulization\nimport seaborn as sns #Visulization\nfrom scipy.stats import norm #Analysis \nfrom sklearn.preprocessing import StandardScaler #Analysis \nfrom scipy import stats #Analysis \nimport warnings \nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport matplotlib.pyplot as plt #Visulization\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\nimport gc\n\n%matplotlib inline\n","3175dcdc":"df_train = pd.read_csv('..\/input\/train_V2.csv')\ndf_train = df_train[df_train['winPlacePerc'].notnull()].reset_index(drop=True)\n\ndf_test  = pd.read_csv('..\/input\/test_V2.csv')","cff9d526":"print(\"Train : \",df_train.shape)\nprint(\"Test : \",df_test.shape)","8e94ffcc":"df_train.head()","852905fa":"temp = df_train['assists'].value_counts().sort_values(ascending=False)\n\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp)\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"\",\n    xaxis=dict(\n        title='assists'\n    ),\n    yaxis=dict(\n        title='Count of assists'\n        )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","2c8baae8":"temp = df_train['boosts'].value_counts().sort_values(ascending=False)\n\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp)\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"\",\n    xaxis=dict(\n        title='boosts',\n    ),\n    yaxis=dict(\n        title='Count of boosts',\n        )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","6679cb16":"temp = df_train['headshotKills'].value_counts().sort_values(ascending=False)\n\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp)\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"\",\n    xaxis=dict(\n        title='headshotKills',\n    ),\n    yaxis=dict(\n        title='Count of headshotKills',\n        )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","f4b33bae":"temp = df_train['heals'].value_counts().sort_values(ascending=False)\n\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp)\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"\",\n    xaxis=dict(\n        title='heals',\n    ),\n    yaxis=dict(\n        title='Count of heals',\n        )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","29432a9c":"temp = df_train['killStreaks'].value_counts().sort_values(ascending=False)\n\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp)\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"\",\n    xaxis=dict(\n        title='killStreaks',\n    ),\n    yaxis=dict(\n        title='Count of killStreaks',\n        )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","4fc4abc1":"temp = df_train['kills'].value_counts().sort_values(ascending=False)\n\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp)\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"\",\n    xaxis=dict(\n        title='kills',\n    ),\n    yaxis=dict(\n        title='Count of kills',\n        )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","e72fb61b":"temp = df_train['matchType'].value_counts().sort_values(ascending=False)\n\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp)\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"\",\n    xaxis=dict(\n        title='matchType',\n    ),\n    yaxis=dict(\n        title='Count of matchType',\n        )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","fad9719e":"temp = df_train['weaponsAcquired'].value_counts().sort_values(ascending=False)\n\ntrace = go.Bar(\n    x = temp.index,\n    y = (temp)\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"\",\n    xaxis=dict(\n        title='weaponsAcquired',\n    ),\n    yaxis=dict(\n        title='Count of weaponsAcquired',\n        )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","c72319ef":"#histogram\nf, ax = plt.subplots(figsize=(18, 8))\nsns.distplot(df_train['longestKill'])","53eff31b":"#histogram\nf, ax = plt.subplots(figsize=(18, 6))\nsns.distplot(df_train['walkDistance'])","d5370df3":"#histogram\nf, ax = plt.subplots(figsize=(18, 6))\nsns.distplot(df_train['swimDistance'])","f3a6faa2":"#histogram\nf, ax = plt.subplots(figsize=(18, 6))\nsns.distplot(df_train['rideDistance'])","13b22ca9":"#histogram\nf, ax = plt.subplots(figsize=(18, 6))\nsns.distplot(df_train['winPlacePerc'])","9f1f6110":"#winPlacePerc correlation matrix\nk = 10 #number of variables for heatmap\ncorr = df_train.corr() \ncols = corr.nlargest(k, 'winPlacePerc').index # nlargest : Return this many descending sorted values\ncm = np.corrcoef(df_train[cols].values.T) # correlation \nsns.set(font_scale=1.25)\nf, ax = plt.subplots(figsize=(14, 10))\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 12}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","c381ee0d":"df_train.plot(x=\"kills\",y=\"winPlacePerc\", kind=\"scatter\", figsize = (8,6))","0d5e4efa":"df_train.plot(x=\"damageDealt\",y=\"winPlacePerc\", kind=\"scatter\", figsize = (8,6))","b853a311":"df_train.plot(x=\"longestKill\",y=\"winPlacePerc\", kind=\"scatter\", figsize = (8,6))","0315a437":"df_train.plot(x=\"weaponsAcquired\",y=\"winPlacePerc\", kind=\"scatter\", figsize = (8,6))","7b52cf7f":"### Removing some anomalies from walkDistance to give a better idea of it's association with the target variable\ndf_train.plot(x=\"walkDistance\",y=\"winPlacePerc\", kind=\"scatter\", figsize = (8,6))","4d06f770":"f = df_train[df_train[\"walkDistance\"] < 15000]\nf.plot(x=\"walkDistance\",y=\"winPlacePerc\", kind=\"scatter\", figsize = (8,6))","709fd6a3":"f, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='boosts', y=\"winPlacePerc\", data=df_train)\nfig.axis(ymin=0, ymax=1);","45da5750":"f, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='matchType', y=\"winPlacePerc\", data=df_train)\nfig.axis(ymin=0, ymax=1);","bf3a22ae":"k = 10 #number of variables with highest correlation with winPlacePerc\ncorr = df_train.corr() \ncols = corr.nlargest(k, 'winPlacePerc').index # nlargest : Return this many descending sorted values\n\nagg = df_train.groupby(['matchId','groupId'],as_index=False)[cols].agg('mean')\n\n","e463cf87":"cols","04c2fd95":"f = agg[agg[\"walkDistance\"] < 15000]\nf.plot(x=\"walkDistance\",y=\"winPlacePerc\", kind=\"scatter\", figsize = (8,6))","114d10c3":"agg.plot(x=\"boosts\",y=\"winPlacePerc\", kind=\"scatter\", figsize = (8,6))","6d018e9d":"agg.plot(x=\"weaponsAcquired\",y=\"winPlacePerc\", kind=\"scatter\", figsize = (8,6))","53d73828":"agg.plot(x=\"kills\",y=\"winPlacePerc\", kind=\"scatter\", figsize = (8,6))","98844c25":"agg = df_train.groupby(['matchId','groupId'],as_index=False)[cols].agg('max')\nf = agg[agg[\"walkDistance\"] < 15000]\nf.plot(x=\"walkDistance\",y=\"winPlacePerc\", kind=\"scatter\", figsize = (8,6))\n","ebeb8d21":"f, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='boosts', y=\"winPlacePerc\", data=agg)\nfig.axis(ymin=0, ymax=1);","6dcbcf42":"agg.plot(x=\"longestKill\",y=\"winPlacePerc\", kind=\"scatter\", figsize = (8,6))","22254dab":"agg = df_train.groupby(['matchId','groupId'],as_index=False)[cols].agg('min')\n\nf = agg[agg[\"walkDistance\"] < 15000]\nf.plot(x=\"walkDistance\",y=\"winPlacePerc\", kind=\"scatter\", figsize = (8,6))","8e051d31":"f, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='boosts', y=\"winPlacePerc\", data=agg)\nfig.axis(ymin=0, ymax=1);","ee1c2b4a":"agg.plot(x=\"longestKill\",y=\"winPlacePerc\", kind=\"scatter\", figsize = (8,6))","e3fee25b":"### It's clearly visible from above charts, specially the latest two that as compared to other variables, boosts and walkDistance definitely show a disciminating property as fas as winPlacePerc is concerned","dfc4ab17":"### Number of healing items used","1bfeea27":"### The notebook contains some EDA on the PubG training dataset.\n\n#### The initial part contains univariate analysis of some of the important variable in the dataset while the later half of the notebook involves multivariate and bivariate analysis\n\n#### I have also looked at correlations of the top-10 variables with the target variable at the end\n\n### Some of the important findings of the notebook are:\n\n    * Variable have variation in them, but most of them seem to be scattered in confined boundaries.\n    * Some of the variables have really good correlations with the target variable\n    * The variable have good correlations among themselves as well, hence, it will be crucial to handle this \n      situation by either using multicollinearity reduction techniques or go with some non-linear model which can\n      handle such multicollinearity issues very well, for e.g. Tree based models or Neural Networks.\n    * Since, it is a team game, hence group level agggregate values (mean, min, max) of these variables can also \n      play a sinificant role in estimating the value of the target variable\n\n#### * Please give a thumbs up if you like the notebook !","993b4567":"### Distance traveled walking","e3cff13f":"### Visualising some of the important\/interesting variables as per competition","87044354":"### Load Datasets","a4670515":"### Load other essential libraries","db32b6fe":"## The target variable","bad5737a":"### Max number of enemy players killed in a short amount of time","bd14a5a3":"## From the above plots it's evident that while the explored attributes do have some variance, their values are mostly confined in s small range.\n\n## After this univariate analysis, let's move on to multivariate analysis and try to see some correlations of the variables with each other as well as the target variable\n\n","1020125e":"# From the above analysis it is pretty much clear that along with individual level attribute values, team level aggregated values will also play an important role in estimation of the target variable","a33e5d03":"### As done previously, let's remove some extreme values from walkDistance and look at it's correlation at roup level values","5e843be3":"### Swimming distance","113e2178":"### Different match Types","d84650e6":"### Longest kill distance - this variable does have some interesting looking variance","2f588adc":"### Since PubG is a team game, hence it is also worth to see how the top correlated attributes behave at match and group level in relation to the target variable","b499ce5e":"## The above plot shows some correlations which are pretty obvious like - (damageDealt-kills), (kills-killStreaks), etc. while some others are also interesting to see like - (boosts -winPlacePerc) , (walkDistance - winPlacePerc) \n### The commonly striking attributes like kills, longestKill, etc. seem to show somewhat less correlation with winPlacePerc\n\n## Let's see some of these attributes individually","cebbf702":"### Removing some anomalies from walkDistance to give a better idea of it's association with the target variable","cfcf36d9":"## Looks like the mean values at group and match level do have some reat deal of importance in relation to the taret variable\n\n## Let's also look at how max and min values across these top variables behave in correlation with group level winPlacePerc values","0f4fece3":"### Number of weapons acquired","55f7a9da":"### ride Distance (on vehicle)","f071e4b7":"#### Number of boost items used","e6fd81b2":"#### Total number of assists in killing an opponent","0d6cadc2":"### One other attribute which seemed interesting from it's description was matchType, let's see if it has some information on the target variable or not.","f8b1b230":"#### Number of enemy players killed with headshots","e890541d":"### Looks like it does not say much about the target variable and median value of winPlacePerc is mostly around 0.5 for all of them.","1c77948c":"### Number of players killed"}}