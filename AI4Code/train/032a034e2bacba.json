{"cell_type":{"98ee60c3":"code","b352e3ce":"code","2e28dbbd":"code","3a3e5e27":"code","d2df408a":"code","508a5b20":"code","8fb1dabd":"code","4becc6a5":"code","a3f9cd17":"code","cfc4c389":"code","d430ee3c":"code","9df9ff37":"code","af598400":"code","1287e8c2":"code","93c6154b":"code","1e4064c5":"code","74269525":"code","53348b23":"code","894217a2":"code","0e158018":"code","ce083585":"code","9e778410":"code","3d3fb4c2":"code","81bbbfb4":"code","fd603e9b":"code","84590c2e":"code","9f85a213":"code","e6ba72e6":"code","2be84025":"code","fb0e4edb":"code","3da5e7ce":"code","d0c7a176":"code","ae0ce14f":"code","2b64ecf1":"code","bd76963d":"code","fa4474ff":"code","656afc5f":"code","5b00b6ec":"code","b3dcc777":"code","4150f30c":"code","7f7b98bf":"code","5bca6f83":"code","938f8151":"code","dfdb789f":"code","31d4bd3e":"code","adbc7cbd":"code","1c7a4a2b":"code","6932c694":"code","0a57622d":"code","3530a478":"code","fe53dae8":"code","fa7e9f17":"code","fc5448e9":"code","1920727c":"code","ee4819b4":"code","435ef8cf":"code","7c03cc38":"code","b1a1f953":"code","0bd7068f":"code","4c80efb4":"code","a0e19bba":"code","e9145027":"code","55e865bc":"code","4e4af5ad":"code","748b4fc2":"code","cccb015c":"code","c2ef2cf2":"code","ef49b600":"code","17d4f93d":"code","07817523":"code","0f6ea110":"markdown","1b3eb1fc":"markdown","1f14c071":"markdown","5bc00804":"markdown","3fb0d47c":"markdown","e043051e":"markdown","8a9a07c4":"markdown","4a51afd9":"markdown","0bc11ecd":"markdown","aab9c546":"markdown","6c1fa7ae":"markdown","c63b212a":"markdown","91c9bb64":"markdown","e5e462e6":"markdown","6e597462":"markdown","47b1e0e7":"markdown","d077205e":"markdown","711d3f3c":"markdown","7668dbe5":"markdown","0858a616":"markdown","8bf7fb74":"markdown","480b6e86":"markdown","2e59bc17":"markdown","439f22bc":"markdown","8fb2fcce":"markdown","7ab924c6":"markdown","3cf84a90":"markdown","fbae154d":"markdown","eecd17a7":"markdown","2e7c1820":"markdown","0996f7c3":"markdown","bc57193c":"markdown","cf98b911":"markdown","0fb76159":"markdown","5076aa83":"markdown","ae56241e":"markdown","a376dc21":"markdown","21385bbc":"markdown","800f1194":"markdown","147dedc4":"markdown","064597ea":"markdown","b2f28650":"markdown","ce25d90a":"markdown","fa48959b":"markdown","f6e7e6c9":"markdown"},"source":{"98ee60c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b352e3ce":"from xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.metrics import mean_squared_log_error, r2_score\nfrom statistics import mean, mode, median\nimport statsmodels.api as sma\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom scipy.stats import kurtosis\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker\nfrom matplotlib import rcParams\nfrom platform import python_version\nprint('Python Version: ', python_version())","2e28dbbd":"RANDOM_SEED = 123\nrcParams['figure.figsize'] = (10, 6)\nsns.set_theme(palette='muted', style='whitegrid')","3a3e5e27":"path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv'\ndf = pd.read_csv(path)\nprint(df.shape)\ndf.head()","d2df408a":"path_test = '..\/input\/house-prices-advanced-regression-techniques\/test.csv'\ndf_test = pd.read_csv(path_test)\nprint(df_test.shape)\ndf_test.head()","508a5b20":"print(df.dtypes.value_counts(), end='\\n' * 2)\nprint(df_test.dtypes.value_counts())","8fb1dabd":"# Check for null values in the target\ndf['SalePrice'].isnull().any()","4becc6a5":"df['SalePrice'].describe()","a3f9cd17":"print(f'Kurtosis: {kurtosis(df.SalePrice)}')\nax = sns.histplot(data=df, x='SalePrice', kde=True)\nax.xaxis.set_major_formatter(ticker.StrMethodFormatter('${x:,.0f}'))\nplt.xticks(rotation=45)\nplt.show()\n","cfc4c389":"print(f'Kurtosis: {kurtosis(np.log(df.SalePrice))}')\nsns.histplot(data=df, x=np.log(df['SalePrice']), kde=True)\nplt.xlabel('SalePrice (Log Scale)')\nplt.show()","d430ee3c":"def null_table(data):    \n    null_list = []\n\n    for i in data:\n        if data[i].isnull().any():\n            null_list.append(data[i].isnull().value_counts())\n    \n    return pd.DataFrame(pd.concat(null_list, axis=1).T)\n","9df9ff37":"# Review null values for the training data\ndf_null = null_table(df)\nprint(df_null.shape)\ndf_null","af598400":"# The categorical features are filled with the most frequent value\ndf['Electrical'] = df.Electrical.fillna(mode(df.Electrical)) \ndf['MasVnrType'] = df.MasVnrType.fillna(mode(df.MasVnrType)) \n# The continuous feature is filled with the median value\ndf['MasVnrArea'] = df.MasVnrArea.fillna(median(df.MasVnrArea)) \n# The discrete feature is filled with zeroes where there is no garage\ndf['GarageYrBlt'] = df.GarageYrBlt.fillna(0).astype(int) ","1287e8c2":"# Review null values for the test data\ndf_test_null = null_table(df_test)\nprint(df_test_null.shape)\ndf_test_null","93c6154b":"# The categorical features are filled with the most frequent value\ndf_test['MSZoning'] = df_test.MSZoning.fillna(mode(pd.concat([df['MSZoning'], df_test['MSZoning']], axis=0)))\ndf_test['Utilities'] = df_test.Utilities.fillna(mode(pd.concat([df['Utilities'], df_test['Utilities']], axis=0)))\ndf_test['Exterior1st'] = df_test.Exterior1st.fillna(mode(pd.concat([df['Exterior1st'], df_test['Exterior1st']], axis=0)))\ndf_test['Exterior2nd'] = df_test.Exterior2nd.fillna(mode(pd.concat([df['Exterior2nd'], df_test['Exterior2nd']], axis=0)))\ndf_test['MasVnrType'] = df_test.MasVnrType.fillna(mode(pd.concat([df['MasVnrType'], df_test['MasVnrType']], axis=0)))\ndf_test['BsmtFullBath'] = df_test.BsmtFullBath.fillna(mode(pd.concat([df['BsmtFullBath'], df_test['BsmtFullBath']], axis=0)))\ndf_test['BsmtHalfBath'] = df_test.BsmtHalfBath.fillna(mode(pd.concat([df['BsmtHalfBath'], df_test['BsmtHalfBath']], axis=0)))\ndf_test['KitchenQual'] = df_test.KitchenQual.fillna(mode(pd.concat([df['KitchenQual'], df_test['KitchenQual']], axis=0)))\ndf_test['Functional'] = df_test.Functional.fillna(mode(pd.concat([df['Functional'], df_test['Functional']], axis=0)))\ndf_test['SaleType'] = df_test.SaleType.fillna(mode(pd.concat([df['SaleType'], df_test['SaleType']], axis=0)))\ndf_test['GarageCars'] = df_test.GarageCars.fillna(mode(pd.concat([df['GarageCars'], df_test['GarageCars']], axis=0)))\n# The continuous features are filled with the median value\ndf_test['GarageArea'] = df_test.GarageArea.fillna(median(pd.concat([df['GarageArea'], df_test['GarageArea']], axis=0)))\ndf_test['MasVnrArea'] = df_test.MasVnrArea.fillna(median(pd.concat([df['MasVnrArea'], df_test['MasVnrArea']], axis=0)))\ndf_test['BsmtFinSF1'] = df_test.BsmtFinSF1.fillna(median(pd.concat([df['BsmtFinSF1'], df_test['BsmtFinSF1']], axis=0)))\ndf_test['BsmtFinSF2'] = df_test.BsmtFinSF2.fillna(median(pd.concat([df['BsmtFinSF2'], df_test['BsmtFinSF2']], axis=0)))\ndf_test['BsmtUnfSF'] = df_test.BsmtUnfSF.fillna(median(pd.concat([df['BsmtUnfSF'], df_test['BsmtUnfSF']], axis=0)))\ndf_test['TotalBsmtSF'] = df_test.TotalBsmtSF.fillna(median(pd.concat([df['TotalBsmtSF'], df_test['TotalBsmtSF']], axis=0)))\n# The discrete feature is filled with zeroes where there is no garage\ndf_test['GarageYrBlt'] = df_test.GarageYrBlt.fillna(0).astype(int) ","1e4064c5":"print(null_table(df).shape)\nprint(null_table(df_test).shape)","74269525":"# Fill NA data for categorical features\ndf[[\n    'Alley', 'BsmtQual', 'BsmtCond', 'BsmtExposure',\n    'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu',\n    'GarageType', 'GarageFinish', 'GarageQual', \n    'GarageCond', 'PoolQC', 'Fence', 'MiscFeature'\n]] = df[[\n    'Alley', 'BsmtQual', 'BsmtCond', 'BsmtExposure',\n    'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu',\n    'GarageType', 'GarageFinish', 'GarageQual', \n    'GarageCond', 'PoolQC', 'Fence', 'MiscFeature'\n]].fillna('NA')\n\ndf_test[[\n    'Alley', 'BsmtQual', 'BsmtCond', 'BsmtExposure',\n    'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu',\n    'GarageType', 'GarageFinish', 'GarageQual', \n    'GarageCond', 'PoolQC', 'Fence', 'MiscFeature'\n]] = df_test[[\n    'Alley', 'BsmtQual', 'BsmtCond', 'BsmtExposure',\n    'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu',\n    'GarageType', 'GarageFinish', 'GarageQual', \n    'GarageCond', 'PoolQC', 'Fence', 'MiscFeature'\n]].fillna('NA')","53348b23":"df = df.drop(['LotFrontage'], axis=1)\ndf_test = df_test.drop(['LotFrontage'], axis=1)","894217a2":"# Create a dataset of only continuous data\ndf_continuous = df[[\n    'LotArea', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', \n    'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', \n    'LowQualFinSF', 'GrLivArea', 'GarageArea', 'WoodDeckSF', \n    'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', \n    'MiscVal'\n]]\n\ndf_test_continuous = df_test[[\n    'LotArea', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', \n    'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', \n    'LowQualFinSF', 'GrLivArea', 'GarageArea', 'WoodDeckSF', \n    'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', \n    'MiscVal'\n]]","0e158018":"print(df_continuous.shape)\ndf_continuous.head()","ce083585":"print(df_test_continuous.shape)\ndf_test_continuous.head()","9e778410":"# Create a boolean feature for houses sold above the median price\ndf['PriceAbvMedian'] = df['SalePrice'].apply(lambda x: 0 if x < median(df.SalePrice) else 1)","3d3fb4c2":"# Plot all continuous features\nplt.figure(figsize=(18, 40))\n\nfor i, j in enumerate(df_continuous.columns):\n    plt.subplot(10, 2, i + 1)\n    ax = sns.scatterplot(data=df, x=f'{j}', y='SalePrice', hue='PriceAbvMedian')\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter('${x:,.0f}'))\n    plt.title(f'Sale Price vs. {j}')\n    # Plot the best fit line\n    m, b = np.polyfit(x=df[j], y=df.SalePrice, deg=1)\n    plt.plot(df[j], m * df[j] + b, c='red')\n    # Plot the r-squared value\n    corr_matrix = np.corrcoef(df[j], df.SalePrice)    \n    corr_xy = corr_matrix[0,1]\n    r_squared = round((corr_xy ** 2), 4)    \n    plt.legend(labels=[f'R^2 = {r_squared}', 'Price Above Median', 'Price Below Median'], framealpha=0.5, loc=0)\n    \nplt.tight_layout()\nplt.show()","81bbbfb4":"plt.figure(figsize=(5, 10))\nsns.heatmap(pd.DataFrame(pd.concat([df['SalePrice'], df_continuous], axis=1).corr()[['SalePrice']].sort_values(by=['SalePrice'], ascending=False)), annot=True)\nplt.show()","fd603e9b":"def get_kurtosis(data):\n    df_kurt = pd.DataFrame()\n    df_kurt['Variable'] = data.columns\n\n    for i in data.columns:\n        df_kurt['Kurtosis'] = [kurtosis(data[f'{i}']) for i in data.columns]\n\n    return df_kurt.sort_values(by=['Kurtosis'], ascending=False)","84590c2e":"get_kurtosis(df_continuous)","9f85a213":"# Create a dataset of only discrete data\ndf_discrete = df[[\n    'YearBuilt', 'YearRemodAdd', 'BsmtFullBath', 'BsmtHalfBath', \n    'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', \n    'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageYrBlt', \n    'MoSold', 'YrSold'\n]]\n\ndf_test_discrete = df_test[[\n    'YearBuilt', 'YearRemodAdd', 'BsmtFullBath', 'BsmtHalfBath', \n    'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', \n    'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageYrBlt', \n    'MoSold', 'YrSold'\n]]","e6ba72e6":"print(df_discrete.shape)\ndf_discrete.head()","2be84025":"print(df_test_discrete.shape)\ndf_test_discrete.head()","fb0e4edb":"# Plot all discrete features\nplt.figure(figsize=(30, 18))\n\nfor i, j in enumerate(df_discrete.columns):\n    count, bin_edges = np.histogram(df[f'{j}']) # Acquire bin edges\n    plt.subplot(3, 5, i + 1)\n    sns.histplot(data=df, x=f'{j}', bins=bin_edges, hue='PriceAbvMedian')\n    plt.title(f'Count vs. {j}')\nplt.tight_layout()\nplt.show()","3da5e7ce":"plt.figure(figsize=(5, 10))\nsns.heatmap(pd.DataFrame(pd.concat([df['SalePrice'], df_discrete], axis=1).corr()[['SalePrice']].sort_values(by=['SalePrice'], ascending=False)), annot=True)","d0c7a176":"get_kurtosis(df_discrete)","ae0ce14f":"# Create a dataset for only nominal data\ndf_nominal = df[[\n    'Alley', 'GarageType', 'MiscFeature',\n    'MSZoning', 'MSSubClass', 'Street', 'LandContour',\n    'LotConfig', 'Neighborhood', 'Condition1', 'Condition2',\n    'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl',\n    'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation',\n    'Heating', 'CentralAir', 'SaleType', 'SaleCondition'    \n]]\n\ndf_test_nominal = df_test[[\n    'Alley', 'GarageType', 'MiscFeature',\n    'MSZoning', 'MSSubClass', 'Street', 'LandContour',\n    'LotConfig', 'Neighborhood', 'Condition1', 'Condition2',\n    'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl',\n    'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation',\n    'Heating', 'CentralAir', 'SaleType', 'SaleCondition'    \n]]","2b64ecf1":"print(df_nominal.shape)\ndf_nominal.head()","bd76963d":"print(df_test_nominal.shape)\ndf_test_nominal.head()","fa4474ff":"# Plot all nominal features\nplt.figure(figsize=(15, 60))\n\nfor i, j in enumerate(df_nominal.columns):\n    plt.subplot(12, 2, i + 1)\n    ax = sns.boxplot(data=df, x=f'{j}', y=df.SalePrice)\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter('${x:,.0f}'))\n    plt.xticks(rotation=45)\n    plt.title(f'SalePrice vs. {j}')\n    \nplt.tight_layout()\nplt.show()","656afc5f":"# Encode the nominal data into numerical data\nencoder_nominal = OrdinalEncoder()\ndf_nominal_ord = pd.DataFrame(encoder_nominal.fit_transform(df_nominal))\ndf_nominal_ord.columns = [\n    'Alley', 'GarageType', 'MiscFeature',\n    'MSSubClass', 'MSZoning', 'Street', 'LandContour',\n    'LotConfig', 'Neighborhood', 'Condition1', 'Condition2',\n    'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl',\n    'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation',\n    'Heating', 'CentralAir', 'SaleType', 'SaleCondition'\n]  \n\nencoder_nominal_test = OrdinalEncoder()\ndf_test_nominal_ord = pd.DataFrame(encoder_nominal_test.fit_transform(df_test_nominal))\ndf_test_nominal_ord.columns = [\n    'Alley', 'GarageType', 'MiscFeature',\n    'MSSubClass', 'MSZoning', 'Street', 'LandContour',\n    'LotConfig', 'Neighborhood', 'Condition1', 'Condition2',\n    'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl',\n    'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation',\n    'Heating', 'CentralAir', 'SaleType', 'SaleCondition'\n]","5b00b6ec":"print(df_nominal_ord.shape)\ndf_nominal_ord.head()","b3dcc777":"print(df_test_nominal_ord.shape)\ndf_test_nominal_ord.head()","4150f30c":"plt.figure(figsize=(5, 10))\nsns.heatmap(pd.DataFrame(pd.concat([df['SalePrice'], df_nominal_ord], axis=1).corr()[['SalePrice']].sort_values(by=['SalePrice'], ascending=False)), annot=True)","7f7b98bf":"get_kurtosis(df_nominal_ord)","5bca6f83":"# Create a dataset of only ordinal data\ndf_ordinal = df[[\n    'BsmtQual', 'BsmtCond', 'BsmtExposure', \n    'GarageFinish', 'GarageQual', 'GarageCond',\n    'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu',\n    'LotShape', 'Utilities', 'LandSlope', \n    'OverallQual', 'OverallCond', 'ExterQual', \n    'ExterCond', 'HeatingQC', 'Electrical', \n    'KitchenQual', 'Functional', 'PavedDrive', \n    'PoolQC', 'Fence'\n]]\n\ndf_test_ordinal = df_test[[\n    'BsmtQual', 'BsmtCond', 'BsmtExposure', \n    'GarageFinish', 'GarageQual', 'GarageCond',\n    'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu',\n    'LotShape', 'Utilities', 'LandSlope', \n    'OverallQual', 'OverallCond', 'ExterQual', \n    'ExterCond', 'HeatingQC', 'Electrical', \n    'KitchenQual', 'Functional', 'PavedDrive', \n    'PoolQC', 'Fence'\n]]","938f8151":"print(df_ordinal.shape)\ndf_ordinal.head()","dfdb789f":"print(df_test_ordinal.shape)\ndf_test_ordinal.head()","31d4bd3e":"# Plot all ordinal features\nplt.figure(figsize=(15, 60))\n\nfor i, j in enumerate(df_ordinal.columns):\n    plt.subplot(12, 2, i + 1)\n    ax = sns.boxplot(data=df, x=f'{j}', y=df.SalePrice)\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter('${x:,.0f}'))\n    plt.xticks(rotation=45)\n    plt.title(f'SalePrice vs. {j}')\nplt.tight_layout()\nplt.show()","adbc7cbd":"# Encode the ordinal data into numerical data\nencoder = OrdinalEncoder()\ndf_ordinal = pd.DataFrame(encoder.fit_transform(df_ordinal))\ndf_ordinal.columns = [    \n    'BsmtQual', 'BsmtCond', 'BsmtExposure', \n    'GarageFinish', 'GarageQual', 'GarageCond',\n    'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu',\n    'LotShape', 'Utilities', 'LandSlope', \n    'OverallQual', 'OverallCond', 'ExterQual', \n    'ExterCond', 'HeatingQC', 'Electrical', \n    'KitchenQual', 'Functional', 'PavedDrive', \n    'PoolQC', 'Fence'\n]\n\nencoder_test = OrdinalEncoder()\ndf_test_ordinal = pd.DataFrame(encoder_test.fit_transform(df_test_ordinal))\ndf_test_ordinal.columns = [    \n    'BsmtQual', 'BsmtCond', 'BsmtExposure', \n    'GarageFinish', 'GarageQual', 'GarageCond',\n    'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu',\n    'LotShape', 'Utilities', 'LandSlope', \n    'OverallQual', 'OverallCond', 'ExterQual', \n    'ExterCond', 'HeatingQC', 'Electrical', \n    'KitchenQual', 'Functional', 'PavedDrive', \n    'PoolQC', 'Fence'\n]","1c7a4a2b":"print(df_ordinal.shape)\ndf_ordinal.head()","6932c694":"print(df_test_ordinal.shape)\ndf_test_ordinal.head()","0a57622d":"plt.figure(figsize=(5, 10))\nsns.heatmap(pd.DataFrame(pd.concat([df['SalePrice'], df_ordinal], axis=1).corr()[['SalePrice']].sort_values(by=['SalePrice'], ascending=False)), annot=True)","3530a478":"get_kurtosis(df_ordinal)","fe53dae8":"# Concatenate all the datasets into one\ndf_concat = pd.concat([ \n    df_continuous, \n    df_discrete,\n    df_ordinal, \n    df_nominal_ord\n], axis=1).astype(float)\n\ndf_test_concat = pd.concat([ \n    df_test_continuous, \n    df_test_discrete, \n    df_test_ordinal, \n    df_test_nominal_ord\n], axis=1).astype(float)","fa7e9f17":"print(df_concat.shape)\ndf_concat.head()","fc5448e9":"print(df_test_concat.shape)\ndf_test_concat.head()","1920727c":"# Get the VIF statistics\ndef get_vif(data):\n    \n    df_vars = pd.DataFrame(np.log1p(data))\n    # Include the intercept constant \n    df_vars_const = sma.add_constant(df_vars)\n    df_vif = pd.DataFrame()\n    df_vif['Feature'] = df_vars_const.columns\n    df_vif['VIF'] = [variance_inflation_factor(df_vars_const.values, i) for i in range(df_vars_const.shape[1])]\n    # Return the 25 highest VIF values\n    return df_vif.sort_values(by=['VIF'], ascending=False).head(25)","ee4819b4":"get_vif(df_concat)","435ef8cf":"# Create a mask for the upper triangle\nmask = np.triu(np.ones_like(df_concat.corr(), dtype=bool))\n\nplt.figure(figsize=(20, 20))\nsns.heatmap(df_concat.corr(), mask=mask, linewidths=1, linecolor='black')\nplt.show()","7c03cc38":"df_concat = df_concat.drop([\n    'WoodDeckSF', 'OpenPorchSF', 'MasVnrArea',\n    'BsmtFinSF1', 'BsmtUnfSF', 'TotalBsmtSF',\n    '1stFlrSF', '2ndFlrSF', 'LowQualFinSF',\n    'MSZoning', 'GarageCars', 'GarageArea',\n    'FullBath', 'YearBuilt', 'TotRmsAbvGrd'\n], axis=1)\n\ndf_test_concat = df_test_concat.drop([\n    'WoodDeckSF', 'OpenPorchSF', 'MasVnrArea',\n    'BsmtFinSF1', 'BsmtUnfSF', 'TotalBsmtSF',\n    '1stFlrSF', '2ndFlrSF', 'LowQualFinSF',\n    'MSZoning', 'GarageCars', 'GarageArea',\n    'FullBath', 'YearBuilt', 'TotRmsAbvGrd'\n], axis=1)","b1a1f953":"get_vif(df_concat)","0bd7068f":"print(df_concat.shape)\ndf_concat.head()","4c80efb4":"print(df_test_concat.shape)\ndf_test_concat.head()","a0e19bba":"# Scale the features \nX_features = np.log1p(df_concat)\nX_test_features = np.log1p(df_test_concat)","e9145027":"Y_labels = df['SalePrice'].astype(float)\nprint(Y_labels.shape)\nY_labels.head()","55e865bc":"def evaluate_model(name, model, X_train, Y_train):            \n    \n    x_train, x_val, y_train, y_val = train_test_split(X_train, Y_train, test_size=0.2, random_state=RANDOM_SEED)    \n    # Scale the target feature using log(x)\n    model.fit(x_train, np.log(y_train))      \n    # Use the exponential function to return predicted sale prices\n    pred_train = np.exp(model.predict(x_train))\n    pred_val = np.exp(model.predict(x_val))   \n    \n    rmsle_train = np.sqrt(mean_squared_log_error(y_train, pred_train))\n    rmsle_val = np.sqrt(mean_squared_log_error(y_val, pred_val))\n    r2_train = r2_score(y_train, pred_train)\n    r2_val = r2_score(y_val, pred_val)\n    cvs = cross_val_score(model, X_train, np.log(Y_train), cv=5)\n    \n    # Plot the ground truth \n    f, ax = plt.subplots(figsize=(7, 7))\n    plt.scatter(y_train, pred_train, label='Training')\n    plt.scatter(y_val, pred_val, label='Validation')  \n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('${x:,.0f}'))\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter('${x:,.0f}'))\n    plt.plot([0, 8e5], [0, 8e5], c='red')\n    plt.legend()\n    plt.xlabel('Sale Price')\n    plt.xticks(rotation=45)\n    plt.ylabel('Sale Price')\n    plt.title(f'{name}: Ground Truth')\n    plt.show()   \n\n    table = pd.DataFrame(\n                            [rmsle_train, rmsle_val, r2_train, r2_val, mean(cvs)],\n                            index=['RMSLE Training', 'RMSLE Validation', 'R^2 Training', 'R^2 Validation', 'CV Mean'],\n                            columns=[name]\n    )\n    \n    return table","4e4af5ad":"rr = Ridge(random_state=RANDOM_SEED)\nrfr = RandomForestRegressor(random_state=RANDOM_SEED)\nxgb = XGBRegressor(random_state=RANDOM_SEED)\n\nregressors = [rr, rfr, xgb]\nmodel_names = ['RidgeRegressor','RandomForestRegressor', 'XGBRegressor']\nmetrics = []\n\nfor name, reg in zip(model_names, regressors):\n    metrics.append(evaluate_model(name, reg, X_features, Y_labels))\n\ndf_results = pd.concat(metrics, axis=1)    \ndf_results","748b4fc2":"import time\nstart_time = time.time()\n\nparams = {\n    'n_estimators': [50, 100, 300],\n    'max_depth': [3, 6, 9],\n    'subsample': [0.5, 0.8]\n}\n\ngsearch = GridSearchCV(\n    estimator=XGBRegressor(\n        learning_rate=0.1,\n        # Use GPU Accelerator\n        tree_method='gpu_hist', \n        n_jobs=-1,\n        random_state=RANDOM_SEED),\n    param_grid=params,\n    scoring='r2',\n    n_jobs=-1,\n    cv=5\n)\n\ngsearch.fit(X_features, np.log(Y_labels))\nprint(f'Time Elapsed: {time.time() - start_time}s')","cccb015c":"# Display the best parameters for the model and best score\nprint(f'Best Params: {gsearch.best_params_}')\nprint(f'Best Score: {gsearch.best_score_}')","c2ef2cf2":"evaluate_model('XGBRegressor Tuned', gsearch.best_estimator_, X_features, Y_labels)","ef49b600":"# Use the best estimator as the regressor\nreg = gsearch.best_estimator_\nreg.fit(X_features, np.log(Y_labels))","17d4f93d":"# Predict the sale price\npredictions = reg.predict(np.log1p(df_test_concat))\n# Create a dataframe from sale price predictions and test id column\ndf_predictions = pd.DataFrame(np.exp(predictions))\ndf_predictions.columns = ['SalePrice']\n\nsubmission = pd.concat([df_test['Id'], df_predictions.astype(float)], axis=1)\nprint(submission.shape)\nsubmission.head()","07817523":"submission.to_csv('submission.csv', index=False)","0f6ea110":"We'll define our regressors and evaluate them. Ridge regression will be our baseline model since it can handle multiple features better than a standard linear least squares model.","1b3eb1fc":"We'll use the `OrdinalEncoder` again to transform the ordinal data. This will make it so the model can understand degrees of order or class among the feature variables. ","1f14c071":"# 3. Data Cleaning of Train and Test Sets\n\nWe'll set up a small function to return null values from our training and test data.","5bc00804":"The log transformation was effective at reducing kurtosis in the `SalePrice`.  We will use this later when the models are evaluated. Our next task is to assess any missing values in the rest of the dataset.","3fb0d47c":"The best regressor model will be fit on the full training dataset and used to predict house sale prices from the test dataset. Lastly, a table for the predictions will be created and submitted for evaluation.","e043051e":"## 1.3 Load the Training and Test Files","8a9a07c4":"We'll gather all the continuous features into one dataframe for analysis and do the same for the discrete, nominal, and ordinal feature types.","4a51afd9":"# 7. EDA of Ordinal Categorical Features","0bc11ecd":"## 8.2 Perform Feature Scaling\n\nWith the presence of kurtosis throughout the data we'll scale our features using `log(1 + x)`. Our target feature will be scaled using `log(x)`. For prediction, the standard exponential function will be used to return the original price values.","aab9c546":"## 8.1 Calculate the Variance Inflation Factors\n\nThe [variance inflation factor](https:\/\/en.wikipedia.org\/wiki\/Variance_inflation_factor) (VIF) tells us the degree to which an estimated regression coefficient's variance increases because of collinearity. This is applied when we want to know how strongly our data features correlate with each other. Too strong of a correlation between them can affect regression results. We begin this process by building a function to return a VIF table.","6c1fa7ae":"With the test data there are more features where the null values are *not* meaningful, so we need to fill these missing entries. The test data will be cleaned using the same method as the training data.","c63b212a":"The data cleaning stage is completed by dropping `LotFrontage`. Although clever imputation is possible here, there are other features that describe similar aspects of the housing property without a lot of missing entries.","91c9bb64":"# 4. EDA of Continuous Numerical Features","e5e462e6":"The evaluation function we create will assess our models using ground truth regression plots and return a metric table for root mean squared log error (RMSLE), r-squared, and the cross validation mean.","6e597462":"The histogram plot confirms our expectation. This skewed distribution can decline model performance, but a log transformation may reduce kurtosis and improve model performance.  ","47b1e0e7":"Let's investigate the types of data contained within the training and test sets. You can see they contain a combination of objects, integers, and float values. This will be important when we separate the data into categories.","d077205e":"## 1.1 Import Libraries","711d3f3c":"There are different guidelines about the best threshold for VIF:\n* VIF < 10\n* VIF < 5\n* VIF < 2.5\n\nIn regards to this notebook, we'll accept VIF values less than five. The VIF table shows eight features above this threshold, some are exceptionally high.  We'll set up a diagonal correlation matrix to visualize the strength of collinear relationships in the data.","7668dbe5":"High correlation between features can occur when they are describing attributes that are too similar. When we look at the eight features above the VIF threshold we see two themes, house area and building year. \n\n`GrLivArea` describes the house ground living area but there are many other features such as `1stFlrSF` and `2ndFlrSF` that also describe house area, but they don't describe it uniquely enough to avoid strong collinearity.\n\nSince `GrLivArea` has a strong correlation with the target feature, it makes sense to drop other features that describe house area in some way but are not as strongly correlated to the target. This would include features such as `FullBath` which would affect the total living area of a house.\n\nAs seen in the correlation matrix, `YearBuilt` also struggles from multicollinearity. In this case, we'll try dropping `YearBuilt` and retain the features it shares collinearity with. This is because features like `Foundation` and `PavedDrive` are not similar even though they correlate well with `YearBuilt`.  \n\n`MSZoning` will also be dropped. It has strong correlations to `BldgType` and `HouseStyle`, but a weak correlation to the target feature. ","0858a616":"# 6. EDA of Nominal Categorical Features","8bf7fb74":"# 9. Evaluation of Regression Models","480b6e86":"The nominal features are analyzed using a boxplot.  This will give us information on the skewness, range, and median values of the feature categories.","2e59bc17":"We've completed our multicollinearity preprocessing, let's run the VIF calculations on the edited training set to see if anything changed.","439f22bc":"We now have 4 different datasets. They will be concatenated into a single training dataset for processing.","8fb2fcce":"The best performing model is the `XBGRegressor`. A comparison of the training and validation metrics show some overfitting. To confront this problem we'll try some hyperparameter tuning. We'll select some modest parameters for `GridSearchCV` and see if this improves our model performance.","7ab924c6":"# 10. Predict Sale Price from the Test Dataset","3cf84a90":"The training and test datasets should have the same shape.","fbae154d":"# 1. Introduction\n\nPresented here is a data science challenge featuring the Ames Housing Prices [dataset](http:\/\/jse.amstat.org\/v19n3\/decock\/DataDocumentation.txt). This dataset contains information related to the price of houses in Ames, Iowa, U.S.A. The goal is to use regression to estimate the price of unlabeled houses. The presence of different numerical and categorical data types within the set make it a good exercise for exploratory data analysis (EDA).  \n\nIn this notebook, the data types will be split into the following categories: \n* Numerical\n    * Continuous\n    * Discrete \n* Categorical\n    * Nominal \n    * Ordinal \n\nThese will be examined using statistical methods and combined into a final dataset for regression training. The regression models to be evaluated here are: \n1. Ridge Regression\n2. Random Forest Regression\n3. XGBoost Regression","eecd17a7":"# Ames Housing Prices Regression - XGBoost","2e7c1820":"The next step is to fill the meaningful null data in the categorical features. We'll name the category `NA`, since this is used in the variable description for houses lacking certain attributes.","0996f7c3":"Transformation of the nominal data will be done by ordinal encoding. This dataset already contains a number of features that describe similar elements of the housing property. \n\nOne-Hot-Encoding could worsen this problem by adding redundant features to the dataset. This could increase [multicollinearity](https:\/\/en.wikipedia.org\/wiki\/Multicollinearity) and make it more difficult to determine the effects of individual features on the target variable. ","bc57193c":"`GrLivArea` has the highest r-squared score. We'll plot a correlation table and sort by the `SalePrice` to better understand how these features rank in relation to the `SalePrice`. ","cf98b911":"# 8. Preprocessing of the Training Dataset","0fb76159":"Next task is  to visualize the continuous features using the median sale price for color coding. This can show us the importance of certain features in terms of high or low sale prices. Also the coefficient of determination (r-squared) will be calculated to complement our observations.","5076aa83":"# 5. EDA of Discrete Numerical Features","ae56241e":"Kurtosis is high in features such as `MiscVal` and `LotAreaa`, but low in `BsmtUnfSF`. We'll move on to the next feature group and see what we can learn about the data.","a376dc21":"## 1.2 Configure Settings","21385bbc":"Here we see the `SalePrice` descriptive statistics. The mean is greater than the median which can indicate a positive or right skewed kurtosis. We can confirm this by visualizing the data. ","800f1194":"We'll now take the best estimator from `GridSearchCV` and evaluate it with our function.","147dedc4":"We'll use the median price color coding again, this time with a histogram to identify any trends in the discrete data.","064597ea":"A function is created to return a kurtosis table for each feature. We can understand the skewness of each feature which will help us decide which scaling method to use.","b2f28650":"The plot and metrics table shows a reduction in overfitting. This is only with a modest tuning, where a more aggressive tune could yield better results. We are now ready for the final phase of our data science task.","ce25d90a":"The VIF table shows all feature values are now in the acceptable range. Our edits successfully reduced multicollinearity in the data. Now it's time to train our models.","fa48959b":"# 2. EDA of Target Feature","f6e7e6c9":"It seems there are many missing values, but a closer review of the variable description shows that here the null values have meaning. For example, categorical features describing the basement or garage will be null if the house has neither. However, this is not the case for all the categorical or numerical features. "}}