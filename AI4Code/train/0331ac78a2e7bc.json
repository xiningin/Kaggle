{"cell_type":{"59900f6e":"code","ec24dba0":"code","e000bfe5":"code","c98f388d":"code","7ac0ce83":"code","99c5ab11":"code","55172bb7":"code","64a34b25":"code","12aaff63":"code","f032193c":"code","07c6033a":"code","e09d13b9":"code","46430ad1":"code","2ccd1d73":"code","b34f81c4":"code","6cd5b279":"code","3d0066d4":"code","2102bf51":"code","86d84ffa":"code","b4138d8c":"code","7ca939c4":"code","8e01f108":"code","9a32df3f":"code","6241978f":"code","472ed1a2":"code","8698c939":"code","4ae2f037":"code","4e62b918":"code","a6aaa570":"code","9384a1d9":"code","9843a40e":"code","789e6143":"code","5c803f8d":"code","b66b2ce6":"code","91b2c499":"code","74565e08":"code","0bca2294":"code","9a933090":"markdown","efe977e1":"markdown","76235e3b":"markdown","7e2399c0":"markdown","cc50460c":"markdown","2a7bb6e3":"markdown"},"source":{"59900f6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nfrom nltk.corpus import stopwords\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec24dba0":"pd.set_option('display.max_columns', None) \npd.set_option('display.max_rows', None)  \npd.set_option('display.max_colwidth', -1) ","e000bfe5":"# reading the csv file into pandas dataframes\ndf=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')","c98f388d":"df.head()","7ac0ce83":"df['target'].value_counts()","99c5ab11":"#creating a new column- length \n# this gives the length of the post\ndf['length'] = np.NaN\nfor i in range(0,len(df['text'])):\n    df['length'][i]=(len(df['text'][i]))\ndf.length = df.length.astype(int)","55172bb7":"df.head()","64a34b25":"#creating subplots to see distribution of length of tweet\nsns.set_style(\"darkgrid\");\nf, (ax1, ax2) = plt.subplots(figsize=(12,6),nrows=1, ncols=2,tight_layout=True);\nsns.distplot(df[df['target']==1][\"length\"],bins=30,ax=ax1);\nsns.distplot(df[df['target']==0][\"length\"],bins=30,ax=ax2);\nax1.set_title('\\n Distribution of length of tweet labelled Disaster \\n');\nax2.set_title('\\n Distribution of length of tweet labelled No Disaster \\n');\nax1.set_ylabel('Frequency');","12aaff63":"# word cloud for words related to Disaster \ntext=\" \".join(post for post in df[df['target']==1].text)\nwordcloud = WordCloud(max_font_size=90, max_words=50, background_color=\"white\", colormap=\"inferno\").generate(text)\nplt.figure(figsize=(10,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.title('Frequntly occuring words related to Disaster \\n\\n',fontsize=18)\nplt.axis(\"off\")\nplt.show()","f032193c":"# word cloud for words related to No Disaster \ntext=\" \".join(post for post in df[df['target']==0].text)\nwordcloud = WordCloud(max_font_size=90, max_words=50, background_color=\"white\", colormap=\"inferno\").generate(text)\nplt.figure(figsize=(10,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.title('Frequntly occuring words related to No Disaster \\n\\n',fontsize=18)\nplt.axis(\"off\")\nplt.show()","07c6033a":"#Calculating basline accuracy\ndf['target'].value_counts(normalize=True)","e09d13b9":"# Import Tokenizer\nfrom nltk.tokenize import RegexpTokenizer\n# Instantiate Tokenizer\ntokenizer = RegexpTokenizer(r'\\w+') \n# Changing the contents of selftext to lowercase\ndf.loc[:,'text'] = df.text.apply(lambda x : str.lower(x))\n# Removing hyper link, latin characters and digits\ndf['text']=df['text'].str.replace('http.*.*', '',regex = True)\ndf['text']=df['text'].str.replace('\u00fb.*.*', '',regex = True)\ndf['text']=df['text'].str.replace(r'\\d+','',regex= True)\n# \"Run\" Tokenizer\ndf['tokens'] = df['text'].map(tokenizer.tokenize)","46430ad1":"#displaying first 5 rows of dataframe\ndf.head()","2ccd1d73":"# Printing English stopwords\nprint(stopwords.words(\"english\"))","b34f81c4":"#assigning stopwords to a variable\nstop = stopwords.words(\"english\")","6cd5b279":"# adding this stop word to list of stopwords as it appears on frequently occuring word\nitem=['amp'] #'https','co','http','\u00fb','\u00fb\u00f2','\u00fb\u00f3','\u00fb_'","3d0066d4":"stop.extend(item)","2102bf51":"#removing stopwords from tokens\ndf['tokens']=df['tokens'].apply(lambda x: [item for item in x if item not in stop])","86d84ffa":"# When we \"lemmatize\" data, we take words and attempt to return their lemma, or the base\/dictionary form of a word.\n# Importing lemmatizer \nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords\n# Instantiating lemmatizer \nlemmatizer = WordNetLemmatizer()\n\nlemmatize_words=[]\nfor i in range (len(df['tokens'])):\n    word=''\n    for j in range(len(df['tokens'][i])):\n        lemm_word=lemmatizer.lemmatize(df['tokens'][i][j])#lemmatize\n        \n        word=word + ' '+lemm_word # joining tokens into sentence    \n    lemmatize_words.append(word) # store in list\n\n#creating a new column to store the result\ndf['lemmatized']=lemmatize_words\n#displaying first 5 rows of dataframe\ndf.head()","b4138d8c":"#reading the test data\ntest=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv')","7ca939c4":"test.head()","8e01f108":"#creating a new column- length \n# this gives the length of the post\ntest['length'] = np.NaN\nfor i in range(0,len(test['text'])):\n    test['length'][i]=(len(test['text'][i]))\ntest.length = test.length.astype(int)","9a32df3f":"# word cloud for Frequntly occuring words in test dataframe\ntext=\" \".join(post for post in df.text)\nwordcloud = WordCloud(max_font_size=90, max_words=50, background_color=\"white\", colormap=\"inferno\").generate(text)\nplt.figure(figsize=(10,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.title('\\nFrequntly occuring words in test dataframe \\n\\n',fontsize=18)\nplt.axis(\"off\")\nplt.show()","6241978f":"# Import Tokenizer\nfrom nltk.tokenize import RegexpTokenizer\n# Instantiate Tokenizer\ntokenizer = RegexpTokenizer(r'\\w+') \n# Changing the contents of selftext to lowercase\ntest.loc[:,'text'] = test.text.apply(lambda x : str.lower(x))\n# Removing hyper link, latin characters and digits\ntest['text']=test['text'].str.replace('http.*.*', '',regex = True)\ntest['text']=test['text'].str.replace('\u00fb.*.*', '',regex = True)\ntest['text']=test['text'].str.replace(r'\\d+','',regex= True)\n# \"Run\" Tokenizer\ntest['tokens'] = test['text'].map(tokenizer.tokenize)","472ed1a2":"#displaying first 5 rows of dataframe\ntest.head()","8698c939":"#removing stopwords from tokens\ntest['tokens']=test['tokens'].apply(lambda x: [item for item in x if item not in stop])","4ae2f037":"# Importing lemmatizer \nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords\n# Instantiating lemmatizer \nlemmatizer = WordNetLemmatizer()\n\nlemmatize_words=[]\nfor i in range (len(test['tokens'])):\n    word=''\n    for j in range(len(test['tokens'][i])):\n        lemm_word=lemmatizer.lemmatize(test['tokens'][i][j])#lemmatize\n        \n        word=word + ' '+lemm_word # joining tokens into sentence    \n    lemmatize_words.append(word) # store in list\n\n#creating a new column to store the result\ntest['lemmatized']=lemmatize_words\n#displaying first 5 rows of dataframe\ntest.head()","4e62b918":"# word cloud for Frequntly occuring words in test dataframe after lemmatizing\ntext=\" \".join(post for post in test.lemmatized)\nwordcloud = WordCloud(max_font_size=90, max_words=50, background_color=\"white\", colormap=\"inferno\").generate(text)\nplt.figure(figsize=(10,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.title('\\n Frequntly occuring words in test dataframe after lemmatizing \\n\\n',fontsize=18)\nplt.axis(\"off\")\nplt.show()","a6aaa570":"#Text Vectorization using TfidfVectorizer \/\/Convert a collection of raw documents to a matrix of TF-IDF features.\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer()\ntrain_vectors = vectorizer.fit_transform(df[\"lemmatized\"])\n## note that we're NOT using .fit_transform() here. Using just .transform() makes sure\n# that the tokens in the train vectors are the only ones mapped to the test vectors - \n# i.e. that the train and test vectors use the same set of tokens.\ntest_vectors = vectorizer.transform(test[\"lemmatized\"])","9384a1d9":"#imports\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split","9843a40e":"#defining X and y for the model\nX = df['lemmatized']\ny = df['target']","789e6143":"#Text Vectorization using TfidfVectorizer \/\/Convert a collection of raw documents to a matrix of TF-IDF features.\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(X)\nX_test = vectorizer.transform(test[\"lemmatized\"])","5c803f8d":"# Training the Logistic Regression model on the Training set\n#from sklearn.linear_model import LogisticRegression\n#classifier = LogisticRegression(C = 0.1)\n#classifier.fit(X_train, y)","b66b2ce6":"# Training the SVM model on the Training set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train, y)","91b2c499":"from sklearn.metrics import classification_report\ny_pred = classifier.predict(X_test)","74565e08":"# Creating an empty data frame\nsubmission_kaggle = pd.DataFrame()\n# Assigning values to the data frame-submission_kaggle\nsubmission_kaggle['Id'] = test.id\nsubmission_kaggle['target'] = y_pred\n# Head of submission_kaggle\nsubmission_kaggle.head()","0bca2294":"# saving data as  final_kaggle.csv\nsubmission_kaggle.loc[ :].to_csv('final_kaggle.csv',index=False)","9a933090":"# Creating .csv file","efe977e1":"# TEST DATA","76235e3b":"# Tokenization","7e2399c0":"# Logistic Regression Model","cc50460c":"**Removing Stop Words**","2a7bb6e3":"# Support Vector Model"}}