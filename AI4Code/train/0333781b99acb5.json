{"cell_type":{"1cb806fc":"code","58188913":"code","56f125b2":"code","680a7579":"code","e24d0eb2":"code","89ea4c13":"code","01340e0c":"code","9e72f35b":"code","195fc30a":"code","0df98506":"code","2291dcef":"code","d74eebd0":"code","a704e1b8":"code","19dd8a6c":"code","de9666e4":"code","17b8b359":"code","b7090c62":"code","bc3f12da":"code","0142efad":"code","e970a252":"code","2f4d2dc2":"code","b4e0cca5":"code","c77bf144":"code","dffb6015":"code","75079191":"code","f8e153e5":"code","a907acb9":"code","d400b99d":"code","dcb3e7bd":"code","6673618b":"code","805ad83a":"code","bd05546d":"code","2d18343f":"code","c22242d8":"code","9fc6691b":"code","e15f6c95":"code","2febf71d":"code","6075dbb7":"markdown"},"source":{"1cb806fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58188913":"#get all csv files as pandas dataframes\nanime = pd.read_csv('\/kaggle\/input\/anime-recommendations-database\/anime.csv')\nrating = pd.read_csv('\/kaggle\/input\/anime-recommendations-database\/rating.csv')","56f125b2":"#Drop columns which may have little or no use\nanime = anime.drop(['type','episodes','members'],axis=1)\nanime","680a7579":"#I would prefer indivual ratings over generalised ones\nanime = anime.drop(['rating'],axis=1)\nanime","e24d0eb2":"df = pd.merge(anime,rating)\ndf = df.replace(-1,0)","89ea4c13":"df['user_id'].value_counts().shape ","01340e0c":"#number of ratings of each anime\nnumber_rating = df.groupby('name')['rating'].count().reset_index()","9e72f35b":"number_rating.rename(columns={'rating':'number of rating'},inplace=True)","195fc30a":"number_rating.head()","0df98506":"df=df.merge(number_rating,on='name')","2291dcef":"df.shape","d74eebd0":"df.head()","a704e1b8":"#Drop insignifanct ratings,I have taken it as 200 you may take less or more,but the most common for these kind of datasets is 50\ndf=df[df['number of rating']>=200]","19dd8a6c":"df.shape","de9666e4":"df.head()","17b8b359":"df.drop(columns=['number of rating'],inplace=True)","b7090c62":"df.head()","bc3f12da":"df = df.replace('None',0)","0142efad":"df.to_csv('anime.csv',index=False)","e970a252":"#Make a pivot table for more clarity and for making a matrix\nmovie_pivot=df.pivot_table(columns='user_id',index='name',values='rating')","2f4d2dc2":"movie_pivot.shape","b4e0cca5":"movie_pivot.fillna(0,inplace=True)","c77bf144":"pd.set_option('display.max_rows', None)\nmovie_pivot","dffb6015":"df.drop(columns=['user_id','rating'],inplace=True)","75079191":"#Make a matrix\nfrom scipy.sparse import csr_matrix\nmovie_sparse=csr_matrix(movie_pivot)\n","f8e153e5":"#The algorithm\nfrom sklearn.neighbors import NearestNeighbors\nmodel=NearestNeighbors( n_neighbors=10,algorithm='brute',metric='cosine')","a907acb9":"model.fit(movie_sparse)","d400b99d":"df1=df.copy()\n","dcb3e7bd":"distances,suggestions=model.kneighbors(movie_pivot.iloc[1000,:].values.reshape(1,-1))","6673618b":"movie_pivot.iloc[1000,:].values.reshape(1,-1)","805ad83a":"distances","bd05546d":"suggestions","2d18343f":"for i in range(len(suggestions)):\n    print(movie_pivot.index[suggestions[i]])","c22242d8":"#Define a function to recommend animes\ndef reco(anime_name):\n    anime_id=movie_pivot.index.get_loc(anime_name)\n    distances,suggestions=model.kneighbors(movie_pivot.iloc[anime_id,:].values.reshape(1,-1))\n\n    \n    \n    \n    for i in range(len(suggestions)):\n        return (movie_pivot.index[suggestions[i]])\n\n","9fc6691b":"#I would keep user input, but kaggle does not support that\ninp = '91 Days' ","e15f6c95":"res=reco(inp)","2febf71d":"#Here are your results! Now rejoice!\nfor i in res:\n    print(i)","6075dbb7":"If you found this notebook useful, please do upvote"}}