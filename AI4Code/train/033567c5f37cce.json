{"cell_type":{"7c7d9daf":"code","6178ecbb":"code","83c7e4ad":"code","79945740":"code","9dffe424":"code","8494eabd":"code","27213c2c":"code","faadae32":"code","04307c7d":"code","be87a31b":"code","34d4ff74":"code","8a2f6ea0":"code","b8a184c2":"markdown","51c6824c":"markdown","65079cfe":"markdown","dc4d219d":"markdown","ad1d3699":"markdown","3840664d":"markdown","5f755710":"markdown","13857f59":"markdown","5ca127cc":"markdown"},"source":{"7c7d9daf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#This demo executes a random label for the test sample and saves it to the submission\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom kaggle_datasets import KaggleDatasets\nimport numpy as np\nimport random\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nprint(\"Tensorflow version \" + tf.__version__)      \n","6178ecbb":"# Detect TPU, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver() \n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() \n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","83c7e4ad":"GCS_DS_PATH = KaggleDatasets().get_gcs_path() # you can list the bucket with \"!gsutil ls $GCS_DS_PATH\"\n\nIMAGE_SIZE = [224, 224] # at this size, a GPU will run out of memory. Use the TPU\nEPOCHS = 25 # rise to epoch to 25\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\n\nNUM_TRAINING_IMAGES = 12753\nNUM_TEST_IMAGES = 7382\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE","79945740":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef get_training_dataset():\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-224x224\/train\/*.tfrec'), labeled=True)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    return dataset\n\ndef get_validation_dataset():\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-224x224\/val\/*.tfrec'), labeled=True, ordered=False)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-224x224\/test\/*.tfrec'), labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    return dataset\n\ndef ensemble(models, model_input):\n    outputs = [model(model_input) for model in models] # get the output of model given the input image\n    y = tf.keras.layers.Average()(outputs)\n    model = Model(inputs=model_input, outputs=y, name='ensemble')\n    return model\n\ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])\n\ntraining_dataset = get_training_dataset()\nvalidation_dataset = get_validation_dataset()","9dffe424":"with strategy.scope():    \n    pretrained_model1 = tf.keras.applications.InceptionResNetV2(weights='imagenet', include_top=False ,input_shape=[*IMAGE_SIZE, 3])\n    pretrained_model1.trainable = False # transfer learning\n    \n    model1 = tf.keras.Sequential([\n        pretrained_model1,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(104, activation='softmax')\n    ])\n    \n    pretrained_model2 = tf.keras.applications.Xception(weights='imagenet', include_top=False ,input_shape=[*IMAGE_SIZE, 3])\n    pretrained_model2.trainable = False # transfer learning\n    \n    model2 = tf.keras.Sequential([\n        pretrained_model2,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(104, activation='softmax')\n    ])\n    \n    pretrained_model3 = tf.keras.applications.DenseNet201(weights='imagenet', include_top=False ,input_shape=[*IMAGE_SIZE, 3])\n    pretrained_model3.trainable = False # transfer learning\n    \n    model3 = tf.keras.Sequential([\n        pretrained_model3,\n        tf.keras.layers.GlobalAveragePooling2D(),  \n        tf.keras.layers.Dense(104, activation='softmax')\n    ])    \n\nmodel1.compile(\n   optimizer='adam',\n   loss = 'sparse_categorical_crossentropy',\n   metrics=['sparse_categorical_accuracy']\n)\n\nmodel2.compile(\n   optimizer='adam',\n   loss = 'sparse_categorical_crossentropy',\n   metrics=['sparse_categorical_accuracy']\n)\n\nmodel3.compile(\n   optimizer='adam',\n   loss = 'sparse_categorical_crossentropy',\n   metrics=['sparse_categorical_accuracy']\n)\n\nhistory1 = model1.fit(training_dataset, \n          steps_per_epoch=STEPS_PER_EPOCH, \n          epochs=EPOCHS, \n          validation_data=validation_dataset)\n","8494eabd":"display_training_curves(history1.history['loss'], history1.history['val_loss'], 'loss', 211)\ndisplay_training_curves(history1.history['sparse_categorical_accuracy'], history1.history['val_sparse_categorical_accuracy'], 'accuracy', 212)","27213c2c":"history2 = model2.fit(training_dataset, \n          steps_per_epoch=STEPS_PER_EPOCH, \n          epochs=EPOCHS, \n          validation_data=validation_dataset)","faadae32":"display_training_curves(history2.history['loss'], history2.history['val_loss'], 'loss', 211)\ndisplay_training_curves(history2.history['sparse_categorical_accuracy'], history2.history['val_sparse_categorical_accuracy'], 'accuracy', 212)","04307c7d":"history3 = model3.fit(training_dataset, \n          steps_per_epoch=STEPS_PER_EPOCH, \n          epochs=EPOCHS, \n          validation_data=validation_dataset)\n\n","be87a31b":"display_training_curves(history3.history['loss'], history2.history['val_loss'], 'loss', 211)\ndisplay_training_curves(history3.history['sparse_categorical_accuracy'], history3.history['val_sparse_categorical_accuracy'], 'accuracy', 212)","34d4ff74":"test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities1 = model1.predict(test_images_ds)\nprobabilities2 = model2.predict(test_images_ds)\nprobabilities3 = model3.predict(test_images_ds)","8a2f6ea0":"probabilities = (np.array(probabilities1) + np.array(probabilities2) + np.array(probabilities3)) \/ 3.0\n#probabilities3 = model3.predict(test_images_ds)\n#data = np.array(probabilities1, probabilities2, probabilities3)\n#probabilities = np.average(data, axis=0)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)\n\nprint('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')","b8a184c2":"# Its is using keras and tensorflow, Add same libaries first. The fun stuff it is not using TF at all, score 0.00757 - last place\n## raise epoch number image 192x192, use some data augmentation","51c6824c":"Plot out the history","65079cfe":"Plot the second history","dc4d219d":"Predict it","ad1d3699":"# This code wants to explore the difference between guessing and tensorflow ","3840664d":"Some preparations","5f755710":"Train it","13857f59":"Load the data","5ca127cc":"Add some functions for loading data and functions"}}