{"cell_type":{"63f50698":"code","2f7162cc":"code","48c0e3f3":"code","722d0d1e":"code","eb87cff3":"code","76a3b52c":"code","5f3cc4bf":"code","5d649311":"code","077dc774":"code","e4188888":"code","0da3732b":"code","67ad5da6":"code","d8f006f1":"code","88297902":"code","6eddaf09":"code","e7b796c2":"code","307f4a05":"code","7aafb735":"code","7976f308":"code","902b8c5e":"code","c2ba35d2":"code","ca1c70c3":"code","ca32b6fd":"code","9aaa4e5e":"code","f75ff4da":"code","6253c45e":"code","573900d2":"code","e4ca6a83":"code","6daafc29":"code","1993ff40":"code","3c6c4d4b":"code","ac060990":"code","84a92bdf":"code","73eaafd3":"code","35754f72":"code","2fc2a88f":"code","65724717":"code","d83d5b96":"code","13a6ae18":"code","13f9ccba":"code","90733e99":"code","cd126ce3":"code","007b3f38":"code","96a15e93":"code","e27d231c":"code","8b6ab561":"code","05e8d599":"code","079098b6":"code","38962746":"code","b3b86716":"code","ef506387":"code","e5a494e8":"code","417b2b49":"code","e5302654":"code","3b0ba2de":"code","40eaa406":"code","9528a41c":"code","170b6f95":"code","931c1367":"code","d680c992":"code","6c27fd5e":"code","98481f65":"code","ecb4a4f4":"code","52b237a5":"code","d49f063e":"code","664c3c64":"code","ee5024cf":"code","28a04033":"code","fc6dfc2f":"code","2b93179a":"code","3f9f2ff1":"code","eec1bd37":"code","858ca736":"code","9511fcae":"code","72110ed0":"markdown","dabccef6":"markdown","bc0d6282":"markdown","71737b7c":"markdown","15f990dd":"markdown","5e6d1ff6":"markdown","5f58c1ac":"markdown","d2cfe60e":"markdown","e135e7da":"markdown","3d29030e":"markdown","2d01dd09":"markdown","417853f6":"markdown","3d138e93":"markdown"},"source":{"63f50698":"import numpy as np # linear algebra\nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2f7162cc":"import plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport seaborn as sns","48c0e3f3":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_sub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","722d0d1e":"train.shape,test.shape,gender_sub.shape","eb87cff3":"gender_sub.head()","76a3b52c":"train.head()","5f3cc4bf":"test.head()","5d649311":"train.describe()","077dc774":"train.info()","e4188888":"numeric =[\n    'PassengerId',\n    'Age',\n    'SibSp',\n    'Parch',\n    'Fare'\n]\n\ncategoric = ['Name',\n            'Sex',\n            'Pclass',\n            'Ticket',\n            'Cabin',\n            'Embarked',\n            'Survived']","0da3732b":"for i in train[numeric].columns:\n    plt.hist(train[numeric][i])\n    plt.xticks()\n    plt.xlabel(i)\n    plt.ylabel('number of people')\n    plt.grid(True,axis='y')\n    plt.show()","67ad5da6":"for i in train[categoric].columns:\n    sns.barplot(x=train[categoric][i].value_counts().index,\n               y=train[categoric][i].value_counts())\n    plt.xlabel(i)\n    plt.ylabel('number of people')\n    plt.show()","d8f006f1":"# survivors by <Pclass>\ntrain[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived',ascending=False)","88297902":"# survivors by <Sex>\ntrain[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(\nby='Survived',ascending=False)","6eddaf09":"# survivors by <SibSp>\ntrain[['SibSp','Survived']].groupby(['SibSp'],as_index=False).mean().sort_values(\nby='Survived',ascending=False)","e7b796c2":"# survivors by <Parch>\ntrain[['Parch','Survived']].groupby(['Parch'],as_index=False).mean().sort_values(\nby='Survived',ascending=False)","307f4a05":"# survivors by <Embarked>\ntrain[['Embarked','Survived']].groupby(['Embarked'],as_index=False).mean().sort_values(\nby='Survived',ascending=False)","7aafb735":"def fare(df):\n    bins=[0,df['Fare'].quantile(.25),df['Fare'].quantile(.5),df['Fare'].quantile(.75)]\n    df['Fare_sec'] = np.digitize(df.Fare,bins=bins)\n    return df","7976f308":"fare(train)","902b8c5e":"fare(test)","c2ba35d2":"train['Fare_sec'].isnull().sum()","ca1c70c3":"train[['Fare_sec','Survived']].groupby(['Fare_sec'],as_index=False).mean().sort_values(by='Survived',ascending=False)","ca32b6fd":"categoric.append('Fare_sec')","9aaa4e5e":"def age(df):\n    bins=[0,df['Age'].quantile(.25),df['Age'].quantile(.5),df['Age'].quantile(.75)]\n    df['Age_sec'] = np.digitize(df.Fare,bins=bins)\n    return df","f75ff4da":"age(train)","6253c45e":"age(test)","573900d2":"train[['Age_sec','Survived']].groupby(['Age_sec'],as_index=False).mean().sort_values(by='Survived',ascending=False)","e4ca6a83":"categoric.append('Age_sec')","6daafc29":"# referred https:\/\/www.kaggle.com\/kanncaa1\/dataiteam-titanic-eda?scriptVersionId=34792914&cellId=80\nname = train['Name']\ntrain['Title'] = [i.split('.')[0].split(',')[-1].strip() for i in name]","1993ff40":"name2 = test['Name']\ntest['Title'] = [i.split('.')[0].split(',')[-1].strip() for i in name2]","3c6c4d4b":"train['Title'].head","ac060990":"test['Title'].head()","84a92bdf":"train['Title'].nunique()","73eaafd3":"test['Title'].nunique()","35754f72":"sns.countplot(x='Title',data=train)\nplt.xticks(rotation=60)\nplt.show()","2fc2a88f":"sns.countplot(x='Title',data=test)\nplt.xticks(rotation=60)\nplt.show()","65724717":"# convert to categorical\n# referred https:\/\/www.kaggle.com\/kanncaa1\/dataiteam-titanic-eda?scriptVersionId=34792914&cellId=83\ntrain['Title'] = [0 if i == 'Master' else 1 if i == 'Miss' or i == 'Ms' or \n                  i == 'Mlle' or i == 'Mrs' else 2 if i == 'Mr' else 3 for i in train['Title']]\ntrain['Title'].head(20)","d83d5b96":"test['Title'] = [0 if i == 'Master' else 1 if i == 'Miss' or i == 'Ms' \n                 or i == 'Mrs' else 2 if i == 'Mr' else 3 for i in test['Title']]\ntest['Title'].head(20)","13a6ae18":"train[['Title','Survived']].groupby(['Title'],as_index=False).mean().sort_values(by='Survived',ascending=False)","13f9ccba":"categoric.append('Title')","90733e99":"# All family members on board except oneself\ndef tot(df):\n    df['tot_fam'] =df['SibSp'] + df['Parch']\n    return df","cd126ce3":"tot(train)","007b3f38":"tot(test)","96a15e93":"categoric.append('tot_fam')","e27d231c":"train['Ticket'].unique()","8b6ab561":"# referred https:\/\/www.kaggle.com\/kanncaa1\/dataiteam-titanic-eda?scriptVersionId=34792914&cellId=107\ndef ticket (df):\n    tickets=[]\n    for i in list(df.Ticket):\n        if not i.isdigit():\n            tickets.append(i.replace('.','').replace('\/','').strip().split(' ')[0])\n        else:\n            tickets.append('x')\n    df['Ticket']=tickets\n    return df","05e8d599":"ticket(train)","079098b6":"ticket(test)","38962746":"train = train.drop('Name',axis=1)\ntest = test.drop('Name',axis=1)","b3b86716":"train = train.drop('Cabin',axis=1)\ntest = test.drop('Cabin',axis=1)","ef506387":"train = train.drop('PassengerId',axis=1)","e5a494e8":"train.head()","417b2b49":"test.head()","e5302654":"train.shape,test.shape,gender_sub.shape","3b0ba2de":"categoric.remove('Survived')\ncategoric.remove('Name')\ncategoric.remove('Cabin')","40eaa406":"numeric.remove('PassengerId')","9528a41c":"categoric","170b6f95":"numeric","931c1367":"sns.pairplot(train,hue='Survived')\nplt.show()","d680c992":"train.isnull().sum()","6c27fd5e":"sns.countplot(train['Embarked'])","98481f65":"sns.distplot(train['Age'])","ecb4a4f4":"X_train = train.drop('Survived',axis=1)\ny_train = train['Survived']\n\nX_test = test","52b237a5":"X_train.shape, y_train.shape, X_test.shape","d49f063e":"from sklearn.impute import SimpleImputer\nimp_mean = SimpleImputer(missing_values=np.nan,strategy='mean')\nimp_mf = SimpleImputer(missing_values=np.nan,strategy='most_frequent')","664c3c64":"for i in categoric:\n    X_train[i]= imp_mf.fit_transform(X_train[i].values.reshape(-1,1))\n    X_test[i] = imp_mf.transform(X_test[i].values.reshape(-1,1))\nfor i in numeric:\n    X_train[i]= imp_mean.fit_transform(X_train[i].values.reshape(-1,1))\n    X_test[i] = imp_mean.transform(X_test[i].values.reshape(-1,1))","ee5024cf":"X_train.shape, y_train.shape, X_test.shape","28a04033":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\n\nX_train = pd.concat([X_train[numeric],pd.get_dummies(X_train[categoric])],axis=1)\nX_test = pd.concat([X_test[numeric],pd.get_dummies(X_test[categoric])],axis=1)\n\nX_train[numeric]=scaler.fit_transform(X_train[numeric])\nX_test[numeric]=scaler.transform(X_test[numeric])","fc6dfc2f":"X_train.shape, y_train.shape, X_test.shape","2b93179a":"# https:\/\/www.kaggle.com\/michaelbryantds\/titanic-survivors-top-8-accuracy\/notebook?scriptVersionId=76406078&cellId=44\ndiff = list(set(X_train.columns)-set(X_test.columns)) + list(set(X_test.columns)-set(X_train.columns))\n\nfor i in diff:\n    if i not in X_train.columns:\n        X_train[i] = pd.DataFrame(index=range(len(X_train)),columns=[i])\n        X_train.loc[:,i] = 0\n    elif i not in X_test.columns:\n        X_test[i] = pd.DataFrame(index=range(len(X_test)),columns=[i])\n        X_test.loc[:,i] = 0  ","3f9f2ff1":"X_train.shape, y_train.shape, X_test.shape","eec1bd37":"# LogisticRegression with cross_validation\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score,GridSearchCV\n\nlr = LogisticRegression()\ncv = cross_val_score(lr,X_train,y_train,cv=5)\nprint('accuracy: {}'.format(np.mean(cv)))","858ca736":"lr = LogisticRegression()\nparam_grid = {'max_iter' : [15000],\n              'C' : np.arange(.5,1.5,.1)\n             }\nclf_lr = GridSearchCV(lr, param_grid = param_grid, cv = 5, n_jobs = -1)\nbest_clf_lr = clf_lr.fit(X_train,y_train)","9511fcae":"pred = clf_lr.predict(X_test)\npass_id = test.pop('PassengerId')\n\noutput = pd.DataFrame({'PassengerId': pass_id, 'Survived': pred})\n\noutput.to_csv('sub1.csv',index=False)","72110ed0":"### scale numeric variable","dabccef6":"### ticket","bc0d6282":"## ","71737b7c":"### Age -> Age_sec","15f990dd":"## ","5e6d1ff6":"###  drop columns","5f58c1ac":"## EDA \n#### referred to https:\/\/www.kaggle.com\/michaelbryantds\/titanic-survivors-top-8-accuracy?scriptVersionId=76406078&cellId=9","d2cfe60e":"### SibSp & Parch -> tot_fam","e135e7da":"### Name -> Title","3d29030e":"## Imputation , Scale ","2d01dd09":"### fare -> fare_sec","417853f6":"## Feature Engineering","3d138e93":"## ML"}}