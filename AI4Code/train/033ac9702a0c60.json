{"cell_type":{"3d87d344":"code","df320a2b":"code","c19f0c67":"code","6a7b98bb":"code","97de5af3":"code","3956a15c":"code","f7fa089d":"code","563b7a6a":"code","3f39052f":"code","1f163183":"code","b6c414c4":"code","d0ef0a22":"code","da7fd19e":"code","2aedfc8b":"code","bb5db4e2":"code","5e6cbf7f":"code","487ef888":"code","0802bdb6":"code","1578cd84":"code","93cd83cc":"code","cef55026":"code","46f1d409":"code","9e995a65":"markdown","0f4caaaa":"markdown","23c5d15b":"markdown","01cd7867":"markdown"},"source":{"3d87d344":"import pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nimport eli5\nfrom IPython.display import Image\nimport os\n\n!ls ..\/input\/\n\nmpl.style.use('ggplot')\nmpl.rcParams['patch.force_edgecolor']=True","df320a2b":"df = pd.read_csv('..\/input\/detect-sarcasm-in-comments\/Train.csv').reset_index(drop=True)\ndf.head()","c19f0c67":"df.isnull().sum()","6a7b98bb":"df.columns","97de5af3":"df['date'] = pd.to_datetime(df['date'],yearfirst=True)\ndf['year'] = df['date'].apply(lambda d: d.year)\n","3956a15c":"comments_by_year = df.groupby('year')['label'].agg([np.sum,np.mean])\ncomments_by_year","f7fa089d":"plt.figure(figsize=(8,6))\ncomments_by_year['mean'].plot(kind='line')\nplt.ylabel('Mean Sarcasm')\nplt.title('Rate of Sarcasm on Reddit')","563b7a6a":"print('Minimum and Maximum Scores')\ndf['score'].min(), df['score'].max()","3f39052f":"# Mean and STD of Score Rating\nmean = df['score'].mean()\nstd = df['score'].std()\nprint('Mean Score and Standard Deviation')\nmean, std","1f163183":"# Distribution of Scores for Sarcastic and Non-Sarcastic Comments\nplt.figure(figsize=(8,6))\ndf[(df['score'].abs()<(10-((df['score'].abs()-mean)\/std))) & (df['label']==1)]['score'].hist(alpha=0.5,label='Sarcastic')\ndf[(df['score'].abs()<(10-((df['score'].abs()-mean)\/std))) & (df['label']==0)]['score'].hist(alpha=0.5,label='Not Sarcastic')\nplt.yscale('linear')\nplt.ylabel('Frequency')\nplt.xlabel('Score')\nplt.legend()\nplt.title('Scores for Sarcastic vs. None-Sarcastic Comments')","b6c414c4":"# Distribution of LogBase10 Scores for Sarcastic and Non-Sarcastic Comments \nplt.figure(figsize=(8,6))\ndf[(df['score'].abs()<(10-((df['score'].abs()-mean)\/std))) & (df['label']==1)]['score'].hist(alpha=0.5,label='Sarcastic')\ndf[(df['score'].abs()<(10-((df['score'].abs()-mean)\/std))) & (df['label']==0)]['score'].hist(alpha=0.5,label='Not Sarcastic')\nplt.yscale('log')\nplt.ylabel('Log Base10 Frequency')\nplt.xlabel('Score')\nplt.legend()\nplt.title('LogBase10-Scores for Sarcastic vs. None-Sarcastic Comments')","d0ef0a22":"# Natural Log Length of Comments for Sarcastic and Non-Sarcastic Comments\nplt.figure(figsize=(8,6))\ndf['log_comment'] = df['comment'].apply(lambda text: np.log1p(len(text)))\ndf[df['label']==1]['log_comment'].hist(alpha=0.5,label='Sarcastic')\ndf[df['label']==0]['log_comment'].hist(alpha=0.5,label='Sarcastic')\nplt.legend()\nplt.title('Natural Log Length of Comments')","da7fd19e":"# Sarcastic Comments by Reddit Users\ndf.groupby('user')['label'].agg([np.sum,np.mean,np.size]).sort_values(by='sum',ascending=False).head(5)","2aedfc8b":"df.columns","bb5db4e2":"X = df['comment']\ny = df['label']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=28)","5e6cbf7f":"model = Pipeline([('tfidf',TfidfVectorizer(min_df=2)),\n                    ('logit',LogisticRegression(solver='lbfgs', max_iter=3000))])\nparameters = {'tfidf__ngram_range':[(1,1),(1,2)],'tfidf__use_idf':(True,False)}","487ef888":"grid = GridSearchCV(estimator=model,param_grid=parameters,verbose=2,n_jobs=-1, cv=3, refit=True)","0802bdb6":"%%time\ngrid.fit(X_train,y_train)","1578cd84":"grid.best_params_","93cd83cc":"%%time\nchosen_model = Pipeline([('tfidf',TfidfVectorizer(min_df=2, ngram_range=(1,2),use_idf=True)),\n                    ('logit',LogisticRegression(solver='lbfgs', max_iter=3000))])\nchosen_model.fit(X_train,y_train)","cef55026":"predictions = chosen_model.predict(X_test)\nprint('Accuracy Score: {:.2%}'.format(accuracy_score(y_test,predictions)),'\\n')","46f1d409":"# Plot Confusion Matrix\n\ncm = pd.DataFrame(confusion_matrix(y_test,predictions), index=['NOT SARCASTIC','SARCASTIC'],columns=['NOT SARCASTIC','SARCASTIC'])\n\nfig = plt.figure(figsize=(8,6))\nax = sns.heatmap(cm,annot=True,cbar=False, cmap='Blues',linewidths=0.5,fmt='.0f')\nax.set_title('SARCASM DETECTION CONFUSION MATRIX',fontsize=16,y=1.25)\nax.set_ylabel('ACTUAL',fontsize=14)\nax.set_xlabel('PREDICTED',fontsize=14)\nax.xaxis.set_ticks_position('top')\nax.xaxis.set_label_position('top')\nax.tick_params(labelsize=12)","9e995a65":"Sarcastic comments have more negative scores.","0f4caaaa":"*(no sarcasm detected)*","23c5d15b":"## **3. Evaluate the Model**","01cd7867":"The most sarcastic user on reddit is Biffingston."}}