{"cell_type":{"b4636697":"code","3f0faab1":"code","5be72367":"code","ff45e9de":"code","5184d53c":"code","c464ba1a":"code","b8698a47":"code","7077cd7f":"code","278e8212":"code","21a4946f":"code","1d502dd6":"code","fdab049b":"code","5383b047":"code","3d5807c7":"code","60a820c3":"code","05887e87":"code","b5ade1f8":"code","d6115634":"code","6cda98cc":"code","59e10eeb":"code","efa1a0a9":"code","478f03dd":"code","30db335e":"code","52f579c0":"code","0a48a7fb":"code","fcc14026":"code","f8b68c64":"code","df2e79d1":"code","7bb8cfdf":"code","9a545fbe":"code","ab4fc588":"code","9c91ab49":"code","ff0a34eb":"code","90208898":"code","0f497480":"code","9ae13a72":"code","b5f4a61a":"code","df34e5e8":"code","e5843112":"code","1ae2a22c":"code","ea7bd4a5":"code","9b135e4a":"code","b705077b":"code","0cfc6244":"code","09e7c67f":"code","dae772a7":"code","57c9e492":"code","25338540":"code","a344054e":"code","6eba1adf":"code","3f7d7660":"code","a1bafe98":"code","e2767842":"code","d9ce6abf":"code","cc61406a":"code","50f15da7":"code","dc5a2924":"code","81d1ff23":"code","2b811b1e":"code","5e716b3c":"markdown","dd0a89dc":"markdown","1dbb385c":"markdown","01d0874d":"markdown"},"source":{"b4636697":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","3f0faab1":"df = pd.read_csv('..\/input\/EDA_data.csv', index_col = 0, header = 0)","5be72367":"pd.set_option('display.max_columns', None)","ff45e9de":"#Df partial view\n#Df info\n#Df shape\n#Df Descriptive Statistics (Mean, Minimum, Maximum)\n#Variables distributions\n#Variable correlations","5184d53c":"#Df partial view\n#Df shape\n\nprint('DataFrame shape is {}'.format(df.shape))\nprint('\\nDataFrame partial view:')\ndf.head()","c464ba1a":"#Df info about columns names, null values(no null values, beacues I did some ETL) and data types\n\ndf.info()","b8698a47":"#Df Descriptive Statistics (Mean, Minimum, Maximum)\n\n#Columns 9 to 28 are just categorical data, so I'll look at them later\ndf.describe().iloc[:,:6]","7077cd7f":"#From here, we already can extract some useful information, like average runtime of moveis, avearage budget, \n#quartiles and so on.\n#But this insights better be visualized in some beautiful way","278e8212":"#Variables distributions\n\nnum_columns = ['budget', 'popularity', 'revenue', 'runtime']","21a4946f":"#As we can see from desrciptive statistics even 75 procentile for 'budget' is 0, so there is a lot of 0's in this column\n#Beacuse of this I'll use non 0 values for building histograms","1d502dd6":"#As there is a huge range difference between min and max values I'll draw plots using 90 procentile to set axis x limit\n\ndef draw_hist(series, name):\n    '''\n    Draws sns.hist with xlim(0, 95 procentile) \n    '''\n    series = series.loc[series != 0]\n    sorted = series.sort_values()\n    procentile = sorted.iloc[int(0.9 * sorted.size)]\n    \n    hist = sns.distplot(series[series < procentile])\n    hist.set_xlim((0, procentile))\n    hist.set_title('{} distribution'.format(name), fontsize = 12)\n    plt.show()\n    \n    return ","fdab049b":"for i in range(4):\n    draw_hist(df[num_columns[i]], num_columns[i])\n    plt.show()","5383b047":"#Variable correlations","3d5807c7":"#Since we already have num features lets start with them","60a820c3":"corr = df[num_columns].corr()","05887e87":"plt.figure(figsize = (8,6))\n\ncmap = ['deepskyblue', 'gray', 'gray', 'gray', 'deepskyblue']\nsns.heatmap(corr, linewidth = .5, annot = True, vmin = -1, vmax = 1, center = 0, cmap = cmap)\n\nplt.show()","b5ade1f8":"#So you  see from here, that there is some correlation beetwen revenue and budget, which makes sense.\n#But, what is interesting, relation between popularity and revenue is not so strong, as I assumed.","d6115634":"#As there are a lot of 0s in this dataset, and this gives ground to doubt. So I'll drop 0 values and see what will change","6cda98cc":"test = df[num_columns].copy()\ntest.shape","59e10eeb":"test.describe()","efa1a0a9":"test = test.loc[test['budget'] > 0 ]","478f03dd":"test.describe()","30db335e":"test.shape","52f579c0":"#From here we can conclude, that most of rows that contains 0 in budget also contains 0 in revenue, which is some kind of \n#possitive, becaues we don`t lose inforamtion by droping this rows","0a48a7fb":"test = test.loc[test['revenue'] > 0 ]","fcc14026":"test.shape","f8b68c64":"fig, (axis1, axis2)= plt.subplots(1,2, figsize = (14,6))\n\naxis1 = sns.heatmap(corr, linewidth = .5, annot = True, vmin = -1, vmax = 1, center = 0, cmap = cmap, ax = axis1)\naxis1.set_title('With 0s\\n', fontsize = 12)\n\naxis2 = sns.heatmap(test.corr(), linewidth = .5, annot = True, vmin = -1, vmax = 1, center = 0, cmap = cmap, ax = axis2)\naxis2.set_title('Without 0\\n', fontsize = 12)\n\nplt.show()","df2e79d1":"#Like we can see, almost all values decreased. It can be beacuse of relatilvly small dataset(5295 vs 45107) or \n#it can be more clear interpretation of the real situation","7bb8cfdf":"#For more coplex analyse we need to look at some scatter plots","9a545fbe":"sns.pairplot(df[num_columns], palette = 'deepskyblue', corner = True)\nplt.show()","ab4fc588":"sns.pairplot(test, palette = 'deepskyblue', diag_kind = 'kde', corner = True)\nplt.show()","9c91ab49":"#Categorical anlysis","ff0a34eb":"#Lest see if there is some relation between movie genres","90208898":"cat = df.iloc[:,9:]","0f497480":"plt.figure(figsize = (16,8))\nsns.heatmap(cat.corr(), cmap = cmap, linewidth = 0.5, annot = True, vmin = -1, vmax = 1, center = 0)\nplt.show()","9ae13a72":"#As expected, there is no significant relation between genres","b5f4a61a":"#Revenue of each genre barplot \/ Most profitable genre","df34e5e8":"total_rev = []\ngenres = df.columns[9:]\n\nfor genre in genres:\n    total = df.loc[df[genre] == 1]['revenue'].sum()\n    total_rev.append(int(total))","e5843112":"rev_barplot_df = pd.DataFrame(index = genres, data = total_rev, columns = ['total_rev'])\nrev_barplot_df = rev_barplot_df.sort_values(by = 'total_rev', ascending = False)\nrev_barplot_df.head()","1ae2a22c":"plt.figure(figsize = (7,4))\n\nrev_barplot = sns.barplot(data = rev_barplot_df, x = rev_barplot_df.index, y = 'total_rev', \n                          palette = sns.color_palette(\"ch:2.5,-.2,dark=.3\"))\nrev_barplot.set_title('Total revenue of each genre\\n', fontsize = 12)\n\nplt.xticks(rotation = 70)\nplt.show()","ea7bd4a5":"#Popularity of each genre","9b135e4a":"total_pop = []\n\nfor genre in genres:\n    pop = df[genre].value_counts().loc[1]\n    total_pop.append(pop)","b705077b":"pop_barplot_df = pd.DataFrame(data = total_pop, index = genres, columns = ['total_pop'])\npop_barplot_df = pop_barplot_df.sort_values(by = 'total_pop', ascending  = False)\npop_barplot_df.head()","0cfc6244":"plt.figure(figsize = (7,4))\n\npop_barplot = sns.barplot(data = pop_barplot_df, x = pop_barplot_df.index, y = 'total_pop', \n                          palette = sns.color_palette(\"ch:2.5,-.2,dark=.3\"))\npop_barplot.set_title('Popularity of each genre\\n', fontsize = 14)\n\nplt.xticks(rotation = 70)\nplt.show()","09e7c67f":"fig, (ax1, ax2) = plt.subplots(1,2, figsize = (16,4))\nfig.suptitle('Comparison', fontsize = 18)\n\nax1 = sns.barplot(data = rev_barplot_df, x = rev_barplot_df.index, y = 'total_rev', \n                                                                   palette = sns.color_palette(\"ch:2.5,-.2,dark=.3\"), ax = ax1)\nax1.set_xticklabels(labels = rev_barplot_df.index, rotation = 70)\nax1.set_title('Total revenue of each genre', fontsize = 14)\n\n\nax2 = sns.barplot(data = pop_barplot_df, x = pop_barplot_df.index, y = 'total_pop', \n                                                                    palette = sns.color_palette(\"ch:2.5,-.2,dark=.3\"), ax = ax2)\nax2.set_xticklabels(labels = pop_barplot_df.index, rotation = 70)\nax2.set_title('Popularity of each genre', fontsize = 14)\n\n\nplt.show()","dae772a7":"fig, (ax1, ax2) = plt.subplots(2,1, figsize = (9, 8))\nplt.subplots_adjust(hspace = .6)\n\n\nax1 = sns.barplot(data = rev_barplot_df, x = rev_barplot_df.index, y = 'total_rev', \n                                                                   palette = sns.color_palette(\"ch:2.5,-.2,dark=.3\"), ax = ax1)\nax1.set_xticklabels(labels = rev_barplot_df.index, rotation = 70)\nax1.set_title('Total revenue of each genre', fontsize = 14)\n\n\nax2 = sns.barplot(data = pop_barplot_df, x = pop_barplot_df.index, y = 'total_pop', \n                                                                    palette = sns.color_palette(\"ch:2.5,-.2,dark=.3\"), ax = ax2)\nax2.set_xticklabels(labels = pop_barplot_df.index, rotation = 70)\nax2.set_title('Popularity of each genre', fontsize = 14)\n\n\nplt.show()","57c9e492":"scatter_df = rev_barplot_df.join(pop_barplot_df)","25338540":"scatter_df.head()","a344054e":"plt.figure(figsize = (7,5))\nsns.scatterplot(data = scatter_df, x = 'total_rev', y = 'total_pop', marker = 'o', s = 50, color = 'deepskyblue')\nplt.show()","6eba1adf":"sns.jointplot(data = scatter_df, x = 'total_rev', y = 'total_pop', kind = 'kde')\nplt.show()","3f7d7660":"df.head()","a1bafe98":"#Company's mean revenue of all time\n\ncomp_mean_rev = pd.DataFrame(df.groupby(['production_companies'])['revenue'].mean()).sort_values(by = 'revenue', \n                                                                                                 ascending = False)\ncomp_mean_rev['revenue'] = comp_mean_rev['revenue'].round(2)\ncomp_mean_rev","e2767842":"comp_mean_rev.rename(index = {'Twentieth Century Fox Film Corporation': '20th Century Fox',\n                             'Metro-Goldwyn-Mayer (MGM)': 'Metro Goldwyn Mayer'}, inplace = True)","d9ce6abf":"plt.figure(figsize = (8,5))\n\n\ncomp_mean_rev_barplot = sns.barplot(data = comp_mean_rev, x = ['Universal Pictures', '20th Century Fox', 'Paramount Pictures',\n       'Warner Bros.', 'Metro Goldwyn Mayer', 'other'], y = 'revenue', palette = sns.color_palette('Blues_d'))\ncomp_mean_rev_barplot.set_title('Companies mean revenue', fontsize = 14)\ncomp_mean_rev_barplot.set_ylim((0,70))\nsns.set_style('whitegrid')\nsns.despine()\n\ninter = iter(range(6))\n\nfor index, row in comp_mean_rev.iterrows():\n    comp_mean_rev_barplot.text(y = row.revenue, x = next(inter), s = str(row.revenue) + ' mln'+'\\n', \n                                                                                    color='black', ha=\"center\", fontsize = 12)\n\n\nplt.xticks(rotation = 20)\nplt.show()","cc61406a":"#Companiy's total revenue per year\n#Just for convenience I'll plot info only for 2000s\n\ncomp_rev = df[['production_companies', 'release_year', 'revenue']].loc[df['release_year'] > 2000]","50f15da7":"comp_rev_annual = comp_rev.loc[comp_rev['production_companies'] == 'Warner Bros.'].groupby(['release_year']).sum()\ncomp_rev_annual.reset_index(inplace = True)","dc5a2924":"production_companies = list(df['production_companies'].unique())","81d1ff23":"fig, axis = plt.subplots(3,2, figsize = (14, 12))\nplt.subplots_adjust(hspace = 0.4, wspace = 0.15)\nplt.suptitle('Company\\'s total revenue per year', fontsize = 18)\n\naxis = axis.ravel()\nsns.set_style('whitegrid')\nsns.despine()\n\n\nfor i in range(6):\n    \n    comp_rev_annual = comp_rev.loc[comp_rev['production_companies'] == production_companies[i]].groupby(['release_year']).sum()\n    comp_rev_annual.reset_index(inplace = True)\n    \n    lineplot = sns.lineplot(x = 'release_year', y = 'revenue', data = comp_rev_annual, ax = axis[i], color = 'deepskyblue', \n                                                                                                                linewidth = 1.5)\n    lineplot.set_title(production_companies[i], fontsize = 14)\n    lineplot.set_xlim((2000, 2020))\n    lineplot.set_xticks(list(range(2000, 2021, 2)))\n    lineplot.set_ylim((-100, comp_rev_annual['revenue'].max() * 1.2))","2b811b1e":"#Companiy's mean revenue per year\n\n\nfig, axis = plt.subplots(3,2, figsize = (14, 12))\nplt.subplots_adjust(hspace = 0.4, wspace = 0.15)\nplt.suptitle(\"Company's mean revenue per year\", fontsize = 18)\n\naxis = axis.ravel()\nsns.set_style('whitegrid')\nsns.despine()\n\n\n\nfor i in range(6):\n    \n    comp_rev_annual = comp_rev.loc[comp_rev['production_companies'] == production_companies[i]].groupby(['release_year']).mean()\n    comp_rev_annual.reset_index(inplace = True)\n    \n    lineplot = sns.lineplot(x = 'release_year', y = 'revenue', data = comp_rev_annual, ax = axis[i], color = 'deepskyblue',\n                                                                                                               linewidth = 1.5)\n    lineplot.set_title(production_companies[i], fontsize = 14)\n    lineplot.set_xlim((2000, 2020))\n    lineplot.set_xticks(list(range(2000, 2021, 2)))\n    lineplot.set_ylim((-5, comp_rev_annual['revenue'].max() * 1.2))","5e716b3c":"### This is EDA of movies dataset, that I found in Kaggle(the link below), and have done some ETL previously.\nhttps:\/\/www.kaggle.com\/rounakbanik\/the-movies-dataset","dd0a89dc":"## Categorical analysis","1dbb385c":"## Categorical analysis","01d0874d":"#### Lets start with some tO_Do list"}}