{"cell_type":{"3af274b4":"code","0883332f":"code","42e004d9":"code","22e7fda5":"code","93b8beb8":"code","3b8f1ab4":"code","69e9825e":"code","72e440da":"code","8026900e":"code","81072e66":"code","4fb235ad":"code","b6b2b1d3":"code","3fb52af8":"code","4cca4e0c":"code","2440cf54":"code","8c610bfb":"code","c1f3e1df":"code","a496f0e2":"code","3d3b2247":"code","af545a6b":"code","587bed74":"code","552e8edb":"code","bd3ab8f8":"code","0d8d26c4":"code","d9b4495c":"code","5fc3469e":"code","d8e1e1e2":"markdown","00909956":"markdown","a7ae4e76":"markdown","6053092b":"markdown","6dc671c8":"markdown","59684f42":"markdown","03f9d6de":"markdown","f71af27f":"markdown"},"source":{"3af274b4":"# import dependencies\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler","0883332f":"# read data\ndf = pd.read_csv(\"..\/input\/default-of-credit-card-clients-dataset\/UCI_Credit_Card.csv\")\n\n# view head of data\ndf.head()\n\n#rename column for convenience\ndf.rename(columns ={\"default.payment.next.month\":\"default payment\" },inplace=True)","42e004d9":"# Shape of the data\nprint(df.shape)\n# features included\ndf.columns","22e7fda5":"df.info()","93b8beb8":"# Cardinality\ndf.nunique()\n\n# Due to the cardinality and features description we can conclude that \n# 'SEX','EDUCATION', 'MARRIAGE' can be considered as categorical features","3b8f1ab4":"# Check for missing values\n\nsns.heatmap(df.isna())","69e9825e":"# Categorical features\ndf[['SEX','EDUCATION','MARRIAGE']].describe()","72e440da":"# Numeric feature 'PAY'\ndf[['PAY_0','PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']].describe()","8026900e":"# Numeric feature 'BILL_AMT'\ndf[['BILL_AMT1', 'BILL_AMT2','BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6']].describe()","81072e66":"# Numeric feature 'PAY_AMT'\ndf[['PAY_AMT1','PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']].describe()","4fb235ad":"# the data seems to be imbalanced\nsns.countplot(df['default payment'])","b6b2b1d3":"# General visualization\n\nfeatures_cat  = ['SEX','EDUCATION','MARRIAGE']\n\nfig, axes = plt.subplots(ncols=2,nrows=3,figsize=(15,9))\n\nfor i in range(0,len(features_cat)):\n    sns.countplot(x = df[features_cat[i]], hue = df['default payment'],ax = axes[i][0] )\n    sns.countplot(df[features_cat[i]],ax = axes[i][1])\n\n","3fb52af8":"# Ratio of defaulters in each class of categorical features\n\nfig, axes = plt.subplots(ncols=1,nrows=3,figsize=(15,10))\n\nfeatures_cat  = ['SEX','EDUCATION','MARRIAGE']\n\nfor i in range(0,len(features_cat)):\n    feature = features_cat[i]\n    classes = df[feature].unique().tolist()\n    ratio = []\n    for c in classes:\n        total = df[ df[feature] == c ].shape[0]\n        defaulters = df[ (df[feature] == c) & (df['default payment']==1)].shape[0]\n        r = defaulters\/total\n        ratio.append(r)\n    sns.barplot(x = classes,y=ratio,ax = axes[i])\n    axes[i].set_title(feature)\n    ","4cca4e0c":"# for PAY\nfig,axes = plt.subplots(ncols=2,nrows=3,figsize=(15,10))\nsns.countplot(x = 'PAY_0',hue = 'default payment',data=df,ax = axes[0][0])\nsns.countplot(x = 'PAY_2',hue = 'default payment',data=df,ax = axes[0][1])\nsns.countplot(x = 'PAY_3',hue = 'default payment',data=df,ax = axes[1][0])\nsns.countplot(x = 'PAY_4',hue = 'default payment',data=df,ax = axes[1][1])\nsns.countplot(x = 'PAY_5',hue = 'default payment',data=df,ax = axes[2][0])\nsns.countplot(x = 'PAY_6',hue = 'default payment',data=df,ax = axes[2][1])","2440cf54":"def plot_numeric_feature(feature,feature_list,df):\n    default = df[ df['default payment']==1 ]\n    non_default = df[ df['default payment']==0 ]\n    \n    if (len(feature_list)==1):\n        fig, axes = plt.subplots(ncols=1,nrows=1,figsize=(9,6))\n    else:\n        fig, axes = plt.subplots(ncols=2,nrows=3,figsize=(15,9))\n        \n    fig.suptitle(\"Distributions for \" + feature)\n\n    for i in range (0,len(feature_list)):\n        f = feature_list[i]\n        if (i%2==0):\n            k = 0\n            j = int(i\/2)\n        else:\n            k = 1\n            j = int(i\/2)\n        if (len(feature_list)!=1):\n            sns.distplot(default[f],label=\"default\",color='red',ax = axes[j][k])\n            sns.distplot(non_default[f],label=\"non-default\",color='green',ax=axes[j][k])\n        else:\n            sns.distplot(default[f],label=\"default\",color='red')\n            sns.distplot(non_default[f],label=\"non-default\",color='green')\n    fig.legend()\n    \n            \n            \n    ","8c610bfb":"# 'PAY_0','PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6'\n# 'BILL_AMT1', 'BILL_AMT2','BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6'\n# 'PAY_AMT1','PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6'\n\nfeature_pay = ['PAY_0','PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']\nfeature_bill_amt = ['BILL_AMT1', 'BILL_AMT2','BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6']\nfeature_pay_amt = ['PAY_AMT1','PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']\n\nplot_numeric_feature(\"PAY\",feature_pay,df)\n\nplot_numeric_feature(\"BILL AMT\",feature_bill_amt,df)\n\nplot_numeric_feature(\"PAY AMT\",feature_pay_amt,df)\n\n# The distributions for all numeric features appear similar for defaulters and non-defaulters\n\n","c1f3e1df":"bal = ['LIMIT_BAL']\nplot_numeric_feature(\"LIMIT_BAL\",bal,df)\n\n# The distribution for defaulters and non-defaulters is similar, no starking differences observed.\n# The max balance limit for defaulers and non-defaulters is same.\n\n# The height difference indicates that people with limit balance less than 100000 tend to default more.\n\n# Which implies that given that a person has limit balance value <= 100000  , it is more likely that he\/she\n# will default.","a496f0e2":"df_defaulter_education = df[ (df['EDUCATION']==2) | (df['EDUCATION']==3) ]\nbal = ['LIMIT_BAL']\nplot_numeric_feature(\"LIMIT_BAL for education category 2 or 3\",bal,df_defaulter_education)","3d3b2247":"values = df['LIMIT_BAL'].value_counts().index\nfreq = df['LIMIT_BAL'].value_counts().values\ndefaults = [   df[ (df['LIMIT_BAL'] == bal) & (df['default payment']==1) ].shape[0] for bal in values    ]\n\ndf_limit_bal = pd.DataFrame(list(zip(values, freq,defaults)), columns =['values', 'freq','defaults'])  \n\nsns.set_color_codes(\"pastel\")\nfig = plt.subplots(figsize=(15,20))\n\nax = sns.barplot(x=\"freq\", y=\"values\", data=df_limit_bal,label=\"total\",orient='h',color=\"b\")\n\nsns.barplot(x=\"defaults\", y=\"values\", data=df_limit_bal,label=\"defaults-involved\",orient='h', color=\"r\")\n\nax.set(ylabel=\"balance values\",xlabel=\"Frequency count\")\nplt.legend()\n","af545a6b":"df_limit_bal['default_ratio'] = df_limit_bal.apply(lambda x: x['defaults']\/x['freq'],axis=1 )\n\nsns.set_color_codes(\"pastel\")\nfig = plt.subplots(figsize=(15,20))\n\nsns.barplot(x = \"default_ratio\",y = \"values\",data=df_limit_bal,orient='h')\n","587bed74":"# default ratio is max for bal = 327680 followed by bal = 740000, but the sample size is very small hence we cant\n# cant conclude\n\ndf_limit_bal.sort_values(by = \"default_ratio\",ascending=False).tail(25)","552e8edb":"# PAY\n# 'PAY_0','PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6'\ndata_pay = df[['PAY_0','PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']]\nsns.heatmap(data_pay.corr())\n\n# Correlation decreases with previous previous months. \n# There is least correlation between PAY_0(first value) and PAY_6(latest value)","bd3ab8f8":"# BILL AMT\n# 'BILL_AMT1', 'BILL_AMT2','BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6'\ndata_bill_amt = df[['BILL_AMT1', 'BILL_AMT2','BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6']]\nsns.heatmap(data_bill_amt.corr())\n\n# BILL AMT also shows similar trends like PAY","0d8d26c4":"# PAY AMT\n# 'PAY_AMT1','PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6'\n\ndata_pay_amt = df[['PAY_AMT1','PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']]\nsns.heatmap(data_pay_amt.corr())\n\n# No correlation between pay amounts at all.","d9b4495c":"# Scale the data\nscaler = StandardScaler()\nscaler.fit(df.drop('default payment',axis=1))\nscaled_features = scaler.transform(df.drop('default payment',axis=1))\ndf_feat = pd.DataFrame(scaled_features,columns=df.columns[:-1])\ndf_feat['default payment'] = df['default payment']","5fc3469e":"df_feat.head()","d8e1e1e2":"## Scale the data","00909956":"PAY_0: Repayment status in September, 2005 (-1=pay duly, 1=payment delay for one month, 2=payment delay for two months, \u2026 8=payment delay for eight months, 9=payment delay for nine months and above)\n\nPAY_2: Repayment status in August, 2005 (scale same as above)\n\nPAY_3: Repayment status in July, 2005 (scale same as above)\n\nPAY_4: Repayment status in June, 2005 (scale same as above)\n\nPAY_5: Repayment status in May, 2005 (scale same as above)\n\nPAY_6: Repayment status in April, 2005 (scale same as above)","a7ae4e76":"<center><h2> Analyse Numeric features <\/h2><\/center>","6053092b":"## Correlation between features","6dc671c8":"### Ratio of defaulters in each class of categorical features\n\n#### SEX\n* Category 1 has slighly higher probablity to cause a default.\n\n#### EDUCATION\n* Category 2,3 more likely to cause default compared to 4,5,6.\n\n#### MARRIAGE\n* Category 0 is least likely to cause a default.","59684f42":"<center><h2> Analyse categorical features <\/h2><\/center>","03f9d6de":"## EDA","f71af27f":"## Target distibution analysis"}}