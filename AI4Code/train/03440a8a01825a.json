{"cell_type":{"c927409b":"code","d9bdcd3d":"code","3eb49843":"code","dfbd0717":"code","45f83238":"code","708a7bca":"code","cc737b42":"code","5dc276ed":"code","7bc2908f":"code","b13a57d9":"code","38eb5cf4":"markdown","603d328a":"markdown"},"source":{"c927409b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9bdcd3d":"import pandas as pd\nimport numpy as np\nimport torch\nimport torch.optim as optim\nfrom sklearn.preprocessing import MinMaxScaler\nimport random\n\nif torch.cuda.is_available():\n    device = torch.device('cuda')\nelse:\n    device = torch.device('cpu')\n\nrandom.seed(1)\ntorch.manual_seed(1)\ntorch.cuda.manual_seed_all(1)","3eb49843":"data = pd.read_csv('\/kaggle\/input\/metro\/train.csv', encoding='utf-8')\ndata = data.drop(['\uc5ed\ubc88\ud638', '\uc5ed\uc774\ub984', '\ud638\uc120', '\uacc4', '\uc77c\ud3c9\uade0'], axis = 1)\n\nnum_data = data.to_numpy()\nx_data = num_data[:,:-1];\ny_data = num_data[:,[-1]]\n\nx_data = torch.FloatTensor(x_data).to(device)\ny_data = torch.FloatTensor(y_data).to(device)","dfbd0717":"linear1 = torch.nn.Linear(7, 1, bias=True)\n","45f83238":"torch.nn.init.xavier_uniform_(linear1.weight)\n","708a7bca":"model = torch.nn.Sequential(linear1).to(device)","cc737b42":"loss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-3)","5dc276ed":"epochs = 30001\nfor epoch in range(epochs):\n  optimizer.zero_grad();\n  hypothesis = model(x_data);\n  cost = loss(hypothesis, y_data)\n  cost.backward();\n  optimizer.step()\n\n  if(epoch%1000 == 0):\n    print('Epoch: {}, Cost: {}'.format(epoch, cost.item()))","7bc2908f":"test = pd.read_csv('\/kaggle\/input\/metro\/test.csv', encoding='utf-8')\ntest = test.drop(['\uc5ed\uc774\ub984', '\uc5ed\ubc88\ud638', '\uacc4', '\uc77c\ud3c9\uade0', '\ud638\uc120'], axis=1)\n\ntest = test.to_numpy()\ntest = torch.FloatTensor(test).to(device)\n\nprediction = model(test)","b13a57d9":"submit = pd.read_csv('\/kaggle\/input\/metro\/submit.csv')\n\nfor i in range(len(submit)):\n    submit['Expected'][i] = prediction[i]\n\nsubmit","38eb5cf4":"# \ub808\uc774\uc5b4 \uc218 1\uac1c\ub85c \uc904\uc784","603d328a":"# \uae30\uc874\uacfc \ub2e4\ub978\uc810\n* \ub808\uc774\uc5b4 \uc218\ub97c 1\uac1c\ub85c \uc904\uc600\uc2b5\ub2c8\ub2e4"}}