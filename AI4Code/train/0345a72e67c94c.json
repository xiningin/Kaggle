{"cell_type":{"c851b2af":"code","4d57eab6":"code","c23a0f13":"code","86fe4208":"code","439468d9":"code","27840d3c":"code","68bc7241":"code","016de76f":"code","d93e80ff":"code","95a8915f":"code","cee3414d":"code","21f36dc0":"code","bad53640":"code","c36a54d6":"code","b3cc57b6":"code","d56a47d0":"code","3aa03206":"code","fe475758":"code","0d499bde":"code","3096ee90":"code","5ea604d7":"code","0fe5dfe9":"code","2a4540ea":"code","74e424ec":"code","1310a960":"code","4e3e2dc2":"code","7b56cbc4":"code","2f2f3ae9":"code","4ec6fa31":"code","eb566627":"code","a3d54ad5":"code","d7f52aca":"markdown","326efce7":"markdown","6e6353f6":"markdown","90f096b8":"markdown","49f87f11":"markdown","bdd705c2":"markdown","e18e125b":"markdown","77dff12e":"markdown","d2ec9dd7":"markdown","e9760549":"markdown","fba4404d":"markdown"},"source":{"c851b2af":"HELPER_DIR = '\/kaggle\/input\/pydicom-conda-helper\/'\n\n!conda install {HELPER_DIR+'libjpeg-turbo-2.1.0-h7f98852_0.tar.bz2'} -c conda-forge -y -q\n!conda install {HELPER_DIR+'libgcc-ng-9.3.0-h2828fa1_19.tar.bz2'} -c conda-forge -y -q\n!conda install {HELPER_DIR+'gdcm-2.8.9-py37h500ead1_1.tar.bz2'} -c conda-forge -y -q\n!conda install {HELPER_DIR+'conda-4.10.1-py37h89c1867_0.tar.bz2'} -c conda-forge -y -q\n!conda install {HELPER_DIR+'certifi-2020.12.5-py37h89c1867_1.tar.bz2'} -c conda-forge -y -q\n!conda install {HELPER_DIR+'openssl-1.1.1k-h7f98852_0.tar.bz2'} -c conda-forge -y -q","4d57eab6":"import os, zipfile\nimport cv2\nimport plotly.express as px\nimport numpy as np\nimport pandas as pd\nfrom tqdm.auto import tqdm\nimport matplotlib.pyplot as plt\nfrom kaggle_secrets import UserSecretsClient\nimport pydicom\nimport wandb\n\nfrom pathlib import Path","c23a0f13":"SIIM_COVID19_DETECTION_DIR = '\/kaggle\/input\/siim-covid19-detection\/'\n\nWORKING_DIR = '\/kaggle\/working\/'\nTEMP_DIR = '\/kaggle\/temp\/'\n\nINPUT_DIR = SIIM_COVID19_DETECTION_DIR+'train\/'\nOUTPUT_DIR = WORKING_DIR+'data\/'\n\nTRAIN_IMAGE_LEVEL_PATH = SIIM_COVID19_DETECTION_DIR+'train_image_level.csv'\nTRAIN_STUDY_LEVEL_PATH = SIIM_COVID19_DETECTION_DIR+'train_study_level.csv'\n\nIMG_SIZE = WIDTH = HEIGHT = 512\nN_IMAGES_WANDB = 42\n\n\nINTERPOLATION = cv2.INTER_LANCZOS4","86fe4208":"os.makedirs(OUTPUT_DIR, exist_ok=True)","439468d9":"user_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"WANDB_API_KEY\")\nos.environ['WANDB_API_KEY'] = secret_value_0\n\nwandb.login()","27840d3c":"df_train_image_level = pd.read_csv(TRAIN_IMAGE_LEVEL_PATH)\ndf_train_study_level = pd.read_csv(TRAIN_STUDY_LEVEL_PATH)","68bc7241":"df_train_image_level.sample(5)","016de76f":"df_train_image_level.describe()","d93e80ff":"df_train_study_level.sample(5)","95a8915f":"df_train_study_level.describe()","cee3414d":"df_train_image_level['id'] = df_train_image_level.apply(lambda row: row.id.split('_')[0], axis=1)\ndf_train_image_level['path'] = df_train_image_level.apply(lambda row: OUTPUT_DIR+row.id+'.jpg', axis=1)\ndf_train_image_level['image_level'] = df_train_image_level.apply(lambda row: row.label.split(' ')[0], axis=1)\n\ndf_train_study_level['id'] = df_train_study_level.apply(lambda row: row.id.split('_')[0], axis=1)\ndf_train_study_level.columns = ['StudyInstanceUID', 'Negative for Pneumonia', 'Typical Appearance', 'Indeterminate Appearance', 'Atypical Appearance']","21f36dc0":"df = df_train_image_level.merge(df_train_study_level, on='StudyInstanceUID',how=\"left\")\ndf.sample(3)","bad53640":"print(f\"Number of images in trainset: {len(df)}\")\nprint(f\"Number of images in trainset ( without boxes): {df['boxes'].isna().sum()}\")\nprint(f\"Number of images in trainset ( with boxes): {len(df) - df['boxes'].isna().sum()}\")","c36a54d6":"labels = df[['Negative for Pneumonia','Typical Appearance','Indeterminate Appearance','Atypical Appearance']]","b3cc57b6":"fig = px.bar(labels.sum(),\n             title=\"<b>Distribution images by classes<\/b>\",)\nfig.update_layout(showlegend=False,\n                  xaxis_title=\"\",\n                  yaxis_title=\"\")\n\n\nfig.show()","d56a47d0":"df['study_level'] = np.argmax(labels.values, axis=1)\ndf.sample(3)","3aa03206":"no_bb = df[df['boxes'].isna()].shape[0]\nhas_bb = df[df['boxes'].notna()].shape[0]\n\npx.pie(names=[\"with boxes\", \"without boxes\"],\n       values=[has_bb, no_bb], \n       title=\"<b>Distribution images by boxes<\/b>\")","fe475758":"no_bb = df[(df['boxes'].isna() & df['Negative for Pneumonia'] ==1)].shape[0]\nhas_bb = df[(df['boxes'].notna() & df['Negative for Pneumonia'] ==1)].shape[0]\n\npx.pie(names=[\"with boxes\", \"without boxes\"],\n       values=[has_bb, no_bb], \n       title=\"<b>Distribution images by boxes for negative study<\/b>\")","0d499bde":"no_bb = df[(df['boxes'].isna() & df['Negative for Pneumonia'] ==0)].shape[0]\nhas_bb = df[(df['boxes'].notna() & df['Negative for Pneumonia'] ==0)].shape[0]\n\npx.pie(names=[\"with boxes\", \"without boxes\"],\n       values=[has_bb, no_bb], \n       title=\"<b>Distribution images by boxes for positive study<\/b>\")","3096ee90":"label_to_class_id = {\n    'Negative for Pneumonia': 0,\n    'Typical Appearance': 1,\n    'Indeterminate Appearance': 2,\n    'Atypical Appearance': 3\n}\n\nclass_id_to_label = {v: k for k, v in label_to_class_id.items()}","5ea604d7":"path_dicom_files = []\n\ntotal = sum([len(f) for r, d, f in os.walk(INPUT_DIR)])\n\nwith tqdm(total=total) as pbar:\n    for dirname, _, filenames in os.walk(INPUT_DIR):\n        for file in filenames:\n            path_dicom_files.append(Path(os.path.join(dirname, file)))\n            pbar.update(1)","0fe5dfe9":"img=None\nfor p in tqdm(path_dicom_files):\n    img_name = p.parts[-1][0:-4]\n    if img_name =='039159f7b61b':\n        print(True)\n        dcm = pydicom.dcmread(p)\n        img = dcm.pixel_array\n        if dcm.PhotometricInterpretation == \"MONOCHROME1\":\n            img = cv2.bitwise_not(img)\n        img = cv2.normalize(img, None, 0, 255, cv2.NORM_MINMAX, dtype=cv2.CV_8U)\n        img = cv2.resize(img, (WIDTH, HEIGHT), interpolation = INTERPOLATION)","2a4540ea":"df.loc[:,\"width\"] = np.nan\ndf.loc[:,\"height\"] = np.nan\n\n\nfor p in tqdm(path_dicom_files):\n    dcm = pydicom.dcmread(p)\n    img = dcm.pixel_array\n    img_name = p.parts[-1][0:-4]\n    \n    index = df[df['id'].str.contains(img_name)].index\n    df.loc[index, ['width']] = img.shape[0]\n    df.loc[index, ['height']] = img.shape[1]\n\n    if dcm.PhotometricInterpretation == \"MONOCHROME1\":\n        img = cv2.bitwise_not(img)\n    img = cv2.normalize(img, None, 0, 255, cv2.NORM_MINMAX, dtype=cv2.CV_8U)\n    img = cv2.resize(img, (WIDTH, HEIGHT), interpolation = INTERPOLATION)\n    \n    cv2.imwrite(OUTPUT_DIR+img_name+'.jpg', img)\n    \n#039159f7b61b image return error (or 920d7ef35702 )\n    ","74e424ec":"df.to_csv(WORKING_DIR+'meta.csv', index = False)","1310a960":"opacity_df = df.dropna(subset = [\"boxes\"], inplace=False)\nopacity_df = opacity_df.reset_index(drop=True)","4e3e2dc2":"opacity_df.sample(5)","7b56cbc4":"opacity_df.describe()","2f2f3ae9":"def get_bbox(row):\n    bboxes = []\n    bbox = []\n    for i, l in enumerate(row.label.split(' ')):\n        if (i % 6 == 0) | (i % 6 == 1):\n            continue\n        bbox.append(float(l))\n        if i % 6 == 5:\n            bboxes.append(bbox)\n            bbox = []  \n            \n    return bboxes","4ec6fa31":"def scale_bbox(row, bboxes):\n    scale_x = IMG_SIZE\/row.width\n    scale_y = IMG_SIZE\/row.height\n    \n    scaled_bboxes = []\n    for bbox in bboxes:\n        x = int(np.round(bbox[0]*scale_x, 4))\n        y = int(np.round(bbox[1]*scale_y, 4))\n        x1 = int(np.round(bbox[2]*(scale_x), 4))\n        y1= int(np.round(bbox[3]*scale_y, 4))\n\n        scaled_bboxes.append([x, y, x1, y1]) # xmin, ymin, xmax, ymax\n    \n    return scaled_bboxes","eb566627":"def wandb_bbox(image, bboxes, true_label, class_id_to_label):\n    all_boxes = []\n    for bbox in bboxes:\n        box_data = {\"position\": {\n                        \"minX\": bbox[0],\n                        \"minY\": bbox[1],\n                        \"maxX\": bbox[2],\n                        \"maxY\": bbox[3]\n                    },\n                     \"class_id\" : int(true_label),\n                     \"box_caption\": class_id_to_label[true_label],\n                     \"domain\" : \"pixel\"}\n        all_boxes.append(box_data)\n    \n\n    return wandb.Image(image, boxes={\n        \"ground_truth\": {\n            \"box_data\": all_boxes,\n          \"class_labels\": class_id_to_label\n        }\n    })","a3d54ad5":"sampled_opacity_df = opacity_df.sample(N_IMAGES_WANDB).reset_index(drop=True)\n\nrun = wandb.init(project='project8-kaggle-covid19')\n\nwandb_bbox_list = []\nfor i in tqdm(range(sampled_opacity_df.shape[0])):\n    row = sampled_opacity_df.loc[i]\n    image = cv2.imread(row.path)\n    bboxes = get_bbox(row)\n    scale_bboxes = scale_bbox(row, bboxes)\n    true_label = row.study_level\n    wandb_bbox_list.append(wandb_bbox(image, \n                                      scale_bboxes, \n                                      true_label, \n                                      class_id_to_label))\n    \nwandb.log({\"radiograph\": wandb_bbox_list})\n\nrun.finish()\n\nrun","d7f52aca":"### **configuration and initialization**","326efce7":"### **get path dicom files**","6e6353f6":"### **convert train image boxes to wandb image for visualization**","90f096b8":"### **merge df study\/image, add path image**","49f87f11":"### **first look**","bdd705c2":"### **load csv file**","e18e125b":"### **df images with boxes**","77dff12e":"### **import dependencies**","d2ec9dd7":"### **ref** \n\n* https:\/\/www.kaggle.com\/xhlulu\n* https:\/\/www.kaggle.com\/yujiariyasu\n* https:\/\/www.kaggle.com\/ayuraj\n* https:\/\/www.kaggle.com\/dschettler8845   \n....","e9760549":"### **download external packages**","fba4404d":"### **rescale all train images and save to IMG_SIZE=512x512px jpg \/ save original width and height then export df**"}}