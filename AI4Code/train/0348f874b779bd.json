{"cell_type":{"d3165d25":"code","f9379780":"code","5203f52c":"code","dc70ea91":"code","cf19c7e5":"code","f1d01ba3":"code","56b7b456":"code","5c1ff4fb":"code","412acc9c":"code","8669c332":"code","a1a103fb":"code","3b0eaac1":"markdown","706d521c":"markdown","0f03b48a":"markdown","8ad141ac":"markdown"},"source":{"d3165d25":"SEQ_LEN = 28  # magic number - length to truncate sequences of words","f9379780":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntrain_df, val_df = train_test_split(train_df, test_size=0.07)","5203f52c":"#minor eda: average question length (in words) is 12  , majority are under 12 words\ntrain_df.question_text.str.split().str.len().describe()","dc70ea91":"### Unclear why fails to open [encoding error], format is same as for glove. Will Debug, Dan:\n### f = open('..\/input\/embeddings\/paragram_300_sl999\/paragram_300_sl999.txt')\n\n# embedding setup\n# Source https:\/\/blog.keras.io\/using-pre-trained-word-embeddings-in-a-keras-model.html\n# \nembeddings_index = {}\nf = open('..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt')\n# f = open('..\/input\/embeddings\/paragram_300_sl999\/paragram_300_sl999.txt')\nfor line in tqdm(f):\n    values = line.split(\" \")\n    word = values[0]\n    coefs = np.asarray(values[1:], dtype='float32')\n    embeddings_index[word] = coefs\nf.close()\n\nprint('Found %s word vectors.' % len(embeddings_index))","cf19c7e5":"# Convert values to embeddings\ndef text_to_array(text):\n    empyt_emb = np.zeros(300)\n    text = text[:-1].split()[:SEQ_LEN]\n    embeds = [embeddings_index.get(x, empyt_emb) for x in text]\n    embeds+= [empyt_emb] * (SEQ_LEN - len(embeds))\n    return np.array(embeds)\n\n# train_vects = [text_to_array(X_text) for X_text in tqdm(train_df[\"question_text\"])]\nval_vects = np.array([text_to_array(X_text) for X_text in tqdm(val_df[\"question_text\"][:3000])])\nval_y = np.array(val_df[\"target\"][:3000])","f1d01ba3":"# Data providers\nbatch_size = 128\n\ndef batch_gen(train_df):\n    n_batches = math.ceil(len(train_df) \/ batch_size)\n    while True: \n        train_df = train_df.sample(frac=1.)  # Shuffle the data.\n        for i in range(n_batches):\n            texts = train_df.iloc[i*batch_size:(i+1)*batch_size, 1]\n            text_arr = np.array([text_to_array(text) for text in texts])\n            yield text_arr, np.array(train_df[\"target\"][i*batch_size:(i+1)*batch_size])","56b7b456":"from keras.models import Sequential\nfrom keras.layers import CuDNNLSTM, Dense, Bidirectional","5c1ff4fb":"model = Sequential()\nmodel.add(Bidirectional(CuDNNLSTM(128, return_sequences=True),\n                        input_shape=(SEQ_LEN, 300)))\nmodel.add(Bidirectional(CuDNNLSTM(64)))\nmodel.add(Dense(1, activation=\"sigmoid\"))\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","412acc9c":"mg = batch_gen(train_df)\nmodel.fit_generator(mg, epochs=20,\n                    steps_per_epoch=1000,\n                    validation_data=(val_vects, val_y),\n                    verbose=True)","8669c332":"# prediction part\nbatch_size = 256\ndef batch_gen(test_df):\n    n_batches = math.ceil(len(test_df) \/ batch_size)\n    for i in range(n_batches):\n        texts = test_df.iloc[i*batch_size:(i+1)*batch_size, 1]\n        text_arr = np.array([text_to_array(text) for text in texts])\n        yield text_arr\n\ntest_df = pd.read_csv(\"..\/input\/test.csv\")\n\nall_preds = []\nfor x in tqdm(batch_gen(test_df)):\n    all_preds.extend(model.predict(x).flatten())","a1a103fb":"y_te = (np.array(all_preds) > 0.5).astype(np.int)\n\nsubmit_df = pd.DataFrame({\"qid\": test_df[\"qid\"], \"prediction\": y_te})\nsubmit_df.to_csv(\"submission.csv\", index=False)","3b0eaac1":"##### forked from : https:\/\/www.kaggle.com\/mihaskalic\/lstm-is-all-you-need-well-maybe-embeddings-also\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\n\nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\nimport math\nfrom sklearn.model_selection import train_test_split","706d521c":"# Inference","0f03b48a":"# Setup","8ad141ac":"# Training"}}