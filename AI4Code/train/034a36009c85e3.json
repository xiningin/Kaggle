{"cell_type":{"81f15d6a":"code","3a67a49a":"code","17e8fa6f":"code","ef6ccfa2":"code","ecc98887":"code","c8fbf291":"code","4f16df68":"markdown","5f39494d":"markdown","4b297b47":"markdown","eaf90337":"markdown","3ac5ebed":"markdown","dc14c676":"markdown"},"source":{"81f15d6a":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\nimport pandas as pd\nfrom pathlib import Path\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport os","3a67a49a":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ninput_path = Path('\/kaggle\/input\/tabular-playground-series-feb-2021\/')\n\ntrain = pd.read_csv(input_path \/ 'train.csv', index_col='id')\ndisplay(train.head())\ntest = pd.read_csv(input_path \/ 'test.csv', index_col='id')\ndisplay(test.head())","17e8fa6f":"target = train.pop('target')\n\n# drop high cardinality\nlow_cardinality_cols = [cname for cname in train.columns if train[cname].nunique() < 10 and \n                        train[cname].dtype == \"object\"]\nnumeric_cols = [cname for cname in train.columns if train[cname].dtype in ['int64', 'float64']]\nmy_cols = low_cardinality_cols + numeric_cols\n\n# Keep selected columns only\ntrain = train[my_cols].copy()\ntest = test[my_cols].copy()\n\n# low_cardinality_cols => One hot encoding (via get_dummies)\ntrain = pd.get_dummies(train)\ntest = pd.get_dummies(test)\n\n# train.columns != test.columns (OHE) => add missing columns\nmissingCol_test = set(train.columns).difference(set(test.columns))\nmissingCol_train = set(test.columns).difference(set(train.columns))\ntest[[col for col in missingCol_test]] = 0\ntrain[[col for col in missingCol_train]] = 0\ntest = test[train.columns]\n\n# split train\/valid data\nX_train, X_valid, y_train, y_valid = train_test_split(train, target, train_size=0.80, test_size=0.2,random_state=0)","ef6ccfa2":"# XGBoost\nmy_model = XGBRegressor(random_state=0, n_estimators=500, learning_rate=0.1)\n\nmy_model.fit(X_train, y_train, early_stopping_rounds=5, eval_set=[(X_valid, y_valid)])","ecc98887":"predictions = my_model.predict(X_valid)\n\nmae = mean_absolute_error(predictions, y_valid)\n\nprint(\"Mean Absolute Error:\" , mae)","c8fbf291":"preds_test = my_model.predict(test)\noutput = pd.DataFrame({'Id': test.index,\n                       'target': preds_test})\noutput.to_csv('submission.csv', index=False)","4f16df68":"# Models","5f39494d":"# Read data","4b297b47":"# Import\n","eaf90337":"# Pre process","3ac5ebed":"# Submission","dc14c676":"# Eval"}}