{"cell_type":{"d367c24b":"code","2ab66f91":"code","63a41c56":"code","73c35c01":"code","2649f5f4":"code","2d16135c":"code","5a56fcb3":"code","fc033d96":"code","319ce617":"code","dd162f6d":"code","c8cb5b2d":"code","253c788a":"code","f0e779ae":"code","44d5c3a2":"code","d726d238":"markdown","bfeb2f5b":"markdown","8d2fbbc7":"markdown","e111df78":"markdown","657c15fe":"markdown","adb6b493":"markdown","8af77f51":"markdown","601c1bb3":"markdown","915e1be4":"markdown","7a6d6444":"markdown","d4c6b185":"markdown","ea0ea90c":"markdown","e3fcac69":"markdown","0d73c62d":"markdown","39979432":"markdown","fca91bc8":"markdown","7b38bf40":"markdown","f5090995":"markdown","ca45e8ad":"markdown","20dde6bf":"markdown","af84810e":"markdown","92cd0d4e":"markdown"},"source":{"d367c24b":"import pandas as pd\nimport numpy as np\n\ntry:\n    import plotly.express as px\nexcept:\n    !pip install plotly==4.14.3","2ab66f91":"def estimate(data, price, k):\n    \"\"\"\n    Function returns the variance ratio, stat2 and number of observations\n    \n    Parameters:\n        data (pandas.DataFrame): dataframe containing the prices of the underlyings \n        price (str): column header of underlying to be analysed \n        T (int): interval of returns (e.g T = 2 is the 2-period returns)\n        \n    Returns:\n        tuple: containing variance ratio, stat2 and number of observations\n    \"\"\"\n    prices = data[price].to_numpy(dtype=np.float64)\n    log_prices = np.log(prices)\n    rets = np.diff(log_prices)\n    T = len(rets)\n    mu = np.mean(rets)\n    var_1 = np.var(rets, ddof=1, dtype=np.float64)\n    rets_k = (log_prices - np.roll(log_prices, k))[k:]\n    m = k * (T - k + 1) * (1 - k \/ T)\n    var_k = 1\/m * np.sum(np.square(rets_k - k * mu))\n\n    # Variance Ratio\n    vr = var_k \/ var_1\n    \n    # Phi2\n    def delta(j):\n        res = 0\n        for t in range(j+1, T+1):\n            t -= 1  # array index is t-1 for t-th element\n            res += np.square((rets[t]-mu)*(rets[t-j]-mu))\n        return res \/ ((T-1) * var_1)**2\n\n    phi2 = 0\n    for j in range(1, k):\n        phi2 += (2*(k-j)\/k)**2 * delta(j)\n\n    return vr, (vr - 1) \/ np.sqrt(phi2), T","63a41c56":"def estimate_multiple_k(data, price, time_intervals):\n    \"\"\"\n    Function prints the results from estimate() for multiple time intervals as specified in time_intervals\n    Parameters:\n        data (pandas.DataFrame): dataframe containing the prices of the underlyings \n        price (str): column header of underlying to be analysed \n        time_intervals (list): list containing int respresenting intervals for returns\n    Returns:\n        null\n    \"\"\"\n    # Estimate different time_intervals.\n    for time_interval in time_intervals:\n\n        vr, stat2, T = estimate(data, price, time_interval)\n        print('The number of observations : ' + str(T))\n        print('Variance Ratio for k = ' + str(time_interval) + ' : ' + str(vr))\n        print('Variance Ratio Test Statistic for k = ' + str(time_interval) + ' Heteroscedasticity Assumption : ' + str(stat2))\n        print('-------------------------------------------------------------------------------------------------')","73c35c01":"local_path = \"..\/input\/w1-data-2022-spring\/\"\n\nus_index = pd.read_csv(local_path + 'w1_data.csv', na_values=['.'])\nus_index['date'] = pd.to_datetime(us_index['Date'], format='%Y%m%d')\nus_index.tail()","2649f5f4":"# Random generator is not truly random, but pseudo-random\n# Specifying a random seed allows us to replicate the set of results. Otherwise, results will differ for each run.\n# Note that the seed used here is diffeent from that of the bootcamp's\nnp.random.seed(1)","2d16135c":"# Generate random daily returns using US equity market's historical annual return: mean=8% and standard deviation=20%\n# size specifies the number of daily returns to generate\nsteps = np.random.normal(0.08\/252, 0.2\/np.sqrt(252), size=10000)\nprint(\"We have generated \" + str(len(steps)) + \" returns\")\nsteps","5a56fcb3":"type(steps)","fc033d96":"# plotly-extension is a Jupyterlab extension, which requires Nodejs.\n# Install Nodejs, go to Anaconda Prompt and \"conda install -c conda-forge nodejs\" (See https:\/\/anaconda.org\/conda-forge\/nodejs)\n# Install plotly package, go to Anaconda Prompt and \"conda install -c plotly plotly\" (See https:\/\/anaconda.org\/plotly\/plotly)\n# Install jupyter labextension plotly, go to Anaconda Prompt and \"jupyter labextension install jupyterlab-plotly\"\n\nfig = px.scatter(y=steps, labels={'x':'Time', 'y':'Return'})\nfig.show()","319ce617":"# Set first element to 1 so that the first price (defined below) will be the starting stock price\nsteps[0] = 0\nsteps","dd162f6d":"starting_stock_price = 100\n# Simulate stock prices, P\n# cumsum cumulates the incremental return for each step\nP = np.cumprod(1+steps)*starting_stock_price","c8cb5b2d":"fig = px.scatter(y=P, labels={'x':'Time', 'y':'Price'})\nfig.show()","253c788a":"# Create a dataframe\ndata = pd.DataFrame(P, columns=['Price'])\ndata","f0e779ae":"# Testing different values of k (i.e., time intervals)\nestimate_multiple_k(data, 'Price', [2, 4, 8, 16, 32, 64])","44d5c3a2":"estimate_multiple_k(us_index, 'eindend', [2, 4, 8, 16])","d726d238":"<a id=\"subsection-two-one\"><\/a>\n## 2.1 Draw Packages","bfeb2f5b":"<a id=\"section-three\"><\/a>\n# 3. TESTING FOR RANDOM WALKS\n","8d2fbbc7":"<a id=\"section-two\"><\/a>\n# 2. SETUP","e111df78":"** What do the test statistics tell you?  \nThe null hypothesis that market is efficient, specifically, weak-form efficient, is not rejected.","657c15fe":"The previous two blocks must run together to get the same return series.","adb6b493":"<a id=\"subsection-two-three\"><\/a>\n## 2.3 Import Data","8af77f51":"** What will happen to this plot the next time you re-run if you do not specify the random seed?","601c1bb3":"eindend is equal-weighted CRSP NYSE-AMEX Index  \nvindend is value-weighted CRSP NYSE-AMEX Index","915e1be4":"** What object is \"steps\"?","7a6d6444":"<a id=\"subsection-two-two\"><\/a>\n## 2.2 Define Functions","d4c6b185":"** What is a row index? \n[Pandas Index Explained](http:\/\/towardsdatascience.com\/pandas-index-explained-b131beaf6f7b#:~:text=Index%20is%20like%20an%20address%2C%20that's%20how%20any%20data%20point,columns%20its%20general%20column%20names.)","ea0ea90c":"<a id=\"subsection-three-two\"><\/a>\n## 3.2 Question 2: What happen when we use real-world data?\n\n### Replicating Lo and MacKinlay (1988) Table 1a: The equal-weighted CRSP NYSE-AMEX index from 620906 to 851226.\n","e3fcac69":"<a id=\"section-one\"><\/a>\n# 1. INTRODUCTION\n\n## The Random Walk Theory of Asset Prices  \n\nH0 : stock market efficiency   \n= H0: $\\epsilon$t is~i.i.d. ND   \n= H0: var($\\epsilon$T)(or equivalently, var(ST-St) ) = (T-t)xvar(St+1-St)   \n= H0: the linear relationship between the time interval of price observations and its variance.   \n\nRecall Var(w(t)) is proportional to time!   \nw(t) is the cumulative increment","0d73c62d":"Data follow that of Lo and MacKinlay (1988).\n\nCRSP daily equal weighted index is used to generate *weekly* price series, which is then used to replicate Lo and MacKinlay\u2019s (1988) variance ratio tests.\n\nData periods: 19620906~19851226","39979432":"<a id=\"subsection-three-one\"><\/a>\n## 3.1 Question 1: What happens when the market is truly random?","fca91bc8":"## The groundwork\nLet's begin with a price series: $\\{p_t\\}=\\{p_0,p_1,p_2,...,p_T\\}$\n\nFirst, we transform the price series into a log return series: $\\{x_t\\}=\\{x_1, x_2, ..., x_T\\}$, such that $x_t=\\ln \\frac{p_t}{p_{t-1}}$\n\n## Estimating the variance ratio of k-period return\nThe variance ratio of k-period return is: \n$$\\textit{V}(k)=\\frac{\\textit{Var}(x_t+x_{t-1}+...+x_{t-k+1})\/k}{\\textit{Var}(x_t)}$$  \n\nFor example, when k=2 and periodicity is weekly,\n$$\\textit{V}(k)=\\frac{\\textit{Var}(x_t+x_{t-1})\/2}{\\textit{Var}(x_t)}=\\frac{\\textit({Var}(x_t)+{Var}(x_{t-1})+2{Covar}(x_{t},x_{t-1}))\/2}{\\textit{Var}(x_t)}$$ \n\nThe estimator for $\\textit{V}(k)$ that Lo and MacKinlay (1988) proposed is:\n$$\\textit{VR}(k)=\\frac{\\hat\\sigma^2(k)}{\\hat\\sigma^2(1)}$$  \n\n$\\hat\\sigma^2(1)$ is the one-period return variance calculated from $\\{x_t\\}$ is as follows: \n$$\\hat\\sigma^2(1)=\\frac{1}{T-1} \\sum_{t-1}^T (x_t - \\hat\\mu)^2$$\n\n$\\hat\\sigma^2(k)$ is the corresponding k-period return variance calculated as follows:  \n$$\\hat\\sigma^2(k)=\\frac{1}{m} \\sum_{t-1}^T \\left(\\ln\\frac{P_t}{P_{t-k}} - k\\hat\\mu \\right)^2$$  \n$$ m=k(T-k+1)(1-k\/T)$$\n\nNote that Lo and MacKinlay (1998) specifies m this way, so that $\\hat\\sigma^2(k)$ is an unbiased estimator of the k-day return variance. Specifically, the adjustment accommodates overlapping observations, and increases the power of the variance ratio test.\n\n## Calculating the inferential statistics for the variance ratio \n\n$${H_0}: V(k)=1$$\n$${H_1}: V(k) \\neq 1$$\n\nLo and MacKinlay (1998) proposed the following test statistics, which is asymptotically normal (i.e., approximately normal as sample size becomes infinitely large):  \n$$ Z(k)=\\frac{\\textit{VR}(k)-1}{\\sqrt{\\phi(k)}}$$\n\nThe asymptotic variance ${\\phi(k)}$ takes two forms:  \n1. Under the assumption of homoscedasticity,  \n$$\\phi(k)=\\frac{2(2k-1)(k-1)}{3kT}$$\n\n2. Under the assumption of heteroscedasticity, \n\n$$\\phi(k)=\\sum_{j=1}^{k-1} \\left[\\frac{2(k-j)}{k} \\right]^2\\delta(j)$$\n$$\\delta(j)=\\frac{\\sum_{t=j+1}^T (x_t - \\hat\\mu)^2(x_{t-j} - \\hat\\mu)^2}{\\left[\\sum_{t=1}^T (x_t - \\hat\\mu)^2\\right]^2}$$\n","7b38bf40":"<a id=\"section-four\"><\/a>\n# 4. CONCLUSION\n\nFirst, we engineer a series of random returns (i.e., random walk) and test whether the series follows a random walk with Lo and MacKinlay (1988) variance ratio test. The test successfully identifies the truth we engineer (i.e., we fail to reject the null hypothesis that the market is efficient, specifically, weak-form efficient).\n\nSecond, we replicate Table 1a of Lo and MacKinlay (1988) paper using the equal-weighted CRSP NYSE-AMEX index from 620906 to 851226. The null hypothesis that the market is weak-form efficient is rejected (i.e., the stock market prices do not follow random walk). ","f5090995":"# TABLE OF CONTENTS\n\n* [1. INTRODUCTION](#section-one)\n* [2. SETUP](#section-two)\n    - [2.1 Draw Packages](#subsection-two-one)\n    - [2.2 Define Functions](#subsection-two-two)\n    - [2.3 Import Data](#subsection-two-three)\n* [3. TESTING FOR RANDOM WALKS](#section-three)\n    - [3.1 Question 1: What happens when the market is truly random?](#subsection-three-one)\n    - [3.2 Question 2: What happen when we use real-world data?](#subsection-three-two)\n\n* [4. CONCLUSION](#section-four)\n* [5. REFERENCES](#section-five)\n\nReminder: The dataset is for the use of this class only. Please do not share it beyond the classroom.","ca45e8ad":"** How do you map each line in the function to the formulae above?\n\n** How do you calculate holding period return?  \ncalculate the holding period return as log relative X-week changes, i.e. log(indext) \u2013 log(indext-x)","20dde6bf":"** What will happen if you change \"the starting_stock_price\" to 10?","af84810e":"<a id=\"section-five\"><\/a>\n# 5. REFERENCES\n\nLo A.W. and MacKinlay A.C. (1988), \"Stock market prices do not follow random walk: Evidence from a simple specification test\", The Review of Financial Studies, 1, 41-66.\n\nBoehmer, E., Broussard, John P., and Kallunki, J. Using SAS in Financial Research. SAS Institute, 2002. ISBN 978-\n1590470398.\n\nThis notebook is adapted from code written by [Mingze Gao](https:\/\/mingze-gao.com\/), University of Sydney. ","92cd0d4e":"** Does this plot look random?  \n** What does this plot tell you about the relationship between time and daily return variance if each step corresponds to a time interval of a day?  \n** If we widen the time-interval from daily to weekly, what will happen to the return variance (i.e., weekly return variance)?  \n** How is numpy array different from Pyton-native lists?   \nhttps:\/\/webcourses.ucf.edu\/courses\/1249560\/pages\/python-lists-vs-numpy-arrays-what-is-the-difference"}}