{"cell_type":{"a3136c93":"code","9bde1796":"code","b51f8457":"code","e36d85c3":"code","560d66a7":"code","4a20d6be":"code","a1938866":"code","74d21dea":"code","95307643":"code","c13894aa":"code","16cfb805":"code","694a32c7":"code","3bf4fc7e":"code","9497abea":"code","53f76cea":"code","751276bb":"code","7736c64a":"code","c3f55351":"code","bf70e652":"code","4e2d4ec9":"code","e22392c3":"code","1caaed08":"code","e8829559":"code","8055b90e":"code","19c9d93d":"code","54a3163c":"code","5edfda76":"code","f0fd21b6":"code","809ba692":"code","56affb62":"code","0e7e7735":"code","f5f8ad59":"code","42514815":"code","d99e67c7":"code","b4c1a765":"code","6e721dd5":"code","ab8b059b":"code","ff395ee7":"code","ed2545d9":"code","5cce1f7c":"code","eef19b7f":"code","ec52329a":"code","0d5cff34":"code","50d1fa0e":"code","c473086f":"code","af88f5ad":"code","3d2e8b45":"code","7dd506e5":"code","3fbfb291":"code","0785c5ff":"code","a3e4e68b":"code","dfd15f2e":"code","cf602b9d":"code","8aab3cd7":"code","9db437ec":"code","e02cd734":"code","778ce1a1":"code","17c45380":"code","fe1cf289":"code","11ef161c":"code","9daddcf5":"code","0554b0d2":"code","3a4ff2c5":"code","c2ac72aa":"code","0f602ebc":"code","0d804141":"code","99da3f68":"markdown","74928233":"markdown","a0425f0d":"markdown","c771453f":"markdown","fc0ccaa1":"markdown","6985a67f":"markdown","502991e0":"markdown","a402e564":"markdown"},"source":{"a3136c93":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings \nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import tree\nfrom sklearn.model_selection import GridSearchCV\n\nfrom xgboost import XGBClassifier","9bde1796":"df = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\n\ndf.head()\n","b51f8457":"df.shape","e36d85c3":"df.info()","560d66a7":"df['Outcome'] = df['Outcome'].astype('object')","4a20d6be":"df.info()","a1938866":"df.describe().T","74d21dea":"df.Outcome.value_counts()","95307643":"def dist(i):\n  plt.subplot(4,2,i+1)\n  sns.histplot(df, x=df.columns[i], hue=df.Outcome, bins=17, kde=True)\n\nplt.figure(figsize=(20,20), dpi = 300)\nfor i in range (0,len(df.columns)-1):\n  dist(i)","c13894aa":"sns.pairplot(df,hue='Outcome')","16cfb805":"plt.figure(figsize=(10,8))\nsns.heatmap(df.corr(), annot=True)","694a32c7":"df.Outcome.value_counts().plot(kind='bar',figsize=(10,8)) ","3bf4fc7e":"df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)\ndf.isnull().sum()","9497abea":"df['Glucose'].fillna(df['Glucose'].mean(), inplace = True)\ndf['BloodPressure'].fillna(df['BloodPressure'].mean(), inplace = True)\ndf['SkinThickness'].fillna(df['SkinThickness'].median(), inplace = True)\ndf['Insulin'].fillna(np.random.choice(df['Insulin'][~df['Insulin'].isna()]),inplace = True)\ndf['BMI'].fillna(df['BMI'].mean(), inplace = True)","53f76cea":"df.isnull().sum()","751276bb":"def dist_box(df,col):\n    fig,(ax1,ax2)=plt.subplots(2,1)\n    sns.distplot(df[col],ax=ax1)\n    sns.boxplot(df[col],ax=ax2)\n\nplt.figure(figsize=(20,20))\nfor i in range (0,len(df.columns)-1):\n    dist_box(df,df.columns[i])","7736c64a":"u=df['Insulin'].mean()+(3*df['Insulin'].std())\nl=df['Insulin'].mean()-(3*df['Insulin'].std())\n\ndf_out_in=df[(df['Insulin']>u)|(df['Insulin']<l)]\nprint(\"Number of Outliers:\" , len(df_out_in))\ndf_out_in","c3f55351":"df['Insulin']=np.where(df['Insulin']>=415,df['Insulin'].mode()[0],df['Insulin'])","bf70e652":"u=df['BloodPressure'].mean()+(3*df['BloodPressure'].std())\nl=df['BloodPressure'].mean()-(3*df['BloodPressure'].std())\n\ndf_out_bp=df[(df['BloodPressure']>u)|(df['BloodPressure']<l)]\n\nprint(\"Number of Outliers:\" , len(df_out_bp))\ndf_out_bp","4e2d4ec9":"df['BloodPressure']=np.where((df['BloodPressure']>=110)                                                       \n                           | (df['BloodPressure']<=30  ) ,df['BloodPressure'].mode()[0],df['BloodPressure'])","e22392c3":"u=df['SkinThickness'].mean()+(3*df['SkinThickness'].std())\nl=df['SkinThickness'].mean()-(3*df['SkinThickness'].std())\n\ndf_out_st=df[(df['SkinThickness']>u)|(df['SkinThickness']<l)]\n\nprint(\"Number of Outliers:\" , len(df_out_st))\ndf_out_st","1caaed08":"df['SkinThickness']=np.where((df['SkinThickness']>=56)                                                       \n                           ,df['SkinThickness'].mode()[0],df['SkinThickness'])","e8829559":"u=df['Pregnancies'].mean()+(3*df['Pregnancies'].std())\nl=df['Pregnancies'].mean()-(3*df['Pregnancies'].std())\n\ndf_out_pr=df[(df['Pregnancies']>u)|(df['Pregnancies']<l)]\n\nprint(\"Number of Outliers:\" , len(df_out_pr))\ndf_out_pr","8055b90e":"df['Pregnancies']=np.where((df['Pregnancies']>13)                                                       \n                           ,df['Pregnancies'].mode()[0],df['Pregnancies'])","19c9d93d":"df_features=df.drop('Outcome',axis=1)\ndf_target=df.Outcome","54a3163c":"df_target = df_target.astype('int')","5edfda76":"df_features = df_features.select_dtypes(include = [np.number])\ndf_features.columns","f0fd21b6":"sc= StandardScaler()\nnum_scaled = sc.fit_transform(df_features)\nX= pd.DataFrame(num_scaled, columns = df_features.columns)\nX.head()\n","809ba692":"X_train,X_test,y_train,y_test= train_test_split(X,df_target,test_size=0.3,random_state=7)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","56affb62":"def get_test_report(model):\n    test_pred = model.predict(X_test)\n    return(classification_report(y_test,test_pred))","0e7e7735":"def plot_confusion_matrix(model):\n    y_pred = model.predict(X_test)\n    cm = confusion_matrix(y_test,y_pred)\n    conf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\n    sns.heatmap(conf_matrix, annot = True, fmt = 'd', cbar = False, \n                linewidths = 0.1, annot_kws = {'size':25})\n    plt.xticks(fontsize = 20)\n    plt.yticks(fontsize = 20)\n    plt.show()\n","f5f8ad59":"def plot_ROC(model):\n    y_pred_prob = model.predict_proba(X_test)[:,1]\n    fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\n    plt.plot(fpr, tpr)\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.0])\n    plt.plot([0, 1], [0, 1],'r--')\n    plt.title('ROC curve for diabetes Prediction Classifier', fontsize = 15)\n    plt.xlabel('False positive rate (1-Specificity)', fontsize = 15)\n    plt.ylabel('True positive rate (Sensitivity)', fontsize = 15)\n    plt.text(x = 0.02, y = 0.9, s = ('AUC Score:',round(roc_auc_score(y_test, y_pred_prob),4)))\n    plt.grid(True)\n    plt.show()","42514815":"lgst = LogisticRegression()\nlgst_model = lgst.fit(X_train,y_train)","d99e67c7":"test_report=get_test_report(lgst_model)\nprint(test_report)","b4c1a765":"plot_confusion_matrix(lgst_model)","6e721dd5":"plot_ROC(lgst_model)","ab8b059b":"rfc = RandomForestClassifier(n_estimators=150,criterion='gini')\nrfc_model = rfc.fit(X_train,y_train)","ff395ee7":"rfc_report = get_test_report(rfc_model)\nprint(rfc_report)","ed2545d9":"plot_confusion_matrix(rfc_model)","5cce1f7c":"plot_ROC(rfc_model)","eef19b7f":"dtc = DecisionTreeClassifier()\ndtc_model = dtc.fit(X_train,y_train)","ec52329a":"dtc_report = get_test_report(dtc_model)\nprint(dtc_report)","0d5cff34":"plot_confusion_matrix(dtc_model)","50d1fa0e":"plot_ROC(dtc_model)","c473086f":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB","af88f5ad":"knn = KNeighborsClassifier(n_neighbors=28)\nknn_model = knn.fit(X_train,y_train)","3d2e8b45":"knn_report=get_test_report(knn_model)\nprint(knn_report)","7dd506e5":"plot_confusion_matrix(knn_model)","3fbfb291":"plot_ROC(knn_model)","0785c5ff":"gnb = GaussianNB()\ngnb_model = gnb.fit(X_train,y_train)","a3e4e68b":"gnb_report = get_test_report(gnb_model)\nprint(gnb_report)","dfd15f2e":"plot_confusion_matrix(gnb_model)","cf602b9d":"plot_ROC(gnb_model)","8aab3cd7":"from sklearn.ensemble import AdaBoostClassifier,GradientBoostingClassifier","9db437ec":"abc = AdaBoostClassifier(n_estimators=100,random_state=47)\nabc_model = abc.fit(X_train,y_train)","e02cd734":"abc_report = get_test_report(abc_model)\nprint(abc_report)","778ce1a1":"plot_confusion_matrix(abc_model)","17c45380":"plot_ROC(abc_model)","fe1cf289":"gbc = GradientBoostingClassifier(n_estimators = 150, max_depth = 10, random_state = 10)\ngbc_model=gbc.fit(X_train,y_train)","11ef161c":"gbc_report = get_test_report(gbc_model)\nprint(gbc_report)","9daddcf5":"plot_confusion_matrix(gbc_model)","0554b0d2":"plot_ROC(gbc_model)","3a4ff2c5":"xgb = XGBClassifier(max_depth = 10, gamma = 1)\nxgb_model=xgb.fit(X_train, y_train)","c2ac72aa":"xgb_report=get_test_report(xgb_model)\nprint(xgb_report)","0f602ebc":"plot_confusion_matrix(xgb_model)","0d804141":"plot_ROC(xgb_model)","99da3f68":"### RandomForestClassifer","74928233":"### AdaBoostingClassifier","a0425f0d":"### Gaussian NB","c771453f":"### Logistic Regression","fc0ccaa1":"### DecisionTree Classifier","6985a67f":"### KNN Classifier","502991e0":"### GradientBoostingClassifier","a402e564":"### XGB Classifier"}}