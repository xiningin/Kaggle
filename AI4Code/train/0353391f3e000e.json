{"cell_type":{"b91e5d4a":"code","5d66287c":"code","0acee22d":"code","7835b8d9":"code","ef94df72":"code","23f09ef3":"code","526210e5":"code","5826a665":"code","ae4afb6a":"code","304931d7":"code","69c50390":"code","9d0055df":"code","83ff5123":"code","67be95a9":"code","ebf8e979":"code","181e63dd":"code","4068cb57":"code","c2946644":"code","c430c51f":"code","f7fc5a20":"code","ab502d45":"code","1199eca4":"code","93fe01d7":"code","5c1f7702":"code","6675a92b":"code","a285f590":"markdown"},"source":{"b91e5d4a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d66287c":"train_dir = '\/kaggle\/input\/dogs-cats-images\/dog vs cat\/dataset\/training_set'\ntest_dir = '\/kaggle\/input\/dogs-cats-images\/dog vs cat\/dataset\/test_set'\n","0acee22d":"# importing libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport os\nfrom tensorflow.keras.preprocessing import image\nfrom zipfile import ZipFile ","7835b8d9":"train_dir_cats = train_dir + '\/cats'\ntrain_dir_dogs = train_dir + '\/dogs'\ntest_dir_cats = test_dir + '\/cats'\ntest_dir_dogs = test_dir + '\/dogs'","ef94df72":"print('number of cats training images - ',len(os.listdir(train_dir_cats)))\nprint('number of cats testing images - ',len(os.listdir(test_dir_cats)))\n\nprint('number of dogs training images - ',len(os.listdir(train_dir_dogs)))\nprint('number of dogs testing images - ',len(os.listdir(test_dir_dogs)))","23f09ef3":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, Activation\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","526210e5":"data_generator = ImageDataGenerator(rescale = 1.0\/255.0, zoom_range = 0.2)","5826a665":"batch_size = 32\ntraining_data = data_generator.flow_from_directory(directory = train_dir,\n                                                   target_size = (64, 64),\n                                                   batch_size = batch_size,\n                                                   class_mode = 'binary')\ntesting_data = data_generator.flow_from_directory(directory = test_dir,\n                                                  target_size = (64, 64),\n                                                  batch_size = batch_size,\n                                                  class_mode = 'binary')","ae4afb6a":"# preparing the layers in the Convolutional Deep Neural Network\nmodel = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (3, 3), activation = 'relu', input_shape = training_data.image_shape))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(rate = 0.3))\nmodel.add(Conv2D(filters = 64, kernel_size = (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(rate = 0.2))\nmodel.add(Conv2D(filters = 126, kernel_size = (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(rate = 0.15))\nmodel.add(Flatten())\nmodel.add(Dense(units = 32, activation = 'relu'))\nmodel.add(Dropout(rate = 0.15))\nmodel.add(Dense(units = 64, activation = 'relu'))\nmodel.add(Dropout(rate = 0.1))\nmodel.add(Dense(units = len(set(training_data.classes)), activation = 'softmax'))\nmodel.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])","304931d7":"model.summary()","69c50390":"training_data","9d0055df":"history = model.fit(training_data ,epochs=25,validation_data=training_data)","83ff5123":"# testing the model\ndef testing_image(image_directory):\n    test_image = image.load_img(image_directory, target_size = (64, 64))\n    test_image = image.img_to_array(test_image)\n    test_image = np.expand_dims(test_image, axis = 0)\n    result = model.predict(x = test_image)\n    print(result)\n    if result[0][0]  == 1:\n        prediction = 'Dog'\n    else:\n        prediction = 'Cat'\n    return prediction","67be95a9":"print(testing_image(test_dir + '\/cats\/cat.4003.jpg'))","ebf8e979":"plt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['val_accuracy'], label = 'val_accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.ylim([0.5, 1])\nplt.legend(loc='lower right')\n","181e63dd":"\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom tensorflow.keras import datasets, layers, models","4068cb57":"model = models.Sequential()\nmodel.add(layers.Conv2D(128, (3, 3), activation='tanh', input_shape=(training_data.image_shape)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(256, (3, 3), activation='tanh'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n","c2946644":"model.add(layers.Flatten())\nmodel.add(layers.Dense(256, activation='sigmoid'))\nmodel.add(layers.Dense(10))","c430c51f":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","f7fc5a20":"history = model.fit(training_data ,epochs=25,validation_data=training_data)","ab502d45":"probability_model = tf.keras.Sequential([model, \n                                         tf.keras.layers.Softmax()])","1199eca4":"# testing the model\ndef get_pred(image_directory):\n    test_image = image.load_img(image_directory, target_size = (64, 64))\n    test_image = image.img_to_array(test_image)\n    test_image = np.expand_dims(test_image, axis = 0)\n    result =probability_model.predict(x = test_image)\n    return result\n   ","93fe01d7":"import matplotlib.image as mpimg\nimg = mpimg.imread(test_dir + '\/cats\/cat.4003.jpg')\nplt.imshow(img)","5c1f7702":"pred = (get_pred(test_dir + '\/cats\/cat.4003.jpg'))","6675a92b":"np.argmax(pred)","a285f590":"# ANN"}}