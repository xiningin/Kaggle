{"cell_type":{"366ef308":"code","35e8f7ce":"code","20bb236d":"code","feb066b5":"code","30079f98":"code","d68288e5":"code","0faa9e26":"code","24938afe":"code","2a00028c":"code","301363a5":"code","081dc095":"code","772a1644":"markdown","c55d0a5d":"markdown","8d047b16":"markdown","72bb6d4b":"markdown"},"source":{"366ef308":"import warnings\nwarnings.filterwarnings(\"ignore\")","35e8f7ce":"from matplotlib.pyplot import imread,imshow\nimport matplotlib.pyplot as plt\nfrom skimage.transform import resize\nfrom sklearn.utils import shuffle\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.optimizers import *\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport glob\nfrom tensorflow.keras.callbacks import EarlyStopping","20bb236d":"train_cats_list = glob.glob(\"..\/input\/cat-and-dog\/training_set\/training_set\/cats\/*.jpg\")\ntrain_dogs_list = glob.glob(\"..\/input\/cat-and-dog\/training_set\/training_set\/dogs\/*.jpg\")\n\ntest_cats_list = glob.glob(\"..\/input\/cat-and-dog\/test_set\/test_set\/cats\/*.jpg\")\ntest_dogs_list = glob.glob(\"..\/input\/cat-and-dog\/test_set\/test_set\/dogs\/*.jpg\")","feb066b5":"xtr , ytr , xte , yte = ([],[],[],[])\n\nfor image in train_cats_list:\n\n    xtr.append(resize(imread(image),(64,64)))\n    \nfor image in train_dogs_list:\n\n    xtr.append(resize(imread(image),(64,64)))\n\nfor image in test_cats_list:\n\n    xte.append(resize(imread(image),(64,64)))\n\nfor image in test_dogs_list:\n    xte.append(resize(imread(image),(64,64)))\n    \nytr , yte = ([],[])\n\nytr  += [ 0 for _ in range(len(train_cats_list))]\nytr  += [ 1 for _ in range(len(train_dogs_list))]\n\nyte  += [0 for _ in range(len(test_cats_list))]\nyte  += [1 for _ in range(len(test_dogs_list))]\n\nxtr = np.array(xtr)\nxte = np.array(xte)\nytr = np.array(ytr)\nyte = np.array(yte)","30079f98":"xtr , ytr = shuffle(xtr , ytr, random_state = 123)\nxte , yte = shuffle(xte, yte, random_state = 123)","d68288e5":"print(xtr.shape)\nprint(xte.shape)\nprint(ytr.shape)\nprint(yte.shape)","0faa9e26":"nf = 32\n\nmodel = Sequential()\nmodel.add(BatchNormalization(input_shape=(64,64,3)))\nmodel.add(Conv2D(nf*4, kernel_size=(3, 3),padding='same', strides=(1, 1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(nf*4, kernel_size=(3, 3),padding='same', strides=(1, 1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(nf*2, kernel_size=(3, 3),padding='same', strides=(1, 1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(nf*2, kernel_size=(3, 3),padding='same', strides=(1, 1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(nf*2, (3, 3),padding=\"same\", activation='relu'))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(200, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\nes = EarlyStopping(monitor='val_accuracy', mode='max',patience=5,restore_best_weights=True)","24938afe":"model.compile(loss='binary_crossentropy',optimizer=\"adam\",metrics='accuracy')\nmodel.summary()","2a00028c":"history = model.fit(xtr,ytr,batch_size=10,epochs=30,callbacks = [es],validation_data=(xte,yte))","301363a5":"score = model.evaluate(xte,yte,verbose=0)\n\nprint(\"Accuracy: \",np.round(score[1]*100,3),\"%\")","081dc095":"rows = 2\ncolumns = 2\n\nfig = plt.figure(figsize=(13,8))\n\nrandom_images = []\nrandom_targets = []\n\nfor _ in range(4):\n    random_index = np.random.randint(0,xte.shape[0])\n    \n    random_images.append(xte[random_index])\n    random_targets.append(yte[random_index])\n    \nrandom_images = np.array(random_images)\n\npredictions = (model.predict(random_images) > 0.5 ).astype('int32').reshape(4,)\n\nfor i in range(1,5):\n    ax = plt.subplot(rows, columns, i)\n    plt.imshow(random_images[i-1])\n    predicted_str = \"Predicted: Cat\" if predictions[i-1] == 0 else \"Predicted: Dog\"\n    ax.set_title(predicted_str)\n\nfig.show()","772a1644":"<p style=\"font-size: 120%\"> Accuracy <\/p>","c55d0a5d":"<h2> Random demonstration <\/h2>","8d047b16":"<h2> Loading and processing images <\/h2>","72bb6d4b":"<h2> Creating model on existing data <\/h2> "}}