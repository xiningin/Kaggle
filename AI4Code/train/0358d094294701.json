{"cell_type":{"a1be1637":"code","e9bb03ef":"code","ecb98261":"code","0c7dcff3":"code","e7712dc0":"code","f424b7b9":"code","1ac8980c":"code","da29ec13":"code","916b50e7":"code","6941690d":"code","74148d87":"code","1ace9f37":"code","da8cef64":"code","5dc5069f":"code","86e04fac":"code","34a6f247":"code","9b69a9e5":"code","bdf7d974":"code","14430be1":"code","0142ff79":"code","2730ca1c":"code","9acc4391":"code","13228705":"code","ae25c379":"code","eaf3d385":"code","5d7591c8":"code","3577eeef":"code","fdf5c7aa":"code","25a08228":"code","25a15cb5":"code","a9922541":"code","2cd8875a":"code","d71bb7ac":"code","83471a00":"code","ca7f914f":"code","853d4097":"code","d36f2dfe":"code","23842ae2":"code","88b86aad":"code","1d63e8f4":"code","6bedf420":"code","8ec1fcf2":"code","304c84ac":"markdown","90f7a03d":"markdown","a9fd9b91":"markdown","1c5c8fb9":"markdown","3a0d8072":"markdown","cb89b16e":"markdown","560d5c4d":"markdown","9c83c6bb":"markdown","ea135115":"markdown","a049bad2":"markdown","e0a98ec5":"markdown","f302faa2":"markdown","2f345f4a":"markdown","a7eddcf2":"markdown","def3c07a":"markdown","16386d0e":"markdown","599a8f2c":"markdown","5c773f69":"markdown","2dd567dc":"markdown","14017642":"markdown","53b615ca":"markdown","d4a9947d":"markdown","ebddee78":"markdown","15b027cd":"markdown","6f8552b3":"markdown","6ef088bc":"markdown","5939a2d4":"markdown","c07fb59a":"markdown","18a5797d":"markdown"},"source":{"a1be1637":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.metrics import mean_absolute_error","e9bb03ef":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ecb98261":"data = pd.read_csv('\/kaggle\/input\/used-cars-dataset-from-cardekhocom\/cardekho_updated.csv')\nprint(f'''number of rows - {data.shape[0]}\nnumber of columns - {data.shape[1]}''')","0c7dcff3":"data.head()","e7712dc0":"def null_count():\n    return pd.DataFrame({'features': data.columns,\n                'dtypes': data.dtypes.values,\n                'NaN count': data.isnull().sum().values,\n                'NaN percentage': data.isnull().sum().values\/data.shape[0]}).style.background_gradient(cmap='Blues',low=0.1,high=0.01)\nnull_count()","f424b7b9":"for i in range(data.shape[0]):\n    try:\n        price = float(data['selling_price'][i].split(' ')[0])\n        digit = data['selling_price'][i].split(' ')[1]\n        if digit == 'Lakh*':\n            price = price * 100000\n            data['selling_price'][i] = price\n        elif digit == 'Cr*':\n            price = price * 10000000\n            data['selling_price'][i] = price\n    except:\n        price = data['selling_price'][i][:-1]\n        price = price.replace(',', '')\n        data['selling_price'][i] = float(price)","1ac8980c":"# kilometer driven\ndata['km_driven'] = data['km_driven'].str.split(' ', n=1, expand=True)[0]\ndata['km_driven'] = data['km_driven'].str.replace(',','')\n# Mileage\ndata['mileage'] = data['mileage'].str.split(' ', expand=True)[0].str.split('e', expand=True)[2]\n# Engine\ndata['engine'] = data['engine'].str.split(' ', expand=True)[0].str.split('e',expand=True)[1]\n# Max Power\ndata['max_power'] = data['max_power'].str.split(' ', expand=True)[1].str.split('r',expand=True)[1]\n# Seats \ndata['seats'] = data['seats'].str.split('s', expand=True)[1]","da29ec13":"cols = ['selling_price', 'km_driven', 'mileage', 'engine', 'max_power', 'seats']\n\nfor col in cols:\n    try:\n        data[col] = data[col].astype(int)\n    except:\n        data[col] = data[col].astype(float)","916b50e7":"# creating new feature company instead of full name\ndata['company'] = data['full_name'].str.split(' ', expand=True)[0]","6941690d":"data.drop(columns=['new_price','full_name','owner_type'], axis=1, inplace=True)\ndata.head()","74148d87":"data.describe().T","1ace9f37":"data.describe(include='O')","da8cef64":"x = data.nunique().sort_values(ascending=False).index\ny = data.nunique().sort_values(ascending=False).values\n\nplt.rcParams['figure.dpi'] = 200\nfig = plt.figure(figsize=(7,3))\ngs = fig.add_gridspec(1,1)\nax0 = fig.add_subplot(gs[0,0])\nfor i in ['top', 'right']:\n    ax0.spines[i].set_visible(False)\n    \ncolormap = ['#79c6e8' for i in range(data.shape[1])]\ncolormap[0] = '#9c9a9a'\n\nax0.bar(x=x, height=y, edgecolor='k', linewidth=0.7, color=colormap, alpha=0.9)\nax0.tick_params(axis='x',labelsize=5, rotation=90, width=1)\nax0.tick_params(axis='y', labelsize=5, left=False)\nfig.suptitle(t='Number of unique values in each features', fontsize=6, weight='bold')\n\nfor p in ax0.patches:\n    value = f'{p.get_height():,.0f}'\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_y() + p.get_height()+290\n    ax0.text(x, y, value, ha='center', va='center', fontsize=5, \n            bbox=dict(facecolor='white', edgecolor='black', boxstyle='round', linewidth=0.3))\nplt.show()\n","5dc5069f":"plt.rcParams['figure.dpi'] = 200\nfig = plt.figure(figsize=(7,11))\n# fig.suptitle(t='Distribution of numerical features', fontsize=6, weight='bold')\ngs = fig.add_gridspec(6,1)\ngs.update(hspace=0.5)\n\nmi=data.selling_price.min()\nma=data.selling_price.max()\nprice = (data.selling_price-mi)\/(ma-mi)\n\nax0 = fig.add_subplot(gs[0,0])\nax0_sns = sns.kdeplot(x=price, shade=True, color='k')\nax0.text(x=price.max(), y=0, s='Max', fontsize=5, bbox=dict(facecolor='skyblue',linewidth=0.3,boxstyle='round'))\nax0_sns.tick_params(axis='both', labelsize=5, left=False)\nax0_sns.set_xlabel('Selling Price', fontsize=5, weight='bold')\nax0_sns.set_ylabel(None)\n\nmi=data.km_driven.min()\nma=data.km_driven.max()\ndriven = (data.km_driven-mi)\/(ma-mi)\nax1 = fig.add_subplot(gs[1,0])\nax1_sns = sns.kdeplot(x=driven, shade=True, color='k')\nax1.text(x=driven.max(), y=0, s='Max', fontsize=5, bbox=dict(facecolor='skyblue',linewidth=0.3,boxstyle='round'))\nax1_sns.tick_params(axis='both', labelsize=5, left=False)\nax1_sns.set_xlabel('Kilometers driven', fontsize=5, weight='bold')\nax1_sns.set_ylabel(None)\n\nax2 = fig.add_subplot(gs[2,0])\nax2_sns = sns.kdeplot(data=data,x='engine', shade=True, color='k')\nax2.text(x=data.engine.max(), y=0, s='Max', fontsize=5, bbox=dict(facecolor='skyblue',linewidth=0.3,boxstyle='round'))\nax2_sns.tick_params(axis='both', labelsize=5, left=False)\nax2_sns.set_xlabel('Engine', fontsize=5, weight='bold')\nax2_sns.set_ylabel(None)\n\nax3 = fig.add_subplot(gs[3,0])\nax3_sns = sns.kdeplot(data=data,x='mileage', shade=True, color='k')\nax3.text(x=data.mileage.max(), y=0, s='Max', fontsize=5, bbox=dict(facecolor='skyblue',linewidth=0.3,boxstyle='round'))\nax3_sns.tick_params(axis='both', labelsize=5, left=False)\nax3_sns.set_xlabel('Mileage', fontsize=5, weight='bold')\nax3_sns.set_ylabel(None)\n\nax4 = fig.add_subplot(gs[4,0])\nax4_sns = sns.kdeplot(data=data,x='max_power', shade=True, color='k')\nax4.text(x=data.max_power.max(), y=0, s='Max', fontsize=5, bbox=dict(facecolor='skyblue',linewidth=0.3,boxstyle='round'))\nax4_sns.tick_params(axis='both', labelsize=5, left=False)\nax4_sns.set_xlabel('Max power', fontsize=5, weight='bold')\nax4_sns.set_ylabel(None)\n\nax5 = fig.add_subplot(gs[5,0])\nax5_sns = sns.kdeplot(data=data,x='year', shade=True, color='k')\nax5.text(x=data.year.min(), y=0, s='Min', fontsize=5, bbox=dict(facecolor='skyblue',linewidth=0.3,boxstyle='round'))\nax5_sns.tick_params(axis='both', labelsize=5, left=False)\nax5_sns.set_xlabel('Year', fontsize=5, weight='bold')\nax5_sns.set_ylabel(None)\n\nsns.despine()\nplt.show()","86e04fac":"fig = plt.figure(figsize=(7,12))\ngs = fig.add_gridspec(5,3)\ngs.update(hspace=0.5, wspace=0.5)\n\npal = sns.dark_palette('skyblue', reverse=True)\npal.insert(0, '#9c9a9a')\n# Row 1 ----------------------------------------------------------------------------------------------------------\n# Countplot\nax0 = fig.add_subplot(gs[0:2,0:3])\nax0_s = sns.countplot(data=data,\n                      x='seats', \n                      palette=pal, \n                      edgecolor='k', \n                      linewidth=0.6, \n                      order=[i for i in data.seats.value_counts().index])\nax0_s.tick_params(labelsize=5, left=False)\nax0_s.set_xlabel(None)\nax0_s.set_ylabel(ylabel='Seats', fontsize=5, weight='bold')\n\nfor p in ax0_s.patches:\n    value = f\"{p.get_height():,.0f}\"\n    x = p.get_x() + p.get_width()\/2\n    y = p.get_y() + p.get_height()+500\n    ax0.text(x, y, value, fontsize=4.5, ha='center', va='center', \n             bbox=dict(facecolor='white', edgecolor='k', boxstyle='round', linewidth=0.5))\n    \n# Row 2 ----------------------------------------------------------------------------------------------------------- \n# Countplot-----------\nax1 = fig.add_subplot(gs[2,0:2])\nax1_s = sns.countplot(data=data, y='fuel_type', \n                      palette=pal, edgecolor='k', linewidth=0.6, \n                      order=[i for i in data.fuel_type.value_counts().index])\nax1_s.tick_params(labelsize=5, left=False)\nax1_s.set_xlabel(None)\nax1_s.set_ylabel(ylabel='fuel_type', fontsize=5, weight='bold')\nfor p in ax1_s.patches:\n    value = f\"{p.get_width():,.0f}\"\n    x = p.get_x() + p.get_width()+500\n    y = p.get_y() + p.get_height()\/2\n    ax1.text(x, y, value, fontsize=5, ha='center', va='center', \n             bbox=dict(facecolor='white', edgecolor='k', boxstyle='round', linewidth=0.4))\n# Pie plot------------ \nax11 = fig.add_subplot(gs[2,2])\nax11.pie(x = data.fuel_type.value_counts().values,\n        colors=['#9c9a9a','skyblue','#0fa2bd','#075c91','#012338'],\n        explode = [0.03 for i in range(data.fuel_type.nunique())],\n        radius=1.2,\n        textprops=dict(fontsize=5))\nax11.add_artist(plt.Circle((0,0),0.4,fc='white'))\nax11.legend(labels = data.fuel_type.value_counts().index, \n            ncol=5, fontsize=4,edgecolor='white', shadow=True, loc='lower center',bbox_to_anchor=(0.5,-0.1))\n\n# Row 3 ------------------------------------------------------------------------------------------------------------\n# Countplot-----------\nax2 = fig.add_subplot(gs[3,0:2])\nax2_s = sns.countplot(data=data, y='seller_type', \n                      palette=pal, edgecolor='k', linewidth=0.6, \n                      order=[i for i in data.seller_type.value_counts().index])\nax2_s.tick_params(labelsize=5, left=False)\nax2_s.set_xlabel(None)\nax2_s.set_ylabel(ylabel='seller_type', fontsize=5, weight='bold')\nfor p in ax2_s.patches:\n    value = f\"{p.get_width():,.0f}\"\n    x = p.get_x() + p.get_width()+650\n    y = p.get_y() + p.get_height()\/2\n    ax2.text(x, y, value, fontsize=5, ha='center', va='center', \n             bbox=dict(facecolor='white', edgecolor='k', boxstyle='round', linewidth=0.4))\n# Pie plot------------  \nax21 = fig.add_subplot(gs[3,2])\nax21.pie(x = data.seller_type.value_counts().values,\n        colors=['#9c9a9a','skyblue','#0fa2bd','#075c91','#012338'],\n        explode = [0.03 for i in range(data.seller_type.nunique())],\n        textprops=dict(fontsize=5),\n        radius=1.2)\nax21.add_artist(plt.Circle((0,0),0.4,fc='white'))\nax21.legend(labels = data.seller_type.value_counts().index, \n            ncol=5, fontsize=4,edgecolor='white', shadow=True, loc='lower center',bbox_to_anchor=(0.5,-0.1))\n\n# Row 4 ------------------------------------------------------------------------------------------------------------\n# Countplot-----------\nax3 = fig.add_subplot(gs[4,0:2])\nax3_s = sns.countplot(data=data, y='transmission_type', \n                      palette=pal, edgecolor='k', linewidth=0.6, \n                      order=[i for i in data.transmission_type.value_counts().index])\nax3_s.tick_params(labelsize=5, left=False)\nax3_s.set_xlabel(None)\nax3_s.set_ylabel(ylabel='transmission_type', fontsize=5, weight='bold')\nfor p in ax3_s.patches:\n    value = f\"{p.get_width():,.0f}\"\n    x = p.get_x() + p.get_width()+850\n    y = p.get_y() + p.get_height()\/2\n    ax3.text(x, y, value, fontsize=5, ha='center', va='center', \n             bbox=dict(facecolor='white', edgecolor='k', boxstyle='round', linewidth=0.4))\n# Pie plot------------  \nax31 = fig.add_subplot(gs[4,2])\nax31.pie(x = data.transmission_type.value_counts().values,\n        colors=['#9c9a9a','skyblue','#0fa2bd','#075c91','#012338'],\n        explode = [0.03 for i in range(data.transmission_type.nunique())],\n        textprops=dict(fontsize=5),\n        radius=1.2)\nax31.add_artist(plt.Circle((0,0),0.4,fc='white'))\nax31.legend(labels = data.transmission_type.value_counts().index, \n            ncol=5, edgecolor='white',shadow=True, fontsize=4, loc='lower center',bbox_to_anchor=(0.5,-0.1))\n\nsns.despine()\nplt.show()","34a6f247":"fig = plt.figure(figsize=(7,3))\ngs = fig.add_gridspec(1,1)\n\ncars = data.company.value_counts().head(10)\npal = sns.light_palette('#79c6e8', n_colors=50, reverse=True)\npal[0] = '#9c9a9a'\nax = fig.add_subplot(gs[0,0])\nax=sns.barplot(x=cars.index, y=cars.values, edgecolor='k', linewidth=0.7, palette=pal)\nax.tick_params(axis='x', labelsize=5, rotation=90)\nax.tick_params(axis='y', labelsize=5, left=False)\nax.set_ylabel(ylabel='count', fontsize=5, weight='bold')\n\nfor p in ax.patches:\n    value = f'{p.get_height():,.0f}'\n    x = p.get_x() + p.get_width()\/2\n    y = p.get_y() + p.get_height()+320\n    ax.text(x=x, y=y, s=value, fontsize=4.5, ha='center', va='center',\n           bbox=dict(fc='white', edgecolor='k', boxstyle='round', linewidth=0.5))\n    \nfig.suptitle(t='Top 10 most present company names in the dataset', fontsize='6', weight='bold')\nsns.despine()\nplt.show()","9b69a9e5":"fig = plt.figure(figsize=(7,3))\ngs = fig.add_gridspec(1,1)\n\ncars = data.company.value_counts().tail(15)\npal = sns.light_palette('#79c6e8', n_colors=50, reverse=True)\npal[0] = '#9c9a9a'\nax = fig.add_subplot(gs[0,0])\nax=sns.barplot(x=cars.index, y=cars.values, edgecolor='k', linewidth=0.7, palette=pal)\nax.tick_params(axis='x', labelsize=5, rotation=90)\nax.tick_params(axis='y', labelsize=5, left=False)\nax.set_ylabel(ylabel='count', fontsize=5, weight='bold')\n\nfor p in ax.patches:\n    value = f'{p.get_height():,.0f}'\n    x = p.get_x() + p.get_width()\/2\n    y = p.get_y() + p.get_height()+0.5\n    ax.text(x=x, y=y, s=value, fontsize=4.5, ha='center', va='center',\n           bbox=dict(fc='white', edgecolor='k', boxstyle='round', linewidth=0.5))\n    \nfig.suptitle(t='Top 10 most least company names in the dataset', fontsize='6', weight='bold')\nsns.despine()\nplt.show()","bdf7d974":"fig = plt.figure(figsize=(7,3))\ngs = fig.add_gridspec(1,1)\n\ncars = data.year.value_counts().head(10)\npal = sns.light_palette('#79c6e8', n_colors=50, reverse=True)\npal[7] = '#9c9a9a'\nax = fig.add_subplot(gs[0,0])\nax=sns.barplot(x=cars.index, y=cars.values, edgecolor='k', linewidth=0.7, palette=pal)\nax.tick_params(axis='x', labelsize=5, rotation=90)\nax.tick_params(axis='y', labelsize=5, left=False)\nax.set_ylabel(ylabel='count', fontsize=5, weight='bold')\n\nfor p in ax.patches:\n    value = f'{p.get_height():,.0f}'\n    x = p.get_x() + p.get_width()\/2\n    y = p.get_y() + p.get_height()+150\n    ax.text(x=x, y=y, s=value, fontsize=4.5, ha='center', va='center',\n           bbox=dict(fc='white', edgecolor='k', boxstyle='round', linewidth=0.5))\n    \nfig.suptitle(t='Top 10 years with highest sales', fontsize='6', weight='bold')\nsns.despine()\nplt.show()","14430be1":"fig = plt.figure(figsize=(7,3))\ngs = fig.add_gridspec(1,1)\n\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=50)\npal.insert(0,'#9c9a9a')\n\ncars = data.groupby('company')['selling_price'].mean().sort_values(ascending=False).head(10)\/1000000\nax = fig.add_subplot(gs[0,0])\nax=sns.barplot(x=cars.index, y=cars.values, edgecolor='k', linewidth=0.7, palette=pal)\nax.tick_params(axis='x', labelsize=5, rotation=90)\nax.tick_params(axis='y', labelsize=5, left=False)\nax.set_xlabel(xlabel=None)\nax.set_ylabel(ylabel='price in millions', fontsize=5, weight='bold')\nfor p in ax.patches:\n    value = f'{p.get_height():,.1f}' + ' M'\n    x = p.get_x() + p.get_width()\/2\n    y = p.get_y() + p.get_height()+3\n    ax.text(x=x, y=y, s=value, fontsize=4.5, ha='center', va='center',\n           bbox=dict(fc='white', edgecolor='k', boxstyle='round', linewidth=0.5))\n    \nfig.suptitle(t='Top 10 car company with highest selling price', fontsize=6, weight='bold')\nsns.despine()\nplt.show()","0142ff79":"fig = plt.figure(figsize=(7,3))\ngs = fig.add_gridspec(1,1)\n\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=50)\npal.insert(0,'#9c9a9a')\n\ncars = data.groupby('company')['mileage'].mean().sort_values(ascending=False).head(10)\nax = fig.add_subplot(gs[0,0])\nax=sns.barplot(x=cars.index, y=cars.values, edgecolor='k', linewidth=0.7, palette=pal)\nax.tick_params(axis='x', labelsize=5, rotation=90)\nax.tick_params(axis='y', labelsize=5, left=False)\nax.set_xlabel(xlabel=None)\nax.set_ylabel(ylabel='mileage in kmpl', fontsize=5, weight='bold')\nax.set_ylim(17,22.5)\n\nfor p in ax.patches:\n    value = f'{p.get_height():,.1f}'\n    x = p.get_x() + p.get_width()\/2\n    y = p.get_y() + p.get_height()+0.3\n    ax.text(x=x, y=y, s=value, fontsize=4.5, ha='center', va='center',\n           bbox=dict(fc='white', edgecolor='k', boxstyle='round', linewidth=0.5))\n    \nfig.suptitle(t='Top 10 car company with highest mileage', fontsize=6, weight='bold')\nsns.despine()\nplt.show()","2730ca1c":"fig = plt.figure(figsize=(7,3))\ngs = fig.add_gridspec(1,1)\n\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=50)\npal.insert(0,'#9c9a9a')\n\ncars = data.groupby('company')['engine'].mean().sort_values(ascending=False).head(10)\nax = fig.add_subplot(gs[0,0])\nax=sns.barplot(x=cars.index, y=cars.values, edgecolor='k', linewidth=0.7, palette=pal)\nax.tick_params(axis='x', labelsize=5, rotation=90)\nax.tick_params(axis='y', labelsize=5, left=False)\nax.set_xlabel(xlabel=None)\nax.set_ylabel(ylabel='engine in cc', fontsize=5, weight='bold')\nfor p in ax.patches:\n    value = f'{p.get_height():,.0f}'\n    x = p.get_x() + p.get_width()\/2\n    y = p.get_y() + p.get_height()+400\n    ax.text(x=x, y=y, s=value, fontsize=4.5, ha='center', va='center',\n           bbox=dict(fc='white', edgecolor='k', boxstyle='round', linewidth=0.5))\n    \nfig.suptitle(t='Top 10 car company with highest engine cc', fontsize=6, weight='bold')\nsns.despine()\nplt.show()","9acc4391":"fig = plt.figure(figsize=(7,3))\ngs = fig.add_gridspec(1,1)\n\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=50)\npal.insert(0,'#9c9a9a')\n\ncars = data.groupby('company')['max_power'].mean().sort_values(ascending=False).head(10)\ncolor = ['skyblue' for i in range(15)]\ncolor[0] = 'grey'\nax = fig.add_subplot(gs[0,0])\nax=sns.barplot(x=cars.index, y=cars.values, edgecolor='k', linewidth=0.7, palette=pal)\nax.tick_params(axis='x', labelsize=5, rotation=90)\nax.tick_params(axis='y', labelsize=5, left=False)\nax.set_xlabel(xlabel=None)\nax.set_ylabel(ylabel='max power in bhp', fontsize=5, weight='bold')\nfor p in ax.patches:\n    value = f'{p.get_height():,.0f}'\n    x = p.get_x() + p.get_width()\/2\n    y = p.get_y() + p.get_height()+38\n    ax.text(x=x, y=y, s=value, fontsize=4.5, ha='center', va='center',\n           bbox=dict(fc='white', edgecolor='k', boxstyle='round', linewidth=0.5))\n    \nfig.suptitle(t='Top 10 car company with highest max power', fontsize=6, weight='bold')\nsns.despine()\nplt.show()","13228705":"fig = plt.figure(figsize=(7,15))\ngs = fig.add_gridspec(5,3)\ngs.update(hspace=0.5, wspace=0.15)\n\n\n\n# Row 1 selling_price-----------------------------------------------------------------\nax00 = fig.add_subplot(gs[0,0])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(0,'#9c9a9a')\nax00_s = sns.stripplot(x=data.seller_type, y=data.selling_price\/1000000, size=4, palette=pal)\nax00_s.tick_params(labelsize=4, left=False)\nax00_s.set_xlabel(xlabel='seller type', fontsize=5, weight='bold')\nax00_s.set_ylabel(ylabel='selling price in millions', fontsize=5, weight='bold')\nfor i in ['top', 'right']:\n    ax00.spines[i].set_visible(False)\n\nax01 = fig.add_subplot(gs[0,1])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(2,'#9c9a9a')\nax01_s = sns.stripplot(x=data.fuel_type, y=data.selling_price\/1000000, size=4, palette=pal)\nax01_s.tick_params(labelsize=4, left=False)\nax01_s.set_xlabel(xlabel='fuel type', fontsize=5, weight='bold')\nax01_s.set_ylabel(ylabel=None)\nax01_s.set_yticks([])\nfor i in ['top', 'right', 'left']:\n    ax01.spines[i].set_visible(False)\n\nax02 = fig.add_subplot(gs[0,2])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(0,'#9c9a9a')\nax02_s = sns.stripplot(x=data.transmission_type, y=data.selling_price\/1000000, size=4, palette=pal)\nax02_s.tick_params(labelsize=4, left=False)\nax02_s.set_xlabel(xlabel='transmission type', fontsize=5, weight='bold')\nax02_s.set_ylabel(ylabel=None)\nax02_s.set_yticks([])\nfor i in ['top', 'right', 'left']:\n    ax02.spines[i].set_visible(False)\n\n# Row 2 km_driven-------------------------------------------------------------------------\nax10 = fig.add_subplot(gs[1,0])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(1,'#9c9a9a')\nax10_s = sns.stripplot(x=data.seller_type, y=data.km_driven\/1000000, size=4, palette=pal)\nax10_s.tick_params(labelsize=4, left=False)\nax10_s.set_xlabel(xlabel='seller type', fontsize=5, weight='bold')\nax10_s.set_ylabel(ylabel='kilometers driven', fontsize=5, weight='bold')\nfor i in ['top', 'right']:\n    ax10.spines[i].set_visible(False)\n\nax11 = fig.add_subplot(gs[1,1])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(1,'#9c9a9a')\npal.insert(3,'#9c9a9a')\nax11_s = sns.stripplot(x=data.fuel_type, y=data.km_driven\/1000000, size=4, palette=pal)\nax11_s.tick_params(labelsize=4, left=False)\nax11_s.set_xlabel(xlabel='fuel type', fontsize=5, weight='bold')\nax11_s.set_ylabel(ylabel=None)\nax11_s.set_yticks([])\nfor i in ['top', 'right', 'left']:\n    ax11.spines[i].set_visible(False)\n\nax12 = fig.add_subplot(gs[1,2])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(1,'#9c9a9a')\nax12_s = sns.stripplot(x=data.transmission_type, y=data.km_driven\/1000000, size=4, palette=pal)\nax12_s.tick_params(labelsize=4, left=False)\nax12_s.set_xlabel(xlabel='transmission type', fontsize=5, weight='bold')\nax12_s.set_ylabel(ylabel=None)\nax12_s.set_yticks([])\nfor i in ['top', 'right', 'left']:\n    ax12.spines[i].set_visible(False)\n\n# Row 3 mileage---------------------------------------------------------------------------\nax20 = fig.add_subplot(gs[2,0])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(2,'#9c9a9a')\nax20_s = sns.stripplot(x=data.seller_type, y=data.mileage, size=4, palette=pal)\nax20_s.tick_params(labelsize=4, left=False)\nax20_s.set_xlabel(xlabel='seller type', fontsize=5, weight='bold')\nax20_s.set_ylabel(ylabel='mileage in kmpl', fontsize=5, weight='bold')\nfor i in ['top', 'right']:\n    ax20.spines[i].set_visible(False)\n\nax21 = fig.add_subplot(gs[2,1])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(2,'#9c9a9a')\nax21_s = sns.stripplot(x=data.fuel_type, y=data.mileage, size=4, palette=pal)\nax21_s.tick_params(labelsize=4, left=False)\nax21_s.set_xlabel(xlabel='fuel type', fontsize=5, weight='bold')\nax21_s.set_ylabel(ylabel=None)\nax21_s.set_yticks([])\nfor i in ['top', 'right', 'left']:\n    ax21.spines[i].set_visible(False)\n\nax22 = fig.add_subplot(gs[2,2])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(1,'#9c9a9a')\nax22_s = sns.stripplot(x=data.transmission_type, y=data.mileage, size=4, palette=pal)\nax22_s.tick_params(labelsize=4, left=False)\nax22_s.set_xlabel(xlabel='transmission type', fontsize=5, weight='bold')\nax22_s.set_ylabel(ylabel=None)\nax22_s.set_yticks([])\nfor i in ['top', 'right', 'left']:\n    ax22.spines[i].set_visible(False)\n\n# Row 4 Engine------------------------------------------------------------------------------\nax30 = fig.add_subplot(gs[3,0])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(0,'#9c9a9a')\nax30_s = sns.stripplot(x=data.seller_type, y=data.engine, size=4, palette=pal)\nax30_s.tick_params(labelsize=4, left=False)\nax30_s.set_xlabel(xlabel='seller type', fontsize=5, weight='bold')\nax30_s.set_ylabel(ylabel='engine in cc', fontsize=5, weight='bold')\nfor i in ['top', 'right']:\n    ax30.spines[i].set_visible(False)\n\nax31 = fig.add_subplot(gs[3,1])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(1,'#9c9a9a')\nax31_s = sns.stripplot(x=data.fuel_type, y=data.engine, size=4, palette=pal)\nax31_s.tick_params(labelsize=4, left=False)\nax31_s.set_xlabel(xlabel='fuel type', fontsize=5, weight='bold')\nax31_s.set_ylabel(ylabel=None)\nax31_s.set_yticks([])\nfor i in ['top', 'right', 'left']:\n    ax31.spines[i].set_visible(False)\n\nax32 = fig.add_subplot(gs[3,2])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(0,'#9c9a9a')\nax32_s = sns.stripplot(x=data.transmission_type, y=data.engine, size=4, palette=pal)\nax32_s.tick_params(labelsize=4, left=False)\nax32_s.set_xlabel(xlabel='transmission type', fontsize=5, weight='bold')\nax32_s.set_ylabel(ylabel=None)\nax32_s.set_yticks([])\nfor i in ['top', 'right', 'left']:\n    ax32.spines[i].set_visible(False)\n\n# Row 5 max power------------------------------------------------------------------------------\nax40 = fig.add_subplot(gs[4,0])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(0,'#9c9a9a')\nax40_s = sns.stripplot(x=data.seller_type, y=data.max_power, size=4, palette=pal)\nax40_s.tick_params(labelsize=4, left=False)\nax40_s.set_xlabel(xlabel='seller type', fontsize=5, weight='bold')\nax40_s.set_ylabel(ylabel='max power in bhp', fontsize=5, weight='bold')\nfor i in ['top', 'right']:\n    ax40.spines[i].set_visible(False)\n\nax41 = fig.add_subplot(gs[4,1])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(1,'#9c9a9a')\nax41_s = sns.stripplot(x=data.fuel_type, y=data.max_power, size=4, palette=pal)\nax41_s.tick_params(labelsize=4, left=False)\nax41_s.set_xlabel(xlabel='fuel type', fontsize=5, weight='bold')\nax41_s.set_ylabel(ylabel=None)\nax41_s.set_yticks([])\nfor i in ['top', 'right', 'left']:\n    ax41.spines[i].set_visible(False)\n\nax42 = fig.add_subplot(gs[4,2])\npal = sns.light_palette('#79c6e8', reverse=True, n_colors=10)\npal.insert(0,'#9c9a9a')\nax42_s = sns.stripplot(x=data.transmission_type, y=data.max_power, size=4, palette=pal)\nax42_s.tick_params(labelsize=4, left=False)\nax42_s.set_xlabel(xlabel='transmission type', fontsize=5, weight='bold')\nax42_s.set_ylabel(ylabel=None)\nax42_s.set_yticks([])\nfor i in ['top', 'right', 'left']:\n    ax42.spines[i].set_visible(False)\n\nplt.show()","ae25c379":"fig = plt.figure(figsize=(7,5))\ngs = fig.add_gridspec(2,1)\ncolor = ['#79c6e8' for i in range(data.shape[0])]\ncolor[4967] = color[19972] = color[14257] = color[475] = '#9c9a9a'\nax=fig.add_subplot(gs[0,0])\nax.scatter(x=data.km_driven\/1000000,y=data.selling_price\/1000000,s=28,\n                       color=color, edgecolor='white', linewidth=0.4)\nax.tick_params(labelsize=5, left=False)\nax.set_ylabel(ylabel='selling price in millions', fontsize=5, weight='bold')\n\nax1=fig.add_subplot(gs[1,0])\nrmd_data = data[data['selling_price']<20000000]\nrmd_data = rmd_data[rmd_data['km_driven']<2000000]\nax1.scatter(x=rmd_data.km_driven\/1000000,y=rmd_data.selling_price\/1000000,\n            s=28, color='#79c6e8', edgecolor='white', linewidth=0.4)\nax1.tick_params(labelsize=5, left=False)\nax1.set_xlabel(xlabel='kilometer driven in millions', fontsize=5, weight='bold')\nax1.set_ylabel(ylabel='selling price in millions', fontsize=5, weight='bold')\nax1.text(x=1, y=12, s='After removing outliers', fontsize=6, weight='bold', alpha=0.6,\n        bbox=dict(facecolor='white', lw=0.5, alpha=0.3))\nsns.despine()\nplt.show()","eaf3d385":"fig = plt.figure(figsize=(7,5))\ngs = fig.add_gridspec(2,1)\ncolor = ['#79c6e8' for i in range(data.shape[0])]\ncolor[4967] = color[14257] = color[475] = color[11964] = color[18396]= '#9c9a9a'\nax=fig.add_subplot(gs[0,0])\nax.scatter(x=data.mileage,y=data.selling_price\/1000000,s=28,\n                       color=color, edgecolor='white', linewidth=0.4)\nax.tick_params(labelsize=5, left=False)\nax.set_ylabel(ylabel='selling price in millions', fontsize=5, weight='bold')\n\nax1=fig.add_subplot(gs[1,0])\nrmd_data = data[data['selling_price']<20000000]\nrmd_data = rmd_data[rmd_data['mileage']<100]\nax1.scatter(x=rmd_data.mileage,y=rmd_data.selling_price\/1000000,s=28,\n                       color='#79c6e8', edgecolor='white', linewidth=0.4)\nax1.tick_params(labelsize=5, left=False)\nax1.set_xlabel(xlabel='mileage in kmpl', fontsize=5, weight='bold')\nax1.set_ylabel(ylabel='selling price in millions', fontsize=5, weight='bold')\nax1.text(x=25, y=12, s='After removing outliers', fontsize=6, weight='bold', alpha=0.6,\n        bbox=dict(facecolor='white', lw=0.5, alpha=0.3))\nsns.despine()\nplt.show()","5d7591c8":"fig = plt.figure(figsize=(7,5))\ngs = fig.add_gridspec(2,1)\ncolor = ['#79c6e8' for i in range(data.shape[0])]\ncolor[4967] = color[475] = color[14257] = '#9c9a9a'\nax=fig.add_subplot(gs[0,0])\nax.scatter(x=data.engine,y=data.selling_price\/1000000,s=28,\n                       color=color, edgecolor='white', linewidth=0.4)\nax.tick_params(labelsize=5, left=False)\nax.set_ylabel(ylabel='selling price in millions', fontsize=5, weight='bold')\n\nax1=fig.add_subplot(gs[1,0])\nrmd_data = data[data['selling_price']<20000000]\nrmd_data = rmd_data[rmd_data['engine']<6100]\nax1.scatter(x=rmd_data.engine,y=rmd_data.selling_price\/1000000,s=28,\n                       color='#79c6e8', edgecolor='white', linewidth=0.4)\nax1.tick_params(labelsize=5, left=False)\nax1.set_xlabel(xlabel='engine in cc', fontsize=5, weight='bold')\nax1.set_ylabel(ylabel='selling price in millions', fontsize=5, weight='bold')\nax1.text(x=4500, y=11, s='After removing outliers', fontsize=6, weight='bold', alpha=0.6,\n        bbox=dict(facecolor='white', lw=0.5, alpha=0.3))\nsns.despine()\nplt.show()","3577eeef":"fig = plt.figure(figsize=(7,5))\ngs = fig.add_gridspec(2,1)\ncolor = ['#79c6e8' for i in range(data.shape[0])]\ncolor[4967]=color[475]=color[14257]=color[1536]=color[17020]=color[16856]=color[13130]=color[3980]='#9c9a9a'\nax=fig.add_subplot(gs[0,0])\nax.scatter(x=data.max_power,y=data.selling_price\/1000000,s=28,\n                       color=color, edgecolor='white', linewidth=0.4)\nax.tick_params(labelsize=5, left=False)\nax.set_ylabel(ylabel='selling price in millions', fontsize=5, weight='bold')\n\nax1=fig.add_subplot(gs[1,0])\nrmd_data = data[data['selling_price']<20000000]\nrmd_data = rmd_data[rmd_data['max_power']<530]\nax1.scatter(x=rmd_data.max_power,y=rmd_data.selling_price\/1000000,s=28,\n                       color='#79c6e8', edgecolor='white', linewidth=0.4)\nax1.tick_params(labelsize=5, left=False)\nax1.set_xlabel(xlabel='max_power in bhp', fontsize=5, weight='bold')\nax1.set_ylabel(ylabel='selling price in millions', fontsize=5, weight='bold')\nax1.text(x=380, y=11, s='After removing outliers', fontsize=6, weight='bold', alpha=0.6,\n        bbox=dict(facecolor='white', lw=0.5, alpha=0.3))\nsns.despine()\nplt.show()","fdf5c7aa":"fig = plt.figure(figsize=(7,4))\ngs = fig.add_gridspec(1,5)\ngs.update(wspace=0.2)\n# Selling price---------------------------\nax0=fig.add_subplot(gs[0,0])\nax0_s = sns.boxplot(y=data['km_driven'],width=0.5,color='#79c6e8',linewidth=0.5,fliersize=3)\nax0_s.tick_params(labelsize=5, left=False)\nax0_s.set_xticks([])\nax0_s.set_yticks([])\nax0_s.set_ylabel(None)\nax0_s.set_xlabel('selling price', fontsize=5, weight='bold')\nfor i in ['top', 'right', 'left', 'bottom']:\n    ax0_s.spines[i].set_visible(False)\n# Kilometer driven---------------------------\nax1=fig.add_subplot(gs[0,1])\nax1_s = sns.boxplot(y=data['km_driven'],width=0.5,color='#79c6e8',linewidth=0.5,fliersize=3)\nax1_s.tick_params(labelsize=5, left=False)\nax1_s.set_xticks([])\nax1_s.set_yticks([])\nax1_s.set_ylabel(None)\nax1_s.set_xlabel('kilometer driven', fontsize=5, weight='bold')\nfor i in ['top', 'right', 'left', 'bottom']:\n    ax1_s.spines[i].set_visible(False)\n# mileage------------------------------------\nax2=fig.add_subplot(gs[0,2])\nax2_s = sns.boxplot(y=data['mileage'],width=0.5,color='#79c6e8',linewidth=0.5,fliersize=3)\nax2_s.tick_params(labelsize=5, left=False)\nax2_s.set_xticks([])\nax2_s.set_yticks([])\nax2_s.set_ylabel(None)\nax2_s.set_xlabel('mileage', fontsize=5, weight='bold')\nfor i in ['top', 'right', 'left', 'bottom']:\n    ax2_s.spines[i].set_visible(False)\n# engine--------------------------------------\nax3=fig.add_subplot(gs[0,3])\nax3_s = sns.boxplot(y=data['engine'],width=0.5,color='#79c6e8',linewidth=0.5,fliersize=3)\nax3_s.tick_params(labelsize=5, left=False)\nax3_s.set_xticks([])\nax3_s.set_yticks([])\nax3_s.set_ylabel(None)\nax3_s.set_xlabel('engine', fontsize=5, weight='bold')\nfor i in ['top', 'right', 'left', 'bottom']:\n    ax3.spines[i].set_visible(False)\n# max power------------------------------------\nax4=fig.add_subplot(gs[0,4])\nax4_s = sns.boxplot(y=data['max_power'],width=0.5,color='#79c6e8',linewidth=0.5,fliersize=3)\nax4_s.tick_params(labelsize=5, left=False)\nax4_s.set_xticks([])\nax4_s.set_yticks([])\nax4_s.set_ylabel(None)\nax4_s.set_xlabel('max power', fontsize=5, weight='bold')\nfor i in ['top', 'right', 'left', 'bottom']:\n    ax4_s.spines[i].set_visible(False)\n    \nplt.show()","25a08228":"fig = plt.figure(figsize=(6,4))\nax = sns.heatmap(data.corr(), cmap='Blues', mask=np.triu(data.corr(), k=1), cbar=False, annot=True,\n                 annot_kws=dict(fontsize=4))\nax.set_facecolor('white')\nax.tick_params(labelsize=5)\nplt.show()","25a15cb5":"null_count()","a9922541":"for i in ['mileage', 'engine', 'max_power', 'seats']:\n    company_name = data[data[i].isnull()]['company'].value_counts().index[0]\n    if data[i].nunique()>10:\n        values = data[data['company']==company_name][i].mean()\n    else:\n        values = data[data['company']==company_name][i].median()\n        \n    data[i].fillna(values, inplace=True)","2cd8875a":"data = data[data['selling_price'] < 20000000]\ndata = data[data['km_driven'] < 1000000]\ndata = data[data['mileage'] < 100]\ndata = data[data['engine'] < 6100]\ndata = data[data['max_power'] < 530]\ndata = data.reset_index(drop=True)","d71bb7ac":"company_name = data.company.value_counts().index[:15]\nfor i in range(data.shape[0]):\n    if data['company'][i] in company_name:\n         continue\n    else:\n        data['company'][i] = 'others'","83471a00":"data = pd.get_dummies(data=data, columns=['seller_type','fuel_type','transmission_type','company'], drop_first=True)\ndata.shape","ca7f914f":"fig = plt.figure(figsize=(6,4))\nax = sns.heatmap(data.corr(), cmap='Blues', mask=np.triu(data.corr(), k=1), cbar=False,\n                 annot_kws=dict(fontsize=4))\nax.set_facecolor('white')\nax.tick_params(labelsize=5)\nplt.show()","853d4097":"x = data.iloc[:,1:]\ny = data['selling_price']\nxtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.20,random_state=25)","d36f2dfe":"scaler = StandardScaler()\nxtrain = scaler.fit_transform(xtrain)\nxtest = scaler.transform(xtest)","23842ae2":"def do_prediction(classifier):\n    \n    # training the classifier on the dataset\n    classifier.fit(xtrain, ytrain)\n    \n    #Do prediction and evaluting the prediction\n    prediction = classifier.predict(xtest)\n    cross_validation_score = cross_val(xtrain, ytrain, classifier)\n    error = mean_absolute_error(ytest, prediction)\n    \n    return error, cross_validation_score\n\ndef cross_val(xtrain, ytrain, classifier):\n    \n    # Applying k-Fold Cross Validation\n    accuracies = cross_val_score(estimator = classifier, X = xtrain, y = ytrain, cv = 5)\n    return accuracies.mean()","88b86aad":"model_1 = LinearRegression()\nerror, score = do_prediction(model_1)\n\nprint('Linear Regression MAE: {}'.format(round(error,2)))\nprint('Cross validation score: {}'.format(round(score,2)))","1d63e8f4":"model_2 = DecisionTreeRegressor()\nerror, score = do_prediction(model_2)\n\nprint('Decision Tree Regressor MAE: {}'.format(round(error,2)))\nprint('Cross validation score: {}'.format(round(score,2)))","6bedf420":"model_3 = RandomForestRegressor()\nerror, score = do_prediction(model_3)\n\nprint('Random Forest Regressor MAE: {}'.format(round(error,2)))\nprint('Cross validation score: {}'.format(round(score,2)))","8ec1fcf2":"best_model = RandomForestRegressor(n_estimators=400,\n                                  min_samples_split=10,\n                                  min_samples_leaf=1,\n                                  max_features='sqrt',\n                                  max_depth=60,\n                                  bootstrap=False)\n\nerror, score = do_prediction(best_model)\nprint('Random Forest with hyperparameter tuning MAE: {}'.format(round(error,2)))\nprint('Cross validation score: {}'.format(round(score,2)))","304c84ac":"<h3 style=\"font-family:serif\"><b>Bivariate Analysis <\/b><\/h3>","90f7a03d":"<div style=\"color:white;\n           display:fill;\n           border-radius:10px;\n           background-color: #35bdb3;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<h1 style=\"padding: 35px; color:white; text-align:center; font-family:serif\"><b>Predicting used car prices in India<\/b><\/h1>\n<\/div>","a9fd9b91":"![](http:\/\/blog.quikr.com\/wp-content\/uploads\/2016\/06\/buy-second-hand-car-transfer-documents.jpg)","1c5c8fb9":"<h3 style=\"font-family:serif\"><b>Splitting the data into training and testing<\/b><\/h3>","3a0d8072":"<h3 style=\"font-family:serif\"><b>2. Decision Tree Regressor<\/b><\/h3>","cb89b16e":"<h3 style=\"font-family:serif\"><b>Cleaning selling price column<\/b><\/h3>\n<p>selling price has different values such as \"5.5 Lakh*\", \"2.3 Cr*\" and \"95,000*\" which is of data type object, gettting only the numerical value and multipling by suffix value lakhs, cr... eg(5.5 Lakh*: 500000, 2.3Cr*: 23000000, 95,000*: 95000) <\/p>","560d5c4d":"<h3 style=\"font-family:serif\"><b> Reading the dataset <\/b><\/h3>","9c83c6bb":"<div style=\"color:white;\n           display:fill;\n           border-radius:10px;\n           background-color: #35bdb3;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<h1 style=\"padding: 20px; color:white; text-align:center; font-family:serif\"><b>Model building<\/b><\/h1>\n<\/div>","ea135115":"<h3 style=\"font-family:serif\"><b>4. Random Forest Regressor Hyperparameter tuning<\/b><\/h3>","a049bad2":"<h3 style=\"font-family:serif\"><b>Univariate analysis in numerical features<\/b><\/h3>","e0a98ec5":"<h3 style=\"font-family:serif\"><b>Encoding categorical features<\/b><\/h3>","f302faa2":"<h3 style=\"font-family:serif\"><b> Removing outliers in the data <\/b><\/h3>","2f345f4a":"<h3 style=\"font-family:serif\"><b>Appling discretization on company<\/b><\/h3>","a7eddcf2":"<div style=\"color:white;\n           display:fill;\n           border-radius:10px;\n           background-color: #35bdb3;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<h1 style=\"padding: 20px; color:white; text-align:center; font-family:serif\"><b>Exploratory data analysis<\/b><\/h1>\n<\/div>","def3c07a":"<h3 style=\"font-family:serif\"><b>Univariate Analysis in categorical features<\/b><\/h3>","16386d0e":"<div style=\"color:white;\n           display:fill;\n           border-radius:10px;\n           background-color: #35bdb3;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<h1 style=\"padding: 20px; color:white; text-align:center; font-family:serif\"><b>Feature engineering<\/b><\/h1>\n<\/div>","599a8f2c":"<h3 style=\"font-family:serif\"><b>Changing the data types of the columns<\/b><\/h3>\n<p>changing the data types of the feaures such as selling_price, km_driven, mileage, engine, max_power, seats to int\/float<\/p>","5c773f69":"<h3 style=\"font-family:serif\"><b>Checking NaN values<\/b><\/h3>","2dd567dc":"<h3 style=\"font-family:serif\"><b>Creating new feature Company<\/b><\/h3>\n<p> creating a new feature \"company\" from full_name by getting the first word which is actually the cars company name, \"Ford Ecosport 2015-2021 1.5 TDCi Titanium BSIV\" this car model belongs to Ford company<\/p>","14017642":"<h3 style=\"font-family:serif\"><b>Cleaning kilometer driven, Mileage, Engine, Maxpower and Seats columns<\/b><\/h3>\n<p> km_driven, mileage, engine, max_power and seats have values like \"120,000 kms\", \"Mileage19.7 kmpl\", \"Engine796CC\", \"Max Power46.3 bhp\" and \"seats5\", getting only the numerical values from those strings. eg (km_driven: 120000, mileage: 19.7, engine:796, max_power: 46.3, seats: 5)<\/p>","53b615ca":"<h3 style=\"font-family:serif\"><b> Importing the required libraries<\/b><\/h3>","d4a9947d":"<h3 style=\"font-family:serif\"><b>Basic statistic on numerical features<\/b><\/h3>","ebddee78":"<h3 style=\"font-family:serif\"><b>Droping unwanted columns<\/b><\/h3>\n<p>Droping \"new_price\" column which has more the 50 percent missing values, \"full_name\" because I created company column for better analysis and \"owner_type\" for having only one value which doesn't provide any information.<\/p>\n","15b027cd":"<h3 style=\"font-family:serif\"><b>1. Linear Regression<\/b><\/h3>","6f8552b3":"<h3 style=\"font-family:serif\"><b>Basic statistics on categorical features<\/b><\/h3>","6ef088bc":"<h3 style=\"font-family:serif\"><b> Imputing missing values <\/b><\/h3>","5939a2d4":"<h3 style=\"font-family:serif\"><b>3. Random Forest Regressor<\/b><\/h3>","c07fb59a":"<div style=\"color:white;\n           display:fill;\n           border-radius:10px;\n           background-color: #35bdb3;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<h1 style=\"padding: 20px; color:white; text-align:center; font-family:serif\"><b>Cleaning the dataset<\/b><\/h1>\n<\/div>","18a5797d":"<h3 style=\"font-family:serif\"><b>Feature Scaling<\/b><\/h3>"}}