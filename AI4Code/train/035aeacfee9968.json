{"cell_type":{"d854a20a":"code","93fb9609":"code","48efaa96":"code","e4d84265":"code","bc986a3f":"code","22fcac01":"code","ffeccfd2":"code","8d01615e":"code","5aa80ad4":"code","4743f6a4":"code","be8a193e":"code","77d54f37":"code","71bc9962":"code","665f265f":"code","592ba3f3":"code","7a403eb6":"code","886f8d3a":"code","bc987599":"code","73ed3e52":"code","4dfb44bb":"code","f88140fe":"code","a57996d6":"code","6d561a46":"code","bb441052":"code","7b71de8e":"code","c5c90b86":"code","9644c5ec":"code","b3e60af2":"code","88cbecd5":"code","9f3816a2":"code","737921d8":"code","1a486a08":"code","e954c81f":"code","bbc7e8e7":"code","893db76b":"code","b501928a":"code","8f0edf52":"code","ec3b678c":"code","014e32a5":"code","31651161":"code","3d591162":"code","39409633":"code","1e118e4b":"code","223c85a1":"code","c2036fb4":"code","3155bf3c":"code","837d4fda":"code","b1e218ea":"code","f590b200":"code","d1e5a37e":"code","716e1438":"code","02619abc":"code","8fef08ee":"code","50fefbf9":"code","c3f29d80":"code","b3577415":"code","c75af0a9":"code","ba0a3798":"code","762af4fd":"code","1daf43f8":"code","12a206eb":"code","00b5da37":"code","69124792":"code","5d8df8b5":"code","cb98c843":"code","40bfdfde":"code","1c770019":"code","eae04b54":"markdown","1748b05e":"markdown","6955eea7":"markdown","f1e9e857":"markdown","00210fac":"markdown","03a6b1a7":"markdown","6b6172e7":"markdown","6cbade4f":"markdown","9dfa8dc5":"markdown","ce7ee242":"markdown","a33c6a74":"markdown","741db797":"markdown","35dfd26b":"markdown","346384d2":"markdown","b330d175":"markdown","e1fece16":"markdown"},"source":{"d854a20a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","93fb9609":"import random","48efaa96":"random.seed(101)","e4d84265":"import datetime","bc986a3f":"train = pd.read_csv('..\/input\/dataset\/train.csv')\ntest = pd.read_csv('..\/input\/dataset\/test.csv')","22fcac01":"train.head()","ffeccfd2":"train.info()","8d01615e":"train.corr()","5aa80ad4":"train[train[\"condition\"].isnull()][\"breed_category\"].value_counts()","4743f6a4":"train[train[\"condition\"].isnull()][\"pet_category\"].value_counts()","be8a193e":"train_data=train.drop(\"pet_id\",axis=1)\ntest_data = test.drop(\"pet_id\",axis=1)","77d54f37":"train_data[\"condition\"]=train_data[\"condition\"].fillna(-1)\ntest_data[\"condition\"]=test_data[\"condition\"].fillna(-1)","71bc9962":"train_data[\"issue_date\"]  = list(map(pd.Timestamp.date,list(map(pd.Timestamp,train_data[\"issue_date\"]))))\ntest_data[\"issue_date\"]  = list(map(pd.Timestamp.date,list(map(pd.Timestamp,test_data[\"issue_date\"]))))","665f265f":"train_data['list_date'] = list(map(pd.Timestamp.date,list(map(pd.Timestamp,train_data[\"listing_date\"]))))\ntest_data['list_date'] = list(map(pd.Timestamp.date,list(map(pd.Timestamp,test_data[\"listing_date\"]))))","592ba3f3":"train_data[\"gap_days\"] = train_data[\"list_date\"]-train_data[\"issue_date\"]\ntest_data[\"gap_days\"] = test_data[\"list_date\"]-test_data[\"issue_date\"]","7a403eb6":"train_data[\"gap_days\"]=train_data[\"gap_days\"].apply(lambda x: x.days)\ntest_data[\"gap_days\"]=test_data[\"gap_days\"].apply(lambda x: x.days)","886f8d3a":"def time_of_day(col):\n    hour = pd.Timestamp.time(pd.Timestamp(col)).hour\n    if hour in range(0,6,1):\n        return \"dawn\"\n    elif hour in range(6,12,1):\n        return \"morning\"\n    elif hour in range(12,18,1):\n        return \"afternoon\"\n    elif hour in range(18,24,1):\n        return \"night\"","bc987599":"train_data[\"time_of_day\"]=train_data[\"listing_date\"].apply(time_of_day)\ntest_data[\"time_of_day\"]=test_data[\"listing_date\"].apply(time_of_day)","73ed3e52":"train_data[\"list_year\"] = train_data[\"list_date\"].apply(lambda x: x.year)\n\ntest_data[\"list_year\"] = test_data[\"list_date\"].apply(lambda x: x.year)","4dfb44bb":"train_data[\"list_season\"] = pd.cut(train_data[\"list_date\"].apply(lambda x: x.month),3,labels=[\"spring\",\"summer\",\"winter\"])\n\ntest_data[\"list_season\"] = pd.cut(test_data[\"list_date\"].apply(lambda x: x.month), 3, labels=[\"spring\",\"summer\",\"winter\"])","f88140fe":"train_data[\"list_time_month\"] = pd.cut(train_data[\"list_date\"].apply(lambda x: x.day),4,labels=[\"w1\",\"w2\",\"w3\",\"w4\"])\ntest_data[\"list_time_month\"] = pd.cut(test_data[\"list_date\"].apply(lambda x: x.day),4,labels=[\"w1\",\"w2\",\"w3\",\"w4\"])","a57996d6":"train_data.drop([\"issue_date\",\"list_date\",\"listing_date\"],axis=1,inplace=True)\ntest_data.drop([\"issue_date\",\"list_date\",\"listing_date\"],axis=1,inplace=True)","6d561a46":"train_data[\"rare\"]=train_data[\"color_type\"].apply(lambda x: 1 if x in train.color_type.value_counts().keys()[-8:] else 0)\ntest_data[\"rare\"]=test_data[\"color_type\"].apply(lambda x: 1 if x in train.color_type.value_counts().keys()[-8:] else 0)","bb441052":"train_data.corr()","7b71de8e":"color = pd.get_dummies(train_data[\"color_type\"],drop_first=True)\nt_color = pd.get_dummies(test_data[\"color_type\"],drop_first=True)\n\ntrain_data = pd.concat([train_data.drop(\"color_type\",axis=1),color],axis=1)\ntest_data = pd.concat([test_data.drop(\"color_type\",axis=1),t_color],axis=1)","c5c90b86":"test_data.columns","9644c5ec":"test_data.insert(16,value=np.zeros(8072),column=\"Black Tiger\")","b3e60af2":"test_data.insert(29,value=np.zeros(8072),column=\"Brown Tiger\")","88cbecd5":"time= pd.get_dummies(train_data[\"time_of_day\"],drop_first=True)\nt_time = pd.get_dummies(test_data[\"time_of_day\"],drop_first=True)\n\ntrain_data = pd.concat([train_data.drop(\"time_of_day\",axis=1),time],axis=1)\ntest_data = pd.concat([test_data.drop(\"time_of_day\",axis=1),t_time],axis=1)","9f3816a2":"from sklearn.preprocessing import LabelEncoder","737921d8":"encode = LabelEncoder()\n","1a486a08":"train_data[\"list_year\"]=encode.fit_transform(train_data[\"list_year\"])\ntest_data[\"list_year\"]=encode.transform(test_data[\"list_year\"])","e954c81f":"season = pd.get_dummies(train_data[\"list_season\"],drop_first=True)\nseason_t = pd.get_dummies(test_data[\"list_season\"],drop_first=True)\n\ntrain_data = pd.concat([train_data.drop(\"list_season\",axis=1),season],axis=1)\ntest_data = pd.concat([test_data.drop(\"list_season\",axis=1),season_t],axis=1)","bbc7e8e7":"month = pd.get_dummies(train_data[\"list_time_month\"],drop_first=True)\nmonth_t = pd.get_dummies(test_data[\"list_time_month\"],drop_first=True)\n\ntrain_data = pd.concat([train_data.drop(\"list_time_month\",axis=1),month],axis=1)\ntest_data = pd.concat([test_data.drop(\"list_time_month\",axis=1),month_t],axis=1)","893db76b":"train_data[\"pet_size\"]=pd.cut(train_data[[\"length(m)\",\"height(cm)\"]].apply(lambda cols: cols[0]*cols[1] ,axis=1),4,labels=[\"small\",\"little\",\"medium\",\"large\"])\ntest_data[\"pet_size\"]=pd.cut(test_data[[\"length(m)\",\"height(cm)\"]].apply(lambda cols: cols[0]*cols[1] ,axis=1),4,labels=[\"small\",\"little\",\"medium\",\"large\"])\n","b501928a":"size = pd.get_dummies(train_data[\"pet_size\"],drop_first=True)\nsize_t = pd.get_dummies(test_data[\"pet_size\"],drop_first=True)\n\ntrain_data = pd.concat([train_data.drop(\"pet_size\",axis=1),size],axis=1)\ntest_data = pd.concat([test_data.drop(\"pet_size\",axis=1),size_t],axis=1)","8f0edf52":"train_data2 = train_data.copy()\ntest_data2 = test_data.copy()","ec3b678c":"train_data.drop([\"length(m)\",\"height(cm)\"],axis=1,inplace=True)","014e32a5":"test_data.drop([\"length(m)\",\"height(cm)\"],axis=1,inplace=True)","31651161":"train_data2.drop([\"length(m)\",\"height(cm)\"],axis=1,inplace=True)","3d591162":"test_data2.drop([\"length(m)\",\"height(cm)\"],axis=1,inplace=True)","39409633":"cond = pd.get_dummies(train_data[\"condition\"],drop_first=True)\ncond_t = pd.get_dummies(test_data[\"condition\"],drop_first=True)\n\ntrain_data= pd.concat([train_data.drop(\"condition\",axis=1),cond],axis=1)\ntest_data = pd.concat([test_data.drop(\"condition\",axis=1),cond_t],axis=1)\n\ncond2 = pd.get_dummies(train_data2[\"condition\"],drop_first=True)\ncond2_t = pd.get_dummies(test_data2[\"condition\"],drop_first=True)\n\ntrain_data2= pd.concat([train_data2.drop(\"condition\",axis=1),cond2],axis=1)\ntest_data2 = pd.concat([test_data2.drop(\"condition\",axis=1),cond2_t],axis=1)","1e118e4b":"x_train = train_data.drop(['breed_category','pet_category'],axis=1).values\nx_test = test_data.values\n\nx_train2 = train_data2.drop(['breed_category','pet_category'],axis=1).values\nx_test2 = test_data2.values","223c85a1":"y_train_breed = train_data[\"breed_category\"]\ny_train_pet = train_data2[\"pet_category\"]","c2036fb4":"from sklearn.preprocessing import StandardScaler","3155bf3c":"sc = StandardScaler()","837d4fda":"x_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","b1e218ea":"sc2 = StandardScaler()","f590b200":"x_train2 = sc.fit_transform(x_train2)\nx_test2 = sc.transform(x_test2)","d1e5a37e":"train[\"pet_category\"].value_counts()","716e1438":"train[\"breed_category\"].value_counts()","02619abc":"from imblearn.over_sampling import SMOTE","8fef08ee":"sm_pet=SMOTE(sampling_strategy={0:941})\n\nx_train2,y_train_pet = sm_pet.fit_resample(x_train2,y_train_pet)\n\ny_train_pet.value_counts()","50fefbf9":"sm_breed=SMOTE(sampling_strategy={2:1500})\n\nx_train,y_train_breed = sm_breed.fit_resample(x_train,y_train_breed)\n\ny_train_breed.value_counts()","c3f29d80":"from xgboost import XGBClassifier","b3577415":"from sklearn.model_selection import RandomizedSearchCV","c75af0a9":"xgb = XGBClassifier(objective=\"multi:softmax\")","ba0a3798":"parameters = {\"learning_rate\": [0.3, 0.01,0.1],\n               \"gamma\" : [ 0.3, 0.5, 1, 1.5, 2,2.2,2.4],\n               \"max_depth\": [6, 7, 8, 9],\n               \"colsample_bytree\": [0.3, 0.6, 0.8, 1.0],\n               \"subsample\": [0.2, 0.4, 0.5,0.6,0.8],\n               \"reg_alpha\": [0, 0.5, 1],\n               \"reg_lambda\": [0,1, 1.5, 2],\n               \"min_child_weight\": [1, 3, 5, 7, 9]\n              \n               }","762af4fd":"xgb_rscv = RandomizedSearchCV(xgb, param_distributions = parameters, scoring = \"f1_micro\",\n                             cv = 5, verbose = 2, random_state = 1 )","1daf43f8":"#xgb_rscv.fit(x_train,y_train_breed)","12a206eb":"#print(xgb_rscv.best_score_)\n#print(xgb_rscv.best_params_)","00b5da37":"\n\nxgb = XGBClassifier(objective=\"multi:softmax\",max_depth= 8, gamma =2.2 ,learning_rate=0.01 ,colsample_bytree=1.0 ,subsample=0.8 , reg_alpha=0.5 ,reg_lambda= 2,min_child_weight= 3,random_state=101)\n\n","69124792":"xgb.fit(x_train,y_train_breed)","5d8df8b5":"pred_breed= xgb.predict(x_test)","cb98c843":"xgb1 = XGBClassifier(objective=\"multi:softmax\",max_depth=8,random_state=101)","40bfdfde":"xgb1.fit(x_train2,y_train_pet)","1c770019":"pred_pet = xgb1.predict(x_test2)","eae04b54":"### A new feature called pet size is created by multiplying length and height and than categorizing the values into one of four categories namely \"Small\", \"Little\", \"Medium\" ,\"Large\"","1748b05e":"### It is observed from the distribution of classes that a high class imbalance exists. Thus SMOTE is used for resampling the data","6955eea7":"The list year column is label encoded","f1e9e857":"### We start by checking out the null values in the column condition and their relationship with the target variables.\n","00210fac":"### We make an important observation here. It is seen that all null values for the column condition occurs for breed_category 2. This means that the null value in particular can be used as an identifier for breed_category 2. This can be done by imputing a value say -1 for the null value.","03a6b1a7":"### After trying out a number of models we concluded that in this case XGBoost Classifier gives the best performance. We used randomized search to arrive at the best combination of the hyperparameters","6b6172e7":"# **EDA**","6cbade4f":"### From the time part of the list date we create a new feature. If the pet was listed in between 00:00 hours to 6:00 hours we name the time of day \"DAWN\". In the same way for 6:00 hrs to 12:00 hrs \"Morning\", 12:00 hrs to 18:00 hrs \"Afternoon\" and 18:00 hrs to 12 in the night \"Night\".","9dfa8dc5":"### We observe that the dataset has 11 columns. The pet_id column gives unique identifiers for each pet. Therfore we will not be using that column on our model. The dataset has two target categories namely the \"breed_category\" and the \"pet_category\".","ce7ee242":"### The year part of the list date is treated as a new feature. From the month part of the list date we extract information about the season in which the pet was listed since this might have a relation to the breed or category of the pet. From the day we infer the time of month(quarter) in which the pet was listed","a33c6a74":"### Since there are two target columns we will be developing two individual models for predictions. Therefore we are creating two copies of the train data in case difference transformations need to be applied.","741db797":"### The time of month feature is created by placing the date into one of four quarters of the month namely \"W1, W2, W3 and W4\"","35dfd26b":"### From the issue date and list date columns the date part is extracted. Then we find the gap in days between the list date and the issue date. Thus a new feature is obtained.","346384d2":"#### Now we start cleaning the data","b330d175":"#### The color type column is now one hot encoded. For the color categories that exist in the train set and not in the test set, columns are inserted in the test set to maintain uniformity.","e1fece16":"### The following feature describes if the color type of the pet is rare or not. It is observed in the color category that few colors occur very rarely and thus might have a link to the breed and pet category."}}