{"cell_type":{"992a1966":"code","e13e770a":"code","8bc1503c":"code","0c171590":"code","ce5ffe5b":"code","59ea2cfb":"code","b9bbe4ba":"code","35aeddf5":"code","a22c8ec3":"code","341df200":"code","f76af27a":"code","21c8adc8":"code","db64d2e2":"code","39f9e403":"code","a2c92053":"code","c85863e9":"code","12b07334":"code","cc767221":"code","f7fbbab4":"code","cc9bcd7a":"code","7537e479":"code","c86e2240":"markdown","71701f9a":"markdown","39227b51":"markdown"},"source":{"992a1966":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e13e770a":"df = pd.read_csv(\"..\/input\/spotify-dataset-19212020-160k-tracks\/data.csv\")","8bc1503c":"df.head(5)","0c171590":"df.shape","ce5ffe5b":"df.describe()","59ea2cfb":"df = df.drop(['duration_ms','key','artists','id','release_date'],axis = 1)","b9bbe4ba":"df.describe()","35aeddf5":"df = df.rename(columns ={'instrumentalness':'instrumental','valence':'positiveness', 'liveness':'live performance scale', 'year':'release date','mode':'major chord'})","a22c8ec3":"df.columns = map(lambda x: \n                 x.title(),\n                 df.columns)","341df200":"df.isnull().sum()","f76af27a":"df[\"Loudness\"] = abs(df[\"Loudness\"])\nsns.boxplot(y = df[\"Loudness\"])","21c8adc8":"fig, axes = plt.subplots(figsize=(18, 10))\nsns.boxplot(data = df)\n# sns.boxplot(df.drop(\n#                     df.columns[1],\n#                     axis = 1,\n#                     inplace = True)\n#                    )\n","db64d2e2":"df.corr()","39f9e403":"fig, axes = plt.subplots(figsize=(16, 16))\nsns.heatmap(df.corr())","a2c92053":"num_types = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnum = df.select_dtypes(include=num_types)","c85863e9":"from sklearn.cluster import KMeans\n# help(KMeans)\nkm = KMeans(n_clusters=51)\ncategory = km.fit_predict(num)\n\ndf['category'] = category\n","12b07334":"df.head()","cc767221":"song = input(\"What songs do you want to lookup?\")","f7fbbab4":"df.loc[df[\"Name\"] == song]\n","cc9bcd7a":"song_cat = df[df[\"Name\"]== song][\"category\"].values[0]\nsong_cat","7537e479":"df[df[\"category\"]== song_cat].sort_values(by=['Popularity'], ascending=False).head(10)\n","c86e2240":"Now to sort the songs based on popularity","71701f9a":"Selected only numerical data for k-means clustering. This excludes \"name\".","39227b51":"Imported kmean function from sklearn library.\nCreated a cluster of 10\nPassed the dataframe as the predictor variable"}}