{"cell_type":{"b5e2f9f3":"code","b7282ef4":"code","463ff672":"code","f71df8e5":"code","293b2a12":"code","05d86835":"code","fcbc77db":"code","004a1d06":"code","c30bb417":"code","ab676f4f":"code","f5af2f1d":"code","26097661":"code","2876a352":"code","c605bd29":"code","9be23356":"code","3d14796c":"code","c4d9cd54":"code","935a3876":"code","a4fee7ed":"code","4bfe85f9":"code","8f21314b":"code","af9184db":"code","70078afe":"code","d15901b8":"code","73df358c":"code","1359f90d":"code","fc0f19c9":"code","52e8b503":"code","f174711a":"code","63be5c73":"code","d9c5f9f2":"code","7ec33d82":"code","c1056a6b":"code","2265a6d3":"markdown","aca07052":"markdown","188ea42d":"markdown","421d410c":"markdown","b44c4f70":"markdown","b929eaf6":"markdown","58888c89":"markdown","ed87e27c":"markdown","6716d3b7":"markdown","efcca673":"markdown","fabc1e30":"markdown","65822356":"markdown","39d2f893":"markdown","56fcb0bc":"markdown","86703652":"markdown"},"source":{"b5e2f9f3":"import numpy as np \nimport pandas as pd \nimport os\nfrom matplotlib import pyplot as plt\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nimport category_encoders as ce","b7282ef4":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_sub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","463ff672":"df_train.head()","f71df8e5":"df_test.head()","293b2a12":"df_train.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)","05d86835":"df_test.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)","fcbc77db":"df_train.head()","004a1d06":"df_test.head()","c30bb417":"df_train['Cabin'] = df_train['Cabin'].replace(np.NaN, 'UNKNOWN', regex=True)\ndf_test['Cabin'] = df_test['Cabin'].replace(np.NaN, 'UNKNOWN', regex=True)","ab676f4f":"cabin_vals = np.unique(list(df_train['Cabin'].values) + list(df_test['Cabin'].values))\ncabin_vals","f5af2f1d":"mapping_d = {}\nfor i, feature in enumerate(cabin_vals):\n    mapping_d[feature] = i\n    \nencoder= ce.OrdinalEncoder(cols=['Cabin'], return_df=True,\n                           mapping=[{'col':'Cabin',\n                                     'mapping': mapping_d}])","26097661":"mapping_d","2876a352":"df_train = encoder.fit_transform(df_train)","c605bd29":"df_test = encoder.fit_transform(df_test)","9be23356":"df_train.head()","3d14796c":"df_test.head()","c4d9cd54":"cols_to_encode = ['Sex', 'Embarked']\nfor col in cols_to_encode:\n    le = LabelEncoder()\n    le.fit(df_train[col])\n    \n    df_train[col] = le.transform(df_train[col])\n    df_test[col] = le.transform(df_test[col])","935a3876":"df_train.head()","a4fee7ed":"df_test.head()","4bfe85f9":"df_train['Age'] = df_train['Age'].replace(np.NaN, -1)\ndf_test['Age'] = df_test['Age'].replace(np.NaN, -1)\ndf_train['Fare'] = df_train['Fare'].replace(np.NaN, -1)\ndf_test['Fare'] = df_test['Fare'].replace(np.NaN, -1)","8f21314b":"df_train[df_train.isna().any(axis=1)]","af9184db":"df_test[df_test.isna().any(axis=1)]","70078afe":"def age_group(x):\n    if x < 18:\n        return 'under_18'\n    elif x >= 18 and x <=30:\n        return '18_to_30'\n    else:\n        return 'above_30'","d15901b8":"df_train['Age_Group'] = df_train['Age'].apply(lambda x: age_group(x))\ndf_train.head()","73df358c":"df_test['Age_Group'] = df_test['Age'].apply(lambda x: age_group(x))\ndf_test.head()","1359f90d":"cols_to_encode = ['Age_Group']\nfor col in cols_to_encode:\n    le = LabelEncoder()\n    le.fit(df_train[col])\n    \n    df_train[col] = le.transform(df_train[col])\n    df_test[col] = le.transform(df_test[col])","fc0f19c9":"df_train.head()","52e8b503":"df_test.head()","f174711a":"y = df_train['Survived']\n#df_train.drop('Survived', axis=1, inplace=True)","63be5c73":"cols_to_scale = ['Pclass', 'Age', 'Fare', 'Cabin', 'Embarked', 'Age_Group']\nfor col in cols_to_scale:\n    sc = MinMaxScaler()\n    df_train[col] = sc.fit_transform(df_train[col].values.reshape(-1,1))\n    sc = MinMaxScaler()\n    df_test[col] = sc.fit_transform(df_test[col].values.reshape(-1,1))","d9c5f9f2":"df_train.head()","7ec33d82":"df_test.head()","c1056a6b":"df_train.to_csv('train_preprocessed.csv', index=False)\ndf_test.to_csv('test_preprocessed.csv', index=False)","2265a6d3":"Note that we have to encode again!","aca07052":"# Save Preprocessed Datasets For Modeling","188ea42d":"## Stratify Age Into Groups\n\nLooking at our [EDA](https:\/\/www.kaggle.com\/khoongweihao\/part-1-exploratory-data-analysis-eda) for `Age`, we can see that most of the passengers are between 18-30 years of age. We can generate new features that group the passengers into different age groups.","421d410c":"Next, we encode the categorical features which are strings.For which we use Scikit-learn's `LabelEncoder`:","b44c4f70":"# More Preprocessing\n\nBefore we begin to train our model for the classification task, we first scale the data with Scikit-learn's `StandardScaler`. And before that, we extract the target column from `df_train`.","b929eaf6":"Note that there are missing values in `Age` and `Fare`. For such cases, we impute them with `-1`.","58888c89":"# Imports","ed87e27c":"# Finishing Remarks\n\nThanks for reading and I welcome your feedback and suggestions for improvement. The notebook will be updated periodically as well.\n\nHappy Kaggling!\n\n---------------------------------------------------------------------\nMy notebooks in this series can be found in the links below:\n- [Exploratory Data Analysis (EDA)](https:\/\/www.kaggle.com\/khoongweihao\/part-1-exploratory-data-analysis-eda)\n- [Preprocessing & Feature Engineering](https:\/\/www.kaggle.com\/khoongweihao\/part-2-preprocessing-feature-engineering)\n- [Model Training & Validation Strategies](https:\/\/www.kaggle.com\/khoongweihao\/part-3-model-training-validation-strategies)\n- [Inference & Post-processing Techniques](https:\/\/www.kaggle.com\/khoongweihao\/part-4-inference-and-post-processing-techniques)\n\nBonus notebooks include adoption of recent research in terms of models, hyperparameter search, etc. They can be found in the links below:\n- Hyperparameter optimization with Optuna\n- TabNet ","6716d3b7":"Some sanity check...","efcca673":"Now we are ready to scale the data and use them for model training.","fabc1e30":"# Introduction\n\nIn this notebook series, I'll be sharing my typical approach to machine learning (ML) problems (in this case competitions), in an end-to-end ML pipeline starting with the data analyses, to feature engineering, validation strategies, model training and finally inference (with post-processing techniques).\n\nMy notebooks in this series can be found in the links below:\n- [Exploratory Data Analysis (EDA)](https:\/\/www.kaggle.com\/khoongweihao\/part-1-exploratory-data-analysis-eda)\n- [Preprocessing & Feature Engineering](https:\/\/www.kaggle.com\/khoongweihao\/part-2-preprocessing-feature-engineering)\n- [Model Training & Validation Strategies](https:\/\/www.kaggle.com\/khoongweihao\/part-3-model-training-validation-strategies)\n- [Inference & Post-processing Techniques](https:\/\/www.kaggle.com\/khoongweihao\/part-4-inference-and-post-processing-techniques)\n\nBonus notebooks include adoption of recent research in terms of models, hyperparameter search, etc. They can be found in the links below:\n- Hyperparameter optimization with Optuna\n- TabNet ","65822356":"# Feature Engineering","39d2f893":"# Preprocessing The Data","56fcb0bc":"For the other categorical variables, there are no null values from the EDA. So we can proceed to encode them with Scikit-learn's `LabelEncoder`:","86703652":"Firstly, let's see which features could be used to train the ML model in predicting passenger survival. The passenger name (`Name`) probably can't be used right off the bat as each passenger have a unique name (most likely, can be verified) and having the number of categories equal to the number of entries in the dataset may not be useful for the model. A possible way to incorporate the passenger name as a feature will be to encode it into say a binary category, where `1` indicates that the passenger is a person of status (e.g. monarchy, president, etc) and `0` otherwise. \n\nThe ticket number `Ticket` is similar in that sense, and may be dropped for initial ML modeling."}}