{"cell_type":{"8c4492be":"code","49da997a":"code","a657c1de":"code","d0cc78bd":"code","ac316dd7":"code","32b18a2a":"code","1876ca1e":"code","dcf8b98a":"code","5f1f4728":"code","afe9739f":"code","d9fbd2b9":"code","5ea2e82b":"code","ac5615b2":"code","3f5641b2":"code","c020cac6":"code","3e590547":"code","4035a5f3":"code","ac45e839":"code","b89c43be":"code","1888e22a":"code","d8363640":"code","207797a2":"markdown","2292130b":"markdown","7443a69a":"markdown","c92e3cdc":"markdown","c351b165":"markdown","7af94efc":"markdown","cf5e7833":"markdown","eefbcf97":"markdown","1caa1444":"markdown","5afdde87":"markdown","fabcef63":"markdown","d70e7ed4":"markdown"},"source":{"8c4492be":"!pip install -U lightautoml\n!pip install -U vininfo","49da997a":"# Standard python libraries\nimport logging\nimport os\nimport time\nimport requests\nlogging.basicConfig(format='[%(asctime)s] (%(levelname)s): %(message)s', level=logging.INFO)\n\n# Installed libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nimport torch\n\n# Imports from our package\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task","a657c1de":"N_THREADS = 4 # threads cnt for lgbm and linear models\nN_FOLDS = 5 # folds cnt for AutoML\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 1.5*60*60 # Time in seconds for automl run - UPDATED VALUE FOR UTILIZATION\nTARGET_NAME = 'final_price' # Target column name","d0cc78bd":"%%time\n\ntrain_data = pd.read_csv('..\/input\/lightautomlcourse-hw1\/train_data.csv')\ntrain_data.head()","ac316dd7":"test_data = pd.read_csv('..\/input\/lightautomlcourse-hw1\/test_data.csv')\ntest_data.head()","32b18a2a":"submission = pd.read_csv('..\/input\/lightautomlcourse-hw1\/sample_submission.csv')\nsubmission.head()","1876ca1e":"import vininfo\nfrom vininfo import Vin\n\ndef vin_to_dic(vin_no):\n    \"\"\"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 VIN-\u043d\u043e\u043c\u0435\u0440 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\"\"\"\n    vin_dic = {}\n    # print(type(vin_no))\n    \n    try:\n        vin_info = Vin(vin_no)\n\n        vin_dic['checksum_is_ok'] = vin_info.verify_checksum()\n        vin_dic['country'] = vin_info.country\n        vin_dic['manufacturer'] = vin_info.manufacturer\n        vin_dic['region'] = vin_info.region\n        vin_dic['produce_year'] = vin_info.years[0]\n        vin_dic['model_year'] = vin_info.years[1]\n        vin_dic['wmi'] = vin_info.wmi      # \u0432\u0441\u0435\u043c\u0438\u0440\u043d\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0438\u0437\u0433\u043e\u0442\u043e\u0432\u0438\u0442\u0435\u043b\u044f\n        vin_dic['vds'] = vin_info.vds[:-1] # \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \n        vin_dic['vis'] = vin_info.vis      # \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n\n        details = vin_info.details\n        if details:\n            vin_dic['details'] = True\n            vin_dic['body'] = str(details.body)\n            vin_dic['engine'] = str(details.engine)\n            vin_dic['model'] = str(details.model)\n            vin_dic['plant'] = str(details.plant)\n            vin_dic['serial'] = str(details.serial)\n            vin_dic['transmission'] = str(details.transmission)\n        else:\n            vin_dic['details'] = False\n            \n            for field in ['body', 'engine', 'model', 'plant', 'serial', 'transmission']:\n                vin_dic[field] = None\n        # print(vin_dic)\n    except:\n        vin_dic['checksum_is_ok'] = False\n    return vin_dic","dcf8b98a":"def manufacturer_category_dic(manufacturer_name):\n    category_dic = {}\n    luxury = ['FERRARI', 'LAMBORGHINI']\n    premium = ['BENTLEY', 'ROLLS-ROYCE', 'MASERATI', 'CHRYSLER', 'TESLA', 'PORSCHE', 'MERCEDES-BENZ', 'ASTON MARTIN']\n    business = ['JAGUAR', 'DODGE', 'TOYOTA', 'LEXUS', 'VOLKSWAGEN', 'AUDI', 'BMW', \n              'MITSUBISHI', 'SUBARU', 'INFINITI', 'LAND ROVER', 'JEEP', 'MINI', \n              'CADILLAC', 'ALFA ROMEO', 'VOLVO', 'HUMMER', 'LINCOLN', 'BUICK', 'MG', 'LANCIA']\n    middle = ['SKODA', 'HYUNDAI', 'CHEVROLET', 'NISSAN', 'FORD', 'HONDA', 'SSANGYONG', \n            'MAZDA', 'OPEL', 'KIA', 'RENAULT', 'SUZUKI', 'ROVER', 'FIAT', 'UAZ',\n            'CITROEN', 'PEUGEOT', 'ACURA', 'CHERY', 'ISUZU', 'GMC', 'MERCURY', 'SEAT', 'PONTIAC', 'SAAB']\n    trash = ['DAEWOO', 'VAZ', 'GAZ', 'ZAZ', 'MOSKVICH', 'DAIHATSU', 'HAVAL', 'TATA', 'SCION', 'SATURN']\n    chinese = ['JAC', 'GREATWALL', 'FOTON']\n    if manufacturer_name in luxury:\n        category_dic['category'] = 'luxury'\n    elif manufacturer_name in premium:\n        category_dic['category'] = 'premium'\n#     elif manufacturer_name in business:\n#         category_dic['category'] = 'business'\n#     elif manufacturer_name in chinese:\n#         category_dic['category'] = 'chinese'\n#     elif manufacturer_name in middle:\n#         category_dic['category'] = 'middle'\n#     elif manufacturer_name in trash:\n#         category_dic['category'] = 'trash'\n    else:\n        category_dic['category'] = 'other'\n    return category_dic","5f1f4728":"%%time\n\ndef additional_info_from_vin(data):\n    vin_data = data['car_vin'].apply(vin_to_dic).apply(pd.Series)\n    vin_data.head()\n    # print(vin_data[vin_data['checksum_is_ok']==True])\n    print(vin_data.columns)\n    data = data.join(vin_data)\n    data.head()\n    print(data.columns)\n    return data\n\ndef add_manufacturer_category_info(data):    \n    manufacturer_category_data = data['vehicle_manufacturer'].apply(manufacturer_category_dic).apply(pd.Series)\n    manufacturer_category_data.head()\n    data = data.join(manufacturer_category_data)\n    data.head()\n    print(data.columns)\n    return data\n\ndef create_extra_features(data):\n    data['NANs_cnt'] = data.isnull().sum(axis = 1) \n    data = additional_info_from_vin(data)\n    \ndef create_col_with_min_freq(data, col, min_freq = 10):\n    # replace rare values (less than min_freq rows) in feature by RARE_VALUE\n    data[col + '_fixed'] = data[col].astype(str)\n    data.loc[data[col + '_fixed'].value_counts()[data[col + '_fixed']].values < min_freq, col + '_fixed'] = \"RARE_VALUE\"\n    data.replace({'nan': np.nan}, inplace = True)\n\ndef create_gr_feats(data):\n    # create aggregation feats for numeric features based on categorical ones\n    for cat_col in ['vehicle_manufacturer', 'vehicle_model', 'vehicle_category',\n                   'vehicle_gearbox_type', 'doors_cnt', 'wheels', 'vehicle_color', \n                   'vehicle_interior_color', 'deal_type']:\n        create_col_with_min_freq(data, cat_col, 15)\n        for num_col in ['current_mileage', 'vehicle_year', 'car_leather_interior']:\n            for n, f in [('mean', np.mean), ('min', np.nanmin), ('max', np.nanmax)]:\n                data['FIXED_' + n + '_' + num_col + '_by_' + cat_col] = data.groupby(cat_col + '_fixed')[num_col].transform(f)\n                \n    # create features with counts\n    for col in ['vehicle_manufacturer', 'vehicle_model', 'vehicle_category',\n               'current_mileage', 'vehicle_year', 'vehicle_gearbox_type', 'doors_cnt',\n               'wheels', 'vehicle_color', 'vehicle_interior_color', 'car_vin', 'deal_type']:\n        data[col + '_cnt'] = data[col].map(data[col].value_counts(dropna = False))\n\n# train_data = additional_info_from_vin(train_data)\n# test_data = additional_info_from_vin(test_data)\n\n# train_data = add_manufacturer_category_info(train_data)\n# test_data = add_manufacturer_category_info(test_data)\n\ncreate_extra_features(train_data)\ncreate_extra_features(test_data)\n\nall_df = pd.concat([train_data, test_data]).reset_index(drop = True)\ncreate_gr_feats(all_df)\ntrain_data, test_data = all_df[:len(train_data)], all_df[len(train_data):]\nprint(train_data.shape, test_data.shape)","afe9739f":"train_data.head()","d9fbd2b9":"train_data_for_sale = train_data[train_data.deal_type == 'For Sale']\ntrain_data_for_rent = train_data[train_data.deal_type != 'For Sale']\n\ntest_data_for_sale  = test_data[test_data.deal_type == 'For Sale']\ntest_data_for_rent  = test_data[test_data.deal_type != 'For Sale']\n\nprint(train_data_for_sale.shape, train_data_for_rent.shape)\nprint(test_data_for_sale.shape, test_data_for_rent.shape)","5ea2e82b":"train_data_for_sale.head()","ac5615b2":"train_data_for_rent.head()","3f5641b2":"%%time\n# COMPETITION METRIC IS MAE SO WE SET IT FOR OUR TASK\ntask = Task('reg', loss='mae', metric='mae')","c020cac6":"%%time\n\nroles = {'target': TARGET_NAME,\n         'drop': ['row_ID']\n         }","3e590547":"%%time \n# CHANGED TabularAutoML to TabularUtilizedAutoML for timeout utilization\nautoml_for_sale = TabularUtilizedAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]},\n                       reader_params = {'n_jobs': N_THREADS, 'cv': N_FOLDS, 'random_state': RANDOM_STATE},\n                      )\noof_pred_for_sale = automl_for_sale.fit_predict(train_data_for_sale, roles = roles)\nlogging.info('oof_pred:\\n{}\\nShape = {}'.format(oof_pred_for_sale, oof_pred_for_sale.shape))","4035a5f3":"## %%time \n# CHANGED TabularAutoML to TabularUtilizedAutoML for timeout utilization\nautoml_for_rent = TabularUtilizedAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]},\n                       reader_params = {'n_jobs': N_THREADS, 'cv': N_FOLDS, 'random_state': RANDOM_STATE},\n                      )\noof_pred_for_rent = automl_for_rent.fit_predict(train_data_for_rent, roles = roles)\nlogging.info('oof_pred:\\n{}\\nShape = {}'.format(oof_pred_for_rent, oof_pred_for_rent.shape))","ac45e839":"%%time\n\n# Fast feature importances calculation\ntry:\n    fast_fi = automl_for_sale.get_feature_scores('fast')\n    fast_fi.set_index('Feature')['Importance'].plot.bar(figsize = (20, 10), grid = True)\nexcept:\n    pass\n\ntry:\n    fast_fi = automl_for_rent.get_feature_scores('fast')\n    fast_fi.set_index('Feature')['Importance'].plot.bar(figsize = (20, 10), grid = True)\nexcept:\n    pass","b89c43be":"%%time\n\ntest_pred_for_sale = automl_for_sale.predict(test_data_for_sale)\nlogging.info('Prediction for test data:\\n{}\\nShape = {}'\n              .format(test_pred_for_sale, test_pred_for_sale.shape))\n\nlogging.info('Check scores...')\nlogging.info('OOF score: {}'.format(mean_absolute_error(train_data_for_sale[TARGET_NAME].values, oof_pred_for_sale.data[:, 0])))\n\ntest_pred_for_rent = automl_for_rent.predict(test_data_for_rent)\nlogging.info('Prediction for test data:\\n{}\\nShape = {}'\n              .format(test_pred_for_rent, test_pred_for_rent.shape))\n\nlogging.info('Check scores...')\nlogging.info('OOF score: {}'.format(mean_absolute_error(train_data_for_rent[TARGET_NAME].values, oof_pred_for_rent.data[:, 0])))","1888e22a":"# submission[TARGET_NAME] = test_pred.data[:, 0]\nsubmission_for_sale = pd.DataFrame(index=test_data_for_sale.index.values)\nsubmission_for_sale[TARGET_NAME] = test_pred_for_sale.data[:, 0]\n\nsubmission_for_rent = pd.DataFrame(index=test_data_for_rent.index.values)\nsubmission_for_rent[TARGET_NAME] = test_pred_for_rent.data[:, 0]\nsubmission = pd.concat([submission_for_sale, submission_for_rent])\nsubmission=submission.sort_index()","d8363640":"submission.to_csv('lightautoml_baseline_custom_fe.csv', index = True)","207797a2":"# Step 0.2. Parameters ","2292130b":"## Step 4. Predict to test data and check scores","7443a69a":"# Step 0.0. Install LightAutoML","c92e3cdc":"## Step 2. Setup columns roles","c351b165":"# Step 0.1. Import necessary libraries ","7af94efc":"Roles setup here set target column and base date, which is used to calculate date differences:","cf5e7833":"To create AutoML model here we use `TabularAutoML` preset, which looks like:\n\n![TabularAutoML preset pipeline](https:\/\/github.com\/sberbank-ai-lab\/LightAutoML\/raw\/master\/imgs\/tutorial_2_pipeline.png)\n\nAll params we set above can be send inside preset to change its configuration:","eefbcf97":"# Step 0.4. Some user feature preparation ","1caa1444":"# Step 0.3. Data load ","5afdde87":"## Step 3. Create AutoML from preset","fabcef63":"# ========= AutoML preset usage =========\n\n\n## Step 1. Create Task","d70e7ed4":"## Step 5. Generate submission"}}