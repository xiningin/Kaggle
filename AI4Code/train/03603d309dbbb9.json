{"cell_type":{"95ac997e":"code","811a1091":"code","3507294e":"code","cf764dca":"code","304174e7":"code","4344bc02":"code","0bcc8cad":"code","cdc328f6":"code","25128bf7":"code","fed2ca42":"code","81b6b137":"code","c4d12f10":"code","7aa2dae9":"code","e8046a30":"code","99432d9f":"code","db99465d":"code","983fcc25":"code","0c9ffc6c":"code","239776f1":"code","568a3b6d":"code","a1c3d532":"code","7f6edd12":"code","c5a50ea9":"code","71da1819":"code","d4f54833":"code","08f170f7":"code","4797e8eb":"code","e6630bc6":"code","08a329ab":"code","9dff5741":"code","a7c3a33b":"code","87573c74":"code","474c29ab":"markdown","13c9d2f4":"markdown","c4699197":"markdown","6530d4ab":"markdown","4f5c3bcf":"markdown","0227c77c":"markdown","ef6b7610":"markdown","1fb67100":"markdown","e638ed5c":"markdown","2d234c7b":"markdown","0c5377a4":"markdown","2cc096ec":"markdown","f060f73e":"markdown","ea18d8f7":"markdown","cc44d1a1":"markdown","36381c54":"markdown","5f55b2a6":"markdown","15afc49d":"markdown","4059428b":"markdown","f0a2969f":"markdown","0ca798a8":"markdown","e236abeb":"markdown","8543b245":"markdown","1b3f7dc9":"markdown","7edf5bf0":"markdown","82993390":"markdown"},"source":{"95ac997e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nprint('Input Dataset')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","811a1091":"details_df = pd.read_csv('\/kaggle\/input\/indian-premier-league-ipl-all-seasons\/all_season_details.csv', index_col=None)\nbatting_df = pd.read_csv('\/kaggle\/input\/indian-premier-league-ipl-all-seasons\/all_season_batting_card.csv', index_col=None)\nsummary_df = pd.read_csv('\/kaggle\/input\/indian-premier-league-ipl-all-seasons\/all_season_summary.csv', index_col=None)\nbowling_df = pd.read_csv('\/kaggle\/input\/indian-premier-league-ipl-all-seasons\/all_season_bowling_card.csv', index_col=None)","3507294e":"details_df[['season', 'match_id', 'match_name', 'home_team',\n       'away_team', 'current_innings', 'innings_id', 'over', 'ball', 'runs',\n       'batsman1_name',  'bowler1_name']].head(6)","cf764dca":"def build_dataset():\n    df = None\n    df = details_df[(details_df[\"isWide\"] == False) & (details_df[\"isNoball\"] == False)]\n    df1=pd.pivot_table(df, index=['season','match_id','batsman1_name','bowler1_name','home_team', 'away_team','innings_id'],values=['runs'],aggfunc=sum)\n    df2=pd.pivot_table(df,  index=['season','match_id','batsman1_name','bowler1_name','home_team', 'away_team','innings_id'],values=['ball'],aggfunc=len)\n    df_pivot = pd.concat([df1,df2],axis=1)\n    df_pivot = df_pivot.reset_index()\n    return df_pivot\ntrain_df = build_dataset()\nprint('Pivot table shape :',train_df.shape)","304174e7":"train_df.head(10)","4344bc02":"train_df.sort_values('runs', ascending=False).head(5)","0bcc8cad":"train_df.sort_values('ball', ascending=False).head(5)","cdc328f6":"train_df.iloc[train_df.where(train_df.runs.eq(train_df.runs.max())).ball.idxmin()]","25128bf7":"train_df.iloc[train_df.where(train_df.ball.eq(train_df.ball.max())).runs.idxmin()]\n","fed2ca42":"def add_features(df):\n    for index, row in df.iterrows():\n        try:\n            temp = summary_df.loc[summary_df['id'] == df.at[index, 'match_id']]\n            temp = temp.reset_index()\n            df.at[index,'venue'] = temp.at[0,'venue_name']\n            if df.at[index,'batsman1_name'] in (temp.at[0,'home_playx1'] ):\n                df.at[index,'batsman_team'] = temp.at[0,'home_team']\n            if df.at[index,'batsman1_name'] in (temp.at[0,'away_playx1'] ):\n                df.at[index,'batsman_team'] = temp.at[0,'away_team']\n            if df.at[index,'bowler1_name'] in (temp.at[0,'away_playx1'] ):\n                df.at[index,'bowling_team'] = temp.at[0,'away_team']\n            if df.at[index,'bowler1_name'] in (temp.at[0,'home_playx1'] ):\n                df.at[index,'bowling_team'] = temp.at[0,'home_team']\n            if df.at[index,'batsman_team'] in (temp.at[0,'home_team'] ):\n                df.at[index,'home_game'] = 1\n            else:\n                df.at[index,'home_game'] = 0                                    \n        except KeyError as e:\n            print(e)\n            continue\n\nadd_features(train_df)\ntrain_df.head()","81b6b137":"batting_df['strikeRate'] = batting_df['strikeRate'].replace({\"-\":\"0\"})\nbatting_df = batting_df.astype({\"strikeRate\": float})\nbat_analysis = batting_df.groupby(['fullName']).mean()\nbat_analysis = bat_analysis.reset_index()\nprint(\"Batting stats dataframe shape \", bat_analysis.shape)","c4d12f10":"bat_analysis[['fullName','runs','ballsFaced','fours','sixes','strikeRate','captain']].sort_values('runs', ascending=False).head(10)","7aa2dae9":"batsman_attr = ['runs','ballsFaced','fours','sixes','strikeRate', 'captain']\np = bat_analysis[batsman_attr].hist(bins=100, figsize=(20,15))\nplt.suptitle(\"Histogram of mean values attributes of Batsman\")","e8046a30":"p = sns.pairplot(bat_analysis[batsman_attr])","99432d9f":"runs_df = batting_df.groupby(batting_df[\"fullName\"]).runs.agg([\"min\", \n                                               \"max\", \n                                               \"sum\", \n                                               \"count\", \n                                               \"mean\"]) \nruns_df = runs_df.reset_index()\nruns_df = runs_df.drop(['min', 'max', 'mean'], axis=1)\nruns_df = runs_df.rename(columns={\"sum\": \"total_runs_scored\", \"count\": \"total_innings_batted\"})\n\nballs_boundaries_df = batting_df.groupby(['fullName']).sum()\nballs_boundaries_df = balls_boundaries_df.reset_index()\nballs_boundaries_df = balls_boundaries_df.drop(['season', 'match_id', 'innings_id','runs','strikeRate',\n                                   'runningOver','link'], axis=1)\nballs_boundaries_df = balls_boundaries_df.rename(columns={\"ballsFaced\": \"total_balls_faced\", \"fours\": \"total_4s_hit\"\n                                                         ,\"sixes\": \"total_6s_hit\", \"captain\": \"total_games_captained\"})\ncombined_batting_sum_df = pd.merge(runs_df, balls_boundaries_df, on='fullName')\ncombined_batting_sum_df = combined_batting_sum_df.reset_index()\ncombined_batting_sum_df = combined_batting_sum_df.drop(['index'], axis=1)\ncombined_batting_sum_df","db99465d":"bat_analysis = bat_analysis.rename(columns={'runs':'avg_runs_scored', 'ballsFaced':'avg_balls_faced'\n                                           ,'fours':'avg_4s_scored','sixes':'avg_6s_scored','captain':'avg_games_captained','strikeRate':'batting_st_rate'})\nbat_analysis = bat_analysis.drop(['season','match_id', 'innings_id', 'runningOver', 'link'], axis=1)\nbatsman_stats = pd.merge(bat_analysis, combined_batting_sum_df, on=\"fullName\")","983fcc25":"batsman_stats","0c9ffc6c":"p = sns.pairplot(batsman_stats[['avg_runs_scored', 'total_runs_scored','total_innings_batted','total_balls_faced','total_4s_hit','total_6s_hit','total_games_captained']])","239776f1":"batsman_stats.to_csv('batsman_numerical.csv',index=False)","568a3b6d":"bowling_df['economyRate'] = bowling_df['economyRate'].replace({\"-\":\"0\"})\nbowling_df = bowling_df.astype({\"economyRate\": float})\nbowl_analysis = bowling_df.groupby(['fullName']).mean()\nbowl_analysis = bowl_analysis.reset_index()\nbowl_analysis = bowl_analysis.drop(['season','match_id', 'innings_id' ], axis=1)\nbowl_analysis.head(5)","a1c3d532":"bowl_analysis = bowl_analysis.rename(columns={'overs':'bowler_avg_overs',\n'maidens':'bowler_avg_maidens',\n'conceded':'bowler_avg_conceded',\n'wickets':'bowler_avg_wkts',\n'economyRate':'bowler_econ_rt',\n'dots':'bowler_avg_dots',\n'foursConceded':'bowler_avg_4s',\n'sixesConceded':'bowler_avg_6s',\n'wides':'bowler_avg_wides',\n'noballs':'bowler_avg_noballs',\n'captain':'bowler_avg_captaincy'})\nconceded_df = bowling_df.groupby(bowling_df[\"fullName\"]).conceded.agg([\"min\", \n                                               \"max\", \n                                               \"sum\", \n                                               \"count\", \n                                               \"mean\"]) \nconceded_df = conceded_df.reset_index()\nconceded_df = conceded_df.drop(['min', 'max', 'mean'], axis=1)\nconceded_df = conceded_df.rename(columns={\"sum\": \"bowler_total_conceded\", \"count\": \"total_innings_bowled\"})\n\nother_stats_df = bowling_df.groupby(['fullName']).sum()\nother_stats_df = other_stats_df.reset_index()\nother_stats_df = other_stats_df.drop(['season', 'match_id', 'innings_id','conceded','economyRate'\n                                   ], axis=1)\nother_stats_df = other_stats_df.rename(columns={'overs':'bowler_total_overs',\n'maidens':'bowler_total_maidens',\n'wickets':'bowler_total_wkts',\n'dots':'bowler_total_dots',\n'foursConceded':'bowler_total_4s',\n'sixesConceded':'bowler_total_6s',\n'wides':'bowler_total_wides',\n'noballs':'bowler_total_noballs',\n'captain':'bowler_total_captaincy'})\ncombined_bowling_sum_df = pd.merge(conceded_df, other_stats_df, on='fullName')\ncombined_bowling_sum_df = combined_bowling_sum_df.reset_index()\ncombined_bowling_sum_df = combined_bowling_sum_df.drop(['index'], axis=1)\ncombined_bowling_sum_df.head(5)","7f6edd12":"bowler_stats = pd.merge(bowl_analysis, combined_bowling_sum_df, on=\"fullName\")\nbowler_stats","c5a50ea9":"p = bowler_stats[['bowler_total_conceded',\n       'total_innings_bowled', 'bowler_total_overs', 'bowler_total_maidens',\n       'bowler_total_wkts', 'bowler_total_dots', 'bowler_total_4s',\n       'bowler_total_6s', 'bowler_total_wides', 'bowler_total_noballs',\n       'bowler_total_captaincy']].hist( bins=80, figsize=(20,15))\n","71da1819":"p = bowler_stats[['bowler_avg_conceded', 'bowler_avg_overs', 'bowler_avg_maidens',\n       'bowler_avg_wkts', 'bowler_econ_rt',\n       'bowler_avg_dots', 'bowler_avg_4s', 'bowler_avg_6s', 'bowler_avg_wides',\n       'bowler_avg_noballs', 'bowler_avg_captaincy']].hist( bins=80, figsize=(20,15))\n","d4f54833":"p = sns.pairplot(bowler_stats[['bowler_avg_conceded','bowler_avg_overs', 'bowler_avg_maidens',\n       'bowler_avg_wkts', 'bowler_econ_rt',\n       'bowler_avg_dots', 'bowler_avg_4s', 'bowler_avg_6s', 'bowler_avg_wides',\n       'bowler_avg_noballs', 'bowler_avg_captaincy']])","08f170f7":"p = sns.pairplot(bowler_stats[['bowler_total_conceded',\n       'total_innings_bowled', 'bowler_total_overs', 'bowler_total_maidens',\n       'bowler_total_wkts', 'bowler_total_dots', 'bowler_total_4s',\n       'bowler_total_6s', 'bowler_total_wides', 'bowler_total_noballs',\n       'bowler_total_captaincy']])","4797e8eb":"bowler_stats.to_csv('bowler_numerical.csv',index=False)","e6630bc6":"def fill_batsman_attributes(df):\n    for index, row in df.iterrows():\n        try:\n            temp = batsman_stats.loc[batsman_stats['fullName'] == df.at[index, 'batsman1_name']]\n            temp = temp.reset_index()\n            if df.empty:\n                print('DataFrame is empty for {}'.format(df.at[index, 'batsman1_name']))\n            else:\n                df.at[index,'avg_runs_scored'] = temp.at[0,'avg_runs_scored']\n                df.at[index,'avg_balls_faced'] = temp.at[0,'avg_balls_faced']\n                df.at[index,'avg_4s_scored'] = temp.at[0,'avg_4s_scored'] \n                df.at[index,'avg_6s_scored'] = temp.at[0,'avg_6s_scored'] \n                df.at[index,'batting_st_rate'] = temp.at[0,'batting_st_rate'] \n                df.at[index,'avg_games_captained'] = temp.at[0,'avg_games_captained'] \n                df.at[index,'total_runs_scored'] = temp.at[0,'total_runs_scored'] \n                df.at[index,'total_innings_batted'] = temp.at[0,'total_innings_batted'] \n                df.at[index,'total_balls_faced'] = temp.at[0,'total_balls_faced'] \n                df.at[index,'total_4s_hit'] = temp.at[0,'total_4s_hit'] \n                df.at[index,'total_6s_hit'] = temp.at[0,'total_6s_hit'] \n                df.at[index,'total_games_captained'] = temp.at[0,'total_games_captained'] \n        except KeyError as e:\n            print(e)\n            continue\n\ndef fill_bowler_attributes(df):\n    for index, row in df.iterrows():\n        try:\n            temp = bowler_stats.loc[bowler_stats['fullName'] == df.at[index, 'bowler1_name']]\n            temp = temp.reset_index()\n            if df.empty:\n                print('DataFrame is empty for {}'.format(df.at[index, 'bowler1_name']))\n            else:\n                df.at[index,'bowler_avg_overs'] = temp.at[0,'bowler_avg_overs']\n                df.at[index,'bowler_avg_maidens'] = temp.at[0,'bowler_avg_maidens']\n                df.at[index,'bowler_avg_conceded'] = temp.at[0,'bowler_avg_conceded']\n                df.at[index,'bowler_avg_wkts'] = temp.at[0,'bowler_avg_wkts']\n                df.at[index,'bowler_econ_rt'] = temp.at[0,'bowler_econ_rt']\n                df.at[index,'bowler_avg_dots'] = temp.at[0,'bowler_avg_dots']\n                df.at[index,'bowler_avg_4s'] = temp.at[0,'bowler_avg_4s']\n                df.at[index,'bowler_avg_6s'] = temp.at[0,'bowler_avg_6s']\n                df.at[index,'bowler_avg_wides'] = temp.at[0,'bowler_avg_wides']\n                df.at[index,'bowler_avg_noballs'] = temp.at[0,'bowler_avg_noballs']\n                df.at[index,'bowler_avg_captaincy'] = temp.at[0,'bowler_avg_captaincy']\n                df.at[index,'bowler_total_conceded'] = temp.at[0,'bowler_total_conceded']\n                df.at[index,'total_innings_bowled'] = temp.at[0,'total_innings_bowled']\n                df.at[index,'bowler_total_overs'] = temp.at[0,'bowler_total_overs']\n                df.at[index,'bowler_total_maidens'] = temp.at[0,'bowler_total_maidens']\n                df.at[index,'bowler_total_wkts'] = temp.at[0,'bowler_total_wkts']\n                df.at[index,'bowler_total_dots'] = temp.at[0,'bowler_total_dots']\n                df.at[index,'bowler_total_4s'] = temp.at[0,'bowler_total_4s']\n                df.at[index,'bowler_total_6s'] = temp.at[0,'bowler_total_6s']\n                df.at[index,'bowler_total_wides'] = temp.at[0,'bowler_total_wides']\n                df.at[index,'bowler_total_noballs'] = temp.at[0,'bowler_total_noballs']\n                df.at[index,'bowler_total_captaincy'] = temp.at[0,'bowler_total_captaincy']\n        except KeyError as e:\n            print(e)\n            continue            \nfill_batsman_attributes(train_df)\nfill_bowler_attributes(train_df)","08a329ab":"pd.set_option('display.max_columns', None)\ntrain_df","9dff5741":"train_df.to_csv('train.csv',index=False)","a7c3a33b":"corr_matrix = train_df[['batsman1_name', 'bowler1_name', 'home_team',\n       'away_team', 'innings_id', 'runs', 'ball', 'venue', 'batsman_team',\n       'bowling_team', 'home_game', 'avg_runs_scored', 'avg_balls_faced',\n       'avg_4s_scored', 'avg_6s_scored', 'batting_st_rate',\n       'avg_games_captained', 'total_runs_scored', 'total_innings_batted',\n       'total_balls_faced', 'total_4s_hit', 'total_6s_hit',\n       'total_games_captained', 'bowler_avg_overs', 'bowler_avg_maidens',\n       'bowler_avg_conceded', 'bowler_avg_wkts', 'bowler_econ_rt',\n       'bowler_avg_dots', 'bowler_avg_4s', 'bowler_avg_6s', 'bowler_avg_wides',\n       'bowler_avg_noballs', 'bowler_avg_captaincy', 'bowler_total_conceded',\n       'total_innings_bowled', 'bowler_total_overs', 'bowler_total_maidens',\n       'bowler_total_wkts', 'bowler_total_dots', 'bowler_total_4s',\n       'bowler_total_6s', 'bowler_total_wides', 'bowler_total_noballs',\n       'bowler_total_captaincy']].corr()\ncorr_matrix['runs'].sort_values(ascending=False)","87573c74":"plt.figure(figsize=(16,16))\nsns.heatmap(corr_matrix,\n            vmin=-1,\n            cmap='twilight_shifted_r');","474c29ab":"# Exploratory Data Analysis\n<div align=\"left\">\n    <p>In this section lets first start with the match details data file from the dataset and build the train dataset with further exploration of batting and bowling performances of players using other data files<\/p>\n<\/div>","13c9d2f4":"The training data has been prepared. Next task is to explore regression techniques and train a best fit model !","c4699197":"## Match Details Data\n\nLet's look at the first over (first 6 balls) of the first match of 2020 season. The match detail data is presented in ball-by-ball format. From this we are going to build total runs scored by a batsman against a bowler in each mactch.","6530d4ab":"Combine this with the average values of each attributes that we explored earlier","4f5c3bcf":"# Encrich the training data \n\n<div align=\"center\">\n<img src=\"https:\/\/user-images.githubusercontent.com\/48846576\/102235511-042e9b80-3eb8-11eb-89c4-740ef682de45.jpg\"  width=\"500\" height=\"400\">\n           <span>Photo by <a href=\"https:\/\/unsplash.com\/@v2osk?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">v2osk<\/a> on <a href=\"https:\/\/unsplash.com\/s\/photos\/categories?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash<\/a><\/span>\n<\/div><br>\nIts time to add the features of batsman and bowlers that we explored and extractd to the training data set","0227c77c":"## Experiment with different attributes combination\n\nThe average value of attributes may not reflect the longevity of the batsman's performance. For example when a batsman has played only few high scoring games and remains not out in some of those games then his average is calculated as (sum of runs scored in all games) \/ (Number of games played excluding number of not outs). Hence its good idea to look into the total runs, fours and sixes scored by the batsman and total number of innings batted as well.","ef6b7610":"Combine both the data frames. We get 23 numerical attributes for a bowler. We had only 13 for the batsman.","1fb67100":"## Distribution of Batsman attributes\n\nAs we can see below thse attributes are in different scale ","e638ed5c":"Now we have encriched 13 numerical attributes that describe a batsman","2d234c7b":"Now let's view the pivot table which gives us the starting version of training data. So the data is nicely transfromed into batsman vs bowler in each game. ","0c5377a4":"## Correlation of total values of attributes of batsman\nNow let's visualize the correlation of total runs scored, innings batted, balls faced, 4s & 6s, etc against avg_runs_scored. Surprisingly We don't see stronger correlation than the average of the attributes that we visualized above.","2cc096ec":"## Add additional features\n\nLet's extract additional attributes like venue, team information and home vs away game. We will look at the importance of these features next","f060f73e":"## Create initial base version of training data\nCreate a pivot table with batsman name, bowler name as indices and runs & balls as values","ea18d8f7":"Next build the total sum","cc44d1a1":"# Bowler Features\n\n<div align=\"center\">\n<img src=\"https:\/\/user-images.githubusercontent.com\/48846576\/102232253-7ef5b780-3eb4-11eb-9cc9-d29f3ddb8de8.jpg\"  width=\"500\" height=\"400\">\n    <span>Photo by <a href=\"https:\/\/unsplash.com\/@yogendras31?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Yogendra Singh<\/a> on <a href=\"https:\/\/unsplash.com\/s\/photos\/cricket-bat?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash<\/a><\/span> and annotated by me<\/span>\n<\/div><br>\n\nMoving on to bowler features. We are againing going to extract the. We are going to look at the average and total values of these attributes \n\n* Overs bowled\n* Balls bowled\n* Runs conceded\n* Wickets Taken\n* Economy rate (runs \/ balls)\n* Number of dot balls bowled (deliveries where no runs scored)\n* 4s conceded\n* 6s conceded\n* Wides bowled (extras)\n* No balls bowled (extras)\n* Is the bowler captain and how many games captained\n\nLet's build the average of these attributes across games","36381c54":"Save the bowler information to csv","5f55b2a6":"Let's look at the most expensive (more runs) and most economical (least runs) conceded by a bowler in a game","15afc49d":"# Correlation Matrix\n\nLet's look at the correlation of attributes to runs. \n* The average runs scored by a batsman does define a stronger correlation to how many runs he can score in a given game\n* On the opposite spectrum, average wicket taken by the bowler does have strong negative correlation (among other features) to the runs scored by the batsman\n* Home field advantage does favor the batsman a little","4059428b":"Let's visualize the correlation of bowler attributes","f0a2969f":"Finally, got our training data!","0ca798a8":"# Batsman Features\n<div align=\"center\">\n<img src=\"https:\/\/user-images.githubusercontent.com\/48846576\/102040230-cf282900-3d91-11eb-897f-172747e94fd9.jpg\"  width=\"500\" height=\"400\">\n    <span>Photo by <a href=\"https:\/\/unsplash.com\/@villagecricketco?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Village Cricket Co<\/a> on <a href=\"https:\/\/unsplash.com\/s\/photos\/cricket-bat?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash<\/a> and annotated by me<\/span>\n<\/div><br>\n\nNow let's extract important features of a batsman from other data files so that we can associate some numbers to a name. The following stats are important to define the quality of the batsman\n\n* Total runs scored\n* Total balls faced\n* Strike rate (runs \/ balls)\n* Total 4s hit (4 runs)\n* Total 6s hit (6 runs (home runs in baseball!))\n\nWe are going to start with average of all the above values first","e236abeb":"<div align=\"center\">\n    <h1>Feature Engineering for Regression<\/h1>\n<img src=\"https:\/\/user-images.githubusercontent.com\/48846576\/102035064-24aa0900-3d85-11eb-9909-1e478abaf98b.jpg\"  width=\"800\" height=\"300\">\n    <span>Photo by <a href=\"https:\/\/unsplash.com\/@bushmush?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">michael weir<\/a> on <a href=\"https:\/\/unsplash.com\/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash<\/a><\/span>\n<\/div><br>\n<div align=\"left\">\n    <h2>Problem Statement<\/h2>\n    <p>Cricket is a bat and ball game. In Twenty20 cricket game, a bowler gets to bowl 4 overs maximum. Each over consists of 6 legal deliveries. i.e. a maximum of 24 legal deliveries (balls). Bowlers are classified into two major types viz. Pace\/Fast bowlers, Spin bowlers. Depending on the type of bowler there are different deliveries like In Swinger, Out Swinger, Cutter, Off Spin, Leg Spin, etc. Similarly batsman does have differnt kind of shots live drives, cuts, pull, hook, etc to counter the bowling and score runs. <\/p>\n        <p>The goal of this excercise is to predict how many runs will a batmans score against a given bowler.<\/p>\n    \nThis notebook is structured in the following manner\n<ul>\n  <li>Explore the match details data file and build base training set<\/li>\n  <li>Analyze and gain insights of batman's attributes and extract from batting summary datafile<\/li>    \n  <li>Analyze and extact bowler's attributes from bowling summary datafile<\/li>        \n  <li>Understand the correlation of various attributes to the runs scored by a batsman<\/li>    \n  <li>Enrich and build training dataset for regression techniques<\/li>        \n<\/ul> \n\nInput :\n    <ul>\n        <li> all_season_details.csv <\/li>\n        <li> all_season_batting_card.csv <\/li>\n        <li> all_season_summary.csv <\/li>\n        <li> all_season_bowling_card.csv <\/li>\n    <\/ul>\n\nOutput :\n    <ul>\n        <li> train.csv <\/li>\n    <\/ul>\n<\/div>\n","8543b245":"## Correlation average values of batsman to the Runs scored","1b3f7dc9":"Let's look at what's the maximum number of balls faced by a batsman and also maximum runs scored by a batsman against a bowler in a single game. Its interesting to see that 52 is the highest runs scored against any single bowler by a batsman and 20 balls is the maximum any bowler ever bowled to a single batsman","7edf5bf0":"## Bowler Stats Histograms and Correlation\n\nNow let's visualize the bowler stats. The following histograms show that we are dealing with values of different scale and distributed differently.","82993390":"Let's save these numerical data for batsman into a csv file for future use"}}