{"cell_type":{"495c5752":"code","92369271":"code","64f5ada1":"code","014983ff":"code","cc6d791d":"code","237cab85":"code","09d971c1":"code","2640ba1d":"code","ef2d30fe":"code","39f9b7bc":"code","70025a43":"code","448d9b2b":"code","b7724a7f":"markdown"},"source":{"495c5752":"# Import Packages\nimport numpy as np \nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.callbacks import EarlyStopping\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import log_loss\nimport os\n","92369271":"# Setting paths\nroot_path = '\/kaggle\/input\/tabular-playground-series-jun-2021'\ntrain_path = os.path.join(root_path, 'train.csv')\ntest_path = os.path.join(root_path, 'test.csv')\nsample_sub_path = os.path.join(root_path, 'sample_submission.csv')\n","64f5ada1":"# Set seed\nseed = 10\nnp.random.seed(seed)","014983ff":"# Read training data\ndf_train = pd.read_csv(train_path)\n\n# Convert classes to numeric\n# df_train['target'] = df_train['target'].str[-1]","cc6d791d":"# Target histogram to check class distribution\ndf_train['target'].hist()","237cab85":"# X and y for training set\nX = df_train.iloc[:, 1:-1]\ny = df_train[['target']]\n\n# Check the shape of the dataset\nprint(f'Training set shape: {X.shape}')","09d971c1":"# Are all columns numeric?\nfor col in X.columns:\n    if df_train[col].dtypes != 'int64':\n        print(col)","2640ba1d":"# Encoding the target variable \ny = pd.get_dummies(y)\nprint(f'New shape: {y.shape}')","ef2d30fe":"# Creating validation split\nX_train, X_val, y_train, y_val = train_test_split(X, y,\n                                                    test_size=0.2,\n                                                    stratify=y,\n                                                    random_state=seed)\n\n# Checking split shapes\nprint(f'X_train shape: {X_train.shape}\\nX_test shape: {X_val.shape}')\nprint(f'y_train shape: {y_train.shape}\\ny_val shape: {y_val.shape}')\n","39f9b7bc":"# Get number of features to set the input shape of the model\nn_features = X_train.shape[1]\n\n# Create Early Stopping\nearly_stop = EarlyStopping(patience=3)\n\n# Create the Keras model\nmodel = Sequential()\n\n# Create model architecture\nmodel.add(Dense(350,\n               activation='tanh',\n               input_shape=(n_features, )))\nmodel.add(Dense(150,\n               activation='relu'))\nmodel.add(Dense(100,\n               activation='relu'))\nmodel.add(Dense(9, activation='softmax'))\n\nprint(model.summary())\n\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X_train, y_train, epochs=20, validation_split=0.2, callbacks=[early_stop])\n\n# predict_proba to get probabilities per class\ny_pred = model.predict(X_val)\n\n# Evaluation\nlogloss = log_loss(y_val, y_pred)\nprint(f'Log loss: {logloss}')","70025a43":"# Reading test data\ndf_test = pd.read_csv(test_path)\n\n# Creating testing set\nX_test = df_test.iloc[:, 1:]","448d9b2b":"# Creating predictions to be submitted\npredictions = model.predict(X_test)\nsub = pd.DataFrame(predictions, columns=['Class_1','Class_2','Class_3','Class_4','Class_5','Class_6','Class_7','Class_8','Class_9'])\nsub = pd.concat([df_test['id'], sub], axis=1)\nsub.head()\n\n# Creating submission\nsub.to_csv('submission.csv', index=False)","b7724a7f":"So we've got 200 000 rows and 75 features!"}}