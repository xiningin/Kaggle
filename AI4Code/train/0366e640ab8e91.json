{"cell_type":{"45192a11":"code","b328731b":"code","7e3d19e4":"code","53c0f5e1":"code","af135ba7":"code","5c1e27b3":"code","7c688c88":"code","b5e9bf54":"code","d0956cb6":"code","09e38230":"code","85a77fa5":"markdown","a491b6a4":"markdown","6e6822ac":"markdown","76609464":"markdown","72c722a5":"markdown","b52df00d":"markdown","1d31e26b":"markdown","449f7016":"markdown","1d127ee2":"markdown","d6a5501e":"markdown"},"source":{"45192a11":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","b328731b":"#loading the dataset\nfrom sklearn import datasets\n\ndata = datasets.load_iris()\ndf = pd.DataFrame(data.data,columns=data.feature_names)\ndf['target'] = pd.Series(data.target)\ndf.head()","7e3d19e4":"!pip install pandas-profiling","53c0f5e1":"import pandas_profiling\n\n#Generating PandasProfiling Report\nreport = pandas_profiling.ProfileReport(df)\nreport","af135ba7":"!pip install sweetviz","5c1e27b3":"import sweetviz as sv\n#Generating Sweetviz report\nreport = sv.analyze(df)\nreport.show_html(\"iris_EDA_report.html\") # specify a name for the report","7c688c88":"!pip install autoviz","b5e9bf54":"!pip install xlrd","d0956cb6":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()","09e38230":"#Generating AutoViz Report\nfilename = \"\" # empty string (\"\") as filename since no file is being used for the data\nsep = \",\"\ndft = AV.AutoViz(\n    '',\n    sep=\",\",\n    depVar=\"\",\n    dfte=df,\n    header=0,\n    verbose=0,\n    lowess=False,\n    chart_format=\"svg\",\n    max_rows_analyzed=150000,\n    max_cols_analyzed=30,\n     )","85a77fa5":"There are other interesting AutoEDA libraries like Dora, D-Tale, and DataPrep which are similar to these three libraries.\n\nHowever, these Auto EDA libraries tend to be very slow in preparing the complete reports while processing large datasets. But these are definitely helpful in speeding up the EDA for beginners to advanced users. I hope you will find these libraries interesting and useful too!","a491b6a4":"We will first import the main package \u2013 pandas to read and handle the dataset.\n\nNext, we will import pandas profiling.","6e6822ac":"**Sweetviz**\n\n","76609464":"Since we are using a dataset from the library we use the \u2018dfte\u2019 option and not the filename for EDA.","72c722a5":"**Pandas Profiling**\n\nPandas Profiling generates a comprehensive and interactive HTML report for the given dataset. It is able to describe different aspects of the dataset like the type of variables, handling missing values, presence of null values along statistical values \u2013 mean, median, mode of the dataset. It also prints the correlation matrix using different correlations for numerical and categorical variables.\n\nTo install the library, enter and run the following command in a cell on a jupyter notebook or Colab notebook.","b52df00d":"**AutoViz**\n\nThis gives a little more insight into the data. AutoViz report includes information on the shape of the dataset along with all possible plots ranging from bar charts, violin plots, correlation matrix (heat map), pair plots etc. ","1d31e26b":"**Auto EDA**\n\nTo make the Data more meaningful or to extract more value from the available data, it is essential to interpret and analyze it quickly.  This is where the Data visualization libraries for Python save the day by generating graphical representations and making the data speak. This way, we can discover all possible trends and patterns underlying a large volume of data.\n\nBut for a beginner(like me), who is just getting started with Machine Learning, having too many options for understanding data is challenging and sometimes, overwhelming(it really was!). We all want our data to look pretty and be presentable for quicker decision-making. Overall, EDA could be a time-consuming process as we carefully look through the multiple plots to find which features are important and bear a strong impact on the outcome. Additionally, we look for ways to handle missing values and\/or outliers, fix the imbalance in the datasets, and many such challenging tasks. Thus, it is a tough choice when it comes to choosing the best library for one\u2019s EDA needs. Hence, starting with automated EDA libraries can be a good learning experience for anyone starting with their Machine Learning journey. These libraries present a good overall view of the data and also are easy to use. With just a few lines of simple python code, these libraries save time and allow a newbie to focus more on understanding how these different plots can be used to make a sense of the data. However, beginners surely need to have a basic understanding of the plots generated by these libraries.\n\nIn this notebook, we are going to discuss three interesting auto-EDA Python libraries for beginners. For this we will use the inbuilt \u2018iris\u2019 dataset from sklearn.","449f7016":"The .html reports generated are not directly compatible with Kaggle\/Colab notebooks and hence, will not open automatically upon clicking. You can find the report in the output files section of kaggle and files section of Colab for downloading and then they can be opened in the browser.\n\n![image.png](attachment:a082241e-1071-4fcf-a833-25e32aa61c4c.png)\n","1d127ee2":"Note that these methods are preferable for only small datasets, on large datasets they take a lot of time and we do not need all plots. We have to do careful analysis and go through other public notebooks to get better insight.","d6a5501e":"From the report, we can easily understand that there are 5 variables in the iris dataset \u2013 4 numerical and the outcome variable is categorical. Also, there are 150 samples in the dataset and no missing values.\n\nSome sample plots generated by pandas profiling help in understanding the correlations, unique and missing values for which we have listed the commands earlier.\n\nOverall, the Pandas Profiling library is quite impressive in generating quick insights from the dataset."}}