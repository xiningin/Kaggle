{"cell_type":{"d2977618":"code","dfc70b3f":"code","7fc0d515":"code","e34835a0":"code","f71bdbaf":"code","277e89ef":"code","b069c701":"code","2e51dc25":"code","a71b1f77":"code","f5e88fd8":"code","1f85e24a":"code","6e51bea9":"code","cb738fce":"code","2ff1b730":"code","c3db3938":"code","d401fb5d":"code","121762c1":"code","d5a6af72":"code","5103cf25":"code","66a44518":"code","313b222d":"code","9e0d79f0":"code","e0ef5350":"code","ffa9c00d":"code","1301e071":"code","21149505":"markdown","29c6d2b6":"markdown","1a6de0b0":"markdown","a6aa98a4":"markdown","fca42c70":"markdown","a8e40d0a":"markdown","13b694be":"markdown","9fb5451e":"markdown","c8177cf0":"markdown","e51dd250":"markdown","56d2bcd5":"markdown","0da7c291":"markdown","edb25a97":"markdown","85667f24":"markdown","8680918e":"markdown"},"source":{"d2977618":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly library\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib library\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","dfc70b3f":"timesData = pd.read_csv('..\/input\/timesData.csv')","7fc0d515":"timesData.columns","e34835a0":"# data frames\ndf2014 = timesData [timesData.year == 2014].iloc[:100,:]\ndf2015 = timesData [timesData.year == 2015].iloc[:100,:]\ndf2016 = timesData [timesData.year == 2016].iloc[:100,:]","f71bdbaf":"df2014.head()","277e89ef":"# trace 1\ntrace1 = go.Scatter (x = df2014.world_rank,\n                     y = df2014.citations,\n                     mode = 'markers',\n                     name = '2014',\n                     marker = dict(color = 'rgba(255,128,255,0.8)'),\n                     text = df2014.university_name) ","b069c701":"# trace 2\ntrace2 = go.Scatter (x = df2015.world_rank,\n                     y = df2015.citations,\n                     mode = 'markers',\n                     name = '2015',\n                     marker = dict(color = 'rgba(255,128,2,0.8)'),\n                     text = df2015.university_name) ","2e51dc25":"# trace 3\ntrace3 = go.Scatter (x = df2016.world_rank,\n                     y = df2016.citations,\n                     mode = 'markers',\n                     name = '2016',\n                     marker = dict(color = 'rgba(0,255,200,0.8)'),\n                     text = df2016.university_name) ","a71b1f77":"data = [trace1, trace2, trace3]\nlayout = dict(title = 'citation vs world rank of top 100 universities with 2014 2015 2016',\n              xaxis= dict(title = 'world rank', ticklen=5, zeroline=False),\n              yaxis= dict(title = 'citation', ticklen=5, zeroline = False))\nfig = dict(data = data, layout = layout)\niplot(fig)\nplt.savefig('plotly-scatter.png')","f5e88fd8":"# data frame for bar plot\ndf2014 = timesData [timesData.year == 2014].iloc[:3,:]","1f85e24a":"df2014.columns","6e51bea9":"trace1 = go.Bar(x = df2014.university_name,\n                y = df2014.citations,\n                name = 'citations',\n                marker = dict(color = 'rgba(255,174,255,0.5)', \n                              line = dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\ntrace2 = go.Bar(x = df2014.university_name,\n                y = df2014.teaching,\n                name = 'teaching',\n                marker = dict(color = 'rgba(255,255,128,0.5)', \n                              line = dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\ndata = [trace1, trace2]\nlayout = go.Layout (barmode = 'group')\nfig = go.Figure (data=data, layout=layout)\niplot(fig)\nplt.savefig('plotly-bar.png')","cb738fce":"df2014 = timesData [timesData.year == 2014].iloc[:3,:]","2ff1b730":"x = df2014.university_name\n\ntrace1 = {'x': x,\n          'y': df2014.citations,\n          'name': 'citations',\n          'type': 'bar'};\ntrace2 = {'x':x,\n          'y': df2014.teaching,\n          'name': 'teaching',\n          'type': 'bar'};\ndata = [trace1, trace2]\n\nlayout = {'xaxis': {'title': 'top 3 universities'},\n          'barmode': 'relative',\n          'title': 'citation and teaching of top 3 universities in 2014'};\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\nplt.savefig('plotly-bar-type2.png')\n          ","c3db3938":"df2016 = timesData [timesData.year == 2016].iloc[:7,:]","d401fb5d":"df2016.info()","121762c1":"pie1 = df2016.num_students\n# below we will change strings that contain ',' to string thats contain '.' and \n# then convert them into float.\npie1_list = [float(each.replace(',', '.')) for each in df2016.num_students]\nlabels = df2016.university_name","d5a6af72":"# figure\nfig = {\n    'data': [\n      {\n          'values': pie1_list,\n          'labels': labels,\n          'domain': {'x': [0, 0.5]},\n          'name': 'number of students rate',\n          'hoverinfo': 'label+percent+name',\n          'hole': 0.3,\n          'type': 'pie'\n      },],\n    'layout': {\n        'title': 'universities number of students rates',\n        'annotations': [\n            {'font': {'size':20},\n             'showarrow': False,\n             'text': 'number of students',\n              'x': 0.20,\n              'y': 1 },\n        ]\n    }\n}\niplot(fig)","5103cf25":"df2016 = timesData [timesData.year == 2016].iloc[:20,:]\nnum_student_size = [float(each.replace(',','.')) for each in df2016.num_students]\n\n# here df2016.international is an object=> convert into float\ndf2016.international = df2016.international.astype(float, inplace=True)\ninternational_color = df2016.international","66a44518":"df2016.info()","313b222d":"data = [\n    {       \n        'y': df2016.teaching,\n        'x': df2016.world_rank,\n        'mode': 'markers', \n        'marker': {\n            'color': international_color,\n            'size': num_student_size,\n            'showscale': True\n        },\n        'text': df2016.university_name\n    } \n]\niplot(data)\nplt.savefig('plotly-bubble.png')","9e0d79f0":"timesData.columns","e0ef5350":"# data to be used\nx2011 = timesData.student_staff_ratio[timesData.year == 2011]\nx2012 = timesData.student_staff_ratio[timesData.year == 2012]\n\n# trace 1 and 2\ntrace1 = go.Histogram(\n    x=x2011,\n    opacity = 0.75,\n    name = '2011',\n    marker = dict(color = 'rgba(171, 50, 96, 0.6)'))\n\ntrace2 = go.Histogram(\n    x=x2012,\n    opacity = 0.75,\n    name = '2012',\n    marker = dict(color = 'rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(barmode='overlay',\n                   title=' students-staff ratio in 2011 and 2012',\n                   xaxis=dict(title='students-staff ratio'),\n                   yaxis=dict( title='Count'))\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\nplt.savefig('plotly-histogram.png')\n","ffa9c00d":"timesData.columns","1301e071":"x2011 = timesData.country[timesData.year == 2011]\n\nplt.subplots(figsize = (8,8))\n\nwordcloud = WordCloud (\n                    background_color = 'white',\n                    width = 512,\n                    height = 384\n                        ).generate(' '.join(x2011))\nplt.imshow(wordcloud) # image show\nplt.axis('off') # to off the axis of x and y\nplt.savefig('Plotly-World_Cloud.png')\nplt.show()","21149505":"It is almost the same as scatter chart: The diffence is in color and size of the 'marker'\n\nUniversity world rank (first 20) vs teaching score with number of students(size) and international score(color)","29c6d2b6":"**SCATTER PLOT**","1a6de0b0":"**Type 1**","a6aa98a4":"Histogram of student-staff ratio in 2011 and 2012 ","fca42c70":"**WORD CLOUD**","a8e40d0a":"**BUBBLE CHART**","13b694be":"**BAR PLOT**","9fb5451e":"**PIE CHART**","c8177cf0":"**Type 2**","e51dd250":"**Citation and teaching of top 3 universities \nand bar plot**","56d2bcd5":"**below we plot pie chart but this time using different structure**","0da7c291":"**Note:** we see that num_students is an object:\nwe must convert them into float","edb25a97":"**HISTOGRAM**","85667f24":"**Student rate of top 7 universities in 2016**","8680918e":"**Citation and teaching of top 3 universities \nand bar plot**"}}