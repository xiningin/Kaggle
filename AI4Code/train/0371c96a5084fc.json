{"cell_type":{"1106af5a":"code","79f068a1":"code","c0370eec":"code","5b79817d":"code","edf4cf84":"code","992d9b5f":"code","8bc34aeb":"code","48850182":"code","efcda1f7":"code","9eb1cef3":"code","2c12f3df":"code","101a3d12":"code","5bdea2dd":"code","4537a186":"code","8d2e61fe":"code","fe15bcc9":"code","f03f5672":"code","748a6499":"code","ba004ebf":"code","1d6b8b63":"code","b3c20f58":"code","16f9104b":"code","ee230d4e":"markdown","c1115676":"markdown","9b8cce4f":"markdown","af7a5b1e":"markdown","9c3fc622":"markdown","d2d9adcf":"markdown","a34424df":"markdown","c673eac1":"markdown","bf300546":"markdown","6a44ba69":"markdown"},"source":{"1106af5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","79f068a1":"df = pd.read_csv('\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/data.csv')\ndf2 = pd.read_csv('\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/data_w_genres.csv')\n\ndf.head(10)","c0370eec":"df2.head(10)","5b79817d":"df.columns","edf4cf84":"print(\"Info about Spotify Data\"+df.info())","992d9b5f":"df.describe().round(decimals=1)\n","8bc34aeb":"df.hist(figsize = (20,20))\nplt.show()","48850182":"category1 = ['acousticness','danceability', 'duration_ms', 'energy', 'explicit',\n       'instrumentalness', 'key', 'liveness', 'loudness', 'mode',\n       'popularity', 'speechiness', 'tempo', 'valence']","efcda1f7":"for col in category1:\n    y = df.groupby('year')[col].mean()\n    x = y.index\n    plt.figure(figsize=(15, 5))\n    sns.set_style(\"whitegrid\")\n    sns.lineplot(x, y, data=df)","9eb1cef3":"plt.figure(figsize=(16, 8))\nsns.set(style=\"whitegrid\")\nx = df.groupby(\"artists\")[\"popularity\"].mean().sort_values(ascending=False).head(20)\nax = sns.barplot(x.index, x)\nax.set_title('Top Artists with Popularity by Mean ')\nax.set_ylabel('Popularity')\nax.set_xlabel('Artists')\nplt.xticks(rotation = 90)","2c12f3df":"# Understanding ho many data for each columns do we have\ncategory2 = [\"artists\", \"instrumentalness\", \"acousticness\",\"id\",\"tempo\",\"valence\",\"loudness\"]\nfor c in category2:\n    print(\"{} \\n\".format(df[c].value_counts()))","101a3d12":"plt.figure(figsize=(9, 3))\nsns.set(style=\"whitegrid\")\nx = df.groupby(\"artists\")[\"popularity\"].sum().sort_values(ascending=False).head(20)\nax = sns.barplot(x.index, x)\nax.set_title('Top Artists with Popularity by Sum')\nax.set_ylabel('Popularity')\nax.set_xlabel('Artists')\nplt.xticks(rotation = 90)","5bdea2dd":"arpop = pd.DataFrame(df.groupby('artists')['popularity'].sum()).sort_values('popularity').tail(10).reset_index()\nfig = plt.figure(figsize=(15,5))\nplt.bar( arpop['artists'],\n         arpop['popularity'],\n         width=0.45,\n         color = ['#caf0f8','#ade8f4','#90e0ef','#48cae4','#00b4d8','#0096c7','#0077b6','#023e8a','#03045e','#14213d'])\nplt.xticks(rotation=45,ha='right')\nplt.title('Top 10 Most Popular Artists from 1921-2020',y=1.1,fontsize=20)\nplt.xlabel('Artists')\nplt.ylabel('Popularity (Ranges from 0 to 100)')\nax.axes.get_xaxis().set_visible(True)","4537a186":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(df[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distrubition with hist\".format(variable))\n    plt.show()","8d2e61fe":"numericVar = [\"year\"]\nfor i in numericVar:\n    plot_hist(i)","fe15bcc9":"rel = df[df['year'] >= 2000]\nvariables = ['acousticness', 'danceability', 'energy','instrumentalness', 'key', 'liveness',\n             'loudness', 'speechiness', 'tempo', 'valence']\nyear = range(2015,2021)\n\nfig = plt.figure(figsize=(15,25))\nfor variable,num in zip(variables, range(1,len(variables)+1)):\n    ax = fig.add_subplot(5,2,num)\n    sns.scatterplot(variable, 'popularity', data=rel)\n    plt.title('Relation between {} and Popularity'.format(variable))\n    plt.xlabel(variable)\n    plt.ylabel('Popularity')\nfig.tight_layout(pad=0.5)","f03f5672":"#Showing us duration time by year it seems  pre-1950 music at least  and 50 to 80 are the longest\n\n\ndf[[\"year\",\"duration_ms\"]].groupby([\"year\"],as_index = False).mean().sort_values(by=\"duration_ms\",ascending = False)","748a6499":"# Unfortunately it shows that the use of instruments in songs is gradually decreasing.\n\ndf[[\"year\",\"instrumentalness\"]].groupby([\"year\"],as_index = False).mean().sort_values(by=\"instrumentalness\",ascending = False).all\n\n","ba004ebf":"#It correlates positively outside the range of 60's and 80's\n\n\ndf[[\"year\",\"speechiness\"]].groupby([\"year\"],as_index = False).mean().sort_values(by=\"speechiness\",ascending = False).all\n","1d6b8b63":"# 10 people with the most songs\n\nk=pd.DataFrame(df['artists'].value_counts().head(10)).reset_index()\nk.columns=['Artists','Song_Count']\nk\n","b3c20f58":"\ngenre=df2[[\"genres\",\"artists\"]]\ngenre=genre[genre[\"genres\"]!=\"[]\"]\ngenre[\"genres\"]=genre[\"genres\"].str.replace(\"'\", \"\")\ngenre[\"genres\"]=genre[\"genres\"].str.replace(\"[\", \"\")\ngenre[\"genres\"]=genre[\"genres\"].str.replace(\"]\", \"\")\ngenre_dict={}\n\ngenre_df_dict=genre[\"genres\"].str.split(\",\")\nfor index, genre_list in genre_df_dict.iteritems():\n    for genre_name in genre_list:\n        if genre_name in genre_dict:\n            genre_dict[genre_name]+=1\n        else:\n            genre_dict[genre_name]=1\n            \ngenre_dict_sorted=sorted(genre_dict.items(), key= lambda x:x[1], reverse=True) \ngenre_dict_sorted[1:20]\n\n\n\n\n","16f9104b":"\nfig = plt.figure(figsize = (10, 10))\nax = fig.subplots()\ngenre.value_counts()[:10].plot(ax=ax, kind = \"pie\")\nax.set_ylabel(\"\")\nax.set_title(\"Top 10 most popular genres\")\nplt.show()\n","ee230d4e":"### Songs Popularity(2000-2020)","c1115676":"<a id = \"1\"><\/a><br>\n\n\n# Analysing Data ","9b8cce4f":"\n    \n# Introduction\nSong analysis added by years, popularity and change by genre\n\n<font color = \"Pink\">\n    \n<font color = \"blue\">\nContent:\n\n\n1. [Analysing Data](#1)\n    * [Visualize Data](#2)\n    * [Comparison of data and Ranking](#3)\n    * [Basic Data Analysis](#4)\n","af7a5b1e":"<a id = \"2\"><\/a><br>\n\n\n##  Visualize Data","9c3fc622":"<a id = \"3\"><\/a><br>\n\n## Comparison of Data and Ranking","d2d9adcf":"### Top 10 Popular Genres","a34424df":"### This code will show us how many music from which year\n","c673eac1":"* Data Analysis and and making ranking system this code show us popularity by artist","bf300546":"### How many songs by genre","6a44ba69":"<a id = \"4\"><\/a><br>\n\n\n\n\n## Basic Data Analysis"}}