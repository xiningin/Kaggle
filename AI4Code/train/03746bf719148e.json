{"cell_type":{"a037afe9":"code","3bf46abd":"code","36730ffc":"code","175922be":"code","92853da7":"code","b3f394e6":"code","9a065e62":"code","4c846f94":"code","fec31a33":"code","ef63972b":"code","7583b37f":"code","fb37fd23":"code","2e7fee32":"code","7b618b72":"code","030f24e2":"code","ad5e7cc3":"code","10a194b4":"code","ec9cc5e2":"code","8abc8073":"code","a40ae235":"markdown","82b03022":"markdown","bfd940c3":"markdown","341c0c88":"markdown","d77b4c29":"markdown","f262d25f":"markdown","004861cc":"markdown","3ec593f1":"markdown","c814b830":"markdown","43c1f521":"markdown","35d60d26":"markdown","b3fb54aa":"markdown","d1378a12":"markdown","d721b97a":"markdown","da87b895":"markdown"},"source":{"a037afe9":"pip install networkx","3bf46abd":"%matplotlib inline\n\nimport networkx as nx\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore') # to get rid of warning messages\n\n# Remove scientific notations and display numbers with 2 decimal points instead\npd.options.display.float_format = '{:,.2f}'.format        \n\n# Update default background style of plots\nsns.set_style(style='darkgrid')","36730ffc":"P1 = pd.read_csv(\"..\/input\/caviar-phases\/CAVIAR_Phases - Notebook\/phase1.csv\")\nP2 = pd.read_csv(\"..\/input\/caviar-phases\/CAVIAR_Phases - Notebook\/phase2.csv\")\nP3 = pd.read_csv(\"..\/input\/caviar-phases\/CAVIAR_Phases - Notebook\/phase3.csv\")\nP4 = pd.read_csv(\"..\/input\/caviar-phases\/CAVIAR_Phases - Notebook\/phase4.csv\")\nP5 = pd.read_csv(\"..\/input\/caviar-phases\/CAVIAR_Phases - Notebook\/phase5.csv\")\nP6 = pd.read_csv(\"..\/input\/caviar-phases\/CAVIAR_Phases - Notebook\/phase6.csv\")\nP7 = pd.read_csv(\"..\/input\/caviar-phases\/CAVIAR_Phases - Notebook\/phase7.csv\")\nP8 = pd.read_csv(\"..\/input\/caviar-phases\/CAVIAR_Phases - Notebook\/phase8.csv\")\nP9 = pd.read_csv(\"..\/input\/caviar-phases\/CAVIAR_Phases - Notebook\/phase9.csv\")\nP10 = pd.read_csv(\"..\/input\/caviar-phases\/CAVIAR_Phases - Notebook\/phase10.csv\")\nP11 = pd.read_csv(\"..\/input\/caviar-phases\/CAVIAR_Phases - Notebook\/phase11.csv\")","175922be":"P1.head()","92853da7":"# Setting first column as the index to achieve the adjacency matrix for each phase\n\n#defining a list with the phases\n\nphases = [P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11]\n\n#Now let us set the first column as the index for all the dataframes\nfor p in phases:\n  p.set_index(p.columns[0], inplace=True)\n","b3f394e6":"P1","9a065e62":"# Now that we have set the index, check for the consistency in column name and indices data type\nP1.index, P1.columns","4c846f94":"# while the index is integer type, the column headers are Object type.\n# Lets convert the headers to integer types\n\nphases = [P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11]\ncol = []\nfor p in phases:\n  for i in p.columns:\n    col.append(int(i))\n  p.columns = col\n  col = []\n","fec31a33":"# let us check if the transformation worked\nP1.index, P1.columns","ef63972b":"# great now that it has worked, let us use the dataframe as an adjacency matrix and build our graph\n\ngraphs = []\nfor i,p in enumerate(phases):\n  g = 'graph'+str(i+1) \n  print(g)\n  g = nx.from_pandas_adjacency(p)\n  graphs.append(g)\n  print(g.nodes())\n\n# graph1_deg = nx.degree_centrality(graph1)\n# print(graph1_deg)","7583b37f":"for i,g in enumerate(graphs):\n  print(\"****************************************************************************************\")\n  print(\"Graph for phase:\", i+1)\n  nx.draw(g, with_labels=True)\n  plt.title(str(g))\n  plt.show()","fb37fd23":"# let us store the degree centralities for each nodes for a graph in a dictionary\ndeg_cen = {}\nfor g in graphs:\n  deg_cen[g] = nx.degree_centrality(g)","2e7fee32":"# let us look at the deg_cen dictionary\ndeg_cen","7b618b72":"# Similarily, we can generate the other centrality measures\n# let us try all the measure that we learnt in the LVC\n\n# Eigen Vector Centrality\n\neig_cen = {}\nfor g in graphs:\n  eig_cen[g] = nx.eigenvector_centrality(g)\n\n\n# Betweenness Centrality\n\nbetw_cen = {}\nfor g in graphs:\n  betw_cen[g] = nx.betweenness_centrality(g)\n\n# Closeness Centrality\n\nclo_cen = {}\nfor g in graphs:\n  clo_cen[g] = nx.closeness_centrality(g)","030f24e2":"# let us now sort the degree centrality measure and identify the important nodes.\n\nfor ix, g in enumerate(graphs):\n  temp_dict = {}\n  for w in sorted(deg_cen[g], key=deg_cen[g].get, reverse=True):\n    temp_dict[w] = deg_cen[g][w]\n  print(\"Sorted Importance of nodes in terms of deg_cen for Phase {} is {}\".format(ix+1, list(temp_dict.keys())[:5]))\n  print()","ad5e7cc3":"# Let us first start with node 1.\n\nnode1_deg = []\nphases = []\nfor ix, g in enumerate(graphs):\n  node1_deg.append(deg_cen[g][1]*100)\n  phases.append(ix+1)\n\nnode1_bet = []\n\nfor ix, g in enumerate(graphs):\n  node1_bet.append(betw_cen[g][1]*100)\n\n# Now, let us calculate for node 3 and 12 too.\n\n# Node3\nnode3_deg = []\nfor ix, g in enumerate(graphs):\n  node3_deg.append(deg_cen[g][3]*100)\n\nnode3_bet = []\nfor ix, g in enumerate(graphs):\n  node3_bet.append(betw_cen[g][3]*100)\n\n# Node12\nnode12_deg = []\nfor ix, g in enumerate(graphs):\n  if (12 in deg_cen[g].keys()):\n    node12_deg.append(deg_cen[g][12]*100)\n  else:\n    node12_deg.append(None)\n\nnode12_bet = []\nfor ix, g in enumerate(graphs):\n  if (12 in betw_cen[g].keys()):\n    node12_bet.append(betw_cen[g][12]*100)\n  else:\n    node12_bet.append(None)\n","10a194b4":"# Now, let us plot the same ust plt.plot\n\n# Plot Degree centrality for nodes 1, 3 and 12\nplt.figure(figsize = (10,7))\nplt.plot(phases, node1_deg,  label='Node 1')\nplt.plot(phases, node3_deg, label='Node 3')\nplt.plot(phases, node12_deg, label='Node 12')\n\nplt.ylabel('Degree centrality(*100)')\nplt.xlabel('Phases')\nplt.legend()\nplt.show()","ec9cc5e2":"# plotting the Between Centrality\n\n# Plot Degree centrality for nodes 1, 3 and 12\nplt.figure(figsize = (10,7))\nplt.plot(phases, node1_bet,  label='Node 1')\nplt.plot(phases, node3_bet, label='Node 3')\nplt.plot(phases, node12_bet, label='Node 12')\n\nplt.ylabel('Betweenness centrality(*100)')\nplt.xlabel('Phases')\nplt.legend()\nplt.show()","8abc8073":"graph2 = nx.from_pandas_adjacency(P2)\ncolor = []\nfor node in graph2:\n    if (node == 1 or node == 12  or node == 3):\n        color.append('red')\n    else:\n        color.append('green')\nnx.draw_spring(graph2,node_color=color,with_labels=True)","a40ae235":"# LVC: Caviar Investigation Phases Case Study\n\nIn this problem, we will study a time-varying criminal network that is repeatedly disturbed by police forces. \nThe data for this problem can be found in CAVIAR.zip. \n\n### Background\n\nHere is some information on the CAVIAR project and the role of certain individuals arrested following the investigation. This investigation lasted two years and ran from 1994 to 1996. The operation brought together investigation units of the Montr\u00b4eal police and the Royal Canadian Mounted Police of Canada\n\nAs you can see, this case offers a rare opportunity to study a criminal network in upheaval by police forces. This allows us to analyze changes in the network structure and to survey the reaction and adaptation of the participants while they were subjected to an increasing number of distressing constraints. \n\nAccording to the police, the role of the actors of the \u201cSerero organization\u201d under investigation are the following: \n- Serero, Daniel (n1) : Mastermind of the network. \n- Pierre Perlini (n3) : Principal lieutenant of Serero, he executes his instructions. \n- Alain (n83) and G\u00b4erard (n86) Levy : Investors and transporters of money. \n- Wallace Lee (n85) : Takes care of financial affairs (accountant). \n- Gaspard Lino (n6): Broker in Spain. \n- Samir Rabbat (n11): Provider in Morocco. \n- Lee Gilbert (n88): Trusted man of Wallace Lee (became an informer after the arrest). \n- Beverly Ashton (n106): Spouse of Lino, transports money and documents.  \n- Antonio Iannacci (n89): Investor. \n- Mohammed Echouafni (n84): Moroccan investor. \n- Richard Gleeson (n5), Bruno de Quinzio (n8) and Gabrielle Casale (n76) : Charged with recuperating the marijuana. \n- Roderik Janouska (n77): Individual with airport contacts. \n- Patrick Lee (n87): Investor. \n- Salvatore Panetta (n82): Transport arrangements manager. \n- Steve Cunha (n96): Transport manager, owner of a legitimate import company (became an informer after the arrest). \n- Ernesto Morales (n12): Principal organizer of the cocaine import, intermediary between the Colombians and the Serero organization. \n- Oscar Nieri (n17): The handyman of Morales. \n- Richard Brebner (n80): Was transporting the cocaine from the US to Montr\u00b4eal. \n- Ricardo Negrinotti (n33): Was taking possession of the cocaine in the US to hand it to Brebner. \n- Johnny Pacheco (n16): Cocaine provider. \n\n###Objective\n\n- The objective of the case study is to understand, create and visualise the data in phases. \n- Later on, apply the different centrality measures and understand the important nodes.\n- Visualise the centrality measure of the important nodes across phases\n\nNote: Please Restart the Kernel if you face Networkx Error\n","82b03022":"### 5b. Eigen, Betweenness, Closeness Centrality measures","bfd940c3":"## 3. Generate graph\n\nNow, that we have created the adjacency matrix, let us now try to create graphs out of these adjacency matrix.\n\n- We will use the from_pandas_adjacency function and pass on the adjacency matrix for each phase as a dataframe","341c0c88":"## 4. Visualising the graphs\n\nLet us now visualise the graphs that we created above.","d77b4c29":"#### 2. Load the data","f262d25f":"### We have now created the dictionaries with the centrality measures\n\n- The dictionaries are deg_cen, eig_cen, betw_cen, clo_cen\n- We can sort the dictionaries to obtain the nodes that are the most important.","004861cc":"### Bonus: We can highlight the important nodes in our plots\n\n- Let have a look at the phase 1 graph: garph1\n","3ec593f1":"## 5. Centrality \nLet us now explore the various centrality measures for the above graphs as discussed in the LVC.","c814b830":"So we have data in form of an adjacency matrix represented through a data frame. Note that\n\n- the first column (Unnamed: 0) needs to be set as the index\n- the columns names and the indices should have the same data type\n\nLet us check the points above.","43c1f521":"###Comments:\n- The important nodes have been marked in red","35d60d26":"## 1. Importing required libraries","b3fb54aa":"### 5a. Degree Centrality\n- Let us now calculate the degree centrality","d1378a12":"## Comments:\n- We carried out the analysis on the network and figured out techniques to read adjacency matrices into graphs.\n- We later, visualised the graphs, created centrality measures and identified important nodes - N1, N3, N12\n- We studied and plotted the variation in the centrality of the important nodes across phases in a bid to understand the affect of disruption of the network.","d721b97a":"## 6. Underestanding the variation of node importance across phases\n- From the above analysis we figure out that some nodes appear to be more important than the others and we will focs our attention on analysing those.\n\n- Let us take out Node1, Node3 and Node12 and visualise their importance across phases. We will look at the between ness and degree centrality only. Learners are encouraged to try out the same for other measures.","da87b895":"#### We generated the degree centrality based top5 most important nodes in each phase.\n- We can go ahead and repeat the same exercise for the other centraliity measures."}}