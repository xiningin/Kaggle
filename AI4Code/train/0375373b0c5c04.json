{"cell_type":{"ed0536f3":"code","00e05430":"code","9dd8afc4":"code","d1d0f05a":"code","97f2ca74":"code","b50fa195":"code","197140b0":"code","9b1dfb0a":"code","72b26366":"code","0c76e6a4":"code","36b2833e":"code","5e420530":"code","cd0305d4":"code","ac1c918f":"code","0b0c9f50":"code","2f4cac39":"code","0b42163f":"code","4f26b21d":"code","0b24b293":"code","568b721a":"code","b9b80c8e":"code","d4cef611":"code","b8e7a0d7":"code","39e10075":"code","d5178201":"code","ac5948dc":"code","11e74765":"code","7be47c17":"code","3fcdac8a":"markdown","a857a33c":"markdown","01286c1e":"markdown","61564cb1":"markdown","ea85ef86":"markdown","fd65af1b":"markdown","379e4036":"markdown","c1e07fe8":"markdown","f631b222":"markdown","12214dff":"markdown","91f42d1c":"markdown","83b72108":"markdown","fc2fa520":"markdown","120bcbd9":"markdown","2214b78c":"markdown","0b3e6adb":"markdown","e51b0065":"markdown","761e6cba":"markdown","952e5ebc":"markdown","868d2689":"markdown","d796af5b":"markdown","641d3176":"markdown","b0a2c0f4":"markdown","f25e33aa":"markdown","0b0aac4c":"markdown"},"source":{"ed0536f3":"# Importing the basic libariries \n# We will import the others later this is just to get the analysis started :P\n\nimport os\nimport joblib\nimport numpy as np\nimport pandas as pd\nimport warnings\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker\nimport seaborn as sns\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\nwarnings.filterwarnings('ignore')","00e05430":"# Importing the data \n\ntrain_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')","9dd8afc4":"print('Rows and Columns in train dataset:', train_df.shape)\nprint('Rows and Columns in test dataset:', test_df.shape)","d1d0f05a":"print('Missing values in train dataset:', sum(train_df.isnull().sum()))\nprint('Missing values in test dataset:', sum(test_df.isnull().sum()))","97f2ca74":"print('Missing values per columns in train dataset')\nfor col in train_df.columns:\n    temp_col = train_df[col].isnull().sum()\n    print(f'{col}: {temp_col}')\nprint()\nprint('Missing values per columns in test dataset')\nfor col in test_df.columns:\n    temp_col = test_df[col].isnull().sum()\n    print(f'{col}: {temp_col}')","b50fa195":"train_df.head()","197140b0":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(5, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 2)\ngs.update(wspace=0.4, hspace=0.8)\n\nbackground_color = \"#f6f5f5\"\n\n# background_color = \"#f6f5f5\"\ncolumn = 'Survived'\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\nax0 = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\nax0.set_facecolor(background_color)\nax0.tick_params(axis = \"y\", which = \"both\", left = False)\nax0.text(-1, 83, 'Survival Rate on the training data', color='black', fontsize=7, ha='left', va='bottom', weight='bold')\n# ax0.text(-1, 82, 'Survival Rate ', color='#292929', fontsize=5, ha='left', va='top')\n# ax0.text(1.18, 73.3, 'for age and fare', color='#292929', fontsize=4, ha='left', va='bottom')\nax0_sns = sns.barplot(ax=ax0, x=temp_train['index'], y=temp_train[column]\/1000, zorder=2)\nax0_sns.set_xlabel(\"Survived\",fontsize=5, weight='bold')\nax0_sns.set_ylabel('')\nax0.yaxis.set_major_formatter(ticker.PercentFormatter())\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax0_sns.tick_params(labelsize=5)\nax0_sns.legend(['Survived', 'Not Survived'], ncol=2, facecolor=background_color, edgecolor=background_color, fontsize=4, bbox_to_anchor=(-0.26, 1.3), loc='upper left')\nleg = ax0_sns.get_legend()\nleg.legendHandles[0].set_color('#eeb977')\nleg.legendHandles[1].set_color('lightgray')","9b1dfb0a":"nan_data = (train_df.isna().sum().sort_values(ascending=False) \/ len(train_df) * 100)[:6]\nnan_data_1 = pd.DataFrame(data = nan_data,columns=[\"Missing % \"]).reset_index()\na4_dims = (11.7, 8.27)\nplt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(2, 2), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0.4, hspace=0.8)\n\nbackground_color = \"#f6f5f5\"\n\ncolumn = 'Missing % '\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = nan_data_1\nax0 = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\nax0.set_facecolor(background_color)\n\nax0.tick_params(axis = \"y\", which = \"both\", left = False)\nax0.text(-1, 5, '% of Missing values for Training Data', color='black', fontsize=7, ha='left', va='bottom', weight='bold')\n# ax0.text(-1, 5, 'Survival Rate ', color='#292929', fontsize=5, ha='left', va='top')\nax0_sns = sns.barplot(ax=ax0, x=temp_train['index'], y=temp_train[column], zorder=2 )\nax0_sns.set_xlabel(\"Column Names\",fontsize=4, weight='bold')\nax0_sns.set_ylabel(\"Percentage\",fontsize=4, weight='bold')\nax0.yaxis.set_major_formatter(ticker.PercentFormatter())\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax0_sns.tick_params(labelsize=2)\n\n","72b26366":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(5, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(4, 3)\ngs.update(wspace=0.4, hspace=0.8)\n\nbackground_color = \"#f6f5f5\"\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\n\ncolumn = 'Pclass'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax0 = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\nax0.set_facecolor(background_color)\nax0.tick_params(axis = \"y\", which = \"both\", left = False)\nax0.text(-1.2, 88, 'Features comparison', color='black', fontsize=7, ha='left', va='bottom', weight='bold')\nax0.text(-1.2, 87, 'Comparing features distribution between train and test dataset', color='#292929', fontsize=5, ha='left', va='top')\nax0_sns = sns.barplot(ax=ax0, x=temp_combine['index'], y=temp_combine[column]\/1000, zorder=2, hue=temp_combine['source'])\nax0_sns.set_xlabel(\"Ticket Class\",fontsize=5, weight='bold')\nax0_sns.set_ylabel('')\nax0.yaxis.set_major_formatter(ticker.PercentFormatter())\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax0_sns.tick_params(labelsize=5)\nax0_sns.legend(ncol=2, facecolor=background_color, edgecolor=background_color, fontsize=4, bbox_to_anchor=(0.46, 1.22))\n\ncolumn = 'Sex'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax1 = fig.add_subplot(gs[0, 1])\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\nax1.set_facecolor(background_color)\nax1.legend(prop={'size': 3})\nax1.tick_params(axis = \"y\", which = \"both\", left = False)\nax1_sns = sns.barplot(ax=ax1, x=temp_combine['index'], y=temp_combine[column]\/1000, zorder=2, hue=temp_combine['source'])\nax1_sns.set_xlabel('Sex', fontsize=5, weight='bold')\nax1_sns.set_ylabel('')\nax1.yaxis.set_major_formatter(ticker.PercentFormatter())\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax1_sns.tick_params(labelsize=5)\nax1_sns.get_legend().remove()\n\ncolumn = 'Age'\nax3 = fig.add_subplot(gs[0, 2])\nfor s in [\"right\", \"top\"]:\n    ax3.spines[s].set_visible(False)\nax3.set_facecolor(background_color)\nax3.legend(prop={'size': 3})\nax3.tick_params(axis = \"y\", which = \"both\", left = False)\nax3_sns = sns.kdeplot(ax=ax3, x=train_df['Age'], zorder=2, shade=True)\nax3_sns = sns.kdeplot(ax=ax3, x=test_df['Age'], zorder=2, shade=True)\nax3_sns.set_xlabel('Age', fontsize=5, weight='bold')\nax3_sns.set_ylabel('')\nax3_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax3_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax3_sns.tick_params(labelsize=5)\nax3_sns.get_legend().remove()\n\ncolumn = 'SibSp'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax4 = fig.add_subplot(gs[1, 0])\nfor s in [\"right\", \"top\"]:\n    ax4.spines[s].set_visible(False)\nax4.set_facecolor(background_color)\nax4.legend(prop={'size': 3})\nax4.tick_params(axis = \"y\", which = \"both\", left = False)\nax4_sns = sns.barplot(ax=ax4, x=temp_combine['index'], y=temp_combine[column]\/1000, zorder=2, hue=temp_combine['source'])\nax4_sns.set_xlabel('Siblings \/ spouse', fontsize=5, weight='bold')\nax4_sns.set_ylabel('')\nax4.yaxis.set_major_formatter(ticker.PercentFormatter())\nax4_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax4_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax4_sns.tick_params(labelsize=5)\nax4_sns.get_legend().remove()\n\ncolumn = 'Parch'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax5 = fig.add_subplot(gs[1, 1])\nfor s in [\"right\", \"top\"]:\n    ax5.spines[s].set_visible(False)\nax5.set_facecolor(background_color)\nax5.legend(prop={'size': 3})\nax5.tick_params(axis = \"y\", which = \"both\", left = False)\nax5_sns = sns.barplot(ax=ax5, x=temp_combine['index'], y=temp_combine[column]\/1000, zorder=2, hue=temp_combine['source'])\nax5_sns.set_xlabel('Parents \/ children', fontsize=5, weight='bold')\nax5_sns.set_ylabel('')\nax5.yaxis.set_major_formatter(ticker.PercentFormatter())\nax5_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax5_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax5_sns.tick_params(labelsize=5)\nax5_sns.get_legend().remove()\n\ncolumn = 'Fare'\nax6 = fig.add_subplot(gs[1, 2])\nfor s in [\"right\", \"top\"]:\n    ax6.spines[s].set_visible(False)\nax6.set_facecolor(background_color)\nax6.legend(prop={'size': 3})\nax6.tick_params(axis = \"y\", which = \"both\", left = False)\nax6_sns = sns.kdeplot(ax=ax6, x=train_df['Fare'], zorder=2, shade=True)\nax6_sns = sns.kdeplot(ax=ax6, x=test_df['Fare'], zorder=2, shade=True)\nax6_sns.set_xlabel('Fare', fontsize=5, weight='bold')\nax6_sns.set_ylabel('')\nax6_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax6_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax6_sns.tick_params(labelsize=5)\nax6_sns.get_legend().remove()\n\ntrain_df[\"Cabin\"] = train_df[\"Cabin\"].fillna(\"No\")\ntrain_df[\"Cabin_code\"] = train_df[\"Cabin\"].str[0]\ntest_df[\"Cabin\"] = test_df[\"Cabin\"].fillna(\"No\")\ntest_df[\"Cabin_code\"] = test_df[\"Cabin\"].str[0]\n\ncolumn = 'Cabin_code'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax7 = fig.add_subplot(gs[2, 0])\nfor s in [\"right\", \"top\"]:\n    ax7.spines[s].set_visible(False)\nax7.set_facecolor(background_color)\nax7.legend(prop={'size': 3})\nax7.tick_params(axis = \"y\", which = \"both\", left = False)\nax7_sns = sns.barplot(ax=ax7, x=temp_combine['index'], y=temp_combine[column]\/1000, zorder=2, hue=temp_combine['source'])\nax7_sns.set_xlabel('Cabin', fontsize=5, weight='bold')\nax7_sns.set_ylabel('')\nax7.yaxis.set_major_formatter(ticker.PercentFormatter())\nax7_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax7_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax7_sns.tick_params(labelsize=5)\nax7_sns.get_legend().remove()\n\ntrain_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"N\")\ntest_df[\"Embarked\"] = test_df[\"Embarked\"].fillna(\"N\")\n\ncolumn = 'Embarked'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax8 = fig.add_subplot(gs[2, 1])\nfor s in [\"right\", \"top\"]:\n    ax8.spines[s].set_visible(False)\nax8.set_facecolor(background_color)\nax8.legend(prop={'size': 3})\nax8.tick_params(axis = \"y\", which = \"both\", left = False)\nax8_sns = sns.barplot(ax=ax8, x=temp_combine['index'], y=temp_combine[column]\/1000, zorder=2, hue=temp_combine['source'])\nax8_sns.set_xlabel('Port', fontsize=5, weight='bold')\nax8_sns.set_ylabel('')\nax8.yaxis.set_major_formatter(ticker.PercentFormatter())\nax8_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax8_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax8_sns.tick_params(labelsize=5)\nax8_sns.get_legend().remove()\n\nplt.show()","0c76e6a4":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(5, 6), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 4)\ngs.update(wspace=0.4, hspace=0.8)\n\nbackground_color = \"#f6f5f5\"\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ncolumn = 'Sex'\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax2 = fig.add_subplot(gs[0, 2])\nfor s in [\"right\", \"top\"]:\n    ax2.spines[s].set_visible(False)\nax2.set_facecolor(background_color)\nax2.tick_params(axis = \"y\", which = \"both\", left = False)\nax2.text(-1, 35, 'Survival Rate for Males and Females', color='black', fontsize=4, ha='left', va='bottom', weight='bold')\nax2_sns = sns.barplot(ax=ax2, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax2_sns.set_xlabel('')\nax2_sns.set_ylabel('')\nax2.yaxis.set_major_formatter(ticker.PercentFormatter())\nax2_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax2_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax2_sns.tick_params(labelsize=5)\nplt.show()","36b2833e":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(5, 6), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 4)\ngs.update(wspace=0.4, hspace=0.8)\n\ncolumn = 'Pclass'\ncolor_map = ['#eeb977', 'lightgray', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax1 = fig.add_subplot(gs[0, 1])\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\nax1.set_facecolor(background_color)\nax1.tick_params(axis = \"y\", which = \"both\", left = False)\nax1.text(-1, 20, 'Survival Rate for Different Ticket Classes', color='black', fontsize=4, ha='left', va='bottom', weight='bold')\nax1_sns = sns.barplot(ax=ax1, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax1_sns.set_xlabel(\"Ticket Class\",fontsize=5, weight='bold')\nax1_sns.set_ylabel('')\nax1.yaxis.set_major_formatter(ticker.PercentFormatter())\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax1_sns.tick_params(labelsize=5)","5e420530":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(5, 6), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 3)\ngs.update(wspace=0.4, hspace=0.8)\n\n\ncolumn = 'Embarked'\ncolor_map = ['lightgray' for _ in range(4)]\ncolor_map[3] = '#eeb977'\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax8 = fig.add_subplot(gs[2, 2])\nfor s in [\"right\", \"top\"]:\n    ax8.spines[s].set_visible(False)\nax8.set_facecolor(background_color)\nax8.tick_params(axis = \"y\", which = \"both\", left = False)\nax8.text(-1, 25, 'Survival Rate for Different Embarkmet Ports', color='black', fontsize=4, ha='left', va='bottom', weight='bold')\nax8_sns = sns.barplot(ax=ax8, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax8_sns.set_xlabel(\"Port\",fontsize=5, weight='bold')\nax8_sns.set_ylabel('')\nax8.yaxis.set_major_formatter(ticker.PercentFormatter())\nax8_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax8_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax8_sns.tick_params(labelsize=5)","cd0305d4":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(5, 6), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 2)\ngs.update(wspace=0.4, hspace=0.8)\n\ncolumn = 'Cabin_code'\ncolor_map = ['lightgray' for _ in range(9)]\ncolor_map[7] = '#eeb977'\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax7 = fig.add_subplot(gs[1, 1])\nfor s in [\"right\", \"top\"]:\n    ax7.spines[s].set_visible(False)\nax7.set_facecolor(background_color)\nax7.tick_params(axis = \"y\", which = \"both\", left = False)\nax7.text(0, 25, 'Survival Rate for Different Cabins', color='black', fontsize=5, ha='left', va='bottom', weight='bold')\nax7_sns = sns.barplot(ax=ax7, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax7_sns.set_xlabel(\"Cabin\",fontsize=5, weight='bold')\nax7_sns.set_ylabel('')\nax7.yaxis.set_major_formatter(ticker.PercentFormatter())\nax7_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax7_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax7_sns.tick_params(labelsize=5)","ac1c918f":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(5, 6), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 2)\ngs.update(wspace=0.4, hspace=0.8)\n\ncolumn = 'Fare'\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax6 = fig.add_subplot(gs[2, 0])\nfor s in [\"right\", \"top\"]:\n    ax6.spines[s].set_visible(False)\nax6.set_facecolor(background_color)\nax6.tick_params(axis = \"y\", which = \"both\", left = False)\nax6.text(-2, .037, 'Survival Rate for Fares', color='black', fontsize=6, ha='left', va='bottom', weight='bold')\nax6_sns = sns.kdeplot(ax=ax6, x=train_df[train_df['Survived']==1]['Fare'], zorder=2, shade=True)\nax6_sns = sns.kdeplot(ax=ax6, x=train_df[train_df['Survived']==0]['Fare'], zorder=2, shade=True)\nax6_sns.set_xlabel(\"Fare\",fontsize=5, weight='bold')\nax6_sns.set_ylabel('')\nax6_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax6_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax6_sns.tick_params(labelsize=5)","0b0c9f50":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(5, 6), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 2)\ngs.update(wspace=0.4, hspace=0.8)\n\ncolumn = 'Parch'\ncolor_map = ['lightgray' for _ in range(8)]\ncolor_map[0] = '#eeb977'\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax5 = fig.add_subplot(gs[1, 1])\nfor s in [\"right\", \"top\"]:\n    ax5.spines[s].set_visible(False)\nax5.set_facecolor(background_color)\nax5.tick_params(axis = \"y\", which = \"both\", left = False)\nax5.text(0, 33, 'Survival Rate for Parch', color='black', fontsize=6, ha='left', va='bottom', weight='bold')\nax5_sns = sns.barplot(ax=ax5, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax5_sns.set_xlabel(\"Parents \/ children\",fontsize=5, weight='bold')\nax5_sns.set_ylabel('')\nax5.yaxis.set_major_formatter(ticker.PercentFormatter())\nax5_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax5_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax5_sns.tick_params(labelsize=5)","2f4cac39":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(5, 6), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 2)\ngs.update(wspace=0.4, hspace=0.8)\ncolumn = 'SibSp'\ncolor_map = ['lightgray' for _ in range(7)]\ncolor_map[0] = '#eeb977'\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax4 = fig.add_subplot(gs[1, 1])\nfor s in [\"right\", \"top\"]:\n    ax4.spines[s].set_visible(False)\nax4.set_facecolor(background_color)\nax4.tick_params(axis = \"y\", which = \"both\", left = False)\nax4.text(0, 33, 'Survival Rate for SibSp', color='black', fontsize=6, ha='left', va='bottom', weight='bold')\nax4_sns = sns.barplot(ax=ax4, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax4_sns.set_xlabel(\"Siblings \/ spouses\",fontsize=5, weight='bold')\nax4_sns.set_ylabel('')\nax4.yaxis.set_major_formatter(ticker.PercentFormatter())\nax4_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax4_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax4_sns.tick_params(labelsize=5)","0b42163f":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(5, 6), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 2)\ngs.update(wspace=0.4, hspace=0.8)\n\ncolumn = 'Age'\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax3 = fig.add_subplot(gs[1, 0])\nfor s in [\"right\", \"top\"]:\n    ax3.spines[s].set_visible(False)\nax3.set_facecolor(background_color)\nax3.tick_params(axis = \"y\", which = \"both\", left = False)\nax3.text(-2, .037, 'Survival Rate for Age', color='black', fontsize=6, ha='left', va='bottom', weight='bold')\n\nax3_sns = sns.kdeplot(ax=ax3, x=train_df[train_df['Survived']==1]['Age'], zorder=2, shade=True)\nax3_sns = sns.kdeplot(ax=ax3, x=train_df[train_df['Survived']==0]['Age'], zorder=2, shade=True)\nax3_sns.set_xlabel(\"Age\",fontsize=5, weight='bold')\nax3_sns.set_ylabel('')\nax3_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax3_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax3_sns.tick_params(labelsize=5)\n","4f26b21d":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(5, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(4, 3)\ngs.update(wspace=0.4, hspace=0.8)\n\nbackground_color = \"#f6f5f5\"\n\ncolumn = 'Survived'\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\nax0 = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\nax0.set_facecolor(background_color)\nax0.tick_params(axis = \"y\", which = \"both\", left = False)\nax0.text(-1, 83, 'Survival Rate', color='black', fontsize=7, ha='left', va='bottom', weight='bold')\nax0.text(-1, 82, 'Survival rate on each individual feature', color='#292929', fontsize=5, ha='left', va='top')\nax0.text(1.18, 73.3, 'for age and fare', color='#292929', fontsize=4, ha='left', va='top')\nax0_sns = sns.barplot(ax=ax0, x=temp_train['index'], y=temp_train[column]\/1000, zorder=2)\nax0_sns.set_xlabel(\"Survived\",fontsize=5, weight='bold')\nax0_sns.set_ylabel('')\nax0.yaxis.set_major_formatter(ticker.PercentFormatter())\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax0_sns.tick_params(labelsize=5)\nax0_sns.legend(['Survived', 'Not Survived'], ncol=2, facecolor=background_color, edgecolor=background_color, fontsize=4, bbox_to_anchor=(-0.26, 1.3), loc='upper left')\nleg = ax0_sns.get_legend()\nleg.legendHandles[0].set_color('#eeb977')\nleg.legendHandles[1].set_color('lightgray')\n\ncolumn = 'Pclass'\ncolor_map = ['#eeb977', 'lightgray', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax1 = fig.add_subplot(gs[0, 1])\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\nax1.set_facecolor(background_color)\nax1.tick_params(axis = \"y\", which = \"both\", left = False)\nax1_sns = sns.barplot(ax=ax1, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax1_sns.set_xlabel(\"Ticket Class\",fontsize=5, weight='bold')\nax1_sns.set_ylabel('')\nax1.yaxis.set_major_formatter(ticker.PercentFormatter())\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax1_sns.tick_params(labelsize=5)\n\ncolumn = 'Sex'\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax2 = fig.add_subplot(gs[0, 2])\nfor s in [\"right\", \"top\"]:\n    ax2.spines[s].set_visible(False)\nax2.set_facecolor(background_color)\nax2.tick_params(axis = \"y\", which = \"both\", left = False)\nax2_sns = sns.barplot(ax=ax2, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax2_sns.set_xlabel(\"Sex\",fontsize=5, weight='bold')\nax2_sns.set_ylabel('')\nax2.yaxis.set_major_formatter(ticker.PercentFormatter())\nax2_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax2_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax2_sns.tick_params(labelsize=5)\n\ncolumn = 'Age'\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax3 = fig.add_subplot(gs[1, 0])\nfor s in [\"right\", \"top\"]:\n    ax3.spines[s].set_visible(False)\nax3.set_facecolor(background_color)\nax3.tick_params(axis = \"y\", which = \"both\", left = False)\nax3_sns = sns.kdeplot(ax=ax3, x=train_df[train_df['Survived']==1]['Age'], zorder=2, shade=True)\nax3_sns = sns.kdeplot(ax=ax3, x=train_df[train_df['Survived']==0]['Age'], zorder=2, shade=True)\nax3_sns.set_xlabel(\"Age\",fontsize=5, weight='bold')\nax3_sns.set_ylabel('')\nax3_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax3_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax3_sns.tick_params(labelsize=5)\n\ncolumn = 'SibSp'\ncolor_map = ['lightgray' for _ in range(7)]\ncolor_map[0] = '#eeb977'\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax4 = fig.add_subplot(gs[1, 1])\nfor s in [\"right\", \"top\"]:\n    ax4.spines[s].set_visible(False)\nax4.set_facecolor(background_color)\nax4.tick_params(axis = \"y\", which = \"both\", left = False)\nax4_sns = sns.barplot(ax=ax4, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax4_sns.set_xlabel(\"Siblings \/ spouses\",fontsize=5, weight='bold')\nax4_sns.set_ylabel('')\nax4.yaxis.set_major_formatter(ticker.PercentFormatter())\nax4_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax4_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax4_sns.tick_params(labelsize=5)\n\ncolumn = 'Parch'\ncolor_map = ['lightgray' for _ in range(8)]\ncolor_map[0] = '#eeb977'\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax5 = fig.add_subplot(gs[1, 2])\nfor s in [\"right\", \"top\"]:\n    ax5.spines[s].set_visible(False)\nax5.set_facecolor(background_color)\nax5.tick_params(axis = \"y\", which = \"both\", left = False)\nax5_sns = sns.barplot(ax=ax5, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax5_sns.set_xlabel(\"Parents \/ children\",fontsize=5, weight='bold')\nax5_sns.set_ylabel('')\nax5.yaxis.set_major_formatter(ticker.PercentFormatter())\nax5_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax5_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax5_sns.tick_params(labelsize=5)\n\ncolumn = 'Fare'\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax6 = fig.add_subplot(gs[2, 0])\nfor s in [\"right\", \"top\"]:\n    ax6.spines[s].set_visible(False)\nax6.set_facecolor(background_color)\nax6.tick_params(axis = \"y\", which = \"both\", left = False)\nax6_sns = sns.kdeplot(ax=ax6, x=train_df[train_df['Survived']==1]['Fare'], zorder=2, shade=True)\nax6_sns = sns.kdeplot(ax=ax6, x=train_df[train_df['Survived']==0]['Fare'], zorder=2, shade=True)\nax6_sns.set_xlabel(\"Fare\",fontsize=5, weight='bold')\nax6_sns.set_ylabel('')\nax6_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax6_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax6_sns.tick_params(labelsize=5)\n\ncolumn = 'Cabin_code'\ncolor_map = ['lightgray' for _ in range(9)]\ncolor_map[7] = '#eeb977'\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax7 = fig.add_subplot(gs[2, 1])\nfor s in [\"right\", \"top\"]:\n    ax7.spines[s].set_visible(False)\nax7.set_facecolor(background_color)\nax7.tick_params(axis = \"y\", which = \"both\", left = False)\nax7_sns = sns.barplot(ax=ax7, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax7_sns.set_xlabel(\"Cabin\",fontsize=5, weight='bold')\nax7_sns.set_ylabel('')\nax7.yaxis.set_major_formatter(ticker.PercentFormatter())\nax7_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax7_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax7_sns.tick_params(labelsize=5)\n\ncolumn = 'Embarked'\ncolor_map = ['lightgray' for _ in range(4)]\ncolor_map[3] = '#eeb977'\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax8 = fig.add_subplot(gs[2, 2])\nfor s in [\"right\", \"top\"]:\n    ax8.spines[s].set_visible(False)\nax8.set_facecolor(background_color)\nax8.tick_params(axis = \"y\", which = \"both\", left = False)\nax8_sns = sns.barplot(ax=ax8, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax8_sns.set_xlabel(\"Port\",fontsize=5, weight='bold')\nax8_sns.set_ylabel('')\nax8.yaxis.set_major_formatter(ticker.PercentFormatter())\nax8_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax8_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax8_sns.tick_params(labelsize=5)","0b24b293":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom catboost import CatBoostClassifier, Pool\nfrom sklearn.model_selection import  StratifiedKFold\nfrom sklearn import metrics","568b721a":"ctypes = {\n    'Survived':np.int8,\n    'Pclass':np.int8,\n    'Name':np.str,\n    'Embarked':np.str,  \n    'SibSp':np.int8,\n    'Parch':np.int8,\n}\n\n           \ntrain = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv',dtype=ctypes,index_col='PassengerId')\ntest = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv',dtype=ctypes,index_col='PassengerId')\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv',dtype=ctypes,index_col='PassengerId')","b9b80c8e":"train['Embarked'] = train['Embarked'].fillna('No')\ntest['Embarked'] = test['Embarked'].fillna('No')\n\ntrain['Cabin'] = train['Cabin'].fillna('_')\ntest['Cabin'] = test['Cabin'].fillna('_')\n\ntrain.Ticket = train.Ticket.map(lambda x:str(x).split()[0] if len(str(x).split()) > 1 else 'X')\ntest.Ticket = test.Ticket.map(lambda x:str(x).split()[0] if len(str(x).split()) > 1 else 'X')\n\ntrain['CabinType'] = train['Cabin'].apply(lambda x:x[0])\ntest['CabinType'] = test['Cabin'].apply(lambda x:x[0])\n\ntrain['Age'].fillna(round(train['Age'].mean()), inplace=True,)\ntest['Age'].fillna(round(test['Age'].mean()), inplace=True,)\ntrain['Age'] = train['Age'].apply(round)\ntest['Age'] = test['Age'].apply(round)\ntrain['Age'] = train['Age'].astype(np.int8)\ntest['Age'] = test['Age'].astype(np.int8)\n\n\ntrain['Fare'].fillna(round(train['Fare'].mean()), inplace=True,)\ntest['Fare'].fillna(round(test['Fare'].mean()), inplace=True,)\n\ntrain['FirstName'] = train['Name'].apply(lambda x:x.split(', ')[0])\ntrain['SecondName'] = train['Name'].apply(lambda x:x.split(', ')[1])\n\ntest['FirstName'] = test['Name'].apply(lambda x:x.split(', ')[0])\ntest['SecondName'] = test['Name'].apply(lambda x:x.split(', ')[1])\n\ntrain['n'] = 1\ntest['n'] = 1\n\ngb = train.groupby('FirstName')\ndf_names = gb['n'].sum()\ntrain['SameFirstName'] = train['FirstName'].apply(lambda x:df_names[x])\n\ngb = test.groupby('FirstName')\ndf_names = gb['n'].sum()\ntest['SameFirstName'] = test['FirstName'].apply(lambda x:df_names[x])\n\ntrain['SameFirstName'] = train['SameFirstName'].apply(lambda x:-1 if x>10 else x)\ntest['SameFirstName'] = test['SameFirstName'].apply(lambda x:-1 if x>10 else x)\n\ntrain_female = train[train.Sex=='female']\ntrain_male = train[train.Sex=='male']","d4cef611":"columns = ['Pclass',  'Age','Embarked','Parch','SibSp','Fare','CabinType','Ticket','SameFirstName']\ncat_features = ['Pclass','Embarked','CabinType','Ticket',]\n\nmodels_f = []\nnum_folds=9\nfolds = StratifiedKFold(n_splits=num_folds, shuffle=True, random_state=2021) # create folds \nX_train = train_female[columns]\ny_train = train_female['Survived']\nfor n_fold, (train_idx, valid_idx) in enumerate (folds.split(X_train,  y_train)):\n    train_X, train_y = X_train.iloc[train_idx], y_train.iloc[train_idx]\n    valid_X, valid_y = X_train.iloc[valid_idx], y_train.iloc[valid_idx]\n    dataset = Pool(train_X, train_y, cat_features)\n    evalset = Pool(valid_X, valid_y, cat_features)\n    model_female = CatBoostClassifier(\n        task_type=\"GPU\", \n        depth=7,\n        max_ctr_complexity=5,\n        #border_count=1024, \n        iterations=50000,\n        od_wait=500,od_type='Iter',       \n        #l2_leaf_reg=0.01,\n        learning_rate=0.0035,\n        min_data_in_leaf=3\n    \n        )\n    model_female.fit(dataset, plot=False, verbose=500,eval_set=evalset)\n    models_f.append(model_female)\n    y_pred_female = model_female.predict(train_female[columns])\n    print(metrics.accuracy_score(train_female['Survived'], y_pred_female))","b8e7a0d7":"columns = ['Pclass',  'Age','Embarked','Parch','SibSp','Fare','CabinType','Ticket']\ncat_features = ['Pclass','Embarked','CabinType','Ticket']\n\nmodels_m = []\nnum_folds=9\nfolds = StratifiedKFold(n_splits=num_folds, shuffle=True, random_state=2021) # create folds \nX_train = train_male[columns]\ny_train = train_male['Survived']\nfor n_fold, (train_idx, valid_idx) in enumerate (folds.split(X_train,  y_train)):\n    train_X, train_y = X_train.iloc[train_idx], y_train.iloc[train_idx]\n    valid_X, valid_y = X_train.iloc[valid_idx], y_train.iloc[valid_idx]\n    dataset = Pool(train_X, train_y, cat_features)\n    evalset = Pool(valid_X, valid_y, cat_features)\n    model_male = CatBoostClassifier(\n        task_type=\"GPU\", \n        depth=6,\n        max_ctr_complexity=15,\n        #border_count=1024, \n        iterations=50000,\n        od_wait=400,od_type='Iter',       \n        #l2_leaf_reg=0.01,\n        learning_rate=0.04,\n        min_data_in_leaf=3\n        )\n    model_male.fit(dataset, plot=False, verbose=500,eval_set=evalset)\n    models_m.append(model_male)\n    y_pred_male = model_male.predict(train_male[columns])\n    print(metrics.accuracy_score(train_male['Survived'], y_pred_male))\n    ","39e10075":"%%time\ncolumns = ['Pclass',  'Age','Embarked','Parch','SibSp','Fare','CabinType','Ticket','SameFirstName']\nm_columns_f = []\nfor idx,m in enumerate(models_f):\n    new_column = 'fm_{}'.format(idx)\n    m_columns_f.append(new_column)\n    test[new_column] = m.predict(test[columns])\n    print(new_column, end=' ')\nprint()\nm_columns_m = []\ncolumns = ['Pclass',  'Age','Embarked','Parch','SibSp','Fare','CabinType','Ticket']\nfor idx,m in enumerate(models_m):\n    new_column = 'm_{}'.format(idx)\n    m_columns_m.append(new_column)\n    test[new_column] = m.predict(test[columns])\n    print(new_column, end=' ')","d5178201":"def vote(r, columns):\n    ones = 0\n    zeros = 0\n    for i in columns:\n        if r[i]==0:\n            zeros+=1\n        else:\n            ones+=1\n    if ones>zeros:\n        return 1\n    else:\n        return 0\n\ntest['model_female'] = test.apply(lambda x:vote(x,m_columns_f),axis=1)\ntest['model_male'] = test.apply(lambda x:vote(x,m_columns_m),axis=1)","ac5948dc":"def _s(r):\n    if r.Sex=='male':\n        return r.model_male\n    else:\n        return r.model_female\n    \nsubmission['Survived'] = test.apply(lambda x:_s(x),axis=1)","11e74765":"submission.to_csv('result.csv')","7be47c17":"submission['Survived'].mean(), train['Survived'].mean()","3fcdac8a":"Female has higher chance to survived at 31.2% compared to male, this may also be the result of lifeboat priority for female than male.\nMale has survival rate at 11.5% which is a far below Female.","a857a33c":"# **Analysis**","01286c1e":"**Missing values per columns in train and test dataset**","61564cb1":"**SibSp**\n\n- Most of the passengers in Synthanic are travel alone, this make the survival rate for passengers without siblings \/ spouses higher than passengers with siblings \/ spouses.\n- Survival rate for passengers without siblings \/ spouses are more than 30%.","ea85ef86":"**Pclass**\n\n1. Proportions between each classes are different in the train and test:\n 1. Class 3 in train dataset contributes 40% while in test dataset, it has a contribution above 60%.\n 2. Class 2 is at a very low of 10% in test dataset while in train dataset, it contributes around 30%.\n 3. Class 1 in the train and test dataset are quite the same but it is higher in the train dataset.\n\n\n**Sex**\n\n1. Proportions between each classes are different in the train and test:\n - female contributed more than 40% in train dataset while in test dataset female only contributed 30% of total dataset.\n - male contributed more than 50% in the train and test dataset.\n\n\n**Age**\n\n1. Distribution between train and test dataset are different especially on range of 15-40.\n2. There are missing value in the train and test dataset, they are 3,292 and 3,487, respectively.\n\n\n**SibSp**\n\n1. Number of siblings \/ spouses can be categorize into 7 categories, this feature can be treated as a continuous or categorical and see how the model performed.\n2. There is 10% differences on passenger that travel with 1 sibbling \/ spose between train and test dataset.\n3. The highest \/ maximum number of sibblings \/ spouses that is going aboard with the passengers is 8 people and the lowest is traveling without any sibblings \/ spouses.\n4. Most of Synthanic passenger don't travel with their sibblings \/ sposes.\n\n\n**Parch**\n\n1. Number of parents \/ children can be categorize into 8 categories, this feature can also be treated as a continuous or categorical.\n2. The highest number of parents \/ children is 8 people and the lowest is 0 meaning the passengers is traveling without their parents \/ childrens.\n3. This features strenghten the idea that most of the Synthanic passengers are traveling alone.\n\n\n**Fare**\n\n1. Fare distribution between train and test dataset are quite resemble each other, though it's not perfect especially in the lower fare.\n2. The highest fare in train dataset is 744.66 while in test dataset is 680.7.\n3. The lowest fare in test dataset is 0.05 and 0.68 in the train dataset.\n4. The average fare is 43.9 in train dataset and 45.4 in test dataset, not a far gap between them.\n5. Missing value in this feature are 134 in train dataset and 133 in test dataset.\n\n\n**Cabin**\n\n1. Cabin numbers can extracted by taking the first letter in the feature.\n2. Be aware that this feature has the highest number of missing value of 67,866 in train dataset and 70,831 in test dataset, meaaning it's almost 70% of the information are missing. A new cabin category N is created to address passengers without cabin number.\n3. Cabin can be categorize into 9 categories, this feature can be treated as a continuous or categorical and see how the model performed.\n4. There is quite a distinct imbalance data between train and test dataset in cabin C.\n \n\n**Embarked**\n\n1. A new embarked category N is created to address passengers without port of Embarkation.\n2. Most of Synthanic passengers are embarked from Southampton which contributes almost 70% of the passengers.\n3. There are 205 missing values in train dataset and 277 missing values in the test dataset.\n","fd65af1b":"**CatBoost** is a machine learning algorithm that uses gradient boosting on decision trees. It is available as an open source library.\n\nCatBoost supports training on GPUs.\n\nTraining on GPU is non-deterministic, because the order of floating point summations is non-deterministic in this implementation.\n\nChoose the implementation for more details on the parameters that are required to start training on GPU.\n\n\nhttps:\/\/catboost.ai\/docs\/concepts\/python-reference_catboostclassifier.html#python-reference_catboostclassifier","379e4036":"#### **Obeservations :**\n- #### There are 57,226 of Synthanic passengers not survived \n- #### 42,774 survived the accident\n- #### Converted to survival rate of 57.2% for not survived and 42.8% for survived","c1e07fe8":"# **Checking the Null Values :**","f631b222":"## Final EDA Observations\n\n**Survived**\n\nThere are 57,226 of Synthanic passengers not survived and 42,774 survived the accident, converted to survival rate of 57.2% for not survived and 42.8% for survived.\n\n\n**Pclass**\n\n- Ticket class 1 has the highest chance to survived with survival rate at 17.6% followed by class 2 with 15% and class 3 with 10.1%.\n- Higher ticket class has a higher chance to survived, this may be a result of lifeboat priority based on ticket class.\n\n\n**Sex**\n\n- Female has higher chance to survived at 31.2% compared to male, this may also be the result of lifeboat priority for female than male.\n- Male has survival rate at 11.5% which is a far below Female.\n\n\n**Age**\n\n- Passengers with age 15-40 have a lower chance to survived while older passengers at age 40 and above have a higher probability to survived, this may also due to lifeboat priority for older people.\n\n\n**SibSp**\n\n- Most of the passengers in Synthanic are travel alone, this make the survival rate for passengers without siblings \/ spouses higher than passengers with siblings \/ spouses.\n- Survival rate for passengers without siblings \/ spouses are more than 30%.\n\n\n**Parch**\n\n- As stated earlier, that most of the passengers in Synthanic are travel alone, this also make the survival rate for passenger that travel without parents \/ children are higher.\n- Survival rate for passengers that travel without parents \/ children is almost 30% which is almost the same with the survival rate for passenger that travel without siblings \/ spouses.\n\n\n**Fare**\n\n- Consistent with ticket class, passengers with lower fare have a lower chance to survived.\n- It's expected that passengers that buy a low fare get a lower ticket class but further analysis will be needed to explore more.\n\n\n**Cabin**\n\n- There are many missing values in the cabin number which it hard to make an analysis on the survival rate.\n- Passengers with unknown cabin (N) has the highest survival rate which is above 20% compared to others.\n- Passengers with cabin C has the second highest survival rate that is above 5%.\n\n\n**Embarked**\n\n- Passengers that embarked from Southampton have the highest chance to survived which is above 20%.\n- The second highest survival rate are passengers that embarked from Cherbourg with 15% survival rate.","12214dff":"**The data contains the following information:**\n\n1. Pclass - a proxy for socio-economic status (SES) where 1st = Upper, 2nd = Middle and 3rd = Lower.\n2. Sex - male and female.\n3. Age - fractional if it less than 1 and age estimation in the form of xx.5.\n4. SibSp - number of siblings \/ spouses aboard the Synthanic; siblings are brother, sister, stepbrother and stepsister and spouses are husband and wife (mistresses and fianc\u00e9s were ignored).\n5. Parch - # of parents \/ children aboard the Synthanic; parents are mother and father; child are daughter, son, stepdaughter and stepson. Some children travelled only with a nanny, therefore Parch is 0 for them.\n6. Fare - the paassenger fare.\n7. Cabin - the cabin number.\n8. Emarked - port of embarkation where C is Cherbourg, Q is Queenstown and S is Southampton.\n9. Ticket - ticket number.\n10. Name - passengers name.\n11. Survived - target variable where 0 is not survived and 1 is survived\n\n\n**Variable Notes**\n* **pclass**: A proxy for socio-economic status (SES)\n * 1st = Upper\n * 2nd = Middle\n * 3rd = Lower\n\n\n* **age**: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\n\n* **sibsp**: The dataset defines family relations in this way...\n * Sibling = brother, sister, stepbrother, stepsister\n * Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n \n\n* **parch**: The dataset defines family relations in this way...\n * Parent = mother, father\n * Child = daughter, son, stepdaughter, stepson\n * Some children travelled only with a nanny, therefore parch=0 for them.\n \n \n \n**Types Of Features**\n- Categorical Features:\n   - A categorical variable is one that has two or more categories and each value in that feature can be categorised by them.For example, gender is a categorical variable having two categories (male and female). Now we cannot sort or give any ordering to such variables. They are also known as Nominal Variables.\n   - Categorical Features in the dataset: Sex,Embarked.\n\n- Ordinal Features:\n   - An ordinal variable is similar to categorical values, but the difference between them is that we can have relative ordering or sorting between the values. For eg: If we have a feature like Height with values Tall, Medium, Short, then Height is a ordinal variable. Here we can have a relative sort in the variable.\n   - Ordinal Features in the dataset: PClass\n\n- Continous Feature:\n   - A feature is said to be continous if it can take values between any two points or between the minimum or maximum values in the features column.\n   - Continous Features in the dataset: Age","91f42d1c":"The first thing we are going to check is the distribution of the target feature. It's important to know if the class is balanced or not. If so, we would probably have to handle it.","83b72108":"# **Now comparing the data between the Training and the Test data!**\n\nThis section will try to explore and compare features in the train and test dataset. It should be noted that some features are not the same between train and test dataset as can be seen more detail on each sub-sections.","fc2fa520":"# **Importing the data**","120bcbd9":"**Cabin**\n\n- There are many missing values in the cabin number which it hard to make an analysis on the survival rate.\n- Passengers with unknown cabin (N) has the highest survival rate which is above 20% compared to others.\n- Passengers with cabin C has the second highest survival rate that is above 5%.","2214b78c":"**Age**\n\nPassengers with age 15-40 have a lower chance to survived while older passengers at age 40 and above have a higher probability to survived, this may also due to lifeboat priority for older people.","0b3e6adb":"**Fare**\n\n- Consistent with ticket class, passengers with lower fare have a lower chance to survived.\n- It's expected that passengers that buy a low fare get a lower ticket class but further analysis will be needed to explore more.","e51b0065":"**Parch**\n\n- As stated earlier, that most of the passengers in Synthanic are travel alone, this also make the survival rate for passenger that travel without parents \/ children are higher.\n- Survival rate for passengers that travel without parents \/ children is almost 30% which is almost the same with the survival rate for passenger that travel without siblings \/ spouses.","761e6cba":"**Hello Visitor,**\n\n**This is one of my first attempts at making a detailed and well thought out kernels, hope you gain some insights from it and find it useful! Do upvote and share it if you like it! :)**\n\n\n***This kernel has covered 4 topics:***\n- Basic Introduction\n- EDA\n- Feature Engineering\n- Model Building\n\n**The name of the competition is Tabular Playground Series - Apr 2021**\n\n**The tag line is Synthanic - You're going to need a bigger boat**\n\n\n\n![Titanic Ship Credits:Canoe1967\/wikipeida.org](https:\/\/www.marineinsight.com\/wp-content\/uploads\/2010\/10\/titanic.jpg)\n\n**The competition description:**\n\n\nKaggle competitions are incredibly fun and rewarding, but they can also be intimidating for people who are relatively new in their data science journey. In the past, we've launched many Playground competitions that are more approachable than our Featured competitions and thus, more beginner-friendly.\n\nIn order to have a more consistent offering of these competitions for our community, we're trying a new experiment in 2021. We'll be launching month-long tabular Playground competitions on the 1st of every month and continue the experiment as long as there's sufficient interest and participation.\n\nThe goal of these competitions is to provide a fun, and approachable for anyone, tabular dataset. These competitions will be great for people looking for something in between the Titanic Getting Started competition and a Featured competition. If you're an established competitions master or grandmaster, these probably won't be much of a challenge for you. We encourage you to avoid saturating the leaderboard.\n\nFor each monthly competition, we'll be offering Kaggle Merchandise for the top three teams. And finally, because we want these competitions to be more about learning, we're limiting team sizes to 3 individuals.\n\nThe dataset is used for this competition is synthetic but based on a real dataset (in this case, the actual Titanic data!) and generated using a CTGAN. The statistical properties of this dataset are very similar to the original Titanic dataset, but there's no way to \"cheat\" by using public labels for predictions. How well does your model perform on truly private test labels?\n\n\n**Task at hand:**\n\nYour task is to predict whether or not a passenger survived the sinking of the Synthanic (a synthetic, much larger dataset based on the actual Titanic dataset). For each PasengerId row in the test set, you must predict a 0 or 1 value for the Survived target.\n\nYour score is the percentage of passengers you correctly predict. This is known as accuracy.\n\n\n**Other things to Note:**\n\n**Points** : This competition does not award ranking points\n\n**Tiers** : This competition does not count towards tiers\n\n\n**Little bit about the Titanic:**\n\nTitanic, in full Royal Mail Ship (RMS) Titanic, British luxury passenger liner that sank on April 14\u201315, 1912, during its maiden voyage, en route to New York City from Southampton, England, killing about 1,500 passengers and ship personnel. One of the most famous tragedies in modern history, it inspired numerous stories, several films, and a musical and has been the subject of much scholarship and scientific speculation.\n\n![The Real Titanic](https:\/\/cdn.britannica.com\/68\/185468-050-C0D53622\/Titanic-iceberg-British-15-1912.jpg)","952e5ebc":"**If there are any suggesion for the notebook please comment, that would be helpful. Also please upvote if you liked it! Thank you!!**\n\nSome of my other works:\n\nhttps:\/\/www.kaggle.com\/udbhavpangotra\/tps-apr21-eda-model\nhttps:\/\/www.kaggle.com\/udbhavpangotra\/heart-attacks-extensive-eda-and-visualizations\nhttps:\/\/www.kaggle.com\/udbhavpangotra\/what-do-people-use-youtube-for-in-great-britain","868d2689":"**Pclass**\n\nTicket class 1 has the highest chance to survived with survival rate at 17.6% followed by class 2 with 15% and class 3 with 10.1%.\nHigher ticket class has a higher chance to survived, this may be a result of lifeboat priority based on ticket class.","d796af5b":"**Top 5 rows in the train dataset**","641d3176":"**Embarked**\n\n- Passengers that embarked from Southampton have the highest chance to survived which is above 20%.\n- The second highest survival rate are passengers that embarked from Cherbourg with 15% survival rate.","b0a2c0f4":"**Numbers of missing values**","f25e33aa":"# Model","0b0aac4c":"**Number of Rows and Columns**"}}