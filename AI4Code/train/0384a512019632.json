{"cell_type":{"40f0ee8d":"code","9dc12563":"code","3c8c518a":"code","0cda555d":"code","92fbea2f":"code","7f586320":"code","536836de":"code","c9fb5c81":"code","85be16f8":"code","1457a8ed":"code","65f0de4c":"code","77106173":"code","0d852fa1":"code","b8e4a41c":"code","793f8d99":"code","1984a36d":"code","8a6c6bd6":"code","90d237ac":"code","7842fb39":"code","074669e2":"code","1a21deef":"code","32a8986c":"code","2a3c8805":"code","cca46858":"code","bd46f9b7":"code","ff7dc0b7":"code","44e35737":"code","14f49170":"code","3d64e81a":"code","a2e01d31":"code","88bb49f3":"code","8f441064":"code","8e8e56ad":"code","eca5be01":"code","434cd821":"code","3d017baa":"code","6e7f3c1c":"code","22d540d1":"code","10f367ad":"code","75b09582":"code","4e064e6b":"code","83883f2e":"markdown"},"source":{"40f0ee8d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # \n#data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9dc12563":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# keras lib\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Dense, Input, LSTM, Embedding, Dropout, Activation, Flatten, Bidirectional, GlobalMaxPool1D\nfrom keras.models import Model\nfrom keras.utils import plot_model\n\n# general processing libs\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.model_selection import train_test_split\nimport random\nfrom tqdm.notebook import tqdm\nimport re\nimport tensorflow as tf\nimport torch\nimport os","3c8c518a":"dfv2 = pd.read_json('..\/input\/news-headlines-dataset-for-sarcasm-detection\/Sarcasm_Headlines_Dataset_v2.json',lines=True)\ndfv = pd.read_json('..\/input\/news-headlines-dataset-for-sarcasm-detection\/Sarcasm_Headlines_Dataset.json',lines=True)","0cda555d":"print(dfv.shape)\ndfv.head()","92fbea2f":"#print(dfv.columns)\ncolumns = ['article_link', 'headline', 'is_sarcastic']\ndfv2 = dfv2.reindex(columns=columns)","7f586320":"print(dfv2.shape)\ndfv2.head()","536836de":"dfv = dfv.append(dfv2)","c9fb5c81":"dfv.shape","85be16f8":"dfv2.drop(dfv2.index, inplace=True)","1457a8ed":"dfv.head()","65f0de4c":"dfv = dfv.drop(['article_link'],axis=1)","77106173":"mispell_dict = {\"ain't\": \"is not\", \"cannot\": \"can not\", \"aren't\": \"are not\", \"can't\": \"can not\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",\n                \"doesn't\": \"does not\",\n                \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\", \"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\",\n                \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\", \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\", \"I'm\": \"I am\",\n                \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\", \"i'll've\": \"i will have\", \"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\",\n                \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\", \"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\n                \"mightn't\": \"might not\", \"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\",\n                \"needn't've\": \"need not have\", \"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\",\n                \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\",\n                \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\", \"so's\": \"so as\", \"this's\": \"this is\", \"that'd\": \"that would\",\n                \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\", \"they'd\": \"they would\",\n                \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\",\n                \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\",\n                \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\", \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\",\n                \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\",\n                \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"wont\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\",\n                \"wouldn't\": \"would not\",\n                \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\", \"y'all'd've\": \"you all would have\", \"y'all're\": \"you all are\", \"y'all've\": \"you all have\",\n                \"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\", 'colour': 'color',\n                'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater', 'cancelled': 'canceled', 'labour': 'labor',\n                'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ', 'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What',\n                'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can', 'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I',\n                'theBest': 'the best', 'howdoes': 'how does', 'Etherium': 'Ethereum',\n                'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', 'airhostess': 'air hostess', \"whst\": 'what',\n                'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization', 'demonetisation': 'demonetization'}\n\nmispell_dict = {k.lower(): v.lower() for k, v in mispell_dict.items()}\n","0d852fa1":"def preprocess_data(s):\n    # maintain case of the letters and remove extra white spaces \n    s = str(s).lower().strip()\n    \n    # remove the short forms and spelling misses \n    s = \" \".join([mispell_dict[word] if word in mispell_dict.keys() else word for word in s.split()])\n    \n    # remove the nextline characters \n    s = re.sub('\/n','',s)\n    \n    # filter the characters \n    s  = re.sub(r\"([?!,+=\u2014&%\\'\\\";:\u00bf\u0964\u0964\u0964|\\(\\).{}\\[\\]\/\/])\",'', s)\n    \n    # replace multiple spaces with single space \n    s = re.sub(' +', ' ', s)\n    \n    return s","b8e4a41c":"dfv['headline'] = dfv['headline'].apply(preprocess_data)","793f8d99":"print(dfv[dfv['is_sarcastic'] == 0].shape)\nprint(dfv[dfv['is_sarcastic'] == 1].shape)","1984a36d":"dfv.head()","8a6c6bd6":"#total number of words we gonna train \n\ntotal_Words = 8000\n\n#total length of ID character embedding \n\nmax_len = 50\n\n#total embedding vector length\n\nembedding_len = 300","90d237ac":"X = dfv['headline'].to_frame()\ny = dfv['is_sarcastic'].to_frame()","7842fb39":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.33, random_state=42)","074669e2":"%%time\n\ntokenizer = Tokenizer(num_words = total_Words)\ntokenizer.fit_on_texts(list(X['headline']))\n\n\ntrain_data = tokenizer.texts_to_sequences(X_train['headline'])\ntrain_data = pad_sequences(train_data,maxlen=max_len)\n\ntarget = y_train['is_sarcastic']\n\n\n\n\n\n","1a21deef":"print(X_train.shape)\nprint(X_test.shape)","32a8986c":"%%time\n\nembedding_file = '..\/input\/fasttext-crawl-300d-2m\/crawl-300d-2M.vec'\n\ndef get_embedding_for_words(word,*arr):\n    return word , np.asarray(arr,dtype='float32')\n\nembed_index = dict(get_embedding_for_words(*o.rstrip().rsplit(' ')) for o in tqdm(open(embedding_file)))\n    \n    \nword_index = tokenizer.word_index\nnb_words = min(total_Words,len(word_index))\nembed_matrix = np.zeros((nb_words,embedding_len))","2a3c8805":"for word , i in tqdm(word_index.items()):\n    if i >= total_Words: \n        continue\n    embed_vector = embed_index.get(word)\n    if embed_vector is not None :\n        embed_matrix[i]=embed_vector","cca46858":"embed_matrix.shape","bd46f9b7":"def seed_everything(seed):\n    random.seed(seed)\n    np.random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    tf.random.set_seed(seed)\n\n# We fix all the random seed so that, we can reproduce the results.\nseed_everything(2020)","ff7dc0b7":"input_layer = Input(shape = (max_len,))\n\nembedding_layer = Embedding(total_Words,\n                            embedding_len,\n                            weights=[embed_matrix])(input_layer)\n\nlstm_layer = Bidirectional(LSTM(128,return_sequences=True))(embedding_layer)\n\nmaxpool_layer = GlobalMaxPool1D()(lstm_layer)\n\ndense_layer_1 = Dense(64,activation='relu')(maxpool_layer)\ndropout_1 = Dropout(0.5)(dense_layer_1)\n\ndense_layer_2 = Dense(32,activation='relu')(dropout_1)\ndropout_2 = Dropout(0.5)(dense_layer_2)\n\noutput_layer = Dense(1,activation='sigmoid')(dropout_2)\n\nmodel = Model(inputs=input_layer,outputs=output_layer)\n\nmodel.compile(loss='binary_crossentropy' , optimizer = 'adam',metrics=['accuracy'])\n\nmodel.summary()","44e35737":"plot_model(model, show_shapes=True)","14f49170":"BATCH_SIZE = 1024\nEPOCHS = 2\n\nhistory = model.fit(\n    train_data, target,\n    batch_size=BATCH_SIZE,\n    epochs=EPOCHS,\n    # We are using randomly selected 20% sentences as validation data.\n    validation_split=0.2\n)","3d64e81a":"dfv.columns","a2e01d31":"dfv[dfv['is_sarcastic']==1]","88bb49f3":"sentence = \"sun rises from the east\"\nsentence = preprocess_data(sentence)\nprint(sentence)\n\nsentence = tokenizer.texts_to_sequences([sentence])\nsentence = pad_sequences(sentence, maxlen = max_len)\nsentence","8f441064":"# Make the prediction.\nprediction = model.predict(sentence)\nprediction","8e8e56ad":"#sentence = \"Haters gonna stay like that says local government\"\nsentence = \"church, state joyfully reunite after 230-year trial separation\"\nsentence = preprocess_data(sentence)\nprint(sentence)\n\nsentence = tokenizer.texts_to_sequences([sentence])\nsentence = pad_sequences(sentence, maxlen = max_len)\nsentence","eca5be01":"# Make the prediction.\nprediction = model.predict(sentence)\nprediction[0][0]","434cd821":"test_data = tokenizer.texts_to_sequences(X_test['headline'])\ntest_data = pad_sequences(test_data,maxlen=max_len)\n\ntarget = y_test['is_sarcastic']","3d017baa":"# Make the prediction.\nprediction = model.predict(test_data)","6e7f3c1c":"prediction.shape","22d540d1":"def change_to_one_category(value):\n    if(value < 0.5):\n        return 0\n    else:\n        return 1\n    \n    ","10f367ad":"prediction = pd.DataFrame(prediction,columns = ['Accuracy']) ","75b09582":"prediction['Accuracy'] = prediction['Accuracy'].apply(lambda x : change_to_one_category(x))","4e064e6b":"from sklearn.metrics import balanced_accuracy_score  #average of recall obtained on each class\nbalanced_accuracy_score(y_test, prediction['Accuracy'])","83883f2e":"Note : Its looks like the dataset is more catchy than sarcastic , but since the data is inclined to such parameters, the model works fine for such cases"}}