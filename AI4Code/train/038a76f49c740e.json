{"cell_type":{"6e2712b0":"code","7ce8f686":"code","82fcb09f":"code","7bc027bc":"code","53fe983a":"code","52107b58":"code","96067371":"code","c7fe7b23":"code","451ef357":"code","1c4cfe09":"code","66fa2cc4":"code","4cf92bb8":"code","46bdeb2b":"code","996f1c81":"code","d8bd453b":"code","5086bfd5":"code","f3befaa4":"markdown","da173d0b":"markdown","ce83cd26":"markdown","4ca8cf0a":"markdown","83da5687":"markdown","6f547285":"markdown","6df10009":"markdown","268f5bc2":"markdown","8185be6c":"markdown","5e1b9faf":"markdown","3ea6b1f3":"markdown","a49c9fa2":"markdown","9273e5a3":"markdown","1aa20bd9":"markdown","2d816a25":"markdown","f88887ae":"markdown","36008d17":"markdown","3e732daa":"markdown","6b6a6f11":"markdown"},"source":{"6e2712b0":"#import library yang dibutuhkan\nimport pandas as pd\nimport numpy as np\n\n#lakukan pembacaan dataset\nmovie_df = pd.read_csv('..\/input\/title.basics.tsv', sep='\\t')#untuk menyimpan title_basics.tsv\n\nrating_df = pd.read_csv('..\/input\/title.ratings.tsv', sep='\\t')#untuk menyimpan title.ratings.tsv\n","7ce8f686":"#Menampilkan 5 data teratas movie_df\nprint(\"5 data teratas\")\nprint(movie_df.head())\n#Melihat tipe data setiap kolom\nprint(\"Tipe Data setiap Kolom\")\nprint(movie_df.info())\n#Pengecekan Data dengan Nilai NULL\nprint(\"Data dengan Nilai NULL\")\nprint(movie_df.isnull().sum())","82fcb09f":"#Pengecekan terhadap bentuk data dari kolom primaryTitle dan originalTitle yang bernilai NULL\nprint(movie_df.loc[(movie_df['primaryTitle'].isnull()) | (movie_df['originalTitle'].isnull())])","7bc027bc":"#Mengupdate movie_df dengan membuang data-data bernilai NULL\nmovie_df = movie_df.loc[(movie_df['primaryTitle'].notnull()) & (movie_df['originalTitle'].notnull())]\n\n#Menampilkan jumlah data setelah data dengan nilai NULL dibuang\nprint(len(movie_df))","53fe983a":"#Pengecekan terhadap bentuk data dari kolom genres yang bernilai NULL\nprint(movie_df.loc[movie_df['genres'].isnull()])","52107b58":"#Mengupdate movie_df dengan membuang data-data bernilai NULL\nmovie_df = movie_df.loc[movie_df['genres'].notnull()]\n\n#Menampilkan jumlah data setelah data dengan nilai NULL dibuang\nprint(len(movie_df))","96067371":"#mengubah nilai '\\\\N' pada startYear menjadi np.nan dan cast kolomnya menjadi float64\nmovie_df['startYear'] = movie_df['startYear'].replace('\\\\N', np.nan)\nmovie_df['startYear'] = movie_df['startYear'].astype('float64')\nprint(movie_df['startYear'].unique()[:5])\n\n#mengubah nilai '\\\\N' pada endYear menjadi np.nan dan cast kolomnya menjadi float64\nmovie_df['endYear'] = movie_df['endYear'].replace('\\\\N', np.nan)\nmovie_df['endYear'] = movie_df['endYear'].astype('float64')\nprint(movie_df['endYear'].unique()[:5])\n\n#mengubah nilai '\\\\N' pada runtimeMinutes menjadi np.nan dan cast kolomnya menjadi float64\nmovie_df['runtimeMinutes'] = movie_df['runtimeMinutes'].replace('\\\\N', np.nan)\nmovie_df['runtimeMinutes'] = movie_df['runtimeMinutes'].astype('float64')\nprint(movie_df['runtimeMinutes'].unique()[:5])\n","c7fe7b23":"#Membuat fungsi transform_to_list\ndef transform_to_list(x):\n    if ',' in x: \n    #ubah menjadi list apabila ada data pada kolom genre\n        return x.split(',')\n    else: \n    #jika tidak ada data, ubah menjadi list kosong\n        return []\n\nmovie_df['genres'] = movie_df['genres'].apply(lambda x: transform_to_list(x))","451ef357":"#Menampilkan 5 data teratas rating_df\nprint(\"5 data teratas\")\nprint(rating_df.head())\n#Melihat tipe data setiap kolom\nprint(\"Tipe Data setiap Kolom\")\nprint(rating_df.info())\n#Pengecekan Data dengan Nilai NULL\nprint(\"Data dengan Nilai NULL\")\nprint(rating_df.isnull().sum())","1c4cfe09":"#Lakukan join pada kedua table\nmovie_rating_df = pd.merge(movie_df, rating_df, on='tconst', how='inner')\n\n#Tampilkan 5 data teratas\nprint(movie_rating_df.head())\n\n#Tampilkan tipe data dari tiap kolom\nprint(movie_rating_df.info())","66fa2cc4":"#Menghilangkan semua nilai NULL dari kolom startYear dan runtimeMinutes\nmovie_rating_df = movie_rating_df.dropna(subset=['startYear','runtimeMinutes'])\n\n#Untuk memastikan bahwa sudah tidak ada lagi nilai NULL\nprint(movie_rating_df.info())","4cf92bb8":"C = movie_rating_df['averageRating'].mean()\nprint(C)","46bdeb2b":"#Mengambil numVotes di atas 80% populasi\nm = movie_rating_df['numVotes'].quantile(0.8)\nprint(m)","996f1c81":"#Membuat Fungsi Weighted Rating\ndef imdb_weighted_rating(df, var=0.8):\n    v = df['numVotes']\n    R = df['averageRating']\n    C = df['averageRating'].mean()\n    m = df['numVotes'].quantile(var)\n    df['score'] = (v\/(m+v))*R + (m\/(m+v))*C #Rumus IMDb \n    return df['score']\n    \nimdb_weighted_rating(movie_rating_df)\n\n#melakukan pengecekan dataframe\nprint(movie_rating_df.head())","d8bd453b":"#Membuat fungsi simple_recommender\ndef simple_recommender(df, top=100):\n    df = df.loc[df['numVotes'] >= m] #Filter numVotes yang lebih dari m\n    df = df.sort_values(by='score', ascending=False) #urutkan dari nilai tertinggi ke terendah\n    \n    #Ambil data 100 teratas\n    df = df[:top]\n    return df\n    \n#Ambil data 25 teratas     \nprint(simple_recommender(movie_rating_df, top=25))","5086bfd5":"df = movie_rating_df.copy()\n\ndef user_prefer_recommender(df, ask_adult, ask_start_year, ask_genre, top=100):\n    #ask_adult = yes\/no\n    if ask_adult.lower() == 'yes':\n        df = df.loc[df['isAdult'] == 1]\n    elif ask_adult.lower() == 'no':\n        df = df.loc[df['isAdult'] == 0]\n\n    #ask_start_year = numeric\n    df = df.loc[df['startYear'] >= int(ask_start_year)]\n\n    #ask_genre = 'all' atau yang lain\n    if ask_genre.lower() == 'all':\n        df = df\n    else:\n        def filter_genre(x):\n            if ask_genre.lower() in str(x).lower():\n                return True\n            else:\n                return False\n        df = df.loc[df['genres'].apply(lambda x: filter_genre(x))]\n\n    df = df.loc[df['numVotes'] >= m] #Mengambil film dengan m yang lebih besar dibanding numVotes\n    df = df.sort_values(by='score', ascending=False)\n    \n    #jika kamu hanya ingin mengambil 100 teratas\n    df = df[:top]\n    return df\n#Menampilkan rekomendasi movie melakukan filter berdasarkan isAdult, startYear, dan genres.\nprint(user_prefer_recommender(df,\n                              ask_adult = 'no',\n                              ask_start_year = 2000,\n                              ask_genre = 'drama'\n                             ))","f3befaa4":"**Membuang Data dengan Nilai NULL pada Kolom genres**","da173d0b":"# Cleaning Table Ratings","ce83cd26":"**Membuang Data dengan Nilai NULL**","4ca8cf0a":"Formula dari IMDB dengan Weighted Rating\n \nweighted rank (WR) = (v \u00f7 (v+m)) \u00d7 R + (m \u00f7 (v+m)) \u00d7 C\n\ndimana,\n\nv: jumlah votes untuk film tersebut,\nm: jumlah minimum votes yang dibutuhkan supaya dapat masuk dalam chart,\nR: rata-rata rating dari film tersebut,\nC: rata-rata jumlah votes dari seluruh semesta film.","83da5687":"**Membuat Simple Recommender System dengan User Preferences**","6f547285":"**Membuat Fungsi Weighted Formula**","6df10009":"# Cleaning Table Movie","268f5bc2":"**Mengubah Nilai '\\\\N'**","8185be6c":"**Inner Join Table Movie dan Table Rating**","5e1b9faf":"# Import Library dan File Unloading","3ea6b1f3":"**Memperkecil Ukuran Table**","a49c9fa2":"Analisis Kolom dengan data bernilai NULL","9273e5a3":"**Mencari Nilai dari C yang Merupakan Rata-Rata dari averageRating**","1aa20bd9":"# Joining Table Movie and Table Ratings","2d816a25":"**Mengubah Nilai Genres menjadi List**","f88887ae":"**Membuat Simple Recommender System**","36008d17":"**Mencari Nilai m**","3e732daa":"# Building Simple Recommender System","6b6a6f11":"**Analisis Kolom dengan data bernilai NULL dari kolom genres**"}}