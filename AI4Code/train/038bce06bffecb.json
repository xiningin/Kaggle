{"cell_type":{"05575da1":"code","4a07a583":"code","d125da1c":"code","4341b11c":"code","ae16c945":"code","ca8b0408":"code","1e98833a":"code","647b9069":"code","1a1aaf6c":"code","55851900":"code","ae8cb18b":"code","f5b8f079":"code","680df2b6":"code","aa2639ae":"code","c6d60596":"code","42e3f5e9":"code","50f7d59c":"markdown","2a33d358":"markdown","c4478fb8":"markdown","d00b432d":"markdown","05965602":"markdown","cc07ad30":"markdown","460edef5":"markdown","3d431ef8":"markdown","30270cdc":"markdown","7e2f7db9":"markdown","46d0aedb":"markdown"},"source":{"05575da1":"# Built-ins\nimport os\nimport warnings; warnings.filterwarnings('ignore')\n\n# Bread n' butter\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt","4a07a583":"# Settings up variables\nPATH = '\/kaggle\/input'\nDATASET_NAME = 'amazon-questionanswer-dataset'\n\n# Dataset filenames\nSINGLE_QNA = 'single_qna.csv'\nMULTI_QUESTIONS = 'multi_questions.csv'\nMULTI_ANSWERS = 'multi_answers.csv'","d125da1c":"single_qna = pd.read_csv(os.path.join(PATH, DATASET_NAME, SINGLE_QNA))","4341b11c":"# Looking into the dataframe\nsingle_qna.sample(5)","ae16c945":"single_qna.info()","ca8b0408":"print('Number of unique products: {}'.format(single_qna.Asin.nunique()))","1e98833a":"# Heatmap of the nulls\nplt.figure(figsize=(10, 10))\nsns.heatmap(pd.isna(single_qna))\nplt.title('Heatmap of nulls in the dataframe!')\nplt.show()","647b9069":"# Selecting rows that have proper datetime info\ndf = single_qna[~single_qna.AnswerTime.str.contains('ago')]\n# Creating new attribute called 'Date' of type datetime\ndf['Date'] = pd.to_datetime(df.AnswerTime)\n\nprint('Minimum and Maximum datetime is {} & {} respectively.'.format(df.Date.min(), df.Date.max()))","1a1aaf6c":"temp = df.sort_values(by='Date').groupby('Date').count().reset_index()\ntemp = temp[['Date', 'Asin']]\ntemp.head()","55851900":"fig = px.line(temp, 'Date', 'Asin', title='Number of answers over time')\nfig.update_layout(\n    xaxis_title='Time',\n    yaxis_title='Number of Question\/Answers'\n)","ae8cb18b":"fig = px.bar(single_qna.Category.value_counts(), title='Category wise count')\nfig.update_layout(\n    showlegend=False,\n    xaxis_title='Categories',\n    yaxis_title='Count'\n)","f5b8f079":"x = single_qna.QuestionType.value_counts()\nfig = px.bar(x, color=x.values, title='Value counts of QuestionTypes')\nfig.update_coloraxes(showscale=False)\n\nkwargs = {'xaxis_title': '<b>QuestionType<\/b>', 'yaxis_title': '<b>Count<\/b>'}\nfig.update_layout(**kwargs)","680df2b6":"x = single_qna.AnswerType.value_counts()\nfig = px.bar(x, color=x.values, title='Value counts of AnswerTypes')\nfig.update_coloraxes(showscale=False)\n\nkwargs = {'xaxis_title': '<b>AnswerType<\/b>', 'yaxis_title': '<b>Count<\/b>'}\nfig.update_layout(**kwargs)","aa2639ae":"# Reading multi_questions.csv\nmulti_questions = pd.read_csv(os.path.join(PATH, DATASET_NAME, MULTI_QUESTIONS))\n\n# Reading multi_answers.csv\nmulti_answers = pd.read_csv(os.path.join(PATH, DATASET_NAME, MULTI_ANSWERS))","c6d60596":"complete = pd.merge(multi_questions, multi_answers, on='QuestionID')","42e3f5e9":"complete.info()","50f7d59c":"# `single_qna.csv`\n\nReading the `single_qna.csv` dataset","2a33d358":"Why not make a plot of `time` vs. `count` instead of boring strings!!","c4478fb8":"## Joining the two dataset using `QuestionID`","d00b432d":"In some cases, the `AnswerTime` attribute contains values such as `x days ago`, which of course we cannot convert to `datetime`, so excluding those rows, casting the `AnswerTime` row to `datetime`","05965602":"#### Value counts of `AnswerType`","cc07ad30":"## Cheers!!!\n\nAnd just like that we're ready for all sorts of exploration, we haven't even scratched the surface. There's a lot of potential in this dataset. Looking forward to some amazing notebooks.\n\nMake sure to upvote the dataset, if you find it interesting. \u2764\ufe0f","460edef5":"#### Value counts of `QuestionType`","3d431ef8":"# `multi_questions.csv` & `multi_answers.csv`\n\nThese datasets are split up since, one question may have multiple answers, but we can very easily join them using `pandas.merge`","30270cdc":"### Basic lookup","7e2f7db9":"Heatmap of the nulls in the `single_qna.csv` dataset","46d0aedb":"#### Number of Question\/Answers for each `Category`"}}