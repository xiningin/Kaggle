{"cell_type":{"2e70ab08":"code","63cd05d4":"code","6551f274":"code","6cea9816":"code","89f511f7":"code","e756fd1a":"code","63c23b33":"code","10d17417":"code","3bfde127":"code","92aebb8c":"code","9ec324bd":"code","479d468d":"code","f9dee0f2":"code","889e66ba":"code","128d4889":"code","94f5753a":"code","d803e8f5":"code","a548f05b":"code","d9c12c0e":"code","401bc67f":"code","948b4358":"code","eb6f38d4":"code","2a8d982e":"code","26eea75c":"code","cdb39127":"code","50f22ca1":"code","0a40ae0d":"code","834f6685":"code","8d8fc59a":"code","4f0365f0":"code","d0772b7e":"code","b5454a48":"code","6c6b764c":"code","0b7597ab":"code","666c78e7":"code","d1b9af5c":"code","551d4fc9":"code","c36069c3":"code","f9966714":"code","c8cd35ea":"code","e7b8624d":"markdown","2491d72a":"markdown","5ca9c322":"markdown","ea13c761":"markdown","0939d27a":"markdown","8777a2d7":"markdown","41d4b3fd":"markdown","052e8854":"markdown","a419aa57":"markdown","fd3fd24d":"markdown","e6e03617":"markdown","c56cb3d1":"markdown","06ac6ad4":"markdown","a5b9f9e2":"markdown","92196820":"markdown","85dee7d0":"markdown","0e06c716":"markdown"},"source":{"2e70ab08":"# import first\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n# change the style from the very beging\nplt.style.use('ggplot')\n%matplotlib inline\n","63cd05d4":"dataset = pd.read_csv(\"\/kaggle\/input\/churns\/churn_train.csv\")\ndataset.head()","6551f274":"dataset.dtypes","6cea9816":"dataset['Customer ID']= dataset['Customer ID'].str.strip(\"ADF\") ","89f511f7":"dataset.describe()","e756fd1a":"#dataset.drop(['Customer ID','network_age','Customer tenure in month'],inplace=True,axis=1)","63c23b33":"dataset.isna().sum()","10d17417":"dataset=pd.get_dummies(dataset,columns=['Most Loved Competitor network in in Month 1','Most Loved Competitor network in in Month 2','Network type subscription in Month 1','Network type subscription in Month 2'] )\nfeatures=dataset.drop(['Churn Status'],axis=1)\ngoal=dataset['Churn Status']\nfeatures","3bfde127":"#standrize the values\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nfeatures = pd.DataFrame(scaler.fit_transform(features),columns=features.columns)\nfeatures\n\n","92aebb8c":"# split into train and test\nfrom sklearn.model_selection import train_test_split\ntrain_set, test_set, goal_train, goal_test = train_test_split(features,goal,test_size =0.2,random_state=0)","9ec324bd":"from sklearn.linear_model import LogisticRegression\nlogistic = LogisticRegression(random_state = 0,solver='lbfgs',multi_class='auto')\nlogistic.fit(train_set, goal_train)","479d468d":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(goal_test, logistic.predict(test_set))\npd.DataFrame(cm)\n","f9dee0f2":"print(logistic.score(train_set, goal_train))\nprint(logistic.score(test_set, goal_test))\n","889e66ba":"# split into train and test\nfrom sklearn.model_selection import train_test_split\ntrain_set, test_set, goal_train, goal_test = train_test_split(features,goal,test_size =0.2,random_state=0)","128d4889":"from sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\n\naccs_test = []\naccs_train = []\nks = np.linspace(1, 30, 30)\nfor K in ks:\n    classifier = KNeighborsClassifier(n_neighbors=int(K))\n    classifier.fit(train_set, goal_train)\n    cm = confusion_matrix(goal_test, classifier.predict(test_set))\n    accs_train.append(classifier.score(train_set, goal_train))\n    accs_test.append(classifier.score(test_set, goal_test))","94f5753a":"plt.plot(ks, accs_train, label='train_acc')\nplt.plot(ks, accs_test, label='test_acc')\nplt.legend()\nplt.title(\"accuracy versus K\")","d803e8f5":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 1)\nclassifier.fit(train_set, goal_train)","a548f05b":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(goal_test, classifier.predict(test_set))\npd.DataFrame(cm)","d9c12c0e":"print(\"model accuracy on train: {:.4f}\".format(classifier.score(train_set, goal_train)))\nprint(\"model accuracy on test: {:.4f}\".format(classifier.score(test_set, goal_test)))","401bc67f":"# split into train and test\nfrom sklearn.model_selection import train_test_split\ntrain_set, test_set, goal_train, goal_test = train_test_split(features,goal,test_size =0.2,random_state=0)","948b4358":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(train_set, goal_train)","eb6f38d4":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(goal_test, classifier.predict(test_set))\nprint(classifier.score(train_set, goal_train))\n\nprint(classifier.score(test_set, goal_test))\n\npd.DataFrame(cm)","2a8d982e":"# split into train and test\nfrom sklearn.model_selection import train_test_split\ntrain_set, test_set, goal_train, goal_test = train_test_split(features,goal,test_size =0.2,random_state=0)","26eea75c":"from sklearn.naive_bayes import BernoulliNB","cdb39127":"clf = BernoulliNB()\nclf.fit(train_set, goal_train)\nclf.predict(test_set)\n\n\nprint(clf.score(train_set, goal_train))\nclf.score(test_set, goal_test)","50f22ca1":"test_dataset1= pd.read_csv(\"\/kaggle\/input\/churns\/churn_test.csv\")\ntest_dataset1","0a40ae0d":"test_dataset=pd.get_dummies(test_dataset1,columns=['Most Loved Competitor network in in Month 1','Most Loved Competitor network in in Month 2','Network type subscription in Month 1','Network type subscription in Month 2'] )\n","834f6685":"test_dataset['Customer ID']= test_dataset['Customer ID'].str.strip(\"ADF\") \n#test_dataset['Network type subscription in Month 1_2']=0\n#test_dataset['Network type subscription in Month 2_2']=0","8d8fc59a":"#standrize the values\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ntest_dataset = pd.DataFrame(scaler.fit_transform(test_dataset),columns=test_dataset.columns)\ntest_dataset","4f0365f0":"test_dataset.columns","d0772b7e":"test_dataset","b5454a48":"features=features.drop(['Network type subscription in Month 1_2','Network type subscription in Month 2_2'],axis=1)\n# split into train and test\nfrom sklearn.model_selection import train_test_split\ntrain_set, test_set, goal_train, goal_test = train_test_split(features,goal,test_size =0.2,random_state=0)","6c6b764c":"from sklearn.linear_model import LogisticRegression\nlogistic = LogisticRegression(random_state = 0,solver='lbfgs',multi_class='auto')\nlogistic.fit(train_set, goal_train)","0b7597ab":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(goal_test, logistic.predict(test_set))\nprint(logistic.score(train_set, goal_train))\nprint(logistic.score(test_set, goal_test))\npd.DataFrame(cm)\n","666c78e7":"ex=pd.read_csv('\/kaggle\/input\/churns\/sample submission.csv')\nex.dtypes","d1b9af5c":"sub=pd.DataFrame({'Customer ID':test_dataset1.loc[:,'Customer ID'],'Churn Status':logistic.predict(test_dataset)})","551d4fc9":"sub['Customer ID'] = dataset['Customer ID'].str.replace(\"ADF\",\"\").astype(int)\nsub.sort_values(by='Customer ID')\n       ","c36069c3":"sub['Customer ID'] = sub['Customer ID'].astype(str)","f9966714":"for i in range(0,600,1):\n    if int(sub.loc[i,'Customer ID']) < 100:\n        sub.loc[i,'Customer ID'] = 'ADF00'+ sub.loc[i,'Customer ID']\n    elif int(sub.loc[i,'Customer ID'])<1000:\n        sub.loc[i,'Customer ID'] = 'ADF0'+ sub.loc[i,'Customer ID']\n    else:\n        sub.loc[i,'Customer ID'] = 'ADF'+ sub.loc[i,'Customer ID']\nsub","c8cd35ea":"sub.to_csv('submission.csv',index=False)","e7b8624d":"# Naive Bayes classification Tutorial","2491d72a":"## let's build our model\n","5ca9c322":"# The best accuracy occured in Logistic Regression","ea13c761":"# K-Nearest-Neighbor classification ","0939d27a":"## Handling the missing data","8777a2d7":"## let's get the accuracy","41d4b3fd":"## Well,, we need to evaluate that model !\n## Let's use the confusion Matrix","052e8854":"# Predict if a customer will leave the company !\n\nusing the [chrurn dataset](https:\/\/www.kaggle.com\/filemide\/churns#churn_train.csv) investigate the features and there affect on the customer.\n\nthen build a logistic regression classifier to predict if a given customer will churn or not !\n\n![churn](\/kaggle\/input\/churns\/17328.329f1e71.630x354o.926138c0f9412x.jpeg)","a419aa57":"# Logistic Regression","fd3fd24d":"## Time for the model !","e6e03617":"### Drop uneeded colmuns :","c56cb3d1":"## now we need to seperate the dependant and independent variables","06ac6ad4":"## take a look at the confusion matrix","a5b9f9e2":"## Let's see the confusion matrix first ","92196820":"# Cleaning and preprocessing:","85dee7d0":"### First let's import our dataset and take a look to it.","0e06c716":"# `Bernoulli`\n"}}