{"cell_type":{"507e1eb0":"code","3e58bce2":"code","561dbfeb":"code","0dabda63":"code","b2fc8b4b":"code","d252fa8c":"code","37a9a3cb":"code","dfdee1e0":"code","66956c1e":"code","68858b26":"code","a84832f0":"code","387ed588":"code","a000c6b0":"code","a2206962":"code","9c8239ed":"code","bf705a44":"code","91933736":"code","2ec6c8a6":"code","ad8a77ab":"code","185b2b8b":"code","3980a8ec":"code","1be6909e":"code","1acffe8b":"code","24a745a4":"code","06e6762e":"code","a9b8bc44":"code","e7ee3944":"code","3e8c4286":"code","93fc1007":"code","6dbbe412":"code","698be5fa":"code","fad436fb":"code","c340d8e3":"code","fdfc2da2":"code","cc837ca7":"code","cfa0f2b3":"code","a91b73f8":"code","eae90b3b":"code","ba52cff9":"code","8354196f":"code","08d7883b":"code","a278246d":"code","d96b4a2c":"code","f5801ee4":"code","66e0384a":"code","e946a96d":"code","22fdb01a":"code","f9bcec8a":"code","613f2cdd":"code","231b9a54":"code","96466d55":"code","c56562cc":"code","e708e90e":"code","1cfd05f7":"code","08b0dc82":"code","99541554":"code","bc5bce91":"code","ed822014":"code","eaa89bfa":"code","122b4b75":"code","11b026ab":"code","e4bfe39f":"code","07d78245":"code","034a7032":"code","a89fd967":"code","a712c106":"markdown","852ef41c":"markdown","dda0ac5e":"markdown","81266df0":"markdown","900e01b5":"markdown","d0545ddf":"markdown","67636907":"markdown","c924d444":"markdown","c2874a92":"markdown","90dd73c8":"markdown","8cf32ced":"markdown","5f3f4539":"markdown","9fa1bc23":"markdown","9a13a8c6":"markdown","eccfaef3":"markdown","cbcb4bb2":"markdown","6445bb68":"markdown","d9411989":"markdown","0a5458fa":"markdown","8c9674f7":"markdown","47d5e479":"markdown","497884e5":"markdown","d552d94a":"markdown","694cc29f":"markdown","9f2bb855":"markdown","8b862f60":"markdown","ab13b067":"markdown","9b6af3bd":"markdown","2eff2ba0":"markdown","4a62e255":"markdown","2797a06f":"markdown","a33d367e":"markdown","8a2da74e":"markdown","16b99334":"markdown","887d2902":"markdown","84a89b03":"markdown","945679a4":"markdown","d22080e7":"markdown","35550270":"markdown","f6703e7f":"markdown","49ee8ec9":"markdown","f2e51c98":"markdown","b1177686":"markdown","a9595207":"markdown"},"source":{"507e1eb0":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3e58bce2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","561dbfeb":"url='..\/input\/pfizer-vaccine-tweets\/vaccination_tweets.csv'\ndf=pd.read_csv(url)\ndf.head()","0dabda63":"df.info()","b2fc8b4b":"df.columns","d252fa8c":"df['user_verified']=df['user_verified'].apply(lambda x:'verified' if x==True else 'not_verified')","37a9a3cb":"from datetime import date\ndf['today']=date.today()\ndf['user_created']=pd.to_datetime(df['user_created']).dt.year\ndf['today']=pd.to_datetime(df['today'])\ndf['today']=df['today'].dt.year\ndf['acc_age']= df['today']-df['user_created']","dfdee1e0":"print(max(df['date']))\nprint(min(df['date']))","66956c1e":"df['date']=pd.to_datetime(df['date'])","68858b26":"L = ['year', 'month', 'day', 'dayofweek', 'dayofyear', 'weekofyear', 'quarter']\ndf = df.join(pd.concat((getattr(df['date'].dt, i).rename(i) for i in L), axis=1))","a84832f0":"df['total_engagement']=df['retweets']+df['favorites']","387ed588":"df['text'].values[:2]","a000c6b0":"df['tweet_lenght']=df['text'].apply(lambda x:len(x))\ndf['tweet_lenght'].describe()","a2206962":"df['tweet_length']=df['text'].apply(lambda x:'short' if len(x)<=130 else 'long')","9c8239ed":" df['user_location'].value_counts()","bf705a44":"loc_df = df['user_location'].str.split(',',expand=True)\nloc_df=loc_df.rename(columns={0:'first_loc',1:'second_loc'})","91933736":"# Remove Spaces \nloc_df['second_loc'] = loc_df['second_loc'].str.strip()\n# Rename States \nstate_fix = {'Ontario': 'Canada','United Arab Emirates': 'UAE','TX': 'USA','NY': 'USA'\n                  ,'FL': 'USA','England': 'UK','Watford': 'UK','GA': 'USA','IL': 'USA'\n                  ,'Alberta': 'Canada','WA': 'USA','NC': 'USA','British Columbia': 'Canada','MA': 'USA','ON':'Canada'\n            ,'OH':'USA','MO':'USA','AZ':'USA','NJ':'USA','CA':'USA','DC':'USA','AB':'USA','PA':'USA','SC':'USA'\n            ,'VA':'USA','TN':'USA','New York':'USA','Dubai':'UAE','CO':'USA'}\nloc_df = loc_df.replace({\"second_loc\": state_fix}) \nloc_df['second_loc'].value_counts()[:20]","2ec6c8a6":"df['Hash'] = df['text'].apply(lambda word:word.count('#'))","ad8a77ab":"df['Men'] = df['text'].apply(lambda word:word.count('@'))","185b2b8b":"#('https:\/\/t.co\/) this part in tweets refers to photos,videos\ndf['med'] = df['text'].apply(lambda word:word.count('https:\/\/t.co\/'))\ndf['med'] = df['med'].apply(lambda x:'No Media' if x==0 else 'Media')","3980a8ec":"df['user_followers'].value_counts()","1be6909e":"df['acc_class'] = df['user_followers'].apply(lambda x:'weak'if x<=100 else ('norm' if 1000>=x>100 else \n                                                                       ('strong' if 10000>=x>1000\n                                                                        else 'influencer')))\ndf.head()","1acffe8b":"df.columns","24a745a4":"df=df[['user_name','text','date', 'acc_age','user_verified','retweets','favorites','total_engagement', 'day', 'tweet_length',\n       'Hash', 'Men', 'med', 'acc_class','month']]\ndf_copy=df.copy()\ndf.head()","06e6762e":"corr=df.corr()\nplt.figure(figsize=(10,7))\nsns.heatmap(corr,annot=True)","a9b8bc44":"plt.figure(figsize=(7,7))\nsns.countplot(x='tweet_length',data=df);","e7ee3944":"plt.figure(figsize=(7,7))\nsns.barplot(x=df['Hash'],y=df['tweet_length'],data=df);","3e8c4286":"plt.figure(figsize=(7,7))\nsns.barplot(x=df['tweet_length'],y=df['Men'],data=df);","93fc1007":"df['user_verified'].value_counts()","6dbbe412":"labels = 'not_verified', 'verified'\nsizes = [1888, 319]\nexplode = (0.1, 0)  \nplt.figure(figsize=(10,5))\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90);\nplt.axis('equal');","698be5fa":"class_eng = df.groupby('acc_class',as_index=False).agg({'total_engagement':'sum',})","fad436fb":"fig = px.bar(class_eng,\n             x='acc_class',\n             y='total_engagement',\n             color='total_engagement',\n             color_continuous_scale='Rainbow',\n             title='Engagement By Account_Class')\nfig.show()","c340d8e3":"Media = len(df[df['med']=='Media'])\nNo_Media = len(df[df['med']=='No Media'])\nPlatform = ['Media','No Media']\nCount = [Media,No_Media]\n#====\nfig = px.pie(names = Platform,\n             values = Count,\n             title='Media\/No Media',\n            color_discrete_sequence = px.colors.sequential.Rainbow)\nfig.update_traces(textposition='inside', textinfo='percent+label')","fdfc2da2":"line = df.groupby('date',as_index=False).agg({'total_engagement':'sum'})\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=line.date, y=line.total_engagement,\n                    mode='lines+markers'))","cc837ca7":"december=df.loc[df['month']==12]\nday_december = december.groupby('day',as_index=False).agg({'total_engagement':'sum'})\n\nfig = px.scatter(day_december,\n                 x='day',\n                 y='total_engagement',\n                 color_continuous_scale='Rainbow',\n                 color='total_engagement',\n                 size='total_engagement',\n                 title='Most engaged days in December')\nfig.show()\n","cfa0f2b3":"ret = df.groupby('user_name',as_index=False).agg({'retweets':'sum'}).sort_values('retweets',ascending=False).head(10)\nlike = df.groupby('user_name',as_index=False).agg({'favorites':'sum'}).sort_values('favorites',ascending=False).head(10)\ntot_eng = df.groupby('user_name',as_index=False).agg({'total_engagement':'sum'}).sort_values('total_engagement',ascending=False).head(10)\n\n\nfig = px.bar(tot_eng,\n             x='user_name',\n             y='total_engagement',\n             color='total_engagement',\n             color_continuous_scale='Viridis',\n             title='Accounts per Engagements')\nfig.show()","a91b73f8":"age=df.groupby('acc_age',as_index=False).agg({'total_engagement':'sum'})\npx.line(age,x='acc_age',y='total_engagement',labels={'x':'age','y':'engagement'})","eae90b3b":"import seaborn as sns \nplt.figure(figsize=(14,7))\nsns.countplot(x='acc_age',data=df_copy);","ba52cff9":"df3=pd.DataFrame(loc_df['second_loc'].value_counts()[:20]).reset_index()\ndf3","8354196f":"fig = px.choropleth(df3, locations = df3['index'],\n                    color = df3['second_loc'],locationmode='country names',hover_name = df3['second_loc'], \n                    color_continuous_scale = px.colors.sequential.Inferno)\nfig.update_layout(title='Sales tracking')\nfig.show()","08d7883b":"tweets = df['text']","a278246d":"all_sentences = []\n\nfor word in tweets:\n    all_sentences.append(word)\n\nall_sentences\n\nlines = list()\nfor line in all_sentences:    \n    words = line.split()\n    for w in words: \n       lines.append(w)","d96b4a2c":"import re\n\nlines = [re.sub(r'[^A-Za-z0-9]+', '', x) for x in lines]\n\nlines\n\nlines2 = []\n\nfor word in lines:\n    if word != '':\n        lines2.append(word)","f5801ee4":"#This is stemming the words to their root\nfrom nltk.stem.snowball import SnowballStemmer\n\n# The Snowball Stemmer requires that you pass a language parameter\ns_stemmer = SnowballStemmer(language='english')\n\nstem = []\nfor word in lines2:\n    stem.append(s_stemmer.stem(word))","66e0384a":"import spacy\nnlp = spacy.load('en_core_web_lg')","e946a96d":"stem2 = []\n\nfor word in stem:\n    if word not in nlp.Defaults.stop_words:\n        stem2.append(word)","22fdb01a":"df = pd.DataFrame(stem2)\ndf = df[0].value_counts()","f9bcec8a":"df = df[:20,]\npx.bar(df, x=df.values,y= df.index, color=df.index, height=500)","613f2cdd":"import spacy\nfrom spacy import displacy\nfrom collections import Counter\nimport en_core_web_sm\nnlp = en_core_web_sm.load()","231b9a54":"def show_ents(doc):\n    if doc.ents:\n        for ent in doc.ents:\n            print(ent.text + ' - ' + ent.label_ + ' - ' + str(spacy.explain(ent.label_)))","96466d55":"nlp = spacy.load('en_core_web_sm') \nnlp.max_length = 2000000000000","c56562cc":"str1 = \" \" \nstem2 = str1.join(lines2)\n\nstem2 = nlp(stem2)\n\nlabel = [(X.text, X.label_) for X in stem2.ents]\n\ndf6 = pd.DataFrame(label, columns = ['Word','Entity'])\n\ndf7 = df6.where(df6['Entity'] == 'ORG')\n\ndf7 = df7['Word'].value_counts()","e708e90e":"df = df7[:20,]\nplt.figure(figsize=(10,5))\npx.bar(df, x=df.values,y= df.index, color=df.index, height=500)\n","1cfd05f7":"nlp = spacy.load('en_core_web_sm') \nnlp.max_length = 2000000000000\n\nstr1 = \" \" \nstem2 = str1.join(lines2)\n\nstem2 = nlp(stem2)\n\nlabel = [(X.text, X.label_) for X in stem2.ents]\n\ndf10 = pd.DataFrame(label, columns = ['Word','Entity'])\n\ndf10 = df10.where(df10['Entity'] == 'PERSON')\n\ndf11 = df10['Word'].value_counts()","08b0dc82":"df = df11[:20,]\n\nplt.figure(figsize=(10,5))\n\ndf = df11[:20,]\nplt.figure(figsize=(10,5))\npx.bar(df, x=df.values,y= df.index, color=df.index, height=500)\n","99541554":"features=tweets.values\nfeatures","bc5bce91":"processed_features = []\n\nfor sentence in range(0, len(features)):\n    # Remove all the Http: urls\n    processed_feature = re.sub('(https?:\/\/\\S+)', '', str(features[sentence]))\n    \n    # Remove all the special characters\n    processed_feature = re.sub(r'\\W', ' ', processed_feature)\n\n    # Remove all single characters\n    processed_feature= re.sub(r'\\s+[a-zA-Z]\\s+', ' ', processed_feature)\n\n    # Remove single characters from the start\n    processed_feature = re.sub(r'\\^[a-zA-Z]\\s+', ' ', processed_feature) \n\n    # Substituting multiple spaces with single space\n    processed_feature = re.sub(r'\\s+', ' ', processed_feature, flags=re.I)\n\n    # Removing prefixed 'b'\n    processed_feature = re.sub(r'^b\\s+', '', processed_feature)\n\n    # Converting to Lowercase\n    processed_feature = processed_feature.lower()\n\n    processed_features.append(processed_feature)","ed822014":"features[:5]","eaa89bfa":"processed_features[:5]","122b4b75":"df3=pd.DataFrame()\ndf3['Tweets']=processed_features","11b026ab":"from textblob import TextBlob\nfrom wordcloud import WordCloud\n# Create a function to get the subjectivity\ndef getSubjectivity(text):\n   return TextBlob(text).sentiment.subjectivity\n\n# Create a function to get the polarity\ndef getPolarity(text):\n   return  TextBlob(text).sentiment.polarity\n\n\n# Create two new columns 'Subjectivity' & 'Polarity'\ndf3['Subjectivity'] = df3['Tweets'].apply(getSubjectivity)\ndf3['Polarity'] = df3['Tweets'].apply(getPolarity)\n\n# Show the new dataframe with columns 'Subjectivity' & 'Polarity'\ndf3","e4bfe39f":"# Create a function to compute negative (-1), neutral (0) and positive (+1) analysis\ndef getAnalysis(score):\n if score < 0:\n  return 'Negative'\n elif score == 0:\n  return 'Neutral'\n else:\n  return 'Positive'\ndf3['Analysis'] = df3['Polarity'].apply(getAnalysis)\ndf3","07d78245":"Neutral = len(df3[df3['Analysis']=='Neutral'])\nNegative = len(df3[df3['Analysis']=='Negative'])\nPositive = len(df3[df3['Analysis']=='Positive'])\nlabels = ['Negative','Positive','Neutral']\nvalues = [Negative,Positive,Neutral]\n\nimport plotly.graph_objects as go\ncolors = ['darkred','green', 'darkblue' ]\n\nfig = go.Figure(data=[go.Pie(labels=labels,\n                             values=values)])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent', textfont_size=20,textposition='inside',\n                  marker=dict(colors=colors, line=dict(color='grey', width=1)))\nfig.show()","034a7032":"df_copy['sentiment'] = df3['Analysis']\n\nplt.figure(figsize=(10,5))\nsns.set(style=\"darkgrid\")\nsns.countplot(x=df_copy['acc_class'],data=df_copy,hue=df_copy['sentiment'],palette=\"rocket\")","a89fd967":"sen_eng = df_copy.groupby('sentiment',as_index=False).agg({'total_engagement':'sum'})\nfig = px.bar(sen_eng, x='total_engagement', y='sentiment',\n             hover_data=['total_engagement'], color='total_engagement', height=400)\nfig.show()","a712c106":" ## Does tweet have media or not ","852ef41c":"# Conclusion \n\n* Most of the tweets are long \n* 85% of the accounts aren't verified\n* Short tweets have more hashtags and less mentions \n* Influencers account gets more engagement\n* Pfizer Bio Tech has the highest count with respect to organization followed by COVID 19\n* Moderna has the highest count with respect to people\n* 94% of tweets have media \n* Day 12 of December most engaged day \n* People using twitter for almost 12 years now have the highest engagements of 20.752k\n* Anita Anand get the Highest engagements \n* One year and three years are the most common account age \n* The USA the most tweeted Country followed by Canada\n* Only 10% of tweets are negative \n* Positive and neutral tweets get high engagements ","dda0ac5e":"# Top Mention People ","81266df0":"## Mentions Count","900e01b5":"# Verified Accounts","d0545ddf":"## Hashtags Count","67636907":"# Transform Data Frame","c924d444":"## Getting Words roots","c2874a92":"## Tweet Lenght Calss\n**short < mean < long**","90dd73c8":"**Norm acc class has the highest positive and negative sentiment count compared to other acc classes which is followed by strong.**","8cf32ced":"## Location\/Tweets","5f3f4539":"## Removing Punctuation","9fa1bc23":"## Get keywords out of tweets","9a13a8c6":"## Days of December","eccfaef3":"## Accounts per Engagements","cbcb4bb2":"## Tweet length \/ Hashtags","6445bb68":"## Top Mention Keywords\n","d9411989":"**Close to 40k of the tweets are from positive sentiments followed by neutral and negative sentiment.**","0a5458fa":"## Days of December","8c9674f7":"## Engagement with respect to Date","47d5e479":"## Length Class ","497884e5":"# Create Sentiment Analysis ","d552d94a":"# Data Preprocessing","694cc29f":"## Country location","9f2bb855":"# Account Class","8b862f60":"# Adding Subjectivity & Polarity","ab13b067":"# Account Followers Class","9b6af3bd":"## Account Age ","2eff2ba0":"# Sentiments Analysis","4a62e255":"## Most of the engagements were from 12 to 14 December.","2797a06f":"## Account age per Engagement","a33d367e":"## Removing all characters from text ","8a2da74e":"# Data Visualization","16b99334":"## Verified Account or Not ","887d2902":"## Tweet length \/ Mentions","84a89b03":"# Tweets NLP Analysis","945679a4":"**Only 14.5% tweets are verified.**","d22080e7":"## Top Mention Organizations","35550270":"### Fixing States with countries Shortcuts","f6703e7f":"# Import Data & Libraries","49ee8ec9":"## Tweet Length\n\nThe tweet length can be no longer than 280 characters\nso let's check tweets length","f2e51c98":"## Media \/ No Media","b1177686":"## Total Engagement","a9595207":"# Fix Country location"}}