{"cell_type":{"7fba3fbf":"code","b8de44ed":"code","bb7664eb":"code","248dfa1f":"code","f46ccc42":"code","41ec641d":"code","88c694ec":"code","4e485013":"code","85e7718e":"code","1e1e6ee0":"code","4c92bf79":"code","415a5b67":"code","6756faf8":"code","215604cb":"code","cd572a7e":"code","69bb2202":"code","b8881e1a":"code","bb7af69e":"code","75705cd7":"code","587e4243":"code","fdbe1a37":"markdown","70359974":"markdown"},"source":{"7fba3fbf":"#Importing all libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer, SimpleImputer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, RepeatedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import (\n    confusion_matrix, plot_confusion_matrix, accuracy_score, precision_score,\n    recall_score, f1_score, plot_roc_curve, plot_precision_recall_curve, precision_recall_curve,\n    roc_auc_score\n)","b8de44ed":"#Dataset\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","bb7664eb":"#print train and test shape\nprint(train.shape)\nprint(test.shape)","248dfa1f":"train.sample(5)","f46ccc42":"X = train.drop(['Survived'], axis=1)\nY = train.Survived","41ec641d":"print(X.shape)\nprint(Y.shape)","88c694ec":"X.sample(5)","4e485013":"test.sample(5)","85e7718e":"train.isnull().sum(axis=0)","1e1e6ee0":"test.isnull().sum(axis=0)","4c92bf79":"pipeline1 = ColumnTransformer([\n    ('drop', 'drop', ['PassengerId', 'Name', 'Cabin', 'Ticket']),\n    ('ageimputer', IterativeImputer(max_iter=10, random_state=27), ['Age', 'Fare']),\n    ('embarkedimputer', SimpleImputer(strategy='most_frequent'), ['Embarked'])],\n    remainder='passthrough'\n)\n\npipeline2 = ColumnTransformer([\n    ('scaler', MinMaxScaler(), [0, 1, 5, 6]),\n    ('onehot', OneHotEncoder(), [2, 3, 4])\n])\n\npipeline = make_pipeline(pipeline1, pipeline2)","415a5b67":"pipeline.fit(X)\nX_train = pipeline.transform(X)\nX_test = pipeline.transform(test)","6756faf8":"pd.DataFrame(X_train).sample(5)","215604cb":"pd.DataFrame(X_test).sample(5)","cd572a7e":"lr = LogisticRegression(penalty='none', verbose=2)\nrr = SGDClassifier(penalty='l2', n_jobs=4, loss='log')\nls = SGDClassifier(penalty='l1', n_jobs=4, loss='log')\nen = SGDClassifier(penalty='elasticnet', n_jobs=4, loss='log')","69bb2202":"metrics.SCORERS.keys()","b8881e1a":"cv = RepeatedKFold(n_splits=5, n_repeats=1, random_state=27)\n\ngrid_ridge_lasso = {\n    'alpha': np.arange(0, 1, 0.05),\n    'learning_rate': np.array(['constant']),\n    'eta0': np.array([0.1, 0.01, 0.001])\n}\n\ngrid_elastic = {\n    'alpha': np.arange(0, 1, 0.05),\n    'l1_ratio': np.arange(0, 1, 0.05),\n    'learning_rate': np.array(['constant']),\n    'eta0': np.array([0.1, 0.01, 0.001])\n}\n\nlr_score = cross_val_score(lr, X_train, Y, cv=cv, scoring='accuracy')\n\nrr_search = GridSearchCV(rr, grid_ridge_lasso, cv=cv, scoring='accuracy')\nrr_score = rr_search.fit(X_train, Y)\n\nls_search = GridSearchCV(ls, grid_ridge_lasso, cv=cv, scoring='accuracy')\nls_score = ls_search.fit(X_train, Y)\n\nen_search = GridSearchCV(en, grid_elastic, cv=cv, scoring='accuracy')\nen_score = en_search.fit(X_train, Y)","bb7af69e":"#print score\nprint(np.mean(lr_score))\nprint(rr_score.best_score_)\nprint(ls_score.best_score_)\nprint(en_score.best_score_)","75705cd7":"predictions = en_score.best_estimator_.predict(X_test)","587e4243":"pd.DataFrame({\n    'PassengerId': test.PassengerId,\n    'Survived': predictions\n}).to_csv('\/kaggle\/working\/submission_titanic_sgd_ls_lr.csv', index=False)","fdbe1a37":"# Models","70359974":"# **Check Missing values**"}}