{"cell_type":{"406077f6":"code","761ec115":"code","eb11ccb8":"code","103c26a9":"code","c9777ab0":"code","fc1b3daf":"code","3bdcc40b":"code","ba5cd229":"code","53ee0cb6":"code","905ae79c":"code","388afd4b":"code","331aecc0":"code","201c0a25":"code","0c86cb88":"code","58990085":"code","98deef31":"code","6f59ca05":"code","37041e48":"code","a6a46c0f":"code","d8488676":"code","41b35ce5":"code","1cbf3476":"code","582eb507":"code","d0311baa":"code","35cf97ab":"code","336dd670":"code","1b24ef65":"code","a754a158":"code","6cfdd489":"code","ac0940aa":"code","b2ccde11":"code","e92a0f27":"code","fc5b203a":"code","18320455":"code","5fa00cd2":"code","fd360636":"code","4895d79c":"markdown","6d0ea1e4":"markdown","3ba87f0b":"markdown","581ed213":"markdown","75a9ea01":"markdown","c3907257":"markdown","a316d240":"markdown","351ab789":"markdown","3c52f219":"markdown","a66a88a9":"markdown","519df41c":"markdown","b23636fc":"markdown","27ed919b":"markdown","4290c713":"markdown","b5bd0ab7":"markdown","35207994":"markdown","ca649ce5":"markdown","ccb6201e":"markdown","5536fd30":"markdown","26c593d5":"markdown","8ea785a5":"markdown","d999fb61":"markdown","b0367f32":"markdown","c6b9320b":"markdown","c75dcee8":"markdown","7a9ad1fa":"markdown","246bbac1":"markdown","bdfe40e9":"markdown","6c5e8ed3":"markdown","f178216f":"markdown","eb6a21d8":"markdown"},"source":{"406077f6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nplt.style.use(\"fivethirtyeight\")\nsns.set_context(\"talk\")\n%matplotlib inline","761ec115":"data = pd.read_csv(\"..\/input\/spotify-dataset-19212020-160k-tracks\/data.csv\")\ngenre_data = pd.read_csv(\"..\/input\/spotify-dataset-19212020-160k-tracks\/data_by_genres.csv\")","eb11ccb8":"data.head()","103c26a9":"genre_data.head()","c9777ab0":"genre_data.shape","fc1b3daf":"data.shape","3bdcc40b":"data['duration_min'] = data['duration_ms']\/60000\ndata['duration_min'] = data['duration_min'].round(2)\ngenre_data['duration_min'] = data['duration_ms']\/60000\ngenre_data['duration_min'] = data['duration_min'].round(2)","ba5cd229":"data.drop(['id','release_date','duration_ms'],inplace=True,axis=1)","53ee0cb6":"data.isnull().sum().sum()","905ae79c":"genre_data.isnull().sum().sum()","388afd4b":"plt.figure(figsize=(15, 8))\nsns.set(style=\"whitegrid\")\ncorr = data.corr()\nsns.heatmap(corr,annot=True,cmap=\"YlGnBu\")","331aecc0":"rel = data[data['year'] >= 2015]\nvariables = ['acousticness', 'danceability', 'energy','instrumentalness', 'key', 'liveness',\n             'loudness', 'speechiness', 'tempo', 'valence']\nyear = range(2015,2021)\n\nfig = plt.figure(figsize=(15,25))\nfor variable,num in zip(variables, range(1,len(variables)+1)):\n    ax = fig.add_subplot(5,2,num)\n    sns.scatterplot(variable, 'popularity', data=rel)\n    plt.title('Relation between {} and Popularity'.format(variable))\n    plt.xlabel(variable)\n    plt.ylabel('Popularity')\nfig.tight_layout(pad=0.5)","201c0a25":"top = data[['name','duration_min']].sort_values('duration_min').tail(10)\nfig = plt.figure(figsize=(15,7))\nplt.bar( top['name'],\n         top['duration_min'],\n         width=0.45,\n         color = ['#e01e37','#da1e37','#c71f37','#bd1f36','#b21e35','#a71e34','#a11d33','#85182a','#6e1423','#641220'])\nplt.xticks(rotation=45,ha='right')\nplt.title('Top 10 songs with highest duration',y=1.1,fontsize=20)\nplt.xlabel('Songs')\nplt.ylabel('Duration (minutes)')","0c86cb88":"!jupyter nbextension enable --py --sys-prefix widgetsnbextension","58990085":"import ipywidgets as widgets\nfrom ipywidgets import HBox, VBox\nfrom IPython.display import display","98deef31":"@widgets.interact_manual(\n    Year = range(1921,2021))\ndef plot(Year = 2020):\n    pop = data[data['year'] == Year]\n    pop = pop[['name','popularity','year']].sort_values('popularity').tail(10)\n    fig = plt.figure(figsize=(15,5))\n    plt.bar( pop['name'],\n             pop['popularity'],\n             width=0.4,\n             color = ['#ffb600','#ffaa00','#ff9e00','#ff9100','#ff8500','#ff7900','#ff6d00','#ff6000','#ff5400','#ff4800'])\n    plt.xticks(rotation=45,ha='right')\n    t = 'Top 10 Most Popular Songs of ' + str(Year)\n    plt.title(t,y=1.1,fontsize=20)\n    plt.xlabel('Songs')\n    plt.ylabel('Popularity (Ranges from 0 to 100)')\n    ax.axes.get_xaxis().set_visible(True)","6f59ca05":"pop = data[['name','popularity']].sort_values('popularity').tail(10)\nfig = plt.figure(figsize=(15,5))\nplt.bar( pop['name'],\n         pop['popularity'],\n         width=0.45,\n         color = ['#ffb600','#ffaa00','#ff9e00','#ff9100','#ff8500','#ff7900','#ff6d00','#ff6000','#ff5400','#ff4800'])\nplt.xticks(rotation=45,ha='right')\nplt.title('Top 10 Most Popular Songs from 1921-2020',y=1.1,fontsize=20)\nplt.xlabel('Songs')\nplt.ylabel('Popularity (Ranges from 0 to 100)')\nax.axes.get_xaxis().set_visible(True)","37041e48":"@widgets.interact_manual(\n    Year = range(1921,2021))\ndef plot(Year = 2020):\n    arpop = data[data['year'] == Year]\n    arpop = pd.DataFrame(arpop.groupby('artists')['popularity'].sum()).sort_values('popularity').tail(10).reset_index()\n    fig = plt.figure(figsize=(15,5))\n    plt.bar( arpop['artists'],\n             arpop['popularity'],\n             width=0.45,\n             color = ['#caf0f8','#ade8f4','#90e0ef','#48cae4','#00b4d8','#0096c7','#0077b6','#023e8a','#03045e','#14213d'])\n    plt.xticks(rotation=45,ha='right')\n    t='Top 10 Most Popular Artists from '+str(Year)\n    plt.title(t,y=1.1,fontsize=20)\n    plt.xlabel('Artists')\n    plt.ylabel('Popularity (Ranges from 0 to 100)')\n    ax.axes.get_xaxis().set_visible(True)","a6a46c0f":"arpop = pd.DataFrame(data.groupby('artists')['popularity'].sum()).sort_values('popularity').tail(10).reset_index()\nfig = plt.figure(figsize=(15,5))\nplt.bar( arpop['artists'],\n         arpop['popularity'],\n         width=0.45,\n         color = ['#caf0f8','#ade8f4','#90e0ef','#48cae4','#00b4d8','#0096c7','#0077b6','#023e8a','#03045e','#14213d'])\nplt.xticks(rotation=45,ha='right')\nplt.title('Top 10 Most Popular Artists from 1921-2020',y=1.1,fontsize=20)\nplt.xlabel('Artists')\nplt.ylabel('Popularity (Ranges from 0 to 100)')\nax.axes.get_xaxis().set_visible(True)","d8488676":"@widgets.interact_manual(\n    Category = ['acousticness','danceability','energy','instrumentalness','liveness','speechiness','tempo'])\ndef plot(Category = 'acousticness'):\n    df = pd.DataFrame(data[[Category,'name']]).sort_values(Category).tail().set_index('name')\n    \n    ax = df.plot(kind='barh', \n          figsize = (8, 5), \n          width = 0.5,\n          color='#75daad')\n    t='Top 5 Songs According to ' + Category\n    plt.title(t,y=1.1,fontsize=20)\n    plt.xlabel(Category)\n    plt.ylabel('Songs')\n    plt.xlim(0.96,1)\n    plt.yticks(fontsize=20)\n    ax.get_legend().remove()","41b35ce5":"df = pd.DataFrame(data[['valence','name']]).sort_values('valence').tail().set_index('name')\nax = df.plot(kind='barh', \n          figsize = (12, 5), \n          width = 0.5,\n          color='#fddb3a')\nt='Top 5 Happiest Songs'\nplt.title(t,y=1.1,fontsize=20)\nplt.xlabel('Valance')\nplt.ylabel('Songs')\nplt.yticks(fontsize=20)\nplt.xlim(0.9975,1)\nax.get_legend().remove()","1cbf3476":"df = pd.DataFrame(data[['valence','name','duration_min']]).sort_values('valence').set_index('name')\ndf = df[df['duration_min']>3].head()\ndf","582eb507":"x=pd.DataFrame(data['artists'].value_counts().head()).reset_index()\nx.columns=['Artists','Song_Count']\nx","d0311baa":"x=pd.DataFrame(data.groupby('artists')['duration_min'].sum())\nx.sort_values('duration_min').tail().reset_index()","35cf97ab":"colors_list = ['#fdc500','#00509d']\nmpl.rcParams['font.size'] = 18.0\nex = pd.DataFrame(data['explicit'].value_counts())\nex['explicit'].plot(kind='pie',\n            figsize=(15, 6),\n            autopct='%1.1f%%', \n            startangle=90,  \n            shadow=True,       \n            labels=None,    \n            pctdistance=1.2, \n            colors=colors_list,\n            )\n\nplt.title('Explicit Content Ratio',y=1.1,fontsize=25) \nplt.axis('equal') \nplt.legend(labels=['No explicit content','Explicit content'], loc='upper left') \nplt.show()","336dd670":"year = pd.DataFrame(data['year'].value_counts())\nyear = year.sort_index()\nax=year.plot(kind='line',figsize=(15,8) ,color='#6f4a8e', linewidth=2)\nplt.title(\"Number of songs released Yearwise\",y=1.05,fontsize=20)\nplt.xlabel('Years')\nplt.ylabel('Count')\nax.axes.get_xaxis().set_visible(True)","1b24ef65":"variables = ['acousticness','danceability','energy','instrumentalness','valence','liveness','speechiness']\ncolor = ['#9B5DE5','#F15BB5','#F8A07B','#FEE440','#7FD09D','#00BBF9','#17F6D8']\ndf= data.groupby('year')[variables].mean().reset_index()\nimport matplotlib.patches as mpatches\nfig = plt.figure(figsize=(15,8))\nl=[]\nfor i in range(len(variables)):\n    x = str(i)\n    x = mpatches.Patch(color=color[i], label=variables[i])\n    l.append(x)\n    plt.plot( 'year',variables[i],data=df,marker='',color=color[i],linewidth=1.3)\nplt.legend(handles=l,bbox_to_anchor=(1,1.2))\nplt.title(\"Trend Analysis Year Wise\",y=1.1,fontsize=25)\nplt.xlabel('Years')","a754a158":"df= data.groupby('year')['tempo'].mean().reset_index()\nfig = plt.figure(figsize=(15,4))\nplt.plot( 'year','tempo',data=df,marker='',color='#12947f',linewidth=1.3)\nplt.title(\"Trend Analysis Year Wise - Tempo \",y=1.1,fontsize=25)\nplt.xlabel('Years')","6cfdd489":"df= data.groupby('year')['loudness'].mean().reset_index()\nfig = plt.figure(figsize=(15,4))\nplt.plot( 'year','loudness',data=df,marker='',color='#00005c',linewidth=1.3)\nplt.title(\"Trend Analysis Year Wise - Loudness \",y=1.1,fontsize=25)\nplt.xlabel('Years')\nplt.ylabel('Loudness (db)')","ac0940aa":"df=data[['acousticness','danceability','energy','instrumentalness','valence','liveness','speechiness']]\ndf['popularity']=pd.DataFrame(data['popularity']\/10).apply(np.floor).astype(int)\ndf['popularity']=df['popularity']*10\ndf=df.groupby('popularity')['acousticness','danceability','energy','instrumentalness','valence','liveness','speechiness'].mean().reset_index()\ncolor1=['#440047','#e11d74','#96bb7c','#fddb3a','#00bcd4','#ff5722','#ffa5b0']\nfig = plt.figure(figsize=(15,8))\nl=[]\nvariables = ['acousticness','danceability','energy','instrumentalness','valence','liveness','speechiness']\nfor i in range(len(variables)):\n    x = str(i)\n    x = mpatches.Patch(color=color1[i], label=variables[i])\n    l.append(x)\n    plt.plot( 'popularity',variables[i],data=df,color=color1[i],linewidth=3,linestyle='--')\nplt.legend(handles=l,bbox_to_anchor=(1,1.43))\nplt.title(\"Trend Analysis Popularity Wise\",y=1.15,fontsize=25)\nplt.xlabel('Popularity')\nplt.ylabel('Values')","b2ccde11":"tempo = data[['tempo','popularity']]\ntempo['popularity']=pd.DataFrame(tempo['popularity']\/10).apply(np.floor).astype(int)*10\ntempo=pd.DataFrame(tempo.groupby('popularity')['tempo'].mean()).reset_index()\nfig = plt.figure(figsize=(15,4))\nplt.plot( 'popularity','tempo',data=tempo,color='red',linewidth=1.3)\nplt.title(\"Trend Analysis Popularity Wise - Tempo \",y=1.1,fontsize=25)\nplt.xlabel('Popularity')\nplt.ylabel('Tempo')","e92a0f27":"loudness = data[['loudness','popularity']]\nloudness['popularity']=pd.DataFrame(loudness['popularity']\/10).apply(np.floor).astype(int)*10\nloudness=pd.DataFrame(loudness.groupby('popularity')['loudness'].mean()).reset_index()\nfig = plt.figure(figsize=(15,4))\nplt.plot( 'popularity','loudness',data=loudness,color='#6f4a8e',linewidth=1.4)\nplt.title(\"Trend Analysis Popularity Wise - Loudness \",y=1.1,fontsize=25)\nplt.xlabel('Popularity')\nplt.ylabel('Loudness (db)')","fc5b203a":"colors_list = ['#d3dbff','#fe91ca']\nmpl.rcParams['font.size'] = 18.0\nmd = pd.DataFrame(data['mode'].value_counts())\nmd['mode'].plot(kind='pie',\n            figsize=(15, 6),\n            autopct='%1.1f%%', \n            startangle=90,  \n            shadow=True,       \n            labels=None,    \n            pctdistance=1.2, \n            colors=colors_list)\n\nplt.title('Mode Ratio',y=1.1,fontsize=25) \nplt.axis('equal') \nplt.legend(labels=['Major','Minor'], loc='upper left') \nplt.show()","18320455":"key = pd.DataFrame(data['key'].value_counts()).reset_index().sort_values('index')\nkey.replace({'index' : { 0 : 'C', 1 : 'C#', 2 : 'D', 3 : 'D#', 4 : 'E', 5 : 'F', 6 : 'F#', \n                        7 : 'G', 8 : 'G#', 9 : 'A', 10 : 'A#', 11 : 'B'}} , inplace=True)\nfig = plt.figure(figsize=(15,6))\nplt.bar( key['index'],\n         key['key'],\n         width=0.45,\n         color = ['#ffa931','#00a8cc'])\nplt.title('Frequency Count For Key',y=1.1,fontsize=20)\nplt.xlabel('Key')\nplt.ylabel('Frequency')\nax.axes.get_xaxis().set_visible(True)","5fa00cd2":"keypop = pd.DataFrame(data.groupby('key')['popularity'].mean()).reset_index()\nkeypop.replace({'key' : { 0 : 'C', 1 : 'C#', 2 : 'D', 3 : 'D#', 4 : 'E', 5 : 'F', 6 : 'F#', \n                        7 : 'G', 8 : 'G#', 9 : 'A', 10 : 'A#', 11 : 'B'}} , inplace=True)\n\nfig = plt.figure(figsize=(15,6))\nplt.bar( keypop['key'],\n         keypop['popularity'],\n         width=0.45,\n         color = ['#844685','#f3c623'])\nplt.title('Key VS Popularity',y=1.1,fontsize=20)\nplt.xlabel('Key')\nplt.ylabel('Popularity')\nax.axes.get_xaxis().set_visible(True)","fd360636":"x=genre_data.sort_values('popularity').tail(10)\nfig = plt.figure(figsize=(15,4))\nplt.bar( x['genres'],\n         x['popularity'],\n         width=0.3,\n         color = ['#9818d6','#ffa41b'])\nplt.title('Genres VS Popularity',y=1.1,fontsize=20)\nplt.xlabel('Genres',fontsize=20)\nplt.ylabel('Popularity',fontsize=20)\nplt.xticks(fontsize=20,rotation=45,ha='right')\nax.axes.get_xaxis().set_visible(True)","4895d79c":"# Trend Analysis Year Wise","6d0ea1e4":"# Artists with Maximum Total Duration of Songs","3ba87f0b":"# Most Happy and Cheerful type of Songs","581ed213":"<h1> Observations <\/h1>\n<ul>\n    <li>Song with highest duration : Brown Noise - 90 Minutes<\/li>\n    <li>Most Popular track from 1921-2020 : Blinding Lights<\/li>\n    <li>Most Popular artist from 1921-2020 : The Beatles<\/li>\n    <li>Artist with Maximum Number of Songs : \u042d\u0440\u043d\u0435\u0441\u0442 \u0425\u0435\u043c\u0438\u043d\u0433\u0443\u044d\u0439<\/li>\n    <li>Artist with Maximum Total Duration of Songs : Miles Davis - 2769.44 min i.e 46.16 hours<\/li>\n    <li>On Spotify, 91.5% of songs are Non-Explicit and 8.5% of songs are Explicit<\/li>\n    <li>Nearly about 2000 songs are added on Spotify each year<\/li>\n    <li>Trend Analysis Year Wise : <\/li>\n    <ul>\n        <li>Gradual decrease in Acousticness and Instrumentalness over the years<\/li>\n        <li>Gradual increase in Energy, Loudness and Tempo over the years<\/li>\n        <li>Not so much change in Danceability, Valence, Liveness and Speechiness is seen recently<\/li>\n    <\/ul>\n    <li>Trend Analysis Popularity Wise : <\/li>\n    <ul>\n        <li>Songs having low values in Instrumentalness, Speechiness, Liveness and Acousticness are more Popular<\/li>\n        <li>Songs having medium values in Valence and Danceability are more Popular <\/li>\n        <li>Songs having high Energy,Loudness and Tempo are more Popular<\/li>\n    <\/ul>\n    <li>On Spotify, 70.9% of songs are with Major Scale and 29.1% of songs are with Minor Scale<\/li>\n    <li>Most Frequent key is C, followed by G<\/li>\n    <li>Keys with Highest Popularities are F#, B, C#<\/li>\n    <li>Most Acoustic Songs : Kali Ghatayen Hain, Portera V\u00e9ia, Nu\u0219a, Donde Te Cache Sola - Remasterizado, Sequent 'C' - Remastered 2018<\/li>\n    <li>Most danceable Song : Funky Cold Medina<\/li>\n    <li>Most Energetic Songs :Suno Suno Tumhen Sunaye, 60' Water, Pac., Soggy Afternoon,Applause as Lionel Hampton Enters - Live,3D Thunderstorm Sound Binaural Recording for Relaxation<\/li>\n    <li>Most Instrumental Songs : Pure Brown Noise - Loopable with no fade, Soft Brown Noise,White Noise: Mindfulness Meditations (Loopable), Cabin Back Noise,White Noise - Loopable With No Fade<\/li>\n    <li>Most Happy or Cheerful Songs  : Electric Zoo, Pasito Duranguense, Chatter<\/li>\n    <li>Most Sad or Depressed Songs : Box Fan Rest Sound, Pink Noise - BP 240 hz, Clover, White Noise, Oscillating Fan Sound<\/li>\n    <li>Song with Highest Liveness (The presence of an audience in the recording): Up on Cripple Creek - Concert Version<\/li>\n    <li>Song with Highest Speechiness (The presence of spoken words in a track) : \u0427\u0430\u0441\u0442\u044c 51.2 - \u0424\u0438\u0435\u0441\u0442\u0430<\/li>\n    <li>Song with Highest Tempo : I Don't Want You On My Mind<\/li>\n    <li>Loudness is highly positively correlated with Energy<\/li>\n    <li>Acousticness is highly negatively correlated with Loudness and Energy<\/li> \n    <li>It will take around 1.25 years to continuosly listen all the songs on Spotify<\/li>\n    <li>Top Genres : Guaracha , Circuit, Russian Dance, Afroswing and Ritmo kombina<\/li>\n<\/ul>","75a9ea01":"# Artists with Maximum Number of Songs","c3907257":"# Most Popular tracks from 1921-2020","a316d240":"# Data Cleaning","351ab789":"# Data Loading","3c52f219":"# Most Sad and  Depressed type of Songs ","a66a88a9":"# Explicit Content Ratio","519df41c":"***\n# EXPLORATORY DATA ANALYSIS   ","b23636fc":"# Songs with Highest Duration","27ed919b":"# Used Libraries","4290c713":"# Most Popular Artists from 1921-2020","b5bd0ab7":"# Data Description","35207994":"<div style=\" background: #1db954;\n             padding-top: 40px;\n             padding-right: 20px;\n             padding-bottom: 40px;\n             height: 200px;\n             width: 100%;\n             padding-left: 60px;\">\n             <h1 style=\"color:white;text-align: center;\">For now this is the end of the analysis !!! <br> Please do upvote if you like it and let me know in the comments if there is anything wrong or how to improve it.<br>\ud83e\udd0d<\/h1>\n <\/div>","ca649ce5":"Link for [Dataset](https:\/\/www.kaggle.com\/yamaerenay\/spotify-dataset-19212020-160k-tracks) <br>\n\nSongs Dataset :<br>\n    Number of recordes - 169909 <br>\n    Number of fields - 19<br><br>\nGenre Dataset :<br>\n    Number of recordes - 2664 <br>\n    Number of fields - 14\n    \n## Fields\n<br>\u2022 <b>id<\/b> (Id of track generated by Spotify)\n<br><br>\u2022 <b>artists<\/b> (List of artists mentioned)\n<br><br>\u2022 <b>name<\/b> (Name of the song)\n<br><br>\u2022 <b>genres<\/b> (Genre of the song)\n<br><br>\u2022 <b>year<\/b> (Ranges from 1921 to 2020)\n<br><br>\u2022 <b>duration_ms<\/b> (Integer typically ranging from 200k to 300k)\n<br><br>\u2022 <b>mode<\/b> (0 = Minor, 1 = Major)\n<br><br>\u2022 <b>explicit<\/b> (0 = No explicit content, 1 = Explicit content)\n<br><br>\u2022 <b>key<\/b> (All keys on octave encoded as values ranging from 0 to 11, starting on C as 0, C# as 1 and so on\u2026)\n<br><br>\u2022 <b>popularity<\/b> : The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. Note that the popularity value may lag actual popularity by a few days: the value is not updated in real time.\n<br><br>\u2022 <b>acousticness<\/b> : A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.\n<br><br>\u2022 <b>danceability<\/b> : Describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.\n<br><br>\u2022 <b>energy<\/b> : Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy.\n<br><br>\u2022 <b>instrumentalness<\/b> : Predicts whether a track contains no vocals. \u201cOoh\u201d and \u201caah\u201d sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \u201cvocal.\u201d The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.\n<br><br>\u2022 <b>valence<\/b> : A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\n<br><br>\u2022 <b>tempo<\/b> : The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.\n<br><br>\u2022 <b>liveness<\/b> : Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.\n<br><br>\u2022 <b>loudness<\/b> (Float typically ranging from -60 to 0)\n<br><br>\u2022 <b>speechiness<\/b> : Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.\n\n\n","ccb6201e":"# Relation of attributes with Popularity (2015-2020) ","5536fd30":"# How key affects the Popularity ?","26c593d5":"# What is the Most Frequent Key ?","8ea785a5":"<a><img src = \"https:\/\/martechtoday.com\/wp-content\/uploads\/2018\/08\/spotify-logo-1920x1080_fouoik.jpg\" width=100% ><\/a>","d999fb61":"<div style=\"background:#1db954;height:160px;\"><br><h3 style=\"color:white;text-align: center;margin-right:10px;margin-left:10px;\"> <b>NOTE - IPYWidgets doesn't work in kaggle notebooks, So If you want to interact with notebook, then you need to download the notebook. Happy Learning \ud83d\ude03<\/b><\/h3><\/div>","b0367f32":"# Most Popular Songs Yearwise","c6b9320b":"# Trend Analysis Popularity Wise","c75dcee8":"# Top 5 Songs Category Wise","7a9ad1fa":"EDA is an approach to analyzing data sets to summarize their main characteristics, often with visual methods. My objective for this project is to understand data and how it is distributed. I will analyze this data in a very simple yet informative way using Data Visualization.<br> <b><i>\"A picture speaks a thousand words\"<\/i><\/b>.<br> Lets delve into data and grind some information !","246bbac1":"# Number of Songs Released Year Wise","bdfe40e9":"# Most Popular Artists Yearwise","6c5e8ed3":"# Correlation Matrix","f178216f":"# Most Popular Genres","eb6a21d8":"# Mode Ratio"}}