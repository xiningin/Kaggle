{"cell_type":{"99a1e948":"code","18ff4057":"code","c93338e1":"code","da0d63a6":"code","f8e1c71e":"code","a85a418a":"code","7f2dbb9a":"code","79763216":"code","f327b3d5":"code","eea22820":"code","7cae90c0":"code","a61ec17e":"code","a05b7d73":"code","5c1aab0c":"code","5fcd9ffc":"code","c369c21c":"markdown","4d6a8f5f":"markdown","04c4966f":"markdown","f09a304b":"markdown","4dd64ff1":"markdown","7f58c2da":"markdown","71f9044a":"markdown","9e1cbb66":"markdown","e2ca1fc7":"markdown","9d49755f":"markdown","c9ed39fd":"markdown","463e0844":"markdown","8d8e8ec6":"markdown"},"source":{"99a1e948":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport math\nimport matplotlib.pyplot as plt\nimport tensorflow as tf \n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout, GRU, Bidirectional\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import MinMaxScaler","18ff4057":"df_apple = pd.read_csv(\"..\/input\/apple-stock-data-updated-till-22jun2021\/AAPL.csv\")\ndf_apple.head()","c93338e1":"# Set the Date format\ndf_apple['Date'] = pd.to_datetime(df_apple['Date'], format=\"%Y-%m-%d\")","da0d63a6":"# Compute the average price from the highest and lowest\nhigh_prices = df_apple.loc[:,'High'].to_numpy()\nlow_prices = df_apple.loc[:,'Low'].to_numpy()\nmid_prices = (high_prices + low_prices) \/ 2.0\n\nprint(\"Size of our data : \", len(mid_prices))","f8e1c71e":"# Show only the data\nfrom matplotlib.dates import DateFormatter\nformatter = DateFormatter('%Y-%m-%d')\n\nplt.figure(figsize = (18, 9))\nplt.plot(range(df_apple.shape[0]), mid_prices)\nplt.xticks(range(0, df_apple.shape[0], 500), df_apple['Date'].loc[::500], rotation=45)\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Average price', fontsize=18)\nplt.title('Average price of Apple\\'s shares')\n\n# Apply time format \nplt.gcf().axes[0].xaxis.set_major_formatter(formatter)\n\nplt.show()","a85a418a":"mid_prices = mid_prices.reshape(-1, 1)\n\n# Create our final test data\ntrain_set = mid_prices[:7000]\nvalid_set = mid_prices[7000:8000]\ntest_set = mid_prices[8000:]","7f2dbb9a":"# Normalize our data\nsc = MinMaxScaler(feature_range=(0, 1))\nsc_valid = MinMaxScaler(feature_range=(0, 1))\nsc_test = MinMaxScaler(feature_range=(0, 1))\n\ntrain_set_scaled = sc.fit_transform(train_set)\nvalid_set_scaled = sc_valid.fit_transform(valid_set)\ntest_set_scaled = sc_test.fit_transform(test_set)","79763216":"def generate_data(data, window_size_input = 300):\n    \n    X = []\n    y = []\n\n    for i in range(window_size_input, len(data)):\n\n        # Get the data \n        X_data = data[i - window_size_input : i, 0]\n        y_data = data[i, 0]\n\n        X.append(X_data)\n        y.append(y_data)\n        \n    return np.array(X), np.array(y)\n\n# Each analyze will be 300 days\n# You coud change this parameter\nWINDOW_SIZE_SEARCH = 300\n\nX_train, y_train = generate_data(train_set_scaled, WINDOW_SIZE_SEARCH)\nX_valid, y_valid = generate_data(valid_set_scaled, WINDOW_SIZE_SEARCH)\n\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\nX_valid = np.reshape(X_valid, (X_valid.shape[0], X_valid.shape[1], 1))","f327b3d5":"def create_model(input_shape = 300):\n\n    model = Sequential()\n    model.add(Bidirectional(GRU(50, return_sequences=True, input_shape=(input_shape, 1))))\n    model.add(Bidirectional(GRU(50, return_sequences=True)))\n    model.add(Bidirectional(GRU(50, return_sequences=True)))\n    model.add(Bidirectional(GRU(50)))\n    model.add(Dropout(0.2))\n    \n    #\u00a0Note : Here we can adjust the output number we want.\n    model.add(Dense(units = 1))\n    \n    model.compile(optimizer='rmsprop', loss='mean_squared_error', metrics=['mae', 'mse'])\n    \n    return model \n\n\nmodel = create_model()\nmodel.fit(X_train, \n          y_train, \n          epochs=5, \n          batch_size=32, \n          validation_data=(X_valid, y_valid))","eea22820":"price_prediction = model.predict(X_valid)\n\nprice_error = mean_squared_error(y_valid, price_prediction)\n\nprint(\"Price error on the validation set : \", price_error)\n\n#\u00a0Transform back our data for the real price\nprice_prediction_valid = sc_valid.inverse_transform(price_prediction)\n\n# Add padding from our data\nzeros = np.zeros([300])\nprice_prediction = np.concatenate((zeros, price_prediction_valid), axis=None)","7cae90c0":"plt.figure(figsize=(15,15))\nplt.plot(valid_set, color='red',label='Real Apple Stock Price')\nplt.plot(price_prediction, color='blue',label='Predicted Apple Stock Price')\nplt.title('Apple Stock Price Prediction on the validation set')\nplt.xlabel('Time')\nplt.ylabel('Apple Stock Price')\nplt.legend()\nplt.show()","a61ec17e":"X_test, y_test = generate_data(test_set_scaled, WINDOW_SIZE_SEARCH)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\n\nprice_prediction_test = model.predict(X_test)\n\n\nprice_error = mean_squared_error(y_test, price_prediction_test)\nprint(\"Price error on the test set : \", price_error)\n\n# Transform back our data\nprice_prediction_test = sc_test.inverse_transform(price_prediction_test)\n\nzeros = np.zeros([300])\nprice_prediction_test = np.concatenate((zeros, price_prediction_test), axis=None)\n\nplt.figure(figsize=(15,15))\nplt.plot(test_set, color='red',label='Real Apple Stock Price')\nplt.plot(price_prediction_test, color='blue',label='Predicted Apple Stock Price')\nplt.title('Apple Stock Price Prediction on the test set')\nplt.xlabel('Time')\nplt.ylabel('Apple Stock Price')\nplt.legend()\nplt.show()","a05b7d73":"print(\"Size of our test set : \", len(test_set_scaled))\n\n# Get as input the 300 days\ninput_data = X_test[0]\n\noutput = input_data\n\nfor data in range(300, len(test_set_scaled)):\n    \n    # Get the input data\n    X_input = np.reshape(output[-300:], (1, 300, 1))\n    \n    # Make the prediction\n    pred = model.predict(X_input)    \n    \n    # Add the prediction to our input data\n    output = np.concatenate((output, pred))\n","5c1aab0c":"\nprice_error = mean_squared_error(y_test, output[300:])\nprint(\"Price error on the test set : \", price_error)\n    \n# Transform our data to the real price value\noutput_price_prediction = sc_test.inverse_transform(output)","5fcd9ffc":"plt.figure(figsize=(15,15))\nplt.plot(test_set, color='red',label='Real Apple Stock Price')\nplt.plot(output_price_prediction, color='blue',label='Predicted Apple Stock Price')\nplt.title('Apple Stock Price Prediction On Consecutive Day')\nplt.xlabel('Time')\nplt.ylabel('Apple Stock Price')\nplt.legend()\nplt.show()","c369c21c":"## References\n\nhttps:\/\/www.kaggle.com\/subbhashit\/time-series-prediction-a-complete-guide","4d6a8f5f":"## Try to predict the next days\n\nOne of the question that we could ask is :\n\nIs it possible to use our model recursivelly to see the future? As our model can see tomorrow, how far can our model see ?\n\nIn order to response this question, we are going to use our trained model and give him the first 300 days. Then, for each prediction our model get, we are going to add it to our input data. And we are going to repeat those actions until the end of our test set.","04c4966f":"If you have questions, don't hesitate. Also, if you have interesting documentation\/notebook that explain stock prediction, feel free to leave a comment and share it with us. \n\nIn addition, you will find in the references a link to a notebook from which I was inspired by. Don't hesitate to check it out.\n\nHope this notebook help some of you. ","f09a304b":"It seems that the Apple share price can be represented as an exponential function. Thus, if we want to continue the chart value, intuitively we must continue the exponentiel curve.\n\nHowever, we can't see in the future, so we don't know if it will continue to growth or to collapse.","4dd64ff1":"As you can see from the graph above, the predicted value don't reflect the truth.\n\nI created this graph to show you that our model is used to predict the price for tomorrow. Not the price for the days that follow. Our model is specific for day prediction. If we want to predict a larger range of days, we have to increase the output of our model.\nAlso, another approach could be to use months instead of days as prediction. \n\nSo please, if you use that kind of model, be sure to know in advance what you want to predict and the length of your prediction.","7f58c2da":"### Predict on the test set\n\nDo the same on the test set.","71f9044a":"## Visualize our data","9e1cbb66":"## Model creation\n\nFor this model, we are going to use stacked GRU. It will take as input the 300 previous days, and output the next day.\n\nNote : You could also decide to create a model that try to predict the next 5 days instead of only one (or more). In this approach, we only see the short term. Also, another possibility could be to based our approach by month instead of days. With that we keep our short term approach, but with a larger view (month instead of day).","e2ca1fc7":"### Normalize the data\n\nOnce our sets created, we need to scaled our data between 0 and 1. Indeed, in order to use our data with neural network, we need to normalize our data. Also, it will allows the network to understand the price difference. Indeed, the prices of Apple shares have a huge gap between the first valuers and today's. By normalized them, we reduce the gap and our model can be more accurate.","9d49755f":"# Apple Stock Prediction\n\nIn this notebook, we are going to use a recurrent neural network in order to predict the Apple stock price. Thought this notebook, you will see the different steps for visualising the data, the preparation of them and the creation of our neural network. ","c9ed39fd":"## Create our data sets\n\nBefore diving into the creation of our neural network, we need to create specific sets for the training, the validation and the testing.","463e0844":"### Predict on the validation set\n\nOnce the model trained, we are going to predict the next price for the validation set.\n\nIn order to visualize our data, we will have to add a padding of 300 value at the beginning. Indeed, as we need 300 input data, we will not predict the first 300 values. ","8d8e8ec6":"### Generate our data\n\nIn order to predict the next price of the share, we are going to generate our input data and the corresponding output value. In order to predict the next price, we need to have references (previous price).\n\nIn this notebook, I decided to use 300 days as reference. This number is arbitrary. You could decide to increase or reduce it as you want. Note that it's important for the network to have enought data in order for him to have a better view of the market. If, for example, you only show him 10 previous prices, it could be difficult for him to see the trend of the curent market. "}}