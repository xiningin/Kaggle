{"cell_type":{"bcd32c6e":"code","72be4555":"code","b04e8b19":"code","2dd7c7f5":"code","2cc7cfe9":"code","c7896d8c":"code","2e56a2f7":"code","ca99a768":"code","317a1ea0":"code","bf13abbb":"code","6fa695a8":"code","9890160e":"code","6e502a1b":"code","48c644b6":"code","a7f2e075":"code","2b2a6933":"markdown","35b38bed":"markdown","8b57a102":"markdown","4b5cd6b8":"markdown","0fccba2b":"markdown","c9b2b6d6":"markdown","dc9b0290":"markdown","d397dfa4":"markdown"},"source":{"bcd32c6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","72be4555":"data=pd.read_csv('\/kaggle\/input\/forecasting-dataset-of-noaa\/2010.csv')","b04e8b19":"data.head()","2dd7c7f5":"data2=data[['lat','lon','Date','tem']]","2cc7cfe9":"data2.head()","c7896d8c":"x2=data2['lat'].astype('str')\nx1=data2['lon'].astype('str')\ndata2['lat_lon']=x2+'_'+x1","2e56a2f7":"data2.head()","ca99a768":"from fbprophet import Prophet","317a1ea0":"data2 = data2.rename(columns={'Date': 'ds', 'tem':'y'})","bf13abbb":"data2.head(1)","6fa695a8":"grouped = data2.groupby('lat_lon')","9890160e":"final = pd.DataFrame()\nfor g in grouped.groups:\n    group = grouped.get_group(g)\n    m = Prophet()\n    m.fit(group)\n    future = m.make_future_dataframe(periods=700)\n    forecast = m.predict(future)    \n    forecast = forecast.rename(columns={'yhat': 'yhat_'+str(g)})\n    final = pd.merge(final,  forecast.set_index('ds'), how='outer', left_index=True,right_index=True)\n\nfinal = final[['yhat_' + str(g) for g in grouped.groups.keys()]]","6e502a1b":"final","48c644b6":"final.iloc[0:, 0:5]['2020-06-17':'2020-06-30']","a7f2e075":"final","2b2a6933":"### 1. y(t)=g(t)+s(t)+h(t)+Et","35b38bed":"# The Prophet Forecasting Mode","8b57a102":"We use a decomposable time series model with three main model components: trend, seasonality, and holidays. They are combined in the following equation:","4b5cd6b8":"we will forecast future values of our dataset from provided data ","0fccba2b":"according to fb prophet the date value should be in the form of ds and output values as y","c9b2b6d6":"here we will merge both data column name of lat and lon and form one data column lat_lon ","dc9b0290":"g(t): piecewise linear or logistic growth curve for modelling non-periodic changes in time series\ns(t): periodic changes (e.g. weekly\/yearly seasonality)\nh(t): effects of holidays (user provided) with irregular schedules\n\u03b5t: error term accounts for any unusual changes not accommodated by the model","d397dfa4":"# NOW WE WORK ON PREDICTION BY FBPROPHET"}}