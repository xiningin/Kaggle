{"cell_type":{"86231140":"code","11bbb9ec":"code","2d8e6964":"code","2abaaf1b":"code","c582dc4d":"code","5bb5d707":"code","95c2f57a":"code","16767615":"code","808cf5fa":"code","daf780a8":"code","8a00371e":"code","103d6a61":"code","f0a003ad":"code","7c63fdb4":"code","1995d799":"code","a596e17a":"code","74f9ffdf":"code","4b8dc171":"code","979628cc":"code","d2f83eb5":"code","ece099b4":"code","c573de62":"code","ac93161e":"code","0ddf6c1c":"code","49032480":"code","2764f458":"markdown","67862e85":"markdown","94482ff9":"markdown","7e7a79f6":"markdown","adabf806":"markdown","795326ef":"markdown","4a64ed84":"markdown","8eeb5b9b":"markdown","ea42ae26":"markdown","250705e7":"markdown","ff639fd0":"markdown"},"source":{"86231140":"# Basic\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# File\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","11bbb9ec":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_train.shape","2d8e6964":"df_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf_test.shape","2abaaf1b":"df_sub = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ndf_sub.shape","c582dc4d":"df_train.head()","5bb5d707":"df_train.info()","95c2f57a":"df_train.isnull().sum()","16767615":"women = df_train.loc[df_train.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","808cf5fa":"men = df_train.loc[df_train.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","daf780a8":"#df = pd.concat([df_train, df_test])#.reset_index(drop=True)\n#df.shape","8a00371e":"df_train = df_train.fillna(-999)\ndf_test = df_test.fillna(-999)","103d6a61":"'''\nsplit = len(df_train)\ntrain = df[:split]\ntest = df[split:]\n'''","f0a003ad":"# Get train and validation sub-datasets\nfrom sklearn.model_selection import train_test_split\n\nX = df_train.drop([\"Survived\"], axis=1)\ny = df_train[\"Survived\"]\n\n#Do train data splitting\nX_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.75, random_state=42)","7c63fdb4":"'''\nfrom sklearn.ensemble import RandomForestClassifier\n\ny = df_train[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(df_train[features])\nX_test = pd.get_dummies(df_test[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n'''","1995d799":"# Libs\nfrom catboost import CatBoostClassifier, Pool, cv\nfrom sklearn.metrics import accuracy_score\n\n# Select categorical indices\ncat_features_indices = np.where(X.dtypes != float)[0]\n\n# Define the model\nmodel = CatBoostClassifier(\n    eval_metric='Accuracy',\n    loss_function='Logloss',\n    #iterations=150,\n    use_best_model=True,\n    random_seed=42,\n    logging_level='Silent'\n)\n\n#now just to make the model to fit the data\nmodel.fit(X_train,y_train,cat_features=cat_features_indices,eval_set=(X_test,y_test), plot=True)","a596e17a":"#TODO: Early stopping","74f9ffdf":"cv_params = model.get_params()\ncv_params.update({\n    'loss_function': 'Logloss'\n})\ncv_data = cv(\n    Pool(X, y, cat_features=cat_features_indices),\n    cv_params,\n    plot=True\n)","4b8dc171":"print('Best validation accuracy score: {:.2f}\u00b1{:.2f} on step {}'.format(\n    np.max(cv_data['test-Accuracy-mean']),\n    cv_data['test-Accuracy-std'][np.argmax(cv_data['test-Accuracy-mean'])],\n    np.argmax(cv_data['test-Accuracy-mean'])\n))","979628cc":"print('Precise validation accuracy score: {}'.format(np.max(cv_data['test-Accuracy-mean'])))","d2f83eb5":"# Create pool\ntrain_pool = Pool(X_train, y_train, cat_features=cat_features_indices)\nvalidate_pool = Pool(X_test, y_test, cat_features=cat_features_indices)","ece099b4":"# Feature importance\nfeature_importances = model.get_feature_importance(train_pool)\nfeature_names = X_train.columns\nfor score, name in sorted(zip(feature_importances, feature_names), reverse=True):\n    print('{}: {}'.format(name, score))","c573de62":"eval_metrics = model.eval_metrics(validate_pool, ['AUC'], plot=True)","ac93161e":"# Re-train model with full data\n#model.fit(X,y,cat_features=cat_features_indices)","0ddf6c1c":"# Make predictions\npredictions = model.predict(df_test)\npredictions_probs = model.predict_proba(df_test)\nprint(predictions[:10])\nprint(predictions_probs[:10])","49032480":"# Save results\noutput = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Submission was successfully saved!\")","2764f458":"# Model","67862e85":"The sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).","94482ff9":"# The Challenge","7e7a79f6":"# Submission","adabf806":"# Baseline Model","795326ef":"# Model","4a64ed84":"# Load Data","8eeb5b9b":"# Libraries","ea42ae26":"# Validation","250705e7":"# Data Pre-processing","ff639fd0":"# Explore"}}