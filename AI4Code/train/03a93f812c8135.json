{"cell_type":{"f7f230e1":"code","d169ea5e":"code","b4632ab5":"code","21b28a1a":"code","bd917682":"code","5db61868":"code","947db25d":"code","c0d1584c":"code","3156a163":"code","917d11f1":"code","8a90a6cc":"code","0ad55b2a":"code","dbd06521":"code","75938f82":"code","30fd5731":"code","b31323c2":"code","ff0745ef":"code","25dfa4e8":"code","90481e81":"code","1e2c14bc":"code","c54d912c":"code","24882c5e":"code","0b91b8c9":"code","a4cc52c3":"code","f4da6b7c":"code","aa87dafc":"code","e6b63ee8":"code","7c88509b":"code","069033be":"code","b188ddc6":"code","9f20f4f2":"code","e5ba336d":"code","942dcac4":"code","9d9ab7f5":"code","81b1c4b7":"code","69a50b10":"code","bc3e863b":"markdown"},"source":{"f7f230e1":"# # Import usefull tools\nimport tensorflow as tf\nimport tensorflow_hub as hub\nprint(\"TF version\",tf.__version__)\nprint(\"TF Hub Version\", hub.__version__)\n\n#check GPU availability\nprint(\"GPU\", \"Available (Yes!)\" if tf.config.list_physical_devices(\"GPU\") else \"not available: \")","d169ea5e":"train_dir = '..\/input\/fruits\/fruits-360\/Training\/'\ntest_dir = '..\/input\/fruits\/fruits-360\/Test\/'","b4632ab5":"import numpy as np\nimport os\nimport PIL\nfrom glob import glob\nimport PIL.Image\nfrom keras.preprocessing.image import ImageDataGenerator\nimport tensorflow as tf\nimport tensorflow_datasets as tfds\nfrom keras import backend as K","21b28a1a":"# img_width = 255\n# img_height = 255\n\nimg_width = 100\nimg_height = 100\ntrain_samples = 120\ntest_samples=30\nepochs = 5\nbatch_size=32\n\nif K.image_data_format() == 'channels_first':\n    input_shape = (3, img_width, img_height)\nelse:\n    input_shape = (img_width, img_height, 3)","bd917682":"input_shape","5db61868":"train_datagen = ImageDataGenerator(rescale=1.\/255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\n#test_datagen = ImageDataGenerator(rescale=1.\/255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)","947db25d":"train_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size=(img_width, img_height),\n    batch_size = batch_size,\n    class_mode='categorical')","c0d1584c":"k = train_generator.class_indices\n\nprint(k)\n","3156a163":"print(len(train_generator.class_indices))","917d11f1":"imgs, labels = next(train_generator)","8a90a6cc":"imgs[:1]","0ad55b2a":"print(len(labels))","dbd06521":"from skimage import io\ndef imshow(image_RGB):\n    io.imshow(image_RGB)\n    io.show()","75938f82":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nimage_batch, label_batch = train_generator.next()\n\nprint(len(image_batch))\nfor i in range(1,len(image_batch)):\n    image = image_batch[i]\n    print(label_batch[i])\n    imshow(image)","30fd5731":"test_generator = test_datagen.flow_from_directory(\n    test_dir,\n    target_size=(img_width, img_height),\n    batch_size = batch_size,\n    class_mode='categorical')","b31323c2":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPool2D, AveragePooling2D,BatchNormalization\n","ff0745ef":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3),input_shape = input_shape))\nmodel.add(Conv2D(32, (3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\n\n\nmodel.add(Conv2D(32,(3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64,(3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(64,(3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n\nmodel.add(Conv2D(128,(3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(128,(3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n\nmodel.add(Flatten())\nmodel.add(Dropout(0.25))\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(131,activation=\"softmax\"))\n","25dfa4e8":"import keras\nfrom keras import optimizers","90481e81":"model.compile(loss='categorical_crossentropy',\n             optimizer=keras.optimizers.Adam(lr=.0001),\n             metrics=['accuracy'])","1e2c14bc":"# history = model.fit_generator(\n#     train_generator,\n#     steps_per_epoch=train_samples,\n#     epochs=20,\n#     validation_data=test_generator,\n#     validation_steps=test_samples)\n\n\n","c54d912c":"history = model.fit_generator(\n    train_generator,\n    epochs=10,\n    validation_data=test_generator)\n    ","24882c5e":"# Plot Loss per iteration\n\nimport matplotlib.pyplot as plt\n\n# plt.plot(history.history['loss'], label='loss')\n# plt.plot(history.history['val_loss'], label='val_loss')\n# plt.legend();\n\nplt.figure(figsize=(20,10))\nplt.subplot(1, 2, 1)\nplt.suptitle('Optimizer : Adam', fontsize=10)\nplt.ylabel('Loss', fontsize=16)\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.legend(loc='upper right')\n\n\nplt.subplot(1, 2, 2)\nplt.ylabel('Accuracy', fontsize=16)\nplt.plot(history.history['accuracy'], label='Training Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.show()","0b91b8c9":"# Plot Loss per iteration\n\n# import matplotlib.pyplot as plt\n\n# plt.plot(history.history['accuracy'], label='accu')\n# plt.plot(history.history['val_accuracy'], label='val_acc')\n# plt.legend();\n\n","a4cc52c3":"# show the confusion matrix of our predictions\n\n# compute predictions\npredictions = model.predict_generator(generator=test_generator)\ny_pred = [np.argmax(probas) for probas in predictions]\ny_test = test_generator.classes\nclass_names = test_generator.class_indices.keys()","f4da6b7c":"from sklearn.metrics import confusion_matrix\nimport itertools\n\ndef plot_confusion_matrix(cm, classes, title='Confusion matrix', cmap=plt.cm.Blues):\n    cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n    plt.figure(figsize=(100,100))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()\n    \n# compute confusion matrix\ncnf_matrix = confusion_matrix(y_test, y_pred)\nnp.set_printoptions(precision=2)\n\n# plot normalized confusion matrix\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes=class_names, title='Normalized confusion matrix')\nplt.show()","aa87dafc":"#Save the model\n\ntf.keras.models.save_model(model,'CNN_fruit_epochs_10_revised.hdf5')","e6b63ee8":"from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau","7c88509b":"\nfrom tensorflow.keras.layers import Input, Conv2D, Dense, Flatten, Dropout, GlobalMaxPooling2D, MaxPooling2D, BatchNormalization","069033be":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3),input_shape = input_shape))\nmodel.add(Conv2D(32, (3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, (3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128, (3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(300, (3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(300, (3, 3), activation='relu', padding='same'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(GlobalMaxPooling2D())\nmodel.add(Flatten())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(255, activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(270, activation='relu'))\n\nmodel.add(Dense(1024, activation='relu'))\n\nmodel.add(Dense(255, activation='relu'))\n\nmodel.add(Dense(131, activation='softmax'))\n\nearlystop = EarlyStopping(monitor = 'val_loss', \n                          min_delta = 0, \n                          patience = 6,\n                          restore_best_weights = True)\n\nreduce_lr = ReduceLROnPlateau(monitor = 'val_loss',\n                              factor = 0.2,\n                              patience = 3,\n                              verbose = 1,\n                              min_delta = 0.0001)\n\ncallbacks = [earlystop, reduce_lr]\n\n","b188ddc6":"model.compile(loss = 'categorical_crossentropy',\n              optimizer = \"adam\",\n              metrics = ['accuracy'])","9f20f4f2":"epochs = 20\nhistory = model.fit_generator(\n    train_generator,\n    #steps_per_epoch=train_samples,\n    use_multiprocessing=True,\n    workers=16,\n    epochs = epochs,\n    callbacks = callbacks,\n    validation_data = test_generator)\n    #validation_steps=test_samples)","e5ba336d":"# Plot Loss per iteration\n\nimport matplotlib.pyplot as plt\n\nplt.plot(history.history['loss'], label='loss')\nplt.plot(history.history['val_loss'], label='val_loss')\nplt.legend();\n","942dcac4":"# Plot Loss per iteration\n\nimport matplotlib.pyplot as plt\n\nplt.plot(history.history['accuracy'], label='accu')\nplt.plot(history.history['val_accuracy'], label='val_acc')\nplt.legend();\n","9d9ab7f5":"#Save the model\n\ntf.keras.models.save_model(model,'CNN_fruit_epochs_20.hdf5')","81b1c4b7":"# Make predictions on the validation data (not used to train on)\npredictions = model.predict(test_generator, verbose=1) # verbose shows us how long there is to go\npredictions","69a50b10":"# Check the shape of predictions\npredictions.shape","bc3e863b":"# New Model"}}