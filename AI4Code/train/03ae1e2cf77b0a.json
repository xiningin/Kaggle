{"cell_type":{"468ede95":"code","e497c1c6":"code","cd6d41b0":"code","08cf08d3":"code","4e1da130":"code","cf4f4855":"code","dc0217fc":"code","59df61e3":"code","6c8adae7":"code","11632905":"code","ac8828cf":"code","4a165031":"code","f0b10d34":"code","7d266109":"code","d524181c":"code","982c41d6":"code","66ef46f6":"code","1329e5f2":"code","bfbc085e":"code","ddbe94a4":"code","992b336b":"code","35abc012":"code","790c3a4e":"code","671c2db5":"code","ab17e69b":"markdown","7b32c482":"markdown","7f1a6c81":"markdown","33ed393c":"markdown","d43da5a3":"markdown","8df48b7f":"markdown","47810208":"markdown","a76c81ce":"markdown"},"source":{"468ede95":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom wordcloud import WordCloud\n\nimport plotly.graph_objects as go\n\n","e497c1c6":"df = pd.read_csv('..\/input\/videogamesales\/vgsales.csv')\ndf.head()","cd6d41b0":"df.info()","08cf08d3":"df.isna()","4e1da130":"df.describe()","cf4f4855":"df = df.rename(columns = {df.columns[0]: \"Game_Rank\"}, inplace=False)","dc0217fc":"df.head()","59df61e3":"drop_row = df[df['Year'] > 2015].index\ndf = df.drop(drop_row)","6c8adae7":"df['Genre'].value_counts()","11632905":"df['Publisher'].value_counts()","ac8828cf":"df['Platform'].value_counts()","4a165031":"games = df['Name'].unique()\npublisher = df['Publisher'].unique()\nplatforms = df['Platform'].unique()\ngenres = df['Genre'].unique()","f0b10d34":"fig = go.Figure()\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = len(games),\n    title = {'text': \"Games\",'font': {'color': 'gold','size':20}},\n    number={'font':{'color': 'gold','size':50}},\n    domain = {'row': 0, 'column': 0}\n))\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = len(publisher),\n    title = {'text': \"Publishers\",'font': {'color': 'green','size':20}},\n    number={'font':{'color': 'green','size':50}},\n    domain = {'row': 0, 'column': 1}\n))\n\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = len(platforms),\n    title = {'text': \"Platforms\",'font': {'color': 'darkviolet','size':20}},\n    number={'font':{'color': 'darkviolet','size':50}},\n    domain = {'row': 0, 'column': 2}\n))\n\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = len(genres),\n    title = {'text': \"Genres\",'font': {'color': 'deepskyblue','size':20}},\n    number={'font':{'color': 'deepskyblue','size':50}},\n    domain = {'row': 0, 'column': 3}\n))\n\nfig.update_layout(\n    grid = {'rows': 1, 'columns': 4, 'pattern': \"independent\"})\nfig.show()","7d266109":"plt.figure(figsize=(20, 10))\nsns.countplot(x=\"Platform\", data=df, order = df['Platform'].value_counts().index)\n","d524181c":"plt.figure(figsize=(15, 10))\nsns.countplot(x=\"Genre\", data=df, order = df['Genre'].value_counts().index)\n","982c41d6":"plt.figure(figsize=(15, 10))\nsns.countplot(x=\"Year\", data=df, order = df.groupby(by=['Year'])['Name'].count().sort_values(ascending=True).index)\nplt.xticks(rotation = 90)","66ef46f6":"plt.figure(figsize=(30, 10))\nsns.countplot(x=\"Year\", data=df, hue='Genre', order=df.Year.value_counts().iloc[:3].index)\nplt.xticks(size=25, rotation=0)","1329e5f2":"data_year = df.groupby(by=['Year'])['Global_Sales'].sum()\ndata_year = data_year.reset_index()\ndata_year.sort_values(by=['Global_Sales'], ascending=False)","bfbc085e":"plt.figure(figsize=(15, 10))\nsns.barplot(x=\"Year\", y=\"Global_Sales\", data=data_year)\nplt.xticks(rotation=90)","ddbe94a4":"plt.figure(figsize=(8,8))\nsns.heatmap(df.corr(),annot=True, cmap='Blues')\nplt.show()","992b336b":"labels= df.Genre.value_counts().index\nexplode = [0,0,0,0,0,0,0,0,0,0,0,0]\nsizes = df.Genre.value_counts().values\n# visual\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=sns.color_palette('Set2'), autopct='%1.1f%%')\nplt.title('Games According to Genre',fontsize = 17,color = 'green')","35abc012":"#World rank of the top 100 video games, japan sales and europe sales.\ndf=df.loc[:99,:] # data.iloc[:100,:] -- data.head(100)\n\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\n\ntrace1=go.Scatter(\n                x=df.Game_Rank,\n                y=df.JP_Sales,\n                mode=\"lines+markers\",\n                name=\"JP Sales\",\n                marker= dict(color = 'rgba(158, 90, 10, 0.7)'),\n                text=df.Name)\ntrace2=go.Scatter(\n                x=df.Game_Rank,\n                y=df.EU_Sales,\n                mode=\"lines\",\n                name=\"Europe Sales\",\n                marker=dict(color = 'rgba(56, 140, 200, 0.7)'),\n                text=df.Name)\n\nedit_df=[trace1,trace2]\nlayout=dict(title=\"World rank of the top 100 video games, japan and europe sales .\",\n            xaxis=dict(title=\"World Rank\",tickwidth=5,ticklen=8,zeroline=False))\nfig=dict(data=edit_df,layout=layout)\niplot(fig)","790c3a4e":"# data preparation\ndataGenre_list=list(df.Genre.unique())\nna_sales=[]\neu_sales=[]\njp_sales=[]\nother_sales=[]\nglobal_sales=[]\nfor i in dataGenre_list:\n    val=df[df.Genre==i]\n    na_sales.append(val.NA_Sales.mean())\n    eu_sales.append(val.EU_Sales.mean())\n    jp_sales.append(val.JP_Sales.mean())\n    other_sales.append(val.Other_Sales.mean())\n    global_sales.append(val.Global_Sales.mean())\n    \ndf1=pd.DataFrame({\"Genre\":dataGenre_list,\"NA_Sales\":na_sales,\"EU_Sales\":eu_sales,\"JP_Sales\":jp_sales,\"Other_Sales\":other_sales,\"Global_Sales\":global_sales})\n\n# data visualization\ntrace1=go.Scatter(\n                x=df1.Genre,\n                y=df1.NA_Sales,\n                mode=\"lines+markers\",\n                name=\"North America Sales\",\n                marker= dict(color = 'grey'))\ntrace2=go.Scatter(\n                x=df1.Genre,\n                y=df1.EU_Sales,\n                mode=\"lines\",\n                name=\"Europe Sales\",\n                marker=dict(color = 'blue'))\ntrace3=go.Scatter(\n                x=df1.Genre,\n                y=df1.JP_Sales,\n                mode=\"lines+markers\",\n                name=\"Japan Sales\",\n                marker=dict(color = 'orange'))\ntrace4=go.Scatter(\n                x=df1.Genre,\n                y=df1.Other_Sales,\n                mode=\"lines\",\n                name=\"Other Sales\",\n                marker=dict(color = 'green'))\ntrace5=go.Scatter(\n                x=df1.Genre,\n                y=df1.Global_Sales,\n                mode=\"lines+markers\",\n                name=\"Global Sales\",\n                marker=dict(color = 'black'))\nedit_df=[trace1,trace2,trace3,trace4,trace5]\nlayout=dict(title=\"The genres according to the average sales\",\n            xaxis=dict(title=\"  Genre of Video Games\",tickwidth=5,ticklen=8,zeroline=False))\nfig=dict(data=edit_df,layout=layout)\nplt.savefig('graph.png')\niplot(fig)","671c2db5":"# Which video games is mentioned most at Genre of Action..\n# data prepararion\nw_data = df[df.Genre == 'Action'].iloc[:50,:]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                        background_color='#f2f2f2',\n                        width=532,\n                        height=374\n                     ).generate(\" \".join(w_data.Name))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\nplt.show()","ab17e69b":"# Top 3 years game releases by genre.","7b32c482":"*There is not enough data to evaluate after 2015 so i dropped to data after that year*","7f1a6c81":"# Thank you !!!\n","33ed393c":"![](https:\/\/www.google.com\/url?sa=i&url=https%3A%2F%2Fwww.jvstoronto.org%2Fblog%2Fafter-the-interview-write-a-good-thank-you-letter%2F&psig=AOvVaw1baz-CGnMWqUG_0kEt_tw9&ust=1612090971797000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCMiL54TBw-4CFQAAAAAdAAAAABAD)\n","d43da5a3":"# How many unique \"Games, Publisher, Platforms, Genres\" we have ?","8df48b7f":"# Highest Sales Numbers Worldwide","47810208":"# Data Importing","a76c81ce":"Feel free to make a comment about this notebook. I'm open to suggestions."}}