{"cell_type":{"fc026eb1":"code","6b9c7cc8":"code","ce43feac":"code","609422cf":"code","ec6a54b8":"code","92fecadd":"code","aae03092":"code","ab359ebf":"code","efb40dad":"code","04226f7c":"code","ed7a48a8":"code","2e0706e6":"code","d0bc99dc":"code","096b088c":"code","b462e16c":"code","2a99b2ce":"code","e8c44dcf":"code","6ff7e44c":"code","cfd051c0":"code","ee0dd664":"code","ad3a8b2f":"code","d6fb74a5":"code","22794c48":"code","89ca458f":"code","34fb654f":"code","4d2621e6":"code","040813bf":"code","e1a08232":"markdown","e634895d":"markdown","0ad4a4a4":"markdown","86e372dd":"markdown","ac4333d6":"markdown","bec803f8":"markdown","aeae68eb":"markdown","86681982":"markdown","bc000567":"markdown","475bfe4e":"markdown","82605273":"markdown","997a6ed0":"markdown","b45590fd":"markdown","2b6b2e29":"markdown","97c521a8":"markdown","c7183d4b":"markdown","6c1a551c":"markdown","d3971384":"markdown","059fbf76":"markdown","5f58f6ea":"markdown","6e08b8c5":"markdown","61a56327":"markdown","a418524c":"markdown","8944f9fc":"markdown","47e5f1d3":"markdown","19d4f1bf":"markdown","57c6a558":"markdown","28f17aa9":"markdown","3699e779":"markdown","e34928e6":"markdown","ea65c6c4":"markdown","4562dfcd":"markdown","5cd7be3f":"markdown","e971a18e":"markdown","d4657546":"markdown","20549936":"markdown","c315ebd2":"markdown","f199ada2":"markdown","a707f321":"markdown","97eb5393":"markdown","399ddf5b":"markdown","374e4398":"markdown","952637cb":"markdown","0f8c6591":"markdown","a57bf61a":"markdown"},"source":{"fc026eb1":"!pip install spacytextblob==0.1.7\nimport numpy as np \nimport pandas as pd \nimport os\nimport missingno as msno\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nimport spacy\nfrom spacytextblob.spacytextblob import SpacyTextBlob\nfrom wordcloud import WordCloud\nimport plotly.express as px\nimport matplotlib.style as style\n\n\n#Ignoring The Warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)","6b9c7cc8":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nvaccine= pd.read_csv('\/kaggle\/input\/reddit-vaccine-myths\/reddit_vm.csv')\nvaccine.head(5)","ce43feac":"print(f'The number of rows are {vaccine.shape[0] } and the number of columns are {vaccine.shape[1]}')\n","609422cf":"vaccine.info()","ec6a54b8":"categorical_col, covariate_val=[],[]\n\nfor i in vaccine.columns:\n    \n    if vaccine[i].dtype == 'object':\n        categorical_col.append(i)\n    else:\n        covariate_val.append(i)\n        \nprint('The categorical features are :')\nprint()\nfor i in range(len(categorical_col)):\n    print(f'{i+1}. {categorical_col[i]}')\n        \nprint()\nprint('The covariate features are :')\nprint()\nfor i in range(len(covariate_val)):\n    print(f'{i+1}. {covariate_val[i]}')\n        \nprint()\n","92fecadd":"vaccine[vaccine.duplicated()]\n","aae03092":"vaccine.describe()","ab359ebf":"null_values=vaccine.isnull().sum()\/len(vaccine)\nfor i in range(len(null_values.index)):\n    print(\"Column\",null_values.index[i],\"has \",null_values[i]*100,\"% null values\")","efb40dad":"vaccine['year']=pd.DatetimeIndex(vaccine['timestamp']).year\nvaccine['month']=pd.DatetimeIndex(vaccine['timestamp']).month\nvaccine.head(5)\n","04226f7c":"pearsoncorrelation = vaccine.corr(method='pearson')\nsns.heatmap(pearsoncorrelation, \n            xticklabels=pearsoncorrelation.columns,\n            yticklabels=pearsoncorrelation.columns,\n            cmap='RdBu_r',\n            annot=True,\n            linewidth=0.5)","ed7a48a8":"sns.heatmap(vaccine.isnull())\n","2e0706e6":"sns.set(rc={'figure.figsize':(10,8)})\nsns.kdeplot(vaccine['comms_num'],color='red',shade = True, )","d0bc99dc":"sns.kdeplot(vaccine['score'],vaccine['title_polarity'])","096b088c":"sns.countplot(data=vaccine,x='year')","b462e16c":"x=pd.DataFrame()\nx['Titles Published According To Month and Year']=(vaccine.groupby(by=['year','month']).agg('count'))['title']\nx=x.style.set_properties(**{'background-color': 'yellow'}, subset=['Titles Published According To Month and Year'])\nx","2a99b2ce":"style.use('seaborn-poster') \nsns.countplot(data=vaccine, x='month',palette = 'hls',hue='year')\n","e8c44dcf":"sns.set(rc={'figure.figsize':(15,22)})\n\nsns.pairplot(vaccine)\n","6ff7e44c":"vaccine.drop(columns=['comms_num','id','url','created','timestamp'], inplace=True)\nvaccine.head()","cfd051c0":"#Lowercase the text columns\nvaccine['title'] = vaccine['title'].astype(str)\nvaccine['body'] = vaccine['body'].astype(str)\n\n\nvaccine['title'] = vaccine['title'].apply(lambda word: \" \".join(word.lower() for word in word.split()))\nvaccine['body'] = vaccine['body'].apply(lambda word: \" \".join(word.lower() for word in word.split()))\n\nvaccine","ee0dd664":"# Removing The StopWords\nfrom nltk.corpus import stopwords\n\n\nvaccine['title'] = vaccine['title'].apply(lambda word: \" \".join(word for word in word.split() if word not in stopwords.words('english')))\nvaccine['body'] = vaccine['body'].apply(lambda word: \" \".join(word for word in word.split() if word not in stopwords.words('english')))\nvaccine.head(5)","ad3a8b2f":"#Calculating the Polarity and Subjectivity\nspaceit = spacy.load('en_core_web_sm')\nstb = SpacyTextBlob()\nspaceit.add_pipe(stb)\nvaccine['title_subjectivity'] = vaccine['title'].apply(lambda x: spaceit(x)._.sentiment.subjectivity)\nvaccine['title_polarity'] = vaccine['title'].apply(lambda x: spaceit(x)._.sentiment.polarity)\nvaccine\n\nvaccine['body_subjectivity'] = vaccine['body'].apply(lambda x: spaceit(x)._.sentiment.subjectivity)\nvaccine['body_polarity'] = vaccine['body'].apply(lambda x: spaceit(x)._.sentiment.polarity)\nvaccine.head(5)","d6fb74a5":"bp=pd.DataFrame()\nbp['positive']=vaccine['body_polarity'].apply(lambda x : x if(x > 0) else None)\nbp['negative']=vaccine['body_polarity'].apply(lambda x:  x if(x<=-0.05) else None)\nbp['neutral']=vaccine['body_polarity'].apply(lambda x: x if(x>-0.05 and x<=.05) else None)\nbp\n\nfig = plt.figure()\nfig.set_figheight(5)\nfig.set_figwidth(10)\n\nax = fig.add_subplot(111)\n\n\ncounts = [len((bp['positive']).value_counts()),len(bp['neutral'].value_counts()),len((bp['negative']).value_counts())]\n\npercents = [100*x\/sum(counts) for x in counts]\n\ny_ax = ('Positive','Neutral','Negative')\ny_tick = np.arange(len(y_ax))\n\nax.barh(range(len(counts)), counts, align = \"center\", color = ['Red', 'yellow', 'cyan'])\nax.set_yticks(y_tick)\nax.set_yticklabels(y_ax, size = 15)\nax.set_facecolor('xkcd:white')\nplt.xlabel('Polarity Of column body ', size=15)\n\n\n\nfor i, y in enumerate(ax.patches):\n    label_per = percents[i]\n    ax.text(y.get_width()+.09, y.get_y()+.3, str(round((y.get_width()), 1)), fontsize=15)\n    \n    ax.text(y.get_width()+.09, y.get_y()+.1, str(f'{round((label_per), 2)}%'), fontsize=15)\n\nsns.despine()\nplt.show();\n\n","22794c48":"vaccine['Body_Sentiment_Value']=vaccine['body_polarity'].apply(lambda x : 'Neutral' if(x>-0.05 and x<=.05) else ('Negative' if(x<=-0.05) else 'Positive'))\n\n\nfig = px.scatter(vaccine, x=\"body_polarity\", y=\"body_subjectivity\", color=\"Body_Sentiment_Value\",)\nfig.update_layout(legend = dict(bgcolor = 'pink'))\nfig.update_layout({\n'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","89ca458f":"tp=pd.DataFrame()\ntp['positive']=vaccine['title_polarity'].apply(lambda x : x if(x > 0.05) else None)\ntp['negative']=vaccine['title_polarity'].apply(lambda x:  x if(x<=-0.05) else None)\ntp['neutral']=vaccine['title_polarity'].apply(lambda x: x if(x>-0.05 and x<=.05) else None)\ntp\n\nfig = plt.figure()\nfig.set_figheight(5)\nfig.set_figwidth(10)\n\nax = fig.add_subplot(111)\n\ncounts = [len((tp['positive']).value_counts()),len(tp['neutral'].value_counts()),len((tp['negative']).value_counts())]\n\npercents = [100*x\/sum(counts) for x in counts]\n\ny_ax = ('Positive','Neutral','Negative')\ny_tick = np.arange(len(y_ax))\n\nax.barh(range(len(counts)), counts, align = \"center\", color = ['red', 'black', 'orange'])\nax.set_yticks(y_tick)\nax.set_yticklabels(y_ax, size = 15)\nax.set_facecolor('xkcd:white')\n\nplt.xlabel('Polarity Of column title ', size=15)\n\n\n\nfor i, y in enumerate(ax.patches):\n    label_per = percents[i]\n    ax.text(y.get_width()+.09, y.get_y()+.3, str(round((y.get_width()), 1)), fontsize=15)\n    \n    ax.text(y.get_width()+.09, y.get_y()+.1, str(f'{round((label_per), 2)}%'), fontsize=15)\n\nsns.despine()\nplt.show()","34fb654f":"vaccine['Title_Sentiment_Value']=vaccine['title_polarity'].apply(lambda x : 'Neutral' if(x>-0.05 and x<=.05) else ('Negative' if(x<=-0.05) else 'Positive'))\n\n\nfig = px.scatter(vaccine, x=\"title_polarity\", y=\"title_subjectivity\", color=\"Title_Sentiment_Value\",)\nfig.update_layout(legend = dict(bgcolor = 'yellow'))\nfig.update_layout({\n'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","4d2621e6":"title_positive_polarity_words = ' '\" \".join(x for x in (vaccine[vaccine['title_polarity']>0.05])['title'].astype(str))\nbody_positive_polarity_words = ' '\" \".join(x for x in (vaccine[vaccine['body_polarity']>0.05])['title'].astype(str))\nprint('Length of Positive words in title and body are:',len(title_positive_polarity_words),'and',len(body_positive_polarity_words))\npositive_words=''\npositive_words=body_positive_polarity_words+title_positive_polarity_words\n\n\nwordcloud=WordCloud(width = 2000, height = 2000, \n                background_color ='black', colormap = 'rainbow',\n                min_font_size = 20).generate(positive_words)\nplt.figure(figsize = (8, 8), facecolor = None)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.tight_layout(pad = 0)\n  \nplt.show()","040813bf":"title_negative_polarity_words = ' '\" \".join(x for x in (vaccine[vaccine['title_polarity']<-0.05])['title'].astype(str))\nbody_negative_polarity_words = ' '\" \".join(x for x in (vaccine[vaccine['body_polarity']<-0.05])['title'].astype(str))\nprint('Length of negative words in title and body are:',len(title_negative_polarity_words),'and',len(body_negative_polarity_words))\nnegative_words=''\nnegative_words=body_negative_polarity_words+title_negative_polarity_words\nprint()\n\n\nwordcloud=WordCloud(width = 2000, height = 2000, \n                background_color ='black', colormap = 'rainbow',\n                min_font_size = 20).generate(negative_words)\nplt.figure(figsize = (8, 8), facecolor = None)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.tight_layout(pad = 0)\n  \nplt.show()\n","e1a08232":"### 5.7 Checking Polarity For Column Title","e634895d":"# 4. Data Visualizations","0ad4a4a4":"> **Important point:**\n> 1. Analysis of polarity shows 56% examples are positive.","86e372dd":"> **Important Findings:**\n> * A correlation of 0.92 is present betweem comms_num and score. So, one of these columns can be dropped.","ac4333d6":"### 5.5 Checking Polarity For Column Body","bec803f8":"### 3.3 Finding All The Categorical And Covariate Columns","aeae68eb":"### 5.1 Dropping Columns With High Correlation And Null Values ","86681982":"> **Important Findings:**\n> No duplicate rows found.","bc000567":"> **Important Findings:**\n> * Highest number of articles were published in the month of January.\n> * Lowest number of articles were published in the month of June.","475bfe4e":"<h2 style=\" text-align:center; color:Blue; font-size:40px; display: block;\"> <u><b><i>About The Dataset<\/i><\/b><\/u> <\/h1>\n","82605273":"### 3.2 Describing the attributes","997a6ed0":"### 4.6 Number Of Titles Published According To Month And Year","b45590fd":"### 5.6 Body Sentiment Polarity Vs Subjectivity","2b6b2e29":"### 4.3 KdePlot For comms_num","97c521a8":"### 5.3 Removing The Stop Words","c7183d4b":"**Important points:**\n> * nearly 51% titles are postive.","6c1a551c":"# 5. Data PreProcessing","d3971384":"> **Important Findings:**\n> * 1 column of type float.\n> * 2 column of type int.\n> * 5 columns of type object.","059fbf76":"# Conclusion\n\nIt can be observed neutral titles are the least.","5f58f6ea":"### 5.4 Finding Sensitivity And Subjectivity For The Textual Columns","6e08b8c5":"> Important points:\n> * comms_num dropped because highly correlated to score.\n> * id and created dropped because not important.\n> * timestamp dropped because we have already extracted year and month from it.\n> * url dropped because contains high number of null values.","61a56327":"**Data contains both posts and comments.\nBoth posts and comments contains the following fields:**\n\n**1. title - relevant for posts**\n\n**2. score - relevant for posts - based on impact, number of**\n\n**3. id - unique id for posts\/comments**\n\n**4. url - relevant for posts - url of post thread**\n\n**5. commns_num - relevant for post - number of comments to this post**\n\n**6. created - date of creation**\n\n**7. body - relevant for posts\/comments - text of the post or comment**\n\n**8. timestamp - timestamp**\n","a418524c":"### 4.4 Number Of Titles Published According to Year","8944f9fc":"### 5.10 Creating WordCloud For Negative Words","47e5f1d3":"### 3.6 Checking Null Values","19d4f1bf":"### 3.5 Checking Statistical Data\n\n","57c6a558":"**Subjectivity:**\n> * Generally refers to personal opinion, emotion or judgment whereas objective refers to factual information. Subjectivity is also a float which lies in the range of [0,1].\n> * Closer to 0 means its factual, and closer to 1 means its a public opinion.","28f17aa9":"# **1. Modules**","3699e779":"<h1 style=\" text-align:center; color:Blue; font-size:40px; display: block;\"> <u><b><i>Reddit Vaccine Myths<\/i><\/b><\/u> <\/h1>\n\n<p style=\"text-align:center; \">\n<img src=\"https:\/\/www.statnews.com\/wp-content\/uploads\/2020\/03\/AdobeStock_270886213.jpeg\n\" style='width: 800px;'>\n<\/p>\n","e34928e6":"### 4.2 Plotting The Null Values With HeatMap","ea65c6c4":"# **3. Analyzing The Data**","4562dfcd":"> **Important Findings:**\n> 1. Columns **url** and **body** have null values. \n> 2. Since column url has more than 30% null values. Therefore, we can drop it.","5cd7be3f":"### 4.5 Number Of Titles Published According To Month And Year","e971a18e":"**Polarity:**\n> For determining the polarity, a score of -0.05 we tag as negative and anything above 0.05 we tag as positive. Anything in between inclusively, we tag as neutral Its range lies between [-1,1].","d4657546":"### 3.1 Shape Of DataFrame","20549936":"> **Important Findings:**\n> * Highest number of articles were published in year 2019.\n> * Lowest number of articles were published in year 2018.","c315ebd2":"### 4.7 PairPlot","f199ada2":"### 5.8 Title Sentiment Polarity Vs Subjectivity","a707f321":"> **Important Findings:**\n> * The heatmap shows that highest null values are present in url, followed by body.","97eb5393":"### 3.4 Checking For Duplicate Rows\n\n","399ddf5b":"### 4.1 Plotting Pearson Correlation","374e4398":"# Notebook still in progress. Do share your feeedback and I will try to work on my mistakes. Thank you. :)","952637cb":"# **2. Loading The Data**","0f8c6591":"### 5.2 LowerCase The Textual Columns","a57bf61a":"### 5.9 Creating WordCloud For Positive Words"}}