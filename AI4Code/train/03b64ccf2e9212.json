{"cell_type":{"c9b36acb":"code","adc6df80":"code","ac01da2a":"code","b058f761":"code","f0b2c060":"code","e7697899":"code","ebbb1430":"code","8e6bfd90":"code","2a3789a3":"code","2dab60cf":"code","22a34941":"code","da5c0749":"markdown","75e2a54b":"markdown","4300bcf8":"markdown","cff6762e":"markdown","e655d07c":"markdown"},"source":{"c9b36acb":"import keras\nimport keras.backend as K\nfrom keras.layers import LSTM,Dropout,Dense,TimeDistributed,Conv1D,MaxPooling1D,Flatten\nfrom keras.models import Sequential\nimport tensorflow as tf\nimport pandas as pd\n# import pyarrow as pa\nimport pyarrow.parquet as pq\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#Both numpy and scipy has utilities for FFT which is an endlessly useful algorithm\nfrom numpy.fft import *\nfrom scipy import fftpack","adc6df80":"signals = pq.read_table('..\/input\/train.parquet', columns=[str(i) for i in range(999)]).to_pandas()\nprint('signals shape is: ',signals.shape)\n#Since data size is big we just load one third of it for now\nsignals = np.array(signals).T.reshape((999\/\/3, 3, 800000))\nprint('signals shape after reshaping is: ', signals.shape)\ntrain_df = pd.read_csv('..\/input\/metadata_train.csv')\nprint('metadata shape is: ',train_df.shape)","ac01da2a":"fig, axs = plt.subplots(2, 2, constrained_layout=True,figsize=(15, 10))\n\naxs[0,0].set_title('normal wires')\naxs[0,0].plot(signals[0, 0, :], label='Phase 0')\naxs[0,0].plot(signals[0, 1, :], label='Phase 1')\naxs[0,0].plot(signals[0, 2, :], label='Phase 2')\naxs[0,0].legend()\n\naxs[1,0].set_title('damaged wires')\naxs[1,0].plot(signals[1, 0, :], label='Phase 0')\naxs[1,0].plot(signals[1, 1, :], label='Phase 1')\naxs[1,0].plot(signals[1, 2, :], label='Phase 2')\naxs[1,0].legend()\n\naxs[0,1].set_title('normal wires')\naxs[0,1].plot(signals[77, 0, :], label='Phase 0')\naxs[0,1].plot(signals[77, 1, :], label='Phase 1')\naxs[0,1].plot(signals[77, 2, :], label='Phase 2')\naxs[0,1].legend()\n\naxs[1,1].set_title('damaged wires')\naxs[1,1].plot(signals[76, 0, :], label='Phase 0')\naxs[1,1].plot(signals[76, 1, :], label='Phase 1')\naxs[1,1].plot(signals[76, 2, :], label='Phase 2')\naxs[1,1].legend()\n\n\nplt.show()","b058f761":"target = train_df['target']\nplt.figure(figsize=(15, 10))\nsns.countplot(target)\nplt.show()\n\nprint('number of damaged samples', sum(target))\nprint('number of normal sampes', target.shape[0]-sum(target))","f0b2c060":"#FFT to filter out HF components and get main signal profile\ndef low_pass(s, threshold=1e4):\n    fourier = rfft(s)\n    frequencies = rfftfreq(s.size, d=2e-2\/s.size)\n    fourier[frequencies > threshold] = 0\n    return irfft(fourier)","e7697899":"#normal one\nlf_normal1_1 = low_pass(signals[0, 0, :])\nlf_normal1_2 = low_pass(signals[0, 1, :])\nlf_normal1_3 = low_pass(signals[0, 2, :])\n#normal two\nlf_normal2_1 = low_pass(signals[77, 0, :])\nlf_normal2_2 = low_pass(signals[77, 1, :])\nlf_normal2_3 = low_pass(signals[77, 2, :])\n#damaged one\nlf_damaged1_1 = low_pass(signals[1, 0, :])\nlf_damaged1_2 = low_pass(signals[1, 1, :])\nlf_damaged1_3 = low_pass(signals[1, 2, :])\n#damaged two\nlf_damaged2_1 = low_pass(signals[76, 0, :])\nlf_damaged2_2 = low_pass(signals[76, 1, :])\nlf_damaged2_3 = low_pass(signals[76, 2, :])","ebbb1430":"fig, axs = plt.subplots(2, 2, constrained_layout=True,figsize=(15, 10))\n\naxs[0,0].set_title('normal wires')\naxs[0,0].plot(lf_normal1_1, label='Phase 0')\naxs[0,0].plot(lf_normal1_2, label='Phase 1')\naxs[0,0].plot(lf_normal1_3, label='Phase 2')\naxs[0,0].legend()\n\naxs[1,0].set_title('damaged wires')\naxs[1,0].plot(lf_damaged1_1, label='Phase 0')\naxs[1,0].plot(lf_damaged1_2, label='Phase 1')\naxs[1,0].plot(lf_damaged1_3, label='Phase 2')\naxs[1,0].legend()\n\naxs[0,1].set_title('normal wires')\naxs[0,1].plot(lf_normal2_1, label='Phase 0')\naxs[0,1].plot(lf_normal2_2, label='Phase 1')\naxs[0,1].plot(lf_normal2_3, label='Phase 2')\naxs[0,1].legend()\n\naxs[1,1].set_title('damaged wires')\naxs[1,1].plot(lf_damaged2_1, label='Phase 0')\naxs[1,1].plot(lf_damaged2_2, label='Phase 1')\naxs[1,1].plot(lf_damaged2_3, label='Phase 2')\naxs[1,1].legend()\n\n\nplt.show()","8e6bfd90":"fig, axs = plt.subplots(2, 2, constrained_layout=True,figsize=(15, 10))\n\naxs[0,0].set_title('normal wires')\naxs[0,0].plot((np.abs(lf_normal1_1)+np.abs(lf_normal1_2)+np.abs(lf_normal1_3)))\naxs[0,0].plot(lf_normal1_1, label='Phase 0')\naxs[0,0].plot(lf_normal1_2, label='Phase 1')\naxs[0,0].plot(lf_normal1_3, label='Phase 2')\naxs[0,0].legend()\n\naxs[1,0].set_title('damaged wires')\naxs[1,0].plot((np.abs(lf_damaged1_1)+np.abs(lf_damaged1_2)+np.abs(lf_damaged1_3)))\naxs[1,0].plot(lf_damaged1_1, label='Phase 0')\naxs[1,0].plot(lf_damaged1_2, label='Phase 1')\naxs[1,0].plot(lf_damaged1_3, label='Phase 2')\naxs[1,0].legend()\n\naxs[0,1].set_title('normal wires')\naxs[0,1].plot((np.abs(lf_normal2_1)+np.abs(lf_normal2_2)+np.abs(lf_normal2_3)))\naxs[0,1].plot(lf_normal2_1, label='Phase 0')\naxs[0,1].plot(lf_normal2_2, label='Phase 1')\naxs[0,1].plot(lf_normal2_3, label='Phase 2')\naxs[0,1].legend()\n\naxs[1,1].set_title('damaged wires')\naxs[1,1].plot((np.abs(lf_damaged2_1)+np.abs(lf_damaged2_2)+np.abs(lf_damaged2_3)))\naxs[1,1].plot(lf_damaged2_1, label='Phase 0')\naxs[1,1].plot(lf_damaged2_2, label='Phase 1')\naxs[1,1].plot(lf_damaged2_3, label='Phase 2')\naxs[1,1].legend()\n\n\nplt.show()","2a3789a3":"###Filter out low frequencies from the signal to get HF characteristics\ndef high_pass(s, threshold=1e7):\n    fourier = rfft(s)\n    frequencies = rfftfreq(s.size, d=2e-2\/s.size)\n    fourier[frequencies < threshold] = 0\n    return irfft(fourier)","2dab60cf":"#normal one\nhf_normal1_1 = high_pass(signals[0, 0, :])\nhf_normal1_2 = high_pass(signals[0, 1, :])\nhf_normal1_3 = high_pass(signals[0, 2, :])\n#normal two\nhf_normal2_1 = high_pass(signals[77, 0, :])\nhf_normal2_2 = high_pass(signals[77, 1, :])\nhf_normal2_3 = high_pass(signals[77, 2, :])\n#damaged one\nhf_damaged1_1 = high_pass(signals[1, 0, :])\nhf_damaged1_2 = high_pass(signals[1, 1, :])\nhf_damaged1_3 = high_pass(signals[1, 2, :])\n#damaged two\nhf_damaged2_1 = high_pass(signals[76, 0, :])\nhf_damaged2_2 = high_pass(signals[76, 1, :])\nhf_damaged2_3 = high_pass(signals[76, 2, :])","22a34941":"fig, axs = plt.subplots(2, 2, constrained_layout=True,figsize=(15, 10))\n\naxs[0,0].set_title('normal wires')\naxs[0,0].plot(hf_normal1_1, label='Phase 0')\n# axs[0,0].plot(hf_normal1_2, label='Phase 1')\n# axs[0,0].plot(hf_normal1_3, label='Phase 2')\naxs[0,0].legend()\n\naxs[1,0].set_title('damaged wires')\naxs[1,0].plot(hf_damaged1_1, label='Phase 0')\naxs[1,0].plot(hf_damaged1_2, label='Phase 1')\naxs[1,0].plot(hf_damaged1_3, label='Phase 2')\naxs[1,0].legend()\n\naxs[0,1].set_title('normal wires')\naxs[0,1].plot(hf_normal2_1, label='Phase 0')\naxs[0,1].plot(hf_normal2_2, label='Phase 1')\naxs[0,1].plot(hf_normal2_3, label='Phase 2')\naxs[0,1].legend()\n\naxs[1,1].set_title('damaged wires')\naxs[1,1].plot(hf_damaged2_1, label='Phase 0')\naxs[1,1].plot(hf_damaged2_2, label='Phase 1')\naxs[1,1].plot(hf_damaged2_3, label='Phase 2')\naxs[1,1].legend()\n\n\nplt.show()","da5c0749":"****-This kernel is summary of kernesl I have seen for the dataset as well as some modification.****","75e2a54b":"### **TASK:** Classify long-term failure of covered conductors based on signal characteristics:\n- Extract features from time series data for classification.\n- Use **CNN** for further FE and **LSTM** to get temporal dependencies and perform time series classification on the top layer.","4300bcf8":"### What is partial discharge?\n\n - Typical situation of PD: imagine there is an internal cavity\/void or **impurity in insulation**. \n - When **High Voltage** is applied on conductor, a field is also induced on the cavity. Further, when the field increases, this **defect breaks down** and **discharges** different forms of energy which result in partial discharge.\n - This phenomenon is damaging over a long period of time. It is not event that occurs suddenly. ","cff6762e":"### Classical Modes of Detection\n- Partial Discharges can be detected by **measuring the emissions** they give off: Ultrasonic Sound, Transient Earth Voltages (TEV and UHF energy).\n- Is it possible to enhance the modes of detection by **better feature extraction** for the classifiers?\n- **Intel Mobile ODT** challenge on 2017 was about topping **classical image processing** methods by automatic feature extaction using pre-trained CNN models and **transfer learning**.\n- **Two possible approaches**:\n    - FE on signals and feeding them into NNs for classification.\n    - Using NNs further as feature extractors and then use shallow classifiers (XGBoost) for binary classification\n","e655d07c":"**Signals:**\n\n- 800.000 measurement points for 8712 signals.\n- The signals are **three-phased** so there are 2904 distinct signaling instances.\n- Three phase signals:\n    - Sums to zero.\n    - When one fails other continue to carry the current.\n    - Can be rectified to be converted to DC current.\n    - Ripples in rectification can be seen on failure.\n    \n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/4\/48\/3-phase_flow.gif\/357px-3-phase_flow.gif)"}}