{"cell_type":{"bf3489ca":"code","e6fc38ec":"code","8d8f4144":"code","1ecb09c5":"code","89dfe805":"code","82ff28d2":"code","9409b681":"code","1fd5d7aa":"code","d386f882":"code","e48a9a11":"code","f2ee5ea3":"code","8b70d7fd":"code","5a33b409":"code","07a1e8bd":"code","3654b375":"code","ee631a14":"code","688f789a":"code","0c229e11":"code","ed1f7512":"code","dcfc1b78":"code","77277a68":"code","3c90bc81":"code","da513590":"code","4bf8faad":"code","acaed8ea":"code","09346b85":"code","5e9ef4c9":"code","8b96ec1b":"markdown","921653c0":"markdown"},"source":{"bf3489ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e6fc38ec":"#Import dataset\n\ndf = pd.read_csv(\"\/kaggle\/input\/persona\/persona.csv\")","8d8f4144":"df.head()\n","1ecb09c5":"df.info()\n","89dfe805":"df.shape","82ff28d2":"df.columns","9409b681":"df.isnull().sum()","1fd5d7aa":"df.describe().T","d386f882":"#How many unique SOURCE are there? What are their frequencies?\n\ndf[\"SOURCE\"].nunique()\ndf[\"SOURCE\"].unique()\ndf[\"SOURCE\"].value_counts()","e48a9a11":"#How many unique PRICEs are there?\n\ndf[\"PRICE\"].nunique()\ndf[\"PRICE\"].unique()","f2ee5ea3":"#How many sales were made from which PRICE?\n\ndf[\"PRICE\"].value_counts()","8b70d7fd":"#How many sales from which country?\n\ndf[\"COUNTRY\"].value_counts()","5a33b409":"#How much was earned in total from sales by country?\n\ndf.groupby(\"COUNTRY\")[\"PRICE\"].sum()","07a1e8bd":"#What are the sales numbers by SOURCE types?\n\ndf.groupby(\"SOURCE\")[\"PRICE\"].count()","3654b375":"#What are the PRICE averages by country?\n\ndf.groupby(\"COUNTRY\")[\"PRICE\"].mean()","ee631a14":"#What are the PRICE averages by SOURCEs?\n\ndf.groupby(\"SOURCE\")[\"PRICE\"].mean()","688f789a":"#What are the PRICE averages in the COUNTRY-SOURCE breakdown?\n\ndf.groupby([\"COUNTRY\", \"SOURCE\"])[\"PRICE\"].mean()","0c229e11":"#Average earnings by COUNTRY, SOURCE, SEX, AGE\n\n\ndf.groupby([\"COUNTRY\", \"SOURCE\", \"SEX\", \"AGE\"]).agg({\"PRICE\":\"mean\"})","ed1f7512":"#Sort by Price in descending order and save as dataframe\n\nagg_df = df.groupby([\"COUNTRY\", \"SOURCE\", \"SEX\", \"AGE\"]).agg({\"PRICE\": \"mean\"}).sort_values(\"PRICE\", ascending=False)","dcfc1b78":"agg_df.head()","77277a68":"#Set indexes as column\n\nagg_df = agg_df.reset_index()\n","3c90bc81":"#Change type of  \"AGE\" variable to categorical, bin values and add as new column\n\nagg_df[\"AGE_CAT\"] = pd.cut(agg_df[\"AGE\"], bins=[0, 18, 23, 30, 40, 66],\n                           labels=[\"0_18\", \"19_23\", \"24_30\", \"31_40\", \"41_66\"])\n","da513590":"#Identify new level-based customers (personas). and as column\n\n\nagg_df[\"customer_level_based\"] = [\n    value[0].upper() + \"_\" + value[1].upper() + \"_\" + value[2].upper() + \"_\" + value[5].upper() for value in\n    agg_df.values]\n\nagg_df = agg_df[[\"customer_level_based\", \"PRICE\"]]\n\nagg_df = agg_df.groupby(\"customer_level_based\")[\"PRICE\"].mean().reset_index()","4bf8faad":"#Segment new customers (personas).\n\nagg_df[\"SEGMENT\"] = pd.qcut(agg_df[\"PRICE\"], 4, labels=[\"D\", \"C\", \"B\", \"A\"])\nagg_df.groupby(\"SEGMENT\").agg({\"PRICE\": [\"mean\", \"max\", \"sum\"]})\nagg_df[agg_df[\"SEGMENT\"] == \"C\"].agg({\"PRICE\": [\"mean\", \"max\", \"sum\"]})","acaed8ea":"#Classify new customers by segment and predict how much money they bring.\n\ndef predict_income(new_user):\n    return agg_df[agg_df[\"customer_level_based\"]==new_user]\n","09346b85":"predict_income(\"TUR_ANDROID_FEMALE_31_40\")\n","5e9ef4c9":"predict_income(\"FRA_IOS_FEMALE_31_40\")","8b96ec1b":"<h2>Rule Based Customer Segmentation<\/h2>\n\n<h3>Business Problem<\/h3>\n\nA game company wants to create level-based new customer definitions (personas) by using some features of its customers, and to create segments according to these new customer definitions and to estimate how much the new customers can earn on average according to these segments.\n\nFor Example: How much money come from it's customer who is 25-year-old, male and from Turkey, and he is an IOS user.\n\n\n<h3>Dataset<\/h3>\n\nPersona.csv dataset contains the prices of the products sold by an international game company and some demographic information of the users who buy these products.The data set consists of records created in each sales transaction.This means that the table is not deduplicated.In other words, a user with certain demographic characteristics may have made more than one purchase.\n\n\n","921653c0":"**Check Dataset**"}}