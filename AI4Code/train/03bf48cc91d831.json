{"cell_type":{"b71298dd":"code","1096af24":"code","1569f77e":"code","c9223f56":"code","15f7629c":"code","05c54530":"code","8d3d8458":"code","979e448d":"code","2b970e12":"code","968ec74b":"code","14690c09":"code","cf3f867b":"code","335857b8":"code","56b00bc1":"markdown","6cbaa505":"markdown","4ed4defd":"markdown","f6aee965":"markdown","04e01530":"markdown","7702befa":"markdown","fcd941f1":"markdown","733a23ab":"markdown","c2445d93":"markdown","572b2f0e":"markdown"},"source":{"b71298dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1096af24":"import os\nimport json\nimport numpy as np\nimport pandas as pd\nfrom pandas.io.json import json_normalize\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n\n%matplotlib inline\n\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999","1569f77e":"def load_df(csv_path='..\/input\/train.csv', nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'}, # Important!!\n                     nrows=nrows)\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df","c9223f56":"%%time\ntrain_df = load_df()\ntest_df = load_df(\"..\/input\/test.csv\")","15f7629c":"date_browser = train_df[['date','device.browser']]\nimport datetime\ndate_browser['date'] = date_browser['date'].apply(lambda x: datetime.date(int(str(x)[:4]), int(str(x)[4:6]), int(str(x)[6:])))\n\n\ndef custom_func(series):\n    Chrome = 0\n    Firefox = 0\n    IE = 0\n    custom_list = series.tolist()\n    for x in custom_list:\n        if x == 'Chrome':\n            Chrome = Chrome + 1\n        if x == 'Firefox':\n            Firefox = Firefox + 1\n        if x == 'Internet Explorer':\n            IE = IE + 1\n    return Chrome,Firefox,IE\n\n\ngrpd = date_browser.groupby('date')['device.browser'].agg([custom_func])\n\nchrome = []\nfirefox =[]\nie = []\n\nfor x in range(len(grpd)):\n    chrome.append(grpd['custom_func'][x][0])\n    firefox.append(grpd['custom_func'][x][1])\n    ie.append(grpd['custom_func'][x][2])\n    \nchrome = np.asarray(chrome)\nfirefox = np.asarray(firefox)\nie = np.asarray(ie)\n\nfrom sklearn.preprocessing import normalize\nchrome = normalize(chrome[:,np.newaxis], axis=0).ravel()\nfirefox = normalize(firefox[:,np.newaxis], axis=0).ravel()\nie = normalize(ie[:,np.newaxis], axis=0).ravel()\n\ngrpd['chrome'] = chrome\ngrpd['firefox'] = firefox\ngrpd['ie'] = ie","05c54530":"def scatter_plot(cnt_srs, color):\n    trace = go.Scatter(\n        x=cnt_srs.index[::-1],\n        y=cnt_srs.values[::-1],\n        showlegend=False,\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\ntrace1 = scatter_plot(grpd['chrome'], 'red')\ntrace2 = scatter_plot(grpd['firefox'], 'blue')\ntrace3 = scatter_plot(grpd['ie'], 'green')\n\nfig = tools.make_subplots(rows=3, cols=1, vertical_spacing=0.08,\n                          subplot_titles=[\"Chrome\", \"Firefox\",\"Internet Explorer\"])\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 3, 1)\nfig['layout'].update(height=800, width=1200, paper_bgcolor='rgb(233,233,233)', title=\"Date Plots\")\npy.iplot(fig, filename='date-plots')","8d3d8458":"grpd['chrome_rol'] = grpd['chrome'].rolling(10).mean()\ngrpd['firefox_rol'] = grpd['firefox'].rolling(10).mean()\ngrpd['ie_rol'] = grpd['ie'].rolling(10).mean()\n\ntrace1_rol = scatter_plot(grpd['chrome_rol'], 'red')\ntrace2_rol = scatter_plot(grpd['firefox_rol'], 'blue')\ntrace3_rol = scatter_plot(grpd['ie_rol'], 'green')\n\nfig = tools.make_subplots(rows=3, cols=1, vertical_spacing=0.08,\n                          subplot_titles=[\"Chrome\", \"Firefox\",\"Internet Explorer\"])\nfig.append_trace(trace1_rol, 1, 1)\nfig.append_trace(trace2_rol, 2, 1)\nfig.append_trace(trace3_rol, 3, 1)\nfig['layout'].update(height=800, width=1200, paper_bgcolor='rgb(233,233,233)', title=\"Date Plots\")\npy.iplot(fig, filename='date-plots')","979e448d":"date_continent = train_df[['date','geoNetwork.continent']]\nimport datetime\ndate_continent['date'] = date_continent['date'].apply(lambda x: datetime.date(int(str(x)[:4]), int(str(x)[4:6]), int(str(x)[6:])))\n\n\ndef custom_func(series):\n    Americas = 0\n    Asia = 0\n    Europe = 0\n    Oceania = 0\n    Africa = 0\n    custom_list = series.tolist()\n    for x in custom_list:\n        if x == 'Americas':\n            Americas = Americas + 1\n        if x == 'Asia':\n            Asia = Asia + 1\n        if x == 'Europe':\n            Europe = Europe + 1\n        if x == 'Oceania':\n            Oceania = Oceania + 1\n        if x == 'Africa':\n            Africa = Africa + 1\n    return Americas,Asia,Europe,Oceania,Africa\n\n\ncont_grpd = date_continent.groupby('date')['geoNetwork.continent'].agg([custom_func])\n\namericas = []\nasia =[]\neurope = []\noceania = []\nafrica = []\n\nfor x in range(len(cont_grpd)):\n    americas.append(cont_grpd['custom_func'][x][0])\n    asia.append(cont_grpd['custom_func'][x][1])\n    europe.append(cont_grpd['custom_func'][x][2])\n    oceania.append(cont_grpd['custom_func'][x][3])\n    africa.append(cont_grpd['custom_func'][x][4])\n    \namericas = np.asarray(americas)\nasia = np.asarray(asia)\neurope = np.asarray(europe)\noceania = np.asarray(oceania)\nafrica = np.asarray(africa)\n\n'''from sklearn.preprocessing import normalize\nchrome = normalize(chrome[:,np.newaxis], axis=0).ravel()\nfirefox = normalize(firefox[:,np.newaxis], axis=0).ravel()\nie = normalize(ie[:,np.newaxis], axis=0).ravel()'''\n\ngrpd['americas'] = americas\ngrpd['asia'] = asia\ngrpd['europe'] = europe\ngrpd['oceania'] = oceania\ngrpd['africa'] = africa\n","2b970e12":"trace1 = scatter_plot(grpd['americas'], 'red')\ntrace2 = scatter_plot(grpd['asia'], 'blue')\ntrace3 = scatter_plot(grpd['europe'], 'green')\ntrace4 = scatter_plot(grpd['oceania'], 'black')\ntrace5 = scatter_plot(grpd['africa'], 'pink')\n\nfig = tools.make_subplots(rows=5, cols=1, vertical_spacing=0.08,\n                          subplot_titles=[\"americas\", \"asia\",\"europe\",\"oceania\",\"africa\"])\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 3, 1)\nfig.append_trace(trace4, 4, 1)\nfig.append_trace(trace5, 5, 1)\nfig['layout'].update(height=800, width=1200, paper_bgcolor='rgb(233,233,233)', title=\"Date Plots\")\npy.iplot(fig, filename='date-plots')","968ec74b":"grpd['americas_rol'] = grpd['americas'].rolling(10).mean()\ngrpd['asia_rol'] = grpd['asia'].rolling(10).mean()\ngrpd['europe_rol'] = grpd['europe'].rolling(10).mean()\ngrpd['oceania_rol'] = grpd['oceania'].rolling(10).mean()\ngrpd['africa_rol'] = grpd['africa'].rolling(10).mean()\n\ntrace1_rol = scatter_plot(grpd['americas_rol'], 'red')\ntrace2_rol = scatter_plot(grpd['asia_rol'], 'blue')\ntrace3_rol = scatter_plot(grpd['europe_rol'], 'green')\ntrace4_rol = scatter_plot(grpd['oceania_rol'], 'black')\ntrace5_rol = scatter_plot(grpd['africa_rol'], 'pink')\n\n\nfig = tools.make_subplots(rows=5, cols=1, vertical_spacing=0.08,\n                          subplot_titles=[\"americas\", \"asia\",\"europe\",\"oceania\",\"africa\"])\nfig.append_trace(trace1_rol, 1, 1)\nfig.append_trace(trace2_rol, 2, 1)\nfig.append_trace(trace3_rol, 3, 1)\nfig.append_trace(trace4_rol, 4, 1)\nfig.append_trace(trace5_rol, 5, 1)\nfig['layout'].update(height=800, width=1200, paper_bgcolor='rgb(233,233,233)', title=\"Date Plots\")\npy.iplot(fig, filename='date-plots')","14690c09":"date_device = train_df[['date','device.deviceCategory']]\nimport datetime\ndate_device['date'] = date_device['date'].apply(lambda x: datetime.date(int(str(x)[:4]), int(str(x)[4:6]), int(str(x)[6:])))\n\n\ndef custom_func(series):\n    desktop = 0\n    mobile = 0\n    tablet = 0\n    custom_list = series.tolist()\n    for x in custom_list:\n        if x == 'desktop':\n            desktop = desktop + 1\n        if x == 'mobile':\n            mobile = mobile + 1\n        if x == 'tablet':\n            tablet = tablet + 1\n    return desktop,mobile,tablet\n\n\ndev_grpd = date_device.groupby('date')['device.deviceCategory'].agg([custom_func])\n\ndesktop = []\nmobile = []\ntablet = []\n\nfor x in range(len(cont_grpd)):\n    desktop.append(cont_grpd['custom_func'][x][0])\n    mobile.append(cont_grpd['custom_func'][x][1])\n    tablet.append(cont_grpd['custom_func'][x][2])\n    \ndesktop = np.asarray(desktop)\nmobile = np.asarray(mobile)\ntablet = np.asarray(tablet)\n\n'''from sklearn.preprocessing import normalize\nchrome = normalize(chrome[:,np.newaxis], axis=0).ravel()\nfirefox = normalize(firefox[:,np.newaxis], axis=0).ravel()\nie = normalize(ie[:,np.newaxis], axis=0).ravel()'''\n\ngrpd['desktop'] = desktop\ngrpd['mobile'] = mobile\ngrpd['tablet'] = tablet\n","cf3f867b":"trace1 = scatter_plot(grpd['desktop'], 'red')\ntrace2 = scatter_plot(grpd['mobile'], 'blue')\ntrace3 = scatter_plot(grpd['tablet'], 'green')\n\nfig = tools.make_subplots(rows=3, cols=1, vertical_spacing=0.08,\n                          subplot_titles=[\"desktop\", \"mobile\",\"tablet\"])\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 3, 1)\nfig['layout'].update(height=800, width=1200, paper_bgcolor='rgb(233,233,233)', title=\"Date Plots\")\npy.iplot(fig, filename='date-plots')","335857b8":"grpd['desktop_rol'] = grpd['desktop'].rolling(10).mean()\ngrpd['mobile_rol'] = grpd['mobile'].rolling(10).mean()\ngrpd['tablet_rol'] = grpd['tablet'].rolling(10).mean()\n\ntrace1_rol = scatter_plot(grpd['desktop_rol'], 'red')\ntrace2_rol = scatter_plot(grpd['mobile_rol'], 'blue')\ntrace3_rol = scatter_plot(grpd['tablet_rol'], 'green')\n\n\nfig = tools.make_subplots(rows=3, cols=1, vertical_spacing=0.08,\n                          subplot_titles=[\"desktop\", \"mobile\",\"tablet\"])\nfig.append_trace(trace1_rol, 1, 1)\nfig.append_trace(trace2_rol, 2, 1)\nfig.append_trace(trace3_rol, 3, 1)\nfig['layout'].update(height=800, width=1200, paper_bgcolor='rgb(233,233,233)', title=\"Date Plots\")\npy.iplot(fig, filename='date-plots')","56b00bc1":"# **Getting JSON data as Dataframe (Below solution was obtained from Kernel named Quick start: read csv and flatten json fields by Julian)**","6cbaa505":"### **The solution below looks for the trend in the moving average of the traffic coming from various continents to G Store**","4ed4defd":"### ******Below solution looks at all  continents and the number of people accessing the G Store through the given time period ******","f6aee965":"**The solution below looks for the trend in the moving average of the usage of 3 browser to access G Store**","04e01530":"### **The solution below looks for the trend in the moving average of the traffic coming from various devices to G Store**","7702befa":"### All three browsers register a greater use in access of GStore between November 2016 and before January 2017. But they also register the least usage in January 2017 with a sudden drop from December 2016 to January 2017.","fcd941f1":"### ******Below solution looks at various devices used to  access the G Store through the given time period ******","733a23ab":"### ******Below solution looks for the use of browser mainly Chrome,Firefox and IE through the time period avaliable through data given******","c2445d93":"### All continents register their least period of access to GStore during January 2017. All continents give a drop in traffic to G Store.","572b2f0e":"> ***All graphs register a drop between November 2016 and  January 2017 . What major event caused this drop in traffic? Or is it seasonal? *****"}}