{"cell_type":{"b079e890":"code","1a67b1a1":"code","91c026f5":"code","c674b397":"code","0b9794b5":"code","124b74f5":"code","40a7eee0":"code","8556acde":"code","3290ed74":"code","69bed5fa":"code","04e4d750":"code","530eac5e":"code","9550533b":"code","2cfb9a2e":"code","4da879bd":"code","00395de7":"code","6a0f1f62":"code","37398729":"code","37dd627d":"code","85eb1576":"code","b588df4f":"code","29ea1104":"code","52209ddd":"code","98c6db32":"code","f2898973":"code","b7e34027":"code","6e5f45c9":"code","3206f335":"code","795a3df4":"code","20caa382":"code","2fdad8c6":"code","cb556dbc":"code","da5a51cb":"code","3357e6fd":"code","75558156":"code","d2482f38":"markdown","c2fa67b4":"markdown","3e684578":"markdown","3964f301":"markdown","cc2aff87":"markdown","e7dd86db":"markdown","52e5d0f1":"markdown","75b70763":"markdown"},"source":{"b079e890":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1a67b1a1":"# read order data\nolist_order = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_orders_dataset.csv')\n# read order payment data\nolist_payment = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_payments_dataset.csv')\n# read order item data\nolist_item_order = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_items_dataset.csv')\n# read customer data\nolist_customer = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_customers_dataset.csv')\n# read products data\nolist_products = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_products_dataset.csv')\n# read products category translation data\nolist_category = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/product_category_name_translation.csv')\n# read review data\nolist_reviews = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_reviews_dataset.csv')\n# read sellers data\nolist_sellers = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_sellers_dataset.csv')\n# read geolocation data\nolist_geolocation = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_geolocation_dataset.csv')\n","91c026f5":"# order information\n\nprint(olist_order.head())\n\nprint(\"# of records\",olist_order.shape)\nprint(\"# of unique orders\",olist_order.order_id.nunique())\nprint(\"# of unique customers\",olist_order.customer_id.nunique())","c674b397":"# explore payment data \n\nprint(olist_payment.head())\n\nprint(\"# records\",olist_payment.shape)\nprint(\"# unique orders\",olist_payment.order_id.nunique())\n\n# get one order id where payment was made through more than one method\nprint(olist_payment[olist_payment['payment_sequential'] > 1].head())\n\n# look through one such order id \nprint(olist_payment[olist_payment['order_id'] == \"5cfd514482e22bc992e7693f0e3e8df7\"])\n\nprint(\" different payemnt types\",olist_payment.payment_type.value_counts())\n\n","0b9794b5":"# explore order item data\n\nprint(olist_item_order.head())\n\nprint(\"# records\",olist_item_order.shape)\nprint(\"# unique orders\",olist_item_order.order_id.nunique())\nprint(\"# unique products\",olist_item_order.product_id.nunique())\n\n# distribution of price\nprint(olist_item_order.price.describe())\nprint(olist_item_order.freight_value.describe())","124b74f5":"# explore customer data\n\nprint(olist_customer.head())\nprint(\"# records\",olist_customer.shape)\nprint(\"# unique cusotmer id\",olist_customer.customer_id.nunique())\nprint(\"# unique cusotmer unique id\",olist_customer.customer_unique_id.nunique())","40a7eee0":"# explore products data\n\nprint(olist_products.head())\n\nprint(\"# records\",olist_products.shape)\nprint(\"# unique products\",olist_products.product_id.nunique())\n\nprint(\"# unique category\",olist_products.product_category_name.nunique())\n","8556acde":"# category name translation from spanish to english\nolist_category.head()","3290ed74":"# explore reviews data\nprint(olist_reviews.head())\nprint(olist_reviews.shape)\n\nprint(olist_reviews.order_id.nunique())\n\n# group review by order id\n\nreview_grp = olist_reviews.groupby('order_id').agg({'review_score':'mean'}).reset_index()\n\n","69bed5fa":"# explore sellers data\n\nolist_sellers.head()\n\n# explore geolocation data\n\nolist_geolocation.tail()","04e4d750":"# merge order and customer demo data\n\ndf_process_v1 = olist_order.merge(olist_customer,on = 'customer_id', how = 'inner')\n\n# merge order item information with order information, this will bring data at order_id - item_id level\n\ndf_process_v2 = olist_item_order.merge(df_process_v1,on = 'order_id',how = 'left')\n\n# merge product data with above trasnaction data\n\n#check shape\nprint(df_process_v2.shape)\ndf_process_v2 = df_process_v2.merge(olist_products,on = 'product_id',how = 'inner')\n\n# check shape\nprint(df_process_v2.shape)\n\n# merge english names of categories\ndf_transaction_v1 = df_process_v2.merge(olist_category, on = 'product_category_name',how = 'inner')\n# check shape\nprint(df_transaction_v1.shape)\n\n# merge review rating\n\ndf_transaction_v1 = df_transaction_v1.merge(review_grp, on = 'order_id', how = 'left')\n","530eac5e":"# df_transaction_v1 = df_transaction_v1.merge(review_grp, on = 'order_id', how = 'inner')\n\n# review_grp.order_id.nunique()\ndf_transaction_v1.shape","9550533b":"df_transaction_v1['product_height_cm'].fillna(df_transaction_v1['product_height_cm'].mean(),inplace = True)\ndf_transaction_v1['product_weight_g'].fillna(df_transaction_v1['product_weight_g'].mean(),inplace = True)\ndf_transaction_v1['product_width_cm'].fillna(df_transaction_v1['product_width_cm'].mean(),inplace = True)\ndf_transaction_v1['product_length_cm'].fillna(df_transaction_v1['product_length_cm'].mean(),inplace = True)\ndf_transaction_v1['product_height_cm'].fillna(df_transaction_v1['product_height_cm'].mean(),inplace = True)\n\n","2cfb9a2e":"df_transaction_v1.isna().sum()","4da879bd":"#bring in the payment information \n\n#filtering out payment type as voucher separately and rest as others\nolist_payment.loc[olist_payment.payment_type.isin(['voucher']),'payment_type_new'] = 'voucher'\nolist_payment['payment_type_new'].fillna('other',inplace = True)\n\nolist_payment_grp = olist_payment.groupby(['order_id','payment_type_new']).agg({'payment_value':'sum'}).reset_index()\n\n# pivot up data to get voucher, non voucher revenue corresponding to each order_id\nolist_payment_grp_pvt = olist_payment_grp.pivot(index = 'order_id',columns='payment_type_new',values = 'payment_value').reset_index()\nolist_payment_grp_pvt.fillna(0,inplace = True)\n\n#merge this information with transactional data\ndf_transaction_v2 = df_transaction_v1.merge(olist_payment_grp_pvt[['order_id','other','voucher']],on = 'order_id', how = 'left')","00395de7":"df_transaction_v2.head()","6a0f1f62":"df_transaction_v1.order_purchase_timestamp.min()","37398729":"df_transaction_v1.shape","37dd627d":"df_transaction_v2.to_csv('olist_merged_transaction.csv',index=False)","85eb1576":"#qc check if revenue mathces\n\ndf_v1 = df_process_v2.groupby(['order_id']).agg({'price':'sum','freight_value':'sum'}).reset_index()\ndf_v1['total_revenue_frm_item'] = df_v1['price'] + df_v1['freight_value']\ndf_v1['total_revenue_frm_item'] = df_v1['total_revenue_frm_item'].round(2)\n\n# olist_payment_grp_pvt['total_revenue'] = olist_payment_grp_pvt['other'] + olist_payment_grp_pvt['voucher']\ndf_v2 = df_v1.merge(olist_payment_grp_pvt,on = 'order_id')\ndf_v2['total_revenue_frm_pymnt'] = df_v2['other'] + df_v2['voucher']\ndf_v2['total_revenue_frm_pymnt'] = df_v2['total_revenue_frm_pymnt'].round(2)","b588df4f":"# there is mismatch in sum, probably due to floating point error\n\ndf_v2.total_revenue_frm_item","29ea1104":"df_v2['total_revenue_frm_pymnt']","52209ddd":"import datetime as dt\nfrom datetime import timedelta\ndf_transaction_v2['order_purchase_timestamp'] = pd.to_datetime(df_transaction_v2['order_purchase_timestamp'])\ndf_transaction_v2['order_year'] = df_transaction_v2['order_purchase_timestamp'].dt.year\ndf_transaction_v2['order_month'] = df_transaction_v2['order_purchase_timestamp'].dt.month\n","98c6db32":"# filter data for 3 months Aug'17 - Oct'17\n\nfilter_transaction_v1 = df_transaction_v2[(df_transaction_v2['order_month'].isin([8,9,10])) & (df_transaction_v2['order_year'].isin([2017]))]","f2898973":"# sample customers from transaction data from the filtered period - customers who were sent offers and reedemed those offers\n\n#set seed\nnp.random.seed(seed = 42)\n\nsample_cust = pd.Series(filter_transaction_v1.customer_unique_id.unique()).sample(frac = 0.25,random_state = 42)\noffer_sent = np.random.randint(1,11,len(sample_cust))\n\noffer_sent_redeem = pd.DataFrame({'customer_unique_id':sample_cust,\n                                 'offer_id':offer_sent}).reset_index(drop = True)\n\noffer_sent_redeem['offer_redeem'] = 1\n\n# sample customers from full transaction data  - get customers who were sent offers but did not reedem\n\n\nsample_cust = pd.Series(df_transaction_v2.customer_unique_id.unique()).sample(n = offer_sent_redeem.shape[0],random_state = 42)\noffer_sent = np.random.randint(1,11,len(sample_cust))\n\noffer_sent_no_redeem = pd.DataFrame({'customer_unique_id':sample_cust,\n                                 'offer_id':offer_sent}).reset_index(drop=True)\n\noffer_sent_no_redeem['offer_redeem'] = None\n# concat offer data \n\noffer_sent = pd.concat([offer_sent_redeem,offer_sent_no_redeem],axis = 0)\noffer_sent.drop_duplicates(['customer_unique_id'],keep = 'first',inplace = True)\noffer_sent['offer_redeem'].fillna(0,inplace = True)\n\n# add offer sent data - assume same date for all\n\noffer_sent['offer_sent_date'] = \"07\/31\/2017\"\noffer_sent['offer_sent_date'] = pd.to_datetime(offer_sent['offer_sent_date'], format='%m\/%d\/%Y')\noffer_sent['validity_days'] = 90\noffer_sent['offer_validity_date'] = offer_sent['offer_sent_date'] + timedelta(days = 90)\n","b7e34027":"# prepare modeling data\n\n#merge transaction and campaign data\n\nmodel_data_v1 = df_transaction_v2.merge(offer_sent,on = 'customer_unique_id',how = 'inner')\nmodel_data_v1 = model_data_v1[(model_data_v1['order_purchase_timestamp']<= model_data_v1['offer_validity_date']) & (model_data_v1['order_purchase_timestamp'] >= model_data_v1['offer_sent_date'])]\n\ncustomer_revenue = model_data_v1.groupby(['customer_unique_id']).agg({'price':'sum','freight_value':'sum'}).reset_index()\ncustomer_revenue['revenue'] = customer_revenue['price'] + customer_revenue['freight_value']\n\nmodel_data_v1 = model_data_v1.merge(customer_revenue[['customer_unique_id','revenue']],on = 'customer_unique_id',how = 'inner')\n\nmodel_data_v1.drop(['offer_sent_date','offer_validity_date','validity_days','other','voucher'],axis = 1,inplace = True)","6e5f45c9":"model_data_v1.columns","3206f335":"# control group samples\nmodel_data_v2 = filter_transaction_v1[~filter_transaction_v1.customer_unique_id.isin(model_data_v1.customer_unique_id)]\nmodel_data_v2.loc[:,'offer_id'] = 0\n\ncustomer_revenue = model_data_v2.groupby(['customer_unique_id']).agg({'price':'sum','freight_value':'sum'}).reset_index()\ncustomer_revenue['revenue'] = customer_revenue['price'] + customer_revenue['freight_value']\n\nmodel_data_v2 = model_data_v2.merge(customer_revenue[['customer_unique_id','revenue']],on = 'customer_unique_id',how = 'inner')\nmodel_data_v2.drop(['other','voucher'],axis = 1,inplace = True)","795a3df4":"model_data = pd.concat([model_data_v1,model_data_v2])","20caa382":"# remove columns from model data\nmodel_data.drop(['order_id', 'order_item_id', 'product_id', 'seller_id',\n       'shipping_limit_date', 'price', 'freight_value', 'customer_id','order_purchase_timestamp', 'order_approved_at',\n       'order_delivered_carrier_date', 'order_delivered_customer_date',\n       'order_estimated_delivery_date', 'customer_unique_id'],axis = 1,inplace = True)","2fdad8c6":"model_data.head()\n","cb556dbc":"model_data.to_csv('offer_modeling_data_v1.csv',index = False)","da5a51cb":"product_cat = list(model_data.product_category_name_english.unique())\noffer_ids = list(model_data.offer_id.unique())\noffer_ids.remove(0)\noffer_list = []\nfor offer_id in offer_ids:\n    offer_dict = {\"offer_id\": int(offer_id),\n                  \"product_category\": product_cat,\n                  \"budget\" : int(np.random.randint(1000,5000)),\n                 \"reward\": int(np.random.randint(4,11))}\n    offer_list.append(offer_dict)\n    \ncampaign_config_file = {}\n\ncampaign_config_file['offer_ids'] = offer_list","3357e6fd":"type(offer_id)","75558156":"# write campaing config file to json\nimport json\n\nwith open('campaign_config.json','w') as fp:\n    json.dump(campaign_config_file,fp)","d2482f38":"Item Order information\n    - this table contains information about items in each order, price, shipping date & freight value","c2fa67b4":"Order Information \n    - Order ID, Customer ID, Date of Transaction & delivery etc.\n    - Data is unique at order_id level, also each order has a unique customer id","3e684578":"# Campaign config file","3964f301":"Explore customer data\n\n - each order id originally had a unique customer id mappedn, a customer_unique_id is provided to identify customers who make repurchases","cc2aff87":"# Part 2 - Creating Campaign data","e7dd86db":"Payment Information\n\n    - Order ID, payment sequential (if a customer pays with more than one payment method), payment type, installment and value\n    - an Order ID can have multiple payment method associated\n    ","52e5d0f1":"explore reviews data\n    - reviews corresponding to each order id\n    - rating and comments","75b70763":"products data\n\n - contains product category and dimensions"}}