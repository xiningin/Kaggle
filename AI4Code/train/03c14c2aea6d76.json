{"cell_type":{"e7c0922b":"code","e1a5b540":"code","f9d02c98":"code","e5298fa5":"code","e89dc59d":"code","5671f1a2":"code","7ff4a47f":"code","a08f738c":"code","f837eb78":"code","ddad6e95":"code","63be9688":"code","6f0e3106":"code","dd1f6f02":"code","6a57c1d9":"code","b61504af":"code","7ad47bd6":"code","4a804ddd":"code","661d967b":"code","9cb962a8":"code","8623eb9b":"code","1cc58bea":"code","def4c7ec":"code","c8a2278d":"markdown","370cd820":"markdown","10359ab1":"markdown","d08989b0":"markdown","d6ad2f8f":"markdown","5e5448d8":"markdown","1c1aba12":"markdown","d8bace4e":"markdown","8c07ca42":"markdown","7502ba4b":"markdown"},"source":{"e7c0922b":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow.keras.layers as L\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.model_selection import train_test_split\n\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (12, 5);\nsns.set_style('whitegrid')","e1a5b540":"root_dir = '..\/input\/lish-moa\/'\ndfs = {}\n\nfor file in os.listdir(root_dir):\n    dfs[file.split('.')[0]] = pd.read_csv(os.path.join(root_dir, file))\nfor k, v in dfs.items():\n    print(k)\n    print(v.shape)\n    print('-'*10)","f9d02c98":"for k in ['test_features', 'train_features']:\n    print(k)\n    compound_cols = [x for x in dfs[k].keys() if x.startswith('cp_')]\n    gene_cols = [x for x in dfs[k].keys() if x.startswith('g-')]\n    cell_cols = [x for x in dfs[k].keys() if x.startswith('c-')]\n    print('compound features:', len(compound_cols),\n         'gene features:', len(gene_cols),\n         'cell features:', len(cell_cols))\n    \"\"\"\n    uncomment if needed\n    print('compounds:')\n    print(dfs[k][compound_cols].describe())\n    print('genes:')\n    print(dfs[k][gene_cols].describe())\n    print('cells:')\n    print(dfs[k][cell_cols].describe())\n    \"\"\"\n    print('~'*10)","e5298fa5":"for c in compound_cols:\n    print('train:\\n', dfs['train_features'][c].value_counts())\n    print('test:\\n', dfs['test_features'][c].value_counts())","e89dc59d":"fig, ax = plt.subplots(2, 2)\ngs = [dfs['train_features'][gene_cols[x]] for x in np.random.choice(list(range(len(gene_cols))), size=4)]\nsns.distplot(gs[0], ax=ax[0][0]);\nsns.distplot(gs[1], ax=ax[0][1]);\nsns.distplot(gs[2], ax=ax[1][0]);\nsns.distplot(gs[3], ax=ax[1][1]);\nplt.tight_layout();","5671f1a2":"fig, ax = plt.subplots(2, 2)\ngs = [dfs['train_features'][cell_cols[x]] for x in np.random.choice(list(range(len(cell_cols))), size=4)]\nsns.distplot(gs[0], ax=ax[0][0], color='gold');\nsns.distplot(gs[1], ax=ax[0][1], color='gold');\nsns.distplot(gs[2], ax=ax[1][0], color='gold');\nsns.distplot(gs[3], ax=ax[1][1], color='gold');\nplt.tight_layout();","7ff4a47f":"for df in dfs.values():\n    print(df.isna().sum().sum())","a08f738c":"dfs['train_targets_scored'].head(3)","f837eb78":"dfs['train_targets_scored'].drop('sig_id', axis=1).sum().sort_values()","ddad6e95":"corr_t = dfs['train_targets_scored'].corr().abs()\nsns.heatmap(corr_t[corr_t>0.75], cmap='OrRd');","63be9688":"temp_df = pd.merge(dfs['train_targets_scored'],\n                    dfs['train_features'], on='sig_id')\ncorr = temp_df.corr()","6f0e3106":"corr.dropna(inplace=True)\nsns.heatmap(corr, cmap='coolwarm');","dd1f6f02":"del temp_df","6a57c1d9":"targets = dfs['train_targets_scored'].drop('sig_id', axis=1).sum()\n    \nleast = sorted(targets.items(), key=lambda x: x[1])[:10]\nmost = sorted(targets.items(), key=lambda x: x[1])[-10:]\nleast_x = [i[0] for i in least]\nleast_y = [i[1] for i in least]\nmost_x = [i[0] for i in most]\nmost_y = [i[1] for i in most]\nfig, ax = plt.subplots(1, 2)\nax[0].bar(least_x, least_y, color='purple');\nax[0].tick_params(axis='x', labelrotation=75);\nax[1].bar(most_x, most_y, color='purple');\nax[1].tick_params(axis='x', labelrotation=75);","b61504af":"targets_ns = dfs['train_targets_nonscored'].drop('sig_id', axis=1).sum()\n    \nleast = sorted(targets_ns.items(), key=lambda x: x[1])[:10]\nmost = sorted(targets_ns.items(), key=lambda x: x[1])[-10:]\nleast_x = [i[0] for i in least]\nleast_y = [i[1] for i in least]\nmost_x = [i[0] for i in most]\nmost_y = [i[1] for i in most]\nfig, ax = plt.subplots(1, 2)\nax[0].bar(least_x, least_y, color='green');\nax[0].tick_params(axis='x', labelrotation=75);\nax[1].bar(most_x, most_y, color='green');\nax[1].tick_params(axis='x', labelrotation=75);","7ad47bd6":"len(targets_ns[targets_ns==0])","4a804ddd":"X = dfs['train_features'].drop('sig_id', axis=1)\nX['cp_type'] = X['cp_type'].apply(lambda x: 0 if x=='trt_cp' else 1)\nX['cp_time'] = X['cp_time'].apply(lambda x: 0 if x==24 else 1)\nX['cp_dose'] = X['cp_dose'].apply(lambda x: 0 if x=='D1' else 1)\ny = dfs['train_targets_scored'].drop('sig_id', axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X.values, y.values,\n    test_size=0.25)\n\nmodel = Sequential()\nmodel.add(L.Input(shape=X.shape[1]))\nmodel.add(L.Dense(512, activation='relu'))\nmodel.add(L.Dense(y.shape[1], activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', \n              optimizer='adam', \n              metrics=['binary_crossentropy', 'accuracy'])\nmodel.summary()","661d967b":"model.fit(X_train, y_train, epochs=5)\nmodel.evaluate(X_test, y_test)","9cb962a8":"X = dfs['test_features'].drop('sig_id', axis=1)\nX['cp_type'] = X['cp_type'].apply(lambda x: 0 if x=='trt_cp' else 1)\nX['cp_time'] = X['cp_time'].apply(lambda x: 0 if x==24 else 1)\nX['cp_dose'] = X['cp_dose'].apply(lambda x: 0 if x=='D1' else 1)","8623eb9b":"preds = model.predict(X)","1cc58bea":"sub = dfs['sample_submission']\nfor i, p in zip(sub.index, preds):\n    sub.loc[i, 1:] = p\nsub.head(3)","def4c7ec":"sub.to_csv('submission.csv', index=False)","c8a2278d":"### Intro\n\nThanks for checking out my notebook. Here we will shortly explore some bits of usefull insights about the task we are given. Hopefully you find it useful.","370cd820":"So here we have all features balanced but one: `cp_type`. As we understood before this minority class `ctrl_vehicle` should have zero action for all labels. Take a note as we go.","10359ab1":"*Whatis Mechanisms of Action anyway?* Quickly looking at <a href='https:\/\/www.cancer.gov\/publications\/dictionaries\/cancer-terms'>NCI Dictionary of Cancer Terms<\/a> we find the defenition:\n> In medicine, a term used to describe how a drug or other substance produces an effect in the body. For example, a drug\u2019s mechanism of action could be how it affects a specific target in a cell, such as an enzyme, or a cell function, such as cell growth.","d08989b0":"We can observe really week correclations between raw features and targets, however, the correlation between the features themselves are quite strong. This might helpful to use dimentionality reduction techniques when we will build up the solution.","d6ad2f8f":"Both genes and cells values are normaly distributes except a few. Could those be outliers? Perphaps... ","5e5448d8":"I hope some of the highlights will help you get started. Good luck!","1c1aba12":"#### Baseline model\nTo see if we might encounter problems during submission let's create a simple model and make some predictions. Perphaps neural network is too much overkill for you but it allows us to work with highly dimentional data with minimal preprocessing.","d8bace4e":"Well we can see clear some labels are in danger of being overlooked by any model we might build simply because they are underrepresented. Keep that in mind as we progress.","8c07ca42":"Here is where we find the classes that are not even present, i.e. non of the train samples is labeled as say calpain_inhibitor. The presence of this class actually suggest we will have it in the test dataset. Out of curiosity let's see how much such empty labels we have.","7502ba4b":"So we have over 800 features, over 200 labels, over 23k train samples and almost 4k test samples. It is sensible to assume target vectors will be sparse despite problem being multilabel one. But let's not jump to conclusions just yet.\n\nAlso here is what we should highlight from data descriptions:\n\n> Features g- signify gene expression data, and c- signify cell viability data. cp_type indicates samples treated with a compound (cp_vehicle) or with a control perturbation (ctrl_vehicle); control perturbations have no MoAs; cp_time and cp_dose indicate treatment duration (24, 48, 72 hours) and dose (high or low). "}}