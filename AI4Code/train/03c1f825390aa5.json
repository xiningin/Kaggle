{"cell_type":{"8faca62e":"code","b0bd892e":"code","b944715d":"code","246ddba3":"code","7707d878":"code","0feade66":"code","cb956779":"markdown","192f06d2":"markdown","ea091767":"markdown","8e1b79dd":"markdown","a44e7439":"markdown"},"source":{"8faca62e":"import numpy as np # \u00e1lgebra linear\nimport pandas as pd # processamento de dados\nimport geopandas as gpd # geoprocessamento\n\nimport matplotlib.colors as colors # para defini\u00e7\u00e3o de cores personalizadas\nimport matplotlib.pyplot as plt # biblioteca gr\u00e1fica para visualizarmos os plots\n\nimport os\n\nescolas = pd.read_csv('\/kaggle\/input\/censo-2020-escolas\/escolas_selecionadas.CSV')\nshape_estados = gpd.read_file('\/kaggle\/input\/ibge-municipios-ufs-shape\/BR_UF_2020.shp')\nshape_municipios = gpd.read_file('\/kaggle\/input\/ibge-municipios-ufs-shape\/BR_Municipios_2020.shp')\n\nescolas.head()","b0bd892e":"print('Quantidade de escolas em territ\u00f3rio nacional em 2020:', len(escolas))\nprint('Quantidade de munic\u00edpios em 2020:', len(shape_municipios))\nprint('')","b944715d":"# inicializa uma contagem de escolas por munic\u00edpio\nn_escolas_mun = np.zeros(len(shape_municipios), dtype=int)\n\n# iterativamente, verifica quantas escolas est\u00e3o registradas naquele munic\u00edpio\nfor i, cod in enumerate(shape_municipios['CD_MUN']):\n    n_escolas_mun[i] = (escolas['CO_MUNICIPIO'] == int(cod)).sum()\n\n# definimos \"densidade\" como a quantidade de escolas por kil\u00f4metro quadrado\nshape_municipios['n_ies'] = n_escolas_mun\nshape_municipios['densidade'] = shape_municipios['n_ies'] \/ shape_municipios['AREA_KM2']\n\n# usaremos um plot com duas normas, sen\u00e3o, visualizaremos quase todos os munic\u00edpios com baixa\n# densidade em branco, e alguns pontos de destaque\ndivnorm = colors.TwoSlopeNorm(vmin=0, vcenter=0.009, vmax=0.08)\n\n# Mostra a densidade\nshape_municipios.plot(column='densidade', cmap='Blues', norm=divnorm, edgecolor='#9fe1a1',\n                      linewidth=0.1, figsize=(12, 8))\n\n# Desativa eixo e mostra mapa\nplt.axis('off')\nplt.show()","246ddba3":"# c\u00f3digos de estado pelo IBGE\ncodigos_uf = {'Rond\u00f4nia':11, 'Acre':12, 'Amazonas':13, 'Roraima':14, 'Par\u00e1':15, 'Amap\u00e1':16, 'Tocantins':17,\n 'Maranh\u00e3o':21, 'Piau\u00ed':22, 'Cear\u00e1': 23, 'Rio Grande do Norte': 24, 'Para\u00edba':25, 'Pernambuco':26, 'Alagoas':27, 'Sergipe':28, 'Bahia': 29,\n 'Minas Gerais':31, 'Esp\u00edrito Santo':32, 'Rio de Janeiro':33, 'S\u00e3o Paulo':35,\n 'Paran\u00e1':41, 'Santa Catarina':42, 'Rio Grande do Sul':43,\n 'Mato Grosso do Sul':50, 'Mato Grosso':51, 'Goi\u00e1s':52, 'Distrito Federal':53}\n\n# Cria dataframe para organizar a quantidade de escolas por estado\npor_estado = pd.DataFrame(columns = ['nome', 'federal', 'estadual', 'municipal', 'privada'])\npor_estado.index.name = 'codigo_uf'\n\n# tipos de depend\u00eancia de acordo com os metadados\ndependencias = {'federal':1, 'estadual':2, 'municipal':3, 'privada':4}\n\nfor nome_uf in codigos_uf:\n    # colhe escolas da unidade da federa\u00e7\u00e3o\n    escolas_idx = escolas['CO_UF'] == codigos_uf[nome_uf]\n    escolas_uf = escolas[escolas_idx]\n    \n    # tipo de depend\u00eancia das escolas\n    tp_dependencia = escolas_uf['TP_DEPENDENCIA']\n    \n    quantidades = []\n    for index, dependencia in enumerate(dependencias):\n        # retorna c\u00f3digo para cada tipo de depend\u00eancia\n        codigo = dependencias[dependencia]\n\n        # coleta a depend\u00eancia das escolas desta regi\u00e3o\n        idx_escolas = tp_dependencia == codigo\n        escolas_dependencia = escolas_uf[idx_escolas]\n        \n        qnt = np.unique(escolas_dependencia['CO_ENTIDADE']).size\n        quantidades.append(qnt)\n    \n    # Adiciona nova linha ao nosso dataframe\n    row = [nome_uf, quantidades[0], quantidades[1], quantidades[2], quantidades[3]]\n    por_estado.loc[codigos_uf[nome_uf]] = row\n\n# criamos uma coluna para somar o total por estado\ndependencias = por_estado[['federal', 'estadual', 'municipal', 'privada']]\npor_estado['total'] = dependencias.sum(axis=1).astype(int)\n\n# mostra no console\npor_estado","7707d878":"# Total de escolas p\u00fablicas por estado\ntot_publico = np.array(por_estado[['federal', 'estadual', 'municipal']].sum(axis=1))\n# total de escolas particulas por estado\ntot_privado = np.array(por_estado['privada'])\n\n# colhemos apenas uma casa decimal\nshape_estados['perc_publico'] = ((tot_publico \/ (tot_publico+tot_privado) * 1000)).astype(int) \/ 10.0\n\n# mostra o mapa em tons de azul\nshape_estados.plot(column='perc_publico', cmap='Blues', edgecolor='w', figsize=(12, 8), legend=True,\n                   legend_kwds={'label':'Porcentagem de escolas p\u00fablicas'})\n\n# anota a sigla das regi\u00f5es no mapa\nfor idx, row in shape_estados.iterrows():\n    plt.annotate(text=row['SIGLA_UF'], xy=row.geometry.representative_point().coords[:][0], fontsize=10,\n                 horizontalalignment='center', color='#f8b7cd')\n\nplt.show()","0feade66":"from sklearn.cluster import KMeans\n\n# Mostra o brasil novamente\nax = shape_estados.plot(color='#d0efff', edgecolor='w', figsize=(12, 8))\n\n# Os tipos de depend\u00eancia que vamos trabalhar\ntipos = ['Federal', 'Estadual', 'Municipal']\ncores = ['red', 'green', 'blue']\n\n# Vamos trabalhar com o K-Means para representar essas quantidades que n\u00e3o podem ser\n# exibidas integralmente. Aqui estipulamos a quantidade de clusters para cada tipo.\nclusters = [35, 55, 95]\n\n# Colhemos as coordenadas x e y dos pontos representativos dos munic\u00edpios\nlocalizacao = shape_municipios['geometry'].representative_point()\nlocalizacao = np.array([[p.x, p.y] for p in localizacao])\n\n# Criamos um dataframe de mapeamento. Os \u00edndices s\u00e3o os c\u00f3digos dos munic\u00edpios\nmapeamento = pd.DataFrame({'x':localizacao[:,0], 'y':localizacao[:,1]})\nmapeamento.index = shape_municipios['CD_MUN'].astype(int)\n\n# Iteramos sobre cada tipo de depend\u00eancia. Invertemos para que assim as maiores\n# bolhas apare\u00e7am por baixo das menores\nfor t in [3, 2, 1]:\n    # \u00edndices das escolas com essa depend\u00eancia\n    idx_dependencia = escolas['TP_DEPENDENCIA'] == t\n    \n    # escolas da depend\u00eancia\n    escolas_dependencia = escolas[idx_dependencia]\n    \n    # A localiza\u00e7\u00e3o dos munic\u00edpios das escolas\n    municipios = escolas_dependencia['CO_MUNICIPIO']\n    localizacao = mapeamento.loc[municipios]\n    \n    # Executamos o K-Means nas posi\u00e7\u00f5es x e y\n    kmeans = KMeans(n_clusters=clusters[t-1], random_state=0).fit(localizacao[['x','y']])\n    \n    # colhemos os resultados\n    closest = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n    \n    # quantidade de elementos por cluster\n    _, size = np.unique(closest, return_counts=True)\n    \n    # mostra no mapa as densidades de escolas por tipo. Observe que o tamanho\n    # dos c\u00edrculos n\u00e3o segue uma distribui\u00e7\u00e3o linear.\n    ax.scatter(centroids[:,0], centroids[:,1], s=(size**0.8)*2, c=cores[t-1],\n               alpha=0.6, edgecolor='w')\n\nplt.axis('off')\nplt.show()","cb956779":"### Carregamento dos dados\n\nAbaixo carregamos a lista de escolas selecionadas, o shapefile de estados do Brasil e o shapefile de munic\u00edpios do Brasil","192f06d2":"### Densidade de escolas por munic\u00edpio\n\nApenas mostrar a quantidade de escolas por munic\u00edpio n\u00e3o seria muito intuitivo, pois algums munic\u00edpios da regi\u00e3o Norte t\u00eam uma ampla extens\u00e3o territorial. Logo,muitas escolas est\u00e3o nos mesmo munic\u00edpios.\n\nAssim, fazemos uma pequena adapta\u00e7\u00e3o para que seja exibida a densidade de escolas por km\u00b2. Ou seja, a densidade de escolas naquele munic\u00edpio","ea091767":"### Escolas p\u00fablicas e privadas por estado\n\nAbaixo criamos uma gr\u00e1fico que mostra a porcentagem de escolas p\u00fablicas por estado. Quanto mais escura a cor, maior a porcentagem de escolas p\u00fablicas na unidade federativa.","8e1b79dd":"### Distribui\u00e7\u00e3o de escolas p\u00fablicas por depend\u00eancia\n\nPara se ter uma ideia de como as escolas est\u00e3o distribu\u00eddas pelo pa\u00eds, abaixo executamos o K-Means para colher por\u00e7\u00f5es representativas de frequ\u00eancia. Os tamanhos dos c\u00edrculos s\u00e3o proporcionais \u00e0 quantidade de escolas na regi\u00e3o.","a44e7439":"### Depend\u00eancia por estado\n\nNa c\u00e9lula abaixo separamos as escolas por estado e tamb\u00e9m por depend\u00eancia (Federal, Estadual, Municipal e Privada). Cada escola pertence a uma \u00fanica depend\u00eancia."}}