{"cell_type":{"04147cca":"code","bbf03848":"code","cb867670":"code","4eeb4f56":"code","32e9678d":"code","b5af4d45":"code","8960b1a0":"code","2bf89707":"code","867ef23e":"code","1f1ae731":"code","0ffe23e4":"code","14e65a6c":"code","7b9f9429":"code","61a4625c":"code","91d47f94":"code","c136fcaf":"code","4af021fb":"code","52d96f91":"code","e39da626":"code","4771346f":"code","72675ab8":"code","7f8b3afa":"code","2b9f389a":"code","3394dadd":"code","b5a3402b":"code","4233a317":"code","afbc0b44":"code","51689a10":"code","39035b31":"markdown","c715b84e":"markdown","5b33319e":"markdown","3878c127":"markdown","0a981924":"markdown","7e02283a":"markdown","38fdc74d":"markdown","8fabb817":"markdown","0c726bf9":"markdown","280a2cc8":"markdown","674271e9":"markdown","6b15130e":"markdown"},"source":{"04147cca":"# install calmap\n#! pip install calmap","bbf03848":"# essential libraries\nimport json\nimport random\nfrom urllib.request import urlopen\n\n# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n#import calmap\nimport folium\n\n# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# html embedding\nfrom IPython.display import Javascript\nfrom IPython.core.display import display\nfrom IPython.core.display import HTML","cb867670":"# list files\n# !ls ..\/input\/novel-corona-virus-2019-dataset\/","4eeb4f56":"# Read data\nall_confirmed_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\nall_deaths_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\nall_recovered_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')","32e9678d":"# all_confirmed_df.head(10)\n# all_deaths_df.head(10)\n# all_recovered_df.head(10)","b5af4d45":"# Merging tables\n\ndates = all_confirmed_df.columns[4:]\n\nall_confirmed_df_melt = all_confirmed_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                                              value_vars=dates, var_name='Date', value_name='Confirmed')\n\nall_deaths_df_melt = all_deaths_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                                        value_vars=dates, var_name='Date', value_name='Deaths')\n\nall_recovered_df_melt = all_recovered_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                                              value_vars=dates, var_name='Date', value_name='Recovered')\n\nworld_cases_df = pd.concat([all_confirmed_df_melt, all_deaths_df_melt['Deaths'], all_recovered_df_melt['Recovered']], \n                       axis=1, sort=False)\n\nworld_cases_df.head(10)","8960b1a0":"# Dataframe info\n# world_cases_df.info()","2bf89707":"# cases \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Active Case = confirmed - deaths - recovered\nworld_cases_df['Active'] = world_cases_df['Confirmed'] - world_cases_df['Deaths'] - world_cases_df['Recovered']\n\n# replacing Mainland china with just China\nworld_cases_df['Country\/Region'] = world_cases_df['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nworld_cases_df[['Province\/State']] = world_cases_df[['Province\/State']].fillna('')\nworld_cases_df[cases] = world_cases_df[cases].fillna(0)\nworld_cases_df['Date'] = pd.to_datetime(world_cases_df['Date'])","867ef23e":"russia_cases_df = world_cases_df.loc[world_cases_df['Country\/Region'] == 'Russia']\nrussia_cases_df.head(60)","1f1ae731":"russia_cases_df = russia_cases_df.loc[russia_cases_df['Confirmed'] > 0]","0ffe23e4":"temp = russia_cases_df.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","14e65a6c":"tm = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(tm, path=[\"variable\"], values=\"value\", height=400, width=600,\n                 color_discrete_sequence=[rec, act, dth])\nfig.show()","7b9f9429":"temp = russia_cases_df.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig.show()","61a4625c":"temp = russia_cases_df.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\ntemp = temp.reset_index() \ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             color_discrete_sequence=[cnf, dth, rec])\nfig.update_layout(barmode='group')\nfig.show()\n","91d47f94":"temp = world_cases_df.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","c136fcaf":"tm = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(tm, path=[\"variable\"], values=\"value\", height=400, width=600,\n                 color_discrete_sequence=[rec, act, dth])\nfig.show()","4af021fb":"temp = world_cases_df.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig.show()","52d96f91":"temp = world_cases_df.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\ntemp = temp.reset_index() \ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             color_discrete_sequence=[cnf, dth, rec])\nfig.update_layout(barmode='group')\nfig.show()","e39da626":"rus_reg_cases_df = pd.read_csv('..\/input\/covid19-russia-regions-cases\/covid19-russia-cases.csv')\nrus_reg_cases_df.tail(10)","4771346f":"# rus_reg_cases_df.info()","72675ab8":"rus_reg_cases_df['Date'] = pd.to_datetime(rus_reg_cases_df['Date'], dayfirst=True)\n\n# Fix the dataset bug\nrus_reg_cases_df['Region\/City'] = rus_reg_cases_df['Region\/City'].astype('str').str.strip('\\u200b') \n\nrus_reg_cases_df['Active'] = rus_reg_cases_df['Confirmed'] - rus_reg_cases_df['Deaths'] - rus_reg_cases_df['Recovered']\n# rus_reg_cases_df.tail(100)","7f8b3afa":"# Get current situation in regions\nrus_latest = rus_reg_cases_df.groupby('Region\/City').apply(lambda df: df.loc[df['Date'].idxmax()])\nrus_latest = rus_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\nrus_latest = rus_latest[['Region\/City'] + cases]","2b9f389a":"rus_latest.style.background_gradient(cmap='Reds')","3394dadd":"temp = rus_reg_cases_df.groupby(['Date', 'Region\/City'])['Confirmed'].max().reset_index()\ntemp = temp.sort_values('Confirmed', ascending=False)\n\npx.line(temp, x=\"Date\", y=\"Confirmed\", color='Region\/City', title='Cases Spread', height=600)","b5a3402b":"# Russia data\nday_cases = ['Day-Confirmed', 'Day-Deaths', 'Day-Recovered']\nrus_sum = rus_reg_cases_df.loc[rus_reg_cases_df['Region\/City'] != 'Diamond Princess']\nrus_sum = rus_sum.groupby('Date').apply(lambda df: df[day_cases].sum())\nrus_sum['Country\/Region'] = 'Russia'\nrus_sum = rus_sum.groupby('Country\/Region').apply(lambda df: df[day_cases].cumsum()).reset_index()\nrus_sum['Country\/Region'] = 'Russia'\nfirst_day = rus_sum['Date'][0]\nrus_sum['Days'] = rus_sum.groupby('Date').apply(lambda df: df['Date'] - first_day).reset_index(drop=True)\nrus_sum = rus_sum.rename(columns={'Day-Confirmed': 'Confirmed', 'Day-Deaths': 'Deaths', 'Day-Recovered': 'Recovered'})\n\ncolumns = rus_sum.columns\nthreshold = rus_sum['Confirmed'].max() + 500\n\ndef country_data(country):\n    country_df = world_cases_df.loc[world_cases_df['Country\/Region'] == country]\n    country_df = country_df.loc[(country_df['Confirmed'] > 0) & (country_df['Confirmed'] <= threshold)].reset_index(drop=True)\n\n    first_day = country_df['Date'][0]\n    country_df['Days'] = country_df.groupby('Date').apply(lambda df: df['Date'] - first_day).reset_index(drop=True)\n    country_df = country_df[columns]\n    return country_df\n\nitaly_df = country_data('Italy')\nspain_df = country_data('Spain')\niran_df = country_data('Iran')\ngermany_df = country_data('Germany')\n# france_df = country_data('France')\n# us_df = country_data('US')\n","4233a317":"temp = pd.concat([rus_sum, italy_df, spain_df, iran_df, germany_df])\n\ntemp['Days'] = temp['Days'].astype('str')\ntemp1 = temp.groupby(['Country\/Region', 'Date']).apply(lambda df: int(df['Days'][0].split(' ')[0])).reset_index()\ntemp1 = temp1.sort_values(['Date', 'Country\/Region']).reset_index(drop=True)\ntemp = temp.sort_values(['Date', 'Country\/Region']).reset_index(drop=True)\ntemp['Days'] = temp1[0]\n\npx.line(temp, x=\"Days\", y=\"Confirmed\", color='Country\/Region', title='First 1000 Cases Spread', height=600)\n","afbc0b44":"moscow_cases = rus_reg_cases_df.loc[rus_reg_cases_df['Region\/City'] == '\u041c\u043e\u0441\u043a\u0432\u0430']\nmoscow_cases","51689a10":"moscow_cases = moscow_cases.melt(id_vars=\"Date\", \n                 value_vars=['Day-Confirmed', 'Day-Deaths', 'Day-Recovered'])\n\nfig = px.bar(moscow_cases, x=\"Date\", y=\"value\", color='variable', \n             color_discrete_sequence=[cnf, dth, rec])\nfig.update_layout(barmode='group')\nfig.show()","39035b31":"# Visualization","c715b84e":"# Actual notebooks:\nRussia regions info - https:\/\/www.kaggle.com\/kapral42\/covid-19-in-russia-regions\n\nGeo plotting - https:\/\/www.kaggle.com\/kapral42\/covid-19-russia-geo-plotting\n","5b33319e":"# Moscow","3878c127":"# Russan regions","0a981924":"# **Import**","7e02283a":"# World","38fdc74d":"# Prepare data","8fabb817":"[COVID-19 - Analysis, Viz, Prediction & Comparisons](https:\/\/www.kaggle.com\/imdevskp\/covid-19-analysis-visualization-comparisons) has been used as example","0c726bf9":"# Dataset","280a2cc8":"Read and prepare data","674271e9":"# Analyzing COVID-19 situation in Russia","6b15130e":"# Region wise Data"}}