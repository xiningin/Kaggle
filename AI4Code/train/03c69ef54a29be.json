{"cell_type":{"492d5bee":"code","525e1731":"code","fe796b89":"code","77454715":"code","362a6c43":"code","a131b14f":"code","7b1a71ee":"code","d78715b5":"code","5461fd6d":"code","5e7e3b56":"code","bf9056d0":"code","e329a447":"code","17ac0938":"code","0acef6ea":"code","5169c450":"code","12b28547":"code","20ac3ed3":"code","ec747690":"code","5d9d23f9":"code","12280210":"code","ce9dc157":"code","507fa00b":"code","fd3c1895":"code","a56e5683":"code","899115c6":"code","b3fe3545":"code","7547e930":"code","dec34504":"code","1673b180":"code","f15fe97d":"code","d81f5ea9":"code","146191c1":"code","32078b91":"code","59dafe81":"code","3bb1b7ae":"code","abf3a1b7":"code","0115a47d":"code","fc20b971":"code","f37d82d3":"code","4bdcc79a":"code","d0ddf293":"code","e9001a7f":"code","b5a757d0":"code","c39d4918":"code","934d187b":"code","fceb0052":"code","295dd5f6":"code","23eabaf1":"code","7acd4601":"code","bbf4b079":"code","b7a6c3a4":"code","335108fb":"code","85cf3ead":"code","1fcdbefd":"code","ff1dc4fb":"code","b6b32c7d":"code","7003e77d":"code","3665971e":"code","31b40d0b":"code","5cbdd4d0":"code","e500c10f":"code","51529ea5":"code","9d7d7763":"code","26185d4e":"code","6dbcd68f":"code","e125a62d":"code","ff5a68f8":"code","b585c205":"code","3e4adf83":"code","f3522078":"code","832ce3e9":"code","e1a491a7":"code","86254e52":"code","8ff3d727":"code","397ed056":"code","a2066ee3":"code","def30092":"code","4ff8a712":"markdown","601cfb42":"markdown","15bf553f":"markdown","0cc2eb8d":"markdown","5ebf29c4":"markdown"},"source":{"492d5bee":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n","525e1731":"missing_values = [\"?\"]\ndata = pd.read_csv(\"..\/input\/train.csv\", na_values = missing_values)\ndata_orig = data\ndata","fe796b89":"test = pd.read_csv(\"..\/input\/test.csv\", na_values = missing_values)\ntest_orig = test\ntest","77454715":"data.duplicated().sum()","362a6c43":"print (data.isnull().sum())","a131b14f":"import seaborn as sns\nf, ax = plt.subplots(figsize=(10, 8))\ncorr = data.corr()\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),\n            square=True, ax=ax, annot = True);","7b1a71ee":"null_columns = data.columns[data.isnull().any()]\nnull_columns","d78715b5":"data_drop_col = data.drop([ 'ID','Enrolled', 'MLU', 'Reason',\n       'Area', 'State', 'PREV',\n       'Fill'], 1) # Drop Total from domain knowledge\n\ndata_drop_col.info()","5461fd6d":"test_drop_col = test.drop([ 'ID','Enrolled', 'MLU', 'Reason',\n       'Area', 'State', 'PREV',\n       'Fill'], 1) # Drop Total from domain knowledge\n\ntest_drop_col.info()","5e7e3b56":"data_nonsense = data.drop([ 'ID','Worker Class','MIC', 'MOC','MSA', 'REG', 'MOVE', 'Live','Enrolled', 'MLU', 'Reason',\n       'Area', 'State', 'PREV', 'Teen',\n       'Fill'], 1) # Drop Total from domain knowledge\ndata_nonsense.info()","bf9056d0":"test_nonsense = test.drop([ 'ID','Worker Class','MIC', 'MOC','MSA', 'REG', 'MOVE', 'Live','Enrolled', 'MLU', 'Reason',\n       'Area', 'State', 'PREV', 'Teen',\n       'Fill'], 1) # Drop Total from domain knowledge\ntest_nonsense.info()","e329a447":"data_drop_teen = data.drop([ 'ID','Enrolled', 'MLU', 'Reason',\n       'Area', 'State', 'PREV','Teen',\n       'Fill'], 1) # Drop Total from domain knowledge\ndata_drop_teen.info()","17ac0938":"test_drop_teen = test.drop([ 'ID','Enrolled', 'MLU', 'Reason',\n       'Area', 'State', 'PREV','Teen',\n       'Fill'], 1) # Drop Total from domain knowledge\ntest_drop_teen.info()","0acef6ea":"data_no_nonsense_g=data_nonsense.dropna()\ndata_no_nonsense_g.info()","5169c450":"test_no_nonsense_g=test_nonsense.dropna()\ntest_no_nonsense_g.info()","12b28547":"data_no_nonsense=data.drop(['Worker Class', 'Enrolled', 'MIC', 'MOC', 'Hispanic', 'MLU', 'Reason',\n       'Area', 'State', 'MSA', 'REG', 'MOVE', 'Live', 'PREV', 'Teen',\n       'COB FATHER', 'COB MOTHER', 'COB SELF', 'Fill'],1)\ndata_no_nonsense.info()","20ac3ed3":"test_no_nonsense=test.drop(['Worker Class', 'Enrolled', 'MIC', 'MOC', 'Hispanic', 'MLU', 'Reason',\n       'Area', 'State', 'MSA', 'REG', 'MOVE', 'Live', 'PREV', 'Teen',\n       'COB FATHER', 'COB MOTHER', 'COB SELF', 'Fill'],1)\ntest_no_nonsense.info()","ec747690":"import seaborn as sns\nf, ax = plt.subplots(figsize=(20, 16))\ncorr =data_no_nonsense.corr()\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),\n            square=True, ax=ax, annot = True);","5d9d23f9":"def S_method(v):\n    if v==\"M\":\n        return 0\n    else:\n        return 1\n    \ndata_no_nonsense[\"Sex\"] = data_no_nonsense[\"Sex\"].apply(S_method)\ndata_no_nonsense[\"Sex\"].value_counts()    \ntest_no_nonsense[\"Sex\"] = test_no_nonsense[\"Sex\"].apply(S_method)\ntest_no_nonsense[\"Sex\"].value_counts()  ","12280210":"(['Worker Class', 'Enrolled', 'MIC', 'MOC', 'Hispanic', 'MLU', 'Reason',\n       'Area', 'State', 'MSA', 'REG', 'MOVE', 'Live', 'PREV', 'Teen',\n       'COB FATHER', 'COB MOTHER', 'COB SELF', 'Fill'],1)","ce9dc157":"def Schoo_method(v):\n    #print(type(v))\n    x = (v[3:])\n    \n    return int(x)\n    \ndata_no_nonsense[\"Schooling\"] = data_no_nonsense[\"Schooling\"].apply(Schoo_method)\ndata_no_nonsense[\"Schooling\"].value_counts()\ntest_no_nonsense[\"Schooling\"] = test_no_nonsense[\"Schooling\"].apply(Schoo_method)\ntest_no_nonsense[\"Schooling\"].value_counts()","507fa00b":"def C_method(v):\n    if(v==\"TypeA\"):\n        return 1\n    elif(v==\"TypeB\"):\n        return 2\n    elif(v==\"TypeC\"):\n        return 3\n    elif(v==\"TypeD\"):\n        return 4\n    else:\n        return 5\n                \n        \ndata_no_nonsense[\"Cast\"] = data_no_nonsense[\"Cast\"].apply(C_method)\ndata_no_nonsense[\"Cast\"].value_counts()    \n\ntest_no_nonsense[\"Cast\"] = test_no_nonsense[\"Cast\"].apply(C_method)\ntest_no_nonsense[\"Cast\"].value_counts()    ","fd3c1895":"(['Worker Class', 'Enrolled', 'MIC', 'MOC', 'Hispanic', 'MLU', 'Reason',\n       'Area', 'State', 'MSA', 'REG', 'MOVE', 'Live', 'PREV', 'Teen',\n       'COB FATHER', 'COB MOTHER', 'COB SELF', 'Fill'],1)","a56e5683":"def f_method(v):\n    if(v==\"FA\"):\n        return 1\n    elif(v==\"FB\"):\n        return 2\n    elif(v==\"FC\"):\n        return 3\n    elif(v==\"FD\"):\n        return 4\n    elif(v==\"FE\"):\n        return 5\n    elif(v==\"FF\"):\n        return 6\n    elif(v==\"FG\"):\n        return 7\n    else:\n        return 8\n            \ndata_no_nonsense[\"Full\/Part\"] = data_no_nonsense[\"Full\/Part\"].apply(f_method)\ndata_no_nonsense[\"Full\/Part\"].value_counts()    \n\ntest_no_nonsense[\"Full\/Part\"] = test_no_nonsense[\"Full\/Part\"].apply(f_method)\ntest_no_nonsense[\"Full\/Part\"].value_counts()    ","899115c6":"def M_method(v):\n    \n    x = (v[2:])\n    \n    return int(x)\n    \ndata_no_nonsense[\"Married_Life\"] = data_no_nonsense[\"Married_Life\"].apply(M_method)\ndata_no_nonsense[\"Married_Life\"].value_counts()\n\ntest_no_nonsense[\"Married_Life\"] = test_no_nonsense[\"Married_Life\"].apply(M_method)\ntest_no_nonsense[\"Married_Life\"].value_counts()","b3fe3545":"def Ts_method(v):\n    x = (v[-1:])\n    \n    return int(x)\n                \ndata_no_nonsense[\"Tax Status\"] = data_no_nonsense[\"Tax Status\"].apply(Ts_method)\ndata_no_nonsense[\"Tax Status\"].value_counts()   \n\ntest_no_nonsense[\"Tax Status\"] = test_no_nonsense[\"Tax Status\"].apply(Ts_method)\ntest_no_nonsense[\"Tax Status\"].value_counts()   ","7547e930":"def Summ_method(v):\n    x = (v[-1:])\n    \n    return int(x)\n                \ndata_no_nonsense[\"Summary\"] = data_no_nonsense[\"Summary\"].apply(Summ_method)\ndata_no_nonsense[\"Summary\"].value_counts()    \n\ntest_no_nonsense[\"Summary\"] = test_no_nonsense[\"Summary\"].apply(Summ_method)\ntest_no_nonsense[\"Summary\"].value_counts()    ","dec34504":"def D_method(v):\n    x = (v[1:])\n    \n    return int(x)\n                \ndata_no_nonsense[\"Detailed\"] = data_no_nonsense[\"Detailed\"].apply(D_method)\ndata_no_nonsense[\"Detailed\"].value_counts()\n\ntest_no_nonsense[\"Detailed\"] = test_no_nonsense[\"Detailed\"].apply(D_method)\ntest_no_nonsense[\"Detailed\"].value_counts()","1673b180":"def Ci_method(v):\n    x = (v[-1:])\n    \n    return int(x)\n                \ndata_no_nonsense[\"Citizen\"] = data_no_nonsense[\"Citizen\"].apply(Ci_method)\ndata_no_nonsense[\"Citizen\"].value_counts()    ","f15fe97d":"test_no_nonsense[\"Citizen\"] = test_no_nonsense[\"Citizen\"].apply(Ci_method)\ntest_no_nonsense[\"Citizen\"].value_counts()    ","d81f5ea9":"test_no_nonsense.head()","146191c1":"no_nons = pd.get_dummies(data_no_nonsense)\nno_nons_t = pd.get_dummies(test_no_nonsense)\n","32078b91":"no_nons_t.info()","59dafe81":"no_nons.info()","3bb1b7ae":"y=data_no_nonsense['Class']\nX=data_no_nonsense.drop(['Class'],axis=1)\nX.head()","abf3a1b7":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=42)","0115a47d":"from sklearn import preprocessing\n#Performing Min_Max Normalization\nmin_max_scaler = preprocessing.MinMaxScaler()\nnp_scaled = min_max_scaler.fit_transform(X_train)\nX_train = pd.DataFrame(np_scaled)\nnp_scaled_val = min_max_scaler.transform(X_val)\nX_val = pd.DataFrame(np_scaled_val)\nX_train.head()","fc20b971":"tr0=no_nons[no_nons['Class']==0]\ntr1=no_nons[no_nons['Class']==1]\n","f37d82d3":"tr0_m = tr0.sample(frac=0.067)\nSt = pd.concat([tr0_m,tr1], ignore_index=True)","4bdcc79a":"Sy=St['Class']\nSX=St.drop(['Class'],axis=1)\nSX.head()","d0ddf293":"np.random.seed(42)","e9001a7f":"from sklearn.naive_bayes import GaussianNB as NB\n#NB?","b5a757d0":"nb = NB()\nnb.fit(X_train,y_train)\nnb.score(X_val,y_val)","c39d4918":"from sklearn.metrics import confusion_matrix,classification_report,accuracy_score\n\ny_pred_NB = nb.predict(X_val)\nprint(confusion_matrix(y_val, y_pred_NB))","934d187b":"print(classification_report(y_val, y_pred_NB))","fceb0052":"from sklearn.linear_model import LogisticRegression\n#LogisticRegression?","295dd5f6":"lg = LogisticRegression(solver = 'liblinear', C = 1, multi_class = 'ovr', random_state = 42)\nlg.fit(X_train,y_train)\nlg.score(X_val,y_val)","23eabaf1":"lg = LogisticRegression(solver = 'lbfgs', C = 8, multi_class = 'multinomial', random_state = 42)\nlg.fit(X_train,y_train)\nlg.score(X_val,y_val)","7acd4601":"y_pred_LR = lg.predict(X_val)\nprint(confusion_matrix(y_val, y_pred_LR))","bbf4b079":"print(classification_report(y_val, y_pred_LR))","b7a6c3a4":"from sklearn.tree import DecisionTreeClassifier\n#DecisionTreeClassifier?","335108fb":"from sklearn.tree import DecisionTreeClassifier\n\ntrain_acc = []\ntest_acc = []\nfor i in range(1,15):\n    dTree = DecisionTreeClassifier(max_depth=i)\n    dTree.fit(X_train,y_train)\n    acc_train = dTree.score(X_train,y_train)\n    train_acc.append(acc_train)\n    acc_test = dTree.score(X_val,y_val)\n    test_acc.append(acc_test)","85cf3ead":"plt.figure(figsize=(10,6))\ntrain_score,=plt.plot(range(1,15),train_acc,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='green', markersize=5)\ntest_score,=plt.plot(range(1,15),test_acc,color='red',linestyle='dashed',  marker='o',\n         markerfacecolor='blue', markersize=5)\nplt.legend( [train_score, test_score],[\"Train Accuracy\", \"Validation Accuracy\"])\nplt.title('Accuracy vs Max Depth')\nplt.xlabel('Max Depth')\nplt.ylabel('Accuracy')","1fcdbefd":"from sklearn.tree import DecisionTreeClassifier\n\ntrain_acc = []\ntest_acc = []\nfor i in range(2,30):\n    dTree = DecisionTreeClassifier(max_depth = 9, min_samples_split=i, random_state = 42)\n    dTree.fit(X_train,y_train)\n    acc_train = dTree.score(X_train,y_train)\n    train_acc.append(acc_train)\n    acc_test = dTree.score(X_val,y_val)\n    test_acc.append(acc_test)","ff1dc4fb":"plt.figure(figsize=(10,6))\ntrain_score,=plt.plot(range(2,30),train_acc,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='green', markersize=5)\ntest_score,=plt.plot(range(2,30),test_acc,color='red',linestyle='dashed',  marker='o',\n         markerfacecolor='blue', markersize=5)\nplt.legend( [train_score, test_score],[\"Train Accuracy\", \"Validation Accuracy\"])\nplt.title('Accuracy vs min_samples_split')\nplt.xlabel('Max Depth')\nplt.ylabel('Accuracy')","b6b32c7d":"dTree = DecisionTreeClassifier(max_depth=9, random_state = 42)\ndTree.fit(X_train,y_train)\ndTree.score(X_val,y_val)","7003e77d":"y_pred_DT = dTree.predict(X_val)\nprint(confusion_matrix(y_val, y_pred_DT))","3665971e":"print(classification_report(y_val, y_pred_DT))","31b40d0b":"from sklearn.ensemble import RandomForestClassifier\n#RandomForestClassifier?","5cbdd4d0":"score_train_RF = []\nscore_test_RF = []\n\nfor i in range(1,18,1):\n    rf = RandomForestClassifier(n_estimators=i, random_state = 42)\n    rf.fit(X_train, y_train)\n    sc_train = rf.score(X_train,y_train)\n    score_train_RF.append(sc_train)\n    sc_test = rf.score(X_val,y_val)\n    score_test_RF.append(sc_test)","e500c10f":"plt.figure(figsize=(10,6))\ntrain_score,=plt.plot(range(1,18,1),score_train_RF,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='green', markersize=5)\ntest_score,=plt.plot(range(1,18,1),score_test_RF,color='red',linestyle='dashed',  marker='o',\n         markerfacecolor='blue', markersize=5)\nplt.legend( [train_score,test_score],[\"Train Score\",\"Test Score\"])\nplt.title('Fig4. Score vs. No. of Trees')\nplt.xlabel('No. of Trees')\nplt.ylabel('Score')","51529ea5":"rf = RandomForestClassifier(n_estimators=15, random_state = 42)\nrf.fit(X_train, y_train)\nrf.score(X_val,y_val)","9d7d7763":"y_pred_RF = rf.predict(X_val)\nconfusion_matrix(y_val, y_pred_RF)","26185d4e":"print(classification_report(y_val, y_pred_RF))","6dbcd68f":"param_grid = { \n    'n_estimators': [350,400,450,500,600],\n    'max_features': ['auto', 'sqrt', 'log2'],\n    'max_depth' : [16,17,19 ,20,22,24,25],\n    'criterion' :['gini', 'entropy']\n}","e125a62d":"xnp = min_max_scaler.fit_transform(SX)\nX_n = pd.DataFrame(xnp)","ff5a68f8":"X_n.head()","b585c205":"tnp = min_max_scaler.fit_transform(no_nons_t)\nt_n = pd.DataFrame(tnp)\nt_n.head()","3e4adf83":"from sklearn.model_selection import GridSearchCV\nCV_rfc = GridSearchCV(estimator=rf, param_grid=param_grid, cv= 5, verbose=20,n_jobs=-1)\nCV_rfc.fit(X_n,Sy)","f3522078":"CV_rfc.best_params_","832ce3e9":"rfc1=RandomForestClassifier(random_state=42, max_features='auto', n_estimators= 500, max_depth=22, criterion='entropy')","e1a491a7":"rfc1.fit(SX,Sy)","86254e52":"pred_rf = CV_rfc.predict(t_n)","8ff3d727":"temp = test['ID']\nttt=pd.DataFrame(temp)\nttt.head()","397ed056":"pp = {'ID':temp,'Class':pred_rf}\npred = pd.DataFrame(pp)\npred.head()","a2066ee3":"pred.to_csv(\"t1-7.csv\", index=False)","def30092":"from IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\ndef create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):\n    csv = df.to_csv(index=False)\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html='<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\"target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\ncreate_download_link(\"submission_DataFrame_name\")","4ff8a712":"LR","601cfb42":"Sampling","15bf553f":"NB","0cc2eb8d":"DT","5ebf29c4":"RF"}}