{"cell_type":{"afe006b4":"code","71acc4a0":"code","9fb4efc2":"code","5b3d055d":"code","82da638d":"code","b9107c55":"code","462b0b5b":"code","84a41ef3":"code","4fbe955c":"code","a9e164e9":"code","b155639c":"code","9fa25665":"code","1823b45f":"code","e6f5eac0":"code","f09fbb14":"code","9e7c9fb6":"code","e4897e7e":"code","33891386":"code","3470c0ea":"markdown","c5be3c39":"markdown","db652d77":"markdown","04ada5f8":"markdown","ae027d61":"markdown","014713f7":"markdown","4eab8de3":"markdown","a390a9ae":"markdown","971fe8e7":"markdown","104f818d":"markdown","450373ae":"markdown","d22628e7":"markdown","0c012446":"markdown","bb0b106b":"markdown"},"source":{"afe006b4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM, SpatialDropout1D\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.utils import resample\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import confusion_matrix,classification_report\nimport re\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory","71acc4a0":"data = pd.read_csv('..\/input\/Sentiment.csv')\n# Keeping only the neccessary columns\ndata = data[['text','sentiment']]\ndata = data[data.sentiment != \"Neutral\"]","9fb4efc2":"data.head()","5b3d055d":"data['text'] = data['text'].apply(lambda x: x.lower())\n# removing special chars\ndata['text'] = data['text'].apply((lambda x: re.sub('[^a-zA-z0-9\\s]','',x)))\ndata['text'] = data['text'].str.replace('rt','')\ndata.head()","82da638d":"max_fatures = 2000\ntokenizer = Tokenizer(num_words=max_fatures, split=' ')\ntokenizer.fit_on_texts(data['text'].values)\nX = tokenizer.texts_to_sequences(data['text'].values)\nX = pad_sequences(X)\n\nY = pd.get_dummies(data['sentiment']).values\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.20, random_state = 42)\nprint(X_train.shape,Y_train.shape)\nprint(X_test.shape,Y_test.shape)","b9107c55":"embed_dim = 128\nlstm_out = 196\n\nmodel = Sequential()\nmodel.add(Embedding(max_fatures, embed_dim,input_length = X.shape[1]))\nmodel.add(SpatialDropout1D(0.4))\nmodel.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(2,activation='softmax'))\nmodel.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])\nprint(model.summary())","462b0b5b":"batch_size = 128\nmodel.fit(X_train, Y_train, epochs = 15, batch_size=batch_size, verbose = 1)","84a41ef3":"Y_pred = model.predict_classes(X_test,batch_size = batch_size)\ndf_test = pd.DataFrame({'true': Y_test.tolist(), 'pred':Y_pred})\ndf_test['true'] = df_test['true'].apply(lambda x: np.argmax(x))\nprint(\"confusion matrix\",confusion_matrix(df_test.true, df_test.pred))\nprint(classification_report(df_test.true, df_test.pred))","4fbe955c":"# Separate majority and minority classes\ndata_majority = data[data['sentiment'] == 'Negative']\ndata_minority = data[data['sentiment'] == 'Positive']\n\nbias = data_minority.shape[0]\/data_majority.shape[0]\n# lets split train\/test data first then \ntrain = pd.concat([data_majority.sample(frac=0.8,random_state=200),\n         data_minority.sample(frac=0.8,random_state=200)])\ntest = pd.concat([data_majority.drop(data_majority.sample(frac=0.8,random_state=200).index),\n        data_minority.drop(data_minority.sample(frac=0.8,random_state=200).index)])\n\ntrain = shuffle(train)\ntest = shuffle(test)","a9e164e9":"print('positive data in training:',(train.sentiment == 'Positive').sum())\nprint('negative data in training:',(train.sentiment == 'Negative').sum())\nprint('positive data in test:',(test.sentiment == 'Positive').sum())\nprint('negative data in test:',(test.sentiment == 'Negative').sum())\n","b155639c":"# Separate majority and minority classes in training data for upsampling \ndata_majority = train[train['sentiment'] == 'Negative']\ndata_minority = train[train['sentiment'] == 'Positive']\n\nprint(\"majority class before upsample:\",data_majority.shape)\nprint(\"minority class before upsample:\",data_minority.shape)\n\n# Upsample minority class\ndata_minority_upsampled = resample(data_minority, \n                                 replace=True,     # sample with replacement\n                                 n_samples= data_majority.shape[0],    # to match majority class\n                                 random_state=123) # reproducible results\n \n# Combine majority class with upsampled minority class\ndata_upsampled = pd.concat([data_majority, data_minority_upsampled])\n \n# Display new class counts\nprint(\"After upsampling\\n\",data_upsampled.sentiment.value_counts(),sep = \"\")\n\nmax_fatures = 2000\ntokenizer = Tokenizer(num_words=max_fatures, split=' ')\ntokenizer.fit_on_texts(data['text'].values) # training with whole data\n\nX_train = tokenizer.texts_to_sequences(data_upsampled['text'].values)\nX_train = pad_sequences(X_train,maxlen=29)\nY_train = pd.get_dummies(data_upsampled['sentiment']).values\nprint('x_train shape:',X_train.shape)\n\nX_test = tokenizer.texts_to_sequences(test['text'].values)\nX_test = pad_sequences(X_test,maxlen=29)\nY_test = pd.get_dummies(test['sentiment']).values\nprint(\"x_test shape\", X_test.shape)","9fa25665":"# model\nembed_dim = 128\nlstm_out = 192\n\nmodel = Sequential()\nmodel.add(Embedding(max_fatures, embed_dim,input_length = X_train.shape[1]))\nmodel.add(SpatialDropout1D(0.4))\nmodel.add(LSTM(lstm_out, dropout=0.4, recurrent_dropout=0.4))\nmodel.add(Dense(2,activation='softmax'))\nmodel.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])\nprint(model.summary())","1823b45f":"batch_size = 128\n# also adding weights\nclass_weights = {0: 1 ,\n                1: 1.6\/bias }\nmodel.fit(X_train, Y_train, epochs = 15, batch_size=batch_size, verbose = 1,\n          class_weight=class_weights)","e6f5eac0":"Y_pred = model.predict_classes(X_test,batch_size = batch_size)\ndf_test = pd.DataFrame({'true': Y_test.tolist(), 'pred':Y_pred})\ndf_test['true'] = df_test['true'].apply(lambda x: np.argmax(x))\nprint(\"confusion matrix\",confusion_matrix(df_test.true, df_test.pred))\nprint(classification_report(df_test.true, df_test.pred))","f09fbb14":"# running model to few more epochs\nmodel.fit(X_train, Y_train, epochs = 15, batch_size=batch_size, verbose = 1,\n          class_weight=class_weights)\nY_pred = model.predict_classes(X_test,batch_size = batch_size)\ndf_test = pd.DataFrame({'true': Y_test.tolist(), 'pred':Y_pred})\ndf_test['true'] = df_test['true'].apply(lambda x: np.argmax(x))\nprint(\"confusion matrix\",confusion_matrix(df_test.true, df_test.pred))\nprint(classification_report(df_test.true, df_test.pred))","9e7c9fb6":"twt = ['keep up the good work']\n#vectorizing the tweet by the pre-fitted tokenizer instance\ntwt = tokenizer.texts_to_sequences(twt)\n#padding the tweet to have exactly the same shape as `embedding_2` input\ntwt = pad_sequences(twt, maxlen=29, dtype='int32', value=0)\nprint(twt)\nsentiment = model.predict(twt,batch_size=1,verbose = 2)[0]\nif(np.argmax(sentiment) == 0):\n    print(\"negative\")\nelif (np.argmax(sentiment) == 1):\n    print(\"positive\")","e4897e7e":"# from sklearn.model_selection import GridSearchCV\n# from keras.models import Sequential\n# from keras.layers import Dense\n# from keras.wrappers.scikit_learn import KerasClassifier","33891386":"# # Function to create model, required for KerasClassifier\n# def create_model(dropout_rate = 0.0):\n#     # create model\n#     embed_dim = 128\n#     lstm_out = 192\n#     model = Sequential()\n#     model.add(Embedding(max_fatures, embed_dim,input_length = X_train.shape[1]))\n#     model.add(SpatialDropout1D(dropout_rate))\n#     model.add(LSTM(lstm_out, dropout=dropout_rate, recurrent_dropout=dropout_rate))\n#     model.add(Dense(2,activation='softmax'))\n#     model.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])\n# #     print(model.summary())\n#     return model\n# # fix random seed for reproducibility\n# seed = 7\n# np.random.seed(seed)\n\n# model = KerasClassifier(build_fn=create_model, verbose=2,epochs=30, batch_size=128)\n# # define the grid search parameters\n# # batch_size = [128]\n# # epochs = [5]\n# dropout_rate = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n# # class_weight = [{0: 1, 1: 1\/bias},{0: 1, 1: 1.2\/bias},{0: 1, 1: 1.5\/bias},{0: 1, 1: 1.8\/bias}]\n# param_grid = dict(dropout_rate = dropout_rate)\n# grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1)\n# grid_result = grid.fit(X_train, Y_train)\n# # summarize results\n# print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n# means = grid_result.cv_results_['mean_test_score']\n# stds = grid_result.cv_results_['std_test_score']\n# params = grid_result.cv_results_['params']\n# for mean, stdev, param in zip(means, stds, params):\n#     print(\"%f (%f) with: %r\" % (mean, stdev, param))","3470c0ea":"1. ## Tuning the hyper-parameters using gridsearch","c5be3c39":"So the class imbalance is reduced significantly recall value for positive tweets (Class 1) improved from 0.54 to 0.74. It is always not possible to reduce it completely. \nYou may also noticed that the recall value for Negative tweets also decreased from 0.90 to 0.79  but this can be improved using training model to more epochs and tuning the hyper-parameters.\n","db652d77":"Lets define class weights as a dictionary, I have defined weight of majority class to be 1 and of minority class to be a multiple of 1\/bias\n","04ada5f8":"Now Lets do up-sampling","ae027d61":"Let See the few lines of the data","014713f7":"The code in this post can be found at my [Github](https:\/\/github.com\/sanjay-raghu) repository. If you are also interested in trying out the code\nI have also written a blog on my [website](https:\/\/sanjay-raghu.github.io\/Sentiment-Analysis-Using-LSTM\/) you can visit there.   \n\n\n\n**Sentiment Analysis:**<br> \nThe process of computationally identifying and categorizing opinions expressed in a piece of text, especially in order to determine whether the writer's attitude towards a particular topic, product, etc. is positive, negative, or neutral. In common ML words its just a classification problem. \n\n**What is class imbalance:**<br>\nIt is the problem in machine learning where the total number of a class of data (positive) is far less than the total number of another class of data (negative). This problem is extremely common in practice and can be observed in various disciplines including fraud detection, anomaly detection, medical diagnosis, oil spillage detection, facial recognition, etc.\n\nIf you want to know more about class imbalance problem, [here](http:\/\/www.chioka.in\/class-imbalance-problem\/) is a link of a great blog post\n\n**Solving class imbalanced data:**<br>\nI am using the two most effective ways to mitigate this:<br>\n- Up sampling \n- Using class weighted loss function\n\n**Dataset**<br>\nFirst GOP Debate Twitter Sentiment\nAbout this Dataset\nThis data originally came from [Crowdflower's Data for Everyone library ](http:\/\/www.crowdflower.com\/data-for-everyone).\n\n> As the original source says,\n> We looked through tens of thousands of tweets about the early August GOP debate in Ohio and asked contributors to do both\n> sentiment analysis and data categorization. Contributors were asked if the tweet was relevant, which candidate was mentioned,\n> what subject was mentioned, and then what the sentiment was for a given tweet. We've removed the non-relevant messages from\n> the uploaded dataset.\n\n**Details about model**<br>\n - model contains 3 layers (Embedding, LSTM, Dense with softmax).\n - Up-sampling is used to balance the data of minority class.\n - Loss function with different class weight in keras to further reduce class imbalance.\n","4eab8de3":"> A few things to notice here\n- \"RT @...\" in start of every tweet\n- a lot of special characters <br>\n> We have to remove all this noise also lets convert text into lower case.\n","a390a9ae":"This looks better.<br>\nLets pre-process the data so that we can use it to train the model\n- Tokenize\n- Padding (to make all sequence of same lengths)\n- Converting sentiments into numerical data(One-hot form)\n- train test split\n","971fe8e7":"## Lets start coding\n### Importing useful packages\nLets first import all libraries. Please make sure that you have these libraries installed.   \n","104f818d":"### Let's train the model\nHere we train the Network. We should run much more than 15 epoch, but I would have to wait forever (run more epochs later), so it is 15 for now. you will see progress bar (if you want to shut it up use verbose = 0)\n\n","450373ae":"### Let evaluate the model\n","d22628e7":"### Defining model\nNext, I compose the LSTM Network. Note that **embed_dim**, **lstm_out**, **batch_size**, **droupout_x** variables are hyper parameters, their values are somehow intuitive, can be and must be played with in order to achieve good results. Please also note that I am using softmax as activation function. The reason is that our Network is using categorical crossentropy, and softmax is just the right activation method for that.","0c012446":"### Data Preprocessing\n- reading the data\n- kepping only neccessary columns\n- droping \"Neutral\" sentiment data\n","bb0b106b":"> It is clear that finding negative tweets (**class 0**) goes very well (**recall 0.92**) for the Network but deciding whether is positive (**class 1**) is not really (**recall 0.52**). My educated guess here is that the positive training set is dramatically smaller than the negative, hence the \"bad\" results for positive tweets.\n## Solving data imbalance problem\n\n**Up-sample Minority Class**\n\nUp-sampling is the process of randomly duplicating observations from the minority class in order to reinforce its signal. There are several heuristics for doing so, but the most common way is to simply re-sample with replacement.\n\nIt's important that we separate test set before up-sampling because after up-sampling there will be multiple copies of same data point and if we do train test split after up-sampling the test set will not be completely unseen.\n"}}