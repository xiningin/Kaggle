{"cell_type":{"deb3fa95":"code","8ec880be":"code","01b61244":"code","486fbf06":"code","2a20e2af":"code","01d2aa64":"code","d1cc0a65":"code","1d78ee7f":"code","a23f9992":"code","f1f551ee":"code","95ea9fe9":"code","f1a1ede0":"code","5ae35dbd":"code","73593bed":"code","4e074726":"code","3f5e69fb":"code","a94867ca":"code","c10dc3aa":"code","7f7ef773":"code","de9f54c3":"code","9d70c1f8":"code","daba0343":"code","83914ef6":"code","58615403":"code","d132df3c":"code","ecd5356a":"code","c98c8016":"code","c74a5101":"code","df027bdc":"code","9ba5f628":"code","8acb177b":"code","5d8bcc56":"code","24ec9701":"code","5850d640":"code","b865dae8":"code","d067cece":"code","c90464c4":"code","0ea93a3c":"code","c576d048":"code","8a8d48ab":"markdown","48399fb2":"markdown","9e825c11":"markdown","1e58e1f0":"markdown","14f7f0c6":"markdown","bc2f9d8f":"markdown","4dc562c4":"markdown","88297105":"markdown"},"source":{"deb3fa95":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas_profiling import ProfileReport\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom gensim.parsing.preprocessing import remove_stopwords\nfrom gensim.parsing.preprocessing import preprocess_documents\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nset(stopwords.words('english'))\nimport regex as re\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ec880be":"train = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/test.csv')","01b61244":"train.describe()","486fbf06":"profile = ProfileReport(train, minimal=True)","2a20e2af":"profile","01d2aa64":"train['Number_of_words_text'] = train['text'].apply(lambda x: len(str(x).split()))\ntrain['Number_of_words_sel_text'] = train['selected_text'].apply(lambda x: len(str(x).split()))\n","d1cc0a65":"plt.figure(figsize=(15,10))\nplt.title('Kernel distribution of number of words for neutral sentiment')\ntext=sns.kdeplot(train.loc[(train['sentiment']=='neutral'),'Number_of_words_text'], shade=True, color=\"r\")\nsel_text=sns.kdeplot(train.loc[(train['sentiment']=='neutral'),'Number_of_words_sel_text'], shade=True, color=\"b\")","1d78ee7f":"plt.figure(figsize=(15,10))\nplt.title('Kernel distribution of words for positive sentiment')\ntext=sns.kdeplot(train.loc[(train['sentiment']=='positive'),'Number_of_words_text'], shade=True, color=\"r\")\nsel_text=sns.kdeplot(train.loc[(train['sentiment']=='positive'),'Number_of_words_sel_text'], shade=True, color=\"b\")","a23f9992":"plt.figure(figsize=(15,10))\nplt.title('Kernel distribution of number of words for negative sentiment')\ntext=sns.kdeplot(train.loc[(train['sentiment']=='negative'),'Number_of_words_text'], shade=True, color=\"r\")\nsel_text=sns.kdeplot(train.loc[(train['sentiment']=='negative'),'Number_of_words_sel_text'], shade=True, color=\"b\")","f1f551ee":" \n# Method 1: on the same Axis\nsns.distplot(train.loc[(train['sentiment']=='neutral'),'Number_of_words_text'], color=\"skyblue\", label=\"Text\")\nsns.distplot(train.loc[(train['sentiment']=='neutral'),'Number_of_words_sel_text'], color=\"red\", label=\"Selected Text\")\nplt.title('Dsitribution plot for text and selected text of negative sentiments')\nplt.legend()\n \n","95ea9fe9":" \n# Method 1: on the same Axis\nsns.distplot(train.loc[(train['sentiment']=='positive'),'Number_of_words_text'], color=\"skyblue\", label=\"Text\")\nsns.distplot(train.loc[(train['sentiment']=='positive'),'Number_of_words_sel_text'], color=\"red\", label=\"Selected Text\")\nplt.title('Dsitribution plot for text and selected text of negative sentiments')\nplt.legend()\n \n","f1a1ede0":" \n# Method 1: on the same Axis\nsns.distplot(train.loc[(train['sentiment']=='negative'),'Number_of_words_text'], color=\"skyblue\", label=\"Text\")\nsns.distplot(train.loc[(train['sentiment']=='negative'),'Number_of_words_sel_text'], color=\"red\", label=\"Selected Text\")\nplt.title('Dsitribution plot for text and selected text of negative sentiments')\nplt.legend()\n \n","5ae35dbd":"def get_jaccard_sim(str1, str2):\n    if len(str1) == 0 and len(str2) == 0:\n        return 1.0\n    if type(str1) is not list:\n        a = set(str1.split())\n        b = set(str2.split())\n    else:\n        a = set(str1)\n        b = set(str2)\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","73593bed":"train.dropna(inplace=True)","4e074726":"train['jaccard_sim'] = 0\ntrain['jaccard_sim'] = train.apply(lambda x: get_jaccard_sim(x['text'], x['selected_text']), axis=1)","3f5e69fb":"train['sentiment'].value_counts()","a94867ca":"print(train.loc[train['sentiment']=='neutral','jaccard_sim'].mean())\nprint(train.loc[train['sentiment']=='positive','jaccard_sim'].mean())\nprint(train.loc[train['sentiment']=='negative','jaccard_sim'].mean())","c10dc3aa":"plt.hist(train.loc[train['sentiment']=='neutral','jaccard_sim'])","7f7ef773":"plt.hist(train.loc[train['sentiment']=='positive','jaccard_sim'])","de9f54c3":"plt.hist(train.loc[train['sentiment']=='negative','jaccard_sim'])","9d70c1f8":"train.loc[train['jaccard_sim']==0]","daba0343":"train.loc[train['jaccard_sim']==1]","83914ef6":"print(train.loc[train['jaccard_sim']==1, 'Number_of_words_text'].mean())\nprint(train.loc[train['jaccard_sim']==0, 'Number_of_words_text'].mean())","58615403":"print(train.loc[train['jaccard_sim']<0.5, 'Number_of_words_text'].mean())\nprint(train.loc[train['jaccard_sim']>0.5, 'Number_of_words_text'].mean())\nprint(train.loc[train['jaccard_sim']>0.4, 'Number_of_words_text'].mean())","d132df3c":"print(train.loc[train['jaccard_sim']<0.5, 'Number_of_words_sel_text'].mean())\nprint(train.loc[train['jaccard_sim']>0.5, 'Number_of_words_sel_text'].mean())\nprint(train.loc[train['jaccard_sim']>0.4, 'Number_of_words_sel_text'].mean())","ecd5356a":"stop_words = set(stopwords.words('english'))","c98c8016":"train['stop_words_text'] = train.apply(lambda x: [y for y in word_tokenize(x['text']) if not y in stop_words], axis=1)\ntrain['stop_words_sel_text'] = train.apply(lambda x: [y for y in word_tokenize(x['selected_text']) if not y in stop_words], axis=1)","c74a5101":"train.isna().sum()","df027bdc":"train['jaccard_sim_stopwords'] = 0\ntrain['jaccard_sim_stopwords'] = train.apply(lambda x: get_jaccard_sim(x['stop_words_text'], x['stop_words_sel_text']), axis=1)","9ba5f628":"  plt.hist(train.loc[train['sentiment']=='neutral','jaccard_sim_stopwords'])","8acb177b":"  plt.hist(train.loc[train['sentiment']=='positive','jaccard_sim_stopwords'])","5d8bcc56":"  plt.hist(train.loc[train['sentiment']=='negative','jaccard_sim_stopwords'])","24ec9701":"train.loc[train['jaccard_sim_stopwords']!=train['jaccard_sim']]","5850d640":"def text_preprocessing(data, index):\n    data = [data[i, index].lower() for i in range(len(data))]\n    data = [remove_stopwords(data[i]) for i in range(len(data))]\n    data = preprocess_documents(data)\n    return data","b865dae8":"def make_word_cloud(df, preprocess, column_names):\n    \n    df[column_names] = df[column_names].fillna('')\n    train = df.values\n    index = df.columns.get_loc(column_names)\n    \n    if preprocess:\n        train = text_preprocessing(train, index)\n    else:\n        train = [train[i, index].lower() for i in range(len(train))]\n        \n    df[column_names] = train\n    if preprocess:\n        df[column_names] = [(\" \").join(i) for i in df[column_names]]\n        \n    pos = df[column_names][df['sentiment'] == 'positive']\n    pos = list(pos.values)\n    pos = (\" \").join(i for i in pos)\n\n    neg = df[column_names][df['sentiment'] == 'negative']\n    neg = list(neg.values)\n    neg = (\" \").join(i for i in neg)\n\n    neu = df[column_names][df['sentiment'] == 'neutral']\n    neu = list(neu.values)\n    neu = (\" \").join(i for i in neu)\n    \n    \n    fig=plt.figure(figsize=(10, 10))\n    fig.add_subplot(3, 1, 1)\n    wordcloud = WordCloud(max_font_size=50, max_words=100, background_color=\"white\").generate(pos)\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.title('Positive Word Cloud for {} column with Preprocess {} \\n'.format(column_names, preprocess), fontsize=15)\n    fig.add_subplot(3, 1, 2)\n    wordcloud = WordCloud(max_font_size=50, max_words=100, background_color=\"white\").generate(neg)\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.title('Negative Word Cloud for {} column with Preprocess {} \\n'.format(column_names, preprocess), fontsize=15)\n    fig.add_subplot(3, 1, 3)\n    wordcloud = WordCloud(max_font_size=50, max_words=100, background_color=\"white\").generate(neu)\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.title('Neutral Word Cloud for {} column with Preprocess {} \\n'.format(column_names, preprocess), fontsize=15)\n\n    plt.show()","d067cece":"make_word_cloud(train, True, 'selected_text')","c90464c4":"make_word_cloud(train, True, 'text')","0ea93a3c":"make_word_cloud(train, False, 'selected_text')","c576d048":"make_word_cloud(train, False, 'text')","8a8d48ab":"### 1-1- Comparing distribution of number of words\n\n#### Kernel ditribution will show the overall distribution across each sentiments and histograms after that will show detailed distribution","48399fb2":"### 1-4- WordCloud","9e825c11":"### 1-2- Calculating similarity between text and selected_text","1e58e1f0":"# 1- Exploratory Data Analysis\n","14f7f0c6":"### 1-3- Checking stop word distribution in text and selected text","bc2f9d8f":"### Observation \nBoth text and selected text has stopwords and the distribution of jaccard similarity for stopwords looks same as similarity distribution for number of words - hence, possibly, separating stopwords won't won't help. I also tried with normal text cleaning processes like punctuation, repeating characters, emoji removal, normalization of text - but that didn't seem to help as selected_text have them too.","4dc562c4":"#### Observation:\n\nAverage similarity between neutral tweets -  0.97\nAverage similarity between positive tweets -  0.31\nAverage similarity between negative tweets -  0.33\n\nDifference in number of words between text and selected text increases when jaccard similarity drops below 0.4\n\nDistribution of sentiment - 40% neutral; 31% positive and 28% negative","88297105":"# Twitter Sentiment Analysis\n\n\nIn this Jupiter notebook, first, we explore data to extract patterns and get better insight about the dataset.\nThen we apply various models to get better results\n"}}