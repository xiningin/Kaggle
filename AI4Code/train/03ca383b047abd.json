{"cell_type":{"c42a439d":"code","9277d687":"code","004eb9ba":"code","7c42bb63":"code","419a9a6d":"code","85db1c5f":"code","a3503428":"code","13801c01":"code","07b03797":"code","6ab78161":"code","b4db1374":"code","d2598050":"code","f51167d9":"code","2301015c":"code","7bf0db9e":"code","35bae39a":"code","d0bb3ff4":"code","9cacbdf8":"code","9f7e50e0":"code","bc929e5a":"code","3dbd0168":"code","07428c38":"code","28f0b8c5":"code","2d1c8a9d":"code","a9808bb2":"code","e33849e5":"code","4a193876":"code","4b9f6f23":"code","a89181de":"code","4aa4dd94":"code","2c785a80":"code","e9ff0326":"code","a48a3aee":"code","a9e879f8":"code","7090d976":"code","a404870e":"code","c176a1fe":"code","33017e47":"code","4007aac7":"code","d1ec8849":"code","daeac493":"markdown","355a9ec4":"markdown","b58e1e59":"markdown","24186fbb":"markdown","6e958368":"markdown"},"source":{"c42a439d":"import numpy as np\nimport pandas as pd\nimport os\nfrom fastai import *\nfrom fastai.vision import *","9277d687":"# Handy little function that comes stock on all Kaggle kernals\n# I tend to revisit and tweek this many times to make sure I'm getting all the apropriate file paths right\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","004eb9ba":"pix=250\n#number of photos to download per class","7c42bb63":"classes = ['Bagels', 'Cupcakes','Doughnuts', 'Muffins']","419a9a6d":"folder = 'Bagels'\nfile = 'Bagels.txt'","85db1c5f":"path = Path('\/kaggle\/working\/')\ndest = path\/folder\ndest.mkdir(parents=True, exist_ok=True)","a3503428":"!cp ..\/input\/image-urls-for-lesson-2\/* {path}\/","13801c01":"download_images(path\/file, dest, max_pics=pix)\n#The invalid URL warning this produces is for the excess blank newlines that I probably could have cleaned out of the URL list documents.","07b03797":"folder = 'Cupcakes'\nfile = 'Cupcake.txt'\npath = Path('\/kaggle\/working\/')\ndest = path\/folder\ndest.mkdir(parents=True, exist_ok=True)","6ab78161":"download_images(path\/file, dest, max_pics=pix)","b4db1374":"folder = 'Doughnuts'\nfile = 'Doughnuts.txt'\npath = Path('\/kaggle\/working\/')\ndest = path\/folder\ndest.mkdir(parents=True, exist_ok=True)","d2598050":"download_images(path\/file, dest, max_pics=pix)","f51167d9":"folder = 'Muffins'\nfile = 'Muffin.txt'\npath = Path('\/kaggle\/working\/')\ndest = path\/folder\ndest.mkdir(parents=True, exist_ok=True)","2301015c":"download_images(path\/file, dest, max_pics=pix)","7bf0db9e":"for c in classes:\n    print(c)\n    verify_images(path\/c, delete=True, max_size=500)","35bae39a":"np.random.seed(42)\ndata = ImageDataBunch.from_folder(path,\n                                 train='.',\n                                 valid_pct=0.3,\n                                 ds_tfms=get_transforms(),\n                                 size=224,\n                                 bs=64,\n                                 num_workers=0\n                                 ).normalize(imagenet_stats)","d0bb3ff4":"data.classes","9cacbdf8":"data.show_batch(row=3, figsize=(12,12))","9f7e50e0":"learn = cnn_learner(data, models.resnet34, pretrained=False, metrics=error_rate)\nModel_Path = Path('\/kaggle\/input\/bcdmmodel\/')\nlearn.model_dir = Model_Path\nlearn.load('stage-1')\nprint('Model Load Complete')","bc929e5a":"learn.unfreeze()","3dbd0168":"learn.fit_one_cycle(1)","07428c38":"Model_Path = Path('\/kaggle\/working')\nlearn.model_dir = Model_Path\nlearn.save('stage-2')","28f0b8c5":"learn.lr_find()","2d1c8a9d":"learn.recorder.plot()","a9808bb2":"learn.save('stage-3')","e33849e5":"learn.load('stage-3')\nprint('\\n')","4a193876":"learn.unfreeze()","4b9f6f23":"learn.fit_one_cycle(3, max_lr=slice(1e-6,1e-3))#(2, max_lr=slice(1e-5,2e-2))","a89181de":"learn.save('stage-4')","4aa4dd94":"interp = ClassificationInterpretation.from_learner(learn)","2c785a80":"interp.plot_confusion_matrix()","e9ff0326":"interp.plot_top_losses(9, figsize=(14,14))","a48a3aee":"from fastai.widgets import *","a9e879f8":"#ds, idxs = DatasetFormatter().from_toplosses(learn, n_imgs=100)","7090d976":"#ImageCleaner(ds, idxs, path)","a404870e":"#ds, idxs = DatasetFormatter().from_similars(learn)\n#ImageCleaner(ds, idxs, path, duplicates=True)","c176a1fe":"defaults.device = torch.device('cpu') # For inferance a cpu is sufficient for most use cases\n                                      # A GPU would be overkill unless this was scaled up to alot of simultanious images","33017e47":"img = open_image(Path('\/kaggle\/working\/Cupcakes\/00000008.jpg'))\nimg","4007aac7":"pred_class,pred_idx,outputs = learn.predict(img)\npred_class","d1ec8849":"# To export the model in a .pkl format, which would be useful if we wanted to host this model on another platform.\n# webapp hosting isn't something thats optimal to show off though Kaggle so this is where I'll wrap up this notebook.\n\nlearn.export()","daeac493":"Looking at some of these top losses the error rate makes sense (the downside of using google search to label your data for you).\n\nThe following section is a UI based approach for cleaning up the dataset. Ultimately I didn't find it helpful for this use case. feel free to uncomment out the section below to try for yourself. ","355a9ec4":"# Quirk\nFor some silly reason if I run the cnn_learner with pretrained left in its default `True` state then I can't commit this notebook successfully. But if I train the model in one of these kernels, download it, then upload it to the notebook and then load it the notebook commits just fine. The code below generates the model that I will be updating in this notebook.\n\n`\nlearn = cnn_learner(data, models.resnet34, metrics=error_rate)\nlearn.fit_one_cycle(4)\nModel_Path = Path('\/kaggle\/working\/')\nlearn.model_dir = Model_Path\nlearn.save('stage-1')\n`","b58e1e59":"# Final thoughts\n\nOne issue with the data was noise in the images (for instance many of the images of Bagels had condiments that obscured the view of said bagel), and also there wasn't consistent item quantity among the images. I'm curious if I could have created a model that generalized better if I started by first selecting only a couple dozen clean images of single objects.\n\nIn case you are curious, the original notebook for lesson 2 from FastAI is here: https:\/\/github.com\/fastai\/course-v3\/blob\/master\/nbs\/dl1\/lesson2-download.ipynb ","24186fbb":"# FastAI Lesson 2 Homework\n\nThe goal of this notebook is to practice some of the techniques used in lesson 2 of FastAI's Practical Deep Learning for Coders course.\n\nThe following is the groundwork to train and deploy a deep learning neural net to differentiate between Cupcakes, Muffins, Bagels, and Doughnuts. The inspiration for this model was the idea of grabbing what one thought was a chocolate chip cookie, when in reality it was an oatmeal raisin cookie. At the time I couldn't remember the cookie problem so I found a similar set of issues (I also wanted to make sure I had more than 2 classes).\n\nThe text doc that is labeled 'Google_Image_Grab_CMD.txt', ing the input directory, is just the basic technique used to grab the image URLs ","6e958368":"# Testing the model on an individual image"}}