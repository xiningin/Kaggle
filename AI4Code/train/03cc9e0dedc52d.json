{"cell_type":{"3d953516":"code","eb2b9fc8":"code","c1a71dc8":"code","eadce84b":"code","3a9d8047":"code","d2f05b35":"code","78f6c164":"code","46d92f46":"code","ea9de58a":"code","15eab1a0":"code","422027ff":"code","d875d166":"code","9df620de":"code","74c2c453":"code","7cce074d":"code","8324a70c":"code","73479539":"code","d4056dd0":"code","506b55cc":"code","934626f6":"code","c2d8a9d8":"code","3c6bcc1f":"code","a0935766":"code","6c1639d3":"code","27c1c62f":"code","b65e1573":"code","39415bf4":"code","c302ecb1":"markdown","612a72d5":"markdown"},"source":{"3d953516":"import numpy as np \nimport pandas as pd \nimport os\nimport glob\nimport cv2\nimport matplotlib.pyplot as plt\nfrom keras.utils import Sequence\nfrom sklearn.model_selection import train_test_split","eb2b9fc8":"from sklearn.utils import class_weight","c1a71dc8":"data=pd.read_csv('..\/input\/seti-breakthrough-listen\/train_labels.csv')","eadce84b":"data","3a9d8047":"data.hist()","d2f05b35":"pos=len(data[data['target']==1])\nneg=len(data[data['target']==0])\npos\/len(data)","78f6c164":"base_addr= '..\/input\/seti-breakthrough-listen\/train\/'","46d92f46":"def retfolder(i):\n    if(i>=0 and i<3145):\n        return '0'\n    elif(i>=3145 and i<6289):\n        return '1'\n    elif(i>=6289 and i<9434):\n        return '2'\n    elif(i>=9434 and i<12549):\n        return '3'\n    elif(i>=12549 and i<15672):\n        return '4'\n    elif(i>=15672 and i<18798):\n        return '5'\n    elif(i>=18798 and i<22029):\n        return '6'\n    elif(i>=22029 and i<25190):\n        return '7'\n    elif(i>=25190 and i<28276):\n        return '8'\n    elif(i>=28276 and i<31415):\n        return '9'\n    elif(i>=31415 and i<34502):\n        return 'a'\n    elif(i>=34502 and i<37629):\n        return 'b'\n    elif(i>=37629 and i<40796):\n        return 'c'\n    elif(i>=40796 and i<43844):\n        return 'd'\n    elif(i>=43844 and i<47014):\n        return 'e'\n    else:\n        return 'f'\n\n","ea9de58a":"X=[]\nfor i in range(50165):\n    file=str(data['id'][i])\n    folder=retfolder(i)\n    filepath=base_addr+'\/'+folder+'\/'+file+'.npy'\n    X.append(filepath)\ndata['path']=X\n\n","15eab1a0":"data.head()","422027ff":"filename='..\/input\/seti-breakthrough-listen\/train\/\/0\/09a4c7f3f638.npy'\nimg=np.load(filename)\nimg=np.reshape(np.float32(img),(312,448,3))\nplt.imshow(img)","d875d166":"X=data['path']\nY=data['target']","9df620de":"X_train, X_val, y_train, y_val = train_test_split(X, Y, test_size=0.2)","74c2c453":"class SETIgenerator(Sequence):\n    def __init__(self, x_set, y_set, batch_size):\n        self.x, self.y = x_set, y_set\n        self.batch_size = batch_size\n\n    def __len__(self):\n        return int(np.ceil(len(self.x) \/ float(self.batch_size)))\n    def __getitem__(self, idx):\n        batch_x = self.x[idx * self.batch_size:(idx + 1) * self.batch_size]\n        batch_y = self.y[idx * self.batch_size:(idx + 1) * self.batch_size]\n        images=[]\n        for filename in batch_x:\n            data=np.load(filename)\n            data = data[::2,]\n            img  = np.moveaxis(data, 0, -1)\n            img  = img.astype(np.float32)\n            img=cv2.resize(img,(256,256),interpolation=cv2.INTER_NEAREST)\n            images.append(img)\n        return np.array(images),np.array(batch_y)","7cce074d":"y_train","8324a70c":"class_weights = class_weight.compute_class_weight('balanced',np.unique(y_train.values.ravel()),y_train.values.ravel())\nclass_weights = dict(enumerate(class_weights))\nclass_weights","73479539":"import tensorflow as tf\nfrom keras import backend as K\nfrom keras.models import Model\nfrom keras.layers import Input, Conv2D, MaxPooling2D,concatenate,ZeroPadding2D,Dense,Flatten\nfrom keras.optimizers import Adam,SGD\nimport keras","d4056dd0":"def res(prev_layer):\n    l1=Conv2D(64,(3,3),activation='relu')(prev_layer)\n    l2=Conv2D(64,(3,3),activation='relu',padding='same')(l1)\n    l3=Conv2D(64,(3,3),activation='relu',padding='same')(l2)\n    l4=concatenate([l1,l3])\n    l4=ZeroPadding2D(padding=(1, 1))(l4)\n    l5=Conv2D(64,(3,3),activation='relu',padding='same')(l4)\n    l6=concatenate([prev_layer,l5])\n    return l6","506b55cc":"from keras.applications.resnet50 import ResNet50\nmd=ResNet50(include_top=False,input_shape=(256,256, 3))","934626f6":"inp=Input(shape=(256,256, 3))\nl1=md(inp)\n\nl2=Flatten()(l1)\nl3=Dense(10,activation='relu')(l2)\nl3=Dense(2,activation='relu')(l3)\noutput=Dense(1,activation='sigmoid')(l3)\nmodel=Model(inputs=[inp],outputs=output)\nmodel.summary()","c2d8a9d8":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss', patience=4, mode='min')","3c6bcc1f":"def recall_m(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n    recall = true_positives \/ (possible_positives + K.epsilon())\n    return recall\n\ndef precision_m(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n    precision = true_positives \/ (predicted_positives + K.epsilon())\n    return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n","a0935766":"model.compile(loss='binary_crossentropy', optimizer='adam', metrics=[keras.metrics.AUC(),recall_m,precision_m,f1_m])","6c1639d3":"train_data=SETIgenerator(X_train,y_train,128)\nval_data=SETIgenerator(X_val,y_val,128)","27c1c62f":"hist=model.fit(train_data, batch_size=128, epochs=3, validation_data=val_data,callbacks=early_stop,class_weight=class_weights)","b65e1573":"pred=model.predict(val_data)","39415bf4":"pred","c302ecb1":"# Preparing the File paths in the train_labels File","612a72d5":"# Model architecture"}}