{"cell_type":{"38a29249":"code","476618fe":"code","508db571":"code","7f043c11":"code","42ccfc88":"code","3d882a32":"code","8e0dfd9d":"code","d1828441":"code","d779b34d":"code","6d3ab835":"code","f533e1c4":"code","4ae281cb":"code","f42807b1":"code","880bbee0":"code","7e39ecfc":"code","f1660ba9":"code","c89397dc":"code","9f23a022":"code","50c1d370":"code","2827ba95":"code","3cc85e92":"code","af1f4b2f":"code","e326d8e9":"code","18aef713":"code","b8738d6b":"code","6bb0442c":"code","6002bd25":"code","6d30cd5b":"code","0707b793":"code","d1473cf5":"code","8e758cc4":"code","c03988b5":"code","503c2459":"code","2b61daac":"code","99b4999a":"code","dfd3b065":"markdown","5d43f1e7":"markdown","72e277da":"markdown","d3960277":"markdown","76bcc85b":"markdown"},"source":{"38a29249":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm, skew","476618fe":"df=pd.read_csv('..\/input\/house-prices-data\/train.csv')\ntest=pd.read_csv('..\/input\/house-prices-data\/test.csv')\ny_train = df['SalePrice']\ntest_id = test['Id']\nall_data = pd.concat([df, test], axis=0, sort=False)\nall_data = all_data.drop(['Id', 'SalePrice'], axis=1)\n","508db571":"df","7f043c11":"len(df.columns)","42ccfc88":" sns.distplot(df['SalePrice'])\n","3d882a32":"df['SalePrice'] = np.log1p(df['SalePrice'])\nsns.distplot(df['SalePrice'], fit=norm);\n\n","8e0dfd9d":"cor = df.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(cor, vmax=.8, square=True);\n","d1828441":"cor2 = df.corr()\nhighest_corr_features = cor2.index[abs(cor2[\"SalePrice\"])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(df[highest_corr_features].corr(),annot=True,cmap=\"magma\")\n","d779b34d":"cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(df[cols])","6d3ab835":"cor2[\"SalePrice\"].sort_values(ascending=False)","f533e1c4":"Total = all_data.isnull().sum().sort_values(ascending=False)\npercent = (all_data.isnull().sum() \/ all_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([Total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(25)\n","4ae281cb":"all_data.drop((missing_data[missing_data['Total'] > 5]).index, axis=1, inplace=True)\nprint(all_data.isnull().sum().max())\n","f42807b1":"total = all_data.isnull().sum().sort_values(ascending=False)\ntotal.head(20)","880bbee0":"numeric_missed = ['BsmtFinSF1',\n                  'BsmtFinSF2',\n                  'BsmtUnfSF',\n                  'TotalBsmtSF',\n                  'BsmtFullBath',\n                  'BsmtHalfBath',\n                  'GarageArea',\n                  'GarageCars']\n\nfor feature in numeric_missed:\n    all_data[feature] = all_data[feature].fillna(0)\n#Filling values not available by zero","7e39ecfc":"all_data['Functional']","f1660ba9":"categorical_missed = ['Exterior1st',\n                  'Exterior2nd',\n                  'SaleType',\n                  'MSZoning',\n                   'Electrical',\n                     'KitchenQual']\n\nfor feature in categorical_missed:\n    all_data[feature] = all_data[feature].fillna(all_data[feature].mode()[0])\n","c89397dc":"\nall_data['Functional'] = all_data['Functional'].fillna('Typ')\n","9f23a022":"all_data.drop(['Utilities'], axis=1, inplace=True)","50c1d370":"all_data.isnull().sum().max() #just checking that there's no missing data missing...\n","2827ba95":"numeric_feats = all_data.dtypes[all_data.dtypes != 'object'].index#data type is not object then store those data in numeric features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x)).sort_values(ascending=False)#checks if skew ,yes then sorts in descendin order\nhigh_skew = skewed_feats[abs(skewed_feats) > 0.5]#highly skewed classification\nhigh_skew\n","3cc85e92":"type(high_skew)","af1f4b2f":"all_data['LowQualFinSF']","e326d8e9":"sns.distplot(all_data['LowQualFinSF'],fit=norm)","18aef713":"for feature in high_skew.index:\n    all_data[feature] = np.log1p(all_data[feature])\n","b8738d6b":"all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\n","6bb0442c":"sns.displot(all_data['TotalSF'])","6002bd25":"all_data = pd.get_dummies(all_data)\nall_data.head()","6d30cd5b":"x_train =all_data[:len(y_train)]\nx_test = all_data[len(y_train):]","0707b793":"x_test.shape , x_train.shape","d1473cf5":"from sklearn.metrics import make_scorer\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nscorer = make_scorer(mean_squared_error,greater_is_better = False)\n\ndef rmse_CV_train(model):\n    kf = KFold(5,shuffle=True,random_state=123).get_n_splits(x_train.values)\n    rmse = np.sqrt(-cross_val_score(model, x_train, y_train,scoring =\"neg_mean_squared_error\",cv=kf))\n    return (rmse)\ndef rmse_CV_test(model):\n    kf = KFold(5,shuffle=True,random_state=123).get_n_splits(df.values)\n    rmse = np.sqrt(-cross_val_score(model, x_test, y_test,scoring =\"neg_mean_squared_error\",cv=kf))\n    return (rmse)\n","8e758cc4":"from xgboost.sklearn import XGBRegressor","c03988b5":"xgb1=XGBRegressor()","503c2459":"xgb1.fit(x_train, y_train)\ny_predict = xgb1.predict(x_test)\ny_predict","2b61daac":"sub = pd.DataFrame()\nsub['Id'] = test_id\nsub['SalePrice'] = y_predict\nsub.to_csv('mysubmission3.csv',index=False)","99b4999a":"sub","dfd3b065":"Utilities is not present here","5d43f1e7":"## Feature Engineering","72e277da":"<a href=\"https:\/\/colab.research.google.com\/github\/a-ma-n\/ISTE_Task1\/blob\/main\/task_1_final.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","d3960277":"## Importing modules","76bcc85b":"## Categorical to numerical data"}}