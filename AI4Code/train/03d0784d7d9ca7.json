{"cell_type":{"8c535526":"code","b9dd395e":"code","e6a2708d":"code","c0b9cfd9":"code","b4667b06":"code","6ac10ac4":"code","c55e22dd":"code","d5dfe18a":"code","83046a17":"code","2ff8262f":"code","c96dc3a6":"code","42e641c5":"code","3e8c2d21":"code","c0bea4cc":"code","510f43da":"code","8b1ed425":"code","149af241":"code","d846b4b4":"code","27febbf0":"code","68bd1359":"code","0a214ac1":"code","00e0a1f2":"code","39a8e93d":"code","2129da9b":"code","2144db34":"code","ac38abd5":"markdown","fe33caf4":"markdown"},"source":{"8c535526":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b9dd395e":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt","e6a2708d":"train_df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nprint(train_df.shape)\ntrain_df.head(10)","c0b9cfd9":"test_df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nprint(test_df.shape)\ntest_df.head(10)","b4667b06":"train_df.describe()","6ac10ac4":"corr_mat = train_df.corr()[\"SalePrice\"].sort_values(ascending=False)\ncorr_mat","c55e22dd":"# box plot of overallqual and saleprice\nsns.set(font_scale=1.2)\ndata = pd.concat([train_df['SalePrice'], train_df['OverallQual']], axis=1)\nf, ax = plt.subplots(figsize=(12, 9))\nfig = sns.boxplot(x=\"OverallQual\", y=\"SalePrice\", data=data)","d5dfe18a":"# Remove some outliar where OverallQuals are 8, 9 and 10\ntrain_df = train_df.drop(train_df[train_df[\"SalePrice\"] > 700000].index)\ntrain_df = train_df.drop(train_df[(train_df[\"OverallQual\"] == 9) & (train_df[\"SalePrice\"] > 500000)].index)\ntrain_df = train_df.drop(train_df[(train_df[\"OverallQual\"] == 8) & (train_df[\"SalePrice\"] > 500000)].index)\nsns.set(font_scale=1.2)\ndata = pd.concat([train_df['SalePrice'], train_df['OverallQual']], axis=1)\nf, ax = plt.subplots(figsize=(12, 9))\nfig = sns.boxplot(x=\"OverallQual\", y=\"SalePrice\", data=data)","83046a17":"#scatter plot of grlivarea and saleprice\ndata = pd.concat([train_df[\"SalePrice\"], train_df[\"GrLivArea\"]], axis=1)\nf, ax = plt.subplots(figsize=(12, 9))\nfig = sns.scatterplot(x=\"GrLivArea\", y=\"SalePrice\", data=data)","2ff8262f":"# Remove outliar where GrLivArea is over 4000\ntrain_df = train_df.drop(train_df[train_df[\"GrLivArea\"] > 4000].index)\ndata = pd.concat([train_df[\"SalePrice\"], train_df[\"GrLivArea\"]], axis=1)\nf, ax = plt.subplots(figsize=(12, 9))\nfig = sns.scatterplot(x=\"GrLivArea\", y=\"SalePrice\", data=data)","c96dc3a6":"sns.set(font_scale=1.2)\ndata = pd.concat([train_df['SalePrice'], train_df['GarageCars']], axis=1)\nf, ax = plt.subplots(figsize=(12, 9))\nfig = sns.boxplot(x=\"GarageCars\", y=\"SalePrice\", data=data)","42e641c5":"# Remove outliar where GarageCars is 3\ntrain_df = train_df.drop(train_df[(train_df[\"GarageCars\"] == 3) & (train_df[\"SalePrice\"] > 500000)].index)\nsns.set(font_scale=1.2)\ndata = pd.concat([train_df['SalePrice'], train_df['GarageCars']], axis=1)\nf, ax = plt.subplots(figsize=(12, 9))\nfig = sns.boxplot(x=\"GarageCars\", y=\"SalePrice\", data=data)","3e8c2d21":"train_df.isnull().sum()","c0bea4cc":"train_df.fillna(0, inplace=True)\n\nneed_cols = corr_mat[corr_mat > 0].index\nneed_cols","510f43da":"from sklearn.preprocessing import PowerTransformer\n\ntarget_col = need_cols[0]\nfeature_col = need_cols[1:]\n\ntrain_x = train_df[feature_col]\ntrain_y = train_df[[target_col]]\ntest_x = test_df[feature_col]\n\npt = PowerTransformer()\npt.fit(train_x)\npt_train_x = pt.transform(train_x)\npt_test_x = pt.transform(test_x)\n\npt_target = PowerTransformer()\npt_train_y = pt_target.fit_transform(train_y)","8b1ed425":"from scipy import stats\n\nfig = plt.figure()\nres = stats.probplot(train_df['SalePrice'], plot=plt);\nfig = plt.figure()\nres = stats.probplot(pd.Series(pt_train_y.squeeze()), plot=plt)","149af241":"# from sklearn.model_selection import train_test_split, cross_val_score, RepeatedKFold\n\n# pt_train_x, pt_eval_x, pt_train_y, pt_eval_y = train_test_split(pt_train_x, pt_train_y, test_size=0.2, shuffle=False, random_state=42)","d846b4b4":"print(np.where(~np.isfinite(pt_train_x)))","27febbf0":"print(np.where(~np.isfinite(pt_train_y)))","68bd1359":"tmp_df = pd.DataFrame(pt_train_x)\ntmp_df[\"target\"] = pt_train_y","0a214ac1":"print(\"Before delete nan: {}\".format(len(tmp_df)))\ntmp_df = tmp_df.drop(np.where(~np.isfinite(pt_train_x))[0])\nprint(\"After delete nan: {}\".format(len(tmp_df)))","00e0a1f2":"pt_train = tmp_df.to_numpy()\npt_train_x = pt_train[:, :-1]\npt_train_y = pt_train[:, -1]","39a8e93d":"import xgboost as xgb\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import StackingRegressor\n\nensemble_list = []\nensemble_list.append((\"LR\", LinearRegression()))\nensemble_list.append((\"KNN\", KNeighborsRegressor()))\nensemble_list.append((\"DT\", DecisionTreeRegressor()))\nensemble_list.append((\"SVM\", SVR()))\n\nxgb_model = xgb.XGBRegressor(n_estimators=2000, max_depth=5, learning_rate=0.01)\n\nfinal_model = StackingRegressor(estimators=ensemble_list, final_estimator=xgb_model, cv=5)\nfinal_model.fit(pt_train_x, pt_train_y)","2129da9b":"pt_test_x = np.nan_to_num(pt_test_x)\npred_probs = final_model.predict(pt_test_x)\npred_probs","2144db34":"answer = pt_target.inverse_transform(pred_probs.reshape(len(pred_probs), -1))\ntest_df[\"SalePrice\"] = answer.squeeze()\nresult_df = test_df[[\"Id\", \"SalePrice\"]]\nresult_df.to_csv(\"submission.csv\", index=False)","ac38abd5":"### 1. Data Preprocessing","fe33caf4":"### 2. Ready to training"}}