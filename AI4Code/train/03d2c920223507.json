{"cell_type":{"142384cd":"code","b4ba53b3":"code","da5cb0bd":"code","e376837f":"code","21bedcec":"code","bafc0d71":"code","4457ec04":"code","d2fa6052":"code","2c984f76":"code","00d1316a":"code","63bb3fce":"code","ad5d67eb":"code","fc37a3e5":"code","ce02a0f9":"code","5b0f9040":"code","f55301f9":"code","c9070190":"code","891cf611":"code","6a0d74c5":"code","31f4db2f":"code","46b269f7":"code","bc5e67c2":"code","2173efa3":"code","fc34c36f":"markdown","ec0ba4fb":"markdown","5138c5ba":"markdown","b0e1a372":"markdown","836ddcd0":"markdown","b61e41d8":"markdown","8181c9d8":"markdown","988f1fd6":"markdown","7645dd91":"markdown","284b48c7":"markdown","9600c8f5":"markdown","07f13e04":"markdown","6698e60f":"markdown","04257b3f":"markdown","77899d24":"markdown","ab2a12ee":"markdown"},"source":{"142384cd":"import pandas as pd\nimport numpy as np\n\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n\n","b4ba53b3":"df = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')\nprint(\"Shape Dataset:\",df.shape)\n","da5cb0bd":"df.info()","e376837f":"df.head(5)","21bedcec":"# Detect if there is duplication in App\ndf1=df.groupby([\"App\"])[\"App\"].count().reset_index(name=\"count\")\ndf1[(df1['count']>1)]\n","bafc0d71":"df[(df['App']=='10 Best Foods for You')]\n","4457ec04":"# 1. To remove duplicates on specific column(s), use subset.\ndf.drop_duplicates(subset='App', inplace=True)","d2fa6052":"# 2. Drop the rows where all elements are missing.\ndf.isna().sum()","2c984f76":"df.dropna(how='all')\nprint(\"Shape Dataset:\",df.shape)","00d1316a":"# 3. Drop the rows where all elements are Outliers.\ndf = df[df['Installs'] != 'Free']","63bb3fce":"# 1.Convert 'Installs' to float\ndf['Installs'] = df['Installs'].apply(lambda x: x.replace('+', '') if '+' in str(x) else x)\ndf['Installs'] = df['Installs'].apply(lambda x: x.replace(',', '') if ',' in str(x) else x)\ndf['Installs'] = df['Installs'].apply(lambda x: float(x))\n#to Check the Data Type in Pandas DataFrame\nprint(df['Installs'].dtypes)\n","ad5d67eb":"#2. Convert 'Sizes' to MB.\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace('Varies with device', 'NaN') if 'Varies with device' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace('M', '') if 'M' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace(',', '') if 'M' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: float(str(x).replace('k', '')) \/ 1024 if 'k' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: float(x))\n\n#to Check the Data Type in Pandas DataFrame\nprint(df['Size'].dtypes)","fc37a3e5":"#3. Convert 'Price' to float.\ndf['Price'] = df['Price'].apply(lambda x: str(x).replace('$', '') if '$' in str(x) else str(x))\ndf['Price'] = df['Price'].apply(lambda x: float(x))\n#to Check the Data Type in Pandas DataFrame\nprint(df['Price'].dtypes)","ce02a0f9":"#4. Convert 'Reviews' to Int.\ndf['Reviews'] = df['Reviews'].apply(lambda x: int(x))\n#to Check the Data Type in Pandas DataFrame\nprint(df['Reviews'].dtypes)","5b0f9040":"plt.figure(figsize=(10,8))\nsns.heatmap(df.corr(),cmap =\"YlGnBu\",annot=True, alpha=.8)","f55301f9":"db_Category_Free = df[df['Type']==\"Free\"]['Category'].value_counts().sort_values(ascending=False).reset_index()\ndb_Category_Paid = df[df['Type']==\"Paid\"]['Category'].value_counts().sort_values(ascending=False).reset_index()\n\ndf_suffix = pd.merge(db_Category_Free, db_Category_Paid, left_on='index',right_on='index',how='outer')\ndf_suffix = df_suffix.rename(columns = {'index':'Category'})\ndf_suffix = df_suffix.rename(columns = {'Category_x':'Free'})\ndf_suffix = df_suffix.rename(columns = {'Category_y':'Paid'})","c9070190":"fig, ax = plt.subplots(figsize=(20,7))\nax.bar(df_suffix['Category'], df_suffix['Free'], 0.9,  label='Free', alpha=0.7)\nax.bar(df_suffix['Category'], df_suffix['Paid'], 0.9,  bottom=df_suffix['Free'],label='Paid', alpha=0.7)\n\nax.set_xticklabels(df_suffix['Category'],rotation=90,fontsize='11')\n\nax.set_xlabel('',fontsize='17')\nax.set_ylabel('',fontsize='25')\nax.set_title('Number of App (Paid and  Free) according to Category')\nax.legend(loc=1, fontsize = '13')\nplt.show()","891cf611":"\n\nplt.figure(figsize=(11,4))\nax = sns.boxplot(x = df[df['Type']==\"Free\"]['Category'], y = df['Rating'],  palette = 'Purples') #hue = df['Type']\nplt.title('Free', fontsize = 30)\nplt.setp(ax.get_xticklabels(), rotation=90)\nplt.show()\n\nplt.figure(figsize=(11,4))\nax = sns.boxplot(x = df[df['Type']==\"Paid\"]['Category'], y = df['Rating'],  palette = 'Purples') #hue = df['Type']\nplt.title('Paid', fontsize = 30)\nplt.setp(ax.get_xticklabels(), rotation=90)\nplt.show()","6a0d74c5":"g = sns.FacetGrid(df, col='Type')\ng.map(plt.hist, 'Rating', bins=5)","31f4db2f":"\ndef Chart_D(x):\n    fig, ax = plt.subplots(figsize=(17,3))\n    ax.bar(x.iloc[:,0], x.iloc[:,1], 0.7,  label='Free', alpha=0.7)\n    ax.set_xticklabels(x['Category'],rotation=90,fontsize='11')\n    ax.set_xlabel('',fontsize='17')\n    ax.set_ylabel('',fontsize='25')\n    ax.set_title(\"Average rating of Apps - \"+ x.columns[1],fontsize='20')\n\n    for p in ax.patches:\n        x=p.get_bbox().get_points()[:,0]\n        y=p.get_bbox().get_points()[1,1]\n        ax.annotate('{:.2f}'.format(p.get_height()), (x.mean(), y), ha='center', va='bottom')\n    #plt.show()\n\ndb_gr = df.groupby([\"Category\"])[\"Rating\"].mean().sort_values(ascending=False).reset_index()\ndb_gr = db_gr.rename(columns = {'Rating':'All'})\nChart_D(db_gr)\n\ndb_grFree = df[df['Type']==\"Free\"].groupby([\"Category\"])[\"Rating\"].mean().sort_values(ascending=False).reset_index()\ndb_grFree = db_grFree.rename(columns = {'Rating':'Free'})\nChart_D(db_grFree)\n\ndb_grPaid = df[df['Type']==\"Paid\"].groupby([\"Category\"])[\"Rating\"].mean().sort_values(ascending=False).reset_index()\ndb_grPaid = db_grPaid.rename(columns = {'Rating':'Paid'})\nChart_D(db_grPaid)\n\n\ndf_gr10=df[df['Size']<10].groupby([\"Category\"])[\"Rating\"].mean().sort_values(ascending=False).reset_index()\ndf_gr10 = df_gr10.rename(columns = {'Rating':'Size [less than 10MB]'})\nChart_D(df_gr10)\n\ndf_gr1050 = df[(df['Size']>=10) & (df['Size']<50)].groupby([\"Category\"])[\"Rating\"].mean().sort_values(ascending=False).reset_index()\ndf_gr1050 = df_gr1050.rename(columns = {'Rating':'Size [10MB - 50MB] '})\nChart_D(df_gr1050)\n\ndf_gr50 = df[df['Size']>=50].groupby([\"Category\"])[\"Rating\"].mean().sort_values(ascending=False).reset_index()\ndf_gr50 = df_gr50.rename(columns = {'Rating':'Size [larger than 50MB]'})\nChart_D(df_gr50)\n\n","46b269f7":"#sns.jointplot(data=df,x=df['Size'], y=df['Rating'], color=\"#1aa3dc\",hue=\"Type\", kind=\"kde\")\nsns.jointplot(x=df[df['Type']==\"Free\"]['Size'], y=df[df['Type']==\"Free\"]['Rating'], kind=\"hex\", color=\"#6EA3CC\")","bc5e67c2":"sns.jointplot(x=df[df['Type']==\"Paid\"]['Size'], y=df[df['Type']==\"Paid\"]['Rating'], kind=\"hex\", color=\"#FC8B29\")","2173efa3":"sns.jointplot(x=df[(df['Type']==\"Paid\") & (df['Price']<50)]['Price'], y=df[(df['Type']==\"Paid\") & (df['Price']<50)]['Rating'], kind=\"hex\", color=\"#FC8B29\")\n\n","fc34c36f":"![photo.jpg](attachment:photo.jpg)","ec0ba4fb":"## Task #4: Perform Exploratory Data Analysis","5138c5ba":"## Task #7: Correlation Matrix ","b0e1a372":"![1yb9tv.jpg](attachment:1yb9tv.jpg)","836ddcd0":"## Task #11: Rating Vs Price","b61e41d8":"## Task #8: Number of App according to Category","8181c9d8":"## Task #3: Import and peek at the dataset","988f1fd6":"## Task #5: Perform data cleaning\n 1. Remove duplicates.\n 2. Drop the rows where all elements are missing.\n 3. Drop the rows where all elements are Outliers","7645dd91":"### Rating Vs Size (Free App)","284b48c7":"## Task #2: Import libraries ","9600c8f5":"## Task #1: Understand the Problem Statement and business case","07f13e04":"## Task #6: Perform data preparation \n 1. Convert 'Installs' to float by Removing '+' and ',' to make it numeric.\n 2. Convert 'Sizes' to MB.\n 3. Convert 'Price' to float by Removing '$' to make it numeric.\n 4. Convert 'Reviews' to Int\n\n ","6698e60f":"## Make sure to upvote if this was useful (and motivate me to make more!)","04257b3f":"## Task #9: Rating of App according to Category","77899d24":"### Rating Vs Size (Paid App)","ab2a12ee":"## Task #10: Rating Vs Size"}}