{"cell_type":{"53029fe9":"code","349d5c24":"code","d16259e6":"code","0063bb5f":"code","6c8a3be9":"code","27cc78c0":"code","1cc93029":"code","cb0cb0cf":"code","26e56c93":"code","fe11cc97":"code","28176206":"code","b7567cb2":"code","15ccc67d":"code","48e7a5e5":"code","604ff00d":"code","a06dec40":"code","2d5c4c28":"code","5ab28f63":"code","c390ccb2":"code","f390f607":"code","17cdb227":"code","bbbf57fd":"markdown","2646e00a":"markdown","bbe55c24":"markdown","52cde511":"markdown","d60590c8":"markdown","3bd7d615":"markdown","00a4b108":"markdown","507027d7":"markdown","7d417ec9":"markdown","622bdd5d":"markdown","403f502b":"markdown","f3629be2":"markdown","e3441436":"markdown","f744ac9d":"markdown","4219bca5":"markdown","01e87f99":"markdown","564bb7b8":"markdown","bf31f9bf":"markdown"},"source":{"53029fe9":"import os.path\nimport json\nimport codecs\nfrom collections import Counter\nimport random\nimport math\n\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport torch.utils.data as D\n\nfrom sklearn.model_selection import train_test_split","349d5c24":"TRAIN_PATH = \"..\/input\/herbarium-2020-fgvc7\/nybg2020\/train\/\"\nTRAIN_META_PATH = \"..\/input\/herbarium-2020-fgvc7\/nybg2020\/train\/metadata.json\"\n\nTEST_PATH = \"..\/input\/herbarium-2020-fgvc7\/nybg2020\/test\/\"\nTEST_META_PATH = \"..\/input\/herbarium-2020-fgvc7\/nybg2020\/test\/metadata.json\"\n\nSUBMISSION_PATH = '..\/input\/herbarium-2020-fgvc7\/sample_submission.csv'\n\n\nwith codecs.open(TRAIN_META_PATH, 'r', encoding='utf-8', errors='ignore') as f:\n    train_meta = json.load(f)\n    \nwith codecs.open(TEST_META_PATH, 'r', encoding='utf-8', errors='ignore') as f:\n    test_meta = json.load(f)","d16259e6":"print('Train keys: ', train_meta.keys())\nprint('Test keys: ', test_meta.keys())","0063bb5f":"train_df = pd.DataFrame(train_meta['annotations'])\ndisplay(train_df)","6c8a3be9":"train_cat = pd.DataFrame(train_meta['categories'])\ntrain_cat.columns = ['family', 'genus', 'category_id', 'category_name']\ndisplay(train_cat)","27cc78c0":"train_img = pd.DataFrame(train_meta['images'])\ntrain_img.columns = ['file_name', 'height', 'image_id', 'license', 'width']\ndisplay(train_img)","1cc93029":"train_reg = pd.DataFrame(train_meta['regions'])\ntrain_reg.columns = ['region_id', 'region_name', ]\ndisplay(train_reg)","cb0cb0cf":"train_df = train_df.merge(train_cat, on='category_id', how='outer')\ntrain_df = train_df.merge(train_img, on='image_id', how='outer')\ntrain_df = train_df.merge(train_reg, on='region_id', how='outer')","26e56c93":"display(train_df)","fe11cc97":"print(train_meta['info'])","28176206":"test_df = pd.DataFrame(test_meta['images'])\ndisplay(test_df)","b7567cb2":"sample_sub = pd.read_csv(SUBMISSION_PATH)\ndisplay(sample_sub)","15ccc67d":"heights = [int(w) for w in train_df['height'] if isinstance(w, float) and not math.isnan(w)]\nh, b = np.histogram(heights, bins=len(set(widths)))\nfig = plt.figure(figsize = (25, 5))\nax = fig.gca()\nplt.plot(b[1:], h)\nplt.grid()\nplt.show()","48e7a5e5":"widths = [int(w) for w in train_df['width'] if isinstance(w, float) and not math.isnan(w)]\nh, b = np.histogram(widths, bins=len(set(widths)))\nfig = plt.figure(figsize = (25, 5))\nax = fig.gca()\nplt.plot(b[1:], h)\nplt.grid()\nplt.show()","604ff00d":"h, b = np.histogram(train_df['category_id'], bins=len(np.unique(train_df['category_id'])))\nh.sort()\nfig = plt.figure(figsize = (25, 5))\nax = fig.gca()\nplt.plot(h[::-1])\nplt.grid()\nplt.show()","a06dec40":"GENUS_INDEX = 5\n\ncounts = list(Counter(train_df.iloc[:, GENUS_INDEX]).values())\ncounts.sort()\ncounts.reverse()\n\nfig = plt.figure(figsize = (25, 5))\nax = fig.gca()\nplt.plot(counts)\nplt.grid()\nplt.show()","2d5c4c28":"FAMILY_INDEX = 4\n\ncounts = list(Counter(train_df.iloc[:, FAMILY_INDEX]).values())\ncounts.sort()\ncounts.reverse()\n\nfig = plt.figure(figsize = (25, 5))\nax = fig.gca()\nplt.plot(counts)\nplt.grid()\nplt.show()","5ab28f63":"class HerbariumDataset(D.Dataset):\n    def __init__(self, data, path):\n        self.data = data\n        self.path = path\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, i):\n        fname = self.data['file_name'].values[i]\n        fpath = os.path.join(self.path, fname)\n        image = cv2.imread(fpath)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n        label = self.data['category_id'].values[i]\n        \n        return image, label","c390ccb2":"train_data, test_data = train_test_split(train_df)\n\ntrain_dataset = HerbariumDataset(train_data, TRAIN_PATH)\ntest_dataset = HerbariumDataset(test_data, TRAIN_PATH)  # There should be train path, it is correct","f390f607":"img, label = train_dataset[random.randint(0, len(train_dataset))]\nprint(label)\nplt.imshow(img)","17cdb227":"img, label = test_dataset[random.randint(0, len(test_dataset))]\nprint(label)\nplt.imshow(img)","bbbf57fd":"### Distribution family -> image count","2646e00a":"### Print training dataset info","bbe55c24":"### Quick look on training data annotations","52cde511":"### Quick look on test (submission) data ","d60590c8":"## Quick look and represent data as spreadsheets","3bd7d615":"## Plot histograms","00a4b108":"### Distribution genus -> image count","507027d7":"## Prepare simple torch dataset","7d417ec9":"### Quick look on train and test sets (as could be seen there are no 'annotations', 'categories',  'regions' provided to test set)","622bdd5d":"### Images HW distribution","403f502b":"## Load files","f3629be2":"### Quick look on training data regions info","e3441436":"### Quick look on training data images info","f744ac9d":"### Distribution category -> image count","4219bca5":"# Import modules","01e87f99":"### Quick look on submission file","564bb7b8":"### Merge training data to a single spreadsheet","bf31f9bf":"### Quick look on training data caregories"}}