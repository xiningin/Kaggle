{"cell_type":{"8cade3d2":"code","8fcad344":"code","be4c641c":"code","cf974ab2":"code","9e5c3a8f":"code","3bc7ed92":"code","c78abb8f":"code","2894370b":"code","278621ee":"code","f3e75c2d":"code","8f9ccc05":"markdown","db2ca9d5":"markdown","887728b9":"markdown","1dfc249b":"markdown","89c000c2":"markdown","23792363":"markdown"},"source":{"8cade3d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom pathlib import Path\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8fcad344":"train_df = pd.read_csv('..\/input\/train_relationships.csv')\ntrain_images =  Path('..\/input\/train\/')\ntest_images = Path('...\/input\/test\/')\ntrain_df.head()\n","be4c641c":"train_df.shape","cf974ab2":"missing_folders = []\ntemp_list = list(train_df.p1)+list(train_df.p2)\nall_list = list(set(temp_list))\nall_list.sort()\nfor i in all_list:\n    if(os.path.exists(train_images\/i)==False):\n        #If no such directory exists\n        missing_folders.append(i)\n    \nprint(len(missing_folders))","9e5c3a8f":"train_df = train_df[~train_df[\"p1\"].isin(missing_folders)]\ntrain_df = train_df[~train_df[\"p2\"].isin(missing_folders)]","3bc7ed92":"train_df.shape #Ignoring missing directories","c78abb8f":"temp_list = list(train_df.p1) + list(train_df.p2)\nall_folders = list(set(temp_list))\nall_folders.sort()\n","2894370b":"max_images = 0\nfor i in all_folders:\n    img_list = os.listdir(train_images \/ i)\n    if(len(img_list)>max_images):\n        max_images = len(img_list)\n        \nprint(max_images)\n","278621ee":"def show_img(n):\n    try:\n        n = int(n)\n        img_list = os.listdir(train_images \/ all_folders[n])\n        num_images = len(img_list)\n        print(num_images)\n        if(num_images<=10):\n            fig,ax = plt.subplots(2,5, figsize=(20,10))\n            print(ax.shape)\n            for i in range(len(img_list)):\n                with open(train_images \/ all_folders[n] \/ img_list[i] ,'rb') as f:\n                    img = Image.open(f)\n                    ax[i\/\/5][i%5].imshow(img)\n            fig.show()\n\n        else:\n            fig,ax = plt.subplots((-(-num_images\/\/10)),10, figsize=(40,10))\n            print(ax.shape)\n            for i in range(len(img_list)):\n                with open(train_images \/ all_folders[n] \/ img_list[i] ,'rb') as f:\n                    img = Image.open(f)\n                    ax[i\/\/10][i%10].imshow(img)\n            fig.show()\n    except ValueError:\n        n = all_folders.index(n)\n        img_list = os.listdir(train_images \/ all_folders[n])\n        num_images = len(img_list)\n        print(num_images)\n        if(num_images<=10):\n            fig,ax = plt.subplots(2,5, figsize=(20,10))\n            print(ax.shape)\n            for i in range(len(img_list)):\n                with open(train_images \/ all_folders[n] \/ img_list[i] ,'rb') as f:\n                    img = Image.open(f)\n                    ax[i\/\/5][i%5].imshow(img)\n            fig.show()\n\n        else:\n            fig,ax = plt.subplots((-(-num_images\/\/10)),10, figsize=(40,10))\n            print(ax.shape)\n            for i in range(len(img_list)):\n                with open(train_images \/ all_folders[n] \/ img_list[i] ,'rb') as f:\n                    img = Image.open(f)\n                    ax[i\/\/10][i%10].imshow(img)\n            fig.show()\n        \n","f3e75c2d":"show_img('F0002\/MID1')\n#show_img(0)\n","8f9ccc05":"Shape after removing all the missing directories","db2ca9d5":"**Calculate the maximum number of possible images in the folder for the next function**","887728b9":"<h1>In order to create a function that displays images in a subplot<\/h1>\n**Create a list that contains all the directories in the training_relationships dataset**","1dfc249b":"**Removing Missing Directories\n**\n<br>\nInitial Shape of the dataframe before removing missing directories","89c000c2":"<h2>Show Image Function <\/h2>\nUsing a nx10 subplot to display the images based on the number of images in the folder. If the number of Images is 45 then it will create a 5x10 subplot. If the number of images is less than 10, we default to creating a 2x5 subplot","23792363":"We can use functions to display images by specifying their folder or the order it appears in the list"}}