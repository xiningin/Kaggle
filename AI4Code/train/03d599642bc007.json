{"cell_type":{"284f0988":"code","8eb84c66":"code","05bb53b2":"code","e03012eb":"code","026a5431":"code","fcbc9ea4":"code","662d3a35":"code","df06081d":"code","27fcc8fc":"code","a53f4501":"code","c2daba3f":"code","d41d6342":"code","c5dea69c":"code","1a0d7fe1":"code","aa6dcfae":"code","200ed27f":"code","bb4a2eda":"code","b245aa78":"code","6769c786":"code","1ae71b58":"code","2ace3b28":"code","c734ca1d":"code","592235cb":"code","2c59eaeb":"code","51b43615":"code","59b93bcc":"code","13b91f83":"code","432116f2":"code","cadff6dd":"code","8b24e614":"code","1394fcbc":"code","24f643c8":"code","273b3249":"code","913a7db8":"code","81a16d10":"code","d1efcc5a":"code","1e0c239e":"code","362e03f6":"code","df68287f":"code","f2b879bb":"code","ba93344b":"markdown","f8bf4e00":"markdown","debde74f":"markdown","8fe9fa90":"markdown"},"source":{"284f0988":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","8eb84c66":"df_train = pd.read_csv('..\/input\/champs-scalar-coupling\/train.csv')\ndf_test = pd.read_csv('..\/input\/champs-scalar-coupling\/test.csv')\nstruectures = pd.read_csv('..\/input\/champs-scalar-coupling\/structures.csv')","05bb53b2":"sample_submission = pd.read_csv('..\/input\/champs-scalar-coupling\/sample_submission.csv')\nsample_submission.head()","e03012eb":"sample_submission.to_csv('submission.csv', index=False)","026a5431":"print(df_train.shape)\nprint(df_test.shape)\nprint(sample_submission.shape)","fcbc9ea4":"print(df_train.columns) \nprint('*'* 20)\nprint(df_test.columns)\n","662d3a35":"df_train.info()\ndf_test.info()","df06081d":"df_train.head(10)","27fcc8fc":"df_test.head(10)","a53f4501":"struectures.head(10)","c2daba3f":"df_tain_test = pd.concat([df_train, df_test], axis = 0, sort=False)\nprint(df_tain_test.shape)\ndf_tain_test.describe()","d41d6342":"df_tain_test.describe(include='O')","c5dea69c":"from matplotlib import pyplot as plt\nimport seaborn as sns","1a0d7fe1":"sns.kdeplot(df_train.scalar_coupling_constant, shade=True)\nplt.legend()\nplt.show()","aa6dcfae":"#df_train['log_scalar_coupling_constant'] = np.log10(df_train['scalar_coupling_constant'] +1)","200ed27f":"#sns.kdeplot(df_train.log_scalar_coupling_constant, shade=True)\n#plt.legend()\n#plt.show()","bb4a2eda":"plt.hist(df_train.atom_index_0, bins=12, histtype='step', normed=True, linewidth=2)\nplt.hist(df_train.atom_index_1, bins=12, histtype='step', normed=True, linewidth=2)\nplt.legend(['atom_index_0', 'atom_index_1'])\n\nplt.title('atom_index Distribution')\nplt.xlabel('atom_index')\nplt.ylabel('Frequency')\n\nplt.show()","b245aa78":"train = pd.merge(\n    struectures,\n    df_train,  \n    left_on = ['molecule_name', 'atom_index'],\n    right_on= ['molecule_name', 'atom_index_0']\n)\n\ntest = pd.merge(\n    struectures,\n    df_test,  \n    left_on = ['molecule_name', 'atom_index'],\n    right_on= ['molecule_name', 'atom_index_0']\n)","6769c786":"train.head(10)","1ae71b58":"train = pd.merge(train,\n                 struectures,\n                 left_on=['molecule_name', 'atom_index_1'],\n                 right_on=['molecule_name', 'atom_index']\n                )\ntest = pd.merge(test,\n                 struectures,\n                 left_on=['molecule_name', 'atom_index_1'],\n                 right_on=['molecule_name', 'atom_index']\n                )","2ace3b28":"train.head()","c734ca1d":"test.head()","592235cb":"train = train.drop(['molecule_name', 'id', 'atom_index_x', 'atom_index_y'], axis =1)\ntest = test.drop(['molecule_name', 'atom_index_x', 'atom_index_y'], axis =1)","2c59eaeb":"train.head(10)","51b43615":"def atom_number(atom):\n    if atom == 'H':\n        return 0\n    elif atom == 'C':\n        return 1\n    elif atom == 'N':\n        return 2\n    elif atom == 'O':\n        return 3\n    elif atom == 'F':\n        return 4","59b93bcc":"train.atom_y = [atom_number(i) for i in train.atom_y]\ntrain.atom_x = [atom_number(i) for i in train.atom_x]\ntest.atom_y = [atom_number(i) for i in test.atom_y]\ntest.atom_x = [atom_number(i) for i in test.atom_x]","13b91f83":"train = pd.get_dummies(train, columns=['type'], drop_first=True)\ntest = pd.get_dummies(test, columns=['type'], drop_first=True)","432116f2":"train.head(10)","cadff6dd":"train['distance'] = (\n    (train['x_y'] - train['x_x'])**2 + \n    (train['y_y'] - train['y_x'])**2 + \n    (train['z_y'] - train['z_x'])**2 \n) ** 0.5\n\ntest['distance'] = (\n    (train['x_y'] - train['x_x'])**2 + \n    (train['y_y'] - train['y_x'])**2 + \n    (train['z_y'] - train['z_x'])**2 \n) ** 0.5","8b24e614":"train.head()","1394fcbc":"X_train = train.drop(['scalar_coupling_constant',], axis=1)\ny_train = train.scalar_coupling_constant","24f643c8":"from sklearn.model_selection import GroupKFold, train_test_split\nfrom sklearn.metrics import accuracy_score\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\nX_train.shape, X_val.shape, y_train.shape, y_val.shape","273b3249":"from lightgbm import LGBMRegressor","913a7db8":"lgb = LGBMRegressor()\nlgb.fit(X_train, y_train, \n        eval_set=[(X_val, y_val)],\n       early_stopping_rounds=100,\n       verbose=10)","81a16d10":"test.head()","d1efcc5a":"preds = lgb.predict(X_val)","1e0c239e":"test_predictions = lgb.predict(test[['atom_x',\n                                    'x_x',\n                                    'y_x',\n                                    'z_x',\n                                    'atom_index_0',\n                                    'atom_index_1',\n                                    'atom_y',\n                                    'x_y',\n                                    'y_y',\n                                    'z_y',\n                                    'type_1JHN',\n                                    'type_2JHC',\n                                    'type_2JHH',\n                                    'type_2JHN',\n                                    'type_3JHC',\n                                    'type_3JHH',\n                                    'type_3JHN',\n                                    'distance']]\n                              )","362e03f6":"sns.distplot(test_predictions)\nplt.legend()\nplt.show()","df68287f":"submission = pd.DataFrame()\nsubmission['id'] = test['id']\nsubmission['scalar_coupling_constant'] = test_predictions","f2b879bb":"submission.to_csv('first_sybmission.csv',index=False)","ba93344b":"##### This is my first kaggle. From 2 month ago, I'm starting to learn python and machine leaning. It would be great if you could give me any advice on improving this kernel. Thank you!","f8bf4e00":"#### Load data","debde74f":"#### EDA","8fe9fa90":"#### Check the sample_submission"}}