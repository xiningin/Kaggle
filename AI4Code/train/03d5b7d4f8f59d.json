{"cell_type":{"c95f8142":"code","1f85289f":"code","7d9a4db7":"code","ff4ddeae":"code","fabdd9be":"code","3fff62f4":"code","0853cc4b":"code","2068dfe6":"code","89fda389":"code","e26b6f02":"code","3df678f6":"code","a36e045d":"code","60d34256":"code","9963066a":"code","17c31960":"code","dc227498":"code","0103d640":"code","8be279d6":"code","36259cf4":"code","b7382597":"code","26498b16":"code","9f74424c":"code","db8c089b":"code","d3218086":"code","0ffdd336":"code","f186bbe5":"code","0142da09":"code","c8d58d44":"code","39604e5a":"code","91860b2c":"code","c2048748":"code","20c66223":"code","4bdadc3d":"code","ab03811a":"code","547ad8bf":"code","a67efd95":"code","458d807d":"code","1ee9e3cf":"code","60dfe050":"code","85992d92":"code","db1d3807":"code","1fd39582":"code","6af3caa5":"code","26334e8c":"code","3c479723":"markdown","907ac134":"markdown","301b9b23":"markdown","77b8838f":"markdown","486634f8":"markdown","1a9f39bb":"markdown","192f4969":"markdown","7aa2a607":"markdown","b60b6b51":"markdown","b772dd73":"markdown","4c1c294f":"markdown","9d4fbfca":"markdown","a7257b68":"markdown","fd98e1e8":"markdown","ba0a8618":"markdown","3ca47b2e":"markdown","00b8875c":"markdown","76634b0d":"markdown","48768e1c":"markdown","3decc839":"markdown","3858e924":"markdown","fe588ef3":"markdown","a3bfc424":"markdown","e46c889b":"markdown","e8d1686c":"markdown","0e9b4426":"markdown","dc4ab233":"markdown","ec59468f":"markdown","60a08782":"markdown","3439dcab":"markdown"},"source":{"c95f8142":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f85289f":"import seaborn as sb\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom keras.layers import Dense\nfrom keras.models import Sequential","7d9a4db7":"df=pd.read_csv(\"\/kaggle\/input\/engineering-placements-prediction\/collegePlace.csv\")\ndf.head()","ff4ddeae":"df.shape","fabdd9be":"df.info()","3fff62f4":"df.isnull().sum()","0853cc4b":"#le=preprocessing.LabelEncoder()\n#df[\"Gender\"]=le.fit_transform(df[\"Gender\"])","2068dfe6":"df[\"Gender\"].head()","89fda389":"df.describe()","e26b6f02":"def lowerupper(col):\n    q1=np.quantile(col,.25)\n    q3=np.quantile(col,.75)\n    inter=q3-q1\n    lowerbound=q1-(inter*3.0)\n    upperbound=q3+(inter*3.0)\n    outlier=[]\n    for x in col:\n        if((x>upperbound)or(x<lowerbound)):\n            outlier.append(x)\n    if outlier==[]:\n        print(\"No outlier present\")\n    else:\n        return outlier","3df678f6":"Age=lowerupper(df[\"Age\"])\nprint(\"Outlier Count in column Age:\",Age)\nprint()\nprint(\"Total outlier present are \",len(Age))","a36e045d":"#Gender=lowerupper(df[\"Gender\"])\n#print(\"Outlier Count in column Gender:\",Gender)\n#print()\n#print(\"Total outlier present are \",len(Gender))","60d34256":"Internships=lowerupper(df[\"Internships\"])\n#print(\"Outlier Count in column Gender:\",Internships)","9963066a":"CGPA=lowerupper(df[\"CGPA\"])\n#print(\"Outlier Count in column CGPA:\",CGPA)","17c31960":"Hostel=lowerupper(df[\"Hostel\"])","dc227498":"HistoryOfBacklogs=lowerupper(df[\"HistoryOfBacklogs\"])\nprint(\"Outlier Count in column HistoryOfBacklogs:\",HistoryOfBacklogs)\nprint()\nprint(\"Total outlier present are \",len(HistoryOfBacklogs))","0103d640":"fig = go.Figure()\nfig.add_trace(go.Box(y=df[\"Age\"], name=\"Age\"))\n#fig.add_trace(go.Box(y=df[\"Gender\"], name=\"Gender\"))\nfig.add_trace(go.Box(y=df[\"HistoryOfBacklogs\"],name=\"HistoryOfBacklogs\"))\nfig.update_layout(title_text=\"Box Plot\")\nfig.show()","8be279d6":"plt.subplot(1,2,1)\nplt.subplots_adjust(left=0,right=3,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"Age\")\nplt.hist(df[\"Age\"])\n\n#plt.subplot(1,2,2)\n#plt.title(\"Gender\")\n#plt.hist(df[\"Gender\"])\n\nplt.subplot(1,2,2)\nplt.title(\"Internships\")\nplt.hist(df[\"Internships\"])\n\nplt.show()","36259cf4":"plt.subplot(1,2,1)\nplt.subplots_adjust(left=0,right=3,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"CGPA\")\nplt.hist(df[\"CGPA\"])\n\nplt.subplot(1,2,2)\nplt.title(\"Hostel\")\nplt.hist(df[\"Hostel\"])\n\nplt.show()","b7382597":"#plt.subplot(1,2,1)\n#plt.subplots_adjust(left=0,right=3,bottom=1,top=2,wspace=0.2,hspace=0.4)\n#plt.title(\"Hostel\")\n#plt.hist(df[\"Hostel\"])\n\n#plt.subplot(1,2,2)\nplt.title(\"HistoryOfBacklogs\")\nplt.hist(df[\"HistoryOfBacklogs\"])\n\nplt.show()","26498b16":"specs = [[{'type':'domain'}, {'type':'domain'}], [{'type':'domain'}, {'type':'domain'}]]\nfig = make_subplots(rows=2, cols=2, specs=specs,subplot_titles=[\"Internships\",\"CGPA\",\"Hostel\",\"HistoryOfBacklogs\"])\n\nInternships=df.groupby([\"Internships\"]).size()\nCGPA=df.groupby([\"CGPA\"]).size()\nHostel=df.groupby([\"Hostel\"]).size()\nHistoryOfBacklogs=df.groupby([\"HistoryOfBacklogs\"]).size()\n\n\nfig.add_trace(go.Pie( values=Internships, name='Internships'), 1, 1)\nfig.add_trace(go.Pie( values=CGPA, name='CGPA'), 1, 2)\nfig.add_trace(go.Pie( values=Hostel, name='Hostel'), 2, 1)\nfig.add_trace(go.Pie( values=HistoryOfBacklogs, name='HistoryOfBacklogs'), 2, 2)\n\nfig.update_traces(hoverinfo='label+percent+name', textinfo='none')\nfig.update(layout_title_text='Internships-CGPA-Hostel-HistoryOfBacklogs', layout_showlegend=False)\n\nfig=go.Figure(fig)\nfig.show()\n\n","9f74424c":"corr=df.corr()\nmask= np.zeros_like(corr)\nmask[np.triu_indices_from(mask)]=True\nplt.figure(figsize=(10,10))\nsb.heatmap(corr, mask=mask, square=True, annot=True)\nplt.show()","db8c089b":"plt.figure(figsize=(10,5))\nplt.title(\"Hostel vs HistoryOfBacklogs\")\nsb.barplot(x=\"Hostel\", y=\"HistoryOfBacklogs\", data=df)\nplt.show()","d3218086":"plt.figure(figsize=(10,5))\nplt.title(\"Gender vs HistoryOfBacklogs\")\nsb.barplot(x=\"Gender\", y=\"HistoryOfBacklogs\", data=df)\nplt.show()","0ffdd336":"plt.figure(figsize=(10,5))\nplt.title(\"PlacedOrNot\")\nplt.pie(df.groupby([\"PlacedOrNot\"]).size(), autopct='%1.1f%%')\nplt.show()","f186bbe5":"df.head()","0142da09":"le=preprocessing.LabelEncoder()\ndf[\"Gender\"]=le.fit_transform(df[\"Gender\"])","c8d58d44":"df.head()","39604e5a":"df.columns","91860b2c":"X=df[['Age', 'Gender', 'Internships', 'CGPA', 'Hostel',\n       'HistoryOfBacklogs']]\ny= df[\"PlacedOrNot\"]","c2048748":"x_train, x_test, y_train, y_test =train_test_split(X,y, test_size=0.30, random_state=100)\nprint(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","20c66223":"clf=LogisticRegression().fit(x_train,y_train)\nprd=clf.predict(x_test)","4bdadc3d":"acc=accuracy_score(y_test, prd)\nacc","ab03811a":"clff=RandomForestClassifier().fit(x_train,y_train)\nprdd=clff.predict(x_test)","547ad8bf":"accr=accuracy_score(y_test, prdd)\naccr","a67efd95":"model=Sequential()\nmodel.add(Dense(16, input_dim=6, activation='relu'))\nmodel.add(Dense(12, activation='relu'))\nmodel.add(Dense(4, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(4, activation='relu'))\nmodel.add(Dense(2, activation='relu'))\nmodel.add(Dense(1,activation='sigmoid'))","458d807d":"model.compile(loss='binary_crossentropy', optimizer='adam', metrics='accuracy')\nhistory=model.fit(x_train, y_train, epochs=2000, batch_size=15)\nhistory","1ee9e3cf":"model.summary()","60dfe050":"plt.figure(figsize=(25,5))\nplt.plot(history.history[\"accuracy\"])\n#plt.plot(history.history[\"val_accuracy\"])\nplt.title(\"model accuracy\")\nplt.ylabel(\"accuracy\")\nplt.xlabel(\"epoch\")\nplt.legend([\"train\", \"test\"], loc=\"upper left\")\nplt.show()","85992d92":"plt.figure(figsize=(25,5))\nplt.plot(history.history[\"loss\"])\n#plt.plot(history.history[\"val_loss\"])\nplt.title(\"model loss\")\nplt.ylabel(\"loss\")\nplt.xlabel(\"epoch\")\nplt.legend([\"train\", \"test\"], loc=\"upper left\")\nplt.show()","db1d3807":"predf=model.predict(x_test)","1fd39582":"predf=np.round(abs(predf))","6af3caa5":"predf=predf.astype(\"int64\")","26334e8c":"accuracy_score(y_test, predf)","3c479723":"## Accuracy","907ac134":"## Box plot","301b9b23":"- Outlier check for **CGPA** Column","77b8838f":"## Checking null values\n- No null present","486634f8":"## Neural Network","1a9f39bb":"- Outlier check for **Gender** Column","192f4969":"## Size of data\n- 2966 Rows and 8 Cols","7aa2a607":"## Checking Outlier's","b60b6b51":"## Prediction","b772dd73":"## Reading dataset","4c1c294f":"## Histogram ","9d4fbfca":"## Pie Chart\n- Placed or Not","a7257b68":"## Info about data","fd98e1e8":"## Heatmap","ba0a8618":"- Outlier check for **Hostel** column","3ca47b2e":"## Barplot","00b8875c":"- Compile\n- Fit","76634b0d":"## Splitting data into train and test","48768e1c":"## LogisticRegression","3decc839":"## Importing Libraries","3858e924":"- Sequential \n- Add layers","fe588ef3":"## Generate descriptive statistics","a3bfc424":"- Outlier check for  **Interships** Column","e46c889b":"### Accuracy\n- Using RandomForestClassifier","e8d1686c":"- Outlier check for **Age** Column","0e9b4426":"- Outlier check for **HistoryOfBacklogs** column","dc4ab233":"## RandomForestClassifier","ec59468f":"## Pie chart","60a08782":"### Accuracy \n- Using LogisticRegression","3439dcab":"## Model summary"}}