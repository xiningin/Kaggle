{"cell_type":{"815515a8":"code","eb6d5777":"code","98e21fde":"code","8a0fc700":"code","415963f7":"code","f6940443":"code","8692a889":"code","b24bd23e":"code","7f5a8f6a":"code","35332980":"code","3a42fb0e":"code","ba2bad8d":"code","0ea12985":"code","ebd347ae":"code","6bfcf255":"code","f9fce830":"code","b0b7914d":"code","d36ec42c":"code","94cfc008":"code","92b42c8d":"code","36e4c413":"code","71954357":"code","9e96a097":"code","3272970a":"code","ff41a149":"code","d2118843":"code","f9563d23":"code","7b3458bd":"code","fe54c24a":"code","d511f4b7":"code","c3a37a1c":"code","63c4c1cf":"code","c2e1da65":"code","0c38821c":"code","bc934280":"code","a688d079":"code","73a66dfa":"code","fed26f1f":"code","0df3aa5c":"code","3d00ae33":"code","52176d5c":"code","63155d42":"code","1ec50aad":"code","291c5cb7":"code","75c6963b":"code","7d79d363":"code","514c5685":"markdown","a527720e":"markdown","5f3f92ca":"markdown","5677f73a":"markdown","d1878a7c":"markdown","13539765":"markdown","844b8efc":"markdown","686d7b45":"markdown","afce970e":"markdown","fbdfead0":"markdown","a5491b1c":"markdown","0f5b1a49":"markdown","731748bc":"markdown"},"source":{"815515a8":"import os\nimport warnings\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold, KFold\n\n%matplotlib inline\nprint(os.listdir(\"..\/input\"))\nwarnings.filterwarnings('ignore')","eb6d5777":"train  = pd.read_json('..\/input\/train.json')\ntest   = pd.read_json('..\/input\/test.json')\nsample = pd.read_csv('..\/input\/sample_submission.csv')","98e21fde":"train.shape, test.shape","8a0fc700":"train.head()","415963f7":"train.info()\nprint('_' * 60, \"\\n\")\ntest.info()","f6940443":"a = train['vid_id'].unique()\nb = test['vid_id'].unique()\n\nany (i in a for i in b)","8692a889":"plt.figure(figsize=(10, 6))\n\nsns.despine()\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\nsns.distplot(train['start_time_seconds_youtube_clip'],label='Start')\nsns.distplot(train['end_time_seconds_youtube_clip'],label='End')\nplt.title('Train Data Start & End Distribution')\nplt.legend(loc=\"upper right\")\nplt.xlabel('Start & End Time for the clips')\nplt.ylabel('Distribution')","b24bd23e":"plt.figure(figsize=(10, 6))\n\nsns.despine()\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\nsns.distplot(train['start_time_seconds_youtube_clip'],label='Train')\nsns.distplot(test['start_time_seconds_youtube_clip'],label='Test')\nplt.title('Train & Test Data Start Distributions')\nplt.legend(loc=\"upper right\")\nplt.xlabel('Start Time for the clips')\nplt.ylabel('Distribution')","7f5a8f6a":"plt.figure(figsize=(10, 6))\n\nsns.despine()\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\nsns.distplot(train['end_time_seconds_youtube_clip'],label='Train')\nsns.distplot(test['end_time_seconds_youtube_clip'],label='Test')\nplt.title('Train & Test Data End Distributions')\nplt.legend(loc=\"upper right\")\nplt.xlabel('End Time for the clips')\nplt.ylabel('Distribution')","35332980":"plt.figure(figsize=(8, 8))\ntrain['is_turkey'].value_counts().plot(kind='bar')\nplt.title('Train & Test Data End Distributions')\nplt.xlabel('Target Labels')\nplt.ylabel('Count')","3a42fb0e":"# got this two funcs from Tee Ming Yi, thanks!\n#https:\/\/www.kaggle.com\/teemingyi\/turkey-competition\ndef create_df(data, i):\n    df = pd.DataFrame([x for x in data.audio_embedding.iloc[i]])\n    df['vid_id'] = data.vid_id.iloc[i]\n    return df","ba2bad8d":"def create_df_test(data, i):\n    df = pd.DataFrame([x for x in data.audio_embedding.iloc[i]])\n    df['vid_id'] = data.vid_id.iloc[i]\n    return df","0ea12985":"vid_train = []\nfor i in range(len(train.index)):\n    vid_train.append(create_df(train, i))\n    \nvid_train_flatten = pd.concat(vid_train)  \nvid_train_flatten.columns = ['feature_'+str(x) for x in vid_train_flatten.columns[:128]] + ['vid_id']\n\n#\n\nvid_test = []\nfor i in range(len(test.index)):\n    vid_test.append(create_df_test(test, i))\n    \nvid_test_flatten = pd.concat(vid_test)  \nvid_test_flatten.columns = ['feature_'+str(x) for x in vid_test_flatten.columns[:128]] + ['vid_id']","ebd347ae":"vid_train_flatten.shape, vid_test_flatten.shape","6bfcf255":"vid_train_flatten.info()\nprint('_' * 60, \"\\n\")\nvid_test_flatten.info()","f9fce830":"df_train = pd.merge(train,vid_train_flatten, on = 'vid_id')\ndf_test  = pd.merge(test, vid_test_flatten , on = 'vid_id')\n\ndf_train = df_train.drop(['audio_embedding'],axis=1)\ndf_test  = df_test.drop(['audio_embedding'], axis=1)","b0b7914d":"df_train.shape, df_test.shape","d36ec42c":"abs(df_train.corr())['is_turkey'].sort_values(ascending=False)[:10]","94cfc008":"high_corr = pd.DataFrame(abs(df_train.corr()[:10]))\nhigh_corr_square = high_corr[high_corr.columns[:10].tolist()]\n\nsns.set_context(\"notebook\", font_scale=1.2, rc={\"lines.linewidth\": 2})\nplt.figure(figsize = (12,12))\nsns.heatmap(high_corr_square,linecolor ='white',linewidths=1,annot=True)","92b42c8d":"df_train['duration'] = df_train['end_time_seconds_youtube_clip']-df_train['start_time_seconds_youtube_clip']\ndf_test['duration'] = df_test['end_time_seconds_youtube_clip']-df_test['start_time_seconds_youtube_clip']","36e4c413":"train_columns = df_train.columns\ntest_columns  = df_test.columns\n\ndf_train['all_feature_mean'] = df_train[train_columns[4:131]].mean(axis=1)\ndf_test['all_feature_mean']  = df_test[test_columns[3:130]].mean(axis=1)\n\ndf_train['all_feature_median'] = df_train[train_columns[4:131]].median(axis=1)\ndf_test['all_feature_median']  = df_test[test_columns[3:130]].median(axis=1)\n\ndf_train['all_feature_min'] = df_train[train_columns[4:131]].min(axis=1)\ndf_test['all_feature_min']  = df_test[test_columns[3:130]].min(axis=1)\n\ndf_train['all_feature_max'] = df_train[train_columns[4:131]].max(axis=1)\ndf_test['all_feature_max']  = df_test[test_columns[3:130]].max(axis=1)\n\ndf_train['all_feature_std'] = df_train[train_columns[4:131]].std(axis=1)\ndf_test['all_feature_std']  = df_test[test_columns[3:130]].std(axis=1)","71954357":"df_train.drop('end_time_seconds_youtube_clip',axis=1,inplace=True)\ndf_test.drop('end_time_seconds_youtube_clip',axis=1,inplace=True)","9e96a097":"df_train.head()","3272970a":"df_test.head()","ff41a149":"df_train_concat = df_train.groupby('vid_id').mean()\ndf_test_concat  = df_test.groupby('vid_id').mean()","d2118843":"df_train_concat.head()","f9563d23":"X = df_train_concat.drop(['is_turkey'],axis=1)\ny = df_train_concat['is_turkey']","7b3458bd":"def cross_validation(train_set, target, test_set, nfold, cv_type, seed, shuf, model):\n    if cv_type == \"KFold\":\n        kf = KFold(n_splits=nfold, random_state=seed, shuffle=shuf)\n        split = kf.split(train_set)\n    else:\n        kf = StratifiedKFold(n_splits=nfold, shuffle=shuf, random_state=seed)\n        split = kf.split(train_set, target)\n    \n    oof_preds = np.zeros(train_set.shape[0])\n    oof_test = np.zeros(test_set.shape[0])\n    for i, (train_index, val_index) in enumerate(split):\n        x_tr, x_val = train_set.iloc[train_index], train_set.iloc[val_index]\n        y_tr, y_val = target[train_index], target[val_index]\n        params = {'random_state':seed}\n        model.set_params(**params)\n        model.fit(x_tr, y_tr)\n        oof_preds[val_index] = model.predict_proba(x_val)[:,1]\n        oof_test += model.predict_proba(test_set)[:,1] \/ kf.n_splits\n        print(\"Fold %s ROC:\" %str(i+1), np.round(roc_auc_score(y_val, (oof_preds[val_index])),5))\n    \n    print(\"CV Score:\", np.round(roc_auc_score(target, oof_preds),5))\n    return oof_preds.reshape(-1,1), oof_test.reshape(-1,1)","fe54c24a":"from sklearn.ensemble import RandomForestClassifier\n\nRFC = RandomForestClassifier(n_estimators=160, min_samples_split=3)\noof_train_rf, oof_test_rf = cross_validation(train_set=X, target=y, test_set=df_test_concat, cv_type=\"SKFold\", nfold=5, seed=2018, shuf=True, model=RFC)","d511f4b7":"fpr, tpr, thresholds = roc_curve(y, oof_train_rf)\nroc_auc = auc(fpr, tpr)\n\nsns.set('talk', 'whitegrid', 'dark', font_scale=1.2,rc={\"lines.linewidth\": 2, 'grid.linestyle': '--'})\nlw = 2\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange',lw=lw, label='ROC curve (AUC = %0.4f)' % roc_auc)\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([-0.1, 1.1])\nplt.ylim([-0.1, 1.1])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Random Forest ROC')\nplt.legend(loc=\"lower right\")\nplt.show()","c3a37a1c":"y_pred_proba_RFC = oof_test_rf\ny_pred_proba_RFC = pd.DataFrame(y_pred_proba_RFC,columns=['is_turkey'])\ndf_test_concat.reset_index(inplace=True)\ndf_test_concat['is_turkey'] = y_pred_proba_RFC['is_turkey']\ndf_sub = df_test_concat[['vid_id','is_turkey']] \ndf_test_concat.drop('is_turkey',axis=1,inplace=True)\n\ndf_final_RFC = pd.merge(sample,df_sub,on='vid_id')\ndf_final_RFC.drop('is_turkey_x',axis=1,inplace=True)\ndf_final_RFC.columns = ['vid_id', 'is_turkey']\n\ndf_final_RFC.to_csv('submission_RFC.csv',index=False)\ndf_test_concat.set_index('vid_id',inplace=True)","63c4c1cf":"from xgboost import XGBClassifier\n\nXGB = XGBClassifier(max_depth=3, learning_rate=0.07, n_estimators=110, n_jobs=4)\noof_train_xgb, oof_test_xgb = cross_validation(train_set=X, target=y, test_set=df_test_concat, cv_type=\"SKFold\", nfold=5, seed=2018, shuf=True, model=XGB)","c2e1da65":"fpr, tpr, thresholds = roc_curve(y, oof_train_xgb)\nroc_auc = auc(fpr, tpr)\n\nsns.set('talk', 'whitegrid', 'dark', font_scale=1.2,rc={\"lines.linewidth\": 2, 'grid.linestyle': '--'})\nlw = 2\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange',lw=lw, label='ROC curve (AUC = %0.4f)' % roc_auc)\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([-0.1, 1.1])\nplt.ylim([-0.1, 1.1])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('XGBOOST ROC')\nplt.legend(loc=\"lower right\")\nplt.show()","0c38821c":"y_pred_proba_XGB = oof_test_xgb \ny_pred_proba_XGB = pd.DataFrame(y_pred_proba_XGB,columns=['is_turkey'])\n\ndf_test_concat.reset_index(inplace=True)\ndf_test_concat['is_turkey'] = y_pred_proba_XGB['is_turkey']\ndf_sub = df_test_concat[['vid_id','is_turkey']] \ndf_test_concat.drop('is_turkey',axis=1,inplace=True)\n\ndf_final_XGB = pd.merge(sample,df_sub,on='vid_id')\ndf_final_XGB.drop('is_turkey_x',axis=1,inplace=True)\ndf_final_XGB.columns = ['vid_id', 'is_turkey']\n\ndf_final_XGB.to_csv('submission_XGB.csv',index=False)\ndf_test_concat.set_index('vid_id',inplace=True)","bc934280":"from lightgbm import LGBMClassifier\n\nLGBC = LGBMClassifier(max_depth=-1, n_estimators=75, num_leaves=31)\noof_train_lgb, oof_test_lgb = cross_validation(train_set=X, target=y, test_set=df_test_concat, cv_type=\"SKFold\", nfold=5, seed=2018, shuf=True, model=LGBC)","a688d079":"fpr, tpr, thresholds = roc_curve(y,oof_train_lgb)\nroc_auc = auc(fpr, tpr)\n\nsns.set('talk', 'whitegrid', 'dark', font_scale=1.2,rc={\"lines.linewidth\": 2, 'grid.linestyle': '--'})\nlw = 2\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange',lw=lw, label='ROC curve (AUC = %0.4f)' % roc_auc)\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([-0.1, 1.1])\nplt.ylim([-0.1, 1.1])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Light GBM ROC')\nplt.legend(loc=\"lower right\")\nplt.show()","73a66dfa":"y_pred_proba_LGBC = oof_test_lgb\ny_pred_proba_LGBC = pd.DataFrame(y_pred_proba_LGBC,columns=['is_turkey'])\ndf_test_concat.reset_index(inplace=True)\ndf_test_concat['is_turkey'] = y_pred_proba_LGBC['is_turkey']\ndf_sub = df_test_concat[['vid_id','is_turkey']] \ndf_test_concat.drop('is_turkey',axis=1,inplace=True)\n\ndf_final_LGBC = pd.merge(sample,df_sub,on='vid_id')\ndf_final_LGBC.drop('is_turkey_x',axis=1,inplace=True)\ndf_final_LGBC.columns = ['vid_id', 'is_turkey']\n\ndf_final_LGBC.to_csv('submission_LGBM.csv',index=False)\ndf_test_concat.set_index('vid_id',inplace=True)","fed26f1f":"from sklearn.linear_model import LogisticRegression\nLR = LogisticRegression(C=0.00001,penalty='l2', solver=\"sag\", max_iter=100)\noof_train_lr, oof_test_lr = cross_validation(train_set=X, target=y, test_set=df_test_concat, cv_type=\"SKFold\", nfold=5, seed=2018, shuf=True, model=LR)","0df3aa5c":"fpr, tpr, thresholds = roc_curve(y,oof_train_lr)\nroc_auc = auc(fpr, tpr)\n\nsns.set('talk', 'whitegrid', 'dark', font_scale=1.2,rc={\"lines.linewidth\": 2, 'grid.linestyle': '--'})\nlw = 2\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange',lw=lw, label='ROC curve (AUC = %0.4f)' % roc_auc)\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([-0.1, 1.1])\nplt.ylim([-0.1, 1.1])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Logistic Regression ROC')\nplt.legend(loc=\"lower right\")\nplt.show()","3d00ae33":"y_pred_proba_LR =  oof_test_lr\ny_pred_proba_LR = pd.DataFrame(y_pred_proba_LR,columns=['is_turkey'])\ndf_test_concat.reset_index(inplace=True)\ndf_test_concat['is_turkey'] = y_pred_proba_LR['is_turkey']\ndf_sub = df_test_concat[['vid_id','is_turkey']] \ndf_test_concat.drop('is_turkey',axis=1,inplace=True)\n\ndf_final_LR = pd.merge(sample,df_sub,on='vid_id')\ndf_final_LR.drop('is_turkey_x',axis=1,inplace=True)\ndf_final_LR.columns = ['vid_id', 'is_turkey']\n\ndf_final_LR.to_csv('submission_LR.csv',index=False)\ndf_test_concat.set_index('vid_id',inplace=True)","52176d5c":"df_corr = pd.DataFrame()\ndf_corr['LGBC'] = df_final_LGBC['is_turkey']\ndf_corr['XGB']  = df_final_XGB['is_turkey']\ndf_corr['RFC']  = df_final_RFC['is_turkey']\ndf_corr['LR']  = df_final_LR['is_turkey']\ndf_corr.corr()","63155d42":"W_RFC = 0.05\nW_XGB = 0.1\nW_LGB = 0.4\nW_LR  = 0.45\n\nfpr_rfc, tpr_rfc, thresholds_rfc = roc_curve(y, oof_train_rf)\nroc_auc_rfc = auc(fpr_rfc, tpr_rfc)\n\nfpr_xgb, tpr_xgb, thresholds_xgb = roc_curve(y, oof_train_xgb)\nroc_auc_xgb = auc(fpr_xgb, tpr_xgb)\n\nfpr_lgb, tpr_lgb, thresholds_lgb = roc_curve(y, oof_train_lgb)\nroc_auc_lgb = auc(fpr_lgb, tpr_lgb)\n\nfpr_lr, tpr_lr, thresholds_lr = roc_curve(y, oof_train_lr)\nroc_auc_lr = auc(fpr_lr, tpr_lr)\n\nfinal_roc_score = (W_RFC * auc(fpr_rfc, tpr_rfc) \n                 + W_XGB * auc(fpr_xgb, tpr_xgb) \n                 + W_LGB * auc(fpr_lgb, tpr_lgb) \n                 + W_LR  * auc(fpr_lr, tpr_lr))\n\nprint('Random Forest Score: ',roc_auc_rfc)\nprint('XG Boost Score:      ',roc_auc_xgb)\nprint('Light GBM:           ',roc_auc_lgb)\nprint('Logistic Regression: ',roc_auc_lr)\nprint('Blend Score:         ',final_roc_score)","1ec50aad":"df_final_blend = df_final_LGBC\n\ndf_final_blend['is_turkey'] = W_LGB * df_final_LGBC['is_turkey'] + W_XGB * df_final_XGB['is_turkey'] + W_RFC * df_final_RFC['is_turkey'] + W_LR * df_final_LR['is_turkey']\n        \ndf_final_blend.to_csv('submission_blend.csv',index=False)","291c5cb7":"train_stack = np.round(np.concatenate((oof_train_lr, oof_train_rf, oof_train_lgb, oof_train_xgb), axis=1))\ntest_stack = np.round(np.concatenate((oof_test_lr, oof_test_rf, oof_test_lgb, oof_test_xgb), axis=1))","75c6963b":"lr = LogisticRegression(C=0.1)\nlr.fit(train_stack, y)\nstack_preds = lr.predict_proba(test_stack)[:,1:]","7d79d363":"y_pred_proba_stacking =  stack_preds\ny_pred_proba_stacking = pd.DataFrame(y_pred_proba_stacking,columns=['is_turkey'])\ndf_test_concat.reset_index(inplace=True)\ndf_test_concat['is_turkey'] = y_pred_proba_stacking['is_turkey']\ndf_sub = df_test_concat[['vid_id','is_turkey']] \ndf_test_concat.drop('is_turkey',axis=1,inplace=True)\n\ndf_final_stacking = pd.merge(sample,df_sub,on='vid_id')\ndf_final_stacking.drop('is_turkey_x',axis=1,inplace=True)\ndf_final_stacking.columns = ['vid_id', 'is_turkey']\n\ndf_final_stacking.to_csv('submission_stacking.csv',index=False)\ndf_test_concat.set_index('vid_id',inplace=True)","514c5685":"### Adding additional features to help the model","a527720e":"# 2 - XG Boost Classifier","5f3f92ca":"# 3- Light GBM Classifier","5677f73a":"# 4 - Logistic Regression ","d1878a7c":"# EDA & Modeling for a great Thanksgiving","13539765":"# EDA ","844b8efc":"### High Correlation Matrix","686d7b45":"### Basic Stacking","afce970e":"### Checking whether there is a common vid_id in train & test for data leakage","fbdfead0":"# Blending","a5491b1c":"# 1 - Random Forest Classifier","0f5b1a49":" # Thank you for checking my notebook","731748bc":"![](https:\/\/storage.googleapis.com\/kaggle-media\/competitions\/turkey\/chan-swan-481027-unsplash.jpg)\n\nHungry for a new competition? Give thanks for this opportunity to avoid those awkward family political dinner discussions and endless holiday movie marathons over the Thanksgiving break. Spend time with your Kaggle family instead to find the real turkey!\n\nIn this competition you are tasked with finding the turkey sound signature from pre-extracted audio features. A simple binary problem, or is it? What does a turkey really sound like? How many sounds are similar? Will you be able to find the turkey or will you go a-fowl?\n\nThis is a short, fun, holiday, playground competition. Please, do not ruin the fun for yourself and for everyone by using a model trained on the answers. Don't be a turkey!"}}