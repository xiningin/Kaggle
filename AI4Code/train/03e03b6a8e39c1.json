{"cell_type":{"cf33206a":"code","d698d107":"code","eaa35a9b":"code","fe92eedb":"code","7809c0c4":"code","5a92b7bf":"code","b950fc43":"code","5e1583d1":"code","5b119c6a":"code","b73d2912":"code","af5b9453":"code","a7065b59":"code","b67fb43e":"code","2e23e359":"code","b66603fa":"code","d9fe5795":"code","49550689":"code","46398e7b":"code","9f4ed9f9":"markdown","db3629e2":"markdown","1384370e":"markdown","b425fe18":"markdown","49f95ced":"markdown","0e21487e":"markdown","adf96471":"markdown","7bd52138":"markdown"},"source":{"cf33206a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file \nimport matplotlib.pyplot as plt # visualizations\nimport seaborn as sns # visualizations\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n%matplotlib inline","d698d107":"pd.get_option(\"display.max_columns\", 100)\npd.set_option(\"display.max_rows\", 200)","eaa35a9b":"transactions = pd.read_csv('..\/input\/gender-test-s\/transactions.csv')\ntr_types = pd.read_csv('..\/input\/gender-test-s\/tr_types.csv', sep=';')\ntr_mcc_codes = pd.read_csv('..\/input\/gender-test-s\/tr_mcc_codes.csv', sep=';')\ngender_train = pd.read_csv('..\/input\/gender-test-s\/gender_train.csv')\ngender_test = pd.read_csv('..\/input\/gender-test-s\/gender_test.csv')","fe92eedb":"# split transactions into marked train and unmarked test datasets\n\ndata_train = pd.merge(transactions, gender_train, on='customer_id', how=\"right\")\ndata_test = pd.merge(transactions, gender_test, on='customer_id', how=\"right\")","7809c0c4":"print('Train data shape: {} rows, {} columns, {} customers'.\n      format(data_train.shape[0], \n             data_train.shape[1],  \n             len(data_train['customer_id'].value_counts())))\nprint('Test data shape: {} rows, {} columns, {} customers'.\n      format(data_test.shape[0], \n             data_test.shape[1],  \n             len(data_test['customer_id'].value_counts())))","5a92b7bf":"# 2 categorial and 4 numerical columns, 6849346 rows\n\ntransactions.info()\ntransactions.head()","b950fc43":"transactions.isnull().sum()","5e1583d1":"print('Number of dublicated rows in transactions: ', transactions.duplicated().sum() )","5b119c6a":"tr_types.info()\ntr_types.head()","b73d2912":"tr_types.isnull().sum()","af5b9453":"# Let's see how transaction types are spread among gender \n\ntr_gender = tr_types.copy()\n\n# limit description length for better visualization\ntr_gender['tr_description'] = tr_gender['tr_description'].str[:50] \ntr_gender['0'] = 0\ntr_gender['1'] = 1\ntr_gender['major'] = 0\n\n# found all transaction types, store in a list for possible iteration\nxx  = tr_types['tr_type'].items()\nlst_tr = [x[1] for x in xx]\n\n# count 0 and 1 for each tr_type\nfor i in range(len(tr_gender)):\n    code = lst_tr[i]\n    mask0 = (data_train['tr_type'] == code) & (data_train['gender'] == 0)\n    mask1 = (data_train['tr_type'] == code) & (data_train['gender'] == 1)\n    tr_gender['0'][i] = len(data_train[mask0])\n    tr_gender['1'][i] = len(data_train[mask1])\n    \n# create coefficient 'k' as a difference between 1 and 0 transactions    \ntr_gender['k'] = abs(tr_gender['0'] - tr_gender['1'])\/(tr_gender['0'] + tr_gender['1'])\ntr_gender['major'] = tr_gender['1'] > tr_gender['0']\n\n# print transaction types with highest 1\/0 difference\ntr_gender.sort_values(by=['k'], ascending=False).head(15)","a7065b59":"plt.figure(figsize=(16,12))\nsns.set(font_scale = 2, style='whitegrid')\n\n\nax = sns.barplot(x=\"k\", y=\"tr_description\", data=tr_gender.sort_values(by=['k'], ascending=False).head(25)[2:],\n            hue='major', palette={True:'steelblue', False:'lightcoral'}, dodge=False)\nplt.title('Top transaction types with highest gender difference', size = 35, color='#4f4e4e') \nplt.xlabel('Gender difference coefficient')\nplt.ylabel('')\n\nlabels = ['Gender 0', 'Gender 1']\nh, l = ax.get_legend_handles_labels()\n\nax.legend(h, labels, title=\"Majority for type\", framealpha=0.0, loc=\"lower right\")\n;","b67fb43e":"tr_gender['k'].isnull().sum()\n\n# that means dataset has 84 tr_types which are not represented in transactions","2e23e359":"tr_mcc_codes.info()\ntr_mcc_codes.head()","b66603fa":"# now it's time to find out if there are some gender related spents\n\nmcc_gender = tr_mcc_codes.copy()\nmcc_gender['0'] = 0\nmcc_gender['1'] = 1\nmcc_gender['major'] = 0\n\n# found all mcc_codes, store in a list for possible iteration\nzz  = mcc_gender['mcc_code'].items()\nlst = [z[1] for z in zz]\n\n# count 0 and 1 for each mcc code\nfor i in range(len(mcc_gender)):\n    code = lst[i]\n    mask0 = (data_train['mcc_code'] == code) & (data_train['gender'] == 0)\n    mask1 = (data_train['mcc_code'] == code) & (data_train['gender'] == 1)\n    mcc_gender['0'][i] = len(data_train[mask0])\n    mcc_gender['1'][i] = len(data_train[mask1])    \n\nmcc_gender['major'] = mcc_gender['1'] > mcc_gender['0']\n\n# Now find difference koefficient between genders in each mcc code transactions \n# Count like abs(%0 - %1)\n# Look for mcc codes with significant gender disbalance e.g high k\n\nmcc_gender['k'] = abs(mcc_gender['0'] - mcc_gender['1'])\/(mcc_gender['0'] + mcc_gender['1'])\nmcc_gender.sort_values(by=['k'], ascending=False).head(10)","d9fe5795":"plt.figure(figsize=(16,12))\nsns.set(font_scale = 2, style='whitegrid')\n\n\nax = sns.barplot(x=\"k\", y=\"mcc_description\", data=mcc_gender.sort_values(by=['k'], ascending=False).head(25),\n            hue='major', palette={True:'steelblue', False:'lightcoral'}, dodge=False)\nplt.title('Top mcc codes with highest gender difference', size = 35, color='#4f4e4e') \nplt.xlabel('Gender difference coefficient')\nplt.ylabel('')\n\nlabels = ['Gender 0', 'Gender 1']\nh, l = ax.get_legend_handles_labels()\nax.legend(h, labels, title=\"Majority for type\", framealpha=0.0, loc=\"lower right\")\n\n;","49550689":"# in contrary let's look at gender neutral codes\n\nmcc_gender.sort_values(by=['k']).head(50)","46398e7b":"def value_percent(plot, feature):\n    # count percentage for each gender\n    \n    total = len(feature)\n    for p in plot.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x() + p.get_width() \/ 2 - 0.05\n        y = p.get_y() + p.get_height()\n        ax.annotate(percentage, (x, y), size = 12)\n    plt.show()\n\nsns.set_theme(style=\"darkgrid\")\nax = sns.countplot(x=\"gender\", data=gender_train)\n\nprint(gender_train['gender'].value_counts())\n\nvalue_percent(ax, gender_train.gender)","9f4ed9f9":"We have pretty balanced dataset, it allows us to skip sampling step.","db3629e2":"# **Loading data**","1384370e":"**tr_mcc_codes**","b425fe18":"**tr_types**","49f95ced":"**gender_train data**","0e21487e":"# EDA\n**transactions**","adf96471":"# First impression and plans\n\n* **mcc_code** It seems like the most important information is in mcc_code column - my main idea so far is to try and determine gender related transaction categories. \n* **tr_type** Only half of transaction types are represented in dataset, I think I'll use the most gender related as new features.\n* **tr_datetime** Besides I wonder if transaction time is worth looking through - I'm not sure if it's effective to extract the exact transaction time, but part of the day could be usefull (morning, late night, daytime) as well as weekday or weekend. \n* **term_id** At first glance it looks like we can get rid of term_id column, but we'll see later. \n* **amount** Worth trying to sum up moneyflow for each customer into new featuress like min\/max\/mean income, min\/max\/mean expense.","7bd52138":"Column term_id has a lot of missing values (about **40%**)"}}