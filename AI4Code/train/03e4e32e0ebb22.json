{"cell_type":{"7d6bad09":"code","75bc7d3d":"code","62357e2c":"code","76b56970":"code","c45c253f":"code","61a85ebe":"code","8742099a":"code","59f178a2":"code","c6a4c3fb":"code","028250ec":"code","63844c38":"markdown"},"source":{"7d6bad09":"import numpy as np\nimport pandas as pd\n\n# imports needed for CNN\nimport csv\nimport cv2\nimport os, glob\nimport pandas as pd\nimport numpy as np\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nimport time\nfrom keras.datasets import cifar10\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.constraints import maxnorm\nfrom keras.optimizers import SGD\nfrom keras.layers.convolutional import Convolution2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.utils import np_utils\nfrom matplotlib import pyplot as plt\n\nfrom subprocess import check_output","75bc7d3d":"def load_data(data_dir):\n    # Get all subdirectories of data_dir. Each represents a label.\n    directories = os.listdir(data_dir)\n    # Loop through the label directories and collect the data in\n    # two lists, labels and images.\n    labels = []\n    images = []\n    category = 0\n    for d in directories:\n        if (d != 'Readme.txt'):\n            file_names = [os.path.join(data_dir + d, f) for f in os.listdir(data_dir + d) if f.endswith(\".ppm\")]\n        else:\n            continue\n        for f in file_names:\n            img = cv2.imread(f)\n            imresize = cv2.resize(img, (200, 125))\n            #plt.imshow(imresize)\n            images.append(imresize)\n            labels.append(category) \n        category += 1\n    #Normalization\n    images = np.array(images).astype('float32')\n    images = images \/ 255.0\n    #hot encoding\n    labels = np.array(labels)\n    labels = to_categorical(labels,category)\n    return images, labels","62357e2c":"X_train, y_train = load_data('..\/input\/BelgiumTSC_Training\/Training\/')\nprint (len(X_train))\nprint (len(y_train))","76b56970":"temp = -1\nfig=plt.figure(figsize=(20, 20))\nfor i in range(0,y_train.shape[0]):\n    if (np.argmax(y_train[i]) != temp):\n        fig.add_subplot(10, 2, np.argmax(y_train[i]) + 1)\n        plt.imshow(X_train[i])\n        if (np.argmax(y_train[i]) >= 19):\n            break\n        temp = np.argmax(y_train[i])","c45c253f":"X_test, y_test = load_data('..\/input\/BelgiumTSC_Testing\/Testing\/')\nprint (len(X_test),len(y_test))","61a85ebe":"def createCNNModel(num_classes):\n    model = Sequential()\n    model.add(Convolution2D(32, 3, 3, input_shape=(125, 200, 3), border_mode='same', activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Convolution2D(32, 3, 3, activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Convolution2D(32, 3, 3, activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Flatten())\n    model.add(Dense(512, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(num_classes, activation='softmax'))\n    # Compile model\n    lrate = 0.01\n    decay = lrate\/30\n    sgd = SGD(lr=lrate, momentum=0.9, decay=decay, nesterov=False)\n    model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\n    print(model.summary())\n    return model","8742099a":"model = createCNNModel(y_train.shape[1])","59f178a2":"model.fit(X_train, y_train, validation_split = 0.05, epochs=30)","c6a4c3fb":"predict = np.argmax(model.predict(X_test), axis = 1)\ncount = 0\nfor i in range(0,predict.shape[0]):\n    if (predict[i] == np.argmax(y_test[i])):\n        count +=1\nprint ('Accuracy on Test ',100 * count\/predict.shape[0],'%')","028250ec":"model.predict(X_test[:100]).shape","63844c38":"## This Model detects different traffic signs"}}