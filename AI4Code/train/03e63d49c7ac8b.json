{"cell_type":{"f5bfd8c1":"code","718ec1e5":"code","80425a4c":"code","181e3747":"code","000081fe":"code","62fc9881":"code","b15195fe":"code","b6911a46":"code","602afbfe":"code","57b9c104":"code","01715c4f":"code","1c0992ee":"code","2c6a2532":"code","f0e7f95c":"code","0f924b96":"code","7d13719c":"code","c3ceac34":"code","0f9007f7":"code","4b4fc74b":"code","16e5d0bd":"code","075c8b35":"code","0a0bbf9c":"code","4da9b960":"code","a4e24148":"code","6f593938":"code","1aabf2a8":"code","327b34b0":"code","05fb5c49":"markdown","540a01f6":"markdown","b1490310":"markdown","b5b10458":"markdown","238ee8e5":"markdown","fff5fb03":"markdown","c3ce521e":"markdown","837a20b3":"markdown","a9a52489":"markdown","297bc44b":"markdown","9da48d95":"markdown","a838e7ef":"markdown"},"source":{"f5bfd8c1":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\n\nimport xgboost as xgb\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, roc_curve, auc\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%pylab inline","718ec1e5":"data = pd.read_csv('..\/input\/wisconsin-diagnostic-breast-cancer-wdbc\/data.csv', index_col='id')","80425a4c":"data.head()","181e3747":"data = data.drop(data.columns[-1], axis=1)","000081fe":"data.shape","62fc9881":"data.describe()","b15195fe":"data['diagnosis'].value_counts()","b6911a46":"data.isnull().sum()","602afbfe":"def plots(columns):\n    fig, axs = plt.subplots(3, 3, figsize=(16, 12))\n    y = 0\n    for col in columns:\n        sns.distplot(data[col], ax = axs[0, y])\n        sns.boxplot(y = col, data = data, palette='Accent', ax = axs[1, y])\n        sns.scatterplot(x=data[col], y=data['diagnosis'], ax = axs[2, y])\n        y = y+1","57b9c104":"plots(['radius_mean', 'radius_se', 'radius_worst'])","01715c4f":"plots(['texture_mean', 'texture_se', 'texture_worst'])","1c0992ee":"plots(['smoothness_mean', 'smoothness_se', 'smoothness_worst'])","2c6a2532":"plots(['compactness_mean', 'compactness_se', 'compactness_worst'])","f0e7f95c":"plots(['concavity_mean', 'concavity_se', 'concavity_worst'])","0f924b96":"plots(['concave points_mean', 'concave points_se', 'concave points_worst'])","7d13719c":"plots(['symmetry_mean', 'symmetry_se', 'symmetry_worst'])","c3ceac34":"plots(['fractal_dimension_mean', 'fractal_dimension_se', 'fractal_dimension_worst'])","0f9007f7":"cols = ['radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n       'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']\n\nfig, axs = plt.subplots(10, 2, figsize=(18, 34))\ny = 0\nx = 0\nfor i in cols:\n    sns.scatterplot(data = data, x=data[i], y=data['area_worst'], hue = 'diagnosis', ax = axs[x, y])\n    y = y + 1\n    if y == 2:\n        y = 0\n        x = x + 1","4b4fc74b":"X = data.iloc[:, 1:]\ny = data.iloc[:, 0]","16e5d0bd":"X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size = 0.2, stratify = y, random_state = 1)","075c8b35":"scaler = MinMaxScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","0a0bbf9c":"parameters = {\n    'penalty': ['l1', 'l2', 'none'],\n    'solver':['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n    'max_iter': np.arange(100, 200, 10),\n    'C':np.arange(0, 1.5, 0.2)\n}\ngrid_cv = GridSearchCV(estimator = LogisticRegression(random_state = 1), param_grid = parameters, cv = 10)","4da9b960":"%%time\ngrid_cv.fit(X_train_scaled, y_train)","a4e24148":"print(grid_cv.best_score_)\nprint(grid_cv.best_params_)","6f593938":"print(classification_report(y_test, grid_cv.best_estimator_.predict(X_test_scaled)))","1aabf2a8":"grid_cv.best_estimator_.score(X_test_scaled, y_test)","327b34b0":"y_score = grid_cv.best_estimator_.predict_proba(X_test_scaled)[:,1]\nfpr, tpr, _ = roc_curve(y_test, y_score, pos_label='M')\n\ntitle('Logistic regression ROC curve')\nxlabel('FPR (Precision)')\nylabel('TPR (Recall)')\n\nplot(fpr,tpr)\nplot((0,1), ls='dashed', color='black')\nplt.show()\nprint ('Area under curve (AUC): ', auc(fpr,tpr))","05fb5c49":"## Concave points","540a01f6":"## Radius","b1490310":"## Symmetry","b5b10458":"# Data preprocessing","238ee8e5":"## Texture","fff5fb03":"# Model evaluating","c3ce521e":"## Area worst","837a20b3":"## Concavity","a9a52489":"## Fractal dimension","297bc44b":"## Compactness","9da48d95":"## Smoothness","a838e7ef":"# Data importing and exploration"}}