{"cell_type":{"ca55e9ee":"code","5864b07d":"code","5fdb4e1d":"code","da9c8c3a":"code","1d38100d":"code","64a3cc50":"code","195e3205":"code","7a09e696":"code","af36fae6":"code","83a6c245":"code","25b209f6":"code","38a3dd86":"code","def0fd3a":"code","17d5c280":"code","80711e19":"code","e163febb":"code","2f5ce741":"code","24ff54ad":"code","3134fe07":"code","88c11711":"code","0ef3047f":"code","f8fdf379":"code","3a583656":"code","7925f36a":"code","fa083d17":"code","330198c5":"markdown","11b2a42e":"markdown","972e9782":"markdown","b9c3b134":"markdown","5c01a2bf":"markdown"},"source":{"ca55e9ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5864b07d":"df = pd.read_csv(\"..\/input\/FIFA19 - Ultimate Team players.csv\")","5fdb4e1d":"df.describe()","da9c8c3a":"df.isnull().sum()\n#checking Null values","1d38100d":"df.describe()","64a3cc50":"df.columns","195e3205":"df.shape","7a09e696":"df.corr()","af36fae6":"import seaborn as sns\ncorr = df.corr()\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values)","83a6c245":"# Let Us Explore Nationality at First Instance\nimport matplotlib.pyplot as plt\np = sns.countplot(x=\"nationality\" , data=df , palette = \"muted\")\n_ = plt.setp(p.get_xticklabels(),rotation = 60)","25b209f6":"#Looking at Pace\np = sns.countplot(x=\"pace\" , data=df , palette = \"muted\")\n_ = plt.setp(p.get_xticklabels(),rotation = 60)","38a3dd86":"p = sns.countplot(x=\"drib_ball_control\" , data=df , palette = \"muted\")\n_ = plt.setp(p.get_xticklabels(),rotation = 60)","def0fd3a":"p = sns.countplot(x=\"dribbling\" , data=df , palette = \"bright\")\n_ = plt.setp(p.get_xticklabels(),rotation = 60)","17d5c280":"#Seeing the variation of Overall Rating with age \np = sns.countplot(x='overall' , data = df , hue = 'age' , palette = 'bright')\n_ = plt.setp(p.get_xticklabels(), rotation = 90)","80711e19":"df['cam'].value_counts().plot(kind = 'bar')","e163febb":"df = df.sample(frac = 0.1 , random_state=1)\nprint(df.shape)","2f5ce741":"p = sns.countplot(x=\"dribbling\" , data=df , palette = \"bright\")\n_ = plt.setp(p.get_xticklabels(),rotation = 60)","24ff54ad":"df['cam'].value_counts().plot(kind = 'bar')","3134fe07":"#Defining a list of positions present in our data\nposition = ['cam', 'cb', 'cdm', 'cf', 'cm',\n       'lb', 'lf', 'lm', 'lw', 'lwb', 'rb', 'rf',\n       'rm', 'rw', 'rwb']","88c11711":"#Searching for Top 10 CAM players by position\ninputs_good = 0\nwhile inputs_good==0:\n    user_input = 'cam' \n    input_list = user_input.split(',')\n\n    search = []\n    for i in input_list:\n        search.append(i.strip().lower())\n    inputs_good = all(elem in position for elem in search)\n    if inputs_good:\n        print('User wants to search for Top 10: ', \", \".join(search))\n    else:\n        print('Invalid position. Please re-enter the position (e.g. RAM, CF, CDM)')","0ef3047f":"#Searching for players by Positions.\nfor i in search:\n    print('\\n\\n','Top 10', i, 'in FIFA 19', '\\n')\n    print(df.sort_values(i, ascending=False).head(10)[['player_id', 'nationality', 'club', 'overall']])","f8fdf379":"#printing all the top 10 players by position for reference\nfor i in position:\n    print('\\n\\n','Top 10', i, 'in FIFA 19', '\\n')\n    print(df.sort_values(i, ascending=False).head(10).reset_index()[['player_id', 'nationality', 'club', 'overall']])","3a583656":"pd.crosstab(df.position,df.age).plot(kind='bar');","7925f36a":"df.pivot_table(index='age' , columns = 'position',values='overall',aggfunc='mean')","fa083d17":"df.groupby(['overall','position']).age.mean()","330198c5":"**Stacking Overall Rating and position with Age Variation..!!**","11b2a42e":"**We will try to reduce the size of the Data Set so that it becomes more optimal for visualization**","972e9782":"**Here we try different exploration plots over different attributes and try to have a look at how these variates in respect to some other attributes**","b9c3b134":"**Creating a Pivot Table for OverAll with Mean Aggregate Function according to positions..!!**","5c01a2bf":"**If you find this helpful...Upvote It and keep checking as more and more comes to this golden Data Set..!!**"}}