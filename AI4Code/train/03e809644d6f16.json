{"cell_type":{"5557a22e":"code","a8f6fd66":"code","c11d9bbb":"code","3652705d":"code","d6467782":"code","fece88c3":"code","0c21e460":"code","a18c529e":"code","be8859b5":"code","8f65dd09":"code","def4a1ab":"code","49a0c1f0":"code","20e7126f":"code","cd915483":"code","5c753e5f":"code","57f69159":"code","1bbd8148":"code","516145b9":"code","72197579":"code","6b20a317":"code","42f629f2":"code","69cc9655":"code","9eb177fc":"code","fc0c2eb9":"code","0d61d95a":"code","ff54bceb":"code","e338cf2b":"code","14edbec2":"code","066daa18":"code","01374ef7":"code","8e6c10e6":"code","32190d6c":"code","d84ec4f3":"code","b533eb4d":"code","0bea8d66":"code","6ae6ac93":"code","0da2dd1d":"code","31841dd6":"code","d84dadaf":"code","2c1acb20":"code","1a2ccd57":"code","a54ca16a":"code","0d080b34":"code","b4a2fe54":"code","b9a367b1":"code","f89f2dd3":"code","576882d9":"code","e3e4ffd4":"code","efd8d213":"code","156c21a4":"code","9a5caafb":"code","7a17ca34":"code","27ac3346":"code","d19425b7":"code","7516f1aa":"code","fdd04fb5":"code","ccfbd133":"code","a42a64f7":"code","f6ec3a64":"code","b3939dca":"code","a7da5b23":"markdown","0008e6c7":"markdown","d2c7b0f0":"markdown","2b0770b6":"markdown","dfc0b30b":"markdown","a2947781":"markdown","7b6ba3de":"markdown","ecce9e41":"markdown","30d694ab":"markdown","0c4ef50e":"markdown","ae1b2969":"markdown","5ce053e1":"markdown","1895d211":"markdown","3efa2b59":"markdown","52fdaf94":"markdown","21d064ac":"markdown","54ff117b":"markdown","e7b05a68":"markdown","85065905":"markdown","2003412a":"markdown","0262500e":"markdown"},"source":{"5557a22e":"import time\nimport pickle\nimport numpy as np\nimport keras\nimport tensorflow as tf\n\nprint(f'using keras version... {keras.__version__} & tf version... {tf.__version__}')","a8f6fd66":"%%time\n# 1: loading tokenizer\nfrom keras.preprocessing.text import Tokenizer\nTOKENIZER_MODEL = \"..\/input\/input-models\/tokenizer.pkl\"\ntokenizer = pickle.load(open(TOKENIZER_MODEL, \"rb\"))  # todo: might want to fix protocol\n\nvocab_size = len(tokenizer.word_index) + 1\nprint(\"Total words\", vocab_size)","c11d9bbb":"# 2: loading w2v model\nfrom gensim.models import KeyedVectors\nfrom keras.layers import Embedding\nw2v_model = KeyedVectors.load(\"..\/input\/input-models\/model.w2v\", mmap='r')\nW2V_SIZE = 300\n\nembedding_matrix = np.zeros((vocab_size, W2V_SIZE))\nfor word, i in tokenizer.word_index.items():\n    if word in w2v_model.wv:\n        embedding_matrix[i] = w2v_model.wv[word]\n\nembedding_layer = Embedding(vocab_size, W2V_SIZE, weights=[embedding_matrix], trainable=False)","3652705d":"# 3: loading keras model\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, LSTM\nfrom keras import utils\n\nmodel = Sequential()\nmodel.add(embedding_layer)\nmodel.add(Dropout(0.5))\nmodel.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.load_weights('..\/input\/input-models\/model.h5')\nmodel.compile(loss='binary_crossentropy', optimizer=\"adam\", metrics=['accuracy'])","d6467782":"model.summary()","fece88c3":"import re\nTAG_RE = re.compile(r'<[^>]+>')\n\ndef remove_tags(text):\n    return TAG_RE.sub('', text)\n\n\ndef process_text(sen):\n    # Removing html tags\n    sentence = remove_tags(sen)\n\n    # Remove punctuations and numbers\n    sentence = re.sub('[^a-zA-Z]', ' ', sentence)\n\n    # Single character removal\n    sentence = re.sub(r\"\\s+[a-zA-Z]\\s+\", ' ', sentence)\n\n    # Removing multiple spaces\n    sentence = re.sub(r'\\s+', ' ', sentence)\n\n    return sentence","0c21e460":"# SENTIMENT\nfrom keras.preprocessing.sequence import pad_sequences\n\nPOSITIVE = \"POSITIVE\"\nNEGATIVE = \"NEGATIVE\"\nNEUTRAL = \"NEUTRAL\"\nSENTIMENT_THRESHOLDS = (0.4, 0.7)\nSEQUENCE_LENGTH = 300\n\ndef decode_sentiment(score, include_neutral=True):\n    if include_neutral:        \n        label = NEUTRAL\n        if score <= SENTIMENT_THRESHOLDS[0]:\n            label = NEGATIVE\n        elif score >= SENTIMENT_THRESHOLDS[1]:\n            label = POSITIVE\n        return label\n    else:\n        return NEGATIVE if score < 0.5 else POSITIVE\n\ndef predict(text, include_neutral=True):\n    start_at = time.time()\n    text = process_text(text)\n    # Tokenize text\n    x_test = pad_sequences(tokenizer.texts_to_sequences([text]), maxlen=SEQUENCE_LENGTH)\n    # Predict\n    score = model.predict([x_test])[0]\n    # Decode sentiment\n    label = decode_sentiment(score, include_neutral=include_neutral)\n\n    return {\"label\": label, \"score\": float(score),\n       \"elapsed_time\": time.time()-start_at}","a18c529e":"predict(text=\"I love the music\", include_neutral=True)","be8859b5":"predict(text=\"I hate the rain\", include_neutral=True)","8f65dd09":"predict(text=\"Asco 2020 sees multiple myeloma responses deepen\", include_neutral=True)","def4a1ab":"inp_text = \"\"\"Looking forward to Dr. Thierry Andre plenary talk @ASCO #ASCO20 of the KEYNOTE-177\n            study ....Likely will set a new standard of care for #colorectal #Cancer #patients.\n            Very exciting time for #CRCSM. #PrecisionMedicine #Immunotherapy\"\"\"\npredict(text=inp_text, include_neutral=True)","49a0c1f0":"# !pip install gensim --upgrade\n# !pip install keras --upgrade\n# !pip install pandas --upgrade","20e7126f":"# DataFrame\nimport pandas as pd\n\n# Matplot\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Scikit-learn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom sklearn.manifold import TSNE\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Keras\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dense, Dropout, Embedding, Flatten, Conv1D, MaxPooling1D, LSTM\nfrom keras import utils\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping\n\n# nltk\nimport nltk\nfrom nltk.corpus import stopwords\nfrom  nltk.stem import SnowballStemmer\n\n# Word2vec\nimport gensim\n\n# Utility\nimport re\nimport numpy as np\nimport os\nfrom collections import Counter\nimport logging\nimport time\nimport pickle\nimport itertools\n\n# Set log\nlogging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)","cd915483":"import keras\nprint(keras.__version__)\nimport tensorflow as tf\nprint(tf.__version__)","5c753e5f":"nltk.download('stopwords')","57f69159":"# DATASET\nDATASET_COLUMNS = [\"target\", \"ids\", \"date\", \"flag\", \"user\", \"text\"]\nDATASET_ENCODING = \"ISO-8859-1\"\nTRAIN_SIZE = 0.8\n\n# TEXT CLENAING\nTEXT_CLEANING_RE = \"@\\S+|https?:\\S+|http?:\\S|[^A-Za-z0-9]+\"\n\n# WORD2VEC \nW2V_SIZE = 300\nW2V_WINDOW = 7\nW2V_EPOCH = 32\nW2V_MIN_COUNT = 10\n\n# KERAS\nSEQUENCE_LENGTH = 300\nEPOCHS = 8\nBATCH_SIZE = 1024\n\n# SENTIMENT\nPOSITIVE = \"POSITIVE\"\nNEGATIVE = \"NEGATIVE\"\nNEUTRAL = \"NEUTRAL\"\nSENTIMENT_THRESHOLDS = (0.4, 0.7)\n\n# EXPORT\nKERAS_MODEL = \"model.h5\"\nWORD2VEC_MODEL = \"model.w2v\"\nTOKENIZER_MODEL = \"tokenizer.pkl\"\nENCODER_MODEL = \"encoder.pkl\"","1bbd8148":"dataset_filename = os.listdir(\"..\/input\")[0]\ndataset_path = os.path.join(\"..\",\"input\",dataset_filename)\nprint(\"Open file:\", dataset_path)\ndf = pd.read_csv(dataset_path, encoding =DATASET_ENCODING , names=DATASET_COLUMNS)","516145b9":"print(\"Dataset size:\", len(df))","72197579":"df.head(5)","6b20a317":"decode_map = {0: \"NEGATIVE\", 2: \"NEUTRAL\", 4: \"POSITIVE\"}\ndef decode_sentiment(label):\n    return decode_map[int(label)]","42f629f2":"%%time\ndf.target = df.target.apply(lambda x: decode_sentiment(x))","69cc9655":"target_cnt = Counter(df.target)\n\nplt.figure(figsize=(16,8))\nplt.bar(target_cnt.keys(), target_cnt.values())\nplt.title(\"Dataset labels distribuition\")","9eb177fc":"stop_words = stopwords.words(\"english\")\nstemmer = SnowballStemmer(\"english\")","fc0c2eb9":"def preprocess(text, stem=False):\n    # Remove link,user and special characters\n    text = re.sub(TEXT_CLEANING_RE, ' ', str(text).lower()).strip()\n    tokens = []\n    for token in text.split():\n        if token not in stop_words:\n            if stem:\n                tokens.append(stemmer.stem(token))\n            else:\n                tokens.append(token)\n    return \" \".join(tokens)","0d61d95a":"%%time\ndf.text = df.text.apply(lambda x: preprocess(x))","ff54bceb":"print('Changed text & labels...')\ndf.head(5)","e338cf2b":"df_train, df_test = train_test_split(df, test_size=1-TRAIN_SIZE, random_state=42)\nprint(\"TRAIN size:\", len(df_train))\nprint(\"TEST size:\", len(df_test))","14edbec2":"%%time\ndocuments = [_text.split() for _text in df_train.text] ","066daa18":"w2v_model = gensim.models.word2vec.Word2Vec(size=W2V_SIZE, \n                                            window=W2V_WINDOW, \n                                            min_count=W2V_MIN_COUNT, \n                                            workers=8)","01374ef7":"w2v_model.build_vocab(documents)","8e6c10e6":"words = w2v_model.wv.vocab.keys()\nvocab_size = len(words)\nprint(\"Vocab size\", vocab_size)","32190d6c":"%%time\nw2v_model.train(documents, total_examples=len(documents), epochs=W2V_EPOCH)","d84ec4f3":"w2v_model.most_similar(\"love\")","b533eb4d":"%%time\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(df_train.text)\n\nvocab_size = len(tokenizer.word_index) + 1\nprint(\"Total words\", vocab_size)","0bea8d66":"%%time\nx_train = pad_sequences(tokenizer.texts_to_sequences(df_train.text), maxlen=SEQUENCE_LENGTH)\nx_test = pad_sequences(tokenizer.texts_to_sequences(df_test.text), maxlen=SEQUENCE_LENGTH)","6ae6ac93":"labels = df_train.target.unique().tolist()\nlabels.append(NEUTRAL)\nlabels","0da2dd1d":"encoder = LabelEncoder()\nencoder.fit(df_train.target.tolist())\n\ny_train = encoder.transform(df_train.target.tolist())\ny_test = encoder.transform(df_test.target.tolist())\n\ny_train = y_train.reshape(-1,1)\ny_test = y_test.reshape(-1,1)\n\nprint(\"y_train\",y_train.shape)\nprint(\"y_test\",y_test.shape)","31841dd6":"print(\"x_train\", x_train.shape)\nprint(\"y_train\", y_train.shape)\nprint()\nprint(\"x_test\", x_test.shape)\nprint(\"y_test\", y_test.shape)","d84dadaf":"y_train[:10]","2c1acb20":"embedding_matrix = np.zeros((vocab_size, W2V_SIZE))\nfor word, i in tokenizer.word_index.items():\n  if word in w2v_model.wv:\n    embedding_matrix[i] = w2v_model.wv[word]\nprint(embedding_matrix.shape)","1a2ccd57":"embedding_layer = Embedding(vocab_size, W2V_SIZE, weights=[embedding_matrix], input_length=SEQUENCE_LENGTH, trainable=False)","a54ca16a":"model = Sequential()\nmodel.add(embedding_layer)\nmodel.add(Dropout(0.5))\nmodel.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.summary()","0d080b34":"model.compile(loss='binary_crossentropy',\n              optimizer=\"adam\",\n              metrics=['accuracy'])","b4a2fe54":"callbacks = [ ReduceLROnPlateau(monitor='val_loss', patience=5, cooldown=0),\n              EarlyStopping(monitor='val_acc', min_delta=1e-4, patience=5)]","b9a367b1":"%%time\nhistory = model.fit(x_train, y_train,\n                    batch_size=BATCH_SIZE,\n                    epochs=EPOCHS,\n                    validation_split=0.1,\n                    verbose=1,\n                    callbacks=callbacks)","f89f2dd3":"model.save(KERAS_MODEL)\nw2v_model.save(WORD2VEC_MODEL)\npickle.dump(tokenizer, open(TOKENIZER_MODEL, \"wb\"), protocol=0)\npickle.dump(encoder, open(ENCODER_MODEL, \"wb\"), protocol=0)","576882d9":"%%time\nscore = model.evaluate(x_test, y_test, batch_size=BATCH_SIZE)\nprint()\nprint(\"ACCURACY:\",score[1])\nprint(\"LOSS:\",score[0])","e3e4ffd4":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n \nepochs = range(len(acc))\n \nplt.plot(epochs, acc, 'b', label='Training acc')\nplt.plot(epochs, val_acc, 'r', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\n \nplt.figure()\n \nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\n \nplt.show()","efd8d213":"def decode_sentiment(score, include_neutral=True):\n    if include_neutral:        \n        label = NEUTRAL\n        if score <= SENTIMENT_THRESHOLDS[0]:\n            label = NEGATIVE\n        elif score >= SENTIMENT_THRESHOLDS[1]:\n            label = POSITIVE\n\n        return label\n    else:\n        return NEGATIVE if score < 0.5 else POSITIVE","156c21a4":"def predict(text, include_neutral=True):\n    start_at = time.time()\n    # Tokenize text\n    x_test = pad_sequences(tokenizer.texts_to_sequences([text]), maxlen=SEQUENCE_LENGTH)\n    # Predict\n    score = model.predict([x_test])[0]\n    # Decode sentiment\n    label = decode_sentiment(score, include_neutral=include_neutral)\n\n    return {\"label\": label, \"score\": float(score),\n       \"elapsed_time\": time.time()-start_at}  ","9a5caafb":"predict(\"I love the music\")","7a17ca34":"predict(\"I hate the rain\")","27ac3346":"predict(\"i don't know what i'm doing\")","d19425b7":"predict(\"what the\")","7516f1aa":"%%time\ny_pred_1d = []\ny_test_1d = list(df_test.target)\nscores = model.predict(x_test, verbose=1, batch_size=8000)\ny_pred_1d = [decode_sentiment(score, include_neutral=False) for score in scores]","fdd04fb5":"def plot_confusion_matrix(cm, classes,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n\n    cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title, fontsize=30)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90, fontsize=22)\n    plt.yticks(tick_marks, classes, fontsize=22)\n\n    fmt = '.2f'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label', fontsize=25)\n    plt.xlabel('Predicted label', fontsize=25)","ccfbd133":"%%time\n\ncnf_matrix = confusion_matrix(y_test_1d, y_pred_1d)\nplt.figure(figsize=(12,12))\nplot_confusion_matrix(cnf_matrix, classes=df_train.target.unique(), title=\"Confusion matrix\")\nplt.show()","a42a64f7":"print(classification_report(y_test_1d, y_pred_1d))","f6ec3a64":"accuracy_score(y_test_1d, y_pred_1d)","b3939dca":"model.save(KERAS_MODEL)\nw2v_model.save(WORD2VEC_MODEL)\npickle.dump(tokenizer, open(TOKENIZER_MODEL, \"wb\"), protocol=0)\npickle.dump(encoder, open(ENCODER_MODEL, \"wb\"), protocol=0)","a7da5b23":"### Predict","0008e6c7":"### Save model","d2c7b0f0":"# Twitter Sentiment Analysis","2b0770b6":"### Callbacks","dfc0b30b":"### Settings","a2947781":"### Pre-Process dataset","7b6ba3de":"### Embedding layer","ecce9e41":"### Dataset details\n* **target**: the polarity of the tweet (0 = negative, 2 = neutral, 4 = positive)\n* **ids**: The id of the tweet ( 2087)\n* **date**: the date of the tweet (Sat May 16 23:58:44 UTC 2009)\n* **flag**: The query (lyx). If there is no query, then this value is NO_QUERY.\n* **user**: the user that tweeted (robotickilldozr)\n* **text**: the text of the tweet (Lyx is cool)","30d694ab":"### Classification Report","0c4ef50e":"### Accuracy Score","ae1b2969":"### Train","5ce053e1":"### Label Encoder ","1895d211":"### Evaluate","3efa2b59":"### Read Dataset","52fdaf94":"### Compile model","21d064ac":"### Tokenize Text","54ff117b":"### Confusion Matrix","e7b05a68":"### Build Model","85065905":"### Map target label to String\n* **0** -> **NEGATIVE**\n* **2** -> **NEUTRAL**\n* **4** -> **POSITIVE**","2003412a":"### Word2Vec ","0262500e":"### Split train and test"}}