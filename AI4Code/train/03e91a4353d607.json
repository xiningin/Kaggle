{"cell_type":{"69acfe14":"code","533d6e3e":"code","569adffe":"code","476512ac":"code","1b8f3cef":"code","a90dc54b":"code","9623b48c":"code","0c828890":"code","c6351e3e":"code","cf4bd698":"code","da1a78c8":"code","55a62cb4":"code","d441649e":"code","fb01a522":"markdown","8b7b2778":"markdown","a052a0b8":"markdown","f4c47367":"markdown","af12a30c":"markdown","e31c586b":"markdown","a44e66fd":"markdown","50571d07":"markdown"},"source":{"69acfe14":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","533d6e3e":"import tensorflow as tf\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom tensorflow import feature_column","569adffe":"df = pd.read_csv(\"\/kaggle\/input\/star-dataset\/6 class csv.csv\")\ndf.rename(columns={\"Absolute magnitude(Mv)\": \"A_M\", \"Luminosity(L\/Lo)\":\"L\", \"Temperature (K)\":\"Temperature\",\n                  \"Radius(R\/Ro)\":\"R\", \"Star color\":\"Color\", \"Spectral Class\":\"class\"}, inplace=True)\ndf.head()","476512ac":"df.describe()","1b8f3cef":"figure= plt.figure(figsize=(10,10))\nsns.displot(df['Temperature'])","a90dc54b":"figure= plt.figure(figsize=(20,10))\nsns.boxenplot(x='Color',y='Temperature',data=df)","9623b48c":"figure= plt.figure(figsize=(20,10))\nsns.boxenplot(x='class',y='L',data=df,palette='winter')","0c828890":"train, val = train_test_split(df, test_size=0.2)\nprint(len(train), 'train examples')\nprint(len(val), 'validation examples')","c6351e3e":"def df_to_dataset(dataframe, shuffle=True, batch_size=32):\n  dataframe = dataframe.copy()\n  labels = dataframe.pop('Star type')\n  ds = tf.data.Dataset.from_tensor_slices((dict(dataframe), labels))\n  if shuffle:\n    ds = ds.shuffle(buffer_size=len(dataframe))\n  ds = ds.batch(batch_size)\n  return ds.prefetch(tf.data.AUTOTUNE)\n# small batch size for visualization\ntrain_ds = df_to_dataset(train, batch_size=5)\nval_ds = df_to_dataset(val, batch_size=5, shuffle=False)","cf4bd698":"for x, y in train_ds.take(1):\n    print(x)\n    print(y)","da1a78c8":"t = feature_column.numeric_column('Temperature')\ntemperature = feature_column.bucketized_column(t, boundaries=[3500, 5000, 6000, 7500, 11000, 25000])\nl = feature_column.numeric_column('L')\nluminosity = feature_column.bucketized_column(l, boundaries=[0.4, 1.2, 6, 80, 20000, 1400000])\nr = feature_column.numeric_column('R')\nradius = feature_column.bucketized_column(r, boundaries=[0.4, 9, 11, 13, 25, 70, 150])\nam = feature_column.numeric_column('A_M')\ncolor = feature_column.categorical_column_with_vocabulary_list(\"Color\", df[\"Color\"].unique())\ncolor_one_hot = feature_column.indicator_column(color)\nSpectral = feature_column.categorical_column_with_vocabulary_list(\"class\", df[\"class\"].unique())\nSpectral_one_hot = feature_column.indicator_column(Spectral)\nfeature_column = [temperature, luminosity, radius, am, color_one_hot, Spectral_one_hot]","55a62cb4":"train_ds = df_to_dataset(train, batch_size=64)\nval_ds = df_to_dataset(val,batch_size=64, shuffle=False)\nmodel = tf.keras.Sequential([\n    tf.keras.layers.DenseFeatures(feature_column),\n    tf.keras.layers.Dense(128),\n    tf.keras.layers.Dense(64),\n    tf.keras.layers.Dense(6, activation=\"softmax\")])\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\nhistory = model.fit(train_ds,\n          validation_data=val_ds,\n          epochs=50)","d441649e":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","fb01a522":"# 5. Training","8b7b2778":"# 1- Importing libraries and data","a052a0b8":"### b. Relation between star color and temperature","f4c47367":"# 3. Data pre-processing","af12a30c":"# 4. Feature engineering","e31c586b":"### a. Distributon of the temprature","a44e66fd":"# 2-Data visualization & EDA","50571d07":"### c. Relation between Spectral class and Luminosity"}}