{"cell_type":{"0b791cb4":"code","9973f9ee":"code","a7777c7f":"code","db9a191c":"code","97f8d99f":"code","758128c6":"code","f61f1184":"code","acc42b38":"code","8e1c330c":"code","26157996":"code","5df2d1fb":"code","61528c39":"code","f5c63055":"code","5a686fa0":"code","3ffd25e0":"markdown","62cbb017":"markdown","4f5c0e04":"markdown","0452ea4b":"markdown","f37f5fa0":"markdown"},"source":{"0b791cb4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9973f9ee":"from IPython.display import Image\nImage(\"..\/input\/assignment-2-ss\/1.png\")","a7777c7f":"class CallDetail:\n    def __init__(self, phoneno, called_no, duration, call_type):\n        self.__phoneno=phoneno\n        self.__called_no=called_no\n        self.__duration=duration\n        self.__call_type=call_type\n\nclass Util:\n    def __init__(self):\n        self.list_of_call_objects=None\n\n    def parse_customer(self,list_of_call_string):\n        self.list_of_call_objects=[]\n        for each_call in list_of_call_string:\n            call_detail_list=each_call.split(\",\")\n        \n            a=CallDetail(call_detail_list[0],call_detail_list[1],call_detail_list[2],call_detail_list[3])\n            self.list_of_call_objects.append(a)\n\ncall='9990000001,9330000001,23,STD'\ncall2='9990000001,9330000002,54,Local'\ncall3='9990000001,9330000003,6,ISD'\n\nlist_of_call_string=[call,call2,call3]\nUtil().parse_customer(['9990000001,9330000001,23,STD', '9990000001,9330000002,54,Local', '9990000001,9330000003,6,ISD'])","db9a191c":"from IPython.display import Image\nImage(\"..\/input\/assignment-2-ss\/1 solution.png\")","97f8d99f":"from IPython.display import Image\nImage(\"..\/input\/assignment-2-ss\/2.2.png\")","758128c6":"flowers=['Orchid','Rose','Jasmine']\nlevels=[15,25,40]\nclass Flower:\n    def __init__(self):\n        self.__flower_name=None\n        self.__price_per_kg=None\n        self.__stock_available=None\n    def validate_flower(self):\n        if self.__flower_name in flowers:\n            return True\n        else:\n            return False\n    def validate_stock(self, required_quantity):\n        if self.__stock_available>=required_quantity:\n            return True\n        else:\n            return False\n    def sell_flower(self,required_quantity):\n        if self.validate_flower() and self.validate_stock(required_quantity):\n            self.__stock_available -= required_quantity\n    def check_level(self):\n        if self.validate_flower():\n            flower_level=levels[flowers.index(self.__flower_name)]\n            if self.__stock_available<flower_level:\n                return True\n        return False\n    def get_flower_name(self):\n        return self.__flower_name\n    def get_price_per_kg(self):\n        return self.__price_per_kg\n    def get_stock_available(self):\n        return self.__stock_available\n    \n    def set_flower_name(self, flower_name):\n        self.__flower_name=flower_name.title()\n    def set_price_per_kg(self,price_per_kg):\n        self.__price_per_kg=price_per_kg\n    def set_stock_available(self, stock_available):\n        self.__stock_available=stock_available\na=Flower()\na.set_flower_name('Rose')\na.set_price_per_kg(200)\na.set_stock_available(25)\nprint(a.check_level())","f61f1184":"from IPython.display import Image\nImage(\"..\/input\/assignment-2-ss\/2 solution.png\")","acc42b38":"from IPython.display import Image\nImage(\"..\/input\/assignment-2-ss\/3.png\")","8e1c330c":"#OOPR-Assgn-12\n#Start writing your code here\nclass Bill:\n    def __init__(self,bill_id,patient_name):\n        self.__bill_id=bill_id\n        self.__patient_name=patient_name\n        self.__bill_amount=0\n        \n    def get_bill_id(self):\n        return self.__bill_id\n        \n    def get_patient_name(self):\n        return self.__patient_name\n        \n    def get_bill_amount(self):\n        return self.__bill_amount\n        \n    def calculate_bill_amount(self, consultation_fees, quantity_list,price_list):\n        for i in range(len(quantity_list)):\n            self.__bill_amount+= (quantity_list[i]*price_list[i])\n            \n        self.__bill_amount+=consultation_fees\n        \n        print(self.__bill_id)\n        print(self.__patient_name)\n        print(self.__bill_amount)\n        \nb=Bill(1,'Sudarshan')\nb.calculate_bill_amount(200,[2,4,6],[100,100,500])","26157996":"from IPython.display import Image\nImage(\"..\/input\/assignment-2-ss\/3 solution.png\")","5df2d1fb":"from IPython.display import Image\nImage(\"..\/input\/assignment-2-ss\/4.1.png\")","61528c39":"class Classroom:\n    classroom_list=[]\n        \n    @staticmethod\n    def search_classroom(class_room):\n        for room in Classroom.classroom_list:\n            if class_room.lower()==room.lower():\n                return \"Found\"\n        return -1","f5c63055":"from IPython.display import Image\nImage(\"..\/input\/assignment-2-ss\/4 solution.png\")","5a686fa0":"class Mobile:\n    discount=50\n    def display(self):\n        print(self.discount)\n         #The above line is valid way of accessing static\n        print(Mobile.discount)\n\n    def change(self):\n        self.discount=40\n        #The above line creates a new attribute\n        #instead of modifying the static value\n        #Now there are two discount variables,\n        #one at class level and the other at object level\n        #Hence best is to access Static through class name\n\nm1=Mobile()\nm1.display()#Will display 50 and 50\n\nm1.change()\nm1.display()#Will display 50 and 40","3ffd25e0":"**Method\/Attribute description:\nclassroom_list: Static list which store the name of the class rooms in the left wing\nsearch_classroom(class_room): Static method which search for the given class room in the classroom_list. If found, return \"Found\". Else, return -1\nNote: Perform case insensitive string comparison\n\nFor testing:\nInvoke search_classroom(class_room) static method on class, Classroom by passing the name of the class room to be searched\nDisplay appropriate message based on the return value of search_classroom(class_room)**","62cbb017":"**Method description:\ncalculate_bill_amount(consultation_fees, quantity_list, price_list): Accept consultation_fees, quantity_list (quantities of medicines purchased) and price_list (price per quantity of medicines purchased)\n\nCalculate total bill amount to be paid by the patient. Bill amount includes consultation fees and price of medicines\nInitialize attribute, bill_amount with the total bill amount\nNote: quantity_list and price_list have one-to-one correspondence. Quantity and price per quantity of 1st medicine purchased by the patient is present at 0th index of both lists, 2nd medicine is present at 1st index and so on.\n\nFor testing:\nCreate objects of Bill class\nInvoke calculate_bill_amount(consultation_fees, quantity_list, price_list) method on Bill object by passing consultation fees, quantity list and price list\nDisplay bill id, patient name and bill amount**","4f5c0e04":"**A telecom company wants to generate reports on the call details of the customers.20 min\nThe data of each call detail include the phone number which made the call, phone number which was called, duration of the call and the type of call. Data of such calls are provided as a list of comma separated string.\n\nProblem Statement:\n\nComplete the CallDetail class with necessary attributes\nComplete the logic inside the parse_customer() method of the Util Class. This method should accept a list of string of the call details and convert it into a list of CallDetail object and assign this list as a value to the attribute of the Util class.\n**","0452ea4b":"** SCENARIO     \nRoyal Orchid is a florist. They want to be alerted when stock of a flower goes below a particular level. \nThe flowers are identified using name, price per kg and stock available (in kgs).\nWrite a Python program to implement the above requirement.**","f37f5fa0":"** CONCEPT\nEven though we can use reference variables to access static values, if we are not careful, we may end up making mistakes which are hard to notice as shown in the below code\n..**"}}