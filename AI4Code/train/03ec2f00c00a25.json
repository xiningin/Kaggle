{"cell_type":{"32fe9a08":"code","a954d409":"code","d16ccca0":"code","e7120bc9":"code","fca8bdd3":"code","887b541d":"code","14a17cf3":"code","ec4e42dd":"code","f18d9f89":"code","287e26d3":"code","01212712":"code","e5ac1c16":"code","6966b66e":"code","c852f321":"code","97753566":"code","0c831f91":"code","bc5ac774":"code","9e231428":"code","69c985d6":"code","d470d1f9":"code","c6dffb21":"code","70c86c45":"code","60d42146":"code","34e620f4":"code","5eadaea7":"code","e74763ff":"markdown","e52d88cc":"markdown","2f1a269a":"markdown","2be8a184":"markdown","b7d94514":"markdown","730bf3a1":"markdown","ca2074da":"markdown","9c795c24":"markdown","2a6b8f1c":"markdown","af13713e":"markdown","b6df0c7a":"markdown","80c1bb60":"markdown","9d7d5d10":"markdown","771a2dde":"markdown","3a42f777":"markdown","5350a262":"markdown","810c90d4":"markdown","caccf036":"markdown","baa5c569":"markdown","084982b9":"markdown","c1cde403":"markdown","08454c5b":"markdown","2ee045f2":"markdown","4485f1cc":"markdown","bc9019bb":"markdown","8efb81d3":"markdown","67815110":"markdown","b0f8acab":"markdown","fefcbeba":"markdown","c1acc726":"markdown","2f2630ff":"markdown","ba585bc3":"markdown"},"source":{"32fe9a08":"#\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D\nimport warnings","a954d409":"#---------- configs\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(action='ignore', category=UserWarning)\n%matplotlib inline\n\npd.set_option('max_rows',100)\npd.set_option('max_columns',100)\n\nm_cmap = sns.diverging_palette(220, 20, as_cmap=True)\nn_cmap = sns.diverging_palette(250, 15, s=75, l=40,n=9, center=\"dark\")\nsns.set_style('whitegrid')","d16ccca0":"### loading data\ndf_train = pd.read_csv(r\"..\/input\/dry-beans-classification-iti-ai-pro-intake01\/train.csv\",index_col='ID')\ndf_train.head()","e7120bc9":"## nulls and duplicates\nprint('Shape :',df_train.shape)\nprint('Nulls :' , df_train.isnull().sum().sum())\nprint('Duplicates :',df_train.duplicated().sum())","fca8bdd3":"sns.catplot(data = df_train,y='y',kind='count',orient='horizontal')\nplt.show()","887b541d":"def plot_distribution(df,x_cols=[],rows = 2,cell_size = 4):\n    size = len(x_cols)\n    cols = size \/\/ rows\n    fig,axes = plt.subplots(rows,cols,figsize=(cols * cell_size, rows * cell_size))\n    fig.suptitle(\"Variable Distribution\")\n    for i,axe in enumerate(axes.flatten()):\n        if(i < size):\n            sns.distplot(df[x_cols[i]],ax=axe,rug=True)\n            median = df[x_cols[i]].median()\n            axe.set_title(x_cols[i] + f' ,Median : {median:0.1f}')\n            axe.axvline(median, color ='red',lw=2, alpha = 0.55)\n        else:\n            print('subplots > n of columns, change n of rows')\n            break \n    plt.tight_layout()\n    plt.show()","14a17cf3":"cols = ['Area', 'Perimeter', 'MajorAxisLength', 'MinorAxisLength',\n        'AspectRation', 'Eccentricity', 'ConvexArea', 'EquivDiameter', \n        'Extent', 'Solidity', 'roundness', 'Compactness', \n        'ShapeFactor1', 'ShapeFactor2', 'ShapeFactor3', 'ShapeFactor4']\n\nplot_distribution(df_train,cols,rows=4,cell_size=4)","ec4e42dd":"def plot_categorical_distributions(df,x_cols=[],rows = 2,cell_size = 4):\n    size = len(x_cols)\n    cols = size \/\/ rows\n    fig,axes = plt.subplots(rows,cols,figsize=(cols * cell_size, rows * cell_size),sharey=True)\n    fig.suptitle(\"Distributions\")\n    for i,axe in enumerate(axes.flatten()):\n        if(i < size):\n            sns.violinplot(data = df_train,x=x_cols[i],y='y',orient=\"horizontal\",palette='Set2',inner = \"quartile\",ax=axe)\n        else:\n            print('subplots > n of columns, change n of rows')\n            break \n        axe.set_title(x_cols[i])\n    \n    plt.tight_layout()\n    plt.show()","f18d9f89":"cat_cols = ['Area','Perimeter','MajorAxisLength', 'MinorAxisLength']\nplot_categorical_distributions(df_train,cat_cols,rows=2,cell_size=6)","287e26d3":"cat_cols = ['AspectRation', 'Compactness', 'roundness', 'EquivDiameter']\nplot_categorical_distributions(df_train,cat_cols,rows=2,cell_size=6)","01212712":"cat_cols = ['Eccentricity', 'ConvexArea', 'Extent','Solidity']\nplot_categorical_distributions(df_train,cat_cols,rows=2,cell_size=6)","e5ac1c16":"shapes_cols = ['ShapeFactor1', 'ShapeFactor2','ShapeFactor3', 'ShapeFactor4']\nplot_categorical_distributions(df_train,shapes_cols,rows=2,cell_size=6)","6966b66e":"sns.scatterplot(data=df_train,x='Area',y='AspectRation',hue='y',palette='Set2')\nplt.show()","c852f321":"sns.pairplot(data=df_train[['Perimeter', 'MajorAxisLength', 'MinorAxisLength','y']],hue='y',palette='Set2')\nplt.show()","97753566":"#%matplotlib qt","0c831f91":"fig = plt.figure(figsize=(8,8))\nax = fig.add_subplot(111, projection = '3d')\n\nx = df_train['Perimeter']\ny = df_train['MajorAxisLength']\nz = df_train['MinorAxisLength']\ncolor = pd.factorize(df_train['y'])[0]\n\nax.set_xlabel(\"Perimeter\")\nax.set_ylabel(\"MajorAxisLength\")\nax.set_zlabel(\"MinorAxisLength\")\n\nax.scatter3D(x, y, z,c=color,alpha=0.2,cmap='plasma',marker='^')\n\nplt.show()","bc5ac774":"%matplotlib inline","9e231428":"sns.pairplot(df_train[['Eccentricity', 'ConvexArea' , 'Extent',\n       'Solidity', 'roundness','y']],hue='y',palette='Set2')\nplt.show()","69c985d6":"#--full pairplot\nsns.pairplot(df_train,hue='y',palette='Set2')\nplt.show()","d470d1f9":"plt.figure(figsize=(14,12))\nsns.heatmap(df_train.corr(),annot=True,square=True,linewidths=1,cmap=m_cmap,cbar=False)\nplt.show()","c6dffb21":"from sklearn.preprocessing import MinMaxScaler\nmmax_scaler = MinMaxScaler()\nnumerical_columns = df_train.select_dtypes(exclude='object').columns.tolist()\ndf_scaled = df_train.copy()\ndf_scaled[numerical_columns] = mmax_scaler.fit_transform(df_train[numerical_columns])","70c86c45":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=7,random_state = 42)\nselected_features = ['Area', 'Perimeter', 'MajorAxisLength', 'MinorAxisLength','AspectRation']\nfit_kmeans = kmeans.fit(df_scaled[selected_features])","60d42146":"df_clustered = df_scaled.copy()\ndf_clustered['Cluster'] = fit_kmeans.labels_","34e620f4":"df_clusters_counts = df_clustered.groupby(['Cluster'],as_index=True)['y'].apply(lambda x : np.unique(x,return_counts=True) )","5eadaea7":"fig,axes = plt.subplots(2,4,figsize=(12, 8))\nfor i,axe in enumerate(axes.flatten()):\n    if(i < len(df_clusters_counts)):\n        sns.barplot(y=df_clusters_counts[i][0],x=df_clusters_counts[i][1], ax = axe)      \n        axe.set_title('Cluster : ' + str(i))\nplt.tight_layout()\nplt.show()","e74763ff":"* visualization of the 3 parameters in 3D space ('Perimeter', 'MajorAxisLength', 'MinorAxisLength')","e52d88cc":">#### Notes on ('Eccentricity', 'ConvexArea', 'Extent','Solidity') Distributions : \n\n>* Eccentricity\n   >>* Gives idea of how much the seed is elongated , ~e=1 means a very stretched(on length) seed, ~e=0 means a circular seed.\n   \n>* ConvexArea\n   >>*  Number of pixels in the smallest convex polygon that can contain the area of a bean seed.\n   >>*  Similar to the Area Distribution.\n    \n>* Extent\n   >>*  The ratio of the pixels in the bounding box to the bean area.\n   >>* ~Extent = 1 , when the bean is squarish (filling the bounding box).\n   >>* one note , the bimodal distributions , this is clear indication of the 3D orientation for example the horoz seed is the most -elongated- seed it has bimodal distribution due to the fact of different orientations will give different extent ratio .. on the contrary the seker seed is closer to a be circlular giving close to normal distrinution..\n   >>* don't know how to benefit from this, to be investigated.\n   \n>* Solidity\n   >>*  Also known as convexity. The ratio of the pixels in the convex shell to those found in beans\n   >>*  doesn't give me clear variance between the classes. to be investigated later..","2f1a269a":"---\n## 3. <a name=\"3\">Basic Clustering<\/a>\n(<a href=\"#0\">Go to top<\/a>)","2be8a184":"* Pair Plots (but with selected few features)\n* a closer look into the features with better classification prospects (gathered from the violin plots above)","b7d94514":"### Imports","730bf3a1":"---\n### Next Considerations","ca2074da":">Before we jump into the statistics & numbers, \n>i will research each bean class and its shape visually (based on what i could find on the web) so we can have a meaningful image about the different shape features.","9c795c24":"---","2a6b8f1c":"* the Target Distribution","af13713e":">* **Notes on ('AspectRation', 'Compactness', 'roundness', 'EquivDiameter') Distributions :**\n\n>* Aspect Ratio \n   >>* Give idea on the Length\/width , for example from the visual images we expect the horoz to have the highest aspect ration and seker to be closer to ~1, and this is correct according to the distribution plot. (the rest share close to similar distributions).\n   \n>* Compactness\n   >>*  Measures the roundness of an object by the following equation: ~ an equivalent circle diameter \/ Length\n   >>*  Seker is the most compact meaning it's close to be a circle , on the contrary horoz is the least because the aspect ratio described above.\n   >>*  Cali is in the lower end also due to its aspect ratio.\n    \n>* Roundness\n   >>*  Measures the roundness of an object by the following equation: ~  (4pi * Area)\/(perimeter^2)\n   >>*  Seker is the most round followed by dermason ... only one problem here , the outliers, huge skewness.\n   >>*  it's not obvious to me the validity of the equation used in the calculation where depending on pixel values for (area , perimeter) it can lead to misleading info depending on the bean orientation in the 3d space.\n   \n>* EquivDiameter\n   >>*  The diameter of a circle having the same area as a bean seed area. \n   >>*  Has similar distribution characterstic to the area, perimeter, major and minor lengths.","b6df0c7a":"* i will test k-means with some selected features to see have a feeling on the potential of clustering","80c1bb60":"---\n## 2. <a name=\"2\">Data Exploration<\/a>","9d7d5d10":">#### Notes on ('ShapeFactor1', 'ShapeFactor2','ShapeFactor3', 'ShapeFactor4') Distributions : \n\n>* no details were given , maybe in the paper they have the reasoning behind the 4 features.\n>* there is unique variance in the distributions for 'ShapeFactor1', 'ShapeFactor2'.\n>* shape factor 3 is similar to shape factor 2 ,shape factor 4 has similar characteristics with Solidity attribute.","771a2dde":">* not bad clustering results given little features used, no data processing, feature engineering ... etc\n>* we can infere some characterisitcs from the overlapping inside clusters. (ex where multiple classes overlap , what are the similar properties? how to enhance the seperation by creating a new feature?","3a42f777":">* Please Note : these photos may be misleading and even wrong. , as i didn't find any credible resources at all this is the best i could find. ","5350a262":"* Dealing with class weight imbalance\n* Creating features to help seperate the overlapping properties \n* Possible potential of using clustering to aid the model performance ...  ","810c90d4":"---","caccf036":"* imbalanced class count.","baa5c569":"---","084982b9":">* my search results","c1cde403":"---","08454c5b":"---\n## 1. <a name=\"1\">Problem Statement<\/a>\n* You are given a set of features extracted from the shape of the beans in images and it's required to predict the type of each bean. There are 7 bean types in this dataset","2ee045f2":">* Notes on ('Area','Perimeter','MajorAxisLength', 'MinorAxisLength') Distributions : \n>* the 4 features share common informations\n   >>* for each bean class , the Area and Perimeter has the same distinct distribution from the other classes.\n   >>* for bombay beans has the largest [Area,Perimeter] , for the dermason has the smallest [Area,Perimeter].\n   >>* Cali And Barbunya share semi equal distributions for the 4 features plotted above.","4485f1cc":"[![visualsupdated.png](https:\/\/i.postimg.cc\/sgD9Dcz0\/visualsupdated.png)](https:\/\/postimg.cc\/2VMB0nV4)","bc9019bb":">* high correlations between :\n    >>* Area', 'Perimeter', 'MajorAxisLength', 'MinorAxisLength','ConvexArea', 'EquivDiameter' ,'ShapeFactor1', 'ShapeFactor2'\n    >>* 'AspectRation', 'Eccentricity' \n    >>* 'roundness', 'Compactness'\n    >>* 'ShapeFactor2', 'ShapeFactor3'","8efb81d3":">* **Notes on Variable Distributions :** \n    >>* mostly skewed multi-modal distributions with possible big percentage of outliers.","67815110":"---\n### MultiVariate Exploration\n>* we will explore correlations between the variables","b0f8acab":"#### No Nulls or Duplicates, and we have 10834 records , 17 columns.","fefcbeba":">### Data fields\n\n>* ID - an ID for this instance\n>* Area - (A), The area of a bean zone and the number of pixels within its boundaries.\n>* Perimeter - (P), Bean circumference is defined as the length of its border.\n>* MajorAxisLength - (L), The distance between the ends of the longest line that can be drawn from a bean.\n>* MinorAxisLength - (l), The longest line that can be drawn from the bean while standing perpendicular to the main axis.\n>* AspectRatio - (K), Defines the relationship between L and l.\n>* Eccentricity - (Ec), Eccentricity of the ellipse having the same moments as the region.\n>* ConvexArea - (C), Number of pixels in the smallest convex polygon that can contain the area of a bean seed.\n>* EquivDiameter - (Ed), The diameter of a circle having the same area as a bean seed area.\n>* Extent - (Ex), The ratio of the pixels in the bounding box to the bean area.\n>* Solidity - (S), Also known as convexity. The ratio of the pixels in the convex shell to those found in beans\n>* Roundness - (R), Calculated with the following formula: (4piA)\/(P^2)\n>* Compactness - (CO), Measures the roundness of an object: Ed\/L\n>* ShapeFactor1 - (SF1)\n>* ShapeFactor2 - (SF2)\n>* ShapeFactor3 - (SF3)\n>* ShapeFactor4 - (SF4)\n>* y - the class of the bean. It can be any of BARBUNYA, SIRA, HOROZ, DERMASON, CALI, BOMBAY, and SEKER","c1acc726":"---\n### Bivariate Exploration\n>* we will explore each **class** with respect to other features such as **Area** , **Perimeter** ,.. etc ","2f2630ff":">* I hope the exploration is helpful , i am waiting for any suggestions or new ideas","ba585bc3":"---\n### Univariate Exploration\n>* we will explore each **variable** distribution"}}