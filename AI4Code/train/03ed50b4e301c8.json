{"cell_type":{"07beed80":"code","cb8fea06":"code","9017493b":"code","0df9da10":"code","98cde992":"code","8c4396b1":"code","2c4ed712":"code","ac674330":"code","00d861b9":"code","9e09c32f":"code","3b0ad715":"code","a4908e93":"code","1ad8f597":"code","59057a26":"code","f3228815":"code","20711d2a":"code","d2cff802":"code","b9b0a8ee":"code","be84756f":"code","ac1f71c1":"code","ac9c8b7e":"code","80ee8f73":"code","09efa4e0":"code","9c486bc3":"code","5f828d56":"code","05b7c270":"code","b4725195":"code","4b1a6f22":"code","cf0fc85a":"code","e0425719":"code","b81035b5":"code","86a518b2":"code","e1022201":"code","8aeec51c":"code","f4c40aff":"code","7ff60397":"code","9bbe6f4e":"code","fb599e34":"code","960b7a00":"code","d7c6e4f1":"code","ecf721f7":"code","7b43a79d":"code","e9f7e62e":"code","1eb7f2cd":"code","820978ee":"code","b271ced4":"code","ca5ee723":"code","109f6ed3":"code","2326fea8":"code","2555a8c9":"code","fcfda6d7":"code","2667c5a6":"code","8e23f9dc":"code","49b04271":"code","4eaecda3":"code","4b176e92":"code","b3eb0c05":"code","b92df360":"code","237c5c60":"code","5552462d":"code","e213a2e6":"code","a8ca57b8":"code","46e1fc38":"code","261f06ee":"code","2ace20dd":"code","358953de":"code","1269a89f":"code","5abf82d4":"code","8158328e":"code","bd2036c2":"code","fdab932c":"code","844b737a":"code","4b8bc7cb":"code","0c4eec54":"code","d2e1a33d":"code","1beef19a":"markdown","d3c1f0b5":"markdown","987de0bf":"markdown","63f518cb":"markdown","3bf87f72":"markdown","d203a3b2":"markdown","ab96c1c8":"markdown","ac356a7d":"markdown","2d76d1d1":"markdown","447e1462":"markdown","5e99b8fb":"markdown","b8715fde":"markdown","ec66a449":"markdown","fb074bcb":"markdown","22c9f5e8":"markdown","1881f29e":"markdown","2d046427":"markdown","4e8b106b":"markdown","a8134ab5":"markdown","4cc3c984":"markdown","bb5b0146":"markdown","9dd1857c":"markdown","42fe1c1d":"markdown","409063d0":"markdown","bc22513e":"markdown","21cce2dd":"markdown","3c614145":"markdown","873373b9":"markdown","f89cf3bb":"markdown","046971e4":"markdown"},"source":{"07beed80":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cb8fea06":"import pandas as pd\npd.options.display.max_columns = 200\npd.options.display.max_rows = 200","9017493b":"prices_df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","0df9da10":"prices_df","98cde992":"test_df","8c4396b1":"prices_df.info()","2c4ed712":"n_rows = prices_df.shape[0]","ac674330":"n_cols = prices_df.shape[1]","00d861b9":"print('The dataset contains {} rows and {} columns.'.format(n_rows, n_cols))","9e09c32f":"prices_df.describe()","3b0ad715":"import numpy as np\ncor=prices_df.corr()[\"SalePrice\"]\ncor[np.argsort(cor, axis=0)[::-1]]","a4908e93":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nsns.set(style=\"whitegrid\", color_codes=True)\nsns.set(font_scale=1)","1ad8f597":"plt.figure(figsize=(10, 10))\ncorMat=prices_df[[\"SalePrice\",\"OverallQual\",\"GrLivArea\",\"GarageCars\",\n                  \"GarageArea\",\"GarageYrBlt\",\"TotalBsmtSF\",\"1stFlrSF\",\"FullBath\",\n                  \"TotRmsAbvGrd\",\"YearBuilt\",\"YearRemodAdd\"]].corr()\n\nsns.heatmap(corMat,cmap='viridis',linecolor='white', annot=True, vmax=.8)\nplt.title('Correlation between important features')","59057a26":"import plotly\nplotly.offline.init_notebook_mode (connected = True)\n\n\npx.histogram(prices_df, x='SalePrice', color='SaleCondition')","f3228815":"px.histogram(prices_df, x='YearBuilt', nbins=14)","20711d2a":"prices_df.groupby(['YrSold','MoSold']).count().plot(kind='barh', figsize=(20,23))\nplt.title('Houses sold timing')","d2cff802":"prices_df.groupby(['Neighborhood']).count().plot(kind='barh', figsize=(20,23))\nplt.title('Neighborhood of houses')","b9b0a8ee":"sns.pairplot(prices_df[[\"SalePrice\", \"LotArea\", \"YearBuilt\", \"1stFlrSF\", \"TotalBsmtSF\", \"FullBath\", \"GarageArea\", \"TotRmsAbvGrd\", \"GrLivArea\", \"OverallQual\"]], diag_kind=\"kde\")","be84756f":"prices_df","ac1f71c1":"# Identify the input columns (a list of column names)\ninput_cols = prices_df.columns[1:-1]","ac9c8b7e":"# Identify the name of the target column (a single string, not a list)\ntarget_col = 'SalePrice'","80ee8f73":"print(list(input_cols))","09efa4e0":"len(input_cols)","9c486bc3":"print(target_col)","5f828d56":"inputs_df = prices_df[input_cols].copy()","05b7c270":"targets = prices_df[target_col]","b4725195":"inputs_df","4b1a6f22":"targets","cf0fc85a":"prices_df.info()","e0425719":"import numpy as np","b81035b5":"numeric_cols = inputs_df.select_dtypes(include=['int64', 'float64']).columns.tolist()","86a518b2":"categorical_cols = inputs_df.select_dtypes(include=['object']).columns.tolist()","e1022201":"print(list(numeric_cols))","8aeec51c":"print(list(categorical_cols))","f4c40aff":"missing_counts = inputs_df[numeric_cols].isna().sum().sort_values(ascending=False)\nmissing_counts[missing_counts > 0]","7ff60397":"missing_counts = test_df[numeric_cols].isna().sum().sort_values(ascending=False)\nmissing_counts[missing_counts > 0]","9bbe6f4e":"from sklearn.impute import SimpleImputer","fb599e34":"# 1. Create the imputer\nimputer = SimpleImputer(strategy='mean')","960b7a00":"# 2. Fit the imputer to the numeric colums\nimputer.fit(pd.concat([inputs_df[numeric_cols], test_df[numeric_cols]]))","d7c6e4f1":"# 3. Transform and replace the numeric columns\ninputs_df[numeric_cols] = imputer.transform(inputs_df[numeric_cols])\ntest_df[numeric_cols] = imputer.transform(test_df[numeric_cols])","ecf721f7":"missing_counts = inputs_df[numeric_cols].isna().sum().sort_values(ascending=False)\nmissing_counts[missing_counts > 0] # should be an empty list","7b43a79d":"missing_counts = test_df[numeric_cols].isna().sum().sort_values(ascending=False)\nmissing_counts[missing_counts > 0] # should be an empty list","e9f7e62e":"inputs_df[numeric_cols].describe().loc[['min', 'max']]","1eb7f2cd":"from sklearn.preprocessing import MinMaxScaler","820978ee":"# Create the scaler\nscaler = MinMaxScaler()","b271ced4":"# Fit the scaler to the numeric columns\nscaler.fit(pd.concat([inputs_df[numeric_cols], test_df[numeric_cols]]))","ca5ee723":"# Transform and replace the numeric columns\n\ninputs_df[numeric_cols] = scaler.transform(inputs_df[numeric_cols])\ntest_df[numeric_cols] = scaler.transform(test_df[numeric_cols])","109f6ed3":"inputs_df[numeric_cols].describe().loc[['min', 'max']]","2326fea8":"test_df[numeric_cols].describe().loc[['min', 'max']]","2555a8c9":"inputs_df[categorical_cols].nunique().sort_values(ascending=False)","fcfda6d7":"missing_counts = inputs_df[categorical_cols].isna().sum().sort_values(ascending=False)\nmissing_counts[missing_counts > 0]","2667c5a6":"test_df[categorical_cols].nunique().sort_values(ascending=False)","8e23f9dc":"from sklearn.preprocessing import OneHotEncoder","49b04271":"inputs_df2 = inputs_df[categorical_cols].fillna('Unknown')\ntest_df2 = test_df[categorical_cols].fillna('Unknown')","4eaecda3":"# 1. Create the encoder\nencoder = OneHotEncoder(sparse=False, handle_unknown='ignore')\nencoder1 = OneHotEncoder(sparse=False, handle_unknown='ignore')","4b176e92":"# 2. Fit the encoder to the categorical colums\nencoder.fit(inputs_df2[categorical_cols])\nencoder1.fit(inputs_df2[categorical_cols])","b3eb0c05":"# 3. Generate column names for each category\nencoded_cols = list(encoder.get_feature_names(categorical_cols))\nlen(encoded_cols)","b92df360":"# 4. Transform and add new one-hot category columns\ninputs_df[encoded_cols] = encoder.transform(inputs_df[categorical_cols].fillna('Unknown'))\ntest_df[encoded_cols] = encoder.transform(test_df[categorical_cols].fillna('Unknown'))","237c5c60":"inputs_df","5552462d":"from sklearn.linear_model import Ridge","e213a2e6":"train_inputs = inputs_df[numeric_cols + encoded_cols]","a8ca57b8":"# Create the model\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RepeatedKFold\nref_model = Ridge()\ncv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\ngrid = dict()\ngrid['alpha'] = np.arange(0, 10, 0.1)\nsearcher = GridSearchCV(ref_model, grid, scoring='r2', cv=cv, n_jobs=-1)","46e1fc38":"# Fit the model using inputs and targets\nsearcher.fit(train_inputs, targets)","261f06ee":"model = searcher.best_estimator_\nsearcher.best_params_","2ace20dd":"from sklearn.metrics import mean_squared_error","358953de":"train_preds = model.predict(train_inputs)","1269a89f":"train_preds","5abf82d4":"train_rmse = mean_squared_error(targets, train_preds, squared=False)","8158328e":"print('The RMSE loss for the training set is $ {}.'.format(train_rmse))","bd2036c2":"weights = model.coef_","fdab932c":"weights_df = pd.DataFrame({\n    'columns': train_inputs.columns,\n    'weight': weights\n}).sort_values('weight', ascending=False)","844b737a":"weights_df","4b8bc7cb":"prediction = model.predict(test_df[numeric_cols + encoded_cols])\nprediction","0c4eec54":"sample = pd.DataFrame({'Id':test_df.Id, 'SalePrice':prediction})\nsample","d2e1a33d":"sample.to_csv('submission.csv', index=False)","1beef19a":"Let's create a dataframe to view the weight assigned to each column.","d3c1f0b5":"## Step 2 - Prepare the Dataset for Training\n\nBefore we can train the model, we need to prepare the dataset. Here are the steps we'll follow:\n\n1. Identify the input and target column(s) for training the model.\n2. Identify numeric and categorical input columns.\n3. [Impute](https:\/\/scikit-learn.org\/stable\/modules\/impute.html) (fill) missing values in numeric columns\n4. [Scale](https:\/\/scikit-learn.org\/stable\/modules\/preprocessing.html#scaling-features-to-a-range) values in numeric columns to a $(0,1)$ range.\n5. [Encode](https:\/\/scikit-learn.org\/stable\/modules\/preprocessing.html#encoding-categorical-features) categorical data into one-hot vectors.\n6. Split the dataset into training and validation sets.\n","987de0bf":"Let's explore the columns and data types within the dataset.","63f518cb":"### Encode Categorical Columns\n\nOur dataset contains several categorical columns, each with a different number of categories.","3bf87f72":"A good practice is to [scale numeric features](https:\/\/scikit-learn.org\/stable\/modules\/preprocessing.html#scaling-features-to-a-range) to a small range of values e.g. $(0,1)$. Scaling numeric features ensures that no particular feature has a disproportionate impact on the model's loss. Optimization algorithms also work better in practice with smaller numbers.\n","d203a3b2":"After scaling, the ranges of all numeric columns should be $(0, 1)$.","ab96c1c8":"## Step 1 - Download and Explore the Data\n\nThe dataset is available as a ZIP file at the following url:","ac356a7d":"### Making Predictions\n\nThe model can be used to make predictions on new inputs using the following helper function:","2d76d1d1":"### Feature Importance\n\nLet's look at the weights assigned to different columns, to figure out which columns in the dataset are the most important.","447e1462":"### Scale Numerical Values\n\nThe numeric columns in our dataset have varying ranges. ","5e99b8fb":"### Identify Inputs and Targets\n\nWhile the dataset contains 81 columns, not all of them are useful for modeling. Note the following:\n\n- The first column `Id` is a unique ID for each house and isn't useful for training the model.\n- The last column `SalePrice` contains the value we need to predict i.e. it's the target column.\n- Data from all the other columns (except the first and the last column) can be used as inputs to the model.\n ","b8715fde":"## Step 4 - Make Predictions and Evaluate Your Model\n\nThe model is now trained, and we can use it to generate predictions for the training and validation inputs. We can evaluate the model's performance using the RMSE (root mean squared error) loss function.","ec66a449":"Now that we've identified the input and target columns, we can separate input & target data.","fb074bcb":"\n\nSince machine learning models can only be trained with numeric data, we need to convert categorical data to numbers. A common technique is to use one-hot encoding for categorical columns.\n\n<img src=\"https:\/\/i.imgur.com\/n8GuiOO.png\" width=\"640\">\n\nOne hot encoding involves adding a new binary (0\/1) column for each unique category of a categorical column.","22c9f5e8":"### Identify Numeric and Categorical Data\n\nThe next step in data preparation is to identify numeric and categorical columns. We can do this by looking at the data type of each column.","1881f29e":"> **QUESTION 8**: Create and train a linear regression model using the `Ridge` class from `sklearn.linear_model`.","2d046427":"Let's save our work before continuing.","4e8b106b":"We'll use the data in the file `train.csv` for training our model. We can load the for processing using the [Pandas](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/index.html) library.","a8134ab5":"The new one-hot category columns should now be added to `inputs_df`.","4cc3c984":"House sales peaks in may, june, and july months.","bb5b0146":"Let's save our work before continuing.","9dd1857c":"# House Price Prediction with Linear Regression\n\n![](https:\/\/i.imgur.com\/3sw1fY9.jpg)\n\nWe're going to predict the price of a house using information like its location, area, no. of rooms etc. You'll use the dataset from the [House Prices - Advanced Regression Techniques](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques) competition on [Kaggle](https:\/\/kaggle.com). We'll follow a step-by-step process to train our model:\n\n1. Download and explore the data\n2. Prepare the dataset for training\n3. Train a linear regression model\n4. Make predictions and evaluate the model\n\n\n","42fe1c1d":"### Impute Numerical Data\n\nSome of the numeric columns in our dataset contain missing values (`nan`).","409063d0":"We will create two lists `numeric_cols` and `categorical_cols` containing names of numeric and categorical input columns within the dataframe respectively. Numeric columns have data types `int64` and `float64`, whereas categorical columns have the data type `object`.\n>\n> *Hint*: See this [StackOverflow question](https:\/\/stackoverflow.com\/questions\/25039626\/how-do-i-find-numeric-columns-in-pandas). ","bc22513e":"**Correlation**","21cce2dd":"> **QUESTION 9**: Generate predictions and compute the RMSE loss for the training and validation sets. \n> \n> *Hint*: Use the `mean_squared_error` with the argument `squared=False` to compute RMSE loss.","3c614145":"`model.fit` uses the following strategy for training the model (source):\n\n1. We initialize a model with random parameters (weights & biases).\n2. We pass some inputs into the model to obtain predictions.\n3. We compare the model's predictions with the actual targets using the loss function.\n4. We use an optimization technique (like least squares, gradient descent etc.) to reduce the loss by adjusting the weights & biases of the model\n5. We repeat steps 1 to 4 till the predictions from the model are good enough.\n\n<img src=\"https:\/\/www.deepnetts.com\/blog\/wp-content\/uploads\/2019\/02\/SupervisedLearning.png\" width=\"480\">","873373b9":"## Step 3 - Train a Linear Regression Model\n\nWe're now ready to train the model. Linear regression is a commonly used technique for solving [regression problems](https:\/\/jovian.ai\/aakashns\/python-sklearn-logistic-regression\/v\/66#C6). In a linear regression model, the target is modeled as a linear combination (or weighted sum) of input features. The predictions from the model are evaluated using a loss function like the Root Mean Squared Error (RMSE).\n\n\nHere's a visual summary of how a linear regression model is structured:\n\n<img src=\"https:\/\/i.imgur.com\/iTM2s5k.png\" width=\"480\">\n\nHowever, linear regression doesn't generalize very well when we have a large number of input columns with co-linearity i.e. when the values one column are highly correlated with values in other column(s). This is because it tries to fit the training data perfectly. \n\nInstead, we'll use Ridge Regression, a variant of linear regression that uses a technique called L2 regularization to introduce another loss term that forces the model to generalize better. Learn more about ridge regression here: https:\/\/www.youtube.com\/watch?v=Q81RR3yKn30","f89cf3bb":"Machine learning models can't work with missing data. The process of filling missing values is called [imputation](https:\/\/scikit-learn.org\/stable\/modules\/impute.html).\n\n<img src=\"https:\/\/i.imgur.com\/W7cfyOp.png\" width=\"480\">\n\nThere are several techniques for imputation, but we'll use the most basic one: replacing missing values with the average value in the column using the `SimpleImputer` class from `sklearn.impute`.\n","046971e4":"After imputation, none of the numeric columns should contain any missing values."}}