{"cell_type":{"c4cf972a":"code","20457ef1":"code","322da2d0":"code","5b8a165c":"code","4e1a5af6":"code","9a8961ad":"code","406cc1f0":"code","1dd6948e":"code","d60564fc":"code","01546186":"code","ff58009c":"code","532dceb5":"code","d503e702":"code","a9d7dbc5":"code","33c0b670":"code","7a26bd48":"code","d9c7a9be":"code","b274246d":"code","e868ae60":"code","b126ca8f":"code","af4d72c9":"code","7a14b7c2":"code","89916f1e":"code","35ff37ef":"code","1bdf8912":"code","c533d66f":"code","e076e49a":"code","219022ea":"code","fba5148f":"code","0c0cd029":"code","53a7bdb2":"code","d24b777f":"code","87be7151":"markdown","2448fea9":"markdown","c9aa1cf7":"markdown","fc6e7947":"markdown","4abd37fc":"markdown","cd5375e9":"markdown","2de7e200":"markdown","f42f5632":"markdown","35fabf9d":"markdown","bda8d0ea":"markdown","e34f2176":"markdown","1bc1ac08":"markdown","eaaf6d91":"markdown"},"source":{"c4cf972a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","20457ef1":"import numpy as np\nimport pandas as pd\ndata=pd.read_csv('\/kaggle\/input\/weather-dataset\/weatherHistory.csv')\n","322da2d0":"data.head()","5b8a165c":"data.shape","4e1a5af6":"data['Loud Cover'].value_counts()","9a8961ad":"#showing zeros for all the rows show drop the column\ndata.drop('Loud Cover',axis=1,inplace=True)","406cc1f0":"data","1dd6948e":"#Remove \"Formatted Date\" column as it is not neccesary and remove \"Daily Summary\" as \"Summary\" exists\n\ndata.drop(['Formatted Date','Daily Summary'],axis=1,inplace=True)\n\n#get the feature value of Wind Bearing (degrees) almost equal to 0\ndata.drop(['Wind Bearing (degrees)'],axis=1,inplace=True)\n","d60564fc":"data.shape","01546186":"data.isnull().sum()","ff58009c":"data['Precip Type'].value_counts()","532dceb5":"data['Precip Type'].fillna(method='ffill',inplace=True,axis=0)\ndata['Precip Type'].value_counts()\n\n#with droping\ndata.drop('Precip Type',axis=1,inplace=True)","d503e702":"#Storing target values\ntarget_values=data['Summary'].value_counts().index\ntarget_values\n","a9d7dbc5":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\n#data['Precip Type']=le.fit_transform(data['Precip Type'])\ndata['Summary']=le.fit_transform(data['Summary'])","33c0b670":"data.head()","7a26bd48":"y=data.iloc[:,0]\nx=data.iloc[:,1:]\n","d9c7a9be":"x","b274246d":"y","e868ae60":"x.corr()\n","b126ca8f":"#  correlation between Temperature and Apparent Temparature is almost equal to 1 =======> so drop \"Apparent Temparature\"\n\nx.drop('Apparent Temperature (C)',axis=1,inplace=True)\nx.shape","af4d72c9":"x_cols=x.columns\n\ndata","7a14b7c2":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=1)","89916f1e":"x_train.shape","35ff37ef":"x_test.shape","1bdf8912":"from sklearn.preprocessing import StandardScaler\n\nsc=StandardScaler()\nx_train=sc.fit_transform(x_train)\nx_test=sc.transform(x_test)\n","c533d66f":"x_train=pd.DataFrame(x_train,columns=x_cols)\nx_test=pd.DataFrame(x_test,columns=x_cols)\n\nx_train","e076e49a":"from sklearn.naive_bayes import GaussianNB\n\nnb=GaussianNB()\n\n#training the model\nnb.fit(x_train,y_train)\n\n#testing the model\ny_pred=nb.predict(x_test)\n","219022ea":"from sklearn import metrics\n\nmetrics.accuracy_score(y_test,y_pred)","fba5148f":"from sklearn.ensemble import RandomForestClassifier\n\nrf=RandomForestClassifier(max_depth=32,n_estimators=120,random_state=1)\nrf.fit(x_train,y_train)\ny_pred=rf.predict(x_test)","0c0cd029":"metrics.accuracy_score(y_test,y_pred)","53a7bdb2":"rf.feature_importances_","d24b777f":"x_cols","87be7151":"# Dividing the data frame into dependent and independent variables","2448fea9":"# Droping UnWanted Columns","c9aa1cf7":" # Using PCA","fc6e7947":"from sklearn.decomposition import PCA\n\npca=PCA(n_components=1)\n\nx_train=pca.fit_transform(x_train)\nx_test=pca.transform(x_test)\n\n\n\n\n#tried with changing components of pca but not increased\n","4abd37fc":"# Converting Categorical attributes into numerical","cd5375e9":"# Checking for NULL values","2de7e200":"# Normalizing the dataset  (to give equal importance to each attribute(Independent Variable))","f42f5632":"# **Final shape**","35fabf9d":"# Splitting the dataset","bda8d0ea":"#  checking the correlation between variables\n","e34f2176":"**FILLING NULL VALUES**","1bc1ac08":"# Using RANDOM FOREST CLASSIFIER","eaaf6d91":"# Classifying using Navie Bayeas"}}