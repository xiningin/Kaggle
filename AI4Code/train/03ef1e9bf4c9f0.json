{"cell_type":{"ddbaef8b":"code","911ac5f2":"code","ef0c7f32":"code","ca09cc0d":"code","e56f08c6":"code","a572f450":"code","494b7224":"code","220e36af":"code","a417d813":"code","6c5e2981":"code","4330c89a":"code","dcb28c76":"code","eb1f6728":"code","c644f61c":"code","cf158ede":"code","a75ece39":"code","1f73a6d9":"code","afb32fc9":"code","762ca8c6":"code","36a5e386":"markdown","3934e2b0":"markdown","57343b9d":"markdown","d138b4d8":"markdown"},"source":{"ddbaef8b":"### Install autoviml here ######\n#!pip install autoviml","911ac5f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\nfrom autoviml.Auto_ViML import Auto_ViML\nimport datetime\n\n# For example, by running this (it will automatically load kaggle datasets in this directory)\n\nfrom load_kaggle import load_kaggle\n","ef0c7f32":"sub, train, test = load_kaggle()\nprint(train.shape,test.shape)","ca09cc0d":"for i in sub.columns:\n    if i != 'Uniq Id':\n        del sub[i]\nsub['Per Person Price'] = -1\ndel sub['Uniq Id']","e56f08c6":"test['Per Person Price'] = 0\n#append test to train for feature creation\nfull=train.append(test)\nfull=full.reset_index()\nfull=full.drop('index',axis=1)\nprint(full.shape)","a572f450":"# various data correction & preprocessing\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\":One\",':1.0')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\":Two\",':2.0')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\":Three\",':3.0')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\":Four\",':4.0')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\":Five\",':5.0')\nfull['Itinerary'] = ' ' + full['Itinerary'].astype(str)\nfull['Sightseeing Places Covered'] = full['Sightseeing Places Covered'].str.replace(\")\",'')\nfull['Sightseeing Places Covered'] = full['Sightseeing Places Covered'].str.replace(\"(\",'')\nfull.iloc[27211,5] = full.iloc[27211,3]\nfull['Sightseeing Places Covered'] = full['Sightseeing Places Covered'].str.lower()\nfull['Hotel Details'] = full['Hotel Details'].str.lower()\nfull['Itinerary'] = full['Itinerary'].str.lower()\nfull['Airline'] = full['Airline'].str.lower()","494b7224":"train.columns","220e36af":"# extract and create features from destination\nalldest = []\ntemp = full['Destination']\nfor i in temp:\n    truc = i.split('|')\n    for i in truc:\n        # Island \n        alldest.append(i)\ndest = list(set(alldest))\nclean = ['Singapore Cruise','Kovalam and Poovar']\nfor i in dest:\n    if i not in clean:\n        full[i] = False\n        full.loc[full['Destination'].str.contains(i), i] = True \nlen(dest)","a417d813":"#sorted(dest)","6c5e2981":"#full[full['Singapore']==True]","4330c89a":"# extract and create features from destination Hotel Details\nfull['mmt'] = False\nfull.loc[full['Hotel Details'].str.contains('mmt'), 'mmt'] = True\n\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\" - mmt holidays special\",'')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\"- mmt holidays special\",'')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\"-mmt holidays special\",'')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\"(mmt holidays special)\",'')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\" - mmt special\",'')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\"- mmt speciall\",'')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\"-mmt special\",'')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\"mmt special\",'')\n\nhotels = []\ntemp = full['Hotel Details']\nfor i in tqdm(temp):\n    truc = i.split('|')\n    for i in truc:\n        keep = ''\n        if i[-4] == \":\":\n            keep = i[:-4]\n        else:\n            if i[-3] == \":\":\n                keep = i[:-3]\n            else:\n                if i[-2] == \":\":\n                    keep = i[:-2]\n                else:\n                    if i[-1] == \":\":\n                        keep = i[:-1]\n                    \n        hotels.append(keep)\nhotels = list(set(hotels))\nfor i in tqdm(hotels):\n    full[i] = False\n    full.loc[full['Hotel Details'].str.contains(i), i] = True \nlen(hotels)","dcb28c76":"# extract and create features from Sightseeing Places Covered\nfull['mmt2'] = False\nfull.loc[full['Sightseeing Places Covered'].str.contains('mmt'), 'mmt2'] = True\nfull['bus'] = False\nfull.loc[full['Sightseeing Places Covered'].str.contains('bus'), 'bus'] = True\n\nfull['Sightseeing Places Covered'] = full['Sightseeing Places Covered'].str.replace(\"mmt - \",'')\nfull['Sightseeing Places Covered'] = full['Sightseeing Places Covered'].str.replace(\" - mmt \",'')\n\nfull['Sightseeing Places Covered'] = full['Sightseeing Places Covered'].str.replace(\"north\",'')\nfull['Sightseeing Places Covered'] = full['Sightseeing Places Covered'].str.replace(\"south\",'')\n\nexc = []\ntemp = full['Sightseeing Places Covered']\nfor i in temp:\n    truc = i.split('|')\n    for i in truc:\n        exc.append(i)\nexc = list(set(exc))\nfor i in tqdm(exc):\n    full[i] = False\n    full.loc[full['Sightseeing Places Covered'].str.contains(i), i] = True \n\nlen(exc)\n","eb1f6728":"def sumdigits(str):\n    return sum(int(c) for c in str if c.isdigit())\n\ndef feature_engineering(df):\n    #'Package Type'\n    df['Package Type'].replace('Budget', 0,inplace=True)\n    df['Package Type'].replace('Standard', 1,inplace=True)\n    df['Package Type'].replace('Deluxe', 2,inplace=True)\n    df['Package Type'].replace('Luxury', 3,inplace=True)\n    df['Package Type'].replace('Premium', 4,inplace=True)\n    #'Itinerary'\n    duration = []\n    for i in range(0,len(df)):\n        duration.append(sumdigits(df.iloc[i,4]))\n    df['duration'] = duration\n    #'Places Covered'\n    places = []\n    temp = df['Places Covered']\n    for i in temp:\n        truc = i.split('|')\n        places.append(len(truc))\n    df['places'] = places\n    #'Travel Date'\n    #full['Travel Date'] = pd.to_datetime(full['Travel Date'], format='%d-%m-%Y')\n    #add_datepart(full,'Travel Date',prefix='day$',drop=False,time=False)\n    #df['day'] = df['Travel Date'].str[0:2]\n    #df['month'] = df['Travel Date'].str[3:5]\n    #df['year'] = df['Travel Date'].str[-4:]\n    #'Hotel Details'\n    score =[]\n    temp = df['Hotel Details']\n    for i in tqdm(temp):\n        stars = 0.\n        if i == 'Not Available':\n            score.append(stars)\n        else:\n            truc = i.split('|')\n            tot = 0\n            for j in range(0,len(truc)):# pattern :x.x\n                if truc[j][-4:-3]==':':\n                    stars += float(truc[j][-3:])\n                    tot+=1\n                else:# pattern :x.x\n                    if truc[j][-2:-1]==':':\n                        stars += float(truc[j][-1:])\n                        tot+=1\n            if stars != 0.:\n                stars = stars \/ tot\n            score.append(stars)\n    df['score'] = score\n    df['score'] = df['score'].replace(0., np.nan)\n    #'Start City'\n    df['Start City'].replace('New Delhi', 0,inplace=True)\n    df['Start City'].replace('Mumbai', 1,inplace=True)\n    #'Airline'\n    airlines = []\n    temp = df['Airline']\n    for i in temp:\n        truc = i.split('|')\n        airlines.append(len(truc))\n    df['Airnum'] = airlines\n    #'Flight Stops'\n    #'Meals'\n    #'Sightseeing Places Covered'\n    visits = []\n    temp = df['Sightseeing Places Covered']\n    for i in temp:\n        truc = i.split('|')\n        visits.append(len(truc))\n    df['visits'] = visits\n    #'Cancellation Rules'\n    temp = df['Cancellation Rules'].unique()\n    for i in range(0,len(temp)):\n        df['Cancellation Rules'].replace(temp[i], i,inplace=True)\n    #'Per Person Price'\n    \n    ##################################################################\n    #'Uniq Id'\n    del df['Uniq Id']\n    #'Package Name'\n    del df['Package Name']\n    #'Destination'\n    del df['Destination']\n    #'Itinerary'\n    del df['Itinerary']\n    #'Places Covered'\n    del df['Places Covered']\n    #'Travel Date'\n    del df['Travel Date'] \n    #'Hotel Details'\n    del df['Hotel Details']\n    #'Airline'\n    #del df['Airline']\n    #'Sightseeing Places Covered'\n    del df['Sightseeing Places Covered']\n","c644f61c":"feature_engineering(full)","cf158ede":"train = full[full['Per Person Price']!=0]\ntest = full[full['Per Person Price']==0]","a75ece39":"train['Per Person Price'] = np.log(train['Per Person Price'])","1f73a6d9":"target  = 'Per Person Price'\nmodel, features, trainm, testm = Auto_ViML(\n    train,\n    target,\n    test,\n    sub,\n    hyper_param=\"RS\",\n    feature_reduction=False,\n    scoring_parameter= \"neg_mean_squared_log_error\",#\n    KMeans_Featurizer=True,#False,\n    Boosting_Flag= 'catboost',#True,#\n    Binning_Flag=False,\n    Add_Poly=1,\n    Stacking_Flag=False,\n    Imbalanced_Flag=False,\n    verbose=2\n)","afb32fc9":"sub['Per Person Price'] = np.expm1(sub['Per Person Price'])\nsub.head()","762ca8c6":"#sub.to_csv('baseline_v20kc.csv', index=False)# catboost RMSLE = 0.1659","36a5e386":"# Model 1 : Auto ViML","3934e2b0":"# This is taken from Eric Vos's Rank 2 Solution for MachineHack Hackathon in April 2021\nhttps:\/\/www.kaggle.com\/a45632\/rank-2-solution\/execution\nMany thanks to him for sharing his notebook and data!","57343b9d":"# Feature Encoding","d138b4d8":"# Feature Engineering"}}