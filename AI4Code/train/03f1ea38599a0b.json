{"cell_type":{"7a6c5dd1":"code","1fb323b8":"code","802e79a4":"code","21b81882":"code","5f6531d5":"code","c2b93c6f":"code","1dba8136":"markdown","ad92c295":"markdown"},"source":{"7a6c5dd1":"%%writefile anti_rotn.py\n\nimport random\nimport numpy as np\n\nhistory    = []\nrotn_stats = np.array([ 0, 0, 0 ], dtype=np.float)\n\n# observation   =  {'step': 1, 'lastOpponentAction': 1}\n# configuration =  {'episodeSteps': 10, 'agentTimeout': 60, 'actTimeout': 1, 'runTimeout': 1200, 'isProduction': False, 'signs': 3}\ndef anti_rotn(observation, configuration, warmup=10, average='mean', min_weight=2, decay=0.95 ): \n    assert average in ['running', 'mean']\n    global history\n    global rotn_stats\n    \n    if observation.step > 0:\n        history.append( observation.lastOpponentAction )\n\n    if len(history) >= 2:\n        rotn = (history[-1] - history[-2]) % configuration.signs\n        if average == 'running':\n            rotn_stats[ rotn ] += observation.step\n        else:\n            rotn_stats[ rotn ] += 1\n    rotn_stats *= decay\n        \n    if observation.step < warmup:\n        action = random.randint(0, configuration.signs-1)\n    else:\n        ev = np.array(list({\n            0: (rotn_stats[2] - rotn_stats[1]), \n            1: (rotn_stats[0] - rotn_stats[2]), \n            2: (rotn_stats[1] - rotn_stats[0]), \n        }.values()))\n        ev = ev + np.max(ev) * min_weight\n        ev[ ev < 0 ] = 0\n        if sum(ev): ev = (ev \/ sum(ev)).round(3)\n        \n        # offset = ev.index(max(ev)  # original anti-rotn spec \n        offset = random.choices( population=[0,1,2], weights=ev, k=1 )[0]        \n        action = (offset + observation.lastOpponentAction) % configuration.signs\n        print(f'rotn_stats = {rotn_stats.round(3).tolist()} | ev = {ev.tolist()} | action = {action}')\n        \n    return int(action)\n","1fb323b8":"%run -i 'anti_rotn.py'","802e79a4":"def random_agent(observation, configuration):\n    return random.randint(0, configuration.signs-1)\n\ndef rock_agent(observation, configuration):\n    return 0\n\ndef paper_agent(observation, configuration):\n    return 1\n\ndef scissors_agent(observation, configuration):\n    return 2\n\ndef sequential_agent(observation, configuration):\n    return observation.step % configuration.signs","21b81882":"from kaggle_environments import make\n\nenv = make(\"rps\", configuration={\"episodeSteps\": 100}, debug=True)\nenv.run([\"anti_rotn.py\", sequential_agent])\nenv.render(mode=\"ipython\", width=600, height=600)","5f6531d5":"from kaggle_environments import make\n\nenv = make(\"rps\", configuration={\"episodeSteps\": 100}, debug=True)\nenv.run([\"anti_rotn.py\", random_agent])\nenv.render(mode=\"ipython\", width=600, height=600)","c2b93c6f":"from kaggle_environments import make\n\nenv = make(\"rps\", configuration={\"episodeSteps\": 1000}, debug=False)\nenv.run([\"anti_rotn.py\", \"..\/input\/rock-paper-scissors-decision-tree\/submission.py\"])\nenv.render(mode=\"ipython\", width=600, height=600)","1dba8136":"# Rock Paper Scissors - Anti-RotN Weighted Random\n\nThis agent modifies the simple Anti-RotN bot by using weighted randomness on the EV rather than the more predicable max()\n\nDescription from: http:\/\/webdocs.cs.ualberta.ca\/~darse\/rsb-results2.html\n\n\nDummy Bot: Anti-rotn\n```\n  Length (in C semi-colons):   40\n  Type of history analysis:    consecutive pairs of opponent actions\n  Level of meta-reasoning:     one\n  theoretical exploitability:  40 out of 1000\n```\nThe Anti-rotn bot is the only dummy bot that actually analyzed the opponent's moves and tried to win. It has a minimal use of history, counting only the \"rotations\" in the opponent's move sequence. If the opponent repeated an action, went up by one, or up by two, it was counted as a 0, +1, or -1 rotation, respectively. This means that it treats the actual choice of rock, paper, or scissors as irrelevant, and considers only the difference between each pair of moves. This enables it to pick up a particular pattern faster than if it \"split the signal\" into three different categories (for example by treating \"rp\", \"ps\", and \"sr\" as three distinct patterns).\n\nThe \"Anti-rotten-bot\" looks for both maximum and minimum occurrences in the distribution, which many of the entries failed to do. For example, if a prediction algorithm believes the probability distribution for the opponent's next action is 20-39-41 (20% rock, 39% paper, 41% scissors), several programs counter only the maximum likelyhood, and would play rock to beat the expected scissors. However, there is a much stronger opponent tendency toward \"not rock\", and playing scissors would have a much higher expectation.\n\nIn general, the expected value of each action \"x\" is simply:\n\n```\nEV[x] = Pr[x+2] - Pr[x+1]\n```\nwhere \"+\" is understood to be modulo 3. So in the 20-39-41 example,\n\n```\nEV[rock] = +2%,   EV[paper] = -21%,   and EV[scissors] = +19%.\n```\n\nThe other feature built into the Anti-rotn bot is a simple fail-safe, set at 4% of the total match length. This single line of code:\n\n```\nif ( score < -trials\/25 ) { return(random() % 3); }\n```\nwould have saved many entries thousands of points against stronger opposition. The same approach would not prevent a match loss, however. Even though a -40 result is less than the noise level for a single match (+\/- 50.6), many independent tournaments can be run to reduce the variance to a small amount, making the -40 expectation decisive.\n\nSome programs, such as Biopic, Robertot, and Boom, only deviate from random when there appears to be a statistically significant weakness to exploit. This enables them to draw against very strong opposition, who do not exhibit such patterns. Interestingly, Iocaine Powder and Phasenbott are still able to defeat these programs by a small margin, presumably by behaving predictably enough to induce a pattern in their opponent's replies, which they can then exploit for a net profit!","ad92c295":"# Further Reading\n\nThis notebook is part of a series exploring Rock Paper Scissors:\n\nPredetermined\n- [PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-pi-bot)\n- [Anti-PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-pi-bot)\n- [Anti-Anti-PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-anti-pi-bot)\n- [De Bruijn Sequence](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-de-bruijn-sequence)\n\nRNG\n- [Random Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-random-agent)\n- [Random Seed Search](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-random-seed-search)\n- [RNG Statistics](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-rng-statistics)\n\nOpponent Response\n- [Anti-Rotn](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-rotn)\n- [Sequential Strategies](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-sequential-strategies)\n\nStatistical \n- [Weighted Random Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-weighted-random-agent)\n- [Statistical Prediction](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-statistical-prediction)\n- [Anti-Rotn Weighted Random](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-rotn-weighted-random)\n\nMemory Patterns\n- [Naive Bayes](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-naive-bayes)\n- [Memory Patterns](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-memory-patterns)\n\nDecision Tree\n- [XGBoost](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-xgboost)\n- [Multi Stage Decision Tree](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-multi-stage-decision-tree)\n- [Decision Tree Ensemble](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-decision-tree-ensemble)\n\nEnsemble\n- [Multi Armed Stats Bandit](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-multi-armed-stats-bandit)\n\nRoShamBo Competition Winners\n- [Iocaine Powder](https:\/\/www.kaggle.com\/jamesmcguigan\/rps-roshambo-comp-iocaine-powder)\n- [Greenberg](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-greenberg)"}}