{"cell_type":{"10a8ed16":"code","aaabc770":"code","d01dd82d":"code","53c75d03":"code","7262856f":"code","adc09a99":"code","bd31ae8d":"code","2c0106c4":"code","ebfccd4b":"code","03f500c9":"code","419dd787":"code","81a628ed":"code","d1c5d5dd":"code","46cfc485":"code","af95be18":"code","77cca859":"code","c67999e4":"code","4eabdbbe":"code","9176f90c":"code","7efd20d9":"code","b839c8ae":"code","b2d3f4c7":"code","1b11459d":"code","38e61667":"code","d52450fe":"code","9a3d8cb9":"code","6d6773fd":"code","cd25bca7":"code","79fd9efd":"code","def0812f":"code","6f981acc":"code","d85bdb67":"code","1672409f":"code","f126ce0d":"code","6f8bb800":"code","1856f50a":"code","65df56d8":"code","a5aa6d04":"code","f8c1b21b":"code","09640401":"code","e6ad26ac":"code","18ff8342":"code","6d26bfe3":"code","4624df1f":"code","ee6f677f":"code","846adae2":"code","f15db957":"code","463d2941":"code","9cdeda82":"code","c5a8952c":"code","ef37bff4":"code","f0fb4df3":"code","74906ba1":"code","0dcb1315":"code","05454038":"code","38a866bf":"code","0db87970":"code","081b537d":"code","40608280":"markdown","208501eb":"markdown","e632d130":"markdown","b6aba370":"markdown","76221ce3":"markdown","87a410bc":"markdown","f11e3b12":"markdown","728cab86":"markdown","6746dab0":"markdown","a5c0c073":"markdown","c640e690":"markdown","dc6858d5":"markdown","c28e005b":"markdown","4c1e86c9":"markdown","33eb3b05":"markdown","7339216b":"markdown","f9a0bf2a":"markdown","0d2ed22b":"markdown","1671415d":"markdown","dbbfec2b":"markdown","39bdb7ee":"markdown","662e8e67":"markdown","64038945":"markdown","dedabe65":"markdown","569b286a":"markdown","72ff23d0":"markdown","a50a41dd":"markdown","f3af5e88":"markdown","b29eeb8e":"markdown","db648e5b":"markdown","4e3c9e1d":"markdown","8f56c62e":"markdown","ca166487":"markdown","f3b90f62":"markdown","0dbb01ab":"markdown","4489577b":"markdown","87d59946":"markdown","d5360bd4":"markdown","6c227fe8":"markdown","73de3838":"markdown","d5d6377e":"markdown","434f5fd8":"markdown","35f38eed":"markdown","897b081c":"markdown","bf5a7d44":"markdown"},"source":{"10a8ed16":"import pandas as pd\nimport seaborn as sns\nimport matplotlib as plt\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.offline as pyo\nimport plotly.graph_objs as go\npyo.init_notebook_mode()\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n#init_notebook_mode(connected=False)\n\ncp = pd.read_csv(\"..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv\")\ndf1 = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nage = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nsales = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv\")\ncp = cp.fillna(0)","aaabc770":"import pandas as pd\niris = pd.read_csv('\/kaggle\/input\/iris-flower-dataset\/IRIS.csv')\nprint(iris.head())","d01dd82d":"wine_reviews = pd.read_csv('\/kaggle\/input\/winemagdata130k\/winemag-data-130k-v2.csv', index_col=0)","53c75d03":"import matplotlib.pyplot as plt\n\nig, ax = plt.subplots()\n\n# scatter the sepal_length against the sepal_width\nax.scatter(iris['sepal_length'], iris['sepal_width'])\n# set a title and labels\nax.set_title('Iris Dataset')\nax.set_xlabel('sepal_length')\nax.set_ylabel('sepal_width')\n","7262856f":"# create color dictionary\ncolors = {'Iris-setosa':'r', 'Iris-versicolor':'g', 'Iris-virginica':'b'}\n# create a figure and axis\nfig, ax = plt.subplots()\n# plot each data-point\nfor i in range(len(iris['sepal_length'])):\n    ax.scatter(iris['sepal_length'][i], iris['sepal_width'][i],color=colors[iris['species'][i]])\n# set a title and labels\nax.set_title('Iris Dataset')\nax.set_xlabel('sepal_length')\nax.set_ylabel('sepal_width')","adc09a99":"iris.plot.scatter(x='sepal_length', y='sepal_width', title='Iris Dataset')","bd31ae8d":"sns.scatterplot(x='sepal_length', y='sepal_width', data=iris)","2c0106c4":"sns.scatterplot(x='sepal_length', y='sepal_width', hue='species', data=iris)","ebfccd4b":"# get columns to plot\ncolumns = iris.columns.drop(['species'])\n# create x data\nx_data = range(0, iris.shape[0])\n# create figure and axis\nfig, ax = plt.subplots()\n# plot each column\nfor column in columns:\n    ax.plot(x_data, iris[column], label=column)\n# set title and legend\nax.set_title('Iris Dataset')\nax.legend()","03f500c9":"iris.drop(['species'], axis=1).plot.line(title='Iris Dataset')","419dd787":"sns.lineplot(data=iris.drop(['species'], axis=1))","81a628ed":"# create figure and axis\nfig, ax = plt.subplots()\n# plot histogram\nax.hist(wine_reviews['points'])\n# set title and labels\nax.set_title('Wine Review Scores')\nax.set_xlabel('Points')\nax.set_ylabel('Frequency')","d1c5d5dd":"from matplotlib import pyplot as plt\nm = cp[cp['gender']==\"M\"]\nf = cp[cp['gender']==\"F\"]\nplt.figure(figsize=(10,6))\nax = m['degree_p'].plot.hist(bins=10 ,color=\"red\")\nax = f['degree_p'].plot.hist(bins=10,color=\"blue\")\nplt.legend(['Male', 'Female'])","46cfc485":"iris.plot.hist(subplots=True, layout=(2,2), figsize=(10, 10), bins=20)","af95be18":"sns.distplot(wine_reviews['points'], bins=10, kde=False)","77cca859":"sns.distplot(wine_reviews['points'], bins=10, kde=True)","c67999e4":"# create a figure and axis \nfig, ax = plt.subplots() \n# count the occurrence of each class \ndata = wine_reviews['points'].value_counts() \n# get x and y data \npoints = data.index \nfrequency = data.values \n# create bar chart \nax.bar(points, frequency) \n# set title and labels \nax.set_title('Wine Review Scores') \nax.set_xlabel('Points') \nax.set_ylabel('Frequency')","4eabdbbe":"wine_reviews['points'].value_counts().sort_index().plot.bar()","9176f90c":"wine_reviews['points'].value_counts().sort_index().plot.barh()","7efd20d9":"wine_reviews.groupby(\"country\").price.mean().sort_values(ascending=False)[:5].plot.bar()","b839c8ae":"sns.countplot(wine_reviews['points'])","b2d3f4c7":"import plotly.express as px\ngrgs = cp.groupby([\"gender\",\"specialisation\"])[[\"salary\"]].mean().reset_index()\nfig = px.bar(grgs[['gender', 'salary','specialisation']].sort_values('salary', ascending=False), \n             y=\"salary\", x=\"gender\", color='specialisation', \n             log_y=True, template='ggplot2')\nfig.show()\n","1b11459d":"grdsp = cp.groupby([\"degree_t\"])[[\"degree_p\"]].mean().reset_index()\n\nfig = px.pie(grdsp,\n             values=\"degree_p\",\n             names=\"degree_t\",\n             template=\"seaborn\")\nfig.update_traces(rotation=45, pull=0.03, textinfo=\"percent+label\")\nfig.show()","38e61667":"df = wine_reviews[(wine_reviews['points']>=95) & (wine_reviews['price']<1000)]\nsns.boxplot('points', 'price', data=df)","d52450fe":"plt.figure(figsize=(10,6))\nax = sns.boxplot(x=\"ssc_b\", y=\"ssc_p\", hue=\"gender\",\n                 data=cp, palette=\"Set3\")","9a3d8cb9":"import numpy as np\n\n# get correlation matrix\ncorr = iris.corr()\nfig, ax = plt.subplots()\n# create heatmap\nim = ax.imshow(corr.values)\n\n# set labels\nax.set_xticks(np.arange(len(corr.columns)))\nax.set_yticks(np.arange(len(corr.columns)))\nax.set_xticklabels(corr.columns)\nax.set_yticklabels(corr.columns)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")","6d6773fd":"# get correlation matrix\ncorr = iris.corr()\nfig, ax = plt.subplots()\n# create heatmap\nim = ax.imshow(corr.values)\n\n# set labels\nax.set_xticks(np.arange(len(corr.columns)))\nax.set_yticks(np.arange(len(corr.columns)))\nax.set_xticklabels(corr.columns)\nax.set_yticklabels(corr.columns)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(corr.columns)):\n    for j in range(len(corr.columns)):\n        text = ax.text(j, i, np.around(corr.iloc[i, j], decimals=2),\n                       ha=\"center\", va=\"center\", color=\"black\")","cd25bca7":"sns.heatmap(iris.corr(), annot=True)","79fd9efd":"import seaborn as sns\nplt.figure(figsize=(15,6))\nh=pd.pivot_table(cp,columns='sl_no',values=[\"salary\"])\nsns.heatmap(h,cmap=['skyblue','red','green'],linewidths=0.05)\n","def0812f":"g = sns.FacetGrid(iris, col='species')\ng = g.map(sns.kdeplot, 'sepal_length')","6f981acc":"sns.pairplot(iris)","d85bdb67":"from pandas.plotting import scatter_matrix\n\nfig, ax = plt.subplots(figsize=(12,12))\nscatter_matrix(iris, alpha=1, ax=ax)","1672409f":"corona_data=pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\nchoro_map=px.choropleth(corona_data, \n                    locations=\"Country\/Region\", \n                    locationmode = \"country names\",\n                    color=\"Confirmed\", \n                    hover_name=\"Country\/Region\", \n                    animation_frame=\"ObservationDate\"\n                   )\n\nchoro_map.update_layout(\n    title_text = 'Global Spread of Coronavirus',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nchoro_map.show()","f126ce0d":"covid_India_cases = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ncovid_India_cases.rename(columns={'State\/UnionTerritory': 'State', 'Cured': 'Recovered', 'Confirmed': 'Confirmed'}, inplace=True)\n\nstatewise_cases = pd.DataFrame(covid_India_cases.groupby(['State'])['Confirmed', 'Deaths', 'Recovered'].max().reset_index())\nstatewise_cases[\"Country\"] = \"India\" # in order to have a single root node\nfig = px.treemap(statewise_cases, path=['Country','State'], values='Confirmed',\n                  color='Confirmed', hover_data=['State'],\n                  color_continuous_scale='Rainbow')\nfig.show()","6f8bb800":"sales = sales.tail(20)\nfig = px.sunburst(sales, path=[\"item_category_id\",'item_id'],\n                  color='item_category_id', hover_data=['item_id'],\n                  color_continuous_scale='thermal')\nfig.show()\n","1856f50a":"pip install bubbly","65df56d8":"pip install chart-studio","a5aa6d04":"m = pd.read_csv(\"..\/input\/global-hospital-beds-capacity-for-covid19\/hospital_beds_USA_v1.csv\")\nfrom bubbly.bubbly import bubbleplot \nfrom plotly.offline import iplot\nimport chart_studio.plotly as py\n\n\nfigure = bubbleplot(dataset=m, x_column='beds', y_column='population', \n    bubble_column='state', size_column='beds', color_column='type', \n    x_logscale=True, scale_bubble=2, height=350)\n\niplot(figure)","f8c1b21b":"pip install calmap","09640401":"import calmap\nimport numpy as np\nf = plt.figure(figsize=(20,10))\nall_days = pd.date_range('1\/1\/2019', periods=700, freq='D')\ndays = np.random.choice(all_days, 100)\nevents = pd.Series(np.random.randn(len(days)), index=days)\ncalmap.yearplot(events, year=2020)","e6ad26ac":"plt.figure(figsize=(10,6))\nax = sns.violinplot(x=\"degree_t\", y=\"salary\", hue=\"specialisation\",\n                    data=cp, palette=\"muted\")","18ff8342":"m = pd.read_csv(\"..\/input\/global-hospital-beds-capacity-for-covid19\/hospital_beds_USA_v1.csv\")\n\nimport folium\nmap = folium.Map(location=[37.0902,-95.7129 ], zoom_start=4,tiles='cartodbpositron')\n\nfor lat, lon,state,type in zip(m['lat'], m['lng'],m['state'],m['type']):\n    folium.CircleMarker([lat, lon],\n                        radius=5,\n                        color='red',\n                      popup =(\n                    'State: ' + str(state) + '<br>'),\n\n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(map)\nmap","6d26bfe3":"pyo.init_notebook_mode()\nfig = px.choropleth(m, locations=m[\"state\"],       \n\n color=m[\"beds\"],\n                    locationmode=\"USA-states\",\n                    scope=\"usa\",\n                    color_continuous_scale='Reds',\n                   )\n\nfig.show()\n\n","4624df1f":"import plotly.express as px\ndf = px.data.wind()\nfig = px.bar_polar(df, r=\"frequency\", theta=\"direction\",\n                   color=\"strength\", template=\"plotly_dark\",\n                   color_discrete_sequence= px.colors.sequential.Plasma_r)\nfig.show()","ee6f677f":"import plotly.graph_objects as go\npyo.init_notebook_mode()\n\nfig = go.Figure()\n\nfig.add_trace(go.Barpolar(\n    r=[77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5],\n    name='11-14 m\/s',\n    marker_color='rgb(106,81,163)'\n))\nfig.add_trace(go.Barpolar(\n    r=[57.5, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.0],\n    name='8-11 m\/s',\n    marker_color='rgb(158,154,200)'\n))\nfig.add_trace(go.Barpolar(\n    r=[40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0],\n    name='5-8 m\/s',\n    marker_color='rgb(203,201,226)'\n))\nfig.add_trace(go.Barpolar(\n    r=[20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5],\n    name='< 5 m\/s',\n    marker_color='rgb(242,240,247)'\n))\n\nfig.update_traces(text=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'])\nfig.update_layout(\n    title='Wind Speed Distribution in Laurel, NE',\n    font_size=16,\n    legend_font_size=16,\n    polar_radialaxis_ticksuffix='%',\n    polar_angularaxis_rotation=90,\n\n)\nfig.show()","846adae2":"pip install chord","f15db957":"matrix = [\n    [0, 5, 6, 4, 7, 4],\n    [5, 0, 5, 4, 6, 5],\n    [6, 5, 0, 4, 5, 5],\n    [4, 4, 4, 0, 5, 5],\n    [7, 6, 5, 5, 0, 4],\n    [4, 5, 5, 5, 4, 0],\n]\n\nnames = [\"Action\", \"Adventure\", \"Comedy\", \"Drama\", \"Fantasy\", \"Thriller\"]","463d2941":"from chord import Chord\nax=Chord(matrix, names)\nax.show()","9cdeda82":"#get this graph from output file\nChord(matrix, names, wrap_labels=False, label_color=\"#4c40bf\").to_html()","c5a8952c":"from mpl_toolkits import mplot3d\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = plt.axes(projection=\"3d\")\n\nplt.show()","ef37bff4":"fig = plt.figure()\nax = plt.axes(projection=\"3d\")\n\nz_line = np.linspace(0, 15, 1000)\nx_line = np.cos(z_line)\ny_line = np.sin(z_line)\nax.plot3D(x_line, y_line, z_line, 'gray')\n\nz_points = 15 * np.random.random(100)\nx_points = np.cos(z_points) + 0.1 * np.random.randn(100)\ny_points = np.sin(z_points) + 0.1 * np.random.randn(100)\nax.scatter3D(x_points, y_points, z_points, c=z_points, cmap='hsv');\n\nplt.show()","f0fb4df3":"fig = plt.figure()\nax = plt.axes(projection=\"3d\")\ndef z_function(x, y):\n    return np.sin(np.sqrt(x ** 2 + y ** 2))\n\nx = np.linspace(-6, 6, 30)\ny = np.linspace(-6, 6, 30)\n\nX, Y = np.meshgrid(x, y)\nZ = z_function(X, Y)\n\nfig = plt.figure()\nax = plt.axes(projection=\"3d\")\nax.plot_wireframe(X, Y, Z, color='green')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\n\nplt.show()","74906ba1":"ax = plt.axes(projection='3d')\nax.plot_surface(X, Y, Z, rstride=1, cstride=1,\n                cmap='winter', edgecolor='none')\nax.set_title('surface');","0dcb1315":"from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n \n# Get the data (csv file is hosted on the web)\nurl = 'https:\/\/python-graph-gallery.com\/wp-content\/uploads\/volcano.csv'\ndata = pd.read_csv(url)\n \n# Transform it to a long format\ndf=data.unstack().reset_index()\ndf.columns=[\"X\",\"Y\",\"Z\"]\n \n# And transform the old column name in something numeric\ndf['X']=pd.Categorical(df['X'])\ndf['X']=df['X'].cat.codes\n \n# Make the plot\nfig = plt.figure()\nax = fig.gca(projection='3d')\nax.plot_trisurf(df['Y'], df['X'], df['Z'], cmap=plt.cm.viridis, linewidth=0.2)\nplt.show()\n \n# to Add a color bar which maps values to colors.\nsurf=ax.plot_trisurf(df['Y'], df['X'], df['Z'], cmap=plt.cm.viridis, linewidth=0.2)\nfig.colorbar( surf, shrink=0.5, aspect=5)\nplt.show()\n \n# Rotate it\nax.view_init(30, 45)\nplt.show()\n \n# Other palette\nax.plot_trisurf(df['Y'], df['X'], df['Z'], cmap=plt.cm.jet, linewidth=0.01)\nplt.show()","05454038":"from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Dataset\ndf=pd.DataFrame({'X': range(1,101), 'Y': np.random.randn(100)*15+range(1,101), 'Z': (np.random.randn(100)*15+range(1,101))*2 })\n \n# plot\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(df['X'], df['Y'], df['Z'], c='skyblue', s=60)\nax.view_init(30, 185)\nplt.show()","38a866bf":"import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\n \n# Get the iris dataset\nimport seaborn as sns\nsns.set_style(\"white\")\ndf = sns.load_dataset('iris')\n \nmy_dpi=96\nplt.figure(figsize=(480\/my_dpi, 480\/my_dpi), dpi=my_dpi)\n \n# Keep the 'specie' column appart + make it numeric for coloring\ndf['species']=pd.Categorical(df['species'])\nmy_color=df['species'].cat.codes\ndf = df.drop('species', 1)\n \n# Run The PCA\npca = PCA(n_components=3)\npca.fit(df)\n \n# Store results of PCA in a data frame\nresult=pd.DataFrame(pca.transform(df), columns=['PCA%i' % i for i in range(3)], index=df.index)\n \n# Plot initialisation\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(result['PCA0'], result['PCA1'], result['PCA2'], c=my_color, cmap=\"Set2_r\", s=60)\n \n# make simple, bare axis lines through space:\nxAxisLine = ((min(result['PCA0']), max(result['PCA0'])), (0, 0), (0,0))\nax.plot(xAxisLine[0], xAxisLine[1], xAxisLine[2], 'r')\nyAxisLine = ((0, 0), (min(result['PCA1']), max(result['PCA1'])), (0,0))\nax.plot(yAxisLine[0], yAxisLine[1], yAxisLine[2], 'r')\nzAxisLine = ((0, 0), (0,0), (min(result['PCA2']), max(result['PCA2'])))\nax.plot(zAxisLine[0], zAxisLine[1], zAxisLine[2], 'r')\n \n# label the axes\nax.set_xlabel(\"PC1\")\nax.set_ylabel(\"PC2\")\nax.set_zlabel(\"PC3\")\nax.set_title(\"PCA on the iris data set\")\n#plt.show()","0db87970":"import random\nfig = plt.figure()\nax = plt.axes(projection=\"3d\")\n\nnum_bars = 15\nx_pos = random.sample(range(20), num_bars)\ny_pos = random.sample(range(20), num_bars)\nz_pos = [0] * num_bars\nx_size = np.ones(num_bars)\ny_size = np.ones(num_bars)\nz_size = random.sample(range(20), num_bars)\n\nax.bar3d(x_pos, y_pos, z_pos, x_size, y_size, z_size, color='aqua')\nplt.show()","081b537d":"init_notebook_mode(connected=False)\nimport plotly.graph_objects as go\nimport numpy as np\nX, Y, Z = np.mgrid[-8:8:40j, -8:8:40j, -8:8:40j]\nvalues = np.sin(X*Y*Z) \/ (X*Y*Z)\n\nfig = go.Figure(data=go.Volume(\n    x=X.flatten(),\n    y=Y.flatten(),\n    z=Z.flatten(),\n    value=values.flatten(),\n    isomin=0.1,\n    isomax=0.8,\n    opacity=0.1, # needs to be small to see through all surfaces\n    surface_count=17, # needs to be a large number for good volume rendering\n    ))\nfig.show()","40608280":"# Index:\n> 2D Plot\n> > 1. Scatter Plot\n> > 2. Line Plot\n> > 3. Histogram Plot\n> > 4. Bar Plot\n> > 5. Pie Chart Plot\n> > 6. Box Plot\n> > 7. Heat Map\n> > 8. Faceting\n> > 9. Pairplot\n> > 10. Time Plot\n> > 11. Tree Plot\n> > 12. Sunburst Plot\n> > 13. Bubble Plot\n> > 14. Calender Plot\n> > 15. Violin Plot\n> > 16. Folium Map Plot\n> > 17. Choropleth\n> > 18. Rose Plot         ","208501eb":"2. Pandas Visualization","e632d130":"1. matplotlib","b6aba370":"## Surface Plot","76221ce3":"# Histogram Plot","87a410bc":"## Scatter Plot","f11e3b12":"2. Pandas Visualization","728cab86":"1. matplotlib","6746dab0":"Some Useful Sites without which This notebook was impossible to build:\n1. [Data Visualization by Vansh Jatana](https:\/\/www.kaggle.com\/vanshjatana\/data-visualization)\n2. [Data Visualization using Seaborn](https:\/\/towardsdatascience.com\/data-visualization-using-seaborn-fc24db95a850)\n3. https:\/\/seaborn.pydata.org\/\n4. https:\/\/plotly.com\/python\/\n5. https:\/\/matplotlib.org\/","a5c0c073":"# Conclusion \nEffective data visualization is the crucial final step of data analysis. Without it, important insights and messages can be lost.\nWhat can be suggested, though, are some guides for enhancing the visual quality of routine, workaday designs. Attractive displays of statistical information \n*  have a properly chosen format and design \n*  use words, numbers, and drawing together \n*  reflect a balance, a proportion, a sense of relevant scale \n*  display an accessible complexity of detail \n*  often have a narrative quality, a story to tell about the data \n*  are drawn in a professional manner, with the technical details of production done with care \n*  avoid content-free decoration, including chart junk.","c640e690":"4. plotly","dc6858d5":"# Why do we need data visualization?\n\n**We need data visualization because a visual summary of information makes it easier to identify patterns and trends than looking through thousands of rows on a spreadsheet. It\u2019s the way the human brain works. Since the purpose of data analysis is to gain insights, data is much more valuable when it is visualized. Even if a data analyst can pull insights from data without visualization, it will be more difficult to communicate the meaning without visualization. Charts and graphs make communicating data findings easier even if you can identify the patterns without them.**\n\n**In undergraduate business schools, students are often taught the importance of presenting data findings with visualization. Without a visual representation of the insights, it can be hard for the audience to grasp the true meaning of the findings. For example, rattling off numbers to your boss won\u2019t tell them why they should care about the data, but showing them a graph of how much money the insights could save\/make them is sure to get their attention.**","c28e005b":"# Scatter Plot","4c1e86c9":"2. Pandas Visualization","33eb3b05":"# Violin Plot","7339216b":"# Heat Map","f9a0bf2a":"# Tree Plot ","0d2ed22b":"# Bar Plot","1671415d":"# What is data visualization and why is it important?\n\n**Data visualization is the representation of data or information in a graph, chart, or other visual format. It communicates relationships of the data with images. This is important because it allows trends and patterns to be more easily seen. With the rise of big data upon us, we need to be able to interpret increasingly larger batches of data. Machine learning makes it easier to conduct analyses such as predictive analysis, which can then serve as helpful visualizations to present. But data visualization is not only important for data scientists and data analysts, it is necessary to understand data visualization in any career. Whether you work in finance, marketing, tech, design, or anything else, you need to visualize data. That fact showcases the importance of data visualization.**","dbbfec2b":"3. seaborn","39bdb7ee":"# Pairplot","662e8e67":"# Time Plot","64038945":"# Calender Plot","dedabe65":"2. Pandas Visualization","569b286a":"2. Pandas Visualization","72ff23d0":"1. matplotlib","a50a41dd":"# Folium Map","f3af5e88":"## Volume Plot","b29eeb8e":"1. seaborn","db648e5b":"# 3D plot","4e3c9e1d":"# Hope you guys find this notebook useful.\n# If you like this notebook, please upvote.***\ud83d\udc4d\n# Thanks in advance**","8f56c62e":"# Line Plot","ca166487":"> 3D plot\n> > Surface Plot         \nScatter Plot        \nBar Plot       \nVolume Plot","f3b90f62":"# Pie Chart","0dbb01ab":"# Sunburst Plot","4489577b":"3. seaborn","87d59946":"1. matplotlib","d5360bd4":"3. seaborn","6c227fe8":"# Rose Plot","73de3838":"# Faceting","d5d6377e":"# Choropleth","434f5fd8":"# Bubble Plot","35f38eed":"# Box Plot","897b081c":"## Bar Plot ","bf5a7d44":"3. seaborn"}}