{"cell_type":{"69f48dfc":"code","0c5e234c":"code","a1e7fd54":"code","f3ae4c7c":"code","076933de":"code","1c453f3d":"code","46b27ec4":"code","350b8f0f":"code","335eb454":"code","665842a1":"code","e25f1a5f":"code","d677c882":"code","11e46790":"code","bb17ef0c":"code","2a439497":"code","3dddebad":"code","9586d348":"code","775ae679":"code","92fb45b8":"code","a149131c":"code","5a95f00d":"code","78a98e2a":"code","98f3b57b":"code","749d7c71":"code","0f59602f":"code","75f30e6f":"code","b9179515":"code","f85a655e":"code","842bd9bf":"code","5c5fb61a":"code","ea21fbf1":"code","61a78b9d":"code","53d2a6c2":"code","b2dcef58":"code","bef47ff3":"code","554ac031":"code","db8bcced":"code","c57e0ff0":"code","5544ef80":"code","d535635f":"code","2d7b4678":"code","4f142a29":"code","b1f61ae0":"code","c02d6aef":"code","635e54d4":"code","9a56f48c":"code","7261c3c8":"code","640fa97c":"code","b322bad2":"code","161dd708":"code","c81e6879":"code","bad26b47":"code","a2094c9f":"code","0fd3e9e4":"code","e4bad125":"code","3a64a6ff":"code","cba646c1":"code","91a6d783":"code","8fe2b9e1":"code","0733e69e":"code","924539a0":"code","b460e908":"code","a37a7ad4":"code","c0b529d4":"code","24876baa":"code","88af39ee":"code","46fe9a16":"code","07e930b4":"code","8e46657a":"code","721d33ac":"code","d7870066":"code","17040107":"code","cba59d36":"code","49234f2f":"code","b8dd92b8":"code","56cfa913":"code","ff90e655":"code","74e3e519":"code","27d2df01":"code","665fa7b3":"code","dd9c977b":"code","ea7ea1e3":"code","b83b940f":"code","b6af7f7c":"code","7b4f08e7":"code","126931de":"code","70d5a693":"code","f7350b67":"code","a05bd5b5":"code","067b9236":"code","d72dd6d7":"code","9e4e5275":"code","111ce02b":"code","e85058e8":"code","7e7f4264":"code","8c87ee83":"code","e1c8e48c":"code","14e4d6b4":"code","406434a9":"code","b085cbab":"code","505429ae":"code","28e10dc8":"code","3eea054e":"code","b59437e9":"code","24ea4728":"code","52560230":"code","39ed34c4":"code","4e828520":"code","bfb907f8":"code","10c6bfda":"code","4f2c409e":"code","f8b8b430":"code","db6c7d2c":"code","1da868b5":"code","e2cff026":"code","e4c6cbc8":"code","fb095252":"code","8154f641":"code","3df09879":"code","52342a2e":"code","9c88c0b2":"code","85c0f52b":"code","5b8a1a16":"code","0cee0b61":"code","f8210f60":"code","82c35327":"code","1112479b":"markdown","9709ae9d":"markdown","172d104f":"markdown","1d9d47c8":"markdown","4df0796b":"markdown","89d4a463":"markdown","a19b4846":"markdown","ab67a782":"markdown","d785104f":"markdown","cd2fd0b6":"markdown","a45b52fa":"markdown","ac260630":"markdown","ceada0ff":"markdown","ada69530":"markdown","1c8ab6e4":"markdown","353b0074":"markdown","06635d44":"markdown","15579305":"markdown","a64248a8":"markdown","d010cb07":"markdown","f484bb0b":"markdown","606d9e6f":"markdown","78506b9d":"markdown","e70f3333":"markdown","2eb3cf78":"markdown","a3498e34":"markdown","53c27b0e":"markdown","5c599702":"markdown","77001d8d":"markdown","8812e9fe":"markdown","3b5d68b5":"markdown","a42e3cd2":"markdown","ddcc5dab":"markdown","3d74493b":"markdown","84de07f4":"markdown","cc1aec94":"markdown","5966ca9c":"markdown","8e39b486":"markdown","e666543f":"markdown","9cb520fa":"markdown","43ca1006":"markdown","469c19ab":"markdown"},"source":{"69f48dfc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.simplefilter('ignore')\nplt.style.use(\"fivethirtyeight\")","0c5e234c":"data = pd.read_csv(\"\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")","a1e7fd54":"data.head()","f3ae4c7c":"data.dtypes","076933de":"data.shape","1c453f3d":"data.isna().sum()","46b27ec4":"data.groupby('Churn')[['MonthlyCharges', 'tenure']].agg(['min', 'max', 'mean'])","350b8f0f":"data[data['TotalCharges'] == ' ']","335eb454":"data['TotalCharges'] = data['TotalCharges'].replace(' ', np.nan)","665842a1":"data[data['TotalCharges'] == ' ']","e25f1a5f":"data['TotalCharges'].isna().sum()","d677c882":"data['TotalCharges'] = pd.to_numeric(data['TotalCharges'])","11e46790":"data['TotalCharges'].dtypes","bb17ef0c":"data.groupby('Churn')[['MonthlyCharges', 'tenure', 'TotalCharges']].agg(['min', 'max', 'mean'])","2a439497":"data.dropna(inplace = True)","3dddebad":"data.isna().sum()","9586d348":"data.shape","775ae679":"data.groupby('Churn')[['OnlineBackup', 'OnlineSecurity', 'PhoneService']].count()","92fb45b8":"def half_corr_heatmap(data, title=None):\n    plt.figure(figsize=(9,9))\n    sns.set(font_scale=1)\n    \n    mask = np.zeros_like(data.corr())\n    mask[np.tril_indices_from(mask)] = True\n    \n    with sns.axes_style(\"white\"):\n        sns.heatmap(data.corr(), mask=mask, annot=True, cmap=\"coolwarm\")\n    \n    if title: plt.title(f\"\\n{title}\\n\", fontsize=18)\n    plt.show()\n    return","a149131c":"half_corr_heatmap(data, 'Correlation Between Variables')","5a95f00d":"data['Churn'] = data['Churn'].map({'Yes' : 1, 'No' : 0})","78a98e2a":"half_corr_heatmap(data, 'Correlation Between Variables')","98f3b57b":"def corr_for_target(data, target, title=None):\n    plt.figure(figsize=(4,14))\n    sns.set(font_scale=1)\n    \n    sns.heatmap(data.corr()[[target]].sort_values(target, ascending=False)[1:], annot=True, cmap=\"coolwarm\")\n    \n    if title: plt.title(f\"\\n{title}\\n\", fontsize=18)\n    return","749d7c71":"corr_for_target(data, 'Churn', 'Correlation Between Target')","0f59602f":"sns.countplot(data['InternetService']);","75f30e6f":"sns.countplot(data['MultipleLines']);","b9179515":"data2 = data.drop(['customerID'], axis = 1)","f85a655e":"numerical = data2.select_dtypes(['number']).columns\nprint(f'Numerical: {numerical}\\n')\n\ncategorical = data2.columns.difference(numerical)\n\ndata2[categorical] = data2[categorical].astype('object')\nprint(f'Categorical: {categorical}')","842bd9bf":"data2 = pd.get_dummies(data2)","5c5fb61a":"data2.head()","ea21fbf1":"data_cols = data.drop('customerID', axis = 1)\n\nfor col in data_cols.columns:\n    print(col, \"\\n\")\n    print(data[col].unique(), \"\\n\")","61a78b9d":"plt.figure(figsize = (10,8))\n\nax = sns.distplot(data['tenure'], rug=True, rug_kws={\"color\": \"g\"},\n                  kde_kws={\"color\": \"red\", \"lw\": 3},\n                  hist_kws={\"histtype\": \"step\", \"linewidth\": 3,\n                            \"alpha\": 0.4, \"color\": \"g\"});","53d2a6c2":"plt.figure(figsize=(12,8))\n\nsns.distplot(data['MonthlyCharges']);","b2dcef58":"data[data['Churn'] == 1].TotalCharges.plot(kind = 'hist', alpha = 0.3, color = '#016a55', label = 'Churn = Yes')\n\ndata[data['Churn'] == 0].TotalCharges.plot(kind = 'hist', alpha = 0.3, color = '#d89955', label = 'Churn = No')\n\nplt.xlabel('Total Charges')\nplt.legend();","bef47ff3":"data[data['Churn'] == 1].MonthlyCharges.plot(kind = 'hist', alpha = 0.3, color = '#019955', label = 'Churn = Yes')\n\ndata[data['Churn'] == 0].MonthlyCharges.plot(kind = 'hist', alpha = 0.3, color = '#d89955', label = 'Churn = No')\n\nplt.xlabel('Monthly Charges')\nplt.legend();","554ac031":"data[data['Churn'] == 1].tenure.plot(kind = 'hist', alpha = 0.3, color = '#019955', label = 'Yes')\n\ndata[data['Churn'] == 0].tenure.plot(kind = 'hist', alpha = 0.3, color = '#d89955', label = 'No')\n\nplt.xlabel('Tenure')\nplt.legend();","db8bcced":"plt.figure(figsize = (10, 6))\n\nsns.countplot('OnlineSecurity', data = data, hue = 'Churn');","c57e0ff0":"plt.figure(figsize = (10, 6))\n\nsns.countplot('OnlineBackup', data = data, hue = 'Churn');","5544ef80":"plt.figure(figsize = (10, 6))\n\nsns.countplot('Contract', data = data, hue = 'Churn');","d535635f":"plt.figure(figsize = (10, 6))\n\nsns.countplot('PhoneService', data = data, hue = 'Churn');","2d7b4678":"plt.figure(figsize = (10, 6))\n\nsns.countplot('MultipleLines', data = data, hue = 'Churn');","4f142a29":"plt.figure(figsize = (10, 6))\n\nsns.countplot('PaperlessBilling', data = data, hue = 'Churn');","b1f61ae0":"plt.figure(figsize = (10, 6))\n\nsns.countplot('InternetService', data = data, hue = 'Churn');","c02d6aef":"plt.figure(figsize = (15, 15))\n\nplt.subplot(3, 2, 1)\nsns.countplot('gender', data = data, hue = 'Churn')\n\nplt.subplot(3, 2, 2)\nsns.countplot('DeviceProtection', data = data, hue = 'Churn')\n\nplt.subplot(3, 2, 3)\nsns.countplot('StreamingTV', data = data, hue = 'Churn')\n\nplt.subplot(3, 2, 4)\nsns.countplot('Partner', data = data, hue = 'Churn')\n\nplt.subplot(3, 2, 5)\nsns.countplot('TechSupport', data = data, hue = 'Churn')\n\nplt.subplot(3, 2, 6)\nsns.countplot('PaymentMethod', data = data, hue = 'Churn')\n\nplt.xticks(rotation = 45);","635e54d4":"plt.figure(figsize = (20, 7))\n\ncorr_for_target(data2, 'Churn');","9a56f48c":"X = data2.drop('Churn', axis=1)\n\ny = data2['Churn']","7261c3c8":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler","640fa97c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .33, random_state = 42)","b322bad2":"models = []\nmodels.append(('Random Forest Clas.', RandomForestClassifier()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('Decision Tree Clas.', DecisionTreeClassifier()))\nmodels.append((\"LightGBM\", LGBMClassifier()))\nmodels.append(('GBC',GradientBoostingClassifier()))\nmodels.append(('Logistic Reg.', LogisticRegression()))\nmodels.append(('XGB', XGBClassifier()))\nmodels.append(('SVC', SVC()))","161dd708":"model_names = []\nscores = []\n\nfor name, model in models:\n    score = cross_val_score(model, X, y, cv = 10, scoring='accuracy')\n    scores.append(score)\n    model_names.append(name)\n    print(f\"Mean of the {name} model scores : {score.mean()}\")","c81e6879":"feature_importance = pd.DataFrame({'Importance' : LGBMClassifier().fit(X, y).feature_importances_}, index = X.columns)\n\nfeature_importance.sort_values(by = 'Importance', ascending = False, axis = 0)[:5].plot(kind = 'bar', color = '#019955', figsize = (10, 5))\nplt.xlabel(\"Feature Importance by LightGBM\", color = \"#019955\", fontdict= {\"fontsize\" : 20});","bad26b47":"model_lgbm = LGBMClassifier()\nmodel_lgbm.fit(X_train, y_train)\n\ny_pred_lgbm = model_lgbm.predict(X_test)\ny_pred_lgbm_train = model_lgbm.predict(X_train)","a2094c9f":"lgbm_test_as = metrics.accuracy_score(y_pred_lgbm, y_test)\nlgbm_train_as = metrics.accuracy_score(y_pred_lgbm_train, y_train)\n\nprint(f\"LGBM accuracy score for test data {lgbm_test_as}\")\nprint(f\"LGBM accuracy score for train data {lgbm_train_as}\")","0fd3e9e4":"X_train_new = X_train[['MonthlyCharges', 'TotalCharges', 'tenure', 'PaymentMethod_Electronic check']]\n\nX_test_new = X_test[['MonthlyCharges', 'TotalCharges', 'tenure', 'PaymentMethod_Electronic check']]","e4bad125":"new_model_lgbm = LGBMClassifier()\nnew_model_lgbm.fit(X_train_new, y_train)\n\nnew_y_pred = new_model_lgbm.predict(X_test_new)\nlgbm_ft_as = metrics.accuracy_score(new_y_pred, y_test)\nlgbm_ft_as","3a64a6ff":"new_y_pred_train = new_model_lgbm.predict(X_train_new)\nlgbm_ft_as_ = metrics.accuracy_score(new_y_pred_train, y_train)\nlgbm_ft_as_","cba646c1":"log = LogisticRegression()\nlog.fit(X_train, y_train)\n\nlog_y_pred = log.predict(X_test)\nlog_y_pred_train = log.predict(X_train)","91a6d783":"log_test_as = metrics.accuracy_score(log_y_pred, y_test)\nlog_train_as = metrics.accuracy_score(log_y_pred_train, y_train)","8fe2b9e1":"print(f\"Accuracy score for test data : {log_test_as}\")\nprint(f\"Accuracy score for train data : {log_train_as}\")","0733e69e":"print(metrics.classification_report(log_y_pred, y_test))","924539a0":"metrics.confusion_matrix(log_y_pred, y_test)","b460e908":"metrics.confusion_matrix(log_y_pred_train, y_train)","a37a7ad4":"y_proba_log = log.predict_proba(X_test)[:, 1]\nfpr, tpr, threshold = metrics.roc_curve(y_test, y_proba_log)","c0b529d4":"plt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label = 'Logistic Regression')\nplt.xlabel('fpr')\nplt.ylabel('tpr')\nplt.title('ROC Curve')\nplt.legend();","24876baa":"metrics.roc_auc_score(y_test, y_proba_log)","88af39ee":"y_proba_log_train = log.predict_proba(X_train)[:, 1]\nmetrics.roc_auc_score(y_train, y_proba_log_train)","46fe9a16":"svc = SVC()\nsvc.fit(X_train, y_train)","07e930b4":"y_pred_svc = svc.predict(X_test)\ny_pred_train = svc.predict(X_train)\n\nsvc_train_as = metrics.accuracy_score(y_train, y_pred_train)\nsvc_as = metrics.accuracy_score(y_test, y_pred_svc)","8e46657a":"print(f\"Accuracy score for test data : {svc_as}\")\nprint(f\"Accuracy score for train data : {svc_train_as}\")","721d33ac":"print(metrics.classification_report(y_test, y_pred_svc))","d7870066":"sc = StandardScaler()\n\nX_train_sc = sc.fit_transform(X_train)\nX_test_sc = sc.transform(X_test)","17040107":"svc_sc = SVC()\nsvc_sc.fit(X_train_sc, y_train)\n\ny_pred_sc = svc_sc.predict(X_test_sc)\ny_pred_sc_train = svc_sc.predict(X_train_sc)\n\nsvc_sc_train_as = metrics.accuracy_score(y_train, y_pred_sc_train)\nsvc_sc_as = metrics.accuracy_score(y_test, y_pred_sc)","cba59d36":"print(f\"Accuracy score for test data : {svc_sc_as}\")\nprint(f\"Accuracy score for train data : {svc_sc_train_as}\")","49234f2f":"params = {'kernel' : ['rbf'], 'C' : [0.1, 1, 5, 10], 'gamma' : [0.01, 0.1, 0.9, 1]}\n\ngrid = GridSearchCV(SVC(), params, cv = 5, return_train_score= False)","b8dd92b8":"# grid.fit(X_train_sc, y_train)","56cfa913":"# grid.best_params_\n# best_params_ : [C = 1, gamma = 0.01, kernel = 'rbf']","ff90e655":"# grid.best_score_\n# best_score_ : 0.7968569389377085","74e3e519":"# svc_new = SVC(**grid.best_params_)\nsvc_new = SVC(C = 1, gamma = 0.01, kernel = 'rbf')\nsvc_new.fit(X_train_sc, y_train)\n\ny_pred_new = svc_new.predict(X_test_sc)\ny_pred_new_train = svc_new.predict(X_train_sc)\n\nsvc_new_train_as = metrics.accuracy_score(y_train, y_pred_new_train)\nsvc_new_as = metrics.accuracy_score(y_test, y_pred_new)\n\nprint(f\"Accuracy score for test data : {svc_new_as}\")\nprint(f\"Accuracy score for train data : {svc_new_train_as}\")","27d2df01":"metrics.plot_roc_curve(svc_new, X_train_sc, y_train)","665fa7b3":"testscores = []\ntrainscores = []\n\nfor i in range(1, 10):\n    model = KNeighborsClassifier(i)\n    model.fit(X_train, y_train)\n    \n    test_pred = model.predict(X_test)\n    train_pred = model.predict(X_train)\n    \n    testscores.append(metrics.accuracy_score(y_test, test_pred))\n    trainscores.append(metrics.accuracy_score(y_train, train_pred))","dd9c977b":"plt.plot(range(1, 10), testscores, label = 'Test Scores', color = 'red')\n\nplt.plot(range(1, 10), trainscores, label = 'Train Scores', color = 'blue')\n\nplt.legend();","ea7ea1e3":"knn = KNeighborsClassifier(8)\nknn.fit(X_train, y_train)\n\ny_pred_knn = knn.predict(X_test)\ny_pred_knn_train = knn.predict(X_train)","b83b940f":"knn_as = metrics.accuracy_score(y_test, y_pred_knn)\nknn_as_train = metrics.accuracy_score(y_train, y_pred_knn_train)","b6af7f7c":"print(f\"Accuracy score for test data : {knn_as}\")\nprint(f\"Accuracy score for train data : {knn_as_train}\")","7b4f08e7":"metrics.confusion_matrix(y_test, y_pred_knn)","126931de":"print(metrics.classification_report(y_test, y_pred_knn))","70d5a693":"y_proba = knn.predict_proba(X_test)[:, 1]\nfpr, tpr, threshold = metrics.roc_curve(y_test, y_proba)","f7350b67":"plt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label = 'KNN')\nplt.xlabel('fpr')\nplt.ylabel('tpr')\nplt.title('ROC Curve')\nplt.legend();","a05bd5b5":"metrics.roc_auc_score(y_test, y_proba)","067b9236":"metrics.confusion_matrix(y_pred_knn, y_test)","d72dd6d7":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, y_train)\n\ny_pred_dt = decision_tree.predict(X_test)\ny_pred_train_dt = decision_tree.predict(X_train)","9e4e5275":"dt_as = metrics.accuracy_score(y_test, y_pred_dt)\ndt_as_train = metrics.accuracy_score(y_train, y_pred_train_dt)\n\nprint(f\"Accuracy score for test data : {dt_as}\")\nprint(f\"Accuracy score for train data : {dt_as_train}\")","111ce02b":"random_forest = RandomForestClassifier()\nrandom_forest.fit(X_train, y_train)\n\ny_pred_rf = random_forest.predict(X_test)\ny_pred_train_rf = random_forest.predict(X_train)","e85058e8":"rf_as = metrics.accuracy_score(y_test, y_pred_rf)\nrf_as_train = metrics.accuracy_score(y_train, y_pred_train_rf)\n\nprint(f\"Accuracy score for test data : {rf_as}\")\nprint(f\"Accuracy score for train data : {rf_as_train}\")","7e7f4264":"random_forest_ = RandomForestClassifier(100)\nrandom_forest_.fit(X_train, y_train)\n\ny_pred_rf_ = random_forest_.predict(X_test)\ny_pred_train_rf_ = random_forest_.predict(X_train)","8c87ee83":"rf_as_ = metrics.accuracy_score(y_test, y_pred_rf_)\nrf_as_train_ = metrics.accuracy_score(y_train, y_pred_train_rf_)\n\nprint(f\"Accuracy score for test data : {rf_as_}\")\nprint(f\"Accuracy score for train data : {rf_as_train_}\")","e1c8e48c":"feature_importance_ = pd.DataFrame({'Importance' : RandomForestClassifier().fit(X, y).feature_importances_}, index = X.columns)\n\nfeature_importance_.sort_values(by = 'Importance', ascending = False, axis = 0)[:5].plot(kind = 'bar', color = '#019955', figsize = (10, 5))\nplt.xlabel(\"Feature Importance by Random Forest Classifier\", color = \"#019955\", fontdict= {\"fontsize\" : 20});","14e4d6b4":"X_train_new_ = X_train[['MonthlyCharges', 'TotalCharges', 'tenure', 'Contract_Month-to-month', 'OnlineSecurity_No']]\nX_test_new_ = X_test[['MonthlyCharges', 'TotalCharges', 'tenure', 'Contract_Month-to-month', 'OnlineSecurity_No']]","406434a9":"random_forest_new = RandomForestClassifier()\nrandom_forest_new.fit(X_train_new_, y_train)\n\ny_pred_rf_new = random_forest_new.predict(X_test_new_)\ny_pred_train_rf_new = random_forest_new.predict(X_train_new_)","b085cbab":"rf_as_new = metrics.accuracy_score(y_test, y_pred_rf_new)\nrf_as_train_new = metrics.accuracy_score(y_train, y_pred_train_rf_new)\n\nprint(f\"Accuracy score for test data : {rf_as_new}\")\nprint(f\"Accuracy score for train data : {rf_as_train_new}\")","505429ae":"params_grid = {'criterion' : ['entropy', 'gini'], 'max_depth' : [2, 4, 6, 8], 'n_estimators' : [300, 400, 500],\n              'min_samples_split' : [2, 4, 6, 8], 'min_samples_leaf' : [2, 3, 5, 7]}\n\ngscv_rf = GridSearchCV(RandomForestClassifier(), params_grid, cv = 3, scoring = 'f1')\n# gscv_rf.fit(X_train_sc, y_train)","28e10dc8":"# gscv_rf.best_params_\n# {'criterion': 'gini','max_depth': 8,'min_samples_leaf': 2,'min_samples_split': 8,'n_estimators': 400}","3eea054e":"# model tunning with best parameters\n\nrf_gscv =RandomForestClassifier(n_estimators = 400, criterion = 'gini', max_depth = 8, min_samples_split = 8, min_samples_leaf = 2)\nrf_gscv.fit(X_train_sc, y_train)\n\ny_pred_gsvc = rf_gscv.predict(X_test_sc)\ny_pred_gsvc_train = rf_gscv.predict(X_train_sc)\n\nrf_gscv_as = metrics.accuracy_score(y_test, y_pred_gsvc)\nrf_gscv_train_as = metrics.accuracy_score(y_train, y_pred_gsvc_train)\n\nprint(f\"Accuracy score for test data : {rf_gscv_as}\")\nprint(f\"Accuracy score for train data : {rf_gscv_train_as}\")","b59437e9":"metrics.confusion_matrix(y_test, y_pred_gsvc)","24ea4728":"metrics.confusion_matrix(y_train, y_pred_gsvc_train)","52560230":"xg = XGBClassifier()\nxg.fit(X_train_sc, y_train)\n\ny_pred_xg = xg.predict(X_test_sc)\n\ny_pred_xg_train = xg.predict(X_train_sc)\n\nxg_as = metrics.accuracy_score(y_test, y_pred_xg)\nxg_as_train = metrics.accuracy_score(y_train, y_pred_xg_train)\n\nprint(f\"Accuracy score of test data : {xg_as}\")\nprint(f\"Accuracy score of train data : {xg_as_train}\")","39ed34c4":"metrics.plot_confusion_matrix(xg, X_test_sc, y_test, display_labels= [1, 0]);","4e828520":"metrics.plot_roc_curve(xg, X_test_sc, y_test);","bfb907f8":"parameters = {'learning_rate' : [0.01, 0.03, 0.05], 'max_depth' : [1, 4, 6], 'n_estimators' : [100, 300, 400, 600]}","10c6bfda":"xg_grid = GridSearchCV(XGBClassifier(), parameters, cv = 5)","4f2c409e":"#\u00a0xg_grid.fit(X_train_sc, y_train)","f8b8b430":"# xg_grid.best_score_\n# 0.804287486519285","db6c7d2c":"# xg_grid.best_params_\n# {'learning_rate': 0.05, 'max_depth': 1, 'n_estimators': 600}","1da868b5":"# Parameters tunning\nxg_gridcv =XGBClassifier(learning_rate = .05, max_depth = 1, n_estimators = 600)\n\nxg_gridcv.fit(X_train_sc, y_train)\n\ny_pred_xggrid = xg_gridcv.predict(X_test_sc)\ny_pred_xggrid_train = xg_gridcv.predict(X_train_sc)\n\nxg_as_grid = metrics.accuracy_score(y_test, y_pred_xggrid)\nxg_as_grid_train = metrics.accuracy_score(y_train, y_pred_xggrid_train)\n\nprint(f\"Accuracy score of test data : {xg_as_grid}\")\nprint(f\"Accuracy score of train data : {xg_as_grid_train}\")","e2cff026":"# https:\/\/matplotlib.org\/examples\/color\/colormaps_reference.html #\nmetrics.plot_confusion_matrix(xg_gridcv, X_test_sc, y_test, cmap = 'cool', display_labels = [1, 0]);","e4c6cbc8":"metrics.plot_roc_curve(xg_gridcv, X_test_sc, y_test);","fb095252":"grad_boost = GradientBoostingClassifier()\n\ngrad_boost.fit(X_train_sc, y_train)\n\ny_pred_grad = grad_boost.predict(X_test_sc)\ny_pred_grad_train = grad_boost.predict(X_train_sc)\n\ngrad_as = metrics.accuracy_score(y_test, y_pred_grad)\ngrad_as_train = metrics.accuracy_score(y_train, y_pred_grad_train)\n\nprint(f\"Accuracy score of test data : {grad_as}\")\nprint(f\"Accuracy score of train data : {grad_as_train}\")","8154f641":"parameters_grad = {'learning_rate' : [0.01, 0.03, 0.05, 0.1], 'max_depth' : [1, 4, 6], 'n_estimators' : [100, 300, 400, 600, 800]}\n\ngrad_grid = GridSearchCV(GradientBoostingClassifier(), parameters_grad, cv = 5, scoring = 'f1')\n\n# grad_grid.fit(X_train_sc, y_train)","3df09879":"# grad_grid.best_params_\n# {'learning_rate': 0.1, 'max_depth': 1, 'n_estimators': 600}","52342a2e":"# grad_grid.best_score_\n# 0.5984668361905707","9c88c0b2":"# Parameter tunning\n\ngrad_grid_ = GradientBoostingClassifier(n_estimators = 600, max_depth = 1, learning_rate = .1)\n\ngrad_grid_.fit(X_train_sc, y_train)\n\ny_pred_grad_grid = grad_grid_.predict(X_test_sc)\ny_pred_grad_grid_train = grad_grid_.predict(X_train_sc)\n\ngrad_grid_as = metrics.accuracy_score(y_test, y_pred_grad_grid)\ngrad_grid_as_train = metrics.accuracy_score(y_train, y_pred_grad_grid_train)\n\nprint(f\"Accuracy score of test data : {grad_grid_as}\")\nprint(f\"Accuracy score of train data : {grad_grid_as_train}\")","85c0f52b":"metrics.plot_confusion_matrix(grad_grid_, X_test_sc, y_test, cmap = 'summer', display_labels = [0, 1]);","5b8a1a16":"metrics.plot_roc_curve(grad_grid_, X_test_sc, y_test);","0cee0b61":"log_sc = LogisticRegression()\nlog_sc.fit(X_train_sc, y_train)\n\ny_pred_log_sc = log_sc.predict(X_test_sc)\ny_pred_log_sc_ = log_sc.predict(X_train_sc)\n\nlog_sc_as = metrics.accuracy_score(y_test, y_pred_log_sc)\nlog_sc_as_ = metrics.accuracy_score(y_train, y_pred_log_sc_)\n\nprint(f\"Accuracy score of test data : {log_sc_as}\")\nprint(f\"Accuracy score of train data : {log_sc_as_}\")","f8210f60":"metrics.plot_confusion_matrix(log_sc, X_test_sc, y_test, cmap = 'GnBu', display_labels = [0, 1]);","82c35327":"print(\"Logistic Regression results : \\n\")\nprint(f\"Accuracy score of test data : {log_sc_as}\")\nprint(f\"Accuracy score of train data : {log_sc_as_}\\n\")\n\nprint(\"------------------------------------------------\")\n\nprint(\"KNN results : \\n\")\nprint(f\"Accuracy score for test data : {knn_as}\")\nprint(f\"Accuracy score for train data : {knn_as_train}\\n\")\n\nprint(\"------------------------------------------------\")\n\nprint(\"SVC result without parameter tunning : \\n\")\nprint(f\"Accuracy score for test data : {svc_sc_as}\")\nprint(f\"Accuracy score for train data : {svc_sc_train_as}\\n\")\nprint(\"SVC results with parameter tunning : \\n\")\nprint(f\"Accuracy score for test data : {svc_new_as}\")\nprint(f\"Accuracy score for train data : {svc_new_train_as}\\n\")\n\nprint(\"------------------------------------------------\")\n\nprint(\"LGBM results without parameter importance : \\n\")\nprint(f\"LGBM accuracy score for test data {lgbm_test_as}\")\nprint(f\"LGBM accuracy score for train data {lgbm_train_as}\\n\")\nprint(\"LGBM result with feature importance : \\n\")\nprint(f\"LGBM accuracy score for test data {lgbm_ft_as}\")\nprint(f\"LGBM accuracy score for train data {lgbm_ft_as_}\\n\")\n\nprint(\"------------------------------------------------\")\n\nprint(\"Decision Tree Classifier results with parameter importance : \\n\")\nprint(f\"Accuracy score for test data : {dt_as}\")\nprint(f\"Accuracy score for train data : {dt_as_train}\\n\")\n\nprint(\"------------------------------------------------\")\n\nprint(\"Random Forest Classifier without parameter tunning : \\n\")\nprint(f\"Accuracy score for test data : {rf_as}\")\nprint(f\"Accuracy score for train data : {rf_as_train}\\n\")\nprint(\"Random Forest Classifier with parameter tunning : \\n\")\nprint(f\"Accuracy score for test data : {rf_gscv_as}\")\nprint(f\"Accuracy score for train data : {rf_gscv_train_as}\\n\")\n\nprint(\"------------------------------------------------\")\n\nprint(\"XGBoost results without parameter tunning : \\n\")\nprint(f\"Accuracy score of test data : {xg_as}\")\nprint(f\"Accuracy score of train data : {xg_as_train}\\n\")\nprint(\"XGBoost results with parameter tunning : \\n\")\nprint(f\"Accuracy score of test data : {xg_as_grid}\")\nprint(f\"Accuracy score of train data : {xg_as_grid_train}\\n\")\n\nprint(\"------------------------------------------------\")\n\nprint(\"Gradient Boosting Classifier results without parameter tunning : \\n\")\nprint(f\"Accuracy score of test data : {grad_as}\")\nprint(f\"Accuracy score of train data : {grad_as_train}\\n\")\nprint(\"Gradient Boosting Classifier results with parameter tunning : \\n\")\nprint(f\"Accuracy score of test data : {grad_grid_as}\")\nprint(f\"Accuracy score of train data : {grad_grid_as_train}\")","1112479b":"To observe numerical, and numeric columns:","9709ae9d":"# Logistic Regression","172d104f":"# Model Building","1d9d47c8":"## Logistic Regression w\/ Scaled Data","4df0796b":"### Those with lower total charges have left the brand most.","89d4a463":"### Those who have registered with the brand for 1-8 years has higher number of leaving the brand.","a19b4846":"### There are people staying with this company for about 70 years. ","ab67a782":"# Feature Importance By LightGBM","d785104f":"# Decision Tree Classifier","cd2fd0b6":"# **What is Churn Prediction?**\n\nChurn prediction is analytical studies on the possibility of a customer abandoning a product or service. The goal is to understand and take steps to change it before the costumer gives up the product or service.\n\n## **About Data**\n\n#### customerID : Customer ID\n#### gender : Whether the customer is a male or a female\n#### SeniorCitizen : Whether the customer is a senior citizen or not (1, 0)\n#### Partner : Whether the customer has a partner or not (Yes, No)\n#### Dependents : Whether the customer has dependents or not (Yes, No)\n#### tenure : Number of months the customer has stayed with the company\n#### PhoneService : Whether the customer has a phone service or not (Yes, No)\n#### MultipleLines : Whether the customer has multiple lines or not (Yes, No, No phone service)\n#### InternetService : Customer\u2019s internet service provider (DSL, Fiber optic, No)\n#### OnlineSecurity : Whether the customer has online security or not (Yes, No, No internet service)\n#### OnlineBackup : Whether the customer has online backup or not (Yes, No, No internet service)\n#### DeviceProtection : Whether the customer has device protection or not (Yes, No, No internet service)\n#### TechSupport : Whether the customer has tech support or not (Yes, No, No internet service)\n#### StreamingTV : Whether the customer has streaming TV or not (Yes, No, No internet service)\n#### StreamingMovies : Whether the customer has streaming movies or not (Yes, No, No internet service)\n#### Contract : The contract term of the customer (Month-to-month, One year, Two year)\n#### PaperlessBilling : Whether the customer has paperless billing or not (Yes, No)\n#### PaymentMethod : The customer\u2019s payment method (Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic))\n#### MonthlyCharges : The amount charged to the customer monthly\n#### TotalCharges : The total amount charged to the customer\n#### Churn : Whether the customer churned or not (Yes or No)","a45b52fa":"# XGBoost","ac260630":"TotalCharges columns has numeric values but looks object type.","ceada0ff":"### Those who have month-to-month contract have a higher number of leaving the brand.","ada69530":"### Splitting the Data","1c8ab6e4":"Model building with all features:","353b0074":"Nothing has changed again.","06635d44":"### There is not much difference in the number of times people with or without multiple lines leaving the brand.","15579305":"Since, we have 11 null values in dataset, either we can fill them, or remove them. 11 is a low number, so I will drop them.","a64248a8":"Let's try after scaling the data.","d010cb07":"***Let's try with gridsearchcv to find best parameters.***","f484bb0b":"We can choose k as 8.","606d9e6f":"#### Accuracy score between train and test data is slightly high.","78506b9d":"### Those who do not have online protection have a higher number of leaving the brand.","e70f3333":"**Now, we do not have an overfitting problem!**","2eb3cf78":"Checking unique values of every column:","a3498e34":"![image.png](https:\/\/s16353.pcdn.co\/wp-content\/uploads\/2018\/06\/Churn.png)","53c27b0e":"Let's try again with the new features that we got above.","5c599702":"# Random Forest Classifier","77001d8d":"# KNN","8812e9fe":"Creating ones, and zeros from categorical variables:","3b5d68b5":"Now, looks good!","a42e3cd2":"# SVC","ddcc5dab":"# Gradient Boosting Classifier","3d74493b":"**Churn columns is not there because its dtype is object. Converting objects into a numeric.**","84de07f4":"Checking the features that are most important for LGBM:","cc1aec94":"Checking feature importance for random forest classifier:","5966ca9c":"Creating a for loop to see cross validation scores for every model above:","8e39b486":"Not much thing has changed actually. We couldn't improve our model like we want it to be.","e666543f":"Model tunning with the best params.","9cb520fa":"### Most of the customer has low monthly charge.","43ca1006":">  * We use KNN, Decision Tree Classifier, Random Forest Classifier, XGBoost Classifier, LGBM, Gradien Boosting Classifier, SVC, and Logistic Regressin.","469c19ab":"### Those who don't have online backup have a higher number of leaving the brand."}}