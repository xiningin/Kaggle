{"cell_type":{"bc597c12":"code","66291742":"code","963365ff":"code","13c3e2a6":"code","8e6031b0":"code","352a5d55":"code","c135448d":"code","64f5f1d0":"code","4800fe7b":"code","49aef529":"code","dc9fe8b6":"code","40337e28":"code","dab9b383":"code","8622dabd":"code","c8654798":"code","3ed4a88c":"code","0fd1b4c1":"code","9dc66516":"code","e983494c":"code","bf46aa37":"code","52b2faef":"code","beb8634a":"code","6d08ef00":"code","22f65051":"code","596d681a":"code","11e72c20":"code","ab3e7461":"code","090bfa3f":"code","3488c612":"code","34ac3b8a":"code","f5d5cc75":"code","bc96b687":"code","f9428821":"code","0d327b5f":"code","f8bb0b00":"code","a9fe5098":"code","490b14eb":"markdown","607c07ff":"markdown"},"source":{"bc597c12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66291742":"data= pd.read_csv('..\/input\/data-train\/train.tsv', sep=\"\\t\")","963365ff":"data","13c3e2a6":"data.info()","8e6031b0":"data.dtypes","352a5d55":"import seaborn as sns\nsns.catplot(y=\"Sentiment\", kind=\"count\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=data)","c135448d":"data['Sentiment'].value_counts()","64f5f1d0":"y_train = data['Sentiment']","4800fe7b":"first_class = y_train[y_train == 0]\nsecond_class = y_train[y_train == 1]\nthird_class = y_train[y_train == 2]\nforth_class = y_train[y_train == 3]\nfifth_class = y_train[y_train == 4]\n\nprint('',len(first_class),'\\n',len(second_class), '\\n',len(third_class), '\\n', len(forth_class), '\\n', \n      len(fifth_class) )\n\n\n\n","49aef529":"second_class = second_class[0:len(first_class)]\nthird_class  = third_class[0:len(first_class)]\nforth_class  = forth_class[0:len(first_class)]\nfifth_class  = fifth_class[0:len(first_class)]","dc9fe8b6":"text_first_class  = data[['Phrase','Sentiment']]  [y_train==0]\ntext_second_class = data[['Phrase','Sentiment']]  [y_train==1]\ntext_third_class  = data[['Phrase','Sentiment']]  [y_train==2]\ntext_forth_class  = data[['Phrase','Sentiment']]  [y_train==3]\ntext_fifth_class  = data[['Phrase','Sentiment']]  [y_train==4]\n\nprint('',len(text_first_class),'\\n',len(text_second_class), '\\n',len(text_third_class), '\\n', len(text_forth_class), '\\n', \n      len(text_fifth_class) )","40337e28":"text_second_class = text_second_class[0:len(text_first_class)]\ntext_third_class  = text_third_class [0:len(text_fifth_class)]\ntext_forth_class  = text_forth_class [0:len(text_first_class)]\ntext_fifth_class  = text_fifth_class [0:len(text_first_class)]","dab9b383":"frames = [text_first_class, text_second_class, text_third_class, text_forth_class, text_fifth_class]\nnew_train = pd.concat(frames)","8622dabd":"sns.catplot(y=\"Sentiment\", kind=\"count\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=new_train)","c8654798":"new_train","3ed4a88c":"X = new_train['Phrase'].values\ntype(X)\n","0fd1b4c1":"y = new_train['Sentiment'].values","9dc66516":"y.shape,X.shape","e983494c":"import tensorflow as tf\nimport keras","bf46aa37":"from tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences","52b2faef":"vocab_size = 10000\nembedding_dim = 32\nmax_length = 150\ntrunc_type='post'\npadding_type='post'\noov_tok = \"<OOV>\"","beb8634a":"tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok)\ntokenizer.fit_on_texts(X)\n\nword_index = tokenizer.word_index\n\ntraining_sequences = tokenizer.texts_to_sequences(X)\ntraining_padded = pad_sequences(training_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n\n","6d08ef00":"import numpy as np\ntraining_padded = np.array(training_padded)\ntraining_padded.shape\ny = y.reshape((37494,1))\ny.shape\ny","22f65051":"model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences=True)),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(32, activation='relu'),\n    tf.keras.layers.Dense(5, activation='softmax')\n])\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n\nmodel.summary()","596d681a":"num_epochs = 50\n\nhistory = model.fit(training_padded, y, epochs=num_epochs)","11e72c20":"%matplotlib inline\nimport matplotlib.pyplot as plt\nacc = history.history['accuracy']\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.title('Training accuracy')\nplt.legend()\nplt.figure()\n\nloss = history.history['loss']\nplt.plot(epochs, loss, 'b', label='Training Loss')\nplt.title('Training loss')\nplt.legend()\n\nplt.show()","ab3e7461":"test_data = pd.read_csv('..\/input\/datatest\/test.tsv', sep=\"\\t\")","090bfa3f":"test_data","3488c612":"X_test = test_data['Phrase']\nX_test.shape[0]","34ac3b8a":"X_test = X_test.reshape(X_test.shape[0],1)\nX_test.shape\ntype(X_test)","f5d5cc75":"testing_sequences = tokenizer.texts_to_sequences(X_test)\ntesting_padded = pad_sequences(testing_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)","bc96b687":"testing_padded.shape","f9428821":"prediction = []\n\npredictions = model.predict(testing_padded)","0d327b5f":"predictions\n","f8bb0b00":"for i in predictions:\n    prediction.append(np.argmax(i))","a9fe5098":"submission =  pd.DataFrame({\n        \"PhraseId\":test_data.PhraseId ,\n        \"Sentiment\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","490b14eb":"***We can see clearly there is data-imbalance, between different classes we should solve this problem, in order to prevent the algorithm from being trained on (skewed dataset), we can make the data uniform, we reduce the number of samples to the length of first_class, which is minimum.***","607c07ff":"***We filter split each class from the data-frame then we will reduce the size of each class to be the same after all***"}}