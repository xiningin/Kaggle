{"cell_type":{"2cf0d127":"code","10f2ce53":"code","29b357fe":"code","4b92bcff":"code","213d0093":"code","94613b09":"code","fa373fc3":"code","d5098092":"code","a185dc83":"code","4c7a32aa":"code","0a1cec52":"code","7d4c4cf8":"code","1053b401":"code","e3bdbb19":"code","dd1c4014":"code","40275c79":"code","caa9fc07":"code","cc25ee83":"code","873a8744":"code","61215806":"code","04d2e113":"code","e31cb467":"code","e30a20a2":"code","86b63f5d":"code","8fa70d19":"code","19d0fee0":"code","803ae23b":"code","2302f833":"code","805d0259":"code","c5ae9ad9":"code","5a66cf54":"code","abf82548":"code","d184eae3":"code","e760a4e2":"code","1be14316":"code","2d3accfe":"code","7980ebd7":"code","0702114a":"code","8952ba9e":"code","06f73239":"code","75625e08":"code","6f84882f":"code","5349600b":"code","828e9e24":"code","5dccec87":"code","38e11936":"code","82e16122":"code","0be2b3a0":"code","6b875729":"code","280c0f7a":"code","9b1bd76a":"code","c0851ab1":"code","55c4750e":"code","b39217b3":"code","f3b371c7":"code","a75bb996":"code","416eb89f":"code","9a5a7b78":"code","cdf53c0d":"code","d5b18056":"code","02658cbe":"code","7d8270f9":"code","39334faa":"code","c726999d":"code","3ea15fa2":"code","ad30be11":"code","fbd61321":"code","53077a0b":"code","f9448042":"code","0f3c6b9d":"code","43997bd8":"code","c900218f":"code","a182a320":"code","2108ead2":"code","b7d21a3d":"code","d0f6cc47":"code","385b0593":"code","8fc3c275":"code","e376ff4b":"code","d3edc798":"code","58acf9f0":"code","7bd2ea25":"code","d1e1ff36":"code","244802a6":"code","9a4aad0c":"code","ac44630f":"code","b1a6d3f3":"code","0b875f36":"code","18c1894a":"markdown","882ddbaf":"markdown","0d63e1d9":"markdown","a552c847":"markdown","0bc1d198":"markdown","b26614a5":"markdown","91ab0419":"markdown","d2005dd5":"markdown","4aa005d0":"markdown","3f02cc7c":"markdown","fe760984":"markdown","3bbd8c79":"markdown","dbf95f65":"markdown","47c1b763":"markdown","0fdfd7f3":"markdown","c47accc5":"markdown","5ad5cce4":"markdown","3a10ed31":"markdown","c90154c1":"markdown","00d153e4":"markdown","f8e9e151":"markdown","89c3ddc4":"markdown","caeb5f7f":"markdown","d0fa6d9b":"markdown","0d278ce3":"markdown","c5577173":"markdown","3e590e79":"markdown","780bf2a2":"markdown","dd88996f":"markdown","566bd4bc":"markdown","b4e20276":"markdown","490034ab":"markdown","8586504c":"markdown","7446cc51":"markdown","33e94e08":"markdown","b5c8f7c5":"markdown","b440cf36":"markdown","4b279ba8":"markdown","4dce6092":"markdown","7277b071":"markdown","b38bbb47":"markdown","22b38be3":"markdown","208a5289":"markdown","1e307796":"markdown","32a11613":"markdown","0f47e103":"markdown","9f848702":"markdown","17530c2b":"markdown","d021bd5d":"markdown","b95758cf":"markdown","aa4f53ef":"markdown","32d110c0":"markdown","19c01278":"markdown","ee193276":"markdown","7d7b459a":"markdown","8009c3df":"markdown","3868c159":"markdown","51de5910":"markdown","03fa77c5":"markdown","bd55f628":"markdown","1c5c5f87":"markdown"},"source":{"2cf0d127":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","10f2ce53":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","29b357fe":"train_df.columns","4b92bcff":"train_df.info()","213d0093":"def bar_plot(variable):\n    \"\"\"\n    input: Variable, ex: \"Sex\"\n    output: Bar plot & Variable count\n    \n    \"\"\"\n    #get feature\n    var = train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","94613b09":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","fa373fc3":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","d5098092":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} Distribution with Histogram\".format(variable))\n    plt.show()","a185dc83":"NumericVar = [\"Fare\",\"Age\", \"PassengerId\"]\nfor c in NumericVar:\n    plot_hist(c)","4c7a32aa":"# Pclass - Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\", ascending= False)","0a1cec52":"# Sex - Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index= False).mean().sort_values(by= \"Survived\",ascending=False)","7d4c4cf8":"# SibSp - Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by = \"Survived\", ascending=False)","1053b401":"# Parch - Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","e3bdbb19":"def detect_outliers(df,features):\n    outlier_indices=[]\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # Detect outliers and their indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # Store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i , v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers","dd1c4014":"train_df.loc[detect_outliers(train_df, [\"Age\", \"SibSp\",\"Parch\",\"Fare\"])]","40275c79":"# Drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df, [\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","caa9fc07":"train_df.loc[detect_outliers(train_df, [\"Age\", \"SibSp\",\"Parch\",\"Fare\"])]","cc25ee83":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","873a8744":"train_df.columns[train_df.isnull().any()]","61215806":"train_df.isnull().sum()","04d2e113":"train_df[train_df[\"Embarked\"].isnull()]","e31cb467":"train_df.boxplot(column = \"Fare\", by = \"Embarked\")\nplt.show()","e30a20a2":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","86b63f5d":"train_df[train_df[\"Embarked\"].isnull()]","8fa70d19":"train_df[train_df[\"Fare\"].isnull()]","19d0fee0":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","803ae23b":"train_df[train_df[\"Fare\"].isnull()]","2302f833":"train_df","805d0259":"list1=[\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Pclass\", \"Survived\"]\nf, ax=plt.subplots(figsize=(11,9))\nsns.heatmap(train_df[list1].corr(), annot=True, fmt=\" .2f\", ax=ax)\nplt.show()","c5ae9ad9":"g=sns.factorplot(x=\"SibSp\", y=\"Survived\", data=train_df, size=6, kind=\"bar\")\ng.set_ylabels(\"Possibility of Survival\")\nplt.show()","5a66cf54":"g=sns.factorplot(data=train_df, x=\"Parch\", y=\"Survived\", kind=\"bar\", size=6)\ng.set_ylabels(\"Possibility of Survival\")\nplt.show()","abf82548":"g=sns.factorplot(data=train_df, kind=\"bar\", x=\"Pclass\", y=\"Survived\", size=6)\ng.set_ylabels(\"Possibility of Survival\")\nplt.show()","d184eae3":"g=sns.FacetGrid(train_df, col=\"Survived\", height=5)\ng.map(sns.distplot, \"Age\", bins=25)\nplt.show()","e760a4e2":"g=sns.FacetGrid(train_df, col=\"Survived\", row=\"Pclass\", size=3)\ng.map(plt.hist, \"Age\", bins=25)\ng.add_legend()\nplt.show()","1be14316":"g=sns.FacetGrid(train_df, \"Embarked\", size=3)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","2d3accfe":"g=sns.FacetGrid(train_df, col=\"Survived\", row=\"Embarked\", size=3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","7980ebd7":"train_df[train_df.Age.isnull()]","0702114a":"sns.factorplot(data=train_df, x=\"Sex\", y=\"Age\", kind=\"box\")\nplt.show()","8952ba9e":"sns.factorplot(data=train_df, x=\"Pclass\", y=\"Age\", hue=\"Sex\", kind=\"box\")\nplt.show()","06f73239":"sns.factorplot(data=train_df, x=\"Parch\", y=\"Age\", kind=\"box\")\nsns.factorplot(data=train_df, x=\"SibSp\", y=\"Age\", kind=\"box\")\nplt.show()","75625e08":"train_df[\"Sex01\"]=[1 if i==\"male\" else 0 for i in train_df.Sex]","6f84882f":"sns.heatmap(train_df[[\"Age\", \"Sex01\", \"Pclass\", \"SibSp\", \"Parch\"]].corr(), annot=True)\nplt.show()","5349600b":"index_nan_age=list(train_df[train_df.Age.isnull()].index)\nfor i in index_nan_age:\n    age_pred=train_df.Age[((train_df.SibSp==train_df.iloc[i].SibSp)&(train_df.Pclass==train_df.iloc[i].Pclass)&(train_df.Parch==train_df.iloc[i].Parch))].median()\n    age_med=train_df.Age.median()\n    if not np.isnan(age_pred):\n        train_df.Age.iloc[i]=age_pred\n    else:\n        train_df.Age.iloc[i]=age_med","828e9e24":"train_df[train_df.Age.isnull()]","5dccec87":"train_df.Name","38e11936":"Title=[i.split(\".\")[0].split(\",\")[-1].strip() for i in train_df.Name]\ntrain_df[\"Title\"]=Title","82e16122":"f,ax=plt.subplots(figsize=(18,7))\nsns.countplot(x=train_df.Title)\nplt.show()","0be2b3a0":"train_df.Title=train_df.Title.replace([\"Don\", \"Rev\", \"Dr\", \"Mme\", \"Major\", \"Lady\", \"Sir\", \"Col\", \"Capt\", \"the Countess\", \"Jonkheer\", \"Dona\"], \"Other\")","6b875729":"train_df.Title.unique()","280c0f7a":"new_title=[]\nfor i in train_df.Title:\n    if i==\"Master\":\n        new_title.append(0)\n    elif i==\"Miss\" or i==\"Mrs\" or i==\"Ms\" or i==\"Mlle\":\n        new_title.append(1)\n    elif i==\"Mr\":\n        new_title.append(2)\n    elif i==\"Other\":\n        new_title.append(3)\nset(new_title)","9b1bd76a":"train_df.Title=new_title","c0851ab1":"f,ax=plt.subplots(figsize=(18,7))\nsns.countplot(x=train_df.Title)\nplt.show()","55c4750e":"g=sns.factorplot(x=\"Title\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_xticklabels([\"Master\", \"Mrs\", \"Mr\", \"Other\"])\ng.set_ylabels(\"Survival Possibility\")\nplt.show()","b39217b3":"train_df=pd.get_dummies(train_df, columns=[\"Title\"])","f3b371c7":"train_df.head()","a75bb996":"train_df[\"Fsize\"]=train_df.Parch+train_df.SibSp+1","416eb89f":"g=sns.factorplot(x=\"Fsize\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survival Possibility\")\nplt.show()","9a5a7b78":"new_fsize=[]\nfor each in train_df.Fsize:\n    if each<=4:\n        new_fsize.append(1)\n    elif each>4:\n        new_fsize.append(0)\ntrain_df[\"family_size\"]=new_fsize","cdf53c0d":"train_df","d5b18056":"g=sns.factorplot(x=\"family_size\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survival Possibility\")\nplt.show()","02658cbe":"train_df=pd.get_dummies(train_df, columns=[\"family_size\"])","7d8270f9":"train_df=pd.get_dummies(train_df, columns=[\"Embarked\"])","39334faa":"train_df.Ticket","c726999d":"new_ticket=[]\nfor each in train_df.Ticket:\n    if not each.isdigit():\n        new_ticket.append(each.replace(\".\", \"\").replace(\"\/\", \"\").strip().split(\" \")[0])\n    else:\n        new_ticket.append(\"x\")\ntrain_df[\"Ticket\"]=new_ticket","3ea15fa2":"train_df=pd.get_dummies(train_df, columns=[\"Ticket\"], prefix=\"T\")","ad30be11":"sns.countplot(x=\"Pclass\", data=train_df)\nplt.show()","fbd61321":"train_df=pd.get_dummies(train_df, columns=[\"Pclass\"])","53077a0b":"train_df=pd.get_dummies(train_df, columns=[\"Sex\"])","f9448042":"train_df.drop(\"Sex01\", axis=1, inplace=True)","0f3c6b9d":"train_df","43997bd8":"train_df.drop([\"PassengerId\", \"Cabin\"], axis=1, inplace=True)","c900218f":"train_df","a182a320":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","2108ead2":"train_df_len","b7d21a3d":"train_data=train_df[:train_df_len]","d0f6cc47":"len(train_data)","385b0593":"test_data=train_df[train_df_len:]","8fc3c275":"len(test_data)","e376ff4b":"x=train_data.drop([\"Survived\", \"Name\", \"SibSp\", \"Parch\"], axis=1)\ny=train_data[\"Survived\"]\nx_train, x_test, y_train, y_test=train_test_split(x, y, test_size=0.3, random_state=42)","d3edc798":"x_train","58acf9f0":"logreg=LogisticRegression()\nlogreg.fit(x_train, y_train)\ntrain_acc=round(logreg.score(x_train, y_train)*100,3)\ntest_acc=round(logreg.score(x_test, y_test)*100,3)\nprint(\"Training Accuracy:\", train_acc, \"%\")\nprint(\"Test Accuracy:\", test_acc, \"%\")","7bd2ea25":"rs=42\nclassifier=[DecisionTreeClassifier(random_state=rs),\n           SVC(random_state=rs),\n           RandomForestClassifier(random_state=rs),\n           KNeighborsClassifier(),\n           LogisticRegression(random_state=rs)]\n\ndt_param_grid={\"min_samples_split\": range(10,500,20), \n               \"max_depth\": range(1,20,2)}\n\nsvc_param_grid={\"kernel\": [\"rbf\"], \n               \"gamma\": [0.001, 0.01, 0.1, 1],\n               \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid={\"max_features\": [1,3,10],\n              \"min_samples_split\": [2,3,10],\n              \"min_samples_leaf\": [1,3,10],\n              \"bootstrap\": [False],\n              \"n_estimators\": [100,300],\n              \"criterion\": [\"gini\"]}\n\nknn_param_grid={\"n_neighbors\": np.linspace(1,19,10, dtype=int).tolist(),\n               \"weights\": [\"distance\", \"uniform\"],\n               \"metric\": [\"euclidean\", \"manhattan\"]}\n\nlogreg_param_grid={\"C\": np.logspace(-3,3,7),\n                  \"penalty\": [\"l1\", \"l2\"]}\n\nclassifier_param=[dt_param_grid, svc_param_grid, rf_param_grid, knn_param_grid, logreg_param_grid]","d1e1ff36":"cv_result=[]\nbest_estimators=[]\nfor i in range(len(classifier)):\n    clf=GridSearchCV(classifier[i], param_grid=classifier_param[i], cv=StratifiedKFold(n_splits=10), scoring=\"accuracy\", n_jobs=-1, verbose=1)\n    clf.fit(x_train, y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","244802a6":"cv_result=[100*each for each in cv_result]","9a4aad0c":"results=pd.DataFrame({\"Cross Validation Best Scores\": cv_result, \"ML Models\": [\"DecisionTreeClassifier\", \"SVM\", \"RandomForestClassifier\", \"KNeighborsClassifier\", \"LogisticRegression\"]})\nf,ax=plt.subplots(figsize=(12,7))\ng = sns.barplot(data=results, y=\"ML Models\", x=\"Cross Validation Best Scores\")\ng.set_ylabel(\"\")\ng.set_xlabel(\"Accuracy %\")\nplt.show()\nfor i in range(len(results)):\n    print(results[\"ML Models\"][i], \"Accuracy:\", results[\"Cross Validation Best Scores\"][i], \"%\")","ac44630f":"voting_c=VotingClassifier(estimators=[(\"dt\", best_estimators[0]), (\"rf\", best_estimators[2]), (\"lr\", best_estimators[4])],\n                         voting=\"soft\", n_jobs=-1)\nvoting_c=voting_c.fit(x_train, y_train)\nprint(\"Accuracy:\", 100*accuracy_score(voting_c.predict(x_test), y_test), \"%\")","b1a6d3f3":"test=test_data.drop([\"Survived\", \"Name\", \"Parch\", \"SibSp\"], axis=1)\ntest_survived=pd.Series(voting_c.predict(test), name=\"Survived\").astype(int)\nresults=pd.concat([test_PassengerId, test_survived], axis=1)","0b875f36":"results.to_csv(\"submission.csv\", index=False)","18c1894a":"The passengers whose \"Embarked\" values are missing paid 80.0 for tickets and according to boxplot,the median of \"Fare\" of the passengers embarked from C port is the closest to 80, so we can say that these passengers embarked from C. This possibility is high enough to make a change on \"Embarked\" values of these passengers.","882ddbaf":"* Female passengers have higher rate than males\n* Male passengers' highest chance of survival is in Embarked=C ,Pclass=3","0d63e1d9":"According to this chart, the passengers whose \"Parch\" value is higher than 3 have a low chance of survival. Also whose value is 0 have a lower chance than the ones with 1,2,3 values.","a552c847":"* float64(2): Fare and Age\n* int64(5): Pclass, SibSp, Parch, PassengerId and Survived\n* object(5): Cabin, Embarked, Ticket, Name and Sex","0bc1d198":"<a id=\"1\" ><\/a><br>\n# Load and Check Data","b26614a5":"<a id=\"28\" ><\/a><br>\n## Drop Passenger ID and Cabin","91ab0419":"<a id=\"11\" ><\/a><br>\n# Visualization","d2005dd5":"<a id=\"30\" ><\/a><br>\n## Train - Test Split","4aa005d0":"The filling of the values is successful.","3f02cc7c":"This chart shows the relation between Sibling or Spouse number and survival possibility(percentage).","fe760984":"Age values are totally filled now.","3bbd8c79":"* There is a correlation between \"Fare\" and \"Survived\" (0.26).\n* There is a negative correlaation between \"Pclass\" and \"Survived\" (-0.33).","dbf95f65":"<a id=\"12\" ><\/a><br>\n## Correlation Between SibSp -- Parch -- Age -- Fare -- Pclass -- Survived","47c1b763":"The values below \"Survived\" column are the percentages of the possibilty of survival of each gender.\n\n* Survival Possibility of a Male: 18.89%\n* Survival Possibility of a Female: 74.20%","0fdfd7f3":"<a id=\"8\" ><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","c47accc5":"<a id=\"25\" ><\/a><br>\n## Ticket","5ad5cce4":"If the passenger is in class 3 we can fill the \"Fare\" value with average of \"Fare\" of class 3 tickets.","3a10ed31":"* According to the first chart, it is possible to seperate passengers about Parch in two: Parch =< 2 is Approximate Average=25, Parch > 2 Approximate Average=45\n* According to the second chart, it is possible to seperate passengers about SibSp in two: SibSp =< 2 is Approximate Average=25, SibSp > 2 Approximate Average=10","c90154c1":"<a id=\"2\" ><\/a><br>\n# Variable Description\n1. PassengerId: Unique ID number for each passenger\n1. Survived: Have passenger survived(1) or died(0)\n1. Pclass: Passenger class\n1. Name: Name of the passenger\n1. Sex: Sex of the passenger\n1. Age: Age of the passenger\n1. SibSp: Number of siblings or spouses of passenger\n1. Parch: Number of parents or children of passenger\n1. Ticket: Ticket number of passenger\n1. Fare: The cost of ticket\n1. Cabin: The name of the cabin of the passenger\n1. Embarked: The port which passengers embarked","00d153e4":"<a id=\"13\" ><\/a><br>\n## SibSp -- Survived Correlation Analysis","f8e9e151":"<a id=\"27\" ><\/a><br>\n## Sex","89c3ddc4":"<a id=\"17\" ><\/a><br>\n## Pclass -- Age -- Survived Correlation Analysis","caeb5f7f":"These are the columns which include missing values.","d0fa6d9b":"This chart shows the relation between Parent or Children number and survival possibility(percentage).","0d278ce3":"<a id=\"31\" ><\/a><br>\n## Simple Logistic Regression","c5577173":"Sex feature is not useful for age prediction because medians are very close.","3e590e79":"There is a clear negative correlation between \"Pclass\" and \"Survived\".","780bf2a2":"# Introduction\n  Titanic is a ship which sank in 1912 beacuse of an iceberg and had been grave fo hundreds of people.\n  \n<font color = \"blue\">\nContent:\n\n1. [Load and Check Data](#1)\n2. [Variable Desription](#2)\n   * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Pclass -- Survived](#12)\n    * [SibSp -- Survived Correlation Analysis](#13)\n    * [Parch -- Survived Correlation Analysis](#14)\n    * [Pclass -- Survived Correlation Analysis](#15)\n    * [Age -- Survived Correlation Analysis](#16)\n    * [Pclass -- Age -- Survived Correlation Analysis](#17)\n    * [Embarked -- Sex -- Pclass -- Survived Correlation Analysis](#18)\n    * [Embarked -- Sex -- Fare -- Survived Correlation Analysis](#19)\n    * [Fill Mising Value: Age](#20)\n7. [Feature Engineering](#21)\n    * [Name - Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n8. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","dd88996f":"<a id=\"14\" ><\/a><br>\n## Parch -- Survived Correlation Analysis","566bd4bc":"<a id=\"21\" ><\/a><br>\n# Feature Engineering","b4e20276":"<a id=\"15\" ><\/a><br>\n## Pclass -- Survived Correlation Analysis","490034ab":"* Embarked has 2 missing values.\n* Fare has 1 missing value.\n* Cabin and Age will be filled later.\n* Missing values below \"Survived\" column are from test data frame.","8586504c":"<a id=\"7\" ><\/a><br>\n# Outlier Detection","7446cc51":"<a id=\"3\" ><\/a><br>\n## Unvariate Variable Analysis\n* Categorical Variable\n* Numerical Variable","33e94e08":"<a id=\"18\" ><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived Correlation Analysis","b5c8f7c5":"<a id=\"34\" ><\/a><br>\n## Prediction and Submission","b440cf36":"<a id=\"22\" ><\/a><br>\n## Name - Title","4b279ba8":"<a id=\"16\" ><\/a><br>\n## Age -- Survived Correlation Analysis","4dce6092":"* It is possible to say that children are mostly survived\n* Passengers over 80 survived\n* Most of passengers around 20 and 35 didn't survive\n* A big part of passengers are 15-35 years old","7277b071":"<a id=\"20\" ><\/a><br>\n## Fill Mising Value: Age","b38bbb47":"<a id=\"9\" ><\/a><br>\n## Find Missing Value","22b38be3":"<a id=\"32\" ><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n* Decision Trees\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","208a5289":"It is clear that, \"Pclass\" quality has correlation with survival possibility.","1e307796":"These passengers' values might be filled by using \"Fare\" values. Because \"Fare\" are same for each. It should be checked by a boxplot.","32a11613":"<a id=\"19\" ><\/a><br>\n## Embarked -- Sex -- Fare -- Survived Correlation Analysis","0f47e103":"<a id=\"23\" ><\/a><br>\n## Family Size","9f848702":"Age is negatively correlated with Pclass, SibSp, Parch, not correlated with sex.","17530c2b":"<a id=\"24\" ><\/a><br>\n## Embarked","d021bd5d":"<a id=\"26\" ><\/a><br>\n## Pclass","b95758cf":"<a id=\"29\" ><\/a><br>\n# Modeling","aa4f53ef":"The values below \"Survived\" column are the percentages of the possibilty of survival of each class.\n\n* Survival Possibility of a First Class Survival Possibility: 62.96%\n* Survival Possibility of a Second Class Survival Possibility: 47.28%\n* Survival Possibility of a Third Class Passenger: 24.23%","32d110c0":"<a id=\"10\" ><\/a><br>\n## Fill Mising Value","19c01278":"The class number and age is clearly negative correlated. (Age of 1st Class Passengers > 2nd > 3rd)","ee193276":"<a id=\"5\" ><\/a><br>\n### Numerical Variable","7d7b459a":"<a id=\"6\" ><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived \n* SibSp - Survived\n* Parch - Survived","8009c3df":"According to chart it is possible to consider the passengers whose \"SibSp\" value is higher than 2 have a lower chance of survival.\n\nSibSp < 2 --> High Chance of Survival","3868c159":"As we can see, there are no outliers anymore.","51de5910":"There is a correlation between \"Fare\" and survival possibility, especially in C and Q.","03fa77c5":"<a id=\"33\" ><\/a><br>\n## Ensemble Modeling","bd55f628":"<a id=\"4\" ><\/a><br>\n### Categorical Variable","1c5c5f87":"Filling of the value is successfull."}}