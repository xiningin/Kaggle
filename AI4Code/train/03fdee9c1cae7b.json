{"cell_type":{"2b7b5e78":"code","0bc9530a":"code","a632457a":"code","647667a9":"code","c649c40b":"code","da1fdbea":"code","faf255a0":"code","95cde8d6":"code","002247f8":"code","119caacb":"code","16a41501":"code","6fbd176c":"code","9e3c7103":"code","4ee9017f":"code","4c809f5c":"code","d302c892":"code","62e04c36":"code","fee2ec8b":"code","dd2356d2":"code","f635ecd1":"code","9b299fd3":"code","ba323b07":"code","3572dde8":"code","47f2d9e2":"code","1021d798":"code","aac6db89":"code","426ca2ac":"code","4226c5e5":"code","76c3b1ee":"code","9670e74c":"code","0d1482bd":"code","f348ed5d":"code","43ed9cde":"code","65ea1f68":"code","17fe7ac4":"code","2af9faae":"code","2bf65a3c":"markdown","26b4abcd":"markdown","edaaaad1":"markdown","eea9a3c1":"markdown","b4c83e63":"markdown","df07fa7f":"markdown","17fa85ab":"markdown","4ad21930":"markdown","f5b7cf60":"markdown","36e04eed":"markdown","b6ce2120":"markdown","52b1cb0d":"markdown","a2be9a7c":"markdown","731ace9d":"markdown","7ff001f7":"markdown","62e912d4":"markdown","b3a2539f":"markdown","d16ae7e5":"markdown","e0bd8d9b":"markdown","0966f3ae":"markdown","59af8a3d":"markdown","9fb6f394":"markdown","67816e67":"markdown","1fbba719":"markdown","c83c3a8c":"markdown","e6c76eeb":"markdown","b3cdfe31":"markdown","502a889f":"markdown"},"source":{"2b7b5e78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport random \nrandom.seed(1)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0bc9530a":"pokemon = pd.read_csv(\"..\/input\/pokemon.csv\")\ncombat = pd.read_csv(\"..\/input\/combats.csv\")","a632457a":"pokemon.info()","647667a9":"pokemon.head(10)","c649c40b":"pokemon = pokemon.rename(index=str, columns={\"#\": \"Number\"})\npokemon.head()","da1fdbea":"combat.head()","faf255a0":"print(\"Dimenstions of Pokemon: \" + str(pokemon.shape))\nprint(\"Dimenstions of Combat: \" + str(combat.shape))","95cde8d6":"pokemon.describe()","002247f8":"combat.describe()","119caacb":"pokemon.isnull().sum()","16a41501":"combat.isnull().sum()","6fbd176c":"print(\"This pokemon is before the missing Pokemon: \" + pokemon['Name'][61])\nprint(pokemon[pokemon['Name'].isnull()])\nprint(\"This pokemon is after the missing Pokemon: \" + pokemon['Name'][63])","9e3c7103":"pokemon['Name'][62] = \"Primeape\"","4ee9017f":"pokemon.corr()","4c809f5c":"f,ax = plt.subplots(figsize=(18,18))\nsns.heatmap(pokemon.corr(),annot=True,linewidths=.5,fmt='.1f',ax=ax)\nplt.show()","d302c892":"pokemon.Speed.plot(kind='line', color='g', label='Speed',linewidth=1, alpha=0.5, grid=True, linestyle=':')\npokemon.Defense.plot(color='r',label='Defense',linewidth=1,alpha=0.5,grid=True,linestyle='-.')\nplt.legend(loc='upper right')\nplt.xlabel('Number of pokemon')\nplt.ylabel('Speed and Defense')\nplt.title('Line Plot')\nplt.show()","62e04c36":"pokemon.plot(kind='scatter',x='Attack',y='Defense',alpha=0.4,color='red', grid=True)\nplt.xlabel('Attack')\nplt.ylabel('Defense')\nplt.title('Attack and Defense Scatter Plot')\nplt.show()","fee2ec8b":"pokemon.Speed.plot(kind='hist',bins=65,figsize=(15,15), grid=True)\nplt.show()","dd2356d2":"# calculate the win % of each pokemon?\n# add the calculation to the pokemon dataset.\ntotal_Wins = combat.Winner.value_counts()\n# get the number of wins for each pokemon\nnumberOfWins = combat.groupby('Winner').count()\n\n#both methods produce the same results\ncountByFirst = combat.groupby('Second_pokemon').count()\ncountBySecond = combat.groupby('First_pokemon').count()\nprint(\"Looking at the dimensions of our dataframes\")\nprint(\"Count by first winner shape: \" + str(countByFirst.shape))\nprint(\"Count by second winner shape: \" + str(countBySecond.shape))\nprint(\"Total Wins shape : \" + str(total_Wins.shape))","f635ecd1":"find_losing_pokemon= np.setdiff1d(countByFirst.index.values, numberOfWins.index.values)-1\nlosing_pokemon = pokemon.iloc[find_losing_pokemon[0],]\nprint(losing_pokemon)","9b299fd3":"numberOfWins = numberOfWins.sort_index()\nnumberOfWins['Total Fights'] = countByFirst.Winner + countBySecond.Winner\nnumberOfWins['Win Percentage']= numberOfWins.First_pokemon\/numberOfWins['Total Fights']\n\n# merge the winning dataset and the original pokemon dataset\nresults2 = pd.merge(pokemon, numberOfWins, right_index = True, left_on='Number')\nresults3 = pd.merge(pokemon, numberOfWins, left_on='Number', right_index = True, how='left')\n\n# We can look at the difference between the two datasets to see which pokemon never recorded a fight\n#subset the dataframe where pokemon win percent is NaN\nresults3[results3['Win Percentage'].isnull()]","ba323b07":"results3[np.isfinite(results3['Win Percentage'])].sort_values(by = ['Win Percentage']).head(10)","3572dde8":"results3[np.isfinite(results3['Win Percentage'])].sort_values(by = ['Win Percentage'], ascending = False ).head(10)","47f2d9e2":"import matplotlib.pyplot as plt\nsns.set_color_codes(\"pastel\")\nax = sns.countplot(x=\"Type 1\", hue=\"Legendary\", data=results3)\nplt.xticks(rotation= 90)\nplt.xlabel('Type 1')\nplt.ylabel('Total ')\nplt.title(\"Total Pokemon by Type 1\")","1021d798":"ax = sns.countplot(x=\"Type 2\", hue=\"Legendary\", data=results3)\nplt.xticks(rotation= 90)\nplt.xlabel('Type 2')\nplt.ylabel('Total ')\nplt.title(\"Total Pokemon by Type 2\")","aac6db89":"results3.groupby('Type 1').agg({\"Win Percentage\": \"mean\"}).sort_values(by = \"Win Percentage\")","426ca2ac":"col = ['Type 1','HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Win Percentage']\nsns.pairplot(results3.loc[:,col].dropna())","4226c5e5":"import matplotlib.pyplot as plt\n\ng = sns.PairGrid(results3.loc[:,col], diag_sharey=False)\ng.map_lower(sns.kdeplot, cmap=\"Blues_d\")\ng.map_upper(sns.regplot)\ng.map_diag(sns.kdeplot, lw=3)\nplt.show()","76c3b1ee":"results3.loc[:,col].corr()","9670e74c":"def correlation_matrix(df):\n    from matplotlib import pyplot as plt\n    from matplotlib import cm as cm\n\n    fig = plt.figure()\n    ax1 = fig.add_subplot(111)\n    cmap = cm.get_cmap('jet', 50)\n    cax = ax1.imshow(df.corr(), interpolation=\"nearest\", cmap=cmap)\n    ax1.grid(True)\n    plt.title('Pokemon Feature Correlation')\n    labels=['Type 1','HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Win %']\n    ax1.set_xticklabels(labels,fontsize=7)\n    ax1.set_yticklabels(labels,fontsize=7)\n    # Add colorbar, make sure to specify tick locations to match desired ticklabels\n    fig.colorbar(cax, ticks=[0.00,.05,.10,.15,.20,.25,.30,.35,.40,.45,.50,.55,.60,.65,.70,.75,.8,.85,.90,.95,1])\n    plt.show()\n\ncorrelation_matrix(results3.loc[:,col])","0d1482bd":"import matplotlib.pyplot as plt\nsns.regplot(x=\"Speed\", y=\"Win Percentage\", data=results3, logistic=True).set_title(\"Speed vs Win Percentage\")\nsns.lmplot(x=\"Speed\", y=\"Win Percentage\", data=results3, hue = 'Type 1',  logistic=True)#.set_title(\"Speed vs Win Percentage\")","f348ed5d":"ax = sns.regplot(x=\"Attack\", y=\"Win Percentage\", data=results3).set_title(\"Attack vs Win Percentage\")\nsns.lmplot(x=\"Attack\", y=\"Win Percentage\", data=results3, hue = 'Type 1',fit_reg =False)","43ed9cde":"dataset = results2","65ea1f68":"#remove rows with NA values because it will cause errors when fitting to the model\ndataset.dropna(axis=0, how='any') \n# Splitting the dataset into the Training set and Test set\nX = dataset.iloc[:, 5:11].values\ny = dataset.iloc[:, 15].values\n\n# Avoiding the Dummy Variable Trap\n#X = X[:, 1:]\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","17fe7ac4":"#from sklearn.preprocessing import StandardScaler\n#sc = StandardScaler()\n#X_train = sc.fit_transform(X_train)\n#X_test = sc.transform(X_test)","2af9faae":"def ml_linearreg(X_train, X_test, y_train, y_test):\n    # Fitting Multiple Linear Regression to the Training set\n    from sklearn.linear_model import LinearRegression\n    regressor = LinearRegression()\n    regressor.fit(X_train, y_train)\n    print(regressor.score(X_train, y_train))\n    # Predicting the Test set results\n    y_pred = regressor.predict(X_test)\n\n    # Validating the results\n    from sklearn.metrics import mean_absolute_error\n    from math import sqrt\n    mae = mean_absolute_error(y_test, y_pred)\n    return mae\n\nml_linearreg(X_train, X_test, y_train, y_test)","2bf65a3c":"**Find the top 10 Pokemon with the \"best\" win percentage ?**","26b4abcd":"**Little more vizualisation...**","edaaaad1":"**And of course correlation...**","eea9a3c1":"**We should correct missing values one.**","b4c83e63":"**Actually it is not bad. Variables names OK and data types OK. I think, we don't need too much change. I need idea about the subject, so we can use head() function.**","df07fa7f":"** Let's see others values. About wins, and count wins?**","17fa85ab":"**About losing pokemons?**","4ad21930":"**How can we set prediction algorithm?\nThis way...**","f5b7cf60":"**Pair plot style graph**","36e04eed":"**Find the top 10 Pokemon with the \"worse\" win percentage ?**","b6ce2120":"**Data select.**","52b1cb0d":"**We can read it csv file about the subject, and let's start with info() function!**","a2be9a7c":"**Also attack vs Win percentage.**","731ace9d":"![](https:\/\/lh3.googleusercontent.com\/nuqQn4oUVnmqxe0pq8EcofuXLNIZ9gg6JkxFuvukxnClQ7Zy2eWA1Y1oBeYqlYJ3tZ29pHBsXQ6rHh03Tji9gxB1OeWGfsD0oy0Q48oJ_LMAFuq9HZqkh_hWQiSmKlJuGZZHSXrDRjkh43rKeJmDlCE9b6MeX6FMHuay3aniKPVr6pSEXltIS-98RnCjqQMtD6mi7ddtDvG4aSVIXI-D227U192AKaRsCQpv0pi9hUxu5j1-kyaV_uI4LuKkjosf9M1piA85CbxLr-XgFT6BGz1PrxEsOFzAXM7t0ja6jBg399X6DXmVappJSOcPkGoeIlrZqTn50WfCtNrL7ACdVsqVavoNbL74xjPki7HAAmTwmEk7Vkt068O2Hnth4V3l4pqZlRU9miN-v1s2EjydRKv98jnqkiXJuKUdrxK-nBAeZdhymYcU5bcYIiGHbxXZOq3Dzmi77X_PeWEv-wCxKz7Mz3NP2dwBVRC64LwNVPQFhQO0S-iqG_aLUTdppclphJlUe_4gJ0lSYrQ26KFqGS8sAyfeIKexOjzGRvuiRu2H_A8u_RbQAjCFc2oSH-fBRxjFe7am8y_Q8T1cxamQ5YdY7UYFHRnLK1cQXZf5TQ=w2048-h1193-no)\n\n\n**Kaggle boyunca a\u00e7\u0131klamalar\u0131m\u0131 herkesin anlayabilece\u011fi dilde olmas\u0131 \u00fcmidiyle ingilizce yapmaya \u00e7al\u0131\u015ft\u0131m, herkese iyi \u00e7al\u0131\u015fmalar. **\n\n**Hey! This is my first Kaggle Kernel to learn data analyzing method. **","7ff001f7":"**What about missing values?**","62e912d4":"**Again correlation, but this time deep correlation.**","b3a2539f":"**Yes, right now obvious, because heatmap is very usefull. We can comment little bit.**","d16ae7e5":"**Speed vs Win Percentage ? Exactly important.**","e0bd8d9b":"**We have only one missing values, it is so almost perfect.**","0966f3ae":"**Feature Scaling is here, but i dont prefer use**","59af8a3d":"**Win percentage and mean values...**","9fb6f394":"**I think we should change \"#\" symbol, it is useless.**","67816e67":"**I guess there was relationship, between speed and defense. Am I wrong? Let me show you.**","1fbba719":"**Let's correct some missing\/noisy values. But carrefully, because can be Dummy Variable Trap.**","c83c3a8c":"**Yes i had right.**","e6c76eeb":"**With pair grid graph.**","b3cdfe31":"**Firstly we should import some usefull librarys.**","502a889f":"**That's it!**"}}