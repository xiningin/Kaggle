{"cell_type":{"2a93ec98":"code","8c54abcf":"code","ed135b6f":"code","f475abe4":"code","62547f32":"code","62eb45ea":"code","7910a17a":"code","c9337727":"code","499ebf93":"code","5eabbc00":"code","82a957eb":"code","14d96286":"code","a85966a4":"code","85fd2fc8":"code","866d4392":"code","7cdd196e":"code","5437d01c":"code","3d42200a":"code","4b24d4fb":"code","0c34b8d3":"code","e3acf38a":"code","26b0726b":"code","5621e365":"markdown","8971c957":"markdown","78f37610":"markdown","201e5168":"markdown","4e1b0db2":"markdown","97b83089":"markdown","48e57d09":"markdown","7de776b5":"markdown","d67f2ae8":"markdown","1c09191f":"markdown","4c673928":"markdown","6079ef46":"markdown","9d793b66":"markdown"},"source":{"2a93ec98":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\n\nimport os\nimport cv2\nfrom sklearn import preprocessing\nfrom pathlib import Path","8c54abcf":"# storing labels for train test\nlabels_train = []\nlabels_test = []\n\n# storing path for train test\npath_train = []\npath_test = []","ed135b6f":"train_path = \"..\/input\/fruit-images-for-object-detection\/train_zip\/train\/\"\ntest_path = \"..\/input\/fruit-images-for-object-detection\/test_zip\/test\/\"\n\nfor filename in os.listdir(train_path):\n    if(filename.split('.')[1]==\"jpg\"):\n        labels_train.append(filename.split('_')[0])\n        path_train.append(os.path.join(train_path, filename))\n\nfor filename in os.listdir(test_path):\n    if(filename.split('.')[1]==\"jpg\"):\n        labels_test.append(filename.split('_')[0])\n        path_test.append(os.path.join(test_path, filename))\n\n\nlabel_train_unique = np.unique(np.array(labels_train))\nlabel_test_unique = np.unique(np.array(labels_test))\n\n\nprint(\"Unique labels for train are: \", label_train_unique)\nprint(\"Number of jpg images in train are: \", len(path_train))\n\nprint(\"\\nUnique labels are for test are: \", label_test_unique)\nprint(\"Number of jpg images for train are: \", len(path_test))\n\n","f475abe4":"image = cv2.imread(path_train[0])\n\nrgb_img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) \n\nplt.imshow(rgb_img)\nplt.title(\"Label: \" + labels_train[0])\nplt.axis('off')\nplt.show()","62547f32":"image = cv2.imread(path_test[0])\n\nrgb_img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) \n\nplt.imshow(rgb_img)\nplt.title(\"Label: \" + labels_test[0])\nplt.axis('off')\nplt.show()","62eb45ea":"X_train = []\n\nfor path in path_train:\n    \n    img = cv2.imread(path)\n    \n    rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n\n    final_img =  cv2.resize(rgb_img, (50,50))\n    \n    X_train.append(final_img)\n\nX_train = np.array(X_train)","7910a17a":"X_test = []\n\nfor path in path_test:\n    \n    img = cv2.imread(path)\n    \n    rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n\n    final_img =  cv2.resize(rgb_img, (50,50))\n    \n    X_test.append(final_img)\n\nX_test = np.array(X_test)","c9337727":"fruits = {}\n\nfor i in range(len(label_train_unique)):\n    fruits[label_train_unique[i]] = i\n    \nfruits    ","499ebf93":"# storing the values in a temporary list\ntemp_train = []\ntemp_test = []\n\n# all the fruits names are being mapped\nfor label in labels_train:\n    temp_train.append(fruits.get(label))\n\nfor label in labels_test:\n    temp_test.append(fruits.get(label))\n\nprint(\"Length of train data: \", len(temp_train))\nprint(\"Length of test data: \", len(temp_test))","5eabbc00":"y_train = keras.utils.to_categorical(temp_train, 4)\ny_test = keras.utils.to_categorical(temp_test, 4)","82a957eb":"print(\"Length of X_train: \", len(X_train))\nplt.imshow(X_train[34])\nplt.title(\"Checking X_train\"+str(y_train[34]))\nplt.show()","14d96286":"print(\"Length of X_test: \", len(X_test))\nplt.imshow(X_test[45])\nplt.title(\"Checking X_test, Label: \" + str(y_test[45]))\nplt.show()","a85966a4":"X_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\nX_train \/= 255\nX_test \/= 255","85fd2fc8":"print(\"X_train shape: \", X_train.shape)\nprint(\"X_test shape: \", X_test.shape)\n\nprint(\"\\ny_train shape: \", y_train.shape)\nprint(\"y_test shape: \", y_test.shape)\n","866d4392":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), padding='same', input_shape=(50, 50, 3), activation=\"relu\"))\nmodel.add(Conv2D(32, (3, 3), activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), padding='same', activation=\"relu\"))\nmodel.add(Conv2D(64, (3, 3), activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation=\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(4, activation=\"softmax\"))\n\n# Compile the model\nmodel.compile(\n    loss='categorical_crossentropy',\n    optimizer=\"adam\",\n    metrics=['accuracy']\n)\n\nmodel.summary()","7cdd196e":"# training the model\nhistory = model.fit(\n    X_train,\n    y_train,\n    batch_size=32,\n    epochs=150,\n    validation_split=0.2,\n    shuffle=True\n)\n","5437d01c":"# displaying the model accuracy\nplt.plot(history.history['accuracy'], label='train', color=\"red\")\nplt.plot(history.history['val_accuracy'], label='validation', color=\"blue\")\nplt.title('Model accuracy')\nplt.legend(loc='upper left')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.show()","3d42200a":"# displaying the model loss\nplt.plot(history.history['loss'], label='train', color=\"red\")\nplt.plot(history.history['val_loss'], label='validation', color=\"blue\")\nplt.title('Model loss')\nplt.legend(loc='upper left')\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.show()","4b24d4fb":"model_structure = model.to_json()\nf = Path(\"model_structure.json\")\nf.write_text(model_structure)\n\n# Save neural network's trained weights\nmodel.save_weights(\"model_weights.h5\")","0c34b8d3":"score, accuracy = model.evaluate(X_test, y_test)\nprint('Test score achieved:', score)\nprint('Test accuracy achieved:', accuracy)","e3acf38a":"pred = model.predict(X_test)","26b0726b":"fig, axs= plt.subplots(2,2, figsize=[10,10])\nfig.subplots_adjust(hspace=.01)\n\n\ncount=0\nfor i in range(2):    \n    for j in range(2):  \n        \n        img = cv2.imread(path_test[count])\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n        img = cv2.resize(img, (250,200))\n        result = np.argsort(pred[count])[::-1]\n        \n        i_max = -1\n        max_val = \"\"\n        for (k,val) in enumerate(fruits.keys()):\n            \n            if(pred[count][k] > i_max):\n                i_max = pred[count][k]\n                max_val = val\n        \n        txt = str(max_val) + \" with Probability \"+ str(\"{:.4}%\".format(i_max*100)) + \" %\"\n            \n        \n        axs[i][j].imshow(img)\n        axs[i][j].set_title(txt)\n        axs[i][j].axis('off')\n\n        count+=1\n        \nplt.suptitle(\"All predictions are shown in title\", fontsize = 18)        \nplt.show()","5621e365":"For validation, we will take 20% of training data","8971c957":"## Displaying the prediction ##","78f37610":"## Preprocessing","201e5168":"# Thank you","4e1b0db2":"Let's check the y_train and y_test values again before moving ahead","97b83089":"# Fruits image classification using Keras","48e57d09":"To have the same values for same fruits, we will use a dictionary and then we will map the values","7de776b5":"## Saving the model","d67f2ae8":"## Creating train and test set\n\nLet's create X_train and X_test using the list: path_train and path_test which we stored earlier","1c09191f":"## Analysing the results","4c673928":"# Creating the sequential model","6079ef46":"## Verifying the data\n\nLet's start by displaying one of the image from training","9d793b66":"We are using list to store the labels and path"}}