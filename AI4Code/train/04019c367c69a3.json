{"cell_type":{"86cf8d90":"code","9dda1b56":"code","d4f66903":"code","10f272be":"code","37d350c1":"code","cf745726":"code","fb757799":"code","3af6e256":"code","e8d41aee":"code","b2d71ceb":"code","96d795e5":"code","a87c2954":"markdown","8f74d9de":"markdown","7f7f569a":"markdown","3ca504c8":"markdown","6e38f1ff":"markdown","21f432c7":"markdown","9998021d":"markdown","46f0706b":"markdown"},"source":{"86cf8d90":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9dda1b56":"from keras.models import Sequential \nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense\nfrom keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img","d4f66903":"train_path = \"\/kaggle\/input\/fruits\/fruits-360\/Training\/\/\"\ntest_path = \"\/kaggle\/input\/fruits\/fruits-360\/Test\/\"","10f272be":"img = load_img(train_path + \"Quince\/r_305_100.jpg\")\nplt.imshow(img)\nplt.axis(\"off\")\nplt.show()","37d350c1":"img = img_to_array(img)\nimg.shape","cf745726":"model = Sequential()\nmodel.add(Conv2D(128, 3, activation=\"relu\", input_shape=(100,100,3)))\nmodel.add(MaxPooling2D())\nmodel.add(Conv2D(64, 3, activation=\"relu\"))\nmodel.add(Conv2D(32, 3, activation=\"relu\"))\nmodel.add(MaxPooling2D())\nmodel.add(Dropout(0.50))\nmodel.add(Flatten())\nmodel.add(Dense(5000, activation = \"relu\"))\nmodel.add(Dense(1000, activation = \"relu\"))\nmodel.add(Dense(131, activation = \"softmax\"))\nmodel.summary()","fb757799":"model.compile(loss=\"categorical_crossentropy\", optimizer = \"SGD\", metrics = [\"accuracy\"])","3af6e256":"train_data = ImageDataGenerator(rescale=1\/255, shear_range=0.4, zoom_range=0.4, horizontal_flip=True)\ntest_data = ImageDataGenerator(rescale=1\/255)","e8d41aee":"train_gen = train_data.flow_from_directory(train_path, target_size = (100,100), batch_size = 32, color_mode=\"rgb\", class_mode = \"categorical\")\ntest_gen = test_data.flow_from_directory(test_path, target_size = (100,100), batch_size = 32, color_mode=\"rgb\", class_mode = \"categorical\")","b2d71ceb":"hist = model.fit_generator(generator=train_gen, steps_per_epoch = 80, epochs = 100, validation_data = test_gen, validation_steps = 80)","96d795e5":"plt.plot(hist.history[\"val_accuracy\"])\nplt.xlabel(\"Num of Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.show()","a87c2954":"Accuracy rate is not very high, but there is an upward trend. I think if we increase the number of epochs, the accuracy will increase even more.","8f74d9de":"<a id=6><\/a>\n# Evaluate the model","7f7f569a":"<a id=2><\/a>\n# View some samples","3ca504c8":"# Introduction\n\nHello. In this notebook, I will try to classification fruits. In this job, I will follow theese steps:\n\n* [Import Libraries](#1)\n* [View some samples](#2)\n* [Create model](#3)\n* [Data Augmentation](#4)\n* [Fit the model](#5)\n* [Evaluate the model](#6)","6e38f1ff":"<a id=5><\/a>\n# Fit the model","21f432c7":"<a id=3><\/a>\n# Create model","9998021d":"<a id=4><\/a>\n# Data Augmentation","46f0706b":"<a id=1><\/a>\n# Import Libraries"}}