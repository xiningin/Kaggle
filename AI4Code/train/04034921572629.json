{"cell_type":{"03875a89":"code","28420a25":"code","e2687b4f":"code","169ddf4c":"code","f128e6e6":"code","67b03e0b":"code","646653c8":"code","9dae61f4":"code","0bdc1db7":"code","cd318438":"code","9d4a76e1":"code","229f0fa3":"code","0a38fb04":"code","9dc522a7":"code","1f497b45":"code","979d18e4":"code","6a04c675":"code","8b297a6f":"code","656bd032":"code","b71622bc":"code","808c8e22":"code","ee5532fd":"code","d8086fdf":"code","498ed86a":"code","7c8ec100":"code","333b4541":"code","9d4daf33":"code","63ce4adf":"code","59c631a4":"markdown","df009ff4":"markdown"},"source":{"03875a89":"import warnings\nimport itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings(\"ignore\")\nplt.style.use('fivethirtyeight')\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib\nmatplotlib.rcParams['axes.labelsize'] = 14\nmatplotlib.rcParams['xtick.labelsize'] = 12\nmatplotlib.rcParams['ytick.labelsize'] = 12\nmatplotlib.rcParams['text.color'] = 'k'\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nimport ml_metrics as metrics\nfrom pylab import rcParams\nimport plotly.graph_objects as go\nimport seaborn as sns","28420a25":"eldoret_data = pd.read_excel('..\/input\/refined-readings\/clean_data.xlsx')\neldoret_locs = eldoret_data.loc[(eldoret_data['Longitude'] >= 35.28709)] \neldoret_locs = eldoret_locs.loc[(eldoret_locs['Longitude'] < 35.29983)]\neldoret_locs.head()","e2687b4f":"eldoret_locs = eldoret_locs[~eldoret_locs['TimeTaken'].str.contains(\"-\", na=False)]\neldoret_locs['TimeTaken'] = pd.to_datetime(eldoret_locs['TimeTaken'])\neldoret_locs = eldoret_locs.sort_values('TimeTaken')\neldoret_locs.info()","169ddf4c":"eldoret_locs.head()","f128e6e6":"eldoret_locs['TimeTaken'] = eldoret_locs['TimeTaken'].dt.date\neldoret_locs.head()","67b03e0b":"eldoret_locs = eldoret_locs.rename(columns={'DaillyFowRate':'DailyFlowRate'})\ndaily_consumption_info = eldoret_locs.groupby('TimeTaken')['DailyFlowRate'].sum().reset_index()\ndaily_consumption_info.head()","646653c8":"daily_readings = daily_consumption_info.copy()\ndaily_consumption_info = daily_consumption_info.set_index('TimeTaken')\ndaily_consumption = daily_consumption_info['DailyFlowRate']\ndaily_consumption.plot(figsize=(15, 6))\nplt.title('Daily consumption Patterns for Eldowas Meters')\nplt.show()","9dae61f4":"daily_consumption_info['Time-Stamp'] = daily_consumption_info.index\nstart_date = pd.to_datetime('2020-08-01').date()\nend_date = pd.to_datetime('2020-12-08').date()\ndaily_consumption_info = daily_consumption_info[start_date:end_date]\ndaily_consumption_info.head()","0bdc1db7":"daily_consumption2 = daily_consumption_info['DailyFlowRate']\ndaily_consumption2.plot(figsize=(15, 6))\nplt.title('Daily consumption Patterns for Eldowas Meters from Aug 2020')\nplt.savefig('Eldoret_consumption.png')\nplt.show()","cd318438":"daily_consumption_info = daily_consumption_info.loc[(daily_consumption_info['DailyFlowRate'] < 100)]\ndaily_consumption_info.head()\n","9d4a76e1":"ax = sns.distplot(daily_consumption_info.DailyFlowRate, hist=True, hist_kws={\"edgecolor\": 'w', \"linewidth\": 3}, kde_kws={\"linewidth\": 3})\n# ticks \nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\n# labels and title\nplt.xlabel('Daily Flow Rate', fontsize=14)\nplt.ylabel('frequency', fontsize=14)\nplt.title('Distribution of Daily Cumulative Consumption in Eldoret', fontsize=20);","229f0fa3":"time_series_df = daily_consumption_info.copy()\ntime_series_df['TimeTaken'] = pd.to_datetime(time_series_df['Time-Stamp'])\ntime_series_df = time_series_df.set_index('TimeTaken')\ntime_series_df.index","0a38fb04":"#getting daily aggregates of the data\ntarget = time_series_df['DailyFlowRate'].resample('D').sum()\ntarget_df = pd.DataFrame(target)\ntarget_df['DailyFlowRate'] = target_df['DailyFlowRate'].replace(to_replace=0.0, method='ffill')\ntarget_df.info()\n    ","9dc522a7":"target_df['Date'] = target_df.index\ntarget_df['Month'] = target_df.Date.dt.month_name()\ntarget_df['Year'] = target_df.Date.dt.year","1f497b45":"#plotting our results\ndaily_consumption = target_df['DailyFlowRate'].resample('D').sum()\ndaily_consumption.plot(figsize=(15, 6))\nplt.title('Cleaned Daily consumption Patterns between Aug 2020 and Dec 2020')\nplt.show()","979d18e4":"#visualizing the trends and seasonality in the data\nrcParams['figure.figsize'] = 18, 8\ndecomposition = sm.tsa.seasonal_decompose(daily_consumption, model='additive')\nfig = decomposition.plot()\nplt.savefig('seasonality.png')\nplt.show()\n","6a04c675":"#HYPERPARAMETER OPTIMIZATION\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","8b297a6f":"#finding optimal parameters\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(daily_consumption,\n                                            order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n            results = mod.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n            continue","656bd032":"mod = sm.tsa.statespace.SARIMAX(daily_consumption,\n                                order=(1, 1, 1),\n                                seasonal_order=(1, 1, 1, 12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary().tables[1])","b71622bc":"#Visualization of the distribution of the output\nresults.plot_diagnostics(figsize=(16, 8))\nplt.show()","808c8e22":"pred = results.get_prediction(start=pd.to_datetime('2020-09-01'), dynamic=False)\npred_ci = pred.conf_int()\nax = daily_consumption['2020':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Date')\nax.set_ylabel('Daily consumption')\nplt.legend()\nplt.title('Actual Consumption vs Forecasted consumption for the Period Starting Aug 2020')\nplt.savefig('comparisonvsforecast.png')\nplt.show()","ee5532fd":"daily_consumption = target_df.copy()\ndaily_consumption['Date'] = daily_consumption.index\nconsumption_df = daily_consumption[['Date', 'DailyFlowRate']]\nconsumption_df = consumption_df.rename(columns={'Date':'ds', 'DailyFlowRate':'y'})\n#OPTIMIZING THE PARAMETERS OF THE FBPROPHET MODEL\nconsumption_model1 = Prophet(growth = 'linear',seasonality_mode = 'multiplicative',daily_seasonality = False,\n                            weekly_seasonality = False,yearly_seasonality = False,).add_seasonality(name='monthly',\n                                                                                                    period = 30.5, fourier_order=20).add_seasonality(name='daily',\n                                                                                                                                    period=1, fourier_order=20).add_seasonality(name='weekly',period=7, fourier_order=20)\n\nconsumption_model1.fit(consumption_df)\ndaily_consumption_prediction = consumption_model1.make_future_dataframe(periods=120, freq='D')\ndaily_consumption_prediction = consumption_model1.predict(daily_consumption_prediction)\n#the linear growth is used instead of the logistic because while we anticipate some saturation, this won't be realized soon\n\n","d8086fdf":"plt.figure(figsize=(18, 6))\nconsumption_model1.plot(daily_consumption_prediction, xlabel = 'Date', ylabel = 'Daily Predicted Consumption')\nplt.savefig('prophet.png')\nplt.title('Projected Daily Consumption for Eldoret Smart IoT Meters Upto March 2021');","498ed86a":"consumption_model1.plot_components(daily_consumption_prediction)","7c8ec100":"metrics_eval_df = daily_consumption_prediction.set_index('ds')[['yhat']].join(consumption_df.set_index('ds').y).reset_index()\ncumulative_consumption = metrics_eval_df.copy()\ncumulative_consumption['Month'] = cumulative_consumption.ds.dt.month_name()\ncumulative_consumption['Year'] = cumulative_consumption.ds.dt.year\ncumulative_consumption_2020 = cumulative_consumption[cumulative_consumption['Year']==2020]\ncumulative_consumption_2020 = cumulative_consumption_2020[~cumulative_consumption_2020['Month'].str.contains('December')]\ncdf = cumulative_consumption_2020.copy()\ncdf_group = cdf.groupby(['Month', 'Year'])\ncdf_monthly_accumulated_flow = cdf_group.aggregate({\"yhat\":np.sum})\ncdf_monthly_accumulated_flow['ActualConsumption'] = cdf_group.aggregate({'y':np.sum})\ncdf_monthly_accumulated_flow = cdf_monthly_accumulated_flow.rename(columns={'yhat':'PredictedConsumption'})\ncdf_monthly_accumulated_flow['Predicted_Revenue'] = cdf_monthly_accumulated_flow['PredictedConsumption']*70\ncdf_monthly_accumulated_flow['Actual_Revenue'] = cdf_monthly_accumulated_flow['ActualConsumption']*70\n#cdf_monthly_accumulated_flow['Month'] = cdf_monthly_accumulated_flow.index\ncdf_monthly_accumulated_flow = cdf_monthly_accumulated_flow.reset_index(level=[0,1])","333b4541":"#2021 Data\ncumulative_consumption_2021 = cumulative_consumption[cumulative_consumption['Year']==2021]\ndf_2021 = cumulative_consumption_2021.copy()\ndf_2021 = df_2021.drop(columns=['y'],axis=1)\ndf_2021_groups = df_2021.groupby(['Month', 'Year'])\npredicted_consumption = df_2021_groups.aggregate({'yhat':np.sum})\npredicted_consumption = predicted_consumption.rename(columns={'yhat':'PredictedMonthlyConsumption'})\npredicted_consumption['PredictedRevenue'] = predicted_consumption['PredictedMonthlyConsumption']*70\npredicted_consumption = predicted_consumption.reset_index(level=[0,1])","9d4daf33":"plot = go.Figure(data=[go.Bar( name = 'ActualMonthlyConsumption', x = cdf_monthly_accumulated_flow['Month'], \n                              y = cdf_monthly_accumulated_flow['ActualConsumption']),\n                       go.Bar(name = 'Forecasted Consumption', x = cdf_monthly_accumulated_flow['Month'], y = cdf_monthly_accumulated_flow['PredictedConsumption']), \n                       go.Bar( name = '2021 Projected Consumption', x = predicted_consumption['Month'], \n                              y = predicted_consumption['PredictedMonthlyConsumption'])])\n\n             \nplot.show()","63ce4adf":"plot = go.Figure(data=[go.Bar( name = 'ActualMonthlyRevenue', x = cdf_monthly_accumulated_flow['Month'], \n                              y = cdf_monthly_accumulated_flow['Actual_Revenue']), go.Bar(name = 'Forecasted Revenue', x = cdf_monthly_accumulated_flow['Month'], y = cdf_monthly_accumulated_flow['Predicted_Revenue']), go.Bar( name = '2021 Projected Revenue', x = predicted_consumption['Month'], \n                              y = predicted_consumption['PredictedRevenue'])])\n\n             \nplot.show()","59c631a4":"# IMPLEMENTATION OF THE ARIMA MODEL ","df009ff4":"# IMPLEMENTING THE FBPROPHET MODEL"}}