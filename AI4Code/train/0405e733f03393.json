{"cell_type":{"84dc8ddd":"code","3c338bbb":"code","c7070260":"code","8e501518":"code","b85eb28f":"code","4b1ed2b1":"code","723421e1":"code","e91343ad":"code","46244b39":"code","77754d2f":"code","7db364a1":"code","7863e339":"code","5b2d18a3":"code","13b9e3ce":"code","e4e3c1c2":"code","899f2168":"code","35af4b4c":"code","666e4a72":"code","cef6b385":"code","2f8b5895":"code","6fe43180":"code","63d02295":"code","394080d4":"code","557b75f3":"code","877dfcf2":"code","5cf7dfa0":"code","77ec659d":"code","b09838d7":"code","f429ae64":"code","e8e9db32":"code","48490882":"code","6761f3ac":"code","8de4f9d1":"code","86f2e9a0":"code","90588abd":"code","6a9d3de4":"code","ffc2fff7":"code","95f31208":"code","d09c9171":"code","59ae0fdf":"code","623a4785":"code","bcccc7a7":"code","ebe454b7":"code","041bda3b":"code","c0538ca2":"code","a5998abd":"code","2469d056":"code","8c620436":"code","90915958":"code","8c8d1bdb":"code","77d863f1":"code","f6a098aa":"code","003500f6":"code","6b08176f":"code","e1398883":"code","b762aafb":"code","f191e53b":"code","d576efa4":"code","cc407b10":"code","455189ba":"code","2c14f1db":"code","7d81fbf8":"code","b1aeb6ed":"code","6b615d5c":"code","4fbf2422":"code","2e8d20ad":"code","d53ead3f":"code","59962010":"code","82ca88df":"code","06afd046":"code","62236bb2":"code","a6d3ac8f":"code","8865edb7":"code","ec8927b5":"code","ffbe8e9e":"code","24d56c58":"code","e2e0f60a":"code","a358dd46":"code","d57f49e8":"code","b8496349":"code","2470e11e":"code","c48964a3":"code","100831df":"code","f74e21f2":"code","c265d48c":"code","7db138b1":"code","38486dc7":"code","e3cbed24":"code","68c2760e":"code","dda9bd93":"code","0bc6d36b":"code","b5a93730":"code","4e09c266":"code","38fbf4ed":"code","8bbbbcf0":"code","ebfefba9":"code","0657bb14":"code","1a77cb4f":"code","3d4627bf":"code","eda38716":"code","8993394e":"code","5cbbce68":"code","54fb984c":"code","1955b72f":"code","b55d60fa":"code","b23344ce":"code","3a2598b3":"code","c83e9764":"code","c78fe07f":"markdown","bf3fb025":"markdown","a9b1d428":"markdown","0d4be6f6":"markdown","95a7e058":"markdown","0376af1f":"markdown","d41d05a0":"markdown","5a9aade8":"markdown","02b69f3f":"markdown","6840e805":"markdown","a1ce41ff":"markdown","5189aae3":"markdown","ac578dd3":"markdown","f2d056b2":"markdown","96945939":"markdown","1ff15377":"markdown","92609211":"markdown","008fe93c":"markdown","6455a9ef":"markdown","5340d494":"markdown","acf65053":"markdown","b788333f":"markdown","ce1f07f7":"markdown","50df5c22":"markdown","72c05c10":"markdown","fd4f6f48":"markdown","c15d99d1":"markdown","abee4b8c":"markdown","5cde96c9":"markdown","69999907":"markdown","c8c6e17c":"markdown","61421fbe":"markdown","920001c7":"markdown","9eb1c0e0":"markdown","c42838cb":"markdown","3f562008":"markdown","2c68ece4":"markdown","d996ec23":"markdown","ba70a4bf":"markdown","5d0f7f8f":"markdown","df400d15":"markdown","4b798c0c":"markdown","05d50658":"markdown","9cbed7d2":"markdown","4f969a0a":"markdown","566969bc":"markdown","6b1c6c9b":"markdown","e8cc028e":"markdown","ebfa2e41":"markdown","7b383f7a":"markdown","36d1dba5":"markdown","9eb2e299":"markdown","e1eaeb3b":"markdown","0b68bbaf":"markdown","ced9b7b0":"markdown","7f7e78fe":"markdown","f6c0c20f":"markdown","a692eee8":"markdown","50256c94":"markdown","0801e265":"markdown","81b4ac71":"markdown","deb3fef3":"markdown","52dd28ff":"markdown","0bd0dc55":"markdown","d07d9a53":"markdown","3b278214":"markdown"},"source":{"84dc8ddd":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.io as pio\npy.offline.init_notebook_mode(connected=True)\nimport geopandas as gpd\nimport os\nimport folium\nimport gc\nfrom folium.plugins import TimeSliderChoropleth\nfrom scipy.signal import find_peaks\nfrom sklearn import preprocessing\nimport time\nfrom datetime import datetime\nfrom scipy import integrate, optimize\nimport warnings\nwarnings.filterwarnings(\"ignore\")","3c338bbb":"PATH_DATA = '\/kaggle\/input\/covid19inspain\/agregados.csv'\nPATH_GEO_JSON = '\/kaggle\/input\/spain-geojson\/shapefiles_ccaa_espana.geojson'\ndata = pd.read_csv(PATH_DATA,delimiter=\",\", encoding=\"latin1\", skiprows=range(1730,1739))","c7070260":"print(data.head())\nprint(data.tail(10))","8e501518":"data.fillna(0)#missing values with 0","b85eb28f":"#changing name of columns\ndata.rename(columns={\"FECHA\":\"Date\",\n              \"PCR+\":\"Infected\",\n             \"Hospitalizados\":\"Hospitalized\",\n             \"Fallecidos\":\"Deaths\",\n             \"Recuperados\":\"Cured\",\n             \"UCI\":\"ICU\",\n             \"CASOS\":\"Cases\"},inplace= True)","4b1ed2b1":"data.replace({\"AN\":\"Andaluc\u00eda\",\"AR\":\"Arag\u00f3n\",\"AS\":\"Asturias\",\n                \"IB\":\"Baleares\",\"CN\":\"Canarias\",\"CB\":\"Cantabria\",\n                 \"CM\":\"Castilla La Mancha\",\"CL\":\"Castilla y Le\u00f3n\",\"CT\":\"Catalu\u00f1a\",\n              \"CE\":\"Ceuta\",\"VC\":\"C. Valenciana\",\"EX\":\"Extremadura\",\"GA\":\"Galicia\",\n             \"MD\":\"Madrid\",\"ML\":\"Melilla\",\"MC\":\"Murcia\",\"NC\":\"Navarra\",\n             \"PV\":\"Pa\u00eds Vasco\",\"RI\":\"La Rioja\"},inplace=True)","723421e1":"data.isnull().sum()","e91343ad":"#convert the date values and create a new column called NEW_DATE.\ndata.Date = pd.to_datetime(data.Date, format=\"%d\/%m\/%Y\")","46244b39":"data[\"NEW_DATE\"] = data.Date.apply(lambda x: x.strftime(\"%d %b, %Y\"))","77754d2f":"total_s = data.groupby([\"Date\",\"NEW_DATE\"])[\"Date\",\"Cases\",\"Infected\",\"TestAc+\",\"Deaths\",\"Hospitalized\",\"ICU\"].sum().reset_index()\ntotal_s.head()","7db364a1":"#create variables with infectef & dead daily people\naux = total_s.Infected.to_list()\n\ndaily=[]\n\nfor i in range(len(aux)-1):\n    b = aux[i+1] - aux[i]\n    daily.append(b)\n    \ndaily.insert(0,0)   \n\ntotal_s[\"Daily_Infected\"] = daily","7863e339":"aux = total_s.Deaths.to_list()\n\ndaily=[]\n\nfor i in range(len(aux)-1):\n    b = aux[i+1] - aux[i]\n    daily.append(b)\n    \ndaily.insert(0,0)   \n\ntotal_s[\"Daily_Deaths\"] = daily","5b2d18a3":"aux = total_s.Cases.to_list()\n\ndaily=[]\n\nfor i in range(len(aux)-1):\n    b = aux[i+1] - aux[i]\n    daily.append(b)\n    \ndaily.insert(0,0)   \n\ntotal_s[\"Daily_Cases\"] = daily\n","13b9e3ce":"total_s.head()","e4e3c1c2":"data_infected = data[data.Date>\"20-02-2020\"]","899f2168":"fig = px.bar(data_infected, x=\"CCAA\", y=\"Infected\", color=\"CCAA\",\n              animation_frame=\"NEW_DATE\", animation_group=\"CCAA\", range_y=[0,data.Infected.max()+1000],title= \"Infections by regions over time\")\nfig.show()","35af4b4c":"fig = px.area(total_s, x= \"Date\", y = \"Daily_Deaths\", title= \"Daily deaths in Spain\", color_discrete_sequence = ['red'])\nfig.show()","666e4a72":"total_madrid = data[data.CCAA==\"Madrid\"].groupby(\"Date\")[\"Date\",\"Infected\",\"Deaths\",\"Hospitalized\",\"ICU\"].sum().reset_index()","cef6b385":"aux_m = total_madrid.melt(id_vars=\"Date\", value_vars=(\"Infected\",\"Deaths\",\"ICU\",\"Hospitalized\"), value_name=\"Count\" , var_name= \"Status\")","2f8b5895":"fig = px.bar(aux_m, x= \"Date\", y = \"Count\", color=\"Status\", title= \"Actual situation in Madrid\")\nfig.show()","6fe43180":"fig = go.Figure(data=[\n    go.Bar(name='Infections', x=total_s['Date'], y=total_s['Daily_Infected']),\n    go.Bar(name='Deaths', x=total_s['Date'], y=total_s['Daily_Deaths'])\n])\n# Change the bar mode\nfig.update_layout(barmode='overlay', title='Daily Case and Death count(Spain)',\n                 annotations=[dict(x='2020-03-15', y=1407, xref=\"x\", yref=\"y\", text=\"Lockdown Imposed(15th March)\", showarrow=True, arrowhead=1, ax=-100, ay=-200)])\nfig.show()","63d02295":"for i in data.CCAA.unique(): \n    \n    a = i.replace(\".\",\"\")\n    a = a.replace(\" \",\"_\")\n    \n    exec('df_{}=data[data.CCAA == i]'.format(a))\n    \n    exec('aux_a = df_{}.Infected.to_list()'.format(a))\n    \n    \n    daily=[]\n    for i in range(len(aux_a)-1):\n        b = aux_a[i+1] - aux_a[i]\n        daily.append(b)\n    \n    daily.insert(0,0)   \n\n    exec('df_{}[\"Daily_infected\"] = daily'.format(a))\n    \n    exec('aux_d = df_{}.Deaths.to_list()'.format(a))\n    \n    \n    daily=[]\n    for i in range(len(aux_d)-1):\n        b = aux_d[i+1] - aux_d[i]\n        daily.append(b)\n    \n    daily.insert(0,0)   \n\n    exec('df_{}[\"Daily_deaths\"] = daily'.format(a))\n","394080d4":"df_daily_infected = pd.DataFrame({\"Date\":data.Date.unique(),\n                                 \"Madrid\":df_Madrid[\"Daily_infected\"].values,\n                                 \"Catalu\u00f1a\":df_Catalu\u00f1a[\"Daily_infected\"].values,\n                                 \"Andalucia\":df_Andaluc\u00eda[\"Daily_infected\"].values,\n                                 \"Castilla La Mancha\":df_Castilla_La_Mancha[\"Daily_infected\"].values,\n                                 \"Castilla y Leon\":df_Castilla_y_Le\u00f3n[\"Daily_infected\"].values,\n                                 \"Pa\u00eds Vasco\":df_Pa\u00eds_Vasco[\"Daily_infected\"].values})","557b75f3":"aux_i = df_daily_infected.melt(id_vars=\"Date\", value_vars=(\"Madrid\",\"Catalu\u00f1a\",\"Andalucia\",\"Castilla La Mancha\",\"Castilla y Leon\",\"Pa\u00eds Vasco\"), value_name=\"Count\" , var_name= \"CCAA\")","877dfcf2":"aux_1=aux_i[aux_i.Date>\"18-04-2020\"]","5cf7dfa0":"fig = px.bar (aux_1, x= \"Date\", y = \"Count\", color=\"CCAA\", title= \"Daily infections in Spain (Top 6)\")\nfig.show()","77ec659d":"df_daily_fatalities = pd.DataFrame({\"Date\":data.Date.unique(),\n                                 \"Madrid\":df_Madrid[\"Daily_deaths\"].values,\n                                 \"Catalu\u00f1a\":df_Catalu\u00f1a[\"Daily_deaths\"].values,\n                                 \"Valencia\":df_C_Valenciana[\"Daily_deaths\"].values,\n                                 \"Castilla La Mancha\":df_Castilla_La_Mancha[\"Daily_deaths\"].values,\n                                 \"Castilla y Leon\":df_Castilla_y_Le\u00f3n[\"Daily_deaths\"].values,\n                                 \"Pa\u00eds Vasco\":df_Pa\u00eds_Vasco[\"Daily_deaths\"].values})","b09838d7":"aux_f = df_daily_fatalities.melt(id_vars=\"Date\", value_vars=(\"Madrid\",\"Catalu\u00f1a\",\"Valencia\",\"Castilla La Mancha\",\"Castilla y Leon\",\"Pa\u00eds Vasco\"), value_name=\"Count\" , var_name= \"CCAA\")","f429ae64":"fig = px.line (aux_f, x= \"Date\", y = \"Count\", color=\"CCAA\", title= \"Daily Death in Spain (Top 6)\")\nfig.show()","e8e9db32":"fig = px.bar (aux_f, x= \"Date\", y = \"Count\", color=\"CCAA\", title= \"Daily Deaths in Spain (Top 6)\")\nfig.show()","48490882":"datewise_spain=data.groupby([\"Date\"]).agg({\"Infected\":'sum',\"Deaths\":'sum'})","6761f3ac":"spain_increase_confirm=[]\nspain_increase_deaths=[]\nfor i in range(datewise_spain.shape[0]-1):\n    spain_increase_confirm.append(((datewise_spain[\"Infected\"].iloc[i+1])\/datewise_spain[\"Infected\"].iloc[i]))\n    spain_increase_deaths.append(((datewise_spain[\"Deaths\"].iloc[i+1])\/datewise_spain[\"Deaths\"].iloc[i]))\nspain_increase_confirm.insert(0,1)\nspain_increase_deaths.insert(0,1)\n","8de4f9d1":"datewise_spain[\"WeekOfYear\"]=datewise_spain.index.weekofyear\n\nweek_num_spain=[]\nspain_weekwise_confirmed=[]\nspain_weekwise_recovered=[]\nspain_weekwise_deaths=[]\nw=1\nfor i in list(datewise_spain[\"WeekOfYear\"].unique()):\n    spain_weekwise_confirmed.append(datewise_spain[datewise_spain[\"WeekOfYear\"]==i][\"Infected\"].iloc[-1])\n    spain_weekwise_deaths.append(datewise_spain[datewise_spain[\"WeekOfYear\"]==i][\"Deaths\"].iloc[-1])\n    week_num_spain.append(w)\n    w=w+1\n    \nfig=go.Figure()\nfig.add_trace(go.Scatter(x=week_num_spain, y=spain_weekwise_confirmed,\n                    mode='lines+markers',\n                    name='Weekly Growth of Confirmed Cases'))\nfig.add_trace(go.Scatter(x=week_num_spain, y=spain_weekwise_deaths,\n                    mode='lines+markers',\n                    name='Weekly Growth of Death Cases'))\nfig.update_layout(title=\"Weekly Growth of different types of Cases in Spain\",\n                 xaxis_title=\"Week Number\",yaxis_title=\"Number of Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","86f2e9a0":"d_name = {\n'AN':'Andaluc\u00eda',\n'AR':'Arag\u00f3n',\n'AS':'Asturias',\n'IB':'Baleares',\n'CN':'Canarias',\n'CB':'Cantabria',\n'CM':'Castilla La Mancha',\n'CL':'Castilla y Le\u00f3n',\n'CT':'Catalu\u00f1a',\n'CE':'Ceuta',\n'VC':'C. Valenciana',\n'EX':'Extremadura',\n'GA':'Galicia',\n'MD':'Madrid',\n'ML':'Melilla',\n'MC':'Murcia',\n'NC':'Navarra',\n'PV':'Pa\u00eds Vasco',\n'RI':'La Rioja'\n}","90588abd":"d_ccaa = {\n'Andaluc\u00eda': 'Andaluc\u00eda',\n'Arag\u00f3n': 'Arag\u00f3n',\n'Asturias': 'Principado de Asturias',\n'Baleares': 'Islas Baleares',\n'Canarias': 'Islas Canarias',\n'Cantabria':'Cantabria',\n'Castilla La Mancha': 'Castilla-La Mancha',\n'Castilla y Le\u00f3n': 'Castilla y Le\u00f3n',\n'Catalu\u00f1a': 'Catalu\u00f1a',\n'Ceuta': 'Ceuta y Melilla',\n'C. Valenciana': 'Comunidad Valenciana',\n'Extremadura': 'Extremadura',\n'Galicia': 'Galicia',\n'Madrid': 'Comunidad de Madrid',\n'Melilla': 'Ceuta y Melilla',\n'Murcia': 'Regi\u00f3n de Murcia',\n'Navarra': 'Comunidad Foral de Navarra',\n'Pa\u00eds Vasco': 'Pa\u00eds Vasco',\n'La Rioja': 'La Rioja'\n}","6a9d3de4":"d_ccaa_id = {\n'Andaluc\u00eda': \"1\",\n'Arag\u00f3n' : \"2\",\n'Principado de Asturias': \"3\",\n'Islas Baleares': \"4\",\n'Islas Canarias': \"5\",\n'Cantabria': \"6\",\n'Castilla-La Mancha': \"7\",\n'Castilla y Le\u00f3n': \"8\",\n'Catalu\u00f1a': \"9\",\n'Ceuta y Melilla': \"10\",\n'Comunidad Valenciana': \"11\",\n'Extremadura': \"12\",\n'Galicia': \"13\",\n'Comunidad de Madrid' : \"14\",\n'Ceuta y Melilla': \"15\",\n'Regi\u00f3n de Murcia': \"16\",\n'Comunidad Foral de Navarra': \"17\",\n'Pa\u00eds Vasco': \"18\",\n'La Rioja': \"19\"\n}","ffc2fff7":"d_ccaa_population = {\n'Andaluc\u00eda': 8414240,\n'Arag\u00f3n' : 1319291,\n'Principado de Asturias': 1022800,\n'Islas Baleares': 1149460,\n'Islas Canarias': 2153389,\n'Cantabria': 581078,\n'Castilla-La Mancha': 2032863,\n'Castilla y Le\u00f3n': 2399548,\n'Catalu\u00f1a': 7675217,\n'Ceuta y Melilla': 171264,\n'Comunidad Valenciana': 5003769,\n'Extremadura': 1067710,\n'Galicia': 2699499,\n'Comunidad de Madrid' : 6663394,\n'Ceuta y Melilla': 171264,\n'Regi\u00f3n de Murcia': 1493898,\n'Comunidad Foral de Navarra': 654214,\n'Pa\u00eds Vasco': 2207776,\n'La Rioja': 316798\n}","95f31208":"def get_hex_colors(df, data_to_color, cmap = matplotlib.cm.Reds, log = False):\n    \n    '''\n    This function takes the following arguments\n        1. df:pandas DataFrame with the data.\n        2. data_to_color: the column name with data based on which we want to create the color scale.\n        3. cmap: colors you want to plot. You can use this to communicate different messages. For example: greens --> good, greys --> deaths.\n                default is matplotlib.cm.Reds\n                more about colormaps: https:\/\/matplotlib.org\/3.1.1\/gallery\/color\/colormap_reference.html\n        3. log: if data has huge outliers, we can create the color map with a logarithic normalization. This way, the outliers won't \"pale\" our other data.\n                default is False.\n        \n    '''\n    \n    cmap = cmap # define the color pallete you want. You can use Reds, Blues, Greens etc\n    my_values = df[data_to_color] # get the value you wan to convert to colors\n    \n    mini = min(my_values) # get the min to normalize\n    maxi= max(my_values) # get the max to normalize\n    \n    LOGMIN = 0.01 # arbitrary lower bound for log scale\n    \n    if log: \n        norm = matplotlib.colors.LogNorm(vmin=max(mini,LOGMIN), vmax=maxi) # normalize log data\n    else:\n        norm = matplotlib.colors.Normalize(vmin=mini, vmax=maxi) # create a color range\n        \n    colors = {value:matplotlib.colors.rgb2hex(cmap(norm(value))[:3]) for value in sorted(list(set(my_values)))} # create a dictionary with the total_infected or deaths as keys and colors as values\n    \n    return colors","d09c9171":"def get_hex_colors_2(value, cats):\n    '''\n    Color paletter used from this website:\n    \n    https:\/\/colorbrewer2.org\/#type=sequential&scheme=Reds&n=9\n    \n    The color selection will be based on the percentile each value is in.\n    '''\n    if value == 0:\n        return \"#FFFFFF\"\n    elif value in cats[0]:\n        return \"#fff5f0\"\n    elif value in cats[1]:\n        return \"#fee0d2\"\n    elif value in cats[2]:\n        return \"#fcbba1\"\n    elif value in cats[3]:\n        return \"#fc9272\"\n    elif value in cats[4]:\n        return \"#fb6a4a\"\n    elif value in cats[5]:\n        return \"#ef3b2c\"\n    elif value in cats[6]:\n        return \"#cb181d\"\n    elif value in cats[7]:\n        return \"#a50f15\"\n    elif value in cats[8]:\n        return \"#67000d\"\n    else:\n        return \"#000000\"","59ae0fdf":"df = pd.read_csv(PATH_DATA, delimiter=\",\", encoding=\"latin1\", skiprows=range(1730,1739))","623a4785":"df.rename(columns = {\"FECHA\":\"DATE\",\n                    \"CASOS\":\"CASES\",\n                     \"PCR+\":\"TOTAL_INFECTED\",\n                    \"Hospitalizados\":\"REQUIERED_HOSPITALIZATION\",\n                    \"UCI\":\"REQUIERED_ADVANCED_CARE\",\n                    \"Fallecidos\":\"TOTAL_DEATHS\"}, inplace = True)\n\ndf.fillna(0, inplace = True)\ndf[\"CCAA\"] = df[\"CCAA\"].map(d_name)\ndf[\"CCAA_for_Folium\"] = df[\"CCAA\"].map(d_ccaa)\ndf[\"id\"] = df[\"CCAA_for_Folium\"].map(d_ccaa_id)\n\ndf[\"Population\"] = df[\"CCAA_for_Folium\"].map(d_ccaa_population)\n","bcccc7a7":"def correct_date(date_str):\n    list_dates = date_str.split(\"\/\")\n    day = list_dates[0]\n    month = list_dates[1]\n    year = list_dates[2]\n    \n    if len(day) == 1:\n        day = \"0\" + day\n    if len(month) == 1:\n        month = \"0\" + month\n        \n    return \"\/\".join([day, month, year])","ebe454b7":"df[\"NEW_DATE\"] = df[\"DATE\"].apply(correct_date)","041bda3b":"df[\"DATE\"] = pd.to_datetime(df[\"NEW_DATE\"], format='%d\/%m\/%Y')\n\ndf[\"DATE_for_Folium\"] = (df[\"DATE\"].astype(int)\/\/ 10**9).astype('U10')\n\ndf = df[[\"id\", \"CCAA\", \"CCAA_for_Folium\", \"DATE\", \"DATE_for_Folium\", \"TOTAL_INFECTED\", \"REQUIERED_HOSPITALIZATION\", \"REQUIERED_ADVANCED_CARE\", \"TOTAL_DEATHS\",\"Population\"]]\ndf[\"id\"].astype(np.int16)\ndf.head()","c0538ca2":"gdf = gpd.read_file(PATH_GEO_JSON)\ngdf[\"id\"] = gdf[\"name_1\"].map(d_ccaa_id) # create a numerical id for each ccaa\ngdf = gdf[[\"id\", \"shape_leng\",\"shape_area\",\"geometry\"]] # extract the id and the geometry (coordinates of each ccaa)\ngdf[\"geometry\"] = gdf[\"geometry\"].simplify(0.1, preserve_topology = False)\ngdf[\"id\"].astype(int)\ngdf.head()","a5998abd":"\nm = folium.Map(location = (40, 0), zoom_start = 5.5)\n\nfolium.Choropleth(\n    geo_data = gdf,\n    name = 'choropleth',\n    data = df[df[\"DATE\"] == max(df[\"DATE\"])],\n    columns = ['id', 'TOTAL_INFECTED'],\n    key_on='feature.properties.id',\n    fill_color='RdPu',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    legend_name = 'Total infected cases in Spain by region'\n).add_to(m)\n\nm","2469d056":"\nm = folium.Map(location = (40, 0), zoom_start = 5.5)\n\nfolium.Choropleth(\n    geo_data = gdf,\n    name = 'choropleth',\n    data = df,\n    columns = ['id', 'TOTAL_DEATHS'],\n    key_on='feature.properties.id',\n    fill_color='RdPu',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    legend_name = 'Total deaths in Spain by region'\n).add_to(m)\n\nm","8c620436":"#----------------------------------------------------------------------------------\ndata_to_color = \"TOTAL_INFECTED\"\ncats, bins =  pd.qcut(df[data_to_color].unique()[np.argsort(df[data_to_color].unique())], q = 9, retbins = True)\ncats = cats.unique()\n\n#----------------------------------------------------------------------------------\n\n# value we will iterate in order to create the styledict\nccaas = list(df[\"id\"].unique())\ndates = list(df[\"DATE_for_Folium\"].unique())\n\n# create the color dict and color column\ndf[\"COLORS\"] = df[data_to_color].apply(get_hex_colors_2, args = [cats]) # we create a colum in the df so that we can iterate and create the styledict\n\n# creates the styledict for the map\nstyledict = {}\n\n# iterate the populate the styledict\nfor ccaa in ccaas:\n    styledict[str(ccaa)] = {date: {'color': df[(df[\"id\"] == ccaa) & (df[\"DATE_for_Folium\"] == date)][\"COLORS\"].values[0],\n                                   'opacity': 0.6} for date in dates}\n    \n# creates and renders the Folium map\nm = folium.Map(location=(40, 0), tiles='OpenStreetMap', zoom_start=5.5)\n\ng = TimeSliderChoropleth(\n    gdf.set_index(\"id\").to_json(), # get's the coordinates for each id \n    styledict = styledict # styledict contains for each id the timestamp and the color to plot.\n)\n\nm.add_child(g)\n\n#--------------------------------------------------------------------------------------\n# Let's create a legend for folium\n# https:\/\/nbviewer.jupyter.org\/gist\/talbertc-usgs\/18f8901fc98f109f2b71156cf3ac81cd\n\nfrom branca.element import Template, MacroElement\n\ntemplate = \"\"\"\n{% macro html(this, kwargs) %}\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery UI Draggable - Default functionality<\/title>\n  <link rel=\"stylesheet\" href=\"\/\/code.jquery.com\/ui\/1.12.1\/themes\/base\/jquery-ui.css\">\n\n  <script src=\"https:\/\/code.jquery.com\/jquery-1.12.4.js\"><\/script>\n  <script src=\"https:\/\/code.jquery.com\/ui\/1.12.1\/jquery-ui.js\"><\/script>\n  \n  <script>\n  $( function() {\n    $( \"#maplegend\" ).draggable({\n                    start: function (event, ui) {\n                        $(this).css({\n                            right: \"auto\",\n                            top: \"auto\",\n                            bottom: \"auto\"\n                        });\n                    }\n                });\n});\n\n  <\/script>\n<\/head>\n<body>\n\n \n<div id='maplegend' class='maplegend' \n    style='position: absolute; z-index:9999; border:2px solid grey; background-color:rgba(255, 255, 255, 0.8);\n     border-radius:6px; padding: 10px; font-size:14px; right: 20px; bottom: 20px;'>\n     \n<div class='legend-title'>Legend<\/div>\n<div class='legend-scale'>\n  <ul class='legend-labels'>\n    <li><span style='background:#FFFFFF;opacity:0.6;'><\/span>No cases<\/li>\n    <li><span style='background:#fff5f0;opacity:0.6;'><\/span>1 Quantile<\/li>\n    <li><span style='background:#fee0d2;opacity:0.6;'><\/span>2 Quantile<\/li>\n    <li><span style='background:#fcbba1;opacity:0.6;'><\/span>3 Quantile<\/li>\n    <li><span style='background:#fc9272;opacity:0.6;'><\/span>4 Quantile<\/li>\n    <li><span style='background:#fb6a4a;opacity:0.6;'><\/span>5 Quantile<\/li>\n    <li><span style='background:#ef3b2c;opacity:0.6;'><\/span>6 Quantile<\/li>\n    <li><span style='background:#cb181d;opacity:0.6;'><\/span>7 Quantile<\/li>\n    <li><span style='background:#a50f15;opacity:0.6;'><\/span>8 Quantile<\/li>\n    <li><span style='background:#67000d;opacity:0.6;'><\/span>9 Quantile<\/li>\n    <li><span style='background:#000000;opacity:0.6;'><\/span>Other<\/li>\n  <\/ul>\n<\/div>\n<\/div>\n \n<\/body>\n<\/html>\n\n<style type='text\/css'>\n  .maplegend .legend-title {\n    text-align: left;\n    margin-bottom: 5px;\n    font-weight: bold;\n    font-size: 90%;\n    }\n  .maplegend .legend-scale ul {\n    margin: 0;\n    margin-bottom: 5px;\n    padding: 0;\n    float: left;\n    list-style: none;\n    }\n  .maplegend .legend-scale ul li {\n    font-size: 80%;\n    list-style: none;\n    margin-left: 0;\n    line-height: 18px;\n    margin-bottom: 2px;\n    }\n  .maplegend ul.legend-labels li span {\n    display: block;\n    float: left;\n    height: 16px;\n    width: 30px;\n    margin-right: 5px;\n    margin-left: 0;\n    border: 1px solid #999;\n    }\n  .maplegend .legend-source {\n    font-size: 80%;\n    color: #777;\n    clear: both;\n    }\n  .maplegend a {\n    color: #777;\n    }\n<\/style>\n{% endmacro %}\"\"\"\n\nmacro = MacroElement()\nmacro._template = Template(template)\n\nm.get_root().add_child(macro)\n","90915958":"#----------------------------------------------------------------------------------\ndata_to_color = \"TOTAL_DEATHS\"\ncats, bins =  pd.qcut(df[data_to_color].unique()[np.argsort(df[data_to_color].unique())], q = 9, retbins = True)\ncats = cats.unique()\n\n#----------------------------------------------------------------------------------\n\n# value we will iterate in order to create the styledict\nccaas = list(df[\"id\"].unique())\ndates = list(df[\"DATE_for_Folium\"].unique())\n\n# create the color dict and color column\ndf[\"COLORS\"] = df[data_to_color].apply(get_hex_colors_2, args = [cats]) # we create a colum in the df so that we can iterate and create the styledict\n\n# creates the styledict for the map\nstyledict = {}\n\n# iterate the populate the styledict\nfor ccaa in ccaas:\n    styledict[str(ccaa)] = {date: {'color': df[(df[\"id\"] == ccaa) & (df[\"DATE_for_Folium\"] == date)][\"COLORS\"].values[0],\n                                   'opacity': 0.6} for date in dates}\n    \n# creates and renders the Folium map\nm = folium.Map(location=(40, 0), tiles='OpenStreetMap', zoom_start=6)\n\ng = TimeSliderChoropleth(\n    gdf.set_index(\"id\").to_json(), # get's the coordinates for each id \n    styledict = styledict # styledict contains for each id the timestamp and the color to plot.\n)\n\nm.add_child(g)\n\n#--------------------------------------------------------------------------------------\n# Let's create a legend for folium\n# https:\/\/nbviewer.jupyter.org\/gist\/talbertc-usgs\/18f8901fc98f109f2b71156cf3ac81cd\n\nfrom branca.element import Template, MacroElement\n\ntemplate = \"\"\"\n{% macro html(this, kwargs) %}\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery UI Draggable - Default functionality<\/title>\n  <link rel=\"stylesheet\" href=\"\/\/code.jquery.com\/ui\/1.12.1\/themes\/base\/jquery-ui.css\">\n\n  <script src=\"https:\/\/code.jquery.com\/jquery-1.12.4.js\"><\/script>\n  <script src=\"https:\/\/code.jquery.com\/ui\/1.12.1\/jquery-ui.js\"><\/script>\n  \n  <script>\n  $( function() {\n    $( \"#maplegend\" ).draggable({\n                    start: function (event, ui) {\n                        $(this).css({\n                            right: \"auto\",\n                            top: \"auto\",\n                            bottom: \"auto\"\n                        });\n                    }\n                });\n});\n\n  <\/script>\n<\/head>\n<body>\n\n \n<div id='maplegend' class='maplegend' \n    style='position: absolute; z-index:9999; border:2px solid grey; background-color:rgba(255, 255, 255, 0.8);\n     border-radius:6px; padding: 10px; font-size:14px; right: 20px; bottom: 20px;'>\n     \n<div class='legend-title'>Legend<\/div>\n<div class='legend-scale'>\n  <ul class='legend-labels'>\n    <li><span style='background:#FFFFFF;opacity:0.6;'><\/span>No cases<\/li>\n    <li><span style='background:#fff5f0;opacity:0.6;'><\/span>1 Quantile<\/li>\n    <li><span style='background:#fee0d2;opacity:0.6;'><\/span>2 Quantile<\/li>\n    <li><span style='background:#fcbba1;opacity:0.6;'><\/span>3 Quantile<\/li>\n    <li><span style='background:#fc9272;opacity:0.6;'><\/span>4 Quantile<\/li>\n    <li><span style='background:#fb6a4a;opacity:0.6;'><\/span>5 Quantile<\/li>\n    <li><span style='background:#ef3b2c;opacity:0.6;'><\/span>6 Quantile<\/li>\n    <li><span style='background:#cb181d;opacity:0.6;'><\/span>7 Quantile<\/li>\n    <li><span style='background:#a50f15;opacity:0.6;'><\/span>8 Quantile<\/li>\n    <li><span style='background:#67000d;opacity:0.6;'><\/span>9 Quantile<\/li>\n    <li><span style='background:#000000;opacity:0.6;'><\/span>Other<\/li>\n  <\/ul>\n<\/div>\n<\/div>\n \n<\/body>\n<\/html>\n\n<style type='text\/css'>\n  .maplegend .legend-title {\n    text-align: left;\n    margin-bottom: 5px;\n    font-weight: bold;\n    font-size: 90%;\n    }\n  .maplegend .legend-scale ul {\n    margin: 0;\n    margin-bottom: 5px;\n    padding: 0;\n    float: left;\n    list-style: none;\n    }\n  .maplegend .legend-scale ul li {\n    font-size: 80%;\n    list-style: none;\n    margin-left: 0;\n    line-height: 18px;\n    margin-bottom: 2px;\n    }\n  .maplegend ul.legend-labels li span {\n    display: block;\n    float: left;\n    height: 16px;\n    width: 30px;\n    margin-right: 5px;\n    margin-left: 0;\n    border: 1px solid #999;\n    }\n  .maplegend .legend-source {\n    font-size: 80%;\n    color: #777;\n    clear: both;\n    }\n  .maplegend a {\n    color: #777;\n    }\n<\/style>\n{% endmacro %}\"\"\"\n\nmacro = MacroElement()\nmacro._template = Template(template)\n\nm.get_root().add_child(macro)\n\n","8c8d1bdb":"df[\"Infected_1000h\"] = df[\"TOTAL_INFECTED\"]\/(df[\"Population\"]\/1000)\ndf[\"Mortality_rate\"] = df[\"TOTAL_DEATHS\"] \/ df[\"TOTAL_INFECTED\"]\ndf.fillna(0, inplace = True)\ndf.head()","77d863f1":"plt.figure(figsize = (20, 10))\n\nfor ccaa in sorted(list(df[\"CCAA\"].unique())):\n    \n    x = df[\"DATE\"].unique()\n    y = df[df[\"CCAA\"] == ccaa][\"Mortality_rate\"]\n    \n    plt.plot(x, y, label = ccaa)\n    plt.title(\"Evolution of Mortality rate over time\")\n    plt.legend()\n    plt.xticks(rotation=90)","f6a098aa":"\nx = [day for day in range(len(df[\"DATE\"].unique()))]\n\nfig, axes = plt.subplots(nrows=4, ncols=5, figsize=(30,20))\n# plt.setp(axes, ylim=(0 ,max(df[\"Mortality rate\"])))\nccaas = list(df[\"CCAA\"].unique())\n\ni = 0\n\nfor col_axes in axes:\n    for ax in col_axes:\n        if i < len(ccaas):\n            ccaa = ccaas[i]\n            y = df[df[\"CCAA\"] == ccaa][\"Mortality_rate\"].values\n            \n            ipeaks, _ = find_peaks(y)\n            \n            ax.plot(x, y, color = \"k\", alpha = 0.7)\n            ax.scatter(ipeaks, np.array(y)[ipeaks], color = \"red\", label = \"Local peaks of mortality\")\n            ax.scatter(x[list(y).index(np.max(y))], np.max(y), color = \"k\", marker = \"o\", alpha = 0.7, s = 250, label = \"Max of mortality\")\n            \n            ax.set_title(\"Mortality rate {}\".format(ccaa))\n            ax.legend()\n            ax.grid()\n            i += 1\n\nfig.delaxes(axes[3, 4])","003500f6":"total_df = df.set_index(\"DATE\").resample(\"D\")[[\"TOTAL_INFECTED\", \"REQUIERED_HOSPITALIZATION\", \"REQUIERED_ADVANCED_CARE\", \"TOTAL_DEATHS\",\"Population\"]].sum()\ntotal_df = total_df[total_df[\"Population\"] > 0]\ntotal_df[\"TOTAL_INFECTED_1000H\"] = total_df[\"TOTAL_INFECTED\"]\/(total_df[\"Population\"]\/1000)\ntotal_df[\"TOTAL_DEATHS_1000H\"] = total_df[\"TOTAL_DEATHS\"]\/(total_df[\"Population\"]\/1000)\n\n# get the data\nx = list(total_df.index)\ny_1 = list(total_df[\"TOTAL_INFECTED_1000H\"]) # 1 axis\ny_2 = list(total_df[\"TOTAL_DEATHS_1000H\"]) # 2 axis\n\n# create the figures\nfig, ax = plt.subplots(figsize = (15, 7))\nplot1 = ax.plot(x, y_1, color = \"r\", label = \"Total infected per 1000 habitants\") # plot the first data\nplt.xticks(rotation=90) # rotate the date\n\nax2 = ax.twinx() # create a secondary axis\nplot2 = ax2.plot(x, y_2, color = \"k\", label = \"Total deaths per 1000 habitants\") # plot the second data\nfig.tight_layout()\nplt.title(\"Evolution of total infected cases and total deaths per 1000 habitants\")\n\n# create a common legend\nlns = plot1 + plot2\nlabs = [l.get_label() for l in lns]\nax.legend(lns, labs, loc=0)\n\n# prettify\nax.grid()\nax.set_xlabel(\"Date\")\nax.set_ylabel(\"Ratio of total infected per 1000 habitants\")\nax2.set_ylabel(\"Ratio of total deaths per 1000 habitants\")","6b08176f":"total_df[\"SHIFT_7_DAYS\"] = total_df[\"TOTAL_INFECTED\"].shift(-7)\ntotal_df[\"SHIFT_14_DAYS\"] = total_df[\"TOTAL_INFECTED\"].shift(-14)","e1398883":"x = np.array([x for x in range(len(total_df.index))])\ny_informed = total_df[\"TOTAL_INFECTED\"]\ny_real_7_days = total_df[\"SHIFT_7_DAYS\"]\ny_real_14_days = total_df[\"SHIFT_14_DAYS\"]\nwidth = np.min(np.diff(x))\/3\n\nfig = plt.figure(figsize = (20, 10))\n\nax = fig.add_subplot(111)\nax.bar(x - width, y_informed, width, color = 'b', label = 'Known cases', alpha = 0.5)\nax.bar(x, y_real_7_days, width, color = 'r', label = '\"Real Cases\" shift 1 week', alpha = 0.4)\nax.bar(x + width, y_real_14_days, width, color='k', label = '\"Real Cases\" shift 2 week', alpha = 0.3)\nax.set_xlabel('Days since first infected case.')\n\nplt.title(\"Known infected cases vs 'Real Cases' with a 1 and 2 week shift\")\nplt.axvline(x=17, lw = 1, alpha = 0.3, ymax = 0.4, color = \"purple\")\nplt.annotate(\"8 March manifestation held\", xy= (15, 80000), color = \"purple\")\n\ntextstr = '\\n'.join((\n    r'Known cases vs \"Real Cases\" 1 week shift: {:,.0f}'.format(total_df.iloc[17][\"SHIFT_7_DAYS\"] - total_df.iloc[17][\"TOTAL_INFECTED\"]),\n    r'Known cases vs \"Real Cases\" 2 week shift: {:,.0f}'.format(total_df.iloc[17][\"SHIFT_14_DAYS\"] - total_df.iloc[17][\"TOTAL_INFECTED\"])))\n\nprops = dict(boxstyle='round', facecolor='purple', alpha=0.5)\n\n# place a text box in upper left in axes coords\nax.text(0.05, 0.6, textstr, transform=ax.transAxes, fontsize=14,\n        verticalalignment='top', bbox=props)\n\nplt.legend()","b762aafb":"short_df = df[df[\"DATE\"] == max(df[\"DATE\"])][[\"CCAA\", \"Mortality_rate\"]].sort_values(\"Mortality_rate\", ascending = False)\nx = short_df[\"CCAA\"]\ny = short_df[\"Mortality_rate\"]\n\nmean_y = np.mean(y)\nmean_y\n\nplt.figure(figsize = (10, 5))\nplt.scatter(x, y, c= \"red\", alpha = 0.5)\nplt.title(\"Mortality rate by region\")\n\nplt.xticks(rotation=90)\nplt.axhline(mean_y, c = \"k\", alpha = 0.5, lw = 1)\nplt.annotate('Mean mortality is {}%'.format(round(mean_y * 100, 2)),\n             xy=(12, mean_y),\n             xycoords='data',\n             xytext=(50, 50), \n             textcoords='offset points',\n             arrowprops=dict(arrowstyle=\"->\", color = \"k\", alpha = 0.5),\n             color = \"k\")","f191e53b":"infected = pd.read_csv('\/kaggle\/input\/covid19inspain\/ccaa_covid19_casos_long.csv')\nuci_beds = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_camas_uci_2017.csv')\nrecovered = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_altas_long.csv')\ndeath = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_fallecidos_long.csv')\nhospitalized = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_hospitalizados_long.csv')\nmasks = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_mascarillas.csv')\nicu = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/ccaa_covid19_uci_long.csv')\nnational = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/nacional_covid19.csv')\nage_range = pd.read_csv('\/kaggle\/input\/covid19-in-spain\/nacional_covid19_rango_edad.csv')","d576efa4":"max_date = infected['fecha'].max()","cc407b10":"def dateplot(x, y, **kwargs):\n    ax = plt.gca()\n    data = kwargs.pop(\"data\")\n    data.plot(x=x, y=y, ax=ax, grid=False, **kwargs)","455189ba":"infected['fecha'] = pd.to_datetime(infected['fecha'])\nhospitalized['fecha'] = pd.to_datetime(hospitalized['fecha'])\nicu['fecha'] = pd.to_datetime(icu['fecha'])\nrecovered['fecha'] = pd.to_datetime(recovered['fecha'])\ndeath['fecha'] = pd.to_datetime(death['fecha'])","2c14f1db":"infected = infected[infected['CCAA']!= 'Total']\ng = sns.FacetGrid(infected, col=\"CCAA\", col_wrap=5, height=3.5)\ng = g.map_dataframe(dateplot, \"fecha\", \"total\").set(yscale='log')\ng = g.map(plt.fill_between, 'fecha', 'total', alpha=0.2).set_titles(\"{col_name} CCAA\")\ng = g.set_titles(\"{col_name}\")\nplt.subplots_adjust(top=0.92)\ng = g.fig.suptitle('Evolution of total infected in CCAA (log scale)')","7d81fbf8":"icu= icu[icu['CCAA']!= 'Total']\ng = sns.FacetGrid(icu, col=\"CCAA\", col_wrap=5, height=3.5)\ng = g.map_dataframe(dateplot, \"fecha\", \"total\").set(yscale='log')\ng = g.map(plt.fill_between, 'fecha', 'total', alpha=0.2).set_titles(\"{col_name} CCAA\")\ng = g.set_titles(\"{col_name}\")\nplt.subplots_adjust(top=0.92)\ng = g.fig.suptitle('Evolution of total ICU patients in CCAA (log scale)')","b1aeb6ed":"hospitalized = hospitalized[hospitalized['CCAA']!= 'Total']\ng = sns.FacetGrid(hospitalized, col=\"CCAA\", col_wrap=5, height=3.5)\ng = g.map_dataframe(dateplot, \"fecha\", \"total\").set(yscale='log')\ng = g.map(plt.fill_between, 'fecha', 'total', alpha=0.2).set_titles(\"{col_name} CCAA\")\ng = g.set_titles(\"{col_name}\")\nplt.subplots_adjust(top=0.92)\ng = g.fig.suptitle('Evolution of total hospitalized in CCAA (Log Scale) ')","6b615d5c":"recovered = recovered[recovered['CCAA']!= 'Total']\ng = sns.FacetGrid(recovered, col=\"CCAA\", col_wrap=5, height=3.5)\ng = g.map_dataframe(dateplot, \"fecha\", \"total\").set(yscale='log')\ng = g.map(plt.fill_between, 'fecha', 'total', alpha=0.2).set_titles(\"{col_name} CCAA\")\ng = g.set_titles(\"{col_name}\")\nplt.subplots_adjust(top=0.92)\ng = g.fig.suptitle('Evolution of total recovered in CCAA (Log Scale)')","4fbf2422":"death = death[death['CCAA']!= 'Total']\ng = sns.FacetGrid(death, col=\"CCAA\", col_wrap=5, height=3.5)\ng = g.map_dataframe(dateplot, \"fecha\", \"total\").set(yscale='log')\ng = g.map(plt.fill_between, 'fecha', 'total', alpha=0.2).set_titles(\"{col_name} CCAA\")\ng = g.set_titles(\"{col_name}\")\nplt.subplots_adjust(top=0.92)\ng = g.fig.suptitle('Evolution of total deaths in CCAA (log scale)')","2e8d20ad":"infected_last = infected[infected['fecha']== max_date]\nrecovered_last = recovered[recovered['fecha']== max_date]\nhospitalized_last = hospitalized[hospitalized['fecha']== max_date]\ndeath_last = death[death['fecha']== max_date]\nuci_last = icu[icu['fecha']== max_date]","d53ead3f":"df_an = pd.DataFrame(data ={'Infected': infected_last['total'].values,\n                            'Hospitalized':hospitalized_last['total'].values,\n                            'ICU':uci_last['total'].values,\n                            'Recovered': recovered_last['total'].values,\n                            'Death':death_last['total'].values},\n                             index = infected_last['CCAA'])","59962010":"df_total = df_an[df_an.index=='Total'] \ndf_an= df_an[df_an.index!='Total']","82ca88df":"d = pd.to_datetime(str(max_date)).strftime('%Y-%m-%d')\ntitle = 'COVID-2019'\nchart_title = title + ' as of ' + d\nccaa = df_an.index.to_list()\nprint('Number of CCAA with confirmed cases = ',len(ccaa))\n\n# Looks lot have hit a limit of Sunburst chart\nmax_ccaa = df_an.index.unique()\nids = ccaa\nlabels = ccaa\nparents = [title] * len(ccaa)\nvalues = df_an['Infected'].to_list()\n\nclassifications = df_an.columns.drop('Infected').values\n\nfor cty in ccaa: \n    for c in classifications:\n        ids = ids + [cty + '-' + c]\n        parents = parents + [cty]\n        labels = labels + [c]\n        values = values + [df_an.loc[cty][c]]\n\ntrace = go.Sunburst(\n    ids=ids,\n    labels=labels,\n    parents=parents,\n    values=values,\n    outsidetextfont={\"size\": 20, \"color\": \"#377eb8\"},\n#     leaf={\"opacity\": 0.4},\n    marker={\"line\": {\"width\": 2}}\n)\n\nlayout = go.Layout(\n    title = chart_title + \"<br>(click on CCAA to view details)\",\n    margin = go.layout.Margin(t=100, l=0, r=0, b=0),\n    sunburstcolorway=[\"#636efa\",\"#ef553b\",\"#00cc96\"]\n)\n\nfig = go.Figure([trace], layout)\n\npy.iplot(fig)","06afd046":"age_range= age_range[age_range['rango_edad']!='Total']\nage_range= age_range[age_range['rango_edad']!='80 y +']\nno_gender = age_range[age_range['sexo']=='ambos']","62236bb2":"g = sns.catplot(x=\"rango_edad\", y=\"casos_confirmados\", hue=\"sexo\", data=no_gender, kind=\"bar\", height=5,aspect=3,palette=\"muted\")\ng.despine(left=True)\ng.set_ylabels(\"Total infected\")","a6d3ac8f":"last = age_range[age_range.iloc[:,0]== age_range.iloc[:,0].max()]","8865edb7":"for i in range(last['ingresos_uci'].shape[0]):\n    if last.iloc[i,5] == 'i':\n        last.iloc[i,5] = 0\n        \nlast['ingresos_uci']= last['ingresos_uci'].astype(int)","ec8927b5":"last['casos_confirmados'] = last['casos_confirmados'] \/ np.linalg.norm(last['casos_confirmados'])\nlast['hospitalizados'] = last['hospitalizados'] \/ np.linalg.norm(last['hospitalizados'])\nlast['ingresos_uci'] = last['ingresos_uci'] \/ np.linalg.norm(last['ingresos_uci'])\nlast['fallecidos'] = last['fallecidos'] \/ np.linalg.norm(last['fallecidos'])\n","ffbe8e9e":"last_ambos = last[last['sexo']=='ambos']\nlast_gender = last[last['sexo']!='ambos']\n","24d56c58":"plt.figure(figsize=(15,5))\nplt.plot(last_ambos['rango_edad'], last_ambos['casos_confirmados'],color = 'green',label='Total infected')\nplt.plot(last_ambos['rango_edad'], last_ambos['hospitalizados'],color = 'red',label='Hospitalized')\nplt.plot( last_ambos['rango_edad'], last_ambos['ingresos_uci'],color = 'yellow',label='UCI')\nplt.plot( last_ambos['rango_edad'], last_ambos['fallecidos'],color = 'black',label='Death')\nplt.title('COVID-19 vs age groups')\nplt.legend()","e2e0f60a":"plt.figure(figsize= (10,5))\nsns.relplot(x='rango_edad',y ='casos_confirmados', hue = 'sexo',kind='line',data = last_gender,height=5,aspect=4)\nplt.title('Comparison between men and women: Total infections')","a358dd46":"plt.figure(figsize= (10,5))\nsns.relplot(x='rango_edad',y ='hospitalizados', hue = 'sexo',kind='line',data = last_gender,height=5,aspect=4)\nplt.title('Comparison between men and women: Hospitalized')","d57f49e8":"plt.figure(figsize= (10,5))\nsns.relplot(x='rango_edad',y ='ingresos_uci', hue = 'sexo',kind='line',data = last_gender,height=5,aspect=4)\nplt.title('Comparison between men and women: ICU')","b8496349":"plt.figure(figsize= (10,5))\nsns.relplot(x='rango_edad',y ='fallecidos', hue = 'sexo',kind='line',data = last_gender,height=5,aspect=4)\nplt.title('Comparison between men and women: Death')","2470e11e":"es_covid = pd.merge(infected,death,how='outer',left_on=['fecha','cod_ine','CCAA'],right_on=['fecha','cod_ine','CCAA'],suffixes=('_confirmed','_deaths')).merge(icu,how='outer', left_on=['fecha','cod_ine','CCAA'], right_on=['fecha','cod_ine','CCAA']).merge(hospitalized, how='outer', left_on=['fecha','cod_ine','CCAA'], right_on=['fecha','cod_ine','CCAA'],suffixes=('_uci', '_hosp')).merge(recovered, how='outer', left_on=['fecha','cod_ine','CCAA'], right_on=['fecha','cod_ine','CCAA'])\nes_covid[\"fecha\"] = pd.to_datetime(es_covid['fecha'])","c48964a3":"es_covid = es_covid.sort_values(by=['CCAA', 'fecha'])\nes_covid['diff_total_confirmed'] = es_covid.groupby(['CCAA'])['total_confirmed'].diff().fillna(es_covid['total_confirmed'])\nes_covid['diff_total_deaths'] = es_covid.groupby(['CCAA'])['total_deaths'].diff().fillna(es_covid['total_deaths'])\nes_covid['diff_total_recovered'] = es_covid.groupby(['CCAA'])['total'].diff().fillna(es_covid['total'])\n\nes_covid['diff_total_confirmed'].fillna(0, inplace=True)\nes_covid['diff_total_deaths'].fillna(0, inplace=True)\nes_covid['diff_total_recovered'].fillna(0, inplace=True)\n\nes_covid['day_num'] = preprocessing.LabelEncoder().fit_transform(es_covid.fecha)\n\ndisplay(es_covid.loc[es_covid['fecha'] > '2020-05-20'])","100831df":"missings_count = {col:es_covid[col].isnull().sum() for col in es_covid.columns}\nprint(pd.DataFrame.from_dict(missings_count, orient='index').nlargest(30, 0))\ndel missings_count","f74e21f2":"es_dic_pob = {'CCAA': ['Andaluc\u00eda','Arag\u00f3n','Asturias','Baleares','Canarias','Cantabria','Castilla y Le\u00f3n','Castilla La Mancha','Catalu\u00f1a','C. Valenciana','Extremadura','Galicia','Madrid','Murcia','Navarra','Pa\u00eds Vasco','La Rioja','Ceuta','Melilla'],\n          'hombres': [4147167,650694,488137,572757,1065971,281801,1181401,1016954,3770123,2465342,5285,1298964,3187312,747615,323631,1073074,156179,42912,43894],\n          'mujeres': [4267073,668597,534663,576703,1087418,299277,1218147,1015909,3905094,2538427,53921,1400535,3476082,746283,330583,1134702,160619,41865,42593]\n               }       \nes_poblacion = pd.DataFrame(es_dic_pob, columns = ['CCAA','hombres', 'mujeres'])\nes_poblacion.reset_index().set_index('CCAA')\nes_poblacion['total'] = es_poblacion['hombres'] + es_poblacion['mujeres']\n\ndel es_dic_pob\nes_poblacion","c265d48c":"# Susceptible equation\ndef susceptibility(N, s, i, beta):\n    si = -beta*s*i\n    return si\n\n# Infected equation\ndef infection(N, s, i, beta, gamma):\n    inf = beta*s*i - gamma*i\n    return inf\n\n# Recovered\/deceased equation\ndef recovery(N, i, gamma):\n    rec = gamma*i\n    return rec","7db138b1":"# Runge-Kutta method of 4rth order for 3 dimensions (susceptible s, infected i snd recovered r)\ndef rK4(N, s, i, r, susceptibility, infection, recovery, beta, gamma, hs):\n    s1 = susceptibility(N, s, i, beta)*hs\n    i1 = infection(N, s, i, beta, gamma)*hs\n    r1 = recovery(N, i, gamma)*hs\n    sk = s + s1*0.5\n    ik = i + i1*0.5\n    rk = r + r1*0.5\n    s2 = susceptibility(N, sk, ik, beta)*hs\n    i2 = infection(N, sk, ik, beta, gamma)*hs\n    r2 = recovery(N, ik, gamma)*hs\n    sk = s + s2*0.5\n    ik = i + i2*0.5\n    rk = r + r2*0.5\n    s3 = susceptibility(N, sk, ik, beta)*hs\n    i3 = infection(N, sk, ik, beta, gamma)*hs\n    r3 = recovery(N, ik, gamma)*hs\n    sk = s + s3\n    ik = i + i3\n    rk = r + r3\n    s4 = susceptibility(N, sk, ik, beta)*hs\n    i4 = infection(N, sk, ik, beta, gamma)*hs\n    r4 = recovery(N, ik, gamma)*hs\n    s = s + (s1 + 2*(s2 + s3) + s4)\/6\n    i = i + (i1 + 2*(i2 + i3) + i4)\/6\n    r = r + (r1 + 2*(r2 + r3) + r4)\/6\n    return s, i, r","38486dc7":"def SIR(N, b0, beta, gamma, hs):\n\n    # Initial condition\n    s = float(N-1)\/N -b0\n    i = float(1)\/N +b0\n    r = 0.\n\n    sus, inf, rec= [],[],[]\n    for j in range(10000): # Run for a certain number of time-steps\n        sus.append(s)\n        inf.append(i)\n        rec.append(r)\n        s,i,r = rK4(N, s, i, r, susceptibility, infection, recovery, beta, gamma, hs)\n\n    return sus, inf, rec\n","e3cbed24":"N = es_poblacion['total'].sum()\nb0 = 0\nbeta = 0.7\ngamma = 0.2\nhs = 0.1\n\nsus, inf, rec = SIR(N, b0, beta, gamma, hs)\nf = plt.figure(figsize=(8,5)) \nplt.plot(sus, 'b.', label='susceptible');\nplt.plot(inf, 'r.', label='infected');\nplt.plot(rec, 'c.', label='recovered\/deceased');\nplt.title('SIR Model')\nplt.xlabel(\"time\", fontsize=10);\nplt.ylabel(\"Fraction of population\", fontsize=10);\nplt.legend(loc='best')\nplt.xlim(0,1000)\nplt.show()\n\ndel N, b0, beta, gamma, hs, sus, inf, rec, f","68c2760e":"def sir_model(y, x, beta, gamma):\n    sus = -beta * y[0] * y[1] \/ N\n    rec = gamma * y[1] \n    inf = -(sus + rec)\n    return sus, inf, rec","dda9bd93":"def estimateParametersSIR(ccaa, initialDay):\n    country_df = pd.DataFrame()\n    country_df['ConfirmedCases'] = es_covid.loc[es_covid['CCAA']==ccaa].total_confirmed.diff().fillna(0)\n    # This cut it's caused by try visual fits over results\n    country_df =  country_df[initialDay:]\n    country_df['day_count'] = list(range(1,len(country_df)+1))\n\n    ydata = [i for i in country_df.ConfirmedCases]\n    xdata = country_df.day_count\n    ydata = np.array(ydata, dtype=float)\n    xdata = np.array(xdata, dtype=float)\n\n    N = es_poblacion.loc[es_poblacion['CCAA']==ccaa].total\n    inf0 = ydata[0]\n    sus0 = N - inf0\n    rec0 = 0.0\n\n    def sir_model(y, x, beta, gamma):\n        sus = -beta * y[0] * y[1] \/ N\n        rec = gamma * y[1]\n        inf = -(sus + rec)\n        return sus, inf, rec\n\n    def fit_odeint(x, beta, gamma):\n        return integrate.odeint(sir_model, (sus0, inf0, rec0), x, args=(beta, gamma))[:,1]\n\n    popt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\n    fitted = fit_odeint(xdata, *popt)\n\n    plt.plot(xdata, ydata, 'o')\n    plt.plot(xdata, fitted)\n    plt.title(\"Fit of SIR model for \" +ccaa + \" infected cases\")\n    plt.ylabel(\"Population infected\")\n    plt.xlabel(\"Days\")\n    plt.show()\n    print(\"Optimal parameters: \\nbeta =\", popt[0], \" \\ngamma = \", popt[1])\n    es_poblacion.at[es_poblacion['CCAA'] == ccaa,'ini_day'] = initialDay\n    es_poblacion.at[es_poblacion['CCAA'] == ccaa,'beta'] = popt[0]\n    es_poblacion.at[es_poblacion['CCAA'] == ccaa,'gamma'] = popt[1]","0bc6d36b":"estimateParametersSIR('Andaluc\u00eda', 16)","b5a93730":"estimateParametersSIR('Arag\u00f3n', 18)","4e09c266":"estimateParametersSIR('Asturias', 15)","38fbf4ed":"estimateParametersSIR('Baleares', 17)","8bbbbcf0":"estimateParametersSIR('C. Valenciana', 14)","ebfefba9":"estimateParametersSIR('Canarias', 16)","0657bb14":"estimateParametersSIR('Castilla La Mancha', 9)","1a77cb4f":"estimateParametersSIR('Castilla y Le\u00f3n', 9)","3d4627bf":"estimateParametersSIR('Catalu\u00f1a', 5)","eda38716":"estimateParametersSIR('Ceuta', 23)","8993394e":"estimateParametersSIR('Extremadura', 9)","5cbbce68":"estimateParametersSIR('Galicia', 18)\n","54fb984c":"estimateParametersSIR('La Rioja', 12)","1955b72f":"estimateParametersSIR('Madrid', 10)","b55d60fa":"estimateParametersSIR('Melilla', 22)","b23344ce":"estimateParametersSIR('Murcia', 17)","3a2598b3":"estimateParametersSIR('Navarra', 12)","c83e9764":"estimateParametersSIR('Pa\u00eds Vasco', 9)","c78fe07f":"Once we have renamed the columns, let\u00b4s dig a bit deeper; we find the infected, deaths, hospitalized people in each regional governments (all of them cummulative). But there is something to consider: infected people are counted by different variales and different periods, which makes the analysis sort of confused. We will analyze it better with plots.","bf3fb025":"Let\u00b4s create individual daily infections and deaths for each region and plot the most critical ones to analyze the progress.\n\n\n\n\n\n\n","a9b1d428":"## Recovered over Time ","0d4be6f6":"## **Import the gdf and df**","95a7e058":"Mortality rate is expressed in units of deaths per 1,000 individuals per year; thus, a mortality rate of 9.5 (out of 1,000) in a population of 1,000 would mean 9.5 deaths per year in that entire population, or 0.95% out of the total. Here we can see that COVID-19 mortality rate per 100,000 inhabitants in the Spanish autonomous communities, as of May 20, 2020. The autonomous community of the Spanish capital, Madrid, was the most affected by the coronavirus, both in terms of mortality rate, which stood at 132 deaths per 100,000 people; and in number of cases, which was 65 thousand as of the same date.","0376af1f":"## <a id='si'>Implementing the SIR model<\/a> \nSIR model can be implemented in many ways: from the differential equations governing the system, within a mean field approximation or running the dynamics in a social network (graph). For the sake of simplicity, We've chosen the first option, and we will simply run a numerical method (Runge-Kutta) to solve the differential equations system.\n\nThe functions governing the dif.eqs. are:","d41d05a0":"# <a id='country'>Daily infections and fatalities curves by CCAA<\/a>","5a9aade8":"## ICU over Time ","02b69f3f":"## Color map","6840e805":"In this kernel I will focus on data visualization using mainly Plotly Express and Choropleth. The data source is the official website from the Spanish government for Covid-19.\n\nIMPORTANT NOTE: the way the Spanish government has dealed with the data has been changing during the last month (the introduced new variables, missing values, delimiter changes from one day to the next...). That means the dataset published by the government may change in the future and may appear some errors in the kernel.\n\nIn that case I will try to fix it as soon as possible.","a1ce41ff":"# <a id='pr'>Prediction<\/a>","5189aae3":"As we can see, in general the virus is more dangerous in men than woman altough the total infected people is higher in woman util 60 year old. This can be easily explained with the previous chart as the age ranges in which women are more infected than men are the less dangerous ages. One the other hand, the are more men than woman infected in the dangerous ages (+60year old)","ac578dd3":"# <a id='am'>Analysis of Madrid<\/a>","f2d056b2":"# <a id='eda'>Data Loading and general overview<\/a>\n\nFirst, we will load the csv file from the offical Spanish goverment site which as we said is updated every 24 hours.\n\nSpanish government website (updated every 24 hours) The data can be automatically downloaded from the link below and will be saved in our dataframe called data.","96945939":"# <a id='mm'>8th of March manifestation<\/a>\n\nOn 8 of March, the goverment allowed a massive manifestationa all over the country for the international womens day.\n\nBy that time, there where already some informed cases, but, we only know what we know. Now, since the virus need between 7 - 14 days to incubate in your body, this means that a person who was on the manifestation and begin to have syntoms after 7 - 14 days is likely that was already infected or got infected. Let's make this shift in infected cases and see the result.\n\n***As you can see, when the manifestation was held, it is likely that there was around between 10k and 30k more infected persons than the official 1006 cases.***","1ff15377":"This function will help us generate the colors we will use to render the map.\n\nTimeSliderChoropleth can't render data directly so we must feed a dictionary that contains the id and the color for each datetime.\n\nThis way: darker colors mean bigger values and so on.\n\n\n\n\n\n\n","92609211":"Population of each Spanish Region in 2019, collected from the official data: https:\/\/www.ine.es\/jaxiT3\/Tabla.htm?t=2853&L=0\n\n\n\n\n\n\n","008fe93c":"Prepare the id, datetime, colormap for our Folium Choropleth.\n\n\n\n\n\n\n","6455a9ef":"## <a id='total'>Total Deaths<\/a> ","5340d494":"# <a id='pa'>Patient Analysis<\/a>","acf65053":"Results obtained for N=Spain population, only one initial infected case, \u03b2=0.3, \u03b3=0.5 and a leap pass hs=0.1 are shown below:","b788333f":"### Total Infected","ce1f07f7":"In order to solve the differential equations system, we develop a 4rth order Runge-Kutta method:","50df5c22":"## <a id='in'>Infections time slider<\/a>","72c05c10":"## <a id='fit'>Fit SIR parameters to real data<\/a> \nThe SIR model is purely theoretical, and we are interested into a real approximation of the COVID-19 expansion in order to extract insights and understand the transmission of the virus. Hence, we need to extract the  \u03b2  and  \u03b3  paramaters for each case if we hope to be able to predict the evolution of the system.","fd4f6f48":"As the following variables follow an exponential line,the following plots will be displayed using logarithmic scale in order to analyze the lineal trend.","c15d99d1":"\n\n*  \"diff_total_confirmed\" and \"diff_total_deaths\" are now only informed for dates previous at the moment\n*  The dataset includes all ccaa and dates, which is required for the lag\/trend step\n* Missing values for \"diff_total_confirmed\" and \"diff_total_deaths\" have been replaced by 0, which may be dangerous if we do not remember it at the end of the process. However, this won't impact our prediction algorithm\n* A new column \"day_num\" has been created, as a day counter starting from the first date\n\nDouble-check that there are no remaining missing values:","abee4b8c":"## <a id='ca'>Covid-19 vs age groups<\/a> ","5cde96c9":"## Hospitalized over Time ","69999907":"Let's do the same plot for total deaths but we will use the function get_hex_colors.\n\nNotice that this function maps the data to color in a linear way.","c8c6e17c":"## Data preparation ","61421fbe":"In case dataframe is wrong:","920001c7":"## <a id='cg'>Covid19 vs gender<\/a>","9eb1c0e0":"We can easily create a basic Choropleth and pass directly the geopandas df and the df with values. The Choropleth class will create a cmap automatically.\n\nI commented the code so that we can directly see the data with the timeslider.","c42838cb":"In order to compare between different categories, we should normalize the data:","3f562008":"This plot is the same as the previous one but using a different color_map function.\n\n\n\n\n\n\n","2c68ece4":"## <a id='ch1'>Create a Choropleth map will all CCAA<\/a> ","d996ec23":"# <a id='mc'>Mapping with choropleth<\/a>","ba70a4bf":"# <a id='pl'>Plotting<\/a>","5d0f7f8f":"# <a id='li'>Libraries<\/a>","df400d15":"# <a id='ga'>General analysis over time<\/a>\nThe Ministry of Health Spain has removed their recovered and cases column from their official dataset, so we are using the following datasets for complete analysis of recovered, infected, cases, hospitalized, deaths by CCAA, age and gender.","4b798c0c":"# COVID19 In Spain\n\n## <a id='main'>Table of Contents<\/a>\n- [Libraries](#li)\n- [Data Loading and general overview](#eda)\n- [Plotting](#pl)\n    1. [Infection over time](#in)\n    2. [Total Deaths](#total)\n    3. [Analysis of Madrid](#am)\n    4. [Daily infections and fatalities curves by CCAA](#country)\n    5. [Weekly Growth](#wg)\n    6. [Mapping with Choropleth](#mc)\n      - [Create a Choropleth map will all CCAA](#ch1)\n      - [Create a Choropleth map with timeslider](#ch2)\n- [Mortality Rate](#mr)\n- [8th of March manifestation](#mm)\n- [General analysis over time](#ga)\n  1. [Last Report Situation](#lrs)\n  2. [Patient Analysis](#pa)\n     - [Covid-19 vs age groups](#ca)\n     - [Covid19 vs gender](#cg)\n- [Prediction](#pr)\n  1. [Implementing the SIR model](#si)\n  2. [Fit SIR parameters to real data](#fit)","05d50658":" ##  DAILY INFECTIONS ","9cbed7d2":"# <a id='wg'>Weekly Growth<\/a>","4f969a0a":"\nMissing values for \"ConfirmedCases\" and \"Fatalities\" have been replaced by 0, which may be dangerous if we do not remember it at the end of the process.\nA new column \"Day\" will be created, as a day counter starting from the first date\nDouble-check that there are no remaining missing values:","566969bc":"If you pass string values to the Folium map, it must be space free otherwise the map won't render properly.\n\nIn this dictionary we will create a numeric id to that we can render the map properly.","6b1c6c9b":"##  **Daily Deaths**","e8cc028e":"## Load Data ","ebfa2e41":"\nIn the last days, Catalu\u00f1a has been the region with a higher number of new cases. This will also be related to the daily fatalities","7b383f7a":"## <a id='ch2'>Create a Choropleth map with timeslider<\/a> ","36d1dba5":"The results are as expected. virus affects mostly older people. We can see that the death\u00b4s curve peak is around 80-89year old. The most surprising result is the \"Total infected\" line as the 'peak' goes from 40 to 80 years old which means the disease is present in most of the population.","9eb2e299":"Going to EDA from data importing results from: ine.es Spain population by age al a\u00f1o 2019","e1eaeb3b":"## Infected over Time ","0b68bbaf":"As a first aproach, I will compare the effects of COVID-19 in each age group without taking into account gender.","ced9b7b0":"# <a id='mr'>Mortality Rate<\/a>","7f7e78fe":"## Total Deaths ","f6c0c20f":"Prepare the id, geometry (coordinates for each region), shape_leng and shape_are for our Folium Choropleth.\n\nData extracted from: https:\/\/laura-an.carto.com\/tables\/shapefiles_ccaa_espana\/public","a692eee8":"Mapping values for CCAA from the Covid 19 data and the data from GeoJson.","50256c94":"## Spain population","0801e265":"We can't directly pass the data to TimeSliderChoropleth, so we must create a dictionary where the colors will represent our data. For example, the lighter the color, the smaller the value. We have already done this with our color hex while importing the df.\n\nNotice that the date shown is the date of the report. The issue date is n - 1. This means that on 21\/03\/2020 we actually see the data from 20\/03\/2020.\n\nIn version 20 of the kernel I have changed the color palette and now it's based on the quantile each region stands for (pandas qcut).\n\nThis plot contains maps the data to the colors from the function get_hex_colors_2\n\n\n\n\n\n\n","81b4ac71":"And finally, to obtain the evolution of the disease we simply define the initial conditions and call the rk4 method:\n* N = total number of population\n* beta = transition rate  susceptible S->I infected\n* gamma = transition rate infected I->R recovered\n* b0 =  denotes the constant degree distribution of the network (average value for networks in which \nthe probability of finding a node with a different connectivity decays exponentially fast\n* hs = jump step of the numerical integration","deb3fef3":"Madrid was the region with the highest number of infections and deaths. In the following graphics we will analyze the different variables. The cases related to infections were collected in the variable PCR+ (Infected), we can just use that variable just for Madrid.","52dd28ff":"# <a id='lrs'>Last Report Situation<\/a>","0bd0dc55":"Plotting the total number of fatalites and daily deaths as well, we can see how the curve is getting flat with a peak of fatalities on 31 March.","d07d9a53":"Let's visualize total deaths by region.","3b278214":"## Deaths over Time "}}