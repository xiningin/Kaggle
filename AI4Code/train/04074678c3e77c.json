{"cell_type":{"c02230de":"code","1f72e602":"code","1110059a":"code","bdd94c74":"code","5286cded":"code","3db417d8":"code","b27ce5e9":"code","137219fd":"code","b52f8896":"code","a47f90ee":"code","4451f643":"code","93faaacd":"code","012a67e0":"code","1ac600dd":"code","f03c1bb3":"code","48cb0803":"code","e7d64715":"code","2f6ea9e0":"code","d40b2f54":"code","5e4907a2":"code","adf1b47d":"code","60c80884":"code","7dba7061":"code","369b2b29":"code","fc89f192":"markdown","ab5f03c9":"markdown"},"source":{"c02230de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm, skew\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1f72e602":"dftrain = pd.read_csv('\/kaggle\/input\/restaurant-revenue-prediction\/train.csv')\ndftest = pd.read_csv('\/kaggle\/input\/restaurant-revenue-prediction\/test.csv')\ndftrain.drop('Id', axis = 1, inplace = True)\ntest_id = dftest.Id\ndftest.drop('Id',axis = 1, inplace = True)","1110059a":"#NO NULL","bdd94c74":"dftrain['Open Date'] = dftrain['Open Date'].apply(lambda x: pd.to_datetime(x))\ndftest['Open Date'] = dftest['Open Date'].apply(lambda x: pd.to_datetime(x))\ndef calc_days(dtime):\n    now_time = pd.to_datetime('2015-01-01')\n    result = now_time - dtime\n    return int(result.total_seconds()\/3600\/\/24)\ndftrain['days_since_open'] = dftrain['Open Date'].apply(lambda x: calc_days(x))\ndftest['days_since_open'] = dftest['Open Date'].apply(lambda x: calc_days(x))","5286cded":"dftrain['revenue'] = dftrain['revenue'].astype(int)","3db417d8":"#dftrain.groupby('City')['revenue'].agg(['count','mean'])","b27ce5e9":"#P1 int testset has no 7,8,10,11,13,14,16 values skew 1.8\n#P2 FLOAT skew 0.03 test set only few decima values between 1 and 2, 4 and 5, \n#P3 float skew 0.14 test set only some decimal values between 4 and 5\n#P10 int64 skew 1.70 test set 80% values are 5, 15% values are 10, test set exactly like train set.\n#P22 int64 skew 0.79 test set 25% values are 1, 20% 2, 15% 3 , 12% 4, 9% 5 gradually decreasing distribution\n#P23 int64 skew 3.24 test set 40% values are 1, 15% 2, 12% 3, 9% 4, 14% 5, 3-4% each 10 15 20 25\n#P10 train and test exactly thesame","137219fd":"#no log transform = P2, P3, P7,","b52f8896":"\nfor col in dftrain.columns:\n    if (dftrain[col].dtype == int) | (dftrain[col].dtype == float):\n        if col not in ['P2','P3', 'P7','revenue']:\n            dftrain[col] = dftrain[col].map(lambda x:np.log1p(x))\n            print (col)\n            dftest[col] = dftest[col].map(lambda x: np.log1p(x))\n            ","a47f90ee":"#for col in dftrain.columns:\n #   if (dftrain[col].dtype == int) | (dftrain[col].dtype == float):\n  #      print (col)\n   #     print (skew(dftrain[col]))\n    #    print (skew(np.log1p(dftrain[col])))","4451f643":"pd.get_dummies(dftrain).columns","93faaacd":"pd.get_dummies(dftest).columns[50:]","012a67e0":"#log transforming dftrain revenue\ndftrain['revenue']= dftrain.revenue.apply(lambda x: np.log1p(x))","1ac600dd":"dftrain1 = pd.get_dummies(dftrain, drop_first = True)\ndftest1 = pd.get_dummies(dftest,drop_first = True)","f03c1bb3":"y = dftrain1.revenue\nX = dftrain1.drop('revenue', axis = 1)\nfor col in dftest1.columns:\n    if col not in X.columns:\n        dftest1.drop(col, axis = 1, inplace = True)\nfor col in X.columns:\n    if col not in dftest1.columns:\n        X.drop(col, axis = 1, inplace = True)\n        print (col)\n","48cb0803":"cat_cols = ['City', 'Open Date', 'City']","e7d64715":"from sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nX.drop('Open Date', axis = 1, inplace = True)\ndftest1.drop('Open Date', axis = 1, inplace = True)\n\n","2f6ea9e0":"X_train, X_valid, y_train, y_valid = train_test_split(X,y, train_size = 0.8, test_size = 0.2)\n\nmodel = XGBRegressor(n_estimators=200, max_depth=2, learning_rate=0.1)\nmodel.fit(X_train, y_train, early_stopping_rounds = 10, eval_set=[(X_valid, y_valid)], verbose = 10)","d40b2f54":"final_pred = model.predict(dftest1)","5e4907a2":"sampledf = pd.read_csv('\/kaggle\/input\/restaurant-revenue-prediction\/sampleSubmission.csv')\n","adf1b47d":"sampledf.head()","60c80884":"sub = pd.DataFrame()","7dba7061":"sub['Id'] = sampledf.Id\nsub['Prediction'] = np.expm1(final_pred)","369b2b29":"sub.to_csv('submission.csv', index = False)","fc89f192":"for col in dftrain.columns:\n    if (dftrain[col].dtype == int) | (dftrain[col].dtype == float):\n        #print (skew(dftrain[col]))\n        plt.figure(figsize = (15,7))\n        plt.subplot(1,2,1)\n        sns.distplot(dftrain[col])\n        plt.subplot(1,2,2)\n        sns.distplot(dftest[col])\n        plt.title(str(dftrain[col].dtype) + ' ' + str(skew(dftrain[col])))\n         ","ab5f03c9":"feature = []\ncorrlist = dftrain.corr().revenue.sort_values(ascending = False).reset_index()\ncorrlist.columns = ['col_name','corr']\ncorrlist['abscorr'] = corrlist['corr'].apply(lambda x: abs(x))\ncorrlist.sort_values('abscorr', ascending = False)"}}