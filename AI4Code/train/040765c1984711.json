{"cell_type":{"3391a37f":"code","cac9b323":"code","85d2ecf3":"code","5d7c402d":"code","9d651f66":"code","f59281c0":"code","1e237cce":"code","bca411e0":"code","39b814d6":"code","d1050502":"code","b6ef4e2f":"code","cdd45abd":"code","b56981c1":"code","9d612bf0":"code","efa1ab4d":"code","f90d0508":"markdown","794553a8":"markdown","625ca73e":"markdown","91eb68d0":"markdown","22ced72d":"markdown","ccc89a0e":"markdown","d505b96f":"markdown","871c4153":"markdown","b2c48cec":"markdown","92656a08":"markdown","101ba9f7":"markdown","aa0e0e2c":"markdown","7479cc07":"markdown","27751ec6":"markdown","fbd5395e":"markdown","f9dc5380":"markdown","9e34552a":"markdown"},"source":{"3391a37f":"# linear algebra\nimport numpy as np\n# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd\n#Unix commands\nimport os\n\n# import useful tools\nfrom glob import glob\nfrom PIL import Image\nimport cv2\n\n# import data visualization\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport seaborn as sns\n\nfrom bokeh.plotting import figure\nfrom bokeh.io import output_notebook, show, output_file\nfrom bokeh.models import ColumnDataSource, HoverTool, Panel\nfrom bokeh.models.widgets import Tabs\n# import data augmentation\nimport albumentations as albu\n\n# import math module\nimport math\n#Libraries\nimport pandas_profiling\nfrom xgboost import XGBClassifier\nfrom sklearn import preprocessing","cac9b323":"# linear algebra\nimport numpy as np\n# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd\n#Unix commands\nimport os\n\n# import useful tools\nfrom glob import glob\nfrom PIL import Image\nimport cv2\n\n# import data visualization\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport seaborn as sns\n\nfrom bokeh.plotting import figure\nfrom bokeh.io import output_notebook, show, output_file\nfrom bokeh.models import ColumnDataSource, HoverTool, Panel\nfrom bokeh.models.widgets import Tabs\n# import data augmentation\nimport albumentations as albu\n\n# import math module\nimport math\n#Libraries\nimport pandas_profiling\nfrom xgboost import XGBClassifier\nfrom sklearn import preprocessing","85d2ecf3":"# Setup the paths to train and test images\nDATASET = '..\/input\/delg-saved-models\/'\nTEST_DIR = '..\/input\/landmark-recognition-2020\/test\/'\nTRAIN_DIR = '..\/input\/landmark-recognition-2020\/'","5d7c402d":"#Loading train Files for Submission\ntrain = pd.read_csv(TRAIN_DIR + \"train.csv\")\n#Loading Sample Files for Submission\nsample = pd.read_csv(TRAIN_DIR + \"sample_submission.csv\")","9d651f66":"# Display some of the training data\ntrain.head(10).style.applymap(lambda x: 'background-color:lightsteelblue')","f59281c0":"# Confirmation of the format of samples for submission\nsample.head(10).style.applymap(lambda x: 'background-color:lightsteelblue')","1e237cce":"#Check for missing values in the training data\ntrain.isnull().sum()","bca411e0":"# Find the unique number of landmark IDs. \nn = train['landmark_id'].nunique()\nprint('The unique number of landmark IDs is ' + str(n))","39b814d6":"# First, I'll use Sturgess's formula to find the appropriate number of classes in the histogram \nk = 1 + math.log2(n)","d1050502":"# Display a histogram of the FVC of the training data\nsns.distplot(train['landmark_id'], kde=True, rug=False, bins=int(k), color='c') \n# Graph Title\nplt.title('Distribuition of landmark_ids')\n# label\nplt.xlabel(\"landmark_ids\")\nplt.ylabel(\"Frequency\")\n# Show Histogram\nplt.show() ","b6ef4e2f":"# coding: utf-8\nfrom tqdm import tqdm\nimport time\n\n# Set the total value \nbar = tqdm(total = 1000)\n# Add description\nbar.set_description('Progress rate')\nfor i in range(100):\n    # Set the progress\n    bar.update(25)\n    time.sleep(1)","cdd45abd":"print(train['landmark_id'].value_counts())","b56981c1":"s_bool = train['landmark_id'] == 138982\nm = s_bool.sum()\nprint('The number of landmark ID 138982' + str(m))","9d612bf0":"the_most_cmn_pics = train[train[\"landmark_id\"]==138982]","efa1ab4d":"print(the_most_cmn_pics)","f90d0508":"* Fortunately, the missing value is content!\n* Let us check how many types of Landmark IDs there are","794553a8":"* We'll find the landmark IDs that appear most often","625ca73e":"* We will next show how the more than 80,000 landmark IDs are distributed in a scatterplot","91eb68d0":"# Your upvote is the source of my motivation.","22ced72d":"* Landmark ID 138982 looks like there are 6272 of them.\n* This ID seems to be the most common, so let us focus our attention on this ID.","ccc89a0e":"# Loading data","d505b96f":"Next, we will check for missing values","871c4153":"* [Visualizing Landmarks (+more EDA)](https:\/\/www.kaggle.com\/jeffreybraun\/visualizing-landmarks-more-eda)","b2c48cec":"* There doesn't seem to be much of a bias.","92656a08":"* Let us check the format of the file for submission","101ba9f7":"There seems to be unique IDs and some landmark IDs","aa0e0e2c":"Let's go over [the rules](https:\/\/www.kaggle.com\/c\/landmark-recognition-2020\/overview\/code-requirements) first.\n* TPUs will not be available for making submissions to this competition. You are still welcome to use them for training models.\n* No internet access enabled\n* Freely & publicly available external data is allowed, including pre-trained models","7479cc07":"* We have made it possible to notice that there are so many different types of Landmark IDs","27751ec6":"# To be continued, sir.","fbd5395e":"* Check the number of landmark ID 138982","f9dc5380":"# Acknowledgements","9e34552a":"# OverView"}}