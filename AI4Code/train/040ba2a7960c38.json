{"cell_type":{"3c43a93f":"code","cb7a9baf":"code","f8cf8094":"code","c90cf84d":"code","aa9fdff9":"code","cdb93970":"code","6d6ea487":"code","09bd4554":"code","e53c7378":"code","4412484f":"code","930a8dc7":"code","60f2d1ed":"code","66e36a77":"code","2c1591d3":"code","67e80cea":"code","b8d8116f":"code","658c3289":"code","161a9f4c":"code","68bcdebf":"code","57eac663":"code","d6c6af91":"code","b3997cfd":"code","e09aab1a":"code","fcc9ddf1":"code","e2775b67":"code","5d15f556":"code","822a2dd4":"code","3e018b38":"code","c435a671":"code","1ba39ca6":"code","c8bad53d":"markdown","5d64633b":"markdown","7db7877b":"markdown","77ea5527":"markdown","b980cb16":"markdown","d56c9f2c":"markdown","04a5ef4e":"markdown","576c5610":"markdown"},"source":{"3c43a93f":"import numpy as np\nimport matplotlib.pyplot as plt \nimport pandas as pd \nimport seaborn as sns \n","cb7a9baf":"df = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf.dropna(axis=0, how='any', thresh=None, subset=['Embarked'])\n\n","f8cf8094":"\nprint(df.describe())\nprint(df.info())","c90cf84d":"df.head()","aa9fdff9":"list(df.columns)","cdb93970":"numeric = df[['Age','SibSp','Parch','Fare']]\ncategorical = df[['Survived','Pclass','Sex','Ticket','Cabin','Embarked']]","6d6ea487":"for i in numeric.columns:\n    plt.hist(numeric[i])\n    plt.title(i)\n    plt.show()","09bd4554":"sns.heatmap(numeric.corr())","e53c7378":"pd.pivot_table(df, index = 'Survived', values = ['Age','SibSp','Parch','Fare'])","4412484f":"print(pd.pivot_table(df, index = 'Survived', columns = 'Pclass', values = \"Embarked\", aggfunc ='count' ))\nprint()\nprint(pd.pivot_table(df, index = 'Survived', columns = 'Sex', values = \"Embarked\", aggfunc ='count' ))\nprint()\n#print(pd.pivot_table(df, index = 'Survived', columns = 'Ticket', values = \"Embarked\", aggfunc ='count' ))\n#print()\n#print(pd.pivot_table(df, index = 'Survived', columns = 'Cabin', values = \"Embarked\", aggfunc ='count' ))\n#print()\nprint(pd.pivot_table(df, index = 'Survived', columns = 'Embarked', values = \"Ticket\", aggfunc ='count' ))","930a8dc7":"for i in categorical.columns:\n    sns.barplot(categorical[i].value_counts().index, categorical[i].value_counts()).set_title(i)\n    plt.show()","60f2d1ed":"df_test.head()","66e36a77":"df = df.drop(columns = ['Cabin', 'Ticket'])","2c1591d3":"from sklearn.preprocessing import OneHotEncoder\nencode = OneHotEncoder(handle_unknown='ignore')\n\ncategorical = categorical.drop(columns= ['Cabin', 'Ticket'])\n","67e80cea":"categorical.info()\ncategorical = categorical.dropna(subset = ['Embarked'])","b8d8116f":"df = df.dropna(subset = ['Embarked'])\ndf_01= pd.get_dummies(df, columns = ['Pclass','Sex', 'Embarked'])\n\ndf_01 = pd.DataFrame(df_01)","658c3289":"df_01.Age = df_01.Age.fillna(df.Age.median())\n\n","161a9f4c":"df_01 = df_01.drop(columns = ['Name'])","68bcdebf":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\n\ndf_02 = df_01.copy()\n\ndf_02[['Age', 'SibSp', 'Parch', 'Fare']] = scale.fit_transform(df_02[['Age', 'SibSp', 'Parch', 'Fare']])\n\nx_train = df_02.drop(columns = ['Survived'])\ny_train = df_02['Survived']","57eac663":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC","d6c6af91":"lr = LogisticRegression(max_iter = 2000) \ncv = cross_val_score(lr, x_train, y_train, cv = 5)\nprint(cv)\nprint(cv.mean())","b3997cfd":"knn = KNeighborsClassifier()\ncv = cross_val_score(knn, x_train, y_train, cv = 5)\nprint(cv)\nprint(cv.mean())","e09aab1a":"svm = SVC(probability = True)\ncv = cross_val_score(svm, x_train, y_train, cv =5)\nprint(cv)\nprint(cv.mean())","fcc9ddf1":"#df_test = df_test.drop(columns =['Cabin', 'Ticket'])\ndf_test.head()","e2775b67":"\ndf_test = df_test.dropna(subset = ['Embarked'])\ndf_03= pd.get_dummies(df_test, columns = ['Pclass','Sex', 'Embarked'])\n\ndf_03 = pd.DataFrame(df_02)\n#df_03 = df_02.drop(columns = ['Name'])\ndf_03.Age = df_03.Age.fillna(df.Age.median())\ndf_03.Fare = df_03.Fare.fillna(df.Fare.median())\n","5d15f556":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\n\ndf_04 = df_03.copy()\n\ndf_04[['Age', 'SibSp', 'Parch', 'Fare']] = scale.fit_transform(df_04[['Age', 'SibSp', 'Parch', 'Fare']])\n\nx_test = df_04","822a2dd4":"x_test.info()","3e018b38":"lr.fit(x_train, y_train)\nlogistic = lr.predict(x_test).astype(int)","c435a671":"final_data = {'PassengerId': x_test.PassengerId, 'Survived': logistic}\nsubmission = pd.DataFrame(data=final_data)","1ba39ca6":"submission.to_csv('submission', index = False)\nsubmission.head()","c8bad53d":"### making the first draft submission","5d64633b":"### preprocessing the test data ","7db7877b":"### Understanding the shape of the data ","77ea5527":"### Trainig the initial models \nused sickit learn to train 3 classification models maybe will add more in the future ","b980cb16":"### preprocessing the data for model \n in this section we removed the variables with the least impact on the trainig, transformed the standardized variables and encoded the categorical variables into dummy variables.","d56c9f2c":"### imports and reading the data","04a5ef4e":"# Titanic Classification\n\nHi there this is my first project as a novice data scientist I followed the tutorial on this project from ken jee who has an excellent tutorial video on youtube of how to solve this project I will how ever keep working on it and trying to increacse my score and expertise.\n\nabout the project this is a data set availabel on kaggle where you'll find the rules of the competition and all the notebooks related to this data set.\n\n### info about each variable as given by Kaggle \n-pclass: A proxy for socio-economic status (SES)\n1st = Upper\n2nd = Middle\n3rd = Lower\n\n-age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\n-sibsp: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\n-parch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.\n\n\n### overview\n\n\n1. Understand the shape of the data (Histograms, box plots, etc.)\n2. Data Cleaning\n3. Data Exploration\n4. Feature Engineering\n5. Data Preprocessing for Model\n6. Basic Model Building\n7. Model Tuning\n8. results ","576c5610":"### data Exploration \n\nso in this step we seperated the data to categorical and numerical variable to be able to visualise and plot them more easily. "}}