{"cell_type":{"53719574":"code","793df70d":"code","4582289d":"code","c356abd7":"code","8232cc21":"code","110c669f":"code","1dcd3935":"code","a0e20ea7":"code","91b84f27":"code","12dbd63b":"code","fd099c04":"code","b85bccc6":"code","2380cd56":"code","05ecc7ac":"code","dfde13df":"code","ab9d0ca8":"code","e82f7dc5":"code","b42f0f15":"code","f40a6ac5":"code","2455e8c8":"code","df6bac7d":"code","8d49f971":"code","915d4c1e":"code","02d2c073":"code","c57e07ac":"code","ed884971":"code","d3bc8497":"code","46fca1ed":"code","08558120":"code","27ff2bf8":"code","85bb4f2f":"code","be6ca869":"code","ef5bba89":"code","3e1fa315":"code","fdc7c887":"code","7069e1cc":"code","c59080b5":"code","459bc1b0":"code","bfbc26ae":"code","881c7da7":"code","f099b4c6":"code","00aadd43":"code","4c1addc0":"code","e1c0eadf":"code","2026eaf0":"code","9c687721":"code","3da897f1":"code","1d3ea8c2":"code","660e6cdf":"code","7ecf3137":"code","090576d1":"code","2b5c15d2":"code","f288dc96":"code","fbe2d3ef":"code","c894b445":"code","99b5a39e":"code","119c5d88":"code","38a53055":"code","1608e0e0":"code","4d9134c4":"code","45372471":"code","ed18fd61":"code","5de8b93e":"code","39b3f637":"code","e6391686":"code","27bb0e93":"code","4ef4d7b1":"code","efbe3003":"code","e0ea1a89":"code","91a30865":"code","e1942a64":"code","e960f65f":"code","522bd476":"code","f3fc4d81":"code","59152c67":"markdown","e663e274":"markdown","c92c78e2":"markdown","f266a110":"markdown","1808e5d2":"markdown","49037c21":"markdown","8642f89f":"markdown","cc5d8b6a":"markdown","f52a2de1":"markdown","896128ca":"markdown","76f40deb":"markdown","b1bc8dcb":"markdown","e8d34f1a":"markdown","c41203d1":"markdown","d14a935d":"markdown","7b336711":"markdown","7dd89f5b":"markdown","32e257cf":"markdown","a6a1a76f":"markdown"},"source":{"53719574":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","793df70d":"# import libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","4582289d":"# import data\nloan_df = pd.read_csv('..\/input\/teclovloananalysis\/loan.csv', sep=\",\")\nloan_df.head()","c356abd7":"# look for missing values\nloan_df.isnull().sum()","8232cc21":"# percentage of missing values\nround(100*(loan_df.isnull().sum()\/len(loan_df.index)),2)","110c669f":"# list all missing values column greater than 90\n\nmissing_values_column = loan_df.columns[round(100 * (loan_df.isnull().sum()\/len(loan_df.index))) > 90]\n# remove column with  missing values\n\nloan_df = loan_df.drop(missing_values_column, axis =1)\nloan_df.columns","1dcd3935":"loan_df.shape","a0e20ea7":"# look missing values again\n\nround(100* (loan_df.isnull().sum()\/len(loan_df.index)),2)","91b84f27":"# desc and mths_since_last_delinq is having 32 and 64 % missing values we can remove those columns\nloan_df = loan_df.drop(['desc', 'mths_since_last_delinq'], axis=1)","12dbd63b":"# look missing values again\nround(100*(loan_df.isnull().sum()\/len(loan_df.index)),2)","fd099c04":"loan_df.isnull().sum(axis=1)","b85bccc6":"# check if sum rows is having missing values greater than 5\n\nlen(loan_df[loan_df.isnull().sum(axis=1) > 5].index)","2380cd56":"loan_df.info()","05ecc7ac":"# int_rate is object type let's convert in numeric type\nloan_df['int_rate'] = loan_df['int_rate'].apply(lambda x: pd.to_numeric(x.split(\"%\")[0]))","dfde13df":"loan_df.info()","ab9d0ca8":"# also, let's extract the numeric part from the variable employment length\n\n# let's drop the missing values from the column\nloan_df = loan_df[~loan_df['emp_length'].isnull()]\n\n# import\n\nimport re\n\nloan_df['emp_length'] = loan_df['emp_length'].apply(lambda x: re.findall('\\d+', str(x))[0])\n\n# convert in to numeric\nloan_df['emp_length'] = loan_df['emp_length'].apply(lambda x: pd.to_numeric(x))\n","e82f7dc5":"loan_df.info()","b42f0f15":"behaviour_var =  [\n  \"delinq_2yrs\",\n  \"earliest_cr_line\",\n  \"inq_last_6mths\",\n  \"open_acc\",\n  \"pub_rec\",\n  \"revol_bal\",\n  \"revol_util\",\n  \"total_acc\",\n  \"out_prncp\",\n  \"out_prncp_inv\",\n  \"total_pymnt\",\n  \"total_pymnt_inv\",\n  \"total_rec_prncp\",\n  \"total_rec_int\",\n  \"total_rec_late_fee\",\n  \"recoveries\",\n  \"collection_recovery_fee\",\n  \"last_pymnt_d\",\n  \"last_pymnt_amnt\",\n  \"last_credit_pull_d\",\n  \"application_type\"]\n\nprint(behaviour_var)","f40a6ac5":"# drop behaviour variables\n\nloan_df = loan_df.drop(behaviour_var,axis=1)\nloan_df.info()","2455e8c8":"# we will not be able to use the column zip code address , state, title etc we can remove these column\n\nloan_df = loan_df.drop(['title', 'url', 'zip_code', 'addr_state'], axis=1)\n\nloan_df.info()","df6bac7d":"# look at the loan_status column\nloan_df['loan_status'].value_counts()","8d49f971":"# we are having 3 categories fully paid, charged off and current, we will remove current because those are not fully paid nor charged off.\n\nloan_df = loan_df[loan_df['loan_status'].str.lower() != 'current']","915d4c1e":"loan_df['loan_status'].value_counts()","02d2c073":"# let's change fully paid to 0 and charge of to 1\n\nloan_df['loan_status'] = loan_df['loan_status'].apply(lambda x: 0 if x == 'Fully Paid' else 1)\n\nloan_df['loan_status'].value_counts()","c57e07ac":"loan_df.info()","ed884971":"# default rate\nround(np.mean(loan_df['loan_status']),2)","d3bc8497":"# plotting default rates across grade of loan\nsns.barplot(x='grade', y='loan_status', data=loan_df)\nplt.show()","46fca1ed":"# plotting terms\n# term: 60 months loans default more than 36 months loans\n\nsns.barplot(x='term', y='loan_status', data=loan_df)\nplt.show()","08558120":"# plotting sub grade:\nplt.figure(figsize=(16,6))\nsns.barplot(x='sub_grade', y='loan_status', data=loan_df);\nplt.show()","27ff2bf8":"# plot home ownership \nsns.barplot(x='home_ownership', y='loan_status', data=loan_df)\nplt.show()","85bb4f2f":"# plotting verification status\nsns.barplot(x='verification_status', y='loan_status', data=loan_df)\nplt.show()","be6ca869":"# plotting purpose\nplt.figure(figsize=(16,6))\nsns.barplot(x='purpose', y='loan_status', data=loan_df)\nplt.show()","ef5bba89":"# observe distribution of loans across year\n\nloan_df['issue_d'].head()","3e1fa315":"# split year and month in different columns\nfrom datetime import datetime\nloan_df['issue_d'] = loan_df['issue_d'].apply(lambda x: datetime.strptime(x,'%b-%y'))\nloan_df['month'] = loan_df['issue_d'].apply(lambda x: x.month)\nloan_df['year'] = loan_df['issue_d'].apply(lambda x:x.year)","fdc7c887":"# years\nloan_df.groupby('year').year.count()","7069e1cc":"# months\nloan_df.groupby('month').month.count()","c59080b5":"# plot year\nsns.barplot(x='year', y='loan_status', data=loan_df)\nplt.show()","459bc1b0":"# plotting month\n\nplt.figure(figsize=(16,6))\nsns.barplot(x='month', y='loan_status', data=loan_df)\nplt.show()","bfbc26ae":"sns.displot(loan_df['loan_amnt'])\nplt.show()","881c7da7":"def loan_amount(amnt):\n    if amnt < 5000:\n        return 'low'\n    elif amnt >= 5000 and amnt < 15000:\n        return 'medium'\n    elif amnt >=15000 and amnt < 25000:\n        return 'high'\n    else:\n        return 'very high'\n    \n    \nloan_df['loan_amnt'] = loan_df['loan_amnt'].apply(lambda x: loan_amount(x))       \n    ","f099b4c6":"loan_df['loan_amnt'].value_counts()","00aadd43":"sns.barplot(x='loan_amnt', y='loan_status', data=loan_df)\nplt.show()","4c1addc0":"loan_df['funded_amnt_inv'] = loan_df['funded_amnt_inv'].apply(lambda x: loan_amount(x))\nloan_df['funded_amnt_inv'].value_counts()","e1c0eadf":"sns.barplot(x='funded_amnt_inv', y='loan_status', data=loan_df)\nplt.show()","2026eaf0":"def int_rate(r):\n    if r <= 10:\n        return 'low'\n    elif r > 10 and r <=15:\n        return 'medium'\n    else:\n        return 'high'\n    \n    \nloan_df['int_rate'] = loan_df['int_rate'].apply(lambda x: int_rate(x))","9c687721":"sns.barplot(x='int_rate', y='loan_status', data=loan_df)\nplt.show()","3da897f1":"# debt to income ratio\ndef dti(n):\n    if n <= 10:\n        return 'low'\n    elif n > 10 and n <=20:\n        return 'medium'\n    else:\n        return 'high'\n    \n\nloan_df['dti'] = loan_df['dti'].apply(lambda x: dti(x))","1d3ea8c2":"sns.barplot(x='dti', y='loan_status', data=loan_df)\nplt.show()","660e6cdf":"# funded amount\ndef funded_amount(n):\n    if n <= 5000:\n        return 'low'\n    elif n > 5000 and n <=15000:\n        return 'medium'\n    else:\n        return 'high'\n    \nloan_df['funded_amnt'] = loan_df['funded_amnt'].apply(lambda x: funded_amount(x))","7ecf3137":"sns.barplot(x='funded_amnt', y='loan_status', data=loan_df)\nplt.show()","090576d1":"# installment\ndef installment(n):\n    if n <= 200:\n        return 'low'\n    elif n > 200 and n <=400:\n        return 'medium'\n    elif n > 400 and n <=600:\n        return 'high'\n    else:\n        return 'very high'\n    \nloan_df['installment'] = loan_df['installment'].apply(lambda x: installment(x))","2b5c15d2":"sns.barplot(x='installment', y='loan_status', data=loan_df)\nplt.show()","f288dc96":"# annual income\ndef annual_income(n):\n    if n <= 50000:\n        return 'low'\n    elif n > 50000 and n <=100000:\n        return 'medium'\n    elif n > 100000 and n <=150000:\n        return 'high'\n    else:\n        return 'very high'\n\nloan_df['annual_inc'] = loan_df['annual_inc'].apply(lambda x: annual_income(x))","fbe2d3ef":"sns.barplot(x='annual_inc', y='loan_status', data=loan_df)\nplt.show()","c894b445":"# first, let's drop the missing value observations in emp length\nloan_df = loan_df[~loan_df['emp_length'].isnull()]\n\n# binning the variable\ndef emp_length(n):\n    if n <= 1:\n        return 'fresher'\n    elif n > 1 and n <=3:\n        return 'junior'\n    elif n > 3 and n <=7:\n        return 'senior'\n    else:\n        return 'expert'\n\nloan_df['emp_length'] = loan_df['emp_length'].apply(lambda x: emp_length(x))","99b5a39e":"sns.barplot(x='emp_length', y='loan_status', data=loan_df)\nplt.show()","119c5d88":"plt.figure(figsize=(18, 6))\nsns.barplot(x='purpose', y='loan_status', data=loan_df)\nplt.show()","38a53055":"plt.figure(figsize=(16, 6))\nsns.countplot(x='purpose', data=loan_df)\nplt.show()","1608e0e0":"# filter the df for the 4 types of loans mentioned above\nmain_purposes = [\"credit_card\",\"debt_consolidation\",\"home_improvement\",\"major_purchase\"]\nloan_df = loan_df[loan_df['purpose'].isin(main_purposes)]\nloan_df['purpose'].value_counts()","4d9134c4":"# plotting number of loans by purpose \nsns.countplot(x=loan_df['purpose'])\nplt.show()","45372471":"# let's now compare the default rates across two types of categorical variables\n# purpose of loan (constant) and another categorical variable (which changes)\n\nplt.figure(figsize=[10, 6])\nsns.barplot(x='term', y=\"loan_status\", hue='purpose', data=loan_df)\nplt.show()\n","ed18fd61":"plt.figure(figsize=(16, 6))\nsns.barplot(x='grade', y='loan_status', hue='purpose', data=loan_df)\nplt.show()","5de8b93e":"plt.figure(figsize=(16, 6))\nsns.barplot(x='home_ownership', y='loan_status', hue='purpose', data=loan_df)\nplt.show()","39b3f637":"plt.figure(figsize=(16, 6))\nsns.barplot(x='year', y='loan_status', hue='purpose', data=loan_df)\nplt.show()","e6391686":"plt.figure(figsize=(16, 6))\nsns.barplot(x='emp_length', y='loan_status', hue='purpose', data=loan_df)\nplt.show()","27bb0e93":"plt.figure(figsize=(16, 6))\nsns.barplot(x='loan_amnt', y='loan_status', hue='purpose', data=loan_df)\nplt.show()","4ef4d7b1":"plt.figure(figsize=(16, 6))\nsns.barplot(x='int_rate', y='loan_status', hue='purpose', data=loan_df)\nplt.show()","efbe3003":"plt.figure(figsize=(16, 6))\nsns.barplot(x='installment', y='loan_status', hue='purpose', data=loan_df)\nplt.show()","e0ea1a89":"plt.figure(figsize=(16, 6))\nsns.barplot(x='dti', y='loan_status', hue='purpose', data=loan_df)\nplt.show()","91a30865":"plt.figure(figsize=(16, 6))\nsns.barplot(x='annual_inc', y='loan_status', hue='purpose', data=loan_df)\nplt.show()","e1942a64":"# variation of default rate across annual_inc\nloan_df.groupby('annual_inc').loan_status.mean().sort_values(ascending=False)","e960f65f":"# write a function which takes in a categorical variable and computed the average default rate across the categories\n# It can also compute the 'difference between the highest and the lowest default rate' across the categories,\n# which is a decent metric indicating the effect of the varaible on default rate\n\ndef diff_rate(cat_var):\n    default_rates = loan_df.groupby(cat_var).loan_status.mean().sort_values(ascending=False)\n    return (round(default_rates, 2), round(default_rates[0] - default_rates[-1], 2))\n\ndefault_rates, diff = diff_rate('annual_inc')\nprint(default_rates) \nprint(diff)\n","522bd476":"# filtering all the object type variables\nloan_df_categorical = loan_df.loc[:, loan_df.dtypes == object]\nloan_df_categorical['loan_status'] = loan_df['loan_status']\n\n# Now, for each variable, we can compute the incremental diff in default rates\nprint([i for i in loan_df.columns])","f3fc4d81":"# storing the diff of default rates for each column in a dict\nd = {key: diff_rate(key)[1]*100 for key in loan_df_categorical.columns if key != 'loan_status'}\nprint(d)","59152c67":"The easiest way to analyse how default rates vary across continous variables is to bin the variables into discrete categories.\n\nLet's bin the loan amount variable into small, medium, high, very high.","e663e274":"A good way to quantify th effect of a categorical variable on default rate is to see 'how much does the default rate vary across the categories'. \n\nLet's see an example using annual_inc as the categorical variable.","c92c78e2":"verified loan defaults more than verified loans","f266a110":"lower the annual income, higher the default rate","1808e5d2":"high dti translates into higher default rates, as expected","49037c21":"higher the loan amount higher the default rate","8642f89f":"Some of the important columns in the dataset are loan_amount, term, interest rate, grade, sub grade, annual income, purpose of the loan etc.\n\nThe **target variable**, which we want to compare across the independent variables, is loan status. The strategy is to figure out compare the average default rates across various independent variables and identify the  ones that affect default rate the most.\n\n","cc5d8b6a":"high intrest rate default more","f52a2de1":"## Segmented Univariate Analysis\n\nWe have now compared the default rates across various variables, and some of the important predictors are purpose of the loan, interest rate, annual income, grade etc.\n\nIn the credit industry, one of the most important factors affecting default is the purpose of the loan - home loans perform differently than credit cards, credit cards are very different from debt condolidation loans etc. \n\nThis comes from business understanding, though let's again have a look at the default rates across the purpose of the loan.\n","896128ca":"Thus, there is a 6% increase in default rate as you go from high to low annual income. We can compute this difference for all the variables and roughly identify the ones that affect default rate the most.","76f40deb":"We still having some missing values but we can ignore those for now, let look missing values on rows","b1bc8dcb":"higher the installment amount, the higher the default rate","e8d34f1a":"Analyse how the default rate varies across continuous variables","c41203d1":"Next, let's start with univariate analysis and then move to bivariate analysis.\n\n## Univariate Analysis\n\nFirst, let's look at the overall default rate.\n","d14a935d":"Small business loan defaults most than renewable energy and education","7b336711":"Most of the loans are approved in december month","7dd89f5b":"Let's analyse the top 4 types of loans based on purpose: consolidation, credit card, home improvement and major purchase.","32e257cf":"In the upcoming analyses, we will segment the loan applications across the purpose of the loan, since that is a variable affecting many other variables - the type of applicant, interest rate, income, and finally the default rate. ","a6a1a76f":"## Data Analysis\n\nlet's understand the objective of the analysis clearly and identify the variables that we want to consider for analysis. \n\nThe objective is to identify predictors of default so that at the time of loan application, we can use those variables for approval\/rejection of the loan.\n\nNow, there are broadly three types of variables - \n\n1. those which are related to the applicant (demographic variables such as age, occupation, employment details etc.)\n2. loan characteristics (amount of loan, interest rate, purpose of loan etc.) \n3. Customer behaviour variables (those which are generated after the loan is approved such as delinquent 2 years, revolving balance, next payment date etc.).\n\nNow, the customer behaviour variables are not available at the time of loan application, and thus they cannot be used as predictors for credit approval. \n\nThus, going forward, we will use only the other two types of variables.\n\n"}}