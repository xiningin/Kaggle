{"cell_type":{"7581d0dd":"code","10e6bbae":"code","ab60c389":"code","ba7d015d":"code","8d0bb53d":"code","a1f4ce9a":"code","288a8f6b":"code","a36dad23":"code","c031c963":"code","3260f6cd":"code","fcb626f2":"code","5914fe9a":"code","d7edd8ef":"code","b7634d3c":"code","289630b1":"code","2a44715c":"code","6921162b":"code","33cd5231":"code","ab14d67a":"code","110b4438":"code","fcc1681d":"code","64dfb5ca":"markdown","925883a6":"markdown","0fe1a4e0":"markdown","d857d75d":"markdown","12223650":"markdown","72c71fe0":"markdown"},"source":{"7581d0dd":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nfrom shapely.geometry import Point, Polygon\nimport matplotlib.gridspec as gridspec","10e6bbae":"data = pd.read_csv('..\/input\/border-crossing-entry-data\/Border_Crossing_Entry_Data.csv')\ndata.head()","ab60c389":"import geopandas as gpd\nfrom shapely.geometry import Point, Polygon\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable","ba7d015d":"world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nusa = world[world['name'] == 'United States of America']\nfig,ax = plt.subplots(figsize = (10,10))\nusa.plot(ax = ax, color='blue')","8d0bb53d":"border_crossing = pd.read_csv('..\/input\/us-border-crossing-temporal-and-spatial-analysis\/Border_Crossing_Entry_Data2.csv')\nborder_crossing.head()","a1f4ce9a":"crs = {'init': 'epsg:4326'} #Coordinate Reference System\ngeometry = [Point(xy) for xy in zip( border_crossing[\"Longitude\"], border_crossing[\"Latitude\"])]\nports = gpd.GeoDataFrame(border_crossing, crs = crs, geometry = geometry)\nports.head()","288a8f6b":"fig,ax = plt.subplots(figsize = (20,50))\ntitle = plt.title('Ports at USA Borders', fontsize=20)\ntitle.set_position([0.5, 1.05])\nusa.plot(ax = ax, color='grey', edgecolor='black',linewidth=1, alpha=0.1)\nports.plot(marker='o', color='green', markersize=5, ax=ax)","a36dad23":"states = gpd.read_file('..\/input\/us-border-crossing-temporal-and-spatial-analysis\/states.shp')\nalaska = gpd.read_file('..\/input\/us-border-crossing-temporal-and-spatial-analysis\/alaska.shp')","c031c963":"#Number of Crossing by State\n\n#SELECT [State] AS [STATE_NAME], COUNT(*) AS [Crossing]\n#FROM [BC1]\n#GROUP BY [State]\n#ORDER BY [State]\nstate_count = pd.read_csv('..\/input\/us-border-crossing-temporal-and-spatial-analysis\/Border_Crossing_Entry_Data3.csv')","3260f6cd":"state_count_gp = states.merge(state_count, on='STATE_NAME', how='left')\nstate_count_gp[\"Crossing\"].fillna(0, inplace=True)\nstate_count = state_count.rename(columns={'STATE_NAME':'NAME'})\nalaska_count_gp = alaska.merge(state_count, on='NAME', how='left')","fcb626f2":"f,ax=plt.subplots(1,2,figsize=(25,5))\n\ntitle = plt.title('Number of Crossings by State', fontsize=20)\ntitle.set_position([-0.2, 1.25])\n\nalaska_count_gp.plot( column='Crossing', \n                  cmap='OrRd', legend=True, ax=ax[0]\n                 , vmax=60000,vmin=0)\nstate_count_gp.plot( column='Crossing', \n                  cmap='OrRd', legend=True, ax=ax[1]\n                 , vmax=60000,vmin=0)\nax[0].axes.get_xaxis().set_visible(False)\nax[0].axes.get_yaxis().set_visible(False)\nax[1].axes.get_xaxis().set_visible(False)\nax[1].axes.get_yaxis().set_visible(False)","5914fe9a":"# Prepare Data: Adding types of veicle based on Measure column\n\n# SELECT [STATE_NAME], Vehicle_Type, COUNT(*)\n# FROM\n# (\n# SELECT [State] AS [STATE_NAME], \n# CASE \n# WHEN Measure = 'Bus Passengers' THEN 'Heavy Vehicle'\n# WHEN Measure = 'Buses' THEN 'Heavy Vehicle'\n# WHEN Measure = 'Pedestrians' THEN 'Pedestrians'\n# WHEN Measure = 'Personal Vehicle Passengers' THEN 'Light Vehicle'\n# WHEN Measure = 'Personal Vehicles' THEN 'Light Vehicle'\n# WHEN Measure = 'Rail Containers Empty' THEN 'Heavy Vehicle'\n# WHEN Measure = 'Rail Containers Full' THEN 'Heavy Vehicle'\n# WHEN Measure = 'Train Passengers' THEN 'Train'\n# WHEN Measure = 'Trains' THEN 'Train'\n# WHEN Measure = 'Truck Containers Empty' THEN 'Heavy Vehicle'\n# WHEN Measure = 'Truck Containers Full' THEN 'Heavy Vehicle'\n# WHEN Measure = 'Trucks' THEN 'Heavy Vehicle'\n# ELSE '' END AS [Vehicle_Type]\n# FROM [BC1]\n# ) AS B1\n# GROUP BY [STATE_NAME], Vehicle_Type\n# ORDER BY [STATE_NAME]\n\nstate_Heavy_count = pd.read_csv('..\/input\/us-border-crossing-temporal-and-spatial-analysis\/Border_Crossing_Entry_Data_Heavy.csv')\nstate_Light_count = pd.read_csv('..\/input\/us-border-crossing-temporal-and-spatial-analysis\/Border_Crossing_Entry_Data_Light.csv')\nstate_Train_count = pd.read_csv('..\/input\/us-border-crossing-temporal-and-spatial-analysis\/Border_Crossing_Entry_Data_Train.csv')\nstate_Pedestrian_count = pd.read_csv('..\/input\/us-border-crossing-temporal-and-spatial-analysis\/Border_Crossing_Entry_Data_Pedestrian.csv')\n\nstate_Heavy_count_gp = states.merge(state_Heavy_count, on='STATE_NAME', how='left')\nstate_Light_count_gp = states.merge(state_Light_count, on='STATE_NAME', how='left')\nstate_Train_count_gp = states.merge(state_Train_count, on='STATE_NAME', how='left')\nstate_Pedestrian_count_gp = states.merge(state_Pedestrian_count, on='STATE_NAME', how='left')\n\nstate_Heavy_count[\"Crossing\"].fillna(0, inplace=True)\nstate_Light_count[\"Crossing\"].fillna(0, inplace=True)\nstate_Train_count[\"Crossing\"].fillna(0, inplace=True)\nstate_Pedestrian_count[\"Crossing\"].fillna(0, inplace=True)\n\nstate_Heavy_count = state_Heavy_count.rename(columns={'STATE_NAME':'NAME'})\nstate_Light_count = state_Light_count.rename(columns={'STATE_NAME':'NAME'})\nstate_Train_count = state_Train_count.rename(columns={'STATE_NAME':'NAME'})\nstate_Pedestrian_count = state_Pedestrian_count.rename(columns={'STATE_NAME':'NAME'})\n\nalaska_Heavy_count_gp = alaska.merge(state_Heavy_count, on='NAME', how='left')\nalaska_Heavy_count_gp[\"Crossing\"].fillna(0, inplace=True)\nalaska_Light_count_gp = alaska.merge(state_Light_count, on='NAME', how='left')\nalaska_Light_count_gp[\"Crossing\"].fillna(0, inplace=True)\nalaska_Train_count_gp = alaska.merge(state_Train_count, on='NAME', how='left')\nalaska_Train_count_gp[\"Crossing\"].fillna(0, inplace=True)\nalaska_Pedestrian_count_gp = alaska.merge(state_Pedestrian_count, on='NAME', how='left')\nalaska_Pedestrian_count_gp[\"Crossing\"].fillna(0, inplace=True)","d7edd8ef":"f,ax=plt.subplots(1,2,figsize=(25,5))\n\ntitle = plt.title('Heavy Vehicles Crossings by State', fontsize=20)\ntitle.set_position([-0.2, 1.25])\n\nalaska_Heavy_count_gp.plot( column='Crossing', \n                  cmap='OrRd', legend=True, ax=ax[0]\n                 , vmax=35000,vmin=0)\nstate_Heavy_count_gp.plot( column='Crossing', \n                  cmap='OrRd', legend=True, ax=ax[1]\n                 , vmax=35000,vmin=0)\nax[0].axes.get_xaxis().set_visible(False)\nax[0].axes.get_yaxis().set_visible(False)\nax[1].axes.get_xaxis().set_visible(False)\nax[1].axes.get_yaxis().set_visible(False)","b7634d3c":"f,ax=plt.subplots(1,2,figsize=(25,5))\n\ntitle = plt.title('Light Vehicles Crossings by State', fontsize=20)\ntitle.set_position([-0.2, 1.25])\n\nalaska_Light_count_gp.plot( column='Crossing', \n                  cmap='OrRd', legend=True, ax=ax[0]\n                 , vmax=11000,vmin=0)\nstate_Light_count_gp.plot( column='Crossing', \n                  cmap='OrRd', legend=True, ax=ax[1]\n                 , vmax=11000,vmin=0)\nax[0].axes.get_xaxis().set_visible(False)\nax[0].axes.get_yaxis().set_visible(False)\nax[1].axes.get_xaxis().set_visible(False)\nax[1].axes.get_yaxis().set_visible(False)","289630b1":"f,ax=plt.subplots(1,2,figsize=(25,5))\n\ntitle = plt.title('Train Crossings by State', fontsize=20)\ntitle.set_position([-0.2, 1.25])\n\nalaska_Train_count_gp.plot( column='Crossing', \n                  cmap='OrRd', legend=True, ax=ax[0]\n                 , vmax=11000,vmin=0)\nstate_Train_count_gp.plot( column='Crossing', \n                  cmap='OrRd', legend=True, ax=ax[1]\n                 , vmax=11000,vmin=0)\nax[0].axes.get_xaxis().set_visible(False)\nax[0].axes.get_yaxis().set_visible(False)\nax[1].axes.get_xaxis().set_visible(False)\nax[1].axes.get_yaxis().set_visible(False)","2a44715c":"f,ax=plt.subplots(1,2,figsize=(25,5))\n\ntitle = plt.title('Pedestrians Crossings by State', fontsize=20)\ntitle.set_position([-0.2, 1.25])\n\nalaska_Pedestrian_count_gp.plot( column='Crossing', \n                  cmap='OrRd', legend=True, ax=ax[0]\n                 , vmax=5000,vmin=0)\nstate_Pedestrian_count_gp.plot( column='Crossing', \n                  cmap='OrRd', legend=True, ax=ax[1]\n                 , vmax=5000,vmin=0)\nax[0].axes.get_xaxis().set_visible(False)\nax[0].axes.get_yaxis().set_visible(False)\nax[1].axes.get_xaxis().set_visible(False)\nax[1].axes.get_yaxis().set_visible(False)","6921162b":"#SELECT *, MONTH([Date]) AS [Month], YEAR([Date]) AS [Year]\n#FROM [BC1]\n#ORDER BY [State], MONTH([Date])\n\n\ndata_ym = pd.read_csv('..\/input\/us-border-crossing-temporal-and-spatial-analysis\/Border_Crossing_Entry_Data7.csv')\ndata_ym.head()","33cd5231":"f,ax=plt.subplots(1,1,figsize=(20,10))\ntitle = plt.title('Crossings by Year', fontsize=20)\ntitle.set_position([0.5, 1.05])\n\nsns.countplot('Year',data=data_ym,ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Crossings')\ng = ax.set_xticklabels(ax.get_xticklabels(), rotation=90, horizontalalignment='center', fontsize=15)\nplt.show()","ab14d67a":"f,ax=plt.subplots(1,1,figsize=(20,10))\ntitle = plt.title('Crossings by Month', fontsize=20)\ntitle.set_position([0.5, 1.05])\n\nsns.countplot('Month',data=data_ym,ax=ax)\nax.set_xlabel('Month')\nax.set_ylabel('Number of Crossings')\nx_label_list = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\ng = ax.set_xticklabels(x_label_list, rotation=30, horizontalalignment='right', fontsize=15)\nplt.show()","110b4438":"#SELECT MONTH([Date]) AS [Month], YEAR([Date]) AS [Year], COUNT(*) AS [Crossing]\n#FROM [BC1]\n#GROUP BY MONTH([Date]),YEAR([Date])\n\n\ndata_ym_count = pd.read_csv('..\/input\/us-border-crossing-temporal-and-spatial-analysis\/Border_Crossing_Entry_Data8.csv')","fcc1681d":"heatmap_data = pd.pivot_table(data_ym_count, values='Crossing', \n                     index=['Month'], \n                     columns='Year')\n\nf,ax=plt.subplots(1,1,figsize=(20,7))\ntitle = plt.title('Crossings by Month', fontsize=20)\ntitle.set_position([0.5, 1.05])\n\n\ng = sns.heatmap(heatmap_data, cmap=\"OrRd\",linewidths=.5, linecolor='black', cbar_kws={'label': 'Crossings'}, ax=ax)\ny_label_list = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\ny = ax.set_yticklabels(y_label_list, rotation=0, horizontalalignment='right')\nplt.show()","64dfb5ca":"**Introducing Geometry column in original Data**","925883a6":"# 4. Temporal Data Analysis","0fe1a4e0":"**Crossings by State and Vehicle Type**","d857d75d":"# 3. Spatial Data Analysis","12223650":"# 1. Foreword\n\nThis Notebook is created for learning purpose for beginners specially for those who have very little knowledge of Python but have nice experience with other programming languages for example c#, java, c++, SQL. I will be using lot od SQL in there for data wrangling instead of Pandas or any other library.\n\nIn addition to that I have created a small utility to load data from\/to CSV\/SQL while I will upload once it gets stabalized.","72c71fe0":"# 2. Data Load and Library Imports"}}