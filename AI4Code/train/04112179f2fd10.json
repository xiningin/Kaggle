{"cell_type":{"77af43ff":"code","1ea4ece3":"code","5a10565e":"code","6703b12b":"code","238c1686":"code","b2b43e10":"code","f368af97":"code","47163e2d":"code","143c452f":"code","86c45f15":"code","9b1c53a3":"code","834c8612":"code","927a5c86":"code","aa223d05":"code","81b492cb":"code","a23a9639":"code","8aa6f776":"code","1fc151c2":"code","abd876ab":"code","26c0f0e5":"code","803f408a":"code","b30c7eae":"code","ba60cb9c":"code","80259cdf":"code","cbc4b399":"markdown","1a90bc43":"markdown","1cdcac89":"markdown","a6332aae":"markdown","f66a7093":"markdown","90f6aee9":"markdown","4002658a":"markdown","ae4b0d29":"markdown"},"source":{"77af43ff":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport skimage.io\nimport tensorflow\nimport glob\nimport tqdm\n\nfrom tqdm import tqdm\n\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.layers import InputLayer, Dense, BatchNormalization, Dropout, Flatten, Activation\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\n\n%matplotlib inline","1ea4ece3":"train_normal = glob.glob('..\/input\/labeled-chest-xray-images\/chest_xray\/train\/NORMAL\/*.jpeg')\na = len(train_normal)","5a10565e":"train_pneumonia = glob.glob('..\/input\/labeled-chest-xray-images\/chest_xray\/train\/PNEUMONIA\/*.jpeg')\nb = len(train_pneumonia)","6703b12b":"# Total training images\n\nprint(\"Total nos. of training images are: {}\".format(a + b))","238c1686":"train_datagen = ImageDataGenerator(rescale = 1.0 \/ 255.0,\n                                   zoom_range = 0.4,\n                                   validation_split = 0.2)\n\nvalid_datagen = ImageDataGenerator(rescale = 1.0 \/ 255.0,\n                                   validation_split = 0.2)\n\ntest_datagen  = ImageDataGenerator(rescale = 1.0 \/ 255.0)","b2b43e10":"train_dataset = train_datagen.flow_from_directory(directory = '..\/input\/labeled-chest-xray-images\/chest_xray\/train',\n                                                  target_size = (224,224),\n                                                  class_mode = 'binary',\n                                                  subset = 'training',\n                                                  batch_size = 64)","f368af97":"valid_dataset = valid_datagen.flow_from_directory(directory = '..\/input\/labeled-chest-xray-images\/chest_xray\/train',\n                                                  target_size = (224,224),\n                                                  class_mode = 'binary',\n                                                  subset = 'validation',\n                                                  batch_size = 64)","47163e2d":"# Checking Indices\n\ntrain_dataset.class_indices","143c452f":"len(train_dataset)","86c45f15":"# Viewing Images \n\nfig, ax = plt.subplots(nrows = 1, ncols = 5, figsize = (20,20))\n\nfor i in tqdm(range(0, 5)):\n    rand1 = np.random.randint(len(train_dataset))\n    rand2 = np.random.randint(64)\n    ax[i].imshow(train_dataset[rand1][0][rand2])\n    ax[i].axis('off')\n    label = train_dataset[rand1][1][rand2]\n    if label == 1:\n        ax[i].set_title('PNEUMONIA')\n    else:\n        ax[i].set_title('NORMAL')","9b1c53a3":"# Defining Model\n\nbase_model = VGG16(input_shape=(224,224,3), \n                   include_top=False,\n                   weights=\"imagenet\")","834c8612":"# Freezing Layers \n\nfor layer in base_model.layers:\n    layer.trainable=False","927a5c86":"# Summary\n\nbase_model.summary()","aa223d05":"# Defining Layers\n\nmodel=Sequential()\nmodel.add(base_model)\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(1024,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1024,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1,activation='sigmoid'))","81b492cb":"# Summary\n\nmodel.summary()","a23a9639":"# Model Compile \n\nOPT    = tensorflow.keras.optimizers.Adam(lr=0.001)\n\nmodel.compile(loss='binary_crossentropy',\n              metrics=[tensorflow.keras.metrics.AUC(name = 'auc')],\n              optimizer=OPT)","8aa6f776":"# Defining Callbacks\n\nfilepath = '.\/best_weights.hdf5'\n\nearlystopping = EarlyStopping(monitor = 'val_auc', \n                              mode = 'max' , \n                              patience = 3,\n                              verbose = 1)\n\ncheckpoint    = ModelCheckpoint(filepath, \n                                monitor = 'val_auc', \n                                mode='max', \n                                save_best_only=True, \n                                verbose = 1)\n\n\ncallback_list = [earlystopping, checkpoint]","1fc151c2":"# Model Fitting \n\nmodel_history=model.fit(train_dataset,\n                        validation_data=valid_dataset,\n                        epochs = 10,\n                        callbacks = callback_list,\n                        verbose = 1)","abd876ab":"# Summarize the model loss\n\nplt.plot(model_history.history['loss'])\nplt.plot(model_history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left', bbox_to_anchor=(1,1))\nplt.show()","26c0f0e5":"# Summarize models auc\n\nplt.plot(model_history.history['auc'])\nplt.plot(model_history.history['val_auc'])\nplt.title('Model AUC')\nplt.ylabel('AUC')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left', bbox_to_anchor=(1,1))\nplt.show()","803f408a":"# Test Data \n\ntest_dataset = test_datagen.flow_from_directory(directory = '..\/input\/labeled-chest-xray-images\/chest_xray\/test',\n                                                target_size = (224,224),\n                                                class_mode = 'binary',\n                                                batch_size = 64)","b30c7eae":"# Evaluating Loss and AUC - Test Data \n\nmodel.evaluate(test_dataset)","ba60cb9c":"# Test Case 1: NORMAL\n\ndic = test_dataset.class_indices\nidc = {k:v for v, k in dic.items()}\n\nimg = load_img('..\/input\/labeled-chest-xray-images\/chest_xray\/test\/NORMAL\/NORMAL-1212407-0001.jpeg', target_size=(224,224))\nimg = img_to_array(img)\nimg = img\/255\nimshow(img)\nplt.axis('off')\nimg = np.expand_dims(img,axis=0)\nanswer = model.predict_proba(img)\n\nif answer[0][0] > 0.5:\n    print(\"The X-Ray belongs to PNEUMONIA person\")\nelse:\n    print(\"The X-RAY belongs to NORMAL person\")","80259cdf":"# Test Case 2: PNEUMONIA\n\ndic = test_dataset.class_indices\nidc = {k:v for v, k in dic.items()}\n\nimg = load_img('..\/input\/labeled-chest-xray-images\/chest_xray\/test\/PNEUMONIA\/BACTERIA-1220485-0001.jpeg', target_size=(224,224))\nimg = img_to_array(img)\nimg = img\/255\nimshow(img)\nplt.axis('off')\nimg = np.expand_dims(img,axis=0)\nanswer = model.predict_proba(img)\n\nif answer[0][0] > 0.5:\n    print(\"The X-Ray belongs to PNEUMONIA person\")\nelse:\n    print(\"The X-RAY belongs to NORMAL person\")","cbc4b399":"### MODEL EVALUATION","1a90bc43":"> `DATA AUGMENTATION`","1cdcac89":"> `1. We where able to successfully classify the images with 99.4% accuracy on training dataset.`\n\n> `2. We acheived 99.52% accuracy on validation data and 98.3% accuracy on test dataset.`","a6332aae":"### MODEL BUILDING","f66a7093":"### IMPORTING \/ VIEWING \/ PREPROCESSING DATASET \n","90f6aee9":"### IMPORTING LIBRARIES","4002658a":"### CONCLUSION\n","ae4b0d29":"> `TRAINING IMAGES`"}}