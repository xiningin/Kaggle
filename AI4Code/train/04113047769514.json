{"cell_type":{"6e09d23d":"code","50efb027":"code","d0a683c3":"code","cf7ae8ed":"code","fd47abdf":"code","f68dd53e":"code","df39a917":"code","fec02749":"code","fcf5c275":"code","15975b90":"code","6961780d":"code","f0d1efc4":"code","6cdff1f0":"code","4e39a72e":"code","70c77868":"code","57665b9e":"code","baa1684f":"code","49863b24":"code","7450e616":"markdown"},"source":{"6e09d23d":"import numpy as np\nimport pandas as pd \nimport math\nimport cv2\nimport PIL\nfrom PIL import Image\nimport numpy as np\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.applications import DenseNet121\nfrom tensorflow.keras.callbacks import Callback, ModelCheckpoint\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, accuracy_score\nimport scipy\nimport tensorflow as tf\nfrom tqdm import tqdm\n%matplotlib inline\n\nimport os\n# There are two ways to load the data from the PANDA dataset:\n# Option 1: Load images using openslide\nimport openslide\n# Option 2: Load images using skimage (requires that tifffile is installed)\nimport skimage.io\n# General packages\nfrom IPython.display import display\n# Plotly for the interactive viewer (see last section)\nimport plotly.graph_objs as go\n# read images\nimport rasterio\n\nimport gc\nfrom random import randint\nimport warnings","50efb027":"#Detecting accelerator hardware\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\nexcept ValueError:\n    tpu = None\n    gpus = tf.config.experimental.list_logical_devices('GPU')\n\n#Select appropriate distribution strategy for hardware\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n    print(\"Running on TPU: \" + str(tpu.master()))\nelif len(gpus) > 0:\n    strategy = tf.distribute.MirroredStrategy(gpus)\n    print(\"Running on \",len(gpus),\" GPU(s)\")\nelse:\n    strategy = tf.distribute.get_strategy()\n    print(\"Running on CPU\")\nprint(\"Number of units: {}\".format(strategy.num_replicas_in_sync))","d0a683c3":"AUTO = tf.data.experimental.AUTOTUNE\n#Learning rate scheduling variables\nnum_units = strategy.num_replicas_in_sync\nif num_units == 8:\n    BATCH_SIZE = 16 * num_units\n    VALIDATION_BATCH_SIZE = 16 * num_units\n    start_lr = 0.00001\n    min_lr = 0.00001\n    max_lr = 0.00005 * num_units\n    rampup_epochs = 8\n    sustain_epochs = 0\n    exp_decay = 0.8\nelse:\n    BATCH_SIZE = 2\n    VALIDATION_BATCH_SIZE = 2\n    start_lr = 0.0003\n    min_lr = 0.000001\n    rampup_epochs = 8\n    sustain_epochs = 0\n    exp_decay = 0.7\n\"\"\"else:\n    BATCH_SIZE = 2 * num_units\n    VALIDATION_BATCH_SIZE = 2 * num_units\n    start_lr = 0.00001\n    min_lr = 0.00001\n    max_lr = 0.00002 * num_units\n    rampup_epochs = 11\n    sustain_epochs = 0\n    exp_decay = 0.8\"\"\"","cf7ae8ed":"BASE = '..\/input\/prostate-cancer-grade-assessment\/'\nTEST_PATH = '..\/input\/prostate-cancer-grade-assessment\/test_images'\ntest_csv_path = '..\/input\/prostate-cancer-grade-assessment\/sample_submission.csv'","fd47abdf":"test_csv_path","f68dd53e":"train = pd.read_csv(BASE + 'train.csv')\ntest = pd.read_csv(BASE + 'test.csv')","df39a917":"image_paths = [BASE + 'train_images\/' + x + '.tiff' for x in train['image_id'].values.tolist()]","fec02749":"def read_image(image_path, resize_ratio=1):\n    \n    if not(isinstance(image_path, str)):\n        # if tensor with byte string\n        image_path = image_path.numpy().decode('utf-8') \n    image_level_1 = skimage.io.MultiImage(image_path)[1]\n    \n    if resize_ratio != 1:\n        new_w = int(image_level_1.shape[1]*resize_ratio)\n        new_h = int(image_level_1.shape[0]*resize_ratio)\n        image_level_1 = cv2.resize(\n            image_level_1, (new_w, new_h), interpolation=cv2.INTER_AREA)\n    return image_level_1","fcf5c275":"def _mask_tissue(image, kernel_size=(7, 7), gray_threshold=220):\n    \"\"\"Masks tissue in image. Uses gray-scaled image, as well as\n    dilation kernels and 'gap filling'\n    \"\"\"\n    # Define elliptic kernel\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, kernel_size)\n    # Convert rgb to gray scale for easier masking\n    gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n    # Now mask the gray-scaled image (capturing tissue in biopsy)\n    mask = np.where(gray < gray_threshold, 1, 0).astype(np.uint8)\n    # Use dilation and findContours to fill in gaps\/holes in masked tissue\n    mask = cv2.dilate(mask, kernel, iterations=1)\n    contour, _ = cv2.findContours(mask, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)\n    for cnt in contour:\n        cv2.drawContours(mask, [cnt], 0, 1, -1)\n    return mask","15975b90":"def _pad_image(image, pad_len, pad_val):\n    \"\"\"Pads inputted image, accepts both \n    2-d (mask) and 3-d (rgb image) arrays\n    \"\"\"\n    if image is None:\n        return None\n    elif image.ndim == 2:\n        return np.pad(\n            image, ((pad_len, pad_len), (pad_len, pad_len)), pad_val)\n    elif image.ndim == 3:\n        return np.pad(\n            image, ((pad_len, pad_len), (pad_len, pad_len), (0, 0)), pad_val)\n    return None\n\ndef _transpose_image(image):\n    \"\"\"Inputs an image and transposes it, accepts \n    both 2-d (mask) and 3-d (rgb image) arrays\n    \"\"\"\n    if image is None:\n        return None\n    elif image.ndim == 2:\n        return np.transpose(image, (1, 0)).copy()\n    elif image.ndim == 3:\n        return np.transpose(image, (1, 0, 2)).copy()\n    return None\n\ndef _get_tissue_parts_indices(tissue, min_consec_info):\n    \"\"\"If there are multiple tissue parts in 'tissue', 'tissue' will be \n    split. Each tissue part will be taken care of separately (later on), \n    and if the tissue part is less than min_consec_info, it's considered \n    to small and won't be returned.\n    \"\"\"\n    split_points = np.where(np.diff(tissue) != 1)[0]+1\n    tissue_parts = np.split(tissue, split_points)\n    return [\n        tp for tp in tissue_parts if len(tp) >= min_consec_info\n    ]\n\ndef _get_tissue_subparts_coords(subtissue, patch_size, min_decimal_keep):\n    \"\"\"Inputs a tissue part resulting from '_get_tissue_parts_indices'.\n    This tissue part is divided into N subparts and returned.\n    Argument min_decimal_keep basically decides if we should reduce the\n    N subparts to N-1 subparts, due to overflow.\n    \"\"\"\n    start, end = subtissue[0], subtissue[-1]\n    num_subparts = (end-start)\/patch_size\n    if num_subparts % 1 < min_decimal_keep and num_subparts >= 1:\n        num_subparts = math.floor(num_subparts)\n    else:\n        num_subparts = math.ceil(num_subparts)\n\n    excess = (num_subparts*patch_size) - (end-start)\n    shift = excess \/\/ 2\n\n    return [\n        i * patch_size + start - shift \n        for i in range(num_subparts)\n    ]\n\ndef _eval_and_append_xy_coords(coords,\n                               image, \n                               mask, \n                               patch_size, \n                               x, y, \n                               min_patch_info,\n                               transposed,\n                               precompute):\n    \"\"\"Based on computed x and y coordinates of patch: \n    slices out patch from original image, flattens it,\n    preprocesses it, and finally evaluates its mask.\n    If patch contains more info than min_patch_info,\n    the patch coordinates are kept, along with a value \n    'val1' that estimates how much information there \n    is in the patch. Smaller 'val1' assumes more info.\n    \"\"\"\n    patch_1d = (\n        image[y: y+patch_size, x:x+patch_size, :]\n        .mean(axis=2)\n        .reshape(-1)\n    )\n    idx_tissue = np.where(patch_1d <= 210)[0]\n    idx_black = np.where(patch_1d < 5)[0]\n    idx_background = np.where(patch_1d > 210)[0]\n\n    if len(idx_tissue) > 0:\n        patch_1d[idx_black] = 210\n        patch_1d[idx_background] = 210\n        val1 = int(patch_1d.mean())\n        val2 = mask[y:y+patch_size, x:x+patch_size].mean()\n        if val2 > min_patch_info:\n            if precompute:\n                if transposed:\n                    coords = np.concatenate([\n                        coords, [[val1, x-patch_size, y-patch_size]]\n                    ])\n                else:\n                    coords = np.concatenate([\n                        coords, [[val1, y-patch_size, x-patch_size]]\n                    ])\n            else:\n                coords = np.concatenate([\n                    coords, [[val1, y, x]]\n                ])\n               \n    return coords\n\ndef compute_coords(image,\n                   patch_size=256,\n                   precompute=False,\n                   min_patch_info=0.35,\n                   min_axis_info=0.35,\n                   min_consec_axis_info=0.35,\n                   min_decimal_keep=0.7\n                  ):\n\n    \"\"\"\n    Input:\n        image : 3-d np.ndarray\n        patch_size : size of patches\/tiles, will be of \n            size (patch_size x patch_size x 3)\n        precompute : If True, only coordinates will be returned,\n            these coordinates match the inputted 'original' image.\n            If False, both an image and coordinates will be returned,\n            the coordinates does not match the inputted image but the\n            image that it is returned with.\n        min_patch_info : Minimum required information in patch\n            (see '_eval_and_append_xy_coords')\n        min_axis_info : Minimum fraction of on-bits in x\/y dimension to be \n            considered enough information. For x, this would be fraction of \n            on-bits in x-dimension of a y:y+patch_size slice. For y, this would \n            be the fraction of on-bits for the whole image in y-dimension\n        min_consec_axis_info : Minimum consecutive x\/y on-bits\n            (see '_get_tissue_parts_indices')\n        min_decimal_keep : Threshold for decimal point for removing \"excessive\" patch\n            (see '_get_tissue_subparts_coords')\n    \n    Output:\n        image [only if precompute is False] : similar to input image, but fits \n            to the computed coordinates\n        coords : the coordinates that will be used to compute the patches later on\n    \"\"\"\n    \n    \n    if type(image) != np.ndarray:\n        # if image is a Tensor\n        image = image.numpy()\n    \n    # masked tissue will be used to compute the coordinates\n    mask = _mask_tissue(image)\n\n    # initialize coordinate accumulator\n    coords = np.zeros([0, 3], dtype=int)\n\n    # pad image and mask to make sure no tissue is potentially missed out\n    image = _pad_image(image, patch_size, 'maximum')\n    mask = _pad_image(mask, patch_size, 'minimum')\n    \n    y_sum = mask.sum(axis=1)\n    x_sum = mask.sum(axis=0)\n    # if on bits in x_sum is greater than in y_sum, the tissue is\n    # likely aligned horizontally. The algorithm works better if\n    # the image is aligned vertically, thus the image will be transposed\n    if len(np.where(x_sum > 0)[0]) > len(np.where(y_sum > 0)[0]):\n        image = _transpose_image(image)\n        mask = _transpose_image(mask)\n        y_sum, _ = x_sum, y_sum\n        transposed = True\n    else:\n        transposed = False\n    \n    # where y_sum is more than the minimum number of on-bits\n    y_tissue = np.where(y_sum >= (patch_size*min_axis_info))[0]\n    \n    if len(y_tissue) < 1:\n        warnings.warn(\"Not enough tissue in image (y-dim)\", RuntimeWarning)\n        if precompute: return [(0, 0, 0)]\n        else: return image, [(0, 0, 0)]\n    \n    y_tissue_parts_indices = _get_tissue_parts_indices(\n        y_tissue, patch_size*min_consec_axis_info)\n    \n    if len(y_tissue_parts_indices) < 1: \n        warnings.warn(\"Not enough tissue in image (y-dim)\", RuntimeWarning)\n        if precompute: return [(0, 0, 0)]\n        else: return image, [(0, 0, 0)]\n    \n    # loop over the tissues in y-dimension\n    for yidx in y_tissue_parts_indices:\n        y_tissue_subparts_coords = _get_tissue_subparts_coords(\n            yidx, patch_size, min_decimal_keep)\n        \n        for y in y_tissue_subparts_coords:\n            # in y_slice, where x_slice_sum is more than the minimum number of on-bits\n            x_slice_sum = mask[y:y+patch_size, :].sum(axis=0)\n            x_tissue = np.where(x_slice_sum >= (patch_size*min_axis_info))[0]\n            \n            x_tissue_parts_indices = _get_tissue_parts_indices(\n                x_tissue, patch_size*min_consec_axis_info)\n            \n            # loop over tissues in x-dimension (inside y_slice 'y:y+patch_size')\n            for xidx in x_tissue_parts_indices:\n                x_tissue_subparts_coords = _get_tissue_subparts_coords(\n                    xidx, patch_size, min_decimal_keep)\n                \n                for x in x_tissue_subparts_coords:\n                    coords = _eval_and_append_xy_coords(\n                        coords, image, mask, patch_size, x, y, \n                        min_patch_info, transposed, precompute\n                    )     \n    \n    if len(coords) < 1:\n        warnings.warn(\"Not enough tissue in image (x-dim)\", RuntimeWarning)\n        if precompute: return [(0, 0, 0)]\n        else: return image, [(0, 0, 0)]\n    \n    if precompute:\n        return coords\n    else:\n        return image, coords","6961780d":"def _patch_augment(patch, p=0.5):\n    \"\"\"Performs random rotation, random flip (u\/d, l\/r),\n    and random transpose, based on probability p\"\"\"\n    r1 = tf.random.uniform(\n        shape=(4,), minval=0, maxval=1)\n    r2 = tf.random.uniform(\n        shape=(), minval=0, maxval=4, dtype=tf.int32)\n    if r1[0] > (1-p):\n        patch = tf.image.rot90(patch, k=r2)\n    if r1[1] > (1-p):\n        patch = tf.image.random_flip_left_right(patch)\n    if r1[2] > (1-p):\n        patch = tf.image.random_flip_up_down(patch)\n    if r1[3] > (1-p):\n        patch = tf.transpose(patch, (1, 0, 2))\n    return patch\n\ndef _excess_coords_filtering(coords, sample_size, proportion=0.25):\n    \"\"\"filters out a portion of excessive coordinates.\n    coordinates with higher values are filtered out.\n    \"\"\"\n    if len(coords) > sample_size:\n        c = tf.transpose(coords)\n        v = tf.gather(c, 0)\n        num = tf.cast(len(v), tf.float32)\n        sample_size = tf.cast(sample_size, tf.float32)\n        indices_reduced = int(tf.math.ceil(\n            num * (1 - ((num - sample_size) \/ num) * proportion)\n        ))\n        v_argsort = tf.argsort(v)\n        indices = tf.gather(v_argsort, tf.range(indices_reduced))\n        indices = tf.sort(indices)\n        coords = tf.gather(coords, indices)\n    return coords\n   \n@tf.function\ndef patch_image(image, coords, sample_size=36, patch_size=256):\n    \n    l = tf.cast(tf.math.sqrt(tf.cast(sample_size, tf.float32)), tf.int32)\n    coords = _excess_coords_filtering(coords, sample_size)\n    # coords = tf.random.shuffle(coords)\n    if len(coords) < sample_size:\n        indices = tf.tile(\n            tf.range(len(coords)), [tf.math.ceil(sample_size\/len(coords))])\n        indices = indices[:sample_size]\n    else:\n        indices = tf.range(sample_size)\n\n    coords = tf.gather(coords, indices)\n    \n    coords = tf.random.shuffle(coords) # Update: shuffle here instead\n    \n    patched_image = tf.zeros(\n        [0, patch_size, patch_size, 3], dtype=tf.dtypes.uint8)\n\n    for i in range(sample_size):\n        y = tf.gather_nd(coords, [i, 1])\n        x = tf.gather_nd(coords, [i, 2])\n        shape = tf.shape(image)\n        h = tf.gather(shape, 0)\n        w = tf.gather(shape, 1)\n        if y < 0: y = 0\n        if x < 0: x = 0\n        if y > h-patch_size: y = h-patch_size\n        if x > w-patch_size: x = w-patch_size\n            \n        patch = tf.slice(\n            image, \n            tf.stack([y, x, 0]), \n            tf.stack([patch_size, patch_size, -1]))\n\n        patched_image = tf.concat([\n            patched_image, tf.expand_dims(patch, 0)], axis=0)\n    \n    patched_image = tf.reshape(patched_image, (-1, patch_size*l, patch_size, 3))\n    patched_image = tf.transpose(patched_image, (0, 2, 1, 3))\n    patched_image = tf.reshape(patched_image, (patch_size*l, patch_size*l, 3))\n    return patched_image","f0d1efc4":"auto = tf.data.experimental.AUTOTUNE","6cdff1f0":"import keras.applications","4e39a72e":"import tensorflow as tf\nfrom tensorflow import keras\nimport keras.backend as k\nfrom tensorflow.keras.layers import Conv2D, Dense, Dropout, GlobalAveragePooling2D, BatchNormalization\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\n#import efficientnet.tfkeras as efn ","70c77868":"class FixedDropout(tf.keras.layers.Dropout):\n    def _get_noise_shape(self, inputs):\n        if self.noise_shape is None:\n            return self.noise_shape\n        symbolic_shape = k.shape(inputs)\n        noise_shape = [symbolic_shape[axis] if shape is None else shape for axis, shape in enumerate(self.noise_shape)]\n        return tuple(noise_shape)","57665b9e":"model = keras.models.load_model('..\/input\/finall\/effnetb0model9.h5', compile = False,custom_objects = {\n#'swish':tf.compat.v2.nn.swish,\n    'FixedDropout':FixedDropout})","baa1684f":"model.summary()","49863b24":"if os.path.exists(TEST_PATH):\n    submission_csv = pd.read_csv(test_csv_path)\n    test_image_paths = [TEST_PATH + '\/' + x + '.tiff' for x in submission_csv['image_id'].values.tolist()]\n    test_dat = (\n    tf.data.Dataset.from_tensor_slices(test_image_paths)\n        .map(\n        lambda filename: tf.py_function(\n        func = read_image,\n        inp = [filename],\n        Tout = [tf.uint8]),\n        num_parallel_calls = auto)\n        .map(\n        lambda image: tf.py_function(\n        func = compute_coords,\n        inp = [image],\n        Tout= [tf.uint8, tf.int32]),\n        num_parallel_calls = auto)\n        .map(\n        patch_image,\n        num_parallel_calls = auto)\n        .batch(BATCH_SIZE)\n        .prefetch(auto)\n    )\n    preds = model.predict(test_dat)\n    preds = np.sum(((preds > 0.5)*1), axis = 1)\n    submission_csv['isup_grade'] = preds\n    submission_csv['isup_grade'] = submission_csv['isup_grade'].astype(int)\n    submission_csv.to_csv('submission.csv', index = False)\nelse:\n    submission_csv = pd.read_csv(test_csv_path)\n    submission_csv.to_csv('submission.csv', index = False)","7450e616":"fig, axes = plt.subplots(10, 1, figsize=(20, 140))\n\npatch_size = 256\n\nfor i, ax in enumerate(axes.reshape(-1)):\n    image_path = BASE + 'train_images\/' + train.image_id[i+500] + '.tiff'\n    image = read_image(image_path,resize_ratio = 1)\n    \n    coords = compute_coords(image,\n                            patch_size=patch_size,\n                            precompute=True,\n                            min_patch_info=0.35,\n                            min_axis_info=0.35,\n                            min_consec_axis_info=0.35,\n                            min_decimal_keep=0.7)\n    \n    # sort coords (high info -> low info)\n    coords = sorted(coords, key= lambda x: x[0], reverse=False)\n    for (v, y, x) in coords:\n        end_point = (x, y)\n        start_point = (x+patch_size, y+patch_size)\n        image = cv2.rectangle(image, start_point, end_point, 2, 14)\n    \n    ax.imshow(image)\n    ax.axis('off')\n    ax.set_title(\n        \"num patches = \"+str(len(coords))+\", isup grade = \"+str(train.isup_grade[i+500]),\n        fontsize=20)\n\nplt.subplots_adjust(hspace=0.05, wspace=0.05)"}}