{"cell_type":{"72ceed32":"code","c0de6e6c":"code","3e6ca588":"code","2e342767":"code","77b12a37":"code","48831e88":"code","1ffe6721":"code","355e5024":"code","70fae877":"markdown","ec4e0f74":"markdown","b04d5c98":"markdown","05edaf86":"markdown","2144a527":"markdown","d9bbc305":"markdown","ea9e9ae4":"markdown","cc7e1f3e":"markdown","b473327f":"markdown"},"source":{"72ceed32":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0de6e6c":"from csv import reader\nopen_file = open('\/kaggle\/input\/hacker-news-posts\/HN_posts_year_to_Sep_26_2016.csv')\nread_file = reader(open_file)\nhn = list(read_file) # creating a list of lists\nheaders = hn[0] # stored the col headers here for easy reference\nhn = hn[1:] # removed the col headers for easier analysis\n\n#Let's have a look at the first 5 rows of the date\n\nprint(hn[:5])","3e6ca588":"# Printing the headers for easy reference later on...\n\nprint(headers)","2e342767":"# Since we are only interested in \"Show\/Ask HN\" posts, let's extract them from the dataset\n\nask_posts = []\nshow_posts = []\nother_posts = []\n\nfor row in hn:\n    title = row[1]\n    if title.lower().startswith('ask hn'):\n        ask_posts.append(row)\n    elif title.lower().startswith('show hn'):\n        show_posts.append(row)\n    else:\n        other_posts.append(row)\n\nprint('The number of ask hn posts are ', len(ask_posts))\nprint('The number of show hn posts are ',len(show_posts))\nprint('The number of other posts are ', len(other_posts))","77b12a37":"#Now let us have a look at the comments across the ask hn and show hn posts\n\n#Creating a function to calculate the total and average number of posts \n\ndef totandavg(templist): # will return the total number and mean number of comments\n    temp_total = 0\n    temp_count = 0\n    for row in templist:\n        num_comments = row[4]\n        num_comments = int(num_comments)\n        temp_total += num_comments\n        temp_count += 1\n    temp_mean = temp_total\/temp_count\n    return temp_total, temp_mean\n\ntotal_ask_comments, avg_ask_comments = totandavg(ask_posts)\nprint('The average number of Ask HN comments are ',round(avg_ask_comments, 2))\n\ntotal_show_comments, avg_show_comments = totandavg(show_posts)\nprint('The average numnber of Show HN comments are ', round(avg_show_comments, 2))\n\n","48831e88":"import datetime as dt\n\nresults_list = []\n\nfor row in ask_posts:\n    temp = []\n    temp.append(row[6])\n    num_comments = int(row[4])\n    temp.append(num_comments)\n    results_list.append(temp)\n\ncounts_by_hour = {} # will store the count of comments across each hour\ncomments_by_hour = {} # will store the number of comments across each hour\n\n\nfor row in results_list:\n    temp_hour = row[0]\n    temp_hour = dt.datetime.strptime(temp_hour, '%m\/%d\/%Y %H:%M')\n    temp_hour = dt.datetime.strftime(temp_hour, '%H')\n    temp_comment = row[1]\n    if temp_hour in counts_by_hour:\n        counts_by_hour[temp_hour] += 1\n        comments_by_hour[temp_hour] += temp_comment\n    else:\n        counts_by_hour[temp_hour] = 1\n        comments_by_hour[temp_hour] = temp_comment\n\nprint(counts_by_hour) # printing to check the output\nprint('\\n',comments_by_hour) # printing to check the output","1ffe6721":"avg_by_hour = []\n\nfor row in counts_by_hour:\n    avg = comments_by_hour[row]\/counts_by_hour[row]\n    avg_by_hour.append([row, avg])\nprint(avg_by_hour)","355e5024":"# Will start by creating a list that is the same as the avg_by_hour list, but with the cols swapped\n# so that we can use the sorted() function\n\nswap_avg_by_hour = []\nfor row in avg_by_hour:\n    swap_avg_by_hour.append([row[1], row[0]])\n    \nsorted_swap = sorted(swap_avg_by_hour, reverse = True)\n\nprint('Top 5 Hours for Ask Posts Comments')\nfor com, hr in sorted_swap[:5]:\n    print('{time}: {avg:.2f} average comments per post'.format(time = dt.datetime.strptime(hr, '%H').strftime('%H:%M'), avg = com) )","70fae877":"# Sorting the data and creating a list of lists\n\nAlthough we now have the results we need, this format makes it hard to identify the hours with the highest values. Let's finish by sorting the list of lists and printing the five highest values in a format that's easier to read","ec4e0f74":"# Key takeaway - SHow HN vs. Ask HN\nFrom the above analysis it is clear that *Ask HN* posts get significantly higher number of comments (~2.2x higher) vs. *Show HN* posts\nFurther, since the *Ask HN* posts witness higher number of comments, **we will focus the remainder of our analysis on these type of posts**","b04d5c98":"# Exploring Hackers News Posts\n\nFor this analyssis, I will 2 different kinds of posts on [Hacker News](https:\/\/news.ycombinator.com), a popular site where technology related stories (or 'posts') are voted and commented upon. The two types of posts I'll explore begin with either *Ask HN* or *Show HN*.\n\nQuick context here - Users submit *Ask HN* posts to ask the Hacker News community a specific question, such as \"Which is the best online course for python?\". Similarly, users submit *Show HN* posts to show the Hacker News community a project, product, or just generally something interesting.\n\nI'll specifically compare these two types of posts to determine the following:\n* Do Ask HN or Show HN receive more comments on average?\n* Do posts created at a certain time receive more comments on average?\n\nLike any data science project, we begin by reading the dataset","05edaf86":"The hour that receives the most comments per post on average is 15:00, with an average of ~30 comments per post. There's about a ~1.8x increase in the number of comments between the hours with the highest and second highest average number of comments.\n\nAccording to the data set [documentation](https:\/\/www.kaggle.com\/hacker-news\/hacker-news-posts), the timezone used is Eastern Time in the US. So, we could also write 15:00 as 3:00 pm est.\n\n# Conclusion\n\n* In this project, we analyzed ask posts and show posts to determine which type of post and time receive the most comments on average\n* Based on our analysis, to maximize the amount of comments a post receives, we'd recommend the post be categorized as ask post and created between 15:00 and 16:00 (3:00 pm est - 4:00 pm est)\n* However, it should be noted that the data set we analyzed excluded posts without any comments\n* Given that, it's more accurate to say that of the posts that received comments, ask posts received more comments on average and ask posts created between 15:00 and 16:00 (3:00 pm est - 4:00 pm est) received the most comments on average","2144a527":"# Further analysis of Ask HN posts\n\nNext, we'll determine if ask posts created at a certain time are more likely to attract comments. We'll use the following steps to perform this analysis:\n\n* Calculate the amount of ask posts created in each hour of the day, along with the number of comments received\n* Calculate the average number of comments ask posts receive by hour created","d9bbc305":"# Calculating the total and average number of *Show HN* and *Ask HN* posts","ea9e9ae4":"# Finding the Amount of Ask Posts and Comments by Hour Created\n\nI'll determine if we can maximize the amount of comments an ask post receives by creating it at a certain time. First, I'll find the amount of ask posts created during each hour of day, along with the number of comments those posts received. Then, we'll calculate the average amount of comments ask posts created at each hour of the day receive.\n","cc7e1f3e":"# Isolating the required datapoints from the entire dataset\n\nNow that we have the data, we can begin by isolating the data for Show HN and Ask HN comments\n\n**Quick context - comments for *Show HN* and *Ask HN* always start with 'Show HN' or 'Ask HN'**","b473327f":"# Calculating the Average Number of Comments for Ask HN Posts by Hour"}}