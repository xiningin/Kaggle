{"cell_type":{"68e6ebd2":"code","e1e65da9":"code","dc8db174":"code","33dabb37":"code","13460df4":"code","aadfcece":"code","9d806c19":"code","f00b5b15":"code","8b3cbd71":"code","e2fe4b26":"code","69bede6f":"code","23dfbf6b":"code","fd618780":"code","fabb4f30":"code","697301f1":"code","f649795b":"code","6c5fdadf":"code","be0ffc4e":"code","5f2ed164":"code","fe8af666":"code","85ddeb15":"code","f2744890":"code","305d779b":"code","94bd9b61":"code","d0ff71a9":"markdown","480f3dee":"markdown","c58cb22c":"markdown","9ff1a6c7":"markdown","70903372":"markdown","d9bc5d67":"markdown","b30a9ac9":"markdown","bfc531e5":"markdown"},"source":{"68e6ebd2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.impute import SimpleImputer, KNNImputer\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom imblearn.under_sampling import RandomUnderSampler\nimport xgboost as xgb\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMModel,LGBMClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV,train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import SelectKBest, f_regression,f_classif,chi2\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score ,mean_squared_error, mean_absolute_error \\\n, f1_score ,precision_score, recall_score ,precision_recall_curve,plot_confusion_matrix \\\n,confusion_matrix,make_scorer,roc_auc_score\nfrom sklearn.preprocessing import MinMaxScaler,PowerTransformer,QuantileTransformer,Normalizer,RobustScaler,StandardScaler,MaxAbsScaler\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e1e65da9":"data=pd.read_csv(\"..\/input\/iba-ml1-mid-project\/train.csv\")\ndata=data.drop(['Id'], axis=1)\ndata2=pd.read_csv(\"..\/input\/iba-ml1-mid-project\/test.csv\")\ndata2=data2.drop(['Id'], axis=1)\ndata2[\"credit_line_utilization\"] = data2[\"credit_line_utilization\"].str.replace(',', '.')\ndata2[\"credit_line_utilization\"] = data2[\"credit_line_utilization\"].astype(float)\ndata[\"credit_line_utilization\"] = data[\"credit_line_utilization\"].str.replace(',', '.')\ndata[\"credit_line_utilization\"] = data[\"credit_line_utilization\"].astype(float)\n","dc8db174":"X=data.drop(['defaulted_on_loan'], axis=1)\ny=data['defaulted_on_loan']\nrus = RandomUnderSampler(sampling_strategy=1)\nX_rus, y_rus = rus.fit_resample(X, y)\nprint(X_rus.shape) \nprint(y_rus.shape) \ndf_concat = pd.concat([X_rus, y_rus], axis=1)\n","33dabb37":"X_train, X_test, y_train, y_test = train_test_split(X_rus, y_rus ,shuffle=True,stratify=y_rus)","13460df4":"def detect_outliers(var):\n    q_1, q_3 = np.percentile(var, [25, 75])\n    IQR = q_3 - q_1\n    lower_bound = q_1 - (IQR * 1.5)\n    upper_bound = q_3 + (IQR * 1.5)\n    return np.asarray((var > upper_bound) | (var < lower_bound)).nonzero()","aadfcece":"imputer=KNNImputer(missing_values=np.nan, n_neighbors=5)\nX_train_i = imputer.fit_transform(X_train)\nX_train = pd.DataFrame(X_train_i, columns = X_train.columns)\nX_train = X_train.reset_index(drop=True)\ny_train = y_train.reset_index(drop=True)\n\n\nage_outliers = detect_outliers(X_train['age'])[0]\nndfm_outliers = detect_outliers(X_train['number_dependent_family_members'])[0]\nmonthly_income_outliers = detect_outliers(X_train['monthly_income'])[0]\nnocl_outliers = detect_outliers(X_train['number_of_credit_lines'])[0]\nrel_outliers = detect_outliers(X_train['real_estate_loans'])[0]\nrdpti_outliers = detect_outliers(X_train['ratio_debt_payment_to_income'])[0]\n\noverall_outliers = np.unique(np.concatenate((age_outliers, ndfm_outliers, monthly_income_outliers, nocl_outliers, rel_outliers, rdpti_outliers),axis=None))\noverall_outliers\nX_train = X_train.drop(overall_outliers)\ny_train = y_train.drop(overall_outliers)\n","9d806c19":"import optuna\n","f00b5b15":"def make_clf2(itere ,lr, dep):\n    numeric_transformer = Pipeline(steps=[\n            ('impute', KNNImputer(n_neighbors=6,weights='uniform')),\n            ('scaler', RobustScaler())\n        ])\n\n\n\n\n\n    column_transformer = ColumnTransformer(transformers=[\n            ('numeric', numeric_transformer, ['age',\n 'number_dependent_family_members',\n 'monthly_income',\n 'number_of_credit_lines',\n 'real_estate_loans',\n 'ratio_debt_payment_to_income'])\n     ])\n\n\n    model_pipeline =  Pipeline(steps=[\n            ('preprocessing', column_transformer),\n         ('classifier', CatBoostClassifier(iterations=itere,learning_rate=lr,depth=dep,logging_level='Silent'))\n        ])\n    return model_pipeline\n","8b3cbd71":"def objective(trial):\n    itere = trial.suggest_int('itere', 72, 99, step=1)\n    lr = trial.suggest_float('lr', 0.1, 0.397, step=0.033)\n    dep = trial.suggest_int('dep', 5, 10, step=1)\n \n    \n    \n    clf = make_clf2(itere, lr, dep)\n    \n    return cross_val_score(clf,X_train, y_train, cv=10, scoring=make_scorer(roc_auc_score)).mean()","e2fe4b26":"study = optuna.create_study(direction='maximize')","69bede6f":"study.optimize(objective, n_trials=5)","23dfbf6b":"def make_clf2(subsample ,max_depth, eta):\n    numeric_transformer = Pipeline(steps=[\n            ('impute', KNNImputer(n_neighbors=6,weights='uniform')),\n            ('scaler', RobustScaler())\n        ])\n\n\n\n\n\n    column_transformer = ColumnTransformer(transformers=[\n            ('numeric', numeric_transformer, ['age',\n 'number_dependent_family_members',\n 'monthly_income',\n 'number_of_credit_lines',\n 'real_estate_loans',\n 'ratio_debt_payment_to_income'])\n     ])\n\n\n    model_pipeline =  Pipeline(steps=[\n            ('preprocessing', column_transformer),\n         ('classifier', xgb.XGBClassifier(eta=eta, gamma=0.0, max_depth=max_depth,use_label_encoder=False,subsample=subsample, min_child_weight=2\n                                            ,  alpha=1,objective = \"binary:logistic\",\n               eval_metric = \"logloss\"))  \n        ])\n    return model_pipeline","fd618780":"def objective(trial):\n    subsample = trial.suggest_float('subsample', 0.1, 0.5, step=0.1)\n    max_depth = trial.suggest_int('max_depth', 2, 8, step=1)\n    eta = trial.suggest_float('eta', 0.1, 0.5, step=0.1)\n \n    \n    \n    clf = make_clf2(subsample, max_depth, eta)\n    \n    return cross_val_score(clf,X_train, y_train, cv=10, scoring=make_scorer(roc_auc_score)).mean()","fabb4f30":"study = optuna.create_study(direction='maximize')","697301f1":"study.optimize(objective, n_trials=5)","f649795b":"def make_clf(n_nestim,n_nestim2,n_nestim3,a,b,c,d,e,k):\n\n    \n    numeric_preprocessing1 = Pipeline(steps=[\n        ('imputation', KNNImputer(n_neighbors=6)),\n        ('scaling', QuantileTransformer())\n    ])\n    numeric_preprocessing2 = Pipeline(steps=[\n        ('imputation2', KNNImputer(n_neighbors=6)),\n        ('scaling2', QuantileTransformer())\n    ])\n    preprocessing = ColumnTransformer(transformers=[\n     \n        ('numeric', numeric_preprocessing1, [\n 'number_of_credit_lines',\n 'real_estate_loans',\n 'ratio_debt_payment_to_income',\n 'number_of_previous_late_payments_up_to_59_days',\n 'number_of_previous_late_payments_up_to_89_days',\n 'number_of_previous_late_payments_90_days_or_more','credit_line_utilization']),\n    \n            ('numeric2', numeric_preprocessing2, ['age'])\n    ])\n\n    clf = Pipeline(steps=[\n        ('preprocessing', preprocessing),\n        ('sl',SelectKBest(score_func=f_classif, k=k)),\n        ('classifier', VotingClassifier(estimators=[\n        ('knn15', RandomForestClassifier(n_estimators= n_nestim, random_state=100,max_depth=8)), \n        ('knn16', RandomForestClassifier(n_estimators= n_nestim2, random_state=100,max_depth=7)),\n        ('knn17', RandomForestClassifier(n_estimators= n_nestim3, random_state=100,max_depth=6)),  \n        ('classifier1', CatBoostClassifier(iterations=88,learning_rate=0.2,depth=4,logging_level='Silent')),\n\n       ('classifier3', xgb.XGBClassifier(eta=0.1, gamma=0.0, max_depth=4,use_label_encoder=False,subsample=0.2, min_child_weight=2\n                                            ,  alpha=1,objective = \"binary:logistic\",\n               eval_metric = \"logloss\"))   \n     \n    ], voting='soft', weights=[a,b,c,d,e]))\n    ])\n    return clf","6c5fdadf":"def objective(trial):\n    n_nestim = trial.suggest_int('n_estimators', 100, 200, step=10)\n    n_nestim2 = trial.suggest_int('n_estimators2', 40, 100, step=5)\n    n_nestim3 = trial.suggest_int('n_estimators3', 5, 40, step=5)\n\n   \n    a =trial.suggest_int('a', 0, 6)\n    b =trial.suggest_int('b', 0, 6)\n   \n    c =trial.suggest_int('c', 0, 6)\n    d =trial.suggest_int('d', 0, 6)\n    e =trial.suggest_int('e', 0, 6)\n    k =trial.suggest_int('k', 6, 8)\n\n    clf = make_clf(n_nestim,n_nestim2,n_nestim3,a,b,c,d,e,k)\n    \n    \n    return cross_val_score(clf,X_train, y_train, cv=10, scoring=make_scorer(roc_auc_score)).mean()\n        ","be0ffc4e":"study = optuna.create_study(direction='maximize')","5f2ed164":"study.optimize(objective, n_trials=5)","fe8af666":"numeric_preprocessing1 = Pipeline(steps=[\n        ('imputation', KNNImputer(n_neighbors=5)),\n        ('scaling',  QuantileTransformer())\n    ])\nnumeric_preprocessing2 = Pipeline(steps=[\n        ('imputation2', KNNImputer(n_neighbors=6)),\n        ('scaling2',  QuantileTransformer())\n    ])\npreprocessing = ColumnTransformer(transformers=[\n     \n        ('numeric', numeric_preprocessing1, [\n 'number_of_credit_lines',\n 'real_estate_loans',\n 'ratio_debt_payment_to_income',\n 'number_of_previous_late_payments_up_to_59_days',\n 'number_of_previous_late_payments_up_to_89_days',\n 'number_of_previous_late_payments_90_days_or_more','credit_line_utilization']),\n    \n            ('numeric2', numeric_preprocessing2, ['age'])\n    ])\n\nmodel_pipeline4 = Pipeline(steps=[\n        ('preprocessing', preprocessing),\n  \n         \n        ('classifier', VotingClassifier(estimators=[\n \n        ('knn16', RandomForestClassifier(n_estimators= 70, random_state=100,max_depth=7)),\n        ('knn17', RandomForestClassifier(n_estimators= 35, random_state=100,max_depth=8)),  \n        ('classifier1', CatBoostClassifier(iterations=88,learning_rate=0.2,depth=4,logging_level='Silent')),\n       \n       ('classifier3', xgb.XGBClassifier(eta=0.1, gamma=0.0, max_depth=3,use_label_encoder=False,subsample=0.5, min_child_weight=2\n                                            ,  alpha=1,objective = \"binary:logistic\",\n               eval_metric = \"logloss\"))   \n     \n    ], voting='soft', weights=[5,9,7,9]))\n ])\n\nrandom=5\nfor x in range(10):\n    f1_score_y_train=[]\n    f1_score_y_test=[]\n    roc_auc_score_y_train=[]\n    roc_auc_score_y_test=[] \n    \n    X_train, X_test, y_train, y_test = train_test_split(X_rus, y_rus ,shuffle=True,stratify=y_rus,random_state=random)\n    imputer=KNNImputer(missing_values=np.nan, n_neighbors=5)\n    X_train_i = imputer.fit_transform(X_train)\n    X_train = pd.DataFrame(X_train_i, columns = X_train.columns)\n\n    X_train = X_train.reset_index(drop=True)\n    y_train = y_train.reset_index(drop=True)\n\n    random+=5\n    age_outliers = detect_outliers(X_train['age'])[0]\n    ndfm_outliers = detect_outliers(X_train['number_dependent_family_members'])[0]\n    monthly_income_outliers = detect_outliers(X_train['monthly_income'])[0]\n    nocl_outliers = detect_outliers(X_train['number_of_credit_lines'])[0]\n    rel_outliers = detect_outliers(X_train['real_estate_loans'])[0]\n    rdpti_outliers = detect_outliers(X_train['ratio_debt_payment_to_income'])[0]\n   \n    overall_outliers = np.unique(np.concatenate((age_outliers, ndfm_outliers, monthly_income_outliers, nocl_outliers, rel_outliers, rdpti_outliers),axis=None))\n    overall_outliers\n    X_train = X_train.drop(overall_outliers)\n    y_train = y_train.drop(overall_outliers)\n    model_pipeline4.fit(X_train,y_train)\n    f1_score_y_train.append(f1_score(y_train, model_pipeline4.predict(X_train)))\n    f1_score_y_test.append(f1_score(y_test, model_pipeline4.predict(X_test)))\n    roc_auc_score_y_train.append(roc_auc_score(y_train, model_pipeline4.predict(X_train)))\n    roc_auc_score_y_test.append(roc_auc_score(y_test, model_pipeline4.predict(X_test)))\nprint(np.mean(f1_score_y_train))\nprint(np.mean(f1_score_y_test))\nprint(np.mean(roc_auc_score_y_train))\nprint(np.mean(roc_auc_score_y_test))\n","85ddeb15":"from eli5.sklearn import PermutationImportance\nfrom eli5 import show_weights\nperm = PermutationImportance(model_pipeline4).fit(X_train, y_train)\nshow_weights(perm, feature_names=X_train.columns.tolist())","f2744890":"import shap  \n\nfeature_names=X_train.columns.tolist()\n\n\n\ndef xgb_predict(data_asarray):\n    data_asframe =  pd.DataFrame(data_asarray, columns=feature_names)\n    return model_pipeline4.predict(data_asframe)\n\n\nX_summary = shap.kmeans(X_train, 10)\nshap_kernel_explainer = shap.KernelExplainer(xgb_predict, X_summary)\n\nshap.initjs()\nshap_values_single = shap_kernel_explainer.shap_values(X_test.iloc[[5]])\nshap.force_plot(shap_kernel_explainer.expected_value, shap_values_single, X_test.iloc[[5]])\n\n\n\n# shap_tree_explainer = shap.TreeExplainer(estimator)\n\n\n# shap.initjs()\n\n# shap_values_single = shap_tree_explainer.shap_values(X_test.iloc[[5]])\n# shap.force_plot(shap_tree_explainer.expected_value, shap_values_single, X_test.iloc[[5]])","305d779b":"model_pipeline4.fit(X_train, y_train)\na= model_pipeline4.predict_proba(data2)[:, 1]","94bd9b61":"df = pd.DataFrame(a,columns=['Predicted'])\ndf.index += 1\n#csv.write(model_pipeline.predict_proba(data2)[:, 0], \"proba.csv\") \n#model_pipeline.predict_proba(data2)[:, 0].to_csv('proba.csv')\ndf.to_csv('submission88.csv')","d0ff71a9":"# So the model that is shown is fitted to a dataframe with missing credit_line_utilization column so hyperparametrs, the models and their weights are not suited enough for corrected version. So all trials and best values shown by optuna doesn't make sence and are here just to show the path of solving. First of all I found that Random Forest Classifier works well while using it with different depths and mixing up with voting classifier, then I started to look for good hyperprams for CatBoost and XGBoost.","480f3dee":"# Preprocessing that is already mentioned in my EDA","c58cb22c":"# XGBoost hyperparameter tuning","9ff1a6c7":"# Expectations: Find best models for predicting fraud transactions and mix them with using voting classifier.\n# Reality: Make a damp mistake while preprocessing and lose all values in credit_line_utilization having NANs on their places without even noticing it till the last day) \n ","70903372":"# While mixing all models hyperprams for XGBoost and CatBoost remains the depths of Random forests are intuitive, so we will experiment with number of estimators, kbest feature number and weights of each model in voting.","d9bc5d67":"# CatBoost hyperparameter tuning","b30a9ac9":"# Here we collect best values from all studies and built our final model.","bfc531e5":"# Lime and shap values"}}