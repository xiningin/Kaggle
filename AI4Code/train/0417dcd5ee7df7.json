{"cell_type":{"785a67b0":"code","56a0258c":"code","4e1f63b5":"code","e20f4828":"code","3373aab0":"code","1a9dd092":"code","778a435a":"code","125f24ca":"code","0c951a71":"code","2e3fb4df":"code","1102c72f":"code","655001ba":"markdown","70b27fc3":"markdown","bd194ef3":"markdown","be15a7a0":"markdown","477cd653":"markdown","e6ee765c":"markdown","8cbadc64":"markdown"},"source":{"785a67b0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sn\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","56a0258c":"import sqlite3\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\npd.options.display.max_columns = 100\npd.options.display.max_rows = 50\n\nwith sqlite3.connect('..\/input\/soccer\/database.sqlite') as con:\n    sequence = pd.read_sql_query(\"SELECT * from sqlite_sequence\",con)\n    countries = pd.read_sql_query(\"SELECT * from Country\", con)\n    matches = pd.read_sql_query(\"SELECT * from Match\", con)\n    leagues = pd.read_sql_query(\"SELECT * from League\", con)\n    teams = pd.read_sql_query(\"SELECT * from Team\", con)\n    players = pd.read_sql_query(\"SELECT * from Player\",con)\n    player_attributes = pd.read_sql_query(\"SELECT * from Player_Attributes\",con)\n    team_attributes = pd.read_sql_query(\"SELECT * from Team_Attributes\",con)","4e1f63b5":"def populate_winner():\n    \"\"\"\n    Adds a match_outcome column to matches.csv\n    \"\"\"\n    \n    def lambdaFunc(x):\n        if (x[\"home_team_goal\"] > x[\"away_team_goal\"]):\n            return \"home\"\n        elif (x[\"home_team_goal\"] == x[\"away_team_goal\"]):\n            return \"draw\"\n        else:\n            return \"away\"\n    \n    matches[\"match_outcome\"] = matches.apply(lambdaFunc, axis = 1)\n\npopulate_winner()\nmatches[[\"home_team_goal\", \"away_team_goal\", \"match_outcome\"]].head(5)","e20f4828":"def aggregate_outcomes(groupby_column, database_groupby_column_name, target_column_name, target_outcomes, new_column_name, root_df, database_df):\n    \"\"\"\n    This function aggregates a column from a foreign dataframe(root_df) and left joins it with a database dataframe. Filters can be applied on column through the target_outcomes parameter.\n    Eg Aggregates all goals of a player from goal_details.csv and left join it with player.csv database\n    \"\"\"\n    ##### if dont want any filters, pass [None] to target_outcomes\n    filtered = root_df[root_df[target_column_name].isin(target_outcomes)]\n    \n    groupby = filtered.copy()\n    groupby[new_column_name] = 1\n    groupby = groupby.groupby(groupby_column).count()\n    dropped_filtered = groupby[new_column_name]\n    dropped_filtered = dropped_filtered.reset_index()\n    \n    ##Using a left merge so that teams with 0 counts will be recorded\n    merged = database_df.merge(dropped_filtered, left_on = database_groupby_column_name, right_on = groupby_column, how = \"left\", suffixes = (\"\", \"\"))\n    merged[new_column_name].fillna(0, inplace = True)\n    return merged[[database_groupby_column_name, new_column_name]]\n\nhome_matches = aggregate_outcomes(\"home_team_api_id\", \"team_api_id\", \"match_outcome\", [\"home\", \"away\", \"draw\"], \"home_matches\", matches, teams)   \naway_matches = aggregate_outcomes(\"away_team_api_id\", \"team_api_id\", \"match_outcome\", [\"home\", \"away\", \"draw\"], \"away_matches\", matches, teams)    \nhome_wins = aggregate_outcomes(\"home_team_api_id\", \"team_api_id\", \"match_outcome\", [\"home\"], \"home_wins\", matches, teams)\naway_wins = aggregate_outcomes(\"away_team_api_id\", \"team_api_id\", \"match_outcome\", [\"away\"], \"away_wins\", matches, teams)\nhome_draws = aggregate_outcomes(\"home_team_api_id\", \"team_api_id\", \"match_outcome\", [\"draw\"], \"home_draws\", matches, teams)\naway_draws = aggregate_outcomes(\"away_team_api_id\", \"team_api_id\", \"match_outcome\", [\"draw\"], \"away_draws\", matches, teams)\nhome_losses = aggregate_outcomes(\"home_team_api_id\", \"team_api_id\", \"match_outcome\", [\"away\"], \"home_losses\", matches, teams)\naway_losses = aggregate_outcomes(\"away_team_api_id\", \"team_api_id\", \"match_outcome\", [\"home\"], \"away_losses\", matches, teams)\n\n\nteam_data = home_matches.merge(home_wins).merge(home_draws).merge(home_losses).merge(away_matches).merge(away_wins).merge(away_draws).merge(away_losses)\nteam_data.home_draws = team_data.home_draws.astype(np.int32) ##For some reason it convert my int to float, so I convert back\nteam_data.home_wins = team_data.home_wins.astype(np.int32)\n\nteam_data.sort_values(by = \"home_wins\", ascending = False)\n","3373aab0":"goal_details = pd.read_csv(\"..\/input\/xml-raw\/goal_detail.csv\")\ngoal_details = goal_details[goal_details.match_id.isin(matches.id)] ##In case we filter by EPL leagues\ngoal_details = goal_details[[\"comment\", \"elapsed\", \"elapsed_plus\", \"id\", \"match_id\", \"player1\", \"player2\", \"pos_x\", \"pos_y\", \"subtype\", \"team\", \"type\"]]\ngoal_details = goal_details[goal_details.comment.isin([\"n\", \"o\", \"p\"])]\ngoal_details","1a9dd092":"goal_details.hist(bins = 90 \/\/ 5, figsize = (25, 15))","778a435a":"elapsed = goal_details.copy()[[\"elapsed\", \"elapsed_plus\"]]\nelapsed = elapsed[pd.isnull(elapsed.elapsed_plus)] ##Filtering Goals that are scored during stoppage time\n\ncounts, bins = np.histogram(goal_details[\"elapsed\"], bins= range(0, 90 + 1, 5))\nfig, axs = plt.subplots(2, figsize = (10, 10))\n\naxs[0].set_xticks(bins)\naxs[0].hist(elapsed[\"elapsed\"], edgecolor = \"black\", bins= range(0, 90 + 1, 5), rwidth = 0.75)\naxs[0].set_title(\"Goals Distribution 5Minute Bins\")\n\ntemp = elapsed.copy()\ntemp.drop(\"elapsed_plus\", axis = 1, inplace = True)\ntemp[\"count\"] = 1\ntemp = temp.groupby(\"elapsed\").count()\naxs[1].set_xticks(bins)\naxs[1].plot(temp)\naxs[1].set_title(\"Goals Distribution VS Minute\")\n\nfig.tight_layout()\nplt.show()","125f24ca":"print(\"Number of goals scored throughout all matches, filtered out goals scored during stoppage time\\n\")\nnum_of_matches = len(matches)\nprint(\"Avg number of goals per minute(First Half) : {:.1f}, (Avg per game = {:.5f})\".format(len(elapsed[elapsed[\"elapsed\"] <= 45]) \/ 45, len(elapsed[elapsed[\"elapsed\"] <= 45]) \/ 45 \/ num_of_matches))\nprint(\"Avg number of goals per minute(Second Half) : {:.1f}, (Avg per game = {:.5f})\".format(len(elapsed[elapsed[\"elapsed\"] > 45]) \/ 45, len(elapsed[elapsed[\"elapsed\"] > 45]) \/ 45 \/ num_of_matches))\nprint(\"Number of 45 Minute Goals : {}, (Avg per game = {:.5f})\".format(len(elapsed[elapsed[\"elapsed\"] == 45]), len(elapsed[elapsed[\"elapsed\"] == 45]) \/ num_of_matches))\nprint(\"Number of 90 Minute Goals : {}, (Avg per game = {:.5f})\".format(len(elapsed[elapsed[\"elapsed\"] == 90]), len(elapsed[elapsed[\"elapsed\"] == 90]) \/ num_of_matches))","0c951a71":"total_goals = aggregate_outcomes(\"player1\", \"player_api_id\", \"comment\", [\"n\", \"p\"], \"total_goals\", goal_details, players)\nnormal_goals = aggregate_outcomes(\"player1\", \"player_api_id\", \"comment\", [\"n\"], \"normal_goals\", goal_details, players)\npenalty_goals = aggregate_outcomes(\"player1\", \"player_api_id\", \"comment\", [\"p\"], \"penalty_goals\", goal_details, players)\nown_goals = aggregate_outcomes(\"player1\", \"player_api_id\", \"comment\", [\"o\"], \"own_goals\", goal_details, players)\n\nplayer_data = players.merge(total_goals).merge(normal_goals).merge(penalty_goals).merge(own_goals)\nplayer_data.sort_values(by = \"total_goals\", ascending = False)[:10]","2e3fb4df":"player_attr_mean = player_attributes.groupby(\"player_api_id\").median().reset_index()\nplayer_attr_mean.drop([\"id\", \"player_fifa_api_id\"], axis = 1, inplace = True)\nplayer_attr_mean = player_data.merge(player_attr_mean, on = \"player_api_id\")\nplayer_attr_mean.drop([\"birthday\", \"weight\", \"height\", \"player_fifa_api_id\", \"own_goals\", \"penalty_goals\", \"normal_goals\"], axis = 1, inplace = True)\nplayer_attr_mean.sort_values(by = \"total_goals\", axis = 0, ascending = False)[:10]","1102c72f":"fig, ax = plt.subplots(figsize=(7,7)) \ncorrMatrix = player_attr_mean.drop([\"id\", \"player_api_id\"], axis = 1).corr()\ntop_attributes = [\"total_goals\",\"overall_rating\", \"potential\",\"finishing\", \"volleys\",\"ball_control\", \"reactions\", \"positioning\", \"penalties\"]\ncorrMatrix = corrMatrix.loc[top_attributes, top_attributes]\n\nsn.heatmap(corrMatrix, annot=True, ax=ax)\nplt.show()\n#player_attr_mean.drop([\"volleys\", \"curve\", \"agility\", \"balance\", \"jumping\", \"vision\", \"sliding_tackle\"], axis = 1).isna().sum()","655001ba":"# Lets look at goal statistics","70b27fc3":"The above dataframe shows the top scoring players\n\nNext, we remove redundant columns like api_id, weight, height etc.\n\nSecondly, since each player's attributes are different across seasons, we take the median across all seasons","bd194ef3":"# Let's Look at the match outcome statistics of teams","be15a7a0":"## Observations\n\n### Seems like there is an unusual number of goals at the end of the halves (45 and 90 minute)\n\n### Second Half have more goals\n\n### Few goals scored in the starting of the halves\n","477cd653":"### Lets look find out the number of goals scored per player statistics\n\nThen we see if we can find a correlation between top scorers and player attributes.","e6ee765c":"Based on the heat map, it seems like there is a moderate correlation between Overall Rating, potential, finishing, volleys, ball_control and reactions","8cbadc64":"Top winning teams are 8634(Barcelona) and 8633(Real Madrid)"}}