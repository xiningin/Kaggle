{"cell_type":{"31382c6c":"code","d45e6edc":"code","337ac54c":"code","cdf67873":"code","b1965a8f":"code","b0f3cae1":"code","d1c461f3":"code","fcb8ba52":"code","37c3a2d9":"code","c30506d3":"code","77c98e4a":"code","ae0041ec":"code","df69b3fd":"code","f9a0be90":"code","63cb2f96":"code","b5c9e222":"code","a0e1dab4":"code","9baa3ca4":"code","789d7a61":"code","f1285230":"code","06c55a4b":"code","6f6b0637":"markdown","ac3e1689":"markdown","e6c2aaaa":"markdown","7d643a8b":"markdown","44e5110b":"markdown","bc9722f8":"markdown","3a6994c1":"markdown","92d83899":"markdown","13d0d3c7":"markdown","fd7ec92b":"markdown","19c85b1c":"markdown","b81b57c0":"markdown","81214e0f":"markdown","12da0354":"markdown"},"source":{"31382c6c":"import numpy as np\nimport pandas as pd\n# Graphing\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n# Machine Learning\n\n# Opening Files\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d45e6edc":"df = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndf.nunique()","337ac54c":"# Let's look at room types\nprint( df['room_type'].unique() )\n\n# Replace 'Entire home\/apt' with 'Entire Home' , not necessary but I feel it looks cleaner!\ndf['room_type'] = df['room_type'].replace('Entire home\/apt','Entire Home')\nprint( df['room_type'].unique() )","cdf67873":"# Remove unnecessary columns\ndf = df.drop(['id','name'],1)\n#pd.value_counts(df['room_type'].isna(), normalize = True)","b1965a8f":"# Take a look at columns which may contain a lot of nulls\nfor col in df.columns:\n    print( col, '{nulls:.2f}%'.format(nulls=(df[col].isna().sum() \/ df.shape[0]) * 100))\n    \n# Last Reviews and Reviews per month ar at 20%, \n# this seems okay as there may be new property entering the website","b0f3cae1":"fig = px.box(df, \n             y=\"price\",\n            x = 'neighbourhood_group',\n            points=\"all\",\n            color=\"room_type\")\n\nfig.update_layout(\n    template=\"plotly_dark\",\n)\n\nfig.show()","d1c461f3":"Q1 = df['price'].quantile(0.25)\nQ3 = df['price'].quantile(0.75)\nIQR = Q3 - Q1\n\nfilter = (df['price'] >= Q1 - 1.5 * IQR) & (df['price'] <= Q3 + 1.5 *IQR)\ndf = df.loc[filter]  ","fcb8ba52":"fig = px.box(df, \n             y=\"price\",\n            x = 'neighbourhood_group',\n            color=\"room_type\")\nfig.show()","37c3a2d9":"df['price'].replace('0', np.nan, inplace=True)\ndf.dropna(subset=['price'], inplace=True)","c30506d3":"corr = df.corr()\nfig = px.imshow(corr,\n                color_continuous_scale='Oranges')\n\nfig.update_layout(\n    template=\"plotly_dark\",\n)\nfig.show()\n","77c98e4a":"fig = px.density_mapbox(df, \n                        lat ='latitude', \n                        lon ='longitude', \n                        z = 'price', \n                        color_continuous_scale  = 'solar',\n                        radius = 1,\n                        center = dict(lat=40.75, lon=-73.9), \n                        zoom = 10,\n                        mapbox_style = \"carto-darkmatter\",\n                        )\nfig.update_layout(\n    title='NYC AirBnB - 2019',\n    height=800,\n    template=\"plotly_dark\",\n)\n\nfig.show()","ae0041ec":"df_grouped = df.groupby(by=['neighbourhood_group','room_type'])['price'].mean().reset_index()\ndf_grouped","df69b3fd":"fig = make_subplots(rows=1, cols=3, shared_yaxes=True, )\n\nfig.add_trace(\n    go.Bar(\n        x=df_grouped[ df_grouped[\"room_type\"] ==\"Entire Home\"][\"neighbourhood_group\"], \n        y=df_grouped[ df_grouped[\"room_type\"] ==\"Entire Home\"][\"price\"],\n        name=\"Entire Home\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Bar(\n        x=df_grouped[ df_grouped[\"room_type\"] ==\"Shared room\"][\"neighbourhood_group\"], \n        y=df_grouped[ df_grouped[\"room_type\"] ==\"Shared room\"][\"price\"],\n        name=\"Shared room\"\n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Bar(\n        x=df_grouped[ df_grouped[\"room_type\"] ==\"Private room\"][\"neighbourhood_group\"], \n        y=df_grouped[ df_grouped[\"room_type\"] ==\"Private room\"][\"price\"],\n        name=\"Private room\",),\n    row=1, col=3\n)\n\nfig.update_layout(\n    template=\"plotly_dark\",\n    title_text=\"Avg Price for Room Type, by Neighbourhood\")\nfig.show()","f9a0be90":"# Count of Owners and Properties\ndf_owners = df.groupby(by=['host_id'])['neighbourhood_group'].count().reset_index().sort_values(by=['neighbourhood_group'], ascending = False)\ndf_owners['bin'] = pd.cut(df_owners['neighbourhood_group'], [0, 1, 2, 3, 4, 5, 10, 15, 20,100], labels=['=1','=2', '=3', '=4','=5','5-10','10-15','15-20','20-100'])\ndf_owners = df_owners.groupby(by=['bin']).count().reset_index()\ndf_owners = df_owners.drop(['host_id'],1)\ndf_owners = df_owners.rename(columns={\"neighbourhood_group\": \"count\"})\ndf_owners","63cb2f96":"# Average Price by Binned Property Count\nowners_avg_price = df.groupby(by=['host_id'])['price'].mean().reset_index().sort_values(by=['host_id'], ascending = False)\nowners_count = df.groupby(by=['host_id'])['neighbourhood_group'].count().reset_index().sort_values(by=['host_id'], ascending = False)\nowners_avg_price['count'] = owners_count['neighbourhood_group']\nprice_count = owners_avg_price.groupby(by=['count'])['price'].mean().reset_index().sort_values(by=['price'], ascending = False)","b5c9e222":"price_count['bin'] = pd.cut(price_count['count'], [0,1,2,3,4,5,10,15,20,50,100,150,200,300], labels=['=1','=2','=3','=4','=5','5-10','10-15','15-20','20-50','50-100','100-150','150-200','200-300'])\nprice_count = price_count.groupby(by=['bin'])['price'].mean().reset_index()\nprice_count","a0e1dab4":"fig = make_subplots(rows=1, \n                    cols=2, \n                    subplot_titles=(\"Individuals Owning Property\", \"Avg Price ($) of Property, by amount of properties owned\"),\n                    #shared_yaxes=True, \n                   )\n\nfig.add_trace(\n    go.Bar(\n        x=df_owners['bin'],\n        y=df_owners['count'],\n        name=\"Count\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Bar(\n        x=price_count['bin'],\n        y=price_count['price'],\n        name=\"Price\"),\n    row=1, col=2\n)\n\n\nfig.update_layout(\n    template=\"plotly_dark\",\n    title_text = 'Property Count \/ Avg Price',\n)\n\nfig.show()","9baa3ca4":"busy_hosts = df\nbusy_hosts['days_booked'] = 365 - busy_hosts['availability_365']\nmost_booking = busy_hosts.groupby(by=['host_id','host_name'])['days_booked'].sum().reset_index()\nmost_booking['days_booked'] = np.ceil(most_booking['days_booked'])\nmost_booking = most_booking.sort_values(by=['days_booked'],ascending=False).head(5)\nmost_booking['host_id'] = most_booking['host_id'].astype(str)\n\navg_booking  = busy_hosts.groupby(by=['host_id','host_name'])['days_booked'].mean().reset_index()\navg_booking['days_booked'] = np.ceil(avg_booking['days_booked'])\navg_booking = avg_booking.sort_values(by=['days_booked'],ascending=False).head(5)\navg_booking['host_id'] = avg_booking['host_id'].astype(str)\n\nbusy_hosts['yearly_income'] = busy_hosts['price'] * busy_hosts['days_booked']\nhost_income = busy_hosts.groupby(by=['host_id','host_name'])['yearly_income'].sum().reset_index()\nhost_income = host_income.sort_values(by=['yearly_income'],ascending=False).head(5)\nmost_booking['host_id'] = most_booking['host_id'].astype(str)","789d7a61":"fig = make_subplots(rows=1, \n                    cols=3, \n                    subplot_titles=(\"Most Bookings\", \"Top Avg Bookings\",\"Most Income Generated\"),\n                   )\n\nfig.add_trace(\n    go.Bar(\n        x=most_booking['host_name'],\n        y=most_booking['days_booked'],\n        name=\"Most Bookings\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Bar(\n        x=avg_booking['host_name'],\n        y=avg_booking['days_booked'],\n        name=\"Avg Booking\"),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Bar(\n        x=host_income['host_name'],\n        y=host_income['yearly_income'],\n        name=\"Most Income\"),\n    row=1, col=3\n)\n\nfig.update_layout(\n    template=\"plotly_dark\",\n    title_text = 'Property Count \/ Avg Price',\n)\n\nfig.show()","f1285230":"# Property Count by Owner Name\nnamed_prop = df.groupby(by=['host_name'])['host_id'].count().reset_index().sort_values(by=['host_id'],ascending=False)\nnamed_prop = named_prop.sort_values(by=['host_id'],ascending=False).head(10)\n\nfig = make_subplots(rows=1, \n                    cols=1, \n                   )\n\nfig.add_trace(\n    go.Bar(\n        x=named_prop['host_name'],\n        y=named_prop['host_id'],\n        name=\"Amount of Properties owned\"),\n    row=1, col=1\n)\n\nfig.update_layout(\n    template=\"plotly_dark\",\n    title_text = 'Property Count by Owner',\n)\n\nfig.show()","06c55a4b":"# Traffic by Areas (bookings)\ntraffic_areas = busy_hosts.groupby(by=['neighbourhood_group','neighbourhood'])['days_booked'].mean().reset_index().sort_values(by=['neighbourhood'])\ntraffic_areas2 = busy_hosts.groupby(by=['neighbourhood_group','neighbourhood'])['price'].mean().reset_index().sort_values(by=['neighbourhood'])\n\nfig = make_subplots(rows=2, \n                    cols=1,\n                    subplot_titles=(\"Bookings by Area\", \"Avg Prices by Area\"),\n                   )\n\nfig.add_trace(\n    go.Bar(\n        x=traffic_areas['neighbourhood'],\n        y=traffic_areas['days_booked'],\n        name=\"Bookings by Area\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Bar(\n        x=traffic_areas2['neighbourhood'],\n        y=traffic_areas2['price'],\n        name=\"Avg Price by Area\"),\n    row=2, col=1\n)\n\n\n\nfig.update_layout(\n    template=\"plotly_dark\",\n    margin=dict(l=50, r=50, t=80, b=80),\n    title_text = 'Area Info',\n    height=800,\n)\n\nfig.show()","6f6b0637":"Now there is a lot of prices that are outside of the boxplots, especially for 'Entire Home' rentals. Lets remove the outliers and see what it looks like","ac3e1689":"The only strong correlation here is Reviews per Month and number of reviews, which is expected as they are derivative of eachother.","e6c2aaaa":"Overall it appears that Manhattan has the highest price, on average of any AirBnB.<br\/>\nSurprisingly (to me) shared rooms and private rooms are very similair on average. Assuming a shared room means sharing with other renters\/owners (and not a room with multiple beds).","7d643a8b":"## Removing Redundant Information\nRemoving columns we will not be using for exploratory analysis or visualisations","44e5110b":"# What areas have more traffic than others?\n","bc9722f8":"# Exploring the Data","3a6994c1":"# Heatmap of Accomodation","92d83899":"# Correlation Matrix\nAnalyze the relationship between variables","13d0d3c7":"# Which hosts are the busiest?\n","fd7ec92b":"Although this boxplot is still showing some outliers it has a much better range, dropping from 10,000 to ~350 <br\/>\nHowever, we have some with a lsited price of 0, lets remove those.","19c85b1c":"## Outliers - Standard Deviation\nFinding outliers by standard deviation. Lets try price","b81b57c0":"# Distribution of Properties and Owners","81214e0f":"So, Blueground and Sonder(NYC) have the most bookings and make the most in yearly income but Kazuya is not in the top 5 Income Generated which indicates they may have cheap accomodation. Similarily, The Box House is not within the top 5 bookings (perhaps just lagging behind?) but they are in the top 5 incomes which indicates they must be more pricy (or perhaps they own more properties).\nIts good to see that there are regular folk who are fully booked throughout the year, but remember that if they own 1 property and are fully booked that will show as their average booking. \n","12da0354":"While some neighbourhoods may be more booked, that doesnt appear to dictated its price.<br>\n\nIt would be worth looking into a geomap if there is data available of booking period, certain events throughout the year may raise bookings and prices."}}