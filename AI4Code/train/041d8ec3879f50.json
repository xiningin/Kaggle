{"cell_type":{"8b481de0":"code","637b64b3":"code","51462c90":"code","f0291bad":"code","c34d485c":"code","84d0b06d":"code","0dbfbee3":"code","80aa5ac5":"code","b9f9a533":"code","a6edc84d":"code","2b68c1f2":"code","740954a5":"markdown","5c0ee4c3":"markdown","90be22b5":"markdown","1093923f":"markdown","a66a0ae5":"markdown","67ffe6b9":"markdown","6479dd66":"markdown","6689893a":"markdown"},"source":{"8b481de0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","637b64b3":"X = np.load(\"\/kaggle\/input\/sign-language-digits-dataset\/X.npy\")\nY = np.load(\"\/kaggle\/input\/sign-language-digits-dataset\/Y.npy\")","51462c90":"X.shape","f0291bad":"Y.shape","c34d485c":"X = X.reshape(-1,64,64,1)\nX.shape","84d0b06d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,Y, test_size = 0.10, random_state = 42)","0dbfbee3":"from keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten, Activation","80aa5ac5":"model = Sequential()\n\nmodel.add(Conv2D(128, 3, padding = \"Same\", input_shape = (64,64,1), activation = \"relu\"))\nmodel.add(Conv2D(64,3, padding = \"Same\", activation = \"relu\"))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(32,3, padding = \"Same\", activation = \"relu\"))\nmodel.add(Conv2D(32,3, padding = \"Same\", activation = \"relu\"))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\n\nmodel.add(Dense(2000, activation = \"relu\"))\nmodel.add(Dense(1000, activation = \"relu\"))\nmodel.add(Dense(250, activation = \"relu\"))\nmodel.add(Dense(10, activation = \"softmax\"))\nmodel.summary()","b9f9a533":"model.compile(loss = \"categorical_crossentropy\", optimizer = \"SGD\", metrics = [\"accuracy\"])","a6edc84d":"hist = model.fit(X_train, y_train, batch_size = 32, epochs = 50, validation_data = (X_test, y_test))","2b68c1f2":"plt.plot(hist.history[\"val_accuracy\"])\nplt.xlabel(\"Num of Epoch\")\nplt.ylabel(\"Accuracy\")\nplt.show()","740954a5":"First, let's load our data and look at its dimensions.","5c0ee4c3":"<a id=1><\/a>\n# Load Data","90be22b5":"<a id=2><\/a>\n# Train Test Split","1093923f":"# Introduction\n\nHello friends. In this notebook, we will do the sign language work using CNN. We had previously worked with the same dataset without CNN.In other words, we worked with the same data set as the basic neural networks, but with low success. If you want to examine it, I write the link of that study below.\n\nhttps:\/\/www.kaggle.com\/esercicek\/sign-language-with-simple-ann\n\nNow, before we train the same data set with artificial neural networks, we will convolution process with CNN. \n\nFor this, our steps will be as follows.\n\n* [Load Data](#1)\n* [Train Test Split](#2)\n* [Create Model](#3)\n* [Evaluate Model](#4)","a66a0ae5":"Now it's time to create the model. But this time we will build the model with CNN.","67ffe6b9":"<a id=3><\/a>\n# Create Model","6479dd66":"Now we need to divide our data into two parts, training and testing. I want to reserve 10% of the data for testing.","6689893a":"<a id=4><\/a>\n# Evaluate Model"}}