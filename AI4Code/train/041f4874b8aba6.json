{"cell_type":{"2b31b1d4":"code","f9afc263":"code","374be039":"code","f53e4863":"code","17417c93":"code","8f4b3c5e":"code","a90aa538":"code","b5c06ee9":"code","2b3171e9":"code","e14e0c24":"code","a3469a3e":"code","eee159b3":"code","541e10bf":"code","b17dc360":"code","0f23429f":"code","a82083f2":"code","0f19df00":"code","bbc38433":"code","c9196e21":"code","f77888e8":"code","d031fa47":"code","b5ce5496":"code","9ded1e84":"code","c1dc832b":"code","d88eeeb1":"code","4aba6b29":"code","031894d1":"code","2d3c8656":"code","22e8bb5e":"code","b16f2c28":"code","611191d4":"code","f678ffad":"code","dcc5275e":"code","c0ab5d19":"code","f3ccc09a":"code","55adf494":"code","cb88e36f":"code","1fbbe9da":"code","c5f31177":"code","2d6d29bc":"code","136d70c5":"code","19f69f74":"code","63b3662b":"code","f8fca240":"code","9de4db67":"code","e54bb45c":"code","3c75a522":"code","cdfbe1ec":"code","7a9e1279":"code","fe99096c":"code","4306c71f":"code","3885cbfe":"code","1b05bad8":"code","1cc375f0":"code","ce926b3a":"code","4b86248c":"code","cf4602ba":"code","6731e40f":"code","3d372b82":"code","8d66da7b":"code","365bb29a":"code","930fbfc8":"code","9a8ef031":"code","a6487941":"code","2e0680e7":"code","b682ea5e":"code","ef11fabe":"code","94247c8b":"code","85f3b476":"code","d519dde3":"code","a26b8192":"code","5e576491":"code","b3aef01d":"code","c62a3c4b":"code","f7fc553f":"code","84e4b770":"code","05520ccb":"code","5ab79ea2":"code","359b67c8":"code","8e12cf9c":"code","ca55ba00":"code","5526a9a3":"code","6b99d0a7":"code","4318ecae":"code","72fc3561":"code","fc1861f0":"code","2ee37a01":"code","6fdf4988":"code","f12eed72":"code","ebafc2c7":"code","dc88ea98":"code","f0616524":"code","5b3a0518":"code","125819ed":"code","d2fe6506":"code","38c41866":"code","b9ce9009":"code","7bc6b5fe":"code","5b396a8e":"code","f2a107f3":"code","d047f9aa":"code","ff5625fe":"code","037dd71c":"code","c3d8b230":"code","d0ce2af3":"code","05bef56c":"code","85565ffd":"code","ffad525a":"code","7adedf0a":"code","dfb53cdd":"code","33aa4e30":"code","30d2bdfc":"code","f0f15630":"code","ba3a9736":"code","01a50235":"code","4e7a899c":"code","56022972":"code","6f5e1b48":"code","6aef4f98":"code","e38d7f31":"code","7c1d2d94":"code","18580422":"code","6531a800":"code","f8f977ad":"code","e3952a15":"code","0fc6d315":"code","12af8d4d":"code","5553b55c":"code","544cb9e1":"code","1a023702":"code","89e4faf2":"code","d8bdea5e":"code","17054b4b":"code","59eba5d4":"code","47ad33e0":"code","e0d2b718":"code","9344b070":"code","79c70271":"code","2bd00a8b":"code","a15b0c7e":"code","4f099f3d":"code","edbda474":"code","bd1c38d1":"code","71cdd872":"code","296ceb6b":"code","88bd7bfa":"code","8c1cd7c4":"code","9c35bff6":"code","1a228974":"code","b7bff4aa":"code","992d0049":"code","5f5863ea":"code","9e7b4fee":"code","4a2938f4":"code","33fed790":"code","5f8968b9":"code","98d95a88":"code","e3e8e08c":"code","6a4d1641":"code","79f595d5":"code","4b916188":"code","a79eaba3":"code","c1a2652b":"code","fe25dab2":"code","be6de3cc":"code","4ffaab76":"code","2a25993d":"code","5b397fac":"code","1cd5b8a6":"code","a5ac7d1f":"code","6ed369a2":"code","1577bd07":"code","a88cb032":"code","bba9a0cc":"code","378769db":"code","8bbe2326":"code","f97a7cc5":"code","4cf2a167":"code","f926f20a":"code","c21f2d69":"code","bf2d3ba2":"code","55cb4994":"code","2ce05ff9":"code","086e1aaf":"code","d18e2082":"code","b999fa4d":"code","6634fe55":"code","8ba343ef":"code","fac0d2c1":"code","c75d3340":"code","8bd800a2":"code","3fcac5e7":"code","d58d8cd7":"code","c2886d8e":"code","bac90d37":"code","9c76d289":"code","401e72a8":"code","b61ad860":"code","ef721e2c":"code","87b7109d":"code","f4d8aa92":"code","2fb953d8":"code","0ea8059d":"code","a86470f6":"code","2a660ed6":"code","0b540e0f":"code","18c3cbe5":"code","eb5d2ecb":"code","b5c39bd0":"code","a95d0dc4":"code","af74d558":"code","9296b8d1":"code","c3e59363":"code","5d4c68d3":"code","c6299faf":"code","ef1e9b17":"code","410382fb":"code","026557bc":"code","bb9c1f7d":"markdown","5ed0e91f":"markdown","3986c815":"markdown","31ea8c62":"markdown","9f9bc4ce":"markdown","d73a7f57":"markdown","33e5b0c6":"markdown","d63416da":"markdown","04044e01":"markdown","80b1bb43":"markdown","bf4eee35":"markdown","2349a6ec":"markdown","8339097f":"markdown","8dcb8b68":"markdown","3e585108":"markdown","00984b8d":"markdown","09f2e9c5":"markdown","dd0881f1":"markdown","b232736a":"markdown","1f39f0fb":"markdown","86ad781b":"markdown","e0ff1e21":"markdown"},"source":{"2b31b1d4":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n\nfrom pandas.api.types import is_string_dtype\nfrom pandas.api.types import is_numeric_dtype\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_curve\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.externals.six import StringIO  \nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import export_graphviz\nimport featuretools as ft\n\nimport statsmodels\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\n\nimport pydotplus\nfrom IPython.display import Image  \nimport graphviz","f9afc263":"# pd.options.display.max_columns = None\n\n# pd.options.display.max_rows = None\n\n# np.set_printoptions(suppress=True)","374be039":"df = pd.read_csv(\"IBM HR Data new.csv\")\ndf.head()","f53e4863":"df.shape","17417c93":"df.describe()","8f4b3c5e":"df.describe(include='object')","a90aa538":"df.info()","b5c06ee9":"df.isnull().sum()","2b3171e9":"total = df.isnull().sum()\npercent = ((df.isnull().sum()\/df.isnull().count())*100).sort_values(ascending=False)\n\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n\nprint(missing_data)","e14e0c24":"df['Attrition'] = df['Attrition'].replace(['Current employee','Voluntary Resignation'],[0,1])","a3469a3e":"df[df['Education']==6]","eee159b3":"df.drop(15655,inplace=True)","541e10bf":"df['Education'] = df['Education'].replace([1,2,3,4,5],['Below college','College','Bachelors','Master','Doctorate'])","b17dc360":"df.columns","0f23429f":"df.drop(['EmployeeCount','EmployeeNumber','Application ID','Over18'],inplace=True,axis=1)","a82083f2":"df[['EnvironmentSatisfaction','JobSatisfaction','PerformanceRating', 'RelationshipSatisfaction','StockOptionLevel','WorkLifeBalance']]","0f19df00":"df['Gender'] = df['Gender'].replace(['Male','Female'],[0,1])","bbc38433":"df[df['Gender']=='2']","c9196e21":"df.drop(17027,inplace=True)","f77888e8":"df['Age'] = df['Age'].fillna(df['Age'].mean())","d031fa47":"df['Attrition'] = df['Attrition'].fillna(df['Attrition'].mode()[0])","b5ce5496":"df['BusinessTravel'] = df['BusinessTravel'].fillna(df['BusinessTravel'].mode()[0])","9ded1e84":"df['DailyRate'] = df['DailyRate'].fillna(df['DailyRate'].mean())","c1dc832b":"df['Department'] = df['Department'].fillna(df['Department'].mode()[0])","d88eeeb1":"df['DistanceFromHome'] = df['DistanceFromHome'].astype(float)\ndf['DistanceFromHome'] = df['DistanceFromHome'].fillna(df['DistanceFromHome'].mean())","4aba6b29":"df['Education'] = df['Education'].fillna(df['Education'].mode()[0])","031894d1":"df['EducationField'] = df['EducationField'].fillna(df['EducationField'].mode()[0])","2d3c8656":"df['EnvironmentSatisfaction'] = df['EnvironmentSatisfaction'].fillna(df['EnvironmentSatisfaction'].median())","22e8bb5e":"df['Gender'] = df['Gender'].fillna(df['Gender'].mode()[0])","b16f2c28":"df['HourlyRate'] = df['HourlyRate'].astype(float)\ndf['HourlyRate'] = df['HourlyRate'].fillna(df['HourlyRate'].mean())","611191d4":"df['JobInvolvement'] = df['JobInvolvement'].fillna(df['JobInvolvement'].median())","f678ffad":"df['JobLevel'] = df['JobLevel'].fillna(df['JobLevel'].mean())","dcc5275e":"df['JobRole'] = df['JobRole'].fillna(df['JobRole'].mode()[0])","c0ab5d19":"df['JobSatisfaction'] = df['JobSatisfaction'].astype(float)\ndf['JobSatisfaction'] = df['JobSatisfaction'].fillna(df['JobSatisfaction'].mean())","f3ccc09a":"df['MaritalStatus'] = df['MaritalStatus'].fillna(df['MaritalStatus'].mode()[0])","55adf494":"df['MonthlyIncome'] = df['MonthlyIncome'].astype(float)\ndf['MonthlyIncome'] = df['MonthlyIncome'].fillna(df['MonthlyIncome'].median())","cb88e36f":"df['MonthlyRate'] = df['MonthlyRate'].fillna(df['MonthlyRate'].mean())","1fbbe9da":"df['NumCompaniesWorked'] = df['NumCompaniesWorked'].fillna(df['NumCompaniesWorked'].median())","c5f31177":"df['OverTime'] = df['OverTime'].fillna(df['OverTime'].mode()[0])","2d6d29bc":"df['PercentSalaryHike'] = df['PercentSalaryHike'].astype(float)\ndf['PercentSalaryHike'] = df['PercentSalaryHike'].fillna(df['PercentSalaryHike'].mean())","136d70c5":"df['PerformanceRating'] = df['PerformanceRating'].fillna(df['PerformanceRating'].median())","19f69f74":"df['RelationshipSatisfaction'] = df['RelationshipSatisfaction'].fillna(df['RelationshipSatisfaction'].mean())","63b3662b":"df['StandardHours'] = df['StandardHours'].fillna(df['StandardHours'].mean())","f8fca240":"df['StockOptionLevel'] = df['StockOptionLevel'].fillna(df['StockOptionLevel'].median())","9de4db67":"df['TotalWorkingYears'] = df['TotalWorkingYears'].fillna(df['TotalWorkingYears'].median())","e54bb45c":"df['TrainingTimesLastYear'] = df['TrainingTimesLastYear'].fillna(df['TrainingTimesLastYear'].median())","3c75a522":"df['WorkLifeBalance'] = df['WorkLifeBalance'].fillna(df['WorkLifeBalance'].mean())","cdfbe1ec":"df['YearsAtCompany'] = df['YearsAtCompany'].fillna(df['YearsAtCompany'].median())","7a9e1279":"df['YearsInCurrentRole'] = df['YearsInCurrentRole'].fillna(df['YearsInCurrentRole'].median())","fe99096c":"df['YearsSinceLastPromotion'] = df['YearsSinceLastPromotion'].fillna(df['YearsSinceLastPromotion'].median())","4306c71f":"df['YearsWithCurrManager'] = df['YearsWithCurrManager'].fillna(df['YearsWithCurrManager'].median())","3885cbfe":"df['Employee Source'] = df['Employee Source'].fillna(df['Employee Source'].mode()[0])","1b05bad8":"df.drop('StandardHours',axis=1,inplace=True)","1cc375f0":"df.isnull().sum()","ce926b3a":"Q1 = df.quantile(0.25)\nQ3 = df.quantile(0.75)\nIQR = Q3 - Q1","4b86248c":"total_out = ((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).sum()","cf4602ba":"percent_out = ((((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).sum()\/df.count())*100).sort_values(ascending=False)","6731e40f":"outliers = pd.concat([total_out, percent_out], axis=1, keys=['Total', 'Percent'])\noutliers","3d372b82":"col = ['BusinessTravel','Education','Department','EducationField','Gender','JobRole','MaritalStatus', 'OverTime','Employee Source']","8d66da7b":"dfnew = pd.get_dummies(df[col] , drop_first = True) ","365bb29a":"df.drop(col,inplace=True,axis=1)","930fbfc8":"df=pd.concat([df,dfnew],axis=1)","9a8ef031":"df.T","a6487941":"sns.distplot(df['MonthlyIncome'])","2e0680e7":"df['MonthlyIncome'] = df['MonthlyIncome'].apply(lambda x : np.log(x+1))","b682ea5e":"sns.distplot(df['MonthlyIncome'])","ef11fabe":"df['YearsAtcompany_1_10']=df['YearsAtCompany'][df['YearsAtCompany']<11]","94247c8b":"df['YearsAtcompany_11+']=df['YearsAtCompany'][df['YearsAtCompany']>=11]","85f3b476":"df['YearsAtcompany_1_10'] = df['YearsAtcompany_1_10'].fillna(0)","d519dde3":"df['YearsAtcompany_11+'] = df['YearsAtcompany_11+'].fillna(0)","a26b8192":"df['YearsAtcompany_1_10']=df['YearsAtcompany_1_10'].apply(lambda x: 1 if x>1 else x)","5e576491":"df['YearsAtcompany_11+']=df['YearsAtcompany_11+'].apply(lambda x: 1 if x>1 else x)","b3aef01d":"df['NumCompaniesWorked'].value_counts()","c62a3c4b":"df['NumCompaniesWorked_0_5']=df['NumCompaniesWorked'][df['NumCompaniesWorked']<=5]","f7fc553f":"df['NumCompaniesWorked_6+']=df['NumCompaniesWorked'][df['NumCompaniesWorked']>5]","84e4b770":"df['NumCompaniesWorked_0_5'] = df['NumCompaniesWorked_0_5'].fillna(0)","05520ccb":"df['NumCompaniesWorked_6+'] = df['NumCompaniesWorked_6+'].fillna(0)","5ab79ea2":"df['NumCompaniesWorked_0_5']=df['NumCompaniesWorked_0_5'].apply(lambda x: 1 if x>1 else x)","359b67c8":"df['NumCompaniesWorked_6+']=df['NumCompaniesWorked_6+'].apply(lambda x: 1 if x>1 else x)","8e12cf9c":"df['PerformanceRating'].value_counts()","ca55ba00":"df['PerformanceRating_3']=df['PerformanceRating'][df['PerformanceRating']==3]","5526a9a3":"df['PerformanceRating_4']=df['PerformanceRating'][df['PerformanceRating']==4]","6b99d0a7":"df['PerformanceRating_3'] = df['PerformanceRating_3'].fillna(0)","4318ecae":"df['PerformanceRating_4'] = df['PerformanceRating_4'].fillna(0)","72fc3561":"df['PerformanceRating_3']=df['PerformanceRating_3'].apply(lambda x: 1 if x>=1 else x)","fc1861f0":"df['PerformanceRating_4']=df['PerformanceRating_4'].apply(lambda x: 1 if x>=1 else x)","2ee37a01":"df['StockOptionLevel'].value_counts()","6fdf4988":"df['StockOptionLevel0_1']=df['StockOptionLevel'][df['StockOptionLevel']<=1]","f12eed72":"df['StockOptionLevel2_3']=df['StockOptionLevel'][df['StockOptionLevel']>1]","ebafc2c7":"df['StockOptionLevel0_1'] = df['StockOptionLevel0_1'].fillna(0)","dc88ea98":"df['StockOptionLevel2_3'] = df['StockOptionLevel2_3'].fillna(0)","f0616524":"df['StockOptionLevel0_1']=df['StockOptionLevel0_1'].apply(lambda x: 1 if x>=1 else x)","5b3a0518":"df['StockOptionLevel2_3']=df['StockOptionLevel2_3'].apply(lambda x: 1 if x>=1 else x)","125819ed":"df['TotalWorkingYears'].value_counts()","d2fe6506":"df['TotalWorkingYears_1-10']=df['TotalWorkingYears'][df['TotalWorkingYears']<=10]","38c41866":"df['TotalWorkingYears_11+']=df['TotalWorkingYears'][df['TotalWorkingYears']>10]","b9ce9009":"df['TotalWorkingYears_1-10'] = df['TotalWorkingYears_1-10'].fillna(0)","7bc6b5fe":"df['TotalWorkingYears_11+'] = df['TotalWorkingYears_11+'].fillna(0)","5b396a8e":"df['TotalWorkingYears_1-10']=df['TotalWorkingYears_1-10'].apply(lambda x: 1 if x>=1 else x)","f2a107f3":"df['TotalWorkingYears_11+']=df['TotalWorkingYears_11+'].apply(lambda x: 1 if x>=1 else x)","d047f9aa":"df['TrainingTimesLastYear'].value_counts()","ff5625fe":"df['TrainingTimesLastYear_0_4']=df['TrainingTimesLastYear'][df['TrainingTimesLastYear']<=4]","037dd71c":"df['TrainingTimesLastYear_5+']=df['TrainingTimesLastYear'][df['TrainingTimesLastYear']>4]","c3d8b230":"df['TrainingTimesLastYear_0_4'] = df['TrainingTimesLastYear_0_4'].fillna(0)","d0ce2af3":"df['TrainingTimesLastYear_5+'] = df['TrainingTimesLastYear_5+'].fillna(0)","05bef56c":"df['TrainingTimesLastYear_0_4']=df['TrainingTimesLastYear_0_4'].apply(lambda x: 1 if x>=1 else x)","85565ffd":"df['TrainingTimesLastYear_5+']=df['TrainingTimesLastYear_5+'].apply(lambda x: 1 if x>=1 else x)","ffad525a":"df['YearsInCurrentRole'].value_counts()","7adedf0a":"df['YearsInCurrentRole0_10']=df['YearsInCurrentRole'][df['YearsInCurrentRole']<=10]","dfb53cdd":"df['YearsInCurrentRole11+']=df['YearsInCurrentRole'][df['YearsInCurrentRole']>10]","33aa4e30":"df['YearsInCurrentRole0_10'] = df['YearsInCurrentRole0_10'].fillna(0)","30d2bdfc":"df['YearsInCurrentRole11+'] = df['YearsInCurrentRole11+'].fillna(0)","f0f15630":"df['YearsInCurrentRole0_10']=df['YearsInCurrentRole0_10'].apply(lambda x: 1 if x>=1 else x)","ba3a9736":"df['YearsInCurrentRole11+']=df['YearsInCurrentRole11+'].apply(lambda x: 1 if x>=1 else x)","01a50235":"df['YearsSinceLastPromotion'].value_counts()","4e7a899c":"df['YearsSinceLastPromotion0_10']=df['YearsSinceLastPromotion'][df['YearsSinceLastPromotion']<=10]","56022972":"df['YearsSinceLastPromotion11+']=df['YearsSinceLastPromotion'][df['YearsSinceLastPromotion']>10]","6f5e1b48":"df['YearsSinceLastPromotion0_10'] = df['YearsSinceLastPromotion0_10'].fillna(0)","6aef4f98":"df['YearsSinceLastPromotion11+'] = df['YearsSinceLastPromotion11+'].fillna(0)","e38d7f31":"df['YearsSinceLastPromotion0_10']=df['YearsSinceLastPromotion0_10'].apply(lambda x: 1 if x>=1 else x)","7c1d2d94":"df['YearsSinceLastPromotion11+']=df['YearsSinceLastPromotion11+'].apply(lambda x: 1 if x>=1 else x)","18580422":"df['YearsWithCurrManager'].value_counts()","6531a800":"df['YearsWithCurrManager0_8']=df['YearsWithCurrManager'][df['YearsWithCurrManager']<=8]","f8f977ad":"df['YearsWithCurrManager9+']=df['YearsWithCurrManager'][df['YearsWithCurrManager']>8]","e3952a15":"df['YearsWithCurrManager0_8'] = df['YearsWithCurrManager0_8'].fillna(0)","0fc6d315":"df['YearsWithCurrManager9+'] = df['YearsWithCurrManager9+'].fillna(0)","12af8d4d":"df['YearsWithCurrManager0_8']=df['YearsWithCurrManager0_8'].apply(lambda x: 1 if x>=1 else x)","5553b55c":"df['YearsWithCurrManager9+']=df['YearsWithCurrManager9+'].apply(lambda x: 1 if x>=1 else x)","544cb9e1":"df.columns","1a023702":"df.drop(['YearsWithCurrManager','YearsAtCompany', 'YearsInCurrentRole','YearsSinceLastPromotion','PerformanceRating','NumCompaniesWorked','StockOptionLevel', 'TotalWorkingYears', 'TrainingTimesLastYear'],axis=1,inplace=True)","89e4faf2":"X=df.drop('Attrition',axis=1)\ny=df['Attrition']","d8bdea5e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state = 42)","17054b4b":"logreg_scaled_features = LogisticRegression()\nlogreg_scaled_features.fit(X_train,y_train)","59eba5d4":"y_pred = logreg_scaled_features.predict(X_test)","47ad33e0":"cm = confusion_matrix(y_test, y_pred)\n\n# label the confusion matrix  \nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\n\n# set size of the plot\nplt.figure(figsize = (8,5))\n\n# plot a heatmap\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","e0d2b718":"result = classification_report(y_test,y_pred)\n\n# print the result\nprint(result)","9344b070":"TN = cm[0,0]\n\n# True Positives are denoted by 'TP'\n# Actual '1' values which are classified correctly\nTP = cm[1,1]\n\n# False Negatives are denoted by 'FN'\n# Actual '1' values which are classified wrongly as '0'\nFN = cm[1,0]\n\n# False Positives are denoted by 'FP'\n# Actual 'O' values which are classified wrongly as '1'\nFP = cm[0,1]","79c70271":"print(TN,',',TP,',',FN,',',FP)","2bd00a8b":"plt.rcParams['figure.figsize']=(8,5)\n\nfpr, tpr, thresholds = roc_curve(y_test, y_pred)\nplt.plot(fpr,tpr)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\n\nplt.plot([0, 1], [0, 1],'r--')\n\nplt.title('ROC curve for logistic Regression')\nplt.xlabel('False positive rate (1-Specificity)')\nplt.ylabel('True positive rate (Sensitivity)')\n\nplt.text(x = 0.05, y = 0.8, s =('AUC Score:',round(metrics.roc_auc_score(y_test, y_pred),4)))\nplt.grid(True)","a15b0c7e":"cols = ['Model', 'AUC Score', 'Precision Score', 'Recall Score','Accuracy Score','f1-score']\n\n# creating an empty dataframe of the colums\nresult_tabulation = pd.DataFrame(columns = cols)\nLogistic_regression = pd.Series({'Model': \"Logistic regression \",\n                     'AUC Score' : metrics.roc_auc_score(y_test, y_pred),\n                 'Precision Score': metrics.precision_score(y_test, y_pred),\n                 'Recall Score': metrics.recall_score(y_test, y_pred),\n                 'Accuracy Score': metrics.accuracy_score(y_test, y_pred),\n                  'f1-score': metrics.f1_score(y_test, y_pred)})\n\n\n# appending our result table\nresult_tabulation = result_tabulation.append(Logistic_regression, ignore_index = True)\n\n# view the result table\nresult_tabulation","4f099f3d":"from collections import Counter\nfrom imblearn.over_sampling import SMOTE\nsm = SMOTE(random_state=42)\nX_res, y_res = sm.fit_resample(X, y)\nprint('Resampled dataset shape %s' % Counter(y_res))","edbda474":"X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size = 0.30, random_state = 0)","bd1c38d1":"logreg_scaled_features = LogisticRegression()\nlogreg_scaled_features.fit(X_train,y_train)","71cdd872":"y_pred = logreg_scaled_features.predict(X_test)","296ceb6b":"cm = confusion_matrix(y_test, y_pred)\n\n# label the confusion matrix  \nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\n\n# set size of the plot\nplt.figure(figsize = (8,5))\n\n# plot a heatmap\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","88bd7bfa":"result = classification_report(y_test,y_pred)\n\n# print the result\nprint(result)","8c1cd7c4":"TN = cm[0,0]\n\n# True Positives are denoted by 'TP'\n# Actual '1' values which are classified correctly\nTP = cm[1,1]\n\n# False Negatives are denoted by 'FN'\n# Actual '1' values which are classified wrongly as '0'\nFN = cm[1,0]\n\n# False Positives are denoted by 'FP'\n# Actual 'O' values which are classified wrongly as '1'\nFP = cm[0,1]","9c35bff6":"print(TN,',',TP,',',FN,',',FP)","1a228974":"plt.rcParams['figure.figsize']=(8,5)\n\nfpr, tpr, thresholds = roc_curve(y_test, y_pred)\nplt.plot(fpr,tpr)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\n\nplt.plot([0, 1], [0, 1],'r--')\n\nplt.title('ROC curve')\nplt.xlabel('False positive rate (1-Specificity)')\nplt.ylabel('True positive rate (Sensitivity)')\n\nplt.text(x = 0.05, y = 0.8, s =('AUC Score:',round(metrics.roc_auc_score(y_test, y_pred),4)))\nplt.grid(True)","b7bff4aa":"Logistic_regression_After_smote = pd.Series({'Model': \"Logistic regression After Smote \",\n                     'AUC Score' : metrics.roc_auc_score(y_test, y_pred),\n                 'Precision Score': metrics.precision_score(y_test, y_pred),\n                 'Recall Score': metrics.recall_score(y_test, y_pred),\n                 'Accuracy Score': metrics.accuracy_score(y_test, y_pred),\n                  'f1-score': metrics.f1_score(y_test, y_pred)})\n\n\n# appending our result table\nresult_tabulation = result_tabulation.append(Logistic_regression_After_smote, ignore_index = True)\n\n# view the result table\nresult_tabulation","992d0049":"plt.rcParams['figure.figsize']=(28,10)\n\nresult_tabulation.plot(secondary_y=['Accuracy Score','Precision Score'], mark_right=True)\n\nplt.xticks([0,1,2,3,4,5,6,7,8,9], list(result_tabulation.Model))\nplt.show()","5f5863ea":"result_tabulation.to_excel('result.xlsx')","9e7b4fee":"dfnew=pd.concat([X_res,y_res],axis=1)","4a2938f4":"dfnew","33fed790":"dfnew.to_excel('New IBM.xlsx')","5f8968b9":"X=dfnew.drop('Attrition',axis=1)\ny=dfnew['Attrition']","98d95a88":"# from sklearn.feature_selection import RFE\nfrom sklearn.feature_selection import RFE\nmodel = LogisticRegression()\n#Initializing RFE model\nrfe = RFE(model, 1)\n#Transforming data using RFE\nX_rfe = rfe.fit_transform(X,y)  \n#Fitting the data to model\nmodel.fit(X_rfe,y)\nprint(rfe.support_)\nprint(rfe.ranking_)\n#no of features\nnof_list=np.arange(1,67)            \nhigh_score=0\n\n","e3e8e08c":"nof=0           \nscore_list =[]\nfor n in range(len(nof_list)):\n    X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state = 0)\n    model = LogisticRegression()\n    rfe = RFE(model,nof_list[n])\n    X_train_rfe = rfe.fit_transform(X_train,y_train)\n    X_test_rfe = rfe.transform(X_test)\n    model.fit(X_train_rfe,y_train)\n    score = model.score(X_test_rfe,y_test)\n    score_list.append(score)\n    if(score>high_score):\n        high_score = score\n        nof = nof_list[n]\nprint(\"Optimum number of features: %d\" %nof)\nprint(\"Score with %d features: %f\" % (nof, high_score))","6a4d1641":"cols = list(X.columns)\nmodel = LogisticRegression()\n#Initializing RFE model\nrfe = RFE(model, 45)             \n#Transforming data using RFE\nX_rfe = rfe.fit_transform(X,y)  \n#Fitting the data to model\nmodel.fit(X_rfe,y)              \ntemp = pd.Series(rfe.support_,index = cols)\nselected_features_rfe = temp[temp==True].index\nprint(selected_features_rfe)","79f595d5":"dfn=dfnew[['EnvironmentSatisfaction', 'JobInvolvement', 'JobSatisfaction',\n       'MonthlyIncome', 'Gender', 'BusinessTravel_Travel_Frequently',\n       'BusinessTravel_Travel_Rarely', 'Education_Doctorate',\n       'Department_Research & Development', 'EducationField_Life Sciences',\n       'EducationField_Marketing', 'EducationField_Medical',\n       'EducationField_Other', 'EducationField_Technical Degree',\n       'JobRole_Human Resources', 'JobRole_Laboratory Technician',\n       'JobRole_Manager', 'JobRole_Manufacturing Director',\n       'JobRole_Research Director', 'JobRole_Research Scientist',\n       'JobRole_Sales Executive', 'OverTime_Yes',\n       'Employee Source_Company Website', 'Employee Source_GlassDoor',\n       'Employee Source_Indeed', 'Employee Source_Jora',\n       'Employee Source_LinkedIn', 'Employee Source_Recruit.net',\n       'Employee Source_Referral', 'Employee Source_Seek',\n       'YearsAtcompany_11+', 'NumCompaniesWorked_0_5', 'NumCompaniesWorked_6+',\n       'PerformanceRating_3', 'PerformanceRating_4', 'StockOptionLevel0_1',\n       'StockOptionLevel2_3', 'TotalWorkingYears_11+',\n       'TrainingTimesLastYear_0_4', 'TrainingTimesLastYear_5+',\n       'YearsInCurrentRole0_10', 'YearsInCurrentRole11+',\n       'YearsSinceLastPromotion0_10', 'YearsWithCurrManager0_8',\n       'YearsWithCurrManager9+']]","4b916188":"X=dfn\ny=dfnew['Attrition']","a79eaba3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state = 42)","c1a2652b":"logreg_scaled_features = LogisticRegression()\nlogreg_scaled_features.fit(X_train,y_train)","fe25dab2":"y_pred = logreg_scaled_features.predict(X_test)","be6de3cc":"cm = confusion_matrix(y_test, y_pred)\n\n# label the confusion matrix  \nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\n\n# set size of the plot\nplt.figure(figsize = (8,5))\n\n# plot a heatmap\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","4ffaab76":"result = classification_report(y_test,y_pred)\n\n# print the result\nprint(result)","2a25993d":"TN = cm[0,0]\n\n# True Positives are denoted by 'TP'\n# Actual '1' values which are classified correctly\nTP = cm[1,1]\n\n# False Negatives are denoted by 'FN'\n# Actual '1' values which are classified wrongly as '0'\nFN = cm[1,0]\n\n# False Positives are denoted by 'FP'\n# Actual 'O' values which are classified wrongly as '1'\nFP = cm[0,1]","5b397fac":"print(TN,',',TP,',',FN,',',FP)","1cd5b8a6":"plt.rcParams['figure.figsize']=(8,5)\n\nfpr, tpr, thresholds = roc_curve(y_test, y_pred)\nplt.plot(fpr,tpr)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\n\nplt.plot([0, 1], [0, 1],'r--')\n\nplt.title('ROC curve')\nplt.xlabel('False positive rate (1-Specificity)')\nplt.ylabel('True positive rate (Sensitivity)')\n\nplt.text(x = 0.05, y = 0.8, s =('AUC Score:',round(metrics.roc_auc_score(y_test, y_pred),4)))\nplt.grid(True)","a5ac7d1f":"Logistic_regression_after_FS = pd.Series({'Model': \"Logistic regression after feature selection\",\n                     'AUC Score' : metrics.roc_auc_score(y_test, y_pred),\n                 'Precision Score': metrics.precision_score(y_test, y_pred),\n                 'Recall Score': metrics.recall_score(y_test, y_pred),\n                 'Accuracy Score': metrics.accuracy_score(y_test, y_pred),\n                  'f1-score': metrics.f1_score(y_test, y_pred)})\n\n\n# appending our result table\nresult_tabulation = result_tabulation.append(Logistic_regression_after_FS, ignore_index = True)\n\n# view the result table\nresult_tabulation","6ed369a2":"decision_tree_classification = DecisionTreeClassifier(criterion='entropy')\n\n# train model\ndecision_tree = decision_tree_classification.fit(X_train, y_train)","1577bd07":"decision_tree_pred = decision_tree.predict(X_test)","a88cb032":"cm = confusion_matrix(y_test, decision_tree_pred)\n\n# label the confusion matrix  \nconf_matrix = pd.DataFrame(data = cm, columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\n\n# set sizeof the plot\nplt.figure(figsize = (8,5))\n\n# plot a heatmap\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap=\"YlGnBu\")\nplt.show()","bba9a0cc":"TN = cm[0,0]\n\n# True Positives are denoted by 'TP'\n# Actual '1' values which are classified correctly\nTP = cm[1,1]\n\n# False Negatives are denoted by 'FN'\n# Actual '1' values which are classified wrongly as '0'\nFN = cm[1,0]\n\n# False Positives are denoted by 'FP'\n# Actual 'O' values which are classified wrongly as '1'\nFP = cm[0,1]","378769db":"print(\"Accuracy is:\",metrics.accuracy_score(y_test,decision_tree_pred))\n\nprint('train score:',decision_tree.score(X_train,y_train))\n\nprint('test score:',decision_tree.score(X_test,y_test))","8bbe2326":"result = classification_report(y_test, decision_tree_pred)\n\n# print the result\nprint(result)","f97a7cc5":"# set the figure size\nplt.rcParams['figure.figsize']=(8,5)\n\nfpr, tpr, thresholds = roc_curve(y_test, decision_tree_pred)\n\n# plot the ROC curve\nplt.plot(fpr,tpr)\n\n# set limits for x and y axes\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\n\n# plot the straight line showing worst prediction for the model\nplt.plot([0, 1], [0, 1],'r--')\n\n# add the AUC score\nplt.text(x = 0.05, y = 0.8, s =('AUC Score:', round(metrics.roc_auc_score(y_test, decision_tree_pred),4)))\n\n\n# name the plot, and both axes\nplt.title('ROC curve')\nplt.xlabel('False positive rate (1-Specificity)')\nplt.ylabel('True positive rate (Sensitivity)')\n\n# plot the grid\nplt.grid(True)","4cf2a167":"Decision_tree_metrics = pd.Series({'Model': \"Decision Tree \",\n                     'AUC Score' : metrics.roc_auc_score(y_test, decision_tree_pred),\n                 'Precision Score': metrics.precision_score(y_test, decision_tree_pred),\n                 'Recall Score': metrics.recall_score(y_test, decision_tree_pred),\n                 'Accuracy Score': metrics.accuracy_score(y_test, decision_tree_pred),\n                 \n                  'f1-score':metrics.f1_score(y_test, decision_tree_pred)})\n\n\n\n# appending our result table\nresult_tabulation = result_tabulation.append(Decision_tree_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation","f926f20a":"pruned = DecisionTreeClassifier(criterion=\"entropy\", max_depth=25)\n\n# train the classifier\ndecision_tree_prune = pruned.fit(X_train,y_train)","c21f2d69":"decision_tree_prune_pred = decision_tree_prune.predict(X_test)","bf2d3ba2":"cm = confusion_matrix(y_test, decision_tree_prune_pred)\n\n# label the confusion matrix  \nconf_matrix = pd.DataFrame(data = cm, columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\n\n# set sizeof the plot\nplt.figure(figsize = (8,5))\n\n# plot a heatmap\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap=\"YlGnBu\")\nplt.show()","55cb4994":"TN = cm[0,0]\n\n# True Positives are denoted by 'TP'\n# Actual '1' values which are classified correctly\nTP = cm[1,1]\n\n# False Negatives are denoted by 'FN'\n# Actual '1' values which are classified wrongly as '0'\nFN = cm[1,0]\n\n# False Positives are denoted by 'FP'\n# Actual 'O' values which are classified wrongly as '1'\nFP = cm[0,1]","2ce05ff9":"result = classification_report(y_test,decision_tree_prune_pred)\n\n# print the result\nprint(result)","086e1aaf":"print(\"Accuracy is:\",metrics.accuracy_score(y_test,decision_tree_prune_pred))\n\nprint('train score:',decision_tree_prune.score(X_train,y_train))\n\nprint('test score:',decision_tree_prune.score(X_test,y_test))","d18e2082":"plt.rcParams['figure.figsize']=(8,5)\n\nfpr, tpr, thresholds = roc_curve(y_test, decision_tree_prune_pred)\n\n# plot the ROC curve\nplt.plot(fpr,tpr)\n\n# set limits for x and y axes\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\n\n# plot the straight line showing worst prediction for the model\nplt.plot([0, 1], [0, 1],'r--')\n\n# add the AUC score\nplt.text(x = 0.05, y = 0.8, s =('AUC Score:', round(metrics.roc_auc_score(y_test, decision_tree_prune_pred),4)))\n\n\n# name the plot, and both axes\nplt.title('ROC curve')\nplt.xlabel('False positive rate (1-Specificity)')\nplt.ylabel('True positive rate (Sensitivity)')\n\n# plot the grid\nplt.grid(True)","b999fa4d":"Pruned_Decision_tree_metrics = pd.Series({'Model': \"Pruned Decision Tree \",\n                     'AUC Score' : metrics.roc_auc_score(y_test, decision_tree_prune_pred),\n                 'Precision Score': metrics.precision_score(y_test, decision_tree_prune_pred),\n                 'Recall Score': metrics.recall_score(y_test, decision_tree_prune_pred),\n                 'Accuracy Score': metrics.accuracy_score(y_test, decision_tree_prune_pred),\n               \n                  'f1-score':metrics.f1_score(y_test, decision_tree_prune_pred)})\n\n\n\n# appending our result table\nresult_tabulation = result_tabulation.append(Pruned_Decision_tree_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation","6634fe55":"param_grid = {\"criterion\": [\"gini\", \"entropy\"],\n              \"min_samples_split\": [10, 20],\n              \"max_depth\": [3, 5, 10, 20,25],\n              \"min_samples_leaf\": [30, 100, 300],\n              \"max_leaf_nodes\": [None,2,3,5],\n              }","8ba343ef":"decision_tree_Gridsearch = DecisionTreeClassifier()\ndecision_tree_Gridsearch = GridSearchCV(decision_tree_Gridsearch, param_grid, cv=10)\ndecision_tree_Gridsearch.fit(X_train, y_train)","fac0d2c1":"decision_tree_Gridsearch.best_params_","c75d3340":"decision_tree_best_parameters = DecisionTreeClassifier(max_depth= decision_tree_Gridsearch.best_params_.get('max_depth'), \n                                                       min_samples_leaf= decision_tree_Gridsearch.best_params_.get('min_samples_leaf'), \n                                                       min_samples_split= decision_tree_Gridsearch.best_params_.get('min_samples_split'),\n                                                       criterion=decision_tree_Gridsearch.best_params_.get('criterion')).fit(X_train, y_train)","8bd800a2":"decision_tree_best_parameters_pred = decision_tree_best_parameters.predict(X_test)","3fcac5e7":"cm = confusion_matrix(y_test, decision_tree_best_parameters_pred)\n\n# label the confusion matrix  \nconf_matrix = pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\n\n# set sizeof the plot\nplt.figure(figsize = (8,5))\n\n# plot a heatmap\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\")\nplt.show()","d58d8cd7":"result = classification_report(y_test,decision_tree_best_parameters_pred)\n\n# print the result\nprint(result)","c2886d8e":"plt.rcParams['figure.figsize']=(8,5)\n\nfpr, tpr, thresholds = roc_curve(y_test, decision_tree_best_parameters_pred)\n\n# plot the ROC curve\nplt.plot(fpr,tpr)\n\n# set limits for x and y axes\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\n\n# plot the straight line showing worst prediction for the model\nplt.plot([0, 1], [0, 1],'r--')\n\n# add the AUC score\nplt.text(x = 0.05, y = 0.8, s =('AUC Score:', round(metrics.roc_auc_score(y_test, decision_tree_best_parameters_pred),4)))\n\n\n# name the plot, and both axes\nplt.title('ROC curve')\nplt.xlabel('False positive rate (1-Specificity)')\nplt.ylabel('True positive rate (Sensitivity)')\n\n# plot the grid\nplt.grid(True)","bac90d37":"Decision_tree_GridSearch_metrics = pd.Series({'Model': \"Decision Tree (GridSearchCV) \",\n                     'AUC Score' : metrics.roc_auc_score(y_test, decision_tree_best_parameters_pred),\n                 'Precision Score': metrics.precision_score(y_test, decision_tree_best_parameters_pred),\n                 'Recall Score': metrics.recall_score(y_test, decision_tree_best_parameters_pred),\n                 'Accuracy Score': metrics.accuracy_score(y_test, decision_tree_best_parameters_pred),\n     \n                 'f1-score':metrics.f1_score(y_test, decision_tree_best_parameters_pred)})\n\n\n\n# appending our result table\nresult_tabulation = result_tabulation.append(Decision_tree_GridSearch_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation","9c76d289":"from sklearn.ensemble import RandomForestClassifier\n","401e72a8":"clf=RandomForestClassifier(n_estimators=5,max_depth=30)\n#Train the model using the training sets y_pred=clf.predict(X_test)\nran=clf.fit(X_train,y_train)\n#predict the model\ny_pred=clf.predict(\n    X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","b61ad860":"import seaborn as sns\nimport numpy as np; np.random.seed(0)\nimport matplotlib.pylab as plt\nimport matplotlib.transforms\n\ndata = np.random.randint(100, size=(5,5))\nakws = {\"ha\": 'left',\"va\": 'top'}\nax = sns.heatmap(data,  annot=True, annot_kws=akws)\n\nfor t in ax.texts:\n    trans = t.get_transform()\n    offs = matplotlib.transforms.ScaledTranslation(0.75, 0.5,\n                    matplotlib.transforms.IdentityTransform())\n    t.set_transform( offs + trans )\n\nplt.show()\noffs = matplotlib.transforms.ScaledTranslation(0.50, 0.50,\n                    matplotlib.transforms.IdentityTransform())","ef721e2c":"cm = confusion_matrix(y_test, y_pred)\n\n# label the confusion matrix  \nconf_matrix = pd.DataFrame(data = cm, columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\n\n# set sizeof the plot\nplt.figure(figsize = (8,5))\n\n# plot a heatmap\nakws = {\"ha\": 'center',\"va\": 'center'}\nax = sns.heatmap(conf_matrix, annot=True, fmt='d', cmap=\"YlGnBu\" )\nfor t in ax.texts:\n    trans = t.get_transform()\n    offs = matplotlib.transforms.ScaledTranslation(-0.45,0.45,\n                    matplotlib.transforms.IdentityTransform())\n    t.set_transform( offs + trans )\n\nplt.show()\n","87b7109d":"result = classification_report(y_test, y_pred)\n\n# print the result\nprint(result)","f4d8aa92":"print(\"Accuracy is:\",metrics.accuracy_score(y_test,y_pred))\n\nprint('train score:',ran.score(X_train,y_train))\n\nprint('test score:',ran.score(X_test,y_test))","2fb953d8":"plt.rcParams['figure.figsize']=(8,5)\n\nfpr, tpr, thresholds = roc_curve(y_test, y_pred)\n\n# plot the ROC curve\nplt.plot(fpr,tpr)\n\n# set limits for x and y axes\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\n\n# plot the straight line showing worst prediction for the model\nplt.plot([0, 1], [0, 1],'r--')\n\n# add the AUC score\nplt.text(x = 0.05, y = 0.8, s =('AUC Score:', round(metrics.roc_auc_score(y_test, y_pred),4)))\n\n\n# name the plot, and both axes\nplt.title('ROC curve')\nplt.xlabel('False positive rate (1-Specificity)')\nplt.ylabel('True positive rate (Sensitivity)')\n\n# plot the grid\nplt.grid(True)","0ea8059d":"ran_metrics = pd.Series({'Model': \"RandomForest \",\n                     'AUC Score' : metrics.roc_auc_score(y_test, y_pred),\n                 'Precision Score': metrics.precision_score(y_test, y_pred),\n                 'Recall Score': metrics.recall_score(y_test, y_pred),\n                 'Accuracy Score': metrics.accuracy_score(y_test, y_pred),\n\n                  'f1-score':metrics.f1_score(y_test, y_pred)})\n\n\n\n# appending our result table\nresult_tabulation = result_tabulation.append(ran_metrics , ignore_index = True)\n\n# view the result table\nresult_tabulation","a86470f6":"\nfrom sklearn.model_selection import cross_val_score\nprint(cross_val_score(RandomForestClassifier(max_depth=25), X, y, cv=10))\n","2a660ed6":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test) ","0b540e0f":"cm = confusion_matrix(y_test, y_pred)\n\n# label the confusion matrix  \nconf_matrix = pd.DataFrame(data = cm, columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\n\n# set sizeof the plot\nplt.figure(figsize = (8,5))\n\n# plot a heatmap\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap=\"YlGnBu\")\nplt.show()","18c3cbe5":"result = classification_report(y_test, y_pred)\n\n# print the result\nprint(result)","eb5d2ecb":"print(\"Accuracy is:\",metrics.accuracy_score(y_test,y_pred))\n\nprint('train score:',classifier.score(X_train,y_train))\n\nprint('test score:',classifier.score(X_test,y_test))","b5c39bd0":"plt.rcParams['figure.figsize']=(8,5)\n\nfpr, tpr, thresholds = roc_curve(y_test, y_pred)\n\n# plot the ROC curve\nplt.plot(fpr,tpr)\n\n# set limits for x and y axes\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\n\n# plot the straight line showing worst prediction for the model\nplt.plot([0, 1], [0, 1],'r--')\n\n# add the AUC score\nplt.text(x = 0.05, y = 0.8, s =('AUC Score:', round(metrics.roc_auc_score(y_test, y_pred),4)))\n\n\n# name the plot, and both axes\nplt.title('ROC curve')\nplt.xlabel('False positive rate (1-Specificity)')\nplt.ylabel('True positive rate (Sensitivity)')\n\n# plot the grid\"\nplt.grid(True)","a95d0dc4":"Naive_bayes = pd.Series({'Model': \"Naive Bayes \",\n                     'AUC Score' : metrics.roc_auc_score(y_test, y_pred),\n                 'Precision Score': metrics.precision_score(y_test, y_pred),\n                 'Recall Score': metrics.recall_score(y_test, y_pred),\n                 'Accuracy Score': metrics.accuracy_score(y_test, y_pred),\n\n                  'f1-score':metrics.f1_score(y_test, y_pred)})\n\n\n\n# appending our result table\nresult_tabulation = result_tabulation.append(Naive_bayes , ignore_index = True)\n\n# view the result table\nresult_tabulation","af74d558":"plt.rcParams['figure.figsize']=(28,10)\n\nresult_tabulation.plot()\n\nplt.xticks([0,1,2,3,4,5,6,7,8,9], list(result_tabulation.Model))\nplt.show()","9296b8d1":"result_tabulation.to_excel('result.xlsx')","c3e59363":"from sklearn.ensemble import AdaBoostClassifier\n\n\ncls=AdaBoostClassifier(DecisionTreeClassifier(),n_estimators=200)\ncls.fit(X_train,y_train)\nyp=cls.predict(X_test)","5d4c68d3":"cm = confusion_matrix(y_test, yp)\n\n# label the confusion matrix  \nconf_matrix = pd.DataFrame(data = cm, columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\n\n# set sizeof the plot\nplt.figure(figsize = (8,5))\n\n# plot a heatmap\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap=\"YlGnBu\")\nplt.show()","c6299faf":"result = classification_report(y_test, y_pred)\n\n# print the result\nprint(result)","ef1e9b17":"from sklearn import model_selection","410382fb":"from sklearn.ensemble import BaggingClassifier\nseed = 8\nkfold = model_selection.KFold(n_splits = 3, \n                       random_state = seed) \n  \n# initialize the base classifier \nbase_cls = DecisionTreeClassifier() \n  \n# no. of base classifier \nnum_trees = 500\n  \n# bagging classifier \nmodel = BaggingClassifier(base_estimator = base_cls, \n                          n_estimators = num_trees, \n                          random_state = seed) \n  \nresults = model_selection.cross_val_score(model, X, y, cv = kfold) \nprint(\"accuracy :\") \nprint(results.mean())","026557bc":"seed = 8\nkfold = model_selection.KFold(n_splits = 3, \n                       random_state = seed) \n  \n# initialize the base classifier \nbase_cls = DecisionTreeClassifier() \n  \n# no. of base classifier \nnum_trees = 500\n  \n# bagging classifier \nmodel = AdaBoostClassifier(base_estimator = base_cls, \n                          n_estimators = num_trees, \n                          random_state = seed) \n  \nresults = model_selection.cross_val_score(model, X, y, cv = kfold) \nprint(\"accuracy :\") \nprint(results.mean()) ","bb9c1f7d":"<table align=\"left\" width=100%>\n    <tr>\n        <td>\n            <div align=\"middle\">\n                <font color=\"#21618C\" size=5px>\n                  <b>EMPLOYEE ATTRITION BY HR ANALYSIS\n                    <\/b>\n                <\/font>\n            <\/div>\n        <\/td>\n    <\/tr>\n<\/table>","5ed0e91f":"## Random Forest","3986c815":"## Null Imputation","31ea8c62":"## 3. Read Data","9f9bc4ce":"## Table of Content\n\n1. **[Import Libraries](#import_lib)**\n2. **[Set Options](#set_options)**\n3. **[Read Data](#RD)**\n4. **[Data Analysis and Preparation](#data_preparation)**\n5. **[Base Model](#LogisticReg)**\n","d73a7f57":"## Decision GridSearch","33e5b0c6":"-We analyse and predict, the dataset containing information about the employees working in an organisation and the factors affecting the chances of attrition based on the geographical, familial and economical conditions as well as their job history. \n\n-We are building a suitable model to predict the attrition considering relevant features and parameters, thus making it easier for HR department to make appropriate decisions.","d63416da":"## 4. Data Analysis and Preparation","04044e01":"## 1. Import Libraries","80b1bb43":"## Random Forest Using Cross Valid","bf4eee35":"<table align=\"left\">\n    <tr>\n        <td>\n            <div align=\"left\", style=\"font-size:120%\">\n                <font color=\"#21618C\">\n                    <b>We see that there are 23,436 observations and 37 features <\/br><\/b>\n                <\/font>\n            <\/div>\n        <\/td>\n    <\/tr>\n<\/table>\n\n\n","2349a6ec":"## Naive Bayes","8339097f":"## 2. Set Options ","8dcb8b68":"## Ensemble","3e585108":"AGE - Numerical Value\n\nATTRITION - Employee leaving the company (0=Current Employee, 1=Voluntary Resignation)\n\nBUSINESS TRAVEL - (1=No Travel, 2=Travel Frequently, 3=Tavel Rarely)\n\nDAILY RATE - Salary Level\n\nDEPARTMENT - (1=HR, 2=R&D, 3=Sales)\n\nDISTANCE FROM HOME - The distance from work to home\n\nEDUCATION - (1=Below College, 2=College, 3=Bachelor, 4=Master, 5=Doctor)\n\nEMPLOYEE COUNT - Numerical Value\n\nEDUCATION FIELD - (1=HR, 2=LIFE SCIENCES, 3=MARKETING, 4=MEDICAL SCIENCES,\n 5=OTHERS, 6= TEHCNICAL)\n\nEMPLOYEE NUMBER\t- EMPLOYEE ID\n\nENVIROMENT SATISFACTION\t- Satisfaction with the environment\n\nGENDER - (1=FEMALE, 2=MALE)\n\nHOURLY RATE - Hourly Salary\n\nJOB INVOLVEMENT - (1=Low, 2=Medium, 3=High, 4=Very High)\n\nJOB LEVEL - Level of Job\n\nJOB ROLE - Position\n\nJOB SATISFACTION - (1=Low, 2=Medium, 3=High, 4=Very High)\n\nMARITAL STATUS - (1=Divorced, 2=Married, 3=Single)\n\nMONTHLY INCOME - Monthly Salary\n\nMONTHY RATE - MONTHY RATE\n\nNUMCOMPANIES WORKED - Number of companies worked\t\n\nOVER 18 - (Y=YES, N=NO)\n\nOVERTIME - (YES, NO)\n\nPERCENT SALARY HIKE - Percentage increase in salary\n\nPERFORMANCE RATING - (1=Low, 2=Good, 3=Excellent, 4=Outstanding)\n\nRELATIONSHIP SATISFACTION - (1=Low, 2=Medium, 3=High, 4=Very High)\n\nSTANDARD HOURS - Standard working hours\n\nSTOCK OPTIONS LEVEL - Stock options\n\nTOTAL WORKING YEARS - Number of years worked\n\nTRAINING TIMES LAST YEAR - Hours spent for training\n\nWORK LIFE BALANCE - Time spent between work and personal life\n\nYEARS AT COMPANY - Total number of years at the company\n\nYEARS IN CURRENT ROLE - Number of years in current role\n\nYEARS SINCE LAST PROMOTION - Years since last promotion\n\nYEARS WITH CURRENT MANAGER - Years spent with current manager","00984b8d":"##  Applying Smote","09f2e9c5":"## Data Description ","dd0881f1":"## Decision Tree","b232736a":"## Checking for Outliers","1f39f0fb":"## Problem Statement","86ad781b":"## BASE MODEL - Logistic Regression ","e0ff1e21":"## Pruned Decision Tree"}}