{"cell_type":{"7397c594":"code","e43ff836":"code","41a33e8b":"code","371a4f3b":"code","79544db2":"code","33e6b1d5":"code","92f6a64d":"code","f2ba84e8":"code","635b1669":"code","27236b86":"code","030a0c38":"code","74328cbb":"code","775bb4ac":"code","4ecf86ba":"code","d3d63a66":"code","3ac82dbc":"code","d4ea0242":"code","dcafa3a2":"code","1a947062":"markdown","e0f6a555":"markdown","06b3edbc":"markdown","013cae41":"markdown","1e21bbec":"markdown","ea1bc765":"markdown","395d037f":"markdown","0936a693":"markdown","d28a2acb":"markdown","bc4fbae6":"markdown","4f56c6c8":"markdown","f024fe11":"markdown","0781f366":"markdown","4f7bdcad":"markdown","f88121c8":"markdown","537b947b":"markdown","5a4b6378":"markdown","8393c60c":"markdown","b8a7d443":"markdown","61f24361":"markdown"},"source":{"7397c594":"%reset -f\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport gc\nimport warnings\nfrom textwrap import fill\nimport matplotlib.ticker as ticker\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator \nimport seaborn as sns\n\n\nwarnings.filterwarnings(\"ignore\")\ngc.enable()\n\npd.options.display.max_colwidth=250\n\nplt.style.use('seaborn-white')\nplt.rcParams['axes.labelsize'] = 20\nplt.rcParams['axes.titlesize'] = 20\nplt.rcParams['font.sans-serif'] = \"Comfortaa\"\n\n\n#Number of active Kagglers by year\ndf_list = ['Users','Submissions','TeamMemberships']\nfor i in range(len(df_list)):\n    globals()[df_list[i]]=pd.read_csv('\/kaggle\/input\/meta-kaggle\/'+df_list[i]+'.csv')\n    \nUsers['RegisterDate']=pd.to_datetime(Users['RegisterDate'])\nUsers['RegYear']=Users['RegisterDate'].dt.year\n\n\nfig, ax = plt.subplots(1, 1, figsize=(12,4))\nfig.suptitle('Number of new Kagglers registering per year', fontsize=20, y=1.0)\n    \nfor i in range(4):\n    Users['RegYear'].value_counts(ascending=True).plot.bar(ax=ax, width=0.3, color='#BDC2BB')\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"left\"].set_visible(False)\n    \n    \n    y_axis = ax.axes.get_yaxis()\n    y_axis.set_visible(False)\n    \n    for p in  ax.patches:\n        width, height = p.get_width(), p.get_height()\n        x, y = p.get_xy() \n        ax.annotate(height, (x+0.15, height+25000), fontsize=12, ha='center',weight='normal', size='large')\n            \nplt.tight_layout()\nplt.show()    \n\ncount=Users.shape[0]\nSubmissions['SubmissionDate']=pd.to_datetime(Submissions['SubmissionDate'])\nSubmissions['Year'] = Submissions['SubmissionDate'].dt.year\nactive=Submissions[Submissions['Year'].isin(range(2017,2021))]\nactive=active[['TeamId','SubmittedUserId', 'Year']].drop_duplicates(subset=['Year','TeamId'])\nactive=active.merge(TeamMemberships.drop(columns=['Id', 'RequestDate']), on=['TeamId'])\nactive=active.drop_duplicates(subset=['Year','UserId'])\nactive.Year = active.Year.astype(str)\nactive=pd.DataFrame(active['Year'].value_counts()).sort_index()\nactive.columns=['Active']\n\n\n#data preparation\nsurvey_2017MCQ = pd.read_csv('\/kaggle\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv',encoding='latin1')\nsurvey_2018MCQ = pd.read_csv('\/kaggle\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv',encoding='latin1')\nsurvey_2019MCQ = pd.read_csv('\/kaggle\/input\/kaggle-survey-2019\/multiple_choice_responses.csv')\nsurvey_2020MCQ = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\nconversion = pd.read_csv('\/kaggle\/input\/kaggle-survey-2017\/conversionRates.csv')\n\n\nfor i in range(2018,2021):\n    globals()['survey_'+str(i)+'Q']=pd.DataFrame(eval('survey_'+str(i)+'MCQ').iloc[[0]]).T\n    globals()['survey_'+str(i)+'Q'].columns=['questions']\n    globals()['survey_'+str(i)+'MCQ'] = eval('survey_'+str(i)+'MCQ').drop(eval('survey_'+str(i)+'MCQ').index[0])\n\n\n#format gender variable uniformly\nsurvey_2020MCQ.loc[survey_2020MCQ['Q2'] == 'Man', 'Q2'] = 'Male'\nsurvey_2020MCQ.loc[survey_2020MCQ['Q2'] == 'Woman', 'Q2'] = 'Female'\n\n#survey_2017MCQ['Age'] = pd.to_numeric(survey_2017MCQ['Age'], errors='coerce')\n\nage_list=[21,24,29,34,39,44,49,54,59]\na=len(age_list)\nx1=x2=0\n#Create Age-groups\nfor i in range(a):\n    x1=age_list[i]\n    if i in range(1,a):\n        x2=age_list[i-1]+1            \n        p=str(x2)+\"-\"+str(x1)\n        survey_2017MCQ.loc[survey_2017MCQ['Age'].isin(range(x2,x1)), 'Agegroup'] = p\n    \nsurvey_2017MCQ.loc[survey_2017MCQ['Age']<=21, 'Agegroup'] = \"<=21\"\nsurvey_2017MCQ.loc[survey_2017MCQ['Age']>=60, 'Agegroup'] = \">=60\"\n        \n\nvar_list=['Country','Q3','Q3','Q3']\ncountry_list=['States','Kingdom','China','Iran','Emirates','disclose']\nshort_list=['U.S.A.','U.K.','China','Iran','U.A.E.','Other']\nagevar_list=['Age','Q2','Q1','Q1']\nqualvar_list=['FormalEducation','Q4','Q4','Q4']\n\nfor i in range(4):\n    df=globals()['survey_'+str(i+2017)+'MCQ']\n    df=df.fillna('NA')\n    for j in range(len(short_list)):\n        df.loc[df[var_list[i]].str.contains(country_list[j], na=False), var_list[i]] = short_list[j]\n        globals()['survey_'+str(i+2017)+'MCQ']=df\n    \n    if i>0:\n        df.loc[df[agevar_list[i]].isin(['60-69','70-79','70+','80+']), agevar_list[i]] = '>=60'\n        df.loc[df[agevar_list[i]]=='18-21', agevar_list[i]] = '<=21'\n        \n    for j in range(len(qualvar_list)):\n        df.loc[df[qualvar_list[i]].str.contains('Some', na=False), qualvar_list[i]] = 'College dropout'\n        df.loc[df[qualvar_list[i]].str.contains('high', na=False), qualvar_list[i]] = 'High School'\n        df.loc[df[qualvar_list[i]].str.contains('Bach', na=False), qualvar_list[i]] = 'Bachelors'\n        df.loc[df[qualvar_list[i]].str.contains('Mast', na=False), qualvar_list[i]] = 'Masters'\n        df.loc[df[qualvar_list[i]].str.contains('refer', na=False), qualvar_list[i]] = 'NA'\n        df[qualvar_list[i]] = df[qualvar_list[i]].str.replace(' degree','')\n    ","e43ff836":"Users=Users[~Users['PerformanceTier'].isin([0,5])]\nuser_count=pd.DataFrame(Users['PerformanceTier'].value_counts())\nuser_count=user_count[user_count.index!=0]\nperf0=1-int(user_count.sum())\/count\nuser_count.sort_values(by=['PerformanceTier'], ascending=False,inplace=True)\nuser_count=user_count.T\n\nfig, ax = plt.subplots(figsize=(15,1))  \nax = plt.axes()\ng=sns.heatmap(user_count, annot=True, fmt='g', yticklabels='',  annot_kws={\"size\": 14},ax=ax)#, cbar_kws={\"orientation\": \"horizontal\", \"shrink\": 10})\n\nfootnote='Total no. of registered users on Kaggle = ' + str(count) + '\\n' + 'Untiered Kagglers (i.e. Performance Tier=0) =' + str(\"{:.0%}\".format(perf0))\n                \nax.set_title('Less than 2% of all registered users are tiered', pad=10)\nplt.annotate(footnote, xy=(-0.05, -1.25), xycoords='axes fraction')\nplt.xlabel('Performance Tiers', fontsize=12)\nplt.tight_layout(pad=2.0)\nplt.show()","41a33e8b":"#Kaggling community - gender-wise participation\nvar_list=['GenderSelect','Q1','Q2','Q2']\n\nfor i in range(4):\n    x=str(i+2017)\n    globals()['g'+x]=pd.DataFrame(eval('survey_'+x+'MCQ')[var_list[i]].value_counts(dropna=False))\n    globals()['g'+x].columns=[x]\n    df=globals()['g'+x]\n    df.loc['LGBTQA+ \/Not-specified']=df[~df.index.str.contains('ale', na=False)].sum(axis=0)\n    df=df.loc[['Male','Female','LGBTQA+ \/Not-specified']]\n    df.loc['Overall']=df.sum(axis=0)\n    globals()['g'+x]=df\n    \n    if i>0:\n        gender=gender.merge(df,left_index=True, right_index=True)\n    else:\n        gender=df\n        \ngender=gender.T\ngender=gender.merge(active, left_index=True, right_index=True)\ngender['%Participation']=gender['Overall']\/gender['Active']\n\nplt.rcParams['axes.labelsize'] = 20\n\nfig, ax1 = plt.subplots(figsize=(10,5))\nax2 = ax1.twinx()  # set up the 2nd axis\nax1.bar(width=0.3,height=gender['Active'],x=gender.index, color='#A2B59F', label='Kagglers with >=1 submission') \nax2.plot(gender.index,gender['%Participation'], \n         color='#FF6600', linestyle='--', marker='o', markersize=8,\n            label='Survey participation (%)')\n\ny1label = '\\n'.join((r'No. of Kagglers with',\n                         'at least 1 submission')) \n\nax1.set_title('More than 20% of active Kagglers* participate in the survey every year', y=1.1)\nax1.set_ylabel(y1label, fontsize=14)\nax2.set_ylabel('Survey participation(%)', fontsize=14)\n\ni=0\nfor spine in ax1.spines.values():\n    if list(ax1.spines.keys())[i]!='bottom':\n        spine.set_visible(False)\n    i=i+1\n     \ni=0\nfor spine in ax2.spines.values():\n    if list(ax2.spines.keys())[i]!='bottom':\n        spine.set_visible(False)\n    i=i+1\n    \nax2.yaxis.set_major_formatter(ticker.PercentFormatter(decimals=0,xmax=1))\n\nfor p in  ax1.patches:\n        width, height = p.get_width(), p.get_height()\n        x, y = p.get_xy() \n        ax1.annotate(height, (x, height*1.05), fontsize=10)\n        \n#labels=['Kagglers with >=1 submission','Survey participation (%)']\n\nfootnote=\"\\n Note: Users who made at least one submission in the year have been considered to be active Kagglers*\"\nfig.subplots_adjust(wspace=0.0, hspace=0, top=0.2, bottom=.1)\nfig.legend(bbox_to_anchor=(.88, 0.75), frameon=True, prop={'size': 8})\nplt.tight_layout(pad=1.0)\nplt.annotate(footnote, xy=(0, -0.2), xycoords='axes fraction')\nplt.show()","371a4f3b":"colors = ['#E8E7D2', '#C9BA9B', '#BDC2BB', '#FFD0A6']\nvar_list=['Overall','Female','Male','LGBTQA+ \/Not-specified'] \nfig, ax = plt.subplots(2, 2, figsize=(12,8))\nfig.suptitle('Female Kagglers are on the rise', fontsize=20, y=1.05)\n    \nfor i in range(4):\n    gender[var_list[i]].plot.bar(ax=ax[int(i\/2)][i%2], color=[colors[i]], legend=True, width=0.3)\n    ax[int(i\/2)][i%2].spines[\"top\"].set_visible(False)\n    ax[int(i\/2)][i%2].spines[\"right\"].set_visible(False)\n    ax[int(i\/2)][i%2].spines[\"left\"].set_visible(False)\n    \n    ax[int(i\/2)][i%2].legend(loc='top center', bbox_to_anchor= (0.4, 1.5), ncol=1,\n                             borderaxespad=0, frameon=False, fontsize=12)\n    \n    \n    y_axis = ax[int(i\/2)][i%2].axes.get_yaxis()\n    y_axis.set_visible(False)\n    \n    for p in  ax[int(i\/2)][i%2].patches:\n        width, height = p.get_width(), p.get_height()\n        x, y = p.get_xy() \n        ax[int(i\/2)][i%2].annotate(height, (x, height*1.05), fontsize=12)\n        if (1<x<2):\n            x1=x\n            h1=height\n            \n\n    ax[int(i\/2)][i%2].annotate('', \n                               xy=(x+width*1.2, height*0.85),  xycoords='data',\n                               xytext=(x1-width\/4, h1*0.85), textcoords='data',\n                               arrowprops=dict(facecolor='black', shrink=0.2),\n                               horizontalalignment='right', verticalalignment='top',\n                               )\n\n    textstr = '\\n'.join((r'$2019-20:$',\n                         'Total number of Kagglers surveyed remained stable...'))\n    ax[0][0].text(0.0, 1.3, textstr, transform=ax[0][0].transAxes, fontsize=14,\n        verticalalignment='top', c='#808080')\n    \n    textstr = '\\n'.join((r'$2019-20:$',\n                         '...number of female Kagglers increased')) \n    ax[0][1].text(0.18, 1.3, textstr, transform=ax[0][1].transAxes, fontsize=14,\n        verticalalignment='top', c='#FF8547')\n            \nplt.tight_layout(pad=1.0)\nplt.show()    ","79544db2":"gender['%Female']=gender['Female']\/gender['Overall']\ngender['%LGBTQA+ \/Not-specified']=gender['LGBTQA+ \/Not-specified']\/gender['Overall']\n\ncolors = ['#C9BA9B','#FFD0A6']\nvar_list = ['%Female', '%LGBTQA+ \/Not-specified']\n\nax = gender[var_list].plot(kind = 'bar',\n                           stacked = True,\n                           width = 0.3, \n                           align='center', \n                           figsize=(10,4),\n                           legend=True,\n                           color=['#C9BA9B','#FFD0A6'])\n\n#labels = [fill(l, 15) for l in gender[var_list].columns]\nlabels= ['%Female', '\\n'.join((r'%LGBTQA+ \/' ,r'Not specified'))]\n\nax.legend(labels, loc='lower left', bbox_to_anchor= (1.01, 0.0), ncol=1,\n          borderaxespad=0, frameon=False, fontsize=12, labelspacing=2)\n\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate(f'{height:.1%}', (x + width\/2, y + height\/2), ha='center', va='center',fontsize=12)\n    \n    if y==0:\n        if (1<x<2):\n            x1=x\n            h1=height\n        elif (x>=2):\n            ax.annotate('',\n                        xy=(x+width*1.2, height*0.7),  xycoords='data',\n                        xytext=(x1-width\/4, h1*0.7), textcoords='data',\n                        arrowprops=dict(facecolor='black', shrink=0.2),\n                        horizontalalignment='right', verticalalignment='top',\n                       )\n        \n    \nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nax.set_title('Year-wise percentage of female\/ LGBTQA+ Kagglers', fontsize=20,pad=20)\n\ny_axis = ax.axes.get_yaxis()\ny_axis.set_visible(False)\n\nplt.tight_layout() \nplt.show()","33e6b1d5":"#Top 5 Countries where most Kagglers reside in\nvar_list=['GenderSelect','Q1','Q2','Q2']\ncountryvar_list = ['Country','Q3','Q3','Q3']\ncolors = ['#E8E7D2', '#C9BA9B', '#BDC2BB', '#FFD0A6']\n\n\nfor i in range(4):\n    x=str(i+2017)\n    df=globals()['survey_'+x+'MCQ']\n    df=pd.DataFrame(df[countryvar_list[i]].value_counts(normalize=True,ascending=False,dropna=False))\n    df.columns=[x]\n    df=df[df.index!='Other'].head(n=5)\n    df.sort_values(by=[x], inplace=True)\n    globals()['all'+x]=df   \n    \n\nfig, ax = plt.subplots(2, 2, figsize=(12,6))\nfig.suptitle('Top 5 countries where Kagglers reside in', fontsize=20, y=1.05)\n\n        \nfor i in range(4):\n    x=str(i+2017)\n    df=globals()['all'+x]\n    df[x].plot.barh(ax=ax[int(i\/2)][i%2], color=[colors[i]], legend=True, width=0.4)\n    ax[int(i\/2)][i%2].spines[\"bottom\"].set_visible(False)\n    ax[int(i\/2)][i%2].spines[\"top\"].set_visible(False)\n    ax[int(i\/2)][i%2].spines[\"right\"].set_visible(False)\n    ax[int(i\/2)][i%2].set_yticklabels(df.index, fontsize=12)\n    \n    ax[int(i\/2)][i%2].legend(loc='top', bbox_to_anchor= (0.45, 1.02), ncol=1,\n                             borderaxespad=0, frameon=True, fontsize=14)\n    \n    \n    x_axis = ax[int(i\/2)][i%2].axes.get_xaxis()\n    x_axis.set_visible(False)\n    \n    for p in  ax[int(i\/2)][i%2].patches:\n        width, height = p.get_width(), p.get_height()\n        x, y = p.get_xy() \n        #print(\"x=\",x, \", y= \", y, \" width=\", width)\n        ax[int(i\/2)][i%2].annotate(f'{width:.1%}', (width*1.05, y), fontsize=12)\n\n              \nplt.tight_layout(pad=2.0)\nplt.show()    ","92f6a64d":"#Top 5 Countries where most female\/ LGBTQA+ Kagglers reside in\nvar_list=['GenderSelect','Q1','Q2','Q2']\ncountryvar_list = ['Country','Q3','Q3','Q3']\ncolors = ['#E8E7D2', '#C9BA9B', '#BDC2BB', '#FFD0A6']\n\n\nfor i in range(4):\n    x=str(i+2017)\n    df=globals()['survey_'+x+'MCQ']\n    df=pd.DataFrame(df[df[var_list[i]]!='Male'][countryvar_list[i]].value_counts(normalize=True,ascending=False,dropna=False))\n    df.columns=[x]\n    df=df[~df.index.isin([np.nan,'Other'])].head(n=5)\n    df.sort_values(by=[x], inplace=True)\n    globals()['g'+x]=df   \n    \n    \n\nfig, ax = plt.subplots(2, 2, figsize=(12,6))\nfig.suptitle('Top 5 countries where female\/ LGBTQA+ Kagglers reside in', fontsize=20, y=1.05)\n\n        \nfor i in range(4):\n    x=str(i+2017)\n    df=globals()['g'+x]\n    df[x].plot.barh(ax=ax[int(i\/2)][i%2], color=[colors[i]], legend=True, width=0.4)\n    ax[int(i\/2)][i%2].spines[\"top\"].set_visible(False)\n    ax[int(i\/2)][i%2].spines[\"right\"].set_visible(False)\n    ax[int(i\/2)][i%2].spines[\"bottom\"].set_visible(False)\n    ax[int(i\/2)][i%2].set_yticklabels(df.index, fontsize=12)\n    \n    ax[int(i\/2)][i%2].legend(loc='top', bbox_to_anchor= (0.45, 1.02), ncol=1,\n                             borderaxespad=0, frameon=True, fontsize=12)\n    \n    \n    x_axis = ax[int(i\/2)][i%2].axes.get_xaxis()\n    x_axis.set_visible(False)\n    \n    for p in  ax[int(i\/2)][i%2].patches:\n        width, height = p.get_width(), p.get_height()\n        x, y = p.get_xy() \n        #print(\"x=\",x, \", y= \", y, \" width=\", width)\n        ax[int(i\/2)][i%2].annotate(f'{width:.1%}', (width*1.05, y), fontsize=12)\n\n              \nplt.tight_layout(pad=2.0)\nplt.show()        \n","f2ba84e8":"df_list = ['all', 'g']\ncounter=0\ntitle_list = ['%Overall', '%female\/ LGBTQA+','Overall', 'female\/ LGBTQA+']\nfor i in range (2):\n    globals()[df_list[i]]=pd.DataFrame()\n    for j in range(4):\n        x=str(j+2017)\n        df=globals()[df_list[i]+x]\n        df=df.loc[['India', 'U.S.A.']]\n        if j==0:\n            globals()[df_list[i]]=df\n        else:\n            globals()[df_list[i]]=pd.merge(globals()[df_list[i]],df,left_index=True, right_index=True)\n    \n    globals()[df_list[i]]=globals()[df_list[i]].T  \n    \n    \nfor i in range(4):\n    x=str(i+2017)\n    df1=globals()['survey_'+x+'MCQ']\n    df1=df1[df1[countryvar_list[i]].isin(['India', 'U.S.A.'])]\n    df1=pd.DataFrame(df1[countryvar_list[i]].value_counts(dropna=False))\n    df1.columns=[x]\n    df2=globals()['survey_'+x+'MCQ']\n    df2=df2[df2[countryvar_list[i]].isin(['India', 'U.S.A.'])]\n    df2=pd.DataFrame(df2[df2[var_list[i]]!='Male'][countryvar_list[i]].value_counts(dropna=False))\n    df2.columns=[x]\n    if i==0:\n        InUS=df1\n        fem=df2\n    else:\n        InUS=InUS.merge(df1,left_index=True, right_index=True)\n        fem=fem.merge(df2,left_index=True, right_index=True)\n\nInUS=InUS.T\nfem=fem.T\n\nInUS=InUS[['India', 'U.S.A.']]\nfem=fem[['India', 'U.S.A.']]\n    \nc=2\ndf_list = ['all', 'g','InUS', 'fem']\n\nfig, ax = plt.subplots(2, c, figsize=(12,8))\nfig.suptitle('Kagglers residing in India vs. U.S.A.', fontsize=20, y=1.05)\n\nfor i in range (c*2):\n    df=globals()[df_list[i]]\n    l=df.plot.line(ax=ax[int(i\/c)][i%c],legend=False, \n                   markersize=8, marker='o',\n                   linestyle='--',color=['#FF8547', '#A2B59F'])\n    \n    ax[int(i\/c)][i%c].spines['right'].set_visible(False)\n    ax[int(i\/c)][i%c].spines['top'].set_visible(False)\n    ax[int(i\/c)][i%c].spines['left'].set_visible(False)\n\n    ax[int(i\/c)][i%c].set_title(title_list[i], fontsize=14,pad=20)\n\n    \n    for x, y in zip(range(4),df.iloc[:,1].to_list()):\n        \n        if i<=1:\n            label = \"{:.0%}\".format(y)\n        else: \n            label = \"{:.0f}\".format(y)\n            \n        if i==2:\n            off=-20\n            \n            \n        ax[int(i\/c)][i%c].annotate(label,\n                                   (x,y),\n                                   textcoords=\"offset points\",\n                                   xytext=(0,10),\n                                   ha='center',\n                                   color='#808080',\n                                   fontsize=12)\n        \n    \n    for x, y in zip(range(4),df.iloc[:,0].to_list()):\n        off1=0\n        \n        if i<=1:\n            label = \"{:.0%}\".format(y)\n        else: \n            label = \"{:.0f}\".format(y)\n            \n        if i==0:\n            off=-20\n            \n        if i in ([1,3]):\n            off=10\n            \n        if i in ([2,4]):\n            off1=10\n            \n            \n        ax[int(i\/c)][i%c].annotate(label,\n                                   (x,y),\n                                   textcoords=\"offset points\",\n                                   xytext=(off1,off),\n                                   ha='center',\n                                   color='#FF8547',\n                                   fontsize=12)\n         \n\n\n    y_axis = ax[int(i\/c)][i%c].axes.get_yaxis()\n    y_axis.set_visible(False)\n    \nplt.legend(bbox_to_anchor=(-0.1, 1.05), loc='top center', frameon=True, borderaxespad=0.)\nplt.tight_layout(pad=3.0)\nplt.show()","635b1669":"#Age of Kagglers\nvar_list=['Agegroup','Q2','Q1','Q1']\ncolors = ['#E8E7D2', '#C9BA9B', '#BDC2BB', '#FFD0A6']\n\n\nfor i in range(4):\n    x=str(i+2017)\n    df=globals()['survey_'+x+'MCQ']\n    df=pd.DataFrame(df[var_list[i]].value_counts(normalize=True))\n    df.columns=[x]\n    globals()['all'+x]=df[df.index=='<=21'].append(df[df.index!='<=21'].sort_index())\n    df=globals()['all'+x]\n    if i==0:\n        all=df\n    else:\n        all=all.merge(df, left_index=True, right_index=True)    \n    \n\nfig, ax = plt.subplots(2, 2, figsize=(12,6))\nfig.suptitle('Kagglers by age group', fontsize=20, y=1.05)\n\n        \nfor i in range(4):\n    x=str(i+2017)\n    all[x].plot.bar(ax=ax[int(i\/2)][i%2], color=[colors[i]], legend=True, width=0.3)\n    ax[int(i\/2)][i%2].spines[\"top\"].set_visible(False)\n    ax[int(i\/2)][i%2].spines[\"right\"].set_visible(False)\n    ax[int(i\/2)][i%2].spines[\"left\"].set_visible(False)\n    \n    ax[int(i\/2)][i%2].legend(loc='top right', bbox_to_anchor= (0.85, 0.6), ncol=1,\n                             borderaxespad=0, frameon=False, fontsize=12)\n    \n    \n    y_axis = ax[int(i\/2)][i%2].axes.get_yaxis()\n    y_axis.set_visible(False)\n    \n    for p in  ax[int(i\/2)][i%2].patches:\n        width, height = p.get_width(), p.get_height()\n        x, y = p.get_xy() \n        ax[int(i\/2)][i%2].annotate(f'{height:.1%}', (x-.15, height+.01), fontsize=12)\n\n            \nplt.tight_layout(pad=2.0)\nplt.show()    ","27236b86":"cmap = plt.cm.Dark2\nc=5\nfig, ax = plt.subplots(2, c, figsize=(15,6))\nfig.suptitle('Kagglers by age group', fontsize=20, y=1.02)\n\nfor i in range(all.shape[0]):\n    colors = [cmap(i) for i in range(all.shape[0])]\n    all.iloc[i].T.plot.line(ax=ax[int(i\/c)][i%c], legend=True, color=colors[i],\n                           markersize=8, marker='o',linestyle='--')\n    ax[int(i\/c)][i%c].spines[\"top\"].set_visible(False)\n    ax[int(i\/c)][i%c].spines[\"right\"].set_visible(False)\n    ax[int(i\/c)][i%c].spines[\"left\"].set_visible(False)\n    ax[int(i\/c)][i%c].yaxis.set_major_formatter(ticker.PercentFormatter(decimals=1,xmax=1))\n    \n    ax[int(i\/c)][i%c].legend(loc='center', bbox_to_anchor= (0.65, 1.6), ncol=1, \n                             borderaxespad=0, frameon=True, fontsize=12)\n    \n    \n    y_axis = ax[int(i\/c)][i%c].axes.get_yaxis()\n    y_axis.set_visible(False)\n    \n    for x, y in zip(range(4),all.iloc[i].to_list()):\n        label = \"{:.0%}\".format(y)\n        ax[int(i\/c)][i%c].annotate(label,\n                                   (x,y),\n                                   textcoords=\"offset points\",\n                                   xytext=(5,10),\n                                   ha='center',\n                                   color=colors[i],\n                                   fontsize=14)\n\n            \nplt.tight_layout()\nplt.show()   ","030a0c38":"#Age of Kagglers in India\nvar_list=['Agegroup','Q2','Q1','Q1']\ncolors = ['#E8E7D2', '#C9BA9B', '#BDC2BB', '#FFD0A6']\n\n\nfor i in range(4):\n    x=str(i+2017)\n    df=globals()['survey_'+x+'MCQ']\n    df=df[df[countryvar_list[i]]=='India']\n    df=pd.DataFrame(df[var_list[i]].value_counts(normalize=True))\n    df.columns=[x]\n    globals()['all'+x]=df[df.index=='<=21'].append(df[df.index!='<=21'].sort_index())\n    df=globals()['all'+x]\n    if i==0:\n        all=df\n    else:\n        all=all.merge(df, left_index=True, right_index=True)    \n    \n\ncmap = plt.cm.Dark2\nc=5\nfig, ax = plt.subplots(2, c, figsize=(15,6))\nfig.suptitle('India - Kagglers by age group', fontsize=20, y=1.02)\n\nfor i in range(all.shape[0]):\n    colors = [cmap(i) for i in range(all.shape[0])]\n    all.iloc[i].T.plot.line(ax=ax[int(i\/c)][i%c], legend=True, color=colors[i],\n                           markersize=8, marker='o',linestyle='--')\n    ax[int(i\/c)][i%c].spines[\"top\"].set_visible(False)\n    ax[int(i\/c)][i%c].spines[\"right\"].set_visible(False)\n    ax[int(i\/c)][i%c].spines[\"left\"].set_visible(False)\n    ax[int(i\/c)][i%c].yaxis.set_major_formatter(ticker.PercentFormatter(decimals=1,xmax=1))\n    \n    ax[int(i\/c)][i%c].legend(loc='center', bbox_to_anchor= (0.65, 1.6), ncol=1, \n                             borderaxespad=0, frameon=True, fontsize=12)\n    \n    \n    y_axis = ax[int(i\/c)][i%c].axes.get_yaxis()\n    y_axis.set_visible(False)\n    \n    for x, y in zip(range(4),all.iloc[i].to_list()):\n        label = \"{:.0%}\".format(y)\n        ax[int(i\/c)][i%c].annotate(label,\n                                   (x,y),\n                                   textcoords=\"offset points\",\n                                   xytext=(5,10),\n                                   ha='center',\n                                   color=colors[i],\n                                   fontsize=14)\n\n            \nplt.tight_layout()\nplt.show()   ","74328cbb":"#Age of Kagglers in U.S.A.\nvar_list=['Agegroup','Q2','Q1','Q1']\ncolors = ['#E8E7D2', '#C9BA9B', '#BDC2BB', '#FFD0A6']\n\n\nfor i in range(4):\n    x=str(i+2017)\n    df=globals()['survey_'+x+'MCQ']\n    df=df[df[countryvar_list[i]]=='U.S.A.']\n    df=pd.DataFrame(df[var_list[i]].value_counts(normalize=True))\n    df.columns=[x]\n    globals()['all'+x]=df[df.index=='<=21'].append(df[df.index!='<=21'].sort_index())\n    df=globals()['all'+x]\n    if i==0:\n        all=df\n    else:\n        all=all.merge(df, left_index=True, right_index=True)    \n    \n\ncmap = plt.cm.Dark2\nc=5\nfig, ax = plt.subplots(2, c, figsize=(15,6))\nfig.suptitle('U.S.A. - Kagglers by age group', fontsize=20, y=1.02)\n\nfor i in range(all.shape[0]):\n    colors = [cmap(i) for i in range(all.shape[0])]\n    all.iloc[i].T.plot.line(ax=ax[int(i\/c)][i%c], legend=True, color=colors[i],\n                           markersize=8, marker='o',linestyle='--')\n    ax[int(i\/c)][i%c].spines[\"top\"].set_visible(False)\n    ax[int(i\/c)][i%c].spines[\"right\"].set_visible(False)\n    ax[int(i\/c)][i%c].spines[\"left\"].set_visible(False)\n    ax[int(i\/c)][i%c].yaxis.set_major_formatter(ticker.PercentFormatter(decimals=1,xmax=1))\n    \n    ax[int(i\/c)][i%c].legend(loc='center', bbox_to_anchor= (0.65, 1.6), ncol=1, \n                             borderaxespad=0, frameon=True, fontsize=12)\n    \n    \n    y_axis = ax[int(i\/c)][i%c].axes.get_yaxis()\n    y_axis.set_visible(False)\n    \n    for x, y in zip(range(4),all.iloc[i].to_list()):\n        label = \"{:.0%}\".format(y)\n        ax[int(i\/c)][i%c].annotate(label,\n                                   (x,y),\n                                   textcoords=\"offset points\",\n                                   xytext=(5,10),\n                                   ha='center',\n                                   color=colors[i],\n                                   fontsize=14)\n\n            \nplt.tight_layout()\nplt.show()   ","775bb4ac":"#Formal education\nvar_list=['FormalEducation','Q4','Q4','Q4']\ncolors = ['#E8E7D2', '#C9BA9B', '#BDC2BB', '#FFD0A6']\n\n\nfor i in range(4):\n    x=str(i+2017)\n    df=globals()['survey_'+x+'MCQ'] \n    df=pd.DataFrame(df[qualvar_list[i]].value_counts(normalize=True,ascending=False,dropna=False))\n    df.columns=[x]\n    df.sort_values(by=[x], inplace=True)\n    globals()['all'+x]=df   \n    \n\nfig, ax = plt.subplots(2, 2, figsize=(12,6))\nfig.suptitle('Formal education level of Kagglers', fontsize=20, y=1.05)\n\n        \nfor i in range(4):\n    x=str(i+2017)\n    df=globals()['all'+x]\n    df[x].plot.barh(ax=ax[int(i\/2)][i%2], color=[colors[i]], legend=True, width=0.4)\n    ax[int(i\/2)][i%2].spines[\"bottom\"].set_visible(False)\n    ax[int(i\/2)][i%2].spines[\"top\"].set_visible(False)\n    ax[int(i\/2)][i%2].spines[\"right\"].set_visible(False)\n    ax[int(i\/2)][i%2].set_yticklabels(df.index, fontsize=12)\n    \n    ax[int(i\/2)][i%2].legend(loc='top', bbox_to_anchor= (0.45, 1.02), ncol=1,\n                             borderaxespad=0, frameon=True, fontsize=14)\n    \n    \n    x_axis = ax[int(i\/2)][i%2].axes.get_xaxis()\n    x_axis.set_visible(False)\n    \n    for p in  ax[int(i\/2)][i%2].patches:\n        width, height = p.get_width(), p.get_height()\n        x, y = p.get_xy() \n        #print(\"x=\",x, \", y= \", y, \" width=\", width)\n        ax[int(i\/2)][i%2].annotate(f'{width:.1%}', (width*1.05, y), fontsize=12)\n\n\nplt.tight_layout(pad=2.0)\nplt.show()    \n","4ecf86ba":"#Formal education\ngendvar_list=['GenderSelect','Q1','Q2','Q2']\nqualvar_list=['FormalEducation','Q4','Q4','Q4']\ncolors = ['#A2B59F', '#FF8547']\ntitle_list = ['Overall', 'female\/ LGBTQA+']\n\n\nfor i in range(4):\n    x=str(i+2017)\n    df=globals()['survey_'+x+'MCQ'] \n    df1=df[df[gendvar_list[i]]!='Male']\n    df=pd.DataFrame(df[qualvar_list[i]].value_counts(ascending=False,dropna=False))\n    df.columns=[x]\n    df1=pd.DataFrame(df1[qualvar_list[i]].value_counts(ascending=False,dropna=False))\n    df1.columns=[x]\n    \n    if i==0:\n        all=df\n        fem=df1\n    else:\n        all=all.merge(df, left_index=True, right_index=True)\n        fem=fem.merge(df1, left_index=True, right_index=True)\n        \nall=all.T\nfem=fem.T\nall['All']=all.sum(axis=1)\nfem['All']=fem.sum(axis=1)\n\n#all['Higher degree']=(all['Masters']+all['Doctoral']+all['Professional'])\/all['All']\nall['Bachelors\/ No degree']=(all['Bachelors']+all['College dropout']+all['High School']+all['NA'])\/all['All']\n\n#fem['Higher degree']=(fem['Masters']+fem['Doctoral']+fem['Professional'])\/fem['All']\nfem['Bachelors\/ No degree']=(fem['Bachelors']+fem['College dropout']+fem['High School']+fem['NA'])\/fem['All']\n\n\nall=all[['Bachelors\/ No degree']]\nfem=fem[['Bachelors\/ No degree']]\n    \ndf_list = ['all', 'fem']\n\nfig, ax = plt.subplots(len(df_list), 1, figsize=(12,8))\nfig.suptitle('%Kagglers who either have a Bachelors degree or no degree at all', fontsize=20, y=1.05)\n \n\nfor i in range(len(df_list)):\n    df=globals()[df_list[i]]\n    l=df.plot.line(ax=ax[i],legend=False, \n                   markersize=8, marker='o',\n                   linestyle='--',color=colors)\n    \n    ax[i].spines['right'].set_visible(False)\n    ax[i].spines['top'].set_visible(False)\n    ax[i].spines['left'].set_visible(False)\n\n    ax[i].set_title(title_list[i], fontsize=16,pad=25)\n   \n\n    y_axis = ax[i].axes.get_yaxis()\n    y_axis.set_visible(True)\n    y_axis.set_major_formatter(ticker.PercentFormatter(1.0, decimals=0))\n    \n    for j in range(1):\n        for x, y in zip(range(4),df.T.iloc[j].to_list()):\n            label = \"{:.0%}\".format(y)\n            ax[i].annotate(label,\n                                       (x,y),\n                                       textcoords=\"offset points\",\n                                       xytext=(5,10),\n                                       ha='center',\n                                       color=colors[j],\n                                       fontsize=14)\n    \n    \nplt.legend(bbox_to_anchor=(0.2, 1.25), loc='top center', frameon=True, borderaxespad=0., prop={'size': 14})\nplt.tight_layout(pad=3.0)\nplt.show()  \n","d3d63a66":"#Formal education\ngendvar_list=['GenderSelect','Q1','Q2','Q2']\nqualvar_list=['FormalEducation','Q4','Q4','Q4']\ncountryvar_list = ['Country','Q3','Q3','Q3']\ncolors = ['#A2B59F', '#FF8547']\nclist=['India','U.S.A.']\nall=pd.DataFrame()\nfem=all\n\nfor i in range(4):\n    x=str(i+2017)\n    df=globals()['survey_'+x+'MCQ'] \n    df1=df[df[gendvar_list[i]]!='Male']\n    df=df[df[countryvar_list[i]].isin(clist)]\n    df1=df1[df1[countryvar_list[i]].isin(clist)]\n    df=pd.DataFrame(df.groupby(countryvar_list[i])[qualvar_list[i]].value_counts(normalize=True,ascending=False,dropna=False))\n    df=df.unstack(level=0)\n    df=df.droplevel(None, axis=1)\n    df.index.name=None\n    df.columns.name=None\n    df.columns=['India','U.S.A.']\n    df=df.loc[~df.index.isin(['Masters','Doctoral','Professional'])]\n    df.loc[x]=df.sum()\n    df=df.loc[df.index.isin([x])]   \n    all=all.append(df)\n    \n    df1=pd.DataFrame(df1.groupby(countryvar_list[i])[qualvar_list[i]].value_counts(normalize=True,ascending=False,dropna=False))\n    df1=df1.unstack(level=0)\n    df1=df1.droplevel(None, axis=1)\n    df1.index.name=None\n    df1.columns.name=None\n    df1.columns=['India','U.S.A.']\n    df1=df1.loc[~df1.index.isin(['Masters','Doctoral','Professional'])]\n    df1.loc[x]=df1.sum()\n    df1=df1.loc[df1.index.isin([x])]   \n    fem=fem.append(df1)\n\ndf_list=['all','fem']\nfig, ax = plt.subplots(1, 2, figsize=(12,4))\nfig.suptitle('U.S.A. vs. India - %Kagglers with Bachelors\/ No degree', fontsize=20, y=1.05)\n \n\nfor i in range(len(df_list)):\n    df=globals()[df_list[i]]\n    l=df.plot.line(ax=ax[i],legend=False, \n                   markersize=8, marker='o',\n                   linestyle='--',color=colors)\n    \n    ax[i].spines['right'].set_visible(False)\n    ax[i].spines['top'].set_visible(False)\n    ax[i].spines['left'].set_visible(False)\n\n    ax[i].set_title(title_list[i], fontsize=16,pad=25)\n   \n\n    y_axis = ax[i].axes.get_yaxis()\n    y_axis.set_visible(True)\n    y_axis.set_major_formatter(ticker.PercentFormatter(1.0, decimals=0))\n    \n    for j in range(2):\n        for x, y in zip(range(4),df.T.iloc[j].to_list()):\n            label = \"{:.0%}\".format(y)\n            ax[i].annotate(label,\n                                       (x,y),\n                                       textcoords=\"offset points\",\n                                       xytext=(5,10),\n                                       ha='center',\n                                       color=colors[j],\n                                       fontsize=14)\n    \n    \nplt.legend(bbox_to_anchor=(-0.25, 0.75), loc='top center', frameon=True, borderaxespad=0., prop={'size': 14})\nplt.tight_layout(pad=3.0)\nplt.show()  \n","3ac82dbc":"survey_2017MCQ = pd.read_csv('\/kaggle\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv',encoding='latin1')\nsurvey_2017MCQ['CompensationAmount']=pd.to_numeric(survey_2017MCQ['CompensationAmount'].str.replace(',',''), errors=\"coerce\")\nval=['NA','I do not wish to disclose my approximate yearly compensation']\ncomp_count=pd.DataFrame()\ncomp_count.loc[2017,'count']=survey_2017MCQ[~survey_2017MCQ.CompensationAmount.isnull()].shape[0]\/ survey_2017MCQ.shape[0]\ncomp_count.loc[2018,'count']=survey_2018MCQ[~survey_2018MCQ.Q9.isin(val)].shape[0]\/survey_2018MCQ.shape[0]\ncomp_count.loc[2019,'count']=survey_2019MCQ[~survey_2019MCQ.Q10.isin(val)].shape[0]\/survey_2019MCQ.shape[0]\ncomp_count.loc[2020,'count']=survey_2020MCQ[~survey_2020MCQ.Q24.isin(val)].shape[0]\/survey_2020MCQ.shape[0]\n\nfig, ax = plt.subplots(1, 1, figsize=(7,4))\nfig.suptitle('%Kagglers who disclosed their compensation data', fontsize=20, y=1.05)\n\ncomp_count.plot.bar(ax=ax, width=0.3, color=colors[0], legend=False)\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\n    \n    \ny_axis = ax.axes.get_yaxis()\ny_axis.set_visible(False)\n    \nfor p in  ax.patches:\n        width, height = p.get_width(), p.get_height()\n        x, y = p.get_xy() \n        ax.annotate(f'{height:0.0%}', (x+.15, height+.02), fontsize=12, ha='center',weight='normal', size='large')\n            \nplt.tight_layout(pad=2.0)\nplt.show()","d4ea0242":"comp=survey_2020MCQ[~survey_2020MCQ.Q24.isin(['NA'])][['Q2','Q3','Q24']]\ncomp=comp[comp.Q3.isin(['India','U.S.A.'])]\nuser_count=pd.DataFrame(comp.groupby(['Q3','Q24'])['Q24'].count())\nuser_count.columns=['Count']\nuser_count=user_count.unstack(level=0)\nuser_count.columns=['India','U.S.A.']\nuser_count[['B1','B2']] = user_count.index.to_series().str.split('-',expand=True)\n\nuser_count['B1'] = user_count['B1'].str.replace('$','')\nuser_count['B1'] = user_count['B1'].str.replace(',','')\nuser_count['B1'] = user_count['B1'].str.replace('>','')\nuser_count['B1'] = user_count['B1'].str.replace('NA','')\nuser_count.B1=pd.to_numeric(user_count.B1, errors=\"coerce\")\n\nuser_count.sort_values(by=['B1'], inplace=True)\nuser_count.drop(columns=['B1','B2'], inplace=True)\nuser_count.index.name=None\n\nfig, ax = plt.subplots(2, 1, figsize=(12,8))\nfig.suptitle('Number of Kagglers by $compensation, 2020', fontsize=20, y=1.0)\n\n    \nfor i in range(2):\n    user_count.iloc[:,i].plot.bar(ax=ax[i], width=0.3, color=colors[i])\n    ax[i].spines[\"top\"].set_visible(False)\n    ax[i].spines[\"right\"].set_visible(False)\n    ax[i].spines[\"left\"].set_visible(False)\n    \n    \n    y_axis = ax[i].axes.get_yaxis()\n    y_axis.set_visible(False)\n    \n    for p in  ax[i].patches:\n        width, height = p.get_width(), p.get_height()\n        x, y = p.get_xy() \n        ax[i].annotate(height, (x+.15, height+10), fontsize=12, ha='center',weight='normal', size='large')\n            \nplt.tight_layout(pad=2.0)\nplt.show()    \n","dcafa3a2":"#Top 5 recommended 1st lanugage by Kagglers:\nvar_list=['GenderSelect','Q1','Q2','Q2']\ncountryvar_list = ['Country','Q3','Q3','Q3']\nprog_list = ['LanguageRecommendationSelect', 'Q18','Q19','Q8']\ncolors = ['#E8E7D2', '#C9BA9B', '#BDC2BB', '#FFD0A6']\n\n\nfor i in range(4):\n    x=str(i+2017)\n    df=globals()['survey_'+x+'MCQ']\n    df=df[~df[prog_list[i]].isin(['NA','nan',np.nan,'None'])]\n    df=pd.DataFrame(df[prog_list[i]].value_counts(normalize=True,ascending=False,dropna=False))\n    df.columns=[x]\n    df.loc['C\/C++\/C#']=df[df.index.str.contains('C')].sum()\n    df=df[~df.index.str.contains('C')].append(df[df.index=='C\/C++\/C#'])\n    df.sort_values(by=[x], inplace=True)\n    globals()['all'+x]=df.tail(n=5)   \n    \n\nfig, ax = plt.subplots(2, 2, figsize=(12,6))\nfig.suptitle('Top 5 - Recommended first language to learn', fontsize=20, y=1.05)\n\n        \nfor i in range(4):\n    x=str(i+2017)\n    df=globals()['all'+x]\n    df[x].plot.barh(ax=ax[int(i\/2)][i%2], color=[colors[i]], legend=True, width=0.4)\n    ax[int(i\/2)][i%2].spines[\"bottom\"].set_visible(False)\n    ax[int(i\/2)][i%2].spines[\"top\"].set_visible(False)\n    ax[int(i\/2)][i%2].spines[\"right\"].set_visible(False)\n    ax[int(i\/2)][i%2].set_yticklabels(df.index, fontsize=12)\n    \n    ax[int(i\/2)][i%2].legend(loc='top', bbox_to_anchor= (0.45, 1.02), ncol=1,\n                             borderaxespad=0, frameon=True, fontsize=14)\n    \n    \n    x_axis = ax[int(i\/2)][i%2].axes.get_xaxis()\n    x_axis.set_visible(False)\n    \n    for p in  ax[int(i\/2)][i%2].patches:\n        width, height = p.get_width(), p.get_height()\n        x, y = p.get_xy() \n        #print(\"x=\",x, \", y= \", y, \" width=\", width)\n        ax[int(i\/2)][i%2].annotate(f'{width:.1%}', (width*1.05, y), fontsize=12)\n\n              \nplt.tight_layout(pad=2.0)\nplt.show()    ","1a947062":"Almost half of all female\/ LGBTQA+ Kagglers (45% to be accurate), live in these two countries, India, and U.S.A. ","e0f6a555":"However compared to these huge numbers, the number of users who participated in the survey in 2020 seems too tiny at ~20k, and indicates that only a tiny fraction of these ~6M registered users might be  actively involved in Kaggling. To confirm the same, let's chart out the number of tiered users. Turns out that as suspected, **less than 2% of all registered users, i.e. 102419 users on Kaggle are tiered** (Performance tier 1-4, 4 being the best tier).","06b3edbc":"2. **How is the gender-wise development in the community?** \\\nCharting the count of survey participants over the years and dissecting the same by gender, we find that while the total number of participants has remained almost unchanged from last year, the same holds true as far as male and LGBTQA+ (including not specified) participants are concerned, <u>**there is a sharp increase in the number of female participants in the Kaggle survey in 2020.**<\/u>","013cae41":"* A closer look at the data reveals that the user demographics in India and U.S.A are starkly different.\n\n* Indian users are predominantly below 30 years (~80%); the age group with highest number of users is <=21 years (35% users)\n\n* Less than 5% users are aged above 45.","1e21bbec":"The percentage data makes this picture clearer. In 2020,female particpants in the survey constituted ~20% of the total number of participants. This is a sharp increase from the ~16% level in the past three years (2017-2019). \n\n<u>**Takeaway: Female Kagglers are on the rise.**<\/u>","ea1bc765":"Looking at the actual numbers of participants in India and U.S.A, we find that while Indians are on the rise on Kaggle, Americans are receding!\n\n**<u>Takeaways: <\/u>**\n1. **1-in-4 Kagglers is an Indian and 1-in-3 female\/ LGBTQA+ kagglers is an Indian.**\n2. **The Indian cohort expanded in each of the past 3 years (both overall numbers and the number of female\/ LGBTQA+ Kagglers.**\n3. **The numbers of Kagglers, overall and female\/LGBTQA+, residing in U.S.A. have been shrinking in absolute numbers!**","395d037f":"3. **Where do the Kagglers reside?** \\\n**40% of the community is concentrated in just the top 2 countries - India and U.S.A.** And it has been as such since 2017 itself. However since 2019, India has overtaken U.S.A. to become the country with largest number of Kagglers. Given that India houses more than 1 in 6 person around the world (source: [Worldometer data](https:\/\/www.worldometers.info\/world-population\/#top20)), this seems like a natural progression.\n","0936a693":"4. **How old are the Kagglers?**\\\nAge-wise (25-29) year old users continue to dominate Kaggle, though other younger Kagglers are fast catching up. ","d28a2acb":"Since the pay scales vary vastly depending on the country of residence, it is imperative that we dissect the data by country.\n\nWe focus on our top 2 countries (i.e. countries where highest number of Kagglers reside) - India and U.S.A.\n","bc4fbae6":"The USD compensation data is also in line with the demographics of the users in India and U.S.A. respectively, along with the purchasing power parity of these countries.","4f56c6c8":"Similarly, the number of active users in a year i.e. users who made at least one submission that year, are consistently low. Less than 80k users have made any submission on Kaggle in 2020 so far. So turns out that every year **at least 1 in 5 of the active users fill the surveys**.\\\n\\\n<u>**Takeaway: The survey data is large enough  to be representative of the active Kaggler community.**<\/u>","f024fe11":"![Behind the codes](https:\/\/imittech.com\/wp-content\/uploads\/2019\/07\/product-page.jpg)","0781f366":"* Majority of the Kagglers in India only have a Bachelor's degree or no degree at all.\n* On the contrary, majority of the Kagglers in U.S.A have a higher degree (master's, doctoral or professional).\n\n<u>**Takeaway**<\/u>\n\nA lot of very young Indians are getting involved in Kaggling. Given their age, they are mostly students\/ youngsters with either no degree yet, or with Bachelor's degree only. Given that these young Indians constitute a significantly large portion of the user base, their demographics dominate the survey data on the whole. ","4f7bdcad":"<u>**Takeaways:**<\/u>\n1. Users with higher degrees dominate Kaggle for the time being (more than half of the users have doctoral, master's, or professional degrees).\n2. Users with only a bachelor's degree or no degree at all are fast catching up (reaching 50%).\n3. The trend is similar across genders.\n\n<u> *These observations are in line with the previous observation that every year younger users are increasingly getting into Kaggling.*<\/u>","f88121c8":"* Users below 21 years grew most consistently.\n* The user base in the 22-24 year old age bracket have grown considerably as well - from 9% in 2017 to 19% in 2020.","537b947b":"* In contrast, only 5% users in U.S.A are aged <=21 years. \n* And the users are much more uniformly distributed across different age groups.\n* A significant 8% of the users are ages >=60 years, and the number of users in the older age groups are also increasing.","5a4b6378":"# Behind The Screens\n\nWhether you are here just to check out what Kaggle is all about or you have been toiling hard on getting closer to the much coveted Kaggle Grandmaster title, one thing that you must be interested in, is the community - who are the Kagglers? Are we a growing community? Is it only a bunch of boys in their hoodies, perhaps mostly college droupouts sitting behind their screens in the U.S.? Or are we much more diversified. Well, it's not that hard to find out, when you have such an involved community, who care enough to share their data through the Kaggle annual survey. So, what are we waiting for. Let's dig right in!\n\n<font color='green'><u> **I am just a beginner. So your upvote especially means a lot! Please do upvote!** <\/u><\/font> \ud83d\ude0a\ud83d\ude4f\n\n\n1. **How big is our survey sample?** \\\nBefore dissecting the survey data, it is important to ensure that the survey data is large enough to be representative of the population. The 'meta-kaggle' data comes handy here. As expected the Kaggle 'Users' data shows exponetial growth in new user registration since its inception in 2010. Starting with a humble 4558 users, today kaggle userbase is reaching a humongous ~6 million! Out of these ~6M users, more than a third registered in 2020 itself. ","8393c60c":"6. **How much do Kagglers make in their day jobs?** \\\nGiven the growing number of younger users, with bachelor's degree or lower, it is expected that the compensation earned by the pool of Kagglers in their daily jobs would not see much rise. But before even digging into the data, it is important to check the data availability over the years. \n\n - Percentage of users who disclosed their salary in 2017 is pretty low (only 27%).\n - In 2018, this this percentage went up sharply to 65%\n - The percentages in 2019 and 2020 are a bit lower but still consistently above 50%.\n\n<u> *Given the low data availability in 2017, we focus on 2018-20 only as far as compensation analysis is concerned.* <\/u>","b8a7d443":"7. **Which is the most recommended first programming language for data scientists?** \\\nNo surprises here! \n - Python has consistently topped the list and it has only gained in popularity over the year. This year, >80% users recommending it. \n - The pick up in Python's popularity comes at the expense of the decline of that of R. \n - The list of top 5 recommended programming languages always had the same 5 languages, and in the same sequence: Python, R, SQL, C\/C++\/C#, and Matlab","61f24361":"5. **How educated are the Kagglers (formally) ?**\\\nWhile people with masters degree consistently dominated the Kaggling community, the number of users with bachelors degree has started to catch up. There is a sharp drop in the percentage of docatoral candidates this year. Very few users (< 7%) possess no formal degree at all and about 3 users have a professional degree."}}