{"cell_type":{"b5b42928":"code","b733f1fb":"code","5f165254":"code","611bef79":"code","4863d0f0":"code","1a7f86cc":"code","bc7313ab":"code","95734114":"code","cd7bee93":"code","7a560d9b":"code","e57a15ac":"code","cd7ee59f":"code","536c41d8":"code","15bb7b2e":"code","9b825841":"code","5c47706b":"code","6630c464":"code","7a8325c8":"code","423552f7":"code","a6a6611e":"code","24177d5d":"code","734eac55":"code","625ed864":"markdown","93d15552":"markdown","56dbbfd2":"markdown"},"source":{"b5b42928":"import numpy as np\nimport pandas as pd\nimport os\nimport librosa,librosa.display\nfrom tqdm.notebook import tqdm\nimport warnings\nwarnings.filterwarnings('ignore')\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' ","b733f1fb":"path='..\/input\/free-spoken-digits\/free-spoken-digit-dataset-master\/recordings\/0_george_0.wav'\nraw_data,framerate=librosa.load(path)\nraw_data,framerate","5f165254":"data=pd.DataFrame(columns=['raw_data','duration','digit'])\ndir_path='..\/input\/free-spoken-digits\/free-spoken-digit-dataset-master\/recordings\/'\nfor i in tqdm(os.listdir(dir_path)):\n        raw_data,frame_rate=librosa.load(dir_path+i)\n        duration=librosa.get_duration(raw_data,frame_rate)\n        data.loc[len(data.index)]=[raw_data,duration,i.split('_')[0]] # We are appending label as it in file name","611bef79":"data.head()","4863d0f0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(data[['raw_data','duration']],data['digit'], test_size=0.3, random_state=45,stratify=data['digit'])","1a7f86cc":"for i in range(0,101,10):\n    print(i,' th percentile is ',np.percentile([len(i) for i in X_train['raw_data']],i))","bc7313ab":"for i in range(90,101,1):\n    print(i,' th percentile is ',np.percentile([len(i) for i in X_train['raw_data']],i))","95734114":"max_length=20366","cd7bee93":"import tensorflow as tf\nX_train_pad=tf.keras.preprocessing.sequence.pad_sequences(X_train['raw_data'],maxlen=max_length, dtype='float32')\nX_test_pad=tf.keras.preprocessing.sequence.pad_sequences(X_test['raw_data'],maxlen=max_length, dtype='float32')\nX_train_mask=np.where(X_train_pad>0.0,True,False)\nX_test_mask=np.where(X_test_pad>0.0,True,False)","7a560d9b":"from tensorflow.keras.layers import Input, LSTM, Dense\nfrom tensorflow.keras.models import Model\nfrom sklearn.metrics import f1_score","e57a15ac":"def convert_to_spectrogram(raw_data):\n    '''converting to spectrogram'''\n    spect = librosa.feature.melspectrogram(y=raw_data, n_mels=64) # n_mels as output shape\n    mel_spect = librosa.power_to_db(S=spect, ref=np.max)\n    return mel_spect","cd7ee59f":"X_train_spectrogram=np.array([convert_to_spectrogram(np.array([float(i) for i in X_train_pad[k] ])) for k in range(len(X_train_pad)) ])\nX_test_spectrogram=np.array([convert_to_spectrogram(np.array([float(i) for i in X_test_pad[k] ])) for k in range(len(X_test_pad)) ])","536c41d8":"X_train_spectrogram.shape","15bb7b2e":"input_layer=Input(shape=(64,40), dtype=np.float32,name='input_layer')\nlstm=LSTM(500,name='lstm_layer',return_sequences=True)(input_layer)\nd1=Dense(120,activation='relu',name='dense1')(tf.math.reduce_mean(lstm, 2))\nd2=Dense(60,activation='relu',name='dense2')(d1)\nd3=Dense(10,activation='softmax',name='dense3')(d2)","9b825841":"model = Model(inputs=input_layer, outputs=d3)\nmodel.summary()","5c47706b":"def cal_f1(y_true,y_pred):\n    return f1_score(y_true,y_pred,average='micro')\ndef micro_f1(y_true,y_prob):\n    y_pred=tf.math.argmax(y_prob,axis=1)\n    return tf.py_function(cal_f1,(y_true,y_pred),tf.double)","6630c464":"class LossHistory(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if logs.get('val_micro_f1', -1)>0.97:\n            self.model.stop_training=True\n\nloss_history=LossHistory()\n\nfilepath=\"model_save\/weights-{epoch:02d}-{micro_f1:.4f}-{val_micro_f1:.4f}.hdf5\"\ncheckpoint = tf.keras.callbacks.ModelCheckpoint(filepath=filepath, monitor='val_micro_f1',  verbose=1, save_best_only=True, mode='max')","7a8325c8":"opt= tf.keras.optimizers.Adam(learning_rate=0.001)\nmodel.compile(optimizer=opt, loss='sparse_categorical_crossentropy' ,metrics=['accuracy',micro_f1])","423552f7":"tf.keras.backend.clear_session()\nmodel.fit(X_train_spectrogram,y_train.astype('int')\\\n           ,validation_data=(X_test_spectrogram,y_test.astype('int'))\\\n           ,batch_size=32,epochs=400\\\n           ,callbacks=[loss_history,checkpoint])","a6a6611e":"opt_res=os.listdir(\"model_save\/\")","24177d5d":"result=pd.DataFrame()\nepoch=[]\nf1=[]\nval_f1=[]\nfor i in opt_res:    \n    epoch.append(i.split('-')[1])\n    f1.append(i.split('-')[2])\n    val_f1.append(i.split('-')[3][:6])\nresult['epoch']=epoch\nresult['f1']=f1\nresult['val_f1']=val_f1\nvalues=result[result.epoch==str(result.epoch.astype('int').max())]","734eac55":"print(\"We have found optimum result at\\nEpoch: \",values.iloc[0].epoch,\"\\nTrain F1 score: \",values.iloc[0].f1,\"\\nTest F1 score: \",values.iloc[0].val_f1)","625ed864":"### We will be reading sound file with the help of librosa library which will convert sound file into time series y, represented as a one-dimensional NumPy floating point array.","93d15552":"### Fourier Tranformation is computed on overlapping windowed segments of the signal, and we get what is called the spectrogram\n### Hence we are converting our raw_data ie time series to spectogram\n### Mel spectrogram is a spectrogram where the frequencies are converted to the mel scale","56dbbfd2":"### We are padding the sequence as we going to use LSTM"}}