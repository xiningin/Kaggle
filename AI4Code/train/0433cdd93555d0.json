{"cell_type":{"ad3a4167":"code","1c16a648":"code","4efe25d5":"code","00eeeb1b":"code","70b3e599":"code","315e1ad0":"code","285e6df4":"code","f86efd90":"code","ae871596":"code","3e0dc4f4":"markdown","78312f9f":"markdown","1acb05e9":"markdown","34db05d2":"markdown","f55dc150":"markdown"},"source":{"ad3a4167":"import pandas as pd","1c16a648":"flowers = pd.DataFrame({\n    'color' : ['red', 'green', 'red', 'green', 'red', 'green', 'red', 'green', 'blue', 'blue'],\n    'height': [4,9,4,8,4,7,4,7.5,20,19],\n    'petals': [3,9,1,8,1,10,2,8,50,47],\n    'days'  : [6,16,7,15,8,17,5,12,40,45]\n})\nflowers","4efe25d5":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(flowers.drop('days', axis=1), flowers['days'],\n                                                    test_size=0.2, random_state=40\n)","00eeeb1b":"X_train","70b3e599":"\nX_train.info()","315e1ad0":"\nX_train['color'].unique()","285e6df4":"# Creating Dummy Variables For Train Set\npd.get_dummies(X_train).join(X_train['color'])","f86efd90":"X_test","ae871596":"pd.get_dummies(X_test)","3e0dc4f4":"As you can see the no of columns in Training Set is not equal to Testing set \nthis will create data mismatch that is not good for Machine Learning Model.\nIn train set we have three color categories but in test set we only get two catgeories that will decrease the Model Accuracy.\n\nIt is better to use OneHot Encoding from sckitlearn.preprocessing","78312f9f":"### I hope you enjoyed it and see you in the next one! Please Upvote and Share","1acb05e9":"## Note\npd.get_dummies() is, in a way, static in its behavior. It cannot \"learn\" characteristics fro the training data and hence is unable to propagate its findings onto the testing data (which sklearn actually masters at btw).","34db05d2":"We'll go over the concept of pandas' offering of creating dummy variables for encoding categorical columns.\n\nMore specifically, we'll look at why pd.get_dummies() is not at all a good option for creating dummy variables when it comes to integrating the work into a machine learning workflow.\n\npd.get_dummies() is, in a way, static in its behavior. It cannot \"learn\" characteristics fro the training data and hence is unable to propagate its findings onto the testing data (which sklearn actually masters at btw).\n\nThe only advantages of pd.get_dummies() are its easy interpretability, and the fact that it returns a pandas dataframe with clean column names as well.","f55dc150":"# Why NEVER use pandas' get dummies for creating dummy variables"}}