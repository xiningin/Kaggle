{"cell_type":{"560b9fa3":"code","724188e1":"code","9743c3e2":"code","902f40c5":"code","9ab4c118":"code","8c51ea18":"code","87d65eff":"code","d3ee2f92":"code","8307c3bc":"code","ee2961a7":"code","dcb7a4d1":"code","f2ded22b":"code","b7745da0":"code","c3079b12":"code","7abb3703":"code","6ca5eb74":"code","bfc7c8a7":"code","b8ffe44d":"code","5308dc45":"markdown","e752319f":"markdown","eb02c890":"markdown","02dab56d":"markdown","9693b047":"markdown","1fb289df":"markdown","272bf985":"markdown","f66b0b41":"markdown","fa171d15":"markdown","152876f2":"markdown","06f617a5":"markdown","dace07cc":"markdown","7dfee599":"markdown","7f33523a":"markdown","e60a1a7f":"markdown","faf34e44":"markdown","54a6b1f7":"markdown","6f886443":"markdown","3deda304":"markdown","0ce285e1":"markdown"},"source":{"560b9fa3":"!pip install scikit-learn==0.24.2","724188e1":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import RepeatedStratifiedKFold, RandomizedSearchCV\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.utils.fixes import loguniform\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay","9743c3e2":"RANDOM_STATE = 7\nGRID_SEARCH_ITER = 30","902f40c5":"df = pd.read_csv(r'..\/input\/cuneiform-language-identification\/train.csv')\ndf.head()","9ab4c118":"le = LabelEncoder()\ndf['enc_lang'] = le.fit_transform(df['lang'])\ndf[['lang', 'enc_lang']].sample(10)","8c51ea18":"rskf = RepeatedStratifiedKFold(n_splits = 5, n_repeats = 2, random_state = RANDOM_STATE)\nrskf","87d65eff":"vectorizer = CountVectorizer(lowercase = False, analyzer = 'char')\nvectorizer","d3ee2f92":"scaler = StandardScaler(with_mean = False)\nscaler","8307c3bc":"logreg = LogisticRegression(solver = 'saga', random_state = RANDOM_STATE)\nforest = RandomForestClassifier(random_state = RANDOM_STATE)\nvote_clf = VotingClassifier(estimators = [('logreg', logreg), ('forest', forest)], voting = \"soft\")\nvote_clf","ee2961a7":"pipeline = Pipeline([\n    ('vectorizer', vectorizer),\n    ('scaler', scaler),\n    ('vote_clf', vote_clf)\n])\n\npipeline","dcb7a4d1":"pipeline.get_params().keys()","f2ded22b":"params = {\n    'vectorizer__binary': [True, False],\n    'vote_clf__weights': [[1, 1], [2, 1], [1, 2]],\n    'vote_clf__logreg__C': loguniform(1e0, 1e3),\n    'vote_clf__logreg__class_weight': ['balanced', None],\n    'vote_clf__logreg__max_iter': [200, 300],\n    'vote_clf__forest__n_estimators': [50, 100, 150, 200],\n    'vote_clf__forest__criterion': ['gini', 'entropy'],\n    'vote_clf__forest__max_depth': [20, 40, 60],\n    'vote_clf__forest__max_features': ['sqrt', 'log2'],\n    'vote_clf__forest__class_weight': ['balanced', 'balanced_subsample', None],\n    'vote_clf__forest__max_samples': [0.4, 0.6, 0.8]\n}\n\nscorers = {'Weighted ROC-AUC': 'roc_auc_ovr_weighted', 'Accuracy': 'accuracy', 'Balanced Accuracy': 'balanced_accuracy'}\n\nmodel = RandomizedSearchCV(\n    pipeline, \n    params, \n    n_iter = GRID_SEARCH_ITER, \n    cv = rskf, \n    n_jobs = 4, \n    scoring = scorers, \n    refit = 'Balanced Accuracy',\n    random_state = RANDOM_STATE, \n    verbose = 1\n)\n\nmodel","b7745da0":"%%time\n\nmodel.fit(df['cuneiform'], df['enc_lang'])\n\nresults = pd.DataFrame(model.cv_results_).sort_values('mean_test_Balanced Accuracy', ascending = False)\nresults.head()","c3079b12":"df['pred'] = model.predict(df['cuneiform'])\ndf.sample(5)","7abb3703":"model.best_params_","6ca5eb74":"model.best_score_","bfc7c8a7":"_, ax = plt.subplots(figsize = (16, 12))\n\nConfusionMatrixDisplay(\n    confusion_matrix(df['enc_lang'], df['pred'], labels = range(len(le.classes_))), display_labels = le.classes_\n).plot(ax = ax, xticks_rotation = 'vertical')\n                        \nplt.savefig('confusion_matrix.jpg', dpi = 200, bbox_inches = 'tight')\nplt.show()","b8ffe44d":"results.to_csv(\"grid_cv_results.csv\", index = False)\ndf.to_csv(\"predictions.csv\", index = False)","5308dc45":"### Hyperparameter tuning","e752319f":"# Cuneiform Language Detection\n\n## Model used\n- Ensemble of `LogisticRegression` and `RandomForest` using `VotingClassifier`.\n\n## Data Preprocessing\n- Target labels were encoded using `LabelEncoder`.\n- The cuneiform text was vectorized using `CountVectorizer`.\n- The vectorized output was standardized using `StandardScaler` with `with_mean = False` since that doesn't have support for sparse matrices as the one returned by `CountVectorizer`.\n\n## HyperParameter Tuning and Cross Validation\n- Hyperparameters were tuned using `RandomizedSearchCV` with `RepeatedStratifiedKFold` with 5 folds and 2 repeats for cross validation.\n\n## Metrics and Evaluation\n- The best model was selected based on the `balanced_accuracy` metric.\n- Other metrics such as `accuracy` and Weighted ROC-AUC for OVR (`roc_auc_ovr_weighted`) were also considered.\n- Confusion matrix was plotted for predictions over the entire dataset.\n\n## Outputs\n- **predictions.csv**: CSV of the original data with predictions.\n- **grid_cv_results.csv**: Results of `RandomizedSearchCV` with cross validation.\n- **confusion_matrix.jpg**: Plot of the confusion matrix over the entire dataset","eb02c890":"## Imports","02dab56d":"### Predictions and results of hyperparameter tuning","9693b047":"## Data Loading","1fb289df":"### Model training","272bf985":"### `StandardScaler` for scaling the data as `saga` solver used in `LogisticRegression` works better with inputs of the same scale","f66b0b41":"### Pipeline with the `CountVectorizer` and `VotingClassifier` Model","fa171d15":"## Outputs","152876f2":"### Predictions","06f617a5":"## Data Preprocessing and Modelling","dace07cc":"### Confusion Matrix","7dfee599":"## Constants","7f33523a":"## Install the latest version of scikit-learn","e60a1a7f":"### Best parameters and score","faf34e44":"### Get list of all configurable parameters for hyperparameter tuning for the pipeline","54a6b1f7":"## Model Predictions and evaluation","6f886443":"### Count vectorization for the text data at the character level\nThere are about 550 unique characters across the entire dataset","3deda304":"### `RepeatedStratifiedKFold` for cross validation","0ce285e1":"### `LabelEncoder` for encoding the target classes as integers"}}