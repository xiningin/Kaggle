{"cell_type":{"e9c9c7ea":"code","3e94d2f5":"code","bea1061f":"code","187adb97":"code","da61f3f6":"code","ce421f23":"markdown"},"source":{"e9c9c7ea":"%%javascript\nIPython.OutputArea.prototype._should_scroll = function(lines) {\n    return false;\n}","3e94d2f5":"import os\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.subplots as subplots\nimport warnings\n\ndef build_graphs(submission_path, solution_path, test_path, ihme_path, mode=\"all\"):\n    submission_files = os.listdir(submission_path)\n    submissions_list = []\n\n    for f in submission_files:\n        submission = pd.read_csv(os.path.join(submission_path, f))\n        submission.insert(0, \"SubmissionId\", int(f[:-4]))\n        if \"ForecastID\" in submission.columns:\n            submission.rename(columns={\"ForecastID\": \"ForecastId\"}, inplace=True)\n        submissions_list.append(submission)\n\n    submissions = pd.concat(submissions_list, ignore_index=True, sort=False)\n\n    # Read in solution\/test files\n    solution = pd.read_csv(solution_path)\n    test = pd.read_csv(test_path)\n    if \"Province\/State\" in test.columns:\n        test = test.rename(columns={\"Province\/State\": \"Province_State\", \"Country\/Region\": \"Country_Region\"})\n    test.loc[:,\"LocationName\"] = [row[\"Country_Region\"] if type(row[\"Province_State\"]) is not str else (\"%s - %s\" % (row[\"Country_Region\"], row[\"Province_State\"])) for (i, row) in test.iterrows()]\n\n    # Merge submissions to solution and test files\n    forecasts = submissions.merge(test, on=\"ForecastId\", how=\"left\")\n    forecasts = forecasts.merge(solution, on=\"ForecastId\", how=\"left\", suffixes=(\"\", \"Actual\"))\n\n    # Add daily information\n    forecasts.sort_values(by=[\"SubmissionId\", \"LocationName\", \"ForecastId\"], inplace=True)\n    forecasts.loc[forecasts[\"Usage\"]==\"Ignored\", \"ConfirmedCasesActual\"] = np.nan\n    forecasts.loc[forecasts[\"Usage\"]==\"Ignored\", \"FatalitiesActual\"] = np.nan\n    forecasts.loc[:, \"DailyConfirmedCases\"] = np.nan\n    forecasts.loc[forecasts.index!=forecasts.index[0], \"DailyConfirmedCases\"] = forecasts.loc[forecasts.index!=forecasts.index[0], \"ConfirmedCases\"].to_numpy()-forecasts.loc[forecasts.index!=forecasts.index[-1], \"ConfirmedCases\"].to_numpy()\n    forecasts.loc[:, \"DailyConfirmedCasesActual\"] = np.nan\n    forecasts.loc[forecasts.index!=forecasts.index[0], \"DailyConfirmedCasesActual\"] = forecasts.loc[forecasts.index!=forecasts.index[0], \"ConfirmedCasesActual\"].to_numpy()-forecasts.loc[forecasts.index!=forecasts.index[-1], \"ConfirmedCasesActual\"].to_numpy()\n    forecasts.loc[:, \"DailyFatalities\"] = np.nan\n    forecasts.loc[forecasts.index!=forecasts.index[0], \"DailyFatalities\"] = forecasts.loc[forecasts.index!=forecasts.index[0], \"Fatalities\"].to_numpy()-forecasts.loc[forecasts.index!=forecasts.index[-1], \"Fatalities\"].to_numpy()\n    forecasts.loc[:, \"DailyFatalitiesActual\"] = np.nan\n    forecasts.loc[forecasts.index!=forecasts.index[0], \"DailyFatalitiesActual\"] = forecasts.loc[forecasts.index!=forecasts.index[0], \"FatalitiesActual\"].to_numpy()-forecasts.loc[forecasts.index!=forecasts.index[-1], \"FatalitiesActual\"].to_numpy()\n\n    # This conversion to daily causes some forecasts to go negative. Set these to 0\n    forecasts.loc[forecasts[\"DailyConfirmedCases\"]<0, \"DailyConfirmedCases\"] = 0.0\n    forecasts.loc[forecasts[\"DailyFatalities\"]<0, \"DailyFatalities\"] = 0.0\n\n    # Add ranks and scores to the submissions\n    # Some submission input values to logarithm were invalid\n    warnings.filterwarnings(\"ignore\", category=RuntimeWarning) \n    forecasts.loc[:,\"FatalitiesSLE\"] = (np.log(1+forecasts[\"Fatalities\"])-np.log(1+forecasts[\"FatalitiesActual\"]))**2\n    forecasts.loc[:,\"ConfirmedCasesSLE\"] = (np.log(1+forecasts[\"ConfirmedCases\"])-np.log(1+forecasts[\"ConfirmedCasesActual\"]))**2\n    warnings.filterwarnings(\"default\", category=RuntimeWarning) \n    scores = forecasts[forecasts[\"Usage\"]==\"Private\"][[\"SubmissionId\", \"FatalitiesSLE\", \"ConfirmedCasesSLE\"]].groupby(\"SubmissionId\").mean().reset_index()\n    scores.loc[:, \"FatalatiesRMSLE\"] = np.sqrt(scores[\"FatalitiesSLE\"])\n    scores.loc[:, \"ConfirmedCasesRMSLE\"] = np.sqrt(scores[\"ConfirmedCasesSLE\"])\n    scores.loc[:, \"OverallRMSLE\"] = (scores[\"FatalatiesRMSLE\"]+scores[\"ConfirmedCasesRMSLE\"])\/2.0\n    scores = scores.sort_values(by=\"OverallRMSLE\")\n    forecasts = forecasts.merge(scores[[\"SubmissionId\", \"FatalatiesRMSLE\", \"ConfirmedCasesRMSLE\", \"OverallRMSLE\"]], on=\"SubmissionId\")\n    ranks = forecasts[[\"SubmissionId\", \"OverallRMSLE\"]].drop_duplicates().sort_values(by=\"OverallRMSLE\")\n    ranks[\"Rank\"] = list(range(1, ranks.shape[0]+1))\n    forecasts = forecasts.merge(ranks[[\"SubmissionId\", \"Rank\"]], on=\"SubmissionId\", how=\"inner\")\n\n\n    kaggle_community_forecast = (forecasts[forecasts[\"Rank\"]<=20][[\"ForecastId\", \"LocationName\", \"Country_Region\", \"Province_State\", \"Date\", \"Usage\", \"ConfirmedCases\", \"Fatalities\", \"DailyConfirmedCases\", \"DailyFatalities\"]]\n                                 .groupby([\"ForecastId\", \"LocationName\", \"Country_Region\", \"Province_State\", \"Date\", \"Usage\"])\n                                 .median()\n                                 .reset_index()\n                                 .sort_values(by=\"ForecastId\"))\n\n    # Read and process IHME forecasts\n    ihme = pd.read_csv(ihme_path)\n    min_date = min(forecasts[forecasts[\"Usage\"]!=\"Public\"][\"Date\"])\n    max_date = max(forecasts[forecasts[\"Usage\"]!=\"Public\"][\"Date\"])\n    ihme = ihme[(ihme[\"date\"]>=min_date) & (ihme[\"date\"]<=max_date)] # Filter IHME to date ranges of Kaggle predictions\n\n    if mode==\"develop\":\n        locations = [(\"US\", \"California\", \"US - California\"), (\"US\", \"New York\", \"US - New York\")]\n    else:\n        locations = sorted(set([(row[\"Country_Region\"], row[\"Province_State\"] if type(row[\"Province_State\"]) is str else \"\", row[\"LocationName\"]) for (i, row) in test.iterrows()]))\n    location_names = [l[2] for l in locations]\n    default_location = \"US - California\"\n\n    fig = subplots.make_subplots(rows=4, cols=1,\n                                 subplot_titles=[\"Cumulative Cases\", \"Cumulative Fatalities\", \"Daily Cases\", \"Daily Fatalities\"],\n                                 vertical_spacing=0.05)\n\n    region_plot_names = []\n    buttons=[]\n\n    for (country_name, state_name, location_name) in locations:\n        if state_name!=\"\":\n            region = forecasts[(forecasts[\"Country_Region\"]==country_name) & (forecasts[\"Province_State\"]==state_name) & (forecasts[\"Usage\"]!=\"Public\") & (forecasts[\"Rank\"]<=20)]\n        else:\n            region = forecasts[(forecasts[\"Country_Region\"]==country_name) & (forecasts[\"Usage\"]!=\"Public\") & (forecasts[\"Rank\"]<=20)]\n\n        kaggle_region = kaggle_community_forecast[(kaggle_community_forecast[\"LocationName\"]==location_name) & (kaggle_community_forecast[\"Usage\"]!=\"Public\")]\n        region_actual = region[(region[\"SubmissionId\"]==region[\"SubmissionId\"][region.index[1]]) & (region[\"Usage\"]==\"Private\")]\n\n        #fig.add_trace(go.Box(x=region[\"Date\"], y=region[\"ConfirmedCases\"], visible=(location_name==default_location), name=\"Kaggle Forecast\", marker=dict(opacity=0), marker_color=\"dodgerblue\"), row=1, col=1)\n        fig.add_trace(go.Scatter(x=kaggle_region[\"Date\"], y=kaggle_region[\"ConfirmedCases\"], line={\"color\":\"dodgerblue\"}, visible=(location_name==default_location), name=\"Kaggle Forecast\"), row=1, col=1)\n        fig.add_trace(go.Scatter(x=region_actual[\"Date\"], y=region_actual[\"ConfirmedCasesActual\"], line={\"width\":4, \"color\":\"indianred\"}, visible=(location_name==default_location), name=\"Reported\"), row=1, col=1)\n        #fig.add_trace(go.Box(x=region[\"Date\"], y=region[\"Fatalities\"], visible=(location_name==default_location), name=\"Kaggle Forecast\", marker=dict(opacity=0), marker_color=\"dodgerblue\", showlegend=False), row=2, col=1)\n        fig.add_trace(go.Scatter(x=kaggle_region[\"Date\"], y=kaggle_region[\"Fatalities\"], line={\"color\":\"dodgerblue\"}, visible=(location_name==default_location), name=\"Kaggle Forecast\", showlegend=False), row=2, col=1)\n        fig.add_trace(go.Scatter(x=region_actual[\"Date\"], y=region_actual[\"FatalitiesActual\"], line={\"width\":4, \"color\":\"indianred\"}, visible=(location_name==default_location), name=\"Reported\", showlegend=False), row=2, col=1)\n        #fig.add_trace(go.Box(x=region[\"Date\"], y=region[\"DailyConfirmedCases\"], visible=(location_name==default_location), name=\"Kaggle Forecast\", marker=dict(opacity=0), marker_color=\"dodgerblue\", showlegend=False), row=3, col=1)\n        fig.add_trace(go.Scatter(x=kaggle_region[\"Date\"], y=kaggle_region[\"DailyConfirmedCases\"], line={\"color\":\"dodgerblue\"}, visible=(location_name==default_location), name=\"Kaggle Forecast\", showlegend=False), row=3, col=1)\n        fig.add_trace(go.Scatter(x=region_actual[\"Date\"], y=region_actual[\"DailyConfirmedCasesActual\"], line={\"width\":4, \"color\":\"indianred\"}, visible=(location_name==default_location), name=\"Reported\", showlegend=False), row=3, col=1)\n        #fig.add_trace(go.Box(x=region[\"Date\"], y=region[\"DailyFatalities\"], visible=(location_name==default_location), name=\"Kaggle Forecast\", marker=dict(opacity=0), marker_color=\"dodgerblue\", showlegend=False), row=4, col=1)\n        fig.add_trace(go.Scatter(x=kaggle_region[\"Date\"], y=kaggle_region[\"DailyFatalities\"], line={\"color\":\"dodgerblue\"}, visible=(location_name==default_location), name=\"Kaggle Forecast\", showlegend=False), row=4, col=1)\n        fig.add_trace(go.Scatter(x=region_actual[\"Date\"], y=region_actual[\"DailyFatalitiesActual\"], line={\"width\":4, \"color\":\"indianred\"}, visible=(location_name==default_location), name=\"Reported\", showlegend=False), row=4, col=1)\n\n        if state_name in set(ihme[\"location_name\"]):\n            ihme_region = ihme[ihme[\"location_name\"]==state_name]\n            fig.add_trace(go.Scatter(x=ihme_region[\"date\"], y=ihme_region[\"totdea_mean\"], visible=(location_name==default_location), name=\"IHME Forecast\", line={\"color\": \"mediumseagreen\"}), row=2, col=1)\n            fig.add_trace(go.Scatter(x=ihme_region[\"date\"], y=ihme_region[\"deaths_mean\"], visible=(location_name==default_location), name=\"IHME Forecast\", line={\"color\": \"mediumseagreen\"}, showlegend=False), row=4, col=1)\n            region_plot_names.extend([location_name]*10)        \n        elif country_name in set(ihme[\"location_name\"]):\n            ihme_region = ihme[ihme[\"location_name\"]==country_name]\n            fig.add_trace(go.Scatter(x=ihme_region[\"date\"], y=ihme_region[\"totdea_mean\"], visible=(location_name==default_location), name=\"IHME Forecast\", line={\"color\": \"mediumseagreen\"}), row=2, col=1)\n            fig.add_trace(go.Scatter(x=ihme_region[\"date\"], y=ihme_region[\"deaths_mean\"], visible=(location_name==default_location), name=\"IHME Forecast\", line={\"color\": \"mediumseagreen\"}, showlegend=False), row=4, col=1)\n            region_plot_names.extend([location_name]*10)        \n        else:\n            region_plot_names.extend([location_name]*8)\n\n    for (country_name, state_name, location_name) in locations:\n        buttons.append(dict(method='update',\n                            label=location_name,\n                            args = [{'visible': [location_name==r for r in region_plot_names],\n                                     \"title\": location_name}]))\n\n\n    # add dropdown menus to the figure\n    fig.update_layout(updatemenus=[{\"buttons\": buttons, \"direction\": \"down\", \"active\": location_names.index(default_location), \"showactive\": True, \"x\": 0.58, \"y\": 1.1}],\n                      height=2000)\n    fig.show()","bea1061f":"build_graphs(\"..\/input\/covid19-global-forecasting-submissions\/week_4\", \"..\/input\/covid-19-forecasting-ongoing-data-updates\/wk4_solution.csv\", \"..\/input\/covid19-forecasting-week-four-launch-data\/test.csv\", \"..\/input\/ihme-covid19-forecasts\/ihme_2020_04_16.csv\")","187adb97":"submission_path = \"..\/input\/covid19-global-forecasting-submissions\/week_4\"\nsolution_path   = \"..\/input\/covid-19-forecasting-ongoing-data-updates\/wk4_solution.csv\"\ntest_path       = \"..\/input\/covid19-forecasting-week-four-launch-data\/test.csv\"\nihme_path       = \"..\/input\/ihme-covid19-forecasts\/ihme_2020_04_16.csv\"\nmode            = \"develop\"\n\nsubmission_files = os.listdir(submission_path)\nsubmissions_list = []\n\nfor f in submission_files:\n    submission = pd.read_csv(os.path.join(submission_path, f))\n    submission.insert(0, \"SubmissionId\", int(f[:-4]))\n    if \"ForecastID\" in submission.columns:\n        submission.rename(columns={\"ForecastID\": \"ForecastId\"}, inplace=True)\n    submissions_list.append(submission)\n\nsubmissions = pd.concat(submissions_list, ignore_index=True, sort=False)\n\n# Read in solution\/test files\nsolution = pd.read_csv(solution_path)\ntest = pd.read_csv(test_path)\nif \"Province\/State\" in test.columns:\n    test = test.rename(columns={\"Province\/State\": \"Province_State\", \"Country\/Region\": \"Country_Region\"})\ntest.loc[:,\"LocationName\"] = [row[\"Country_Region\"] if type(row[\"Province_State\"]) is not str else (\"%s - %s\" % (row[\"Country_Region\"], row[\"Province_State\"])) for (i, row) in test.iterrows()]\n\n# Merge submissions to solution and test files\nforecasts = submissions.merge(test, on=\"ForecastId\", how=\"left\")\nforecasts = forecasts.merge(solution, on=\"ForecastId\", how=\"left\", suffixes=(\"\", \"Actual\"))\n\n# Add daily information\nforecasts.sort_values(by=[\"SubmissionId\", \"LocationName\", \"ForecastId\"], inplace=True)\nforecasts.loc[forecasts[\"Usage\"]==\"Ignored\", \"ConfirmedCasesActual\"] = np.nan\nforecasts.loc[forecasts[\"Usage\"]==\"Ignored\", \"FatalitiesActual\"] = np.nan\nforecasts.loc[:, \"DailyConfirmedCases\"] = np.nan\nforecasts.loc[forecasts.index!=forecasts.index[0], \"DailyConfirmedCases\"] = forecasts.loc[forecasts.index!=forecasts.index[0], \"ConfirmedCases\"].to_numpy()-forecasts.loc[forecasts.index!=forecasts.index[-1], \"ConfirmedCases\"].to_numpy()\nforecasts.loc[:, \"DailyConfirmedCasesActual\"] = np.nan\nforecasts.loc[forecasts.index!=forecasts.index[0], \"DailyConfirmedCasesActual\"] = forecasts.loc[forecasts.index!=forecasts.index[0], \"ConfirmedCasesActual\"].to_numpy()-forecasts.loc[forecasts.index!=forecasts.index[-1], \"ConfirmedCasesActual\"].to_numpy()\nforecasts.loc[:, \"DailyFatalities\"] = np.nan\nforecasts.loc[forecasts.index!=forecasts.index[0], \"DailyFatalities\"] = forecasts.loc[forecasts.index!=forecasts.index[0], \"Fatalities\"].to_numpy()-forecasts.loc[forecasts.index!=forecasts.index[-1], \"Fatalities\"].to_numpy()\nforecasts.loc[:, \"DailyFatalitiesActual\"] = np.nan\nforecasts.loc[forecasts.index!=forecasts.index[0], \"DailyFatalitiesActual\"] = forecasts.loc[forecasts.index!=forecasts.index[0], \"FatalitiesActual\"].to_numpy()-forecasts.loc[forecasts.index!=forecasts.index[-1], \"FatalitiesActual\"].to_numpy()\n\n# This conversion to daily causes some forecasts to go negative. Set these to 0\nforecasts.loc[forecasts[\"DailyConfirmedCases\"]<0, \"DailyConfirmedCases\"] = 0.0\nforecasts.loc[forecasts[\"DailyFatalities\"]<0, \"DailyFatalities\"] = 0.0\n\n# Add ranks and scores to the submissions\n# Some submission input values to logarithm were invalid\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning) \nforecasts.loc[:,\"FatalitiesSLE\"] = (np.log(1+forecasts[\"Fatalities\"])-np.log(1+forecasts[\"FatalitiesActual\"]))**2\nforecasts.loc[:,\"ConfirmedCasesSLE\"] = (np.log(1+forecasts[\"ConfirmedCases\"])-np.log(1+forecasts[\"ConfirmedCasesActual\"]))**2\nwarnings.filterwarnings(\"default\", category=RuntimeWarning) \nscores = forecasts[forecasts[\"Usage\"]==\"Private\"][[\"SubmissionId\", \"FatalitiesSLE\", \"ConfirmedCasesSLE\"]].groupby(\"SubmissionId\").mean().reset_index()\nscores.loc[:, \"FatalatiesRMSLE\"] = np.sqrt(scores[\"FatalitiesSLE\"])\nscores.loc[:, \"ConfirmedCasesRMSLE\"] = np.sqrt(scores[\"ConfirmedCasesSLE\"])\nscores.loc[:, \"OverallRMSLE\"] = (scores[\"FatalatiesRMSLE\"]+scores[\"ConfirmedCasesRMSLE\"])\/2.0\nscores = scores.sort_values(by=\"OverallRMSLE\")\nforecasts = forecasts.merge(scores[[\"SubmissionId\", \"FatalatiesRMSLE\", \"ConfirmedCasesRMSLE\", \"OverallRMSLE\"]], on=\"SubmissionId\")\nranks = forecasts[[\"SubmissionId\", \"OverallRMSLE\"]].drop_duplicates().sort_values(by=\"OverallRMSLE\")\nranks[\"Rank\"] = list(range(1, ranks.shape[0]+1))\nforecasts = forecasts.merge(ranks[[\"SubmissionId\", \"Rank\"]], on=\"SubmissionId\", how=\"inner\")\n\n\nkaggle_community_forecast = (forecasts[forecasts[\"Rank\"]<=20][[\"ForecastId\", \"LocationName\", \"Country_Region\", \"Province_State\", \"Date\", \"Usage\", \"ConfirmedCases\", \"Fatalities\", \"DailyConfirmedCases\", \"DailyFatalities\"]]\n                             .groupby([\"ForecastId\", \"LocationName\", \"Country_Region\", \"Province_State\", \"Date\", \"Usage\"])\n                             .median()\n                             .reset_index()\n                             .sort_values(by=\"ForecastId\"))\n\n# Read and process IHME forecasts\nihme = pd.read_csv(ihme_path)\nmin_date = min(forecasts[forecasts[\"Usage\"]!=\"Public\"][\"Date\"])\nmax_date = max(forecasts[forecasts[\"Usage\"]!=\"Public\"][\"Date\"])\nihme = ihme[(ihme[\"date\"]>=min_date) & (ihme[\"date\"]<=max_date)] # Filter IHME to date ranges of Kaggle predictions\n\nif mode==\"develop\":\n    locations = [(\"US\", \"California\", \"US - California\"), (\"US\", \"New York\", \"US - New York\")]\nelse:\n    locations = sorted(set([(row[\"Country_Region\"], row[\"Province_State\"] if type(row[\"Province_State\"]) is str else \"\", row[\"LocationName\"]) for (i, row) in test.iterrows()]))\nlocation_names = [l[2] for l in locations]\ndefault_location = \"US - California\"\n\nfig = subplots.make_subplots(rows=4, cols=1,\n                             subplot_titles=[\"Cumulative Cases\", \"Cumulative Fatalities\", \"Daily Cases\", \"Daily Fatalities\"],\n                             vertical_spacing=0.05)\n\nregion_plot_names = []\nbuttons=[]\n\nfor (country_name, state_name, location_name) in locations:\n    if state_name!=\"\":\n        region = forecasts[(forecasts[\"Country_Region\"]==country_name) & (forecasts[\"Province_State\"]==state_name) & (forecasts[\"Usage\"]!=\"Public\") & (forecasts[\"Rank\"]<=20)]\n    else:\n        region = forecasts[(forecasts[\"Country_Region\"]==country_name) & (forecasts[\"Usage\"]!=\"Public\") & (forecasts[\"Rank\"]<=20)]\n    \n    kaggle_region = kaggle_community_forecast[(kaggle_community_forecast[\"LocationName\"]==location_name) & (kaggle_community_forecast[\"Usage\"]!=\"Public\")]\n    region_actual = region[(region[\"SubmissionId\"]==region[\"SubmissionId\"][region.index[1]]) & (region[\"Usage\"]==\"Private\")]\n\n    #fig.add_trace(go.Box(x=region[\"Date\"], y=region[\"ConfirmedCases\"], visible=(location_name==default_location), name=\"Kaggle Forecast\", marker=dict(opacity=0), marker_color=\"dodgerblue\"), row=1, col=1)\n    fig.add_trace(go.Scatter(x=kaggle_region[\"Date\"], y=kaggle_region[\"ConfirmedCases\"], line={\"color\":\"dodgerblue\"}, visible=(location_name==default_location), name=\"Kaggle Forecast\"), row=1, col=1)\n    fig.add_trace(go.Scatter(x=region_actual[\"Date\"], y=region_actual[\"ConfirmedCasesActual\"], line={\"width\":4, \"color\":\"indianred\"}, visible=(location_name==default_location), name=\"Reported\"), row=1, col=1)\n    #fig.add_trace(go.Box(x=region[\"Date\"], y=region[\"Fatalities\"], visible=(location_name==default_location), name=\"Kaggle Forecast\", marker=dict(opacity=0), marker_color=\"dodgerblue\", showlegend=False), row=2, col=1)\n    fig.add_trace(go.Scatter(x=kaggle_region[\"Date\"], y=kaggle_region[\"Fatalities\"], line={\"color\":\"dodgerblue\"}, visible=(location_name==default_location), name=\"Kaggle Forecast\", showlegend=False), row=2, col=1)\n    fig.add_trace(go.Scatter(x=region_actual[\"Date\"], y=region_actual[\"FatalitiesActual\"], line={\"width\":4, \"color\":\"indianred\"}, visible=(location_name==default_location), name=\"Reported\", showlegend=False), row=2, col=1)\n    #fig.add_trace(go.Box(x=region[\"Date\"], y=region[\"DailyConfirmedCases\"], visible=(location_name==default_location), name=\"Kaggle Forecast\", marker=dict(opacity=0), marker_color=\"dodgerblue\", showlegend=False), row=3, col=1)\n    fig.add_trace(go.Scatter(x=kaggle_region[\"Date\"], y=kaggle_region[\"DailyConfirmedCases\"], line={\"color\":\"dodgerblue\"}, visible=(location_name==default_location), name=\"Kaggle Forecast\", showlegend=False), row=3, col=1)\n    fig.add_trace(go.Scatter(x=region_actual[\"Date\"], y=region_actual[\"DailyConfirmedCasesActual\"], line={\"width\":4, \"color\":\"indianred\"}, visible=(location_name==default_location), name=\"Reported\", showlegend=False), row=3, col=1)\n    #fig.add_trace(go.Box(x=region[\"Date\"], y=region[\"DailyFatalities\"], visible=(location_name==default_location), name=\"Kaggle Forecast\", marker=dict(opacity=0), marker_color=\"dodgerblue\", showlegend=False), row=4, col=1)\n    fig.add_trace(go.Scatter(x=kaggle_region[\"Date\"], y=kaggle_region[\"DailyFatalities\"], line={\"color\":\"dodgerblue\"}, visible=(location_name==default_location), name=\"Kaggle Forecast\", showlegend=False), row=4, col=1)\n    fig.add_trace(go.Scatter(x=region_actual[\"Date\"], y=region_actual[\"DailyFatalitiesActual\"], line={\"width\":4, \"color\":\"indianred\"}, visible=(location_name==default_location), name=\"Reported\", showlegend=False), row=4, col=1)\n    \n    if state_name in set(ihme[\"location_name\"]):\n        ihme_region = ihme[ihme[\"location_name\"]==state_name]\n        fig.add_trace(go.Scatter(x=ihme_region[\"date\"], y=ihme_region[\"totdea_mean\"], visible=(location_name==default_location), name=\"IHME Forecast\", line={\"color\": \"mediumseagreen\"}), row=2, col=1)\n        fig.add_trace(go.Scatter(x=ihme_region[\"date\"], y=ihme_region[\"deaths_mean\"], visible=(location_name==default_location), name=\"IHME Forecast\", line={\"color\": \"mediumseagreen\"}, showlegend=False), row=4, col=1)\n        region_plot_names.extend([location_name]*10)        \n    elif country_name in set(ihme[\"location_name\"]):\n        ihme_region = ihme[ihme[\"location_name\"]==country_name]\n        fig.add_trace(go.Scatter(x=ihme_region[\"date\"], y=ihme_region[\"totdea_mean\"], visible=(location_name==default_location), name=\"IHME Forecast\", line={\"color\": \"mediumseagreen\"}), row=2, col=1)\n        fig.add_trace(go.Scatter(x=ihme_region[\"date\"], y=ihme_region[\"deaths_mean\"], visible=(location_name==default_location), name=\"IHME Forecast\", line={\"color\": \"mediumseagreen\"}, showlegend=False), row=4, col=1)\n        region_plot_names.extend([location_name]*10)        \n    else:\n        region_plot_names.extend([location_name]*8)\n\nfor (country_name, state_name, location_name) in locations:\n    buttons.append(dict(method='update',\n                        label=location_name,\n                        args = [{'visible': [location_name==r for r in region_plot_names],\n                                 \"title\": location_name}]))\n   \n\n# add dropdown menus to the figure\nfig.update_layout(updatemenus=[{\"buttons\": buttons, \"direction\": \"down\", \"active\": location_names.index(default_location), \"showactive\": True, \"x\": 0.58, \"y\": 1.1}],\n                  height=2000)\nfig.show()","da61f3f6":"us_state_abbreviations = pd.read_csv(\"..\/input\/us-state-abbreviations\/us_state_abbreviations.csv\")\n\nlatest_us = test.merge(solution, on=\"ForecastId\")\nlatest_us = latest_us[latest_us[\"Usage\"]!=\"Ignored\"]\nlatest_us.loc[:, \"DailyConfirmedCases\"] = np.nan\nlatest_us.loc[latest_us.index!=latest_us.index[0], \"DailyConfirmedCases\"] = latest_us.loc[latest_us.index!=latest_us.index[0], \"ConfirmedCases\"].to_numpy()-latest_us.loc[latest_us.index!=latest_us.index[-1], \"ConfirmedCases\"].to_numpy()\nlatest_us.loc[:, \"DailyFatalities\"] = np.nan\nlatest_us.loc[latest_us.index!=latest_us.index[0], \"DailyFatalities\"] = latest_us.loc[latest_us.index!=latest_us.index[0], \"Fatalities\"].to_numpy()-latest_us.loc[latest_us.index!=latest_us.index[-1], \"Fatalities\"].to_numpy()\nlatest_date = max(latest_us[\"Date\"])\nlatest_us = latest_us[latest_us[\"Date\"]==latest_date]\nlatest_us = latest_us[latest_us[\"Country_Region\"]==\"US\"]\nlatest_us = latest_us.merge(us_state_abbreviations, left_on=\"Province_State\", right_on=\"State\", how=\"inner\")\n\nstats = [\"DailyConfirmedCases\", \"ConfirmedCases\", \"DailyFatalities\", \"Fatalities\"]\nstat_labels = [\"Daily Confirmed Cases\", \"Cumulative Confirmed Cases\", \"Daily Fatalities\", \"Cumulative Fatalities\"]\ndefault_stat=\"DailyFatalities\"\nbuttons = []\n\nfig = go.Figure()\n\nfor (stat, label) in zip(stats, stat_labels):\n    fig.add_trace(go.Choropleth(\n        locations=latest_us[\"Code\"],\n        z = latest_us[stat],\n        locationmode = 'USA-states', \n        hovertemplate = \"%{text}\",\n        text = [\"<br \/>\".join([\"<b>{State}<\/b><br \/>\",\n                               \"Daily Cases: {DailyConfirmedCases:,.0f}\",\n                               \"Cumulative Cases: {ConfirmedCases:,.0f}<br \/>\",\n                               \"Daily Fatalities: {DailyFatalities:,.0f}\",\n                               \"Cumulative Fatalities: {Fatalities:,.0f}\",]).format(**row) for (i, row) in latest_us.iterrows()],\n        colorbar_title = stat,\n        name=\"\",\n        visible=(stat==default_stat)))\n    buttons.append(dict(method='update',\n                    label= label + \" (data from %s)\" % latest_date,\n                    args = [{'visible': [stat==s for s in stats]}]))\n\nfig.update_layout(\n    updatemenus=[{\"buttons\": buttons, \"direction\": \"down\", \"active\": stats.index(default_stat), \"showactive\": True, \"x\": 0.58, \"y\": 1.15}],\n    geo_scope='usa', # limite map scope to USA\n)\n\nfig.show()","ce421f23":"# Kaggle COVID19 Forecasting - Cumulative Cases and Fatalities\n\nThis selects the top 20 Kaggle Community forecasts to-date from the [COVID19 Week 4 forecasting challenge](https:\/\/www.kaggle.com\/c\/covid19-global-forecasting-week-4), aggregates them, and visualizes the forecasts by location. The forecasts were submitted on or before Wednesday, April 15."}}