{"cell_type":{"538954da":"code","921f4b18":"code","8e8953e5":"code","3f303946":"code","12256a85":"code","9d503b61":"code","c25e66e3":"code","4b321735":"code","9422383d":"code","4c3aa8dc":"code","099a375b":"markdown","541dd939":"markdown","f6f67344":"markdown","c4af8d74":"markdown"},"source":{"538954da":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n","921f4b18":"import numpy as np \nimport pandas as pd\nimport os\nimport cv2\nimport time\nimport zipfile\n\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom tqdm import tqdm_notebook as tq\nfrom PIL import Image\n","8e8953e5":"start = time.time()\n\ninput_dir = \"..\/input\/\"\ntrain_img_dir = \"..\/input\/train_images\/\"\n\ncategory_num = 4 + 1\n\ndef make_mask_img(segment_df):\n    seg_width = 1600\n    seg_height = 256\n    seg_img = np.full(seg_width*seg_height, category_num-1, dtype=np.int32)\n    for encoded_pixels, class_id in zip(segment_df[\"EncodedPixels\"].values, segment_df[\"ClassId\"].values):\n        if pd.isna(encoded_pixels): continue\n        pixel_list = list(map(int, encoded_pixels.split(\" \")))\n        for i in range(0, len(pixel_list), 2):\n            start_index = pixel_list[i] -1 \n            index_len = pixel_list[i+1] \n            seg_img[start_index:start_index+index_len] = int(class_id) - 1\n    seg_img = seg_img.reshape((seg_height, seg_width), order='F')\n   \n    return seg_img","3f303946":"train_df = pd.read_csv(input_dir + \"train.csv\")\ntrain_df[['ImageId', 'ClassId']] = train_df['ImageId_ClassId'].str.split('_', expand=True)\ntrain_df.head()","12256a85":"train_df.shape","9d503b61":"images = train_df[\"ImageId\"].unique() \nimages","c25e66e3":"!mkdir -p \"\/kaggle\/working\/labels-np\/\"\n!mkdir -p \"\/kaggle\/working\/labels-img\/\"","4b321735":"zip_np = zipfile.ZipFile('labels-np.zip', 'w', zipfile.ZIP_DEFLATED)\nzip_img = zipfile.ZipFile('labels-img.zip', 'w', zipfile.ZIP_DEFLATED)\n\nfor image in images:\n    df = train_df[train_df['ImageId']==image]\n    mask = make_mask_img(df)\n    npf = \"\/kaggle\/working\/labels-np\/\" + image.split('.')[0]\n    imgf = \"\/kaggle\/working\/labels-img\/\"+ image.split('.')[0] + '.png'\n    \n    np.save(npf, mask)\n    zip_np.write(npf + \".npy\", image.split('.')[0] + \".npy\")\n    \n    img_mask_3_chn = np.dstack((mask, mask, mask))\n    cv2.imwrite(imgf, img_mask_3_chn)\n    zip_img.write(imgf, image.split('.')[0] + '.png')\n    \n    os.remove(npf + \".npy\")\n    os.remove(imgf)\n    \nzip_np.close()\nzip_img.close()","9422383d":"# !unzip -l labels-np.zip | less","4c3aa8dc":"end = time.time()\nhours, rem = divmod(end-start, 3600)\nminutes, seconds = divmod(rem, 60)\nprint(\"Execution Time  {:0>2}:{:0>2}:{:05.2f}\".format(int(hours),int(minutes),seconds))","099a375b":"It takes around 13 min to create labels","541dd939":"# Create labels from the RLE encoded masks.","f6f67344":"# Mask to image","c4af8d74":"# Import files"}}