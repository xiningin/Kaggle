{"cell_type":{"ad115b0b":"code","c777d94f":"code","7759b8db":"code","5ece71fc":"code","8acebde6":"code","f5da2c3e":"code","4cb426a6":"code","94ce3076":"code","0232909c":"code","f271e72f":"code","87c4b267":"code","476fba4d":"code","ee56ba80":"code","9b40e27c":"code","04f33299":"code","0d2b3eda":"code","0f9152c7":"code","6ea609b2":"code","a1575aa7":"code","8e4327db":"code","68ec91ed":"markdown","80de1927":"markdown","77efe5f7":"markdown","89d198d5":"markdown","476a7645":"markdown","10dd6219":"markdown","84f5fdae":"markdown"},"source":{"ad115b0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c777d94f":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nimport seaborn as sns\nimport matplotlib.pyplot as plt","7759b8db":"sns.distplot(a=train[train['Survived']==1]['Pclass'],label='Alive',bins=5)\nsns.distplot(a=train[train['Survived']==0]['Pclass'],label='Dead',bins=5)\nplt.legend()\nplt.xticks([1,2,3])","5ece71fc":"test['Age'].replace(np.nan,np.median(test['Age'].dropna()),inplace=True)\ntrain['Age'].replace(np.nan,np.median(train['Age'].dropna()),inplace=True)","8acebde6":"train.head()\nsns.distplot(a=train[train['Survived']==1]['Age'],label='Alive',bins=5)\nsns.distplot(a=train[train['Survived']==0]['Age'],label='Dead',bins=5)\nplt.legend()","f5da2c3e":"train['Sex'].replace({'male':1,'female':0},inplace=True)\ntest['Sex'].replace({'male':1,'female':0},inplace=True)","4cb426a6":"\nsns.distplot(a=train[train['Survived']==1]['Sex'],kde=False,bins=3,label='Alive')\nsns.distplot(a=train[train['Survived']==0]['Sex'],kde=False,bins=3,label='Dead')\nplt.legend()\nplt.xticks([0,1])\nplt.show()\ntrain['Sex'].value_counts()","94ce3076":"sns.scatterplot(x=train['Survived'],y=train['SibSp']+train['Parch'])","0232909c":"sns.distplot(a=train[train['Embarked']=='C']['Survived'],bins=3,kde=False)\nplt.title(\"Cherbourg\")\nplt.xticks([0,1])\nplt.show()\nplt.title(\"QueensTown\")\nsns.distplot(a=train[train['Embarked']=='Q']['Survived'],bins=3,kde=False)\nplt.xticks([0,1])\n\nplt.show()\nplt.title(\"Southampton\")\nsns.distplot(a=train[train['Embarked']=='S']['Survived'],bins=3,kde=False)\nplt.xticks([0,1])\n\nplt.show()","f271e72f":"sns.distplot(a=train[train['Embarked']=='S']['Pclass'],kde=False,bins=5)\nplt.title('Passenger Class of people embarking from Southampton')\nplt.show()\nsns.distplot(a=train[train['Embarked']=='Q']['Pclass'],kde=False,bins=5)\nplt.title('Passenger Class of people embarking from Queenstown')\nplt.show()\nsns.distplot(a=train[train['Embarked']=='C']['Pclass'],kde=False,bins=5)\nplt.title('Passenger Class of people embarking from Cherbourg')\nplt.show()\ntrain['Embarked'].value_counts()","87c4b267":"embarked=pd.get_dummies(train['Embarked'])\nt_embarked=pd.get_dummies(test['Embarked'])\ntrain=train.join(embarked)\ntest=test.join(t_embarked)","476fba4d":"train.drop(['Name','SibSp','Parch','Ticket','Cabin','Embarked'],inplace=True,axis=1)\ntest.drop(['Name','SibSp','Parch','Ticket','Cabin','Embarked'],inplace=True,axis=1)","ee56ba80":"sns.heatmap(train.corr(),cmap='CMRmap')\nplt.legend()","9b40e27c":"test['Fare'].replace({np.nan:np.median(test['Fare'].dropna())},inplace=True)","04f33299":"test.set_index('PassengerId',inplace=True)\ntrain.set_index('PassengerId',inplace=True)","0d2b3eda":"from sklearn.ensemble import RandomForestClassifier\nX_train=train.drop('Survived',axis=1)\ny_train=train['Survived']","0f9152c7":"forest=RandomForestClassifier(max_depth=4,n_estimators=2000)\nforest.fit(X_train,y_train)\ny_pred=forest.predict_proba(test)\ny_pred=(y_pred[:,1]>0.45).astype(int)\nfinal_df=pd.DataFrame({'PassengerId':test.index,'Survived':y_pred})\nfinal_df.set_index('PassengerId',inplace=True)","6ea609b2":"final_df.to_csv('submit.csv')#the one with 0.784 score","a1575aa7":"from sklearn.svm import SVC\nsvc=SVC(C=1,gamma=10)\nsvc.fit(X_train,y_train)\ny_pred2=svc.predict(test)\nfinal_df2=pd.DataFrame({'PassengerId':test.index,'Survived':y_pred2})\nfinal_df2.set_index('PassengerId',inplace=True)","8e4327db":"final_df2.to_csv('submit.csv')#the one with 0.5 score","68ec91ed":"**Most of the people that died embarked from the Port of Southampton**","80de1927":"**If probability of survival is more than 0.45 then we predict that the person has survived.**","77efe5f7":"**Most of the Passengers embarked from Southampton**","89d198d5":"**More People From the Third Class Died as Compared to  the First Class**","476a7645":"**Much more men died as compared to women**","10dd6219":"**Corelation between the columns in the data**","84f5fdae":"**There is no relation between the number of family members on board and the chance of survival.Hencw we'll drop this column.**"}}