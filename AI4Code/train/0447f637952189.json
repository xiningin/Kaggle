{"cell_type":{"10ca9132":"code","27bcf5d2":"code","371a82da":"code","449bd391":"code","5438d708":"code","205df019":"code","a7d8014e":"code","c669b839":"code","07ad347c":"code","85970c4f":"code","072e0062":"code","4d1923f2":"code","d02be0df":"code","7d9461de":"code","51fb3a6d":"code","befd4801":"code","a010422e":"code","353e9c21":"code","be25af5f":"code","ba711182":"code","b84c87a8":"code","4e3dc3cb":"code","15354b68":"code","39af8f9b":"code","d476f3fd":"code","c6089330":"code","fc1dae20":"code","c2092b44":"code","6ada8bc8":"code","02c0a4e0":"code","80bdd4b1":"code","7c103628":"code","eed834a6":"code","72a67717":"code","89a524bb":"code","54302038":"code","95c14b64":"code","1022ca6f":"code","e0a55358":"code","5fee7d8d":"code","c6345490":"code","c81c0494":"code","de438013":"code","67b42fec":"code","6602a8c3":"code","57fa4911":"code","3eaf64e6":"code","6a421b36":"code","4d8eb973":"code","aa56a424":"code","0a74a878":"code","02e4d51e":"code","e43defe1":"markdown","4e8d7de1":"markdown","addd0b3f":"markdown","b6f41679":"markdown","50c7cf94":"markdown","8df80f33":"markdown","2289cc95":"markdown","eaea2be5":"markdown","40a9a630":"markdown"},"source":{"10ca9132":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","27bcf5d2":"df=pd.read_csv(\"\/kaggle\/input\/car-price-prediction\/CarPrice_Assignment.csv\")","371a82da":"df.head(5)","449bd391":"df.isnull().any()","5438d708":"df.duplicated().sum()","205df019":"df.shape","a7d8014e":"df.dtypes","c669b839":"df['symboling'].value_counts()","07ad347c":"import matplotlib.pyplot as plt\nimport seaborn as sb\nplt.figure(figsize=(20,10))\nplt.subplot(1,2,1)\nplt.title(\"Count of risky and safe cars in dataset\")\ndf['symboling'].value_counts().plot(kind='bar')\nplt.xlabel(\"Symboling: -2 : Not risky , 2: Highly Risky\")\nplt.ylabel(\"Count\")\nplt.legend()\nplt.tight_layout()\nplt.grid(True)\nplt.subplot(1,2,2)\nplt.title(\"Distribution plot for Symboling\")\nsb.distplot(df['symboling'])\nplt.xlabel(\"Symboling\")\nplt.ylabel(\"Count\")\nplt.legend()\nplt.tight_layout()\nplt.show()","85970c4f":"df['CarName']=df['CarName'].str.split(\" \",expand=True)\ndf['CarName'].unique()\n#replacing misspelled car names\ndf['CarName'].replace({'maxda':'mazda','Nissan':'nissan','porcshce':'porsche','toyouta':'toyota','vokswagen':'volkswagen','vw':'volkswagen'},inplace=True)","072e0062":"#potting total number of cars of each brand\ndf['CarName'].value_counts()\n#Thr are 32 cars from toyota brand folowed by nissan and mazda\nplt.figure(figsize=(15,9))\nplt.title(\"Cars for each brand\")\ndf['CarName'].value_counts().plot(kind='bar')\nplt.xlabel(\"Car brand name\")\nplt.ylabel(\"Counts\")\nplt.legend()\nplt.tight_layout()\nplt.grid(True)\nplt.show()","4d1923f2":"#Plotting to understand which brand cars are more safe or risky withprice value\nplt.figure(figsize=(20,12))\n\nplt.subplot(2,3,1)\nplt.title(\"Counts of cars for symboling =-2\")\nsb.countplot(data=df[df['symboling']== -2],x='CarName')\nplt.xlabel(\"Car Brands\")\nplt.xticks(rotation=90)\nplt.ylabel(\"Count value\")\nplt.tight_layout()\nplt.grid(True)\n\n\nplt.subplot(2,3,2)\nplt.title(\"Counts of cars for symboling =-1\")\nsb.countplot(data=df[df['symboling']== -1],x='CarName')\nplt.xlabel(\"Car Brands\")\nplt.xticks(rotation=90)\nplt.ylabel(\"Count value\")\nplt.tight_layout()\nplt.grid(True)\n\nplt.subplot(2,3,3)\nplt.title(\"Counts of cars for symboling =0\")\nsb.countplot(data=df[df['symboling']== -0],x='CarName')\nplt.xlabel(\"Car Brands\")\nplt.xticks(rotation=90)\nplt.ylabel(\"Count value\")\nplt.tight_layout()\nplt.grid(True)\n\nplt.subplot(2,3,4)\nplt.title(\"Counts of cars for symboling =1\")\nsb.countplot(data=df[df['symboling']== 1],x='CarName')\nplt.xlabel(\"Car Brands\")\nplt.xticks(rotation=90)\nplt.ylabel(\"Count value\")\nplt.tight_layout()\nplt.grid(True)\n\nplt.subplot(2,3,5)\nplt.title(\"Counts of cars for symboling =2\")\nsb.countplot(data=df[df['symboling']== 2],x='CarName')\nplt.xlabel(\"Car Brands\")\nplt.xticks(rotation=90)\nplt.ylabel(\"Count value\")\nplt.tight_layout()\nplt.grid(True)\n\n\nplt.subplot(2,3,6)\nplt.title(\"Counts of cars for symboling =3\")\nsb.countplot(data=df[df['symboling']== 3],x='CarName')\nplt.xlabel(\"Car Brands\")\nplt.xticks(rotation=90)\nplt.ylabel(\"Count value\")\nplt.tight_layout()\nplt.grid(True)\nplt.show()","d02be0df":"\n#For variable fueltype and aspiration\nplt.figure(figsize=(12,10))\nplt.subplot(1,2,1)\nplt.title(\"Box plot for fuel type \",fontsize=40)\nsb.boxplot(x='fueltype',y='price',data=df)\nplt.xlabel('fueltype',fontsize=30)\nplt.ylabel('price',fontsize=30)\nplt.tight_layout()\nplt.subplot(1,2,2)\nplt.title(\"Boxplot for aspration\",fontsize=40)\nsb.boxplot(x='aspiration',y='price',data=df)\nplt.xlabel('aspration',fontsize=30)\nplt.ylabel('price',fontsize=30)\nplt.tight_layout()\nplt.show()","7d9461de":"df['doornumber'].value_counts()\n\n#Plotting against doors\nplt.figure(figsize=(15,8))\nplt.title(\"Total doors and price value\")\nsb.boxplot(x='doornumber',y='price',data=df)\nplt.xlabel(\"Total number of doors\")\nplt.ylabel(\"Price\")\nplt.tight_layout()\nplt.show()","51fb3a6d":"df['carbody'].value_counts()\n\nplt.figure(figsize=(14,10))\nplt.subplot(1,2,1)\nplt.title(\"Counts of each car\")\nsb.countplot(data=df,x='carbody')\nplt.xlabel(\"Type of body\")\nplt.ylabel(\"Counts\")\nplt.tight_layout()\nplt.grid(True)\nplt.subplot(1,2,2)\nplt.title(\"Box plot for each body type\")\nsb.boxplot(x='carbody',y='price',data=df)\nplt.xlabel(\"Car body build\")\nplt.ylabel(\"Price\")\nplt.tight_layout()\nplt.show()","befd4801":"df['drivewheel'].value_counts()\n\n#looking how each wheel drive are related to price\nplt.figure(figsize=(12,10))\nplt.subplot(1,2,1)\nplt.title(\"Count of each brand wheel drive\")\nsb.countplot(x='CarName',hue='drivewheel',data=df)\nplt.xlabel(\"Car Brands\")\nplt.ylabel(\"Counts\")\nplt.xticks(rotation=90)\nplt.tight_layout()\nplt.grid(True)\nplt.subplot(1,2,2)\nplt.title(\"Drive wheel on prices\")\nsb.boxplot(x='drivewheel',y='price',data=df)\nplt.xlabel(\"Drivewheel type\")\nplt.ylabel(\"Price\")\nplt.tight_layout()\nplt.grid(True)\nplt.show()","a010422e":"plt.title(\"Engine location on prices\")\nsb.boxplot(x='enginelocation',y='price',data=df)\nplt.xlabel(\"Engine location\")\nplt.ylabel(\"Price\")\nplt.tight_layout()\nplt.grid(True)\nplt.show()","353e9c21":"df['wheelbase'].value_counts()\nma=df['price'].idxmax()\ndf['price'].max()\ndf['wheelbase'].max()","be25af5f":"plt.figure(figsize=(12,10))\nplt.title(\"Wheel base distribution\")\nsb.scatterplot(x='wheelbase',y='price',data=df)\nplt.xlabel(\"Wheel base\")\nplt.xticks(rotation=90)\nplt.ylabel(\"Price\")\nplt.legend()\nplt.tight_layout\nplt.grid(True)\nplt.show()","ba711182":"plt.figure(figsize=(12,10))\nplt.subplot(1,3,1)\nplt.title(\"Engine Type distribution\")\nsb.boxplot(x='enginetype',y='price',data=df)\nplt.xlabel(\"engnetype\")\nplt.ylabel(\"Price\")\nplt.tight_layout()\n\nplt.subplot(1,3,2)\nplt.title(\"cylindernumber  distribution\")\nsb.boxplot(x='cylindernumber',y='price',data=df)\nplt.xlabel(\"cylindernumber\")\nplt.ylabel(\"Price\")\nplt.tight_layout()\n\nplt.subplot(1,3,3)\nplt.title(\"fuelsystem distribution\")\nsb.boxplot(x='fuelsystem',y='price',data=df)\nplt.xlabel(\"fuelsystem\")\nplt.ylabel(\"Price\")\nplt.tight_layout()\n\nplt.show()","b84c87a8":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\n\ndf[['fueltype','aspiration','doornumber','enginelocation']]=df[['fueltype','aspiration','doornumber','enginelocation']].apply(le.fit_transform)","4e3dc3cb":"dummy=pd.get_dummies(data=df,columns=['carbody','drivewheel','enginetype','cylindernumber','fuelsystem'])\ndummy1=dummy.iloc[:,21:]\ndummy1.columns\ndummy1=dummy1.drop(['carbody_wagon','drivewheel_4wd','enginetype_ohcv','cylindernumber_three','fuelsystem_mfi'],axis=1)\n\ndf1=pd.concat([df,dummy1],axis=1)\ndf1.columns\ndf2=df1.drop(['car_ID','CarName','carbody','drivewheel','enginetype','cylindernumber','fuelsystem'],axis=1)\n","15354b68":"cor=df2.corr","39af8f9b":"df2.columns\ndf2=df2.drop(['fuelsystem_idi','compressionratio','carlength','wheelbase','curbweight','enginesize','citympg','drivewheel_rwd','enginetype_rotor'],axis=1)\ncore=df2.corr","d476f3fd":"# splitting test and train data set\ny=df2['price']\nx=df2.drop(['price'],axis=1)","c6089330":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)","fc1dae20":"from sklearn.linear_model import  LinearRegression\nle=LinearRegression()\n","c2092b44":"#fitting the model\nle.fit(x_train,y_train)","6ada8bc8":"y_pred=le.predict(x_test)","02c0a4e0":"residuals=y_pred-y_test","80bdd4b1":"le.score(x_test,y_test)","7c103628":"from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error\nr2_score(y_test,y_pred)\n","eed834a6":"print((\"MSE : {}\").format(mean_squared_error(y_test,y_pred)))\nprint((\"RMSE : {}\").format(np.sqrt(mse)))","72a67717":"#Normality of the residuals\nsb.distplot(residuals)","89a524bb":"sb.residplot(y_test,y_pred)","54302038":"#Checking linearity of the model\nsb.scatterplot(x=y_test,y=y_pred)","95c14b64":"sb.scatterplot(x=residuals,y=y_pred)","1022ca6f":"import scipy\nfig,ax=plt.subplots(figsize=(8,6))\nscipy.stats.probplot(residuals,plot=ax,fit=True)","e0a55358":"#for autocorelation\nfrom statsmodels.tsa.api import graphics as gp\ngp.plot_acf(residuals,lags=40,alpha=0.05)","5fee7d8d":"#Multicolinearity\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nvif=pd.DataFrame()\nvif[\"VIF\"]=[variance_inflation_factor(x.values,i)for i in range(x.shape[1])]\nvif[\"features\"]=x.columns","c6345490":"#bacjkward ellimination method\nimport statsmodels.api as smf\nx1=np.append(arr=np.ones((205,1)).astype(int),values=x,axis=1)\n###0:constant : 1 age, 2 :\nx1_opt=x1[:,[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]]\nmodel=smf.OLS(endog=y,exog=x1_opt).fit()\nmodel.summary()","c81c0494":"x1_opt=x1[:,[0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]]\nmodel=smf.OLS(endog=y,exog=x1_opt).fit()\nmodel.summary()","de438013":"x1_opt=x1[:,[0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]]\nmodel=smf.OLS(endog=y,exog=x1_opt).fit()\nmodel.summary()","67b42fec":"x1_opt=x1[:,[0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34]]\nmodel=smf.OLS(endog=y,exog=x1_opt).fit()\nmodel.summary()","6602a8c3":"\nx1_opt=x1[:,[0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,34]]\nmodel=smf.OLS(endog=y,exog=x1_opt).fit()\nmodel.summary()","57fa4911":"x1_opt=x1[:,[0,2,6,8,9,10,11,13,18,19,20,21,22,23,24,26,27,28]]\nmodel=smf.OLS(endog=y,exog=x1_opt).fit()\nmodel.summary()","3eaf64e6":"df3=df2.drop(['symboling','aspiration','doornumber','enginelocation','carheight',\n              'highwaympg','carbody_hardtop','carbody_hatchback','carbody_sedan',\n              'drivewheel_fwd','cylindernumber_four','cylindernumber_two','fuelsystem_1bbl',\n              'fuelsystem_2bbl','fuelsystem_4bbl', 'fuelsystem_mpfi', 'fuelsystem_spdi',\n               'fuelsystem_spfi'],axis=1)","6a421b36":"x_final=df3.drop(['price'],axis=1)\ny_final=df3['price']","4d8eb973":"le_final=LinearRegression()\nle_final.fit(x_final,y_final)","aa56a424":"le_final.score(x_final,y_final)","0a74a878":"x_new=np.array([1,70.0,4.40,3.30,150,7300,0,1,0,0,0,0,1,0,0,0])\nx_new=x_new.reshape((1,16))\ny_new=le_final.predict(x_new)","02e4d51e":"print(y_new)","e43defe1":"# Cars with rare engines are expensive compared to Engines at front","4e8d7de1":"From boxplot we can see that price of cars do not depend on number of doors","addd0b3f":"#Testing with new data\nfueltype:1\ncarwidth:70.3\nborerati:4.30\nstroke:3.30\nhorsepower:150\npeakrpm:7300\ncarbody_convertible:0\nenginetype_dohc:1\nenginetype_dohcv:0\nenginetype_l:0\nenginetype_ohc:0 \nenginetype_ohcf:0\ncylindernumber_eight:1\ncylindernumber_five':0\ncylindernumber_six'0\ncylindernumber_twelve:0","b6f41679":"#Verifying assumptions of the model","50c7cf94":"# Costliest car seems to have wheel base of around 112","8df80f33":"#Removing all co-related columns","2289cc95":"#From box plot it is visible that diseal vehicles are expensive that gas\n#and also turbo engines vehicles are costlier than std engine vehicles\n#we have few outliers related to gas and few outliers for std engines","eaea2be5":"#From above countplots we can see that volvo cars are the only cars that are highly \n#safer than any other cars and Mitbushi brand cars are highly risky cars with a count of 5\n#Porche is found to be risky with high price","40a9a630":"likewise removing all features greater than 0.05"}}