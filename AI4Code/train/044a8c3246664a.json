{"cell_type":{"f707f558":"code","ab0b1e9d":"code","7ca179f9":"code","6f3c3d97":"code","e7ed0b70":"code","8d71cace":"code","669478f6":"code","8a326b55":"code","45d41687":"code","a7b36b46":"code","8d661f51":"code","825916a3":"code","2d231348":"code","b60ea060":"code","7cf6a2dd":"code","26105e64":"code","d8f363d4":"code","fd2f50aa":"code","afa3d0aa":"code","94c5f9e5":"code","2c6476f1":"code","0d3e0585":"code","b8306e31":"code","d4a90a0e":"code","89771946":"code","91c9844c":"code","cac26720":"code","308b2821":"code","c64f5c89":"code","74350464":"code","58bbba8c":"markdown","269121a0":"markdown","04bcbcee":"markdown","ac81fc72":"markdown","4ffa730d":"markdown","e276d70a":"markdown","6b1cfab8":"markdown"},"source":{"f707f558":"import pandas as pd\nimport numpy as np\nimport sqlite3","ab0b1e9d":"conn=sqlite3.connect('..\/input\/database.sqlite')\ndata=pd.read_sql_query('SELECT * FROM Player_Attributes',conn)\ndata.head()","7ca179f9":"features = [\n       'potential', 'crossing', 'finishing', 'heading_accuracy',\n       'short_passing', 'volleys', 'dribbling', 'curve', 'free_kick_accuracy',\n       'long_passing', 'ball_control', 'acceleration', 'sprint_speed',\n       'agility', 'reactions', 'balance', 'shot_power', 'jumping', 'stamina',\n       'strength', 'long_shots', 'aggression', 'interceptions', 'positioning',\n       'vision', 'penalties', 'marking', 'standing_tackle', 'sliding_tackle',\n       'gk_diving', 'gk_handling', 'gk_kicking', 'gk_positioning',\n       'gk_reflexes']","6f3c3d97":"data=data.dropna()","e7ed0b70":"target ='overall_rating'","8d71cace":"data[target].describe()","669478f6":"X=data[features].copy()","8a326b55":"Y=data[target].copy()","45d41687":"X.sample()","a7b36b46":"Y.head()","8d661f51":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error","825916a3":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.33, random_state=99)","2d231348":"reg = LinearRegression()\nreg.fit(X_train,Y_train)","b60ea060":"Y_pred = reg.predict(X_test)\nY_pred","7cf6a2dd":"Lin_Reg_RMSE = np.sqrt(mean_squared_error(y_true=Y_test, y_pred=Y_pred))","26105e64":"Lin_Reg_RMSE","d8f363d4":"from sklearn.tree import DecisionTreeRegressor","fd2f50aa":"reg=DecisionTreeRegressor(max_depth=20)\nreg.fit(X_train,Y_train)","afa3d0aa":"Y_pred=reg.predict(X_test)\nY_pred","94c5f9e5":"Dtree_Reg_RMSE = np.sqrt(mean_squared_error(y_true=Y_test, y_pred=Y_pred))","2c6476f1":"Dtree_Reg_RMSE","0d3e0585":"target_c='overall_level'\ndata[target_c]=3\ndata.loc[data[target]>=85,target_c]=1\ndata.loc[(data[target]<85) & (data[target]>=70),target_c]=2","b8306e31":"data[[target,target_c]]","d4a90a0e":"from sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier","89771946":"Y=data[target_c].copy()","91c9844c":"X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.33,random_state=99)","cac26720":"X_train.head()","308b2821":"clasif=DecisionTreeClassifier(max_leaf_nodes=15,random_state=0)\nclasif.fit(X_train,Y_train)","c64f5c89":"pred=clasif.predict(X_test)","74350464":"accuracy_score(y_true=Y_test,y_pred=pred)","58bbba8c":"*************","269121a0":"Mean Error for Decission Tree Regression:","04bcbcee":"Accuracy Score for Deccision Tree Classifier:","ac81fc72":"Mean Error for Linear Regression:","4ffa730d":"******************************","e276d70a":"*****************************","6b1cfab8":"Below are the accuracy comparission for Linear Regression, Decission Tree Regression and Decission Tree Classifier."}}