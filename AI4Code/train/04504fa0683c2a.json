{"cell_type":{"b5bcbbaf":"code","6ae0c944":"code","c6ccfb15":"code","b03af068":"code","b410ef6c":"code","79eca6d0":"code","e216c437":"code","001a70ee":"code","09fbd2ee":"code","5aff483a":"code","1c164e76":"code","8d9e07b2":"code","92233907":"code","be7292df":"code","3bbc96e4":"code","946e6b18":"code","d71c9c16":"code","b7bdb92a":"code","03e2a6f4":"code","08b8c03f":"code","53367ce7":"code","c41c3395":"code","3018dceb":"code","56ceb547":"code","49209638":"code","c195ae51":"code","54fea803":"code","7e414d29":"code","3e9f991c":"code","00a71c64":"code","da00b076":"code","190076ab":"code","2977d104":"code","a60f548b":"code","a34880c4":"code","aab84f92":"code","ae7fcc6e":"code","65281609":"code","bb3f1ed9":"code","00b3fc99":"code","835905bc":"code","2bad7737":"code","6f1a5bd6":"code","7899a89d":"code","954ec557":"code","6f3ba0d5":"code","fb4e9249":"code","e52f7081":"code","ba8bb299":"code","8d6c43dd":"code","708d7b2a":"code","85dc710f":"code","e77a18d8":"code","e43e56e7":"code","8e8c954f":"code","acbb372f":"code","3f39cb71":"code","2c8fe6a5":"code","0e6d2137":"code","25e73eea":"code","b507c9e3":"code","9985c766":"code","811fae82":"code","975f9027":"markdown","32914178":"markdown","ed792c43":"markdown","033ce36d":"markdown","22717647":"markdown","4b5941a2":"markdown","3a0f3b3d":"markdown","f5c0b711":"markdown","7c5a52a1":"markdown","e5ed2648":"markdown","e156d61d":"markdown","6101ed4f":"markdown","5b9b3bc6":"markdown","088e42fd":"markdown","870a425f":"markdown","8d993de3":"markdown","944eba6c":"markdown","87621da8":"markdown","f2ada1b6":"markdown","37b8f69f":"markdown"},"source":{"b5bcbbaf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ae0c944":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib import cm\nimport seaborn as sns; sns.set()\nimport scipy\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import silhouette_samples\nfrom sklearn import metrics\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import confusion_matrix\nfrom scipy.cluster.hierarchy import linkage, dendrogram, fcluster\nfrom sklearn.metrics.cluster import adjusted_rand_score","c6ccfb15":"# load dataset and explore the first rows\ndf = pd.read_csv('\/kaggle\/input\/breast-cancer-gene-expression-cumida\/Breast_GSE45827.csv')\ndf.head()","b03af068":"# retrieve number of rows and columns in the dataset\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns in the breast cancer data set')","b410ef6c":"# check for missing values in dataset\ndf.isnull().sum()","79eca6d0":"# check for unique ID identifiers\nprint(f\"The total ids are {df['samples'].count()}, from those the unique ids are {df['samples'].value_counts().shape[0]} \")","e216c437":"# check for label distribution\nlabel_count = df['type'].value_counts()\nlabel_count","001a70ee":"# visualize distribution of labels\nfig = plt.figure(figsize=(7, 5))\ndf['type'].value_counts().plot(kind='bar')\nplt.xticks(rotation=45)\nplt.ylabel('Number of occurences', fontsize=12, fontweight='bold')\nplt.xlabel('Sample type', fontsize=12, fontweight='bold')\nplt.title('Distribution of label types in breast cancer data', fontsize=14, fontweight='bold')","09fbd2ee":"# assign labels to variable y\ny = df['type']\ny","5aff483a":"# select feature data for clustering\ndata = df.iloc[:,2:].values\ndata","1c164e76":"scaler = StandardScaler()","8d9e07b2":"scaled_data = scaler.fit_transform(data)","92233907":"scaled_data","be7292df":"### k-Means Clustering","3bbc96e4":"# Calculate the cluster errors for clusters from 1 to 15\ncluster_range = range( 1, 20 )\ncluster_errors = []\nfor num_clusters in cluster_range:\n  clusters = KMeans(num_clusters, n_init = 10 )\n  clusters.fit(scaled_data)\n  labels = clusters.labels_\n  centroids = clusters.cluster_centers_\n  cluster_errors.append( clusters.inertia_ )\nclusters_df = pd.DataFrame( { \"num_clusters\":cluster_range, \"cluster_errors\": cluster_errors } )\nclusters_df[0:20]","946e6b18":"# Elbow plot\nplt.figure(figsize=(12,6))\nplt.plot(clusters_df.num_clusters, clusters_df.cluster_errors, marker = \"o\" )\nplt.xlabel('Number of clusters', fontsize=12, fontweight='bold')\nplt.ylabel('Cluster error', fontsize=12, fontweight='bold')\nplt.title('Elbow plot for determining number of clusters', fontsize=14, fontweight='bold')\nplt.savefig('elbowplot.png')","d71c9c16":"# instantiate KMeans object\nkm = KMeans(n_clusters=6, random_state=0)","b7bdb92a":"# predict the cluster labels\nlabels = km.fit_predict(scaled_data)","03e2a6f4":"km.cluster_centers_.shape","08b8c03f":"centroids = km.cluster_centers_\nprint(centroids)","53367ce7":"# print cluster labels\nprint(labels)","c41c3395":"## creating a new dataframe only for labels and converting it into categorical variable\ndf_labels = pd.DataFrame(km.labels_ , columns = list(['label']))\n\ndf_labels['label'] = df_labels['label'].astype('category')","3018dceb":"# Joining the label dataframe with the original data frame. \ndf_labeled = df.join(df_labels)\ndf_labeled.head()","56ceb547":"df_labeled['label'].value_counts()","49209638":"print('Distortion: %.2f' % km.inertia_)","c195ae51":"def find_permutation(n_clusters, real_labels, labels):\n    permutation=[]\n    for i in range(n_clusters):\n        idx = labels == i\n        new_label=scipy.stats.mode(real_labels[idx])[0][0]  # Choose the most common label among data points in the cluster\n        permutation.append(new_label)\n    return permutation","54fea803":"permutation = find_permutation(6, y, km.labels_)\nprint(permutation)","7e414d29":"new_labels = [ permutation[label] for label in km.labels_]   # permute the labels\nprint(\"Accuracy score is\", accuracy_score(y, new_labels))","3e9f991c":"# plot confusion matrix\nmat = confusion_matrix(y, new_labels)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False,\n            xticklabels=permutation,\n            yticklabels=permutation)\nplt.xlabel('true label')\nplt.ylabel('predicted label');\nplt.savefig('confustion_matrix_1')","00a71c64":"# create silhoutte plot\ncluster_labels = np.unique(labels)\nn_clusters = cluster_labels.shape[0]\nsilhouette_vals = silhouette_samples(scaled_data,\n                                      labels,\n                                      metric='euclidean')\ny_ax_lower, y_ax_upper = 0, 0\nyticks = []\nfor i, c in enumerate(cluster_labels):\n     c_silhouette_vals = silhouette_vals[labels == c]\n     c_silhouette_vals.sort()\n     y_ax_upper += len(c_silhouette_vals)\n     color = cm.jet(float(i) \/ n_clusters)\n     plt.barh(range(y_ax_lower, y_ax_upper),\n              c_silhouette_vals,\n              height=1.0,\n              edgecolor='none',\n              color=color)\n     yticks.append((y_ax_lower + y_ax_upper) \/ 2.)\n     y_ax_lower += len(c_silhouette_vals)\nsilhouette_avg = np.mean(silhouette_vals)\nplt.axvline(silhouette_avg,\n             color=\"red\",\n             linestyle=\"--\")\nplt.yticks(yticks, cluster_labels + 1)\nplt.ylabel('Cluster')\nplt.xlabel('Silhouette coefficient')\nplt.tight_layout()\n#plt.show()\nplt.savefig('silhoutte_plot_1.png')","da00b076":"kmeansSilhouette_Score = metrics.silhouette_score(data, labels, metric='euclidean')","190076ab":"print(kmeansSilhouette_Score)","2977d104":"rand_index = adjusted_rand_score(labels_true = y, labels_pred = labels)\nprint('The Rand index is', round(rand_index, 2))","a60f548b":"# In order to find the number of dimensions explaining most of the variety in the data, plot cumulative explained variance\npca_plot = PCA().fit(scaled_data)\nplt.plot(np.cumsum(pca_plot.explained_variance_ratio_))\nplt.xlabel('number of components')\nplt.ylabel('cumulative explained variance');","a34880c4":"tsne = TSNE(random_state=0)","aab84f92":"tsne_result = tsne.fit_transform(data)","ae7fcc6e":"xi = tsne_result[:, 0]\nyi = tsne_result[:, 1]","65281609":"plt.figure(figsize=(16,10))\nsns.scatterplot(\n    x=xi, y=yi,\n    hue=y,\n    legend=\"full\",\n    alpha=1\n)\nplt.savefig('t-SNE_plot.png')","bb3f1ed9":"tsne_scaled = TSNE(random_state=0)","00b3fc99":"tsne_result_scaled = tsne.fit_transform(scaled_data)","835905bc":"xi_scaled = tsne_result_scaled[:, 0]\nyi_scaled = tsne_result_scaled[:, 1]","2bad7737":"plt.figure(figsize=(16,10))\nsns.scatterplot(\n    x=xi_scaled, y=yi_scaled,\n    hue=y,\n    legend=\"full\",\n    alpha=1\n)","6f1a5bd6":"km_tsne = KMeans(n_clusters = 6, random_state=0)","7899a89d":"# predict the cluster labels\nlabels_tsne = km_tsne.fit_predict(tsne_result)","954ec557":"labels_tsne.size","6f3ba0d5":"labels_tsne","fb4e9249":"## creating a new dataframe only for labels and converting it into categorical variable\ndf_labels_tsne = pd.DataFrame(km_tsne.labels_ , columns = list(['label']))\ndf_labels_tsne['label'] = df_labels_tsne['label'].astype('category')\ndf_labels_tsne.head()","e52f7081":"df_labels_tsne['label'].value_counts()","ba8bb299":"# silhouette plot\ncluster_labels = np.unique(labels_tsne)\nn_clusters = cluster_labels.shape[0]\nsilhouette_vals = silhouette_samples(tsne_result,\n                                      labels_tsne,\n                                      metric='euclidean')\ny_ax_lower, y_ax_upper = 0, 0\nyticks = []\nfor i, c in enumerate(cluster_labels):\n     c_silhouette_vals = silhouette_vals[labels == c]\n     c_silhouette_vals.sort()\n     y_ax_upper += len(c_silhouette_vals)\n     color = cm.jet(float(i) \/ n_clusters)\n     plt.barh(range(y_ax_lower, y_ax_upper),\n              c_silhouette_vals,\n              height=1.0,\n              edgecolor='none',\n              color=color)\n     yticks.append((y_ax_lower + y_ax_upper) \/ 2.)\n     y_ax_lower += len(c_silhouette_vals)\nsilhouette_avg = np.mean(silhouette_vals)\nplt.axvline(silhouette_avg,\n             color=\"red\",\n             linestyle=\"--\")\nplt.yticks(yticks, cluster_labels + 1)\nplt.ylabel('Cluster')\nplt.xlabel('Silhouette coefficient')\nplt.tight_layout()\n#plt.show()\nplt.savefig('silhoutte_plot_2.png')","8d6c43dd":"kmeansSilhouette_Score = metrics.silhouette_score(tsne_result, labels_tsne, metric='euclidean')\nkmeansSilhouette_Score","708d7b2a":"permutation = find_permutation(6, y, km_tsne.labels_)\nprint(permutation)","85dc710f":"new_labels = [ permutation[label] for label in km_tsne.labels_]   # permute the labels\nprint(\"Accuracy score is\", accuracy_score(y, new_labels))","e77a18d8":"rand_index = adjusted_rand_score(labels_true = y, labels_pred = labels_tsne)\nprint('The Rand index is', round(rand_index, 2))","e43e56e7":"import umap\nimport numba.targets","8e8c954f":"clusterable_embedding = umap.UMAP(\n    n_neighbors=30,\n    min_dist=0.0,\n    n_components=2,\n    random_state=42,\n).fit_transform(data)","acbb372f":"plt.figure(figsize=(16,10))\nsns.scatterplot(\n    x=clusterable_embedding[:, 0], y=clusterable_embedding[:, 1],\n    hue=y,\n    legend=\"full\",\n    alpha=1\n)\nplt.savefig('UMAP_plot.png')","3f39cb71":"km_umap = KMeans(n_clusters = 6)","2c8fe6a5":"# predict the cluster labels\nlabels_umap = km_umap.fit_predict(clusterable_embedding)","0e6d2137":"# silhouette plot\ncluster_labels = np.unique(labels_umap)\nn_clusters = cluster_labels.shape[0]\nsilhouette_vals = silhouette_samples(clusterable_embedding,\n                                      labels_umap,\n                                      metric='euclidean')\ny_ax_lower, y_ax_upper = 0, 0\nyticks = []\nfor i, c in enumerate(cluster_labels):\n     c_silhouette_vals = silhouette_vals[labels == c]\n     c_silhouette_vals.sort()\n     y_ax_upper += len(c_silhouette_vals)\n     color = cm.jet(float(i) \/ n_clusters)\n     plt.barh(range(y_ax_lower, y_ax_upper),\n              c_silhouette_vals,\n              height=1.0,\n              edgecolor='none',\n              color=color)\n     yticks.append((y_ax_lower + y_ax_upper) \/ 2.)\n     y_ax_lower += len(c_silhouette_vals)\nsilhouette_avg = np.mean(silhouette_vals)\nplt.axvline(silhouette_avg,\n             color=\"red\",\n             linestyle=\"--\")\nplt.yticks(yticks, cluster_labels + 1)\nplt.ylabel('Cluster')\nplt.xlabel('Silhouette coefficient')\nplt.tight_layout()\n#plt.show()\nplt.savefig('silhoutte_plot_3.png')","25e73eea":"kmeansSilhouette_Score = metrics.silhouette_score(clusterable_embedding, labels_umap, metric='euclidean')\nkmeansSilhouette_Score","b507c9e3":"permutation = find_permutation(6, y, km_umap.labels_)\nprint(permutation)","9985c766":"new_labels = [ permutation[label] for label in km_umap.labels_]   # permute the labels\nprint(\"Accuracy score is\", accuracy_score(y, new_labels))","811fae82":"rand_index = adjusted_rand_score(labels_true = y, labels_pred = labels_umap)\nprint('The Rand index is', round(rand_index, 2))","975f9027":"## 3. Clustering Approaches","32914178":"Calculation of accuracy score. Since the k-means algorithm doesn\u00b4t have any knowledge on the true cluster labels, the permutations need to be found before comparing to the true labels.","ed792c43":"## 1. Exploratory Data Analysis\n\nThe dataset GSE45827 was taken from kaggle (https:\/\/www.kaggle.com\/brunogrisci\/breast-cancer-gene-expression-cumida). It represents gene expression data from breast cancer samples curated by the Curated Microarray Database CuMiDa (http:\/\/sbcb.inf.ufrgs.br\/cumida#). CuMiDa is a repository for machine learning that contains 78 handpicked cancer microarray datasets from 30.000 studies from the Gene Expression Omnibus (GEO), a public functional genomics data repository (https:\/\/www.ncbi.nlm.nih.gov\/geo\/). The data is already in a pre-processed and normalized format ready to be used for experimental ML approaches.","033ce36d":"PCA didn\u00b4t seem to be a good approach as it would need 100 components to explain most of the data. Try t-SNE instead on original data.","22717647":"Before applying clustering, we scale our data such that each feature has unit variance. This is necessary because fitting algorithms highly depend on the scaling of the features. Here we use the StandardScaler module for scaling the features individually. StandardScaler subtracts the mean from each feature and then scales to unit variance.","4b5941a2":"Perform k-means clustering after UMAP embedding","3a0f3b3d":"Run k-means algorithm on data after t-SNE with original data. t-SNE on scaled data visually doesn\u00b4t separate the clusters as well as with the original data.","f5c0b711":"Although the number of classes with 6 for the cancer subtypes is known for this dataset, perform a calculation and plotting of the cluster errors to see whether 6 is really the optimal size for k.","7c5a52a1":"### Apply t-SNE","e5ed2648":"### Apply PCA to data before clustering","e156d61d":"t-SNE does better on original data than on scaled data.","6101ed4f":"### UMAP","5b9b3bc6":"Create silhouette plot and calculate silhouette score","088e42fd":"The total sum of squared distances of every data point from respective centroid is also called inertia. Let us print the inertia value for all k values. That k at which the inertia stop to drop significantly (elbow method) will be the best k.","870a425f":"## 2. Data Preparation for Clustering","8d993de3":"In order to explain 95% of data, one would need 100 principal components.","944eba6c":"There are several ways to evaluate a clustering. In the following the cluster error, the silhoutte plot and score as well as the accuracy are calculated. Since the data set already has labels assigned to it, it is possible to calculate the amount of correct cluster assignments\nCalculatation of cluster error","87621da8":"### Evaluate k-means Clustering","f2ada1b6":"This dataset has \"ground truth\" cell type labels available. We can use these to assess our cluster labels a bit more rigorously using the adjusted Rand index. This index is a measure between (0, 1) which indicates the similarity between two sets of categorical labels (e.g., our cell type labels and cluster labels). A value of 1 means the two clusterings are identical, and 0 means the level of similarity expected by random chance.","37b8f69f":"Try t-SNE on scaled data."}}