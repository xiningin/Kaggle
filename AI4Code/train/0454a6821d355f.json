{"cell_type":{"d46b2f9a":"code","391b9dfb":"code","218fab2f":"code","9e8ef1a1":"code","8a772b70":"code","5bf1dbfa":"code","d2ec4efa":"code","5caa3e8b":"code","f675db14":"code","825e4682":"code","7f298599":"code","d8929d30":"code","d4eab321":"code","8445d131":"code","a9374733":"code","3776df4c":"markdown","fde651e5":"markdown","2ebd7ae1":"markdown","d2121a19":"markdown"},"source":{"d46b2f9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","391b9dfb":"traindf = pd.read_csv(\"..\/input\/train.csv\")\ntestdf = pd.read_csv(\"..\/input\/test.csv\")\ngsdf = pd.read_csv(\"..\/input\/gender_submission.csv\")","218fab2f":"traindf.head()","9e8ef1a1":"traindf.shape","8a772b70":"traindf['Fare'].describe().reset_index()","5bf1dbfa":"cols = ['Survived', 'Sex', 'Pclass', 'SibSp', 'Parch', 'Embarked']\nnr_rows = 2\nnr_cols = 3\n\nfig, axs = plt.subplots(nr_rows, nr_cols, figsize=(nr_cols*3.5,nr_rows*3))\n\nfor r in range(0,nr_rows):\n    for c in range(0,nr_cols):  \n        \n        i = r*nr_cols+c       \n        ax = axs[r][c]\n        sns.countplot(traindf[cols[i]], hue=traindf[\"Survived\"], ax=ax)\n        ax.set_title(cols[i])\n        ax.legend() \n        \nplt.tight_layout()   ","d2ec4efa":"bins = np.arange(0, 80, 5)\ng = sns.FacetGrid(traindf, row='Sex', col='Pclass', hue='Survived', margin_titles=True, aspect=1.1)\ng.map(sns.distplot, 'Age', kde=False, bins=bins, hist_kws=dict(alpha=0.6))\ng.add_legend()  \nplt.show()  ","5caa3e8b":"sns.barplot(x='Sex', y='Survived', hue='Pclass', data=traindf)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival as function of Pclass and Sex\")\nplt.show()","f675db14":"traindf['sexn'] = traindf['Sex'].apply(lambda x: 1 if x == 'female' else 0 )","825e4682":"import math\ntraindf['age_f'] = traindf['Age'].apply(lambda x: x if not math.isnan(x) else 0)\ntraindf['age_nan'] = traindf['Age'].apply(lambda x: 1 if math.isnan(x) else 0)","7f298599":"features = ['age_f', 'sexn', 'age_nan', 'Pclass', 'Fare']","d8929d30":"traindf[features].head()\n","d4eab321":"\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\nforest = RandomForestClassifier(n_estimators=100,\n                                criterion='gini',\n                                max_depth=5,\n                                min_samples_split=10,\n                                min_samples_leaf=5,\n                                random_state=0)\nX_train, X_test, y_train, y_test = train_test_split(traindf[features], traindf[\"Survived\"])\nX_train.head()\nforest.fit(X_train, y_train)\nprint(\"Random Forest score: {0:.2}\".format(forest.score(X_test, y_test)))\n","8445d131":"plt.bar(np.arange(len(features)), forest.feature_importances_)\nplt.xticks(np.arange(len(features)), features, rotation='vertical', ha='left')\nplt.tight_layout()","a9374733":"X_test\n\n# This is an example! Also a bad practise :D\n#AGE, SEX, AGE_NAN, PClass, FARE\ntestcase = np.array([[25, 0, 0, 1, 2]])\nprediction = forest.predict(testcase)[0]\npproba = forest.predict_proba(testcase)[0]\nprint(\"Prediction for test case: %s (perish -> %.2f, surv -> %.2f)\" %\n      ('PERISH' if prediction == 0 else 'SURVIVED!', pproba[0], pproba[1]))\n","3776df4c":"## **Preprocessing**","fde651e5":"## **Exploratory Data Analysis (EDA)**","2ebd7ae1":"### Feature selection and Training ","d2121a19":"### Variable explanation\n* PassengerId: simple ID for each passenger\n* Survived: {1, 0} survived or perish to the titanic sinking\n* Pclass: A proxy for socio-economic status (SES) 1st = Upper 2nd = Middle 3rd = Lower\n* Name: Name of the passenger\n* Sex: Sex of the passenger\n* Age: Age in years of the passenger\n* SibSp: The dataset defines family relations in this way...  Sibling = brother, sister, stepbrother, stepsister.  Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n* Parch: The dataset defines family relations in this way... Parent = mother, father. Child = daughter, son, stepdaughter, stepson. Some children travelled only with a nanny, therefore parch=0 for them.\n* Ticket: Ticket number\n* Fare: Passenger fare\n* Cabin: Cabin number\n* Embarked: Port of embarkation. C = Cherbourg, Q = Queenstown, S = Southampton\n"}}