{"cell_type":{"b2b4040e":"code","6ba07ccf":"code","863da89d":"code","8bcbe299":"code","f34c4e3d":"code","210bcce3":"code","9ea2a034":"code","23102ad6":"code","6c280630":"code","17bd6d1d":"code","1b7b35a0":"code","3d3de1a8":"code","e321270f":"code","8a959397":"code","eeb737cf":"code","187aad64":"code","4ee8b34d":"code","68a4519b":"code","f30d8ced":"code","24c0e5e0":"code","931c0393":"code","15e77779":"code","0cca0183":"code","c3ccb639":"code","42366c8c":"code","7651a7ba":"code","9e4f5939":"code","30889eee":"code","87bcaf07":"code","c7d6df3e":"code","8f28a70e":"code","66a45591":"code","36cc9234":"code","cb45739c":"code","e6d4ed81":"code","96e29e31":"code","46d4b590":"code","e28b79da":"code","145e37ee":"code","9a1826e1":"code","59e47312":"code","52f8eda2":"code","05162b40":"code","ca5527a0":"code","17cc6fcb":"code","b86b179b":"code","f4dd5f68":"code","3cb2f292":"code","1489e207":"code","51cf480d":"code","ce574a7d":"code","f5a19e06":"code","46ae40b2":"code","9a48ac56":"code","ed6b41cb":"code","666f4d82":"code","098ff873":"code","956114b0":"code","9269369a":"code","8586a402":"code","a6c754cb":"code","afc5b678":"code","4e4f921c":"code","efd8bc07":"code","72e2107c":"code","09ffe761":"code","e2b5493e":"code","d75faa33":"code","1ffc7afa":"code","15a08cfb":"code","78a91d18":"code","58897597":"code","8d55ed16":"code","1fc39445":"code","3c25890a":"code","dd1e3866":"code","4c25dc44":"code","c7c8933c":"code","2395e4b6":"code","3458e258":"code","3ff44e79":"code","780cf591":"code","07b8e837":"code","610791f8":"code","dde48a15":"code","01289327":"code","f00ee5e4":"code","f57c058f":"code","25a6497a":"code","0c6e4338":"code","26221516":"code","baf72e5d":"code","0aaebbf9":"code","4e6cbab7":"code","03bda915":"code","9ae13ab9":"code","c1c275e7":"code","07f01c89":"code","ce5fc15f":"code","44a7a4e5":"code","72b07673":"code","7207a1b8":"code","bde77150":"code","b38f1fff":"code","461bb2e7":"code","66c5bafc":"code","6abdd989":"code","5b951572":"markdown","1fb78d98":"markdown","d5bff40e":"markdown","fe6e12ee":"markdown","7cd84d0e":"markdown","5df49204":"markdown","b1e95711":"markdown","6d1abe4d":"markdown","c500b17c":"markdown","7c055424":"markdown","4dda2d30":"markdown","0905ab30":"markdown","68583951":"markdown","e70b8246":"markdown","5e8985d0":"markdown","a21031f5":"markdown","48ea8fb3":"markdown","c609b2fa":"markdown","a02262bf":"markdown","3e103472":"markdown"},"source":{"b2b4040e":"#Basic Libraries\nimport numpy as np\nimport pandas as pd\n\n# Visualizations Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.offline as pyo\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.figure_factory as ff","6ba07ccf":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","863da89d":"all_matches = pd.read_csv(r'\/kaggle\/input\/uefa-euro-cup-19602016\/All Matches.csv')\nall_matches.head()","8bcbe299":"national_tapp = pd.read_csv(r'\/kaggle\/input\/uefa-euro-cup-19602016\/National Teams Appearance.csv') \nnational_tapp.head()","f34c4e3d":"general_stat = pd.read_csv(r'\/kaggle\/input\/uefa-euro-cup-19602016\/Participated Teams General Statistics.csv')\ngeneral_stat.head()","210bcce3":"top_goalscr = pd.read_csv(r'\/kaggle\/input\/uefa-euro-cup-19602016\/Top Goal Scorers.csv')\ntop_goalscr.head()","9ea2a034":"# country\nlist_country = pd.unique(all_matches['HomeTeamName'])\nfor i in range(len(list_country)):\n    list_country[i] = list_country[i].strip('\\xa0')\n","23102ad6":"all_matches[\"Result\"] = all_matches['HomeTeamGoals'] - all_matches['AwayTeamGoals']\nall_matches['Result'] = all_matches['Result'].astype(str)","6c280630":"for i in range(len(all_matches['Result'])): \n    if '-' in all_matches['Result'][i]:\n      all_matches['Result'][i] = \"A\"\n    elif all_matches['Result'][i] == '0':\n        all_matches['Result'][i] = 'D'\n    else:\n        all_matches['Result'][i] = 'H'","17bd6d1d":"all_matches.head()","1b7b35a0":"result_per_y = all_matches.groupby(['Year'])['Result'].value_counts()","3d3de1a8":"\ntrace1 = go.Bar(\n    x=result_per_y.loc[:,'H'].index,\n    y=result_per_y.loc[:,'H'].values,\n    name='HomeWin',\n    #orientation = 'h',\n    marker=dict(\n        color='pink'\n    )\n)\ntrace2 = go.Bar(\n    x=result_per_y.loc[:,'D'].index,\n    y=result_per_y.loc[:,'D'].values,\n    name='Draw',\n    #orientation = 'h',\n    marker=dict(\n        color='darkblue'\n    )\n)\ntrace3 = go.Bar(\n    x=result_per_y.loc[:,'A'].index,\n    y=result_per_y.loc[:,'A'].values,\n    name='AwayWin',\n    #orientation = 'h',\n    marker=dict(\n        color='red'\n    )\n)\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(\n    title='General Statistic About Results In Each Euro Season',\n    font=dict(\n        size=16\n    ),\n    barmode = 'stack',\n    legend=dict(\n        font=dict(\n            size=16\n        )\n    )\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e321270f":"d= pd.DataFrame(all_matches['Result'].value_counts())\nfig = px.pie(d,values='Result',names=['HomeTeamWin','Draw','AwayTeamWin'],hole=0.4,opacity=0.6,\n            color_discrete_sequence=['#17869E','#4F7942','#FFBF00'],\n             labels={'label':'Result','Result':'No. Of Samples'})\n\nfig.add_annotation(text='Result',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\n\nfig.update_layout(\n    font_family='monospace',\n    title=dict(text='The Percentage Of Each Result 1960-2016',x=0.47,y=0.98,\n               font=dict(color='#636363',size=20)),\n    legend=dict(x=0.37,y=-0.05,orientation='h',traceorder='reversed'),\n    hoverlabel=dict(bgcolor='white'))\n\nfig.update_traces(textposition='outside', textinfo='percent+label')\n\niplot(fig)","8a959397":"stage_result = all_matches[['Stage','Result']]\nthree_stage = stage_result[(stage_result['Stage'] == 'Semi-finals') | (stage_result['Stage'] == 'Final') | (stage_result['Stage'] == 'Quarter-finals')]\nthree_stage_c = three_stage.groupby(['Stage'])['Result'].value_counts()","eeb737cf":"three_stage_c","187aad64":"# visualize three stage result\ntrace1 = go.Bar(\n    x=three_stage_c.loc[:,'H'].index,\n    y=three_stage_c.loc[:,'H'].values,\n    name='HomeWin',\n    #orientation = 'h',\n    marker=dict(\n        color='pink'\n    )\n)\ntrace2 = go.Bar(\n    x=three_stage_c.loc[:,'D'].index,\n    y=three_stage_c.loc[:,'D'].values,\n    name='Draw',\n    #orientation = 'h',\n    marker=dict(\n        color='darkblue'\n    )\n)\ntrace3 = go.Bar(\n    x=three_stage_c.loc[:,'A'].index,\n    y=three_stage_c.loc[:,'A'].values,\n    name='AwayWin',\n    #orientation = 'h',\n    marker=dict(\n        color='red'\n    )\n)\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(\n    title='Result In Three Stage: Final, Semi Finals And Quarter Finals In 90 Minutes',\n    font=dict(\n        size=13\n    ),\n    legend=dict(\n        font=dict(\n            size=16\n        )\n    )\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","4ee8b34d":"total_result = all_matches[['HomeTeamName','AwayTeamName','Stage','SpecialWinConditions','Year','Result']]\ntotal_result = total_result[~total_result['SpecialWinConditions'].isnull()]","68a4519b":"# split team win out of 'SpecialWinConditions' column\nfor i in range(len(total_result)):\n    total_result['SpecialWinConditions'].iloc[i] = total_result['SpecialWinConditions'].iloc[i].replace('\\xa0',\"\")\n    lss = total_result['SpecialWinConditions'].iloc[i].split(\" win\", maxsplit=1)\n    total_result['SpecialWinConditions'].iloc[i] = lss[0]","f30d8ced":"# convert result in 90 minutes to result in full match (speacial conditions such as penatiles, extra time)\nfor i in range(len(total_result)):\n    # clean string before compare\n    if total_result['SpecialWinConditions'].iloc[i].strip() == total_result['HomeTeamName'].iloc[i].replace('\\xa0',\"\"):\n        total_result['Result'].iloc[i] = 'H'\n    else:\n        total_result['Result'].iloc[i] = 'A'","24c0e5e0":"non_cond_result = all_matches[['HomeTeamName','AwayTeamName','Stage','SpecialWinConditions','Year','Result']]\nnon_cond_result = non_cond_result[non_cond_result['SpecialWinConditions'].isnull()]\nnon_cond_result = non_cond_result[(non_cond_result['Stage'] == 'Semi-finals') | (non_cond_result['Stage'] == 'Final') | (non_cond_result['Stage'] == 'Quarter-finals')]","931c0393":"total_result = total_result[(total_result['Stage'] == 'Semi-finals') | (total_result['Stage'] == 'Final') | (total_result['Stage'] == 'Quarter-finals')]\nfinal_result = pd.concat([non_cond_result,total_result])\nfinal_result","15e77779":"full_match_stage = final_result.groupby(['Stage'])['Result'].value_counts()","0cca0183":"# visualize three stage result\ntrace1 = go.Bar(\n    x=full_match_stage.loc[:,'H'].index,\n    y=full_match_stage.loc[:,'H'].values,\n    name='HomeWin',\n    #orientation = 'h',\n    marker=dict(\n        color='pink'\n    )\n)\ntrace2 = go.Bar(\n    x=full_match_stage.loc[:,'A'].index,\n    y=full_match_stage.loc[:,'A'].values,\n    name='AwayWin',\n    #orientation = 'h',\n    marker=dict(\n        color='darkblue'\n    )\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title='Result In Three Stage: Final, Semi Finals And Quarter Finals In Full Match',\n    font=dict(\n        size=13\n    ),\n    legend=dict(\n        font=dict(\n            size=16\n        )\n    )\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","c3ccb639":"fullm_per_y = final_result.groupby(['Year'])['Result'].value_counts()","42366c8c":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=fullm_per_y.loc[:,'H'].index, y=fullm_per_y.loc[:,'H'].values,\n                    mode='lines+markers',\n                    name='HomeWin'))\nfig.add_trace(go.Scatter(x=fullm_per_y.loc[:,'A'].index, y=fullm_per_y.loc[:,'A'].values,\n                    mode='lines+markers',\n                    name='AwayWin'))\nfig.update_layout(title='The Change In Full Match Of Three Stage Result Since 1960',\n                   xaxis_title='Year',\n                   yaxis_title='The Number Of Win')\niplot(fig)","7651a7ba":"detail_each_stage = final_result.groupby(['Year','Stage'])['Result'].value_counts()\n#final\nfinal_stage_rp = pd.merge(detail_each_stage.loc[slice(1960,2016),['Final'],['H']],detail_each_stage.loc[slice(1960,2016),['Final'],['A']]\n,how='outer', on=[\"Year\", \"Stage\"]).sort_values(by=['Year'],ascending=True)\nfinal_stage_rp.fillna(0, inplace=True)\nfinal_stage_rp.rename(columns={'Result_x':'HomeWin','Result_y':'AwayWin'},inplace=True)\n\n#semi_final\nsemi_rp = pd.merge(detail_each_stage.loc[slice(1960,2016),['Semi-finals'],['H']],detail_each_stage.loc[slice(1960,2016),['Semi-finals'],['A']]\n,how='outer', on=[\"Year\", \"Stage\"]).sort_values(by=['Year'],ascending=True)\nsemi_rp.fillna(0, inplace=True)\nsemi_rp.rename(columns={'Result_x':'HomeWin','Result_y':'AwayWin'},inplace=True)\n\n#quarter\nquarter_rp = pd.merge(detail_each_stage.loc[slice(1960,2016),['Quarter-finals'],['H']],detail_each_stage.loc[slice(1960,2016),['Quarter-finals'],['A']]\n,how='outer', on=[\"Year\", \"Stage\"]).sort_values(by=['Year'],ascending=True)\nquarter_rp.fillna(0, inplace=True)\nquarter_rp.rename(columns={'Result_x':'HomeWin','Result_y':'AwayWin'},inplace=True)","9e4f5939":"\nfig = px.histogram(all_matches, x=\"Attendance\", color=\"Result\",template='plotly_white',\n                  marginal='box',opacity=0.7,nbins=35,color_discrete_sequence=['#17869E','#4F7942','#FFBF00'])\nfig.update_layout(\n    font_family='monospace',\n    title=dict(text='Whether Attendance Affect Result',x=0.53,y=0.95,\n               font=dict(color='#636363',size=20)),\n    xaxis_title_text='Attendance',\n    yaxis_title_text='Count',\n    legend=dict(x=1,y=0.96,bordercolor='#DADADA',borderwidth=0,tracegroupgap=5),\n    bargap=0.3,\n)\niplot(fig)","30889eee":"final_result['HomeTeamName'] = final_result['HomeTeamName'].apply(lambda x:x.strip('\\xa0'))\nfinal_result['AwayTeamName'] = final_result['AwayTeamName'].apply(lambda x:x.strip('\\xa0'))\ndf = final_result[(final_result['Stage'] == 'Semi-finals')|(final_result['Stage']=='Final')]\ndf","87bcaf07":"#List team win in semi and final\nlist_hw = df[df['Result']=='H']['HomeTeamName'].unique()\nlist_aw = df[df['Result']=='A']['AwayTeamName'].unique()\nprint('list_hw: ',list_hw)\nprint('list_aw: ',list_aw)\nnot_semi_final = all_matches[~((all_matches['Stage']=='Semi-finals')|(all_matches['Stage']=='Final'))] \nnot_semi_final['HomeTeamName'] = not_semi_final['HomeTeamName'].apply(lambda x:x.strip('\\xa0'))\nnot_semi_final['AwayTeamName'] = not_semi_final['AwayTeamName'].apply(lambda x:x.strip('\\xa0'))","c7d6df3e":"list_team = {}\ndef extract_teamlist(team_when_hw,team_when_aw,list_team_type): #List team win and lose in semi-finals and final\n    list_1 = df[df['Result']=='H'][str(team_when_hw)].unique()\n    list_2 = df[df['Result']=='A'][str(team_when_aw)].unique()\n    not_semi_final = all_matches[~((all_matches['Stage']=='Semi-finals')|(all_matches['Stage']=='Final'))]\n    list_team[str(list_team_type)] = list(set(list_1) | set(list_2))  \n\nnot_semi_final['HomeTeamName'] = not_semi_final['HomeTeamName'].apply(lambda x:x.strip('\\xa0'))\nnot_semi_final['AwayTeamName'] = not_semi_final['AwayTeamName'].apply(lambda x:x.strip('\\xa0'))","8f28a70e":"#get team win\nextract_teamlist('HomeTeamName','AwayTeamName','list_teamwin')\n#get team lose\nextract_teamlist('AwayTeamName','HomeTeamName','list_teamlose')","66a45591":"list_team","36cc9234":"#return the number of goals of team win and team lose in previous matches\ntemp_dta = pd.DataFrame()\n\ndef tw_performance(list_team_type,team_position,result_team,team_data,team_position_goals):\n    dict_performance = {}\n    df  = not_semi_final[not_semi_final['Result']==str(result_team)]\n    for tw in list_team_type:\n        if df[str(team_position)].str.contains(str(tw)).any():\n            count = df[str(team_position)].str.contains(str(tw)).sum()\n            dta = df[df[str(team_position)]== str(tw)]\n            dict_performance[tw] = [count, dta[str(team_position_goals)].sum()] \n        else:\n            continue \n        team_data = pd.DataFrame.from_dict(dict_performance, orient='index', columns=['Num_matches','Num_Goals'])\n    return team_data.reset_index()","cb45739c":"r1 = tw_performance(list_team['list_teamwin'],'HomeTeamName','H',temp_dta,'HomeTeamGoals')\nr2 = tw_performance(list_team['list_teamwin'],'AwayTeamName','A',temp_dta,'AwayTeamGoals')\ncombine_r1r2 = pd.merge(r1,r2,on=['index'],how='outer')","e6d4ed81":"combine_r1r2","96e29e31":"r3 = tw_performance(list_team['list_teamwin'],'HomeTeamName','D',temp_dta,'HomeTeamGoals')\nr4 = tw_performance(list_team['list_teamwin'],'AwayTeamName','D',temp_dta,'AwayTeamGoals')\ncombine_r3r4 = pd.merge(r3,r4,on=['index'],how='outer')","46d4b590":"combine_r3r4","e28b79da":"r5 = tw_performance(list_team['list_teamlose'],'AwayTeamName','H',temp_dta,'AwayTeamGoals')\nr6 = tw_performance(list_team['list_teamlose'],'HomeTeamName','A',temp_dta,'HomeTeamGoals')\ncombine_r5r6 = pd.merge(r5,r6,on=['index'],how='outer')\ncombine_r5r6","145e37ee":"r7 = tw_performance(list_team['list_teamlose'],'AwayTeamName','D',temp_dta,'AwayTeamGoals')\nr8 = tw_performance(list_team['list_teamlose'],'HomeTeamName','D',temp_dta,'HomeTeamGoals')\ncombine_r7r8 = pd.merge(r7,r8,on=['index'],how='outer')\ncombine_r7r8","9a1826e1":"# team win\ncombine_win_all = pd.merge(combine_r1r2,combine_r3r4,on=['index'],how='outer')\ncombine_win_all.fillna(0,inplace=True)\ncombine_win_all['Sum_goals'] = combine_win_all.filter(regex='^Num_Goals',axis=1).sum(axis=1)\ncombine_win_all['Sum_matches'] = combine_win_all.filter(regex='^Num_matches',axis=1).sum(axis=1)\ncombine_win_all.iloc[:,1:]=combine_win_all.iloc[:,1:].astype('int64')\ncombine_win_all.drop(columns=list(combine_win_all.filter(regex='^Num',axis=1).columns),axis=1,inplace=True)\ncombine_win_all.rename(columns={'index':'TeamName'},inplace=True)\ncombine_win_all['Goals_per_match'] = round(combine_win_all['Sum_goals']\/combine_win_all['Sum_matches'],2)\ncombine_win_all.sort_values(by='Sum_goals', ascending=True,inplace=True)\n#team lose\ncombine_lose_all = pd.merge(combine_r5r6,combine_r7r8,on=['index'],how='outer')\ncombine_lose_all.fillna(0,inplace=True)\ncombine_lose_all['Sum_goals'] = combine_lose_all.filter(regex='^Num_Goals',axis=1).sum(axis=1)\ncombine_lose_all['Sum_matches'] = combine_lose_all.filter(regex='^Num_matches',axis=1).sum(axis=1)\ncombine_lose_all.iloc[:,1:]=combine_lose_all.iloc[:,1:].astype('int64')\ncombine_lose_all.drop(columns=list(combine_lose_all.filter(regex='^Num',axis=1).columns),axis=1,inplace=True)\ncombine_lose_all.rename(columns={'index':'TeamName'},inplace=True)\ncombine_lose_all['Goals_per_match'] = round(combine_lose_all['Sum_goals']\/combine_lose_all['Sum_matches'],2)\ncombine_lose_all.sort_values(by='Sum_goals', ascending=True,inplace=True)","59e47312":"combine_lose_all","52f8eda2":"from plotly.subplots import make_subplots\n\n# Creating two subplots\nfig = make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                    shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(go.Bar(\n    x=combine_win_all['Sum_goals'],\n    y=combine_win_all['TeamName'],\n    marker=dict(\n        color='rgba(50, 171, 96, 0.6)',\n        line=dict(\n            color='rgba(50, 171, 96, 1.0)',\n            width=1),\n    ),\n    name='The number of goals that each team win scored',\n    orientation='h',\n), 1, 1)\n\nfig.append_trace(go.Bar(\n    x=combine_lose_all['Sum_goals'],\n    y=combine_lose_all['TeamName'],\n    marker=dict(\n        color='rgba(10, 135, 30, 0.2)',\n        line=dict(\n            color='rgba(14, 121, 30, 1.0)',\n            width=1),\n    ),\n    name='The number of goals that each team lose scored',\n    orientation='h',\n), 1, 2)\n\nfig.update_layout(\n    title='''Goals per semi-final and final stage's team win and team lose in previous stage''',\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n        domain=[0, 0.9],\n    ),\n    yaxis2=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n        linecolor='rgba(102, 102, 102, 0.8)',\n        linewidth=2,\n        domain=[0, 0.9],\n    ),\n    xaxis=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0, 0.42],\n    ),\n    xaxis2=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0.55, 1],\n    ),\n    legend=dict(x=0.029, y=1.1, font_size=10),\n    margin=dict(l=100, r=20, t=70, b=70),\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n)\n\nannotations = []\n\n# Adding labels\nfor ydn, yd, xd,xdn in zip(combine_lose_all['Sum_goals'], combine_win_all['Sum_goals'], combine_win_all['TeamName'],combine_lose_all['TeamName']):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x2', yref='y2',\n                            y=xdn, x=ydn + 1 ,\n                            text= str(ydn),\n                            font=dict(family='Arial', size=12,\n                                      color='rgb(128, 0, 128)'),\n                            showarrow=False))\n    # labeling the bar net worth\n    annotations.append(dict(xref='x1', yref='y1',\n                            y=xd, x=yd + 3 ,\n                            text=str(yd),\n                            font=dict(family='Arial', size=12,\n                                      color='rgb(35,7,43)'),\n                            showarrow=False))\n                           \n\n     \n# Source\nannotations.append(dict(xref='paper', yref='paper',\n                        x=-0.2, y=-0.109,\n                        font=dict(family='Arial', size=20, color='rgb(150,150,150)'),\n                        showarrow=False))\n\nfig.update_layout(annotations=annotations)\n\niplot(fig)","05162b40":"# Creating two subplots\nfig = make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                    shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(go.Scatter(\n    x=combine_win_all['Goals_per_match'], y=combine_win_all['TeamName'],\n    mode='lines+markers',\n    line_color='rgb(128, 0, 128)',\n    name='The rate of goals that each team win scored per match in stages (excluding semi-final and final)',\n), 1, 1)\n\nfig.append_trace(go.Scatter(\n    x=combine_lose_all['Goals_per_match'], y=combine_lose_all['TeamName'],\n    mode='lines+markers',\n    line_color='rgb(115,115,115)',\n    name='The rate of goals that each team lose scored per match in stages (excluding semi-final and final)',\n), 1, 2)\n\nfig.update_layout(\n    title=\"\"\"The rate of goals that both team win and team lose scored per match\"\"\",\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n        domain=[0, 0.95],\n    ),\n    yaxis2=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n        linecolor='rgba(102, 102, 102, 0.8)',\n        linewidth=2,\n        domain=[0, 0.95],\n    ),\n    xaxis=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0, 0.42],\n    ),\nxaxis2=dict(\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n        showgrid=True,\n        domain=[0.6, 1],\n    ),\n    legend=dict(x=0.029, y=1.1, font_size=10),\n    margin=dict(l=100, r=20, t=70, b=70),\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n)\n\nannotations = []\n# Adding labels\nfor ydn, yd, xd, xdn in zip(combine_lose_all['Goals_per_match'], combine_win_all['Goals_per_match'], combine_win_all['TeamName'],combine_lose_all['TeamName']):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x2', yref='y2',\n                            y=xdn, x=ydn - 0.1,\n                            text='{:,}'.format(ydn),\n                            font=dict(family='Arial', size=10,\n                                      color='rgb(150, 150, 150)'),\n                            showarrow=False))\n    annotations.append(dict(xref='x1', yref='y1',\n                            y=xd, x=yd - 0.5,\n                            text='{:,}'.format(yd),\n                            font=dict(family='Arial', size=10,\n                                      color='rgb(128, 0, 128)'),\n                            showarrow=False))\n\nfig.update_layout(annotations=annotations)\n\niplot(fig)","ca5527a0":"print('Descriptive statistic about team win: ')\nprint(combine_win_all[['Goals_per_match']].describe())\nprint(' ')\nprint('Desriptive statistic about team lose: ')\nprint(combine_lose_all[['Goals_per_match']].describe())","17cc6fcb":"\ntop_5 = general_stat.sort_values(by=['Points'],ascending=False,).head()\ntop_5['Goal_Difference'] = top_5['Goal_Difference'].astype('int64')\ntop_5","b86b179b":"top_5.iloc[0,1:].values","f4dd5f68":"top_5.describe()","3cb2f292":"list(top_5.iloc[:,1:].columns)","1489e207":"\ncolors = ['rgba(38, 24, 74, 0.8)', 'rgba(71, 58, 131, 0.8)',\n          'rgba(122, 120, 168, 0.8)', 'rgba(164, 163, 204, 0.85)',\n          'rgba(190, 192, 213, 1)','rgba(12, 24, 4, 0.8)', 'rgba(49, 5, 13, 0.8)',\n          'rgba(1, 120, 168, 0.8)', 'rgba(122, 16, 204, 0.85)',\n          'rgba(10, 132, 23, 1)']\n\ntop_labels = list(top_5.iloc[:,1:10].columns)\nx_data = [list(top_5.iloc[i,1:10]) for i in range(5)]\ny_data = [top_5.iloc[i,0] for i in range(5)]\n\nfig = go.Figure()\n\nfor i in range(0, 9):\n    for xd, yd in zip(x_data, y_data):\n        fig.add_trace(go.Bar(\n            x=[xd[i]], y=[yd],\n            orientation='h',\n            marker=dict(\n                color=colors[i],\n                line=dict(color='rgb(248, 248, 249)', width=1)\n            )\n        ))\n\nfig.update_layout(\n    xaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        domain=[0.1, 1]\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n    ),\n    barmode='stack',\n    paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='rgb(248, 248, 255)',\n    margin=dict(l=120, r=10, t=140, b=80),\n    showlegend=False,\n)\n\nannotations = []\n\nfor yd, xd in zip(y_data, x_data):\n    # labeling the y-axis\n    annotations.append(dict(xref='paper', yref='y',\n                            x=0.14, y=yd,\n                            xanchor='right',\n                            text=str(yd),\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(67, 67, 67)'),\n                            showarrow=False, align='right'))\n    # labeling the first percentage of each bar (x_axis)\n    annotations.append(dict(xref='x', yref='y',\n                            x=xd[0]\/2, y=yd,\n                            text=str(xd[0]),\n                            font=dict(family='Arial', size=14,\n                                      color='rgb(248, 248, 255)'),\n                            showarrow=False))\n    # labeling the first Likert scale (on the top)\n    if yd == y_data[-1]:\n        annotations.append(dict(xref='x', yref='paper',\n                                x=xd[0] \/ 2, y=1.4,\n                                text=top_labels[0],\n                                align = 'center',\n                                textangle = -60,\n                                font=dict(family='Arial', size=14\n                                ,\n                                          color='rgb(67, 67, 67)'),\n                                showarrow=False))\n    space = xd[0]\n    for i in range(1, len(xd)):\n            # labeling the rest of percentages for each bar (x_axis)\n            annotations.append(dict(xref='x', yref='y',\n                                    x=space + (xd[i]\/2), y=yd,\n                                    text=str(xd[i]),\n                                    font=dict(family='Arial', size=13,\n                                              color='rgb(248, 248, 255)'),\n                                    showarrow=False))\n            # labeling the Likert scale\n            if yd == y_data[-1]:\n                annotations.append(dict(xref='x', yref='paper',\n                                        x=space + (xd[i]\/2), y=1.4,\n                                        text=top_labels[i],\n                                        textangle = -60,\n                                        font=dict(family='Arial', size=13,\n                                                  color='rgb(67, 67, 67)'),\n                                        showarrow=False))\n            space += xd[i]\n\nfig.update_layout(annotations=annotations)\niplot(fig)","51cf480d":"top_5","ce574a7d":"all_matches['HomeTeamName'] = all_matches['HomeTeamName'].apply(lambda x:x.replace('\\xa0',\"\"))\nall_matches['AwayTeamName'] = all_matches['AwayTeamName'].apply(lambda x:x.replace('\\xa0',\"\"))\n\n# function which get total goals of each team in each season\ndef goal_each_season(year,team_name):\n    tempor_match = all_matches[all_matches['Year'] == year]\n    if tempor_match['HomeTeamName'].str.contains(str(team_name)).any() or tempor_match['AwayTeamName'].str.contains(str(team_name)).any(): \n        tempor_match = tempor_match[(tempor_match['HomeTeamName']==str(team_name)) | (tempor_match['AwayTeamName']==str(team_name))]\n        if tempor_match['HomeTeamName'].str.contains(str(team_name)).any():\n            home_goals = tempor_match[tempor_match['HomeTeamName']==str(team_name)]['HomeTeamGoals'].sum()\n            if tempor_match['AwayTeamName'].str.contains(str(team_name)).any(): \n                away_goals = tempor_match[tempor_match['AwayTeamName']==str(team_name)]['AwayTeamGoals'].sum()\n            else:\n                away_goals = 0\n        else:\n            home_goals = 0\n            if tempor_match['AwayTeamName'].str.contains(str(team_name)).any():\n                away_goals = tempor_match[tempor_match['AwayTeamName']==str(team_name)]['AwayTeamGoals'].sum()\n            else:\n                away_goals = 0\n        total_goals_thaty = home_goals + away_goals\n        return total_goals_thaty    \n    else:\n        return None\n\n# function that count the number of matches\ndef count_match_season(year,team_name):\n    tempor_match = all_matches[all_matches['Year'] == year]\n    if tempor_match['HomeTeamName'].str.contains(str(team_name)).any() or tempor_match['AwayTeamName'].str.contains(str(team_name)).any(): \n        tempor_match = tempor_match[(tempor_match['HomeTeamName']==str(team_name)) | (tempor_match['AwayTeamName']==str(team_name))]\n        count_match_s = len(tempor_match)\n        return count_match_s\n    else:\n        return None","f5a19e06":"list_5team = list(top_5['Team'].values)\n\nr = {}\nname = []\nyear = []\ngoal = []\n# goal\nfor team in list_5team:\n    for i in range(1960,2019,4):\n        name.append(team)\n        year.append(i)\n        goal.append(goal_each_season(i,team))\n#count\ncount_s = []\nfor team in list_5team:\n    for i in range(1960,2019,4):\n        count_s.append(count_match_season(i,team))\nr = {'TeamName':name,'Year':year,'Goal':goal, 'Num_of_match':count_s}\ntop5_perform = pd .DataFrame(r, columns=['TeamName','Year','Goal','Num_of_match'])\ntop5_perform.dropna(inplace=True)\ntop5_perform[['Goal','Num_of_match']] = top5_perform[['Goal','Num_of_match']].astype('int64')    \ntop5_perform = top5_perform[top5_perform['Num_of_match'] != 0]","46ae40b2":"fig = go.Figure()\nfor team in list_5team:\n    fig.add_trace(go.Scatter(x=top5_perform[top5_perform['TeamName']==str(team)]['Year'], y=top5_perform[top5_perform['TeamName']==str(team)]['Goal'], name=str(team)))\nfig.update_layout(template=\"plotly_dark\",title='The Number Of Goal Scored By Each 5 Top Team In Each Season',legend=dict(y=0.5, traceorder='reversed', font_size=16))\niplot(fig)","9a48ac56":"fig = go.Figure()\nfor team in list_5team:\n    fig.add_trace(go.Scatter(x=top5_perform[top5_perform['TeamName']==str(team)]['Year'], y=top5_perform[top5_perform['TeamName']==str(team)]['Num_of_match'], name=str(team)))\nfig.update_layout(template=\"plotly_dark\",title = 'The Number Of Matches Played By Each 5 Top Team In Each Season',legend=dict(y=0.5, traceorder='reversed', font_size=16))\n\niplot(fig)","ed6b41cb":"fifa_ranking = pd.read_csv(r'..\/input\/fifa-rank\/fifa_ranking.csv') \nfifa_ranking = fifa_ranking[fifa_ranking['confederation'] == 'UEFA']\nfifa_ranking.drop(columns=['id','country_abrv','confederation'], inplace=True)\nfifa_ranking","666f4d82":"euro_team = list(set(all_matches['HomeTeamName'].unique())|set(all_matches['AwayTeamName'].unique()))\nfifa_ranking = fifa_ranking[fifa_ranking['country_full'].isin(euro_team)]\nfifa_ranking['rank_date'] = pd.to_datetime(fifa_ranking['rank_date'])\nfifa_ranking['rank_year'] = fifa_ranking['rank_date'].dt.year","098ff873":"fifa_ranking","956114b0":"current_euro_team = list(set(fifa_ranking['country_full'].unique())&set(euro_team))\ndiff_euro_team = list(set(fifa_ranking['country_full'].unique())^set(euro_team))","9269369a":"all_matches['Date'] = pd.to_datetime(all_matches['Date'])\nmatches_1996_2016 = all_matches[all_matches['Date'] > fifa_ranking['rank_date'].min()]\nmatches_1996_2016","8586a402":"matches_1996_2016.drop(matches_1996_2016[matches_1996_2016['HomeTeamName'].isin(diff_euro_team)].index[0:2], inplace=True)\nmatches_1996_2016.drop(matches_1996_2016[matches_1996_2016['AwayTeamName'].isin(diff_euro_team)].index[0:2], inplace=True)","a6c754cb":"list_team_todf = []\nfor year in range(1996,2019,4):\n    year_ranking = fifa_ranking[fifa_ranking['rank_year'] == year]\n    year_match = matches_1996_2016[matches_1996_2016['Year'] == year]\n    rank_list_home = []\n    point_list_home = []\n    rank_list_away = []\n    point_list_away = []\n    for n in range(len(year_match)):\n        home = []\n        away = []\n        home_name = year_ranking[year_ranking['country_full'] == year_match['HomeTeamName'].iloc[n]]\n        away_name = year_ranking[year_ranking['country_full'] == year_match['AwayTeamName'].iloc[n]]\n                # handle with HomeTeamName column\n        for i in range(len(home_name)):    \n            home.append(abs(year_match['Date'].iloc[n] - home_name['rank_date'].iloc[i]))#compared to the nearest day in fifa ranking\n            idx = np.argmin(home)\n        rank_list_home.append(home_name.iloc[idx]['rank'])\n        point_list_home.append(home_name.iloc[idx]['total_points'])\n                # handle with AwayTeamName column\n        for i in range(len(away_name)):    \n            away.append(abs(year_match['Date'].iloc[n] - away_name['rank_date'].iloc[i])) #compared to the nearest day in fifa ranking\n            idx = np.argmin(away)\n        rank_list_away.append(away_name.iloc[idx]['rank'])\n        point_list_away.append(away_name.iloc[idx]['total_points'])\n    year_match['home_team_rank'] = rank_list_home\n    year_match['away_team_rank'] = rank_list_away\n    year_match['home_team_point'] = point_list_home\n    year_match['away_team_point'] = point_list_away\n    list_team_todf.append(year_match)","afc5b678":"final_data = pd.concat(list_team_todf)\nfinal_data.drop(columns=['Stage','SpecialWinConditions','Stadium'], inplace = True)\nfinal_data['dif_rank'] = final_data['home_team_rank'] - final_data['away_team_rank']\nfinal_data['dif_point'] = final_data['home_team_point'] - final_data['away_team_point']\nfinal_data['City'] = final_data['City'].apply(lambda x:x.strip())","4e4f921c":"country_match_held = {'England':['London', 'Birmingham', 'Leeds', 'Newcastle', 'Manchester','Liverpool', 'Sheffield', 'Nottingham'],'Belgium':['Li\u00e8ge','Charleroi','Brussels','Bruges'],'Nertherlands':['Eindhoven','Arnhem','Rotterdam','Amsterdam'],'Portugal':['Porto','Faro\/Loul\u00e9','Lisbon','Leiria','Coimbra','Guimar\u00e3es', 'Braga','Aveiro'],'Switzerland':['Basel', 'Geneva','Z\u00fcrich','Bern'],'Austria':['Vienna','Klagenfurt','Innsbruck', 'Salzburg'],'Poland':['Warsaw','Wroc\u0142aw','Gda\u0144sk','Pozna\u0144'],'Ukraine':['Kharkiv','Lviv','Donetsk','Kiev'],'France':['Saint-Denis', 'Lens', 'Paris', 'Marseille','D\u00e9cines-Charpieu', \"Villeneuve-d'Ascq\", 'Bordeaux', 'Toulouse','Saint-\u00c9tienne', 'Nice']}","efd8bc07":"team_to_replace = ['England','Belgium', 'Nertherlands','Portugal','Switzerland','Austria','Poland','Ukraine','France']\nfor team in team_to_replace:\n    final_data['City'] = final_data['City'].replace(country_match_held[team],team)\nfinal_data.rename(columns={'City':'Country_held'}, inplace=True)","72e2107c":"list_status = []\nfor i in range(len(final_data)):\n    if final_data.iloc[i,1] == final_data.iloc[i,5]:\n        list_status.append('Home')\n    elif final_data.iloc[i,2] == final_data.iloc[i,5]:\n        list_status.append('Away')\n    else:\n        list_status.append('Neutral')\nfinal_data['Status'] = list_status\nfinal_data.drop(columns=['Country_held'], inplace=True)","09ffe761":"final_data.drop(columns = ['Date','Year'],inplace=True)\n\n# using Stratified shuffle to make sure that the rate of each result equally\nfrom sklearn.model_selection import StratifiedShuffleSplit\nsplit = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nfor train_index, test_index in split.split(final_data, final_data['Result']):\n    strat_train_set = final_data.iloc[train_index]\n    strat_test_set = final_data.iloc[test_index]","e2b5493e":"from pandas.plotting import scatter_matrix\n# copy stat train data to play without harming the training set\nml_data = strat_train_set.copy()\n# plot correlation some promising variables\nattributes = ['Attendance','home_team_rank','away_team_rank','home_team_point','away_team_point','dif_rank','dif_point']\nscatter_matrix(ml_data[attributes], figsize=(12,8))","d75faa33":"corr_matrix = ml_data[attributes].corr()\nplt.subplots(figsize=(9, 9))\nsns.heatmap(corr_matrix, annot=True, vmax=1, square=True, cmap=\"Blues\")\nplt.show()","1ffc7afa":"plt.figure(figsize=(15,10))\nplt.subplot(1,2,1)\nplt.scatter(ml_data['HomeTeamGoals']-ml_data['AwayTeamGoals'], ml_data['dif_rank'])\nplt.title('Difference btw diff_rank and diff_goals')\nplt.ylabel('Distance from Home rank to Away rank')\nplt.xlabel('Distance from Home Goals to Away goal')\n\n\nplt.subplot(1,2,2)\nplt.scatter(ml_data['HomeTeamGoals']-ml_data['AwayTeamGoals'], ml_data['dif_point'])\nplt.title('Difference btw diff_point in rank and diff_goals')\nplt.ylabel('Distance from Home point to Away point')\nplt.xlabel('Distance Home Goals to Awayy goal')","15a08cfb":"plt.figure(figsize=(15,10))\nplt.subplot(1,2,1)\nplt.bar(ml_data['HomeTeamGoals'].value_counts().index,ml_data['HomeTeamGoals'].value_counts().values)\nplt.title('The Number Of Goals Home Team Scored')\nplt.xlabel('Goals')\nplt.ylabel('Count')\n\nplt.subplot(1,2,2)\nplt.bar(ml_data['AwayTeamGoals'].value_counts().index, ml_data['AwayTeamGoals'].value_counts().values)\nplt.title('The Number Of Goals Away Team Scored')\nplt.xlabel('Goals')\nplt.ylabel('Count')","78a91d18":"plt.scatter(ml_data['HomeTeamGoals']-ml_data['AwayTeamGoals'], ml_data['Attendance'])","58897597":"qq = ml_data.groupby('Status')['Result'].value_counts()\nqq.plot(kind='barh')","8d55ed16":"f_data = final_data.drop(columns = ['Attendance'])\nteam_unique = list(set(f_data['HomeTeamName'].unique())&set(f_data['AwayTeamName'].unique()))","1fc39445":"f_data = pd.concat([f_data,matches_1996_2016[['Stage']]],axis = 1)","3c25890a":"f_data","dd1e3866":"f_data['Stage'] = f_data['Stage'].replace(['Group A','Group B','Group C','Group D','Group E','Group F'],'Group stage')","4c25dc44":" data_prepared = f_data[(f_data['HomeTeamName'].isin(team_unique))&(f_data['AwayTeamName'].isin(team_unique))]","c7c8933c":"X_data = data_prepared.drop(columns=['HomeTeamGoals','AwayTeamGoals','Result','home_team_rank','away_team_rank','home_team_point','away_team_point'])\ny_data = data_prepared['Result'].copy()","2395e4b6":"# columns transform\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OrdinalEncoder, OneHotEncoder","3458e258":"q1 = OneHotEncoder().fit_transform(X_data[['HomeTeamName']]).toarray()\nq2 = OneHotEncoder().fit_transform(X_data[['AwayTeamName']]).toarray()\nq3 = StandardScaler().fit_transform(X_data[['dif_rank']])\nq4 = StandardScaler().fit_transform(X_data[['dif_point']])\nq5 = OneHotEncoder().fit_transform(X_data[['Status']]).toarray()\nq6 = OneHotEncoder().fit_transform(X_data[['Stage']]).toarray()\nq7 = LabelEncoder().fit_transform(y_data)","3ff44e79":"X_data","780cf591":"X = np.concatenate((q1,q2,q3,q4,q5,q6), axis=1)\ny = q7","07b8e837":"X_y = np.concatenate((X,y.reshape(-1,1)), axis = 1)","610791f8":"# using Stratified shuffle to make sure that the rate of each result equally\nfrom sklearn.model_selection import StratifiedShuffleSplit\nsplit = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nfor train_index, test_index in split.split(X_y, y):\n    strat_train_set = X_y[train_index]\n    strat_test_set = X_y[test_index]","dde48a15":"X_train = strat_train_set[:,:-1]\nX_test = strat_test_set[:,:-1]\ny_train = strat_train_set[:,-1]\ny_test = strat_test_set[:,-1]","01289327":"# compare algorithms\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nimport xgboost as xgb\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier","f00ee5e4":"# Spot Check Algorithms\nmodels = []\nmodels.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('SVM', SVC(gamma='auto')))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('XGB',xgb.XGBClassifier(seed = 82)))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('RAND',RandomForestClassifier()))\n# evaluate each model in turn\nresults = []\nnames = []\nfor name, model in models:\n    kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)\n    cv_results = cross_val_score(model,X_train, y_train, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    print('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))","f57c058f":"# Compare Algorithms\nplt.figure(figsize=(10,8))\nplt.boxplot(results, labels=names)\nplt.title('Algorithm Comparison')\nplt.show()","25a6497a":"model = SVC(gamma='auto')\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)","0c6e4338":"model_1 = DecisionTreeClassifier()\nmodel_1.fit(X_train, y_train)\npredictions_1 = model_1.predict(X_test)","26221516":"# Evaluate predictions\nprint(accuracy_score(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))\n# Evaluate predictions\nprint('')\nprint(accuracy_score(y_test, predictions_1))\nprint(confusion_matrix(y_test, predictions_1))\nprint(classification_report(y_test, predictions_1))","baf72e5d":"from sklearn.model_selection import GridSearchCV\n  \n# defining parameter range\nparam_grid = {'C': [0.1, 1, 10, 100, 1000], \n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n              'kernel': ['rbf']} \n  \ngrid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3)\n  \n# fitting the model for grid search\ngrid.fit(X_train, y_train)\n\n# print best parameter after tuning\nprint(grid.best_params_)\n\n# print how our model looks after hyper-parameter tuning\nprint(grid.best_estimator_)","0aaebbf9":"grid_predictions = grid.predict(X_test)\nprint(confusion_matrix(y_test,grid_predictions))\nprint(classification_report(y_test,grid_predictions))","4e6cbab7":"grid_1 = DecisionTreeClassifier(random_state=6).fit(X_train,y_train)\ngrid_predictions_1 = grid_1.predict(X_test)\nprint(confusion_matrix(y_test,grid_predictions_1))\nprint(classification_report(y_test,grid_predictions_1))","03bda915":"X_data.describe()","9ae13ab9":"England = q1[0].reshape(1,30)\nItaly = q2[14].reshape(1,30)\ndif_rank_EvsI = np.array([-0.1938917437]).reshape(1,1) #convert dif_rank to Standard scale by hand\ndif_point_EvsI = np.array([0.1618811981]).reshape(1,1) #convert dif_point to Standard scale by hand\nstatus_gr = q5[0].reshape(1,3)\nstage = q6[-1].reshape(1,5)","c1c275e7":"final_euro_2021 = np.concatenate((England,Italy,dif_rank_EvsI,dif_point_EvsI,status_gr,stage),axis = 1)","07f01c89":"predict_champ = grid_1.predict(final_euro_2021) #use DecisionTree to predict\npredict_champ","ce5fc15f":" grid.predict(final_euro_2021) # use SVC to predict","44a7a4e5":"import pickle\nfilename_0 = 'predict_euro_model_SVC.sav'\nfilename_1 = 'predict_euro_model_treeclass.sav'\npickle.dump(grid, open(filename_0, 'wb'))\npickle.dump(grid_1, open(filename_1, 'wb'))","72b07673":"euro_2021_matches = pd.read_csv(r'..\/input\/match-euro\/euro2021_match.csv')","7207a1b8":"dict_encode = {'England':q1[0],'Netherlands':q1[1],'Switzerland':q1[2],'Scotland':q1[3],'Spain':q1[6],'France':q1[9],\n'Germany':q1[12],'Italy':q1[13],'Czech Republic':q1[14],'Russia':q1[15],'Denmark':q1[18],'Turkey':q1[19],\n'Portugal':q1[20],'Croatia':q1[21],'Belgium':q1[37],'Sweden':q1[40],'Austria':q1[92],'Poland':q1[96],'Ukraine':q1[136],'Wales':q1[154],'Slovakia':q1[159],'Hungary':q1[183]}","bde77150":"status_encode = {'H':q5[0],'Neutral':q5[1],'A':q5[3]}\nstage_encode = {'Group stage':q6[0],'Round of 16':q6[184],'Quarter-finals':q6[192],'Semi-finals':q6[196]}","b38f1fff":"opp = []\nfor i in range(44):\n    result = np.concatenate((dict_encode[euro_2021_matches['HomeTeamName'][i]].reshape(1,30),dict_encode[euro_2021_matches['AwayTeamName'][i]].reshape(1,30),np.array(euro_2021_matches['StandardScaler dif_rank'][i]).reshape(1,1),np.array(euro_2021_matches['StandardScaler dif_point'][i]).reshape(1,1),status_encode[euro_2021_matches['Status'][i]].reshape(1,3),stage_encode[euro_2021_matches['Stage'][i]].reshape(1,5)),axis=1)\n    opp.append(result)","461bb2e7":"test_2021 = np.concatenate(opp,axis =0)\nresult_2021 = LabelEncoder().fit_transform(pd.read_csv(r'..\/input\/result\/result_euro.csv'))","66c5bafc":"# experiment with DecisionTree\nloaded_model = pickle.load(open(filename_1, 'rb'))\nresult = loaded_model.score(test_2021, result_2021)\nprint(result)\nprint(confusion_matrix(result_2021,loaded_model.predict(test_2021)))\nprint(classification_report(result_2021,loaded_model.predict(test_2021)))","6abdd989":"# experiment with SVC model\nloaded_model = pickle.load(open(filename_0, 'rb'))\nresult = loaded_model.score(test_2021, result_2021)\nprint(result)\nprint(confusion_matrix(result_2021,loaded_model.predict(test_2021)))\nprint(classification_report(result_2021,loaded_model.predict(test_2021)))","5b951572":"- Team:\tNames of the teams\n- Participations: Number of times a team participated in the competition\t\n- Played: Number of matches played\n- Win: Number of times the team won\n- Draw:\tNumber of times, the match was a draw\n- Loss:\tNumber of times the team lost\n- Goal_For: Number of goals scored by the team\n- Goal_Against:\tNumber of goals conceded by the team\n- Goal_Difference:\tGoal_For - Goal_Against\n- Points: Total points the team earned from the matchesGoal_Against\n- Points\/match: Points earned per match","1fb78d98":"- Team:\tName of the teams\n- Appearances: Number of times a team qualified and played in the competition\n- Record streak: Highest number of times, qualifying and playing in the competition\t\n- Active streak: Current streak of the number of appearance\t\n- Debut: Debut year of a national team in the competition\t\n- Most recent: Most recent participation year\n- Best result: Best result of a national team in the competition","d5bff40e":"# **Data Cleaning, Columns Transformation**","fe6e12ee":"****Introduction****\nTomorrow there will have a final match between England and Italy in Euro 2021, below is a simple model built to predict a team can be a winner in last match.\n**Note: a model's result should be considered as reference, study and share knowledges to everyone not use it for betting or something else that can break the law**\nok! Just funny and relax a final match ","7cd84d0e":"- Player: Name of the player\t\n- Team: Name of the team the player represents\t\n- Goals scored:\tNumber of goals scored\n- Matches played: Number of matches played\n- Goals average: Number of goals per matches\t\n- Tournament(s): Year of tournaments played by the player","5df49204":"We can see that DecisionTree Classifier predicts Home win, away win and even draw for both team, but Support Vector Machine only predicts Home win or Away win, get rid of draw results. So I think if result is in 90 minutes, DecisionTreeClassifier will be better and If result is considered to the end (120 minutes, penalties), SVC will be the best choice.","b1e95711":"In Euro 1968, There were 2 final matches beacause in the first match, Italy 1-1 Yugoslavia, and the second match was replayed then Italia won 2-0","6d1abe4d":"- Date: Date on which the match was played\n- HomeTeamName: Name of the Home Team\n- AwayTeamName:\tName of the Away team\n- HomeTeamGoals: Goals scored by Home Teams\t\n- AwayTeamGoals: Goals scored by Away Teams\n- Stage: The stage of the competition when the match was played.\n- SpecialWinConditions:\tSpecial winning conditions such as away goals, penalties, etc.\n- Stadium: Name of the stadium\n- City:\tName of the city\n- Attendance: Total number of audience in the stadium\n- Year: Year on which the match was played","c500b17c":"# **We begin to explore more details about top 5 team**","7c055424":"# **Feature Selection, Prepare Final Data For Machine Learning**","4dda2d30":"# **Train and Evaluate Model**","0905ab30":"# **Evaluate Prediciton**","68583951":"# ** Looking for Correlations**","e70b8246":"# All Matches Exploratory","5e8985d0":"- country_full \u2014 country full name\n- rank \u2014 current country rank\n- total_points \u2014 current total points\n- previous_points \u2014 total points in last rating\n- rank_change \u2014 how rank has changed since the last publication\n- rank_date \u2014 date of rating calculation","a21031f5":"# **Predict happened matches in Euro 2021 to see performance**","48ea8fb3":"# ** Create train, test set**","c609b2fa":"# Save model","a02262bf":"# **According to model built, maybe England is predicted to become a winner in Euro 2021**","3e103472":"# **Make Prediction**"}}