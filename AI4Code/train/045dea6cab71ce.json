{"cell_type":{"03bc2c88":"code","b1b0721d":"code","1a269a7e":"code","71f256c8":"code","340a2bfd":"code","eb3ab06a":"code","8d407744":"code","fd622539":"code","1d5c876f":"code","47db3c94":"code","7c8278f8":"code","38e19e86":"code","2bc31f0c":"code","1593b2ed":"code","ff65b252":"code","0b0b1ac3":"code","fe797016":"code","9b5ad63c":"code","89c16f28":"code","b0b1eeaa":"code","18ba9e5d":"code","57709296":"code","3fa72d58":"markdown"},"source":{"03bc2c88":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1b0721d":"## import liberaries\nimport pandas as pd\nimport sqlite3 as sql","1a269a7e":" pip install openpyxl","71f256c8":"## Read the file\n\ndf_cars=pd.read_excel('\/kaggle\/input\/car-dataset-of-indian-cars\/car_dataset.xlsx')\ndf_cars.head()","340a2bfd":"## print the columns\n\ndf_cars.columns.to_list()","eb3ab06a":"## Rename the columns to single string characters\n\ndf_cars = df_cars.rename(\n    columns = {'Initial Price': 'Initial_Price',\n               'Saftey Index': 'Saftey_Index',\n               'Saftey Classification': 'Saftey_Classification',\n               'Engine Type': 'Engine_Type',\n               'Seating Capacity': 'Seating_Capacity',\n               'Seat Classification': 'Seat_Classification',\n               'Car Type': 'Car_Type'}, inplace = False)\ndf_cars.head()","8d407744":"## create a sql engine\n\n\n\n# import sqlalchemy and create a sqlite engine\nfrom sqlalchemy import create_engine\nengine = create_engine('sqlite:\/\/', echo=False)\n\n# export the dataframe as a table 'playstore' to the sqlite engine\ndf_cars.to_sql(\"cars\", con =engine)\n\n","fd622539":"## Test the code by select the complete table\n\nsql='''\n\nSelect * from cars\nlimit 5\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","1d5c876f":"## Test the code by select the complete table\n\nsql='''\n\nSelect\n*\nfrom cars\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","47db3c94":"## Count of cars\n\nsql='''\n\nSelect\ncount(*) as car_available\nfrom cars\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","7c8278f8":"## Cars available for each group\n\nsql='''\n\nSelect\nmake,\ncount(*) as car_available\nfrom cars\ngroup by 1\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","38e19e86":"## Total number of cars across each variant\n\nsql='''\nselect \na.make,\na.Basic_Variant,\na.Mid_Variant,\na.Top_Variant,\nsum(a.Basic_Variant + a.Mid_Variant + a.Top_Variant) as Total_Available\nfrom\n(select\nmake,\nsum(case when Varient='Basic' then 1 else 0 end) as Basic_Variant,\nsum(case when Varient='Mid' then 1 else 0 end) as Mid_Variant,\nsum(case when Varient='Top' then 1 else 0 end) as Top_Variant\nfrom cars c    \ngroup by 1) a\n\ngroup by 1\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","2bc31f0c":"## Makers vs the range of cars avaialable as per budget catgory\n\n## Total number of cars across each variant\n\nsql='''\n\nselect\na.make,\nsum(case when a.price_group='4-9' then 1 else 0 end) as four_to_nine,\nsum(case when a.price_group='9-13' then 1 else 0 end) as nine_to_thirteen,\nsum(case when a.price_group='13-18' then 1 else 0 end) as thirteen_to_eighteen,\nsum(case when a.price_group='18-23' then 1 else 0 end) as eighteen_to_twentythree,\nsum(case when a.price_group='23-28' then 1 else 0 end) as twentythree_to_twentyeight,\nsum(case when a.price_group='28-33' then 1 else 0 end) as twentyeight_to_thirtythree,\nsum(case when a.price_group='33-38' then 1 else 0 end) as thirtythreee_to_thirtyeight,\nsum(case when a.price_group='38-43' then 1 else 0 end) as thirtyeight_to_fortythree\nfrom\n\n(select\nmake,\ninitial_price,\ncase \nwhen initial_price >= 400000 and initial_price < 900000 then '4-9'\nwhen initial_price >= 900000 and initial_price < 1300000 then '9-13'\nwhen initial_price >= 1300000 and initial_price < 1800000 then '13-18'\nwhen initial_price >= 1800000 and initial_price < 2300000 then '18-23'\nwhen initial_price >= 2300000 and initial_price < 2800000 then '23-28'\nwhen initial_price >= 2800000 and initial_price < 3300000 then '28-33'\nwhen initial_price >= 3300000 and initial_price < 3800000 then '33-38'\nwhen initial_price >= 3800000 and initial_price < 4300000 then '38-43'\nelse 'No Group'\nend as price_group\nfrom cars) a\n\ngroup by 1\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","1593b2ed":"## Makers vs the range of cars avaialable as per budget catgory\n\n## Total number of cars across each variant\n\nsql='''\n\nselect\nc.make,\nc.total_models,\nc.total_colors,\nmileage.Avg_Mileage_Petrol,\nmileage.Avg_Mileage_Diesel,\nprice.zero_to_ten,\nprice.ten_to_twenty,\nprice.twenty_to_forty,\nprice.greater_thanforty,\nengine_type.Petrol_Cars,\nengine_type.Diesel_Cars,\nsecond.Saftey_Index,\nsecond.count_of_type,\nsecond.count_of_Safety_good,\nsecond.Count_of_Safety_best,\nsecond.Count_of_Safety_Fairly_Good,\nsecond.Count_of_seats_four,\nsecond.Count_of_seats_greaterthanfour\n\nfrom\n(select\nmake,\ncount (distinct name) as total_models,\ncount (distinct colour) as total_colors\nfrom cars\ngroup by 1) c\n\njoin (with mileage as \n(select\n make,\n round(avg(mileage),2) as mileage,\n engine_type\n from cars\n group by 1,3 \n)\n\nselect \na.make,\nmax(a.Avg_Mileage_Petrol) as Avg_Mileage_Petrol,\nmax(a.Avg_Mileage_Diesel) as Avg_Mileage_Diesel\nfrom\n(select\nm.make,\ncase when m.engine_type='Petrol' then m.mileage else 0 end as Avg_Mileage_Petrol,\ncase when m.engine_type='Diesel' then m.mileage else 0 end as Avg_Mileage_Diesel \nfrom mileage m) a\ngroup by 1) mileage on mileage.make=c.make\n\njoin (select\na.make,\nsum(case when a.price_group='0-10' then 1 else 0 end) as zero_to_ten,\nsum(case when a.price_group='10-20' then 1 else 0 end) as ten_to_twenty,\nsum(case when a.price_group='20-40' then 1 else 0 end) as twenty_to_forty,\nsum(case when a.price_group='>40' then 1 else 0 end) as greater_thanforty\nfrom\n\n(select\nmake,\ninitial_price,\ncase \nwhen initial_price >= 0 and initial_price < 1000000 then '0-10'\nwhen initial_price >= 1000000 and initial_price < 2000000 then '10-20'\nwhen initial_price >= 2000000 and initial_price < 4000000 then '20-40'\nwhen initial_price >= 4000000 then '>40'\nelse 'No Group'\nend as price_group\nfrom cars) a\n\ngroup by 1) price on price.make=c.make\n\njoin (select\nmake,\nsum(case when Engine_Type='Petrol' then 1 else 0 end) as Petrol_Cars,\nsum(case when Engine_Type='Diesel' then 1 else 0 end) as Diesel_Cars\nfrom cars\ngroup by 1) engine_type on engine_type.make=c.make\n\njoin (with safety as \n(select \nmake,\nround(avg(Saftey_Index),2) as Saftey_Index\nfrom cars\ngroup by 1),\n\n type as \n(\nselect \nmake,\ncount(distinct car_type) as count_of_type\nfrom cars\ngroup by 1\n\n),\n\nsafety_class as \n(\nselect\nmake,\nmax(a.Count_of_Safety_good) as Count_of_Safety_good,\nmax(a.Count_of_Safety_best) as Count_of_Safety_best,\nmax(a.Count_of_Safety_Fairly_Good) as Count_of_Safety_Fairly_Good\nfrom\n\n(select \nmake,\nsum(case when Saftey_Classification='Good' then 1 else 0 end) as Count_of_Safety_good,\nsum(case when Saftey_Classification='Best' then 1 else 0 end) as Count_of_Safety_best,\nsum(case when Saftey_Classification='Fairly Good' then 1 else 0 end) as Count_of_Safety_Fairly_Good\nfrom cars\ngroup by 1) a\n\ngroup by 1\n\n),\n\nseating_capacity as \n(select\nmake,\nsum (case when Seating_Capacity=4 then 1 else 0 end) as Count_of_seats_four,\nsum (case when Seating_Capacity>4 then 1 else 0 end) as Count_of_seats_greaterthanfour\nfrom  cars\ngroup by 1)\n\n\nselect\ns.make,\ns.Saftey_Index,\nt.count_of_type,\nse.Count_of_Safety_good,\nse.Count_of_Safety_best,\nse.Count_of_Safety_Fairly_Good,\nsy.Count_of_seats_four,\nsy.Count_of_seats_greaterthanfour\nfrom safety s\njoin type t on t.make=s.make\njoin safety_class se on se.make=s.make\njoin seating_capacity sy on sy.make=s.make) second on second.make= c.make\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(10)","ff65b252":"## mileage\n\nsql='''\n\nwith mileage as \n(select\n make,\n round(avg(mileage),2) as mileage,\n engine_type\n from cars\n group by 1,3 \n)\n\nselect \na.make,\nmax(a.Avg_Mileage_Petrol) as Avg_Mileage_Petrol,\nmax(a.Avg_Mileage_Diesel) as Avg_Mileage_Diesel\nfrom\n(select\nm.make,\ncase when m.engine_type='Petrol' then m.mileage else 0 end as Avg_Mileage_Petrol,\ncase when m.engine_type='Diesel' then m.mileage else 0 end as Avg_Mileage_Diesel \nfrom mileage m) a\ngroup by 1\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(10)","0b0b1ac3":"## Makers vs the range of cars avaialable as per budget catgory\n\n## Total number of cars across each variant\n\nsql='''\n\nselect\na.make,\nsum(case when a.price_group='0-10' then 1 else 0 end) as zero_to_ten,\nsum(case when a.price_group='10-20' then 1 else 0 end) as ten_to_twenty,\nsum(case when a.price_group='20-40' then 1 else 0 end) as twenty_to_forty,\nsum(case when a.price_group='>40' then 1 else 0 end) as greater_thanforty\nfrom\n\n(select\nmake,\ninitial_price,\ncase \nwhen initial_price >= 0 and initial_price < 1000000 then '0-10'\nwhen initial_price >= 1000000 and initial_price < 2000000 then '10-20'\nwhen initial_price >= 2000000 and initial_price < 4000000 then '20-40'\nwhen initial_price >= 4000000 then '>40'\nelse 'No Group'\nend as price_group\nfrom cars) a\n\ngroup by 1\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(10)","fe797016":"## Makers vs the range of cars avaialable as per budget catgory\n\n## Total number of cars across each variant\n\nsql='''\n\nselect\nmake,\nsum(case when Engine_Type='Petrol' then 1 else 0 end) as Petrol_Cars,\nsum(case when Engine_Type='Diesel' then 1 else 0 end) as Diesle_Cars\nfrom cars\ngroup by 1\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(10)","9b5ad63c":"## second half\n\nsql='''\nwith safety as \n(select \nmake,\nround(avg(Saftey_Index),2) as Saftey_Index\nfrom cars\ngroup by 1),\n\n type as \n(\nselect \nmake,\ncount(distinct car_type) as count_of_type\nfrom cars\ngroup by 1\n\n),\n\nsafety_class as \n(\nselect\nmake,\nmax(a.Count_of_Safety_good) as Count_of_Safety_good,\nmax(a.Count_of_Safety_best) as Count_of_Safety_best,\nmax(a.Count_of_Safety_Fairly_Good) as Count_of_Safety_Fairly_Good\nfrom\n\n(select \nmake,\nsum(case when Saftey_Classification='Good' then 1 else 0 end) as Count_of_Safety_good,\nsum(case when Saftey_Classification='Best' then 1 else 0 end) as Count_of_Safety_best,\nsum(case when Saftey_Classification='Fairly Good' then 1 else 0 end) as Count_of_Safety_Fairly_Good\nfrom cars\ngroup by 1) a\n\ngroup by 1\n\n),\n\nseating_capacity as \n(select\nmake,\nsum (case when Seating_Capacity=4 then 1 else 0 end) as Count_of_seats_four,\nsum (case when Seating_Capacity>4 then 1 else 0 end) as Count_of_seats_greaterthanfour\nfrom  cars\ngroup by 1)\n\n\nselect\ns.make,\ns.Saftey_Index,\nt.count_of_type,\nse.Count_of_Safety_good,\nse.Count_of_Safety_best,\nse.Count_of_Safety_Fairly_Good,\nsy.Count_of_seats_four,\nsy.Count_of_seats_greaterthanfour\nfrom safety s\njoin type t on t.make=s.make\njoin safety_class se on se.make=s.make\njoin seating_capacity sy on sy.make=s.make\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(10)","89c16f28":"\nsql='''\nselect\nmake,\nmax(a.Count_of_Safety_good) as Count_of_Safety_good,\nmax(a.Count_of_Safety_best) as Count_of_Safety_best,\nmax(a.Count_of_Safety_Fairly_Good) as Count_of_Safety_Fairly_Good\nfrom\n\n(select \nmake,\nsum(case when Saftey_Classification='Good' then 1 else 0 end) as Count_of_Safety_good,\nsum(case when Saftey_Classification='Best' then 1 else 0 end) as Count_of_Safety_best,\nsum(case when Saftey_Classification='Fairly Good' then 1 else 0 end) as Count_of_Safety_Fairly_Good\nfrom cars\ngroup by 1) a\n\ngroup by 1\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(10)","b0b1eeaa":"\nsql='''\nselect\nmake,\nsum (case when Seating_Capacity=4 then 1 else 0 end) as Count_of_seats_four,\nsum (case when Seating_Capacity>4 then 1 else 0 end) as Count_of_seats_greaterthanfour\nfrom  cars\ngroup by 1\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(10)","18ba9e5d":"\n\nsql='''\nwith safety as \n(select \nmake,\nround(avg(Saftey_Index),2) as Saftey_Index\nfrom cars\ngroup by 1),\n\n type as \n(\nselect \nmake,\ncount(distinct car_type) as count_of_type\nfrom cars\ngroup by 1\n\n),\n\nsafety_class as \n(\nselect\nmake,\nmax(a.Count_of_Safety_good) as Count_of_Safety_good,\nmax(a.Count_of_Safety_best) as Count_of_Safety_best,\nmax(a.Count_of_Safety_Fairly_Good) as Count_of_Safety_Fairly_Good\nfrom\n\n(select \nmake,\nsum(case when Saftey_Classification='Good' then 1 else 0 end) as Count_of_Safety_good,\nsum(case when Saftey_Classification='Best' then 1 else 0 end) as Count_of_Safety_best,\nsum(case when Saftey_Classification='Fairly Good' then 1 else 0 end) as Count_of_Safety_Fairly_Good\nfrom cars\ngroup by 1) a\n\ngroup by 1\n\n),\n\nseating_capacity as \n(select\nmake,\nsum (case when Seating_Capacity=4 then 1 else 0 end) as Count_of_seats_four,\nsum (case when Seating_Capacity>4 then 1 else 0 end) as Count_of_seats_greaterthanfour\nfrom  cars\ngroup by 1)\n\n\nselect\nse.Count_of_Safety_good,\nse.Count_of_Safety_best,\nse.Count_of_Safety_Fairly_Good\nfrom safety_class se\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(10)","57709296":"## Makers vs the range of cars avaialable as per budget catgory\n\n## Total number of cars across each variant\n\nsql='''\n\nselect\nc.make,\nc.total_models,\nc.total_colors,\nmileage.Avg_Mileage_Petrol,\nmileage.Avg_Mileage_Diesel,\nprice.zero_to_ten,\nprice.ten_to_twenty,\nprice.twenty_to_forty,\nprice.greater_thanforty,\nengine_type.Petrol_Cars,\nengine_type.Diesel_Cars,\nsecond.Saftey_Index,\nsecond.count_of_type,\nsecond.count_of_Safety_good,\nsecond.Count_of_Safety_best,\nsecond.Count_of_Safety_Fairly_Good,\nsecond.Count_of_seats_four,\nsecond.Count_of_seats_greaterthanfour\n\nfrom\n(select\nmake,\ncount (distinct name) as total_models,\ncount (distinct colour) as total_colors\nfrom cars\ngroup by 1) c\n\njoin (with mileage as \n(select\n make,\n round(avg(mileage),2) as mileage,\n engine_type\n from cars\n group by 1,3 \n)\n\nselect \na.make,\nmax(a.Avg_Mileage_Petrol) as Avg_Mileage_Petrol,\nmax(a.Avg_Mileage_Diesel) as Avg_Mileage_Diesel\nfrom\n(select\nm.make,\ncase when m.engine_type='Petrol' then m.mileage else 0 end as Avg_Mileage_Petrol,\ncase when m.engine_type='Diesel' then m.mileage else 0 end as Avg_Mileage_Diesel \nfrom mileage m) a\ngroup by 1) mileage on mileage.make=c.make\n\njoin (select\na.make,\nsum(case when a.price_group='0-10' then 1 else 0 end) as zero_to_ten,\nsum(case when a.price_group='10-20' then 1 else 0 end) as ten_to_twenty,\nsum(case when a.price_group='20-40' then 1 else 0 end) as twenty_to_forty,\nsum(case when a.price_group='>40' then 1 else 0 end) as greater_thanforty\nfrom\n\n(select\nmake,\ninitial_price,\ncase \nwhen initial_price >= 0 and initial_price < 1000000 then '0-10'\nwhen initial_price >= 1000000 and initial_price < 2000000 then '10-20'\nwhen initial_price >= 2000000 and initial_price < 4000000 then '20-40'\nwhen initial_price >= 4000000 then '>40'\nelse 'No Group'\nend as price_group\nfrom cars) a\n\ngroup by 1) price on price.make=c.make\n\njoin (select\nmake,\nsum(case when Engine_Type='Petrol' then 1 else 0 end) as Petrol_Cars,\nsum(case when Engine_Type='Diesel' then 1 else 0 end) as Diesel_Cars\nfrom cars\ngroup by 1) engine_type on engine_type.make=c.make\n\njoin (with safety as \n(select \nmake,\nround(avg(Saftey_Index),2) as Saftey_Index\nfrom cars\ngroup by 1),\n\n type as \n(\nselect \nmake,\ncount(distinct car_type) as count_of_type\nfrom cars\ngroup by 1\n\n),\n\nsafety_class as \n(\nselect\nmake,\nmax(a.Count_of_Safety_good) as Count_of_Safety_good,\nmax(a.Count_of_Safety_best) as Count_of_Safety_best,\nmax(a.Count_of_Safety_Fairly_Good) as Count_of_Safety_Fairly_Good\nfrom\n\n(select \nmake,\nsum(case when Saftey_Classification='Good' then 1 else 0 end) as Count_of_Safety_good,\nsum(case when Saftey_Classification='Best' then 1 else 0 end) as Count_of_Safety_best,\nsum(case when Saftey_Classification='Fairly Good' then 1 else 0 end) as Count_of_Safety_Fairly_Good\nfrom cars\ngroup by 1) a\n\ngroup by 1\n\n),\n\nseating_capacity as \n(select\nmake,\nsum (case when Seating_Capacity=4 then 1 else 0 end) as Count_of_seats_four,\nsum (case when Seating_Capacity>4 then 1 else 0 end) as Count_of_seats_greaterthanfour\nfrom  cars\ngroup by 1)\n\n\nselect\ns.make,\ns.Saftey_Index,\nt.count_of_type,\nse.Count_of_Safety_good,\nse.Count_of_Safety_best,\nse.Count_of_Safety_Fairly_Good,\nsy.Count_of_seats_four,\nsy.Count_of_seats_greaterthanfour\nfrom safety s\njoin type t on t.make=s.make\njoin safety_class se on se.make=s.make\njoin seating_capacity sy on sy.make=s.make) second on second.make= c.make\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(10)","3fa72d58":"# Master Query"}}