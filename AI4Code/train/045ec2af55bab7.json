{"cell_type":{"819ff2cd":"code","7acaa353":"code","0f9e38c6":"code","332bacef":"code","ee85fb47":"code","0aa17452":"markdown"},"source":{"819ff2cd":"import numpy as np\nimport pandas as pd\n\n# path management\nfrom pathlib import Path\n\n# progress bars\nfrom tqdm import tqdm","7acaa353":"comp_data_path = Path('..\/input\/rsna-str-pulmonary-embolism-detection')\nprep_data_path = Path('..\/input\/2020pe-preprocessed-train-data')","0f9e38c6":"# set sizing\nNSCANS = 20\nNPX = 128","332bacef":"# load train data table\ntrain = pd.read_csv(comp_data_path \/ 'train.csv')\n# put data file names into dataframes\ntrain['dcmpath'] = train.StudyInstanceUID + '_' + train.SeriesInstanceUID","ee85fb47":"# modify train table to make it fit to our model (combine images to make a set of 20 for each exam)\nallsamples = np.unique(train.dcmpath.values)\ntrain_new = pd.DataFrame()\nfor sss in tqdm(allsamples):\n    selec = train[train['dcmpath'] == sss]\n    thisdata = selec.iloc[0].copy()\n\n    # get order of files in exam\n    thisfilelist = np.load(str(prep_data_path \/ f'proc_{NSCANS}_{NPX}_train' \/ (thisdata['dcmpath'] + '_list.npy')), allow_pickle=True)\n    thisfilelist = [str(f).split('\/')[-1].split('.')[0] for f in thisfilelist]\n    # get corresponding order of PE observation true\/false\n    ordered_obs = np.array([selec[selec['SOPInstanceUID'] == f]['pe_present_on_image'].values for f in thisfilelist]).flatten()\n    # split in 20 equal sections as done for the images\n    split = np.linspace(0, len(ordered_obs), num=NSCANS+1).astype(int)\n    pe_obs_binned = np.zeros((NSCANS))\n    for sss in range(NSCANS):\n        pe_obs_binned[sss] = int(np.mean(ordered_obs[split[sss]:split[sss+1]]) > 0.3)\n\n    # add binned PE observations to dataframe\n    for iii in range(NSCANS):\n        thisdata[f'pe_in_image_bin_{iii}'] = pe_obs_binned[iii]\n    # add acute PE label\n    thisdata['acute_pe'] = ((thisdata['negative_exam_for_pe'] == 0) &\n                            (thisdata['indeterminate'] == 0) &\n                            (thisdata['chronic_pe'] == 0) &\n                            (thisdata['acute_and_chronic_pe'] == 0)\n                           ).astype(int)\n    train_new = train_new.append(thisdata, ignore_index=True)\n\n# drop unneeded labels\ndrop_labels = ['qa_motion', 'qa_contrast', 'flow_artifact', 'pe_present_on_image', 'true_filling_defect_not_pe', 'SOPInstanceUID', 'SeriesInstanceUID', 'StudyInstanceUID']\ntrain_new.drop(labels=drop_labels, axis=1, inplace=True)\ntrain_new.to_csv('train_proc.csv')","0aa17452":"# [2020-PE] Preprocessing train table\n\nKernel for modifying the train data table to fit to the preprocessed dataset generated in\n\nhttps:\/\/www.kaggle.com\/spacelx\/2020-pe-preprocessing-train-data\n\nThe full dataset is available at\n\nhttps:\/\/www.kaggle.com\/spacelx\/2020pe-preprocessed-train-data"}}