{"cell_type":{"b1ea33a6":"code","72def4fc":"code","3a225f1e":"code","1a306578":"code","4b4e1738":"code","960d6321":"code","fb94eddb":"code","8416e35e":"code","c3de9afa":"code","1a3560c5":"code","22d731d5":"code","946c8291":"code","0ef63866":"code","e5ffd332":"code","51d4cf4b":"code","2bfcec05":"code","e2dce4d1":"code","01417b93":"code","679abc2d":"code","a6ae475b":"code","792d4cf7":"code","caeeeaca":"code","0b811771":"code","ed9beb9e":"code","5a1ca6bd":"code","683aa85b":"code","34277218":"markdown","617adc70":"markdown","c0032613":"markdown","b93b4201":"markdown","e466f476":"markdown","e01baa33":"markdown","457d150e":"markdown","c8a2d6e6":"markdown","a8b3ef06":"markdown"},"source":{"b1ea33a6":"from sklearn.datasets import fetch_openml\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport numpy as np\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nimport pandas as pd\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom joblib import dump\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import cross_val_predict","72def4fc":"X, y = fetch_openml('mnist_784', version=1, return_X_y=True)","3a225f1e":"\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2)","1a306578":"X_train","4b4e1738":"# Preprocess\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)","960d6321":"sgd = SGDClassifier()\nsgd.fit(X_train, y_train)","fb94eddb":"X_test = sc.transform(X_test)","8416e35e":"sgd.score(X_test, y_test)","c3de9afa":"from sklearn.metrics import confusion_matrix\npred_sgd = sgd.predict(X_test)\nconfusion_matrix(pred_sgd, y_test)","1a3560c5":"conf_mat = confusion_matrix(sgd.predict(X_train), y_train)\nconf_mat","22d731d5":"sgd.score(X_train, y_train)","946c8291":"from joblib import dump, load\ndump(sgd, 'sgd.joblib')","0ef63866":"sg1 = load('sgd.joblib')","e5ffd332":"sg1.score(X_test,y_test), sg1.score(X_train, y_train)","51d4cf4b":"plt.figure(figsize=(20,20))\nsns.heatmap(conf_mat, annot=True)","2bfcec05":"rfc = RandomForestClassifier()","e2dce4d1":"rfc.fit(X_train, y_train)","01417b93":"rfc.score(X_test,y_test)","679abc2d":"plt.figure(figsize=(20,20))\nsns.heatmap(confusion_matrix(rfc.predict(X_train), y_train), annot=True)","a6ae475b":"plt.figure(figsize=(20,20))\nsns.heatmap(confusion_matrix(rfc.predict(X_test), y_test), annot=True)","792d4cf7":"dump(rfc, 'rfc.joblib')","caeeeaca":"knn = KNeighborsClassifier()","0b811771":"knn.fit(X_train, y_train)","ed9beb9e":"pred = knn.predict(X_test)\nplt.figure(figsize=(20,20))\nsns.heatmap(confusion_matrix(y_test, pred), annot=True)","5a1ca6bd":"dump(knn, 'knn.joblib')","683aa85b":"f1_score(pred, y_train, average='macro')","34277218":"# Prediction","617adc70":"# SGD Classifier","c0032613":"# KNN","b93b4201":"# Random Forest","e466f476":"SGD gives about 90% accuracy on test and train, which is good sign.","e01baa33":"Random forest seem to be doing best compare to any other mode we have trained so far.","457d150e":"KNN seem to be doing excellent job here without parameter tuning.","c8a2d6e6":"We got the same score as before. SO saving and loading model saves lot of time next time we use it.","a8b3ef06":"We are trying to use couple of classifiers to do MNIST classification."}}