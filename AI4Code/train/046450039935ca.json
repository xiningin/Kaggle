{"cell_type":{"d7782ef1":"code","7bf45f5a":"code","3f31d736":"code","aecfda9a":"code","ac75a305":"code","1e1b4227":"code","28c828a9":"code","c72389d3":"code","6e96b025":"code","35515004":"code","0021fb52":"code","30056dd5":"code","0623a574":"code","16183eef":"code","fdb56a80":"code","ca9c439d":"code","ce29b192":"code","b502365f":"code","34d14abf":"code","7260806f":"code","971a06a6":"code","be04db31":"code","8ab12a89":"code","8ad223dc":"code","48678fc0":"code","689c9096":"code","b9708866":"code","1569f76e":"code","dbb3a986":"code","5e564ea1":"code","b5ac33cb":"code","a920bc9b":"code","2eb2e54b":"code","c6a20519":"markdown","141ab25e":"markdown"},"source":{"d7782ef1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\nfrom glob import glob\nfrom PIL import Image\nimport os\nimport random\nimport cv2","7bf45f5a":"#Model\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential, Model,load_model\nfrom tensorflow.keras.layers import Activation,Dense, Dropout, Flatten, Conv2D, MaxPooling2D,MaxPool2D,AveragePooling2D,GlobalMaxPooling2D\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.wrappers.scikit_learn import KerasClassifier\nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras.utils import to_categorical # convert to one-hot-encoding\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras.optimizers import Adam, SGD\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,array_to_img\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping,ModelCheckpoint\nfrom tensorflow.keras.metrics import PrecisionAtRecall,Recall\nfrom sklearn.metrics import confusion_matrix, accuracy_score, precision_recall_fscore_support","3f31d736":"np.random.seed(0)\ntf.random.set_seed(0)","aecfda9a":"# LOAD DATA\npath = '..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset'\n\ndiag_code_dict = {\n    'COVID': 0,\n    'Lung_Opacity': 1,\n    'Normal': 2,\n    'Viral Pneumonia': 3}\n\ndiag_title_dict = {\n    'COVID': 'Covid-19',\n    'Lung_Opacity': 'Lung Opacity',\n    'Normal': 'Healthy',\n    'Viral Pneumonia': 'Viral Pneumonia'}\n\nimageid_path_dict = {os.path.splitext(os.path.basename(x))[0]: x for x in glob(os.path.join(path, '*','*.png'))}\n\ncovidData = pd.DataFrame.from_dict(imageid_path_dict, orient = 'index').reset_index()\ncovidData.columns = ['image_id','path']\nclasses = covidData.image_id.str.split('-').str[0]\ncovidData['diag'] = classes\ncovidData['target'] = covidData['diag'].map(diag_code_dict.get) \ncovidData['Class'] = covidData['diag'].map(diag_title_dict.get)","ac75a305":"covidData.Class.unique()","1e1b4227":"covidData.head()","28c828a9":"for i in covidData.Class.unique():\n    count = covidData[covidData.Class == i].shape[0]\n    print(f\"{i} samples :\", count, end=' ; ')\n    print(f\"{round(count\/covidData.shape[0] * 100, 3)} % \\n\")","c72389d3":"covidData.isnull().sum()\n# no null values","6e96b025":"# collect 4 images from each class\nsample_imgs = []\nclasses = covidData.Class.unique()\nfor i in classes:\n    for j in range(4):\n        sample_imgs.append(cv2.imread(covidData[covidData.Class == i].iloc[j, 1]))\n        \n# plot each image from sample_imgs\nplt.figure(figsize=(16,16))\n\nfor i in range(0,16):\n    plt.subplot(4, 4, i+1)\n    plt.imshow(sample_imgs[i])\n    plt.axis('off')\n    plt.title(classes[i\/\/4])","35515004":"covidData.drop('diag',axis=1, inplace=True) # redundant column","0021fb52":"img = cv2.imread(covidData.iloc[0,1])\n# shape of the image\nimg.shape\n# 299 by 299 pixels","30056dd5":"covidData['image'] = covidData['path'].map(lambda x : np.array(Image.open(x).resize((75,75))))","0623a574":"covidData = covidData[['image_id', 'path', 'target', 'image', 'Class']] # rearranging the columns","16183eef":"mean_vals, max_vals, min_vals, std_vals = [],[],[],[]\n\nfor i in range(covidData.shape[0]):\n    mean_vals.append(covidData['image'][i].mean())\n    max_vals.append(covidData['image'][i].max())\n    min_vals.append(covidData['image'][i].min())\n    std_vals.append(np.std(covidData['image'][i]))\n    \nraw_df = covidData.loc[:, ['image']]\nraw_df['max'] = max_vals\nraw_df['min'] = min_vals\nraw_df['mean'] = mean_vals\nraw_df['std'] = std_vals\nraw_df['Class'] = covidData.loc[:,'Class']","fdb56a80":"raw_df.head()","ca9c439d":"ax = sns.displot(data = raw_df, x = 'mean', kind=\"kde\")\nplt.title('Image color mean value distribution')","ce29b192":"raw_df[raw_df.Class=='Healthy']['mean'].plot(kind='hist',\n                                             figsize=(14,8),\n                                             alpha=0.6)\n\nraw_df[raw_df.Class=='Lung Opacity']['mean'].plot(kind='hist',alpha=0.6)\n\nraw_df[raw_df.Class=='Viral Pneumonia']['mean'].plot(kind='hist', alpha=0.6)\n\nraw_df[raw_df.Class=='Covid-19']['mean'].plot(kind='hist', alpha=0.6)\n\n\nplt.xlabel('PIXELS')\nplt.title('PIXEL MEAN DISTRIBUTION AMONG CLASSES', fontsize=20)\nplt.legend(raw_df.Class.unique())\nplt.plot()\n","b502365f":"ax = sns.displot(data = raw_df, x = 'max', kind=\"kde\", hue='Class')\nplt.title('Image color max value distribution by class',fontsize=15)","34d14abf":"ax = sns.displot(data = raw_df, x = 'min', kind=\"kde\", hue='Class')\nplt.title('Image color max value distribution by class',fontsize=15)","7260806f":"plt.figure(figsize=(20,8))\nsns.set(style=\"ticks\", font_scale = 1)\nax = sns.scatterplot(data=raw_df, x=\"mean\", y=raw_df['std'], hue = 'Class',alpha=0.8)\nsns.despine(top=True, right=True, left=False, bottom=False)\nplt.xticks(rotation=0,fontsize = 12)\nax.set_xlabel('Image Channel Colour Mean',fontsize = 14,weight = 'bold')\nax.set_ylabel('Image Channel Colour Standard Deviation',fontsize = 14,weight = 'bold')\nplt.title('Mean and Standard Deviation of Image Samples', fontsize = 16,weight = 'bold')\n\n# It is evident from the histogram and this scatter plot that COVID samples tend to have a slightly higher mean and standard deviation from Non-Covid samples","971a06a6":"# Plotting the average image of each class\n\ndef find_mean_img(full_mat, title):\n    # calculate the average\n    mean_img = np.zeros((75,75))\n    for i in range(full_mat.shape[0]):\n        if full_mat.iloc[i, 0].shape == (75,75):            # About a 100 images have shape (75,75,3) instead of (75,75). Strage.     \n            mean_img += full_mat.iloc[i,0]                  # I didn't know what to do about it, so I skipped them while calculating the mean_img\n    mean_img \/= full_mat.shape[0]\n    # plot the average image\n    plt.imshow(mean_img, vmin=0, vmax=255, cmap='Greys_r')\n    plt.title(f'Mean {title}')\n    plt.axis('off')\n    plt.show()\n    return mean_img\n\nfor i in raw_df.Class.unique():\n    find_mean_img(raw_df[raw_df.Class == i][['image']], i)","be04db31":"# I don't really see much difference except maybe the average Non-Covid lungs looks slightly larger and well defined than average Covid lungs","8ab12a89":"# The images with these index in covidData have shape (75,75,3) instead of (75,75). Strange\nfor i in range(raw_df.shape[0]):\n    if raw_df['image'][i].shape!=(75,75):\n        print(i, end=', ')","8ad223dc":"path = '..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset'\n\nclasses = [\"COVID\", \"Lung_Opacity\", \"Normal\", \"Viral Pneumonia\"]\nnum_classes = len(classes)\nbatch_size = 16\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n                                  rotation_range=20,\n                                  width_shift_range=0.2,\n                                  height_shift_range=0.2,\n                                  horizontal_flip=True, validation_split=0.2)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255,\n                                 validation_split=0.2)\n\ntrain_gen = train_datagen.flow_from_directory(directory=path,\n                                             target_size=(299, 299),\n                                             class_mode='categorical',\n                                             subset='training',\n                                             shuffle=True, classes=classes,\n                                             batch_size=batch_size,\n                                             color_mode=\"grayscale\")\n\ntest_gen = test_datagen.flow_from_directory(directory=path,\n                                             target_size=(299, 299),\n                                             class_mode='categorical',\n                                             subset='validation',\n                                             shuffle=False, classes=classes,\n                                             batch_size=batch_size,\n                                             color_mode=\"grayscale\")","48678fc0":"model = Sequential()\nmodel.add(Conv2D(32, (3,3), activation='relu', padding='Same', input_shape=(299, 299, 1)))\nmodel.add(BatchNormalization())\n\n################\n\nmodel.add(Conv2D(64, (3,3), activation='relu', padding='Same'))\nmodel.add(BatchNormalization())\nmodel.add(AveragePooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3,3), activation='relu', padding='Same'))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(64, (3,3), activation='relu', padding='Same'))\nmodel.add(BatchNormalization())\nmodel.add(AveragePooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\n#################\n\nmodel.add(Conv2D(64, (3,3), activation='relu', padding='Same'))\nmodel.add(BatchNormalization())\nmodel.add(AveragePooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3,3), activation='relu', padding='Same'))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(64, (3,3), activation='relu', padding='Same'))\nmodel.add(BatchNormalization())\nmodel.add(AveragePooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\n#################\n\nmodel.add(Flatten())\n\nmodel.add(BatchNormalization())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.25))\n\n#Output \nmodel.add(BatchNormalization())\nmodel.add(Dense(num_classes, activation='softmax'))","689c9096":"model.summary()","b9708866":"opt = Adam(lr=0.002, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.1, amsgrad=False)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=[Recall()])","1569f76e":"#Model params\nepochs=300\n\n#callback\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_loss', patience=10, factor=0.5, min_lr=0.00001)\nearly_stopping_monitor = EarlyStopping(patience=100, monitor='val_loss', mode='min')\n\ncallbacks_list = [learning_rate_reduction, early_stopping_monitor]\n\nhistory = model.fit(train_gen,\n                    steps_per_epoch=len(train_gen) \/\/ batch_size,\n                    validation_steps=len(test_gen) \/\/ batch_size,\n                    validation_data=test_gen, epochs=epochs, callbacks=[callbacks_list])","dbb3a986":"y_pred = model.predict(test_gen)","5e564ea1":"history.history.keys()","b5ac33cb":"fig, axarr = plt.subplots(1,3, figsize=(15,5), sharex=True)\n\nsns.set(style=\"ticks\", font_scale = 1)\nsns.despine(top=True, right=True, left=False, bottom=False)\n\nhistoryDF = pd.DataFrame.from_dict(history.history)\nax = sns.lineplot(x = historyDF.index, y = history.history['recall'], ax=axarr[0], label=\"Training\");\nax = sns.lineplot(x = historyDF.index, y = history.history['val_recall'], ax=axarr[0], label=\"Validation\");\nax.set_ylabel('Recall')\n\nax = sns.lineplot(x = historyDF.index, y = history.history['loss'], ax=axarr[1], label=\"Training\");\nax = sns.lineplot(x = historyDF.index, y = history.history['val_loss'], ax=axarr[1], label=\"Validation\");\nax.set_ylabel('Loss')\n\nax = sns.lineplot(x = historyDF.index, y = history.history['lr'], ax=axarr[2]);\nax.set_ylabel('Learning Rate')\n\naxarr[0].set_title('Training and Validation metric recall')\naxarr[1].set_title('Training and Validation loss')\naxarr[2].set_title('lr during training')\n\nfor ax in axarr:\n    ax.set_xlabel('Epochs')\n\nplt.suptitle('Training and performance plots', fontsize=16, weight='bold');\nfig.tight_layout(pad=3.0)\nplt.show()","a920bc9b":"predictions = np.array(list(map(lambda x: np.argmax(x), y_pred)))\n\ny_true=test_gen.classes\n\nCMatrix = pd.DataFrame(confusion_matrix(y_true, predictions), columns=classes, index =classes)\n\nplt.figure(figsize=(12, 6))\nax = sns.heatmap(CMatrix, annot = True, fmt = 'g' ,vmin = 0, vmax = 250,cmap = 'Blues')\nax.set_xlabel('Predicted',fontsize = 14,weight = 'bold')\nax.set_xticklabels(ax.get_xticklabels(),rotation =0);\n\nax.set_ylabel('Actual',fontsize = 14,weight = 'bold') \nax.set_yticklabels(ax.get_yticklabels(),rotation =0);\nax.set_title('Confusion Matrix - Test Set',fontsize = 16,weight = 'bold',pad=20);","2eb2e54b":"acc = accuracy_score(y_true, predictions)\n\nresults_all = precision_recall_fscore_support(y_true, predictions, average='macro', zero_division=1)\nresults_class = precision_recall_fscore_support(y_true, predictions, average=None, zero_division=1)\n\nmetric_columns = ['Precision','Recall', 'F-Score','S']\nall_df = pd.concat([pd.DataFrame(list(results_class)).T,pd.DataFrame(list(results_all)).T])\nall_df.columns = metric_columns\nall_df.index = ['COVID', 'Lung_Opacity', 'Normal', 'Viral Pneumonia','Total']\n\ndef metrics_plot(df,metric):\n    plt.figure(figsize=(22,10))\n    ax = sns.barplot(data =df, x=df.index, y = metric,palette = \"Blues_d\")\n    #Bar Labels\n    for p in ax.patches:\n        ax.annotate(\"%.1f%%\" % (100*p.get_height()), (p.get_x() + p.get_width() \/ 2., abs(p.get_height())),\n        ha='center', va='bottom', color='black', xytext=(-3, 5),rotation = 'horizontal',textcoords='offset points')\n    sns.despine(top=True, right=True, left=True, bottom=False)\n    ax.set_xlabel('Class',fontsize = 14,weight = 'bold')\n    ax.set_ylabel(metric,fontsize = 14,weight = 'bold')\n    ax.set(yticklabels=[])\n    ax.axes.get_yaxis().set_visible(False) \n    plt.title(metric+ ' Results per Class', fontsize = 16,weight = 'bold');\n\nmetrics_plot(all_df, 'Precision')#Results by Class\nmetrics_plot(all_df, 'Recall')#Results by Class\nmetrics_plot(all_df, 'F-Score')#Results by Class\nprint('**Overall Results**')\nprint('Accuracy Result: %.2f%%'%(acc*100)) #Accuracy of the whole Dataset\nprint('Precision Result: %.2f%%'%(all_df.iloc[4,0]*100))#Precision of the whole Dataset\nprint('Recall Result: %.2f%%'%(all_df.iloc[4,1]*100))#Recall of the whole Dataset\nprint('F-Score Result: %.2f%%'%(all_df.iloc[4,2]*100))#F-Score of the whole Dataset","c6a20519":"<font size='5'>**EDA**<\/font>","141ab25e":"<font size='6'> **MODEL** <\/font>"}}