{"cell_type":{"72c1019b":"code","d02ba89b":"code","4afdeccc":"code","b2b1f159":"code","a5206e69":"code","455e1c98":"code","7b161206":"code","da84a55f":"code","06897cab":"code","2292d5b5":"code","cc67bb8e":"code","94a92deb":"code","00abcc5c":"code","7c3b43e5":"code","7658be7b":"code","0d1e9b65":"code","b0227253":"code","a820527f":"code","8c7421ba":"code","78cd6b92":"code","04339c3c":"code","d885fcfb":"markdown"},"source":{"72c1019b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport random\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport plotly.express as px\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d02ba89b":"import tensorflow as tf\nimport pandas as pd\nimport numpy as np\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Conv2D,MaxPool2D,Flatten,Dropout,BatchNormalization,Activation\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing.image import load_img,img_to_array\nimport random\nfrom tensorflow.keras import layers\nimport matplotlib.image as mpimg\nimport inspect\nfrom tqdm import tqdm","4afdeccc":"#IMPORTING THE TRAIN, TEST and VALIDATION IMAGE SETS\n# target=(64,64) or (75,75) or (331,331)\ndef image_import (target):\n    train_datagen = ImageDataGenerator(rescale = 1.\/255,shear_range = 0.2,zoom_range = 0.2,horizontal_flip = True)\n    train_set = train_datagen.flow_from_directory('..\/input\/100-bird-species\/train', target_size = target,batch_size = 2944,\n                                                 class_mode = 'categorical')\n    test_datagen = ImageDataGenerator(rescale = 1.\/255)\n    test_set = test_datagen.flow_from_directory('..\/input\/100-bird-species\/test',\n                                                 target_size = target,\n                                                 batch_size = 265,\n                                                 class_mode = 'categorical')\n    val_datagen = ImageDataGenerator(rescale = 1.\/255)\n    val_set = val_datagen.flow_from_directory('..\/input\/100-bird-species\/valid',\n                                                 target_size = target,\n                                                 batch_size = 265,\n                                                 class_mode = 'categorical')\n    return train_set,test_set,val_set\n\n    ","b2b1f159":"data=pd.read_csv('..\/input\/100-bird-species\/kagle-birds.csv',index_col=0)","a5206e69":"#Total Number OF Class\nprint(\"The total Classes in the dataset is {}\".format(len(data.labels.value_counts())))","455e1c98":"#Visualizing the Images In Train set\ndef display_random_grid(ncols=5, ds_path='..\/input\/100-bird-species\/train\/'):\n    fig, ax = plt.subplots(ncols=ncols, nrows=ncols, figsize=(15, 15))\n    \n    for i in range(ncols):\n        for j in range(ncols):\n            bird_species = random.choice(os.listdir(ds_path))\n            random_bird_path = random.choice(os.listdir(ds_path + bird_species))\n            random_bird = mpimg.imread(ds_path + bird_species + '\/' + random_bird_path)\n            ax[i, j].imshow(random_bird)\n            ax[i, j].set_title(bird_species)\n            ax[i, j].axis('off')\n            \ndisplay_random_grid()","7b161206":"# #PREDICT FUNCTION\n# #size(64,64,3)\n# #NAME=\"Model_Name\"\n# def predict(size,NAME):\n    \n# #     fig, ax = plt.subplots(ncols=5, nrows=1, figsize=(15, 15))\n# #     for i in range(5):\n#         ds_path='..\/input\/100-bird-species\/test\/'                 #XChangeX\n#         random_species=random.choice(os.listdir(ds_path))\n#         random_bird_path = random.choice(os.listdir(ds_path + random_species))\n#         image_path = ds_path + random_species + '\/' + random_bird_path                      #XChangeX\n#         print(image_path)\n\n#             #Predicting the result\n#         image = load_img(image_path, target_size=size)    #XChangeX \n#         image = img_to_array(image)\n        \n#         image=np.expand_dims(image, axis = 0)\n#         # y=model.predict(image)\n#         dic=train_processed.class_indices    \n#         icd={k:v for v,k in dic.items()}\n#         # train_set.class_indices\n#         y=clf_model.predict(image)                             #XChangeX\n#         answer=np.argmax(y,axis=1)\n#         print(\"The prediction by the model {} is {}\".format(NAME ,icd[answer[0]]))     #XChangeX\n\n#         #Visualizing the Test Image\n#         plt.imshow(mpimg.imread(image_path))\n#         plt.title(random_species)\n#         plt.axis('off')\n#         plt.show","da84a55f":"# #PREDICT FUNCTION\n# #size(64,64,3)\n# #NAME=\"Model_Name\"\n# def predict(size,NAME):\n#     random_species=[]\n#     random_bird_path=[]\n#     image_path=[]\n#     fig, ax = plt.subplots(ncols=5, nrows=1, figsize=(15, 15))\n#     for i in range(5):\n#         ds_path='..\/input\/100-bird-species\/test\/'                 #XChangeX\n#         random_species.append(random.choice(os.listdir(ds_path)))\n#         random_bird_path.append(random.choice(os.listdir(ds_path + random_species[i])))\n#         image_path.append(ds_path + random_species[i] + '\/' + random_bird_path[i])                      #XChangeX\n#         print(image_path[i])\n\n#             #Predicting the result\n#         image = load_img(image_path[i], target_size=size)    #XChangeX \n#         image = img_to_array(image)\n#         image=np.expand_dims(image, axis = 0)\n#         # y=model.predict(image)\n#         dic=train_processed.class_indices    \n#         icd={k:v for v,k in dic.items()}\n#         # train_set.class_indices\n#         y=cnn.predict(image)                             #XChangeX\n#         answer=np.argmax(y,axis=1)\n#         print(\"The prediction by the model {} is {}\".format(NAME ,icd[answer[0]]))     #XChangeX\n\n#         #Visualizing the Test Image\n#         ax[i].imshow(mpimg.imread(image_path[i]))\n#         ax[i].title(random_species[i])\n#         ax[i].axis('off')","06897cab":"cnn = tf.keras.models.Sequential()\ncnn.add(tf.keras.layers.Conv2D(filters=48, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))\ncnn.add(tf.keras.layers.Conv2D(filters=48, kernel_size=3, activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))\ncnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))\ncnn.add(tf.keras.layers.Flatten())\ncnn.add(tf.keras.layers.Dense(1024, activation='relu'))\ncnn.add(tf.keras.layers.Dense(2048, activation='relu'))\ncnn.add(tf.keras.layers.Dense(265, activation='softmax'))","2292d5b5":"opt=tf.keras.optimizers.Adam(learning_rate=0.003)\ncnn.compile(optimizer = opt, loss = 'categorical_crossentropy', metrics = ['accuracy'])","cc67bb8e":"#importing data\ntrain_64,test_64,val_64=image_import((64,64))","94a92deb":"history1=cnn.fit(x=train_64, validation_data = val_64, epochs = 20)","00abcc5c":"#Loss\nplt.plot(history1.history['loss'],label='loss')\nplt.plot(history1.history['val_loss'],label='val_loss')\nplt.legend()\nplt.show()\n#Accuracy\nplt.plot(history1.history['accuracy'],label='acc')\nplt.plot(history1.history['val_accuracy'],label='val_acc')\nplt.legend()\nplt.show()","7c3b43e5":"cnn.evaluate(test_64)","7658be7b":"# ds_path='..\/input\/100-bird-species\/test\/'                 #XChangeX\n# random_species=random.choice(os.listdir(ds_path))\n# random_bird_path = random.choice(os.listdir(ds_path + random_species))\n# image_path = ds_path + random_species + '\/' + random_bird_path                      #XChangeX\n# print(image_path)\n\n#     #Predicting the result\n# image = load_img(image_path, target_size=(64,64,3))    #XChangeX \n# image = img_to_array(image)\n# image=np.expand_dims(image, axis = 0)\n# # y=model.predict(image)\n# dic=train_processed.class_indices    \n# icd={k:v for v,k in dic.items()}\n# # train_set.class_indices\n# y=cnn.predict(image)                             #XChangeX\n# answer=np.argmax(y,axis=1)\n# print(\"The prediction by the model {} is {}\".format(\"CNN Self\" ,icd[answer[0]]))     #XChangeX\n\n# #Visualizing the Test Image\n# plt.imshow(mpimg.imread(image_path))\n# plt.title(random_species)\n# plt.axis('off')","0d1e9b65":"# predict((64, 64, 3),\"self CNN\")","b0227253":"model_dict = {m[0]:m[1] for m in inspect.getmembers(tf.keras.applications, inspect.isfunction)}\n# keys=['Xception','InceptionV3','MobileNet','DenseNet169']\nkeys=['InceptionV3','MobileNet','DenseNet169']\nmodel_d={key: model_dict[key] for key in keys}\nprint (\"List of all the Pre-trained Models are : \")\nfor i in enumerate(model_d.keys()):\n    print (i)","a820527f":"#Importing the data required for training\ntrain_processed_200,test_processed_200,validation_processed_200=image_import((200,200))\ntrain_processed_299,test_processed_299,validation_processed_299=image_import((299,299))","8c7421ba":"# Loop over each pre-trained models \nmodel_benchmarks = {'model_name': [], 'num_model_params': [], 'validation_accuracy': [],'test_set_score' : []}\n\nfor model_name, model in tqdm(model_d.items()):\n    # Special handling for \"Xception\" since it requires input images with size more than (299,299)\n    if 'Xception' in model_name:\n        input_shape=(299,299,3)\n        train_processed = train_processed_299\n        validation_processed = validation_processed_299\n        test_processed= test_processed_299 \n    else:\n        input_shape=(200,200,3)\n        train_processed = train_processed_200\n        validation_processed = validation_processed_200\n        test_processed= test_processed_200\n#         base_model = VGG16(input_shape = (224, 224, 3),include_top = False,weights = 'imagenet')\n    # load the pre-trained model with global average pooling as the last layer and freeze the model weights\n    pre_trained_model = model(include_top=False, pooling='avg', input_shape=input_shape,weights = 'imagenet')\n#     for layer in pre_trained_model.layers:\n#     layer.trainable = False\n    pre_trained_model.trainable = False\n    \n    # custom modifications on top of pre-trained model and fit\n    clf_model = tf.keras.models.Sequential()\n    clf_model.add(pre_trained_model)\n    clf_model.add(tf.keras.layers.Dense(265, activation='softmax'))\n    opt=tf.keras.optimizers.Adam(learning_rate=0.004)\n    clf_model.compile(optimizer=opt,loss='categorical_crossentropy', metrics=['accuracy'])\n    history = clf_model.fit(train_processed, epochs=10, validation_data=validation_processed)\n    \n   \n\n\n    \n    #Loss\n    plt.plot(history.history['loss'],label='loss')\n    plt.plot(history.history['val_loss'],label='val_loss')\n    plt.legend()\n    plt.show()\n    #Accuracy\n    plt.plot(history.history['accuracy'],label='acc')\n    plt.plot(history.history['val_accuracy'],label='val_acc')\n    plt.legend()\n    plt.show()\n    \n    # Calculate all relevant metrics\n    model_benchmarks['model_name'].append(model_name)\n    model_benchmarks['num_model_params'].append(pre_trained_model.count_params())\n    model_benchmarks['validation_accuracy'].append(history.history['val_accuracy'][-1])\n    model_benchmarks['test_set_score'].append(clf_model.evaluate(test_processed))\n          ","78cd6b92":"# Convert Results to DataFrame for easy viewing\nbenchmark_df = pd.DataFrame(model_benchmarks)\n\n# sort in ascending order of num_model_params column\nbenchmark_df.sort_values('num_model_params', inplace=True)\n\n# write results to csv file\nbenchmark_df.to_csv('benchmark_df.csv', index=False)\nbenchmark_df","04339c3c":"# clf_model = tf.keras.models.Sequential()\n#     clf_model.add(pre_trained_model)\n#     clf_model.add(tf.keras.layers.Dense(265, activation='softmax'))\n#     clf_model.compile(loss='categorical_crossentropy', metrics=['accuracy'])","d885fcfb":"Training Pre_trained models"}}