{"cell_type":{"0f519112":"code","a2bd8e77":"code","1ab9e565":"code","97e25e1c":"code","c422c0eb":"code","27038c38":"code","82480929":"code","57cbfe2f":"code","53d68d49":"code","96a162bb":"code","509834e1":"code","f548c750":"code","0a167cc1":"code","d8200e70":"code","503032f0":"code","7058190e":"code","16914245":"code","d48ba143":"markdown","915d7867":"markdown","08a1b6a0":"markdown","af99a8c1":"markdown","d787cdf9":"markdown"},"source":{"0f519112":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a2bd8e77":"df = pd.read_csv('\/kaggle\/input\/passenger-list-for-the-estonia-ferry-disaster\/estonia-passenger-list.csv')","1ab9e565":"df.head()","97e25e1c":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['Sex'] = le.fit_transform(df.Sex)\ndf.Category = le.fit_transform(df.Category)","c422c0eb":"df = df[['Sex', 'Age', 'Category', 'Survived']]","27038c38":"df.head()","82480929":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(df.iloc[:, :-1], df.iloc[:,-1], \n                                                   test_size=0.2, random_state=1)","57cbfe2f":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","53d68d49":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\n\npipeline = make_pipeline(StandardScaler(), RandomForestClassifier(n_estimators=100, max_depth=4))","96a162bb":"pipeline.fit(X_train, y_train)","509834e1":"print('Model Accuracy: %.2f' % pipeline.score(X_test, y_test))","f548c750":"print('Model Accuracy: %.2f' % pipeline.score(X_train, y_train))","0a167cc1":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(pipeline, X=X_train, y=y_train, cv=10, n_jobs=1)","d8200e70":"print('CV accuracy scores: %s' % scores)","503032f0":"print('CV accuracy: %.3f +\/- %.3f' % (np.mean(scores),np.std(scores)))","7058190e":"from sklearn.model_selection import StratifiedKFold\n\nkfold = StratifiedKFold(n_splits=10).split(X_train, y_train)\nscores = []","16914245":"for k, (train, test) in enumerate(kfold):\n    print(k, train, test)","d48ba143":"# Usage of cross_val_score for computing cross-validation scores","915d7867":"# StratifiedKFold Example for Computing Cross-Validation Scores","08a1b6a0":"# Pipeline as Input Estimator","af99a8c1":"# Creating Train \/ Test Split","d787cdf9":"# LabelEncoder used to Encode Binary Nominal Categorical Features"}}