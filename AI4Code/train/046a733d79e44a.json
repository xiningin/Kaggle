{"cell_type":{"54cf11e6":"code","89efffc0":"code","5895c66a":"code","1a5e766b":"code","bad557c7":"code","5070ef8e":"code","6feb26d2":"code","6d05b774":"code","ff074a4f":"code","01cdfce3":"code","7c212f5f":"code","f2257f48":"code","ae56e76e":"code","7e3b4a52":"code","2dbfb668":"markdown","0e311ba9":"markdown","daee5707":"markdown","08854945":"markdown","a1ed7a68":"markdown","41206da1":"markdown"},"source":{"54cf11e6":"import pandas as pd\nimport numpy as np\nimport os\nimport tqdm\nimport pickle\n\n\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.metrics import roc_auc_score\n\nfrom catboost import CatBoostClassifier, Pool\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = '0'\n\nnp.warnings.filterwarnings('ignore')","89efffc0":"# CURRENT_DIR = '.\/'  # \u0438\u043c\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u044b \nCURRENT_DIR = '..\/'  # \u0438\u043c\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043a\u0430\u0433\u0433\u043b\n\nPATH_TO_WORKDIR = CURRENT_DIR + 'working\/'","5895c66a":"!pip freeze > requirements.txt","1a5e766b":"!nvidia-smi","bad557c7":"merged_train_data = pd.read_csv('..\/input\/alfabattle2-sandbox\/preproc_data_for_boosting\/preproc_data_for_boosting\/merged_data.csv')\nmerged_test_data = pd.read_csv('..\/input\/alfabattle2-sandbox\/preproc_data_for_boosting\/preproc_data_for_boosting\/merged_test_data.csv')","5070ef8e":"features = [x for x in merged_train_data.columns if x not in ['app_id', 'flag']]","6feb26d2":"targets = merged_train_data.flag.values\n\ncv = KFold(n_splits=5, random_state=100, shuffle=True)","6d05b774":"name_model = 'CatBoost'","ff074a4f":"!mkdir model_CatBoost","01cdfce3":"%%time\n\noof = np.zeros(len(merged_train_data))\ntrain_preds = np.zeros(len(merged_train_data))\n\nmodels = []\n\ntree_params = {\n    'max_depth': 5,\n    'eval_metric': 'AUC',\n    'loss_function': 'Logloss',\n    'random_state': 100,\n    'l2_leaf_reg': 1,\n    'task_type': 'GPU' # \u0435\u0441\u043b\u0438 \u0438\u043c\u0435\u0435\u0442\u0441\u044f GPU \u0441 CUDA, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0435\u0435 \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043d\u0430 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\n}\n\n\nfor fold_, (train_idx, val_idx) in enumerate(cv.split(merged_train_data, targets), 1):\n    print(f'\u041d\u0430\u0447\u0430\u043b\u043e\u0441\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0444\u043e\u043b\u0434\u0435 \u043d\u043e\u043c\u0435\u0440:= {fold_}.')\n    model = CatBoostClassifier(**tree_params)    \n    \n    train, val = merged_train_data.iloc[train_idx], merged_train_data.iloc[val_idx]\n    \n    train_pool = Pool(train[features], train.flag.values)\n    val_pool = Pool(val[features], val.flag.values)\n    \n\n    model.fit(train_pool, eval_set=[val_pool], early_stopping_rounds=100, verbose_eval=50, use_best_model=True, plot=False)\n    \n    oof[val_idx] = model.predict_proba(val_pool)[:, 1]\n    \n    train_preds[train_idx] += model.predict_proba(train_pool)[:, 1] \/ (cv.n_splits-1)\n    models.append(model)\n    \n    file_name_model = f'model_CatBoost\/model_{name_model}_{fold_}'\n    model.save_model(PATH_TO_WORKDIR + file_name_model)\n    print(f'\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0444\u043e\u043b\u0434\u0435 \u043d\u043e\u043c\u0435\u0440:= {fold_} \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u043e\u0441\u044c.')","7c212f5f":"file_name_pickle = f'model_CatBoost\/feats_model{name_model}.pickle'\nwith open(PATH_TO_WORKDIR + file_name_pickle, 'wb') as f:\n    pickle.dump(features, f)","f2257f48":"'Train roc-auc model CatBoost', roc_auc_score(targets, train_preds)","ae56e76e":"'CV roc-auc  model CatBoost', roc_auc_score(targets, oof)","7e3b4a52":"score = np.zeros(len(merged_test_data))\n\ntest_pool = Pool(merged_test_data[features])\n\nfor model in tqdm.tqdm_notebook(models):\n    score += model.predict_proba(test_pool)[:, 1] \/ len(models)\n    \nsubmission = pd.DataFrame({\n    'app_id' : merged_test_data.app_id.values,\n    'score': score\n}) \nsubmission.to_csv(PATH_TO_WORKDIR + f'sub_model{name_model}.csv', index=None) # ~ 0.732 \u043d\u0430 public test","2dbfb668":"## 1.2. \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b","0e311ba9":"# 2. \u0418\u043c\u043f\u043e\u0440\u0442 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n---\n\u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u043b\u0430\u0441\u044c \u0432 [\u043f\u0435\u0440\u0432\u043e\u043c \u043a\u0435\u0440\u043d\u0435\u043b\u0435](https:\/\/www.kaggle.com\/sokolovaleks\/sf-dst-10-diplom-1-ml-sokolov)","daee5707":"# 4. CatBoost + CV","08854945":"## 1.3. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 GPU","a1ed7a68":"### \u0414\u0438\u043f\u043b\u043e\u043c\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430 \u0421\u043e\u043a\u043e\u043b\u043e\u0432\u0430\n\n#### \u0413\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433 (CatBoost + GPU)\n\u041a\u0435\u0440\u043d\u0435\u043b 4 \u0438\u0437 5 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 ML (\u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d 21.04.2021)\n---\n\n# 1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\n## 1.1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","41206da1":"# 3. \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443\n---\n\u0412\u0430\u0436\u043d\u043e \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443, \u0447\u0442\u043e\u0431\u044b \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f. "}}