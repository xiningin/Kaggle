{"cell_type":{"e0295e96":"code","495fabf4":"code","74bcf9bf":"code","31a56298":"code","7313b946":"code","4776a33a":"code","50d3eb76":"code","660a5ca4":"code","c7808379":"code","97a46e34":"code","dfb69f2c":"code","8e263df7":"code","5bf7cbd9":"code","87f028ad":"code","ec0f180b":"markdown"},"source":{"e0295e96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","495fabf4":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","74bcf9bf":"data = pd.read_csv('\/kaggle\/input\/suv-data\/suv_data.csv')\ndata.head(10)","31a56298":"data.isnull().sum()","7313b946":"data.drop('User ID', axis = 1, inplace = True)\ndata.head()","4776a33a":"sns.countplot(x = 'Purchased', hue = 'Gender', data = data)","50d3eb76":"#X = data.drop(['Gender', 'Purchased'], axis = 1)\n#y = data[\"Purchased\"]\nX = data.iloc[:,[1,2]].values\ny = data.iloc[:,3].values","660a5ca4":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test =  train_test_split(X, y, test_size = 0.25, random_state = 1)","c7808379":"from sklearn.linear_model import LogisticRegression","97a46e34":"logmodel = LogisticRegression()\nlogmodel.fit(X_train, y_train)","dfb69f2c":"predictions = logmodel.predict(X_test)","8e263df7":"from sklearn.metrics import classification_report\nclassification_report(y_test, predictions)","5bf7cbd9":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, predictions)","87f028ad":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, predictions)","ec0f180b":"*    pN pY\n* AN\n* AY"}}