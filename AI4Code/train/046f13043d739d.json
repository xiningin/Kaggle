{"cell_type":{"491cbe29":"code","e59cee05":"code","b6937767":"code","0b1dea38":"code","db3732c4":"code","6f1cd239":"code","ab15ea4f":"code","3f456651":"code","8e04a9a0":"code","51acbaac":"code","77d47913":"code","d269f3f6":"code","3acd9f67":"code","b8c4dfa4":"code","2251c0d9":"code","ae65a400":"code","5f01c01d":"code","aed720ff":"code","6dddea51":"code","4b1312cb":"code","700322c6":"code","6ddb80b2":"code","2ae21d01":"code","2508b199":"code","5a74bccc":"code","c7ba1b58":"code","e52d4df3":"code","edef3914":"markdown","13598c5b":"markdown"},"source":{"491cbe29":"import re\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e59cee05":"import nltk\nfrom nltk.corpus import stopwords\nnltk.download('stopwords')","b6937767":"# Labeled Reviews\nimdb_sup_df = pd.read_csv('..\/input\/imdb-movie-reviews-with-ratings-50k\/imdb_sup.csv')\n\n# Unlabeled Reviews\n# imdb_unsup_df = pd.read_csv('..\/input\/imdb-movie-reviews-with-ratings-50k\/imdb_unsup.csv')","0b1dea38":"imdb_sup_df","db3732c4":"def text_clean(message):\n  '''\n  message = \"#'This', is $string #with punction, <br \/> @'html_tag' and actual message also!\"\n\n  return 'string punction html_tag actual message also'\n  '''\n\n  html_tag = '<br \/>'\n  message = message.replace(html_tag,'')  # remove html tag\n  message = re.sub(r'[^\\w\\s]', '', message)   # remove punctiation\n  message = message.lower()\n  message = [word for word in message.split() if word not in stopwords.words('english')]\n  message = ' '.join(message)\n\n  return message","6f1cd239":"test_str = \"#'This', is $string #with punction, <br \/> @'html_tag' and actual message also!\"\ntext_clean(test_str)","ab15ea4f":"# this cell will take around 15-20 min\n\nimdb_sup_df['Review'] = imdb_sup_df['Review'].apply(text_clean)","3f456651":"imdb_sup_df","8e04a9a0":"from nltk.stem.porter import PorterStemmer\n\nporterstemmer = PorterStemmer()\n\ndef steming(message):\n  return[porterstemmer.stem(word) for word in message.split()]","51acbaac":"# 1-2 minute\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ntfidf = TfidfVectorizer(tokenizer=steming) # here stemming is our user defined function as above \n\nX = tfidf.fit_transform(imdb_sup_df['Review'])\ny = imdb_sup_df['Sentiment'].values","77d47913":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.5, shuffle=True)","d269f3f6":"from sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression(random_state=0).fit(X_train, y_train)","3acd9f67":"# Classification score in train data\nclf.score(X_train, y_train)","b8c4dfa4":"# Classification score in test data\nclf.score(X_test, y_test)","2251c0d9":"# Prediction on train data\nypred = clf.predict(X_train)\nypred","ae65a400":"# Prediction on test data\nyhat = clf.predict(X_test)\nyhat","5f01c01d":"from sklearn.metrics import classification_report, confusion_matrix\nimport itertools\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=0)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    # print(cm)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","aed720ff":"cm = confusion_matrix(y_test, yhat, labels=[1,0])\ncm2 = confusion_matrix(y_train, ypred, labels=[1,0])\n\nplt.figure(figsize=(20,5))\nplt.subplot(141)\nplot_confusion_matrix(cm, classes=[1,0], normalize= False, title='Confusion Matrix (Test Data)', cmap='RdPu')\nplt.subplot(142)\nplot_confusion_matrix(cm, classes=[1,0], normalize= True, title='Confusion Matrix (Test Data) (Normalized)', cmap='RdPu')\nplt.subplot(143)\nplot_confusion_matrix(cm2, classes=[1,0], normalize= False, title='Confusion Matrix (Train Data)')\nplt.subplot(144)\nplot_confusion_matrix(cm2, classes=[1,0], normalize= True, title='Confusion Matrix (Train Data) (Normalized)')","6dddea51":"imdb_sup_df","4b1312cb":"# 1-2 minute\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ntfidf = TfidfVectorizer(tokenizer=steming) # here stemming is our user defined function as above \n\nX = tfidf.fit_transform(imdb_sup_df['Review'])\ny = imdb_sup_df['Rating'].values","700322c6":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.5, shuffle=True)","6ddb80b2":"from sklearn.linear_model import LogisticRegression\n\nclf2 = LogisticRegression(multi_class='ovr', random_state=0).fit(X_train, y_train)","2ae21d01":"# Classification score in train data\nprint('Classification Score (Train)',clf.score(X_train, y_train))","2508b199":"# Classification score in test data\nprint('Classification Score (Test)',clf.score(X_test, y_test))","5a74bccc":"# Prediction on train data\nypred = clf2.predict(X_train)\nypred","c7ba1b58":"# Prediction on test data\nyhat = clf2.predict(X_test)\nyhat","e52d4df3":"cm = confusion_matrix(y_test, yhat, labels=[1,2,3,4,7,8,9,10])\ncm2 = confusion_matrix(y_train, ypred, labels=[1,2,3,4,7,8,9,10])\n\nplt.figure(figsize=(20,5))\nplt.subplot(141)\nplot_confusion_matrix(cm, classes=[1,2,3,4,7,8,9,10], normalize= False, title='Confusion Matrix (Test Data)', cmap='RdPu')\nplt.subplot(142)\nplot_confusion_matrix(cm, classes=[1,2,3,4,7,8,9,10], normalize= True, title='Confusion Matrix (Test Data) (Normalized)', cmap='RdPu')\nplt.subplot(143)\nplot_confusion_matrix(cm2, classes=[1,2,3,4,7,8,9,10], normalize= False, title='Confusion Matrix (Train Data)')\nplt.subplot(144)\nplot_confusion_matrix(cm2, classes=[1,2,3,4,7,8,9,10], normalize= True, title='Confusion Matrix (Train Data) (Normalized)')","edef3914":"# Predict Ratings","13598c5b":"---"}}