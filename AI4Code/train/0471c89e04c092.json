{"cell_type":{"27e1da02":"code","ca3c9639":"code","eb3f5f70":"code","ce9ca432":"code","6a0df8d2":"code","930ecc7b":"code","f4749e4d":"code","5c54b80d":"code","7f33c601":"code","cd8e7f67":"code","58d8f05e":"code","e0c16eaf":"code","50b959bf":"code","094c2375":"code","f2644be6":"code","95ffafcc":"code","4895e9a4":"code","81b01fbe":"markdown","825da23b":"markdown","e79e6518":"markdown","0e7e36df":"markdown","fd7d77b8":"markdown","ea69c38e":"markdown","7a8ac3b6":"markdown","f34a7655":"markdown","0b64a5bd":"markdown","fc379701":"markdown","e54d8534":"markdown","b3c92b0d":"markdown"},"source":{"27e1da02":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sn\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import confusion_matrix, accuracy_score","ca3c9639":"dataset = pd.read_csv(\"..\/input\/iris\/Iris.csv\")","eb3f5f70":"dataset.head()","ce9ca432":"dataset.shape","6a0df8d2":"species = dataset.groupby(\"Species\").size()\nsn.barplot(x=species.index, y=species.values)","930ecc7b":"plt.figure()\nsn.pairplot(dataset.drop(\"Id\", axis=1),\n             hue=\"Species\",\n             height=3,\n             palette=\"bright\",\n             markers=\"s\")\n\nplt.show()","f4749e4d":"labels = list(dataset[\"Species\"].unique())\nlabels","5c54b80d":"X = dataset.drop([\"Id\", \"Species\"], axis=1)\ny = dataset[\"Species\"]","7f33c601":"X.head()","cd8e7f67":"y.head()","58d8f05e":"X = X.to_numpy()","e0c16eaf":"encoder = LabelEncoder()\ny = encoder.fit_transform(y)","50b959bf":"print(X.shape)\nprint(y.shape)","094c2375":"k = 6\ncross_val = KFold(k, shuffle=True, random_state=1)\nfold_count = 1\n\n# For Confusion Matrix\ncm_list = []","f2644be6":"for train, validation in cross_val.split(X):\n    print(\"============================================================\")\n    print(\"Fold-{}\".format(fold_count))\n    print(\"------------------------------------------------------------\")\n    \n    # Prepare for training and prediction\/validation\n    X_train, y_train = X[train], y[train]\n    X_val, y_val = X[validation], y[validation]\n    \n    # Define the model\n    knn_model = KNeighborsClassifier(n_neighbors=3)\n    \n    # Training\n    knn_model.fit(X_train, y_train)\n    \n    # Prediction\/Validation\n    y_predict = knn_model.predict(X_val)\n    \n    # Generate and save Confusion Matrix\n    cm_list.append(confusion_matrix(y_val, y_predict))\n    \n    # Genearte Accuracy Score\n    accuracy = accuracy_score(y_val, y_predict)\n    accuracy = accuracy * 100\n    print(\"Accuracy for Fold-{} was {}%\".format(fold_count, accuracy))\n    \n    fold_count = fold_count + 1\n    print(\"____________________________________________________________\")","95ffafcc":"i = 1\nfor cm in cm_list:\n    plt.figure(figsize=(5, 4))\n    plt.title(\"Fold-{}\".format(i))\n    sn.heatmap(cm, annot=True, cmap=\"Greens\")\n    i = i + 1\n\nplt.show()","4895e9a4":"# Fold 2 is the best scenario","81b01fbe":"### Display Confusion Matrix for Validation\/Testing per Fold","825da23b":"Pairplot Visualization","e79e6518":"Display data and labels (first 5)","0e7e36df":"### Preprocessing","fd7d77b8":"Define data and label","ea69c38e":"Transform Data to Array and Label encoding","7a8ac3b6":"### Visualization","f34a7655":"### Training and Validation","0b64a5bd":"## Iris Classification using KNN and K-Fold\nIris classification using K-Nearest Neighbor and K-Fold Cross Validation","fc379701":"Display number of instances (rows) that belong for each labels","e54d8534":"### Load Dataset","b3c92b0d":"### Dataset Preview"}}