{"cell_type":{"2d810d5e":"code","ae8a1f82":"code","b37b99bc":"code","ba2aa8e1":"code","c6f07aec":"code","599407db":"code","31e64e04":"code","c13612e9":"code","1e10efc9":"code","8b746305":"code","849ab34e":"code","3b89c6ad":"code","3be89c0c":"code","858e7470":"code","3f12bf35":"code","5a67d685":"markdown","af728661":"markdown","16352184":"markdown","c45a7ecc":"markdown","61ec4371":"markdown","18547598":"markdown","fe757e38":"markdown"},"source":{"2d810d5e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport statsmodels as sm\nimport math as mt\nimport sklearn as skl\nimport sklearn.preprocessing as preprocessing\nimport sklearn.linear_model as linear_model\nimport sklearn.cross_validation as cross_validation\nimport sklearn.metrics as metrics\nimport sklearn.tree as tree\nimport seaborn as sns\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ae8a1f82":"df=pd.read_csv(\"..\/input\/bitcoin.csv\")","b37b99bc":"df.info","ba2aa8e1":"df.corr()","c6f07aec":"df.shape","599407db":"df[\"GAP\"]=df.Open-df.Close","31e64e04":"df2=df[df.GAP>0]","c13612e9":"df2.shape","1e10efc9":"df3=(df2[df2.Timestamp>=1514764800])\ndf3.shape","8b746305":"fig = plt.figure(figsize=(20,15))\ncols = 5\nrows = mt.ceil(float(df3.shape[1]) \/ cols)\nfor i, column in enumerate(df3.columns):\n    ax = fig.add_subplot(rows, cols, i + 1)\n    ax.set_title(column)\n    if df3.dtypes[column] == np.object:\n        df3[column].value_counts().plot(kind=\"bar\", axes=ax)\n    else:\n        df3[column].hist(axes=ax)\n        plt.xticks(rotation=\"vertical\")\nplt.subplots_adjust(hspace=0.7, wspace=0.2)","849ab34e":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndf3.Open.plot(kind = 'line', color = 'R',label = 'Open',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndf3.Close.plot(color = 'B',label = 'Close',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper left')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('After_201801')            # title = title of plot\nplt.show()\n# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndf.Open.plot(kind = 'line', color = 'g',label = 'Open',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndf.Close.plot(color = 'r',label = 'Close',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper left')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('All Data')            # title = title of plot\nplt.show()\n\n","3b89c6ad":"# Scatter Plot \n# x = attack, y = defense\ndf3.plot(kind='scatter', x='GAP', y='Open',alpha = 0.5,color = 'red')\nplt.xlabel('GAP')              # label = name of label\nplt.ylabel('Open')\nplt.title('Open-GAP')            # title = title of plot\nplt.show()\n\n\n# Scatter Plot \n# x = attack, y = defense\ndf3.plot(kind='scatter', x='GAP', y='Close',alpha = 0.5,color = 'B')\nplt.xlabel('GAP')              # label = name of label\nplt.ylabel('Close')\nplt.title('Close-GAP')            # title = title of plot\nplt.show()\n","3be89c0c":"# Scatter Plot \n# x = attack, y = defense\ndf3.plot(kind='scatter', x='Timestamp', y='High',alpha = 0.5,color = 'Blue')\nplt.xlabel('High')              # label = name of label\nplt.ylabel('Timestamp')\nplt.title('High-Timestamp')            # title = title of plot\nplt.show()\n\n\n# Scatter Plot \n# x = attack, y = defense\ndf3.plot(kind='scatter', x='Volume_(Currency)', y='Close',alpha = 0.5,color = 'red')\nplt.xlabel('Volume_(Currency)')              # label = name of label\nplt.ylabel('Close')\nplt.title('Close-Volume_(Currency)')            # title = title of plot\nplt.show()\n\n\n","858e7470":"#correlation map\nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(df3.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()\n\n","3f12bf35":"df3.Close.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()\n","5a67d685":"All Data ","af728661":"We first cycle through the data coming from the columns of our data set and look at the different data.","16352184":"After observing that our data set is too much data, we are reducing our data set considering that we will evaluate the data after 01\/01\/2018.","c45a7ecc":"Hello,\nI went to be a data scientist, and 2 studies I have done by doing several kynalktan researches are as follows. The data on the Kaggle side is taken from a developed kernel first. Thanks to my friend who works, eternally. ( https:\/\/www.kaggle.com\/mczielinski\/bitcoin-historical-data). The data explanations are as follows. \n\nCSV files for select bitcoin exchanges for the time period of Jan 2012 to July 2018, with minute to minute updates of OHLC (Open, High, Low, Close), Volume in BTC and indicated currency, and weighted bitcoin price. Timestamps are in Unix time. Timestamps without any trades or activity have their data fields forward filled from the last valid time period. If a timestamp is missing, or if there are jumps, this may be because the exchange (or its API) was down, the exchange (or its API) did not exist, or some other unforseen technical error in data reporting or gathering. All effort has been made to deduplicate entries and verify the contents are correct and complete to the best of my ability, but obviously trust at your own risk. ","61ec4371":"Then we load our data set\n","18547598":"After the data, we add a column where we calculate the opening and closing price differences in our data set, and we use the data to prepare the data set preparation","fe757e38":"We then check our data set (record, info, column based)\n"}}