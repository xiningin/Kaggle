{"cell_type":{"33fc0b61":"code","15201065":"code","76dd5ff0":"code","9eccd183":"code","dfc40171":"code","8ace238f":"code","cdb82243":"code","8aa39eae":"code","308a1aa2":"code","0ccaff30":"code","e679865d":"code","151bbad6":"code","21ef1040":"code","1dcf158c":"code","fd7d0a1e":"code","ed89fb61":"code","1221c886":"code","8dcd2872":"code","e548ad2b":"code","e2692bdd":"code","9f7a920b":"code","1c8b4a41":"code","404fa2eb":"code","5388c2e1":"code","342b98e6":"code","0463ad87":"code","8ec6a121":"code","590e9580":"code","4cf8e090":"code","4c88b392":"code","f3825e21":"code","5b3da83d":"code","1c936332":"code","df51be6f":"code","224e28ad":"code","c6f8fc65":"code","aab55aea":"code","98400b59":"code","0e07af98":"code","2397c427":"code","d6ff4554":"code","14b46df0":"code","86a23300":"markdown","b4dacdd5":"markdown","6b51d1f7":"markdown","c07c1c15":"markdown","8d39947b":"markdown"},"source":{"33fc0b61":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","15201065":"import pandas as pd\nimport re\nimport numpy as np\nimport os","76dd5ff0":"df = pd.read_csv('\/kaggle\/input\/blinddreamers\/dreamdatabase - Copy (2).csv')","9eccd183":"df.head()","dfc40171":"df = df[['Dream','Sentiment']]","8ace238f":"df.columns = ['text', 'labels']","cdb82243":"def clean(df):\n\n    df['text'].str.encode('utf-8', 'ignore').str.decode('utf-8')\n    df['totalwords'] = df['text'].str.split().str.len()\n    df = df[~(df['totalwords'] <= 4)]\n    df = df[~(df['totalwords'] >= 500)]\n    \n    \n    return df","8aa39eae":"df = clean(df)","308a1aa2":"possible_labels = df.labels.unique()\n\nlabel_dict = {}\nfor index, possible_label in enumerate(possible_labels):\n    label_dict[possible_label] = index\nlabel_dict","0ccaff30":"df['label'] = df.labels.replace(label_dict)\ndf=df.sample(frac=1)","e679865d":"df = df[['label','text']]","151bbad6":"df.dropna(inplace=True)","21ef1040":"df.drop_duplicates(inplace=True)","1dcf158c":"def clean_text(df, col):\n    from string import punctuation\n    df = df.copy()\n    \n    df[col] = df[col].apply(lambda x: re.sub('[^A-Za-z]+', ' ', x.lower()))\\\n                     .apply(lambda x: re.sub('\\s+', ' ', x).strip())\n    \n    return df","fd7d0a1e":"df = clean_text(df, 'text')","ed89fb61":"df = df.sample(frac=1)","1221c886":"df_train_ = df[:60]\ndf_test_ = df[60:]","8dcd2872":"train_arr=df_train_['text'].tolist()\ntest_arr=df_test_['text'].tolist()\ntrain_lbl = df_train_['label'].tolist()\ntest_lbl = df_test_['label'].tolist()","e548ad2b":"from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer","e2692bdd":"vectorizer = CountVectorizer()\nvectorizer.fit(train_arr)\ntrain_mat = vectorizer.transform(train_arr)\nprint (train_mat.shape)\ntest_mat = vectorizer.transform(test_arr)\nprint (test_mat.shape)","9f7a920b":"tfidf = TfidfTransformer()\ntfidf.fit(train_mat)\ntrain_tfmat = tfidf.transform(train_mat)\nprint (train_tfmat.shape)\ntest_tfmat = tfidf.transform(test_mat)\nprint (test_tfmat.shape)","1c8b4a41":"from sklearn.naive_bayes import BernoulliNB, GaussianNB, MultinomialNB\nfrom pprint import pprint\nimport matplotlib.pyplot as plt\nimport itertools\nfrom sklearn.metrics import confusion_matrix,accuracy_score\nimport numpy as np","404fa2eb":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Reds):\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90)\n    plt.yticks(tick_marks, classes)\n\n    print(cm)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","5388c2e1":"from sklearn.metrics import classification_report","342b98e6":"bnb= BernoulliNB()\n#fitting\nbnb.fit(train_tfmat, train_lbl)\n#ypred\nypredBnb = bnb.predict(test_tfmat)\nprint ('Bernoulli accuracy score')\nprint (accuracy_score(test_lbl, ypredBnb))","0463ad87":"print(classification_report(test_lbl, ypredBnb))","8ec6a121":"plt.figure(figsize=(8,8))\nplot_confusion_matrix(confusion_matrix(test_lbl, ypredBnb), classes=label_dict,\n                      title='Bernoulli Confusion matrix')\n\nplt.show()","590e9580":"mnb=MultinomialNB()\n#fitting\nmnb.fit(train_tfmat, train_lbl)\nypredMnb = mnb.predict(test_tfmat)\nprint ('Multinomial accuracy score')\nprint (accuracy_score(test_lbl, ypredMnb))","4cf8e090":"print(classification_report(test_lbl, ypredMnb))","4c88b392":"plt.figure(figsize=(8,8))\nplot_confusion_matrix(confusion_matrix(test_lbl, ypredMnb), classes=label_dict,\n                      title='Multinomial Confusion matrix')\n\nplt.show()","f3825e21":"from sklearn.svm import LinearSVC, NuSVC, SVC","5b3da83d":"lsvm= LinearSVC()\n\n#fitting\nlsvm.fit(train_tfmat, train_lbl)\n\n#ypred\nypredLsvm = lsvm.predict(test_tfmat)\nprint ('Linear Svm accuracy score')\nprint (accuracy_score(test_lbl, ypredLsvm))","1c936332":"print(classification_report(test_lbl, ypredLsvm))","df51be6f":"plt.figure(figsize=(8,8))\nplot_confusion_matrix(confusion_matrix(test_lbl, ypredLsvm), classes=label_dict,\n                      title='linear svm Confusion matrix')\n\nplt.show()","224e28ad":"from sklearn.neighbors import KNeighborsClassifier","c6f8fc65":"knn_uni = KNeighborsClassifier(n_neighbors=5, weights = 'uniform')\n#fitting\nknn_uni.fit(train_tfmat, train_lbl)\n#ypred\nypred_knn_uni = knn_uni.predict(test_tfmat)\nprint ('Distant accuracy score')\nprint (accuracy_score(test_lbl, ypred_knn_uni))","aab55aea":"print(classification_report(test_lbl, ypred_knn_uni))","98400b59":"knn_dist = KNeighborsClassifier(n_neighbors=5, weights = 'distance')\n#fitting\nknn_dist.fit(train_tfmat, train_lbl)\n#ypred\nypred_knn_dist = knn_dist.predict(test_tfmat)\nprint ('Distant accuracy score')\nprint (accuracy_score(test_lbl, ypred_knn_dist))","0e07af98":"plt.figure(figsize=(8,8))\nplot_confusion_matrix(confusion_matrix(test_lbl, ypred_knn_uni), classes=label_dict,\n                      title=' uniform KNN Confusion matrix')\n\nplt.show()","2397c427":"knn_dist = KNeighborsClassifier(n_neighbors=5, weights = 'distance')\n#fitting\nknn_dist.fit(train_tfmat, train_lbl)\n#ypred\nypred_knn_dist = knn_dist.predict(test_tfmat)\nprint ('Distant accuracy score')\nprint (accuracy_score(test_lbl, ypred_knn_dist))","d6ff4554":"print(classification_report(test_lbl, ypred_knn_dist))","14b46df0":"plt.figure(figsize=(8,8))\nplot_confusion_matrix(confusion_matrix(test_lbl, ypred_knn_dist), classes=label_dict,\n                      title=' distant KNN Confusion matrix')\n\nplt.show()","86a23300":"Bernoulli Naive Bayes","b4dacdd5":"K-neighbors with distant neighbors","6b51d1f7":"K-nearest neighbors WITH UNIFORM WEIGHT","c07c1c15":"Multinomial Naive Bayes","8d39947b":"Linear Support Vector Classification"}}