{"cell_type":{"d8d4e409":"code","521f06dc":"code","5eadcccb":"code","4133715d":"code","0df4c1d4":"code","475cf6c5":"code","15445612":"code","9d0253f2":"code","2c9c3977":"code","8561c523":"code","7e3936a1":"code","8bea9c73":"code","fda9cb31":"markdown","4293f647":"markdown","27771228":"markdown","09e11cbe":"markdown","746ced8b":"markdown","ff5c7ef7":"markdown","d876b670":"markdown","d7166a4d":"markdown","90cad2ca":"markdown","99b214ea":"markdown"},"source":{"d8d4e409":"import pandas as pd\nimport numpy as np\nimport datatable as dt\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.preprocessing import LabelEncoder, RobustScaler\nfrom sklearn.metrics import accuracy_score\n\nfrom catboost import CatBoostClassifier\nimport tensorflow as tf # Just to see if gpu is connected\n\nfrom tqdm import tqdm","521f06dc":"def reduce_memory_usage(df, verbose=True):\n    \"\"\"Function to reduce memory of pandas dataframe\"\"\"\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df","5eadcccb":"train_df = dt.fread(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")\ntest_df = dt.fread(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\")\ntest_df = reduce_memory_usage(test_df.to_pandas())\ntrain_df = reduce_memory_usage(train_df.to_pandas())\n\n# Remove sample with cover_type = 5\ntrain_df.drop(train_df[train_df[\"Cover_Type\"] == 5].index,\n              axis=0,\n              inplace=True)\ntrain_df.drop('Id', axis=1, inplace=True)\ntest_df.drop('Id', axis=1, inplace=True)\n\nencoder = LabelEncoder()\ntrain_df[\"Cover_Type\"] = encoder.fit_transform(train_df[\"Cover_Type\"])","4133715d":"cols_to_drop = [\"Soil_Type7\", \"Soil_Type15\"]\ntrain_df.drop(cols_to_drop, axis=1, inplace=True)\ntest_df.drop(cols_to_drop, axis=1, inplace=True)","0df4c1d4":"train_df[\"Aspect\"][train_df[\"Aspect\"] < 0] += 360\ntrain_df[\"Aspect\"][train_df[\"Aspect\"] > 359] -= 360\n\ntest_df[\"Aspect\"][test_df[\"Aspect\"] < 0] += 360\ntest_df[\"Aspect\"][test_df[\"Aspect\"] > 359] -= 360","475cf6c5":"train_df[\"dist2hydro\"] = (train_df[\"Horizontal_Distance_To_Hydrology\"]**0.5 + \\\n                          train_df[\"Vertical_Distance_To_Hydrology\"]**0.5)\ntest_df[\"dist2hydro\"] = (test_df[\"Horizontal_Distance_To_Hydrology\"]**0.5 + \\\n                          test_df[\"Vertical_Distance_To_Hydrology\"]**0.5)","15445612":"soil_feats = [i for i in train_df.columns if \"soil\" in i.lower()]\ntrain_df[\"soil_type_cnt\"] = train_df[soil_feats].sum(axis=1)\ntest_df[\"soil_type_cnt\"] = test_df[soil_feats].sum(axis=1)\n\nwild_feats = [i for i in train_df.columns if \"wilderness\" in i.lower()]\ntrain_df[\"wild_feats_cnt\"] = train_df[wild_feats].sum(axis=1)\ntest_df[\"wild_feats_cnt\"] = test_df[wild_feats].sum(axis=1)","9d0253f2":"train_df.loc[train_df[\"Hillshade_9am\"] < 0, \"Hillshade_9am\"] = 0\ntest_df.loc[test_df[\"Hillshade_9am\"] < 0, \"Hillshade_9am\"] = 0\n\ntrain_df.loc[train_df[\"Hillshade_Noon\"] < 0, \"Hillshade_Noon\"] = 0\ntest_df.loc[test_df[\"Hillshade_Noon\"] < 0, \"Hillshade_Noon\"] = 0\n\ntrain_df.loc[train_df[\"Hillshade_3pm\"] < 0, \"Hillshade_3pm\"] = 0\ntest_df.loc[test_df[\"Hillshade_3pm\"] < 0, \"Hillshade_3pm\"] = 0\n\ntrain_df.loc[train_df[\"Hillshade_9am\"] > 255, \"Hillshade_9am\"] = 255\ntest_df.loc[test_df[\"Hillshade_9am\"] > 255, \"Hillshade_9am\"] = 255\n\ntrain_df.loc[train_df[\"Hillshade_Noon\"] > 255, \"Hillshade_Noon\"] = 255\ntest_df.loc[test_df[\"Hillshade_Noon\"] > 255, \"Hillshade_Noon\"] = 255\n\ntrain_df.loc[train_df[\"Hillshade_3pm\"] > 255, \"Hillshade_3pm\"] = 255\ntest_df.loc[test_df[\"Hillshade_3pm\"] > 255, \"Hillshade_3pm\"] = 255","2c9c3977":"cols_to_scale = test_df.loc[:,[(test_df[col] > 1).any() for col in test_df.columns]].columns\n\nscaler = RobustScaler()\ntrain_df[cols_to_scale] = scaler.fit_transform(train_df[cols_to_scale])\ntest_df[cols_to_scale] = scaler.fit_transform(test_df[cols_to_scale])","8561c523":"FOLDS = 5 # Takes around 2.5 min per fold with 1000 iterations\niterations = 10000\ntest_preds = np.zeros((1,1))\nscores = []\n\ncv = StratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=0)\n\ny = train_df.pop(\"Cover_Type\").values\nX = train_df.values\n\nfor fold, (train_idx, test_idx) in enumerate(tqdm(cv.split(X,y)), start=1):\n    X_train, X_val = X[train_idx], X[test_idx]\n    y_train, y_val = y[train_idx], y[test_idx]\n\n    model = CatBoostClassifier(iterations=iterations,\n                          task_type=\"GPU\",\n                          devices=\"0:1\")\n    model.fit(\n        X_train,\n        y_train,\n        verbose=False\n    )\n\n    y_pred = np.argmax(model.predict_proba(X_val), axis=1)\n\n    score = accuracy_score(y_val, y_pred)\n    print(f\"Fold {fold} Validation Accuracy: {score}\")\n    scores.append(score)\n\n    test_preds = test_preds + model.predict_proba(test_df)\n    del model, score, y_pred # Try to save some memory\n    \nprint(f\"\\n\\nMean accuracy over all folds: {np.mean(scores)}\")","7e3936a1":"subm_df = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\")\npreds = np.argmax(test_preds, axis=1)\nsubm_df.Cover_Type = encoder.inverse_transform(preds)\nsubm_df.to_csv(\"Submission CB.csv\", index=False)","8bea9c73":"print(set(subm_df.Cover_Type))","fda9cb31":"* Read data using datatable and convert to pandas, is often faster than reading using pandas\n* Remove Cover_Type = 5, only 1 sample on entire training data\n* LabelEncode Cover_Type on training set, not necessary for catboost but good practice","4293f647":"# Split data and train model","27771228":"# New Features\n\"Borrowed\" from https:\/\/www.kaggle.com\/gulshanmishra\/tps-dec-21-tensorflow-nn-feature-engineering \n\nAspect is compass direction, should be between 0 and 360","09e11cbe":"Hillshade values should be between 0 and 255","746ced8b":"# Feature Engineering","ff5c7ef7":"Creating distance features from horizontal and vertical distance","d876b670":"### Scaling data\nGreat article on interesting ways to select pandas columns: https:\/\/towardsdatascience.com\/interesting-ways-to-select-pandas-dataframe-columns-b29b82bbfb33","d7166a4d":"Drop Id, Soil_Type7 and Soil_Type15 from train and test dataset. Soil_Type7 and Soil_Type15 have same value in all rows","90cad2ca":"# Application of CatBoostClassifier on TPS December 2021\n### Please let me know of any improvements, I'm here to learn\n\nUsed https:\/\/www.kaggle.com\/chryzal\/features-engineering-for-you for the feature engineering, give him a thumbs up!","99b214ea":"Create sum of all soil types and sum of wilderness types"}}