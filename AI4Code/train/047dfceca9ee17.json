{"cell_type":{"04040a9d":"code","ee6d8a44":"code","85284a0b":"code","4fc74084":"code","5d876489":"code","68ee7db8":"code","c1b2288e":"code","820527ad":"code","3f697440":"code","6196508b":"code","cc89db68":"code","5541107f":"code","73323fed":"code","782fb30b":"code","f4f55cb8":"code","a4cb1fb0":"code","c9622674":"code","ad0b5263":"code","c8842403":"code","637686d5":"code","89a2fc4e":"code","3d08afec":"code","c6f6a2fa":"code","1073e498":"code","004431df":"code","bcf4c163":"code","f53bdd83":"markdown","cfd59237":"markdown","7baa8952":"markdown"},"source":{"04040a9d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n#pip install pmdarima\nfrom pmdarima import auto_arima\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib import dates\nimport statsmodels.api as sm\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom statsmodels.tsa.stattools import grangercausalitytests\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\nfrom statsmodels.tools.eval_measures import mse, rmse, meanabs\nfrom  sklearn.metrics import  mean_absolute_error,mean_squared_error\nfrom statsmodels.tsa.ar_model import  AutoReg , ar_select_order\nfrom statsmodels.tsa.stattools import adfuller\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ee6d8a44":"btc=pd.read_csv('\/kaggle\/input\/bitcoins\/BTC-USD.csv')\nbtc['Date'] = btc['Date'].astype('datetime64[ns]')\nbtc.set_index('Date', inplace=True)\nbtc['Adj_Close'] =btc['Adj Close']\nbtc.head()","85284a0b":"btc.drop(btc.columns.difference(['Adj_Close']),1,inplace=True)\nbtc.plot(figsize=(12,6))\nbtc.rolling(window=60).mean()['Adj_Close'].plot()","4fc74084":"btc=btc.asfreq('D')\ntrain_btc=btc.iloc[:1799]\ntest_btc=btc.iloc[1799:]\nfit_model=ExponentialSmoothing(train_btc['Adj_Close'],trend='mul',seasonal='mul',seasonal_periods=450).fit()\nprediction=fit_model.forecast(30)\ntrain_btc['Adj_Close'].plot(figsize=(12,6))\ntest_btc['Adj_Close'].plot()\nprediction.plot()","5d876489":"fit_model=ExponentialSmoothing(btc['Adj_Close'],trend='mul',seasonal='mul',seasonal_periods=450).fit()\nprediction=fit_model.forecast(50)\ntrain_btc['Adj_Close'].plot(figsize=(12,6))\ntest_btc['Adj_Close'].plot()\nprediction.plot()","68ee7db8":"#pd.plotting.register_matplotlib_converters()\n#btc=btc.asfreq('D')\n#model= AutoReg(btc['Adj_Close'],300)\n#model_fit=model.fit()\n#train_btc=btc.iloc[:1799]\n#test_btc=btc.iloc[1799:]\n#train_model=AutoReg(train_btc['Adj_Close'],320).fit(cov_type='HC0')\n#start= len(train_btc)\n#end=len(train_btc) + len(test_btc) - 1 \n#prediction = train_model.predict(start=start , end=end, dynamic=True)\n#fig,ax=plt.subplots()\n#ax = test_btc.plot(ax=ax)\n#ax = prediction.plot(ax=ax)","c1b2288e":"#forecast = train_model.predict(start=end , end=end+60, dynamic=True)\n#btc.isnull().values.any()\n#ax= forecast.plot(ax=ax)\n\n#mask= (btc.index > '2018-01-01')   &  (btc.index < '2020-11-01)\n#df2=btc.loc[mask]","820527ad":"def adf_test(timeseries):\n    print ('Dickey-Fuller Test')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    print (dfoutput)\n    adf_test(btc)","3f697440":"from statsmodels.tsa.ar_model import AutoReg, ar_select_order\n\ndf1 = pd.read_csv('\/kaggle\/input\/bitcoins\/BTC-USD.csv', index_col='Date', parse_dates=True)\ndf1.drop(df1.columns.difference(['Open']),1,inplace=True)\ndf1 = df1.asfreq('d') # Change frequency to day\ndf1 = df1.fillna(method='ffill')\ndf1.index # Check frequency\ndf1.isnull().values.any() # Check for NaNs\n\n# Set style for seaborn plot\nsns.set_style('darkgrid')\n# Add automatic datetime converters\npd.plotting.register_matplotlib_converters()\n# Default figure size\nsns.mpl.rc('figure',figsize=(12, 6))\n\n# Plot daily max temps\nfig, ax = plt.subplots()\nax = df1.plot(ax=ax)\n\n# Create our model using whole data set\nmodel = AutoReg(df1['Open'], 300)\nmodel_fit = model.fit()\n\n# Define training and testing area\nlen(df1) # 345 observations\ntrain_df = df1.iloc[:1799] # 80%\ntest_df = df1.iloc[1799:] # Last 20%\n\n# Define training model for 100 days and White's covariance\n# estimator\ntrain_model = AutoReg(df1['Open'], 320).fit(cov_type=\"HC0\")\n\n# Define start and end for prediction \nstart = len(train_df)\nend = len(train_df) + len(test_df) - 1\n\nprediction = train_model.predict(start=start, end=end, dynamic=True)\n\n# Plot testing data with prediction\nax = test_df.plot(ax=ax) # Orange\nax = prediction.plot(ax=ax) # Green\n\n# Predict 60 days into the future\nforecast = train_model.predict(start=end, end=end+60, dynamic=True)\nax = forecast.plot(ax=ax) # Red","6196508b":"#finding best model\nbtc.drop(btc.columns.difference(['Adj_Close']),1,inplace=True)\nbtc=btc.asfreq('MS')\nstep_fit=auto_arima(btc['Adj_Close'],start_p=0,start_q=0,max_p=5,max_q=3,seasonal=True,trace=True,m=12)\nstep_fit.summary()","cc89db68":"##from statsmodels.tsa.arima_model import ARIMA , ARMA ,ARIMAResults, ARMAResults\n#from statsmodels.graphics.tsaplots import  plot_acf , plot_pacf\n#pip install pmdarima\n#ARIMAX(0, 1, 0)\n#btc.drop(btc.columns.difference(['Adj_Close']),1,inplace=True)\n#btc=btc.asfreq('MS')\n#train_btc=btc.iloc[:59]\n#test_btc=btc.iloc[59:]\n#mod=ARIMA(train_df,order=(0, 1, 0))\n#res=mod.fit()\n#r#es.summary()\n#start = len(train_df)\n#end = len(train_df) + len(test_df) - 1\n#prediction=res.predict(end,end+60)\n#btc.plot(figsize=(8,8),legend=True)\n#prediction.plot(legend=True)#","5541107f":"diff_df=btc.diff().dropna()\ndiff_df.plot()","73323fed":"from statsmodels.tsa.seasonal import seasonal_decompose\nres=seasonal_decompose(diff_df,model='add')\nres.plot()","782fb30b":"from statsmodels.tsa.statespace.sarimax import SARIMAX\ndf1 = pd.read_csv('\/kaggle\/input\/bitcoins\/BTC-USD.csv', index_col='Date', parse_dates=True)\ndf1.drop(df1.columns.difference(['Open']),1,inplace=True)\ndf1 = df1.asfreq('MS') # Change frequency to day\ndf1 = df1.fillna(method='ffill')\ndf1.index # Check frequency\ndf1.isnull().values.any() # Check for NaNs\ntrain_df = df1.iloc[:59] #1799 FOR DAYS\ntest_df = df1.iloc[59:] \nmodel=SARIMAX(train_df,order=(0, 1, 0))\nres=model.fit()\nstart = len(train_df)\nend = len(train_df) + len(test_df) - 1\nprediction=res.predict(start,end,typ='linear')\ntest_df.plot(legend=True,figsize=(16,8))\nprediction.plot(legend=True)","f4f55cb8":"model=SARIMAX(df1,order=(0, 1, 0))\nres=model.fit()\nfuture=res.predict(len(df1),len(df1)+12)\ntest_df.plot(legend=True,figsize=(16,8))\nfuture.plot(legend=True)","a4cb1fb0":"\n# Monthly global CO2 data since 1960\nbtc = btc[btc.index>'2018-01-01']\nbtc = btc.asfreq('MS') # Change frequency to month\nbtc = btc.fillna(method='ffill')\nbtc.plot(figsize=(16,8))\n\n# We verify that there is a seasonal component\nres = seasonal_decompose(btc, model='add')\nres.plot()","c9622674":"auto_arima(btc, seasonal=True, m=12, trace=True).summary()","ad0b5263":"len(btc) # 34\n\ntrain_df = btc.iloc[:27] # 80%\ntest_df = btc.iloc[27:] # 20%\n\n# Parameters include the dataset, the 1st order for ARIMA, ARIMA(0,1,0)(0,0,0)[24]\n# the seasonal order\nmodel = SARIMAX(train_df, order=(1, 0, 0),\n               seasonal_order=(0, 0, 0, 12))\nres = model.fit()\n# Get prediction for test set\nstart = len(train_df)\nend = len(train_df) + len(test_df) - 1\n# type typ : levels - Predict original endogenous variables\n# linear : Linear prediction\nprediction = res.predict(start, end, \n                         typ='linear').rename('Prediction')\ntest_df.plot(legend=True, figsize=(16,8))\nprediction.plot(legend=True)","c8842403":"model = SARIMAX(btc, order=(1, 0, 0),\n               seasonal_order=(0, 0, 0, 12))\nres = model.fit()\nfuture = res.predict(len(btc), len(btc)+12, \n                    typ='levels').rename('Future')\ntest_df.plot(legend=True, figsize=(16,8))\nfuture.plot(legend=True)","637686d5":"#color_arr = ['g', 'r', 'm', 'b', 'y', 'k']\n#c_indx = 0\n#for x in oil_df[oil_df['holiday']==1].index:\n  #  ax.axvline(x=x, color=color_arr[c_indx], linewidth=0.5);\n  #  if color_arr[c_indx] == 'k':\n  #      c_indx = 0\n   # else:\n   #     c_indx += 1","89a2fc4e":"btc = btc[btc.index>'2017-01-01']\nbtc = btc.asfreq('D') # Change frequency to month\nbtc = btc.fillna(method='ffill')\nbtc.plot(figsize=(16,8))\n\n# We verify that there is a seasonal component\nres = seasonal_decompose(btc, model='add')\nres.plot()","3d08afec":"auto_arima(btc, seasonal=True, m=180, trace=True).summary()","c6f6a2fa":"len(btc) # 1005\n\ntrain_df = btc.iloc[:800] # 80%\ntest_df = btc.iloc[800:] # 20%\n\n# Parameters include the dataset, the 1st order for ARIMA, ARIMA(0,1,0)(0,0,0)[24]\n# the seasonal order\nmodel = SARIMAX(train_df, order=(0, 1, 0),\n               seasonal_order=(0, 0, 0, 180))\nres = model.fit()\n# Get prediction for test set\nstart = len(train_df)\nend = len(train_df) + len(test_df) - 1\n# type typ : levels - Predict original endogenous variables\n# linear : Linear prediction\nprediction = res.predict(start, end, \n                         typ='linear').rename('Prediction')\ntest_df.plot(legend=True, figsize=(16,8))\nprediction.plot(legend=True)","1073e498":"model = SARIMAX(btc, order=(1, 0, 0),\n               seasonal_order=(0, 0, 0, 180))\nres = model.fit()\nfuture = res.predict(len(btc), len(btc)+180, \n                    typ='levels').rename('Future')\ntest_df.plot(legend=True, figsize=(16,8))\nfuture.plot(legend=True)","004431df":"btc=btc.asfreq('MS')\nbtc = btc[btc.index>'2017-01-01']\nlen(btc) # 46\ntrain_df = btc.iloc[:36] # 80%\ntest_df = btc.iloc[36:] # 20%\nfit_model=ExponentialSmoothing(train_df['Adj_Close'],trend='mul',seasonal='mul',seasonal_periods=3).fit()\nprediction=fit_model.forecast(24)\ntrain_btc['Adj_Close'].plot(figsize=(12,6))\ntest_btc['Adj_Close'].plot()\nprediction.plot()","bcf4c163":"fit_model=ExponentialSmoothing(btc['Adj_Close'],trend='mul',seasonal='mul',seasonal_periods=9).fit()\nprediction=fit_model.forecast(12)\ntrain_df['Adj_Close'].plot(figsize=(12,6))\ntest_df['Adj_Close'].plot()\nprediction.plot()","f53bdd83":"FUTURE","cfd59237":"future","7baa8952":"VERSION 2"}}