{"cell_type":{"079a8db1":"code","e09c0ce6":"code","047c3084":"code","c452af9f":"code","a758335b":"code","452a7967":"code","e942d226":"code","ea579bcb":"code","fe07c9b9":"code","a1ce533b":"code","b4aa7bae":"code","f81790c0":"code","2891e017":"code","b2f40aa1":"code","eb93b673":"code","1e61536f":"code","c84d1552":"code","9f0c154f":"code","9b543665":"code","28837834":"code","df093d4f":"code","c73e25fc":"code","8b0b15c7":"code","4bec67d1":"code","c90a4277":"code","7d1de361":"code","746cb0a5":"markdown","5e4c1319":"markdown"},"source":{"079a8db1":"#Title: Mrs Mr \/Married, Unmarried\/\n#Siblings\n#Parch: Ger buliin heden gishuun ywj bsn be \n# Gantsaaraa ywj bsn eseh \n#Ticket Ymar torliin tasalbar heden udaa dawtagdj bsn be freq\n# Cabin dugaar ymr negen cabinii dugaargui zorchigch bsn eseh \n#Age, Fare: Nas bolon tasalbariin uneer ni buleg bolgood Age group, Fare group gesen huwisagch uusgh ","e09c0ce6":"import os \nimport warnings\nwarnings.simplefilter(action=\"ignore\")\n\n#data analysis bolon data wrangling\/bolowsruulalt\/\nimport pandas as pd\nimport numpy as np\nimport random \n\n#Data visualization\nimport seaborn as sns \nimport matplotlib.pyplot as plt \n\n#Machine learning\nfrom sklearn import preprocessing\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import StratifiedKFold \nfrom sklearn.model_selection import train_test_split\n\n#seed everything\nseed=42\nrandom.seed(seed)\nos.environ[\"PHYTHONASHEED\"]= str(seed)\nnp.random.seed(seed)","047c3084":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntrain.head()","c452af9f":"test=pd.read_csv('..\/input\/titanic\/test.csv')\ntest.head()","a758335b":"#\u0428\u0438\u043d\u044d \u0445\u0443\u0432\u044c\u0441\u0430\u0433\u0447 \u04af\u04af\u0441\u0433\u044d\u0445 \u0444\u0443\u043d\u043a\u0446\ndef generate_features(train, test):\n\n    #Train \u0431\u043e\u043b\u043e\u043d Test data-\u0433 \u043d\u0438\u0439\u043b\u04af\u04af\u043b\u044d\u0445\n    data=pd.concat([train, test], sort=False)\n\n    #Title: \u0413\u044d\u0440\u043b\u044d\u0441\u044d\u043d \u044d\u0441\u044d\u0445 \n    data['Title'] = data[\"Name\"].str.split(\", \", expand = True)[1].str.split(\".\", expand = True)[0]\n    title_names = data['Title'].value_counts()< 10\n    data['Title'] = data['Title'].apply(lambda x: 'Other' if title_names.loc[x] == True else x)\n    data\n\n    #Married \n    data['Is_Married']=0\n    data['Is_Married'].loc[data['Title']=='Mrs']=1\n\n    #family size \n    data['FamilySize']=data['Parch']+1\n    data\n\n    #single\n    data['Is_Alone']=1\n    data['Is_Alone'].loc[data['FamilySize']>1]=0\n\n    #Cabin\n    data['Cabin'] = data['Cabin'].str.slice(stop=1).fillna('cabin_na')\n\n    #Ticket \n    data['Ticket_frequency'] = data.groupby('Ticket')['Ticket'].transform('count')\n\n    #Age, fair~ binnig grouplene\n    data['Fare_Grouped'] =pd.qcut(data['Fare'],13)\n    data['Age_Grouped'] = pd.qcut(data['Age'],10)\n\n    #Torliig oorchloh~Change data type\n    data['Fare_Grouped'] =pd.qcut(data['Fare'],13)\n    data['Age_Grouped'] = pd.qcut(data['Age'],10)\n    data['Age_Grouped'] = pd.qcut(data['Age'],10).astype('object')\n    data['Fare_Grouped'] =pd.qcut(data['Fare'],13).astype('object')\n\n    #Drop some features zarim neg huwisagch ustgah \n    features_to_drop = ['Name']\n    data.drop(features_to_drop, axis=1, inplace= True)\n\n    train = data[:len(train)]\n    test = data[-len(test):]\n\n    return train, test ","452a7967":"def preprocess_data(train, test):\n    \n    #train \u0431\u043e\u043b\u043e\u043d test data-\u0433 \u043d\u0438\u0439\u043b\u04af\u04af\u043b\u043d\u044d.\n    data= pd.concat([train, test], sort=False)\n    \n    #missing value~ \u043e\u0440\u0445\u0438\u0433\u0434\u0441\u043e\u043d \u0443\u0442\u0433\u0430 \n    data['Age']= data['Age'].fillna(data['Age'].median())\n    data['Fare']= data['Fare'].fillna(data['Fare'].median())\n    \n    #data types~ turul oorchloh \n    data['Pclass'] = data['Pclass'].astype('object')\n    \n    #one hot enconding\n    ohe_list = ['Pclass', 'Cabin', 'Embarked', 'Title']\n    ohe_features = pd.get_dummies(data[ohe_list], drop_first = True)\n    data = pd.concat([data, ohe_features], axis=1)\n    \n    #label enconding \n    for f in data.columns:\n        if data[f].dtype=='object':\n            lbl = preprocessing.LabelEncoder()\n            data[f]=lbl.fit_transform(list(data[f].astype(str)))\n    \n    train = data[:len(train)]\n    test = data[-len(test):]\n    \n    return train, test","e942d226":"train, test = generate_features(train, test)","ea579bcb":"def plot_swarm_survivors(datasets, feature1, feature2, title, fsize=(155)):\n    fig, ax = plt.subplots(figsize = (18,5))\n    ax.grid(True)\n    plt.xticks(list(range(0, 100, 2)))\n    sns.swarmplot(y=feature1, x=feature2, hue='Survived', data=train).set_title(title)","fe07c9b9":"# sex, age\nplot_swarm_survivors(train, 'Sex', 'Age', 'Survivors Swarmplot Age vs Gender')","a1ce533b":"#\nplot_swarm_survivors(train, 'Title', 'Age', 'Survivors Swarmplot Age vs Title')","b4aa7bae":"#Age distributtion\ng = sns.FacetGrid(train, col='Survived', height = 6, aspect = 2)\ng = g.map(sns.distplot, 'Age', bins = 20)\n#x ni nas ali nasniihan iluu ih survived hiij bn ","f81790c0":"#Fare distributtion\ng = sns.FacetGrid(train, col='Survived', height = 6, aspect = 2)\ng = g.map(sns.distplot, 'Fare', bins = 20)","2891e017":"#Cabin vs Survival \nsns.barplot(x='Cabin', y='Survived', data=train)\nplt.show","b2f40aa1":"#Family size \nsns.barplot(x='FamilySize', y='Survived', data=train)\nplt.show","eb93b673":"train, test = preprocess_data(train, test)","1e61536f":"#Correlation headmap \ndef correlation_heatmap(df):\n    _, ax = plt.subplots(figsize = (14, 12))\n    colormap = sns.diverging_palette(220, 10, as_cmap = True)\n    \n    _ = sns.heatmap(\n        df.corr(),\n        cmap = colormap, \n        square = True,\n        cbar_kws = {'shrink':.9},\n        ax = ax,\n        annot = True,\n        linewidths = 0.1, vmax = 1.0, linecolor = 'red',\n        annot_kws = {'fontsize':12}\n    )\n    plt.title('Pearson Correlation of Features', y = 1.05, size = 15)\n    \ncorrelation_heatmap(train.iloc[:,1:15])","c84d1552":"y = train['Survived']\nx = train.drop(['PassengerId', 'Survived'], axis = 1)\nx_test = test.drop(['PassengerId', 'Survived'], axis = 1)","9f0c154f":"x_test","9b543665":"params={\n    \"n_estimators\":500,\n    \"max_leaf_nodes\":120,\n    \"random_state\":seed\n}","28837834":"#Stratified K-Fold\nnum_folds = 5\nskf = StratifiedKFold(n_splits=num_folds, shuffle=True, random_state=1)\n\n#initialize variables \ny_preds = np.zeros((len(x_test), 2))\nval_scores = []\n                   \nfor fold_n, (train_index, valid_index), in enumerate(skf.split(x, y)):\n    \n    #get cross validation split\n    x_train = x.iloc[train_index]\n    x_valid = x.iloc[valid_index]\n    \n    y_train = y[train_index]\n    y_valid = y[valid_index]\n    \n    #Train Random Forest model \n    clf = RandomForestClassifier(**params)\n    clf = clf.fit(x_train, y_train)\n    \n    #Validation Predict\n    y_pred_valid = clf.predict(x_valid)\n    \n    #Importance score \n    importances = pd.DataFrame({\"feature\": x_train.columns, \"importance\": clf.feature_importances_})\n    \n    #Evalution the validation score \n    score = accuracy_score(y_valid, y_pred_valid)\n    val_scores.append(score)\n    print(f\"Fold {fold_n}. Accuracy Score: {score:.5f}\\n\")\n    \n    #Prediction on the Kaggle test Data \n    y_preds += clf.predict_proba(x_test) \/ num_folds\n    \nprint(\"Overall Accuracy Score: {:.3f}\".format(np.mean(val_scores) + np.std(val_scores)))","df093d4f":"importances.sort_values(\"importance\", ascending = False)","c73e25fc":"sns.barplot(data=importances.sort_values(\"importance\", ascending = False). head(10), x=\"importance\", y=\"feature\")","8b0b15c7":"y_preds = np.argmax(y_preds, axis=1)\ny_preds","4bec67d1":"submission = pd.DataFrame(\n    {\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": y_preds.astype(int)\n    }\n)","c90a4277":"submission ","7d1de361":"submission.to_csv(\"submission.csv\", index=False)","746cb0a5":"     ** 6. Feature engineering, data preprocessing **","5e4c1319":"K Fold training & Prediction"}}