{"cell_type":{"81c508db":"code","3e8affdc":"code","3d36b4fb":"code","4b6935d2":"code","38f9247c":"code","d3fa3de7":"code","19814575":"code","9907b624":"code","9769ad32":"code","8fcf7d86":"code","849d7cc4":"code","ebfd66df":"code","b18cb9cd":"code","9d37c77a":"code","28f25280":"code","0e6731ab":"code","be45dc16":"code","55132bfa":"code","a8daab0f":"code","738f10b3":"code","d6a468ea":"markdown"},"source":{"81c508db":"!ls ..\/input","3e8affdc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display # use to print dataframe with beautiful style(in table form)\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\ndefault_path = '..\/input\/'","3d36b4fb":"train_df = pd.read_json(default_path+'train.json')\ntest_df = pd.read_json(default_path+'test.json')","4b6935d2":"# seeeeeeee\nprint(train_df.info())\nprint('if any missing value:', train_df.isnull().any().any())\nprint('-'*10)\n\nprint(test_df.info())\nprint('if any missing value:', test_df.isnull().any().any())","38f9247c":"# find that `id` doesn't continuous\n# ex: id = 5 disappear\n# but `id` will not influence model predict..\ntrain_df.sort_values(by=['id']).head(10)","d3fa3de7":"ingredients_set = set()\nfor _, ingredients_list in train_df['ingredients'].iteritems():\n    #print(_, ingredients_list)\n    for i in ingredients_list:\n        ingredients_set.add(i)\nprint('number of different ingredients:', len(ingredients_set))","19814575":"# see ingredients count\ningredients_count = dict()\nfor _, ingredients_list in train_df['ingredients'].iteritems():\n    for i in ingredients_list:\n        ingredients_count[i] = ingredients_count.get(i, 0) + 1\n# change dict to dataframe\ningredients_count_df = pd.DataFrame.from_dict(data=ingredients_count, orient='index')\ningredients_count_df = ingredients_count_df.reset_index()\ningredients_count_df.rename(columns={'index': 'ingredients', 0: 'count'}, inplace=True)\n# sort\ningredients_count_df.sort_values(by='count', ascending=False, inplace=True)\ningredients_count_df.head(10)","9907b624":"g = sns.factorplot(x='count', y='ingredients', data=ingredients_count_df.head(50), \n                   kind='bar', palette='hls')\ng.fig.set_size_inches(18, 12)","9769ad32":"train_ingredients_lists = [' '.join(i) for i in train_df['ingredients']]\ntest_ingredients_list = [' '.join(i) for i in test_df['ingredients']]","8fcf7d86":"# Bags of words used CountVectorizer\n#vectorizer = CountVectorizer(max_features=1000)\n#train_ingredients_vector = vectorizer.fit_transform(train_ingredients_lists).toarray()\n#test_ingredients_vector = vectorizer.transform(test_ingredients_list).toarray()\n\n# Bags of words used TfidfTransformer\nvectorizer = TfidfVectorizer()\ntrain_ingredients_vector = vectorizer.fit_transform(train_ingredients_lists).toarray()\ntest_ingredients_vector = vectorizer.transform(test_ingredients_list).toarray()","849d7cc4":"print(train_ingredients_vector.shape, test_ingredients_vector.shape)","ebfd66df":"train_ingredients_df = pd.DataFrame(train_ingredients_vector, columns=vectorizer.get_feature_names())\ntest_ingredients_df = pd.DataFrame(test_ingredients_vector, columns=vectorizer.get_feature_names())\ndisplay('train_ingredients_df:',train_ingredients_df.head(),\n        'test_ingredients_df:',test_ingredients_df.head())","b18cb9cd":"train_df_new = pd.concat([train_df, train_ingredients_df], axis=1)\ntrain_df_new = train_df_new.drop(['ingredients'], axis=1)\n\ntest_df_new = pd.concat([test_df, test_ingredients_df], axis=1)\ntest_df_new = test_df_new.drop(['ingredients'], axis=1)\n\ndisplay('train_df_new:', train_df_new.head(),\n        'test_df_new:', test_df_new.head())","9d37c77a":"X = train_df_new.drop(['id', 'cuisine'], axis=1)\nLB = LabelEncoder()\ny = LB.fit_transform(train_df['cuisine'])","28f25280":"# notice that can not use train_df_new['cuisine'] as parameter y of train_test_split()\n# because in TfidfVectorizer() transform, there have ingredient which name include 'cuisine' \nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1)\nX_test = test_df_new.drop(['id', 'cuisine'], axis=1)\nprint(X_train.shape, y_train.shape)\nprint(X_test.shape)","0e6731ab":"#clf = RandomForestClassifier(n_estimators=100, oob_score=True, n_jobs=4)\n#clf.fit(X_train, y_train)\n#clf.oob_score_\n#clf.score(X_val, y_val)","be45dc16":"#lgbm = LGBMClassifier(n_estimators=500).fit(X_train, y_train)\n#lgbm.score(X_val, y_val)","55132bfa":"from sklearn.linear_model import LogisticRegression\nclf1 = LogisticRegression(C=15).fit(X_train, y_train)\nclf1.score(X_val, y_val)","a8daab0f":"# different with SVC, it run more fasterrrrrrrrrrrrrrrrrr\nfrom sklearn.svm import LinearSVC\nclf3 = LinearSVC(C=0.75).fit(X_train, y_train)\nclf3.score(X_val, y_val)","738f10b3":"prediction = clf3.predict(X_test)\nprediction = LB.inverse_transform(prediction)\nsubmission = pd.DataFrame({'id':test_df['id'], 'cuisine':prediction})\nsubmission = submission[['id', 'cuisine']]\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","d6a468ea":" I will use three different ways to this competition.\n- CountVectorizer + simple randomforst(without  parameter tuning): get result of LB- 0.75965\n- TfidfVectorizer + simple randomforst:  get result of LB-0.74135...QQ\n- TfidfVectorizer + LightBGM: get result of LB-0.77624\n\nreference: https:\/\/www.kaggle.com\/gcmartinelli\/sklearn-randomforestclassifier-1st-submission"}}