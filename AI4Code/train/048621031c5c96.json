{"cell_type":{"3b4657d7":"code","ea16fc46":"code","439bd844":"code","a99b084f":"code","bb3a6d66":"code","63a75bb0":"code","519fe0cc":"code","f29606b1":"code","214aa4e0":"code","72d4b356":"code","a969c72f":"code","8aa62f03":"code","042d0243":"code","35612fa4":"code","40bcb309":"code","98fb5f38":"code","407ff25c":"code","dc24a0b4":"code","1f494281":"code","0cabd265":"code","e1c165fd":"code","9d933fe9":"code","fb6dbe62":"code","ab0ae23e":"code","46b5a309":"code","fd74af3d":"code","137c1ab5":"code","ad65ef94":"code","a6dd30c8":"code","be1632c1":"code","f4905dac":"code","42598fb8":"code","274cdcd0":"code","039a5623":"code","4fc98405":"code","c4fec692":"code","a06e4d75":"code","df136371":"markdown","31b7fc7c":"markdown","95fce257":"markdown","806efcfa":"markdown","25d9b682":"markdown","426ae0fd":"markdown","1d0b15ab":"markdown","2925de9c":"markdown","12dd01c9":"markdown","fd11be24":"markdown"},"source":{"3b4657d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea16fc46":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score as f1\nfrom sklearn.metrics import confusion_matrix","439bd844":"df = pd.read_csv(\"\/kaggle\/input\/credit-card-customers\/BankChurners.csv\")\ndf.head()","a99b084f":"df.info()","bb3a6d66":"# drop column 22 and 23\ndf.drop(df.columns[[-1,-2]], axis=1, inplace=True)","63a75bb0":"df.info()","519fe0cc":"# frequency of each value of target variable\nprint(df['Attrition_Flag'].value_counts(normalize=True))","f29606b1":"# Plot the frequency of each value of target variable\nsns.countplot(x='Attrition_Flag', data=df)","214aa4e0":"# Distribution of Customer_Age\nsns.displot(x='Customer_Age', data=df, kde=True)","72d4b356":"# Frequency of each value of Gender variable\ndf['Gender'].value_counts(normalize=True)","a969c72f":"# Plot the frequency of each value Gender variable\nsns.countplot(x='Gender', data=df)","8aa62f03":"# Frequency of each value of Card_Category variable\ndf['Card_Category'].value_counts(normalize=True)","042d0243":"# Plot the frequency of each value Card_Category\nsns.countplot(x='Card_Category', data=df)","35612fa4":"# Frequency of each value of Education_Level variable\ndf['Education_Level'].value_counts(normalize=True)","40bcb309":"# Plot the frequency of each value of Education_Level\nplt.figure(figsize=(9,6))\nsns.countplot(x='Education_Level', data=df)","98fb5f38":"# Frequency of each value of Dependent_count variable\ndf['Dependent_count'].value_counts(normalize=True)","407ff25c":"# Plot the frequency of each value of Dependent_count\nsns.countplot(x='Dependent_count', data=df)","dc24a0b4":"# Frequency of each value of Marital_Status variable\ndf['Marital_Status'].value_counts(normalize=True)","1f494281":"# Plot the frequency of each value of Marital_Status\nsns.countplot(x='Marital_Status', data=df)","0cabd265":"# Frequency of each value of Income_Category variable\ndf['Income_Category'].value_counts(normalize=True)","e1c165fd":"# Plot the frequency of each value of Income_Category\nplt.figure(figsize=(9,6))\nsns.countplot(x='Income_Category', data=df)","9d933fe9":"# Frequency of each value of Months_on_book variable\ndf['Months_on_book'].value_counts(normalize=True)","fb6dbe62":"# Convert the target variable into numerical variable\ndf.Attrition_Flag = df.Attrition_Flag.replace({'Attrited Customer':1,'Existing Customer':0})","ab0ae23e":"# convert gender of the observations into numerical values\ndf.Gender = df.Gender.replace({\n    'F': 1,\n    'M': 0\n})","46b5a309":"# Convert the Education_Level into dummy variables\ndf = pd.concat([df, pd.get_dummies(df['Education_Level']).drop(columns=['Unknown'])], axis=1)\ndf = pd.concat([df, pd.get_dummies(df['Income_Category']).drop(columns=['Unknown'])], axis=1)\ndf = pd.concat([df,pd.get_dummies(df['Marital_Status']).drop(columns=['Unknown'])],axis=1)\ndf = pd.concat([df,pd.get_dummies(df['Card_Category']).drop(columns=['Platinum'])],axis=1)","fd74af3d":"df.head()","137c1ab5":"# Drop these columns as they have been converted to dummy variables\ndf.drop(columns = ['Education_Level','Income_Category','Marital_Status','Card_Category','CLIENTNUM'],inplace=True)","ad65ef94":"df.info()","a6dd30c8":"# Correlation matrix\ndf.corr()","be1632c1":"# Principal Component Analysis\nN_COMPONENTS = 4\npca_model = PCA(n_components = N_COMPONENTS )\npc_matrix = pca_model.fit_transform(df)","f4905dac":"# Concatanate the PCA features into the dataframe\ndf_with_pcs = pd.concat([df,pd.DataFrame(pc_matrix,columns=['PC-{}'.format(i) for i in range(0,N_COMPONENTS)])],axis=1)","42598fb8":"# Seperate X and Y\nX_features = ['Total_Trans_Ct','PC-3','PC-1','PC-0','PC-2','Total_Ct_Chng_Q4_Q1','Total_Relationship_Count']\nX = df_with_pcs[X_features]\ny = df_with_pcs['Attrition_Flag']","274cdcd0":"# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","039a5623":"# Fitting Random Forest Classification to the Training set\nclassifier = RandomForestClassifier(n_estimators=10, criterion='gini', random_state = 0)\nclassifier.fit(X_train, y_train)","4fc98405":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)","c4fec692":"# Making the Confusion Matrix\ncm = confusion_matrix(y_test, y_pred)\ncm","a06e4d75":"# Findind out F1 Score\nnp.round(f1(y_pred,y_test),2)","df136371":"## Feature Engineering","31b7fc7c":"## Libraries Used","95fce257":"## Modelling","806efcfa":"## Exploratory Data Analysis","25d9b682":"## Train-Test Slipt","426ae0fd":"## Prediction","1d0b15ab":"## Data Cleaning and Feature Engineering","2925de9c":"----\nThere are total of 10127 observations and 23 columns. Initial feedback: column 22 and 23 won't be useful\n\n---","12dd01c9":"## Evaluation","fd11be24":"## Import the Dataset"}}