{"cell_type":{"90567f90":"code","daa0cf03":"code","e6ff9c01":"code","ea5b44ff":"code","4c118577":"code","78ae52d4":"code","aa759bec":"code","bd08f0fd":"code","326fe24b":"code","cd045d3b":"code","f3578188":"code","29fb3085":"markdown","98db1be1":"markdown","d67e858f":"markdown","c989cb96":"markdown"},"source":{"90567f90":"import os\nimport numpy as np\nimport pandas as pd\nimport cv2","daa0cf03":"df = pd.DataFrame()\nlabels = []\n\ntest = pd.DataFrame()\ntest_label = []\n\ntrain_file = \"..\/input\/asl-alphabet\/asl_alphabet_train\/asl_alphabet_train\/\"\nfor character_file in os.listdir(\"..\/input\/asl-alphabet\/asl_alphabet_train\/asl_alphabet_train\"):\n    file = train_file + character_file\n    \n    if character_file not in [\"del\",\"nothing\",\"space\"]:\n        count = 0\n        for img_name in os.listdir(file):\n            if count <= 1000:\n                img = cv2.imread(file+\"\/\"+img_name)\n                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n                img_array = gray.reshape(gray.shape[0]*gray.shape[1], 1)\n\n                df[img_name.split(\".\")[0]] = img_array[:,0]\n\n                labels.append(character_file)\n\n            elif count>1000 and count<=1050:\n                img = cv2.imread(file+\"\/\"+img_name)\n                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n                img_array = gray.reshape(gray.shape[0]*gray.shape[1], 1)\n                test[img_name.split(\".\")[0]] = img_array[:,0]\n\n                test_label.append(character_file[0])\n\n            else:\n                break\n            count += 1\n        \n        count=0\n    else:\n        continue\n\ndf = df.T\ntest = test.T","e6ff9c01":"df.head()","ea5b44ff":"print(\"len df : \",len(df))\nprint(\"len labels :\", len(labels))","4c118577":"test.head()","78ae52d4":"print(\"len test : \",len(test))\nprint(\"len test_label :\", len(test_label))","aa759bec":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.utils import shuffle","bd08f0fd":"df = shuffle(df, random_state=42)\nlabels = shuffle(labels, random_state=42)\n\ntest = shuffle(test, random_state=42)\ntest_label = shuffle(test_label, random_state=42)","326fe24b":"rf = RandomForestClassifier(n_estimators=100, random_state=42, n_jobs=-1, max_features=500, max_depth=30)\n\nrf.fit(df, labels)\nrf_predict = rf.predict(test)\n\nprint(classification_report(test_label, rf_predict))","cd045d3b":"score = round(accuracy_score(test_label, rf_predict), 5)\nprint(\"Accurracy: \",score)","f3578188":"import pickle\nwith open(\"RandomForest_model.pickle\", \"wb\") as file:\n    pickle.dump(rf,file)\nfile.close()","29fb3085":"In this notebook I want to predict hand sign on image","98db1be1":"* I use Random Forest Classification but first \u0131 shuffle the data\n* The data is in order and \u0131 just want to shuffle the data","d67e858f":"shuffle method is shuffle the data with same random_state so we dont lose labels index ","c989cb96":"I take the 1000 train picture and 50 test picture"}}