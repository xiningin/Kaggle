{"cell_type":{"43ec95db":"code","3ad09042":"code","f64c5e0d":"code","c158c36d":"code","99b8ecb9":"code","1531da8c":"code","c222a765":"code","513bb164":"code","b0ff0c79":"code","22f7b621":"code","50521760":"code","f8715c39":"code","9f48b911":"code","0b45625e":"code","9ba3144a":"code","280fd469":"code","a4c657d1":"code","6005afc4":"code","3d6af19b":"code","6ce43dc5":"code","ff9ec2f1":"code","69a5ac5a":"markdown","3bc8ebf4":"markdown","9a259d8b":"markdown","f0114201":"markdown","8c48c4ea":"markdown","4cb9ad0b":"markdown","ffbd4802":"markdown","b7fb2a76":"markdown"},"source":{"43ec95db":"# Bibliotecas necess\u00e1rias\n# Manipula\u00e7\u00e3o de dados\nimport pandas as pd\n# Redes Neurais\nfrom tensorflow import keras\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\nfrom tensorflow.keras.optimizers import RMSprop\n# Plot\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Avalia\u00e7\u00e3o\nfrom sklearn.metrics import classification_report, confusion_matrix\n","3ad09042":"# Lendo o dataset Kaggle\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\n\n#Alternativa ler do pr\u00f3prio keras\n#(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","f64c5e0d":"# Analisando o dataset\nprint(\"Quantidade de elementos de treino: {}\". format(len(train)))\nprint(train.head())","c158c36d":"# Separando x_train e y_train\nY = train[\"label\"]\nX = train.drop(labels = [\"label\"],axis = 1)\n#print(X.head())\n# Em formato numpy array de imagens 28 x 28\nx = X.values.reshape(-1,28,28,1)\n#print(x[0])","99b8ecb9":"# Numtendi nada!\n# Bora ver com matplotlib\nplt.imshow(X.values[0].reshape(28,28), cmap=plt.cm.binary)\nplt.show()\nprint('Label: {}'.format(Y[0]))","1531da8c":"# Transformando a imagem 2d em um numpy array (imagem 28*28)\nx = X.values.reshape(42000, 28, 28, 1)\n\n#Normalizando para valores entre 0 e 1\nx = x.astype('float32')\nx \/= 255\n\n#print(x[0])","c222a765":"# Vamos ajustar o formato da saida\nnum_classes = 10\n\n# Convertendo para um vetor de saida com 10 dimensoes\n# ex. 8 => [0,0,0,0,0,0,0,0,1,0]\ny = keras.utils.to_categorical(Y, num_classes)\nprint(y[0])","513bb164":"# Separando uma parte para treino (90%) e outra para valida\u00e7\u00e3o (10%)\nfrom sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(x, y, test_size = 0.1, random_state=9)\nprint('Qtde de treino: {}'.format(len(x_train)))\nprint('Qtde de valida\u00e7\u00e3o: {}'.format(len(x_val)))","b0ff0c79":"# Criando o modelo Sequential\n# Sequential: Modelo Keras de ir adicionando camadas (como um lego)\n# Conv2D: Camada com kernels (filtros) que percorrem a imagem extraindo caracter\u00edsitcas (mapas de caracte\u00edsticas)\n# MaxPooling2D: Camada que reduz a dimensionalidade dos mapas de caracter\u00edsticas 2D\n# Flatten: Camada que transforma um mapa de caracter\u00edsticas 2D num vetor para classficador final\n# Dense: Camada onde todas as entradas est\u00e3o conectadas em cada neur\u00f4nio (totalmente conectada)\n# Dropout: Camada usa durante treino que descarta aleatoriamente um percentual de conex\u00f5es (reduz overfitting)\n\n\"\"\"model = Sequential()\nmodel.add(Conv2D(20, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=(28,28,1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(40, kernel_size=(3,3), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.summary()\"\"\"","22f7b621":"#Perseu\n'''model = Sequential()\nmodel.add(Conv2D(100, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=(28,28,1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(100, kernel_size=(3,3), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dropout(0.2))\n#model.add(Conv2D(50, kernel_size=(3,3), activation='relu'))\n\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dropout(0.2))\n#model.add(Conv2D(50, kernel_size=(3,3), activation='relu'))\n\nmodel.add(Dense(50, activation='relu'))\n# model.add(Dropout(0.2))\n\nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.summary()'''","50521760":"# Compila o modelo\n\"\"\"model.compile(loss='categorical_crossentropy',\n              optimizer=RMSprop(),\n              metrics=['accuracy'])\"\"\"","f8715c39":"model = keras.Sequential([\n    keras.layers.Conv2D(32, (3,3), activation='relu',\n                input_shape=(28, 28, 1), padding='same'),\n    keras.layers.MaxPooling2D((2, 2),padding='same'),\n    keras.layers.Dropout(0.3),\n    \n    \n    keras.layers.Conv2D(64, (3,3), activation='relu',\n                input_shape=(28, 28, 1), padding='same'),\n    keras.layers.MaxPooling2D((2, 2),padding='same'),\n    keras.layers.Dropout(0.3),\n    \n    keras.layers.Conv2D(128, (3,3), activation='relu', padding='same'),\n    keras.layers.MaxPooling2D((2, 2),padding='same'),\n    keras.layers.Dropout(0.3),\n    \n    keras.layers.Conv2D(256, (3,3), activation='relu', padding='same'),\n    keras.layers.MaxPooling2D((2, 2),padding='same'),\n    keras.layers.Dropout(0.3),\n    \n    keras.layers.Conv2D(512, (3,3), activation='relu', padding='same'),\n    keras.layers.MaxPooling2D((2, 2),padding='same'),\n    keras.layers.Dropout(0.3), \n        \n    keras.layers.Conv2D(512, (3,3), activation='relu', padding='same'),\n    keras.layers.MaxPooling2D((2, 2),padding='same'),\n    keras.layers.Dropout(0.3),\n    \n    keras.layers.Flatten(),\n    keras.layers.Dense(1024, activation='relu'),\n    keras.layers.Dropout(0.5),\n\n    keras.layers.Dense(512, activation='relu'),\n    keras.layers.Dropout(0.5),\n    \n    keras.layers.Dense(num_classes, activation='softmax')     \n])\n\n'''model.compile(loss = 'categorical_crossentropy', optimizer='adam', \n              metrics=['accuracy'])'''","9f48b911":"# Compila o modelo\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=RMSprop(),\n              metrics=['accuracy'])","0b45625e":"# Treina com os parte dos dados\nbatch_size = 32\nepochs = 20\n\n#Salvar o melhor modelo\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='model.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    keras.callbacks.EarlyStopping(monitor='val_loss', patience=10,verbose=1)\n]\n\n\n\nhistory = model.fit(x_train, y_train,\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    callbacks = callbacks_list,\n                    verbose=1,\n                    validation_data=(x_val, y_val))","9ba3144a":"#Vamos ver como foi o treino?\n\nfig, ax = plt.subplots(1,2, figsize=(16,8))\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","280fd469":"from tensorflow.keras.models import load_model\n# Load the best saved model\nmodel = load_model('model.h5')","a4c657d1":"# Testa\nscore = model.evaluate(x_val, y_val, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","6005afc4":"# Testando uma entrada qualquer\nprint(y_train[10])\nprint(model.predict(x_train[10].reshape((1,28,28,1))))\nprint(model.predict_classes(x_train[10].reshape((1,28,28,1))))","3d6af19b":"# Vendo alguns reports\n# Usando sklearn\n\n# Classificando toda base de teste\ny_pred = model.predict_classes(x_val)\n# voltando pro formato de classes\nimport numpy as np\ny_test_c = np.argmax(y_val, axis=1)\n\nprint('Confusion Matrix')\nprint(confusion_matrix(y_test_c, y_pred))\nprint('Classification Report')\ntarget_names = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nprint(classification_report(y_test_c, y_pred, target_names=target_names))","6ce43dc5":"# Gerando sa\u00edda para dataset de teste\n\n#Carrega dataset de teste\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nprint(\"Qtde de testes: {}\".format(len(test)))\n# Bota no formato numpy e normaliza\nx_test = test.values.reshape(len(test),28,28,1)\nx_test = x_test.astype('float32')\nx_test \/= 255\n\n# Faz classifica\u00e7\u00e3o para dataset de teste\ny_pred = model.predict_classes(x_test)\n\n# Verficando algum exemplo\ni = 0\nplt.imshow(test.values[i].reshape(28,28), cmap=plt.cm.binary)\nplt.show()\nprint('Previsto: {}'.format(y_pred[i]))\n\n# Botando no formato de sa\u00edda (competi\u00e7\u00e3o Kaggle)\nresults = pd.Series(y_pred,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,len(y_pred)+1),name = \"ImageId\"),results],axis = 1)\nprint(submission.head(10))\n#Salvando Arquivo\nsubmission.to_csv(\"mlp_mnist_v1.csv\",index=False)","ff9ec2f1":"#introduzindo ruido\nimport numpy as np\nmean = 0.\nstddev = 0.2\nnoise = np.random.normal(mean, stddev, (4200, 28, 28,1))\nx_te = x_val + noise\nx_te = np.clip(x_te, 0., 1.)\n\nplt.imshow(x_te.reshape(4200, 28,28)[0], cmap=plt.cm.binary)\nplt.show()\n\n# Testa\nscore = model.evaluate(x_te, y_val, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","69a5ac5a":"# Teste Adicional: Com ru\u00eddo","3bc8ebf4":"**Resumo:**\n\nO exemplo aqui desenvolvido tem como objetivo apresentar conceitos iniciais de implementa\u00e7\u00e3o de redes neurais com python e tensorflow\/keras. Esse modelo apresenta um modelo de Rede Neural Convolucional (CNN) b\u00e1sico que pode ser expandido mudando o n\u00famero de neur\u00f4nios e camadas. Em adapta\u00e7\u00f5es mais avan\u00e7adas, pode-se estudar possibilidade de otimiza\u00e7\u00e3o de hyperpar\u00e2metros e outras t\u00e9cnincas como aumento de dados.\n\n**N\u00e3o \u00e9 objetivo nosso desenvolver e otimizar o modelo de classifica\u00e7\u00e3o**. O exemplo tem objetivo meramente did\u00e1tico.\n\n---\n\n**Para saber mais:**\n* [Palestras e cursos do Ocean](http:\/\/www.oceanbrasil.com\/)\n* Fran\u00e7ois Chollet. Deep Learning with Python. Manning Publications, 2017.\n* Ian Goodfellow and Yoshua Bengio and Aaron Courville. [Deep Learning](https:\/\/www.deeplearningbook.org\/). MIT Press, 2016.","9a259d8b":"# Bibliotecas e Dados","f0114201":"# Avaliando o Modelo","8c48c4ea":"# Gerando Sa\u00edda","4cb9ad0b":"Com ru\u00eddo, percebemos que a acur\u00e1cia dos exemplos de valida\u00e7\u00e3o caiu, mas muito menos que o modelo MLP cl\u00e1ssico (ver exemplo de MLP).\nUm modelo Convolucional (CNN) captura melhor regi\u00f5es, ou padr\u00f5es espaciais de pixels, tornando o modelo mais robusto.","ffbd4802":"# Criando e treinando o Modelo","b7fb2a76":"# Introdu\u00e7\u00e3o"}}