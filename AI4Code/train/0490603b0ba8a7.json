{"cell_type":{"b30d77d8":"code","ca87a759":"code","f1a39a61":"code","4536b727":"code","9b20b8dc":"code","457bdaa7":"code","6f7c4def":"code","8d58ba73":"code","f4c6655a":"code","e4137d1c":"code","30907fc4":"code","05ec6988":"code","6d007044":"markdown","51fe1227":"markdown","0bdeca80":"markdown","51c7e403":"markdown","d50c5c88":"markdown","bf80389a":"markdown","12f660dc":"markdown"},"source":{"b30d77d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nfrom tensorflow.python.client import device_lib\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split # sklearn, train_test_split\nimport matplotlib.pyplot as plt # matplotlib, plt\nfrom keras.utils.np_utils import to_categorical # categorical - one-hot-encoding\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# CNN libraries\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Any results you write to the current directory are saved as output.","ca87a759":"def get_available_gpus():\n    local_device_protos = device_lib.list_local_devices()\n    print(local_device_protos)\n    return [x.name for x in local_device_protos if x.device_type == 'GPU']\n\nget_available_gpus()","f1a39a61":"# import datasets \nprint(os.listdir(\"..\/input\"))\ndirectory_train = \"..\/input\/train.csv\"\ndirectory_test = \"..\/input\/test.csv\"","4536b727":"test_data = pd.read_csv(directory_test)\nprint(test_data.shape)\ntest_data.head(5)","9b20b8dc":"train_data = pd.read_csv(directory_train)\nprint(train_data.shape)\ntrain_data.head(5)","457bdaa7":"## Formatting the Labels\ndef format_label():\n    return [train_data[\"label\"], \n            train_data.drop(labels = [\"label\"],axis = 1)\n           ]\n\n# call format_label\ny_train, x_train = format_label()\nprint(x_train.head(5), y_train.head(5))","6f7c4def":"# Show some samples\n# x_train dataset \ndef show_figure():\n    for index in range(0, 9):\n        fig = x_train.iloc[index].as_matrix()\n        fig = fig.reshape((28,28))\n        plt.subplot(340 + (index + 1))\n        plt.imshow(fig)\n        plt.title(y_train[index])\n        \n# call show_figure      \nshow_figure()\n","8d58ba73":"def normalization():\n    return [\n            x_train \/ 255.0,\n            test_data \/ 255.0\n           ]\ndef reshape():\n    return [\n            x_train.values.reshape(-1,28, 28,1),\n            test_data.values.reshape(-1,28,28,1)\n           ]\ndef tensorflow_encoding():\n    return to_categorical(y_train, num_classes = 10)\n\n# call normalization\nx_train, test_data = normalization()\nprint('x_train:',x_train.shape)\nprint('test:',test_data.shape)\n\n# call reshape\nprint(\"------ Reshape ---------------\")\nx_train, test_data = reshape()\nprint('x_train:',x_train.shape)\nprint('test:',test_data.shape)\n\n# call tensorflow label encoding\ny_train = tensorflow_encoding()\nprint(y_train)","f4c6655a":"def separating_data():\n    return train_test_split(x_train, \n                            y_train, \n                            test_size = 0.1, \n                            random_state = 42\n                           )\n\nx_train, x_validation, y_train, y_validation = separating_data()","e4137d1c":"activations = ['relu', 'softmax'] \n#Change the number of epochs for other results\n# This may be interesting !\nmax_epochs = 2\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, \n                 kernel_size = (5,5),\n                 padding = 'Same', \n                 activation = activations[0], \n                 input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, \n                 kernel_size = (5,5),\n                 padding = 'Same', \n                 activation = activations[0]))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, \n                 kernel_size = (3,3),\n                 padding = 'Same', \n                 activation = activations[0]))\nmodel.add(Conv2D(filters = 64, \n                 kernel_size = (3,3),\n                 padding = 'Same', \n                 activation = activations[0]))\n\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = activations[0]))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = activations[1]))\n\nmodel.compile(loss='categorical_crossentropy', \n              optimizer='adam', \n              metrics=[\"accuracy\"])\n\ngenerator = ImageDataGenerator()\n\nbatches = generator.flow(x_train, \n                         y_train, \n                         batch_size=64)\nbatches_value = generator.flow(x_validation, \n                               y_validation, \n                               batch_size=64)\n\nhistory = model.fit_generator(generator=batches, \n                              steps_per_epoch=batches.n, \n                              epochs=max_epochs, \n                              validation_data=batches_value, \n                              validation_steps=batches_value.n)","30907fc4":"def show_loss():\n    plt.plot(history.history['loss'], \n             color='red', \n             label='Validation Loss')\n    plt.title(\"My Test Loss\")\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    plt.show()\n    \ndef show_acc_epochs():\n    plt.plot(history.history['acc'],\n             color='blue',\n             label='Acc')\n    plt.title(\"My Test Accuracy\")\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Accuracy Value\")\n    plt.legend()\n    plt.show()\n    \n# call plot loss\nshow_loss()\n# call plt acc_epochs\nshow_acc_epochs()","05ec6988":"# predict results and submit\nresults = model.predict(test_data)\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")\n\nsubmission = pd.concat([pd.Series(range(1,28001),\n                                  name = \"ImageId\"),\n                        results],axis = 1)\nsubmission.to_csv(\"submission.csv\",index=False)","6d007044":"## Separating the Data Set\nHere, we need to separate data from training and test sets:\n* For the tests, we use 10% of the data set;\n* For training, we use 90% of the data set;","51fe1227":"## Show some samples","0bdeca80":"You can find more examples in Machine Learning on my Github: \n* Github Profile: https:\/\/github.com\/vitorglemos\/\n* Github Machine Learning: https:\/\/github.com\/vitorglemos\/Machine-Learning-Algorithms","51c7e403":"## Modeling a tensorflow CNN\n![Tensorflow CNN](https:\/\/miro.medium.com\/max\/700\/1*uAeANQIOQPqWZnnuH-VEyw.jpeg)","d50c5c88":"## Loading the Training  Data Set","bf80389a":"## Loading the Testing Data Set","12f660dc":"## Formatting the Labels"}}