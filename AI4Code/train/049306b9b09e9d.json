{"cell_type":{"0b7b4826":"code","5e29763c":"code","8cd44c5e":"code","ed744c69":"code","dba71bea":"code","977be481":"code","446408bd":"code","faaf63af":"code","b142c064":"code","ffa56c80":"code","8b6e7581":"code","470fa05c":"code","1a6f434c":"code","09d9efb5":"code","cdada12f":"markdown","5a75d3dd":"markdown","3cac0302":"markdown","645c4cc1":"markdown","c01517d1":"markdown","70a864dd":"markdown","6439598e":"markdown"},"source":{"0b7b4826":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e29763c":"poke_df = pd.read_csv(\"\/kaggle\/input\/pokemon\/pokemon.csv\")\npoke_df.info()","8cd44c5e":"poke_df.describe()","ed744c69":"poke_df.head()","dba71bea":"start_poke = (\"Bulbasaur\",\"Charmander\",\"Squirtle\",\"Chikorita\",\"Cyndaquil\",\"Totodile\",\"Treecko\",\"Torchic\",\"Mudkip\",'Turtwig',\"Chimchar\",\"Piplup\")\nstarter = poke_df[poke_df['name'].isin(start_poke)]\nstarter.head(1)","977be481":"starter_1 = starter[starter.generation == 1][['name','against_bug','against_dark','against_dragon','against_electric','against_fairy','against_fight','against_fire','against_flying','against_ghost']]\nstarter_1\nstarter_2 = starter[starter.generation == 2][['name','against_bug','against_dark','against_dragon','against_electric','against_fairy','against_fight','against_fire','against_flying','against_ghost']]\nstarter_2\nstarter_3 = starter[starter.generation == 3][['name','against_bug','against_dark','against_dragon','against_electric','against_fairy','against_fight','against_fire','against_flying','against_ghost']]\nstarter_3\nstarter_4 = starter[starter.generation == 4][['name','against_bug','against_dark','against_dragon','against_electric','against_fairy','against_fight','against_fire','against_flying','against_ghost']]\nstarter_4","446408bd":"start_1 = starter_1.melt('name', var_name='Opp', value_name='vals')\nstart_1\nstart_2 = starter_2.melt('name', var_name='Opp', value_name='vals')\nstart_2\nstart_3 = starter_3.melt('name', var_name='Opp', value_name='vals')\nstart_3\nstart_4 = starter_4.melt('name', var_name='Opp', value_name='vals')\nstart_4","faaf63af":"sns.catplot(\n    data=start_1, kind=\"bar\",\n    x=\"Opp\", y=\"vals\", hue=\"name\",\n    ci=\"sd\", palette=\"dark\", alpha=.6, height=6, aspect=2\n)","b142c064":"sns.catplot(\n    data=start_2, kind=\"bar\",\n    x=\"Opp\", y=\"vals\", hue=\"name\",\n    ci=\"sd\", palette=\"dark\", alpha=.6, height=6, aspect=2\n)","ffa56c80":"sns.catplot(\n    data=start_3, kind=\"bar\",\n    x=\"Opp\", y=\"vals\", hue=\"name\",\n    ci=\"sd\", palette=\"dark\", alpha=.6, height=6, aspect=2\n)","8b6e7581":"sns.catplot(\n    data=start_4, kind=\"bar\",\n    x=\"Opp\", y=\"vals\", hue=\"name\",\n    ci=\"sd\", palette=\"dark\", alpha=.6, height=6, aspect=2\n)","470fa05c":"atts = starter[['name','attack','defense','hp','speed','sp_attack','sp_defense','generation']]\natts_1 = atts[atts.generation == 1][['name','attack','defense','hp','speed','sp_attack','sp_defense','generation']]\natts_1['attack_Mean'] = (atts_1.loc[:,'attack'].sum() \/3).astype(int)\natts_1['defense_Mean'] = (atts_1.loc[:,'defense'].sum() \/3).astype(int)\natts_1['hp_Mean'] = (atts_1.loc[:,'hp'].sum() \/3).astype(int)\natts_1['speed_Mean'] = (atts_1.loc[:,'speed'].sum() \/3).astype(int)\natts_1['sp_attack_Mean'] = (atts_1.loc[:,'sp_attack'].sum() \/3).astype(int)\natts_1['sp_defense_Mean'] = (atts_1.loc[:,'sp_defense'].sum() \/3).astype(int)\natts_1fil = atts_1[['generation','attack_Mean','defense_Mean','hp_Mean','speed_Mean','sp_attack_Mean','sp_defense_Mean']].head(1)\natts_1fil\n\natts_2 = atts[atts.generation == 2][['name','attack','defense','hp','speed','sp_attack','sp_defense','generation']]\natts_2['attack_Mean'] = (atts_2.loc[:,'attack'].sum() \/3).astype(int)\natts_2['defense_Mean'] = (atts_2.loc[:,'defense'].sum() \/3).astype(int)\natts_2['hp_Mean'] = (atts_2.loc[:,'hp'].sum() \/3).astype(int)\natts_2['speed_Mean'] = (atts_2.loc[:,'speed'].sum() \/3).astype(int)\natts_2['sp_attack_Mean'] = (atts_2.loc[:,'sp_attack'].sum() \/3).astype(int)\natts_2['sp_defense_Mean'] = (atts_2.loc[:,'sp_defense'].sum() \/3).astype(int)\natts_2fil = atts_2[['generation','attack_Mean','defense_Mean','hp_Mean','speed_Mean','sp_attack_Mean','sp_defense_Mean']].head(1)\natts_2fil\n\natts_3 = atts[atts.generation == 3][['name','attack','defense','hp','speed','sp_attack','sp_defense','generation']]\natts_3['attack_Mean'] = (atts_3.loc[:,'attack'].sum() \/3).astype(int)\natts_3['defense_Mean'] = (atts_3.loc[:,'defense'].sum() \/3).astype(int)\natts_3['hp_Mean'] = (atts_3.loc[:,'hp'].sum() \/3).astype(int)\natts_3['speed_Mean'] = (atts_3.loc[:,'speed'].sum() \/3).astype(int)\natts_3['sp_attack_Mean'] = (atts_3.loc[:,'sp_attack'].sum() \/3).astype(int)\natts_3['sp_defense_Mean'] = (atts_3.loc[:,'sp_defense'].sum() \/3).astype(int)\natts_3fil = atts_3[['generation','attack_Mean','defense_Mean','hp_Mean','speed_Mean','sp_attack_Mean','sp_defense_Mean']].head(1)\natts_3fil\n\natts_4 = atts[atts.generation == 4][['name','attack','defense','hp','speed','sp_attack','sp_defense','generation']]\natts_4['attack_Mean'] = (atts_4.loc[:,'attack'].sum() \/3).astype(int)\natts_4['defense_Mean'] = (atts_4.loc[:,'defense'].sum() \/3).astype(int)\natts_4['hp_Mean'] = (atts_4.loc[:,'hp'].sum() \/3).astype(int)\natts_4['speed_Mean'] = (atts_4.loc[:,'speed'].sum() \/3).astype(int)\natts_4['sp_attack_Mean'] = (atts_4.loc[:,'sp_attack'].sum() \/3).astype(int)\natts_4['sp_defense_Mean'] = (atts_4.loc[:,'sp_defense'].sum() \/3).astype(int)\natts_4fil = atts_4[['generation','attack_Mean','defense_Mean','hp_Mean','speed_Mean','sp_attack_Mean','sp_defense_Mean']].head(1)\natts_4fil\n \nframes = [atts_1fil,atts_2fil, atts_3fil, atts_4fil]\natts_result = pd.concat(frames)\natts_result","1a6f434c":"atts_final = atts_result.melt('generation', var_name='stats', value_name='val')\natts_final\n","09d9efb5":"fig = plt.figure(figsize=(15,5))\nsns.lineplot(x= atts_final['stats'] ,y = atts_final['val'],hue=atts_final['generation'], data = atts_final, palette=\"tab10\", linewidth=2.5 ) ","cdada12f":"## As you can see in the graph above each generation seems to have a unique value of each attribute except for Speed. The means for Speed seem to be the same besides the outlier Generation 4","5a75d3dd":"## I isolated how these pokemon do against other types","3cac0302":"## I pulled the starting pokemon for the first 4 generations for comparison","645c4cc1":"## I manipulated the data below to a setup for my graph","c01517d1":"## As the graphs displayed above show their is little differnce between the starting pokemon and their ability against other types of pokemon. The first generation does have a difference when facing Fairy and Fight type pokemon","70a864dd":"## Here I am isolating the character attributes for comparison","6439598e":"## Pokemon Data"}}