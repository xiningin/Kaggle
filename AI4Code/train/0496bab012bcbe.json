{"cell_type":{"cd6ef960":"code","0e337419":"code","b909b9bf":"code","2e749f32":"code","12caab14":"code","c2c7993a":"code","6a72f9cd":"code","b381b18d":"code","493ea88c":"code","dd8fef24":"code","8b695b9f":"code","22873867":"code","7a439285":"code","b6895515":"code","48d12439":"code","8c9bd69b":"code","256bdea0":"code","04d1534b":"code","3550ce17":"code","d88d66c8":"code","5265f687":"code","fb4e3534":"code","15b8ffb1":"code","7c1b70f9":"code","c91b61f7":"code","5363e44f":"code","4a1e5927":"code","5d2505a9":"code","0aebf8c2":"code","12720615":"code","60ddd047":"code","1d4ec6fb":"code","a59e51a6":"code","d12beef1":"code","6ed3903e":"code","77ae3901":"code","d9adedcd":"code","653e0644":"code","bcba9bd2":"code","49f12e87":"code","7d670c57":"code","23f9f15e":"code","01fcaddd":"code","f3e485f8":"code","87612a5f":"code","f244744b":"code","04bfbe5c":"code","ee4802d2":"code","82d2649c":"code","3fc34a60":"markdown"},"source":{"cd6ef960":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0e337419":"data = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/train.csv')\nstore= pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\ntest= pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/test.csv')\nsubmission=pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/sample_submission.csv')\nprint(data.shape)\nprint(store.shape)\nprint(test.shape)\nprint(submission.shape)","b909b9bf":"data.head()","2e749f32":"store.head()","12caab14":"test.head()","c2c7993a":"submission.head()","6a72f9cd":"data.shape","b381b18d":"data.dtypes","493ea88c":"data.describe()","dd8fef24":"data.describe()[['Sales','Customers']]","8b695b9f":"data.describe()[['Sales','Customers']].loc['mean']","22873867":"data.describe()[['Sales','Customers']].loc['min']","7a439285":"data.describe()[['Sales','Customers']].loc['max']","b6895515":"data.head()","48d12439":"data.Store.nunique()\ndata.Store.value_counts().head(50).plot.bar()\n","8c9bd69b":"data.Store.value_counts().tail(50).plot.bar()","256bdea0":"data.Store.value_counts()","04d1534b":"len(data.Store)","3550ce17":"data.DayOfWeek.value_counts()","d88d66c8":"data.Open.value_counts()","5265f687":"data.Promo.value_counts()","fb4e3534":"data.isna().sum()\n","15b8ffb1":"test.isna().sum()\n","7c1b70f9":"submission.isna().sum()","c91b61f7":"data['Date'] = pd.to_datetime(data['Date'], format = '%Y-%m-%d')\n\nstore_id = data.Store.unique()[0]\nprint(store_id)\nstore_rows = data[data['Store'] == store_id]\nprint(store_rows.shape)\nstore_rows.resample('1D', on='Date')['Sales'].sum().plot.line(figsize=(14,4))","5363e44f":"store_rows[store_rows['Sales']==0]","4a1e5927":"test['Date'] = pd.to_datetime(test['Date'], format = '%Y-%m-%d')\nstore_test_rows = test[test['Store'] == store_id]\nstore_test_rows['Date'].min(),store_test_rows['Date'].max()","5d2505a9":"store_test_rows['Open'].value_counts()","0aebf8c2":"store_rows['Sales'].plot.hist()","12720615":"store[store['Store']==store_id].T","60ddd047":"store[~store['Promo2SinceYear'].isna()].iloc[0]","1d4ec6fb":"#Method 1\nstore['Promo2SinceWeek']=store['Promo2SinceWeek'].fillna(0)\nstore['Promo2SinceYear']=store['Promo2SinceYear'].fillna(store['Promo2SinceYear'].mode().iloc[0])\nstore['PromoInterval']=store['PromoInterval'].fillna(store['PromoInterval'].mode().iloc[0])\nstore['CompetitionDistance']=store['CompetitionDistance'].fillna(0)\nstore['CompetitionOpenSinceMonth']=store['CompetitionOpenSinceMonth'].fillna(store['CompetitionOpenSinceMonth'].mode().iloc[0])\nstore['CompetitionOpenSinceYear']=store['CompetitionOpenSinceYear'].fillna(store['CompetitionOpenSinceYear'].mode().iloc[0])\nstore.isna().sum()","a59e51a6":"store['Promo2SinceYear'].mode()","d12beef1":"\n!pip install pydotplus","6ed3903e":"\n# merge the data train and store\ndata_merged = data.merge(store,on = 'Store',how = 'left')\nprint(data.shape)\nprint(data_merged.shape)\nprint(data_merged.isnull().sum().sum()) # cross check if there are any missing values\ndata_merged['day'] = data_merged['Date'].dt.day\ndata_merged['month'] = data_merged['Date'].dt.month\ndata_merged['year'] = data_merged['Date'].dt.year\n#data_merged['weekday'] = data_merged['Date'].dt.strftime(%a)  This is already in data\ndata_merged['StateHoliday'] = data_merged['StateHoliday'].map({'a':1,'b':2,'c':3,'0':0,0:0})\ndata_merged['StateHoliday'] = data_merged['StateHoliday'].astype(int)\ndata_merged['Assortment'] = data_merged['Assortment'].map({'a':1,'b':2,'c':3})\ndata_merged['Assortment'] = data_merged['Assortment'].astype(int)\ndata_merged['StoreType'] = data_merged['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ndata_merged['StoreType'] = data_merged['StoreType'].astype(int)\nmap_promo = {'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ndata_merged['PromoInterval'] = data_merged['PromoInterval'].map(map_promo)","77ae3901":"\nfrom sklearn.model_selection import train_test_split\nfeatures = data_merged.columns.drop(['Sales','Date'])\nX = data_merged[features]\ny = np.log(data_merged['Sales']+1)\nX_train,X_test,y_train,y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score, mean_squared_error\nmodel_dt  = DecisionTreeRegressor(max_depth = 3, random_state = 42).fit(X_train,y_train)\ny_pred = model_dt.predict(X_test)\ny_inv = np.exp(y_test)-1\ny_pred_inv = np.exp(y_pred)-1\nnp.sqrt(mean_squared_error(y_inv,y_pred_inv))","d9adedcd":"\ndef draw_tree(model, columns):\n   import pydotplus\n   from sklearn.externals.six import StringIO\n   from IPython.display import Image\n   import os\n   from sklearn import tree\n   \n   graphviz_path = 'C:\\Program Files (x86)\\Graphviz2.38\/bin\/'\n   os.environ[\"PATH\"] += os.pathsep + graphviz_path\n\n   dot_data = StringIO()\n   tree.export_graphviz(model,\n                        out_file=dot_data,\n                        feature_names=columns)\n   graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n   return Image(graph.create_png())\ndraw_tree(model_dt,X.columns)","653e0644":"data_avg_cust = data.groupby(['Store'])[['Customers']].mean().reset_index().astype(int)\ntest_1 = test.merge(data_avg_cust,on = 'Store',how = 'left')\ntest.shape,test_1.shape","bcba9bd2":"test_merged = test_1.merge(store,on = 'Store',how = 'inner')\ntest_merged['Open'] = test_merged['Open'].fillna(1)\ntest_merged['Date'] = pd.to_datetime(test_merged['Date'],format = '%Y-%m-%d')\ntest_merged['day'] = test_merged['Date'].dt.day\ntest_merged['month'] = test_merged['Date'].dt.month\ntest_merged['year'] = test_merged['Date'].dt.year\ntest_merged['StateHoliday'] = test_merged['StateHoliday'].map({'0':0,'a':1})\ntest_merged['StateHoliday'] = test_merged['StateHoliday'].astype(int)\ntest_merged['Assortment'] = test_merged['Assortment'].map({'a':1,'b':2,'c':3})\ntest_merged['Assortment'] = test_merged['Assortment'].astype(int)\ntest_merged['StoreType'] = test_merged['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ntest_merged['StoreType'] = test_merged['StoreType'].astype(int)\nmap_promo = {'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ntest_merged['PromoInterval'] = test_merged['PromoInterval'].map(map_promo)","49f12e87":"test_pred = model_dt.predict(test_merged[features])\ntest_pred_inv = np.exp(test_pred)-1","7d670c57":"\n# submission_predicted = pd.DataFrame({'Id' : test['Id'],'Sales':test_pred_inv })\n# submission_predicted.head()","23f9f15e":"# submission_predicted.to_csv('submission.csv',index = False)","01fcaddd":"# from sklearn.ensemble import RandomForestRegressor\n# import xgboost as xgb\n# from sklearn.model_selection import GridSearchCV\n","f3e485f8":"# ## Hyperparameter Tuning\n# params = {'max_depth': list(range(5,15))}\n# base_model = DecisionTreeRegressor()\n# cv_model = GridSearchCV(base_model,param_grid = params,cv = 5,return_train_score=True).fit(X_train,y_train)\n# import matplotlib.pyplot as plt\n# df_cv_results = pd.DataFrame(cv_model.cv_results_).sort_values(by='mean_test_score',ascending=False)\n# df_cv_results.set_index('param_max_depth')['mean_test_score'].plot.line()\n# df_cv_results.set_index('param_max_depth')['mean_train_score'].plot.line()\n# plt.show()","87612a5f":"model_dt  = DecisionTreeRegressor(max_depth = 11, random_state = 42).fit(X_train,y_train)\ny_pred = model_dt.predict(X_test)","f244744b":"y_inv = np.exp(y_test)-1\ny_pred_inv = np.exp(y_pred)-1\nnp.sqrt(mean_squared_error(y_inv,y_pred_inv))\n","04bfbe5c":"test_pred = model_dt.predict(test_merged[features])\ntest_pred_inv = np.exp(test_pred)-1","ee4802d2":"\nsubmission_predicted = pd.DataFrame({'Id' : test['Id'],'Sales':test_pred_inv })\nsubmission_predicted.head()","82d2649c":"submission_predicted.to_csv('submission.csv',index = False)","3fc34a60":"Missing value Treatment"}}