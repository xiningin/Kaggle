{"cell_type":{"8cf58797":"code","bec54779":"code","125bf056":"code","ab581765":"code","17980056":"code","0bc67ce9":"code","6eb17d8f":"code","d0db753f":"code","e3fbfdc4":"markdown","e98a7ebe":"markdown","b2fe82b4":"markdown","922002bf":"markdown","c8d1b31a":"markdown","3f6968b0":"markdown","fc08f4c6":"markdown","7aa72a9c":"markdown","1bec257b":"markdown","214dfb09":"markdown"},"source":{"8cf58797":"from tensorflow import keras\nimport matplotlib.pyplot as plt\n\nbase_image_path = keras.utils.get_file(\n    \"coast.jpg\", origin=\"https:\/\/img-datasets.s3.amazonaws.com\/coast.jpg\")\n\nplt.axis(\"off\")\nplt.imshow(keras.utils.load_img(base_image_path))","bec54779":"from tensorflow.keras.applications import inception_v3\nmodel = inception_v3.InceptionV3(weights=\"imagenet\", include_top=False)","125bf056":"layer_settings = {\n    \"mixed4\": 1.0,\n    \"mixed5\": 1.5,\n    \"mixed6\": 2.0,\n    \"mixed7\": 2.5,\n}\noutputs_dict = dict(\n    [\n        (layer.name, layer.output)\n        for layer in [model.get_layer(name) for name in layer_settings.keys()]\n    ]\n)\nfeature_extractor = keras.Model(inputs=model.inputs, outputs=outputs_dict)","ab581765":"def compute_loss(input_image):\n    features = feature_extractor(input_image)\n    loss = tf.zeros(shape=())\n    for name in features.keys():\n        coeff = layer_settings[name]\n        activation = features[name]\n        loss += coeff * tf.reduce_mean(tf.square(activation[:, 2:-2, 2:-2, :]))\n    return loss","17980056":"import tensorflow as tf\n\n@tf.function\ndef gradient_ascent_step(image, learning_rate):\n    with tf.GradientTape() as tape:\n        tape.watch(image)\n        loss = compute_loss(image)\n    grads = tape.gradient(loss, image)\n    grads = tf.math.l2_normalize(grads)\n    image += learning_rate * grads\n    return loss, image\n\n\ndef gradient_ascent_loop(image, iterations, learning_rate, max_loss=None):\n    for i in range(iterations):\n        loss, image = gradient_ascent_step(image, learning_rate)\n        if max_loss is not None and loss > max_loss:\n            break\n        print(f\"... Loss value at step {i}: {loss:.2f}\")\n    return image","0bc67ce9":"step = 20.\nnum_octave = 3\noctave_scale = 1.4\niterations = 30\nmax_loss = 15.","6eb17d8f":"import numpy as np\n\ndef preprocess_image(image_path):\n    img = keras.utils.load_img(image_path)\n    img = keras.utils.img_to_array(img)\n    img = np.expand_dims(img, axis=0)\n    img = keras.applications.inception_v3.preprocess_input(img)\n    return img\n\ndef deprocess_image(img):\n    img = img.reshape((img.shape[1], img.shape[2], 3))\n    img \/= 2.0\n    img += 0.5\n    img *= 255.\n    img = np.clip(img, 0, 255).astype(\"uint8\")\n    return img","d0db753f":"original_img = preprocess_image(base_image_path)\noriginal_shape = original_img.shape[1:3]\n\nsuccessive_shapes = [original_shape]\nfor i in range(1, num_octave):\n    shape = tuple([int(dim \/ (octave_scale ** i)) for dim in original_shape])\n    successive_shapes.append(shape)\nsuccessive_shapes = successive_shapes[::-1]\n\nshrunk_original_img = tf.image.resize(original_img, successive_shapes[0])\n\nimg = tf.identity(original_img)\nfor i, shape in enumerate(successive_shapes):\n    print(f\"Processing octave {i} with shape {shape}\")\n    img = tf.image.resize(img, shape)\n    img = gradient_ascent_loop(\n        img, iterations=iterations, learning_rate=step, max_loss=max_loss\n    )\n    upscaled_shrunk_original_img = tf.image.resize(shrunk_original_img, shape)\n    same_size_original = tf.image.resize(original_img, shape)\n    lost_detail = same_size_original - upscaled_shrunk_original_img\n    img += lost_detail\n    shrunk_original_img = tf.image.resize(original_img, shape)\n\nkeras.utils.save_img(\"dream.png\", deprocess_image(img.numpy()))\nplt.scatter(img,deprocess_image(img.numpy()))","e3fbfdc4":"### Implementing DeepDream in Keras","e98a7ebe":"**The DeepDream gradient ascent process**","b2fe82b4":"**Image processing utilities**","922002bf":"**Instantiating a pretrained `InceptionV3` model**","c8d1b31a":"**Running gradient ascent over multiple successive \"octaves\"**","3f6968b0":"**Fetching the test image**","fc08f4c6":"## DeepDream","7aa72a9c":"# Shows a very Inverse end slope showing the lifecycle of image processing with Deep Dream","1bec257b":"**Configuring the contribution of each layer to the DeepDream loss**","214dfb09":"**The DeepDream loss**"}}