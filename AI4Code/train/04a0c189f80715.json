{"cell_type":{"0a31d080":"code","d66c94f6":"code","af1faec6":"code","cf4c779f":"code","f883ca32":"code","491508f1":"code","fe8a4393":"code","4e725476":"code","10cdf92d":"code","c31312cf":"code","99425668":"code","e457bcaa":"code","2e4b442a":"code","3965f7ac":"code","fb32448c":"code","034d126d":"code","e6029b00":"code","f4062ddb":"code","f09d296c":"code","56cca627":"code","0a05f71d":"code","14415371":"code","0bd4463c":"code","ca10a2d8":"code","ec2bdd8f":"code","4029a1ee":"code","d8779f23":"code","7700c20c":"code","0dd7a268":"code","9457915e":"code","fd01fa79":"code","8c4bbebb":"code","3ef92c41":"code","781ce4bc":"code","5e408132":"code","35ca0712":"code","41b3a495":"code","379fb511":"code","6e09da75":"code","384f5bff":"code","a1b9ffd4":"code","b838fcc0":"code","4206fc74":"code","58567ed7":"code","a2fec09b":"code","0ab28f9e":"code","0ccd88d6":"code","f577a421":"code","8d41a575":"code","ced1f976":"code","f2d69435":"code","cf034614":"code","4cc6a634":"code","84379cdd":"code","c522d19d":"code","458fab82":"code","33e8087f":"code","cf47bc14":"code","e0d0ed57":"code","d3f4ae40":"code","066997da":"code","dceffa01":"code","fc44f152":"code","edb1dbe5":"code","4614adcc":"code","15e7fae6":"code","53b0cbda":"code","882c94d5":"code","5f58d8d5":"code","85987f7c":"code","d6effd92":"code","3f562765":"code","b5206995":"code","f46117c8":"code","155827ed":"code","07b76af6":"code","37076ffd":"code","0e5cc49e":"code","e3ba1695":"code","d2b8ce5e":"code","eb362487":"code","4ea4d973":"code","e77ae406":"code","a19c602e":"code","480bd30b":"markdown","3f3abe56":"markdown","a3acc15e":"markdown","82285ffe":"markdown","1765883e":"markdown","10366dc9":"markdown","9a5d42d2":"markdown","294be9d0":"markdown","c894dee8":"markdown","aaf2d6b6":"markdown","1fd429ca":"markdown","e96136b4":"markdown","42abd5bf":"markdown","443c4c9e":"markdown","9e5fcaba":"markdown","ec36503f":"markdown","e9ea49d4":"markdown","697b77f7":"markdown","d58f672e":"markdown","085eb2d0":"markdown","19662a24":"markdown","205c34b8":"markdown","753f19b9":"markdown","2093f62a":"markdown","ca74d0c6":"markdown","2feedec3":"markdown","721070ea":"markdown","974be7ce":"markdown","5d5b8d96":"markdown","04c1bc92":"markdown","7df151d6":"markdown","2343877d":"markdown","93b9f109":"markdown","809c32ea":"markdown","2e73d06b":"markdown","f25f982d":"markdown","ca71c4f9":"markdown","a18ae8de":"markdown","c5b18729":"markdown","0209c430":"markdown","366d6594":"markdown","eed10e07":"markdown","786e8508":"markdown","a758983b":"markdown","50b44a41":"markdown","febfc90a":"markdown","2e7d3abf":"markdown","17fee241":"markdown","06eadea5":"markdown","a73f0d95":"markdown","d06121c1":"markdown"},"source":{"0a31d080":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data visualization library\nimport os","d66c94f6":"orders = pd.read_excel(\"\/kaggle\/input\/salesdataset\/sales.xls\")\norders.head(2)","af1faec6":"orders.shape","cf4c779f":"orders.info()","f883ca32":"# importing plotly(plotly.offline to be precise.)\n\nimport plotly.offline as pyo","491508f1":"plt.plot(orders['Sales'])","fe8a4393":"pyo.plot([{\n    'x': orders.index,\n    'y': orders['Sales']\n          }])\n\n# here since ploty offline shows plots on a html format in your web browser we only can see the link.","4e725476":"# to see th plot in the notebook itself we need to use plot.offline.iplot()\n\npyo.iplot([{\n    'x': orders.index,\n    'y': orders['Sales']\n          }])","10cdf92d":"orders_sf =  orders[['Sales','Profit']]\norders_sf.head(2)","c31312cf":"# By using plotly.offline.iplot() when working offline in a Jupyter Notebook we can display the plot in the notebook itself\n# rather than in html form in our web browser.\n\npyo.iplot([{\n    'x': orders_sf.index,\n    'y': orders_sf[col],\n    'name': col\n} for col in orders_sf.columns])","99425668":"# importing graph object of plotly to plot scatter and other plots\n\nimport plotly.graph_objects as go","e457bcaa":"# plotting sales vs profit scatter plot\n\npyo.plot([go.Scatter(\n    x = orders_sf['Sales'],\n    y = orders_sf['Profit'],\n    mode = 'markers',\n)])\n\n# thing to note is the syntax and also capitalisation of alphabets.","2e4b442a":"# potting same sales vs profit scatter plot but with defining objects since it is the more used and generalised \n# method which will also help later on when we are going to use more parameters.\n\n\n# defining object data.\n\ndata = go.Scatter(\n                x = orders_sf['Sales'],\n                y = orders_sf['Profit'],\n                mode = 'markers',)","3965f7ac":"# calling object data and using it to plot the graph.\n# Here I am not using iplot() just to see the perspective of how the graph or the visualization experience differs.\n\npyo.plot([data])","fb32448c":"# again describing object data as data1 with only one change that is the we are enveloping our go.scatter code inside of \n# square brakets rather than describing in pyo.plot as we have done above.\n\ndata = [go.Scatter(\n                x = orders_sf['Sales'],\n                y = orders_sf['Profit'],\n                mode = 'markers',)]","034d126d":"# describing object layout with title, x-axis and y-axis.\n\nlayout = go.Layout(\n    title = 'Sales Vs Profit',\n    xaxis = dict(title = 'Sales in k'),\n    yaxis = dict(title = 'profit in k'),\n    hovermode = 'closest')\n\n# hovermode is the data comparision parameter it can also be changed in the graph as well.\n# syntax need to be noted as it takes dictionary we need to follow the syntax.","e6029b00":"# supplying all the objects to the one figure object to call on later for easy deployment. \nfigure = go.Figure(data = data, layout = layout)","f4062ddb":"# calling figure object and plotting the plot as described in the objects.\n# using iplot() to display the graph in the notebook itself.\n\npyo.iplot(figure)","f09d296c":"orders.head(2)","56cca627":"# lets look into sales and profit with discount as the size.\n\ndata = [go.Scatter(x = orders['Sales'],\n                   y = orders['Profit'],\n                   text = orders['Customer Name'], # text will show label as specified when we hover the pointer over any bubble\n                   mode = 'markers',\n                   marker = dict(size = 100 * orders['Discount']) \n# providing bubble with size as discount so that we can easily see make out the discount given with the size of bubble.\n# since discount range is very low we *100 to get our bubble in a visible range.\n                  )]","0a05f71d":"layout = go.Layout(\n                    title = 'Sales Vs Profit',\n                    xaxis = dict(title = 'Sales in k'),\n                    yaxis = dict(title = 'profit in k'),\n                    hovermode = 'closest'\n                    )\n\nfigure = go.Figure(data = data, layout = layout)","14415371":"pyo.iplot(figure)","0bd4463c":"# breaking up each category individually and storing each scatter plot seperately in different variables.\n\nlow = go.Scatter(  x = orders['Sales'][orders['Order Priority'] == 'Low'],\n                   y = orders['Profit'][orders['Order Priority'] == 'Low'],\n                   text = orders['Customer Name'],\n                   name = 'Low',\n                   mode = 'markers',\n                   marker = dict(size = 100 * orders['Discount'][orders['Order Priority'] == 'Low'])\n                ) \n                 \nmid = go.Scatter(  x = orders['Sales'][orders['Order Priority'] == 'Medium'],\n                   y = orders['Profit'][orders['Order Priority'] == 'Medium'],\n                   text = orders['Customer Name'],\n                   name = 'Medium',\n                   mode = 'markers',\n                   marker = dict(size = 100 * orders['Discount'][orders['Order Priority'] == 'Medium'])\n                ) \n\nhigh = go.Scatter(  x = orders['Sales'][orders['Order Priority'] == 'High'],\n                   y = orders['Profit'][orders['Order Priority'] == 'High'],\n                   text = orders['Customer Name'],\n                   name = 'High',\n                   mode = 'markers',\n                   marker = dict(size = 100 * orders['Discount'][orders['Order Priority'] == 'High'])\n                ) ","ca10a2d8":"# combining all different sactter plots into one element data to be plotted together.\ndata = (low, mid, high)\n\nlayout = go.Layout(\n                    title = 'Sales Vs Profit',\n                    xaxis = dict(title = 'Sales in k'),\n                    yaxis = dict(title = 'profit in k'),\n                    hovermode = 'closest'\n                    )\n\nfigure = go.Figure(data = data, layout = layout)","ec2bdd8f":"pyo.iplot(figure)","4029a1ee":"# thing to remember is that for bar graph no multiple vlue can be there (for example in order priority column we have high, \n# low, critical, medium etc but there and there are multiple rows of them but we need only 1 row each with aggregate values)\n\n# so for that we will make a pivot table.\n\nop = pd.pivot_table(orders, values = 'Sales', index = 'Order Priority')\nop\n# now we have 1 row each for oredr proiority. Here the aggregate is avg since default we can change to count, max, min etc","d8779f23":"# describing the data object for bar.\n\ndata = [go.Bar(\n    x = op.index, y = op.Sales, name = 'Avg Sales by ship mode'\n            )]\n\nlayout = go.Layout(\n                    title = 'Avg sales by ship mode',\n                    xaxis = dict(title = 'ship mode'),\n                    yaxis = dict(title = 'Avg sales')\n                )","7700c20c":"figure = go.Figure(data = data, layout = layout)","0dd7a268":"pyo.iplot(figure)","9457915e":"# simillarly we can plot graphs for number of oredrs in each category.\n\nop = pd.pivot_table(orders, values = 'Sales', index = 'Order Priority', aggfunc = 'count')\nop","fd01fa79":"# describing the data object.\n\ndata = [go.Bar(\n                x = op.index, y = op['Sales'], name = 'Number of orders by ship mode'\n                )]\n\nlayout = go.Layout(\n                    title = 'Number of orders by ship mode',\n                    xaxis = dict(title = 'ship mode'),\n                    yaxis = dict(title = 'Number of orders')\n                    )","8c4bbebb":"figure = go.Figure(data = data, layout = layout)","3ef92c41":"\npyo.iplot(figure)","781ce4bc":"# declaring the profit element to see the profit distribution.\ndata = [go.Histogram(x = orders['Profit'],\n                    opacity = .5,\n                    name = 'Profit')]\n\nlayout = go.Layout(title = 'Profit distribution')\n\nfigure = go.Figure(data = data, layout = layout)","5e408132":"pyo.iplot(figure)","35ca0712":"# declaring profit element.\nprofit = go.Histogram(x = orders['Profit'],\n                    opacity = .5,\n                    name = 'Profit')\n\n# declaring sales element\nsales = go.Histogram(x = orders['Sales'],\n                    opacity = .5,\n                    name = 'Sales')\n\nlayout = go.Layout(title = 'Profit Vs Sales distribution')\n\n# adding both in one element as data to be visualised together.\ndata = [profit, sales]\n\nfigure = go.Figure(data = data, layout = layout)","41b3a495":"pyo.iplot(figure)","379fb511":"orders.head(2)","6e09da75":"orders['Product Category'].value_counts()","384f5bff":"ofs = orders['Sales'][orders['Product Category'] == 'Office Supplies']\ntech = orders['Sales'][orders['Product Category'] == 'Technology']\nfur = orders['Sales'][orders['Product Category'] == 'Furniture']","a1b9ffd4":"cat1 = go.Box(y = ofs,\n             name = 'Office Supplies')\n\ncat2 = go.Box(y = tech,\n             name = 'Technology')\n\ncat3 = go.Box(y = fur,\n             name = 'Furniture')","b838fcc0":"data = [cat1, cat2, cat3]\n\nlayout = go.Layout(title = 'Distribution of sales by product Category')\n\nfigure = go.Figure(data = data, layout = layout)","4206fc74":"pyo.iplot(figure)","58567ed7":"pd.pivot_table(orders, values = 'Sales', index = 'Product Category', aggfunc = 'sum')","a2fec09b":"fifa = pd.read_csv('\/kaggle\/input\/fifa19eda\/fifa_eda.csv')\nfifa.head(2)","0ab28f9e":"fifa.shape","0ccd88d6":"fifa_ov = pd.pivot_table(fifa, values = ['Value','Wage'], index = 'Nationality', aggfunc = 'mean')\nfifa_ov","f577a421":"# declaring value element\nline1 = go.Scatter(x = fifa_ov.index,\n                    y = fifa_ov['Value'],\n                    mode = 'lines',\n                    name = 'Average player Value of the country')\n\n# declring wage element\nline2 = go.Scatter(x = fifa_ov.index,\n                    y = fifa_ov['Wage'],\n                    mode = 'lines',\n                    name = 'Average player wage of the country')","8d41a575":"# adding both wage and value element in one data element for visualization.\ndata = [line1, line2]\n\nlayout = go.Layout(title = 'Average Value to wage comparision',\n                   xaxis = dict(title = 'Countries'),\n                   yaxis = dict(title = 'Value and Wage in k'))\n\nfigure = go.Figure(data = data, layout = layout)","ced1f976":"pyo.iplot(figure)","f2d69435":"# ok lets make a scatter plot using the values from the original set and see what we get.\nline = go.Scatter(x = fifa['Nationality'],\n                    y = fifa['Value'],\n                    mode = 'lines',\n                    )\n\nfigure = go.Figure(data = line)\npyo.iplot(figure)","cf034614":"# This is what we get if we do not make a pivot table and take data from our original set itself, \n# data needs to be in specific format for plotly to plot reasonable and informative plots.","4cc6a634":"fifa_pvt = pd.pivot_table(fifa, values = ['Value','Wage','Release Clause'], columns = 'Nationality')\nfifa_pvt","84379cdd":"# now on to the automation process.\n\nauto = [go.Scatter(x = fifa_pvt.columns,\n                   y = fifa_pvt.loc[row], # taking each roe one by one.\n                   mode = 'lines',\n                   name = row\n                  ) for row in fifa_pvt.index]","c522d19d":"layout = go.Layout(title = 'Average Wage, Value and Release clause comparision',\n                   xaxis = dict(title = 'Countries'),\n                   yaxis = dict(title = 'Release Clause, Value and Wage in k'))\n\nfigure = go.Figure(data = auto, layout = layout)","458fab82":"pyo.iplot(figure)","33e8087f":"auto = [go.Scatter(x = fifa_pvt.columns[:20], # for simplicity only first 20 columns are taken for the visualization.\n                   y = fifa_pvt.loc[row], # supplying each row one by one.\n                   mode = 'lines+markers', # slight change is made here to add markers.\n                   name = row\n                  ) for row in fifa_pvt.index]","cf47bc14":"layout = go.Layout(title = 'Average Wage, Value and Release clause comparision',\n                   xaxis = dict(title = 'Countries'),\n                   yaxis = dict(title = 'Release Clause, Value and Wage in k'))\n\nfigure = go.Figure(data = auto, layout = layout)","e0d0ed57":"pyo.iplot(figure)","d3f4ae40":"# let me make a pivot table with value and release clause and also use pivot table fifa_pvt that we made above.","066997da":"fifa_tab = pd.pivot_table(fifa, values = ['Value','Release Clause'], index = 'Nationality')\nfifa_tab.head()","dceffa01":"# for simplicity lets see for the first 20 countries. Which here is done using index slicing.\n# declaring frst bar component.\nbar1 = go.Bar(x = fifa_tab.index[:20],\n                    y = fifa_tab['Value'][:20],\n                    name = 'Average player Value of the country')\n\n# declaring second bar component.\nbar2 = go.Bar(x = fifa_tab.index[:20],\n                    y = fifa_tab['Release Clause'][:20],\n                    name = 'Average player Release clause of the country')","fc44f152":"# supplying layout details.\nlayout = go.Layout(title = 'Average Value and Release clause comparision',\n                   xaxis = dict(title = 'Countries'),\n                   yaxis = dict(title = 'Value and Release clause in k'))\n\n# declaring figure component with data as both bar component combined.\nfigure = go.Figure(data = [bar1,bar2], layout = layout)","edb1dbe5":"pyo.iplot(figure)","4614adcc":"# lets use the pivot table with Avg age, overall and potential of players in different countries..\n\nfifa_pvt = pd.pivot_table(fifa, values = ['Age','Overall','Potential'], columns = 'Nationality')\nfifa_pvt","15e7fae6":"auto = [go.Bar(x = fifa_pvt.columns[:20], # for simplicity only first 20 columns are taken for the visualization.\n                   y = fifa_pvt.loc[row], # taking each row one by one.\n                   name = row\n                  ) for row in fifa_pvt.index]","53b0cbda":"layout = go.Layout(title = 'Average Age, Overall and Potential comparision',\n                   xaxis = dict(title = 'Countries'),\n                   yaxis = dict(title = 'Average Age, Overall and Potential'))\n\nfigure = go.Figure(data = auto, layout = layout)","882c94d5":"pyo.iplot(figure)","5f58d8d5":"# we see the grouped bar chart of 3 different fields easily with just one automated code.  ","85987f7c":"# let me use the same code as the automated bar chart.","d6effd92":"# for simplicity lets see for the first 20 countries. Which here is done using index slicing.\nauto = [go.Bar(x = fifa_pvt.columns[:20], # for simplicity only first 20 columns are taken for the visualization.\n                   y = fifa_pvt.loc[row],\n                   name = row\n                  ) for row in fifa_pvt.index]","3f562765":"# suppling layout details\nlayout = go.Layout(title = 'Average Age, Overall and Potential comparision',\n                   xaxis = dict(title = 'Countries'),\n                   yaxis = dict(title = 'Average Age, Overall and Potential'),\n                  barmode = 'stack') # only barmode = 'stack' needs to be added to make it a stacked bar chart.\n\nfigure = go.Figure(data = auto, layout = layout)","b5206995":"pyo.iplot(figure)","f46117c8":"# for this chart lets concentrate on the age and potential of top 20 players according to their name.","155827ed":"# declaring bar component.\nbar = go.Bar(x = fifa['Name'][:20],\n             y = fifa['Potential'],\n             name = 'Potential Bar',\n             marker = dict(color = 'rgb(170,150,220)') # here we are changing the color. \n            )\n# Note: first important thing is the syntax\n# second thing is, with different rgb combination we can get different colors, also we can give color code in place of rgb.\n\n\n# declaring the scatter component.\nscatter = go.Scatter(x = fifa['Name'][:20], \n                      y = fifa['Age'],\n                      name = 'Age line',\n                      mode = 'lines + markers'\n                    )","07b76af6":"# adding both bar and scatter component into one as data\ndata = [bar, scatter]","37076ffd":"# suplying nescessary layout details.\nlayout = go.Layout(title = 'Potential of players',\n                   xaxis = dict(title = 'Player'),\n                   yaxis = dict(title = 'Potential'))\n\n# putting all together in one figure component.\nfigure = go.Figure(data = data, layout = layout)","0e5cc49e":"pyo.iplot(figure)","e3ba1695":"import plotly.figure_factory as ff\n# calling nescessary library to create the matrix.","d2b8ce5e":"# Taking only 4 features to simplify the figure. \nfifa_slice = fifa.loc[:,['Overall','Potential','Wage', 'Preferred Foot']]","eb362487":"figure = ff.create_scatterplotmatrix(fifa_slice, index = 'Preferred Foot', colormap = 'Portland',diag = 'box', colormap_type = 'cat')","4ea4d973":"pyo.iplot(figure)","e77ae406":"df = pd.read_csv('\/kaggle\/input\/2011usagexport\/2011_us_ag_exports.csv')\n\nfor col in df.columns:\n    df[col] = df[col].astype(str)\n\nscl = [[0.0, 'rgb(242,240,247)'],[0.2, 'rgb(218,218,235)'],[0.4, 'rgb(188,189,220)'],\\\n            [0.6, 'rgb(158,154,200)'],[0.8, 'rgb(117,107,177)'],[1.0, 'rgb(84,39,143)']]\n\ndf['text'] = df['state'] + '<br>' +\\\n    'Beef '+df['beef']+' Dairy '+df['dairy']+'<br>'+\\\n    'Fruits '+df['total fruits']+' Veggies ' + df['total veggies']+'<br>'+\\\n    'Wheat '+df['wheat']+' Corn '+df['corn']\n\ndata = [ dict(\n        type='choropleth',\n        colorscale = scl,\n        autocolorscale = False,\n        locations = df['code'],\n        z = df['total exports'].astype(float),\n        locationmode = 'USA-states',\n        text = df['text'],\n        marker = dict(\n            line = dict (\n                color = 'rgb(255,255,255)',\n                width = 2\n            ) ),\n        colorbar = dict(\n            title = \"Millions USD\")\n        ) ]\n\nlayout = dict(\n        title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',\n        geo = dict(\n            scope='usa',\n            projection=dict( type='albers usa' ),\n            showlakes = True,\n            lakecolor = 'rgb(255, 255, 255)'),\n             )\n    \nfig = dict( data=data, layout=layout )\npyo.iplot( fig, filename='d3-cloropleth-map' )","a19c602e":"df = pd.read_csv('\/kaggle\/input\/2014-world-gdp\/2014_world_gdp_with_codes.csv')\n\ndata = [ dict(\n        type = 'choropleth',\n        locations = df['CODE'],\n        z = df['GDP (BILLIONS)'],\n        text = df['COUNTRY'],\n        colorscale = [[0,\"rgb(5, 10, 172)\"],[0.35,\"rgb(40, 60, 190)\"],[0.5,\"rgb(70, 100, 245)\"],\\\n            [0.6,\"rgb(90, 120, 245)\"],[0.7,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"]],\n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '$',\n            title = 'GDP<br>Billions US$'),\n      ) ]\n\nlayout = dict(\n    title = '2014 Global GDP<br>Source:\\\n            <a href=\"https:\/\/www.cia.gov\/library\/publications\/the-world-factbook\/fields\/2195.html\">\\\n            CIA World Factbook<\/a>',\n    geo = dict(\n        showframe = False,\n        showcoastlines = False,\n        projection = dict(\n            type = 'Mercator'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\npyo.iplot( fig, validate=False, filename='d3-world-map' )","480bd30b":"### Stacked Bar Chart <a id=\"11\"><\/a>\n\n- A stacked bar chart is a variant of the bar chart. A standard bar chart compares individual data points with each other.\n\n- Whereas in a stacked bar chart, each bar displays a total amount which are furthur broken down into sub-amounts. \n\n- Each bar in the chart represents a whole, and segments in the bar represent different parts or categories of that whole.","3f3abe56":"### WHAT IS PLOTLY?\n\n#### Plotly is another visualization library that provides online graphing, analytics, and statistics tools for individuals and collaboration, as well as scientific graphing libraries for Python, R, MATLAB, Perl, Julia, Arduino, and REST.\n\n### WHY USE PLOTLY WHEN WE HAVE MATPLOTLIB?\n\n#### A major advantage of using Plotly is that it encourages us to be as creative as possible with your visualization since any complex plots only use three main concepts: data, layout, and figure objects. As an engineer, this is probably one of the best things to have as we can build and rebuild graphs in any way we want.\n\n#### If you're still using Matplotlib to make data visualizations in Python, it's time to check out the view from an interactive visualization library. Plotly allows you to make beautiful, interactive, exportable figures in just a few lines of code.","a3acc15e":"#### plotly plot","82285ffe":"- Let us add Release clause to the pivot table as well.\n\n- To automate the process we need to modify the table a bit with nationality as columns and value, wage and release clause ar index.","1765883e":"### That will be all for this notebook. \n\n#### As it was aimed to practice and learn more about basic visualization using plotly and here I used plotly.offline().\n\n### But there is plotly.express which earlier this year plotly released as a standalone library aimed at making it significantly easier and faster to create plotly figures from tidy data\u2014as easy as a single line of Python. Plotly Express was extremely well-received by the community and starting with version 4, plotly now includes Plotly Express built-in (accessible as plotly.express) and our documentation has been reworked to include examples using Plotly Express at the top of every applicable page, and to provide examples of how to customize figures generated with Plotly Express. Which I will explore in another notebook.","10366dc9":"* [Back to table of contents](#0)","9a5d42d2":"* [Back to table of contents](#0)","294be9d0":"- This kind of chart is very helpful to quickly analyse and see like in this case we can see conclusively with few exception that as the player grows older their potential starts declining.","c894dee8":"### Box plot <a id=\"7\"><\/a>\n\n- A box plot is a method for graphically depicting groups of numerical data through their quartiles.\n\n- A boxplot is a standardized way of displaying the distribution of data based on a five number summary (\u201cminimum\u201d, first quartile (Q1), median, third quartile (Q3), and \u201cmaximum\u201d)\n\n- It can also tell if data is symmetrical or not, how tightly data is grouped, and if and how data is skewed.","aaf2d6b6":"* [Back to table of contents](#0)","1fd429ca":"> ### Combo Chart. <a id=\"12\"><\/a>\n\n- A combo chart displays two chart types (such as bar and line) on the same chart. \n\n- They are used to show different types of information on a single chart.","e96136b4":"* [Back to table of contents](#0)","42abd5bf":"#### Now for Automated part.","443c4c9e":"### WHAT IS VISUALIZATION?\n\n#### As we generally know data visualization is the graphical representation of information and data. By using visual elements like charts, graphs, and maps, data visualization tools provide an accessible way to see and understand trends, outliers, and patterns in data.","9e5fcaba":"## Choropleth map<a id=\"15\"><\/a>","ec36503f":"* [Back to table of contents](#0)","e9ea49d4":"For line chart let us use different dataset here i am using fifa19 dataset of kaggle which I have already cleaned so that we can work efficiently","697b77f7":"### Multiple histogram <a id=\"6\"><\/a>","d58f672e":"#### DIFFERENCE BETWEEN MATPLOTLIB PLOT AND PLOTLY PLOT <a id=\"1\"><\/a>\n\n#### Simple matplotlib plot","085eb2d0":"* [Back to table of contents](#0)","19662a24":"### Grouped Bar chart <a id=\"10\"><\/a>\n\n- A grouped bar chart, also known as clustered bar graph, multi-set bar chart, or grouped column chart, is a type of bar graph that is used to represent and compare different categories of two or more groups.\n\n- They are also used to present and compare data of sub-categories within the main category.","205c34b8":"#### Using different mode.","753f19b9":"* [Back to table of contents](#0)","2093f62a":"> #### Table of contents. <a id=\"0\"><\/a>\n\n* [Difference between plotly and matplotlib plots](#1)\n* [Scatter plot](#2)\n* [Bubble chart](#3)\n* [Bar graph](#4)\n* [Histogram](#5)\n* [Multiple Histogram](#6)\n* [Box plot](#7)\n* [Line chart](#8)\n* [Multiple line chart](#9)\n* [Grouped Bar Chart](#10)\n* [Stacked Bar Chart](#11)\n* [Combo Chart](#12)\n* [Scatter plot matrix](#13)\n* [Coropleth map](#15)\n* [World map](#16)\n","ca74d0c6":"Easy, simple and detailed patterns can be observed with conclusive relation between Value of a player to their release clause, meaning higher valued the player costly will be his release clause.","2feedec3":"### What is plotly.offline?\n- In \u201conline\u201d mode, figures were uploaded to an instance of Plotly\u2019s Chart Studio service and then displayed, whereas in \u201coffline\u201d mode figures were rendered locally for you to view and draw conclusive analysis on.","721070ea":"* [Back to table of contents](#0)","974be7ce":"* [Back to table of contents](#0)","5d5b8d96":"## THANK YOU, Please do UPVOTE if you find this helpful in anyway. \n\n### Have a nice day ahead and keep smiling.","04c1bc92":"### But why are we creating pivot table and then using the data to plot our graphs? why not take the data from the original set?","7df151d6":"* [Back to table of contents](#0)","2343877d":"### Bar Graph <a id=\"4\"><\/a>\n\n- Bar graphs are used to compare things between different groups or to track changes over time.\n\n- The graph represents categories on one axis and a discrete value in the other. The goal is to show the relationship between the two axes.\n\n- Bar graphs are an extremely effective visual to use in presentations and reports. They are popular because they allow the reader to recognize patterns or trends far more easily than looking at a table of numerical data. ","93b9f109":"* [Back to table of contents](#0)","809c32ea":"### Histogram <a id=\"5\"><\/a>\n\n- A histogram is an approximate representation of the distribution of numerical or categorical data.\n\n- Histograms provide a visual interpretation of numerical data by indicating the number of data points that lie within a range of values.\n\n- The higher that the bar is, the greater the frequency of data values in that bin.","2e73d06b":"#### Let's dive in and try to learn more about Plotly and different basic chart available for visualization.","f25f982d":"### Bubble chart  <a id=\"3\"><\/a>\n\n- Bubble chart is a variation of scatter plot with more customization for more detailed analysis.\n\n- A bubble chart is a type of chart that displays three dimensions of data.\n\n- Bubble charts are often used to present financial data. Different bubble sizes are useful to visually emphasize specific values.","ca71c4f9":"### Scatter plot matrix <a id=\"13\"><\/a>\n\n- A scatter plot matrix is a grid (or matrix) of scatter plots used to visualize bivariate relationships between combinations of variables. Each scatter plot in the matrix visualizes the relationship between a pair of variables, allowing many relationships to be explored in one chart.","a18ae8de":"#### To create a stacked bar chart we do not need to make any extraordinary changes to our code that we used for the bar chart. we just need to tweak our layout a bit and rest same as a bar chart.","c5b18729":"### WHAT IS THE NEED OF VISUALIZATION?\n\n- We need data visualization simply because of human tendency to percieve visual summary of information better than numerical or tabular form. Visualization makes it easier to identify patterns and trends than looking through thousands of rows on a spreadsheet. It's the way the human brain works. Since the purpose of data analysis is to gain insights, data is much more valuable when it is visualized and as backed by studies done by several instiutions which conclusively proved that humans remember memory better than auditory memory.\n\n- It is important to keep in mind that in daily life what we remember is what we paid attention to and in general our eyes are drawn to colors and patterns and we recognise things better visually. We quickly can distinguish red from blue or green, square from circle or any other shape. From ancient times we relied more on visual, including everything from art and advertisements to TV and movies.\n\n- Data visualization is another form of visual art that grabs our interest and keeps our eyes on the message. When we see a chart, we quickly see trends and outliers. If we can see something, we internalize it quickly. It\u2019s storytelling with a purpose. If you\u2019ve ever stared at a massive spreadsheet of data and couldn\u2019t see a trend, you know how much more effective a visualization can be.","0209c430":"* [Back to table of contents](#0)","366d6594":"### Multiple line chart. <a id=\"9\"><\/a>","eed10e07":"#### Now we can create multiple line chart but if there are more columns we have to supply the line chart code that many time, which will be hectic so what we can do is to automate the process by using loops.","786e8508":"### Scatter plot <a id=\"2\"><\/a>\n\n- A scatter plot (also called a scatterplot, scatter graph, scatter chart, scattergram, or scatter diagram) is a type of plot or mathematical diagram using Cartesian coordinates to display values for typically two variables for a set of data.\n\n- Scatter plots are used to plot data points on a horizontal and a vertical axis in the attempt to show how much one variable is affected by another. Each row in the data table is represented by a marker whose position depends on its values in the columns set on the X and Y axes.\n\n- They show the extent of corelation if any between the observed quantities.","a758983b":"* [Back to table of contents](#0)","50b44a41":"**First manually**.","febfc90a":"### Line Chart <a id=\"8\"><\/a>\n\n- A line chart or line plot or line graph or curve chart is a type of chart which displays information as a series of data points called 'markers' connected by straight line segments.\n\n- A line chart is used to represent data over a continuous time span. It is generally used to show trend of a measure (or a variable) over time.","2e7d3abf":"- We can easily catch the difference in average wage and average value pattern from the line chart.","17fee241":"#### Lets customise our bubble chart more for more better visualization.","06eadea5":"- We can observe clearly, the high outliers in Technology category leading us to believe that technology category is bringing in most of our revenue. Creating pivot table below to support the observation.\n \n Such that more observations can be made.","a73f0d95":"* [Back to table of contents](#0)","d06121c1":"## World Map<a id=\"16\"><\/a>"}}