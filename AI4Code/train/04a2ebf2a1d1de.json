{"cell_type":{"bad1f0ef":"code","702458b3":"code","5148eb05":"code","80f8bc9a":"code","b60efa8d":"code","fc182c23":"code","8df92d1c":"code","d9cbfa3a":"code","1be9455d":"code","2c63b4eb":"code","9b1394aa":"code","fb8f319d":"code","8c22ff26":"code","c5ebf84d":"code","642e0e79":"code","ce64dcda":"code","83a7f0e3":"code","17f1be22":"code","5b5ae5fa":"code","02f68099":"code","02a783e6":"code","dcd7c000":"code","a526bdd9":"code","381263bc":"code","baa0f405":"code","1ab49015":"code","bf06916b":"code","985b1d03":"code","ef39e10d":"code","cea8f74e":"code","e0b1bfa3":"code","8ab8798d":"code","185b1a59":"code","51183b89":"code","3ac06912":"code","a8996465":"code","cb5f6870":"code","b5bef0c9":"code","6758c507":"code","60a49c0c":"code","0d0d4e95":"code","c53986b9":"code","7b3194e5":"code","66348167":"code","d9ad5da0":"code","38b04eb5":"code","76c07aea":"code","76e1d0b6":"code","e8236526":"code","dee73e7c":"markdown"},"source":{"bad1f0ef":"import pandas as pd\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain.head()","702458b3":"test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nid = test['Id'].astype(int)\ntest.head()","5148eb05":"train.info()","80f8bc9a":"pd.set_option(\"display.max_rows\", 500)\npd.set_option(\"display.max_columns\", 500)\npd.options.display.float_format = '{:,.2f}'.format","b60efa8d":"dups = train.duplicated()\nprint('Total duplicate Values in the train dataset = ',dups.sum())","fc182c23":"print('Total missing values in train dataset = ',train.isnull().sum().sum())","8df92d1c":"missing = pd.DataFrame(train.isnull().sum()\/train.shape[0]*100,columns=['Missing %'])\nmissing.sort_values(by='Missing %',ascending=False,inplace=True)\n\n\nto_drop = missing[missing['Missing %']>=30].index.tolist()\n\nmissing[missing['Missing %']>=30]","d9cbfa3a":"train['PoolQC'].fillna('None',axis=0,inplace=True)\ntrain['MiscFeature'].fillna('None',axis=0,inplace=True)\ntrain['Alley'].fillna('None',axis=0,inplace=True)\ntrain['Fence'].fillna('None',axis=0,inplace=True)\ntrain['FireplaceQu'].fillna('None',axis=0,inplace=True)","1be9455d":"# train.drop(to_drop,axis=1,inplace=True)\nmissing.drop(to_drop,axis=0,inplace=True)","2c63b4eb":"missing[missing['Missing %']>0]","9b1394aa":"for i in missing[missing['Missing %']>0].index:\n  print(i,'====>',train[i].dtypes)","fb8f319d":"train['GarageCond'].fillna('None',axis=0,inplace=True)\ntrain['GarageType'].fillna('None',axis=0,inplace=True)\ntrain['GarageFinish'].fillna('None',axis=0,inplace=True)\ntrain['GarageQual'].fillna('None',axis=0,inplace=True)\ntrain['BsmtFinType2'].fillna('None',axis=0,inplace=True)\ntrain['BsmtExposure'].fillna('None',axis=0,inplace=True)\ntrain['BsmtQual'].fillna('None',axis=0,inplace=True)\ntrain['BsmtCond'].fillna('None',axis=0,inplace=True)\ntrain['BsmtFinType1'].fillna('None',axis=0,inplace=True)","8c22ff26":"missin = pd.DataFrame(train.isnull().sum())\nmissin[missin[0]>0]","c5ebf84d":"for i in missin[missin[0]>0].index:\n  print(i,'===>',train[i].dtypes)","642e0e79":"import numpy as np\ntrain[['MasVnrType','Electrical']].describe(exclude=np.number)","ce64dcda":"train['LotFrontage'].fillna(train['LotFrontage'].median(),axis=0,inplace=True)\ntrain['MasVnrType'].fillna(train['MasVnrType'].value_counts().index[0],axis=0,inplace=True)\ntrain['MasVnrArea'].fillna(train['MasVnrArea'].median(),axis=0,inplace=True)\ntrain['Electrical'].fillna(train['Electrical'].value_counts().index[0],axis=0,inplace=True)\ntrain['GarageYrBlt'].fillna(train['GarageYrBlt'].median(),axis=0,inplace=True)","83a7f0e3":"print('Total missing values in train dataset = ',train.isnull().sum().sum())","17f1be22":"numerical = train.describe().columns.tolist()","5b5ae5fa":"for i in numerical:\n  print('\\n',i)\n  print('='*len(i))\n  print(train[i].unique())","02f68099":"categorical = train.describe(exclude=np.number).columns.tolist()\nfor i in categorical:\n  print('\\n',i)\n  print('='*len(i))\n  print(train[i].unique())","02a783e6":"train.info()","dcd7c000":"X = train.drop(['Id','SalePrice'],axis=1)\ny = train['SalePrice']","a526bdd9":"# from sklearn.preprocessing import StandardScaler\n# scale = StandardScaler()\n# X_scale = scale.fit_transform(X[numerical[1:-1]])\n# X_num = pd.DataFrame(X_scale,columns=X[numerical[1:-1]].columns)\n# X_num.head()","381263bc":"X[categorical] = X[categorical].astype('category')\nX[categorical] = X[categorical].apply(lambda x: x.cat.codes)\n","baa0f405":"# X = pd.concat([X_cat,X_num],axis=1)\nX.head()","1ab49015":"# from sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LinearRegression\n# linear_model = Lasso(alpha=0.1, precompute=True, positive=True, selection='random',random_state=0)\nlinear_model = LinearRegression(normalize=True)\n\n# from sklearn.linear_model import Ridge\n\n# linear_model = Ridge(alpha=100, solver='lsqr', tol=0.0001, random_state=0,normalize=True)\n\n\nlinear_model.fit(X,y)","bf06916b":"for variable, column in enumerate(X.columns):\n    print(\"The coefficient for {} is {}\\n\".format(column, linear_model.coef_[variable]))","985b1d03":"# Let us check the intercept for the model\nintercept = linear_model.intercept_\nprint(\"The intercept for Linear model is {}\".format(intercept))","ef39e10d":"from sklearn import metrics\npred = linear_model.predict(X)\n\ntest_pred = linear_model.predict(X)\n\nprint('Linear Regression Model')\nprint('======================')\nprint()\nprint('Train set evaluation:\\n-----------------------------')\nmae = metrics.mean_absolute_error(y, test_pred)\nmse = metrics.mean_squared_error(y, test_pred)\nrmse = np.sqrt(metrics.mean_squared_error(y, test_pred))\nr2_square = metrics.r2_score(y, test_pred)\n\nprint('mean_absolute_error:', mae)\nprint('mean_squared_error:', mse)\nprint('RMSE:', rmse)\nprint('R2 Square', r2_square)","cea8f74e":"test.head()","e0b1bfa3":"test.info()","8ab8798d":"test_missing = pd.DataFrame(test.isnull().sum()\/test.shape[0]*100,columns=['Missing %'])\nto_drop = test_missing[test_missing['Missing %']>=30].index.tolist()\ntest_missing[test_missing['Missing %']>=30]","185b1a59":"test['Alley'].fillna('None',axis=0,inplace=True)\ntest['FireplaceQu'].fillna('None',axis=0,inplace=True)\ntest['PoolQC'].fillna('None',axis=0,inplace=True)\ntest['Fence'].fillna('None',axis=0,inplace=True)\ntest['MiscFeature'].fillna('None',axis=0,inplace=True)","51183b89":"test_missing.drop(to_drop,axis=0,inplace=True)","3ac06912":"test_missing[test_missing['Missing %']>0]","a8996465":"for i in test_missing[test_missing['Missing %']>0].index:\n  if test[i].dtypes == 'object':\n    # print(i,'=====>',test[i].value_counts().index[0])\n    print('test[{}].fillna(test[{}].value_counts().index[0],axis=0,inplace=True)'.format(i,i))","cb5f6870":"test['MSZoning'].fillna(test['MSZoning'].value_counts().index[0],axis=0,inplace=True)\ntest['Utilities'].fillna(test['Utilities'].value_counts().index[0],axis=0,inplace=True)\ntest['Exterior1st'].fillna(test['Exterior1st'].value_counts().index[0],axis=0,inplace=True)\ntest['Exterior2nd'].fillna(test['Exterior2nd'].value_counts().index[0],axis=0,inplace=True)\ntest['MasVnrType'].fillna(test['MasVnrType'].value_counts().index[0],axis=0,inplace=True)\ntest['BsmtQual'].fillna('None',axis=0,inplace=True)\ntest['BsmtCond'].fillna('None',axis=0,inplace=True)\ntest['BsmtExposure'].fillna('None',axis=0,inplace=True)\ntest['BsmtFinType1'].fillna('None',axis=0,inplace=True)\ntest['BsmtFinType2'].fillna('None',axis=0,inplace=True)\ntest['KitchenQual'].fillna(test['KitchenQual'].value_counts().index[0],axis=0,inplace=True)\ntest['Functional'].fillna(test['Functional'].value_counts().index[0],axis=0,inplace=True)\ntest['GarageType'].fillna('None',axis=0,inplace=True)\ntest['GarageFinish'].fillna('None',axis=0,inplace=True)\ntest['GarageQual'].fillna('None',axis=0,inplace=True)\ntest['GarageCond'].fillna('None',axis=0,inplace=True)\ntest['SaleType'].fillna(test['SaleType'].value_counts().index[0],axis=0,inplace=True)","b5bef0c9":"for i in test_missing[test_missing['Missing %']>0].index:\n  if test[i].dtypes == 'float64' or test[i].dtypes == 'int64':\n    # print(i,'=====>',test[i].value_counts().index[0])\n    print('test[\"{}\"].fillna(test[\"{}\"].median(),axis=0,inplace=True)'.format(i,i))","6758c507":"test[\"LotFrontage\"].fillna(test[\"LotFrontage\"].median(),axis=0,inplace=True)\ntest[\"MasVnrArea\"].fillna(test[\"MasVnrArea\"].median(),axis=0,inplace=True)\ntest[\"BsmtFinSF1\"].fillna(test[\"BsmtFinSF1\"].median(),axis=0,inplace=True)\ntest[\"BsmtFinSF2\"].fillna(test[\"BsmtFinSF2\"].median(),axis=0,inplace=True)\ntest[\"BsmtUnfSF\"].fillna(test[\"BsmtUnfSF\"].median(),axis=0,inplace=True)\ntest[\"TotalBsmtSF\"].fillna(test[\"TotalBsmtSF\"].median(),axis=0,inplace=True)\ntest[\"BsmtFullBath\"].fillna(test[\"BsmtFullBath\"].median(),axis=0,inplace=True)\ntest[\"BsmtHalfBath\"].fillna(test[\"BsmtHalfBath\"].median(),axis=0,inplace=True)\ntest[\"GarageYrBlt\"].fillna(test[\"GarageYrBlt\"].median(),axis=0,inplace=True)\ntest[\"GarageCars\"].fillna(test[\"GarageCars\"].median(),axis=0,inplace=True)\ntest[\"GarageArea\"].fillna(test[\"GarageArea\"].median(),axis=0,inplace=True)","60a49c0c":"test.isnull().sum().any()","0d0d4e95":"# test_num = scale.fit_transform(test[numerical[1:]])\n# test_num = pd.DataFrame(test_num,columns=numerical[1:])\n# test_num.head()","c53986b9":"test[categorical] = test[categorical].astype('category')\ntest[categorical] = test[categorical].apply(lambda x: x.cat.codes)\n# test_cat.head()","7b3194e5":"# test = pd.concat([test_cat,test_num],axis=1)\ntest.head()","66348167":"print('Total missing values in test dataset = ',test.isnull().sum().sum())","d9ad5da0":"X = test.drop('Id',axis=1)\npred = linear_model.predict(X)\npred","38b04eb5":"submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nactual = submission.copy()\nsubmission['Id'] = id\nsubmission['SalePrice'] = pred\npd.set_option('display.float_format', '{:.2f}'.format)\nsubmission.head()\nsubmission.to_csv('LinearModel_submission.csv',index=False)","76c07aea":"submission.info()","76e1d0b6":"submission.head()","e8236526":"submission.shape","dee73e7c":"<h1 align='center'>House Price Prediction \ud83c\udfe1<\/h1>"}}