{"cell_type":{"57f50894":"code","53225ffe":"code","9c83f771":"code","ebe1b311":"code","05d4859f":"code","571a7220":"code","9706a6e7":"code","8898b9ed":"code","9e345bb8":"code","af03208f":"code","80e706c2":"code","ca01a258":"code","54ac31c0":"code","6c5e9b3b":"code","3c3ec7d3":"code","109919d7":"markdown","035050f2":"markdown","a45e5e1b":"markdown","0382606a":"markdown","b9c60bc5":"markdown","0b7acac2":"markdown","560c1451":"markdown","5edf9035":"markdown","42016b2a":"markdown","c9e40577":"markdown","21f98dd2":"markdown","a145ca4f":"markdown","73a90415":"markdown","eac1e187":"markdown"},"source":{"57f50894":"import numpy as np\nimport pandas as pd\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, AveragePooling2D\nfrom tensorflow.keras import utils\nfrom tensorflow.keras.preprocessing import image\nimport matplotlib.pyplot as plt\n%matplotlib inline \nimport os\n\"\"\" \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u0444\u0430\u0439\u043b\u044b \u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \"\"\"\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","53225ffe":"# \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 CIFAR-10\nclasses=['\u0441\u0430\u043c\u043e\u043b\u0435\u0442', '\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c', '\u043f\u0442\u0438\u0446\u0430', '\u043a\u043e\u0442', '\u043e\u043b\u0435\u043d\u044c', '\u0441\u043e\u0431\u0430\u043a\u0430', '\u043b\u044f\u0433\u0443\u0448\u043a\u0430', '\u043b\u043e\u0448\u0430\u0434\u044c', '\u043a\u043e\u0440\u0430\u0431\u043b\u044c', '\u0433\u0440\u0443\u0437\u043e\u0432\u0438\u043a']","9c83f771":"\"\"\"\u0422\u0430\u043a \u043a\u0430\u043a \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043d\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0442\u0430\u0431\u043b\u0438\u0446, \u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043c\u0435\u0440\u043d\u044b\u0445 \u0442\u0435\u043d\u0437\u043e\u0440\u043e\u0432 numpy,\n\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044e numpy load()\"\"\"\nX_train = np.load('\/kaggle\/input\/dl-urfu-cifar10\/train.npy')\nY_train = np.load('\/kaggle\/input\/dl-urfu-cifar10\/train_label.npy')\nX_test = np.load('\/kaggle\/input\/dl-urfu-cifar10\/\/test.npy')\nX_train.shape, Y_train.shape, X_test.shape","ebe1b311":"plt.figure(figsize=(10,10))\nfor i in range(100,150):\n    plt.subplot(5,10,i-100+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(X_train[i])\n    plt.xlabel(classes[Y_train[i][0]])","05d4859f":"x_train = X_train \/ 255\nx_test = X_test \/ 255","571a7220":"y_train = utils.to_categorical(Y_train, 10)","9706a6e7":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c\nmodel = Sequential()\n# \u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0439\nmodel.add(Conv2D(32, (3, 3), padding='same',\n                        input_shape=(32, 32, 3), activation='relu'))\n# \u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0439\nmodel.add(Conv2D(32, (3, 3), activation='relu', padding='same'))\n# \u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u043b\u043e\u0439 \u043f\u043e\u0434\u0432\u044b\u0431\u043e\u0440\u043a\u0438\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n# \u0421\u043b\u043e\u0439 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 Dropout\nmodel.add(Dropout(0.1))\n\n# \u0422\u0440\u0435\u0442\u0438\u0439 \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0439\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n# \u0421\u043b\u043e\u0439 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 Dropout\nmodel.add(Dropout(0.1))\n\n# \u0421\u043b\u043e\u0439 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 2D \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043f\u043b\u043e\u0441\u043a\u043e\u0435\nmodel.add(Flatten())\n# \u041f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043b\u043e\u0439 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\nmodel.add(Dense(512, activation='relu'))\n# \u0421\u043b\u043e\u0439 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 Dropout\nmodel.add(Dropout(0.3))\n# \u0412\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043b\u043e\u0439\nmodel.add(Dense(10, activation='softmax'))","8898b9ed":"model.summary()","9e345bb8":"model.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","af03208f":"history = model.fit(x_train, y_train,\n              batch_size=128,\n              epochs=20,\n              validation_split=0.1,\n              verbose=2)","80e706c2":"plt.plot(history.history['accuracy'], \n         label='\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.plot(history.history['val_accuracy'], \n         label='\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.xlabel('\u042d\u043f\u043e\u0445\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f')\nplt.ylabel('\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432')\nplt.legend()\nplt.show()","ca01a258":"plt.plot(history.history['loss'], \n         label='\u041e\u0448\u0438\u0431\u043a\u0430 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.plot(history.history['val_loss'], \n         label='\u041e\u0448\u0438\u0431\u043a\u0430 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.xlabel('\u042d\u043f\u043e\u0445\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f')\nplt.ylabel('\u041e\u0448\u0438\u0431\u043a\u0430')\nplt.legend()\nplt.show()","54ac31c0":"\"\"\"\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u043e \u0432\u0441\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c\"\"\"\npredictions = model.predict(x_test)\n\"\"\"\u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u043f\u043e \u0432\u0441\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430\"\"\"\npredictions = np.argmax(predictions, axis=1)\npredictions","6c5e9b3b":"\"\"\"\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0430\u0439\u043b \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0438 \u043f\u0438\u0448\u0435\u043c \u0432 \u043d\u0435\u0433\u043e \u043d\u0430\u0448\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\"\"\"\nsample_submission = pd.read_csv('\/kaggle\/input\/dl-urfu-cifar10\/sample_submission.csv')\nsample_submission['label'] = predictions","3c3ec7d3":"\"\"\"to_csv - \u043f\u0438\u0448\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b '.csv' \"\"\"\nsample_submission.to_csv('sample_submission.csv', index=False)","109919d7":"## \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430 \u043d\u0430 liderboard","035050f2":"**\u041a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u0443\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c**","a45e5e1b":"**\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 liderboard**","0382606a":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","b9c60bc5":"**\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435**","0b7acac2":"**\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445**","560c1451":"**\u041f\u0438\u0448\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0432 \u0448\u0430\u0431\u043b\u043e\u043d \"sample_submission\"**","5edf9035":"## \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0443\u044e \u0441\u0435\u0442\u044c","42016b2a":"## \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0443\u044e \u0441\u0435\u0442\u044c","c9e40577":"## \u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u043a\u0430\u0447\u0435\u0442\u0441\u0432\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0442\u0438","21f98dd2":"**\u041f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0442\u0438**","a145ca4f":"# \u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 CIFAR-10\n\n\u0423\u0447\u0435\u0431\u043d\u044b\u0439 \u043a\u0443\u0440\u0441 \"[\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0445 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439 \u043d\u0430 Python](https:\/\/openedu.ru\/course\/urfu\/PYDNN\/)\".","73a90415":"**\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 one hot encoding**","eac1e187":"**\u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445**"}}