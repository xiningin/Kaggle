{"cell_type":{"4463b14e":"code","a87ab091":"code","7740f455":"code","8f85a572":"code","541a4d83":"code","a748c104":"code","e142fb2c":"code","72bf7c3f":"code","57c3aae9":"code","79a3817e":"code","517f6468":"code","35fde9df":"code","51a32171":"code","3b068e10":"code","e544f6b6":"code","9e8c9d13":"code","6394cafc":"code","59242f9f":"code","e1021c81":"code","9713aca6":"code","3618c6a3":"code","04c20016":"code","31dff327":"code","e4b95ac0":"code","16a2d403":"code","12efe14a":"markdown","2325c7bb":"markdown"},"source":{"4463b14e":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense","a87ab091":"df = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ndf.head()","7740f455":"plt.hist(df['Target'].astype(str))\nplt.title('Target histogram')\nplt.ylabel('Count')\nplt.xlabel('Class')\nplt.show()","8f85a572":"for feature in df.columns:\n    print (feature)","541a4d83":"# sns.barplot(x=train_null_non_zero, y=train_null_non_zero.index)\n# _ = plt.title('Fraction of NaN values, %')","a748c104":"train_null = df.isnull().sum()\ntrain_null_non_zero = train_null[train_null>0] \/ df.shape[0]","e142fb2c":"train_null_non_zero","72bf7c3f":"df = df.fillna(df.mean())\ntest = test.fillna(test.mean())","57c3aae9":"y = df['Target']\nX = df.drop(['Target', 'Id'], axis=1)\ntest_id = test['Id']\ntest.drop('Id', axis=1, inplace=True)","79a3817e":"train_test_df = pd.concat([X, test], axis=0)\ncols = [col for col in train_test_df.columns if train_test_df[col].dtype == 'object']\n\nle = LabelEncoder()\nfor col in cols:\n    le.fit(train_test_df[col])\n    X[col] = le.transform(X[col])\n    test[col] = le.transform(test[col])","517f6468":"y.unique()","35fde9df":"y_test_classes = pd.get_dummies(y,prefix=['Target'])","51a32171":"from xgboost import XGBClassifier\nfrom xgboost import plot_importance","3b068e10":"\n# fit model no training data\nmodel = XGBClassifier()\nmodel.fit(X, y)\n# plot feature importance\n","e544f6b6":"plt.rcParams[\"figure.figsize\"] = (15,20)\nplot_importance(model)\nplt.show()","9e8c9d13":"# Y = df[['Target']].values","6394cafc":"X_train,X_test,Y_train,Y_test = train_test_split(X,y_test_classes,test_size=0.2)","59242f9f":"print(X_train.shape,Y_train.shape)","e1021c81":"def get_model(n_x, n_h1, n_h2,n_h3):\n    \n    model = tf.keras.Sequential()\n    model.add(tf.keras.layers.Dense(n_h1, input_dim=n_x, activation='relu'))\n    model.add(tf.keras.layers.Dense(n_h2, activation='relu'))\n    model.add(tf.keras.layers.Dense(n_h3, activation='relu'))\n    model.add(tf.keras.layers.Dropout(0.5))\n    model.add(tf.keras.layers.Dense(4, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    print(model.summary())\n    \n    return model","9713aca6":"(m,n_x) = X.shape\nn_h1 = 256\nn_h2 = 1024\nn_h3 = 512\nbatch_size = 128\nepochs = 150\n\nprint(n_x)","3618c6a3":"model = get_model(n_x, n_h1, n_h2, n_h3)","04c20016":"# Set a learning rate annealer\nlearning_rate_reduction = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.6, \n                                            min_lr=0.0001)\n\n# Set EarlyStopping\nEStop = tf.keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=0,patience=20, verbose=2,\n                      mode='auto')\n\nhistory = model.fit(X,y_test_classes,validation_data=(X_test,Y_test),\n                    epochs=epochs, batch_size=batch_size, \n                    callbacks=[learning_rate_reduction, EStop],verbose=2)","31dff327":"y_predict = model.predict(test)","e4b95ac0":"y_predict= pd.Series([np.argmax(x)+1 for x in y_predict])","16a2d403":"pred = pd.DataFrame({\"Id\": test_id, \"Target\": y_predict})\npred.to_csv('submission.csv', index=False)\npred.head()","12efe14a":"## Feature importance","2325c7bb":"## Neural Network Model"}}