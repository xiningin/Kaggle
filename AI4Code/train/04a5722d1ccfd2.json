{"cell_type":{"a3c8b018":"code","5bd9fac5":"code","d79f37d6":"code","3aab5879":"code","b009cce5":"code","6d584db4":"code","14cb1e94":"code","6d4eb2a0":"code","040bf71e":"code","c55ebed2":"code","626828e9":"code","a566c75a":"code","68e98d4f":"code","edd21252":"code","f716993a":"code","9dfd3eb7":"code","aa895fc7":"code","aa878fc4":"code","14769b2e":"code","bddc7081":"code","e47ca24e":"code","682cf244":"code","52b45c93":"code","84476515":"code","f8fa357f":"markdown","56ea3461":"markdown","f7598c0b":"markdown"},"source":{"a3c8b018":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()","5bd9fac5":"train = pd.read_csv('\/kaggle\/input\/advanced-dls-spring-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/advanced-dls-spring-2021\/test.csv')\nprint(train.shape)\ntrain.head()","d79f37d6":"train.isnull().sum()","3aab5879":"train.dtypes","b009cce5":"# The feature TotalSpent consists numerical values in string format\n# Let's convert it to float64 type if possible, if not possible place np.nan value there\ndef fill_nans(df, feature):\n    df[feature] = df[feature].apply(lambda x: x if x.replace('.', '').isnumeric() else np.nan)\n    df[feature] = df[feature].astype(np.float64)\n    val = df[feature].median()\n    df[feature] = df[feature].fillna(value=val)","6d584db4":"fill_nans(df=train, feature='TotalSpent')","14cb1e94":"# Churn not churn\ndata = train['Churn'].value_counts().to_frame().T\n\nax = sns.barplot(data=data);\nax.set_xlabel('Client status');\nax.set_xticklabels(['Stayed', 'Refuced services']);\nax.set_ylabel('Count');","6d4eb2a0":"# Total spendings\nfig, ax = plt.subplots(1, 3, figsize=(15, 5))\n\nsns.histplot(ax=ax[0], x=train['MonthlySpending'], bins=30);\nax[0].set_title('MonthlySpending');\n\nsns.histplot(ax=ax[1], x=train['TotalSpent'], bins=30);\nax[1].set_title('TotalSpent');\n\nsns.histplot(ax=ax[2], x=train['ClientPeriod'], bins=30);\nax[2].set_title('ClientPeriod');","040bf71e":"# Numerical and Categorical features\nnumerical_features = ['MonthlySpending', 'TotalSpent', 'ClientPeriod']\ncategorical_features = list(train.columns)\n\nfor el in numerical_features + ['Churn']:\n    categorical_features.remove(el)","c55ebed2":"features = numerical_features + categorical_features\ntarget = 'Churn'","626828e9":"# Detecting outliers\nfig, ax = plt.subplots(1, 3, figsize=(12, 5))\n\nsns.violinplot(ax=ax[0], y=train[numerical_features[0]]);\nsns.violinplot(ax=ax[1], y=train[numerical_features[1]]);\nsns.violinplot(ax=ax[2], y=train[numerical_features[2]]);\n\nax[0].set_title(numerical_features[0]);\nax[1].set_title(numerical_features[1]);\nax[2].set_title(numerical_features[2]);\n\nplt.tight_layout()","a566c75a":"# Making Pipeline\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV","68e98d4f":"num_transformer = Pipeline(\n    steps=[\n        ('scaler', StandardScaler()),\n    ]\n)\n\ncat_transformer = Pipeline(\n    steps=[\n        ('ohe', OneHotEncoder()),\n    ]\n)\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', num_transformer, numerical_features),\n        ('cat', cat_transformer, categorical_features),\n    ]\n)\n\nclf = LogisticRegression(\n    max_iter=250,\n)\n\ncv = GridSearchCV(\n    estimator=clf,\n    param_grid={'C': [1000, 500, 250, 100, 50, 10, 5, 1, 0.1, 0.01, 0.001]},\n    scoring='roc_auc',\n    refit=True,\n)\n\npipe = Pipeline(\n    steps=[\n        ('preprocessor', preprocessor),\n        ('classifier', cv)\n    ]\n)","edd21252":"pipe.fit(train[features], train[target]);","f716993a":"# Best score - roc_auc value calculated with best parameters \n# and averaged across all validation batches\npipe['classifier'].best_score_","9dfd3eb7":"# Pipeline score - roc_auc score calculated with best parameters across all data\npipe.score(train[features], train[target])","aa895fc7":"# Plotting roc curve\nfrom sklearn.metrics import roc_curve\nfpr, tpr, _ = roc_curve(train[target], pipe.predict_proba(train[features])[:, 1])","aa878fc4":"sns.lineplot(x=fpr, y=tpr);","14769b2e":"pipe['classifier'].best_estimator_","bddc7081":"test.head()","e47ca24e":"test.isnull().sum()","682cf244":"test.dtypes","52b45c93":"fill_nans(df=test, feature='TotalSpent')","84476515":"y_pred = pipe.predict(test[features])","f8fa357f":"# EDA","56ea3461":"# Building model","f7598c0b":"# Prediction"}}