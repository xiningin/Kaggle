{"cell_type":{"159888e8":"code","a2a6e525":"code","f1c66262":"code","9c2828bb":"code","bab4493a":"code","6f3e485f":"code","46cf7f95":"code","d684dc2a":"code","656f92f9":"code","55345152":"code","62bf7dd5":"code","233e75f0":"code","37601d6a":"markdown","948e517e":"markdown","3586640d":"markdown","ef72cb4a":"markdown","eb544990":"markdown","6767f5b4":"markdown","64ced559":"markdown","e01d1261":"markdown","eea462d7":"markdown"},"source":{"159888e8":"!pip install -q quick-ml","a2a6e525":"import tensorflow as tf\nimport quick_ml","f1c66262":"import pandas as pd","9c2828bb":"df = pd.read_csv('..\/input\/dog-breed-identification\/labels.csv')","bab4493a":"df['id'] = df['id'].apply(lambda x : x + '.jpg')","6f3e485f":"df","46cf7f95":"df.columns = ['Image', 'Id']","d684dc2a":"df","656f92f9":"df.to_csv('train.csv', index = False)","55345152":"train = pd.read_csv('train.csv')\ntrain","62bf7dd5":"from quick_ml.tfrecords_maker import create_split_tfrecords_from_csv\n\n","233e75f0":"DATA_DIR = '..\/input\/dog-breed-identification\/train'\ncsv_path = '.\/train.csv'\noutfile1name = 'train.tfrecords'\noutfile2name = 'val.tfrecords'\nsplit_size_ratio = 0.7\n\ncreate_split_tfrecords_from_csv(DATA_DIR,csv_path,  outfile1name, outfile2name, split_size_ratio, IMAGE_SIZE = (192,192))","37601d6a":"### Making TFRecords Data","948e517e":"##### Parameters -> \n\n* DATA_DIR -> The image directory\n* csv_path -> path of the updated or processed csv file to be used by quick_ml. (That's why we saved the output in the above lines)\n* outfile1name -> Name of the training files you'd like to obtain\n* outfile2name -> Name of the validation files you'd like to obtain\n* split_size_ratio -> ratio in which the dataset has to be divided between the above two files\n* IMAGE_SIZE -> Output Image Size in the TFRecords Dataset.","3586640d":"After processing our CSV File, we can begin generating TFRecords Files from CSV. <br>\n<br>\n##### We'll be using quick_ml's create_split_tfrecords_from_csv\n\ncreate_split_tfrecords_from_csv generates TFRecords Dataset if the dataset has a CSV file of the same format as demanded by quick_ml. To learn about the parameters or arguments needed, please visit this [site](https:\/\/antoreepjana.wixsite.com\/quick-ml\/making-custom-datasets-tfrecords) & search\/scroll down to create_split_tfrecords_from_csv.","ef72cb4a":"## Summary -> \n\nWe generated TFRecords Dataset Multi-parts using quick_ml for Dog Breed Identification. <br>","eb544990":"Install quick_ml & do the necessary imports. Please maintain the order of imports after the installation (TF then quick_ml)","6767f5b4":"#### Post-TFRecords Dataset Generation\n\nPlease ensure the following steps have been followed after obtaining TFRecords files:-\n\n* Create a New Public Dataset on Kaggle\n* In the description of the dataset, mention the class encodings. (find it in the output)\n* Mention the Labeled TFRecord Format in the description\n* Mention the Image Size in the TFRecords File (in our case, it would be 192x192)","64ced559":"Classification Image Data is majorly in two formats. Either it is the main data directory and sub-directories or sub-folders contain various classes and the images or there is a CSV file and there is no bifurcation in the main directory. The CSV file contains the image list and it's class labeling. <br>\n#### In this case, we've Images Data & CSV File containing the file name and it's class label.","e01d1261":"## Installation & Imports","eea462d7":"Our Dataset matches the Type 2 of the two types of data format supported by quick_ml. To learn more, click [here](https:\/\/antoreepjana.wixsite.com\/quick-ml\/making-custom-datasets-tfrecords) & scroll down to \"Creating Custom Labeled TFRecords Dataset with CSV File\" <br>\n#### Let's bring our Dataframe, df, in the same format as demanded by quick_ml. <br>\n* Filenames must have .jpg or .jpeg\n* Column Names should be ['Image','Id']"}}