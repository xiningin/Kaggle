{"cell_type":{"7e1379f0":"code","a84b1919":"code","7284f246":"code","df5bea64":"code","179f98ad":"code","e896b343":"code","30677e24":"code","96609b57":"code","800e0476":"code","bd45cc1c":"code","d732337e":"code","3559da9e":"code","08d83395":"code","86dc8240":"code","0c0c43dc":"code","0fe82c31":"code","2b9228aa":"code","f13ca75e":"code","76fe0d72":"code","8c9545ee":"code","c1e14b2c":"code","386d2800":"code","1aed6f12":"code","0d423914":"code","86783146":"code","fba87371":"code","6a97786c":"code","919d20ea":"code","18f97c11":"code","57b7deb0":"code","d816b69e":"code","d14409ec":"code","27959e55":"code","aa1b3b8d":"code","b3f49f53":"code","3f631c1f":"markdown","343ca8b8":"markdown","c1b40ed6":"markdown","17647eba":"markdown"},"source":{"7e1379f0":"from matplotlib import pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import minmax_scale\nfrom sklearn.feature_selection import RFECV\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport os, sys, csv","a84b1919":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\nprint(train.shape)\nprint(test.shape)","7284f246":"sex_pivot = train.pivot_table(index='Sex', values=\"Survived\")\nsex_pivot.plot.bar()\nplt.show()","df5bea64":"class_pivot = train.pivot_table(index='Pclass', values=\"Survived\")\nclass_pivot.plot.bar()\nplt.show()","179f98ad":"train['Age'].describe()","e896b343":"survived = train[train[\"Survived\"]==1]\ndied = train[train[\"Survived\"]==0]","30677e24":"survived[\"Age\"].plot.hist(alpha=0.5, color='red', bins=50)\ndied[\"Age\"].plot.hist(alpha=0.5, color='blue', bins=50)\nplt.legend(['Survived','Died'])\nplt.show()","96609b57":"def process_age(df, cut_points, label_names):\n    df[\"Age\"] = df[\"Age\"].fillna(-0.5)\n    df[\"Age_categories\"] = pd.cut(df[\"Age\"], cut_points, labels=label_names)\n    return df","800e0476":"cut_points = [-1,0,5,12,18,35,60,100]\nlabel_names = [\"Missing\",\"Infant\",\"Child\",\"Teenager\",\"Young Adult\",\"Adult\",\"Senior\"]\n\ntrain = process_age(train,cut_points,label_names)\ntest = process_age(test,cut_points,label_names)","bd45cc1c":"pivot = train.pivot_table(index='Age_categories', values='Survived')\npivot.plot.bar()\nplt.show()","d732337e":"train[\"Pclass\"].value_counts()","3559da9e":"def create_dummies(df,column_name):\n    dummies = pd.get_dummies(df[column_name],prefix=column_name)\n    df = pd.concat([df,dummies],axis=1)\n    return df","08d83395":"train = create_dummies(train,\"Pclass\")\ntest = create_dummies(test,\"Pclass\")\n\ntrain = create_dummies(train,\"Sex\")\ntest = create_dummies(test,\"Sex\")\n\ntrain = create_dummies(train,\"Age_categories\")\ntest = create_dummies(test,\"Age_categories\")","86dc8240":"columns = ['Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_female', 'Sex_male',\n       'Age_categories_Missing','Age_categories_Infant',\n       'Age_categories_Child', 'Age_categories_Teenager',\n       'Age_categories_Young Adult', 'Age_categories_Adult',\n       'Age_categories_Senior']\nlr = LogisticRegression()\nlr.fit(train[columns], train['Survived'])","0c0c43dc":"columns = ['Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_female', 'Sex_male',\n       'Age_categories_Missing','Age_categories_Infant',\n       'Age_categories_Child', 'Age_categories_Teenager',\n       'Age_categories_Young Adult', 'Age_categories_Adult',\n       'Age_categories_Senior']\nall_X = train[columns]\nall_y = train['Survived']\n\ntrain_X, test_X, train_y, test_y = train_test_split(\n    all_X, all_y, test_size=0.20,random_state=0)","0fe82c31":"lr.fit(train_X, train_y)\npredictions = lr.predict(test_X)\naccuracy = accuracy_score(test_y, predictions)\nprint(accuracy*100)","2b9228aa":"lr = LogisticRegression()\nscores = cross_val_score(lr, all_X, all_y, cv=10)\naccuracy = np.mean(scores)\nprint(scores)\nprint(accuracy)","f13ca75e":"holdout = test\n\ncolumns = ['Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_female', 'Sex_male',\n       'Age_categories_Missing','Age_categories_Infant',\n       'Age_categories_Child', 'Age_categories_Teenager',\n       'Age_categories_Young Adult', 'Age_categories_Adult',\n       'Age_categories_Senior']\nlr = LogisticRegression()\nlr.fit(all_X,all_y)\nholdout_predictions = lr.predict(holdout[columns])\n","76fe0d72":"holdout_ids = holdout[\"PassengerId\"]\n# submission_df = {\"PassengerId\": holdout_ids,\n#                  \"Survived\": holdout_predictions}\n# submission = pd.DataFrame(submission_df)\n\n# submission.to_csv(\"submission.csv\",index=False)\n# submission.head()","8c9545ee":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nholdout = pd.read_csv(\"..\/input\/titanic\/test.csv\")","c1e14b2c":"def process_age(df):\n    df[\"Age\"] = df[\"Age\"].fillna(-0.5)\n    cut_points = [-1,0,5,12,18,35,60,100]\n    label_names = [\"Missing\",\"Infant\",\"Child\",\"Teenager\",\"Young Adult\",\"Adult\",\"Senior\"]\n    df[\"Age_categories\"] = pd.cut(df[\"Age\"],cut_points,labels=label_names)\n    return df\n\ndef create_dummies(df,column_name):\n    dummies = pd.get_dummies(df[column_name],prefix=column_name)\n    df = pd.concat([df,dummies],axis=1)\n    return df","386d2800":"train = process_age(train)\nholdout = process_age(holdout)","1aed6f12":"for column in [\"Age_categories\",\"Pclass\",\"Sex\"]:\n    train = create_dummies(train,column)\n    holdout = create_dummies(holdout,column)","0d423914":"holdout[\"Fare\"] = holdout[\"Fare\"].fillna(train[\"Fare\"].mean())\ncolumns = [\"SibSp\",\"Parch\",\"Fare\"]\n\ntrain[\"Embarked\"] = train[\"Embarked\"].fillna(\"S\")\nholdout[\"Embarked\"] = holdout[\"Embarked\"].fillna(\"S\")\n\ntrain = create_dummies(train,\"Embarked\")\nholdout = create_dummies(holdout,\"Embarked\")\n\nfor col in columns:\n    train[col + \"_scaled\"] = minmax_scale(train[col])\n    holdout[col + \"_scaled\"] = minmax_scale(holdout[col])","86783146":"columns = ['Age_categories_Missing', 'Age_categories_Infant',\n       'Age_categories_Child', 'Age_categories_Teenager',\n       'Age_categories_Young Adult', 'Age_categories_Adult',\n       'Age_categories_Senior', 'Pclass_1', 'Pclass_2', 'Pclass_3',\n       'Sex_female', 'Sex_male', 'Embarked_C', 'Embarked_Q', 'Embarked_S',\n       'SibSp_scaled', 'Parch_scaled', 'Fare_scaled']\nlr = LogisticRegression()\nlr.fit(train[columns],train['Survived'])\n\ncoefficients = lr.coef_\n\nfeature_importance = pd.Series(coefficients[0],\n                               index=train[columns].columns)\nfeature_importance.plot.barh()\nplt.show()","fba87371":"ordered_feature_importance = feature_importance.abs().sort_values()\nordered_feature_importance.plot.barh()\nplt.show()","6a97786c":"columns = ['Age_categories_Infant', 'SibSp_scaled', 'Sex_female', 'Sex_male',\n       'Pclass_1', 'Pclass_3', 'Age_categories_Senior', 'Parch_scaled']\nall_X = train[columns]\nall_y = train['Survived']\n\nlr = LogisticRegression()\nscores = cross_val_score(lr, all_X, all_y, cv=10)\naccuracy = scores.mean()\nprint(accuracy)","919d20ea":"columns = ['Age_categories_Infant', 'SibSp_scaled', 'Sex_female', 'Sex_male',\n       'Pclass_1', 'Pclass_3', 'Age_categories_Senior', 'Parch_scaled']\n\nall_X = train[columns]\nall_y = train['Survived']\nlr = LogisticRegression()\nlr.fit(all_X,all_y)\nholdout_predictions = lr.predict(holdout[columns])","18f97c11":"def process_age(df,cut_points,label_names):\n    df[\"Age\"] = df[\"Age\"].fillna(-0.5)\n    df[\"Age_categories\"] = pd.cut(df[\"Age\"],cut_points,labels=label_names)\n    return df\ndef process_fare(df,cut_points,label_names):\n    df[\"Fare_categories\"] = pd.cut(df[\"Fare\"],cut_points,labels=label_names)\n    return df\n\ncut_points = [0,12,50,100,1000]\nlabel_names = [\"0-12\",\"12-50\",\"50-100\",\"100+\"]\n\ntrain = process_fare(train,cut_points,label_names)\nholdout = process_fare(holdout,cut_points,label_names)\n\ntrain = create_dummies(train,\"Fare_categories\")\nholdout = create_dummies(holdout,\"Fare_categories\")","57b7deb0":"titles = {\n    \"Mr\" :         \"Mr\",\n    \"Mme\":         \"Mrs\",\n    \"Ms\":          \"Mrs\",\n    \"Mrs\" :        \"Mrs\",\n    \"Master\" :     \"Master\",\n    \"Mlle\":        \"Miss\",\n    \"Miss\" :       \"Miss\",\n    \"Capt\":        \"Officer\",\n    \"Col\":         \"Officer\",\n    \"Major\":       \"Officer\",\n    \"Dr\":          \"Officer\",\n    \"Rev\":         \"Officer\",\n    \"Jonkheer\":    \"Royalty\",\n    \"Don\":         \"Royalty\",\n    \"Sir\" :        \"Royalty\",\n    \"Countess\":    \"Royalty\",\n    \"Dona\":        \"Royalty\",\n    \"Lady\" :       \"Royalty\"\n}\n\nextracted_titles = train[\"Name\"].str.extract(' ([A-Za-z]+)\\.',expand=False)\ntrain[\"Title\"] = extracted_titles.map(titles)\nextracted_titles = holdout[\"Name\"].str.extract(' ([A-Za-z]+)\\.',expand=False)\nholdout[\"Title\"] = extracted_titles.map(titles)\n\ntrain[\"Cabin_type\"] = train[\"Cabin\"].str[0]\ntrain[\"Cabin_type\"] = train[\"Cabin_type\"].fillna(\"Unknown\")\n\nholdout[\"Cabin_type\"] = holdout[\"Cabin\"].str[0]\nholdout[\"Cabin_type\"] = holdout[\"Cabin_type\"].fillna(\"Unknown\")\n\nfor column in [\"Title\",\"Cabin_type\"]:\n    train = create_dummies(train,column)\n    holdout = create_dummies(holdout,column)","d816b69e":"plt.figure(figsize=(15,8))\ncorrelations = train.corr()\nsns.heatmap(correlations)\nplt.show()","d14409ec":"def plot_correlation_heatmap(df):\n    corr = df.corr()\n    \n    sns.set(style=\"white\")\n    mask = np.zeros_like(corr, dtype=np.bool)\n    mask[np.triu_indices_from(mask)] = True\n\n    f, ax = plt.subplots(figsize=(11, 9))\n    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n\n    sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n    plt.show()\n\ncolumns = ['Age_categories_Missing', 'Age_categories_Infant',\n       'Age_categories_Child', 'Age_categories_Teenager',\n       'Age_categories_Young Adult', 'Age_categories_Adult',\n       'Age_categories_Senior', 'Pclass_1', 'Pclass_2', 'Pclass_3',\n       'Sex_female', 'Sex_male', 'Embarked_C', 'Embarked_Q', 'Embarked_S',\n       'SibSp_scaled', 'Parch_scaled', 'Fare_categories_0-12',\n       'Fare_categories_12-50','Fare_categories_50-100', 'Fare_categories_100+',\n       'Title_Master', 'Title_Miss', 'Title_Mr','Title_Mrs', 'Title_Officer',\n       'Title_Royalty', 'Cabin_type_A','Cabin_type_B', 'Cabin_type_C', 'Cabin_type_D',\n       'Cabin_type_E','Cabin_type_F', 'Cabin_type_G', 'Cabin_type_T', 'Cabin_type_Unknown']\nplot_correlation_heatmap(train[columns])","27959e55":"columns = ['Age_categories_Missing', 'Age_categories_Infant',\n       'Age_categories_Child', 'Age_categories_Young Adult',\n       'Age_categories_Adult', 'Age_categories_Senior', 'Pclass_1', 'Pclass_3',\n       'Embarked_C', 'Embarked_Q', 'Embarked_S', 'SibSp_scaled',\n       'Parch_scaled', 'Fare_categories_0-12', 'Fare_categories_50-100',\n       'Fare_categories_100+', 'Title_Miss', 'Title_Mr', 'Title_Mrs',\n       'Title_Officer', 'Title_Royalty', 'Cabin_type_B', 'Cabin_type_C',\n       'Cabin_type_D', 'Cabin_type_E', 'Cabin_type_F', 'Cabin_type_G',\n       'Cabin_type_T', 'Cabin_type_Unknown']\n\nall_X = train[columns]\nall_y = train[\"Survived\"]\nlr = LogisticRegression()\nselector = RFECV(lr,cv=10)\nselector.fit(all_X,all_y)\n\noptimized_columns = all_X.columns[selector.support_]","aa1b3b8d":"all_X = train[optimized_columns]\nall_y = train[\"Survived\"]\nlr = LogisticRegression()\nscores = cross_val_score(lr, all_X, all_y, cv=10)\naccuracy = scores.mean()\naccuracy","b3f49f53":"lr = LogisticRegression()\nlr.fit(all_X,all_y)\nholdout_predictions = lr.predict(holdout[optimized_columns])\n\nholdout_ids = holdout[\"PassengerId\"]\nsubmission_df = {\"PassengerId\": holdout_ids,\n                 \"Survived\": holdout_predictions}\nsubmission = pd.DataFrame(submission_df)\n\nsubmission.to_csv(\"submission_2.csv\",index=False)","3f631c1f":"### About the mission and the dataset\nThe dataset is form kaggle and it is about all the passangers who died with Titanic accident. The main focus for the kernel is find out will passanger survive or not based on their age and so many other proeprties. This is a classification problem, thats why I apply logistic regression machine learning algorithm to make the prediction","343ca8b8":"### wow! we have got accuracy 0.8226 which is much higher than before","c1b40ed6":"#### It is important to increase accurecy. Lets do it","17647eba":"For more accuracy we need to update some of ours methods like `process_age`, `create_dummies`"}}