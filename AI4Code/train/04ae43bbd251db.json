{"cell_type":{"a2e39d55":"code","8b6c31a1":"code","1b56ae48":"code","76bb8910":"code","c8e5cade":"code","b481efde":"code","8bd70e92":"code","effb9966":"code","a6abe703":"markdown"},"source":{"a2e39d55":"!pip install git+https:\/\/www.github.com\/keras-team\/keras-contrib.git","8b6c31a1":"from os import listdir\nfrom numpy import asarray\nfrom numpy import vstack\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import load_img\nfrom numpy import savez_compressed\nfrom numpy import load\nfrom matplotlib import pyplot\nfrom random import random\nfrom numpy import load\nfrom numpy import zeros\nfrom numpy import ones\nfrom numpy import asarray\nfrom numpy.random import randint\nfrom keras.optimizers import Adam\nfrom keras.initializers import RandomNormal\nfrom keras.models import Model\nfrom keras.models import Input\nfrom keras.layers import Conv2D\nfrom keras.layers import Conv2DTranspose\nfrom keras.layers import LeakyReLU\nfrom keras.layers import Activation\nfrom keras.layers import Concatenate\nfrom matplotlib import pyplot\nfrom keras.models import load_model\nfrom numpy import load\nfrom numpy import vstack\nfrom matplotlib import pyplot\nfrom numpy.random import randint\nfrom keras_contrib.layers.normalization.instancenormalization import InstanceNormalization","1b56ae48":"# load and prepare training images\ndef load_real_samples(filename):\n    # load the dataset\n    data = load(filename)\n    # unpack arrays\n    X1, X2 = data['arr_0'], data['arr_1']\n    # scale from [0,255] to [-1,1]\n    X1 = (X1 - 127.5) \/ 127.5\n    X2 = (X2 - 127.5) \/ 127.5\n    return [X1, X2]","76bb8910":"# select a random sample of images from the dataset\ndef select_sample(dataset, n_samples):\n    # choose random instances\n    ix = randint(0, dataset.shape[0], n_samples)\n    # retrieve selected images\n    X = dataset[ix]\n    return X","c8e5cade":"# plot the image, the translation, and the reconstruction\ndef show_plot(imagesX, imagesY1, imagesY2):\n    images = vstack((imagesX, imagesY1, imagesY2))\n    titles = ['Real', 'Generated', 'Reconstructed']\n    # scale from [-1,1] to [0,1]\n    images = (images + 1) \/ 2.0\n    # plot images row by row\n    for i in range(len(images)):\n        # define subplot\n        pyplot.subplot(1, len(images), 1 + i)\n        # turn off axis\n        pyplot.axis('off')\n        # plot raw pixel data\n        pyplot.imshow(images[i])\n        # title\n        pyplot.title(titles[i])\n    pyplot.show()","b481efde":"# loading the dataset\nA_data, B_data = load_real_samples('\/kaggle\/input\/kernel7f78b4af3b\/apple2orange_256.npz')\nprint('Loaded', A_data.shape, B_data.shape)","8bd70e92":"# load the models\ncust = {'InstanceNormalization': InstanceNormalization}\nmodel_AtoB = load_model('\/kaggle\/input\/kernel7f78b4af3b\/g_model_AtoB_025220.h5', cust,compile=\"False\")\nmodel_BtoA = load_model('\/kaggle\/input\/kernel7f78b4af3b\/g_model_BtoA_025220.h5', cust,compile=\"False\")","effb9966":"# plot A->B->A\nA_real = select_sample(A_data, 1)\nB_generated  = model_AtoB.predict(A_real)\nA_reconstructed = model_BtoA.predict(B_generated)\nshow_plot(A_real, B_generated, A_reconstructed)\n# plot B->A->B\nB_real = select_sample(B_data, 1)\nA_generated  = model_BtoA.predict(B_real)\nB_reconstructed = model_AtoB.predict(A_generated)\nshow_plot(B_real, A_generated, B_reconstructed)","a6abe703":"Implementation of instance normalization "}}