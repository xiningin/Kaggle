{"cell_type":{"270ad60a":"code","dbe2dd16":"code","5fe04301":"code","5632e23e":"code","3542c57e":"code","cf6e8021":"code","376e01a6":"code","803d0fbe":"code","a6e21b44":"code","0ca4c0c2":"code","2f78a35d":"code","63b85d49":"code","525e6c35":"code","4a7704cc":"code","07449608":"code","a3382c11":"code","aa1cbc7f":"code","8fb39989":"code","769d013e":"code","0ca57fb6":"code","d1c2691d":"code","075daa55":"code","43cf62e9":"code","f1091384":"code","8a6bf337":"code","8ed8628f":"code","eaccbc70":"code","f6580d63":"code","2682157f":"markdown","94bdb3fe":"markdown"},"source":{"270ad60a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score,recall_score,precision_score,confusion_matrix,f1_score\nfrom IPython.display import Image  \nfrom sklearn import tree\nimport os\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Any results you write to the current directory are saved as output.","dbe2dd16":"train= pd.read_csv('..\/input\/train.csv')\ntest =pd.read_csv('..\/input\/test.csv')","5fe04301":"train.Sex[train.Sex=='male']=0\ntrain.Sex[train.Sex=='female']=1\ntest.Sex[test.Sex=='male']=0\ntest.Sex[test.Sex=='female']=1","5632e23e":"train.head(4)","3542c57e":"PassangerID= test.PassengerId\ntrain['Embarked'].value_counts()","cf6e8021":"PassangerID.head()","376e01a6":"plt.figure(figsize=(25,10))\nsns.barplot(train['Age'],train['Survived'], ci=None)\nplt.xticks(rotation=90);\n","803d0fbe":"train.Age[train.Pclass == 1].plot(kind='kde')    \ntrain.Age[train.Pclass == 2].plot(kind='kde')\ntrain.Age[train.Pclass == 3].plot(kind='kde')\n # plots an axis lable\nplt.xlabel(\"Age\")    \nplt.title(\"Age Distribution within classes\")\n# sets our legend for our graph.\nplt.legend(('1st Class', '2nd Class','3rd Class'),loc='best') ;","a6e21b44":"limit_1 = 12\nlimit_2 = 50\n\nx_limit_1 = np.size(train[train['Age'] < limit_1]['Age'].unique())\nx_limit_2 = np.size(train[train['Age'] < limit_2]['Age'].unique())\ndf=train\n\nplt.figure(figsize=(25,10))\nsns.barplot(df['Age'],df['Survived'], ci=None)\n\nplt.axvspan(-1, x_limit_1, alpha=0.25, color='green')\nplt.axvspan(x_limit_1, x_limit_2, alpha=0.25, color='red')\nplt.axvspan(x_limit_2, 100, alpha=0.25, color='yellow')\n\nplt.xticks(rotation=90);","0ca4c0c2":"plt.figure(figsize=(25,10))\nsns.barplot(df['Sex'],df['Survived'], ci=None)","2f78a35d":"plt.figure(figsize=(25,10))\nsns.barplot(df['Pclass'],df['Survived'], ci=None)","63b85d49":"full_data = [train, test]\n\n# Some features of my own that I have added in\n# Gives the length of the name\ntrain['Name_length'] = train['Name'].apply(len)\ntest['Name_length'] = test['Name'].apply(len)\ntrain['Has_Cabin'] = train[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\ntest['Has_Cabin'] = test[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\nfor dataset in full_data:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\nfor dataset in full_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\nfor dataset in full_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S') \nfor dataset in full_data:\n    dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())    \n    dataset['CategoricalFare'] = pd.qcut(train['Fare'], 4,labels= [1,2,3,4])\n    dataset['Age'] = dataset['Age'].fillna(dataset['Age'].median())\n","525e6c35":"train['Age'] = pd.cut(train['Age'], bins=[0, 12, 50, 200], labels=[1,2,3])\ntrain[\"Embarked\"][train[\"Embarked\"] == \"S\"] = 0\ntrain[\"Embarked\"][train[\"Embarked\"] == \"C\"] = 1\ntrain[\"Embarked\"][train[\"Embarked\"] == \"Q\"] = 2\ntest['Age'] = pd.cut(test['Age'], bins=[0, 12, 50, 200], labels=[1,2,3])\ntest[\"Embarked\"][test[\"Embarked\"] == \"S\"] = 0\ntest[\"Embarked\"][test[\"Embarked\"] == \"C\"] = 1\ntest[\"Embarked\"][test[\"Embarked\"] == \"Q\"] = 2\n","4a7704cc":"train.head()","07449608":"plt.figure(figsize=(25,10))\nsns.barplot(df['Name_length'],df['Survived'], ci=None)","a3382c11":"plt.figure(figsize=(25,10))\nsns.barplot(df['Has_Cabin'],df['Survived'], ci=None)","aa1cbc7f":"plt.figure(figsize=(25,10))\nsns.barplot(df['Embarked'],df['Survived'], ci=None)","8fb39989":"plt.figure(figsize=(25,10))\nsns.barplot(df['CategoricalFare'],df['Survived'], ci=None)\nplt.figure(figsize=(25,10))\nsns.barplot(df['IsAlone'],df['Survived'], ci=None)","769d013e":"train = train.drop(['PassengerId','Name','SibSp','Parch','Ticket','Fare','Cabin'], axis=1)\ntest = test.drop(['PassengerId','Name','SibSp','Parch','Ticket','Fare','Cabin'], axis=1)\n","0ca57fb6":"train.head()","d1c2691d":"x= train.iloc[:, 1:10].values\ny=train.iloc[:, 0].values\nx_pred= test.iloc[:, 0:9].values\n","075daa55":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test= train_test_split(x,y,test_size=1\/5,random_state = 0)\n","43cf62e9":"from sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state = 0)\nmodel=regressor.fit(x_train,y_train)","f1091384":"test.head()\n","8a6bf337":"y_pred=regressor.predict(x_test)\ny_pred[y_pred<0.5]=0\ny_pred[y_pred>=0.5]=1\ny_pred\n","8ed8628f":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n#print(\"accuracy score : \"+str(accuracy_score(y_test,y_pred))) #can be used too :)\nprint(\"precision score : \"+str(precision_score(y_test,y_pred)))","eaccbc70":"x_test[1]","f6580d63":"feat_names = x_test[1]\ntarg_names = [1,0]\nfrom sklearn.tree import DecisionTreeClassifier,export_graphviz\nimport graphviz\n\ndata = export_graphviz(model,out_file=None,feature_names=feat_names,class_names=targ_names,   \n                         filled=True, rounded=True,  \n                         special_characters=True)\ngraph = graphviz.Source(data)\ngraph \n","2682157f":"Categorizing the sex","94bdb3fe":"Visualizing age to divide age into 3 categories."}}