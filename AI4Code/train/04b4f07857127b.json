{"cell_type":{"77fab2af":"code","3e6e89f7":"code","7a7985e5":"code","f56f9df8":"code","443970a4":"code","31f85a29":"code","b8372b80":"code","344c4631":"code","43f3d775":"code","fa7fff7e":"code","e2410c12":"code","27fc00e5":"code","6bebc13f":"code","4502999f":"code","8b19dd7d":"code","6d884d45":"code","9b029fcf":"code","fe8a024c":"code","d68712b8":"code","333c1dec":"code","a60c3195":"code","5d0daf22":"code","c000392a":"code","d7cadbe7":"code","a32d9c1c":"code","46a2668f":"code","c04538c9":"code","8d6bd4ce":"code","dc79f3a6":"code","8f7d4c1d":"code","6fb734d7":"code","4f5dafee":"code","bb391144":"code","e722bd4b":"code","990d021b":"code","071c8d18":"code","7a8e53d9":"code","8326b9fb":"code","5d4c6c00":"code","0dc6f2a0":"code","2b85638c":"code","f0b3b90d":"code","80d4ae94":"code","5da8b0f7":"code","2f8dcd87":"code","00be799c":"code","2c6d2426":"code","5ff5fd39":"code","a1753479":"code","8874a81d":"code","1b019481":"code","9ae01a2a":"code","235ccdf7":"code","71efe6f6":"code","6de20b9f":"code","ca163252":"code","fc7f5f00":"code","aca962d3":"code","7247cecd":"code","6aa4d8c9":"code","a6bc70f1":"code","a8fd0da5":"code","93ff4725":"code","17f636ca":"code","6b933126":"code","c1082b59":"code","a984b641":"code","ea6374ae":"code","5ca4ba49":"code","6d14c341":"code","0bddcfbb":"code","ce6b46ee":"code","00bea55c":"code","23a59631":"code","0e357be2":"code","20ae1f17":"code","2c359c30":"markdown","0808214c":"markdown","25a900e6":"markdown","a6ac6da6":"markdown","3c980518":"markdown","08bc40cd":"markdown","1f7f8b73":"markdown","f3cae812":"markdown","f4e5cc6e":"markdown","e333da26":"markdown","d44fedbf":"markdown","3338c9c5":"markdown","dbc06dd1":"markdown","a714ba1e":"markdown","aafd4869":"markdown","15b253b1":"markdown","6902c6b9":"markdown","d360a305":"markdown","1288ce68":"markdown","6f742863":"markdown","73dc9050":"markdown","9c09065b":"markdown","aa657c07":"markdown","91c6efab":"markdown","8e44fc2d":"markdown","42747617":"markdown","14df189b":"markdown","7d2d38b9":"markdown","84b530bd":"markdown","bf16e823":"markdown","632b3039":"markdown","551d73a4":"markdown","f3293265":"markdown","b47a2fbc":"markdown","85e1de06":"markdown","3dcf021b":"markdown","8a6ee58b":"markdown","39f07c5d":"markdown","1e5d63bc":"markdown","6ae42670":"markdown","cb72199c":"markdown","a12870f9":"markdown","d9d6dec7":"markdown","c05ad9bc":"markdown","142fe83d":"markdown","e179b7c2":"markdown","c4429072":"markdown","dbec7d04":"markdown","fb20330c":"markdown","9e8a5766":"markdown","de24cd7a":"markdown","8a9c1c73":"markdown","ffb614a0":"markdown","c7964039":"markdown","0ad62baf":"markdown","e7fc9bdd":"markdown","e5701f84":"markdown","2e0d764c":"markdown","6c327b7a":"markdown","c341a25d":"markdown"},"source":{"77fab2af":"import pandas as pd \nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline \n#from bubbly.bubbly import bubbleplot \n#from __future__ import division\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\nIS_LOCAL = False\nimport os\nif(IS_LOCAL):\n    PATH=\"..\/input\/120-years-of-olympic-history-athlets-and-results\"\nelse:\n    PATH=\"..\/input\"\nprint(os.listdir(PATH))","3e6e89f7":"athlete_events_df = pd.read_csv(PATH+\"\/athlete_events.csv\")\nnoc_regions_df = pd.read_csv(PATH+\"\/noc_regions.csv\")","7a7985e5":"print(\"Athletes and Events data -  rows:\",athlete_events_df.shape[0],\" columns:\", athlete_events_df.shape[1])\nprint(\"NOC Regions data -  rows:\",noc_regions_df.shape[0],\" columns:\", noc_regions_df.shape[1])","f56f9df8":"athlete_events_df.head(5)","443970a4":"noc_regions_df.head(5)","31f85a29":"def missing_data(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    return pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data(athlete_events_df)","b8372b80":"missing_data(noc_regions_df)","344c4631":"tmp = athlete_events_df.groupby(['Year', 'City'])['Season'].value_counts()\ndf = pd.DataFrame(data={'Athlets': tmp.values}, index=tmp.index).reset_index()","43f3d775":"df.head(3)","fa7fff7e":"trace = go.Scatter(\n    x = df['Year'],\n    y = df['Athlets'],\n    name=\"Athlets per Olympic game\",\n    marker=dict(\n        color=\"Blue\",\n    ),\n    mode = \"markers\"\n)\ndata = [trace]\nlayout = dict(title = 'Athlets per Olympic game',\n          xaxis = dict(title = 'Year', showticklabels=True), \n          yaxis = dict(title = 'Number of athlets'),\n          hovermode = 'closest'\n         )\nfig = dict(data=data, layout=layout)\niplot(fig, filename='events-athlets1')","e2410c12":"dfS = df[df['Season']=='Summer']; dfW = df[df['Season']=='Winter']\n\ntraceS = go.Scatter(\n    x = dfS['Year'],y = dfS['Athlets'],\n    name=\"Summer Games\",\n    marker=dict(color=\"Red\"),\n    mode = \"markers+lines\"\n)\ntraceW = go.Scatter(\n    x = dfW['Year'],y = dfW['Athlets'],\n    name=\"Winter Games\",\n    marker=dict(color=\"Blue\"),\n    mode = \"markers+lines\"\n)\n\ndata = [traceS, traceW]\nlayout = dict(title = 'Athlets per Olympic game',\n          xaxis = dict(title = 'Year', showticklabels=True), \n          yaxis = dict(title = 'Number of athlets'),\n          hovermode = 'closest'\n         )\nfig = dict(data=data, layout=layout)\niplot(fig, filename='events-athlets2')","27fc00e5":"traceS = go.Scatter(\n    x = dfS['Year'],y = dfS['Athlets'],\n    name=\"Summer Games\",\n    marker=dict(color=\"Red\"),\n    mode = \"markers+lines\",\n    text=dfS['City'],\n)\ntraceW = go.Scatter(\n    x = dfW['Year'],y = dfW['Athlets'],\n    name=\"Winter Games\",\n    marker=dict(color=\"Blue\"),\n    mode = \"markers+lines\",\n    text=dfW['City']\n)\n\ndata = [traceS, traceW]\n\nfig = tools.make_subplots(rows=1, cols=2, subplot_titles=('Number athlets: Summer Games', 'Number athlets: Winter Games'))\nfig.append_trace(traceS, 1, 1)\nfig.append_trace(traceW, 1, 2)\n\niplot(fig, filename='events-athlets2')","6bebc13f":"tmp = athlete_events_df.groupby('Year')['City'].value_counts()\ndf2 = pd.DataFrame(data={'Athlets': tmp.values}, index=tmp.index).reset_index()\ndf2 = df2.merge(df)","4502999f":"iplot(ff.create_table(df2.head(3)), filename='jupyter-table2')","8b19dd7d":"dfS = df2[df2['Season']=='Summer']; dfW = df2[df2['Season']=='Winter']\n\ntraceS = go.Bar(\n    x = dfS['Year'],y = dfS['Athlets'],\n    name=\"Summer Games\",\n    marker=dict(color=\"Red\"),\n    text=dfS['City']\n)\ntraceW = go.Bar(\n    x = dfW['Year'],y = dfW['Athlets'],\n    name=\"Winter Games\",\n    marker=dict(color=\"Blue\"),\n    text=dfS['City']\n)\n\ndata = [traceS, traceW]\nlayout = dict(title = 'Athlets per Olympic game',\n          xaxis = dict(title = 'Year', showticklabels=True), \n          yaxis = dict(title = 'Number of athlets'),\n          hovermode = 'closest'\n         )\nfig = dict(data=data, layout=layout)\niplot(fig, filename='events-athlets3')","6d884d45":"traceS = go.Bar(\n    x = dfS['Year'],y = dfS['Athlets'],\n    name=\"Summer Games\",\n     marker=dict(\n                color='rgb(238,23,11)',\n                line=dict(\n                    color='black',\n                    width=0.75),\n                opacity=0.7,\n            ),\n    text=dfS['City'],\n    \n)\ntraceW = go.Bar(\n    x = dfW['Year'],y = dfW['Athlets'],\n    name=\"Winter Games\",\n    marker=dict(\n                color='rgb(11,23,245)',\n                line=dict(\n                    color='black',\n                    width=0.75),\n                opacity=0.7,\n            ),\n    text=dfS['City']\n)\n\ndata = [traceS, traceW]\nlayout = dict(title = 'Athlets per Olympic game',\n          xaxis = dict(title = 'Year', showticklabels=True), \n          yaxis = dict(title = 'Number of athlets'),\n          hovermode = 'closest',\n          barmode='stack'\n         )\nfig = dict(data=data, layout=layout)\niplot(fig, filename='events-athlets4')","9b029fcf":"traceS = go.Box(\n    x = dfS['Athlets'],\n    name=\"Summer Games\",\n    \n     marker=dict(\n                color='rgba(238,23,11,0.5)',\n                line=dict(\n                    color='red',\n                    width=1.2),\n            ),\n    text=dfS['City'],\n    orientation='h',\n    \n)\ntraceW = go.Box(\n    x = dfW['Athlets'],\n    name=\"Winter Games\",\n    marker=dict(\n                color='rgba(11,23,245,0.5)',\n                line=dict(\n                    color='blue',\n                    width=1.2),\n            ),\n    text=dfS['City'],  orientation='h',\n)\n\ndata = [traceS, traceW]\nlayout = dict(title = 'Athlets per Olympic game',\n          xaxis = dict(title = 'Number of athlets',showticklabels=True),\n          yaxis = dict(title = 'Season', showticklabels=True, tickangle=-90), \n          hovermode = 'closest',\n         )\nfig = dict(data=data, layout=layout)\niplot(fig, filename='events-athlets5')","fe8a024c":"tmp = athlete_events_df.groupby(['Year', 'City','Season'])['Sport'].nunique()\ndf = pd.DataFrame(data={'Sports': tmp.values}, index=tmp.index).reset_index()","d68712b8":"df.head(3)","333c1dec":"dfS = df[df['Season']=='Summer']; dfW = df[df['Season']=='Winter']\n\ntraceS = go.Bar(\n    x = dfS['Year'],y = dfS['Sports'],\n    name=\"Summer Games\",\n     marker=dict(\n                color='rgb(238,23,11)',\n                line=dict(\n                    color='red',\n                    width=1),\n                opacity=0.5,\n            ),\n    text= dfS['City'],\n)\ntraceW = go.Bar(\n    x = dfW['Year'],y = dfW['Sports'],\n    name=\"Winter Games\",\n    marker=dict(\n                color='rgb(11,23,245)',\n                line=dict(\n                    color='blue',\n                    width=1),\n                opacity=0.5,\n            ),\n    text=dfS['City']\n)\n\ndata = [traceS, traceW]\nlayout = dict(title = 'Sports per Olympic edition',\n          xaxis = dict(title = 'Year', showticklabels=True), \n          yaxis = dict(title = 'Number of sports'),\n          hovermode = 'closest',\n          barmode='stack'\n         )\nfig = dict(data=data, layout=layout)\niplot(fig, filename='events-sports1')","a60c3195":"tmp = athlete_events_df.groupby(['Year', 'City','Season'])['Sport'].value_counts()\ndf = pd.DataFrame(data={'Athlets': tmp.values}, index=tmp.index).reset_index()\ndf.head()","5d0daf22":"dfS = df[df['Season']=='Summer']; dfW = df[df['Season']=='Winter']\n\n\ntraceS = go.Scatter(\n    x = dfS['Year'],y = dfS['Athlets'],\n    name=\"Summer Games\",\n     marker=dict(\n                color='rgb(238,23,11)',\n                line=dict(\n                    color='red',\n                    width=1),\n                opacity=0.5,\n            ),\n    text= \"City:\"+dfS['City']+\" Sport:\"+dfS['Sport'],\n    mode = \"markers\"\n)\ntraceW = go.Scatter(\n    x = dfW['Year'],y = dfW['Athlets'],\n    name=\"Winter Games\",\n    marker=dict(\n                color='rgb(11,23,245)',\n                line=dict(\n                    color='blue',\n                    width=1),\n                opacity=0.5,\n            ),\n   text= \"City:\"+dfW['City']+\" Sport:\"+dfW['Sport'],\n    mode = \"markers\"\n)\n\ndata = [traceS, traceW]\nlayout = dict(title = 'Number of athlets per sport for each Olympic edition',\n          xaxis = dict(title = 'Year', showticklabels=True), \n          yaxis = dict(title = 'Number of athlets per sport'),\n          hovermode='closest'\n         )\nfig = dict(data=data, layout=layout)\niplot(fig, filename='events-sports1')","c000392a":"tmp = athlete_events_df.groupby(['Year', 'City','Season'])['Sport'].value_counts()\ndf = pd.DataFrame(data={'Athlets': tmp.values}, index=tmp.index).reset_index()\ndf.head(3)","d7cadbe7":"sports = (athlete_events_df.groupby(['Sport'])['Sport'].nunique()).index","a32d9c1c":"def draw_trace(dataset, sport):\n    dfS = dataset[dataset['Sport']==sport];\n    trace = go.Box(\n        x = dfS['Athlets'],\n        name=sport,\n         marker=dict(\n                    line=dict(\n                        color='black',\n                        width=0.8),\n                ),\n        text=dfS['City'], \n        orientation = 'h'\n    )\n    return trace\n\n\ndef draw_group(dataset, title,height=800):\n    data = list()\n    for sport in sports:\n        data.append(draw_trace(dataset, sport))\n\n\n    layout = dict(title = title,\n              xaxis = dict(title = 'Number of athlets',showticklabels=True),\n              yaxis = dict(title = 'Sport', showticklabels=True, tickfont=dict(\n                family='Old Standard TT, serif',\n                size=8,\n                color='black'),), \n              hovermode = 'closest',\n              showlegend=False,\n                  width=800,\n                  height=height,\n             )\n    fig = dict(data=data, layout=layout)\n    iplot(fig, filename='events-sports1')\n\n# select only Summer Olympics\ndf_S = df[df['Season']=='Summer']\n# draw the boxplots for the Summer Olympics\ndraw_group(df_S, \"Athlets per Sport (Summer Olympics)\")","46a2668f":"# select only Winter Olympics\ndf_W = df[df['Season']=='Winter']\n# draw the boxplots for the Summer Olympics\ndraw_group(df_W, \"Athlets per Sport (Winter Olympics)\",600)","c04538c9":"piv = pd.pivot_table(df_S, values=\"Athlets\",index=[\"Year\"], columns=[\"Sport\"], fill_value=0)\nm = piv.values","8d6bd4ce":"trace = go.Heatmap(z = m, y= list(piv.index), x=list(piv.columns),colorscale='Reds',reversescale=False)\ndata=[trace]\nlayout = dict(title = \"Number of athlets per year and sport (Summer Olympics)\",\n              xaxis = dict(title = 'Sport',\n                        showticklabels=True,\n                           tickangle = 45,\n                        tickfont=dict(\n                                size=10,\n                                color='black'),\n                          ),\n              yaxis = dict(title = 'Year', \n                        showticklabels=True, \n                        tickfont=dict(\n                            size=10,\n                            color='black'),\n                      ), \n              hovermode = 'closest',\n              showlegend=False,\n                  width=1000,\n                  height=800,\n             )\nfig = dict(data=data, layout=layout)\niplot(fig, filename='labelled-heatmap')","dc79f3a6":"piv = pd.pivot_table(df_W, values=\"Athlets\",index=[\"Year\"], columns=[\"Sport\"], fill_value=0)\nm = piv.values","8f7d4c1d":"trace = go.Heatmap(z = m, y= list(piv.index), x=list(piv.columns),colorscale='Blues',reversescale=True)\ndata=[trace]\nlayout = dict(title = \"Number of athlets per year and sport (Winter Olympics)\",\n              xaxis = dict(title = 'Sport',\n                        showticklabels=True,\n                           tickangle = 30,\n                        tickfont=dict(\n                                size=8,\n                                color='black'),\n                          ),\n              yaxis = dict(title = 'Year', \n                        showticklabels=True, \n                        tickfont=dict(\n                            size=10,\n                            color='black'),\n                      ), \n              hovermode = 'closest',\n              showlegend=False,\n                  width=800,\n                  height=800,\n             )\nfig = dict(data=data, layout=layout)\niplot(fig, filename='labelled-heatmap')","6fb734d7":"labels = ['Sunny side of pyramid','Shaddy side of pyramid','Sky']\nvalues = [300,150,1200]\ncolors = ['gold', 'brown', 'lightblue']\n\nBOTTOM_OF_THE_PYRAMID_ACCORDING_TO_NEWTON_LAWS = 220\n\ntrace = go.Pie(labels=labels, values=values,\n               hoverinfo='label', textinfo='none', \n               textfont=dict(size=20),\n               rotation=BOTTOM_OF_THE_PYRAMID_ACCORDING_TO_NEWTON_LAWS,\n               marker=dict(colors=colors, \n                           line=dict(color='#000000', width=1)))\niplot([trace], filename='styled_pie_chart')","4f5dafee":"tmp = athlete_events_df.groupby(['Season'])['Sport'].value_counts()\ndf = pd.DataFrame(data={'Athlets': tmp.values}, index=tmp.index).reset_index()\ndf.head(3)","bb391144":"df_S = df[df['Season']=='Summer']\n\ntrace = go.Pie(labels=df_S['Sport'], \n               values=df_S['Athlets'],\n               hoverinfo='label+value+percent', \n               textinfo='value+percent', \n               textfont=dict(size=8),\n               rotation=180,\n               marker=dict(colors=colors, \n\n                           line=dict(color='#000000', width=1)\n                        )\n            )\n\ndata = [trace]\nlayout = dict(title = \"Number of athlets per sport (Summer Olympics)\",\n                  width=800,\n                  height=1200,\n              legend=dict(orientation=\"h\")\n             )\nfig = dict(data=data,layout=layout)\niplot(fig, filename='styled_pie_chart')","e722bd4b":"df_S = df[df['Season']=='Winter']\n\ntrace = go.Pie(labels=df_S['Sport'], \n               values=df_S['Athlets'],\n               hoverinfo='label+value+percent', \n               textinfo='value+percent', \n               textfont=dict(size=8),\n               rotation=180,\n               marker=dict(colors=colors, \n\n                           line=dict(color='#000000', width=1)\n                        )\n            )\n\ndata = [trace]\nlayout = dict(title = \"Number of athlets per sport (Winter Olympics)\",\n                  width=800,\n                  height=800,\n              legend=dict(orientation=\"h\")\n             )\nfig = dict(data=data,layout=layout)\niplot(fig, filename='styled_pie_chart')","990d021b":"olympics_df = athlete_events_df.merge(noc_regions_df)","071c8d18":"print(\"All Olympics data -  rows:\",olympics_df.shape[0],\" columns:\", olympics_df.shape[1])","7a8e53d9":"olympics_df.head(3)","8326b9fb":"olympics_df=olympics_df.rename(columns = {'region':'Country'})","5d4c6c00":"tmp = olympics_df.groupby(['Country'])['Year'].nunique()\ndf = pd.DataFrame(data={'Editions': tmp.values}, index=tmp.index).reset_index()\ndf.head(2)","0dc6f2a0":"trace = go.Choropleth(\n            locations = df['Country'],\n            locationmode='country names',\n            z = df['Editions'],\n            text = df['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'rainbow',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'Editions',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'Olympic countries',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","2b85638c":"tmp = olympics_df.groupby(['Country', 'Season'])['Year'].nunique()\ndf = pd.DataFrame(data={'Editions': tmp.values}, index=tmp.index).reset_index()\ndf.head(2)","f0b3b90d":"dfS = df[df['Season']=='Summer']; dfW = df[df['Season']=='Winter']\n\ndef draw_map(dataset, title, colorscale, reversescale=False):\n    trace = go.Choropleth(\n                locations = dataset['Country'],\n                locationmode='country names',\n                z = dataset['Editions'],\n                text = dataset['Country'],\n                autocolorscale =False,\n                reversescale = reversescale,\n                colorscale = colorscale,\n                marker = dict(\n                    line = dict(\n                        color = 'rgb(0,0,0)',\n                        width = 0.5)\n                ),\n                colorbar = dict(\n                    title = 'Editions',\n                    tickprefix = '')\n            )\n\n    data = [trace]\n    layout = go.Layout(\n        title = title,\n        geo = dict(\n            showframe = True,\n            showlakes = False,\n            showcoastlines = True,\n            projection = dict(\n                type = 'orthographic'\n            )\n        )\n    )\n    fig = dict( data=data, layout=layout )\n    iplot(fig)\n    \ndraw_map(dfS, 'Olympic countries (Summer games)', \"Reds\")","80d4ae94":"draw_map(dfW, 'Olympic countries (Winter games)', \"Blues\", True)","5da8b0f7":"tmp = olympics_df.groupby(['Year','Sport'])['Country'].value_counts()\ndataset = pd.DataFrame(data={'Athlets': tmp.values}, index=tmp.index).reset_index()\ndataset.head()","2f8dcd87":"female_h = olympics_df[olympics_df['Sex']=='F']['Height'].dropna()\nmale_h = olympics_df[olympics_df['Sex']=='M']['Height'].dropna()\n\nhist_data = [female_h, male_h]\ngroup_labels = ['Female Height', 'Male Height']\n\nfig = ff.create_distplot(hist_data, group_labels, show_hist=False, show_rug=False)\nfig['layout'].update(title='Athlets Height distribution plot')\niplot(fig, filename='dist_only')","00be799c":"female_w = olympics_df[olympics_df['Sex']=='F']['Weight'].dropna()\nmale_w = olympics_df[olympics_df['Sex']=='M']['Weight'].dropna()\n\nhist_data = [female_w, male_w]\ngroup_labels = ['Female Weight', 'Male Weight']\n\nfig = ff.create_distplot(hist_data, group_labels, show_hist=False, show_rug=False)\nfig['layout'].update(title='Athlets Weight distribution plot')\niplot(fig, filename='dist_only')","2c6d2426":"female_a = olympics_df[olympics_df['Sex']=='F']['Age'].dropna()\nmale_a = olympics_df[olympics_df['Sex']=='M']['Age'].dropna()\n\nhist_data = [female_a, male_a]\ngroup_labels = ['Female Age', 'Male Age']\n\nfig = ff.create_distplot(hist_data, group_labels, show_hist=False, show_rug=False)\nfig['layout'].update(title='Athlets Age distribution plot')\niplot(fig, filename='dist_only')","5ff5fd39":"tmp = olympics_df.groupby(['Sport'])['Height', 'Weight'].agg('mean').dropna()\ndf1 = pd.DataFrame(tmp).reset_index()\ntmp2 = olympics_df.groupby(['Sport'])['ID'].count()\ndf2 = pd.DataFrame(tmp2).reset_index()\ndataset = df1.merge(df2)","a1753479":"hover_text = []\nfor index, row in dataset.iterrows():\n    hover_text.append(('Sport: {}<br>'+\n                      'Number of athlets: {}<br>'+\n                      'Mean Height: {}<br>'+\n                      'Mean Weight: {}<br>').format(row['Sport'],\n                                            row['ID'],\n                                            round(row['Height'],2),\n                                            round(row['Weight'],2)))\ndataset['hover_text'] = hover_text","8874a81d":"data = []\nfor sport in dataset['Sport']:\n    ds = dataset[dataset['Sport']==sport]\n    trace = go.Scatter(\n        x = ds['Height'],\n        y = ds['Weight'],\n        name = sport,\n        marker=dict(\n            symbol='circle',\n            sizemode='area',\n            sizeref=10,\n            size=ds['ID'],\n            line=dict(\n                width=2\n            ),),\n        text = ds['hover_text']\n    )\n    data.append(trace)\n                         \nlayout = go.Layout(\n    title='Athlets height and weight mean - grouped by sport',\n    xaxis=dict(\n        title='Height [cm]',\n        gridcolor='rgb(128, 128, 128)',\n        zerolinewidth=1,\n        ticklen=1,\n        gridwidth=0.5,\n    ),\n    yaxis=dict(\n        title='Weight [kg]',\n        gridcolor='rgb(128, 128, 128)',\n        zerolinewidth=1,\n        ticklen=1,\n        gridwidth=0.5,\n    ),\n    paper_bgcolor='rgb(255,255,255)',\n    plot_bgcolor='rgb(254, 254, 254)',\n    showlegend=False,\n)\n\n\nfig = dict(data = data, layout = layout)\n\niplot(fig, filename='athlets_body_measures')\n                         ","1b019481":"tmp = olympics_df.groupby(['Sport', 'Year'])['Height', 'Weight'].agg('mean').dropna()\ndf1 = pd.DataFrame(tmp).reset_index()\ntmp2 = olympics_df.groupby(['Sport', 'Year'])['ID'].count()\ndf2 = pd.DataFrame(tmp2).reset_index()\ndataset = df1.merge(df2)","9ae01a2a":"dataset.head(3)","235ccdf7":"hover_text = []\nfor index, row in dataset.iterrows():\n    hover_text.append(('Year: {}<br>'+\n                       'Sport: {}<br>'+\n                      'Number of athlets: {}<br>'+\n                      'Mean Height: {}<br>'+\n                      'Mean Weight: {}<br>').format(row['Year'], \n                                            row['Sport'],\n                                            row['ID'],\n                                            round(row['Height'],2),\n                                            round(row['Weight'],2)))\ndataset['hover_text'] = hover_text","71efe6f6":"years = (olympics_df.groupby(['Year'])['Year'].nunique()).index\nsports = (olympics_df.groupby(['Sport'])['Sport'].nunique()).index\n# make figure\nfigure = {\n    'data': [],\n    'layout': {},\n    'frames': []\n}\n\n# fill in most of layout\nfigure['layout']['xaxis'] = {'range': [140, 200], 'title': 'Height'}\nfigure['layout']['yaxis'] = {'range': [20, 200],'title': 'Weight'}\nfigure['layout']['hovermode'] = 'closest'\nfigure['layout']['showlegend'] = False\nfigure['layout']['sliders'] = {\n    'args': [\n        'transition', {\n            'duration': 400,\n            'easing': 'cubic-in-out'\n        }\n    ],\n    'initialValue': '1896',\n    'plotlycommand': 'animate',\n    'values': years,\n    'visible': True\n}\n\nfigure['layout']['updatemenus'] = [\n    {\n        'buttons': [\n            {\n                'args': [None, {'frame': {'duration': 500, 'redraw': False},\n                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],\n                'label': 'Play',\n                'method': 'animate'\n            },\n            {\n                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',\n                'transition': {'duration': 0}}],\n                'label': 'Pause',\n                'method': 'animate'\n            }\n        ],\n        'direction': 'left',\n        'pad': {'r': 10, 't': 87},\n        'showactive': False,\n        'type': 'buttons',\n        'x': 0.1,\n        'xanchor': 'right',\n        'y': 0,\n        'yanchor': 'top'\n    }\n]\nsliders_dict = {\n    'active': 0,\n    'yanchor': 'top',\n    'xanchor': 'left',\n    'currentvalue': {\n        'font': {'size': 20},\n        'prefix': 'Year:',\n        'visible': True,\n        'xanchor': 'right'\n    },\n    'transition': {'duration': 300, 'easing': 'cubic-in-out'},\n    'pad': {'b': 10, 't': 50},\n    'len': 0.9,\n    'x': 0.1,\n    'y': 0,\n    'steps': []\n}\n# make data\nyear = 1896\nfor sport in sports:\n    dataset_by_year = dataset[dataset['Year'] == year]\n    dataset_by_year_and_season = dataset_by_year[dataset_by_year['Sport'] == sport]\n\n    data_dict = {\n        'x': list(dataset_by_year_and_season['Height']),\n        'y': list(dataset_by_year_and_season['Weight']),\n        'mode': 'markers',\n        'text': list(dataset_by_year_and_season['hover_text']),\n        'marker': {\n            'sizemode': 'area',\n            'sizeref': 1,\n            'size': list(dataset_by_year_and_season['ID'])\n        },\n        'name': sport\n    }\n    figure['data'].append(data_dict)\n# make frames\nfor year in years:\n    frame = {'data': [], 'name': str(year)}\n    for sport in sports:\n        dataset_by_year = dataset[dataset['Year'] == int(year)]\n        dataset_by_year_and_season = dataset_by_year[dataset_by_year['Sport'] == sport]\n\n        data_dict = {\n            'x': list(dataset_by_year_and_season['Height']),\n            'y': list(dataset_by_year_and_season['Weight']),\n            'mode': 'markers',\n            'text': list(dataset_by_year_and_season['hover_text']),\n            'marker': {\n                'sizemode': 'area',\n                'sizeref': 1,\n                'size':  list(dataset_by_year_and_season['ID'])\n            },\n            'name': sport\n        }\n        frame['data'].append(data_dict)\n\n    figure['frames'].append(frame)\n    slider_step = {'args': [\n        [year],\n        {'frame': {'duration': 300, 'redraw': False},\n         'mode': 'immediate',\n       'transition': {'duration': 300}}\n     ],\n     'label': year,\n     'method': 'animate'}\n    sliders_dict['steps'].append(slider_step)\nfigure['layout']['sliders'] = [sliders_dict]\niplot(figure)","6de20b9f":"tmp = olympics_df.groupby(['Sex'])['Height', 'Weight'].agg('mean').dropna()\ndf1 = pd.DataFrame(tmp).reset_index()\ntmp2 = olympics_df.groupby(['Sex'])['ID'].count()\ndf2 = pd.DataFrame(tmp2).reset_index()\ndataset = df1.merge(df2)","ca163252":"hover_text = []\nfor index, row in dataset.iterrows():\n    hover_text.append(('Sex: {}<br>'+\n                      'Number of athlets: {}<br>'+\n                      'Mean Height: {}<br>'+\n                      'Mean Weight: {}<br>').format(row['Sex'],\n                                            row['ID'],\n                                            round(row['Height'],2),\n                                            round(row['Weight'],2)))\ndataset['hover_text'] = hover_text","fc7f5f00":"data = []\nfor sex in dataset['Sex']:\n    ds = dataset[dataset['Sex']==sex]\n    trace = go.Scatter(\n        x = ds['Height'],\n        y = ds['Weight'],\n        name = sex,\n        marker=dict(\n            symbol='circle',\n            sizemode='area',\n            sizeref=10,\n            size=ds['ID'],\n            line=dict(\n                width=2\n            ),),\n        text = ds['hover_text']\n    )\n    data.append(trace)\n                         \nlayout = go.Layout(\n    title='Athlets height and weight mean - grouped by Sex',\n    xaxis=dict(\n        title='Height [cm]',\n        gridcolor='rgb(128, 128, 128)',\n        zerolinewidth=1,\n        ticklen=1,\n        gridwidth=0.5,\n    ),\n    yaxis=dict(\n        title='Weight [kg]',\n        gridcolor='rgb(128, 128, 128)',\n        zerolinewidth=1,\n        ticklen=1,\n        gridwidth=0.5,\n    ),\n    paper_bgcolor='rgb(255,255,255)',\n    plot_bgcolor='rgb(254, 254, 254)',\n    showlegend=False,\n)\n\n\nfig = dict(data = data, layout = layout)\n\niplot(fig, filename='athlets_body_measures2')\n                         ","aca962d3":"tmp = olympics_df.groupby(['Sex', 'Year'])['Height', 'Weight'].agg('mean').dropna()\ndf1 = pd.DataFrame(tmp).reset_index()\ntmp2 = olympics_df.groupby(['Sex', 'Year'])['ID'].count()\ndf2 = pd.DataFrame(tmp2).reset_index()\ndataset = df1.merge(df2)","7247cecd":"hover_text = []\nfor index, row in dataset.iterrows():\n    hover_text.append(('Year: {}<br>'+\n                       'Sex: {}<br>'+\n                      'Number of athlets: {}<br>'+\n                      'Mean Height: {}<br>'+\n                      'Mean Weight: {}<br>').format(row['Year'], \n                                            row['Sex'],\n                                            row['ID'],\n                                            round(row['Height'],2),\n                                            round(row['Weight'],2)))\ndataset['hover_text'] = hover_text","6aa4d8c9":"years = (olympics_df.groupby(['Year'])['Year'].nunique()).index\nsexes = (olympics_df.groupby(['Sex'])['Sex'].nunique()).index\n# make figure\nfigure = {\n    'data': [],\n    'layout': {},\n    'frames': []\n}\n\n# fill in most of layout\nfigure['layout']['xaxis'] = {'range': [100, 200], 'title': 'Height'}\nfigure['layout']['yaxis'] = {'range': [20, 200],'title': 'Weight'}\nfigure['layout']['hovermode'] = 'closest'\nfigure['layout']['showlegend'] = False\nfigure['layout']['sliders'] = {\n    'args': [\n        'transition', {\n            'duration': 400,\n            'easing': 'cubic-in-out'\n        }\n    ],\n    'initialValue': '1896',\n    'plotlycommand': 'animate',\n    'values': years,\n    'visible': True\n}\n\nfigure['layout']['updatemenus'] = [\n    {\n        'buttons': [\n            {\n                'args': [None, {'frame': {'duration': 500, 'redraw': False},\n                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],\n                'label': 'Play',\n                'method': 'animate'\n            },\n            {\n                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',\n                'transition': {'duration': 0}}],\n                'label': 'Pause',\n                'method': 'animate'\n            }\n        ],\n        'direction': 'left',\n        'pad': {'r': 10, 't': 87},\n        'showactive': False,\n        'type': 'buttons',\n        'x': 0.1,\n        'xanchor': 'right',\n        'y': 0,\n        'yanchor': 'top'\n    }\n]\nsliders_dict = {\n    'active': 0,\n    'yanchor': 'top',\n    'xanchor': 'left',\n    'currentvalue': {\n        'font': {'size': 20},\n        'prefix': 'Year:',\n        'visible': True,\n        'xanchor': 'right'\n    },\n    'transition': {'duration': 300, 'easing': 'cubic-in-out'},\n    'pad': {'b': 10, 't': 50},\n    'len': 0.9,\n    'x': 0.1,\n    'y': 0,\n    'steps': []\n}\n# make data\nyear = 1896\nfor sex in sexes:\n    dataset_by_year = dataset[dataset['Year'] == year]\n    dataset_by_year_and_season = dataset_by_year[dataset_by_year['Sex'] == sex]\n\n    data_dict = {\n        'x': list(dataset_by_year_and_season['Height']),\n        'y': list(dataset_by_year_and_season['Weight']),\n        'mode': 'markers',\n        'text': list(dataset_by_year_and_season['hover_text']),\n        'marker': {\n            'sizemode': 'area',\n            'sizeref': 1,\n            'size': list(dataset_by_year_and_season['ID'])\n        },\n        'name': sex\n    }\n    figure['data'].append(data_dict)\n# make frames\nfor year in years:\n    frame = {'data': [], 'name': str(year)}\n    for sex in sexes:\n        dataset_by_year = dataset[dataset['Year'] == int(year)]\n        dataset_by_year_and_season = dataset_by_year[dataset_by_year['Sex'] == sex]\n\n        data_dict = {\n            'x': list(dataset_by_year_and_season['Height']),\n            'y': list(dataset_by_year_and_season['Weight']),\n            'mode': 'markers',\n            'text': list(dataset_by_year_and_season['hover_text']),\n            'marker': {\n                'sizemode': 'area',\n                'sizeref': 1,\n                'size':  list(dataset_by_year_and_season['ID'])\n            },\n            'name': sex\n        }\n        frame['data'].append(data_dict)\n\n    figure['frames'].append(frame)\n    slider_step = {'args': [\n        [year],\n        {'frame': {'duration': 300, 'redraw': False},\n         'mode': 'immediate',\n       'transition': {'duration': 300}}\n     ],\n     'label': year,\n     'method': 'animate'}\n    sliders_dict['steps'].append(slider_step)\nfigure['layout']['sliders'] = [sliders_dict]\niplot(figure)","a6bc70f1":"tmp = olympics_df.groupby(['Sport', 'Sex'])['Height', 'Weight', 'Age'].agg('mean').dropna()\ndf1 = pd.DataFrame(tmp).reset_index()\ntmp2 = olympics_df.groupby(['Sport', 'Sex'])['ID'].count()\ndf2 = pd.DataFrame(tmp2).reset_index()\ndataset = df1.merge(df2)","a8fd0da5":"dataset.head()","93ff4725":"hover_text = []\nfor index, row in dataset.iterrows():\n    hover_text.append(('Sex: {}<br>'+\n                       'Sport: {}<br>'\n                       'Number of athlets: {}<br>'+\n                       'Mean Age: {}<br>'\n                       'Mean Height: {}<br>'+\n                       'Mean Weight: {}<br>').format(row['Sex'],\n                                            row['Sport'],\n                                            row['ID'],\n                                            round(row['Age'],2), \n                                            round(row['Height'],2),\n                                            round(row['Weight'],2)))\ndataset['hover_text'] = hover_text","17f636ca":"\ndef plot_bubble_chart(dataset,title):\n    data = []\n    for sport in dataset['Sport']:\n        ds = dataset[dataset['Sport']==sport]\n        trace = go.Scatter(\n            x = ds['Height'],\n            y = ds['Weight'],\n            name = sport,\n            marker=dict(\n                symbol='circle',\n                sizemode='area',\n                sizeref=50,\n                size=np.power(ds['Age'],3),\n                line=dict(\n                    width=2\n                ),),\n            text = ds['hover_text']\n        )\n        data.append(trace)\n\n    layout = go.Layout(\n        title= title,\n        xaxis=dict(\n            title='Height [cm]',\n            gridcolor='rgb(128, 128, 128)',\n            zerolinewidth=1,\n            ticklen=1,\n            gridwidth=0.5,\n            range=[150,200]\n        ),\n        yaxis=dict(\n            title='Weight [kg]',\n            gridcolor='rgb(128, 128, 128)',\n            zerolinewidth=1,\n            ticklen=1,\n            gridwidth=0.5,\n            range=[45,100]\n        ),\n        paper_bgcolor='rgb(255,255,255)',\n        plot_bgcolor='rgb(254, 254, 254)',\n        showlegend=False,\n    )\n    fig = dict(data = data, layout = layout)\n    iplot(fig, filename='athlets_body_measures')\n    \n","6b933126":"dF = dataset[dataset['Sex']=='F']\nplot_bubble_chart(dF,'Female athlets height and weight mean - grouped by sport')","c1082b59":"dM = dataset[dataset['Sex']=='M']\nplot_bubble_chart(dM,'Male athlets height and weight mean - grouped by sport')","a984b641":"tmp = olympics_df.groupby(['Country', 'Medal'])['ID'].agg('count').dropna()\ndf = pd.DataFrame(tmp).reset_index()","ea6374ae":"dfG = df[df['Medal']=='Gold']\ndfS = df[df['Medal']=='Silver']\ndfB = df[df['Medal']=='Bronze']\n\ndef draw_map(dataset, title, colorscale):\n    trace = go.Choropleth(\n                locations = dataset['Country'],\n                locationmode='country names',\n                z = dataset['ID'],\n                text = dataset['Country'],\n                autocolorscale =False,\n                reversescale = True,\n                colorscale = colorscale,\n                marker = dict(\n                    line = dict(\n                        color = 'rgb(0,0,0)',\n                        width = 0.5)\n                ),\n                colorbar = dict(\n                    title = 'Medals',\n                    tickprefix = '')\n            )\n    data = [trace]\n    layout = go.Layout(\n        title = title,\n        geo = dict(\n            showframe = True,\n            showlakes = False,\n            showcoastlines = True,\n            projection = dict(\n                type = 'natural earth'\n            )\n        )\n    )\n    fig = dict( data=data, layout=layout )\n    iplot(fig)","5ca4ba49":"draw_map(dfG, \"Countries with Gold Medals\",'Greens')","6d14c341":"draw_map(dfS, \"Countries with Silver Medals\",'Greys')","0bddcfbb":"draw_map(dfB, \"Countries with Bronze Medals\",'Reds')","ce6b46ee":"tmp = olympics_df.groupby(['Year', 'City','Season', 'Medal'])['ID'].agg('count').dropna()\ndf = pd.DataFrame(tmp).reset_index()\ndfG = df[df['Medal']=='Gold']\ndfS = df[df['Medal']=='Silver']\ndfB = df[df['Medal']=='Bronze']","00bea55c":"dfG.head()","23a59631":"\ntraceG = go.Bar(\n    x = dfG['Year'],y = dfG['ID'],\n    name=\"Gold\",\n     marker=dict(\n                color='gold',\n                line=dict(\n                    color='black',\n                    width=1),\n                opacity=0.5,\n            ),\n    text = dfG['City']+ \" (\" + dfG['Season'] + \")\",\n)\ntraceS = go.Bar(\n    x = dfS['Year'],y = dfS['ID'],\n    name=\"Silver\",\n    marker=dict(\n                color='Grey',\n                line=dict(\n                    color='black',\n                    width=1),\n                opacity=0.5,\n            ),\n    text=dfS['City']+ \" (\" + dfS['Season'] + \")\",\n)\n\ntraceB = go.Bar(\n    x = dfB['Year'],y = dfB['ID'],\n    name=\"Bronze\",\n    marker=dict(\n                color='Brown',\n                line=dict(\n                    color='black',\n                    width=1),\n                opacity=0.5,\n            ),\n    text=dfB['City']+ \" (\" + dfB['Season'] + \")\",\n)\n\ndata = [traceG, traceS, traceB]\nlayout = dict(title = 'Medals per Olympic edition',\n          xaxis = dict(title = 'Year', showticklabels=True), \n          yaxis = dict(title = 'Number of medals'),\n          hovermode = 'closest',\n          barmode='stack'\n         )\nfig = dict(data=data, layout=layout)\niplot(fig, filename='events-sports1')","0e357be2":"tmp = olympics_df.groupby(['Sport', 'Medal'])['ID'].agg('count').dropna()\ndf = pd.DataFrame(tmp).reset_index()\ndfG = df[df['Medal']=='Gold']\ndfS = df[df['Medal']=='Silver']\ndfB = df[df['Medal']=='Bronze']","20ae1f17":"traceG = go.Bar(\n    x = dfG['Sport'],y = dfG['ID'],\n    name=\"Gold\",\n     marker=dict(\n                color='gold',\n                line=dict(\n                    color='black',\n                    width=1),\n                opacity=0.5,\n            ),\n    text = dfG['Sport'],\n    #orientation = 'h'\n)\ntraceS = go.Bar(\n    x = dfS['Sport'],y = dfS['ID'],\n    name=\"Silver\",\n    marker=dict(\n                color='Grey',\n                line=dict(\n                    color='black',\n                    width=1),\n                opacity=0.5,\n            ),\n    text=dfS['Sport'],\n    #orientation = 'h'\n)\n\ntraceB = go.Bar(\n    x = dfB['Sport'],y = dfB['ID'],\n    name=\"Bronze\",\n    marker=dict(\n                color='Brown',\n                line=dict(\n                    color='black',\n                    width=1),\n                opacity=0.5,\n            ),\n    text=dfB['Sport'],\n   # orientation = 'h'\n)\n\ndata = [traceG, traceS, traceB]\nlayout = dict(title = 'Medals per sport',\n          xaxis = dict(title = 'Sport', showticklabels=True, tickangle=45,\n            tickfont=dict(\n                size=8,\n                color='black'),), \n          yaxis = dict(title = 'Number of medals'),\n          hovermode = 'closest',\n          barmode='stack',\n          showlegend=False,\n          width=900,\n          height=600,\n         )\nfig = dict(data=data, layout=layout)\niplot(fig, filename='events-sports1')","2c359c30":"\n## Athlets body measurements grouped by Sex\n\nLet's do, as an exercise, a similar plot, grouping the athlets by `Sex` instead of `Sport`.","0808214c":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>\n\n\n## <a id=\"102\">Bar<\/a>\n\nLet's display the number of athlets per Olympic Game using `barplot`.   \n\nWe will also prepare the dataset for visualization adding the City name.","25a900e6":"\n<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n\n\n\n## <a id=\"105\">Heatmap<\/a>  \n\n\nLet's also use a `Heatmap` to show the number of athlets per Game event and per Sport. \n\n\nWe will process here only the Summer Olympics data.  \n\nWe create first a matrix with rows `Year` and columns `Sport` having the values the number of athlets per year and sport.\n","a6ac6da6":"\n<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>","3c980518":"## <a id=\"1011\">append_trace<\/a>  \n\nLet's show how we can create subplots with Plotly. We will display the previous plot side-by-side, on two colums.","08bc40cd":"Let's show now the number of athlets per sport for each year. \n\nFor each sport, each year, a point will be plot.","1f7f8b73":"Let's inspect the graph obtained.\n\nWe specified the graph to plot using `trace`. More than one `trace` can be included in a plot. For this, we group them in the `data` collection. \n\nThe presentation of the scatter plot is specified in the `layout`.\n\nFor the purpose of ilustrating some of the features of the plotly, we included in the layout options for xaxis and yaxis.\n\nThe figure is assembled in a dictionary with `data` and `layout` and is displayed using iplot.\n\n\nOn the x-axis we have the years of the Olympic games and on the y-axis we have the number of athlets per game. \n\nAbove the title we have several controls allowing us to control the plot. \n\nA group of controls allows various visualization control functions: we can zoom, pan, select a window to zoom, use `lasso` selection, zoom in, zoom out, reset the zoom.\n\nWhen we hover over the plot, the y-value is displayed in a small popup over the closest point. We have the option to toggle between showing only the y-value of the closest point and the x-axis value or showing all y-values.\n\nWe can even control this option when we build the graph, with the option:  `hovermode` set to `compare`.\n","f3cae812":"Let's now use the same function defined above to plot the sports in Winter Olympics.","f4e5cc6e":"Let's now create the bubble scatter plot.","e333da26":"# <a id=\"9\">Known issues<\/a>  \n\nHere I describe the known issues:\n\n* Animation is not refreshing correctly the circles markers corresponding to categories that are not longer present after a certain step (ex: sports that were discontinued in the Olympics still appears in the next frames, not refreshed). The issue can be manually corrected, by refreshing the plot using the <font color=\"red\">back to home<\/font>  button in Plotly controls menu.","d44fedbf":"Let's show on a graph with x axis the average height and with y axis the average weight the number of athlets, grouped by sport.  \n\nWe will use a scatter plot but with markers (for each sport) proportional with the number of athlets.","3338c9c5":"Let's check what are the countries with most medals.","dbc06dd1":"## Athlets body measurements, grouped by Sex and Sport\n\nLet's group now on both criteria and create two graphs.  We add also the `Age` and average as well on this and we make the bubble size proportional with the Age.","a714ba1e":"Let's glipmse the resulted dataset.","aafd4869":"<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n\n\n## <a id=\"106\">Pie<\/a>  \n\n\nWe are not recommending to use `Pie` for visualization (see also references [9], [10]). Instead, we recommend you to use `Bar` plots.   \n\nThere is a joke about usage of `Pie` charts :-) that we are presenting here :","15b253b1":"<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n\n\n\n## <a id=\"104\">Box<\/a>\n\nLet's show the distribution of athlets number during the Olympic games editions, grouped by `Season`. \n\n\nWe display the boxes with transparency (`rgba(238,23,11,0.5)`) and with horizontal orientation.\n\nWe change the layout to rotate y-axis so that it is easier to read the labels for the `Seasons`.\n\n","6902c6b9":"Only a part of the athlets have medals, which is something we expected. In the same time, there are missing informations about the body measurements of athlets (Weight and Height) and their age (3.5%).","d360a305":"Let's also check if there is missing data.","1288ce68":"<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n\n\n## <a id=\"108\">create_distplot<\/a>   \n\n\nLet's show first the height distribution for athlets, grouped by sex.","6f742863":"<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n\n\n# <a id=\"6\">Athlets<\/a> ","73dc9050":"Let's merge first the `noc_regions_df` with `athlete_events_df` dataset.","9c09065b":"Let's plot the countries with Gold, Silver and Bronze medals.","aa657c07":"Let's also show the number of medals per sport.  \nWe will show separately the number of medals for **Gold**, **Silver** and **Bronze**.","91c6efab":"Now we show the number of athlets per each game, on each year. \n\nEach type of game (`Summer` or `Winter`) is shown with a different color. Also, when we hover over the points, plotly displays the small popups with the y-value for each scatter plot, with the name of the plot as well displayed aside. Also, the legend shows the name of each trace, as we defined when we specified the traces.\n\nWe can observe that from 1896 to 1920 there were only `Summer` games. From 1924 to 1992 there were `Summer` and `Winter` events on each 4 years, with the interruption due to the WW2 between 1936 and 1948.\n\n\n\nThe scatter plot allows to see the patterns of the games presence. \n\nOne notable event that can be spotted is that in `1956` the Summer Olympics were held in 2 different cities, `Melbourne` and `Stockholm`. What happened was that due to strict quarantine regulations of Australia, horses could not be admitted in the country and therefore equestrian competitions were held four months before in Stockholm.\n\nAnother example, there was a drastic drop in the presence in `1980` when West block boycoted the Moscow Olympic games. Let's see if we can plot the name of the Olympic venue aside each scatter plot point.  \n\n\n\n<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>","8e44fc2d":"Let's show the age, height and weight of athlets distribution using a `distplot` chart.\n\nWe will group the data per sex and Season.","42747617":"\n<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n\n\n## <a id=\"101\">Scatter<\/a>\n\nWe prepare the Scatter plot using `Scatter`. \n\nWe specify the following attributes for the `trace`:  \n\n* x - the points coordinates on x axis;  \n* y - the points coordinates on y axis;  \n* name - the name associated with the sequence (x,y); \n* marker - the marker used for the border of map areas specified in locations; \n* mode - the representation mode of the scatter graph; here we will use `markers` but frequent used are as well `lines` or `markers+lines`;  \n\nMultiple `trace` can be specified; then are added in the `data` that will be then displayed in a figure (`fig`), using a `layout`. For the layout, the following attributes are specified:  \n* title - title displayed for the chart;\n* xaxis - title and attributes of the title displayed on the x axis;\n* yaxes - title and attributes of the title displayed on the y axis;\n* hovermode - specify how will be displayed the popups when hover above the points - all popups or only over on the current trace;","14df189b":"Let's show the variation in time of the number of athlets per each country.","7d2d38b9":"# <a id=\"2\">The data<\/a>\n\n## Load packages\n\n\nBesides **pandas** and **numpy** we load matplotlib and from **plotly.offline** we load **init_notebook_mode** and **iplot** (so that we can create powerfull graphics with **plotly**).","84b530bd":"Let's show the number of medals (Gold, Silver, Bronze) per Olympic edition.","bf16e823":"<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n\n\n# <a id=\"8\">References<\/a> \n\n[1] Plotly cheatsheet, https:\/\/images.plot.ly\/plotly-documentation\/images\/python_cheat_sheet.pdf  \n[2] Scatterplots with Plotly, https:\/\/plot.ly\/python\/line-and-scatter\/  \n[3] Bar charts with Plotly, https:\/\/plot.ly\/python\/bar-charts\/   \n[4] Box charts with Plotly, https:\/\/plot.ly\/python\/box-plots\/  \n[5] Plotly maps, https:\/\/plot.ly\/python\/choropleth-maps\/  \n[6] Plotly axes, https:\/\/plot.ly\/python\/axes\/  \n[7] Plotly animations, https:\/\/plot.ly\/python\/animations\/   \n[8] Plotly reference, https:\/\/plot.ly\/python\/reference\/     \n[9] Kristin Henry, In Defense of Pie Charts, and Why You Shouldn\u2019t Use Them, https:\/\/medium.com\/@KristinHenry\/in-defense-of-pie-charts-and-why-you-shouldnt-use-them-df2e8ccb5f76    \n[10]  Sven Hamberg, Why you shouldn\u2019t use pie charts - Tips for better data visualization, https:\/\/blog.funnel.io\/why-we-dont-use-pie-charts-and-some-tips-on-better-data-visualizations\n","632b3039":"Let's show also the age distribution for athlets, grouped by sex.","551d73a4":"We will create a function to display `trace` and one function to display the set of traces.  \n\nWe will also filter the Games per Summer and Winter.","f3293265":"We used `rotation` to align the base part of the pyramid to the ground. \n\nWe used `textinfo` = `none` to remove percent or label text from the pie slices.\n\n\nLet's use here to show the proportion of athlets number per sports, separatelly for Summer and Winter Olympics.","b47a2fbc":"<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>\n\n\n## <a id=\"109\">Slider (animation)<\/a>\n\n\nLet's represent the athlets body measurements plot, grouped not only by `Sport` but also by `Year`. For each `Year` we will set a slide and evolution in time will be shown as an animation. A button for start and one for pause will also be added to the chart, to allow easy browsing through the frames.\n","85e1de06":"<h1><center><font size=\"6\">Plotly tutorial - 120 years of Olympic games<\/font><\/center><\/h1>\n\n\n# <a id='0'>Content<\/a>\n\nTwo types of Content lists are used: for the analysis of the dataset, we use the `Analysis` content list. For the Plotly features, we use the `Plotly chart types and functions` content list.\n\n\n## Analysis\n\n- <a href='#1'>Introduction<\/a>  \n- <a href='#2'>The data<\/a>     \n- <a href='#3'>Games and venues<\/a>\n- <a href='#4'>Sports<\/a>\n- <a href='#5'>Countries<\/a>  \n- <a href='#6'>Athlets<\/a>\n- <a href='#7'>Medals<\/a>   \n- <a href='#8'>References<\/a>   \n- <a href='#9'>Known issues<\/a>   \n\n## Plotly chart types and functions\n\n- <a href='#101'>Scatter<\/a>  \n- <a href='#1011'>append_trace<\/a>  \n- <a href='#102'>Bar<\/a>  \n- <a href='#103'>create_table<\/a> \n- <a href='#104'>Box<\/a>  \n- <a href='#105'>Heatmap<\/a>  \n- <a href='#106'>Pie<\/a>  \n- <a href='#107'>Choropleth<\/a>  \n- <a href='#108'>create_distplot<\/a>  \n- <a href='#109'>Slider (animation)<\/a>  \n","3dcf021b":"## Read the data\n\n\nThere are two data files.","8a6ee58b":"The plot of type `go.Box` displays the min, max, 1st Quartile and 3rd Quartile of the data distribution, in this case the number of athlets grouped per Season. \n\n\n<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>","39f07c5d":"Let's check the structure of `df` DataFrame obtained. ","1e5d63bc":"We observe that there are years when we do have two events (Summer and Winter). Indeed, in the history of the Olympics, the Games started with only summer events, then there were in the same year for a while both Summer and Winter games and then, at a certain moment in time, they started to schedule in different years Summer and Winter games. \n\nLet's plot again the scatter plot but showing now the `Summer` and `Winter` games with diferent colors, on the same plot. For this, we will create two different traces. \n\nWe will also add lines to the scatter plot, by adding `lines` to the `mode`.","6ae42670":"Let's define a list with all the Sports.","cb72199c":"Let's inspect the two datasets. ","a12870f9":"## Check the data\n\n\nFirst, we check the data files shape.","d9d6dec7":"## Time variation of athlets body measurement, grouped by Sex","c05ad9bc":"Let's show the weight distribution for athlets, grouped by sex.","142fe83d":"A majority of notes are missing (90%) but also some of the region names are missing. We will check that later on.\n\n\n<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>","e179b7c2":"# <a id=\"1\">Introduction<\/a>  \n\n## Kernel objective \n\nThis Kernel objective is to provide an introduction in use of **Plotly** with Python for visualizations.\n\n## Data used\n\nThe data used to illustrate **Plotly** features encompasses 120 years of history of Olympic Games. We will explore this data with the purpose to illustrate primarly the plotly features.\n\n","c4429072":"<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n\n\n# <a id=\"7\">Medals<\/a> ","dbec7d04":"<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n\n\n# <a id=\"5\">Countries<\/a> ","fb20330c":"Let's show also the corresponding heatmap plot for Winter Olympics.","9e8a5766":"# <a id=\"3\">Venues and events<\/a>  \n\nLet's check in what years we had the Olympic events and what were the venues. \n\nFirst, let's check the years of the venues and the season. We have both Summmer and Winter Olympics. We group by `Year` and select `Season` and will obtain the number of athlets per event. We use a Scatter plot for this.","de24cd7a":"<a href=\"#0\"><font size=\"1\" color=\"red\">Go to top<\/font><\/a>\n\n## <a id=\"103\">create_table<\/a>\n\nLet's also show how we can display tables with Plotly.","8a9c1c73":"Let's show separately the number of events per country for Summer and Winter events. We will extract a function first.","ffb614a0":"First, let's rename `region` column as `Country`.   \n\n\nThen, let's show at how many editions went each different Country.  \n\n<a href=\"#0\"><font size=\"1\">Go to top<\/font><\/a>\n\n\n## <a id=\"107\">Choropleth<\/a>\n\nWe will use for representing the Country a `Choropleth` representation.\n\nWe specify the following attributes:  \n* locations - these are the countries;  \n* locationmode - the mode used for specifying the locations; in our case, we will use the `country names` option; other options are `ISO-3` or `USA-states`. \n* z - the value displayed; \n* text - the text shown in the popup on hover;  \n* colorscale - the color scale used for the areas on the map; \n* marker - the marker used for the border of map areas specified in locations;\n\nThese are only a part of the important attributes for a `Choropleth` map, \n\nFor the layout, there is an attribute `geo` with the following parameters:  \n* showframe - if a frame is drawn around the map;  \n* showcoastlines - if coast lines are drawn around the continents; if set to `False` no continents are shown;  \n* showlakes - if interior non-continental areas are shown;  \n* projection - there are multiple options, most used being `Mercator`, `orthographic`, `natural earth` and `albers usa` for US counties.\n","c7964039":"With this view is easier to see how the Olympic events are scheduled together from 1924 and separated starting from 1999.\n\nWe also display the city name in the small popup that appears when hover over the bars, beside the `Season`. \n\nIn the following graph we play a bit more with the options for display for `go.Bar`. \n\nWe will use the options to define color, opacity, margins for each barplot. \n\nAs well, we change the layout to display the bars stacked (to see also the total number of athlets per Game, where there are two different games each year).","0ad62baf":"We prepare the `Heatmap`.\n\nThe attributes we use are:\n* z - the matrix with values to be displayed;\n* x - the columns names;\n* y - the rows names;  \n* colorsacale - the color scale to be used for display; ","e7fc9bdd":"We create the hover text, by adding the `Year` as well in this case.","e5701f84":"# <a id=\"4\">Sports<\/a>  \n\nLet's display informations about the sports using the functions that we already explored `go.Scatter`, `go.Bar` and `go.Box`.  \n\nFirst, let's count how many different sports were played each Olympics. We will use `go.Scatter` to represent the number of sports per edition.","2e0d764c":"We create now the animation.","6c327b7a":"The legend show the sport and city, as well as the number of athlets per sport per edition.\n\nLet's also show the distribution of number of athlets per sport. For this we group by `Year` and `Season` and count the athlets per each sport.","c341a25d":"Let's define the hover text."}}