{"cell_type":{"d181aae8":"code","cc93368e":"code","fc801011":"code","b151c456":"code","49d3362b":"code","69debe70":"code","d400a608":"code","b27906ff":"code","c7ba9d98":"code","e8c752e1":"code","13e682dc":"code","3452b0b7":"code","048cfa62":"code","7662d9b9":"code","ca0b26d2":"code","7df7f377":"code","e5175945":"code","2761afe7":"code","431e08e2":"code","376681a2":"code","0e1c87e6":"code","f6510f36":"code","079b5874":"code","f92f3c25":"markdown","a176b3f4":"markdown","fef02f0e":"markdown","28f312ad":"markdown","579953bc":"markdown","691b7b77":"markdown","d9093c35":"markdown","3a9af3e5":"markdown","1694a8a8":"markdown","202b0bb7":"markdown","ce6eb46d":"markdown","85c0b261":"markdown","f454d966":"markdown","abcca833":"markdown","b194e548":"markdown","6c932257":"markdown","d13fcc01":"markdown","500a3ba4":"markdown","9a72f389":"markdown","98b824bc":"markdown","6a5641a7":"markdown","77b3e370":"markdown"},"source":{"d181aae8":"!pip install imutils","cc93368e":"# import the necessary packages\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.layers import Activation, Dropout,Dense, Flatten, BatchNormalization, Conv2D, MaxPooling2D, Lambda, Input, AveragePooling2D\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model, Sequential\nfrom keras.callbacks import ReduceLROnPlateau, LearningRateScheduler\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom imutils import paths\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport random\nimport shutil\nimport cv2\nimport os","fc801011":"dataset_path = '.\/dataset'","b151c456":"%%bash\nrm -rf dataset\nmkdir -p dataset\/covid\nmkdir -p dataset\/normal","49d3362b":"samples = 25","69debe70":"covid_dataset_path = '..\/input\/covid-chest-xray'","d400a608":"# construct the path to the metadata CSV file and load it\ncsvPath = os.path.sep.join([covid_dataset_path, \"metadata.csv\"])\ndf = pd.read_csv(csvPath)\n\n# loop over the rows of the COVID-19 data frame\nfor (i, row) in df.iterrows():\n    # if (1) the current case is not COVID-19 or (2) this is not\n    # a 'PA' view, then ignore the row\n    if row[\"finding\"] != \"COVID-19\" or row[\"view\"] != \"PA\":\n        continue\n\n    # build the path to the input image file\n    imagePath = os.path.sep.join([covid_dataset_path, \"images\", row[\"filename\"]])\n\n    # if the input image file does not exist (there are some errors in\n    # the COVID-19 metadeta file), ignore the row\n    if not os.path.exists(imagePath):\n        continue\n\n    # extract the filename from the image path and then construct the\n    # path to the copied image file\n    filename = row[\"filename\"].split(os.path.sep)[-1]\n    outputPath = os.path.sep.join([f\"{dataset_path}\/covid\", filename])\n\n    # copy the image\n    shutil.copy2(imagePath, outputPath)","b27906ff":"pneumonia_dataset_path ='..\/input\/chest-xray-pneumonia\/chest_xray'","c7ba9d98":"basePath = os.path.sep.join([pneumonia_dataset_path, \"train\", \"NORMAL\"])\nimagePaths = list(paths.list_images(basePath))\n\n# randomly sample the image paths\nrandom.seed(42)\nrandom.shuffle(imagePaths)\nimagePaths = imagePaths[:samples]\n\n# loop over the image paths\nfor (i, imagePath) in enumerate(imagePaths):\n    # extract the filename from the image path and then construct the\n    # path to the copied image file\n    filename = imagePath.split(os.path.sep)[-1]\n    outputPath = os.path.sep.join([f\"{dataset_path}\/normal\", filename])\n\n    # copy the image\n    shutil.copy2(imagePath, outputPath)","e8c752e1":"def ceildiv(a, b):\n    return -(-a \/\/ b)\n\ndef plots_from_files(imspaths, figsize=(10,5), rows=1, titles=None, maintitle=None):\n    \"\"\"Plot the images in a grid\"\"\"\n    f = plt.figure(figsize=figsize)\n    if maintitle is not None: plt.suptitle(maintitle, fontsize=10)\n    for i in range(len(imspaths)):\n        sp = f.add_subplot(rows, ceildiv(len(imspaths), rows), i+1)\n        sp.axis('Off')\n        if titles is not None: sp.set_title(titles[i], fontsize=16)\n        img = plt.imread(imspaths[i])\n        plt.imshow(img)","13e682dc":"normal_images = list(paths.list_images(f\"{dataset_path}\/normal\"))\ncovid_images = list(paths.list_images(f\"{dataset_path}\/covid\"))","3452b0b7":"plots_from_files(normal_images, rows=5, maintitle=\"Normal X-ray images\")","048cfa62":"plots_from_files(covid_images, rows=5, maintitle=\"Covid-19 X-ray images\")","7662d9b9":"# initialize the initial learning rate, number of epochs to train for,\n# and batch size\nINIT_LR = 1e-3\nEPOCHS = 30\nBS = 8","ca0b26d2":"# grab the list of images in our dataset directory, then initialize\n# the list of data (i.e., images) and class images\nprint(\"[INFO] loading images...\")\nimagePaths = list(paths.list_images(dataset_path))\ndata = []\nlabels = []\n# loop over the image paths\nfor imagePath in imagePaths:\n    # extract the class label from the filename\n    label = imagePath.split(os.path.sep)[-2]\n    # load the image, swap color channels, and resize it to be a fixed\n    # 224x224 pixels while ignoring aspect ratio\n    image = cv2.imread(imagePath)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image, (224, 224))\n    # update the data and labels lists, respectively\n    data.append(image)\n    labels.append(label)\n# convert the data and labels to NumPy arrays while scaling the pixel\n# intensities to the range [0, 1]\ndata = np.array(data) \/ 255.0\nlabels = np.array(labels)","7df7f377":"# perform one-hot encoding on the labels\nlb = LabelBinarizer()\nlabels = lb.fit_transform(labels)\nlabels = to_categorical(labels)\n# partition the data into training and testing splits using 80% of\n# the data for training and the remaining 20% for testing\n(trainX, testX, trainY, testY) = train_test_split(data, labels, test_size=0.20, stratify=labels, random_state=42)\n# initialize the training data augmentation object\ntrainAug = ImageDataGenerator(rotation_range=15, fill_mode=\"nearest\")","e5175945":"# load the VGG16 network, ensuring the head FC layer sets are left\n# off\nbaseModel = VGG16(weights=\"imagenet\", include_top=False, input_tensor=Input(shape=(224, 224, 3)))\n# construct the head of the model that will be placed on top of the\n# the base model\nheadModel = baseModel.output\nheadModel = AveragePooling2D(pool_size=(4, 4))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(128, activation=\"relu\")(headModel)\nheadModel = Dropout(0.6)(headModel)\nheadModel = Dense(2, activation=\"softmax\")(headModel)\n# place the head FC model on top of the base model (this will become\n# the actual model we will train)\nmodel = Model(inputs=baseModel.input, outputs=headModel)\n# loop over all layers in the base model and freeze them so they will\n# *not* be updated during the first training process\nfor layer in baseModel.layers:\n    layer.trainable = False","2761afe7":"# compile our model\nprint(\"[INFO] compiling model...\")\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])\n\n# train the head of the network\nprint(\"[INFO] training head...\")\nH = model.fit_generator(\n    trainAug.flow(trainX, trainY, batch_size=BS),\n    steps_per_epoch=len(trainX) \/\/ BS,\n    validation_data=(testX, testY),\n    validation_steps=len(testX) \/\/ BS,\n    epochs=EPOCHS)","431e08e2":"accs = H.history['accuracy']\nval_accs = H.history['val_accuracy']\n\nplt.plot(range(len(accs)),accs, label = 'Training_accuracy')\nplt.plot(range(len(accs)),val_accs, label = 'Validation_accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epochs')\nplt.legend()\nplt.show()","376681a2":"loss = H.history['loss']\nval_loss = H.history['val_loss']\n\nplt.plot(range(len(accs)),loss, label = 'Training_loss')\nplt.plot(range(len(accs)),val_loss, label = 'Validation_loss')\nplt.ylabel('loss')\nplt.xlabel('epochs')\nplt.legend()\nplt.show()","0e1c87e6":"# plot the training loss and accuracy\nN = EPOCHS\nplt.style.use(\"ggplot\")\nplt.figure()\nplt.plot(np.arange(0, N), H.history[\"loss\"], label=\"train_loss\")\nplt.plot(np.arange(0, N), H.history[\"val_loss\"], label=\"val_loss\")\nplt.plot(np.arange(0, N), H.history[\"accuracy\"], label=\"train_acc\")\nplt.plot(np.arange(0, N), H.history[\"val_accuracy\"], label=\"val_acc\")\nplt.title(\"Training Loss and Accuracy on COVID-19 Dataset\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"lower left\")\nplt.savefig(\"plot.png\")","f6510f36":"# make predictions on the testing set\nprint(\"[INFO] evaluating network...\")\npredIdxs = model.predict(testX, batch_size=BS)\n# for each image in the testing set we need to find the index of the\n# label with corresponding largest predicted probability\npredIdxs = np.argmax(predIdxs, axis=1)\n# show a nicely formatted classification report\nprint(classification_report(testY.argmax(axis=1), predIdxs, target_names=lb.classes_))","079b5874":"# compute the confusion matrix and and use it to derive the raw\n# accuracy, sensitivity, and specificity\ncm = confusion_matrix(testY.argmax(axis=1), predIdxs)\ntotal = sum(sum(cm))\nacc = (cm[0, 0] + cm[1, 1]) \/ total\nsensitivity = cm[0, 0] \/ (cm[0, 0] + cm[0, 1])\nspecificity = cm[1, 1] \/ (cm[1, 0] + cm[1, 1])\n# show the confusion matrix, accuracy, sensitivity, and specificity\nprint(cm)\nprint(\"acc: {:.4f}\".format(acc))\nprint(\"sensitivity: {:.4f}\".format(sensitivity))\nprint(\"specificity: {:.4f}\".format(specificity))","f92f3c25":"In this notebook, the COVID-19 detection is performed using the [COVID-19 Chest X-ray Image Dataset](https:\/\/www.kaggle.com\/bachrr\/covid-chest-xray). The dataset contains chest X-ray images of normal and COVID-19 affected patients. Here, a convolutional neural network is adopted to extract features and classify images as normal and COVID-19 affected.","a176b3f4":"## Build Dataset","fef02f0e":"## Model","28f312ad":"To prevent infection and to slow transmission of COVID-19, do the following:\n\n* Wash your hands regularly with soap and water, or clean them with alcohol-based hand rub.\n* Maintain at least 1 metre distance between you and people coughing or sneezing.\n* Avoid touching your face.\n* Cover your mouth and nose when coughing or sneezing.\n* Stay home if you feel unwell.\n* Refrain from smoking and other activities that weaken the lungs.\n* Practice physical distancing by avoiding unnecessary travel and staying away from large groups of people.","579953bc":"### Training","691b7b77":"# Prevention","d9093c35":"![thediplomat-2020-04-01.png](attachment:thediplomat-2020-04-01.png)","3a9af3e5":"Helper function to plot the images in a grid","1694a8a8":"## Credits\nThis notebook is based on this tutorial - [link](https:\/\/www.pyimagesearch.com\/2020\/03\/16\/detecting-covid-19-in-x-ray-images-with-keras-tensorflow-and-deep-learning\/)","202b0bb7":"### Build normal xray dataset","ce6eb46d":"### Covid xray dataset","85c0b261":"***Courtesy: [World Health Organization](https:\/\/www.who.int\/health-topics\/coronavirus#tab=tab_2)***","f454d966":"#### Confusion matrix","abcca833":"### Plot trining metrics","b194e548":"### Evaluation","6c932257":"# **Symptoms**","d13fcc01":"# Introduction","500a3ba4":"## Data preprocessing","9a72f389":"## Plot x-rays","98b824bc":"Most common symptoms:\n* fever.\n* dry cough.\n* tiredness.\n\nLess common symptoms:\n* aches and pains.\n* sore throat.\n* diarrhoea.\n* conjunctivitis.\n* headache.\n* loss of taste or smell.\n* a rash on skin, or discolouration of fingers or toes.\n\nSerious symptoms:\n* difficulty breathing or shortness of breath.\n* chest pain or pressure.\n* loss of speech or movement.\n\nSeek immediate medical attention if you have serious symptoms.  Always call before visiting your doctor or health facility. People with mild symptoms who are otherwise healthy should manage their symptoms at home. On average it takes 5\u20136 days from when someone is infected with the virus for symptoms to show, however it can take up to 14 days. ","6a5641a7":"## COVID-19\n\nCoronavirus disease (COVID-19) is an infectious disease caused by a newly discovered coronavirus.\n\nMost people infected with the COVID-19 virus will experience mild to moderate respiratory illness and recover without requiring special treatment.  Older people, and those with underlying medical problems like cardiovascular disease, diabetes, chronic respiratory disease, and cancer are more likely to develop serious illness.\n\nThe best way to prevent and slow down transmission is be well informed about the COVID-19 virus, the disease it causes and how it spreads. Protect yourself and others from infection by washing your hands or using an alcohol based rub frequently and not touching your face. \n\nThe COVID-19 virus spreads primarily through droplets of saliva or discharge from the nose when an infected person coughs or sneezes, so it\u2019s important that you also practice respiratory etiquette (for example, by coughing into a flexed elbow).\n\nAt this time, there are no specific vaccines or treatments for COVID-19. However, there are many ongoing clinical trials evaluating potential treatments. WHO will continue to provide updated information as soon as clinical findings become available.","77b3e370":"**Accuracy and Loss curve in single graph**"}}