{"cell_type":{"fe32f7e1":"code","88e059af":"code","999600e3":"code","22b00a86":"code","fa3b0f16":"code","119f522f":"code","15a183b4":"code","d0eeee22":"code","c38b601f":"code","469c64a5":"code","d9f051a4":"code","30f0a3d8":"code","f95c614e":"code","92d964b6":"code","f7242406":"code","8000c103":"code","a0e9c904":"code","056f034e":"code","159beae0":"code","02b2694a":"code","bcd4c703":"code","3378ac4c":"code","986c45b3":"code","280b2dcc":"code","5fb6ac32":"code","06c3b9ea":"code","79d376b9":"markdown","34f0cf13":"markdown","2b490832":"markdown","988912b4":"markdown","3be45c8d":"markdown","c20c79fe":"markdown","f0e9734e":"markdown","2f0ede37":"markdown","711b3347":"markdown","264beb4e":"markdown","4f93f6a9":"markdown","5b7f1e8b":"markdown","a909010e":"markdown","d059d3c8":"markdown","8e523b23":"markdown"},"source":{"fe32f7e1":"!pip install -q efficientnet --quiet","88e059af":"import math, re, os\n\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\nimport efficientnet.tfkeras as efn\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","999600e3":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","22b00a86":"# For tf.dataset\nAUTO = tf.data.experimental.AUTOTUNE\n\n# Data access\nGCS_DS_PATH = KaggleDatasets().get_gcs_path()\n\n# Configuration\nEPOCHS = 10 # original 10\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync","fa3b0f16":"def append_path(pre):\n    return np.vectorize(lambda file: os.path.join(GCS_DS_PATH, pre, file))","119f522f":"sub = pd.read_csv('\/kaggle\/input\/alaska2-image-steganalysis\/sample_submission.csv')\ntrain_filenames = np.array(os.listdir(\"\/kaggle\/input\/alaska2-image-steganalysis\/Cover\/\"))","15a183b4":"np.random.seed(0)\npositives = train_filenames.copy()\nnegatives = train_filenames.copy()\nnp.random.shuffle(positives)\nnp.random.shuffle(negatives)\n\njmipod = append_path('JMiPOD')(positives[:10000])\njuniward = append_path('JUNIWARD')(positives[10000:20000])\nuerd = append_path('UERD')(positives[20000:30000])\n\npos_paths = np.concatenate([jmipod, juniward, uerd])","d0eeee22":"test_paths = append_path('Test')(sub.Id.values)\nneg_paths = append_path('Cover')(negatives[:30000])","c38b601f":"train_paths = np.concatenate([pos_paths, neg_paths])\ntrain_labels = np.array([1] * len(pos_paths) + [0] * len(neg_paths))","469c64a5":"train_paths, valid_paths, train_labels, valid_labels = train_test_split(\n    train_paths, train_labels, test_size=0.15, random_state=2020)","d9f051a4":"def decode_image(filename, label=None, image_size=(512, 512)):\n    bits = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(bits, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.resize(image, image_size)\n    \n    if label is None:\n        return image\n    else:\n        return image, label\n\ndef data_augment(image, label=None):\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    \n    if label is None:\n        return image\n    else:\n        return image, label","30f0a3d8":"train_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((train_paths, train_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .cache()\n    .repeat()\n    .shuffle(1024)\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n)\n\nvalid_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((valid_paths, valid_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n    .cache()\n    .prefetch(AUTO)\n)\n\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(test_paths)\n    .map(decode_image, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n)","f95c614e":"def build_lrfn(lr_start=0.00001, lr_max=0.00008, \n               lr_min=0.000001, lr_rampup_epochs=5, \n               lr_sustain_epochs=0, lr_exp_decay=.8):\n    lr_max = lr_max * strategy.num_replicas_in_sync\n\n    def lrfn(epoch):\n        if epoch < lr_rampup_epochs:\n            lr = (lr_max - lr_start) \/ lr_rampup_epochs * epoch + lr_start\n        elif epoch < lr_rampup_epochs + lr_sustain_epochs:\n            lr = lr_max\n        else:\n            lr = (lr_max - lr_min) * lr_exp_decay**(epoch - lr_rampup_epochs - lr_sustain_epochs) + lr_min\n        return lr\n    \n    return lrfn","92d964b6":"with strategy.scope():\n    # EfficientNetB7\n    model = tf.keras.Sequential([\n        efn.EfficientNetB7(\n            input_shape=(512, 512, 3),\n            weights='imagenet',\n            include_top=False\n        ),\n        L.GlobalAveragePooling2D(),\n        L.Dense(1, activation='sigmoid')\n    ])\n        \n    model.compile(\n        optimizer='adam',\n        loss = 'binary_crossentropy',\n        metrics=['accuracy']\n    )\n    \n    # EfficientNetB3\n    model2 = tf.keras.Sequential([\n        efn.EfficientNetB3(\n            input_shape=(512, 512, 3),\n            weights='imagenet',\n            include_top=False\n        ),\n        L.GlobalAveragePooling2D(),\n        L.Dense(1, activation='sigmoid')\n    ])\n        \n    model2.compile(\n        optimizer='adam',\n        loss = 'binary_crossentropy',\n        metrics=['accuracy']\n    )\n    ","f7242406":"model.summary()","8000c103":"model2.summary()","a0e9c904":"checkpoint1 = tf.keras.callbacks.ModelCheckpoint('model_effnetb7.h5', save_best_only=True, monitor='val_loss', mode='min')\ncheckpoint2 = tf.keras.callbacks.ModelCheckpoint('model_effnetb3.h5', save_best_only=True, monitor='val_loss', mode='min')\nreduce_lr_loss = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=5, verbose=1, epsilon=1e-4, mode='min')","056f034e":"lrfn = build_lrfn()\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=1)\nSTEPS_PER_EPOCH = train_labels.shape[0] \/\/ BATCH_SIZE","159beae0":"history = model.fit(\n    train_dataset, \n    epochs=EPOCHS, \n    callbacks=[checkpoint1, reduce_lr_loss, lr_schedule],\n    steps_per_epoch=STEPS_PER_EPOCH,\n    validation_data=valid_dataset\n)","02b2694a":"history2 = model2.fit(\n    train_dataset, \n    epochs=EPOCHS, \n    callbacks=[checkpoint2, reduce_lr_loss, lr_schedule],\n    steps_per_epoch=STEPS_PER_EPOCH,\n    validation_data=valid_dataset\n)","bcd4c703":"def display_training_curves(training, validation, title, subplot):\n    \"\"\"\n    Source: https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu\n    \"\"\"\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","3378ac4c":"display_training_curves(\n    history.history['loss'], \n    history.history['val_loss'], \n    'loss', 211)\ndisplay_training_curves(\n    history.history['accuracy'], \n    history.history['val_accuracy'], \n    'accuracy', 212)","986c45b3":"display_training_curves(\n    history2.history['loss'], \n    history2.history['val_loss'], \n    'loss', 211)\ndisplay_training_curves(\n    history2.history['accuracy'], \n    history2.history['val_accuracy'], \n    'accuracy', 212)","280b2dcc":"pred1 = model.predict(test_dataset, verbose=1) # EfficientNetB7","5fb6ac32":"pred2 = model2.predict(test_dataset, verbose=1) # EfficientNetB3","06c3b9ea":"sub.Label = 0.5*pred1 + 0.5*pred2\nsub.to_csv('submission.csv', index=False)\nsub.head()","79d376b9":"## EfficientNetB3 Training Curve","34f0cf13":"# Load label and paths","2b490832":"# Evaluation","988912b4":"# Imports","3be45c8d":"# Start training","c20c79fe":"# Other References\n\n- https:\/\/www.kaggle.com\/xhlulu\/flowers-tpu-concise-efficientnet-b7\n- https:\/\/www.kaggle.com\/xhlulu\/plant-pathology-very-concise-tpu-efficientnet\n- https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu\n- https:\/\/codelabs.developers.google.com\/codelabs\/keras-flowers-data\/#0","f0e9734e":"## EfficientNetB7 Training Curve","2f0ede37":"## Helper Functions","711b3347":"# Create Dataset objects\n\nFrom @xhlulu: A `tf.data.Dataset` object is needed in order to run the model smoothly on the TPUs.","264beb4e":"Unhide below to see helper function `display_training_curves`:","4f93f6a9":"# TPU Strategy and other configs ","5b7f1e8b":"## Load Model into TPU","a909010e":"# Acknowledgements\n\n- Built-upon https:\/\/www.kaggle.com\/xhlulu\/alaska2-efficientnet-on-tpus by @xhlulu\n- Added backbone EfficientNetB7 and blend with EfficientNetB3\n- Experimented with number of epochs and modified LR scheduling","d059d3c8":"# Submission","8e523b23":"# Modelling"}}