{"cell_type":{"fe21b357":"code","fc758947":"code","2840c2a1":"code","f08b9045":"code","6dad2624":"code","c00ca568":"code","3e55cf97":"code","6ebc3810":"code","2292655c":"code","aafc7531":"code","02a8c54b":"code","10e89e28":"code","4c46a908":"code","386732d9":"code","89691b91":"code","19589309":"code","5c9b2955":"code","bea5afa9":"code","4b022013":"code","889db0eb":"code","db0f9cad":"markdown","2b7af709":"markdown","6895fdd1":"markdown","4f5400eb":"markdown","6c9438d4":"markdown"},"source":{"fe21b357":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nimport tensorflow as tf","fc758947":"dfs = [pd.read_csv('..\/input\/eeg-data-from-hands-movement\/Dataset\/user_' + user + '.csv') for user in ['a', 'b', 'c', 'd']]","2840c2a1":"for i in range(len(dfs)):\n    dfs[i]['User'] = pd.Series(i, index=dfs[i].index)","f08b9045":"data = pd.concat(dfs, axis=0).sample(frac=1.0, random_state=123).reset_index(drop=True)","6dad2624":"data","c00ca568":"def onehot_encode(df, column):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=column)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","3e55cf97":"def preprocess_inputs(df, target='Class'):\n    df = df.copy()\n    \n    # One-hot encode whichever target column is not being used\n    targets = ['Class', 'User']\n    targets.remove(target)\n    df = onehot_encode(df, column=targets[0])\n    \n    # Split df into X and y\n    y = df[target].copy()\n    X = df.drop(target, axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=123)\n    \n    # Scale X with a standard scaler\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    \n    X_train = pd.DataFrame(scaler.transform(X_train), columns=X.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), columns=X.columns)\n    \n    return X_train, X_test, y_train, y_test","6ebc3810":"def build_model(num_classes=3):\n    \n    inputs = tf.keras.Input(shape=(X_train.shape[1],))\n    x = tf.keras.layers.Dense(128, activation='relu')(inputs)\n    x = tf.keras.layers.Dense(128, activation='relu')(x)\n    outputs = tf.keras.layers.Dense(num_classes, activation='softmax')(x)\n    \n    model = tf.keras.Model(inputs=inputs, outputs=outputs)\n    \n    model.compile(\n        optimizer='adam',\n        loss='sparse_categorical_crossentropy',\n        metrics=['accuracy']\n    )\n    \n    return model","2292655c":"X_train, X_test, y_train, y_test = preprocess_inputs(data, target='Class')","aafc7531":"X_train","02a8c54b":"y_train","10e89e28":"y_train.value_counts()","4c46a908":"class_model = build_model(num_classes=3)\n\nclass_history = class_model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=32,\n    epochs=50,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=3,\n            restore_best_weights=True\n        )\n    ]\n)","386732d9":"class_acc = class_model.evaluate(X_test, y_test, verbose=0)[1]\nprint(\"Test Accuracy (Class Model): {:.2f}%\".format(class_acc * 100))","89691b91":"X_train, X_test, y_train, y_test = preprocess_inputs(data, target='User')","19589309":"X_train","5c9b2955":"y_train","bea5afa9":"y_train.value_counts()","4b022013":"user_model = build_model(num_classes=4)\n\nuser_history = user_model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=32,\n    epochs=50,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=3,\n            restore_best_weights=True\n        )\n    ]\n)","889db0eb":"user_acc = user_model.evaluate(X_test, y_test, verbose=0)[1]\nprint(\"Test Accuracy (User Model): {:.2f}%\".format(user_acc * 100))","db0f9cad":"# Predicting User","2b7af709":"# Helper Functions","6895fdd1":"# Task for Today  \n\n***\n\n## Hand Movement and User Prediction  \n\nGiven *data EEG data from different users performing different hand movements*, let's try to predict the **hand movement** and the **user** of a given reading.\n\nWe will use a TensorFlow neural network to make our predictions. ","4f5400eb":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/hEExwYfoieY","6c9438d4":"# Predicting Hand Movement Class"}}