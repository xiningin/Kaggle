{"cell_type":{"c1faee55":"code","79f647c2":"code","a37db5b3":"code","be1cc26b":"code","dbd93450":"code","029730a2":"code","033fdee4":"code","e5cf5fdd":"code","d80ff967":"code","2fef341a":"code","92efa202":"code","11abe325":"code","99a893da":"code","5d1fde26":"markdown","17321993":"markdown"},"source":{"c1faee55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport zipfile \nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\nimport tifffile\nimport cv2 as cv\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n'''for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n'''\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","79f647c2":"\"\"\"\ntrain_csv = pd.read_csv(\"..\/input\/hubmap-kidney-segmentation\/train.csv\")\nlist_ID = list()\nfor i in range(len(train_csv)):\n    list_ID.append(train_csv.id[i])\nprint(list_ID)\n\"\"\"","a37db5b3":"\"\"\"\n#get an image \nimport tifffile\ndef get_image(ID):\n    path = \"..\/input\/hubmap-kidney-segmentation\/train\/\"+ID+\".tiff\"\n    return tifffile.imread(path)\nimg = get_image(list_ID[3])\n\"\"\"","be1cc26b":"\"\"\"\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,16))\nplt.imshow(img)\n\"\"\"","dbd93450":"\"\"\"\n# get the mask image or rletomask\nID = list_ID[3]\ndef rle2mask(mask_rle,shape):\n    s = mask_rle.split()\n    starts, lengths = [\n        np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])\n    ]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0] * shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo : hi] = 1\n    return img.reshape(shape).T\nmask = rle2mask(train_csv[train_csv[\"id\"]==ID][\"encoding\"].values[0],(img.shape[1],img.shape[0]),)\nplt.figure(figsize=(10,16))\nplt.imshow(mask)\n\"\"\"","029730a2":"\"\"\"\ndef Coor_of_Glomeruli(ID,n):\n    df = pd.read_json(\"..\/input\/hubmap-kidney-segmentation\/train\/\"+ID+\".json\")\n    return np.array(df.geometry[n][\"coordinates\"])[0,:,:],n\n# Got the corrdinates\ndef find_box(coor_array,h,w):\n    L_x = coor_array[0][0]\n    S_x = L_x\n    L_y = coor_array[0][1]\n    S_y = L_y\n    for i in range(len(coor_array)):\n        if L_x < coor_array[i][0]:\n            L_x = coor_array[i][0]\n    for i in range(len(coor_array)):\n        if S_x > coor_array[i][0]:\n            S_x = coor_array[i][0]\n    for i in range(len(coor_array)):\n        if L_y < coor_array[i][1]:\n            L_y = coor_array[i][1]\n    for i in range(len(coor_array)):\n        if S_y > coor_array[i][1]:\n            S_y = coor_arraty[i][1]\n    return L_x,S_x,L_y,S_y\n# got the box\ndef save_image(sub_image,image_id,no_of_glomeruli):\n    path = '..\/working\/'+image_id+\"\/\"+str(no_of_glomeruli)+'.png'\n    #ther many glomeruli in image so no_of_glomeruli represent that \n    cv.imwrite(path,sub_image)\n    \ndef total_glomeruli(ID):\n    df = pd.read_json(\"..\/input\/hubmap-kidney-segmentation\/train\/\"+ID+\".json\")\n    return len(df.geometry)\n\n\n\n    \nfor i in range(len(train_csv.id)):\n    image_id = list_ID[3]\n    #get the coordinates array of each glomeruli\n    image = mask\n    Total_Glomeruli = total_glomeruli(image_id)\n    w,h = image.shape[:2]\n    #path = os.path.join(\"..\/working\",image_id)\n    #os.mkdir(path,0o666)\n    for j in range(1):#Total_Glomeruli):\n        coor_array,no_of_Glomeruli = Coor_of_Glomeruli(image_id,j)\n        #get the box\n        #print(\"shape of array\",coor_array.shape)\n        L_x,S_x,L_y,S_y = find_box(coor_array,h,w)\n        #crop the image\n        #print(\"box coordinate\",L_x,S_x,L_y,S_y)\n        #plt.figure(figsize=(10,16))\n        if S_x < w and S_y < h and L_x < w and L_y < h:\n            sub_image = image[S_y:L_y,S_x:L_x]    \n        # save the cropped image\n        #print('sub image shape',sub_image.shape)\n        #print('image shape',image.shape)\n        #print('image ID',image_id)\n        plt.imshow(sub_image)\n        #save_image(sub_image,image_id,no_of_Glomeruli)\n        #start with new image\n    print(\"done Id \",image_id)\n\"\"\"","033fdee4":"\"\"\"\ndef rle_encode(img):\n    '''\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    This simplified method requires first and last pixel to be zero\n    '''\n    pixels = img.T.flatten()\n    \n    # This simplified method requires first and last pixel to be zero\n    pixels[0] = 0\n    pixels[-1] = 0\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 2\n    runs[1::2] -= runs[::2]\n    \n    return ' '.join(str(x) for x in runs)\n\"\"\"","e5cf5fdd":"\"\"\"\n\nprint(rle_encode(mask))\n\n\"\"\"","d80ff967":"\"\"\"\n\nprint(train_csv.encoding[3])\n\n\n\"\"\"","2fef341a":"# a cell that use all the above function and variable to create a the image cropping\ndef get_id(n):\n    return df_train.id[n]\n\n\ndef Coor_of_Glomeruli(ID,n):\n    df = pd.read_json(\"..\/input\/hubmap-kidney-segmentation\/train\/\"+ID+\".json\")\n    return np.array(df.geometry[n][\"coordinates\"])[0,:,:],n\n\n\ndef get_image(ID):\n    return tifffile.imread(\"..\/input\/hubmap-kidney-segmentation\/train\/\"+ID+\".tiff\")\n\n\ndef find_box(coor_array,h,w):\n    L_x = coor_array[0][0]\n    S_x = L_x\n    L_y = coor_array[0][1]\n    S_y = L_y\n    for i in range(len(coor_array)):\n        if L_x < coor_array[i][0]:\n            L_x = coor_array[i][0]\n    for i in range(len(coor_array)):\n        if S_x > coor_array[i][0]:\n            S_x = coor_array[i][0]\n    for i in range(len(coor_array)):\n        if L_y < coor_array[i][1]:\n            L_y = coor_array[i][1]\n    for i in range(len(coor_array)):\n        if S_y > coor_array[i][1]:\n            S_y = coor_arraty[i][1]\n    return L_x,S_x,L_y,S_y\n\n\ndef mask2rle(img):\n    '''\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels= img.T.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)\n \n\n\n\ndef save_image(sub_image,image_id,no_of_glomeruli):\n    path = '..\/working\/'+image_id+\"_\"+str(no_of_glomeruli)+'.png'\n    #ther many glomeruli in image so no_of_glomeruli represent that \n    cv.imwrite(path,sub_image)\n\n    \ndef total_glomeruli(ID):\n    df = pd.read_json(\"..\/input\/hubmap-kidney-segmentation\/train\/\"+ID+\".json\")\n    return len(df.geometry)\n\n\n\ndef rle2mask(mask_rle,shape):\n    s = mask_rle.split()\n    starts, lengths = [\n    np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])\n    ]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0] * shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo : hi] = 1\n    return img.reshape(shape).T\n\n########################\n########################\ndf_train = pd.read_csv(\"..\/input\/hubmap-kidney-segmentation\/train.csv\")\ntrain_data = pd.DataFrame(data=None,columns=['file_name','rle',],index=None) # creating a empyt data\n\n\npath = os.path.join(\"..\/working\/\")\n#os.mkdir(path,)\n########################\n########################\n\n\n\n","92efa202":"\n# getting rle \n    ## cropping the mask\nfor i in range(len(df_train.id)):\n    image_id = get_id(i) #got the image id \n    #get the coordinates array of each glomeruli\n    image = tifffile.imread(\"..\/input\/hubmap-kidney-segmentation\/train\/\"+image_id+\".tiff\")\n    image = rle2mask(df_train[df_train[\"id\"]==image_id][\"encoding\"].values[0],(image.shape[1],image.shape[0]),)\n    Total_Glomeruli = total_glomeruli(image_id)\n    w,h = image.shape[:2]\n    for j in range(Total_Glomeruli):\n        coor_array,no_of_glomeruli = Coor_of_Glomeruli(image_id,j)\n        #get the box\n        L_x,S_x,L_y,S_y = find_box(coor_array,h,w)\n        #crop the mask\n        if S_x < w and S_y < h and L_x < w and L_y < h:\n            sub_image = image[S_y:L_y,S_x:L_x]    \n        # now get rle sub image\n        rle = mask2rle(sub_image)\n        # now name of image\n        name_of_image = image_id+\"\/_\"+str(no_of_glomeruli)+'.png'\n        # write the rle image name in dataframe\n        new_row = {'file_name':name_of_image,'rle':rle,}\n        train_data=train_data.append(new_row,ignore_index=True)\n                \n    ","11abe325":"train_data.info()","99a893da":"print('creating data_csv........')\ntrain_data.to_csv(path+'train_data.csv',index=False)\nprint('csv createad')\n","5d1fde26":"* cropping mask image\n* get there encoding\n* **This is process of image segmentation**","17321993":"# OutPut is RLE encoding for every images that has been generated in \n[This image (cropped images of object that we have to find)](http:\/\/)"}}