{"cell_type":{"0d85d90d":"code","ba343d3c":"code","bce03ba3":"code","10371ef2":"code","3c772ba3":"code","e53ec16c":"code","31be7e68":"code","29752629":"code","15b16063":"code","1ba2b68a":"code","8e8807a9":"code","152d9bbd":"code","490908f5":"code","7f070d88":"code","8daa0338":"code","7345459f":"code","33fa14b2":"code","c8b86a78":"code","6fd27086":"code","c52b9c3c":"code","3a07caea":"code","1785ab59":"code","662dda1f":"code","231caf44":"code","36bbda02":"code","6fdce574":"code","deb101ef":"code","c0d68b13":"code","f141f7c2":"code","9fb202ea":"markdown","eb93e98d":"markdown","7a96d665":"markdown","7325b2a0":"markdown","451888c7":"markdown","8e18cba6":"markdown","54bc6cae":"markdown","0b36821e":"markdown","dacee975":"markdown","56d436db":"markdown","78b555cb":"markdown","2de6f657":"markdown"},"source":{"0d85d90d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ba343d3c":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","bce03ba3":"train_df.columns","10371ef2":"train_df.head()","3c772ba3":"train_df.info()","e53ec16c":"train_df.describe().T","31be7e68":"train_df.shape","29752629":"train_df.info()","15b16063":"def bar_plot(variable):\n    \"\"\"\n       input: Variable ex:\"Sex\"\n       output: bar plot & value count\n    \"\"\"\n    var = train_df[variable] # get feature\n    varValue = var.value_counts() # count number of categorical variable\n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","1ba2b68a":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","8e8807a9":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print (\"{} \\n\".format(train_df[c].value_counts))","152d9bbd":"def his_plot(variable):\n    \"\"\" input: variable ex: age  output: histogram plot\"\"\"\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show","490908f5":"numericVar = [\"Age\", \"Fare\"]\nfor c in numericVar:\n    his_plot(c)","7f070d88":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\", ascending= False)","8daa0338":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","7345459f":"#SibSp vs Survived \ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","33fa14b2":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","c8b86a78":"def ditect_outlier(df,features):\n    outlier_indices = []\n    for c in features:\n        # 1st quatlier\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartiel\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # Detect outlier and their indeces\n        outlier_liset_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # Store indeces\n        outlier_indices.extend(outlier_liset_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v>2)\n    return multiple_outliers","6fd27086":"train_df.loc[ditect_outlier(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","c52b9c3c":"# Drop outliers\ntrain_df = train_df.drop(ditect_outlier(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis = 0).reset_index(drop = True)","3a07caea":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis = 0).reset_index(drop = True)","1785ab59":"train_df.head()","662dda1f":"train_df.columns[train_df.isnull().any()]","231caf44":"train_df.isnull().sum()","36bbda02":"train_df[train_df[\"Embarked\"].isnull()]","6fdce574":"train_df.boxplot(column = \"Fare\",by =\"Embarked\")\nplt.show()","deb101ef":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","c0d68b13":"train_df[train_df[\"Fare\"].isnull()]","f141f7c2":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))\ntrain_df[train_df[\"Fare\"].isnull()]","9fb202ea":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Emparked, Cabin, Name, Ticket, Sipsp and Parch\n* Numerical Variable: PassengerId, Age and Fare","eb93e98d":"* float64(2):  Far ve Age\n* int64(5):  Pclass, sibsp, parch , passengerId and survided \n* object(5):  Cabin, embarked, ticket, sex and name","7a96d665":"<a id = \"4\"><\/a><br>\n## Categorical Variable","7325b2a0":"<a id = \"7\"><\/a><br>\n# Outlier Detection","451888c7":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","8e18cba6":"# Introduction\n\nThe sinking of Titanic is one of the most notorious shiperecks in the histort. In 1912, during her voyage. The Titanic sank after colliding with an \u0131ceberg. Killing 1592 out of 2224 passengers and crew\n\n<font color = \"blue\">\nContent:\n    \n1. [Load and Check data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10) ","54bc6cae":"<a id = \"9\"><\/a><br>\n## Find Missing Value","0b36821e":"<a id = \"2\"><\/a><br>\n# Variable Description\n\n1. PassengerId: unique id number to each passenger\n1. Survived: passenger survive(1) or died(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex: genger of passenger\n1. Age: age of passenger\n1. SibSp: number of siblings\/spouses\n1. Parch: numper of parents\/children\n1. Ticket: ticket number\n1. Fare: amount of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port where passenger embarked (C: Cherbourg, Q: Queenstown,S: Southampton)","dacee975":"<a id = \"5\"><\/a><br>\n## Numerical Variable ","56d436db":"<a id = \"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","78b555cb":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","2de6f657":"<a id =\"1\"><\/a><br>\n## Load and Check data"}}