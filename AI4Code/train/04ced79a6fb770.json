{"cell_type":{"ee10ee84":"code","984f09fa":"code","df204d42":"code","8908a010":"code","024fb99d":"code","ab8dab82":"code","e3e126f8":"code","41b98b42":"code","95289b86":"code","b1458219":"code","1a859548":"code","bfdba0d7":"code","aadbbc7c":"code","ee668373":"code","e1f20adc":"code","91132335":"code","2b7b164a":"code","35c03e15":"code","005503b1":"code","d7b326d8":"code","d3f426c1":"code","62e875d9":"code","bf6222c7":"code","da53d5ac":"code","9fecd84c":"code","192e6a8d":"code","0e390000":"code","f366a888":"code","65db7f0b":"code","ac3d564d":"code","bbae480a":"code","9806ab86":"markdown","a866ddfd":"markdown"},"source":{"ee10ee84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","984f09fa":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport geopandas as gpd\nfrom shapely import wkt\nfrom folium import FeatureGroup, LayerControl, Map, Marker\nfrom folium.plugins import HeatMap\nimport folium\nimport branca\nimport branca.colormap as cm\n","df204d42":"import warnings\nwarnings.filterwarnings('ignore')","8908a010":"data = pd.read_csv('..\/input\/newyork-subway-entry-exit-dataset-for-dataviz\/rows.csv')\ndata.T.head(50)","024fb99d":"data.dtypes","ab8dab82":"data.columns","e3e126f8":"plt.figure(figsize=(20,20))\nsns.scatterplot(x='Station Longitude', y='Station Latitude', hue='Division',s=20, data=data)","41b98b42":"plt.figure(figsize=(20,20))\nsns.scatterplot(x='Station Longitude', y='Station Latitude', hue='Line',s=20, data=data)","95289b86":"import matplotlib.pyplot as plt\n\n\n\n#sns.scatterplot(x='Station Longitude', y='Station Latitude', hue='Line',s=20, data=data)\n\ndata.plot(kind=\"scatter\", x=\"Station Longitude\", y=\"Station Latitude\",\n    #s=data['Line'].count(), \n    label=\"Line\",\n    #cmap=plt.get_cmap(\"jet\"),\n    colorbar=True, alpha=0.4, figsize=(10,7),\n)\nplt.legend()\nplt.show()","b1458219":"div_count = data.groupby('Division').agg('count').reset_index()\nline_count = data.groupby('Line').agg('count').reset_index()\nstation_count = data.groupby('Station Name').agg('count').reset_index()\n\nprint(div_count.head())\nprint(line_count.head())\nprint(station_count.head())\n","1a859548":"fig, ax1 = plt.subplots(1,1, figsize=(10,10))\nsns.barplot(x='Division', y='Line', data=div_count)\nax1.set_title('Number of Entries by Division', fontsize=15)\nax1.set_xlabel('Division', fontsize=12)\nax1.set_ylabel('Count', fontsize=12)\n\nfig, ax2 = plt.subplots(1,1, figsize=(10,10))\nsns.barplot(y='Line', x='Division', data=line_count)\nax2.set_title('Number of Entries by Line', fontsize=15)\nax2.set_xlabel('Line', fontsize=12)\nax2.set_ylabel('Count', fontsize=12)\n\nfig, ax3 = plt.subplots(1,1, figsize=(10,100))\nsns.barplot(x='Line', y='Station Name', data=station_count, order=station_count.sort_values('Line', ascending = False)[\"Station Name\"])\nax3.set_title('Number of Entries by Station', fontsize=15)\nax3.set_xlabel('Station', fontsize=12)\nax3.set_ylabel('Count', fontsize=12)","bfdba0d7":"nyc = gpd.read_file(gpd.datasets.get_path('nybb'))\nnyc.head(5)","aadbbc7c":"train_routes = data.groupby(['Station Latitude','Station Longitude','Station Name'])['Line'].count().reset_index() #.rename(columns={'id':'Num_Trips'})\nprint(train_routes.head())\nprint(train_routes.Line.unique())","ee668373":"colors=cm.linear.Paired_12.scale(1, 12)\ntrain_routes_map = folium.Map(location = [40.730610,-73.935242],zoom_start = 10.5,)\nfor i in range(0,len(train_routes)):\n    folium.Circle(\n      location=[train_routes.iloc[i]['Station Latitude'], train_routes.iloc[i]['Station Longitude']],\n        radius=3,\n        fill=True,\n        color=colors(train_routes.iloc[i]['Line']),\n        popup=train_routes.iloc[i]['Station Name'],\n        tooltip=train_routes.iloc[i]['Station Name'],\n    ).add_to(train_routes_map)\ntrain_routes_map","e1f20adc":"data.describe()","91132335":"#data=data.replace(to_replace = np.nan, value = -99) ","2b7b164a":"plt.figure(figsize=(10,8), dpi= 80)\nsns.pairplot(data, kind=\"scatter\", hue=\"Line\", plot_kws=dict(s=80, edgecolor=\"white\", linewidth=2.5))\nplt.show()","35c03e15":"x_var = 'Line'\ngroupby_var = 'Division'\ndata_agg = data.loc[:, [x_var, groupby_var]].groupby(groupby_var)\nvals = [data[x_var].values.tolist() for i, data in data_agg]\n\nplt.figure(figsize=(16,9), dpi= 80)\ncolors = [plt.cm.rainbow(i\/float(len(vals)-1)) for i in range(len(vals))]\n#n, bins, patches = plt.hist(vals, data[x_var].unique().__len__(), stacked=True, density=False, color=colors[:len(vals)])\nn, bins, patches = plt.hist(vals, data[x_var].unique().__len__()-1, stacked=True, density=False, color=colors[:len(vals)])\n#Reduce length by one to make sure that the ticks and labels match\n\nplt.legend({group:col for group, col in zip(np.unique(data[groupby_var]).tolist(), colors[:len(vals)])})\nplt.title(f\"Stacked Histogram of ${x_var}$ colored by ${groupby_var}$\", fontsize=22)\nplt.xlabel(x_var)\nplt.ylabel(\"Frequency\")\nplt.ylim(0, 200)\nplt.xticks(ticks=bins, labels=np.unique(data[x_var]).tolist(), rotation=90, horizontalalignment='left')\nplt.show()","005503b1":"data.replace(to_replace=['West'],\n           value= ['W'], \n           inplace=True)\ndata.fillna(0)\nx_var = 'Line'\ngroupby_var = 'Corner'\ndata_agg = data.loc[:, [x_var, groupby_var]].groupby(groupby_var)\nvals = [data[x_var].values.tolist() for i, data in data_agg]\nplt.figure(figsize=(16,9), dpi= 80)\ncolors = [plt.cm.rainbow(i\/float(len(vals)-1)) for i in range(len(vals))]\nn, bins, patches = plt.hist(vals, \n                            data[x_var].unique().__len__(), \n                            orientation='horizontal',\n                            stacked=True, \n                            density=False, \n                            color=colors[:len(vals)])\n\nunique_labels = data[groupby_var].tolist()\nplt.legend(labels=np.unique(unique_labels), loc='best')\nplt.title(f\"Stacked Histogram of ${x_var}$ colored by ${groupby_var}$\", fontsize=22)\nplt.ylabel(x_var)\nplt.xlabel(\"Count\")\nxlabels=np.unique(data[x_var]).tolist()\nxlabels.append(\"\") #Append to make sure that the ticks are mapped accurately\nplt.yticks(ticks=bins, labels=xlabels, horizontalalignment='right')\nplt.xticks([])\nplt.show()","d7b326d8":"x_var = 'Station Name'\ngroupby_var = 'Division'\ndata_agg = data.loc[:, [x_var, groupby_var]].groupby(groupby_var)\nvals = [data[x_var].values.tolist() for i, data in data_agg]\ncolors = [plt.cm.nipy_spectral(i\/float(len(vals)-1)) for i in range(len(vals))]\nsns.set_context(\"paper\", rc={\"font.size\":8,\"axes.titlesize\":8,\"axes.labelsize\":5})   \n\nf=plt.figure(figsize=(16,48), dpi=100)\n\nf=sns.histplot(\n    data,\n    y=x_var, \n    hue=groupby_var,\n    multiple=\"stack\",\n#    palette=\"light:m_r\",\n    edgecolor=\".3\",\n    linewidth=.5,\n    color=colors[:len(vals)]\n)","d3f426c1":"x_var = 'Station Name'\ngroupby_var = 'Line'\ndata_agg = data.loc[:, [x_var, groupby_var]].groupby(groupby_var)\nvals = [data[x_var].values.tolist() for i, data in data_agg]\n\nplt.figure(figsize=(16,48), dpi=100)\ncolors = [plt.cm.nipy_spectral(i\/float(len(vals)-1)) for i in range(len(vals))]\nn, bins, patches = plt.hist(vals, \n                            data[x_var].unique().__len__(), \n                            stacked=True, \n                            density=False, orientation='horizontal', color=colors[:len(vals)])\n\nplt.legend({group:col for group, col in zip(np.unique(data[groupby_var]).tolist(), colors[:len(vals)])}, \n           loc='upper right', \n           borderaxespad=0)\nplt.title(f\"Stacked Histogram of ${x_var}$ colored by ${groupby_var}$\", fontsize=22)\nplt.ylabel(x_var)\nplt.xlabel(\"Frequency\")\nplt.xlim(0, 50)\nplt.xticks([])\nylabels=np.unique(data[x_var]).tolist()\nylabels.append(\"\") #Append to make sure that the ticks are mapped accurately\nplt.yticks(ticks=bins, labels=ylabels, horizontalalignment='right',fontsize=7)\nplt.show()","62e875d9":"temp_df = data.groupby(['Line'])['Entrance Type'].value_counts(normalize=True).mul(100).reset_index(name='Percentage')\nplt.figure(figsize=(16,24), dpi=40)\ng = sns.histplot(y='Line', \n                 hue='Entrance Type',\n                 weights='Percentage',\n                 multiple='stack',\n                 data=temp_df,\n                 shrink=0.99,)\nplt.show()\ntemp_df = data.groupby(['Division'])['Entrance Type'].value_counts(normalize=True).mul(100).reset_index(name='Percentage')\nplt.figure(figsize=(8,12), dpi=40)\ng2 = sns.histplot(y='Division', \n                 hue='Entrance Type',\n                 weights='Percentage',\n                 multiple='stack',\n                 data=temp_df,\n                 shrink=0.99,)\nplt.show()","bf6222c7":"max_val = 0\nmax_line_station = []\nfor station in enumerate(data['Station Name'].unique()):\n  temp_df = data[data[\"Station Name\"] == station[1]]\n  if len(temp_df.Route1.unique()) >= max_val:\n    max_val = len(temp_df.Route1.unique())\n\nfor station in enumerate(data['Station Name'].unique()):\n  temp_df = data[data[\"Station Name\"] == station[1]]\n  if len(temp_df.Route1.unique()) == max_val:\n    max_line_station.append(station)\n\nprint(max_line_station)\nprint(max_val)","da53d5ac":"import math\nfrom ast import literal_eval\ndef latlong_to_mercator(latlongs):\n    Coordinates = literal_eval(latlongs) \n    lat = Coordinates[0]\n    lon = Coordinates[1]\n    r_major = 6378137.000 #radius of the earth; default = 6378137m\n    x = r_major * math.radians(lon)\n    scale = x\/lon\n    y = 180.0\/math.pi * math.log(math.tan(math.pi\/4.0 + \n        lat * (math.pi\/180.0)\/2.0)) * scale\n    return (x, y)","9fecd84c":"data['merc_x'] = data['Station Location'].apply(lambda x: latlong_to_mercator(x)[0])\ndata['merc_y'] = data['Station Location'].apply(lambda x: latlong_to_mercator(x)[1])","192e6a8d":"data.T.head(35)","0e390000":"data['freq'] = data.groupby('Station Name')['Station Name'].transform('count')","f366a888":"data.T.head(35)\n#data_g.describe()","65db7f0b":"from bokeh.plotting import figure, show, output_notebook\n#from bokeh.tile_providers import CARTODBPOSITRON_RETINA\nfrom bokeh.tile_providers import get_provider, Vendors\nimport bokeh\n\ntile_provider = get_provider(Vendors.CARTODBPOSITRON_RETINA)\np = figure(x_axis_type=\"mercator\", y_axis_type=\"mercator\")\np.add_tile(tile_provider)\np.plot_height=800\np.plot_width=1000\np.circle(x=data['merc_x'],\n         y=data['merc_y'], \n         size=data['freq'],\n         line_color=\"#555555\", \n         fill_color=\"#CCDDEE\",\n         fill_alpha=0.15)\n    \noutput_notebook()\nshow(p)","ac3d564d":"from bokeh.plotting import figure, show, output_notebook\nfrom bokeh.models import ColumnDataSource, HoverTool\nfrom bokeh.tile_providers import get_provider, Vendors\nimport bokeh\n\ntile_providers = [Vendors.CARTODBPOSITRON, \n                  Vendors.CARTODBPOSITRON_RETINA, \n                  Vendors.STAMEN_TERRAIN, \n                  Vendors.STAMEN_TERRAIN_RETINA, \n                  Vendors.STAMEN_TONER, \n                  Vendors.STAMEN_TONER_BACKGROUND,\n                  Vendors.STAMEN_TONER_LABELS, \n                  Vendors.OSM, \n                  Vendors.WIKIMEDIA, \n                  Vendors.ESRI_IMAGERY]\n\nsource = ColumnDataSource(data=dict(\n                        x=list(data['merc_x']), \n                        y=list(data['merc_y']),\n                        lines=list(data['Line']),\n                        division=list(data['Division']),\n                        entrance=list(data['Entrance Type']),\n                        corner=list(data['Corner']),\n                        vending=list(data['Vending']),\n                        sizes=list(data['freq']),\n                        stationname=list(data['Station Name'])))\nhover = HoverTool(tooltips=[\n    (\"Station\", \"@stationname\"),\n    (\"Division\", \"@division\"),\n    (\"Line\",\"@lines\"),\n    (\"Entrance\",\"@entrance\"),\n    (\"Corner\",\"@corner\"),\n    (\"Vending Machines\",\"@vending\"),\n])\n\nfor tp in enumerate(tile_providers):\n    \n    print(tp)\n    tile_provider = get_provider(tp[1])\n    print(tile_provider)\n    p = figure(x_axis_type=\"mercator\", \n               y_axis_type=\"mercator\",\n               tools=[hover, 'wheel_zoom','save'])\n    p.add_tile(tile_provider)\n    p.plot_height=1200\n    p.plot_width=1400\n    p.circle(x='x',\n             y='y', \n             source=source,\n             size='sizes',\n             line_color=\"#2200FF\", \n             fill_color=\"#11FF22\",\n             fill_alpha=0.05)\n    output_notebook()\n    show(p)\n\n","bbae480a":"import pandas_profiling as pdp\nreport = pdp.ProfileReport(data, title='Pandas Profiling Report for the dataset')\nreport ","9806ab86":"### Thanks to the https:\/\/towardsdatascience.com\/exploring-and-visualizing-chicago-transit-data-using-pandas-and-bokeh-part-ii-intro-to-bokeh-5dca6c5ced10 functions on latlong to mercator","a866ddfd":"### Which station has more routes?"}}