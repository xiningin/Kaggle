{"cell_type":{"ca162667":"code","40a7f3b4":"code","d9064275":"code","047e818b":"code","5448af5b":"code","9b5b3569":"code","996dd9af":"code","ae7c849f":"code","5788124e":"code","81b7c0cf":"code","496094a5":"code","80d44ce8":"code","c29d9d82":"code","cbbb5c39":"code","cc12d172":"code","4901de07":"code","2e5e647d":"code","d7999384":"code","e8729981":"code","e20c1119":"code","2293efaa":"code","2872b68c":"code","7e021ad0":"code","b95a021f":"code","652a2809":"code","7db6e72f":"code","9874f181":"code","896c4c32":"code","7f5a5148":"code","4a37a393":"code","264b7492":"code","59744142":"code","b0da84ed":"code","98451ad1":"code","651627ec":"code","57cd1061":"code","8a1074d5":"code","118d8f7d":"code","68f866d9":"code","53db98d3":"code","ac8e0e05":"code","40b2e1a9":"markdown","ca608852":"markdown","7f6955fd":"markdown","3dc20187":"markdown","524601b7":"markdown","5ff85a43":"markdown","93662d04":"markdown","17945730":"markdown","8fb5ef43":"markdown","2eb2b3b5":"markdown","9fbdcf5d":"markdown","49403969":"markdown","5c3722a4":"markdown","1e6994e1":"markdown","e605f73b":"markdown","bdfd3326":"markdown","89ed5f64":"markdown","c07f5833":"markdown","90ae94ea":"markdown","78f9b8b6":"markdown","c5506927":"markdown","f354155c":"markdown","7ea5d8cb":"markdown","c319b4d2":"markdown","5bea1421":"markdown","60d7224a":"markdown","0e57ad72":"markdown","5506f274":"markdown","6f8deaa1":"markdown","cf0ca46e":"markdown","9729b83a":"markdown"},"source":{"ca162667":"import os\nprint(\"Folders and files in Dataset:\")\nprint(\"-\"*50)\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","40a7f3b4":"# Dataset manipulation modules\nimport numpy as np\nimport pandas as pd\n\n# Iteration and naming tools\nimport re\nfrom itertools import compress\n\n# Plot tools\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# P-values, Z-scores calculation tools\nimport scipy\n\n# Linear Regression tools\nimport statsmodels.api as sm\n\n# Error calculation\nimport tensorflow as tf\n\n# Ignoring warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d9064275":"# Reading CSV file\n\ndf = pd.read_csv(\"..\/input\/calculated-aqi-caaqm-central-university-hyd\/Raw_DATA.csv\")\ndf.Name =\"RAW DATA\"\n\ndef Elements(df):\n    print(\"Elements in \"+str(df.Name)+\":\")\n    print('-'*100)\n    print(\"shape of \"+str(df.Name)+\" = \"+ str(df.shape))\n    print('-'*100)\n    print(\"columns of \"+str(df.Name)+\" = \"+ str(df.columns))\n    print('-'*100)\n    print(\"Info of Data:\")\n    print('.'*20)\n    print(df.info())\n\nprint(df.head(5))\nprint('-'*50)\nElements(df)","047e818b":"# Removing the columns that are not useful\ndf.drop([\"To Date\"], axis=1, inplace=True)\n\n# Renaming Date column\ndf.rename({\"From Date\":\"Date\"}, axis=1, inplace=True)\n\n# Changing date column into datetime object\ndf['Date'] = pd.to_datetime(df['Date'], dayfirst= True)\n\n# changing columns to numeric values\nfor element in df.columns[1:]:\n    df[element]= pd.to_numeric(df[element], errors='coerce')","5448af5b":"print(df.head(5))\nprint('-'*50)\nElements(df)","9b5b3569":"# Sub-Index calculation functions (as per Indian Air Quality Standards)\n\n# PM2.5\ndef SI_PM_25(x):\n    SI = 0\n    \n    if pd.isna(x):\n        SI = x\n    elif x<=30: \n        SI = x*50\/30 \n    elif x>30 and x<=60:\n        SI = 50+((x-30)*50\/30) \n    elif x>60 and x<=90:\n        SI = 100+((x-60)*100\/30) \n    elif x>90 and x<=120:\n        SI = 200+((x-90)*100\/30)\n    elif x>120 and x<=250:\n        SI = 300+((x-120)*100\/130)\n    elif x>250:\n        SI = 400+((x-250)*100\/130)\n    else:\n        SI = x\n    \n    return SI\n\n# PM10\ndef SI_PM_10(x):\n    SI =0\n    \n    if pd.isna(x):\n        SI = x\n    elif x<=50 :\n        SI = x\n    elif x>50 and x<=100:\n        SI= x\n    elif x>100 and x<=250:\n        SI = 100+((x-100)*100\/150)\n    elif x>250 and x<=350:\n        SI = 200+(x-250)\n    elif x>350 and x<=430:\n        SI = 300+((x-350)*100\/80)\n    elif x>430:\n        SI = 400+((x-430)*100\/80)\n    else:\n        SI = x\n    \n    return SI\n\n# NO2\ndef SI_NO2(x):\n    SI =0\n    \n    if pd.isna(x):\n        SI = x\n    elif x<=40:\n        SI = x*50\/40\n    elif x>40 and x<=80:\n        SI = 50+((x-40)*50\/40)\n    elif x>80 and x<=180:\n        SI = 100+((x-80)*100\/100)\n    elif x>180 and x<=280:\n        SI = 200+((x-180)*100\/100)\n    elif x>280 and x<=400:\n        SI = 300+((x-280)*100\/120)\n    elif x>400:\n        SI = 400+((x-400)*100\/120)\n    else:\n        SI = x\n    \n    return SI\n\n# NH3\ndef SI_NH3(x):\n    SI=0\n    \n    if pd.isna(x):\n        SI = x\n    elif x<=200:\n        SI = x*50\/200\n    elif x>200 and x<=400:\n        SI = 50+((x-200)*50\/200)\n    elif x>400 and x<=800:\n        SI = 100+((x-400)*100\/400)\n    elif x>800 and x<=1200:\n        SI = 200+((x-800)*100\/400)\n    elif x>1200 and x<=1800:\n        SI = 300+((x-1200)*100\/600)\n    elif x>1800:\n        SI = 400+((x-1800)*100\/600)\n    else:\n        SI = x\n    \n    return SI\n\n# SO2\ndef SI_SO2(x):\n    SI=0\n    \n    if pd.isna(x):\n        SI = x\n    elif x<=40:\n        SI = x*50\/40\n    elif x>40 and x<=80:\n        SI = 50+((x-40)*50\/40)\n    elif x>80 and x<=380:\n        SI = 100+((x-80)*100\/300)\n    elif x>380 and x<=800:\n        SI = 200+((x-380)*100\/420)\n    elif x>800 and x<=1600:\n        SI = 300+((x-800)*100\/800)\n    elif x>1600:\n        SI =400+((x-1600)*100\/800)\n    else:\n        SI = x\n    \n    return SI\n\n# CO\ndef SI_CO(x):\n    SI=0\n    \n    if pd.isna(x):\n        SI = x\n    elif x<=1:\n        SI = x*50\/1\n    elif x>1 and x<=2:\n        SI = 50+((x-1)*50\/1) \n    elif x>2 and x<=10:\n        SI = 100+((x-2)*100\/8) \n    elif x>10 and x<=17:\n        SI = 200+((x-10)*100\/7)\n    elif x>17 and x<=34:\n        SI = 300+((x-17)*100\/17)\n    elif x>34:\n        SI = 400+((x-34)*100\/17)\n    else:\n        SI = x\n    \n    return SI\n\n# OZONE\ndef SI_OZONE(x):\n    SI=0\n    \n    if pd.isna(x):\n        SI = x\n    elif x<=50:\n        SI = x*50\/50 \n    elif x>50 and x<=100:\n        SI = 50+((x-50)*50\/50)\n    elif x>100 and x<=168:\n        SI = 100+((x-100)*100\/68)\n    elif x>168 and x<=208:\n        SI = 200+((x-168)*100\/40)\n    elif x>208 and x<=748:\n        SI = 300+((x-208)*100\/539)\n    elif x>748:\n        SI = 400+((x-400)*100\/539)\n    else:\n        SI = x\n    \n    return SI","996dd9af":"# Initiating a Dataframe with dates\nsubIndex = pd.DataFrame(df['Date'])\n\n# Calculating Sub-Indices using functions defined in above code block.\nsubIndex['PM2.5 SI'] = df[\"PM2.5\"].apply(SI_PM_25)\nsubIndex['PM10 SI'] = df[\"PM10\"].apply(SI_PM_10)\nsubIndex['NO2 SI'] = df[\"NO2\"].apply(SI_NO2)\nsubIndex['NH3 SI'] = df[\"NH3\"].apply(SI_NH3)\nsubIndex['SO2 SI'] = df[\"SO2\"].apply(SI_SO2)\nsubIndex['CO SI'] = df[\"CO\"].apply(SI_CO)\nsubIndex['Ozone SI'] = df[\"Ozone\"].apply(SI_OZONE)\n\nsubIndex.Name = \"Sub-Index Dataframe\"\n\nprint(subIndex.head(5))\nprint('-'*50)\nElements(subIndex)\nprint(\"** SI means Sub-Index\")","ae7c849f":"# AQI is calculated as per Indian AQI calculation standards\n\n# Initiating Dataframe with Dates\naqi = pd.DataFrame(df['Date'])\n\n# creating an empty AQI row to fill in\nNan = np.nan\naqi['AQI']=Nan\n\n# iterating through rows\nfor ind in subIndex.index:\n\n    # checking either one of PM2.5 or PM10 is available\n    while pd.notna(subIndex['PM2.5 SI'][ind]) or pd.notna(subIndex['PM10 SI'][ind]):\n\n        p_list = [subIndex['PM2.5 SI'][ind], subIndex['PM10 SI'][ind], subIndex['NO2 SI'][ind], subIndex['NH3 SI'][ind], subIndex['SO2 SI'][ind], subIndex['CO SI'][ind],subIndex['Ozone SI'][ind]]\n\n        # Check_list of bool of available pollutant values in each index or date\n        Check_list = list(pd.notna(p_list))\n\n        # checksum of available Pollutant values is used in if statement\n        if sum(Check_list) >=3:\n            \n            # compresSub-Indexng the list of pollutants to remove Nan to remove uncertainities \n            aqi['AQI'][ind]= max(list(compress(p_list, Check_list)))\n\n        break\n\naqi.Name = 'AQI Data'\nprint(aqi.head(5))\nprint('-'*50)\nElements(aqi)","5788124e":"# converting subIndex to set freq of days for resampling\ndf = df.set_index('Date').asfreq('D', method=\"ffill\")\n\n# converting subIndex to set freq of days for resampling\nsubIndex = subIndex.set_index('Date').asfreq('D', method=\"ffill\")\n\n# converting AQI to set freq of days for resampling\naqi = aqi.set_index('Date').asfreq('D', method=\"ffill\")","81b7c0cf":"def print_dfs(lst):\n    for el in lst:\n        print('-'*100)\n        print(\"Dataframe\")\n        print(el.head())\n        print('-'*100)\n        print(\"shape of Dataframe = \"+ str(el.shape))\n        print('-'*100)\n        print(\"columns of Dataframe\"+ str(el.columns))\n        print('-'*100)\n\ndf_list = [df, subIndex, aqi]\n\n# Dropping year 2017 Data as it is inconsistent with other years.\nfor itr in df_list:\n    itr.drop(itr.loc[\"2017\"].index, inplace=True)\n\nprint_dfs(df_list)","496094a5":"def percent_missing(lst_dfs):\n    lst = []\n    for df in lst_dfs:\n        percent = round(df.isnull().sum().sort_values(ascending = False)\/len(df)*100,2)\n        total = df.isnull().sum().sort_values(ascending = False)\n        lst.append(pd.concat([total, percent], axis=1, keys=['Total', 'Percent']))\n    return lst\npm_list = percent_missing(df_list)\nfor pm in pm_list: print(pm)","80d44ce8":"Conc_df = pd.concat([df, aqi['AQI']], axis=1)\n\nprint(\"CORRELATION MATRIX\")\n# Correlation between Concentrations and AQI\nConc_df.corr().round(2)['AQI']","c29d9d82":"# Pairplots between concentrations and AQI\nprint(\"PAIRPLOTS CONCENTRATIONS VS AQI\")\nsns.pairplot(Conc_df, x_vars=[\"PM2.5\", \"PM10\", \"NO2\", \"NH3\", \"SO2\", \"CO\", \"Ozone\"], y_vars=[\"AQI\"])","cbbb5c39":"SI_df = pd.concat([subIndex, aqi['AQI']], axis=1)\n\nprint(\"CORRELATION MATRIX SUB-INDEX VS AQI\")\n# Correlation between Concentrations and AQI\nSI_df.corr().round(2)['AQI']","cc12d172":"# Pairplots between concentrations and AQI\nprint(\"PAIRPLOTS SUB-INDICES VS AQI\")\nsns.pairplot(SI_df, x_vars=[\"PM2.5 SI\", \"PM10 SI\", \"NO2 SI\", \"NH3 SI\", \"SO2 SI\", \"CO SI\", \"Ozone SI\"], y_vars=[\"AQI\"])","4901de07":"# Removing not available values and outliers for regression\nRegdf = SI_df.dropna()\nz_scores = scipy.stats.zscore(Regdf)\nabs_z_scores = np.abs(z_scores)\nfiltered_entries = (abs_z_scores<3).all(axis=1)\nRegdf = Regdf[filtered_entries]","2e5e647d":"y = Regdf['AQI']\nx = Regdf[Regdf.columns[:-1]]\nx = sm.add_constant(x)\nregressor_OLS = sm.OLS(y, x).fit()\nregressor_OLS.summary()","d7999384":"y = Regdf['AQI']\nx = Regdf[Regdf.columns[:2]]\nx = sm.add_constant(x)\nregressor_OLS = sm.OLS(y, x).fit()\nregressor_OLS.summary()","e8729981":"plt.figure(figsize=(12,6))\nplt.grid()\npred_value= regressor_OLS.fittedvalues.copy()\ntrue_val = Regdf['AQI'].copy()\n\n# Plot of last 150 values\nplt.plot(true_val[-150:])\nplt.plot(pred_value[-150:])\n\n# Labels\nplt.xlabel(\"Date\")\nplt.ylabel(\"AQI Value\")\nplt.legend([\"True Value\", \"Predicted Value\"])","e20c1119":"mae_f = tf.keras.metrics.mean_absolute_error(y_pred=pred_value, y_true=true_val).numpy()\nrmse_f = tf.sqrt(tf.losses.mean_squared_error(y_pred=pred_value, y_true=true_val)).numpy()\nprint(\"MAE: \",mae_f)\nprint(\"RMSE: \",rmse_f)","2293efaa":"plt.figure(figsize=(12,6))\nplt.grid()\n\nresiduals_f = true_val-pred_value\n\nplt.scatter(pred_value[:400],residuals_f[:400])\n\nplt.hlines(y=0, xmin =0, xmax=165 , linewidth=.5, color='red')\nplt.title(\"Predicted Values vs Residuals\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"AQI Value\")\nplt.xlabel(\"Predicted value\")\nplt.ylabel(\"Residual\")","2872b68c":"fig, ax = plt.subplots(figsize=(12,6))\nplt.grid()\n_,(_,_,r) = scipy.stats.probplot(residuals_f,plot= ax, fit=True)\n\nprint('-'*100)\nprint(\"Plot to show how deviated the residuals are from normal distribution\")\nprint('x'*100)\nprint(\"R square = \"+ str(r**2))\nprint('-'*100)","7e021ad0":"# Regression\ny = Regdf['AQI'][1:]\nx = Regdf[Regdf.columns[:2]].shift(1)[1:]\nx = sm.add_constant(x)\nregressor_OLS = sm.OLS(y, x).fit()\nregressor_OLS.summary()","b95a021f":"plt.figure(figsize=(12,6))\nplt.grid()\npred_value= regressor_OLS.fittedvalues.copy()\ntrue_val = Regdf['AQI'][1:].copy()\n\n# Plot of last 150 values\nplt.plot(true_val[-150:])\nplt.plot(pred_value[-150:])\n\n# Labels\nplt.xlabel(\"Date\")\nplt.ylabel(\"AQI Value\")\nplt.legend([\"True Value\", \"Predicted Value\"])","652a2809":"mae_pf = tf.keras.metrics.mean_absolute_error(y_pred=pred_value, y_true=true_val).numpy()\nrmse_pf = tf.sqrt(tf.losses.mean_squared_error(y_pred=pred_value, y_true=true_val)).numpy()\nprint(\"MAE: \",mae_pf)\nprint(\"RMSE: \",rmse_pf)","7db6e72f":"plt.figure(figsize=(12,6))\nplt.grid()\n\nresiduals_f = true_val-pred_value\n\nplt.scatter(pred_value[:400],residuals_f[:400])\n\nplt.hlines(y=0, xmin =0, xmax=165 , linewidth=.5, color='red')\nplt.title(\"Predicted Values vs Residuals\")\nplt.xlabel(\"Predicted value\")\nplt.ylabel(\"Residual\")","9874f181":"fig, ax = plt.subplots(figsize=(12,6))\nplt.grid()\n_,(_,_,r) = scipy.stats.probplot(residuals_f,plot= ax, fit=True)\n\nprint('-'*100)\nprint(\"Plot to show how deviated the residuals are from normal distribution\")\nprint('x'*100)\nprint(\"R square = \"+ str(r**2))\nprint('-'*100)","896c4c32":"y = Regdf['AQI'][1:]\nx = Regdf['AQI'].shift(1)[1:]\nx = sm.add_constant(x)\nregressor_OLS = sm.OLS(y, x).fit()\nregressor_OLS.summary()","7f5a5148":"plt.figure(figsize=(12,6))\nplt.grid()\npred_value= regressor_OLS.fittedvalues.copy()\ntrue_val = Regdf['AQI'][1:].copy()\n\n# Plot of last 150 values\nplt.plot(true_val[-150:])\nplt.plot(pred_value[-150:])\n\n# Labels\nplt.xlabel(\"Date\")\nplt.ylabel(\"AQI Value\")\nplt.legend([\"True Value\", \"Predicted Value\"])","4a37a393":"mae_ps = tf.keras.metrics.mean_absolute_error(y_pred=pred_value, y_true=true_val).numpy()\nrmse_ps = tf.sqrt(tf.losses.mean_squared_error(y_pred=pred_value, y_true=true_val)).numpy()\nprint(\"MAE: \",mae_ps)\nprint(\"RMSE: \",rmse_ps)","264b7492":"plt.figure(figsize=(12,6))\nplt.grid()\n\nresiduals_f = true_val-pred_value\n\nplt.scatter(pred_value[:400],residuals_f[:400])\n\nplt.hlines(y=0, xmin =0, xmax=165 , linewidth=.5, color='red')\nplt.title(\"Predicted Values vs Residuals\")\nplt.xlabel(\"Predicted value\")\nplt.ylabel(\"Residual\")","59744142":"fig, ax = plt.subplots(figsize=(12,6))\nplt.grid()\n_,(_,_,r) = scipy.stats.probplot(residuals_f,plot= ax, fit=True)\n\nprint('-'*100)\nprint(\"Plot to show how deviated the residuals are from normal distribution\")\nprint('x'*100)\nprint(\"R square = \"+ str(r**2))\nprint('-'*100)","b0da84ed":"# for given list or range of days ; a series in dataframe is created by shifting the series by day for each column\n# window can be list of values or range\ndef Window_dataframe(df, window):\n    Wdf = pd.DataFrame(index=df.index[max(window):])\n    for i in window:\n        Inter = df.shift(i)[max(window):]\n        Wdf['Past Day - '+str(i)] = Inter\n    return Wdf","98451ad1":"s = Window_dataframe(aqi, range(1,15))\n\nRegdf = pd.concat([s,aqi[2:]], axis=1).dropna()\n\nz_scores = scipy.stats.zscore(Regdf)\nabs_z_scores = np.abs(z_scores)\nfiltered_entries = (abs_z_scores<3).all(axis=1)\nRegdf = Regdf[filtered_entries]","651627ec":"y = Regdf['AQI']\nx = Regdf[Regdf.columns[:-1]]\nx = sm.add_constant(x)\nregressor_OLS = sm.OLS(y, x).fit()\nregressor_OLS.summary()","57cd1061":"s = Window_dataframe(aqi, [1,12])\n\nRegdf = pd.concat([s,aqi], axis=1).dropna()\n\nz_scores = scipy.stats.zscore(Regdf)\nabs_z_scores = np.abs(z_scores)\nfiltered_entries = (abs_z_scores<3).all(axis=1)\nRegdf = Regdf[filtered_entries]\n\ny = Regdf['AQI']\nx = Regdf[Regdf.columns[:-1]]\nx = sm.add_constant(x)\nregressor_OLS = sm.OLS(y, x).fit()\nregressor_OLS.summary()","8a1074d5":"plt.figure(figsize=(12,6))\nplt.grid()\npred_value= regressor_OLS.fittedvalues.copy()\ntrue_val = Regdf['AQI'].copy()\n\n# Plot of last 150 values\nplt.plot(true_val[-150:])\nplt.plot(pred_value[-150:])\n\n# Labels\nplt.xlabel(\"Date\")\nplt.ylabel(\"AQI Value\")\nplt.legend([\"True Value\", \"Predicted Value\"])","118d8f7d":"mae_pw = tf.keras.metrics.mean_absolute_error(y_pred=pred_value, y_true=true_val).numpy()\nrmse_pw = tf.sqrt(tf.losses.mean_squared_error(y_pred=pred_value, y_true=true_val)).numpy()\nprint(\"MAE: \",mae_pw)\nprint(\"RMSE: \",rmse_pw)","68f866d9":"plt.figure(figsize=(12,6))\nplt.grid()\n\nresiduals_f = true_val-pred_value\n\nplt.scatter(pred_value[:400],residuals_f[:400])\n\nplt.hlines(y=0, xmin =0, xmax=165 , linewidth=.5, color='red')\nplt.title(\"Predicted Values vs Residuals\")\nplt.xlabel(\"Predicted value\")\nplt.ylabel(\"Residual\")","53db98d3":"fig, ax = plt.subplots(figsize=(12,6))\nplt.grid()\n_,(_,_,r) = scipy.stats.probplot(residuals_f,plot= ax, fit=True)\n\nprint('-'*100)\nprint(\"Plot to show how deviated the residuals are from normal distribution\")\nprint('x'*100)\nprint(\"R square = \"+ str(r**2))\nprint('-'*100)","ac8e0e05":"mae_lst = [mae_f, mae_pf, mae_ps, mae_pw]\nrmse_lst = [rmse_f, rmse_pf, rmse_ps, rmse_pw]\nlm_df = pd.DataFrame({\"RMSE\": rmse_lst, \"MAE\": mae_lst}, index=[\"Regression with Features\", \"Regression with Past Features\", \"Regression with Past self\", \"Regression with Past Window\"])\nlm_df","40b2e1a9":"#### Conclusion from Overview\n- Concentrations and Sub-Indices distribution and graphs won't be much different as Sub-Index was calculated from Concentrations\n- Both Concentrations and Sub-Indices of PM2.5, PM10, NO2 are higly correlated with AQI\n- But as per plots, PM2.5, PM10, NH3 has better chance of prediction; as points are accumulated in nearly linear fashion.\n- A positive correlation and regression can be drawn using PM2.5, PM10, NH3 Sub-Indices.\n- Even SO2 can be considered but it will not be useful as it will become statistically insignificant which will be seen in future cells\n- from here on, Sub-Indices will be used as features; As, Sub-indices and AQI have same range of Values.","ca608852":"<div id=\"AQI\"\/>\n\n# 4. Calculation of AQI from Sub-Indices\n---\n---","7f6955fd":"<div id=\"GLimpse\"\/>\n\n# 1. Glimpse of Raw Dataset\n---\n---","3dc20187":"### Residuals and it's normal fit","524601b7":"### Residuals and it's normal fit","5ff85a43":"### Error in prediction","93662d04":"<div id=\"AC\"\/>\n\n# 5. Final Dataframes obtained after Calculations\n---\n---","17945730":"<div id=\"Overview\"\/>\n\n# 6. Overview of relations between features and AQI\n---\n---","8fb5ef43":"### Error in prediction","2eb2b3b5":"## Importing modules to work on dataset","9fbdcf5d":"### Predicted value and True value plot over time","49403969":"<div id=\"WI\"\/>\n\n## 7.C. With Itself\n---\n","5c3722a4":"### Predicted value and True value plot over time","1e6994e1":"<div id=\"Sub\"\/>\n\n# 3. Sub-Index Calculation (as per Indian Air Quality Standards)\n---\n---","e605f73b":"#### P-values of NO2, NH3, SO2 are more than 0.05 (significance value), So, they are unfit to use for regression\n#### CO and OZONE are unfit as well; since coefficients are very small.","bdfd3326":"<div id='final'\/>\n\n# FINAL ERRORS OF EACH REGRESSION","89ed5f64":"### Predicted value and True value plot over time","c07f5833":"### Error in prediction","90ae94ea":"<div id=\"Useful\"\/>\n\n# 2. Changing Raw to Useful Data\n\n---\n---","78f9b8b6":"### Predicted value and True value plot over time","c5506927":"# Sections in the notebook\n---\n1. [**Glimpse of Raw Dataset**](#GLimpse)\n2. [**Changing Raw to Useful Dataset**](#Useful)\n3. [**Sub-Index Calculation (as per Indian Air Quality Standards)**](#Sub)\n4. [**Calculation of AQI from Sub-Indices**](#AQI)\n5. [**Final Dataframes obtained after Calculations**](#AC)\n6. [**Overview of relations between features and AQI**](#Overview)\n7. [**Linear Regression**](#LR)\n    1. [**With Feautures**](#WF)\n    2. [**With Features from Past day**](#WPF)\n    3. [**With Itself**](#WI)\n        1. [*Previous day*](#Pd)\n        2. [*Previous significant days*](#Psd)\n8. [**Final Errors for each Regression**](#final)\n","f354155c":"<div id=\"Psd\"\/>\n    \n### 7.C.b. Previous Significant Days","7ea5d8cb":"<div id=\"WF\"\/>\n\n## 7.A. With Features\n---","c319b4d2":"### Previous day and a 12th day in past has more significance statistically","5bea1421":"### Error in prediction","60d7224a":"# LINEAR REGRESSION TO PREDICT AQI (TIME SERIES)","0e57ad72":"<div id=\"WPF\"\/>\n\n## 7.B. With past features\n---","5506f274":"### Residuals and it's normal fit","6f8deaa1":"### Residuals and it's normal fit","cf0ca46e":"<div id=\"LR\"\/>\n\n# 7. LINEAR REGRESSION\n---\n---","9729b83a":"<div id=\"Pd\"\/>\n\n### 7.C.a. Previous Day"}}