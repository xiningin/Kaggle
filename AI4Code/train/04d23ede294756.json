{"cell_type":{"627c897c":"code","1cca9e86":"code","fbc423ad":"code","5db85702":"code","c4b244d3":"code","af3d51dd":"code","e70f4a6f":"code","4d783353":"code","2b980d2f":"code","6bdc5683":"code","ef26a2aa":"code","332df86e":"code","82cd3273":"code","cbf0a098":"code","154fd7bf":"code","dea9bb3b":"code","a28e6e2f":"code","b8b65677":"code","e9b69789":"code","278d7457":"code","7fe1798e":"code","89da5f19":"code","cc4e4b72":"code","14cf02bc":"code","d1834681":"code","5fd6b6d8":"code","045efc73":"code","c49e7cef":"code","c0241bd8":"code","4725ee55":"code","e5c8fbf8":"code","3f1a7b74":"code","3b0afa67":"code","892dac92":"code","89ab3c7e":"code","6551dc09":"code","9a690774":"code","e9d9ab64":"code","a4d86666":"code","66ce6f96":"code","1011e254":"code","47fc0fd2":"code","715a9f2d":"code","af27e561":"code","c83ec5ae":"code","69a8afa9":"code","dfa6a4bc":"code","91aa737c":"code","19e071a5":"code","746e64f1":"code","14dec3fd":"code","cc016554":"code","489f4050":"code","da3dd362":"code","b6ae633a":"code","514ba2d9":"code","a7eda32b":"code","d0daba39":"code","bad20710":"code","28582777":"code","6cc7b327":"markdown","34be0892":"markdown","37a198c6":"markdown","e542bd0a":"markdown"},"source":{"627c897c":"#import library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport math\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import metrics","1cca9e86":"df = pd.read_csv('..\/input\/icct20-worldcup2021\/kaggle_data.csv')","fbc423ad":"df.shape","5db85702":"df.head()","c4b244d3":"#rename attribute\ndf = df.rename(columns = {'Unnamed: 0' : 'Match Number'})\ndf.head()","af3d51dd":"#indexing match number\ndf = df.set_index('Match Number')\ndf.head()","e70f4a6f":"df.describe()","4d783353":"df.info()","2b980d2f":"#heatmap correlation\nplt.figure(figsize = (8,6))\nsns.heatmap(df.corr(), annot = True, cmap = 'OrRd')\nplt.title(\"Pearson Correlation\")\nplt.show()","6bdc5683":"#transform data\ndf.target_achieved[df['target_achieved'] == 0] = 'Achieved'\ndf.target_achieved[df['target_achieved'] == 1] = 'Not Achieved'\ndf.head()","ef26a2aa":"#visualize team 1\nplt.figure(figsize = (10,6))\nchart = sns.countplot(df['team_1'])\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Team 1\")\nplt.show()","332df86e":"#group team 1 & target achievement\nteam1_achieved = df.groupby(['team_1', 'target_achieved']).size().reset_index(name = 'Count')","82cd3273":"#visualize team 1 ~ target achieved\nplt.figure(figsize = (10,6))\nchart = sns.barplot(data = team1_achieved, x = 'team_1', y = 'Count', hue = 'target_achieved', palette = 'Set1')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Team 1 ~ Achievement\")\nplt.show()","cbf0a098":"#visualize team 2\nplt.figure(figsize = (10,6))\nchart = sns.countplot(df['team_2'], palette = 'Set2')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Team 2\")\nplt.show()","154fd7bf":"#group team 2 & target achievement\nteam2_achieved = df.groupby(['team_2', 'target_achieved']).size().reset_index(name = 'Count')","dea9bb3b":"#visualize team 2 ~ target achieved\nplt.figure(figsize = (10,6))\nchart = sns.barplot(data = team2_achieved, x = 'team_2', y = 'Count', hue = 'target_achieved')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Team 2 ~ Achievement\")\nplt.show()","a28e6e2f":"#visualize stage\nplt.figure(figsize = (8,6))\nsns.countplot(df['stage'], palette = 'Set1')\nplt.title(\"Stage of Tournament\")\nplt.show()","b8b65677":"#group stage & target achievement\nstage_achieved = df.groupby(['stage', 'target_achieved']).size().reset_index(name = 'Count')","e9b69789":"#visualize stage ~ target achieved\nplt.figure(figsize = (8,6))\nsns.barplot(data = stage_achieved, x = 'stage', y = 'Count', hue = 'target_achieved', palette = 'Set2')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Stage of Tournament ~ Achievement\")\nplt.show()","278d7457":"#visualize winner of toss\nplt.figure(figsize = (10,6))\nchart = sns.countplot(df['Winner_toss'])\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Winner of Toss\")\nplt.show()","7fe1798e":"#group winner toss & target achievement\nwinner_achieved = df.groupby(['Winner_toss', 'target_achieved']).size().reset_index(name = 'Count')","89da5f19":"#visualize winner toss ~ target achieved\nplt.figure(figsize = (10,6))\nchart = sns.barplot(data = winner_achieved, x = 'Winner_toss', y = 'Count', hue = 'target_achieved', palette = 'Set1')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Winner of Toss ~ Achievement\")\nplt.legend(bbox_to_anchor = (1.01, 1), borderaxespad = 0)\nplt.show()","cc4e4b72":"#visualize toss decision\nplt.figure(figsize = (8,6))\nsns.countplot(df['Toss_descision'], palette = 'Set2')\nplt.title(\"Toss Decision\")\nplt.show()","14cf02bc":"#group winner toss decision & target achievement\ntoss_achieved = df.groupby(['Toss_descision', 'target_achieved']).size().reset_index(name = 'Count')","d1834681":"#visualize toss decision ~ target achieved\nplt.figure(figsize = (8,6))\nsns.barplot(data = toss_achieved, x = 'Toss_descision', y = 'Count', hue = 'target_achieved')\nplt.title(\"Toss Decision ~ Achievement\")\nplt.show()","5fd6b6d8":"#visualize time\nplt.figure(figsize = (8,6))\nsns.countplot(df['time'], palette = 'Set1')\nplt.title(\"Time of Decision\")\nplt.show()","045efc73":"#group time & target achievement\ntime_achieved = df.groupby(['time', 'target_achieved']).size().reset_index(name = 'Count')","c49e7cef":"#visualize time ~ target achieved\nplt.figure(figsize = (8,6))\nsns.barplot(data = time_achieved, x = 'time', y = 'Count', hue = 'target_achieved', palette = 'Set2')\nplt.title(\"Time ~ Achievement\")\nplt.show()","c0241bd8":"#visualize venue\nplt.figure(figsize = (8,6))\nsns.countplot(df['venue'])\nplt.title(\"Venue of Match\")\nplt.show()","4725ee55":"#group venue & target achievement\nvenue_achieved = df.groupby(['venue', 'target_achieved']).size().reset_index(name = 'Count')","e5c8fbf8":"#visualize venue ~ target achieved\nplt.figure(figsize = (8,6))\nsns.barplot(data = venue_achieved, x = 'venue', y = 'Count', hue = 'target_achieved', palette = 'Set1')\nplt.title(\"Venue of Match ~ Achievement\")\nplt.show()","3f1a7b74":"#visualize bowling arm\nplt.figure(figsize = (8,6))\nsns.countplot(df['bowling_arm'], palette = 'Set2')\nplt.title(\"Bowling Arm of Best Bowler\")\nplt.show()","3b0afa67":"#group bowling arm & target achievement\nbowling_achieved = df.groupby(['bowling_arm', 'target_achieved']).size().reset_index(name = 'Count')","892dac92":"#visualize bowling arm ~ target achieved\nplt.figure(figsize = (8,6))\nsns.barplot(data = bowling_achieved, x = 'bowling_arm', y = 'Count', hue = 'target_achieved')\nplt.title(\"Bowling Arm ~ Achievement\")\nplt.legend(bbox_to_anchor = (1.01, 1), borderaxespad = 0)\nplt.show()","89ab3c7e":"#visualize bowling style\nplt.figure(figsize = (8,6))\nsns.countplot(df['bowling_style'], palette = 'Set1')\nplt.title(\"Bowling Style of Best Bowler\")\nplt.show()","6551dc09":"#group bowling style & target achievement\nstyle_achieved = df.groupby(['bowling_style', 'target_achieved']).size().reset_index(name = 'Count')","9a690774":"#visualize bowling arm ~ target achieved\nplt.figure(figsize = (8,6))\nsns.barplot(data = style_achieved, x = 'bowling_style', y = 'Count', hue = 'target_achieved', palette = 'Set2')\nplt.title(\"Bowling Style ~ Achievement\")\nplt.legend(bbox_to_anchor = (1.01, 1), borderaxespad = 0)\nplt.show()","e9d9ab64":"#visualize team best bowler country\nplt.figure(figsize = (10,6))\nchart = sns.countplot(df['best_bowler_country'])\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Team of Best Bowler\")\nplt.show()","a4d86666":"#group team best bowler & target achievement\nteam_achieved = df.groupby(['best_bowler_country', 'target_achieved']).size().reset_index(name = 'Count')","66ce6f96":"#visualize team best bowler ~ target achieved\nplt.figure(figsize = (10,6))\nchart = sns.barplot(data = team_achieved, x = 'best_bowler_country', y = 'Count', hue = 'target_achieved', palette = 'Set1')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Team Best Bowler ~ Achievement\")\nplt.legend(bbox_to_anchor = (1.01, 1), borderaxespad = 0)\nplt.show()","1011e254":"#visualize batting hand\nplt.figure(figsize = (8,6))\nsns.countplot(df['batting_hand'], palette = 'Set2')\nplt.title(\"Batting Hand of Best Bowler\")\nplt.show()","47fc0fd2":"#group batting hand & target achievement\nbatting_achieved = df.groupby(['batting_hand', 'target_achieved']).size().reset_index(name = 'Count')","715a9f2d":"#visualize batting hand ~ target achieved\nplt.figure(figsize = (8,6))\nsns.barplot(data = batting_achieved, x = 'batting_hand', y = 'Count', hue = 'target_achieved')\nplt.title(\"Batting Hand ~ Achievement\")\nplt.legend(bbox_to_anchor = (1.01, 1), borderaxespad = 0)\nplt.show()","af27e561":"#visualize best batter team\nplt.figure(figsize = (10,6))\nchart = sns.countplot(df['best_batter_team'], palette = 'Set1')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Team of Best Batter\")\nplt.show()","c83ec5ae":"#group best batter team & target achievement\nbatter_achieved = df.groupby(['best_batter_team', 'target_achieved']).size().reset_index(name = 'Count')","69a8afa9":"#visualize best batter team ~ target achieved\nplt.figure(figsize = (10,6))\nchart = sns.barplot(data = batter_achieved, x = 'best_batter_team', y = 'Count', hue = 'target_achieved', palette = 'Set2')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Best Batter Team ~ Achievement\")\nplt.show()","dfa6a4bc":"#visualize winner\nplt.figure(figsize = (10,6))\nchart = sns.countplot(df['Winner'])\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Winner of match\")\nplt.show()","91aa737c":"#group winner & target achievement\nwinner_achieved = df.groupby(['Winner', 'target_achieved']).size().reset_index(name = 'Count')","19e071a5":"#visualize best batter team ~ target achieved\nplt.figure(figsize = (10,6))\nchart = sns.barplot(data = winner_achieved, x = 'Winner', y = 'Count', hue = 'target_achieved', palette = 'Set1')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title(\"Winner ~ Achievement\")\nplt.show()","746e64f1":"#visualize achievement status\nplt.figure(figsize = (8,6))\nstatus = [np.count_nonzero(df['target_achieved'] == 'Achieved'),\n         np.count_nonzero(df['target_achieved'] == 'Not Achieved')]\nactivities = ['Achieved', 'Not Achieved']\nplt.pie(status, labels = activities, startangle = 100, radius = 1, autopct = '%1.f%%', shadow = True)\nplt.title(\"Achievement Status\")\nplt.show()","14dec3fd":"#handling categorical data\nfor i in df.columns.tolist():\n    df[i] = df[i].astype('category').cat.codes\n\ndf.head()","cc016554":"#split data\nX = df.drop('target_achieved', axis = 1)\ny = df['target_achieved']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","489f4050":"#build model\nnb = GaussianNB()\n%time nb.fit(X_train, y_train)\naccuracy = nb.score(X_test, y_test)\nprint('Accuracy Score : ', int(accuracy * 100), '%')","da3dd362":"#prediction\ny_pred = nb.predict(X_test)\nprint(y_pred)","b6ae633a":"#visualize ROC Curve\nfpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred)\nplt.figure(figsize = (8,6))\nplt.plot(fpr, tpr, linewidth=2)\nplt.plot([0,1], [0,1], 'k--' )\nplt.rcParams['font.size'] = 12\nplt.title('ROC curve for Gaussian Naive Bayes Classifier for Predicting Achievement Status')\nplt.xlabel('False Positive Rate (1 - Specificity)')\nplt.ylabel('True Positive Rate (Sensitivity)')\nplt.show()","514ba2d9":"#check of MSE & RMSE \nmse = metrics.mean_squared_error(y_test, y_pred)\nprint('Mean Squared Error : '+ str(mse))\nrmse = math.sqrt(metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error : '+ str(rmse))","a7eda32b":"#confusion matrix\nmatrix = metrics.confusion_matrix(y_test, y_pred)\nprint(matrix)\n\n#heatmap matrix\nplt.figure(figsize = (8,6))\nsns.heatmap(matrix, annot = True, fmt = '.0f', cmap = 'viridis')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Prediction\")\nplt.ylabel(\"Actual\")\nplt.show()","d0daba39":"#check cross validation score\ncvs = cross_val_score(nb, X_train, y_train, cv = 10, scoring = 'accuracy')\nprint('Cross-validation scores:{}'.format(cvs))","bad20710":"#compute Average cross-validation score\nprint('Average cross-validation score: {:.2f}'.format(cvs.mean()))","28582777":"#classification report\nreport = metrics.classification_report(y_test, y_pred)\nprint(report)","6cc7b327":"#  ICC-t20_WorldCup2021","34be0892":"# Naive Bayes Model","37a198c6":"# Visualization","e542bd0a":"# Data Extraction"}}