{"cell_type":{"e7693572":"code","e4b26381":"code","f131ca72":"code","3c4bd9d4":"code","ff795556":"code","0fcbe134":"code","12c5d333":"code","e3382d40":"code","4bfed929":"code","6e2c5645":"code","529c278c":"code","e5e7ad23":"code","58df3eeb":"code","78e86b27":"code","c962f9fb":"code","209cb67e":"code","199a7a56":"code","53dbcc97":"markdown","d6db3b79":"markdown","32626d89":"markdown","3f3b0e40":"markdown","d9e1ef23":"markdown","03ff5b33":"markdown","940b599b":"markdown","28aaf9b5":"markdown","9010b69d":"markdown","31c800e1":"markdown","dbe39395":"markdown","4a607a27":"markdown","f4bb80db":"markdown","0b7a286c":"markdown","1e4edb3c":"markdown","9b6fe147":"markdown","55af3a14":"markdown"},"source":{"e7693572":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\n%matplotlib inline\nsns.set_style(\"whitegrid\")\n\n# Supress warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e4b26381":"DF_iris = pd.read_csv(\"..\/input\/Iris.csv\") # Load Iris data into pandas DataFrame\nprint(DF_iris.keys()) # Print a list of the index keys\nprint(DF_iris.shape) # Return the number of (rows, columns) in the dataset","f131ca72":"DF_iris.head() # Shows the first 5 rows of data","3c4bd9d4":"DF_iris.describe() # Show some very basic stats on the numerical data columns","ff795556":"# Check for any missing data:\nprint('Missing Training Data:')\nDF_iris.isnull().sum()","0fcbe134":"# First, Let's drop the ID column from the DF, since that is not going to be interesting to explore\nDF_iris.drop(labels = ['Id'], axis = 1, inplace = True)\nDF_iris.head()","12c5d333":"vars = ['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']\nprint(vars)","e3382d40":"print(DF_iris.Species.value_counts())\nsns.countplot(DF_iris.Species);","4bfed929":"# We can use built-in features of a Pandas DataFrame to plot the distributions of all of the variables...\n# However, these are not the prettiest plots...\nDF_iris.hist(grid=False)\nfig=plt.gcf()\nfig.set_size_inches(12,6)\nplt.show()","6e2c5645":"grid = sns.FacetGrid(pd.melt(DF_iris[vars]), col = 'variable', col_wrap = 4, size = 5.0, \n                    aspect = 1.0, sharex = False, sharey = False)\ngrid.map(sns.distplot, 'value')\nplt.show;","529c278c":"plt.figure(figsize=(25,5))\nplt.subplot(1,4,1)\nsns.boxplot(x='Species',y='PetalLengthCm',data=DF_iris)\nplt.subplot(1,4,2)\nsns.boxplot(x='Species',y='PetalWidthCm',data=DF_iris)\nplt.subplot(1,4,3)\nsns.boxplot(x='Species',y='SepalLengthCm',data=DF_iris)\nplt.subplot(1,4,4)\nsns.boxplot(x='Species',y='SepalWidthCm',data=DF_iris);","e5e7ad23":"sns.boxplot(x='Species',y='SepalWidthCm',data=DF_iris)\nsns.stripplot(x=\"Species\", y=\"SepalWidthCm\", data=DF_iris, jitter=True, edgecolor=\"gray\"); # jitter shifts point slightly left-right so there isn't too much overlap","58df3eeb":"plt.figure(figsize=(25,5))\nplt.subplot(1,4,1)\nsns.violinplot(x='Species',y='PetalLengthCm',data=DF_iris)\nplt.subplot(1,4,2)\nsns.violinplot(x='Species',y='PetalWidthCm',data=DF_iris)\nplt.subplot(1,4,3)\nsns.violinplot(x='Species',y='SepalLengthCm',data=DF_iris)\nplt.subplot(1,4,4)\nsns.violinplot(x='Species',y='SepalWidthCm',data=DF_iris);","78e86b27":"# Let's plot 2 variables against eachother...\ng = sns.jointplot(\"PetalLengthCm\", \"PetalWidthCm\", data=DF_iris, kind=\"reg\")","c962f9fb":"g = sns.lmplot(x='PetalLengthCm', y='PetalWidthCm', hue='Species', data=DF_iris, fit_reg=False)","209cb67e":"g = sns.pairplot(DF_iris, hue='Species', height=4)\n# g.map_upper(sns.regplot) # some plot options: 'regplot', 'residplot', 'scatterplot'\n#g.map_lower(sns.kdeplot)\n#g.map_diag(plt.hist)","199a7a56":"\nfrom pandas.plotting import parallel_coordinates\n\nplt.figure(figsize=(15,10))\nparallel_coordinates(DF_iris[['Species', 'SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']],'Species')","53dbcc97":"# Imports:","d6db3b79":"We can use FacetGrid for nice seaborn subplots with less lines of code:\n\ndocumentation for using **FacetGrid**: (https:\/\/seaborn.pydata.org\/generated\/seaborn.FacetGrid.html)","32626d89":"# Parallel Coordinates Plot:\n\nSince there is a relatively low number of predictor variables\/features and the vlues of those predictors are on relatively sinilar scales, this dataset lends itself well to being visualized by a parallel coordinates plot. (note, certain variables were on vastly different scales, some normalization may be needed) This type of plot creates a line for each observation based on the value of each variable on the y-axis. We color code the plot ,by species, so we may be able to observe if there are any trends that distinguish between species.","3f3b0e40":"# Lets Start to explore the data:\n1. How many different species are there, and how many samples of each?\n2. How are the numerical variables distributed?\n3. What are some different plotting tools that we can use to visualize these data?\n","d9e1ef23":"We can also visualize each individual observation overlayed with the boxplots. See this example with 'SepalWidthCm'","03ff5b33":"# Visualizing the Species Data:","940b599b":"Now we can see how IRIS flowers can really differ, depending on species!","28aaf9b5":"# Split Data by Species, Then Visualize:\n\nHere is an example using plotly subplots to visualize the different species through seaborn **boxplots**:\nBox plots can help visualize the distributions for each species, as well as show outliers...\n","9010b69d":"Ok. So it looks like this dataset only consists of 3 different species and there is an even 50 observations of each one. Next let's try exploring the numerical variables\n\n# Visualizing the Observational Data:","31c800e1":"**All Wrapped-up**\n\nNow that we have gone through some basic data exploration\/visualization, you are ready to begin your data modeling \/ machine learning while being a bit more informed about the data that you are working with...","dbe39395":"Other plots also work good for visualizing the distribution of various variables.\n\nHere is a similar example with **Violin plots** (I personally prefer box plots; these kind of looks a little Georgia O'Keeffe-esque):","4a607a27":"# Load & Preview Data using Pandas:\n1. Store Data into a Pandas DataFrame\n2. Preview the Data\n3. Check if there is any missing data that needs to be imputed","f4bb80db":"These plots are definitely a bit prettier than the histogram plots we were able to generate above from pandas\/plotly.\n\nFrom these plots, we can see that some of the variables seem to be somewhat multui-modal. Perhaps this means that there are some differences between the different species. Probably more useful to plot the data, while highlighting the different plant species, though...","0b7a286c":"# Visualize How Varibales Relate to Eachother (and differ by species):\n\nseaborn has some pretty cool plots, such as **jointplot** :\n\ntry changing kind=\"_____\"  to  \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d\n\ndocumentation: (http:\/\/seaborn.pydata.org\/generated\/seaborn.jointplot.html)","1e4edb3c":"# How about plotting the relationship between multiple variables (and Species) at once?\n\nSeaborn has some pretty powerful built-in ways to plot a lot of data at once from a pandas dataframe:\n\n**PairPlot** Documentation Link: (https:\/\/seaborn.pydata.org\/tutorial\/axis_grids.html)\n\nHere we have distributions of each measurement variable, as well as scatter plots of each measurement variable plotted against the others. (All from only a single line of code!)\n\nThe Scatter plots in the upper-right and lower-left are slightly repetative... We can custamize this a bit more with different types of plot in each area... try uncommenting the lines of code below to see how you can customize which types of plots are shown:","9b6fe147":"Notice that the jointplot offers some cool visualizations of a scatter and distributions of each variable. however, it doesn't help determine the differences between species. Here is where the **lmplot** helps out (documentation: https:\/\/seaborn.pydata.org\/generated\/seaborn.lmplot.html):","55af3a14":"# Exploring IRIS Data with Python\nIn this Kernal, I will explore the small 'IRIS' dataset which contains information about several observations of a few different IRIS flower species. I will use this as a chance to pgo through a  few different way of visualizing data using Python. This should serves as a pretty nice reference for previewing\/visualizing data, especially using Pandas DataFrames and Seaborn. \n\n![](https:\/\/thumbs.gfycat.com\/EnergeticHeartfeltAztecant-small.gif)"}}