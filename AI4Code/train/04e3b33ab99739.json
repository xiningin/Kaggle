{"cell_type":{"18fb2af7":"code","6230814b":"code","65614e1a":"code","15e8001b":"code","715db4bb":"code","d781994e":"code","0d40545e":"code","8cd8cccf":"code","a499149a":"code","914d339d":"code","2c435044":"code","2d3f8bab":"code","7b21a4c3":"code","d7ae1efc":"code","8cf827fc":"code","7b4b284d":"code","57ff5632":"code","5c38f2d1":"code","b6e01028":"code","fcb68b2d":"code","2c305b33":"code","7e1b5fd1":"code","5574fe1e":"code","73498b58":"code","e07e95f7":"code","2c9b0b9a":"code","97be2f42":"code","94a3c47c":"code","90c70828":"code","5977bb8f":"code","861803f3":"code","970c2245":"code","8ec2f6c5":"code","b3e87e76":"code","0401d65c":"code","b33025e6":"code","cace78be":"code","13283326":"code","1edc56f2":"code","fc89426b":"markdown","2475b29d":"markdown","ebaac5db":"markdown","f5dbdc95":"markdown","ddbdbcde":"markdown","32129189":"markdown","f42cfa6e":"markdown","34895da6":"markdown","3af3561c":"markdown","76eadd8e":"markdown","0e5bd9c8":"markdown","1105c3a7":"markdown","21b9b98d":"markdown","28c206d6":"markdown","e8fdd322":"markdown","9474a3cd":"markdown"},"source":{"18fb2af7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nfrom fuzzywuzzy import fuzz\nfrom fuzzywuzzy import process\n\nimport matplotlib.pyplot as plt\n\n\n\nimport nltk\nimport string\nfrom wordcloud import WordCloud\n\nfrom nltk.tokenize import RegexpTokenizer\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n\nfrom collections import defaultdict\n\nfrom mlxtend.plotting import plot_confusion_matrix\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6230814b":"movie_df = pd.read_csv('..\/input\/tmdb-movies-dataset\/tmdb_movies_data.csv')\nwiki_df = pd.read_csv('..\/input\/wikipedia-movie-plots\/wiki_movie_plots_deduped.csv')\n\nmovie_df.columns = movie_df.columns.str.lower()\nwiki_df.columns = wiki_df.columns.str.lower()","65614e1a":"movie_df['original_title'] = movie_df['original_title'].str.lower()\nwiki_df['title'] = wiki_df['title'].str.lower()\ncols_to_use = movie_df.columns.difference(wiki_df.columns)\n\nwiki_df['plot'] = wiki_df['plot'].str.lower()","15e8001b":"df = pd.merge(wiki_df, movie_df[cols_to_use],  how='inner', left_on=['title','release year'], right_on=['original_title','release_year'])\ndf.drop_duplicates(inplace=True)","715db4bb":"df.head(2)","d781994e":"df.info()","0d40545e":"df['genre'].value_counts()[:10]","8cd8cccf":"#Make new binning columns\nfor a,b in df.iterrows():\n    if b['genre'] == 'comedy' or b['genre'] == 'Comedy':\n        df.at[a, 'genre_new'] = 1\n        df.at[a, 'genre_cat'] = 'Comedy'\n    elif b['genre'] == 'drama' or b['genre'] == 'Drama':\n        df.at[a, 'genre_new'] = 2\n        df.at[a, 'genre_cat'] = 'Drama'\n    elif b['genre'] == 'horror' or b['genre'] == 'Horror':\n        df.at[a, 'genre_new'] = 3\n        df.at[a, 'genre_cat'] = 'Horror'\n    elif b['genre'] == 'thriller' or b['genre'] == 'Thriller':\n        df.at[a, 'genre_new'] = 4\n        df.at[a, 'genre_cat'] = 'Thriller'\n    elif b['genre'] == 'action' or b['genre'] == 'Action':\n        df.at[a, 'genre_new'] = 5\n        df.at[a, 'genre_cat'] = 'Action'\n    elif b['genre'] == 'adventure' or b['genre'] == 'Adventure':\n        df.at[a, 'genre_new'] = 6\n        df.at[a, 'genre_cat'] = 'Adventure'\n    else:\n        df.at[a, 'genre_new'] = 0\n        df.at[a, 'genre_cat'] = 'Other'","a499149a":"df['genre_cat'].value_counts()[:10]","914d339d":"#Movie Rating Distribution\nplt.hist(df.vote_average)\nplt.xlabel('Movie Rating')\nplt.ylabel('Count')\nplt.title('Movie Rating Distribution')\nplt.show()\n\n#Movie Adjusted Revenue Distribution\nplt.hist(df.revenue_adj,bins = 3)\nplt.xlabel('Movie Adjusted Revenue')\nplt.ylabel('Count')\nplt.title('Movie Adjusted Revenue Distribution')\nplt.show()\n\n#Movie Adjusted Revenue Distribution\nplt.hist(df.runtime,bins = 3)\nplt.xlabel('Movie Runtime - Minutes')\nplt.ylabel('Count')\nplt.title('Movie Runtime Distribution')\nplt.show()","2c435044":"#Create Box Plot\nfig1 = df.boxplot(column=['budget_adj'],by ='genre_cat', rot = 45, figsize = (10,5))\n#Create Title\nplt.title('Distribution of Budget by Genre')\nplt.suptitle('')\nplt.ylabel('Adjusted Budget')\nplt.xlabel('Genre')\n#Show Plot\nplt.show()\n\n#Create Box Plot\nfig1 = df.boxplot(column=['revenue_adj'],by ='genre_cat', rot = 45, figsize = (10,5))\n#Create Title\nplt.title('Distribution of Revenue by Genre')\nplt.suptitle('')\nplt.ylabel('Adjusted Revenue')\nplt.xlabel('Genre')\n#Show Plot\nplt.show()","2d3f8bab":"#Movie vs Revenue - Postive Relationship\nplt.plot(df.budget_adj, df.revenue_adj, 'o', markersize =1, alpha = 0.5)\nm, b = np.polyfit(df.budget_adj, df.revenue_adj, 1)\nplt.plot(df.budget_adj, m*df.budget_adj + b, 'red', linewidth = 0.5)\nplt.xlabel('Movie Adjusted Budget')\nplt.ylabel('Movie Adjusted Revenue')\nplt.title('Revenue vs Budget')\nplt.show()\n\n#Movie vs Revenue - Weak Relationship\nplt.plot(df.budget_adj, df.vote_average, 'o', markersize =1, alpha = 0.5)\nm, b = np.polyfit(df.budget_adj, df.vote_average, 1)\nplt.plot(df.budget_adj, m*df.budget_adj + b, 'red', linewidth = 0.5)\nplt.xlabel('Movie Adjusted Revenue')\nplt.ylabel('Movie Votes Avg')\nplt.title('Revenue vs Budget')\nplt.show()\n\n#Movie vs Revenue - Outliers Contribute\nplt.plot(df.runtime, df.vote_average, 'o', markersize =1, alpha = 0.5)\nm, b = np.polyfit(df.runtime, df.vote_average, 1)\nplt.plot(df.runtime, m*df.runtime + b, 'red', linewidth = 0.5)\nplt.xlabel('Movie runtime')\nplt.ylabel('Movie Votes Avg')\nplt.title('Movie Rating vs Runtime')\nplt.show()","7b21a4c3":"#String for WordCloud\nlist123 = ''\n#Iterate through training values\nfor a in wiki_df['plot']:\n    list123 += a","d7ae1efc":"nltk.download(\"stopwords\")\nnltk.download(\"punkt\")\n#Create Stop Words Corpus\nstop_words = nltk.corpus.stopwords.words(\"english\") + list(string.punctuation) \\\n+ list(string.ascii_lowercase) + list(string.ascii_uppercase) + list(string.digits) \\\n+ list(['--']+[\"''\"]+[\"``\"]+[\"..\"]+[\"...\"]+[\"ii\"]+[\"iii\"]+[\"iv\"]+[\"'s\"]+[\"the\"]+[\"however\"] \\\n+ [\"when\"]+[\"as\"]+[\"meanwhile\"]+['eventually'])","8cf827fc":"#Tokenize Words\nHR1_token = nltk.word_tokenize(list123)\n#Remove Stops words\nhr1_filter = [w for w in HR1_token if not w in stop_words]\n#Count Words\nhr1_counter = Counter(hr1_filter)\n#Sort Words by counts\nsorted_word_counts = sorted(list(hr1_counter.values()), reverse=True)","7b4b284d":"#10 Most Common Words in the Movie Plot dataset\nhr1_counter.most_common(10)","57ff5632":"#Initiate Word Lemmatizer\nwordnet_lemmatizer = nltk.stem.WordNetLemmatizer()\n#Get Lemmatized Word\nlemmatized = [wordnet_lemmatizer.lemmatize(t) for t in hr1_filter]\n#Create Counter\nbow = Counter(lemmatized)\n#Print 10 most common words\nprint(bow.most_common(10))","5c38f2d1":"nouns = {}\ncccc = hr1_counter.most_common()\nfor a in cccc:\n    pos_sentences = nltk.word_tokenize(a[0])\n    tag = nltk.pos_tag(pos_sentences)\n    tag = tag[0]\n    if tag[1] == 'NN':\n        nouns[a[0]] = a[1]","b6e01028":"nouns1 = Counter(nouns)\n#Print 10 most common words\nprint(nouns1.most_common(30))","fcb68b2d":"#Set Width & Height\nwidth = 12\nheight = 12\n#Initialize Plot\nplt.figure(figsize=(width, height))\n#Generate Wordplot\nwordcloud = WordCloud(width=1800,height=1400).generate(str(hr1_filter))\n#Show Plot\nplt.imshow(wordcloud)\nplt.axis(\"off\")\n#Generate Plot\nplt.show()","2c305b33":"#Set Width & Height\nwidth = 12\nheight = 12\n#Initialize Plot\nplt.figure(figsize=(width, height))\n#Generate Wordplot\nwordcloud = WordCloud(width=1800,height=1400).generate(str(lemmatized))\n#Show Plot\nplt.imshow(wordcloud)\nplt.axis(\"off\")\n#Generate Plot\nplt.show()","7e1b5fd1":"#Set Width & Height\nwidth = 12\nheight = 12\n#Initialize Plot\nplt.figure(figsize=(width, height))\n#Generate Wordplot\nwordcloud = WordCloud(width=1800,height=1400,stopwords = stop_words).generate(str(nouns1))\n#Show Plot\nplt.imshow(wordcloud)\nplt.axis(\"off\")\n#Generate Plot\nplt.show()","5574fe1e":"#New DF with orginal Wiki Data\ndf2aa = wiki_df\n#Make new binning columns\nfor a,b in df2aa.iterrows():\n    if b['genre'] == 'comedy' or b['genre'] == 'Comedy':\n        df2aa.at[a, 'genre_new'] = 1\n        df2aa.at[a, 'genre_cat'] = 'Comedy'\n    elif b['genre'] == 'drama' or b['genre'] == 'Drama':\n        df2aa.at[a, 'genre_new'] = 2\n        df2aa.at[a, 'genre_cat'] = 'Drama'\n    elif b['genre'] == 'horror' or b['genre'] == 'Horror':\n        df2aa.at[a, 'genre_new'] = 3\n        df2aa.at[a, 'genre_cat'] = 'Horror'\n    elif b['genre'] == 'thriller' or b['genre'] == 'Thriller':\n        df2aa.at[a, 'genre_new'] = 4\n        df2aa.at[a, 'genre_cat'] = 'Thriller'\n    elif b['genre'] == 'action' or b['genre'] == 'Action':\n        df2aa.at[a, 'genre_new'] = 5\n        df2aa.at[a, 'genre_cat'] = 'Action'\n    elif b['genre'] == 'adventure' or b['genre'] == 'Adventure':\n        df2aa.at[a, 'genre_new'] = 6\n        df2aa.at[a, 'genre_cat'] = 'Adventure'\n    else:\n        df2aa.at[a, 'genre_new'] = 0\n        df2aa.at[a, 'genre_cat'] = 'Other'\n#Make new binning columns\nfor a,b in df2aa.iterrows():\n    if b['genre'] == 'comedy' or b['genre'] == 'Comedy':\n        df2aa.at[a, 'Comedy'] = 1\n    else:\n        df2aa.at[a, 'Comedy'] = 0\n#Assign X-Data\nX3 = df2aa['plot']\n#Assign Target Data\ny3 = df2aa['genre_new']\ny2 = df2aa['Comedy']","73498b58":"# Split into training and test set\nX_train, X_test, y_train, y_test = train_test_split(X3, y2 , test_size = 0.33, random_state = 53)\n# Create and fit & Transform the Vectorizer\ncount_vectorizer2 = CountVectorizer(stop_words = 'english')\ncount_train3 = count_vectorizer2.fit_transform(X_train.values) \ncount_test3 = count_vectorizer2.transform(X_test.values)","e07e95f7":"# Create and fit the model\nnb_classifier = MultinomialNB()\nnb_classifier.fit(count_train3, y_train)\n# Predict on the test features, print the results\npred1 = nb_classifier.predict(count_test3)\n# Print the accuracy\nmetrics.accuracy_score(y_test, pred1)","2c9b0b9a":"print(\"Confusion Matrix:\")\nprint(metrics.confusion_matrix(y_test, pred1))\nprint(\"\\n\\n Classification Report:\\n\")\nprint(metrics.classification_report(y_test, pred1))","97be2f42":"classes = ['Not Comedy', 'Comedy']\ncm = metrics.confusion_matrix(y_test, pred1)\n\nfigure, ax = plot_confusion_matrix(conf_mat = cm,\n                                   class_names = classes,\n                                   show_absolute = False,\n                                   show_normed = True,\n                                   colorbar = True)\n\nplt.show()","94a3c47c":"# Split into training and test set\nX_train, X_test, y_train, y_test = train_test_split(X3, y3 , test_size = 0.33, random_state = 53)\n# Create and fit & Transform the Vectorizer\ncount_vectorizer2 = CountVectorizer(stop_words = 'english')\ncount_train3 = count_vectorizer2.fit_transform(X_train.values) \ncount_test3 = count_vectorizer2.transform(X_test.values)","90c70828":"# Create and fit the model\nlinreg = LinearRegression().fit(count_train3,y_train)\n# Predict on the test features, print the results\npred3 = linreg.predict(count_test3)\n\n# The mean squared error\nprint('Mean squared error: %.4f'\n      % metrics.mean_squared_error(pred3,y_test))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.4f'\n      % metrics.r2_score(pred3, y_test))","5977bb8f":"# Create and fit the model\nnb_classifier = MultinomialNB()\nnb_classifier.fit(count_train3, y_train)\n# Predict on the test features, print the results\npred2 = nb_classifier.predict(count_test3)\nmetrics.accuracy_score(y_test, pred2)","861803f3":"print(\"Confusion Matrix:\")\nprint(metrics.confusion_matrix(y_test, pred2))\nprint(\"\\n\\n Classification Report:\\n\")\nprint(metrics.classification_report(y_test, pred2))","970c2245":"classes = ['Other','Comedy','Drama','Horror','Thriller','Action','Adventure']\ncm = metrics.confusion_matrix(y_test, pred2)\n\nfigure, ax = plot_confusion_matrix(conf_mat = cm,\n                                   class_names = classes,\n                                   show_absolute = False,\n                                   show_normed = True,\n                                   colorbar = True)\n\nplt.show()","8ec2f6c5":"#Remove NaNs from OverView Column\nmovie_df = movie_df.dropna(subset = ['overview'])\n#Create A title Columns\nmovie_df['title'] = movie_df['original_title']\nwiki_df2 = wiki_df[wiki_df['origin\/ethnicity'] == 'American']","b3e87e76":"#Create TFIDF Vectorizer\ntfidf = TfidfVectorizer(stop_words = 'english')","0401d65c":"#Fit & Transform on movie overview corpus\ntfidf_matrix2 = tfidf.fit_transform(movie_df['overview'])\n#Create a Cosine Similarity Matrix on corpus\ncosine_sim2 = metrics.pairwise.linear_kernel(tfidf_matrix2, tfidf_matrix2)","b33025e6":"#Create TFIDF Vectorizer on Wikepdia Movie Plot corpus\ntfidf_matrix1 = tfidf.fit_transform(wiki_df2['plot'][:10000])\ncosine_sim = metrics.pairwise.linear_kernel(tfidf_matrix1, tfidf_matrix1)","cace78be":"# Generate mapping between titles and index\nindices1 = pd.Series(movie_df.index, index=movie_df['title']).drop_duplicates()\n\ndef get_recommendations2(title, cosine_sim, indices = indices1):\n    # Get index of movie that matches title\n    idx = indices[title]\n    # Sort the movies based on the similarity scores\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    # Get the scores for 10 most similar movies\n    sim_scores = sim_scores[1:11]\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n    # Return the top 10 most similar movies\n    return movie_df['title'].iloc[movie_indices]\n\n# Generate mapping between titles and index\nindices2 = pd.Series(wiki_df2.index, index=wiki_df2['title']).drop_duplicates()\n\ndef get_recommendations(title, cosine_sim, indices = indices2):\n    # Get index of movie that matches title\n    idx = indices[title]\n    # Sort the movies based on the similarity scores\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    # Get the scores for 10 most similar movies\n    sim_scores = sim_scores[1:11]\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n    # Return the top 10 most similar movies\n    return wiki_df2['title'].iloc[movie_indices]","13283326":"movie_df[['overview','title']]","1edc56f2":"print('Top 10 similar Movies')\nget_recommendations2('jurassic world',cosine_sim2, indices1)","fc89426b":"## Import Data","2475b29d":"## Recommendation System","ebaac5db":"## PreProcessing","f5dbdc95":"## Univariate Analysis","ddbdbcde":"### Word Cloud without Stop Words of Lemmatized words in Movie Plots","32129189":"### Word Cloud without Stop Words of Movie Plots","f42cfa6e":"# EDA","34895da6":"## Naives Bayes Model","3af3561c":"### Word Cloud of Nouns in Movie Plots","76eadd8e":"## Predict if movie plot is comedy of not","0e5bd9c8":"# Predictive Models","1105c3a7":"## Regression Model","21b9b98d":"## Naives Bayes Model","28c206d6":"## Bivariate Analysis","e8fdd322":"## Predict if movie plot is Comedy, Drama, Horror, Thriller, Action, Adventure, or other.","9474a3cd":"## Text Analysis"}}