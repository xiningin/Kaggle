{"cell_type":{"3fd73b76":"code","7cdf817b":"code","4ccb28af":"code","de4dacc7":"code","3b340f6f":"code","377ab674":"code","87ec00ae":"code","1488935e":"code","83077197":"code","b55dbb4c":"code","525ae6cb":"code","0e16a1c7":"code","ad600be5":"code","c6e6d96c":"code","7de08a90":"code","8543caba":"code","ae26d27a":"code","2e747738":"code","d4c45358":"code","9502fa8e":"code","9274ebd2":"code","8e1ffde3":"code","8a897d8c":"code","8db45abe":"markdown","3a91cadc":"markdown"},"source":{"3fd73b76":"import numpy as np\nimport pandas as pd\n\nfrom sklearn import svm\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import cross_val_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler","7cdf817b":"#Read data\ntest_set = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain_set = pd.read_csv('..\/input\/titanic\/train.csv')\nfull_set = pd.concat([train_set, test_set], sort=True).reset_index(drop=True)","4ccb28af":"####\n#train_set.info()\n\n#549\n#342\n\n#train_set = pd.concat([train_set.loc[train_set.Survived == 0][:342], train_set.loc[train_set.Survived == 1]])\n#train_set = pd.DataFrame([(train_set.loc[train_set.Survived == 0][:342]),(train_set.loc[train_set.Survived == 1])])\n#train_set","de4dacc7":"# test_set empty values\ntest_set.isna().sum()[lambda x : x>0]","3b340f6f":"# train_set empty values\ntrain_set.isna().sum()[lambda x : x>0]","377ab674":"mean_age = full_set.Age.mean()\n\ntrain_set['Age'] = train_set['Age'].fillna(mean_age)\ntest_set['Age'] = test_set['Age'].fillna(mean_age)","87ec00ae":"pclass = full_set.loc[full_set.Fare.isnull(), 'Pclass'].values[0]\nmedian_fare = full_set.loc[full_set.Pclass== pclass, 'Fare'].median()\ntest_set.loc[test_set.Fare.isnull(), 'Fare'] = median_fare","1488935e":"train_set[\"family_size\"] = train_set['SibSp'] + full_set['Parch'] \ntest_set[\"family_size\"] = test_set['SibSp'] + test_set['Parch'] ","83077197":"#1 = Adult, 0 Not an adult\ntrain_set[\"Adult\"] = 0\ntrain_set.loc[train_set['Adult'] > 18, 'Adult'] = 1\n\ntest_set[\"Adult\"] = 0\ntest_set.loc[test_set['Adult'] > 18, 'Adult'] = 1","b55dbb4c":"# test_set empty values\ntest_set.isna().sum()[lambda x : x>0]","525ae6cb":"#full_set.loc[full_set.Fare.isnull(), 'Pclass'].values[0]","0e16a1c7":"# train_set empty values\ntrain_set.isna().sum()[lambda x : x>0]","ad600be5":"#train_set['Title'] = train_set['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\n#test_set['Title'] = test_set['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]","c6e6d96c":"train_set['Embarked'].fillna(train_set['Embarked'].mode()[0], inplace = True)\ntest_set['Embarked'].fillna(train_set['Embarked'].mode()[0], inplace = True)","7de08a90":"train_set[train_set.Age> 18 ]","8543caba":"def update_nan_fare(data_set):\n    if 'Fare' in data_set:\n        mean_fare = full_set.Fare.mean()\n        data_set['Fare'] = data_set['Fare'].fillna(mean_fare)\n    return(data_set)\n\ndef was_cab_assigned(data_set):\n    cab_assigned = 1\n    cab_not_assigned = 0\n    data_set['Cabin'].fillna(cab_not_assigned, inplace=True)\n    data_set.loc[data_set.Cabin != cab_not_assigned, 'Cabin'] = \\\n        cab_assigned\n    return data_set\n\ndef enconde_embarked(data_set):\n    data_set[\"Embarked\"] = LabelEncoder().fit_transform(data_set['Embarked'])\n    return(data_set)\n    \n\ndef delete_cols(data_set):\n    list_columns = ['Ticket', 'PassengerId', 'Name','Cabin', 'family_size', 'Adult'] \n    return data_set.drop(columns=list_columns)\n\n\ndef variables(data_set):\n    X = data_set\n    y = \"NA\"\n    if 'Survived' in data_set:\n        y = data_set.Survived\n        X = data_set[data_set.columns.difference(['Survived'])]\n    return(X,y)\n\n\ndef encode_sex(data_set):\n    data_set[\"Sex\"] = LabelEncoder().fit_transform(data_set['Sex'])\n    return(data_set)\n\n#def encode_title(data_set):\n#    data_set[\"Title\"] = LabelEncoder().fit_transform(data_set['Title'])\n#    return(data_set)\n\n\ndef cleaned_data_set(data_set):\n    return update_nan_fare(delete_cols(enconde_embarked(encode_sex(data_set))))\n","ae26d27a":"cleaned_train_set = cleaned_data_set(train_set)\ncleaned_train_set.corr()","2e747738":"X, y = variables(cleaned_train_set)\nX","d4c45358":"X  = preprocessing.StandardScaler().fit(X).transform(X)","9502fa8e":"rfc_model = RandomForestClassifier(n_jobs=-1)\n#n_jobs=-1,max_leaf_nodes=8, max_depth=7\nrfc_model.fit(X, y)\ncv_scores = cross_val_score(rfc_model, X, y, cv=15)\nprint(f\"CV scores: {cv_scores}\")\n\nprint(f\"CV mean score: {cv_scores.mean()}. Model score: {rfc_model.score(X, y)}\")\n\nprint(f\"min value: {min(cv_scores)}\")\n\n#min_samples_leaf=20","9274ebd2":"labels = ['Yes','No']\nplot_confusion_matrix(rfc_model, X, y, display_labels=labels, normalize=None)\nplt.show()","8e1ffde3":"y_prima = rfc_model.predict(X)\nprint(classification_report(y, y_prima, target_names=labels))","8a897d8c":"X, _ = variables(cleaned_data_set(test_set))\n\nsample = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\") \nsample[\"Survived\"] = rfc_model.predict(X)\nsample.to_csv(r\"send_gender_submission9.csv\", index=False)","8db45abe":"# Predictions for the Test Set","3a91cadc":"# MODEL"}}