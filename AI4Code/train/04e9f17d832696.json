{"cell_type":{"118dc74a":"code","284ffbe3":"code","831523b9":"code","ce6bc43d":"code","81e2200e":"code","e03add55":"code","3b12af2c":"code","a46b6a03":"code","2f8a4805":"code","5a1f2e10":"code","8c03d32f":"code","88c28c0f":"code","3a244b1f":"code","adebc65e":"code","73603aba":"code","89f65da8":"code","712c02f2":"code","328672e6":"code","e782845a":"code","d0bccd88":"code","891317e0":"code","877f92a9":"code","b227c906":"code","1d656c06":"code","da98d3a1":"code","641b8698":"code","e7a4b8a8":"code","a8a9e904":"markdown","cf5d41d6":"markdown","823ee7e9":"markdown","b5523ab7":"markdown","82e3dc0f":"markdown","32653e35":"markdown","025c1deb":"markdown","b7ea0900":"markdown","0be37ad1":"markdown","9571e76f":"markdown","9126cfbd":"markdown","4690def5":"markdown","51fe20b7":"markdown","fab3e41c":"markdown","224b9c35":"markdown","c36a7510":"markdown","5ce4593e":"markdown"},"source":{"118dc74a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model \nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor,ExtraTreesRegressor\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_selection import SelectKBest,f_regression\n\n\n%matplotlib inline","284ffbe3":"add_df = pd.read_csv(\"\/kaggle\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv\") \nadd_df.head(10)","831523b9":"add_df.info()","ce6bc43d":"add_df.describe()","81e2200e":"# removing extra index column\nadd_df.drop(columns=['Serial No.'],inplace=True)","e03add55":"# renaming columns forbetter clarity\nadd_df.rename(columns={'Chance of Admit ':'Chance of Admit','LOR ':'LOR'},inplace=True)\nadd_df.columns","3b12af2c":"add_df.hist(bins=10,figsize=(10,8))","a46b6a03":"plt.figure(figsize = (16,10))\nsns.heatmap(add_df.corr(),annot=True,center=0, cmap=\"YlGnBu\")","2f8a4805":"add_df.columns","5a1f2e10":"sns.pairplot(add_df, x_vars=['GRE Score', 'TOEFL Score', 'University Rating', 'SOP', 'LOR', 'CGPA',\n       'Research'],y_vars=['Chance of Admit'],height=5, aspect=0.7)","8c03d32f":"add_df[['Research','Chance of Admit']].groupby(by='Research').mean().sort_values(by='Chance of Admit',ascending=False).plot(kind='bar')\nadd_df[['Research','Chance of Admit']].groupby(by='Research').mean().sort_values(by='Chance of Admit',ascending=False)","88c28c0f":"add_df[['University Rating','Chance of Admit']].groupby(by='University Rating').mean().sort_values(by='Chance of Admit',ascending=False).plot(kind='bar')\nadd_df[['University Rating','Chance of Admit']].groupby(by='University Rating').mean().sort_values(by='Chance of Admit',ascending=False)","3a244b1f":"add_df[['SOP','Chance of Admit']].groupby(by='SOP').mean().sort_values(by='Chance of Admit',ascending=False).plot(kind='bar')\nadd_df[['SOP','Chance of Admit']].groupby(by='SOP').mean().sort_values(by='Chance of Admit',ascending=False)","adebc65e":"add_df[['LOR','Chance of Admit']].groupby(by='LOR').mean().sort_values(by='Chance of Admit',ascending=False).plot(kind='bar')\nadd_df[['LOR','Chance of Admit']].groupby(by='LOR').mean().sort_values(by='Chance of Admit',ascending=False)","73603aba":"#scaling the data\nadd_df_norm = add_df.copy()\nscaler = MinMaxScaler()\ncolumn_names_to_normalize = ['CGPA', 'GRE Score', 'LOR', 'SOP','TOEFL Score']\nx = add_df_norm[column_names_to_normalize].values\nx_scaled = scaler.fit_transform(x)\ndf_temp = pd.DataFrame(x_scaled, columns=column_names_to_normalize, index = add_df_norm.index)\nadd_df_norm[column_names_to_normalize] = df_temp","89f65da8":"add_df_norm.hist(bins=10,figsize=(10,8))","712c02f2":"add_df1 = add_df_norm.copy()\ny = add_df1['Chance of Admit']\nadd_df1.drop(columns=['Chance of Admit'],inplace=True)","328672e6":"X_train, X_test, y_train, y_test = train_test_split(add_df1, y, test_size=0.2,random_state=1)","e782845a":"model1 = Pipeline([('scaler',MinMaxScaler()),('clf',linear_model.LinearRegression())])\n\nmodel1.fit(X_train, y_train)\npred = model1.predict(X_test)\n\nMSE = metrics.mean_squared_error(y_test, pred)\nRMSE = np.sqrt(MSE)\nRsq = metrics.r2_score(y_test, pred)\n\nprint(\"MSE:{}  RMSE:{}  R-Squared:{}\".format(MSE,RMSE,Rsq))\n","d0bccd88":"coef_df1 = pd.DataFrame(zip(X_train.columns,model1.named_steps['clf'].coef_),columns=['Feature','Coefficient'])\ncoef_df1.sort_values(by='Coefficient',inplace=True, ascending=False)\n\nplt.figure(figsize = (10,6))\nsns.barplot(x='Feature',y='Coefficient',data=coef_df1)\ncoef_df1","891317e0":"#model without SOP considering score\nadd_df2 = add_df_norm.copy()\ny = add_df2['Chance of Admit']\nadd_df2.drop(columns=['Chance of Admit','SOP'],inplace=True)\n\nX_train1, X_test1, y_train1, y_test1 = train_test_split(add_df2, y, test_size=0.2,random_state=1)\n\n\n","877f92a9":"# we can use the same model1 from above\n\nmodel1.fit(X_train1, y_train1)\npred = model1.predict(X_test1)\n\nMSE = metrics.mean_squared_error(y_test1, pred)\nRMSE = np.sqrt(MSE)\nRsq = metrics.r2_score(y_test1, pred)\n\nprint(\"MSE:{}  RMSE:{}  R-Squared:{}\".format(MSE,RMSE,Rsq))","b227c906":"model2 = Pipeline([('scaler',MinMaxScaler()),('clf',SVR(kernel='linear'))])\n\nmodel2.fit(X_train1, y_train1)\npred = model2.predict(X_test1)\n\nMSE = metrics.mean_squared_error(y_test1, pred)\nRMSE = np.sqrt(MSE)\nRsq = metrics.r2_score(y_test1, pred)\n\nprint(\"MSE:{}  RMSE:{}  R-Squared:{}\".format(MSE,RMSE,Rsq))\n","1d656c06":"coef_df2 = pd.DataFrame(zip(X_train.columns,model2.named_steps['clf'].coef_[0]),columns=['Feature','Coefficient'])\ncoef_df2.sort_values(by='Coefficient',inplace=True, ascending=False)\n\nplt.figure(figsize = (10,6))\nsns.barplot(x='Feature',y='Coefficient',data=coef_df2)\ncoef_df2","da98d3a1":"model3 = make_pipeline(DecisionTreeRegressor())\n\nmodel3.fit(X_train1, y_train1)\npred = model4.predict(X_test1)\n\nMSE = metrics.mean_squared_error(y_test1, pred)\nRMSE = np.sqrt(metrics.mean_squared_error(y_test1, pred))\n\nRsq = metrics.r2_score(y_test1, pred)\n\nprint(\"MSE:{}  RMSE:{}  R-Squared:{}\".format(MSE,RMSE,Rsq))\n","641b8698":"model4 = make_pipeline(RandomForestRegressor(random_state=1,n_estimators= 200))\n\nmodel4.fit(X_train1, y_train1)\npred = model4.predict(X_test1)\n\nMSE = metrics.mean_squared_error(y_test1, pred)\nRMSE = np.sqrt(metrics.mean_squared_error(y_test1, pred))\n\nRsq = metrics.r2_score(y_test1, pred)\n\nprint(\"MSE:{}  RMSE:{}  R-Squared:{}\".format(MSE,RMSE,Rsq))\n","e7a4b8a8":"model5 = make_pipeline(ExtraTreesRegressor())\n\nmodel5.fit(X_train, y_train)\npred = model5.predict(X_test)\n\nMSE = metrics.mean_squared_error(y_test, pred)\nRMSE = np.sqrt(metrics.mean_squared_error(y_test, pred))\nRsq = metrics.r2_score(y_test, pred)\n\n\nprint(\"MSE:{}  RMSE:{}  R-Squared:{}\".format(MSE,RMSE,Rsq))\n","a8a9e904":"#### Linear Models","cf5d41d6":"Students with Research experience are more likely to be admitted","823ee7e9":"By far Simple Linear Regression performs the best to estimate the chances of admit\n- Training accuracy of the model can be improved with additinal data \n- Boosting algorithms and regularization can also be used ","b5523ab7":"Linear relation between input features and output features can be visualized","82e3dc0f":"\n <table>\n  <tr>\n    <th>Columns<\/th>\n    <th>RMSE<\/th>\n    <th>R-squared<\/th>\n  <\/tr>\n  <tr>\n    <th>With SOP<\/th>\n    <td>0.058814<\/td>\n    <td>0.82087<\/td>\n  <\/tr>\n  <tr>\n    <th>Without SOP<\/th>\n    <td>0.058717<\/td>\n    <td>0.82146<\/td>\n  <\/tr>\n<\/table> \n\n","32653e35":"We can see that all the columns have a strong positive corelation with output column\n1. GRE score is strongly co-related with TOEFL Score, reason behind this could be GRE verbal section has some similarity to TOEFL test which is also based on verbal skills\n2. GRE score is also strongly co-related with CGPA, reason behind this could be higher academic score could lead  potentially higher GRE score, same in the case of TOEFL score","025c1deb":"Our model performs slightly better without considering SOP score","b7ea0900":"Therefore, CGPA is the most important factor for higher admit chances and SOP score is the least important feature","0be37ad1":"##### SVM regressor","9571e76f":"### Input data","9126cfbd":"#### Tree based Models","4690def5":"### Result","51fe20b7":"### Data Plots","fab3e41c":"##### Linear Regression","224b9c35":"### Models","c36a7510":"### Scaling Data","5ce4593e":"(1 - highest and 5 - lowest)\n\n--- \n\nHIgher the University rating lower are the chances of getting admit\n\n---"}}