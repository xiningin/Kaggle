{"cell_type":{"d674084d":"code","b77c3c69":"code","b1088eb0":"code","e65c3cf4":"code","1c6c0531":"code","e81ecab8":"code","fa56a1d0":"code","80de24de":"code","308141ae":"markdown","f2240cd6":"markdown","8e15f284":"markdown","8f91f1e2":"markdown"},"source":{"d674084d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # showing and rendering figures\n# io related\nfrom skimage.io import imread\nimport os\nfrom glob import glob\n# not needed in Kaggle, but required in Jupyter\n%matplotlib inline ","b77c3c69":"base_bone_dir = os.path.join('..', 'input')\nage_df = pd.read_csv(os.path.join(base_bone_dir, 'boneage-training-dataset.csv'))\nage_df['path'] = age_df['id'].map(lambda x: os.path.join(base_bone_dir,\n                                                         'boneage-training-dataset', \n                                                         'boneage-training-dataset', \n                                                         '{}.png'.format(x)))\nage_df['exists'] = age_df['path'].map(os.path.exists)\nprint(age_df['exists'].sum(), 'images found of', age_df.shape[0], 'total')\nage_df['gender'] = age_df['male'].map(lambda x: 'male' if x else 'female')\nage_df.dropna(inplace = True)\nage_df.sample(3)","b1088eb0":"age_df[['boneage', 'gender']].hist(figsize = (10, 5))","e65c3cf4":"age_groups = 8\nage_df['age_class'] = pd.qcut(age_df['boneage'], age_groups)\nage_overview_df = age_df.groupby(['age_class', \n                                  'gender']).apply(lambda x: x.sample(1)\n                                                             ).reset_index(drop = True\n                                                                          )\n","1c6c0531":"age_overview_df","e81ecab8":"fig, m_axs = plt.subplots( age_groups, 2, figsize = (12, 6*age_groups))\nfor c_ax, (_, c_row) in zip(m_axs.flatten(), \n                            age_overview_df.sort_values(['age_class', 'gender']).iterrows()):\n    c_ax.imshow(imread(c_row['path']),\n                cmap = 'viridis')\n    c_ax.axis('off')\n    c_ax.set_title('{boneage} months, {gender}'.format(**c_row))","fa56a1d0":"fig, m_axs = plt.subplots( age_groups, 2, figsize = (12, 6*age_groups))\nfor c_ax, (_, c_row) in zip(m_axs.flatten(), \n                            age_overview_df.sort_values(['age_class', 'gender']).iterrows()):\n    c_ax.imshow(imread(c_row['path']),\n                cmap = 'bone')\n    c_ax.axis('off')\n    c_ax.set_title('{boneage} months, {gender}'.format(**c_row))","80de24de":"fig, m_axs = plt.subplots( age_groups, 2, figsize = (12, 6*age_groups))\nfor c_ax, (_, c_row) in zip(m_axs.flatten(), \n                            age_overview_df.sort_values(['age_class', 'gender']).iterrows()):\n    c_ax.imshow(imread(c_row['path']),\n                cmap = 'gray')\n    c_ax.axis('off')\n    c_ax.set_title('{boneage} months, {gender}'.format(**c_row))","308141ae":"# Group Ages\nTo make the problem a simpler we can divide the data up into subgroups. Here we make 8 subgroups of age and show an example from both genders for each category to get a feeling for what is important and also the diversity in the data","f2240cd6":"# Examine the distribution of age and gender\nAge is shown in months","8e15f284":"age_df['gender'].hist(figsize = (10, 5))","8f91f1e2":"# Overview\nHere we just load and organize the data to get an idea of what is inside and make it easier to build models out of"}}