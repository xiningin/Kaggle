{"cell_type":{"c60e080a":"code","b372425b":"code","d3ff8a4e":"code","86b1a932":"code","b6b9979a":"code","932ca873":"code","5024264a":"markdown","33649b58":"markdown","e4ff4840":"markdown","18d25823":"markdown","23891b10":"markdown","b63f6505":"markdown"},"source":{"c60e080a":"! ls -l \/kaggle\/input\/sartorius-cell-instance-segmentation\n# ! ls -l \/kaggle\/input\/sartorius-cell-instance-segmentation\/LIVECell_dataset_2021","b372425b":"import os\nimport pandas as pd\n\nPATH_DATASET = \"\/kaggle\/input\/sartorius-cell-instance-segmentation\"\nPATH_IMAGES = os.path.join(PATH_DATASET, \"train\")\nPATH_TRAIN_CSV = os.path.join(PATH_DATASET, \"train.csv\")\n\ndf_train = pd.read_csv(PATH_TRAIN_CSV)\ndisplay(df_train.head())\ndf_train.loc[0, \"annotation\"]","d3ff8a4e":"df_counts = df_train.groupby(['id']).size()\ndisplay(df_counts.head())\nax = df_counts.hist(bins=50, grid=True)\nax.set_xlabel(\"Annotations per image\")\nax.set_ylabel(\"Images with particular annot. count\")","86b1a932":"import numpy as np\nimport matplotlib.pyplot as plt\n\ndef rle_decode(mask_rle: str, img: np.ndarray = None, img_shape: tuple = None, label: int = 1) -> np.ndarray:\n    seq = mask_rle.split()\n    starts = np.array(list(map(int, seq[0::2])))\n    lengths = np.array(list(map(int, seq[1::2])))\n    assert len(starts) == len(lengths)\n    ends = starts + lengths\n    \n    if img is None:\n        img = np.zeros((np.product(img_shape), ), dtype=np.uint16)\n    else:\n        img_shape = img.shape\n        img = img.flatten()\n    for begin, end in zip(starts, ends):\n        img[begin:end] = label\n    return img.reshape(img_shape)\n\nmask = rle_decode(df_train.loc[0, \"annotation\"], img_shape=(df_train.loc[0, \"height\"], df_train.loc[0, \"width\"]))\nmask = rle_decode(df_train.loc[1, \"annotation\"], img=mask, label=2)\n_= plt.imshow(mask)","b6b9979a":"def create_mask(df_image: pd.DataFrame) -> np.ndarray:\n    assert len(df_image[\"id\"].unique()) == 1\n    sizes = list(set((row[\"height\"], row[\"width\"]) for _, row in df_image.iterrows()))\n    assert len(sizes) == 1\n    mask = np.zeros(sizes[0], dtype=np.uint16)\n    df_image.reset_index(inplace=True)\n    for idx, row in df_image.iterrows():\n        mask = rle_decode(row[\"annotation\"], img=mask, label=idx + 1)\n    return mask\n    \n\n# print(df_train[\"sample_id\"].unique())\nmask = create_mask(df_train[df_train[\"id\"] == \"0030fd0e6378\"])\n_= plt.imshow(mask, interpolation='antialiased')","932ca873":"from ipywidgets import interact, SelectionSlider\n\n\ndef show_image_annot(img_name: str, df_train: pd.DataFrame, img_folder: str):\n    print(img_name)\n    df_img = df_train[df_train[\"id\"] == img_name]\n    path_img = os.path.join(img_folder, f\"{img_name}.png\")\n    img = plt.imread(path_img)\n    mask = create_mask(df_img)\n    fig, axarr = plt.subplots(ncols=3, figsize=(18, 6))\n    axarr[0].imshow(img)\n    axarr[1].imshow(img)\n    axarr[1].contour(mask, levels=np.unique(mask).tolist(), cmap=\"inferno\", linewidths=0.5)\n    axarr[2].imshow(mask, cmap=\"inferno\", interpolation='antialiased')\n    return fig\n\n\ndef interactive_show(df_train: pd.DataFrame, img_folder: str):\n    uq_images = df_train[\"id\"].unique()\n    interact(\n        lambda im: plt.show(show_image_annot(im, df_train, img_folder)),\n        im=SelectionSlider(\n            options=uq_images,\n            value=\"cc40345857dd\",  # uq_images[np.random.randint(0, len(uq_images))],\n            description='Select image:',\n            disabled=False,\n            continuous_update=False,\n            orientation='horizontal',\n            readout=True\n        ),\n    )\n\ninteractive_show(df_train, PATH_IMAGES)","5024264a":"Browsing the provided data\/images\/annotations...","33649b58":"## Decode single annotation","e4ff4840":"## Histogram of annotation per image","18d25823":"## Interactive view\n\nNote that for interative browsing you need to be in edit mode (it is not supported for saved version)","23891b10":"## Create complete mask","b63f6505":"# \ud83e\udda0 Cell Instance Segmentation: \ud83d\udd0d interative data view\n\nFor more or future development see https:\/\/borda.github.io\/kaggle_cell-inst-segm"}}