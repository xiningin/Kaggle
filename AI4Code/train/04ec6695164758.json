{"cell_type":{"d49d24d8":"code","1c68883b":"code","a59742c4":"code","f14f27df":"code","21b6c839":"code","ae8a8647":"code","7f55f692":"code","d4d56ae6":"code","9bb2a30b":"code","a6e5e1ea":"code","6e00ccbf":"code","0c918832":"code","2bd0cbbe":"code","d51a6bf1":"code","b3b3ec20":"code","9e7d56b6":"code","6a733973":"code","dba54e3e":"code","5703416a":"code","eadc1761":"code","dc36fc4a":"code","402de56d":"markdown","7c0d6cea":"markdown","6d788bbb":"markdown","826a5ce7":"markdown","855e3c7e":"markdown","2043ad6c":"markdown"},"source":{"d49d24d8":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\n\nimport string\nimport warnings\nwarnings.filterwarnings('ignore')","1c68883b":"df_train = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv')\ndf_train.head()","a59742c4":"df_test = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv')\ndf_test.head()","f14f27df":"samp_sub = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')\nsamp_sub.head()","21b6c839":"print(df_train.shape)\nprint(df_test.shape)\nprint(samp_sub.shape)","ae8a8647":"df_train.info()","7f55f692":"df_train.describe()","d4d56ae6":"sns.countplot(x=df_train.target,palette='Set2')","9bb2a30b":"print(df_train.isnull().sum())","a6e5e1ea":"missing_values = pd.DataFrame(df_train.isna().sum())\nmissing_values.rename(columns={0:'missing_value'},inplace=True)\ndef train_missing_perecentage(idx):\n    return (idx\/len(df_train))*100\nmissing_values['missing_value'] = missing_values.apply(train_missing_perecentage)\nfeatures = list(df_train.columns)\npercentage = []\nfor i in features:\n    percentage.append(float(missing_values.loc[str(i)]))\nmissing_values = pd.DataFrame({'Feature':features,'Percentage':percentage})","6e00ccbf":"import plotly.express as px\npx.scatter(data_frame=missing_values,x='Feature',y='Percentage',template='plotly_dark')","0c918832":"X = df_train.drop(['id', 'target'], axis = 1)\nY = df_train.target","2bd0cbbe":"import optuna\n\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score","d51a6bf1":"def objective(trial,data=X,target=Y):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2, random_state=42)\n    param = {\n        'random_state': 42,\n        'n_estimators': 500,\n        'task': 'train',\n        'objective': 'binary',\n        'metric':'binary_logloss',\n        'reg_alpha': trial.suggest_categorical('reg_alpha', [1,10.0]),\n        'reg_lambda': trial.suggest_categorical('reg_lambda', [1e-1,1e-2]),\n        'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.4,0.6,0.8]),\n        'subsample': trial.suggest_categorical('subsample', [0.4,0.6,0.8]),\n        'subsample_freq': trial.suggest_categorical('subsample_freq', [1,2]),\n        'learning_rate': 5e-3,\n        'max_depth': -1,\n        'num_leaves' : trial.suggest_categorical('num_leaves', [128,512]),\n        'min_child_weight' : trial.suggest_categorical('min_child_weight', [128,256]),\n        'min_child_samples': trial.suggest_categorical('min_child_samples', [20,100]),\n        'importance_type': 'gain'\n    }\n    model = lgb.LGBMRegressor(**param)  \n    \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=250)\n    \n    preds = model.predict(test_x)\n    \n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","b3b3ec20":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=10)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","9e7d56b6":"study.trials_dataframe()","6a733973":"optuna.visualization.plot_optimization_history(study)","dba54e3e":"optuna.visualization.plot_parallel_coordinate(study)","5703416a":"optuna.visualization.plot_slice(study)","eadc1761":"#Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","dc36fc4a":"optuna.visualization.plot_edf(study)","402de56d":"## (Let's Create an LGBM model with the best hyperparameters)","7c0d6cea":"## Let's build our optimization function using optuna","6d788bbb":"# Data","826a5ce7":"# Modeling","855e3c7e":"# Visualization for Hyperparameter Optimization Analysis","2043ad6c":"# Missing values"}}