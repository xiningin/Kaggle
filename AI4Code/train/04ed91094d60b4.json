{"cell_type":{"f4c03902":"code","2edc456e":"code","7ff5e23f":"code","c2e238f4":"code","8da8c915":"code","d69ea6f3":"code","fdf12d83":"code","b25f755c":"code","c4ab0b1e":"code","7596964e":"code","d927597b":"code","0134c4e0":"code","ab620275":"code","261bc2fa":"code","eb7104b0":"code","2ad144ae":"code","d27c72c6":"code","dc2f9148":"code","a3bdf1c7":"code","1d621851":"markdown","766ed735":"markdown","139f9240":"markdown","3acd4f4b":"markdown","e98a2371":"markdown"},"source":{"f4c03902":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2edc456e":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_selection import chi2\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.svm import LinearSVC","7ff5e23f":"train = pd.read_csv('\/kaggle\/input\/stress-analysis-in-social-media\/dreaddit-train.csv')\ntrain.shape","c2e238f4":"test = pd.read_csv('\/kaggle\/input\/stress-analysis-in-social-media\/dreaddit-test.csv')\ntest.shape","8da8c915":"full = pd.concat((train, test), sort=False).reset_index(drop=True)","d69ea6f3":"df = full[['text','subreddit']].copy()\ndf.head()","fdf12d83":"pd.DataFrame(df.subreddit.unique()).values","b25f755c":"from wordcloud import WordCloud,STOPWORDS\n\nplt.figure(figsize=(60,35))\nsubset = df[df['subreddit']=='ptsd']\ntext = subset.text.values\ncloud1=WordCloud(stopwords=STOPWORDS,background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800).generate(\" \".join(text))\n\nplt.subplot(5,2,1)\nplt.axis('off')\nplt.title(\"PTSD\",fontsize=40)\nplt.imshow(cloud1)\n\nsubset = df[df['subreddit']=='assistance']\ntext = subset.text.values\ncloud2=WordCloud(stopwords=STOPWORDS,background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(5,2,2)\nplt.axis('off')\nplt.title(\"Assistance\",fontsize=40)\nplt.imshow(cloud2)\n\nsubset = df[df['subreddit']=='relationships']\ntext = subset.text.values\ncloud3=WordCloud(stopwords=STOPWORDS,background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(5,2,3)\nplt.axis('off')\nplt.title(\"Relationships\",fontsize=40)\nplt.imshow(cloud3)\n\nsubset = df[df['subreddit']=='survivorsofabuse']\ntext = subset.text.values\ncloud4=WordCloud(stopwords=STOPWORDS,background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(5,2,4)\nplt.axis('off')\nplt.title(\"Survivors of abuse\",fontsize=40)\nplt.imshow(cloud4)\n\nsubset = df[df['subreddit']=='domesticviolence']\ntext = subset.text.values\ncloud5=WordCloud(stopwords=STOPWORDS,background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(5,2,5)\nplt.axis('off')\nplt.title(\"Domestic violence\",fontsize=40)\nplt.imshow(cloud5)\n\nsubset = df[df['subreddit']=='anxiety']\ntext = subset.text.values\ncloud6=WordCloud(stopwords=STOPWORDS,background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(5,2,6)\nplt.axis('off')\nplt.title(\"Anxiety\",fontsize=40)\nplt.imshow(cloud6)\n\nsubset = df[df['subreddit']=='homeless']\ntext = subset.text.values\ncloud7=WordCloud(stopwords=STOPWORDS,background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(5,2,7)\nplt.axis('off')\nplt.title(\"Homeless\",fontsize=40)\nplt.imshow(cloud7)\n\nsubset = df[df['subreddit']=='stress']\ntext = subset.text.values\ncloud8=WordCloud(stopwords=STOPWORDS,background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(5,2,8)\nplt.axis('off')\nplt.title(\"Stress\",fontsize=40)\nplt.imshow(cloud8)\n\nsubset = df[df['subreddit']=='almosthomeless']\ntext = subset.text.values\ncloud9=WordCloud(stopwords=STOPWORDS,background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(5,2,9)\nplt.axis('off')\nplt.title(\"Almost homeless\",fontsize=40)\nplt.imshow(cloud9)\n\nsubset = df[df['subreddit']=='food_pantry']\ntext = subset.text.values\ncloud10=WordCloud(stopwords=STOPWORDS,background_color='pink',colormap=\"Dark2\",collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(5,2,10)\nplt.axis('off')\nplt.title(\"Food pantry\",fontsize=40)\nplt.imshow(cloud10)","c4ab0b1e":"df['subreddit_id'] = df['subreddit'].factorize()[0]\nsubreddit_id_df = df[['subreddit', 'subreddit_id']].drop_duplicates()\n\nsubreddit_to_id = dict(subreddit_id_df.values)\nid_to_subreddit = dict(subreddit_id_df[['subreddit_id', 'subreddit']].values)\n\ndf.head()","7596964e":"import nltk\nnltk.download('stopwords')\nnltk.download('wordnet')\nfrom nltk.corpus import stopwords\nfrom string import punctuation\n\nstop = set(stopwords.words('english'))","d927597b":"import re\n\ndef lower(text):\n    return text.lower()\n\ndef remove_stopwords(text):\n    return \" \".join([word for word in str(text).split() if word not in stop])\n\ndef remove_punctuation(text):\n    return text.translate(str.maketrans('','', punctuation))\n\ndef clean_text(text):\n    text = lower(text)\n    text = remove_stopwords(text)\n    text = remove_punctuation(text)\n    return text\n\n#Apply function on column\ndf['clean_text']=df['text'].apply(clean_text)","0134c4e0":"from collections import Counter\ncnt=Counter()\n\nfor text in df['clean_text'].values:\n    for word in text.split():\n        cnt[word]+=1\n        \ncnt.most_common(10)","ab620275":"FREQWORDS = set([w for (w, wc) in cnt.most_common(10)])\ndef remove_freqwords(text):\n    return \" \".join([word for word in str(text).split() if word not in FREQWORDS])\n\ndf[\"clean_text\"] = df[\"clean_text\"].apply(lambda text: remove_freqwords(text))","261bc2fa":"from nltk.stem import WordNetLemmatizer\n\nlematizer=WordNetLemmatizer()\n\ndef lemmatizer_words(text):\n    return \" \".join([lematizer.lemmatize(word) for word in text.split()])\n\ndf['clean_text']=df['clean_text'].apply(lambda text: lemmatizer_words(text))","eb7104b0":"df.head()","2ad144ae":"tfidf = TfidfVectorizer(sublinear_tf=True, min_df=5,\n                        ngram_range=(1, 2), \n                        stop_words='english')\n\nfeatures = tfidf.fit_transform(df.clean_text).toarray()\n\nlabels = df.subreddit_id\n\nprint(\"Each of the %d text is represented by %d features (TF-IDF score of unigrams and bigrams)\" %(features.shape))","d27c72c6":"# Finding the three most correlated terms with each of the categories\nN = 3\nfor subreddit, subreddit_id in sorted(subreddit_to_id.items()):\n  features_chi2 = chi2(features, labels == subreddit_id)\n  indices = np.argsort(features_chi2[0])\n  feature_names = np.array(tfidf.get_feature_names())[indices]\n  unigrams = [v for v in feature_names if len(v.split(' ')) == 1]\n  bigrams = [v for v in feature_names if len(v.split(' ')) == 2]\n  print(\"\\n==> %s:\" %(subreddit))\n  print(\"  * Most Correlated Unigrams are: %s\" %(', '.join(unigrams[-N:])))\n  print(\"  * Most Correlated Bigrams are: %s\" %(', '.join(bigrams[-N:])))","dc2f9148":"X_train, X_test, y_train, y_test = train_test_split(features, labels, \n                                                    test_size=0.25,\n                                                    random_state = 20)","a3bdf1c7":"model = LinearSVC()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\nmetrics.accuracy_score(y_test, y_pred)","1d621851":"# Removing common words","766ed735":"# \u0421reating dictionaries","139f9240":"# Words lemmatization","3acd4f4b":"# Word Clouds","e98a2371":"# Text preprocessing"}}