{"cell_type":{"d2541125":"code","b648b05d":"code","e898ebfd":"code","3536689c":"code","ffdb2574":"code","ae0b95b9":"code","a912c5d2":"code","f692985a":"code","ace55c90":"code","60805651":"code","2c7164d8":"code","55df9a0f":"code","d8f51d5c":"code","5d48ab9d":"code","191ac435":"code","08409225":"code","b1570e1e":"code","e80a875d":"code","1e6e3220":"code","55927087":"code","c801b813":"markdown"},"source":{"d2541125":"import numpy as np \nimport pandas as pd \nimport os\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=UserWarning, module='bs4')\n\nprint(os.listdir(\"..\/input\"))","b648b05d":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer\nlemmatizer = WordNetLemmatizer()\nfrom bs4 import BeautifulSoup\nimport re\nfrom tqdm import tqdm\nfrom keras.utils import to_categorical\nimport random\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing import sequence\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.layers import Dense,Dropout,Embedding,LSTM\nfrom keras.callbacks import EarlyStopping\nfrom keras.losses import categorical_crossentropy\nfrom keras.optimizers import Adam\nfrom keras.models import Sequential","e898ebfd":"!unzip ..\/input\/sentiment-analysis-on-movie-reviews\/train.tsv.zip","3536689c":"!unzip ..\/input\/sentiment-analysis-on-movie-reviews\/test.tsv.zip","ffdb2574":"train= pd.read_csv(\".\/train.tsv\", sep=\"\\t\")\ntest = pd.read_csv(\".\/test.tsv\", sep=\"\\t\")\n\nprint(train.shape,test.shape)\n\ntrain.head()","ae0b95b9":"test.head()","a912c5d2":"train['Phrase'][0]","f692985a":"train.loc[train['SentenceId'] == 1]","ace55c90":"dist = train.groupby([\"Sentiment\"]).size()\n\nfig, ax = plt.subplots(figsize=(12,8))\nsns.barplot(dist.keys(), dist.values);","60805651":"#Function for cleaning the reviews, tokenize and lemmatize them.\n\ndef clean_sentences(df):\n    reviews = []\n\n    for sent in tqdm(df['Phrase']):\n        \n        #remove html content\n        review_text = BeautifulSoup(sent).get_text()\n        \n        #remove non-alphabetic characters\n        review_text = re.sub(\"[^a-zA-Z]\",\" \", review_text)\n    \n        #tokenize the sentences\n        words = word_tokenize(review_text.lower())\n    \n        #lemmatize each word to its lemma\n        lemma_words = [lemmatizer.lemmatize(i) for i in words]\n    \n        reviews.append(lemma_words)\n\n    return(reviews)","2c7164d8":"#cleaned reviews for both train and test set retrieved\n\ntrain_sentences = clean_sentences(train)\ntest_sentences = clean_sentences(test)\n\nprint(len(train_sentences))\nprint(len(test_sentences))","55df9a0f":"#Collect the dependent values and convert to one-hot encoded output using to_categorical\n\ntarget=train.Sentiment.values\ny_target=to_categorical(target)\nnum_classes=y_target.shape[1]\n","d8f51d5c":"X_train,X_val,y_train,y_val = train_test_split(train_sentences,y_target,\n                                             test_size=0.2,stratify=y_target)","5d48ab9d":"#Geting the No. of unique words and max length of a review available in the list of cleaned reviews.\n\nunique_words = set()\nlen_max = 0\n\nfor sent in tqdm(X_train):\n    \n    unique_words.update(sent)\n    \n    if(len_max<len(sent)):\n        len_max = len(sent)\n        \nprint(len(list(unique_words)))\nprint(len_max)","191ac435":"tokenizer = Tokenizer(num_words=len(list(unique_words)))\ntokenizer.fit_on_texts(list(X_train))\n\nX_train = tokenizer.texts_to_sequences(X_train)\nX_val = tokenizer.texts_to_sequences(X_val)\nX_test = tokenizer.texts_to_sequences(test_sentences)\n\n\nX_train = sequence.pad_sequences(X_train, maxlen=len_max)\nX_val = sequence.pad_sequences(X_val, maxlen=len_max)\nX_test = sequence.pad_sequences(X_test, maxlen=len_max)\n\nprint(X_train.shape,X_val.shape,X_test.shape)","08409225":"early_stopping = EarlyStopping(min_delta = 0.001, mode = 'max', monitor='val_acc', patience = 2)\ncallback = [early_stopping]","b1570e1e":"#Model using Keras LSTM\n\nmodel=Sequential()\n\nmodel.add(Embedding(len(list(unique_words)),300,input_length=len_max))\nmodel.add(LSTM(128,dropout=0.5, recurrent_dropout=0.5,return_sequences=True))\nmodel.add(LSTM(64,dropout=0.5, recurrent_dropout=0.5,return_sequences=False))\nmodel.add(Dense(100,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes,activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy',optimizer=Adam(lr=0.005),metrics=['accuracy'])\n\nmodel.summary()","e80a875d":"history=model.fit(X_train, y_train, validation_data=(X_val, y_val),\n                  epochs=6, batch_size=256, verbose=1, callbacks=callback)","1e6e3220":"epoch_count = range(1, len(history.history['loss']) + 1)\n\nplt.plot(epoch_count, history.history['loss'], 'r--')\nplt.plot(epoch_count, history.history['val_loss'], 'b-')\nplt.legend(['Training Loss', 'Validation Loss'])\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\n\nplt.show()","55927087":"y_pred=model.predict_classes(X_test)\n\nsub_file = pd.read_csv('..\/input\/sentiment-analysis-on-movie-reviews\/sampleSubmission.csv',sep=',')\nsub_file.Sentiment=y_pred\n\nsub_file.to_csv('Submission.csv',index=False)","c801b813":"The sentiment labels are:\n\n0 - negative\n\n1 - somewhat negative\n\n2 - neutral\n\n3 - somewhat positive\n\n4 - positive"}}