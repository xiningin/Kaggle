{"cell_type":{"36d68fc1":"code","b302115e":"code","05cc9155":"code","50286176":"code","ab36cf11":"code","fa5bd5b1":"code","b80084db":"code","dc94f173":"code","d3e40050":"code","44f5d61f":"code","39efdf3e":"markdown","90fca075":"markdown","f6ff2804":"markdown"},"source":{"36d68fc1":"import numpy as np,pandas as pd,pylab as pl\nimport h5py,torch\nfrom tensorflow import image as timage\nfrom torchvision import transforms,utils\nfrom torch.utils.data import DataLoader as tdl\nfrom torch.utils.data import Dataset as tds\nimport torch.nn as tnn\nfrom IPython.core.magic import register_line_magic\ndev=torch.device(\"cuda:0\" if torch.cuda.is_available() \n                 else \"cpu\")","b302115e":"class TData(tds):\n    def __init__(self,X,y):   \n        self.X=torch.tensor(X,dtype=torch.float32)\n        self.y=torch.tensor(y,dtype=torch.int32)\n    def __getitem__(self,index):\n        train_img,train_lbl=self.X[index],self.y[index]\n        return train_img,train_lbl\n    def __len__(self):\n        return self.y.shape[0]","05cc9155":"class VGG19(tnn.Module):\n    def __init__(self,num_classes):\n        super(VGG19,self).__init__()    \n        self.block1=tnn.Sequential(\n            tnn.Conv2d(in_channels=3,out_channels=64,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1), \n            tnn.ReLU(),\n            tnn.Conv2d(in_channels=64,out_channels=64,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1),\n            tnn.ReLU(),\n            tnn.MaxPool2d(kernel_size=(2,2),stride=(2,2)) )        \n        self.block2=tnn.Sequential(\n            tnn.Conv2d(in_channels=64,out_channels=128,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1),\n            tnn.ReLU(),\n            tnn.Conv2d(in_channels=128,out_channels=128,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1),\n            tnn.ReLU(),\n            tnn.MaxPool2d(kernel_size=(2,2),stride=(2,2)) )      \n        self.block3=tnn.Sequential(\n            tnn.Conv2d(in_channels=128,out_channels=256,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1),\n            tnn.ReLU(),\n            tnn.Conv2d(in_channels=256,out_channels=256,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1),\n            tnn.ReLU(),        \n            tnn.Conv2d(in_channels=256,out_channels=256,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1),\n            tnn.ReLU(),\n            tnn.Conv2d(in_channels=256,out_channels=256,\n                       kernel_size=(3,3),stride=(1,1),\n                      padding=1),\n            tnn.ReLU(),\n            tnn.MaxPool2d(kernel_size=(2,2),stride=(2,2)) )         \n        self.block4=tnn.Sequential(   \n            tnn.Conv2d(in_channels=256,out_channels=512,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1),\n            tnn.ReLU(),        \n            tnn.Conv2d(in_channels=512,out_channels=512,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1),\n            tnn.ReLU(),        \n            tnn.Conv2d(in_channels=512,out_channels=512,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1),\n            tnn.ReLU(),\n            tnn.Conv2d(in_channels=512,out_channels=512,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1),\n            tnn.ReLU(),   \n            tnn.MaxPool2d(kernel_size=(2,2),stride=(2,2)) )       \n        self.block5=tnn.Sequential(\n            tnn.Conv2d(in_channels=512,out_channels=512,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1),\n            tnn.ReLU(),            \n            tnn.Conv2d(in_channels=512,out_channels=512,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1),\n            tnn.ReLU(),            \n            tnn.Conv2d(in_channels=512,out_channels=512,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1),\n            tnn.ReLU(),\n            tnn.Conv2d(in_channels=512,out_channels=512,\n                       kernel_size=(3,3),stride=(1,1),\n                       padding=1),\n            tnn.ReLU(),   \n            tnn.MaxPool2d(kernel_size=(2,2),stride=(2,2)) )        \n        self.classifier=tnn.Sequential(\n            tnn.Linear(512,4096),\n            tnn.ReLU(True),\n            tnn.Linear(4096,4096),\n            tnn.ReLU(True),\n            tnn.Linear(4096,num_classes) )            \n        for m in self.modules():\n            if isinstance(m,torch.nn.Conv2d):\n                m.weight.detach().normal_(0,.05)\n                if m.bias is not None:\n                    m.bias.detach().zero_()\n            elif isinstance(m, torch.nn.Linear):\n                m.weight.detach().normal_(0,.05)\n                m.bias.detach().detach().zero_()      \n    def forward(self,x):\n        x=self.block1(x)\n        x=self.block2(x)\n        x=self.block3(x)\n        x=self.block4(x)\n        x=self.block5(x)\n        logits=self.classifier(x.view(-1,512))\n        probs=tnn.functional.softmax(logits,dim=1)\n        return logits,probs","50286176":"def resize_display(x_train,y_train,\n                   x_test,y_test,pixels):\n    x_train=np.array(timage.resize(x_train,[pixels,pixels]))\n    x_test=np.array(timage.resize(x_test,[pixels,pixels]))\n    N=len(y_train); shuffle_ids=np.arange(N)\n    np.random.RandomState(12).shuffle(shuffle_ids)\n    x_train,y_train=x_train[shuffle_ids],y_train[shuffle_ids]\n    N=len(y_test); shuffle_ids=np.arange(N)\n    np.random.RandomState(23).shuffle(shuffle_ids)\n    x_test,y_test=x_test[shuffle_ids],y_test[shuffle_ids]\n    x_train=x_train.reshape(-1,3,pixels,pixels)\n    x_test=x_test.reshape(-1,3,pixels,pixels)\n    n=int(len(x_test)\/2)\n    x_valid,y_valid=x_test[:n],y_test[:n]\n    x_test,y_test=x_test[n:],y_test[n:]\n    df=pd.DataFrame([[x_train.shape,x_valid.shape,x_test.shape],\n                     [x_train.dtype,x_valid.dtype,x_test.dtype],\n                     [y_train.shape,y_valid.shape,y_test.shape],\n                     [y_train.dtype,y_valid.dtype,y_test.dtype]],\n                    columns=['train','valid','test'],\n                    index=['image shape','image type',\n                           'label shape','label type'])\n    display(df)    \n    return [[x_train,x_valid,x_test],\n            [y_train,y_valid,y_test]]\ndef display_examples(data_loader,pixels):\n    for images,labels in data_loader:  \n        print('Image dimensions: %s'%str(images.shape))\n        print('Label dimensions: %s'%str(labels.shape))\n        n=np.random.randint(1,50)\n        fig=pl.figure(figsize=(11,4))\n        for i in range(n,n+5):\n            ax=fig.add_subplot(1,5,i-n+1,\\\n            xticks=[],yticks=[],title=labels[i].item())\n            ax.imshow((images[i]).reshape(pixels,pixels,3))\n        break\ndef model_acc(model,data_loader):\n    correct_preds,num_examples=0,0    \n    for features,targets in data_loader:\n        features=features.to(dev)\n        targets=targets.to(dev)\n        logits,probs=model(features)\n        _,pred_labels=torch.max(probs,1)\n        num_examples+=targets.size(0)\n        correct_preds+=(pred_labels==targets).sum()        \n    return correct_preds.float()\/num_examples*100","ab36cf11":"@register_line_magic\ndef train_run(epochs):\n    epochs=int(epochs)\n    for epoch in range(epochs):\n        model.train()\n        for batch_ids,(features,targets) in enumerate(train_loader):        \n            features=features.to(dev); targets=targets.to(dev)\n            logits,probs=model(features)\n            cost=tnn.functional.cross_entropy(logits,targets.long())\n            optimizer.zero_grad(); cost.backward()\n            optimizer.step()\n            if not batch_ids%50:\n                print ('Epoch: %03d\/%03d | Batch %03d\/%03d | Cost: %.4f' \n                       %(epoch+1,epochs,batch_ids, \n                         len(train)\/\/batch_size,cost))\n        model.eval()         \n        with torch.set_grad_enabled(False):\n            print('Epoch: %03d\/%03d train acc: %.2f%% valid acc: %.2f%%'%\\\n                  (epoch+1,epochs,\n                   model_acc(model,train_loader),\n                   model_acc(model,valid_loader)))\n@register_line_magic\ndef print_acc(n):\n    if int(n)==1:\n        data_loader=\\\n        [train_loader,valid_loader,test_loader]\n    print('Train accuracy: %.4f%%'%\\\n    (model_acc(model,data_loader[0])))\n    print('Valid accuracy: %.4f%%'%\\\n    (model_acc(model,data_loader[1])))\n    print('Test accuracy: %.4f%%'%\\\n    (model_acc(model,data_loader[2])))","fa5bd5b1":"pixels=48\nfpath='..\/input\/tf-cats-vs-dogs\/'\nf='CatDogImages.h5'\nf=h5py.File(fpath+f,'r')\nkeys=list(f.keys()); print(keys)\nx_test=np.array(f[keys[0]])\ny_test=np.array(f[keys[1]]).reshape(-1)\nx_train=np.array(f[keys[2]])\ny_train=np.array(f[keys[3]]).reshape(-1)\n[[x_train,x_valid,x_test],\n [y_train,y_valid,y_test]]=\\\nresize_display(x_train,y_train,x_test,y_test,pixels)","b80084db":"random_seed=1; batch_size=128;\ntrain=TData(x_train,y_train)\nvalid=TData(x_valid,y_valid)\ntest=TData(x_test,y_test)\ntrain_loader=tdl(dataset=train,\n                  batch_size=batch_size,shuffle=True)\nvalid_loader=tdl(dataset=valid,\n                  batch_size=batch_size,shuffle=True)\ntest_loader=tdl(dataset=test,\n                 batch_size=batch_size,shuffle=False)\ndisplay_examples(valid_loader,pixels)","dc94f173":"torch.manual_seed(random_seed)\nnum_classes=2; learning_rate=.001\nmodel=VGG19(num_classes); model.to(dev)\noptimizer=torch.optim.Adam(model.parameters(),\n                           lr=learning_rate)","d3e40050":"%train_run 5","44f5d61f":"%print_acc 1","39efdf3e":"## VGG19 Training","90fca075":"Reading classics [Deep Learning Models](https:\/\/nbviewer.jupyter.org\/github\/rasbt\/deeplearning-models\/blob\/master\/pytorch_ipynb\/cnn\/cnn-vgg19.ipynb)\n## Code Modules, Classes & Functions","f6ff2804":"## Data"}}