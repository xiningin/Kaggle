{"cell_type":{"0525885f":"code","9a215ff6":"code","7dd09ff5":"code","9048dffd":"code","86feff2f":"code","847bafe5":"code","8694265c":"code","89b6f5dc":"code","4121b1ae":"code","34362f1f":"code","fba7f651":"code","810aa905":"code","ccb777b4":"code","ce2da0d2":"code","5df427c4":"code","c7d828bc":"code","f2620026":"code","50688c07":"code","4f0fbdcb":"code","a8013fa5":"code","1a943b7e":"code","63026ceb":"code","97174a19":"code","1df9ef98":"code","07f8570f":"code","c65210e3":"code","9c8b68c6":"code","d66b92d4":"code","0e60dbf9":"code","eeebb8c6":"code","8ae9e7af":"code","c7b17685":"code","e3c1d6f7":"code","18e01018":"code","a6413ee4":"code","18613b74":"code","f15cbacf":"code","a9aadc0c":"code","16a4857d":"code","a8698e96":"code","cc1397ad":"code","9a61ba48":"code","4c98b3d6":"code","73efd545":"markdown","3284811e":"markdown","2f3eff15":"markdown","2a23ed4d":"markdown","725b9a75":"markdown","ed52b784":"markdown","05414f00":"markdown","7fbca0ad":"markdown","7729a91c":"markdown","39e4aa0a":"markdown","113ce39b":"markdown","712a3bb7":"markdown","d5808457":"markdown","2b3dba04":"markdown","5f676b8b":"markdown","e454e3b0":"markdown","89335513":"markdown","20cff8df":"markdown","86d9375d":"markdown","737ac2a5":"markdown","6c6e8adc":"markdown","80798708":"markdown","98428b58":"markdown","923e8320":"markdown","8ad2147a":"markdown","bad1f581":"markdown","bcd187f9":"markdown","39ccb367":"markdown","3c7339ad":"markdown","6fbac38d":"markdown","6c644a85":"markdown","49caafc2":"markdown","b8dedc29":"markdown","5eb3343d":"markdown","50e1fe1c":"markdown","f0df9a85":"markdown","c40f7775":"markdown","0de9b070":"markdown","aa31db3b":"markdown","4ec053aa":"markdown","0c8c0fa7":"markdown","911eb523":"markdown","588dd6ed":"markdown","5e82995c":"markdown","08f85897":"markdown","23a82509":"markdown"},"source":{"0525885f":"# Data analysis\nimport numpy as np\nimport pandas as pd\npd.set_option(\"display.precision\", 4)\nfrom math import isnan\n\n# Data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\n\n# Machine learning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_absolute_error\n\n# Peace of mind\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Define constants\nTRAIN_LEN = 891\nRNG_SEED = 343\nCOLS_TO_DROP = []\nCHILD_AGE_END = 18\nDECKS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'N']\nDEFAULT_SURVIVAL = 0.5\n\n##########################################\n########## Function definitions ##########\n##########################################\ndef get_deck_class_count(df, T_deck):\n    \"\"\"\n    get_deck_class_count reformats counts of Titanic passengers for deck, class\n    combinations into a dictionary along with providing the percentages\/\n    proportion of each class on each deck\n\n    :param df: dataframe grouped by Deck and Pclass storing the count for \n        each combination\n    :param T_deck: boolean that indicates if we are including 'T' deck or not\n    :return: two dictionaries with passenger class counts and proportions for \n        each deck\n    \"\"\" \n    # Dictionaries storing passenger counts and proportions for all deck, \n    # class combinations\n    deck_count = {'A': {}, 'B': {}, 'C': {}, 'D': {}, 'E': {}, 'F': {},\n                  'G': {}, 'N': {}, 'T': {}}\n    if not T_deck:\n        deck_count.pop('T', None)\n    deck_percent = {}\n    decks = df.transpose().columns.levels[0] # List of decks\n    \n    for deck in decks:\n        # Populate deck_count\n        for pclass in range(1, 4):\n            try:\n                count = int(df.loc[deck, pclass])\n                deck_count[deck][pclass] = count\n            except KeyError:\n                deck_count[deck][pclass] = 0\n                \n        # Populate deck_percent\n        deck_percent[deck] = [(count \/ sum(deck_count[deck].values())) \n                              * 100 for count in deck_count[deck].values()]\n        \n    return deck_count, deck_percent    \n\n\ndef get_surv_prop(deck, pclass):\n    \"\"\"\n    surv_prop provides the percentage survival for passengers given their deck\n    and pclass\n\n    :param deck: string denoting the deck of a passenger\n    :param pclass: integer denoting the pclass of a passenger\n    :return: decimal percentage of survival for similar passengers\n    \"\"\" \n    \n    return deck_class_surv_prop[deck][pclass]\n\n\ndef get_corr(df):\n    \"\"\"\n    get_corr calculates and returns a dataframe of correlations for an input\n    dataframe's features\n    \n    :param df: dataframe containing features we want correlations of\n    :return: dataframe of correlations excluding duplicate and self correlations\n    \"\"\"\n    # Calculate correlation and sort output\n    corr = df.corr().abs().unstack().sort_values(kind=\"quicksort\", \n                                                 ascending=False).reset_index()\n    \n    # Remap correlation and drop duplicate\/self correlations\n    cols_map = {\"level_0\": \"Feature 1\", \n                \"level_1\": \"Feature 2\", \n                0: 'Correlation Coefficient'}\n    \n    # Every 2nd value is the reverse of the previous\n    corr.drop(corr.iloc[1::2].index, inplace=True)\n    corr.rename(columns=cols_map, inplace=True)\n    \n    return corr.drop(corr[corr['Correlation Coefficient'] == 1.0].index)\n\n\ndef combine_df(df1, df2):\n    \"\"\"\n    combine_df combines df1 and df2 into a new dataframe assuming same columns\n    \n    :param df1: dataframe that will be at the start\/top of resultant dataframe\n    :param df2: dataframe that will be at the end\/bottom of resultant dataframe\n    :return: combined dataframe composed of df1 and df2\n    \"\"\"\n    \n    return pd.concat([df1, df2], sort=True).reset_index(drop=True)\n\n\ndef divide_df(df, first_len):\n    \"\"\"\n    divide_df divides df into two parts, splitting after first_len rows of df and\n    dropping 'Survived' column from the second dataframe\n    \n    :param df: dataframe desired to be split\n    :param first_len: integer representing the number of rows in the first dataframe\n    :return: two dataframes split from df\n    \"\"\"\n    \n    # Slicing with loc includes start AND end\n    return df.loc[:first_len - 1], df.loc[first_len:].drop(['Survived'], axis=1)\n\n\ndef drop_cols(cols):\n    \"\"\"\n    drop_cols drops col from both the train and test data sets\n    \n    :param cols: list of strings that signifies which column(s) to drop\n    :return: None, columns dropped in place\n    \"\"\"\n    for col in cols:\n        train.drop([col], inplace=True, axis=1)\n        test.drop([col], inplace=True, axis=1)\n    \n    return\n\n\ndef display_class_dist(percentages, y_label, title):\n    \"\"\"\n    display_class_dist displays the distribution of classes among the \n    decks of the Titanic\n\n    :param percentages: dictionary with passenger class proportions by deck, \n        returned by get_deck_class_count\n    :param y_label: string label for y-axis of plot\n    :param title: string title for plot\n    :return: None\n    \"\"\"\n    df_percent = pd.DataFrame(percentages).transpose()\n    deck_names = percentages.keys()\n    bar_count = np.arange(len(deck_names))\n    bar_width = 0.75\n    \n    # Plot data\n    plt.figure(figsize=(16, 8))\n    plt.bar(bar_count, df_percent[0], \n            color='red', edgecolor='black', width=bar_width, \n            label='Passenger Class 1')\n    plt.bar(bar_count, df_percent[1], bottom=df_percent[0], \n            color='lime', edgecolor='black', width=bar_width, \n            label='Passenger Class 2')\n    plt.bar(bar_count, df_percent[2], bottom=df_percent[0] + df_percent[1], \n            color='blue', edgecolor='black', width=bar_width, \n            label='Passenger Class 3')\n    \n    # Tune plot\n    plt.xlabel('Deck', size=25)\n    plt.ylabel(y_label, size=25)\n    plt.xticks(bar_count, deck_names)\n    plt.tick_params(axis='x', labelsize=15)\n    plt.tick_params(axis='y', labelsize=15)\n    plt.legend(loc='upper right', prop={'size': 15})\n    plt.title(title, size=30, y=1)   \n    plt.show()\n    \n    return\n\n\ndef group_survivors(df, group, new_feature_name):\n    \"\"\"\n    group_survivors calculates and creates a new feature denoting whether\n    passengers in their given group are known to have survived or not using\n    placeholder values in the new feature\n    \n    :param df: dataframe which has at least the same columns as the default \n        titanic dataframes\n    :param group: list of strings denoting the features to be used for grouping\n    :param new_feature_name: string of the new feature to be calculated\n    :return: updated version of df with the new feature included\n    \"\"\"\n    df[new_feature_name] = DEFAULT_SURVIVAL\n    \n    for _, group_df in df.groupby(group):\n        if len(group_df) > 1:\n            # Store whether any group members are known to have survived\/died\n            surv_max = group_df['Survived'].max()\n            surv_min = group_df['Survived'].min()\n\n            # Skip if no known survivors\/deaths in training set\n            if isnan(surv_max) and isnan(surv_min):\n                continue\n\n            # Assign non-default values to the new feature where\n            # a member is known to have survived\/died\n            for _, row in group_df.iterrows():\n                passId = row['PassengerId']\n                if (surv_max == 1.0):\n                    df.loc[df['PassengerId'] == passId, new_feature_name] = 1.0\n                elif (surv_min==0.0):\n                    df.loc[df['PassengerId'] == passId, new_feature_name] = 0.0\n                    \n    return df","9a215ff6":"# Read the data\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ncombined = combine_df(train, test)","7dd09ff5":"# Review 'Parch' distribution with 'percentiles=[.76, .77]'\n# Review 'SibSp' distribution with 'percentiles=[.68, .69]'\n# Review 'Age' and 'Fare' distribution with 'percentiles=[.9, .99]'\n# Review 'Survived' distribution with 'percentiles=[.61, .62]'\npercentiles = [.25, .50, .75]\n\n# View the data\ndisplay(combined.head())\ndisplay(combined.describe(percentiles=percentiles))\ndisplay(combined.describe(include=['O']))\ndisplay(combined.info())\n\n# Remove rows with missing target\ntrain.dropna(axis=0, subset=['Survived'], inplace=True)\n\n# Check which columns have null values and print\nprint('Number of null values by feature in combined train and test set:', \n      combined.isnull().sum()[combined.isnull().sum()>0], sep='\\n')","9048dffd":"train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","86feff2f":"adults = train[train['Age'] >= CHILD_AGE_END]\nchildren = train[train['Age'] < CHILD_AGE_END]\n\nprint('Proportion of passengers <{} who survived: {:.4f}'.format(CHILD_AGE_END, children['Survived'].mean()))\nprint('Proportion of passengers >={} who survived: {:.4f}'.format(CHILD_AGE_END, adults['Survived'].mean()))","847bafe5":"train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","8694265c":"combined[combined['Fare'].isnull()]","89b6f5dc":"# Calculate median fares by class and number of family members who are also passengers (training data)\nmed_fare = train.groupby(['Pclass', 'Parch', 'SibSp']).Fare.median()\nprint('Median fares for passengers by Pclass, Parch, and SibSp combinations:', \n      med_fare, sep='\\n')","4121b1ae":"# Filling the missing value in Fare with the median Fare of 3rd class alone passenger\ncombined['Fare'] = combined['Fare'].fillna(med_fare[3][0][0])","34362f1f":"combined[combined['Embarked'].isnull()]","fba7f651":"combined['Embarked'] = combined['Embarked'].fillna('S')","810aa905":"# Get pairwise correlations of 'Age' feature with the other numeric features\ntrain, test = divide_df(combined, TRAIN_LEN)\ncorr_train = get_corr(train)\ncorr_train[(corr_train['Feature 1'] == 'Age') | \n           (corr_train['Feature 2'] == 'Age')]","ccb777b4":"# Calculate median ages for each Pclass and sex combinations (training data)\nage_pclass_sex = train.groupby(['Pclass', 'Sex']).median()['Age']\n\n# Print data for easier viewing\nprint('Median ages for the following groups (training data):')\nfor pclass in range(1, train['Pclass'].nunique() + 1):\n    for sex in ['female', 'male']:\n        print('Pclass {} {}s: {}'.format(pclass, sex, age_pclass_sex[pclass][sex]))\nprint('All passengers: {}'.format(train['Age'].median()))","ce2da0d2":"# Filling the missing values in Age with the medians of Sex and Pclass groups\ncombined['Age'] = combined.groupby(['Pclass', 'Sex'])['Age'].apply(lambda x: x.fillna(x.median()))","5df427c4":"# Creating Deck column from the first letter of the Cabin column (N denotes a null entry)\ncombined['Deck'] = combined['Cabin'].apply(lambda s: s[0] if pd.notnull(s) else 'N')\ntrain, test = divide_df(combined, TRAIN_LEN)\n\n# Create counts for all Deck, Pclass combinations (training data)\ndeck_class_count = train.groupby(['Deck', 'Pclass']).count().rename(columns={'Name': 'Count'})\ndeck_class_count = deck_class_count[['Count']]\nprint('Passenger counts for each Deck, Pclass combination (training data) where N deck denotes null values:', \n      deck_class_count, sep='\\n')","c7d828bc":"# Calculate count and proportion of passenger 'Deck', 'Pclass' combinations\ndeck_class_count, deck_class_prop = get_deck_class_count(deck_class_count, True)\n\n# Plot Passenger class distribution by deck\ny_label = 'Passenger Class Proportion (%)'\ntitle = 'Passenger Class Distribution by Deck\\n for Titanic Final Voyage (Training Set)'\ndisplay_class_dist(deck_class_prop, y_label, title)","f2620026":"display(combined[combined['Deck'] == 'T'])\nprint('Median fare for similar passengers (first class with no family onboard): {:.2f}'\n      .format(med_fare[1][0][0]))","50688c07":"# Passenger in the T deck is changed to A\ncombined = combine_df(train, test)\ni = combined[combined['Deck'] == 'T'].index\ncombined.loc[i, 'Deck'] = 'A'\n\ndeck_class_count.pop('T', None)\ndeck_class_count['A'][1] += 1\n\n# Drop the Cabin feature\nCOLS_TO_DROP.extend(['Cabin'])","4f0fbdcb":"# Get training set correlations, focus on high correlations\ntrain, test = divide_df(combined, TRAIN_LEN)\ncorr_train = get_corr(train)\nhigh_corr_train = corr_train['Correlation Coefficient'] > 0.1\nprint('Training set correlations (coefficient > 0.1):')\ndisplay(corr_train[high_corr_train])\n\n# Get testing set correlations, focus on high correlations\ncorr_test = get_corr(test)\nhigh_corr_test = corr_test['Correlation Coefficient'] > 0.1\nprint('Testing set correlations (coefficient > 0.1):')\ndisplay(corr_test[high_corr_test])","a8013fa5":"# Create count for number of passengers survived based on 'Deck', 'Pclass' combinations\ndeck_class_surv_count = train[['Deck', 'Pclass', 'Survived']]\ndeck_class_surv_count = deck_class_surv_count.groupby(['Deck', 'Pclass']).sum()\ndeck_class_surv_count, _ = get_deck_class_count(deck_class_surv_count, False)\n\n# Create proportion of passengers survived based on 'Deck', 'Pclass' combinations\ndeck_class_surv_prop = deck_class_surv_count.copy()\nfor deck in DECKS:\n    for pclass in deck_class_count[deck].keys():\n        try:\n            deck_class_surv_prop[deck][pclass] = round((deck_class_surv_count[deck][pclass] \/ \n                                                       deck_class_count[deck][pclass]), 2)\n        except ZeroDivisionError:\n            pass\n\n# Display information\nprint('Decimal percent of passengers survived for each \\'Deck\\', \\'Pclass\\' combination (training set)\\':')\ndisplay(deck_class_surv_prop)","1a943b7e":"# Apply new feature to our data sets\ncombined = combine_df(train, test)\ncombined['DeckPclassSurvProp'] = combined.apply(lambda x: get_surv_prop(x['Deck'], x['Pclass']),axis=1)","63026ceb":"# Create new feature 'FamilySize' from 'SibSp' and 'Parch'and drop those features\ncombined['FamilySize'] = combined['SibSp'] + combined['Parch'] + 1\nCOLS_TO_DROP.extend(['SibSp', 'Parch'])\ntrain, test = divide_df(combined, TRAIN_LEN)","97174a19":"# Plot relevant data\nfig, axs = plt.subplots(figsize=(20, 20), ncols=2)\nsns.barplot(x=train['FamilySize'].value_counts().index, \n            y=train['FamilySize'].value_counts().values, ax=axs[0])\nsns.countplot(x='FamilySize', hue='Survived', data=train, ax=axs[1])\n\n# Tune plot\naxs[0].set_xlabel('Family Size')\naxs[0].set_ylabel('Count')\naxs[0].set_title('Family Size Value Counts', size=20)\naxs[1].set_xlabel('Family Size')\naxs[1].set_ylabel('Count')\naxs[1].set_title('Survived Counts by Family Size', size=20)\naxs[1].legend(['Died', 'Survived'], loc='upper right', prop={'size': 15})\nplt.subplots_adjust(top=0.4)\nplt.show()","1df9ef98":"# Create mapping of 'FamilySize' to its corresponding category and create new feature\nfamilysize_map = {1: 'Alone', 2: 'Small', 3: 'Small', 4: 'Small', 5: 'Large', \n                  6: 'Large', 7: 'Large', 8: 'Large', 11: 'Large'}\ncombined = combine_df(train, test)\ncombined['FamilySizeCat'] = combined['FamilySize'].map(familysize_map)\ntrain, test = divide_df(combined, TRAIN_LEN)\n\n# Plot relevant data\nfig, axs = plt.subplots(figsize=(20, 20), ncols=2)\nsns.barplot(x=train['FamilySizeCat'].value_counts().index, \n            y=train['FamilySizeCat'].value_counts().values, ax=axs[0])\nsns.countplot(x='FamilySizeCat', hue='Survived', data=train, ax=axs[1])\n\n# Tune plot\nxticks = ['Alone', 'Small', 'Large']\naxs[0].set_xlabel('Family Size Category')\naxs[0].set_ylabel('Count')\naxs[0].set_title('Family Size Category Value Counts', size=20)\naxs[1].set_xlabel('Family Size Category')\naxs[1].set_ylabel('Count')\naxs[1].set_title('Survived Counts by Family Size Category', size=20)\naxs[1].legend(['Died', 'Survived'], loc='upper right', prop={'size': 15})\nplt.subplots_adjust(top=0.4)\nplt.show()","07f8570f":"# Create new feature to extract passenger's title from the Name column\ncombined = combine_df(train, test)\ncombined['Title'] = combined['Name'].apply(lambda name: name.split(',')[1].split('.')[0].strip())\n\n# View the various values of these titles\nprint('Count of passenger titles aboard the Titanic:')\ncombined['Title'].value_counts()","c65210e3":"# Normalize the titles\nnormalized_titles = {\n    \"Capt\":         \"Officer\",\n    \"Col\":          \"Officer\",\n    \"Don\":          \"Royalty\",\n    \"Dona\":         \"Royalty\",\n    \"Dr\":           \"Officer\",\n    \"Jonkheer\":     \"Royalty\",\n    \"Lady\" :        \"Royalty\",\n    \"Major\":        \"Officer\",\n    \"Master\" :      \"Master\",\n    \"Miss\" :        \"Miss\",\n    \"Mlle\":         \"Miss\",\n    \"Mme\":          \"Mrs\",\n    \"Mr\" :          \"Mr\",\n    \"Mrs\" :         \"Mrs\",\n    \"Ms\":           \"Mrs\",\n    \"Rev\":          \"Officer\",\n    \"Sir\" :         \"Royalty\",\n    \"the Countess\": \"Royalty\"}\n\n# Map the current titles to the normalized titles\ncombined['Title'] = combined['Title'].map(normalized_titles)\n\n# View the new normalized values of these titles\nprint('Count of updated passenger titles aboard the Titanic:')\ncombined['Title'].value_counts()","9c8b68c6":"print('Decimal percentages for survival based on passenger title:')\ncombined[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()\\\n                               .sort_values(by='Survived', kind=\"quicksort\", ascending=False)","d66b92d4":"combined['Surname'] = combined['Name'].apply(lambda x: str.split(x, \",\")[0])","0e60dbf9":"display(combined.loc[combined['Surname'] == 'Davies'])","eeebb8c6":"combined.loc[combined['FamilySize'] == 11]","8ae9e7af":"combined = group_survivors(combined, ['Surname', 'Fare', 'FamilySize'], 'FamilySurvival')\nprint('Count of passengers with family survival data: ', \n      combined.loc[combined['FamilySurvival']!=0.5].shape[0])","c7b17685":"combined = group_survivors(combined, ['Ticket'], 'GroupSurvival')\nprint('Count of passenger with group survival data: ', \n      combined[combined['GroupSurvival']!=0.5].shape[0])","e3c1d6f7":"# Binning 'Age' feature\nAGE_CUTS = 10\ntrain, test = divide_df(combined, TRAIN_LEN)\ntrain['Age'], age_bins = pd.qcut(train['Age'], AGE_CUTS, labels=list(range(AGE_CUTS)), retbins=True)\nage_bins[0] = -1\ntest['Age'] = pd.cut(test['Age'], labels=list(range(AGE_CUTS)), bins=age_bins)\n\n# Binning 'Fare' feature\nFARE_CUTS = 10\ntrain['Fare'], fare_bins = pd.qcut(train['Fare'], FARE_CUTS, labels=list(range(FARE_CUTS)), retbins=True)\nfare_bins[0] = -1\ntest['Fare'] = pd.cut(test['Fare'], labels=list(range(FARE_CUTS)), bins=fare_bins)\n\n# Return 'Age' and 'Fare' features back to integers from category\ncombined = combine_df(train, test)\ncombined[['Age', 'Fare']] = combined[['Age', 'Fare']].astype('int32')","18e01018":"fig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='Age', hue='Survived', data=train)\n\nplt.xlabel('Age (range upper boundaries)')\nplt.ylabel('Count')\nplt.xticks(ticks=list(range(10)), labels=age_bins[1:])\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 15})\nplt.title('Survival Counts in {} Feature'.format('Age'), size=15)\nplt.show()","a6413ee4":"# Round fares to cents\nfare_bins = [round(fare, 2) for fare in fare_bins]\n\n# Plot Fare bins\nfig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='Fare', hue='Survived', data=train)\n\n# Tune plot\nplt.xlabel('Fare (range upper boundaries)')\nplt.ylabel('Count')\nplt.xticks(ticks=list(range(10)), labels=fare_bins[1:])\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 15})\nplt.title('Survival Counts in {} Feature'.format('Fare'), size=15)\nplt.show()","18613b74":"# Define the ordering of our encoding on our desired features\nord_cols = ['Deck', 'Title', 'FamilySurvival', 'GroupSurvival']\ndeck_cat = ['N', 'G', 'F', 'E', 'D', 'C', 'B', 'A']\ntitle_cat = ['Mr', 'Officer', 'Master', 'Royalty', 'Miss', 'Mrs']\nfamily_cat = group_cat = [0.0, 0.5, 1.0]\n\n# Encode features\nord_enc = OrdinalEncoder(categories=[deck_cat, title_cat, family_cat, group_cat])\ncombined[ord_cols] = ord_enc.fit_transform(combined[ord_cols])","f15cbacf":"# OneHotEncode our desired features\noh_cols = ['Embarked', 'FamilySizeCat', 'Sex']\ncombined = pd.get_dummies(data=combined, columns=oh_cols)\ntrain, test = divide_df(combined, TRAIN_LEN)","a9aadc0c":"# Simplify dataset, but keep ids for submission\npassengerid_test = test.PassengerId\nCOLS_TO_DROP.extend(['PassengerId', 'Name', 'Ticket', 'Surname'])\ndrop_cols(COLS_TO_DROP)\n\n# View data after all preprocessing\ndisplay(train.head())","16a4857d":"# Explicitly split target from features\ny = train[['Survived']].copy()\ntrain.drop(columns='Survived', inplace=True)\n\n# Break off validation set from training data, separate target from features\nX_train, X_valid, y_train, y_valid = train_test_split(train, y, train_size=0.8, random_state=RNG_SEED)\n\n# Rename for variable name consistency\nX_test = test.copy()","a8698e96":"# Keep False to use best parameters from previous run\nWANT_HYPERPARAMETERS = False\n\nif WANT_HYPERPARAMETERS:\n    # Define parameters ranges to be tested\n    params = dict(max_depth = [n for n in range(3, 9)], \n                  min_samples_split = [n for n in range(2, 4)], \n                  min_samples_leaf = [n for n in range(2, 4)],\n                  n_estimators = [20, 40, 60, 80],)\n\n    # Define the model and find best parameters\n    model = GridSearchCV(RandomForestClassifier(random_state=RNG_SEED),\n                         params, cv=5, scoring='accuracy')\n    model.fit(X_train, y_train)\n\n    print(f'Best parameters {model_random_forest.best_params_}')\n    print(f'Mean cross-validated accuracy of the best parameters: {model.best_score_:.4f}')\n    \nelse:\n    model = RandomForestClassifier(n_estimators=50, max_depth=5, \n                                   min_samples_leaf=2, min_samples_split=2, \n                                   random_state=RNG_SEED)\n    model.fit(X_train, y_train)","cc1397ad":"# Processing of validation data, get predictions\npredictions_valid = model.predict(X_valid)\n\n# Evaluate the model using validation set\nscore = mean_absolute_error(y_valid, predictions_valid)\nprint('MAE for validation set prediction:', round(score, 4))\n\n# Multiply by -1 since sklearn calculates negative MAE\nfolds = 5\nscores = -1 * cross_val_score(model, X_valid, y_valid, cv=folds, scoring='neg_mean_absolute_error')\n\nprint('Average MAE score (across experiments using {} folds):'.format(folds))\nprint(round(scores.mean(), 4))","9a61ba48":"# Sort values but keep indices\nsorted_idx = model.feature_importances_.argsort()\n\n# Plot data\nplt.figure(figsize=(15, 15))\nplt.barh(X_test.columns[sorted_idx], model.feature_importances_[sorted_idx])\nplt.xlabel('Feature Importance Coefficient')\nplt.ylabel('Feature')\nplt.title('Random Forest Classifier Feature Importances')\nplt.show()","4c98b3d6":"# Processing of test data, get predictions\npredictions_test = model.predict(X_test)\npredictions_test = predictions_test.astype(int)\n\n# Save test predictions to file\noutput = pd.DataFrame({'PassengerId': passengerid_test,\n                       'Survived': predictions_test})\noutput.to_csv('submission.csv', index=False)","73efd545":"**Filling Embarked Null Values:**\n\nThe only null values for *Embarked* are from two first class women who have the same ticket number.  From this, we will proceed assuming that they boarded the ship from the same port (one of C = Cherbourg, Q = Queenstown, or S = Southampton).","3284811e":"**Create Title Feature:**\n\nThe *Name* feature appears to have titles ('Mr', 'Mrs', 'Master', etc.) for all passengers aboard.  We will take this part from *Name* and make it its own feature.","2f3eff15":"**Encode Features:**\n\nNow we encode our desired features.  We will begin using ordinal encoding for the *Deck* and *Title* features.","2a23ed4d":"We can see that title provides us with useful information as the likelihood of survival is drastically different between titles.  As a result, we will later use ordinal encoding to encapsulate the inherent hierarchy in likelihood of survival.","725b9a75":"We will move them to 'A' deck, the closest physically to the boat deck which conveniently only has other first class passengers.  This will ideally lead to better predictions as we only have a samply size of one for 'T' deck.  We no longer need the *Cabin* feature either now that we have extracted the data we could from it.","ed52b784":"We can see below that the median fare increases not only as the class of the ticket increases, but also as the number of family members travelling with the individual increases (there are exceptions, but the trend is there).","05414f00":"There is not as large of a disparity in this case, but it is still significant.  Finally we take a look at the survival rates by passenger class.","7fbca0ad":"**Create FamilySurvival Feature:**\n\nDue to the issue with the *Surname* feature mentioned above, we will need to minimize the issue of grouping together passengers who are not travelling together.  This will be done by grouping passengers together based on *Surname*, *FamilySize*, and *Ticket*.  *Ticket* is included due to the observation that the *Ticket* is shared across all passengers travelling together.  We can see below from the largest family travelling on the Titanic.","7729a91c":"**Investigate Assumptions:**\n\nIt is worth noting some assumptions based on the information we have.  We know that women and children had priority when evacuating.  Consequently, we expect women to be overrepresented in *Survived*.  We also know that class always comes into play when resources are limited (especially since first class accomodations were closest to lifeboats).  By the same logic, we expect passengers in class 1 will be more likely to survive than their class 2 and 3 counterparts.  We will test these assumptions noting that we have not yet filled in all *Age* values, so our results will not be completely accurate.","39e4aa0a":"Then we define our model and use the best parameters we are able to find using *GricSearchCV* on our training data.  Change *WANT_HYPERPARAMETERS = TRUE* if the calculation is desired.  *WANT_HYPERPARAMETERS = False* will give best parameters from previous runs for the sake of time.","113ce39b":"**Filling Fare Null Values:**\n\nThere is only one null value for *Fare*.  *Pclass* is certainly relevant for *Fare*.  It seems like having no family members travelling with them would also affect *Fare* (*Parch* = 0 and *SibSp* = 0).  Knowing this, we can fill in the median value of similar passengers.","712a3bb7":"We can see a much clearer trend for *Fare* than we could for *Age*.  The survival rate consistently trends upwards as *Fare* increases (with the exception of the outlier $[27.00, 39.69)$ range).  \n\nThe number of bins for discretization of *Age* and *Fare* is not too large as the bins are able to uniquely capture the various behaviour of how these features affect *Survived*.","d5808457":"Next, we use one hot encoding on our remaining categorical variables.","2b3dba04":"**Feature Importance:**\n\nNow that the model is trained and cross-validated, we check to see the feature importances.","5f676b8b":"**Titanic Competition Introduction:**\n\nOur problem is to predict which passengers survived the Titanic's maiden voyage given the following information about them:\n\n- *Age* in years old\n- *Sex* $\\in$ {female, male}\n- *SibSp* representing the number of siblings and spouses travelling with the passenger\n- *Parch* representing the number of parents and children travelling with the passenger\n- *Pclass* representing the passenger's ticket class $\\in$ {1st class, 2nd class, 3rd class}\n- *Ticket* number\n- *Cabin* number\n- *Fare* paid for ticket\n- *Embarked* representing the port where the passenger embarked $\\in$ {C = Cherbourg, Q = Queenstown, S = Southampton}\n- *Survived* $\\in$ {0 = died, 1 = survived} for the training set, target for test \n\nThis represents a binary classification problem as the passengers either survived, or they did not.","e454e3b0":"**Create Surname Feature:**\n\nAnother feature we can create is a *Surname* feature from the *Name* feature.  This may be useful as it seems likely that if one family member survived, others or perhaps all of the family would have survived.","89335513":"**Remove Unnecessary Features:**\n\nFinally, we can remove any features that have become redundant, or simply not helpful for our purposes.","20cff8df":"Seeing this trend, we can now confidently fill our null values using our proposed method.  We ensure that the calculation of parameters is done exclusively using the training set to avoid leakage.","86d9375d":"**Discretize Continuous Features:**\n\nNow we can discretize our continuous features (*Age*, *Fare*) by placing the data into bins where each bin has an equal ($\\pm 1$) number of passengers.  This provides a better signal-to-noise ratio so long as the bins are not too large.  This binning also serves to encode our *Age* and *Fare* features as the *labels* parameter to *qcut* is provided.","737ac2a5":"**Understand the Dataset:**\n\nTo begin, we load in the data and then familiarize ourselves with the coarse grain aspects like datatypes, null values, etc.\n\nNumerical:\n\n- Training set has 891 samples\n- Testing set has 418 samples\n- Both *Age* and *Fare* features have distributions biased towards lower values with <1% high outliers\n- 76% of passengers did not travel with parents or children\n- 30% of the passengers had siblings and\/or spouse aboard\n- 38% of passengers survived in the training set compared to the actual survival rate of 32%\n\nThese can be seen by modifying *percentiles* in the following cell.\n\nCategorical:\n\n- 77% of *Cabin* values are missing, and of the ones that exist, 37% are duplicates\n- There are 3 places to embark from, with 70% embarking from S=Southampton\n- All but two values for *Name* are unique\n- Male and Female options for *Sex*, with 64% of passengers being male\n- 29% of *Ticket* values are duplicates and there is at least one ticket that shows up 11 times","6c6e8adc":"The 'T' deck shown above is the boat deck (top deck) and only has 1 passenger.  For reference, decks 'A' through 'G' start just below the boat deck and run down towards the bottom of the ship.","80798708":"Now that they are organized succinctly, we check to see the survival rates by title.","98428b58":"**Create FamilySize Feature:**\n\nThe features *SibSp* and *Parch* are highly correlated and do not seem to independently provide valuable information.  As a result, we can improve our model by combining these two features into a new *FamilySize* feature which denotes the number of family members the passenger is travelling with, as well as themself.","923e8320":"**Submission:**\n\nFinally, we calculate and submit our final predictions.","8ad2147a":"Since the story of the Titanic and its sinking is so well researched, just Googling their names reveal the true value of our missing values.  [Encylopedia Titanica](https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/martha-evelyn-stone.html) tells us that\n\n> Mrs Stone boarded the Titanic in Southampton on 10 April 1912 and was travelling in first class with her maid Amelie Icard. She occupied cabin B-28.\n\nWith this, we fill in the Embarked missing values with S.","bad1f581":"We can see above that there is a very significant disparity in survival rates between men and women.  Next we can check survival rate differences between adults and children.","bcd187f9":"**Creating DeckClassSurvProp feature:**\n\nWhen investigating our initial assumptions, we saw that the survival rates for the various classes were quite disparate.  Later, when filling the null values for the *Cabin* feature, we saw that the various decks seemed to be organized in a way as to segregate the passenger classes.  These factors suggest that we may extract some predictive value from taking a closer look at the deck and class combinations, and their survival rates.","39ccb367":"However, it is important to take *Surname* feature with a grain of salt as different families travelling onboard can have the same *Surname*.  We can see that with the 'Davies' *Surname*.  There appears to be some strange data for these individuals that is incompatible.  Namely the *Parch*, *SibSp*, and *Ticket* values.  ","3c7339ad":"**Create GroupSurvival Feature:**\n\nSimilar to the reasoning above for the *FamilySurvival* feature, we will create a new feature *GroupSurvival* simply based on having the same *Ticket*.  There will be overlap between the two features, but there is still some usefulness to be extracted.  Passengers who are family would be likely to stick together and as a result, likely survive or perish together.  The sentiment can be extended to passengers who are travelling together but are not family (ie. friends, nannies, etc.).  These individuals may not be in the same cabin as would be true for families, so sticking together would not be as easy during the chaos of the sinking ship.","6fbac38d":"Now that the model is initialized and trained with the best parameters we could find, we use cross validation on different validation sets to get an accurate view of the model's performance on our training set.","6c644a85":"We see that survival rates are quite different between the various age bins with only the $[0, 16)$ and $[34, 40)$ age groups with a survival rate $>50\\%$.  The same plot as above for *Age* is now provided for *Fare*.  Keep in mind again that the x-axis labels are the upper boundary for the age range bin ($[0, 7.55)$, $[7.55, 7.85)$, etc.).","49caafc2":"Given this fact, we will use it to group together families aboard the Titanic.  Note that the value for *DEFAULT_SURVIVAL* of 0.5 is just a placeholder and will be replaced during encoding.  The value is just to differentiate between families with known survivors and known deaths.  The idea here is that passengers in families with known survivors are more likely to survive.  Contrarily, passengers in families with known deaths are less likely to survive.","b8dedc29":"The previous cell's output provides some useful insight into how the decks are laid out.  However, since the number of cabins per deck is not constant, a proportion is more illustrative.  The following cell calculates the proportion of each passanger class by deck (training data) and then plots it.","5eb3343d":"Again, we see that there is a significant difference in survival rates based on this feature.  Our assumptions were well-founded.  We will proceed with these results in mind as we process the data and make predictions.","50e1fe1c":"Comparing the training set and the combined set, we find that there are no *Deck*, *Pclass* combinations in the combined set that aren't already represented in the training set.  With that in mind, we can now safely apply these values as a new feature for both the train and test sets.  This feature is called *DeckClassSurvProp* and represents the proportion of passengers, with the same *Deck* and *Pclass* combination as the given passenger, who survived (only using data from training set to avoid leakage).","f0df9a85":"**Feature Correlations:**\n\nNow that we have concluded dealing with the null values, we can investigate the correlations between our features to look for further insights into the dataset.  These insights will guide us in engineering other features as well as illuminate any possibly redundant features.","c40f7775":"**Filling Age Null Values:**\n\nWe first check to see if *Age* is correlated with other numeric features.   If it is correlated with other features, we can fill in our missing values more appropriately than a simple global average.","0de9b070":"We will now take this information and use it to fill the null values for *Age* using the median of their class and sex combinations (possible since no null values for either *Pclass* or *Sex*).","aa31db3b":"Now we plot counts of *FamilySize* as well as checking the *Survived* distribution for each *FamilySize*.","4ec053aa":"**Create Model:**\n\nNow that we are finished with preprocessing the data, we can begin to initialize our model.  We begin by defining our training, validation, and testing features\/targets.","0c8c0fa7":"We see that *Age* is correlated with *Pclass*.  *Sex* together with *Pclass* provides yet better predictions seen by the varied medians below.  We see two distinct trends, women having a lower median age than men for a given class, as well as median age increasing as class increases (class 1 is 'higher' than class 3 ie. more expensive).  As a result, it is necessary to take these relations into account when filling null values.","911eb523":"**Create FamilySizeCat Feature:**\n\nWe can see in the 'Survived Counts by Family Size' plot that there seems to be significant trends in survival based on *FamilySize*.  Those who are alone have comparably low chances of survival compared to small families of 2-4.  For families of size >=5, we see that people are again less likely to survive than die.  As a result, we will group the values of *FamilySize* together into the following categories and create a new feature called *FamilySizeCat*.\n\n- 1: Alone\n- 2-4: Small\n- 5-11: Large","588dd6ed":"Thank you to [Gunes Etivan's Titanic - Advanced Feature Engineering Tutorial](http:\/\/https:\/\/www.kaggle.com\/gunesevitan\/titanic-advanced-feature-engineering-tutorial\/notebook) and [Manav Sehgal's Titanic Data Science Solutions](http:\/\/https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions\/notebook) for their helpful ideas and overall contribution to this competition.","5e82995c":"**Create Deck Feature:**\n\n*Cabin* is the feature with the most null values, a total of 879\/1130 between the train and test sets.  This is too large of a proportion to impute, and the data would likely not be very valuable even if we did.  Instead, we will create a new feature, *Deck*, using the first letter of the *Cabin* values which indicates the deck where the cabin is.  We will denote all of the null values for *Cabin* with 'N' for *Deck*.","08f85897":"Now we look at our binned groups for *Age*.  Keep in mind that the x-axis labels are the top end of the age range, so the count includes all values from the previous bar label to the current one ($[0, 16)$, $[16, 20)$, etc.).","23a82509":"We can see that almost all the titles have too small of a sample size for the model to extract information from.  We will use the strategy that Peter Begle used in an article on [Medium](https:\/\/medium.com\/i-like-big-data-and-i-cannot-lie\/how-i-scored-in-the-top-9-of-kaggles-titanic-machine-learning-challenge-243b5f45c8e9) to normalize these titles and give our model something to work with."}}