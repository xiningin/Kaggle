{"cell_type":{"29d6964c":"code","5ed08f2e":"code","9506ceed":"code","500f0e18":"code","8b814d0a":"code","07d9f1f2":"code","4096c829":"code","8f61e31b":"code","7d4d7899":"code","b828669c":"code","b24e2614":"code","85b4854e":"code","dc1229dd":"code","fcae6c4d":"code","2a6c6b15":"code","97413fd3":"code","1329d335":"code","f90ca2bb":"code","aad16406":"code","30aafbff":"code","f08549c8":"code","3223f138":"code","d5b9284b":"code","fdf4e468":"code","755d9b7c":"code","bd28296d":"code","131b1bb3":"code","cc00f105":"code","be40591e":"markdown","03aa0b39":"markdown"},"source":{"29d6964c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5ed08f2e":"car_data = pd.read_csv('..\/input\/vehicle-dataset-from-cardekho\/car data.csv')","9506ceed":"car_data.head()","500f0e18":"!pip install pandas-profiling","8b814d0a":"from pandas_profiling import profile_report","07d9f1f2":"car_data.profile_report()","4096c829":"car_data.head()","8f61e31b":"print(car_data['Seller_Type'].unique())\nprint(car_data['Fuel_Type'].unique())\nprint(car_data['Transmission'].unique())\n#print(car_data['Car_Name'].unique())","7d4d7899":"car_data.columns","b828669c":"new_car_data = car_data[['Year', 'Selling_Price', 'Present_Price', 'Kms_Driven',\n       'Fuel_Type', 'Seller_Type', 'Transmission', 'Owner']]\nnew_car_data.head()","b24e2614":"new_car_data['num_of_year'] = 2021 - new_car_data['Year']\nnew_car_data.drop(['Year'], axis = 1, inplace= True)\n","85b4854e":"new_car_data.head()","dc1229dd":"new_car_data = pd.get_dummies(new_car_data,drop_first = True)","fcae6c4d":"new_car_data.corr()","2a6c6b15":"X = new_car_data.iloc[:,1:]\ny = new_car_data.iloc[:,0]\n","97413fd3":"from sklearn.ensemble import ExtraTreesRegressor","1329d335":"model = ExtraTreesRegressor()\nmodel.fit(X,y)","f90ca2bb":"import matplotlib.pyplot as plt\nprint(model.feature_importances_)\nfeature_imp = pd.Series(model.feature_importances_)\nfeature_imp.nlargest(8).plot(kind = 'bar')\nplt.show()","aad16406":"from sklearn.model_selection import train_test_split\nX_train,X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2)\nX_train.shape","30aafbff":"## hyperparameters tuning\n\nn_estimators = [int(n) for n in np.linspace(start = 100,stop = 1200, num = 12)]\nmax_features= ['auto','sqrt']\nmax_depth = [int(n) for n in np.linspace(start = 5, stop = 40, num = 2)]\nmin_sample_split=[2,5,10,15,100]\nmin_sample_leaf = [1,2,5,10]\nprint(n_estimators)","f08549c8":"from sklearn.model_selection import RandomizedSearchCV\nrandom = {\n    'n_estimators': n_estimators,\n    'max_features': max_features,\n    'max_depth': max_depth,\n    'min_samples_split': min_sample_split,\n    'min_samples_leaf': min_sample_leaf\n}\nprint(random)","3223f138":"from sklearn.ensemble import RandomForestRegressor\nmodel_price = RandomForestRegressor() #n_estimators is decision tree","d5b9284b":"random_model = RandomizedSearchCV(estimator = model_price , param_distributions = random, scoring ='neg_mean_squared_error', n_iter = 10, cv= 5)","fdf4e468":"random_model.fit(X_train,y_train)","755d9b7c":"predictions = random_model.predict(X_test)","bd28296d":"plt.scatter(predictions, y_test)","131b1bb3":"from sklearn import metrics\nprint(metrics.mean_absolute_error(predictions, y_test))","cc00f105":"import pickle\nfile = open('random_forest.pkl','wb')\npickle.dump(random_model,file)","be40591e":"* **add new feature**\n* get number of year = current year - year","03aa0b39":"* **One hot encode the category variables**\n* pd.get_dummies()"}}