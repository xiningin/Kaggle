{"cell_type":{"b373fb64":"code","38f97cdf":"code","0187f95d":"code","23fdae93":"code","b9f7c1b1":"code","e0804766":"code","ff3c89f6":"code","e0dd135f":"code","faea2afe":"code","8874127a":"code","ad91cc05":"code","61a57ad1":"code","a7719741":"markdown","4b2d04d2":"markdown","d4f0d917":"markdown","45d79d38":"markdown","3cecf776":"markdown","bc135866":"markdown","40621a55":"markdown","80a3df4d":"markdown"},"source":{"b373fb64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","38f97cdf":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom xgboost import XGBClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')","0187f95d":"dataset = pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/test.csv')\nsubmission_data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/sample_submission.csv')","23fdae93":"#dataset.isna().sum()\n#test_data.isna().sum()","b9f7c1b1":"X = dataset.iloc[:, 1:-1].values\ny = dataset.iloc[:, -1].values\n\ntest_data = test_data.iloc[:,1:].values","e0804766":"le = LabelEncoder()\ny = le.fit_transform(y)","ff3c89f6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","e0dd135f":"xgbc = XGBClassifier(random_state = 0, eval_metric = 'mlogloss', max_depth = 3)\nxgbc.fit(X_train, y_train)","faea2afe":"y_pred = xgbc.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","8874127a":"pred_prob = xgbc.predict_proba(test_data)\nprint(np.round(pred_prob,2))\npred_prob = np.round(pred_prob,2)","ad91cc05":"submission_data.iloc[:,1:] = pred_prob\npd.DataFrame(submission_data).head(5)","61a57ad1":"submission_data.to_csv('submission_xgbc.csv', index = False)","a7719741":"## Data Preprocessing","4b2d04d2":"## Train using XGBoost","d4f0d917":"## Confusion Matrix","45d79d38":"## Importing the dataset","3cecf776":"## Splitting the Training dataset","bc135866":"## Submission","40621a55":"## Importing the libraries","80a3df4d":"## Prediction of Test Data"}}