{"cell_type":{"3796536e":"code","8ecd0d06":"code","a415437c":"code","67760539":"code","c0930468":"code","f7a79dba":"code","e656ec9b":"code","1d760a88":"code","e9242b57":"code","15bb8ff4":"code","b53a3668":"code","e3029cb0":"code","82afb29b":"code","240843ac":"code","e0003ea2":"code","8557f818":"code","891c5c74":"markdown","afa9c16f":"markdown","f94228c1":"markdown","1629884d":"markdown"},"source":{"3796536e":"# importing necessary modules\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score\nfrom nltk.corpus import stopwords","8ecd0d06":"# this is the data we will use to fit the models\n\nfeed_review = [\"Bad. Not recommended\", \"Not bad. Recommended.\"]\nfeed_sentiment = [\"negetive\", \"positive\"]","a415437c":"# this is the data which the model will predict upon\n\npredict_review = [\"Yeah, its not bad. Definitely recommended\",\n                  \"The movie is really bad. I would not recommend it.\"]\n                \npredict_sentiment = [\"positive\", \"negetive\"]","67760539":"# storing NLTK's stopwords list\n\nsw = stopwords.words(\"english\")","c0930468":"# pre-processing the data\n\ntfidf_1 = TfidfVectorizer(stop_words = sw)\nlenc = LabelEncoder()\n\nX_1 = tfidf_1.fit_transform(feed_review)\ny_1 = lenc.fit_transform(feed_sentiment)","f7a79dba":"# fitting the data into model\n\nmodel_1 = MultinomialNB()\nmodel_1.fit(X_1, y_1)","e656ec9b":"# list of features fit into the model\n\nprint(\"The features of Tfidf Vectorizer with stopwords without ngrams are:\")\ntfidf_1.get_feature_names()","1d760a88":"# predicting data and evaluating the model\n\npredict_X_1 = tfidf_1.transform(predict_review)\npredict_y_1 = lenc.transform(predict_sentiment)\n\npredicted_y_1 = model_1.predict(predict_X_1)\n\nprint(\"The actual sentiments are:\", predict_y_1)\nprint(\"The predicted sentiments are:\", predicted_y_1)\n\nprint(\"The model accuracy is:\", accuracy_score(predict_y_1, predicted_y_1)*100, \"%\")","e9242b57":"# pre-processing the data\n\ntfidf_2 = TfidfVectorizer()\nlenc = LabelEncoder()\n\nX_2 = tfidf_2.fit_transform(feed_review)\ny_2 = lenc.fit_transform(feed_sentiment)","15bb8ff4":"# fitting the data into model\n\nmodel_2 = MultinomialNB()\nmodel_2.fit(X_2, y_2)","b53a3668":"# list of features fit into the model\n\nprint(\"The features of Tfidf Vectorizer with stopwords without ngrams are:\")\ntfidf_2.get_feature_names()","e3029cb0":"# predicting data and evaluating the model\n\npredict_X_2 = tfidf_2.transform(predict_review)\npredict_y_2 = lenc.transform(predict_sentiment)\n\npredicted_y_2 = model_2.predict(predict_X_2)\n\nprint(\"The actual sentiments are:\", predict_y_2)\nprint(\"The predicted sentiments are:\", predicted_y_2)\n\nprint(\"The model accuracy is:\", accuracy_score(predict_y_2, predicted_y_2)*100, \"%\")","82afb29b":"# pre-processing the data\n\ntfidf_3 = TfidfVectorizer(ngram_range = (1, 2))\nlenc = LabelEncoder()\n\nX_3 = tfidf_3.fit_transform(feed_review)\ny_3 = lenc.fit_transform(feed_sentiment)","240843ac":"# fitting the data into model\n\nmodel_3 = MultinomialNB()\nmodel_3.fit(X_3, y_3)","e0003ea2":"# list of features fit into the model\n\nprint(\"The features of Tfidf Vectorizer with stopwords without ngrams are:\")\ntfidf_3.get_feature_names()","8557f818":"# predicting data and evaluating the model\n\npredict_X_3 = tfidf_3.transform(predict_review)\npredict_y_3 = lenc.transform(predict_sentiment)\n\npredicted_y_3 = model_3.predict(predict_X_3)\n\nprint(\"The actual sentiments are:\", predict_y_3)\nprint(\"The predicted sentiments are:\", predicted_y_3)\n\nprint(\"The model accuracy is:\", accuracy_score(predict_y_3, predicted_y_3)*100, \"%\")","891c5c74":"# 3. without stopwords, with ngrams","afa9c16f":"# 1.    with stopwords, without ngrams","f94228c1":"#### This notebook compares different CountVectorizer techniques used in Natural Language Processing. \n#### We will look into the following three types for now:\n 1. #### with stopwords, without ngrams\n 2. #### without stopwords, without ngrams\n 3. #### without stopwords, with ngrams","1629884d":"# 2. without stopwords, without ngrams"}}