{"cell_type":{"46d8f6e1":"code","96e998d3":"code","61ef5bc1":"code","4bf7df29":"code","28dc7aa9":"code","a320d76a":"code","70b94fd2":"code","9b9d5445":"code","9ec6d24d":"code","bef33eca":"markdown","ba82a052":"markdown","5c1636d7":"markdown","cd602054":"markdown","57ef6066":"markdown"},"source":{"46d8f6e1":"import os\nimport numpy as np\nimport pandas as pd\nimport pydicom\nimport matplotlib.pyplot as plt","96e998d3":"# Get a list of images in a series\ndef get_series_list(directory, study, series):\n    series_list = []\n    for subdirs, dirs, files in os.walk(directory + '\/' + study + \"\/\" + series):\n        series_list = os.listdir(directory + '\/' + study + '\/' + series) \n    return series_list","61ef5bc1":"# Convert the Image Orientation Patient tag cosine values into a text string of the plane.\n# This represents the plane the image is 'closest to' .. it does not explain any obliqueness\ndef get_image_plane(loc):\n\n    row_x = round(loc[0])\n    row_y = round(loc[1])\n    row_z = round(loc[2])\n    col_x = round(loc[3])\n    col_y = round(loc[4])\n    col_z = round(loc[5])\n    if (row_x, row_y, col_x, col_y) == (1,0,0,0):\n        return \"Coronal\"\n    if (row_x, row_y, col_x, col_y) == (0,1,0,0):\n        return \"Sagittal\"\n    if (row_x, row_y, col_x, col_y) == (1,0,0,1):\n        return \"Axial\"\n    return \"Unknown\"","4bf7df29":"directory = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train'\nstudy = '00017'\nseries = 'T1wCE'\nfiles = []\n\n# Get a list of images for this study\/series\nseries_list = get_series_list(directory, study, series)\n\nif len(series_list) > 0:\n    for f in series_list:\n        \n        # Read the image and get it's orientation and position tags\n        image = pydicom.dcmread(f'{directory}\/{study}\/{series}\/{f}')\n        plane = get_image_plane(image[0x0020,0x0037])\n        \n        # Make a list\n        files.append([f, plane, float(image[0x0020,0x0032].value[0]), float(image[0x0020,0x0032].value[1]), float(image[0x0020,0x0032].value[2])])","28dc7aa9":"# Convert the list of files and position coords to a dataframe\ndf = pd.DataFrame(data=files, columns=('image','plane','iop_x','iop_y','iop_z'))\ndf.head(10)","a320d76a":"# Sort the dataframe on the iop_z column\ndf = df.sort_values(by=['iop_z'])\ndf.head(10)","70b94fd2":"study = '00148'\nseries = 'T1wCE'\nfiles = []\n\n# Get a list of images for this study\/series\nseries_list = get_series_list(directory, study, series)\n\nif len(series_list) > 0:\n    for f in series_list:\n        \n        # Read the image and get it's orientation and position tags\n        image = pydicom.dcmread(f'{directory}\/{study}\/{series}\/{f}')\n        plane = get_image_plane(image[0x0020,0x0037])\n        \n        # Make a list\n        files.append([f, plane, float(image[0x0020,0x0032].value[0]), float(image[0x0020,0x0032].value[1]), float(image[0x0020,0x0032].value[2])])","9b9d5445":"# Convert the list of files and position coords to a dataframe\ndf = pd.DataFrame(data=files, columns=('image','plane','iop_x','iop_y','iop_z'))\ndf.head(10)","9ec6d24d":"# Sort the dataframe on the iop_x column\ndf = df.sort_values(by=['iop_x'])\ndf\n","bef33eca":"### And now we can see the images are ordered from Right->Left, with the highest filename being the image on the patient's extreme right.\n- This technique can be used to arrange DICOM series into the proper order and to determine the scan direction.\n\n#### Some of my other MR notebooks\n- Tumor Object Detection -> https:\/\/www.kaggle.com\/davidbroberts\/brain-tumor-object-detection\n- Determining MR Slice Orientation -> https:\/\/www.kaggle.com\/davidbroberts\/determining-mr-slice-orientation\n- Determining MR image planes -> https:\/\/www.kaggle.com\/davidbroberts\/determining-mr-image-planes\n- Reference Lines on MR images -> https:\/\/www.kaggle.com\/davidbroberts\/mr-reference-lines\n- Manual VOI LUT on MR images -> https:\/\/www.kaggle.com\/davidbroberts\/manual-voi-lut-on-mr-images\n- Export DICOM Images by Plane -> https:\/\/www.kaggle.com\/davidbroberts\/export-dicom-series-by-plane\/","ba82a052":"### In this case, it's not easy to determine which position we're interested in because *all* the positions seem to change ..\n- This is because these images are not truely orthogonal. They are obliqued slightly to accomodate the patient's rotation.\n- In any case, we know these are sagittal slices, so we are interested in the X coordinate. We'll sort on it.","5c1636d7":"<div class='alert alert-info' style='text-align:center'><h1>Determining DICOM Image Order<\/h1>\n- yet another MR processing notebook -<\/div>\n\n#### We'll use the DICOM tag ImagePositionPatient to accurately determine the slice order of an MR series.\n\n#### The I.P.P. tag gives us three values (X, Y and Z) that determine a slice's position along the three axis of the patient coordinate space as related to a fixed center point.\n\nThe patient coordinate space (or Reference Coordinate System in DICOM-speak) is defined as:\n\n- X - right to left (Right -> Left)\n- Y - front to back (Anterior -> Posterior)\n- Z - bottom to top (Feet -> Head)\n\n- In most cases, the InstanceNumber and SlicePosition tags can be used to determine location. But, since they're not completely required and the studies could have been post-processed .. we cannot depend on them.","cd602054":"#### Now, we have an unordered list of images and their X, Y and Z positions.\n- Notice the X and Y positions aren't changing at all in this series. That's because these slices are perfectly orthogonal to the patient's body coordinate system.\n- But, since the plane is axial, we want to sort on the Z coord (Feet->Head)","57ef6066":"### Now our dataframe is in the proper order.\n- In this example, the filenames match the image order .. as most will. However, it's not safe to assume it will always be the case.\n- Let's try another study."}}