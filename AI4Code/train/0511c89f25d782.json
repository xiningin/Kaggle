{"cell_type":{"075d44c0":"code","82b3b1d4":"code","0fc1b04d":"code","06a69df3":"code","5c18d491":"code","d37e9f69":"code","61dc38a9":"code","c77e8928":"code","d4e23ca6":"code","ab312f8b":"code","307d6877":"code","f76a9c37":"code","58773f62":"code","157ce0d3":"code","51f481fe":"code","99a5a9c9":"code","ff8cf426":"code","4a91e99e":"code","d2d9298e":"code","9babfdd8":"code","c6aa4c20":"code","558ca1b3":"code","1b37fbe3":"code","e837640d":"code","a511b59b":"code","0005e68c":"code","b3eb2ffb":"code","be71172f":"code","bd432557":"code","600b3ad1":"code","12425861":"code","41503e11":"code","ea3806c6":"code","6aaf00e0":"code","d6497cf0":"code","bae0b42b":"code","591d33d9":"code","b9a88ce8":"code","cd0ab771":"code","e2d18999":"code","a477e724":"code","2846a1ab":"code","0b1f5018":"code","c3ebf73e":"code","3e7fdf0a":"code","ffe3e519":"code","25d6004a":"code","14028f04":"code","8360c5d4":"code","9155250b":"code","b324cbaf":"markdown","e5cee61c":"markdown","5e8065ee":"markdown","e07574e1":"markdown","b500bf00":"markdown","99274374":"markdown","14b164c4":"markdown","86f704dd":"markdown","ec722254":"markdown","ac8f1907":"markdown","b8465d5e":"markdown","0c5e69fb":"markdown","823dcece":"markdown","3096b79f":"markdown","aabe69dd":"markdown","4aed251a":"markdown","31aeddf6":"markdown","c6209ae0":"markdown","c3ea9515":"markdown","3da9d054":"markdown","e78b266e":"markdown","43415c88":"markdown","da6c5c53":"markdown","ea8f65e7":"markdown","30446ce0":"markdown","312ed0d8":"markdown","d28c29f6":"markdown","71aa7eda":"markdown","578285e3":"markdown","f18a2403":"markdown","4ce98d46":"markdown","d0b22dfb":"markdown","85b1eab6":"markdown","d12d6d0e":"markdown","90a3114c":"markdown","7196df02":"markdown","988da556":"markdown","e68be2c1":"markdown","a13af095":"markdown","d84a25b4":"markdown","da5821ae":"markdown","61b7e01b":"markdown","d2c554e2":"markdown","ca840c80":"markdown","fdb45ef0":"markdown","8a0f80f8":"markdown","c1d2f0ae":"markdown","162fc078":"markdown","84684f1b":"markdown","96b644c7":"markdown"},"source":{"075d44c0":"#import some necessary librairies\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\nimport matplotlib.pyplot as plt  # Matlab-style plotting\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\n\nplt.style.use('ggplot')\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting floats output to 3 decimal points\n\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\")) #check the files available in the directory","82b3b1d4":"#Now let's import and put the train and test datasets in  pandas dataframe\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n","0fc1b04d":"##display the first five rows of the train dataset.\ntrain.head(5)","06a69df3":"##display the first five rows of the test dataset.\ntest.head(5)\n","5c18d491":"#check the numbers of samples and features\nprint(\"The train data size before dropping Id feature is : {} \".format(train.shape))\nprint(\"The test data size before dropping Id feature is : {} \".format(test.shape))\n\n#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n#Now drop the  'Id' colum since it's unnecessary for  the prediction process.\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)\n\n#check again the data size after dropping the 'Id' variable\nprint(\"\\nThe train data size after dropping Id feature is : {} \".format(train.shape)) \nprint(\"The test data size after dropping Id feature is : {} \".format(test.shape))","d37e9f69":"areas = ['GrLivArea', 'GarageArea', 'TotalBsmtSF']\n\nfor columns in areas:\n  plt.figure()\n  sns.lmplot(y = 'SalePrice', x = columns, data = train);","61dc38a9":"#Deleting outliers\ntrain = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\n\n#Check the graphic again\nsns.lmplot(x = 'GrLivArea', y = 'SalePrice',data = train)\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()\n","c77e8928":"plt.figure(figsize=(10,6))\n\nsns.boxplot(x = 'OverallQual', y= 'SalePrice',data = train)\nplt.show()","d4e23ca6":"plt.figure(figsize=(10,6))\nsns.boxplot(x = 'OverallCond', y = 'SalePrice', data = train)\nplt.show();","ab312f8b":"plt.figure(figsize=(21,12))\n\nax = sns.boxplot(x = 'YearBuilt', y = 'SalePrice', data = train)\n# ax.set_xticklabels(ax.get_xticklabels(), rotation = 90, ha = 'right', fondsize = 12)\nplt.xticks(rotation =90)\nplt.tight_layout()\nplt.show()","307d6877":"corr = train.corr()\n\nplt.figure(figsize=(10,10))\nk = 10 #number of variables for heatmap\ncols = corr.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True,yticklabels=cols.values, xticklabels=cols.values)","f76a9c37":"sns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","58773f62":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#Check the new distribution \nsns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()\n","157ce0d3":"ntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.SalePrice.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","51f481fe":"NA_values = all_data.isna().sum().sort_values(ascending=False)[:34]\n\nNA = pd.concat([NA_values,(NA_values\/len(all_data)*100)],axis=1)\n\nNA","99a5a9c9":"plt.figure(figsize=(12,10))\nax = sns.barplot(y = NA.iloc[:,0], x = NA.index)\nplt.xticks(rotation = 90)\nplt.show()","ff8cf426":"#Similarly if there is no basement then the following values would be 0 \nNA_zero = ['GarageYrBlt', 'GarageArea', 'GarageCars', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath',\n           'MasVnrArea']\n\n#Similarly NA indicates no feature here and we hence can fill it with 'None'\nNa_none = ['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu','GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'BsmtQual', 'BsmtCond', \n           'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'MasVnrType']\n\nfor col in NA_zero:\n    all_data[col] = all_data[col].fillna(0)\n\n#Similarly None for categorical attributes\nfor col in Na_none:\n    all_data[col] = all_data[col].fillna('None')\n\n    \n#Since area of a street is connected to the house property we can fill in missing values by the median LotFrontage of the neighborhood.\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))\n    \n#Here 'RL' is the most common value and we can fill this in using mode\nall_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])\n\n# For this categorical feature all records are \"AllPub\", except for one \"NoSeWa\" and 2 NA so it is safe to drop it\nall_data = all_data.drop(['Utilities'], axis=1)\n\n# Data description says NA means typical\nall_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")\n\n#It has one NA value. and is mostly 'SBrkr', we can use mode imputation for the missing value\nall_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\n\n#Just like electrical it has one missing value\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\n\n#Same as above\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\nall_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])\n\n#Na most likely means No building class\nall_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")","4a91e99e":"all_data.isnull().sum().sort_values(ascending = False).head()","d2d9298e":"#MSSubClass=The building class\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)\n\n","9babfdd8":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(all_data.shape))","c6aa4c20":"# Adding total sqfootage feature \nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\n","558ca1b3":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","1b37fbe3":"skewness = skewness[abs(skewness.Skew) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)\n    \n#all_data[skewed_features] = np.log1p(all_data[skewed_features])","e837640d":"\nall_data = pd.get_dummies(all_data)\nprint(all_data.shape)","a511b59b":"train = all_data[:ntrain]\ntest = all_data[ntrain:]","0005e68c":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","b3eb2ffb":"#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","be71172f":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))","bd432557":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))","600b3ad1":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)","12425861":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)","41503e11":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\n\n","ea3806c6":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","6aaf00e0":"score = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","d6497cf0":"score = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","bae0b42b":"score = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","591d33d9":"score = rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","b9a88ce8":"\nscore = rmsle_cv(model_xgb)\nprint(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","cd0ab771":"score = rmsle_cv(model_lgb)\nprint(\"LGBM score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","e2d18999":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    # we define clones of the original models to fit the data in\n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        # Train cloned base models\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    \n    #Now we do the predictions for cloned models and average them\n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1)   ","a477e724":"averaged_models = AveragingModels(models = (ENet, GBoost, KRR, lasso))\n\nscore = rmsle_cv(averaged_models)\nprint(\" Averaged base models score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","2846a1ab":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","0b1f5018":"stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n                                                 meta_model = lasso)\n\nscore = rmsle_cv(stacked_averaged_models)\nprint(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","c3ebf73e":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","3e7fdf0a":"stacked_averaged_models.fit(train.values, y_train)\nstacked_train_pred = stacked_averaged_models.predict(train.values)\nstacked_pred = np.expm1(stacked_averaged_models.predict(test.values))\nprint(rmsle(y_train, stacked_train_pred))","ffe3e519":"model_xgb.fit(train, y_train)\nxgb_train_pred = model_xgb.predict(train)\nxgb_pred = np.expm1(model_xgb.predict(test))\nprint(rmsle(y_train, xgb_train_pred))","25d6004a":"model_lgb.fit(train, y_train)\nlgb_train_pred = model_lgb.predict(train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))","14028f04":"'''RMSE on the entire Train data when averaging'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stacked_train_pred*0.70 +\n               xgb_train_pred*0.15 + lgb_train_pred*0.15 ))","8360c5d4":"ensemble = stacked_pred*0.70 + xgb_pred*0.15 + lgb_pred*0.15","9155250b":"sub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = ensemble\nsub.to_csv('submission.csv',index=False)","b324cbaf":"- **Gradient Boosting Regression** :\n\nBoosting is an ensemble technique where new models are added to correct the errors made by existing models. Models are added sequentially until no further improvements can be made.\n<br>\nXGBoost is an implementation of gradient boosted decision trees designed for speed and performance.\n\n\n\nWith **huber**  loss that makes it robust to outliers\n    ","e5cee61c":"Let's explore these outliers\n","5e8065ee":"- **XGBoost** :","e07574e1":"**Ensemble prediction:**","b500bf00":"To make the two approaches comparable (by using the same number of models) , we just average **Enet KRR and Gboost**, then we add **lasso as meta-model**.","99274374":"-  **LASSO  Regression**  : \n\nLasso uses L1 regularization technique <br>\nIt is generally used when we have more number of features, because it automatically does feature selection.\n\nThis model may be very sensitive to outliers. So we need to made it more robust on them. For that we use the sklearn's  **Robustscaler()**  method on pipeline ","14b164c4":"**Adding one more important feature**\n\nSince area related features are very important to determine house prices, we add one more feature which is the total area of basement, first and second floor areas of each house","86f704dd":"We first define a rmsle evaluation function ","ec722254":"**Stacking Averaged models Score**","ac8f1907":"- **Kernel Ridge Regression** :\n\nKernel ridge regression is essentially the same as usual ridge regression, but uses the kernel trick to go non-linear.","b8465d5e":" **Log-transformation of the target variable**","0c5e69fb":"#### We can see the house prices have increased over the years and though a boxplot we can have an understanding of their distributions.\n\n### Let us find the correlation between the variables","823dcece":"**Define a cross validation strategy**\n\nCross-validation is primarily used in applied machine learning to estimate the skill of a machine learning model on unseen data.<br> That is, to use a limited sample in order to estimate how the model is expected to perform in general when used to make predictions on data not used during the training of the model.","3096b79f":"**Averaged base models score**\n\nWe just average four models here **ENet, GBoost,  KRR and lasso**.  Of course we could easily add more models in the mix. ","aabe69dd":"**If you found this notebook helpful or you just liked it , some upvotes would be very much appreciated**.","4aed251a":"We add **XGBoost and LightGBM** to the** StackedRegressor** defined previously. ","31aeddf6":"We use the scipy  function boxcox1p which computes the Box-Cox transformation of **\\\\(1 + x\\\\)**. \n\nNote that setting \\\\( \\lambda = 0 \\\\) is equivalent to log1p used above for the target variable.  \n\nSee [this page][1] for more details on Box Cox Transformation as well as [the scipy function's page][2]\n[1]: http:\/\/onlinestatbook.com\/2\/transformations\/box-cox.html\n[2]: https:\/\/docs.scipy.org\/doc\/scipy-0.19.0\/reference\/generated\/scipy.special.boxcox1p.html","c6209ae0":"**Skewed features**","c3ea9515":"###Final Training and Prediction","3da9d054":"## Ensembling StackedRegressor, XGBoost and LightGBM","e78b266e":"It remains no missing value.\n\n###More features engeneering\n\n**Transforming some numerical variables that are really categorical**\n","43415c88":"**Stacking averaged Models Class**","da6c5c53":"#### We can see that with better house conditions the prices increase. \n\n#### Let us see how the house prices have changed over the years","ea8f65e7":"- **LightGBM** :\n\nLight GBM is a fast, distributed, high-performance gradient boosting framework based on decision tree algorithm, used for ranking, classification and many other machine learning tasks.","30446ce0":"###Less simple Stacking : Adding a Meta-model","312ed0d8":"###Imputing missing values \n\nWe impute them  by proceeding sequentially  through features with missing values ","d28c29f6":"Wow ! It seems even the simplest stacking approach really improve the score . This encourages \nus to go further and explore a less simple stacking approch. ","71aa7eda":"We can see at the bottom right two with extremely large GrLivArea that are of a low price. These values are huge oultliers.\nTherefore, we can safely delete them.","578285e3":"**LightGBM:**","f18a2403":"- **Elastic Net Regression** :\n\nElastic net is basically a combination of both L1 and L2 regularization. So if you know elastic net, you can implement both Ridge and Lasso by tuning the parameters. So it uses both L1 and L2 penality term <br>\n<br>\nWe have a bunch of correlated independent variables in a dataset, then elastic net will simply form a group consisting of these correlated variables. Now if any one of the variable of this group is a strong predictor (meaning having a strong relationship with dependent variable), then we will include the entire group in the model building, because omitting other variables (like what we did in lasso) might result in losing some information in terms of interpretation ability, leading to a poor model performance.","4ce98d46":"**Getting dummy categorical features**","d0b22dfb":"The target variable is right skewed.  As (linear) models love normally distributed data , we need to transform this variable and make it more normally distributed.","85b1eab6":"##Target Variable\n\n**SalePrice** is the variable we need to predict. So let's do some analysis on this variable first.","d12d6d0e":"**Submission**","90a3114c":"1. The skew seems now corrected and the data appears more normally distributed. \n\n## Features engineering\n\nlet's first  concatenate the train and test data in the same dataframe","7196df02":"#Data Processing","988da556":"## Let's deal with missing data","e68be2c1":"In this approach, we add a meta-model on averaged base models and use the out-of-folds predictions of these base models to train our meta-model. \n\nThe procedure, for the training part, may be described as follows:\n\n\n1. Split the total training set into two disjoint sets (here **train** and .**holdout** )\n\n2. Train several base models on the first part (**train**)\n\n3. Test these base models on the second part (**holdout**)\n\n4. Use the predictions from 3)  (called  out-of-folds predictions) as the inputs, and the correct responses (target variable) as the outputs  to train a higher level learner called **meta-model**.\n\nThe first three steps are done iteratively . If we take for example a 5-fold stacking , we first split the training data into 5 folds. Then we will do 5 iterations. In each iteration,  we train every base model on 4 folds and predict on the remaining fold (holdout fold). \n\nSo, we will be sure, after 5 iterations , that the entire data is used to get out-of-folds predictions that we will then use as \nnew feature to train our meta-model in the step 4.\n\nFor the prediction part , We average the predictions of  all base models on the test data  and used them as **meta-features**  on which, the final prediction is done with the meta-model.\n","a13af095":"##Stacking  models\n###Simplest Stacking approach : Averaging base models\n\nWe begin with this simple approach of averaging base models.  We build a new **class**  to extend scikit-learn with our model and also to laverage encapsulation and code reuse ([inheritance][1]) \n\n\n  [1]: https:\/\/en.wikipedia.org\/wiki\/Inheritance_(object-oriented_programming)\n  \n  **Averaged base models class**","d84a25b4":"#Modelling\n\n**Import librairies**","da5821ae":"#### We can see there are few outliers and we will deal with them later.\n\n#### Let us see how the SalePrice is related categorical variables like Overall quality and OverallCond of the plot\n\n###Note : \n Outliers removal is note always safe.  We decided to delete these two as they are very huge and  really  bad ( extremely large areas for very low  prices). \n\nThere are probably others outliers in the training data.   However, removing all them  may affect badly our models if ever there were also  outliers  in the test data. That's why , instead of removing them all, we will just manage to make some of our  models robust on them. You can refer to  the modelling part of this notebook for that. ","61b7e01b":"###Base models scores\n\nLet's see how these base models perform on the data by evaluating the  cross-validation rmsle error","d2c554e2":"**StackedRegressor:**","ca840c80":"#### Let us see if there are any null values remaining","fdb45ef0":"**XGBoost:**","8a0f80f8":"##Base models","c1d2f0ae":"Getting the new train and test sets. ","162fc078":"**Label Encoding some categorical variables that may contain information in their ordering set** ","84684f1b":"We get again a better score by adding a meta learner","96b644c7":"**Box Cox Transformation of (highly) skewed features**"}}