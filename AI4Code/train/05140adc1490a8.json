{"cell_type":{"3d0fa1b5":"code","f6ea60df":"code","e7edb691":"code","4dedcc5f":"code","12e6859c":"code","77bd3229":"code","39f5f373":"code","d2cb0014":"code","8bbfb230":"code","d1e193e3":"code","310f7ea1":"code","d6dc17b0":"code","82af067b":"code","3161e396":"markdown"},"source":{"3d0fa1b5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.python.framework import ops\nops.reset_default_graph()\nfrom tensorflow.keras.utils import multi_gpu_model\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.callbacks import TensorBoard\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D\nfrom tensorflow.keras.layers import MaxPooling2D\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.model_selection import train_test_split\nimport keras.preprocessing.image\nimport os\nimport cv2\n","f6ea60df":"#Loading data and setting categories \nDATADIR= r\"..\/input\/cell_images\/cell_images\"\nCATEGORIES = ['Parasitized','Uninfected']","e7edb691":"for i in CATEGORIES:\n    path = os.path.join(DATADIR, i) #Path to directory\n    for image in os.listdir(path):\n        image_array= cv2.imread(os.path.join(path,image), cv2.IMREAD_GRAYSCALE) #Image is in gray scale to lessen load on model\n        plt.imshow(image_array, cmap='gray')\n        plt.show()\n        break\n    break","4dedcc5f":"print(image_array.shape)","12e6859c":"img_size= 100\nnew_array= cv2.resize(image_array, (img_size, img_size)) #resizing image \nplt.imshow(new_array)\nplt.show()","77bd3229":"training_data= []\ndef create_training_data():\n    for i in CATEGORIES:\n        path = os.path.join(DATADIR, i) #Path to directory\n        class_num= CATEGORIES.index(i)\n        for image in os.listdir(path):\n            try:\n                image_array= cv2.imread(os.path.join(path,image), cv2.IMREAD_GRAYSCALE)\n                new_array= cv2.resize(image_array, (img_size, img_size))\n                training_data.append([new_array, class_num])\n            except Exception as e:\n                pass\ncreate_training_data()","39f5f373":"import random\nrandom.shuffle(training_data)\nfor sample in training_data[:10]:\n    print(sample[1])","d2cb0014":"X=[]\ny=[]\nfor features, label in training_data:\n    X.append(features)\n    y.append(label)\nX=np.array(X).reshape(-1, img_size, img_size,1) ","8bbfb230":"# normalizing data or treating all values as between 0 and 1\nX = X\/255\nprint(len(X))\nprint(len(y))\n#making sure they are equal ","d1e193e3":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.5, random_state=42) ","310f7ea1":"#No need to have the model run for a while so adding a callback to stop training once 97 percent accuracy is reached.\nclass myCallback (tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('acc')>0.97):\n            print('\\Reached 97% accuracy so cancelling training!')\n            self.model.stop_training= True\n            \ncallbacks= myCallback()","d6dc17b0":"model = Sequential()\nmodel.add(Conv2D(64, (3,3), input_shape= X.shape[1:]))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(64, (3,3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(64))\n\nmodel.add(Activation('relu'))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics= ['accuracy'])\n\nmodel.fit(X, y, batch_size=32, epochs=15, validation_split=0.1, callbacks=[callbacks])","82af067b":"predictions = model.evaluate(X_test, y_test)\nprint(f'Loss : {predictions[0]}')\nprint(f'Accuracy : {predictions[1]}')\n","3161e396":"Vey high accuracy, pretty low training loss and validation loss (very good for generalization) "}}