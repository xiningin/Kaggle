{"cell_type":{"6e5aad4e":"code","0b8b2047":"code","d3fbdac2":"code","660cd116":"code","5779f608":"code","3a85ddc2":"code","df224c5e":"code","c3a1408c":"code","ccd74970":"code","20bb87b1":"code","e5770cc6":"code","e2cd04f8":"code","f18ae87e":"code","6fff0c81":"code","f82d6d1e":"code","4b462ce9":"code","76a257de":"code","2a11f1e9":"code","5e2f7ce9":"code","7dfb8d92":"code","d094484a":"markdown","b67ec3cd":"markdown","5ee009a7":"markdown"},"source":{"6e5aad4e":"# All the necessary libraries has imported\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer, SimpleImputer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, RepeatedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import (\n    confusion_matrix, plot_confusion_matrix, accuracy_score, precision_score,\n    recall_score, f1_score, plot_roc_curve, plot_precision_recall_curve, precision_recall_curve,\n    roc_auc_score\n)","0b8b2047":"# load and check train and test data\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","d3fbdac2":"# print\nprint(train.shape)\nprint(test.shape)","660cd116":"train.sample(5)","5779f608":"X = train.drop(['Survived'], axis=1)\nY = train.Survived","3a85ddc2":"print(X.shape)\nprint(Y.shape)","df224c5e":"X.sample(5)","c3a1408c":"test.sample(5)","ccd74970":"# Number of total missing values in each column\ntrain.isnull().sum(axis=0)","20bb87b1":"# Percentage of missing values in each column\ntest.isnull().sum(axis=0)","e5770cc6":"pipeline1 = ColumnTransformer([\n    ('drop', 'drop', ['PassengerId', 'Name', 'Cabin', 'Ticket']),\n    ('ageimputer', IterativeImputer(max_iter=10, random_state=27), ['Age', 'Fare']),\n    ('embarkedimputer', SimpleImputer(strategy='most_frequent'), ['Embarked'])],\n    remainder='passthrough'\n)\n\npipeline2 = ColumnTransformer([\n    ('scaler', MinMaxScaler(), [0, 1, 5, 6]),\n    ('onehot', OneHotEncoder(), [2, 3, 4])\n])\n\npipeline = make_pipeline(pipeline1, pipeline2)","e2cd04f8":"pipeline.fit(X)\nX_train = pipeline.transform(X)\nX_test = pipeline.transform(test)","f18ae87e":"pd.DataFrame(X_train).sample(5)","6fff0c81":"pd.DataFrame(X_test).sample(5)","f82d6d1e":"lr = LogisticRegression(penalty='none', verbose=2)\nrr = SGDClassifier(penalty='l2', n_jobs=4, loss='log')\nls = SGDClassifier(penalty='l1', n_jobs=4, loss='log')\nen = SGDClassifier(penalty='elasticnet', n_jobs=4, loss='log')","4b462ce9":"metrics.SCORERS.keys()","76a257de":"cv = RepeatedKFold(n_splits=5, n_repeats=1, random_state=27)\n\ngrid_ridge_lasso = {\n    'alpha': np.arange(0, 1, 0.05),\n    'learning_rate': np.array(['constant']),\n    'eta0': np.array([0.1, 0.01, 0.001])\n}\n\ngrid_elastic = {\n    'alpha': np.arange(0, 1, 0.05),\n    'l1_ratio': np.arange(0, 1, 0.05),\n    'learning_rate': np.array(['constant']),\n    'eta0': np.array([0.1, 0.01, 0.001])\n}\n\nlr_score = cross_val_score(lr, X_train, Y, cv=cv, scoring='accuracy')\n\nrr_search = GridSearchCV(rr, grid_ridge_lasso, cv=cv, scoring='accuracy')\nrr_score = rr_search.fit(X_train, Y)\n\nls_search = GridSearchCV(ls, grid_ridge_lasso, cv=cv, scoring='accuracy')\nls_score = ls_search.fit(X_train, Y)\n\nen_search = GridSearchCV(en, grid_elastic, cv=cv, scoring='accuracy')\nen_score = en_search.fit(X_train, Y)","2a11f1e9":"print(np.mean(lr_score))\nprint(rr_score.best_score_)\nprint(ls_score.best_score_)\nprint(en_score.best_score_)","5e2f7ce9":"predictions = en_score.best_estimator_.predict(X_test)","7dfb8d92":"pd.DataFrame({\n    'PassengerId': test.PassengerId,\n    'Survived': predictions\n}).to_csv('\/kaggle\/working\/submission_titanic_sgd_ls_lr.csv', index=False)","d094484a":"**Models**","b67ec3cd":"# Mim Rahman\n# ID: 181-35-2292","5ee009a7":"**Pre-processing Pipeline**"}}