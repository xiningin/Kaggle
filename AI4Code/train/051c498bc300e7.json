{"cell_type":{"af1f5dc1":"code","f2f37844":"code","e5e3581c":"code","c12b0515":"code","ad84234e":"code","32f818b8":"code","4d649b2e":"code","22c37abb":"code","4fb1f917":"code","1918121e":"code","1b6ceab4":"code","7fc514d7":"code","507f1e24":"code","91bc6198":"code","2cb312aa":"code","516ea37d":"code","cb9860ac":"code","21d80f55":"code","89faa141":"code","e9b8302b":"code","388a610f":"code","6f95d08b":"code","b24e9ebc":"code","0a306865":"code","33b66f3c":"code","49375faa":"code","a61681b4":"code","faf4e455":"code","6c3e6306":"code","9a39e70b":"code","f6e2dc15":"code","a22efbfc":"code","9dc5bcae":"code","4ad9121d":"code","e44b8456":"code","fb2e4d20":"code","4bfaaf4c":"code","5bab6144":"code","0f1311ad":"code","93a919fc":"code","5dded949":"code","c5b44718":"code","abdc85cb":"code","0652e21f":"code","baae8f46":"code","07e94c73":"code","3b19bf21":"code","ee8413ff":"code","01155255":"code","dd513f6a":"code","803112b5":"code","9322682b":"code","245864eb":"code","9e67819a":"code","42cd095d":"code","c48699d6":"code","70abb9c6":"code","291b8479":"code","ac59cca2":"code","90217c71":"code","f808b896":"code","44b5048b":"code","a62f0005":"code","0af080e8":"code","b4292a39":"code","6ab5a18d":"code","170313c4":"code","700221f5":"code","abb57b64":"code","23da5501":"code","4699b7a7":"code","1da4cdec":"code","527cf759":"markdown","a72e01cb":"markdown","d540b60e":"markdown","0150a96f":"markdown","8435a73c":"markdown","9d29b167":"markdown","183ae12c":"markdown","866342ea":"markdown","4aaa1b40":"markdown","879454e6":"markdown","55ba9d80":"markdown","7cc8a43c":"markdown","9f084f41":"markdown","b5d0a6ea":"markdown","f9ce1119":"markdown","17a8c2ac":"markdown","dd0bac54":"markdown","c26cc105":"markdown","2b882fb1":"markdown","e4d3bbc3":"markdown","45e5c9a0":"markdown","4cb1d338":"markdown","dc722dc6":"markdown","7cde78c6":"markdown","a5077985":"markdown"},"source":{"af1f5dc1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score, roc_curve, recall_score\nfrom sklearn.model_selection import GridSearchCV, RepeatedStratifiedKFold, RandomizedSearchCV, cross_val_score\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC \nfrom sklearn.ensemble import RandomForestClassifier,VotingClassifier\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.over_sampling import RandomOverSampler, SMOTE\nfrom collections import Counter\nfrom pprint import pprint\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler","f2f37844":"dataset = pd.read_csv(\"..\/input\/bank-marketing-campaigns-dataset\/bank-additional-full.csv\", sep=';')\ndataset.head()","e5e3581c":"dataset.info()","c12b0515":"# check for missing values in any column\ndataset.isnull().sum()","ad84234e":"dataset.describe()","32f818b8":"dataset.hist(bins = 15, figsize = (10,10), xlabelsize = 0.1, ylabelsize = 0.1)\nplt.show()","4d649b2e":"dataset.pdays.value_counts(normalize=True)","22c37abb":"sns.catplot(x='default',hue='y',kind='count',data=dataset)","4fb1f917":"pd.crosstab(dataset['default'], dataset.y)","1918121e":"dataset.y.value_counts(normalize=True)","1b6ceab4":"colors = [\"#0101DF\", \"#DF0101\"]\n\nsns.countplot('y', data=dataset, palette=colors)\nplt.title('Deposit Distributions \\n (0: No || 1: Yes)', fontsize=14)","7fc514d7":"plt.figure(figsize=(10,10))\nsns.heatmap(dataset.corr(),square=True,annot=True,cmap= 'twilight_shifted')","507f1e24":"# make a copy of dataset to scaling\nbank_scale=dataset.copy()\n\n# remove 'pdays' and 'default' columns\nbank_scale= bank_scale.drop(['pdays', 'default'], axis=1)\n\nbank_scale.y.replace(('yes', 'no'), (1, 0), inplace=True)\n\n# standardization for just numerical variables \ncategorical_cols= ['job','marital', 'education',  'housing', 'loan', 'contact', 'month', 'day_of_week','poutcome','y']\nfeature_scale=[feature for feature in bank_scale.columns if feature not in categorical_cols]\n\nscaler=StandardScaler()\nscaler.fit(bank_scale[feature_scale])","91bc6198":"scaled_data = pd.concat([bank_scale[categorical_cols].reset_index(drop=True),\n                    pd.DataFrame(scaler.transform(bank_scale[feature_scale]), columns=feature_scale)],\n                    axis=1)\n\ncategorical_cols1= ['job','marital', 'education', 'housing', 'loan', 'contact', 'month', 'day_of_week','poutcome']\nscaled_data= pd.get_dummies(scaled_data, columns = categorical_cols1, drop_first=True)\nscaled_data.head()","2cb312aa":"X = scaled_data.iloc[:,1:]\nY = scaled_data.iloc[:,-0]\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.25, random_state=2)","516ea37d":"import warnings\nwarnings.filterwarnings(\"ignore\")\n# Tuning parameter for RF ( tuning parameters are choosen based on best parameters of RandomizedSearchCV)\nn_estimators = [int(x) for x in np.linspace(start = 20, stop = 200, num = 5)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(1, 45, num = 3)]\nmin_samples_split = [5, 10]\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split}\ntuning_rf = RandomizedSearchCV(estimator = RandomForestClassifier(), param_distributions = random_grid, n_iter = 10, cv = 10, verbose=2, random_state=42, n_jobs = -1, scoring='roc_auc')\ntuning_rf.fit(X_train,y_train)\nprint('Best Parameter for Random Forest', tuning_rf.best_params_, tuning_rf.best_score_)\n\n# Tuning parameter for Tree\nparam_dict= {\"criterion\": ['gini', 'entropy'],\n            \"max_depth\": range(1,10),\n            \"min_samples_split\": range(1,10),\n            \"min_samples_leaf\": range(1,5)}\ntuning_tree = GridSearchCV(DecisionTreeClassifier(random_state=12),  param_grid=param_dict, cv=10, verbose=1, n_jobs=-1)\ntuning_tree.fit(X_train,y_train)\nprint('Best Parameter for Tree', tuning_tree.best_params_, tuning_tree.best_score_)\n\n# Xgboost Parameters\nparam_xgb = {\n 'max_depth':[4,5,6],\n 'min_child_weight':[4,5,6],\n 'gamma':[i\/10.0 for i in range(0,5)]\n}\ntuning_xgb = GridSearchCV(estimator = XGBClassifier( learning_rate =0.1, n_estimators=140, max_depth=4,\n min_child_weight=6, gamma=0, subsample=0.8, colsample_bytree=0.8,\n objective= 'binary:logistic', nthread=4, scale_pos_weight=1,seed=27), \n param_grid = param_xgb, scoring='roc_auc',n_jobs=4, cv=5)\ntuning_xgb.fit(X_train,y_train)\nprint('Best Parameter for XGBoost', tuning_xgb.best_params_, tuning_xgb.best_score_)","cb9860ac":"%%time\n# Voting Classifier\nclf1 = DecisionTreeClassifier()\nclf2 = RandomForestClassifier(random_state=1)\nclf3 = GaussianNB()\nclf4= KNeighborsClassifier()\nclf5= LinearDiscriminantAnalysis()\nclf6= XGBClassifier()\n\n# Instantiate the classfiers and make a list\nclassifiers = [LinearDiscriminantAnalysis(),\n               KNeighborsClassifier(),\n               GaussianNB(), \n               SVC(kernel='linear'),\n               DecisionTreeClassifier(criterion='gini', max_depth=6, min_samples_split=9,min_samples_leaf=2, random_state=12),\n               RandomForestClassifier(n_estimators=155, max_features='auto', max_depth=45, min_samples_split=10, random_state=27),\n               XGBClassifier(learning_rate =0.1, n_estimators=140, max_depth=5, min_child_weight=4, gamma=0.3, subsample=0.8, colsample_bytree=0.8, objective= 'binary:logistic', nthread=4, scale_pos_weight=1,seed=27),\n               VotingClassifier(estimators = [('DTree', clf1), ('rf', clf2), ('gnb', clf3),  ('knn', clf4),('lda', clf5), ('xgb', clf6)], voting ='soft')]\n\n# Define a result table as a DataFrame\nresult_table = pd.DataFrame(columns=['classifiers', 'fpr1','tpr1','fpr','tpr','train_accuracy','test_accuracy', 'train_auc', 'test_auc', 'f1_score', 'precision','recall','confusion matrix','Report'])\n\n# Train the models and record the results\nfor cls in classifiers:\n    model = cls.fit(X_train, y_train)\n    y_train_pred = model.predict(X_train)\n    y_test_pred = model.predict(X_test)\n    \n    train_accuracy= accuracy_score(y_train, y_train_pred)\n    test_accuracy= accuracy_score(y_test, y_test_pred)\n     \n    fpr, tpr, _ = roc_curve(y_test,  y_test_pred)\n    fpr1, tpr1, _ = roc_curve(y_train,  y_train_pred)\n    \n    train_auc = roc_auc_score(y_train, y_train_pred)\n    test_auc = roc_auc_score(y_test, y_test_pred)\n    \n    f1_score= metrics.f1_score(y_test, y_test_pred)\n    precision = metrics.precision_score(y_test, y_test_pred)\n    recall = metrics.recall_score(y_test, y_test_pred)\n    \n    conf_mat= confusion_matrix(y_test,y_test_pred)\n    report=classification_report(y_test,y_test_pred, digits=3, output_dict=True)\n    \n    result_table = result_table.append({'classifiers':cls.__class__.__name__,\n                                        'fpr1':fpr1,\n                                        'tpr1':tpr1,\n                                        'fpr':fpr, \n                                        'tpr':tpr, \n                                        'train_accuracy': train_accuracy,\n                                        'test_accuracy': test_accuracy,\n                                        'train_auc':train_auc,\n                                        'test_auc':test_auc,\n                                        'f1_score': f1_score,\n                                        'precision': precision,\n                                        'recall': recall,\n                                        'confusion matrix':conf_mat,\n                                        'Report':report}, ignore_index=True)\n\n# Set name of the classifiers as index labels\nresult_table.set_index('classifiers', inplace=True)","21d80f55":"result_table.rename(index={'VotingClassifier':'Model Ensemble'},inplace=True)\nresult_table","89faa141":"pd.DataFrame(result_table.iloc[0,12]).transpose()","e9b8302b":"fig = plt.figure(figsize=(15,10))\n\nfor i in range(result_table.shape[0]):\n    plt.plot(result_table.iloc[i,]['fpr'], \n             result_table.iloc[i,]['tpr'], \n             label=\"{}, AUC={:.3f}\".format(result_table.index[i], result_table.iloc[i,]['test_auc']))\n    \nplt.plot([0,1], [0,1], color='orange', linestyle='--')\nplt.xticks(np.arange(0.0, 1.1, step=0.1))\nplt.xlabel(\"False Positive Rate\", fontsize=15)\nplt.yticks(np.arange(0.0, 1.1, step=0.1))\nplt.ylabel(\"True Positive Rate\", fontsize=15)\nplt.title('ROC Curve Analysis', fontweight='bold', fontsize=15)\nplt.legend(prop={'size':13}, loc='lower right')\nplt.show()","388a610f":"plt.figure(figsize=(12,7))\nplt.plot(result_table.iloc[:,[5,7,8,9,10]])\nplt.xlabel('Models')\nplt.xticks(rotation=90)\nplt.ylabel('Score')\nplt.title('Result of Models')\nplt.legend(['Accuracy', 'ROC_AUC','F1 score','Precision','Recall'])\nplt.show();","6f95d08b":"plt.figure(figsize=(12,7))\nplt.plot(result_table.iloc[:,[7,10]])\nplt.xlabel('Models')\nplt.xticks(rotation=90)\nplt.ylabel('Score')\nplt.title('Result of Models')\nplt.legend(['ROC_AUC','Recall'])\nplt.show();","b24e9ebc":"print(\"Before OverSampling, counts of label '1': {}\".format(sum(y_train == 1))) \nprint(\"Before OverSampling, counts of label '0': {} \\n\".format(sum(y_train == 0))) \n\nfrom imblearn.over_sampling import RandomOverSampler\n# define oversampling strategy\noversample = RandomOverSampler(sampling_strategy='minority') \nX_train_over, y_train_over = oversample.fit_resample(X_train, y_train)\n  \nprint('After OverSampling, the shape of X_train: {}'.format(X_train_over.shape)) \nprint('After OverSampling, the shape of y_train: {} \\n'.format(y_train_over.shape)) \n  \nprint(\"After OverSampling, counts of label '1': {}\".format(sum(y_train_over == 1))) \nprint(\"After OverSampling, counts of label '0': {}\".format(sum(y_train_over == 0))) ","0a306865":"# Tuning parameter for RF \nn_estimators = [int(x) for x in np.linspace(start = 20, stop = 200, num = 5)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(1, 45, num = 3)]\nmin_samples_split = [5, 10]\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split}\ntuning_rf = RandomizedSearchCV(estimator = RandomForestClassifier(), param_distributions = random_grid, n_iter = 10, cv = 10, verbose=2, random_state=42, n_jobs = -1, scoring='roc_auc')\ntuning_rf.fit(X_train_over,y_train_over)\nprint('Best Parameter for Random Forest', tuning_rf.best_params_, tuning_rf.best_score_)\n\n# Tuning parameter for Tree\nparam_dict= {\"criterion\": ['gini', 'entropy'],\n            \"max_depth\": range(1,10),\n            \"min_samples_split\": range(1,10),\n            \"min_samples_leaf\": range(1,5)}\ntuning_tree = GridSearchCV(DecisionTreeClassifier(random_state=12),  param_grid=param_dict, cv=10, verbose=1, n_jobs=-1)\ntuning_tree.fit(X_train_over,y_train_over)\nprint('Best Parameter for Tree', tuning_tree.best_params_, tuning_tree.best_score_)\n\n# Xgboost Parameters\nparam_xgb = {\n 'max_depth':[4,5,6],\n 'min_child_weight':[4,5,6],\n 'gamma':[i\/10.0 for i in range(0,5)]}\ntuning_xgb = GridSearchCV(estimator = XGBClassifier( learning_rate =0.1, n_estimators=140, max_depth=4,\n min_child_weight=6, gamma=0, subsample=0.8, colsample_bytree=0.8,\n objective= 'binary:logistic', nthread=4, scale_pos_weight=1,seed=27), \n param_grid = param_xgb, scoring='roc_auc',n_jobs=4, cv=5)\ntuning_xgb.fit(X_train_over,y_train_over)\nprint('Best Parameter for XGBoost', tuning_xgb.best_params_, tuning_xgb.best_score_)","33b66f3c":"%%time\n# Voting Classifier\nclf1 = DecisionTreeClassifier()\nclf2 = RandomForestClassifier(random_state=1)\nclf3 = GaussianNB()\nclf4 = KNeighborsClassifier()\nclf5= LinearDiscriminantAnalysis()\nclf6= XGBClassifier()\n\n# Instantiate the classfiers and make a list\nclassifiers = [LinearDiscriminantAnalysis(),\n               KNeighborsClassifier(),\n               GaussianNB(), \n               SVC(kernel='linear'),\n               DecisionTreeClassifier(criterion='gini', max_depth=9, min_samples_split=5,min_samples_leaf=1, random_state=12),\n               RandomForestClassifier(n_estimators=200, max_features='sqrt', max_depth=45, min_samples_split=5, random_state=27),\n               XGBClassifier(learning_rate =0.1, n_estimators=140, max_depth=4, min_child_weight=6, gamma=0.4, subsample=0.8, colsample_bytree=0.8, objective= 'binary:logistic', nthread=4, scale_pos_weight=1,seed=27),\n               VotingClassifier(estimators = [('DTree', clf1), ('rf', clf2), ('gnb', clf3), ('knn', clf4), ('lda', clf5), ('xgb', clf6)], voting ='soft')]\n\n# Define a result table as a DataFrame\nresult_table1 = pd.DataFrame(columns=['classifiers', 'fpr1','tpr1','fpr','tpr','train_accuracy','test_accuracy', 'train_auc', 'test_auc', 'f1_score', 'precision','recall','confusion matrix','Report'])\n\n# Train the models and record the results\nfor cls in classifiers:\n    model = cls.fit(X_train_over, y_train_over)\n    y_train_pred = model.predict(X_train_over)\n    y_test_pred = model.predict(X_test)\n    \n    train_accuracy= accuracy_score(y_train_over, y_train_pred)\n    test_accuracy= accuracy_score(y_test, y_test_pred)\n     \n    fpr, tpr, _ = roc_curve(y_test,  y_test_pred)\n    fpr1, tpr1, _ = roc_curve(y_train_over,  y_train_pred)\n    \n    train_auc = roc_auc_score(y_train_over, y_train_pred)\n    test_auc = roc_auc_score(y_test, y_test_pred)\n    \n    f1_score= metrics.f1_score(y_test, y_test_pred)\n    precision = metrics.precision_score(y_test, y_test_pred)\n    recall = metrics.recall_score(y_test, y_test_pred)\n    \n    conf_mat= confusion_matrix(y_test,y_test_pred)\n    report=classification_report(y_test,y_test_pred, digits=3, output_dict=True)\n    \n    result_table1 = result_table1.append({'classifiers':cls.__class__.__name__,\n                                        'fpr1':fpr1,\n                                        'tpr1':tpr1,\n                                        'fpr':fpr, \n                                        'tpr':tpr, \n                                        'train_accuracy': train_accuracy,\n                                        'test_accuracy': test_accuracy,\n                                        'train_auc':train_auc,\n                                        'test_auc':test_auc,\n                                        'f1_score': f1_score,\n                                        'precision': precision,\n                                        'recall': recall,\n                                        'confusion matrix':conf_mat,\n                                        'Report':report}, ignore_index=True)\n\n# Set name of the classifiers as index labels\nresult_table1.set_index('classifiers', inplace=True)","49375faa":"result_table1.rename(index={'VotingClassifier':'Model Ensemble'},inplace=True)\nresult_table1","a61681b4":"fig = plt.figure(figsize=(15,10))\n\nfor i in range(result_table1.shape[0]):\n    plt.plot(result_table1.iloc[i,]['fpr'], \n             result_table1.iloc[i,]['tpr'], \n             label=\"{}, AUC={:.3f}\".format(result_table1.index[i], result_table1.iloc[i,]['test_auc']))\n    \nplt.plot([0,1], [0,1], color='orange', linestyle='--')\nplt.xticks(np.arange(0.0, 1.1, step=0.1))\nplt.xlabel(\"False Positive Rate\", fontsize=15)\nplt.yticks(np.arange(0.0, 1.1, step=0.1))\nplt.ylabel(\"True Positive Rate\", fontsize=15)\nplt.title('ROC Curve Analysis', fontweight='bold', fontsize=15)\nplt.legend(prop={'size':13}, loc='lower right')\nplt.show()","faf4e455":"plt.figure(figsize=(12,7))\nplt.plot(result_table1.iloc[:,[5,7,8,9,10]])\nplt.xlabel('Models')\nplt.xticks(rotation=90)\nplt.ylabel('Score')\nplt.title('Result of Models')\nplt.legend(['Accuracy', 'ROC_AUC','f1_score','precision','recall'])\nplt.show();","6c3e6306":"plt.figure(figsize=(12,7))\nplt.plot(result_table1.iloc[:,[7,10]])\nplt.xlabel('Models')\nplt.xticks(rotation=90)\nplt.ylabel('Score')\nplt.title('Result of Models')\nplt.legend(['ROC_AUC','Recall'])\nplt.show();","9a39e70b":"print(\"Before Undersampling, counts of label '1': {}\".format(sum(y_train == 1))) \nprint(\"Before Undersampling, counts of label '0': {} \\n\".format(sum(y_train == 0))) \n  \n# import the Random Under Sampler object.\nfrom imblearn.under_sampling import RandomUnderSampler\n# create the object.\nunder_sampler = RandomUnderSampler(random_state=2)\n# fit the object to the training data.\nX_train_under, y_train_under = under_sampler.fit_sample(X_train, y_train.ravel())\n  \nprint('After Undersampling, the shape of X_train: {}'.format(X_train_under.shape)) \nprint('After Undersampling, the shape of y_train: {} \\n'.format(y_train_under.shape)) \n\nprint(\"After Undersampling, counts of label '1': {}\".format(sum(y_train_under == 1))) \nprint(\"After Undersampling, counts of label '0': {}\".format(sum(y_train_under == 0)))","f6e2dc15":"# Tuning parameter for RF ( tuning parameters are choosen based on best parameters of RandomizedSearchCV)\nn_estimators = [int(x) for x in np.linspace(start = 20, stop = 200, num = 5)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(1, 45, num = 3)]\nmin_samples_split = [5, 10]\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split}\ntuning_rf = RandomizedSearchCV(estimator = RandomForestClassifier(), param_distributions = random_grid, n_iter = 10, cv = 10, verbose=2, random_state=42, n_jobs = -1, scoring='roc_auc')\ntuning_rf.fit(X_train_under,y_train_under)\nprint('Best Parameter for Random Forest', tuning_rf.best_params_, tuning_rf.best_score_)\n\n# Tuning parameter for Tree\nparam_dict= {\"criterion\": ['gini', 'entropy'],\n            \"max_depth\": range(1,10),\n            \"min_samples_split\": range(1,10),\n            \"min_samples_leaf\": range(1,5)}\ntuning_tree = GridSearchCV(DecisionTreeClassifier(random_state=12),  param_grid=param_dict, cv=10, verbose=1, n_jobs=-1)\ntuning_tree.fit(X_train_under,y_train_under)\nprint('Best Parameter for Tree', tuning_tree.best_params_, tuning_tree.best_score_)\n\n# Xgboost Parameters\nparam_xgb = {\n 'max_depth':[4,5,6],\n 'min_child_weight':[4,5,6],\n 'gamma':[i\/10.0 for i in range(0,5)]}\ntuning_xgb = GridSearchCV(estimator = XGBClassifier( learning_rate =0.1, n_estimators=140, max_depth=4,\n min_child_weight=6, gamma=0, subsample=0.8, colsample_bytree=0.8,\n objective= 'binary:logistic', nthread=4, scale_pos_weight=1,seed=27), \n param_grid = param_xgb, scoring='roc_auc',n_jobs=4, cv=5)\ntuning_xgb.fit(X_train_under,y_train_under)\nprint('Best Parameter for XGBoost', tuning_xgb.best_params_, tuning_xgb.best_score_)","a22efbfc":"%%time\n# Voting Classifier\nclf1 = DecisionTreeClassifier()\nclf2 = RandomForestClassifier(random_state=1)\nclf3 = GaussianNB()\nclf4 = KNeighborsClassifier()\nclf5= LinearDiscriminantAnalysis()\nclf6= XGBClassifier()\n\n# Instantiate the classfiers and make a list\nclassifiers = [LinearDiscriminantAnalysis(),\n               KNeighborsClassifier(),\n               GaussianNB(), \n               SVC(kernel='linear'),\n               DecisionTreeClassifier(criterion='entropy', max_depth=6, min_samples_split=2,min_samples_leaf=4, random_state=12),\n               RandomForestClassifier(n_estimators=155, max_features='auto', max_depth=45, min_samples_split=10, random_state=27),\n               XGBClassifier(learning_rate =0.1,n_estimators=140,max_depth=4,min_child_weight=5,gamma=0.4,subsample=0.8,colsample_bytree=0.8,objective= 'binary:logistic',nthread=4,scale_pos_weight=1,seed=27),\n               VotingClassifier(estimators = [('DTree', clf1), ('rf', clf2), ('gnb', clf3), ('knn', clf4), ('lda', clf5), ('xgb', clf6)], voting ='soft')]\n\n# Define a result table as a DataFrame\nresult_table2 = pd.DataFrame(columns=['classifiers', 'fpr1','tpr1','fpr','tpr','train_accuracy','test_accuracy', 'train_auc', 'test_auc', 'f1_score', 'precision','recall','confusion matrix','Report'])\n\n# Train the models and record the results\nfor cls in classifiers:\n    model2 = cls.fit(X_train_under, y_train_under)\n    y_train_pred2 = model2.predict(X_train_under)\n    y_test_pred2 = model2.predict(X_test)\n    \n    train_accuracy= accuracy_score(y_train_under, y_train_pred2)\n    test_accuracy= accuracy_score(y_test, y_test_pred2)\n     \n    fpr, tpr, _ = roc_curve(y_test,  y_test_pred2)\n    fpr1, tpr1, _ = roc_curve(y_train_under,  y_train_pred2)\n    \n    train_auc = roc_auc_score(y_train_under, y_train_pred2)\n    test_auc = roc_auc_score(y_test, y_test_pred2)\n    \n    f1_score= metrics.f1_score(y_test, y_test_pred2)\n    precision = metrics.precision_score(y_test, y_test_pred2)\n    recall = metrics.recall_score(y_test, y_test_pred2)\n    \n    conf_mat= confusion_matrix(y_test,y_test_pred2)\n    report=classification_report(y_test,y_test_pred2, digits=3, output_dict=True)\n    \n    result_table2 = result_table2.append({'classifiers':cls.__class__.__name__,\n                                        'fpr1':fpr1,\n                                        'tpr1':tpr1,\n                                        'fpr':fpr, \n                                        'tpr':tpr, \n                                        'train_accuracy': train_accuracy,\n                                        'test_accuracy': test_accuracy,\n                                        'train_auc':train_auc,\n                                        'test_auc':test_auc,\n                                        'f1_score': f1_score,\n                                        'precision': precision,\n                                        'recall': recall,\n                                        'confusion matrix':conf_mat,\n                                        'Report':report}, ignore_index=True)\n\n# Set name of the classifiers as index labels\nresult_table2.set_index('classifiers', inplace=True)","9dc5bcae":"result_table2.rename(index={'VotingClassifier':'Model Ensemble'},inplace=True)\nresult_table2","4ad9121d":"fig = plt.figure(figsize=(15,10))\n\nfor i in range(result_table2.shape[0]):\n    plt.plot(result_table2.iloc[i,]['fpr'], \n             result_table2.iloc[i,]['tpr'], \n             label=\"{}, AUC={:.3f}\".format(result_table2.index[i], result_table2.iloc[i,]['test_auc']))\n    \nplt.plot([0,1], [0,1], color='orange', linestyle='--')\nplt.xticks(np.arange(0.0, 1.1, step=0.1))\nplt.xlabel(\"False Positive Rate\", fontsize=15)\nplt.yticks(np.arange(0.0, 1.1, step=0.1))\nplt.ylabel(\"True Positive Rate\", fontsize=15)\nplt.title('ROC Curve Analysis', fontweight='bold', fontsize=15)\nplt.legend(prop={'size':13}, loc='lower right')\nplt.show()","e44b8456":"plt.figure(figsize=(12,7))\nplt.plot(result_table2.iloc[:,[5,7,8,9,10]])\nplt.xlabel('Models')\nplt.xticks(rotation=90)\nplt.ylabel('Score')\nplt.title('Result of Models')\nplt.legend(['Accuracy', 'ROC_AUC','f1_score','precision','recall'])\nplt.show();","fb2e4d20":"plt.figure(figsize=(12,7))\nplt.plot(result_table2.iloc[:,[7,10]])\nplt.xlabel('Models')\nplt.xticks(rotation=90)\nplt.ylabel('Score')\nplt.title('Result of Models')\nplt.legend(['ROC_AUC','Recall'])\nplt.show();","4bfaaf4c":"print(\"Before OverSampling, counts of label '1': {}\".format(sum(y_train == 1))) \nprint(\"Before OverSampling, counts of label '0': {} \\n\".format(sum(y_train == 0))) \n\nfrom imblearn.over_sampling import SMOTE \nsm = SMOTE(random_state = 2 )#, sampling_strategy=0.25) \nX_train_res, y_train_res = sm.fit_sample(X_train, y_train.ravel()) \n  \nprint('After OverSampling, the shape of X_train: {}'.format(X_train_res.shape)) \nprint('After OverSampling, the shape of y_train: {} \\n'.format(y_train_res.shape)) \n  \nprint(\"After OverSampling, counts of label '1': {}\".format(sum(y_train_res == 1))) \nprint(\"After OverSampling, counts of label '0': {}\".format(sum(y_train_res == 0))) ","5bab6144":"# Tuning parameter for RF ( tuning parameters are choosen based on best parameters of RandomizedSearchCV)\nn_estimators = [int(x) for x in np.linspace(start = 20, stop = 200, num = 5)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(1, 45, num = 3)]\nmin_samples_split = [5, 10]\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split}\ntuning_rf = RandomizedSearchCV(estimator = RandomForestClassifier(), param_distributions = random_grid, n_iter = 10, cv = 10, verbose=2, random_state=42, n_jobs = -1, scoring='roc_auc')\n#tuning_rf.fit(X_train_res,y_train_res)\n#tuning_rf.best_params_, tuning_rf.best_score_\n\n# Tuning parameter for Tree\nparam_dict= {\"criterion\": ['gini', 'entropy'],\n            \"max_depth\": range(1,10),\n            \"min_samples_split\": range(1,10),\n            \"min_samples_leaf\": range(1,5)}\ntuning_tree = GridSearchCV(DecisionTreeClassifier(random_state=12),  param_grid=param_dict, cv=10, verbose=1, n_jobs=-1)\n#tuning_tree.fit(X_train_res,y_train_res)\n#tuning_tree.best_params_, tuning_tree.best_score_\n\n# Xgboost Parameters\nparam_xgb = {\n 'max_depth':[4,5,6],\n 'min_child_weight':[4,5,6],\n 'gamma':[i\/10.0 for i in range(0,5)]\n}\ntuning_xgb = GridSearchCV(estimator = XGBClassifier( learning_rate =0.1, n_estimators=140, max_depth=4,\n min_child_weight=6, gamma=0, subsample=0.8, colsample_bytree=0.8,\n objective= 'binary:logistic', nthread=4, scale_pos_weight=1,seed=27), \n param_grid = param_xgb, scoring='roc_auc',n_jobs=4, cv=5)\n#tuning_xgb.fit(X_train_res,y_train_res)\n#tuning_xgb.best_params_, tuning_xgb.best_score_","0f1311ad":"%%time\n# Voting Classifier\nclf1 = DecisionTreeClassifier()\nclf2 = RandomForestClassifier(random_state=1)\nclf3 = GaussianNB()\nclf4= KNeighborsClassifier()\nclf5= LinearDiscriminantAnalysis()\nclf6= XGBClassifier()\n\n# Instantiate the classfiers and make a list\nclassifiers = [LinearDiscriminantAnalysis(),\n               KNeighborsClassifier(),\n               GaussianNB(), \n               SVC(kernel='linear'),\n               DecisionTreeClassifier(criterion='gini', max_depth=9,min_samples_split=2,min_samples_leaf=3, random_state=12),\n               RandomForestClassifier(n_estimators=200, max_features='sqrt', max_depth=45, min_samples_split=5, random_state=27),\n               XGBClassifier(learning_rate =0.1, n_estimators=140, max_depth=4, min_child_weight=5, gamma=0.4, subsample=0.8, colsample_bytree=0.8, nthread=4,scale_pos_weight=1,seed=27),\n               VotingClassifier(estimators = [('DTree', clf1), ('rf', clf2), ('gnb', clf3), ('knn', clf4), ('lda', clf5), ('xgb', clf6)], voting ='soft')]\n\n# Define a result table as a DataFrame\nresult_table3 = pd.DataFrame(columns=['classifiers', 'fpr1','tpr1','fpr','tpr','train_accuracy','test_accuracy', 'train_auc', 'test_auc', 'f1_score', 'precision','recall','confusion matrix','Report'])\n\n# Train the models and record the results\nfor cls in classifiers:\n    model3 = cls.fit(X_train_res, y_train_res)\n    y_train_pred3 = model3.predict(X_train_res)\n    y_test_pred3 = model3.predict(X_test)\n    \n    train_accuracy= accuracy_score(y_train_res, y_train_pred3)\n    test_accuracy= accuracy_score(y_test, y_test_pred3)\n     \n    fpr, tpr, _ = roc_curve(y_test,  y_test_pred3)\n    fpr1, tpr1, _ = roc_curve(y_train_res,  y_train_pred3)\n    \n    train_auc = roc_auc_score(y_train_res, y_train_pred3)\n    test_auc = roc_auc_score(y_test, y_test_pred3)\n    \n    f1_score= metrics.f1_score(y_test, y_test_pred3)\n    precision = metrics.precision_score(y_test, y_test_pred3)\n    recall = metrics.recall_score(y_test, y_test_pred3)\n    \n    conf_mat= confusion_matrix(y_test,y_test_pred3)\n    report=classification_report(y_test,y_test_pred3, digits=3, output_dict=True)\n    \n    result_table3 = result_table3.append({'classifiers':cls.__class__.__name__,\n                                        'fpr1':fpr1,\n                                        'tpr1':tpr1,\n                                        'fpr':fpr, \n                                        'tpr':tpr, \n                                        'train_accuracy': train_accuracy,\n                                        'test_accuracy': test_accuracy,\n                                        'train_auc':train_auc,\n                                        'test_auc':test_auc,\n                                        'f1_score': f1_score,\n                                        'precision': precision,\n                                        'recall': recall,\n                                        'confusion matrix':conf_mat,\n                                        'Report':report}, ignore_index=True)\n\n# Set name of the classifiers as index labels\nresult_table3.set_index('classifiers', inplace=True)","93a919fc":"result_table3.rename(index={'VotingClassifier':'Model Ensemble'},inplace=True)\n\nresult_table3","5dded949":"fig = plt.figure(figsize=(15,10))\n\nfor i in range(result_table3.shape[0]):\n    plt.plot(result_table3.iloc[i,]['fpr'], \n             result_table3.iloc[i,]['tpr'], \n             label=\"{}, AUC={:.3f}\".format(result_table3.index[i], result_table3.iloc[i,]['test_auc']))\n    \nplt.plot([0,1], [0,1], color='orange', linestyle='--')\nplt.xticks(np.arange(0.0, 1.1, step=0.1))\nplt.xlabel(\"False Positive Rate\", fontsize=15)\nplt.yticks(np.arange(0.0, 1.1, step=0.1))\nplt.ylabel(\"True Positive Rate\", fontsize=15)\nplt.title('ROC Curve Analysis', fontweight='bold', fontsize=15)\nplt.legend(prop={'size':13}, loc='lower right')\nplt.show()","c5b44718":"plt.figure(figsize=(12,7))\nplt.plot(result_table3.iloc[:,[5,7,8,9,10]])\nplt.xlabel('Models')\nplt.xticks(rotation=90)\nplt.ylabel('Scores')\nplt.title('Result of Models')\nplt.legend(['Accuracy', 'ROC_AUC','f1_score','precision','recall'])\nplt.show();","abdc85cb":"plt.figure(figsize=(12,7))\nplt.plot(result_table3.iloc[:,[7,10]])\nplt.xlabel('Models')\nplt.xticks(rotation=90)\nplt.ylabel('Score')\nplt.title('Result of Models')\nplt.legend([ 'ROC_AUC','Recall'])\nplt.show();","0652e21f":"# Baseline Model\nresult_table.iloc[:,[4,5,6,7,8,9,10]]","baae8f46":"# Oversampling with RandomOverSampler\nresult_table1.iloc[:,[4,5,6,7,8,9,10]]","07e94c73":"# Undersampling\nresult_table2.iloc[:,[4,5,6,7,8,9,10]]","3b19bf21":"# Oversampling with SMOTE\nresult_table3.iloc[:,[4,5,6,7,8,9,10]]","ee8413ff":"xgb = XGBClassifier(learning_rate =0.1, n_estimators=140, max_depth=4, min_child_weight=6, gamma=0.4, subsample=0.8, colsample_bytree=0.8, nthread=4, scale_pos_weight=1,seed=27)\nmodel_xgb = xgb.fit(X_train_over, y_train_over)\ny_train_xgb = model_xgb.predict(X_train_over)\ny_test_xgb = model_xgb.predict(X_test)\n\nprint(confusion_matrix(y_test,y_test_xgb))\nprint(classification_report(y_test,y_test_xgb, digits=3))\n\nprint('Train accuracy: %0.3f' % accuracy_score(y_train_over, y_train_xgb))\nprint('Test accuracy: %0.3f' % accuracy_score(y_test, y_test_xgb))\n\nprint('Train AUC: %0.3f' % roc_auc_score(y_train_over, y_train_xgb))\nprint('Test AUC: %0.3f' % roc_auc_score(y_test, y_test_xgb))","01155255":"import shap\nexpl_xgb = shap.TreeExplainer(model_xgb)\nshap_xgb = expl_xgb.shap_values(X_train_over)","dd513f6a":"shap.summary_plot(shap_xgb, X_train_over, plot_type=\"bar\")","803112b5":"shap.summary_plot(shap_xgb, X_train_over)","9322682b":"# XGBoost Tree SHAP algorithm computes the SHAP values with respect to the margin, not the transformed probability. So we are seeing log odds values. In order to have probability values link='logit' is added.\nshap.initjs()\nshap.force_plot(expl_xgb.expected_value, shap_xgb[1050,:], X_train_over.iloc[1050,:], link='logit')","245864eb":"# XGBoost Tree SHAP algorithm computes the SHAP values with respect to the margin, not the transformed probability. So we are seeing log odds values. In order to have probability values link='logit' is added.\nshap.initjs()\nshap.force_plot(expl_xgb.expected_value, shap_xgb[4000,:], X_train_over.iloc[4000,:], link='logit')","9e67819a":"# base value\ny_train_over.mean()","42cd095d":"X_train_over.mean()","c48699d6":"X_train_over.iloc[4000,]","70abb9c6":"from sklearn.feature_selection import SelectFromModel\nfrom numpy import sort\n# Fit model using each importance as a threshold\nthresholds = sort(model_xgb.feature_importances_)\nfor thresh in thresholds:\n\t# select features using threshold\n\tselection = SelectFromModel(model_xgb, threshold=thresh, prefit=True)\n\tselect_X_train = selection.transform(X_train_over)\n\t# train model\n\tselection_model =  XGBClassifier(learning_rate =0.1, n_estimators=140, max_depth=4, min_child_weight=6, gamma=0.4, subsample=0.8, colsample_bytree=0.8, nthread=4, scale_pos_weight=1,seed=27)\n\tselection_model.fit(select_X_train, y_train_over)\n\t# eval model\n\tselect_X_test = selection.transform(X_test)\n\ty_pred = selection_model.predict(select_X_test)\n\tpredictions = [round(value) for value in y_pred]\n\tauc= roc_auc_score(y_test, predictions)\n\tprint(\"Thresh=%.3f, n=%d, AUC: %.2f%%\" % (thresh, select_X_train.shape[1], auc*100.0))","291b8479":"def select_features(X_train, y_train, X_test):\n# configure to select a subset of features\n    fs = SelectFromModel( XGBClassifier(learning_rate =0.1, \n                                        n_estimators=140, \n                                        max_depth=4, \n                                        min_child_weight=6, \n                                        gamma=0.4, \n                                        subsample=0.8, \n                                        colsample_bytree=0.8, \n                                        nthread=4, \n                                        scale_pos_weight=1,\n                                        seed=27), max_features=22).fit(X_train_over, y_train_over)\n    # transform train input data\n    X_train_fs = fs.transform(X_train_over)\n    # transform test input data\n    X_test_fs = fs.transform(X_test)\n    return X_train_fs, X_test_fs, fs\n ","ac59cca2":"X_train_fs, X_test_fs, fs = select_features(X_train_over, y_train_over, X_test)\n# fit the model\nmodel = XGBClassifier(learning_rate =0.1, n_estimators=140, max_depth=4, min_child_weight=6, gamma=0.4, subsample=0.8, colsample_bytree=0.8, nthread=4, scale_pos_weight=1,seed=27)\nmodel.fit(X_train_fs, y_train_over)\ny_train_pred = model.predict(X_train_fs)\n# evaluate the model\nyhat = model.predict(X_test_fs)","90217c71":"feature_idx = fs.get_support()\nfeature_name = X_train_over.columns[feature_idx]\nfeature_name","f808b896":"print(confusion_matrix(y_test,yhat))\nprint(classification_report(y_test,yhat, digits=3))\n\nprint('Train accuracy: %0.3f' % accuracy_score(y_train_over, y_train_pred))\nprint('Test accuracy: %0.3f' % accuracy_score(y_test, yhat))\n\nprint('Train AUC: %0.3f' % roc_auc_score(y_train_over, y_train_pred))\nprint('Test AUC: %0.3f' % roc_auc_score(y_test, yhat))","44b5048b":"shap1 = shap.TreeExplainer(model)\nshap_xgb1 = shap1.shap_values(X_train_fs)","a62f0005":"shap.summary_plot(shap_xgb1, X_train_fs, plot_type=\"bar\")","0af080e8":"shap.summary_plot(shap_xgb1, X_train_fs)","b4292a39":"shap.initjs()\nshap.force_plot(shap1.expected_value, shap_xgb1[4000,:], X_train_fs[4000,:], link='logit')","6ab5a18d":"xgb_under = XGBClassifier(learning_rate =0.1,n_estimators=140,max_depth=4,min_child_weight=5,gamma=0.4,subsample=0.8,colsample_bytree=0.8,nthread=4,scale_pos_weight=1,seed=27)\nxgb_under.fit(X_train_under, y_train_under)\ny_train_pred= xgb_under.predict(X_train_under)\n\n# making predictions on the testing set \ny_pred = xgb_under.predict(X_test)\n\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))\n\nprint('Train accuracy:%0.3f' %(accuracy_score(y_train_under, y_train_pred)))\nprint('Test accuracy:%0.3f' %(accuracy_score(y_test, y_pred)))\n\nprint('AUC score for train: %0.3f ' % (roc_auc_score(y_train_under,y_train_pred)))\nprint('AUC score for test: %0.3f' % (roc_auc_score(y_test, y_pred)))\n\n#Draw ROC Curve\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred)\nroc_auc = metrics.roc_auc_score(y_test, y_pred)\nplt.figure(figsize=(12,6))\nplt.plot(fpr,tpr,label=\"ROC Curve (area = %0.2f)\" % roc_auc , color='darkorange')\nplt.plot([0, 1], [0, 1], color='navy', linestyle='--')\nplt.xlabel('False Positive Rate (1-Specificity)')\nplt.ylabel('True Positive Rate (Sensitivity)')\nplt.title('ROC Curve')\nplt.legend(loc=\"lower right\")\nplt.show()","170313c4":"import shap\nexplainer = shap.TreeExplainer(xgb_under)\nshap_under = explainer.shap_values(X_train_under)","700221f5":"shap.summary_plot(shap_under, X_train_under, plot_type=\"bar\")","abb57b64":"shap.summary_plot(shap_under, X_train_under)","23da5501":"# XGBoost Tree SHAP algorithm computes the SHAP values with respect to the margin, not the transformed probability. So we are seeing log odds values. In order to have probability values link='logit' is added.\nshap.initjs()\nshap.force_plot(explainer.expected_value, shap_under[1050,:], X_train_under.iloc[1050,:], link='logit')","4699b7a7":"# XGBoost Tree SHAP algorithm computes the SHAP values with respect to the margin, not the transformed probability. So we are seeing log odds values. In order to have probability values link='logit' is added.\nshap.initjs()\nshap.force_plot(explainer.expected_value, shap_under[4000,:], X_train_under.iloc[4000,:], link='logit')","1da4cdec":"from sklearn.feature_selection import SelectFromModel\nfrom numpy import sort\n# Fit model using each importance as a threshold\nthresholds = sort(xgb_under.feature_importances_)\nfor thresh in thresholds:\n\t# select features using threshold\n\tselection = SelectFromModel(xgb_under, threshold=thresh, prefit=True)\n\tselect_X_train = selection.transform(X_train_under)\n\t# train model\n\tselection_model = XGBClassifier(learning_rate =0.1,n_estimators=140,max_depth=4,min_child_weight=5,gamma=0.4,subsample=0.8,colsample_bytree=0.8,objective= 'binary:logistic',nthread=4,scale_pos_weight=1,seed=27)\n\tselection_model.fit(select_X_train, y_train_under)\n\t# eval model\n\tselect_X_test = selection.transform(X_test)\n\ty_pred = selection_model.predict(select_X_test)\n\tpredictions = [round(value) for value in y_pred]\n\tauc= roc_auc_score(y_test, predictions)\n\tprint(\"Thresh=%.3f, n=%d, AUC: %.2f%%\" % (thresh, select_X_train.shape[1], auc*100.0))","527cf759":"### Feature Selection","a72e01cb":"*There are 41188 observations with 21 features.*","d540b60e":"## Train\/Test Split\n<a id=\"split\"><\/a>","0150a96f":"#### Attribute Information:\n<a id=\"attribute\"><\/a>\n- Age\n- Job - type of job (categorical: 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown')\n- marital - marital status (categorical: 'divorced','married','single','unknown'; note: 'divorced' means divorced or widowed)\n- Education - Shows the level of education of each customer (categorical: 'basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','unknown')\n- Default - Whether a customer has credit in default (categorical: 'no','yes','unknown')\n- Housing - Does the customer have a housing loan? (categorical: 'no','yes','unknown')\n- Loan - Does the customer have a personal loan? (categorical: 'no','yes','unknown')\n- Contact - The contact communication type (categorical: 'cellular','telephone')\n- Month - Last contact month of year\n- day_of_week - Last contact day of Week\n- Duration - Last contact duration in seconds. Important note: this attribute highly affects the output target (e.g., if duration=0 then y='no').\n- Campaign - Number of contact performed for the client during the campaign\n- pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)\n- previous: number of contacts performed before this campaign and for this client\n- poutcome: outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success') \n- emp.var.rate: employment variation rate - quarterly indicator\n- cons.price.idx: consumer price index - monthly indicator\n- cons.conf.idx: consumer confidence index - monthly indicator\n- euribor3m: euribor 3 month rate - daily indicator\n- nr.employed: number of employees - quarterly indicator\n- y - has the client subscribed a term deposit? (binary: 'yes','no')","8435a73c":"*Values of pdays column shows very little variation. Most of the values consist of 999 which means client was not previously contacted. It does not give us much information. Therefore, it is better to drop.*","9d29b167":"<h1 align=\"center\">  Bank Marketing Data <\/h1>\n\n#### [UCI: BANK MARKETING DATASET](https:\/\/archive.ics.uci.edu\/ml\/datasets\/Bank+Marketing) \nThe data is related with direct marketing campaigns (phone calls) of a Portuguese banking institution. The classification goal is to predict if the client will subscribe a term deposit (variable y).","183ae12c":"*emp.var.rate, nr.employed and euribor3m are highly correlated. Since multicollinearity is not a problem for all algorithm, we decide to keep them.*","866342ea":"### Shap Value","4aaa1b40":"## APPROACH 3: UNDERSAMPLING - RandomUnderSampler\n<a id=\"approach3\"><\/a>\n*In this approach, we use undersampling technique which randomly removes observations of the majority class to improve the balance accross classes using RandomOverSampler function in imblearn.*","879454e6":"# Feature Importance and Final Model Selection\n<a id=\"keyfeatures\"><\/a>","55ba9d80":"# Data Cleaning and Preprocessing\n<a id=\"cleaning\"><\/a>","7cc8a43c":"## APPROACH 4 : OVERSAMPLING- SMOTE\n<a id=\"approach4\"><\/a>\nIn this approach, we use oversampling technique using Synthetic Minority Oversampling Technique, or SMOTE for short.","9f084f41":"*All tuning parameters are choosen based on best parameters of RandomizedSearchCV and GridSearchCV.*","b5d0a6ea":"# Approach 1: Baseline Model\n<a id=\"approach1\"><\/a>\n*In this approach, we do not make the data balance to understand whether the models improved after balancing data.*","f9ce1119":"*Above forceplot shows that the output value is the prediction for 4000th observation which is higher than base value. Duration variable tends to push prediction higher the most.*","17a8c2ac":"## Feature Importance in RandomUnderSampler\n<a id=\"keyfeatures2\"><\/a>\n*Second best model was Xgboost in RandomUnderSampler, let's have a look at it.*","dd0bac54":"*For example: Above forceplot shows that the output value is the prediction for 1050th observation which is lower than base value. The base value is \u201cthe value that would be predicted if we did not know any features for the current output.\u201d In other words, it is the mean prediction, or mean(yhat). Duration variable tends to push prediction lower the most.*","c26cc105":"*From the above distribution we can be sure that the data is imbalanced, as the number of \"no\"s are also 8 times the number of \"yes\".*","2b882fb1":"*There are no missing values in the dataset.*","e4d3bbc3":"# Contents:\n1. [Attribute Information](#attribute)\n2. [Data Cleaning and Preprocessing](#cleaning)\n    -  [Standardization](#scaling)\n    -  [Train\/Test Split](#split)\n3. [Approaches](#approach)\n    - [Approach 1: Baseline Model](#approach1)\n    - [Approach 2: Oversampling- RandomOverSampler](#approach2)\n    - [Approach 3: Undersampling - RandomUnderSampler](#approach3)\n    - [Approach 4: Oversampling- SMOTE](#approach4)\n4. [Feature Importance and Final Model Selection](#keyfeatures)\n    - [Feature Importance in RandomOverSampler](#keyfeatures1)\n    - [Feature Importance in RandomOverSampler](#keyfeatures2)","45e5c9a0":"*Dropping default column is better because all values of default are no or unknown. It does not give much information.*","4cb1d338":"# Approach 2: Oversampling - RandomOverSampler\n<a id=\"approach2\"><\/a>\n*In this approach, to alleviate the effects of imbalance during model training, we use oversampling technique which imputes additional data points to improve balance across classes using RandomOverSampler.*","dc722dc6":"*After 4 different approaches, we decide to choose best model according to AUC, f1, precision and recall score. The best model is Xgboost in RandomOverSampler.*","7cde78c6":"## Standardization\n<a id=\"scaling\"><\/a>","a5077985":"## Feature Importance in RandomOverSampler\n<a id=\"keyfeatures1\"><\/a>"}}