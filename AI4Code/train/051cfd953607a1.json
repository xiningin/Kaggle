{"cell_type":{"fabd7143":"code","24935705":"code","71d5e86e":"code","a59c0452":"code","abfa49fa":"code","eb1df073":"code","4425f520":"code","431cf981":"code","94fbc712":"code","57f6ea76":"code","c8540edd":"code","19138cbb":"code","9fa3e6a3":"code","31f24f95":"code","3955835f":"code","a0786e56":"code","61ee7030":"code","889a1ece":"code","fa172462":"code","fd4be457":"code","05d5d5c3":"code","12677024":"markdown","f4807a40":"markdown","63d2d38b":"markdown","25a6b092":"markdown","9d264770":"markdown","bdf986d6":"markdown","da7de853":"markdown","e1e1ac76":"markdown","a4cab692":"markdown","4d27f524":"markdown","d0dffbdf":"markdown","32904f84":"markdown","6ff7a816":"markdown","790bd192":"markdown","106178b8":"markdown","3c253e5d":"markdown"},"source":{"fabd7143":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt","24935705":"data=pd.read_csv('..\/input\/canada1\/Canada - Canada by Citizenship.csv')\ndata.head()","71d5e86e":"print(\"Data Count :\")\npd.DataFrame(data.count())","a59c0452":"data.info()","abfa49fa":"# in pandas axis=0 represents rows (default) and axis=1 represents columns.\ndata.drop(['AREA','REG','DEV','Type','Coverage'], axis=1, inplace=True)\ndata.head(2)","eb1df073":"data.rename(columns={'OdName':'Country', 'AreaName':'Continent', 'RegName':'Region'}, inplace=True)\ndata.columns","4425f520":"data['Total'] = data.sum(axis=1)\ndata.head()","431cf981":"data.isnull().sum()","94fbc712":"data.describe()","57f6ea76":"data.set_index('Country',inplace=True)","c8540edd":"data.head(3)","19138cbb":"# 1. the full row data (all columns)\npd.DataFrame(data.loc['India']).drop(['Continent', 'Region','DevName','Total']).plot()","9fa3e6a3":"years = list(map(str, range(1980, 2014)))\nyears","31f24f95":"# 1. create the condition boolean series\ncondition = data['Continent'] == 'Asia'\nprint (condition)","3955835f":"# 2. pass this condition into the dataFrame\ndata[condition]","a0786e56":"# we can pass mutliple criteria in the same line. \n# let's filter for AreaNAme = Asia and RegName = Southern Asia\n\ndata[(data['Continent']=='Asia') & (data['Region']=='Southern Asia')]","61ee7030":"df_CI = data.loc[['India', 'China'], years]\ndf_CI.head()","889a1ece":"df_CI.plot(kind='line')","fa172462":"df_CI = df_CI.transpose()\ndf_CI.head()","fd4be457":"### type your answer here\n\ndf_CI.index = df_CI.index.map(int) # let's change the index values of df_CI to type integer for plotting\ndf_CI.plot(kind='line')\n\nplt.title('Immigrants from China and India')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()\n\n","05d5d5c3":"data.sort_values(by='Total', ascending=False, axis=0, inplace=True)\n\n\n\n# get the top 5 entries\ndf_top3 = data.head(4)\n\n\n# transpose the dataframe\ndf_top3 = df_top3[years].transpose() \n\n\n\nprint(df_top3)\n\n\n# Step 2: Plot the dataframe. To make the plot more readeable, we will change the size using the `figsize` parameter.\ndf_top3.index = df_top3.index.map(int) # let's change the index values of df_top5 to type integer for plotting\ndf_top3.plot(kind='line', figsize=(14, 8)) # pass a tuple (x, y) size\n\n\n\nplt.title('Immigration Trend of Top 3 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\n\nplt.show()\n","12677024":"\n\nSince we converted the years to string, let's declare a variable that will allow us to easily call upon the full range of years:\n","f4807a40":"# **Loading the Libraries**","63d2d38b":"** Loading the Data into the DataFrame**","25a6b092":"**Before we proceed, notice that the default index of the dataset is a numeric range from 0 to 194. This makes it very difficult to do a query by a specific country. For example to search for data on Japan, we need to know the corressponding index value.\nThis can be fixed very easily by setting the 'Country' column as the index using `set_index()` method.**","9d264770":"**Let's rename the columns so that they make sense. We can use `rename()` method by passing in a dictionary of old and new names as follows:**","bdf986d6":"### Filtering based on a criteria\nTo filter the dataframe based on a condition, we simply pass the condition as a boolean vector. \n\nFor example, Let's filter the dataframe to show the data on Asian countries (AreaName = Asia).","da7de853":"**We will also add a 'Total' column that sums up the total immigrants by country over the entire period 1980 - 2013, as follows:**","e1e1ac76":"**That doesn't look right...\nRecall that pandas plots the indices on the x-axis and the columns as individual lines on the y-axis. Since df_CI is a dataframe with the country as the index and years as the columns, we must first transpose the dataframe using transpose() method to swap the row and columns.**","a4cab692":"**Finally, let's view a quick summary of each column in our dataframe using the `describe()` method.**","4d27f524":"**Let's clean the data set to remove a few unnecessary columns. We can use *pandas* `drop()` method as follows:**","d0dffbdf":"**We can check to see how many null objects we have in the dataset as follows:**","32904f84":"**Plot graph. We will explicitly specify line plot by passing in kind parameter to plot().**","6ff7a816":"# Get the data set for China and India, and display dataframe","790bd192":"![](http:\/\/)# The trend of top 3 countries that contributed the most to immigration to Canada.","106178b8":"Example: Let's view the number of immigrants from India for the following scenarios:\n    1. The full row data (all columns)\n    2. For years 1980 to 1985","3c253e5d":"**When analyzing a dataset, it's always a good idea to start by getting basic information about your dataframe. We can do this by using the `info()` method.\n**"}}