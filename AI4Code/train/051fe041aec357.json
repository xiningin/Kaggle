{"cell_type":{"23dfc8b7":"code","76751bdd":"code","b83ac279":"code","da037536":"code","d4f65ed9":"code","9986131d":"code","393dc416":"code","26707799":"code","86e0255f":"code","b2c510ed":"code","dbc45ff6":"code","4072e5ec":"code","80f9104a":"code","ea0433ea":"code","8fe02d2e":"code","2a8056da":"code","8c5a49b7":"code","53196033":"code","103e3c58":"code","ded5fa65":"code","c535608b":"code","f5f93b39":"code","965cc6a2":"code","a45d07bb":"code","0abaeb07":"code","c716a410":"code","44f712f2":"code","50b70dc6":"code","d9358d2e":"code","4f51a473":"code","54af3e48":"code","fc902054":"code","8d300a50":"code","4406ac0b":"code","de31c4a5":"code","875c5540":"code","cd2499f0":"code","1cab298e":"code","92cc807b":"code","718d10dd":"code","a6aa3a40":"markdown"},"source":{"23dfc8b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","76751bdd":"from sklearn.model_selection import train_test_split \nfrom matplotlib import pyplot as plt\n%matplotlib inline ","b83ac279":"IdLookupTable = pd.read_csv('\/kaggle\/input\/facial-keypoints-detection\/IdLookupTable.csv')\nIdLookupTable.info()","da037536":"IdLookupTable.head()","d4f65ed9":"SampleSubmission = pd.read_csv('\/kaggle\/input\/facial-keypoints-detection\/SampleSubmission.csv')\nSampleSubmission.info()","9986131d":"SampleSubmission.head()","393dc416":"test = pd.read_csv('\/kaggle\/input\/facial-keypoints-detection\/test\/test.csv')\ntest.info()","26707799":"test.head()","86e0255f":"training = pd.read_csv('\/kaggle\/input\/facial-keypoints-detection\/training\/training.csv')\ntraining.info()","b2c510ed":"training.head(2)","dbc45ff6":"training = training.dropna()\n#training.fillna(method = 'ffill',inplace = True)","4072e5ec":"training.shape, type(training)","80f9104a":"training['Image'] = training['Image'].apply(lambda x: np.fromstring(x, dtype=int, sep=' ').reshape((96,96)))","ea0433ea":"def get_image_and_dots(df, index):\n    image = plt.imshow(df['Image'][index],cmap='gray')\n    l = []\n    for i in range(1,31,2):\n        l.append(plt.plot(df.loc[index][i-1], df.loc[index][i], 'ro'))\n        \n    return image, l\n","8fe02d2e":"fig = plt.figure(figsize=(8, 8))\nfig.subplots_adjust(\n    left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05)\n\nfor i in range(16):\n    ax = fig.add_subplot(4, 4, i + 1, xticks=[], yticks=[])\n    get_image_and_dots(training, i)\n\nplt.show()","2a8056da":"X = np.asarray([training['Image']], dtype=np.uint8).reshape(training.shape[0],96,96,1)\ny = training.drop(['Image'], axis=1)","8c5a49b7":"X.shape","53196033":"y.shape","103e3c58":"type(X), type(y)","ded5fa65":"y2 = y.to_numpy()","c535608b":"type(y2), y2.shape","f5f93b39":"X_train, X_test, y_train, y_test = train_test_split(X, y2, test_size=0.3, random_state=42)","965cc6a2":"from keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Flatten, AvgPool2D, BatchNormalization, Dropout, Activation, MaxPooling2D\nfrom keras.optimizers import Adam\nfrom keras import regularizers\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom keras.models import Sequential, Model\nfrom keras.layers import Activation, Convolution2D, MaxPooling2D, BatchNormalization, Flatten, Dense, Dropout, Conv2D,MaxPool2D, ZeroPadding2D","a45d07bb":"model = Sequential()\n\nmodel.add(Convolution2D(32, (3,3), padding='same', use_bias=False, input_shape=(96,96,1)))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(32, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Convolution2D(64, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(64, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Convolution2D(96, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(96, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Convolution2D(128, (3,3),padding='same', use_bias=False))\n# model.add(BatchNormalization())\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(128, (3,3),padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Convolution2D(256, (3,3),padding='same',use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(256, (3,3),padding='same',use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Convolution2D(512, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(512, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\n\nmodel.add(Flatten())\nmodel.add(Dense(512,activation='relu'))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(30))\nmodel.summary()","0abaeb07":"model.compile(optimizer='Adam', \n              loss='mse', \n              metrics=['mae'])","c716a410":"model.fit(X_train, y_train, epochs=500)","44f712f2":"score = model.evaluate(X_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","50b70dc6":"model.save('keypoint_model22.h5')","d9358d2e":"test['Image'] = test['Image'].apply(lambda x: np.fromstring(x, dtype=int, sep=' ').reshape((96,96)))","4f51a473":"test.shape, type(test)","54af3e48":"test_X = np.asarray([test['Image']], dtype=np.uint8).reshape(test.shape[0],96,96,1)\ntest_res = model.predict(test_X)","fc902054":"train_predicts = model.predict(X_train)","8d300a50":"n = 11\n\nxv = X_train[n].reshape((96,96))\nplt.imshow(xv,cmap='gray')\n\nfor i in range(1,31,2):\n    plt.plot(train_predicts[n][i-1], train_predicts[n][i], 'ro')\n    plt.plot(y_train[n][i-1], y_train[n][i], 'x', color='green')\n\nplt.show()","4406ac0b":"header = list(y.columns)","de31c4a5":"test_predicts = pd.DataFrame(test_res, columns = header)","875c5540":"for i in range(IdLookupTable.shape[0]):\n    IdLookupTable.Location[i] = test_predicts.loc[IdLookupTable.ImageId[i]-1][IdLookupTable.FeatureName[i]]\n    ","cd2499f0":"SampleSubmission.Location = IdLookupTable.Location","1cab298e":"my_submission = SampleSubmission","92cc807b":"my_submission.to_csv('submission22.csv', index=False)","718d10dd":"my_submission","a6aa3a40":"Model"}}