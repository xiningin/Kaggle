{"cell_type":{"3f9a6d33":"code","0e587e34":"code","0b2ffd82":"code","bd6302ec":"code","e1364179":"code","aa3c1cc5":"code","b298baac":"code","1441b602":"code","be492eec":"code","11b7b8f5":"code","5a648e1e":"code","4c6e80a6":"code","a31e5641":"code","ff321ce9":"code","36ba5e93":"code","739f9a73":"code","66d2cf1f":"code","862993fb":"code","567318ad":"code","8c3308ca":"code","366f99bc":"code","4de4107e":"code","1096c164":"code","1eb1bd74":"code","6e132cb3":"code","d11794bf":"code","a79ac5ca":"code","29adfee8":"code","c6c38888":"code","cc6314d0":"code","aacd8153":"code","c7575667":"code","a0732d41":"code","30c2be73":"code","98ba45cf":"code","33ba68ef":"code","b0d85829":"code","dd07cdca":"code","804d1131":"code","6dc4aec9":"code","50d4a354":"markdown","10fd3944":"markdown","0d2319b7":"markdown","a5ce13c6":"markdown","1bc91e5c":"markdown","ef9a4237":"markdown","564e3819":"markdown","a3bbd073":"markdown","be73dcff":"markdown","910032dd":"markdown","1a30efc2":"markdown","2d6d25f2":"markdown","c23488fe":"markdown"},"source":{"3f9a6d33":"# Setup feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.time_series.ex6 import *\n\n# Setup notebook\nfrom pathlib import Path\nimport ipywidgets as widgets\nfrom learntools.time_series.style import *  # plot style settings\nfrom learntools.time_series.utils import (create_multistep_example,\n                                          load_multistep_data,\n                                          make_lags,\n                                          make_multistep_target,\n                                          plot_multistep)\n\nimport time\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.multioutput import RegressorChain\nfrom sklearn.preprocessing import LabelEncoder\nfrom xgboost import XGBRegressor\n\n\ncomp_dir = Path('..\/input\/store-sales-time-series-forecasting')\n\nstore_sales = pd.read_csv(\n    comp_dir \/ 'train.csv',\n    usecols=['store_nbr', 'family', 'date', 'sales', 'onpromotion'],\n    dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'sales': 'float32',\n        'onpromotion': 'uint32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\nstore_sales['date'] = store_sales.date.dt.to_period('D')\nstore_sales = store_sales.set_index(['store_nbr', 'family', 'date']).sort_index()","0e587e34":"store_sales","0b2ffd82":"family_sales = (\n    store_sales\n    .groupby(['family', 'date'])\n    .mean()\n    .unstack('family')\n    .loc['2017']\n)\n\nfamily_sales","bd6302ec":"test = pd.read_csv(\n    comp_dir \/ 'test.csv',\n    dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'onpromotion': 'uint32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\n\ntest['date'] = test.date.dt.to_period('D')\ntest = test.set_index(['store_nbr', 'family', 'date']).sort_index()\n\ntest","e1364179":"datasets = load_multistep_data()\n\ndata_tabs = widgets.Tab([widgets.Output() for _ in enumerate(datasets)])\nfor i, df in enumerate(datasets):\n    data_tabs.set_title(i, f'Dataset {i+1}')\n    with data_tabs.children[i]:\n        display(df)\n\ndisplay(data_tabs)","aa3c1cc5":"# YOUR CODE HERE: Match the task to the dataset. Answer 1, 2, or 3.\ntask_a = 2\ntask_b = 1\ntask_c = 3\n\n# Check your answer\nq_1.check()","b298baac":"# Lines below will give you a hint or solution code\nq_1.hint()\n#q_1.solution()","1441b602":"print(\"Training Data\", \"\\n\" + \"-\" * 13 + \"\\n\", store_sales)\nprint(\"\\n\")\nprint(\"Test Data\", \"\\n\" + \"-\" * 9 + \"\\n\", test)","be492eec":"# View the solution (Run this cell to receive credit!)\nq_2.check()","11b7b8f5":"family_sales","5a648e1e":"# YOUR CODE HERE\ny = family_sales.loc[:, 'sales'] # family_sales !!!\n\n# YOUR CODE HERE: Make 4 lag features\nX = make_lags(y, lags=4).dropna()\n\n# YOUR CODE HERE: Make multistep target\ny = make_multistep_target(y, steps=16).dropna()\n\ny, X = y.align(X, join='inner', axis=0)\n\n# Check your answer\nq_3.check()","4c6e80a6":"X","a31e5641":"y","ff321ce9":"# Lines below will give you a hint or solution code\n#q_3.hint()\n#q_3.solution()","36ba5e93":"le = LabelEncoder()\n\nX = (X\n    .stack('family')  # wide to long\n    .reset_index('family')  # convert index to column\n    .assign(family=lambda x: le.fit_transform(x.family))  # label encode\n)\n\ny = y.stack('family')  # wide to long","739f9a73":"X","66d2cf1f":"y","862993fb":"from sklearn.multioutput import RegressorChain\n\n# YOUR CODE HERE\nmodel = RegressorChain(base_estimator=XGBRegressor())\n\n# Check your answer\nq_4.check()","567318ad":"# Lines below will give you a hint or solution code\n#q_4.hint()\n#q_4.solution()","8c3308ca":"model","366f99bc":"%%time\n\nmodel.fit(X, y)\n\ny_pred = pd.DataFrame(\n    model.predict(X),\n    index=y.index,\n    columns=y.columns,\n).clip(0.0)","4de4107e":"y_pred","1096c164":"FAMILY = 'BEAUTY'\nSTART = '2017-04-01' # <--- ???\nEVERY = 16\n\ny_pred_ = y_pred.xs(FAMILY, level='family', axis=0).loc[START:]\ny_ = family_sales.loc[START:, 'sales'].loc[:, FAMILY]\n\nfig, ax = plt.subplots(1, 1, figsize=(16, 9))\nax = y_.plot(**plot_params, ax=ax, alpha=0.9)\nax = plot_multistep(y_pred_, ax=ax, every=EVERY)\n_ = ax.legend([FAMILY, FAMILY + ' Forecast'])","1eb1bd74":"FAMILY = 'BEVERAGES'\nSTART = '2017-04-01'\nEVERY = 16\n\ny_pred_ = y_pred.xs(FAMILY, level='family', axis=0).loc[START:]\ny_ = family_sales.loc[START:, 'sales'].loc[:, FAMILY]\n\nfig, ax = plt.subplots(1, 1, figsize=(16, 9))\nax = y_.plot(**plot_params, ax=ax, alpha=0.9)\nax = plot_multistep(y_pred_, ax=ax, every=EVERY)\n_ = ax.legend([FAMILY, FAMILY + ' Forecast'])","6e132cb3":"FAMILY = 'SCHOOL AND OFFICE SUPPLIES'\nSTART = '2017-04-01' \nEVERY = 16\n\ny_pred_ = y_pred.xs(FAMILY, level='family', axis=0).loc[START:]\ny_ = family_sales.loc[START:, 'sales'].loc[:, FAMILY]\n\nfig, ax = plt.subplots(1, 1, figsize=(16, 9))\nax = y_.plot(**plot_params, ax=ax, alpha=0.9)\nax = plot_multistep(y_pred_, ax=ax, every=EVERY)\n_ = ax.legend([FAMILY, FAMILY + ' Forecast'])","d11794bf":"store_sales[store_sales.index.get_level_values('date') >= '2017-04-01']","a79ac5ca":"%%time \n\ny = store_sales[store_sales.index.get_level_values('date') >= '2017-04-01'].loc[:, 'sales'] \n\nX = make_lags(y, lags=4).dropna()\ny = make_multistep_target(y, steps=16).dropna()\n\ny, X = y.align(X, join='inner', axis=0)","29adfee8":"X","c6c38888":"y","cc6314d0":"#X#.reset_index('family').assign(family=lambda x: le.fit_transform(x.family))","aacd8153":"%%time \n\nle = LabelEncoder()\n\nX = (X #.stack('family')  # wide to long\n    .reset_index('family')  # convert index to column\n    .assign(family=lambda x: le.fit_transform(x.family))  # label encode\n)\n\n#y = y.stack('family')  # wide to long","c7575667":"X","a0732d41":"y","30c2be73":"model = RegressorChain(base_estimator=XGBRegressor())\nmodel","98ba45cf":"%%time\n\nmodel.fit(X, y)\n\ny_pred = pd.DataFrame(\n    model.predict(X),\n    index=y.index,\n    columns=y.columns,\n).clip(0.0)\n\ny_pred","33ba68ef":"y","b0d85829":"y","dd07cdca":"y_pred.xs(FAMILY, level='family', axis=0).xs(STORE_NBR, level='store_nbr', axis=0).loc[START:]","804d1131":"store_sales['sales'].xs(FAMILY, level='family', axis=0).xs(STORE_NBR, level='store_nbr', axis=0).loc[START:]","6dc4aec9":"STORE_NBR = '1'\nFAMILY = 'BEAUTY'\nSTART = '2017-04-01' # <--- ???\nEVERY = 16\n\ny_pred_ = y_pred.xs(FAMILY, level='family', axis=0).xs(STORE_NBR, level='store_nbr', axis=0).loc[START:]\ny_ = store_sales['sales'].xs(FAMILY, level='family', axis=0).xs(STORE_NBR, level='store_nbr', axis=0).loc[START:]\n\nfig, ax = plt.subplots(1, 1, figsize=(16, 9))\nax = y_.plot(**plot_params, ax=ax, alpha=0.9)\nax = plot_multistep(y_pred_, ax=ax, every=EVERY)\n_ = ax.legend([FAMILY, FAMILY + ' Forecast'])","50d4a354":"# Introduction #\n\nRun this cell to set everything up!","10fd3944":"And use this code to see a sample of the 16-step predictions this model makes on the training data.","0d2319b7":"# 2) Identify the forecasting task for *Store Sales* competition\n\nTry to identify the *forecast origin* and the *forecast horizon*. How many steps are within the forecast horizon? What is the lead time for the forecast?\n\nRun this cell after you've thought about your answer.","a5ce13c6":"-------------------------------------------------------------------------------\n\nIn the tutorial, we saw how to forecast with the MultiOutput and Direct strategies on the *Flu Trends* series. Now, you'll apply the DirRec strategy to the multiple time series of *Store Sales*.\n\nMake sure you've successfully completed the previous exercise and then run this cell to prepare the data for XGBoost.","1bc91e5c":"-------------------------------------------------------------------------------\n\nIn the tutorial we saw how to create a multistep dataset for a single time series. Fortunately, we can use exactly the same procedure for datasets of multiple series.\n\n# 3) Create multistep dataset for *Store Sales*\n\nCreate targets suitable for the *Store Sales* forecasting task. Use 4 days of lag features. Drop any missing values from both targets and features.","ef9a4237":"### Forecast with the DirRec strategy on store_sales","564e3819":"# 1) Match description to dataset\n\nCan you match each task to the appropriate dataset?","a3bbd073":"**This notebook is an exercise in the [Time Series](https:\/\/www.kaggle.com\/learn\/time-series) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/ryanholbrook\/forecasting-with-machine-learning).**\n\n---\n","be73dcff":"# 4) Forecast with the DirRec strategy\n\nInstatiate a model that applies the DirRec strategy to XGBoost.","910032dd":"-------------------------------------------------------------------------------\n\nLook at the time indexes of the training and test sets. From this information, can you identify the forecasting task for *Store Sales*?","1a30efc2":"Run this cell if you'd like to train this model.","2d6d25f2":"-------------------------------------------------------------------------------\n\nConsider the following three forecasting tasks:\n\na. 3-step forecast using 4 lag features with a 2-step lead time<br>\nb. 1-step forecast using 3 lag features with a 1-step lead time<br>\nc. 3-step forecast using 4 lag features with a 1-step lead time<br>\n\nRun the next cell to see three datasets, each representing one of the tasks above.","c23488fe":"# Next Steps #\n\nCongratulations! You've completed Kaggle's *Time Series* course. If you haven't already, join our companion competition: [Store Sales - Time Series Forecasting](https:\/\/www.kaggle.com\/c\/29781) and apply the skills you've learned.\n\nFor inspiration, check out Kaggle's previous forecasting competitions. Studying winning competition solutions is a great way to upgrade your skills.\n\n- [**Corporaci\u00f3n Favorita**](https:\/\/www.kaggle.com\/c\/favorita-grocery-sales-forecasting): the competition *Store Sales* is derived from.\n- [**Rossmann Store Sales**](https:\/\/www.kaggle.com\/c\/rossmann-store-sales)\n- [**Wikipedia Web Traffic**](https:\/\/www.kaggle.com\/c\/web-traffic-time-series-forecasting\/)\n- [**Walmart Store Sales**](https:\/\/www.kaggle.com\/c\/walmart-recruiting-store-sales-forecasting)\n- [**Walmart Sales in Stormy Weather**](https:\/\/www.kaggle.com\/c\/walmart-recruiting-sales-in-stormy-weather)\n- [**M5 Forecasting - Accuracy**](https:\/\/www.kaggle.com\/c\/m5-forecasting-accuracy)\n\n# References #\n\nHere are some great resources you might like to consult for more on time series and forecasting. They all played a part in shaping this course:\n\n- *Learnings from Kaggle's forecasting competitions*, an article by Casper Solheim Bojer and Jens Peder Meldgaard.\n- *Forecasting: Principles and Practice*, a book by Rob J Hyndmann and George Athanasopoulos.\n- *Practical Time Series Forecasting with R*, a book by Galit Shmueli and Kenneth C. Lichtendahl Jr.\n- *Time Series Analysis and Its Applications*, a book by Robert H. Shumway and David S. Stoffer.\n- *Machine learning strategies for time series forecasting*, an article by Gianluca Bontempi, Souhaib Ben Taieb, and Yann-Ae\u0308l Le Borgne.\n- *On the use of cross-validation for time series predictor evaluation*, an article by Christoph Bergmeir and Jos\u00e9 M. Ben\u00edtez.\n"}}