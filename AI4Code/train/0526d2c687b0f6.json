{"cell_type":{"3adc74db":"code","d5d525e5":"code","2e802057":"code","5f705c77":"code","8cc4d403":"code","82530d33":"code","77bc7236":"markdown","378eb99c":"markdown","06e1a104":"markdown"},"source":{"3adc74db":"import numpy as np\nfrom numpy import pi, sin, cos\nimport matplotlib.pyplot as pp\n\n%matplotlib inline","d5d525e5":"def integrate(func, x, dx):\n    return sum(func(x)) * dx\n\n\ndef A0(func, x, dx, L):\n    return 2.0 \/ L * integrate(func, x, dx)\n\n\ndef A(func, k, x, dx, L):\n    return 2.0 \/ L * sum(func(x) * cos(2.0 * pi * k \/ L * x)) * dx\n\n\ndef B(func, k, x, dx, L):\n    return 2.0 \/ L * sum(func(x) * sin(2.0 * pi * k \/ L * x)) * dx\n\n\ndef backFT(a0, a, b, L):\n    def inner(x):\n        a_sum = .0\n        b_sum = .0\n        for i, v in enumerate(a):\n            a_sum += a[i] * cos(2.0 * pi \/ L * (i + 1) * x)\n            b_sum += b[i] * sin(2.0 * pi \/ L * (i + 1) * x)\n        return a0 \/ 2 + a_sum + b_sum\n    return inner","2e802057":"def f(x):\n    return sin(0.5 * x) + cos(2.0 * x) - 1.5 * cos(4.0 * x)\n\nf = np.vectorize(f)  ","5f705c77":"dx = 0.01\nx = np.arange(-pi, pi, dx)\nL = 2.0 * pi\nN = 5\n\ndef plot_ft_and_spectrum(func, x, dx, L, N):\n    a = []\n    b = []\n    for i in range(1, N):\n        a.append(A(func, i, x, dx, L))\n        b.append(B(func, i, x, dx, L))\n\n    back_ft = backFT(A0(func, x, dx, L), a, b, L)\n\n    error = sum((back_ft(x) - func(x)) * (back_ft(x) - func(x))) \/ len(x)\n    print(f\"Error: ${error}\")\n\n    pp.plot(x, func(x))\n    pp.plot(x, back_ft(x))\n    pp.grid(True)\n    pp.show()\n\n    pp.plot(range(1, N), a, 'rx')\n    pp.plot(range(1, N), b, 'bo')\n    pp.vlines(range(1, N), [0], a, colors='r')\n    pp.vlines(range(1, N), [0], b, colors='b')\n    pp.grid(True)\n    pp.show()\n    \nplot_ft_and_spectrum(f, x, dx, L, N)","8cc4d403":"def step(x):\n    return .0 if x < 0 else 1.\n\nstep = np.vectorize(step)\n\ndx = 0.01\nx = np.arange(-5., 5., dx)\nL = 2.0 * 5\n\nplot_ft_and_spectrum(step, x, dx, L, N=20)","82530d33":"def step_up_down(x):\n    return step(x + 1) - step(x - 1)\n\nstep_up_down = np.vectorize(step_up_down)\n\nplot_ft_and_spectrum(step_up_down, x, dx, L, N=20)","77bc7236":"# Hello Fourier Transform","378eb99c":"## Step up-down function","06e1a104":"## Step function"}}