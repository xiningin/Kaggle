{"cell_type":{"a9a65e3a":"code","1cbdbbb6":"code","f02faafa":"code","31811168":"code","7cd3255f":"code","0ff6da11":"code","6724d751":"code","25130402":"code","9d30e39c":"code","4fff8334":"code","2f547937":"code","7fc52ada":"code","2f3bf038":"code","42c21d8c":"code","625b5d2b":"code","ca2c144a":"code","a2785dfc":"code","4cb1e6d9":"code","b7bf91ab":"code","7694defc":"code","7b798b0e":"code","8ab361e6":"code","74eee2a6":"markdown","851e481a":"markdown","30d85942":"markdown","fc9def24":"markdown","7b0111b6":"markdown","841e302d":"markdown","507420ea":"markdown","b5e9869f":"markdown","58a7e489":"markdown","7bd2f4d8":"markdown","b3eceaaf":"markdown"},"source":{"a9a65e3a":"!pip install ..\/input\/python-datatable\/datatable-0.11.0-cp37-cp37m-manylinux2010_x86_64.whl > \/dev\/null 2>&1","1cbdbbb6":"import os\nimport gc\nimport sys\nimport time\nimport tqdm\nimport random\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport datatable as dt\nimport matplotlib.pyplot as plt\nplt.style.use('tableau-colorblind10')","f02faafa":"folder_path = '..\/input\/jane-street-market-prediction\/'\ntrain_data = dt.fread(folder_path + 'train.csv').to_pandas()\nfeatures = dt.fread(folder_path + 'features.csv').to_pandas()","31811168":"# first I need the features with highest nan count\ntop_nan_features_vals = train_data.isna().sum().sort_values(ascending=False)\ntop_nan_features = top_nan_features_vals.index","7cd3255f":"date_feature_nan = train_data.groupby('date').apply(lambda x: x.isna().sum())","0ff6da11":"date_feature_nan[top_nan_features[:10]].plot(figsize=(12, 6), subplots=True);","6724d751":"features_and_date = list(top_nan_features[:10]) + ['date']\ntrain_data[features_and_date].query('date == 0').plot(subplots=True, figsize=(12, 8));","25130402":"train_data[features_and_date].query('date == 1').plot(subplots=True, figsize=(12, 8));","9d30e39c":"train_data[features_and_date].query('date == 2').plot(subplots=True, figsize=(12, 8));","4fff8334":"train_data[features_and_date].query('date == 3').plot(subplots=True, figsize=(12, 8));","2f547937":"train_data[features_and_date].query('date == 4').plot(subplots=True, figsize=(12, 8));","7fc52ada":"train_data[features_and_date].query('date == 5').plot(subplots=True, figsize=(12, 8));","2f3bf038":"top_nan_features_vals[:60]","42c21d8c":"features_and_date = list(top_nan_features[:60]) + ['date']\ntrain_data[features_and_date].query('date == 0').plot(subplots=True, figsize=(12, 8), legend=False);","625b5d2b":"train_data[features_and_date].query('date == 1').plot(subplots=True, figsize=(12, 8), legend=False);","ca2c144a":"train_data[features_and_date].query('date == 136').plot(subplots=True, figsize=(12, 8), legend=False);","a2785dfc":"from sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.impute import SimpleImputer\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#define first cluster features and fill na with strategy (ffill)\ncluster_1_features = top_nan_features[:14]\ntrain_data.loc[:, cluster_1_features] = train_data.loc[:, cluster_1_features].fillna(method='ffill').fillna(0)\n\n# define pipeline\nsteps = [('scaler', MinMaxScaler()), ('pca', PCA(random_state=42))]\npipeline = Pipeline(steps=steps)\n\npipeline.fit(train_data.loc[:, cluster_1_features])\n\nplt.figure(figsize=(10, 6))\nplt.plot(list(range(1, len(cluster_1_features)+1)), pipeline['pca'].explained_variance_ratio_.cumsum());\nplt.xlabel('No. of Features')\nplt.ylabel('Explained Variance')\nplt.axvline(5, color='r', linestyle='--');","4cb1e6d9":"import numpy as np\n\n# second cluster\ncluster_2_features = top_nan_features[14:31]\n\ntrain_data.loc[:, cluster_2_features] = train_data.loc[:, cluster_2_features].fillna(method='ffill').fillna(0)\n\n# define pipeline\nsteps = [('scaler', MinMaxScaler()), ('pca', PCA(random_state=42))]\npipeline = Pipeline(steps=steps)\n\npipeline.fit(train_data.loc[:, cluster_2_features])\n\nplt.figure(figsize=(10, 6))\nplt.plot(list(range(1, len(cluster_2_features)+1)), pipeline['pca'].explained_variance_ratio_.cumsum());\nplt.xlabel('No. of Features')\nplt.ylabel('Explained Variance')\nplt.axvline(7, color='r', linestyle='--');","b7bf91ab":"# third cluster\ncluster_3_features = top_nan_features[31:47]\n\ntrain_data.loc[:, cluster_3_features] = train_data.loc[:, cluster_3_features].fillna(method='ffill').fillna(0)\n\n# define pipeline\nsteps = [('scaler', MinMaxScaler()), ('pca', PCA(random_state=42))]\npipeline = Pipeline(steps=steps)\n\npipeline.fit(train_data.loc[:, cluster_3_features])\n\nplt.figure(figsize=(10, 6))\nplt.plot(list(range(1, len(cluster_3_features)+1)), pipeline['pca'].explained_variance_ratio_.cumsum());\nplt.xlabel('No. of Features')\nplt.ylabel('Explained Variance')\nplt.axvline(7, color='r', linestyle='--');","7694defc":"# fourth cluster\ncluster_4_features = top_nan_features[47:63]\n\ntrain_data.loc[:, cluster_4_features] = train_data.loc[:, cluster_4_features].fillna(method='ffill').fillna(0)\n\n# define pipeline\nsteps = [('scaler', MinMaxScaler()), ('pca', PCA(random_state=42))]\npipeline = Pipeline(steps=steps)\n\npipeline.fit(train_data.loc[:, cluster_4_features])\n\nplt.figure(figsize=(10, 6))\nplt.plot(list(range(1, len(cluster_4_features)+1)), pipeline['pca'].explained_variance_ratio_.cumsum());\nplt.xlabel('No. of Features')\nplt.ylabel('Explained Variance')\nplt.axvline(6, color='r', linestyle='--');","7b798b0e":"# checking out the last features with NaNs\nfeatures_and_date = list(top_nan_features[63:87]) + ['date', 'ts_id']\ntrain_data[features_and_date].query('date == 0 and ts_id > 3000 and ts_id < 4000').plot(subplots=True, figsize=(12, 8), legend=False);","8ab361e6":"# fifth cluster\ncluster_5_features = top_nan_features[63:87]\n\ntrain_data.loc[:, cluster_5_features] = train_data.loc[:, cluster_5_features].fillna(method='ffill').fillna(0)\n\n# define pipeline\nsteps = [('scaler', MinMaxScaler()), ('pca', PCA(random_state=42))]\npipeline = Pipeline(steps=steps)\n\npipeline.fit(train_data.loc[:, cluster_5_features])\n\nplt.figure(figsize=(10, 6))\nplt.plot(list(range(1, len(cluster_5_features)+1)), pipeline['pca'].explained_variance_ratio_.cumsum());\nplt.xlabel('No. of Features')\nplt.ylabel('Explained Variance')\nplt.axvline(7, color='r', linestyle='--');","74eee2a6":"**Now maybe these extracted features could be used along all features or along the non NaN features.**","851e481a":"7 components in the second cluster is suitable for explaining 95% of the variance.","30d85942":"If we just look into the number of missing values we can see that features cluster with each other. And If we visualize them with this order we can see the clusters clearly.","fc9def24":"We can see by visualizaing the features with top 10 NaN value counts in the first 5 days they show a consistent pattern of missing values which is always present in the beginning of the day, and then another one in the beginning of the last third.\n\nIf we keep visualizing different dates we would find the same pattern happening. But why does that happen? Is it just noise or is this some meaningful aspect of the data?\n\nLet's take a full of all the features missing data pattern over the first day to get a clearer picture.","7b0111b6":"# Testing PCA of feature clusters\n\nI'll define the clusters based on similar patterns in NaN values, and I'll first test the idea with the top 14 features.","841e302d":"We can see that among these features, some are nearly identical, which could merit the use of PCA.","507420ea":"7 components in the fourth cluster is almost suitable for explaining around 94% of the variance.","b5e9869f":"6 components in the fourth cluster is almost suitable for explaining around 94% of the variance.","58a7e489":"7 components in the third cluster is suitable for explaining 95% of the variance.","7bd2f4d8":"We can use 5 features to explain more than 90% of the variance of the original cluster.","b3eceaaf":"# Why do features miss values together?"}}