{"cell_type":{"ff30d685":"code","15e9b18a":"code","257049cb":"code","c76c795e":"code","155b1b50":"code","b77cacfb":"code","87864a4f":"code","e25611cf":"code","4f03b5d8":"code","d4536746":"code","949b67bc":"code","80974b6a":"code","b3690f93":"code","4ed04542":"code","278b9a63":"code","82d9544b":"code","210b8e38":"markdown","ae0fc9cc":"markdown","918c0c5f":"markdown","295cfb08":"markdown","ba45ab05":"markdown","fd211386":"markdown","52c4fe93":"markdown","bb08d618":"markdown","235a21c5":"markdown","dba7963e":"markdown","766aecd9":"markdown","fa8df05e":"markdown","72d38dd0":"markdown","56a208f8":"markdown","033fda36":"markdown","bf5a9bc6":"markdown","ca0c1328":"markdown"},"source":{"ff30d685":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","15e9b18a":"import pandas as pd\nimport time\nfrom pandasql import sqldf \nimport plotly.express as px \nimport datetime\nimport plotly.graph_objects as go\n\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt","257049cb":"\n### used to iteratively make word clouds for each rating level\ndef cloudMaker(text): \n    wordcloud = WordCloud(\n        width = 500,\n        height = 500,\n        background_color = 'white',\n        stopwords = STOPWORDS).generate(str(text))\n    fig = plt.figure(\n        figsize = (10, 5),\n        facecolor = 'k',\n        edgecolor = 'k')\n    plt.imshow(wordcloud, interpolation = 'bilinear')\n    plt.axis('off')\n    plt.tight_layout(pad=0)\n    plt.show()\n\n# for calling cloud maker function for each rating level \ndef textValues(split_text): \n    for rating in split_text: \n        cloudMaker(rating.one_liner.values)\n\n# for iteratively making clouds \ndef cloudMakers(array): \n    for clouds in array: \n        textValues(clouds)\n        \n# for splitting ratings into individual rating levels \ndef star_splitter(cdf): \n    \n    ratings = [1,2,3,4,5]\n    df = cdf \n    index = 0\n    split_stars = []\n    \n    for rating in ratings: \n        stars = ratings[index]\n        query = \"SELECT one_liner from %s WHERE stars = %d\" %(df, stars)\n        temp_df = sqldf(query)\n        split_stars.append(temp_df)\n        index += 1\n    return split_stars \n\n# for making all the graphs \ndef graphsMaker(review_file): \n    cleaned_reviews = pd.read_csv(review_file) \n    cleaned_reviews.dtypes\n    rating_query = sqldf(\"SELECT month, COUNT(stars) AS num_reviews, AVG(stars) AS avg_rating from cleaned_reviews GROUP BY month\")\n    rating_query.head()\n    rating_table = go.Figure(data=[go.Table(header=dict(values=['Month', 'Total Reviews', 'Average Rating']),\n                     cells=dict(values=[rating_query['month'], rating_query['num_reviews'],rating_query['avg_rating']]))\n                         ])\n    rating_table.show()\n    \n    rating_query2 = sqldf(\"SELECT month, stars, COUNT(stars) AS num_reviews from cleaned_reviews GROUP BY month, stars\")\n    rating_query2.head()\n\n\n    ratings_ot = px.line(rating_query2, x=\"month\", y=\"num_reviews\", title='Ratings Over Time', color='stars')\n    ratings_ot.add_trace(go.Scatter(x=rating_query.month, y=rating_query.num_reviews,\n                        mode='lines',\n                        name='Total Number of Ratings', line=dict(color='orange', width=1.5, dash='dash')))\n    ratings_ot.show()\n\n    avg_ratings = px.line(rating_query, x=\"month\", y=\"avg_rating\", title='Average Rating Over Time')\n    avg_ratings.show()\n\n    one_stars = sqldf(\"SELECT month, COUNT(stars) AS one_count from cleaned_reviews WHERE stars='1' GROUP BY month\")\n    two_stars = sqldf(\"SELECT month, COUNT(stars) AS two_count from cleaned_reviews WHERE stars='2' GROUP BY month\")\n    three_stars = sqldf(\"SELECT month, COUNT(stars) AS three_count  from cleaned_reviews WHERE stars='3' GROUP BY month\")\n    four_stars = sqldf(\"SELECT month, COUNT(stars) AS four_count from cleaned_reviews WHERE stars='4' GROUP BY month\")\n    five_stars = sqldf(\"SELECT month, COUNT(stars) AS five_count  from cleaned_reviews WHERE stars='5' GROUP BY month\")\n\n    join1 = sqldf(\"SELECT  A.month, A.one_count, B.two_count from one_stars AS A LEFT JOIN two_stars AS B on A.month = B.month \")\n    join2 = sqldf(\"SELECT A.*,  B.three_count from join1 AS A LEFT JOIN three_stars AS B on A.month = B.month \")\n    join3 = sqldf(\"SELECT A.*,  B.four_count from join2 AS A LEFT JOIN four_stars AS B on A.month = B.month \")\n    join4 = sqldf(\"SELECT A.*,  B.five_count from join3 AS A LEFT JOIN five_stars AS B on A.month = B.month \")\n\n    columns_to_sum = ['one_count', 'two_count', 'three_count', 'four_count', 'five_count']\n    join4[\"sum_count\"] = join4[columns_to_sum].sum(axis=1)\n\n    join4['one_percent'] = round(join4.one_count \/ join4.sum_count,2)\n    join4['two_percent'] = round(join4.two_count \/ join4.sum_count,2)\n    join4['three_percent'] = round(join4.three_count \/ join4.sum_count,2)\n    join4['four_percent'] = round(join4.four_count \/ join4.sum_count,2)\n    join4['five_percent'] = round(join4.five_count \/ join4.sum_count,2)\n\n    rating_percent = sqldf(\"SELECT month, sum_count, one_percent, two_percent, three_percent, four_percent, five_percent from join4\")\n    rating_percent.fillna(0, inplace=True)\n\n    ratings_dist = cleaned_reviews.stars\n\n    fig = px.histogram(ratings_dist, x=\"stars\", title=\"Ratings Distribution\")\n    fig.show()","c76c795e":"doordash_df = pd.read_csv('..\/input\/chow-sentiment\/0.csv')\npostmates_df = pd.read_csv('..\/input\/chow-sentiment\/1.csv')\nubereats_df = pd.read_csv('..\/input\/chow-sentiment\/full_reviews.csv')\nchowbus_df = pd.read_csv(\"..\/input\/chow-sentiment\/full_reviews.csv\")","155b1b50":"doordash_df['company'] = 'doordash'\npostmates_df['company'] = 'postmates'\nubereats_df['company'] = 'ubereats'\nchowbus_df['company'] = 'chowbus'","b77cacfb":"\n\nchowbus_avg = sqldf(\"SELECT month, AVG(stars) as avg_rating, company from chowbus_df GROUP BY month\")\ndoordash_avg = sqldf(\"SELECT month, AVG(stars) as avg_rating, company from doordash_df GROUP BY month\")\npostmates_avg = sqldf(\"SELECT month, AVG(stars) as avg_rating, stars, company from postmates_df GROUP BY month\")\nubereats_avg = sqldf(\"SELECT month, AVG(stars) as avg_rating, stars, company from ubereats_df GROUP BY month\")","87864a4f":"fig = px.line(chowbus_avg, x=\"month\", y=\"avg_rating\", title='Chowbus Ratings Over Time')\nfig.add_trace(go.Scatter(x=doordash_avg.month, y=doordash_avg.avg_rating,\n                    mode='lines',\n                    name='doordash', line=dict(color='red', width=1.5)))\nfig.add_trace(go.Scatter(x=postmates_avg.month, y=postmates_avg.avg_rating,\n                    mode='lines',\n                    name='postmates', line=dict(color='orange', width=1.5)))\nfig.add_trace(go.Scatter(x=ubereats_avg.month, y=ubereats_avg.avg_rating,\n                    mode='lines',\n                    name='ubereats', line=dict(color='black', width=1.5)))\nfig.show()","e25611cf":"graphsMaker('..\/input\/chow-sentiment\/full_reviews.csv')","4f03b5d8":"graphsMaker('..\/input\/chow-sentiment\/0.csv')","d4536746":"graphsMaker('..\/input\/chow-sentiment\/1.csv')","949b67bc":"graphsMaker('..\/input\/chow-sentiment\/2.csv')","80974b6a":"doordash_split = star_splitter('doordash_df')\npostmates_split = star_splitter('postmates_df')\nubereats_split = star_splitter('ubereats_df')\nchowbus_split = star_splitter('chowbus_df')","b3690f93":"textValues(chowbus_split)","4ed04542":"textValues(doordash_split)","278b9a63":"textValues(postmates_split)","82d9544b":"textValues(ubereats_split)","210b8e38":"# Food Delivery Apps Written Reviews EDA \n\nIn this notebook we perform EDAs and generate word clouds on written reviews data from Chowbus, Doordash, Postmates, and UberEats. \n\nNote that this is just to get a general sense of what issues could be influencing each rating. They are not necessarily representative of accurate behavior because this is scraped data that isn't a full dataset. \n\nThere is heavy sample bias especially among competitors. \n\nChowbus written reviews are the only ones fully scraped (~600). \n\nThe rest are a small percentage (1000 each) of their respective total written reviews dataset. ","ae0fc9cc":"# Postmates EDA","918c0c5f":"Now we just load the data onto one Time series plot using plotly. ","295cfb08":"### Doordash Word Clouds \n\nThe word clouds are ordered from 1-5. So the first displayed one is 1-star and the last displayed is 5-star. ","ba45ab05":"# Chowbus EDA","fd211386":"# UberEats EDA ","52c4fe93":"### Chowbus Word Clouds \n\nThe word clouds are ordered from 1-5. So the first displayed one is 1-star and the last displayed is 5-star. ","bb08d618":"First, we need to split the ratings into each rating each level. \n\nThat way we can get word clouds for each level of rating. \n\nThat will help us get a general sentiment of what words\/issues are being brought up the most in good or bad reviews. ","235a21c5":"# Doordash EDA ","dba7963e":"### UberEats Word Clouds \n\nThe word clouds are ordered from 1-5. So the first displayed one is 1-star and the last displayed is 5-star. ","766aecd9":"### We want to make one graph to see how average ratings over time compare among food delivery services. \n","fa8df05e":"### Postmates Word Clouds \n\nThe word clouds are ordered from 1-5. So the first displayed one is 1-star and the last displayed is 5-star. ","72d38dd0":"We load our dataframes in. ","56a208f8":"# Word Clouds ","033fda36":"Then we make data frames using pandaSQL to get the average ratings grouped by month for each company. ","bf5a9bc6":"We make a company column so that we can query for specific company data. ","ca0c1328":"Now let's explore the more granular EDAs of each company by calling the graphsMaker function we made. "}}