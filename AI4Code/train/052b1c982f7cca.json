{"cell_type":{"14cf5eb7":"code","bc4d9978":"code","e5e9d422":"code","e3e4e80c":"code","efc3d6b0":"code","3d85cfff":"code","ffcf5870":"code","3c584849":"code","de92bbff":"code","1c157414":"code","f6ae7d14":"code","ca9171ba":"code","fb1bc608":"code","815731f4":"code","8299bdb7":"code","faf01979":"code","e1d35cb9":"code","ca7e1fa0":"code","2fd51cad":"code","358f70d7":"code","7db1aef8":"code","60128a76":"code","7d31553b":"code","cb568b7d":"code","2897e47a":"code","a977891c":"code","8608df6a":"code","0d147ff3":"code","9d2bd2da":"code","69663260":"code","9ede14e4":"code","688ab328":"code","a3c5fabd":"code","57a0e01c":"code","cbef8dc1":"code","7a863cfc":"markdown","f18ff649":"markdown","991ac4fe":"markdown","cb17efe1":"markdown"},"source":{"14cf5eb7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc4d9978":"import numpy as np\nimport pandas as pd\nimport matplotlib as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report","e5e9d422":"#1. Reading the train data\ndata_train = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')","e3e4e80c":"data_train.head()","efc3d6b0":"data_train.info()","3d85cfff":"data_train.describe()","ffcf5870":"data_train[\"Region_Code\"].unique()","3c584849":"#2. Cleaning data\ndata_train.isnull().sum()\n# No null value in the dataset","de92bbff":"#3. Processing data\n#gender\ngender_map = {'Female':1, 'Male':2}\ndata_train['Gender'] = data_train['Gender'].map(gender_map)\ndata_train.head()","1c157414":"data_train[\"Vehicle_Age\"].unique()","f6ae7d14":"#Vehicle_Age\nvehicle_age_map = {'< 1 Year':1, '1-2 Year':2, '> 2 Years':3}\ndata_train['Vehicle_Age'] = data_train['Vehicle_Age'].map(vehicle_age_map)\ndata_train.head()","ca9171ba":"data_train[\"Vehicle_Damage\"].unique()","fb1bc608":"#Vehicle_Damage\nvehicle_damage_map = {'Yes':1, 'No':2}\ndata_train['Vehicle_Damage'] = data_train['Vehicle_Damage'].map(vehicle_damage_map)\ndata_train.head()","815731f4":"#4.Determining x and y\nx=data_train[[\"Gender\", \"Age\", \"Driving_License\", \"Region_Code\",\"Previously_Insured\", \"Vehicle_Age\", \"Vehicle_Damage\", \"Annual_Premium\", \"Policy_Sales_Channel\", \"Vintage\" ]]\nx.head()","8299bdb7":"y=data_train[[\"Response\"]]\ny.head()","faf01979":"#5. splitting data into train and test\nx_train, x_test, y_train, y_test=train_test_split(x, y, random_state=6)","e1d35cb9":"#standardizing x data\ntransfer = StandardScaler()\nx_train = transfer.fit_transform(x_train)\nx_test = transfer.transform(x_test)","ca7e1fa0":"#6. Using different machine learning methods to test the forcast accuracy\n#Using Random Forest\nestimator=RandomForestClassifier(n_estimators=10, criterion=\"entropy\", max_depth=8, bootstrap=True, max_features=\"auto\")\nestimator.fit(x_train, y_train)\ny_predict=estimator.predict(x_test)\naccuracy = estimator.score(x_test, y_test)\nprint(\"The accuracy by RandomForest:\\n\", accuracy)","2fd51cad":"#Using KNN\nestimator = KNeighborsClassifier(n_neighbors=3)\nestimator.fit(x_train,y_train)\ny_predict=estimator.predict(x_test)\naccuracy = estimator.score(x_test, y_test)\nprint(accuracy)","358f70d7":"#Using Xgboost\nestimator= XGBClassifier()\nestimator.fit(x_train, y_train)\ny_predict=estimator.predict(x_test)\naccuracy = estimator.score(x_test, y_test)\nprint(\"The accuracy by Xgboost:\\n\", accuracy)","7db1aef8":"#Using Logistic Regression\nestimator = LogisticRegression()\nestimator.fit(x_train, y_train)\ny_predict=estimator.predict(x_test)\naccuracy = estimator.score(x_test, y_test)\nprint(accuracy)\nreport=classification_report(y_test, y_predict, labels=[0, 1])\nprint(report)","60128a76":"#7.Reading the data from test dataset\ndata_test=pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/test.csv')\ndata_test.head()","7d31553b":"#8. Cleaning data\ndata_test.isnull().sum()\n# No null in test data","cb568b7d":"#9. processing data\n#gender\ngender_map = {'Female':1, 'Male':2}\ndata_test['Gender'] = data_test['Gender'].map(gender_map)\ndata_test.head()","2897e47a":"data_test[\"Vehicle_Age\"].unique()","a977891c":"#Vehicle_Age\nvehicle_age_map = {'< 1 Year':1, '1-2 Year':2, '> 2 Years':3}\ndata_test['Vehicle_Age'] = data_test['Vehicle_Age'].map(vehicle_age_map)\ndata_test.head()","8608df6a":"data_test[\"Vehicle_Damage\"].unique()","0d147ff3":"#Vehicle_Damage\nvehicle_damage_map = {'Yes':1, 'No':2}\ndata_test['Vehicle_Damage'] = data_test['Vehicle_Damage'].map(vehicle_damage_map)\ndata_test.head()","9d2bd2da":"#10.Determining x and y\nx_new=data_test[[\"Gender\", \"Age\", \"Driving_License\", \"Region_Code\",\"Previously_Insured\", \"Vehicle_Age\", \"Vehicle_Damage\", \"Annual_Premium\", \"Policy_Sales_Channel\", \"Vintage\" ]]\nx_new.head()","69663260":"x_train1=x\ny_train1=data_train[\"Response\"]\nprint(x_train1.head())\nprint(y_train1.head())","9ede14e4":"##standardizing x data\ntransfer = StandardScaler()\nx_train1 = transfer.fit_transform(x_train1)\nx_new = transfer.transform(x_new)\n#Using logistic regression\nestimator = LogisticRegression()\nestimator.fit(x_train1, y_train1)\ny_predict1=estimator.predict(x_new)\nprint(y_predict1)","688ab328":"#12. Reading the submission data\ndata_sample=pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/sample_submission.csv')\ndata_sample.head()","a3c5fabd":"data_sample[\"Response\"]=y_predict1\ndata_sample[\"Response\"].unique()","57a0e01c":"data_sample","cbef8dc1":"data_sample[\"Response\"].value_counts()","7a863cfc":"Importing the necessary libraries","f18ff649":"The aim of the project is to produce the solution file containing the predicted response of the customer","991ac4fe":"The data_sample is the solution file containing the predicted response of the customer in the column of \"Response\".","cb17efe1":"Logistic Regression shows a high accuracy. We will use Logistic Regression to forcast the responses in test dataset."}}