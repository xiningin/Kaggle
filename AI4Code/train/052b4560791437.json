{"cell_type":{"5f07e11d":"code","80f06e7b":"code","ec74e074":"code","ce593c87":"code","cdc7f401":"code","c3d5133d":"code","2e665ea1":"code","4ee6d4bc":"code","704c130d":"code","b0e91263":"code","12b3c9a0":"code","695349c6":"code","33d80053":"code","7daaf2fa":"code","ee72e00b":"code","844a00d4":"code","3115c657":"code","7d3f4705":"code","5ed7e7ab":"code","600ad53b":"code","97ca74d4":"code","ef176f93":"code","6da0b701":"markdown","ed403dc9":"markdown","90532169":"markdown","f80979e2":"markdown","92c39ccb":"markdown","c5dd511f":"markdown","d3e63743":"markdown","7d4dc3cf":"markdown","fb4b6fcb":"markdown","0b371c74":"markdown","1aa40ed9":"markdown","758e6040":"markdown","04b94da4":"markdown","84af31a4":"markdown","9a534bd7":"markdown","12baef24":"markdown","0e77e553":"markdown","402b87c0":"markdown","b28144dc":"markdown"},"source":{"5f07e11d":"# enumerate() - provides the count as an additional argument \n\nfor count,i in enumerate(range(1,5)):\n    print(count, i*i)","80f06e7b":"# isinstance() - check if the variable or element is instance of specific class\n\nli = [1,2,3] ; print(isinstance(li, list))\ntu = (1,2,3,4) ; print(isinstance(tu, list))\n","ec74e074":"# len() - return the length of iterables, strings, etc.\n\nlen(li)","ce593c87":"# sorted() - return a sorted iterable , with reverser argument False as default\n\nprint(sorted(tu))\nprint(sorted(li, reverse = True))","cdc7f401":"# zip - zip the elements of 2 lists with each other one by one as a tuple. Mostly used in dictionary and dataframe object\n\na = [1,2,3]\nb = ['a','b','c']\n\nprint(list(zip(a,b))) \n\n# Note - to make dictionary using two lists check dictionary file ","c3d5133d":"# any() and all() these functions are part of pandas dataframe.\n\n# isna() - checks if there is Null\/None value in the series\/dataframce \n# any() - check if any of the values matches the criteria\n# all() - check if all of the values matches the criteria\n\nimport pandas as pd\ns = pd.Series([1,2,3,4,None,6])\n\nprint(s.isna().any())\nprint(s.isna().all())","2e665ea1":"# range() - range function create a number array , argument are ( start, stop, stepsize)\n\nprint(list(range(10,20,2))) \nprint(list(range(20,10,-2)))   # allows negative stepsize to reverse\nprint(list(range(1,100,17)))   # only allows integer value in arguments\n","4ee6d4bc":"# min() - return the smallest value element from numerical iterables\n# max() - return the largest value element \n# abs() - return the absolute value , \n# round() - round up or down the numbers, second argument number of decimal need to round\n# sum() - return the sum of the all elements\n\nsample = [25,3,58,1,96,14,8]\n\nprint('smallest number in list : ',min(sample))\nprint('largest number in list : ',max(sample))\nprint('absolute value of -55 is : ',abs(-55))\nprint('sum of the list is :',sum(sample))\n\nprint(round(10.5))      # there is one issue with round as it rounds 9.5 and 10.5 to same 10\nprint(round(9.5))       # hence use cauciously \nprint(round(9.678,2))   # rounding till 2 decimal places\nprint(round(99.678,-1)) # rounding to positive side of the decimal place, works this way as well.","704c130d":"# Simple function which says good morning when we call it.\n#( we are not using return as our function is not return any value)\n\n# defining function -\ndef greet():\n    print('Good Morning')\n\n# calling function -\ngreet()\n\n# defining new function with 1 argument as name\n\ndef greet_me(name):\n    print(f'Good morning {name} , your coffee is on table.')\n\n# calling function with arguement\n\ngreet_me('Mr.Thakur')\n\n# see easy peasy","b0e91263":"# What if we dont provide the argument while calling the function, it will throw an error that function needs argument\n# in that case we should have something to coverup and thats called DEFAULT value, lets see\n\ndef greet_me(name = 'sir\/mam'):  # <--- here we have used default value as Sir\/mam\n    print(f'Good morning {name} , your coffee is on table.')\n\ngreet_me() # we called function without argument, hence it is using default argument ' sir\/mam '\ngreet_me('MR. Grey') # provided a name it will use that name as argument","12b3c9a0":"# we can use any number of arguments in the functions\n# we will function that add the name and sirname and return full name\n\ndef full_name(name,sirname):\n    fname = f'{name} {sirname}'\n    return fname\n\nprint(full_name('Bruce','Wayne')) # simple right ?\nprint(full_name('Baner','Bruce')) # Hulk doesnt know that sirnane if second arguemnt so what to do?\nprint(full_name(sirname = 'Baner',name = 'Bruce')) # when arguments are used with name , sequence does not matter.","695349c6":"# multiple value return as tuple.\n\ndef basic_math(a,b):\n    return a+b,a-b\n\nbasic_math(5,4)","33d80053":"# When we are uncertain about the number of arguements for function we use these *args and **kwargs\n# Non-keyword Arguments args - denoted by * \n\ndef adder(*args): #we can use any name in place of args but by convention we use args\n    sum = 0\n    for n in args:\n        sum += n\n    return sum\n\nprint(adder(1,2,3))\nprint(adder(5,6.6,9,12,5)) # any number of arguments are valid\n\n# Keyword Arguments kwargs - denoted by ** - used when we have to pass dictionaries as argument\n\ndef print_data(**kwargs):\n    print(type(kwargs))\n    for key,value in kwargs.items():\n        print(f'{key} is {value}')\n\nprint_data(Name = 'Arther Curry', Hero = 'Aquaman', Power = 'King of Ocean') # we are passign dictionary , check dictionary file for ref.     ","7daaf2fa":"# Example :\n\n# we can use this syntax to define multiple variable and values\na,b = 10,20  # global variables\n\n# defining simple function\ndef sumab(a,b): \n    c = a + b   # here a,b,c all are local variable, \n    return c    # a and b declared here are not same as those mentioned earlier \n\n# return a + b i.e 30\nsumab(a,b)\n\n# but we can not access the c outside the function sumab()\n# it will raise NameError: name 'c' is not defined, because c does not exist outside function sumab.\n# ( uncomment below line to check )\n#print(c)\n\n\n##### Defining and using global variables\n\n\n# created a variable with value 0\nc = 0 \n\ndef sum_glob(a,b):\n    global c       # defining global variable in function , (telling python this is global variable)\n    c = a+b\n    return c\n\n# we have used the global c in this function \nprint('sume of 2 and 4 using sum_glib function : ',sum_glob(2,4))\n\n# lets check value of c now , if you remember we have created variable c with value 0 . \nprint('value of c :', c)","ee72e00b":"# lets add doc string to the adder functions\n\ndef adder(*args): \n    # we use three double or single quotes to enter the doc string\n    \"\"\"\n    \n    Add all the values provided in the function.\n    \n    Parameters : Accepts numers as parameters\n    \n    Returns : sum of all the numbers provided    \n    \n    \"\"\"\n    sum = 0\n    for n in args:\n        sum += n\n    return sum\n\n# Checking our doc string for function adder\nhelp(adder)","844a00d4":"# lambda are the one line one time using functinos, if we don't have plan to use function multiple times , we use lambda.\n# it can take any number of arguments, but can only have one expression.\n# oftern lambda is used with functions map, filter and reduce\n\n# Syntadx : lambda arguments : expression\n\nal = lambda a,b : a*b\n\nal(5,2)","3115c657":"alist = [1,2,3,4,5,6,7,8,9]","7d3f4705":"# Map uses the lambda function to return the modified version of element ,\n# here we used map to get squares of all the numbers in the list\n\nresult = list(map(lambda x : x**2, alist))\nprint(result)","5ed7e7ab":"# Filter - use the lambda expression as conditiona and filter the elements with True\n# here we are filtering the odd numbers form the list \n\nresult = list(filter(lambda x : (x%2 != 0), alist))\nprint(result)","600ad53b":"def ab(a,b):\n    return a * b","97ca74d4":"# Time taken by def function to calculate\n\n%%timeit\nab(5,2)","ef176f93":"# Time taken by lambda function to calculate\n\n%%timeit\nal(5,2)","6da0b701":"Default Argument - ","ed403dc9":"### Time complexity - lambda vs def","90532169":"### Note","f80979e2":"Map and Filter","92c39ccb":"### Doc string ","c5dd511f":"Understanding the syntax:\n\ndef function_name(argument1,argument2):<br\/>\n--tab--return (action on arguments)\n\n1. def - keyword to tell python we are going to define function\n2. function_name - anything you wish just not the python keywords, follow PEP8 guidlines\n3. argument1, argument2 - you can add any number of arguement or even no argument at all\n4. --tab-- this will be auto added in next line so python will know below code belongs to above function\n5. return - returns the value, output etc. so we can use it as input for other functions or save in variable\n6. action on arguments - as we have accepted the arguments then use them to generate desired output\n7. after creating function we need to call it to use it. ","d3e63743":"# Functions","7d4dc3cf":"### Multiple arguments","fb4b6fcb":"There are 2 types of functions built-in functions and user defined functions. \nBoth the terms are self explainatory so no need to go definitions. Right ?","0b371c74":"We have concept of Global and local variables for functions <br>\n\nGloabal variable have scope of whole program while local only have limited to function<br>\nAll the variables in above program were local variables as we can not access there value outside the function<br>","1aa40ed9":"## Some very usefull built in functions for DS in python","758e6040":"Non-keyword argument and Keyword arguments - lets find out whats these terms mean","04b94da4":"## Let's create our own functions ","84af31a4":"### Args and kwargs","9a534bd7":"1. I have not included input() function in this file. As a data scientist we are not gonna use input much. We will be using very larg data sets with thousads and lacs of lines and tens of features.\n\n2. In above notebook I have checked the time complexity ( how much time it take to calculate by using lambda and def, and found that def is faster than lambda. \n\n\n3. References - https:\/\/towardsdatascience.com\/10-python-built-in-functions-every-data-scientist-should-know-233b302abc0","12baef24":"More than one arguements and ordered\/named","0e77e553":"Last but not least, Doc Strings - now what the heck is that, <br>\nDoc Strings is the documentation for the function, what the function do,<br>\nwhat are arguments , what is expected output etc. <br>\n\nLets write doc string for one of our functions.","402b87c0":"### Global and local variables","b28144dc":"### lambda"}}