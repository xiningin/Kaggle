{"cell_type":{"21cc5cc5":"code","0eb79087":"code","d925902f":"code","c05d9f73":"code","2a592c19":"code","4c8be493":"code","2c074f9c":"code","9ddb0514":"code","5506a511":"code","444147e9":"code","48a090e4":"code","d4b6ab25":"code","b2955746":"code","0126d521":"code","315cceda":"code","e17b4dc4":"code","9731e7e6":"code","90a71a7b":"code","03bd5693":"code","f13d51b4":"markdown","bed9ad4f":"markdown","ab71dcdd":"markdown","77aef616":"markdown","cb7ed5a5":"markdown","f5c83483":"markdown","0b4f1ce2":"markdown","2d176305":"markdown","ea02424f":"markdown","b7c941b9":"markdown","ba44d0f5":"markdown","3c1ab329":"markdown","322bbe54":"markdown","5472aa3d":"markdown","c09d0569":"markdown","c2f656f4":"markdown","964b49ae":"markdown","669fc0aa":"markdown","a28312e2":"markdown"},"source":{"21cc5cc5":"# It is pre-installed on anakonda and most platforms, so typically do not need to pip install it\nimport networkx as nx\nnx.__version__ # 2.4 is stable at June 2020 (2.5 is development)","0eb79087":"import numpy as np ","d925902f":"G = nx.Graph()\nG.add_node(0) # Adds one node\nG.add_nodes_from([4, 1,2]) # Adds many nodes\nG.add_edge(0, 1) # Adds one edge \nG.add_edges_from([(0, 2), (1, 2)]) # Adds list of edges\n\nprint( G.number_of_nodes(), G.number_of_edges() )\nnx.draw(G)","c05d9f73":"G2 = nx.Graph()\nnx.add_cycle(G2, [0, 1, 2, 3])\nnx.add_path(G2, [10, 11, 12], weight=7)\nnx.add_star(G2, [4, 5, 6,7,8], weight=2.5)\nnx.draw(G2)","2a592c19":"DG = nx.DiGraph()\nDG.add_weighted_edges_from([(1, 2, 0.5), (3, 1, 0.75)])\nDG.out_degree(1, weight='weight')\n\nDG.degree(1, weight='weight')\n\n\nprint( list(DG.successors(1)) , list(DG.neighbors(1)) )\nnx.draw(DG)","4c8be493":"import os \nfilepath_kaggle = '..\/input\/ml-in-graphs-hw0\/wiki-Vote.txt'\nprint('File exists: ',  os.path.isfile(filepath_kaggle  )  )\n\nG = nx.read_edgelist(filepath_kaggle , comments='#', delimiter='\\t', create_using=nx.DiGraph)\nprint( G.number_of_nodes(), G.number_of_edges() )","2c074f9c":"G = nx.Graph()\nG.add_nodes_from([0, 1])\nG.add_edge(0, 1)\n# To get nodes number use, len(G) or  G.number_of_nodes()\nlen(G), G.number_of_nodes(), G.number_of_edges(), G.size()\n# G.size(weight=None) # Returns the number of edges or total of all edge weights. ","9ddb0514":"import matplotlib.pyplot as plt","5506a511":"G = nx.dodecahedral_graph()\nnx.draw(G)\nplt.title('dodecahedral_graph')\nplt.show()","444147e9":"import numpy as np\nA = np.random.randint(0, 2, size=(4, 4))\nD = nx.DiGraph(A)\n# https:\/\/networkx.org\/documentation\/stable\/reference\/convert.html#scipy\n# One can also use: \n# G = nx.from_numpy_matrix(A, create_using=nx.DiGraph)\n# G = nx.from_scipy_sparse_matrix(A_sparse, create_using=nx.DiGraph)\n\nnx.draw(D)","48a090e4":"nx.to_numpy_array(G)","d4b6ab25":"G = nx.petersen_graph()\n#plt.style.use('ggplot') # seems do not affect\nfig = plt.figure(figsize= (10,5))\nplt.subplot(121)\nnx.draw_shell(G, nlist=[range(5, 10), range(5)], with_labels=True, font_weight='bold')\nplt.title('Subplot 1')\nplt.subplot(122)\nnx.draw(G, with_labels=True, font_weight='bold')\nplt.title('Subplot 2')\nplt.show()","b2955746":"# https:\/\/stackoverflow.com\/questions\/28372127\/add-edge-weights-to-plot-output-in-networkx\n\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\nG=nx.Graph()\ni=1\nG.add_node(i,pos=(i,i))\nG.add_node(2,pos=(2,2))\nG.add_node(3,pos=(1,0))\nG.add_edge(1,2,weight=0.5)\nG.add_edge(1,3,weight=9.8)\npos=nx.get_node_attributes(G,'pos')\nnx.draw(G,pos)\nlabels = nx.get_edge_attributes(G,'weight')\nnx.draw_networkx_edge_labels(G,pos,edge_labels=labels)\nplt.show()","0126d521":"import matplotlib.pyplot as plt\npos=nx.planar_layout(G) # pos = nx.nx_agraph.graphviz_layout(G)\nnx.draw_networkx(G,pos)\nlabels = nx.get_edge_attributes(G,'weight')\nnx.draw_networkx_edge_labels(G,pos,edge_labels=labels)\nplt.show()","315cceda":"import numpy as np \n\nG = nx.Graph()\n# G.add_node(1)\nG.add_nodes_from([0, 1,2])\n#G.add_edge(0, 1)\nG.add_edges_from([(0, 1), (1, 2), (0, 2)])\nfig = plt.figure(figsize= (12,3))\nplt.subplot(131)\nnx.draw(G,   node_color= [0,0,0 ])\nm1 = nx.algorithms.community.modularity(G, [{0,1,2}])\nstr1 = 'Partion: \\n all nodes in one group \\n'+ 'Modularity ' + str(np.round(m1,3) )\nplt.title(str1)\n\nplt.subplot(132)\nnx.draw(G,   node_color= [0,1,2 ])\nm1 = nx.algorithms.community.modularity(G, [{0},{1},{2}])\nstr1 = 'Partion: \\n all nodes in different groups \\n'+ 'Modularity ' + str(np.round(m1,3) )\nplt.title(str1)\n\nplt.subplot(133)\nnx.draw(G,   node_color= [0,0,2 ])\nm1 = nx.algorithms.community.modularity(G, [{0,1},{2}])\nstr1 = 'Partion: \\n  Group1 - [0,1], Group2 - [2] \\n'+ 'Modularity ' + str(np.round(m1,3) )\nplt.title(str1)\n\nplt.show()","e17b4dc4":"G  = nx.barbell_graph(3, 0)\nnx.algorithms.community.modularity(G, [{0, 1, 2}, {3, 4, 5}])\n#nx.algorithms.community.modularity(G, [0,0,0,1,1,1])\n","9731e7e6":"pip install python-louvain","90a71a7b":"import community as community_louvain\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\n# load the karate club graph\nG = nx.karate_club_graph()\n\n# compute the best partition\npartition = community_louvain.best_partition(G)\n\n# draw the graph\npos = nx.spring_layout(G)\n# color the nodes according to their partition\ncmap = cm.get_cmap('viridis', max(partition.values()) + 1)\nnx.draw_networkx_nodes(G, pos, partition.keys(), node_size=40,\n                       cmap=cmap, node_color=list(partition.values()))\nnx.draw_networkx_edges(G, pos, alpha=0.5)\nplt.show()","03bd5693":"X = np.random.rand(3,3)\nfrom sklearn.neighbors import kneighbors_graph\nA = kneighbors_graph(X, 1, mode='connectivity', include_self=False)\nprint(type(A),A.shape )\n\nG = nx.DiGraph(A)\nnx.draw(G)","f13d51b4":"# Create Graph: create, adding nodes, edges\n\nFour types of graphs are supported:\n\nG = nx.Graph() # undirected graph\n\nDG = nx.DiGraph() # directed graphs\n\nMG = nx.MultiGraph() # Multi graph i.e. can be many edges between nodes \nMDG = nx.MultiDiGraph() # Multi DI graph i.e. can be many edges between nodes ","bed9ad4f":"## pip install python-louvain - popular clustering algorithm\nshould install additionally ","ab71dcdd":"# What is about ? \n\nThat notebook gives examples\/comments how to work with networkx - popular graph package for Python.\n\nIt is preliminary version, \"under development\". June 2020 AC.\n","77aef616":"# Create from Adjacency matrix ","cb7ed5a5":"# Install","f5c83483":"# Number of nodes, edges","0b4f1ce2":"# Documentation links and comments\n\nneworkx has better docs than many other packages. \nhttps:\/\/networkx.github.io\/documentation\/stable\/ - docs site \n\nhttps:\/\/networkx.github.io\/documentation\/stable\/tutorial.html - \"tutorial\" the first place to start - startup examples and basic comments \n\nhttps:\/\/networkx.github.io\/documentation\/stable\/reference\/index.html - full docs\n\nhttps:\/\/networkx.github.io\/documentation\/stable\/auto_examples\/index.html - \"Gallery of examples\" - look here to see nice examples\n\n\n\n\n","2d176305":"## Plot with  edge weights  nx.draw_networkx_edge_labels\n\nhttps:\/\/stackoverflow.com\/questions\/28372127\/add-edge-weights-to-plot-output-in-networkx","ea02424f":"# Combining with sklearn knn graph ","b7c941b9":"# networkx - short overview\n\nnetworkx is one of the most popular packages for graph manipulation in Python.\nIt might be good starting point to start work with graphs.\nSince it pre-intalled on anaconda and thus practically everywhere (colab, kaggle,...), so you will not have problems intalling it, as you might have with other packages. It also has good documentation (better than many competitors).  Also it is written in Python, so you might look how things are implemented looking in source codes. \n\nDespite that advantages it has certain drawbacks. \nIt is written in Python, while other packages in C\/C++, so it is about 10 times slower than competitors, (which is not a problem for graphs of moderate size, but for large size it is problem). (See benchmarks: https:\/\/www.r-bloggers.com\/benchmark-of-popular-graph-network-packages\/ ).\nThe second drawback is that in some advanced matters it relies on external packages, like graphViz , louvain, etc. \nWhich in turn might have problems with installation on some platforms.\nYet another mild drawback that newer versions might not be fully compatible with older ones, pre-installed version on your computer might not be the last one. \nTo conclude drawbacks might appear in some advanced use cases, and for starting point it might be quite good. \n\n\nOne quite pleasant feature is that plotting is done with the help of standard matplotlib backend; so networkx plots and matplotlib plots are easily combined. (That is different from igraph for example).\nAn unpleasant feature, that networkx cannot plot self-loops by itself (igraph can), \nhttps:\/\/stackoverflow.com\/questions\/49340520\/matplotlib-and-networkx-drawing-a-self-loop-node\n\n\n\n","ba44d0f5":"## Simplest plot - nx.draw(G)","3c1ab329":"## Use subplots from matplotlib","322bbe54":"## Peterson graph and subplots demo","5472aa3d":"## Creation via add_path, add_cycle, add_star ","c09d0569":"# Community detection (clustering )","c2f656f4":"# Plotting \nIt is important that plots are made in common matplotlib canvas, so all familiar matplolib commands can be combined with networkx plots. That is advantage over igraph.","964b49ae":"# Load graph in edge list format","669fc0aa":"# Return adjacency matrox ","a28312e2":"## Directed graph example"}}