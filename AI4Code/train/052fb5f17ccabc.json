{"cell_type":{"3e123d03":"code","60d5be85":"code","8ab22902":"code","d800606d":"code","3f937cb0":"code","24bd3e26":"code","0e6a73e7":"code","66ccbaa5":"code","5ce4fe55":"code","332ff8ed":"code","313d881f":"code","013cef39":"code","30632db3":"code","258ca913":"code","7009c76e":"code","5ea7092e":"code","8cc1e323":"code","276d2a51":"code","2f6ff443":"code","9dc61b35":"code","66cbb0e5":"markdown","51ab9b5d":"markdown","14bd13dd":"markdown","186588f1":"markdown","9811b526":"markdown","c087dba9":"markdown","0fa3331e":"markdown","1b6d8b97":"markdown","c2fdc852":"markdown","2adb420c":"markdown"},"source":{"3e123d03":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report, roc_curve, precision_recall_curve, roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom collections import Counter","60d5be85":"train=pd.read_csv('..\/input\/iba-ml1-mid-project\/train.csv')\ntest=pd.read_csv('..\/input\/iba-ml1-mid-project\/test.csv')\n","8ab22902":"test['credit_line_utilization'] = test['credit_line_utilization'].str.replace(',' , '.').astype(float)\ntrain['credit_line_utilization'] = train['credit_line_utilization'].str.replace(',' , '.').astype(float)","d800606d":"from sklearn.impute import SimpleImputer\nimpute_median = SimpleImputer(missing_values = np.nan, strategy = 'median')\n\nfor var in train.columns.values:\n    if train[var].isnull().sum() != 0:\n        train[var] = impute_median.fit_transform(train[[var]]).ravel()\n        \ndisplay(train.isnull().sum())","3f937cb0":"for var in test.columns.values:\n    if test[var].isnull().sum() != 0:\n        test[var] = impute_median.fit_transform(test[[var]]).ravel()\n        \ndisplay(test.isnull().sum())","24bd3e26":"test.rename(columns={'number_of_credit_lines': 'no_cdtline', 'number_dependent_family_members': 'no_dep_fmemb', 'ratio_debt_payment_to_income': 'debtpay_inc_ratio',\n                      'credit_line_utilization': 'cdtline_util', 'number_of_previous_late_payments_up_to_59_days': 'no_latepay_up_59d', \n                      'number_of_previous_late_payments_up_to_89_days': 'no_latepay_up_89d', 'number_of_previous_late_payments_90_days_or_more': 'no_latepay_90d_more'}, inplace=True)\ntrain.rename(columns={'number_of_credit_lines': 'no_cdtline', 'number_dependent_family_members': 'no_dep_fmemb', 'ratio_debt_payment_to_income': 'debtpay_inc_ratio',\n                      'credit_line_utilization': 'cdtline_util', 'number_of_previous_late_payments_up_to_59_days': 'no_latepay_up_59d', \n                      'number_of_previous_late_payments_up_to_89_days': 'no_latepay_up_89d', 'number_of_previous_late_payments_90_days_or_more': 'no_latepay_90d_more'}, inplace=True)","0e6a73e7":"X = train.drop(['defaulted_on_loan', 'Id'], axis=1)\ny = train['defaulted_on_loan']","66ccbaa5":"test.drop(['Id'], axis =1, inplace= True)","5ce4fe55":"undersample = RandomUnderSampler()\nX, y = undersample.fit_resample(X, y)\nprint(Counter(y))","332ff8ed":"X_train,X_cv,y_train,y_cv = train_test_split( X, y,test_size=0.33, random_state = 42, stratify = y)","313d881f":"rf=RandomForestClassifier( min_samples_leaf= 6, min_samples_split= 2, criterion='gini', max_depth=9, n_estimators=300)\n#parameter chosen with the help of Gridsearch CV","013cef39":"rf.fit(X_train,y_train)","30632db3":"y_pred2 = rf.predict(X_cv)\nprint(classification_report(y_cv, y_pred2))\nprint('Train performance', accuracy_score(y_train, rf.predict(X_train)))\nprint('Test performance', accuracy_score(y_cv, rf.predict(X_cv)))","258ca913":"print(roc_auc_score(y_cv, rf.predict_proba(X_cv)[:,1]))\nprint(roc_auc_score(y_train, rf.predict_proba(X_train)[:,1]))","7009c76e":"r_probs = [0 for _ in range(len(y_cv))]\nRF_probs = rf.predict_proba(X_cv)[:,1]\nr_auc = roc_auc_score(y_cv, r_probs)\nRF_auc = roc_auc_score(y_cv, rf.predict_proba(X_cv)[:,1])","5ea7092e":"print('Random (chance) Prediction: AUROC = %.3f' % (r_auc))\nprint('Random Forest: AUROC = %.3f' % (RF_auc))","8cc1e323":"r_fpr, r_tpr, _ = roc_curve(y_cv, r_probs)\nRF_fpr, RF_tpr, _ = roc_curve(y_cv, rf.predict_proba(X_cv)[:,1])","276d2a51":"plt.figure(figsize=(10, 7))\nplt.plot(r_fpr, r_tpr, linestyle='--', label='Random prediction (AUROC = %.3f)' % r_auc)\nplt.plot(RF_fpr, RF_tpr, marker='.', label='Random Forest: (AUROC = %.3f)' % RF_auc)\nplt.title('ROC Plot')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()","2f6ff443":"Id = np.array(range(1, 48109))","9dc61b35":"pred_test2 = rf.predict_proba(test)[:,1]\nsample_submission =pd.DataFrame.from_dict({'Id':Id,'Predicted':pred_test2})\nsample_submission.to_csv('sample_submission.csv', index = False)","66cbb0e5":"#  Import datasets","51ab9b5d":"# Undersampling imbalanced target variable","14bd13dd":"# Random Forest Classifier","186588f1":"# Changing the columns type","9811b526":"# Visualization of result","c087dba9":"# Specifying input variables and target variable ","0fa3331e":"# Rename column names to make them shorter\n","1b6d8b97":"# Imputing missing values\n","c2fdc852":"# Train Test split","2adb420c":"# Drop unnecessary Id column"}}