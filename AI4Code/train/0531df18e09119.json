{"cell_type":{"654dc922":"code","7645a22a":"code","3eda2a0f":"code","2e9ac7c4":"code","ef386a48":"code","1fdca1af":"code","fd8b30fc":"code","d7ee9bfa":"code","57c57820":"code","6680aa0c":"code","628bc159":"markdown","7ccdd353":"markdown","0c63a3b4":"markdown","075122ca":"markdown","61f7c94c":"markdown","8cb9b9f2":"markdown","9ef83503":"markdown","85c29ae5":"markdown","21354aeb":"markdown"},"source":{"654dc922":"import numpy as np # Linear Algebra\nimport pandas as pd # Reading csv file\nimport os           # List directory files\n\nprint(os.listdir(\"..\/input\"))","7645a22a":"import warnings\nwarnings.filterwarnings('ignore') # to suppress some matplotlib deprecation warnings\n\nimport ast\nimport math\n\n# Install your own package in Kernels. \n#from simplification.cutil import simplify_coords\n\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'","3eda2a0f":"train = pd.read_csv('..\/input\/train_simplified\/roller coaster.csv',\n                   index_col='key_id',\n                   nrows=100)\ntrain.info() # 100 rows with 5 columns\ntrain.head()","2e9ac7c4":"train['word'] = train['word'].replace(' ', '_', regex=True) # See word column updated.\ntrain.head()","ef386a48":"test_raw = pd.read_csv('..\/input\/test_raw.csv', index_col='key_id')\ntest_raw.head() # 112199 rows, 2 columns\ntest_raw.info()\n\nfirst_ten_ids = test_raw.iloc[:10].index\nprint(first_ten_ids)\nraw_images = [ast.literal_eval(lst) for lst in test_raw.loc[first_ten_ids, 'drawing'].values]\n","1fdca1af":"def resample(x, y, spacing=1.0):\n    output = []\n    n = len(x)\n    px = x[0]\n    py = y[0]\n    cumlen = 0\n    pcumlen = 0\n    offset = 0\n    for i in range(1, n):\n        cx = x[i]\n        cy = y[i]\n        dx = cx - px\n        dy = cy - py\n        curlen = math.sqrt(dx*dx + dy*dy)\n        cumlen += curlen\n        while offset < cumlen:\n            t = (offset - pcumlen) \/ curlen\n            invt = 1 - t\n            tx = px * invt + cx * t\n            ty = py * invt + cy * t\n            output.append((tx, ty))\n            offset += spacing\n            pcumlen = cumlen\n        px = cx\n        py = cy\n    output.append((x[-1], y[-1]))\n    return output\n  \ndef normalize_resample_simplify(strokes, epsilon=1.0, resample_spacing=1.0):\n    if len(strokes) == 0:\n        raise ValueError('empty image')\n\n    # find min and max\n    amin = None\n    amax = None\n    for x, y, _ in strokes:\n        cur_min = [np.min(x), np.min(y)]\n        cur_max = [np.max(x), np.max(y)]\n        amin = cur_min if amin is None else np.min([amin, cur_min], axis=0)\n        amax = cur_max if amax is None else np.max([amax, cur_max], axis=0)\n\n    # drop any drawings that are linear along one axis\n    arange = np.array(amax) - np.array(amin)\n    if np.min(arange) == 0:\n        raise ValueError('bad range of values')\n\n    arange = np.max(arange)\n    output = []\n    for x, y, _ in strokes:\n        xy = np.array([x, y], dtype=float).T\n        xy -= amin\n        xy *= 255.\n        xy \/= arange\n        resampled = resample(xy[:, 0], xy[:, 1], resample_spacing)\n        simplified = simplify_coords(resampled, epsilon)\n        xy = np.around(simplified).astype(np.uint8)\n        output.append(xy.T.tolist())\n\n    return output","fd8b30fc":"# Below package need to add with your login and un comment below lines \n# by removing # at start of each below line.\n\n#simplified_drawings = []\n#for drawing in raw_images:\n    #simplified_drawing = normalize_resample_simplify(drawing)\n    #simplified_drawings.append(simplified_drawing)","d7ee9bfa":"for index, raw_drawing in enumerate(raw_images, 0):\n    \n    plt.figure(figsize=(6,3))\n    \n    for x,y,t in raw_drawing:\n        plt.subplot(1,2,1)\n        plt.plot(x, y, marker='.')\n        plt.axis('off')\n\n    plt.gca().invert_yaxis()\n    plt.axis('equal')\n\n    #for x,y in simplified_drawings[index]:\n        #plt.subplot(1,2,2)\n        #plt.plot(x, y, marker='.')\n        #plt.axis('off')\n\n    plt.gca().invert_yaxis()\n    plt.axis('equal')\n    plt.show()  ","57c57820":"submission = pd.read_csv('..\/input\/sample_submission.csv', index_col='key_id')\n# Don't forget, your multi-word labels need underscores instead of spaces!\nmy_favorite_words = ['donut', 'roller_coaster', 'smiley_face']  \nsubmission['word'] = \" \".join(my_favorite_words)\nsubmission.to_csv('my_favorite_words.csv')\n\n\n","6680aa0c":"submission.head()","628bc159":"**Import** & **Listing** files  in \"input\" folder.","7ccdd353":"**Suppress** **warnings** due to deprecation of methods used.\n\n**Import** some more ** packages (matplotlib)**.","0c63a3b4":"**Replace** **space** with **underscore**.","075122ca":"Covert Raw to Simplified data.\n(Code by Jonas Jongejan)","61f7c94c":"## Notebook Summary:\n 1. **Load** the data, labeling with underscores.\n 2. **Converting** Raw to Simplified drawing\n 3. **Submit** result.","8cb9b9f2":"**Read Train **csv file.","9ef83503":"Drawing some plots","85c29ae5":"**Submit**","21354aeb":"**Read** **test** data.  Display first few rows.\n\nNow word reading as **String**, so **convert** into **list**."}}