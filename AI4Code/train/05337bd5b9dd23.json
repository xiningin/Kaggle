{"cell_type":{"d97736f1":"code","f1803338":"code","c6463c76":"code","dcc7e186":"code","12270c76":"code","cba2c6cb":"code","5292a8b4":"code","3d8c645d":"code","9b60bef5":"code","3c180017":"code","508714f3":"code","bf3cc561":"code","bc7739f6":"code","84fb117b":"code","46cb6eb8":"code","577622be":"code","917e4c32":"code","45f1e2d1":"code","7ff8a6b0":"code","bf49561d":"code","18756904":"code","19f8bba5":"code","c11ffe6d":"code","c6abac9e":"code","da0b4580":"code","0a83d318":"code","dd3bcc79":"code","31dfee45":"code","93c5ecbd":"code","829bb6d9":"code","a456b4ec":"code","f36c7b26":"code","425e144e":"code","87e3a6cd":"code","ebd8cfa4":"code","a3e5dae7":"code","6184846d":"code","71f80017":"code","4595e1c6":"code","da0d2c60":"code","ccfab857":"code","9f2b6602":"code","53ff1b8d":"code","80fb7ffa":"code","ded9af6f":"code","aa418436":"code","62a4b0f3":"code","16d9b759":"code","e2f98151":"code","2dd6d7b9":"code","af37a632":"code","38c35414":"code","d590b179":"code","7a591eca":"code","a5578dd4":"code","98ad47df":"code","f23dc383":"code","10e7bad9":"code","808c62d0":"code","43957697":"code","d20e3ad3":"code","90d2e381":"code","a141ede3":"code","dc20aedc":"code","0a068754":"code","d44e7de0":"code","4d5db6fa":"code","26628a01":"code","b57eed5e":"code","d6155a27":"code","1d34a7d4":"code","05bd1a66":"code","0de41a4c":"code","3ef6e0d2":"code","03355433":"code","7cb2aad6":"code","5eb07748":"code","361b01c2":"code","cae6854e":"code","69cbf3f7":"code","8be9366e":"code","e30255df":"code","0bf600b5":"code","25153523":"code","ea42cea4":"code","573a376b":"code","fb3d3539":"code","b469f448":"code","b52ec68b":"code","f467d8ab":"code","3cf00792":"code","da112d69":"code","c397f1fa":"code","7e12983d":"code","dbf0df05":"code","dfdebcfb":"code","b6214558":"code","a21902d2":"code","56f61e5f":"code","972a4941":"code","66844283":"code","01112657":"code","85fe59df":"code","29e8b2ff":"code","6eb0b023":"code","c7fcce5d":"code","5cbecc6e":"code","ac38c4e1":"markdown","a484202b":"markdown","b3f0923b":"markdown","684a02b3":"markdown","f6864097":"markdown","ecdb8f8d":"markdown","2014ee4e":"markdown","747d669d":"markdown","bfc11846":"markdown","83c823ac":"markdown","c770e1d6":"markdown","0517e672":"markdown","73d9bec7":"markdown","5854a753":"markdown","c7ae9bcc":"markdown","b64b6ddb":"markdown","c9303342":"markdown","63f45146":"markdown","d79ba786":"markdown","3622ce98":"markdown","9f10756a":"markdown","a15778f5":"markdown","09b63625":"markdown","69526d1c":"markdown","3ff3c373":"markdown","5a532b75":"markdown","f7550270":"markdown","bc1af6c0":"markdown","bac90079":"markdown","c8bc5e73":"markdown","adc39097":"markdown","0845d048":"markdown","86d298a2":"markdown","72b7b8a9":"markdown","461cc19d":"markdown","7dc91490":"markdown","7cffd2c4":"markdown"},"source":{"d97736f1":"#libraries to use\nimport pandas as pd \nimport numpy as np \nimport seaborn as sns \nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom sklearn.ensemble import RandomForestRegressor","f1803338":"data = pd.read_csv('..\/input\/machine-learning-24-hrs-hackathon\/train_SJC.csv')","c6463c76":"data.info()","dcc7e186":"data.head()","12270c76":"data.describe()","cba2c6cb":"#dropping the first column as it is the heads\ndata = data.drop(data.index[0])","5292a8b4":"data.head()","3d8c645d":"#changing the name of the coloumn heads\n\ndata = data.rename(\ncolumns={\n    'Unnamed: 0'  : 'ClaimNumber',\n    'Unnamed: 1'  : 'DateTimeOfAccident',\n    'Unnamed: 3'  : 'Age',\n    'Unnamed: 4'  : 'Gender',\n    'Unnamed: 5'  : 'MaritalStatus',\n    'Unnamed: 6'  : 'DependentChildren',\n    'Unnamed: 8'  : 'WeeklyWages',\n    'Unnamed: 9'  : 'PartTimeFullTime',\n    'Unnamed: 10' : 'HoursWorkedPerWeek',\n    'Unnamed: 12' : 'ClaimDescription',\n    'Unnamed: 13' : 'InitialIncurredCalimsCost', \n    'Unnamed: 14' : 'UltimateIncurredClaimCost',\n})","9b60bef5":"data.head()","3c180017":"#checking for null values \n\ndata.isnull().sum()","508714f3":"data['MaritalStatus'].value_counts()","bf3cc561":"data['WeeklyWages'].value_counts()","bc7739f6":"data['HoursWorkedPerWeek'].value_counts()","84fb117b":"#for Categorical column - mode\ndata['MaritalStatus'] = data['MaritalStatus'].fillna(data['MaritalStatus'].mode()[0])","46cb6eb8":"#for numerical colum - median because the data is skewed\ndata['WeeklyWages'] = data['WeeklyWages'].fillna(data['WeeklyWages'].median())","577622be":"data['HoursWorkedPerWeek'] = data['HoursWorkedPerWeek'].fillna(data['HoursWorkedPerWeek'].median())","917e4c32":"data.isnull().sum()","45f1e2d1":"#replacing insignificant value with mode\ndata['Gender'].value_counts()","7ff8a6b0":"data['Gender'].mode()","bf49561d":"data['Gender'] = data['Gender'].replace(('U'),('M'))\ndata['Gender'].value_counts()","18756904":"data['DateTimeOfAccident'] = pd.to_datetime(data['DateTimeOfAccident'])","19f8bba5":"data['DateTimeOfAccident']","c11ffe6d":"data['Age'] = data['Age'].astype(np.float64)","c6abac9e":"data['DependentChildren'] = data['DependentChildren'].astype(np.float64)","da0b4580":"data['WeeklyWages'] = data['WeeklyWages'].astype(np.float64)","0a83d318":"data['HoursWorkedPerWeek'] = data['HoursWorkedPerWeek'].astype(np.float64)","dd3bcc79":"data['InitialIncurredCalimsCost'] = data['InitialIncurredCalimsCost'].astype(np.float64)","31dfee45":"data['UltimateIncurredClaimCost'] = data['UltimateIncurredClaimCost'].astype(np.float64)","93c5ecbd":"data.info()","829bb6d9":"data['DateReported'] = pd.to_datetime(data['DateReported'])\ndata['DateReported']","a456b4ec":"#getting day, year, month from datetime column of accident\ndata['YearOfAccident'] = data['DateTimeOfAccident'].dt.year\ndata['YearOfAccident']","f36c7b26":"data['MonthOfAccident'] = data['DateTimeOfAccident'].dt.month\ndata['MonthOfAccident']","425e144e":"data['DayOfAccident'] = data['DateTimeOfAccident'].dt.day\ndata['DayOfAccident']","87e3a6cd":"#apply log to claims cost as they are skewed\ndata['Log_UltimateCost'] = np.log(data['UltimateIncurredClaimCost'])","ebd8cfa4":"data['Log_InitialCost'] = np.log(data['InitialIncurredCalimsCost'])","a3e5dae7":"data = data.drop(['ClaimNumber', 'DateTimeOfAccident', 'ClaimDescription'], axis = 1)","6184846d":"data.info()","71f80017":"data.skew()","4595e1c6":"#dependent variable distribution\nplt.figure(figsize = (10, 8))\nplot1 = sns.histplot(data = data, x = 'UltimateIncurredClaimCost', \n                     element = \"step\", fill = False, color = '#763857')\nplt.title('Dependant Variable Distribution')\nplt.show()","da0d2c60":"#dependent variable distribution\n#real world data is highly skewed hence we log it to make more sense of it\nplt.figure(figsize = (10, 8))\nplot2 = sns.histplot(data = data, x = 'UltimateIncurredClaimCost', \n                     log_scale = True, element = \"step\", \n                     fill = False, color = '#763857')\nplt.title('Dependant Variable Distribution')\nplt.xlabel('Ultimate Incurred Claims Cost')\nplt.show()","ccfab857":"#Age\nplt.figure(figsize = (10, 8))\nplot3 = sns.distplot(x = data['Age'], hist = True, color = '#BFB051')\nplt.title('Age Distribution')\nplt.xlabel('Age')\nplt.show()","9f2b6602":"#Gender\nplt.figure(figsize = (10, 8))\nprint(data['Gender'].value_counts())\nc = {'F': '#C490E4', 'M': '#F6C6EA'}\nplot4 = sns.countplot(data = data, x = 'Gender', palette=c)\nplt.title('Gender Distribution')\nplt.show()","53ff1b8d":"#Marital Status\nplt.figure(figsize = (10, 8))\nprint(data['MaritalStatus'].value_counts())\nc = {'S': '#B5EAEA', 'M': '#EDF6E5', 'U' : '#FFBCBC'}\nplot5 = sns.countplot(data = data, x = 'MaritalStatus', palette=c)\nplt.title('Marital Status Distribution')\nplt.show()","80fb7ffa":"#DependentChildren\nplt.figure(figsize = (10, 8))\nprint(data['DependentChildren'].value_counts())\nc = { 0 : '#C1AC95', 1 : '#FEB144', 2 : '#FDFD97',\n    3 : '#9EE09E', 4 : '#9EC1CF', 5 : '#CC99C9',\n    6 : '#FF9AA2', 8 : '#E2F0CB', 9 : '#C7CEEA' }\nplot6 = sns.countplot(data = data, x = 'DependentChildren', palette=c)\nplt.title('Dependent Children Distribution')\nplt.show()","ded9af6f":"#DependentsOther\nplt.figure(figsize = (10, 8))\nprint(data['DependentsOther'].value_counts())\nc = { 0 : '#C7CEEA', 1 : '#E2F0CB', 2 : '#FF9AA2',\n    3 : '#CC99C9'}\nplot7 = sns.countplot(data = data, x = 'DependentsOther', palette=c)\nplt.title('Dependents Other Distribution')\nplt.show()","aa418436":"# WeeklyWages \nplt.figure(figsize = (10, 8))\nplot8 = sns.distplot(x = data['WeeklyWages'], hist = True, color = '#7bf1a8')\nplt.title('Weekly Wages Distribution')\nplt.xlabel('Weekly Wages')\nplt.show()","62a4b0f3":"#PartTimeFullTime\nplt.figure(figsize = (10, 8))\nprint(data['PartTimeFullTime'].value_counts())\nc = { 'F' : '#CC99C9', 'P' : '#FF9AA2'}\nplot9 = sns.countplot(data = data, x = 'PartTimeFullTime', palette=c)\nplt.title('Job Type Distribution')\nplt.show()","16d9b759":"#HoursWorkedPerWeek\nplt.figure(figsize = (10, 8))\nplot10 = sns.distplot(x = data['HoursWorkedPerWeek'], hist = True, color = '#5aa9e6')\nplt.title('Hours Worked Per Week Distribution')\nplt.xlabel('Hours Worked Per Week')\nplt.show()","e2f98151":"#DaysWorkedPerWeek\nplt.figure(figsize = (10, 8))\nplot11 = sns.distplot(x = data['DaysWorkedPerWeek'], hist = True, color = '#f55c7a')\nplt.title('Days Worked Per Week Distribution')\nplt.xlabel('Days Worked Per Week')\nplt.show()","2dd6d7b9":"#InitialIncurredCalimsCost\n# here log scale is taken as real world data is skewed \nplt.figure(figsize = (10, 8))\nplot12 = sns.histplot(data = data, x = 'InitialIncurredCalimsCost', \n                     log_scale = True, element = \"step\", \n                     color = '#a4d4b4')\nplt.title('Initial Incurred Calims Cost Distribution')\nplt.xlabel('Initial Incurred Claims Cost')\nplt.show()","af37a632":"#Age & Log_UltimateCost\nplt.figure(figsize = (10, 8))\nplot13 = sns.histplot(data, x = 'Age', y = 'Log_UltimateCost',\n    discrete=(True, False), log_scale=(False, False),\n    cbar=True, cbar_kws=dict(shrink=.75), color = '#957fef')\nplt.title('Age & Ultimate Incurred Calims Cost Distribution')\nplt.xlabel('Age')\nplt.ylabel('Ultimate Incurred Claims Cost')\nplt.show()","38c35414":"#Gender & Log_UltimateCost\nplt.figure(figsize = (10, 8))\nplot14 = sns.boxplot(data = data, x = 'Gender', y = 'Log_UltimateCost', palette='pastel')\nplt.title('Gender & Ultimate Incurred Calims Cost Distribution')\nplt.xlabel('Gender')\nplt.ylabel('Ultimate Incurred Claims Cost')\nplt.show()","d590b179":"#MaritalStatus & Log_UltimateCost\nplt.figure(figsize = (10, 8))\nplot15 = sns.boxplot(data = data, x = 'MaritalStatus', y = 'Log_UltimateCost', palette='pastel')\nplt.title('Marital Status & Ultimate Incurred Calims Cost Distribution')\nplt.xlabel('Marital Status')\nplt.ylabel('Ultimate Incurred Claims Cost')\nplt.show()","7a591eca":"#DependentChildren & Log_UltimateCost\nplt.figure(figsize = (10, 8))\nplot16 = sns.boxplot(data = data, x = 'DependentChildren', y = 'Log_UltimateCost', palette='pastel')\nplt.title('Dependent Children & Ultimate Incurred Calims Cost Distribution')\nplt.xlabel('Dependent Children')\nplt.ylabel('Ultimate Incurred Claims Cost')\nplt.show()","a5578dd4":"#DependentsOther & Log_UltimateCost\nplt.figure(figsize = (10, 8))\nplot17 = sns.boxplot(data = data, x = 'DependentsOther', y = 'Log_UltimateCost', palette='pastel')\nplt.title('Dependents Other & Ultimate Incurred Calims Cost Distribution')\nplt.xlabel('Dependents Other')\nplt.ylabel('Ultimate Incurred Claims Cost')\nplt.show()","98ad47df":"#WeeklyWages & Log_UltimateCost\nplt.figure(figsize = (10, 8))\nplot18 = sns.histplot(data, x = 'WeeklyWages', y = 'Log_UltimateCost',\n    discrete=(False, False), log_scale=(False, False),\n    cbar=True, cbar_kws=dict(shrink=.75), color = '#D5ECC2')\nplt.title('Weekly Wages & Ultimate Incurred Calims Cost Distribution')\nplt.xlabel('Weekly Wages')\nplt.ylabel('Ultimate Incurred Claims Cost')\nplt.show()","f23dc383":"#PartTimeFullTime & Log_UltimateCost\nplt.figure(figsize = (10, 8))\nplot19 = sns.boxplot(data = data, x = 'PartTimeFullTime', y = 'Log_UltimateCost', palette='pastel')\nplt.title('Job Type & Ultimate Incurred Calims Cost Distribution')\nplt.xlabel('Job Type - Full Time \/ Part Time')\nplt.ylabel('Ultimate Incurred Claims Cost')\nplt.show()","10e7bad9":"#HoursWorkedPerWeek & Log_UltimateCost\nplt.figure(figsize = (10, 8))\nplot20 = sns.histplot(data, x = 'HoursWorkedPerWeek', y = 'Log_UltimateCost',\n    discrete=(False, False), log_scale=(False, False),\n    cbar=True, cbar_kws=dict(shrink=.75), color = '#ff7073')\nplt.title('Hours Worked Per Week & Ultimate Incurred Calims Cost Distribution')\nplt.xlabel('Hours Worked Per Week')\nplt.ylabel('Ultimate Incurred Claims Cost')\nplt.show()","808c62d0":"#DaysWorkedPerWeek & Log_UltimateCost\nplt.figure(figsize = (10, 8))\nplot21 = sns.boxplot(data = data, x = 'DaysWorkedPerWeek', y = 'Log_UltimateCost', palette='pastel')\nplt.title('DaysWorkedPerWeek & Ultimate Incurred Calims Cost Distribution')\nplt.xlabel('DaysWorkedPerWeek - Full Time \/ Part Time')\nplt.ylabel('Ultimate Incurred Claims Cost')\nplt.show()","43957697":"#Log_InitialCost & Log_UltimateCost\nplt.figure(figsize = (10, 8))\nplot22 = sns.histplot(data, x = 'Log_InitialCost', y = 'Log_UltimateCost',\n    discrete=(False, False), log_scale=(False, False),\n    cbar=True, cbar_kws=dict(shrink=.75), color = '#f4a261')\nplt.title('Initial & Ultimate Incurred Calims Cost Distribution')\nplt.xlabel('Initial Incurred Claims Cost')\nplt.ylabel('Ultimate Incurred Claims Cost')\nplt.show()","d20e3ad3":"#Correlation between multiple variables\ncols = [ 'DateReported', 'Age', 'DependentChildren', 'DependentsOther', 'WeeklyWages', 'PartTimeFullTime', \n    'HoursWorkedPerWeek', 'DaysWorkedPerWeek', 'YearOfAccident', 'MonthOfAccident', \n    'DayOfAccident', 'Log_UltimateCost', 'Log_InitialCost' ]\n\ncd = data[cols]","90d2e381":"plt.figure(figsize=(25,20))\nplot23 = sns.heatmap(cd.corr(), annot=True, fmt=\".2%\", cmap='Greens', annot_kws={'size': 15})\nplt.title('Correlation betweena all variables', size = 25)\nplt.xticks(fontsize=20, rotation=57)\nplt.yticks(fontsize=20)\nplt.show()","a141ede3":"#Gender | M - 1 & F - 0\ndata['Gender'] = LabelEncoder().fit_transform(data['Gender'])\ndata['Gender'].value_counts()","dc20aedc":"#MaritalStatus | S - 1, M - 0 & U - 2\ndata['MaritalStatus'] = LabelEncoder().fit_transform(data['MaritalStatus'])\ndata['MaritalStatus'].value_counts()","0a068754":"#PartTimeFullTime | F - 1 & P - 0\ndata['PartTimeFullTime'] = LabelEncoder().fit_transform(data['PartTimeFullTime'])\ndata['PartTimeFullTime'].value_counts()","d44e7de0":"data.drop(['UltimateIncurredClaimCost', 'InitialIncurredCalimsCost'], axis = 1)","4d5db6fa":"data_test = pd.read_csv('..\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv')","26628a01":"data_test.drop(['ClaimNumber', 'ClaimDescription'], axis = 1)","b57eed5e":"#checking for null values \ndata_test.isnull().sum()","d6155a27":"data_test['MaritalStatus'].value_counts()","1d34a7d4":"#for Categorical column - mode\ndata_test['MaritalStatus'] = data_test['MaritalStatus'].fillna(data_test['MaritalStatus'].mode()[0])","05bd1a66":"data_test.isnull().sum()","0de41a4c":"#replacing insignificant value with mode\ndata_test['Gender'].value_counts()","3ef6e0d2":"data_test['Gender'].mode()","03355433":"data_test['Gender'] = data_test['Gender'].replace(('U'),('M'))\ndata_test['Gender'].value_counts()","7cb2aad6":"data_test['DateTimeOfAccident'] = pd.to_datetime(data_test['DateTimeOfAccident'])","5eb07748":"data_test['DateTimeOfAccident']","361b01c2":"data_test['DateReported'] = pd.to_datetime(data_test['DateReported'])\ndata_test['DateReported']","cae6854e":"data_test['Age'] = data_test['Age'].astype(np.float64)","69cbf3f7":"data_test['DependentChildren'] = data_test['DependentChildren'].astype(np.float64)","8be9366e":"data_test['WeeklyWages'] = data_test['WeeklyWages'].astype(np.float64)","e30255df":"data_test['HoursWorkedPerWeek'] = data_test['HoursWorkedPerWeek'].astype(np.float64)","0bf600b5":"data_test['InitialIncurredCalimsCost'] = data_test['InitialIncurredCalimsCost'].astype(np.float64)","25153523":"data_test.info()","ea42cea4":"#getting day, year, month from datetime column of accident\ndata_test['YearOfAccident'] = data_test['DateTimeOfAccident'].dt.year\ndata_test['YearOfAccident']","573a376b":"data_test['MonthOfAccident'] = data_test['DateTimeOfAccident'].dt.month\ndata_test['MonthOfAccident']","fb3d3539":"data_test['DayOfAccident'] = data_test['DateTimeOfAccident'].dt.day\ndata_test['DayOfAccident']","b469f448":"data_test['Log_InitialCost'] = np.log(data_test['InitialIncurredCalimsCost'])","b52ec68b":"data_test = data_test.drop(['ClaimNumber', 'DateTimeOfAccident', 'ClaimDescription', 'DateReported'], axis = 1)","f467d8ab":"data_test.info()","3cf00792":"#Gender | M - 1 & F - 0\ndata_test['Gender'] = LabelEncoder().fit_transform(data_test['Gender'])\ndata_test['Gender'].value_counts()","da112d69":"#MaritalStatus | S - 1, M - 0 & U - 2\ndata_test['MaritalStatus'] = LabelEncoder().fit_transform(data_test['MaritalStatus'])\ndata_test['MaritalStatus'].value_counts()","c397f1fa":"#PartTimeFullTime | F - 1 & P - 0\ndata_test['PartTimeFullTime'] = LabelEncoder().fit_transform(data_test['PartTimeFullTime'])\ndata_test['PartTimeFullTime'].value_counts()","7e12983d":"from sklearn import preprocessing as pre\nX_scale_test=pre.minmax_scale(data_test)","dbf0df05":"ML_features = [ 'Age', 'Gender', 'MaritalStatus', 'DependentChildren', 'DependentsOther', 'WeeklyWages', 'PartTimeFullTime', \n    'HoursWorkedPerWeek', 'DaysWorkedPerWeek', 'YearOfAccident', 'MonthOfAccident', \n    'DayOfAccident', 'Log_InitialCost' ]\nML_data = data[ML_features]\nX = ML_data\ndata['target'] = data['UltimateIncurredClaimCost']\ny = data['target']","dfdebcfb":"ML_features_test = [ 'Age', 'Gender', 'MaritalStatus', 'DependentChildren', 'DependentsOther', 'WeeklyWages', 'PartTimeFullTime', \n    'HoursWorkedPerWeek', 'DaysWorkedPerWeek', 'YearOfAccident', 'MonthOfAccident', \n    'DayOfAccident', 'Log_InitialCost' ]\nxt_test = data_test[ML_features_test]","b6214558":"X.head()","a21902d2":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.28, random_state = 13000)","56f61e5f":"[(x_train.shape), (x_test.shape), (y_train.shape), (y_test.shape)]","972a4941":"x_train = StandardScaler().fit_transform(x_train)","66844283":"x_test = StandardScaler().fit_transform(x_test)","01112657":"regr = RandomForestRegressor(n_estimators = 10, random_state = 13002)","85fe59df":"m = regr.fit(x_train, y_train)","29e8b2ff":"y_predict = regr.predict(x_test)\ny_predict","6eb0b023":"R2r = r2_score(y_test, y_predict)\nR2r","c7fcce5d":"y_test_predict = regr.predict(xt_test)\ny_test_predict","5cbecc6e":"submission_data = pd.read_csv('..\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv')\nsubmission_data['UltimateIncurredClaimCost'] = y_test_predict\nsubmission_data.to_csv(\"MLexam.csv\",index=False)","ac38c4e1":"##  EDA","a484202b":"## Feature Engineering","b3f0923b":"## Data Processing","684a02b3":"Most people only worked 0-100 hours per week. The maximum working hours are 640.","f6864097":"### Multivariate Analysis","ecdb8f8d":"Here analysing the graph is hard. Hence we apply log to the column.","2014ee4e":"### Date time conversion","747d669d":"### Type conversion","bfc11846":"### Standardize","83c823ac":"With more age the insurance is more as well.","c770e1d6":"- My Root Mean Squared Error is 0.09818400922575043 which is pretty good score","0517e672":"This plot shows that most peopple worked for five days per week followed by four and three.","73d9bec7":"Here we can see that DependentsOther, HoursWorkedPerWeek, InitialIncurredCalimsCost and UltimateIncurredClaimCost are skewed. Most probably becasue of outliers.","5854a753":"### Feature Engineering for Test Data","c7ae9bcc":"Here most people are single or in their 20s, therefore they don't have kids. ","b64b6ddb":"Most people work full time jobs","c9303342":"### Label Encoding for Test data","63f45146":"# Machine Learning Practical Exam - BDA 2021 - BD2P3\n## 20BDA13 ","d79ba786":"Here singles are more than married and a good amount of unknown values too.","3622ce98":"## Modelling","9f10756a":"Here it is seen that the number of males in the data is more than females","a15778f5":"### Label Encoding","09b63625":"Here it is observable that the age 18-24 is the maximum. The mode of Age is 19","69526d1c":"## Data Loading","3ff3c373":"There is high correlation between Initial claims cost and Ultimate claims cost","5a532b75":"### Missing Values Treatment for Test Data","f7550270":"Other than kids, only the middle aged people have other kind of dependants.","bc1af6c0":"### Random Forest","bac90079":"## Reason to select the algorithm and how its better than other models?","c8bc5e73":"Most of the weekly wage ranges from 0 - 1000","adc39097":"## Test Data","0845d048":"Random Forest is better than other models because...\n- adds additional randomness to the model, while growing the trees.","86d298a2":"### Univariate Analysis","72b7b8a9":"### Bivariate Analysis","461cc19d":"## Feature Engineering","7dc91490":"### Missing vlaue treatment","7cffd2c4":"Random Forest...\n- it can be used for both classification as well as regression.\n- It reduces overfitting and improves the accuracy as well.\n- works good with both categorical and continuous variables.\n- You dont need to normalize the data. "}}