{"cell_type":{"3684cded":"code","ec184e05":"code","364d3f6f":"code","195f92c4":"code","3bf75293":"code","baffcc4e":"code","cdfbb252":"code","2b1aff22":"code","f0887eb7":"code","875f72a6":"code","3480c4b7":"markdown","adb611f4":"markdown","74327eff":"markdown","5acf37b9":"markdown","20a63d92":"markdown","ba5cba0c":"markdown","e8e961bd":"markdown","8e567665":"markdown","435c300c":"markdown","aa43ae0f":"markdown","af27c794":"markdown","4c38035d":"markdown","be9b9a86":"markdown"},"source":{"3684cded":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\ntrain.head()\n# Any results you write to the current directory are saved as output.","ec184e05":"import matplotlib.pyplot as plt \nimport seaborn as sns \nfrom bokeh.plotting import figure, output_file, show","364d3f6f":"plt.scatter('LotArea','SalePrice', data=train)","195f92c4":"plt.scatter('LotArea','SalePrice', data=train)\n\nplt.xlabel('Lot Area')\nplt.ylabel('Sale Price')\nplt.title('Sale Price by Lot Area')","3bf75293":"plt.scatter('LotArea','SalePrice', data=train)\n\nplt.xlabel('Lot Area')\nplt.ylabel('Sale Price')\nplt.title('Sale Price by Lot Area')\n\n#feed the axis ranges in as ([xmin, xmax, ymin, ymax])\nplt.axis([0,55000, 0, 500000])","baffcc4e":"plt.scatter('LotArea','SalePrice', c= 'OverallQual', data=train)\n\nplt.xlabel('Lot Area')\nplt.ylabel('Sale Price')\nplt.title('Sale Price by Lot Area')\n\n#feed the axis ranges in as ([xmin, xmax, ymin, ymax])\nplt.axis([0,55000, 0, 500000])","cdfbb252":"#Creat a new dataframe with the variables that we want to look into\nqualPrice = train[['OverallQual', 'SalePrice']]\n#Create a boxplot of SalePrice grouped by the overall quality of the house\nqualPrice.boxplot(by='OverallQual')\nplt.show()","2b1aff22":"sns.pairplot(train, vars = ['SalePrice', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'GrLivArea', 'FullBath','HalfBath','BedroomAbvGr', 'TotalBsmtSF','1stFlrSF', '2ndFlrSF', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch','3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'YrSold'] )\nplt.show()","f0887eb7":"sns.pairplot(train, vars = ['SalePrice', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'GrLivArea', 'FullBath','HalfBath','BedroomAbvGr', 'TotalBsmtSF','1stFlrSF', '2ndFlrSF', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch','3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'YrSold'], kind=\"reg\" )\nplt.show()","875f72a6":"tooltips = [('Year-Built', '@YearBuilt'),\n           ('Floors', '@HouseStyle'),\n           ('Full-Bathrooms', '@FullBath'),\n           ]\nplot = figure( tooltips=tooltips,title=\"Sale Price by Lot Size\")\nplot.circle('LotArea', 'SalePrice', color=\"#42f450\", source=train)\noutput_file('housing.html')\nshow(plot)","3480c4b7":"The pairplot creates a grid of charts that have every feature of your dataframe on both the x and y axis. This allows you to see if there are any relationships without having to look at each realtionship individually. Seaborn also has the ability to add regression lines through your data to help you look for trends, and aid in predictions. If you want to do that you can use the code below and set kind to \"reg\".\n\n","adb611f4":"In this cell we will be importing some of the visualization libraries that are available for python.","74327eff":"Our plot is getting better! One thing to notice is that there are are a few outliers, especially on the lot size axis, that make it difficult to see any sort of trends in the bulk of sales. In order to deal with this we can change the X and Y axis of our plot with the following code.","5acf37b9":"We have our first basic plot! One thing to note is that there are no labels on our chart. This can make charts hard to understand for people that are seeing your graph without context. In order to add labels to our axises we can use the following code.","20a63d92":"In order to see the output of the Bokeh chart you will have to go to the latest version of [this link](https:\/\/www.kaggle.com\/iancornish\/data-science-club-visualization-day\/output?scriptVersionId=6907540) under the output tab and download the file 'housing.html'. A zip file containing the link to your chart will install and you can click on the 'housing.html' file in the zip folder to see your chart. ","ba5cba0c":"The first library that we will be using is pyplot. This is a good library for simple visualizations and is very simple to get started with. The tradeoff that you make with pyplot is that your visualizations might not be as aestetically pleasing compared to if you used a different library. We will cover a few types of visualizations, but if you would like to see what else you can do with pyplot you can find the API here: https:\/\/matplotlib.org\/api\/pyplot_api.html.","e8e961bd":"Now we start to see a loose positive correlation. I encourage you to play around with the axis ranges in the prior code block to see if you can find anything interesting, remember when you are exploring data it is always important to be curious \u263a. If we want to look at a categorical variable in this chart we can use the color to represent that. In the following code block we will look at the overall quality at the time of sale on a scale of one (dark blue) to ten (yellow).","8e567665":"Finally the last library that we will be looking at today is Bokeh, Bokeh is special because it allows you to interact with your data.  For example you can add tooltips to each circle that will give the user additional information when they hover over it.","435c300c":"Pyplot allows us to do a variety of visualizations. If we want to create a boxplot the code will look something like this. ","aa43ae0f":"Today we will be covering some very basic data visualizations. Visualization is a very important part of data exploration and it is important to be curious when exploring your data. I encourage you to try playing around with some of the visualizations to explore any relationships that you are interested in. We will continue to work with the housing dataset from last week's meeting. The first cell simply reads in our data and stores it in dataframes 'train' and 'test'.","af27c794":"This first visualization is a simple scatter plot looking at the relationship between the sale price of the property and the size of the lot. ","4c38035d":"Because pairplots are so big we are only going to look at our quantitative data for this example. In order to select the variables you set vars equal to the features that you want to include in your pariplot. \n\n*please note the following code block will take a long time to run","be9b9a86":"A scatter plot is a great way of visualizing your data to look for relationships which makes it a compelling way to start your data exploration process. Next we will look at the seaborn library which allows you to create scatterplots for all of your variables within one line of code so that you dont need to make individual charts. This visualization is known as a pairplot.  While we will just be focusing on pairplots today seaborn does offer other types of visualizations. The seaborn API can be found here: https:\/\/seaborn.pydata.org\/api.html"}}