{"cell_type":{"6bde51c6":"code","d3aa9e3c":"code","4db62eb5":"code","80ddb213":"code","9be553dd":"code","b763a771":"code","3dd5fa9a":"code","fcfaa728":"code","3817de29":"code","af47cc9d":"code","b5bead29":"code","b79c2ef9":"code","e868f56b":"code","dd38bb9a":"code","43a66bde":"code","1f6364af":"code","ad678090":"code","6d692a95":"code","5beb60ce":"code","7c7b2055":"code","e7775576":"code","6dead78a":"code","a64547d6":"code","ca9d083b":"code","b1527190":"code","188652df":"code","f25cdd58":"code","e25b0c13":"code","a54b11d6":"code","e76dad03":"code","62b25b88":"code","3bbf8f01":"code","6ec052fe":"code","212ab536":"code","93688adf":"code","b973cd85":"code","86c8c2a8":"code","71743769":"code","3118d9e7":"code","284906cb":"code","e2f3ba0e":"code","f1ab90ad":"code","62b14359":"code","354ffcf5":"code","688b7a23":"code","abf78919":"code","b3d0d7b9":"code","69e5332c":"code","3c042bf1":"code","bdb69a5e":"code","2bb1ee06":"code","2715b4a3":"markdown","52d78d35":"markdown","3b7b79b0":"markdown","aedbe4f7":"markdown","7776e3e7":"markdown","e6075260":"markdown","d334066c":"markdown","f0e7cd88":"markdown","96ab1fd0":"markdown","341a829f":"markdown","82ff81a8":"markdown","77cb5d6f":"markdown","4a085476":"markdown","8550ace0":"markdown","c9b270a9":"markdown","5b061efa":"markdown","c0980332":"markdown","6b6988f7":"markdown","2c050a4f":"markdown","b8ecbd91":"markdown","02b1d17d":"markdown","2a60c0af":"markdown","c2854d84":"markdown","b26b7b2b":"markdown","8883b61e":"markdown","3c21a964":"markdown","29495f4c":"markdown","1194ada1":"markdown","54e8f857":"markdown","1d28bfbc":"markdown","4375228d":"markdown","94aba801":"markdown","f8fcecde":"markdown","36794487":"markdown","0df2a800":"markdown","77862482":"markdown","4df3fc3c":"markdown","71bcfb29":"markdown","015baacf":"markdown","a6341dd8":"markdown","621685dd":"markdown","a8df7d30":"markdown","befe7d7c":"markdown","a47841f9":"markdown","e53db8af":"markdown","87754f7e":"markdown","09dcbad3":"markdown","f7f688aa":"markdown","36b05417":"markdown","12d9bb7e":"markdown","e2446043":"markdown"},"source":{"6bde51c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d3aa9e3c":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score","4db62eb5":"df = pd.read_csv('\/kaggle\/input\/automobile-dataset\/Automobile_data.csv')\ndf.head()","80ddb213":"df.isnull().sum(axis=0)","9be553dd":"df.info()","b763a771":"for col in df.columns:\n    if('?' in df[col].values):\n        print(col + \" = \" + str(len(df[df[col]=='?'])))","3dd5fa9a":"# Converting price column type to numeric & Dropping '?' entries from price column \ndf['price'] = df['price'].replace('?',np.nan)\ndf['price'] = pd.to_numeric(df['price'])\ndf = df[df['price'].notna()]\n\n# Dropping '?' from num-of-doors column \ndf['num-of-doors'] = df['num-of-doors'].replace('?',np.nan)\ndf = df[df['num-of-doors'].notna()]\ndf.info()","fcfaa728":"# Converting column type to numeric and replacing '?' with mean value\nnum_col = ['normalized-losses', 'bore',  'stroke', 'horsepower', 'peak-rpm']\nfor col in num_col:\n    df[col] = df[col].replace('?', np.nan)\n    df[col] = pd.to_numeric(df[col])\n    df[col].fillna(df[col].mean(), inplace=True)\ndf.head(10)","3817de29":"print(\"Columns in our dataset: \" , df.columns)","af47cc9d":"print(\"List of Numerical features: \" , df.select_dtypes(include=np.number).columns.tolist())\nprint(\"List of Categorical features: \" , df.select_dtypes(include=['object']).columns.tolist())","b5bead29":"corr = df[['symboling', 'normalized-losses', 'wheel-base', 'length', 'width', 'height', 'curb-weight', 'engine-size', \n           'bore', 'stroke', 'compression-ratio', 'horsepower', 'peak-rpm', 'city-mpg', 'highway-mpg', 'price']].corr()\nf,axes = plt.subplots(1,1,figsize = (15,15))\nsns.heatmap(corr,square=True,annot = True,linewidth = .5,center = 2,ax = axes)\n","b79c2ef9":"num = df.select_dtypes(include=np.number)\nnumcorr = num.corr()\nf,ax = plt.subplots(figsize=(15,3))\nsns.heatmap(numcorr.sort_values(by=['price'], ascending=False).head(1))\nplt.title(\" Numerical features correlation with price\", weight='bold', fontsize=20)\n\nplt.show()","e868f56b":"Num = numcorr['price'].sort_values(ascending=False).to_frame()\ncm = sns.light_palette(\"cyan\", as_cmap=True)\ns = Num.style.background_gradient(cmap=cm)\ns","dd38bb9a":"plt.figure(figsize=(10,3))\nplt.scatter(x=df['engine-size'], y=df['price'], color='blue', alpha=0.6)\nplt.title('Engine-size vs Price', weight='bold', fontsize=16)\nplt.xlabel('Engine-size', weight='bold', fontsize=12)\nplt.ylabel('Price', weight='bold', fontsize=12)\nplt.xticks(weight='bold')\nplt.yticks(weight='bold')\nplt.show()","43a66bde":"plt.figure(figsize=(10,3))\nplt.scatter(x=df['horsepower'], y=df['price'], color='blue', alpha=0.6)\nplt.title('Horsepower vs Price', weight='bold', fontsize=16)\nplt.xlabel('Horsepower', weight='bold', fontsize=12)\nplt.ylabel('Price', weight='bold', fontsize=12)\nplt.xticks(weight='bold')\nplt.yticks(weight='bold')\nplt.show()","1f6364af":"sns.displot(df['normalized-losses'])\nplt.show()\n\nsns.displot(df['wheel-base'], rug=True)\nplt.show()\n","ad678090":"sns.jointplot(data = df, x=df['engine-size'], y=df['horsepower'], kind=\"hex\")\nplt.show()","6d692a95":"sns.jointplot(data = df, x=df['engine-size'], y=df['horsepower'], hue=\"engine-location\")\nplt.show()","5beb60ce":"df.rename(columns={'body-style': 'bodystyle'}, inplace=True)\n\n# Figure Size\nfig, ax = plt.subplots(figsize=(9,6))\n\n# Horizontal Bar Plot\ntitle_cnt=df.bodystyle.value_counts().sort_values(ascending=False).reset_index()\nmn= ax.barh(title_cnt.iloc[:,0], title_cnt.iloc[:,1],edgecolor='black', color=sns.color_palette('pastel',len(title_cnt)))\n\n\n\n\n# Remove axes splines\nfor s in ['top','bottom','left','right']:\n    ax.spines[s].set_visible(False)\n\n# Remove x,y Ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Add padding between axes and labels\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\n\n# Add x,y gridlines\nax.grid(b=True, color='grey', linestyle='-.', linewidth=1, alpha=0.2)\n\n# Show top values \nax.invert_yaxis()\n\n# Add Plot Title\nax.set_title('Most frequent car body style',weight='bold',\n             loc='center', pad=10, fontsize=16)\nax.set_xlabel('Count', weight='bold')\n\n# Add annotation to bars\nfor i in ax.patches:\n    ax.text(i.get_width()+1, i.get_y()+0.5, str(round((i.get_width()), 2)),\n            fontsize=10, fontweight='bold', color='grey')\nplt.yticks(weight='bold')\nplt.xticks(weight='bold')\n\n\nplt.show()\n# Show Plot\nplt.show()","7c7b2055":"# Figure Size\nfig, ax = plt.subplots(figsize=(9,6))\n\n# Horizontal Bar Plot\ntitle_cnt=df.make.value_counts().sort_values(ascending=False).reset_index()\nmn= ax.barh(title_cnt.iloc[:,0], title_cnt.iloc[:,1],edgecolor='black', color=sns.color_palette('pastel',len(title_cnt)))\n\n\n\n\n# Remove axes splines\nfor s in ['top','bottom','left','right']:\n    ax.spines[s].set_visible(False)\n\n# Remove x,y Ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Add padding between axes and labels\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\n\n# Add x,y gridlines\nax.grid(b=True, color='grey', linestyle='-.', linewidth=1, alpha=0.2)\n\n# Show top values \nax.invert_yaxis()\n\n# Add Plot Title\nax.set_title('Car type',weight='bold',\n             loc='center', pad=10, fontsize=16)\nax.set_xlabel('Count', weight='bold')\n\n# Add annotation to bars\nfor i in ax.patches:\n    ax.text(i.get_width()+1, i.get_y()+0.5, str(round((i.get_width()), 2)),\n            fontsize=10, fontweight='bold', color='grey')\nplt.yticks(weight='bold')\nplt.xticks(weight='bold')\n\n\nplt.show()\n# Show Plot\nplt.show()","e7775576":"df.rename(columns={'drive-wheels': 'drivewheels'}, inplace=True)\n\n# Figure Size\nfig, ax = plt.subplots(figsize=(9,6))\n\n# Horizontal Bar Plot\ntitle_cnt=df.drivewheels.value_counts().sort_values(ascending=False).reset_index()\nmn= ax.barh(title_cnt.iloc[:,0], title_cnt.iloc[:,1],edgecolor='black', color=sns.color_palette('pastel',len(title_cnt)))\n\n\n\n\n# Remove axes splines\nfor s in ['top','bottom','left','right']:\n    ax.spines[s].set_visible(False)\n\n# Remove x,y Ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Add padding between axes and labels\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\n\n# Add x,y gridlines\nax.grid(b=True, color='grey', linestyle='-.', linewidth=1, alpha=0.2)\n\n# Show top values \nax.invert_yaxis()\n\n# Add Plot Title\nax.set_title('Drive wheels',weight='bold',\n             loc='center', pad=10, fontsize=16)\nax.set_xlabel('Count', weight='bold')\n\n# Add annotation to bars\nfor i in ax.patches:\n    ax.text(i.get_width()+1, i.get_y()+0.5, str(round((i.get_width()), 2)),\n            fontsize=10, fontweight='bold', color='grey')\nplt.yticks(weight='bold')\nplt.xticks(weight='bold')\n\n\nplt.show()\n# Show Plot\nplt.show()","6dead78a":"# For statistical description of numerical columns\ndf.describe() ","a64547d6":"# Numerical Columns\ndf.select_dtypes(include=np.number).columns.tolist()","ca9d083b":"# Taking first 6 columns\nnumeric_cols = ['symboling', 'normalized-losses', 'wheel-base', 'length', 'width', 'height'] \nplt.figure(figsize=(12,8))\nplt.title(\"Numerical Variables in Automobile Dataset\")\ndf[numeric_cols].boxplot(color='blue')\nplt.show()","b1527190":"# Taking rest of the numeric columns\nnumeric_cols = ['curb-weight', 'engine-size', 'bore', 'stroke', 'compression-ratio', 'horsepower', 'peak-rpm', 'city-mpg', 'highway-mpg']\nplt.figure(figsize=(12,15))\nplt.title(\"Numerical Variables in Automobile Dataset\")\ndf[numeric_cols].boxplot(color='blue')\nplt.show()","188652df":"df.rename(columns={'normalized-losses': 'normalizedlosses', 'peak-rpm': 'peakrpm'}, inplace=True)\ndf.columns","f25cdd58":"df['normalizedlosses'].unique()","e25b0c13":"df['normalizedlosses'] = df['normalizedlosses'].replace(256.0, np.nan)\ndf['normalizedlosses'].fillna(df['normalizedlosses'].mean(), inplace=True)\ndf['normalizedlosses'] = df['normalizedlosses'].replace(231.0, np.nan)\ndf['normalizedlosses'].fillna(df['normalizedlosses'].mean(), inplace=True)\ndf['normalizedlosses'].unique()","a54b11d6":"df['peakrpm'].unique()","e76dad03":"df[df.peakrpm == 6600.0]","62b25b88":"# Dropping both entries\ni = df[((df.peakrpm == 6600.0))].index\ndf = df.drop(i)","3bbf8f01":"df.select_dtypes(include=['object']).copy().head()","6ec052fe":"print(df[\"num-of-doors\"].value_counts())\nprint(df[\"num-of-cylinders\"].value_counts())","212ab536":"cleanup_nums = {\"num-of-doors\":     {\"four\": 4, \"two\": 2},\n                \"num-of-cylinders\": {\"four\": 4, \"six\": 6, \"five\": 5, \"eight\": 8,\n                                  \"two\": 2, \"twelve\": 12, \"three\":3 }}\ndf = df.replace(cleanup_nums)\ndf.head()","93688adf":"print(df['bodystyle'].unique())\nprint(df['drivewheels'].unique())","b973cd85":"df = pd.get_dummies(df, columns=[\"bodystyle\", \"drivewheels\"], prefix=[\"body\", \"drive\"])\ndf.head()","86c8c2a8":"df[\"engine-type\"].value_counts()","71743769":"df[\"OHC_Code\"] = np.where(df[\"engine-type\"].str.contains(\"ohc\"), 1, 0)\ndf[[\"make\", \"engine-type\", \"OHC_Code\"]].head()","3118d9e7":"from sklearn.preprocessing import OrdinalEncoder\n\nord_enc = OrdinalEncoder()\ndf[\"make_code\"] = ord_enc.fit_transform(df[[\"make\"]])\ndf[[\"make\", \"make_code\"]].head(11)","284906cb":"print(df.columns)","e2f3ba0e":"df.select_dtypes(include=np.number).columns.tolist()","f1ab90ad":"feed = df[['symboling', 'normalizedlosses', 'wheel-base', 'length', 'width', 'height', 'curb-weight', 'engine-size', 'bore', 'stroke', \n           'compression-ratio', 'horsepower', 'peakrpm', 'city-mpg', 'highway-mpg', 'price', 'num-of-doors', 'num-of-cylinders', 'body_convertible', \n           'body_hardtop', 'body_hatchback', 'body_sedan', 'body_wagon', 'drive_4wd', 'drive_fwd', 'drive_rwd', 'OHC_Code', 'make_code']]\nfeed.info()","62b14359":"# Taking all independent variable columns\ndf_train_x = feed.drop('price',axis = 1)\ndf_train_x.describe()","354ffcf5":"# Target variable column\ndf_train_y = feed['price']\ndf_train_y.describe","688b7a23":"x_train, x_test, y_train, y_test = train_test_split(df_train_x, df_train_y, test_size=0.15, random_state=42)","abf78919":"reg = LinearRegression().fit(x_train, y_train)\npredictions = reg.predict(x_test)","b3d0d7b9":"print(\"r2_score is : \" , r2_score(y_test, predictions))","69e5332c":"sns.regplot(x = y_test, y = predictions)","3c042bf1":"from sklearn.ensemble import GradientBoostingRegressor\nreg = GradientBoostingRegressor().fit(x_train, y_train)\npredictions = reg.predict(x_test)","bdb69a5e":"print(\"r2_score is : \" , r2_score(y_test, predictions))","2bb1ee06":"sns.regplot(x = y_test, y = predictions)","2715b4a3":"## (b) Correlation between numerical features and target Price","52d78d35":"In normalized-losses column most of the values are below 200 but maximum value is 256 that's weird!\nLet's visualize the numerical quantities in our dataset as boxplots, to have a better sense of the outliers.","3b7b79b0":"## (c) Univariate Distribution \nPicking one continuous variable and checking its distribution.","aedbe4f7":"**Boxplot for Visualizing Outliers**","7776e3e7":"**1 outlier in peak-rpm**","e6075260":"## (b) Splitting of Training & Testing sets","d334066c":"## **r2_score of Gradient Boosting Regressor**","f0e7cd88":"# **6. Building Machine Learning Model** \ud83e\udd16","96ab1fd0":"Label encoding is simply converting each value in a column to a number.","341a829f":"**2 outliers in normalized-losses column.**","82ff81a8":"## (b) Dummy Variable Encoding for body-style column and drive-wheels","77cb5d6f":"**Example of a strong correlation between 2 numerical features: price and horsepower**","4a085476":"# **(B) Gradient Boosting Regressor Model**","8550ace0":"# **2. Loading Automobile Dataset** \ud83d\udcca","c9b270a9":"# **1. Importing Necessary Libraries** \ud83d\udcda","5b061efa":"## **r2_score of Linear Regression**","c0980332":"This seems like a duplicate entry. Among independent variables only body-style is different. Let's remove these 2 entries.","6b6988f7":"## Observations:\nNow we start analysing our dataset but before that we need to do some data preprocessing in order to handle missing values and outliers. As you can there are some '?' in normalized-losses column. ","2c050a4f":"## (a) Correlation Between Numerical Features","b8ecbd91":"* **For normalized-losses outliers: Replace with mean value.**\n* **For peak-rpm: Remove outlier entry.**","02b1d17d":"## (e) Visualization for Categorical Variables","2a60c0af":"**No missing values.**","c2854d84":"## Visualization","b26b7b2b":"**To have a better idea, we sort the features according to their correlation with the price variable**","8883b61e":"## (a) Checking for missing values","3c21a964":"Interesting! The engine-size,curb-weight, horsepower have the highest correlation values with the price.\n**Example of a strong correlation between 2 numerical features: price and engine-size**","29495f4c":"## (d) Ordinal Encoding for make column","1194ada1":"**Now we'll fit our linear regression & Gradient Boosting Regressor models on these numerical variables.**","54e8f857":"# **(A) Linear Regression Model**","1d28bfbc":"## (a) Find and Replace: num-of-doors & num-of-cylinders\nThere are two columns of data where the values are words used to represent numbers: the number of cylinders and number of doors on the car. ","4375228d":"## (d) Bivariate Distribution","94aba801":"**Observations:**\n* There are 41 '?' in normalized losses column\n* Others have 2-4 entries with '?'.\n\n**To handle**\n* We will drop '?' entries of price column & num-of-doors column.\n* We will replace '?' with mean value for every other column.","f8fcecde":"**Removing '?' and changing data type**","36794487":"## (a) Checking Outliers","0df2a800":"For the sake of discussion, maybe all we care about is whether or not the engine is an Overhead Cam (OHC) or not. In other words, the various versions of OHC are all the same for this analysis.","77862482":"## **Gradient Boosting Regressor with r2 score of 0.93 performed better than Linear Regression with r2 score of 0.90**","4df3fc3c":"# **Computation for Categorical Variables**","71bcfb29":"## (c) Custom Binary Encoding for engine-type","015baacf":"**Printing all categorical variable columns**","a6341dd8":"\nInitially we had 205 entries, and now we have 201 entries because we've dropped 4 '?' entries from price column and 2 entries from num-of-doors column.","621685dd":"## (a) Preparing Training and Testing datasets","a8df7d30":"## (b) Handling Missing Values","befe7d7c":"# **4. Exploratory Data Analysis** \ud83d\udcc9","a47841f9":"**Observations:**\n* All columns have 205 non null entries but as we saw in head entries '?' are present which are actually missing values only.\n* Columns with numerical values are of object type. For e.g normalized-losses, bore, stroke, horsepower, peak-rpm, price.","e53db8af":"Let's dig in more into the data, those are just the numerical features. I assume that categorical features will be very important like body-style.","87754f7e":"# **5. Feature Engineering** \u2699\ufe0f","09dcbad3":"# **3. Data Preprocessing (Cleaning) \ud83e\uddf9**","f7f688aa":"# Task Details \ud83d\udcdd\nPredict the price of the car based on the features in the dataset.\n\n# Evaluation \u2714\ufe0f\nA model with good r2 score","36b05417":"# **Selecting Necessary Columns for ML Model**","12d9bb7e":"## (b) Handling Outliers","e2446043":"**Checking total entries with '?' in each column**"}}