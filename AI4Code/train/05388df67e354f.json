{"cell_type":{"7f50a1fb":"code","faa000a1":"code","a1277889":"code","7e4a9817":"code","191f8602":"code","8060740b":"code","9f45ce35":"code","c8cbfb94":"code","967e8460":"code","4e0facee":"code","8ffc156a":"code","8feb5b2c":"code","4f66c7b0":"code","9405a53b":"code","5d173a77":"code","5e3ba8c9":"code","14a00b50":"code","485c16fb":"code","991bf932":"code","c232aa24":"code","bae77cc3":"code","e16d3bf6":"code","3a6b73af":"code","bf55c797":"code","5288ed5a":"code","4672c270":"code","ccc1ff82":"code","60612757":"code","01c46f76":"code","e6f43243":"code","7baf97ad":"code","1703381f":"code","d2b1c968":"code","a9340d3e":"code","321c9c64":"code","c7e3612b":"code","4f782017":"code","9b26175a":"code","948de33c":"code","e560d334":"code","6d91d6c7":"code","655eb409":"code","a8d27e4f":"code","c9c7ec8d":"code","725a7d3e":"code","ce0fec1a":"code","a34c7fe3":"code","e0970497":"code","19a33df8":"code","5faa0397":"code","aa9392c9":"code","fc8cd6f4":"code","8f83259c":"code","67614e55":"code","d79f018d":"code","e460730d":"code","7e555e9a":"code","b6cb629b":"code","a9693f81":"code","1e8cbd17":"code","50741b21":"code","e19015dd":"code","a132af40":"code","020eab89":"code","ccaa61bc":"code","faf7d3d6":"code","ac8a3fb8":"code","9416247a":"code","a1a9af9e":"code","2c78a0f0":"code","40ec9a9f":"code","dba9c2c9":"code","4096d9d1":"code","24ec49cb":"code","374c971f":"code","2436e287":"code","f8d5b246":"code","82b1fafd":"code","ad6ec873":"code","77ee2879":"code","d9a23e4a":"code","0519014d":"code","052cabc2":"code","86f9cd0f":"code","9137cc0f":"code","273004cd":"code","1408b16e":"code","9f71a497":"code","24bc543b":"code","cc77ccee":"code","eb16dcf6":"code","3239d20e":"code","0bf81f58":"code","f56bac20":"code","811407d7":"code","db70262e":"code","bc9b61a0":"code","e0fea915":"code","1384b3e2":"code","91bcb94c":"code","2eea4e90":"code","6a73e789":"code","e14fcea4":"code","de3b5678":"code","6f3e2974":"code","b2249e1a":"code","d8d09f32":"code","14ac834e":"code","66816b09":"markdown","543b2ee4":"markdown","c07c80bb":"markdown","f0b45ae7":"markdown","d2b83ee2":"markdown","37d398c0":"markdown","18e2ae21":"markdown","f6f9adbb":"markdown","49abe4bf":"markdown","602d6abe":"markdown"},"source":{"7f50a1fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","faa000a1":"import matplotlib.pyplot as plt","a1277889":"import seaborn as sns","7e4a9817":"import warnings\nwarnings.filterwarnings(\"ignore\")","191f8602":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","8060740b":"df_train.head()","9f45ce35":"df_train.describe()","c8cbfb94":"df_train.info()","967e8460":"df_train.isnull().sum()","4e0facee":"torr = df_train.corr()\nplt.figure(figsize = (12,7))\nax = sns.heatmap(torr,annot = True)","8ffc156a":"df_train['Survived'].value_counts()","8feb5b2c":"df_train['Sex'].value_counts()","4f66c7b0":"round(((df_train[(df_train.Survived == 1)].SibSp != 0).sum()\/342)*100,2)","9405a53b":"round(((df_train[(df_train.Survived == 1)].SibSp != 0).sum()\/549)*100,2)","5d173a77":"round(((df_train[(df_train.Survived == 1)].Parch != 0).sum()\/342)*100,2)","5e3ba8c9":"round(((df_train[(df_train.Survived == 1)].Parch != 0).sum()\/549)*100,2)","14a00b50":"plt.figure(figsize = (12,7))\nsns.set_theme(style = 'whitegrid')\nsns.countplot(x = 'Sex', hue = 'Survived', data = df_train)","485c16fb":"fig ,ax =plt.subplots(nrows=1, ncols=2, figsize=(18,8))\nsns.set_theme(style = 'whitegrid')\nsns.countplot(x='Pclass', data = df_train, ax=ax[0])\nsns.countplot(x = 'Pclass', hue = 'Survived', data = df_train, ax=ax[1])","991bf932":"plt.figure(figsize = (12,5))\nsns.set_theme(style = 'whitegrid')\nsns.boxplot(x='Survived', y = 'Age', data=df_train)","c232aa24":"plt.figure(figsize = (12,5))\nsns.set_theme(style = 'whitegrid')\nsns.violinplot(x='Survived', y = 'Fare', data=df_train, hue = 'Sex')","bae77cc3":"plt.figure(figsize = (12,5))\nsns.set_theme(style = 'whitegrid')\nsns.countplot(x='Survived', hue = 'Parch', data=df_train)","e16d3bf6":"plt.figure(figsize = (12,5))\nsns.set_theme(style = 'whitegrid')\nsns.countplot(x='Survived', hue = 'SibSp', data=df_train)","3a6b73af":"plt.figure(figsize = (12,5))\nsns.set_theme(style = 'whitegrid')\nsns.countplot(x='Survived', hue = 'Embarked', data=df_train)","bf55c797":"df_train['Pclass'].value_counts()","5288ed5a":"df_train['Pclass'].isnull().sum()","4672c270":"df_train.groupby('Pclass').mean()","ccc1ff82":"plt.figure(figsize = (12,7))\nsns.set_theme(style = 'whitegrid')\nsns.countplot(x='Pclass', hue = 'Sex',data = df_train)","60612757":"plt.figure(figsize = (12,7))\nsns.set_theme(style = 'whitegrid')\nsns.boxplot(x='Pclass', y = 'Age',data = df_train)","01c46f76":"plt.figure(figsize = (12,7))\nsns.set_theme(style = 'whitegrid')\nsns.stripplot(x='Pclass', y = 'Fare',hue = 'Sex', data = df_train)","e6f43243":"plt.figure(figsize = (12,7))\nsns.set_theme(style = 'whitegrid')\nsns.countplot(x='Pclass', hue = 'Embarked',data = df_train)","7baf97ad":"df_train['Name']","1703381f":"df_train['Name'].isnull().sum()","d2b1c968":"df_train['Age'].value_counts()","a9340d3e":"df_train.describe()","321c9c64":"sns.distplot(x= df_train['Age'])","c7e3612b":"df_train[(df_train['Age'] > 20) &(df_train['Survived'] == 1)].groupby('Sex').mean()","4f782017":"df_train['Age']= df_train['Age'].fillna(df_train['Age'].median(), axis=0)","9b26175a":"df_train['Age'].describe()","948de33c":"df_train['SibSp'].describe()","e560d334":"df_train['SibSp'].value_counts()","6d91d6c7":"df_train.loc[df_train['SibSp'] == 8]","655eb409":"df_train[((df_train['SibSp'] > 0) | (df_train['Parch'] > 0)) & (df_train['Pclass'] == 3)].Survived.sum()\/ df_train[((df_train['SibSp'] > 0) | (df_train['Parch'] > 0)) & (df_train['Pclass'] == 3)].Survived.count()","a8d27e4f":"df_train[((df_train['SibSp'] > 0) | (df_train['Parch'] > 0)) & (df_train['Pclass'] == 2)].Survived.sum()\/ df_train[((df_train['SibSp'] > 0) | (df_train['Parch'] > 0)) & (df_train['Pclass'] == 2)].Survived.count()","c9c7ec8d":"df_train[((df_train['SibSp'] > 0) | (df_train['Parch'] > 0)) & (df_train['Pclass'] == 1)].Survived.sum()\/ df_train[((df_train['SibSp'] > 0) | (df_train['Parch'] > 0)) & (df_train['Pclass'] == 1)].Survived.count()","725a7d3e":"plt.figure(figsize=(12,7))\nsns.countplot(x='SibSp', hue='Survived', data= df_train)","ce0fec1a":"plt.figure(figsize=(12,7))\nsns.countplot(x='SibSp', hue='Sex', data= df_train)","a34c7fe3":"df_train['Parch'].describe()","e0970497":"df_train['Parch'].isnull().sum()","19a33df8":"df_train['Parch'].value_counts()","5faa0397":"df_train.loc[df_train['Parch'] == 3]","aa9392c9":"plt.figure(figsize=(12,7))\nsns.countplot(x = 'Parch', hue='Survived', data = df_train)","fc8cd6f4":"plt.figure(figsize=(12,7))\nsns.countplot(x = 'Parch', hue='Sex', data = df_train)","8f83259c":"plt.figure(figsize=(12,7))\nsns.stripplot(x = 'Parch', y='Fare', data = df_train)","67614e55":"df_train['Ticket'].describe()","d79f018d":"df_train['Ticket'].value_counts()","e460730d":"df_train['Ticket'].isnull().sum()","7e555e9a":"df_train.loc[df_train['Ticket'] == \"347088\"]","b6cb629b":"df_train['Fare'].describe()","a9693f81":"df_train['Fare'].value_counts()","1e8cbd17":"df_train['Fare'].isnull().sum()","50741b21":"df_train['Fare'].fillna(df_train['Fare'].mean(), axis=0, inplace=True)","e19015dd":"plt.figure(figsize=(12,7))\nsns.scatterplot(x='Fare', y='Age', data= df_train)","a132af40":"df_train['Cabin'].describe()","020eab89":"df_train.drop('Cabin', axis=1, inplace=True)","ccaa61bc":"df_train.info()","faf7d3d6":"df_train['Embarked'].describe()","ac8a3fb8":"df_train['Embarked'].isnull().sum()","9416247a":"df_train['Embarked'].fillna(df_train['Embarked'].mode(), axis=0)","a1a9af9e":"df_train['Embarked'].isnull().sum()","2c78a0f0":"type(df_train[df_train['Embarked'].isnull()].Embarked.iloc[0])","40ec9a9f":"df_train['Embarked'] = df_train['Embarked'].astype(str)","dba9c2c9":"df_train['Embarked'].isnull().sum()","4096d9d1":"df_train['Embarked'].replace('nan', 'S', inplace=True)","24ec49cb":"df_train['Family'] = df_train['SibSp'] + df_train['Parch']","374c971f":"df_train.head()","2436e287":"df_train['Title'] = df_train['Name'].map(lambda x : (x.split(',')[1].split('.')[0].strip()))","f8d5b246":"df_train['Title'].unique()","82b1fafd":"df_train['Title'].value_counts()","ad6ec873":"df_train['Title'] = df_train['Title'].replace(['Sir','Capt','Don','Col','Jonkheer','Rev','Major'], 'Mr')\n\ndf_train['Title'] = df_train['Title'].replace(['Dona','the Countess','Lady'], 'Mrs')\n\ndf_train['Title'] = df_train['Title'].replace(['Ms','Mlle','Mme'], 'Miss')","77ee2879":"df_train['Title'].value_counts()","d9a23e4a":"df_train = df_train.drop(['Name', 'Ticket', 'PassengerId'], axis=1)","0519014d":"df_train.head()","052cabc2":"from sklearn.preprocessing import LabelEncoder","86f9cd0f":"le=LabelEncoder()","9137cc0f":"df_train['Sex'] = le.fit_transform(df_train['Sex'])\ndf_train['Embarked'] = le.fit_transform(df_train['Embarked'])\ndf_train['Title'] = le.fit_transform(df_train['Title'])","273004cd":"df_train.head()","1408b16e":"X= df_train.drop('Survived', axis=1)","9f71a497":"y=df_train['Survived']","24bc543b":"from sklearn.model_selection import train_test_split","cc77ccee":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=123)","eb16dcf6":"result = {}","3239d20e":"from sklearn.linear_model import LogisticRegression","0bf81f58":"lr= LogisticRegression(C=0.04)","f56bac20":"clf= lr.fit(X_train, y_train)","811407d7":"y_pred = lr.predict(X_test)","db70262e":"from sklearn.metrics import accuracy_score","bc9b61a0":"result['Logistic Regression'] = accuracy_score(y_test,y_pred)","e0fea915":"result['Logistic Regression'] ","1384b3e2":"from sklearn.svm import SVC","91bcb94c":"svm = SVC(random_state=1, gamma=0.006, C=11, kernel=\"rbf\")\nclf= svm.fit(X_train, y_train)\ny_pred = svm.predict(X_test)\nresult['SVC'] = accuracy_score(y_test,y_pred)\nresult['SVC'] ","2eea4e90":"from sklearn.neighbors import KNeighborsClassifier","6a73e789":"knn = KNeighborsClassifier(n_neighbors=22)\nclf= knn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nresult['KNeighborsClassifier'] = accuracy_score(y_test,y_pred)\nresult['KNeighborsClassifier'] ","e14fcea4":"from sklearn.tree import DecisionTreeClassifier","de3b5678":"dt = DecisionTreeClassifier(random_state=6, max_depth=10, min_samples_split=2)\nclf= dt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)\nresult['DecisionTreeClassifier'] = accuracy_score(y_test,y_pred)\nresult['DecisionTreeClassifier']","6f3e2974":"from sklearn.ensemble import RandomForestClassifier","b2249e1a":"rfc = RandomForestClassifier(\n    max_features= 5, \n    min_samples_split= 6,\n    min_samples_leaf=1,\n    n_estimators= 700,\n    random_state=42\n    )\nclf= rfc.fit(X_train, y_train)\ny_pred = rfc.predict(X_test)\nresult['RandomForestClassifier'] = accuracy_score(y_test,y_pred)\nresult['RandomForestClassifier'] ","d8d09f32":"res_df = pd.DataFrame(data=result.values(), index = result.keys(), columns= ['accuracy_score'])","14ac834e":"res_df","66816b09":"**8.Fare**","543b2ee4":"**2.Pclass**","c07c80bb":"**1.Survived**","f0b45ae7":"**3.Name**","d2b83ee2":"**7.Ticket**","37d398c0":"**10.Embarked**","18e2ae21":"**5.Sibsp**","f6f9adbb":"**4.Age**","49abe4bf":"**6.Parch**","602d6abe":"**9.Cabin**"}}