{"cell_type":{"b890dcb4":"code","c5b0e614":"code","81de1dc4":"code","45db947f":"code","9feeef49":"code","3fdc5831":"code","6a187c9c":"code","f4d28dc1":"code","02607611":"code","15ca90a1":"code","5f774b80":"code","94ad090b":"code","f029e5c6":"code","cb2a129e":"code","12d60c03":"code","8e001392":"code","83950e70":"code","7108038d":"code","3b1ab4ab":"code","8e167503":"markdown","b843f27b":"markdown","d52d54c0":"markdown","da3f5702":"markdown","82f42287":"markdown"},"source":{"b890dcb4":"import torch\nimport torch.nn as nn\nimport torchvision.datasets as datasets\nfrom torch.utils.data import DataLoader\nimport torchvision.transforms as transforms","c5b0e614":"# defining transforms for mnist\nmy_transforms = transforms.Compose([\n    transforms.ToTensor()\n])","81de1dc4":"train_dataset = datasets.FashionMNIST(root=\".\/data\", download=True, transform=my_transforms, train=True)\ntest_dataset = datasets.FashionMNIST(root=\".\/data\", download=True, transform=my_transforms, train=False)","45db947f":"batch_size=128\ntrain_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n\n# here we are looking at test_dataloader as more of a validation set\ntest_dataloader = DataLoader(test_dataset, batch_size=batch_size, shuffle=True)","9feeef49":"import matplotlib.pyplot as plt\n\nfor X, y in train_dataloader:\n    print(\"Shape of X: \", X.shape)\n    print(\"Length of y: \", len(y))\n    break","3fdc5831":"plt.imshow(X[0].permute(1,2,0))\nprint(y[0])","6a187c9c":"def look_in_net(net, X):\n    out = X\n    for layer in net:\n        out = layer(out)\n        print(f\"For layer : {layer.__class__.__name__} shape : {out.shape}\")","f4d28dc1":"import torch.nn.functional as F\n\nrandom_cnn = nn.Sequential(nn.Conv2d(1, 96, kernel_size=3,stride=1, padding=1),\n                          nn.ReLU(),\n                          nn.Conv2d(96, 128, kernel_size=5, padding=2),\n                          nn.ReLU(),\n                          nn.Flatten(),\n                          nn.Linear(128 * 7 * 7, 240), \n                          nn.Dropout(p=0.5),\n                          nn.Linear(240, 10))\n\n#from https:\/\/www.analyticsvidhya.com\/blog\/2019\/10\/building-image-classification-models-cnn-pytorch\/\nrandom_cnn = nn.Sequential( nn.Conv2d(1, 4, kernel_size=3, stride=1, padding=1),\n                            nn.BatchNorm2d(4),\n                            nn.ReLU(inplace=True),\n                            nn.MaxPool2d(kernel_size=2, stride=2),\n                           \n                            nn.Conv2d(4, 4, kernel_size=3, stride=1, padding=1),\n                            nn.BatchNorm2d(4),\n                            nn.ReLU(inplace=True),\n                            nn.MaxPool2d(kernel_size=2, stride=2),\n                           \n                            nn.Flatten(),\n                            nn.Linear(4 * 7 * 7, 40), \n                            nn.Dropout(p=0.5),\n                            nn.Linear(40, 10)\n                           )\n\n#from https:\/\/www.kaggle.com\/sdelecourt\/cnn-with-pytorch-for-mnist\nrandom_cnn = nn.Sequential(\n                  nn.Conv2d(1, 32, kernel_size=5),\n                  nn.ReLU(),\n                  nn.Conv2d(32, 32, kernel_size=5),\n                  nn.MaxPool2d(2),\n                  nn.ReLU(),\n                  nn.Dropout(p=0.5),\n                  nn.Conv2d(32,64, kernel_size=5),\n                  nn.MaxPool2d(2),\n                  nn.ReLU(),\n                  nn.Dropout(p=0.5),\n                  nn.Flatten(),\n                  nn.Linear(3*3*64, 256),\n                  nn.Dropout(p=0.5),\n                  nn.Linear(256, 10)\n)","02607611":"X.shape","15ca90a1":"\nclass CNN(nn.Module):\n    def __init__(self):\n        super(CNN, self).__init__()\n        self.conv1 = nn.Conv2d(1, 32, kernel_size=5)\n        self.conv2 = nn.Conv2d(32, 32, kernel_size=5)\n        self.conv3 = nn.Conv2d(32,64, kernel_size=5)\n        self.fc1 = nn.Linear(3*3*64, 256)\n        self.fc2 = nn.Linear(256, 10)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        #x = F.dropout(x, p=0.5, training=self.training)\n        x = F.relu(F.max_pool2d(self.conv2(x), 2))\n        x = F.dropout(x, p=0.5, training=self.training)\n        x = F.relu(F.max_pool2d(self.conv3(x),2))\n        x = F.dropout(x, p=0.5, training=self.training)\n        x = x.view(-1,3*3*64 )\n        x = F.relu(self.fc1(x))\n        x = F.dropout(x, training=self.training)\n        x = self.fc2(x)\n        return F.log_softmax(x, dim=1)","5f774b80":"\n\nnet = CNN()\n\nnet(X)","94ad090b":"look_in_net(random_cnn, X)","f029e5c6":"from fastai.vision.all import *","cb2a129e":"optimizer = torch.optim.Adam(random_cnn.parameters(), lr=0.001)","12d60c03":"data = DataLoaders(train_dataloader, test_dataloader)\nlearner = Learner(data, CNN(), loss_func=F.nll_loss, opt_func=Adam, metrics=accuracy)\n\n# cannot use cross entropy loss, booleanvalue error","8e001392":"learner.lr_find()","83950e70":"learner.fit_one_cycle(1,2e-2)","7108038d":"learner.lr_find()","3b1ab4ab":"learner.fit_one_cycle(10,2e-4)","8e167503":"creating dataloader out of the dataset.","b843f27b":"now lets look at our dataset.","d52d54c0":"importing the dataset from torchvision.","da3f5702":"Now using fastai","82f42287":"Now lets create our model."}}