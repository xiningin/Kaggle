{"cell_type":{"ed2a6346":"code","ad7eb31d":"code","43ea49e6":"code","5784715c":"code","682ac6ef":"code","09d3917a":"code","d70fcfe5":"code","96ad96fd":"code","e8b2c186":"code","8a953aae":"code","f30cb783":"code","b02d1410":"code","47aeb2f4":"code","dc038988":"code","726f2736":"code","9aba153d":"code","db8b48a6":"code","2e7dc83c":"code","9b603764":"code","2afde07b":"code","5fa1fb15":"code","e4c1e9e6":"code","a06f9b0c":"code","0100a8d6":"code","adea1d63":"code","80b16917":"code","e97a5073":"code","7424fe8c":"code","ccb0802f":"code","6b2e7b20":"code","f88094f1":"code","6a325156":"code","8fd84c1f":"code","ea80125f":"code","ee8b3c0a":"code","654a94a2":"code","332444d5":"code","477e0223":"code","3259c445":"code","c724cefc":"code","6e29f660":"code","cc78e4c4":"code","7f2a58be":"code","a87be2df":"code","793f0fba":"code","d2e1bfce":"code","9c9899e1":"code","a70f5885":"code","61ec4fb6":"code","80d8c5ea":"code","de72c918":"code","915f3a48":"code","e87418ff":"code","d13370a7":"code","ac18477e":"code","88be7ad2":"code","9a1b80fa":"code","aa43f007":"code","1eafa2e9":"code","246a6cfd":"code","189a9a74":"code","02761f15":"code","d54b4c09":"code","b94a202b":"code","465db9da":"code","8c1e9498":"code","cdfcc6c2":"code","5deebb83":"code","cbbe2104":"code","93e41e91":"code","bcee8ad7":"code","fced4690":"code","a5fb83d1":"code","90520508":"code","3984add3":"code","00636cdc":"code","aeb3fa92":"markdown","1ff4b10c":"markdown","1480391a":"markdown","ba60a2aa":"markdown","a572fa63":"markdown","53a83d80":"markdown","b5b51995":"markdown","50eaff47":"markdown","84907a6c":"markdown","315e99a2":"markdown","1ae04865":"markdown","a9cd8960":"markdown","e193e0eb":"markdown","6887b341":"markdown","7b6a1adf":"markdown","2441e93b":"markdown","5eaa4782":"markdown","d450806d":"markdown","24ea5f35":"markdown","b155f24c":"markdown","ff6971da":"markdown","84db4209":"markdown","06aa123d":"markdown","53f1f75d":"markdown","6a588e30":"markdown","5181a046":"markdown","a00d00f2":"markdown"},"source":{"ed2a6346":"import numpy as np \nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ad7eb31d":"df_team2020 = pd.read_csv(\"\/kaggle\/input\/ipl-2020-player-performance\/IPL 2020 Squads.csv\",encoding=\"latin1\")\ndf_2020 = pd.read_csv(\"\/kaggle\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv\")\ndf_0819 = pd.read_csv(\"\/kaggle\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv\")\ndf_train = pd.read_csv(\"\/kaggle\/input\/ipl-2020-player-performance\/Training.csv\")","43ea49e6":"df_team2020.head()","5784715c":"df_2020.head()","682ac6ef":"df_0819.head()","09d3917a":"df_train.columns","d70fcfe5":"df_train[[\"match_id\",\"Player_name\"]] = df_train.Id.str.split(\"_\",expand=True)\ndf_train[\"match_id\"].astype(\"int64\")\ndf_train.drop(['Id'],axis=1,inplace=True)","96ad96fd":"df_train = df_train.reindex(columns=['match_id', 'Player_name', 'Runs', 'Boundaries', 'Six', 'Fifty', 'Hundred', 'Duck', \n                         'Batting_Points', 'Wickets', '4W_Haul', '5W_Haul', 'Maidens','Bowling_Points', \n                         'Total Points'])","e8b2c186":"df_train.head()","8a953aae":"df_0819.columns","f30cb783":"df_0819.drop(columns=['player_of_match', 'venue', 'city', 'umpire1', 'umpire2', 'umpire3', 'date', 'toss_winner', 'toss_decision', \"dl_applied\", \"win_by_runs\", \"win_by_wickets\"],\n             axis=1,inplace=True)\ndf_0819.head()","b02d1410":"df_0819[df_0819['result'] != \"normal\"]","47aeb2f4":"df_train[\"match_id\"] = df_train[\"match_id\"].astype(int)\ndf_train.info()","dc038988":"# merge two dataset on the match_id column.\nmerge_df = pd.merge(left=df_train, right=df_0819, left_on=\"match_id\", right_on=\"match_id\")","726f2736":"merge_df[merge_df[\"result\"] == 'no result']","9aba153d":"merge_df.isnull().sum()","db8b48a6":"merge_df.dropna(how=\"any\",axis=0,inplace=True)","2e7dc83c":"fig,ax = plt.subplots(figsize=(15,10))\nax = sns.heatmap(merge_df.corr(),annot=True)\nplt.show()","9b603764":"merge_df.drop(columns=['Runs','Boundaries','Wickets'],axis=1,inplace=True)","2afde07b":"fig,ax = plt.subplots(figsize=(15,10))\nax = sns.heatmap(merge_df.corr(),annot=True)\nplt.show()","5fa1fb15":"categorical_columns = [col for col in merge_df.columns if merge_df[col].dtype == \"object\"]\nnumerical_columns = [col for col in merge_df.columns if merge_df[col].dtype != \"object\"]\n\nprint(f\"total categorical columns are {len(categorical_columns)}\\ntotal numerival columns are {len(numerical_columns)}\")\nprint(\"\\ncategorical_columns:\",categorical_columns)\nprint(\"\\nnumerical_columns:\",numerical_columns)","e4c1e9e6":"# every match counts around 20 to 22 times.\nmerge_df[\"result\"].value_counts()","a06f9b0c":"result_ = merge_df.groupby([\"result\"])[\"match_id\"].nunique()\nresult_","0100a8d6":"sns.barplot(x=result_.values,y=result_.index)","adea1d63":"sns.boxplot(x=merge_df[\"result\"].value_counts())","80b16917":"winner_ = merge_df.groupby([\"winner\"])[\"match_id\"].nunique()\nwinner_ = winner_.sort_values(ascending=False)\nwinner_","e97a5073":"sns.barplot(x=winner_.values,y=winner_.index)","7424fe8c":"sns.boxplot(merge_df[\"winner\"].value_counts())","ccb0802f":"sns.scatterplot(x=merge_df[\"Six\"], y=merge_df[\"Total Points\"])","6b2e7b20":"six_ = merge_df.groupby(\"Player_name\")[\"Six\"].nunique()\nsix_ = six_.sort_values(ascending=False).head(20)\nfig,ax = plt.subplots(figsize=(10,5))\nax = sns.barplot(x=six_.values, y=six_.index)\nax.set(xlabel=\"Number of Sixes\",ylabel=\"Player Name\")\nplt.title(\"max no. of sixes by Player\")\nplt.show()","f88094f1":"sns.countplot(x=merge_df[\"Fifty\"])","6a325156":"sns.countplot(x=merge_df[\"Hundred\"])","8fd84c1f":"sns.countplot(x=merge_df[\"Duck\"])","ea80125f":"sns.heatmap(merge_df[[\"Six\",\"Fifty\",\"Hundred\",\"Duck\",\"Batting_Points\"]].corr(),annot=True)","ee8b3c0a":"print(merge_df[\"4W_Haul\"].value_counts())\nsns.countplot(x=merge_df[\"4W_Haul\"])","654a94a2":"print(merge_df[\"5W_Haul\"].value_counts())\nsns.countplot(x=merge_df[\"5W_Haul\"])","332444d5":"print(merge_df[\"Maidens\"].value_counts())\nsns.countplot(x=merge_df[\"Maidens\"])","477e0223":"sns.heatmap(merge_df[[\"4W_Haul\",\"5W_Haul\",\"Maidens\",\"Bowling_Points\"]].corr(),annot=True)","3259c445":"sns.pairplot(data=merge_df, vars=[\"Bowling_Points\",\"Batting_Points\",\"Total Points\"])","c724cefc":"sns.heatmap(merge_df[[\"Bowling_Points\",\"Batting_Points\",\"Total Points\"]].corr(), annot=True)","6e29f660":"df_0819[\"season\"].value_counts()","cc78e4c4":"def season_winner(year):\n    s_w = df_0819[df_0819[\"season\"] == year]\n    s_w = s_w[\"winner\"].value_counts()\n    fig,ax = plt.subplots(figsize=(10,5))\n    ax = sns.barplot(x=s_w.values, y=s_w.index)\n    ax.set(xlabel=\"number of times won a match\",ylabel=\"Team Names\")\n    plt.title(f\"ipl {year} season match won by any team\")\n    plt.show()","7f2a58be":"season_winner(2008)","a87be2df":"season_winner(2009)","793f0fba":"season_winner(2010)","d2e1bfce":"season_winner(2011)","9c9899e1":"season_winner(2012)","a70f5885":"season_winner(2013)","61ec4fb6":"season_winner(2014)","80d8c5ea":"season_winner(2015)","de72c918":"season_winner(2016)","915f3a48":"season_winner(2017)","e87418ff":"season_winner(2018)","d13370a7":"season_winner(2019)","ac18477e":"plt.figure(figsize=(40,10))\nplt.subplot(2,4,1)\nsns.boxplot(x=merge_df[\"Six\"])\nplt.subplot(2,4,2)\nsns.boxplot(x=merge_df[\"Fifty\"])\nplt.subplot(2,4,3)\nsns.boxplot(x=merge_df[\"Hundred\"])\nplt.subplot(2,4,4)\nsns.boxplot(x=merge_df[\"Batting_Points\"])\nplt.subplot(2,4,5)\nsns.boxplot(x=merge_df[\"Bowling_Points\"])\nplt.subplot(2,4,6)\nsns.boxplot(x=merge_df[\"Total Points\"])\nplt.subplot(2,4,7)\nsns.boxplot(x=merge_df[\"season\"])","88be7ad2":"print(\"categorical_features:\",categorical_columns)","9a1b80fa":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\nmerge_df[\"result\"] = encoder.fit_transform(merge_df[\"result\"])","aa43f007":"merge_df.drop(columns=[\"Player_name\",\"team1\",\"team2\",\"winner\"],axis=1,inplace=True)","1eafa2e9":"merge_df.info()","246a6cfd":"print(\"numerical_features:\",numerical_columns)","189a9a74":"iqr = np.percentile(merge_df[\"Bowling_Points\"],97)\nf = merge_df[\"Bowling_Points\"] > iqr\nmerge_df.loc[f,:] = iqr","02761f15":"iqr = np.percentile(merge_df[\"Batting_Points\"],91)\nf = merge_df[\"Batting_Points\"] > iqr\nmerge_df.loc[f,:] = iqr","d54b4c09":"merge_df.columns","b94a202b":"X = merge_df[['Six', 'Fifty', 'Hundred', 'Duck', 'Batting_Points','4W_Haul', '5W_Haul', 'Maidens', 'Bowling_Points',\n            'season', 'result']]\ny = merge_df[\"Total Points\"]","465db9da":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,train_size=0.8,test_size=0.2,random_state=0)","8c1e9498":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","cdfcc6c2":"from sklearn.linear_model import LinearRegression\n\n\nlr_model = LinearRegression()\nlr_model.fit(X_train,y_train)\nlr_model_prediction = lr_model.predict(X_test)\nprint(\"mean_absolute_error:\",mean_absolute_error(y_test,lr_model_prediction))\nprint(\"mean_squared_error:\",mean_squared_error(y_test,lr_model_prediction))\nprint(\"r2_score:\",r2_score(y_test,lr_model_prediction))","5deebb83":"sns.regplot(lr_model_prediction,y_test,truncate=False)","cbbe2104":"from sklearn.linear_model import Ridge\n\nr_model = Ridge()\nr_model.fit(X_train,y_train)\nr_model_prediction = r_model.predict(X_test)\nprint(\"mean_absolute_error:\",mean_absolute_error(y_test,r_model_prediction))\nprint(\"mean_squared_error:\",mean_squared_error(y_test,r_model_prediction))\nprint(\"r2_score:\",r2_score(y_test,r_model_prediction))","93e41e91":"sns.regplot(x=r_model_prediction,y=y_test,truncate=False)","bcee8ad7":"from sklearn.linear_model import Lasso\n\nl_model = Lasso()\nl_model.fit(X_train,y_train)\nl_model_prediction = l_model.predict(X_test)\nprint(\"mean_absolute_error:\",mean_absolute_error(y_test,l_model_prediction))\nprint(\"mean_squared_error:\",mean_squared_error(y_test,l_model_prediction))\nprint(\"r2_score:\",r2_score(y_test,l_model_prediction))","fced4690":"sns.regplot(x=r_model_prediction,y=y_test,truncate=False)","a5fb83d1":"from sklearn.ensemble import RandomForestRegressor\n\nrfr_model = RandomForestRegressor()\nrfr_model.fit(X_train,y_train)\nrfr_model_prediction = rfr_model.predict(X_test)\nprint(\"mean_absolute_error:\",mean_absolute_error(y_test,rfr_model_prediction))\nprint(\"mean_squared_error:\",mean_squared_error(y_test,rfr_model_prediction))\nprint(\"r2_score:\",r2_score(y_test,rfr_model_prediction))","90520508":"from sklearn.model_selection import GridSearchCV\n\nrfr_model = RandomForestRegressor()\nparams = {\"n_estimators\":[10,50,100,300,500,700,900,1000],\n          \"max_features\":[\"sqrt\",\"log2\"]}\nresult = GridSearchCV(rfr_model,params,scoring=\"neg_mean_absolute_error\",cv=5)\nresult.fit(X_train,y_train)\nprint(\"best_score:\",result.best_score_)\nprint(\"best_param:\",result.best_params_)","3984add3":"from xgboost import XGBRegressor\n\nxgb_model = XGBRegressor()\nxgb_model.fit(X_train,y_train)\nxgb_model_predict = xgb_model.predict(X_test)\nprint(\"mean_absolute_error:\",mean_absolute_error(xgb_model_predict, y_test))\nprint(\"mean_squared_error:\",mean_squared_error(xgb_model_predict, y_test))\nprint(\"r2_score:\",r2_score(xgb_model_predict, y_test))","00636cdc":"from lightgbm import LGBMRegressor\n\nlgbm_model = LGBMRegressor()\nlgbm_model.fit(X_train,y_train)\nlgbm_model_predict = lgbm_model.predict(X_test)\nprint(\"mean_absolute_error:\",mean_absolute_error(lgbm_model_predict, y_test))\nprint(\"mean_squared_error:\",mean_squared_error(lgbm_model_predict, y_test))\nprint(\"r2_score:\",r2_score(lgbm_model_predict, y_test))","aeb3fa92":"1) Six, Fifty, Hundred, Batting_Points","1ff4b10c":"-> ***Numerical Features***","1480391a":"let's try ensemble and boosting methods. RandomForest, XGBoost, Lightgbm","ba60a2aa":"4) Season","a572fa63":"# Feature Selection","53a83d80":"-> updating numerical features.","b5b51995":"1) result","50eaff47":"EDA","84907a6c":"# Feature Engineering","315e99a2":"-> **categorical columns**","1ae04865":"df_0819","a9cd8960":"Bowling_Points and Batting_Points are correlated with Total Points.","e193e0eb":"there is no outliars in categorical feature.","6887b341":"3) Bowling_Points,Batting_Points,Total Point","7b6a1adf":"* Six,Fifty,Batting_Points and Hundred are positively correlated with each other. \n* Duck is negatively correlated with others.","2441e93b":"df_train","5eaa4782":"Batting_points,Bowling_Points have some outliars.","d450806d":"Linear Regression, Ridge, Lasso","24ea5f35":"out of the 752 match, 743 match is normal match and 9 tie match.","b155f24c":"2) 4W_Haul,5W_Haul,Maidens,Bowling_Points","ff6971da":"we're going to drop Player_Name,team1,team2,winner.","84db4209":"Runs, Boundaries, Batting_Points are highly correlated with each other. so,i will drop 2 column Rund and Boundaries. same for the Wicket and Bowling_points.","06aa123d":"every regression model is performing great. so, i will go with Lasso model.","53f1f75d":"2) winner","6a588e30":"# Model Training","5181a046":"MI won the 109 number of match and 100 match won by CSK.","a00d00f2":"-> updating categorical features"}}