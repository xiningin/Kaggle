{"cell_type":{"cde30cce":"code","9068f7d4":"code","6baa1e64":"code","7695fe9a":"code","8e6fedb7":"code","25d348ec":"code","ee531592":"code","ed104827":"code","b3d7479c":"code","17c3153c":"code","e76bc479":"code","3d205338":"code","3c3f65b2":"code","2b55da6f":"code","738cf0f8":"code","1d93b612":"code","ef45e549":"code","7112dc0a":"code","fab98115":"code","78105a97":"code","20ef687d":"code","fa795b76":"code","28e68b1d":"code","fb1f1900":"code","9ddd1c3c":"code","cfdefe4f":"code","ccf4e73c":"code","da6d9fb7":"code","eb2652b2":"code","18c89ef3":"code","4cc2f6df":"code","49d61760":"code","63b9308f":"code","e3da2d67":"code","1f959f76":"code","f57324e7":"code","bb644b67":"code","458b752a":"code","ca9032a3":"code","af810efe":"code","3774b7a8":"code","76426c52":"code","4e7766f3":"code","3420b641":"code","ba402ed5":"code","5fe34191":"code","38b16745":"code","546d3876":"code","03e5a966":"code","ad94b594":"code","8b60e15a":"code","f787692e":"code","d5c5bb80":"markdown","297399b2":"markdown","c2762825":"markdown","f86e8556":"markdown","2a46d153":"markdown","47e54523":"markdown","4e7f2fab":"markdown","7882dd94":"markdown","1c9c6b54":"markdown","b4825dd5":"markdown","7cd02310":"markdown","b3d831eb":"markdown","ab0bcbcf":"markdown","16610a22":"markdown","5b7e5910":"markdown","7af73513":"markdown","e759efdf":"markdown","3735aa11":"markdown","11df2cd1":"markdown","df9217b2":"markdown","8b349f4c":"markdown","79683c0f":"markdown","7e5ce527":"markdown","b5f345a4":"markdown","76bb9f59":"markdown","ebfe07ac":"markdown","f70f45d4":"markdown","a3b2fa0b":"markdown","3b3f6216":"markdown","ded066e4":"markdown"},"source":{"cde30cce":"import os\nimport re\nimport string\n\nimport numpy as np \nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport nltk\nfrom nltk.corpus import stopwords","9068f7d4":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\nprint(\"Train shape : \",train.shape)\nprint(\"Test shape : \",test.shape)","6baa1e64":"EMBED_SIZE = 300 # size of word vector\nMAX_FEATURES = 100000 # how many unique words to use (i.e num rows in embedding vector)\nMAXLEN = 40 # max length of question","7695fe9a":"# tracks the training vocabulary, which goes through all our text and counts the occurrence of the contained words.\ndef build_vocab(texts):\n    \"\"\"\n    input: list of list of words\n    output: dictionary of words and their count\n    \"\"\"\n    sentences = texts.apply(lambda x: x.split()).values\n    vocab = {}\n    for sentence in sentences:\n        for word in sentence:\n            try:\n                vocab[word] += 1\n            except KeyError:\n                vocab[word] = 1\n    return vocab","8e6fedb7":"# populate the vocabulary\ndf = pd.concat([train ,test], sort=False)\nvocab = build_vocab(df['question_text'])","25d348ec":"# display the first 5 elements and their count\ni = 0\nfor k in list(vocab):\n    print(k, vocab[k])\n    i += 1\n    if i > 5:\n        break","ee531592":"def load_embed(file):\n    def get_coefs(word,*arr): \n        return word, np.asarray(arr, dtype='float32')\n    \n    embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(file, encoding='latin'))\n    \n    return embeddings_index","ed104827":"glove = '..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt'\n\nprint(\"Extracting GloVe embedding\")\nembed_glove = load_embed(glove)\nprint(\"Embedding extraction done\")","b3d7479c":"len(embed_glove)","17c3153c":"def load_glove_matrix(word_index, embeddings_index):\n\n    all_embs = np.stack(embeddings_index.values())\n    emb_mean, emb_std = all_embs.mean(), all_embs.std()\n    EMBED_SIZE = all_embs.shape[1]\n    \n    nb_words = min(MAX_FEATURES, len(word_index))\n    embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, EMBED_SIZE))\n\n    for word, i in word_index.items():\n        if i >= MAX_FEATURES:\n            continue\n        embedding_vector = embeddings_index.get(word)\n        if embedding_vector is not None:\n            embedding_matrix[i] = embedding_vector\n\n    return embedding_matrix","e76bc479":"import operator\n\ndef check_coverage(vocab, embeddings_index):\n    known_words = {}\n    unknown_words = {}\n    nb_known_words = 0\n    nb_unknown_words = 0\n    for word in vocab.keys():\n        try:\n            known_words[word] = embeddings_index[word]\n            nb_known_words += vocab[word]\n        except:\n            unknown_words[word] = vocab[word]\n            nb_unknown_words += vocab[word]\n            pass\n\n    print('Found embeddings for {:.3%} of vocabulary'.format(len(known_words)\/len(vocab)))\n    print('Found embeddings for {:.3%} of all text'.format(nb_known_words\/(nb_known_words + nb_unknown_words)))\n    unknown_words = sorted(unknown_words.items(), key=operator.itemgetter(1))[::-1]\n\n    return unknown_words","3d205338":"print(\"Glove: \")\noov_glove = check_coverage(vocab, embed_glove)","3c3f65b2":"oov_glove[:20]","2b55da6f":"def add_lower(embedding, vocab):\n    count = 0\n    for word in vocab:\n        if word in embedding and word.lower() not in embedding:  \n            embedding[word.lower()] = embedding[word]\n            count += 1\n    print(f\"Added {count} words to embedding\")","738cf0f8":"train['question_text'] = train['question_text'].apply(lambda x: x.lower())\ntest['question_text'] = test['question_text'].apply(lambda x: x.lower())","1d93b612":"print(\"Glove: \")\noov_glove = check_coverage(vocab, embed_glove)\nadd_lower(embed_glove, vocab) # operates on the same vocabulary\noov_glove = check_coverage(vocab, embed_glove)","ef45e549":"oov_glove[:10]","7112dc0a":"contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\", 'colour': 'color', 'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater', 'cancelled': 'canceled', 'labour': 'labor', 'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ', 'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What', 'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can', 'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I', 'theBest': 'the best', 'howdoes': 'how does', 'mastrubation': 'masturbation', 'mastrubate': 'masturbate', \"mastrubating\": 'masturbating', 'pennis': 'penis', 'Etherium': 'Ethereum', 'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', 'airhostess': 'air hostess', \"whst\": 'what', 'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization', 'demonetisation': 'demonetization'}\nlen(contraction_mapping)","fab98115":"def known_contractions(embed):\n    known = []\n    for contract in contraction_mapping:\n        if contract in embed:\n            known.append(contract)\n    return known","78105a97":"print(\"Known contractions Glove:\")\nprint(known_contractions(embed_glove))","20ef687d":"def clean_contractions(text, mapping):\n    specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n    for s in specials:\n        text = text.replace(s, \"'\")\n    text = ' '.join([mapping[t] if t in mapping else t for t in text.split(\" \")])\n    return text","fa795b76":"train['question_text'] = train['question_text'].apply(lambda x: clean_contractions(x, contraction_mapping))\ntest['question_text'] = test['question_text'].apply(lambda x: clean_contractions(x, contraction_mapping))","28e68b1d":"df = pd.concat([train ,test], sort=False)\nvocab = build_vocab(df['question_text']) # create vocabulary with new treated questions\nprint(\"Glove: \")\noov_glove = check_coverage(vocab, embed_glove)","fb1f1900":"oov_glove[:10]","9ddd1c3c":"punct_mapping = \"\/-'?!.,#$%\\'()*+-\/:;<=>@[\\\\]^_`{|}~\" + '\"\"\u201c\u201d\u2019' + '\u221e\u03b8\u00f7\u03b1\u2022\u00e0\u2212\u03b2\u2205\u00b3\u03c0\u2018\u20b9\u00b4\u00b0\u00a3\u20ac\\\u00d7\u2122\u221a\u00b2\u2014\u2013&'\npunct_mapping += '\u00a9^\u00ae` <\u2192\u00b0\u20ac\u2122\u203a \u2665\u2190\u00d7\u00a7\u2033\u2032\u00c2\u2588\u00bd\u00e0\u2026\u201c\u2605\u201d\u2013\u25cf\u00e2\u25ba\u2212\u00a2\u00b2\u00ac\u2591\u00b6\u2191\u00b1\u00bf\u25be\u2550\u00a6\u2551\u2015\u00a5\u2593\u2014\u2039\u2500\u2592\uff1a\u00bc\u2295\u25bc\u25aa\u2020\u25a0\u2019\u2580\u00a8\u2584\u266b\u2606\u00e9\u00af\u2666\u00a4\u25b2\u00e8\u00b8\u00be\u00c3\u22c5\u2018\u221e\u2219\uff09\u2193\u3001\u2502\uff08\u00bb\uff0c\u266a\u2569\u255a\u00b3\u30fb\u2566\u2563\u2554\u2557\u25ac\u2764\u00ef\u00d8\u00b9\u2264\u2021\u221a'\n\ndef unknown_punct(embed, punct):\n    unknown = ''\n    for p in punct:\n        if p not in embed:\n            unknown += p\n            unknown += ' '\n    return unknown","cfdefe4f":"print(\"Glove:\")\nprint(unknown_punct(embed_glove, punct_mapping))","ccf4e73c":"puncts = {\"\u2018\": \"'\", \"\u00b4\": \"'\", \"\u00b0\": \"\", \"\u20ac\": \"e\", \"\u2014\": \"-\", \"\u2013\": \"-\", \"\u2019\": \"'\", \"_\": \"-\", \"`\": \"'\", '\u201c': '\"', '\u201d': '\"', '\u201c': '\"', \"\u00a3\": \"e\", '\u221e': 'infinity', '\u03b8': 'theta', '\u00f7': '\/', '\u03b1': 'alpha', '\u2022': '.', '\u00e0': 'a', '\u2212': '-', '\u03b2': 'beta', '\u2205': '', '\u00b3': '3', '\u03c0': 'pi', '\u2026': ' '}\n\ndef clean_special_chars(text, punct, mapping):\n    for p in mapping:\n        text = text.replace(p, mapping[p])\n    \n    for p in punct:\n        text = text.replace(p, f' {p} ')\n    \n    return text","da6d9fb7":"train['question_text'] = train['question_text'].apply(lambda x: clean_special_chars(x, punct_mapping, puncts))\ntest['question_text'] = test['question_text'].apply(lambda x: clean_special_chars(x, punct_mapping, puncts))","eb2652b2":"df = pd.concat([train ,test], sort=False)\nvocab = build_vocab(df['question_text'])\nprint(\"Glove: \")\noov_glove = check_coverage(vocab, embed_glove)","18c89ef3":"oov_glove[:10]","4cc2f6df":"train.head(5)","49d61760":"from sklearn.model_selection import train_test_split\n\ntrain, val = train_test_split(train, test_size=0.2, random_state=42)","63b9308f":"# Fill up the missing values\nxtrain = train['question_text'].fillna('_na_').values\nxval = val['question_text'].fillna('_na_').values\nxtest = test['question_text'].fillna('_na_').values","e3da2d67":"from keras.preprocessing.text import Tokenizer\n\ntokenizer = Tokenizer(num_words=MAX_FEATURES)\ntokenizer.fit_on_texts(list(xtrain))\n\nxtrain = tokenizer.texts_to_sequences(xtrain)\nxval = tokenizer.texts_to_sequences(xval)\nxtest = tokenizer.texts_to_sequences(xtest)","1f959f76":"from keras.preprocessing.sequence import pad_sequences\n\nxtrain = pad_sequences(xtrain, maxlen=MAXLEN)\nxval = pad_sequences(xval, maxlen=MAXLEN)\nxtest = pad_sequences(xtest, maxlen=MAXLEN)","f57324e7":"ytrain = train['target'].values\nyval = val['target'].values","bb644b67":"np.random.seed(42)\n\ntrn_idx = np.random.permutation(len(xtrain))\nval_idx = np.random.permutation(len(xval))\n\nxtrain = xtrain[trn_idx]\nytrain = ytrain[trn_idx]\nxval = xval[val_idx]\nyval = yval[val_idx]","458b752a":"print(\"Extracting GloVe embedding matrix\")\nembedding_matrix_glove = load_glove_matrix(tokenizer.word_index, embed_glove)\nprint(\"Embedding matrix extraction done\")","ca9032a3":"from sklearn import metrics\nfrom sklearn.linear_model import LinearRegression\n\nfrom keras.layers import Dense, Input, CuDNNLSTM, Embedding, Dropout, Activation, CuDNNGRU, Conv1D\nfrom keras.layers import Bidirectional, GlobalMaxPool1D, GlobalMaxPooling1D, GlobalAveragePooling1D\nfrom keras.layers import Input, Embedding, Dense, Conv2D, MaxPool2D, concatenate, Lambda\nfrom keras.layers import Reshape, Flatten, Concatenate, Dropout, SpatialDropout1D\nfrom keras.optimizers import Adam\nfrom keras.models import Model\nfrom keras import backend as K\nfrom keras.engine.topology import Layer\nfrom keras import initializers, regularizers, constraints, optimizers, layers\nfrom keras.layers import concatenate","af810efe":"train.head(5)","3774b7a8":"class Attention(Layer):\n    def __init__(self, step_dim,\n                 W_regularizer=None, b_regularizer=None,\n                 W_constraint=None, b_constraint=None,\n                 bias=True, **kwargs):\n        self.supports_masking = True\n        self.init = initializers.get('glorot_uniform')\n\n        self.W_regularizer = regularizers.get(W_regularizer)\n        self.b_regularizer = regularizers.get(b_regularizer)\n\n        self.W_constraint = constraints.get(W_constraint)\n        self.b_constraint = constraints.get(b_constraint)\n\n        self.bias = bias\n        self.step_dim = step_dim\n        self.features_dim = 0\n        super(Attention, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        assert len(input_shape) == 3\n\n        self.W = self.add_weight((input_shape[-1],),\n                                 initializer=self.init,\n                                 name='{}_W'.format(self.name),\n                                 regularizer=self.W_regularizer,\n                                 constraint=self.W_constraint)\n        self.features_dim = input_shape[-1]\n\n        if self.bias:\n            self.b = self.add_weight((input_shape[1],),\n                                     initializer='zero',\n                                     name='{}_b'.format(self.name),\n                                     regularizer=self.b_regularizer,\n                                     constraint=self.b_constraint)\n        else:\n            self.b = None\n\n        self.built = True\n\n    def compute_mask(self, input, input_mask=None):\n        return None\n\n    def call(self, x, mask=None):\n        features_dim = self.features_dim\n        step_dim = self.step_dim\n\n        eij = K.reshape(K.dot(K.reshape(x, (-1, features_dim)),\n                        K.reshape(self.W, (features_dim, 1))), (-1, step_dim))\n\n        if self.bias:\n            eij += self.b\n\n        eij = K.tanh(eij)\n        a = K.exp(eij)\n\n        if mask is not None:\n            a *= K.cast(mask, K.floatx())\n\n        a \/= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n\n        a = K.expand_dims(a)\n        weighted_input = x * a\n        return K.sum(weighted_input, axis=1)\n\n    def compute_output_shape(self, input_shape):\n        return input_shape[0], self.features_dim\n","76426c52":"def f1(y_true, y_pred):\n\n    def recall(y_true, y_pred):\n        \n        true_positives = K.sum(K.round(K.clip(y_true*y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives\/(possible_positives + K.epsilon())\n        return recall\n\n    def precision(y_true, y_pred):\n        \n        true_positives = K.sum(K.round(K.clip(y_true*y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives\/(predicted_positives + K.epsilon())\n        return precision\n\n    precision = precision(y_true, y_pred)\n    recall = recall(y_true, y_pred)\n\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))","4e7766f3":"def model_lstm_att(embedding_matrix):\n    \n    inp = Input(shape=(MAXLEN,))\n    x = Embedding(MAX_FEATURES, EMBED_SIZE, weights=[embedding_matrix], trainable=False)(inp)\n    x = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x)\n    x = Bidirectional(CuDNNLSTM(32, return_sequences=True))(x)\n    \n    att = Attention(MAXLEN)(x)\n    \n    y = Dense(32, activation='relu')(att)\n    y = Dropout(0.1)(y)\n    outp = Dense(1, activation='sigmoid')(y)    \n\n    model = Model(inputs=inp, outputs=outp)\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=[f1])\n    \n    return model","3420b641":"def train_pred(model, epochs=2):\n    \n    for e in range(epochs):\n        model.fit(xtrain, ytrain, batch_size=512, epochs=3, validation_data=(xval, yval))\n        pred_val_y = model.predict([xval], batch_size=1024, verbose=0)\n\n        best_thresh = 0.5\n        best_score = 0.0\n        for thresh in np.arange(0.1, 0.501, 0.01):\n            thresh = np.round(thresh, 2)\n            score = metrics.f1_score(yval, (pred_val_y > thresh).astype(int))\n            if score > best_score:\n                best_thresh = thresh\n                best_score = score\n\n        print(\"Val F1 Score: {:.4f}\".format(best_score))\n\n    pred_test_y = model.predict([xtest], batch_size=1024, verbose=0)\n\n    return pred_val_y, pred_test_y, best_score","ba402ed5":"paragram = '..\/input\/embeddings\/paragram_300_sl999\/paragram_300_sl999.txt'\nembedding_matrix_para = load_glove_matrix(tokenizer.word_index, load_embed(paragram))","5fe34191":"embedding_matrix = np.mean([embedding_matrix_glove, embedding_matrix_para], axis=0)","38b16745":"model_lstm = model_lstm_att(embedding_matrix)\nmodel_lstm.summary()","546d3876":"outputs = []\npred_val_y, pred_test_y, best_score = train_pred(model_lstm, epochs=3)\noutputs.append([pred_val_y, pred_test_y, best_score, 'model_lstm_att only Glove'])","03e5a966":"outputs.sort(key=lambda x: x[2]) \nweights = [i for i in range(1, len(outputs) + 1)]\nweights = [float(i) \/ sum(weights) for i in weights] \n\npred_val_y = np.mean([outputs[i][0] for i in range(len(outputs))], axis = 0)\n\nthresholds = []\nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    res = metrics.f1_score(yval, (pred_val_y > thresh).astype(int))\n    thresholds.append([thresh, res])\n    print(\"F1 score at threshold {0} is {1}\".format(thresh, res))\n    \nthresholds.sort(key=lambda x: x[1], reverse=True)\nbest_thresh = thresholds[0][0]","ad94b594":"print(\"Best threshold:\", best_thresh, \"and F1 score\", thresholds[0][1])","8b60e15a":"pred_test_y = np.mean([outputs[i][1] for i in range(len(outputs))], axis = 0)\npred_test_y = (pred_test_y > best_thresh).astype(int)","f787692e":"sub = pd.read_csv('..\/input\/sample_submission.csv')\nout_df = pd.DataFrame({\"qid\":sub[\"qid\"].values})\nout_df['prediction'] = pred_test_y\nout_df.to_csv(\"submission.csv\", index=False)","d5c5bb80":"# 2. Model","297399b2":"## 1.9. Tokenize sentences","c2762825":"## Remarks\n\nBig improvement now. 68% of vocabulary is covered, but that 68% of vocabulary amounts to 99.5% of all text\n\nA **possible improvement** to this could to treat misspelled words or strange\/mathematical\/latex symbols.","f86e8556":"## Remarks\n\nVery small improvement, it seems like the biggest \"problem\" are punctuations","2a46d153":"## 1.11. Get target value","47e54523":"## 2.2 Define F1-score","4e7f2fab":"GloVe only recognizes these punctuations. Any word containing other punctuations is considered as unknown.","7882dd94":"## 2.1. Attention layer\n\n* Without attention, from sentence length 20 to higher, performance is lower. \n* With attention, the performance in longer sentences is equal or even better. attention uses all hidden states. values, how much attention we want to pay to this state, how much focus. with all these values we create a context vector\/matrix.\n* attention in lstm: uses current input and previous context encoding\n* self-attention in lstm: uses all other inputs. query, keys and values all come from the same place","1c9c6b54":"## Remarks\n\n* 12% of our text is more or less useless, since it won't be detected by the embedding\n* To improve this, we can check which words are out of vocabulary (oov)","b4825dd5":"## 1.7 Split train val\n\nSplit trainset into trainset and valset in order to check the training performance before submitting.","7cd02310":"## 2.4. Define training function","b3d831eb":"## 1.3. Check coverage\n\n* This function checks the intersection between our vocabulary and the embeddings\n* The output is a list of out of vocabulary (oov) words","ab0bcbcf":"## 2.6. Create model and train","16610a22":"# 1. Preprocessing\n\n### How to approach the preprocessing stage? [Dieter's approach](https:\/\/www.kaggle.com\/christofhenkel):\n\n> 1. **Don't use standard preprocessing steps like stemming or stopword removal when you have pre-trained embeddings**\n> \n> Some of you might used standard preprocessing steps when doing word count based feature extraction (e.g. TFIDF) such as removing stopwords, stemming etc. The reason is simple: You lose valuable information, which would help your NN to figure things out.\n> \n> 2. **Get your vocabulary as close to the embeddings as possible**","5b7e5910":"## 2.7. Find best threshold","7af73513":"## 2.3. Define model: LSTM with Attention","e759efdf":"## 1.12. Shuffle data","3735aa11":"## 2.5. Blend embeddings","11df2cd1":"   ## 1.2. Load embedding index and embedding matrix\n   \n   * Embedding index: a dictionary where the keys are embeddings and the values are arrays of their embedding representation\n   * Embedding matrix: a matrix representation of the embeddings\n   \n Due to the big size of the embeddings (5.6GB), the necessary RAM is around 10.6GB.","df9217b2":"## 1.10. Pad sentences\nMost questions are shorter than MAXLEN (=70), but in case any is longer, not much information will be lost when padding","8b349f4c":"## 1.4. Lowerization\n\n* The top oov words include punctuations(question mark) and contractions\n* First we focus on questions with capital letters","79683c0f":"## Remarks\n\n* There's barely any change, but the first word of every question has been treated\/lowerized.","7e5ce527":"## 1.5. Contractions\n\n* One option would be to remove\/modify punctuations, such as: \"John's\" --> \" Johns\" or \"John ' s\"\n* But if the word is a contraction, such as \"haven't\", and if we treat the punctuation first, the word now is \"haven ' t\" or \"havent\", and that is no longer a contraction\n* Most oov words either are:  \n    a) Contractions  \n    b) Words with adjacent punctuations\n\nReference: https:\/\/www.kaggle.com\/c\/quora-insincere-questions-classification\/discussion\/77758","b5f345a4":"## 1.6. Punctuation removal","76bb9f59":"## Remark\n\nGloVe recognizes these 19 contractions, the other contractions aren't recognized and we lose information","ebfe07ac":"## 2.8. Predict test set and save sumbission","f70f45d4":"## 1.8. Fill N\/A values\nThe questions are already clean, but just in case","a3b2fa0b":"## 1.1. Build vocabulary","3b3f6216":"# Quora preprocessing and BLSTM + Attention model\n\n1. Preprocessing  \n1.1. Build vocabulary   \n1.2. Load embeddings  \n1.3. Check coverage  \n1.4. Lowerization  \n1.5. Contractions  \n1.6. Punctuation removal  \n1.7. Split train val sets  \n1.8. Fill N\/A values  \n1.9. Tokenize sentences  \n1.10. Pad sentences  \n1.11. Get target value  \n1.12. Shuffle data  \n2. Model  \n2.1. Attention layer  \n2.2. Define F1-score  \n2.3. Define model: bLSTM + Attention  \n2.4. Define training function  \n2.5. Blend embeddings  \n2.6. Create model and train   \n2.7. Find best threshold for F1-score  \n2.8. Predict test set and save submission  \n3. References  \n","ded066e4":"## References\n\nReferences for preprocessing:  \n* [Preprocess when using embeddings](https:\/\/www.kaggle.com\/christofhenkel\/how-to-preprocessing-when-using-embeddings)\n* [Preprocessing](https:\/\/www.kaggle.com\/theoviel\/improve-your-score-with-some-text-preprocessing)\n* [Preprocessing v2](https:\/\/www.kaggle.com\/theoviel\/improve-your-score-with-text-preprocessing-v2)\n\nReferences for the model:  \n* [Model LSTM + Attention](https:\/\/www.kaggle.com\/kiraplenkin\/model-lstm-attention\/notebook)\n* [blend LSTM + CNN (concatenates all 4 embeddings)](https:\/\/www.kaggle.com\/shujian\/blend-of-lstm-and-cnn-with-4-embeddings-1200d)\n* [keras LSTM + Attention + embedding blending](https:\/\/www.kaggle.com\/seynog\/fork-attention-with-changed-weights)"}}