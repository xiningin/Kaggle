{"cell_type":{"e94b223f":"code","9babe993":"code","4bc2125b":"code","90607f17":"code","e890068e":"code","5a8413e7":"code","0d3c2e43":"code","f6359ffb":"code","418b1f65":"code","48b02732":"code","d87578a9":"code","af891885":"code","c4adaed3":"markdown","b215cf5c":"markdown","b1032254":"markdown","60df4594":"markdown","71b21e09":"markdown","db82a2b5":"markdown"},"source":{"e94b223f":"import numpy\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport math\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nimport tqdm\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n","9babe993":"# load the dataset\ndf = pd.read_csv('..\/input\/airline-passesngers\/airline-passengers.csv', usecols=[1], engine='python', skipfooter=3)","4bc2125b":"data = df.values\ndata = data.astype('float32')","90607f17":"# normalize the dataset\nscaler = MinMaxScaler(feature_range=(0, 1))\ndataset = scaler.fit_transform(data)\n\n# split into train and test sets\ntrain_size = int(len(dataset) * 0.67)\ntest_size = len(dataset) - train_size\ntrain, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]\n","e890068e":"# convert an array of values into a dataset matrix\ndef create_dataset(dataset, look_back=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-look_back-1):\n        a = dataset[i:(i+look_back), 0]\n        dataX.append(a)\n        dataY.append(dataset[i + look_back, 0])\n    return numpy.array(dataX), numpy.array(dataY)\n","5a8413e7":"# reshape \nlook_back = 10\ntrainX, trainY = create_dataset(train, look_back)\ntestX, testY = create_dataset(test, look_back)\n\n# reshape input to be [samples, time steps, features]\ntrainX = numpy.reshape(trainX, (trainX.shape[0], trainX.shape[1], 1))\ntestX = numpy.reshape(testX, (testX.shape[0], testX.shape[1], 1))","0d3c2e43":"# create and fit the LSTM network\nbatch_size = 1\nmodel = Sequential()\nmodel.add(LSTM(64, batch_input_shape=(batch_size, look_back, 1),stateful=True,return_sequences=True))\nmodel.add(LSTM(64, stateful=True))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n\nprint (trainX.shape, trainY.shape)","f6359ffb":"\nfor i in tqdm.tqdm(range(20)):\n    model.fit(trainX, trainY, epochs=3, batch_size=batch_size, verbose=0, shuffle=False)\n    model.reset_states()","418b1f65":"# make predictions\ntrainPredict = model.predict(trainX, batch_size=batch_size)\nmodel.reset_states()\ntestPredict = model.predict(testX, batch_size=batch_size)\n\n# invert predictions\ntrainPredict = scaler.inverse_transform(trainPredict)\ntrainY = scaler.inverse_transform([trainY])\ntestPredict = scaler.inverse_transform(testPredict)\ntestY = scaler.inverse_transform([testY])\n","48b02732":"# calculate root mean squared error\ntrainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\nprint('Test Score: %.2f RMSE' % (testScore))","d87578a9":"# shift train predictions for plotting\ntrainPredictPlot = numpy.empty_like(dataset)\ntrainPredictPlot[:, :] = numpy.nan\ntrainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\n","af891885":"# shift test predictions for plotting\ntestPredictPlot = numpy.empty_like(dataset)\ntestPredictPlot[:, :] = numpy.nan\ntestPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict\n\n\n# plot baseline and predictions\nplt.plot(scaler.inverse_transform(dataset))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","c4adaed3":"a) Write a simple function to convert the single column of data into a two-column dataset: the first column containing this month\u2019s (t) passenger count and the second column containing next month\u2019s (t+1) passenger count, to be predicted.","b215cf5c":"f) Plot the original dataset along with train and test predictions to get an idea of how the trained model performs","b1032254":"7. Time Series Prediction using LSTM: Use the given international airline passengers dataset problem. This is a problem where, given a year and a month, the task is to predict the number of international airline passengers in units of 1,000. The data ranges from January 1949 to December 1960, or 12 years, with 144 observations. We can phrase the problem as a regression problem. That is, given the number of passengers (in units of thousands) this month, what is the number of passengers next month? Perform the following.\n","60df4594":"d) Train the network and perform hyper parameter tuning.","71b21e09":"b) Pre-process the dataset: - Normalize the dataset using the MinMaxScaler preprocessing class from the scikit-learn library. - Data split in train\/tes","db82a2b5":"e) Evaluate the model."}}