{"cell_type":{"a35b3c9f":"code","ad7470d4":"code","5507648b":"code","6e1b39fc":"code","f7f2c1d9":"code","a1145f3a":"code","45ff9e33":"code","ea78e8c9":"code","65e95978":"code","b52afa74":"code","f8abea5a":"code","0cd577c6":"code","c21d1dcf":"code","ff6928c0":"code","e3b4a654":"code","ace6f869":"code","3ca151fa":"code","d154b262":"code","65dc1092":"code","6ec60853":"code","89a53aa5":"code","46a88704":"code","2b9e6571":"code","7bd0dc99":"code","9368ef97":"code","9964c596":"code","c0d13de7":"code","95a210c3":"code","c9c19b01":"code","61bebf8d":"code","780bd057":"code","b95d32af":"code","b5d116ed":"code","b500af31":"code","b1d8fbf1":"code","5eaa443d":"code","4c8d8a0c":"code","1dee76d2":"code","93189398":"code","cbaf680f":"code","367276e1":"markdown","d1f0d2fd":"markdown","53ad9205":"markdown","6fc3bf5a":"markdown","e6f526c7":"markdown","ed9a138b":"markdown","5f5c61a7":"markdown","d346682a":"markdown","ff19976d":"markdown","98dd29d0":"markdown","868d0fb0":"markdown","09484f79":"markdown","d3ad8b9a":"markdown","6971be08":"markdown","5153b3c5":"markdown","9ca993fc":"markdown"},"source":{"a35b3c9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ad7470d4":"train = pd.read_csv(r'\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv(r'\/kaggle\/input\/titanic\/test.csv')\ntraintest = pd.concat([train,test])\ntrain['train_test'] = 1\ntest['train_test'] = 0\ntest['Survived'] = np.NaN\ntraintest = pd.concat([train,test])\n%matplotlib inline\n","5507648b":"traintest.head()","6e1b39fc":"# Checking the data type of the varibles\ntrain.info()\ntrain.describe()","f7f2c1d9":"#creating histograms for numerical data:\n\nplt.hist(train['Age'])\nplt.title(\"Age\")\nplt.show()\nplt.hist(train['Parch'])\nplt.title('Parch')\nplt.show()\nplt.hist(train['SibSp'])\nplt.title('SibSp')\nplt.show()\nplt.hist(train['Fare'])\nplt.title('Fare')\nplt.show()","a1145f3a":"# Here I'm checking if there is any numerical value correlated with the 'Survived'\nsns.heatmap(train.corr(), annot = True)","45ff9e33":"# Here we are checking if there is correlation between survival and certain groups inside the variables\n\nfor i in ['Age', 'Parch', 'SibSp', 'Fare']:\n    sns.factorplot(x = i, y = 'Survived', data = train)","ea78e8c9":"#Exploring Age and Fare\ntrain['Age Group'] = round(train['Age']\/20)\ntrain['Fare Range'] = round(train['Fare']\/50)\n\nsns.factorplot(x = 'Age Group', y = 'Survived', data = train)\nsns.factorplot(x = 'Fare Range', y = 'Survived', data = train)","65e95978":"sns.factorplot(x = 'Embarked', y = 'Survived', data = train)","b52afa74":"sns.factorplot(x = 'Pclass', y = 'Survived', data = train)\n    ","f8abea5a":"sns.factorplot(x = 'Sex', y = 'Survived', data = train)","0cd577c6":"\nsns.factorplot(x = 'Ticket', y = 'Survived', data = train)\n    ","c21d1dcf":"train['Ticket_letters'] = train['Ticket'].str[0:1]\nsns.factorplot(x = 'Ticket_letters', y = 'Survived', data = train)","ff6928c0":"sns.factorplot( x = 'Cabin', y = 'Survived', data = train)","e3b4a654":"train['Cabin_reduction'] = train['Cabin'].str[0:1]\nsns.factorplot(x = 'Cabin_reduction', y = 'Survived', data = train)","ace6f869":"for i in ['Fare', 'SibSp', \"Parch\"]:\n    train['normal'] =  np.log(train[i] + 1)\n    train['normal'].hist()\n    plt.title('normal')\n    plt.show()","3ca151fa":"train.head()\ntrain.drop('normal', axis = 'columns', inplace = True )","d154b262":"train['Normal Fare'] = np.log(train['Fare']+ 1)\ntrain.head()","65dc1092":"for i in train:\n print('null sum in ', i,  ' is ', train[i].isnull().sum())","6ec60853":"train['Age Group'].fillna(train['Age Group'].mean(), inplace = True)\ntrain['Age Group'].isnull().sum()\n","89a53aa5":" sns.barplot(train['Cabin_reduction'].value_counts().index,train['Cabin_reduction'].value_counts())\n ","46a88704":"train['Cabin_reduction'].fillna('M', inplace = True)","2b9e6571":" sns.barplot(train['Cabin_reduction'].value_counts().index,train['Cabin_reduction'].value_counts())\n ","7bd0dc99":"sns.factorplot(x = 'Cabin_reduction', y = 'Survived', data = train)","9368ef97":"sns.barplot(train['Embarked'].value_counts().index,train['Embarked'].value_counts())","9964c596":"train['Embarked'].fillna('S', inplace = True)\n","c0d13de7":"train.columns","95a210c3":"x_train = pd.get_dummies(train[[ 'Pclass', 'Sex', 'SibSp',\n       'Parch', 'Embarked', 'Age Group',\n        'Ticket_letters', 'Cabin_reduction', 'Normal Fare']])\ny_train = train['Survived']\n\n","c9c19b01":"from sklearn.model_selection import cross_val_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC","61bebf8d":"cv = cross_val_score(GaussianNB(), x_train, y_train, cv = 5)\nprint(cv.mean())","780bd057":"cv = cross_val_score( LogisticRegression(), x_train, y_train, cv = 5)\n\nprint(cv.mean())","b95d32af":"cv = cross_val_score(tree.DecisionTreeClassifier(random_state = 1) , x_train, y_train, cv = 5)\n\nprint(cv.mean())","b5d116ed":"cv = cross_val_score( KNeighborsClassifier(), x_train, y_train, cv = 5)\n\nprint(cv.mean())","b500af31":"cv = cross_val_score( RandomForestClassifier(), x_train, y_train, cv = 5)\n\nprint(cv.mean())","b1d8fbf1":"cv = cross_val_score( SVC(probability = True), x_train, y_train, cv = 5)\n\nprint(cv.mean())","5eaa443d":"traintest['Age Group'] = round(traintest['Age']\/20)\ntraintest['Ticket_letters'] = traintest['Ticket'].str[0:1]\ntraintest['Cabin_reduction'] = traintest['Cabin'].str[0:1]\ntraintest['Normal Fare'] = np.log(traintest['Fare']+ 1)\ntraintest['Normal Fare'].fillna(traintest['Normal Fare'].mean(), inplace = True)\ntraintest['Age Group'].fillna(traintest['Age Group'].mean(), inplace = True)\ntraintest['Cabin_reduction'].fillna('M', inplace = True)\ntraintest['Embarked'].fillna('S', inplace = True)\ntraintest_dummies = pd.get_dummies(traintest[[ 'Pclass', 'Sex', 'SibSp',\n       'Parch', 'Embarked', 'Age Group',\n        'Ticket_letters', 'Cabin_reduction', 'Normal Fare', 'train_test']])\n\n#Split to train test again\nx_train = traintest_dummies[traintest_dummies.train_test == 1].drop(['train_test'], axis =1)\nx_test = traintest_dummies[traintest_dummies.train_test == 0].drop(['train_test'], axis =1)\n\ny_train = traintest[traintest.train_test==1].Survived\ny_train.shape\n\n","4c8d8a0c":"x_train.info()","1dee76d2":"x_test.info()","93189398":"Model = SVC(probability = True)\nModel.fit(x_train, y_train)\nprediction = Model.predict(x_test).astype(int)","cbaf680f":"my__submission = pd.DataFrame({'PassengerId': test['PassengerId'], 'Survived': prediction})\n\nmy__submission.to_csv('submissionn.csv', index=False)","367276e1":"# 1) Exploring the data","d1f0d2fd":"So SVC is the best model, now I will adjust the test data.","53ad9205":"# 3) Choosing a model","6fc3bf5a":"Oops, we can derive that people with high SibSp and Parch have lower survival rate.","e6f526c7":"So we will try to come up with replacement to every null value in every variables.","ed9a138b":"There are 2 null values in Embarked I will fill them with S since they are not significant","5f5c61a7":"# 2) Processing the data\n","d346682a":"Ok since Parch and SibSp still doesn't follow normal distribution I will just add 'normal fare' as a new varibale to the data frame.","ff19976d":"Holy moly","98dd29d0":"From exploring the numerical data we reach to the following conclusions:\n1. The smaller the family (low Parch or Sibsp) the higher probabiltiy of surviving\n2. The younger the passenger the higher his\/her chance of surviving\n3. People who paid more fair, have better chance of surviving","868d0fb0":"I will fill null values with a unique letter","09484f79":"This is the first time I do data analysis\nmuch thanks to the author of the following notebook it helped me alot and I copyed some of his codes:\nhttps:\/\/www.kaggle.com\/kenjee\/titanic-project-example\n","d3ad8b9a":"Parch, SibSp, and Fare show Pareto distribution. I will try to make their distributions follow the bill curve before fitting the data.","6971be08":"## Overview\n1) Exploring the data\n\n2) Data processing\n\n3) Looking for a model with the best prediction\n\n4) fitting and submitting","5153b3c5":"Now I will try to fill the null values","9ca993fc":"It looks like that there is no strong correlation between survival and other numerical variables.\nThere is correlation between Parch and SibSp and we might make use of that.\n"}}