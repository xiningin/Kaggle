{"cell_type":{"056f80ea":"code","8f085859":"code","9976288b":"code","36891da4":"code","fe8dc584":"code","45c953df":"code","3f37e9d1":"code","eea6b440":"code","1e55a045":"code","cce4ab0e":"code","1dab420a":"code","cdfc0724":"code","0c004ebf":"code","fb209c60":"code","464c1e19":"code","fa3384da":"code","e22575ec":"code","0e1d3b89":"code","9a914060":"code","351c5497":"code","f0dc95cf":"code","429c106f":"code","247465f6":"code","555ade1e":"markdown","13825383":"markdown","f3349097":"markdown","4b38e2da":"markdown","a3cf2a5d":"markdown","8c2f619d":"markdown","b280ed65":"markdown","15fbe48f":"markdown","76424f83":"markdown","f00fdf68":"markdown","0c740b44":"markdown","32a54956":"markdown"},"source":{"056f80ea":"import pandas as pd\nimport tensorflow as tf\n\nseed = 1010\ntf.random.set_seed(seed)","8f085859":"df1 = pd.read_csv('..\/input\/flight-delay-prediction\/Jan_2019_ontime.csv')\ndf2 = pd.read_csv('..\/input\/flight-delay-prediction\/Jan_2020_ontime.csv')\ndf1.shape, df2.shape","9976288b":"# Merge the datasets\ndf = pd.concat([df1, df2], ignore_index=True)\ndf.info()","36891da4":"df.head()","fe8dc584":"# Remove the columns not used in training\ncols_to_drop = []\ncols_to_drop.append('OP_UNIQUE_CARRIER')\ncols_to_drop.append('OP_CARRIER_AIRLINE_ID')\ncols_to_drop.append('OP_CARRIER')\ncols_to_drop.append('ORIGIN_AIRPORT_SEQ_ID')\ncols_to_drop.append('ORIGIN')\ncols_to_drop.append('DEST_AIRPORT_SEQ_ID')\ncols_to_drop.append('DEST')\ncols_to_drop.append('DEP_TIME')\ncols_to_drop.append('ARR_TIME')\ncols_to_drop.append('ARR_DEL15')\ncols_to_drop.append('CANCELLED')\ncols_to_drop.append('DIVERTED')\ncols_to_drop.append('DISTANCE')\ncols_to_drop.append('Unnamed: 21')\n\ndf.drop(columns=cols_to_drop, inplace=True)","45c953df":"df.isna().any()","3f37e9d1":"totalrows = df.shape[0]\n\nfor col in df.columns:\n    nas = sum(df[col].isna())\n    if nas:\n        print(f'Column {col} has {nas} ({(nas\/totalrows)*100:.2f}% of total) NAs.')\nprint('Done looking for NAs')","eea6b440":"df.dropna(inplace=True)\ndf.shape","1e55a045":"split   = 0.8 # 80\/20 split for training and evaluation\ndftrain = df.sample(frac=split, random_state=seed) \ndfeval  = df.drop(dftrain.index)\ndftrain.shape, dfeval.shape","cce4ab0e":"# Extract and remove the label (to be predicted) set\ny_train = dftrain.pop('DEP_DEL15')\ny_eval  = dfeval.pop('DEP_DEL15')\ny_train.shape, y_eval.shape","1dab420a":"dftrain.dtypes","cdfc0724":"def onehot_catgcol(df, column):\n    fc = tf.feature_column\n    values  = df[column].unique()\n    cat_col = fc.categorical_column_with_vocabulary_list(column, values)\n    return (fc.indicator_column(cat_col))","0c004ebf":"categorical_cols = ['TAIL_NUM', 'DEP_TIME_BLK']\nnumeric_cols = [i for i in dftrain.columns if i not in categorical_cols]\n\ncategorical_cols, numeric_cols","fb209c60":"# tf.estimator requires the features to be Tensors\nfc = tf.feature_column\nfeatures = [fc.numeric_column(i)  for i in numeric_cols]\nfc_catgs = [onehot_catgcol(df, i) for i in categorical_cols]\nfeatures.extend(fc_catgs)\n\nlen(features)","464c1e19":"def input_fn(features, labels, training=True, batch_size=256):\n    dataset = tf.data.Dataset.from_tensor_slices((dict(features), labels))\n\n    if training:\n        dataset = dataset.shuffle(1000).repeat()\n    \n    return dataset.batch(batch_size)","fa3384da":"params = {\n    'n_trees':50,\n    'max_depth':3,\n    'n_batches_per_layer':1,\n    'center_bias':True\n}\nclassifier = tf.estimator.BoostedTreesClassifier(features, **params)","e22575ec":"classifier.train(\n    input_fn=lambda: input_fn(dftrain, y_train, training=True),\n    max_steps=100)","0e1d3b89":"eval_result = classifier.evaluate(\n                input_fn=lambda: input_fn(dfeval, y_eval, training=False))\n\nprint(f'Evaluation set accuracy = {eval_result[\"accuracy\"]*100:.2f}%')","9a914060":"pd.Series(eval_result).to_frame()","351c5497":"def serving_fn():\n    day_of_month      = tf.Variable([], dtype=tf.int64, name='DAY_OF_MONTH')\n    day_of_week       = tf.Variable([], dtype=tf.int64, name='DAY_OF_WEEK')\n    tail_num          = tf.Variable([], dtype=tf.string,name='TAIL_NUM')\n    op_carrier_fl_num = tf.Variable([], dtype=tf.int64, name='OP_CARRIER_FL_NUM')\n    origin_airport_id = tf.Variable([], dtype=tf.int64, name='ORIGIN_AIRPORT_ID')\n    dest_airport_id   = tf.Variable([], dtype=tf.int64, name='DEST_AIRPORT_ID')\n    dep_time_blk      = tf.Variable([], dtype=tf.string,name='DEP_TIME_BLK')\n    \n    reqd_inputs =  {'DAY_OF_MONTH':day_of_month,\n                    'DAY_OF_WEEK':day_of_week,\n                    'TAIL_NUM':tail_num,\n                    'OP_CARRIER_FL_NUM':op_carrier_fl_num,\n                    'ORIGIN_AIRPORT_ID':origin_airport_id,\n                    'DEST_AIRPORT_ID':dest_airport_id,\n                    'DEP_TIME_BLK':dep_time_blk}\n    \n    fn = tf.estimator.export.build_raw_serving_input_receiver_fn(reqd_inputs)\n    return fn","f0dc95cf":"!rm -r '..\/output\/kaggle\/working\/'","429c106f":"# Note that we are using serving_fn as a function () while passing as arg\nclassifier.export_saved_model('..\/output\/kaggle\/working\/', serving_fn())","247465f6":"!find ..\/output\/kaggle\/working\/ -print | sed -e \"s;[^\/]*\/;|____;g;s;____|; |;g\"","555ade1e":"## Split dataset for training and evaluation ","13825383":"#### Set up Hyper Parameters","f3349097":"## Saving the Estimator Model","4b38e2da":"#### Create Feature Columns","a3cf2a5d":"#### Train","8c2f619d":"## Load the dataset ","b280ed65":"## Prepare the dataset for training","15fbe48f":"# Purpose\n* To introduce `BoostedTreesClassifier` and how to save a `tf.estimator` model in the ProtoBuf (.pb) format for serving.\n\n* *For Reference:*   \n[Introduction to GradientBoosting - YouTube\/StatQuest with Josh Starmer](https:\/\/youtu.be\/3CC4N4z3GJc?t=5)   \n[Why Estimators?](https:\/\/www.tensorflow.org\/guide\/estimator)  \n[What is serving?](https:\/\/www.tensorflow.org\/tfx\/guide\/serving)  \n[Protocol Buffers](https:\/\/en.wikipedia.org\/wiki\/Protocol_Buffers)\n","76424f83":"#### Create Input Function for both Training and Evaluation","f00fdf68":"## Using Estimator","0c740b44":"#### Evaluation","32a54956":"#### View the saved model files\nUsing `find` as an alternate to `tree` based on solution from: [Stackoverflow\/Bryan Heden](https:\/\/stackoverflow.com\/questions\/54228819\/tree-command-not-found)"}}