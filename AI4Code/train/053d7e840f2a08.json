{"cell_type":{"9b464ca2":"code","61ed2be9":"code","6f9012c0":"code","f1a1f07c":"code","c97e48a6":"code","7c5bec8a":"code","05c348fd":"code","6c5e8ca6":"code","0116f0fc":"code","9844a3fc":"code","a64b48d5":"code","59e53e78":"code","23fe2139":"code","8e3e9dda":"code","8282e2b4":"code","d7332b89":"code","1da2ced7":"code","bdcbde58":"code","1707d74c":"code","ac5ac272":"code","66c6a2c7":"code","3b2d9a35":"code","668b3496":"code","40689238":"code","d6b8ddda":"code","539c3794":"code","217c6ef9":"code","010ff254":"code","00dd9112":"code","9e02b066":"code","cb31d95f":"code","5801e043":"code","28a3f4f5":"code","960ea42f":"code","f84f98a9":"code","c39535ce":"code","06412624":"code","6ef35375":"code","edbdf95f":"code","5edbdfe4":"code","d947a43f":"code","146b7eff":"code","e576f725":"code","aa0b210e":"code","ef28636b":"code","d45e0a13":"code","392270e1":"code","1414fd30":"code","0d1755e4":"code","220159ea":"code","65ab87f7":"code","61c2aefe":"code","28eaca68":"code","1e2317e2":"code","c633c098":"code","c4cd5a16":"code","e15dee25":"code","3667c551":"markdown","724a1ded":"markdown","30488cd4":"markdown","1fb8e74c":"markdown","6161b00b":"markdown","f310c02e":"markdown","b2bb3e73":"markdown","fa97038d":"markdown","9e16b151":"markdown","26e8ea80":"markdown","de5cfc47":"markdown","170fc496":"markdown","fb3ea92a":"markdown","f3ea5e4a":"markdown","6c29d68e":"markdown","a88a4568":"markdown","74518ab9":"markdown","a5e75990":"markdown","22a3d29d":"markdown","a07118cb":"markdown","a883ccf5":"markdown","108fb1aa":"markdown","ba37181d":"markdown","ef14d322":"markdown","ebaca893":"markdown","0fe34d9e":"markdown","d613b8be":"markdown","a487a544":"markdown","ee2f4dd7":"markdown","f8d2f501":"markdown","2fb30bb8":"markdown","5c40de78":"markdown","f1f64b6e":"markdown","ad0dd0b0":"markdown","5254e432":"markdown","891c970c":"markdown","8fcdaf16":"markdown","0867620b":"markdown","379d007e":"markdown","f251111f":"markdown","afd11e39":"markdown","f70569bd":"markdown","7bf814dc":"markdown","9ae0dc6f":"markdown","68359650":"markdown","7e9ec353":"markdown","93c8465a":"markdown","b9060d5d":"markdown","07e0b502":"markdown","84d6c328":"markdown","e71a98db":"markdown","8ac754af":"markdown","cc8fd9c5":"markdown","4c780297":"markdown","727b98db":"markdown"},"source":{"9b464ca2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","61ed2be9":"df = pd.read_csv(\"\/kaggle\/input\/credit-card-customers\/BankChurners.csv\", index_col=\"CLIENTNUM\")\n# df.drop(df.columns[-2:], axis=1, inplace=True)\ndf = df.iloc[:, :-2]\ndf.head()","6f9012c0":"print(df.shape)\nprint(\"\\n\")\nprint(df.dtypes)\nprint(\"\\n\")\nprint(df.dtypes.value_counts())","f1a1f07c":"import seaborn as sns\nfor column in df.columns:\n    if df[column].dtype == \"object\":\n        print(df[column].value_counts(sort=False) \/ df.shape[0])\n        print(\"\\n\")","c97e48a6":"from matplotlib import pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(20, 20))\ncat_features = [column for column in df.columns if df[column].dtype == \"object\"]\nfor i in range(len(cat_features)):\n    plt.subplot(3, 2, i+1)\n    s = df[cat_features[i]].value_counts(sort=False) \/ df.shape[0]\n    sns.barplot(x=s.index, y=s)","7c5bec8a":"num_features = [column for column in df.columns if df[column].dtype in [\"int64\", \"float64\"]]\nbins = [\"auto\", 6, \"auto\", 6, 7, 7] + [\"auto\"] * 8\nplt.figure(figsize=(20, 30))\nfor i in range(len(num_features)):\n    plt.subplot(7, 2, i+1)\n    sns.histplot(data=df, x=num_features[i], stat = \"density\", bins=bins[i], kde=False)","05c348fd":"df.corr()","6c5e8ca6":"sns.heatmap(df.corr())","0116f0fc":"plt.figure(figsize=(25, 30))\nfor i in range(len(num_features)):\n    plt.subplot(7, 2, i+1)\n    sns.boxplot(x=num_features[i], y=\"Attrition_Flag\", data=df, orient=\"h\")","9844a3fc":"# Gender\nsub_num_features_1 = [\"Credit_Limit\", \"Avg_Open_To_Buy\", \"Avg_Utilization_Ratio\"]\nplt.figure(figsize=(20, 10))\nfor i, fea in enumerate(sub_num_features_1):\n    plt.subplot(1, 3, i+1)\n    sns.boxplot(x=\"Gender\", y=fea, data=df, order=[\"M\", \"F\"])","a64b48d5":"# Income_Category\nsub_num_features_2 = [\"Credit_Limit\", \"Avg_Open_To_Buy\", \"Avg_Utilization_Ratio\"]\nplt.figure(figsize=(25, 10))\nfor i, fea in enumerate(sub_num_features_2):\n    plt.subplot(1, 3, i+1)\n    sns.boxplot(x=\"Income_Category\", y=fea, data=df, order=[\"Less than $40K\", \"$40K - $60K\", \"$60K - $80K\", \"$80K - $120K\", \"$120K +\", \"Unknown\"])","59e53e78":"# Card_Category\nsub_num_features_3 = [\"Credit_Limit\", \"Avg_Open_To_Buy\", \"Total_Trans_Amt\", \"Total_Trans_Ct\", \"Avg_Utilization_Ratio\"]\nplt.figure(figsize=(25, 15))\nfor i, fea in enumerate(sub_num_features_3):\n    plt.subplot(2, 3, i+1)\n    sns.boxplot(x=\"Card_Category\", y=fea, data=df)","23fe2139":"from sklearn.model_selection import train_test_split\ndf_train, df_test = train_test_split(df, test_size=0.1, random_state=0)\ny_train, X_train, y_test, X_test = df_train.iloc[:, 0], df_train.iloc[:, 1:], df_test.iloc[:, 0], df_test.iloc[:, 1:]","8e3e9dda":"from sklearn.preprocessing import LabelEncoder, OrdinalEncoder, OneHotEncoder\n\n# \u5bf9\u6807\u7b7e\u503c\u8fdb\u884c\u6807\u7b7e\u7f16\u7801\n# labelencoder = LabelEncoder()\n# y_train = labelencoder.fit_transform(y_train)\n# y_train = pd.Series(y_train, name=\"Attrition_Flag\", index=X_train.index)\ny_train = y_train.map({\"Existing Customer\": 0, \"Attrited Customer\": 1})\n\n# \u5bf9\u6027\u522b\u505a\u72ec\u70ed\u7f16\u7801\nonehotencoder_g = OneHotEncoder(categories=[[\"M\", \"F\"]], handle_unknown=\"ignore\", sparse=False)\nt = onehotencoder_g.fit_transform(X_train[\"Gender\"].values.reshape(-1, 1))\nt = pd.DataFrame(t, columns=[\"Gender_M\", \"Gender_F\"], index=X_train.index, dtype=\"int64\")\nX_train = pd.concat([X_train, t], axis=1)\nX_train.drop(columns=[\"Gender\"], inplace=True)\n\n# \u5bf9\u53d7\u6559\u80b2\u6c34\u5e73\/\u5a5a\u59fb\u72b6\u51b5\/\u6536\u5165\u7c7b\u578b\/\u4fe1\u7528\u5361\u7c7b\u578b\u505a\u6709\u5e8f\u7f16\u7801\nordinalencoder = OrdinalEncoder(categories=[[\"Uneducated\", \"High School\", \"College\", \"Graduate\", \"Post-Graduate\", \"Doctorate\"],\n                                          [\"Single\", \"Married\", \"Divorced\"],\n                                          [\"Less than $40K\", \"$40K - $60K\", \"$60K - $80K\", \"$80K - $120K\", \"$120K +\"],\n                                          [\"Blue\", \"Silver\", \"Gold\", \"Platinum\"]],\n                              handle_unknown=\"use_encoded_value\",\n                              unknown_value=np.nan)\nfeatures_missing = [\"Education_Level\", \"Marital_Status\", \"Income_Category\"]\nX_train[features_missing + [\"Card_Category\"]] = ordinalencoder.fit_transform(X_train[features_missing + [\"Card_Category\"]])\nX_train[\"Card_Category\"] = X_train[\"Card_Category\"].astype(\"int64\")\nX_train.to_csv(\"~\/Desktop\/data_analysis\/X_train1.csv\")","8282e2b4":"# \u65b9\u6cd5\u4e00 kmeans\u805a\u7c7b + smote\nfrom sklearn.cluster import KMeans\nfrom imblearn.over_sampling import SMOTE\nX_train = pd.read_csv(\"~\/Desktop\/data_analysis\/X_train1.csv\", index_col=\"CLIENTNUM\")\nfeature_complete = list(set(X_train.columns) - set(features_missing))\nX_fc = X_train[feature_complete]\nn_clusters = {\"Education_Level\": 6, \"Marital_Status\": 3, \"Income_Category\": 5}\n\n\ndef KMeansImpute(X_train, X_fc, column):\n    # print(X_train[column])\n    index_fit, index_pred = X_train.index[~pd.isnull(X_train[column])], X_train.index[pd.isnull(X_train[column])]\n    # print(index_fit)\n    # print(index_pred)\n    X_fit, X_pred = X_fc.loc[index_fit], X_fc.loc[index_pred]\n    y_fit = X_train.loc[index_fit, column]\n    # print(y_train)\n    sm = SMOTE(random_state=0)\n    X_sm, y_sm = sm.fit_resample(X_fit, y_fit)\n    kmeans = KMeans(n_clusters[column], random_state=0).fit(X_sm)\n    cluster = pd.Series(kmeans.predict(X_fc), name=\"cluster\", index=X_train.index)\n    t = pd.concat([X_train[column], cluster], axis=1).groupby(\"cluster\")[column].value_counts()\n    # print(t)\n    dimpute = {i: t[i].idxmax() for i in range(n_clusters[column])}\n    # print(dimpute)\n    X_train.loc[index_pred, column] = cluster.map(dimpute)\n    \n    \nKMeansImpute(X_train, X_fc, \"Education_Level\")\nKMeansImpute(X_train, X_fc, \"Marital_Status\")\nKMeansImpute(X_train, X_fc, \"Income_Category\")\nX_train[features_missing] = X_train[features_missing].astype(\"int64\")\n\n\nplt.figure(figsize=(20, 5))\nfor i, fea in enumerate(features_missing):\n    plt.subplot(1, 3, i+1)\n    s = X_train[fea].value_counts(sort=False) \/ X_train.shape[0]\n    sns.barplot(x=s.index, y=s)","d7332b89":"# \u65b9\u6cd5\u4e8c logistic\u56de\u5f52 + \u4e0d\u540c\u635f\u5931\u6743\u91cd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nX_train = pd.read_csv(\"~\/Desktop\/data_analysis\/X_train1.csv\", index_col=\"CLIENTNUM\")\nfeature_complete = list(set(X_train.columns) - set(features_missing))\nX_fc = X_train[feature_complete]\n\n\ndef LogisticRegressionImpute(X_train, X_fc, column):\n    index_fit, index_pred = X_train.index[~pd.isnull(X_train[column])], X_train.index[pd.isnull(X_train[column])]\n    X_fit, X_pred = X_fc.loc[index_fit], X_fc.loc[index_pred]\n    y_fit = X_train.loc[index_fit, column]\n    X_fit = (X_fit - X_fit.mean()) \/ X_fit.std()\n    lr = LogisticRegression(class_weight=\"balanced\", random_state=0, solver=\"saga\", max_iter=500).fit(X_fit, y_fit)\n    X_train.loc[index_pred, column] = lr.predict(X_pred)\n    \n    \nLogisticRegressionImpute(X_train, X_fc, \"Education_Level\")\nLogisticRegressionImpute(X_train, X_fc, \"Marital_Status\")\nLogisticRegressionImpute(X_train, X_fc, \"Income_Category\")\nX_train[features_missing] = X_train[features_missing].astype(\"int64\")\n\n\nplt.figure(figsize=(20, 5))\nfor i, fea in enumerate(features_missing):\n    plt.subplot(1, 3, i+1)\n    s = X_train[fea].value_counts(sort=False) \/ X_train.shape[0]\n    sns.barplot(x=s.index, y=s)","1da2ced7":"onehotencoder_ms = OneHotEncoder(categories=[[0, 1, 2]], handle_unknown=\"ignore\", sparse=False)\nt = onehotencoder_ms.fit_transform(X_train[\"Marital_Status\"].values.reshape(-1, 1))\nt = pd.DataFrame(t, columns=[\"Marital_Status_\" + s for s in [\"Single\", \"Married\", \"Divorced\"]], index=X_train.index, dtype=\"int64\")\nX_train = pd.concat([X_train, t], axis=1)\nX_train.drop(columns=[\"Marital_Status\"], inplace=True)\nX_train.to_csv(\"~\/Desktop\/data_analysis\/X_train2.csv\")","bdcbde58":"X_train","1707d74c":"from scipy.stats import pearsonr\npea = pd.DataFrame(columns=[\"cor\", \"p-value\"])\nfor column in X_train.columns:\n    pea = pea.append(pd.Series(pearsonr(X_train[column], y_train), name=column, index=[\"cor\", \"p-value\"]))\npea = pea.iloc[pea[\"cor\"].abs().argsort()[::-1]]\npea","ac5ac272":"from sklearn.feature_selection import mutual_info_classif\nmi_scores = mutual_info_classif(X_train, y_train, discrete_features=(X_train.dtypes==\"int64\"))\nmi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X_train.columns).sort_values(ascending=False)\nmi_scores","66c6a2c7":"from sklearn.feature_selection import chi2\nch_scores = chi2(X_train, y_train)\nch = pd.DataFrame(np.array(ch_scores).T, columns=[\"chi2\", \"p-value\"], index=X_train.columns).sort_values(by=\"chi2\", ascending=False)\nch","3b2d9a35":"# from sklearn.manifold import TSNE\n\n\n# def tsneplot(X, y):\n#     X_embedded = TSNE(n_components=2, init=\"pca\", n_iter=1000, learning_rate=1, random_state=0).fit_transform(X)\n#     X_embedded = pd.DataFrame(X_embedded, columns=[\"x\", \"y\"], index=X.index)\n#     df_embedded = pd.concat([y, X_embedded], axis=1)\n#     plt.figure(figsize=(10, 5))\n#     sns.scatterplot(\"x\", \"y\", hue=\"Attrition_Flag\", data=df_embedded)\n    \n    \n# tsneplot(X_train, y_train)","668b3496":"# \u4e0a\u91c7\u6837\nfrom imblearn.over_sampling import SMOTE\nX_train = pd.read_csv(\"~\/Desktop\/data_analysis\/X_train2.csv\", index_col=\"CLIENTNUM\")\ns = SMOTE(random_state=0)\nXs_train, ys_train = s.fit_resample(X_train, y_train)\n\n# \u6570\u636e\u518d\u5207\u5206\nXs_train = (Xs_train - Xs_train.mean()) \/ Xs_train.std()\nXs_train, Xs_valid = train_test_split(Xs_train, test_size=0.2, random_state=0)\nys_train, ys_valid = ys_train[Xs_train.index], ys_train[Xs_valid.index]","40689238":"from sklearn.metrics import fbeta_score, make_scorer, confusion_matrix, roc_curve, auc, RocCurveDisplay\n\n\n# \u5b9a\u4e49\u5f97\u5206\u51fd\u6570\nftwo_scorer = make_scorer(fbeta_score, beta=2)\ndef score_func(y_true, y_pred):\n    cm = confusion_matrix(y_true, y_pred)\n    tn, fp, fn, tp = cm[0][0], cm[0][1], cm[1][0], cm[1][1]\n    tnr = tn \/ (tn + fp)\n    tpr = tp \/ (fn + tp)\n    return (tnr + tpr) \/ 2\nscorer = make_scorer(score_func)\n\n\n# \u663e\u793a\u7cbe\u786e\u7387\uff0c\u53ec\u56de\u7387\ndef get_cross(y_test, y_pred):\n    ct_precision = pd.crosstab(y_test, y_pred, normalize=\"columns\")\n    ct_precision.columns.name = \"Pred Precision\"\n    print(ct_precision, \"\\n\")\n    ct_recall = pd.crosstab(y_test, y_pred, normalize=\"index\")\n    ct_recall.columns.name = \"Pred Recall\"\n    print(ct_recall, \"\\n\")\n    \n    \n# \u7ed8\u5236ROC\u66f2\u7ebf\ndef get_roc(X, y, estimator):\n    y_dec = estimator.predict_proba(X)[:, 1]\n    fpr, tpr, thresholds = roc_curve(y, y_dec)\n    roc_auc = auc(fpr, tpr)\n    display = RocCurveDisplay(fpr=fpr, tpr=tpr, roc_auc=roc_auc)\n    display.plot()\n    plt.show()","d6b8ddda":"# from sklearn.model_selection import GridSearchCV\n# params = [{\"solver\": [\"lbfgs\"], \"C\": [0.01, 0.1, 1, 10, 100]},\n#           {\"solver\": [\"saga\"], \"C\": [0.01, 0.1, 1, 10, 100], \"penalty\": [\"elasticnet\"], \"l1_ratio\": [0, 0.2, 0.4, 0.5, 0.6, 0.8, 1]}]\n# lr = LogisticRegression(max_iter=5000, class_weight=\"balanced\", random_state=0)\n# gslr = GridSearchCV(estimator=lr, param_grid=params, scoring=ftwo_scorer).fit(Xs_train, ys_train)","539c3794":"# gslr.best_estimator_","217c6ef9":"# gslr.best_params_","010ff254":"# gslr.best_score_","00dd9112":"# \u6a21\u578b\u8bad\u7ec3\nfrom sklearn.linear_model import LogisticRegression\n# lr = LogisticRegression(C=10, solver=\"lbfgs\", max_iter=5000, class_weight=\"balanced\", random_state=0).fit(Xs_train, ys_train)\nlr = LogisticRegression(C=0.1, solver=\"saga\", penalty=\"elasticnet\", l1_ratio=0.4, class_weight=\"balanced\", max_iter=5000, random_state=0)\nlr.fit(Xs_train, ys_train)\n\n# \u5728Xs_train, ys_train\u4e0a\u7684\u8868\u73b0\nys_pred = lr.predict(Xs_train)\nget_cross(ys_train, ys_pred)\nget_roc(Xs_train, ys_train, lr)\n\n# \u5728Xs_valid, ys_valid\u4e0a\u7684\u8868\u73b0\nys_pred = lr.predict(Xs_valid)\nget_cross(ys_valid, ys_pred)\nget_roc(Xs_valid, ys_valid, lr)","9e02b066":"from sklearn.model_selection import GridSearchCV\n# from sklearn.model_selection import cross_validate, cross_val_predict, cross_val_score\nfrom sklearn.svm import SVC\nparams = [{'kernel': ['rbf'], 'gamma': [1e-1, 1e-2, 1e-3, 1e-4], 'C': [0.01, 0.1, 1, 10, 100]},\n          {'kernel': ['poly'], 'gamma': [1e-1, 1e-2, 1e-3, 1e-4], 'C': [0.01, 0.1, 1, 10, 100], 'degree': [2, 3, 4]}]\nsvc = SVC(class_weight=\"balanced\", random_state=0)\ngssvc = GridSearchCV(estimator=svc, param_grid=params, scoring=ftwo_scorer).fit(Xs_train, ys_train)","cb31d95f":"gssvc.best_estimator_","5801e043":"gssvc.best_params_","28a3f4f5":"gssvc.best_score_","960ea42f":"# \u6a21\u578b\u8bad\u7ec3\n# best_svc = SVC(C=0.01, kernel=\"poly\", degree=3, gamma=0.01, class_weight=\"balanced\", probability=True, random_state=0)\nbest_svc = SVC(C=10, gamma=0.1, kernel=\"rbf\", class_weight=\"balanced\", probability=True, random_state=0)\nbest_svc.fit(Xs_train, ys_train)\n\n# \u5728Xs_train, ys_train\u4e0a\u7684\u8868\u73b0\nys_pred = best_svc.predict(Xs_train)\nget_cross(ys_train, ys_pred)\nget_roc(Xs_train, ys_train, best_svc)\n\n# \u5728Xs_valid, ys_valid\u4e0a\u7684\u8868\u73b0\nys_pred = best_svc.predict(Xs_valid)\nget_cross(ys_valid, ys_pred)\nget_roc(Xs_valid, ys_valid, best_svc)\nprint(ys_valid.value_counts())\n","f84f98a9":"from sklearn.ensemble import RandomForestClassifier\nparams = [{\"n_estimators\": [100, 500, 1000, 5000, 10000], \"criterion\": [\"gini\", \"entropy\"]}]\nrfc = RandomForestClassifier(class_weight=\"balanced_subsample\", random_state=0)\ngsrfc = GridSearchCV(estimator=rfc, param_grid=params, scoring=ftwo_scorer).fit(Xs_train, ys_train)\n","c39535ce":"gsrfc.best_params_","06412624":"gsrfc.best_estimator_","6ef35375":"gsrfc.best_score_","edbdf95f":"# best_rfc = RandomForestClassifier(class_weight='balanced_subsample', criterion='entropy', n_estimators=5000, random_state=0)\nbest_rfc = RandomForestClassifier(class_weight='balanced_subsample', criterion='gini', n_estimators=10000, random_state=0)\nbest_rfc.fit(Xs_train, ys_train)\n\n# \u5728Xs_train, ys_train\u4e0a\u7684\u8868\u73b0\nys_pred = best_rfc.predict(Xs_train)\nget_cross(ys_train, ys_pred)\nget_roc(Xs_train, ys_train, best_rfc)\n\n# \u5728Xs_valid, ys_valid\u4e0a\u7684\u8868\u73b0\nys_pred = best_rfc.predict(Xs_valid)\nget_cross(ys_valid, ys_pred)\nget_roc(Xs_valid, ys_valid, best_rfc)","5edbdfe4":"from xgboost import XGBClassifier\nparams = [{\"n_estimators\": [100, 200, 500, 600, 800, 1000], \"max_depth\": [5, 10, 15, 20, 30, 40, 50], \"learning_rate\": [0.01, 0.1, 1, 10, 100]}]\nxgbc = XGBClassifier(use_label_encoder=False, verbosity=0, booster=\"gbtree\", random_state=0)\ngsxgbc = GridSearchCV(estimator=xgbc, param_grid=params, scoring=ftwo_scorer).fit(Xs_train, ys_train)","d947a43f":"gsxgbc.best_estimator_","146b7eff":"gsxgbc.best_params_","e576f725":"gsxgbc.best_score_","aa0b210e":"best_xgbc = XGBClassifier(n_estimators=800, max_depth=10, learning_rate=0.1, use_label_encoder=False, verbosity=0, booster=\"gbtree\", random_state=0)\nbest_xgbc.fit(Xs_train, ys_train)\n\n# \u5728Xs_train, ys_train\u4e0a\u7684\u8868\u73b0\nys_pred = best_xgbc.predict(Xs_train)\nget_cross(ys_train, ys_pred)\nget_roc(Xs_train, ys_train, best_xgbc)\n\n# \u5728Xs_valid, ys_valid\u4e0a\u7684\u8868\u73b0\nys_pred = best_xgbc.predict(Xs_valid)\nget_cross(ys_valid, ys_pred)\nget_roc(Xs_valid, ys_valid, best_xgbc)","ef28636b":"import torch\nfrom torch import nn\n\ntrain_features = torch.tensor(Xs_train.values, dtype=torch.float)\ntrain_labels = torch.tensor(ys_train.values, dtype=torch.float)","d45e0a13":"net = nn.Sequential(\n    nn.Linear(train_features.shape[1], 10),\n    nn.ReLU(),\n    nn.Linear(10, 2),\n    nn.Softmax())\n\nfor params in net.parameters():\n    nn.init.normal_(params, mean=0, std=0.01)","392270e1":"def get_acc(net, features, labels):\n    with torch.no_grad():\n        labels_pred = net(features).max(dim=1)[1]\n        return (labels == labels_pred).sum() \/ labels.shape[0]","1414fd30":"loss = nn.L1Loss()","0d1755e4":"def train(net, train_features, train_labels, test_features, test_labels,\n          num_epochs, learning_rate, weight_decay, batch_size):\n    train_acc, test_acc = [], []\n    dataset = torch.utils.data.TensorDataset(train_features, train_labels)\n    train_iter = torch.utils.data.DataLoader(dataset, batch_size, shuffle=True)\n    optimizer = torch.optim.Adam(params=net.parameters(), lr=learning_rate, weight_decay=weight_decay)\n    net = net.float()\n    for epoch in range(num_epochs):\n        for X, y in train_iter:\n            y_pred = net(X.float()).max(dim=1)[1]\n            l = loss(y_pred.float(), y.float())\n            l.requires_grad_(True)\n            optimizer.zero_grad()\n            l.backward()\n            optimizer.step()\n        train_acc.append(get_acc(net, train_features, train_labels))\n        if test_labels is not None:\n            test_acc.append(get_acc(net, test_features, test_labels))\n    return train_acc, test_acc","220159ea":"def get_k_fold_data(k, i, X, y):\n    assert k > 1\n    fold_size = X.shape[0] \/\/ k\n    X_train, y_train = None, None\n    for j in range(k):\n        idx = slice(j * fold_size, (j + 1) * fold_size)\n        X_part, y_part = X[idx, :], y[idx]\n        if j == i:\n            X_valid, y_valid = X_part, y_part\n        elif X_train is None:\n            X_train, y_train = X_part, y_part\n        else:\n            X_train = torch.cat((X_train, X_part), dim=0)\n            y_train = torch.cat((y_train, y_part), dim=0)\n    return X_train, y_train, X_valid, y_valid","65ab87f7":"def k_fold(k, X_train ,y_train, num_epochs, learning_rate, weight_decay, batch_size):\n    train_acc_sum, valid_acc_sum = 0, 0\n    for i in range(k):\n        data = get_k_fold_data(k, i, X_train, y_train)\n        train_acc, valid_acc = train(net, *data, num_epochs, learning_rate, weight_decay, batch_size)\n        train_acc_sum += train_acc[-1]\n        valid_acc_sum += valid_acc[-1]\n        print(\"fold %d, train acc %f, valid acc %f\" % (i, train_acc[-1], valid_acc[-1]))\n    return train_acc_sum \/ k, valid_acc_sum \/ k","61c2aefe":"k, num_epochs, lr, weight_decay, batch_size = 5, 100, 5, 0, 64\ntrain_acc, valid_acc = k_fold(k, train_features, train_labels, num_epochs, lr, weight_decay, batch_size)\nprint(\"%d-fold validation: avg train acc %f, avg valid acc %f\" % (k, train_acc, valid_acc))","28eaca68":"# feature importance\nplt.figure(figsize=(10, 8))\nfea_imp = pd.DataFrame({\"fea\": Xs_train.columns, \"imp\": best_xgbc.feature_importances_})\nfea_imp.sort_values(by=\"imp\", ascending=False, inplace=True)\nsns.barplot(x=\"imp\", y=\"fea\", data=fea_imp, color=\"dodgerblue\")","1e2317e2":"# \u7279\u5f81\u7f16\u7801\ny_test = y_test.map({\"Existing Customer\": 0, \"Attrited Customer\": 1})\nt = onehotencoder_g.fit_transform(X_test[\"Gender\"].values.reshape(-1, 1))\nt = pd.DataFrame(t, columns=[\"Gender_M\", \"Gender_F\"], index=X_test.index, dtype=\"int64\")\nX_test = pd.concat([X_test, t], axis=1)\nX_test.drop(columns=[\"Gender\"], inplace=True)\nX_test[features_missing + [\"Card_Category\"]] = ordinalencoder.fit_transform(X_test[features_missing + [\"Card_Category\"]])\nX_test[\"Card_Category\"] = X_test[\"Card_Category\"].astype(\"int64\")\n\n# \u7f3a\u5931\u503c\u5904\u7406\nX_fc = X_test[feature_complete]\nLogisticRegressionImpute(X_test, X_fc, \"Education_Level\")\nLogisticRegressionImpute(X_test, X_fc, \"Marital_Status\")\nLogisticRegressionImpute(X_test, X_fc, \"Income_Category\")\nX_test[features_missing] = X_test[features_missing].astype(\"int64\")\nplt.figure(figsize=(20, 5))\nfor i, fea in enumerate(features_missing):\n    plt.subplot(1, 3, i+1)\n    s = X_test[fea].value_counts(sort=False) \/ X_test.shape[0]\n    sns.barplot(x=s.index, y=s)\nt = onehotencoder_ms.fit_transform(X_test[\"Marital_Status\"].values.reshape(-1, 1))\nt = pd.DataFrame(t, columns=[\"Marital_Status_\" + s for s in [\"Single\", \"Married\", \"Divorced\"]], index=X_test.index, dtype=\"int64\")\nX_test = pd.concat([X_test, t], axis=1)\nX_test.drop(columns=[\"Marital_Status\"], inplace=True)","c633c098":"X_test = (X_test - X_test.mean()) \/ X_test.std()\ny_pred = best_svc.predict(X_test)\nget_cross(y_test, y_pred)\nget_roc(X_test, y_test, best_svc)","c4cd5a16":"X_test = (X_test - X_test.mean()) \/ X_test.std()\ny_pred = best_rfc.predict(X_test)\nget_cross(y_test, y_pred)\nget_roc(X_test, y_test, best_rfc)","e15dee25":"X_test = (X_test - X_test.mean()) \/ X_test.std()\ny_pred = best_xgbc.predict(X_test)\nget_cross(y_test, y_pred)\nget_roc(X_test, y_test, best_xgbc)","3667c551":"\u53ef\u4ee5\u770b\u5230\u5927\u90e8\u5206\u7684\u6570\u503c\u578b\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u7cfb\u6570\u90fd\u6bd4\u8f83\u4f4e\uff0c\u76f8\u5173\u6027\u8f83\u5f31\u3002\u4f46\u662f\u6709\u51e0\u5bf9\u53d8\u91cf\u4e4b\u95f4\u76f8\u5173\u6027\u5f88\u5f3a\uff0c\u5982Customer_Age\u4e0eMonths_on_book\uff0cAvg_Open_To_Buy\u4e0eCredit_Limit\uff0cTotal_Trans_Amt\u4e0eTotal_Trans_Ct\uff0cTotal_Revolving_Bal\u4e0eAvg_Utilization_Ratio\u3002\u8fd9\u4e2a\u540e\u7eed\u5728\u964d\u7ef4\u6216\u8005\u7279\u5f81\u7ec4\u5408\u65f6\u4f1a\u8003\u8651\u8fdb\u884c\u5904\u7406\u3002","724a1ded":"# 2. \u7279\u5f81\u5de5\u7a0b\n\u8fd9\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u4e3b\u8981\u505a\u4e24\u4ef6\u4e8b\u60c5\u3002\u7b2c\u4e00\u4e2a\u7531\u4e8e\u8be5\u6570\u636e\u96c6\u662f\u5173\u4e8e\u6807\u7b7e\u503c\u975e\u5e73\u8861\u7684\u6570\u636e\u96c6\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5229\u7528SMOTE\u7b97\u6cd5\u8fdb\u884c\u4e0a\u91c7\u6837\uff0c\u589e\u52a0\u6b63\u6837\u672c\u3002\u7b2c\u4e8c\u4e2a\uff0c\u5728\u540e\u7eed\u7684\u90e8\u5206\u6211\u4eec\u9700\u8981\u8fdb\u884c\u6a21\u578b\u9009\u62e9\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u5c06\u4e0a\u91c7\u6837\u540e\u7684\u6837\u672c\u5207\u5206\u4e3a\u8bad\u7ec3\u96c6\u4e0e\u9a8c\u8bc1\u96c6\u4f9b\u540e\u7eed\u4f7f\u7528\uff0c\u5e76\u4e14\u5728\u5207\u5206\u4e4b\u524d\u8fdb\u884c\u6807\u51c6\u5316\u3002\n","30488cd4":"\u4ece\u4e0a\u8ff0\u7684\u53e6\u5916\u4e09\u5e45\u5206\u7ec4\u7bb1\u7ebf\u56fe\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230Credit_Lmit, Avg_Open_To_Buy, Avg_Utilization_Ration\u8fd9\u4e09\u4e2a\u7279\u5f81\u662f\u4e0e\u5176\u4ed6\u5206\u7c7b\u578b\u53d8\u91cf\u5747\u6709\u76f8\u5173\u5173\u7cfb\u7684\u7279\u5f81\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u4ed6\u4eec\u540c\u6837\u5bf9\u4e8e\u6807\u7b7e\u503c\u662f\u5f71\u54cd\u975e\u5e38\u5927\u7684\u7279\u5f81\u3002","1fb8e74c":"## 5.1 \u9884\u5904\u7406","6161b00b":"## 4.3 \u968f\u673a\u68ee\u6797","f310c02e":"\u968f\u673a\u68ee\u6797\u5f97\u5230\u7684\u6a21\u578b\u540cSVM\u4e00\u6837\u5728\u8bad\u7ec3\u96c6\u4e0a\u7684\u8868\u73b0\u90fd\u975e\u5e38\u597d\u3002\u5728\u9a8c\u8bc1\u96c6\u4e0a\uff0c\u76f8\u6bd4\u4e8eSVM\uff0c\u968f\u673a\u68ee\u6797\u7684\u8d1f\u6837\u672c\u7684\u7cbe\u786e\u7387\u8f83\u4f4e\u4e00\u4e9b\uff0c\u4f46\u662f\u76f8\u5bf9\u7684\uff0c\u53ec\u56de\u7387\u66f4\u9ad8\u3002\u53cd\u8fc7\u6765\uff0c\u6b63\u6837\u672c\u7684\u7cbe\u786e\u7387\u76f8\u6bd4\u8f83\u9ad8\u4e00\u4e9b\uff0c\u4f46\u662f\u53ec\u56de\u7387\u8f83\u4f4e\u4e00\u4e9b\u3002\u7531\u4e8e\u6211\u4eec\u66f4\u52a0\u6ce8\u91cd\u6b63\u6837\u672c\u7684\u53ec\u56de\u7387\u8fd9\u4e2a\u6307\u6807\uff0c\u5728\u5176\u4ed6\u6307\u6807\u6ca1\u6709\u663e\u8457\u964d\u4f4e\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u66f4\u52a0\u504f\u597d\u4e8eSVM\u6a21\u578b\u3002","b2bb3e73":"\u5bf9\u4e8e\u5176\u4ed6\u7684\u5206\u7c7b\u578b\u53d8\u91cf\uff0c\u6211\u4eec\u53ea\u7ed8\u5236\u4e0e\u5176\u6709\u76f8\u5173\u6027\u7684\u6570\u503c\u578b\u53d8\u91cf\u4e4b\u95f4\u7684\u5206\u7ec4\u7bb1\u7ebf\u56fe\u3002","fa97038d":"## 3.2 \u652f\u6301\u5411\u91cf\u673a","9e16b151":"\u5728\u5f53\u524d\u7684\u53c2\u6570\u7ec4\u5408\u4e0b\u8bad\u7ec3\u5f97\u5230\u7684SVM\u5206\u7c7b\u5668\u65e0\u8bba\u662f\u5728\u8bad\u7ec3\u96c6\u4e0a\u8fd8\u662f\u5728\u9a8c\u8bc1\u96c6\u4e0a\u7684\u8868\u73b0\u90fd\u662f\u975e\u5e38\u597d\u7684\u3002\u76f8\u6bd4\u4e8elogistic\u56de\u5f52\uff0cSVM\u5f97\u5230\u7684\u7ed3\u679c\u5728\u5404\u4e2a\u6307\u6807\u4e0a\u90fd\u5f97\u5230\u4e86\u63d0\u5347\u3002\u6211\u4eec\u91cd\u70b9\u89c2\u5bdf\u6a21\u578b\u5728\u9a8c\u8bc1\u96c6\u4e0a\u7684\u8868\u73b0\u3002\u5176\u4e2d\u6b63\u6837\u672c\u7684\u53ec\u56de\u7387\u8fbe\u5230\u4e8696.6%\uff0c\u540c\u65f6\u7cbe\u786e\u7387\u8fbe\u5230\u4e8695%\uff0c\u5747\u63d0\u5347\u4e865%\u5de6\u53f3\u3002\u53ef\u4ee5\u8bf4SVM\u4f5c\u4e3a\u4e00\u4e2a\u7ecf\u5178\u7684\u5206\u7c7b\u6a21\u578b\uff0c\u5b83\u7684\u6548\u679c\u662f\u975e\u5e38\u597d\u7684\u3002","26e8ea80":"## 1.5 \u7f3a\u5931\u503c\u5904\u7406\n\u6570\u636e\u96c6X_train\u5728Education_Level, Marital_Status, Income_Category\u8fd9\u4e09\u5217\u7279\u5f81\u4e2d\u5b58\u5728\u591a\u4e2anp.nan\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8fdb\u884c\u7f3a\u5931\u503c\u586b\u5145\u3002\u672c\u90e8\u5206\u6253\u7b97\u5229\u7528kmeans\u805a\u7c7b\u548clogistic\u56de\u5f52\u4e24\u79cd\u65b9\u6cd5\u5bf9\u7f3a\u5931\u503c\u8fdb\u884c\u586b\u5145\u3002\u6b64\u5916\uff0c\u540c\u6807\u7b7e\u503c\u4e00\u6837\uff0c\u4e09\u4e2a\u7279\u5f81\u7684\u5185\u90e8\u53d6\u503c\u4e5f\u662f\u975e\u5e73\u8861\u7684\uff0c\u7279\u5f81Education_Level\u4e2dGraduate\u5360\u523031%\uff0c\u7279\u5f81Marital_Status\u4e2dDivorced\u53ea\u53607.4%\uff0c\u7279\u5f81Income_Category\u4e2dLess than $40K\u5360\u523035%\u3002\n\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u975e\u5e73\u8861\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5728\u8fdb\u884ckmeans\u805a\u7c7b\u524d\u5229\u7528smote\u7b97\u6cd5\u8fdb\u884c\u4e0a\u91c7\u6837\uff0c\u5728\u8fdb\u884clogistic\u56de\u5f52\u4e0a\u5229\u7528\u4ee3\u4ef7\u654f\u611f\u5b66\u4e60\u3002","de5cfc47":"\u5176\u4e2d\u7279\u5f81Total_Trans_Ct\u662f\u975e\u5e38\u91cd\u8981\u7684\u7279\u5f81\uff0c\u7d27\u968f\u5176\u540e\u7684\u5206\u522b\u662f\u7279\u5f81Total_Relationship_Count\uff0cTotal_Revolving_Bal\uff0cTotal_Trans_Amt\u3002\u5e76\u4e14\u524d\u9762\u7684\u7279\u5f81\u4e0e\u540e\u9762\u7684\u7279\u5f81\u76f8\u5bf9\u4e8e\u6a21\u578b\u7684\u91cd\u8981\u6027\u5dee\u522b\u6027\u975e\u5e38\u5927\u3002\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6700\u540e\u7684\u51e0\u4e2a\u7279\u5f81\u5bf9\u4e8e\u5224\u65ad\u662f\u5426\u4e3a\u6d41\u5931\u7528\u6237\u4f5c\u7528\u5f88\u5c0f\u3002","170fc496":"\u63a5\u7740\u6211\u4eec\u89c2\u5bdf\u5305\u62ec\u6807\u7b7e\u503c\u5728\u5185\u7684\u5206\u7c7b\u53d8\u91cf\u4e0e\u6570\u503c\u578b\u53d8\u91cf\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u6211\u4eec\u5229\u7528\u7bb1\u7ebf\u56fe\u8fdb\u884c\u5206\u6790\u3002","fb3ea92a":"### 2.2.2 \u4e92\u4fe1\u606f\u6cd5","f3ea5e4a":"### 3.5.7 \u8bad\u7ec3\u7ed3\u679c","6c29d68e":"### 2.2.3 \u5361\u65b9\u68c0\u9a8c","a88a4568":"## 2.2 \u7279\u5f81\u9009\u62e9\n### 2.2.1 \u76f8\u5173\u7cfb\u6570\u6cd5","74518ab9":"\u6700\u540e\u5728\u9884\u89c8\u9636\u6bb5\uff0c\u6211\u4eec\u5206\u522b\u89e3\u91ca\u4e00\u4e0b\u6bcf\u4e00\u5217\u6240\u4ee3\u8868\u7684\u610f\u4e49\u3002\n- CLIENTNUM\uff1a\u6301\u6709\u8d26\u6237\u7684\u5ba2\u6237\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n- Attrition_Flag\uff1a\u8be5\u5ba2\u6237\u662f\u5426\u6d41\u5931\u7684\u6807\u8bc6\n- Customer_Age\uff1a\u5ba2\u6237\u5e74\u9f84\n- Gender\uff1a\u6027\u522b\n- Dependent_count\uff1a\u5bb6\u5c5e\u6570\u91cf\n- Education_Level\uff1a\u53d7\u6559\u80b2\u6c34\u5e73\n- Marital_Status\uff1a\u5a5a\u59fb\u72b6\u51b5\n- Income_Category\uff1a\u8d26\u6237\u6301\u6709\u4eba\u7684\u5e74\u6536\u5165\u7c7b\u522b\n- Card_Category\uff1a\u4fe1\u7528\u5361\u7c7b\u578b\n- Months_on_book\uff1a\u4fe1\u7528\u5361\u5728\u518c\u7684\u65f6\u95f4\n- Total_Relationship_Count\uff1a\u5ba2\u6237\u6301\u6709\u7684\u4ea7\u54c1\u6570\u91cf\n- Months_Inactive_12_mon\uff1a\u8fc7\u53bb12\u4e2a\u6708\u5185\u4e0d\u6d3b\u8dc3\u7684\u6708\u6570\n- Contacts_Count_12_mon\uff1a\u8fc7\u53bb12\u4e2a\u6708\u8054\u7cfb\u8be5\u5ba2\u6237\u7684\u6b21\u6570\n- Credit_Limit\uff1a\u4fe1\u7528\u5361\u7684\u4fe1\u7528\u989d\u5ea6\n- Total_Revolving_Bal\uff1a\u4fe1\u7528\u5361\u7684\u603b\u5faa\u73af\u4f59\u989d\n- Avg_Open_To_Buy\uff1a\u8fc7\u53bb12\u4e2a\u6708\u5f00\u653e\u8d2d\u4e70\u4fe1\u7528\u989d\u5ea6\u7684\u5e73\u5747\u503c\n- Total_Amt_Chng_Q4_Q1\uff1a\u4ea4\u6613\u91d1\u989d\u53d8\u5316\uff08\u7b2c4\u5b63\u5ea6\u6bd4\u7b2c1\u5b63\u5ea6\uff09\n- Total_Trans_Amt\uff1a\u8fc7\u53bb12\u4e2a\u6708\u603b\u4ea4\u6613\u91d1\u989d\n- Total_Trans_Ct\uff1a\u8fc7\u53bb12\u4e2a\u6708\u603b\u4ea4\u6613\u4e2a\u6570\n- Total_Ct_Chng_Q4_Q1\uff1a\u4ea4\u6613\u6570\u91cf\u7684\u53d8\u5316\uff08\u7b2c4\u5b63\u5ea6\u6bd4\u7b2c1\u5b63\u5ea6\uff09\n- Avg_Utilization_Ratio\uff1a\u5e73\u5747\u5361\u4f7f\u7528\u7387","a5e75990":"### 1.2.2 \u6570\u503c\u578b\u53d8\u91cf\u53ef\u89c6\u5316\n\u6211\u4eec\u89c2\u5bdf14\u4e2a\u6570\u503c\u578b\u7279\u5f81\u7684\u5206\u5e03\u60c5\u51b5\uff0c\u5e76\u5229\u7528\u76f4\u65b9\u56fe\u8fdb\u884c\u5c55\u793a\u3002","22a3d29d":"# 3. \u6a21\u578b\u9009\u62e9\n\u6700\u7ec8\uff0c\u6211\u4eec\u5230\u4e86\u6a21\u578b\u9009\u62e9\u7684\u90e8\u5206\u3002\u5728\u8fd9\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u591a\u79cd\u5206\u7c7b\u6a21\u578b\uff0c\u5e76\u4e14\u5728\u4e00\u4e9b\u5206\u7c7b\u6a21\u578b\u5185\u90e8\u4f7f\u7528\u7f51\u683c\u641c\u7d22\u9009\u62e9\u6700\u4f73\u7684\u53c2\u6570\uff0c\u7136\u540e\u5728\u9009\u62e9\u4f7f\u7528\u6548\u679c\u6700\u597d\u7684\u90a3\u79cd\u6a21\u578b\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u6a21\u578b\u7684\u8bc4\u4ef7\u6307\u6807\u51fd\u6570\u3002\u7531\u4e8e\u8be5\u95ee\u9898\u7684\u4efb\u52a1\u8981\u6c42\u5c3d\u53ef\u80fd\u5730\u8bc6\u522b\u51fa\u6d41\u5931\u7528\u6237\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u8bc4\u4ef7\u6307\u6807\u5b9a\u4e49\u4e3a\u6d41\u5931\u7528\u6237\u7684\u53ec\u56de\u7387\u3002\n\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u4f1a\u518d\u5b9a\u4e49\u4e24\u4e2a\u7ed3\u679c\u663e\u793a\u51fd\u6570\u3002","a07118cb":"## 3.5 \u591a\u5c42\u611f\u77e5\u673a\n\u5728\u8fd9\u4e00\u90e8\u5206\u7684\u6700\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u7edc\u6a21\u578b\u591a\u91cd\u611f\u77e5\u673a\u6765\u5efa\u7acb\u5206\u7c7b\u6a21\u578b\u3002\u8fd9\u91cc\u6211\u4eec\u53ea\u642d\u5efa\u53ea\u542b\u6709\u4e00\u4e2a\u9690\u85cf\u5c42\u7684\u611f\u77e5\u673a\u3002\n","a883ccf5":"## 1.3 \u6570\u636e\u5207\u5206\n\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u5bf9\u6570\u636e\u60c5\u51b5\u6709\u4e86\u4e00\u4e2a\u6574\u4f53\u7684\u4e86\u89e3\uff0c\u5728\u7ee7\u7eed\u540e\u7eed\u7684\u6570\u636e\u6e05\u6d17\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u5207\u5206\u3002\u5b8c\u6574\u7684\u6570\u636e\u96c6\u7ec4\u6210\u5e94\u8be5\u6709\u4e09\u90e8\u5206\uff0c\u8bad\u7ec3\u96c6\/\u9a8c\u8bc1\u96c6\/\u6d4b\u8bd5\u96c6\uff0c\u5176\u4e2d\u6d4b\u8bd5\u96c6\u76f8\u5bf9\u800c\u8a00\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff0c\u800c\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7528\u4e8e\u8bad\u7ec3\u591a\u4e2a\u6a21\u578b\u548c\u9009\u62e9\u6700\u4f18\u7684\u6a21\u578b\u3002\u6211\u4eec\u5148\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5148\u628a\u6d4b\u8bd5\u96c6\u72ec\u7acb\u51fa\u6765\uff0c\u5728\u7ecf\u8fc7\u4e86\u6570\u636e\u6e05\u6d17\u540e\uff0c\u5982\u679c\u4e0d\u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u7684\u8bdd\uff0c\u4f1a\u518d\u5207\u5206\u51fa\u8bad\u7ec3\u96c6\u4e0e\u9a8c\u8bc1\u96c6\u3002","108fb1aa":"### 3.5.5 \u83b7\u53d6K\u6298\u4ea4\u53c9\u9a8c\u8bc1\u7684\u7b2ci\u6298\u6570\u636e","ba37181d":"\u5728\u5206\u7c7b\u53d8\u91cf\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u51e0\u4e2a\u540e\u7eed\u5206\u6790\u9700\u8981\u5904\u7406\u6216\u8005\u6ce8\u610f\u7684\u5730\u65b9\u3002\u9996\u5148\u5b9e\u9645\u6d41\u5931\u7684\u5ba2\u6237\u53ea\u5360\u603b\u5ba2\u6237\u768416%\u5de6\u53f3\uff0c\u6240\u4ee5\u8fd9\u662f\u4e00\u4e2a\u4e0d\u5e73\u8861\u7684\u6570\u636e\u96c6\uff0c\u540e\u7eed\u6211\u4eec\u6211\u4eec\u9700\u8981\u5229\u7528\u6570\u636e\u589e\u5f3a\u6216\u8005\u4ee3\u4ef7\u654f\u611f\u5b66\u4e60\u7b49\u975e\u5e73\u8861\u6570\u636e\u7b49\u5904\u7406\u65b9\u6cd5\u3002\u5176\u6b21\uff0c\u5206\u7c7b\u53d8\u91cf\u4e2d\u7684\u201cUnknown\u201d\u53d6\u503c\u8f83\u591a\uff0c\u7279\u5f81Education_Level\u4e2d\u536015%\uff0c\u7279\u5f81Married_Status\u4e2d\u53607.4%\uff0c\u7279\u5f81Income_Category\u4e2d\u536011%\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u201cUnknown\u201d\u770b\u4f5c\u7f3a\u5931\u503c\uff0c\u5e76\u5728\u540e\u7eed\u7684\u6570\u636e\u6e05\u6d17\u9636\u6bb5\u505a\u76f8\u5e94\u7684\u7f3a\u5931\u503c\u5904\u7406\u3002\u6700\u540e\u7279\u5f81Card_Category\u4e2d\u201cBlue\u201d\u7684\u53d6\u503c\u5360\u5230\u4e8693%\uff0c\u6240\u4ee5\u8fd9\u4e5f\u662f\u4e00\u4e2a\u975e\u5e73\u8861\u7684\u7279\u5f81\uff0c\u6211\u4eec\u4e5f\u4f1a\u5728\u540e\u7eed\u7684\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u5904\u7406\u3002","ef14d322":"\u63a5\u7740\u6211\u4eec\u4f7f\u7528\u7edf\u8ba1\u5b66\u4e60\u4e2d\u975e\u5e38\u7ecf\u5178\u7684\u5206\u7c7b\u7b97\u6cd5SVM\u53bb\u5efa\u7acb\u6a21\u578b\u3002\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7f51\u683c\u641c\u7d22\u641c\u7d22\u6765\u83b7\u53d6\u6700\u4f73\u7684\u53c2\u6570\u7ec4\u5408\u3002","ebaca893":"\u6211\u4eec\u63a5\u7740\u89c2\u5bdf\u6570\u636e\u7684\u5c3a\u5bf8\u4ee5\u53ca\u6bcf\u4e2a\u7279\u5f81\u7684\u5c5e\u6027,\u5e76\u7edf\u8ba1\u4e0d\u540c\u5c5e\u6027\u7684\u7279\u5f81\u7684\u4e2a\u6570\u3002","0fe34d9e":"## 3.4 XGBOOst","d613b8be":"## 5.2 \u6d4b\u8bd5\u7ed3\u679c","a487a544":"### 3.5.2 \u5b9a\u4e49\u6a21\u578b","ee2f4dd7":" \u5206\u7ec4\u7684\u7bb1\u7ebf\u56fe\u663e\u793a\u51fa\u5728\u4e0d\u540c\u7684\u6807\u7b7e\u503c\u4e0b\uff0c\u7279\u5f81Total_Revolving_Bal\uff0cTotal_Trans_Amt\uff0cTotal_Trans_Ct\u4e0eAvg_Utilization_Ratio\u7684\u5206\u5e03\u5dee\u5f02\u8f83\u5927\uff0c\u53ef\u4ee5\u521d\u6b65\u8ba4\u4e3a\u8fd9\u4e9b\u662f\u5bf9\u6807\u7b7e\u5f71\u54cd\u8f83\u5927\u6216\u8005\u8bf4\u6709\u5f71\u54cd\u7684\u7279\u5f81\u3002\u6b64\u5916\uff0c\u7bb1\u7ebf\u56fe\u4e5f\u8868\u660eCredit_Limit\uff0cAvg_Open_To_Buy\uff0cTotal_Amt_Chng_Q4_Q1\uff0cTotal_Trans_Amt\uff0cTotal_Ct_Chng_Q4_Q1\uff0cAvg_Utilization_Ration\u5b58\u5728\u975e\u5e38\u591a\u7684\u5f02\u5e38\u503c\uff0c\u5728\u540e\u7eed\u7684\u6570\u636e\u6e05\u6d17\u4e2d\u9700\u8981\u505a\u5f02\u5e38\u503c\u7684\u5904\u7406\u3002","f8d2f501":"## 1.4 \u7279\u5f81\u7f16\u7801\n\u6211\u4eec\u9700\u8981\u5bf9\u5206\u7c7b\u578b\u7279\u5f81\u8fdb\u884c\u7f16\u7801\uff0c\u4ee5\u4fbf\u4e8e\u540e\u7eed\u7684\u5904\u7406\u3002\u5bf9\u4e8e\u6807\u7b7e\u503c\uff0c\u6211\u4eec\u4f7f\u7528\u6807\u7b7e\u7f16\u7801\uff1b\u5bf9\u4e8e\u65e0\u5e8f\u7684\u5206\u7c7b\u7279\u5f81\uff0c\u6211\u4eec\u4f7f\u7528\u72ec\u70ed\u7f16\u7801\uff1b\u5bf9\u4e8e\u6709\u5e8f\u5206\u7c7b\u7279\u5f81\uff0c\u6211\u4eec\u4f7f\u7528\u6709\u5e8f\u7f16\u7801\u3002\u8fd9\u91cc\u6211\u4eec\u8ba4\u4e3a\u6027\u522b\/\u5a5a\u59fb\u72b6\u51b5\u4e3a\u65e0\u5e8f\u7279\u5f81\uff0c\u800c\u53d7\u6559\u80b2\u6c34\u5e73\/\u6536\u5165\u7c7b\u578b\/\u4fe1\u7528\u5361\u7c7b\u578b\u4e3a\u6709\u5e8f\u7279\u5f81\u3002\u4f46\u662f\u6211\u4eec\u4e3a\u4e86\u65b9\u4fbf\u540e\u7eed\u7f3a\u5931\u503c\u586b\u5145\uff0c\u6211\u4eec\u5148\u5bf9\u5a5a\u59fb\u72b6\u51b5\u505a\u6709\u5e8f\u7f16\u7801\uff0c\u5728\u586b\u5145\u5b8c\u7f3a\u5931\u503c\u540e\u518d\u505a\u72ec\u70ed\u7f16\u7801\u3002","2fb30bb8":"\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u968f\u673a\u68ee\u6797\u548cXGBoost\u7684\u8868\u73b0\u662f\u7c7b\u4f3c\u7684\uff0c\u5728\u8bad\u7ec3\u96c6\u4e0a\u7684\u8868\u73b0\u975e\u5e38\u4f18\u79c0\u3002\u5728\u9a8c\u8bc1\u96c6\u4e0aXGBoost\u540c\u6837\u5404\u9879\u6307\u6807\u4e5f\u6bd4\u8f83\u9ad8\uff0c\u53ea\u662f\u76f8\u5bf9\u4e8e\u968f\u673a\u68ee\u6797\u6548\u679c\u51c6\u786e\u7387\u4f4e\u4e00\u70b9\u70b9\u3002\u4f46\u540c\u6837\u662f\u975e\u5e38\u4f18\u79c0\u7684\u7b97\u6cd5\u3002","5c40de78":"\u6211\u4eec\u6309\u7167\u7f51\u683c\u641c\u7d22\u5f97\u5230\u7684\u6700\u4f18\u53c2\u6570\u7ec4\u5408\u91cd\u65b0\u8bad\u7ec3\u4e00\u4e2aSVM\u5206\u7c7b\u5668\uff0c\u5e76\u540c\u6837\u5730\u89c2\u5bdf\u5728\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u4e0a\u7684\u8868\u73b0\u3002","f1f64b6e":"### 3.5.6 \u5b9a\u4e49K\u6298\u4ea4\u53c9\u9a8c\u8bc1\u51fd\u6570","ad0dd0b0":"### 2.2.4 \u964d\u7ef4\u53ef\u89c6\u5316","5254e432":"### 3.5.1 \u6570\u636e\u8f6c\u6362","891c970c":"\u6211\u4eec\u5229\u7528\u67f1\u72b6\u56fe\u89c2\u5bdf\u5206\u7c7b\u578b\u53d8\u91cf\u7684\u5206\u5e03\u60c5\u51b5","8fcdaf16":"\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u5229\u7528XGBoost\u5185\u7f6e\u7684\u65b9\u6cd5\u89c2\u5bdf\u5404\u4e2a\u7279\u5f81\u7684\u91cd\u8981\u7a0b\u5ea6\u3002","0867620b":"### 3.5.3 \u83b7\u53d6\u51c6\u786e\u7387\u6307\u6807","379d007e":"\u8be5XGBoost\u6a21\u578b\u5728\u6d4b\u8bd5\u4e0a\u7684\u8868\u73b0\u662f\u975e\u5e38\u4f18\u79c0\u7684\uff0c\u8d1f\u6837\u672c\u7684\u7cbe\u786e\u7387\u8fbe\u523098.7%\uff0c\u53ec\u56de\u7387\u8fbe\u523093.5%\uff0c\u5f53\u7136\u8d1f\u6837\u672c\u7684\u6307\u6807\u5e76\u4e0d\u662f\u6211\u4eec\u5173\u6ce8\u7684\u91cd\u70b9\u3002\u6b63\u6837\u672c\u7684\u53ec\u56de\u7387\u8fbe\u523094%\uff0c\u662f\u4e00\u4e2a\u8f83\u9ad8\u7684\u53ec\u56de\u7387\u3002\u867d\u7136\u6b63\u6837\u672c\u7684\u7cbe\u786e\u7387\u53ea\u4e3a74%\uff0c\u4f46\u662f\u8be5\u95ee\u9898\u4e3b\u8981\u5173\u6ce8\u7684\u5c31\u662f\u6b63\u6837\u672c\u7684\u53ec\u56de\u7387\uff0c\u800c\u4e14AUC\u6307\u6807\u4e3a0.98\uff0c\u6240\u4ee5\u8be5\u6a21\u578b\u80fd\u591f\u6210\u529f\u6ee1\u8db3\u8be5\u95ee\u9898\u7684\u5206\u7c7b\u4efb\u52a1\u3002","f251111f":"# 1. \u6570\u636e\u9884\u5904\u7406\n## 1.1 \u6570\u636e\u9884\u89c8\n\u9996\u5148\u6211\u4eec\u8f7d\u5165\u6570\u636e\u3002\u7531\u4e8e\u6570\u636e\u4fe1\u606f\u663e\u793a\u6700\u540e\u4e24\u5217\u662f\u5229\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5f97\u5230\u7684\u4e2d\u95f4\u91cf\u4fe1\u606f\uff0c\u6240\u4ee5\u6211\u4eec\u5220\u9664\u6700\u540e\u4e24\u5217\uff0c\u5e76\u8fdb\u884c\u9884\u89c8\u3002","afd11e39":"\u6211\u4eec\u89c2\u5bdf\u5728\u5f53\u524d\u6700\u4f18\u53c2\u6570\u7ec4\u5408\u4e0b\u8bad\u7ec3\u7684\u6a21\u578b\u7684\u8868\u73b0\u3002","f70569bd":"## 3.1 Logistic\u56de\u5f52\n\u9996\u5148\uff0c\u6211\u4eec\u8fd8\u662f\u9009\u7528logistic\u56de\u5f52\u53bb\u89e3\u51b3\u8fd9\u4e2a\u4e8c\u5206\u7c7b\u7684\u95ee\u9898\u3002\u5728\u53c2\u6570\u7684\u8bbe\u7f6e\u4e0a\uff0c\u6211\u4eec\u4f7f\u7528\u5f39\u6027\u6cd5\u8fdb\u884c\u6b63\u5219\u5316\uff0c\u5c06L1\u6b63\u5219\u7684\u6bd4\u4f8b\u8bbe\u7f6e\u4e3a0.4\uff0c \u5c06\u6b63\u5219\u5316\u5f3a\u5ea6\u7cfb\u6570C\u8bbe\u7f6e\u4e3a0.1\uff0c\u540c\u65f6\u4f7f\u7528saga\u7b97\u6cd5\u8fdb\u884c\u4f18\u5316\u3002\u5e76\u4e14\u6211\u4eec\u89c2\u5bdf\u8be5\u6a21\u578b\u5206\u522b\u5728\u8bad\u7ec3\u96c6\u4e0e\u9a8c\u8bc1\u96c6\u4e0a\u7684\u8868\u73b0\u3002\n","7bf814dc":"logistic\u56de\u5f52\u4f5c\u4e3a\u5165\u95e8\u7684\u673a\u5668\u5b66\u4e60\u5206\u7c7b\u6a21\u578b\uff0c\u53ef\u4ee5\u770b\u5230\u603b\u4f53\u7684\u8868\u73b0\u8fd8\u4e0d\u9519\u3002\u5728\u8bad\u7ec3\u96c6\u4e0a\u8d1f\u6837\u672c(\u7559\u5b58\u7528\u6237)\u7684\u53ec\u56de\u7387\u4e3a92%\uff0c \u6b63\u6837\u672c(\u6d41\u5931\u7528\u6237)\u7684\u53ec\u56de\u7387\u4e3a89%\u3002\u7c7b\u4f3c\u7684\uff0c\u6b63\u8d1f\u6837\u672c\u7684\u7cbe\u786e\u7387\u4e5f\u57fa\u672c\u5904\u4e8e\u8fd9\u4e2a\u6c34\u5e73\u3002\u5728\u9a8c\u8bc1\u96c6\u4e0a\u65e0\u8bba\u662f\u7cbe\u786e\u7387\u8fd8\u662f\u53ec\u56de\u7387\u90fd\u57fa\u672c\u572890%\u5de6\u53f3\u3002\u672c\u95ee\u9898\u7684\u4efb\u52a1\u662f\u80fd\u591f\u5728\u5c3d\u53ef\u80fd\u51c6\u786e\u5730\u8bc6\u522b\u51fa\u6d41\u5931\u7528\u6237\uff0c\u5373\u6b63\u6837\u672c\u7684\u53ec\u56de\u7387\u5c3d\u53ef\u80fd\u5730\u9ad8\u3002\u76ee\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06logistic\u56de\u5f52\u6a21\u578b\u7684\u8868\u73b0\u4f5c\u4e3a\u4e00\u4e2a\u57fa\u51c6\u503c\u3002","9ae0dc6f":"### 3.5.4 \u5b9a\u4e49\u635f\u5931\u51fd\u6570","68359650":"XGBoost\u662fGBDT\u5728\u5de5\u4e1a\u5b9e\u8df5\u4e0a\u7684\u4f18\u5316\u7248\u672c\uff0c\u5728\u8bb8\u591a\u5730\u65b9\u8fdb\u884c\u6539\u8fdb\uff0c\u800c\u4e14\u57fa\u5206\u7c7b\u5668\u4e5f\u53ef\u4ee5\u4e0d\u4e00\u5b9a\u662f\u6811\u6a21\u578b\uff0c\u53ef\u4ee5\u8bf4\u662f\u96c6\u6210\u4e32\u884c\u65b9\u6cd5\u7684\u96c6\u5927\u6210\u8005\u3002\u5e76\u4e14XGBoost\u8fd8\u7ecf\u5e38\u5728\u5404\u79cd\u7b97\u6cd5\u6bd4\u8d5b\u4e2d\u53d6\u5f97\u975e\u5e38\u597d\u7684\u6548\u679c\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u4e5f\u91c7\u7528XGBoost\u7b97\u6cd5\u6765\u6784\u5efa\u6a21\u578b\uff0c\u89c2\u5bdf\u5176\u5728\u5f53\u524d\u6570\u636e\u96c6\u4e0a\u7684\u8868\u73b0\u3002","7e9ec353":"### 3.5.4 \u5b9a\u4e49\u8bad\u7ec3\u51fd\u6570","93c8465a":"Gender: Credit_Lmit, Avg_Open_To_Buy, Avg_Utilization_Ration<br>\nEducation_Level: None<br>\nMarital_Status: None<br>\nIncome_Category: Credit_Limit, Avg_Open_To_Buy, Avg_Utilization_Ratio<br>\nCard_Category: Credit_Limit, Avg_Open_To_Buy, Total_Trans_Amt, Total_Trans_Ct, Avg_Utilization_Ratio<br>\n","b9060d5d":"# 4. \u6a21\u578b\u89e3\u91ca","07e0b502":"# 5. \u6a21\u578b\u8bc4\u4f30\n\u6700\u7ec8\u6211\u4eec\u9009\u62e9XGBoost\u6a21\u578b\u4f5c\u4e3a\u6211\u4eec\u6700\u7ec8\u9009\u62e9\u7684\u5206\u7c7b\u6a21\u578b\u3002\u73b0\u5728\u6211\u4eec\u6765\u89c2\u5bdf\u8be5\u6a21\u578b\u5728\u72ec\u7acb\u7684\u6d4b\u8bd5\u96c6\u4e0a\u7684\u6548\u679c\u3002\u9996\u5148\u6211\u4eec\u8fd8\u662f\u9700\u8981\u5bf9\u6d4b\u8bd5\u96c6\u8fdb\u884c\u524d\u671f\u76f8\u540c\u7684\u9884\u5904\u7406\u64cd\u4f5c\u3002","84d6c328":"\u4ece\u6570\u503c\u578b\u53d8\u91cf\u7684\u76f4\u65b9\u56fe\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u6570\u636e\u7279\u5f81\u3002\u9996\u5148\uff0c\u5ba2\u6237\u5e74\u9f84\u603b\u4f53\u662f\u7b26\u5408\u6b63\u6001\u5206\u5e03\u7684\uff0c\u8fd9\u662f\u6bd4\u8f83\u5408\u7406\u7684\u3002\u5176\u4ed6\u7684\u7279\u5f81\u5982Total_Amt_Chng_Q4_Q1\u548cTotal_Ct_Chng_Q4_Q1\u4e5f\u662f\u670d\u4ece\u6b63\u6001\u5206\u5e03\u7684\u3002\u5176\u6b21\uff0c\u7279\u5f81Months_on_book\u4e2d\u6709\u4e00\u4e2a\u533a\u95f4\u5305\u542b\u4e86\u975e\u5e38\u591a\u7684\u6837\u672c\uff0c\u5373\u533a\u95f4[35, 36]\uff0c\u5360\u5230\u603b\u6837\u672c\u6570\u768427.5%\u3002\u6700\u540e\uff0c\u7279\u5f81Credit_Limit,Avg_Open_To_Buy\u548cAvg_Utilization_Ration\u8fd1\u4f3c\u670d\u4ece\u4e8e\u6307\u6570\u5206\u5e03\uff0c\u5982\u679c\u540e\u7eed\u540e\u7eed\u8981\u5047\u8bbe\u7279\u5f81\u5206\u5e03\u7684\u5206\u6790\u65b9\u6cd5\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u7279\u5f81\u8f6c\u6362\u3002","e71a98db":"## 1.2 \u6570\u636e\u53ef\u89c6\u5316\n### 1.2.1 \u5206\u7c7b\u578b\u53d8\u91cf\u53ef\u89c6\u5316\n\u9996\u5148\u6211\u4eec\u89c2\u5bdf\u6240\u6709\u5b57\u7b26\u578b\u6216\u8005\u8bf4\u5206\u7c7b\u578b\u7279\u5f81\u7684\u5206\u5e03\u60c5\u51b5\uff0c\u505a\u4e00\u4e2a\u603b\u89c8\u3002","8ac754af":"# 6. \u7ed3\u8bba","cc8fd9c5":"\u901a\u8fc7\u586b\u5145\u7f3a\u5931\u503c\u540e\u7684\u67f1\u72b6\u56fe\uff0c\u6211\u4eec\u53d1\u73b0\uff0clogistic\u56de\u5f52\u76f8\u6bd4\u4e8ekmeans\u805a\u7c7b\u5728\u975e\u5e73\u8861\u6570\u636e\u4e0a\u7684\u8868\u73b0\u66f4\u597d\uff0ckmeans\u805a\u7c7b\u7684\u65b9\u6cd5\u8fd8\u662f\u4f1a\u5c06\u5927\u90e8\u5206\u7684\u7f3a\u5931\u503c\u586b\u5145\u4e3a\u7279\u5f81\u7684\u4f17\u6570\u3002\u6240\u4ee5\u6211\u4eec\u6700\u7ec8\u91c7\u7528\u5229\u7528logistic\u56de\u5f52\u586b\u5145\u800c\u5f97\u5230\u7684\u6570\u636e\u96c6\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u518d\u5bf9\u7279\u5f81Marital_Status\u505a\u72ec\u70ed\u7f16\u7801\u3002","4c780297":"### 1.2.3 \u76f8\u5173\u53d8\u91cf\u53ef\u89c6\u5316\n\u6700\u540e\uff0c\u6211\u4eec\u6253\u7b97\u53ef\u89c6\u5316\u7279\u5f81\u4e0e\u6807\u7b7e\u7684\u76f8\u5173\u5173\u7cfb\uff0c\u5e76\u4e14\u6316\u6398\u4e00\u4e9b\u7279\u5f81\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u7684\u76f8\u5173\u5173\u7cfb\u3002\n\u9996\u5148\u6211\u4eec\u89c2\u5bdf\u6240\u6709\u6570\u503c\u578b\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u5173\u7cfb","727b98db":"\u672c\u62a5\u544a\u4e3b\u8981\u89e3\u51b3\u4e00\u4e2a\u4fe1\u7528\u5361\u5ba2\u6237\u6d41\u5931\u7684\u95ee\u9898\u3002\u8be5\u6570\u636e\u96c6\u4e3b\u8981\u7684\u95ee\u9898\u4e3a\u542b\u6709\u5f88\u591a\u7f3a\u5931\u503c\u5e76\u4e14\u662f\u975e\u5e73\u8861\u7684\u6570\u636e\u3002\u9488\u5bf9\u7f3a\u5931\u503c\u7684\u95ee\u9898\uff0c\u6211\u4eec\u4f7f\u7528logistic\u56de\u5f52+\u4ee3\u4ef7\u654f\u611f\u5b66\u4e60\u5bf9\u7f3a\u5931\u503c\u8fdb\u884c\u586b\u5145\u3002\u800c\u9488\u5bf9\u975e\u5e73\u8861\uff0c\u6211\u4eec\u5229\u7528smote\u7b97\u6cd5\u8fdb\u884c\u4e0a\u91c7\u6837\uff0c\u89e3\u51b3\u6b63\u6837\u672c\u8fc7\u5c11\u7684\u95ee\u9898\u3002\u5728\u6a21\u578b\u7684\u9009\u62e9\u65b9\u9762\uff0c\u6211\u4eec\u4f7f\u7528logistic\u56de\u5f52\/SVM\/XGBoost\u4e09\u79cd\u65b9\u6cd5\u8bad\u7ec3\u6a21\u578b\uff0c\u5e76\u4e14\u89c2\u5bdf\u5728\u9a8c\u8bc1\u96c6\u4e0a\u7684\u6548\u679c\u3002\u6700\u7ec8\u6211\u4eec\u9009\u62e9XGBoost\u7b97\u6cd5\uff0c\u5e76\u4e14\u5229\u7528\u7f51\u683c\u641c\u7d22\u5f97\u5230\u9002\u5e94\u5f53\u524d\u5f53\u524d\u6570\u636e\u96c6\u7684\u6700\u4f73\u53c2\u6570\u7ec4\u5408\u3002\u5728\u672c\u62a5\u544a\u6700\u540e\u7684\u6a21\u578b\u8bc4\u4f30\u65b9\u9762\uff0c\u8be5XGBoost\u6a21\u578b\u5728\u6b63\u6837\u672c\u7684\u53ec\u56de\u7387\u4e0a\u8fbe\u5230\u4e8694%\uff0cAUC\u503c\u8fbe\u5230\u4e860.98\uff0c\u603b\u4f53\u6ee1\u8db3\u4e86\u95ee\u9898\u7684\u9700\u6c42\u3002\n"}}