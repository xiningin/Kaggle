{"cell_type":{"241bc84c":"code","9566bde9":"code","02b20ae1":"code","17514265":"code","400853c9":"code","5c6f3ba6":"code","1799cd87":"code","f2e43f3d":"code","7f578e18":"code","fc0d3b71":"code","a56727a2":"code","df62bc88":"code","fd311f53":"code","6a4635d7":"code","43863ac4":"code","e71975c1":"code","5fb8656b":"code","c8573e00":"code","2f357a1b":"code","f488f90c":"code","283c939d":"code","b495df03":"code","408b4616":"code","ea6df7f6":"code","9ae38afa":"code","09564184":"code","33c27278":"code","45f15640":"markdown","3f585b35":"markdown","012547bd":"markdown","768d0f13":"markdown","adbf50bc":"markdown"},"source":{"241bc84c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9566bde9":"import torch\nfrom sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom catboost import CatBoostClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import LinearSVC \nfrom sklearn.model_selection import train_test_split","02b20ae1":"df=pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-nov-2021\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-nov-2021\/test.csv\")","17514265":"y_train=df['target'].astype('str')\nX_train=df.drop('target',axis=1)\nX_train.describe()","400853c9":"X_train.isna().sum()","5c6f3ba6":"X_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(\n    X_train, \n    y_train.values, \n    test_size=0.2, \n    shuffle=True)","1799cd87":"params={'log__C':[0.01,0.1,1,10,100,1000],\n       'log__solver':['lbfgs', 'liblinear']}\nlog_clf = Pipeline([\n    ('scaler', StandardScaler()),\n    ('log', LogisticRegression(dual=False,max_iter=2000)),\n])\ngr_srch=GridSearchCV(log_clf,params,cv=3,scoring='roc_auc')\ngr_srch.fit(X_train,y_train)","f2e43f3d":"gr_srch.best_params_","7f578e18":"log_clf = Pipeline([\n    ('scaler', StandardScaler()),\n    ('log', LogisticRegression(dual=False,max_iter=2000,C=10,solver='liblinear')),\n])","fc0d3b71":"log_clf.fit(X_train_1,y_train_1)\nroc_auc_score(y_test_1,log_clf.predict(X_test_1))","a56727a2":"submit = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')\nlog_clf.fit(X_train,y_train)\nsubmit['target']=log_clf.predict(test)\nsubmit.to_csv('subm_log_clf_tunned.csv',index=False)","df62bc88":"svm_clf = Pipeline([\n    ('scaler', StandardScaler()),\n    ('svm', LinearSVC(dual=False,tol=1e-4,max_iter=2000,C=100)),\n])","fd311f53":"svm_clf.fit(X_train_1,y_train_1)\nroc_auc_score(y_test_1,svm_clf.predict(X_test_1))","6a4635d7":"svm_clf.fit(X_train,y_train)\nsubmit['target']=svm_clf.predict(test)\nsubmit.to_csv('subm_linear_svc_c100.csv',index=False)","43863ac4":"clf_cat_pca=Pipeline([('scaler', StandardScaler()), \n          ('pca', PCA(80)),\n          ('catboost', CatBoostClassifier(learning_rate=0.1,l2_leaf_reg=1,iterations=2000,depth=3,border_count=100,verbose=False))])","e71975c1":"clf_cat_pca.fit(X_train_1,y_train_1)\nroc_auc_score(y_test_1,clf_cat_pca.predict(X_test_1))","5fb8656b":"clf_cat_pca.fit(X_train,y_train)\nsubmit['target']=clf_cat_pca.predict(test)\nsubmit.to_csv('subm_cat_pca.csv',index=False)","c8573e00":"cat=CatBoostClassifier(depth=3,l2_leaf_reg=1,n_estimators= 2000,border_count=256,bagging_temperature=0.75,\n                      random_strength=0.8, max_ctr_complexity=3,verbose=False)","2f357a1b":"cat.fit(X_train_1,y_train_1)\nroc_auc_score(y_test_1,cat.predict(X_test_1))","f488f90c":"cat.fit(X_train,y_train)\nsubmit['target']=cat.predict(test)\nsubmit.to_csv('subm_cat_tun.csv',index=False)","283c939d":"ss=StandardScaler()\nX_train=ss.fit_transform(X_train)\nX_test=ss.transform(test)\nX_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(\n    X_train, \n    y_train.values, \n    test_size=0.2, \n    shuffle=True)","b495df03":"X_train_1 = torch.FloatTensor(X_train_1)\nX_test_1 = torch.FloatTensor(X_test_1)\ny_train_1 = torch.LongTensor(y_train_1.astype(int))\ny_test_1 = torch.LongTensor(y_test_1.astype(int))","408b4616":"class MyNet(torch.nn.Module):\n    def __init__(self):\n        super(MyNet, self).__init__()\n        self.fc1 = torch.nn.Linear(X_train_1.shape[1], 256)\n        self.activ1 = torch.nn.Tanh()\n        self.drop1 = torch.nn.Dropout(p=0.7)\n        self.fc2 = torch.nn.Linear(256, 64)\n        self.activ2 = torch.nn.Tanh()\n        self.drop2 = torch.nn.Dropout(p=0.5)\n        self.fc3 = torch.nn.Linear(64, 8)\n        self.activ3 = torch.nn.ReLU()\n        self.drop3 = torch.nn.Dropout(p=0.3)\n#         self.fc4 = torch.nn.Linear(32, 8)\n#         self.activ4 = torch.nn.ReLU()\n#         self.drop4 = torch.nn.Dropout(p=0.4)\n        self.fc5 = torch.nn.Linear(8, 2)\n        self.sm = torch.nn.Softmax()\n        \n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.activ1(x)\n        x = self.drop1(x)\n        x = self.fc2(x)\n        x = self.activ2(x)\n        x = self.drop2(x)\n        x = self.fc3(x)\n        x = self.activ3(x)\n#         x = self.drop3(x)\n#         x = self.fc4(x)\n#         x = self.activ4(x)\n#         x = self.drop4(x)\n        x = self.fc5(x)\n        return x\n\n    def inference(self, x):\n        x = self.forward(x)\n        x = self.sm(x)\n        return x\n\nmy_net = MyNet()\nloss = torch.nn.CrossEntropyLoss()\n\noptimizer = torch.optim.Adam(my_net.parameters(), \n                             lr=1.0e-4)","ea6df7f6":"batch_size = 2048\n\nfor epoch in range(100):\n    order = np.random.permutation(len(X_train_1))\n    for start_index in range(0, len(X_train_1), batch_size):\n        optimizer.zero_grad()\n        \n        batch_indexes = order[start_index:start_index+batch_size]\n        \n        x_batch = X_train_1[batch_indexes]\n        y_batch = y_train_1[batch_indexes]\n        \n        preds = my_net.forward(x_batch)\n        loss_value = loss(preds,y_batch)\n        loss_value.backward()\n        \n        optimizer.step()\n#         print(preds)\n    test_preds = my_net.forward(X_test_1)\n    test_preds = test_preds.argmax(dim=1)\n#     print((test_preds == y_test_1).float().mean())\n    print(roc_auc_score(y_test_1,test_preds))","9ae38afa":"batch_size = 2048\nX_train = torch.FloatTensor(X_train)\nX_test= torch.FloatTensor(X_test)\ny_train = torch.LongTensor(y_train.astype(int))\ncnt=1\nfor epoch in range(1000):\n    order = np.random.permutation(len(X_train))\n    for start_index in range(0, len(X_train), batch_size):\n        optimizer.zero_grad()\n        \n        batch_indexes = order[start_index:start_index+batch_size]\n        \n        x_batch = X_train[batch_indexes]\n        y_batch = y_train[batch_indexes]\n        \n        preds = my_net.forward(x_batch)\n        loss_value = loss(preds,y_batch)\n        loss_value.backward()\n        \n        optimizer.step()\n#         print(preds)\n    train_preds = my_net.forward(X_train)\n    train_preds = train_preds.argmax(dim=1)\n    print(cnt)\n    cnt+=1\n#     print((test_preds == y_test_1).float().mean())\n    print(roc_auc_score(y_train,train_preds))","09564184":"\nsubmit['target']=my_net.forward(X_test).argmax(dim=1)\nsubmit","33c27278":"submit.to_csv('nn_3_layers.csv',index=False)","45f15640":"# **Linear SVC**","3f585b35":"# **LogisticRegression**","012547bd":"# **NN**","768d0f13":"# **Catboost with PCA**","adbf50bc":"# **Catboost without PCA**"}}