{"cell_type":{"9162cc84":"code","3990b8d1":"code","66051544":"code","42da050c":"code","2a1767e3":"code","1ba2dcbc":"code","ca528746":"code","6114f9bb":"code","363cd87c":"code","349897a7":"code","6599184e":"code","76de796b":"code","5157695b":"code","e1f28d92":"code","32042e17":"code","6c40ce09":"code","b4acdc48":"code","0407eefd":"code","a2bf1287":"code","02c98a6e":"code","1d5e3f73":"code","ae5fdbea":"code","cdf07213":"code","b2599df6":"code","4094ace0":"code","be7cf10d":"code","a98e12c7":"code","977eb8ec":"code","8bb43d3f":"code","f9395ec4":"code","90efb4d5":"code","fbac79fa":"code","664a36c4":"code","40f47f14":"code","e9737f7b":"code","e1c6e006":"markdown","61377e59":"markdown","a67fdffb":"markdown","86cf2a75":"markdown","ca48f3eb":"markdown","45c24c60":"markdown","58ea8b4a":"markdown"},"source":{"9162cc84":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\n\nfrom mlxtend.evaluate import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import VotingClassifier\n\nnp.random.seed = 5","3990b8d1":"data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndata.head()","66051544":"data.info()","42da050c":"train_dataset = data\n\ntrain_dataset.drop(\"PassengerId\", axis=1, inplace=True)\ntrain_dataset.drop(\"Cabin\", axis=1, inplace=True)\ntrain_dataset.drop(\"Name\", axis=1, inplace=True)\ntrain_dataset.drop(\"Ticket\", axis=1, inplace=True)\n\ntrain_dataset.head()","2a1767e3":"train_dataset.replace(to_replace = np.nan, value = round(train_dataset.mean(), 0), inplace=True)","1ba2dcbc":"train_dataset.fillna(method ='pad', inplace=True)","ca528746":"train_dataset.info()","6114f9bb":"train_dataset.head()","363cd87c":"x_train = train_dataset.iloc[:, 1:7]\ny_train = train_dataset.iloc[:, 0]","349897a7":"x_train.head()","6599184e":"y_train.head()","76de796b":"x_train.head()","5157695b":"test = pd.read_csv('..\/input\/titanic\/test.csv')\n\nx_test = test\n\nx_test.drop(\"PassengerId\", axis=1, inplace=True)\nx_test.drop(\"Cabin\", axis=1, inplace=True)\nx_test.drop(\"Name\", axis=1, inplace=True)\nx_test.drop(\"Ticket\", axis=1, inplace=True)\n\n\nx_test.replace(to_replace = np.nan, value = round(train_dataset.mean(), 0), inplace=True)\nx_test.fillna(method ='pad', inplace=True)\n\nle = LabelEncoder()\n\nle.fit(x_test['Sex'])\nx_test[\"Sex\"] = le.transform(x_test['Sex'])","e1f28d92":"le = LabelEncoder()\nle.fit(x_test['Embarked'])\nx_test[\"Embarked\"] = le.transform(x_test['Embarked'])","32042e17":"sns.heatmap(train_dataset[[\"Survived\",\"SibSp\",\"Parch\",\"Age\",\"Fare\"]].corr(),annot=True, fmt = \".2f\", cmap = \"coolwarm\")","6c40ce09":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style('darkgrid')\nfig, ax = plt.subplots(figsize=(16,12),ncols=2)\nax1 = sns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Pclass\", data=train_dataset, ax = ax[0]);\nax2 = sns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Pclass\", data=x_test, ax = ax[1]);\nax1.set_title(\"Training Set\", fontsize = 18)\nax2.set_title('Test Set',  fontsize = 18)","b4acdc48":"pal = {'male':\"green\", 'female':\"Pink\"}\nsns.set(style=\"darkgrid\")\nplt.subplots(figsize = (15,8))\nax = sns.barplot(x = \"Sex\", \n                 y = \"Survived\", \n                 data=train_dataset, \n                 palette = pal,\n                 linewidth=5,\n                 order = ['female','male'],\n                 capsize = .05,\n                )\n\nplt.title(\"Survived\/Non-Survived Passenger Gender Distribution\", fontsize = 25,loc = 'center', pad = 40)\nplt.ylabel(\"% of passenger survived\", fontsize = 15, )\nplt.xlabel(\"Sex\",fontsize = 15);","0407eefd":"plt.subplots(figsize = (15,10))\nsns.barplot(x = \"Pclass\", \n            y = \"Survived\", \n            data=train_dataset, \n            linewidth=5,\n            capsize = .1\n\n           )\nplt.title(\"Passenger Class Distribution - Survived vs Non-Survived\", fontsize = 25, pad=40)\nplt.xlabel(\"Socio-Economic class\", fontsize = 15);\nplt.ylabel(\"% of Passenger Survived\", fontsize = 15);\nlabels = ['Upper', 'Middle', 'Lower']\n#val = sorted(train.Pclass.unique())\nval = [0,1,2] ## this is just a temporary trick to get the label right. \nplt.xticks(val, labels);","a2bf1287":"le = LabelEncoder()\nle.fit(x_train['Sex'])\nx_train[\"Sex\"] = le.transform(x_train['Sex'])","02c98a6e":"x_train.head()","1d5e3f73":"y_test = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","ae5fdbea":"x_test.drop(\"Embarked\", axis=1, inplace=True)","cdf07213":"scale = MinMaxScaler(feature_range=(0, 1))\nscale.fit(x_train)\nscaled_train = scale.transform(x_train)\nscaled_train","b2599df6":"scale = MinMaxScaler(feature_range=(0, 1))\nscale.fit(x_test)\nscaled_test = scale.transform(x_test)\nscaled_test","4094ace0":"clf_knn = KNeighborsClassifier()\nclf_tree = DecisionTreeClassifier()\nclf_mlp = MLPClassifier()\nclf_svm = SVC()\nclf_naive = GaussianNB()","be7cf10d":"clf_knn.fit(scaled_train, y_train)\nprediction_knn = clf_knn.predict(scaled_test)\nprint(\"Accuracy {0:.2f}%\".format(accuracy_score(y_test['Survived'], prediction_knn) * 100))\nprint(\"=================================\")\nprint(classification_report(y_test['Survived'], prediction_knn))\nplot_confusion_matrix(conf_mat=confusion_matrix(y_target=y_test['Survived'], \n                      y_predicted=prediction_knn))","a98e12c7":"clf_tree.fit(scaled_train, y_train)\nprediction_tree = clf_tree.predict(scaled_test)\nprint(\"Accuracy {0:.2f}%\".format(accuracy_score(y_test['Survived'], prediction_tree) * 100))\nprint(\"=================================\")\nprint(classification_report(y_test['Survived'], prediction_tree))\nplot_confusion_matrix(conf_mat=confusion_matrix(y_target=y_test['Survived'], \n                      y_predicted=prediction_tree))","977eb8ec":"clf_mlp.fit(scaled_train, y_train)\nprediction_mlp = clf_mlp.predict(scaled_test)\nprint(\"Accuracy {0:.2f}%\".format(accuracy_score(y_test['Survived'], prediction_mlp) * 100))\nprint(\"=================================\")\nprint(classification_report(y_test['Survived'], prediction_mlp))\nplot_confusion_matrix(conf_mat=confusion_matrix(y_target=y_test['Survived'], \n                      y_predicted=prediction_mlp))","8bb43d3f":"clf_svm.fit(scaled_train, y_train)\nprediction_svm = clf_svm.predict(scaled_test)\nprint(\"Accuracy {0:.2f}%\".format(accuracy_score(y_test['Survived'], prediction_svm) * 100))\nprint(\"=================================\")\nprint(classification_report(y_test['Survived'], prediction_svm))\nplot_confusion_matrix(conf_mat=confusion_matrix(y_target=y_test['Survived'], \n                      y_predicted=prediction_svm))","f9395ec4":"clf_naive.fit(scaled_train, y_train)\nprediction_naive = clf_naive.predict(scaled_test)\nprint(\"Accuracy {0:.2f}%\".format(accuracy_score(y_test['Survived'], prediction_naive) * 100))\nprint(\"=================================\")\nprint(classification_report(y_test['Survived'], prediction_naive))\nplot_confusion_matrix(conf_mat=confusion_matrix(y_target=y_test['Survived'], \n                      y_predicted=prediction_naive))","90efb4d5":"ensemble = VotingClassifier(estimators=[('MLP', clf_mlp), ('SVM', clf_svm), ('Naive', clf_naive)], voting='hard')","fbac79fa":"ensemble.fit(scaled_train, y_train)","664a36c4":"prediction_ensemble = ensemble.predict(scaled_test)","40f47f14":"print(\"Accuracy {0:.2f}%\".format(accuracy_score(y_test['Survived'], prediction_ensemble) * 100))\nprint(\"=================================\")\nprint(classification_report(y_test['Survived'], prediction_ensemble))\nplot_confusion_matrix(conf_mat=confusion_matrix(y_target=y_test['Survived'], \n                      y_predicted=prediction_ensemble))","e9737f7b":"submission = pd.DataFrame({ 'PassengerId': y_test['PassengerId'],\n                            'Survived': prediction_ensemble })\nsubmission.to_csv(\"submission.csv\", index=False)","e1c6e006":"<h3>4. **Put better methods together to get a better prediction**<\/h3>","61377e59":"Hello everyone, for this kernel I porpose a simple emsemble method to improve the prediction of who survive or die in Titanic incident\n\nThese are the steps for this work\n\n1. **Cleaning and Standalize data**\n2. **Data Exploration\/Visualization**\n3. **Use Machine Learning methods to predict the target value in data**\n4. **Put all methods together to get a better prediction**\n\nSo let's get start!","a67fdffb":"**We are going use a method from Pandas called .info() to verify if our dataset have null values, or if some atribute in dataset is important for our model or not.**","86cf2a75":"> <h3>1. **Cleaning and Standalize data**<\/h3>\n\nFor cleaning the data we don't use the PassengerId, Cabin, Ticket, Name because they don't have relevance for our model and we delete rows in Embarked that have NULL values","ca48f3eb":"<h3>3. **Use Machine Learning methods to predict the target value in data**<\/h3>\n\n1 - K-Nearest Neightboors\n2 - Decision Tree\n3 - Multi Layer Perceptron\n4 - SVM\n5 - Naive Bayes\n\n","45c24c60":"For standalize the data we use a simple arithmetic mean in the Age atributte to substitute NULL values in the dataset","58ea8b4a":"> <h3>2. **Data Exploration\/Visualization**<\/h3>\n\nFor visualization, we're going see socio-economic aspects and the difference between mens and womens that survived in incident"}}