{"cell_type":{"e04c0733":"code","f2d27d33":"code","f7837fc5":"code","8155debf":"code","93f8ece3":"code","28cac262":"code","2756b978":"code","10ef3922":"code","edb4536a":"code","e83dabeb":"code","81294c68":"code","3d0022de":"code","7df35b43":"code","48454a58":"code","47662086":"code","f5bda78f":"code","9cc5f73a":"code","7d225ba1":"code","cd0a8436":"code","5def204c":"code","9154e607":"code","dc43010f":"code","d0b602a7":"code","43e55422":"code","e4025ef6":"code","4fbe5c88":"code","ac8e7d13":"code","1538d1f6":"code","262cf640":"code","f870ecab":"markdown","6223cf66":"markdown","7cefa7d1":"markdown"},"source":{"e04c0733":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2d27d33":"import tensorflow as tf\n\nimport keras\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, AveragePooling2D\nfrom keras.layers import Dense, Activation, Dropout, Flatten\n\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers import MaxPool2D\nfrom keras.callbacks import ModelCheckpoint\n\nimport numpy as np\nimport matplotlib.pyplot as plt","f7837fc5":"data = pd.read_csv('\/kaggle\/input\/facial-expression-recognition\/fer2013.csv')","8155debf":"data.head()","93f8ece3":"data.shape","28cac262":"data[\"Usage\"].value_counts()","2756b978":"np.unique(data[\"Usage\"].values.ravel()) \n\nprint('E\u011fitim verisetindeki \u00f6rnek say\u0131s\u0131: %d'%(len(data[data.Usage == \"Training\"])))","10ef3922":"train_data = data[data.Usage == \"Training\"] #sadece e\u011fitim \u00f6rneklerini train_data de\u011fi\u015fkenine ald\u0131k","edb4536a":"#e\u011fitim \u00f6rneklerinin piksel de\u011ferleri bize tablo halinde yan yana verildi\u011fi i\u00e7in bo\u015fluklardan parse ederek liste olarak de\u011fi\u015fkene ald\u0131k\ntrain_pixels = train_data.pixels.str.split(\" \").tolist() \n\ntrain_pixels = pd.DataFrame(train_pixels, dtype=int)\ntrain_images = train_pixels.values\ntrain_images = train_images.astype(np.float)\n\nprint(train_images)\n\nprint(train_images.shape)","e83dabeb":"#Resmi 48x48 px \u015feklinde g\u00f6stermek i\u00e7in bir fonksiyon tan\u0131mlayal\u0131m\ndef show(img):\n    show_image = img.reshape(48,48)\n    \n    plt.axis('off')\n    plt.imshow(show_image, cmap='gray')","81294c68":"#bir e\u011fitim \u00f6rne\u011fi g\u00f6sterelim\nshow(train_images[22])","3d0022de":"train_labels_flat = train_data[\"emotion\"].values.ravel()\ntrain_labels_count = np.unique(train_labels_flat).shape[0]\nprint('Farkl\u0131 y\u00fcz ifadelerinin say\u0131s\u0131: %d'%train_labels_count)","7df35b43":"def dense_to_one_hot(labels_dense, num_classes):\n    num_labels = labels_dense.shape[0]\n    index_offset = np.arange(num_labels) * num_classes\n    labels_one_hot = np.zeros((num_labels, num_classes))\n    labels_one_hot.flat[index_offset + labels_dense.ravel()] = 1\n    return labels_one_hot\n\n# her bir g\u00f6rsel i\u00e7in belirli seviyelerde duydu de\u011ferlerini incelemek istiyoruz.","48454a58":"y_train = dense_to_one_hot(train_labels_flat, train_labels_count)\ny_train = y_train.astype(np.uint8)\n\nprint(y_train.shape)","47662086":"np.unique(data[\"Usage\"].values.ravel()) \n\nprint('Test verisetindeki \u00f6rnek say\u0131s\u0131: %d'%(len(data[data.Usage == \"PublicTest\"])))","f5bda78f":"test_data = data[data.Usage == \"PublicTest\"] \ntest_pixels = test_data.pixels.str.split(\" \").tolist() \n\ntest_pixels = pd.DataFrame(test_pixels, dtype=int)\ntest_images = test_pixels.values\ntest_images = test_images.astype(np.float)\n\nprint(test_images.shape)","9cc5f73a":"#bir test \u00f6rne\u011fi g\u00f6sterelim\nshow(test_images[5])","7d225ba1":"test_labels_flat = test_data[\"emotion\"].values.ravel()\ntest_labels_count = np.unique(test_labels_flat).shape[0]\n\ny_test = dense_to_one_hot(test_labels_flat, test_labels_count)\ny_test = y_test.astype(np.uint8)\n\n\nprint(y_test.shape)","cd0a8436":"#test verisetinden \u00f6rneklerden bir ka\u00e7\u0131n\u0131 toplu halde g\u00f6relim\n\nplt.figure(0, figsize=(12,6))\nfor i in range(1, 13):\n    plt.subplot(3,4,i)\n    plt.axis('off')\n    \n    image = test_images[i].reshape(48,48)\n    plt.imshow(image, cmap=\"gray\")\n\nplt.tight_layout()\nplt.show()","5def204c":"model = Sequential()\n\nmodel.add(Conv2D(64, 3, data_format=\"channels_last\", kernel_initializer=\"he_normal\", input_shape=(48, 48, 1)))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\n\nmodel.add(Conv2D(64, 3))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=2))\nmodel.add(Dropout(0.6))\n\nmodel.add(Conv2D(32, 3))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\n\nmodel.add(Conv2D(32, 3))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\n\nmodel.add(Conv2D(32, 3))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=2))\nmodel.add(Dropout(0.6))\n\nmodel.add(Flatten())\nmodel.add(Dense(128))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.6))\n\nmodel.add(Dense(7))\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()","9154e607":"x_train = train_images.reshape(-1, 48, 48, 1)\nx_test = test_images.reshape(-1, 48, 48, 1)\n\nprint(\"Train:\", x_train.shape)\nprint(\"Test:\", x_test.shape)","dc43010f":"print(\"Train:\", y_train.shape)\nprint(\"Test:\", y_test.shape)","d0b602a7":"# en ba\u015far\u0131l\u0131 a\u011f\u0131rl\u0131klar\u0131 kaydet\ncheckpointer = ModelCheckpoint(filepath='\/kaggle\/output\/face_model.h5', verbose=1, save_best_only=True)\n\nepochs = 10\nbatchSize = 100 \n\n# modeli \u00e7al\u0131\u015ft\u0131r\nhist = model.fit(x_train, y_train, \n                 epochs=epochs,\n                 shuffle=True,\n                 batch_size=batchSize, \n                 validation_data=(x_test, y_test),\n                 callbacks=[checkpointer], verbose=2)\n\n# save model to json\nmodel_json = model.to_json()\nwith open(\"\/kaggle\/output\/face_model.json\", \"w\") as json_file:\n    json_file.write(model_json)","43e55422":"plt.figure(figsize=(14,3))\nplt.subplot(1, 2, 1)\nplt.suptitle('E\u011fitim', fontsize=10)\nplt.ylabel('Loss', fontsize=16)\nplt.plot(hist.history['loss'], color='b', label='Training Loss')\nplt.plot(hist.history['val_loss'], color='r', label='Validation Loss')\nplt.legend(loc='upper right')\n\nplt.subplot(1, 2, 2)\nplt.ylabel('Accuracy', fontsize=16)\nplt.plot(hist.history['accuracy'], color='b', label='Training Accuracy')\nplt.plot(hist.history['val_accuracy'], color='r', label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.show()","e4025ef6":"test = data[[\"emotion\", \"pixels\"]][data[\"Usage\"] == \"PrivateTest\"]\ntest[\"pixels\"] = test[\"pixels\"].apply(lambda im: np.fromstring(im, sep=' '))\ntest.head()","4fbe5c88":"x_test_private = np.vstack(test[\"pixels\"].values)\ny_test_private = np.array(test[\"emotion\"])","ac8e7d13":"from keras.utils import np_utils","1538d1f6":"x_test_private = x_test_private.reshape(-1, 48, 48, 1)\ny_test_private = np_utils.to_categorical(y_test_private)\nx_test_private.shape, y_test_private.shape","262cf640":"score = model.evaluate(x_test_private, y_test_private, verbose=0)\nprint(\"PrivateTest \u00fczerinde do\u011fruluk ba\u015far\u0131m\u0131:\", score)","f870ecab":"## E\u011fitim k\u00fcmesinde ka\u00e7 s\u0131n\u0131f bulunuyor?","6223cf66":"TEST DATASI - \u00d6N \u0130\u015eLEME","7cefa7d1":"**Derin \u00d6\u011frenme Modeli**"}}