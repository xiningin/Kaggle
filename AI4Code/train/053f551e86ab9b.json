{"cell_type":{"9a90d494":"code","d9efa293":"code","8726c34f":"code","c467ba0d":"code","7c8442dd":"code","54fa6d09":"code","34121fba":"code","7748a7d2":"code","03fa75b7":"code","fd281e1e":"code","56e2510c":"code","3e7f8fc8":"code","59485ab0":"code","d00257bf":"code","ac738a00":"code","bbe58076":"markdown","f883e471":"markdown","73d83474":"markdown","6d832c73":"markdown","b4905b4c":"markdown","3fb0d772":"markdown","ced30b21":"markdown","4717c8c7":"markdown"},"source":{"9a90d494":"import sys\nsys.path.append('..\/input\/timm-pytorch-image-models\/pytorch-image-models-master')\nfrom timm import create_model\nfrom fastai.vision.all import *\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import mean_squared_error\nimport gc","d9efa293":"class Config:\n    debug = False\n    if debug:\n        n_fold = 2\n        epoch = 1\n    else:\n        n_fold = 5\n        epoch = 5\n    seed = 555\n    lr =2e-5\n    batch_size = 32\n    num_workers = 8\n    model_path = 'swin_large_patch4_window7_224'\n    im_size = 224\n    base_dir = '.\/drive\/MyDrive\/petfinder'\n    data_dir = '..\/input\/petfinder-pawpularity-score\/'\n    model_dir = '.'","8726c34f":"set_seed(Config.seed, reproducible=True)\nif not os.path.exists('\/root\/.cache\/torch\/hub\/checkpoints\/'):\n    os.makedirs('\/root\/.cache\/torch\/hub\/checkpoints\/')\n!cp '..\/input\/swin-transformer\/swin_large_patch4_window7_224_22kto1k.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/swin_large_patch4_window7_224_22kto1k.pth'\n","c467ba0d":"dataset_path = Path(Config.data_dir)\ndataset_path.ls()\ntrain_df = pd.read_csv(dataset_path\/'train.csv')\ntrain_df['path'] = train_df['Id'].map(lambda x:str(dataset_path\/'train'\/x)+'.jpg')\ntrain_df = train_df.drop(columns=['Id'])\ntrain_df.head()","7c8442dd":"if Config.debug:\n    train_df = train_df.sample(500).reset_index(drop = True)\ntrain_df['norm_score'] = train_df['Pawpularity'] \/ 100\n#Sturges' rule\nnum_bins = int(np.floor(1+(3.3)*(np.log2(len(train_df)))))\ntrain_df['bins'] = pd.cut(train_df['norm_score'], bins=num_bins, labels=False)\ntrain_df['fold'] = -1\n\nskf = StratifiedKFold(n_splits = Config.n_fold, shuffle=True, random_state =Config.seed)\nfor i, (_, train_index) in enumerate(skf.split(train_df.index, train_df['bins'])):\n    train_df.iloc[train_index, -1] = i\n    \ntrain_df['fold'] = train_df['fold'].astype('int')\n\ntrain_df.fold.value_counts().plot.bar()","54fa6d09":"train_df[train_df['fold']==0].head()","34121fba":"def petfinder_rmse(input,target):\n    return 100*torch.sqrt(F.mse_loss(F.sigmoid(input.flatten()), target))\n\ndef get_data(fold):\n    train_df_f = train_df.copy()\n    # add is_valid for validation fold\n    train_df_f['is_valid'] = (train_df_f['fold'] == fold)\n    \n    dls = ImageDataLoaders.from_df(train_df_f,\n                               valid_col='is_valid',\n                               seed=Config.seed,\n                               fn_col='path',\n                               label_col='norm_score',\n                               y_block=RegressionBlock,\n                               bs=Config.batch_size,\n                               num_workers=Config.num_workers,\n                               item_tfms=Resize(Config.im_size, method='squish')\n                                  )\n    return dls\n                            \ndef get_learner(fold_num):\n    data = get_data(fold_num)\n    \n    model = create_model(Config.model_path, pretrained=True, num_classes=data.c)\n\n    learn = Learner(data, model, loss_func=BCEWithLogitsLossFlat(), metrics=petfinder_rmse).to_fp16()\n    \n    return learn","7748a7d2":"data_fold0 = get_data(0)\ndata_fold0.train.after_batch.fs","03fa75b7":"data_fold0.train.after_item.fs","fd281e1e":"all_preds = []\n\nfor i in range(Config.n_fold):\n    print(f'Fold {i} results')    \n    learn = get_learner(fold_num=i)\n    learn.fit(Config.epoch, Config.lr, wd=0, cbs=[SaveModelCallback()]) \n    learn.recorder.plot_loss()\n    learn = learn.to_fp32()    \n    learn.export(f'{Config.model_dir}\/model_fold_{i}.pkl')\n    del learn\n    torch.cuda.empty_cache()\n    gc.collect()","56e2510c":"def get_valid_data(fold):\n    valid_df = train_df[train_df['fold'] == fold].copy()\n    \n    dls = ImageDataLoaders.from_df(valid_df,\n                               seed=Config.seed,\n                               fn_col='path',\n                               label_col='norm_score',\n                               y_block=RegressionBlock,\n                               bs=Config.batch_size,\n                               num_workers=Config.num_workers,\n                               item_tfms=Resize(Config.im_size)\n                                  )\n    \n    return dls\n\ndef rmse_oof(_oof_df, fold=None):\n    oof_df = _oof_df.copy()\n    if fold is not None:\n        oof_df = oof_df[oof_df[\"fold\"] == fold]\n    target = oof_df['Pawpularity'].values\n    y_pred = oof_df['pred'].values\n    if fold is not None:\n        print(f'fold {fold}: {mean_squared_error(target, y_pred, squared=False)}')\n    else:\n        print(f'overall: {mean_squared_error(target, y_pred, squared=False)}')","3e7f8fc8":"oof_df = pd.DataFrame()\nfor i in range(Config.n_fold):\n    print(f'fold{str(i)} inference')\n    model_name = f'{Config.model_dir}\/model_fold_{str(i)}.pkl'\n    learn = load_learner(model_name, cpu=False)\n    dls = ImageDataLoaders.from_df(train_df, #pass in train DataFrame\n#                                valid_pct=0.2, #80-20 train-validation random split\n                               #valid_col='is_valid', #\n                               seed=Config.seed, #seed\n                               fn_col='path', #filename\/path is in the second column of the DataFrame\n                               label_col='norm_score', #label is in the first column of the DataFrame\n                               y_block=RegressionBlock, #The type of target\n                               bs=Config.batch_size, #pass in batch size\n                               num_workers=Config.num_workers,\n                               item_tfms=Resize(Config.im_size), #pass in item_tfms\n                               batch_tfms=setup_aug_tfms([Dihedral(), Brightness(), Contrast(), Hue(), Saturation()])) #pass in batch_tfms\n    valid_df = train_df[train_df['fold'] == i].copy()\n    valid_dl = dls.test_dl(valid_df)\n    valid_preds, _ = learn.get_preds(dl = valid_dl)\n    _oof_df = valid_df[['fold', 'Pawpularity']].copy()\n    _oof_df['pred'] = valid_preds.cpu().numpy().ravel() * 100\n    oof_df = pd.concat([oof_df, _oof_df])","59485ab0":"for i in range(Config.n_fold):\n    rmse_oof(oof_df, i)\nrmse_oof(oof_df)","d00257bf":"oof_df.sort_index().to_csv('oof.csv', index=False)","ac738a00":"plt.hist(oof_df['Pawpularity'].values, alpha = 0.4, color = 'b', label = 'target', bins = 50)\nplt.hist(oof_df['pred'].values, alpha = 0.4, color = 'g', label = 'prediction', bins = 50)\nplt.show()","bbe58076":"## set up environments & prepare data\n\n- set_seed\nSet random seed for random, torch, and numpy\n\nhttps:\/\/docs.fast.ai\/torch_core.html#set_seed\n\nif reproducible is True:\ntorch.backends.cudnn.deterministic = True\ntorch.backends.cudnn.benchmark = False","f883e471":"## Config","73d83474":"## calculate cv score","6d832c73":"## helper function\n\n### petfiner_rmse\ncalculate competition metrics\n\n### get_data\nreturn dataloaders using ImageDataloaders by each fold\n\n- batch_tfms (augmentation) is None. this is applied to train data\n- item_tfms: resizing is applied to train and valid data. method 'squish' is the same as 'resize' in albumentation\nhttps:\/\/docs.fast.ai\/vision.data.html#ImageDataLoaders.from_df\nhttps:\/\/docs.fast.ai\/vision.augment.html#Resize\n\n### get_learner\nget Learner instance which has model, data, traning params and so on.\n\n- loss_fonc: BCEWithLogitsLossFlat is the same as nn.BCEWithLogitsLoss\n- opt_func: default is Adam the same as torch.optim.AdamW, but eps and beta2 is different.\neps = 1e-5, sqr_mom(beta2)=0.99\n\n\nreference\n- https:\/\/docs.fast.ai\/learner.html#Learner\n- https:\/\/docs.fast.ai\/optimizer.html#Adam\n- https:\/\/pytorch.org\/docs\/stable\/generated\/torch.optim.AdamW.html\n- https:\/\/docs.fast.ai\/losses.html#BCEWithLogitsLossFlat\n","b4905b4c":"## confirm image transforms","3fb0d772":"## StratifiedKFold","ced30b21":"## libraries","4717c8c7":"## training loop"}}