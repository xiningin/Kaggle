{"cell_type":{"8d74718f":"code","e489c0c4":"code","4492a410":"code","91a28a85":"code","0c380b7b":"code","0337bd46":"code","f99f8ad5":"code","0e391a94":"code","5c964658":"code","1e4921d2":"code","4bb6c639":"code","e5250bb1":"code","c5e15a5c":"code","14f66444":"code","7fdfe2f7":"markdown","4da58d07":"markdown","6d19ea85":"markdown","6c2d4c92":"markdown","0728d4f9":"markdown"},"source":{"8d74718f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2DTranspose,Conv2D, MaxPooling2D\nfrom keras.layers import Dropout, Flatten\nfrom keras.utils import np_utils\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils.np_utils import to_categorical","e489c0c4":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","4492a410":"Y_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1) ","91a28a85":"X_train = X_train \/ 255.0\ntest = test \/ 255.0","0c380b7b":"X_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","0337bd46":"Y_train = to_categorical(Y_train, num_classes = 10)","f99f8ad5":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)","0e391a94":"g = plt.imshow(X_train[10][:,:,0])","5c964658":"\ndef baseline_model():\n    model = Sequential()\n    model.add(Conv2D(32, 3, input_shape=(28, 28, 1), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    \n    model.add(Conv2D(64, 3, strides=1, padding='same', activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    \n    model.add(Conv2D(128, 3, strides=1, padding='same', activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    \n    model.add(Conv2D(128, 3, strides=1, padding='same', activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    \n    model.add(Flatten())\n    model.add(Dense(1024, \n                activation='relu'))\n    model.add(Dense(1024, \n                activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(10, \n                activation='softmax'))\n    return model","1e4921d2":"model = baseline_model()\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","4bb6c639":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)\n\ndatagen.fit(X_train)","e5250bb1":"history = model.fit_generator(\n                            datagen.flow(X_train,Y_train, batch_size=50),\n                            epochs = 8, \n                            validation_data = (X_val,Y_val),\n                            verbose = 1,\n                            steps_per_epoch=X_train.shape[0] \/\/ 50\n)","c5e15a5c":"results = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","14f66444":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","7fdfe2f7":"#### Cleaning the dataset","4da58d07":"#### Viewing the image","6d19ea85":"## Importing the Libraries","6c2d4c92":"### Using Neural Networks","0728d4f9":"## Training the Model"}}