{"cell_type":{"49228317":"code","3377b65f":"code","8aa3a9a0":"code","f04f1d98":"code","d55016a1":"code","234d7621":"code","85549f34":"code","df63144e":"code","3c15ed1a":"code","46026c5f":"code","06e6c5e8":"code","1425eabf":"code","6fc0aa8a":"code","23d4926a":"code","e263d166":"code","74111966":"code","f987e0da":"code","f28c43b2":"code","3ed9cd47":"code","5d5370cb":"code","3f50721a":"code","c4645151":"code","9cda41bd":"code","8cca4116":"code","58ad8c40":"code","7f531b35":"code","eb6560dd":"code","47cb7c01":"code","94198e06":"code","f6e50eb2":"code","62054a2a":"code","d55cfeed":"code","3c8e2657":"code","ce1450f8":"code","9837395f":"code","fa930c7d":"code","3cc705c8":"code","85c1c8be":"code","0a88a777":"markdown","c4257a3e":"markdown","8eff2120":"markdown","3e8c3324":"markdown","2d277dad":"markdown","764185de":"markdown","1e8adb0a":"markdown","0bed5395":"markdown","31cfbcba":"markdown","cfafbc25":"markdown","c9d1f18d":"markdown","aabfe843":"markdown","bc33c880":"markdown","c711f138":"markdown"},"source":{"49228317":"# !pip install gdown\n# !gdown --id 1gsN1uvjJ-aruYqbi-68of5MccsKclBgH\n\n!wget --load-cookies \/tmp\/cookies.txt \"https:\/\/docs.google.com\/uc?export=download&confirm=$(wget --quiet --save-cookies \/tmp\/cookies.txt --keep-session-cookies --no-check-certificate 'https:\/\/docs.google.com\/uc?export=download&id=1gsN1uvjJ-aruYqbi-68of5MccsKclBgH' -O- | sed -rn 's\/.*confirm=([0-9A-Za-z_]+).*\/\\1\\n\/p')&id=1gsN1uvjJ-aruYqbi-68of5MccsKclBgH\" -O dog_breed_classification_ai_challenge-dataset.zip && rm -rf \/tmp\/cookies.txt\n\n!unzip dog_breed_classification_ai_challenge-dataset.zip\n!rm .\/dog_breed_classification_ai_challenge-dataset.zip","3377b65f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport random\nimport time\n\nimport os","8aa3a9a0":"labels_dataframe = pd.read_csv('\/kaggle\/working\/dataset\/train.csv')\nsample = pd.DataFrame()\nsf = []\nfor x in os.listdir(\"\/kaggle\/working\/dataset\/test\"):\n    sf.append(x)\n\nsample['Filename']=sf\n    ","f04f1d98":"ix = np.random.permutation(len(labels_dataframe))\nlabels_dataframe = labels_dataframe.iloc[ix]","d55016a1":"class_to_index = dict({breed:ix for ix, breed in enumerate(labels_dataframe['Labels'].unique())})\nindex_to_class = dict({ix:breed for ix, breed in enumerate(labels_dataframe['Labels'].unique())})\nlabels_dataframe['Labels'] = labels_dataframe['Labels'].map(class_to_index)","234d7621":"image_shape = (331, 331, 3)","85549f34":"st_time = 0\ndef start_timer():\n    global st_time\n    st_time = time.time()\ndef stop_timer():\n    global st_time\n    total = time.time() - st_time\n    st_time = 0\n    print('total runtime: {}'.format(total))\n\ndef run_with_timer(function, param, return_value = True):\n    if return_value == True:\n        start_timer()\n        result = function(**param)\n        stop_timer()\n        return result\n    else:\n        start_timer()\n        function(**param)\n        stop_timer()\n    ","df63144e":"def load_from_dataframe(dataframe, image_shape, img_dir, x_col = None, y_col = None,):\n    no_of_images = len(dataframe)\n    images = np.zeros((no_of_images, image_shape[0], image_shape[1], image_shape[2]), dtype = np.uint8)\n    if y_col:\n        labels = np.zeros((no_of_images, 1), dtype = np.uint8)\n        for ix in range(no_of_images):\n            filename = dataframe.loc[ix, x_col]\n            path = os.path.join(img_dir, filename)\n            image = load_img(path, target_size = (image_shape[0], image_shape[1]))\n            image = img_to_array(image)\n            images[ix] = image\n            labels[ix] = dataframe.loc[ix, y_col]\n        print('Found {} validated image filenames belonging to {} classes.'.format(no_of_images, np.unique(labels).size))\n        return images, labels\n    else:\n        for ix in range(no_of_images):\n            filename = dataframe.loc[ix, x_col]\n            path = os.path.join(img_dir, filename)\n            image = load_img(path, target_size = (image_shape[0], image_shape[1]))\n            image = img_to_array(image)\n            images[ix] = image\n        print('Found {} validated image filenames'.format(no_of_images))\n        return images","3c15ed1a":"params = dict(dataframe = labels_dataframe, image_shape = image_shape, img_dir = '\/kaggle\/working\/dataset\/train', x_col = 'Filename', y_col = 'Labels')\nimages, labels = run_with_timer(load_from_dataframe, params)","46026c5f":"from keras import Sequential\nfrom keras.layers import Lambda, InputLayer\n\ndef get_feature(model_name, preprocess_input, images, pooling = 'avg', target_size = (331,331,3)):\n    base_model = model_name(input_shape = target_size, include_top=False, pooling = pooling)\n\n    model = Sequential()\n    model.add(InputLayer(input_shape = target_size))\n    model.add(Lambda(preprocess_input))\n    model.add(base_model)\n\n    feature = model.predict(images)\n    \n    print('feature-map shape: {}'.format(feature.shape))\n    return feature","06e6c5e8":"from keras.applications.inception_v3 import InceptionV3, preprocess_input\n\ninception_preprocess = preprocess_input\nparams = dict(model_name = InceptionV3, preprocess_input = inception_preprocess, images = images, pooling = 'avg')\ninception_feature = run_with_timer(get_feature, params)","1425eabf":"from keras.applications.nasnet import NASNetLarge, preprocess_input\n\nnasnet_preprocessor = preprocess_input\nparams = dict(model_name = NASNetLarge, preprocess_input = nasnet_preprocessor, images = images, pooling = 'avg')\nnasnet_features = run_with_timer(get_feature, params)","6fc0aa8a":"from keras.applications.xception import Xception, preprocess_input\n\nxception_preprocess = preprocess_input\nparams = dict(model_name = Xception, preprocess_input = xception_preprocess, images = images, pooling = 'avg')\nxception_feature = run_with_timer(get_feature, params)","23d4926a":"from keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input\n\nresnet_preprocess = preprocess_input\nparams = dict(model_name = InceptionResNetV2, preprocess_input = resnet_preprocess, images = images, pooling = 'avg')\nresnet_feature = run_with_timer(get_feature, params)","e263d166":"final_features = np.concatenate([inception_feature, nasnet_features, xception_feature, resnet_feature], axis = 1)\nprint('final features shape: {}'.format(final_features.shape))\ndel images, inception_feature, nasnet_features, xception_feature, resnet_feature","74111966":"import tensorflow as tf\nimport tensorflow.keras.backend as K\n\ndef f1(y_true, y_pred):\n    y_true = K.flatten(y_true)\n    y_pred = K.flatten(y_pred)\n    return 2 * (K.sum(y_true * y_pred)+ K.epsilon()) \/ (K.sum(y_true) + K.sum(y_pred) + K.epsilon())","f987e0da":"from keras.layers import Dropout, Dense\n\ndef create_model(features_shape = 1024):\n    model = Sequential()\n    model.add(InputLayer(input_shape = (features_shape, )))\n    model.add(Dropout(0.6))\n    model.add(Dense(8192, activation = 'relu'))\n    model.add(Dropout(0.6))\n    model.add(Dense(4096, activation='relu')) \n    model.add(Dropout(0.6))\n    model.add(Dense(len(class_to_index), activation = 'softmax'))\n    \n    model.compile(loss = 'sparse_categorical_crossentropy', optimizer ='SGD', metrics = ['accuracy'])\n    return model","f28c43b2":"model = create_model(final_features.shape[1])\nmodel.summary()","3ed9cd47":"model.fit(final_features, labels, batch_size = 512, epochs = 50) ","5d5370cb":"model.save('dogspretrain.h5')","3f50721a":"params = dict(dataframe = sample, image_shape = image_shape, img_dir = '\/kaggle\/working\/dataset\/test', x_col = 'Filename')\nimages = run_with_timer(load_from_dataframe, params)","c4645151":"inception_feature = run_with_timer(get_feature, dict(model_name = InceptionV3, preprocess_input = inception_preprocess, images = images, pooling = 'avg'))\nnasnet_features = run_with_timer(get_feature, dict(model_name = NASNetLarge, preprocess_input = nasnet_preprocessor, images = images, pooling = 'avg'))\nxception_feature = run_with_timer(get_feature, dict(model_name = Xception, preprocess_input = xception_preprocess, images = images, pooling = 'avg'))\nresnet_feature = run_with_timer(get_feature, dict(model_name = InceptionResNetV2, preprocess_input = resnet_preprocess, images = images, pooling = 'avg'))","9cda41bd":"final_features = np.concatenate([inception_feature, nasnet_features, xception_feature, resnet_feature], axis = 1)\nprint('final features shape: {}'.format(final_features.shape))\ndel images, inception_feature, nasnet_features, xception_feature, resnet_feature","8cca4116":"prediction = model.predict(final_features)\nsubmission = pd.DataFrame({'Filename':sample.Filename.values})\nsubmission['Filename'] = submission['Filename'].apply(lambda x : x.split('.')[0])\nprediction = pd.DataFrame(prediction)\nprediction.columns = class_to_index.keys()","58ad8c40":"submission = pd.concat([submission, prediction], axis = 1)\nsubmission.to_csv('submission.csv', index = False)","7f531b35":"submission.loc[submission['Filename']=='1_test',:]\n# index_to_class[np.argmax(np.array(submission.iloc[946][1:].to_list()))]","eb6560dd":"submission.iloc[0][0]","47cb7c01":"mysub = pd.DataFrame()\nfiles=[]\nfor x in os.listdir('\/kaggle\/working\/dataset\/test'):\n    files.append(x)\n    ","94198e06":"mysub['Filename']= files","f6e50eb2":"mysub['intfile'] = mysub['Filename'].apply(lambda x : int(x.split('_')[0]))","62054a2a":"mysub","d55cfeed":"files=[]\nres=[]\nfor i in range(len(submission)):\n    files.append(submission.iloc[i][0]+'.jpg')\n    res.append(index_to_class[np.argmax(np.array(submission.iloc[i][1:].to_list()))])\n    \n    \n    ","3c8e2657":"findf = pd.DataFrame()\nfindf['Filename'] = files\nfindf['Labels'] = res","ce1450f8":"findf['intfile'] = findf['Filename'].apply(lambda x : int(x.split(\"_\")[0]))","9837395f":"findf=findf.sort_values(by=['intfile'])","fa930c7d":"findf = findf[['Filename','Labels']]","3cc705c8":"findf.to_csv('output.csv',header=True,index=False)","85c1c8be":"findf","0a88a777":"# Predction Model","c4257a3e":"## load train images","8eff2120":"### NASNetLarge model","3e8c3324":"### concatenate all feature\n* concatenate all feature from different base models","2d277dad":"## base models for getting feature","764185de":"### API for loading images and timer for runtime duration","1e8adb0a":"### prediction from current model","0bed5395":"### ResNet50V2 model","31cfbcba":"### create dictionary class\n* class-->labels\n* labels-->class","cfafbc25":"* create random permutation for shuffling data ","c9d1f18d":"### train model","aabfe843":"# load modules and dataframe","bc33c880":"### Xception model","c711f138":"### inception model"}}