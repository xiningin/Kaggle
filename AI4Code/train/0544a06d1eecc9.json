{"cell_type":{"6ed731dc":"code","8286e581":"code","0cd84ffd":"code","a6745132":"code","2895e173":"code","849296ed":"code","e4bd2cac":"code","af72a0fc":"code","d0374919":"code","c6d2c5cf":"code","82710d12":"code","21cc7fef":"code","2cf28dd2":"code","7673c4cf":"code","f97c6de7":"code","60472226":"code","b5850beb":"code","4db22cc9":"code","616062e1":"code","7d0fb221":"code","4a61965f":"code","b403b2bf":"code","ad83a921":"code","46382c43":"code","e7287c5e":"code","181b8074":"code","3e9432b3":"code","3a32e14f":"code","65a59a55":"code","e3668e58":"code","6682a707":"code","5d68966b":"code","c3950bc7":"code","ab7d9f2a":"code","5fbe3528":"code","1533acd8":"code","69ad01ba":"code","53a6c322":"code","c48e40cc":"code","abb05469":"code","8fc5943a":"code","dcb02a32":"code","29716013":"code","18e64002":"code","f4aaeb9b":"code","487af999":"markdown","96f3dcba":"markdown","c5c18b9d":"markdown","da471631":"markdown","0801fbe2":"markdown","8fb04f39":"markdown","1238105c":"markdown","cde0cb7e":"markdown","ab75ca6a":"markdown","14699319":"markdown","cbd0d127":"markdown","56292343":"markdown","026092fb":"markdown","4e3fe2ec":"markdown","372526c5":"markdown","d9cbf12b":"markdown","c6e62753":"markdown","d3ec282e":"markdown","14862592":"markdown","f0667d37":"markdown","1d14c60b":"markdown","f427b48d":"markdown","3625efbc":"markdown","421d03c8":"markdown","63526713":"markdown","82ac7041":"markdown","2c446c4b":"markdown","29cf5103":"markdown","51f16d97":"markdown","72916f46":"markdown","1ceccee1":"markdown","4f91f78b":"markdown","8dd83bed":"markdown","2834bb97":"markdown","2e1d5935":"markdown","4d953c3f":"markdown","d5153a49":"markdown","257aa0df":"markdown","b1bca5bc":"markdown","91e8a101":"markdown","654f9ce1":"markdown","dc4dbd80":"markdown","3ffef05f":"markdown","bbfd7ec0":"markdown"},"source":{"6ed731dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8286e581":"import pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('ggplot')\n\n%matplotlib inline","0cd84ffd":"df=pd.read_csv(os.path.join(dirname, filename))\ndf_mega=pd.read_csv(os.path.join(dirname, filename))\ndf.head()","a6745132":"df.describe()","2895e173":"df.info()","849296ed":"missing_cols=df.columns[df.isna().any()].tolist()\nmissing_cols","e4bd2cac":"mega = []\nfor i, row in df.iterrows():\n  if(row.is_mega==1):\n    mega.append(i)\ndf.drop(df.index[mega], inplace=True)","af72a0fc":"df.describe()","d0374919":"single_type=0\ndual_type=0\nfor i in df.index:\n    if df[\"type2\"][i]==\"None\":\n        single_type+=1\n    else:\n        dual_type+=1\nprint(\"Number of single type pokemon are {s} and the number of dual type pokemon are {d}\".format(s=single_type, d=dual_type))","c6d2c5cf":"labels=\"single type\", \"dual type\"\nsizes=[single_type, dual_type]\nexplode=(0,0.1)\nplt.pie(sizes, labels=labels, explode=explode,autopct='%1.1f%%',shadow=True,\n        startangle=270)\nplt.axis('equal')\nplt.title('Dual vs Single type Pokemon')\nplt.tight_layout()\nplt.show()","82710d12":"ind_count = pd.value_counts(df['type1'])\n\nfig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.set_style(\"whitegrid\")\n\nax = sns.barplot(x=ind_count.index, y=ind_count, data=df)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 45, fontsize = 12)\nax.set(xlabel='Primary types', ylabel='Count')\nax.set_title('Distribution of Primary Pokemon type')\nplt.show()","21cc7fef":"ind_count=pd.value_counts(df['type2'])\nind_count=ind_count.drop(\"None\")\n\nfig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.set_style(\"whitegrid\")\n\nax = sns.barplot(x=ind_count.index, y=ind_count, data=df)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 45, fontsize = 12)\nax.set(xlabel='Secondary types', ylabel='Count')\nax.set_title('Distribution of Secondary Pokemon type')\nplt.show()","2cf28dd2":"type1=pd.value_counts(df['type1'])\ntype2=ind_count=pd.value_counts(df['type2'])\noverall=type1+type2\noverall=overall.drop(\"None\")\noverall=overall.sort_values(ascending=False)\n\nfig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.set_style(\"whitegrid\")\n\nax = sns.barplot(x=overall.index, y=overall, data=df)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 45, fontsize = 12)\nax.set(xlabel='Overall', ylabel='Count')\nax.set_title('Distribution of Pokemon type(including primary and secondary)')\nplt.show()","7673c4cf":"plt.subplots(figsize=(10, 10))\n\nsns.heatmap(\n    df[df['type2']!='None'].groupby(['type1', 'type2']).size().unstack(),\n    linewidths=1,\n    annot=True,\n    cmap=\"Blues\"\n)\n\nplt.xticks(rotation=35)\nplt.show()","f97c6de7":"fig, ax = plt.subplots()\nfig.set_size_inches(15, 10)\nsns.set_style(\"white\")\nX=df['base_total']\nY=df[\"capture_rate\"]\nax = sns.scatterplot(x=X, y=Y, data=df,\n                     hue=df['is_legendary'], alpha=.9, palette=\"muted\")\nax.set(xlabel='Base stats total', ylabel='Catch rate')\nax.set_title('Relationship between Base stats total and Catch rate')\nplt.show()","60472226":"fig, ax = plt.subplots()\nfig.set_size_inches(15, 10)\nsns.set_style(\"white\")\nX=df['base_total']\nY=df[\"capture_rate\"]\nax = sns.scatterplot(x=X, y=Y, data=df,\n                     hue=df['is_mythical'], alpha=.9, palette=\"muted\")\nax.set(xlabel='Base stats total', ylabel='Catch rate')\nax.set_title('Relationship between Base stats total and Catch rate')\nplt.show()","b5850beb":"df_mega['height_m']=pd.to_numeric(df_mega['height_m'])\ndf_mega['weight_kg']=pd.to_numeric(df_mega['weight_kg'])\nfig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.set_style(\"white\")\nX=df['height_m']\nY=df['weight_kg']\nax = sns.scatterplot(x=X, y=Y, data=df,\n                     alpha=.6, palette=\"muted\")\nax.set(xlabel='Height in meters', ylabel='weigth in kg')\nax.set_title('Relationship between Height and Weight')\nplt.show()","4db22cc9":"print(\"The tallest pokemon are:\")\ntall=df_mega['name'][df_mega['height_m']>9].tolist()\nfor i in tall:\n    print(i)\n\nprint(\"\\nThe heaviest pokemon are:\")\nheavy=df_mega['name'][df_mega['weight_kg']>900].tolist()\nfor i in heavy:\n    print(i)\n","616062e1":"fig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.set_style(\"white\")\n\nax= sns.distplot(df_mega['height_m'], color=\"y\")\nax.set(xlabel='Height in meters')\nplt.show()","7d0fb221":"fig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.set_style(\"white\")\n\nax= sns.distplot(df_mega['weight_kg'], color=\"r\")\nax.set(xlabel='Weigth in kg')\nplt.show()","4a61965f":"fig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.set_style(\"white\")\nX=df['attack']\nY=df['defense']\nax = sns.scatterplot(x=X, y=Y, data=df,  \n                     hue=df['is_legendary'], \n                     alpha=.9, palette=\"muted\")\nax.set(xlabel='Attack stat', ylabel='Defense stat')\nplt.show()","b403b2bf":"fig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.set_style(\"white\")\nX=df['attack']\nY=df['defense']\nax = sns.scatterplot(x=X, y=Y, data=df,  \n                     hue=df['is_mythical'], \n                     alpha=.9, palette=\"muted\")\nax.set(xlabel='Attack stat', ylabel='Defense stat')\nplt.show()","ad83a921":"print(\"The pokemon with highest attack stat are:\")\ntall=df['name'][df['attack']>175].tolist()\nfor i in tall:\n    print(i)\n\nprint(\"\\nThe pokemon with highest defense stat are:\")\nheavy=df['name'][df['defense']>200].tolist()\nfor i in heavy:\n    print(i)\n","46382c43":"print(\"The pokemon with highest attack stat are:\")\ntall=df_mega['name'][df_mega['attack']>175].tolist()\nfor i in tall:\n    print(i)\n\nprint(\"\\nThe pokemon with highest defense stat are:\")\nheavy=df_mega['name'][df_mega['defense']>200].tolist()\nfor i in heavy:\n    print(i)\n","e7287c5e":"fig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.set_style(\"white\")\nX=df['sp_attack']\nY=df['sp_defense']\nax = sns.scatterplot(x=X, y=Y, data=df,  \n                     hue=df['is_legendary'], \n                     alpha=.9, palette=\"muted\")\nax.set(xlabel='Special Attack stat', ylabel='Special Defence stat')\nplt.show()","181b8074":"fig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.set_style(\"white\")\nX=df['sp_attack']\nY=df['sp_defense']\nax = sns.scatterplot(x=X, y=Y, data=df,  \n                     hue=df['is_mythical'], \n                     alpha=.9, palette=\"muted\")\nax.set(xlabel='Special Attack stat', ylabel='Special Defence stat')\nplt.show()","3e9432b3":"print(\"The pokemon with highest special attack stat are:\")\ntall=df['name'][df['sp_attack']>175].tolist()\nfor i in tall:\n    print(i)\n\nprint(\"\\nThe pokemon with highest special defense stat are:\")\nheavy=df['name'][df['sp_defense']>190].tolist()\nfor i in heavy:\n    print(i)\n","3a32e14f":"print(\"The pokemon with highest special attack stat are:\")\ntall=df_mega['name'][df_mega['sp_attack']>175].tolist()\nfor i in tall:\n    print(i)\n\nprint(\"\\nThe pokemon with highest special defense stat are:\")\nheavy=df_mega['name'][df_mega['sp_defense']>190].tolist()\nfor i in heavy:\n    print(i)\n","65a59a55":"fig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.set_style(\"white\")\n\nax= sns.distplot(df_mega['speed'], color=\"g\")\nax.set(xlabel='Speed')\nplt.show()","e3668e58":"mean= df_mega['speed'].describe()[1]\nsd= df_mega['speed'].describe()[2]\nfast_pokemon=[]\nslow_pokemon=[]\nvery_fast_pokemon=[]\nvery_slow_pokemon=[]\nnormal_pokemon=[]\nfor i in df_mega.index:\n    if(df_mega.speed[i]>mean+(2*sd)):\n        very_fast_pokemon.append(df_mega['name'][i])\n    elif(df_mega.speed[i]<mean-(2*sd)):\n        very_slow_pokemon.append(df_mega['name'][i])\n    elif(df_mega.speed[i]>mean+sd):\n         fast_pokemon.append(df_mega['name'][i])\n    elif(df_mega.speed[i]<mean-sd):\n         slow_pokemon.append(df_mega['name'][i])\n    else:\n         normal_pokemon.append(df_mega['name'][i])\nspeed_levels=['fast','slow','very fast',\n              'very slow' ,'normal']\nspeed_count = [len(fast_pokemon), len(slow_pokemon), len(very_fast_pokemon)\n               ,len(very_slow_pokemon),len(normal_pokemon)]\nplt.bar(speed_levels,speed_count)\nplt.show()","6682a707":"print('Fastest Pokemon: {}'.format(df_mega.name[df_mega['speed'].idxmax()] ))\nprint('Slowest Pokemon: {}'.format(df_mega.name[df_mega['speed'].idxmin()] ))","5d68966b":"fig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.set_style(\"white\")\n\nax= sns.distplot(df_mega['hp'], color=\"b\")\nax.set(xlabel='HP')","c3950bc7":"mean= df_mega['hp'].describe()[1]\nsd= df_mega['hp'].describe()[2]\nbulky=[]\nweak=[]\ntank=[]\nfragile=[]\nnormal_pokemon=[]\nfor i in df_mega.index:\n    if(df_mega.speed[i]>mean+(2*sd)):\n        tank.append(df_mega['name'][i])\n    elif(df_mega.speed[i]<mean-(2*sd)):\n        fragile.append(df_mega['name'][i])\n    elif(df_mega.speed[i]>mean+sd):\n         bulky.append(df_mega['name'][i])\n    elif(df_mega.speed[i]<mean-sd):\n         weak.append(df_mega['name'][i])\n    else:\n         normal_pokemon.append(df_mega['name'][i])\nhp_levels=['bulky','weak','tank',\n              'fragile' ,'normal']\nhp_count = [len(bulky), len(weak), len(tank),len(fragile),\n               len(normal_pokemon)]\nplt.bar(hp_levels,hp_count)\nplt.show()","ab7d9f2a":"print('The tankiest Pokemon: {}'.format(df_mega.name[df_mega['hp'].idxmax()] ))\nprint('The most fragile Pokemon: {}'.format(df_mega.name[df_mega['hp'].idxmin()] ))","5fbe3528":"ax = sns.countplot(x=\"generation\", data=df)","1533acd8":"leg=0\nnon_leg=0\nmythical=0\nfor i in df.index:\n    if df['is_legendary'][i]==1:\n        leg+=1\n    elif df['is_mythical'][i]==1:\n        mythical+=1\n    else:\n        non_leg+=1\nlabels=\"non-legendary\", \"legendary\", \"mythical\"\nsizes=[non_leg, leg, mythical]\nexplode=(0,0.1,0.1)\nplt.pie(sizes, labels=labels, explode=explode,autopct='%1.1f%%',shadow=True,\n        startangle=90)\nplt.axis('equal')\nplt.title('Legendary vs Mythical vs Non-legendary pokemon')\nplt.tight_layout()\nplt.show()","69ad01ba":"f, ax = plt.subplots(figsize=(8, 8))\nax = sns.countplot(x=\"generation\", hue ='is_legendary', data=df )","53a6c322":"f, ax = plt.subplots(figsize=(8, 8))\nax = sns.countplot(x=\"generation\", hue ='is_mythical', data=df )","c48e40cc":"f, ax = plt.subplots(figsize=(8, 8))\nax = sns.countplot(x=\"generation\", hue ='is_mega', data=df_mega)","abb05469":"corr = df[['hp','attack','sp_attack','defense','sp_defense','speed','base_happiness',  \n            'base_egg_steps','capture_rate','is_legendary', 'is_mythical']].corr()\nf, ax = plt.subplots(figsize=(10, 8))\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values)\nplt.show()","8fc5943a":"corr = df[['capture_rate','base_happiness','base_egg_steps','is_legendary']].corr()\nprint (corr)","dcb02a32":"mixed_type =[]\nfor i, row in df_mega.iterrows():\n    if df_mega.type2[i]==\"None\":\n        mixed_type.append(df_mega['type1'][i])\n    else:\n        mixed_type.append(df_mega['type1'][i]+\" \"+df_mega['type2'][i])\ndf_mega['mixed_type']=mixed_type","29716013":"df_mega['mixed_type'].value_counts().reset_index(name=\"count\").query(\"count > 10\")[\"index\"]","18e64002":"against_ = ['against_bug', 'against_dark', 'against_dragon', 'against_electric', 'against_fairy', 'against_fighting', \n            'against_fire','against_flying', 'against_ghost', 'against_grass', 'against_ground', 'against_ice', \n            'against_normal','against_poison', 'against_psychic', 'against_rock', 'against_steel', 'against_water']\ndf_mega['against_aggregate'] = df_mega[against_].sum(axis=1)\ndf_mega['against_mean'] = df_mega[against_].mean(axis=1)","f4aaeb9b":"against_unique = df_mega['against_mean'].unique().tolist()\nhigh = min(against_unique)\nlow  = max(against_unique)\n\nprint ('The pokemon with most resistance to other types')\nprint (df_mega.name[df_mega['against_mean'] == high])\nprint ('The pokemon with least resistance to other types')\nprint (df_mega.name[df_mega['against_mean'] == low])","487af999":"The pokemon with most resistances is shedinja while the pokemon with least resistances is the gen 6th pokemon Amaura line.  ","96f3dcba":"The tankiest pokemon is Blissey and the pokemon with least defense is Shedinja. Shedinja has only 1 hp. ","c5c18b9d":"When we closely look at the relation between capture_rate, base_happiness, base_egg_steps and is_legendary we find that is_legendary is highly corelated with base_egg_steps which means that legendary pokemon have higher base_egg_steps. And legendary pokemon have less base happiness.","da471631":"We see that the tallest pokemon is Alolan Exeggutor which is folloewd by Steelix, Mega Steelix, Wailord and Primal Kyogre. The newly added Eternatus is number 8th in the list.\n\nThe heaviest pokemon is Mega Metagross which is followed by Groudon, Primal Groudon, Mudsdale and Cosmoem. I was definitely not expecting Mudsdale in this list. Another surprise is that Kyogre is taller than Groudon while Groudon is heavier than Kyogre. I imagined the other way around was true.\n\nNow let's check the distribution of height and weight of pokemon to see what is the average height and weight of a pokemon.","0801fbe2":"The pokemon with highest attack stat are Primal Groudon followed by Deoxys Attack Forme and Kartana. \n\nThe pokemon with highest defense stat is Shuckle which is followed by the gen 7 ultra beast Stakataka. ","8fb04f39":"Now let us see the number of mega evolution forms revealed from each generation.","1238105c":"This most pokemon were introduced in the 5th generation followed by 1st generation. The lowest number of pokemon were revealed in 6th gen.","cde0cb7e":"Now let us see how many legendaries and mythicals were revealed in all the generations","ab75ca6a":"We see a positive relationship between attack stat and defence stat. This means a strong physical attacker is also a good physical defender. Leggendaries and mythicals tend to do better on this. \n\nNow let us find the pokemon with highest attack and defence stats.","14699319":"Now that we know the number and percentage of pokemon with a secondary type, we should check which type is most common primary type. We will do this by making a seaborn graph.","cbd0d127":"Now we see the distribution of speed among the pokemon.","56292343":"Now we check for any columns with missing values.If there are any missing values, we need to replace them with something else because we can not get any insights out of empty values. Luckily, there are no column with null values.","026092fb":"In this graph we classify pokemon based on their hp so that we can understand the distribution better.","4e3fe2ec":"Now is the time to do the first analysis. We need to find how many pokemon have a secondary typing. To do this, we count the numbe of dual type pokemon by iterating through type2 column of the dataframe. This will tell us if the pokemon has secondary type or not. ","372526c5":"We see that again, water type is the most common type after which comes normal then psychic, grass and fire. The most common dual type is normal flying","d9cbf12b":"The most common combination is normal\/flying. This can be easily interpreted because every game has atleast one primary route bird which generally have this typing. So this is the most common combination. It is then followed by grass\/poison and bug\/flying. \n\nNow let's see the relation between Base stat total and the catch rate of pokemon. The higher the base stat total, the stronger the pokemon will be and the higher the catch rate, the easier it will be for us to catch it in a single throw. \nI assume that the higher the base stat total will be, the lower should be the catch rate.","c6e62753":"We see that this one is even more left skewed with more pokemon on the waeker side. The bulky ones are definitely less than the weak defense. ","d3ec282e":"We can see that most legendaries and mythicals were revealed in 5th, 7th and 4th generation. The least were revealed in first generation. As of now there is no mythical pokemon from 8th generation. The new games will have some new mythicals. ","14862592":"Now we remove all the mega evolutions from one of the dataset while keeping the other dataset intact. This is done because mega evolutions are basically the same pokemon. So the mega evolution will only act as a duplicate values in some of the analysis. For example, when we count the total number of psychic pokemon, mewtwo's both mega evolutions will be counted as well in the total number of psychics. So to deal with this, we have kept one dataframe where there are no mega forms.  ","f0667d37":"Now let us see how many pokemon are introduced in each generation.","1d14c60b":"Now we see the distribution of hp among the pokemon.","f427b48d":"Now let us see the corelation between different stats to get a better understanding of how they are related.","3625efbc":"This relationship looks more scattered than the attack-defense relarionship. But the trend still remains the same- good special attack corelates with having good special defense and the legendaries tend to do better on this chart.","421d03c8":"We can see that the capture rate is negatively corelated with almost everything. That is, more the capture rate, the weaker the pokemon will be. \n\nBase happiness also has a negative corelation with all the stats. So a pokemon with less base friendship will generally be on a stronger side.\n\nThere are also some corelation between stats like a pokemon with higher defense and special defence is usually slower. special attack and special defense also have a positive corelation.","63526713":"Now let's make a pie chart so that we can visualise our result for a better understanding.","82ac7041":"We do this scatterplot relationship again to find the relationship between special attack and special defense. ","2c446c4b":"We can see that most of the pokemon lie in the normal category which was expected and the overall speed graph seem to be left skewed ie: there are more slower pokemon than faster ones but there are more extremely fast ones as compared to extremely slow ones. This means the slope is very high at the right side of the graph while the graoh seems to be flatter at the right.","29cf5103":"The pokemon with highest Special attack is Primal Kyogre followed by Deoxys Attack Forme. The pokemon with highest special defense are Shuckle and Regice. So while Groudon was a stong physical attacker, Kyogre is a strong special attacker.","51f16d97":"After reading the file, we analyse the dataframe to check for any missing values. We use describe and info functions to get the information of the dataset.","72916f46":"We see that most 3rd gen mons have have mega evolution which makes sense because Ruby and Sapphire got remakes in the year those mega evolutions were introduced. It is surprising that gen 6 has such a low numbe of mons considering the fact that this is the generatiion in which mega evolution was introduced. After 6th gen, we never got to see any new megas.","1ceccee1":"Now the fact that flying was most uncommon type doesn't seem so surprising. All the first route bird pokemon have the typing of normal\/flying. This means the flying type is a common secondary typing, not a primary type. \n\nNow let us see what are the most common type combinations. ","4f91f78b":"There are two scatter plots showing to us the Relationship between Base stats total and Catch rate. Each of the graph is highlighted with is_legendary and is_mythical so that we can compare the realtionship and see where the mythical and legendary pokemon stand in this list. We see that the was an inverse relationship between the bst and catch rate. This means that the stronger the pokemon, the harder it will be for us to catch it. Also, mythical and legendary pokemon usually have very low catch rates.\n\nNow let's check if there is any relation between height and weight of a pokemon.","8dd83bed":"# Data Visualisation of the Pokemon dataset\n\nThis project focuses on taking information from a Pokemon dataset with and all relevant data about their weaknesses, stats, height, weight, etc. With a large amount of domain expertise on Pokemon, I started off by simply looking at the data and trying to think of what interesting information I could pull from it.\n\nWe start off by simply importing the packages needed for data analysis in Python, such as Pandas, Matplotlib, Seaborn to get the csv file and visualise it.\n\n","2834bb97":"Now in the end we take the aggregate of all the type defences to see which pokemon has the most resistances and which pokemon has the least resistances. ","2e1d5935":"The fastest pokemon is Deoxys Speed Forme while the slowest is shuckle. It was expected from a perfect wall like shuckle.","4d953c3f":"When we include the mega evolution in this, we can see that the pokemon with highest special attack is Mega Mewtwo Y who is closely followed by Primal Kyogre, Mega Rayquaza and Deoxys Attack Forme. While Mega Mewtwo X was a strong physical attacker, Y is a strong special attacker.\n\nThe pokemon with highest special defence are Shuckle and Regice. Shuckle looks like a perfect tank with the defences challenging even the legendaries. ","d5153a49":"Now let us see how many pokemon are legendary and how many are mythical out of the ","257aa0df":"After importing the files, we need to read the csv file and store it into a variable.","b1bca5bc":"To get a better insight, we classify pokemon based on their stanadard deviations from the mean. ","91e8a101":"Now we look at the most common type of pokemon including dingle and dual types. ","654f9ce1":"This scatterplot shows the relationship between Attack and Defence stat of a pokemon. \n","dc4dbd80":"Now we can see that water type is the most common primary type followed by normal, grass and bug type. This was kind of surprising for me because I thought normal type was the most common type. And flying is the most uncommon primary type. This surprised me too.\n\nNow let's so the same for the secondary typing and see the result.","3ffef05f":"If we also add mega evolutions to our list, we can see that the pokemon with highest attack stat is Mega Mewtwo X followed by Mega Heracross, Primal Groudon, Mega Rayquaza, Deoxys Attack Forme and Kartana. \n\nThe pokemon with highest defence stat is Mega Steelix, Shuckle, Mega Aggron and Stakataka. Little Shuckle managed to come in top 3 even in a list choke full of megas, legendaries, mythical and all other strong pokemon.","bbfd7ec0":"Now we can see that most of the pokemon lie in a range of height and weight ratio and the height increases with weight.\n\nNow we should find the heaviest and the biggest pokemon."}}