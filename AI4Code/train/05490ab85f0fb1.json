{"cell_type":{"2032f2f8":"code","7ab45376":"code","116cbaea":"code","b47096d6":"code","d691b080":"code","1bb0392c":"code","3a510d77":"code","cc95894e":"code","5471d9e3":"code","9a3dc13c":"code","9d85f87b":"code","8c926415":"code","9bee366f":"code","32c46236":"code","e5b466a9":"code","87674a80":"code","90dd27bd":"code","f04e0ace":"code","d743dd26":"code","33e383bd":"code","afc37fee":"code","5624d5fe":"code","18abfebc":"code","2899101a":"code","f6b541db":"code","4ca9442e":"code","8eff7cb0":"code","a5b88ba5":"code","8561b89c":"code","5d388152":"code","75eed423":"code","58e50a39":"code","e8e3de11":"code","6ef4a1f2":"code","b7f2c521":"markdown","057ed38e":"markdown"},"source":{"2032f2f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7ab45376":"dataFrame = pd.read_csv(\"..\/input\/2017.csv\")","116cbaea":"dataFrame.info()","b47096d6":"dataFrame.columns","d691b080":"dataFrame.corr()","1bb0392c":"f,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(dataFrame.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()\n","3a510d77":"print(dataFrame.head(10))\nprint(dataFrame.tail(10))","cc95894e":"dataFrame.rename(columns={'Happiness.Score': 'Happiness_Score','Happiness.Rank': 'Happiness_Rank',\n                          'Whisker.high': 'Whisker_high','Economy..GDP.per.Capita.':'Economy_GDP_per_Capita','Whisker.low': 'Whisker_low',\n                          'Trust..Government.Corruption.':'Trust_Government_Corruption',\n                           'Dystopia.Residual': 'Dystopia_Residual', 'Health..Life.Expectancy.': 'Health_Life_Expectancy'}, inplace=True)\n","5471d9e3":"dataFrame.columns","9a3dc13c":"dataFrame.describe()","9d85f87b":"filtered_dataFrame= dataFrame.Happiness_Rank<dataFrame.Happiness_Rank.mean() \nflt_dF=dataFrame[filtered_dataFrame]\nprint(flt_dF)\n","8c926415":"x = dataFrame['Happiness_Rank']<78     # \ndataFrame[x]","9bee366f":"# 2 - Filtering pandas with logical_and\n # logical_and numpy k\u00fct\u00fcphanesine ba\u011fl\u0131 bir keyword\ndataFrame[np.logical_and(dataFrame['Happiness_Rank']<20, dataFrame['Happiness_Score']>7 )]","32c46236":"plt.scatter(dataFrame.Happiness_Score,dataFrame.Health_Life_Expectancy,alpha = 0.5,color=\"orange\",label=\"dataFrame\")\n\nplt.legend()\nplt.xlabel(\"Happiness_Score\")\nplt.ylabel(\"Health_Life_Expectancy\")\nplt.title(\"scatter plot\")\nplt.show()","e5b466a9":"plt.plot(dataFrame.Happiness_Score,dataFrame.Health_Life_Expectancy,color=\"blue\",label=\"virginica\")\nplt.xlabel('Happiness_Score')\nplt.ylabel('Health_Life_Expectancy')\nplt.legend()\n#dataFrame.plot(grid=True, alpha=3)  #\u25b2alpha \u00e7izginin saydaml\u0131\u011f\u0131n\u0131 g\u00f6steriyor\nplt.show()","87674a80":"dataFrame.Happiness_Score.plot(kind = 'hist',bins = 80\n                               ,figsize = (10,10))\n\nplt.show()","90dd27bd":"#Dicrionary\n#creating dictionary and look its keys and values\n\n#listelerden daha h\u0131zl\u0131 olduklar\u0131 i\u00e7in  dictionary tercih ediyoruz\ndictionary = {'Fatih' : 31 ,\"Ahmet\" : 32,(1,2,3):\"a,b,c\"}\nprint(dictionary.keys())\nprint(dictionary.values())\n\n# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['Fatih'] = \"Adana\"    # update existing entry\nprint(dictionary)\ndictionary['Hasan'] = \"Ad\u0131yaman\"       # Add new entry\nprint(dictionary)\ndel dictionary['Fatih']              # remove entry with key 'spain'\nprint(dictionary)\nprint('Hasan' in dictionary)        # check include or not  True olarak d\u00f6n\u00fcyor buras\u0131\n#dictionary.clear() #remove all entries\nprint(dictionary)","f04e0ace":"#TUBLE\ntuble_example = ('fatih', 100 , 3.14, 'Ahmet', 49.9 )\n#tuble_example[1]=25 de\u011fi\u015ftiremiyoruz TypeError: 'tuple' object does not support item assignment\nprint(tuble_example)\n # ilgili indisteki eleman\u0131 yazd\u0131rabiliyoruz ama de\u011fi\u015ftiremiyoruz\ndef tbl_examplex():\n    \"\"\" return defined t tuble\"\"\"   #  for documentation of function\n    t = (1,2,3)\n    return t\na,b,c = tbl_examplex()\nprint(a,b,c)\n\n\n","d743dd26":"dataFrame.columns","33e383bd":"#while basit d\u00f6ng\u00fcs\u00fc, kural tamamlanana kadar i\u015fi yapar durur.\ni = 0\nwhile i != 5 :      # i e\u015fit de\u011fil 5 olana kadar i yi artt\u0131r ve bunu print et\n    print('i is: ',i)\n    i +=1 \nprint(i,' is equal to 5') \n\n#list i\u00e7erisinde d\u00f6ng\u00fc kontrol\u00fc\n\n\n\n# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5,6,7,8]\nfor i in lis:       #for d\u00f6ng\u00fcs\u00fc ile listenin i\u00e7ine girip kontroller yap\u0131yoruz\/yapaca\u011f\u0131z\n    print('i is: ',i)\n    \n\n# Enumerate index and value of list     \n#index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):   # listenin hem indexine hem value sine er\u015fimek i\u00e7in \n                            #her \u00f6\u011feye eri\u015fmek i\u00e7in for d\u00f6ng\u00fcs\u00fcn\u00fc kullan\u0131yoruz ayr\u0131ca enumerate metodunu da kullan\u0131r\u0131z.\n    print(index,\" : \",value)\n    \n#for ile dictionarty \u00f6\u011felerine de eri\u015febiliyoruz\nfor key,value in dictionary.items():\n    print(key,\" : \",value) ","afc37fee":"# pandas ta for ile i\u00e7eri\u011fe eri\u015febiliyoruz \nfor index,value in dataFrame[['Happiness_Score']][1:2].iterrows():      #iterrows metodu ilgili kordinatta[0:1] daki value yu bulup onun indexinide buluyor\n    print(index,\" : \",value)\n","5624d5fe":"x = 2  # --global de\u011fi\u015fken\ndef f():\n    x = 3   # ---- fonsiyonun i\u00e7inde tan\u0131mlanm\u0131\u015f de\u011fi\u015fken\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope\n\n#local scope yok ise globali kullan\u0131r\nz=7\ndef trt():\n    q=z**2\n    return q\nprint(trt())","18abfebc":"#built in scopes\n# dir ile i\u00e7eri\u011fi \u00e7a\u011f\u0131rabiliyoruz\nimport builtins\ndir(builtins)","2899101a":"#nested functions\n\ndef square_root():\n    def ilk_topla():\n        a=3\n        b=6\n        c=a+b\n        return math.sqrt(c)\n    return ilk_topla()\nprint(square_root())","f6b541db":"# default arguments\ndef f(x, y = 3, z = 6):   # y ve z ye default de\u011ferler verilmi\u015ftir\n    t = x + y ** z\n    return t\nprint(f(5))   # fonksiyona yaz\u0131lan de\u011fer inputlardan bo\u015f olan a ya aittir\n# fonksiyona di\u011fer inputlar\u0131 ezecek de\u011fi\u015fkenler verilebilir\nprint(f(5,4,3))","4ca9442e":"# flexible arguments *args,* kwargs\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nf(4,5,6,8) # print dahil metoddur.\n# **kwargs  dictionary ler i\u00e7in  flexible arguments dir\ndef f(**kwargs):\n    \"\"\" dictionary i\u00e7in key ve value ler yaz\u0131l\u0131r.\"\"\"\n    for key, value in kwargs.items(): \n        print(key, \" \", value)\nf(fatih=21,hasan=22,\u00f6mer=23,h\u00fcseyin=\"hen\u00fcz re\u015fit de\u011fil\")","8eff7cb0":"#lambda funtion\ndef square_rooty(x):     # sesli olarak yazmak istersek- square_rooty metodu x inputu al\u0131yor  \n    return math.sqrt(x)   #  x in kare k\u00f6k\u00fcn\u00fc return ediyor. sonra print i\u00e7erisine metodu yaz\u0131p\nprint(square_rooty(25))    #inputu veriyoruz\n\n# lambda function\nsquare_root_lambda = lambda x: math.sqrt(x)     # where x is name of argument\nprint(square_root_lambda(36))\n\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))\n","a5b88ba5":"# ANONYMOUS FUNCT\u0130ON\nsayi_listesi=[25,36,49,64,81]\ny=map(lambda x: math.sqrt(x),sayi_listesi)\nprint(list(y))\n","8561b89c":"name=\"FAT\u0130H\"  #name variable, iter fonksiyon, it obje, next it ilk harfini yazd\u0131r\u0131yor.\nit= iter(name)\nprint(next(it))","5d388152":"# liste zipleme \nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)    # z bir zip objesi oldu , bunu listeye \u00e7evirmek i\u00e7in list metodunu kullan\u0131yoruz\nprint(z)\nz_list = list(z)\nprint(z_list)\n#unzip \nun_zip = zip(*z_list)   #olu\u015fan un_zip bir obje listeye \u00e7evirmek i\u00e7in list metodu..\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))\nprint(type(list(un_list1)))\ntype(z)","75eed423":"# list comprehension\nnum1 = [1,2,3]           #itarable obje(num1)yi itaretor(for) ile itartion yap\u0131yoruz..\nnum2 = [i + 1 for i in num1 ]   #list comprehension\nprint(num2)","58e50a39":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\n#kodu anlat\u0131rken yazmaya \u015furadan ba\u015fl\u0131yoruz dedi:\n# for i in num1 kodu buradan ba\u015flayarak anlayaca\u011f\u0131m\n # bir d\u00f6ng\u00fc var, bu d\u00f6ng\u00fc s\u0131ras\u0131nda i yi ko\u015fullam\u0131\u015f  1) if i == 10 (i 10 ise i**2),\n   #  else i-5 if i < 7 buray\u0131 \u015f\u00f6yle okuyoruz elseif i<7 ise i-5,\n#else i+5 k\u0131sm\u0131 ise 10 a e\u015fit de\u011fil ve 7 den k\u00fc\u00e7\u00fcl de\u011fil ise demek i+5\n# sonu\u00e7 [0, 100, 20]\nprint(num2)","e8e3de11":"dataFrame.columns","6ef4a1f2":"threshold = sum(dataFrame.Happiness_Score)\/len(dataFrame.Happiness_Score)\nprint(\"threshold\",threshold)\ndataFrame[\"Happiness_Level\"] = [\"high\" if i > threshold else \"low\" for i in dataFrame.Happiness_Score]\ndataFrame.loc[:10,[\"Happiness_Level\",\"Happiness_Score\"]] # we will learn loc more detailed later\n\n\n\n\n\n\n\n","b7f2c521":"Data Science Toolbox\n","057ed38e":"Hello,\n\nThis is my first Data Science homework."}}