{"cell_type":{"9c74c0e4":"code","5350916b":"code","2c548a76":"code","62a6e675":"code","1be534ab":"code","57d252e3":"code","79678db0":"code","a59b9a2c":"code","54091c23":"code","82d95add":"code","8363a57a":"code","5e3f1a25":"code","2b15fa89":"code","5933ce15":"code","c6fd7e23":"code","c8c938c0":"code","55abdf5b":"code","0e967b97":"code","5281b908":"code","d44dd8b8":"code","bc96893f":"markdown","7e47f0b9":"markdown","b7b109cc":"markdown","26485159":"markdown","97ee5f02":"markdown","e7f91ddf":"markdown","e1159710":"markdown","e62972bf":"markdown","3873d06d":"markdown","d51d1c45":"markdown","4b7c83c6":"markdown","03f14fdb":"markdown"},"source":{"9c74c0e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5350916b":"train_df_path = \"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\"\ntest_df_path = \"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\"","2c548a76":"!pip install pycaret","62a6e675":"import pandas as pd\nfrom pycaret.regression import *","1be534ab":"df = pd.read_csv(train_df_path)","57d252e3":"df.head()","79678db0":"df.columns","a59b9a2c":"cat_col = ['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7','cat8', 'cat9']\ncont_col = ['cont0', 'cont1', 'cont2', 'cont3', 'cont4', 'cont5','cont6', 'cont7', 'cont8', 'cont9', 'cont10', 'cont11', 'cont12','cont13']","54091c23":"exp_clf = setup(data = df, target = 'target',  session_id=123, \n                numeric_features=cont_col, \n                categorical_features=cat_col,\n               ignore_features=[\"id\"], silent=True)","82d95add":"best_model = compare_models(include=[\"br\", \"lr\", \"ridge\"], sort=\"RMSE\")\n","8363a57a":"# here is list of supported model \nmodels()","5e3f1a25":"tuned_model = tune_model(best_model, optimize = 'RMSE')","2b15fa89":"final_model = finalize_model(tuned_model)","5933ce15":"df_test = pd.read_csv(test_df_path)","c6fd7e23":"df_test.head()","c8c938c0":"y_pred = predict_model(final_model, df_test)","55abdf5b":"y_pred.head()","0e967b97":"df_result = df_test[[\"id\"]]\ndf_result[\"target\"] = y_pred[\"Label\"]","5281b908":"df_result","d44dd8b8":"df_result.to_csv('submission.csv', index=False)","bc96893f":"##  Finalize model\nPyCaret will train your tuned model, with best hyperparameter on full train dataset (include the split for validation)","7e47f0b9":"## Compare some modeling algorithms and decide which one to use","b7b109cc":"# Start modeling","26485159":"## Set up experiment ","97ee5f02":"# Predict on test data ","e7f91ddf":"## Tune our best model ","e1159710":"# Format data for submission","e62972bf":"# Load and take a look at the data","3873d06d":"We can guest (or you did read the data description) that `cat*` are categorical data, and `cont*` are numerical data. We will tell PyCaret that, ignore `id` column and take `target` as label. ","d51d1c45":"# Introduction\nHere I will guide you through how to make a very simple baseline with PyCaret. (https:\/\/pycaret.org\/) \n","4b7c83c6":"I put arg `include=[\"br\", \"lr\", \"ridge\"]` to tell PyCaret only try on Bayesian Ridge, Linear Regression and Ridge Regression because I know they are super fast, and I want my baseline done fast. \n\nYou can pass `include=None` and `turbo=False` to give it a try on all suported model. It will take a long time. ","03f14fdb":"Here, we done modeling. "}}