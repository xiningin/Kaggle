{"cell_type":{"9958173c":"code","9bd34fad":"code","2b9467fe":"code","26d358c5":"code","567b5933":"code","f97637b5":"code","61f28324":"code","650ac5b6":"code","cfafe84d":"code","3491d0aa":"code","11c7098e":"code","a0432155":"code","97dc9ac9":"code","a54f0820":"code","fd3d3cf7":"code","0fbdf06c":"code","3ad0b127":"code","717ac6c0":"code","b959f5cf":"code","7916373e":"code","26113b4a":"code","647ae81c":"code","3085ead2":"code","2c1f60ab":"code","1a5d4e72":"code","0691404e":"code","6e712ae9":"code","6c7afeac":"code","ca42f5ff":"code","29a9b3b5":"code","bc44b707":"code","66fe9e79":"code","0c84186a":"code","234b4d4a":"code","e830889a":"code","ccd112dc":"code","e883f955":"code","7c18c333":"code","5b9cbbc3":"code","38e815ef":"code","08018f00":"code","1fbcb3eb":"code","6fe7cd83":"code","c08ed60a":"code","90d4032c":"code","7470ccc7":"code","2005ce46":"code","e2767239":"code","7fb3068b":"code","836b8a98":"code","b1224a7a":"code","2907daf0":"code","06edaf2a":"code","fd7755da":"code","53c553f2":"code","f0b8747f":"code","12485116":"markdown","42a86aac":"markdown","bbca710c":"markdown","94ceaeb7":"markdown","d417ac13":"markdown"},"source":{"9958173c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport statsmodels.api as sm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale, StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, mean_squared_error, r2_score, roc_auc_score, roc_curve, classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.pipeline import make_pipeline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning) \nwarnings.filterwarnings(\"ignore\", category=UserWarning) \n\n%config InlineBackend.figure_format = 'retina'\n\n# to display all columns and rows:\npd.set_option('display.max_columns', None); pd.set_option('display.max_rows', None);  # to display all columns and rows\npd.set_option('display.float_format', lambda x: '%.2f' % x) # The number of numbers that will be shown after the comma.","9bd34fad":"a = pd.read_csv('\/kaggle\/input\/banking-dataset-marketing-targets\/train.csv',sep=';')\nb = pd.read_csv('\/kaggle\/input\/banking-dataset-marketing-targets\/test.csv',sep=';')","2b9467fe":"a.head()","26d358c5":"df = pd.merge(a,b)","567b5933":"df.head()","f97637b5":"df = df.rename(columns={'y':'Subscribed?'})","61f28324":"df.dtypes","650ac5b6":"plt.figure(figsize=(10,6))\nsns.histplot(data=df, x=\"Subscribed?\", hue=\"Subscribed?\", multiple=\"dodge\",binwidth=1.3,palette='YlOrBr')","cfafe84d":"plt.figure(figsize=(10,6))\nsns.countplot(x ='education',\n              data=df,\n              order=df['education'].value_counts().index,palette='dark:salmon_r')\nplt.xlabel('Education')\nplt.ylabel('Count')","3491d0aa":"education_target = df.groupby('education', as_index=False)['Subscribed?']","11c7098e":"plt.figure(figsize=(10,6))\nsns.histplot(data=df, x=\"education\", hue=\"Subscribed?\", multiple=\"dodge\",binwidth=1.1,shrink=.8,palette='Blues')\nplt.xlabel('Education')\nplt.title('Distribution of subscribed value by education')","a0432155":"binary_columns = []\nfor column in df.select_dtypes('object').columns:\n    if len(df[column].unique()) == 2:\n        binary_columns.append(column)\n    print(f\"Column - {column} \",df[column].unique(), end='\\n\\n')","97dc9ac9":"for column in binary_columns:\n    df[column] = df[column].map({'yes': 1, 'no': 0})\n    \ndf.loc[:, binary_columns]","a54f0820":"education_target = df.groupby('education', as_index=False)['Subscribed?']\neducation_target_mean = education_target.mean().sort_values(by='Subscribed?', ascending=False)\neducation_target_sum = education_target.sum().sort_values(by='Subscribed?', ascending=False)","fd3d3cf7":"plt.figure(figsize=(10,6))\nsns.barplot(data=education_target_mean, x='education', y='Subscribed?',palette='YlOrBr')\nplt.xlabel(\"education\")\nplt.ylabel(\"Mean subscribed\")\nplt.title(\"Mean subscribed value by education\")","0fbdf06c":"plt.figure(figsize=(10,6))\nsns.barplot(data=education_target_sum, x='education', y='Subscribed?',palette='YlGn')\nplt.xlabel(\"Education\")\nplt.ylabel(\"Sum subscribed?\")\nplt.title(\"Sum subscribed? value by education\")","3ad0b127":"plt.figure(figsize=(10,6))\nsns.histplot(data=df, x=\"education\", hue=\"loan\", multiple=\"dodge\",binwidth=1.1,shrink=.8,palette='PRGn')\nplt.title('Distribution of loan by education')\nplt.xlabel('Education')","717ac6c0":"plt.figure(figsize=(10,6))\nsns.histplot(data=df, x=\"education\", hue=\"default\", multiple=\"dodge\",binwidth=1.1,shrink=.8,palette='PuBu')\nplt.title('Distribution of default by education')\nplt.xlabel('Education')","b959f5cf":"education_group = df.groupby('education', as_index=False)\neducation_loan_mean = education_group['loan'].mean().sort_values(by='loan', ascending=False)\neducation_loan_sum = education_group['loan'].sum().sort_values(by='loan', ascending=False)\n\neducation_default_mean = education_group['default'].mean().sort_values(by='default', ascending=False)\neducation_default_sum = education_group['default'].sum().sort_values(by='default', ascending=False)\n\neducation_loan_mean","7916373e":"plt.figure(figsize=(10,6))\nsns.barplot(data=education_loan_mean, x='education', y='loan',palette='RdGy')\nplt.xlabel(\"education\")\nplt.ylabel(\"Mean loan\")\nplt.title(\"Mean loan by education\")","26113b4a":"plt.figure(figsize=(10,6))\nsns.barplot(data=education_loan_sum, x='education', y='loan',palette='GnBu')\nplt.xlabel(\"Education\")\nplt.ylabel(\"Sum loan\")\nplt.title(\"Sum loan by education\")","647ae81c":"plt.figure(figsize=(10,6))\nsns.barplot(data=education_default_mean, x='education', y='default',palette='BrBG')\nplt.xlabel(\"Education\")\nplt.ylabel(\"Mean default\")\nplt.title(\"Mean default by education\")","3085ead2":"plt.figure(figsize=(10,6))\nsns.barplot(data=education_default_sum, x='education', y='default',palette='PRGn')\nplt.xlabel(\"education\")\nplt.ylabel(\"Sum default\")\nplt.title(\"Sum default by education\")","2c1f60ab":"plt.figure(figsize=(12,6))\nsns.countplot(x = 'job',\n              data = df,\n              order = df['job'].value_counts().index, palette=sns.color_palette('Paired'))\nplt.xticks(fontsize='8')","1a5d4e72":"Ejex,Ejey = 'job', 'Subscribed?'\n\ndf1 = df.groupby(Ejex)[Ejey].value_counts(normalize=True)\ndf1 = df1.mul(100)\ndf1 = df1.rename('percent').reset_index()","0691404e":"g = sns.catplot(x=Ejex,y='percent',hue=Ejey,kind='bar',data=df1,palette='GnBu')\ng.figure.set_figheight(6)\ng.figure.set_figwidth(10)\ng.ax.set_ylim(0,100)\ng.ax.set_xlabel('Job')\ng.ax.set_ylabel('% of target variable')\ng.ax.set_title(\"% of target variable by job\")\nplt.xticks(fontsize='6.5')\nfor p in g.ax.patches:\n    txt = str(p.get_height().round(2)) + '%'\n    txt_x = p.get_x() \n    txt_y = p.get_height()\n    g.ax.text(txt_x,txt_y,txt)","6e712ae9":"df.corr()","6c7afeac":"X = df[['age','balance','housing','loan','day','duration','campaign','pdays','previous']]\ny = df['Subscribed?']","ca42f5ff":"X.head()","29a9b3b5":"y.head()","bc44b707":"X_train, X_test, y_train, y_test = train_test_split(X, y,test_size = 0.2)","66fe9e79":"pipelineSVC = make_pipeline(StandardScaler(), SVC())","0c84186a":"param_grid_svc = [{\n                    'svc__C': [0.001, 0.01, 0.05, 0.1, 0.5, 1.0, 10.0],\n                    'svc__kernel': ['linear']\n                  },\n                 {\n                    'svc__C': [0.001, 0.01, 0.05, 0.1, 0.5, 1.0, 10.0],\n                    'svc__gamma': [0.001, 0.01, 0.05, 0.1, 0.5, 1.0, 10.0],\n                    'svc__kernel': ['rbf']\n                 }]","234b4d4a":"gsSVC = GridSearchCV(estimator=pipelineSVC,\n                     param_grid = param_grid_svc,\n                     scoring='accuracy',\n                     cv=10,\n                     refit=True,\n                     n_jobs=-1)","e830889a":"gsSVC.fit(X_train, y_train)","ccd112dc":"print(gsSVC.best_score_)\n\nprint(gsSVC.best_params_)\n\n# Print the model score on the test data using GridSearchCV score method\nprint('Test accuracy: %.3f' % gsSVC.score(X_test, y_test))\n\n# Print the model score on the test data using Best estimator instance\nclfSVC = gsSVC.best_estimator_\nprint('Test accuracy: %.3f' % clfSVC.score(X_test, y_test))","e883f955":"pipelineRFC = make_pipeline(StandardScaler(), RandomForestClassifier(criterion='gini'))","7c18c333":"param_grid_rfc = [{\n    'randomforestclassifier__max_depth':[2, 3, 4],\n    'randomforestclassifier__max_features':[2, 3, 4, 5, 6],\n    'randomforestclassifier__min_samples_split': [2,5,10,30],\n    'randomforestclassifier__n_estimators' :[100,200,500,1000], \n}]","5b9cbbc3":"gsRFC = GridSearchCV(estimator=pipelineRFC,\n                     param_grid = param_grid_rfc,\n                     scoring='accuracy',\n                     cv=10,\n                     refit=True,\n                     n_jobs=-1)","38e815ef":"gsRFC = gsRFC.fit(X_train, y_train)","08018f00":"print(gsRFC.best_score_)\n\nprint(gsRFC.best_params_)\n\n# Print the model score on the test data using GridSearchCV score method\nprint('Test accuracy: %.3f' % gsRFC.score(X_test, y_test))\n\n# Print the model score on the test data using Best estimator instance\nclfRFC = gsRFC.best_estimator_\nprint('Test accuracy: %.3f' % clfRFC.score(X_test, y_test))","1fbcb3eb":"pipelineLR = make_pipeline(StandardScaler(), LogisticRegression(penalty='l2', solver='lbfgs'))","6fe7cd83":"param_grid_lr = [{\n                  'logisticregression__C': [0.001, 0.01, 0.05, 0.1, 0.5, 1.0, 10.0],\n                 }]","c08ed60a":"gsLR = GridSearchCV(estimator=pipelineLR,\n                     param_grid = param_grid_lr,\n                     scoring='accuracy',\n                     cv=10,\n                     refit=True,\n                     n_jobs=-1)","90d4032c":"gsLR = gsLR.fit(X_train, y_train)","7470ccc7":"print(gsLR.best_score_)\n\nprint(gsLR.best_params_)\n\n# Print the model score on the test data using GridSearchCV score method\nprint('Test accuracy: %.3f' % gsLR.score(X_test, y_test))\n\n# Print the model score on the test data using Best estimator instance\nclfLR = gsLR.best_estimator_\nprint('Test accuracy: %.3f' % gsLR.score(X_test, y_test))","2005ce46":"pipelineLGBM = make_pipeline(LGBMClassifier())","e2767239":"lgbm_params = {\"lgbmclassifier__learning_rate\": [0.01, 0.03, 0.05, 0.1, 0.5],\n               \"lgbmclassifier__n_estimators\": [500, 1000, 1500],\n               \"lgbmclassifier__max_depth\":[3,5,8]}","7fb3068b":"gsLGBM = GridSearchCV(estimator=pipelineLGBM,\n                      param_grid = lgbm_params,\n                      scoring='accuracy',\n                      cv=10,\n                      refit=True,\n                      n_jobs=-1)","836b8a98":"gsLGBM.fit(X_train, y_train)","b1224a7a":"print(gsLGBM.best_score_)\n\nprint(gsLGBM.best_params_)\n\n# Print the model score on the test data using GridSearchCV score method\nprint('Test accuracy: %.3f' % gsLGBM.score(X_test, y_test))\n\n# Print the model score on the test data using Best estimator instance\nclfLGBM = gsLGBM.best_estimator_\nprint('Test accuracy: %.3f' % gsLGBM.score(X_test, y_test))","2907daf0":"pipelineXGB = make_pipeline(GradientBoostingClassifier())","06edaf2a":"xgb_params = {\n              \"gradientboostingclassifier__learning_rate\": [0.01, 0.1, 0.2, 1],\n              \"gradientboostingclassifier__min_samples_split\": np.linspace(0.1, 0.5, 10),\n              \"gradientboostingclassifier__max_depth\":[3,5,8],\n              \"gradientboostingclassifier__subsample\":[0.5, 0.9, 1.0],\n              \"gradientboostingclassifier__n_estimators\": [100,1000]\n             }","fd7755da":"gsXGB = GridSearchCV(estimator=pipelineXGB,\n                     param_grid = xgb_params,\n                     scoring='accuracy',\n                     cv=10,\n                     refit=True,\n                     n_jobs=-1)","53c553f2":"gsXGB.fit(X_train, y_train)","f0b8747f":"print(gsXGB.best_score_)\n\nprint(gsXGB.best_params_)\n\n# Print the model score on the test data using GridSearchCV score method\nprint('Test accuracy: %.3f' % gsXGB.score(X_test, y_test))\n\n# Print the model score on the test data using Best estimator instance\nclfXGB = gsXGB.best_estimator_\nprint('Test accuracy: %.3f' % gsXGB.score(X_test, y_test))","12485116":"## Random Forest ","42a86aac":"## Light GBM","bbca710c":"## Logistic Regression","94ceaeb7":"## Support Vector Classification","d417ac13":"## XGBoost"}}