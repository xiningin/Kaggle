{"cell_type":{"bb1a0cac":"code","2eb34126":"code","5ba46f5b":"code","22e9914f":"code","6554a500":"code","d329b103":"code","8941a60f":"code","20572e84":"code","a28a96db":"code","361c0b83":"code","de0f18d0":"code","8632788c":"code","e35f8255":"code","329ae02c":"code","753591b0":"code","d843ddf2":"code","8c1050e1":"code","0ef20371":"code","581102d6":"code","1948f667":"code","adff8d94":"code","bd5bbd1f":"code","307c3661":"code","c8184de2":"code","6441d895":"code","4b058623":"code","cd8f4b84":"code","e2074ef4":"code","97981dae":"code","7096c813":"code","cb4471a6":"code","e66212c4":"code","9d35f12c":"code","60c2c462":"code","263ffb41":"code","ceceaecf":"markdown","dc2b6f33":"markdown","3d42e304":"markdown","3c89b9e0":"markdown","86e1a36a":"markdown","8e5c9ef6":"markdown","3a0600a8":"markdown","6490caa0":"markdown","2f300127":"markdown","c2210ec3":"markdown","7ab0f974":"markdown","efd859d8":"markdown","7a056fba":"markdown","4eb8dd85":"markdown","89aa686f":"markdown","8f6dba3c":"markdown","ac475f0f":"markdown","b37003b9":"markdown","b05fb47f":"markdown","e9141105":"markdown","c48d05d5":"markdown"},"source":{"bb1a0cac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os","2eb34126":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\n\nfrom keras.utils import to_categorical, Sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import RMSprop,Adam","5ba46f5b":"path = '\/kaggle\/input\/cassava-leaf-disease-classification\/'\n","22e9914f":"train_data = pd.read_csv(path+'train.csv')\nsamp_subm = pd.read_csv(path+'sample_submission.csv')","6554a500":"train_data.head()","d329b103":"print('number of train data:', len(train_data))\nprint('number of train images:', len(os.listdir(path+'train_images\/')))\nprint('number of test images:', len(os.listdir(path+'test_images\/')))","8941a60f":"train_data['label'].hist(bins=4)","20572e84":"!ls '\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\/'","a28a96db":"img = cv2.imread(path+'train_images\/'+'2519147193.jpg')\nplt.imshow(img)\nplt.show()","361c0b83":"train_data[train_data['image_id']=='2519147193.jpg']","de0f18d0":"train_data.info()","8632788c":"class_label = {\n    0: \"Cassava Bacterial Blight (CBB)\",\n    1: \"Cassava Brown Streak Disease (CBSD)\",\n    2: \"Cassava Green Mottle (CGM)\",\n    3: \"Cassava Mosaic Disease (CMD)\",\n    4: \"Healthy\"\n}","e35f8255":"train_data['class_name'] = train_data['label'].map(class_label)","329ae02c":"img = cv2.imread(path+'train_images\/'+'1000201771.jpg')\nplt.imshow(img)\nplt.show()","753591b0":"def visualize_batch(image_ids, labels):\n    plt.figure(figsize=(16, 12))\n    \n    for ind, (image_id, label) in enumerate(zip(image_ids, labels)):\n        plt.subplot(3, 3, ind + 1)\n        image = cv2.imread(os.path.join(path, \"train_images\", image_id))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n        plt.imshow(image)\n        plt.title(f\"Class: {label}\", fontsize=12)\n        plt.axis(\"off\")\n    \n    plt.show()","d843ddf2":"tmp_df = train_data.sample(9)\nimage_ids = tmp_df[\"image_id\"].values\nlabels = tmp_df[\"class_name\"].values\n\nvisualize_batch(image_ids, labels)","8c1050e1":"tmp_df = train_data[train_data[\"label\"] == 0]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image_id\"].values\nlabels = tmp_df[\"label\"].values\n\nvisualize_batch(image_ids, labels)","0ef20371":"tmp_df = train_data[train_data[\"label\"] == 1]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image_id\"].values\nlabels = tmp_df[\"label\"].values\n\nvisualize_batch(image_ids, labels)","581102d6":"tmp_df = train_data[train_data[\"label\"] == 2]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image_id\"].values\nlabels = tmp_df[\"label\"].values\n\nvisualize_batch(image_ids, labels)","1948f667":"tmp_df = train_data[train_data[\"label\"] == 3]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image_id\"].values\nlabels = tmp_df[\"label\"].values\n\nvisualize_batch(image_ids, labels)","adff8d94":"tmp_df = train_data[train_data[\"label\"] == 4]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image_id\"].values\nlabels = tmp_df[\"label\"].values\n\nvisualize_batch(image_ids, labels)","bd5bbd1f":"batch_size = 3\nimg_size = 64\nimg_channel = 3\nepochs = 5","307c3661":"to_categorical(train_data['label']) ## Convert into One hot encoded vector of 1 * 4 ","c8184de2":"y_train =to_categorical(train_data['label'])","6441d895":"class_weight = dict(zip(range(0, 7), (train_data['label'].value_counts()\/len(train_data))))","4b058623":"train_data['label'].value_counts()","cd8f4b84":"dict(zip(range(0, 7), (train_data['label'].value_counts()\/len(train_data))))","e2074ef4":"class_weight = dict(zip(range(0, 7), (train_data['label'].value_counts()\/len(train_data))))","97981dae":"class DataGenerator(Sequence):\n    def __init__(self, path, list_IDs, labels, batch_size, img_size, img_channel):\n        self.path = path\n        self.list_IDs = list_IDs\n        self.labels = labels\n        self.batch_size = batch_size\n        self.img_size = img_size\n        self.img_channel = img_channel\n        self.indexes = np.arange(len(self.list_IDs))\n        \n    def __len__(self):\n        return int(np.floor(len(self.list_IDs)\/self.batch_size))\n    \n    \n    def __getitem__(self, index):\n        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n        list_IDs_temp = [self.list_IDs[k] for k in indexes]\n        X, y = self.__data_generation(list_IDs_temp)\n        return X, y\n\n    \n    def __data_generation(self, list_IDs_temp):\n        X = np.empty((self.batch_size, self.img_size, self.img_size, self.img_channel))\n        y = np.empty((self.batch_size, 5), dtype=int)\n        for i, ID in enumerate(list_IDs_temp):\n            data_file = cv2.imread(self.path+ID)\n            img = cv2.resize(data_file, (self.img_size, self.img_size))\n            X[i, ] = img\n            y[i, ] = self.labels[i]\n        X = X.astype('float32')\n        X -= X.mean()\n        X \/= X.std()\n        return X, y","7096c813":"model = Sequential()\nmodel.add(Conv2D(128, input_shape=(img_size,img_size,img_channel), kernel_size=5, strides=4, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(4)))\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(5, activation='softmax'))","cb4471a6":"model.compile(optimizer=Adam(lr=1e-4), loss='categorical_crossentropy', metrics=['accuracy'])","e66212c4":"model.summary()","9d35f12c":"train_generator = DataGenerator(path+'train_images\/', train_data['image_id'], y_train, batch_size, img_size, img_channel)","60c2c462":"history = model.fit_generator(generator=train_generator,\n                              epochs = 3,\n                              class_weight = class_weight,\n                              workers=4)","263ffb41":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.utils.vis_utils import plot_model\n\nplot_model(model, show_shapes=True, show_layer_names=True)","ceceaecf":"## Observation - Above leaf is heathy one ","dc2b6f33":"# Model Architecture","3d42e304":"## Healthy Leaf images","3c89b9e0":"# Cassava Mosaic Disease (CMD) - Disease Sample ","86e1a36a":"## Class wights","8e5c9ef6":"\n\n\n# Introduction\n\n\nCassava Leaf Diseases in the dataset are \n\nThere are 5 classifications :\n* 0: [Cassava Bacterial Blight (CBB)](https:\/\/en.wikipedia.org\/wiki\/Bacterial_blight_of_cassava)\n* 1: [Cassava Brown Streak Disease (CBSD)](https:\/\/en.wikipedia.org\/wiki\/Cassava_brown_streak_virus_disease)\n* 2: [Cassava Green Mottle (CGM)](https:\/\/en.wikipedia.org\/wiki\/Cassava_green_mottle_virus)\n* 3: [Cassava Mosaic Disease (CMD)](https:\/\/en.wikipedia.org\/wiki\/Cassava_mosaic_virus)\n* 4: Healthy leaf\n\n","3a0600a8":" # \ud83d\udd25\ud83d\udd25\ud83d\udd25 Cassava \ud83c\udf42 Disease Classification - EDA + BL Model \ud83d\udd25\ud83d\udd25\ud83d\udd25","6490caa0":"## Training Phase","2f300127":"# Exploratory Data Analysis","c2210ec3":"# Cassava Bacterial Blight (CBB) - Disease sample ","7ab0f974":"# Cassava Green Mottle (CGM) - Disease Sample","efd859d8":"## Observation - For sure its an imbalance multi Class classification problem ","7a056fba":"## Hyperparams ","4eb8dd85":"## Observation - Above leaf is infected with Cassava Green Mottle (CGM) disease ","89aa686f":"## Next Transfer learning approch to improve the accuracy of the model","8f6dba3c":"# Let see the distribution of labled data","ac475f0f":"# Defining Dataset Class for building model","b37003b9":"# \ud83d\ude4c \ud83d\ude0a \ud83d\udc4d Upvote if you find this Kernal useful ","b05fb47f":"## Thanks to https:\/\/www.kaggle.com\/drcapa\/cassava-leaf-disease-classification-starter-keras kernal  ","e9141105":"## Model Architecture ","c48d05d5":"# Cassava Brown Streak Disease (CBSD) - Disease Sample"}}