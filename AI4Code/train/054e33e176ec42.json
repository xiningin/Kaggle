{"cell_type":{"545e2d8a":"code","3cbedd08":"code","f99cb003":"code","4792967d":"code","ecf15241":"code","00893fdd":"code","2593946f":"code","1c43794d":"code","9c6f00e4":"code","a21f5494":"code","ae97a4dd":"code","c0b0fc57":"code","36c7da6a":"code","389dbab9":"code","52f0ebc9":"code","2211f52f":"code","b1f5504c":"code","7f6299a8":"code","421075aa":"code","bfcbb67b":"code","ab119fba":"code","7deda08a":"code","8906886d":"code","01ec1712":"code","e8b32b20":"code","ee7ee11f":"code","a57cd7d5":"code","9e5e2e59":"code","97cbadac":"code","ba0c19d6":"code","8a12f2c1":"code","5a58019a":"code","71106cf7":"code","ba94e30d":"code","06c0d210":"code","7e66a50d":"code","a7ac43b0":"code","d05b3e1b":"code","1ba642ca":"code","b7e691b7":"code","dda0595f":"code","5b09beba":"code","6eac0970":"code","b8674932":"code","076c9c29":"markdown","4e5cca37":"markdown","c9485b1b":"markdown","832c9fd5":"markdown","377ccd49":"markdown","62de83a9":"markdown","8613ee3c":"markdown"},"source":{"545e2d8a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport pprint\n\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV, PredefinedSplit, cross_val_score\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, FunctionTransformer\nfrom sklearn.metrics import mean_squared_log_error, make_scorer\nfrom hpsklearn import HyperoptEstimator, svr, svr_linear, svr_rbf, svr_poly, svr_sigmoid, knn_regression, ada_boost_regression, gradient_boosting_regression, random_forest_regression, extra_trees_regression, sgd_regression, xgboost_regression","3cbedd08":"pd.set_option('display.max_columns', 100)\npd.set_option(\"display.max_rows\", 400)\nrandom_state = 42","f99cb003":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\ndf_target = df_train[['SalePrice']]\ndf = df_train.append(df_test)\ndf.drop(columns=['Id'], inplace=True)","4792967d":"## Function to mount info about df current.\ndef mount_df_info(df):\n    df_info = df.dtypes.to_frame(name='type')\n    df_info['count_null'] = df.isnull().values.sum(axis=0)\n    df_info['nunique'] = df.nunique().values\n    df_info['count_zeros'] = (df == 0).values.sum(axis=0)\n    df_info['max_value'] = df.max()\n    df_info['min_value'] = df.min()\n    \n    return df_info","ecf15241":"df_info = mount_df_info(df)\ndf_info.sort_values(by='count_null', ascending=False).head()","00893fdd":"columns = ['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu']\ndf[columns] = df[columns].fillna('nan')\ndf_info = mount_df_info(df)\ndf_info.sort_values(by='count_null', ascending=False).head()","2593946f":"df.loc[df[df['GarageYrBlt'] == 2207].index, 'GarageYrBlt'] = 2010\ndf['GarageYrBlt'] = df['GarageYrBlt'].fillna(0).astype(int)\n\ncolumns = ['GarageCond', 'GarageFinish', 'GarageQual', 'GarageType']\ndf[columns] = df[columns].fillna('nan')\ndf_info = mount_df_info(df)\ndf_info.sort_values(by='count_null', ascending=False).head()","1c43794d":"columns = ['BsmtCond', 'BsmtExposure', 'BsmtQual', 'BsmtFinType2', 'BsmtFinType1']\ndf[columns] = df[columns].fillna('nan')\ndf_info = mount_df_info(df)\ndf_info.sort_values(by='count_null', ascending=False).head()","9c6f00e4":"df[\"LotFrontage\"] = df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))\n\ncolumns = ['Electrical', 'KitchenQual', 'MSZoning', 'Exterior1st', 'Exterior2nd', 'SaleType']\n\nfor _column in columns:\n    df[_column] = df[_column].fillna(df[_column].mode()[0])\n\ncolumns = ['MasVnrArea', 'BsmtHalfBath', 'BsmtFullBath', 'GarageArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'GarageCars']\ndf[columns] = df[columns].fillna(0)\n\ncolumns = ['MasVnrType', 'Functional', 'Utilities']\ndf[columns] = df[columns].fillna('nan')\n\ndf_info = mount_df_info(df)\ndf_info.sort_values(by='nunique', ascending=False).head()","a21f5494":"columns_disc = ['MSSubClass', 'MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n                'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle',\n                'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation', 'BsmtExposure', 'BsmtFinType1',\n                'BsmtFinType2', 'Heating', 'CentralAir', 'Electrical', 'Functional', 'GarageType', 'GarageFinish',\n                'PavedDrive', 'Fence', 'MiscFeature', 'SaleType', 'SaleCondition']\n\ncolumns_disc_qual = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'HeatingQC', 'KitchenQual', 'FireplaceQu',\n                        'GarageQual', 'GarageCond', 'PoolQC']\n\ncolumns_cont = ['LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',\n               'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n               'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF',\n               'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal']\n\ncolumns_year = ['YearBuilt', 'GarageYrBlt', 'YearRemodAdd', 'YrSold', 'MoSold']\n\nprint('Columns disc', len(columns_disc))\nprint('Columns disc to cont', len(columns_disc_qual))\nprint('Columns cont', len(columns_cont))\nprint('Columns year', len(columns_year))","ae97a4dd":"columns_disc = columns_disc + columns_disc_qual","c0b0fc57":"df_test = df.iloc[df_train.shape[0]:]\ndf_train = df.iloc[:df_train.shape[0]]\nprint(df_train.shape)\nprint(df_test.shape)","36c7da6a":"fig, axs = plt.subplots(len(columns_cont) \/\/ 3 + 1, 3, figsize=(18, 40))\ni = 0\ncorr_with_sales_price = df_train[columns_cont + ['SalePrice']].corr(method='spearman')['SalePrice'].sort_values(ascending=False)\n\nfor _column in corr_with_sales_price.index[1:]:\n    _ax = axs[i\/\/3, i%3]\n    _ax.boxplot(df_train[_column], whis=3)\n    _ax.set_title(f'{_column} - {corr_with_sales_price[_column]}')\n    i+=1\n","389dbab9":"fig, axs = plt.subplots(len(columns_disc) \/\/ 3 + 1, 3, figsize=(18, 60))\ni = 0\n\nfor _column in columns_disc:\n    _ax = axs[i\/\/3, i%3]\n    _ax.hist(df_train[_column])\n    _ax.set_title(f'{_column}')\n    i+=1\n    ","52f0ebc9":"df_corr_disc = pd.DataFrame(columns=['feature', 'value', 'corr_with_sale_prices', 'count'])\n\nfor _feature in columns_disc:\n    df_temp = pd.get_dummies(df_train[_feature])\n\n    for _column in df_temp.columns:\n        _corr = stats.pointbiserialr(df_temp[_column], df_train['SalePrice'])\n        df_corr_disc = df_corr_disc.append({'feature': _feature, 'value': _column, 'corr_with_sale_prices': _corr[0], 'count': sum(df_temp[_column])}, ignore_index=True)\ndf_corr_disc.sort_values(by='corr_with_sale_prices')","2211f52f":"df_train['new_Fireplaces'] = df_train['Fireplaces'] * df_train['FireplaceQu'].map({'nan': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}).astype(int)\ndf['new_Fireplaces'] = df['Fireplaces'] * df['FireplaceQu'].map({'nan': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}).astype(int)\n\ndf_train[['new_Fireplaces', 'SalePrice']].corr(method='spearman')","b1f5504c":"df_temp = df_train[df_train['YearRemodAdd'] > df_train['YearBuilt']]\nplt.hist(df_temp['YearRemodAdd'] - df_temp['YearBuilt'], bins=30) #hist to see time remod after built (only build has remod) \nplt.show()\n\ndf_train['new_has_remod'] = df_train['YearRemodAdd'] > df_train['YearBuilt']\ndf_train['new_time_remod'] = df_train['YearRemodAdd'] - df_train['YearBuilt']\ndf['new_has_remod'] = df['YearRemodAdd'] > df['YearBuilt']\ndf['new_time_remod'] = df['YearRemodAdd'] - df['YearBuilt']\n\nprint(stats.pointbiserialr(df_train['new_has_remod'], df_train['SalePrice']))\ndf_train[['new_time_remod', 'SalePrice']].corr(method='spearman')","7f6299a8":"plt.hist(df_train['YrSold'] - df_train['YearBuilt'], bins=30)\nplt.show()\n\ndf_train['new_time_sold'] = df_train['YrSold'] - df_train['YearBuilt']\ndf['new_time_sold'] = df['YrSold'] - df['YearBuilt']\n\ndf_train[['new_time_sold', 'SalePrice']].corr(method='spearman')","421075aa":"df_train['new_garage_after_build'] = df_train['GarageYrBlt'] > df_train['YearBuilt']\ndf['new_garage_after_build'] = df['GarageYrBlt'] > df['YearBuilt']\n\nprint(stats.pointbiserialr(df_train['new_garage_after_build'], df_train['SalePrice']))","bfcbb67b":"df_train['new_totalSF'] = df_train['TotalBsmtSF'] + df_train['1stFlrSF'] + df_train['2ndFlrSF'] + df_train['GarageArea']\ndf['new_totalSF'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF'] + df['GarageArea']\n\ndf_train[['new_totalSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GarageArea', 'SalePrice']].corr(method='spearman')","ab119fba":"df_train['BsmtFullBath'] = df_train['BsmtFullBath'].astype(int)\ndf['BsmtFullBath'] = df['BsmtFullBath'].astype(int)\n\ndf_train['BsmtHalfBath'] = df_train['BsmtHalfBath'].astype(int)\ndf['BsmtHalfBath'] = df['BsmtHalfBath'].astype(int)\n\ndf_train['new_others_room'] = df_train['TotRmsAbvGrd'] - df_train['BedroomAbvGr'] - df_train['KitchenAbvGr']\ndf['new_others_room'] = df['TotRmsAbvGrd'] - df['BedroomAbvGr'] - df['KitchenAbvGr']\n\ndf_train['new_all_room'] = df_train['TotRmsAbvGrd'] + df_train['BsmtFullBath'] + df_train['BsmtHalfBath'] + df_train['FullBath'] + df_train['HalfBath']\ndf['new_all_room'] = df['TotRmsAbvGrd'] + df['BsmtFullBath'] + df['BsmtHalfBath'] + df['FullBath'] + df['HalfBath']\n\ndf_train[['TotRmsAbvGrd', 'BedroomAbvGr', 'KitchenAbvGr', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'new_others_room', 'new_all_room', 'SalePrice']].corr(method='spearman')","7deda08a":"_df_temp = pd.DataFrame()\n\nfor _columns in columns_disc_qual:\n    _df_temp[_columns] = df[_columns].map({'nan': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}).astype(int)\n    \ndf['new_overall'] = _df_temp[columns_disc_qual].sum(axis=1) \/ len(columns_disc_qual)","8906886d":"df.plot(kind='scatter', x='new_overall', y= 'OverallQual')","01ec1712":"columns_disc = ['MSSubClass', 'MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n                'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle',\n                'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation', 'BsmtExposure', 'BsmtFinType1',\n                'BsmtFinType2', 'Heating', 'CentralAir', 'Electrical', 'Functional', 'GarageType', 'GarageFinish',\n                'PavedDrive', 'Fence', 'MiscFeature', 'SaleType', 'SaleCondition', 'MoSold',\n                \n                'ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'HeatingQC', 'KitchenQual', 'FireplaceQu',\n                'GarageQual', 'GarageCond', 'PoolQC',\n                \n                'new_has_remod', 'new_garage_after_build']\n\n\ncolumns_cont = ['LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',\n               'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n               'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF',\n               'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n                \n                'new_Fireplaces', 'new_time_remod', 'new_time_sold', 'new_totalSF', 'new_others_room', 'new_all_room', 'new_overall']\n\ncolumns_year = ['YearBuilt', 'GarageYrBlt', 'YearRemodAdd', 'YrSold']\n\nprint('Columns disc', len(columns_disc))\nprint('Columns cont', len(columns_cont))\nprint('Columns year', len(columns_year))","e8b32b20":"columns_cont = columns_cont + columns_year","ee7ee11f":"oneHot = OneHotEncoder(handle_unknown='ignore')\ndf_onehot = oneHot.fit_transform(df[columns_disc])","a57cd7d5":"df_disc = pd.DataFrame.sparse.from_spmatrix(df_onehot, columns=oneHot.get_feature_names(df[columns_disc].columns)).astype(bool).reset_index()\ndf_cont = df[columns_cont].reset_index()\ndf_processed = pd.concat([df_cont, df_disc], sort=False, axis=1).drop(columns=['index'])","9e5e2e59":"standard = StandardScaler()\ndf_processed[columns_cont] = standard.fit_transform(df_processed[columns_cont])\n\ntransformer = FunctionTransformer(np.log1p)\ndf_target = transformer.transform(df_target)","97cbadac":"df_processed[columns_cont].hist(figsize=(18,30))\nplt.show()","ba0c19d6":"df_train = df_processed.iloc[:df_train.shape[0]]\ndf_test = df_processed.iloc[df_train.shape[0]:]\nprint(df_train.shape)\nprint(df_test.shape)","8a12f2c1":"def rmsqle(y, y_pred):\n    return np.sqrt(mean_squared_log_error(np.expm1(np.abs(y)), np.expm1(np.abs(y_pred))))","5a58019a":"def evaluate(model, _X_test, _y_test):\n    _y_pred = model.predict(_X_test)\n    return rmsqle(_y_test, _y_pred)","71106cf7":"def write_submission(_result):\n    df_to_submit = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\n    df_to_submit['SalePrice'] = np.expm1(_result)\n    df_to_submit.to_csv('\/kaggle\/working\/to_submit.csv', index=False)\n    df_to_submit.head()","ba94e30d":"rmsqle_score = make_scorer(rmsqle, greater_is_better=False)","06c0d210":"columns_to_drop = ['MSSubClass_150', 'Utilities_nan', 'Functional_nan']\ndf_train.drop(columns=columns_to_drop, inplace=True)\ndf_test.drop(columns=columns_to_drop, inplace=True)","7e66a50d":"X_train, X_test, y_train, y_test = train_test_split(df_train, df_target, test_size=0.25, random_state=random_state)","a7ac43b0":"from xgboost import XGBRegressor, plot_importance\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor","d05b3e1b":"xgb = XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213,\n                             random_state=7, nthread = -1)\n\nxgb.fit(X_train, y_train)\nprint(rmsqle(xgb.predict(X_test), y_test))","1ba642ca":"importances = pd.Series(xgb.feature_importances_, index=list(df[columns_cont].columns) + list(set(oneHot.get_feature_names(df[columns_disc].columns))- set(columns_to_drop)))\nimportances.sort_values(ascending=False).head(20) * 100","b7e691b7":"lgbm = LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\n\nlgbm.fit(X_train, y_train)\nprint(rmsqle(lgbm.predict(X_test), y_test))","dda0595f":"importances = pd.Series(lgbm.feature_importances_, index=list(df[columns_cont].columns) + list(set(oneHot.get_feature_names(df[columns_disc].columns))- set(columns_to_drop)))\nimportances.sort_values(ascending=False).head(20) * 100","5b09beba":"gradient = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\n\ngradient.fit(X_train, y_train)\nprint(rmsqle(gradient.predict(X_test), y_test))","6eac0970":"importances = pd.Series(gradient.feature_importances_, index=list(df[columns_cont].columns) + list(set(oneHot.get_feature_names(df[columns_disc].columns))- set(columns_to_drop)))\nimportances.sort_values(ascending=False).head(20) * 100","b8674932":"predict_xgb = xgb.predict(df_test)\npredict_lgbm = lgbm.predict(df_test)\npredict_gradient = gradient.predict(df_test)\n\npredict_final = (predict_lgbm * 0.30 + predict_xgb * 0.50 + predict_gradient * 0.20)\nwrite_submission(predict_final)","076c9c29":"**Clean Datas**\n\nIn the first step we will focus on filling in the null values, I did not choose to do some kind of automatic filling (average, mode, median ...). Let's do it in 'baby step', first we will treat the attributes with the highest amount of nulls.","4e5cca37":"YearBuilt: Original construction date\n\nYearRemodAdd: Remodel date (same as construction date if no remodeling or additions)\n\nGarageYrBlt: Year garage was built\n\nMoSold: Month Sold (MM)\n\nYrSold: Year Sold (YYYY)","c9485b1b":"**Exploratory analysis**\n\nLet's study the training data","832c9fd5":"Fireplaces: Number of fireplaces\n\nFireplaceQu: Fireplace quality\n\n       Ex\tExcellent - Exceptional Masonry Fireplace\n       Gd\tGood - Masonry Fireplace in main level\n       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n       Fa\tFair - Prefabricated Fireplace in basement\n       Po\tPoor - Ben Franklin Stove\n       NA\tNo Fireplace","377ccd49":"**XGBoost**","62de83a9":"TotalBsmtSF: Total square feet of basement area\n\n1stFlrSF: First Floor square feet\n \n2ndFlrSF: Second floor square feet\n\nGarageArea: Size of garage in square feet","8613ee3c":"Choosing the columns that we will use as features."}}