{"cell_type":{"bab4369c":"code","148fcd10":"code","b8118f21":"code","cf798821":"code","7e4d04e5":"code","6343794c":"code","e0d00714":"code","687ad85b":"code","8e8a4991":"code","692931ae":"code","70e84340":"code","e42d2ed3":"code","58281ee5":"code","392185f2":"code","e70ca604":"code","f85c4900":"code","1f67349e":"code","85354744":"code","919eddfc":"code","4abea9a7":"code","09d6487d":"code","e516d83e":"code","1edc0364":"code","97fc12b5":"code","06567725":"code","8d15b7c9":"code","aa7076cd":"code","06c1c1ca":"code","4fbf2d39":"code","d4e197a6":"code","1ae05099":"code","b2454de7":"code","fdfa7285":"code","71d25cdf":"code","8593f787":"code","6831231b":"code","29e40df6":"code","d94a481d":"code","f211b124":"markdown","989ca680":"markdown","25f10abb":"markdown","cb84866e":"markdown","8e898e12":"markdown","b30dfc57":"markdown","cd59f1fe":"markdown"},"source":{"bab4369c":"import os,cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 20, 10\n\nfrom sklearn.utils import shuffle\nfrom sklearn.cross_validation import train_test_split\n\nimport keras\n\nfrom keras.utils import np_utils\n\nfrom keras import backend as K\n\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Dropout, Activation, Flatten\nfrom keras.layers.convolutional import Convolution2D, MaxPooling2D\nfrom keras.optimizers import SGD,RMSprop,adam, Adadelta\nfrom keras.preprocessing.image import ImageDataGenerator\nimport pandas as pd","148fcd10":"import os\nfor dirname, _, filenames in os.walk('..\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b8118f21":"# get the data\nfilname = '..\/input\/facial-expression\/fer2013\/fer2013.csv'\nlabel_map = ['Anger', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\nnames=['emotion','pixels','usage']\ndf=pd.read_csv('..\/input\/facial-expression\/fer2013\/fer2013.csv',names=names, na_filter=False)\nim=df['pixels']\ndf.head(10)","cf798821":"a = df['emotion']\nidx = pd.Index(a)\ncount = idx.value_counts()\nprint(count)","7e4d04e5":"from keras.models import Sequential\nfrom keras.layers import Dense , Activation , Dropout ,Flatten\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.metrics import categorical_accuracy\nfrom keras.models import model_from_json\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.optimizers import *\nfrom keras.layers.normalization import BatchNormalization","6343794c":"def getData(filname):\n    # images are 48x48\n    # N = 35887\n    Y = []\n    X = []\n    first = True\n    for line in open(filname):\n        #This condition skips the first condition\n        if first:\n            first = False\n        else:\n            row = line.split(',')\n            Y.append(int(row[0]))\n            X.append([int(p) for p in row[1].split()])\n\n    #X, Y = np.array(X) \/ 255.0, np.array(Y)\n    X, Y = np.array(X)\/255.0 , np.array(Y)\n    return X, Y","e0d00714":"X, Y = getData(filname)\nnum_class = len(set(Y))\nprint(num_class)","687ad85b":"X.shape","8e8a4991":"# keras with tensorflow backend\nN,D = X.shape\nX = X.reshape(N, 48, 48, 1)","692931ae":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\ny_train = (np.arange(num_class) == y_train[:, None]).astype(np.float32)\ny_test = (np.arange(num_class) == y_test[:, None]).astype(np.float32)","70e84340":"img = X_train[780].reshape(48,48)\nplt.imshow(img, interpolation='nearest')\nplt.show()","e42d2ed3":"from keras.applications import VGG19\n#Load the VGG model\nvgg_conv = VGG19(weights=None, include_top=False, input_shape=(48, 48,1))","58281ee5":"def vgg_custom():\n    model = Sequential()\n    #add vgg conv model\n    model.add(vgg_conv)\n    \n    #add new layers\n    model.add(Flatten())\n    model.add(Dense(7,  kernel_initializer='normal'))\n    model.compile(loss='mean_squared_error', optimizer=Adadelta())\n    #model.compile(loss='mean_squared_error', optimizer=Adam())\n    \n    return model","392185f2":"model = vgg_custom()\nmodel.summary()","e70ca604":"from keras import callbacks\nfilename='model_train_new.csv'\nfilepath=\"Best-weights-my_model-{epoch:03d}-{loss:.4f}-{acc:.4f}.hdf5\"\n\ncsv_log=callbacks.CSVLogger(filename, separator=',', append=False)\ncheckpoint = callbacks.ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\ncallbacks_list = [csv_log,checkpoint]\ncallbacks_list = [csv_log]","f85c4900":"aug = ImageDataGenerator(\n    rotation_range=25, width_shift_range=0.1,\n    height_shift_range=0.1, shear_range=0.2, \n    zoom_range=0.2,horizontal_flip=True, \n    fill_mode=\"nearest\")","1f67349e":"BS =8\nEPOCHS = 50","85354744":"len(X_train)","919eddfc":"history = model.fit(\n    X_train, y_train, batch_size=BS,\n    validation_data=(X_test, y_test),\n    epochs=EPOCHS, verbose=1,\n    callbacks = callbacks_list \n    ,shuffle = True\n    )","4abea9a7":"#Model Save\nmodel.save_weights('model_weights.h5')\nmodel.save('model_keras.h5')","09d6487d":"hist = history","e516d83e":"# visualizing losses and accuracy\n# %matplotlib inline\n\ntrain_loss=hist.history['loss']\nval_loss=hist.history['val_loss']\n#train_acc=hist.history['acc']\n#val_acc=hist.history['val_acc']\n\nepochs = range(len(val_loss))\n\nplt.plot(epochs,train_loss,'r-o', label='train_loss')\nplt.plot(epochs,val_loss,'b', label='val_loss')\nplt.title('train_loss vs val_loss')\n#plt.plot(epochs,train_loss,'r-o', label='train_acc')\n#plt.plot(epochs,val_loss,'b', label='val_acc')\n#plt.title('train_acc vs val_acc')\nplt.title('train_loss vs val_loss')\nplt.legend()\nplt.figure()\n#plt.savefig('train_test_acc.png')\nplt.savefig('train_test.png')","1edc0364":"train_acc=hist.history['acc']\nval_acc=hist.history['val_acc']\nepochs=range(len(val_acc))\nplt.plot(epochs,train_acc,'r-o', label='train_acc')\nplt.plot(epochs, val_acc,'b', label='val_acc')\nplt.title('train_acc vs val_acc')\nplt.legend()\nplt.figure()\nplt.savefig('Acc_Train_Val.png')","97fc12b5":"print(train_loss)","06567725":"print(val_loss)","8d15b7c9":"# Evaluating the model\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('Test Loss:', score)\n\ntest_image = X_test[0:1]\nprint (test_image.shape)\n\n#predict\ny_pred = model.predict(X_test) \n\nprint(model.predict(test_image))\nprint(model.predict_classes(test_image))\nprint(y_test[0:1])\n\nres = model.predict_classes(X_test[9:18])\nplt.figure(figsize=(10, 10))","aa7076cd":"from sklearn.metrics import confusion_matrix\nresults = model.predict_classes(X_test)\ncm = confusion_matrix(np.where(y_test == 1)[1], results)\n#cm = cm.astype(np.float) \/ cm.sum(axis=1)[:, np.newaxis]","06c1c1ca":"import seaborn as sns","4fbf2d39":"label_mapdisgust = ['Anger', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']","d4e197a6":"#Transform to df for easier plotting\ncm_df = pd.DataFrame(cm, index = label_mapdisgust,\n                     columns = label_mapdisgust\n                    )","1ae05099":"final_cm = cm_df.drop('Disgust',axis=0)\nfinal_cm = final_cm.drop('Disgust',axis=1)","b2454de7":"final_cm","fdfa7285":"plt.figure(figsize = (5,5))\nsns.heatmap(final_cm, annot = True,cmap='Greys',cbar=False,linewidth=2,fmt='d')\nplt.title('CNN Emotion Classify')\nplt.ylabel('True class')\nplt.xlabel('Prediction class')\nplt.show()","71d25cdf":"from sklearn.metrics import roc_curve,auc\nfrom itertools import cycle","8593f787":"new_label = ['Anger', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\nfinal_label = new_label\nnew_class = 6","6831231b":"#ravel flatten the array into single vector\ny_pred_ravel = y_pred.ravel()\nlw = 2","29e40df6":"fpr = dict()\ntpr = dict()\nroc_auc = dict()\n\nfor i in range(new_class):\n    fpr[i], tpr[i], _ = roc_curve(y_test[:,i], y_pred[:,i])\n    roc_auc[i] = auc(fpr[i], tpr[i])\n    \n#colors = cycle(['red', 'green','black'])\ncolors = cycle(['red', 'green','black','blue', 'yellow','purple'])\nfor i, color in zip(range(new_class), colors):\n    plt.plot(fpr[i], tpr[i], color=color, lw=lw,\n             label='ROC curve of class {0}'''.format(final_label[i]))\n    \n\nplt.plot([0, 1], [0, 1], 'k--', lw=lw)\nplt.xlim([0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","d94a481d":"#keras.optimizers.SGD(learning_rate=0.01, momentum=0.0, nesterov=False)\n#keras.optimizers.RMSprop(learning_rate=0.001, rho=0.9)\n#keras.optimizers.Adagrad(learning_rate=0.01)\n#keras.optimizers.Adadelta(learning_rate=1.0, rho=0.95)\n#keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, amsgrad=False)\n#keras.optimizers.Adamax(learning_rate=0.002, beta_1=0.9, beta_2=0.999)\n#keras.optimizers.Nadam(learning_rate=0.002, beta_1=0.9, beta_2=0.999)","f211b124":"Image Augmentation","989ca680":"Define Batch Size and Epoch iteration","25f10abb":"**Split Train Test data**","cb84866e":"Fit augmentated Data into model","8e898e12":"Preprocess Image to detect only face","b30dfc57":"Confusion Matrix","cd59f1fe":"ROC Curve"}}