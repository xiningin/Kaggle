{"cell_type":{"b4f4e49d":"code","4c58452c":"code","6be78c4a":"code","47768045":"code","7c4d3107":"code","aa6a1259":"code","552a34b0":"code","ec5268eb":"code","1e5101d5":"code","cde41dfa":"code","70c4fbb7":"code","d0b27147":"code","e1f55528":"code","3db4fcc7":"code","acafccda":"code","39591c25":"code","bbf5985b":"code","d615094b":"code","2b6f49f6":"code","f5f4e05d":"code","988c0dd5":"code","86c88879":"code","7efcc5c6":"code","8f57aa2c":"code","6012de6d":"code","ce960656":"code","1f2174a3":"code","9538cc65":"code","3a294a47":"code","2c59647a":"code","49bb1863":"code","55adc71a":"code","c540b47a":"code","3a5cc6ef":"code","49e7261a":"code","cf84acab":"code","711c1eef":"code","933d1adf":"code","7971cf45":"code","236df4c8":"code","c1e5fd9a":"code","1e0d92ad":"code","1a016b82":"code","bfe1c536":"code","26e3aecd":"code","9a9dede0":"code","6ef39e02":"code","d0cab435":"code","0ca43929":"code","e71254d7":"code","5a1614ba":"code","17c3f949":"code","a2b2b07c":"code","abda9fb0":"code","bbd104b3":"code","50c82306":"code","7a14ecb0":"code","77c3f256":"code","69c339bb":"code","b6efc910":"code","15c8cba7":"code","093902b0":"code","a0ee13d3":"code","d57d861b":"code","1a359ec6":"code","e2bfe9ee":"code","60eb1039":"code","69cc693a":"code","58385ead":"code","bdebbabe":"code","1165be64":"code","e4546701":"code","2758b280":"code","c5512fa5":"code","fe501405":"code","6b901533":"code","36613c37":"code","2cf8b1dc":"code","78ec9fa4":"code","8a4b4edf":"code","21dbfc38":"code","f50a6e7e":"code","0c163f3d":"code","aec3f850":"code","d1f1828c":"code","936173ce":"code","2e2b9b44":"markdown"},"source":{"b4f4e49d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4c58452c":"# Import and merge the Months data Show list\nxlsxFile1 = '\/kaggle\/input\/ad-data-from-ld\/Project Data_ Month 1.xlsx'\ndf1 = pd.read_excel(xlsxFile1)\nxlsxFile2 = '\/kaggle\/input\/ad-data-from-ld\/Project Data_ Month 2.xlsx'\ndf2 = pd.read_excel(xlsxFile2)\nxlsxFile3 = '\/kaggle\/input\/ad-data-from-ld\/Project Data_ Month 3.xlsx'\ndf3 = pd.read_excel(xlsxFile3)\nframes = [df1, df2, df3]\ndf=pd.concat(frames)\ndf.head()","6be78c4a":"df.dtypes","47768045":"import pandas_profiling\ndf.profile_report(title='Ad dataset')","7c4d3107":"# convert creative_id int to object\ndf.creative_id=df.creative_id.astype(str)\ndf.ad_unit_id=df.ad_unit_id.astype(str)","aa6a1259":"df.dtypes","552a34b0":"# Get some general information about dataframe:\ndf.describe()","ec5268eb":"df.groupby('device').size()","1e5101d5":"df.groupby('device').sum()[['conversions']]","cde41dfa":"df['creative_id'].describe()","70c4fbb7":"df['ad_unit_id'].describe()","d0b27147":"# Determine if ANY Value in df is Missing\ndf.isnull().values.any()","e1f55528":"\ndf['creative_id']=df['creative_id'].astype('category').cat.codes\ndf['ad_unit_id']=df['ad_unit_id'].astype('category').cat.codes","3db4fcc7":"df['Year'] = pd.DatetimeIndex(df['date']).year\ndf['Month'] = pd.DatetimeIndex(df['date']).month\ndf['Day'] = pd.DatetimeIndex(df['date']).day\ndf['Weekday'] = pd.DatetimeIndex(df['date']).weekday\ndf.head()","acafccda":"# Weekdays start with 0 (Monday) thru 6 (Sunday)\nweekdayList = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']","39591c25":"df.groupby('device').size().sort_values(ascending=False).plot(kind='bar')","bbf5985b":"df.groupby('device').publisher_split.sum().sort_values(ascending=False).plot(kind='bar')","d615094b":"df.groupby('device').conversions.sum().sort_values(ascending=False).plot(kind='bar')","2b6f49f6":"ds=df.groupby('device')['impressions','referrals','conversions','publisher_split'].sum()\nds['r\/i']=(ds['referrals']\/ds['impressions']).replace(np.nan,0)\nds['c\/r']=(ds['conversions']\/ds['referrals']).replace(np.nan,0)\nds['p\/c']=(ds['publisher_split']\/ds['conversions']).replace(np.nan,0)\nds['r\/i']=ds['r\/i'].replace(np.inf,0)\nds['c\/r']=ds['c\/r'].replace(np.inf,0)\nds['p\/c']=ds['p\/c'].replace(np.inf,0)\nds.head()","f5f4e05d":"ax=ds.plot(kind='bar',y='conversions')\nds.plot(kind='line',y='p\/c',color='red',secondary_y=True, ax=ax)","988c0dd5":"ax=ds.plot(kind='bar',y='r\/i')\nds.plot(kind='line',y='c\/r',color='red',secondary_y=True, ax=ax)","86c88879":"df['r\/i']=(df['referrals']\/df['impressions']).replace(np.nan,0)\ndf['c\/r']=(df['conversions']\/df['referrals']).replace(np.nan,0)\ndf['p\/c']=(df['publisher_split']\/df['conversions']).replace(np.nan,0)\ndf['r\/i']=df['r\/i'].replace(np.inf,0)\ndf['c\/r']=df['c\/r'].replace(np.inf,0)\ndf['p\/c']=df['p\/c'].replace(np.inf,0)\ndf.head()","7efcc5c6":"df.groupby('Weekday')['conversions'].sum().plot(kind='line')","8f57aa2c":"df.groupby(['Weekday','device']).conversions.sum().unstack()","6012de6d":"df.groupby(['Weekday','device']).conversions.sum().unstack('device').plot()","ce960656":"dwc=df.groupby(['Weekday','creative_id']).conversions.sum().unstack('creative_id')\nidcx=dwc.sum(axis=0).sort_values(ascending=False).head(5).index\ndwc[idcx].head()","1f2174a3":"dwc[idcx].plot()","9538cc65":"dwa=df.groupby(['Weekday','ad_unit_id']).conversions.sum().unstack('ad_unit_id')\nidax=dwa.sum(axis=0).sort_values(ascending=False).head(5).index\ndwa[idax].plot()","3a294a47":"dc=df.groupby('creative_id')['impressions','referrals','conversions'].sum()\ndc['r\/i']=(dc['referrals']\/dc['impressions']).replace(np.nan,0)\ndc['c\/r']=(dc['conversions']\/dc['referrals']).replace(np.nan,0)\ndc=dc.reset_index()\ndc=dc.sort_values(by='conversions',ascending=False)\ndc=dc.loc[dc['conversions']>0]\ndc.head()","2c59647a":"dc.plot(kind='bar',x='creative_id',y='conversions')","49bb1863":"dc=dc.sort_values(by='c\/r',ascending=False)\ndc.plot(kind='bar',x='creative_id',y='c\/r')","55adc71a":"da=df.groupby('ad_unit_id')['impressions','referrals','conversions'].sum()\nda['r\/i']=(da['referrals']\/da['impressions']).replace(np.nan,0)\nda['c\/r']=(da['conversions']\/da['referrals']).replace(np.nan,0)\nda=da.reset_index()\nda=da.sort_values(by='conversions',ascending=False)\nda=da.loc[da['conversions']>50]\nda.head()","c540b47a":"da.plot(kind='bar',x='ad_unit_id',y='conversions')","3a5cc6ef":"da=da.sort_values(by='c\/r',ascending=False)\nda.plot(kind='bar',x='ad_unit_id',y='c\/r')","49e7261a":"dset=['Desktop','Mobile','Other','Tablet']\nfor i in dset:\n    df[i]=np.where(df['device']==i, 1, 0)\ndf.head()","cf84acab":"dt=df.groupby('date')['impressions','referrals','conversions'].sum()\ndt.head()","711c1eef":"ax=dt.plot(kind='line',y='conversions')\ndt.plot(kind='line',y='impressions',color='red',secondary_y=True, ax=ax)","933d1adf":"ax=dt.plot(kind='line',y='conversions')\ndt.plot(kind='line',y='referrals',color='red',secondary_y=True, ax=ax)","7971cf45":"df.groupby(['date','device']).conversions.sum().unstack('device').plot()","236df4c8":"dc=df.groupby(['date','creative_id']).conversions.sum().unstack('creative_id')\nidx=dc.sum(axis=0).sort_values(ascending=False).head(5).index\ndc[idx].head()","c1e5fd9a":"dc[idx].plot()","1e0d92ad":"da=df.groupby(['date','ad_unit_id']).conversions.sum().unstack('ad_unit_id')\nidx=da.sum(axis=0).sort_values(ascending=False).head(5).index\nda[idx].head()","1a016b82":"da[idx].plot()","bfe1c536":"# Check correlation of variables \ncorr=df.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","26e3aecd":"df.groupby('conversions').size()","9a9dede0":"dfn=df.copy()\ndfn['conversions'][dfn['conversions'] > 1] = 1\ndfn.groupby('conversions').size()","6ef39e02":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x='conversions',data=dfn)","d0cab435":"dfn['logimpressions']=np.log(dfn['impressions'])\ndfn['logreferrals']=np.log(dfn['referrals'])\ndfn['logpublisher_split']=np.log(dfn['publisher_split'])\ndfn.head()","0ca43929":"def plot_distribution( df , var , target , **kwargs ):\n    row = kwargs.get( 'row' , None )\n    col = kwargs.get( 'col' , None )\n    facet = sns.FacetGrid( df , hue=target , aspect=4 , row = row , col = col )\n    facet.map( sns.kdeplot , var , shade= True )\n    facet.set( xlim=( 0 , df[ var ].quantile(1) ) )\n    facet.add_legend()","e71254d7":"plot_distribution( dfn , var = 'logreferrals' , target = 'conversions'  )","5a1614ba":"plot_distribution( dfn , var = 'logimpressions' , target = 'conversions'  )","17c3f949":"\nplot_distribution( dfn , var = 'logpublisher_split' , target = 'conversions'  )","a2b2b07c":"dfx=df[df['conversions']>0].copy()\n","abda9fb0":"%matplotlib inline\ndfx.boxplot(column=['impressions','referrals'])","bbd104b3":"dfx['logimpressions']=np.log(dfx['impressions'])\ndfx['logreferrals']=np.log(dfx['referrals'])\ndfx.head()","50c82306":"dfx.boxplot(column=['logimpressions','logreferrals'])","7a14ecb0":"dfx['impressions'].quantile([0,0.25, 0.5,0.75, 1])","77c3f256":"dfx['referrals'].quantile([0,0.25,0.5,0.75,1])","69c339bb":"# filter the outliers\ndfx1=dfx.loc[(dfx['impressions']>690) & (dfx['impressions']<9116.5)].copy()\ndfx1.boxplot(column=['impressions'])","b6efc910":"dfx1=dfx1.loc[(dfx1['referrals']>12) & (dfx1['referrals']< 149)].copy()\ndfx1.boxplot(column=['referrals'])","15c8cba7":"from matplotlib import pyplot as plt\nplt.scatter(dfx.logimpressions,dfx.logreferrals)","093902b0":"plt.scatter(dfx1.impressions,dfx1.referrals)","a0ee13d3":"plot_distribution( dfx1 , var = 'referrals' , target = 'conversions'  )","d57d861b":"plot_distribution( dfx , var = 'logreferrals' , target = 'conversions'  )","1a359ec6":"corr=dfx.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","e2bfe9ee":"# Linear Regression\nimport statsmodels.api as sm\nx=dfx1[['impressions','referrals','publisher_split']]\ny=dfx1['conversions']\nmodel = sm.OLS(y, x).fit()\nmodel.summary()","60eb1039":"# Logistice Regression\ndfn=df.copy()\ndfn['conversions'][dfn['conversions'] > 1] = 1\ndfn.groupby('conversions').size()","69cc693a":"dfn.groupby('conversions').size().plot.bar()","58385ead":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics \nfrom sklearn.metrics import classification_report","bdebbabe":"dfn.conversions=dfn.conversions.astype(str)","1165be64":"dft = dfn.iloc[:,4:8].copy()\ndft.head()","e4546701":"datatest0=dft[dft['conversions']=='0'].copy()\ndatatest1=dft[dft['conversions']=='1'].copy()","2758b280":"# Ramdomly select the same number rows from 'conversions' = 0 column\ndatatest0 = datatest0.sample(n=4676)","c5512fa5":"frames = [datatest0, datatest1]\ndatatest = pd.concat(frames)","fe501405":"Xl = datatest.iloc[:,0:3].values\nyl = datatest.iloc[:,3].values","6b901533":"Xl_train, Xl_test, yl_train, yl_test = train_test_split(Xl, yl, test_size = .3, random_state=25)","36613c37":"LogReg = LogisticRegression()\nLogReg.fit(Xl_train, yl_train)","2cf8b1dc":"yl_pred = LogReg.predict(Xl_test)","78ec9fa4":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(yl_test, yl_pred)\n","8a4b4edf":"print(classification_report(yl_test, yl_pred))","21dbfc38":"# Decision Tree Model\nfrom sklearn.tree import DecisionTreeClassifier  \nclassifier = DecisionTreeClassifier()  \nclassifier.fit(Xl_train, yl_train)  ","f50a6e7e":"yl_pred = classifier.predict(Xl_test) ","0c163f3d":"from sklearn.metrics import classification_report, confusion_matrix  \nprint(confusion_matrix(yl_test, yl_pred))  \nprint(classification_report(yl_test, yl_pred))","aec3f850":"#naive_bayes\nfrom sklearn.naive_bayes import MultinomialNB  \nfrom sklearn.metrics import precision_recall_curve  \nfrom sklearn.metrics import classification_report","d1f1828c":"clf= MultinomialNB().fit(Xl_train, yl_train)\npre= clf.predict(Xl_test)\n","936173ce":"print(classification_report(yl_test, pre))","2e2b9b44":"In this project, I have three months of data from an ad platform. The features in the database are below:\n\n1.device: In the dataset, it has 4 types of devices users used to access the ad.\n\n2.creative_id: A creative is a piece of content used as an ad, with traits that can be measured and optimized, such as a headline, image, description, call-to-action text, landing page, etc.\n\n3.ad_unit_id: An ad unit represents a specific placement through which an ad can be served.\n\n4.publisher_split: the cost to the platform serving the ad\n\n5.impressions: when an ad is shown to a user\n\n6.referrals: when a user clicks on an ad and hits an advertiser\u2019s landing page\n\n7.conversions: an email submission or account creation, or the sale of a product\n"}}