{"cell_type":{"cc73e984":"code","5b0c6a50":"code","62505e1c":"code","9db16784":"code","88bbbdd6":"code","4038c207":"code","1a071430":"code","d1f49602":"code","a6fb667e":"code","39173e45":"code","6522146b":"code","ce0a5189":"code","0579c9c5":"code","6edc2867":"code","71a065ca":"code","b61e4d31":"code","dc3e8da8":"code","efffea55":"code","67a85c24":"code","2decc452":"code","52952fa5":"code","a905c6d9":"code","5d1e4910":"code","da953c10":"code","4dcc326a":"code","344dbb06":"code","3d2b818b":"code","2bfaf988":"code","368ec8e9":"markdown","4f269221":"markdown","2175a471":"markdown","7544d1ea":"markdown","85b6d745":"markdown","1017130e":"markdown","ae6d229d":"markdown"},"source":{"cc73e984":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","5b0c6a50":"data =pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","62505e1c":"data","9db16784":"data.isna().sum()","88bbbdd6":"data=data.drop('customerID',axis=1)","4038c207":"data","1a071430":"def get_uniques(df,columns):\n    return {column: list(df[column].unique())for column in columns}","d1f49602":"def get_categorical_columns(df):\n    return[column for column in df.columns if df.dtypes[column]=='object']","a6fb667e":"sorted(data['TotalCharges'].unique())","39173e45":"data['TotalCharges']=data['TotalCharges'].replace(' ',np.NaN)\ndata['TotalCharges']=data['TotalCharges'].astype(np.float)\ndata['TotalCharges']=data['TotalCharges'].fillna(data['TotalCharges'].mean())","6522146b":"get_uniques(data,get_categorical_columns(data))","ce0a5189":" data[['MultipleLines']]=data[['MultipleLines']].replace('No phone service','No')\n data[['InternetService','OnlineSecurity','OnlineBackup','DeviceProtection'\n       ,'TechSupport','StreamingTV','StreamingMovies','Contract']]=data[['InternetService','OnlineSecurity','OnlineBackup',\n                                                                         'DeviceProtection','TechSupport','StreamingTV','StreamingMovies','Contract']].replace('No internet service','No')","0579c9c5":"get_uniques(data,get_categorical_columns(data))","6edc2867":"binary_features=['gender','Partner', 'Dependents','PhoneService', 'MultipleLines',\n                 'OnlineSecurity', 'OnlineBackup','DeviceProtection','StreamingTV','StreamingMovies',\n                 'TechSupport' ,'PaperlessBilling']\n\nordinal_features=['InternetService','Contract']\n\nnominal_features=['PaymentMethod']\n\ntarget_column='Churn'","71a065ca":"internet_ordering=['No', 'DSL', 'Fiber optic']\ncontract_ordering=['Month-to-month', 'One year', 'Two year']","b61e4d31":"def binary_encode(df, column, positive_value):\n    df = df.copy()\n    df[column] = df[column].apply(lambda x: 1 if x == positive_value else 0)\n    return df\n\ndef ordinal_encode(df, column, ordering):\n    df = df.copy()\n    df[column] = df[column].apply(lambda x: ordering.index(x))\n    return df\n    \ndef onehot_encode(df, column):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column])\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","dc3e8da8":"data = binary_encode(data, 'gender', 'Male')\n\nyes_features = ['Partner', 'Dependents', 'PhoneService', 'MultipleLines',\n                'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n                'StreamingTV', 'StreamingMovies', 'PaperlessBilling']\n\nfor feature in yes_features:\n    data = binary_encode(data, feature, 'Yes')\n\n\ndata = ordinal_encode(data, 'InternetService', internet_ordering)\ndata = ordinal_encode(data, 'Contract', contract_ordering)\n\n\ndata = onehot_encode(data, 'PaymentMethod')","efffea55":"data","67a85c24":"data=binary_encode(data,'Churn','Yes')","2decc452":"data","52952fa5":"y= data['Churn']\nX= data.drop('Churn',axis=1)","a905c6d9":"scaler=StandardScaler()\n\nX=scaler.fit_transform(X)","5d1e4910":"X_train,X_test,y_train,y_test = train_test_split(X,y,train_size=0.8)","da953c10":"X.shape\n","4dcc326a":"y.sum()\/len(y)","344dbb06":"inputs = tf.keras.Input(shape=(22,))\nx = tf.keras.layers.Dense(64, activation='relu')(inputs)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=[tf.keras.metrics.AUC(name='auc')]\n)\n\n\nbatch_size = 64\nepochs = 10\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    verbose=0\n)","3d2b818b":"plt.figure(figsize=(14,10))\nepochs_range=range(1,epochs + 1)\ntrain_loss=history.history['loss']\nval_loss=history.history['val_loss']\nplt.plot(epochs_range,train_loss,label=\"Training Loss\")\nplt.plot(epochs_range,val_loss,label=\"Validation Loss\")\nplt.title(\"Training & Validation Loss\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\n\nplt.show()","2bfaf988":"model.evaluate(X_test,y_test)","368ec8e9":"# get_uniques(data,get_categorical_columns(data))","4f269221":"## Data Pre Processing","2175a471":"# Creating The Features Types","7544d1ea":"# Splitting and Scaling data","85b6d745":"# Results","1017130e":"## Replacing the space seen above with Null values, Converting it to float and Filling up the null values with the mean of the column","ae6d229d":"## Encoding"}}