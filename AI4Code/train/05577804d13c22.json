{"cell_type":{"69d01d12":"code","d2609d1e":"code","fe1a5c9c":"code","98e4abe3":"code","d6f50a5c":"code","ad2267ab":"code","e6e784c9":"code","08925d15":"code","dc5b61c2":"code","af4ba758":"code","4611f045":"code","78fbde54":"code","850babed":"code","c6a17bfd":"code","0e9208bf":"code","32162950":"code","5e79d045":"code","f1677903":"code","63d94fb3":"code","3e6eae09":"code","5c44d99d":"code","c02d7990":"code","4023132a":"code","5be59753":"code","c405cda1":"code","c84bce08":"code","5b2b02cf":"code","28328ac0":"code","be79efb4":"code","155b2076":"code","cca1cc32":"code","ae137a07":"code","ed11d39f":"code","486ca033":"code","9b025ac4":"code","ce77edec":"code","90ea0243":"code","b9ea06de":"code","7c28a1cf":"code","bd0eea5e":"code","990596ec":"code","24e7b526":"code","13e438f2":"code","47678448":"code","d3c02a95":"code","1abed942":"code","bda9a1a5":"markdown","685a3ba9":"markdown","be6fcdbe":"markdown","4f5e978f":"markdown","512fbc63":"markdown","95394212":"markdown","354f1142":"markdown","b4ab8669":"markdown","3db0c272":"markdown","564efb87":"markdown","b928578e":"markdown","7a7bb106":"markdown","3595a1eb":"markdown","accdae31":"markdown","4f64df63":"markdown","63b87a94":"markdown","fc30b933":"markdown","c9440e31":"markdown","c7c7d668":"markdown","7b3b2f12":"markdown","33dd2ede":"markdown","89d331b5":"markdown","5a6b0d7d":"markdown","9c16ac9a":"markdown","2a7b7c79":"markdown","e8b68c3a":"markdown","9db00f0b":"markdown","9dd1382d":"markdown","0a5742b7":"markdown","001618be":"markdown","ba2dc385":"markdown","97b76478":"markdown","3bafaa07":"markdown","1aed056a":"markdown","cc96bfa4":"markdown","283255e3":"markdown","debe773a":"markdown","e2f4f24c":"markdown","0aab27fc":"markdown","4a62d7ae":"markdown","7117e6cd":"markdown","e836a39d":"markdown","7e34219b":"markdown","b7c91bdf":"markdown","e225820d":"markdown","9066dd26":"markdown","8bf5b527":"markdown","081e3a3b":"markdown","af6968cf":"markdown","7d0fa66e":"markdown","bf5f6ed9":"markdown","e49b27f2":"markdown","5d386d75":"markdown","4e407b93":"markdown","5890a3a5":"markdown","cab190c6":"markdown"},"source":{"69d01d12":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nimport time\nfrom datetime import datetime\nfrom scipy import integrate, optimize\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# ML libraries\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom xgboost import plot_importance, plot_tree\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error","d2609d1e":"submission_example = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/submission.csv\")\ntest = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/train.csv\")\ndisplay(train.head(5))\ndisplay(train.describe())\nprint(\"Number of Country_Region: \", train['Country_Region'].nunique())\nprint(\"Dates go from day\", max(train['Date']), \"to day\", min(train['Date']), \", a total of\", train['Date'].nunique(), \"days\")\nprint(\"Countries with Province\/State informed: \", train[train['Province_State'].isna()==False]['Country_Region'].unique())","fe1a5c9c":"#confirmed_country = train.groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country = train.groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date = train.groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date = train.groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date = confirmed_total_date.join(fatalities_total_date)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\ntotal_date.plot(ax=ax1)\nax1.set_title(\"Global confirmed cases\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nfatalities_total_date.plot(ax=ax2, color='orange')\nax2.set_title(\"Global deceased cases\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","98e4abe3":"#confirmed_country_noChina = train[train['Country_Region']!='China'].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_noChina = train[train['Country_Region']!='China'].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_noChina = train[train['Country_Region']!='China'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_noChina = train[train['Country_Region']!='China'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_noChina = confirmed_total_date_noChina.join(fatalities_total_date_noChina)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\ntotal_date_noChina.plot(ax=ax1)\nax1.set_title(\"Global confirmed cases excluding China\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nfatalities_total_date_noChina.plot(ax=ax2, color='orange')\nax2.set_title(\"Global deceased cases excluding China\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","d6f50a5c":"#confirmed_country_China = train[train['Country_Region']=='China'].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_China = train[train['Country_Region']=='China'].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_China = train[train['Country_Region']=='China'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_China = train[train['Country_Region']=='China'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_China = confirmed_total_date_China.join(fatalities_total_date_China)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\ntotal_date_China.plot(ax=ax1)\nax1.set_title(\"China confirmed cases\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nfatalities_total_date_China.plot(ax=ax2, color='orange')\nax2.set_title(\"China deceased cases\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","ad2267ab":"#confirmed_country_Italy = train[train['Country_Region']=='Italy'].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Italy = train[train['Country_Region']=='Italy'].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Italy = train[train['Country_Region']=='Italy'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Italy = train[train['Country_Region']=='Italy'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Italy = confirmed_total_date_Italy.join(fatalities_total_date_Italy)\n\n#confirmed_country_Spain = train[train['Country_Region']=='Spain'].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Spain = train[train['Country_Region']=='Spain'].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Spain = train[train['Country_Region']=='Spain'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Spain = train[train['Country_Region']=='Spain'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Spain = confirmed_total_date_Spain.join(fatalities_total_date_Spain)\n\n#confirmed_country_UK = train[train['Country_Region']=='United Kingdom'].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_UK = train[train['Country_Region']=='United Kingdom'].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_UK = train[train['Country_Region']=='United Kingdom'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_UK = train[train['Country_Region']=='United Kingdom'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_UK = confirmed_total_date_UK.join(fatalities_total_date_UK)\n\n#confirmed_country_Australia = train[train['Country_Region']=='Australia'].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Australia = train[train['Country_Region']=='Australia'].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Australia = train[train['Country_Region']=='Australia'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Australia = train[train['Country_Region']=='Australia'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Australia = confirmed_total_date_Australia.join(fatalities_total_date_Australia)\n\n#confirmed_country_Singapore = train[train['Country_Region']=='Singapore'].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Singapore = train[train['Country_Region']=='Singapore'].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Singapore = train[train['Country_Region']=='Singapore'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Singapore = train[train['Country_Region']=='Singapore'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Singapore = confirmed_total_date_Singapore.join(fatalities_total_date_Singapore)\n\nplt.figure(figsize=(17,10))\nplt.subplot(2, 2, 1)\ntotal_date_Italy.plot(ax=plt.gca(), title='Italy')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(2, 2, 2)\ntotal_date_Spain.plot(ax=plt.gca(), title='Spain')\n\nplt.subplot(2, 2, 3)\ntotal_date_UK.plot(ax=plt.gca(), title='United Kingdom')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(2, 2, 4)\ntotal_date_Singapore.plot(ax=plt.gca(), title='Singapore')","e6e784c9":"confirmed_total_date_Japan = train[train['Country_Region']=='Japan'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Japan = train[train['Country_Region']=='Japan'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Japan = confirmed_total_date_Japan.join(fatalities_total_date_Japan)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1, 1, 1)\ntotal_date_Japan.plot(ax=plt.gca(), title='Japan')","08925d15":"pop_italy = 60486683.\npop_spain = 46749696.\npop_UK = 67784927.\npop_singapore = 5837230.\n\ntotal_date_Italy.ConfirmedCases = total_date_Italy.ConfirmedCases\/pop_italy*100.\ntotal_date_Italy.Fatalities = total_date_Italy.ConfirmedCases\/pop_italy*100.\ntotal_date_Spain.ConfirmedCases = total_date_Spain.ConfirmedCases\/pop_spain*100.\ntotal_date_Spain.Fatalities = total_date_Spain.ConfirmedCases\/pop_spain*100.\ntotal_date_UK.ConfirmedCases = total_date_UK.ConfirmedCases\/pop_UK*100.\ntotal_date_UK.Fatalities = total_date_UK.ConfirmedCases\/pop_UK*100.\ntotal_date_Singapore.ConfirmedCases = total_date_Singapore.ConfirmedCases\/pop_singapore*100.\ntotal_date_Singapore.Fatalities = total_date_Singapore.ConfirmedCases\/pop_singapore*100.\n\nplt.figure(figsize=(15,10))\nplt.subplot(2, 2, 1)\ntotal_date_Italy.ConfirmedCases.plot(ax=plt.gca(), title='Italy')\nplt.ylabel(\"Fraction of population infected\")\nplt.ylim(0, 0.5)\n\nplt.subplot(2, 2, 2)\ntotal_date_Spain.ConfirmedCases.plot(ax=plt.gca(), title='Spain')\nplt.ylim(0, 0.5)\n\nplt.subplot(2, 2, 3)\ntotal_date_UK.ConfirmedCases.plot(ax=plt.gca(), title='United Kingdom')\nplt.ylabel(\"Fraction of population infected\")\nplt.ylim(0, 0.1)\n\nplt.subplot(2, 2, 4)\ntotal_date_Singapore.ConfirmedCases.plot(ax=plt.gca(), title='Singapore')\nplt.ylim(0, 0.05)","dc5b61c2":"pop_japan = 126476461.\n\ntotal_date_Japan.ConfirmedCases = total_date_Japan.ConfirmedCases\/pop_japan*100.\ntotal_date_Japan.Fatalities = total_date_Japan.ConfirmedCases\/pop_japan*100.\n\nplt.subplot(1, 1, 1)\ntotal_date_Japan.ConfirmedCases.plot(ax=plt.gca(), title='Japan')\nplt.ylim(0, 0.006)","af4ba758":"#confirmed_country_Italy = train[(train['Country_Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Italy = train[(train['Country_Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Italy = train[(train['Country_Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Italy = train[(train['Country_Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Italy = confirmed_total_date_Italy.join(fatalities_total_date_Italy)\n\n#confirmed_country_Spain = train[(train['Country_Region']=='Spain') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Spain = train[(train['Country_Region']=='Spain') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Spain = train[(train['Country_Region']=='Spain') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Spain = train[(train['Country_Region']=='Spain') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Spain = confirmed_total_date_Spain.join(fatalities_total_date_Spain)\n\n#confirmed_country_UK = train[(train['Country_Region']=='United Kingdom') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_UK = train[(train['Country_Region']=='United Kingdom') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_UK = train[(train['Country_Region']=='United Kingdom') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_UK = train[(train['Country_Region']=='United Kingdom') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_UK = confirmed_total_date_UK.join(fatalities_total_date_UK)\n\n#confirmed_country_Australia = train[(train['Country_Region']=='Australia') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Australia = train[(train['Country_Region']=='Australia') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Australia = train[(train['Country_Region']=='Australia') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Australia = train[(train['Country_Region']=='Australia') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Australia = confirmed_total_date_Australia.join(fatalities_total_date_Australia)\n\n#confirmed_country_Singapore = train[(train['Country_Region']=='Singapore') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Singapore = train[(train['Country_Region']=='Singapore') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Singapore = train[(train['Country_Region']=='Singapore') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Singapore = train[(train['Country_Region']=='Singapore') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Singapore = confirmed_total_date_Singapore.join(fatalities_total_date_Singapore)\n\nitaly = [i for i in total_date_Italy.ConfirmedCases['sum'].values]\nitaly_30 = italy[0:70] \nspain = [i for i in total_date_Spain.ConfirmedCases['sum'].values]\nspain_30 = spain[0:70] \nUK = [i for i in total_date_UK.ConfirmedCases['sum'].values]\nUK_30 = UK[0:70] \nsingapore = [i for i in total_date_Singapore.ConfirmedCases['sum'].values]\nsingapore_30 = singapore[0:70] \n\n# \u65e5\u672c\u3092\u8ffd\u52a0\njapan = [i for i in total_date_Japan.ConfirmedCases['sum'].values]\njapan_30 = japan[0:70] \n\nconfirmed_total_date_Japan = train[(train['Country_Region']=='Japan') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Japan = train[(train['Country_Region']=='Japan') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Japan = confirmed_total_date_Japan.join(fatalities_total_date_Japan)\n\n# Plots\nplt.figure(figsize=(12,6))\nplt.plot(italy_30)\nplt.plot(spain_30)\nplt.plot(UK_30)\nplt.plot(singapore_30)\nplt.plot(japan_30)\nplt.legend([\"Italy\", \"Spain\", \"UK\", \"Singapore\",\"Japan\"], loc='upper left')\nplt.title(\"COVID-19 infections from the first confirmed case\", size=15)\nplt.xlabel(\"Days\", size=13)\nplt.ylabel(\"Infected cases\", size=20)\nplt.ylim(0, 130000)\nplt.show()","4611f045":"# Susceptible equation\ndef fa(N, a, b, beta):\n    fa = -beta*a*b\n    return fa\n\n# Infected equation\ndef fb(N, a, b, beta, gamma):\n    fb = beta*a*b - gamma*b\n    return fb\n\n# Recovered\/deceased equation\ndef fc(N, b, gamma):\n    fc = gamma*b\n    return fc","78fbde54":"# Runge-Kutta method of 4rth order for 3 dimensions (susceptible a, infected b and recovered r)\ndef rK4(N, a, b, c, fa, fb, fc, beta, gamma, hs):\n    a1 = fa(N, a, b, beta)*hs\n    b1 = fb(N, a, b, beta, gamma)*hs\n    c1 = fc(N, b, gamma)*hs\n    ak = a + a1*0.5\n    bk = b + b1*0.5\n    ck = c + c1*0.5\n    a2 = fa(N, ak, bk, beta)*hs\n    b2 = fb(N, ak, bk, beta, gamma)*hs\n    c2 = fc(N, bk, gamma)*hs\n    ak = a + a2*0.5\n    bk = b + b2*0.5\n    ck = c + c2*0.5\n    a3 = fa(N, ak, bk, beta)*hs\n    b3 = fb(N, ak, bk, beta, gamma)*hs\n    c3 = fc(N, bk, gamma)*hs\n    ak = a + a3\n    bk = b + b3\n    ck = c + c3\n    a4 = fa(N, ak, bk, beta)*hs\n    b4 = fb(N, ak, bk, beta, gamma)*hs\n    c4 = fc(N, bk, gamma)*hs\n    a = a + (a1 + 2*(a2 + a3) + a4)\/6\n    b = b + (b1 + 2*(b2 + b3) + b4)\/6\n    c = c + (c1 + 2*(c2 + c3) + c4)\/6\n    return a, b, c","850babed":"def SIR(N, b0, beta, gamma, hs):\n    \n    \"\"\"\n    N = total number of population\n    beta = transition rate S->I\n    gamma = transition rate I->R\n    k =  denotes the constant degree distribution of the network (average value for networks in which \n    the probability of finding a node with a different connectivity decays exponentially fast\n    hs = jump step of the numerical integration\n    \"\"\"\n    \n    # Initial condition\n    a = float(N-1)\/N -b0\n    b = float(1)\/N +b0\n    c = 0.\n\n    sus, inf, rec= [],[],[]\n    for i in range(10000): # Run for a certain number of time-steps\n        sus.append(a)\n        inf.append(b)\n        rec.append(c)\n        a,b,c = rK4(N, a, b, c, fa, fb, fc, beta, gamma, hs)\n\n    return sus, inf, rec","c6a17bfd":"# Parameters of the model\nN = 7800*(10**6)\nb0 = 0\nbeta = 0.7\ngamma = 0.2\nhs = 0.1\n\nsus, inf, rec = SIR(N, b0, beta, gamma, hs)\n\nf = plt.figure(figsize=(8,5)) \nplt.plot(sus, 'b.', label='susceptible');\nplt.plot(inf, 'r.', label='infected');\nplt.plot(rec, 'c.', label='recovered\/deceased');\nplt.title(\"SIR model\")\nplt.xlabel(\"time\", fontsize=10);\nplt.ylabel(\"Fraction of population\", fontsize=10);\nplt.legend(loc='best')\nplt.xlim(0,1000)\nplt.savefig('SIR_example.png')\nplt.show()","0e9208bf":"population = float(46750238)\ncountry_df = pd.DataFrame()\ncountry_df['ConfirmedCases'] = train.loc[train['Country_Region']=='Spain'].ConfirmedCases.diff().fillna(0)\ncountry_df = country_df[10:]\ncountry_df['day_count'] = list(range(1,len(country_df)+1))\n\nydata = [i for i in country_df.ConfirmedCases]\nxdata = country_df.day_count\nydata = np.array(ydata, dtype=float)\nxdata = np.array(xdata, dtype=float)\n\nN = population\ninf0 = ydata[0]\nsus0 = N - inf0\nrec0 = 0.0\n\ndef sir_model(y, x, beta, gamma):\n    sus = -beta * y[0] * y[1] \/ N\n    rec = gamma * y[1]\n    inf = -(sus + rec)\n    return sus, inf, rec\n\ndef fit_odeint(x, beta, gamma):\n    return integrate.odeint(sir_model, (sus0, inf0, rec0), x, args=(beta, gamma))[:,1]\n\npopt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\nfitted = fit_odeint(xdata, *popt)\n\nplt.plot(xdata, ydata, 'o')\nplt.plot(xdata, fitted)\nplt.title(\"Fit of SIR model for Spain infected cases\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()\nprint(\"Optimal parameters: beta =\", popt[0], \" and gamma = \", popt[1])","32162950":"# Merge train and test, exclude overlap\ndates_overlap = ['2020-03-26', '2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', '2020-04-01', '2020-04-02', '2020-04-03']\ntrain2 = train.loc[~train['Date'].isin(dates_overlap)]\nall_data = pd.concat([train2, test], axis = 0, sort=False)\n\n# Double check that there are no informed ConfirmedCases and Fatalities after 2020-03-11\nall_data.loc[all_data['Date'] >= '2020-03-26', 'ConfirmedCases'] = 0\nall_data.loc[all_data['Date'] >= '2020-03-26', 'Fatalities'] = 0\nall_data['Date'] = pd.to_datetime(all_data['Date'])\n\n# Create date columns\nle = preprocessing.LabelEncoder()\nall_data['Day_num'] = le.fit_transform(all_data.Date)\nall_data['Day'] = all_data['Date'].dt.day\nall_data['Month'] = all_data['Date'].dt.month\nall_data['Year'] = all_data['Date'].dt.year\n\n# Fill null values given that we merged train-test datasets\nall_data['Province_State'].fillna(\"None\", inplace=True)\nall_data['ConfirmedCases'].fillna(0, inplace=True)\nall_data['Fatalities'].fillna(0, inplace=True)\nall_data['Id'].fillna(-1, inplace=True)\nall_data['ForecastId'].fillna(-1, inplace=True)\n\ndisplay(all_data)\ndisplay(all_data.loc[all_data['Date'] == '2020-03-26'])","5e79d045":"missings_count = {col:all_data[col].isnull().sum() for col in all_data.columns}\nmissings = pd.DataFrame.from_dict(missings_count, orient='index')\nprint(missings.nlargest(30, 0))","f1677903":"def calculate_lag(df, lag_list, column):\n    for lag in lag_list:\n        column_lag = column + \"_\" + str(lag)\n        df[column_lag] = df.groupby(['Country_Region', 'Province_State'])[column].shift(lag, fill_value=0)\n    return df\n\ndef calculate_trend(df, lag_list, column):\n    for lag in lag_list:\n        trend_column_lag = \"Trend_\" + column + \"_\" + str(lag)\n        df[trend_column_lag] = (df.groupby(['Country_Region', 'Province_State'])[column].shift(0, fill_value=0) - \n                                df.groupby(['Country_Region', 'Province_State'])[column].shift(lag, fill_value=0))\/df.groupby(['Country_Region', 'Province_State'])[column].shift(lag, fill_value=0.001)\n    return df\n\n\nts = time.time()\nall_data = calculate_lag(all_data.reset_index(), range(1,7), 'ConfirmedCases')\nall_data = calculate_lag(all_data, range(1,7), 'Fatalities')\nall_data = calculate_trend(all_data, range(1,7), 'ConfirmedCases')\nall_data = calculate_trend(all_data, range(1,7), 'Fatalities')\nall_data.replace([np.inf, -np.inf], 0, inplace=True)\nall_data.fillna(0, inplace=True)\nprint(\"Time spent: \", time.time()-ts)","63d94fb3":"all_data[all_data['Country_Region']=='Spain'].iloc[40:50][['Id', 'Province_State', 'Country_Region', 'Date',\n       'ConfirmedCases', 'Fatalities', 'ForecastId', 'Day_num', 'ConfirmedCases_1',\n       'ConfirmedCases_2', 'ConfirmedCases_3', 'Fatalities_1', 'Fatalities_2',\n       'Fatalities_3']]","3e6eae09":"# Load countries data file\nworld_population = pd.read_csv(\"\/kaggle\/input\/population-by-country-2020\/population_by_country_2020.csv\")\n\n# Select desired columns and rename some of them\nworld_population = world_population[['Country (or dependency)', 'Population (2020)', 'Density (P\/Km\u00b2)', 'Land Area (Km\u00b2)', 'Med. Age', 'Urban Pop %']]\nworld_population.columns = ['Country (or dependency)', 'Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']\n\n# Replace United States by US\nworld_population.loc[world_population['Country (or dependency)']=='United States', 'Country (or dependency)'] = 'US'\n\n# Remove the % character from Urban Pop values\nworld_population['Urban Pop'] = world_population['Urban Pop'].str.rstrip('%')\n\n# Replace Urban Pop and Med Age \"N.A\" by their respective modes, then transform to int\nworld_population.loc[world_population['Urban Pop']=='N.A.', 'Urban Pop'] = int(world_population.loc[world_population['Urban Pop']!='N.A.', 'Urban Pop'].mode()[0])\nworld_population['Urban Pop'] = world_population['Urban Pop'].astype('int16')\nworld_population.loc[world_population['Med Age']=='N.A.', 'Med Age'] = int(world_population.loc[world_population['Med Age']!='N.A.', 'Med Age'].mode()[0])\nworld_population['Med Age'] = world_population['Med Age'].astype('int16')\n\nprint(\"Cleaned country details dataset\")\ndisplay(world_population)\n\n# Now join the dataset to our previous DataFrame and clean missings (not match in left join)- label encode cities\nprint(\"Joined dataset\")\nall_data = all_data.merge(world_population, left_on='Country_Region', right_on='Country (or dependency)', how='left')\nall_data[['Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']] = all_data[['Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']].fillna(0)\ndisplay(all_data)\n\nprint(\"Encoded dataset\")\n# Label encode countries and provinces. Save dictionary for exploration purposes\nall_data.drop('Country (or dependency)', inplace=True, axis=1)\nall_data['Country_Region'] = le.fit_transform(all_data['Country_Region'])\nnumber_c = all_data['Country_Region']\ncountries = le.inverse_transform(all_data['Country_Region'])\ncountry_dict = dict(zip(countries, number_c)) \nall_data['Province_State'] = le.fit_transform(all_data['Province_State'])\nnumber_p = all_data['Province_State']\nprovince = le.inverse_transform(all_data['Province_State'])\nprovince_dict = dict(zip(province, number_p)) \ndisplay(all_data)","5c44d99d":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,6))\n\n# Day_num = 38 is March 1st\ny1 = all_data[(all_data['Country_Region']==country_dict['Japan']) & (all_data['Day_num']>39) & (all_data['Day_num']<=49)][['ConfirmedCases']]\nx1 = range(0, len(y1))\nax1.plot(x1, y1, 'bo--')\nax1.set_title(\"Japan ConfirmedCases between days 39 and 49\")\nax1.set_xlabel(\"Days\")\nax1.set_ylabel(\"ConfirmedCases\")\n\ny2 = all_data[(all_data['Country_Region']==country_dict['Japan']) & (all_data['Day_num']>39) & (all_data['Day_num']<=49)][['ConfirmedCases']].apply(lambda x: np.log(x))\nx2 = range(0, len(y2))\nax2.plot(x2, y2, 'bo--')\nax2.set_title(\"Japan Log ConfirmedCases between days 39 and 49\")\nax2.set_xlabel(\"Days\")\nax2.set_ylabel(\"Log ConfirmedCases\")","c02d7990":"# Filter selected features\ndata = all_data.copy()\nfeatures = ['Id', 'ForecastId', 'Country_Region', 'Province_State', 'ConfirmedCases', 'Fatalities', \n       'Day_num']\ndata = data[features]\n\n# Apply log transformation to all ConfirmedCases and Fatalities columns, except for trends\ndata[['ConfirmedCases', 'Fatalities']] = data[['ConfirmedCases', 'Fatalities']].astype('float64')\ndata[['ConfirmedCases', 'Fatalities']] = data[['ConfirmedCases', 'Fatalities']].apply(lambda x: np.log1p(x))\n\n# Replace infinites\ndata.replace([np.inf, -np.inf], 0, inplace=True)\n\n\n# Split data into train\/test\ndef split_data(df, train_lim, test_lim):\n    \n    df.loc[df['Day_num']<=train_lim , 'ForecastId'] = -1\n    df = df[df['Day_num']<=test_lim]\n    \n    # Train set\n    x_train = df[df.ForecastId == -1].drop(['ConfirmedCases', 'Fatalities'], axis=1)\n    y_train_1 = df[df.ForecastId == -1]['ConfirmedCases']\n    y_train_2 = df[df.ForecastId == -1]['Fatalities']\n\n    # Test set\n    x_test = df[df.ForecastId != -1].drop(['ConfirmedCases', 'Fatalities'], axis=1)\n\n    # Clean Id columns and keep ForecastId as index\n    x_train.drop('Id', inplace=True, errors='ignore', axis=1)\n    x_train.drop('ForecastId', inplace=True, errors='ignore', axis=1)\n    x_test.drop('Id', inplace=True, errors='ignore', axis=1)\n    x_test.drop('ForecastId', inplace=True, errors='ignore', axis=1)\n    \n    return x_train, y_train_1, y_train_2, x_test\n\n\n# Linear regression model\ndef lin_reg(X_train, Y_train, X_test):\n    # Create linear regression object\n    regr = linear_model.LinearRegression()\n\n    # Train the model using the training sets\n    regr.fit(X_train, Y_train)\n\n    # Make predictions using the testing set\n    y_pred = regr.predict(X_test)\n    \n    return regr, y_pred\n\n\n# Submission function\ndef get_submission(df, target1, target2):\n    \n    prediction_1 = df[target1]\n    prediction_2 = df[target2]\n\n    # Submit predictions\n    prediction_1 = [int(item) for item in list(map(round, prediction_1))]\n    prediction_2 = [int(item) for item in list(map(round, prediction_2))]\n    \n    submission = pd.DataFrame({\n        \"ForecastId\": df['ForecastId'].astype('int32'), \n        \"ConfirmedCases\": prediction_1, \n        \"Fatalities\": prediction_2\n    })\n    submission.to_csv('submission.csv', index=False)","4023132a":"# Select train (real) data from March 1 to March 22nd\ndates_list = ['2020-03-01', '2020-03-02', '2020-03-03', '2020-03-04', '2020-03-05', '2020-03-06', '2020-03-07', '2020-03-08', '2020-03-09', \n                 '2020-03-10', '2020-03-11','2020-03-12','2020-03-13','2020-03-14','2020-03-15','2020-03-16','2020-03-17','2020-03-18',\n                 '2020-03-19','2020-03-20','2020-03-21','2020-03-22','2020-03-23', '2020-03-24', '2020-03-25', '2020-03-26', '2020-03-27', \n                 '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', '2020-04-01', '2020-04-02', '2020-04-03']","5be59753":"all_data.loc[all_data['Country_Region']==country_dict['Spain']][50:70]","c405cda1":"def plot_linreg_basic_country(data, country_name, dates_list, day_start, shift, train_lim, test_lim):\n    \n    data_country = data[data['Country_Region']==country_dict[country_name]]\n    data_country = data_country.loc[data_country['Day_num']>=day_start]\n    X_train, Y_train_1, Y_train_2, X_test = split_data(data_country, train_lim, test_lim)\n    model, pred = lin_reg(X_train, Y_train_1, X_test)\n\n    # Create a df with both real cases and predictions (predictions starting on March 12th)\n    X_train_check = X_train.copy()\n    X_train_check['Target'] = Y_train_1\n\n    X_test_check = X_test.copy()\n    X_test_check['Target'] = pred\n\n    X_final_check = pd.concat([X_train_check, X_test_check])\n\n    # Select predictions from March 1st to March 25th\n    predicted_data = X_final_check.loc[(X_final_check['Day_num'].isin(list(range(day_start, day_start+len(dates_list)))))].Target\n    real_data = train.loc[(train['Country_Region']==country_name) & (train['Date'].isin(dates_list))]['ConfirmedCases']\n    dates_list_num = list(range(0,len(dates_list)))\n\n    # Plot results\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,6))\n\n    ax1.plot(dates_list_num, np.expm1(predicted_data))\n    ax1.plot(dates_list_num, real_data)\n    ax1.axvline(24-shift, linewidth=2, ls = ':', color='grey', alpha=0.5)\n    ax1.legend(['Predicted cases', 'Actual cases', 'Train-test split'], loc='upper left')\n    ax1.set_xlabel(\"Day count (from March \" + str(1+shift) + \" to March 25th)\")\n    ax1.set_ylabel(\"Confirmed Cases\")\n\n    ax2.plot(dates_list_num, predicted_data)\n    ax2.plot(dates_list_num, np.log1p(real_data))\n    ax2.axvline(24-shift, linewidth=2, ls = ':', color='grey', alpha=0.5)\n    ax2.legend(['Predicted cases', 'Actual cases', 'Train-test split'], loc='upper left')\n    ax2.set_xlabel(\"Day count (from March \" + str(1+shift) + \" to March 30th)\")\n    ax2.set_ylabel(\"Log Confirmed Cases\")\n\n    plt.suptitle((\"ConfirmedCases predictions based on Log-Lineal Regression for \"+country_name))\n    \n    \n    \n# Filter Spain, run the Linear Regression workflow\ncountry_name = \"Spain\"\nmarch_day = 10\nday_start = 39+march_day\ndates_list2 = dates_list[march_day:]\ntrain_lim, test_lim = 63, 106\nplot_linreg_basic_country(data, country_name, dates_list2, day_start, march_day, train_lim, test_lim)","c84bce08":"# Filter Spain, run the Linear Regression workflow\ncountry_name = \"Spain\"\nmarch_day = 21\nday_start = 39+march_day\ndates_list2 = dates_list[march_day:]\nplot_linreg_basic_country(data, country_name, dates_list2, day_start, march_day, train_lim, test_lim)","5b2b02cf":"# Filter Italy, run the Linear Regression workflow\ncountry_name = \"Italy\"\nmarch_day = 10\nday_start = 39+march_day\ndates_list2 = dates_list[march_day:]\nplot_linreg_basic_country(data, country_name, dates_list2, day_start, march_day, train_lim, test_lim)","28328ac0":"# Filter Italy, run the Linear Regression workflow\ncountry_name = \"Italy\"\nmarch_day = 21\nday_start = 39+march_day\ndates_list2 = dates_list[march_day:]\nplot_linreg_basic_country(data, country_name, dates_list2, day_start, march_day, train_lim, test_lim)","be79efb4":"# Filter Germany, run the Linear Regression workflow\ncountry_name = \"Germany\"\nmarch_day = 10\nday_start = 39+march_day\ndates_list2 = dates_list[march_day:]\nplot_linreg_basic_country(data, country_name, dates_list2, day_start, march_day, train_lim, test_lim)","155b2076":"# Filter Germany, run the Linear Regression workflow\ncountry_name = \"Germany\"\nmarch_day = 21\nday_start = 39+march_day\ndates_list2 = dates_list[march_day:]\nplot_linreg_basic_country(data, country_name, dates_list2, day_start, march_day, train_lim, test_lim)","cca1cc32":"# Filter Albania, run the Linear Regression workflow\ncountry_name = \"Albania\"\nmarch_day = 10\nday_start = 39+march_day\ndates_list2 = dates_list[march_day:]\nplot_linreg_basic_country(data, country_name, dates_list2, day_start, march_day, train_lim, test_lim)","ae137a07":"# Filter Albania, run the Linear Regression workflow\ncountry_name = \"Albania\"\nmarch_day = 21\nday_start = 39+march_day\ndates_list2 = dates_list[march_day:]\nplot_linreg_basic_country(data, country_name, dates_list2, day_start, march_day, train_lim, test_lim)","ed11d39f":"# Filter Andorra, run the Linear Regression workflow\ncountry_name = \"Andorra\"\nshift = 10\nday_start = 39+shift\ndates_list2 = dates_list[shift:]\nplot_linreg_basic_country(data, country_name, dates_list2, day_start, shift, train_lim, test_lim)","486ca033":"# Filter Andorra, run the Linear Regression workflow\ncountry_name = \"Andorra\"\nshift = 21\nday_start = 39+shift\ndates_list2 = dates_list[shift:]\nplot_linreg_basic_country(data, country_name, dates_list2, day_start, shift, train_lim, test_lim)","9b025ac4":"ts = time.time()\n\ndef linreg_basic_all_countries(data, day_start, train_lim, test_lim):\n    \n    data2 = data.loc[data.Day_num >= day_start]\n\n    # Set the dataframe where we will update the predictions\n    data_pred = data[data.ForecastId != -1][['Country_Region', 'Province_State', 'Day_num', 'ForecastId']]\n    data_pred = data_pred.loc[data_pred['Day_num']>=day_start]\n    data_pred['Predicted_ConfirmedCases'] = [0]*len(data_pred)\n    data_pred['Predicted_Fatalities'] = [0]*len(data_pred)\n\n    print(\"Currently running Linear Regression for all countries\")\n\n    # Main loop for countries\n    for c in data2['Country_Region'].unique():\n\n        # List of provinces\n        provinces_list = data2[data2['Country_Region']==c]['Province_State'].unique()\n\n        # If the country has several Province\/State informed\n        if len(provinces_list)>1:\n            for p in provinces_list:\n                data_cp = data2[(data2['Country_Region']==c) & (data2['Province_State']==p)]\n                X_train, Y_train_1, Y_train_2, X_test = split_data(data_cp, train_lim, test_lim)\n                model_1, pred_1 = lin_reg(X_train, Y_train_1, X_test)\n                model_2, pred_2 = lin_reg(X_train, Y_train_2, X_test)\n                data_pred.loc[((data_pred['Country_Region']==c) & (data2['Province_State']==p)), 'Predicted_ConfirmedCases'] = pred_1\n                data_pred.loc[((data_pred['Country_Region']==c) & (data2['Province_State']==p)), 'Predicted_Fatalities'] = pred_2\n\n        # No Province\/State informed\n        else:\n            data_c = data2[(data2['Country_Region']==c)]\n            X_train, Y_train_1, Y_train_2, X_test = split_data(data_c, train_lim, test_lim)\n            model_1, pred_1 = lin_reg(X_train, Y_train_1, X_test)\n            model_2, pred_2 = lin_reg(X_train, Y_train_2, X_test)\n            data_pred.loc[(data_pred['Country_Region']==c), 'Predicted_ConfirmedCases'] = pred_1\n            data_pred.loc[(data_pred['Country_Region']==c), 'Predicted_Fatalities'] = pred_2\n\n    # Apply exponential transf. and clean potential infinites due to final numerical precision\n    data_pred[['Predicted_ConfirmedCases', 'Predicted_Fatalities']] = data_pred[['Predicted_ConfirmedCases', 'Predicted_Fatalities']].apply(lambda x: np.expm1(x))\n    data_pred.replace([np.inf, -np.inf], 0, inplace=True) \n    \n    return data_pred\n\n\nday_start = 60\ndata_pred = linreg_basic_all_countries(data, day_start, train_lim, test_lim)\nget_submission(data_pred, 'Predicted_ConfirmedCases', 'Predicted_Fatalities')\n\nprint(\"Process finished in \", round(time.time() - ts, 2), \" seconds\")","ce77edec":"ts = time.time()\n\n# Set the dataframe where we will update the predictions\ndata2 = data.loc[data.Day_num >= day_start]\ndata_pred3 = data[data.ForecastId != -1][['Country_Region', 'Province_State', 'Day_num', 'ForecastId']]\ndata_pred3['Predicted_ConfirmedCases'] = [0]*len(data_pred3)\ndata_pred3['Predicted_Fatalities'] = [0]*len(data_pred3)\nhow_many_days = test.Date.nunique()\n    \nprint(\"Currently running Linear Regression for all countries\")\n\n# Main loop for countries\nfor c in data['Country_Region'].unique():\n    \n    # List of provinces\n    provinces_list = data2[data2['Country_Region']==c]['Province_State'].unique()\n        \n    # If the country has several Province\/State informed\n    if len(provinces_list)>1:\n        \n        for p in provinces_list:\n            # Only fit starting from the first confirmed case in the country\n            train_countries_no0 = data.loc[(data['Country_Region']==c) & (data['Province_State']==p) & (data.ConfirmedCases!=0) & (data.ForecastId==-1)]\n            test_countries_no0 = data.loc[(data['Country_Region']==c) & (data['Province_State']==p) &  (data.ForecastId!=-1)]\n            data2 = pd.concat([train_countries_no0, test_countries_no0])\n\n            # If there are no previous cases, predict 0\n            if len(train_countries_no0) == 0:\n                data_pred3.loc[((data_pred2['Country_Region']==c) & (data_pred3['Province_State']==p)), 'Predicted_ConfirmedCases'] = [0]*how_many_days\n                data_pred3.loc[((data_pred2['Country_Region']==c) & (data_pred3['Province_State']==p)), 'Predicted_Fatalities'] = [0]*how_many_days\n                \n            # Else run LinReg\n            else: \n                data_cp = data2[(data2['Country_Region']==c) & (data2['Province_State']==p)]\n                X_train, Y_train_1, Y_train_2, X_test = split_data(data_cp, train_lim, test_lim)\n                model_1, pred_1 = lin_reg(X_train, Y_train_1, X_test)\n                model_2, pred_2 = lin_reg(X_train, Y_train_2, X_test)\n                data_pred3.loc[((data_pred3['Country_Region']==c) & (data_pred3['Province_State']==p)), 'Predicted_ConfirmedCases'] = pred_1\n                data_pred3.loc[((data_pred3['Country_Region']==c) & (data_pred3['Province_State']==p)), 'Predicted_Fatalities'] = pred_2\n\n    # No Province\/State informed\n    else:\n        # Only fit starting from the first confirmed case in the country\n        train_countries_no0 = data.loc[(data['Country_Region']==c) & (data.ConfirmedCases!=0) & (data.ForecastId==-1)]\n        test_countries_no0 = data.loc[(data['Country_Region']==c) &  (data.ForecastId!=-1)]\n        data2 = pd.concat([train_countries_no0, test_countries_no0])\n\n        # If there are no previous cases, predict 0\n        if len(train_countries_no0) == 0:\n            data_pred3.loc[((data_pred3['Country_Region']==c)), 'Predicted_ConfirmedCases'] = [0]*how_many_days\n            data_pred3.loc[((data_pred3['Country_Region']==c)), 'Predicted_Fatalities'] = [0]*how_many_days\n        \n        # Else, run LinReg\n        else:\n            data_c = data2[(data2['Country_Region']==c)]\n            X_train, Y_train_1, Y_train_2, X_test = split_data(data_c, train_lim, test_lim)\n            model_1, pred_1 = lin_reg(X_train, Y_train_1, X_test)\n            model_2, pred_2 = lin_reg(X_train, Y_train_2, X_test)\n            data_pred3.loc[(data_pred3['Country_Region']==c), 'Predicted_ConfirmedCases'] = pred_1\n            data_pred3.loc[(data_pred3['Country_Region']==c), 'Predicted_Fatalities'] = pred_2\n\n# Aplly exponential transf. and clean potential infinites due to final numerical precision\ndata_pred3[['Predicted_ConfirmedCases', 'Predicted_Fatalities']] = data_pred3[['Predicted_ConfirmedCases', 'Predicted_Fatalities']].apply(lambda x: np.expm1(x))\ndata_pred3.replace([np.inf, -np.inf], 0, inplace=True) \n\n#get_submission(data_pred3, 'Predicted_ConfirmedCases', 'Predicted_Fatalities')\n\nprint(\"Process finished in \", round(time.time() - ts, 2), \" seconds\")","90ea0243":"# New split function, for one forecast day\ndef split_data_one_day(df, d, train_lim, test_lim):\n    \n    df.loc[df['Day_num']<=train_lim , 'ForecastId'] = -1\n    df = df[df['Day_num']<=test_lim]\n    \n    #Train\n    x_train = df[df.Day_num<d]\n    y_train_1 = x_train.ConfirmedCases\n    y_train_2 = x_train.Fatalities\n    x_train.drop(['ConfirmedCases', 'Fatalities'], axis=1, inplace=True)\n    \n    #Test\n    x_test = df[df.Day_num==d]\n    x_test.drop(['ConfirmedCases', 'Fatalities'], axis=1, inplace=True)\n    \n    # Clean Id columns and keep ForecastId as index\n    x_train.drop('Id', inplace=True, errors='ignore', axis=1)\n    x_train.drop('ForecastId', inplace=True, errors='ignore', axis=1)\n    x_test.drop('Id', inplace=True, errors='ignore', axis=1)\n    x_test.drop('ForecastId', inplace=True, errors='ignore', axis=1)\n    \n    return x_train, y_train_1, y_train_2, x_test\n\n\ndef plot_real_vs_prediction_country(data, train, country_name, day_start, dates_list, march_day):\n\n    # Select predictions from March 1st to March 25th\n    predicted_data = data.loc[(data['Day_num'].isin(list(range(day_start, day_start+len(dates_list)))))].ConfirmedCases\n    real_data = train.loc[(train['Country_Region']==country_name) & (train['Date'].isin(dates_list))]['ConfirmedCases']\n    dates_list_num = list(range(0,len(dates_list)))\n\n    # Plot results\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,6))\n\n    ax1.plot(dates_list_num, np.expm1(predicted_data))\n    ax1.plot(dates_list_num, real_data)\n    ax1.axvline(24-march_day, linewidth=2, ls = ':', color='grey', alpha=0.5)\n    ax1.legend(['Predicted cases', 'Actual cases', 'Train-test split'], loc='upper left')\n    ax1.set_xlabel(\"Day count (starting on March \" + str(march_day) + \"))\")\n    ax1.set_ylabel(\"Confirmed Cases\")\n\n    ax2.plot(dates_list_num, predicted_data)\n    ax2.plot(dates_list_num, np.log1p(real_data))\n    ax2.axvline(24-march_day, linewidth=2, ls = ':', color='grey', alpha=0.5)\n    ax2.legend(['Predicted cases', 'Actual cases', 'Train-test split'], loc='upper left')\n    ax2.set_xlabel(\"Day count (starting on March \" + str(march_day) + \")\")\n    ax2.set_ylabel(\"Log Confirmed Cases\")\n\n    plt.suptitle((\"ConfirmedCases predictions based on Log-Lineal Regression for \"+country_name))\n    \n    \ndef plot_real_vs_prediction_country_fatalities(data, train, country_name, day_start, dates_list, march_day):\n\n    # Select predictions from March 1st to March 25th\n    predicted_data = data.loc[(data['Day_num'].isin(list(range(day_start, day_start+len(dates_list)))))].Fatalities\n    real_data = train.loc[(train['Country_Region']==country_name) & (train['Date'].isin(dates_list))]['Fatalities']\n    dates_list_num = list(range(0,len(dates_list)))\n\n    # Plot results\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,6))\n\n    ax1.plot(dates_list_num, np.expm1(predicted_data))\n    ax1.plot(dates_list_num, real_data)\n    ax1.axvline(24-march_day, linewidth=2, ls = ':', color='grey', alpha=0.5)\n    ax1.legend(['Predicted cases', 'Actual cases', 'Train-test split'], loc='upper left')\n    ax1.set_xlabel(\"Day count (starting on March \" + str(march_day) + \")\")\n    ax1.set_ylabel(\"Fatalities Cases\")\n\n    ax2.plot(dates_list_num, predicted_data)\n    ax2.plot(dates_list_num, np.log1p(real_data))\n    ax2.axvline(24-march_day, linewidth=2, ls = ':', color='grey', alpha=0.5)\n    ax2.legend(['Predicted cases', 'Actual cases', 'Train-test split'], loc='upper left')\n    ax2.set_xlabel(\"Day count (starting on March \" + str(march_day) + \")\")\n    ax2.set_ylabel(\"Log Fatalities Cases\")\n\n    plt.suptitle((\"Fatalities predictions based on Log-Lineal Regression for \"+country_name))","b9ea06de":"# Function to compute the Linear Regression predictions with lags, for a certain Country\/Region\ndef lin_reg_with_lags_country(all_data, country_name, day_start, lag_size, country_dict, train_lim, test_lim):\n    \n    ts = time.time()\n    \n    # Filter country and features from all_data (dataset without data leaking)\n    data = all_data.copy()\n    features = ['Id', 'Province_State', 'Country_Region',\n           'ConfirmedCases', 'Fatalities', 'ForecastId', 'Day_num']\n    data = data[features]\n\n    # Select country an data start (all days)\n    data = data[data['Country_Region']==country_dict[country_name]]\n    data = data.loc[data['Day_num']>=day_start]\n\n    # Lags\n    data = calculate_lag(data, range(1,lag_size), 'ConfirmedCases')\n    data = calculate_lag(data, range(1,8), 'Fatalities')\n\n    filter_col_confirmed = [col for col in data if col.startswith('Confirmed')]\n    filter_col_fatalities= [col for col in data if col.startswith('Fataliti')]\n    filter_col = np.append(filter_col_confirmed, filter_col_fatalities)\n    \n    # Apply log transformation\n    data[filter_col] = data[filter_col].apply(lambda x: np.log1p(x))\n    data.replace([np.inf, -np.inf], 0, inplace=True)\n    data.fillna(0, inplace=True)\n\n\n    # Start\/end of forecast\n    start_fcst = all_data[all_data['Id']==-1].Day_num.min()\n    end_fcst = all_data[all_data['Id']==-1].Day_num.max()\n\n    for d in list(range(start_fcst, end_fcst+1)):\n        X_train, Y_train_1, Y_train_2, X_test = split_data_one_day(data, d, train_lim, test_lim)\n        model_1, pred_1 = lin_reg(X_train, Y_train_1, X_test)\n        data.loc[(data['Country_Region']==country_dict[country_name]) \n                 & (data['Day_num']==d), 'ConfirmedCases'] = pred_1[0]\n        model_2, pred_2 = lin_reg(X_train, Y_train_2, X_test)\n        data.loc[(data['Country_Region']==country_dict[country_name]) \n                 & (data['Day_num']==d), 'Fatalities'] = pred_2[0]\n\n        # Recompute lags \n        data = calculate_lag(data, range(1,lag_size), 'ConfirmedCases')\n        data = calculate_lag(data, range(1,8), 'Fatalities')\n        data.replace([np.inf, -np.inf], 0, inplace=True)\n        data.fillna(0, inplace=True)\n\n    #print(\"Process for \", country_name, \"finished in \", round(time.time() - ts, 2), \" seconds\")\n    \n    return data\n\n\n# Function to compute the Linear Regression predictions with lags, for a certain Country\/Region and State\/province\ndef lin_reg_with_lags_country_province(all_data, country_name, province_name, day_start, lag_size, country_dict, train_lim, test_lim):\n    \n    ts = time.time()\n    \n    # Filter country and features from all_data (dataset without data leaking)\n    data = all_data.copy()\n    features = ['Id', 'Province_State', 'Country_Region',\n           'ConfirmedCases', 'Fatalities', 'ForecastId', 'Day_num']\n    data = data[features]\n\n    # Select country an data start (all days)\n    data = data[(data['Country_Region']==country_dict[country_name]) & (data['Province_State']==province_dict[province_name])]\n    data = data.loc[data['Day_num']>=day_start]\n\n    # Lags\n    data = calculate_lag(data, range(1,lag_size), 'ConfirmedCases')\n    data = calculate_lag(data, range(1,lag_size), 'Fatalities')\n\n    # Apply log transformation\n    filter_col_confirmed = [col for col in data if col.startswith('Confirmed')]\n    filter_col_fatalities= [col for col in data if col.startswith('Fataliti')]\n    filter_col = np.append(filter_col_confirmed, filter_col_fatalities)\n    data[filter_col] = data[filter_col].apply(lambda x: np.log1p(x))\n    data.replace([np.inf, -np.inf], 0, inplace=True)\n    data.fillna(0, inplace=True)\n\n    # Start\/end of forecast\n    start_fcst = all_data[all_data['Id']==-1].Day_num.min()\n    end_fcst = all_data[all_data['Id']==-1].Day_num.max()\n\n    for d in list(range(start_fcst, end_fcst+1)):\n        X_train, Y_train_1, Y_train_2, X_test = split_data_one_day(data, d, train_lim, test_lim)\n        model_1, pred_1 = lin_reg(X_train, Y_train_1, X_test)\n        data.loc[(data['Country_Region']==country_dict[country_name]) & (data['Province_State']==province_dict[province_name]) \n                 & (data['Day_num']==d), 'ConfirmedCases'] = pred_1[0]\n        model_2, pred_2 = lin_reg(X_train, Y_train_2, X_test)\n        data.loc[(data['Country_Region']==country_dict[country_name]) & (data['Province_State']==province_dict[province_name])\n                 & (data['Day_num']==d), 'Fatalities'] = pred_2[0]\n\n        # Recompute lags \n        data = calculate_lag(data, range(1,lag_size), 'ConfirmedCases')\n        data = calculate_lag(data, range(1,lag_size), 'Fatalities')\n        data.replace([np.inf, -np.inf], 0, inplace=True)\n        data.fillna(0, inplace=True)\n\n    #print(\"Process for \", country_name, \"\/\", province_name, \"finished in \", round(time.time() - ts, 2), \" seconds\")\n    \n    return data\n\n\n\n# Run the model for Spain\ncountry_name = 'Spain'\nmarch_day = 10\nday_start = 39 + march_day\ndates_list2 = dates_list[march_day:]\nlag_size = 30\n\ndata_c = lin_reg_with_lags_country(all_data, country_name, day_start, lag_size, country_dict, train_lim, test_lim)\nplot_real_vs_prediction_country(data_c, train, country_name, day_start, dates_list2, march_day)\nplot_real_vs_prediction_country_fatalities(data_c, train, country_name, day_start, dates_list2, march_day)","7c28a1cf":"ts = time.time()\n\n# Inputs\ncountry_name = \"Italy\"\nmarch_day = 10\nday_start = 39 + march_day\ndates_list2 = dates_list[march_day:]\nlag_size = 30\n\ndata_c = lin_reg_with_lags_country(all_data, country_name, day_start, lag_size, country_dict, train_lim, test_lim)\nplot_real_vs_prediction_country(data_c, train, country_name, day_start, dates_list2, march_day)\nplot_real_vs_prediction_country_fatalities(data_c, train, country_name, day_start, dates_list2, march_day)","bd0eea5e":"# Inputs\ncountry_name = \"Germany\"\nmarch_day = 10\nday_start = 39 + march_day\ndates_list2 = dates_list[march_day:]\nlag_size = 30\n\ndata_c = lin_reg_with_lags_country(all_data, country_name, day_start, lag_size, country_dict, train_lim, test_lim)\nplot_real_vs_prediction_country(data_c, train, country_name, day_start, dates_list2, march_day)\nplot_real_vs_prediction_country_fatalities(data_c, train, country_name, day_start, dates_list2, march_day)","990596ec":"# Inputs\ncountry_name = \"Albania\"\nmarch_day = 10\nday_start = 39 + march_day\ndates_list2 = dates_list[march_day:]\nlag_size = 7\n\ndata_c = lin_reg_with_lags_country(all_data, country_name, day_start, lag_size, country_dict, train_lim, test_lim)\nplot_real_vs_prediction_country(data_c, train, country_name, day_start, dates_list2, march_day)\nplot_real_vs_prediction_country_fatalities(data_c, train, country_name, day_start, dates_list2, march_day)","24e7b526":"# Inputs\ncountry_name = \"Andorra\"\nmarch_day = 10\nday_start = 39 + march_day\ndates_list2 = dates_list[march_day:]\nlag_size = 1\n\ndata_c = lin_reg_with_lags_country(all_data, country_name, day_start, lag_size, country_dict, train_lim, test_lim)\nplot_real_vs_prediction_country(data_c, train, country_name, day_start, dates_list2, march_day)\nplot_real_vs_prediction_country_fatalities(data_c, train, country_name, day_start, dates_list2, march_day)","13e438f2":"# Inputs\ncountry_name = \"Japan\"\nmarch_day = 10\nday_start = 39 + march_day\ndates_list2 = dates_list[march_day:]\nlag_size = 1\n\ndata_c = lin_reg_with_lags_country(all_data, country_name, day_start, lag_size, country_dict, train_lim, test_lim)\nplot_real_vs_prediction_country(data_c, train, country_name, day_start, dates_list2, march_day)\nplot_real_vs_prediction_country_fatalities(data_c, train, country_name, day_start, dates_list2, march_day)","47678448":"# Inputs\nday_start = 39 \nlag_size = 30\n\ntrain3 = train.copy()\ntrain3.Province_State.fillna(\"None\", inplace=True)\n\nresults_df = pd.DataFrame()\n\ntp = time.time()\n\n# Main loop for countries\nfor country_name in train3['Country_Region'].unique():\n\n    # List of provinces\n    provinces_list = train3[train3['Country_Region']==country_name]['Province_State'].unique()\n        \n    # If the country has several Province\/State informed\n    if len(provinces_list)>1:\n        for province_name in provinces_list:\n            pred_province = lin_reg_with_lags_country_province(all_data, country_name, province_name, day_start, lag_size, country_dict, train_lim, test_lim)\n            results_df = pd.concat([results_df, pred_province])\n\n    else:\n        pred_country = lin_reg_with_lags_country(all_data, country_name, day_start, lag_size, country_dict, train_lim, test_lim)\n        results_df = pd.concat([results_df, pred_country])\n        \nresults_df_submit = results_df.copy()\nresults_df_submit['ConfirmedCases'] = results_df_submit['ConfirmedCases'].apply(lambda x: np.expm1(x))\nresults_df_submit['Fatalities'] = results_df_submit['Fatalities'].apply(lambda x: np.expm1(x))\n        \n#get_submission(results_df_submit.loc[results_df_submit['ForecastId']!=-1], 'ConfirmedCases', 'Fatalities')\nprint(\"Complete process finished in \", time.time()-tp)","d3c02a95":"results_df_2 = results_df.copy()\n\nday_start = 39\ndata_pred2 = linreg_basic_all_countries(data, day_start, train_lim, test_lim)\nday_num_test = 57    # Day 2020-04-18\n\n\n# Main loop for countries\nfor country_name in train3['Country_Region'].unique():\n\n    # List of provinces\n    provinces_list = train3[train3['Country_Region']==country_name]['Province_State'].unique()\n\n    # Countries with several Province_State informed\n    if len(provinces_list)>1:\n        for province_name in provinces_list:\n        \n            tmp_index = all_data.index[(all_data['Country_Region']==country_dict[country_name]) & \n                           (all_data['Province_State']==province_dict[province_name]) & \n                           (all_data['Day_num']<day_num_test) & \n                           (all_data['ConfirmedCases']!=0)]\n\n            # When there is not enough data\n            if len(tmp_index) < 30:\n                \n                # ConfirmedCases\n                results_df_2.loc[((results_df_2['Country_Region']==country_dict[country_name]) & \n                                  (results_df_2['Province_State']==province_dict[province_name]) &\n                                  (results_df_2['Day_num']>=day_num_test)), 'ConfirmedCases'] = data_pred2.loc[((data_pred2['Country_Region']==country_dict[country_name]) & \n                                  (data_pred2['Province_State']==province_dict[province_name]) & \n                                  (data_pred2['Day_num']>=day_num_test)), 'Predicted_ConfirmedCases'].apply(lambda x: np.log1p(x))\n                \n                #Fatalities\n                results_df_2.loc[((results_df_2['Country_Region']==country_dict[country_name]) & \n                                  (results_df_2['Province_State']==province_dict[province_name]) &\n                                  (results_df_2['Day_num']>=day_num_test)), 'Fatalities'] = data_pred2.loc[((data_pred2['Country_Region']==country_dict[country_name]) & \n                                  (data_pred2['Province_State']==province_dict[province_name]) & \n                                  (data_pred2['Day_num']>=day_num_test)), 'Predicted_Fatalities'].apply(lambda x: np.log1p(x))\n                \n    # Countries without Province_State\n    else:\n        tmp_index = all_data.index[(all_data['Country_Region']==country_dict[country_name]) & \n                           (all_data['Day_num']<day_num_test) & \n                           (all_data['ConfirmedCases']!=0)]\n\n        # When there is not enough data\n        if len(tmp_index) < 30:\n            \n            #Confirmed Cases\n            results_df_2.loc[((results_df_2['Country_Region']==country_dict[country_name]) & \n                            (results_df_2['Day_num']>=day_num_test)), 'ConfirmedCases'] = data_pred2.loc[((data_pred2['Country_Region']==country_dict[country_name]) & \n                            (data_pred2['Day_num']>=day_num_test)), 'Predicted_ConfirmedCases'].apply(lambda x: np.log1p(x))\n            \n            results_df_2.loc[((results_df_2['Country_Region']==country_dict[country_name]) & \n                            (results_df_2['Day_num']>=day_num_test)), 'Fatalities'] = data_pred2.loc[((data_pred2['Country_Region']==country_dict[country_name]) & \n                            (data_pred2['Day_num']>=day_num_test)), 'Predicted_Fatalities'].apply(lambda x: np.log1p(x))\n            \nresults_df_2 = results_df_2.loc[results_df_2['Day_num']>=day_num_test]\n#results_df_2[['ConfirmedCases', 'Fatalities']] = results_df_2[['ConfirmedCases', 'Fatalities']].apply(lambda x: np.expm1(x))\n#get_submission(results_df_2, 'ConfirmedCases', 'Fatalities')","1abed942":"# ALTERNATIVE FUNCTIONS FOR FURTHER ANALYSIS\n\n# LGB Regressor \n\"\"\"\nmodel=lgb.LGBMRegressor(\n        n_estimators=1000,\n        learning_rate=0.3,\n        #min_child_weight=300,\n        #num_leaves=32,\n        colsample_bytree=0.8,\n        subsample=0.8,\n        max_depth=16,\n        #reg_alpha=0.04,\n        #reg_lambda=0.073,\n        #min_split_gain=0.0222415,\n        verbose=1,\n        seed=21)\n\nmodel.fit(X_train, Y_train_1, eval_metric=\"rmse\", eval_set=[(X_train, Y_train_1), (X_valid, Y_valid_1)], verbose=1, early_stopping_rounds = 20)\n\nY_test = model.predict(X_test)\n\"\"\"\n\n\n# Show Spain enriched data\n\"\"\"\ndata[(data['Lat']==40.0) & (data['Long']==-4.0) & (data['Day']==49)]\ntrain[(train['Country\/Region']=='Spain') & (train['Date']=='2020-03-12')]\ndata[(data['Lat']==40.0) & (data['Long']==-4.0) & (data['Day']==49)]['ConfirmedCases'].apply(lambda x: np.exp(x))\n\"\"\"\n\n\n# XGB Regressor\n\"\"\"\nreg = xgb.XGBRegressor()\nreg.fit(X_train, Y_train_1,\n        eval_set=[(X_train, Y_train_1), (X_valid, Y_valid_1)],\n        early_stopping_rounds=50,\n       verbose=True)\n\n_ = plot_importance(reg, height=0.9, max_num_features=20)\nY_pred = reg.predict(X_valid)\nprint(Y_pred)\n\"\"\"\n\n\n# XGB GridSearch\n\"\"\"\nts = time.time()\n\nxgb1 = xgb.XGBRegressor()\nparameters = {'nthread':[4], #when use hyperthread, xgboost may become slower\n              'learning_rate': [.07, .01, .005], #so called `eta` value\n              'max_depth': [4, 5, 6, 7],\n              'min_child_weight': [4, 5, 6, 7],\n              'silent': [0],\n              'subsample': [0.7],\n              'colsample_bytree': [0.7],\n              'n_estimators': [500]}\n\nxgb_grid = GridSearchCV(xgb1,\n                        parameters,\n                        cv = 3,\n                        n_jobs = 5,\n                        verbose=True)\n\nxgb_grid.fit(X_train, Y_train_1)\n\nprint(xgb_grid.best_score_)\nprint(xgb_grid.best_params_)\n\nY_pred = xgb_grid.predict(X_valid)\nprint(Y_pred, Y_valid_1)\n\nprint(\"Time spent: \", ts-time.time())\n\"\"\"\n\n\n# Some plots\n\"\"\"\nplt.plot(data[(data['Lat']==40.0) & (data['Long']==-4.0) & (data['Day']<=49)]['ConfirmedCases'])\n\ny = data[(data['Lat']==40.0) & (data['Long']==-4.0) & (data['Day']> 35) & (data['Day']<=49)][['ConfirmedCases']].apply(lambda x: np.log(x))\nx = range(0, len(y))\nplt.plot(x, y, 'go--')\n\"\"\"\n\n\n# Linear Regression\n\"\"\"\n# Create linear regression object\nregr = linear_model.LinearRegression()\n\n# Train the model using the training sets\nregr.fit(X_train, Y_train_1)\n\n# Make predictions using the testing set\ny_pred = regr.predict(X_test)\n\n# Compute mean squared error on real values (inverse transform of log)\n#rms = mean_squared_error(Y_test_1.apply(lambda x: np.exp(x)).astype('int16'), np.exp(y_pred).astype('int16'))\n#print(\"Mean squared error: \", rms)\n\"\"\"\n\n# LGB 2\n\"\"\"\ndef lgb_reg(X_train, Y_train_1, X_test):\n    # Create linear regression object\n    regr = lgb.LGBMRegressor(n_estimators=1000)\n\n    # Train the model using the training sets\n    regr.fit(X_train, Y_train_1, eval_metric=\"rmse\")\n\n    # Make predictions using the testing set\n    y_pred = regr.predict(X_test)\n    \n    return regr, y_pred\n\"\"\"\n\n\n# Predictions\n\"\"\"\n#Predictions\nX_test_compare = X_test.copy()\nX_test_compare['PredictedCases'] = y_pred_xgb\nX_test_compare.loc[(X_test_compare['Day']>=50) & (X_test_compare['Day']<73)]\n\n# Train test\ncompare = train.loc[train['Date'].isin(dates_overlap)]\ncompare = compare.merge(test[['Country\/Region', 'Date', 'ForecastId']], on=['Country\/Region', 'Date'])\n#compare['PredictedCases'] = X_test_compare.loc[(X_test_compare['Day']>=50) & (X_test_compare['Day']<73), 'PredictedCases']\ncompare\n\n# Total comparison\ntotal_compare = X_test_compare.join(compare, on='ForecastId', rsuffix='X_compare')\ntotal_compare[['ForecastId', 'Country\/Region', 'ConfirmedCases', 'PredictedCases']]\n\"\"\"\n\n\n# More plots for LinReg (all countries)\n\"\"\"\n# Select predictions from March 1st to March 22nd\n\npredicted_data = data_pred.loc[(data_pred['Country\/Region']==1)].Predicted_ConfirmedCases[:11]\n\ndates_list = ['2020-03-12','2020-03-13','2020-03-14','2020-03-15','2020-03-16','2020-03-17','2020-03-18',\n                 '2020-03-19','2020-03-20','2020-03-21','2020-03-22']\nreal_data = train.loc[(train['Country\/Region']=='Albania') & (train['Date'].isin(dates_list))]['ConfirmedCases']\ndates_list_num = list(range(0,len(dates_list)))\n\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,6))\n\nax1.plot(dates_list_num, predicted_data)\nax1.plot(dates_list_num, real_data)\nax1.legend(['Predicted cases', 'Actual cases', 'Train-test split'], loc='upper left')\nax1.set_xlabel(\"Day count (from March 1st to March 22nd)\")\nax1.set_ylabel(\"Confirmed Cases\")\n\nax2.plot(dates_list_num, np.log(predicted_data))\nax2.plot(dates_list_num, np.log(real_data))\nax2.legend(['Predicted cases', 'Actual cases', 'Train-test split'], loc='upper left')\nax2.set_xlabel(\"Day count (from March 1st to March 22nd)\")\nax2.set_ylabel(\"Log Confirmed Cases\")\n\"\"\"\n\n# ARIMA\n\"\"\"\n# definir conjunto de datos\nx = df_mon_to_fri\n\n# instanciar modelo\nsarima_model = SARIMAX(x, order=(2,0,1), seasonal_order=(2, 1, 0, 24))\n\n# ajustar modelo\nresults = sarima_model.fit()\n\n# mirar el AIC\nresults.aic\n\"\"\"","bda9a1a5":"## 4.2 Linear Regression for all countries (method 1) <a id=\"section42\"><\/a>\n\n\u4e00\u3064\u76ee\u306e\u65b9\u6cd5\u306f\u300110\u500b\u306e\u5c65\u6b74\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\u306e\u307f\u3067\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u3068\u3001Linear Regression\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u3044\u304f\u3064\u304b\u306e\u554f\u984c\u306e\u3042\u308b\u30b7\u30ca\u30ea\u30aa\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u3067\u3059\u3002 \u3059\u3079\u3066\u306e\u56fd\u3067\u30e2\u30c7\u30eb\u3092\u4e00\u822c\u5316\u3057\u3066\u3001\u907f\u3051\u3089\u308c\u306a\u3044\u554f\u984c\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u3059\u3079\u3066\u306e\u56fd\u3067\u5b9f\u884c\u3059\u308b\u624b\u9806\uff1a\n\n* 1.\u56fd\u3054\u3068\u306b\u30eb\u30fc\u30d7\n* 2.\u5dde\u30ea\u30b9\u30c8\u3092\u8a08\u7b97\u3059\u308b\n* 3.\u5dde\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u305e\u308c\u306b Linear Regressor\u3092\u5b9f\u884c\u3057\u307e\u3059\n* 4.\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u3001 Linear Regressor\u3092\u5b9f\u884c\u3059\u308b","685a3ba9":"## 1.1. COVID-19 global tendency excluding China <a id=\"section11\"><\/a>\n\n\u6700\u521d\u306e\u767a\u751f\u5143\u306e\u8a73\u7d30\u306f\u7d50\u679c\u306b\u5f37\u304f\u5e72\u6e09\u3059\u308b\u305f\u3081\u3001\u4e2d\u56fd\u3092\u500b\u5225\u306b\u5206\u6790\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002 \n\u6700\u521d\u306b\u4e2d\u56fd\u306a\u3057\u306e\u7d50\u679c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a","be6fcdbe":"\u5fae\u5206\u65b9\u7a0b\u5f0f\u7cfb\u3092\u89e3\u304f\u305f\u3081\u306b\u3001 [Runge-Kutta](https:\/\/en.wikipedia.org\/wiki\/Runge%E2%80%93Kutta_methods) \u3092\u7528\u3044\u307e\u3059\u3002\u65b9\u6cd5:","4f5e978f":"**\u89b3\u5bdf**\uff1a\u521d\u671f\u306e1\u6708\u304b\u30892\u6708\u306b\u304b\u3051\u3066\u306f\u7de9\u3084\u304b\u306b\u63a8\u79fb\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u3053\u308c\u3089\u306e\u6570\u5024\u306f\u767a\u75c7\u5143\u56fd\u3067\u3042\u308b\u4e2d\u56fd\u306e\u5f71\u97ff\u3092\u5f37\u304f\u53d7\u3051\u3066\u3044\u307e\u3059\u3002 COVID-19\u304c\u305d\u3053\u304b\u3089\u59cb\u307e\u3063\u305f\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u3001\u3053\u306e\u6642\u671f\u306e\u611f\u67d3\u3057\u305f\u75c7\u4f8b\u306b\u95a2\u3059\u308b\u30c7\u30fc\u30bf\u306f\u3001\u4fe1\u983c\u3067\u304d\u308b\u60c5\u5831\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \n\u5b9f\u969b\u3001\u611f\u67d3\u8005\u306e\u30b0\u30e9\u30d5\u306f\u30012020\u5e7402\u670811\u65e5\u9803\u306b\u5909\u66f4\u3055\u308c\u3001\u66f2\u7dda\u304c\u5f37\u304f\u30ab\u30fc\u30d6\u3057\u3066\u3044\u304d\u307e\u3059\u3002","512fbc63":"* **Germany**","95394212":"* **\u30a2\u30eb\u30d0\u30cb\u30a2**","354f1142":"## 6.\u8457\u8005\u58f0\u660e <a id=\"section6\"><\/a>\n* **\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306e\u76ee\u7684**\u306f\u3001\u30c7\u30fc\u30bf\u4e2d\u5fc3\u306e\u8996\u70b9\u304b\u3089\u306eCOVID-19\u9001\u4fe1\u306b\u95a2\u3059\u308b\u6d1e\u5bdf\u3092\u3001\u6559\u8a13\u7684\u3067\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u4e88\u6e2c\u3055\u308c\u305f\u7d50\u679c\u306f\u3001**\u5c06\u6765\u4f55\u304c\u8d77\u3053\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093**\u3002\u30c7\u30fc\u30bf\u63a2\u7d22\u304b\u3089\u5f97\u3089\u308c\u305f\u89b3\u5bdf\u306f\u500b\u4eba\u7684\u306a\u610f\u898b\u3067\u3059\u3002\n\n\n*\u4f1d\u67d3\u75c5\u306e\u62e1\u5927\u306b\u7279\u5316\u3057\u305f\u30e2\u30c7\u30eb\uff08SIR\u3068\u305d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306a\u3069\uff09\u306f\u3001\u4f1d\u67d3\u904e\u7a0b\u306e\u6839\u672c\u7684\u306a\u30e1\u30ab\u30cb\u30ba\u30e0\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u3001\u7279\u5b9a\u306e\u73fe\u8c61\u8ad6\u3092\u518d\u73fe\u3059\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u65b9\u3001\u79c1\u304c\u4f7f\u7528\u3057\u305f\u5358\u7d14\u306a\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u73fe\u5728\u306e\u4f53\u5236\u306b\u304a\u3051\u308b\u611f\u67d3\u306e\u77ed\u671f\u7684\u306a\u9032\u5c55\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u6700\u7d42\u7684\u306b\u306f\u3001\u30e2\u30c7\u30eb\u306e\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u306b\u3068\u3063\u3066\u7279\u306b\u91cd\u8981\u306a\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u307e\u305f\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u898b\u3064\u3051\u308b\u306e\u306b\u5f79\u7acb\u3064\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u6c7a\u3057\u3066\u79d1\u5b66\u7684\u6d41\u884c\u30e2\u30c7\u30eb\u3068\u6df7\u540c\u3057\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n\n\n*\u73fe\u5728\u306e\u4e88\u6e2c\u304c\u6210\u529f\u3059\u308b\u304b\u3069\u3046\u304b\u306f\u3001**\u73fe\u5728\u306e\u62e1\u6563\u30ec\u30b8\u30fc\u30e0\u306b\u5f37\u304f\u4f9d\u5b58**\u3057\u3066\u304a\u308a\u3001\u611f\u67d3\u75c7\u306e\u6570\u306f\u4f9d\u7136\u3068\u3057\u3066\u591a\u304f\u306e\u56fd\u3067\u6307\u6570\u95a2\u6570\u7684\u306b\u5897\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u5f7c\u3089\u306f\u6700\u5927\u306e\u4f1d\u67d3\u30d4\u30fc\u30af\u306b\u5230\u9054\u3059\u308b\u3067\u3042\u308d\u3046\u4fe1\u983c\u3067\u304d\u308b\u671f\u5f85\u3055\u308c\u308b\u65e5\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002\u6d41\u884c\u30e2\u30c7\u30eb\u306f\u305d\u306e\u3088\u3046\u306a\u63a8\u5b9a\u5024\u306b\u8fd1\u3065\u304d\u307e\u3059\u304c\u3001\u3053\u308c\u306b\u3064\u3044\u3066\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5909\u6570\u304c\u591a\u6570\u3042\u308a\u307e\u3059\uff08\u691c\u75ab\u3001\u914d\u5099\u3055\u308c\u3066\u3044\u308b\u533b\u7642\u30ea\u30bd\u30fc\u30b9\u306e\u54c1\u8cea\u3001\u74b0\u5883\u5bfe\u7b56\u306a\u3069\uff09\u3002\n\n\n*\u3053\u306e\u3088\u3046\u306a\u7d50\u679c\u3092\u9054\u6210\u3059\u308b\u306b\u306f\u3001\u304b\u306a\u308a\u306e\u91cf\u306e**\u8abf\u6574\u304c\u5fc5\u8981**\u3067\u3059\u3002\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u30b9\u30c6\u30c3\u30d7\u3067\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u4ee5\u524d\u306e\u65e5\u4ed8\u306e\u6570\u3001\u30e9\u30b0\u3092\u4f7f\u7528\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u30d5\u30a3\u30eb\u30bf\u30fc\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u6b20\u843d\u3057\u305f\u7f6e\u63db\u3067\u3055\u3048\u3001\u30ed\u30b0\u5909\u63db\u306b\u3088\u308a\u975e\u5e38\u306b\u7c97\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n* **\u4e88\u6e2c\u30e2\u30c7\u30eb**\u306f\u3044\u304f\u3064\u304b\u306e\u76ee\u7684\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u304c\u3001**\u6c7a\u3057\u3066\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u304b\u3089\u306e\u63a8\u5968\u3068\u3057\u3066**\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\uff08\u304a\u8a66\u3057\u30ec\u30d9\u30eb**\uff09\u3002","b4ab8669":"* **\u30a4\u30bf\u30ea\u30a2**","3db0c272":"**Observations**:\n* **Italy**. With almost 120.000 confirmed cases, Italy shows one of the most alarming scenarios of COVID-19. The infections curve is very steep, and more than 2% of population has been infected\n* **Spain**. Spain has the same number of cumulative infected cases than Italy, near 120.000. However, Spain's total population is lower (around 42 millions) and hence the percentage of population that has been infected rises up to 3%.\n* **United Kingdom**. Despite not being very far from them, the UK shows less cases. This may be due to the number of tests performed, but it's  soon to know for sure. The number of cases is around 40.000, this is, a 0.6 of the total population.\n* **Singapore**. Singapore is relatively isolated given that is an island, and the number of international travels is lower than for the other 3 countries. The number of cases is still very low (>1000), despite the general tendency is to increase. However, the infections started faster in the beginning, but the slope of the infections curve hasn't increased very much in the past weeks. A 0.2% of the population was infected\n\n\n**\u89b3\u5bdf**\uff1a<p>\n* **\u30a4\u30bf\u30ea\u30a2**\u3002 120,000\u3092\u8d85\u3048\u308b\u75c7\u4f8b\u304c\u78ba\u8a8d\u3055\u308c\u3001\u30a4\u30bf\u30ea\u30a2\u306fCOVID-19\u306e\u6700\u3082\u6182\u616e\u3059\u3079\u304d\u30b7\u30ca\u30ea\u30aa\u306e1\u3064\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u611f\u67d3\u66f2\u7dda\u306f\u975e\u5e38\u306b\u6025\u3067\u3001\u611f\u67d3\u3057\u305f\u4eba\u53e3\u306e\u5272\u5408\u306f2\uff05\u8fd1\u304f\u3067\u3059\n\n* **\u30b9\u30da\u30a4\u30f3**\u3002\u30b9\u30da\u30a4\u30f3\u306e\u7d2f\u7a4d\u611f\u67d3\u75c7\u4f8b\u6570\u306f\u30a4\u30bf\u30ea\u30a2\u3068\u540c\u3058\u3067\u3001120.000\u8fd1\u304f\u3067\u3059\u3002 \u305f\u3060\u3057\u3001\u30b9\u30da\u30a4\u30f3\u306e\u7dcf\u4eba\u53e3\u306f\u5c11\u306a\u304f\uff08\u7d044200\u4e07\u4eba\uff09\u3001\u3057\u305f\u304c\u3063\u3066\u3001\u611f\u67d3\u3057\u305f\u4eba\u53e3\u306e\u5272\u5408\u306f\u6700\u59273\uff05\u306b\u4e0a\u6607\u3057\u307e\u3059\u3002\n\n* **\u30a4\u30ae\u30ea\u30b9**\u3002\u305d\u308c\u3089\u304b\u3089\u305d\u308c\u307b\u3069\u9060\u304f\u306a\u3044\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u82f1\u56fd\u306f\u3088\u308a\u5c11\u306a\u3044\u75c7\u4f8b\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306b\u306f\u3044\u304f\u3064\u304b\u306e\u7406\u8ad6\u304c\u3042\u308a\u307e\u3059\u3002 @codingdon\u306f\u3001COVID-19\u30c6\u30b9\u30c8\u306e\u6570\u304c\u5c11\u306a\u3044\u65b9\u5411\u3092\u6307\u6458\u3057\u3066\u304a\u308a\u3001\u304a\u305d\u3089\u304fBrexit\u30d7\u30ed\u30bb\u30b9\u304c\u6d77\u5916\u65c5\u884c\u306b\u5f71\u97ff\u3092\u53ca\u307c\u3057\u3001COVID-19\u306e\u5230\u7740\u3092\u9045\u3089\u305b\u305f\u3068\u601d\u3044\u307e\u3059\u3068\u306b\u304b\u304f\u3001\u3053\u308c\u3089\u306f\u5358\u306a\u308b\u7406\u8ad6\u3067\u3042\u308a\u3001\u5f53\u7136\u306e\u3053\u3068\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u3002COVID-19\u306b\u3088\u3063\u3066\u5831\u544a\u3055\u308c\u305f\u82f1\u56fd\u5e02\u6c11\u306e0.004\uff05\u306e\u307f\u304c\u5831\u544a\u3055\u308c\u3066\u3044\u307e\u3059\u611f\u67d3\n\n* **\u30b7\u30f3\u30ac\u30dd\u30fc\u30eb**\u3002\u30b7\u30f3\u30ac\u30dd\u30fc\u30eb\u306f\u5cf6\u3067\u3042\u308b\u3053\u3068\u304b\u3089\u6bd4\u8f03\u7684\u5b64\u7acb\u3057\u3066\u304a\u308a\u3001\u6d77\u5916\u65c5\u884c\u306e\u6570\u306f\u4ed6\u306e3\u304b\u56fd\u3088\u308a\u3082\u5c11\u306a\u3044\u3067\u3059\u3002 \u4e00\u822c\u7684\u306a\u50be\u5411\u304c\u5897\u52a0\u3059\u308b\u50be\u5411\u306b\u3042\u308b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u75c7\u4f8b\u6570\u306f\u4f9d\u7136\u3068\u3057\u3066\u975e\u5e38\u306b\u5c11\u306a\u3044\uff08> 1000\uff09\u3002 \u305f\u3060\u3057\u3001\u611f\u67d3\u306f\u6700\u521d\u306f\u65e9\u304f\u59cb\u307e\u308a\u307e\u3057\u305f\u304c\u3001\u611f\u67d3\u66f2\u7dda\u306e\u50be\u304d\u306f\u3053\u3053\u6570\u9031\u9593\u3042\u307e\u308a\u5927\u304d\u304f\u306a\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u4eba\u53e3\u306e0.2\uff05\u304c\u611f\u67d3\u3057\u3066\u307e\u3059\u3002\n\n* **\u65e5\u672c**\u3000\u65e5\u672c\u3082\u30b7\u30f3\u30ac\u30dd\u30fc\u30eb\u3068\u540c\u3058\u5cf6\u3067\u3001\u96a3\u56fd\u3068\u306f\u5b64\u7acb\u3057\u3066\u3044\u307e\u3059\u3002\u611f\u67d3\u306f2020\u5e7402\u670813\u65e5\u306e\u521d\u671f\u304b\u3089\u59cb\u307e\u308a\u307e\u3057\u305f\u304c\u3001\u611f\u67d3\u66f2\u7dda\u306e\u50be\u304d\u306f\u3053\u3053\u6570\u9031\u9593\u3042\u307e\u308a\u5927\u304d\u304f\u306a\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002","564efb87":"# 1. Exploratory data analysis (EDA) <a id=\"section1\"><\/a>\n\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3059:","b928578e":"* **Albania**","7a7bb106":"N =\u4e16\u754c\u306e\u4eba\u53e3\u3001\u6700\u521d\u306e\u611f\u67d3\u75c7\u4f8b\u306f1\u3064\u3060\u3051\u3067\u3059, $\\beta=0.3$, $\\gamma=0.5$ and a leap pass $h_s = 0.1$ :","3595a1eb":"* **\u30a2\u30f3\u30c9\u30e9**","accdae31":"\u3059\u3079\u3066\u306e\u56fd\u3068\u65e5\u306b\u30e2\u30c7\u30eb\u3092\u62e1\u5f35\u3059\u308b\u306e\u306f\u7c21\u5358\u3067\u3059\u304c\u3001\u6ce8\u610f\u304c\u5fc5\u8981\u306a\u90e8\u5206\u306b\u5bfe\u51e6\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u7279\u5b9a\u306e\u56fd\u306e\u7d50\u679c\u3092\u5206\u6790\u3057\u305f\u3068\u304d\u306b\u898b\u305f\u3088\u3046\u306b\u3001\u4e00\u90e8\u306e\u56fd\u3067\u306f0\u3068\u306f\u7570\u306a\u308b\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\u304c\u5c11\u306a\u3059\u304e\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30b7\u30ca\u30ea\u30aa\u306f\u3001\u73fe\u5b9f\u3068\u4e56\u96e2\u3057\u305f\u4e88\u6e2c\u56de\u5e30\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u7d42\u308f\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3053\u306e\u554f\u984c\u3092\u514b\u670d\u3059\u308b\u305f\u3081\u306e\u79c1\u306e\u63d0\u6848\u306f\u3001\u73fe\u5728\u306e\u7d50\u679c\u3068[section 4.2.](#section42)\u306e\u7d50\u679c\u3092\u6df7\u5408\u3059\u308b\u3053\u3068\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u78ba\u8a8d\u3055\u308c\u305f\u75c7\u4f8b\u304c\u5c11\u306a\u3059\u304e\u308b\u3059\u3079\u3066\u306e\u56fd\u306f\u3001\u30bb\u30af\u30b7\u30e7\u30f34.2\u306e\u7d50\u679c\u3067\u4e88\u6e2c\u3055\u308c\u307e\u3059\u3002","4f64df63":"* **Andorra**","63b87a94":"\u30b9\u30da\u30a4\u30f3\u306e\u30e9\u30b0\u51e6\u7406\u306f\u9ad8\u901f\u306b\u306a\u308a\u307e\u3057\u305f\u3002","fc30b933":"## 5. \u611f\u67d3\u5f8c\u671f\u306e\u4e88\u6e2c <a id=\"section5\"><\/a>\n\n\u4f5c\u6210\u4e2d\u3002\u3002\u3002","c9440e31":"\u4ed6\u306e\u56fd\u3067\u3082\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n* **\u30b9\u30da\u30a4\u30f3**","c7c7d668":"* **\u30c9\u30a4\u30c4**","7b3b2f12":"## 1.2. COVID-19 tendency in China <a id=\"section12\"><\/a>\n\n\u4e2d\u56fd\u304c\u6700\u521d\u306e\u611f\u67d3\u56fd\u3060\u3063\u305f\u305f\u3081\u3001COVID-19\u306e\u52d5\u4f5c\u306f\u4ed6\u306e\u56fd\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u3002 \u533b\u7642\u30b7\u30b9\u30c6\u30e0\u306f\u30d1\u30f3\u30c7\u30df\u30c3\u30af\u306b\u5099\u3048\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u5b9f\u969b\u3001\u3044\u304f\u3064\u304b\u306e\u75c7\u4f8b\u304c\u5831\u544a\u3055\u308c\u308b\u307e\u3067\u8ab0\u3082\u30a6\u30a4\u30eb\u30b9\u306b\u6c17\u3065\u3044\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u3055\u3089\u306b\u3001\u4e2d\u56fd\u653f\u5e9c\u306f\u304b\u306a\u308a\u306e\u77ed\u671f\u9593\u3067\u5f37\u529b\u306a\u7af6\u5408\u5bfe\u7b56\u3092\u8b1b\u3058\u3001\u30a6\u30a4\u30eb\u30b9\u306f\u5e83\u304f\u8513\u5ef6\u3057\u3066\u3044\u308b\u304c\u3001\u611f\u67d3\u306e\u5897\u52a0\u3092\u6291\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u307e\u3059\u3002","33dd2ede":"## 4.4. Linear regression\uff08\u7dda\u5f62\u56de\u5e30\uff09\u306b\u30e9\u30b0\u3092\u8003\u616e\u3059\u308b <a id=\"section44\"><\/a>\n\n\u3053\u308c\u3089\u306e\u7d50\u679c\u304b\u3089\u3001\u7dda\u5f62\u56de\u5e30\uff08Linear regression\uff09\u306fCOVID-19\u30c7\u30fc\u30bf\u306e\u521d\u671f\u6bb5\u968e\u306b\u9069\u3057\u305f\u30a2\u30d7\u30ed\u30fc\u30c1\u3067\u3042\u308b\u3068\u79c1\u306f\u78ba\u4fe1\u3057\u3066\u3044\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u3001\u3053\u308c\u306f\u79c1\u305f\u3061\u304c\u5206\u6790\u3057\u3066\u3044\u308b\u6700\u521d\u306e\u767a\u751f\u306b\u306e\u307f\u5f53\u3066\u306f\u307e\u308a\u3001\u65b0\u3057\u3044\u611f\u67d3\u306e\u6570\u304c\u6e1b\u5c11\u3059\u308b\u6642\u671f\u3092\u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u77ed\u671f\u7684\u306a\u4e88\u6e2c\u306e\u76ee\u7684\u3067\u306f\u3001\u3059\u3079\u3066\u304c\u9806\u8abf\u3067\u3042\u308a\u3001\u7d50\u679c\u3092\u6539\u5584\u3057\u3088\u3046\u3068\u52aa\u3081\u3066\u3044\u307e\u3059\u3002\n\n\u4ee5\u524d\u306b\u3044\u304f\u3064\u304b\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u8a08\u7b97\u3057\u305f\u30e9\u30b0\u5909\u6570\u3092\u899a\u3048\u3066\u3044\u307e\u3059\u304b\uff1f\u4eca\u3053\u305d\u305d\u308c\u3089\u3092\u4f7f\u7528\u3059\u308b\u6642\u3067\u3059\u304c\u3001\u6700\u521d\u306b\u89e3\u6c7a\u3059\u308b\u3079\u304d\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u6b21\u306e\u611f\u67d3\u65e5\u3092\u4e88\u6e2c\u3059\u308b\u5834\u5408\u3001\u6700\u521d\u306e\u65e5\u306b\u3064\u3044\u3066\u306f\u3059\u3079\u3066\u306e\u30e9\u30b0\u304c\uff08\u524d\u65e5\u304b\u3089\uff09\u5831\u544a\u3055\u308c\u307e\u3059\u304c\u3001\u6b21\u306e\u65e5\u306b\u3064\u3044\u3066\u306f\u3069\u3046\u3067\u3059\u304b\uff1f ** ConfirmedCases\u306e\u6570\u306f\u30c8\u30ec\u30a4\u30f3\u30b5\u30d6\u30bb\u30c3\u30c8\u306b\u3064\u3044\u3066\u306e\u307f\u65e2\u77e5\u3067\u3042\u308b\u305f\u3081\u3001**\u30e9\u30b0\u306e\u591a\u304f\u306f\u4e0d\u660e\u3067\u3059**\uff080\u3068\u3057\u3066\u30d5\u30e9\u30b0\u304c\u7acb\u3066\u3089\u308c\u307e\u3059\uff09\u3002\u3053\u308c\u3092\u514b\u670d\u3059\u308b\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n\u30b9\u30c6\u30c3\u30d71.\u3059\u3079\u3066\u306e\u30b1\u30fc\u30b9\u3068\u30e9\u30b0\u304c\u5831\u544a\u3055\u308c\u305f\u30c8\u30ec\u30a4\u30f3\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u59cb\u3081\u307e\u3059\n\u30b9\u30c6\u30c3\u30d72.\u7dda\u5f62\u56de\u5e30\uff08Linear regression\uff09\u306b\u3088\u308a\u3001\u7fcc\u65e5\u306e\u307f\u3092\u4e88\u6e2c\n\u30b9\u30c6\u30c3\u30d73.\u65b0\u3057\u3044\u4e88\u6e2c\u3092\u78ba\u8a8d\u6e08\u307f\u306e\u30b1\u30fc\u30b9\u3068\u3057\u3066\u8a2d\u5b9a\u3057\u307e\u3059\n\u30b9\u30c6\u30c3\u30d74.\u30e9\u30b0\u3092\u518d\u8a08\u7b97\u3059\u308b\n\u30b9\u30c6\u30c3\u30d75.\u6b8b\u308a\u306e\u3059\u3079\u3066\u306e\u65e5\u306b\u3064\u3044\u3066\u3001\u30b9\u30c6\u30c3\u30d72\u304b\u3089\u30b9\u30c6\u30c3\u30d74\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\n\n\u3053\u308c\u3089\u306e\u65b0\u3057\u3044\u6a5f\u80fd\u3092\u5099\u3048\u305f\u30e2\u30c7\u30eb\u306e\u52d5\u4f5c\u3092\u5206\u6790\u3059\u308b\u305f\u3081\u306b\u3001\u5358\u4e00\u306e\u56fd\u3067\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3092\u958b\u59cb\u3057\u307e\u3059\u3002","89d331b5":"\u4eca\u56de\u9069\u7528\u3057\u305f\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb(Linear Regression)\u306f\u3001\u975e\u5e38\u306b\u5358\u7d14\u3067\u3042\u308a\u3001\u8981\u7d20\u306e\u7279\u5fb4\u306e\u307f\u304c\u8003\u616e\u3055\u308c\u307e\u3059\n\u4f8b\u3048\u3070\u3001\u56fd\/\u5730\u57df\u3001\u65e5\u4ed8\u60c5\u5831\u3001\u7def\u5ea6\/\u7d4c\u5ea6\u3002\u30e9\u30b0\u3001\u30c8\u30ec\u30f3\u30c9\u3001\u56fd\u306e\u8a73\u7d30\u306a\u3069\u306e\u30c7\u30fc\u30bf\u306f\u3001\u5165\u529b\u3068\u3057\u3066\u5c0e\u5165\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\n\u57fa\u672c\u7684\u306a\u3001\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n1. \u8981\u7d20\u3000\u30fb\u30fb\u30c7\u30fc\u30bf\u306b\u5fc5\u8981\u306a\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\n2. \u65e5\u4ed8\u3000\u30fb\u30fb 2020\u5e7403\u670801\u65e5\u304b\u30892020\u5e7403\u670818\u65e5\u307e\u3067\u306etrain\u30c7\u30fc\u30bf\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\n2. \u30ed\u30b0\u5909\u63db\u3000\u30fb\u30fb\u3000 ConfirmedCases\u3068Fatalities\u306b\u30ed\u30b0\u5909\u63db\u3092\u9069\u7528\u3059\u308b\n3. \u7121\u9650\u3000\u30fb\u30fb\u3000\u5bfe\u6570\u306e\u7121\u9650\u5927\u30920\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002log\uff080\uff09\u306e\u5bfe\u6570\u306e\u6f38\u8fd1\u7684\u306a\u52d5\u4f5c\u3092\u8003\u3048\u308b\u3068\u3001\u3053\u308c\u306f\u9006\u5909\u63db\uff08\u6307\u6570\uff09\u3092\u9069\u7528\u3059\u308b\u30680\u3067\u306f\u306a\u304f1\u304c\u8fd4\u3055\u308c\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u3053\u306e\u554f\u984c\u306f\u591a\u304f\u306e\u56fd\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u307e\u305b\u3093\u3001\u305f\u3060\u3057\u3001\u30af\u30ea\u30fc\u30f3\u306a\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f\u3001\u9045\u304b\u308c\u65e9\u304b\u308c\u53d6\u308a\u7d44\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n4. \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\/\u30c6\u30b9\u30c8\u5206\u5272\u3000\u30fb\u30fb train\/valid\/test\u3078\u306e\u5206\u5272\n5. \u4e88\u6e2c\u3000\u30fb\u30fb\u3000\u7dda\u5f62\u56de\u5e30\u3001\u56fd\u3054\u3068\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u304a\u3088\u3073\u53c2\u52a0\u30c7\u30fc\u30bf\n6. \u30b5\u30d6\u30df\u30c3\u30c8\u3000\u30fb\u30fb\u3000\u7d50\u679c\u3092\u6b63\u3057\u3044\u5f62\u5f0f\u3067\u9001\u4fe1\u3057\u3001\u6307\u6570\u3092\u9006\u5bfe\u6570\u5909\u63db\u306b\u9069\u7528\u3059\u308b","5a6b0d7d":"\u6700\u521d\u306b\u78ba\u8a8d\u3055\u308c\u305f\u30b1\u30fc\u30b9\u304b\u3089\u306e\u611f\u67d3\u306e\u9032\u5c55\u30924\u30ab\u56fd\uff08\uff0b\u65e5\u672c\uff09\u3067\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u65e5\u672c\u306f4\u304b\u56fd\u306b\u6bd4\u3079\u3066\u3001\u4eba\u53e3\u6bd4\u7387\u3067\u307f\u305f\u5834\u5408\u306b\u3001\u30a6\u30a3\u30eb\u30b9\u306e\u9032\u884c\u304c\u9045\u3044\u3067\u3059\u3002","9c16ac9a":"**\u89b3\u5bdf**\uff1a\n* **\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc**\u3002 2\u9031\u9593\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3092\u4f7f\u7528\uff082\u670826\u65e5\u304b\u30893\u670811\u65e5\u307e\u3067\uff09\u3001\u904e\u53bb30\u30e9\u30b0\n* **\u5341\u5206\u306a\u30c7\u30fc\u30bf**\u3002 \uff08\u30b9\u30da\u30a4\u30f3\u3001\u30a4\u30bf\u30ea\u30a2\u3001\u30c9\u30a4\u30c4\uff09\u3002 \uff083\u670811\u65e5\u4ee5\u524d\u306e\uff09\u30c8\u30ec\u30a4\u30f3\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u8907\u6570\u306eConfirmedCases\uff01= 0\u304c\u3042\u308b\u56fd\u306e\u5834\u5408\u3001\u4e88\u6e2c\u306f\u975e\u5e38\u306b\u6b63\u78ba\u3067\u3001\u5b9f\u969b\u306e\u78ba\u8a8d\u6e08\u307f\u30c7\u30fc\u30bf\u306b\u985e\u4f3c\u3057\u3066\u3044\u307e\u3059\u3002\n* **\u4e0d\u5341\u5206\u306a\u30c7\u30fc\u30bf**\u3002 \uff08\u30a2\u30eb\u30b8\u30a7\u30ea\u30a2\u3001\u30a2\u30f3\u30c9\u30e9\uff09\u3002 \u5217\u8eca\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\u306e\u6570\u304c\u5c11\u306a\u3044\u56fd\u3067\u306f\u3001\u6f5c\u5728\u7684\u306b\u60b2\u60e8\u306a\u4e88\u6e2c\u304c\u793a\u3055\u308c\u307e\u3059\u3002 \u30b1\u30fc\u30b9\u306e\u6570\u304c\u5c11\u306a\u3044\u5834\u5408\u3001\u7dda\u5f62\u5909\u63db\u304c\u7d9a\u304f\u5bfe\u6570\u5909\u63db\u3067\u306f\u3001\u5c06\u6765\u306e\u52d5\u4f5c\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3067\u304d\u307e\u305b\u3093\n* **\u30c7\u30fc\u30bf\u306a\u3057**\u3002 \u30c8\u30ec\u30a4\u30f3\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u78ba\u8a8d\u3055\u308c\u305f\u75c7\u4f8b\u6570\u304c0\u307e\u305f\u306f\u7121\u8996\u3067\u304d\u308b\u5834\u5408\u3001\u30e2\u30c7\u30eb\u306f\u5e38\u306b\u611f\u67d3\u304c\u306a\u3044\u3068\u4e88\u6e2c\u3057\u307e\u3059","2a7b7c79":"\u6700\u5f8c\u306b\u3001\u611f\u67d3\u75c7\u306e\u9032\u884c\u5177\u4f53\u3092\u77e5\u308b\u305f\u3081\u306b\u3001\u5358\u306b\u521d\u671f\u6761\u4ef6\u3092rk4\u3067\u5b9a\u7fa9\u3057\u307e\u3059 method:","e8b68c3a":"## 2.1. Implementing the SIR model <a id=\"section21\"><\/a>\n\nSIR\u30e2\u30c7\u30eb\u306f\u591a\u304f\u306e\u65b9\u6cd5\u3067\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\u30b7\u30b9\u30c6\u30e0\u3092\u652f\u914d\u3059\u308b\u5fae\u5206\u65b9\u7a0b\u5f0f\u304b\u3089\u3001\u5e73\u5747\u5834\u8fd1\u4f3c\u5185\u3067\u307e\u305f\u306f\u30bd\u30fc\u30b7\u30e3\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u30c0\u30a4\u30ca\u30df\u30af\u30b9\u3092\u5b9f\u884c\u3057\u307e\u3059\uff08\u30b0\u30e9\u30d5\uff09\u3002 \u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u6700\u521d\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u9078\u629e\u3057\u307e\u3057\u305f\u3002\u3053\u3053\u3067\u306f\u3001\u30eb\u30f3\u30b2\uff1d\u30af\u30c3\u30bf\u6cd5\uff08Runge-Kutta\uff09\u3092\u5b9f\u884c\u3057\u3066\u5fae\u5206\u65b9\u7a0b\u5f0f\u30b7\u30b9\u30c6\u30e0\u3092\u89e3\u304f\u3060\u3051\u3067\u3059\u3002\n\ndif.eqs\u95a2\u6570\u306f\u3001 \u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002","9db00f0b":"\u5bfe\u6570\u5909\u63db\u306e\u7d50\u679c\u306f\u3001\u76f4\u7dda\u56de\u5e30\u306e\u3088\u3046\u306a\u7d20\u6674\u3089\u3057\u3044\u76f4\u7dda\u306b\u306a\u308a\u307e\u3059\u3002 \n\u305f\u3060\u3057\u30012\u3064\u306e\u91cd\u8981\u306a\u70b9\u3092\u660e\u78ba\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\n*\u3053\u306e\u300c\u307b\u307c\u6307\u6570\u95a2\u6570\u7684\u306a\u632f\u308b\u821e\u3044\u300d\u306f\u3001\u30d1\u30f3\u30c7\u30df\u30c3\u30af\u306e\u521d\u671f\u611f\u67d3\u6bb5\u968e\uff08SIR\u30e2\u30c7\u30eb\u3067\u306e\u611f\u67d3\u306e\u521d\u671f\u5897\u52a0\uff09\u306b\u306e\u307f\u5f53\u3066\u306f\u307e\u308a\u307e\u3059\u304c\u3001\u307b\u3068\u3093\u3069\u306e\u56fd\u306e\u73fe\u6642\u70b9\u306e\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\n*\u904e\u53bb10\u65e5\u9593\u306e\u30c7\u30fc\u30bf\u306e\u307f\u3092\u62bd\u51fa\u3059\u308b\u306e\u306f\u306a\u305c\u3067\u3059\u304b\uff1f 3\u3064\u306e\u7406\u7531\u304c\u3042\u308a\u307e\u3059\u3002\n1. \u9032\u5316\u306e\u975e\u5e38\u306b\u77ed\u671f\u7684\u306a\u8981\u7d20\u3092\u6b63\u78ba\u306b\u6349\u3048\u308b\u305f\u3081\n2. \u9001\u4fe1\u901f\u5ea6\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u3066\u304d\u305f\u7279\u5b9a\u306e\u5909\u6570\u306e\u5f71\u97ff\u3092\u9632\u3050\u305f\u3081\uff08\u9694\u96e2\u3068\u81ea\u7531\u5faa\u74b0\uff09\n3. \u75c7\u4f8b\u3092\u78ba\u8a8d\u3059\u308b\u969b\u306e\u57fa\u6e96\u306e\u9055\u3044\u3092\u9632\u3050\u305f\u3081\uff08\u4e2d\u56fd\u30d7\u30ed\u30c3\u30c8\u306e\u5947\u5999\u306a\u50be\u659c\u3092\u899a\u3048\u3066\u3044\u307e\u3059\u304b\uff1f\uff09","9dd1382d":"**\u89b3\u5bdf**\uff1a<p>\n-\u611f\u67d3\u8005\u3000I\uff08infected\uff09\u306f\u4e00\u5b9a\u671f\u9593\u5897\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u304c\u3001\u6642\u9593\u3068\u3068\u3082\u306b\u611f\u67d3\u306b\u5bfe\u3059\u308b\u514d\u75ab\u304c\u3064\u304d \u56de\u5fa9 R(recover\/decease\uff09\u304c\u5897\u3048\u3066\u304d\u307e\u3059\u3002\n \u305d\u306e\u305f\u3081\u3001\u6700\u7d42\u7684\u306b\u611f\u67d3\u8005\u3000I\uff08infected\uff09\u306f\u6e1b\u5c11\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n \n-\u611f\u67d3\u8005\u3000I\uff08infected\uff09\u304c\u5897\u3048\u3066\u304f\u308b\u3068\u3001\u611f\u67d3\u75c7\u3078\u306e\u514d\u75ab\u304c\u306a\u3044\u4eba\uff08Susceptible\uff09\u306f\u6e1b\u5c11\u3057\u3066\u3044\u304d\u3001\u6700\u7d42\u7684\u306b0\u306b\u8fd1\u3044\u72b6\u614b\u306b\u306a\u308a\u307e\u3059\u3002\n    \n-\u56de\u5fa9 R(recover\/decease\uff09\u306e\u5834\u5408\u306f\u3001\u53cd\u5bfe\u306e\u3053\u3068\u304c\u8d77\u3053\u308a\u307e\u3059\n\n\u7570\u306a\u308b\u521d\u671f\u6761\u4ef6\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u5024\u304c\u4ed6\u306e\u30b7\u30ca\u30ea\u30aa\u306b\u3064\u306a\u304c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30b7\u30b9\u30c6\u30e0\u3092\u7814\u7a76\u3059\u308b\u305f\u3081\u306b\u3053\u308c\u3089\u306e\u6570\u5024\u3092\u81ea\u7531\u306b\u8a66\u3057\u3066\u304f\u3060\u3055\u3044\u3002","0a5742b7":"## 2.2. SRI\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u5b9f\u969b\u306e\u30b1\u30fc\u30b9\u306b\u5f53\u3066\u306f\u3081\u308b <a id=\"section22\"><\/a>\nSIR\u30e2\u30c7\u30eb\u306f\u7406\u8ad6\u7684\u306a\u3082\u306e\u3067\u3042\u308a\u3001\u30a6\u30a4\u30eb\u30b9\u306e\u4f1d\u67d3\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002COVID-19\u5c55\u958b\u306e\u5b9f\u969b\u306e\u8fd1\u4f3c\u5024\u306b\u8fd1\u3044\u3082\u306e\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u30b7\u30b9\u30c6\u30e0\u306e\u9032\u5316\u3092\u4e88\u6e2c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u5834\u5408\u306f\u3001\u5404\u30b1\u30fc\u30b9\u306e$\\beta$ and $\\gamma$\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u62bd\u51fa\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","001618be":"* **Spain**","ba2dc385":"\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u304c\u9752\u25cf\u306b\u306a\u308a\u307e\u3059\u3001\u30aa\u30ec\u30f3\u30b8\u306e\u30e9\u30a4\u30f3\u304c\u3002\u4e88\u6e2c\u30e2\u30c7\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\n\n**\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9069\u5408\u306b\u6e80\u8db3\u3057\u3066\u3044\u307e\u305b\u3093**\u3002\n\u5b9f\u30c7\u30fc\u30bf\u3068\u4e88\u6e2c\u30c7\u30fc\u30bf\u304c\u3074\u3063\u305f\u308a\u4e00\u81f4\u3057\u3066\u307e\u305b\u3093\u3002 \n\u597d\u5947\u5fc3\u306e\u305f\u3081\u306b\u3053\u308c\u304b\u3089\u3082\u4f5c\u696d\u3092\u7d9a\u3051\u307e\u3059\u304c\u3001\u4e00\u65e6\u306f\u4e88\u6e2c\u306b\u5bfe\u3059\u308b\u30c7\u30fc\u30bf\u4e2d\u5fc3\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u9032\u3081\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002","97b76478":"# \u3010\u65e5\u672c\u8a9e\u3011COVID Global Forecast: SIR model + ML regressions\n\n\u3010\u306f\u3058\u3081\u306b\u3011\n\u65e5\u672c\u4eba\u306e\u65b9\u304c\u59cb\u3081\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u65e5\u672c\u8a9e\u8a33\u3084\u89e3\u8aac\u3092\u4ed8\u3051\u52a0\u3048\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u30b5\u30a4\u30c8\u306f\u3001[Patrick S\u00e1nchez](https:\/\/www.kaggle.com\/saga21)\u304c\u4f5c\u6210\u3057\u3066\u307e\u3059\u3002 \n\u30aa\u30ea\u30b8\u30ca\u30eb\u3067\u306f\u3001\u4e2d\u56fd\u3001\u30a4\u30bf\u30ea\u30a2\u3001\u30b9\u30da\u30a4\u30f3\u3001\u30a4\u30ae\u30ea\u30b9\u3001\u30b7\u30f3\u30ac\u30dd\u30fc\u30eb\u306a\u3069\u306e\u500b\u5225\u8003\u5bdf\u3092\u884c\u3063\u3066\u307e\u3059\u304c\u3001\u3053\u308c\u306b\u3001\u65e5\u672c\u3092\u52a0\u3048\u3066\u3044\u307e\u3059\n[COVID Global Forecast: SIR model + ML regressions](https:\/\/www.kaggle.com\/saga21\/covid-global-forecast-sir-model-ml-regressions\/#data )\n\n\u3010\u8981\u7d04\u3011\n\u3053\u306eNotebook\u306e\u76ee\u7684\u306f\u30c7\u30fc\u30bf\u4e2d\u5fc3\u306e\u8996\u70b9\u304b\u3089\u306eCOVID-19\uff08\u30b3\u30ed\u30ca\uff09\u9001\u4fe1\u306b\u95a2\u3059\u308b\u6d1e\u5bdf\u3092\u3001\u6559\u8a13\u7684\u3067\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\u5c06\u6765\u306e\u4e88\u6e2c\u3092\u3059\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30c7\u30fc\u30bf\u63a2\u7d22\u304b\u3089\u5f97\u3089\u308c\u305f\u89b3\u5bdf\u306f\u500b\u4eba\u7684\u306a\u610f\u898b\u3067\u3059\u3002\n\n\n\u3010\u672c\u6587\u3011\n\n\u30b0\u30ed\u30fc\u30d0\u30eb\u306aCOVID-19\u30d1\u30f3\u30c7\u30df\u30c3\u30af\u306e\u72b6\u6cc1\u306b\u304a\u3044\u3066\u3001Kaggle\u306f\u30a6\u30a4\u30eb\u30b9\u306b\u95a2\u3059\u308b\u672a\u89e3\u6c7a\u306e\u79d1\u5b66\u7684\u8cea\u554f\u306e\u3044\u304f\u3064\u304b\u306b\u7b54\u3048\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6709\u7528\u306a\u6d1e\u5bdf\u3092\u63d0\u4f9b\u3059\u308b\u305f\u3081\u306b\u3001\u3044\u304f\u3064\u304b\u306e\u8ab2\u984c\u306b\u53d6\u308a\u7d44\u307f\u307e\u3057\u305f\u3002 \n\u3053\u308c\u306f\u3001[COVID19 Global Forecasting](https:\/\/www.kaggle.com\/c\/covid19-global-forecasting-week-1)\u306e\u5834\u5408\u3067\u3042\u308a\u3001\u53c2\u52a0\u8005\u306f\u30d1\u30f3\u30c7\u30df\u30c3\u30af\u3092\u4e88\u6e2c\u3059\u308b\u305f\u3081\u306b\u4e16\u754c\u4e2d\u306e\u30c7\u30fc\u30bf\u306b\u9069\u5408\u3055\u305b\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u307e\u3059 \u3067\u304d\u308c\u3070\u3001COVID-19\u306e\u611f\u67d3\u884c\u52d5\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u8981\u56e0\u3092\u7279\u5b9a\u3059\u308b\u306e\u306b\u5f79\u7acb\u3064\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n\n**TABLE OF CONTENTS**\n\n1. [Exploratory data analysis (EDA)](#section1)\n\n    1.1. [COVID-19 global tendency excluding China](#section11)\n    \n    1.2. [COVID-19 tendency in China](#section12)\n    \n    1.3. [Italy, Spain, UK and Singapore](#section13)\n    \n2. [SIR model](#section2)\n\n    2.1. [Implementing the SIR model](#section21)\n    \n    2.2. [Fit SIR parameters to real data](#section22)\n    \n3. [Data enrichment](#section3)\n\n    3.1. [Join data, filter dates and clean missings](#section31)\n    \n    3.2. [Compute lags and trends](#section32)\n    \n    3.3. [Add country details](#section33)\n    \n4. [Predictions for the early stages of the transmission](#section4)\n\n    4.1. [Linear Regression for one country](#section41)\n    \n    4.2. [Linear Regression for all countries (method 1)](#section42)\n    \n    4.3. [Linear Regression for all countries (method 2)](#section43)\n    \n    4.4. [Linear regression with lags](#section44)\n    \n5. [Predictions for the late stages of the transmission](#section5)\n    \n6. [Statement of the author](#section6)\n\n**\u6ce8\u610f **\n\u4ee5\u4e0b\u306f\u3001[COVID Global Forecast: SIR model + ML regressions](https:\/\/www.kaggle.com\/saga21\/covid-global-forecast-sir-model-ml-regressions\/#data )\u3000\u306e\u514d\u8cac\u4e8b\u9805\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u3010\u65e5\u672c\u8a9e\u7248\u3011Notebook\u306e\u66f4\u65b0\u4e88\u5b9a\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n**\u514d\u8cac\u4e8b\u98051 **\uff1a\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306f\u3001\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u4e88\u6e2c\u3092\u6539\u5584\u3059\u308b\u76ee\u7684\u3067\u983b\u7e41\u306b\u66f4\u65b0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n**\u514d\u8cac\u4e8b\u98052 **\uff1a\u6700\u65b0\u306e\u30b1\u30fc\u30b9\u3092\u542b\u3081\u308b\u305f\u3081\u306b\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3082\u6bce\u65e5\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002 \u6700\u65b0\u306e\u72b6\u614b\u306b\u3057\u3066\u3001\u30c7\u30fc\u30bf\u6f0f\u6d29\u3084\u305d\u306e\u4ed6\u306e\u6f5c\u5728\u7684\u306a\u554f\u984c\u3092\u9632\u3050\u305f\u3081\u306b\u3001\u300c\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3055\u308c\u305f\u65e5\u4ed8\u300d\u306e\u6bce\u65e5\u306e\u66f4\u65b0\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002\n\n**\u514d\u8cac\u4e8b\u98053 **\uff1aCOVID Global Forecasting\u30b3\u30f3\u30c6\u30b9\u30c8\u306f\u6bce\u9031\u66f4\u65b0\u3055\u308c\u307e\u3059\uff08\u65b0\u3057\u3044\u30b3\u30f3\u30c6\u30b9\u30c8\u3068\u3068\u3082\u306b\uff09\u3002 \u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3092\u524d\u9031\u304b\u3089\u65b0\u3057\u3044\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306b\u79fb\u52d5\u3057\u3066\u3001\u6700\u65b0\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u306b\u306e\u307f\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002","3bafaa07":"\u65e5\u672c","1aed056a":"[Tanu's dataset](https:\/\/www.kaggle.com\/tanuprabhu\/population-by-country-2020)\u3092\u5f15\u7528\u3057\u305f\u7d50\u679c\u3001Country (or dependency)\u3000\u2192Province_State\u3000\u306b\u5909\u66f4\u3055\u308c\u3066\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001japan\u306fProvince_State\t\u306f\u300111\u3068\u306a\u308a\u307e\u3059\u3002","cc96bfa4":"\u65e5\u672c\u306e\u5834\u5408","283255e3":"# 4. \u611f\u67d3\u306e\u521d\u671f\u6bb5\u968e\u306e\u4e88\u6e2c <a id=\"section4\"><\/a>\n\n\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u76ee\u7684\u306f\u3001\u4ed6\u306e\u56de\u5e30\u554f\u984c\u3068\u540c\u69d8\u306b\u3001\u30c7\u30fc\u30bf\u4e2d\u5fc3\u306e\u89b3\u70b9\u304b\u3089\u62e1\u5f35\u306e\u9032\u5316\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u6700\u7d42\u7684\u306a\u63d0\u51fa\u306b\u306f2020\u5e7403\u670812\u65e5\u4ee5\u964d\u306e\u30c7\u30fc\u30bf\u306e\u307f\u542b\u3081\u307e\u305b\u3093\u3002\n\nModels to apply:\n1. Linear Regression for one country\u3000\n2. Linear Regression for all countries (method 1)\n3. Linear Regression for all countries (method 2)","debe773a":"## 4.1. Linear Regression\uff08\u7dda\u5f62\u56de\u5e30\uff09\u3092\uff11\u3064\u306e\u56fd\u3060\u3051\u306b\u9069\u7528\u3059\u308b  <a id=\"section41\"><\/a>\n\n\u79c1\u305f\u3061\u306f\u30d1\u30f3\u30c7\u30df\u30c3\u30af\u306e\u5c06\u6765\u306e\u6642\u9593\u767a\u5c55\u3092\u4e88\u6e2c\u3057\u305f\u3044\u306e\u3067\u3001\u6700\u521d\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u5358\u7d14\u306aLinear Regression\uff08\u7dda\u5f62\u56de\u5e30\uff09\u3092\u4f7f\u3044\u307e\u3059\u3002 \u305f\u3060\u3057\u5b9f\u969b\u306f\u7dda\u5f62\u3067\u306f\u306a\u304f\u6307\u6570\u95a2\u6570\u7684\u3067\u3042\u308b\u3053\u3068\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff08\u611f\u67d3\u306e\u958b\u59cb\u6642\u3092\u5206\u6790\u3057\u305f\u3044\u305f\u3081\u306b\u3001Linear Regression\uff08\u7dda\u5f62\u56de\u5e30\uff09\u3092\u9069\u5f53\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\uff09\u305d\u306e\u305f\u3081\u3001\u4e8b\u524d\u306e\u5bfe\u6570\u5909\u63db\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\u65e5\u672c\u306e\u4e21\u65b9\u306e\u30b1\u30fc\u30b9\u3092\u8996\u899a\u7684\u306b\u6bd4\u8f03\u3057\u30013\u67081\u65e5\u4ee5\u964d\u306e\u904e\u53bb10\u65e5\u9593\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002","e2f4f24c":"\u65e5\u672c\u306e\u5834\u5408","0aab27fc":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f180\u304b\u56fd\u306e\u30c7\u30fc\u30bf\u3068\u30012020\u5e741\u670822\u65e5\uff5e2020\u5e744\u67084\u65e5\u3000\u307e\u3067\u306e\u7d042\u304b\u6708\u9593\u306e\u30c7\u30fc\u30bf\u306b\u306a\u3063\u3066\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u30d1\u30f3\u30c7\u30df\u30c3\u30af\u306b\u3064\u3044\u3066\u306e\u624b\u304c\u304b\u308a\u3092\u5f97\u308b\u306e\u306b\u5341\u5206\u306a\u30c7\u30fc\u30bf\u3067\u3059\u3002\u3044\u304f\u3064\u304b\u306e\u6d1e\u5bdf\u3092\u5f15\u304d\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u4e16\u754c\u7684\u306a\u50be\u5411\u306e\u3044\u304f\u3064\u304b\u306e\u30d7\u30ed\u30c3\u30c8\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a","4a62d7ae":"\u65e5\u672c\u306e\u5834\u5408 \uff08\u65e5\u672c\u306e\u7dcf\u4eba\u53e3 = 1.26476741\u5104\u4eba\uff09\n","7117e6cd":"## 3.3. \u56fd\u306e\u8a73\u7d30\u30c7\u30fc\u30bf\u3092\u52a0\u3048\u308b <a id=\"section33\"><\/a>\n\n\u56fd\u306e\u7dcf\u4eba\u53e3\u3001\u5e02\u6c11\u306e\u5e73\u5747\u5e74\u9f62\u3001\u90fd\u5e02\u306b\u4f4f\u3093\u3067\u3044\u308b\u4eba\u306e\u5272\u5408\u306a\u3069\u306e\u5909\u6570\u306f\u3001COVID-19\u306e\u4f1d\u9001\u52d5\u4f5c\u306b\u5927\u304d\u306a\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u3053\u308c\u3089\u306e\u8981\u56e0\u3092\u8003\u616e\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002 \u79c1\u306f\u3053\u306e\u76ee\u7684\u306e\u305f\u3081\u306bWeb\u30b9\u30af\u30e9\u30c3\u30d4\u30f3\u30b0\u306b\u57fa\u3065\u304f[Tanu's dataset](https:\/\/www.kaggle.com\/tanuprabhu\/population-by-country-2020)\u3092\u4f7f\u3063\u3066\u307e\u3059\u3002","e836a39d":"## 1.3. \u30a4\u30bf\u30ea\u30a2, \u30b9\u30da\u30a4\u30f3, \u30a4\u30ae\u30ea\u30b9 , \u30b7\u30f3\u30ac\u30dd\u30fc\u30eb <a id=\"section13\"><\/a>\n\n\u30e8\u30fc\u30ed\u30c3\u30d1\u306e\u30a4\u30bf\u30ea\u30a2\u3068\u30b9\u30da\u30a4\u30f3\u306e\u4e21\u65b9\u3067\u3001COVID-19\u304c\u5927\u5e45\u306b\u5897\u52a0\u3057\u3066\u3044\u307e\u3059\u3002 \u540c\u6642\u306b\u3001\u82f1\u56fd\u306f\u30e8\u30fc\u30ed\u30c3\u30d1\u3067\u6700\u3082\u91cd\u8981\u306a\u56fd\u306e1\u3064\u3067\u3059\u304c\u3001\u6700\u8fd1EU\u3092\u8131\u9000\u3057\u3001\u4ed6\u306e\u56fd\u304b\u3089\u306e\u4eba\u9593\u306e\u79fb\u52d5\u306b\u5bfe\u3059\u308b\u52b9\u679c\u7684\u306a\u969c\u58c1\u304c\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f\u3002 \u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u8abf\u67fb\u3059\u308b4\u756a\u76ee\u306e\u56fd\u306f\u30b7\u30f3\u30ac\u30dd\u30fc\u30eb\u3067\u3059\u3002\u30a2\u30b8\u30a2\u306e\u5cf6\u3067\u3042\u308a\u3001\u4e2d\u56fd\u306b\u8fd1\u304f\u3001\u305d\u306e\u793e\u4f1a\u7d4c\u6e08\u7684\u6761\u4ef6\u306f\u4ed6\u306e3\u3064\u306e\u56fd\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u3002","7e34219b":"**Observations**:\n\n* The general evolution is captured despite the simplicity of the model\n* The cumulative infected cases has been changing in March, so that using thw whole month data for training results in overestimated predictions. When reducing the training set to only a few days prior the testing region, results are better. This is capturing the problem of the exponential behavior, that is only true for the early stages of the spreading. Now the behavior is more complex, and in order to predict the evolution with large portions of the historic evolution, alternative models are required (sigmoid, ARIMA...)\n* Estimations are increasingly worse as time passes (harder to extrapolate)\n* Countries that recently confirmed their first contagions are difficult to predict (less data points) \n* Countries with 0 cases in the whole training dataset are predicted as non-infected (no datapoints)\n\n** Questions to tackle in next subsections**:\n* How to obtain the full submission set? \n* What to do for countries with different Provinces\/State informed?\n* Is there any alternative to manually setting the size of the train data? \n\n\n**\u89b3\u5bdf**\uff1a\n*\u30e2\u30c7\u30eb\u306e\u30b7\u30f3\u30d7\u30eb\u3055\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u4e00\u822c\u7684\u306a\u9032\u5316\u304c\u6349\u3048\u3089\u308c\u3066\u3044\u308b\n*\u7d2f\u7a4d\u611f\u67d3\u4f8b\u306f3\u6708\u306b\u5909\u5316\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u306b\u6708\u5168\u4f53\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u4e88\u6e2c\u304c\u904e\u5927\u306b\u306a\u308a\u307e\u3059\u3002\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3092\u30c6\u30b9\u30c8\u9818\u57df\u306e\u6570\u65e5\u524d\u306e\u307f\u306b\u6e1b\u3089\u3059\u3068\u3001\u7d50\u679c\u306f\u3088\u308a\u826f\u304f\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u6307\u6570\u95a2\u6570\u7684\u306a\u52d5\u4f5c\u306e\u554f\u984c\u3092\u6349\u3048\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u62e1\u6563\u306e\u521d\u671f\u6bb5\u968e\u306b\u306e\u307f\u5f53\u3066\u306f\u307e\u308a\u307e\u3059\u3002\u3053\u308c\u3067\u52d5\u4f5c\u304c\u3088\u308a\u8907\u96d1\u306b\u306a\u308a\u3001\u6b74\u53f2\u7684\u306a\u9032\u5316\u306e\u5927\u90e8\u5206\u3092\u4f34\u3046\u9032\u5316\u3092\u4e88\u6e2c\u3059\u308b\u306b\u306f\u3001\u4ee3\u66ff\u30e2\u30c7\u30eb\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\uff08\u30b7\u30b0\u30e2\u30a4\u30c9\u3001ARIMA ...\uff09\n*\u63a8\u5b9a\u5024\u306f\u6642\u9593\u306e\u7d4c\u904e\u3068\u3068\u3082\u306b\u307e\u3059\u307e\u3059\u60aa\u5316\u3057\u307e\u3059\uff08\u63a8\u5b9a\u304c\u96e3\u3057\u304f\u306a\u308a\u307e\u3059\uff09\u3002\n*\u6700\u8fd1\u6700\u521d\u306e\u611f\u67d3\u3092\u78ba\u8a8d\u3057\u305f\u56fd\u306f\u4e88\u6e2c\u304c\u56f0\u96e3\u3067\u3059\uff08\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\u304c\u5c11\u306a\u3044\uff09\n*\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u3067\u30b1\u30fc\u30b9\u304c0\u3067\u3042\u308b\u56fd\u306f\u3001\u611f\u67d3\u3057\u3066\u3044\u306a\u3044\u3068\u4e88\u6e2c\u3055\u308c\u307e\u3059\uff08\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\u306a\u3057\uff09\n\n**\u6b21\u306e\u30b5\u30d6\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u53d6\u308a\u7d44\u3080\u8cea\u554f**\uff1a\n*\u5b8c\u5168\u306a\u63d0\u51fa\u30bb\u30c3\u30c8\u306e\u5165\u624b\u65b9\u6cd5\u306f\uff1f\n*\u7570\u306a\u308b\u5dde\/\u5dde\u306b\u901a\u77e5\u3055\u308c\u305f\u56fd\u306b\u5bfe\u3057\u3066\u4f55\u3092\u3059\u3079\u304d\u304b\uff1f\n*\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3092\u624b\u52d5\u3067\u8a2d\u5b9a\u3059\u308b\u4ee5\u5916\u306e\u65b9\u6cd5\u306f\u3042\u308a\u307e\u3059\u304b\uff1f","b7c91bdf":"* **Italy**","e225820d":"\u5404\u56fd\u3092\u6bce\u65e5\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u305f\u3081\u306e\u30e9\u30b0\u3092\u4f7f\u7528\u3057\u3066\u30e2\u30c7\u30eb\u3092\u4e00\u822c\u5316\u3057\u307e\u3057\u3087\u3046\uff1a","9066dd26":"**\u89b3\u5bdf**\uff1a<p>\n* \u6ed1\u3089\u304b\u3055\u30fb\u30fb \u4e21\u65b9\u306e\u30d7\u30ed\u30c3\u30c8\u306f\u3001\u7406\u8ad6\u7684\u306a\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u307e\u305f\u306f\u4ed6\u306e\u4e16\u754c\u306e\u7d2f\u7a4d\u304b\u3089\u306e\u66f2\u7dda\u3088\u308a\u3082\u6ed1\u3089\u304b\u3067\u306f\u3042\u308a\u307e\u305b\u3093\n* \u611f\u67d3\u57fa\u6e96\u30fb\u30fb \u611f\u67d3\u4e8b\u4f8b\u3092\u691c\u8a0e\u3059\u308b\u305f\u3081\u306e\u57fa\u6e96\u304c\u5909\u66f4\u3055\u308c\u305f\u77ac\u9593\u304c\u76f4\u8996\u3055\u308c\u308b\n* \u4e0d\u898f\u5247\u6027\u30fb\u30fb \u3044\u304f\u3064\u304b\u306e\u4e0d\u898f\u5247\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u79c1\u306f\u8a3c\u62e0\u3092\u63a2\u3059\u305f\u3081\u306b\u6587\u732e\u3092\u8a73\u7d30\u306b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u7406\u7531\u306f\u3001\u6d41\u884c\u3092\u76e3\u8996\u3059\u308b\u305f\u3081\u306b\u8cbb\u3084\u3055\u308c\u305f\u30ea\u30bd\u30fc\u30b9\u3068ot\u3092\u6b62\u3081\u308b\u305f\u3081\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5bfe\u7b56\u306e\u4e21\u65b9\u304c\u6642\u9593\u3068\u3068\u3082\u306b\u5909\u5316\u3057\u3066\u3044\u308b\u305f\u3081\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n* \u30d7\u30e9\u30c8\u30fc\u30fb\u30fb \u66f2\u7dda\u304c\u30d7\u30e9\u30c8\u30fc\u306b\u9054\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\u3053\u308c\u306f\u4e2d\u56fd\u304c\u6700\u5927\u306e\u611f\u67d3\u529b\u306b\u3042\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059","8bf5b527":"Final [LMSE score](https:\/\/medium.com\/analytics-vidhya\/root-mean-square-log-error-rmse-vs-rmlse-935c6cc1802a) \n2\u9031\u76ee\u30012020-03-19\u3088\u308a\u524d\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30682020-04-01\u306e\u6e2c\u5b9a\u5024\uff1a\n\n**1.19681**","081e3a3b":"\u7d4c\u9a13\u304b\u3089\u3001\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u306b\u306f\u9069\u3057\u3066\u3044\u307e\u305b\u3093\u3002 \u591a\u304f\u306e\u5834\u5408\u3001\u6700\u521d\u306b\u5f37\u3044\u79fb\u884c\u671f\u9593\u304c\u3042\u308a\u3001\u504f\u308a\u304c\u8d77\u3053\u308a\u3048\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u4ee5\u4e0b\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3053\u306e\u65b9\u6cd5\u3092\u9069\u7528\u3057\u307e\u305b\u3093\u304c\u3001\u4ed6\u306e\u76ee\u7684\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u5927\u6b53\u8fce\u3067\u3059\u3002\n\nFinal [LMSE score](https:\/\/medium.com\/analytics-vidhya\/root-mean-square-log-error-rmse-vs-rmlse-935c6cc1802a) for week 2, with training data prior to 2020-03-19 and measures on date 2020-04-01: \n\n**1.62190**","af6968cf":"## 3.2. Compute \u30e9\u30b0\u7279\u5fb4\u91cf and trends <a id=\"section32\"><\/a>\n\n\u826f\u3044\u7d50\u679c\u3092\u5f97\u308b\u306b\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5145\u5b9f\u3055\u305b\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002 \n\n\n\u3053\u306e\u5834\u5408\u30012\u3064\u306e\u7570\u306a\u308b\u5909\u63db\u3092\u9069\u7528\u3057\u307e\u3059\u3002\n\n**Lag**. \u30e9\u30b0(Lag)\u306f\u3001\u5217\u306e\u4ee5\u524d\u306e\u5024\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001ConfirmedCases\u306e\u30e9\u30b01(Lag1)\u306f\u3001\u524d\u65e5\u304b\u3089\u3053\u306e\u5217\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002 \u8981\u7d20X\u306e\u30e9\u30b03\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u306a\u305c\u3053\u306e\u3088\u3046\u306b\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u73fe\u6642\u70b9\u306e\u30c7\u30fc\u30bf1\u70b9\u3067\u4e88\u6e2c\u3059\u308b\u3088\u308a\u3001\u904e\u53bb\u30c7\u30fc\u30bf\u3092\u6d3b\u7528\u3057\u305f\u65b9\u304c\u4e88\u6e2c\u7cbe\u5ea6\u304c\u5411\u4e0a\u3059\u308b\u5834\u5408\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\n\n\u4eca\u56de\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\n$$X_{lag3}(t) = X(t-3)$$\n\n**Trend**. \u6642\u7cfb\u5217\u306e\u30c7\u30fc\u30bf\u306f\u3001\u30c8\u30ec\u30f3\u30c9\u6027\u3092\u8003\u616e\u3059\u308b\u3068\u81ea\u7136\u306b\u306a\u308a\u307e\u3059\u3002\u3000\u4ed6\u306b\u3082\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u6708\u5468\u671f\u6027\u3001\u5e74\u5468\u671f\u6027\u3001\u9031\u5468\u671f\u6027\u3001\u5b63\u7bc0\u6027\u3092\u8003\u616e\u3059\u308b\u3068\u3046\u307e\u304f\u3044\u304f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u4eca\u56de\u3001\u9069\u7528\u3059\u308b\u5b9a\u7fa9\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n$$Trend_{X} = {X(t) - X(t-1) \\over X(t-1)}$$\n\n\u9069\u7528\u3059\u308b\u30e9\u30b0\u306e\u30d0\u30c3\u30af\u30ed\u30b0\u306f14\u65e5\u3067\u3059\u304c\u3001\u30c8\u30ec\u30f3\u30c9\u306e\u5834\u5408\u306f7\u65e5\u3067\u3059\u3002 ConfirmedCases\u3068Fatalities\u306e\u5834\u5408\uff1a","7d0fa66e":"\u56fd\u306e\u7dcf\u4eba\u53e3\u3068\u611f\u67d3\u75c7\u306e\u76f8\u95a2\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002","bf5f6ed9":"## 3.1. \u30c7\u30fc\u30bf\u306e\u7d50\u5408\u3001\u65e5\u4ed8\u3068\u6b20\u640d\u5024\u306e\u51e6\u7406 <a id=\"section31\"><\/a>\n\nFirst of all, we perform some pre-processing prepare the dataset, consisting on:\n\n\u307e\u305a\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u6e96\u5099\u3059\u308b\u524d\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n* \u30c7\u30fc\u30bf\u7d50\u5408\u30fb\u30fb\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\/\u30c6\u30b9\u30c8\u306b\u53c2\u52a0\u3057\u3066\u30c7\u30fc\u30bf\u5909\u63db\u3092\u4fc3\u9032\u3059\u308b\n* \u30d5\u30a3\u30eb\u30bf\u30fc\u65e5\u4ed8 \u30fb\u30fb\u30c1\u30e3\u30ec\u30f3\u30b8\u6761\u4ef6\u306b\u5f93\u3063\u3066\u30012020-03-12\u306e\u5f8c\u306b\u78ba\u8a8d\u6e08\u307f\u306e\u30b1\u30fc\u30b9\u3068\u6b7b\u4ea1\u8005\u3092\u524a\u9664\u3057\u307e\u3059\u3002 \u8ffd\u52a0\u306e\u65e5\u4ed8\u5217\u3092\u4f5c\u6210\u3059\u308b\n* \u6b20\u640d\u5024\u30fb\u30fb\u6b20\u640d\u5024\u3092\u5206\u6790\u3057\u3066\u4fee\u6b63\u3059\u308b","e49b27f2":"# 3. \u30c7\u30fc\u30bf\u7d50\u5408\u3084\u6b20\u640d\u5024\u306e\u51e6\u7406\uff08\u30c7\u30fc\u30bf\u30a8\u30f3\u30ea\u30c3\u30c1\u30e1\u30f3\u30c8\uff09 <a id=\"section3\"><\/a>\n\nSIR\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5206\u6790\u306f\u3001COVID-19\u3092\u542b\u3080\u591a\u304f\u306e\u30a6\u30a4\u30eb\u30b9\u306e\u611f\u67d3\u30e1\u30ab\u30cb\u30ba\u30e0\u306b\u307b\u307c\u4f3c\u305f\u30e2\u30c7\u30eb\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u3001\u30d1\u30f3\u30c7\u30df\u30c3\u30af\u306e\u9032\u5c55\u3092\u4e88\u6e2c\u3057\u3001\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u3082\u540c\u69d8\u306b\u6709\u7528\u3067\u3042\u308b\u3068\u8a3c\u660e\u3067\u304d\u308b\u5225\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u65b9\u6cd5\u306e\u591a\u304f\u306f\u3001\u8c4a\u5bcc\u306a\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u7d50\u8ad6\u3092\u62bd\u51fa\u3057\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u30c7\u30fc\u30bf\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u63a8\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u3053\u308c\u304c\u307e\u3055\u306b\u79c1\u305f\u3061\u304c\u3084\u308d\u3046\u3068\u3057\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\n\n*\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u4e3b\u306a\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\uff1a\n1.\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3057\u3001\u65e5\u4ed8\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u3001\u6b20\u843d\u3092\u6d88\u53bb\u3057\u307e\u3059\n2.\u30e9\u30b0\u3068\u30c8\u30ec\u30f3\u30c9\u3092\u8a08\u7b97\u3059\u308b\n3.\u56fd\u306e\u8a73\u7d30\u3092\u8ffd\u52a0\u3059\u308b\n\n\n**\u514d\u8cac\u4e8b\u9805**:\n\u3053\u306e\u30c7\u30fc\u30bf\u5f37\u5316\u306f\u5fc5\u9808\u3067\u306f\u306a\u304f\u3001\u30e2\u30c7\u30eb\u306e\u3059\u3079\u3066\u306e\u65b0\u6a5f\u80fd\u3092\u4f7f\u7528\u3057\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u305f\u3068\u3048\u3070\u7dbf\u5bc6\u306a\u63a2\u7d22\u7684\u5206\u6790\u3067\u306f\u3001\u78ba\u304b\u306b\u4f55\u3089\u304b\u306e\u4fa1\u5024\u3092\u8ffd\u52a0\u3059\u308b\u6559\u8a13\u7684\u306a\u30b9\u30c6\u30c3\u30d7\u3060\u3068\u601d\u3044\u307e\u3059\u3002","5d386d75":"# 2. SIR model <a id=\"section2\"><\/a>\n\u30b3\u30ed\u30ca\u30a6\u30a4\u30eb\u30b9\u304c\u767a\u751f\u3057\u305f\u56fd\u3068\u4ed6\u306e4\u3064\uff08\uff0b\u65e5\u672c\uff09\u306e\u8208\u5473\u6df1\u3044\u56fd\u306e\u96c6\u8a08\u30c7\u30fc\u30bf\u3067\u3001\u30a6\u30a4\u30eb\u30b9\u306e\u3044\u304f\u3064\u304b\u306e\u4e00\u822c\u7684\u306a\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u30c7\u30fc\u30bf\u304b\u3089\u62bd\u51fa\u3059\u3079\u304d\u591a\u304f\u306e\u60c5\u5831\u304c\u3042\u308a\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u79c1\u305f\u3061\u306f\u56fd\u306e\u7def\u5ea6\/\u7d4c\u5ea6\u306e\u5f71\u97ff\u3092\u5206\u6790\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001Notebook\u306e\u5927\u304d\u306a\u76ee\u7684\u306f\u3001COVID-19\u611f\u67d3\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u4e3b\u8981\u306a\u8981\u56e0\u3092\u63a2\u308b\u305f\u3081\u306e\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u958b\u767a\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u3001\n\u3053\u3053\u304b\u3089\u306f\u3001\u75ab\u5b66\u30e2\u30c7\u30eb\u6700\u3082\u6709\u540d\u306a\uff11\u3064\u306eSIR\u3092\u4f5c\u3063\u3066\u3044\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\nSIR\u306f\u3001\u96c6\u56e3\u3092\u6b21\u306e3\u3064\u306b\u5206\u985e\u3057\u307e\u3059\u3002\n* 1.\u672a\u611f\u67d3\u8005\uff08Susceptable\uff09** \u75c5\u6c17\u306b\u304b\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u611f\u67d3\u8005\u304b\u3089\u306e\u63a5\u89e6\u306b\u3088\u308a\u611f\u67d3\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\n* 2.\u611f\u67d3\u8005\uff08Infected\uff09 ** \u611f\u67d3\u306b\u304b\u304b\u3063\u3066\u3044\u308b\u4eba\n* 3.\u611f\u67d3\u5f8c\u6b7b\u4ea1\u3082\u3057\u304f\u306f\u56de\u5fa9\u306b\u3088\u308b\u514d\u75ab\u3092\u7372\u5f97\u3057\u305f\u8005\uff08Recovered\/deceased\uff09** \u3053\u306e\u72b6\u614b\u306e\u4eba\u306f\u3001\u4ed6\u306e\u4eba\u306b\u611f\u67d3\u75c7\u3092\u79fb\u3059\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u4ee5\u4e0a\u611f\u67d3\u3092\u79fb\u3055\u306a\u3044\u3068\u3044\u3046\u610f\u5473\u306e\u305f\u3081\u3001\u611f\u67d3\u306b\u3088\u308a\u6b7b\u4ea1\u3057\u305f\u65b9\u3082\u542b\u307f\u307e\u3059\u3002\n\n<img src=\"https:\/\/www.lewuathe.com\/assets\/img\/posts\/2020-03-11-covid-19-dynamics-with-sir-model\/sir.png\" width=\"500px\">\nImage by Kai Sasaki from [lewuathe.com](https:\/\/www.lewuathe.com\/covid-19-dynamics-with-sir-model.html)\n\n\n\u3053\u306e\u30e2\u30c7\u30eb\u306b\u306f\u3001\u51fa\u751f\u3068\u6b7b\u4ea1\uff08\u4eba\u53e3\u7d71\u8a08\u5b66\u3092\u4f34\u3046SIRD\uff09\u3001\u4e2d\u9593\u72b6\u614b\u306a\u3069\u3092\u8003\u616e\u3057\u305f\u591a\u304f\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001COVID-19\u62e1\u5f35\u306e\u521d\u671f\u6bb5\u968e\u306b\u3042\u308a\u3001\u77ed\u671f\u7684\u306b\u95a2\u5fc3\u304c\u96c6\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u3001 \u4eba\u3005\u306f\u514d\u75ab\u3092\u767a\u9054\u3055\u305b\uff08\u9577\u671f\u7684\u306b\u306f\u514d\u75ab\u304c\u5931\u308f\u308c\u3001COVID-19\u304c\u4e00\u822c\u7684\u306a\u30a4\u30f3\u30d5\u30eb\u30a8\u30f3\u30b6\u306e\u3088\u3046\u306a\u7279\u5b9a\u306e\u5b63\u7bc0\u5185\u306b\u518d\u767a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff09\u3001\u56de\u5fa9\u3057\u305f\u72b6\u614b\u304b\u3089\u6b8b\u308a\u306e2\u3064\u306e\u72b6\u614b\u306b\u79fb\u884c\u3057\u306a\u3044\u3068\u898b\u306a\u3057\u307e\u3059\u3002 \n\n\u3053\u308c\u306b\u3088\u308a\u3001\u30b7\u30b9\u30c6\u30e0\u3092\u652f\u914d\u3059\u308b\u5fae\u5206\u65b9\u7a0b\u5f0f\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n$$ {dS \\over dt} = - {\\beta S I \\over N} $$\n\n$$ {dI \\over dt} = {\\beta S I \\over N} - \\gamma I$$\n\n$$ {dR \\over dt} = \\gamma I$$\n\nWhere $\\beta$ is the contagion rate of the pathogen and $\\gamma$ is the recovery rate.","4e407b93":"**\u89b3\u5bdf**\uff1a<p>\nSIR\u306e\u3088\u3046\u306a\u5178\u578b\u7684\u306a\u75ab\u5b66\u30e2\u30c7\u30eb\u306e\u3088\u3046\u3067\u3059\u3002\nSIR\u306f\u30011927\u5e74\u3001\u751f\u5316\u5b66\u8005\u30b1\u30eb\u30de\u30c3\u30af\u3068\u8ecd\u533b\u30fb\u75ab\u5b66\u8005\u30de\u30c3\u30b1\u30f3\u30c9\u30ea\u30c3\u30af\u306b\u3088\u3063\u3066\u3001\u8003\u5bdf\u3055\u308c\u305f\u753b\u671f\u7684\u306a\u611f\u67d3\u75c5\u6d41\u884c\u306e\u6570\u7406\u30e2\u30c7\u30eb\u3067\u3059\u3002\n\u65b0\u578b\u306e\u611f\u67d3\u75c7\u306e\u305f\u3081\u514d\u75ab\u3092\u6301\u3064\u4eba\u306f\u3044\u306a\u3044\u3053\u3068\u3001\u5916\u90e8\u306e\u90fd\u5e02\u3068\u306e\u9593\u3067\u4eba\u53e3\u79fb\u52d5\u304c\u306a\u3044\u3053\u3068\u3001\u4eba\u53e3\u306f\u5bc6\u96c6\u3057\u4e0d\u7279\u5b9a\u591a\u6570\u306e\u4eba\u3068\u306e\u63a5\u89e6\u304c\u3042\u308b\u3053\u3068\u3001\u30da\u30b9\u30c8\u306e\u3088\u3046\u306a\u6025\u901f\u304b\u3064\u77ed\u671f\u7684\u306a\u6d41\u884c\u3092\u60f3\u5b9a\u3057\u305f\u30e2\u30c7\u30eb\u3067\u3059\u3002\n\n\u96c6\u56e3\u3092\u6b21\u306e3\u3064\u306b\u5206\u985e\u3057\u307e\u3059\u3002\n* \u672a\u611f\u67d3\u8005\uff08Susceptable\uff09\n* \u611f\u67d3\u8005\uff08Infected\uff09\n* \u611f\u67d3\u5f8c\u6b7b\u4ea1\u3082\u3057\u304f\u306f\u56de\u5fa9\u306b\u3088\u308b\u514d\u75ab\u3092\u7372\u5f97\u3057\u305f\u8005\uff08Recovered\uff09\n\n[SIR](http:\/\/mat.uab.cat\/matmat\/PDFv2013\/v2013n03.pdf)\n![__results___28_0.png](attachment:__results___28_0.png)\n[2. SIR model\u3000SIR\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3](#section2)","5890a3a5":"**\u89b3\u5bdf**\uff1a<p>\n-\u300cConfirmedCases\u300d\u3068\u300cFatalities\u300d\u306f\u30012020\u5e7403\u670812\u65e5\u3088\u308a\u524d\u306e\u65e5\u4ed8\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306a\u308a\u307e\u3057\u305f\u3002<p>\n-\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u3059\u3079\u3066\u306e\u56fd\u3068\u65e5\u4ed8\u304c\u542b\u307e\u308c\u3001\u6b21\u306e\u51e6\u7406\u306e\u30e9\u30b0\/\u30c8\u30ec\u30f3\u30c9\u30b9\u30c6\u30c3\u30d7\u306b\u4f7f\u3044\u307e\u3059\u3002<p>\n-\u300cConfirmedCases\u300d\u3068\u300cFatalities\u300d\u306e\u6b20\u640d\u5024\u306f0\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u3001\u30d7\u30ed\u30bb\u30b9\u306e\u6700\u5f8c\u306b\u899a\u3048\u3066\u3044\u306a\u3044\u3068\u5371\u967a\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \u305f\u3060\u3057\u30012020-03\u670812\u65e5\u3088\u308a\u524d\u306e\u65e5\u4ed8\u306e\u307f\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u305f\u3081\u3001\u3053\u308c\u306f\u4e88\u6e2c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u5f71\u97ff\u3057\u307e\u305b\u3093\n-\u6700\u521d\u306e\u65e5\u4ed8\u304b\u3089\u59cb\u307e\u308b\u65e5\u30ab\u30a6\u30f3\u30bf\u30fc\u3068\u3057\u3066\u3001\u65b0\u3057\u3044\u5217\u300c\u65e5\u300d\u304c\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f<p>\n\n\u6b20\u843d\u3057\u3066\u3044\u308b\u5024\u304c\u6b8b\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u518d\u78ba\u8a8d\u3057\u307e\u3059\u3002","cab190c6":"## 4.3 Linear Regression for all countries (method 2) <a id=\"section43\"><\/a>\n\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306e\u65e5\u6570\u3092\u8a2d\u5b9a\u3059\u308b\u3001\u4ed6\u306e\u65b9\u6cd5\u3068\u3057\u3066\u3001\u6700\u521d\u306e\u30b1\u30fc\u30b9\u304c\u78ba\u8a8d\u3055\u308c\u3066\u304b\u3089\u3001\u5404\u56fd\u306e\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002 \n\u305f\u3060\u3057\u3001\u7279\u5b9a\u306e\u56fd\u3067\u306f\u6700\u521d\u306e\u767a\u751f\u304c\u975e\u5e38\u306b\u30b9\u30e0\u30fc\u30ba\u3067\u3042\u3063\u305f\u305f\u3081\uff08\u4f8b\u3048\u3070\u3001\u30b9\u30da\u30a4\u30f3\u3067\u306f\u78ba\u8a8d\u3055\u308c\u305f\u75c7\u4f8b\u304c7\u65e5\u9593\u7d9a\u3051\u30661\u3064\u3057\u304b\u306a\u304b\u3063\u305f\u305f\u3081\uff09\u3001\u3053\u308c\u3089\u306e\u521d\u671f\u671f\u9593\u306b\u3088\u3063\u3066\u4e88\u6e2c\u304c\u504f\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002"}}