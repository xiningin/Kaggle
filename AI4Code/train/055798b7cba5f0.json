{"cell_type":{"c8cdeb52":"code","22e9a5b3":"code","ea481ebf":"code","36f326fa":"code","7e365a83":"code","cbfdeac0":"code","e71d34fb":"code","3e3f6f9e":"code","4b1b5e9b":"code","b76039da":"code","da1efae8":"code","4cb7d20c":"code","5272499e":"code","6cf97cd9":"code","fcbc6691":"code","d1324772":"markdown","a541f335":"markdown","ffaa6dd5":"markdown","be0e394f":"markdown","a05cc407":"markdown","7da704fd":"markdown","4505bd34":"markdown","a7e3056b":"markdown","9c614a94":"markdown"},"source":{"c8cdeb52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","22e9a5b3":"body = pd.read_csv(\"\/kaggle\/input\/body-performance-data\/bodyPerformance.csv\")","ea481ebf":"import matplotlib.pyplot as plt\nfrom tensorflow import keras\nfrom tensorflow.keras import layers,regularizers\nfrom sklearn.model_selection import train_test_split\nimport sklearn.preprocessing as preprocessing\nimport matplotlib as mpl","36f326fa":"mpl.rcParams['figure.dpi'] = 144","7e365a83":"def le(column):\n    LAEN = preprocessing.LabelEncoder()\n    LAEN.fit(column)\n    column = LAEN.transform(column)\n    return column\n    \n    \nbody[\"class\"]= le(body[\"class\"])\nbody[\"gender\"]= le(body[\"gender\"])","cbfdeac0":"body[\"age\"]= body[\"age\"].astype('int')\nbody[\"diastolic\"]= body[\"diastolic\"].astype('int')\nbody[\"systolic\"]= body[\"systolic\"].astype('int')\nbody[\"sit-ups counts\"]= body[\"sit-ups counts\"].astype('int')\nbody[\"broad jump_cm\"]= body[\"broad jump_cm\"].astype('int')","e71d34fb":"X = body.drop(\"class\",axis=1)\ny = body[\"class\"]","3e3f6f9e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","4b1b5e9b":"def my_model():\n    inputs = keras.Input(shape=11)\n    x = layers.Dense(16,activation ='relu')(inputs)\n    x = layers.Dense(32,activation ='relu')(x)\n    x = layers.Dense(64,activation ='relu')(x)\n    x = layers.Dense(32,activation ='relu')(x)\n    x = layers.Dense(16,activation ='relu')(x)\n    outputs = layers.Dense(4)(x)\n    model = keras.Model(inputs=inputs, outputs=outputs)\n    return model","b76039da":"model = my_model()","da1efae8":"model.compile(\n    \n    loss = keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    optimizer = keras.optimizers.Adam(learning_rate=3e-3),\n    metrics= [\"accuracy\"]\n)\n\nmodel_history= model.fit(X_train, y_train, batch_size=32 , epochs=100, verbose=2)\nmodel.evaluate(X_test, y_test, batch_size=32 , verbose=2)","4cb7d20c":"y_pred = model.predict(X_test)\ny_test","5272499e":"y_pred = np.argmax(y_pred, axis=1)\ny_pred","6cf97cd9":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns","fcbc6691":"cm = confusion_matrix(y_test, y_pred)\n\nax= plt.subplot()\nsns.heatmap(cm, annot=True, ax=ax,fmt='2g'); #annot=True to annotate cells\n\n# labels, title and ticks\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix')","d1324772":"## Confusion Matrix","a541f335":"## Compiling and Fitting model ","ffaa6dd5":"## Model building","be0e394f":"# Train- Test split","a05cc407":"## Importing data","7da704fd":"# Libraries","4505bd34":"## Change data types into Integer values","a7e3056b":"## Label Encoding","9c614a94":"# X-y Split"}}