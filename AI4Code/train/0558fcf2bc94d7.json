{"cell_type":{"8b3c1041":"code","7eff3080":"code","59758836":"code","63b4d349":"code","ea76f508":"code","4c0fa3d3":"code","10c89e34":"code","679e1c1a":"code","16672551":"code","7fa50535":"code","ce0158b0":"code","3b6581f8":"code","5ec8c277":"code","2d97b61b":"code","2a09895d":"code","558ed894":"code","78fef6e5":"code","9ce20eb8":"code","ff6a17a3":"code","7f6ccf36":"markdown","bff2b8b6":"markdown","c28dd8aa":"markdown","263037c7":"markdown","92e6e836":"markdown","47df8889":"markdown"},"source":{"8b3c1041":"import pandas as pd\nimport plotly.express as px","7eff3080":"df = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv\")","59758836":"train = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/test.csv\")\n\ntrain.info()","63b4d349":"# train.dropna(subset=['Age', 'Fare', 'Sex', 'Embarked'], inplace=True)","ea76f508":"train.corr()","4c0fa3d3":"fig = px.density_heatmap(train, x=\"Age\", y=\"Embarked\", z='Survived',nbinsx=50, facet_row=\"Sex\", marginal_y='histogram')\nfig.show()","10c89e34":"fig = px.histogram(train, x=\"Age\", color=\"Survived\", marginal=\"rug\", facet_row='Sex', nbins=50)\nfig.show()","679e1c1a":"fig = px.density_heatmap(train, x=\"Age\", y=\"Pclass\", z='Survived',nbinsx=50, facet_row=\"Sex\", marginal_y='histogram')\nfig.show()","16672551":"from sklearn.ensemble import RandomForestClassifier\nimport numpy as np","7fa50535":"model = RandomForestClassifier()","ce0158b0":"def clean_values_of_Sex(x):\n    if x == 'male':\n        return 0\n    elif x == 'female':\n        return 1\n    else:\n        return 2\n\ndef clean_vales_of_Embarked(x):\n    if x == 'S':\n        return 0\n    elif x == 'C':\n        return 1\n    elif x == 'Q':\n        return 2\n    else:\n        return 3\n\ndef clean_values_of_Fare(x):\n    if np.isnan(x):\n        return -1\n    else:\n        return x\n\ndef clean_values_of_Age(x):\n    if np.isnan(x):\n        return -1\n    else:\n        return x\n\ntrain['Embarked'] = train['Embarked'].apply(clean_vales_of_Embarked)\ntrain['Sex'] = train['Sex'].apply(clean_values_of_Sex)\ntrain['Fare'] = train['Fare'].apply(clean_values_of_Fare)\ntrain['Age'] = train['Age'].apply(clean_values_of_Age)\n\ntest['Embarked'] = test['Embarked'].apply(clean_vales_of_Embarked)\ntest['Sex'] = test['Sex'].apply(clean_values_of_Sex)\ntest['Fare'] = test['Fare'].apply(clean_values_of_Fare)\ntest['Age'] = test['Age'].apply(clean_values_of_Age)","3b6581f8":"train = train.iloc[:-10000]\nval = train.iloc[-10000:]","5ec8c277":"X = []\nfor (a, b, c, d, e) in zip(train['Pclass'], train['Embarked'], train['Age'], train['Fare'], train['Sex']):\n    X.append([a, b, c, d, e])\n    \ny = np.array(train['Survived'])\ny.reshape(1,-1)\n\nmodel.fit(X=X,y=y)","2d97b61b":"X2 = []\nfor (a, b, c, d, e) in zip(val['Pclass'], val['Embarked'], val['Age'], val['Fare'], val['Sex']):\n    X2.append([a, b, c, d, e])\n\ny2 = np.array(val['Survived'])\ny2.reshape(1,-1)\ny2.shape","2a09895d":"model.score(X2,y2)","558ed894":"import time","78fef6e5":"y = []\nr = 0\nsince = time.time()\nfor idd in df['PassengerId']:\n    \n    row = test.loc[test['PassengerId'] == idd]\n    pclass = int(row['Pclass'])\n    embarked = int(row['Embarked'])\n    age = float(row['Age'])\n    fare = float(row['Fare'])\n    sex = int(row['Sex'])\n    x = [[pclass, embarked, age, fare, sex]]\n    df['Survived'][r] = model.predict(X=x)\n    if (r % 10000) == 0:\n        \n        now = time.time()\n        print(\"Finished up to row: {}\".format(r))\n        print(\"Time Elapsed Since last batch: {}\".format(now - since))\n        since = time.time()\n    r += 1","9ce20eb8":"df","ff6a17a3":"df.to_csv(\"RandomForestClassifier.csv\", index=False)","7f6ccf36":"# Loading python libraries","bff2b8b6":"# Loading Data","c28dd8aa":"# I achieved accuracy of 71.906%","263037c7":"# Building ml model","92e6e836":"### Scoring with created validation dataset","47df8889":"# Data Exploration"}}