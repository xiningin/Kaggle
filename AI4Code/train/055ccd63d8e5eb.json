{"cell_type":{"ece9b217":"code","61786a9e":"code","7de4632c":"code","04d386b0":"code","6e61e5c9":"code","4a61f54f":"code","7c48a283":"code","cf4f58af":"code","0da685a9":"code","0913eac0":"code","1c7f5073":"code","d603624e":"code","723d5a6b":"code","bcf44460":"code","445015cb":"code","93209765":"code","7a32016e":"code","297fa322":"code","50cf4314":"code","728ed52b":"code","201cc31f":"code","cef9505d":"code","ade953a0":"code","28c600b0":"code","1d4aac10":"code","ed140415":"code","21918cfb":"code","ccb79a7b":"code","4ab5693d":"markdown","480cb15e":"markdown","43198181":"markdown","59de03ab":"markdown","7e56f8dc":"markdown"},"source":{"ece9b217":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","61786a9e":"import numpy as np  \nimport pandas as pd  \nimport matplotlib.pyplot as plt  \nfrom matplotlib import style \nfrom sklearn.svm import SVC  \n  ","7de4632c":"# Data visualization libraires\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# show plot in the notebook\n%matplotlib inline","04d386b0":"plt.style.use('fivethirtyeight')\nstyle.use('fivethirtyeight') \n","6e61e5c9":"# create mesh grids \ndef make_meshgrid(x, y, h =.02): \n    x_min, x_max = x.min() - 1, x.max() + 1\n    y_min, y_max = y.min() - 1, y.max() + 1\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h)) \n    return xx, yy ","4a61f54f":"# plot the contours \ndef plot_contours(ax, clf, xx, yy, **params): \n    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()]) \n    Z = Z.reshape(xx.shape) \n    out = ax.contourf(xx, yy, Z, **params) \n    return out ","7c48a283":"color = ['r', 'b', 'g', 'k'] \n","cf4f58af":"iris = pd.read_csv(\"..\/input\/iris\/Iris.csv\") \n","0da685a9":"iris.head()","0913eac0":"iris.info()\n","1c7f5073":"iris['Species'].value_counts()\n","d603624e":"sns.pairplot(iris.drop(['Id'], axis=1),hue='Species')\n","723d5a6b":"iris = pd.read_csv(\"..\/input\/iris\/Iris.csv\").values\nfeatures = iris[0:150, 2:4] \nlevel1 = np.zeros(150) \nlevel2 = np.zeros(150) \nlevel3 = np.zeros(150) ","bcf44460":"# level1 contains 1 for class1 and 0 for all others. \n# level2 contains 1 for class2 and 0 for all others. \n# level3 contains 1 for class3 and 0 for all others. \nfor i in range(150): \n    if i>= 0 and i<50: \n        level1[i] = 1\n    elif i>= 50 and i<100: \n        level2[i] = 1\n    elif i>= 100 and i<150: \n        level3[i]= 1","445015cb":"# create 3 svm with rbf kernels \nsvm1 = SVC(kernel ='rbf') \nsvm2 = SVC(kernel ='rbf') \nsvm3 = SVC(kernel ='rbf') \n","93209765":"# fit each svm's \nsvm1.fit(features, level1) \nsvm2.fit(features, level2) \nsvm3.fit(features, level3) ","7a32016e":"fig, ax = plt.subplots() \nX0, X1 = iris[:, 2], iris[:, 3] \nxx, yy = make_meshgrid(X0, X1) ","297fa322":"# plot the contours \nplot_contours(ax, svm1, xx, yy, cmap = plt.get_cmap('hot'), alpha = 0.8) \nplot_contours(ax, svm2, xx, yy, cmap = plt.get_cmap('hot'), alpha = 0.3) \nplot_contours(ax, svm3, xx, yy, cmap = plt.get_cmap('hot'), alpha = 0.5) \n  \ncolor = ['r', 'b', 'g', 'k'] \n  \nfor i in range(len(iris)): \n    plt.scatter(iris[i][2], iris[i][3], s = 30, c = color[int(iris[i][4])]) \nplt.show() \n","50cf4314":"\niris = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\n","728ed52b":"sns.pairplot(iris.drop(['Id'], axis=1),hue='Species')","201cc31f":"iris.head(10)","cef9505d":"# Split data into a training set and a testing set.\n# train_test_split shuffle the data before the split (shuffle=True by default)\nfrom sklearn.model_selection import train_test_split\nX=iris.drop(['Species', 'Id'], axis=1)\ny=iris['Species']\nX_train, X_test, y_train, y_test=train_test_split(X,y, test_size=0.5, shuffle=True,random_state=100)","ade953a0":"from sklearn.svm import SVC\nmodel=SVC(C=1, kernel='rbf', tol=0.001)\nmodel.fit(X_train, y_train)\n","28c600b0":"###We get predictions from the model now and create a confusion matrix and a classification report.\npred=model.predict(X_test)\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nprint(confusion_matrix(y_test, pred))\nprint('\\n')\nprint(classification_report(y_test, pred))\nprint('\\n')\nprint('Accuracy score using RBF is: ', accuracy_score(y_test, pred))\n","1d4aac10":"from sklearn.svm import SVC\nmodel=SVC(C=1, kernel='poly', tol=0.001)\nmodel.fit(X_train, y_train)\n","ed140415":"###We get predictions from the model now and create a confusion matrix and a classification report.\npred=model.predict(X_test)\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nprint(confusion_matrix(y_test, pred))\nprint('\\n')\nprint(classification_report(y_test, pred))\nprint('\\n')\nprint('Accuracy score using Poly is: ', accuracy_score(y_test, pred))","21918cfb":"from sklearn.svm import SVC\nmodel=SVC(C=1, kernel='linear', tol=0.001)\nmodel.fit(X_train, y_train)","ccb79a7b":"###We get predictions from the model now and create a confusion matrix and a classification report.\npred=model.predict(X_test)\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nprint(confusion_matrix(y_test, pred))\nprint('\\n')\nprint(classification_report(y_test, pred))\nprint('\\n')\nprint('Accuracy score Linear kernal is: ', accuracy_score(y_test, pred))","4ab5693d":"# > # Iris SVM real life use cases ","480cb15e":"# Iris -  RBF \n","43198181":"# # Iris - SVM - linear ","59de03ab":"# Real-Life Applications of SVM (Support Vector Machines)\n\n\n![](https:\/\/d2h0cx97tjks2p.cloudfront.net\/blogs\/wp-content\/uploads\/sites\/2\/2017\/08\/aplications-of-svm-2.jpg)\n\nAs we have seen, SVMs depends on supervised learning algorithms. The aim of using SVM is to correctly classify unseen data. SVMs have a number of applications in several fields.\nSome common applications of SVM are-\n\nFace detection \u2013 SVMc classify parts of the image as a face and non-face and create a square boundary around the face.\nText and hypertext categorization \u2013 SVMs allow Text and hypertext categorization for both inductive and transductive models. They use training data to classify documents into different categories. It categorizes on the basis of the score generated and then compares with the threshold value.\nClassification of images \u2013 Use of SVMs provides better search accuracy for image classification. It provides better accuracy in comparison to the traditional query-based searching techniques.\nBioinformatics \u2013 It includes protein classification and cancer classification. We use SVM for identifying the classification of genes, patients on the basis of genes and other biological problems.\nProtein fold and remote homology detection \u2013 Apply SVM algorithms for protein remote homology detection.\nHandwriting recognition \u2013 We use SVMs to recognize handwritten characters used widely.\nGeneralized predictive control(GPC) \u2013 Use SVM based GPC to control chaotic dynamics with useful parameters.","7e56f8dc":"# Iris - SVM - poly"}}