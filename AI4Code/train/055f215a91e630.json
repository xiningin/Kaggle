{"cell_type":{"98ad6b47":"code","852ee979":"code","5d5bd947":"code","ce01ccf1":"code","3fbeeb64":"code","58900035":"code","0da861f5":"code","506dd065":"code","afda49ca":"code","00ee39fd":"code","72238cb2":"code","68301e68":"code","104bb9e6":"code","2eeada63":"code","007c4f55":"code","9634a237":"code","2818ee67":"code","b5cc1782":"code","0b3f9962":"code","2a6c9c88":"code","bbc9ff13":"code","f333af04":"code","232be692":"code","452080b4":"code","d623b77f":"code","9d9b9f83":"code","2f8d9f8e":"code","e01db6f7":"code","cb4d1114":"code","311428ab":"code","28891fa6":"code","42a797a0":"code","d6836973":"code","e2d2ddf8":"code","c9ab091d":"code","6397b7cf":"code","9842a0db":"code","9f512544":"code","de41d94d":"code","a652cfa3":"code","5a88d766":"code","1dfa9bf7":"code","715dae4c":"markdown","e1a8aa2b":"markdown"},"source":{"98ad6b47":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler,normalize\nfrom sklearn.decomposition import PCA","852ee979":"creditcard_df=pd.read_csv('..\/input\/bank-customer\/marketing_data.csv')\n\n# CUSTID: Identification of Credit Card holder \n# BALANCE: Balance amount left in customer's account to make purchases\n# BALANCE_FREQUENCY: How frequently the Balance is updated, score between 0 and 1 (1 = frequently updated, 0 = not frequently updated)\n# PURCHASES: Amount of purchases made from account\n# ONEOFFPURCHASES: Maximum purchase amount done in one-go\n# INSTALLMENTS_PURCHASES: Amount of purchase done in installment\n# CASH_ADVANCE: Cash in advance given by the user\n# PURCHASES_FREQUENCY: How frequently the Purchases are being made, score between 0 and 1 (1 = frequently purchased, 0 = not frequently purchased)\n# ONEOFF_PURCHASES_FREQUENCY: How frequently Purchases are happening in one-go (1 = frequently purchased, 0 = not frequently purchased)\n# PURCHASES_INSTALLMENTS_FREQUENCY: How frequently purchases in installments are being done (1 = frequently done, 0 = not frequently done)\n# CASH_ADVANCE_FREQUENCY: How frequently the cash in advance being paid\n# CASH_ADVANCE_TRX: Number of Transactions made with \"Cash in Advance\"\n# PURCHASES_TRX: Number of purchase transactions made\n# CREDIT_LIMIT: Limit of Credit Card for user\n# PAYMENTS: Amount of Payment done by user\n# MINIMUM_PAYMENTS: Minimum amount of payments made by user  \n# PRC_FULL_PAYMENT: Percent of full payment paid by user\n# TENURE: Tenure of credit card service for user","5d5bd947":"creditcard_df.head()","ce01ccf1":"creditcard_df.info()","3fbeeb64":"creditcard_df.describe()","58900035":"sns.heatmap(creditcard_df.isnull(),yticklabels = False,cbar=True,cmap='Blues')","0da861f5":"creditcard_df.isnull().sum()","506dd065":"creditcard_df.MINIMUM_PAYMENTS.fillna(value=creditcard_df.MINIMUM_PAYMENTS.mean(),inplace=True)","afda49ca":"creditcard_df.isnull().sum()","00ee39fd":"creditcard_df.CREDIT_LIMIT.fillna(value=creditcard_df.CREDIT_LIMIT.mean(),inplace=True)","72238cb2":"creditcard_df.isnull().sum()","68301e68":"creditcard_df.duplicated().sum()","104bb9e6":"creditcard_df.drop('CUST_ID',axis=1,inplace=True)","2eeada63":"creditcard_df.columns","007c4f55":"# distplot combines the matplotlib.hist function with seaborn kdeplot()\n# KDE Plot represents the Kernel Density Estimate\n# KDE is used for visualizing the Probability Density of a continuous variable. \n# KDE demonstrates the probability density at different values in a continuous variable. \n\n# Mean of balance is $1500\n# 'Balance_Frequency' for most customers is updated frequently ~1\n# For 'PURCHASES_FREQUENCY', there are two distinct group of customers\n# For 'ONEOFF_PURCHASES_FREQUENCY' and 'PURCHASES_INSTALLMENT_FREQUENCY' most users don't do one off puchases or installment purchases frequently \n# Very small number of customers pay their balance in full 'PRC_FULL_PAYMENT'~0\n# Credit limit average is around $4500\n# Most customers are ~11 years tenure\n\nplt.figure(figsize=(10,50))\nfor ii in range(len(creditcard_df.columns)):\n  plt.subplot(17,1,ii+1)\n  sns.distplot(creditcard_df.iloc[:,ii],kde_kws={\"color\": \"b\", \"lw\": 3, \"label\": \"KDE\"}, hist_kws={\"color\": \"g\"})\nplt.tight_layout()\n","9634a237":"plt.figure(figsize=(14,6))\nsns.heatmap(creditcard_df.corr(),annot=True,)","2818ee67":"scale=StandardScaler()\n","b5cc1782":"creditcard_df_scaled=scale.fit_transform(creditcard_df)","0b3f9962":"creditcard_df_scaled","2a6c9c88":"creditcard_df_scaled.shape","bbc9ff13":"model=KMeans(n_clusters=3)\nmodel.fit_transform(creditcard_df_scaled)","f333af04":"model.inertia_","232be692":"scores=[]\nfor ii in range(1,20):\n  model=KMeans(n_clusters=ii)\n  model.fit_transform(creditcard_df_scaled)\n  scores.append(model.inertia_)\n\n","452080b4":"plt.figure(figsize=(10,15))\nplt.plot(scores,'bx-')","d623b77f":"model_opt=KMeans(n_clusters=7)\n","9d9b9f83":"model_opt.fit(creditcard_df_scaled)","2f8d9f8e":"model_opt.labels_","e01db6f7":"cluster_centres=pd.DataFrame(data=model_opt.cluster_centers_,columns=creditcard_df.columns)\ncluster_centres","cb4d1114":"cluster_centres=scale.inverse_transform(cluster_centres)\ncluster_centres","311428ab":"cluster_centres=pd.DataFrame(data=cluster_centres,columns=creditcard_df.columns)\ncluster_centres","28891fa6":"labels=pd.DataFrame(data=model_opt.labels_,columns=['label'])","42a797a0":"labels","d6836973":"labels=model_opt.fit_predict(creditcard_df_scaled)","e2d2ddf8":"labels","c9ab091d":"labels_df=pd.DataFrame(data=labels,columns=['labels'])\nlabels_df","6397b7cf":"creditcard_df_concated=pd.concat([creditcard_df,labels_df],axis=1)\ncreditcard_df_concated","9842a0db":"for ii in creditcard_df_concated.columns:\n  cluster=creditcard_df_concated.loc[creditcard_df_concated['labels']==0,creditcard_df_concated.columns[ii]]\n  sns.distplot(cluster,kde=False)","9f512544":"for ii in creditcard_df_concated.columns:\n  plt.figure(figsize=(35,5))\n  for cluster_no in range(7):\n    plt.subplot(1,7,cluster_no+1)\n    cluster=creditcard_df_concated.loc[creditcard_df_concated['labels']==cluster_no,ii]\n    cluster.hist(bins=20)\n    plt.title('{}    \\nCluster {} '.format(ii,cluster_no))\n  \n  plt.show()","de41d94d":"pca=PCA(n_components=2)\nprincipal_comp=pca.fit_transform(creditcard_df_scaled)","a652cfa3":"pca_df = pd.DataFrame(data = principal_comp, columns =['pca1','pca2'])\npca_df.shape\npca_df","5a88d766":"pca_df=pd.concat([pca_df,labels_df],axis=1)\npca_df.head()","1dfa9bf7":"plt.figure(figsize=(10,10))\nsns.scatterplot(x=\"pca1\",y=\"pca2\",data=pca_df,hue=labels,palette =['red','green','blue','pink','yellow','gray','purple'])\nplt.show()","715dae4c":"## TASK 2: VISUALIZE AND EXPLORE DATASET","e1a8aa2b":"##  Task 1: IMPORT LIBRARIES AND DATASETS"}}