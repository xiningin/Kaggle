{"cell_type":{"29e05b1a":"code","a9ac2a7e":"code","d71991d7":"code","e427a00b":"code","a0c61dd0":"code","93292d34":"code","d80737c7":"code","e7d0747d":"code","3c107bb0":"code","e129f505":"code","6aca2472":"code","719028b0":"code","a0361457":"code","019bc926":"code","f90294c2":"code","a62e6ce1":"code","27e1e42e":"markdown","fe3d1726":"markdown","985e23b3":"markdown","ccb28c98":"markdown","da9df06f":"markdown","4ecdba69":"markdown","de16efd5":"markdown","31262ab5":"markdown","e05bc6db":"markdown","4328d39c":"markdown","4f00f7d5":"markdown","fae4dfbf":"markdown"},"source":{"29e05b1a":"%%capture\n!pip install --upgrade lifelines","a9ac2a7e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O\nimport sklearn\nimport matplotlib.pyplot as plt\n\nfrom lifelines import CoxPHFitter\nfrom lifelines.utils import concordance_index as cindex\nfrom sklearn.model_selection import train_test_split","d71991d7":"df = pd.read_csv('\/kaggle\/input\/mayo-clinic-primary-biliary-cirrhosis-data\/pbc.csv')\ndf.head()","e427a00b":"continuous_columns = ['age', # Age of the Patient\n                      'bili', # Serum Bilirubin in mg\/dl\n                      'chol', # Serum Cholesterol in mg\/dl\n                      'albumin', # Albumin in gm\/dl\n                      'copper', # Urine Copper in ug\/day\n                      'alk.phos', # Alkaline Phosphatase in U\/liter\n                      'ast', # presence of Ascites: 0 = No 1 = Yes\n                      'trig', # Triglicerides in mg\/dl\n                      'platelet', # Platelets per cubic ml\/1000\n                      'protime' # Prothrombin time in seconds\n                     ]","a0c61dd0":"for i in df.index:\n    df.at[i, 'sex'] = 0 if df.loc[i,'sex'] == \"f\" else 1","93292d34":"df.head()","d80737c7":"np.random.seed(0)\ndf_dev, df_test = train_test_split(df, test_size = 0.2)\ndf_train, df_val = train_test_split(df_dev, test_size = 0.25)","e7d0747d":"mean = df_train.loc[:, continuous_columns].mean()\nstd = df_train.loc[:, continuous_columns].std()\ndf_train.loc[:, continuous_columns] = (df_train.loc[:, continuous_columns] - mean) \/ std\ndf_val.loc[:, continuous_columns] = (df_val.loc[:, continuous_columns] - mean) \/ std\ndf_test.loc[:, continuous_columns] = (df_test.loc[:, continuous_columns] - mean) \/ std","3c107bb0":"df_train.loc[:, continuous_columns].describe()","e129f505":"def one_hot_encoder(dataframe, columns):\n    return pd.get_dummies(dataframe, columns = columns, drop_first = True, dtype=np.float64)","6aca2472":"to_encode = [\"edema\", \"stage\"]\n\none_hot_train = one_hot_encoder(df_train, to_encode)\none_hot_val = one_hot_encoder(df_val, to_encode)\none_hot_test = one_hot_encoder(df_test, to_encode)\n\nprint(one_hot_val.columns.tolist())\nprint(f\"There are {len(one_hot_val.columns)} columns\")","719028b0":"one_hot_train.head()","a0361457":"one_hot_train.dropna(inplace=True)","019bc926":"cph = CoxPHFitter()\ncph.fit(one_hot_train, duration_col = 'time', event_col = 'status', step_size=0.1)","f90294c2":"cph.print_summary()","a62e6ce1":"cph.plot_partial_effects_on_outcome('trt', values=[0, 1]);","27e1e42e":"## Splitting into Training, Testing and Validation Dataset","fe3d1726":"# Normalizing Data","985e23b3":"# One-hot Encoding the Values","ccb28c98":"# Fitting a Cox Proportional Hazard Model","da9df06f":"# Pre-processing","4ecdba69":"## Removing NaN values","de16efd5":"Let's see what our data looks like:","31262ab5":"Let's create a list `continuous_columns` to store all the variables in the dataset:-","e05bc6db":"# Importing the Dataset","4328d39c":"# Importing Packages","4f00f7d5":"### Assigning female as 0 and male as 1","fae4dfbf":"Converting the female(f) and male(m) to binary so that they can be used in training"}}