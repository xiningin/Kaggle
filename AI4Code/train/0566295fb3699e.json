{"cell_type":{"9d299020":"code","a0d2c8ce":"code","48fe3bf7":"code","8b16bbea":"code","c137c8b8":"code","09a66a8b":"code","4570d564":"code","aa65018a":"code","286812f9":"code","051f09df":"code","31e1e2ca":"code","999dc5e2":"code","447f053c":"code","a6ec8f96":"code","3f29138e":"code","369dc268":"code","93128fa6":"code","be263b71":"code","7da25eab":"code","abbd690b":"code","86a064e2":"code","9de68816":"code","31d00b8b":"code","bcd3a236":"code","c77409d5":"code","0a20d736":"code","9fa20d7d":"code","10d8b1bb":"code","3b627618":"code","0de01383":"code","ff24b06c":"code","0f9d115d":"code","9a243904":"code","3cf45716":"code","e5617417":"code","b356f3c4":"code","61f6ab82":"code","52af3373":"code","9438d0bc":"code","22417e67":"code","bfb0aa36":"code","1cc1b670":"code","fad8faec":"code","1d78cd03":"code","86febc13":"code","94796563":"code","f37fa150":"code","5eb65097":"code","433a56a6":"code","ce8498f3":"code","d3e5bae3":"code","96fab46e":"code","83f8e89b":"code","3976b37e":"code","88d94fa1":"code","e9299b47":"code","a912b645":"code","99db3720":"code","360ee78e":"code","aae14b90":"code","335ec6fa":"code","2a278369":"code","e1cf1b99":"code","5efe7327":"code","b3178b3a":"code","a3367114":"code","b2a49218":"code","afe02754":"code","72824f98":"code","32f00cec":"code","cf00d1b8":"code","363dfbca":"code","2ab1c9a4":"code","41dfe0ba":"code","8d1c2ceb":"code","0450d6d9":"code","b8ec435d":"code","cf48db71":"code","3057e334":"code","bc501d82":"code","98d800a1":"code","7d85a847":"code","1f8e69c5":"code","f1ce774a":"code","44ede3db":"code","887971b6":"code","b8065d8f":"code","9a02f20c":"code","b45fb356":"code","7a08d9db":"code","5aa81d6d":"code","848968e8":"code","c3012b96":"code","1a80e14a":"code","33974b26":"code","8349ae92":"code","10f7d428":"code","4d0808b7":"code","3c0b2822":"code","3fce6291":"code","f03a8f7a":"code","af7063e5":"code","878de879":"code","a6aaa70a":"code","40441a49":"code","34bb9301":"code","c2baf48e":"code","45261391":"code","4ea6b8f3":"code","5959f943":"code","58c4be4b":"code","2e15ab00":"code","d16c3eb8":"code","d32ecb62":"code","a05c76af":"code","29afc282":"code","20d44481":"code","888ebe61":"code","39fe406b":"code","74bbb6eb":"code","6c1accad":"code","1a946a6f":"code","e86abc20":"code","5145d0c8":"code","c7ad09cc":"code","b75ddb17":"code","059030f2":"code","3d8c6162":"code","5e929197":"code","ba7d5d6a":"code","3aaba077":"code","0831ce2f":"code","992955db":"code","4dcde4a6":"code","a60fc0d8":"code","c0a92ba2":"code","12c7a770":"code","cff806b6":"code","26a07a63":"code","d3b77620":"code","de3a0a33":"code","3b273dee":"code","ed196e81":"code","edf52d9c":"code","c463f130":"code","1f168b67":"code","db96443a":"code","d1d0a23b":"code","f85132a1":"code","9cbce1de":"code","16604e3e":"code","17648c09":"code","a658766f":"code","a46714f2":"code","f012f2d1":"code","4a7c9965":"code","f42d5dfe":"code","bdabac56":"code","0cafd4fe":"code","11f7347f":"code","d2c5362a":"code","749ef2a4":"code","f5b54407":"code","7b5e5e33":"code","551fb5bd":"code","b715e14e":"code","9d32b030":"code","b0f64768":"code","eb93b2ef":"code","c279c21b":"code","de82fdb4":"code","5c941808":"code","73137a90":"code","ddf26673":"code","bbdaaf66":"code","9b9a7284":"code","23fdade8":"code","811e0c20":"code","cc560321":"code","d00236af":"code","71ae8d1f":"code","47cefc30":"code","db00977d":"code","5705dcae":"code","eb5c130d":"code","b2421500":"code","c6d2fa50":"code","fbccd440":"code","26fe7d1d":"markdown","7959fe3b":"markdown","fbdfae57":"markdown","6841450e":"markdown","cb49ef59":"markdown","5c2448b9":"markdown","c5bcab78":"markdown","b278964d":"markdown","8de0c7df":"markdown","984b4578":"markdown","9b163515":"markdown","3ba9ea6f":"markdown","65c24887":"markdown","31fe46f2":"markdown","10c0f0ae":"markdown","38b8103b":"markdown","8bf64315":"markdown","1162efa6":"markdown","26fa16a7":"markdown","f6c58e86":"markdown","143375de":"markdown","4f9d0854":"markdown","ae388a19":"markdown","feb64ba7":"markdown","f4e94250":"markdown","ae93d604":"markdown","8b9a255b":"markdown","20c4ea04":"markdown"},"source":{"9d299020":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a0d2c8ce":"import seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt","48fe3bf7":"train = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/sample_submission.csv')","8b16bbea":"train.shape, test.shape","c137c8b8":"train = train.drop('Id', 1)\ntest = test.drop('Id', 1)","09a66a8b":"def compare_box(col):\n    print(col)\n    print(\"Train MAX : {0},  Test MAX : {1}\".format(train[col].max(), test[col].max()))\n    print(\"Train MIN : {0},  Test MIN : {1}\".format(train[col].min(), test[col].min()))\n    print(\"Train MEAN: {0:.2f},  Test MEAN: {1:.2f}\".format(train[col].mean(), test[col].mean()))\n    print(\"Train STD : {0:.2f},  Test STD : {1:.2f}\".format(train[col].std(), test[col].std()))\n    print(\"Train NaN : {0},  Test STD : {1}\".format(train[col].isnull().sum(), test[col].isnull().sum()))\n    print(\"----\"*10)\n    fg, ax = plt.subplots(figsize=(12, 6))\n    fg.add_subplot(1, 2, 1)\n    sns.boxplot(y=train[col])\n    plt.xlabel('Train')\n    fg.add_subplot(1, 2, 2)\n    sns.boxplot(y=test[col])\n    plt.xlabel('Test')","4570d564":"# Here I want to select numerical data columns\nnum_col = train.select_dtypes(exclude='object').drop('SalePrice', 1).columns","aa65018a":"vis_col = len(num_col)\/4+1","286812f9":"fg, ax = plt.subplots(figsize=(12, 18))\nfor i, col in enumerate(num_col):\n    fg.add_subplot(vis_col, 4, i+1)\n    sns.distplot(train[col].dropna())\n    plt.xlabel(col)\n    \nplt.tight_layout()\nplt.show()","051f09df":"fg, ax = plt.subplots(figsize=(12, 18))\nfor i, col in enumerate(num_col):\n    fg.add_subplot(vis_col, 4, i+1)\n    sns.scatterplot(x=train[col], y=train['SalePrice'])\n    plt.xlabel(col)\n    \nplt.tight_layout()\nplt.show()","31e1e2ca":"train[num_col].isnull().sum().sort_values(ascending=False).head()","999dc5e2":"test[num_col].isnull().sum().sort_values(ascending=False).head(15)","447f053c":"train['MasVnrArea'].fillna(train['MasVnrArea'].mode()[0], inplace=True)","a6ec8f96":"test['TotalBsmtSF'].fillna(0, inplace=True)\ntest['MasVnrArea'].fillna(test['MasVnrArea'].mode()[0], inplace=True)\ntest['BsmtHalfBath'].fillna(test['BsmtHalfBath'].mode()[0], inplace=True)\ntest['BsmtFullBath'].fillna(test['BsmtFullBath'].mode()[0], inplace=True)\ntest['GarageArea'].fillna(test['GarageArea'].mode()[0], inplace=True)\ntest['BsmtFinSF1'].fillna(test['BsmtFinSF1'].mode()[0], inplace=True)\ntest['BsmtFinSF2'].fillna(test['BsmtFinSF2'].mode()[0], inplace=True)\ntest['BsmtUnfSF'].fillna(test['BsmtUnfSF'].mode()[0], inplace=True)\ntest['TotalBsmtSF'].fillna(test['TotalBsmtSF'].mode()[0], inplace=True)\ntest['GarageCars'].fillna(test['GarageCars'].mode()[0], inplace=True)","3f29138e":"train['LotFrontage'].fillna(train.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.median()), inplace=True)\ntest['LotFrontage'].fillna(test.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.median()), inplace=True)","369dc268":"train.corr()['GarageYrBlt'].sort_values(ascending=False).head()","93128fa6":"train['GarageYrBlt'].fillna(0, inplace=True)\ntest['GarageYrBlt'].fillna(0, inplace=True)","be263b71":"train[num_col].isnull().sum().sort_values(ascending=False).head()","7da25eab":"test[num_col].isnull().sum().sort_values(ascending=False).head()","abbd690b":"fg, ax = plt.subplots(figsize=(12, 18))\nfor i, col in enumerate(num_col):\n    fg.add_subplot(9, 4, i+1)\n    sns.boxplot(y=train[col])\n    plt.xlabel(col)\n    \nplt.tight_layout()\nplt.show()","86a064e2":"plt.figure(figsize=(7, 6))\nsns.boxplot(y='SalePrice', data=train)","9de68816":"train.loc[train['SalePrice'] > 700000, :]","31d00b8b":"train = train.loc[train['SalePrice'] < 700000, :]","bcd3a236":"compare_box('LotArea')","c77409d5":"train = train.loc[train['LotArea'] < 100000, :]","0a20d736":"compare_box('LotArea')","9fa20d7d":"compare_box('TotalBsmtSF')","10d8b1bb":"compare_box('LotFrontage')","3b627618":"train = train.loc[train['LotFrontage'] < 210, :]","0de01383":"compare_box('LotFrontage')","ff24b06c":"compare_box('MasVnrArea')","0f9d115d":"train = train.loc[train['MasVnrArea'] < 1300, :]","9a243904":"compare_box('MasVnrArea')","3cf45716":"compare_box('BsmtFinSF1')","e5617417":"train = train.loc[train['BsmtFinSF1'] < 2000, :]","b356f3c4":"compare_box('BsmtFinSF1')","61f6ab82":"compare_box('BsmtFinSF2')","52af3373":"train = train.loc[train['BsmtFinSF2'] < 1200, :]","9438d0bc":"compare_box('BsmtFinSF2')","22417e67":"train.shape, test.shape","bfb0aa36":"train['MoSold'].value_counts()","1cc1b670":"train['MoSold'] = train['MoSold'].astype('object')\ntest['MoSold'] = test['MoSold'].astype('object')","fad8faec":"train['YrSold'].value_counts()","1d78cd03":"train['YrSold'] = train['YrSold'].astype('object')\ntest['YrSold'] = test['YrSold'].astype('object')","86febc13":"num_col = train.select_dtypes(exclude='object').drop('SalePrice', 1).columns\nnum_col","94796563":"len(num_col)","f37fa150":"cat_col = train.select_dtypes(include='object').columns\ncat_col","5eb65097":"len(cat_col), len(num_col)","433a56a6":"vis_col = len(cat_col)\/4 +1\nfg, ax = plt.subplots(figsize=(12, 18))\n\nfor i, col in enumerate(cat_col):\n    fg.add_subplot(vis_col, 4, i+1)\n    sns.countplot(train[col])\n    plt.xlabel(col)\n\nplt.tight_layout()\nplt.show()","ce8498f3":"train[cat_col].isnull().sum().sort_values(ascending=False).head(20)","d3e5bae3":"test[cat_col].isnull().sum().sort_values(ascending=False).head(20)","96fab46e":"train['RoofMatl'].value_counts()","83f8e89b":"test['RoofMatl'].value_counts()","3976b37e":"train['RoofMatl_clean'] = train['RoofMatl'].apply(lambda x: x if x == 'CompShg' else 'Other')\ntest['RoofMatl_clean'] = test['RoofMatl'].apply(lambda x: x if x == 'CompShg' else 'Other')","88d94fa1":"train['Alley'].value_counts()","e9299b47":"test['Alley'].value_counts()","a912b645":"train['Alley'].fillna('None', inplace=True)\ntest['Alley'].fillna('None', inplace=True)","99db3720":"train['Alley_bool'] = train['Alley'].apply(lambda x: 0 if x == 'None' else 1)\ntest['Alley_bool'] = test['Alley'].apply(lambda x: 0 if x == 'None' else 1)","360ee78e":"train['Alley_bool'].value_counts()","aae14b90":"test['Alley_bool'].value_counts()","335ec6fa":"train['Electrical'].value_counts()","2a278369":"test['Electrical'].value_counts()","e1cf1b99":"train['Electrical'].fillna(train['Electrical'].mode()[0], inplace=True)","5efe7327":"train['Electrical_clean'] = train['Electrical'].apply(lambda x: x if x == 'SBrkr' else 'Fuse')\ntest['Electrical_clean'] = test['Electrical'].apply(lambda x: x if x == 'SBrkr' else 'Fuse')","b3178b3a":"train['Electrical_clean'].value_counts()","a3367114":"test['Electrical_clean'].value_counts()","b2a49218":"train['MasVnrType'].value_counts()","afe02754":"test['MasVnrType'].value_counts()","72824f98":"train['MasVnrType'].isnull().sum()","32f00cec":"test['MasVnrType'].isnull().sum()","cf00d1b8":"train['MasVnrType'].fillna(train['MasVnrType'].mode()[0], inplace=True)\ntest['MasVnrType'].fillna(test['MasVnrType'].mode()[0], inplace=True)","363dfbca":"test['MSZoning'].isnull().sum()","2ab1c9a4":"test['MSZoning'].value_counts()","41dfe0ba":"test['MSZoning'].fillna(test['MSZoning'].mode()[0], inplace=True)","8d1c2ceb":"train['Functional'].value_counts()","0450d6d9":"test['Functional'].value_counts()","b8ec435d":"train['Functional'].isnull().sum()","cf48db71":"test['Functional'].isnull().sum()","3057e334":"test['Functional'].fillna(test['Functional'].mode()[0], inplace=True)","bc501d82":"train['Functional_clean'] = train['Functional'].apply(lambda x: x if x =='Typ' else 'Other')\ntest['Functional_clean'] = test['Functional'].apply(lambda x: x if x =='Typ' else 'Other')","98d800a1":"train['Utilities'].value_counts()","7d85a847":"test['Utilities'].value_counts()","1f8e69c5":"test['Utilities'].fillna(test['Utilities'].mode()[0], inplace=True)","f1ce774a":"train['Exterior2nd'].isnull().sum()","44ede3db":"test['Exterior2nd'].isnull().sum()","887971b6":"train['Exterior2nd'].value_counts()","b8065d8f":"test['Exterior2nd'].value_counts()","9a02f20c":"ext_other = [\n    'Stone',\n    'AsphShn',\n    'Other',\n    'CBlock',\n    'ImStucc',\n    'Brk Cmn'\n]","b45fb356":"train['Exterior2nd'] = train['Exterior2nd'].apply(lambda x: 'Other' if x in ext_other else x)\ntest['Exterior2nd'] = test['Exterior2nd'].apply(lambda x: 'Other' if x in ext_other else x)","7a08d9db":"train['Exterior2nd'].fillna('Other', inplace=True)\ntest['Exterior2nd'].fillna('Other', inplace=True)","5aa81d6d":"train['Exterior2nd'].value_counts()","848968e8":"test['Exterior2nd'].value_counts()","c3012b96":"train['SaleType'].value_counts()","1a80e14a":"test['SaleType'].value_counts()","33974b26":"saletype_other = [\n    'ConLD',\n    'ConLw',\n    'ConLI',\n    'CWD',\n    'Oth',\n    'Con'\n]","8349ae92":"train['SaleType'] = train['SaleType'].apply(lambda x: x if x not in saletype_other else 'Other')\ntest['SaleType'] = test['SaleType'].apply(lambda x: x if x not in saletype_other else 'Other')","10f7d428":"test['SaleType'].fillna('Other', inplace=True)","4d0808b7":"train['SaleType'].isnull().sum()","3c0b2822":"test['SaleType'].isnull().sum()","3fce6291":"train['SaleType'].value_counts()","f03a8f7a":"test['SaleType'].value_counts()","af7063e5":"train['KitchenQual'].value_counts()","878de879":"test['KitchenQual'].value_counts()","a6aaa70a":"train['KitchenQual'].isnull().sum()","40441a49":"test['KitchenQual'].isnull().sum()","34bb9301":"test['KitchenQual'].fillna('TA', inplace=True)","c2baf48e":"train['Exterior1st'].value_counts()","45261391":"test['Exterior1st'].value_counts()","4ea6b8f3":"ext_other = [\n    'Stone',\n    'BrkComm',\n    'ImStucc',\n    'AsphShn',\n    'Other',\n    'CBlock',\n]","5959f943":"train['Exterior1st'] = train['Exterior1st'].apply(lambda x: 'Other' if x in ext_other else x)\ntest['Exterior1st'] = test['Exterior1st'].apply(lambda x: 'Other' if x in ext_other else x)","58c4be4b":"train['Exterior1st'].fillna('Other', inplace=True)\ntest['Exterior1st'].fillna('Other', inplace=True)","2e15ab00":"train['Exterior1st'].isnull().sum()","d16c3eb8":"test['Exterior1st'].isnull().sum()","d32ecb62":"train['MiscFeature'].value_counts()","a05c76af":"train['MiscFeature'].fillna('None', inplace=True)\ntest['MiscFeature'].fillna('None', inplace=True)","29afc282":"train['MiscFeature_bool'] = train['MiscFeature'].apply(lambda x: 1 if x == 'None' else 0)\ntest['MiscFeature_bool'] = test['MiscFeature'].apply(lambda x: 1 if x == 'None' else 0)","20d44481":"train['Alley'].value_counts()","888ebe61":"train['Alley'].fillna('None', inplace=True)\ntest['Alley'].fillna('None', inplace=True)","39fe406b":"train['Fence'].value_counts()","74bbb6eb":"test['Fence'].value_counts()","6c1accad":"train['Fence'].fillna('None', inplace=True)\ntest['Fence'].fillna('None', inplace=True)","1a946a6f":"train['FireplaceQu'].value_counts()","e86abc20":"test['FireplaceQu'].value_counts()","5145d0c8":"train['FireplaceQu'].fillna('None', inplace=True)\ntest['FireplaceQu'].fillna('None', inplace=True)","c7ad09cc":"train[cat_col].isnull().sum().sort_values(ascending=False).head(20)","b75ddb17":"test[cat_col].isnull().sum().sort_values(ascending=False).head(20)","059030f2":"train['GarageQual'].value_counts()","3d8c6162":"train['GarageCond'].value_counts()","5e929197":"train['GarageQual'].fillna('None', inplace=True)\ntest['GarageQual'].fillna('None', inplace=True)","ba7d5d6a":"train['GarageQual_TA'] = train['GarageQual'].apply(lambda x: x if x == 'TA' else 'Other')\ntest['GarageQual_TA'] = test['GarageQual'].apply(lambda x: x if x == 'TA' else 'Other')","3aaba077":"train['GarageFinish'].value_counts()","0831ce2f":"test['GarageFinish'].value_counts()","992955db":"train['GarageFinish'].fillna('None', inplace=True)\ntest['GarageFinish'].fillna('None', inplace=True)","4dcde4a6":"train['GarageType'].value_counts()","a60fc0d8":"test['GarageType'].value_counts()","c0a92ba2":"train['GarageType'].fillna('None', inplace=True)\ntest['GarageType'].fillna('None', inplace=True)","12c7a770":"train['BsmtFinType2'].value_counts()","cff806b6":"train['PoolQC'].fillna('None', inplace=True)\ntest['PoolQC'].fillna('None', inplace=True)","26a07a63":"train['GarageCond'].fillna('None', inplace=True)\ntest['GarageCond'].fillna('None', inplace=True)","d3b77620":"train['BsmtExposure'].fillna('None', inplace=True)\ntest['BsmtExposure'].fillna('None', inplace=True)","de3a0a33":"train['BsmtCond'].fillna('None', inplace=True)\ntest['BsmtCond'].fillna('None', inplace=True)","3b273dee":"train['BsmtQual'].fillna('None', inplace=True)\ntest['BsmtQual'].fillna('None', inplace=True)","ed196e81":"train['BsmtFinType1'].fillna('None', inplace=True)\ntest['BsmtFinType1'].fillna('None', inplace=True)","edf52d9c":"train['BsmtFinType2'].fillna('None', inplace=True)\ntest['BsmtFinType2'].fillna('None', inplace=True)","c463f130":"train[cat_col].isnull().sum().sort_values(ascending=False).head()","1f168b67":"test[cat_col].isnull().sum().sort_values(ascending=False).head()","db96443a":"train['WoodDeckSF_bool'] = train['WoodDeckSF'].apply(lambda x: 1 if x > 0 else 0)\ntest['WoodDeckSF_bool'] = test['WoodDeckSF'].apply(lambda x: 1 if x > 0 else 0)","d1d0a23b":"train['OpenPorchSF_bool'] = train['OpenPorchSF'].apply(lambda x: 1 if x > 0 else 0)\ntest['OpenPorchSF_bool'] = test['OpenPorchSF'].apply(lambda x: 1 if x > 0 else 0)","f85132a1":"train['EnclosedPorch_bool'] = train['EnclosedPorch'].apply(lambda x: 1 if x > 0 else 0)\ntest['EnclosedPorch_bool'] = test['EnclosedPorch'].apply(lambda x: 1 if x > 0 else 0)","9cbce1de":"train['3SsnPorch_bool'] = train['3SsnPorch'].apply(lambda x: 1 if x > 0 else 0)\ntest['3SsnPorch_bool'] = test['3SsnPorch'].apply(lambda x: 1 if x > 0 else 0)","16604e3e":"train['ScreenPorch_bool'] = train['ScreenPorch'].apply(lambda x: 1 if x > 0 else 0)\ntest['ScreenPorch_bool'] = test['ScreenPorch'].apply(lambda x: 1 if x > 0 else 0)","17648c09":"train['PoolArea_bool'] = train['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ntest['PoolArea_bool'] = test['PoolArea'].apply(lambda x: 1 if x > 0 else 0)","a658766f":"train['FirePlaces_bool'] = train['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\ntest['FirePlaces_bool'] = test['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)","a46714f2":"def draw_rel(df):\n    plt.figure(figsize=(9, 6))\n    sns.regplot(y=train['SalePrice'], x=df)","f012f2d1":"area_map = {\n    0: 'GrLivArea',\n    1: 'TotalBsmtSF',\n    2: 'LotArea',\n    3: 'GarageArea',\n}","4a7c9965":"for col in area_map.values():\n    draw_rel(train[col])","f42d5dfe":"train['LotArea_log'] = np.log1p(train['LotArea'])\ntest['LotArea_log'] = np.log1p(test['LotArea'])","bdabac56":"draw_rel(train['LotArea_log'])","0cafd4fe":"area_map = {\n    0: 'GrLivArea',\n    1: 'TotalBsmtSF',\n    2: 'LotArea_log',\n    3: 'GarageArea',\n}","11f7347f":"to_draw = {}\nto_add_col = {}","d2c5362a":"for i in range(4):\n    for j in range(i+1, 4):\n        col_name = area_map[i]+\"_\"+area_map[j]+\"_sum\"\n        col_value = train[area_map[i]] +train[area_map[j]]\n        corr_val = col_value.corr(train['SalePrice'])\n        print(\"CORR: {0} ===> {1}\".format(col_name, corr_val))\n        to_add_col[col_name] = col_value\n        to_draw[col_name] = col_value","749ef2a4":"for i in range(4):\n    for j in range(i+1, 4):\n        col_name = area_map[i]+\"_\"+area_map[j]+\"_mul\"\n        col_value = train[area_map[i]] * train[area_map[j]]\n        corr_val = col_value.corr(train['SalePrice'])\n        print(\"CORR: {0} ===> {1}\".format(col_name, corr_val))\n        to_add_col[col_name] = col_value\n        to_draw[col_name] = col_value","f5b54407":"for i in range(4):\n    for j in range(i+1, 4):\n        for z in range(j+1, 4):\n            col_name = area_map[i]+\"_\"+area_map[j]+\"_\"+area_map[z]+\"_sum\"\n            col_value = train[area_map[i]]+train[area_map[j]]+train[area_map[z]]\n            corr_val = col_value.corr(train['SalePrice'])\n            print(\"CORR: {0} ===> {1}\".format(col_name, corr_val))\n            to_add_col[col_name] = col_value\n            to_draw[col_name] = col_value","7b5e5e33":"for i in range(4):\n    for j in range(i+1, 4):\n        for z in range(j+1, 4):\n            col_name = area_map[i]+\"_\"+area_map[j]+\"_\"+area_map[z]+\"_mul\"\n            col_value = np.sqrt(train[area_map[i]]*train[area_map[j]]*train[area_map[z]])\n            corr_val = col_value.corr(train['SalePrice'])\n            print(\"CORR: {0} ===> {1}\".format(col_name, corr_val))\n            to_add_col[col_name] = col_value\n            to_draw[col_name] = col_value","551fb5bd":"fg, ax = plt.subplots(figsize=(18,18))\n# fg, ax = plt.subplots()\nn_col = 4\nn_row = len(to_draw) \/\/ n_col\ncnt = 1\nfor col, value in to_draw.items():\n    fg.add_subplot(n_row, n_col, cnt)\n    sns.regplot(x=value, y=train['SalePrice'])\n    plt.xlabel(col)\n    cnt+=1\nplt.tight_layout()\nplt.show()","b715e14e":"key_df = pd.DataFrame(to_add_col)\nkey_df","9d32b030":"plt.figure(figsize=(12, 12))\nsns.heatmap(key_df.corr())\nplt.tight_layout()\nplt.show()","b0f64768":"train['GrLivArea_TotalBsmtSF_GarageArea_sum'] = train['GrLivArea'] + train['TotalBsmtSF'] +train['GarageArea']\ntrain['LotArea_log_GarageArea_mul'] = train['LotArea_log'] * train['GarageArea']","eb93b2ef":"test['GrLivArea_TotalBsmtSF_GarageArea_sum'] = test['GrLivArea'] + test['TotalBsmtSF'] +test['GarageArea']\ntest['LotArea_log_GarageArea_mul'] = test['LotArea_log'] * test['GarageArea']","c279c21b":"train.shape, test.shape","de82fdb4":"other_area_map = {\n    0: 'WoodDeckSF',\n    1: 'OpenPorchSF',\n    2: 'EnclosedPorch',\n    3: '3SsnPorch',\n    4: 'ScreenPorch',\n    5: 'PoolArea',\n}","5c941808":"to_draw = {\n    'WoodDeckSF': train['WoodDeckSF'],\n    'OpenPorchSF': train['OpenPorchSF'],\n    'EnclosedPorch': train['EnclosedPorch'],\n    '3SsnPorch': train['3SsnPorch'],\n    'ScreenPorch': train['ScreenPorch'],\n    'PoolArea': train['PoolArea'],\n}","73137a90":"for i in range(6):\n    for j in range(i+1, 6):\n        col_name = other_area_map[i]+\"_\"+other_area_map[j]+\"_sum\"\n        col_value = train[other_area_map[i]] +train[other_area_map[j]]\n        corr_val = col_value.corr(train['SalePrice'])\n        print(\"CORR: {0} ===> {1}\".format(col_name, corr_val))\n        if corr_val > 0.3:\n            to_add_col[col_name] = col_value\n        to_draw[col_name] = col_value","ddf26673":"for i in range(6):\n    for j in range(i+1, 6):\n        for z in range(j+1, 6):\n            col_name = other_area_map[i]+\"_\"+other_area_map[j]+\"_\" + other_area_map[z] +\"_sum\"\n            col_value = train[other_area_map[i]] +train[other_area_map[j]] + train[other_area_map[z]]\n            corr_val = col_value.corr(train['SalePrice'])\n            print(\"CORR: {0} ===> {1}\".format(col_name, corr_val))\n            if corr_val > 0.3:\n                to_add_col[col_name] = col_value\n            to_draw[col_name] = col_value","bbdaaf66":"for i in range(6):\n    for j in range(i+1, 6):\n        col_name = other_area_map[i]+\"_\"+other_area_map[j]+\"_mul\"\n        col_value = train[other_area_map[i]]*train[other_area_map[j]]\n        corr_val = col_value.corr(train['SalePrice'])\n        print(\"CORR: {0} ===> {1}\".format(col_name, corr_val))\n        if corr_val > 0.3:\n            to_add_col[col_name] = col_value\n        to_draw[col_name] = col_value","9b9a7284":"for i in range(6):\n    for j in range(i+1, 6):\n        for z in range(j+1, 6):\n            col_name = other_area_map[i]+\"_\"+other_area_map[j]+\"_\" + other_area_map[z] +\"_mul\"\n            col_value = train[other_area_map[i]] * train[other_area_map[j]] * train[other_area_map[z]]\n            corr_val = col_value.corr(train['SalePrice'])\n            print(\"CORR: {0} ===> {1}\".format(col_name, corr_val))\n            if corr_val > 0.3:\n                to_add_col[col_name] = col_value\n            to_draw[col_name] = col_value","23fdade8":"fg, ax = plt.subplots(figsize=(18,12))\n# fg, ax = plt.subplots()\nn_col = 6\nn_row = len(to_add_col) \/\/ n_col + 1\ncnt = 1\nfor col, value in to_add_col.items():\n    fg.add_subplot(n_row, n_col, cnt)\n    sns.regplot(x=value, y=train['SalePrice'])\n    plt.xlabel(col)\n    cnt+=1\nplt.tight_layout()\nplt.show()","811e0c20":"key_df = pd.DataFrame(to_add_col)\nkey_df","cc560321":"plt.figure(figsize=(12, 12))\nsns.heatmap(key_df.corr())\nplt.tight_layout()\nplt.show()","d00236af":"train['FullBathCount'] = train['BsmtFullBath'] + train['FullBath']\ntrain['HalfBathCount'] = train['HalfBath'] + train['BsmtHalfBath']","71ae8d1f":"test['FullBathCount'] = test['BsmtFullBath'] + test['FullBath']\ntest['HalfBathCount'] = test['HalfBath'] + test['BsmtHalfBath']","47cefc30":"train['OverallMean'] = (train['OverallCond']+ train['OverallQual'])\/2\ntest['OverallMean'] = (test['OverallCond']+ test['OverallQual'])\/2","db00977d":"train['GrLivArea_OverallQual_mul'] = train['GrLivArea_TotalBsmtSF_GarageArea_sum'] * train['OverallQual'].astype(int)\ntest['GrLivArea_OverallQual_mul'] = test['GrLivArea_TotalBsmtSF_GarageArea_sum'] * test['OverallQual'].astype(int)","5705dcae":"train['GrLivArea_OverallCond_mul'] = train['GrLivArea_TotalBsmtSF_GarageArea_sum'] * train['OverallCond'].astype(int)\ntest['GrLivArea_OverallCond_mul'] = test['GrLivArea_TotalBsmtSF_GarageArea_sum'] * test['OverallCond'].astype(int)","eb5c130d":"compare_box('GrLivArea_OverallQual_mul')","b2421500":"train.isnull().sum().sort_values(ascending=False).head()","c6d2fa50":"test.isnull().sum().sort_values(ascending=False).head()","fbccd440":"## Columns to remove\nto_remove_cols = [\n    'GarageYrBlt',\n    'Utilities',\n    'Street',\n    'SalePrice',\n    'PoolQC',\n    'Id',\n]","26fe7d1d":"## Bathroom Count","7959fe3b":"**6. BsmtFinSF1**","fbdfae57":"## Further Tuning","6841450e":"**4. LotFrontage**","cb49ef59":"## Mixture w\/ OverallQual and OverallCond","5c2448b9":"### Other Area","c5bcab78":"## Outliers","b278964d":"**7. BsmtFinSF2**","8de0c7df":"## Explore NaN Values","984b4578":"## Explore NaN Values of Numerical Data","9b163515":"make LotArea -> LotArea_log\n\nI expect it to be more linear reg","3ba9ea6f":"**3. TotalBsmtSF**","65c24887":"## Check up Missing Values","31fe46f2":"## Explore Categorical Data","10c0f0ae":"GarageYrBlt & YearBuilt Correlation is over 0.82\n\nSo, I just want to drop the columne 'GarageYrBlt'","38b8103b":"Previously I removed outlier over 5000 at this column.\n\nBut it results out to be bad performace of predicting outliers of test set.\nEvaluation is RMSE\n","8bf64315":"**1. SalePrice**","1162efa6":"Adding too many produced columns will result in overfitting problem.\n\nSo, I just want to add feature which is highly correlated to 'SalePrice'","26fa16a7":"**2. LotArea**","f6c58e86":"Here, train.Utilies has only one value of 'NoSeWa'\nand if I make that row drop, then Utilites column will have only one unified value.\n\nSo, I just want to drop the column","143375de":"Here, I can see that train dataset's data composition is quite diffenrent than test dataset's","4f9d0854":"## Add Boolean columns","ae388a19":"## Define Util Functions","feb64ba7":"**5. MasVnrArea**","f4e94250":"For the SaleType,\n\nthere are many value categories with less than 10 counts.\n\nSo, I just want to simplify it","ae93d604":"## Overall Rating","8b9a255b":"## Explore Data","20c4ea04":"## Make change to categorical column"}}