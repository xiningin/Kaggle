{"cell_type":{"915faf80":"code","19e76632":"code","5d611b3e":"code","9a89ae49":"code","0308e8d4":"code","b3b5cc9f":"code","3e314157":"code","79d8e0fe":"code","7c99ac23":"code","bef2d48e":"code","473436ea":"code","ca1d9f0d":"code","d09c1c4e":"code","56b11301":"code","9f40afaa":"code","8db0a61c":"code","3f26f2ca":"code","b6f26921":"code","b1288ec2":"code","80676141":"code","bae3626b":"markdown","09c56505":"markdown","086f97f8":"markdown","daa4aa9a":"markdown","1bb92f16":"markdown","c80f8df9":"markdown","b0b0f3f0":"markdown","bc7ce333":"markdown","c18359cf":"markdown","46ddc5c3":"markdown","d433e43e":"markdown","9bb5259d":"markdown","661ce7e6":"markdown","c1cdda3d":"markdown","528b14ce":"markdown","25df6fe8":"markdown","c5faeb90":"markdown","7012b6fd":"markdown","b0b6426d":"markdown","c524857e":"markdown","282fa5f9":"markdown","e6fd6b80":"markdown","a346f39c":"markdown","72f254a2":"markdown","4a374394":"markdown"},"source":{"915faf80":"# single variable, single value\na = 1 \nprint(a)\n\n# multiple variables, single value\nb = c = d = 2\nprint(b,c,d)\n\n# multiple variables, multiple values\nx, y, z = 'python', 'is', 'cool'\nprint(x, y, z)","19e76632":"name = 'python lover!'\nprint(name)","5d611b3e":"## Creating a list \nmylist = [2, 4, 'johns', 32.44] \nprint(mylist)","9a89ae49":"## accessing list elements \nprint(mylist[0]) # 2\nprint(mylist[2]) # johns","0308e8d4":"## changing the values of the element  \nmylist[2] = 1 \nprint(mylist)","b3b5cc9f":"print(mylist[0])     # single element, list[index]\nprint(mylist[3:])    # all elements with index greater than or equal to 3, list[starting_index:]\nprint(mylist[:4])    # all elements with index less than 4, list[:last_index]\nprint(mylist[1:4])   # all elements starting from index 1 until 3 , list[starting_index: last_index]\nprint(mylist[:4:2])  # all elements starting from index 0 unitl 3, ","3e314157":"## Creating a Tuple \nt = (2,4, 'john', 32.44)\nprint(t)","79d8e0fe":"## you can use indexing & slicing\nprint(t[2]) # john\nprint(t[2:]) # ('john', 32.44)","7c99ac23":"## values cannot be changed, because tuples are immutable\nt[0] = 4","bef2d48e":"## creating a Dictionary\nd1 = {'one': 1, 'two': 2}\n\n## updating item value\nd1[\"two\"] = 3 \n\n## adding new key\nd1[\"three\"] = 3\n\nprint(d1)","473436ea":"a = 1\nif (a == 1):    # if (expression\/condition):\n    print(a)    # statements to execute\n    ","ca1d9f0d":"a = 0\nif (a == 1):     # if (expression\/condition):\n    print(True)  # statements to execute\nelse:            # else:\n    print(False) # statements to execute","d09c1c4e":"if (a == 1):\n    print(1)\nelif(a == 2):  # creates an 'else if' ladder \n    print(2)\nelse:\n    print('0')","56b11301":"a = 1\nwhile (a<10):     # while (expression\/condition):\n    print(a)      # statements to be executed \n    a += 1        # incrementing the variable a","9f40afaa":"for i in range(10):   \n    print(i)           ","8db0a61c":"for i in ['1',5,6,[8,3]]:  # for 'element' in 'sequence' :\n    print(i)               # statements to execute","3f26f2ca":"for i in ('john', (1, 3), 'tom'):\n    print(i)","b6f26921":"d = {'one': 1, 'two': 2, 'three': 3}\nprint('Keys')\nfor i in d.keys():\n    print(i)\n    \nprint('\\nValues')\nfor i in d.values():\n    print(i)\n    \nprint('\\nItems')\nfor i in d.items():\n    print(i)","b1288ec2":"def addition(a,b):\n    c = a+b       # body of the function\n    return c\n\naddition(1,2)","80676141":"addition('karan','arjun') # you can add two strings using the same function, perks of being a loosely typed language!","bae3626b":"#### For loop\nExecute for a certain number of times","09c56505":"You can learn more about `range()` function [here](https:\/\/www.geeksforgeeks.org\/python-range-function\/).\n\nYou can also use `for` loop with collection objects like list, tuples & dictionaries.","086f97f8":"**Note:** Python is a case sensitive programming language. So `Name` and `name` are two different variables","daa4aa9a":"#### *if - else* statement","1bb92f16":"This is good enough introduction to get you started with your data science journey. There are many more concepts which I have not talked about (like list comprehensions, generators, etc) because I did not want to overwhelm you guys. Try writing some basic programs in python, you will soon fall in <span style=\"color:red\">Love<\/span> with it. \n\nIts really important for you have good enough practice working with python. Hence,I am sharing some highly recommended resources for learning python. These are some of the 'best of best' resources that I have come across over a period of 4+ years being a python programmer. So I really hope that these resources will be valuable to you and will save you a lot of time.\n\n1. [Whirlwind Tour of Python](https:\/\/github.com\/jakevdp\/WhirlwindTourOfPython) \nonly book that covers all the essential Python basics without overwhelming the Python novice.\n\n2. [Learn Python the Hard Way](http:\/\/download.library1.org\/main\/2202000\/b06f844f416aaee94a19dca4730d66bb\/%28Zed%20Shaw%E2%80%99s%20Hard%20Way%20Series%29%20Zed%20A.%20Shaw%20-%20Learn%20Python%203%20the%20Hard%20Way_%20A%20Very%20Simple%20Introduction%20to%20the%20Terrifyingly%20Beautiful%20World%20of%20Computers%20and%20Code-Addison-Wesley%20Professional%20%282017%29.pdf) \nwidely used book for learning Python as a first programming language\n\n3. [Automate the boring stuff with Python by Al Sweigart](https:\/\/automatetheboringstuff.com\/) \ncontains a lot of scripts to make your boring task easier. <\/br>\n    You can also download the pdf version but I highly recommend reading the online version because its very frequently updated and also you can watch video for the concept if you think reading is too boring for you. \n\n4. [Python tutorials by Sentdex](https:\/\/pythonprogramming.net\/introduction-to-python-programming\/) \nthis website contains everything related to python from beginner to advance level. Follow him on youtube as well. \n\n5. [Real Python](https:\/\/realpython.com\/) \na curated list of (long) blog posts on various aspects of Python programming from language fundamentals to advanced concepts, with applications along the way.\n\n6. [Python - The No Theory Guide](https:\/\/github.com\/iArunava\/Python-TheNoTheoryGuide) \ncollection of Jupyter Notebooks that help you learn Python with hands-on Programming.\n\n**Note:** You don't have to read from all of them. Select 1-2 links that suits your learning style.\n\nAlso, try getting your hands dirty with [Hacker Rank](https:\/\/www.hackerrank.com\/domains\/python)\n\nAfter gaining enough confidence in python, next step in your data science journey would be to learn some important libraries like [numpy](https:\/\/numpy.org\/) & [pandas](https:\/\/pandas.pydata.org\/). Heres a [Quick start tutorial](https:\/\/docs.scipy.org\/doc\/numpy\/user\/quickstart.html) to get you started with numpy.\n\nIf you found this kernel\/notebook helpful, make sure you upvote & share it. Please comment for any suggestions. ","c80f8df9":"## Standard Data types\n\nIn python, variables are not bound to a specific data type; they still have a **type**, but type safety constraints are lower compared to strongly-typed languages. Some of the standard data types in python are int, float, booleans (True\/False) and strings. ","b0b0f3f0":"### Variables\n\nVariables can be thought as containers to store value(s). Python is a [loosely typed language](https:\/\/www.computerhope.com\/jargon\/l\/looslang.htm), so you don't have to initialize the variable, you can directly start using it.","bc7ce333":"The first line is a `def` statement, which defines a function named `addition()`. The code that follows the `def` statement is the **body of the function**. This code is executed when the function is called, not when the function is first defined. `addition(1,2)` is the function call. When the program execution reaches this call, it will jump to the top line in the function and begin executing the code there. When it reaches the end of the function, the execution returns to the line that called the function and continues moving through the code as before.","c18359cf":"### Dictionary\nLists are indexed with integer numbers. But what if we don\u2019t want to use integer numbers as indices? Some data structures that we can use are numeric, string, or other types of indices. Dictionary is a collection of key-value pairs. Here\u2019s what it looks like:\n\n~~~python\nd = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}\n~~~\n\nThe **key** is the index pointing to the **value**. How do we access the Dictionary value? You guessed it \u2014 using the **key**. Lets try it out: ","46ddc5c3":"To change value of a specific item, refer the item using index number and assign the new value. Pretty easy, right?","d433e43e":"### Slicing\nAccessing single items and updating single item is too limiting. There's a very powerful notion (called Slicing) to access multiple values in python. \n\nPython allows you to **slice a sequence**. You can specify where to start the slicing, and where to end. You can also specify the step, which allows you to e.g. slice only every other item.\n\n**Syntax:**\n\n`mylist[start, end, step]`\n\n| Parameter     | Description           |\n| ------------- |:-------------:|\n| *start*       | Optional. An integer number specifying at which position to start the slicing. **Default is 0** |\n| *end*         | An integer number specifying at which position to end the slicing. End index is **not included** |\n| *step*        | Optional. An integer number specifying the step of the slicing. **Default is 1** |\n\n\n\nLets have a look:","9bb5259d":"#### *if* statement","661ce7e6":"### Tuples\nTuples are same as list but are immutable (values cannot be updated).","c1cdda3d":"## Operators\n\nJust like every other programming language, python also has arithmetic operators and comparision operations. You can read about [python operators](https:\/\/www.w3schools.com\/python\/python_operators.asp), if you want. ","528b14ce":"How do you access the individual elements? List has a concept called **index**. Python is a **zero-indexed language**. So, the first element gets the index 0 (zero). The second gets 1, and so on. You get the idea. You access the list items by referring to the index number:","25df6fe8":"### Decision Making\n\n**Note:** Python relies on **indentation** (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.","c5faeb90":"### Strings\n\nAnything inside single quotation marks, or double quotation marks, is a string in python.\n\n`'Python'` & `\"Python\"` are both strings.","7012b6fd":"### Functions\nIn programming, whenever you find yourself copy pasting code or writing the same code again and again, then you are doing something wrong. As a programmer, you always tend to avoid rewriting the same code because it increases the chances of error and also makes it difficult to maintain the code. **Functions** help you to write reusable code.\n\nA function is like a mini-program within a program. Lets create one:","b0b6426d":"## Introduction to Python\n\nWhat is Python? According to its creator, **Guido van Rossum**, Python is a: \u201chigh-level programming language, and its core design philosophy is all about code readability and a syntax which allows programmers to express concepts in a few lines of code.\u201d\n\nPython is an amazing programming language to learn. Particularly for beginner's because of two reasons. First, its super **easy to learn** and second, its a **general-purpose** programming language, hence it can be used for a lot of different tasks like data science, web development, IoT and machine learning.  \n\nThere is a very famous myth, that python is not scalable. Trust me, its not true; instagram, spotify, netflix all use python in their backend. Its a slow language when compared with C\/C++\/Java, there's no denying to it, but the ease of use and small development time makes up for it. ","c524857e":"#### While loop\nKeep executing unitl the condition is not True.\nWhenever you are working with while loops, make sure you increment or decrement the condition variable so that the expression evaluates to `False` at some point.","282fa5f9":"### List","e6fd6b80":"**In dictionaries, if the key already exists, then assignment will update the existing value. But if the key is not found, assignment will add the key-value pair. It might look mysterious at first but a couple of days with python and it will all seem very obvious.**","a346f39c":"#### *elif* statement\nThe *elif* keyword is pythons way of saying \"if the previous conditions were not true, then try this condition\".","72f254a2":"## Collections (Arrays)\n\nCollection data types are used to store multiple values under one variable name. One important things about python collection data types is that they all are **heterogeneous** i.e. each element in the collection can be of different data type. This is not allowed in most other programming languages like C, C++ & Java. \n\nThere are four collection data types in the Python programming language:\n\n- **List** is a collection which is ordered and changeable. Allows duplicate members. Lists are written with **square brackets**, `[value1, value2, ...]`.\n- **Tuple** is a collection which is ordered and unchangeable. Allows duplicate members. Tuples are written with **round brackets**, `(value1, value2, ...)`.\n- **Set** is a collection which is unordered and unindexed. No duplicate members. Sets are written with **curly brackets**, `{value1, value2, ...}`.\n- **Dictionary** is a collection which is unordered, changeable and indexed. No duplicate members. Dictionaries are written with **curly brackets**, and they have **keys** and **values**, `{key1 : value1, key2 : value2, ...}`.\n\nAll these collections data types are equally important but you will end up using some data types more than others (depending on your use-case). Lets learn more about them:","4a374394":"### Loops\nLoops allow you to repeatedly execute a code block. There are two types of use-cases where you will need them.\n\n- Repeat for a certain number of times - for loop\n- Repeat until a certain condition is met - while loop"}}