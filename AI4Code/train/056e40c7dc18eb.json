{"cell_type":{"49a5988b":"code","8d776021":"code","47eef424":"code","15106c5a":"code","5a829483":"code","7c4d5d09":"code","682465ae":"code","e3278e5e":"code","2547832f":"code","f3d9b32f":"code","31645e38":"code","e2330e93":"code","27ea0904":"code","43350db3":"code","4dff1857":"code","8332e9f6":"code","d0423470":"code","de317436":"code","58bbb9e7":"code","bcd86026":"code","57f292dd":"code","1421bd89":"code","a363aa46":"code","7ea54176":"code","004034d1":"code","2e727e79":"code","628bde9d":"code","52f9b827":"markdown","e0a2b89f":"markdown","3e0acb55":"markdown","ae0e74a6":"markdown","4b272a26":"markdown","e18f7a90":"markdown","4fd553fc":"markdown","ffdebf79":"markdown","dffa7531":"markdown","a536f317":"markdown","75367681":"markdown","9bf1c2be":"markdown"},"source":{"49a5988b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d776021":"# importing all necessery modules for Word Cloud\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Modelling\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom wordcloud import WordCloud,STOPWORDS\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize,sent_tokenize\n\nimport re,string,unicodedata\nfrom keras.preprocessing import text, sequence\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom string import punctuation\nimport keras\nfrom keras.models import Sequential\nimport tensorflow as tf\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\nimport tensorflow as tf","47eef424":"test_df = pd.read_csv(\"\/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_test.csv\")\ntrain_df = pd.read_csv(\"\/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv\")","15106c5a":"train_df.head()","5a829483":"test_df.head()","7c4d5d09":"display(train_df.isnull().sum())\nprint(\"====\/\/\/====\")\ndisplay(train_df.duplicated().sum())\nprint(\"====\/\/\/====\")\ndisplay(train_df.info())","682465ae":"display(test_df.isnull().sum())\nprint(\"====\/\/\/====\")\ndisplay(test_df.duplicated().sum())\nprint(\"====\/\/\/====\")\ndisplay(test_df.info())","e3278e5e":"train_df.dropna(inplace=True)\ntest_df.dropna(inplace=True)\n\ntrain_df.drop_duplicates(inplace= True)\ntest_df.drop_duplicates(inplace=True)","2547832f":"import seaborn as sns","f3d9b32f":"train_df.head()","31645e38":"sns.set(rc={'figure.figsize':(11,5)})\nsns.countplot(train_df['Sentiment'])","e2330e93":"# Python program to generate WordCloud\n  ## Based on https:\/\/www.geeksforgeeks.org\/generating-word-cloud-python\/\n\ncomment_words = ''\nstopwords = set(STOPWORDS)\n  \n# iterate through the csv file\nfor val in train_df.OriginalTweet:\n      \n    # typecaste each val to string\n    val = str(val)\n  \n    # split the value\n    tokens = val.split()\n      \n    # Converts each token into lowercase\n    for i in range(len(tokens)):\n        tokens[i] = tokens[i].lower()\n      \n    comment_words += \" \".join(tokens)+\" \"\n  \nwordcloud = WordCloud(width = 800, height = 800,\n                background_color ='white',\n                stopwords = stopwords,\n                min_font_size = 10).generate(comment_words)\n  \n# plot the WordCloud image                       \nplt.figure(figsize = (8, 8), facecolor = None)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.tight_layout(pad = 0)\n  \nplt.show()","27ea0904":"# Ref: https:\/\/stackoverflow.com\/questions\/64719706\/cleaning-twitter-data-pandas-python\n# Ref: https:\/\/www.kaggle.com\/ragnisah\/text-data-cleaning-tweets-analysis\n# Ref: https:\/\/www.kaggle.com\/himanshutripathi\/covid-19-tweets-analysis-97-accuracy\n\nimport nltk\nimport re,string,unicodedata\n# load stop words\nstopword = nltk.corpus.stopwords.words('english')\ndef clean(text):\n\n    #     remove urls\n    text = re.sub(r'http\\S+', \" \", text)\n\n    #     remove mentions\n    text = re.sub(r'@\\w+',' ',text)\n\n    #     remove hastags\n    text = re.sub(r'#\\w+', ' ', text)\n\n    #     remove digits\n    text = re.sub(r'\\d+', ' ', text)\n\n    #     remove html tags\n    text = re.sub('r<.*?>',' ', text)\n    \n    #     remove stop words \n    text = text.split()\n    text = \" \".join([word for word in text if not word in stopword])\n    \n      \n    return text\n\ntrain_df['OriginalTweet'] = train_df['OriginalTweet'].apply(lambda x: clean(x))\ntest_df['OriginalTweet'] = test_df['OriginalTweet'].apply(lambda x: clean(x))","43350db3":"# Delete the data having length of Original Tweet <1\ntrain_df=train_df[~train_df['OriginalTweet'].str.len().lt(1)]\ntest_df=test_df[~test_df['OriginalTweet'].str.len().lt(1)]","4dff1857":"train_df['Sentiment'].unique()","8332e9f6":"#sentiment_mapping['Sentiment']=train_df['Sentiment'].factorize()[0]\nsentiment_changer = {\"Extremely Negative\":0, \"Negative\":1,\"Neutral\":2, \"Positive\":3,\"Extremely Positive\":4}\ntrain_df['Sentiment'] = train_df['Sentiment'].map(sentiment_changer)\ntest_df['Sentiment'] = test_df['Sentiment'].map(sentiment_changer)","d0423470":"train_df","de317436":"train_df.head()","58bbb9e7":"X = train_df['OriginalTweet'].copy()\ny = train_df['Sentiment'].copy()\n\n#X_test = train_df['OriginalTweet'].copy()\n#y_test = train_df['Sentiment'].copy()","bcd86026":"\nmax_len = np.max(X.apply(lambda x :len(x)))\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15,random_state = 0)\n\nvocab_length = len(tokenizer.word_index) + 1\n\nX_train = tokenizer.texts_to_sequences(X_train)\nX_test = tokenizer.texts_to_sequences(X_test)\n\nX_train = pad_sequences(X_train, maxlen=max_len, padding='post')\nX_test = pad_sequences(X_test, maxlen=max_len, padding='post')","57f292dd":"embedding_dim=16\nprint(\"Vocab length:\", vocab_length)\nprint(\"Max sequence length:\", max_len)","1421bd89":"import tensorflow as tf\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_length, embedding_dim, input_length=max_len),\n    tf.keras.layers.Bidirectional(tf.keras.layers.GRU(256, return_sequences=True)),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dropout(0.4),\n    tf.keras.layers.Dense(5, activation='softmax')\n])\n# opt = tf.keras.optimizers.Adam(learning_rate=0.01)\nmodel.compile(loss='categorical_crossentropy',optimizer=\"adam\",metrics=['accuracy'])","a363aa46":"\ntf.keras.utils.plot_model(model)","7ea54176":"num_epochs = 10\nfrom keras.utils import to_categorical\n\ny_train = to_categorical(y_train, 5)\ny_test = to_categorical(y_test, 5)\nhistory = model.fit(X_train, y_train, epochs=num_epochs,validation_data=(X_test, y_test))","004034d1":"print(X_train.shape, X_test.shape)\nprint(y_train.shape, y_test.shape)","2e727e79":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']","628bde9d":"epochs = range(len(acc))\n\nplt.plot(epochs, acc,'b',label='training acc')\nplt.plot(epochs, val_acc, 'r', label='validation acc')\nplt.legend()\nplt.show()\n\n\nplt.plot(epochs, loss,'b',label='training loss')\nplt.plot(epochs, val_loss, 'r', label='validation loss')\nplt.legend()\nplt.show()","52f9b827":"# Please Upvote if you like the work. Thank you \ud83d\ude0a","e0a2b89f":"> Many of null values of train_df are located in \"location\" column","3e0acb55":"<center>\n    <h1>   \n        ==#== TEXT CLASSIFICATION ON COVID-19 TWEETS ==#==\n    <\/h1>\n<\/center>\n \n<center><img src=\"https:\/\/www.marketplace.org\/wp-content\/uploads\/2020\/03\/GettyImages-1205872351-e1584559616344.jpg?w=600\" alt=\"COVID-19\" width=\"600\" ><\/center>\n\n<center> <h3> Please Upvote if you like the work \ud83d\ude0a <\/h3><\/center>\n\n<center>Don't hesitate to give your comment on this notebook. It gives me motivation to improve the analysis in the future<\/center>\n\n# Introduction\nThis program is used to classify tweets into 5 classifications: Extremely Negative, Negative, Neutral, Positive, and Extremely Positive. This code is useful for understanding the public's perception of a particular event. Some codes are inspired by [Himanshutripathi's Notebook](https:\/\/www.kaggle.com\/himanshutripathi\/covid-19-tweets-analysis-97-accuracy).\n\n# Contents\nContents:\n\n* [1. Load Packages](#1)\n* [2. Load Dataset](#2)\n* [3. Drop NaN and duplicates values](#3)\n* [4. Do Explanatory Data Analysis](#4)\n* [5. Mapping Sentiment](#5) \n* [6. Modelling](#6)","ae0e74a6":"<a id=\"7\"><\/a>\n    \n<font size=\"+2\" color=\"indigo\"><b>7. Conclusion<\/b><\/font><br>","4b272a26":"> It can be seen that the level of accuracy of the model to the training data increases with increasing epoch. However, it can also be seen that the accuracy rate of the validation data is in the range of 75%.","e18f7a90":"<a id=\"3\"><\/a>\n    \n<font size=\"+2\" color=\"indigo\"><b>3. Drop NaN and duplicates values<\/b><\/font><br>\n","4fd553fc":"> Also, the null value are located in \"location\" column for this dataset","ffdebf79":"<a id=\"5\"><\/a>\n    \n<font size=\"+2\" color=\"indigo\"><b>5. Mapping Sentiment<\/b><\/font><br>","dffa7531":"<a id=\"1\"><\/a>\n    \n<font size=\"+2\" color=\"indigo\"><b>1. Load Packages<\/b><\/font><br>","a536f317":"<a id=\"6\"><\/a>\n    \n<font size=\"+2\" color=\"indigo\"><b>6. Modelling<\/b><\/font><br>\n","75367681":"<a id=\"2\"><\/a>\n    \n<font size=\"+2\" color=\"indigo\"><b>2. Load Dataset<\/b><\/font><br>\n\n","9bf1c2be":"<a id=\"4\"><\/a>\n    \n<font size=\"+2\" color=\"indigo\"><b>4. Do Explanatory Data Analysis<\/b><\/font><br>\n\n"}}