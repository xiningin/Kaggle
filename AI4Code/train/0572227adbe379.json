{"cell_type":{"2763ec21":"code","3fa4c635":"code","44777c37":"code","89fb3182":"code","beabfd15":"code","16f747e2":"code","1aea46d9":"code","58da9c83":"code","7ad34ff0":"code","a0054014":"code","86884be3":"code","222557f1":"code","fe009e76":"code","8cdb4df4":"code","b9a24803":"code","7be14131":"code","88ff7954":"code","03777f93":"code","c2a4130b":"code","3fe3392f":"code","86e7ab3f":"code","4569e7a8":"code","d6d967bf":"code","500b05dc":"code","1de32267":"code","072a1016":"code","bf923611":"code","f7e62bb7":"code","c8a952b6":"code","01a59009":"code","7871b102":"code","82128c42":"code","2a40138b":"markdown","682e70c1":"markdown","5b5eb566":"markdown","d26fd9fd":"markdown","88d66bf7":"markdown","10bab57b":"markdown","e60c86fa":"markdown","f879a804":"markdown","78171997":"markdown","7582bf5b":"markdown","77d46b5d":"markdown","6f4f9e90":"markdown","8e3479d7":"markdown","7abcacc0":"markdown","8b4ec1e7":"markdown","38974389":"markdown","04dcbf7d":"markdown","4cf8f16c":"markdown","99dd8ec1":"markdown","8e77738a":"markdown","75dcec70":"markdown","8f45fc3d":"markdown","9ab4f73a":"markdown"},"source":{"2763ec21":"import pandas as pd\nimport numpy as np\nfrom IPython.display import HTML\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt","3fa4c635":"PATH_TRAIN      = '..\/input\/tabular-playground-series-dec-2021\/train.csv'\nPATH_TEST       = '..\/input\/tabular-playground-series-dec-2021\/test.csv'\nPATH_SUBMISSION = '..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv'","44777c37":"train_data = pd.read_csv(PATH_TRAIN)\ntest_data  = pd.read_csv(PATH_TEST)\nsubmission = pd.read_csv(PATH_SUBMISSION)","89fb3182":"def reduce_memory_usage(df):\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != 'object':\n            c_min = df[col].min()\n            c_max = df[col].max()\n            \n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    pass\n        else:\n            df[col] = df[col].astype('category')\n    \n    return df","beabfd15":"train_data = reduce_memory_usage(train_data)\ntest_data  = reduce_memory_usage(test_data)","16f747e2":"train_data = train_data.drop(['Id', 'Soil_Type7', 'Soil_Type15'], axis = 1)\ntest_data = test_data.drop(['Id', 'Soil_Type7', 'Soil_Type15'], axis = 1)","1aea46d9":"train_data.info()","58da9c83":"import gc\n\ngc.collect()","7ad34ff0":"!pip install scikit-learn-intelex -q --progress-bar off > \/dev\/null 2>&1","a0054014":"from sklearnex import patch_sklearn\npatch_sklearn()","86884be3":"import logging\n\nlogger = logging.getLogger()\nfh     = logging.FileHandler('log.txt')\n\nfh.setLevel(10)\nlogger.addHandler(fh)","222557f1":"X, y = train_data.drop(['Cover_Type'], axis = 1), train_data['Cover_Type']","fe009e76":"from sklearn.model_selection import train_test_split\nfrom timeit import default_timer as timer\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.1, random_state = 42)","8cdb4df4":"import eli5\nfrom eli5.sklearn import PermutationImportance\nfrom timeit import default_timer as timer\nfrom sklearn.ensemble import RandomForestClassifier","b9a24803":"timeFirstI  = timer()\nmodelRF     = RandomForestClassifier(random_state = 42).fit(X_train, y_train)\nperm        = PermutationImportance(modelRF, random_state = 42).fit(X_val, y_val)\ntimeSecondI = timer()","7be14131":"print(\"Total time with Intel Extension: {} seconds\".format(timeSecondI - timeFirstI))","88ff7954":"eli5.show_weights(perm, feature_names = X.columns.tolist())","03777f93":"pi_features = eli5.explain_weights_df(perm, feature_names = X_train.columns.tolist())\npi_features = pi_features.loc[pi_features['weight'] >= 0.0001]['feature'].tolist()","c2a4130b":"pi_features[:5]","3fe3392f":"X_trainPI = X_train.loc[:, pi_features]\nX_valPI   = X_val.loc[:, pi_features]","86e7ab3f":"X_trainPI[:5]","4569e7a8":"!cat log.txt | grep 'running accelerated version' | sort | uniq","d6d967bf":"from sklearnex import unpatch_sklearn\nunpatch_sklearn()","500b05dc":"import eli5\nfrom eli5.sklearn import PermutationImportance\nfrom timeit import default_timer as timer\nfrom sklearn.ensemble import RandomForestClassifier","1de32267":"timeFirstD  = timer()\nmodelRF     = RandomForestClassifier(random_state = 42).fit(X_train, y_train)\nperm        = PermutationImportance(modelRF, random_state = 42).fit(X_val, y_val)\ntimeSecondD = timer()","072a1016":"print(\"Total time with default Scikit-learn: {} seconds\".format(timeSecondD - timeFirstD))","bf923611":"eli5.show_weights(perm, feature_names = X.columns.tolist())","f7e62bb7":"eli5_speedup = round((timeSecondD - timeFirstD) \/ (timeSecondI - timeFirstI), 2)\nHTML(f'<h2>ELI5 speedup: {eli5_speedup}x<\/h2>'\n     f'(from {round((timeSecondD - timeFirstD), 2)} to {round((timeSecondI - timeFirstI), 2)} seconds)')","c8a952b6":"test_data = test_data.loc[:, pi_features]","01a59009":"from catboost import CatBoostClassifier\n\ncat_params = {\n    'iterations': 20000,\n    'depth': 7,\n    'task_type' : 'GPU',\n    'l2_leaf_reg': 5,\n    'eval_metric': 'Accuracy',\n}\n\ncat = CatBoostClassifier(**cat_params)\ncat.fit(X_trainPI, y_train, eval_set=(X_valPI, y_val))","7871b102":"predictions = cat.predict(test_data)\nsubmission['Cover_Type'] = predictions\npredictions[:5]","82128c42":"submission.to_csv(\"submission.csv\", index = False)","2a40138b":"For classical machine learning algorithms, we often use the most popular Python library, Scikit-learn. With Scikit-learn you can fit models and search for optimal parameters, but\u202fit\u202fsometimes works for hours. Speeding up this process is something anyone who uses Scikit-learn would be interested in.\n\nI want to show you how to use Scikit-learn library and get the results faster without changing the code. To do this, we will make use of another Python library,\u202f[**Intel\u00ae Extension for Scikit-learn***](https:\/\/github.com\/intel\/scikit-learn-intelex). It accelerates Scikit-learn and does not require you to change the code written for Scikit-learn.\n\nI will show you how to **speed up** your kernel without changing your code!","682e70c1":"One of the most basic questions we might ask of a model is: What features have the biggest impact on predictions?\n\nThis concept is called feature importance.\n\nThere are multiple ways to measure feature importance. In this kernel we consider permutation importance using library ELI5.","5b5eb566":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Feature importance<\/center><\/h1>\n<\/div>","d26fd9fd":"**Intel\u00ae Extension for Scikit-learn** gives you opportunities to:\n* Use your Scikit-learn code for training and inference without modification.\n* Get speed up your kernel","88d66bf7":"<center><a><img src=\"https:\/\/i.ibb.co\/PWvpT9F\/header.png\" alt=\"header\" border=\"0\" width=800 height=400 class=\"center\"><\/a>","10bab57b":"Setup logging to track accelerated cases:","e60c86fa":"### Accelerate Scikit-learn with two lines of code:","f879a804":"### Accelerated functions:","78171997":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Importing Libraries and Data<\/center><\/h1>\n<\/div>","7582bf5b":"### Default Scikit-learn","77d46b5d":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Other notebooks with sklearnex usage<\/center><\/h1>\n<\/div>","6f4f9e90":"*Please upvote if you liked it.*","8e3479d7":"### Import Libraries","7abcacc0":"Collect garbage to reduce memory usage","8b4ec1e7":"### Reduce DataFrame memory usage\n\nSince data is quite big for Kaggle notebook instance RAM, we need to reduce memory usage by switching data types.","38974389":"### [[predict sales] Stacking with scikit-learn-intelex](https:\/\/www.kaggle.com\/alexeykolobyanin\/predict-sales-stacking-with-scikit-learn-intelex)\n\n### [[TPS-Aug] NuSVR with Intel Extension for Sklearn](https:\/\/www.kaggle.com\/alexeykolobyanin\/tps-aug-nusvr-with-intel-extension-for-sklearn)\n\n### [Using scikit-learn-intelex for What's Cooking](https:\/\/www.kaggle.com\/kppetrov\/using-scikit-learn-intelex-for-what-s-cooking?scriptVersionId=58739642)\n\n### [Fast KNN using \u202fscikit-learn-intelex for MNIST](https:\/\/www.kaggle.com\/kppetrov\/fast-knn-using-scikit-learn-intelex-for-mnist?scriptVersionId=58738635)\n\n### [Fast SVC using scikit-learn-intelex for MNIST](https:\/\/www.kaggle.com\/kppetrov\/fast-svc-using-scikit-learn-intelex-for-mnist?scriptVersionId=58739300)\n\n### [Fast SVC using scikit-learn-intelex for NLP](https:\/\/www.kaggle.com\/kppetrov\/fast-svc-using-scikit-learn-intelex-for-nlp?scriptVersionId=58739339)\n\n### [Fast AutoML with Intel Extension for Scikit-learn](https:\/\/www.kaggle.com\/lordozvlad\/fast-automl-with-intel-extension-for-scikit-learn)\n\n### [[Titanic] AutoML with Intel Extension for Sklearn](https:\/\/www.kaggle.com\/lordozvlad\/titanic-automl-with-intel-extension-for-sklearn)","04dcbf7d":"### Intel\u00ae Extension for Scikit-learn installation:","4cf8f16c":"### ELI5","99dd8ec1":"### Reading Data","8e77738a":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Tabular Playground Series - Dec 2021\n<\/div>","75dcec70":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Conclusion<\/center><\/h1>\n<\/div>","8f45fc3d":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Catboost<\/center><\/h1>\n<\/div>","9ab4f73a":"ELI5 provides a way to compute feature importances for any black-box estimator by measuring how score decreases when a feature is not available."}}