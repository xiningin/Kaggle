{"cell_type":{"a23b879d":"code","ac163517":"code","e0cd3ace":"code","90ed1f2f":"code","6f0577ec":"code","3511adbd":"code","93c2b70d":"code","73fafce8":"code","e7b386a9":"code","e3f0951e":"code","be90924f":"code","685778e8":"code","ceaa413f":"markdown"},"source":{"a23b879d":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ac163517":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.utils import to_categorical\nfrom kerastuner.tuners import RandomSearch\nimport tensorflow as tf\nfrom keras.utils import plot_model\nimport keras.backend as K\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau","e0cd3ace":"train_features = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_features.csv\")\ntrain_targets_scored = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_scored.csv\")\ntrain_targets_unscored = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv\")\ntest_features = pd.read_csv(\"\/kaggle\/input\/lish-moa\/test_features.csv\")\n\nsample_submission = pd.read_csv(\"\/kaggle\/input\/lish-moa\/sample_submission.csv\")","90ed1f2f":"train_features.head()","6f0577ec":"train_features=pd.get_dummies(train_features,columns=['cp_type','cp_dose'])\ntest_features=pd.get_dummies(test_features,columns=['cp_type','cp_dose'])","3511adbd":"del train_features['sig_id']\ndel train_targets_scored['sig_id']\ndel test_features['sig_id']","93c2b70d":"def build_model():\n  K.clear_session()\n  model = tf.keras.Sequential()\n  model.add(tf.keras.layers.Input(shape=(train_features.shape[1],)))\n  model.add(tf.keras.layers.BatchNormalization())\n  model.add(tf.keras.layers.Dense(units=1024,activation='relu'))\n  model.add(tf.keras.layers.BatchNormalization())\n  model.add(tf.keras.layers.Dropout(0.5))\n  model.add(tf.keras.layers.Dense(units=2048,activation='relu'))\n  model.add(tf.keras.layers.BatchNormalization())\n  model.add(tf.keras.layers.Dropout(0.5))\n  model.add(tf.keras.layers.Dense(206, activation=\"sigmoid\"))\n  model.compile(optimizer='adam', loss='binary_crossentropy', metrics=[\"accuracy\",\"binary_crossentropy\"])\n  return model","73fafce8":"train_features","e7b386a9":"np.array(train_targets_scored)","e3f0951e":"pred = np.zeros((test_features.shape[0], 206))\n\nn_split = 5\nkfoldnumber= 0\nfor train_index, validation_index in KFold(n_split).split(train_features.values):\n    kfoldnumber += 1 \n    print('Fold number: ',kfoldnumber)\n    reduce_lr_loss = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=3, verbose=1, epsilon=1e-4, mode='min')\n    x_train,x_validation=train_features.values[train_index],train_features.values[validation_index]\n    y_train,y_validation=train_targets_scored.values[train_index],train_targets_scored.values[validation_index]\n    mod = build_model()\n    mod.fit(x_train,\n          y_train,\n    validation_data=(np.array(x_validation),np.array(y_validation)),\n    shuffle=True,\n    epochs=75,verbose=0,callbacks=[reduce_lr_loss])\n    #print('train: ',  mod.evaluate(x_train[train_index], y_train[train_index], verbose=0, batch_size=128))\n    #print('validation: ',  mod.evaluate(x_train[validation_index], y_train[validation_index], verbose=0, batch_size=128))\n    pred += mod.predict(test_features, batch_size=128, verbose=0) \/ n_split    ","be90924f":"sub = pd.DataFrame(data=pred, columns=train_targets_scored.columns)\nsub.insert(0, column = 'sig_id', value=sample_submission['sig_id'])\nsub.to_csv('submission.csv',index=False)","685778e8":"#subconcat= pd.concat([sub,test_features.cp_type_ctl_vehicle],axis=1)\n#for rows in range(len(subconcat)):\n#    if subconcat.cp_type_ctl_vehicle[rows] == 1:\n#        subconcat.iloc[rows] = 0\n        #\n#subconcat.insert(0, column = 'sig_id', value=sample_submission['sig_id'])\n#subconcat.to_csv('submission.csv',index=False)","ceaa413f":"## COMPILE SUBMISSION"}}