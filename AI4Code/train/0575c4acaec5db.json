{"cell_type":{"adfe9d8a":"code","79b5274b":"code","1224d896":"code","88d1b73f":"code","9f2b97e7":"code","7be4860f":"code","f2dde473":"code","a62cabbf":"code","dd5f7bc7":"code","73aefd39":"code","959bb825":"code","3188337c":"code","85d8fa42":"code","c50b4599":"code","9a74471b":"code","2e06249f":"code","f74c5153":"code","48deb7f4":"code","66e22e1f":"code","15e289bb":"code","8fa403f7":"code","69b1ac0c":"code","2d7e3716":"code","59bf84c1":"code","5b4a97f5":"code","31dc8ff4":"code","c5c8714d":"code","d137de67":"code","97b733c2":"code","e50c1a6a":"code","8cd6da85":"code","15329d6e":"code","48409ed1":"code","7071f01a":"code","63bcad99":"code","da445678":"code","c83c6e94":"code","fd214495":"code","25282d5c":"code","9ef81c36":"code","1402c30d":"code","0b8ca606":"code","8ea6c249":"code","5ba860bc":"code","0b0bc618":"code","6cda2f5d":"code","58960218":"code","c530d71d":"code","86dc5804":"code","276f62d9":"code","0c455840":"code","4a5cb03c":"code","616d28d9":"code","6dd4a78b":"code","6c728a46":"code","5ab9e8c3":"code","95c94731":"code","31f96556":"code","e23f646b":"code","cdcbf7c7":"code","4ea6ff7c":"code","c7c2c085":"code","497ae6a5":"code","ca24c091":"code","5c5f97d8":"code","2ae7dca1":"code","7997a697":"code","1fd493bd":"code","48860b92":"code","772eaa88":"code","34838003":"code","95dcf91d":"code","52fb00e8":"code","b1e10cd7":"code","7e6c76f4":"code","3f0e94ab":"code","0cfce138":"code","675a7b4e":"code","a615bfd9":"markdown","c443c63c":"markdown","85ebb383":"markdown","e42b95da":"markdown","4ab03122":"markdown","f9005880":"markdown","67863fa5":"markdown","8d06bf0e":"markdown","7956311f":"markdown"},"source":{"adfe9d8a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import xticks\nfrom scipy.stats import skew\nimport seaborn as sns\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","79b5274b":"data = pd.read_csv('..\/input\/shot_logs.csv')","1224d896":"data.head()","88d1b73f":"data.shape","9f2b97e7":"data.columns","7be4860f":"data.isnull().sum()","f2dde473":"# Shots type made percentage","a62cabbf":"sns.countplot(data.PTS_TYPE)","dd5f7bc7":"sns.countplot(x=\"PTS_TYPE\", hue =\"SHOT_RESULT\", data=data)","73aefd39":"shot_made = data[data.SHOT_RESULT == 'made'].groupby('PTS_TYPE')['SHOT_RESULT'].count()","959bb825":"total_shots = data.groupby('PTS_TYPE')['SHOT_RESULT'].count()","3188337c":"perc_shot = round(shot_made \/ total_shots,4) *100","85d8fa42":"perc_shot","c50b4599":"# Expected value\nprint(round(perc_shot.iloc[0]\/100 * 2,4))\nprint(round(perc_shot.iloc[1]\/100 * 3,4))","9a74471b":"# Shots repartition","2e06249f":"sns.set(rc={'figure.figsize':(12,10)})\nsns.distplot(data.SHOT_DIST)","f74c5153":"# Adding shots distance","48deb7f4":"# In the Paint : 8-\n# Mid Range 8-16\n# Long 2 : 16-24\n# 3 : 24+","66e22e1f":"sns.distplot(data.SHOT_DIST)\nplt.axvline(8, 0,1)\nplt.axvline(16, 0,1)\nplt.axvline(24, 0,1)\nplt.annotate('In the Paint', xy=(-1,0.08))\nplt.annotate('Mid Range', xy=(8.5,0.08))\nplt.annotate('Long 2', xy=(18,0.08))\nplt.annotate('3 points', xy=(25,0.08))","15e289bb":"# Clearly, the mid range shots are the less taken","8fa403f7":"# Sucess per distance\ndistance_made = data[data.SHOT_RESULT == 'made'].groupby('SHOT_DIST')['SHOT_RESULT'].count()\ndistance_total = data.groupby('SHOT_DIST')['SHOT_RESULT'].count()","69b1ac0c":"distance_acc = distance_made \/ distance_total","2d7e3716":"distance_acc = distance_acc.dropna()","59bf84c1":"distance_acc = distance_acc.reset_index()\ndistance_acc.columns = ['SHOT_DIST', 'SHOT_PERC']","5b4a97f5":"distance_acc.head()","31dc8ff4":"# We limit the shots to 30 ft, 9 m\ndistance_acc = distance_acc[distance_acc.SHOT_DIST <= 30]","c5c8714d":"sns.lineplot(x='SHOT_DIST', y=\"SHOT_PERC\", data=distance_acc)\nplt.axvline(8, 0,1)\nplt.axvline(16, 0,1)\nplt.axvline(24, 0,1)\nplt.annotate('In the Paint', xy=(1,0.08))\nplt.annotate('Mid Range', xy=(10,0.08))\nplt.annotate('Long 2', xy=(18,0.08))\nplt.annotate('3 points', xy=(25,0.08))\nplt.title('Shot percentage depending on distance')","d137de67":"# Let's check the proportions","97b733c2":"for i, row in data.iterrows():\n    if row['SHOT_DIST'] <= 8:\n        data.loc[i,'SHOT_TYPE'] = 'Paint'\n    elif ((row['SHOT_DIST'] > 8) & (row['SHOT_DIST'] <= 16)):\n        data.loc[i,'SHOT_TYPE'] = 'Mid_Range'\n    elif ((row['SHOT_DIST'] > 16) & (row['SHOT_DIST'] < 24)):\n        data.loc[i,'SHOT_TYPE'] = 'Long_2'\n    else:\n        data.loc[i,'SHOT_TYPE'] = '3_Points'","e50c1a6a":"shot_type_freq = round(data.groupby('SHOT_TYPE')['SHOT_TYPE'].count() \/ data.groupby('SHOT_TYPE')['SHOT_TYPE'].count().sum(),4)*100","8cd6da85":"shot_type_freq","15329d6e":"# And now the success rate\nshot_type_made = data[data.SHOT_RESULT == 'made'].groupby('SHOT_TYPE')['SHOT_RESULT'].count()\ntotal_shots_type = data.groupby('SHOT_TYPE')['SHOT_RESULT'].count()","48409ed1":"shot_type_eff = round(shot_type_made \/ total_shots_type,4) *100","7071f01a":"shot_type_eff","63bcad99":"# Conclusion for Shot Expected Value","da445678":"print(\"Paint : \", round(shot_type_eff['Paint']\/100 * 2,3))\nprint(\"Mid Range : \", round(shot_type_eff['Mid_Range']\/100 * 2,3))\nprint(\"Long 2 : \", round(shot_type_eff['Long_2']\/100 * 2,3))\nprint(\"3 Points : \", round(shot_type_eff['3_Points']\/100 * 3,3))","c83c6e94":"# Shots per period","fd214495":"data[['PERIOD', 'GAME_CLOCK', 'SHOT_CLOCK']]","25282d5c":"data['PERIOD_SECOND'] = [(i-1) * 12 * 60 if i > 1 else 0 for i in data.PERIOD]","9ef81c36":"# Convert to datetime\ndata[\"GAME_CLOCK_SECONDS\"] = pd.to_datetime(data[\"GAME_CLOCK\"], format=\"%M:%S\")","1402c30d":"# Convert clock to seconds : for seconds played, 12:00 - x, x as game clock and 12:00 as quarter time\ndata[\"GAME_CLOCK_SECONDS\"] = data[\"GAME_CLOCK_SECONDS\"].apply(lambda x: 12*60 - (x.minute * 60 + x.second))","0b8ca606":"# Convert clock to seconds\ndata['GAME_CLOCK_SECONDS'] = data['GAME_CLOCK_SECONDS'] + data['PERIOD_SECOND']","8ea6c249":"data[['PERIOD', 'GAME_CLOCK', 'SHOT_CLOCK', 'GAME_CLOCK_SECONDS']]","5ba860bc":"# Stop at the end of the fourth quarter\n# 4*12*60 = 2880\ndata_time = data[data.GAME_CLOCK_SECONDS <= 2880]","0b0bc618":"# 1 possession equals 24s\ndata['GAME_CLOCK_BINS'] = pd.cut(data['GAME_CLOCK_SECONDS'], bins=np.arange(0,60*48+1,24))","6cda2f5d":"# Sucess per distance\nshot_time = data[data.SHOT_RESULT == 'made'].groupby('GAME_CLOCK_BINS')['SHOT_RESULT'].count()\ntime_total = data.groupby('GAME_CLOCK_BINS')['SHOT_RESULT'].count()","58960218":"time_acc = shot_time \/ time_total\ntime_acc = time_acc.dropna()","c530d71d":"time_acc = time_acc.reset_index()\ntime_acc.columns = ['SHOT_TIME', 'SHOT_PERC']","86dc5804":"time_acc","276f62d9":"x = np.arange(0,60*48,24)","0c455840":"sns.lineplot(x=x, y=\"SHOT_PERC\", data=time_acc)\nplt.axvline(12*60-24, 0,1, linestyle='dashed', color='red') # -24 because of the arange gap\nplt.axvline(2*12*60-24, 0,1, linestyle='dashed' ,color='red')\nplt.axvline(3*12*60-24, 0,1, linestyle='dashed' ,color='red')\nplt.axvline(4*12*60-24, 0,1, linestyle='dashed' ,color='red')\nplt.title('Shot percentage during the match')","4a5cb03c":"# Sucess per distance\nshot_time_3 = data[(data.SHOT_RESULT == 'made') & (data.SHOT_TYPE == '3_Points')].groupby('GAME_CLOCK_BINS')['SHOT_RESULT'].count()\ntime_total_3 = data[data.SHOT_TYPE == '3_Points'].groupby('GAME_CLOCK_BINS')['SHOT_RESULT'].count()\n\nshot_time_2 = data[(data.SHOT_RESULT == 'made') & (data.SHOT_TYPE != '3_Points')].groupby('GAME_CLOCK_BINS')['SHOT_RESULT'].count()\ntime_total_2 = data[data.SHOT_TYPE != '3_Points'].groupby('GAME_CLOCK_BINS')['SHOT_RESULT'].count()","616d28d9":"time_acc_3 = shot_time_3 \/ time_total_3\ntime_acc_3 = time_acc_3.dropna()\n\ntime_acc_2 = shot_time_2 \/ time_total_2\ntime_acc_2 = time_acc_2.dropna()","6dd4a78b":"time_acc_3 = time_acc_3.reset_index()\ntime_acc_3.columns = ['SHOT_TIME', 'SHOT_PERC']\n\ntime_acc_2 = time_acc_2.reset_index()\ntime_acc_2.columns = ['SHOT_TIME', 'SHOT_PERC']","6c728a46":"f, (ax1, ax2) = plt.subplots(2)\nsns.lineplot(x=x, y=\"SHOT_PERC\", data=time_acc_2, ax=ax1)\nax1.axvline(12*60-24, 0,1, linestyle='dashed', color='red') # -24 because of the arange gap\nax1.axvline(2*12*60-24, 0,1, linestyle='dashed' ,color='red')\nax1.axvline(3*12*60-24, 0,1, linestyle='dashed' ,color='red')\nax1.axvline(4*12*60-24, 0,1, linestyle='dashed' ,color='red')\nax1.set_title('2 points percentage during the game')\n\nsns.lineplot(x=x, y=\"SHOT_PERC\", data=time_acc_3, ax=ax2)\nax2.axvline(12*60-24, 0,1, linestyle='dashed', color='red') # -24 because of the arange gap\nax2.axvline(2*12*60-24, 0,1, linestyle='dashed' ,color='red')\nax2.axvline(3*12*60-24, 0,1, linestyle='dashed' ,color='red')\nax2.axvline(4*12*60-24, 0,1, linestyle='dashed' ,color='red')\nax2.set_title('3 points percentage during the game')","5ab9e8c3":"# Sucess per distance\nshot_attempt_3 = data[data.SHOT_TYPE == '3_Points'].groupby('GAME_CLOCK_BINS')['SHOT_RESULT'].count()\nshot_attempt_2 = data[data.SHOT_TYPE != '3_Points'].groupby('GAME_CLOCK_BINS')['SHOT_RESULT'].count()","95c94731":"attempt_acc_3 = shot_attempt_3 \/ time_total\nattempt_acc_3 = attempt_acc_3.dropna()\n\nattempt_acc_2 = shot_attempt_2 \/ time_total\nattempt_acc_2 = attempt_acc_2.dropna()","31f96556":"attempt_acc_3 = attempt_acc_3.reset_index()\nattempt_acc_3.columns = ['SHOT_TIME', 'SHOT_PROP']\n\nattempt_acc_2 = attempt_acc_2.reset_index()\nattempt_acc_2.columns = ['SHOT_TIME', 'SHOT_PROP']","e23f646b":"f, (ax1, ax2) = plt.subplots(2)\nsns.lineplot(x=x, y=\"SHOT_PROP\", data=attempt_acc_2, ax=ax1)\nax1.axvline(12*60-24, 0,1, linestyle='dashed', color='red') # -24 because of the arange gap\nax1.axvline(2*12*60-24, 0,1, linestyle='dashed' ,color='red')\nax1.axvline(3*12*60-24, 0,1, linestyle='dashed' ,color='red')\nax1.axvline(4*12*60-24, 0,1, linestyle='dashed' ,color='red')\nax1.set_title('2 points attempts proportions during the game')\n\nsns.lineplot(x=x, y=\"SHOT_PROP\", data=attempt_acc_3, ax=ax2)\nax2.axvline(12*60-24, 0,1, linestyle='dashed', color='red') # -24 because of the arange gap\nax2.axvline(2*12*60-24, 0,1, linestyle='dashed' ,color='red')\nax2.axvline(3*12*60-24, 0,1, linestyle='dashed' ,color='red')\nax2.axvline(4*12*60-24, 0,1, linestyle='dashed' ,color='red')\nax2.set_title('3 points attempts proportions during the game')","cdcbf7c7":"# Is it because the 3 points are more valuable at the end of the game ?\n# For 2 points, we have 0.46 * 2  = 0.92 expected points\n# For 3 points, we have 0.21 * 3 = 0.63 expected points\n# We have to look at special cases : Last 2 minutes, point difference = 5 pts or less.","4ea6ff7c":"# Clutch Time","c7c2c085":"final_second = 12*4*60","497ae6a5":"data.head()","ca24c091":"clutch_time = data_time[(np.abs(data_time.FINAL_MARGIN) < 5) & (data_time.GAME_CLOCK_SECONDS >= (final_second - 120))]\n# Not very precise beacause we don't have the point difference at the shot moment","5c5f97d8":"clutch_time.head()","2ae7dca1":"len(clutch_time)","7997a697":"sns.set(rc={'figure.figsize':(8,6)})\nsns.countplot(x=\"PTS_TYPE\", hue =\"SHOT_RESULT\", data=clutch_time)","1fd493bd":"shot_made_clutch = clutch_time[clutch_time.SHOT_RESULT == 'made'].groupby('PTS_TYPE')['SHOT_RESULT'].count()\ntotal_shots_clutch = clutch_time.groupby('PTS_TYPE')['SHOT_RESULT'].count()\nperc_shot_clutch = round(shot_made_clutch \/ total_shots_clutch,4) *100","48860b92":"perc_shot_clutch","772eaa88":"# Expected points :\n# 2 points : 0.468 * 2 = 0.936\n# 3 points : 0.315 * 3 = 0.945\n# Interesting... It is better to shoot a three in clutch time \/ But not in the last minute though","34838003":"# Last observation : is home court a real advantage ? ","95dcf91d":"data[['GAME_ID', 'LOCATION', 'W']].groupby(['LOCATION', 'W']).count()","52fb00e8":"data_home = data[data.LOCATION == \"H\"]\ndata_away = data[data.LOCATION == \"A\"]","b1e10cd7":"data_home[['LOCATION', 'W']].groupby(['W']).count() \/ len(data_home)","7e6c76f4":"data_away[['LOCATION', 'W']].groupby(['W']).count() \/ len(data_away)","3f0e94ab":"shot_made_home = data_home[data_home.SHOT_RESULT == 'made'].groupby('PTS_TYPE')['SHOT_RESULT'].count()\ntotal_shots_home = data_home.groupby('PTS_TYPE')['SHOT_RESULT'].count()\nperc_shot_home = round(shot_made_home \/ total_shots_home,4) *100\nperc_shot_home","0cfce138":"shot_made_away = data_away[data_away.SHOT_RESULT == 'made'].groupby('PTS_TYPE')['SHOT_RESULT'].count()\ntotal_shots_away = data_away.groupby('PTS_TYPE')['SHOT_RESULT'].count()\nperc_shot_away = round(shot_made_away \/ total_shots_away,4) *100\nperc_shot_away","675a7b4e":"# Home expected points:\n# 2 points : 0.492 * 2 = 0.984\n# 3 points : 0.357 * 3 = 1.071\n\n# Away expected points:\n# 2 points : 0.485 * 2 = 0.97\n# 3 points : 0.346 * 3 = 1.038\n\n# This is not a big difference but there is still an home advantage","a615bfd9":"Best chance to score when you're close to the paint, logic","c443c63c":"There is a greater percentage decrease at 3 points than 2 points, it could be explain by the long shots attempts when the clock is almost finished, let's look at the shots repartition","85ebb383":"**Data Exploration**","e42b95da":"In conclusion, it is better to take shots in the Paint or at 3 points\nLong twos are the worst shots to make","4ab03122":"Still better to shoot threes, but it depends on the distance","f9005880":"Home teams have 55% chances of winning a game, home court is an advantage","67863fa5":"This shows that players attempt more 3 points at the end of the quarters (and less 2 points ), and this also increases during the game","8d06bf0e":"Accuracy decrease at the end of the quarters\nWhat about 2 points vs 3 points in the match","7956311f":"Do they shoot better ?"}}