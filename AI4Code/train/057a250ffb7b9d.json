{"cell_type":{"68a60521":"code","ca857ce6":"code","175a6148":"code","bce79bfd":"code","c69122c2":"code","1a15ff6e":"code","77815bd8":"code","4aaf2afe":"code","60f494ed":"code","286c6fa7":"code","8a0759ee":"code","c885f9ab":"code","f1bf652c":"code","65f4e318":"code","8e34d725":"code","b68c23fd":"code","31553b5c":"code","a4b0e8e5":"code","fdfda83b":"code","ef8d1703":"code","5da25129":"code","8b01b1af":"code","aca5a75e":"code","e2383830":"code","96959b02":"code","95a51074":"code","71394ee2":"code","2ec5cee5":"code","66cbc365":"code","16c140e7":"code","a4ddb250":"code","1f40ddd9":"markdown","189ec979":"markdown","596ed95b":"markdown"},"source":{"68a60521":"import numpy as np\nimport pandas as pd\n\nfrom sklearn import metrics\nfrom math import sqrt\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport time\nimport itertools\nimport warnings\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\n\nwarnings.filterwarnings(\"ignore\")","ca857ce6":"print(pd.__version__)","175a6148":"# generamos una lista de 110 a\u00f1os para nuestre serie temporal \na\u00f1os = np.arange(1821, 1931)\n\n# la cantidad de pieles de linces captadas cada a\u00f1o\nPieles = [\n269, 321, 585, 871, 1475, 2821, 3928, 5943, 4950, 2577,\n523, 98, 184, 279, 409, 2285, 2685, 3409, 1824, 409,\n151, 45, 68, 213, 546, 1033, 2129, 2536, 957, 361,\n377, 225, 360, 731, 1638, 2725, 2871, 2119, 684, 299,\n236, 245, 552, 1623, 3311, 6721, 4254, 687, 255, 473,\n358, 784, 1594, 1676, 2251, 1426, 756, 299, 201, 229,\n469, 736, 2042, 2811, 4431, 2511, 389, 73, 39, 49,\n59, 188, 377, 1292, 4031, 3495, 587, 105, 387, 758,\n1307, 3465, 6991, 6313, 3794, 1836, 345, 382, 808, 1388,\n2713, 3800, 3091, 2985, 790, 674, 81, 80, 108, 229,\n1132, 2432, 3574, 2935, 1537, 529, 485, 662, 1000, 1590\n]","bce79bfd":"data_dict = {\n    \"A\u00f1o\":a\u00f1os,\n    \"Pieles\":Pieles\n}","c69122c2":"df = pd.DataFrame(data_dict)\ndf[\"A\u00f1o\"] = pd.to_datetime(df[\"A\u00f1o\"], format = \"%Y\")\ndf.set_index(\"A\u00f1o\", inplace = True)\ndf.head()","1a15ff6e":"df.tail(7)","77815bd8":"df[\"Pieles\"].plot()","4aaf2afe":"df.info()","60f494ed":"df_short = df[[\"Pieles\"]]","286c6fa7":"df_short[\"Pieles_MA2\"] = df_short[\"Pieles\"].rolling(window = 3).mean()  # MUY IMPORTANTE\ndf_short.head()","8a0759ee":"(3928 + 2821)\/2","c885f9ab":"(5943 + 3928 + 2821)\/3","f1bf652c":"df[\"Pieles_lag1\"] = df[\"Pieles\"].shift(periods = 1) # MUY IMPORTANTE\ndf[\"Pieles_lag2\"] = df[\"Pieles\"].shift(periods = 2)\ndf[\"Pieles_lag3\"] = df[\"Pieles\"].shift(periods = 3)\n# df.dropna(axis = 0, inplace = True)\ndf.head(5)","65f4e318":"df.sort_index(inplace = True, ascending = True)\ndf[\"Pieles_mean\"] = df[\"Pieles\"].mean()\ndf[\"Pieles_mean_5_a\u00f1os\"] = df[\"Pieles\"].rolling(window = 5).mean() # MUY IMPORTANTE\ndf[\"Error_1\"] = df[\"Pieles_mean\"] - df[\"Pieles_lag1\"]\ndf[\"Error_2\"] = df[\"Pieles_mean\"] - df[\"Pieles_lag2\"]\ndf[\"Error_3\"] = df[\"Pieles_mean\"] - df[\"Pieles_lag3\"]\ndf.head()","8e34d725":"(1475 + 871 + 585 + 321 + 269)\/5","b68c23fd":"LAGS = 24\n\nfig = plt.figure(figsize = (20, 15))\n(ax1, ax2), (ax3, ax4), (ax5, ax6) = fig.subplots(3, 2)\n\nplot_acf(df[\"Pieles\"], lags = LAGS, ax = ax1, title = \"Autocorrelation me dice el valor de la Ma --> q\")\nplot_pacf(df[\"Pieles\"], lags = LAGS, ax = ax2, title = \"Partial Autocorrelation me dice el valor de la AR --> p\");","31553b5c":"import scipy","a4b0e8e5":"scipy.stats.pearsonr(x = df[\"Pieles\"], y = df[\"Pieles\"])","fdfda83b":"df.dropna(axis = 0, inplace = True)","ef8d1703":"scipy.stats.pearsonr(x = df[\"Pieles\"], y = df[\"Pieles_lag1\"])","5da25129":"scipy.stats.pearsonr(x = df[\"Pieles\"], y = df[\"Pieles_lag2\"])","8b01b1af":"alumnos = [\"David\", \"Nestor\", \"Pere\", \"Ricardo\", \"\"]\n\nnp.random.choice(alumnos)","aca5a75e":"p = np.arange(3)\ni = [0]\nq = np.arange(4)\n\nparams_dict_aic = {}\n\nparams = list(itertools.product(p, i, q))\n\nfor param in params:\n    print(f\"Working with {param}\")\n    \n    model = sm.tsa.statespace.SARIMAX(\n        df[\"Pieles\"],\n        order = param,\n        seasonal_order = (0, 0, 0, 0),\n        enforce_stationarity = False,\n        enforce_invertibility = False\n    )\n    \n    results = model.fit()\n    params_dict_aic[param] = results.aic","e2383830":"params_dict_aic","96959b02":"best_params = (2, 0, 3)\nbest_model = sm.tsa.statespace.SARIMAX(\n        df[\"Pieles\"],\n        order = best_params,\n        seasonal_order = (0, 0, 0, 0),\n        enforce_stationarity = False,\n        enforce_invertibility = False\n    )\n\nresults = best_model.fit()\n\nresults.plot_diagnostics(figsize = (15, 12), lags = 3);","95a51074":"df[\"Pieles_log\"] = df[\"Pieles\"].apply(np.log)\ndf[\"Pieles_log_diff\"] = df[\"Pieles_log\"].diff()\n\nprint(7.944847 - 7.296413)","71394ee2":"df.head()","2ec5cee5":"fig = plt.figure(figsize = (10, 10))\nax1, ax2, ax3 = fig.subplots(3, 1)\n\nax1.plot(df[\"Pieles\"])\nax2.plot(df[\"Pieles_log\"])\nax3.plot(df[\"Pieles_log_diff\"])","66cbc365":"df.dropna(axis = 0, inplace = True)\nLAGS = 24\n\nfig = plt.figure(figsize = (20, 15))\n(ax1, ax2), (ax3, ax4), (ax5, ax6) = fig.subplots(3, 2)\n\nplot_acf(df[\"Pieles\"], lags = LAGS, ax = ax1, title = \"Autocorrelation me dice el valor de la Ma --> q\")\nplot_pacf(df[\"Pieles\"], lags = LAGS, ax = ax2, title = \"Partial Autocorrelation me dice el valor de la AR --> p\")\n\nplot_acf(df[\"Pieles_log\"], lags = LAGS, ax = ax3, title = \"Autocorrelation me dice el valor de la Ma --> q\")\nplot_pacf(df[\"Pieles_log\"], lags = LAGS, ax = ax4, title = \"Partial Autocorrelation me dice el valor de la AR --> p\")\n\nplot_acf(df[\"Pieles_log_diff\"], lags = LAGS, ax = ax5, title = \"Autocorrelation me dice el valor de la Ma --> q\")\nplot_pacf(df[\"Pieles_log_diff\"], lags = LAGS, ax = ax6, title = \"Partial Autocorrelation me dice el valor de la AR --> p\");","16c140e7":"best_params = (2, 1, 3)\nbest_model = sm.tsa.statespace.SARIMAX(\n        df[\"Pieles_log\"],\n        order = best_params,\n        seasonal_order = (0, 0, 0, 0),\n        enforce_stationarity = False,\n        enforce_invertibility = False\n    )\n\nresults = best_model.fit()\n\nresults.plot_diagnostics(figsize = (15, 12), lags = 3);","a4ddb250":"results.aic","1f40ddd9":"AR p\n\nI  1\n\nMA q\n\nARIMA(pdq)\n\nSARIMAX()\nS -> SEASONAL(PDQ)","189ec979":"Autoregresiva\n\nViernes--Jueves--Miercoles\n\nViernes-->Jueves    (correlacionados)\nViernes-->Miercoles (correlacionados)\n\nMiercoles afecta Viernes 2 maneras:\n1. Directa: Viernes-->Miercoles\n2. Indirecta: Miercoles --> Jueves --> Viernes","596ed95b":"p = 2\nq = 3\n\nARMA(p = 1, q = 1)\n\nARMA(p = 1, q = 2)\n\nARMA(p = 1, q = 3)\n\nARMA(p = 2, q = 1)\n\n..."}}