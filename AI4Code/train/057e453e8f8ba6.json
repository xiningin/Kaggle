{"cell_type":{"63810c66":"code","4312129b":"code","a66380f3":"code","0e541c74":"code","b96b06ce":"code","22fc0e1a":"code","ff325960":"code","34f2cab1":"code","4be6215d":"code","ed18b9ff":"code","c32b03df":"code","87c6ccfc":"code","767fd5e3":"code","c239e701":"code","2bf67510":"code","52872162":"code","773b73ef":"code","9e4ef104":"code","cd4b53c3":"code","49da4a83":"markdown","a551a41f":"markdown","aaf6fd9a":"markdown","8fb10905":"markdown","0b6610d0":"markdown","08c17c49":"markdown","5bfb05b8":"markdown"},"source":{"63810c66":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nimport time\nimport datetime\nfrom matplotlib import dates\nimport plotly.graph_objects as go\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# ML libraries\nfrom xgboost import XGBRegressor\nimport lightgbm as lgb\nfrom xgboost import plot_importance, plot_tree\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn import linear_model\nimport scipy.integrate as integrate\nfrom scipy.optimize import minimize\nfrom sklearn.metrics import mean_squared_log_error, mean_squared_error\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4312129b":"train = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/train.csv\", parse_dates=['Date'])\ntest = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-3\/test.csv\", parse_dates=['Date'])\ndisplay(train.tail())\ndisplay(test.tail())\ndisplay(train.describe())\nprint(\"Number of Country_Region: \", train['Country_Region'].nunique())\nprint(\"Dates go from day\", max(train['Date']), \"to day\", min(train['Date']), \", a total of\", train['Date'].nunique(), \"days\")\nprint(\"Countries with Province\/State informed: \", train[train['Province_State'].isna()==False]['Country_Region'].unique())","a66380f3":"train.rename(columns={'Country_Region':'Country'}, inplace=True)\ntest.rename(columns={'Country_Region':'Country'}, inplace=True)\ntrain.rename(columns={'Province_State':'State'}, inplace=True)\ntest.rename(columns={'Province_State':'State'}, inplace=True)","0e541c74":"#change to more sophisticated graphs(animations and black graphs) for global stats and option to view each country's visualisation through dash or animation, trend of infection rates from first(or 100th) confirmed case, proportion of population affected\n\n#confirmed_country = train.groupby(['Country\/Region', 'Province\/State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country = train.groupby(['Country\/Region', 'Province\/State']).agg({'Fatalities':['sum']})\nconfirmed_total_date = train.groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date = train.groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date = confirmed_total_date.join(fatalities_total_date)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\ntotal_date.plot(ax=ax1)\nax1.set_title(\"Global confirmed cases\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nfatalities_total_date.plot(ax=ax2, color='orange')\nax2.set_title(\"Global deceased cases\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","b96b06ce":"## Preparing India specific dataset along with true confirmed cases\nindia = train[train['Country']==\"India\"]\nindia.index = india['Date']\n\n#creating extra columns for graphical purposes\nindia['log_confirmed'] = np.log(india['ConfirmedCases'])\nindia['log_confirmed'] = india['log_confirmed'].replace([np.inf, -np.inf], 0)\nindia['CC_LAG'] = india['ConfirmedCases'].shift(periods=1).fillna(0)\nindia['Fatalities_LAG'] = india['Fatalities'].shift(periods=1).fillna(0)\nindia['new_deaths'] = india['Fatalities'] - india['Fatalities_LAG']\nindia['new_deaths'] = india['new_deaths'].clip(lower=0)\nindia['log_new_cases'] = np.log(india['ConfirmedCases'] - india['CC_LAG'])\nindia['log_new_cases'] = india['log_new_cases'].replace([np.inf, -np.inf], 0)\ndisplay(india)\n\n#adding true cases column\ndef actual(t_inc, t_inf, death_rate):      #function to create df with true cases data\n    first = india[india['Fatalities'] > 0]['Date'].iloc[0]\n    last = india['Date'].iloc[len(india)-1]\n    period = t_inc + t_inf\n    DD = datetime.timedelta(days=period)\n    true_dict = {}\n    while first <= last:\n        deaths = india[india['Date']==first]['new_deaths'].iloc[0]\n        true_cases = deaths\/death_rate\n        earlier = first - DD\n        true_dict[earlier] = true_cases\n        first += datetime.timedelta(days=1)\n    df = pd.DataFrame.from_dict(true_dict, orient='index', columns=['True cases'])\n    df = df.cumsum(axis = 0)    \n    return df\n    \ndf_true = actual(5, 15, 0.01)    #new df with only true cases data\ndf_true.plot()","22fc0e1a":"# visualisations for India\n\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize=(17,7))\n\nindia['ConfirmedCases'].plot(ax=ax1)\nax1.set_title(\"Total confirmed cases vs time\", size=13)\nax1.set_ylabel(\"Total cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\n\nindia['log_confirmed'].plot(ax=ax2, color='orange')\nax2.set_title(\"Log total vs time\", size=13)\nax2.set_ylabel(\"Log total cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)\n\nindia['log_new_cases'].plot(ax=ax3, color='green')\nax3.set_title(\"Log new cases vs time\", size=13)\nax3.set_ylabel(\"Log new cases\", size=13)\nax3.set_xlabel(\"Date\", size=13)\n\nindia.index = india['log_confirmed']\nindia['log_new_cases'].plot(ax=ax4, color='red')\nax4.set_title(\"Log new cases vs Log total cases\", size=13)\nax4.set_ylabel(\"Log new cases\", size=13)\nax4.set_xlabel(\"Log total cases\", size=13)\n\n\n\n","ff325960":"#population dataset\npop = pd.read_csv(\"\/kaggle\/input\/population-by-country-2020\/population_by_country_2020.csv\")\npop.head()","34f2cab1":"## Defining the ODEs\n\n# Susceptible equation\ndef Susceptible(S, I, R_t, T_inf):\n    beta = (R_t \/ T_inf)\n    dS_dt = -beta * I * S\n    return dS_dt\n\n# Exposed equation\ndef Exposed(S, E, I, R_t, T_inf, T_inc):\n    beta = (R_t \/ T_inf)\n    gamma = (T_inc**-1)\n    dE_dt = beta*S*I - gamma*E\n    return dE_dt\n\n# Infected equation\ndef Infected(I, E, T_inc, T_inf):\n    gamma = (T_inc**-1)\n    delta = (T_inf**-1)\n    dI_dt = gamma*E - delta*I\n    return dI_dt\n\n# Recovered\/Remove\/deceased equation\ndef Removed(I, T_inf):\n    delta = (T_inf**-1)\n    dR_dt = delta*I\n    return dR_dt\n\ndef SEIR(t, y, R_t, T_inf, T_inc):\n    \n    if callable(R_t):\n        reproduction = R_t(t)\n    else:\n        reproduction = R_t\n        \n    S, E, I, R = y\n    \n    dS_dt = Susceptible(S, I, reproduction, T_inf)\n    dE_dt = Exposed(S, E, I, reproduction, T_inf, T_inc)\n    dI_dt = Infected(I, E, T_inc, T_inf)\n    dR_dt = Removed(I, T_inf)\n    \n    return([dS_dt, dE_dt, dI_dt, dR_dt])","4be6215d":"def eval_model(param, data, population, inf, inc, return_solution=False, forecast_days=0):\n    R_0 = param\n    N = population   #total population\n    n_infected = data['True cases'].iloc[0]  #number of individuals infected at the beginning of the outbreak\n    max_days = len(data) + forecast_days      #number of days to predict for  \n    s, e, i, r = (N - n_infected)\/ N, 0, n_infected \/ N, 0     #initial conditions for SEIR model\n\n    def time_varying_reproduction(t):    #functional form for R_0\n        if t <= 30:         #pre-lockdown period\n            return R_0\n        else:\n            return R_0*0.3     #reproduction number reduces after enforcing lockdown\n\n    #solving the SEIR differential equation.\n    sol = integrate.solve_ivp(SEIR, [0, max_days], [s, e, i, r], args=(time_varying_reproduction, inf, inc),\n                    t_eval=np.arange(0, max_days))\n    sus, exp, inf, rec = sol.y\n    \n    y_pred_cases = np.clip((inf + rec) * N , 0, np.inf)      #predicting actual cases\n    y_true_cases = data['True cases'].values\n    \n    optim_days = min(25, len(data))      #number of days to optimise for\n    weights = 1 \/ np.arange(1, optim_days + 1)[::-1]       #giving higher weightage to recent data\n    \n    #using mean square log error to evaluate\n    msle = mean_squared_log_error(y_true_cases[-optim_days:], y_pred_cases[-optim_days:], weights)\n    \n    if return_solution:\n        return msle, sol\n    else:\n        return msle","ed18b9ff":"def fit_model(data, country, inf, inc):\n    \n    #population of the country\n    N = pop[pop['Country (or dependency)']==country]['Population (2020)'].iloc[0]    #total population\n        \n    ####### Fit the real data by minimize the MSLE #######\n    res = minimize(eval_model, np.array([2.5]), bounds=((1, 20),), args=(data, N, inf, inc, False), method='L-BFGS-B')\n    print(res)\n    print(res.x)\n    \n    msle, sol = eval_model(res.x, data, N, inf, inc, True, 300)\n    sus, exp, inf, rec = sol.y\n    \n    print(msle)\n    print(sol.y)    \n    \n    # Plotting result\n    f = plt.figure(figsize=(16,5))\n    ax1 = f.add_subplot(1,2,1)\n    ax1.plot(sus, 'b', label='S(t)');\n    ax1.plot(exp, 'y', label='E(t)');\n    ax1.plot(inf, 'r', label='I(t)');\n    ax1.plot(rec, 'c', label='R(t)');\n    plt.title(\"SEIR model\")\n    plt.xlabel(\"Days\", fontsize=10);\n    plt.ylabel(\"Fraction of population\", fontsize=10);\n    plt.legend(loc='best');\n\n    ax2 = f.add_subplot(1,2,2)\n    preds = np.clip((inf + rec) * N ,0, np.inf)\n    ax2.plot(range(len(data)),preds[:len(data)],label = 'Predictions')\n    ax2.plot(range(len(data)),data['True cases'])\n    plt.title('Predictions vs Actual')\n    plt.ylabel(\"Population\", fontsize=10);\n    plt.xlabel(\"Days\", fontsize=10);\n    plt.legend(loc='best');","c32b03df":"#plotting results after parameter fitting\n\ncountry = \"India\"\nT_inf = 10\nT_inc = 5\n\nfit_model(df_true, country, T_inf, T_inc)","87c6ccfc":"##################################### TEST CODE ##################################","767fd5e3":"# Initial population conditions\ncountry = \"India\"\nN = pop[pop['Country (or dependency)']==country]['Population (2020)'].iloc[0]    #total population\nn_infected = df_true['True cases'].iloc[0]  #number of individuals infected at the beginning of the outbreak\n\n# Initial conditions for state variables in proportion terms\nS0 = (N - n_infected)\/N\nE0 = 0.0\nI0 = n_infected\/N\nR0 = 0.0\n\n# Constant values and functional forms for parameters\nT_inc = 5.2    # average incubation period\nT_inf = 2.9    # average infectious period\nR_0, k, L=[ 2.95469597 ,3.1, 15.32328881]    #initial conditions for parameters of decaying R_t\n\ndef time_varying_reproduction(t):    #functional form for R_0\n    if t <= 30:         #pre-lockdown period\n        return R_0\n    else:\n        return R_0*0.5     #reproduction number halves after enforcing lockdown\n\n# Time vector\n#t = [0, 100] ","c239e701":"# Result\nsolution = integrate.solve_ivp(SEIR, [0, 300], [S0, E0, I0, R0], args=(time_varying_reproduction, T_inf, T_inc), t_eval=np.arange(300))\nsus, exp, inf, rec = solution.y","2bf67510":"# Plotting result\nf = plt.figure(figsize=(16,5))\nax1 = f.add_subplot(1,2,1)\nax1.plot(sus, 'b', label='S(t)');\nax1.plot(exp, 'y', label='E(t)');\nax1.plot(inf, 'r', label='I(t)');\nax1.plot(rec, 'c', label='R(t)');\nplt.title(\"SEIR model\")\nplt.xlabel(\"Days\", fontsize=10);\nplt.ylabel(\"Fraction of population\", fontsize=10);\nplt.legend(loc='best');\n    \nax2 = f.add_subplot(1,2,2)\npreds = np.clip((inf + rec) * N ,0, np.inf)\nax2.plot(range(len(df_true)),preds[:len(df_true)],label = 'Predictions')\nax2.plot(range(len(df_true)),df_true['True cases'])\nplt.title('Predictions vs Actual')\nplt.ylabel(\"Population\", fontsize=10);\nplt.xlabel(\"Days\", fontsize=10);\nplt.legend(loc='best');","52872162":"#missing values\n\nEMPTY_VAL = \"EMPTY_VAL\"\n\ndef fillState(state, country):\n    if state == EMPTY_VAL: return country\n    return state\n\nX_Train = train.copy()\n\nX_Train['State'].fillna(EMPTY_VAL, inplace=True)\nX_Train['State'] = X_Train.loc[:, ['State', 'Country']].apply(lambda x : fillState(x['State'], x['Country']), axis=1)\n\nX_Train.loc[:, 'Date'] = X_Train.Date.dt.strftime(\"%m%d\")\nX_Train[\"Date\"]  = X_Train[\"Date\"].astype(int)\n\ndisplay(X_Train.head())\n\nX_Test = test.copy()\n\nX_Test['State'].fillna(EMPTY_VAL, inplace=True)\nX_Test['State'] = X_Test.loc[:, ['State', 'Country']].apply(lambda x : fillState(x['State'], x['Country']), axis=1)\n\nX_Test.loc[:, 'Date'] = X_Test.Date.dt.strftime(\"%m%d\")\nX_Test[\"Date\"]  = X_Test[\"Date\"].astype(int)\n\ndisplay(X_Test.head())","773b73ef":"le = preprocessing.LabelEncoder()\n\ncountries = X_Train.Country.unique()\ndf_out = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})\ndf_out2 = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})\n\nfor country in countries:\n    states = X_Train.loc[X_Train.Country == country, :].State.unique()\n    for state in states:\n        X_Train_CS = X_Train.loc[(X_Train.Country == country) & (X_Train.State == state), ['State', 'Country', 'Date', 'ConfirmedCases', 'Fatalities']]\n        \n        y1_Train_CS = X_Train_CS.loc[:, 'ConfirmedCases']\n        y2_Train_CS = X_Train_CS.loc[:, 'Fatalities']\n        \n        X_Train_CS = X_Train_CS.loc[:, ['State', 'Country', 'Date']]\n        \n        X_Train_CS.Country = le.fit_transform(X_Train_CS.Country)\n        X_Train_CS['State'] = le.fit_transform(X_Train_CS['State'])\n        \n        X_Test_CS = X_Test.loc[(X_Test.Country == country) & (X_Test.State == state), ['State', 'Country', 'Date', 'ForecastId']]\n        \n        X_Test_CS_Id = X_Test_CS.loc[:, 'ForecastId']\n        X_Test_CS = X_Test_CS.loc[:, ['State', 'Country', 'Date']]\n        \n        X_Test_CS.Country = le.fit_transform(X_Test_CS.Country)\n        X_Test_CS['State'] = le.fit_transform(X_Test_CS['State'])\n        \n        # XGBoost\n        model1 = XGBRegressor(n_estimators=2000)\n        model1.fit(X_Train_CS, y1_Train_CS)\n        y1_pred = model1.predict(X_Test_CS)\n        \n        model2 = XGBRegressor(n_estimators=2000)\n        model2.fit(X_Train_CS, y2_Train_CS)\n        y2_pred = model2.predict(X_Test_CS)\n        \n        # LightGBM\n        model3 = lgb.LGBMRegressor(n_estimators=2000)\n        model3.fit(X_Train_CS, y1_Train_CS)\n        y3_pred = model3.predict(X_Test_CS)\n        \n        model4 = lgb.LGBMRegressor(n_estimators=2000)\n        model4.fit(X_Train_CS, y2_Train_CS)\n        y4_pred = model4.predict(X_Test_CS)\n        \n        df = pd.DataFrame({'ForecastId': X_Test_CS_Id, 'ConfirmedCases': y1_pred, 'Fatalities': y2_pred})\n        df2 = pd.DataFrame({'ForecastId': X_Test_CS_Id, 'ConfirmedCases': y3_pred, 'Fatalities': y4_pred})\n        df_out = pd.concat([df_out, df], axis=0)\n        df_out2 = pd.concat([df_out2, df2], axis=0)\n    # Done for state loop\n# Done for country Loop\n\ndf_out.ForecastId = df_out.ForecastId.astype('int')\ndf_out2.ForecastId = df_out2.ForecastId.astype('int')\n\ndf_out['ConfirmedCases'] = (1\/2)*(df_out['ConfirmedCases'] + df_out2['ConfirmedCases'])\ndf_out['Fatalities'] = (1\/2)*(df_out['Fatalities'] + df_out2['Fatalities'])\n\ndf_out['ConfirmedCases'] = df_out['ConfirmedCases'].round().astype(int)\ndf_out['Fatalities'] = df_out['Fatalities'].round().astype(int)\n\ndisplay(df_out)","9e4ef104":"#visualizing predictions\n\npred = df_out.iloc[4644:4687,-2]\ndates_list_num = list(range(0,43))\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,6))\n\nax1.plot(dates_list_num, pred)","cd4b53c3":"df_out.to_csv('submission.csv', index=False)","49da4a83":"# 3. Modeling","a551a41f":"## 1.1. Exploring the covid19 dataset for preliminary findings","aaf6fd9a":"## 3.2. XGBoost + LightGBM","8fb10905":"# 2. Supplementary data","0b6610d0":"## 3.1. SEIR Model","08c17c49":"## 1.2. Visualizations","5bfb05b8":"#  1. Exploratory Data Analysis (EDA)"}}