{"cell_type":{"477c148c":"code","ef0318cd":"code","a639f8a2":"code","b03ef4d8":"code","08984049":"code","bc75a0b5":"code","3619a168":"code","0fa6040c":"code","8da9b8d9":"code","cd1d9c11":"code","709ca51c":"code","dce18d33":"code","937bdce6":"code","4012983c":"code","cddab6fb":"code","6521c93f":"code","c1c00377":"code","099849b9":"code","798448c5":"code","e4b87388":"code","2f5d4763":"code","3598f422":"code","8cd54ac3":"code","130222d9":"code","7ab34b1b":"code","a7194a0d":"code","0ffdfb20":"code","54e0392c":"code","54dcecbb":"code","0ea7572f":"code","b0f18c6f":"code","09e0f42d":"code","8f4bf102":"code","d325c0ba":"code","0ca73f89":"code","b695e8e8":"code","20ffbbb2":"code","784a42ca":"code","1c0f9d5f":"markdown","c85bb4db":"markdown","cc7309d9":"markdown","ff6d4d06":"markdown","270c769c":"markdown","88bb1fea":"markdown","c028452f":"markdown","306a8042":"markdown","09dcaefb":"markdown","6e7e8860":"markdown","1c866b72":"markdown","ab4a2e05":"markdown","534b8af4":"markdown","7e87b359":"markdown","bafb967e":"markdown","194376b4":"markdown","d45262df":"markdown","93584605":"markdown","801b6434":"markdown","a46f85aa":"markdown","f9aa3e51":"markdown","7274dded":"markdown","82d7b6b4":"markdown","9d175b27":"markdown"},"source":{"477c148c":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom scipy.stats import ttest_ind, ttest_1samp\nimport gc\n\nSMOOTHING = 3","ef0318cd":"def clean_data(df):\n    if \"Unnamed: 0\" in df.columns:\n        df.drop(\"Unnamed: 0\", axis=1, inplace=True)\n        \n    for col in df.columns:\n        df[col] = df[col].astype(str).str.rstrip('%').str.replace(',', '')\n        try:\n            df[col] = df[col].astype(float)\n        except:\n            pass\n        \n    df.set_index(df.columns[0], inplace=True)\n    \n    return df\n\nexample_map_df = clean_data(pd.read_csv(\"https:\/\/raw.githubusercontent.com\/IronicNinja\/valorant-stats\/master\/map_data\/maps_competitive_tier%3D3.csv\"))\nexample_map_df","a639f8a2":"general_ranks_list = [\"Iron\", \"Bronze\", \"Silver\", \"Gold\", \"Platinum\", \"Diamond\"]\nranks_list = np.array([f\"{rank} {num}\" for rank in general_ranks_list for num in range(1, 4)])\nnum_ranks = len(ranks_list)\nprint(f\"Ranks: {ranks_list}, length: {num_ranks}\")","b03ef4d8":"playrate_map_list = []\natkwin_map_list = []\nmatches_list = []\nfor i in range(3, 3 + num_ranks):\n    tmp_map_df = clean_data(pd.read_csv(f\"https:\/\/raw.githubusercontent.com\/IronicNinja\/valorant-stats\/master\/map_data\/maps_competitive_tier%3D{i}.csv\"))    \n    playrate_map_list.append(tmp_map_df['Play Rate'])\n    atkwin_map_list.append(tmp_map_df['Atk Win'])\n    matches_list.append(tmp_map_df['Num Matches'].sum())\n\nplayrate_df = pd.DataFrame(playrate_map_list, index=ranks_list)\natkwin_df = pd.DataFrame(atkwin_map_list, index=ranks_list)\n\ncustom_map_df = clean_data(pd.read_csv(\"https:\/\/raw.githubusercontent.com\/IronicNinja\/valorant-stats\/master\/map_data\/maps_custom_tier%3D0.csv\"))\nunrated_map_df = clean_data(pd.read_csv(\"https:\/\/raw.githubusercontent.com\/IronicNinja\/valorant-stats\/master\/map_data\/maps_unrated_tier%3D0.csv\"))\nspikerush_map_df = clean_data(pd.read_csv(\"https:\/\/raw.githubusercontent.com\/IronicNinja\/valorant-stats\/master\/map_data\/maps_spikerush_tier%3D0.csv\"))","08984049":"avg_playrate_df = playrate_df.mean()\navg_playrate_df","bc75a0b5":"def quick_stats(df, name):\n    std = np.std(df.values)\n    confidence = (1.96*std)\n    mean = df.mean().round(3)\n    low = (mean-confidence).round(3)\n    high = (mean+confidence).round(3)\n    print(f\"95% Confidence Interval for {name}: {mean} +- {confidence.round(3)}; ({low}, {high})\")","3619a168":"quick_stats(avg_playrate_df, \"Competitive\")","0fa6040c":"fig = px.line(playrate_df)\nfig.update_layout(\n    title={'text': f\"Map Play Rate Without Smoothing\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 16}},\n    xaxis_title=\"\", yaxis_title=\"Play Rate\"\n)\nfig.show()","8da9b8d9":"def smoother(df, smoothing=SMOOTHING):\n    indexer = pd.api.indexers.FixedForwardWindowIndexer(window_size=smoothing)\n    smoothed_df = (df.rolling(window=indexer).sum() + df.rolling(window=smoothing).sum() - df)\/(2*smoothing-1)\n    smoothed_df.fillna(df, inplace=True)\n    return smoothed_df\n\nsmoothed_playrate_df = smoother(playrate_df)\nsmoothed_playrate_df","cd1d9c11":"fig = px.line(smoothed_playrate_df)\nfig.update_layout(\n    title={'text': f\"Map Play Rate With Smoothing = {SMOOTHING}\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 16}},\n    xaxis_title=\"\", yaxis_title=\"Play Rate\"\n)\nfig.show()","709ca51c":"def create_other_df(index):\n    other_df = pd.DataFrame(custom_map_df[index].sort_values(ascending=False))\n    other_df.columns = [\"Custom\"]\n    other_df['Unrated'] = unrated_map_df[index]\n    other_df['Spike Rush'] = spikerush_map_df[index]\n    return other_df\n    \nother_playrate_df = create_other_df('Play Rate')","dce18d33":"fig = px.bar(other_playrate_df, barmode=\"group\", labels={\"variable\": \"Mode\"})\nfig.update_layout(\n    title={'text': f\"Map Play Rate for Other Modes\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 16}},\n    xaxis_title=\"\", yaxis_title=\"Play Rate\"\n)\nfig.show()","937bdce6":"quick_stats(avg_playrate_df, \"Competitive\")\nquick_stats(unrated_map_df['Play Rate'], \"Unrated\")\nquick_stats(spikerush_map_df['Play Rate'], \"Spike Rush\")\nquick_stats(custom_map_df['Play Rate'], \"Custom\")","4012983c":"avg_atkwin_df = atkwin_df.mean()\navg_atkwin_df","cddab6fb":"fig = px.line(atkwin_df)\nfig.add_shape(type='line',\n                x0=0,\n                y0=50,\n                x1=num_ranks-1,\n                y1=50,\n                line=dict(color='Black', dash='dashdot'),\n                xref='x',\n                yref='y'\n)\nfig.update_layout(\n    title={'text': f\"Map Attack Win Rate Without Smoothing\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 16}},\n    xaxis_title=\"\", yaxis_title=\"Attack Win Rate\"\n)\nfig.show()","6521c93f":"smoothed_atkwin_df = smoother(atkwin_df)\nfig = px.line(smoothed_atkwin_df)\nfig.add_shape(type='line',\n                x0=0,\n                y0=50,\n                x1=num_ranks-1,\n                y1=50,\n                line=dict(color='Black', dash='dashdot'),\n                xref='x',\n                yref='y'\n)\nfig.update_layout(\n    title={'text': f\"Attack Win Rate With Smoothing\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 16}},\n    xaxis_title=\"\", yaxis_title=\"Attack Win Rate\"\n)\nfig.show()","c1c00377":"other_atkwin_df = create_other_df('Atk Win')\nfig = px.bar(other_atkwin_df, barmode=\"group\", labels={\"variable\": \"Mode\"})\nfig.update_layout(\n    title={'text': f\"Map Play Rate for Other Modes\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 16}},\n    yaxis_title=\"Play Rate\"\n)\nfig.show()","099849b9":"quick_stats(avg_atkwin_df, \"Competitive\")\nquick_stats(unrated_map_df['Atk Win'], \"Unrated\")\nquick_stats(spikerush_map_df['Atk Win'], \"Spike Rush\")\nquick_stats(custom_map_df['Atk Win'], \"Custom\")","798448c5":"matches_df = pd.DataFrame(matches_list, index=ranks_list, columns=[\"Matches\"])\nfig = px.line(matches_df)\nfig.update_layout(\n    title={'text': f\"Number of Matches\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 16}},\n    xaxis_title=\"\", yaxis_title=\"Matches\", showlegend=False\n)\nfig.show()","e4b87388":"matches_df['cum_matches'] = matches_df.cumsum()\ntotal_matches = matches_df['Matches'].sum()\nfig = px.line(matches_df['cum_matches']\/total_matches)\nfig.add_shape(type='line',\n                x0=0,\n                y0=0.5,\n                x1=num_ranks-1,\n                y1=0.5,\n                line=dict(color='Black', dash='dashdot'),\n                xref='x',\n                yref='y'\n)\nfig.update_layout(\n    title={'text': f\"Cumulative Number of Matches\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 16}},\n    xaxis_title=\"\", yaxis_title=\"Cumulative Proportion\", showlegend=False\n)\nfig.show()","2f5d4763":"matches_df['perc'] = matches_df['Matches']\/total_matches*100\nfig = px.bar(matches_df['perc'])\nfig.update_layout(\n    title={'text': f\"Percentage of Matches at Each Rank\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 16}},\n    xaxis_title=\"\", yaxis_title=\"Percentage\", showlegend=False\n)\nfig.show()","3598f422":"comp_match_num = sum(matches_list)\ncustom_match_num = custom_map_df['Num Matches'].sum()\nunrated_match_num = unrated_map_df['Num Matches'].sum()\nspikerush_match_num = spikerush_map_df['Num Matches'].sum()\nall_matches_df = pd.DataFrame([comp_match_num, custom_match_num, unrated_match_num, spikerush_match_num], \n            index=['Competitive', 'Custom', 'Unrated', 'Spike Rush'], columns=['Matches']).sort_values('Matches', ascending=False)\n\nfig = px.bar(all_matches_df)\nfig.update_layout(\n    title={'text': f\"Number of Matches for Each Mode\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 16}},\n    xaxis_title=\"\", yaxis_title=\"Matches\", showlegend=False\n)\nfig.show()","8cd54ac3":"example_agents_df = clean_data(pd.read_csv(f\"https:\/\/raw.githubusercontent.com\/IronicNinja\/valorant-stats\/master\/agents_data\/all\/agents_competitive_tier%3D3.csv\"))\nexample_agents_df","130222d9":"def avg_visualization(df, name, name2 = \"Agents\"):\n    tmp_df = pd.DataFrame(df.mean(), columns=[name]).sort_values(name, ascending=False).round(3)\n    fig = px.bar(tmp_df, y=name, color=name, color_continuous_scale=\"Viridis\")\n    fig.update_layout(\n        title={'text': f\"Average {name} of {name2}\", 'x': 0.5,\n                             'xanchor': 'center', 'font': {'size': 16}},\n        xaxis_title=\"\", yaxis_title=f\"{name}\", showlegend=False\n    )\n    fig.show()","7ab34b1b":"agents_ranks_list = ranks_list[:-1] # no Diamond 3\n\ndef visualization(df, name, name2 = \"Agents\", ranksList = agents_ranks_list, smoothing=True):\n    if smoothing:\n        df = smoother(df)\n    \n    c = 0\n    buttons_list = []\n    base_list = [False for i in range(len(ranksList))]\n    for i in df.index:\n        tmp_list = base_list.copy()\n        tmp_list[c] = True\n        buttons_list.append(dict(\n            args=[{\"visible\": tmp_list}],\n            label=i,\n            method=\"update\"\n        ))\n        c += 1\n    \n    c = 0\n    fig = go.Figure()\n    for i in df.index:\n        tmp_df = pd.DataFrame(df.loc[i]).sort_values(i, ascending=False)\n        fig.add_trace(go.Bar(x=tmp_df.index, y=tmp_df[i], name=i, \n                             visible=False if c != 0 else True,\n                             marker=dict(\n                                color=tmp_df[i],\n                                colorbar=dict(\n                                    title=f\"{name}\"\n                                ),\n                                colorscale=\"Viridis\"\n                        )))\n        c += 1\n\n    fig.update_layout(\n        updatemenus=[\n            dict(\n                buttons=buttons_list,\n                direction=\"down\",\n                pad={\"r\": 10, \"t\": 10},\n                showactive=True,\n                x=0.1,\n                xanchor=\"left\",\n                y=1.1,\n                yanchor=\"top\"\n            ),\n        ]\n    )\n\n    smoothingString = \"\" if smoothing else \"out\"\n    smoothingValueString = f\" = {SMOOTHING}\" if smoothing else \"\"\n    fig.update_layout(\n        title={'text': f\"{name} of {name2} by Rank With{smoothingString} Smoothing{smoothingValueString}\", 'x': 0.5,\n                             'xanchor': 'center', 'font': {'size': 16}},\n        yaxis_title=f\"{name}\", showlegend=False\n    )\n    fig.show()","a7194a0d":"def all_agents_visualization(df, name):\n    avg_visualization(df, name)\n    visualization(df, name, smoothing=False)\n    visualization(df, name)","0ffdfb20":"KD_list = []\nwinrate_list = []\nagent_pickrate_list = []\nacs_list = []\nfirstblood_list = []\nfor i in range(3, 3 + len(agents_ranks_list)):\n    tmp_agents_df = clean_data(pd.read_csv(f\"https:\/\/raw.githubusercontent.com\/IronicNinja\/valorant-stats\/master\/agents_data\/all\/agents_competitive_tier%3D{i}.csv\"))    \n    KD_list.append(tmp_agents_df['KD'])\n    winrate_list.append(tmp_agents_df['Win Rate'])\n    agent_pickrate_list.append(tmp_agents_df['Pick Rate'])\n    acs_list.append(tmp_agents_df['ACS'])\n    firstblood_list.append(tmp_agents_df['First Blood'])\n    \nkd_df = pd.DataFrame(KD_list, index=agents_ranks_list)\nwinrate_df = pd.DataFrame(winrate_list, index=agents_ranks_list)\nagent_pickrate_df = pd.DataFrame(agent_pickrate_list, index=agents_ranks_list)\nacs_df = pd.DataFrame(acs_list, index=agents_ranks_list)\nfirstblood_df = pd.DataFrame(firstblood_list, index=agents_ranks_list)","54e0392c":"all_agents_visualization(kd_df, \"KD\")","54dcecbb":"all_agents_visualization(winrate_df, \"Win Rate\")","0ea7572f":"all_agents_visualization(agent_pickrate_df, \"Agent Pick Rate\")","b0f18c6f":"all_agents_visualization(acs_df, \"ACS\")","09e0f42d":"all_agents_visualization(firstblood_df, \"First Blood Rate\")","8f4bf102":"weapons_kills_list = []\nheadshot_list = []\nbodyshot_list = []\nlegshot_list = []\nweapons_damage_list = []\nfor i in range(3, 3 + len(ranks_list)):\n    tmp_weapons_df = clean_data(pd.read_csv(f\"https:\/\/raw.githubusercontent.com\/IronicNinja\/valorant-stats\/master\/weapons_data\/all\/agents_competitive_tier%3D{i}.csv\"))    \n    weapons_kills_list.append(tmp_weapons_df['Kills Per Match'])\n    headshot_list.append(tmp_weapons_df['Headshot'])\n    bodyshot_list.append(tmp_weapons_df['Bodyshot'])\n    legshot_list.append(tmp_weapons_df['Legshot'])\n    weapons_damage_list.append(tmp_weapons_df['Damage Per Round'])\n    \nweapons_kills_df = pd.DataFrame(weapons_kills_list, index=ranks_list)\nheadshot_df = pd.DataFrame(headshot_list, index=ranks_list)\nbodyshot_df = pd.DataFrame(bodyshot_list, index=ranks_list)\nlegshot_df = pd.DataFrame(legshot_list, index=ranks_list)\nweapons_damage_df = pd.DataFrame(weapons_damage_list, index=ranks_list)","d325c0ba":"def all_weapons_visualization(df, name):\n    avg_visualization(df, name, \"Weapons\")\n    visualization(df, name, \"Weapons\", ranks_list, smoothing=False)\n    visualization(df, name, \"Weapons\", ranks_list)","0ca73f89":"all_weapons_visualization(weapons_kills_df, \"Kills Per Match\")","b695e8e8":"all_weapons_visualization(headshot_df, \"Headshot\")","20ffbbb2":"all_weapons_visualization(weapons_damage_df, \"Damage Per Round\")","784a42ca":"fig = go.Figure()\nfig.add_trace(go.Scatter(name='Vandal', x=headshot_df.index, y=headshot_df['Vandal']))\nfig.add_trace(go.Scatter(name='Phantom', x=headshot_df.index, y=headshot_df['Phantom']))\nfig.update_layout(\n    title={'text': f\"Headshot Percentage with Rifles by Rank\", 'x': 0.5,\n                         'xanchor': 'center', 'font': {'size': 16}},\n    yaxis_title=f\"Headshot Percentage\"\n)","1c0f9d5f":"<h2> Damage Per Round <\/h2>\n\nAverage damage a weapon deals for each round.","c85bb4db":"<h2> Import Data <\/h2>","cc7309d9":"<h2> KD <\/h2>\n\nKills to death ratio of agents.","ff6d4d06":"Thanks for reading this far! Please leave an upvote and comment if you liked these visualizations :)","270c769c":"# Weapons\n\n* Kills Per Match\n* Headshot Percentage\n* Average Damage Per Round","88bb1fea":"Further work: map-based analysis (agents, weapons) & abilities-based analysis.","c028452f":"<h3> Quick General Stats <\/h3>","306a8042":"# Maps\n\n* Play Rate\n* Attack Win Rate","09dcaefb":"<h2> Play Rate <\/h2>\n\nPerhaps there's a certain bias towards which maps are played... or maybe certain maps aren't played because of queue dodging...","6e7e8860":"<h2> Kills Per Match <\/h2>\n\nAverage kills a weapon gets per match.","1c866b72":"<h1> Valorant Statistics \/ Visualizations Project <\/h1>\n\nRiot Games presents VALORANT: a 5v5 character-based tactical FPS where precise gunplay meets unique agent abilities. With over 14 million active monthly users, Valorant is one of the most popular (and free!) games out right now. In this project, I pull data from <a href=\"https:\/\/blitz.gg\/\">blitz.gg<\/a> to create meaningful visualizations.\n\n<h2> How can I use this data? <\/h2>\n\nAll of the data for this project can be found in <a href=\"https:\/\/github.com\/IronicNinja\/valorant-stats\">my github repository for this project<\/a>. This is so I can automatically update the data every X amount of days (currently, I will update the data every week). Please leave a star if you do decide to use the data from my repo, I'd really appreciate it :)\n\n<h2> Table of Contents <\/h2>\n<ol style=\"font-size: 16px\">\n    <li><a href=\"https:\/\/www.kaggle.com\/ironicninja\/valorant-stats-project#Maps\">Maps<\/a><\/li>\n    <ul>\n        <li>Play Rate<\/li>\n        <li>Attack Win Rate<\/li>\n    <\/ul>\n    <li><a href=\"https:\/\/www.kaggle.com\/ironicninja\/valorant-stats-project#Number-of-Matches-for-Each-Rank\">Number of Matches for Each Rank<\/a><\/li>\n    <li><a href=\"https:\/\/www.kaggle.com\/ironicninja\/valorant-stats-project#Agents\">Agents<\/a><\/li>\n    <ul>\n        <li>KD<\/li>\n        <li>Win Rate<\/li>\n        <li>Pick Rate<\/li>\n        <li>Average Combat Score (ACS)<\/li>\n        <li>First Blood Rate<\/li>\n    <\/ul>\n    <li><a href=\"https:\/\/www.kaggle.com\/ironicninja\/valorant-stats-project#Weapons\">Weapons<\/a><\/li>\n     <ul>\n        <li>Kills Per Match<\/li>\n        <li>Headshot Percentage<\/li>\n        <li>Average Damage Per Round<\/li>\n    <\/ul>\n<\/ol>","ab4a2e05":"<h1> Essential Imports + Setup <\/h1>","534b8af4":"<h3> With Smoothing <\/h3>\n\nSmoothing is defined in the following example:\n\nTake an array as ```arr = [a1, a2, a3, a4, a5, a6, a7]``` and apply smoothing of 2. Then, ```a1``` and ```a7``` are untouched in the new array, with ```a2``` now being ```(a1 + a2 + a3) \/ 3```, ```a3 = (a2 + a3 + a4) \/ 3```, and so forth.\n\nIn valorant terms, with the default smoothing factor set to 3, then Silver 1 would now be replaced with the average from Bronze 2 to Silver 3, inclusive. This should make more for a more accurate judgment of true play rate at a rank.","7e87b359":"<h2> ACS <\/h2>\n\nAverage combat score is probably the most representative of the impact a player has since it takes into account damage, impact of kills, and assists.","bafb967e":"<h2> Attack Win Rate <\/h2>\n\nCertain maps may be T or CT-sided.","194376b4":"<h2> Headshot Percentage with Rifles by Rank <\/h2>","d45262df":"# Number of Matches for Each Rank\n\nWhich rank has the most matches \/ people playing?","93584605":"<h2> Agent Pick Rate <\/h2>\n\nWhich agents are picked the most?","801b6434":"<h2> Headshot Percentage <\/h2>\n\nHeadshot percentage given a certain weapon.","a46f85aa":"<h3> Without Smoothing <\/h3>\n\nBelow is a line plot of the exact playrates for each map given a player's rank.","f9aa3e51":"# Agents\n\n* KD\n* Win Rate\n* Pick Rate\n* Average Combat Score (ACS)\n* First Blood Rate","7274dded":"<h2> Win Rate <\/h2>\n\nWhich agent tends to win the most?","82d7b6b4":"<h3> Non-Competitive Play <\/h3>\n\nIncludes modes such as Customs, Unrated, and Spike Rush.","9d175b27":"<h2> First Blood Rate <\/h2>\n\nWhich agents typically get the entry frag?"}}