{"cell_type":{"22380829":"code","085cda6a":"code","2855c8d5":"code","524e4148":"code","74757314":"code","acd21ced":"code","30816192":"code","0498e881":"code","f0210c5c":"code","7ba010b2":"code","f08ddf10":"code","79b046fc":"code","0dfe24e1":"code","72f0fc5f":"code","a193f9d7":"code","3b842008":"code","f431cfad":"code","d2341ee9":"markdown","5efdd609":"markdown","50b9df3f":"markdown","517e5c1f":"markdown","3a72df01":"markdown","d86876b4":"markdown"},"source":{"22380829":"def configure_plotly_browser_state():\n  import IPython\n  display(IPython.core.display.HTML('''\n        <script src=\"\/static\/components\/requirejs\/require.js\"><\/script>\n        <script>\n          requirejs.config({\n            paths: {\n              base: '\/static\/base',\n              plotly: 'https:\/\/cdn.plot.ly\/plotly-latest.min.js?noext',\n            },\n          });\n        <\/script>\n        '''))","085cda6a":"import matplotlib.pyplot as plt\nfrom networkx import nx\nfrom plotly.offline import download_plotlyjs, init_notebook_mode,  iplot, plot\ninit_notebook_mode(connected=True)\n\nn = 50  # 50 nodes\np = 0.2  # probability of edge between nodes\n\nG = nx.erdos_renyi_graph(n,p) # sample graph","2855c8d5":"nx.draw(G)\nplt.show()","524e4148":"G.edges()","74757314":"G.nodes()","acd21ced":"import networkx as nx\nimport matplotlib.pyplot as plt\n%matplotlib inline","30816192":"G_fb = nx.read_edgelist(\"..\/input\/facebook_combined.txt\", create_using = nx.Graph(), nodetype = int)","0498e881":"#Quick snapshot of the Network\nprint (nx.info(G_fb))","f0210c5c":"#Create network layout for visualizations\nspring_pos = nx.spring_layout(G_fb)","7ba010b2":"plt.axis(\"off\") # using normal networkx\nnx.draw_networkx(G_fb, pos = spring_pos, with_labels = False, node_size = 35)","f08ddf10":"pos = nx.spring_layout(G_fb)\nbetCent = nx.betweenness_centrality(G_fb, normalized=True, endpoints=True)\nnode_color = [20000.0 * G_fb.degree(v) for v in G_fb]\nnode_size =  [v * 10000 for v in betCent.values()]\nplt.figure(figsize=(20,20))\nnx.draw_networkx(G_fb, pos=pos, with_labels=False,\n                 node_color=node_color,\n                 node_size=node_size )\nplt.axis('off')","79b046fc":"import plotly\ndef with_plotly(G,title):\n  \n  labels=list(G.nodes()) # labels are the node names\n  pos=nx.fruchterman_reingold_layout(G)  \n   \n  Xn=[pos[k][0] for k in range(len(pos))]\n  Yn=[pos[k][1] for k in range(len(pos))]\n  \n  trace_nodes=dict(type='scatter',x=Xn,y=Yn,mode='markers',marker=dict(size=28, color='rgb(0,240,0)'),text=labels,hoverinfo='text')\n \n  Xe=[]\n  Ye=[]\n  for e in G.edges():\n      Xe.extend([pos[e[0]][0], pos[e[1]][0], None])\n      Ye.extend([pos[e[0]][1], pos[e[1]][1], None])\n  \n  trace_edges=dict(type='scatter',mode='lines',x=Xe,y=Ye,line=dict(width=1, color='rgb(25,25,25)'),hoverinfo='none')\n  \n  axis=dict(showline=False,zeroline=False,showgrid=False,showticklabels=False,title='')\n  layout=dict(title= title,font= dict(family='Balto'),autosize=True,showlegend=False,xaxis=axis,yaxis=axis,margin=dict(l=40,r=40,b=85,t=100,pad=0,),hovermode='closest',plot_bgcolor='#efecea')\n\n  fig = dict(data=[trace_edges, trace_nodes], layout=layout)\n  plotly.offline.iplot(fig)  ","0dfe24e1":"configure_plotly_browser_state()\ntitle='FB Graph'\nwith_plotly(G_fb,title)","72f0fc5f":"# Define get_nodes_and_nbrs()\ndef get_nodes_and_nbrs(G, nodes_of_interest):\n    \"\"\"\n    Returns a subgraph of the graph `G` with only the `nodes_of_interest` and their neighbors.\n    \"\"\"\n    nodes_to_draw = []\n\n    # Iterate over the nodes of interest\n    for n in nodes_of_interest:\n\n        # Append the nodes of interest to nodes_to_draw\n        nodes_to_draw.append(n)\n\n        # Iterate over all the neighbors of node n\n        for nbr in G.neighbors(n):\n\n            # Append the neighbors of n to nodes_to_draw\n            nodes_to_draw.append(nbr)\n\n    return G.subgraph(nodes_to_draw)\n\n# Extract the subgraph with the nodes of interest: T_draw\nnodes_of_interest = [2,5]  # can be changed\nG_draw = get_nodes_and_nbrs(G_fb, nodes_of_interest)\n\n# Draw the subgraph to the screen\nnx.draw(G_draw,with_labels=True)\nplt.show()","a193f9d7":"labels=list(G_draw.nodes()) # labels are the node names\npos=nx.spring_layout(G_draw)  \nXn=[pos[k][0] for k in pos]\nYn=[pos[k][1] for k in pos]\n\ntrace_nodes=dict(type='scatter',x=Xn,y=Yn,mode='markers',marker=dict(size=28,color=[],colorbar=dict(thickness=15,title='Node Connections',\n                 xanchor='left', titleside='right')),text=[],hoverinfo='text')\n\nXe=[]\nYe=[]\nfor e in G_draw.edges():\n    Xe.extend([pos[e[0]][0], pos[e[1]][0], None])\n    Ye.extend([pos[e[0]][1], pos[e[1]][1], None])\n\ntrace_edges=dict(type='scatter',mode='lines',x=Xe,y=Ye,line=dict(width=1),hoverinfo='none')\n\naxis=dict(showline=False,zeroline=False,showgrid=False,showticklabels=False,title='')\nlayout=dict(title= 'FB Subgraph',font= dict(family='Balto'),autosize=True,showlegend=False,xaxis=axis,yaxis=axis,margin=dict(l=40,r=40,b=85,t=100,pad=0,),hovermode='closest',plot_bgcolor='#efecea')\ni=0\nfor node, adjacencies in enumerate(G_draw.adjacency()):\n    trace_nodes['marker']['color']+=tuple([len(adjacencies[1])])\n    node_info = 'Node:'+str(labels[i])+'\\n | # of connections: '+str(len(adjacencies[1]))\n    trace_nodes['text']+=tuple([node_info])\n    i+=1\n    \n\nconfigure_plotly_browser_state()\nfig = dict(data=[trace_edges, trace_nodes], layout=layout)\nplotly.offline.iplot(fig) ","3b842008":"import community\nimport matplotlib.pyplot as plt\n# example community detection\nG = nx.karate_club_graph()\npart = community.best_partition(G)\nvalues = [part.get(node) for node in G.nodes()]\n\nnx.draw_spring(G, cmap = plt.get_cmap('jet'), node_color = values, node_size=30, with_labels=False)\n","f431cfad":"G=G_draw # Community Detection for the nodes of interest\npart = community.best_partition(G)\nvalues = [part.get(node) for node in G.nodes()]\n\nnx.draw_spring(G, cmap = plt.get_cmap('Pastel1'), node_color = values, node_size=450, with_labels=True)\n","d2341ee9":"## Community Detection","5efdd609":"## **Example 2** - Facebook Network","50b9df3f":"## Subgraphs","517e5c1f":"#**Examples of Graphs using Networkx**","3a72df01":"### With plotly","d86876b4":"## Example 1"}}