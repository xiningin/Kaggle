{"cell_type":{"404fed16":"code","f04d8273":"code","c67b02d7":"code","abd3233d":"code","3089534a":"code","473c5563":"code","04e55e6b":"code","630734db":"code","a8acca1c":"code","c7603aef":"code","16f09a16":"code","b2cfebbb":"code","f5071bea":"code","e80a7918":"code","32d1f5ce":"code","147986ba":"code","91ad2f93":"code","de5a4c06":"code","3ab4eeb4":"code","1be173f4":"code","0c8751a4":"code","c5e5b720":"code","acfaee55":"code","25915d40":"code","3f14c669":"code","7732314e":"code","f515a977":"code","3335b6f4":"code","17cd1533":"code","28642172":"code","14476f06":"code","10307929":"code","e667cffe":"code","c4174e2c":"code","3557036e":"code","c809ed2c":"code","56739d94":"code","52464d8c":"code","24ba7192":"code","63b7ccae":"code","b1d9b4ca":"code","71d7ac7c":"code","de6c80aa":"code","1be2f106":"code","c2a4c7ec":"code","1c0b1102":"code","8a93b4ea":"code","11a8bc48":"code","8f513a14":"code","ae1799fa":"code","c2f09d93":"code","b8118a7d":"code","e22eac51":"code","2931b401":"code","64355b69":"code","085356bf":"code","306489f2":"code","f4c6af0b":"code","c37c4e2e":"code","df84499b":"code","7c266fa9":"code","b48932fc":"markdown","5ff5f18b":"markdown","69cb6f4b":"markdown","c534fad5":"markdown","cafeb903":"markdown","4324db2b":"markdown","f91a8210":"markdown","a89dd0de":"markdown","b8eb9e9b":"markdown","ae7f6cd7":"markdown"},"source":{"404fed16":"import ast\nimport json\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport sys\nimport os\n","f04d8273":"counteries_df=pd.read_csv(\"..\/input\/my-helping-data\/Countries.csv\")\ncounteries_df = counteries_df.rename(columns={'Country': 'country'})\ncounteries_df","c67b02d7":"exposure_df=pd.read_csv('..\/input\/cusersmarildownloadsexposurecsv\/exposure.csv',delimiter=';', sep=';',encoding='ISO-8859-1',engine='python')\nexposure_df","abd3233d":"ex_new=exposure_df[exposure_df.country.notna()]\nex_new","3089534a":"combined_pd=pd.merge(ex_new, counteries_df, on='country')\ncombined_pd","473c5563":"df = combined_pd.rename(columns={'country': 'Country'})\ndf.set_index('Country')\ndf=df.sort_values( by='Country',inplace=False)\ndf","04e55e6b":"import numpy as np\nimport json","630734db":"df2=df.copy()\ndf_dict = df2['Cities'].to_dict()\nCountry_list = df_dict.keys()","a8acca1c":"count=df.shape[0]\narray1 = np.random.randint(low = 0, high = 3, size = count)\narray2 = np.random.randint(low = 0, high = 3, size = count)\nfor i in Country_list:\n    temp=df_dict[i].split('|||')\n    t=l=0\n    for j in temp:\n        x = json.loads(j)\n        #print(x)\n        t+=float(x['Latitude'])\n        l+=float(x['Longitude'])\n    array1[i]=t\/len(temp)  \n    array2[i]=l\/len(temp)","c7603aef":"df['avg_latitude']=array1\ndf['avg_longitude']=array2","16f09a16":"df.head()","b2cfebbb":"import math","f5071bea":"dLat = df['avg_latitude']- 30.5928\ndLon = df['avg_longitude'] - 114.3055\ndLon=dLon*math.pi\/180.0\ndLat=dLat*math.pi\/180.0\nc = (np.sin(dLat\/2)* np.sin(dLat\/2)+ np.cos(np.deg2rad(30.5928))* np.cos(np.deg2rad(df['avg_latitude']))*np.sin(dLon\/2)* np.sin(dLon\/2))\nd = 2 * np.arctan2(np.sqrt(c), np.sqrt(1-c)) *6373\n","e80a7918":"d","32d1f5ce":"df['distance_to_Wuhan']=d","147986ba":"df.head()","91ad2f93":"CCdf=pd.read_csv(\"..\/input\/my-helping-data\/Countries-Continents.csv\")\nCCdf=CCdf.sort_values(by='Continent',inplace=False)\nCCdf","de5a4c06":"df4 = df.copy()","3ab4eeb4":"combined_pd=pd.merge(df, CCdf, on='Country')\ncombined_pd","1be173f4":"dff = combined_pd.loc[combined_pd['Covid_19_Economic_exposure_index'] != 'x']\ndff=dff.loc[dff['Covid_19_Economic_exposure_index'] != 'No data']","0c8751a4":"dff['Covid_19_Economic_exposure_index']=dff['Covid_19_Economic_exposure_index'].str.replace(',','.')\n","c5e5b720":"dff['Covid_19_Economic_exposure_index']=dff['Covid_19_Economic_exposure_index'].astype(float)\n","acfaee55":"df_new = dff.groupby('Continent').mean()\ndf_new","25915d40":"df_new = df_new.rename(columns={'Covid_19_Economic_exposure_index': 'average_Covid_19_Economic_exposure_index'})","3f14c669":"df_new.set_index('average_Covid_19_Economic_exposure_index')\ndf_new=df_new.sort_values(by='average_Covid_19_Economic_exposure_index',inplace=False)\ndf_new","7732314e":"df5 = dff.copy()","f515a977":"df6 = df5.loc[df5['Foreign direct investment'] != 'x']\ndf6 = df5.loc[df5['Foreign direct investment'] != 'No data']","3335b6f4":"\ndf7=df6.loc[df6['Net_ODA_received_perc_of_GNI'] != 'x']\ndf7=df6.loc[df6['Net_ODA_received_perc_of_GNI'] != 'No data']","17cd1533":"df7['Net_ODA_received_perc_of_GNI']=df7['Net_ODA_received_perc_of_GNI'].str.replace(',','.')\n","28642172":"df7['Foreign direct investment']=df7['Foreign direct investment'].str.replace(',','.')\n","14476f06":"df7['Net_ODA_received_perc_of_GNI']=df7['Net_ODA_received_perc_of_GNI'].astype(float)\n","10307929":"df7 = df7.loc[df7['Foreign direct investment'] != 'x']","e667cffe":"\ndf7['Foreign direct investment']=df7['Foreign direct investment'].astype(float)\n","c4174e2c":"df_new = df7.groupby('Income classification according to WB').mean()\ndf_new","3557036e":"df_new.drop('Covid_19_Economic_exposure_index', inplace=True, axis=1)\ndf_new.drop('avg_latitude', inplace=True, axis=1)\ndf_new.drop('avg_longitude', inplace=True, axis=1)\ndf_new.drop('distance_to_Wuhan', inplace=True, axis=1)","c809ed2c":"df_new = df_new.rename(columns={'Income classification according to WB':'Income Class','Foreign direct investment':'Avg Foreign direct investment','Net_ODA_received_perc_of_GNI':'Avg_ Net_ODA_received_perc_of_GNI'})\n","56739d94":"df_new","52464d8c":"df61=df5.copy()","24ba7192":"df6 = df5[df5['Income classification according to WB'] == 'LIC'].index\ndf6","63b7ccae":"count=df6.shape[0]\narray1 =[]\narray2=[]\nfor ii in df6:\n    arr2=df61['Cities'].to_list()[ii]\n    tokens = arr2.split('|||');\n    l=[]\n    for i in tokens:\n        if (i.split(',')[4].split(':')[1])=='null}':\n            l.append(0)\n        else:\n            l.append(float((i.split(',')[4].split(':')[1]).split('.')[0]))\n    lp=sorted(((value, index) for index, value in enumerate(l)), reverse=True)\n    for i in range(0,5):\n        array1.append(tokens[lp[i][1]].split(',')[1].split(':')[1])\n        array2.append(lp[i][0])\n      ","b1d9b4ca":"nparr=np.array(array2)\nlr=sorted(((value, index) for index, value in enumerate(nparr)), reverse=True)\nress=[]\nfor i in range(0,5):\n    ress.append(array1[lr[i][1]])\nress","71d7ac7c":"cities=df['Cities'].to_dict()","de6c80aa":"dic={}\nfor i in cities:\n    for j in cities[i].split(\"|||\"):\n        json_version=json.loads(j)\n        if json_version['City'] in dic:\n            if json_version['Country'] not in dic[json_version['City']]:\n                dic[json_version['City']].append(json_version['Country'])\n        else:\n            dic[json_version['City']]=[json_version['Country']]","1be2f106":"dic1={}\nfor city in dic:\n    if len(dic[city])>=2:\n        dic1[city]=dic[city]","c2a4c7ec":"df7=pd.DataFrame(dic1.items(),columns=['city','countries'])","1c0b1102":"df7.set_index('city')","8a93b4ea":"CCdf=pd.read_csv(\"..\/input\/my-helping-data\/Countries-Continents.csv\")\nsdf2 = CCdf[CCdf['Continent'] == 'South America']\nli=sdf2['Country'].to_list()\n","11a8bc48":"count=df.shape[0]\narp=[]\nfor ii in range(0,count):\n    if (df['Country'][ii]) in li:\n        l=0\n        arr2=df['Cities'][ii]\n        tokens = arr2.split('|||');\n        for i in tokens:\n            if (i.split(',')[4].split(':')[1])=='null}':\n                l+=0\n            else:\n                l+=(float((i.split(',')[4].split(':')[1]).split('.')[0]))\n        arp.append(l)\narp","8f513a14":"totalP=7794798739\npArr=[]\nfor i in arp:\n    p=round(i\/totalP*100,3)\n    pArr.append(p)","ae1799fa":"#dff=pd.DataFrame({'South American Counteries':li,'Population percentage':pArr})\n#dff.set_index('South American Counteries')\n#dff","c2f09d93":"\n#dff.plot.pie(subplots=True, figsize=(6, 4))","b8118a7d":"import matplotlib.pyplot as plt","e22eac51":"\nfig = plt.figure(figsize =(10, 7))\nax = fig.add_axes([0,0,1,1])\nlangs =li\nstudents = pArr\nax.bar(langs,students)\nplt.xlabel(\"South American Counteries\")\nplt.ylabel(\"Percentage of total World population\")\nplt.title(\"Population of South American counteris in the World\")\nplt.show()","2931b401":"sdf2 = df[df['Income classification according to WB'] == 'LIC']\n","64355b69":"df","085356bf":"cl=df['Income classification according to WB'].to_list()\ngni=df['Net_ODA_received_perc_of_GNI'].to_list()\nfi=df['Foreign direct investment'].to_list()\n\nl33=df['Income classification according to WB'].to_list()\nl33=np.array(l33)\nvalues, counts = np.unique(l33, return_counts=True)\n\nprint(values)\nprint(counts)","306489f2":"count=df.shape[0]\narp=[]\nfor ii in range(0,count):\n    \n    l=0\n    arr2=df['Cities'][ii]\n    tokens = arr2.split('|||');\n    for i in tokens:\n        if (i.split(',')[4].split(':')[1])=='null}':\n            l+=0\n        else:\n            l+=(float((i.split(',')[4].split(':')[1]).split('.')[0]))\n    arp.append(l)\narp","f4c6af0b":"lat=df['avg_lattitude'].to_list()\nlon=df['avg_longitude'].to_list()\n","c37c4e2e":"\nplt.plot(lat, lon, 'o', color='black');\n","df84499b":"def get_cmap(n, name='hsv'):\n    '''Returns a function that maps each index in 0, 1, ..., n-1 to a distinct \n    RGB color; the keyword argument name must be a standard mpl colormap name.'''\n    return plt.cm.get_cmap(name, n)\n","7c266fa9":"\ncmap = get_cmap(len(lat))\nfor i in range(0,len(lat)):\n    plt.scatter(lat[i], lon[i], c=cmap(i))\nplt.xlabel(\"avg Longitude\")\nplt.ylabel(\"avg Latitude\")","b48932fc":"# Question 09","5ff5f18b":"# Question 06","69cb6f4b":"# Question 03","c534fad5":"# Question 08","cafeb903":"# Question 05 ","4324db2b":"# Question 01","f91a8210":"# Question 04","a89dd0de":"# Question 10","b8eb9e9b":"# Question 02","ae7f6cd7":" # Question 07"}}