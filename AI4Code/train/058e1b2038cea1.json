{"cell_type":{"3448a963":"code","d6dc711d":"code","4f0f5295":"code","f81e563d":"code","8da74ef3":"code","befffd50":"code","a81eff51":"code","12b640bb":"code","9f7c8a6f":"markdown","add68949":"markdown","bfdc3bb9":"markdown","992ebb62":"markdown","9117f58d":"markdown","19cad827":"markdown","c33d6687":"markdown","ba2b429c":"markdown","5d8eed80":"markdown","53fb41d3":"markdown","94e4459c":"markdown","98ae22d0":"markdown"},"source":{"3448a963":"from pandas import read_csv\n# load data, and remove the first unnamed column which is just index numbers.\ntrends = read_csv(\n    \"..\/input\/trends-omnilytics\/trends1.csv\",\n    parse_dates=[\"date\"],  # Tell pandas which column(s) to parse as dates\n    index_col=\"date\", # Use a date column as your index\n    usecols=range(1,5) #remove first column of indexes\n)\ntrends.head()\n# summarize shape\nprint(trends.shape)\n# show first few rows\nprint(trends.head())","d6dc711d":"from matplotlib import pyplot\ntrends.plot()","4f0f5295":"#And now we split the trends by month to see the peaks\n# Extract time period of interest\nindex_month = trends.index.month  # Choose year, month, day etc.\n\n# Compute mean for each time period\ntrends_by_month = trends.groupby(index_month).mean()  # Replace .mean() with aggregation function\n\n# Plot the mean for each time period\nax = trends_by_month.plot(fontsize=10, linewidth=1)\n\n# Set axis labels and legend\nax.set_xlabel(\"Month\", fontsize=12)\nax.set_ylabel(\"Mean Popularity score\", fontsize=12)\nax.axvline(\n      # Position of vertical line\n    color=\"red\",  # Color of line\n    linestyle=\"--\",  # Style of line\n    linewidth=2,\n)  # Thickness of line\n\nax.legend(\n    loc=\"center left\", bbox_to_anchor=(1.0, 0.5)  # Placement of legend within bbox\n)  # Location of boundary box (bbox)\n","f81e563d":"from pandas import read_csv\n# load data, and remove the first unnamed column which is just index numbers.\npreds = read_csv(\n    \"..\/input\/trends-omnilytics\/predictions.csv\",\n    parse_dates=[\"date\"],  # Tell pandas which column(s) to parse as dates\n    index_col=\"date\", # Use a date column as your index\n    usecols=range(1,10) #remove first column of indexes\n)\npreds.head()\n# summarize shape\nprint(preds.shape)\n# show first few rows\nprint(preds.head())\n\n","8da74ef3":"#plotting the predictions\nfrom matplotlib import pyplot\npreds.plot()","befffd50":"# ePrediction of the top 1 trend\nimport fbprophet\nfrom pandas import read_csv\nfrom pandas import to_datetime\nfrom pandas import DataFrame\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_absolute_error\nfrom matplotlib import pyplot\n\n# load data\nfrom pandas import read_csv\n# load data\npath = '..\/input\/trends-omnilytics\/trends1.csv'\ntop_1_preds = read_csv(path, header=0,usecols=range(1,5))\ncols = [top_1_preds.columns[-1]] + [col for col in top_1_preds if col != top_1_preds.columns[-1]]\ntop_1_preds = top_1_preds[cols]\n\n# Remove other top2 and top3 trends for top1 prediction\ndel top_1_preds[\"top 2\"]\ndel top_1_preds[\"top 3\"]\ntop_1_preds.head()\n\n#summarize shape\nprint(top_1_preds.shape)\n#show first few rows\nprint(top_1_preds.head())\n# prepare expected column names\ntop_1_preds.columns = ['ds', 'y']\ntop_1_preds['ds']= to_datetime(top_1_preds['ds'])\n# create test dataset, remove last 12 months\ntrain = top_1_preds.drop(top_1_preds.index[-12:])\nprint(train.tail())\n# define the model\nmodel = Prophet()\n# fit the model\nmodel.fit(train)\n# define the period for which we want a prediction\nfuture = list()\nfor i in range(1, 13):\n\tdate = '2018-%10d' % i\n\tfuture.append([date])\nfuture = DataFrame(future)\nfuture.columns = ['ds']\nfuture['ds'] = to_datetime(future['ds'])\n# use the model to make a forecast\nforecast = model.predict(future)\n# calculate MAE between expected and predicted values for december\ny_true = top_1_preds['y'][-12:].values\ny_pred = forecast['yhat'].values\nmae = mean_absolute_error(y_true, y_pred)\nprint('MAE: %.3f' % mae)\n# plot expected vs actual\npyplot.plot(y_true, label='Actual for top 1')\npyplot.plot(y_pred, label='Predicted fit for top 1')\npyplot.legend()\npyplot.show()","a81eff51":"# ePrediction of the top 2 trend\nimport fbprophet\nfrom pandas import read_csv\nfrom pandas import to_datetime\nfrom pandas import DataFrame\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_absolute_error\nfrom matplotlib import pyplot\n\n# load data\nfrom pandas import read_csv\n# load data\npath = '..\/input\/trends-omnilytics\/trends1.csv'\ntop_2_preds = read_csv(path, header=0,usecols=range(1,5))\ncols = [top_2_preds.columns[-1]] + [col for col in top_2_preds if col != top_2_preds.columns[-1]]\ntop_2_preds = top_2_preds[cols]\n\n# Remove other top2 and top3 trends for top1 prediction\ndel top_2_preds[\"top 1\"]\ndel top_2_preds[\"top 3\"]\ntop_2_preds.head()\n\n#summarize shape\nprint(top_2_preds.shape)\n#show first few rows\nprint(top_2_preds.head())\n# prepare expected column names\ntop_2_preds.columns = ['ds', 'y']\ntop_2_preds['ds']= to_datetime(top_2_preds['ds'])\n# create test dataset, remove last 12 months\ntrain = top_2_preds.drop(top_2_preds.index[-12:])\nprint(train.tail())\n# define the model\nmodel = Prophet()\n# fit the model\nmodel.fit(train)\n# define the period for which we want a prediction\nfuture = list()\nfor i in range(1, 13):\n\tdate = '2018-%10d' % i\n\tfuture.append([date])\nfuture = DataFrame(future)\nfuture.columns = ['ds']\nfuture['ds'] = to_datetime(future['ds'])\n# use the model to make a forecast\nforecast = model.predict(future)\n# calculate MAE between expected and predicted values for december\ny_true = top_2_preds['y'][-12:].values\ny_pred = forecast['yhat'].values\nmae = mean_absolute_error(y_true, y_pred)\nprint('MAE: %.3f' % mae)\n# plot expected vs actual\npyplot.plot(y_true, label='Actual for top 2')\npyplot.plot(y_pred, label='Predicted fit for top 2')\npyplot.legend()\npyplot.show()","12b640bb":"# ePrediction of the top 3 trend\nimport fbprophet\nfrom pandas import read_csv\nfrom pandas import to_datetime\nfrom pandas import DataFrame\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_absolute_error\nfrom matplotlib import pyplot\n\n# load data\nfrom pandas import read_csv\n# load data\npath = '..\/input\/trends-omnilytics\/trends1.csv'\ntop_3_preds = read_csv(path, header=0,usecols=range(1,5))\ncols = [top_3_preds.columns[-1]] + [col for col in top_3_preds if col != top_3_preds.columns[-1]]\ntop_3_preds = top_3_preds[cols]\n\n# Remove other top2 and top3 trends for top1 prediction\ndel top_3_preds[\"top 1\"]\ndel top_3_preds[\"top 2\"]\ntop_3_preds.head()\n\n#summarize shape\nprint(top_3_preds.shape)\n#show first few rows\nprint(top_3_preds.head())\n# prepare expected column names\ntop_3_preds.columns = ['ds', 'y']\ntop_3_preds['ds']= to_datetime(top_3_preds['ds'])\n# create test dataset, remove last 12 months\ntrain = top_3_preds.drop(top_3_preds.index[-12:])\nprint(train.tail())\n# define the model\nmodel = Prophet()\n# fit the model\nmodel.fit(train)\n# define the period for which we want a prediction\nfuture = list()\nfor i in range(1, 13):\n\tdate = '2018-%10d' % i\n\tfuture.append([date])\nfuture = DataFrame(future)\nfuture.columns = ['ds']\nfuture['ds'] = to_datetime(future['ds'])\n# use the model to make a forecast\nforecast = model.predict(future)\n# calculate MAE between expected and predicted values for december\ny_true = top_3_preds['y'][-12:].values\ny_pred = forecast['yhat'].values\nmae = mean_absolute_error(y_true, y_pred)\nprint('MAE: %.3f' % mae)\n# plot expected vs actual\npyplot.plot(y_true, label='Actual for top 3')\npyplot.plot(y_pred, label='Predicted fit for top 3')\npyplot.legend()\npyplot.show()","9f7c8a6f":"Based on the predictions above, The demands for product would most likely remain the same. Some generally upwards increase is seen on product 3, although for product 2 the demands would also stay similar to the past two years. ","add68949":"# **Exploring Product Popularity trends**","bfdc3bb9":"# **We will now build 3 models for each product, and evaluate which model has the best fit**","992ebb62":"**Prediction for the third product** ","9117f58d":"# Gauging the fit lines for each plot","19cad827":"Now we plot all 3 popularity rating to observe the trend performance below.","c33d6687":"From the plot above it shows us that in the middle of the year, around June and July, both the scores for 'top 3' and 'top 2' peaks with the exception of top 1. ","ba2b429c":"There are 3 popularity trends for each product, and they will be explored to determine\nthe best performing trend. ","5d8eed80":"**Prediction for the first product**","53fb41d3":"the trend for 'top 2' seems to perform the best, with a high increase in popularity score from 2016 to 2017, which is close to a 400% increase from around 20 to 100from the previous year, 2015 - 2016. However from the year 2016 - 2017 the peak trends didnt go any higher. ","94e4459c":"**Prediction for the second product**","98ae22d0":"From the three predictions above, the model that fits best would be the predictions for the first trendline, with the lowest Mean Absolute Error, meaning it captured the actual values closest.  "}}