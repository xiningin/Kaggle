{"cell_type":{"db93baa7":"code","ea037959":"code","a6bd6e15":"code","7230e485":"code","5ea50feb":"code","83ace620":"code","a8979f0b":"code","9b2f2999":"code","da0f55a4":"code","1737aa2c":"code","d3a428a5":"code","3bf69912":"code","be014148":"code","d8f70953":"code","15731a47":"code","581dfbd4":"markdown","40f181bd":"markdown","5fc1c5e2":"markdown"},"source":{"db93baa7":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt","ea037959":"data = pd.read_csv('..\/input\/advanced-dls-spring-2021\/train.csv')\ndata.head(10) # \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0442\u043e \u0432\u043e\u043e\u0431\u0449\u0435 \u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0435","a6bd6e15":"# \u0414\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0441\u043f\u0438\u0441\u043a\u0438 \u0441 \u0438\u043c\u0435\u043d\u0430\u043c\u0438 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\n\n# \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nnum_cols = [\n    'ClientPeriod',\n    'MonthlySpending',\n    'TotalSpent'\n]\n\n# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ncat_cols = [\n    'Sex',\n    'IsSeniorCitizen',\n    'HasPartner',\n    'HasChild',\n    'HasPhoneService',\n    'HasMultiplePhoneNumbers',\n    'HasInternetService',\n    'HasOnlineSecurityService',\n    'HasOnlineBackup',\n    'HasDeviceProtection',\n    'HasTechSupportAccess',\n    'HasOnlineTV',\n    'HasMovieSubscription',\n    'HasContractPhone',\n    'IsBillingPaperless',\n    'PaymentMethod'\n]\n\nfeature_cols = num_cols + cat_cols\ntarget_col = 'Churn' #\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a\u0430\u043a \u043e\u0442\u0442\u043e\u043a, \u0442\u043e \u0447\u0442\u043e \u043c\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c. \u0441\u0432\u0430\u043b\u0438\u043b \u043b\u0438 \u0447\u0435\u043b \u0438\u043b\u0438 \u043d\u0435\u0442","7230e485":"data = data.replace(' ', float('0'))\ndata['TotalSpent'] = data['TotalSpent'].astype(float)\n'''\n\u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0435\u043d\u044c\u0433\u0438. \u0438 \u0435\u0441\u043b\u0438 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0438\u0445 \u043d\u0435 \u0442\u0440\u0430\u0442\u0438\u043b, \u0442\u043e \u0442\u0430\u043c \u043d\u0435 Nan, \u0430 whitespace.\n\u043f\u043e\u043b\u0431\u0435\u0434\u044b \u0435\u0433\u043e \u043e\u0442\u0441\u043b\u0435\u0434\u0438\u0442\u044c, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 1000-\u044b\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u0439. \u043d\u0430\u0434\u043e \u0435\u0433\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c\n\u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a 0, \u0430 \u0443\u0436\u0435 \u043f\u043e\u0442\u043e\u043c \u0431\u0430\u0445\u043d\u0443\u0442\u044c \u0438\u0437 \u044d\u0442\u0438\u0445 \u0441\u0442\u0440\u043e\u043a \u0444\u043b\u043e\u0430\u0442 (whitespace \u0432\u043e \u0444\u043b\u043e\u0430\u0442 \u043d\u0435 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f)\n\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0433\u0440\u0430\u0444\u0438\u043a\u0438\n'''\nNone","5ea50feb":"data = pd.get_dummies(data, columns = cat_cols)\ncat_cols_new = []\nfor col_name in cat_cols:\n    cat_cols_new.extend(filter(lambda x: x.startswith(col_name), data.columns))\ncat_cols = cat_cols_new","83ace620":"from sklearn.preprocessing import StandardScaler\n\npca = StandardScaler()\npca.fit(data[num_cols + cat_cols])\nX = pca.transform(data[num_cols + cat_cols])\n","a8979f0b":"from sklearn.model_selection import train_test_split\nX = data[num_cols + cat_cols]\ny = data[target_col]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.05)","9b2f2999":"from catboost import CatBoostClassifier\nimport catboost\nparam_grid = {\n        \"learning_rate\":[0.025, 0.03, 0.04],\n        \"min_data_in_leaf\":[88, 90, 92],\n        \"depth\": [3, 4, 5],\n        \"iterations\":[187, 190, 193]\n         } # \u0432\u043e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c\nc_grid = CatBoostClassifier(cat_features=cat_cols, random_seed=42, verbose=False, eval_metric='AUC')\ngs_result = c_grid.grid_search(param_grid, X_train, y=y_train)","da0f55a4":"from sklearn.metrics import roc_auc_score\nroc_auc_score(y_train, c_grid.predict_proba(X_train)[:, 1]) # \u043f\u043e\u0442\u0435\u0441\u0442\u0438\u043c","1737aa2c":"roc_auc_score(y_test, c_grid.predict_proba(X_test)[:, 1])","d3a428a5":"gs_result['params']","3bf69912":"best_model = CatBoostClassifier(verbose = False, cat_features = cat_cols, min_data_in_leaf = 88, iterations = 187, learning_rate = 0.03, depth = 3)","be014148":"best_model.fit(X, y)","d8f70953":"cat_cols = [\n    'Sex',\n    'IsSeniorCitizen',\n    'HasPartner',\n    'HasChild',\n    'HasPhoneService',\n    'HasMultiplePhoneNumbers',\n    'HasInternetService',\n    'HasOnlineSecurityService',\n    'HasOnlineBackup',\n    'HasDeviceProtection',\n    'HasTechSupportAccess',\n    'HasOnlineTV',\n    'HasMovieSubscription',\n    'HasContractPhone',\n    'IsBillingPaperless',\n    'PaymentMethod'\n]","15731a47":"X_test = pd.read_csv('..\/input\/advanced-dls-spring-2021\/test.csv')\n\nX_test = X_test.replace(' ', float('0'))\nX_test['TotalSpent'] = X_test['TotalSpent'].astype(float)\n\nX_test = pd.get_dummies(X_test, columns = cat_cols)\ncat_cols_new = []\nfor col_name in cat_cols:\n    cat_cols_new.extend(filter(lambda x: x.startswith(col_name), X_test.columns))\ncat_cols = cat_cols_new\n\nfrom sklearn.preprocessing import StandardScaler\npca = StandardScaler()\npca.fit(X_test[num_cols + cat_cols])\nX = pca.transform(X_test[num_cols + cat_cols])\n\nsubmission = pd.read_csv('..\/input\/advanced-dls-spring-2021\/submission.csv')\n\nsubmission['Churn'] = best_model.predict_proba(X_test)[:, 1]\nsubmission.to_csv('.\/my_submission.csv', index=False)","581dfbd4":"# Kaggle (5 \u0431\u0430\u043b\u043b\u043e\u0432)\n\n\u041a\u0430\u043a \u0432\u044b\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0431\u0430\u043b\u043b\u044b:\n\n1) 1 >= roc auc > 0.84 \u044d\u0442\u043e 5 \u0431\u0430\u043b\u043b\u043e\u0432\n\n2) 0.84 >= roc auc > 0.7 \u044d\u0442\u043e 3 \u0431\u0430\u043b\u043b\u0430\n\n3) 0.7 >= roc auc > 0.6 \u044d\u0442\u043e 1 \u0431\u0430\u043b\u043b\n\n4) 0.6 >= roc auc \u044d\u0442\u043e 0 \u0431\u0430\u043b\u043b\u043e\u0432\n\n\n\u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0433\u0438.\n* \u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 [kaggle.com](kaggle.com). \u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c \u043f\u0440\u0438 \u043f\u043e\u0434\u0432\u0435\u0434\u0435\u043d\u0438\u0438 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0432\u043e \u0432\u043a\u043b\u0430\u0434\u043a\u0435 Team -> Team name \u0441\u0432\u043e\u0438 \u0438\u043c\u044f \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0418\u043c\u044f_\u0424\u0430\u043c\u0438\u043b\u0438\u044f (\u0432\u0430\u0436\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u0438\u043c\u044f \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044f \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u043b\u0438 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 Stepik).\n* \u041e\u0431\u0443\u0447\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0444\u0430\u0439\u043b \u0441 \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 .csv \u0438 \u0441\u0434\u0430\u0442\u044c \u0435\u0433\u043e \u0432 \u043a\u043e\u043d\u043a\u0443\u0440\u0441. \u041f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0434\u043e 20 \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u0441\u0434\u0430\u0447\u0438 \u043d\u0430 kaggle \u0432 \u0434\u0435\u043d\u044c.\n* \u041f\u043e\u0441\u043b\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u0441 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u043d\u0430 \u0441\u0442\u0435\u043f\u0438\u043a. \n* \u041f\u043e\u0441\u043b\u0435 \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u043f\u043e\u0441\u044b\u043b\u043a\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0430\u0434\u043e \u0437\u0430\u0439\u0442\u0438 \u043d\u0430 \u0441\u0442\u0435\u043f\u0438\u043a, \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0438\u0445 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u043a\u043e\u0440 \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438.","40f181bd":"\u0412\u044b\u043f\u0438\u0448\u0438\u0442\u0435 \u043a\u0430\u043a\u043e\u0435 \u043b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0441 \u043a\u0430\u043a\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0432\u0430\u043c \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c","5fc1c5e2":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f"}}