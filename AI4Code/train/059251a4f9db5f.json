{"cell_type":{"e776b06c":"code","fa8095d7":"code","5b6bbd93":"code","8a3e2698":"code","0c3d82b4":"code","08d0df7c":"code","099eca1d":"code","11e2cf24":"code","b79697df":"code","4834a37d":"code","bcd9ff2c":"code","65ce7973":"code","a39333ac":"code","bfd30ff1":"code","cb77b65f":"code","09bd04e8":"code","0492c5fb":"code","c032fda7":"code","ed7e7332":"code","6e72f593":"code","5a1d8edc":"code","ccfd59dc":"code","760a9071":"code","2e0b9d97":"code","6122b5f2":"code","9f4bb94e":"code","89484237":"code","881ae412":"code","530eb3e3":"code","8b2fd61b":"code","06b7e4c7":"code","1c1f1957":"code","cad06264":"code","3d78673a":"code","9da4583e":"code","d904e1bb":"code","806d8209":"code","45b3f1e4":"code","9b14ae04":"code","1c80fdac":"code","dbce5989":"code","be72bfa2":"code","e2821369":"code","bf536287":"code","2ace87ee":"code","49cfaffc":"code","bc96acca":"code","abc5cec0":"code","6f72ad9c":"code","4f7cab56":"code","ff9b06a8":"code","edabd757":"code","a16c6c69":"code","9a9ccdeb":"code","074811c3":"code","a082667d":"code","d50e6abe":"code","e52f3568":"code","16e04441":"code","0bcbe139":"code","9a9bdffe":"code","2dcdecc1":"code","47de539b":"code","b3a7fd20":"code","1f11b4b6":"code","6a79561a":"code","ec99dcb5":"code","bd7834e7":"code","0eb02d23":"code","8cb0e4c1":"code","01f99c52":"markdown","df0ed3f3":"markdown","511b37ce":"markdown","1062953a":"markdown","a8daa103":"markdown","6fc0bcd8":"markdown","85c0c0a7":"markdown","d5d9ad3a":"markdown","949adc19":"markdown","616f92ea":"markdown","33d41e30":"markdown","791d820a":"markdown","897991bd":"markdown","832ceb01":"markdown","0e3057be":"markdown","9e078306":"markdown","fcc8a317":"markdown","f3a96945":"markdown","edbe7a2d":"markdown","a78e9976":"markdown","09103410":"markdown","09b93a4e":"markdown","fa91b57c":"markdown","e09a5c45":"markdown","e255ddc9":"markdown"},"source":{"e776b06c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","fa8095d7":"fig=plt.figure(figsize=(12,8), dpi= 100, facecolor='w', edgecolor='k')\nplt.rcParams['figure.figsize'] = [12, 8]\nplt.rcParams['figure.dpi'] = 100","5b6bbd93":"data = pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\")","8a3e2698":"data.head()","0c3d82b4":"data.tail()","08d0df7c":"data.describe()","099eca1d":"data.isnull().sum()","11e2cf24":"corr = data.corr()","b79697df":"corr","4834a37d":"sns.heatmap(corr, annot=True, square=True)\nplt.yticks(rotation=0)\nplt.show()","bcd9ff2c":"high_corr_var = np.where(corr > 0.2)","65ce7973":"high_corr_var","a39333ac":"sns.histplot(data = data,x = \"Age\")","bfd30ff1":"sns.countplot(data = data,x = \"Age\")","cb77b65f":"sns.countplot(data = data,x = \"ChestPainType\")","09bd04e8":"sns.pairplot(data)","0492c5fb":"data.boxplot()","c032fda7":"import plotly.express as px","ed7e7332":"px.box(data,x = \"Age\", y = \"ChestPainType\")","6e72f593":"px.box(data,x = \"Age\", y = \"RestingBP\")","5a1d8edc":"from scipy import stats\n\nz = np.abs(stats.zscore(data[\"RestingBP\"]))\nprint(z)","ccfd59dc":"l = []\nfor i in range(len(z)):\n    if z[i] > 3:\n        l.append(i)\nprint(l)","760a9071":"data.drop([109, 241, 365, 399, 449, 592, 732, 759],inplace = True\n)","2e0b9d97":"data.shape","6122b5f2":"px.box(data,x = \"Age\", y = \"RestingBP\")","9f4bb94e":"px.box(data,x = \"Sex\", y = \"RestingBP\")","89484237":"l = data[data['RestingBP'] > 170]","881ae412":"p = l.index.tolist()","530eb3e3":"data.drop(p,inplace = True)","8b2fd61b":"px.box(data,x = \"Sex\", y = \"RestingBP\")","06b7e4c7":"from sklearn.preprocessing import LabelEncoder\n\nencode = LabelEncoder()","1c1f1957":"data.head(2)","cad06264":"cat = ['Sex','ChestPainType','ExerciseAngina','ST_Slope','RestingECG']","3d78673a":"for i in cat:\n    data[i] = encode.fit_transform(data[i])","9da4583e":"data.head()","d904e1bb":"x = data.iloc[:,:-1]","806d8209":"x","45b3f1e4":"y = data.iloc[:,-1]","9b14ae04":"y","1c80fdac":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,random_state=42)","dbce5989":"x_train.shape","be72bfa2":"y_train.shape","e2821369":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()","bf536287":"x_train = scaler.fit_transform(x_train)","2ace87ee":"x_test = scaler.fit_transform(x_test)","49cfaffc":"from sklearn.linear_model import LogisticRegression\n\nregg = LogisticRegression()","bc96acca":"regg.fit(x_train,y_train)","abc5cec0":"y_pred = regg.predict(x_test)","6f72ad9c":"from sklearn.metrics import classification_report,accuracy_score\n\nprint(classification_report(y_test, y_pred))\nprint(accuracy_score(y_pred,y_test))","4f7cab56":"from sklearn.metrics import log_loss\n\nprint(log_loss(y_test,y_pred))","ff9b06a8":"from sklearn.linear_model import SGDClassifier\n\nsgdc = SGDClassifier(loss=\"log\", penalty=\"l2\", max_iter=50)","edabd757":"sgdc.fit(x_train,y_train)","a16c6c69":"pred = sgdc.predict(x_test)","9a9ccdeb":"print(classification_report(y_test, pred))\nprint(accuracy_score(y_test,pred))","074811c3":"from sklearn.metrics import log_loss\n\nprint(log_loss(y_test,pred))","a082667d":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\n\ncls = KNeighborsClassifier()","d50e6abe":"k_range = list(range(1, 31))\nparam_grid = dict(n_neighbors=k_range)\n\ngrid = GridSearchCV(cls, param_grid, cv=10, scoring='accuracy', return_train_score=False,verbose=1)\n  \ngrid_search=grid.fit(x_train, y_train)","e52f3568":"print(grid_search.best_params_)","16e04441":"accuracy = grid_search.best_score_ *100\nprint(accuracy )","0bcbe139":"knn = KNeighborsClassifier(n_neighbors=26)\n\nknn.fit(x_train, y_train)\n\ny_test_hat=knn.predict(x_test) \n\ntest_accuracy=accuracy_score(y_test,y_test_hat)*100\n\nprint(test_accuracy)","9a9bdffe":"from sklearn.svm import SVC\n\nsvm = SVC()\n\nfrom sklearn.model_selection import GridSearchCV\n \nparam_grid = {'C': [0.1, 1, 10, 100, 1000],\n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n              'kernel': ['rbf']}\n \ngrid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3)\n \ngrid.fit(x_train, y_train)","2dcdecc1":"print(grid.best_params_)\nprint(grid.best_estimator_)","47de539b":"grid_predictions = grid.predict(x_test)\nprint(classification_report(y_test, grid_predictions))","b3a7fd20":"from sklearn.tree import DecisionTreeClassifier\n\nparams = {'max_leaf_nodes': list(range(2, 100)), 'min_samples_split': [2, 3, 4,5,6,7,8,9,10,11,12,13,14,15,16]}\ngrid_search_cv = GridSearchCV(DecisionTreeClassifier(random_state=42), params, verbose=1, cv=3)\ngrid_search_cv.fit(x_train, y_train)","1f11b4b6":"grid_search_cv.best_estimator_","6a79561a":"grid_predictions = grid_search_cv.predict(x_test)\nprint(classification_report(y_test, grid_predictions))","ec99dcb5":"from sklearn.ensemble import RandomForestClassifier\n\nrfc=RandomForestClassifier(random_state=42)\nparam_grid = { \n    'n_estimators': [10,20,30,40,50,100,125,150,175,200,300,400,500],\n    'max_features': ['auto', 'sqrt', 'log2'],\n    'max_depth' : [4,5,6,7,8],\n    'criterion' :['gini', 'entropy']\n}","bd7834e7":"CV_rfc = GridSearchCV(estimator=rfc, param_grid=param_grid, cv= 5)\nCV_rfc.fit(x_train, y_train)","0eb02d23":"CV_rfc.best_params_","8cb0e4c1":"grid_predictions = CV_rfc.predict(x_test)\nprint(classification_report(y_test, grid_predictions))","01f99c52":"**To view the enlarge image we are use this**","df0ed3f3":"**DecisionTree have accuracy of 85**","511b37ce":"**You can see there is a slightly correlation between few columns**","1062953a":"**Splitting the dataset into test and train sets**","a8daa103":"**Importing the dataset**","6fc0bcd8":"**Now we will check all the classification model which suits the best in predicting the values**","85c0c0a7":"**Logistic Regression have an accuracy of 87**","d5d9ad3a":"**SVM have an accuracy of 89**","949adc19":"**Plotting the correlation to visualise this**","616f92ea":"**We are using box plot to detect the outliers**","33d41e30":"**Z score also used in detecting the outliers. In this we set the thresold value and remove all the rows which is have z value greter than threshold**","791d820a":"**The above plot show the count according to the ChestPainType**","897991bd":"**Checking the data statically**","832ceb01":"**To check the correlation between the columns**","0e3057be":"**SGDC have an accuracy of 83**","9e078306":"**Checking is there is any NaN values are present**","fcc8a317":"**Plotting the data to get the more from the data**","f3a96945":"**Now we will use grid search to get the best parameters for the KNN, SVM, Decision and Randomforest**","edbe7a2d":"**Encoding the dataset to get rid of the categorical dataset**","a78e9976":"**Preprocessing the dataset**","09103410":"**RandomForest have accuracy of 89**","09b93a4e":"**Importing the required libraries**","fa91b57c":"**Scaling the dataset**","e09a5c45":"**Above plot shows that how many people  belong to differnt ages in the dataset**","e255ddc9":"**KNN have an accuracy of 85**"}}