{"cell_type":{"b0c8cb08":"code","c4a9f750":"code","0bf716db":"code","de7836ad":"code","97a5a0f1":"code","fa15fad9":"code","c86ad068":"code","b5dbb59c":"code","0670c861":"code","e0f69445":"code","a1e860a1":"code","56254d38":"code","d0079ca6":"code","56382dc9":"code","d3392b40":"code","6298c76f":"code","26c10d6e":"code","600c541c":"code","1546f925":"code","4c4ffa23":"code","03b1c7db":"code","ab044e22":"code","3b8d053d":"code","7df278cb":"code","c8368d0d":"code","b8308a20":"code","b93a9af2":"code","449fa223":"code","efff39c8":"code","06016a5a":"code","e031c1c9":"code","4ab41833":"code","7732102a":"code","d36a1a13":"code","97a59232":"code","23a2c653":"code","66084626":"code","78164ee8":"code","92edf958":"code","4c65a00d":"code","ba9aa541":"code","9654d82b":"code","9292997f":"code","f1c3440c":"code","9cdae817":"code","5c1a5439":"code","927181d2":"code","bb1a310a":"code","c5648c21":"code","ea89c2b5":"code","5ac77b68":"markdown","bd32426e":"markdown","a9f0b9e6":"markdown","1f11d0c6":"markdown","8c1741c6":"markdown","bd02797a":"markdown","270ad72c":"markdown","c7b4d740":"markdown","9b1eff0f":"markdown","93a35bc0":"markdown"},"source":{"b0c8cb08":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4a9f750":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nwarnings.filterwarnings('ignore')\nwarnings.filterwarnings('ignore',message='DeprecationWarning')\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n","0bf716db":"train=pd.read_csv('\/kaggle\/input\/ghouls-goblins-and-ghosts-boo\/train.csv.zip').copy()\ntest=pd.read_csv('\/kaggle\/input\/ghouls-goblins-and-ghosts-boo\/test.csv.zip').copy()","de7836ad":"train.head()","97a5a0f1":"train.describe()","fa15fad9":"train.drop(['id'],axis=1,inplace=True)\ntest.drop(['id'],axis=1,inplace=True)\nsns.pairplot(train,hue='type')","c86ad068":"sns.boxplot(x='type',y='bone_length',data=train)\n\n\n","b5dbb59c":"sns.boxplot(x='type',y='hair_length',data=train)","0670c861":"sns.boxplot(x='type',y='has_soul',data=train)","e0f69445":"sns.boxplot(x='type',y='rotting_flesh',data=train)","a1e860a1":"palette ={\"clear\":\"moccasin\",\"green\":\"green\",\"black\":\"black\", \"white\":\"grey\",\"blue\":\"blue\",'blood':'red'}\nsns.countplot(x='type',hue='color',data=train,palette=palette)","56254d38":"train.corr()","d0079ca6":"sns.heatmap(train.corr(),annot=True,vmin=-1)","56382dc9":"X=train.drop(['type'],axis=1)\nX=pd.get_dummies(X)\nX.head()\n","d3392b40":" X_train, X_test, y_train, y_test = train_test_split(\n...     X, train['type'] ,random_state=0)","6298c76f":"clf=DecisionTreeClassifier()\nclf.fit(X_train,y_train)","26c10d6e":"sns.barplot(y=X_test.columns,x=clf.feature_importances_)","600c541c":"from sklearn import tree\ntree.plot_tree(clf) \n","1546f925":"y_pred=clf.predict(X_test)","4c4ffa23":"accuracy_score=metrics.accuracy_score(y_test, y_pred)","03b1c7db":"print(accuracy_score)","ab044e22":"params = {'max_leaf_nodes': list(range(1, 16)), 'min_samples_split': np.linspace(.1, 1,10, endpoint=True),\"max_features\":[1,4,6],'max_depth':np.linspace(1, 16, 16, endpoint=True)}\naccuracy=metrics.make_scorer(metrics.accuracy_score)\nclf1=GridSearchCV(clf,params,scoring=accuracy,n_jobs=-1)\nclf1.fit(X_train,y_train)\nprint('best score :',clf1.best_score_)\nprint('params :',clf1.best_params_)","3b8d053d":"clf.get_params()\nclf_best=clf1.best_estimator_","7df278cb":"clf_best.fit(X_train,y_train)","c8368d0d":"y_pred_clf=clf_best.predict(X_test)\nprint('accuracy of best estimator for gridsearch:',metrics.accuracy_score(y_test,y_pred_clf))","b8308a20":"rf=RandomForestClassifier(max_depth=12,max_features=6,max_leaf_nodes=10,min_samples_split=0.1)","b93a9af2":"rf.fit(X_train,y_train)","449fa223":"y_pred1=rf.predict(X_test)","efff39c8":"accuracy_scorerf=metrics.accuracy_score(y_test, y_pred1)","06016a5a":"print('accuracy Score:',accuracy_scorerf)\nprint('\\n',metrics.classification_report(y_test,y_pred1))","e031c1c9":"rf.get_params()","4ab41833":"from sklearn.model_selection import RandomizedSearchCV\n","7732102a":"# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 1, stop = 200, num = 200)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 20, num = 10)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = np.linspace(.1, 1,10, endpoint=True)\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4,8,10]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nprint(random_grid)","d36a1a13":"rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=0, n_jobs = -1)","97a59232":"rf_random.fit(X_train,y_train)","23a2c653":"rf_random.best_params_","66084626":"rf_random.best_score_","78164ee8":"rf_best=rf_random.best_estimator_","92edf958":"rf_best.fit(X_train,y_train)","4c65a00d":"y_pred_rf_best=rf_best.predict(X_test)","ba9aa541":"print(metrics.accuracy_score(y_test,y_pred_rf_best))\n","9654d82b":"params1={'max_depth':[10,6,12,16] ,'max_features':['sqrt','auto'], 'max_leaf_nodes':[10,11,12,9],\n                       'min_samples_leaf':[1,2,3,4], 'min_samples_split':[0.1,0.2],\n                       'n_estimators':[94,85,173]}","9292997f":"rf=RandomForestClassifier()\nrf_gsv=GridSearchCV(rf,param_grid=params1,cv=5,n_jobs=-1,scoring=accuracy)\n","f1c3440c":"rf_gsv.fit(X_train,y_train)\nprint('best score for rf GSV',rf_gsv.best_score_)","9cdae817":"y_pred_rf_gsv=rf_gsv.predict(X_test)","5c1a5439":"print('acuuracy with test data:',metrics.accuracy_score(y_test,y_pred_rf_gsv))","927181d2":"test_=pd.get_dummies(test)","bb1a310a":"pre=rf_gsv.predict(test_)\ntest_f=pd.read_csv('\/kaggle\/input\/ghouls-goblins-and-ghosts-boo\/test.csv.zip').copy()","c5648c21":"pre","ea89c2b5":"df=pd.DataFrame({'id':test_f['id'],'type':pre},columns=['id','type'])\ncsv=df[['id','type']].to_csv('submission.csv',index=False)","5ac77b68":"Use randomizedSearchCV to find best parameters for random forest","bd32426e":"GridSearchCV is used to find best params ,we give a smaller list of params shortlisted from randomizedSearchCV","a9f0b9e6":"Doing EDA of Datasets","1f11d0c6":"Making submission","8c1741c6":"Load Required Libraries","bd02797a":"Check for correlation \nIf two coloums have corelation above threhld one is dropped","270ad72c":"Examine the datasets","c7b4d740":"Load train and test datasets","9b1eff0f":"Plot correlation in heatmap","93a35bc0":"Tune hyperparameters using GridSearchCV"}}