{"cell_type":{"065a6211":"code","7679598a":"code","138b87ad":"code","e75d24c0":"code","7d8a4a14":"code","8c4ad059":"code","31e76b48":"code","0bf8e03d":"code","3d7f0c71":"markdown"},"source":{"065a6211":"import numpy as np\nimport pandas as pd\nimport os\nfrom sklearn.model_selection import KFold, GroupKFold\nfrom sklearn.linear_model import Ridge\nfrom scipy.stats import pearsonr as p\n\nimport warnings\nwarnings.filterwarnings('ignore')","7679598a":"train = pd.read_pickle('..\/input\/ump-train-picklefile\/train.pkl')[-2000000:]\nkfold = GroupKFold(n_splits=5)\nfeats = [f for f in train.columns if f not in ['time_id', 'row_id', 'target']]\ntarget = 'target'","138b87ad":"inv_means = train.groupby('investment_id')['target'].mean()\ntrain['investment_id'] = train['investment_id'].map(inv_means)","e75d24c0":"train[feats]","7d8a4a14":"fold_scores = []\nmodels = []\n\nfor fold, (trn_idx, val_idx) in enumerate(kfold.split(train[feats], train[target], groups=train['time_id'])):\n    xtrain, ytrain = train.iloc[trn_idx][feats], train.iloc[trn_idx][target]\n    xval, yval = train.iloc[val_idx][feats], train.iloc[val_idx][target]\n    \n    model = Ridge(alpha=100000, normalize=False)\n    model.fit(xtrain, ytrain)\n    val_preds = model.predict(xval)\n    \n    score = p(val_preds, yval)[0]\n    print(f\"Fold {fold + 1}: {score}\")\n    fold_scores.append(score)\n    models.append(model)","8c4ad059":"print(f\"Overall score: {np.mean(fold_scores)}\")","31e76b48":"import ubiquant\nenv = ubiquant.make_env()  \niter_test = env.iter_test()","0bf8e03d":"for (test_df, sample_prediction_df) in iter_test:\n    test_df = test_df[feats]\n    test_df['investment_id'] = test_df['investment_id'].map(inv_means).fillna(0)\n    \n    pred_0 = models[0].predict(test_df)\n    pred_1 = models[1].predict(test_df)\n    pred_2 = models[2].predict(test_df)\n    pred_3 = models[3].predict(test_df)\n    pred_4 = models[4].predict(test_df)\n    pred = (pred_0 + pred_1 + pred_2 + pred_3 + pred_4) \/ 5\n    sample_prediction_df['target'] = pred\n    env.predict(sample_prediction_df) ","3d7f0c71":"Simple ridge baseline with GroupKFold CV split by investment id. The last 2 mio rows are used for training due to memory restrictions. Investment id features are replaced with the corresponding target means.\n\nDataset is taken from: https:\/\/www.kaggle.com\/columbia2131\/speed-up-reading-csv-to-pickle"}}