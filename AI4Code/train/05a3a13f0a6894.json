{"cell_type":{"980773a2":"code","be47719f":"code","d61fa7fd":"code","6bc6177c":"code","a589c37b":"code","36134777":"code","dcbfe34c":"code","4070e196":"code","803771a5":"code","e59c8c6a":"code","d1ebd4d8":"code","8e06f543":"code","d9488f6b":"code","f049c91d":"code","1fe00016":"code","9ca7f9bf":"code","028428bd":"code","899bb862":"code","beab6810":"code","9019da81":"code","ed3a319f":"code","dac84871":"code","c6fa76ca":"code","cac16d00":"code","9b1027fe":"code","cb6832c7":"code","9fb756fc":"code","a0f914d8":"code","198f06c2":"code","9a19154a":"code","e5713ba2":"code","ce0445f3":"code","ef71e322":"code","dc24e2f6":"code","a67a0ece":"code","04afca52":"code","a794364d":"code","6dfb6529":"code","52b8d231":"code","73ba4eeb":"code","387ad107":"code","0c4ef3c9":"code","e0ae8824":"code","c8a3a9a6":"code","a3d85ce0":"code","3b692e22":"code","dc8b0a59":"code","188875f8":"code","fbc9ef71":"code","d049a9a0":"code","1308a619":"code","56fb963a":"code","4586dfa6":"code","a354a5f1":"code","fc57abdb":"code","7657b0c6":"code","6fb45bf2":"code","22be108f":"code","3d9de518":"code","26ecccc9":"code","53afac75":"code","f5c7cc3e":"code","6939d892":"code","b44f7976":"markdown","f2f2d294":"markdown","e7bc8dad":"markdown","2c131a34":"markdown","60347404":"markdown","ae5b5410":"markdown","b0f660a8":"markdown","453964b4":"markdown","18be2647":"markdown","93ae7259":"markdown","da4c1434":"markdown","1c3ee96e":"markdown","9cda887c":"markdown","72eebdf5":"markdown"},"source":{"980773a2":"import pandas as pd\n\ndf = pd.DataFrame([{'Name': 'Chris', 'Item Purchased': 'Sponge', 'Cost': 22.50},\n                   {'Name': 'Kevyn', 'Item Purchased': 'Kitty Litter', 'Cost': 2.50},\n                   {'Name': 'Filip', 'Item Purchased': 'Spoon', 'Cost': 5.00}],\n                  index=['Store 1', 'Store 1', 'Store 2'])\ndf","be47719f":"df['Date'] = ['December 1', 'January 1', 'mid-May']\ndf","d61fa7fd":"df['Delivered'] = True\ndf","6bc6177c":"df['Feedback'] = ['Positive', None, 'Negative']\ndf","a589c37b":"adf = df.reset_index()\nadf['Date'] = pd.Series({0: 'December 1', 2: 'mid-May'})\nadf","36134777":"staff_df = pd.DataFrame([{'Name': 'Kelly', 'Role': 'Director of HR'},\n                         {'Name': 'Sally', 'Role': 'Course liasion'},\n                         {'Name': 'James', 'Role': 'Grader'}])\nstaff_df = staff_df.set_index('Name')\nstudent_df = pd.DataFrame([{'Name': 'James', 'School': 'Business'},\n                           {'Name': 'Mike', 'School': 'Law'},\n                           {'Name': 'Sally', 'School': 'Engineering'}])\nstudent_df = student_df.set_index('Name')\nprint(staff_df.head())\nprint()\nprint(student_df.head())","dcbfe34c":"pd.merge(staff_df, student_df, how='outer', left_index=True, right_index=True)","4070e196":"pd.merge(staff_df, student_df, how='inner', left_index=True, right_index=True)","803771a5":"pd.merge(staff_df, student_df, how='left', left_index=True, right_index=True)","e59c8c6a":"pd.merge(staff_df, student_df, how='right', left_index=True, right_index=True)","d1ebd4d8":"staff_df = staff_df.reset_index()\nstudent_df = student_df.reset_index()\npd.merge(staff_df, student_df, how='left', left_on='Name', right_on='Name')","8e06f543":"staff_df = pd.DataFrame([{'Name': 'Kelly', 'Role': 'Director of HR', 'Location': 'State Street'},\n                         {'Name': 'Sally', 'Role': 'Course liasion', 'Location': 'Washington Avenue'},\n                         {'Name': 'James', 'Role': 'Grader', 'Location': 'Washington Avenue'}])\nstudent_df = pd.DataFrame([{'Name': 'James', 'School': 'Business', 'Location': '1024 Billiard Avenue'},\n                           {'Name': 'Mike', 'School': 'Law', 'Location': 'Fraternity House #22'},\n                           {'Name': 'Sally', 'School': 'Engineering', 'Location': '512 Wilson Crescent'}])\npd.merge(staff_df, student_df, how='left', left_on='Name', right_on='Name')","d9488f6b":"staff_df = pd.DataFrame([{'First Name': 'Kelly', 'Last Name': 'Desjardins', 'Role': 'Director of HR'},\n                         {'First Name': 'Sally', 'Last Name': 'Brooks', 'Role': 'Course liasion'},\n                         {'First Name': 'James', 'Last Name': 'Wilde', 'Role': 'Grader'}])\nstudent_df = pd.DataFrame([{'First Name': 'James', 'Last Name': 'Hammond', 'School': 'Business'},\n                           {'First Name': 'Mike', 'Last Name': 'Smith', 'School': 'Law'},\n                           {'First Name': 'Sally', 'Last Name': 'Brooks', 'School': 'Engineering'}])\nstaff_df\nstudent_df\npd.merge(staff_df, student_df, how='inner', left_on=['First Name','Last Name'], right_on=['First Name','Last Name'])","f049c91d":"import pandas as pd\ndf = pd.read_csv('census.csv')\ndf","1fe00016":"(df.where(df['SUMLEV']==50)\n    .dropna()\n    .set_index(['STNAME','CTYNAME'])\n    .rename(columns={'ESTIMATESBASE2010': 'Estimates Base 2010'}))","9ca7f9bf":"df = df[df['SUMLEV']==50]\ndf.set_index(['STNAME','CTYNAME'], inplace=True)\ndf.rename(columns={'ESTIMATESBASE2010': 'Estimates Base 2010'})","028428bd":"import numpy as np\ndef min_max(row):\n    data = row[['POPESTIMATE2010',\n                'POPESTIMATE2011',\n                'POPESTIMATE2012',\n                'POPESTIMATE2013',\n                'POPESTIMATE2014',\n                'POPESTIMATE2015']]\n    return pd.Series({'min': np.min(data), 'max': np.max(data)})","899bb862":"df.apply(min_max, axis=1)","beab6810":"import numpy as np\ndef min_max(row):\n    data = row[['POPESTIMATE2010',\n                'POPESTIMATE2011',\n                'POPESTIMATE2012',\n                'POPESTIMATE2013',\n                'POPESTIMATE2014',\n                'POPESTIMATE2015']]\n    row['max'] = np.max(data)\n    row['min'] = np.min(data)\n    return row\ndf.apply(min_max, axis=1)","9019da81":"rows = ['POPESTIMATE2010',\n        'POPESTIMATE2011',\n        'POPESTIMATE2012',\n        'POPESTIMATE2013',\n        'POPESTIMATE2014',\n        'POPESTIMATE2015']\ndf.apply(lambda x: np.max(x[rows]), axis=1)","ed3a319f":"import pandas as pd\nimport numpy as np\ndf = pd.read_csv('census.csv')\ndf = df[df['SUMLEV']==50]\ndf","dac84871":"%%timeit -n 10\nfor state in df['STNAME'].unique():\n    avg = np.average(df.where(df['STNAME']==state).dropna()['CENSUS2010POP'])\n    print('Counties in state ' + state + ' have an average population of ' + str(avg))","c6fa76ca":"%%timeit -n 10\nfor group, frame in df.groupby('STNAME'):\n    avg = np.average(frame['CENSUS2010POP'])\n    print('Counties in state ' + group + ' have an average population of ' + str(avg))","cac16d00":"df.head()","9b1027fe":"df = df.set_index('STNAME')\n\ndef fun(item):\n    if item[0]<'M':\n        return 0\n    if item[0]<'Q':\n        return 1\n    return 2\n\nfor group, frame in df.groupby(fun):\n    print('There are ' + str(len(frame)) + ' records in group ' + str(group) + ' for processing.')\n","cb6832c7":"df = pd.read_csv('census.csv')\ndf = df[df['SUMLEV']==50]","9fb756fc":"df.groupby('STNAME').agg({'CENSUS2010POP': np.average})","a0f914d8":"print(type(df.groupby(level=0)['POPESTIMATE2010','POPESTIMATE2011']))\nprint(type(df.groupby(level=0)['POPESTIMATE2010']))","198f06c2":"(df.set_index('STNAME').groupby(level=0)['CENSUS2010POP']\n    .agg({'avg': np.average, 'sum': np.sum}))","9a19154a":"(df.set_index('STNAME').groupby(level=0)['POPESTIMATE2010','POPESTIMATE2011']\n    .agg({'avg': np.average, 'sum': np.sum}))","e5713ba2":"(df.set_index('STNAME').groupby(level=0)['POPESTIMATE2010','POPESTIMATE2011']\n    .agg({'POPESTIMATE2010': np.average, 'POPESTIMATE2011': np.sum}))","ce0445f3":"df = pd.DataFrame(['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D'],\n                  index=['excellent', 'excellent', 'excellent', 'good', 'good', 'good', 'ok', 'ok', 'ok', 'poor', 'poor'])\ndf.rename(columns={0: 'Grades'}, inplace=True)\ndf","ef71e322":"df['Grades'].astype('category').head()","dc24e2f6":"grades = df['Grades'].astype('category',\n                             categories=['D', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'],\n                             ordered=True)\ngrades.head()","a67a0ece":"grades > 'C'","04afca52":"df = pd.read_csv('census.csv')\ndf = df[df['SUMLEV']==50]\ndf = df.set_index('STNAME').groupby(level=0)['CENSUS2010POP'].agg({'avg': np.average})\npd.cut(df['avg'],10)","a794364d":"#http:\/\/open.canada.ca\/data\/en\/dataset\/98f1a129-f628-4ce4-b24d-6f16bf24dd64\ndf = pd.read_csv('cars.csv')","6dfb6529":"df.head()","52b8d231":"df.pivot_table(values='(kW)', index='YEAR', columns='Make', aggfunc=np.mean)","73ba4eeb":"df.pivot_table(values='(kW)', index='YEAR', columns='Make', aggfunc=[np.mean,np.min], margins=True)","387ad107":"import pandas as pd\nimport numpy as np","0c4ef3c9":"pd.Timestamp('9\/1\/2016 10:05AM')","e0ae8824":"pd.Period('1\/2016')","c8a3a9a6":"pd.Period('3\/5\/2016')","a3d85ce0":"t1 = pd.Series(list('abc'), [pd.Timestamp('2016-09-01'), pd.Timestamp('2016-09-02'), pd.Timestamp('2016-09-03')])\nt1","3b692e22":"type(t1.index)","dc8b0a59":"t2 = pd.Series(list('def'), [pd.Period('2016-09'), pd.Period('2016-10'), pd.Period('2016-11')])\nt2","188875f8":"type(t2.index)","fbc9ef71":"d1 = ['2 June 2013', 'Aug 29, 2014', '2015-06-26', '7\/12\/16']\nts3 = pd.DataFrame(np.random.randint(10, 100, (4,2)), index=d1, columns=list('ab'))\nts3","d049a9a0":"ts3.index = pd.to_datetime(ts3.index)\nts3","1308a619":"pd.to_datetime('4.7.12', dayfirst=True)","56fb963a":"pd.Timestamp('9\/3\/2016')-pd.Timestamp('9\/1\/2016')","4586dfa6":"pd.Timestamp('9\/2\/2016 8:10AM') + pd.Timedelta('12D 3H')","a354a5f1":"dates = pd.date_range('10-01-2016', periods=9, freq='2W-SUN')\ndates","fc57abdb":"df = pd.DataFrame({'Count 1': 100 + np.random.randint(-5, 10, 9).cumsum(),\n                  'Count 2': 120 + np.random.randint(-5, 10, 9)}, index=dates)\ndf","7657b0c6":"df.index.weekday_name","6fb45bf2":"df.diff()","22be108f":"df.resample('M').mean()","3d9de518":"df['2017']","26ecccc9":"df['2016-12']","53afac75":"df['2016-12':]","f5c7cc3e":"df.asfreq('W', method='ffill')","6939d892":"import matplotlib.pyplot as plt\n%matplotlib inline\n\ndf.plot()","b44f7976":"---\n\n_You are currently looking at **version 1.0** of this notebook. To download notebooks and datafiles, as well as get help on Jupyter notebooks in the Coursera platform, visit the [Jupyter Notebook FAQ](https:\/\/www.coursera.org\/learn\/python-data-analysis\/resources\/0dhYG) course resource._\n\n---","f2f2d294":"### Converting to Datetime","e7bc8dad":"# Merging Dataframes\n","2c131a34":"### PeriodIndex","60347404":"# Group by","ae5b5410":"# Pivot Tables","b0f660a8":"### Timestamp","453964b4":"# Idiomatic Pandas: Making Code Pandorable","18be2647":"# Scales","93ae7259":"### Working with Dates in a Dataframe","da4c1434":"### Timedeltas","1c3ee96e":"### DatetimeIndex","9cda887c":"# Date Functionality in Pandas","72eebdf5":"### Period"}}