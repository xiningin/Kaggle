{"cell_type":{"69a59682":"code","21b272f2":"code","7471097d":"code","bd13e301":"code","b7a86f9b":"code","9d8591e0":"code","df008565":"code","38050509":"code","fe1a4b49":"code","0cc450f8":"code","2e52cd49":"code","9d1be674":"code","beb8f695":"code","19a4cee9":"code","ab959f9c":"code","14ad3a73":"code","317c560f":"code","9983a112":"code","ba3a043d":"code","de7211b9":"code","638f417e":"code","414504fc":"code","f31727ff":"code","304370e7":"code","2bcc2cb4":"code","fe754899":"code","f137aea9":"code","4687006b":"code","8bd33afd":"markdown","25683f90":"markdown","f992dda8":"markdown","62327073":"markdown","61d9119e":"markdown","74ca14ab":"markdown","df073867":"markdown","6969128a":"markdown","fc3a2056":"markdown","d5257de4":"markdown","a80db897":"markdown","ba7c001c":"markdown","d088ff0f":"markdown","b82dcc24":"markdown","e2265916":"markdown","736f89ca":"markdown","b9e6f5bf":"markdown","b04b11f0":"markdown","afd6e1e0":"markdown","5b6d3d1f":"markdown","ecdbf258":"markdown","ee16009a":"markdown","d432d604":"markdown","e39df119":"markdown","74019b35":"markdown","ad21828f":"markdown","0d43ce1a":"markdown","25f5fd02":"markdown"},"source":{"69a59682":"print(\"Hello world!\")\nprint(f'Hello world!') #formating","21b272f2":"# variable priniting:\nname='Kaggle'\nold=21","7471097d":"fname,lname=\"john\",\"doe\"\nprint(f'welcome {fname} {lname}!')","bd13e301":"# basic data types\n\ntext= 'kaggle'\nnumeric_int= int(9.123) # prints only 9. this is called casting\nnumeric_float= float(22.22)\nbool(True)        # uppercase of True\/False is a must : True,False,None\n\n#sequence types:\ngrocery_list =[\"apple\",\"cake\",\"vegetables\"]\ngrocery_tuples=(\"milk\",\"essential items\")  # cannot be modified\ngrocery_set={\"redchilli\",\"turmeric\",\"sauce\"}\nnumber_list=range(4)\n\n#dictinoary:\n# name of dict ={key:value}\nphone_book={\"kaggle\":22209,\"colab\":90882}","b7a86f9b":"# :::  list :::\n\n# list can have duplicates.\nspeed=[1,2,1,1,3]\ntypeofcar=['mz','sant','mz','mz','bhu']  # remember, the values are strings.\n\n# to get the first value from the list: the process of indexing and getting the value.\nprint(speed[0])\n\n# to get all values from the list:\nprint(speed[0:]) \n\n# to get a specific section of the list:\nprint(typeofcar[2:4])\n\n# to get the last value:\nprint(speed[-1])\n\n#reverseing a list\nprint(typeofcar[::-1])\n\n#mixed list\nmixedlist=[1,1,'mz',2,'3','bhu',True]\n\n\n# change item in list\nmixedlist[0]=\"I am new to this list!\"\n\n# insert item in list\nmixedlist.insert(1,\"using insert, i am here!\")\n\n#add items in list\nmixedlist.append(\"lastmember\") # append always works at last\n\n#extend list\nlist1=[\"apple\",\"mango\"]\nlist2=[\"onions\",\"tomato\"]\n\n\nprint(list1+list2)       #adding two lists\nnew_list=[*list1,*list2] # new to create a lists with two lists. \nprint(new_list)\n\n# remove item in list\nvortex=[\"spiral\",\"cyclone\",\"circularair\",\"storm\"]\nprint(vortex.remove(\"cyclone\")) # if index inside the remove parameter is not mentioned, by default it removes the last item\n\n# clear the list items:\nvortex.clear()\n\n#sort list\nages_of_students=[22,19,20,21,21,23,18]\nprint(ages_of_students.sort())            #asecending\nprint(ages_of_students.sort(reverse=True)) #descending\n\n#count items\nprint(len(ages_of_students)) #  gives the lenght of the list which is nothing but the count of items","9d8591e0":"new_tuple=(\"red\",\"blue\",\"violet\",\"green\") # we cannot change the items \n# if we want to change values, we need to convert to list and work with that.\nlist_type_new_tuple=list(new_tuple)\nlist_type_new_tuple[0]=\"magneta\"\nnew_tuple=tuple(list_type_new_tuple)\nprint(new_tuple)\n\n#multiplying values\nmoney=(10,50,100)*2 # the tuple creates a another tuple value (2) inside the same tuple\nprint(money)","df008565":"new_set={\"cars\",\"furniture\",\"monitors\",\"speakers\"}\n# to acces items ,we can use for loop we will deal with for loops later. \n# to check wheather an item is in the list\nprint(\"cars\" in new_set) \n\n# to add items in set\nnew_set.add(\"headsets\")\nnew_set.update({\"screen proctector\",\"mouse\"})\nprint(new_set)\n\n# to remove set items\nnew_set.remove(\"mouse\")\nnew_set.clear()\n\n#union sets\nA={\"audi\",\"bmw\",\"benz\"}\nB={\"audi\",\"caterham\",\"lexsus\"}\nA_U_B=A.union(B)\nprint(A_U_B)\n\n#Intersection sets\nA_intersection_B=A.intersection(B)\nprint(A_intersection_B)\n\n# Symmetric difference\nsym_diff_A_B=A.symmetric_difference(B)\nprint(sym_diff_A_B)\n\n#isdisjoint\n#issubset\n#isuperset\n","38050509":"robo={\n    \"name\":'ASIMOV',\n    \"production\":\"AK LABS\",\n    \"year\":2020\n}\n\nprint(\"to get the value for specific variable :\",robo[\"name\"])\n# to list all the keys for the particular dictionary:\nprint(robo.keys()) \nprint('\\n') # this creates a new line\nkeys_from_robo=robo.keys() # you can also store it \n\n#to get values:\nvalues_from_robo=robo.values()\nprint(\"The keys are :\",keys_from_robo,\"The values are :\",values_from_robo)\n\n#to modify values:\nrobo[\"name\"]=\"megatron\"\nprint(\"After modifying :\",robo,\"\\n\")\n\n#to add items:\nrobo[\"alive status\"]=\"its alive!\"\nprint(\"After adding a extra variable :\",robo)\n\n#to remove items:\nrobo.pop(\"year\")\nprint(\"After removing the year\",robo)\n\n#to remove clear dictinoary :\nprint(\"Cleared :\",robo.clear()) # the dictionary is deleted\n\n# nested dictionary:\n\ndetails_of_area1={\n        \"person1\":\"kaggale\",\n        \"lives\":\"LA\"    \n                 }\n\ndetails_of_area2={\n        \"person2\":\"jhon doe\",\n        \"lives\":\"CA\"\n                  }\ncity={\n    \"area1\":details_of_area1,\n    \n    \"area2\":details_of_area2\n    \n    \n}\n\nprint(\"Nested dictinoary\",city)","fe1a4b49":"# add strings:\nfirst_name='Tom'\nlast_name='Cruise'\nactor=first_name+last_name\n\n# change of types:\ntxt_number=\"333\" # str type\nprint(int(txt_number)) # changes to int type. Easy for doing calculations. the str format is not capable of performing math\n\n# to change to upper \ntxt_city1=\"india\"\nprint(txt_city1.upper())  \n# to change to lower\ntxt_city2=\"BHUTAN\"\nprint(txt_city2.lower())\n\n# txt sclicing:\nyear_month=\"2020JUNE\"\nyear=year_month[0:4]  # [0:4] means, 0 till 4 (4 th will not be inlcuded). 0,1,2,3.So, in string, it selects only 0 to 4 that is, only the year is selected \nprint(f'The year is{int(year)}') # here the year is closed with int for casting. now its a integer type.","0cc450f8":"print(\"addition and subtraction\")\nx=5+6\ny=x-10\nprint(\"x :\",x,\"y :\",y)\n\nprint(\"Multiplicatiion\")\nz=(-3)*y\nprint(\"z :\",z)\n\nprint(\"Divion :\")\nv=10%2\nu=10\/2\nw=10\/\/2\nprint(\"modulus operator :\",v)\nprint(\"Division :\",u)\nprint(\"Floor division:\",w)\n\nprint(\"pwoer of\")\np=4**2\nprint(\"4 square is :\",p)\n\nprint(\"adcanced method :\")\nx+=1 # similar to x=x+1","2e52cd49":"#Comparision operators\nprint(f\"Comparision operators\")\nx==y #equaltiy\nx!=y # not equal\nx > y # greater than\nx < y # less than\nx<=y # less than equal to","9d1be674":"# logical operatos\nprint(f'Identity operators')\nx=7\nprint(x>5 and x<10)\nprint(x<5 or  x >5)\nprint(not( x>5 or x<10  ))","beb8f695":"#identity operators\nprint(\"Identity operators\")\nage1=21\nage2=22\nprint(age1 is age2)\nprint(age2 is not age1)","19a4cee9":"# simple for loop\n\nfor i in range(0,5):\n    print(\"The loop ran :\",i)\n# with step value:\nprint(\"\\n\")\nfor i in range(0,10,2):\n    # step value =2. jumps 2 values . by default,the step value is 1.\n    print(\"value in the loop\",i)\nprint(\"\\n\")\n# for lists :\nv=[2,3,4,5]\nfor i in range(len(v)):\n    print(v[i])\nprint(\"\\n\")\n#breaking!\nfor i in range(0,10):\n    print(\" After 1, the loop is breaks out. Bacause it has the break statement with it. \\n Can be embededd with if else or other conditons !\")\n    break\nprint(\"\\n\")\nfor i in v:\n    print(\"values fetched:\",i)\n    \nprint(\"\\n\")\n\n#list comprehension:\nlist_comp=[x for x in range(0,10)]\nprint(list_comp)\nprint(\"\\n\")\n# multiple looping :\nusers=[\"don\",\"brad\",\"tom\"]\nsnacks=[\"pizza\",\"burger\",\"vadai\"]\nfor particular_user in users:\n    print(f'The current user is :{particular_user}')\n    for indexer in range(len(snacks)):  # its efficient to write : 'for particluar_snacks in snacks:'\n        print(f'Now the the user {particular_user} eats :{snacks[indexer]}')\nprint(\"\\n\")\n\n# if for loops has nothing to do with :\nfor i in range(0,5):\n    pass # a for loop cant be empty . pass statements passes on the next iteration","ab959f9c":"# basic if else\na=10\nb=12\n\nif a > b:\n    print(\" A is greater\")\nelse:\n    print(\"A is small\")\n\n# if else in list comprehension:\neven_list=[ x for x in range(0,10) if x%2==0]\nprint(\" The list comp :\",even_list)\n\n#else if\nvolume=200\ncapacity=3000\nif volume < capacity:\n    print( \"test 1: basic weight added, passed\")\n    if volume+100 < capacity:\n        print(\"test 2: added extra weight, also passed!\")\n    else:\n        print(\" dont add extra weight!\")\nelse:\n    print(\" Not even holding standard weight! \")\n    \nif volume > capacity:\n    print(\"passed!\")\nelif volume+2000:   # extra if condition\n    print(\" added 2000 and exceed the capacity !\")\nelse:\n    print(\"irregular capacity\")","14ad3a73":"#basic while loop\ncount=0\nwhile count < 5:\n    print(count,\":>> okay pract is less than 5\")\n    count+=1\nprint(\"\\n\")\n#while with if:\ncounter=0\nwhile counter <10:\n    print(\" In loop value :\",counter)\n    if counter <=3:\n        print(\"the loop broke at the value \",counter)\n    else:\n        print(\"Argh! the value is going up beyond our conditon! Break now!\")\n        break\n    counter+=1\nprint(\"\\n\")\n\n# with continue statement:\nxi=0\nwhile xi <10:\n    xi+=1\n    if xi%2!=0:\n        print(\"odd value :\",xi)\n    else:\n        print(\"even value, never mind!\")\n        continue\n        # nothing wont be taken after this block\n        print(\" this wont show up!\")\n    \n","317c560f":"def greet(name):\n    msg=\"welcome \"+name\n    return msg\ngreet(\"Jerry\") # this will have return value but nothing cant be done unless we assign or print it out\nprint(greet(\"Tomas\"))\nspike=greet(\"Spike\") # Assigning the return value\nprint(spike)\n\ndef email(prefix,org):\n    complete_email=\" the complete email is : \"+prefix+org\n    return complete_email # without return stateement, it prodcues none.\nmyemailid_prefix='jackie.chan'\nmy_org='@cartoon.com'\n\njackiemail=email(myemailid_prefix,my_org)\nprint(\"Here is\",jackiemail)\n\n# math:\ndef circle_area(radius):\n    area=22\/7*radius**2\n    return area   # also straight away : return 22\/7*radius**2\nmy_newcircle=circle_area(4)\nprint(round(my_newcircle,3)) # round of takes ( number , no.of.digits to be rounded)\n","9983a112":"squarefunc = lambda val : val**2\nsquared_value= squarefunc(5)\nprint(squared_value)\n\narea_rectangle=lambda l,b: l*b\nprint(area_rectangle(10,90))","ba3a043d":"# basic class\nclass helloworld:\n    msg=\"hello there!\"\nnewmsg=helloworld() # create an object\nprint(newmsg.msg) # the value of msg for the object newmsg\n\n#class using init\n\nclass robot:\n    def __init__(self,name,company): # this is called a contructor\n        self.name=name # instance \n        self.company=company\n        self.about=\"The robo name is : \"+self.name+\" and created in the company \"+self.company\n        \n    def speak(self):   # inheritence\n        return \"THE WORLD NEEDS YOU, \"+self.name\n        \nrobot1=robot(\"Barbara\",\"Honda\")\nprint(robot1.about)\nprint(robot1.speak())\n\n","de7211b9":"class  animal:\n    def __init__(self,steps,speak):\n        self.steps=steps\n        self.speak=speak\n    def walk(self):\n        return self.steps +\" takes\"\n    def talk(self):\n        return self.speak+\" hello\"\n    def typeofeye(self,eye):\n        self.eye=eye\n        return self.eye+\" shape\"\n    \n    \ndog=animal(\"10\",\"Dungen!\")\nprint(dog.walk())\nprint(dog.talk())\nprint(dog.typeofeye(\"round\"))\n","638f417e":"min_vale = min(125, 12220, 25)\nmax_value = max(2325, 14233242350, 2353579065)\nabs_value = abs(-733434.2232324235363634656456)\npowerof= pow(4, 3) # 4*4*4\n\nimport math\nx = math.sqrt(64)\n\nx = math.ceil(1.4) # uper round\ny = math.floor(1.4) # lower round","414504fc":"import re\na_msg=\"Here the world needs peace!\"\nreqs=re.search(\"\\AHere\",a_msg) # begining\nprint(reqs)","f31727ff":"try:\n    a=5\n    b='0'\n    print (a+b)\nexcept TypeError:\n    print('Error has happened here beacuse of TypeError')\n\n","304370e7":"def area(x,y):\n    assert x >=0,'Arh! -ve!'\n    return x*y\ntry:\n    print(\"Attempt1 : \",area(12,12))\n    print(\"Attempt2: \",area(-2,-2))\nexcept AssertionError as consider:\n    print(consider)","2bcc2cb4":"\n\ndef square(x):\n    assert x>=0, 'Only positive numbers are allowed'\n    return x*x\n\ntry:\n    square(-2)\nexcept AssertionError as msg:\n    print(msg)\n\n","fe754899":"def something(fn):\n    def inner_function():        \n        fn()\n        print('How are you?')\n    return inner_function\n\n@something\ndef greet():\n    print(\"Hi there! \")\ngreet()","f137aea9":"class Student:\n    \n    def __init__(self,h,w):\n        self.height = h  # instance attribute\n        self.weight=w\n\n    @classmethod\n    def bmi(cls):\n        return cls(160,50)\n    \n        \nnewobj=Student.bmi()\nnewobj.height","4687006b":"\n\nclass Student:\n    name = 'unknown' # class attribute\n    \n    def __init__(self):\n        self.age = 20  # instance attribute\n\n    @staticmethod\n    def tostring():\n        print('Student Class')\n\nStudent.tostring() # one way\n\nstd = Student() # alternative way\nstd.tostring()\n","8bd33afd":"# SQLITE CURD operations\nhttps:\/\/www.tutorialsteacher.com\/python\/database-crud-operation-in-python","25683f90":"# Strings","f992dda8":"# For loop","62327073":"# Multiple assignment variables","61d9119e":"# Operators \n","74ca14ab":"# print statement","df073867":"# Error handling","6969128a":"## Some common python errors:\n1. SyntaxError\nRaised when the syntax of the loop such as missing a ':\", missing key words such as 'in', 'range'\n2.IndentationError\nRaised when 4 space is not provided properly for the blocks. \n3.TypeError\nRaised when inncorrect operation of different type of variable. To check type of the variable, use (type (var_name))\n4.IndexError\nRaised when the index reaches beyond the specified limit. Offen occurs in loop range given more than the list range\n5.ImportError\nRaised when the file is not imported properly.Check the path or check wheather the module is installed properly\n6.ValueError\nRaises when the function argument is given wrongly.\n7.NameError\nRaises when the variable is not defined. Possibly due to spelling mistakes\n\nIf we know where the error is going to happen, we can use 'try except' \n","fc3a2056":"### @classmethod","d5257de4":"# Regx\nhttps:\/\/www.w3schools.com\/python\/python_regex.asp","a80db897":"# Data types","ba7c001c":"# Assertion\nThis comes handy when we specify a condtion to be true and evalue after that.Failing to meet the requirements results in AsssertionError","d088ff0f":"# Functions","b82dcc24":"# Lambda function\nIts a anonymous function, small and has only a single expression","e2265916":"### @property","736f89ca":"# Python from scratch","b9e6f5bf":"# If Else","b04b11f0":"# Sets\n* Unorderd,no definite order\n* referencing using index wont work\n* Items cannot be changed\n* Duplications are not allowed","afd6e1e0":"# Math","5b6d3d1f":"# Dictinoary items\ndictName= { key : value ,... }","ecdbf258":"### @staticmethod","ee16009a":"# Variable ","d432d604":"# While loop","e39df119":"# Lists","74019b35":"# Tuples\n* Tuples have definite order and it will not change\n* Allows duplicates\n* Tuples are unchangeable and we cannot change, add or remove items after the tuple has been created.\n* Tuples are indexed, they can have items with the same value:","ad21828f":"# Decorators\nAdding additional responsibilites whithout modifying the function.\nHere the something function is added with a extra fucntion '@something' and writing a another new function without modifying","0d43ce1a":"### Naming conventions:\n* Start with alphabets preferbly.\n* Name it so that it means something to that you assign. \n* Try Avoid using variables like 'x','y' beacause it doesnt mean anything and the code will look ugly","25f5fd02":"# Classes and objects"}}