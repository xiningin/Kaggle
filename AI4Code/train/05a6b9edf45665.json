{"cell_type":{"d2b5d269":"code","e87f83bd":"code","3227dc62":"code","f9f6c395":"code","efe07912":"code","3331184b":"code","d6e8e9f0":"code","ee54aadb":"code","06a84424":"code","5e512cfe":"code","20aa207b":"code","e9a25ee0":"code","f7764d5f":"code","74504ac3":"code","01d0e884":"code","3b09a95f":"code","ae69d0df":"code","aca4337d":"code","98033c38":"code","c004a6ff":"code","c2d7cee1":"code","231cde4c":"code","65bbbba8":"code","6908013a":"code","1a425c43":"code","0cf5786c":"code","89c1c873":"code","789c660e":"code","f4fa1656":"code","28033c0f":"code","506d57af":"code","653eee75":"markdown","846c1301":"markdown","5b00ca6e":"markdown","d438a882":"markdown","589c036a":"markdown","5e8c3e7d":"markdown","f4a689ce":"markdown","cbad25f5":"markdown","36afd683":"markdown","e71369e8":"markdown","03a8d44a":"markdown","9aa911a2":"markdown","b43f39b7":"markdown","4272f73d":"markdown","19e503b6":"markdown","03cb8c16":"markdown","2f13d75e":"markdown","d5189091":"markdown","d73dcc77":"markdown","62ed12ab":"markdown","fb2c246b":"markdown","095f7b09":"markdown"},"source":{"d2b5d269":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e87f83bd":"data = pd.read_csv('..\/input\/CustomerData.csv')\ndata.head()","3227dc62":"# !pip install pandas_profiling\nimport pandas_profiling as pp\npp.ProfileReport(data)","f9f6c395":"data1 = data.drop(['CustomerID','NoOfGamesBought','NoOfUnitsPurchased'] , axis=1)\ndata1.head()","efe07912":"corr = data1.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","3331184b":"missing = data1.isnull().sum(axis=0).reset_index()\nmissing.columns = ['column_name', 'missing_count']\nmissing['missing_ratio'] = (missing['missing_count'] \/ data1.shape[0])*100\nmissing.sort_values(by='missing_ratio', ascending=False)","d6e8e9f0":"data1.dtypes","ee54aadb":"cat_cols = ['FavoriteChannelOfTransaction','FavoriteGame']\nfor c in cat_cols:\n    data1[c] = data1[c].astype('category')\ndata1.dtypes","06a84424":"import seaborn as sns\nsns.distplot(data1['TotalRevenueGenerated'])\nprint(\"Skewness: %f\" % data1.TotalRevenueGenerated.skew())\nprint(\"Kurtosis: %f\" % data1.TotalRevenueGenerated.kurt())","5e512cfe":"data1['log_Revenue']=np.log(data1['TotalRevenueGenerated'])\ndata1.drop('TotalRevenueGenerated',axis=1,inplace=True)","20aa207b":"sns.distplot(data1['log_Revenue'])\nprint(\"Skewness: %f\" % data1.log_Revenue.skew())\nprint(\"Kurtosis: %f\" % data1.log_Revenue.kurt())","e9a25ee0":"#BOXPLOTS\nimport matplotlib.pylab as plt\nimport seaborn as sns\n%matplotlib notebook\nfig, axs = plt.subplots()\nsns.boxplot(data=data1,orient='h',palette=\"Set2\")\nplt.show()","f7764d5f":"q75, q25 = np.percentile(data1[\"NoOfGamesPlayed\"], [75 ,25])\niqr = q75-q25\nprint(\"IQR\",iqr)\nwhisker = q75 + (1.5*iqr)\nprint(\"Upper whisker\",whisker)","74504ac3":"data1=pd.DataFrame(data1)\ndata1[\"NoOfGamesPlayed\"] = data1[\"NoOfGamesPlayed\"].clip(upper=whisker)","01d0e884":"fig, axs = plt.subplots()\nsns.boxplot(data=data1,orient='h',palette=\"Set2\")\nplt.show()","3b09a95f":"q75, q25 = np.percentile(data1[\"FrequencyOFPlay\"], [75 ,25])\niqr = q75-q25\nprint(\"IQR\",iqr)\nwhisker = q75 + (1.5*iqr)\nprint(\"Upper whisker\",whisker)","ae69d0df":"data1=pd.DataFrame(data1)\ndata1[\"FrequencyOFPlay\"] = data1[\"FrequencyOFPlay\"].clip(upper=whisker)","aca4337d":"fig, axs = plt.subplots()\nsns.boxplot(data=data1,orient='h',palette=\"Set2\")\nplt.show()","98033c38":"data1.dtypes","c004a6ff":"data2 = pd.get_dummies(data1,columns = [\"FavoriteChannelOfTransaction\",\"FavoriteGame\"],drop_first=True)\ndata2.head()","c2d7cee1":"X = data2.copy().drop(\"log_Revenue\",axis=1)\ny = data2[\"log_Revenue\"]","231cde4c":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.30)","65bbbba8":"x_train.iloc[:,:8].head()","6908013a":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(x_train.iloc[:,:8])\n\nx_train.iloc[:,:8] = scaler.transform(x_train.iloc[:,:8])\nx_test.iloc[:,:8] = scaler.transform(x_test.iloc[:,:8])","1a425c43":"x_train.head()","0cf5786c":"x_test.head()","89c1c873":"#LINEAR MODEL\nfrom sklearn import linear_model\nlinear = linear_model.LinearRegression()\nlinear.fit(x_train, y_train)\n\npreds_test = linear.predict(x_test)\npreds_test1= np.exp(preds_test)\n","789c660e":"from sklearn.metrics import mean_squared_error","f4fa1656":"lr_mse = mean_squared_error(preds_test, y_test)\nlr_rmse = np.sqrt(lr_mse)\nprint(\"Linear Regression MSE on val: %.4f\" %lr_mse)\nprint('Linear Regression RMSE on val: %.4f' % lr_rmse)","28033c0f":"def mape(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","506d57af":"print('mape:',mape(y_test, preds_test))","653eee75":"By using *pandas.profiling* let us know the No 0f varibles, Distinct count in the varible, min, max, **Missing Values**, Null values if any, Type of Distrubution, **Correlated varibles**, **Skewness** within the varibles","846c1301":"By using Log Transfromation reduceing the targert varible skewness","5b00ca6e":"Scaling the varibles","d438a882":"Checking Target varible skewness after transformation","589c036a":"Checking the Missing Values from data","5e8c3e7d":"MSE(Mean Squared Error) and RMSE(Root Mean Square Error)","f4a689ce":"Removing outlier above the upper whisker\n","cbad25f5":"Modeling","36afd683":"Splitting data","e71369e8":"As we dont have direct function to find mape so here is the custom function to find MAPE","03a8d44a":"Checking again for outliers if any ","9aa911a2":"Copying the target varible to y and independent varible to x","b43f39b7":"CustomerId is **Distinct varible**\nNoOfGamesBought is highly **correlated** with FrequencyOfPurchase\nNoOfUnitsPurchased is highly **correlated** with FrequencyOfPurchase\n\nso these columns are dropping form the data","4272f73d":"Checking for the outliers","19e503b6":"**Before Transformation**                     \nSkewness: 2.944832\nKurtosis: 13.557513\n**After Log Transformation**\nSkewness: 1.182815\nKurtosis: 1.433952","03cb8c16":"Checking types of the data","2f13d75e":"Checking the correlation plot","d5189091":"Reading the data","d73dcc77":"Removing the samples above INTER QUARTILE RANGE","62ed12ab":"Checking For Skewness in the Target Varible","fb2c246b":"Converting Columns to Category","095f7b09":"Creating Dummies for Categorical Varibles"}}