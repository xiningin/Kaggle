{"cell_type":{"92b8d510":"code","2c463c5f":"code","a1142cb2":"code","12f8019a":"code","c3ffe2d7":"code","4f8997cb":"code","15abfc9b":"code","e2c1ea4f":"code","4e868ddf":"code","68fbb42b":"code","601b5754":"code","44294cf3":"code","7323cd29":"code","8ad85c29":"code","bf497731":"code","df9c26fd":"code","0ab88312":"code","f9f69459":"code","a9c25386":"code","3dbc1907":"code","c6b97a70":"code","c51d6dc3":"code","066421e0":"code","1d00f5d5":"code","61b41016":"code","e58aec06":"code","d2f96a22":"code","02a18eba":"code","fe34b1d0":"code","352b27ac":"code","9709bbf9":"code","e95338c0":"code","92efd843":"markdown","db478b49":"markdown","8917ebb5":"markdown","cf03f8e8":"markdown","4ecc6840":"markdown","33ba3118":"markdown","76c3ff2a":"markdown","af3a2877":"markdown","5c61cbc3":"markdown","ad730a97":"markdown","e5535613":"markdown"},"source":{"92b8d510":"# import libraries\nimport gzip\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import tree\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix, plot_confusion_matrix\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor","2c463c5f":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a1142cb2":"#!kaggle competitions download -c commonlitreadabilityprize","12f8019a":"# get the train data\ntrain = pd.read_csv('..\/input\/commonlitreadabilityprize\/train.csv')\ntrain.head()","c3ffe2d7":"# split the train data into the X and y\nX = train['excerpt']\ny = train['target']","4f8997cb":"# get the test data\ntest = pd.read_csv('..\/input\/commonlitreadabilityprize\/test.csv')\ntest.head()","15abfc9b":"# split the data into the train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","e2c1ea4f":"# create a list to collect the scores\nscores = []","4e868ddf":"# define the classifier\nclassifier_1 = Pipeline([\n    (\"vect\", TfidfVectorizer(min_df=3)),\n    (\"logreg\", LinearRegression())\n])","68fbb42b":"# fit the data\nclassifier_1.fit(X_train, y_train)","601b5754":"# get the score on test data\nscore_1 = classifier_1.score(X_test, y_test)\nscores.append(score_1)\nscore_1","44294cf3":"# define the classifier\nclassifier_2 = Pipeline([\n    (\"vect\", TfidfVectorizer(min_df=3, ngram_range = (1, 2))),\n    (\"logreg\", LinearRegression())\n])","7323cd29":"# fit the data\nclassifier_2.fit(X_train, y_train)","8ad85c29":"# get the score on test data\nscore_2 = classifier_2.score(X_test, y_test)\nscores.append(score_2)\nscore_2","bf497731":"# define the classifier\nclassifier_3 = Pipeline([\n    (\"vect\", TfidfVectorizer(min_df=3)),\n    (\"ridgereg\", Ridge())\n])","df9c26fd":"# fit the data\nclassifier_3.fit(X_train, y_train)","0ab88312":"# get the score on test data\nscore_3 = classifier_3.score(X_test, y_test)\nscores.append(score_3)\nscore_3","f9f69459":"# define the classifier\nclassifier_4 = Pipeline([\n    (\"vect\", TfidfVectorizer(min_df=3)),\n    (\"ridgereg\", AdaBoostRegressor(Ridge()))\n])","a9c25386":"# fit the data\nclassifier_4.fit(X_train, y_train)","3dbc1907":"# get the score on test data\nscore_4 = classifier_4.score(X_test, y_test)\nscores.append(score_4)\nscore_4","c6b97a70":"# define the classifier\nclassifier_5 = Pipeline([\n    (\"vect\", TfidfVectorizer(min_df=3)),\n    (\"ridgereg\", Ridge(alpha = 0.95))\n])","c51d6dc3":"# fit the data\nclassifier_5.fit(X_train, y_train)","066421e0":"# get the score on test data\nscore_5 = classifier_5.score(X_test, y_test)\nscores.append(score_5)\nscore_5","1d00f5d5":"# define the classifier\nclassifier_6 = Pipeline([\n    (\"vect\", TfidfVectorizer(min_df=3)),\n    (\"randomforest\", RandomForestRegressor())\n])","61b41016":"# fit the data\nclassifier_6.fit(X_train, y_train)","e58aec06":"# get the score on test data\nscore_6 = classifier_6.score(X_test, y_test)\nscores.append(score_6)\nscore_6","d2f96a22":"# define the classifier\nclassifier_7 = Pipeline([\n    (\"vect\", TfidfVectorizer(min_df=3)),\n    (\"XGBRegressor\", XGBRegressor(n_estimators = 500, learning_rate=0.05))\n])","02a18eba":"# fit the data\nclassifier_7.fit(X_train, y_train)","fe34b1d0":"# get the score on test data\nscore_7 = classifier_7.score(X_test, y_test)\nscores.append(score_7)\nscore_7","352b27ac":"# take a look at all results in one place\nalgorithms = ['LinearRegression','LinearRegression (n-grams)','Ridge Regression','AdaBoostRegressor','Ridge Regression (with alpha 0.95)','RandomForest','XGBRegressor']\nscores_table = pd.DataFrame({'Algorithm' : algorithms, 'Score' : scores})\nscores_table","9709bbf9":"# predict with Ridge Regression (0.95)\npred_test = classifier_5.predict(test['excerpt'])","e95338c0":"# create submission file\nsubmission = pd.DataFrame({'id' : test['id'], 'target' : pred_test})\nsubmission.to_csv('\/kaggle\/working\/submission.csv', index=False)\nsubmission.head()","92efd843":"## Classifier #4\n## with TfidfVectorizer and AdaBoostRegressor","db478b49":"In this notebook we will use only excerpt (X) and target (y) columns. So at this stage we don't need other columns.","8917ebb5":"**For all models we will use TfidfVectorizer(), algorithm that convert a collection of text documents to a matrix of TF-IDF features. For this case we are interested in words that occur in at least 3 documents.**","cf03f8e8":"## Classifier #3\n## with TfidfVectorizer and Ridge Regression","4ecc6840":"## Classifier #5\n## with TfidfVectorizer and Ridge Regression (with alpha 0.95)","33ba3118":"## Classifier #6\n## with TfidfVectorizer and RandomForest","76c3ff2a":"## CommonLit Readability: simple preprocessing and models to start with","af3a2877":"## Classifier #2 \n## with TfidfVectorizer (+ n-grams) and LinearRegression","5c61cbc3":"## Final results and model selection","ad730a97":"## Classifier #1 \n## with TfidfVectorizer and LinearRegression","e5535613":"## Classifier #7\n## with TfidfVectorizer and XGBRegressor"}}