{"cell_type":{"491efb62":"code","8ec50b66":"code","1ffd8bb2":"code","3234b828":"code","ca1cfcda":"code","76f245d8":"code","245c3dbe":"code","94d21fe9":"code","5b7c1e29":"code","40240eb0":"code","8ef3d8c0":"code","2b5caa42":"code","f2c69a0e":"code","d2a5987b":"code","66d08055":"code","ba7e13a1":"code","084f5e12":"code","d2c406f7":"code","37fd5f80":"code","13e97648":"code","8750093b":"code","b9c8d484":"code","d8b54650":"code","3ae9ac75":"code","3e535df4":"code","7637e608":"code","58153ff4":"code","00f916c2":"code","9a882905":"code","4335e3c9":"code","b5412045":"code","d1cea39e":"code","564d2ea7":"code","e609daa5":"code","7c1de310":"code","c418e2b8":"code","52290ac5":"code","bab33b9f":"code","b22dddde":"markdown","e433a364":"markdown","dc990a2e":"markdown","82121310":"markdown","22343715":"markdown","6720edc4":"markdown","7fd5e47b":"markdown","391f7193":"markdown","7ad9eb8a":"markdown","aace88c8":"markdown","25e93813":"markdown","ba694aa3":"markdown","ad1eaad2":"markdown","bd0512f2":"markdown","99715768":"markdown","25c3fcfb":"markdown","ae1b857c":"markdown","11983bb5":"markdown","eaf61e9c":"markdown","661a237b":"markdown","f358e144":"markdown","4febe21e":"markdown","5bed60e5":"markdown","40c560b1":"markdown","da82af97":"markdown","84fa8098":"markdown","800d0e03":"markdown","ed41c303":"markdown","c0273aa7":"markdown"},"source":{"491efb62":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","8ec50b66":"from sklearn.model_selection import train_test_split\nfrom sklearn import metrics","1ffd8bb2":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder","3234b828":"train = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\ntest = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')","ca1cfcda":"train.head()","76f245d8":"train.describe().T","245c3dbe":"train.info()","94d21fe9":"train.isnull().sum()","5b7c1e29":"X, y = train.drop(['SalePrice', 'Id'], axis=1), train['SalePrice'] # the Id column seems unnecessary\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)","40240eb0":"X_test = test.drop(['Id'], axis=1)","8ef3d8c0":"features = X.columns\ncategorical = [feature for feature in features if X[feature].dtype == 'object']\nnumerical = list(set(features)-set(categorical))","2b5caa42":"def create_pipeline(model):\n    numerical_transformer = SimpleImputer(strategy='mean')\n    categorical_transformer = Pipeline(steps=[\n        ('imputer', SimpleImputer(strategy='most_frequent')),\n        ('onehot', OneHotEncoder(handle_unknown='ignore'))\n    ])\n    \n    preprocessor = ColumnTransformer(\n        transformers=[('num', numerical_transformer, numerical),\n                      ('cat', categorical_transformer, categorical)],\n        sparse_threshold=0)\n    \n    return Pipeline(steps=[('preprocessor', preprocessor),\n                           ('model', model)\n                          ])","f2c69a0e":"def evaluate(y_true, y_pred):\n    mae = metrics.mean_absolute_error(y_true, y_pred)\n    mse = metrics.mean_squared_error(y_true, y_pred)\n    r2 = metrics.r2_score(y_true, y_pred)\n    return mae, mse, r2","d2a5987b":"from sklearn.linear_model import LinearRegression\n\nLR_pipeline = create_pipeline(LinearRegression())\nLR_pipeline.fit(X_train, y_train)\ny_pred = LR_pipeline.predict(X_val)\n\nresults_df = pd.DataFrame(data=[[\"Linear Regression\", *evaluate(y_val, y_pred)]],\n                          columns=['Model', 'MAE', 'MSE', 'R2 Score'])","66d08055":"from sklearn.linear_model import Ridge\n\nR_pipeline = create_pipeline(Ridge())\nR_pipeline.fit(X_train, y_train)\ny_pred = R_pipeline.predict(X_val)\n\nR_df = pd.DataFrame(data=[[\"Ridge Regression\", *evaluate(y_val, y_pred)]],\n                          columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(R_df, ignore_index=True)","ba7e13a1":"from sklearn.linear_model import RidgeCV\n\nRCV_pipeline = create_pipeline(RidgeCV())\nRCV_pipeline.fit(X_train, y_train)\ny_pred = RCV_pipeline.predict(X_val)\n\nRCV_df = pd.DataFrame(data=[[\"RidgeCV\", *evaluate(y_val, y_pred)]],\n                          columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(RCV_df, ignore_index=True)","084f5e12":"from sklearn.linear_model import Lasso\n\nL_pipeline = create_pipeline(Lasso())\nL_pipeline.fit(X_train, y_train)\ny_pred = L_pipeline.predict(X_val)\n\nL_df = pd.DataFrame(data=[[\"Lasso\", *evaluate(y_val, y_pred)]],\n                          columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(L_df, ignore_index=True)","d2c406f7":"from sklearn.linear_model import LassoCV\n\nLCV_pipeline = create_pipeline(LassoCV(cv=5, random_state=0))\nLCV_pipeline.fit(X_train, y_train)\ny_pred = LCV_pipeline.predict(X_val)\n\nLCV_df = pd.DataFrame(data=[[\"LassoCV\", *evaluate(y_val, y_pred)]],\n                          columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(LCV_df, ignore_index=True)","37fd5f80":"from sklearn.linear_model import ElasticNet\n\nEN_pipeline = create_pipeline(ElasticNet())\nEN_pipeline.fit(X_train, y_train)\ny_pred = EN_pipeline.predict(X_val)\n\nEN_df = pd.DataFrame(data=[[\"ElasticNet\", *evaluate(y_val, y_pred)]],\n                          columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(EN_df, ignore_index=True)","13e97648":"from sklearn.linear_model import ElasticNetCV\n\nENCV_pipeline = create_pipeline(ElasticNetCV(cv=5))\nENCV_pipeline.fit(X_train, y_train)\ny_pred = ENCV_pipeline.predict(X_val)\n\nENCV_df = pd.DataFrame(data=[[\"ElasticNetCV\", *evaluate(y_val, y_pred)]],\n                          columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(ENCV_df, ignore_index=True)","8750093b":"from sklearn.kernel_ridge import KernelRidge\n\nKR_pipeline = create_pipeline(KernelRidge(alpha=0.5))\nKR_pipeline.fit(X_train, y_train)\ny_pred = KR_pipeline.predict(X_val)\nKR_df = pd.DataFrame(data=[[\"KernelRidge\", *evaluate(y_val, y_pred)]],\n                         columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(KR_df, ignore_index=True)","b9c8d484":"from sklearn.svm import SVR\n\nSVR_pipeline = create_pipeline(SVR())\nSVR_pipeline.fit(X_train, y_train)\ny_pred = SVR_pipeline.predict(X_val)\nSVR_df = pd.DataFrame(data=[[\"SVR\", *evaluate(y_val, y_pred)]],\n                         columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(SVR_df, ignore_index=True)","d8b54650":"from sklearn.svm import LinearSVR\n\nLSVR_pipeline = create_pipeline(LinearSVR())\nLSVR_pipeline.fit(X_train, y_train)\ny_pred = LSVR_pipeline.predict(X_val)\nLSVR_df = pd.DataFrame(data=[[\"LinearSVR\", *evaluate(y_val, y_pred)]],\n                         columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(LSVR_df, ignore_index=True)","3ae9ac75":"from sklearn.linear_model import SGDRegressor\n\nSGDR_pipeline = create_pipeline(SGDRegressor(max_iter=1500))\nSGDR_pipeline.fit(X_train, y_train)\ny_pred = SGDR_pipeline.predict(X_val)\nSGDR_df = pd.DataFrame(data=[[\"SGDRegressor\", *evaluate(y_val, y_pred)]],\n                         columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(SGDR_df, ignore_index=True)","3e535df4":"from sklearn.neighbors import KNeighborsRegressor\n\nKNR_pipeline = create_pipeline(KNeighborsRegressor())\nKNR_pipeline.fit(X_train, y_train)\ny_pred = KNR_pipeline.predict(X_val)\nKNR_df = pd.DataFrame(data=[[\"KNeighborsRegressor\", *evaluate(y_val, y_pred)]],\n                         columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(KNR_df, ignore_index=True)","7637e608":"from sklearn.neighbors import RadiusNeighborsRegressor\n\nRNR_pipeline = create_pipeline(RadiusNeighborsRegressor())\nRNR_pipeline.fit(X_train, y_train)\ny_pred = RNR_pipeline.predict(X_val)\nRNR_df = pd.DataFrame(data=[[\"RadiusNeighborsRegressor\", *evaluate(y_val, y_pred)]],\n                         columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(RNR_df, ignore_index=True)","58153ff4":"from sklearn.tree import DecisionTreeRegressor\n\nDTR_pipeline = create_pipeline(DecisionTreeRegressor())\nDTR_pipeline.fit(X_train, y_train)\ny_pred = DTR_pipeline.predict(X_val)\nDTR_df = pd.DataFrame(data=[[\"DecisionTreeRegressor\", *evaluate(y_val, y_pred)]],\n                         columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(DTR_df, ignore_index=True)","00f916c2":"from sklearn.neural_network import MLPRegressor\n\nMLPR_pipeline = create_pipeline(MLPRegressor(learning_rate = 'adaptive', early_stopping=True))\nMLPR_pipeline.fit(X_train, y_train)\ny_pred = MLPR_pipeline.predict(X_val)\nMLPR_df = pd.DataFrame(data=[[\"MLPRegressor\", *evaluate(y_val, y_pred)]],\n                         columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(MLPR_df, ignore_index=True)","9a882905":"from xgboost import XGBRegressor\n\nXGBR_pipeline = create_pipeline(XGBRegressor(n_estimators=1000, learning_rate=0.05, random_state=0))\nXGBR_pipeline.fit(X_train, y_train)\ny_pred = XGBR_pipeline.predict(X_val)\nXGBR_df = pd.DataFrame(data=[[\"XGBRegressor\", *evaluate(y_val, y_pred)]],\n                         columns=['Model', 'MAE', 'MSE', 'R2 Score'])\nresults_df = results_df.append(XGBR_df, ignore_index=True)","4335e3c9":"results_df.set_index('Model', inplace=True)\nresults_df","b5412045":"results_df.drop(['Linear Regression', 'SGDRegressor', 'RadiusNeighborsRegressor', 'SVR'], inplace=True)","d1cea39e":"results_df['MAE'].plot(kind='bar', figsize=(12, 8))","564d2ea7":"results_df['MSE'].plot(kind='bar', figsize=(12, 8))","e609daa5":"results_df['R2 Score'].plot(kind='bar', figsize=(12, 8))","7c1de310":"final_pipeline = create_pipeline(XGBRegressor(n_estimators=1000, learning_rate=0.05, random_state=0))\nfinal_pipeline.fit(X, y)\npredictions = final_pipeline.predict(X_test)","c418e2b8":"submission = pd.DataFrame(predictions, columns=['SalePrice'])\nsubmission['Id'] = test['Id']\nsubmission.set_index('Id', inplace=True)\n\nsubmission.to_csv('submission.csv')","52290ac5":"len(submission), len(test)","bab33b9f":"submission.head()","b22dddde":"**Version-1:** using all the defaults, no eda, submission using Ridge Regresssion\n\n**Version-2:** submission using RidgeCV\n\n**Version-3:** submission using Lasso Regression\n\n**Version-4:** sbmission using KernelRidge\n\n**version-5:** testing XGBoost","e433a364":"### RidgeCV","dc990a2e":"### XGBoost","82121310":"### Support Vector Machine","22343715":"### DecisionTreeRegressor","6720edc4":"## **Read the data**","7fd5e47b":"### ElasticNetCV","391f7193":"## **Create Submission**","7ad9eb8a":"# **Data**","aace88c8":"### KNeighborsRegressor","25e93813":"Looks like **Ridge Regression**, **RidgeCV**, **Lasso** and **KernelRidge** has a very close performance. But **XGBRegressor** beats them all.","ba694aa3":"The **Linear Regression**, **SGDRegressor**, **RadiusNeighborsRegressor** and **SVR** has too much errors, so I am going to drop them.","ad1eaad2":"### Lasso","bd0512f2":"### RadiusNeighborsRegressor","99715768":"### MLPRegressor","25c3fcfb":"# **Imports**","ae1b857c":"# **Training+Testing**","11983bb5":"## **Train using various algorithms**","eaf61e9c":"## Pipeline","661a237b":"### Linear Regression","f358e144":"## **Splitting the data**","4febe21e":"### Evaluation","5bed60e5":"### Ridge Regression","40c560b1":"### KernelRidge","da82af97":"## **Necessary Functions**","84fa8098":"### Model Comparison","800d0e03":"### SGDRegressor","ed41c303":"### LassoCV","c0273aa7":"### ElasticNet"}}