{"cell_type":{"5866c89e":"code","c692afa8":"code","f0ee21b3":"code","6b3aabd6":"code","fd9fa6ed":"code","ca4cf6ea":"code","9865261d":"code","df63b332":"code","1056cc0f":"code","529f30aa":"code","3054883f":"code","5120ecb9":"code","d430431a":"code","f8c1e278":"code","1c7a1bbe":"code","beff36fd":"code","97a7f122":"code","1c0ab070":"code","72c830d1":"code","2806b34a":"code","50121164":"code","950265df":"code","f83fff42":"code","20bd09b2":"code","3db5a0af":"code","f56562a3":"markdown","d176401e":"markdown","bef2f688":"markdown","f00f3856":"markdown","79cd8ffd":"markdown","60578460":"markdown","c7613ac2":"markdown","101841a9":"markdown","6535f1c9":"markdown","f37a2400":"markdown","80c962f1":"markdown","7b6e2980":"markdown","6f7e1ac2":"markdown"},"source":{"5866c89e":"# Import libraries and set desired options\nimport numpy as np\nimport pandas as pd\nfrom scipy.sparse import hstack\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import TimeSeriesSplit, cross_val_score, GridSearchCV\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression","c692afa8":"# A helper function for writing predictions to a file\ndef write_to_submission_file(predicted_labels, out_file,\n                             target='target', index_label=\"session_id\"):\n    predicted_df = pd.DataFrame(predicted_labels,\n                                index = np.arange(1, predicted_labels.shape[0] + 1),\n                                columns=[target])\n    predicted_df.to_csv(out_file, index_label=index_label)","f0ee21b3":"train_df = pd.read_csv('..\/input\/train_sessions.csv',\n                       index_col='session_id')\ntest_df = pd.read_csv('..\/input\/test_sessions.csv',\n                      index_col='session_id')\n\n# Convert time1, ..., time10 columns to datetime type\ntimes = ['time%s' % i for i in range(1, 11)]\ntrain_df[times] = train_df[times].apply(pd.to_datetime)\ntest_df[times] = test_df[times].apply(pd.to_datetime)\n\n# Sort the data by time\ntrain_df = train_df.sort_values(by='time1')\n\n# Look at the first rows of the training set\ntrain_df.head()","6b3aabd6":"sites = ['site%s' % i for i in range(1, 11)]\ntrain_df[sites].fillna(0).astype('int').to_csv('train_sessions_text.txt', \n                                               sep=' ', \n                       index=None, header=None)\ntest_df[sites].fillna(0).astype('int').to_csv('test_sessions_text.txt', \n                                              sep=' ', \n                       index=None, header=None)","fd9fa6ed":"!head -5 train_sessions_text.txt","ca4cf6ea":"%%time\ncv = CountVectorizer(ngram_range=(1, 3), max_features=50000)\nwith open('train_sessions_text.txt') as inp_train_file:\n    X_train = cv.fit_transform(inp_train_file)\nwith open('test_sessions_text.txt') as inp_test_file:\n    X_test = cv.transform(inp_test_file)\nX_train.shape, X_test.shape","9865261d":"y_train = train_df['target'].astype('int')","df63b332":"time_split = TimeSeriesSplit(n_splits=10)","1056cc0f":"[(el[0].shape, el[1].shape) for el in time_split.split(X_train)]","529f30aa":"logit = LogisticRegression(C=1, random_state=17)","3054883f":"%%time\n\ncv_scores = cross_val_score(logit, X_train, y_train, cv=time_split, \n                            scoring='roc_auc', n_jobs=1) # hangs with n_jobs > 1, and locally this runs much faster","5120ecb9":"cv_scores, cv_scores.mean()","d430431a":"logit.fit(X_train, y_train)","f8c1e278":"logit_test_pred = logit.predict_proba(X_test)[:, 1]\nwrite_to_submission_file(logit_test_pred, 'subm1.csv') # 0.91288","1c7a1bbe":"def add_time_features(df, X_sparse):\n    hour = df['time1'].apply(lambda ts: ts.hour)\n    morning = ((hour >= 7) & (hour <= 11)).astype('int')\n    day = ((hour >= 12) & (hour <= 18)).astype('int')\n    evening = ((hour >= 19) & (hour <= 23)).astype('int')\n    night = ((hour >= 0) & (hour <= 6)).astype('int')\n    X = hstack([X_sparse, morning.values.reshape(-1, 1), \n                day.values.reshape(-1, 1), evening.values.reshape(-1, 1), \n                night.values.reshape(-1, 1)])\n    return X","beff36fd":"%%time\nX_train_new = add_time_features(train_df.fillna(0), X_train)\nX_test_new = add_time_features(test_df.fillna(0), X_test)","97a7f122":"X_train_new.shape, X_test_new.shape","1c0ab070":"%%time\ncv_scores = cross_val_score(logit, X_train_new, y_train, cv=time_split, \n                            scoring='roc_auc', n_jobs=1) # hangs with n_jobs > 1, and locally this runs much faster","72c830d1":"cv_scores, cv_scores.mean()","2806b34a":"logit.fit(X_train_new, y_train)","50121164":"logit_test_pred2 = logit.predict_proba(X_test_new)[:, 1]\nwrite_to_submission_file(logit_test_pred2, 'subm2.csv') # 0.93843","950265df":"c_values = np.logspace(-2, 2, 10)\n\nlogit_grid_searcher = GridSearchCV(estimator=logit, param_grid={'C': c_values},\n                                  scoring='roc_auc', n_jobs=1, cv=time_split, verbose=1)","f83fff42":"%%time\nlogit_grid_searcher.fit(X_train_new, y_train)","20bd09b2":"logit_grid_searcher.best_score_, logit_grid_searcher.best_params_","3db5a0af":"logit_test_pred3 = logit_grid_searcher.predict_proba(X_test_new)[:, 1]\nwrite_to_submission_file(logit_test_pred3, 'subm3.csv') # 0.94242","f56562a3":"**Again, we notice an improvement in both cross-validation score and LB score. Now taht you've settled a correct cross-validation scheme, go on with feature engineering! Good luck!**","d176401e":"**Now we'll add some time features: indicators of morning, day, evening and night.**","bef2f688":"**Transform data into format which can be fed into `CountVectorizer`**","f00f3856":"**Now we tune regularization parameter `C`.**","79cd8ffd":"<img src=\"https:\/\/habrastorage.org\/webt\/8i\/5k\/vx\/8i5kvxrehatyvf-l3glz_-ymhtw.png\" \/>","60578460":"**Perform time series cross-validation with logistic regression.**","c7613ac2":"**We'll be performing time series cross-validation, see `sklearn` [TimeSeriesSplit](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.TimeSeriesSplit.html) and [this dicussion](https:\/\/stats.stackexchange.com\/questions\/14099\/using-k-fold-cross-validation-for-time-series-model-selection) on StackOverflow.**","101841a9":"**Save train targets into a separate vector.**","6535f1c9":"**Read training and test sets, sort train set by session start time.**","f37a2400":"**Performing time series cross-validation, we see an improvement in ROC AUC.**","80c962f1":"**Fit `CountVectorizer` and trasfrom data with it.**","7b6e2980":"**Making a new submission, we notice a leaderboard score improvement as well (0.91288 ->  0.93843). Correlated CV and LB improvements is a good justifications for added features being useful and CV scheme being correct.**","6f7e1ac2":"**Train logistic regression with all training data, make predictions for test set and form a submission file.**"}}