{"cell_type":{"3ac02cae":"code","6f380807":"code","6ae712b6":"code","2ef2c528":"code","163d8cbf":"code","a90058a4":"code","8961ac18":"code","7ac881bd":"code","6ce24e4f":"code","ce77e195":"code","fdef7b72":"code","7101668d":"code","f0cb0ce2":"code","d678ff34":"code","ae57a012":"code","50f3c5fd":"code","a36de7a9":"code","1acc7ece":"code","a103cd97":"code","6e130087":"markdown","5a3078b2":"markdown","cec78e5f":"markdown","227570e0":"markdown","b9cae06b":"markdown","fe9d1d7b":"markdown","49df1d93":"markdown","0a5c29fc":"markdown","9d961096":"markdown","a3a71801":"markdown","8d076ba7":"markdown","18311508":"markdown","a54a2611":"markdown","436c5cdf":"markdown","762aad2f":"markdown","41b550cc":"markdown","0eadfffd":"markdown","33443203":"markdown","8e8d5df6":"markdown","b01408c3":"markdown","8449afe2":"markdown","15ba9114":"markdown","042f1f04":"markdown"},"source":{"3ac02cae":"#importing all important packages\nimport numpy as np #linear algebra\nimport pandas as pd #data processing\nimport matplotlib.pyplot as plt #data visualisation\nimport seaborn as sns #data visualisation\n%matplotlib inline","6f380807":"data = pd.read_csv('..\/input\/ramen-ratings\/ramen-ratings.csv') #reading the data and save it into a variable\ndata.head(10) #show the first 10 rows of the data","6ae712b6":"#checking total rows and column in our data\ndata.shape","2ef2c528":"data.isna().sum()","163d8cbf":"data = data.dropna(subset=['Style'])\nprint(data[\"Style\"].isna().sum())","a90058a4":"data['Style'].unique()","8961ac18":"data['Style'].value_counts()","7ac881bd":"print(data[\"Country\"].unique())\nprint(len(data[\"Country\"].unique()), 'Countries')","6ce24e4f":"data['Country'].value_counts()","ce77e195":"top10 = data.dropna()\ntop10","fdef7b72":"top10 = top10[top10['Top Ten'] != '\\n'] #if the data in Top Ten column contains '\\n' we can ignore it\ntop10 = top10.sort_values('Top Ten' ) #and we sort it by year\ntop10","7101668d":"data['Brand'].value_counts()[:10]","f0cb0ce2":"#First, let's see how many ramen brands are in our data\nprint(len(data['Brand'].unique()))","d678ff34":"for s in data['Stars']:\n    try:\n        s = float(s)\n    except:\n        print(s)","ae57a012":"data = data[data['Stars'] != 'Unrated']\nprint(data[data['Stars'] == 'Unrated']['Stars'].sum()) #make sure if there are no 'Unrated'","50f3c5fd":"brands = list(data['Brand'].unique())\ncounter = [0.0]*355\n\nbrands_cnt = dict(zip(brands, counter)) #create dictionary to count all ratings and then save the averages\n\nfor brand in brands:\n    brands_data = data[data['Brand'] == brand]\n    for star in brands_data['Stars']:\n        brands_cnt[brand] += float(star) #count all ratings\n    brands_cnt[brand] \/= len(brands_data) #average","a36de7a9":"top50ratings = [] #list for saving the brand name and its average rating\nfor key, values in brands_cnt.items():\n    top50ratings.append([key,values])\n\n#print the top 50 ramen ratings by brand\ntop50ratings = sorted(top50ratings, key = lambda x : x[1], reverse = True) #sorting values in descending order\ntop50ratings\nfor i in range(50):\n    print('#{:<3}{:25} {}'.format(i+1, top50ratings[i][0], round(top50ratings[i][1],2)))","1acc7ece":"sns.set(style = 'darkgrid')\nf, ax = plt.subplots(1,1,figsize = (15,5))\nsns.countplot(x = 'Country', data = data)\nplt.xticks(rotation=90)\n\nplt.show()","a103cd97":"labels = 'Pack', 'Bowl', 'Cup' , 'Tray', 'Box' #We can't include 'Bar' and 'Can' because they only appear once in our data.\nsize = [1531, 481, 450, 108, 6]\n\nf, ax = plt.subplots(1,1, figsize= (10,10))\n\nax.pie(size, labels = labels, autopct = '%1.2f%%', startangle = 180)\nax.axis('equal')\nax.set_title(\"Style\", size = 20)\n\nplt.show()","6e130087":"## Data Cleaning\nLet's check if there are data missing in our data","5a3078b2":"Ok, that's all my analysis. If you think I missed something, feel free to comment. Thank you for reading this notebook!","cec78e5f":"Since Ramen is very popular in Japan, there is no doubt Japan will be the top one.","227570e0":"_________________________","b9cae06b":"#### Pie Plot\nIf you want to plot something about percentage, then Pie Plot is a right choice. let's find out the percentage of total ramen based on style first.","fe9d1d7b":"**Exploratory Data Analysis**\nby [Iqrar Agalosi Nureyza](http:\/\/https:\/\/www.kaggle.com\/iqrar99)","49df1d93":"Ok, finally they're gone. It's time to have fun!","0a5c29fc":"Take a look at the data. We found '\\n' or *newline* in our data. Maybe it accidentally happened. So we easily filter the data using selection.","9d961096":"Ok, now we use *value_counts()* to count each unique Ramen Style.","a3a71801":"Alright, we know that we got 7 columns in our data. Which are:\n1. *Review* : unique numbers that inform the review order from the latest\n2. *Brand*  : Ramen brand\n3. *Variety*: variation of ramen\n4. *Style*  : style of ramen\n5. *Country*: Where the ramen is available\n6. *Stars*  : Ramen ratings\n7. *Top Ten*: ramen achievement","8d076ba7":"## Frequency\nLet's see all styles in *Style* column","18311508":"And again, we use *value_counts()*","a54a2611":"## Top 50 Ramen Ratings by brands\nWe will calculate the average rating for each brand, and then we'll show who is in top 50.","436c5cdf":"Pack Style is the most used style. Now let's see all countries in *Country* column.","762aad2f":"## Top 10 Ramen Brand by total products\nTop 10 Ramen brands that have the most products.","41b550cc":"## Data Visualisation\nNow we move into interesting part. First, we make count plots to see value counts for each country\n#### Count PLot","0eadfffd":"## Basic Analysis","33443203":"We know that in the *Style* column we have 2 missing data. And *Top Ten* data tells us that if the ramen doesn't get 'Top Ten' achievement, then the data will be blank. Since we only have 2 missing data, we can drop it.","8e8d5df6":"Okay, we found anomalies in our data. Some ramen don't have ratings. We can drop it from our data.","b01408c3":"Hello Everyone! I try my best to do data analysis. This Ramen Rating Dataset is a very good dataset for beginner and I hope you can understand my analysis. I am very open in accepting criticism and suggestions for perfecting this kernel.\n\nIf you find this notebook useful, feel free to **Upvote**.","8449afe2":"Let's see if *Stars* column has invalid value.","15ba9114":"___________________","042f1f04":"## The Top 10\nLet's see all top 10 ramen for each year."}}