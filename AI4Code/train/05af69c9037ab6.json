{"cell_type":{"b17257bf":"code","736df6d3":"code","debd8855":"code","763844e1":"code","ec0ed0c6":"code","75bafa1c":"code","47dfbecb":"code","de9c9c8e":"code","f6515bbb":"code","65ebab8c":"code","0df85556":"code","5deff792":"code","50bb2592":"code","f6d30a1f":"code","4249dfde":"code","c92ed8aa":"code","80cfd33f":"code","296ec2d5":"code","e879a4f2":"code","9a620d15":"code","c6e410c8":"code","a87d78bf":"code","cbb126b1":"code","c272d3dc":"code","c841149b":"code","b9b78916":"code","568a5b90":"code","284929bf":"code","fd205025":"code","4d3e03aa":"code","308d0163":"code","aad7da0f":"markdown","e5ad1bfc":"markdown","d0796fd3":"markdown","aa87dc84":"markdown","7bf6effd":"markdown","9cbabe48":"markdown"},"source":{"b17257bf":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport os\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import zero_one_loss\nfrom sklearn.metrics import multilabel_confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline","736df6d3":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","debd8855":"df = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')\ndf.head()","763844e1":"df.info()","ec0ed0c6":"df[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']].describe()","75bafa1c":"print('Total Number of Unique Species: ', df.Species.nunique())\nprint('Unique Species: ', df.Species.unique())","47dfbecb":"sns.pairplot(df, hue = 'Species')","de9c9c8e":"sns.boxplot(x='Species', y='SepalLengthCm', data=df\n           ).set_title(\"Length of the Sepal (in Centimeters) Grouped by Species\")","f6515bbb":"sns.swarmplot(x='Species', y='SepalLengthCm',data=df\n             ).set_title(\"Length of the Sepal (in Centimeters) Grouped by Species\")","65ebab8c":"sns.violinplot(x=\"Species\", y=\"SepalLengthCm\", data=df\n              ).set_title(\"Length of the Sepal (in Centimeters) Grouped by Species\")","0df85556":"sns.boxplot(x='Species', y='SepalWidthCm', data=df\n           ).set_title(\"Width of the Sepal (in Centimeters) Grouped by Species\")","5deff792":"sns.swarmplot(x='Species', y='SepalWidthCm',data=df\n             ).set_title(\"Width of the Sepal (in Centimeters) Grouped by Species\")","50bb2592":"sns.violinplot(x=\"Species\", y=\"SepalWidthCm\", data=df\n              ).set_title(\"Width of the Sepal (in Centimeters) Grouped by Species\")","f6d30a1f":"sns.boxplot(x='Species', y='PetalLengthCm', data=df\n           ).set_title(\"Length of the Petal (in Centimeters) Grouped by Species\")","4249dfde":"sns.swarmplot(x='Species', y='PetalLengthCm',data=df\n             ).set_title(\"Length of the Petal (in Centimeters) Grouped by Species\")","c92ed8aa":"sns.violinplot(x=\"Species\", y=\"PetalLengthCm\", data=df\n              ).set_title(\"Length of the Petal (in Centimeters) Grouped by Species\")","80cfd33f":"sns.boxplot(x='Species', y='PetalWidthCm', data=df\n           ).set_title(\"Width of the Petal (in Centimeters) Grouped by Species\")","296ec2d5":"sns.swarmplot(x='Species', y='PetalWidthCm',data=df\n             ).set_title(\"Width of the Petal (in Centimeters) Grouped by Species\")","e879a4f2":"sns.violinplot(x=\"Species\", y=\"PetalWidthCm\", data=df\n              ).set_title(\"Width of the Petal (in Centimeters) Grouped by Species\")","9a620d15":"X = df[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]\ny = df['Species']\ny.head()","c6e410c8":"encoder = LabelEncoder()\ny = encoder.fit_transform(y)\nprint(y)","a87d78bf":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","cbb126b1":"clf = RandomForestClassifier(max_depth=2, random_state=42)\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)","c272d3dc":"confusion_matrix(y_test, y_pred)","c841149b":"multilabel_confusion_matrix(y_test, y_pred)","b9b78916":"accuracy_score(y_test, y_pred, normalize=False) \n# If normalize = False, returns the number of correctly classified samples. \n# If normalize = True, returns the number of correctly classified samples.\n# Here, 30 samples were correctly classified. Notice that there are a total of 30 samples.","568a5b90":"accuracy_score(y_test, y_pred, normalize=True) \n# If True return the fraction of correctly classified samples.\n# 1.0 means 100% accuracy of the model.","284929bf":"zero_one_loss(y_test, y_pred, normalize=False)\n# If False, returns the number of the misclassifications. \n# If True, returns the fraction of the misclassifications.","fd205025":"clf = SVC(gamma='auto')\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nprint('Model Accuracy: ', clf.score(X_train, y_train))\nprint('Number of Correctly Classified Samples: ', \n      accuracy_score(y_test, y_pred, normalize=False), \n      ' out of ', len(y_pred))\nprint('Number of Support Vectors for each Class: ', clf.n_support_)","4d3e03aa":"plot_confusion_matrix(clf, X_test, y_test)","308d0163":"output = pd.DataFrame({'Id': df['Id'], 'Species': df['Species']})\noutput.head()\n\noutput.info()\n\noutput.to_csv('Submission_RandomForest.csv', index=False)","aad7da0f":"## Importing and Analyzing the Dataset","e5ad1bfc":"## Support Vector Classifier","d0796fd3":"## Data Preprocessing","aa87dc84":"## Random Forest Classifier\n","7bf6effd":"## Data Visualizations","9cbabe48":"## Importing Python Packages and Setup the Environment"}}