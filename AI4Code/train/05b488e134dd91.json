{"cell_type":{"c50d303e":"code","bc08e141":"code","87870fd0":"code","822df8e6":"code","57c825a8":"code","81ee42e0":"code","23e09da1":"code","c22b08b2":"code","42be2bdd":"code","d9adb790":"code","7aded9ec":"code","c8f20963":"code","c065b5c5":"code","14773370":"code","1412e38c":"code","42b3d739":"code","2bf61685":"code","e6eb2fd7":"code","3825e421":"code","20880843":"code","dd1e0394":"code","9fc35c24":"code","81c79f2d":"code","e98c700d":"code","569d25ef":"code","b59c63a5":"code","10b045d3":"code","e5984e9d":"code","19fb5ebf":"code","bf74b558":"code","b77c2b52":"code","cb0a0187":"code","eabfc211":"code","ea87e7df":"code","e6872797":"markdown","3bff3327":"markdown","51f00d99":"markdown","38878849":"markdown","0b81a49b":"markdown","0c7f89d4":"markdown","43899f83":"markdown","ac5c42d7":"markdown","e7dc4280":"markdown","af42ef96":"markdown","c7d14094":"markdown","a3432af7":"markdown"},"source":{"c50d303e":"import numpy as np\nfrom skimage.io import imread, imsave\nfrom skimage.transform import resize","bc08e141":"fpath = '..\/input\/pokemon-images-and-types\/images\/images\/abomasnow.png'\nimg = imread(fpath)\nprint(img.shape)","87870fd0":"print(img)","822df8e6":"import matplotlib.pyplot as plt\nplt.imshow(img)\nplt.show()\n","57c825a8":"fpath = '..\/input\/pokemon-images-and-types\/images\/images\/aegislash-blade.png'\nimg = imread(fpath)\nplt.imshow(img)\nplt.show()\nimg[:,:,1] = 0\nimg[:,:,2] = 0\nplt.imshow(img)\nplt.show()\n\nfpath = '..\/input\/pokemon-images-and-types\/images\/images\/aegislash-blade.png'\nimg = imread(fpath)\nimg[:,:,0] = 0 # show the green value\nimg[:,:,2] = 0\nplt.imshow(img)\nplt.show()\n\nfpath = '..\/input\/pokemon-images-and-types\/images\/images\/aegislash-blade.png'\nimg = imread(fpath)\nimg[:,:,0] = 0 #show the blue value\nimg[:,:,1] = 0\nplt.imshow(img)\nplt.show()\n","81ee42e0":"print(img.shape)","23e09da1":"imgresized = resize(img, (256, 256))\nprint(img.shape)\nprint(imgresized.shape)\n\n","c22b08b2":"plt.imshow(imgresized)\nplt.show()","42be2bdd":"#building training dataset\n\nfrom skimage.io import imread\nimport numpy as np\nfrom skimage.transform import resize\nimport matplotlib.pyplot as plt\nimport glob\n\ndataset = []\nlabel = []\n\nfpath = '..\/input\/saudogphonedemo\/dataset\/train\/dog\/*.jpg'\nallpath = glob.glob(fpath)\n#print(allpath)\nfor p in allpath:\n    img = imread(p)\n    imgresize = resize(img, (64, 64))\n    imgflatten = imgresize.flatten()\n    dataset.append(imgflatten)\n    label.append('dog')\n    #plt.imshow(imgresize)\n    #plt.show()\n#print(imgresize.shape)\n\nfpath = '..\/input\/saudogphonedemo\/dataset\/train\/phone\/*.jpg'\nallpath = glob.glob(fpath)\n#print(allpath)\nfor p in allpath:\n    img = imread(p)\n    imgresize = resize(img, (64, 64))\n    imgflatten = imgresize.flatten()\n    dataset.append(imgflatten)\n    label.append('phone')\n\n#print(dataset)\nX = np.array(dataset)\nprint(X)\nprint(X.shape)\nprint(label)\nprint(len(label))","d9adb790":"print(64*64*3)","7aded9ec":"def NN(img, X, label):\n    qa = img\n    a = X\n    G = label\n    minusa = a - qa\n    sq = minusa*minusa\n    sqsum = np.sum(sq, axis=1)\n    res = np.argmin(np.sqrt(sqsum))\n    index = res\n    return G[index]\n\nprint('dog images.....')\ntestimgpath = '..\/input\/saudogphonedemo\/dataset\/test\/dog\/*.jpg'\nallimgpath = glob.glob(testimgpath)\nfor p in allimgpath:\n    img = imread(p)\n    imgresize = resize(img, (64, 64))\n    imgflatten = imgresize.flatten()\n\n    print(p, NN(imgflatten, X, label))\n\n    \nprint('phone images.....')\ntestimgpath = '..\/input\/saudogphonedemo\/dataset\/test\/phone\/*.jpg'\nallimgpath = glob.glob(testimgpath)\nfor p in allimgpath:\n    img = imread(p)\n    imgresize = resize(img, (64, 64))\n    imgflatten = imgresize.flatten()\n\n    print(p, NN(imgflatten, X, label))\n    \n    \n","c8f20963":"#building training dataset\n\nfrom skimage.io import imread\nimport numpy as np\nfrom skimage.transform import resize\nimport matplotlib.pyplot as plt\nimport glob\n\ndataset = []\nlabel = []\n\nfpath = '..\/input\/saudogphonedemo\/dataset\/train\/dog\/*.jpg'\nallpath = glob.glob(fpath)\n#print(allpath)\nfor p in allpath:\n    img = imread(p)\n    imgresize = resize(img, (64, 64))\n    imgflatten = imgresize.flatten()\n    dataset.append(imgflatten)\n    label.append('dog')\n    #plt.imshow(imgresize)\n    #plt.show()\n#print(imgresize.shape)\n\nfpath = '..\/input\/saudogphonedemo\/dataset\/train\/phone\/*.jpg'\nallpath = glob.glob(fpath)\n#print(allpath)\nfor p in allpath:\n    img = imread(p)\n    imgresize = resize(img, (64, 64))\n    imgflatten = imgresize.flatten()\n    dataset.append(imgflatten)\n    label.append('phone')\n\n#print(dataset)\nX = np.array(dataset)\nprint(X)\nprint(X.shape)\nprint(label)\nprint(len(label))","c065b5c5":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","14773370":"model = KNeighborsClassifier(n_neighbors = 5) #declare\nmodel.fit(X, label)","1412e38c":"model = DecisionTreeClassifier()\nmodel.fit(X, label)","42b3d739":"dogimgpath = '..\/input\/saudogphonedemo\/dataset\/test\/dog\/OIP_352.jpg'\nimg = imread(dogimgpath)\nimgresize = resize(img, (64, 64))\nimgflatten = imgresize.flatten()\nresult = model.predict(imgflatten.reshape(1, -1))\nprint(result)","2bf61685":"testimgpath = '..\/input\/saudogphonedemo\/dataset\/test\/dog\/*.jpg'\nallimgpath = glob.glob(testimgpath)\n\nfor p in allimgpath:\n    img = imread(p)\n    imgresize = resize(img, (64, 64))\n    imgflatten = imgresize.flatten()\n    print(model.predict(imgflatten.reshape(1, -1)))","e6eb2fd7":"testimgpath = '..\/input\/saudogphonedemo\/dataset\/test\/dog\/*.jpg'\nallimgpath = glob.glob(testimgpath)\ntestarray = []\n\nfor p in allimgpath:\n    img = imread(p)\n    imgresize = resize(img, (64, 64))\n    imgflatten = imgresize.flatten()\n    testarray.append(imgflatten)\ntest = np.array(testarray)\nprint(model.predict(test))","3825e421":"from sklearn.model_selection import cross_val_score\n\nfor neighbor in range(1, 10, 2):\n    print(neighbor)\n    model = KNeighborsClassifier(n_neighbors = neighbor)\n    scores = cross_val_score(model, X, label, cv=5)\n    print(scores)\n    print(scores.mean())","20880843":"from sklearn.model_selection import cross_val_score\n\nfor neighbor in range(1, 10, 2):\n    for pnum in [1, 2]:\n        print(neighbor, pnum)\n        model = KNeighborsClassifier(n_neighbors = neighbor, p = pnum)\n        scores = cross_val_score(model, trainX, label, cv=5)\n# print(scores)\n        print(scores.mean())\n\n","dd1e0394":"from sklearn.svm import LinearSVC\n\nfor Cp in [0.1, 1, 10]:\n    for lossp in ['hinge', 'squared_hinge']:\n        model = LinearSVC(C = Cp, loss = lossp, max_iter = 100)\n        scores = cross_val_score(model, trainX, label, cv = 5)\n        print(Cp, lossp, ':', scores.mean())","9fc35c24":"from sklearn.svm import SVC\n\nfor Cp in [1]:\n    for gammap in [0.01, 0.05]:\n        model = SVC(C = Cp, gamma = gammap)\n        scores = cross_val_score(model, trainX, label, cv=5)\n        print(Cp, gammap, ':', scores.mean())\n","81c79f2d":"from sklearn.model_selection import GridSearchCV\nparam_grid = {'n_neighbors':[1, 3]}\n\nmodel = GridSearchCV(KNeighborsClassifier(), param_grid, cv=3)\nmodel.fit(X, label)\n\nprint(model.best_params_)\n","e98c700d":"para_grid = {'C':[1, 5], 'gamma':[0.0001, 0.0005, 0.001, 0.005]}\nmodel = GridSearchCV(SVC(), para_grid, cv=2)\nmodel.fit(trainX, label)\nprint(model.best_params_)","569d25ef":"print(model.best_params_)","b59c63a5":"from sklearn.model_selection import cross_val_score\n\nmodel = KNeighborsClassifier()\nscores = cross_val_score(model, trainX, label, cv=5)\nprint(scores.mean())\n\n\n# model = KNeighborsClassifier(n_neighbors=1)\n\nfrom sklearn.model_selection import GridSearchCV\n\n# param_grid = [\n#   {'C': [1, 10], 'kernel': ['linear']},\n#   {'C': [1, 10], 'gamma': [0.1, 0.01], 'kernel': ['rbf']},\n# ]\n\nparam_grid = {'n_neighbors':[1, 3]}\n\nclf = GridSearchCV(KNeighborsClassifier(), param_grid, cv=5)\nclf.fit(trainX, label)\n\nprint(clf.best_params_)\n# model = RandomForestClassifier(n_estimators=50, min_samples_split=5, oob_score=True)\n# # model = SVC(gamma='scale')\n# # model = LogisticRegression()\n# model.fit(trainX, label)\n# print(model.oob_score_)\n\n# print(trainX)\n# print(label)\n\n ","10b045d3":"fnames = '.\/dataset\/test\/cat\/*.jpg'\nfnameall = glob.glob(fnames)\n\ngroundtruth = []\nprediction = []\n\nfor fname in fnameall:\n    img = imread(fname)\n    imgre = imresize(img, (64, 64))\n#     plt.imshow(imgre)\n#     plt.show()\n\n    imgflatten = imgre.flatten()\n    imgflatten = imgflatten\/255.0\n    category = model.predict([imgflatten])\n    prediction.extend(category)\n    groundtruth.append('cat')\n#     print(category)\n\nfnames = '.\/dataset\/test\/dog\/*.jpg'\nfnameall = glob.glob(fnames)\n\nfor fname in fnameall:\n    img = imread(fname)\n    imgre = imresize(img, (64, 64))\n#     plt.imshow(imgre)\n#     plt.show()\n\n    imgflatten = imgre.flatten()\n    imgflatten = imgflatten\/255.0\n\n    category = model.predict([imgflatten])\n    prediction.extend(category)\n    groundtruth.append('dog')\n\n","e5984e9d":"print(\"groundtruth\")\nprint(groundtruth)\nprint('prediction')\nprint(prediction)\n\nfrom sklearn.metrics import accuracy_score\n\nacc = accuracy_score(groundtruth, prediction)\nprint(acc)","19fb5ebf":"\nfrom sklearn.model_selection import cross_val_score\n\nmodel = KNeighborsClassifier()\nscores = cross_val_score(model, trainX, label, cv=5)\nprint(scores.mean())\n\n\n# model = KNeighborsClassifier(n_neighbors=1)\n\nfrom sklearn.model_selection import GridSearchCV\n\n# param_grid = [\n#   {'C': [1, 10], 'kernel': ['linear']},\n#   {'C': [1, 10], 'gamma': [0.1, 0.01], 'kernel': ['rbf']},\n# ]\n\nparam_grid = {'n_neighbors':[1, 3]}\n\nclf = GridSearchCV(KNeighborsClassifier(), param_grid, cv=5)\nclf.fit(trainX, label)\n\nprint(clf.best_params_)\n# model = RandomForestClassifier(n_estimators=50, min_samples_split=5, oob_score=True)\n# # model = SVC(gamma='scale')\n# # model = LogisticRegression()\n# model.fit(trainX, label)\n# print(model.oob_score_)\n\n# print(trainX)\n# print(label)","bf74b558":"%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.datasets.samples_generator import make_blobs\nx, y = make_blobs(n_samples=300, centers = 5, cluster_std=1.0, random_state=0)\nplt.scatter(x[:,0], x[:,1], c=y, cmap='viridis')\nplt.show()\nprint(y)","b77c2b52":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=10)\nkmeans.fit(x)\ny_pred = kmeans.predict(x)\nplt.scatter(x[:,0], x[:,1], c=y_pred, cmap='viridis')\ncenters = kmeans.cluster_centers_\nplt.scatter(centers[:,0], centers[:,1], c='black', s=100)\nplt.show()","cb0a0187":"loss = []\nfor i in range(1, 11, 1):\n    kmeans = KMeans(n_clusters=i)\n    kmeans.fit(x)\n    loss.append(kmeans.inertia_)\nprint(loss)","eabfc211":"plt.plot(range(1,11,1), loss)\nplt.title('Elbow method')\nplt.xlabel(\"number of clusters\")\nplt.ylabel('loss fuction')\nplt.show()","ea87e7df":"kmeans = KMeans(n_clusters=5)\nkmeans.fit(x)\ny_pred = kmeans.predict(x)\nplt.scatter(x[:,0], x[:,1], c=y_pred, cmap='viridis')\ncenters = kmeans.cluster_centers_\nplt.scatter(centers[:,0], centers[:,1], c='black', s=100)\nplt.show()","e6872797":"## try a toy dataset","3bff3327":"# <center>Kmeans clustering<center\/>","51f00d99":"## compute acc","38878849":"# <center> build dog vs phone classification<center\/>","0b81a49b":"# import packages ","0c7f89d4":"# implement dog & phoneclassification using scikit-learn toolbox","43899f83":"## basic image processing","ac5c42d7":"## elbow method","e7dc4280":"## build training dataset","af42ef96":"## fit the data to the model","c7d14094":"## using the model to predict new samples","a3432af7":"## create datasets"}}