{"cell_type":{"e0a6a4fd":"code","64f3445b":"code","b6977a00":"code","265ac2b3":"code","357141a2":"code","6c064d69":"code","394ff812":"code","f89d70a0":"code","9c4dfb1b":"code","04c79423":"code","d06c6ed5":"code","2378c2d7":"code","a4c0b544":"code","f998ca00":"code","112631c4":"code","bacaabc9":"code","846e90e4":"code","603e9e8f":"code","b79224d7":"code","d2309285":"code","f6428cd1":"code","eb83a61e":"code","f8602755":"code","b474b2d3":"code","0315896a":"code","3d70206a":"code","c0a3113e":"markdown","66185b67":"markdown","7af32eaf":"markdown","515a24f1":"markdown","a3d4fab9":"markdown","d94ddf06":"markdown","e0f43e25":"markdown","58af6c27":"markdown","11aed56e":"markdown","0818b384":"markdown","07c53063":"markdown","b294a6ea":"markdown"},"source":{"e0a6a4fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/titanic\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","64f3445b":" pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","b6977a00":"# read the data\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrain_data =  pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data =  pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntrain_data.head()","265ac2b3":"import scipy.stats as stats\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\ndef diagnostic_plots(df, variable):\n    # function to plot a histogram and a Q-Q plot\n    # side by side, for a certain variable\n    \n    plt.figure(figsize=(15,6))\n    plt.subplot(1, 2, 1)\n    df[variable].hist()\n\n    plt.subplot(1, 2, 2)\n    stats.probplot(df[variable],dist = 'norm',plot=plt)\n    plt.show()\n","357141a2":"diagnostic_plots(train_data,'Age')","6c064d69":"\ntrain_data['Log_Fare']=np.log(train_data['Fare']+1)\ndiagnostic_plots(train_data,'Log_Fare')\n\n","394ff812":"train_data['Rec'] = 1\/(train_data['Fare']+1)","f89d70a0":"train_data['Fare'] = np.log(train_data['Fare']+1)","9c4dfb1b":"train_data.info()\ntest_data.info()","04c79423":"train_data.describe()","d06c6ed5":"plt.figure(figsize=[8,5])\nsns.countplot(data=train_data, x= \"Survived\");","2378c2d7":"plt.figure(figsize=[8,5])\nsns.countplot(data = train_data, x = 'Survived',hue= 'Sex');","a4c0b544":"plt.figure(figsize=[8,5])\nsns.countplot(data= train_data,hue ='Pclass',x=\"Survived\");","f998ca00":"plt.figure(figsize=[8,5])\nsns.distplot(train_data['Age'].dropna(),kde=False,color='darkred',bins= 40);","112631c4":"plt.figure(figsize=[8,5])\nsns.countplot(x='SibSp',data=train_data);","bacaabc9":"plt.figure(figsize=[8,5])\ntrain_data['Fare'].hist(color= 'green');","846e90e4":"plt.figure(figsize=[8,5])\nplt.hist(bins=40,x= train_data['Fare']);","603e9e8f":"plt.figure(figsize=[8,5])\nsns.boxplot(data=train_data, x= 'Pclass', y='Age');","b79224d7":"def inpute(col):\n    Age = col[0]\n    Pclass= col[1]\n    if pd.isnull(Age):\n        if Pclass==1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","d2309285":"train_data['Age'] = train_data[['Age','Pclass']].apply(inpute,axis=1)\ntest_data['Age'] = test_data[['Age','Pclass']].apply(inpute,axis=1)","f6428cd1":"train_data.drop('Cabin',axis=1,inplace=True)","eb83a61e":"train_data.head()","f8602755":"combine = [train_data, test_data]\ntrain_data.shape, test_data.shape","b474b2d3":"train_data.Age=train_data.Age.astype(int)\ntest_data.Age = test_data.Age.astype(int)","0315896a":"# make categories for ages\nfor dataset in combine:    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4\ntrain_data.head()","3d70206a":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"Age\", \"Parch\",'SibSp']\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=0)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\nacc_random_forest = round(model.score(X,y) * 100, 2)\nacc_random_forest\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","c0a3113e":"# Data cleaning","66185b67":"There is a peak between the range of 20 and 35 which shows majority of the people on the ship belonged to ages between 20 and 35","7af32eaf":"38% of the people survived","515a24f1":"The blue,orange and green indicates 1st,2nd and 3rd class which shows the rich middle-class and poor.  ","a3d4fab9":"The peak in the histogram shows majority of the tickets were sold at prices below 100 which were purchased by people who belonged to 2nd and 3rd class.","d94ddf06":"Missing values are found in Age and Cabin columns. These columns are very important that can be used in further prediction of the model.","e0f43e25":"Cabin column must be dropped since it has majority of null values and the row in Embarked that has null rows.","58af6c27":"# Exploratory data analysis","11aed56e":"The following plot shows majority of the people who survived were females. ","0818b384":"The wealthier class tend to be older. I will fill the null values in age column by replacing them with average age of each class.","07c53063":"The bars indicate the number of siblings and spouse with whom people were travelling along. The first bar indicates majority of people were travelling alone and the orange bar indicates people were travelling along with their spouse. Similarly 2,3,4,5 and 8 indicate the number of siblings. ","b294a6ea":"# Model"}}