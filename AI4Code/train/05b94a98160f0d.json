{"cell_type":{"5c57e404":"code","90050d92":"code","bbeac27a":"code","8b0065ae":"code","9bd0db0c":"code","1bd93f28":"code","c78d33ec":"code","eb4fb122":"code","f73df65e":"code","f9e07815":"code","54e6d139":"code","ffdd8cae":"code","3b83960a":"code","5aa7501f":"code","59659638":"code","cec9f9dc":"code","727f3582":"code","fbe22c83":"code","be993206":"code","d1b5dfc7":"markdown","37a9cdd9":"markdown","f7a88852":"markdown","f847faf1":"markdown","65c10cca":"markdown","8f1e1530":"markdown","85b6a3b8":"markdown","5ee51fe7":"markdown","7f627824":"markdown","1d729b33":"markdown","1417c36b":"markdown","166ad9d3":"markdown","3c6a037a":"markdown","747c639a":"markdown"},"source":{"5c57e404":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90050d92":"import pandas as pd\nimport numpy as np","bbeac27a":"\ndf = pd.read_csv('..\/input\/air-pollution-in-seoul\/AirPollutionSeoul\/Measurement_summary.csv')","8b0065ae":"df.shape","9bd0db0c":"df.isnull().sum()","1bd93f28":"for x in [\"SO2\",\"NO2\",\"O3\",\"CO\",\"PM10\",\"PM2.5\"]:\n    print(x+\" : \")\n    print(df[x].describe())","c78d33ec":"for x in [\"SO2\",\"NO2\",\"O3\",\"CO\",\"PM10\",\"PM2.5\"]:\n    df=df[df[x]>0]","eb4fb122":"df.describe()","f73df65e":"df[df[\"Station code\"]==101]","f9e07815":"del df[\"Latitude\"]\ndel df[\"Longitude\"]\ndel df[\"Address\"]","54e6d139":"def normalize_data(x):\n    index=[]\n    \n    for date in x:\n        normalized= date.split(' ')\n        normalized= normalized[0].split('-')+normalized[1].split(':')\n        index.append(normalized)\n        \n    \n    return pd.DataFrame(index,columns=[\"Year\",\"Month\",\"Day\",\"Hour\",\"Min\"])","ffdd8cae":"df_data_normalized=normalize_data(df[\"Measurement date\"])\nprint(f'Normalized date shape {df_data_normalized.shape}.')\nprint(f'Original Df shape {df.shape}.')\n\ndf_normalized=pd.concat([df,df_data_normalized],axis=1)\nprint(f'Final shape {df_normalized.shape}')","3b83960a":"df_normalized","5aa7501f":"df_final=df_normalized.dropna()","59659638":"del df_final['Measurement date']","cec9f9dc":"df_final","727f3582":"df_final['Min'].value_counts()\n","fbe22c83":"del df_final['Min']","be993206":"df_final","d1b5dfc7":"Import data\n","37a9cdd9":"Ok are all correlated. Now we start to clear address,latitude and longitude","f7a88852":"Now let's start see if address and Latitude\/Longitude are correlated with Station code","f847faf1":"I apply this function","65c10cca":"Missing Values are not existing...","8f1e1530":"If u have any tip for me don't be timid!","85b6a3b8":"I dont know why create a final Df with new cases. Just i'll remove this Nan Values","5ee51fe7":"Controll if are present missing values.","7f627824":"I remove values content a illegal value(-1 and 0)","1d729b33":"# *Normalize first big Dataset*","1417c36b":"Show shape\n","166ad9d3":"I see if all \"Min\" values are 0","3c6a037a":"Now we have a good and normalized dataset for do on it Learning","747c639a":"Now i'm start create a function for separe Measurement date in hour and date"}}