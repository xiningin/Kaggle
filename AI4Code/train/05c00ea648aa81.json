{"cell_type":{"1b9279be":"code","6db90918":"code","4428751f":"code","8f277356":"code","bebf58a7":"code","f98848d9":"code","7bfeadb1":"code","b33da30f":"code","35319856":"code","19fde06d":"code","4c325665":"code","57c80b92":"code","4a9c04bc":"code","c93e4139":"code","56e198c9":"code","22f4a327":"code","c56939c8":"markdown","f1edc2a2":"markdown","c4289e02":"markdown","76efa574":"markdown","1877f2fc":"markdown","f779838e":"markdown","8119e0f7":"markdown"},"source":{"1b9279be":"import numpy as np\nfrom keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D\nfrom keras.models import Model\nfrom keras.datasets import mnist\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\nfrom sklearn.model_selection import train_test_split\nfrom keras.callbacks import ModelCheckpoint\nfrom sklearn.neighbors import NearestNeighbors\n\n%matplotlib inline","6db90918":"path = '..\/input\/image-retrieval-3\/Image Retrieval\/dataset'\n\ntotal_images = []\n\nfor images in os.listdir(path):\n    path_full = os.path.join(path,images)\n    img = cv2.imread(path_full)\n    img = cv2.resize(img, (128,128), interpolation = cv2.INTER_NEAREST)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    total_images.append(img)","4428751f":"print('Total Number of Images in the dataset ->', len(total_images))\nprint('Shape of an Image', total_images[0].shape)\n\nplt.subplot(1,2,1)\nplt.imshow(total_images[0])\nplt.subplot(1,2,2)\nplt.imshow(total_images[4000])","8f277356":"x_train, x_test = train_test_split(total_images, test_size=0.25, random_state=42)","bebf58a7":"x_train = np.array(x_train)\nx_test = np.array(x_test)\n\nx_train = x_train.reshape(x_train.shape[0],128,128,3).astype('float32')\nx_test = x_test.reshape(x_test.shape[0],128,128,3).astype('float32')\n\nx_train = x_train \/ 255\nx_test = x_test \/ 255\n\nprint(x_train.shape)\nprint(x_test.shape)","f98848d9":"input_img = Input(shape=(128,128,3))\nx = Conv2D(64,(3,3), activation='relu', padding='same')(input_img)\nx = MaxPooling2D((2,2), padding='same')(x)\nx = Conv2D(32,(3,3), activation='relu', padding='same')(x)\nx = MaxPooling2D((2,2), padding='same')(x)\nx = Conv2D(32,(3,3), activation='relu', padding='same')(x)\nencoded = MaxPooling2D((2,2), padding='same', name='encoder')(x)\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(encoded)\nx = UpSampling2D((2, 2))(x)\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nx = UpSampling2D((2, 2))(x)\nx = Conv2D(64, (3, 3), activation='relu', padding='same')(x)\nx = UpSampling2D((2, 2))(x)\ndecoded = Conv2D(3, (3, 3), activation='sigmoid', padding='same')(x)\n\nautoencoder = Model(input_img, decoded)\n\nautoencoder.summary()","7bfeadb1":"checkpoint = ModelCheckpoint('\/kaggle\/working\/model.h5',\n                             monitor = 'val_loss',\n                             mode = 'min',\n                             save_best_only=True,\n                             verbose = 1\n                            )\n\ncallbacks = [checkpoint]","b33da30f":"autoencoder.compile(optimizer='adam', loss='mse', metrics=['accuracy'])\n\nautoencoder.fit(x_train, x_train, \n                epochs=300, \n                validation_split = 0.1,\n                batch_size=8,\n                callbacks = callbacks,\n               verbose = 1)","35319856":"encoder = Model(inputs=autoencoder.input, outputs = autoencoder.get_layer('encoder').output)","19fde06d":"path_test = '..\/input\/image-retrieval-3\/Image Retrieval\/Test_Images\/'\n\ntest_images = []\n\nfor images in os.listdir(path_test):\n    path_full = os.path.join(path_test, images)\n    img = cv2.imread(path_full)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    test_images.append(img)","4c325665":"print('Enter a random number from (0-9)')\nx = int(input())","57c80b92":"plt.imshow(test_images[x])","4a9c04bc":"# First step: Preprocessing\n\n# 1. Resizing the test image and reshape\n\ntest_images[x] = cv2.resize(test_images[x], (128,128), interpolation = cv2.INTER_NEAREST)\ntest_images[x] = test_images[x].reshape(1,128,128,3)\n\n# 2. Encode the image to be searched and test set\n# (We have to encode (Encoder Network) both the image to be searched and the dataset, where the image is been searched)\n# (Then their similarity in latent representation will be considered for finding the similar images in the dataset)\n# (The Algorithm to be used is KNN)\n\ntestset_encode = encoder.predict(x_test)\ntest_encode = encoder.predict(test_images[x])\n\nprint(testset_encode.shape) # the encoder dimension (16x16x8)\nprint(test_encode.shape)","c93e4139":"print('Number of images to be printed from the dataset, which is similar to the input image')\ny = int(input())","56e198c9":"testset_encode = testset_encode.reshape(-1,16*16*32)\ntest_encode = test_encode.reshape(-1,16*16*32)\n\nprint(testset_encode.shape)\nprint(test_encode.shape)\n\nKNN = NearestNeighbors(n_neighbors= y).fit(testset_encode) # training on encoded dataset\ndist, ind = KNN.kneighbors(np.array(test_encode))\nsimil_img = x_test[ind]\nsimil_img = simil_img.reshape(-1,128,128,3)\nprint(simil_img.shape)","22f4a327":"plt.figure(figsize=(20, 6))\nfor i in range(y):\n    ax = plt.subplot(1, y, i+1)\n    plt.imshow(simil_img[i])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n    \nplt.show()","c56939c8":"# Task Challenge: Image Retrieval System using Autoencoders\n\n\n- By Sachin Saj (sachin96saj@gmail.com)","f1edc2a2":"### Testing","c4289e02":"### Simple Autoencoder Model","76efa574":"### Data Loading & Preprocessing","1877f2fc":"### Importing libraries","f779838e":"### Considering the encoder part\n\n- The encoder part represents the first part of the architecture.\n- Now, we have made the enocder to learn the way to encode our images into latent-space representation.\n- The latent representation is what we are interested. The model (encoder) has learned, how to compress the visual content of an image, thus it means that all the similar images will be encoded in a similar way (this point will help us to retrieve similar images from our dataset)\n- Encoder dimension in this case is 16x16x8","8119e0f7":"### Spliting the data into train & test"}}