{"cell_type":{"757cba0c":"code","3dbaa811":"code","764bbd27":"code","2277fd5f":"code","8457b9a3":"code","ca5bf464":"code","3e8e34b3":"code","24f7a049":"code","4f4ab779":"code","52a9a724":"code","4e3b423e":"code","10bb327a":"code","9d7ff6de":"code","cc20f1e9":"markdown","87c479db":"markdown","e406e18f":"markdown","ce38669a":"markdown","5080f9a8":"markdown","5e2a82ee":"markdown","0cef9f9b":"markdown","9f5eee26":"markdown","3e3cdd0f":"markdown","88256e39":"markdown","5cb54c96":"markdown","d2a013bd":"markdown","401643f4":"markdown","0a13db0e":"markdown"},"source":{"757cba0c":"# Numpy for numerical computing\nimport numpy as np\n\n# Pandas for Dataframes\nimport pandas as pd\npd.set_option('display.max_columns',100)\n\n# Matplolib for visualization\nfrom matplotlib import pyplot as plt\n# display plots in the notebook\n%matplotlib inline\n\n# Seaborn for easier visualization\nimport seaborn as sns\n\n# Datetime deal with dates formats\nimport datetime as dt","3dbaa811":"train = pd.read_csv('..\/input\/sales_train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nitems = pd.read_csv('..\/input\/items.csv')\nitems_categories = pd.read_csv('..\/input\/item_categories.csv')\nshops = pd.read_csv('..\/input\/shops.csv')","764bbd27":"# Dataframe dimensions\nprint('The dimension of the training set is:',train.shape,'\\n')\nprint('The feature types are:\\n', train.dtypes,'\\n')\nprint('Number of missing values:\\n',train.isnull().sum())\ntrain.head(3)","2277fd5f":"print('The dimension of the test set is:',test.shape,'\\n')\nprint('The feature types are:\\n', test.dtypes,'\\n')\nprint('Number of missing values:\\n',test.isnull().sum())\ntest.head(3)","8457b9a3":"print('The dimension of the items set is:',items.shape,'\\n')\nprint('The feature types are:\\n', items.dtypes,'\\n')\nprint('Number of missing values:\\n',items.isnull().sum())\nitems.head(3)","ca5bf464":"print('The dimension of the items categories is:',items_categories.shape,'\\n')\nprint('The feature types are:\\n', items_categories.dtypes,'\\n')\nprint('Number of missing values:\\n', items_categories.isnull().sum())\nitems_categories.head(3)","3e8e34b3":"print('The dimension of the shops set is:',shops.shape,'\\n')\nprint('The feature types are:\\n', shops.dtypes,'\\n')\nprint('Number of missing values:\\n', shops.isnull().sum())\nshops.head(3)","24f7a049":"# Change the date type\ndate = train.date.apply(lambda x:dt.datetime.strptime(x, '%d.%m.%Y'))\n\n# Create 3 new features for year, month and day\ntrain['year'] = date.dt.year\ntrain['month'] = date.dt.month\ntrain['day'] = date.dt.day\ntrain.head()\n\n# Remove the \"date\" feature\ntrain = train.drop('date', axis=1)","4f4ab779":"# Add the \"item_category_id\" to the dataset\ntrain = pd.merge(train, items.drop('item_name', axis=1), on='item_id')\ntrain.head()","52a9a724":"# Create \"revenue\" feature\ntrain['revenue'] = train.item_price*train.item_cnt_day\ntrain.head()","4e3b423e":"# Plot the total number of products sold by year\ntrain.groupby('year').item_cnt_day.sum().plot()\nplt.xticks(np.arange(2013, 2016, 1))\nplt.xlabel('Year')\nplt.ylabel('Total number of products sold')\nplt.show()\n\n# Plot the total number of products sold by month for each year\ntrain.groupby(['month','year']).sum()['item_cnt_day'].unstack().plot()\nplt.xlabel('Month')\nplt.ylabel('Total number of products sold')\nplt.show()","10bb327a":"# Plot the total revenue by year\ntrain.groupby('year').revenue.sum().plot()\nplt.xticks(np.arange(2013, 2016, 1))\nplt.xlabel('Year')\nplt.ylabel('Total revenue')\nplt.show()\n\n# Plot the total revenue by month for each year\ntrain.groupby(['month','year']).sum()['revenue'].unstack().plot()\nplt.xlabel('Month')\nplt.ylabel('Total revenue')\nplt.show()","9d7ff6de":"# Plot the top 10 items\nsns.countplot(y='item_id', hue='year', data=train, order = train['item_id'].value_counts().iloc[:10].index)\nplt.xlim(0,20000)\nplt.xlabel('Number of times the item was sold')\nplt.ylabel('Identifier of the item')\nplt.show()\n\n# Plot the top 10 shops\nsns.countplot(y='shop_id', hue='year', data=train, order = train['shop_id'].value_counts().iloc[:10].index)\nplt.xlabel('Number of times the shop sold')\nplt.ylabel('Identifier of the shop')\nplt.show()","cc20f1e9":"<h1 style=\"font-size:18px\">Import libraries<\/h1>","87c479db":"<h1 style=\"font-size:18px\">File description<\/h1>\n* sales_train.csv - the training set. Daily historical data from January 2013 to October 2015.\n* test.csv - the test set. You need to forecast the sales for these shops and products for November 2015.\n* sample_submission.csv - a sample submission file in the correct format.\n* items.csv - supplemental information about the items\/products.\n* item_categories.csv  - supplemental information about the items categories.\n* shops.csv- supplemental information about the shops.","e406e18f":"<br id=\"numeric\">\n# 3. Numeric features\nTo ease up the study of the numeric features, we will look the data throught grouping it by year and month to see if there is any possible seasonability.<br>\n<br>\nFirstly we will analyze the feature item_cnt_day, which gives the number of products sold.","ce38669a":"We can see that the number of sold products are decreasing over the years.<br>\nLooking at the months, the sales seems to vary in a certain range until October, and then the sales start to increase greatly.<br>\n<br>\nNow let's check the revenue behavior.","5080f9a8":"The item 20949 is the sales champion over the years by far!<br>\nThe top 10 shops have similar sales behavior over the years.","5e2a82ee":"Checking the dataset we can see that there is a feature that might be missing in the **train set**: item_category_id.<br> \nThe **item_category_id** and the **item_id** are related at **items set**. Thus, we can create another feature for these categories.","0cef9f9b":"<br id=\"basic\">\n# 1. Basic Information\nLet's first check some informations about the dataset for each loaded file, as:\n* Dimension\n* Features type\n* Number of missing values\n* View the first 3 rows","9f5eee26":"<span style=\"font-size:18px\">**Load files**<\/span>","3e3cdd0f":"<h1 style=\"font-size:18px\">About the data<\/h1>\n* ID - an Id that represents a (Shop, Item) tuple within the test set\n* shop_id - unique identifier of a shop\n* item_id - unique identifier of a product\n* item_category_id - unique identifier of item category\n* item_cnt_day - number of products sold. You are predicting a monthly amount of this measure\n* item_price - current price of an item\n* date - date in format dd\/mm\/yyyy\n* date_block_num - a consecutive month number, used for convenience. January 2013 is 0, February 2013 is 1,..., October 2015 is 33\n* item_name - name of item\n* shop_name - name of shop\n* item_category_name - name of item category","88256e39":"So far the data looks pretty good. There is no missing values, and the features seems to have the correct type.","5cb54c96":"<h1 style=\"font-size:30px\">Predict Future Sales - EDA<\/h1>\n<br>\nThe problem is based on a time-series dataset consisting of daily sales data provided by one of the largest Russian software firms - 1C Company, which is available as a Kaggle competition.<br>\n<hr>\n<h1 style=\"font-size:18px\">Objective<\/h1>\n<br>\nInitially we aim to understand and analyze the data, and then to predict total sales for every product and store in the next month.<br>\nThis kernel is the first part of the scope.\n<hr>\n<h1 style=\"font-size:18px\">Content<\/h1>\n<br>\nThis kernel will be divided into:\n1. <a href=\"#basic\">Basic Information<\/a>\n2. <a href=\"#engineering\">Feature Engineering<\/a>\n3. <a href=\"#numeric\">Numeric Features<\/a>","d2a013bd":"The revenue behavior is a little different from the number of total sales.<br>\nIn 2014 the total revenue increased, even though the number of total sales decreased from 2013. This is due to the \"item_price\" variable, which can fluctuate by the time.<br>\nWe can also observe that, over the months, even though the number of sales product decreased, the revenue seems similar for the three years.<br>\n<br>\nLet's look at the top 10 items and the top 10 shops.","401643f4":"As we have the current price of the item (item_price) and the number of items sold (item_cnt_day) features, we can create another feature called \"revenue\" by their dot multiplication.","0a13db0e":"<br id=\"engineering\">\n# 2. Feature Engineering\n\nBefore we continue, let's do some preliminary feature engineering to make the data easier to deal with.<br>\n<br>\nFirstly, let's change the date type, from object to datetime. Then divide de **date** feature to create 3 new columns for **year**, **month** and **day**."}}