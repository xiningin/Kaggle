{"cell_type":{"144476e6":"code","f962549c":"code","a3057aae":"code","8bfe3fa4":"code","63b9bf86":"code","dc90a014":"code","1a48f825":"code","3a817bc0":"code","9387b89e":"code","f059fb3f":"code","e920538e":"code","88e23978":"code","4e8e43fa":"code","57a4b22e":"code","b150bb09":"code","486ab791":"code","57c597ab":"code","a0f8111e":"code","c7a496af":"markdown","c799d76f":"markdown","3222b23e":"markdown","74f5b3d1":"markdown","e54124da":"markdown","5806f67e":"markdown","4bd4f2af":"markdown","09df991e":"markdown","2f0d11dc":"markdown"},"source":{"144476e6":"!pip install keras-tuner --upgrade","f962549c":"import numpy as np\nimport pandas as pd\nimport os\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split, KFold\nimport keras_tuner as kt","a3057aae":"train_pd = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_pd = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntrain = np.array(train_pd)\ntest = np.array(test_pd)\ntrain_images = train[:, 1:].reshape((train.shape[0], 28, 28, 1))\ntrain_labels = train[:, 0].astype(np.uint8)\ntest_images = test.reshape((test.shape[0], 28, 28, 1))","8bfe3fa4":"train_pd.head()","63b9bf86":"train_pd.describe()","dc90a014":"correlation_score = train_pd.corr()","1a48f825":"correlated_features = correlation_score[\"label\"].sort_values(ascending=False).dropna()\ncorrelated_columns = list(correlated_features[correlated_features.abs() > 0.2].index)\ncorrelated_columns.remove(\"label\")\nprint(correlated_columns)","3a817bc0":"train_pd.groupby(\"label\")[\"label\"].count().plot(kind=\"pie\")","9387b89e":"mean_images = [np.mean(train_images[train_labels == i].reshape(-1, 28, 28), axis=0) for i in range(10)]\nconcat_image = np.concatenate(mean_images, axis=1)\nprint(concat_image.shape)\nplt.imshow(concat_image)\nplt.show()","f059fb3f":"train_images, val_images, train_labels, val_labels = train_test_split(train_images, train_labels)","e920538e":"train_labels = keras.utils.to_categorical(train_labels, num_classes=10)\nval_labels = keras.utils.to_categorical(val_labels, num_classes=10)","88e23978":"tuner = kt.RandomSearch(\n    kt.applications.HyperResNet(input_shape=(28, 28, 1), classes=10),\n    objective='val_loss',\n    max_trials=5)","4e8e43fa":"tuner.search(train_images, train_labels, epochs=5, validation_data=(val_images, val_labels))","57a4b22e":"best_model = tuner.get_best_models()[0]","b150bb09":"best_model.summary()","486ab791":"test_labels = np.argmax(best_model.predict(test_images), axis=-1)\nprint(test_labels.shape)","57c597ab":"sample_submission = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")\nsample_submission[\"Label\"] = test_labels\nsample_submission.to_csv(\"submission.csv\", index=False)","a0f8111e":"image_ids = np.arange(1, test_labels.shape[0]+1)\nresult = np.concatenate((image_ids.reshape(image_ids.shape[0], 1), test_labels.reshape(test_labels.shape[0], 1)), axis=1)\ndf = pd.DataFrame(result, columns=[\"ImageId\", \"Label\"], dtype='int')\ndf.to_csv(\"submission.csv\", index=False)","c7a496af":"## Submission","c799d76f":"## Exploratory Data Analysis","3222b23e":"## Loading the data","74f5b3d1":"# MNIST classification with KerasTuner HyperModels\n## Table of Contents\n- Summary\n- Importing necessary Libraries\n- Loading the data\n- Exploratory Data Analysis\n- Model Development\n- Submission\n\n## Summary\nIn this notebook I will build a MNIST Classifer based on KerasTuner HyperModels. KerasTuner offers two implementations:\n- HyperResNet\n- HyperXception\n\nYou can also make your own implementation. You can find more details [here](https:\/\/keras.io\/api\/keras_tuner\/hypermodels\/).\n## Importing necessary Libraries","e54124da":"Calcuate mean image for different labels, they look exactly the label they belong to.","5806f67e":"## Model Development","4bd4f2af":"**Correlation Score**","09df991e":"**Label Distribution**","2f0d11dc":"**Mean image for different labels**"}}