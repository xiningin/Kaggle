{"cell_type":{"11f2349e":"code","0d026d10":"code","b4b7885e":"code","eb10b513":"code","5bcd3452":"code","11ca835e":"code","e848100a":"code","5a929399":"code","550e97a4":"code","bf8ba488":"code","e82581c9":"code","834c998b":"code","83f061f9":"code","cb83b828":"code","10e0953c":"code","3325378c":"code","c241ac64":"code","9165c845":"code","69a9a723":"code","a7168c06":"code","fa51cf2a":"code","257ba88a":"code","8a44651f":"code","397bc98c":"code","f88eaff2":"code","87d5bbe3":"code","8e2e9e1d":"code","0e761591":"code","52cafb21":"code","4ce8acc0":"code","47f53db5":"code","21b79604":"code","4293335e":"code","71525450":"code","3aa594a9":"code","92e66cad":"markdown","b02d508e":"markdown","5bb87b35":"markdown"},"source":{"11f2349e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('..\/input\/ml-in-graphs-hw0\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d026d10":"!python -m pip install snap-stanford","b4b7885e":"import snap","eb10b513":"G_small = snap.TNGraph.New()","5bcd3452":"G_small.AddNode(1)\nG_small.AddNode(2)\nG_small.AddNode(3)\n","11ca835e":"G_small.AddEdge(1,2)\nG_small.AddEdge(2,1)\nG_small.AddEdge(1,3)\nG_small.AddEdge(1,1)","e848100a":"path = '..\/input\/ml-in-graphs-hw0\/wiki-Vote.txt'\nG = snap.LoadEdgeList(snap.PNGraph, path, 0, 1)","5a929399":"# The number of nodes in the network. (G small has 3 nodes.)\nG.GetNodes()","550e97a4":"# The number of nodes with a self-edge (self-loop), i.e., the number of nodes a \u2208 V where (a, a) \u2208 E. (G small has 1 self-edge.)\nsnap.CntSelfEdges(G)","bf8ba488":"# The number of directed edges in the network, i.e., the number of ordered pairs (a, b) \u2208 E for which a 6 = b. (G small has 3 directed edges.)\nsnap.CntUniqDirEdges(G)","e82581c9":"# The number of undirected edges in the network, i.e., the number of unique unordered pairs (a, b), a 6 = b, for which (a, b) \u2208 E or (b, a) \u2208 E (or both). If both (a, b) and (b, a) are edges, this counts a single undirected edge. (G small has 2 undirected edges.)\nsnap.CntUniqUndirEdges(G)","834c998b":"# The number of reciprocated edges in the network, i.e., the number of unique unordered pairs of nodes (a, b), a 6 = b, for which (a, b) \u2208 E and (b, a) \u2208 E. (G small has 1 reciprocated edge.)\nsnap.CntUniqBiDirEdges(G)","83f061f9":"# The number of nodes of zero out-degree. (G small has 1 node with zero out-degree.)\nDegToCntV = snap.TIntPrV()\nsnap.GetOutDegCnt(G, DegToCntV)\ncnt=0\nfor item in DegToCntV:\n    if item.GetVal1()==0:\n        cnt=item.GetVal2()\nprint(cnt)    ","cb83b828":"# The number of nodes of zero in-degree. (G small has 0 nodes with zero in-degree.)\nDegToCntV = snap.TIntPrV()\nsnap.GetInDegCnt(G, DegToCntV)\ncnt=0\nfor item in DegToCntV:\n    if item.GetVal1()==0:\n        cnt=item.GetVal2()\nprint(cnt)","10e0953c":"# The number of nodes with more than 10 outgoing edges (out-degree > 10). \nDegToCntV = snap.TIntPrV()\nsnap.GetOutDegCnt(G, DegToCntV)\ncnt=0\nfor item in DegToCntV:\n    if item.GetVal1()>10:\n        cnt+=item.GetVal2()\nprint(cnt)","3325378c":"# The number of nodes with fewer than 10 incoming edges (in-degree < 10).\nDegToCntV = snap.TIntPrV()\nsnap.GetInDegCnt(G, DegToCntV)\ncnt=0\nfor item in DegToCntV:\n    if item.GetVal1()<10:\n        cnt+=item.GetVal2()\nprint(cnt)","c241ac64":"from matplotlib import pyplot","9165c845":"DegToCntV = snap.TIntPrV()\nsnap.GetOutDegCnt(G, DegToCntV)\nx=[]\ny=[]\nfor item in DegToCntV:\n    if item.GetVal1()>0:\n        x.append(np.log10(item.GetVal1()))\n        y.append(np.log10(item.GetVal2()))","69a9a723":"pyplot.plot(x,y)\npyplot.xlabel('Out-deegree')\npyplot.ylabel('Number of Nodes')\npyplot.title('Distribution of out-degrees')","a7168c06":"a,b = np.polyfit(x, y, 1.3)\nprint(a,b)","fa51cf2a":"pyplot.plot(x,y)\npyplot.xlabel('Out-deegree')\npyplot.ylabel('Number of Nodes')\npyplot.title('Distribution of out-degrees')\n\nx2=np.linspace(min(x),max(y),100)\npyplot.plot(x2,a*x2+b)\npyplot.legend(['Data line','Regression line'])\n","257ba88a":"path = '..\/input\/ml-in-graphs-hw0\/stackoverflow-Java.txt'\nG2 = snap.LoadEdgeList(snap.PNGraph, path, 0, 1)","8a44651f":"G2.GetNodes()","397bc98c":"G2.GetEdges()","f88eaff2":"# The number of weakly connected components in the network.\nComponents = snap.TCnComV()\nsnap.GetWccs(G2, Components)\nComponents.Len()","87d5bbe3":"# The number of edges and the number of nodes in the largest weakly connected component. \nMxWcc = snap.GetMxWcc(G2)\nprint(MxWcc.GetEdges(), MxWcc.GetNodes())","8e2e9e1d":"# IDs of the top 3 most central nodes in the network by PagePank scores.\nPRankH = snap.TIntFltH()\nsnap.GetPageRank(G2, PRankH)","0e761591":"pr_list=[]\nfor item in PRankH:\n    pr_list.append([item, PRankH[item]])","52cafb21":"pr=pd.DataFrame(pr_list,columns=['Node','PageRank']).sort_values(by='PageRank',ascending=0)","4ce8acc0":"pr[0:3]","47f53db5":"# IDs of the top 3 hubs and top 3 authorities in the network by HITS scores.","21b79604":"NIdHubH = snap.TIntFltH()\nNIdAuthH = snap.TIntFltH()\nsnap.GetHits(G2, NIdHubH, NIdAuthH)\nhubs_list=[]\naths_list=[]\nfor item in NIdHubH:\n    hubs_list.append([item, NIdHubH[item]])\nfor item in NIdAuthH:\n    aths_list.append([item, NIdAuthH[item]])","4293335e":"hubs=pd.DataFrame(hubs_list,columns=['Node','HITS']).sort_values(by='HITS',ascending=0)\naths=pd.DataFrame(aths_list,columns=['Node','HITS']).sort_values(by='HITS',ascending=0)","71525450":"hubs[:3]","3aa594a9":"aths[:3]","92e66cad":"Finding Experts on the Java Programming Language on StackOverflow [40 points] Download the StackOverflow network stackoverflow-Java.txt.gz: http:\/\/snap.stanford.edu\/class\/cs224w-data\/hw0\/stackoverflow-Java.txt.gz. An edge (a, b) in the network means that person a endorsed an answer from person b on a Java-related question. Using one of the network analysis tools above, load the StackOverflow network. Note that StackOverflow is a directed network. Compute and print out the following statistics for the stackoverflow-Java network:\n\nThe number of weakly connected components in the network. This value can be calculated in Snap.py via function GetWccs. The number of edges and the number of nodes in the largest weakly connected component. The largest weakly connected component is calculated in Snap.py with function GetMxWcc. IDs of the top 3 most central nodes in the network by PagePank scores. PageRank scores are calculated in Snap.py with function GetPageRank. IDs of the top 3 hubs and top 3 authorities in the network by HITS scores. HITS scores are calculated in Snap.py with function GetHits. You can find more details about this exercise on the Snap.py tutorial page: http:\/\/snap.stanford.edu\/proj\/snap-icwsm\/. As an extra exercise, extend the tutorial to find experts in other programming languages or topics.","b02d508e":"(18 points) Plot the distribution of out-degrees of nodes in the network on a log-log scale. Each data point is a pair (x, y) where x is a positive integer and y is the number of nodes in the network with out-degree equmal to x. Restrict the range of x between the minimum and maximum out-degrees. You may filter out data points with a 0 entry. For the log-log scale, use base 10 for both x and y axes****","5bb87b35":"(15 points) Compute and plot the least-square regression line for the out-degree distribution in the log-log scale plot. Note we want to find coefficients a and b such that the function log 10 y = a \u00b7 log 10 x + b, equivalently, y = 10 b \u00b7 x a , best fits the out-degree distribution. What are the coefficients a and b? For this part, you might want to use the method called polyfit in NumPy with deg parameter equal to 1. 3|"}}