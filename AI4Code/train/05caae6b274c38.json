{"cell_type":{"a5845121":"code","102b8ce7":"code","e351e891":"code","635135c9":"code","7b23da11":"code","e5a66080":"code","0a64c510":"code","98849dd8":"code","55c9acef":"code","37855d9f":"code","d106bb17":"code","ff17def2":"code","3c42d9da":"code","76058d93":"code","ed3c0d22":"code","5237d9e5":"code","9f386f20":"code","a2ea1bd5":"code","b6352259":"code","df19e588":"code","12fd01b9":"code","b7cbe14d":"code","1722d29e":"code","11686c6c":"code","1d10c7a8":"code","4faee1cc":"code","3499ca8b":"code","9b7bb9f7":"code","c46322dc":"code","551d9e5d":"code","0772cf8b":"code","2ddd950a":"code","a0f8d5ba":"code","442be8ed":"code","1c501de5":"code","9bfba3c0":"code","0ea17ec4":"code","bed2c9c2":"code","5961d986":"code","d757197f":"code","daabc6dc":"code","6794a4f2":"code","f30a50c3":"code","dabce2cc":"code","6b526d37":"code","c63c9f2a":"code","cb95db87":"code","8e5ede9e":"code","2669c489":"code","ea850da4":"code","91c56484":"code","ea4f91bc":"code","db6591c1":"code","ca849bb3":"code","d12efdec":"code","963319b7":"code","3df8afff":"code","f0ba5059":"markdown","ad748e2c":"markdown","fc4382e6":"markdown","dde20695":"markdown"},"source":{"a5845121":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style()\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","102b8ce7":"import os\n\nprint(os.listdir(\"..\/input\/\"))\ndf=pd.read_csv('..\/input\/airplane-crashes-since-1908\/Airplane_Crashes_and_Fatalities_Since_1908.csv')","e351e891":"df.shape","635135c9":"df.info()","7b23da11":"df.describe()","e5a66080":"vals=[]\nfor col in df.columns:\n    vals.append(len(df[col].unique()))\npd.DataFrame(data=vals,index=df.columns,columns=['Unique_Values'])","0a64c510":"perc_na = pd.Series(round(df.isnull().sum()\/len(df), 3), name='Percentage_of_NA')\nnum_na = pd.Series(df.isnull().sum(),name='Number_of_NA')\npd.concat([perc_na,num_na],axis=1)","98849dd8":"# Printing anonymous values in Time Variable.\nfor i in df.Time.dropna():\n    try:\n        pd.to_datetime(i)\n    except:\n        print(i)","55c9acef":"# Correcting the anonymous values in Time variable.\ndf.Time=df.Time.replace({\"c: 1:00\":'1:00', \"c:17:00\":'17:00', \"c: 2:00\":'2:00', \"c:09:00\":'09:00',\n                         \"c16:50\":'16:50', \"12'20\":'12:20', \"18.40\":'18:40', \"c:09:00\":'09:00',\n                         \"114:20\":'14:20', \"c14:30\":'14:30', \"0943\":'09:43', \"22'08\":'22:08', \"c: 9:40\":'9:40'})","37855d9f":"# Converting Time variable from time to part of day type.\nhour,mins='',''\ndef get_hours(time):\n    if type(time) == float:\n        return 'Unknown'\n    \n    hour, mins=[int(i) for i in time.split(':')]\n    if mins > 30:\n        hour+=1\n    \n    if hour <= 4:\n        return'Late Night'\n    if hour <= 8:\n        return 'Early Morning'\n    elif hour <= 12:\n        return 'Morning'\n    elif hour <= 16:\n        return'Noon'\n    elif hour <= 20:\n        return 'Evening'\n    else:\n        return'Night'","d106bb17":"df.Time=df.Time.apply(get_hours)","ff17def2":"# Getting only the countries from the location variable.\nloc=[]\ndef get_country(location):\n    if type(location)==float:\n        return \"Unknown\"\n    \n    loc=location.split(',')\n    return loc[len(loc)-1].replace(\" \",'').lower().replace(\"off \",'')","3c42d9da":"df.Location=df.Location.apply(get_country)","76058d93":"df.dropna(subset=['Operator'],inplace=True)","ed3c0d22":"df.drop('Flight #',axis=1,inplace=True)","5237d9e5":"df.drop('Route',axis=1,inplace=True)","9f386f20":"df[df.Type.isnull()==True]","a2ea1bd5":"df.dropna(subset=['Type'],inplace=True)","b6352259":"df.drop('Registration',axis=1,inplace=True)","df19e588":"df.drop('cn\/In',axis=1,inplace=True)","12fd01b9":"df[df.Ground.isnull()==True]","b7cbe14d":"df.Ground=df.Ground.fillna(df.Ground.median())","1722d29e":"df[df.Aboard.isnull()==True]","11686c6c":"# Dropping rows where any aboard and fatalities are having NAN values \n# because they dont have any value to our purpose.\ndf.dropna(subset=['Aboard','Fatalities'],how='any',inplace=True)","1d10c7a8":"df.dropna(subset=[\"Summary\"],inplace=True)","4faee1cc":"df.shape","3499ca8b":"# Returns only year.\ndef get_year(date):\n    return date.split('\/')[2]","9b7bb9f7":"df.Date=df.Date.apply(get_year)","c46322dc":"df.Date=df.Date.astype(int)","551d9e5d":"crshs=pd.DataFrame(df.Date.value_counts())\n\nplt.figure(figsize=(15, 5))\nplt.bar(x=crshs.index, height=crshs[\"Date\"])\nplt.title(\"Number of Crashes each Year\")\nplt.show()","0772cf8b":"abor=pd.DataFrame(df.Aboard.groupby(df.Date).sum())\n\nplt.figure(figsize=(15, 5))\nplt.bar(x=abor.index, height=abor[\"Aboard\"])\nplt.title(\"Number of People Aboard each Year\")\nplt.show()","2ddd950a":"fatals=pd.DataFrame(df.Fatalities.groupby(df.Date).sum())\n\nplt.figure(figsize=(15, 5))\nplt.bar(x=fatals.index, height=fatals[\"Fatalities\"])\nplt.title(\"Number of People died in Plane each Year\")\nplt.show()","a0f8d5ba":"grd=pd.DataFrame(df.Ground.groupby(df.Date).sum())\n\nplt.figure(figsize=(15, 5))\nplt.bar(x=grd.index, height=grd[\"Ground\"])\nplt.title(\"Number of People died in Ground each Year\")\nplt.show()","442be8ed":"sur=pd.DataFrame({\"Survived\":df.Aboard-df.Fatalities},index=df.Date).index.value_counts()\n\nplt.figure(figsize=(15, 5))\nplt.bar(x=sur.index, height=sur.values)\nplt.title(\"Number of People survived each Year\")\nplt.show()","1c501de5":"ded=pd.DataFrame({\"Dead\":df.Fatalities+df.Ground},index=df.Date).index.value_counts()\n\nplt.figure(figsize=(15, 5))\nplt.bar(x=ded.index, height=ded.values)\nplt.title(\"Number of People Died each Year\")\nplt.show()","9bfba3c0":"# Top 7 Plane Operators which involved in crashes.\npd.DataFrame(df.Operator.value_counts().sort_values(ascending=False)[:10])","0ea17ec4":"# Top 10 Plane Types which involved in crashes.\npd.DataFrame(df.Type.value_counts().sort_values(ascending=False))[:10]","bed2c9c2":"# Top 10 Countries which had most Plane crashes.\npd.DataFrame(df.Location.value_counts().sort_values(ascending=False))[:10]","5961d986":"plt.figure(figsize=(15, 5))\nsns.countplot(x=df.Time)\nplt.title(\"Time of Day VS Number of Crashes\")\nplt.show()","d757197f":"plt.figure(figsize=(15, 5))\nsns.barplot(data=df, x=df.Time, y=df.Aboard)\nplt.title(\"Time of Day VS People onboard\")\nplt.show()","daabc6dc":"plt.figure(figsize=(15, 5))\nsns.barplot(data=df, x=df.Time, y=df.Fatalities)\nplt.title(\"Time of Day VS Fatalities\")\nplt.show()","6794a4f2":"# Analyzing Quantitative variables.\nplt.figure(figsize=(30, 5))\nind = 1\n\nfor col in df.loc[:,'Aboard':'Ground'].columns:\n    plt.subplot(1, 3, ind)\n    sns.boxplot(x=df[col])\n    ind += 1","f30a50c3":"df['Time_Of_Day']=df.Time.replace({\"Unknown\":0, \"Late Night\":1, \"Early Morning\":2, \"Morning\":3,\n                                   \"Noon\":4, \"Evening\":5, \"Night\":6})","dabce2cc":"df_quant=[col for col in df.columns if df[col].dtype != object]\ndf_quant=df[df_quant]\ndf_quant.head(2)","6b526d37":"from sklearn.preprocessing import StandardScaler\ndef data_scaling(dataframe,inverse=False):\n    scaler=StandardScaler()\n    \n    if inverse == False:\n        return scaler.fit_transform(dataframe)\n    else:\n        scaler.fit(dataframe)\n        return scaler.inverse_transform(dataframe)","c63c9f2a":"df_quant_scaled=data_scaling(df_quant)","cb95db87":"from sklearn.cluster import KMeans\n\n# Obtain optimal number of clusters\nscores_1 = []\n\nrange_values = range(1, 10)\n\nfor i in range_values:\n  kmeans = KMeans(n_clusters = i)\n  kmeans.fit(df_quant_scaled)\n  scores_1.append(kmeans.inertia_) \n\nplt.plot(scores_1, 'bx-')\nplt.title('Finding the right number of clusters')\nplt.xlabel('Clusters')\nplt.ylabel('Scores') \nplt.show()","8e5ede9e":"# Build the KMeans model\nkmeans = KMeans(3)\nkmeans.fit(df_quant_scaled)","2669c489":"cluster_centers = pd.DataFrame(data = kmeans.cluster_centers_, columns = [df_quant.columns])\ncluster_centers","ea850da4":"cluster_centers = data_scaling(cluster_centers,inverse=True)\ncluster_centers = pd.DataFrame(data = cluster_centers, columns = [df_quant.columns])\ncluster_centers","91c56484":"# concatenate the clusters labels to our original dataframe\ndf_cluster = pd.concat([df, pd.DataFrame({'cluster':kmeans.labels_})], axis = 1)\ndf_cluster.head()","ea4f91bc":"pd.crosstab(index=df_cluster['cluster'],columns='count')","db6591c1":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nprincipal_comp = pca.fit_transform(df_quant_scaled)\nprincipal_comp","ca849bb3":"pca_df = pd.DataFrame(data = principal_comp, columns =['pca1','pca2'])\npca_df.head()","d12efdec":"pca_df = pd.concat([pca_df,pd.DataFrame({'cluster':kmeans.labels_})], axis = 1)\npca_df.head()","963319b7":"plt.figure(figsize=(10,10))\nax = sns.scatterplot(x=\"pca1\", y=\"pca2\", hue = \"cluster\", data = pca_df, palette =['red','green','blue'])\nplt.show()","3df8afff":"pca.explained_variance_ratio_","f0ba5059":"# PCA","ad748e2c":"# Airplane Crashes","fc4382e6":"-> Time variable has the above anonymous values. We can format it to a correct datetime type.","dde20695":"# K-Means Clustering"}}