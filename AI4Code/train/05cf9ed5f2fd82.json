{"cell_type":{"0fc837ed":"code","cd46a471":"code","a218d3ff":"code","61f09a4f":"code","64b2ae81":"code","cf4cc300":"code","6abbb15f":"code","25c183b0":"code","911a4135":"code","3b4b5d54":"code","bd5a6bad":"code","cf8fa472":"code","f0cf058a":"code","1187041d":"code","a0ca9c36":"code","fc8f99aa":"code","05991b2a":"code","f7d85b89":"code","13b741f6":"code","1aefc491":"code","04d6ce14":"code","741cb092":"code","f9638674":"code","4b877084":"code","0b6476cb":"code","866b41e3":"code","91650e1d":"code","b67e7dbb":"code","fbed9a79":"code","9da12a82":"code","a3885444":"code","c973537b":"code","df91feea":"code","94fe3c22":"code","652dff1a":"code","69b993cd":"code","c24515a4":"code","f55a0259":"code","59dd8030":"code","27498d7b":"code","9f246531":"code","f398b72f":"code","b01dc0c3":"code","181360b2":"code","ad18f392":"code","b96667e5":"code","038f2d24":"code","9eefc525":"code","5da16d73":"code","b65bcf96":"code","017c5f90":"code","548b755c":"code","b0e2e39a":"code","17a57c9b":"code","d570a930":"code","5f07a3c6":"code","56fb61ad":"code","b966abd4":"code","934d3be9":"code","85731d13":"code","8a2b8b51":"code","fb49f0a6":"code","35d7df33":"code","c3590dcb":"code","6cabae27":"code","fe0b8792":"code","ee4238e5":"code","494bfe1e":"code","fa3e31a0":"code","e51b6b3f":"code","9db270d2":"code","59b9b2fa":"code","0f14bafb":"code","1f9fa2b1":"code","1811e0eb":"code","b69c4205":"code","639fd658":"code","3ceee5d4":"code","c65f5a7a":"code","3612a15f":"code","289fe305":"code","340d6b8c":"code","ba193e04":"code","138f7db3":"code","cd7b313e":"code","b2563326":"code","9a16d6ec":"code","8672a3ba":"markdown","5b10c766":"markdown","f5e3ac27":"markdown","ce324304":"markdown","44f8241f":"markdown","f593d477":"markdown","7e076462":"markdown","ed39c98d":"markdown","9afeafac":"markdown","3f85fa51":"markdown","9834c5fa":"markdown","20a294f0":"markdown","c6bfc378":"markdown","dcdb8c3b":"markdown","536d7468":"markdown"},"source":{"0fc837ed":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN,\\\nLSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D,Reshape, Conv2DTranspose, LeakyReLU, GaussianNoise\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.datasets import mnist\nimport keras\n#SKLEARN CLASSIFIER\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","cd46a471":"Main_JPG_Data = Path(\"..\/input\/galaxy-zoo-2-images\/images_gz2\/images\")","a218d3ff":"JPG_Path = list(Main_JPG_Data.glob(r\"*.jpg\"))","61f09a4f":"Another_JPG_Path = JPG_Path[121716:]\nJPG_Path = JPG_Path[0:121716]","64b2ae81":"JPG_Path_Series = pd.Series(JPG_Path,name=\"JPG\").astype(str)","cf4cc300":"print(JPG_Path_Series.head(-1))","6abbb15f":"Another_JPG_Path_Series = pd.Series(Another_JPG_Path,name=\"JPG\").astype(str)","25c183b0":"print(Another_JPG_Path_Series.head(-1))","911a4135":"plt.style.use(\"classic\")","3b4b5d54":"Example_IMG = cv2.imread(JPG_Path_Series[1245])\nplt.xlabel(Example_IMG.shape)\nplt.ylabel(Example_IMG.size)\nplt.imshow(Example_IMG)","bd5a6bad":"Example_IMG = cv2.imread(JPG_Path_Series[11])\nplt.xlabel(Example_IMG.shape)\nplt.ylabel(Example_IMG.size)\nplt.imshow(Example_IMG)","cf8fa472":"Example_IMG = cv2.imread(JPG_Path_Series[21314])\nplt.xlabel(Example_IMG.shape)\nplt.ylabel(Example_IMG.size)\nplt.imshow(Example_IMG)","f0cf058a":"figure,axes = plt.subplots(nrows=5,ncols=5,figsize=(13,13))\nfor i,ax in enumerate(axes.flat):\n    IMG = plt.imread(JPG_Path_Series[i])\n    ax.imshow(IMG)\n    ax.set_xlabel(IMG.size)\n    ax.set_ylabel(IMG.shape)\nplt.tight_layout()\nplt.show()","1187041d":"Example_IMG = cv2.imread(JPG_Path_Series[21314])\nCanny_IMG = cv2.Canny(Example_IMG,5,80)\nplt.xlabel(Canny_IMG.size)\nplt.ylabel(Canny_IMG.shape)\nplt.imshow(Canny_IMG,cmap=\"Greys_r\")","a0ca9c36":"Example_IMG = cv2.imread(JPG_Path_Series[21314])\n_,Thresh_IMG = cv2.threshold(Example_IMG,90,255,cv2.THRESH_BINARY)\nplt.xlabel(Thresh_IMG.size)\nplt.ylabel(Thresh_IMG.shape)\nplt.imshow(Thresh_IMG,cmap=\"Greys_r\")","fc8f99aa":"Example_IMG = cv2.imread(JPG_Path_Series[21314])\nCut_Example_IMG = Example_IMG[120:300,110:310]\nplt.xlabel(Cut_Example_IMG.size)\nplt.ylabel(Cut_Example_IMG.shape)\nplt.imshow(Cut_Example_IMG)","05991b2a":"Example_IMG = cv2.imread(JPG_Path_Series[21314],0)\nCut_Example_IMG = Example_IMG[120:300,110:310]\n\nplt.xlabel(Cut_Example_IMG.size)\nplt.ylabel(Cut_Example_IMG.shape)\nplt.imshow(Cut_Example_IMG,cmap=\"Greys_r\")","f7d85b89":"Example_IMG = cv2.imread(JPG_Path_Series[21314],0)\nCut_Example_IMG = Example_IMG[120:300,110:310]\nAdaptiveThresh_IMG = cv2.adaptiveThreshold(Cut_Example_IMG,200,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY_INV,11,2)\nplt.xlabel(AdaptiveThresh_IMG.size)\nplt.ylabel(AdaptiveThresh_IMG.shape)\nplt.imshow(AdaptiveThresh_IMG,cmap=\"Greys_r\")","13b741f6":"Example_IMG = cv2.imread(JPG_Path_Series[21314],0)\nCut_Example_IMG = Example_IMG[120:300,110:310]\nAdaptiveThresh_IMG = cv2.adaptiveThreshold(Cut_Example_IMG,200,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY_INV,11,2)\nplt.xlabel(AdaptiveThresh_IMG.size)\nplt.ylabel(AdaptiveThresh_IMG.shape)\nplt.imshow(AdaptiveThresh_IMG,cmap=\"Greys_r\")","1aefc491":"Back_Subt = cv2.createBackgroundSubtractorMOG2()\n\nExample_IMG = cv2.imread(JPG_Path_Series[21314],0)\nCut_Example_IMG = Example_IMG[120:300,110:310]\n\nSubt_IMG = Back_Subt.apply(Cut_Example_IMG)\n\nplt.xlabel(Subt_IMG.size)\nplt.ylabel(Subt_IMG.shape)\nplt.imshow(Subt_IMG,cmap=\"Greys_r\")","04d6ce14":"Example_IMG = cv2.imread(JPG_Path_Series[21314])\nCanny_IMG = cv2.Canny(Example_IMG,5,80)\nContour,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\nDraw_Contour = cv2.drawContours(Canny_IMG,Contour,-1,(255,0,0),1)\nplt.xlabel(Draw_Contour.size)\nplt.ylabel(Draw_Contour.shape)\nplt.imshow(Draw_Contour)","741cb092":"Example_IMG = cv2.imread(JPG_Path_Series[21314])\nCut_Example_IMG = Example_IMG[120:300,110:310]\nCanny_IMG = cv2.Canny(Cut_Example_IMG,5,80)\nContour,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\nDraw_Contour = cv2.drawContours(Canny_IMG,Contour,-1,(255,0,0),1)\nSubt_IMG = Back_Subt.apply(Draw_Contour)\nplt.xlabel(Subt_IMG.size)\nplt.ylabel(Subt_IMG.shape)\nplt.imshow(Subt_IMG)","f9638674":"Example_IMG = cv2.imread(JPG_Path_Series[21314])\nCut_Example_IMG = Example_IMG[120:300,110:310]\nCanny_IMG = cv2.Canny(Cut_Example_IMG,5,80)\nContour,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\n\nfor cnt in Contour:\n    x,y,w,h = cv2.boundingRect(cnt)\n    cv2.rectangle(Cut_Example_IMG,(x,y),(x+w,y+h),(255,0,0),1)\n\nplt.xlabel(Cut_Example_IMG.size)\nplt.ylabel(Cut_Example_IMG.shape)\nplt.imshow(Cut_Example_IMG,cmap=\"Greys_r\")","4b877084":"Example_IMG = cv2.imread(JPG_Path_Series[21314])\nCut_Example_IMG = Example_IMG[120:300,110:310]\n_,Thresh_IMG = cv2.threshold(Cut_Example_IMG,90,255,cv2.THRESH_BINARY)\nCanny_IMG = cv2.Canny(Thresh_IMG,10,90)\nContour,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\n\nfor cnt in Contour:\n    x,y,w,h = cv2.boundingRect(cnt)\n    cv2.rectangle(Cut_Example_IMG,(x,y),(x+w,y+h),(255,0,0),1)\n\nplt.xlabel(Cut_Example_IMG.size)\nplt.ylabel(Cut_Example_IMG.shape)\nplt.imshow(Cut_Example_IMG)","0b6476cb":"Example_IMG = cv2.imread(JPG_Path_Series[21314],0)\nCut_Example_IMG = Example_IMG[120:300,110:310]\nAdaptiveThresh_IMG = cv2.adaptiveThreshold(Cut_Example_IMG,200,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY_INV,11,2)\nCanny_IMG = cv2.Canny(AdaptiveThresh_IMG,1000,1000)\nContour,_ = cv2.findContours(Canny_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\n\nfor cnt in Contour:\n    x,y,w,h = cv2.boundingRect(cnt)\n    cv2.rectangle(Cut_Example_IMG,(x,y),(x+w,y+h),(255,0,0),1)\n\nplt.xlabel(Cut_Example_IMG.size)\nplt.ylabel(Cut_Example_IMG.shape)\nplt.imshow(Cut_Example_IMG,cmap=\"Greys_r\")","866b41e3":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(13,13))\n\nfor i,ax in enumerate(axis.flat):\n    IMG = cv2.imread(JPG_Path_Series[i],0)\n    C_IMG = IMG[120:300,110:310]\n    A_IMG = cv2.adaptiveThreshold(C_IMG,200,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY_INV,15,1)\n    CAN_IMG = cv2.Canny(A_IMG,1000,1000)\n    Contour,_ = cv2.findContours(CAN_IMG,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\n    for cnt in Contour:\n        x,y,w,h = cv2.boundingRect(cnt)\n        cv2.rectangle(C_IMG,(x,y),(x+w,y+h),(255,0,0),1)\n    ax.imshow(C_IMG)\n    ax.set_xlabel(C_IMG.size)\n    ax.set_ylabel(C_IMG.shape)\nplt.tight_layout()\nplt.show()","91650e1d":"Example_IMG = cv2.imread(JPG_Path_Series[21314],0)\nCut_Example_IMG = Example_IMG[120:300,110:310]\n_,Thresh_IMG = cv2.threshold(Cut_Example_IMG,90,255,cv2.THRESH_BINARY)\nDiff_IMG = cv2.absdiff(Cut_Example_IMG,Thresh_IMG)\n\nplt.xlabel(Diff_IMG.size)\nplt.ylabel(Diff_IMG.shape)\nplt.imshow(Diff_IMG)","b67e7dbb":"Example_IMG = cv2.imread(JPG_Path_Series[10])\nCut_Example_IMG = Example_IMG[120:300,110:310]\n_,Thresh_IMG = cv2.threshold(Cut_Example_IMG,90,255,cv2.THRESH_BINARY)\nDiff_IMG = cv2.absdiff(Cut_Example_IMG,Thresh_IMG)\n\nplt.xlabel(Diff_IMG.size)\nplt.ylabel(Diff_IMG.shape)\nplt.imshow(Diff_IMG)","fbed9a79":"Example_IMG = cv2.imread(JPG_Path_Series[10])\nCut_Example_IMG = Example_IMG[120:300,110:310]\n_,Thresh_IMG = cv2.threshold(Cut_Example_IMG,90,255,cv2.THRESH_BINARY)\n\nmask = cv2.inRange(Cut_Example_IMG, Cut_Example_IMG, Thresh_IMG)\n\nkernal = np.ones((4, 4), dtype=\"uint8\")\nDilate_IMG  = cv2.dilate(mask,kernal) \n\nSub_L_IMG = cv2.bitwise_and(Cut_Example_IMG,Cut_Example_IMG,mask=Dilate_IMG)\nplt.xlabel(Sub_L_IMG.size)\nplt.ylabel(Sub_L_IMG.shape)\nplt.imshow(Sub_L_IMG)","9da12a82":"Example_IMG = cv2.imread(JPG_Path_Series[20000])\nCut_Example_IMG = Example_IMG[120:300,110:310]\n_,Thresh_IMG = cv2.threshold(Cut_Example_IMG,90,255,cv2.THRESH_BINARY)\n\nmask = cv2.inRange(Cut_Example_IMG, Cut_Example_IMG, Thresh_IMG)\n\nkernal = np.ones((4, 4), dtype=\"uint8\")\nDilate_IMG  = cv2.dilate(mask,kernal) \n\nSub_L_IMG = cv2.bitwise_and(Cut_Example_IMG,Cut_Example_IMG,mask=Dilate_IMG)\nplt.xlabel(Sub_L_IMG.size)\nplt.ylabel(Sub_L_IMG.shape)\nplt.imshow(Sub_L_IMG)","a3885444":"Example_IMG = cv2.imread(JPG_Path_Series[30450])\nCut_Example_IMG = Example_IMG[120:300,110:310]\n_,Thresh_IMG = cv2.threshold(Cut_Example_IMG,90,255,cv2.THRESH_BINARY)\n\nmask = cv2.inRange(Cut_Example_IMG, Cut_Example_IMG, Thresh_IMG)\n\nkernal = np.ones((4, 4), dtype=\"uint8\")\nDilate_IMG  = cv2.dilate(mask,kernal) \n\nSub_L_IMG = cv2.bitwise_and(Cut_Example_IMG,Cut_Example_IMG,mask=Dilate_IMG)\nplt.xlabel(Sub_L_IMG.size)\nplt.ylabel(Sub_L_IMG.shape)\nplt.imshow(Sub_L_IMG)","c973537b":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(13,13))\n\nfor i,ax in enumerate(axis.flat):\n    IMG = cv2.imread(JPG_Path_Series[i])\n    #IMG = cv2.cvtColor(IMG,cv2.COLOR_BGR2RGB)\n    C_IMG = IMG[120:300,110:310]\n    _,Thresh_IMG = cv2.threshold(C_IMG,90,255,cv2.THRESH_BINARY)\n    mask = cv2.inRange(C_IMG, C_IMG, Thresh_IMG)\n    kernal = np.ones((2, 2), dtype=\"uint8\")\n    Dilate_IMG  = cv2.dilate(mask,kernal)\n    Sub_L_IMG = cv2.bitwise_and(C_IMG,C_IMG,mask=Dilate_IMG)\n    ax.imshow(Sub_L_IMG,cmap=\"Greys_r\")\n    ax.set_xlabel(Sub_L_IMG.size)\n    ax.set_ylabel(Sub_L_IMG.shape)\nplt.tight_layout()\nplt.show()","df91feea":"Example_IMG = cv2.imread(JPG_Path_Series[30450],0)\nCut_Example_IMG = Example_IMG[120:300,110:310]\n_,Thresh_IMG = cv2.threshold(Cut_Example_IMG,90,255,cv2.THRESH_BINARY)\nCAN_IMG = cv2.Canny(Cut_Example_IMG,10,100)\n\nCut_Example_IMG = cv2.resize(Cut_Example_IMG,(180,180))\nThresh_IMG = cv2.resize(Thresh_IMG,(180,180))\nCAN_IMG = cv2.resize(CAN_IMG,(180,180))\n\nmask_I = cv2.inRange(Cut_Example_IMG,Cut_Example_IMG,CAN_IMG)\nSub_L_I = cv2.bitwise_and(Cut_Example_IMG,Cut_Example_IMG,mask=mask_I)\n\nmask_II = cv2.inRange(Cut_Example_IMG,Cut_Example_IMG,Thresh_IMG)\nSub_L_II = cv2.bitwise_and(Cut_Example_IMG,Cut_Example_IMG,mask=mask_II)\n\nmask_III = cv2.inRange(Cut_Example_IMG,Thresh_IMG,CAN_IMG)\nSub_L_III = cv2.bitwise_and(Cut_Example_IMG,Cut_Example_IMG,mask=mask_III)\n\nmask_IIIV = cv2.inRange(Cut_Example_IMG,CAN_IMG,Thresh_IMG)\nSub_L_IIIV = cv2.bitwise_and(Cut_Example_IMG,Cut_Example_IMG,mask=mask_IIIV)\n\nmask_IIVI = cv2.inRange(Cut_Example_IMG,CAN_IMG,Cut_Example_IMG)\nSub_L_IIVI = cv2.bitwise_and(Cut_Example_IMG,Cut_Example_IMG,mask=mask_IIVI)\n\nIMG_LIST = [Cut_Example_IMG,Thresh_IMG,CAN_IMG,Sub_L_I,Sub_L_II,Sub_L_III,Sub_L_IIIV,Sub_L_IIVI]\n\nfigure,axis = plt.subplots(nrows=2,ncols=4,figsize=(12,12))\n\nfor i,ax in enumerate(axis.flat):\n    ax.imshow(IMG_LIST[i])\nplt.show()","94fe3c22":"JPG_Path = list(Main_JPG_Data.glob(r\"*.jpg\"))","652dff1a":"Another_JPG_Path = JPG_Path[60000:120000]\nJPG_Path = JPG_Path[0:60000]","69b993cd":"JPG_Path_Series = pd.Series(JPG_Path,name=\"JPG\").astype(str)\nAnother_JPG_Path_Series = pd.Series(Another_JPG_Path,name=\"JPG\").astype(str)","c24515a4":"print(Another_JPG_Path_Series.shape)","f55a0259":"print(JPG_Path_Series.shape)","59dd8030":"Transformated_IMG = []\n\nfor X_Img in JPG_Path_Series:\n    IMG = cv2.imread(X_Img,0)\n    IMG = IMG[120:300,110:310]\n    R_IMG = cv2.resize(IMG,(28,28))\n    Transformated_IMG.append(R_IMG)","27498d7b":"Transformated_Another_IMG = []\n\nfor X_Img in Another_JPG_Path_Series:\n    IMG = cv2.imread(X_Img,0)\n    IMG = IMG[120:300,110:310]\n    R_IMG = cv2.resize(IMG,(28,28))\n    Transformated_Another_IMG.append(R_IMG)","9f246531":"figure = plt.figure(figsize=(8,8))\nplt.xlabel(Transformated_IMG[0].shape)\nplt.imshow(Transformated_IMG[0])","f398b72f":"figure = plt.figure(figsize=(8,8))\nplt.xlabel(Transformated_Another_IMG[0].shape)\nplt.imshow(Transformated_Another_IMG[0])","b01dc0c3":"Transformated_IMG_Scaled = []\n\nfor T_Img in Transformated_IMG:\n    T_Img = T_Img \/ 255\n    Transformated_IMG_Scaled.append(T_Img)","181360b2":"plt.imshow(Transformated_IMG_Scaled[0])\nplt.xlabel(Transformated_IMG_Scaled[0].shape)","ad18f392":"Another_Transformated_IMG_Scaled = []\n\nfor T_Img in Transformated_Another_IMG:\n    T_Img = T_Img \/ 255\n    Another_Transformated_IMG_Scaled.append(T_Img)","b96667e5":"plt.imshow(Another_Transformated_IMG_Scaled[0])\nplt.xlabel(Another_Transformated_IMG_Scaled[0].shape)","038f2d24":"N_Transformated_IMG_Scaled = np.array(Transformated_IMG_Scaled)\nN_Another_Transformated_IMG_Scaled = np.array(Another_Transformated_IMG_Scaled)","9eefc525":"print(N_Transformated_IMG_Scaled.shape)","5da16d73":"print(N_Another_Transformated_IMG_Scaled.shape)","b65bcf96":"X_Train = N_Transformated_IMG_Scaled\nX_Test = N_Another_Transformated_IMG_Scaled","017c5f90":"print(type(X_Train))","548b755c":"print(type(X_Test))","b0e2e39a":"Array_IMG = np.asarray(Transformated_IMG)","17a57c9b":"print(Array_IMG.shape)","d570a930":"Array_IMG = Array_IMG.reshape(-1,28,28,1)","5f07a3c6":"print(Array_IMG.shape)","56fb61ad":"Another_Array_IMG = np.asarray(Transformated_Another_IMG)","b966abd4":"print(Another_Array_IMG.shape)","934d3be9":"Another_Array_IMG = Another_Array_IMG.reshape(-1,28,28,1)","85731d13":"print(Another_Array_IMG.shape)","8a2b8b51":"encoder = Sequential()\nencoder.add(Flatten(input_shape=[28,28]))\nencoder.add(Dense(500,activation=\"relu\"))\nencoder.add(Dense(400,activation=\"relu\"))\nencoder.add(Dense(300,activation=\"relu\"))\nencoder.add(Dense(200,activation=\"relu\"))\nencoder.add(Dense(100,activation=\"relu\"))\nencoder.add(Dense(50,activation=\"relu\"))\nencoder.add(Dense(25,activation=\"relu\"))","fb49f0a6":"print(encoder.summary())","35d7df33":"decoder = Sequential()\ndecoder.add(Dense(50,input_shape=[25],activation=\"relu\"))\ndecoder.add(Dense(100,activation=\"relu\"))\ndecoder.add(Dense(200,activation=\"relu\"))\ndecoder.add(Dense(300,activation=\"relu\"))\ndecoder.add(Dense(400,activation=\"relu\"))\ndecoder.add(Dense(500,activation=\"relu\"))\ndecoder.add(Dense(784,activation=\"sigmoid\"))\ndecoder.add(Reshape([28,28]))","c3590dcb":"print(decoder.summary())","6cabae27":"AutoEncoder = Sequential([encoder,decoder])","fe0b8792":"print(AutoEncoder.summary())","ee4238e5":"AutoEncoder.compile(loss=\"binary_crossentropy\",optimizer=\"rmsprop\",metrics=[\"accuracy\"])","494bfe1e":"AutoEncoder.fit(X_Train,X_Train,validation_data=(X_Test,X_Test),epochs=10)","fa3e31a0":"PRE_Img = AutoEncoder.predict(X_Test[:10])","e51b6b3f":"prediction_img = 5\nprint(\"NORMAL\")\nplt.imshow(X_Test[prediction_img])\nplt.show()\nprint(\"Auto Encoder\")\nplt.imshow(PRE_Img[prediction_img])","9db270d2":"figure,axis = plt.subplots(nrows=3,ncols=3,figsize=(10,10))\n\nfor P_Image,ax in enumerate(axis.flat):\n    ax.imshow(PRE_Img[P_Image])","59b9b2fa":"normal_IMG = X_Test[1]\nAfter_AutoEncoder = PRE_Img[1]\n\nIMGs_List_R = [normal_IMG,After_AutoEncoder]\n\nfigure,axis = plt.subplots(nrows=1,ncols=2,figsize=(10,10))\n\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(IMGs_List_R[i])\nplt.tight_layout()\nplt.show()","0f14bafb":"normal_IMG = X_Test[8]\nAfter_AutoEncoder = PRE_Img[8]\n\nIMGs_List_R = [normal_IMG,After_AutoEncoder]\n\nfigure,axis = plt.subplots(nrows=1,ncols=2,figsize=(10,10))\n\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(IMGs_List_R[i])\nplt.tight_layout()\nplt.show()","1f9fa2b1":"figure,axis = plt.subplots(nrows=3,ncols=3,figsize=(10,10))\n\nfor P_Image,ax in enumerate(axis.flat):\n    ax.imshow(PRE_Img[P_Image],cmap=\"Greys_r\")","1811e0eb":"S_Layer = GaussianNoise(0.2)","b69c4205":"Noise_Exm = S_Layer(X_Test[:5],training=True)","639fd658":"i = 0\nprint(\"NORMAL\")\nplt.imshow(X_Test[i])\nplt.show()\nprint(\"NOISE\")\nplt.imshow(Noise_Exm[i])","3ceee5d4":"i = 0\nprint(\"NORMAL\")\nplt.imshow(X_Test[i],cmap=\"Greys_r\")\nplt.show()\nprint(\"NOISE\")\nplt.imshow(Noise_Exm[i],cmap=\"Greys_r\")","c65f5a7a":"encoder_N = Sequential()\nencoder_N.add(Flatten(input_shape=[28,28]))\nencoder_N.add(GaussianNoise(0.3))\nencoder_N.add(Dense(500,activation=\"relu\"))\nencoder_N.add(Dense(400,activation=\"relu\"))\nencoder_N.add(Dense(300,activation=\"relu\"))\nencoder_N.add(Dense(200,activation=\"relu\"))\nencoder_N.add(Dense(100,activation=\"relu\"))\nencoder_N.add(Dense(50,activation=\"relu\"))\nencoder_N.add(Dense(25,activation=\"relu\"))","3612a15f":"decoder_N = Sequential()\ndecoder_N.add(Dense(50,input_shape=[25],activation=\"relu\"))\ndecoder_N.add(Dense(100,activation=\"relu\"))\ndecoder_N.add(Dense(200,activation=\"relu\"))\ndecoder_N.add(Dense(300,activation=\"relu\"))\ndecoder_N.add(Dense(400,activation=\"relu\"))\ndecoder_N.add(Dense(500,activation=\"relu\"))\ndecoder_N.add(Dense(784,activation=\"sigmoid\"))\ndecoder_N.add(Reshape([28,28]))","289fe305":"Removing_Noise_Model = Sequential([encoder_N,decoder_N])","340d6b8c":"Removing_Noise_Model.compile(loss=\"binary_crossentropy\",optimizer=\"rmsprop\",metrics=[\"accuracy\"])","ba193e04":"Removing_Noise_Model.fit(X_Train,X_Train,epochs=8)","138f7db3":"Ten_N_IMG = S_Layer(X_Test[10:21],training=True)","cd7b313e":"Removing_N_IMG = Removing_Noise_Model(Ten_N_IMG)","b2563326":"exp_n_img = 3\n\nprint(\"NORMAL\")\nplt.imshow(X_Test[exp_n_img])\nplt.show()\nprint(\"ADDED NOISE\")\nplt.imshow(Ten_N_IMG[exp_n_img])\nplt.show()\nprint(\"AFTER REMOVING MODEL\")\nplt.imshow(Removing_N_IMG[exp_n_img])\nplt.show()","9a16d6ec":"print(\"NORMAL\")\nplt.imshow(X_Test[exp_n_img],cmap=\"Greys_r\")\nplt.show()\nprint(\"ADDED NOISE\")\nplt.imshow(Ten_N_IMG[exp_n_img],cmap=\"Greys_r\")\nplt.show()\nprint(\"AFTER REMOVING MODEL\")\nplt.imshow(Removing_N_IMG[exp_n_img],cmap=\"Greys_r\")\nplt.show()","8672a3ba":"#### GAUSSIAN REMOVING EXAMPLE","5b10c766":"#### JPG PATH","f5e3ac27":"#### PREDICT","ce324304":"#### FOR GAN & DCGAN","44f8241f":"#### RECOGNIZING DATA","f593d477":"# DATA PROCESS","7e076462":"# PATH & LABEL PROCESS","ed39c98d":"# PACKAGES AND LIBRARIES","9afeafac":"#### FOR AUTOENCODER","3f85fa51":"# HISTORY","9834c5fa":"#### Context\n\n* The Galaxy Zoo team regularly receives requests for subject images for various versions of Galaxy Zoo, in order to facilitate other investigations, e.g. machine learning projects. This repository is an updated attempt to provide those in a way that is useful to the wider community.\n\n#### Acknowledgements\n\n* They are the \"original\" sample of subject images in Galaxy Zoo 2 (Willett et al. 2013, MNRAS, 435, 2835, DOI: 10.1093\/mnras\/stt1458) as identified in Table 1 of Willett et al. and also in Hart et al. (2016, MNRAS, 461, 3663, DOI: 10.1093\/mnras\/stw1588).\n\n* 243432 images","20a294f0":"#### TO SERIES","c6bfc378":"# VISUALIZATION","dcdb8c3b":"#### MAIN PATH","536d7468":"# AUTOENCODER"}}