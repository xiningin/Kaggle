{"cell_type":{"37e61910":"code","05858c4c":"code","df6a3952":"code","715bc84d":"code","d8e93b97":"code","a35a674f":"code","ebeab667":"code","ddc783a5":"code","58a027ae":"code","e243c587":"code","48adde8c":"code","9eb55053":"code","75d0337f":"code","9614d8a4":"code","71d8ff35":"code","44fcbaaf":"code","0d2d1c2e":"code","0f9525b0":"markdown","ac62a776":"markdown","116bc945":"markdown","1d9d9682":"markdown","77c6e880":"markdown","ee4844f1":"markdown","d1aedaab":"markdown","346ce029":"markdown","79ca418a":"markdown","50582b2e":"markdown","ad9067d0":"markdown","9a2a4adc":"markdown","665b27f6":"markdown","3d1abe4c":"markdown","01bf0e2d":"markdown","c3e3a0e1":"markdown","e52afd95":"markdown","4c3fa27a":"markdown","0a04e092":"markdown","63effa5b":"markdown"},"source":{"37e61910":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt","05858c4c":"training_data=pd.read_csv('..\/input\/Google_Stock_Price_Train.csv')\ntraining_set=training_data.iloc[:,1:2].values\nprint(training_data)\nprint(training_set)","df6a3952":"from sklearn.preprocessing import MinMaxScaler\nsc=MinMaxScaler(feature_range=(0, 1))\ntraining_set_scaler=sc.fit_transform(training_set)\nprint(training_set_scaler)","715bc84d":"x_train=[]\ny_train =[]\nfor i in range(60,1258):\n    x_train.append(training_set_scaler[i-60:i,0])\n    y_train.append(training_set_scaler[i,0])\nx_train,y_train=np.array(x_train),np.array(y_train)    \nprint(x_train)\nprint(y_train)","d8e93b97":"x_train=np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))\nprint(x_train)","a35a674f":"from keras.models import Sequential \n#sequential claas is used to create nueral network object representing sequencning of layers\nfrom keras.layers import Dense\n#dense claas is used to add output layer\nfrom keras.layers import LSTM\n#LSTM claas is used to add LSTM layer\nfrom keras.layers import Dropout\n#Dropout class is used to create dropout regularization","ebeab667":"regressor=Sequential()","ddc783a5":"regressor.add(LSTM(units=50,return_sequences=True,input_shape=(x_train.shape[1],1)))\nregressor.add(Dropout(0.2))","58a027ae":"regressor.add(LSTM(units=50,return_sequences=True))\nregressor.add(Dropout(0.2))","e243c587":"regressor.add(LSTM(units=50,return_sequences=True))\nregressor.add(Dropout(0.2))","48adde8c":"regressor.add(LSTM(units=50))\nregressor.add(Dropout(0.2))","9eb55053":"regressor.add(Dense(units=1))","75d0337f":"regressor.compile(optimizer='adam',loss='mean_squared_error')","9614d8a4":"regressor.fit(x_train,y_train,epochs=100,batch_size=32)","71d8ff35":"test_data=pd.read_csv('..\/input\/Google_Stock_Price_Test.csv')\nreal_stock_price=test_data.iloc[:,1:2].values\nprint(test_data)\nprint(real_stock_price)","44fcbaaf":"dataset_total=pd.concat((training_data['Open'],test_data['Open']),axis=0)\n# axis=0 for vertical concatination\n# axis=1 for horizontal concatination\ninputs=dataset_total[len(dataset_total)-len(test_data)-60:].values\ninputs=inputs.reshape(-1,1)\ninputs=sc.transform(inputs)\nx_test=[]\nfor i in range(60,80):\n    x_test.append(inputs[i-60:i,0])\nx_test=np.array(x_test)    \nx_test=np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))\npridected_stock_prices=regressor.predict(x_test)\npridected_stock_prices=sc.inverse_transform(pridected_stock_prices)\nprint(pridected_stock_prices)\n","0d2d1c2e":"#Visualising the results\nplt.plot(real_stock_price,color='red',label='Real google stock price')\nplt.plot(pridected_stock_prices,color='blue',label='Predicted google stock price')\nplt.title('Google stock price prediction')\nplt.xlabel('Time')\nplt.ylabel('Google stock price')\nplt.legend()\nplt.show()","0f9525b0":"Importing the libraries","ac62a776":"Feature scaling","116bc945":"Initialising the RNN","1d9d9682":"Here we are using LSTM \nthis will predict upward and downward trends of Google stock prices","77c6e880":"Adding the first LSTM layer and some Dropout Regularization","ee4844f1":"Fitting the RNN to the training set","d1aedaab":"Adding the output layer","346ce029":"Reshaping","79ca418a":"Adding the first 3rd layer and some Dropout Regularization","50582b2e":"Creating a data structure with 60 timesteps and 1 output","ad9067d0":"Importing the training set","9a2a4adc":"Importing the keras libraries","665b27f6":"Getting the predicted stock price of 2017","3d1abe4c":"Adding the first 2nd layer and some Dropout Regularization","01bf0e2d":"# We are using RNN here","c3e3a0e1":"Adding the first 4th layer and some Dropout Regularization","e52afd95":"Getting the real stock price of 2017","4c3fa27a":"Compiling the RNN","0a04e092":"# Making the prediction and visualising the result","63effa5b":"## ***Building RNN***\nDropout Regularization will be used to prevent overfitting"}}