{"cell_type":{"3f4acbcd":"code","894debbb":"code","5efdeba2":"code","cfa05235":"code","f57a6205":"code","6858fd44":"code","a4e460fb":"code","6ccc4652":"code","cc45537b":"code","01a671cb":"code","5eaa9190":"code","8dbbd197":"code","adeaabf6":"code","df045858":"code","497ef959":"code","16e13e1a":"code","fbd89ae6":"markdown","45505aa6":"markdown","93d60f25":"markdown","4d41363e":"markdown","e7be0b58":"markdown","c6769625":"markdown","e406b0ba":"markdown"},"source":{"3f4acbcd":"# We will use the official tokenization script created by the Google team\n!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","894debbb":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\n\nimport tokenization\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score","5efdeba2":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","cfa05235":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(clf_output)\n    \n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=1e-5), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","f57a6205":"%%time\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","6858fd44":"train = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","a4e460fb":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","6ccc4652":"train_input = bert_encode(train.text.values, tokenizer, max_len=160)\ntest_input = bert_encode(test.text.values, tokenizer, max_len=160)\ntrain_labels = train.target.values","cc45537b":"model = build_model(bert_layer, max_len=160)\nmodel.summary()","01a671cb":"#Using 1 epoch to avoid overfitting on small dataset\ntrain_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.2,\n    epochs=1,\n    batch_size=16\n)\n\nmodel.save('model.h5')","5eaa9190":"#get output of slice layer from model above\ncls_layer_model = Model(model.input, outputs=model.get_layer('tf_op_layer_strided_slice').output)","8dbbd197":"X_train = cls_layer_model.predict(train_input)\nX_test = cls_layer_model.predict(test_input)\ny_train = train.target.values","adeaabf6":"model_svm = SVC(C=15, kernel='rbf',gamma=0.001)\nmodel_svm.fit(X_train,y_train)","df045858":"test_pred = model_svm.predict(X_test)","497ef959":"submission['target'] = test_pred.round().astype(int)\nsubmission.to_csv('submission.csv', index=False)","16e13e1a":"import pandas as pd\nsample_submission = pd.read_csv(\"..\/input\/nlp-getting-started\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/nlp-getting-started\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/nlp-getting-started\/train.csv\")","fbd89ae6":"# Predict, Submit","45505aa6":" # Helper Functions","93d60f25":"# Model: Build, Fine-tune","4d41363e":"This notebook is based on xhlulu's notebook (Disaster NLP: Keras BERT using TFHub https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub) with SVM as classificator instead of sigmoid.\nIdea is simple - fine-tune BERT and pass CLS embeddings to SVM classifier","e7be0b58":"# Load and Preprocess\u00b6\n- Load BERT from the Tensorflow Hub\n- Load CSV files containing training data\n- Load tokenizer from the bert layer\n- Encode the text into tokens, masks, and segment flags","c6769625":"### References\n- Disaster NLP: Keras BERT using TFHub https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub\n- Source for bert_encode function: https:\/\/www.kaggle.com\/user123454321\/bert-starter-inference\n- All pre-trained BERT models from Tensorflow Hub: https:\/\/tfhub.dev\/s?q=bert\n- Deep Learning using Linear Support Vector Machines: http:\/\/deeplearning.net\/wp-content\/uploads\/2013\/03\/dlsvm.pdf","e406b0ba":"# SVM\n- create new model (output - CLS token embeddings finetuned BERT)\n- train SVC"}}