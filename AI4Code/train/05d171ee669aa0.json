{"cell_type":{"f64e537d":"code","207910e0":"code","6eba5c79":"code","67097c2b":"code","32cb93c3":"code","edb84b5c":"code","f4dbd22b":"code","00071a71":"code","112a43d8":"code","a266f1ff":"code","ba3142e6":"code","e48a4131":"code","f2d35f07":"code","bc57f6d3":"code","32b56c1e":"code","eb60df30":"code","abf996e7":"code","50b25b28":"code","26d36779":"code","bc3eb234":"code","4b203da7":"code","88415db1":"code","da3d7dbd":"code","c2d24634":"code","47de9f34":"code","97b49abb":"code","13ea89a9":"code","e3747806":"code","d4eaef73":"code","cab5ff12":"code","b81be62d":"code","bcaa04bb":"code","11801e76":"code","fb43d9ef":"code","947f1244":"code","227b2f57":"code","6646acab":"code","393cb7a0":"code","c62fd22a":"code","83099040":"markdown","43d71bf0":"markdown","4a86497c":"markdown","8ca68aa6":"markdown","481e6897":"markdown","f9ed5d02":"markdown"},"source":{"f64e537d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","207910e0":"data = pd.read_csv(\"..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")","6eba5c79":"data.shape","67097c2b":"data.head()","32cb93c3":"data.info()","edb84b5c":"data.corr()['quality']","f4dbd22b":"sns.heatmap(data.corr())","00071a71":"data[data==0].sum()","112a43d8":"data.isnull().sum()","a266f1ff":"data.nunique()","ba3142e6":"sns.pairplot(data)","e48a4131":"columns = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',\n       'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',\n       'pH', 'sulphates', 'alcohol',]","f2d35f07":"for i in columns:\n    sns.scatterplot(data = data[i])\n    plt.xlabel(i)\n    plt.show()","bc57f6d3":"li = list(data['chlorides'].sort_values()[-4:].index)\ndata['chlorides'][li] = int(data.drop(li)['chlorides'].mode())","32b56c1e":"li = list(data['total sulfur dioxide'].sort_values()[-2:].index)\ndata['total sulfur dioxide'][li] = int(data.drop(li)['total sulfur dioxide'].mode())","eb60df30":"li = list(data['sulphates'].sort_values()[-7:].index)\ndata['sulphates'][li] = int(data.drop(li)['sulphates'].mode())","abf996e7":"li = list(data['residual sugar'].sort_values()[-11:].index)\ndata['residual sugar'][li] = int(data.drop(li)['residual sugar'].mean())","50b25b28":"for i in columns:\n    sns.scatterplot(data = data[i])\n    plt.xlabel(i)\n    plt.show()","26d36779":"for i in columns:\n    sns.barplot(x='quality', y= i, data=data)\n    plt.show()","bc3eb234":"for i in columns:    \n    sns.boxplot(x='quality', y= i, data=data)\n    plt.show()","4b203da7":"def quality_index(x):\n    if x > 6:\n        return 1\n    else:\n        return 0","88415db1":"data['quality'] = data['quality'].apply(quality_index)","da3d7dbd":"for i in columns:    \n    sns.boxplot(x='quality', y= i, data=data)\n    plt.show()","c2d24634":"data.head()","47de9f34":"data.quality.value_counts()","97b49abb":"#Now seperate the dataset as response variable and feature variabes\nX = data.drop('quality', axis = 1)\ny = data['quality']","13ea89a9":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","e3747806":"X = scaler.fit_transform(X)","d4eaef73":"from sklearn.decomposition import PCA\npca = PCA()\nx_pca = pca.fit_transform(X)\nplt.figure(figsize=(5,4))\nplt.plot(np.cumsum(pca.explained_variance_ratio_), 'ro-')\nplt.grid()","cab5ff12":"#Train and Test splitting of data \nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x_pca, y, test_size = 0.2, random_state = 42)","b81be62d":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier","bcaa04bb":"lr = LogisticRegression()\n\nsvc = SVC(C=1.2, kernel='rbf')\n\nrfc = RandomForestClassifier()\n\ndtc = DecisionTreeClassifier()\n\nknn = KNeighborsClassifier()\n\nxgb = XGBClassifier()","11801e76":"from sklearn.metrics import roc_auc_score,accuracy_score,precision_score\nfrom sklearn.metrics import recall_score,f1_score, confusion_matrix, roc_curve, auc\ndef train_model(model):\n    # Checking accuracy\n    model = model.fit(x_train, y_train)\n    pred = model.predict(x_test)\n    print('accuracy_score',accuracy_score(y_test, pred)*100)\n    print('precision_score',precision_score(y_test, pred)*100)\n    print('recall_score',recall_score(y_test, pred)*100)\n    print('f1_score',f1_score(y_test, pred)*100)\n    print('roc_auc_score',roc_auc_score(y_test, pred)*100)\n    # confusion matrix\n    print('confusion_matrix')\n    print(pd.DataFrame(confusion_matrix(y_test, pred)))\n    fpr, tpr, threshold = roc_curve(y_test, pred)\n    roc_auc = auc(fpr, tpr)*100\n\n    plt.title('Receiver Operating Characteristic')\n    plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\n    plt.legend(loc = 'lower right')\n    plt.plot([0, 1], [0, 1],'r--')\n    plt.xlim([0, 1])\n    plt.ylim([0, 1])\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')\n    plt.show()","fb43d9ef":"train_model(lr)","947f1244":"train_model(svc)","227b2f57":"train_model(dtc)","6646acab":"train_model(knn)","393cb7a0":"train_model(xgb)","c62fd22a":"train_model(rfc)","83099040":"# **Pairplot**","43d71bf0":"# Scatterplot","4a86497c":"Moduling","8ca68aa6":"**Transforming Quality Column**","481e6897":"# Barplot","f9ed5d02":"# Boxplot"}}