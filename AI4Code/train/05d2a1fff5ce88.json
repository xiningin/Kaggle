{"cell_type":{"3dbd39b1":"code","52f254b8":"code","dd6dd627":"code","35aa9162":"code","5acef920":"code","f3c7a263":"code","a71736e7":"code","a1692824":"code","7f323986":"code","005ae6a4":"code","de4f156c":"code","ee549e65":"code","0a847fdb":"code","523ab025":"code","4fa9d488":"code","5cd6a599":"code","78add007":"code","0e15f106":"code","d55a3ea9":"code","18801d95":"code","c8f2ee9c":"markdown","bf1d2533":"markdown","6b78f492":"markdown","94c75bdc":"markdown","b7e24564":"markdown","d6f73892":"markdown","61cc4bd0":"markdown","a3222117":"markdown","848cb68a":"markdown","456d1277":"markdown","59f01895":"markdown"},"source":{"3dbd39b1":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport numpy as np # linear algebra\nimport matplotlib.pyplot as plt\nimport os\nimport json\nimport cv2\nimport pandas as pd\nfrom pandas.io.json import json_normalize\nfrom collections import Iterable\n\npd.set_option('display.max_rows', 5000)\nprint(os.listdir(\"..\/input\")),\n# Any results you write to the current directory are saved as output.","52f254b8":"df_train=pd.read_json('..\/input\/solesensei_bdd100k\/bdd100k_labels_release\/bdd100k\/labels\/bdd100k_labels_images_train.json')\ndf_val=pd.read_json('..\/input\/solesensei_bdd100k\/bdd100k_labels_release\/bdd100k\/labels\/bdd100k_labels_images_val.json')","dd6dd627":"#My solution to get a dict inside json found here:https:\/\/stackoverflow.com\/questions\/48942801\/json-to-csv-output-using-pandas\nfrom keras.utils import to_categorical\njson_list = [j[1][1] for j in df_train.iterrows()]\nresult = pd.DataFrame(json_list)\nresult.to_csv(\"my_csv_file.csv\", index=False)\ntrain_attribute=pd.read_csv('my_csv_file.csv')\ntrain_attribute=pd.get_dummies(train_attribute)#turn data to categorical like format for image classification\ntrain_attribute=to_categorical(train_attribute, 9)\nprint(train_attribute)","35aa9162":"json_list = [j[1][1] for j in df_train.iterrows()]\nresult_val = pd.DataFrame(json_list)\nresult_val.to_csv(\"att_train.csv\", index=False)\ntrain_attribute=pd.read_csv('att_train.csv')\nprint(train_attribute.head())","5acef920":"image_names = [j[1][0] for j in df_train.iterrows()]\nresult_train = pd.DataFrame(image_names)\nresult_train.to_csv(\"names.csv\", index=False)\nnames_train=pd.read_csv('names.csv')\nnames_train.rename(columns={'0': 'name'}, inplace=True)\nprint(names_train.head())#labels_val.head())","f3c7a263":"json_list_category = [j[1][3][3] for j in df_val.iterrows()]\nresult_val = pd.DataFrame(json_list_category)\nresult_val.to_csv(\"labels.csv\", index=False)\nlabels_val=pd.read_csv('labels.csv')\nprint(labels_val.head())","a71736e7":"json_list_category = [j[1][3][3]['category'] for j in df_train.iterrows()]\nresult_train = pd.DataFrame(json_list_category)\nresult_train.to_csv(\"category.csv\", index=False)\ncategory_train=pd.read_csv('category.csv')\ncategory_train.rename(columns={'0':'category'}, inplace=True)\nprint(category_train.head())","a1692824":"json_list_category = [j[1][3][3]['attributes'] for j in df_val.iterrows()]\nresult_val = pd.DataFrame(json_list_category)\nresult_val.to_csv(\"attributes.csv\", index=False)\nattributes_val=pd.read_csv('attributes.csv')\nprint(attributes_val)","7f323986":"df_train_concated=pd.concat([names_train, category_train, train_attribute], axis=1)\nprint(df_train_concated.head())","005ae6a4":"json_list_category = [j[1][3][3]['manualShape'] for j in df_val.iterrows()]\nresult_val = pd.DataFrame(json_list_category)\nresult_val.to_csv(\"manualShape_val.csv\", index=False)\nmanualShape_val=pd.read_csv('manualShape_val.csv')\nprint(manualShape_val.head())","de4f156c":"json_list_category = [j[1][3][3]['manualAttributes'] for j in df_val.iterrows()]\nresult_val = pd.DataFrame(json_list_category)\nresult_val.to_csv(\"manualAttribute_val.csv\", index=False)\nmanualAttribute_val=pd.read_csv('manualAttribute_val.csv')\nprint(manualAttribute_val.head())","ee549e65":"ctgry=[j[1][3] for j in df_train.iterrows()]\nprint(ctgry[0])","0a847fdb":"json_list_category = [j[1][3][0] for j in df_val.iterrows()]\nresult_val = pd.DataFrame(json_list_category)\nresult_val.to_csv(\"box2d_val.csv\", index=False)\nmanualAttribute_val=pd.read_csv('box2d_val.csv')\nprint(manualAttribute_val[0])","523ab025":"print(\"total train labels: \", len(df_train['labels']))","4fa9d488":"path='..\/input\/solesensei_bdd100k\/bdd100k\/bdd100k\/images\/100k'\ntrain = sorted([os.path.join(path, 'train', file)\n         for file in os.listdir(path + \"\/train\")])\nVal = sorted([os.path.join(path, 'val', file)\n         for file in os.listdir(path + \"\/val\")])\ntestA = sorted([os.path.join(path, 'train\/testA', file)\n         for file in os.listdir(path + \"\/train\/testA\")])\ntestB = sorted([os.path.join(path, 'train\/testB', file)\n         for file in os.listdir(path + \"\/train\/testB\")])   \ntrainA = sorted([os.path.join(path, 'train\/trainA', file)\n         for file in os.listdir(path + \"\/train\/trainA\")])\ntrainB = sorted([os.path.join(path, 'train\/trainB', file)\n         for file in os.listdir(path + \"\/train\/trainB\")])        \nTrain=testA + testB + trainA + trainB + train \n\ntest_image=Val[0]#np.random.choice(Train)\ntets=cv2.imread(test_image)#, cv2.IMREAD_GRAYSCALE)\nplt.imshow(tets)\nprint(Val[0])\n#df_train_concated['name']=='b1c66a42-6f7d68ca.jpg')\nprint(len(Train), len(Val))\n","5cd6a599":"def load_and_show_img_train(path):#COLOR LABELS TRA\u0130N IMAGES\n    train_data=sorted([os.path.join(path, 'train', file)\n                for file in os.listdir(path + '\/train')])\n     \n    show_test_image=train_data[0]#np.random.choice(train_data)\n    show=cv2.imread(show_test_image, cv2.IMREAD_COLOR)\n    plt.imshow(show)\n    print(show_test_image)\npath='..\/input\/solesensei_bdd100k\/bdd100k_seg\/bdd100k\/seg\/color_labels'\nload_and_show_img_train(path)","78add007":"def load_and_show_img_val(path):#color_labels path,this is segmented images\n    validation_data=sorted([os.path.join(path, 'val', file)\n                for file in os.listdir(path + '\/val')])\n     \n    show_test_image=validation_data[0]\n    show=cv2.imread(show_test_image, cv2.IMREAD_COLOR)\n    plt.imshow(show)\n    \npath='..\/input\/solesensei_bdd100k\/bdd100k_seg\/bdd100k\/seg\/color_labels'\nload_and_show_img_val(path)","0e15f106":"path='..\/input\/solesensei_bdd100k\/bdd100k_seg\/bdd100k\/seg\/labels'\nload_and_show_img_train(path)\n","d55a3ea9":"\npath='..\/input\/solesensei_bdd100k\/bdd100k_seg\/bdd100k\/seg\/labels'\nload_and_show_img_val(path)","18801d95":"path='..\/input\/solesensei_bdd100k\/bdd100k_seg\/bdd100k\/seg\/images'\ntrain = sorted([os.path.join(path, 'train', file)\n         for file in os.listdir(path + \"\/train\")])\ntest = sorted([os.path.join(path, 'test', file)\n         for file in os.listdir(path + \"\/test\")])\nval = sorted([os.path.join(path, 'val', file)\n         for file in os.listdir(path + \"\/val\")])\nprint(len(train), len(test), len(val))\n\ntest_image=np.random.choice(test)\ntets=cv2.imread(test_image)#, cv2.IMREAD_GRAYSCALE)\nplt.imshow(tets)\n    ","c8f2ee9c":"**this is my first  attempt to dealing with complex and big data. Please comment if you have advice or question otherwise dont forget to upvote.**","bf1d2533":"Hi everyone, in this kernel i am challenging myself with a well organized dataset which include nested json files, mask images, color images and segmentation images. ","6b78f492":"**sources to check**\n1-https:\/\/www.kaggle.com\/aakashnain\/beating-everything-with-depthwise-convolution for loading images","94c75bdc":"box2d","b7e24564":"tools for bdd100k data: https:\/\/github.com\/ucbdrive\/bdd-data","d6f73892":"I will try to implement nvidia self driving paper with bdd100k dataset.\n* If you want to check paper: \nhttps:\/\/images.nvidia.com\/content\/tegra\/automotive\/images\/2016\/solutions\/pdf\/end-to-end-dl-using-px.pdf\n\n* The model that alraedy implemented from: https:\/\/github.com\/nachiket273\/Self_Driving_Car\/blob\/master\/CarND-Behavioral-Cloning-P3\/model.py\n\n* There is also a paper about the dataset which you can check it here: https:\/\/arxiv.org\/pdf\/1805.04687.pdf\n","61cc4bd0":"manualShape","a3222117":"category train label","848cb68a":"attribute dict validation","456d1277":"manualAttribute","59f01895":"In segmentation image data the red color part is direct drivable road and the blue color is alternative drivable road."}}