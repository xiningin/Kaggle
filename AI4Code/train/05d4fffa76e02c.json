{"cell_type":{"502befc0":"code","6a920d67":"code","3ad06fa7":"code","c72d46b4":"code","a4e3642d":"code","92384b01":"code","d7912afb":"code","990468f6":"code","4094c4fb":"code","034eac5e":"code","26c71412":"code","c29da29a":"code","f3c2babd":"code","393314c1":"code","6005bdae":"code","0f5bbea7":"code","d09427ec":"code","7fbc9a4e":"code","4bc01410":"code","239e8b35":"code","a2bc746c":"code","03074907":"code","774f1df3":"code","4abdd521":"code","feb5f7f2":"code","ca9eff8c":"code","0f7cde12":"code","9e1ac420":"code","3f0bf9d7":"code","b99a1a52":"code","495489ab":"code","ef0bd4b4":"code","9df55d1c":"markdown","ac6f4bd7":"markdown","f6158fb1":"markdown","75a52969":"markdown"},"source":{"502befc0":"import os\nfrom os import listdir","6a920d67":"listdir(\"..\/input\/animal-image-datasetdog-cat-and-panda\/animals\/animals\")","3ad06fa7":"folder = \"..\/input\/animal-image-datasetdog-cat-and-panda\/animals\/animals\"","c72d46b4":"from keras.preprocessing.image import load_img","a4e3642d":"from keras.preprocessing.image import img_to_array","92384b01":"folder1=\"\/kaggle\/input\/animal-image-datasetdog-cat-and-panda\/animals\/animals\/\"\nx=[]\ny=[]\nfor file1 in listdir(folder):\n    file2=folder1+\"\/\"+file1\n    for file3 in listdir(file2):\n        file4=file2+\"\/\"+file3\n        image = load_img(file4,target_size=(300,300))\n        image=img_to_array(image)\n        x.append(image)\n        y.append(file1)","d7912afb":"len(x)","990468f6":"len(y)","4094c4fb":"import numpy as np\nfrom numpy import asarray","034eac5e":"x=asarray(x)","26c71412":"y=asarray(y)","c29da29a":"x.shape","f3c2babd":"y.shape","393314c1":"from sklearn.preprocessing import LabelEncoder\nm= LabelEncoder()\ny = m.fit_transform(y)","6005bdae":"y","0f5bbea7":"from keras.utils import to_categorical\ny = to_categorical(y)","d09427ec":"y.shape","7fbc9a4e":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 1\/2, random_state = 0)","4bc01410":"np.unique(y)","239e8b35":"x_train=x_train\/255\nx_test=x_test\/255","a2bc746c":"x_train.shape","03074907":"y_train.shape","774f1df3":"x_test.shape","4abdd521":"y_test.shape","feb5f7f2":"from keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam","ca9eff8c":"from keras import Model","0f7cde12":"from keras.applications.vgg16 import VGG16","9e1ac420":"model = VGG16(include_top=False, input_shape=(300, 300, 3))","3f0bf9d7":"# define cnn model\ndef define_model():\n# load model\n  model = VGG16(include_top=False, input_shape=(300, 300, 3))\n# mark loaded layers as not trainable\n  for layer in model.layers:\n    layer.trainable = False\n# add new classifier layers\n  flat1 = Flatten()(model.layers[-1].output)\n  class1 = Dense(128, activation=\"relu\", kernel_initializer=\"he_uniform\")(flat1)\n \n  output = Dense(3, activation=\"softmax\")(class1)\n# define new model\n  model = Model(inputs=model.inputs, outputs=output)\n# compile model\n  opt = Adam(lr=0.01)\n  model.compile(optimizer=opt, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n  return model","b99a1a52":"model_2=define_model()","495489ab":"model_2.summary()","ef0bd4b4":"model_2.fit(x_train, y_train,validation_data=(x_test,y_test), epochs=3, batch_size=32,verbose=1)","9df55d1c":"**Convert into array**","ac6f4bd7":"**Implement Machine Learning**","f6158fb1":"**Load Images**","75a52969":"**Label Encoding**"}}