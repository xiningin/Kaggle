{"cell_type":{"aca7355d":"code","3219d39f":"code","cf6805d8":"code","295fbd2d":"code","7df13b72":"code","2b1a1127":"code","57394a75":"code","6ad2e234":"code","035d0a8f":"code","5f654fe0":"code","4849e835":"code","9e448e92":"code","5b1ee23b":"code","b5e07fbe":"code","12cea8a0":"code","ebcaa925":"code","c380991b":"code","0d7c08a7":"code","e3613f03":"code","57e593ac":"code","e9458789":"code","0e78bbdc":"code","b7203f49":"code","fb64c157":"code","c76d54f6":"code","6f428d6f":"code","c1a00075":"code","0412ee2a":"code","61664c44":"code","4b771a62":"code","82567c6a":"code","15ab7e0b":"code","ca9df71b":"code","742fa33b":"code","2fad1a33":"code","0cba49c7":"code","8b20849a":"markdown","754e002f":"markdown","dcd72514":"markdown","1541dba6":"markdown","989eb022":"markdown"},"source":{"aca7355d":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","3219d39f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","cf6805d8":"df = pd.read_csv('\/kaggle\/input\/mt-cars\/Lesson 3 Practice\/mtcars.csv')","295fbd2d":"df.head()","7df13b72":"df.columns","2b1a1127":"df.isnull().sum()","57394a75":"df.describe()","6ad2e234":"df[['vs', 'hp']].groupby(['vs'], as_index=False).mean().sort_values(by='hp', ascending=False)","035d0a8f":"df[['am', 'hp']].groupby(['am'], as_index=False).mean().sort_values(by='hp', ascending=False)","5f654fe0":"df[['carb', 'hp']].groupby(['carb'], as_index=False).mean().sort_values(by='hp', ascending=False)","4849e835":"df[['model','hp']].groupby(['model'], as_index=False).mean().sort_values(by='hp', ascending=False)","9e448e92":"df.plot(kind='scatter', x=\"mpg\", y='hp', figsize=(5,3))","5b1ee23b":"df.plot(kind='scatter', x=\"disp\", y='hp', figsize=(5,3))","b5e07fbe":"df.plot(kind='scatter', x=\"drat\", y='hp', figsize=(5,3))","12cea8a0":"df.plot(kind='scatter', x=\"wt\", y='hp', figsize=(5,3))","ebcaa925":"df.plot(kind='scatter', x=\"qsec\", y='hp', figsize=(5,3))","c380991b":"df.hist(figsize=(20,15))\nplt.show()","0d7c08a7":"X = df.drop(['hp','model'],axis=1)\ny = df['hp']","e3613f03":"y1 = np.array(y)","57e593ac":"from sklearn.preprocessing import StandardScaler\nss_x = StandardScaler()\nss_y = StandardScaler()\nX_scaled = ss_x.fit_transform(X)\ny_scaled = ss_y.fit_transform(y1.reshape(-1,1))","e9458789":"from sklearn.linear_model import LinearRegression\nlinear_regressor = LinearRegression()\nlinear_regressor.fit(X_scaled, y_scaled)\nlin_pred = linear_regressor.predict(X_scaled)","0e78bbdc":"from sklearn.metrics import mean_squared_error,r2_score\nimport math\nprint('MSE',mean_squared_error(y_scaled, lin_pred))\nprint('RMSE',math.sqrt(mean_squared_error(y_scaled, lin_pred)))\nprint('R2 Score',r2_score(y_scaled, lin_pred))\nprint('Adj R^2 value:',1 - (1-linear_regressor.score(X_scaled, y_scaled))*(len(y_scaled)-1)\/(len(y_scaled)-X_scaled.shape[1]-1))","b7203f49":"from sklearn.preprocessing import PolynomialFeatures\npoly_features = PolynomialFeatures(degree=4)\nX_poly = poly_features.fit_transform(X_scaled)","fb64c157":"from sklearn.linear_model import LinearRegression\npoly_regressor = LinearRegression()\npoly_regressor.fit(X_poly, y_scaled)","c76d54f6":"poly_pred = poly_regressor.predict(X_poly)","6f428d6f":"print('MSE',mean_squared_error(y_scaled, poly_pred))\nprint('RMSE',math.sqrt(mean_squared_error(y_scaled, poly_pred)))\nprint('R2_Score',r2_score(y_scaled, poly_pred))\nprint('Adj R^2 value:',1 - (1-poly_regressor.score(X_poly, y_scaled))*(len(y_scaled)-1)\/(len(y_scaled)-X_poly.shape[1]-1))","c1a00075":"from sklearn.svm import SVR\nsvr_regressor = SVR(kernel=\"rbf\")\nsvr_regressor.fit(X_scaled, y_scaled.ravel())","0412ee2a":"pred_val_scaled = svr_regressor.predict(X_scaled)","61664c44":"print('MSE',mean_squared_error(y_scaled, pred_val_scaled))\nprint('RMSE',math.sqrt(mean_squared_error(y_scaled, pred_val_scaled)))\nprint('R2_Score',r2_score(y_scaled, poly_pred))\nprint('Adj R^2 value:',1 - (1-svr_regressor.score(X_scaled, y_scaled))*(len(y_scaled)-1)\/(len(y_scaled)-X_scaled.shape[1]-1))","4b771a62":"from sklearn.tree import DecisionTreeRegressor\ntree_regressor = DecisionTreeRegressor(criterion=\"mse\")\ntree_regressor.fit(X_scaled, y_scaled)","82567c6a":"tree_pred = tree_regressor.predict(X_scaled)","15ab7e0b":"print('MSE',mean_squared_error(y_scaled, tree_pred))\nprint('RMSE',math.sqrt(mean_squared_error(y_scaled, tree_pred)))\nprint('R2 Score',r2_score(y_scaled, tree_pred))\nprint('Adj R^2 value:',1 - (1-tree_regressor.score(X_scaled, y_scaled))*(len(y_scaled)-1)\/(len(y_scaled)-X_scaled.shape[1]-1))","ca9df71b":"from sklearn.ensemble import RandomForestRegressor\nforest_regressor = RandomForestRegressor(n_estimators=300, random_state=0)\nforest_regressor.fit(X_scaled, y_scaled.ravel())","742fa33b":"forest_pred = forest_regressor.predict(X_scaled)","2fad1a33":"print('MSE',mean_squared_error(y_scaled, forest_pred))\nprint('RMSE',math.sqrt(mean_squared_error(y_scaled, forest_pred)))\nprint('R2 Score',r2_score(y_scaled, poly_pred))\nprint('Adj R^2 value:',1 - (1-forest_regressor.score(X_scaled, y_scaled))*(len(y_scaled)-1)\/(len(y_scaled)-X_scaled.shape[1]-1))","0cba49c7":"### Decision Tree is the best regressor in this case","8b20849a":"### Polynomial Regression","754e002f":"### Scaling Data","dcd72514":"### Linear Regression","1541dba6":"### EDA","989eb022":"### SVR Regreesion"}}