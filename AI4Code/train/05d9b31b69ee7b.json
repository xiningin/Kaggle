{"cell_type":{"bcbdea42":"code","f3dd0e53":"code","e764532e":"code","051e7fc8":"code","47124267":"code","cfbce832":"code","cc0ba7b8":"code","8c5a20de":"code","53d9ca39":"code","f6322788":"code","fdb2cbc9":"code","e23ffc53":"code","a4e473d2":"code","ade8e90e":"code","10796f88":"code","b6869c80":"code","78324b24":"code","ae18b0ec":"code","a039af09":"code","c51e817a":"code","9133058a":"code","75395d9a":"markdown","d3221fff":"markdown","2d269763":"markdown","4bea2d51":"markdown","c799f6bf":"markdown","72a2ad44":"markdown","b82198b4":"markdown","1f9af338":"markdown","815c18b6":"markdown","a6325aec":"markdown"},"source":{"bcbdea42":"import pandas as pd","f3dd0e53":"asset_df = pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv')\nasset_df.info()\nasset_df","e764532e":"import numpy as np\nimport matplotlib.pyplot as plt\n\nsorted_asset_df = asset_df.sort_values('Weight')\n\nx = np.array(sorted_asset_df[\"Asset_Name\"].values)\ny = np.array(sorted_asset_df[\"Weight\"].values)\n\nplt.figure(figsize=(12,8))\nplt.bar(x, y, align=\"center\")\nplt.xticks(rotation=70,fontsize=15)\nplt.title(\"Weight of cryptocurrency\",fontsize=30)\nplt.xlabel(\"Asset Name\",fontsize=20)\nplt.ylabel(\"Weight\",fontsize=20)\nplt.show()","051e7fc8":"train_df = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv')\ntrain_df.info()\ntrain_df.head()","47124267":"def plot_time_series(asset_id:int, asset_value:str, start:int = 0, end:int = len(train_df), visualise:bool = True,drop_na = True):\n    \"\"\"Plot time series data from train_df(train.csv)\n\n    Args:\n        asset_id (int): Asset_ID.\n        asset_value (str): Count, Open, High, Low, Close, Volume, VWAP, Target.\n        start(int): start index\n        end(int): end index\n        visualise(bool): If true, the gragh is plot\n        drop_na(bool):\n    \"\"\"\n    \n    asset_name = asset_df[asset_df[\"Asset_ID\"]==asset_id][\"Asset_Name\"].values[0]\n    train_crypro_df = train_df[train_df[\"Asset_ID\"]==asset_id].reset_index(drop=True)\n    \n    if drop_na:\n        train_crypro_df = train_crypro_df.dropna(subset=[asset_value])\n    \n    train_crypro_slice_df = train_crypro_df.iloc[start:end]\n    #train_crypro_df.info()\n    #train_crypro_df.head()\n    t = np.array(list(train_crypro_slice_df.index))\n    y = np.array(train_crypro_slice_df[asset_value].values)\n\n    if visualise:\n        plt.figure(figsize=(12,8))\n        plt.plot(t, y)\n        plt.xticks(fontsize=15)\n        plt.yticks(fontsize=15)\n        plt.title(f\"{asset_value} of {asset_name}\\n(start={start},end={end})\",fontsize=30)\n        plt.xlabel(\"Time\",fontsize=20)\n        plt.ylabel(f\"{asset_value}\",fontsize=20)\n        plt.show()\n    \n    \n    return t, y","cfbce832":"t, y = plot_time_series(asset_id = 8,asset_value = \"Target\",visualise=True)","cc0ba7b8":"t,y = plot_time_series(asset_id = 8,asset_value = \"Target\",start = 0,end = 1000)","8c5a20de":"t,y = plot_time_series(asset_id = 8,asset_value = \"Close\")","53d9ca39":"t,y = plot_time_series(asset_id = 8,asset_value = \"Close\",start = 0,end = 1000)","f6322788":"def plot_sin_curve(a:float, f:float, pd:float, end_time:float, sample_num:int,):\n    \"\"\"Generate sin curve and plot\n\n    Args:\n        a (float): Amplitude.\n        f (float): Frequency[Hz].\n        pd(float):phase difference(rad).\n        end_time (float): End time(sec).\n        sample_num(int) sample number.\n    \n    Returns:\n        t(np.ndarray): numpy array of time\n        y(np.ndarray):numpy array of y\n    \"\"\"\n    t = np.linspace(0, end_time, sample_num)\n    y = a * np.sin(2*np.pi*f*t + pd)\n    plt.figure(figsize=(12,8))\n    plt.plot(t,y)\n    plt.grid()\n    plt.show()\n    \n    return t,y","fdb2cbc9":"t,y1 = plot_sin_curve(a = 1.5, f = 50, pd = 0, end_time = 1, sample_num = 1024)","e23ffc53":"t,y2 = plot_sin_curve(a = 1, f = 120, pd = np.pi\/4*0, end_time = 1, sample_num = 1024)","a4e473d2":"y = y1 + y2\n\nplt.figure(figsize=(12,8))\nplt.grid()\nplt.plot(t,y)","ade8e90e":"def plot_fft(y:np.ndarray, t:np.ndarray, fs:int, sample_num:int, value_name:str):\n    \"\"\"Generate fft and plot\n\n    Args:\n        y (np.ndarray): time series value.\n        t (np.ndarray): time.\n        fs(int):sampling frequency.\n        sample_num(int): sample number.\n        value_name(str): name of value\n    \"\"\"\n    \n    sp = np.fft.fft(y)\n    freq = np.fft.fftfreq(t.shape[-1], d=1.0\/fs)\n\n#     fig, ax = plt.subplots(nrows=3, sharex=True, figsize=(12,12))\n#     ax[0].plot(sp.real, label=\"Real part\")\n#     ax[0].legend()\n#     ax[1].plot(sp.imag, label=\"Imaginary part\")\n#     ax[1].legend()\n#     ax[2].plot(freq, label=\"Frequency\")\n#     ax[2].legend()\n#     ax[2].set_xlabel(\"Number of data\")\n\n#     plt.grid()\n#     plt.show()\n    \n    Amp = np.abs(sp\/(sample_num\/2)) # Amplitude\n\n    fig, ax = plt.subplots(figsize=(12,8))\n    ax.plot(freq[1:int(sample_num\/2)], Amp[1:int(sample_num\/2)])\n    plt.title(f\"FFT of {value_name}\",fontsize=30)\n    ax.set_xlabel(\"Freqency [Hz]\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.grid()\n    #plt.xlim(0,5)#Change range according to frequency of wave\n    plt.show()","10796f88":"plot_fft(y=y,t=t,fs=1000,sample_num=1024,value_name=\"sin wave\")","b6869c80":"import numpy as np\ndlen = 1024 #\u30ce\u30a4\u30ba\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u9577\nmean = 0.0  #\u30ce\u30a4\u30ba\u306e\u5e73\u5747\u5024\nstd  = 1.0  #\u30ce\u30a4\u30ba\u306e\u5206\u6563\n\ny = np.random.normal(mean,std,dlen)","78324b24":"def plot_white_noize(mean:float, std:float, end_time:float, sample_num:int):\n    \"\"\"Generate sin curve and plot\n\n    Args:\n        mean (float): average.\n        std(float):standard deviation.\n        end_time (float): End time(sec).\n        sample_num(int) sample number.\n    \n    Returns:\n        t(np.ndarray): numpy array of time\n        y(np.ndarray):numpy array of y\n    \"\"\"\n    t = np.linspace(0, end_time, sample_num)\n    y = np.random.normal(mean,std,sample_num)\n    plt.figure(figsize=(12,8))\n    plt.plot(t,y)\n    plt.grid()\n    plt.show()\n    \n    return t,y","ae18b0ec":"t, y = plot_white_noize(mean=0, std=1.0, end_time=10, sample_num=1024)","a039af09":"plot_fft(y=y,t=t,fs=1000,sample_num=1024,value_name=\"White noize\")","c51e817a":"for asset_id in asset_df[\"Asset_ID\"].values:\n    value_name = asset_df[asset_df[\"Asset_ID\"]==asset_id][\"Asset_Name\"].values[0]\n    t, y = plot_time_series(asset_id = asset_id, asset_value = \"Target\",start = 0, end = 1024, visualise=False)\n    plot_fft(y=y,t=t,fs=1000,sample_num=1024,value_name=value_name)","9133058a":"import scipy.signal as signal\n\nasset_id = 8\nvalue_name = asset_df[asset_df[\"Asset_ID\"]==asset_id][\"Asset_Name\"].values[0]\nt, y = plot_time_series(asset_id = asset_id,asset_value = \"Target\",start = 0, end = 1024, visualise=False,drop_na = True )\n\nf = np.linspace(0.01, 100, 10000)\npgram = signal.lombscargle(t, y, f, normalize=True)\nplt.plot(f, pgram)\nplt.show()","75395d9a":"# Check dataset","d3221fff":"# Lomb-Scargle periodogram","2d269763":"# Time series plot","4bea2d51":"# FFT","c799f6bf":"## Example2: White noize","72a2ad44":"For details of Lomb-Scargle periodogram, please check below reference.\n\n**Caution**  \nFor now, this does not work properly, if \"drop_na = False\", it does not output any...  \nSo it is set as True.","b82198b4":"# FFT for cryptocurrency","1f9af338":"# Introdcution\nPlease upvote\ud83d\udc4d if you find this  notebook is useful!\nThis is the introduction notebook for **FFT**.  \nI applyed FFT analysis to time series cryptocurrency data.  \n\nThere are some NAN value in data, which makes FFT does not work.  \nIt is not good, but I tried naive approch which drop the row which has NAN value.  \n\n\nAlso, I tried **Lomb-Scargle periodogram** which can treat those type of data.\n(But this part is pending...)\n\n[\ud83d\udcb0Wavelet x AI x Stock\ud83d\udcb0](https:\/\/www.kaggle.com\/c\/g-research-crypto-forecasting\/discussion\/291909)is related discussion I prepared.","815c18b6":"# Reference\n1. [numpy.fft.fft](https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.fft.fft.html)\n2. [Spectral Analysis of Nonuniformly Sampled Signals](https:\/\/www.mathworks.com\/help\/signal\/ug\/spectral-analysis-of-nonuniformly-sampled-signals.html)\n3. [scipy.signal.lombscargle](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.signal.lombscargle.html)","a6325aec":"## Example1: sin curve"}}