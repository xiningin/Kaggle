{"cell_type":{"24dff148":"code","5737d0df":"code","9cfdd2fa":"code","480dc25d":"code","a617d6a4":"code","7f3ec6be":"code","2d8cb46c":"code","98635085":"code","19b63104":"code","c50b25b7":"code","440378df":"code","382612e4":"code","81934857":"code","81794337":"code","3fee34a7":"code","628b8613":"code","b047bc96":"code","c1f89ae0":"code","50cbaaff":"code","61dd555c":"code","46151bcd":"code","a36e86f9":"code","49ddc898":"code","f9b5414f":"code","61152f18":"code","0cf5bc8d":"code","db58bd57":"code","b134092b":"code","44205b5c":"code","86b260db":"markdown","63e9c5e5":"markdown","465c005b":"markdown","cb923772":"markdown","3140e5a8":"markdown","ce99d321":"markdown","ed3c8c04":"markdown","9a0a2133":"markdown","38c4fd0d":"markdown","2bffb589":"markdown","5b61d92a":"markdown","b60e4406":"markdown","cbbbd744":"markdown","351bd3d9":"markdown"},"source":{"24dff148":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport os\nimport plotly.graph_objs as go\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.tools as tls\nprint(os.listdir(\"..\/input\"))\n\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.feature_extraction.text import CountVectorizer  \nfrom sklearn.naive_bayes import MultinomialNB,GaussianNB\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier","5737d0df":"# Reading the Deliveries and Matches Dataset\nTRM=pd.read_csv(\"..\/input\/Trainmatchess.csv\")\nTRM.index=TRM[\"id\"]\nTRD=pd.read_csv(\"..\/input\/TrainDeliveriess.csv\")","9cfdd2fa":"TRM.head()","480dc25d":"matches_played_byteams=pd.concat([TRM['team1'],TRM['team2']])\nmatches_played_byteams=matches_played_byteams.value_counts().reset_index()\nmatches_played_byteams.columns=['Team','Total Matches']\nmatches_played_byteams['wins']=TRM['winner'].value_counts().reset_index()['winner']\nmatches_played_byteams.set_index('Team',inplace=True)\n\ntrace1 = go.Bar(\n    x=matches_played_byteams.index,\n    y=matches_played_byteams['Total Matches'],\n    name='Total Matches'\n)\ntrace2 = go.Bar(\n    x=matches_played_byteams.index,\n    y=matches_played_byteams['wins'],\n    name='Matches Won'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='stack'\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='stacked-bar')\n","a617d6a4":"\"\"\"\nnull_columns=TRM.columns[TRM.isnull().any()]\nTRM[null_columns].isnull().sum()\n\nprint(TRM[TRM[\"winner\"].isnull()][null_columns])\n# Dropping the row \nTRM=TRM.drop(index=301)\nprint(TRM[TRM[\"winner\"].isnull()][null_columns])\n\"\"\"","7f3ec6be":"# Creating Feature Table\nFT=pd.DataFrame()\n\n# Making match_id as the index\nFT[\"match_id\"]=TRM[\"id\"]\nFT.index=FT[\"match_id\"]\n\nprint('Total Matches Played:',TRM.shape[0])","2d8cb46c":"# Adding Team Deatils\nFT[\"Team A\"]=TRM[\"team1\"]\nFT[\"Team B\"]=TRM[\"team2\"]\nFT = FT.drop('match_id', 1)\nprint('Teams:',FT['Team A'].unique())","98635085":"# Adding season and winner to the feature table\nFT[\"season\"]=TRM[\"season\"]\nFT[\"winner\"]=TRM[\"winner\"]\n\n#creating the season and team list\nseason_list=FT['season'].unique()\nteam_list=FT['Team A'].unique()\n\n#Now check the frequency of each team won during every season\n\ntemp_data=pd.DataFrame() # Creating a temporary dataframe    \ntemp_data[\"Team\"]=team_list\ntemp_data.index=temp_data[\"Team\"]\n\nfor s in season_list:\n    winner_season=FT.loc[FT['season']== s,\"winner\"] # get the series of winners at the particular season\n    t=winner_season.value_counts() # count the value of winning_count of each team\n    t=t.to_frame() # Series is not efficient to work converting to a dataframe\n    temp_data[\"win_count\"]=t[\"winner\"] \n    temp_data['win_count']=temp_data['win_count'].fillna(0)\n    temp_data['win_count']=temp_data['win_count'].astype(int)\n    tit=\"season \"+str(s)\n    fig = plt.figure(figsize=(8,4))\n    temp_data.plot(kind='bar',title=tit)","19b63104":"FT = FT.drop('winner', 1)","c50b25b7":"teams=['Islamabad United','Karachi Kings','Lahore Qalandars','Peshawar Zalmi','Quetta Gladiators']\nt=pd.Series(teams)\n# finding the frequency of toss winners and the match winners to correlate\ntemp_toss_winner=pd.DataFrame()\ntemp_toss_winner['Team']=t.values\ntemp_match_winner=pd.DataFrame()\ntemp_match_winner['Team']=t.values\n\n#Caluclating toss_winning and match winning frequency of each team\ntemp_toss_winner['Count'] = temp_toss_winner['Team'].map(TRM['toss_winner'].value_counts())\ntemp_match_winner['Count']=temp_match_winner['Team'].map(TRM['winner'].value_counts())\n\nplt.subplots(figsize=(8,6))\nax=TRM['toss_winner'].value_counts().plot.bar(width=0.8)\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))\nplt.title(\"Toss Winner\")\nplt.show()\n\nplt.subplots(figsize=(8,6))\nax=TRM['winner'].value_counts().plot.bar(width=0.8)\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))\nplt.title(\"Match Winner\")\nplt.show()","440378df":"df=TRM[TRM['toss_winner']==TRM['winner']]\nslices=[len(df),(577-len(df))]\nlabels=['yes','no']\nplt.pie(slices,labels=labels,startangle=90,shadow=True,explode=(0,0),autopct='%1.1f%%',colors=['r','g'])\nfig = plt.gcf()\nfig.set_size_inches(6,6)\nplt.show()","382612e4":"# Adding the toss_winner to the feature table\nFT[\"toss_winner\"]=TRM[\"toss_winner\"]","81934857":"\ndl=TRM.loc[TRM['dl_applied'] == 1]\ndl","81794337":"FT[\"dl_applied\"]=TRM[\"dl_applied\"]\nFT","3fee34a7":"plt.subplots(figsize=(10,15))\nax = TRM['venue'].value_counts().sort_values(ascending=True).plot.barh(width=.9)\nax.set_xlabel('Grounds')\nax.set_ylabel('count')\nplt.show()","628b8613":"runs_per_over = TRD.pivot_table(index=['over'],columns='batting_team',values='total_runs',aggfunc=sum)\nruns_per_over[(matches_played_byteams[matches_played_byteams['Total Matches']>5].index)].plot(color=[\"b\", \"r\", \"#Ffb6b2\", \"g\",'brown','y','#6666ff','black','#FFA500']) #plotting graphs for teams that have played more than 100 matches\nx=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nplt.xticks(x)\nplt.ylabel('total runs scored')\nfig=plt.gcf()\nfig.set_size_inches(16,8)\nplt.show()","b047bc96":"def Batting_Averager(df):\n    over_average=pd.DataFrame()\n    overs=list(range(1, 21))\n    o_a=[]\n    o=pd.Series(overs)\n    over_average['overs']=o.values\n    for i in overs:\n        over_temp_frame=df.loc[df['over']== i]\n        total_bruns=over_temp_frame['bye_runs'].sum()\n        total_lbruns=over_temp_frame['legbye_runs'].sum()\n        b_non_zero=over_temp_frame.loc[over_temp_frame['batsman_runs'] != 0,\"batsman_runs\"].sum()\n        b_dot=over_temp_frame.loc[over_temp_frame['batsman_runs']==0,\"batsman_runs\"].count()\n        b_dis=over_temp_frame.loc[over_temp_frame['dismissal_kind'] != 'NaN',\"dismissal_kind\"].count()\n        oa=(1*total_bruns+1*total_lbruns+2*b_non_zero-1*b_dot+-3*b_dis)\/5\n        o_a.append(oa)\n    o_a=pd.Series(o_a)\n    over_average['average']=o_a.values\n    bat_av=over_average[\"average\"].mean()\n    return bat_av\n    \n\ndef Bowling_Averager(df):\n    over_average=pd.DataFrame()\n    overs=list(range(1, 21))\n    o_a=[]\n    o=pd.Series(overs)\n    over_average['overs']=o.values\n    for i in overs:\n        over_temp_frame=df.loc[df['over']== i]\n        total_wr=over_temp_frame['wide_runs'].sum()\n        total_nb=over_temp_frame['noball_runs'].sum()\n        total_pr=over_temp_frame['penalty_runs'].sum()\n        total_er=over_temp_frame['extra_runs'].sum()\n        b_non_zero=over_temp_frame.loc[over_temp_frame['total_runs'] != 0,\"total_runs\"].sum()\n        b_dot=over_temp_frame.loc[over_temp_frame['total_runs']==0,\"total_runs\"].count()\n        b_dis=over_temp_frame.loc[over_temp_frame['dismissal_kind'] != 'NaN',\"dismissal_kind\"].count()\n        oa=(-1*total_wr+-1*total_nb+-2*total_pr+-1*total_er+-2*b_non_zero+5*b_dot+10*b_dis)\/7\n        o_a.append(oa)\n    o_a=pd.Series(o_a)\n    over_average['average']=o_a.values\n    bow_av=over_average[\"average\"].mean()\n    return(bow_av)\n\n\n\n#creating team_performance dataframe\nteam_performance=pd.DataFrame()\nteam_performance[\"match_id\"]=TRM[\"id\"]\nteam_performance.index=team_performance[\"match_id\"]\nteam_performance[\"Team_A_Batting_Average\"]=0.0\nteam_performance[\"Team_A_Bowling_Average\"]=0.0\nteam_performance[\"Team_A_Total_Runs\"]=0\nteam_performance[\"Team_B_Batting_Average\"]=0.0\nteam_performance[\"Team_B_Bowling_Average\"]=0.0\nteam_performance[\"Team_B_Total_Runs\"]=0\nteam_performance[\"Team_A_overall\"]=0.0\nteam_performance[\"Team_B_overall\"]=0.0\nteam_performance[\"super_over\"]='0'\n\n# creating match_id list\nmatch_id_list=TRM[\"id\"].unique()\novers_list=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\n\nfor m in match_id_list:\n    match_frame=TRD.loc[TRD[\"match_id\"]==m]\n    temp=FT.loc[m,\"Team A\":\"Team B\"]\n    team_dict=temp.to_dict()\n    FLAG=False\n    team_perform_dict={\"match_id\":m,\"Team_A_Batting_Average\":0.0,\"Team_A_Bowling_Average\":0.0,\"Team_A_Total_Runs\":0,\"Team_B_Batting_Average\":0.0,\"Team_B_Bowling_Average\":0.0,\"Team_B_Total_Runs\":0,\"Team_A_overall\":0.0,\"Team_B_overall\":0.0,\"super_over\":'0'}\n    super_over=match_frame['is_super_over'].sum()\n    \n    if super_over==0:\n        innings=match_frame[\"inning\"].unique()\n        super_over_innings=[]\n    else :\n        super_over_run={\"Team_A_run\":0,\"Team_B_run\":0}\n        FLAG=True\n        super_over_innings=[3,4]\n    \n    for i in innings:\n        innings_frame=pd.DataFrame()\n        innings_frame=match_frame.loc[match_frame['inning'] == i]\n        batting_team=innings_frame.loc[innings_frame['inning']== i,\"batting_team\"].values[0]\n        bowling_team=innings_frame.loc[innings_frame['inning']== i,\"bowling_team\"].values[0]\n        \n        if(team_dict['Team A']==batting_team):\n            batting_team_frame=innings_frame[['over','ball','bye_runs','legbye_runs','batsman_runs','dismissal_kind']]\n            bowling_team_frame=innings_frame[['over','ball','wide_runs','noball_runs','penalty_runs','extra_runs','total_runs','dismissal_kind']]\n            team_perform_dict[\"Team_A_Batting_Average\"]=Batting_Averager(batting_team_frame)\n            team_perform_dict[\"Team_B_Bowling_Average\"]=Bowling_Averager(bowling_team_frame)\n            team_perform_dict[\"Team_A_Total_Runs\"] =innings_frame['total_runs'].sum()\n            \n        elif(team_dict['Team B']==batting_team):\n            batting_team_frame=innings_frame[['over','ball','bye_runs','legbye_runs','batsman_runs','dismissal_kind']]\n            bowling_team_frame=innings_frame[['over','ball','wide_runs','noball_runs','penalty_runs','extra_runs','total_runs','dismissal_kind']]\n            team_perform_dict[\"Team_B_Batting_Average\"]=Batting_Averager(batting_team_frame)\n            team_perform_dict[\"Team_A_Bowling_Average\"]=Bowling_Averager(bowling_team_frame)\n            team_perform_dict[\"Team_B_Total_Runs\"]=innings_frame['total_runs'].sum()\n        \n    for i in super_over_innings:\n        innings_frame=pd.DataFrame()\n        innings_frame=match_frame.loc[match_frame['inning']==i]\n        batting_team=innings_frame.loc[innings_frame['inning']== i,\"batting_team\"].values[0]\n        if(team_dict['Team A']==batting_team):\n            super_over_run[\"Team_A_run\"]=innings_frame['total_runs'].sum()\n        elif(team_dict['Team B']==batting_team):\n            super_over_run[\"Team_B_run\"]=innings_frame['total_runs'].sum()\n\n    if FLAG:\n        if super_over_run[\"Team_A_run\"]>super_over_run[\"Team_B_run\"]:\n            team_perform_dict['super_over']='A'\n        elif super_over_run[\"Team_B_run\"]>super_over_run[\"Team_A_run\"]:\n            team_perform_dict['super_over']='B'\n            \n    team_perform_dict[\"Team_A_overall\"]=(team_perform_dict[\"Team_A_Batting_Average\"]+team_perform_dict[\"Team_A_Bowling_Average\"])\/2\n    team_perform_dict[\"Team_B_overall\"]=(team_perform_dict[\"Team_B_Batting_Average\"]+team_perform_dict[\"Team_B_Bowling_Average\"])\/2\n\n    \n    df=pd.DataFrame([team_perform_dict],columns=team_perform_dict.keys())\n    df.index=df[\"match_id\"]\n    match=df[\"match_id\"].unique()\n    team_performance.loc[match,:]= df.loc[df[\"match_id\"],:]\n    \n\nteam_performance","c1f89ae0":"player_match_frame=pd.DataFrame()\nplayer_match_frame[\"match_id\"]=TRM[\"id\"]\nplayer_match_frame.index=player_match_frame[\"match_id\"]\nplayer_match_frame[\"man_of_match\"]='NOT_IN_TEAM'\nmatch_id_list=TRM[\"id\"].unique()\n\nfor m in match_id_list:\n    player=TRM.loc[TRM['id']== m,\"player_of_match\"].values[0]\n    match_frame=TRD.loc[TRD[\"match_id\"]==m]\n    temp=FT.loc[m,\"Team A\":\"Team B\"]\n    team_dict=temp.to_dict()\n    TEAM_A_BATSMAN=match_frame.loc[match_frame['batting_team']==team_dict[\"Team A\"],[\"batsman\",\"non_striker\"]]\n    TEAM_A_BOWLERS=match_frame.loc[match_frame['bowling_team']==team_dict[\"Team A\"],[\"bowler\"]]\n    TEAM_A_MEMBERS=set(list(TEAM_A_BATSMAN[\"batsman\"].unique())+list(TEAM_A_BATSMAN[\"non_striker\"].unique())+list(TEAM_A_BOWLERS[\"bowler\"].unique()))\n    TEAM_B_BATSMAN=match_frame.loc[match_frame['batting_team']==team_dict[\"Team B\"],[\"batsman\",\"non_striker\"]]\n    TEAM_B_BOWLERS=match_frame.loc[match_frame['bowling_team']==team_dict[\"Team B\"],[\"bowler\"]]\n    TEAM_B_MEMBERS=set(list(TEAM_B_BATSMAN[\"batsman\"].unique())+list(TEAM_B_BATSMAN[\"non_striker\"].unique())+list(TEAM_B_BOWLERS[\"bowler\"].unique()))\n    if player in TEAM_A_MEMBERS:\n        player_match_frame.at[m, 'man_of_match'] = 'A'\n    elif player in TEAM_B_MEMBERS:\n        player_match_frame.at[m,\"man_of_match\"]='B'\nplayer_match_frame\n\n","50cbaaff":"winner_frame=pd.DataFrame()\nwinner_frame[\"match_id\"]=TRM[\"id\"]\nwinner_frame.index=winner_frame[\"match_id\"]\nwinner_frame[\"winner\"]=0\nmatch_id_list=TRM[\"id\"].unique()\n\nfor m in match_id_list:\n    winner=TRM.loc[TRM['id']== m,\"winner\"].values[0]\n    temp=FT.loc[m,\"Team A\":\"Team B\"]\n    team_dict=temp.to_dict()\n    if(winner==team_dict[\"Team A\"]):\n        winner_frame.at[m, 'winner'] = 0\n    elif(winner==team_dict[\"Team B\"]):\n        winner_frame.at[m,'winner']=1\n        \nwinner_frame\n        ","61dd555c":"def Batting_Averager(df):\n    over_average=pd.DataFrame()\n    overs=list(range(1, 21))\n    o_a=[]\n    o=pd.Series(overs)\n    over_average['overs']=o.values\n    for i in overs:\n        over_temp_frame=df.loc[df['over']== i]\n        total_bruns=over_temp_frame['bye_runs'].sum()\n        total_lbruns=over_temp_frame['legbye_runs'].sum()\n        b_non_zero=over_temp_frame.loc[over_temp_frame['batsman_runs'] != 0,\"batsman_runs\"].sum()\n        b_dot=over_temp_frame.loc[over_temp_frame['batsman_runs']==0,\"batsman_runs\"].count()\n        b_dis=over_temp_frame.loc[over_temp_frame['dismissal_kind'] != 'NaN',\"dismissal_kind\"].count()\n        oa=(1*total_bruns+1*total_lbruns+2*b_non_zero+-1*b_dot+-3*b_dis)\/5\n        o_a.append(oa)\n    o_a=pd.Series(o_a)\n    over_average['average']=o_a.values\n    bat_av=over_average[\"average\"].mean()\n    return bat_av\n    \n\ndef Bowling_Averager(df):\n    over_average=pd.DataFrame()\n    overs=list(range(1, 21))\n    o_a=[]\n    o=pd.Series(overs)\n    over_average['overs']=o.values\n    for i in overs:\n        over_temp_frame=df.loc[df['over']== i]\n        total_wr=over_temp_frame['wide_runs'].sum()\n        total_nb=over_temp_frame['noball_runs'].sum()\n        total_pr=over_temp_frame['penalty_runs'].sum()\n        total_er=over_temp_frame['extra_runs'].sum()\n        b_non_zero=over_temp_frame.loc[over_temp_frame['total_runs'] != 0,\"total_runs\"].sum()\n        b_dot=over_temp_frame.loc[over_temp_frame['total_runs']==0,\"total_runs\"].count()\n        b_dis=over_temp_frame.loc[over_temp_frame['dismissal_kind'] != 'NaN',\"dismissal_kind\"].count()\n        oa=(-1*total_wr+-1*total_nb+-2*total_pr+-1*total_er+-2*b_non_zero+5*b_dot+10*b_dis)\/7\n        o_a.append(oa)\n    o_a=pd.Series(o_a)\n    over_average['average']=o_a.values\n    bow_av=over_average[\"average\"].mean()\n    return(bow_av)\n\n\n\ndef df_feature(TRM,TRD,T):\n    # Creating Feature Table\n    F_T=pd.DataFrame()\n\n    # Making match_id as the index\n    F_T[\"match_id\"]=TRM[\"id\"]\n    F_T.index=F_T[\"match_id\"]\n\n    # Adding Team Deatils\n    F_T[\"Team A\"]=TRM[\"team1\"]\n    F_T[\"Team B\"]=TRM[\"team2\"]\n\n    # Adding Season Feature\n    F_T[\"season\"]=TRM[\"season\"]\n\n    # Adding Toss Winner Feature\n    F_T[\"toss_winner\"]=TRM[\"toss_winner\"]\n\n    # Adding dl feature\n    F_T[\"dl_applied\"]=TRM[\"dl_applied\"]\n    \n    #Adding cross validation features\n    #creating team_performance dataframe\n    team_performance=pd.DataFrame()\n    team_performance[\"match_id\"]=TRM[\"id\"]\n    team_performance.index=team_performance[\"match_id\"]\n    team_performance[\"Team_A_Batting_Average\"]=0.0\n    team_performance[\"Team_A_Bowling_Average\"]=0.0\n    team_performance[\"Team_A_Total_Runs\"]=0.0\n    team_performance[\"Team_B_Batting_Average\"]=0.0\n    team_performance[\"Team_B_Bowling_Average\"]=0.0\n    team_performance[\"Team_B_Total_Runs\"]=0.0\n    team_performance[\"Team_A_overall\"]=0.0\n    team_performance[\"Team_B_overall\"]=0.0\n    team_performance[\"super_over\"]='0'\n\n    # creating match_id list\n    match_id_list=TRM[\"id\"].unique()\n    overs_list=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\n\n    for m in match_id_list:\n        match_frame=TRD.loc[TRD[\"match_id\"]==m]\n        temp=F_T.loc[m,\"Team A\":\"Team B\"]\n        team_dict=temp.to_dict()\n        FLAG=False\n        team_perform_dict={\"match_id\":m,\"Team_A_Batting_Average\":0.0,\"Team_A_Bowling_Average\":0.0,\"Team_A_Total_Runs\":0,\"Team_B_Batting_Average\":0.0,\"Team_B_Bowling_Average\":0.0,\"Team_B_Total_Runs\":0,\"Team_A_overall\":0.0,\"Team_B_overall\":0.0,\"super_over\":0}\n        super_over=match_frame['is_super_over'].sum()\n    \n        if super_over==0:\n            innings=match_frame[\"inning\"].unique()\n            super_over_innings=[]\n        else :\n            super_over_run={\"Team_A_run\":0,\"Team_B_run\":0}\n            FLAG=True\n            super_over_innings=[3,4]\n    \n        for i in innings:\n            innings_frame=pd.DataFrame()\n            innings_frame=match_frame.loc[match_frame['inning'] == i]\n            batting_team=innings_frame.loc[innings_frame['inning']== i,\"batting_team\"].values[0]\n            bowling_team=innings_frame.loc[innings_frame['inning']== i,\"bowling_team\"].values[0]\n        \n            if(team_dict['Team A']==batting_team):\n                batting_team_frame=innings_frame[['over','ball','bye_runs','legbye_runs','batsman_runs','dismissal_kind']]\n                bowling_team_frame=innings_frame[['over','ball','wide_runs','noball_runs','penalty_runs','extra_runs','total_runs','dismissal_kind']]\n                team_perform_dict[\"Team_A_Batting_Average\"]=Batting_Averager(batting_team_frame)\n                team_perform_dict[\"Team_B_Bowling_Average\"]=Bowling_Averager(bowling_team_frame)\n                team_perform_dict[\"Team_A_Total_Runs\"] =innings_frame['total_runs'].sum()\n            \n            elif(team_dict['Team B']==batting_team):\n                batting_team_frame=innings_frame[['over','ball','bye_runs','legbye_runs','batsman_runs','dismissal_kind']]\n                bowling_team_frame=innings_frame[['over','ball','wide_runs','noball_runs','penalty_runs','extra_runs','total_runs','dismissal_kind']]\n                team_perform_dict[\"Team_B_Batting_Average\"]=Batting_Averager(batting_team_frame)\n                team_perform_dict[\"Team_A_Bowling_Average\"]=Bowling_Averager(bowling_team_frame)\n                team_perform_dict[\"Team_B_Total_Runs\"] =innings_frame['total_runs'].sum()\n        \n        for i in super_over_innings:\n            innings_frame=pd.DataFrame()\n            innings_frame=match_frame.loc[match_frame['inning']==i]\n            batting_team=innings_frame.loc[innings_frame['inning']== i,\"batting_team\"].values[0]\n            if(team_dict['Team A']==batting_team):\n                super_over_run[\"Team_A_run\"]=innings_frame['total_runs'].sum()\n            elif(team_dict['Team B']==batting_team):\n                super_over_run[\"Team_B_run\"]=innings_frame['total_runs'].sum()\n\n        if FLAG:\n            if super_over_run[\"Team_A_run\"]>super_over_run[\"Team_B_run\"]:\n                team_perform_dict['super_over']=1\n            elif super_over_run[\"Team_B_run\"]>super_over_run[\"Team_A_run\"]:\n                team_perform_dict['super_over']=2\n            \n        team_perform_dict[\"Team_A_overall\"]=(team_perform_dict[\"Team_A_Batting_Average\"]+team_perform_dict[\"Team_A_Bowling_Average\"])\/2\n        team_perform_dict[\"Team_B_overall\"]=(team_perform_dict[\"Team_B_Batting_Average\"]+team_perform_dict[\"Team_B_Bowling_Average\"])\/2\n\n    \n        df=pd.DataFrame([team_perform_dict],columns=team_perform_dict.keys())\n        df.index=df[\"match_id\"]\n        match=df[\"match_id\"].unique()\n        team_performance.loc[match,:]= df.loc[df[\"match_id\"],:]\n        \n    F_T[\"Team_A_Batting_Average\"]=team_performance[\"Team_A_Batting_Average\"]\n    F_T[\"Team_A_Bowling_Average\"]=team_performance[\"Team_A_Bowling_Average\"]\n    F_T[\"Team_A_Total_Runs\"]=team_performance[\"Team_A_Total_Runs\"]\n    F_T[\"Team_B_Batting_Average\"]=team_performance[\"Team_B_Batting_Average\"]\n    F_T[\"Team_B_Bowling_Average\"]=team_performance[\"Team_B_Bowling_Average\"]\n    F_T[\"Team_B_Total_Runs\"]=team_performance[\"Team_B_Total_Runs\"]\n    F_T[\"Team_A_overall\"]=team_performance[\"Team_A_overall\"]\n    F_T[\"Team_B_overall\"]=team_performance[\"Team_B_overall\"]\n    F_T[\"super_over\"]=team_performance[\"super_over\"]\n    \n    if(T):\n        #Winner Field\n        winner_frame=pd.DataFrame()\n        winner_frame[\"match_id\"]=TRM[\"id\"]\n        winner_frame.index=winner_frame[\"match_id\"]\n        winner_frame[\"winner\"]=0\n        match_id_list=TRM[\"id\"].unique()\n\n        for m in match_id_list:\n            winner=TRM.loc[TRM['id']== m,\"winner\"].values[0]\n            temp=F_T.loc[m,\"Team A\":\"Team B\"]\n            team_dict=temp.to_dict()\n            if(winner==team_dict[\"Team A\"]):\n                winner_frame.at[m, 'winner'] = 0\n            elif(winner==team_dict[\"Team B\"]):\n                winner_frame.at[m,'winner']=1\n            \n        #Adding Winner Field to F_T\n        F_T[\"winner\"]=winner_frame[\"winner\"]\n        \n    return F_T\n        \n","46151bcd":"T=True\ntrain=df_feature(TRM,TRD,T)","a36e86f9":"train","49ddc898":"train_feature=[\"season\", \"dl_applied\",\n               \"Team_A_Batting_Average\", \"Team_A_Bowling_Average\",\n               \"Team_A_Total_Runs\",\n                \"Team_B_Batting_Average\", \"Team_B_Bowling_Average\",\n               \"Team_B_Total_Runs\",\n                \"Team_A_overall\",\"Team_B_overall\",\"super_over\"]\n\n\n\n\n\nX_train, X_test, y_train, y_test = train_test_split(train[train_feature],train[\"winner\"], test_size = 0.2, random_state = 10)\n#one_hot_encoded_training_predictors=one_hot_encoded_training_predictors.drop('toss_winner_Team11',1)\n","f9b5414f":"#Create a Gaussian Classifier\nmodel = GaussianNB()\n\n# Train the model using the training sets \nmodel.fit(X_train,y_train)\n\n#Predict Output \npredicted= model.predict(X_test)\na = accuracy_score(y_test,predicted)\nprint('The accuracy using NB is:',format(a*100))\n","61152f18":"# Define model\nSVC_model = svm.SVC()\n\n# Fit model\nSVC_model.fit(X_train, y_train)\n\n#Predict Output \npredicted= SVC_model.predict(X_test)\na = accuracy_score(y_test,predicted)\nprint('The accuracy using SVC Classifier is:',format(a*100))\n\n","0cf5bc8d":"# Define model\nRF_model = RandomForestClassifier(max_depth=2, random_state=0)\n\n# Fit model\nRF_model.fit(X_train, y_train)\n\n#Predict Output \npredicted= RF_model.predict(X_test)\na = accuracy_score(y_test,predicted)\nprint('The accuracy using RandomForest Classifier is:',format(a*100))\n","db58bd57":"TTM=pd.read_csv(\"..\/input\/Testmatchess.csv\")\nTTM[\"id\"]=TTM[\"match_id\"]\nTTM = TTM.drop('match_id', 1)\nTTM.index=TTM[\"id\"]\nTTD=pd.read_csv(\"..\/input\/TestDeliveriess.csv\")\nT=False\ntest_df = df_feature(TTM,TTD,T)\n\ntest_df","b134092b":"sub=pd.read_csv(\"..\/input\/submissionn.csv\")\nsub.index=sub[\"match_id\"]","44205b5c":"print(\"Predicting...\")\nsub['team_1_win_flag'] =model.predict(test_df[train_feature])\nsub.team_1_win_flag.replace([0,1], [1, 0], inplace=True)\nprint(\"writing...\")\nprint(\"If Team -1 win flag is 0(Team-1 WIN) else (Team-2 WIN)\")\nsub.to_csv('sub1.csv', index = False)\nTTM=pd.read_csv(\"sub1.csv\")\nprint(TTM)\ntest_df.to_csv('test.csv',index=False)\nprint(\"done...\")\nprint(sub.info())","86b260db":"*** DROPPING THE NULL VALUES ***","63e9c5e5":"*** RUNS PER OVER ACROSS SEASON ***","465c005b":"TIme is a important feature for prediciting match outcome.Since the time period reputates the growth and their downfalls statistically.In this dataset *** season *** feature act as the time period of every match.Now we justify why we taken season as our feature.We also need winning_team result to explorate their winning structure.","cb923772":"**  PLAYER OF EACH MATCH **","3140e5a8":"** RANDOM FOREST ALGORITHM **","ce99d321":"Now setting up the team details like which teams are going to play in the match on the respective id's.So add *** Team A *** and *** Team B *** columns to the *** FT *** Dataframe","ed3c8c04":"** PREPARATION OF FEATURE TABLE **","9a0a2133":"** DUCKWORTH-LEWIS METHOD **","38c4fd0d":"*** TOSS FEATURE ***","2bffb589":"** USING NAVIE_BAYES ALGORITHM **","5b61d92a":"** TEAM DELIVERIES **","b60e4406":"** SUPPORT VECTOR MACHINE **","cbbbd744":"** SEASON FEATURE **","351bd3d9":"** VENUE FEATURE **"}}