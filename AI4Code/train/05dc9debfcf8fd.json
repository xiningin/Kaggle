{"cell_type":{"1f2669cb":"code","e1b63a5d":"code","23715120":"code","ea1fb993":"code","8fc45ed0":"code","17afe6e7":"code","6af78d61":"code","8685ebce":"code","c0be9511":"code","f4f01fcf":"code","124a4bcb":"code","4a44066b":"code","e5a32303":"code","0fdb5d4a":"code","94757cdd":"code","fcfb8ce0":"code","a7a9fc5c":"code","7b8d6519":"code","926e9ab8":"code","31ed8259":"code","0ba2bbeb":"code","726f8b08":"code","8a0a1df1":"code","7b1dd022":"code","b065a0ce":"code","0b813b77":"code","799a4b94":"code","58564eb5":"code","28d75253":"code","f174499b":"code","43dc5d90":"code","00fdba27":"markdown","aaab4d5e":"markdown","3215c92d":"markdown","d9a9cf9e":"markdown","5e4aadab":"markdown","f736e37a":"markdown","2495995a":"markdown"},"source":{"1f2669cb":"!pip install catboost","e1b63a5d":"# Dataframe\nimport numpy as np\nimport pandas as pd\nfrom math import sqrt\n\n# Preprocessing\nimport category_encoders as ce\n\n# Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\ninit_notebook_mode(connected=True)  \nimport plotly.figure_factory as ff\nsns.set_style(\"whitegrid\")\n\n# Outlier Detection\nfrom scipy import stats\n\n# Sklearn utilities\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.inspection import permutation_importance\n\n# Regression model\nfrom catboost import Pool, CatBoostRegressor, cv\nfrom catboost.utils import eval_metric\n\n# Feature Importance\nimport shap","23715120":"df = pd.read_csv('..\/input\/singapore-airbnb\/listings.csv')","ea1fb993":"df.head()","8fc45ed0":"df.describe().transpose()","17afe6e7":"df.info()","6af78d61":"# Check null values\nnull_value_stats = df.isnull().sum()\nnull_value_stats[null_value_stats != 0]","8685ebce":"# Unecessary features to predict price\ndf.drop(['name','id','host_name', 'host_id', 'last_review'], inplace=True, axis=1)\n\n# Impute missing values to 0\ndf[\"reviews_per_month\"] = df[\"reviews_per_month\"].fillna(0)","c0be9511":"# Show correlation between features\nplt.figure(figsize=(12,5)) \nsns.heatmap(df.corr(),annot=True,fmt=\"f\")\nplt.show()","f4f01fcf":"# Specify all numeric features for outlier detection\nnumeric_features = ['latitude','longitude','price',\n                    'minimum_nights','number_of_reviews',\n                    'calculated_host_listings_count','availability_365']","124a4bcb":"# Check target's distribution\nsns.histplot(df[\"price\"])","4a44066b":"# Remove outlier from target value (price)\noutlier = (np.abs(stats.zscore(df[\"price\"]))<0.7)\noutlier_ix = np.where(outlier==False)\ndf.drop(index=outlier_ix[0], inplace=True)","e5a32303":"# Validate target's distribution after removing outlier\nsns.histplot(df[\"price\"])","0fdb5d4a":"# Checking outlier using boxplot\nplt.figure(figsize=(18,10))\n\nfor i in range(1,8):    \n    plt.subplot(2,4,i)\n    fig = df.boxplot(column=numeric_features[i-1])","94757cdd":"# Checking outlier using distribution\nplt.figure(figsize=(18,10))\n\nfor j in range(1,8):\n    plt.subplot(2,4,j)\n    sns.histplot(df[numeric_features[j-1]])","fcfb8ce0":"outliers = [] \n\n# Check outliers using zscore\nfor lat in df['latitude']:\n    zscore = (lat - np.mean(df['latitude'])) \/ np.std(df['latitude'])\n    if zscore > 3:\n        outliers.append(lat)\n        \nprint(len(outliers))","a7a9fc5c":"# replace outliers with median\ndf_cleaned = df.replace(outliers, np.median(df['latitude']))","7b8d6519":"# Hosts at air-bnb provide a maximum of one year stay (365 days) in the form of rent to the visitors\ndf_cleaned = df[df['minimum_nights'] <= 365]","926e9ab8":"# Find total classes for room_type\ndf_cleaned['room_type'].unique()","31ed8259":"# Map integers to categorical values\nroom_dict ={\n    'Entire home\/apt': 1,\n    'Private room': 2,\n    'Shared room': 3\n}\n\ndf_cleaned['room_type'] = df_cleaned['room_type'].map(room_dict)","0ba2bbeb":"# Find total classes for neighbourhood\ndf_cleaned['neighbourhood'].unique()","726f8b08":"# Binary encoding for neighbourhood\nbinary = ce.BinaryEncoder(cols=['neighbourhood'])\ndf_cleaned = binary.fit_transform(df_cleaned)","8a0a1df1":"# See the first 10 rows\ndf_cleaned.head(10)","7b1dd022":"# Specify features and target values\nX = df_cleaned.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,11,13,14,15]].values\ny = df_cleaned.iloc[:,12:13].values","b065a0ce":"# Find total classes for neighbourhood_group\ndf_cleaned['neighbourhood_group'].unique()","0b813b77":"# Label encoding for neighbourhood group\nlabel = LabelEncoder()\nX[:,0] = label.fit_transform(X[:,0])","799a4b94":"# Split model into 80% training and 20% testing\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 42)\n\n# Utilize pooling from Catboost\ntrain_pool = Pool(X_train, y_train) \ntest_pool = Pool(X_test, y_test)","58564eb5":"# Specify hyperparameters for the model\nparams = {\n    'iterations': 6000,\n    'learning_rate': 0.002,\n    'random_seed': 42,\n    'logging_level': 'Silent',\n    'early_stopping_rounds': 500\n}","28d75253":"# Define regression model using the specified hyperparameters\nmodel = CatBoostRegressor(**params)","f174499b":"# Train the model and check plot its training data\nmodel.fit(\n    train_pool, \n    eval_set=test_pool, \n    verbose=False, \n    plot=True\n)","43dc5d90":"preds = model.predict(X_test)\nmae = mean_absolute_error(y_test, preds)\nmse = mean_squared_error(y_test, preds)\nrmse = sqrt(mean_squared_error(y_test, preds))\n\nprint(\"MAE: \" + str(mae))\nprint(\"RMSE: \" + str(rmse))\nprint(\"MSE: \" + str(mse))","00fdba27":"# 5. Evaluation","aaab4d5e":"## 3.2 Outlier Detection","3215c92d":"# 2. Data Understanding","d9a9cf9e":"# 3. Data Preprocessing","5e4aadab":"# 1. Dataset Preparation","f736e37a":"# 4. Modeling","2495995a":"## 3.1 Features Removal"}}