{"cell_type":{"43e34d68":"code","7da31bea":"code","8d06dfd8":"code","e7b4255d":"code","bb6d3fd5":"code","536626bf":"code","f221aeae":"code","0e67b3ff":"code","75add2d4":"code","848cc95d":"code","c39090d4":"markdown","35aa17aa":"markdown","9b8719d0":"markdown","c4a187ac":"markdown","4f9bd873":"markdown","c1bae057":"markdown","19b5794f":"markdown","ebfcef1e":"markdown"},"source":{"43e34d68":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Optimizing compiler for Numpy fucntions\nfrom numba import njit\n\n# To manipulate dataframes with speed and big data support\nimport datatable as dtable\n\n# make your loops show a smart progress meter\nfrom tqdm.notebook import tqdm\n\nfrom sklearn.metrics import roc_auc_score\nimport gc\nfrom xgboost import XGBClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7da31bea":"%%time\n# Loading the data with datatable and coverting to pandas for easy data manipulation\ntrain_original = dtable.fread('..\/input\/jane-street-market-prediction\/train.csv').to_pandas()\n\n# Converting datatypes of columns from float64 to float32 for reduced memory saving in RAM. \nfloat64Cols = train_original.select_dtypes(include=['float64']).columns\ndict_astype = {col:'float32' for col in float64Cols}\ntrain = train_original.astype(dict_astype)\n\n# Freeing up not necessary dataframe\ndel train_original\n\ntrain.head()","8d06dfd8":"# Selecting necessary columns for modeling\nfeatures = [col for col in train.columns if 'feature' in col]\n\n# Eliminating rows with weight = 0 as these are excluded in scoring evaluation\ntrain = train[train['weight'] > 0].reset_index(drop = True)\n\n# Finding number of features with Nulls and filling them with mean for the while\n#print(\"Number of features with NA's: \",sum(train.isna().sum()>0))\ntrain.fillna(-999,inplace=True)\nprint(\"Number of features with NA's: \",sum(train.isna().sum()>0)) \n\n# Deciding the target column. Taking only trades with a positive return\ntrain['action'] = np.where(train['resp']> 0, 1,0).astype(int)","e7b4255d":"@njit(fastmath = True)\ndef utility_score_numba(date, weight, resp, action):\n    Pi = np.bincount(date, weight * resp * action)\n    t = np.sum(Pi) \/ np.sqrt(np.sum(Pi ** 2)) * np.sqrt(250 \/ len(Pi))\n    u = min(max(t, 0), 6) * np.sum(Pi)\n    return u\n\nfrom datetime import datetime\ndef timer(start_time=None):\n    if not start_time:\n        start_time = datetime.now()\n        return start_time\n    elif start_time:\n        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n        tmin, tsec = divmod(temp_sec, 60)\n        print('\\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))\n\n# weighted average as per Donate et al.'s formula\n# https:\/\/doi.org\/10.1016\/j.neucom.2012.02.053\ndef weighted_average(a):\n    w = []\n    n = len(a)\n    for j in range(1, n + 1):\n        j = 2 if j == 1 else j\n        w.append(1 \/ (2**(n + 1 - j)))\n    return np.average(a, weights=w)","bb6d3fd5":"from sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n# https:\/\/www.kaggle.com\/marketneutral\/purged-rolling-time-series-cv-split\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass PurgedGroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Allows for a gap in groups to avoid potentially leaking info from\n    train into test if the model has windowed or lag features.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_group_size : int, default=Inf\n        Maximum group size for a single training set.\n    group_gap : int, default=None\n        Gap between train and test\n    max_test_group_size : int, default=Inf\n        We discard this number of groups from the end of each train split\n    \"\"\"\n\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_group_size=np.inf,\n                 max_test_group_size=np.inf,\n                 group_gap=None,\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_group_size = max_train_group_size\n        self.group_gap = group_gap\n        self.max_test_group_size = max_test_group_size\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        group_gap = self.group_gap\n        max_test_group_size = self.max_test_group_size\n        max_train_group_size = self.max_train_group_size\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n\n        group_test_size = min(n_groups \/\/ n_folds, max_test_group_size)\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n\n            group_st = max(0, group_test_start - group_gap - max_train_group_size)\n            for train_group_idx in unique_groups[group_st:(group_test_start - group_gap)]:\n                train_array_tmp = group_dict[train_group_idx]\n                \n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n\n            train_end = train_array.size\n \n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n\n            test_array  = test_array[group_gap:]\n                    \n            yield [int(i) for i in train_array], [int(i) for i in test_array]","536626bf":"\ncv = PurgedGroupTimeSeriesSplit(\n    n_splits=3,\n    #max_train_group_size=150,#208, # 262\n    group_gap=63, #84,#105\n    max_test_group_size=63# 108 #131\n)\n\n\nfor tr,te in cv.split(\n        train.loc[:,features].values,\n        train['action'].values,\n        groups=train['date'].values):\n    print(train.loc[tr,'date'].unique())\n    print(train.loc[te,'date'].unique())\n    \n","f221aeae":"params = {\n                'random_state': 13,\n                'objective':'binary:logistic',\n                'missing': -999,\n                'tree_method': 'gpu_hist',\n                'n_estimators': 507,\n                'max_depth': 8,\n                'learning_rate': 0.06992689459063349,\n                'subsample': 0.8012753784867586,\n                'colsample_bytree': 0.8419498887494685,\n                'gamma': 9\n}\n\n\n\nclf = XGBClassifier(**params)\nclf.fit(train.loc[:, features], train.loc[:, 'action'])\n\ncv = PurgedGroupTimeSeriesSplit(\n    n_splits=3,\n    #max_train_group_size=499,\n    group_gap=63,\n    max_test_group_size=63\n)\n\nauc_scores = []\nutilityscores_train = []\npredited_utilityscores_test = []\nactual_utilityscores_test = []\nmodels = []\n\nstart_time = timer(None)\nfor fold, (tr, te) in enumerate(cv.split(train.loc[:,features].values, train['action'].values, train['date'].values)):\n    X_tr, X_val = train.loc[tr, features].values, train.loc[te, features].values\n    y_tr, y_val = train.loc[tr, 'action'].values, train.loc[te, 'action'].values\n    \n    clf.fit(X_tr, y_tr)\n    val_pred = clf.predict(X_val)\n    models.append(clf)\n    \n    # Calculating Metrics AUC & Utility score\n    score = roc_auc_score(y_val, val_pred)\n    auc_scores.append(score)\n    \n    predicted_utilityscore_test = utility_score_numba(train.loc[te,'date'].values,\n                              train.loc[te,'weight'].values,\n                              train.loc[te,'resp'].values,\n                              val_pred)\n    predited_utilityscores_test.append(predicted_utilityscore_test)\n    \n    actual_utilityscore_test = utility_score_numba(train.loc[te,'date'].values,\n                              train.loc[te,'weight'].values,\n                              train.loc[te,'resp'].values,\n                              y_val)\n    actual_utilityscores_test.append(actual_utilityscore_test)\n    \n    utilityscore_train = utility_score_numba(train.loc[tr,'date'].values,\n                              train.loc[tr,'weight'].values,\n                              train.loc[tr,'resp'].values,\n                              train.loc[tr,'action'].values)\n    utilityscores_train.append(utilityscore_train)\n    \n\n    del val_pred, X_tr, X_val, y_tr, y_val, score, predicted_utilityscore_test, utilityscore_train, actual_utilityscore_test\n\n#Calculating weighted averages of Utility scores through all the folds    \nutility_train_avg = weighted_average(utilityscores_train)\npredicted_utility_test_avg = weighted_average(predited_utilityscores_test)\nactual_utility_test_avg = weighted_average(actual_utilityscores_test)\n\nprint(f'Utility Score for train data is {utility_train_avg}')\nprint(f'Predicted Utility Score for test data is {predicted_utility_test_avg}')\nprint(f'Actual Utility Score for test data is {actual_utility_test_avg}')\nprint('Finished training the classifier.') \n\nprint('Actual Test Utility scores: ',actual_utilityscores_test)\nprint('Predicted Test Utility scores: ',predited_utilityscores_test)\n\ngc.collect()\n\ntimer(start_time)\n","0e67b3ff":"import janestreet\nenv = janestreet.make_env()\nenv_iter_test = env.iter_test()","75add2d4":"@njit\ndef fast_fillna(array, value):\n    if np.isnan(array.sum()):\n        array = np.where(np.isnan(array), value, array)\n    return array","848cc95d":"'''The test set does not have 'resp'column, so below are the steps to calculate action variable\nFeatures -> resp\nresp -> action\n'''\n\nopt_th = 0.503\nfor (test_df, sample_prediction_df) in tqdm(env_iter_test):\n    if test_df['weight'].item() > 0:\n        \n        test = test_df.loc[:,features].values\n        test[0, :] = fast_fillna(test[0, :], -999)\n        \n        #@ Submitting xgbClassifier model predictions using classifier voting.\n        y_preds = models[2].predict(test) # + models[3].predict(test) + models[4].predict(test)\n        #if y_preds >= 2:\n        #    y_preds = np.array([1]) # Marking action as '1' if 2 or more classifiers classify action as 1\n        #else:\n        #    y_preds = np.array([0])\n        \n    else:\n         y_preds = np.array([0])\n    \n    sample_prediction_df.action = y_preds\n        \n    env.predict(sample_prediction_df) ","c39090d4":"**Training Results V6**\n\n* Utility Score for train data is           98746.66189362355<br>\n* Predicted Utility Score for test data is  510.0560209681661<br>\n* Actual Utility Score for test data is     55089.58933249386<br>\n\nTime taken: 0 hours 1 minutes and 27.91 seconds.\n\n**Training Results V7**\n\n* Utility Score for train data is           143333.9253399343<br>\n* Predicted Utility Score for test data is  602.1926323968815<br>\n* Actual Utility Score for test data is     27379.270573522677<br>\n\nTime taken: 0 hours 1 minutes and 48.26 seconds.","35aa17aa":"**Modeling Steps**\n\n1. Split numbers have been derived from another script.\n2. Derived the below Hyperparameters using bayesian optimizer, Optuna.\n3. Fit the hyperparameters to 3 splits. \n4. Evaluate the utility scores for train and test data for each split. \n5. Perform the weighted average of training and test scores across splits.\n","9b8719d0":"# Submission","c4a187ac":"# Modeling","4f9bd873":"# Data Cleaning\n1. Eliminating unnecessary rows and selecting necessary columns \n2. Handling Missing Values\n3. Creating the target variable,i.e action. ","c1bae057":"# Data Loading with Reduced Memory Storage","19b5794f":"**Steps Ahead**\n1. Loading the data with less storage memory\n2. Data Cleaning\n    1. Eliminating unnecessary rows and selecting necessary columns \n    2. Handling Missing Values\n    3. Creating the target variable,i.e action. \n3. Modeling\n4. Fitting best Hyperparameters on the groupedTimeSeriesSplits\n5. Submission","ebfcef1e":"## References:\n\n1) Time efficient Replace missing values method\n\nhttps:\/\/www.kaggle.com\/c\/jane-street-market-prediction\/discussion\/201302\n\nhttps:\/\/www.kaggle.com\/gogo827jz\/optimise-speed-of-filling-nan-function?scriptVersionId=48926407\n\nDecommisining the below operation as it is time consuming.<br>\ntest.fillna(-999,inplace=True)<br>\nUtilizing numba version of np.where to speed up the process of NA filling with 0.\n\n2. Group Time series split\n\nhttps:\/\/www.kaggle.com\/jorijnsmit\/found-the-holy-grail-grouptimeseriessplit\n\n3. Purged Group Time series split\n\nhttps:\/\/www.kaggle.com\/marketneutral\/purged-time-series-cv-xgboost-optuna\n\n4. Grabbed the ideas of classifier voting in test set from the below notebook\n\nhttps:\/\/www.kaggle.com\/isaienkov\/jane-street-market-prediction-xgb-kfold-rfe\n"}}