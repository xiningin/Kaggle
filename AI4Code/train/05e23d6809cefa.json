{"cell_type":{"f3cdb1eb":"code","7d427236":"code","f1060998":"code","12aa27b9":"code","9757e97b":"code","2c453ce9":"code","711d2286":"code","b2c465f0":"code","e5e241d6":"code","f99e0a6d":"code","06257094":"code","18578607":"code","a011bed7":"code","d4f5720e":"code","42234334":"code","bb2a3521":"code","ed599378":"code","ff160241":"code","d213ff6f":"code","5df6044d":"code","0ed9e158":"code","917d61e7":"markdown","aa380a71":"markdown","f5318599":"markdown","9208aa56":"markdown","cc222ea4":"markdown","f90c0259":"markdown","7979fec0":"markdown"},"source":{"f3cdb1eb":"!pip install ..\/input\/mmcvwhl\/addict-2.2.1-py3-none-any.whl\n!pip install ..\/input\/mmdetection20-5-13\/mmcv-0.5.1-cp37-cp37m-linux_x86_64.whl\n!pip install ..\/input\/mmdetection20-5-13\/terminal-0.4.0-py3-none-any.whl\n!pip install ..\/input\/mmdetection20-5-13\/terminaltables-3.1.0-py3-none-any.whl","7d427236":"!cp -r ..\/input\/mmdetection20-5-13\/mmdetection\/mmdetection .","f1060998":"!mkdir -p mmdetection\/data\/Wheatdetection\/annotations\n!cp -r ..\/input\/global-wheat-detection\/test mmdetection\/data\/Wheatdetection\/test\n!cp -r ..\/input\/global-wheat-detection\/sample_submission.csv mmdetection\/data\/Wheatdetection\/\n!mkdir mmdetection\/configs\/wheatdetection","12aa27b9":"!cp ..\/input\/mmdetfasterrcnn\/config\/config\/faster_rcnn_r50_fpn_1x_coco_test.py mmdetection\/configs\/wheatdetection\n!cp ..\/input\/mmdetfasterrcnn\/config\/config\/wheat_detection_test.py mmdetection\/configs\/_base_\/datasets\n!cp ..\/input\/mmdetfasterrcnn\/config\/config\/__init__.py mmdetection\/mmdet\/datasets\n!cp ..\/input\/mmdetfasterrcnn\/config\/config\/wheat.py mmdetection\/mmdet\/datasets","9757e97b":"cd mmdetection","2c453ce9":"!cp -r ..\/..\/input\/mmdetection20-5-13\/cocoapi\/cocoapi .","711d2286":"cd cocoapi\/PythonAPI","b2c465f0":"!make","e5e241d6":"!make install","f99e0a6d":"!python setup.py install","06257094":"import pycocotools","18578607":"cd ..\/..","a011bed7":"!pip install -v -e .","d4f5720e":"cd ..\/","42234334":"import sys\nsys.path.append('mmdetection') # To find local version","bb2a3521":"from mmdet.apis import init_detector, inference_detector, show_result_pyplot\nimport mmcv\nfrom mmcv import Config\nfrom mmdet.models import build_detector\nfrom mmcv.runner import load_checkpoint\nfrom mmcv.parallel import MMDataParallel\nfrom mmdet.apis import single_gpu_test\nfrom mmdet.datasets import build_dataloader, build_dataset\n\nimport pandas as pd\nimport os\nimport json\n\nfrom PIL import Image\n\nimport torch","ed599378":"from mmdet.apis import inference_detector, init_detector\nWEIGHTS_FILE = '..\/input\/zlb0525\/epoch_18.pth'# f'{DIR_WEIGHTS}\/epoch_50.pth'\nconfig_file = '..\/input\/zlb0525\/cascade_rcnn_r50_fpn_1x_coco.py'\nmodel = init_detector(config_file, WEIGHTS_FILE)","ff160241":"def format_prediction_string(boxes, scores):\n    pred_strings = []\n    for j in zip(scores, boxes):\n        pred_strings.append(\"{0:.4f} {1} {2} {3} {4}\".format(j[0], j[1][0], j[1][1], j[1][2], j[1][3]))\n    return \" \".join(pred_strings)","d213ff6f":"#################################### cascade rcnn ############################################\nDATA_ROOT_PATH = '..\/input\/global-wheat-detection\/test\/'\n\ndevice = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\nmodel.to(device)\nmodel.eval()\nfrom tqdm import tqdm\nresults = []\nwith torch.no_grad():\n    for img_name in tqdm(os.listdir(DATA_ROOT_PATH)):\n        img_pth = os.path.join(DATA_ROOT_PATH, img_name)\n        result = inference_detector(model, img_pth)\n        \n        boxes = result[0][:, :4]\n        scores = result[0][:, 4]\n        if len(boxes) > 0:\n            boxes[:, 2] = boxes[:, 2] - boxes[:, 0]\n            boxes[:, 3] = boxes[:, 3] - boxes[:, 1]\n        \n        result = {\n            'image_id': img_name[:-4],\n            'PredictionString': format_prediction_string(boxes, scores)\n        }\n\n        results.append(result)","5df6044d":"test_df = pd.DataFrame(results, columns=['image_id', 'PredictionString'])\ntest_df.to_csv('submission.csv', index=False)\ntest_df.head()","0ed9e158":"!rm -rf mmdetection\/","917d61e7":"compile the coco toolbox","aa380a71":"Copy the MMDetection framework to the writeable directoy.","f5318599":"compile the MMDetection Framework","9208aa56":"Now, we can use MMDetection for the inference.","cc222ea4":"We should prepare the data and convert to COCO format.","f90c0259":"# https:\/\/www.kaggle.com\/superkevingit\/faster-rcnn-with-mmdetection-without-internet","7979fec0":"Some config files for faster-rcnn implement and test data."}}