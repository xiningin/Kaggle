{"cell_type":{"de6b2456":"code","5aa1c12c":"code","c341e467":"code","434a3501":"code","8030fcdf":"code","8a568986":"code","e4eb11ea":"code","54b0a47d":"code","578cb66a":"code","11dd5ccb":"code","ef27e2b1":"code","745caef5":"code","fe54b71b":"code","3f00f4cc":"code","a4c2b251":"code","d82ff02c":"code","35f17e62":"code","7e837679":"code","6dc0e6fa":"code","ad52d372":"code","d19c8ca1":"code","01bf78eb":"code","ad0ab1e2":"code","49c1cbfb":"code","222ba207":"code","05c305d0":"code","d4365f6e":"code","f7bf3993":"code","9ff7284c":"code","518acc47":"code","51ff68f3":"code","78b7d7b9":"code","36854f61":"code","1747725f":"code","23468ffc":"code","4b05ed95":"code","2d0ed7cd":"code","426c9574":"code","05e06478":"code","29f08e5a":"code","12e9e314":"code","9cd6c16a":"code","3598c2f1":"code","a837f1c3":"code","3880e697":"code","3c75682e":"code","a54b577b":"code","922afd14":"code","9876e8d7":"code","93e87527":"code","5df4d964":"code","f73d2c15":"code","fdbdc108":"code","eb7886f2":"code","07d2d90f":"code","52332074":"markdown","803fcbd1":"markdown","0197d873":"markdown","f1aea43b":"markdown","1af4f8c3":"markdown","12ca4d79":"markdown","ec801098":"markdown","9f3dd6c5":"markdown","159cddc7":"markdown","ad6d21d3":"markdown","8c16c282":"markdown"},"source":{"de6b2456":"# Loading libraries.\n\nimport numpy as np\nimport pandas as pd\n\n# for visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# set theme for visualizationF8485E\nplt.style.use(\"seaborn-whitegrid\")\n\n# Create an array with the colors you want to use\ncolors = [\"#54436B\", \"#50CB93\", \"#ED8E7C\", \"#FFD523\", '#00C1D4', '#F8485E']\n\n# Set your custom color palette\nsns.set_palette(sns.color_palette(colors))","5aa1c12c":"# Loading dataset.\n\n# \"-1\" represents NaN values in set.\nna_val = [-1, '-1']\ndata = pd.read_csv(\"..\/input\/indian-food-101\/indian_food.csv\", na_values = na_val)\n\ndata.head()","c341e467":"data.shape","434a3501":"data.info()","8030fcdf":"data.describe()","8a568986":"# missing values.\ndata.isnull().sum()","e4eb11ea":"# Let's look for values count for non-numeric values.\nfor col in data.select_dtypes([object]).columns:\n    print(\"--\"*10)\n    print(f\"Values counts for '{col}'\")\n    print(data[col].value_counts())","54b0a47d":"# summary of non-numeric data.\ndata.describe(include=object)","578cb66a":"# drop duplicate rows if there's any.\ndata.drop_duplicates(inplace=True)","11dd5ccb":"# Let't examine data if there is any outliers.\nplt.figure(figsize=(14, 10))\nsns.boxplot(data = data, x='course', y = 'prep_time')\n\nplt.title(\"Outliers in Preparation time\")\n\nplt.show()","ef27e2b1":"# Let't examine data if there is any outliers.\nplt.figure(figsize=(14, 10))\n\nsns.boxplot(data = data, y = 'cook_time')\nplt.title(\"Outliers in Cooking time\")\n\nplt.show()","745caef5":"data.head()","fe54b71b":"data['ingredients'] = data.loc[:, 'ingredients'].apply(lambda x: x.split(','))","3f00f4cc":"data.head()","a4c2b251":"# Word frequency of Ingredients according to Flavors.\nfrom collections import Counter\n\n# for sweets\ndf = data.loc[data['flavor_profile'] == 'sweet', 'ingredients']\n\ningre_word_frq = Counter()\nfor ingredients in df.values:\n    ingre_word_frq.update(ingredients)\n    \nsweetwords = [key for key, val in dict(ingre_word_frq).items()]\nsweetwords[0:5]","d82ff02c":"# For spicy food.\ndf = data.loc[data['flavor_profile'] == 'spicy', 'ingredients']\n\ningre_word_frq = Counter()\nfor ingredients in df.values:\n    ingre_word_frq.update(ingredients)\n    \nspicywords = [key for key, val in dict(ingre_word_frq).items()]\nspicywords[:5]","35f17e62":"# For bitter food.\ndf = data.loc[data['flavor_profile'] == 'bitter', 'ingredients']\n\ningre_word_frq = Counter()\nfor ingredients in df.values:\n    ingre_word_frq.update(ingredients)\n    \nbitterwords = [key for key, val in dict(ingre_word_frq).items()]\nbitterwords[0:5]","7e837679":"# For sour food.\ndf = data.loc[data['flavor_profile'] == 'sour', 'ingredients']\n\ningre_word_frq = Counter()\nfor ingredients in df.values:\n    ingre_word_frq.update(ingredients)\n    \nsourwords = [key for key, val in dict(ingre_word_frq).items()]\nsourwords[0:5]","6dc0e6fa":"# drop rows if both ingredients and flavor_profile values are \"NaN\".\ndata.dropna(subset=['flavor_profile', 'ingredients'], how='all', axis='index', inplace=True)","ad52d372":"def CountFlavor(ingredientList):\n    \n    \"\"\"\n    This function returns a flavour of dish based on most occurance of words in Ingredient list.\n\n    \"\"\"\n    \n    dict_flavor_count = {}\n    \n    sweetcount = 0\n    spicycount = 0\n    bittercount = 0\n    sourcount = 0\n    \n    for word in ingredientList:\n        if word in sweetwords:\n            sweetcount += 1\n            dict_flavor_count['sweet'] = sweetcount\n            \n        if word in spicywords:\n            spicycount += 1\n            dict_flavor_count['spicy'] = spicycount\n            \n         \n        if word in bitterwords:\n            bittercount += 1\n            dict_flavor_count['bitter'] = bittercount\n            \n            \n        if word in sourwords:\n            sourcount += 1\n            dict_flavor_count['sour'] = sourcount\n            \n    sorted_dict = sorted(dict_flavor_count.items(), key=lambda kv:(kv[1], kv[0]) , reverse=True)\n    \n    if sorted_dict == []:\n        return 'sweet'\n            \n    return sorted_dict[0][0]","d19c8ca1":"# handling missing data in flavor_profile based on most occourance ingredients.\nnull_df = data.loc[data.flavor_profile.isnull(), 'ingredients']\n\nfor idx in null_df.index:\n    IngredientList = null_df.loc[idx]\n    data.loc[idx, 'flavor_profile'] = CountFlavor(IngredientList)","01bf78eb":"# dataframe of missing data in both state and region.\nnull_df = data.loc[(data['state'].isnull()) & (data['region'].isnull())]\nnull_df","ad0ab1e2":"# for above missing data let's fill it with 'India'.\nfor idx in null_df.index:\n    data.loc[idx, ['state', 'region']] = 'India'","49c1cbfb":"data.loc[248]","222ba207":"data.loc[data.region.isnull()]","05c305d0":"pd.DataFrame(data.groupby(['state']).region.unique())","d4365f6e":"# fill the missing data in region for state 'UttarPradesh'\ndata.region.fillna('North', inplace=True)","f7bf3993":"# Missing data in state column.\nnull_states_df = data.loc[data.state.isnull()]\nnull_states_df","9ff7284c":"a = pd.DataFrame(data.groupby(['region']).state.unique())\na","518acc47":"# filling missing values for state for North region.\ndata.loc[115, 'state'] = 'Punjab'\n\n# filling missing values for state for South region.\nfor idx in null_states_df.index:\n    data.loc[idx, 'state'] = 'South India'","51ff68f3":"data.head()","78b7d7b9":"# data visualization\n\n# Let's look at which dish require more preparation time.\nfilt = data.prep_time > 60 \na = data.loc[filt, ['name', 'prep_time', 'cook_time']].sort_values(by='prep_time', ascending=False)\na.set_index(['name'], inplace=True)\na","36854f61":"# visualization for same.\nplt.figure(figsize=(16, 8))\nsns.barplot(data=a, x=a.index, y='prep_time', color=\"#54436B\", label=\"Preparation Time\")\nsns.barplot(data=a, x=a.index, y='cook_time', color=\"#50CB93\", label=\"Cooking Time\")\n\nplt.xticks(rotation=90)\n\nplt.xlabel(\"Name of Dish\")\nplt.ylabel(\"Time in minutes\")\nplt.title(\"Total prepartion and cooking time taken by dish.\")\n\nplt.legend()\nplt.show()","1747725f":"# Let's look at which dish require less cooking time.\na = data[['name','prep_time','cook_time']]\na = a.sort_values(by='cook_time',ascending=False).head(10)\na.set_index('name', inplace=True)\na","23468ffc":"# visualization for same.\na.plot(kind='bar', figsize=(16, 8))\n\nplt.xticks(rotation=90)\n\nplt.xlabel(\"Name of Dish\")\nplt.ylabel(\"Time in minutes\")\nplt.title(\"Total prepartion and cooking time taken by dish.\")\n\nplt.legend()\nplt.show()","4b05ed95":"data.head()","2d0ed7cd":"data['total_time'] = data['prep_time'] + data['cook_time']","426c9574":"data.head()","05e06478":"# Flavour wise Average time.\na = data.groupby(by=['flavor_profile']).mean()\na.sort_values(by=['total_time'], ascending=False, inplace=True)\n# visualization for the same.\n\nplt.figure(figsize=(10, 8))\n\nsns.barplot(x=a.index, y=a.total_time, data=a)\n\nplt.title(\"Average time taken by flavors.\")\n\nplt.text(-0.1, 84, round(a.total_time[0]), fontsize=20, animated=True)\nplt.text( 0.9, 70, round(a.total_time[1]), fontsize=20, animated=True)\nplt.text( 1.9, 53, round(a.total_time[2]), fontsize=20, animated=True)\nplt.text( 2.9, 21, round(a.total_time[3]), fontsize=20, animated=True)\n\nplt.show()","29f08e5a":"from collections import Counter\n\na = [x for x in data.ingredients]\n\nwords = Counter()\n\nfor l in a:\n    words.update(l)\nwords = dict(words)\nd = dict(sorted(words.items(), key = lambda x: x[1], reverse=True))","12e9e314":"a = pd.DataFrame(data =d.values() , index=d.keys(), columns = ['Count']).head(10)\n\n# visualization for most used ingredients in recipes\na.plot(kind='bar', figsize=((14, 7)))\n\nplt.xlabel(\"Ingredient\")\nplt.ylabel(\"Count\")\nplt.title(\"Most Common Ingredient used in Indian food.\")\n\nplt.show()","9cd6c16a":"data.head()","3598c2f1":"# vegetarian \/ non-vegetarian dishes .\n\na = pd.DataFrame(data.groupby(by=['diet']).count().name)\n\nplt.figure(figsize=(10, 7))\n\nplt.barh(a.index, a.name, label='count')\n\nplt.xlabel(\"Diet\")\nplt.ylabel(\"Counts\")\nplt.title(\"Total counts of Vegetartian and Non-vegetarian dishes.\")\n\nplt.legend()\nplt.show()","a837f1c3":"data.course.unique()","3880e697":"# Course types\na = pd.DataFrame(data.groupby(by = ['course']).count().name)\na.rename(columns = {'name':'Count'}, inplace=True)\na.sort_values(by='Count', ascending=False, inplace=True)\n\n# visualization for the same\nplt.figure(figsize=(14, 8))\nsns.barplot(data=a, x=a.index, y='Count')\n\nplt.title(\"Count of each course type\")\nplt.show()","3c75682e":"# which state has most of dessert dishes.\na = data.loc[data.course == 'dessert']\na = pd.DataFrame(a.groupby(by = ['state']).name.count())\na.rename(columns= {'name':'Dessert Dishes'}, inplace=True)\na.sort_values(by='Dessert Dishes', ascending=False, inplace=True)","a54b577b":"# visualization for same\na.plot(kind='bar', figsize=((16, 8)))\n\nplt.xlabel('States')\nplt.ylabel(\"Counts\")\nplt.title(\"Statewise Number of Dessert\")\n\nplt.show()","922afd14":"data.flavor_profile.unique()","9876e8d7":"# Let's see for the flavour match with this or not.\na = data.loc[data.flavor_profile == 'sweet']\na = pd.DataFrame(a.groupby(by = ['state']).name.count())\na.rename(columns= {'name':'sweets'}, inplace=True)\na.sort_values(by='sweets', ascending=False, inplace=True)\na.head()","93e87527":"# visualization for same\na.plot(kind='bar', figsize=((16, 8)))\n\nplt.xlabel('States')\nplt.ylabel(\"Counts\")\nplt.title(\"Total count of sweet flavour dish by state\")\n\nplt.show()","5df4d964":"# Region wise dish based on flavours.\na = pd.DataFrame(data.groupby(by=['flavor_profile', 'region']).count().name)\na.rename(columns={'name': 'counts'}, inplace=True)\n\na.unstack().plot(kind='bar', figsize=(18, 8))\n\nplt.xlabel(\"Flavours\")\nplt.ylabel('counts')\nplt.title(\"counts of dishes based on region\")\n\nplt.show()","f73d2c15":"# Let's examin spciy dishes.\nspicy_df = data.loc[data.flavor_profile=='spicy']\nspicy_df = spicy_df.reset_index(drop=True)\nspicy_df.head()","fdbdc108":"# counts of spicy dishes based on state.\na = pd.DataFrame(spicy_df.groupby('state').count().name).sort_values(by='name', ascending=False).head(10)\n\n# visualization\na.plot(kind='bar', figsize=(16, 8))\n\nplt.xlabel(\"States\")\nplt.ylabel(\"counts\")\nplt.title(\"State wise count of spicy dishes.\")\n\nplt.show()","eb7886f2":"a = pd.DataFrame(data.groupby(by=['state', 'diet']).count().name)\na.rename(columns = {'name':'count'}, inplace=True)\n\n# visualization for the same.\na.unstack().plot(kind='bar', figsize=(16, 8))\n\nplt.ylim(0, 40)\n\nplt.xlabel(\"States\")\nplt.ylabel(\"Counts\")\nplt.title(\"State-wise count of Vegetarian and Non-vegetarian dishes.\")\n\nplt.show()","07d2d90f":"a = pd.DataFrame(data.groupby(by=['region', 'diet']).count().name)\na.rename(columns = {'name':'count'}, inplace=True)\n\n# visualization for the same.\na.unstack().plot(kind='bar', figsize=(16, 8))\n\nplt.xlabel(\"Regions\")\nplt.ylabel(\"Counts\")\nplt.title(\"Region-wise count of Vegetarian and Non-vegetarian dishes.\")\n\nplt.show()","52332074":"**It is same as for dessert**","803fcbd1":"There are some outliers, but in this case they can not treat as outliers because preparation time and cooking time may vary according to the particular recipe.","0197d873":"**Most dishes are main course.**","f1aea43b":"**We can see that Spicy and Sweet are the most common flavors in all region** ","1af4f8c3":"## Conclusion\n* Most of dishes are vegetarian and from west region.\n* Most common ingredient used in indian Cusine is Sugar.\n* Spicy food is common in all regions.\n* Sweets takes more time as compare to other dishes.","12ca4d79":"<b style=\"font-size:22px;\n          font-weight:700;\n          color:#F69E7B\">Pindi Chana <\/b> takes most time for prepartion.","ec801098":"**Sweet dishes takes most time**","9f3dd6c5":"These are common dishes in all over India.","159cddc7":"**West Bengal has most of dessert dishes.**","ad6d21d3":"**Most spicy dishes are from Punjab**","8c16c282":"**Sugar** is most used ingredient in Indian Cusine."}}