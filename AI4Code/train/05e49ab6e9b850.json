{"cell_type":{"77dcc8d3":"code","ba26d571":"code","7e1442de":"code","2b679c21":"code","5795ff92":"code","76039b1b":"code","d05aa6b7":"code","8b70c593":"code","39110131":"code","e6d1b6db":"code","89efeb3a":"code","d2422e9b":"code","11fc3e1f":"code","6205a86b":"code","fba2242c":"code","a3d3898f":"code","dc442b00":"code","e2904b37":"code","dd41c695":"code","12a6f04b":"code","bfce74d4":"code","d555f5c0":"code","cc0fdfe1":"code","377a788b":"code","53a375de":"code","9c0efd14":"code","872a1806":"code","dbfc2388":"code","827069d5":"code","331b736d":"code","c97f0f32":"code","9b017c8e":"code","2b4960b5":"code","840a52f2":"code","30cab3d7":"code","ec2f169b":"code","99216fa1":"code","2f54a8ae":"code","929a6b73":"code","25552097":"code","4d871faa":"code","a4f05348":"code","34b70374":"code","793a7f0c":"code","50c49b1e":"code","5ef22060":"code","25847971":"code","08f914ed":"code","fb24155d":"code","b01b039b":"code","796ac0d8":"code","a89bccd2":"code","02067e59":"code","90407960":"code","80a42dd6":"code","33dfda38":"code","faf7a204":"code","9fb44058":"code","3ed7326d":"code","3779e511":"code","23e657b4":"code","ded1dbc9":"code","7e85f120":"code","4bde7f28":"code","4f5798bb":"code","9bca35b8":"code","125bb0de":"code","2eff6b7f":"code","79e2cf6a":"code","229b123b":"code","2887da05":"code","517a7493":"code","f991b8dc":"code","b0f1f425":"code","e1df1d2e":"code","01de95e5":"markdown","847ddc4a":"markdown","d3352c95":"markdown","1dd2134b":"markdown","dba83569":"markdown","c1568e5e":"markdown","1ea0657c":"markdown","4dd28e0f":"markdown","522b750d":"markdown","ce5653fd":"markdown","2bd28125":"markdown","15463914":"markdown","f66e7050":"markdown","07557e36":"markdown","c95fd582":"markdown","71a1901a":"markdown","be7e2cd7":"markdown","e37db1e9":"markdown"},"source":{"77dcc8d3":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ba26d571":"import warnings\nwarnings.filterwarnings('ignore')","7e1442de":"train_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","2b679c21":"test_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","5795ff92":"train_data.head()","76039b1b":"plt.figure(figsize=(16, 10))\nsns.heatmap(train_data.corr(), cmap='RdBu')","d05aa6b7":"plt.figure(figsize=(16, 10))\ntrain_data.corr()['SalePrice'].sort_values().plot(kind='barh')","8b70c593":"obj_list = []\nfor i in train_data.columns :\n    if train_data[i].dtypes == 'object':\n        obj_list.append(i)","39110131":"train_data[obj_list].info()","e6d1b6db":"train_data.drop(['PoolQC', 'Utilities', 'Street', 'MiscFeature'], axis=1, inplace=True)\ntest_data.drop(['PoolQC', 'Utilities', 'Street', 'MiscFeature'], axis=1, inplace=True)","89efeb3a":"# Adding status features based on other features\n# eg. if PoolArea is present then PoolStatus is one\n\ntrain_data['PoolStatus'] = train_data['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ntrain_data['SeFlrStatus'] = train_data['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ntrain_data['GarageStatus'] = train_data['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\ntrain_data['BsmtStatus'] = train_data['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\ntrain_data['FirePlaceStatus'] = train_data['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\n\ntest_data['PoolStatus'] = test_data['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ntest_data['SeFlrStatus'] = test_data['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ntest_data['GarageStatus'] = test_data['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\ntest_data['BsmtStatus'] = test_data['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\ntest_data['FirePlaceStatus'] = test_data['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\n\n# Info about a particular feature is spread across multiple features\n# Combining those to build new features\ntrain_data['RemodNBuild']=train_data['YearBuilt']+train_data['YearRemodAdd']\ntrain_data['SF']=train_data['TotalBsmtSF'] + train_data['1stFlrSF'] + train_data['2ndFlrSF']\ntrain_data['AreaInFt'] = (train_data['BsmtFinSF1'] + train_data['BsmtFinSF2'] +\n                                 train_data['1stFlrSF'] + train_data['2ndFlrSF'])\ntrain_data['NumBathroom'] = (train_data['FullBath'] + (0.5 * train_data['HalfBath']) +\n                               train_data['BsmtFullBath'] + (0.5 * train_data['BsmtHalfBath']))\ntrain_data['Total_porch_sf'] = (train_data['OpenPorchSF'] + train_data['3SsnPorch'] +\n                              train_data['EnclosedPorch'] + train_data['ScreenPorch'] +\n                              train_data['WoodDeckSF'])\n\ntest_data['RemodNBuild']=test_data['YearBuilt']+test_data['YearRemodAdd']\ntest_data['SF']=test_data['TotalBsmtSF'] + test_data['1stFlrSF'] + test_data['2ndFlrSF']\ntest_data['AreaInFt'] = (test_data['BsmtFinSF1'] + test_data['BsmtFinSF2'] +\n                                 test_data['1stFlrSF'] + test_data['2ndFlrSF'])\ntest_data['NumBathroom'] = (test_data['FullBath'] + (0.5 * test_data['HalfBath']) +\n                               test_data['BsmtFullBath'] + (0.5 * test_data['BsmtHalfBath']))\ntest_data['Total_porch_sf'] = (test_data['OpenPorchSF'] + test_data['3SsnPorch'] +\n                              test_data['EnclosedPorch'] + test_data['ScreenPorch'] +\n                              test_data['WoodDeckSF'])","d2422e9b":"ID = test_data['Id']\ndel test_data['Id']","11fc3e1f":"del train_data['Id']","6205a86b":"from sklearn_pandas import DataFrameMapper, CategoricalImputer\nfrom sklearn.pipeline import Pipeline, FeatureUnion\nimport xgboost as xgb\nfrom sklearn.preprocessing import Imputer, FunctionTransformer, MinMaxScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_extraction import DictVectorizer","fba2242c":"quasi_constant = []\nfor i in train_data.columns:\n    counts = train_data[i].value_counts()\n    zeros = counts.iloc[0]\n    if zeros \/ len(train_data) * 100 > 99.94:\n        quasi_constant.append(i)\ntrain_data = train_data.drop(quasi_constant, axis=1)\ntest_data = test_data.drop(quasi_constant, axis=1)","a3d3898f":"list_of_numerical = []\nlist_of_categorical = []\nfor i in train_data.columns:\n    if train_data[i].dtypes == 'object':\n        list_of_categorical.append(i)\n    else:\n        if i == 'SalePrice':\n            pass\n        else:\n            list_of_numerical.append(i)","dc442b00":"transformers = []\n\ntransformers.extend([([num_feat],SimpleImputer(strategy='constant',fill_value=-1)) for num_feat in list_of_numerical])\ntransformers.extend([(cat_feat,CategoricalImputer()) for cat_feat in list_of_categorical])\ncombined_pipeline = DataFrameMapper(transformers,\n                                   input_df=True,\n                                   df_out=True)","e2904b37":"def return_dict(blob):\n    return blob.to_dict(\"records\")","dd41c695":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n    train_data.drop(['SalePrice'],axis=1), train_data['SalePrice'], test_size=0.15, random_state=42)","12a6f04b":"pipeline1 = Pipeline([\n    ('featureunion',combined_pipeline),\n    ('dictifier',FunctionTransformer(func=return_dict,validate=False)),\n    ('vectorizer',DictVectorizer(sort=False,sparse=False)),\n    ('reg',xgb.XGBRegressor(objective=\"reg:squarederror\"))\n])","bfce74d4":"mse1 = cross_val_score(pipeline1, X_train, y_train, scoring=\"neg_mean_squared_log_error\", cv=5)","d555f5c0":"print(np.sqrt(-mse1))","cc0fdfe1":"from sklearn.model_selection import RandomizedSearchCV","377a788b":"params = {\n    'reg__max_depth' : [5,10,15,20],\n    'reg__gamma' : [.1,.2,.3,.4,.5,.6],\n    'reg__colsample_bytree' : [.1,.2,.3,.4,.5,.6,.7],\n    'reg__n_estimators' : [50,100,200]\n}","53a375de":"grid_pipe_xgboost = RandomizedSearchCV(estimator=pipeline1,param_distributions=params,cv=4,\n                               scoring=\"neg_mean_squared_log_error\",n_iter=15)","9c0efd14":"%%time\ngrid_pipe_xgboost.fit(X_train,y_train)","872a1806":"grid_pipe_xgboost.best_params_","dbfc2388":"grid_pipe_xgboost.best_score_","827069d5":"pipe_predict_xgboost = grid_pipe_xgboost.predict(X_test)","331b736d":"from sklearn.metrics import mean_squared_log_error","c97f0f32":"print(np.sqrt(mean_squared_log_error(y_test,pipe_predict_xgboost)))","9b017c8e":"import lightgbm as lgb","2b4960b5":"pipeline_lgm = Pipeline([\n    ('featureunion',combined_pipeline),\n    ('dictifier',FunctionTransformer(func=return_dict,validate=False)),\n    ('vectorizer',DictVectorizer(sort=False,sparse=False)),\n    ('reg_lgb',lgb.LGBMRegressor())\n])","840a52f2":"%%time\npipeline_lgm.fit(X_train,y_train)","30cab3d7":"pipeline_lgm_predict = pipeline_lgm.predict(X_test)\nprint(np.sqrt(mean_squared_log_error(y_test,pipeline_lgm_predict)))","ec2f169b":"params_lgb = {\n    'reg_lgb__learning_rate' : [.1,.2,.3,.4,.5,.6],\n    'reg_lgb__n_estimators' : [50,100,200],\n    'reg_lgb__colsample_bytree' : [.1,.2,.3,.4,.5,.6,.7],\n    'reg_lgb__reg_lambda' : np.arange(0,0.6,0.1)\n}","99216fa1":"grid_pipe_lgm = RandomizedSearchCV(estimator=pipeline_lgm,param_distributions=params_lgb,cv=4,\n                               scoring=\"neg_mean_squared_log_error\",n_iter=15)","2f54a8ae":"%%time\ngrid_pipe_lgm.fit(X_train,y_train)","929a6b73":"grid_pipe_lgm.best_params_","25552097":"grid_pipe_lgm.best_score_","4d871faa":"lgm_pipe_predict = grid_pipe_lgm.predict(X_test)\nprint(np.sqrt(mean_squared_log_error(y_test,lgm_pipe_predict)))","a4f05348":"from sklearn.linear_model import ElasticNet\npipeline_elasticnet = Pipeline([\n    ('featureunion',combined_pipeline),\n    ('dictifier',FunctionTransformer(func=return_dict,validate=False)),\n    ('vectorizer',DictVectorizer(sort=False,sparse=False)),\n    ('reg_en',ElasticNet())\n])","34b70374":"pipeline_elasticnet.fit(X_train,y_train)","793a7f0c":"predicted_base_elastic_net = pipeline_elasticnet.predict(X_test)\nprint(np.sqrt(mean_squared_log_error(y_test,predicted_base_elastic_net)))","50c49b1e":"params_elasticnet = {\n    'reg_en__l1_ratio' : [0.2,0.4,0.6,0.8],\n    'reg_en__alpha' : [0.5,1,1.5,2],\n}","5ef22060":"grid_pipe_elastic = RandomizedSearchCV(estimator=pipeline_elasticnet,param_distributions=params_elasticnet,cv=4,\n                               scoring=\"neg_mean_squared_log_error\")","25847971":"%%time\ngrid_pipe_elastic.fit(X_train,y_train)","08f914ed":"grid_pipe_elastic.best_params_","fb24155d":"grid_pipe_elastic.best_score_","b01b039b":"from sklearn.linear_model import Lasso","796ac0d8":"lasso = Lasso()","a89bccd2":"pipeline_lasso = Pipeline([\n    ('featureunion',combined_pipeline),\n    ('dictifier',FunctionTransformer(func=return_dict,validate=False)),\n    ('vectorizer',DictVectorizer(sort=False,sparse=False)),\n    ('reg_lasso',Lasso())\n])","02067e59":"params_lasso = {\n    'reg_lasso__alpha' :  np.logspace(-4, -3, 5),\n}","90407960":"grid_pipe_lasso = RandomizedSearchCV(estimator=pipeline_lasso,param_distributions=params_lasso,cv=4,\n                               scoring=\"neg_mean_squared_error\")","80a42dd6":"%%time\ngrid_pipe_lasso.fit(X_train,y_train)","33dfda38":"grid_pipe_lasso.best_params_","faf7a204":"grid_pipe_lasso.best_score_","9fb44058":"print(np.sqrt(mean_squared_log_error(y_test,grid_pipe_lasso.predict(X_test))))","3ed7326d":"from sklearn.ensemble import GradientBoostingRegressor","3779e511":"gbdt_model = GradientBoostingRegressor(learning_rate=0.05, min_samples_leaf=5,\n                                       min_samples_split=10, max_depth=4, n_estimators=3000)","23e657b4":"pipeline_gbt = Pipeline([\n    ('featureunion',combined_pipeline),\n    ('dictifier',FunctionTransformer(func=return_dict,validate=False)),\n    ('vectorizer',DictVectorizer(sort=False,sparse=False)),\n    ('reg_lasso',gbdt_model)\n])","ded1dbc9":"%%time\npipeline_gbt.fit(X_train,y_train)","7e85f120":"print(np.sqrt(mean_squared_log_error(y_test,pipeline_gbt.predict(X_test))))","4bde7f28":"from sklearn.ensemble import VotingRegressor","4f5798bb":"xgb_final = xgb.XGBRegressor(objective=\"reg:squarederror\",\n                             n_estimators=200,\n                             max_depth=5,\n                             gamma=0.5,\n                             colsample_bytree=0.3)","9bca35b8":"lgm_final = lgb.LGBMRegressor(reg_lambda=0.1,\n                              n_estimators=100,\n                              learning_rate=0.1,\n                              colsample_bytree=0.2)","125bb0de":"en_final = ElasticNet(l1_ratio=0.8,alpha=0.5)","2eff6b7f":"lasso_final = Lasso(alpha=0.001)","79e2cf6a":"gb_final = GradientBoostingRegressor(learning_rate=0.05, min_samples_leaf=5,\n                                       min_samples_split=10, max_depth=4, n_estimators=3000)","229b123b":"final_regressor = VotingRegressor(estimators=[\n    ('xgb',xgb_final),\n    ('lgm',lgm_final),\n    ('elastic',en_final),\n    ('lasso',lasso_final),\n    ('gbreg',gb_final)\n])","2887da05":"pipeline_final = Pipeline([\n    ('featureunion',combined_pipeline),\n    ('dictifier',FunctionTransformer(func=return_dict,validate=False)),\n    ('vectorizer',DictVectorizer(sort=False)),\n    ('regressor',final_regressor)\n])","517a7493":"X = train_data.drop(['SalePrice'],axis=1)\ny = train_data['SalePrice']","f991b8dc":"pipeline_final.fit(X,y)","b0f1f425":"final_preds = pipeline_final.predict(test_data)","e1df1d2e":"submission = pd.DataFrame({ 'Id': ID,\n                            'SalePrice': final_preds })\nsubmission.to_csv(path_or_buf =\"Advanced_Housing_Regression.csv\", index=False)\n","01de95e5":"Using randomized search cv on this regressor too","847ddc4a":"Randomized search cv to impove performace","d3352c95":"Lets deal with quasi constant features i.e features that are almost constant","1dd2134b":"First pipeline with xgboost","dba83569":"# Building pipeline","c1568e5e":"# **Submission**","1ea0657c":"Some features come in group so we can dd their values to add additional features\nEg: BsmtQual,BsmtCond,BsmtExposure,BsmtFinType1,BsmtFinType2 can be used to add additional features about Basement","4dd28e0f":"# **Feature Engineering**","522b750d":"*Lets use lgbm to predict prices*","ce5653fd":"Following features have very few data points, so we will remove them\n1. 'PoolQC'\n2. 'Utilities'\n3. 'Street'\n4. 'MiscFeature","2bd28125":"# **Models**","15463914":"*Now predicting with Lasso*","f66e7050":"# Feature Engineering intuition","07557e36":"# **Final predictions**","c95fd582":"Now predicting prices with ElasticNet Regressor","71a1901a":"Filling all null categorical and numerical features i.e features that are almost constant","be7e2cd7":"# **Visualization**","e37db1e9":"*Predicting using sklearn's gradient boosting regressor*"}}