{"cell_type":{"76b2cbc4":"code","d2998d6e":"code","c79e705e":"code","7b820251":"code","52774256":"code","d44038bb":"code","2b72197a":"code","e8eb6ba9":"code","a9165b3f":"code","a0137184":"code","4778f7e4":"code","e0c7512c":"code","082a65e7":"code","d1dd37ab":"code","3fcfa833":"code","ae35e59e":"code","942e8368":"code","07c87aa0":"code","3a4feb45":"code","83b57ae5":"code","c96e9d25":"code","43b8a732":"code","f4885fe3":"code","d58c252e":"code","dae77473":"code","e1940ec0":"code","30db3450":"code","aa117b33":"code","a88f63f2":"code","56fc5237":"code","b4d563a7":"code","f1572378":"code","11978730":"code","52b22a0d":"code","6809b3f7":"code","533987d8":"code","d57e8b57":"code","3bf35251":"code","f2c725db":"code","97de601d":"code","d944bbc9":"code","aaaefb7d":"code","f84afd7d":"code","17ebc92f":"code","f89ea8f2":"code","a3bc3254":"code","d563f40c":"code","87dc5e98":"code","dfcd6e03":"code","13364dba":"code","fce43389":"code","ec69fcdf":"code","62922a2d":"code","7a3fb5ac":"code","c80b838e":"code","d0d71184":"code","d0232cd6":"code","8f81dde6":"code","3912395d":"code","10ce39bf":"code","55d75b3f":"code","5eaff293":"code","22db49dd":"code","6b8e4e1c":"code","568e399c":"code","9dadab31":"code","280ee9a1":"code","3fc04aa0":"code","a06fe9b4":"code","3a7df357":"code","428eb622":"code","bea9df33":"markdown","b0167707":"markdown","59cde2c8":"markdown","cdc7d390":"markdown","fc186222":"markdown","9033dee4":"markdown","830274a3":"markdown","65ea3e20":"markdown","a28ff528":"markdown","f97c5a95":"markdown","ead3d343":"markdown","6b73e054":"markdown","57320823":"markdown","4e10c40c":"markdown","c1b8c235":"markdown","60bb2dae":"markdown"},"source":{"76b2cbc4":"%load_ext autoreload\n%autoreload 2\n\n%matplotlib inline","d2998d6e":"from fastai.imports import *\n#from fastai.structured import *  # Removed from the v1.0 library. Copied the code in the below hidden cell\n\nfrom pandas_summary import DataFrameSummary\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom IPython.display import display\n\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n\nimport gc","c79e705e":"# copied from https:\/\/github.com\/fastai\/fastai\/blob\/master\/old\/fastai\/structured.py\n#from .imports import *\n\nfrom sklearn_pandas import DataFrameMapper\nfrom sklearn.preprocessing import LabelEncoder, Imputer, StandardScaler\nfrom pandas.api.types import is_string_dtype, is_numeric_dtype\nfrom sklearn.ensemble import forest\nfrom sklearn.tree import export_graphviz\n\n\ndef set_plot_sizes(sml, med, big):\n    plt.rc('font', size=sml)          # controls default text sizes\n    plt.rc('axes', titlesize=sml)     # fontsize of the axes title\n    plt.rc('axes', labelsize=med)    # fontsize of the x and y labels\n    plt.rc('xtick', labelsize=sml)    # fontsize of the tick labels\n    plt.rc('ytick', labelsize=sml)    # fontsize of the tick labels\n    plt.rc('legend', fontsize=sml)    # legend fontsize\n    plt.rc('figure', titlesize=big)  # fontsize of the figure title\n\ndef parallel_trees(m, fn, n_jobs=8):\n        return list(ProcessPoolExecutor(n_jobs).map(fn, m.estimators_))\n\ndef draw_tree(t, df, size=10, ratio=0.6, precision=0):\n    \"\"\" Draws a representation of a random forest in IPython.\n\n    Parameters:\n    -----------\n    t: The tree you wish to draw\n    df: The data used to train the tree. This is used to get the names of the features.\n    \"\"\"\n    s=export_graphviz(t, out_file=None, feature_names=df.columns, filled=True,\n                      special_characters=True, rotate=True, precision=precision)\n    IPython.display.display(graphviz.Source(re.sub('Tree {',\n       f'Tree {{ size={size}; ratio={ratio}', s)))\n\ndef combine_date(years, months=1, days=1, weeks=None, hours=None, minutes=None,\n              seconds=None, milliseconds=None, microseconds=None, nanoseconds=None):\n    years = np.asarray(years) - 1970\n    months = np.asarray(months) - 1\n    days = np.asarray(days) - 1\n    types = ('<M8[Y]', '<m8[M]', '<m8[D]', '<m8[W]', '<m8[h]',\n             '<m8[m]', '<m8[s]', '<m8[ms]', '<m8[us]', '<m8[ns]')\n    vals = (years, months, days, weeks, hours, minutes, seconds,\n            milliseconds, microseconds, nanoseconds)\n    return sum(np.asarray(v, dtype=t) for t, v in zip(types, vals)\n               if v is not None)\n\ndef get_sample(df,n):\n    \"\"\" Gets a random sample of n rows from df, without replacement.\n\n    Parameters:\n    -----------\n    df: A pandas data frame, that you wish to sample from.\n    n: The number of rows you wish to sample.\n\n    Returns:\n    --------\n    return value: A random sample of n rows of df.\n\n    Examples:\n    ---------\n    >>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})\n    >>> df\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    >>> get_sample(df, 2)\n       col1 col2\n    1     2    b\n    2     3    a\n    \"\"\"\n    idxs = sorted(np.random.permutation(len(df))[:n])\n    return df.iloc[idxs].copy()\n\ndef add_datepart(df, fldname, drop=True, time=False):\n    \"\"\"add_datepart converts a column of df from a datetime64 to many columns containing\n    the information from the date. This applies changes inplace.\n\n    Parameters:\n    -----------\n    df: A pandas data frame. df gain several new columns.\n    fldname: A string that is the name of the date column you wish to expand.\n        If it is not a datetime64 series, it will be converted to one with pd.to_datetime.\n    drop: If true then the original date column will be removed.\n    time: If true time features: Hour, Minute, Second will be added.\n\n    Examples:\n    ---------\n\n    >>> df = pd.DataFrame({ 'A' : pd.to_datetime(['3\/11\/2000', '3\/12\/2000', '3\/13\/2000'], infer_datetime_format=False) })\n    >>> df\n\n        A\n    0   2000-03-11\n    1   2000-03-12\n    2   2000-03-13\n\n    >>> add_datepart(df, 'A')\n    >>> df\n\n        AYear AMonth AWeek ADay ADayofweek ADayofyear AIs_month_end AIs_month_start AIs_quarter_end AIs_quarter_start AIs_year_end AIs_year_start AElapsed\n    0   2000  3      10    11   5          71         False         False           False           False             False        False          952732800\n    1   2000  3      10    12   6          72         False         False           False           False             False        False          952819200\n    2   2000  3      11    13   0          73         False         False           False           False             False        False          952905600\n    \"\"\"\n    fld = df[fldname]\n    fld_dtype = fld.dtype\n    if isinstance(fld_dtype, pd.core.dtypes.dtypes.DatetimeTZDtype):\n        fld_dtype = np.datetime64\n\n    if not np.issubdtype(fld_dtype, np.datetime64):\n        df[fldname] = fld = pd.to_datetime(fld, infer_datetime_format=True)\n    targ_pre = re.sub('[Dd]ate$', '', fldname)\n    attr = ['Year', 'Month', 'Week', 'Day', 'Dayofweek', 'Dayofyear',\n            'Is_month_end', 'Is_month_start', 'Is_quarter_end', 'Is_quarter_start', 'Is_year_end', 'Is_year_start']\n    if time: attr = attr + ['Hour', 'Minute', 'Second']\n    for n in attr: df[targ_pre + n] = getattr(fld.dt, n.lower())\n    df[targ_pre + 'Elapsed'] = fld.astype(np.int64) \/\/ 10 ** 9\n    if drop: df.drop(fldname, axis=1, inplace=True)\n\ndef is_date(x): return np.issubdtype(x.dtype, np.datetime64)\n\ndef train_cats(df):\n    \"\"\"Change any columns of strings in a panda's dataframe to a column of\n    categorical values. This applies the changes inplace.\n\n    Parameters:\n    -----------\n    df: A pandas dataframe. Any columns of strings will be changed to\n        categorical values.\n\n    Examples:\n    ---------\n\n    >>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})\n    >>> df\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    note the type of col2 is string\n\n    >>> train_cats(df)\n    >>> df\n\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    now the type of col2 is category\n    \"\"\"\n    for n,c in df.items():\n        if is_string_dtype(c): df[n] = c.astype('category').cat.as_ordered()\n\ndef apply_cats(df, trn):\n    \"\"\"Changes any columns of strings in df into categorical variables using trn as\n    a template for the category codes.\n\n    Parameters:\n    -----------\n    df: A pandas dataframe. Any columns of strings will be changed to\n        categorical values. The category codes are determined by trn.\n\n    trn: A pandas dataframe. When creating a category for df, it looks up the\n        what the category's code were in trn and makes those the category codes\n        for df.\n\n    Examples:\n    ---------\n    >>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})\n    >>> df\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    note the type of col2 is string\n\n    >>> train_cats(df)\n    >>> df\n\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    now the type of col2 is category {a : 1, b : 2}\n\n    >>> df2 = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['b', 'a', 'a']})\n    >>> apply_cats(df2, df)\n\n           col1 col2\n        0     1    b\n        1     2    a\n        2     3    a\n\n    now the type of col is category {a : 1, b : 2}\n    \"\"\"\n    for n,c in df.items():\n        if (n in trn.columns) and (trn[n].dtype.name=='category'):\n            df[n] = pd.Categorical(c, categories=trn[n].cat.categories, ordered=True)\n\ndef fix_missing(df, col, name, na_dict):\n    \"\"\" Fill missing data in a column of df with the median, and add a {name}_na column\n    which specifies if the data was missing.\n\n    Parameters:\n    -----------\n    df: The data frame that will be changed.\n\n    col: The column of data to fix by filling in missing data.\n\n    name: The name of the new filled column in df.\n\n    na_dict: A dictionary of values to create na's of and the value to insert. If\n        name is not a key of na_dict the median will fill any missing data. Also\n        if name is not a key of na_dict and there is no missing data in col, then\n        no {name}_na column is not created.\n\n\n    Examples:\n    ---------\n    >>> df = pd.DataFrame({'col1' : [1, np.NaN, 3], 'col2' : [5, 2, 2]})\n    >>> df\n       col1 col2\n    0     1    5\n    1   nan    2\n    2     3    2\n\n    >>> fix_missing(df, df['col1'], 'col1', {})\n    >>> df\n       col1 col2 col1_na\n    0     1    5   False\n    1     2    2    True\n    2     3    2   False\n\n\n    >>> df = pd.DataFrame({'col1' : [1, np.NaN, 3], 'col2' : [5, 2, 2]})\n    >>> df\n       col1 col2\n    0     1    5\n    1   nan    2\n    2     3    2\n\n    >>> fix_missing(df, df['col2'], 'col2', {})\n    >>> df\n       col1 col2\n    0     1    5\n    1   nan    2\n    2     3    2\n\n\n    >>> df = pd.DataFrame({'col1' : [1, np.NaN, 3], 'col2' : [5, 2, 2]})\n    >>> df\n       col1 col2\n    0     1    5\n    1   nan    2\n    2     3    2\n\n    >>> fix_missing(df, df['col1'], 'col1', {'col1' : 500})\n    >>> df\n       col1 col2 col1_na\n    0     1    5   False\n    1   500    2    True\n    2     3    2   False\n    \"\"\"\n    if is_numeric_dtype(col):\n        if pd.isnull(col).sum() or (name in na_dict):\n            df[name+'_na'] = pd.isnull(col)\n            filler = na_dict[name] if name in na_dict else col.median()\n            df[name] = col.fillna(filler)\n            na_dict[name] = filler\n    return na_dict\n\ndef numericalize(df, col, name, max_n_cat):\n    \"\"\" Changes the column col from a categorical type to it's integer codes.\n\n    Parameters:\n    -----------\n    df: A pandas dataframe. df[name] will be filled with the integer codes from\n        col.\n\n    col: The column you wish to change into the categories.\n    name: The column name you wish to insert into df. This column will hold the\n        integer codes.\n\n    max_n_cat: If col has more categories than max_n_cat it will not change the\n        it to its integer codes. If max_n_cat is None, then col will always be\n        converted.\n\n    Examples:\n    ---------\n    >>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})\n    >>> df\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    note the type of col2 is string\n\n    >>> train_cats(df)\n    >>> df\n\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    now the type of col2 is category { a : 1, b : 2}\n\n    >>> numericalize(df, df['col2'], 'col3', None)\n\n       col1 col2 col3\n    0     1    a    1\n    1     2    b    2\n    2     3    a    1\n    \"\"\"\n    if not is_numeric_dtype(col) and ( max_n_cat is None or len(col.cat.categories)>max_n_cat):\n        df[name] = col.cat.codes+1\n\ndef scale_vars(df, mapper):\n    warnings.filterwarnings('ignore', category=sklearn.exceptions.DataConversionWarning)\n    if mapper is None:\n        map_f = [([n],StandardScaler()) for n in df.columns if is_numeric_dtype(df[n])]\n        mapper = DataFrameMapper(map_f).fit(df)\n    df[mapper.transformed_names_] = mapper.transform(df)\n    return mapper\n\ndef proc_df(df, y_fld=None, skip_flds=None, ignore_flds=None, do_scale=False, na_dict=None,\n            preproc_fn=None, max_n_cat=None, subset=None, mapper=None):\n    \"\"\" proc_df takes a data frame df and splits off the response variable, and\n    changes the df into an entirely numeric dataframe.\n\n    Parameters:\n    -----------\n    df: The data frame you wish to process.\n\n    y_fld: The name of the response variable\n\n    skip_flds: A list of fields that dropped from df.\n\n    ignore_flds: A list of fields that are ignored during processing.\n\n    do_scale: Standardizes each column in df. Takes Boolean Values(True,False)\n\n    na_dict: a dictionary of na columns to add. Na columns are also added if there\n        are any missing values.\n\n    preproc_fn: A function that gets applied to df.\n\n    max_n_cat: The maximum number of categories to break into dummy values, instead\n        of integer codes.\n\n    subset: Takes a random subset of size subset from df.\n\n    mapper: If do_scale is set as True, the mapper variable\n        calculates the values used for scaling of variables during training time (mean and standard deviation).\n\n    Returns:\n    --------\n    [x, y, nas, mapper(optional)]:\n\n        x: x is the transformed version of df. x will not have the response variable\n            and is entirely numeric.\n\n        y: y is the response variable\n\n        nas: returns a dictionary of which nas it created, and the associated median.\n\n        mapper: A DataFrameMapper which stores the mean and standard deviation of the corresponding continuous\n        variables which is then used for scaling of during test-time.\n\n    Examples:\n    ---------\n    >>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})\n    >>> df\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    note the type of col2 is string\n\n    >>> train_cats(df)\n    >>> df\n\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    now the type of col2 is category { a : 1, b : 2}\n\n    >>> x, y, nas = proc_df(df, 'col1')\n    >>> x\n\n       col2\n    0     1\n    1     2\n    2     1\n\n    >>> data = DataFrame(pet=[\"cat\", \"dog\", \"dog\", \"fish\", \"cat\", \"dog\", \"cat\", \"fish\"],\n                 children=[4., 6, 3, 3, 2, 3, 5, 4],\n                 salary=[90, 24, 44, 27, 32, 59, 36, 27])\n\n    >>> mapper = DataFrameMapper([(:pet, LabelBinarizer()),\n                          ([:children], StandardScaler())])\n\n    >>>round(fit_transform!(mapper, copy(data)), 2)\n\n    8x4 Array{Float64,2}:\n    1.0  0.0  0.0   0.21\n    0.0  1.0  0.0   1.88\n    0.0  1.0  0.0  -0.63\n    0.0  0.0  1.0  -0.63\n    1.0  0.0  0.0  -1.46\n    0.0  1.0  0.0  -0.63\n    1.0  0.0  0.0   1.04\n    0.0  0.0  1.0   0.21\n    \"\"\"\n    if not ignore_flds: ignore_flds=[]\n    if not skip_flds: skip_flds=[]\n    if subset: df = get_sample(df,subset)\n    else: df = df.copy()\n    ignored_flds = df.loc[:, ignore_flds]\n    df.drop(ignore_flds, axis=1, inplace=True)\n    if preproc_fn: preproc_fn(df)\n    if y_fld is None: y = None\n    else:\n        if not is_numeric_dtype(df[y_fld]): df[y_fld] = df[y_fld].cat.codes\n        y = df[y_fld].values\n        skip_flds += [y_fld]\n    df.drop(skip_flds, axis=1, inplace=True)\n\n    if na_dict is None: na_dict = {}\n    else: na_dict = na_dict.copy()\n    na_dict_initial = na_dict.copy()\n    for n,c in df.items(): na_dict = fix_missing(df, c, n, na_dict)\n    if len(na_dict_initial.keys()) > 0:\n        df.drop([a + '_na' for a in list(set(na_dict.keys()) - set(na_dict_initial.keys()))], axis=1, inplace=True)\n    if do_scale: mapper = scale_vars(df, mapper)\n    for n,c in df.items(): numericalize(df, c, n, max_n_cat)\n    df = pd.get_dummies(df, dummy_na=True)\n    df = pd.concat([ignored_flds, df], axis=1)\n    res = [df, y, na_dict]\n    if do_scale: res = res + [mapper]\n    return res\n\ndef rf_feat_importance(m, df):\n    return pd.DataFrame({'cols':df.columns, 'imp':m.feature_importances_}\n                       ).sort_values('imp', ascending=False)\n\ndef set_rf_samples(n):\n    \"\"\" Changes Scikit learn's random forests to give each tree a random sample of\n    n random rows.\n    \"\"\"\n    forest._generate_sample_indices = (lambda rs, n_samples:\n        forest.check_random_state(rs).randint(0, n_samples, n))\n\ndef reset_rf_samples():\n    \"\"\" Undoes the changes produced by set_rf_samples.\n    \"\"\"\n    forest._generate_sample_indices = (lambda rs, n_samples:\n        forest.check_random_state(rs).randint(0, n_samples, n_samples))\n\ndef get_nn_mappers(df, cat_vars, contin_vars):\n    # Replace nulls with 0 for continuous, \"\" for categorical.\n    for v in contin_vars: df[v] = df[v].fillna(df[v].max()+100,)\n    for v in cat_vars: df[v].fillna('#NA#', inplace=True)\n\n    # list of tuples, containing variable and instance of a transformer for that variable\n    # for categoricals, use LabelEncoder to map to integers. For continuous, standardize\n    cat_maps = [(o, LabelEncoder()) for o in cat_vars]\n    contin_maps = [([o], StandardScaler()) for o in contin_vars]\n    return DataFrameMapper(cat_maps).fit(df), DataFrameMapper(contin_maps).fit(df)\n","7b820251":"PATH_INPUT = \"\/kaggle\/input\/\"\nPATH_WORKING = \"\/kaggle\/working\/\"\nPATH_TMP = \"\/tmp\/\"\nNROWS=5_000_000","52774256":"!ls -lh {PATH_INPUT}","d44038bb":"!wc -l {PATH_INPUT}train.csv","2b72197a":"!head {PATH_INPUT}train.csv","e8eb6ba9":"col_datetime = [\"pickup_datetime\"]\ncol_types = {\"key\": \"object\",\n             \"fare_amount\": \"float32\",\n             \"pickup_logitude\": \"float32\",\n             \"pickup_latitude\": \"float32\",\n             \"dropoff_longitude\": \"float32\",\n             \"dropoff_latitude\": \"float32\",\n             \"passenger_count\": \"int8\"}","a9165b3f":"%%time\ndf_raw = pd.read_csv(f'{PATH_INPUT}train.csv',\n                     parse_dates = col_datetime,\n                     dtype = col_types,\n                     infer_datetime_format = True,\n                     nrows=NROWS)","a0137184":"df_test_raw = pd.read_csv(f'{PATH_INPUT}test.csv',\n                          parse_dates = col_datetime,\n                          dtype = col_types,\n                          infer_datetime_format = True)","4778f7e4":"def display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000, \"display.max_columns\", 1000): \n        display(df)","e0c7512c":"display_all(df_raw.describe(include='all'))","082a65e7":"display_all(df_test_raw.describe(include='all'))","d1dd37ab":"df_raw.to_feather(f'{PATH_TMP}train_raw')\ndf_test_raw.to_feather(f\"{PATH_TMP}test_raw\")","3fcfa833":"#df_raw = pd.read_feather(f'{PATH_TMP}train_raw')","ae35e59e":"df_raw.drop(index=df_raw[df_raw.fare_amount <= 2.5].index, inplace=True)","942e8368":"df_raw.drop(index=df_raw[df_raw.passenger_count <= 0].index, inplace=True)","07c87aa0":"df_raw.drop(index=df_raw[(df_raw.pickup_longitude <= -75) \n                         | (df_raw.pickup_longitude >= -72) \n                         | (df_raw.dropoff_longitude <= -75) \n                         | (df_raw.dropoff_longitude >= -72)\n                         | (df_raw.pickup_latitude <= 39)\n                         | (df_raw.pickup_latitude >= 42)\n                         | (df_raw.dropoff_latitude <= 39)\n                         | (df_raw.dropoff_latitude >= 42)].index, inplace=True)\n\ndf_raw.reset_index(inplace=True, drop=True)","3a4feb45":"df_raw.isnull().sum().sort_values(ascending=False)\/len(df_raw)","83b57ae5":"df_test_raw.isnull().sum().sort_values(ascending=False)\/len(df_test_raw)","c96e9d25":"add_datepart(df_raw, 'pickup_datetime', time=True)","43b8a732":"df_raw.columns","f4885fe3":"def add_travel_vector_features(df):\n    df[\"lat_diff\"] = np.abs(df.dropoff_latitude - df.pickup_latitude)\n    df[\"lon_diff\"] = np.abs(df.dropoff_longitude - df.pickup_longitude)\n    df['distance'] = ((df.lat_diff)**2 + (df.lon_diff)**2)**.5\n\nadd_travel_vector_features(df_raw)","d58c252e":"df, y, _ = proc_df(df_raw, 'fare_amount', skip_flds=[\"key\"], subset=100000)","dae77473":"print(df.shape, y.shape, df_raw.shape)","e1940ec0":"X_train, X_valid, y_train, y_valid = train_test_split(df, y, test_size=0.2)\nprint(X_train.shape, X_valid.shape, y_train.shape, y_valid.shape)","30db3450":"def rmse(x,y): return math.sqrt(((x-y)**2).mean())\n\ndef print_score(m):\n    res = [rmse(m.predict(X_train), y_train), rmse(m.predict(X_valid), y_valid),\n                m.score(X_train, y_train), m.score(X_valid, y_valid)]\n    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)\n    print(res)","aa117b33":"%%time\nm = RandomForestRegressor(n_estimators=10, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","a88f63f2":"gc.collect()","56fc5237":"set_rf_samples(20000)","b4d563a7":"%%time\nm = RandomForestRegressor(n_estimators=40, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","f1572378":"%%time\nm = RandomForestRegressor(n_estimators=80, max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","11978730":"%%time\nm = RandomForestRegressor(n_estimators=80, max_features=0.5, min_samples_leaf=3, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","52b22a0d":"%%time\nm = RandomForestRegressor(n_estimators=120, max_features=0.5, min_samples_leaf=3, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","6809b3f7":"gc.collect()","533987d8":"fi = rf_feat_importance(m, df); fi","d57e8b57":"def plot_fi(fi): return fi.plot('cols', 'imp', 'barh', figsize=(12,7), legend=False)","3bf35251":"plot_fi(fi)","f2c725db":"cols_keep = fi[fi.imp>1.5e-03].cols; len(cols_keep)","97de601d":"print(cols_keep)","d944bbc9":"X_train_copy = X_train.copy()\nX_valid_copy = X_valid.copy()\nprint(X_train_copy.shape, X_valid_copy.shape)","aaaefb7d":"X_train = X_train_copy[cols_keep].copy()\nX_valid = X_valid_copy[cols_keep].copy()\nprint(X_train.shape, X_valid.shape)","f84afd7d":"%%time\nm = RandomForestRegressor(n_estimators=120, max_features=0.5, min_samples_leaf=3, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","17ebc92f":"from scipy.cluster import hierarchy as hc","f89ea8f2":"corr = np.round(scipy.stats.spearmanr(X_train).correlation, 4)\ncorr_condensed = hc.distance.squareform(1-corr)\nz = hc.linkage(corr_condensed, method='average')\nfig = plt.figure(figsize=(16,10))\ndendrogram = hc.dendrogram(z, labels=X_train.columns, orientation='left', leaf_font_size=16)\nplt.show()","a3bc3254":"def get_oob(X):\n    m = RandomForestRegressor(n_estimators=120, max_features=0.5, min_samples_leaf=3, n_jobs=-1, oob_score=True)\n    m.fit(X, y_train)\n    return m.oob_score_","d563f40c":"get_oob(X_train)","87dc5e98":"for col in [\"pickup_datetimeMonth\", \"pickup_datetimeDayofyear\", \"pickup_datetimeWeek\", \"pickup_datetimeYear\", \"pickup_datetimeElapsed\"]:\n    print(col, get_oob(X_train.drop(labels=col, axis=1)))","dfcd6e03":"cols_drop = [\"pickup_datetimeDayofyear\", \"pickup_datetimeYear\"]","13364dba":"get_oob(X_train.drop(labels=cols_drop, axis=1))","fce43389":"X_train.drop(labels=cols_drop, axis=1, inplace=True)\nX_valid.drop(labels=cols_drop, axis=1, inplace=True)\nprint(X_train.shape, X_valid.shape)","ec69fcdf":"np.save(f'{PATH_TMP}features_keep.npy', np.array(X_train.columns))","62922a2d":"features_keep = np.load(f'{PATH_TMP}features_keep.npy')","7a3fb5ac":"%%time\nm = RandomForestRegressor(n_estimators=120, max_features=0.5, min_samples_leaf=3, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","c80b838e":"df, y, _ = proc_df(df_raw, skip_flds=[\"key\"], subset=None)\ndf = df[features_keep].copy()\ny = np.array([0]*df.shape[0])  #default to 0\nprint(df.shape, y.shape)","d0d71184":"X_train, X_valid, y_train, y_valid = train_test_split(df, y, test_size=0.2)\nprint(X_train.shape, X_valid.shape, y_train.shape, y_valid.shape)","d0232cd6":"y[X_valid.index] = 1","8f81dde6":"m = RandomForestClassifier(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(df, y)\nprint(m.oob_score_)","3912395d":"fi = rf_feat_importance(m, df); fi","10ce39bf":"reset_rf_samples()","55d75b3f":"df, y, _ = proc_df(df_raw, 'fare_amount', skip_flds=[\"key\"])","5eaff293":"df = df[features_keep].copy()","22db49dd":"X_train, X_valid, y_train, y_valid = train_test_split(df, y, test_size=0.2)\nprint(X_train.shape, X_valid.shape, y_train.shape, y_valid.shape)","6b8e4e1c":"%%time\nm = RandomForestRegressor(n_estimators=120, max_features=0.5, min_samples_leaf=3, n_jobs=-1, oob_score=False)\nm.fit(X_train, y_train)\nprint_score(m)","568e399c":"keys = df_test_raw[\"key\"]","9dadab31":"add_datepart(df_test_raw, 'pickup_datetime', time=True)","280ee9a1":"add_travel_vector_features(df_test_raw)","3fc04aa0":"df_test, _, _ = proc_df(df_test_raw[features_keep])","a06fe9b4":"preds = m.predict(df_test)","3a7df357":"submission = pd.DataFrame({\"key\": keys, \"fare_amount\": preds})\nsubmission.to_csv(f'{PATH_WORKING}submission.csv', index=False)","428eb622":"!head {PATH_WORKING}submission.csv","bea9df33":"Looks good","b0167707":"# Modeling","59cde2c8":"## Feature engineering","cdc7d390":"### Remove features","fc186222":"* 100,000 samples: [1.792594290612869, 4.114752003268763, 0.9656926105298179, 0.8229538003980035]\n* 10,000,000 samples: [1.5972439409249253, 3.727606761144474, 0.9729915591731986, 0.8516836099031339]","9033dee4":"## Cleaning","830274a3":"# Pre-processing","65ea3e20":"## Features Importance","a28ff528":"# Init","f97c5a95":"# Predict","ead3d343":"Freeze the features","6b73e054":"## End processing","57320823":"## Extrapolation","4e10c40c":"## Tuning","c1b8c235":"Base on this model and work on the features removing","60bb2dae":"## Redundant Features"}}