{"cell_type":{"0d2c8009":"code","088dbde5":"code","94753f8b":"code","180888c6":"code","5be6ee0b":"code","e3a2763d":"code","70a7a6f4":"code","16fcbe09":"code","bb696d84":"code","0a6dc487":"code","31d663c6":"code","d6c0315d":"code","5cac8df1":"code","f4a5a696":"code","37997254":"code","3a5a631e":"code","afd73193":"code","ed9321ce":"code","3c47a951":"code","9845e3ad":"code","3317efd0":"code","9f54e7b2":"code","26669e93":"code","28dc4279":"code","89341943":"code","b5c96323":"code","192d2794":"code","ef0a54ea":"code","ad9766aa":"code","8093bd82":"code","62baea23":"code","38180d5f":"code","612284b7":"code","ccd89f4a":"code","56ab7540":"code","11dfdb21":"code","af756877":"code","475c0930":"code","a0b79303":"code","4a9e1bf7":"code","73131cee":"code","23703fc1":"code","7e6b06a7":"code","d522ead5":"code","519db4ba":"code","cd9b0610":"code","47e6917b":"code","8ccffc48":"code","2a9536cf":"code","1e5b2b40":"code","7a4131e3":"code","9acb9e48":"code","471ab157":"code","62337593":"code","9b06d608":"code","30ad468e":"code","4cb506d1":"code","8c129364":"code","e2d67cfd":"code","25e994b6":"code","b4a27780":"markdown","62424ba3":"markdown","9d4adfa8":"markdown","3e30156b":"markdown","83ff3a0f":"markdown","cbb13ae2":"markdown","3102c701":"markdown","32b24c03":"markdown","2800bff1":"markdown","1a788ab9":"markdown","22666057":"markdown","2893d056":"markdown","e8dfa882":"markdown","4baa06c6":"markdown","6a20ff14":"markdown"},"source":{"0d2c8009":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","088dbde5":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","94753f8b":"# load train data\ntrain = pd.read_csv('..\/input\/train.csv')\nprint(train.shape)\ntrain.head()","180888c6":"# load test data\ntest = pd.read_csv('..\/input\/test.csv')\nprint(test.shape)\ntest.head()","5be6ee0b":"# load sample submission data\nsample_sub = pd.read_csv('..\/input\/sample_submission.csv')\nprint(sample_sub.shape)\nsample_sub.head()","e3a2763d":"# concatenate train data and test data for preprocess\ndf = pd.concat([train, test], sort=False).reset_index(drop=True)\nprint(df.shape)\ndf.head()","70a7a6f4":"df.tail()","16fcbe09":"# show all columns\nfeatures = df.columns[1:-1]\nprint(len(features))\nfeatures","bb696d84":"num_features = train.select_dtypes(include='number').columns[1:-1]\ncat_features = train.select_dtypes(exclude='number').columns","0a6dc487":"import pandas_profiling","31d663c6":"pandas_profiling.ProfileReport(df)","d6c0315d":"target = train['SalePrice']\ntarget.head(10)","5cac8df1":"target.describe()","f4a5a696":"%matplotlib inline\nplt.figure(figsize=[20, 10])\ntarget.hist(bins=100)","37997254":"corr_mat = train.loc[:, num_features].corr()\nplt.figure(figsize=[15, 15])\nsns.heatmap(corr_mat, square=True)","3a5a631e":"fig = plt.figure(figsize=[30, 30])\nplt.tight_layout()\n\nfor i, feature in enumerate(num_features):\n    ax = fig.add_subplot(6, 6, i+1)\n    sns.regplot(x=train.loc[:, feature],\n                y=train.loc[:, 'SalePrice'])","afd73193":"fig = plt.figure(figsize=[30, 40])\nplt.tight_layout()\n\nfor i, feature in enumerate(cat_features):\n    ax = fig.add_subplot(9, 5, i+1)\n    sns.violinplot(x=df.loc[:, feature],\n                   y=df.loc[:, 'SalePrice'])","ed9321ce":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","3c47a951":"for col in cat_features:\n    df[col] = df[col].fillna('NULL')\n    df[col+'_le'] = le.fit_transform(df[col])","9845e3ad":"df = df.drop(cat_features, axis=1)","3317efd0":"df.head()","9f54e7b2":"le_features = []\nfor feat in cat_features:\n    le_features.append(feat+'_le')","26669e93":"len(le_features)","28dc4279":"for feat in num_features:\n    df[feat] = df[feat].fillna(-1)","89341943":"train = df[df['Id'].isin(train['Id'])]\ntest = df[df['Id'].isin(test['Id'])]","b5c96323":"X_train = train.drop(['Id', 'SalePrice'], axis=1)\ny_train = train['SalePrice']\n\nX_test = test.drop(['Id', 'SalePrice'], axis=1)","192d2794":"from sklearn.model_selection import train_test_split","ef0a54ea":"X_train_, X_val, y_train_, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","ad9766aa":"from sklearn.linear_model import Ridge","8093bd82":"reg = Ridge(alpha=0.3, random_state=42)","62baea23":"reg.fit(X_train_, y_train_)","38180d5f":"from sklearn.metrics import mean_squared_error\ndef metric(y_true, y_pred):\n    return mean_squared_error(np.log(y_true), np.log(y_pred)) ** 0.5","612284b7":"pred_train = reg.predict(X_train_)\nrmse_train = mean_squared_error(np.log(y_train_), np.log(pred_train))**0.5\nrmse_train","ccd89f4a":"pred_train[:5]","56ab7540":"y_train_.head()","11dfdb21":"pred_val = reg.predict(X_val)\nrmse_val = mean_squared_error(np.log(y_val), np.log(pred_val))**0.5\nrmse_val","af756877":"pred_test = reg.predict(X_test)\nprint(pred_test.shape)\npred_test[:5]","475c0930":"sub = pd.read_csv('..\/input\/sample_submission.csv')\nprint(sub.shape)\nsub.head()","a0b79303":"sub['SalePrice'] = pred_test\nsub.head()","4a9e1bf7":"sub.to_csv('submission_ridge_regression.csv', index=False)","73131cee":"from sklearn.model_selection import KFold","23703fc1":"def cv(reg, X_train, y_train, X_test):\n    kf = KFold(n_splits=5, random_state=42)\n    pred_test_mean = np.zeros(sub['SalePrice'].shape)\n    for train_index, val_index in kf.split(X_train):\n        X_train_train = X_train.iloc[train_index]\n        y_train_train = y_train.iloc[train_index]\n\n        X_train_val = X_train.iloc[val_index]\n        y_train_val = y_train.iloc[val_index]\n\n        # training on train data\n        reg.fit(X_train_train, y_train_train)\n        pred_train = reg.predict(X_train_train)\n        metric_train = metric(y_train_train, pred_train)\n        print('train metric: ', metric_train)\n\n        # evaluate on validation data\n        pred_val = reg.predict(X_train_val)\n        metric_val = metric(y_train_val, pred_val)\n        print('val metric:   ', metric_val)\n        print()\n\n        # predict for test data\n        pred_test = reg.predict(X_test)\n        pred_test_mean += pred_test \/ kf.get_n_splits()\n        \n    return pred_test_mean","7e6b06a7":"reg = Ridge(alpha=0.3, random_state=42)\npred_test_mean = cv(reg, X_train, y_train, X_test)","d522ead5":"sub['SalePrice'] = pred_test_mean\nsub.head()","519db4ba":"sub.to_csv('submission_ridge_regression_5f_CV.csv', index=False)","cd9b0610":"# log tranform\ny_train_log = np.log(y_train)\nplt.figure(figsize=[20, 10])\nplt.hist(y_train_log, bins=50);","47e6917b":"reg = Ridge(alpha=0.3, random_state=42)\npred_test_mean = cv(reg, X_train, y_train_log, X_test)","8ccffc48":"sub['SalePrice'] = np.exp(pred_test_mean)\nsub.to_csv('submission_ridge_regression_cv_target_log.csv', index=False)\nsub.head()","2a9536cf":"from sklearn.preprocessing import StandardScaler","1e5b2b40":"# standard scaling\n# mean = 0, standard deviation = 1\nscaler = StandardScaler()\nX_train_scaled = pd.DataFrame(scaler.fit_transform(X_train))\nX_train_scaled.head()","7a4131e3":"X_test_scaled = pd.DataFrame(scaler.fit_transform(X_test))\nX_test_scaled.head()","9acb9e48":"reg = Ridge(alpha=0.3, random_state=42)\npred_test = cv(reg, X_train_scaled, y_train_log, X_test_scaled)","471ab157":"sub['SalePrice'] = np.exp(pred_test)\nsub.to_csv('submission_ridge_regression_cv_target_log_scaled_feature.csv', index=False)\nsub.head()","62337593":"from sklearn.ensemble import RandomForestRegressor","9b06d608":"reg = RandomForestRegressor(n_estimators=1000, random_state=42)\npred_test = cv(reg, X_train, y_train_log, X_test)","30ad468e":"sub['SalePrice'] = np.exp(pred_test)\nsub.to_csv('submission_random_forest_cv_target_log.csv', index=False)\nsub.head()","4cb506d1":"reg.fit(X_train, y_train_log)","8c129364":"feature_importances = reg.feature_importances_\nfeature_importances","e2d67cfd":"feature_importances = pd.DataFrame([X_train.columns, feature_importances]).T\nfeature_importances = feature_importances.sort_values(by=1, ascending=False)","25e994b6":"plt.figure(figsize=[20, 20])\nsns.barplot(x=feature_importances.iloc[:, 1],\n            y=feature_importances.iloc[:, 0], orient='h')\nplt.tight_layout()\nplt.show()","b4a27780":"---\n# Hold-out validation\n## Model: Ridge Regression","62424ba3":"---\n# Load data","9d4adfa8":"---\n# Data split","3e30156b":"---\n# Distribution of target","83ff3a0f":"---\n# Data fields\nHere's a brief version of what you'll find in the data description file.\n\n- **SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.**\n- MSSubClass: The building class\n- MSZoning: The general zoning classification\n- LotFrontage: Linear feet of street connected to property\n- LotArea: Lot size in square feet\n- Street: Type of road access\n- Alley: Type of alley access\n- LotShape: General shape of property\n- LandContour: Flatness of the property\n- Utilities: Type of utilities available\n- LotConfig: Lot configuration\n- LandSlope: Slope of property\n- Neighborhood: Physical locations within Ames city limits\n- Condition1: Proximity to main road or railroad\n- Condition2: Proximity to main road or railroad (if a second is present)\n- BldgType: Type of dwelling\n- HouseStyle: Style of dwelling\n- OverallQual: Overall material and finish quality\n- OverallCond: Overall condition rating\n- YearBuilt: Original construction date\n- YearRemodAdd: Remodel date\n- RoofStyle: Type of roof\n- RoofMatl: Roof material\n- Exterior1st: Exterior covering on house\n- Exterior2nd: Exterior covering on house (if more than one material)\n- MasVnrType: Masonry veneer type\n- MasVnrArea: Masonry veneer area in square feet\n- ExterQual: Exterior material quality\n- ExterCond: Present condition of the material on the exterior\n- Foundation: Type of foundation\n- BsmtQual: Height of the basement\n- BsmtCond: General condition of the basement\n- BsmtExposure: Walkout or garden level basement walls\n- BsmtFinType1: Quality of basement finished area\n- BsmtFinSF1: Type 1 finished square feet\n- BsmtFinType2: Quality of second finished area (if present)\n- BsmtFinSF2: Type 2 finished square feet\n- BsmtUnfSF: Unfinished square feet of basement area\n- TotalBsmtSF: Total square feet of basement area\n- Heating: Type of heating\n- HeatingQC: Heating quality and condition\n- CentralAir: Central air conditioning\n- Electrical: Electrical system\n- 1stFlrSF: First Floor square feet\n- 2ndFlrSF: Second floor square feet\n- LowQualFinSF: Low quality finished square feet (all floors)\n- GrLivArea: Above grade (ground) living area square feet\n- BsmtFullBath: Basement full bathrooms\n- BsmtHalfBath: Basement half bathrooms\n- FullBath: Full bathrooms above grade\n- HalfBath: Half baths above grade\n- Bedroom: Number of bedrooms above basement level\n- Kitchen: Number of kitchens\n- KitchenQual: Kitchen quality\n- TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n- Functional: Home functionality rating\n- Fireplaces: Number of fireplaces\n- FireplaceQu: Fireplace quality\n- GarageType: Garage location\n- GarageYrBlt: Year garage was built\n- GarageFinish: Interior finish of the garage\n- GarageCars: Size of garage in car capacity\n- GarageArea: Size of garage in square feet\n- GarageQual: Garage quality\n- GarageCond: Garage condition\n- PavedDrive: Paved driveway\n- WoodDeckSF: Wood deck area in square feet\n- OpenPorchSF: Open porch area in square feet\n- EnclosedPorch: Enclosed porch area in square feet\n- 3SsnPorch: Three season porch area in square feet\n- ScreenPorch: Screen porch area in square feet\n- PoolArea: Pool area in square feet\n- PoolQC: Pool quality\n- Fence: Fence quality\n- MiscFeature: Miscellaneous feature not covered in other categories\n- MiscVal: $Value of miscellaneous feature\n- MoSold: Month Sold\n- YrSold: Year Sold\n- SaleType: Type of sale\n- SaleCondition: Condition of sale","cbb13ae2":"# Features scaling","3102c701":"---\n# Correlation of feature and target","32b24c03":"## Model: Random Forest","2800bff1":"---\n# Submission","1a788ab9":"---\n# 5-fold CV\n## Model: Ridge Regression","22666057":"---\n# Label Encoding","2893d056":"---\n# Plot feature importances","e8dfa882":"---\n# Correlation of features","4baa06c6":"---\n# Target scaling","6a20ff14":"---\n# Fill NaN"}}