{"cell_type":{"8b7cd5c2":"code","051239a1":"code","e836699d":"code","d8b263bb":"code","a35970e3":"code","183e7d4d":"code","4ca194ab":"code","e015b253":"code","55f94700":"code","1c36efec":"code","66be3ff4":"code","2b73e2a3":"code","f07c837d":"code","14dbe13d":"code","7d86ae3a":"code","c4c93ba1":"code","4f86895d":"code","15896bb8":"code","915f9a31":"code","6c9d1cfe":"code","b2a79e5f":"markdown","c9526f50":"markdown","b6a15efb":"markdown","5bf4d06d":"markdown","94667f84":"markdown","d6a5ba30":"markdown","393e63ea":"markdown","a0c9ce03":"markdown","1fe39d16":"markdown","72f3fcd6":"markdown","c2b177cf":"markdown","daaab7da":"markdown","e4ce47ce":"markdown","2ed85a67":"markdown","f86501ab":"markdown"},"source":{"8b7cd5c2":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","051239a1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, \nimport matplotlib.pyplot as plt # this is used for the plot the graph \nimport seaborn as sns # used for plot interactive graph.\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.naive_bayes import GaussianNB\nimport pandas_profiling as pp\nfrom sklearn.metrics import accuracy_score","e836699d":"data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","d8b263bb":"data.head()","a35970e3":"pp.ProfileReport(data)","183e7d4d":"\n\ny = data[\"target\"]\nX = data.drop('target',axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state = 3)\n                                                                     # 20% test :)\n","4ca194ab":"tr = DecisionTreeClassifier(criterion = 'entropy',random_state=1,max_depth = 5)\ntr.fit(X_train, y_train)\ntr_predicted = tr.predict(X_test)\ntr_acc_score = accuracy_score(y_test, tr_predicted)\nprint(\"Accuracy of DecisionTreeClassifier:\",tr_acc_score*100,'\\n')\n","e015b253":"rf = RandomForestClassifier(n_estimators=60, random_state=12,max_depth=5)\nrf.fit(X_train,y_train)\nrf_predicted = rf.predict(X_test)\nrf_acc_score = accuracy_score(y_test, rf_predicted)\nprint(\"Accuracy of Random Forest:\",rf_acc_score*100,'\\n')\n","55f94700":"KneiCl = KNeighborsClassifier(n_neighbors=7)\nKneiCl.fit(X_train, y_train)\nKneiCl_predicted = KneiCl.predict(X_test)\nKneiCl_acc_score = accuracy_score(y_test, KneiCl_predicted)\nprint(\"Accuracy of K-NeighborsClassifier:\",KneiCl_acc_score*100,'\\n')\n","1c36efec":"from xgboost import XGBClassifier\nxgb = XGBClassifier(learning_rate=0.01, n_estimators=30, max_depth=15,gamma=0.6, subsample=0.52,colsample_bytree=0.6,seed=27, \n                    reg_lambda=2, booster='dart', colsample_bylevel=0.6, colsample_bynode=0.5)\nxgb.fit(X_train, y_train)\nxgb_predicted = xgb.predict(X_test)\nxgb_acc_score = accuracy_score(y_test, xgb_predicted)\nprint(\"Accuracy of Extreme Gradient Boost:\",xgb_acc_score*100,'\\n')\n","66be3ff4":"from catboost import CatBoostClassifier\nclf = CatBoostClassifier(\n    iterations=30, \n    learning_rate=0.3,depth = 3 )\nclf.fit(X_train, y_train,  plot=True)\npredicted = clf.predict(X_test)\npredicted_proba = clf.predict(X_test)\nprint(\"Accuracy is: \"+ str(clf.score(X_test,y_test)))","2b73e2a3":"nb = GaussianNB()\nnb.fit(X_train,y_train)\nnbpred = nb.predict(X_test)\nnb_acc_score = accuracy_score(y_test, nbpred)\nprint(\"Accuracy of Naive Bayes model:\",nb_acc_score*100,'\\n')","f07c837d":"from sklearn.ensemble import ExtraTreesClassifier","14dbe13d":"ext = ExtraTreesClassifier()\next.fit(X_train , y_train)\nextpred = ext.predict(X_test)\next_acc_score = accuracy_score(y_test , extpred)\nprint(\"Accuracy of ExtraTreesClassifier model:\" , ext_acc_score * 100,'\\n')","7d86ae3a":"from sklearn.ensemble import AdaBoostClassifier","c4c93ba1":"ada = AdaBoostClassifier()\nada.fit(X_train, y_train)\nadapred = ada.predict(X_test)\nada_acc_score = accuracy_score(y_test, adapred)\nprint(\"Accuracy of AdaBoostClassifier model : \", ada_acc_score * 100,'\\n')","4f86895d":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","15896bb8":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nimport warnings","915f9a31":"\n\nmodel = Sequential()\n\nmodel.add(Dense(128,activation=\"relu\",input_dim=13))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(128,activation=\"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(1,activation=\"sigmoid\"))\n\nmodel.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])","6c9d1cfe":"hist=model.fit(X_train,y_train,batch_size=60,epochs= 83,validation_data=(X_test,y_test))","b2a79e5f":"# **DecisionTreeClassifier**","c9526f50":"# **RandomForestClassifier**","b6a15efb":"* DecisionTreeClassifier\n* RandomForestClassifier\n* KNeighborsClassifier\n* XGBClassifier\n* CatBoostClassifier\n* GaussianNB\n* ExtraTreesClassifier\n* AdaBoostClassifier\n* Artificial Neural Network","5bf4d06d":"# **EDA**","94667f84":"# **GaussianNB**","d6a5ba30":"# **Models**","393e63ea":"# **Preprocessing**","a0c9ce03":"# **AdaBoostClassifier**","1fe39d16":"# **CatBoostClassifier**","72f3fcd6":"# **XGBClassifier**","c2b177cf":"# **Data**","daaab7da":"# **ExtraTreesClassifier**","e4ce47ce":"# **Artificial Neural Network**","2ed85a67":"\n# **Importing libraries**","f86501ab":"# **KNeighborsClassifier**"}}