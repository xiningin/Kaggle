{"cell_type":{"35415f53":"code","036f8000":"code","869930a9":"code","88077428":"code","c1e14bf2":"code","a44754d2":"code","f71d74de":"code","36c7c85c":"code","08264f5f":"code","4c215538":"code","70a09064":"code","d486f53f":"code","65755027":"code","d46414cd":"code","8725cc5f":"code","4181151a":"code","93b7d8f4":"code","c14f923f":"markdown","28d615cb":"markdown","1d010fd7":"markdown","539237bc":"markdown","126a41dd":"markdown","b76141f4":"markdown","940e0b01":"markdown","f98437b6":"markdown","e50377aa":"markdown","b4f87ff9":"markdown","dd23c561":"markdown","d40a83f8":"markdown"},"source":{"35415f53":"import os\ndata_iris_folder_content = os.listdir(\"data\/iris\")","036f8000":"error_message = \"Error: sqlite file not available, check instructions above to download it\"\nassert \"database.sqlite\" in data_iris_folder_content, error_message","869930a9":"import sqlite3","88077428":"conn = sqlite3.connect('data\/iris\/database.sqlite')","c1e14bf2":"cursor = conn.cursor()","a44754d2":"type(cursor)","f71d74de":"for row in cursor.execute(\"SELECT name FROM sqlite_master\"):\n    print(row)","36c7c85c":"cursor.execute(\"SELECT name FROM sqlite_master\").fetchall()","08264f5f":"sample_data = cursor.execute(\"SELECT * FROM Iris LIMIT 20\").fetchall()","4c215538":"print(type(sample_data))\nsample_data","70a09064":"[row[0] for row in cursor.description]","d486f53f":"import pandas as pd","65755027":"iris_data = pd.read_sql_query(\"SELECT * FROM Iris\", conn)","d46414cd":"iris_data.head()","8725cc5f":"iris_data.dtypes","4181151a":"iris_setosa_data = pd.read_sql_query(\"SELECT * FROM Iris WHERE Species == 'Iris-setosa'\", conn)","93b7d8f4":"iris_setosa_data\nprint(iris_setosa_data.shape)\nprint(iris_data.shape)\n","c14f923f":"<p><img   src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/49\/Iris_germanica_%28Purple_bearded_Iris%29%2C_Wakehurst_Place%2C_UK_-_Diliff.jpg\" alt=\"Iris germanica (Purple bearded Iris), Wakehurst Place, UK - Diliff.jpg\" height=\"145\" width=\"114\"><\/p>\n\n<p><br> From <a href=\"https:\/\/commons.wikimedia.org\/wiki\/File:Iris_germanica_(Purple_bearded_Iris),_Wakehurst_Place,_UK_-_Diliff.jpg#\/media\/File:Iris_germanica_(Purple_bearded_Iris),_Wakehurst_Place,_UK_-_Diliff.jpg\">Wikimedia<\/a>, by <a href=\"\/\/commons.wikimedia.org\/wiki\/User:Diliff\" title=\"User:Diliff\">Diliff<\/a> - <span class=\"int-own-work\" lang=\"en\">Own work<\/span>, <a href=\"http:\/\/creativecommons.org\/licenses\/by-sa\/3.0\" title=\"Creative Commons Attribution-Share Alike 3.0\">CC BY-SA 3.0<\/a>, <a href=\"https:\/\/commons.wikimedia.org\/w\/index.php?curid=33037509\">Link<\/a><\/p>","28d615cb":"## Access the Database with the sqlite3 Package","1d010fd7":"First let's check that the sqlite database is available and display an error message if the file is not available (`assert` checks if the expression is `True`, otherwise throws `AssertionError` with the error message string provided):","539237bc":"It is evident that the interface provided by `sqlite3` is low-level, for data exploration purposes we would like to directly import data into a more user friendly library like `pandas`.","126a41dd":"Then we can execute standard `SQL` query on the database, `SQL` is a language designed to interact with data stored in a relational database. It has a standard specification, therefore the commands below work on any database.\n\nIf you need to connect to another database, you would use another package instead of `sqlite3`, for example:\n\n* [MySQL Connector](https:\/\/dev.mysql.com\/doc\/connector-python\/en\/) for MySQL\n* [Psycopg](http:\/\/initd.org\/psycopg\/docs\/install.html) for PostgreSQL\n* [pymssql](http:\/\/pymssql.org\/en\/stable\/) for Microsoft MS SQL\n\nthen you would connect to the database using specific host, port and authentication credentials but then you could execute the same exact `SQL` statements.\n\nLet's take a look for example at the first 3 rows in the Iris table:","b76141f4":"## Import data from a database to `pandas`","940e0b01":"We can use the `sqlite3` package from the Python standard library to connect to the `sqlite` database:","f98437b6":"# Access a Database with Python - Iris Dataset\n\nThe Iris dataset is a popular dataset especially in the Machine Learning community, it is a set of features of 50  Iris flowers and their classification into 3 species.\nIt is often used to introduce classification Machine Learning algorithms.\n\nFirst let's download the dataset in `SQLite` format from Kaggle:","e50377aa":"a shortcut to directly execute the query and gather the results is the `fetchall` method:","b4f87ff9":"A `sqlite3.Cursor` object is our interface to the database, mostly throught the `execute` method that allows to run any `SQL` query on our database.\n\nFirst of all we can get a list of all the tables saved into the database, this is done by reading the column `name` from the `sqlite_master` metadata table with:\n\n    SELECT name FROM sqlite_master\n    \nThe output of the `execute` method is an iterator that can be used in a `for` loop to print the value of each row.","dd23c561":"`pandas.read_sql_query` takes a `SQL` query and a connection object and imports the data into a `DataFrame`, also keeping the same data types of the database columns. `pandas` provides a lot of the same functionality of `SQL` with a more user-friendly interface.\n\nHowever, `sqlite3` is extremely useful for downselecting data **before** importing them in `pandas`.\n\nFor example you might have 1 TB of data in a table stored in a database on a server machine. You are interested in working on a subset of the data based on some criterion, unfortunately it would be impossible to first load data into `pandas` and then filter them, therefore we should tell the database to perform the filtering and just load into `pandas` the downsized dataset.","d40a83f8":"**Notice**: this way of finding the available tables in a database is specific to `sqlite`, other databases like `MySQL` or `PostgreSQL` have different syntax."}}