{"cell_type":{"39619c26":"code","ff7d6166":"code","c35510cf":"code","5156fd13":"code","07319d99":"code","e04949ad":"code","3bf0eb98":"code","b6b246d1":"code","44f1f988":"code","04e43042":"code","fb84172b":"code","a9982379":"code","bc0a5797":"code","d99ba3d5":"code","a1c88737":"code","95af25fd":"code","cf790c53":"code","6cf5dcbc":"code","b9c60fcc":"code","3b206267":"code","02c94775":"code","2c5c605d":"code","13bc194c":"code","4ce9fb47":"code","222d8573":"markdown","69f79e83":"markdown","5b287e9b":"markdown","03191dca":"markdown","297cc54c":"markdown","2eee73a1":"markdown","a19a78e0":"markdown","79a63255":"markdown","a9d4383a":"markdown","67237811":"markdown","fb799a63":"markdown","a9de41e0":"markdown","b6d1d376":"markdown","5a035a79":"markdown","d1ef5514":"markdown","59b52149":"markdown"},"source":{"39619c26":"import os\nimport pandas as pd\nimport numpy as np\nimport cv2\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\n\nimport tensorflow_addons as tfa\n\nfrom tensorflow.keras.utils import Sequence\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, Activation\nfrom tensorflow.keras.optimizers import RMSprop,Adam\nfrom tensorflow.keras.applications import ResNet50\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nos.environ['TF_XLA_FLAGS'] = '--tf_xla_enable_xla_devices'","ff7d6166":"path = '\/kaggle\/input\/petfinder-pawpularity-score\/'\nos.listdir(path)","c35510cf":"train_data = pd.read_csv(path+'train.csv')\ntest_data = pd.read_csv(path+'test.csv')\nsamp_subm = pd.read_csv(path+'sample_submission.csv')","5156fd13":"print('Number of train samples: ', len(train_data.index))\nprint('Number of test samples: ', len(test_data.index))\nprint('Number of features: ', len(train_data.columns))","07319d99":"train_data.head()","e04949ad":"id_ = train_data.loc[0, 'Id']\n# Create file\nfile = id_+'.jpg'\n# Is the file in folder?\nfile in os.listdir(path+'train')","3bf0eb98":"img = cv2.imread(path+'train\/'+file)\nprint('Image shape:', img.shape)","b6b246d1":"fig, axs = plt.subplots(1, 1, figsize=(7, 7))\naxs.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\naxs.set_xticklabels([])\naxs.set_yticklabels([])\nplt.show()","44f1f988":"fig, axs = plt.subplots(5, 5, figsize=(25, 25))\nfig.subplots_adjust(hspace = .1, wspace=.1)\naxs = axs.ravel()\nfor i in range(25):\n    file = train_data.loc[i, 'Id']+'.jpg'\n    Pawpularity = train_data.loc[i, 'Pawpularity']\n    img = cv2.imread(path+'train\/'+file)\n    axs[i].imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\n    axs[i].set_title('Pawpularity: '+str(Pawpularity))\n    axs[i].set_xticklabels([])\n    axs[i].set_yticklabels([])\nplt.show()","04e43042":"train_data, val_data = train_test_split(train_data, test_size = 0.2, random_state=2021)\ntrain_data.index = range(len(train_data.index))\nval_data.index = range(len(val_data.index))","fb84172b":"X_train = train_data[train_data.columns[1:-1]]\ny_train = train_data['Pawpularity']\n\nX_val = val_data[val_data.columns[1:-1]]\ny_val = val_data['Pawpularity']\n\nX_test = test_data[test_data.columns[1:]]","a9982379":"model_csv = XGBRegressor(objective='reg:squarederror', n_estimators=800)\nmodel_csv.fit(X_train, y_train)\ny_val_pred = model_csv.predict(X_val)\nprint('MAE:', mean_absolute_error(y_val, y_val_pred))","bc0a5797":"y_test = model_csv.predict(X_test)\nsamp_subm['Pawpularity_csv'] = y_test","d99ba3d5":"batch_size = 64\nimg_size = 128\nimg_channel = 3","a1c88737":"class DataGenerator(Sequence):\n    def __init__(self, path, list_IDs, labels, batch_size, img_size, img_channel):\n        self.path = path\n        self.list_IDs = list_IDs\n        self.labels = labels\n        self.batch_size = batch_size\n        self.img_size = img_size\n        self.img_channel = img_channel\n        self.indexes = np.arange(len(self.list_IDs))\n        \n    def __len__(self):\n        len_ = int(len(self.list_IDs)\/self.batch_size)\n        if len_*self.batch_size < len(self.list_IDs):\n            len_ += 1\n        return len_\n    \n    \n    def __getitem__(self, index):\n        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n        list_IDs_temp = [self.list_IDs[k] for k in indexes]\n        X, y = self.__data_generation(list_IDs_temp)\n        return X, y\n            \n    \n    def __data_generation(self, list_IDs_temp):\n        X = np.zeros((self.batch_size, self.img_size, self.img_size, self.img_channel))\n        y = np.zeros((self.batch_size, 1), dtype=int)\n        for i, ID in enumerate(list_IDs_temp):\n            #row = self.list_IDs[self.list_IDs==ID].index[0]\n            img = cv2.imread(self.path+list_IDs_temp[i]+'.jpg')\n            img = cv2.resize(img, (self.img_size, self.img_size))\n            X[i, ] = img\/255\n            y[i, ] = self.labels[i]\n        return X, y","95af25fd":"train_generator = DataGenerator(path+'train\/', train_data['Id'], train_data['Pawpularity'],\n                                batch_size, img_size, img_channel)\n\nval_generator = DataGenerator(path+'train\/', val_data['Id'], val_data['Pawpularity'],\n                                batch_size, img_size, img_channel)\n\ntest_generator = DataGenerator(path+'test\/', test_data['Id'], samp_subm['Pawpularity'],\n                               batch_size, img_size, img_channel)","cf790c53":"weights='..\/input\/models\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\nconv_base = ResNet50(weights=weights,\n                     include_top=False,\n                     input_shape=(img_size, img_size, img_channel))\nconv_base.trainable = True","6cf5dcbc":"epochs = 6\n\nmodel = Sequential()\nmodel.add(conv_base)\nmodel.add(Flatten())\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1, activation='relu'))\n\nmodel.compile(optimizer = RMSprop(lr=1e-3),\n              loss='mse',\n              metrics=['mae'])\n\nmodel.summary()\n\nhistory = model.fit_generator(generator=train_generator,\n                              validation_data=test_generator,\n                              epochs = epochs)","b9c60fcc":"predict = model.predict_generator(test_generator, verbose=1)","3b206267":"samp_subm['Pawpularity_jpg'] = np.reshape(predict, (len(predict),))[0:len(samp_subm)]","02c94775":"df_compare = pd.DataFrame(columns=['Pawpularity', 'Pawpularity_csv', 'Pawpularity_jpg'])\ndf_compare['Pawpularity'] = y_val\ndf_compare['Pawpularity_csv'] = model_csv.predict(X_val)\ny_val_pred = model.predict_generator(val_generator, verbose=1)\ndf_compare['Pawpularity_jpg'] = np.reshape(y_val_pred, (len(y_val_pred),))[0:len(y_val)]","2c5c605d":"print('MAE_csv:', mean_absolute_error(df_compare['Pawpularity'], df_compare['Pawpularity_csv']))\nprint('MAE_jpg:', mean_absolute_error(df_compare['Pawpularity'], df_compare['Pawpularity_jpg']))","13bc194c":"samp_subm['Pawpularity'] = 0.5*(samp_subm['Pawpularity_csv']+samp_subm['Pawpularity_jpg'])\nsamp_subm.head()","4ce9fb47":"samp_subm[['Id', 'Pawpularity']].to_csv('submission.csv', index=False)","222d8573":"Predict Test Data","69f79e83":"# Model Based On Csv","5b287e9b":"# Overview","03191dca":"# Intro\nWelcome to the [PetFinder.my - Pawpularity Contest](https:\/\/www.kaggle.com\/c\/petfinder-pawpularity-score\/data) compedition\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/25383\/logos\/header.png)\n<span style=\"color: royalblue;\">Please vote the notebook up if it helps you. Feel free to leave a comment above the notebook. Thank you. <\/span>","297cc54c":"Load pretrained model:","2eee73a1":"# Compare Val Predictions\nWe compare the predictions based on the csv data and on the image files for the validation data set. For the final prediction we can calculate the mean of both","a19a78e0":"# Path","79a63255":"Use the generator to define train and test data:","a9d4383a":"# Split Data","67237811":"# Plot Examples","fb799a63":"# Libraries","a9de41e0":"# Model Based On Images","b6d1d376":"# Load Image\nWe load and plot the first image of the train data set:","5a035a79":"# Load Data","d1ef5514":"**Data Generator** <br>\nTo load the data on demand we define da data generator.","59b52149":"# Export"}}