{"cell_type":{"4a1e94fc":"code","9a835c47":"code","7bfcfeb4":"code","dea61474":"code","6cfcf705":"code","c1fe08e1":"code","5f9f9e74":"code","7d4ff434":"code","214b4daf":"code","54a26c54":"code","1a0539f2":"code","b7accec1":"code","625ad94e":"code","f9d0a9dd":"code","f95106de":"code","2ac8bab8":"code","5efef255":"code","88ea149f":"code","61eefeb1":"code","610456a0":"code","2bdc8216":"code","81f2d4c2":"code","0feee777":"code","a36c8336":"code","232bc250":"code","5be5bdcf":"code","23e055d3":"code","8cb70c2e":"code","74432ce5":"code","9833204b":"code","e6057db2":"code","9f6090e4":"code","69dd9f61":"code","ce469cb2":"code","b8cb9003":"code","bf082662":"code","9531fd26":"code","e54e548f":"code","cea86f35":"code","b581778e":"markdown","26c99bef":"markdown","093c311e":"markdown","99c6d4d8":"markdown","46189046":"markdown","d928653b":"markdown","9e67ddbb":"markdown","bd384801":"markdown","7754fe78":"markdown","6d101f25":"markdown","c7194efb":"markdown","69f7cb74":"markdown","e7a1767a":"markdown","5d62eebe":"markdown","3ea4bc75":"markdown","a6b3f655":"markdown","5078f9b4":"markdown","976b7a39":"markdown","8a7f81ae":"markdown","c1a30bc6":"markdown","f7da0b8b":"markdown","6174e39a":"markdown","af6efed8":"markdown","c621e8ac":"markdown","a3eae987":"markdown","ed914497":"markdown","3d65334e":"markdown","cdf1c2dc":"markdown","cc023427":"markdown","cf5bbd46":"markdown","b2dde2c5":"markdown","6a5e3285":"markdown","693b51a3":"markdown","2ccc9363":"markdown","4d56158f":"markdown","73a857ef":"markdown"},"source":{"4a1e94fc":"#import c\u00e1c th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft\nimport numpy as np\nimport pandas as pd\nimport six\n\nimport time\n\nfrom random import randint\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom skimage.transform import resize\n\nfrom keras import Model\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom keras.models import load_model\nfrom keras.layers import Input,Dropout,BatchNormalization,Activation,Add\nfrom keras.preprocessing.image import load_img\nfrom keras.optimizers import Adam\nfrom keras.utils.vis_utils import plot_model\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Input, Conv2D, Conv2DTranspose, MaxPooling2D, concatenate, Dropout,BatchNormalization\nfrom keras.layers import Conv2D, Concatenate, MaxPooling2D\nfrom keras.layers import UpSampling2D, Dropout, BatchNormalization\nfrom tqdm.notebook import tqdm\nfrom keras import initializers\nfrom keras import regularizers\nfrom keras import constraints\nfrom keras.utils import conv_utils\nfrom keras.utils.data_utils import get_file\nfrom keras.engine.topology import get_source_inputs\nfrom keras.engine import InputSpec\nfrom keras import backend as K\n#from keras.applications.imagenet_utils import _obtain_input_shape\nfrom keras.regularizers import l2\nfrom keras import optimizers\n\n\nfrom keras.engine.topology import Input\nfrom keras.engine.training import Model\nfrom keras.layers.convolutional import Conv2D, UpSampling2D, Conv2DTranspose\nfrom keras.layers.core import Activation, SpatialDropout2D\nfrom keras.layers.merge import concatenate,add\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.pooling import MaxPooling2D\n\nimport tensorflow as tf\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.model_selection import KFold","9a835c47":"# Gi\u1ea3i n\u00e9n d\u1eef li\u1ec7u ra 2 t\u1ec7p l\u00e0 train v\u00e0 test\n! unzip -q ..\/input\/tgs-salt-identification-challenge\/train.zip -d train\/\n! unzip -q ..\/input\/tgs-salt-identification-challenge\/test.zip -d test\/","7bfcfeb4":"#load d\u1eef li\u1ec7u trong file train.csv v\u00e0 depths.csv\ntrain = pd.read_csv(\"..\/input\/tgs-salt-identification-challenge\/train.csv\")\ndepths = pd.read_csv(\"..\/input\/tgs-salt-identification-challenge\/depths.csv\")\nsub = pd.read_csv(\"..\/input\/tgs-salt-identification-challenge\/sample_submission.csv\")\n\n#khai b\u00e1o \u0111\u01b0\u1eddng d\u1eabn t\u1edbi dataset\nimage_path = \"\/kaggle\/working\/train\/images\/\"\nmask_path = \"\/kaggle\/working\/train\/masks\/\"\nimage_test_path = \"\/kaggle\/working\/test\/images\/\"\n\n#khai b\u00e1o t\u00ean model v\u00e0 file submission c\u1ee7a b\u00e1o c\u00e1o\nmodel_path = 'unet_model.model'\nsubmission_file = 'submission.csv'\n\n#kh\u1edfi t\u1ea1o th\u1eddi gian khi b\u1eaft \u0111\u1ea7u hu\u1ea5n model\nt_start = time.time()\n\n#kh\u1edfi t\u1ea1o tham s\u1ed1 cho k\u00edch th\u01b0\u1edbc c\u1ee7a \u1ea3nh (101)\nimg_size = 101\n\n#kh\u1edfi t\u1ea1o s\u1ed1 l\u01b0\u1ee3ng epoch v\u00e0 batch_size cho vi\u1ec7c hu\u1ea5n luy\u1ec7n\nepochs = 50\nbatch_size = 64","dea61474":"# Xem 5 d\u1eef li\u1ec7u \u0111\u1ea7u ti\u00ean\ntrain.head()","6cfcf705":"#\u0110\u1ebfm s\u1ed1 l\u01b0\u1ee3ng c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a t\u1eebng c\u1ed9t\ntrain.info()","c1fe08e1":"depths.head()","5f9f9e74":"depths.info()","7d4ff434":"sub.head()","214b4daf":"sub.info()","54a26c54":"# n\u1ed1i d\u1eef li\u1ec7u c\u1ee7a c\u00e1c \u1ea3nh trong file train.csv v\u1edbi d\u1eef li\u1ec7u \u0111\u1ed9 s\u00e2u t\u01b0\u01a1ng \u1ee9ng trong file depths.csv, t\u01b0\u01a1ng t\u1ef1 v\u1edbi file submission.\ntrain = train[['id']].join(depths.set_index('id'), on='id')\ntest = sub[['id']].join(depths.set_index('id'), on='id')","1a0539f2":"#load \u1ea3nh trong t\u1eadp train v\u00e0o dataframe v\u00e0 chia gi\u00e1 tr\u1ecb pixel cho 255\ntrain[\"images\"] = [np.array(load_img(image_path+\"{}.png\".format(idx), color_mode=\"grayscale\"), dtype=np.uint8) \/ 255 for idx in tqdm(train.id)]\n#load mask t\u01b0\u01a1ng \u1ee9ng c\u1ee7a \u1ea3nh trong t\u1eadp train v\u00e0o dataframe v\u00e0 chia gi\u00e1 tr\u1ecb pixel cho 255\ntrain[\"masks\"] = [np.array(load_img(mask_path+\"{}.png\".format(idx), color_mode=\"grayscale\"), dtype=np.uint8) \/ 255 for idx in tqdm(train.id)]","b7accec1":"#xem th\u00f4ng tin t\u1eadp train sau khi load \u1ea3nh\ntrain.head()","625ad94e":"#ch\u1ecdn 3 \u1ea3nh trong t\u1eadp d\u1eef li\u1ec7u c\u00f3 d\u1eef li\u1ec7u rle_mask\nnames = ['6caec01e67','2bfa664017','1544a0e952']\n\nidx = train[train.id.isin(names)].index.to_numpy()\n\n#hi\u1ec3n th\u1ecb \u1ea3nh\nplt.figure(figsize=(10, 10))\n\nj = 1\nfor i in idx:\n    #hi\u1ec3n th\u1ecb c\u1ea3 3 \u1ea3nh: \u1ea3nh ban \u0111\u1ea7u, \u1ea3nh rle_mask c\u1ee7a \u1ea3nh ban \u0111\u1ea7u v\u00e0 sau khi masking\n    plt.subplot(3,3,j)\n    plt.imshow(train['images'][i], cmap=\"gray\")\n    plt.subplot(3,3,j+1)\n    plt.imshow(train['masks'][i], cmap=\"gray\")\n    plt.subplot(3,3,j+2)\n    plt.imshow(train['images'][i].squeeze(), cmap=\"gray\")\n    plt.imshow(train['masks'][i].squeeze(), alpha=0.5, cmap=\"Greens\")\n    j = j+3\nplt.suptitle('Image Masking Visualization', fontsize=20);","f9d0a9dd":"#t\u00ednh t\u1ed5ng s\u1ed1 pixel ch\u1ee9a mu\u1ed1i chia k\u00edch th\u01b0\u1edbc \u1ea3nh\ntrain[\"coverage\"] = train.masks.map(np.sum) \/ pow(img_size, 2)","f95106de":"#h\u00e0m ph\u00e2n lo\u1ea1i\ndef cov_to_class(val):    \n    for i in range(0, 11):\n        if val * 10 <= i :\n            return i\n        \n#ph\u00e2n lo\u1ea1i \u1ea3nh v\u00e0o l\u1edbp t\u01b0\u01a1ng \u1ee9ng\ntrain[\"coverage_class\"] = train.coverage.map(cov_to_class)","2ac8bab8":"train[\"coverage_class\"].value_counts().sort_index().plot(kind=\"barh\", title=\"Coverage Classes Visualization\")","5efef255":"ids_train, ids_valid, x_train, x_valid, y_train, y_valid, cover_train, cover_test, depth_train, depth_test = train_test_split(\n    train.id.values,\n    np.array(train.images.tolist()).reshape(-1,img_size, img_size, 1), \n    np.array(train.masks.tolist()).reshape(-1, img_size, img_size, 1), \n    train.coverage.values,\n    train.z.values,\n    test_size = 0.1 , stratify=train.coverage_class, random_state=42)","88ea149f":"# th\u1ef1c hi\u1ec7n vi\u1ec7c t\u0103ng c\u01b0\u1eddng d\u1eef li\u1ec7u b\u1eb1ng c\u00e1ch xoay \u1ea3nh v\u1ec1 b\u00ean tr\u00e1i v\u00e0 b\u00ean ph\u1ea3i.\nx_train = np.append(x_train, [np.fliplr(x) for x in x_train], axis=0)\ny_train = np.append(y_train, [np.fliplr(x) for x in y_train], axis=0)","61eefeb1":"def BatchActivate(x):\n    #chu\u1ea9n ho\u00e1 d\u1eef li\u1ec7u sao cho c\u00f3 mean = 0 v\u00e0 \u0111\u1ed9 l\u1ec7ch chu\u1ea9n = 1\n    x = BatchNormalization()(x)\n    #h\u00e0m k\u00edch ho\u1ea1t Relu\n    x = Activation('relu')(x)\n    return x\n\n#\u0111\u1ecbnh ngh\u0129a block convolution.\ndef convolution_block(x, filters, size, strides=(1,1), padding='same', activation=True):\n    x = Conv2D(filters, size, strides=strides, padding=padding)(x)\n    if activation == True:\n        x = BatchActivate(x)\n    return x\n\n#\u0111\u1ecbnh ngh\u0129a block residual\ndef residual_block(blockInput, num_filters=16, batch_activate = False):\n    x = BatchActivate(blockInput)\n    x = convolution_block(x, num_filters, (3,3) )\n    x = convolution_block(x, num_filters, (3,3), activation=False)\n    x = Add()([x, blockInput])\n    if batch_activate:\n        x = BatchActivate(x)\n    return x","610456a0":"size = (3, 3)\ndef build_model(input_layer, start_neurons, DropoutRatio = 0.5):\n    #encoder\n    #Gi\u1ea3m k\u00edch th\u01b0\u1edbc \u1ea3nh t\u1eeb 101 -> 50\n    conv1 = Conv2D(start_neurons * 1, size, activation=\"relu\", padding=\"same\")(input_layer)\n    conv1 = residual_block(conv1,start_neurons * 1)\n    conv1 = residual_block(conv1,start_neurons * 1, True)\n    pool1 = MaxPooling2D((2, 2))(conv1)\n    pool1 = Dropout(DropoutRatio\/2)(pool1)\n\n    #Gi\u1ea3m k\u00edch th\u01b0\u1edbc \u1ea3nh t\u1eeb 50 -> 25\n    conv2 = Conv2D(start_neurons * 2, size, activation=None, padding=\"same\")(pool1)\n    conv2 = residual_block(conv2,start_neurons * 2)\n    conv2 = residual_block(conv2,start_neurons * 2, True)\n    pool2 = MaxPooling2D((2, 2))(conv2)\n    pool2 = Dropout(DropoutRatio)(pool2)\n\n    #Gi\u1ea3m k\u00edch th\u01b0\u1edbc \u1ea3nh t\u1eeb 25 -> 12\n    conv3 = Conv2D(start_neurons * 4, size, activation=None, padding=\"same\")(pool2)\n    conv3 = residual_block(conv3,start_neurons * 4)\n    conv3 = residual_block(conv3,start_neurons * 4, True)\n    pool3 = MaxPooling2D((2, 2))(conv3)\n    pool3 = Dropout(DropoutRatio)(pool3)\n\n    #Gi\u1ea3m k\u00edch th\u01b0\u1edbc \u1ea3nh t\u1eeb  12 -> 6\n    conv4 = Conv2D(start_neurons * 8, size, activation=None, padding=\"same\")(pool3)\n    conv4 = residual_block(conv4,start_neurons * 8)\n    conv4 = residual_block(conv4,start_neurons * 8, True)\n    pool4 = MaxPooling2D((2, 2))(conv4)\n    pool4 = Dropout(DropoutRatio)(pool4)\n\n    # Middle\n    convm = Conv2D(start_neurons * 16, size, activation=None, padding=\"same\")(pool4)\n    convm = residual_block(convm,start_neurons * 16)\n    convm = residual_block(convm,start_neurons * 16, True)\n    \n    #decoder\n    #T\u0103ng k\u00edch th\u01b0\u1edbc \u1ea3nh t\u1eeb 6 -> 12\n    deconv4 = Conv2DTranspose(start_neurons * 8, size, strides=(2, 2), padding=\"same\")(convm)\n    uconv4 = concatenate([deconv4, conv4])\n    uconv4 = Dropout(DropoutRatio)(uconv4)\n    \n    uconv4 = Conv2D(start_neurons * 8, (3, 3), activation=None, padding=\"same\")(uconv4)\n    uconv4 = residual_block(uconv4,start_neurons * 8)\n    uconv4 = residual_block(uconv4,start_neurons * 8, True)\n    \n    #T\u0103ng k\u00edch th\u01b0\u1edbc \u1ea3nh t\u1eeb 12 -> 25\n    #deconv3 = Conv2DTranspose(start_neurons * 4, (3, 3), strides=(2, 2), padding=\"same\")(uconv4)\n    deconv3 = Conv2DTranspose(start_neurons * 4, size, strides=(2, 2), padding=\"valid\")(uconv4)\n    uconv3 = concatenate([deconv3, conv3])    \n    uconv3 = Dropout(DropoutRatio)(uconv3)\n    \n    uconv3 = Conv2D(start_neurons * 4, (3, 3), activation=None, padding=\"same\")(uconv3)\n    uconv3 = residual_block(uconv3,start_neurons * 4)\n    uconv3 = residual_block(uconv3,start_neurons * 4, True)\n\n    #T\u0103ng k\u00edch th\u01b0\u1edbc \u1ea3nh t\u1eeb 25 -> 50\n    deconv2 = Conv2DTranspose(start_neurons * 2, size, strides=(2, 2), padding=\"same\")(uconv3)\n    uconv2 = concatenate([deconv2, conv2])\n        \n    uconv2 = Dropout(DropoutRatio)(uconv2)\n    uconv2 = Conv2D(start_neurons * 2, (3, 3), activation=None, padding=\"same\")(uconv2)\n    uconv2 = residual_block(uconv2,start_neurons * 2)\n    uconv2 = residual_block(uconv2,start_neurons * 2, True)\n    \n    #T\u0103ng k\u00edch th\u01b0\u1edbc \u1ea3nh t\u1eeb 50 -> 101\n    #deconv1 = Conv2DTranspose(start_neurons * 1, (3, 3), strides=(2, 2), padding=\"same\")(uconv2)\n    deconv1 = Conv2DTranspose(start_neurons * 1, size, strides=(2, 2), padding=\"valid\")(uconv2)\n    uconv1 = concatenate([deconv1, conv1])\n    \n    uconv1 = Dropout(DropoutRatio)(uconv1)\n    uconv1 = Conv2D(start_neurons * 1, (3, 3), activation=None, padding=\"same\")(uconv1)\n    uconv1 = residual_block(uconv1,start_neurons * 1)\n    uconv1 = residual_block(uconv1,start_neurons * 1, True)\n    \n    #uconv1 = Dropout(DropoutRatio\/2)(uconv1)\n    #output_layer = Conv2D(1, (1,1), padding=\"same\", activation=\"sigmoid\")(uconv1)\n    output_layer_noActi = Conv2D(1, (1,1), padding=\"same\", activation=None)(uconv1)\n    output_layer =  Activation('sigmoid')(output_layer_noActi)\n    \n    return output_layer","2bdc8216":"# https:\/\/github.com\/raghakot\/keras-resnet\/blob\/master\/resnet.py\n\n#x\u00e2y d\u1ef1ng batch_normalization -> kh\u1ed1i relu\ndef _bn_relu(input):\n    \"\"\"Helper to build a BN -> relu block\n    \"\"\"\n    norm = BatchNormalization(axis=CHANNEL_AXIS)(input)\n    return Activation(\"relu\")(norm)\n\n#x\u00e2y d\u1ef1ng m\u1ed9t kh\u1ed1i convolution -> batch normalization -> kh\u1ed1i relu \ndef _conv_bn_relu(**conv_params):\n    \"\"\"Helper to build a conv -> BN -> relu block\n    \"\"\"\n    filters = conv_params[\"filters\"]\n    kernel_size = conv_params[\"kernel_size\"]\n    strides = conv_params.setdefault(\"strides\", (1, 1))\n    kernel_initializer = conv_params.setdefault(\"kernel_initializer\", \"he_normal\")\n    padding = conv_params.setdefault(\"padding\", \"same\")\n    kernel_regularizer = conv_params.setdefault(\"kernel_regularizer\", l2(1.e-4))\n\n    def f(input):\n        conv = Conv2D(filters=filters, kernel_size=kernel_size,\n                      strides=strides, padding=padding,\n                      kernel_initializer=kernel_initializer,\n                      kernel_regularizer=kernel_regularizer)(input)\n        return _bn_relu(conv)\n\n    return f\n\n#x\u00e2y d\u1ef1ng batch normalization -> kh\u1ed1i relu -> kh\u1ed1i convolution\ndef _bn_relu_conv(**conv_params):\n    \"\"\"Helper to build a BN -> relu -> conv block.\n    This is an improved scheme proposed in http:\/\/arxiv.org\/pdf\/1603.05027v2.pdf\n    \"\"\"\n    filters = conv_params[\"filters\"]\n    kernel_size = conv_params[\"kernel_size\"]\n    strides = conv_params.setdefault(\"strides\", (1, 1))\n    kernel_initializer = conv_params.setdefault(\"kernel_initializer\", \"he_normal\")\n    padding = conv_params.setdefault(\"padding\", \"same\")\n    kernel_regularizer = conv_params.setdefault(\"kernel_regularizer\", l2(1.e-4))\n\n    def f(input):\n        activation = _bn_relu(input)\n        return Conv2D(filters=filters, kernel_size=kernel_size,\n                      strides=strides, padding=padding,\n                      kernel_initializer=kernel_initializer,\n                      kernel_regularizer=kernel_regularizer)(activation)\n\n    return f\n\n\ndef _shortcut(input, residual):\n    \"\"\"Adds a shortcut between input and residual block and merges them with \"sum\"\n    \"\"\"\n    # Expand channels of shortcut to match residual.\n    # Stride appropriately to match residual (width, height)\n    # Should be int if network architecture is correctly configured.\n    input_shape = K.int_shape(input)\n    residual_shape = K.int_shape(residual)\n    stride_width = int(round(input_shape[ROW_AXIS] \/ residual_shape[ROW_AXIS]))\n    stride_height = int(round(input_shape[COL_AXIS] \/ residual_shape[COL_AXIS]))\n    equal_channels = input_shape[CHANNEL_AXIS] == residual_shape[CHANNEL_AXIS]\n\n    shortcut = input\n    # 1 X 1 conv if shape is different. Else identity.\n    if stride_width > 1 or stride_height > 1 or not equal_channels:\n        shortcut = Conv2D(filters=residual_shape[CHANNEL_AXIS],\n                          kernel_size=(1, 1),\n                          strides=(stride_width, stride_height),\n                          padding=\"valid\",\n                          kernel_initializer=\"he_normal\",\n                          kernel_regularizer=l2(0.0001))(input)\n\n    return add([shortcut, residual])\n\n\n#\u0111\u1ecbnh ngh\u0129a kh\u1ed1i convolution 3x3 \u0111\u1ec3 s\u1eed d\u1ee5ng cho model Resnet34\ndef basic_block(filters, init_strides=(1, 1), is_first_block_of_first_layer=False):\n    \"\"\"Basic 3 X 3 convolution blocks for use on resnets with layers <= 34.\n    \"\"\"\n    def f(input):\n\n        if is_first_block_of_first_layer:\n            # don't repeat bn->relu since we just did bn->relu->maxpool\n            conv1 = Conv2D(filters=filters, kernel_size=(3, 3),\n                           strides=init_strides,\n                           padding=\"same\",\n                           kernel_initializer=\"he_normal\",\n                           kernel_regularizer=l2(1e-4))(input)\n        else:\n            conv1 = _bn_relu_conv(filters=filters, kernel_size=(3, 3),\n                                  strides=init_strides)(input)\n\n        residual = _bn_relu_conv(filters=filters, kernel_size=(3, 3))(conv1)\n        return _shortcut(input, residual)\n\n    return f\n\n#\u0111\u1ecbnh ngh\u0129a kh\u1ed1i residual\ndef _residual_block(block_function, filters, repetitions, is_first_layer=False):\n    \"\"\"Builds a residual block with repeating bottleneck blocks.\n    \"\"\"\n    def f(input):\n        for i in range(repetitions):\n            init_strides = (1, 1)\n            if i == 0 and not is_first_layer:\n                init_strides = (2, 2)\n            input = block_function(filters=filters, init_strides=init_strides,\n                                   is_first_block_of_first_layer=(is_first_layer and i == 0))(input)\n        return input\n\n    return f\n\ndef _handle_dim_ordering():\n    global ROW_AXIS\n    global COL_AXIS\n    global CHANNEL_AXIS\n    if K.image_data_format() == 'channels_last':\n        ROW_AXIS = 1\n        COL_AXIS = 2\n        CHANNEL_AXIS = 3\n    else:\n        CHANNEL_AXIS = 1\n        ROW_AXIS = 2\n        COL_AXIS = 3\n\n\ndef _get_block(identifier):\n    if isinstance(identifier, six.string_types):\n        res = globals().get(identifier)\n        if not res:\n            raise ValueError('Invalid {}'.format(identifier))\n        return res\n    return identifier\n\n# \u0111\u1ecbnh ngh\u0129a m\u1ea1ng resnet\nclass ResnetBuilder(object):\n    @staticmethod\n    def build(input_shape, block_fn, repetitions,input_tensor):\n        _handle_dim_ordering()\n        if len(input_shape) != 3:\n            raise Exception(\"Input shape should be a tuple (nb_channels, nb_rows, nb_cols)\")\n\n        # Permute dimension order if necessary\n        if K.image_data_format()  == 'channels_last':\n            input_shape = (input_shape[1], input_shape[2], input_shape[0])\n\n        # Load function from str if needed.\n        block_fn = _get_block(block_fn)\n        \n        if input_tensor is None:\n            img_input = Input(shape=input_shape)\n        else:\n            if not K.is_keras_tensor(input_tensor):\n                img_input = Input(tensor=input_tensor, shape=input_shape)\n            else:\n                img_input = input_tensor\n                \n        conv1 = _conv_bn_relu(filters=64, kernel_size=(7, 7), strides=(2, 2))(img_input)\n        pool1 = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), padding=\"same\")(conv1)\n\n        block = pool1\n        filters = 64\n        for i, r in enumerate(repetitions):\n            block = _residual_block(block_fn, filters=filters, repetitions=r, is_first_layer=(i == 0))(block)\n            filters *= 2\n\n        # Last activation\n        block = _bn_relu(block)\n\n        model = Model(inputs=img_input, outputs=block)\n        return model\n\n    @staticmethod\n    def build_resnet_34(input_shape,input_tensor):\n        return ResnetBuilder.build(input_shape, basic_block, [3, 4, 6, 3],input_tensor)","81f2d4c2":"def get_iou_vector(A, B):\n    batch_size = A.shape[0]\n    metric = []\n    for batch in range(batch_size):\n        t, p = A[batch], B[batch]\n#         if np.count_nonzero(t) == 0 and np.nt_nonzero(p) > 0:\n#             metric.append(0)\n#             continue\n#         if np.count_nonzero(t) >= 1 and np.count_nonzero(p) == 0:\n#             metric.append(0)\n#             continue\n#         if np.count_nonzero(t) == 0 and np.count_nonzero(p) == 0:\n#             metric.append(1)\n#             continue\n        \n        intersection = np.logical_and(t, p)\n        union = np.logical_or(t, p)\n        iou = (np.sum(intersection > 0) + 1e-10 )\/ (np.sum(union > 0) + 1e-10)\n        thresholds = np.arange(0.5, 1, 0.05)\n        s = []\n        for thresh in thresholds:\n            s.append(iou > thresh)\n        metric.append(np.mean(s))\n\n    return np.mean(metric)\n\ndef my_iou_metric(label, pred):\n    return tf.py_function(get_iou_vector, [label, pred > 0.3], tf.float64)#change 0.5 >> 0.7\n\ndef my_iou_metric_2(label, pred):\n    return tf.py_function(get_iou_vector, [label, pred > 0.1], tf.float64)#change 0.0 >> 0.5","0feee777":"# code download from: https:\/\/github.com\/bermanmaxim\/LovaszSoftmax\ndef _cumsum(x, axis=None):\n    return np.cumsum(x, axis=axis)\n\ndef lovasz_grad(gt_sorted):\n    \"\"\"\n    Computes gradient of the Lovasz extension w.r.t sorted errors\n    See Alg. 1 in paper\n    \"\"\"\n    gts = tf.reduce_sum(gt_sorted)\n    \n    # intersection = gts - tf.cumsum(gt_sorted)\n    intersection = gts - tf.py_function(_cumsum,[gt_sorted],tf.float32)\n    # union = gts + tf.cumsum(1. - gt_sorted)\n    union = gts + tf.py_function(_cumsum,[1. - gt_sorted],tf.float32)\n    jaccard = 1. - intersection \/ union\n    jaccard = tf.concat((jaccard[0:1], jaccard[1:] - jaccard[:-1]), 0)\n    return jaccard\n\n\n# --------------------------- BINARY LOSSES ---------------------------\n\n\ndef lovasz_hinge(logits, labels, per_image=True, ignore=None):\n    \"\"\"\n    Binary Lovasz hinge loss\n      logits: [B, H, W] Variable, logits at each pixel (between -\\infty and +\\infty)\n      labels: [B, H, W] Tensor, binary ground truth masks (0 or 1)\n      per_image: compute the loss per image instead of per batch\n      ignore: void class id\n    \"\"\"\n    if per_image:\n        def treat_image(log_lab):\n            log, lab = log_lab\n            log, lab = tf.expand_dims(log, 0), tf.expand_dims(lab, 0)\n            log, lab = flatten_binary_scores(log, lab, ignore)\n            return lovasz_hinge_flat(log, lab)\n        losses = tf.map_fn(treat_image, (logits, labels), dtype=tf.float32)\n        loss = tf.reduce_mean(losses)\n    else:\n        loss = lovasz_hinge_flat(*flatten_binary_scores(logits, labels, ignore))\n    return loss\n\n\ndef lovasz_hinge_flat(logits, labels):\n    \"\"\"\n    Binary Lovasz hinge loss\n      logits: [P] Variable, logits at each prediction (between -\\infty and +\\infty)\n      labels: [P] Tensor, binary ground truth labels (0 or 1)\n      ignore: label to ignore\n    \"\"\"\n\n    def compute_loss():\n        labelsf = tf.cast(labels, logits.dtype)\n        signs = 2. * labelsf - 1.\n        errors = 1. - logits * tf.stop_gradient(signs)\n        errors_sorted, perm = tf.nn.top_k(errors, k=tf.shape(errors)[0], name=\"descending_sort\")\n        gt_sorted = tf.gather(labelsf, perm)\n        grad = lovasz_grad(gt_sorted)\n        loss = tf.tensordot(tf.nn.relu(errors_sorted), tf.stop_gradient(grad), 1, name=\"loss_non_void\")\n        return loss\n\n    # deal with the void prediction case (only void pixels)\n    loss = tf.cond(tf.equal(tf.shape(logits)[0], 0),\n                   lambda: tf.reduce_sum(logits) * 0.,\n                   compute_loss,\n                   #strict=True,\n                   name=\"loss\"\n                   )\n    return loss\n\n\ndef flatten_binary_scores(scores, labels, ignore=None):\n    \"\"\"\n    Flattens predictions in the batch (binary case)\n    Remove labels equal to 'ignore'\n    \"\"\"\n    scores = tf.reshape(scores, (-1,))\n    labels = tf.reshape(labels, (-1,))\n    if ignore is None:\n        return scores, labels\n    valid = tf.not_equal(labels, ignore)\n    vscores = tf.boolean_mask(scores, valid, name='valid_scores')\n    vlabels = tf.boolean_mask(labels, valid, name='valid_labels')\n    return vscores, vlabels\n\n\ndef lovasz_loss(y_true, y_pred):\n    y_true, y_pred = K.cast(K.squeeze(y_true, -1), 'int32'), K.cast(K.squeeze(y_pred, -1), 'float32')\n    #logits = K.log(y_pred \/ (1. - y_pred))\n    logits = y_pred #Jiaxin\n    loss = lovasz_hinge(logits, y_true, per_image = True, ignore = None)\n    return loss","a36c8336":"def UResNet34(input_shape=(128, 128, 1), classes=1, decoder_filters=16, decoder_block_type='upsampling',\n                       encoder_weights=\"imagenet\", input_tensor=None, activation='sigmoid', **kwargs):\n\n    backbone = ResnetBuilder.build_resnet_34(input_shape=input_shape,input_tensor=input_tensor)\n    \n    input_layer = backbone.input\n    output_layer = build_model(input_layer, 16,0.5) \n    model = Model(input_layer, output_layer)\n\n    model.compile(loss=\"binary_crossentropy\", optimizer='adam', metrics=[my_iou_metric])\n\n    return model","232bc250":"model1 = UResNet34( input_shape = (1,img_size,img_size))\nmodel1.summary()","5be5bdcf":"#d\u1eebng vi\u1ec7c hu\u1ea5n luy\u1ec7n sau 10 epoch khi ch\u1ec9 s\u1ed1 iou kh\u00f4ng t\u0103ng th\u00eam\nearly_stopping = EarlyStopping(monitor='my_iou_metric', mode = 'max',patience=10, verbose=1)\n#l\u01b0u l\u1ea1i tr\u1ecdng s\u1ed1 c\u1ee7a model m\u00e0 ch\u1ec9 s\u1ed1 iou cao nh\u1ea5t\nmodel_checkpoint = ModelCheckpoint(model_path,monitor='my_iou_metric',\n                                   mode = 'max', save_best_only=True, verbose=1)\n#\u0111i\u1ec1u ch\u1ec9nh learning rate gi\u1ea3m 0.5 n\u1ebfu ch\u1ec9 s\u1ed1 iou kh\u00f4ng \u0111\u01b0\u1ee3c c\u1ea3i thi\u1ec7n sai 5 epoch \nreduce_lr = ReduceLROnPlateau(monitor='my_iou_metric', mode = 'max',factor=0.5, patience=5, min_lr=0.0001, verbose=1)\n\nhistory = model1.fit(x_train, y_train,\n                    validation_data=(x_valid, y_valid), \n                    epochs=epochs,\n                    batch_size=batch_size,\n                    callbacks=[model_checkpoint,reduce_lr], \n                    verbose=1)","23e055d3":"#load model \u0111\u00e3 train \u1edf b\u01b0\u1edbc tr\u01b0\u1edbc:\nmodel1 = load_model(model_path,custom_objects={'my_iou_metric': my_iou_metric})\n# s\u1eed d\u1ee5ng input layer c\u1ee7a model \u0111\u00e3 train\ninput_x = model1.layers[0].input\n#active \noutput_layer = model1.layers[-1].input\nmodel = Model(input_x, output_layer)\n\nmodel.compile(loss=lovasz_loss, optimizer='adam', metrics=[my_iou_metric_2])\nmodel.summary()","8cb70c2e":"#d\u1eebng vi\u1ec7c hu\u1ea5n luy\u1ec7n sau 10 epoch khi ch\u1ec9 s\u1ed1 iou kh\u00f4ng t\u0103ng th\u00eam\nearly_stopping = EarlyStopping(monitor='val_my_iou_metric_2', mode = 'max',patience=20, verbose=1)\n#l\u01b0u l\u1ea1i tr\u1ecdng s\u1ed1 c\u1ee7a model m\u00e0 ch\u1ec9 s\u1ed1 iou cao nh\u1ea5t\nmodel_checkpoint = ModelCheckpoint(model_path,monitor='val_my_iou_metric_2', \n                                   mode = 'max', save_best_only=True, verbose=1)\n#\u0111i\u1ec1u ch\u1ec9nh learning rate gi\u1ea3m 0.5 n\u1ebfu ch\u1ec9 s\u1ed1 iou kh\u00f4ng \u0111\u01b0\u1ee3c c\u1ea3i thi\u1ec7n sai 5 epoch \nreduce_lr = ReduceLROnPlateau(monitor='val_my_iou_metric_2', mode = 'max',factor=0.5, patience=5, min_lr=0.0001, verbose=1)\n\nhistory = model.fit(x_train, y_train,\n                    validation_data=(x_valid, y_valid), \n                    epochs=epochs,\n                    batch_size=batch_size,\n                    callbacks=[model_checkpoint,reduce_lr,early_stopping], \n                    verbose=1)","74432ce5":"#h\u00e0m d\u1ef1 \u0111o\u00e1n masking\ndef predict_result(model,x_test,img_size): # predict both orginal and reflect x\n    x_test_reflect =  np.array([np.fliplr(x) for x in x_test])\n    preds_test = model.predict(x_test).reshape(-1, img_size, img_size)\n    preds_test2_refect = model.predict(x_test_reflect).reshape(-1, img_size, img_size)\n    preds_test += np.array([ np.fliplr(x) for x in preds_test2_refect] )\n    return preds_test","9833204b":"#load model \u0111\u00e3 hu\u1ea5n luy\u1ec7n \u1edf ph\u1ea7n tr\u01b0\u1edbc\nmodel = load_model(model_path,custom_objects={'my_iou_metric_2': my_iou_metric_2, 'lovasz_loss': lovasz_loss})\n#d\u1ef1 \u0111o\u00e1n masking cho t\u1eadp validation\npreds_valid = predict_result(model,x_valid,img_size)","e6057db2":"#T\u00ednh to\u00e1n ch\u1ec9 s\u1ed1 c\u1ee7a m\u00f4 h\u00ecnh v\u00e0 t\u1ed1i \u01b0u ng\u01b0\u1ee1ng gi\u00e1 tr\u1ecb b\u1eb1ng IoU t\u1ed1t nh\u1ea5t\n# src: https:\/\/www.kaggle.com\/aglotero\/another-iou-metric\ndef iou_metric(y_true_in, y_pred_in, print_table=False):\n    labels = y_true_in\n    y_pred = y_pred_in\n\n\n    true_objects = 2\n    pred_objects = 2\n\n    #  if all zeros, original code  generate wrong  bins [-0.5 0 0.5],\n    temp1 = np.histogram2d(labels.flatten(), y_pred.flatten(), bins=([0,0.5,1], [0,0.5, 1]))\n#     temp1 = np.histogram2d(labels.flatten(), y_pred.flatten(), bins=(true_objects, pred_objects))\n    #print(temp1)\n    intersection = temp1[0]\n    #print(\"temp2 = \",temp1[1])\n    #print(intersection.shape)\n   # print(intersection)\n    # Compute areas (needed for finding the union between all objects)\n    #print(np.histogram(labels, bins = true_objects))\n    area_true = np.histogram(labels,bins=[0,0.5,1])[0]\n    #print(\"area_true = \",area_true)\n    area_pred = np.histogram(y_pred, bins=[0,0.5,1])[0]\n    area_true = np.expand_dims(area_true, -1)\n    area_pred = np.expand_dims(area_pred, 0)\n\n    # T\u00ednh union\n    union = area_true + area_pred - intersection\n  \n    # Exclude background from the analysis\n    intersection = intersection[1:,1:]\n    intersection[intersection == 0] = 1e-9\n    \n    union = union[1:,1:]\n    union[union == 0] = 1e-9\n\n    # T\u00ednh ch\u1ec9 s\u1ed1 IoU\n    iou = intersection \/ union\n\n    # H\u00e0m t\u00ednh \u0111\u1ed9 ch\u00ednh x\u00e1c\n    def precision_at(threshold, iou):\n        matches = iou > threshold\n        true_positives = np.sum(matches, axis=1) == 1   # Correct objects\n        false_positives = np.sum(matches, axis=0) == 0  # Missed objects\n        false_negatives = np.sum(matches, axis=1) == 0  # Extra objects\n        tp, fp, fn = np.sum(true_positives), np.sum(false_positives), np.sum(false_negatives)\n        return tp, fp, fn\n\n    # L\u1eb7p qua c\u00e1c ng\u01b0\u1ee1ng IoU\n    prec = []\n    if print_table:\n        print(\"Thresh\\tTP\\tFP\\tFN\\tPrec.\")\n    for t in np.arange(0.5, 1.0, 0.05):\n        tp, fp, fn = precision_at(t, iou)\n        if (tp + fp + fn) > 0:\n            p = tp \/ (tp + fp + fn)\n        else:\n            p = 0\n        if print_table:\n            print(\"{:1.3f}\\t{}\\t{}\\t{}\\t{:1.3f}\".format(t, tp, fp, fn, p))\n        prec.append(p)\n    \n    if print_table:\n        print(\"AP\\t-\\t-\\t-\\t{:1.3f}\".format(np.mean(prec)))\n    return np.mean(prec)\n\ndef iou_metric_batch(y_true_in, y_pred_in):\n    batch_size = y_true_in.shape[0]\n    metric = []\n    for batch in range(batch_size):\n        value = iou_metric(y_true_in[batch], y_pred_in[batch])\n        metric.append(value)\n    return np.mean(metric)","9f6090e4":"##T\u00ednh to\u00e1n ch\u1ec9 s\u1ed1 cho model, ch\u1ecdn ng\u01b0\u1ee1ng b\u1eb1ng d\u1eef li\u1ec7u validation\nthresholds_ori = np.linspace(0.3, 0.7, 31)\n# Reverse sigmoid function: Use code below because the  sigmoid activation was removed\nthresholds = np.log(thresholds_ori\/(1-thresholds_ori)) \n\n# ious = np.array([get_iou_vector(y_valid, preds_valid > threshold) for threshold in tqdm_notebook(thresholds)])\n# print(ious)\nious = np.array([iou_metric_batch(y_valid, preds_valid > threshold) for threshold in tqdm(thresholds)])\nprint(ious)","69dd9f61":"# T\u00ecm ng\u01b0\u1ee1ng t\u1ed1t nh\u1ea5t b\u1eb1ng d\u1eef li\u1ec7u validate.\nthreshold_best_index = np.argmax(ious) \niou_best = ious[threshold_best_index]\nthreshold_best = thresholds[threshold_best_index]\n\nplt.plot(thresholds, ious)\nplt.plot(threshold_best, iou_best, \"xr\", label=\"Best threshold\")\nplt.xlabel(\"Threshold\")\nplt.ylabel(\"IoU\")\nplt.title(\"Threshold vs IoU ({}, {})\".format(threshold_best, iou_best))\nplt.legend()","ce469cb2":"#hi\u1ec3n th\u1ecb \u1ea3nh\nplt.figure(figsize=(10, 10))\nj = 1\nfor i in range(5): \n    #hi\u1ec3n th\u1ecb c\u1ea3 3 \u1ea3nh: \u1ea3nh ban \u0111\u1ea7u, \u1ea3nh rle_mask c\u1ee7a \u1ea3nh ban \u0111\u1ea7u v\u00e0 sau khi masking\n    random_num = randint(1, 100);\n    plt.subplot(5,3,j)\n    plt.imshow(x_valid[i+random_num], cmap=\"gray\")\n    plt.subplot(5,3,j+1)\n    plt.imshow(x_valid[i+random_num].squeeze(), cmap=\"gray\")\n    plt.imshow(y_valid[i+random_num].squeeze(), alpha=0.5, cmap=\"Greens\")\n    plt.subplot(5,3,j+2)\n    plt.imshow(x_valid[i+random_num].squeeze(), cmap=\"gray\")\n    plt.imshow(preds_valid[i+random_num].squeeze(), alpha = 0.3, cmap=\"OrRd\")\n    j = j+3\nplt.suptitle('Image Masking Visualization', fontsize=20);","b8cb9003":"#h\u00e0m chuy\u1ec3n \u0111\u1ed5i \u1ea3nh masking th\u00e0nh rle_mask\ndef rle_encode(im):\n    '''\n    im: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels = im.flatten(order = 'F')\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)","bf082662":"#th\u1ef1c hi\u1ec7n vi\u1ec7c load \u1ea3nh c\u1ee7a t\u1eadp test v\u00e0o dataframe gi\u1ed1ng b\u01b0\u1edbc ti\u1ec1n x\u1eed l\u00fd d\u1eef li\u1ec7u.\nx_test = np.array([(np.array(load_img(image_test_path+\"{}.png\".format(idx), color_mode=\"grayscale\"))) \/ 255 for idx in tqdm(test.id)]).reshape(-1, img_size, img_size, 1)","9531fd26":"preds_test = predict_result(model,x_test,img_size)\nt1 = time.time()\npred_dict = {idx: rle_encode(np.round(preds_test[i]) > threshold_best) for i, idx in enumerate(tqdm(test.id.values))}\nt2 = time.time()\n\nprint(f\"Usedtime = {t2-t1} s\")","e54e548f":"#xo\u00e1 2 folder train v\u00e0 test \u1edf folder working \u0111\u1ec3 submit file csv\n!rm -r \/kaggle\/working\/train\n!rm -r \/kaggle\/working\/test","cea86f35":"submit = pd.DataFrame.from_dict(pred_dict,orient='index')\nsubmit.index.names = ['id']\nsubmit.columns = ['rle_mask']\nsubmit.to_csv(submission_file)","b581778e":"Ti\u1ebfp theo em th\u1ef1c hi\u1ec7n vi\u1ec7c visualize vi\u1ec7c d\u1ef1 \u0111o\u00e1n masking c\u1ee7a m\u1ed9t s\u1ed1 \u1ea3nh trong t\u1eadp validation.","26c99bef":"Nh\u1eadn x\u00e9t: Sau khi mask nh\u1eefng \u1ea3nh masking (\u1ea3nh \u1edf gi\u1eefa) l\u00ean \u1ea3nh g\u1ed1c t\u01b0\u01a1ng \u1ee9ng (\u1ea3nh b\u00ean tr\u00e1i), ta nh\u1eadn \u0111\u01b0\u1ee3c m\u1ed9t \u1ea3nh hi\u1ec7n th\u1ecb r\u00f5 nh\u1eefng ph\u1ea7n c\u00f3 ch\u1ee9a mu\u1ed1i, ph\u1ea7n c\u00f2n l\u1ea1i b\u1ecb l\u00e0m m\u1edd \u0111i (\u1ea3nh b\u00ean ph\u1ea3i).\n\nTi\u1ebfp theo em s\u1ebd t\u00ednh to\u00e1n \u0111\u1ed9 bao ph\u1ee7 c\u1ee7a mu\u1ed1i v\u00e0 ph\u00e2n chia \u0111\u1ed9 bao ph\u1ee7 n\u00e0y th\u00e0nh c\u00e1c l\u1edbp.","093c311e":"2. M\u1ea1ng Resnet34:\n\n    M\u1ea1ng Resnet34 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00e0m encoder cho m\u1ea1ng Unet \u1edf tr\u00ean, ph\u1ea7n decoder c\u1ee7a m\u1ea1ng Unet s\u1ebd s\u1eed d\u1ee5ng c\u00e1c kh\u1ed1i resnet \u0111\u01a1n gi\u1ea3n nh\u01b0 m\u00f4 t\u1ea3 \u1edf tr\u00ean.","99c6d4d8":"# II. Ti\u1ec1n x\u1eed l\u00fd d\u1eef li\u1ec7u:\n   1.   T\u1ea3i d\u1eef li\u1ec7u v\u1ec1 t\u1eeb Kaggle","46189046":"Sau \u0111\u00f3 em load model v\u00e0 th\u1ef1c hi\u1ec7n vi\u1ec7c d\u1ef1 \u0111o\u00e1n cho t\u1eadp validation.","d928653b":"Nh\u1eadn x\u00e9t: Do dataset \u0111\u00e3 cung c\u1ea5p s\u1eb5n cho ch\u00fang ta \u1ea3nh masking c\u1ee7a c\u00e1c \u1ea3nh trong t\u1eadp train, em th\u1ef1c hi\u1ec7n n\u1ed1i d\u1eef li\u1ec7u depths c\u1ee7a c\u00e1c \u1ea3nh \u1edf t\u1eadp train v\u00e0 test v\u1edbi c\u00e1c id t\u01b0\u01a1ng \u1ee9ng \u0111\u1ec3 thu\u1eadn ti\u1ec7n cho vi\u1ec7c t\u00ednh to\u00e1n v\u00e0 x\u1eed l\u00fd v\u1ec1 sau. \n\nTi\u1ebfp theo em s\u1ebd load c\u00e1c \u1ea3nh v\u00e0 mask c\u1ee7a \u1ea3nh v\u00e0o dataframe v\u00e0 chu\u1ea9n ho\u00e1 t\u1ea5t c\u1ea3 v\u1ec1 kho\u1ea3ng [0,1]","9e67ddbb":"# IV. Hu\u1ea5n luy\u1ec7n v\u00e0 \u0111\u00e1nh gi\u00e1:\n\n1. Ch\u1ec9 s\u1ed1 \u0111\u00e1nh gi\u00e1:\n\n    Ch\u1ec9 s\u1ed1 \u0111\u00e1nh gi\u00e1 trong b\u00e1o c\u00e1o \u0111\u01b0\u1ee3c em s\u1eed d\u1ee5ng l\u00e0 ch\u1ec9 s\u1ed1 IoU (Intersection over Union) \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng v\u00e0 \u0111\u1ec1 c\u1eadp t\u1edbi trong ph\u1ea7n [Evaluation](https:\/\/www.kaggle.com\/c\/tgs-salt-identification-challenge\/overview\/evaluation) c\u1ee7a cu\u1ed9c thi.\n\n    K\u1ebft qu\u1ea3 c\u1ee7a b\u00e1o c\u00e1o s\u1ebd \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng \u0111\u1ed9 ch\u00ednh x\u00e1c trung b\u00ecnh t\u1ea1i c\u00e1c ng\u01b0\u1ee1ng IoU kh\u00e1c nhau. Ch\u1ec9 s\u1ed1 IoU c\u1ee7a m\u1ed9t t\u1eadp h\u1ee3p \u0111\u1ed1i t\u01b0\u1ee3ng pixel v\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng pixel th\u1eadt \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng c\u00f4ng th\u1ee9c: \n\n    $$\n    IoU(A,B) = \\frac{A\\cap B} {A\\cup B}\n    $$\n\n    Ch\u1ec9 s\u1ed1 qu\u00e9t qua m\u1ed9t lo\u1ea1t c\u00e1c ng\u01b0\u1ee1ng IoU, \u1edf m\u1ed7i \u0111i\u1ec3m s\u1ebd t\u00ednh to\u00e1n m\u1ed9t gi\u00e1 tr\u1ecb ch\u00ednh x\u00e1c trung b\u00ecnh. C\u00e1c gi\u00e1 tr\u1ecb ng\u01b0\u1ee1ng n\u1eb1m trong kho\u1ea3ng t\u1eeb 0.5 \u0111\u1ebfn 0.95 v\u1edbi k\u00edch th\u01b0\u1edbc b\u01b0\u1edbc l\u00e0 0.05: (0.5, 0.55, 0.6, ..., 0.85, 0.9, 0.95), N\u00f3i c\u00e1ch kh\u00e1c, v\u1edbi ng\u01b0\u1ee1ng 0.5, m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01b0\u1ee3c d\u1ef1 \u0111o\u00e1n l\u00e0 \u0111\u00fang n\u1ebfu IoU c\u1ee7a \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u00f3 v\u1edbi m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng ground truth l\u00e0 l\u1edbn h\u01a1n 0.5.\n\n    \u1ede m\u1ed7i gi\u00e1 tr\u1ecb ng\u01b0\u1ee1ng t, m\u1ed9t gi\u00e1 tr\u1ecb ch\u00ednh x\u00e1c \u0111\u01b0\u1ee3c t\u00ednh to\u00e1n d\u1ef1a tr\u00ean s\u1ed1 l\u01b0\u1ee3ng true positive (TP), false negative (FN), false positive (FP) do so s\u00e1nh t\u1eeb \u0111\u1ed1i t\u01b0\u1ee3ng d\u1ef1 \u0111o\u00e1n t\u1edbi t\u1ea5t c\u1ea3 \u0111\u1ed1i t\u01b0\u1ee3ng ground truth:\n\n    $$\n    \\frac{TP(t)} {TP(t) + FP(t) + FN(t)}\n    $$\n\n    TP \u0111\u01b0\u1ee3c t\u00ednh khi m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng d\u1ef1 \u0111o\u00e1n duy nh\u1ea5t kh\u1edbp v\u1edbi m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng ground truth  v\u1edbi m\u1ed9t IoU \u1edf tr\u00ean ng\u01b0\u1ee1ng. M\u1ed9t FP ch\u1ec9 ra r\u1eb1ng \u0111\u1ed1i t\u01b0\u1ee3ng d\u1ef1 \u0111o\u00e1n ko c\u00f3 quan h\u1ec7 v\u1edbi \u0111\u1ed1i t\u01b0\u1ee3ng ground truth t\u01b0\u01a1ng \u1ee9ng. M\u1ed9t FN ch\u1ec9 ra r\u1eb1ng m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng ground truth kh\u00f4ng c\u00f3 quan h\u1ec7 v\u1edbi \u0111\u1ed1i t\u01b0\u1ee3ng d\u1ef1 \u0111o\u00e1n t\u01b0\u01a1ng \u1ee9ng. \u0110\u1ed9 ch\u00ednh x\u00e1c trung b\u00ecnh c\u1ee7a m\u1ed9t \u1ea3nh sau \u0111\u00f3 \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng gi\u00e1 tr\u1ecb trung b\u00ecnh c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb ch\u00ednh x\u00e1c \u1edf tr\u00ean v\u1edbi m\u1ed7i ng\u01b0\u1ee1ng IoU:\n\n    $$\n    \\frac {1} {|threshold|} \\sum_{t} \\frac{TP(t)} {TP(t) + FP(t) + FN(t)}\n    $$\n\n    Cu\u1ed1i c\u00f9ng, \u0111i\u1ec3m s\u1ed1 \u0111\u01b0\u1ee3c tr\u1ea3 v\u1ec1 b\u1edfi cu\u1ed9c thi l\u00e0 gi\u00e1 tr\u1ecb trung b\u00ecnh \u0111\u01b0\u1ee3c l\u1ea5y tr\u00ean c\u00e1c m\u1ee9c ch\u00ednh x\u00e1c trung b\u00ecnh c\u1ee7a t\u1eebng \u1ea3nh trong t\u1eadp test.\n\n2. H\u00e0m t\u1ed1i \u01b0u:\n\n    H\u00e0m t\u1ed1i \u01b0u \u0111\u01b0\u1ee3c ch\u1ecdn cho b\u00e1o c\u00e1o l\u00e0 h\u00e0m Adam","bd384801":"Nh\u1eadn x\u00e9t: V\u1edbi vi\u1ec7c \u0111\u1ecbnh d\u1ea1ng c\u1ee7a file submission.csv \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 k\u1ebft qu\u1ea3 c\u1ee7a b\u00e1o c\u00e1o gi\u1ed1ng v\u1edbi \u0111\u1ecbnh d\u1ea1ng c\u1ee7a file train.csv, bao g\u1ed3m id c\u1ee7a \u1ea3nh v\u00e0 rle_mask cho \u1ea3nh, h\u00e0m rle_encode s\u1ebd bi\u1ebfn nh\u1eefng \u1ea3nh masking th\u00e0nh \u0111\u1ecbnh d\u1ea1ng chu\u1ed7i gi\u1ed1ng v\u1edbi d\u1eef li\u1ec7u trong c\u1ed9t rle_mask c\u1ee7a file train.csv.","7754fe78":"Nh\u1eadn x\u00e9t: T\u1eadp test c\u1ee7a b\u00e0i to\u00e1n c\u0169ng bao g\u1ed3m 2 c\u1ed9t nh\u01b0 \u1edf file train.csv, tuy nhi\u00ean \u1edf c\u1ed9t rle_mask t\u1ea5t c\u1ea3 c\u00e1c h\u00e0ng \u0111\u1ec1u c\u00f3 gi\u00e1 tr\u1ecb l\u00e0 1 1 do \u0111\u00e2y l\u00e0 \u0111\u1ea7u ra c\u1ee7a b\u00e0i to\u00e1n, nhi\u1ec7m v\u1ee5 c\u1ee7a em l\u00e0 t\u1ea1o c\u00e1c gi\u00e1 tr\u1ecb rle_mask cho t\u1eebng \u1ea3nh v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb mask \u1edf file submission.csv c\u00f3 \u0111\u1ecbnh d\u1ea1ng gi\u1ed1ng nh\u01b0 \u1edf file train.csv. V\u00e0 \u0111\u00fang nh\u01b0 d\u1ef1 \u0111o\u00e1n, file test c\u1ee7a dataset g\u1ed3m 18000 \u1ea3nh c\u00f2n l\u1ea1i c\u00f3 id trong fike sample_submission.csv.","6d101f25":"Nh\u1eadn x\u00e9t: File train.csv g\u1ed3m 2 c\u1ed9t, c\u1ed9t \u0111\u1ea7u ti\u00ean l\u00e0 id c\u1ee7a \u1ea3nh (t\u00ean c\u1ee7a m\u1ed9t file \u1ea3nh trong folder train) v\u00e0 c\u1ed9t th\u1ee9 hai l\u00e0 rle mask c\u1ee7a \u1ea3nh t\u01b0\u01a1ng \u1ee9ng. rle_mask \u1edf \u0111\u00e2y l\u00e0 label cho nh\u1eefng v\u1ecb tr\u00ed c\u00f3 mu\u1ed1i trong b\u00e0i to\u00e1n ph\u00e2n kh\u00fac c\u00e1c khu v\u1ef1c c\u00f3 ch\u1ee9a mu\u1ed1i. D\u1eef li\u1ec7u c\u1ee7a ch\u00fang ta c\u00f3 d\u1ea1ng int64, v\u1edbi t\u1ed5ng c\u1ed9ng 4000 \u1ea3nh, nh\u01b0ng ch\u1ec9 c\u00f3 2438 \u1ea3nh c\u00f3 mask \u0111\u00ednh k\u00e8m, nh\u1eefng \u1ea3nh c\u00f2n l\u1ea1i th\u00ec rle_mask c\u00f3 gi\u00e1 tr\u1ecb NaN (\u1ea3nh kh\u00f4ng c\u00f3 ch\u1ee9a mu\u1ed1i). \u1ede \u0111\u00e2y do m\u1ed9t s\u1ed1 \u1ea3nh ch\u1ee5p \u1edf nh\u1eefng khu v\u1ef1c kh\u00f4ng c\u00f3 ch\u1ee9a mu\u1ed1i n\u00ean s\u1ebd kh\u00f4ng c\u00f3 mask cho \u1ea3nh \u0111\u00f3.","c7194efb":"Nh\u1eadn x\u00e9t: L\u00fac n\u00e0y dataframe c\u1ee7a t\u1eadp train \u0111\u00e3 c\u00f3 \u0111\u1ea7y \u0111\u1ee7 d\u1eef li\u1ec7u c\u1ee7a \u1ea3nh v\u00e0 mask d\u01b0\u1edbi d\u1ea1ng ma tr\u1eadn. \n\nTi\u1ebfp theo em s\u1ebd hi\u1ec3n th\u1ecb m\u1ed9t s\u1ed1 \u1ea3nh trong dataset.","69f7cb74":"b. Hu\u1ea5n luy\u1ec7n m\u00f4 h\u00ecnh v\u1edbi h\u00e0m Lovasz Softmax:","e7a1767a":"2.   Ph\u00e2n t\u00edch d\u1eef li\u1ec7u\n\n    Sau khi t\u1ea3i d\u1eef li\u1ec7u v\u1ec1, em l\u1ea7n l\u01b0\u1ee3t xem n\u1ed9i dung d\u1eef li\u1ec7u c\u00f3 trong c\u00e1c file train.csv, depths.csv v\u00e0 sample_submission.csv","5d62eebe":"# III. Model:\n1. M\u1ea1ng Unet:\n\n    Model \u0111\u01b0\u1ee3c em ch\u1ecdn s\u1eed d\u1ee5ng \u1edf \u0111\u00e2y l\u00e0 U-net, m\u1ed9t convolutional network ban \u0111\u1ea7u \u0111\u01b0\u1ee3c t\u1ea1o ra \u0111\u1ec3 ph\u1ee5c v\u1ee5 cho b\u00e0i to\u00e1n ph\u00e2n kh\u00fac \u1ea3nh trong l\u0129nh v\u1ef1c y t\u1ebf. Ki\u1ebfn tr\u00fac c\u1ee7a U-net g\u1ed3m 2 ph\u1ea7n \u0111\u1ed1i x\u1ee9ng nhau \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 encoder (ph\u1ea7n b\u00ean tr\u00e1i) v\u00e0 decoder (ph\u1ea7n b\u00ean ph\u1ea3i). Trong \u0111\u00f3 ph\u1ea7n encoder d\u00f9ng \u0111\u1ec3 gi\u1ea3m chi\u1ec1u d\u00e0i v\u00e0 chi\u1ec1u r\u1ed9ng c\u1ee7a \u1ea3nh b\u1eb1ng vi\u1ec7c s\u1eed d\u1ee5ng c\u00e1c l\u1edbp convolutions v\u00e0 c\u00e1c l\u1edbp poolings. Trong \u0111\u00f3 ph\u1ea7n decoder d\u00f9ng \u0111\u1ec3 ph\u1ee5c h\u1ed3i l\u1ea1i k\u00edch th\u01b0\u1edbc ban \u0111\u1ea7u c\u1ee7a \u1ea3nh. Ph\u1ea7n encoder th\u01b0\u1eddng ch\u1ec9 l\u00e0 m\u1ed9t m\u1ea1ng CNN th\u00f4ng th\u01b0\u1eddng nh\u01b0ng b\u1ecf \u0111i nh\u1eefng layer fully conected cu\u1ed1i c\u00f9ng. V\u1edbi Unet, ph\u1ea7n decoder c\u1ee7a ch\u00fang ta g\u1ea7n nh\u01b0 \u0111\u1ed1i x\u1ee9ng v\u1edbi ph\u1ea7n encoder.\n\n    Trong ph\u1ea7n decoder ngo\u00e0i vi\u1ec7c upsample ta c\u00f2n th\u1ef1c hi\u1ec7n k\u1ebft n\u1ed1i \u0111\u1ed1i x\u1ee9ng v\u1edbi c\u00e1c layer ph\u1ea7n encoder cho \u0111\u1ebfn t\u1eadn layer cu\u1ed1i c\u00f9ng. R\u00f5 r\u00e0ng n\u1ebfu nh\u01b0 ta upsample ngay t\u1eeb layer cu\u1ed1i c\u00f9ng \u1edf ph\u1ea7n encoder th\u00ec th\u00f4ng tin c\u1ee7a b\u1ee9c \u1ea3nh ban \u0111\u1ea7u b\u1ecb m\u1ea5t \u0111i r\u1ea5t nhi\u1ec1u. Do \u0111\u00f3 vi\u1ec7c ta k\u1ebft n\u1ed1i \u0111\u1ed1i x\u1ee9ng v\u1edbi ph\u1ea7n encoder s\u1ebd gi\u00fap ta ph\u1ee5c h\u1ed3i l\u1ea1i th\u00f4ng tin \u0111\u00e3 m\u1ea5t t\u1ea1i c\u00e1c l\u1edbp pooling. \n    \n![Capture.PNG](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAmYAAAGTCAYAAACCm969AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAHYYAAB2GAV2iE4EAAKpbSURBVHhe7Z0FgBTlG8af64QDjoZDurtLECQlFRBEVPiLhYiilCIgJSAiIIqFRUgj3SUgndLdcRxw3MF17H+eb2dg77jYS\/bu3p8OO\/NN7Ozezszzvd8bdiYNCIIgCIIgCE8de\/1VEARBEARBeMqIMBMEQRAEQbARRJgJgiAIgiDYCCLMBEEQBEEQbAQRZoIgCIIgCDaCCDNBEARBEAQbQYSZIAiCIAiCjSDCTBAEQRAEwUYQYSYIgiAIgmAjiDATBEEQBEGwEUSYCYIgCIIg2AgizARBEARBEGwEEWaCIAiCIAg2QpYTZr6+vti3b5++FD9XrlzBggULsH\/\/fr3FzNWrV3HkyBF9KXF27typjnPjxg29xcyePXtw\/fp1fUkQBEEQBCGLCTOKrblz52Lv3r16S9xcu3YNa9euxcsvv4xz587h8uXLqj0yMhITJ07EsWPH1HJiUJSFhISo4\/B9o6OjVTuP\/+uvv4owEwRBEAQhBlnOYta9e\/dHAik+tm7diooVK2LJkiWoUqUKnnnmGdU+bNgwvP3224nub7B582bkzp0bCxcuVPvZ25u\/7qlTp6Jv375K6AmCIAiCIBhkKWFWpEgRBAcH60vxExAQAD8\/P7z00kvYuHGjGr5cvHixElc5c+bUt0ocvpeTkxO6dOmC4cOHqzaKMlrdHjx4AEdHR9UmCIIgCIJAspzFzFpq1qypXhs1aqQsX\/\/88w8uXbr0SKhZMwxJi1j58uXVfMOGDfHjjz8q0cdj0E+NQ6pcFgRBEARBIFlOmNFKFRUVpS\/FTbNmzbBy5Uo1v2HDBjRv3hzffvstmjRpgnr16iF\/\/vwoVKiQWp8Qzz33HNatW6fmt23bhnfffVdZznj8smXLokaNGvDy8lLrBUEQBEEQ7Ewa+nymhyLJ0S4a7u7uuHrDFy+88AI8PT31tTE5fvy4cvKvX78+fHx89FbgQYA\/zl+8jKpVq+otCUNL2\/17d9C+XRvYObrqrcDFixeVSLQ8tiAIgiAIWZssJczIwm0Xcd3vIT7qVElvSZzDZ\/0wYf4B2NkBfTtUQf2KBfQ11rH7pB92H72CsIhIDH61jt4qCIIgCIIQkyw3lPnwYbCmRiP0Jeu46hsIJ08vuOfyxvlr9\/RW61m89RTOBzlh7X9+CI9IeBhVEARBEISsS5YTZrR6af+qeWtxcLBTX5QdTNp80r8yFycHOGm7uWqv9vZJe29BEARBELIOWU6YCYIgCIIg2CoizARBEARBEGwEEWaCIAiCIAg2gggzQRAEQRAEG0GEmSAIgiAIgo0gwkwQBEEQBMFGEGEmCIIgCIJgI4gwEwRBEARBsBFEmAmCIAiCINgIIswEQRAEQRBsBBFmgiAIgiAINoIIM0EQBEEQBBtBhJkgCIKQ4dm4cSMCAgL0JWD37t1YuHAhTpw4obcAixYtUm13797VWxJmy5Ytans\/Pz+9xcz27dvh6+urLwlC6iLCTBAEQcjQzJs3Dzt27IC\/v79a3rBhA06fPo0uXbpg\/fr1uH79OsaPH4+GDRuqNs4nxsqVK+Ht7a22\/+233\/RW4NSpU5g9e7ZVwmzKlClYs2YNBgwYgIcPH+qtwI8\/\/ohvvvlGX0qYVatW4bvvvlMTP5eQ+RFhJgiCIGRo2rVrh\/z58+tLQPPmzfHGG2+o+RIlSihLWoECBdQycXd31+fiZ\/\/+\/XB0dFRWtg8\/\/FC1RUdHK1H25ptvIjIyUrXFx65du9CoUSO0bt0aX3\/9tdqX\/PPPPzCZTMiWLZtatoa+ffuqiSJPyPyIMBMEQRAyNB4eHoiIiNCXHnP79m0cPXoU5cuXR9OmTbFp0yYsW7ZMWc4SIzAwEJ6enujcuTM+++wz1TZ27FiMGTMGDx48gJOTk2qLj3PnzmHnzp1Yu3Ythg4dqo5FMbd161b06NEDoaGh+pYJ06ZNG\/V67949+Pj4qHkhcyPCTBAEQch0\/Pvvv2oI0hBV3377LV599VV06NABN27cwLFjx1R7QhQpUkS9VqxYUQ0\/0srF4cSTJ0+qodOQkBC1Pi4oFCkGW7VqhZdfflltP2rUKIwYMQJBQUFwcHDQt0wcni+HMvv376+3CJkZEWaCIAhChicqKkoNPRL6gVF4DRkyRC0TWriM4ABa0UqWLKnm46N27do4ePCgmj9y5AjeffddfPTRR2qYlMOj9erVg5ubm1ofF8WKFVOWNUKRxgCC5557Tvmu0XLH5StXrqj1CXHhwgXMnz8fw4cP11uEzI6diYPdWYg\/1hxHQFA4PuxcTW9JnNW7LmDBHl84uTigScls6N68nL7GOob9uhNhrtlx\/PQ1LBvRAo4OoocFQRBSAw7xMSIzZ86caniQr9myecLv9m1l0YqMikT1atXxTNFiyl+MjzxasujYnxi0jt2\/fx9t27aNIcLOnj2rhiYt\/dbiYtKkSWoY9dChQ48sd4SCjAELgwYN0lvih8Oeb7\/9tvqc\/HzdunXT1wiZFRFmVpBSYfbpzztw4kYQbt99gH+ndoK9vZ2+RhAEQUhtQiJM8H8QjgK5XBAeCTwM0gRbNhe59woZAjHdpAPUvvf8H2q9t3DYyX1BEAQhTfngmw04dv4m3v5qPZ7ttxD\/m7odr325Vl+bNCr\/bzaaDlyO179cp7cknaMX\/FD93fmo1Wchthy8qrdaz\/p9l\/Dv0Rv6kpDZEWGWDmT3cEXDuuXgU8hbE2aizARBENKSovmzo0WtoqhZJh8K5c+BMiUKIHeOxFNkxEWOHJ6oU70kTPbWO+vHJigkAuVKFULVikVxNyBYb7WeM9fu4+BZSWibVRBhlg5MX3IAEeERuHHrHmas\/E9vFQRBENKCqGizh05kVDRM2nx0VEo8dkyI0o6Tki41++PMY8bJPhmdc0cHOzg5yuM6qyB\/6XQgOCxC3Rx4PYq9TBAEQRCE+BBhlg50b1Ye0Zoqy583J15rWV5vFQRBEARBiIkIs3SgQO5ssLfXvmo7wNnJnGdHEARBEAQhNiLM0oE1u88zLwl8fe9j4ZbTeqsgCIIgCEJMRJilAycu3YEpOhom7b\/AoDC9VRAEQRAEISYizNKB+hULwWRnh1y5sqN9g4TLgAiCIAiCkHURYZYO1KtYGHb29nB2ckCenMnLpSMIgiAIQuZHhFk6cOLiHZUq4\/79IOw8el1vFQRBEARBiIkIs3Rg9e5zMEVGITQsHCev3NNbBUEQBEEQYiLCLB0oU8Rb+Zh5erihask8eqsgCIIgCEJMRJilA+0alIKdvR08PF1Ro0x+vVUQBEEQBCEmIszSgRt3HsDezh6hIeG4dDNAbxUEQRAEQYiJCLN0YO7GE4iOjERAQBA2HristwqCIAiCIMREhFk64O7qhOhoE1zdXFC6cE69VRAEQRAEISYizNKBPi9Wh4OTI7y83NGoqo\/eKgiCIAiCEBMRZulAWHiUymMWqb1KSSZBEARBEOJDhFk6MG3RfkRHRuGufyAWbj2jtwqCIAiCIMREhFk6YmdnB3uazgRBEARBEOJAhFk68EHnmto3bY98eXOg1wsV9VZBEARBEISYiDBLB1i8nNYyRmYKgiAIgiDEhwizdGDW2qMwmaJx+\/Z9zFj5n94qCIIgCIIQExFm6cDt+8GAbi0TDzNBEARBEOJDhFk6wFqZ0Zoiy58\/F3q1Fh8zQRAEQRDiRoRZOlDaJxfs7R1g0v6zd5CvXBAEQRCEuBGVkA5sP3IFdpoou3MnECt2nNNbBUEQBEEQYiLCLB3Yc+IGTFHRiIqKwu2AEL1VEARBEAQhJk9FmPXq1QtffvmlvpT6nD9\/HpGRkfrS06dR1WdgsrNDDi9PPF+9iN4qCIIgCIIQk6cizCjK3nvvPX0p9SlZsiQcHR31padP7XIFYGdvD1dXJxQt4KW3CoIgCIIgxOSpCLNvvvkGc+fOVfNVqlRBWFgYGjRogNy5c2PSpEmqnZQvXx5BQUGoWbMmChQogHnz5qn2kJAQeHh4qHkDHsfX1xc9evRQy15eXjh58qSaf9r8d+427O2Ae\/4Pse3wVb1VEARBEAQhJk9FmB05cgRnzpiLef\/333+oXbs2Ro4cicWLF2PAgAHYu3evWkdhVatWLUyZMgV\/\/PEHXnnlFTVM6ebmhuDgYLWNAY9z584d\/PTTT2p5xYoVKF68uJp\/2mzcf1EVMQ8Pj8DZ6\/f1VkEQBEEQhJg8FWHm5OQUY6jxq6++QrNmzdC4cWOUK1cOJ06c0NcAEydORMOGDdGyZUtlDRs9erS+5knoV2ZY0ho1agQXFxc1\/7QpkDsborVXTw831Cidz9woCIIgCIIQi6cizGJTqFAhfQ5qWNNStBUtWlSfM29Hq5g1hIeH63NPn1ealYe9gwM8PV1RtVRevVUQBEEQBCEmNiHMmEYiPmhdM+B2zs7O+tKTsFC4LRIYFKZ8zIK010s3A\/RWQRAEQRCEmNiEMEuI77\/\/Xp8DZsyYgeeff15fAkwmc\/3J48ePq1dLS1tCAi69+Xn5IeVj9uBhMDYduKy3CoIgCIIgxOSpCLOAgAA8fPhQXwIiIiL0OeDevXsq6tKA4osii9aw+\/fv4\/3331ftL774Iuzt7dXwJvOiFSlSBA8ePFDrCLdfunSpvvR0yeHhqnzMnJ2dUMDb09woCIIgCDbCxx9\/jFOnTulLyYPBeR988IG+JCSXpyLMZs6ciS+++ELNHzp0CBUqVFDzZOfOnejSpYu+BHzyySdKrO3fv\/+RhYwsWbJERXauX79eRXGuXbsWlSpVUuu43Y4dO9ChQwe1\/LTp3b6q8jHLldMTL9SzjUhRQRAEIfNy4MCBR9kPDHbv3o3oaJoJzDDzAY0kgYGBmDx5snr+hoaG4urVq7h7967ahs\/S2PvQSGJw69YtXLp0Sc0zWG\/Xrl24du2aWhaSx1MRZkxjkT9\/fjVftWpVlf7CgFGZOXLk0JfMFjRPT0\/UqFFDb3lMqVKlHok67ufu7q7mCfOi2YrPGU+DZxIZFR3jBy4IgiAIqQmtVnz2tW\/fHmXKlInxHKxXr54KsDOoX78+Vq9erXKLElq7Dh48qJb79++v9n399dfh4OCgRBvhPgsXLlTzhEaW\/\/3vf+pZzXRVFIQffvihvlZIDjbtY1a5cuUYoi2jMnneXpg0QebnF4DfVh\/TWwVBEAQhdWHlG+b9vH79uho9ovHCcAEiFFkGuXLlUhkMjBEsDmVSeNEYMmvWLLX\/hQsX8Ntvv6F58+ZqG+5j+Vzmtlxm+4gRI9CpUyeVk1RIPjYtzJiItmzZsvpSxiWKQ7Da5OhoDxcn2ykVJQiCIGQ+3njjDX0OGDp0KDZu3KgvJQytXoTDme3atVPzhFaz2End44LDopY+4kLysGlhllno9UJlmOztkSe3F15rWV5vFQRBEITUI678nRyOtBRLlkObltYzSyz9uWPDtFWWx7ClutSZhTQTZvzD7du3T1\/K2nh7ucPe4ocsCIIgCKmNkSbK0o\/s3LlzKFGihL4UM2\/o2bNnY4gzV1dX9co2OvUbGIEAhHWrLa1nHOq0FGeWuUeF5JFmwoyKm3UuBeC3lUe07yMaN2\/544814mMmCIIgpA0sXUh\/L+b3XLNmDYYNG\/aohjQD65hqilGTHTt2VG2WAWnLly9X1jUKtKNHj6oggIsXL6J06dIqmIDQ95vO\/adPn1aRnAwEYOoqwuc+gwdSmnYjq5NmwowRkqx5SdMqfwxMd0ErmqHIWaycy7F9yMaNG6faOVkmkyVMf2HsQ\/+zKlWq6GuAvn37Ptrvyy+\/1Fttg3sPQrRfv0k7N623or0KgiAIQlpAp30KpxYtWqjISqbIoLAiFGS+vr6oXbs23n77beWs7+Xlpdb9\/vvvGDVqFNatW6eWu3XrpnKMVqtWTdWqXrZsmWqnyOMyIzx5LKarKly4sFo3cuRIZT1788031bKQPNJMmFF1U4nTrMmEslOmTFFquk2bNko8sQYmlxk5MnDgQLUPw3Y\/++wzJea4zt\/f\/1FOMzowrlq1SjklMuKDaTYMKPJ++OEHlVuF78VtZ8+era9NnF9+OaAd86S+lDTOnbuHL77Yqi\/FzYuNyiBa+8x5vL3Q5TnzBSIIgpBZ4X399u3b+pLt0rfvaty7l3xn9QULjmPt2nP6UvL5fPNmHEvF74vGCf4NaLmqU6eO3gp4eHgoi9aNGzfwwgsvqGjMtm3bqnU9e\/ZUSdppSQsKClJ\/v8GDB6vn6vz589U2Bn\/\/\/bcKFBg\/frwaGZs2bZpqZ4Qmhzb\/\/fdftSwkjzQTZsSwYBFDKL322mvqlRYuQkX\/33\/\/qXn+UCjImKBuwYIFKhfZ4cOH1TompeWPwcXFRYX\/Dh8+XIk0MmnSJDVP5Z89e3YcO3ZMKXdr2bz5Ejp3\/kE718+19zmit1oHL+qRIxdp+w5Anz6r9NaYFC+YQ5l6HRztkd3DRW8VBEHInNy5c0e7r25WVhaKAFvl++9XwNt7MFq0mKU62Ull586raN16qnp2zJuXfDeVsf\/8g0pjx6LI5MnYZQPJWRldSSOH8HSw04RQmoytUZBRIFFEcd54Gwo0mkuNjMS0djGTMK1hHPrk9rSmMYs\/HRPpzMhhSx6DY+bly5ujGincPv3000fJ9OIiro\/2x5rjiIAJhSKd0bX7Yu2idNd6BgzxNaJZ2HtyxNSpHdCvn7mnsXbPRczbdQtOLg5oVjo7uj5fFk5Oo1GwYDZtvwj4+bEUFDUujxGIDh0aYtasF5Etm1mENeu\/ENWqlcG23ScxpFt1vNiolGpPayhw2QMyxv8FQRDSGt6POeoRGRmp7sEcDqMzOV1PihUrpm+Vtoz8fRdG9KqH75ccwob\/\/FCyeAFEBN7D1L6N0bv3cixdekrdny9dolM7nd957w6Gj08RzJ\/fBfXqmYfmSKOP\/0bd6qVw69otzBzSDOvWnUenTvORO7e7JkCDERRkONrz2WGPr79uj08+qW9u0tlz4gamrDoHdzcXtKmYEy89VxqTd+\/GyK1bkcvNDRf9\/c0b0jE\/OBjZ8+TB9DZt8Kpezean5f9pTy0T3m3\/2H0nLaHjPx38mQxeSH+eijDjuDYFFbEUZtyWdS\/ZRmg+\/fzzz5VAo2\/aP1qvwjDL\/vjjj8pSxnU8Poc96dfGmwDNtfFBYRat6RT3Oya80uMPrYXVAijsLMULnSFpjYvEe+80RatXy2DpoTtwcLJHszKaMGtaVntPZjY2j82bL2xLeJE\/QP36VbF8UVdUeO9PvNqhPv7ZcxLvta2IN9uaL7a0hj1WltoQYSYIQnrCezInA0OgMSKQCVDpimK5PrVJSJi1afMXVq\/mKA0jGGPfuyO1KVh73uTSni8t0KdPrSeE2bJlp9Gx48\/adnzOxP\/s6NKlLubO7aSJUvs4hdnwLVswes0ahkJqh9COYfl9UKAxxYWzMyZ3bIucfl4I1YTuO+0r6xsImRmbfWLzQmZSOw5dkmeffVYNXxq89957ajybMEiApSRoXaMo4\/Ao\/cwSwiwUeRHFVSLJ0KoOePgwTJvCY1wzZox9Y+taLnNywIMHYQgOiUCNMvm1FjvkzOGJFrWfUVulB\/yM9PPjq0wyySRTek6WGMu0nNGa9jRL00VFGffu2Odg3LvN5+riEneOr2gVwGXsb972McYynx3haoqPaH4n\/B7i+i64TpvstedfYFgYwqMfp7gQzFDkW9bszEykqcWMToY0X\/NiNN7m559\/VhYxWnIII0NoWWMdLhY0r169umonNKXSCsY21t+y7GFNnz5dhfLSYkYoyCxzq8T3sWgxC9cuhHIe2TFg8AZ4e7tp53kTvr4cjuQFEgInJy+MHt0Ugwc3UPus23sJc3feVEOZz5fOjm7Pl9V6fD8iXz5PZco+ePCqthU1rtnnrVu32vjtt\/ZwczPncxk7ay\/umVxx+vwNrBzZSrWlB\/TPYxBGWvZMBUEQLKGFnvd33o95H6aljPdxRgbSWpYeJGQxGzZsC7ZuvYjs2V2xevUJbWvm4KKACkXlyqXx66\/tUbNmQR5GEdtitmvXNXz44Ro1lHn06G1cu8ZhSD5vnnx2GMRlMZt55Ah+2L8fud3csEp7jqlnlvZdcSizQOHCmNG+PV4oZXZ7Se+hzPRm0KBByi88sRKMjABlQAONNsz0wMCDNJIwT5U0E2Z0HuTFyIuUfk7ZsmVT7VS5dNQ3hhsN87aRRoMwIiSh4UjCKExORuAAoU8DSSgTMYVZQFA4PuxcTW8BunZdhAULtqBAgeKYMUO7GF6I6QO2etcFLNjjq4RZk5LZ0L15OX2N2fmzQYNx2lxOjBnTCkOHPmteYcHbEzfAq0AB7D5wBlPera8saIIgCJkVdgrpM1ywYEGUK1dO68Tm09ekDwkJM0vs7N7R\/vXAK6800J4nbeDl9fg5ZBBbmFnSt+8aFUBQqlQ5TJ7cCm3axO0\/HJcws8RuxAjA3x\/NNaFB37KSuXLpa8z8uNwclJYUYUZrElNVxQWflXE9J+nwb6TPMJ7D7NwbgslyPbHmOAYU6wzOI9QAls98Gg\/o12b5O+H7chTMMgEuU3jwuEZettjwfHgsy32oMVTwndaW0HdiS6TZUCaHGQ3fJkOUEX45lqKL6TQs\/0AkLlHGqEx+4czR8u2336JPnz6YMGGCvtYMfyAJibL4aNeuNA4dGoYbNz55QpQlRrFiOfDNN69rqn1snKKMLNxyEtERkdoPLQyHz\/nprYIgCJkTZodnQtLnnnsu3UVZUhg1qrv24P4af\/3VKU5Rlhjt25fGgQPDcObMB\/GKMmsYpn1PEVOmYP1rrz0hypIKU1PxWZkzZ071yvxkBkwOyzY+d2M\/K9lO0cJXjkj5+PiodroKff3114\/WMyDAyEvK47z66qtqO2IE4xnHoSXMgIJq\/fr1qp1Cj0F+hHnSSP78+cGkthzm5jY07PAcDYHHRLb0O+eoG9+TFQ24nQHPxfhchgsUoVZgSi5qD+M72b59u77WNrFZH7PY0HS5detWJcwYKMD51q1b62tTRo8elVG1avKsWAUKZEP\/\/nX1pbgpmt9LDZJ6erihbJGUXXSCIAi2DsWY4QNsywwb1lh7kCf\/MdiiRQlUr15AX0o+o5o0gaNuyEgp9LHmQBgnipz\/\/e9\/qp0uRExjYqx75ZVXVIoq8vLLL6NRo0aP1r3\/\/vt45hmzPzStnqweYKxjJQD6cBvLf\/31l9qOcKia4slYN3HiRBXcZ7B27dpH6y5fvqyGJenCRNjGbAxvvfWWElLGdjTU0BjDnKacOOQ5Z84cZdEzYGqtZs2aPdqHCXSNygYUfKxQwJE5rhsyZMij78RWyTDCjDRu3FgpbmYm5nxGoXOTcrDX1LqnpysaVCqktwqCIAhC6sIRKFqh6I9F6xDFCOHw37x589QyAzAodliyifB1zJgxap7QTYjuSITDjgyus8QyEI9Q9FD0EYo8QzS9++67KgmtAf3CLTFykRKeE\/n111+V7xhLR7Vr106dx82bN9U6HtfwT7eEPur8bAbffffdo0oFfA+jnBRhRDDP15bJUMIso3IvMAT2dkBIaARu3jH\/2AVBEAQhtaFvFssxtWrVSgmzsWPHqnYGY9CgQRcjDvWxnqYBxY+3t7e+BLXOiJw1rFCWGL5iBhwmNBIJ8z1pLeUr01rx1cAQXwaW6wyaNGmixF3Tpk2VZatIkSL6moSxPCfLYVqeu6UQo89ZXO9rS2QIYcbEsgb8QvnHZTSmZa1MW+b31f8hOjIKAfcfYtXuC3qrIAiCIKQ+9L9mySSKEuYCJYyKZQYEQ2gZE6EQYwknAz5zY4sbS2KnO6Hwof8aiX38P\/5gvtDEoX8YoZsS96OVjlYzOvRbOvPH9o0zYCkoAz8\/vxi+7TxeRsLmhRnrdTGHmQEjfRipQZOmZUSmLeOg9VD4w3B1c0aRvDF7GoIgCIKQGvC5SOMFnej5zDl9+rS+xpySomLFiioykUKqfv36j4wbXbt2VT5Z3IfijdV5jCA8irDYQiy20DEyItBRn0niCYUSz4UVaAxi72e5TGd+Awb7EfqbMVqTfm2E1i4WYieWYo0+cWXKlFHnwc9HqxvrhZLY589543xtFZsWZhwbphMps\/ob+c3o5Ediq2aaTBnlUaJEiUdjy7ZC\/661YK+dr1d2D7SobY5EEQRBEITUhGJq06ZNyvmdQ5YUXjt27FDrKJi++uorFZnI5ycjJ1nukDAKk89W7kMxtGHDBmVxIxyWZISkAQ0jsYcCDeFDUWRES\/JZzMCAevXqqXXEUiBZHoc1tGnRo7WMqVbeeOMNtY6fgzlMeRz6p\/H86fjPSFGeP49B6FP25ptvKqsbPx+DFYx63Dx3y0AUDuNyX1smzfKYpRY0wzLcl9XqKbz4x+Ip09RK9c\/5qVOn4qOPPsK2bdvUelrYOG9paTOIK49ZYiSUx8wamGDW3+SGY6evYvkXLeHsFHdGaUEQBCHlWJvHzBoSymNmLYnlMUuM5OQxSwpMc0ErGsURoXWNKTFY1k9If2x+KJPhs1S8Rs6TuKAo4\/g4hVjDhg1VhAZVv63wy\/LDgCkad+4GYNa6x\/5ygiAIQvLhkJ1h2SEqes9kTiiaHDiMxxxXe\/bsUUlSkwOtQkbkIA0I165cimFxSgwO3REO2fHzETtVkzPtCAsLU0OBdLhnRCTTXDA1lfB0sHlhxjFlS\/NnfDCRIfOuUMAxxNZybP1pExAUqukyk3bDUP8LgiAIKYRpFSikmNrB8GNizqz7mlBLjjDj8BfzanE4jG4006ZNw41Lpx8Nl1kDBQ7zZDEVxW+\/\/aaeQ0zvtPWfbVYdh2koOGz3yy+\/qJxfZ86cwdzZf8LNPeFSRSmlfPnyavSJUZA0dHC+UCFJ7fS0sHlhZi0cd6Zv2eLFi5XFzDJC42nzdvtqMGk3ivz5c6F3W3PkiiAIgpB8OPTGJKlMdkpXF6ZrYCReckQZ\/Zq6d++Ozp07o27duiqtBN1o\/tm2DY6O5mhBa+Czh8KM+zJ7wEsvvYQ333oH\/tfPws4+YRcWWsiYNP3jjz9Wn613797o1KmTvjZ96NGjR4xM\/sLTweaFGaMnYpdsig19zTgWzsRxNWrUwO7du1V1AFshu4eL7uQo9jJBEITU4O7du7h06ZKaZ1Z7OrDTmd0yWs9a8ubNq54bljDozEGJKevv23QqZ2JXDkca5xYdGYGwaAfYJXIcZqhnpgHmIaNhwYgc5FCtnV2msaEIVmDzf22KLabIsBRnNLNaJqrjODx7KbwoODGig70fW2Hh5pOMsoCv730s3GI7Q6yCIAgZlU8++URF7Bkwcz0j7liH0Rr3F0tYdoiO71988YVKs8CyP8wk\/3KP\/8XITp8YzLjPyMQVK1aoZxKd6CdO\/Aqt2734RHLV2DBSkkYGDs3S4sb6lIMHD1bPsvCwMH0rISuQIYQZa2oZFyB9CWh9Kleu3KMaW4RijZGYdNzkvGVW46fNlduBMGk3CpP2X0CQXGCCIAgphT5bLKi9cuVKld6Bw5lMu2DvlHRhRox6i6wZ2bx580dlfJJ6LO7HGpQ0EnBYkMOjuXPntuo4TNLKADZmsee5tGzZEjlz50NUEs7BsoYkrW\/WQDFpCX3ljOMkJiiF1CdD2EdZkqFChQpqnuP\/hBY0ijZL+KNmFKet0bxWMVXEPHduL3RvVtbcKAiCICQbOv\/TL6tUqVI4ePCg8i9jYtTkQl81CqIHDx6oKH+6xxw9sFNZ4ayFAocRjRs3blQWLwqjo8eOYtmyFVYdh\/vSR46BCNyXlrzvv52srIDWUrhwYRV4QAMGo0HppzZ79my1zIm5wAw+++wz1cbcX3z9+++\/VTu\/T+YOpUjleXPdn3\/+qdYJaY8MXKcDVUrmU34Pjg72cHe1PsJHEARBiBuOjDACn2kemOmdAo3O8\/fv+ibZz4w5u5iglJ17HoPpLmh9Y5Smg0PcJYDigsdhVCPdaVh7koaEji92RmTgDSARPzH6pHXo0AE1a9ZE2bJlVfonvubPn0\/7rNZbzCjMWJKJ3w+nJUuWqOAGztOHjcOjBuPGjXu0Hd+fwQqEApURoRzW5Tomje3Zs6daJ6Q9IszSgfV7zyvHz7t3A7V5s0OoIAiCkHxYlJuCg+KJw5mEUfk5vPMlefiRIy0LFixQNZj\/+ecfJezou2x2urfe+d\/Hx0cFnvG8mLqDudAunDuDEJNLos7\/TPXEz0EXHQYxcGiW4ujWLV\/9PKyD3wt95Cwx6mXSh80Siq5+\/fqpYVPWpjRgVCjhsCphFn\/C71pIe0SYpQP\/nfdDdFQ0IiKjcNXvgd4qCIIgJBcKCgof1lH89NNP1XDfwIED1ToKjqTA4TomJWcGfEZD0jpEq1Hn7j2t9tMitN4VK1YMvr6+ashwxowZyi+640udERaWuK8WywhRWHFf+nhRpL3fr3+SzoHErgVplCRiXlADc7SnnfoO+dkNaxmJ7\/vjuQlpjwizdKB2uQJaX8kOObw80KBiQb1VEARBSC7052JqCg4X0vmfEZC0MCUX+qsxMpJ1GH\/66Sd1TELxkhS4vSGEKO4YBBDNBONWwBQdhiP+w4cP9flI7ZiqKdnEZUEcO3asKlxO3zEWMWeggUF8ueDo8yakPSLM0oFnqxSBnYM9XF2dUfYZb71VEARBSC7Mjv\/uu+9i4cKFysmdViYjUj+pSWYpiJgclkORTHPRtm1bNby3bOHsRPNoWsJM\/7S6GQ78dLznEOXaVcutyvxPfzBmHKBTPv3LKJx++O77JJ0DrWWxhZhhAbO0hHFYc+nSpWqezv4vv\/yymue+rH5AKHYJfdEIc60JaY8Is3TgwvX7yr8gMDAYB06b66AJgiAIyYeWKEZiUmAY0fjMI3b39o0kCzMmdG3RooUaimQpIk4UVOahP+vNVVevXlWirl69esq6xLRNFSpVgUPkQ5rS9K3ihs73LC3IFCDMRMAySfny5dOOkTNJQ7P8XmJHgBpCzVKw9erVS4lPWvhefPFFlWqqfv36yr+O583j8LvlepaKYtoqIX0QYZYO\/L3tNExR0QgOCcPhs356qyAIgpBcaIGitYxiggKGEYfLly+Hd96CT\/hYJQYrxvz888\/K78pwgmetymzZs2uiyPpAAh5n8uTJahjyvffeU0Jo8aIFcPDMAyRyHApBBi+wtBQtgYTF1AMDHyhxZC0MHODQpAFFnZFug6+WIo\/DtVw2RBcDDrjMYvAcRn399dfVMgUqxaKQPogwSwfy5nRHlPbj9vRwQ8XiMpQpCIKQUpiSwjKXJf3DRo8erS8lHdaotHSypyBp2baT1mZ95n\/mA6OYMaoF8DW\/Jhrbd+iokrYmxogRI2JUGmDajrfefR\/BwUlz\/k8pSRW2QuoiwiwdeK1VJThoNw0PT1fUKS\/Ok4IgCKkBc5cZcOiP4iy50OrGIUwD5jMzY\/0wIuFQJDP9E\/q+NXi2sUpaaw3cnvsbsAIBSYrVLjVgeoy\/\/vpLXxLSGxFm6UB4RBTs7e0QFhKOq7clXYYgCEJWwtnFeud9W4D+Za+88oq+JKQ3IszSgW8X7UN0RCTuBwZJgllBEIRUgk7plsNuU6dORaC\/X5Iz\/xMmlGVyWAPWiJw38xe4ubnrLdZBJ3pWADAIvO+PNYtnWiXO6F82ZcoUfclcs\/KrcaPh4WFOvyFkDUSYpQMuzo4wmQAnR0fkyp6xek6CIAi2ChPLUpwxTQbnGdWYPWeeR5nrkwIjO+nTxSAAOtCzdma3bt0QkcQi3iylRGHGupPbtm3ThNZk1HmuLaIskrvGByM5GSn5xRdfYMeOHcpnrn\/\/j2P4nQmZHxFm6UC\/TjVh7+iAXN7Z8GKjxz4RgiAIQvJhlGH37t3xww8\/qPJBVapU0dckDw7f0el\/2rRpqqA4nLMhMirpjvCMqjx+\/DgWLVqE4V+MQp483oiKtk4sMkVFhQoVMG\/ePFWBwMnVQxOa4oyflRBhlg7QdVRNVmZ\/FgRBEBKHGfoPHDigrFzMXUarGUlqHjNCqxRrSjLBK0spsdj3ySN74eIcMydYYtDq9sknn6iErWPGjMGQwQNw7MhhODqak7YmBC19TOrKQuTfffcdNm\/ejLmz\/4R7EodThYyNCLNYMP8Mx\/lTkx\/+Pgg7UzR8b9\/HjJX\/6a2CIAhCSuCwIdNmEEZRDhgwAFHhyavneOvWLZV7rFGjRmp5woQJSiiZkhiVef36dVVEvHTp0qok0\/gJXyM6PEhfmzCM3qQgZIJa8vbbb6NBg\/oIt2IYVMg8ZDphRmHFXhPLcxh+Bkw8yCkhmL+GvSU6j9I3gOU02GMxk3ByP+ae4Xuy58ZyHsyHwyK2BsFhEcpaxsjMJF7jgiAIQjwwRYYl3t7ecHB2f6IkkTUwwatlugxSsXo9FQSQFGhxM2plGpSrWgeRkYmLK0ZD8jNYUqRYKav2FTIPmU6Y0aTNul7vvPOOElrEmgidWbNmKbMzHT7ff\/995XTJjNL\/HT7wqG5YXNBBk6Ut+J7r16\/H+PHj8c0332DlypX6FkD3ZuURbWeHfHlzone7ynqrIAiCkBWIttK\/TBBIph3K9PLyUmP1LAZLYZaYz0Fc61mHjRE51lbDiK9sRsE82eGgji\/mMkEQhNSAw35ff\/21KmNksHv3bgQF3ktWuox9+\/Y9ivLkKwMKiJ1d0h6TLBNF3zeeH58\/48aOQmhYmFV+b3v37lWjPfRTY\/ABhzXv+N6AkxX+aULmIWm\/uAxAy5Yt1Y+ZsDwGfQaYFyaxjNAso8H9eKFzCJMWM1b6r1Gbpuz4zciMBPr111\/VBUjfBA6BUhCykK3BX+uPaf+acOuWP+ZtPGluFARBEJIN79O8b9NRXkVQajDvF11YklJbktCvmO4uHPkYNWqUeuU9fOmCWXBzsz7F0eHDh1X2\/nbt2ikftS+\/\/FJ7rgzB2hV\/q9qeCcF8bEyzwREb7vvRRx+p1\/nz58M5VlFyIXOT6YQZx+f5Yzbw8fHB9OnTY5S5iIsLFy6o\/SjkOnXqpHpMhsBLzNJFEccLkEOfvCA5HMryHgY37j5URczpqhYUJmHPgiAIKYX+WHnz5kWdOnWUs\/wff\/yBXLly6WuTBn2CGUhgCZ8doaGsb2m9yPP391fnwnxkFIzE3tEZLvYMIkj4OAw+qFatGjw8PFTBcMOFhp8pvUsyCU+XTCfMeHHSFGzpsEkTcmK9FfqK0SeNETUFChSwuuYaK\/DT4Z+9NIZIBwcHqxw4p0+f1rcAWtctAZPWg8uVKxva1y+htwqCIAjJhYKFoxWEIxd58uRRQ4gJ+QTHBwURnx2rV6\/Grl278O+\/\/ypf4SpVKmv3dus70+ycs4NPi1tERASWLl2KX3\/5CTkLlYIpET8zCrk1a9aoADTu+8svv6hRGyHr4fAFUwxnIs6ePYu+ffti8uTJKhs0fc1oWjYu1sPn\/BAWEYW65QuoZQOasRlNuWXLFsyZMwcuLi4qr413Li+cu\/4Ax689hIOjPYrlckGlEnn0vcyCrkePHsq3oXPnzioih0OaCxYsQK1atdQ2p674I9TOGfcDgvBW63KqTRAEQUg+TMTKSEommSVMT1GzZk3kyOmNrYeuonHVwth38hYu+AYjV85siA4LQevaRdW2cfH888+rIVBO7Mi\/8MILyF\/oGcxYfQyFC3jjYeBDvNgw4ZEXduhZeJxWM05MVlujejXk9SmNLUeua88hR5TO64ZyRWNGXho0adJERZrSekehRj\/nJk2bYfex62p9zTL51auQucl0FjPDUsZ8NiyncezYMRVteebMGdUeH0a9NYqrsWPHKudRltM4pwm9hBxJy5YtqyI6eTGxp8V0HevWrYsRdr3r2DXYaRfo\/ftB2HnUfIEJgiAIyefy5csqCp5uJxyt4IiHkYOSgiip8H7\/+++\/q4z7tFz99ttvqj2pzv\/ff\/+9spjx\/NjJ\/\/7773Dz5i2rAhL4nnxeHTx4UAUf8Nmyc\/tWuLiKj1lWItMJM8sfP\/3N6C9G\/y\/2phKCljVL2Nvp3bs3SpYul2AOGfZq2EPiBU2rG4cx2ePq0KGDvgWwU+vtmKKjERoajhOX7+qtgiAIQnJhuSO6rVAENWjQQAkado5JUjP\/U9DRz5idcvoMV69eHa+++ir+np80539GVXKkhEFgfCbwnIZ\/MRqb162EYyJDrHSLod8cPxOFIQezeD50i3GwT3qUqZBxyXTCjFE6BrxItm7dqiJ1EsNSSB09elTtd\/du4iKKPmUMLGAkZr9+\/dCiRYsnRGD5orlB100vL088V9XH3CgIgiAkG0s\/YHaGeS9mRznk4X21nBTu3LnzyPWEnXvWuWTW\/pCQYNglwfmficrpuE8osgyc7PkEsP44ST1\/IXOR6YTZjz\/+qF6XLVumekCMcGFm\/sRgbTTCcGU6fvKipPMnEJVg74s9NPa2mLOGIdu8oFatWhWj0gCd\/+0d7LWelxNKFs6ptwqCIAjJhQ7\/7BBzKDMgIEAJs3PnzsHNM8ejqi\/WUrlyZWWB+\/bbb9Xx6G\/GYcWqVaslqYh548aNlcWL6ZMoEpmqadzY0ShWrjqiEzkOhRyNARyWpa8Zo\/t5nDJlSltdAF3IHGQ6YWY4gl67dk35mLEX9L\/\/\/U8FAiSEsR+tbO+++64yZfMC2b1zZ4LFZxlUwOAC5q9h0AH3Yx4aijuDG3ceqASzDx6E4tiFO3qrIAiCkFxq1KihxAuHMnv27Kk6yP3799fXJh124HkcHo9BXKzBWb5qbatGXCxhh57uM\/RXphM\/nwu1a9dSkZaJ8dZbb2HSpEnKlYZDqhyFqf9sExWIJmQdMp0wo+WKljJi\/Jjp1GmZVywuePExQIAiyxjCZIQmk9QmlkOGNTLZQzPE34kTJ2L4rP214TiiIiIRFByCPSdSt0C6IAhCVmTu3LkqPQad9WmlYqojCrXkQusUgwl2ap1xvjLR7IVTR+DsnDTHe0b38zz++ecf5RJjzhBw2Ko0HnzfgQMHqmh\/+qfRT23zhjVwdTUbDoSsQaYTZjRBU5gxjJrj\/XSczJ8\/v0r4lxA0HV+9elXlwqFIozgLCgpCmXIVE+zpMBqTvg6MxjR8CtauXYvu3bureVIodzZEmUzaxeWCUjKUKQiCkGJ4z+VQJlNK0FG\/devWaNOmDQLu3bYqAtISup7wnk1LF11R6Lw\/cuRIVabJ2pyWhGKM50SnfRoEOOoy\/ItROP3fHtg7JHwcJrllug+6xGzcuPFRaSgKzqQGMwgZm0z3165SpQqaNWumLlBau8qUKROjPFJ8cDuKOu5HEceITstAgvjInTu38ivgexjOo+wxWfJK8wpw0C7uHF7uaCTO\/4IgCCnm3r176pX3Xd7rCQWWV648SU6X4enpqdJbEA5BGoSEhiIpfviurq6PUna0b99evZLIqGjYawdKyKmfoywUYeTFF19Ur4QCVGIBshYiw9OB4NAIODs5IDw8Ev6B4isgCIKQUt588001hMmyTHRBYeCXOSKScZRmYeboYA87ezvYOySsbBhZz8CBPXv2qCoAhOmSXuvRQxUgd9COY43UY3koBp6dOnVKGQmYAqNf3z5o1LwDLl7zw9Vb9xEeGbdrDEUdE5tzxIX7EnMgQFNNIIYhIp79hMyHndazSHomPhuHPgd0\/Ddgsj5euEwG+8ea4wgICseHnc0XnyULFy7ESy+99MgMzt6L\/93buBmeG3N2XIOTiwOalMyG7s1jZu\/fvn27Ch6gGZpwGJSlNOjISXK0noYGNbQL\/+JtDOhWA2+1q6zaBUEQhNTnzfHr0fX50li09QyOXApAvrw54O1iwu9DWuhbWE+Nt+fCy8sDBXM4Y\/bQVnpr0tnx3zWVMKN6mfxwc7F+eJRsOXRN+9eEJtVkxCUrkCmFGbP9\/\/nnn2qMnrXK\/Pz8VKV+jtMnJMxYRJZ1zjiuz54Tnfq\/GD4Ua\/ddx7xdN+MVZoS9NQYYcAiUmf+ZhdqI9Hzp8+Vw8\/LC+cu38dNHjVGlZF7VLgiCIKQ+HKXwvReM3DncEB4RhaioaGTzcEmyIBKEp0GmHMpkDTWGPL\/33ntKjNHnyxrnSQYJMIKGjp+M0FRlRO2dEB2duAmZKTaYlJC5cOj4aYgyQiFWsIA3vHNlE1EmCIKQxri7OqFYQS9kc3eGt5cb8ubyEFEmZBgypTCjxYxWL9YaYxqLn3\/+2aqEg7SYMQ8O88cwez\/FXWIJZklgYKDyBXj55ZdViDOFIM\/BgL4B7LFFR5uUE6ggCIIgCEJcZFphxpBjhlEzspKJCM+ePauvjR\/6in399dfKmbRdu3Z47bXXcOy\/\/xINvaYvGkOrKeaMigFGxJAgCIIgCIK1ZEphZun4TyjM6PifGF26dIkhwlhSo2LlaolmbGaWaIZbW9KoUSN9ThAEQRAEwToypTATBEEQBEHIiGRKYcaSSKyVacD0FUaZpYQ4evSo8kdjAMCCBQtw5451dS2Zs4ZRnGTFihUqKlMQBEEQBCGpZDphtnz5ciWSFi9erBL9EZZa4pQQmzZtUoKuRYsWyreMSQZ\/+eUXhAY\/SNDHjAKQ5TMo\/FgElxUEWBONAk0QBEEQBCEpZDphduXKFfTq1QsffvihKmi+a9cuVeoiMQd+psfo2rWrqrHJMkulSpVSKTAO7N+v7Rt\/mDWtZT179sQLL7ygnP85NW3aFDdv3tS3EARBEARBsI5MJ8wowIxUFT169FBV+jds2JBoIdqSJUuqbP2sc8aEtBR4M2fOROUqVRJMtcGgglmzZqkyGhwKZVmPLVu2oECBAvoWgiAIwtPilwO\/4P3V7+tLgmD7ZDphxqSyFEgGAwcORI4cOZ6ImoxN8+bNVb20v\/\/+G3PmzMHmzZvRqVMnZPPKpQmzSH2rJ2HkJouf8z3Gjx+PQ4cOITw8XKXbEARBEJ4uQzYNwfSN0\/UlQbB9Mp0wY1LZZs2a6UtmmPjVxyfhGmO0enl4eOD9999X5Zs4PEnRZQ0cBq1bt64SdPRTo7VNEARBeLoc8T2Ce7fuAY7ALwd\/0VsFwbbJdMLMqM7P6MqHDx\/qrYljZ2enhkAnTZoEX19fvTVx9u3bp5z9aaWj1YwBAPQ3mzt3rr6FIAiC8DTovbw34K7NuALvrXzP3CgINk6mE2b0B2NUZceOHTFjxgwllH766adE02Vw+PHFF19UQ6GMqGQR8u+++w7+d3wTdP4PCwtDpUqV1HzNmjXVa6FChXD\/\/n01LwiCIKQ\/oRGh2H9yv7KWwUF7NgRGYcP5DeaVgmDDZDphRqFEWFaJQ5IslcQs\/M7Ozqo9PijMiLu7O3r37q1qXrZs2RKurq4wmeKvb9mwYUP8\/vvvqoD51KlT8eOPPyq\/ts6dO+tbCIIgCOnNa0tfU5Yy2JmX4Qb0Wd1HXxAE2yXTCTMOI8aGJZNYNzMhKMJiw5QZbp5eiI5OuPD40KFD0aBBA\/Tp0wft27dXdTrz5MmjrxUEQRDSm0W7FgGW\/XFH4Nz5c7gddFtvEATbJNMJMzrik6CgIAwYMACDBw\/GokXaBZoI58+fV6+RkZH49NNPldiaPj3xSJ4jR46oguUMLmByWw6bcvg0MTEnCIIgpA3T9k4D6GJsGVDPrEdhkNQZgs2T6YTZxYsX1SuHFL\/++mtMmDBBia3r16+r9vgw9ps9ezaGDx+OsWPHqhxlp04cVc798eHv76+Of+DAAeVrxqHTQYMGYf78+foWgiAIQnryQe0PYPrZhPYV2wMRWoMmyvJlzwfTDyYs7LLQvJEg2CiZTpgZIipfvnzqlVAwMWlsQhiVAehj5ubmpubLly+vnPjt7OL\/mhjNyTQbjAZlklrCZVrRBEEQhKdHcESwPqfps2gqNEGwfTKdMKOQouM+01hwePLWrVvKOb9q1ar6FnFjMpmUtYv77d69WwURMGFs3fr1ERkZ\/wVNIUerHIueG0OmtLjFzqUmCIIgCIKQGHaaIDHp85mSgIAAlfXfsIj9seY4AoLC8WHnamo5PkJDQ5VYo\/Vs9a4LWLDHF04uDmhSMhu6Ny+nbxU3FIP58+fXl4DPZ+xEsJMnTp69jhUjW8LRIdPpYUEQBJuj+azm2Hh6ozJB5PLMhbuDEk6bJAi2QKZXCHEVMDdp\/yUG02QYQ5pRUdyDMdd2Vjn1W4oyEhYRhUhtt1DtNTo6U+tgQRAEQRBSQJYz3YRr4sj+UWIb6yiSPzv87\/jB\/\/YdFMiTcNqNuGhbrygKOYWgdZW8cHaKKRIFQRAEQRAMMv1QpiAIgpA1kaFMISMizk6CIAiCIAg2gggzQRAEQRAEG0GEWRpzYtEibB87FjvGj8fe777TWwVBEARBEJ5EfMzSmJnNmuHIpk2gy7+ngwOGR1rWCBEEQRDSCvExEzIiYjFLY5w9POCqvarJy0u1CYIgCIIgxIUIszTGzt7iK7ZLWpoOQRAEQRCyFiLM0ojoqCiE3r+P8ODgx1nToqPVcmRYmN4gCIIgCILwGBFmacTaDz\/EJzlz4vT69WBZdfqYPfT3x8ceHvj7tdfUNoIgCIIgCJaIMEsjXvjuO7hor47mRQW\/bIq0l+bMUcuCIAiCIAiWiDBLQ+p17owIfZ5wvnrz5nBwojwTBEEQBEGIiQizNKT9r7\/ioT5PgrSpzfTp5oVYBAcHY9OmTfqSmUWLFqnJ4MGDB1i4cGGMttj4+vpi3759+hIQEhLyxHG4DY+zfPlyvUUQBEEQBFtAhFka4pI9O6o2bKgsZcxeVqpcOeQqWVKts+Tu3btYunQpNmzYoLcA7777Ltq1a6emwYMHq7bPPvsMXbp0QZs2bTB69GjVZsmVK1cwd+5c7N27V28BPvjgA3Tu3Bl16tTB+PHjVdvkyZPVccpp5\/Pbb7+pNkEQBEEQnj4izNKY50aNQoj2GqxNtKDFBa1a3bt3R3R0tN4C\/Pjjj3BxcVFTeHi4auO8gbe3tz4Xk9jHmTFjhnr18fFRFjfi5uamXu3s7B7NC4IgCILw9BFhlsYUa9IEubNlQ3ZNBPnUq6e3xqRw4cL63JNMnDgR77\/\/vpqnlYuWtcWLF6Nly5aqzZIiRYqoIdG4GD58OAYNGqTmq1WrpoYxaVlr1aqVahMEQRAE4ekjwiwdaPfTT+j4xx\/6kvVQTL366qsoWbIkLl68iEOHDqFjx47o0aMHvrOy7iYrbvXv3x+ffPIJvLy8lBjz9PRE+\/btlXWN7yEIgiAIgm0gwiwdqPjKK6jy+uv6UvwYQ5bkq6++wqeffoqCBQuq5fz58+P06dNqnlax+IYgHR0dERUVpS9B+afRp4yijPA4RnAAxV6ZMmXUvCAIgiAITx8pYm4DUCjRcT9nzpy4d+8eatasiZMnTyIyMlKJrNDQUHTr1k2tY+QmfcPo0B+bdevWKXHn6uqKgIAA1K5dGydOnEBERIQ6lr29PTp06ICrV69iz549cHJyUsuCIAiZESliLmRERJgJgiAImZKGvzXEv6f+VcLMNZsrQoYyFEsQbBsRZmnMzyv+w86Tvgh8EIolo9vprdYxad5+OLGWk6q2aUJEFPBJt5pssIpo7U\/737nbcLA3V+vkcq7s7vDJm00tC4IgZGbG7xiPvdf3avdAB2R3yY5f28cdGS8ItoQIszTm0593IMzVC8dOX8WqkS3h5KiUVqKEayqs5edrUKWcD6KjouHgYI99\/13Gjm\/a61skzuGzvnj3u13wKZADpmiTJswAx8hgLBjRRt9CEARBEARbQpz\/0xgHe+0r1rSvg52d8g2zFnt7O7g6OcBJe3Vy0CYuO1sn6gwctP2KaKKsWKFcKKpNxX28kSObq75WEARBEARbQ4RZJocG0eho06NXiH1UEIRU5ODBg6rkG1\/J5cuXVb5FI+eiwc6dO7FgwQLcuHFDb4kbKSsnZHVEmAmCIAjJYseOHdi9e7eKEmeOxFOnTmH\/\/v0qIpw5Fzt16qS2oyijwHr55ZdV2TjL6iSWSFk5QRBhJgiCICSThg0bok+fPmq+cuXKKscirVmGFY0pfsjmzZuRO3duZeV6++23Veqe+JCyckJWR4SZIAiCkCLu37+vhhWrV6+OKlWqoG7dusrKNXLkSLWeuRiZN5FWLlYb4XJcSFk5QRBhJgiCIKSAM2fOYNKkSY+GGRs0aKCsY+Sll17CsWPHlI9r+fLlVRuHOY0qJtbAfaWsnJCVEGEmCIIgJItbt25h5cqVGD16tN4CDBgwAHfu3FHzdP6vWLEinn32WVWZhNAnrVKlSmo+LqSsnJDVkTxmacznM3Yi2MkTJ89ex4qRLeHoYJ0WjoyKRrsR61CxdCHlb8G0GwdPXMXG8dbnIDt64TZGzT+OYoW9VTQmvTYC\/fzw8yfPmzcQBEFIAYcOHVI+ZeHhYYiKjFQirFTpMpogW8QsQWjdqiU8PM0Jrbdv24abmpDj0GP27NlVW2ykrJwgiDBLc56mMDt+0Q9fzDsGby833Lv3AF45ssEuLEiEmSAIqU54lHbfioxChCagvDxcVBtT9BiO\/I5WJtcWhKyOCLM05mkKs22HrmDWLl8EBT7Ehcu38EyRfKhQNBeGv1JV30IQBCHltB38N7o0Ka0qlrg4O2DVrkvImd0VF+6EafcuJtcGbvo9xDfv1EWTaj76Xonz3EeLkdPL3Zx\/UTuG752H2Db1JatE3nW\/B\/h5xdFHibl5Ty3tkwtdm8rQp2DbiI9ZJmb1nks4d+E6ihbJg+caVsIzPnmwcN1\/+lpBEITUoX7FgnijVQW81a4yXm9ZAa1qF0V2DxdULuujOpeVShfWpoLKkT8phEbbo0xpH5QoWRClShVG3nw54R8Yd0RnbI5fuouTfpHwjXDFrXAX3I5yw5Yj1\/W1gmC7iDDLxLCnyDw\/UVpPMSIiUt0UL1035xUSBEFILSIiYyaMjYg0O+\/T2s8pSn+1viidGXttB+7HWr8m7ZWOayxXZw1ODvZwdrCDo\/aUMyYXJxlOFWwfEWaZmO7Ny6J8mSLKhE\/o7\/F83ZJqXhAEQRAE20OEWSYmJDQCURZDBxRmNSsW1pcEQRAEQbA1RJhlYuZuOoOTpy4\/cpSlA+7GXefUvCAIgiAItocIs0yM2dH2sT+Gg4M9Dhy\/pi8JgiAIgmBriDDLxLzRqjzKlvZRuYUIhzJrVJChTEEQBEGwVUSYZWIcHOyUlcwgis7\/dUroS4IgCIIg2BoizDIxS7dfwIWLNx6JM0aZX7x+X80LgiAIgmB7iDDLxPg\/CEVIWITKZUYo0BasO6LmBUEQBEGwPUSYZWKa1yyCQgVyqwSzChPgzfImgiAIgiDYJCLMMjE++bIhp5fHozIoTDT7Vpfaal4QBEEQBNtDhFkmZv3ey7h+4+7jEiaaPrt7P8Q8LwiCIAiCzSHCLBNzze8h\/AMeasLM\/Gd2dLLHL4v2qHlBEARBEGwPEWaZmDrlCyBf3pyI1n3M7LT\/mEJDEARBEATbRIRZJqZ80ZzI7Z0d0bqPWXhkFAb2bKzmBUEQBEGwPUSYZWJOXfZHQGDQo3QZ\/NeiprkgCIIgCDaGCLNMzM5jN3Dtut\/jBLMOdvhxwS41LwiCIAiC7SHCLBNT7hlveGX3QHS02cfM3s4OAQ\/D1LwgCIIgCLaHCLNMTL2K+VG4UB5VvJxERUaj+wtV1bwgCIIgCLaHCLNMzI07QQgODoXuYsY0ZihSMId5QRAEQRAEm0OE2VOkQoXpePnlhQgJidRbksa6defg7f0Vdu68qrfEZN3ey7h4xRcODg5q2cHeHnNWHlLzgiBkXpYtW4aLFy\/qS7ZLy5az8fzzM\/HgQfJcLNavPw8XlzHYteua3iIIGR8RZumIkYDfwMnJHgsX7oO7+8fqBnXihJ++Jm5iZyCjU\/+9e75o0GAq7Ow+x8yZMQuUe7g6KjFmhGLaabPXbgWo+fTEKAklCEL6EBkZiYMHD2LJkiU4evSo3vr0sYt1E3RxccTmzceQPfsgVK36Y7ydTEssczGyUxsefh\/1609R98AZMw7qa8z3R0HIiNhpD015aqYhn8\/YiWAnT5w8ex1rxrTGwAEb8PWkv7U1rtrkoU2O3EwjXJuCUbCgDyZ+1RzdX62EF4atQYVShZTzPgXW4VPXsP7LF7QbUG9t2+za5KRNRlFyOviz3JID+vVrhKlTW+NWwEOMXngWro76jczODpcvXseiL14wL6cT\/v7+WLVqlXYTdtFbBEFIS9zd3R8F\/VCkhYWFoWjRoqhQoQKyZcum2lOTkb\/vwohe9fQl4Ofl\/+HczUBEumTTOpQm7dZjh1t+gejfsTR2rLiIjz7+U9vKTZt4\/+J9jERoUwhcXXPh11\/bo3v3Smj48VLUr1YcUVHRqrTc2Yu3sXREc+14fbRteQ+N+x44aEBTtOtZHn9su4oc7m6qc8i10Q8DMLWv5HIUbBsRZmlMbGE2etQ2DB+xRlvDm0pccFjzgTbZofv49ihU0FvdlGIKs4+19V7cOA54+wnVJj\/0\/aQL3GsWQWQob3hAlPaX9tbedtgr6RsAEBAQgA0bNmg33Pg+syAIqQVv6SzDRmFm5DAkFGhBQUEoUKAAmjZtqremDkkRZoe3XEfvtxdoW1GYxUWUNvEeGIm2g1ujfCUfREZExRJmg7X13D\/2OAIx7oGBqPnCs2j2emWEh0SKMBMyDGLrTWdCQiiSgvWJNyAD6mP6WTxAp5fq4ejRTxGs3Ujjls3sFXJ\/S78MbshjP4SXV04sWTAQeSrnwIGD5+Fo5DHTbo67j15R8+kJHxQREREIDw+XSSaZ0njitWYJBRotZnytWrUqGjd+usIkVPnUGvdAS\/\/ax\/fAevUqwt93AoI0OWXSo8pjwnsgp7jvgbm9c+OzL19GldbFEBFmeZ8VBNtHLGZpTGyL2ZEjvti16ypy53bHJ5+sx5Urd7StzDfSN99sgBkz2qt50vrzNahY+vFQ5qETV7FhfBtMm7YHOXO64fBhX0yatFnbkr3GUFSpUhrTp7dB\/fo+av9Pf9qGXWfuoU61ElpvWetxagLth5mb8XDDR2p9esEHxbVr1x4FIQiCkHY4Oztj9+7dykpFocZhzUqVKqFIkSL6FqmPtRazd1sVh4+HB1avPQtvb3eMG7dDu4\/Rr8x8D+zWrTZ++6093NzMw5v1P\/wbDWuWiDGUOX9oE\/z56xG4ezhh797r2v1wu9o29j1wz+lbmLbyHPLnziZDmUKGQoRZGmMpzFaMbPnIekUKFfoGN24EYPz4Fhg8uIHeaiZSuxG1G7EuhjA7qAmzjZowM9iw4QJatPhGu5k1iXEzM9h78gZ+2XwN2T2c9RY7bNt1HPt+6q4vC4KQGZkzZw58fHxQsWJF5MqVS29NO6wVZm82fQZNqj8WiI0a\/Y7t209gzJj2GDr0Wb31MXEJs18\/bADvHGa\/sk2bLqJZs7Ho3v0FTZC9AC+vx+4SWw5ewa+bLyN\/nuwizIQMhQxlPkVOn+6r3TBGPiHKrKVRoyLa\/t9h7txOT4gyksPTBc4uj9tZzLxDk\/L6kiAImZVu3bpp94dG6SLKUsKKFa9o97CJcYoya3j++WLa\/jM0IfpSDFEmCBkZEWZPEU9Pw5KVPBhqnhB\/bzuPCxdvPAobZ6\/1zGUOnQqCkJnJKG4DIqYE4UlEmGVi\/B+EICQ0Qgkywvw\/SzYeU\/OCIAiCINgeIswyMS1rF4VPodzKP4PQmzBvLk81LwiCIAiC7SHCLBNTMLcHsmf30ASZOb6DAq1Xx5pqXhAEQRAE20OEWSZm57Gb8L3tr6KZCAVaWITk9BEEIWkw5c3mzUzNA5Wk9vLly2peEITUR4RZJub0FX\/cuRuosoATJycHTJm1Tc0LgiBYy+zZs\/HMM89g4sSJCAwMTNUC6ZcuXcKBAwfU\/KlTp9RrUjh+\/DhOnjyp5g8dOqReBSEjI8IsE1OxmDdy5cym8qA9Jq4SJoIgCPGTO3du1cEbOHAgfvnll1Stt7l+\/XplkVu6dCmuXk28iLkl9+\/fV2KMQvHff\/\/FsWMS3CRkfESYZWJql8+PgvlzacJM9zGLjMYH3eureUEQBGtp164doqKisGnTJpW0lkOZMTt8yefevXuoW7cu8ubNi1WrVumt1pEjRw7cvHkTL7zwAu7evausb4KQ0RFhlok5fvEu\/O8\/fJQug7dRd9eU5U4TBCHrcfjwYWXZYsLaChUqqPJOn3\/+uarBmVKGDBmijl+\/fn106NAB27Zte6LeZ0K888476rV9+\/aq2oExLKrd+MyvgpDBEGGWidlz4hau37z7KMEsy0HNWnFQzQuCIFjLjh070KdPH1SrVg1lypRBzZo11bAmhw9Tyvjx43HhwgVMmTIFN27cgJubG7766it9beKMGDFCvVLg0Zp3584dzJn1J9y14whCRkSEWSamcB5PeHq4wqQPZbIDef12gJoXBEGwlsKFC8cQYSyOvmTJklQpjF6uXDm89NJLKF68OF599VXUqlVLCSxr4NAl9+EwJo9BwdiyZUtERkaIxUzIsIgwy8Q0r1UEzxTJhyjdFyQyMhpvtK+h5gVBEKylY8eOKk3G119\/jQkTJuC7775DgwYNULJkSX2L5MOoymvXrmH\/\/v3YuXMnHj58aLUTf9GiRbFs2TI1pMr9KdS2b9+epKFQQbA1RJhlYu4GhCIyVt6yAnmy63OCIAjW4+7uriIzmQ+Rw42cUoNevXph9+7dGDVqlLJ8TZo0CW+++aa+NnFGjx6t0mx4enpiw4YNcHR0RO+330NIcLC+hSBkLESYpQI08QcEmIcIk5JHJ7Xy7zCS6fz582p+7dq16pWs2HkBp89d025U5oLG9nZ2WLb1hJoXBEGwFqayYFQm\/czoy9W1a1d136GlK6UUKFBADZXy3sUoy5dffhn58+fX1yYOrWX0K6OVzMnJ6VHeRrMDhyBkPESYpZBdu3apG9bcuXPVjeHgQeuc61Mr\/87WrVuVOZ89zuvXr8PX11dfAz1NxuPbk72DHU5fuK0vCYIgWAed8hs3bgxXV1e1zOjMV1555VHHMiUwaW1wcDAKFSqkIir9\/Pzw\/fff62sTZ+zYscq3rGnTpkqYMQp99sw\/xPlfyLCIMEshTLzIm9a7776Lb7\/99lFqisRgz5D7Gfl3Tp8+ra9JGmXLllV+GXSA3bhxYwzfijfbVkTFckURGWkezqRQa1CtqJoXBEGwltq1a+Onn37C0aNHceLECZXeYurUqcrPLKWUKlVKiapKlSqhdOnSaNSokdUWM\/qUMccaAweKFSumghJ4rtFaZ1mc\/4WMigizFMKbSrdu3dT8J598om4QvDlYA7fnDY75dyjsSFIFGm9gb731lqpjxwgp9mRp1o8LCrOGNUSYCYKQNGiRYo4xJoOlGKJlnnnM6HeWUjhaQLHH17179yI0NBT79u3T1yYMRwtWrlypRgw4tMp777lz5xD44IHUOBEyLCLMUgiHLul8OmbMGJVPZ8uWLcqJ9ffff9e3iJ\/hw4fj1q1bGDBggMp6Tbh\/UuAQAI\/j4eGhRBqjpGbMmIFb1y5i5rrTOHby0mMfM3s77DggmbEFQUg6FD50vaCVnykp\/P39lSBKKcyHxjxmFHyfffaZ8tflPdRaKBApyNgpZbLZ7Nmzo2+\/jxAkzv9CBkWEWQphvh36XbRu3RojR45E27ZtldBipFFC8CZES1mrVq1UCDpvSCSpPVAOY3700UeoU6eOygdUuXJl5Zy7adNmODs7aVs87jcqYXZIhJkgCEmDPrQcInz++efx6aefqjb61qZG5n8XFxd13+Tk7OyMfPnyqdJP1kK\/Mg5\/1qtXTy2zkzt\/7my46f5wgpDREGGWQngjYY+PxXfpc8FcPyEhIfra+KEJfvXq1Wp7wh7i4MGDlRk\/KbAECfP4WA6fMpggV+686Na0NMqV8VHSjFYzB3t7VCxlfbSTIAgC4RAmfcB4v+HIADt\/TEthREDy3mIJO4GEPrecGBEen\/8tO5cMouIrJw5jGlHmPI6jg3bvcrDXJgf1fkzXYcB7reW+nJjPjMFVJjt7RGt3P5P2viZ1F7RHZFTq1PcUhLREhFkqwQSMr7\/+usqj4+XlpbcmDM3uRlQTLWVM3MibT1JgeRQWAGY5E94wWcqEvdjWbVh0OAJnzt\/E0ZOXcYzTqato36S8vqcgCIJ1NG\/eHIMGDVLzHCF4\/\/33lQsHrVXk7HV\/nL56D4fO3sapK\/dw\/kYA7j8Mw5Vb\/rh66772eh\/X\/AIQEfVkEov58+crgcUhTE4UVUYH9dyVu9h96AL2HrmEPdrriXM3Y9wjKQ7\/+usvVVDd2J9DrKFh4SiSLzuiggPx4I4fHt69g\/u3fVEkj6e+pyDYLnZa70PSvaQQ1pGj5Yt+F7\/99pu6SfTu3Vut+3zGTgQ7eeLk2etYMbKlqldpwBsQHV4bNmyo0l48ePBARRgR9uzajViHiqULqeOxR3rwxFVsHN9GrbeEDrOMxmSE1K+\/\/qpuVm+88Ya6Qb42biNy53BTvUw7ewcUzeuOHz5qou8pCIJgHXT45zCjAf1b2QnMmTMn9p68hQfB4couxQdKDk8XlCqcE0cv+MFRt55FRptQtVReeLiaxZxBZGQkZs+ejZ49e+otwOLFi9GpUyd9KWECAwNVRDpLMhn88MMPeO+99\/QlQchYiDBLIYyipOmd\/l1Mwvjxxx8rh34Kri5duiQozOi0Tz8zDkW2aNECefLkwfLly1XP1FphFt\/7nzl9EhVqN8fnsw+iWGFvFZFJc\/597eb68yfP63sLgiAIgmBLyFBmCqFvGa1cNWrUUKky2HukSIovZYUBnf8Zfs4wdOYie\/bZZ9WrZY\/UGuJ7\/7va+9tpPdUoTeBFRESpXGZGPjNBEARBEGwTEWYphIJo+vTpmDVrFm7evIk9e\/YonwlGayaEkX+H2f+PHDmiHPbPnDkTI3O\/NcT3\/hW0948SISYIgiAIGQoRZimEFqq3335bZa42cvAwcokWsMT44IMPlI8GHfZpYaM4MxxsrSW+969Ttz7CwlMeyi4IgpBSOszroM8JgpAYIsxSAYZrL1y4UNV4o69Y\/fr1ldUqMWjh4r503uewJnOf8ThJJa73X7pk0aO6doIgCE+LE34nsHzDcqw5t0ZvEQQhIUSYpRCWVGKo9\/\/+9z\/8\/PPPSmwRRlgmBJMzMo8ZyylxCHPFihWqnRavpJDQ+xs5hgRBEJ4WH639CMgDvLbkNb1FEISEkCd3CmHOnMaNG6syIEOHDlVZ\/AkTzyYEIyfpH+bp6YkePXrg2rVrSmRxOSnE9\/5Oiby\/IAhCWhMRFYENBzcArsDdm3dx6+EtfY0gCPEhwiyFcNhw3Lhxj5z2KYzoJ5ZY9v9ChQrhn3\/+UbU2CXPusE7m8ePH1bK1xPf+odr726msQsy+rV4evQqCIKQHgzYOUqJM3Yo8gK6Luqp2QRDiR\/KYpQIsh0QhZpnxn+kwGHnJPGbhrtlx\/Mw1LBve\/FFBcYPbt28\/KmBOmJeM2fwjIqPQ7ov1qFy2MKKjolVJkn1Hr2DzhCcTzMb1\/jevX8WdMDcM+uMgiup5zHh3ZAbsOUNbmjcSBEFIQ+wGaYqM5X8pzHgLuq+9TJFHjiAkhFjMUgEOW8Yuw0RRRsIiIrHzwDmcuej3hCgjlqKMUJQRJ23b8OAQXL54A1ev3MIl7dXZFKnWxSau9y9QyAdlfHKiffW8qF3IGXV9XFCzoCPeekFKMgmCkPbMODjDPGNY6vmqibS3VrxlXhYEIU7EYiYIgiCkOnZDNCXGvmQ287IiWJv8AdPP8tgRhPgQi5kgCIKQ6twbcQ87P9wJBOkNIcBfr\/0F38lJS6ItCFkNEWaZnFuHDmF1377YMGgQVr7zDqIj4x4OFQRBSE1yuuVEsZzFgGi9QXstmK0g8nrEdN8QBCEmIswyObePHcO677\/H5okTsebnnxEZJtUABEFIH5guw5LIaOkYCkJiiDDL5Dg4O6todWOyk6SzgiAIgmCzyFM6k2Pv5KTPmXGUMk2CIAiCYLOIMMvE3Ni3Tw1lGn9kR226tHkzru3aZW4QBEEQBMGmkHQZmZi37OyQW3u1tJGxgiezqU2QP7sgCGnM1YCrKDK6iDllRhCw8b2NeL7Y8+aVgiDEiVjMMjEd3n77UW5HA\/7Bu3z\/vXlBEARBEASbQoRZJqbllCl4qM8TRq3TWlazTx+1LAiCIAiCbSHCLBPj5OaGGk2awAhYZ6KM5kOHmhesZPr06ViwYAEmTJiAO3fu4MqVKxg7dixWrlyJhQsXPiqePkUTgWvWrMGAAQPw8KGlHIybe\/fuYah2LmvXrlWF18lvv\/2GP\/\/8E8uWLVMT8ff3x+TJk1X7Dz\/8oNoEQRAEIbMiPmaZnCs7dmDKs88iuzYfqE3fJOHPHRgYiMOHD6NRo0aIjo7GmDFj8Oqrr+LGjRt4Vjumwa5du+Di4oLq1aurZe6XPTvfMX727NmD8uXLI1u2bEqEcX716tXo168f7OweD8B+8cUXaiJ+fn7IkyePmhcEwfYRHzNBSDpiMcvkFGnYEAU0MROizdfr3NncaCUUVxRl5J9\/\/kG1atXw4MEDbNy4EevWrcOwYcPUuosXL2Lnzp3K+kUrmLu7u2pPiDp16ihRRrZv345SpUop69i8efPU9Msvv6h1ERERavmPP\/5Q7ykIgiAImRkRZlmA5hyG1F47zpplbkgimzZtwokTJ9CuXTtUrVoVI0eORMuWLdGrVy8lmuzt7dG0aVO0atUKL7\/8shJo1jJq1CgMGTJEzdMy9sorr6Bbt24ICwtTQ6fBwcFquWfPnrhw4YIaAhUEQRCEzIoIsyxAVU1A9Rg2DE7JSC67dOlSZSV7\/\/331TIF2t27d9U8iYqKQrFixdQ2hILKKVZS2\/j47LPPlIUtd24m9YDyW7OEw6eW1jceO7EhUkHI6NAyzOtu0aJFOHXqlN5qbmdHxWD37t3Kz5PXpCAImQeHLwwHHiFTU6xJE33Oeq5du4YZM2agZs2aytfs0qVLyo+MgQAcYqRlrHfv3ihatCjmz5+PgIAANaRJ65aln1hcfPfdd8pf7Pbt2+rYuXLlQmhoqHrQXL16Ve3fsGFDVKlSRQUgnDlzBsWLF0eFChX0IwhC5oSBLn369FF+l0anZdasWTh48KC6\/jw8PLBhwwZ1PXbv3h1z5sxR14+3t7fa1hp4\/dLyzc4Oj02f0a1bt6oAnlu3buHQoUOoWLGici\/48ccf1fVHX9JatWrpR7COwLBATN42GXDRFiKA12u9juI5i5tXCoIQJ+L8LwiCYCPQIsYo5Ro1aiAyMhIdOnRQbc7Ozpg6dSpef\/31JwJgVqxYgQIFCqgOlLXQLYCWbR8fHxw7dkx1kBhNzWMULFhQ3yrlwTcX\/S+i+FBNiOnO\/6s\/Wo3WJVubVwqCECcizDI5n\/68HdndndU8bVh3H4Ri4nuN1bK1XL39AAdP+8LJMf6R74jIaHR4tqS+ZD1XfAMRFh5pPrk4iI4yoXDebPBwM38GQcjMBAUFqWAY+mvSSkXLmOFG8NVXXym\/TktxREFFqzbdApLLtGnTlG\/okiVLlACkyKNYGzRokHI1qFSpkrJmOzo6okePHvpe1hEeFY6fDvwEDycPhEaGok3pNnjG6xl9rSAIcSHCLJNTo89iPFe3lNb7joa9vR1OnLuJhZ82QXYPji1Yx8g\/duLUHROcmJ02Dhzs7XHs3A3snNxRE2\/xbBQP5XrOQcUyBREdHffPMEr7eWazi8Csoa30FkHIOnz44YfKUkZiC7N\/\/\/1XiTgjeCY5TJo0CXXr1kWDBg30FjPLly9XkdIUfdyGMFCnb9++athUEIS0Q5z\/MzkuTvZwsANo7OLkpC3YJ+L\/FRsPVyfk9fZA3lxxT3k45XBP1K8sLrhviSJ5UKywd5xTCZ88yOXlpm8tCJkbRh1TjBFazEqXLq3mCf3CjMAaBgXQqpUSUUZfUQo9Q5Qxj6AB++ucJPhGENIfEWZCotCWZb5R8zX+KTnYa1rOFB2t7W\/ShB2X7dQ8J0Kxlwy9JwgZElqjPh86FIsXL8KFC+fVMOYdPz+1XL9eXWzfvg379+1DWGgIihUrihXLl2HJksVq26Swfv16leZm79692rEXK2d\/5in88ssvlUA7f\/68Cj6gSKTPG\/MI0v+Mw5mCIKQtMpSZyan\/4d9oWLMEoqLMQ5knz9\/CvMFN4Kn7nVnDxHn7cDXYEU5UUXHAG\/yxM9exYmRLODokTetX6T0HzRpWUMOh12\/eRURkFPLnzQEXFyfc83+IgAchyOkK\/DKgmb6HIGQu6J8ZEsbCaebry9HRQU28M4eFhcNBu6Y8XBMWRPQEiOfyFAQhgyHCLJNj68IsV+tp6N6xLjw93XDg8Dk8DApFhTJF4O2dDecv3cTV6\/dQomB2\/DXsBX0PQchcvDh0GTo+WxLhEVF6S0w83Jww8a99KFAo7yNLclzcuxeIPdO76kuJczcwBO2HrkTeXJ5QZvE4CA6LxDttyuKlRqX0lsTZevAq\/tpyBq7O8fub3n8Qipmfid+oIMSFDGUKT5Xs2d2UdSwiIhLVq5RA4wYVkCOHByIjo1C8SH4817AiiuTPoW8tCJmPmmXy441WFfBWu8pxTt2blUNpn5yoWKYwKpYuFOdUuZwPcufUBFYSCAoOR7583ihVqjBKlCwYx1RIrbt556G+h3Ucu+gHh2w59SnHE5OzVy7cfBitrOOCIDyJCDPhqVK8SF41bEMoxiIioh5ZBaKio9XgzqJNJxAUyqEeQch8REZF63PxExVtUpUw4p20Y5jiM3vFgwoC0q415eOpHf\/JydzuwOihJODoaK8eLPba+ZhfY048mqM9fUeTdlxByCrwOhGEp0ZIaLjypYkPDr\/eDQhBeLj0rgVBEITMjwgz4aly6twNhIVHxJdfVvndtKxXHDmzJ73OpyAIgiBkNESYCU8VRpwlBIczixYQHzNBEAQhayDCTHiqVC5fBK4uTvF6xzg7OmDNzvPKj0YQBEEQMjsizISnSnylmAxoUbtyKwABD8P1FkEQBEHIvIgwE54qR45fRmhY\/D5mDKmvXaGg+JgJgiAIWQIRZgLu3g3W51KXgIBQfS75MJVAldL59SVBSF2iojJvtG9aRTKHhkbqc4IgpAUizATkzj0Q+fN\/jdWrz+otqUOOHKPg4fEl\/vrrqN7yJBXL+sDF2TFeHzNHe3ucvHhHXxKE1MXPzw9z5sxRBcEzG2vWnIOd3Tvo0mUBAgPD9NaUM3bsdu24\/fDhh2v1FkEQUhMpyZTJiask09IRzbBrxzWcOHkH+fJ54MUXZ2pbMslriDa5YfLkNvjoo7rcXWFtSaY1Y1pj06aLOH\/+HvLkcUfXrosQEUHfMFrOnDFxYhsMGFBf7WPQdOBy1KpSTCWXjQtWBfhh5mZcmP9WmgxnXrt2TQILsij83d6\/fx9nz5o7JGFhYShatCiqVKkCNzc31ZZaXL58WRUoz5YtG06ePIly5crpa4CRv+\/CiF719KW46TxsOYqWKqqSvsYFP8vJs1excnQbTJu2FzlzumLfvhv49ttt2lpetw+1z1UOM2a0R82aBdU+128H4oOf9qHEM7nj9fUMDY9GtYKO6N64LH6feVj7DO6YN+8Yli9nZ4vn8hDNmtXG\/PmdtXXm7+zHZYdx1Dcars5x9\/tTUsJNSD1++mk\/Dh26hRo1CuCtt2rorQmzcOEJ7R5\/AaVLe+PjjxP+zRqMHbsNd++GPPqNRUREo0OH0mjRoqRaToz\/\/W8ZfvyxLZxjlfiiRfjdd1fit9866C1mrl8PxHff7cW4cRm3vrIIs0xOXMJspXZDfLX7Evw1d7u2BWtm8oZqiC7ebCmkTHjvvcaYPr0NJi88gIsP7K0SZh07zMOy5Xu0Vh6XQsq48RrHjcYbbzTA11+3QO7c7ijc6Sd0aVsn3gLMTk6OWLVhP3b\/8KqqGZjarFmzBkFBQeozCFkP\/t0dHR8XCI+MjNRu+OHw9vZGpUqVkDdvXn1N8rl69Sq2bt2K0NBQdO\/eHbNnz8Y777yjr009YXb6\/DUsH\/kC7Oze01qyaxMfZC5crcPqGcHInj0vfvm5HVq0K4E3v\/kXxYskLMxqFXFGXZ98KFfxC62FZZ94HVpei+x8BcHH5xmsWPoKzgQFYOvJoCwrzK5eDUChQtm1zxnPTc0GsLMbiGeeKYyePatgwoQdWkfEGffuDdLXxk327OO133AEPvvsWcyc+R8uXrwOk2mCvjZ+7OyGoFOn6lqnJ4f2HDKp6i7ff78V+fPnw82bn+hbxY+d3ataB+o3eHlZ\/pbpKhOGHDn+p53DHL3FzK5dV1G\/\/mSt\/Ru9JeMhT6MsiocHb6wUZO7aZHkD4U+C7U744YdVyOU1QQkoa\/HwoCDj9pwsf16cZ5sL\/vxzI\/LkGaFag0PClcUqvltYWEQkWtcvlSaijDg5OWk9MWeZsuhkKcoIl2kt8\/f3x4YNG7Te93V9TfJh6SH2f9966y3MmDFDCb+0xbj+Yj7IzGIqOwID76Frt8kYPeof\/XpNHCcn4\/rlFPta5DG8NEFyHVVrjMEfvx+Gq1vM7zUr0bnzQjg49Nc6oEsREpKwP97p03e038dQJT7s7D7HhQv++hqgRo2ftLb\/adObqFnzZ72Vv9HRWLnyrNb+qTb10ATLeNVeuPBkDBiwXs0beHiMxeefb9GXzGzYcB7lyxfDpUsf4osvntPO8XPt9252N7GzG6aGqg1GjNiqtQ3Hw4fhSlCFhw9T+1y40E9bG4GdO6+aN0wQO4we3UR1xidPbonvvntBux6+wq1bx3DmzF21xalT\/B6Gq89jZ\/exdo4XVLsZ1zjLgpnbnhxFYUmwJ3\/7GQvLJ6eQQVm1ahXOnz+v5teutc7vw9+f1qtAfTJ6y3ylL0ogKlUqjJMnR+FewGD4+lpfxPieP4dDjeMavXselw8jf5QrV0C7mAdrF+ZEtaaoT244OTrE62Nmp\/33MDjtHmQcvgoJCZEpi06WIokdBP4e+MrhzFdffRWFChXS1yafwoULo3379mr+ww8\/RNWqVZX1LO0wrj\/LoB66CnA5GEOHttKuvxkYObKJeuBaQ1gYBYZxXEt\/Nbbz\/mDSHr7tteN+h26vVERoIoIkM0Afu4EDN2DQoMfTF19s1e+X2TBz5l64u3+Mli1n48QJP\/NOsShbdjC2bHlL+97maIKlPUqUGKbaW7Ward2jw7T237TpV2WF69lzqVpXsmQu9OixWGsfp02ztd9xBCZM+BfLlnXFpEmb1DaEVtDg4HMYM6aJ3mKmefMSOH68j74EzJlDUWb+nZtMozUh96fySeQ0atRsrW0UPD2dtfcZqrYh27dfVq\/16\/uo1+RhQrZsZgFVrtzn+O23l9TnOXZsCFq0GKvasyoylJnB4RBJnjx5cPjwYTz33HPYuHGj1lN7Q18b91Dmgk+bwt3VCUFB4arHTLO2WaNHo1u3utoF0h5uFhYqa33MVo1upQojG8d1dh6t9bJ4kwpDx4511bBogQLZzDvpNB20HLUqJ+xjNv3PTbiw4G3kSgMfMz6E5RLImjg4OODmzZvYsWOHWvby8lLDlwUKFFDLqcWdO3dw6NChR781LlMQFi9eXF2zqTWUefz0Fawe2xYPHoSpB96CBcfRtevvar2Tk5f28G6O\/v0f+45e8w1Ev58T9zGrnN8e77SvqkQcH9CffbYJ48axAxiJggV9MGVKS3TpUsG8g0ZW8TGzsxug\/UvLYOz7Iu+dlv5QFL\/B6ruiSOrVq5pq\/eefy5oAmaWJ3s\/VsiV2dp\/g0qXheOYZL7W8e\/c11Ks3Q\/v9fKEsY2PHNtXu81XUutat56BChbz4+uvm2n59cOXKePj4ZFdibf78Yzh48PGwuSW9ei3DH3\/M1eYKa8f92tyosX79eXTqNF\/NL17cVTvHEmqeTJ26Bx99NEmby62JxfHauXDIPGHs7EZov8NKalsOZbq5OarfT6NG5bXvoJf6HiheQ0MfC7\/mzWeq39Tbb9fQ9n9T+03\/oH57lvD3mC3be9q5\/6q3mNm37zpq1\/5Oax+nt2Q8xGKWwSlbtix27typevcUZRER9CNJGOMm\/HgYw1HrGbXRfsgTMXdupxiiLCnEPm727C5aj7KZ1j4Zf\/\/d7QlRRq5cvaNM5PHBB1k2Dxc4ppG\/Bh8SfEDLlPUm4++fI0cO7eHWWnsAtUh1UUZcXV2VLyOvTcNvrWDBgsqSlhYYVogcOVy1+dzag7aPGoKyFGVJwei3GA9GXtfFihXGiRNDcf36xzFEWdaC3zM7i7GnmE7q5qFeT9y4cQX\/+998XLx4X7VyGDOue6KZO8ifn\/58ZsyO7xyNMP89tP7vI3j\/NJZffbUZxo83dzS++GILvvqquZqPi99\/76Ada57WqR+g7d\/3kfWUQiw0NEpNlqKMfPhhHW2fBZr4G6eJvy9w\/PhtfY11ZMvmrImyJdp7v6pEGbl06b4mTjmU2evRtHHjNhw9mvCx4+tPm4cy41mZQRBhlsHJnz+\/8l3ZvHkzihQpoiK\/2CNPCuxZDBvWCLdv+6plDufcu3dPzaeEO3cGqRsDfWxu3bql2mIf++79h6oeZnyyKzQ8Et1bVkR2z4ztMyDYJvny5dN658010fH4IZja8NjffPONugb279+P0qVLq2u1ZEnrotKSCx+qgYFDtM9XXG9JHYYMaYgLFz5EuXK59ZasSoA2UWTFnozOMcUB5+9rf+u82Lq1v3avHa+JWnPt38qV8+HyZbOP1ZPk034vj11IzDnpKPrMxCdKRo58DtOn\/6PmQ0NvolmzJ\/\/2e\/de10TRJX0JqFIlv\/abLKuJpcNqecqU3drv00tNnCf0BVu27JSaJz4+XnjppbrKgpY44RgxorHyMRs1qgl++603evUyW+RIqVK54O1dQPtMv1tMMzBtWmt9i7hxcaFYjX5itOX6dX5v4mMmPEWCg4MxfPhweHh4KJHGmz0djE+fPq1vYR3Lli3Dli1b8euvv6rINA69pBY89j\/\/\/BPnsQvkzaGGMxLq31j2DgUho9K7d2\/tIVQK33\/\/vQo6SS9OnTr1yJKe1PtCQqTVcTMK9KczmaZoEyMAH0+tWzMVCsUBfXUL4fz54Th79gM0bvyM2s+gbl1aTG+qIWfy668HtXtdTzXftm01NGnyh5onbdrMwcCBz+pL8VOiRC7tXxe8\/vpSvPZa3Okibtx4gOeeGwNf3yC1fPVqoCa89uPll82Wz\/79f9XOuZ+aOE83GHd3J3TsOFKJOkKhuGTJdnTuXF4tDx26Cf\/9Z+7Yx4WlLyOHcrNl88Lbb69Qy\/RTu3v3vHa8k2qZvm3Mk3f9+gO1TGIPYxJaEQsXroyyZb\/XW8wCsl27H7RrrK3ekjERYZbB4TDmRx99hDp16qjcSJUrV9Z6tEOwadNjJ1BrCAwMRIcOHfDCCy9ovaCp2oUTn4k96Vge+9tvv41x7PwUZo6xTf+PcXNxwo+LD+BeYFo6SwtC2sIh+W3btqkoz8aNG2sPu\/iH71OTAwcOKAFFMUh4DqlBWh03M5A9u6smpKppneYJmlh5D8WL59TXPMmpU+PRtetsTYj00IT7Epw4Yfb1WrHiFZWLzhyV+ZYScV99ZRZatKRZCh0\/v2Dcv\/\/4\/jhsWBPMmvWX8imMi44dy2L06De0jjyjOl9DkSIj8fPP\/VROS6a2mDz5TX1LWs96a\/fngco\/7K+\/hmrPmclqHxeX\/tpzpsOjoc4vv\/wbu3fHF8EciNjVIvz9B+GXX\/7Crl3X1PLJk2PRqdNc7diMMv0EP\/zwOgoVMp4T0Vr7m9pkDHW+ovzjyNWr\/VVONaaI4XmVKTNJO+eu6NOnllqfURHn\/wwOe6qGjxnD\/8m\/\/\/6rMpp37NgxTuf\/eYObwNM9Zg+EPwMKKDpAc6jxzJkz2s3A7JNirfN\/fM68PDaPydxQFy5cUOdGIUmqvPUXmjesoLaJi7ROMCsI6cGwYcPQqlUr5WpAK9OePXtQokQJNG3aNNWd\/y05cuSISqLcpk0b7eH5pRq6ffNN84PXWuf\/Svns8W6HqnqLGcvjTpo0SfnNvfbaa2qdJJjNejCpcYUKebTfczG9RUgJclVkcMqUKYPq1atrvaMJ+PzzzzF27FglsCjKkgIzk48ePVpN9Fc7ePAgPv30U22NCQ7ajTQlUDxyOJM38p9\/\/llFkH722Wdq3bUb95SPQLw+ZmGReKVlRRFlQoaF1qXXX38dDRo0eGTVpl8oKwCkNUz7wfsDO0a85urXN1fe8L1541EARHLgcdlxYymrWrVqacJOopuzMsHB4SLKUhERZpkA3iTZIx8zZgxefPFFFYKfVNatW4evv\/4ab7\/9trKa9enTBx988AEO7d+D2Ek4kwqjRf\/3v\/9h6dKlGD9+vMp6zuHXw\/t3wSu7J6jK4rulm7T\/ssWy7glCRoJpMXh9scNkcPz48UcW7rSEaTmmTJmCP\/74Q70apaBWrFwJZ5fkO0jTV5SWskuXLsFFOw6tf0OHDsXDgLtwdMi6yWWzKoMHN9TnhNRAhFkGZ\/v27UpMffXVV\/jiiy8wb948NWTx++\/m\/EXW4u7OjN7A7du3cfeuOVKIDxI6Kae0I8zUAOfOnUONGjXw8KE50ohWuQL58qBUsXxwcY7fEdrV2RHzNxxHcGjiaUAEwRbJmTOnGsb84YcflFWbnShay2g1S2vo1vDJJ5\/g448\/VilBvvvuO9Xu4pIyUcj7Tv\/+\/dG2bVvlltCwYUN131m6dFm6CE5ByMyIMMvgPPvss+rmSN8VCjMOYfJG3KuXOUeMtXTu3FkFDXAIk9GdtGj9\/fffqFilBiIiUyaKXnrpJRWJuWXLFvVQGjx4MHLnzo18PiURHJKwUz9TbQQ8DEOYChcXhIwJo6X5u6dVm+4CvN7mzmVyz7SFopAiitDt4ZlnnsGsWbOUlSslwc48LkWfJVeuXFHWdg5p2tnbqWs3rom+rtqLIAjxIMIsE8ByL+3atVM+JHTaT065F9YHHDVqlKoawKHQvn376j5mZuf9lEInYZ7f5MmTlaWgWTNzhNGxU1cRGmYWfizNxInwBq5KNZns8EKDkuJjJmRYWCSfEYyWE4Ng7t9nzivAwdrkyVQzCUxRcTjws\/wTgw34foT3iaJFi6qo0MioaIRFRoP5nSNYXDr2pB2PU3gcCaB5XFrGmKqHlrIRI0aojle7jp0Q8CAIl2\/445rvfVy99eR05aY\/bvg9EJ80QYgHicrMZNC5vlu3bsie3Vwqw9qoTDrxLliwQGVBZ0JM+ozQL+arrybgmwUHcemhfbKjMuM\/9lfI2346Xu\/UQPWwFywx9+y7dW6MWzfvYevOY8jm6Y62jcpgfO+Eo9YEwVZhYA39uypWrKjqcxJ2PCiYaJnu\/dUGPJMvW7yRkU6O9jhy3g+ubq7xihm2mrRrfPbQluaGWDCdRUBAgLKUcejRsGyN+XMXPN14L4j7uGGaKGtbvyQqFo87mey+ffuU8GR1A34+Xt+BQWE4qp1vfBGXfCd2umqUyWduEAQhBiLMMin0MeNwprXCjP4v7733nhqOoNWNFi1WELh8\/jT+ve6Jc\/ejky3M4jv27Wvn8MHcu6hZqYjqwT9+MJmHOxjppXXcgeBATO3b2LxKEDIgu3btUr9nRmYa0N+Llum0hAmoGXBDizU7a6y8sXbtWhUkxKHN5JJWxxUyDvw9792791FaJSH1kKHMDA6d9Xfv3q1ymRkTL5ak6m1as5hfjHmO2PMlJ06cUBUFUqrd4zu2uzsTGpqHSvkWj\/1QzG2cT2mqDkGwBerVqxdDlBEj71dy6bemnz4XP7ETUHMIMjkJqGOTVscVMg4U4\/xdC6mPPPUyOMxPtHr1ajUswqEKTv7+\/vpaMxQ6ZszCJy5efvllNdzCoQ46\/1PcMRCgbEWzjwqtYrRixTdxKDI+4jt20dKVEK4d21xUmsXEn5zstSmFulAQbBIOJyaXGYdmYNqCaQiJMA+NxoePj4\/KIci0GQZ02mekdEpIq+NmZHx9fZNdyo5RuvQ9jA07tBTBlvAeb+TA4\/vduHFDzTOa\/ujRo2rekviqMtDqSUuuZW1ljlwYn4GdZ6Z1iQ3fgxUs6JecGBzqpvHAgM8mjpwQJik2iOtzcj+mYyF8Zlimm8nsyFBmJoA3RJY5YuJKA5ZKef\/991Hp7floVKuUcvSlkzGHMpcPb4ZsHonnMOJN99rl81i4PxjbTt2Fi6ra\/yQUZicv+OLwT92UP4w18Nh3bl5Cm7GHkMNLu8Dj+RnSCblykWyY3v95vUUQBKfRTogMisTbDd\/GT21\/0lvjhg\/A5cuXKwsHO0FMCMtI7pSSVsfNqFy9evXRkDUDLJhf0hrxws4yffSMoC3jkcwgLNYYpk\/u+fPnlXtKz5491QgJExYz9RCPz8AOBlYxuTiPZflIZw5JFumP\/ZgfOHCgyltZtmxZJQh5vD\/\/\/BMPHjxQQ9P0U+bQNANUGMlrCCT+nfn5eL4MOqPvcFwSgumRWBeWOfx4fi1btlTHow\/0X3\/9pT4Xh8FXrlwZ7+fktosWLcLWrVvV93n27FnMnj1bVbnJ7Igwy+T8ueaY8i8zLGWh4VF478WY5VUIeyO8wRrwArx16xb8791F7frP4oZvQLzRY\/wBcV3BPHHX14zv2OypNWrUSG8VBMEadl3dhfpT6gO83O5p19+3Sb+F8yHJ3GqpTVod1xagMGDVkvgK0PMey5EFvjIBLzufLEPHDnOePHn0rWLyyiuvqH3mzJmjlllPmIm9GfFKX1zj8UwrGV1CuExrWfny5ZVFicellYtJwLmOIqd27doqsIqw5Bf\/HoMGDVLLBgUKFMDNmzf1JfO5c3+OjvC916xZ8+jvaKyjKKJg4mcj33zzjUrNZJyjJdyHovD5580darrEUPQxBRNTxRj7rFq1Sol5Y9nyc1KUdenS5dE6VtCoWbNmnO+X2RBhJiimTZumzMy8oNgjIryx0JmXF0NKsPbY\/2o3Eyd3d0Rp6wrXrQsfvXyMIAiPKf99eZy8dRJggv0QYGL7iRhQf4B5ZSxoheED0RK6FCxcuPBRzczkkFbHtWVozaGVMD5hRniPs4Siifc6QtEUW6DxWKybyrJZllCwUdQZCYEJj81z4PHo12f56OY6lr6jyKOlyljH9rge8bS20fLEoUYKIYo9w2WFHefYx+YyrWrMXzd16lTVzjZuH9fx43tfijumWDHSt8T3OTncScsg\/Rb5mQ24jp8\/ob9BZkB8zAQFe2l0zmcCWOYk4sRs4ezBpBRrj7148GAs1rZdoPXCDs6YobcKgmBwJ\/gOTp7VRRlxAQauHagvPAktPIye5LDQ9OnT1cRSSnzApYS0Oq4tw04lrUXxTUan08DYnuKFwREUQLHh+riGO9mRjcsHkX5h8X3HFMpMZEwuXryorFOxBR\/he9L1hYFY9E\/mMCLheSYE\/cCMCjEkLuFFDCEaH5bnH9\/nZAoWQpEYG55\/ZkeEmfAIlnayFEvMSVStWjV9KWVYc2zenozJ2cODTYIgWNBnVR\/A8tLgHTwYWH12tXk5FkxlQN8vRlAanaKRI0cq60hKSKvj2jIUVqVLl1biJ\/bEdmNYkRPz1VFUMGq1U6dOyooVl5WHQ5J0bDegIz9FCUtc7dixQ299TIUKFZ4QgAY8B8K\/BZOF07I1ceJE1WYJfcnoW0afNApGVo0hFGYJCWv6zFkGKNCnLi6MklyWws1w9I99fEZ1xvU5eX7c3\/Bts8Qav70Mj\/bhBcEm+Ez7OY7Qpk+1aU2\/fnqrIAjkYdhDE96CCUO06QuLqT9M7mPd9a3iRnvg63NmtIeqPpcy0uq4GZGLFy+aZs2aZdqyZYvp3r17emvCrFmzhurFtH37djVxfuXKlWod56dPn246c+aMqVGjRiYfHx\/VfvjwYZOLi4upQ4cOpsuXL5u6d++utrWEy7HbDHieXHfgwAHTsmXLTA0aNFDL8+bNM4WHh8d5LE0Mqr8157nPvn37TAULFnxiW4MePXqY3N3dTSdPnlSfwdiO30+hQoXUPNFErFoX1+ecO3eu+pz9tGcBf1eVK1c2FS9eXK3L7MT9rQpCOhL24IF6\/Vy7QCnMKNCW9+5tCg8OVu2CIJg5e\/esaey2sY\/F2UCYDt44aLrof1HfQnhaUNQEBgbqS9azdOlSJUYoOjhvcP36dVP16tVNuXPnNvXW7ocGFGZOTk6mnTt3mgoUKGCqUqWKEjiWPPvss6Z33nlHX3qSqVOnmnLlymWqXbu2Wp4wYYIpW7ZspoCAAJOnp6dqM6DACtbvxcuXL1fnWrp0abXs4eGhXuPi008\/NXl7e6vPwM9CVq1aZerYsaOaN4jvc86cOdNUp04d0+zZs9W6pk2b6msyP+L8Lzx1fqtfH4d27YK3Nm8Yuuml4KdN\/ZcsQbkXX1RtgiAAs\/6bhdfnvA7Q3ScQiJoYlah\/kJB54LAghyATenRzyDCjP9pjBwpkJeRqFp46XRYtUr7Mlt4HdPn0cXRMsSijcysdlJlvafHixXor8OOPP6pwbwM6LzMnj9ZzVKk8Ugr9Jr799lusWLEC8+fPf+R7w\/cwisMTJn\/kefAc6awrCIkRGR3T+Tks6nEqGiHzk5AfH536Kcp+++03vSXjQj89BgdkRUSYCU+dbAULooC3N6L0ZcJHTWs9LDslsIB0165dVTJEOuES5s5heRyG9xPmWWOEEisUMPEik\/OmFEZPMSdRu3bt1PvT8Zdijc7Als6rfG9GqDI4gomCszL8zmKX9Fm4cKHKZ2Q8jHiz5jKn2PDvahQJF4TMCgMA4qswwNxhDLLq1auX3pJxYQ6z2NUAsgoizASb4MVZs5iSSWEY4Gv26aPPJR\/epFg6hg\/tyZMnqzZmnGaIthHdxEzXRqJbho5zmCClMHkub5K02BnJHhlpxZI1llFVRqZ0RmKlpERPRoflZJYuXYoNGzboLeb8dy1atFAJKZnPiDD1CpcpcL\/88kvVRmgNXbdu3aMw+7SCUYj8m1IYGhFqzOn17rvvPiqTQ4E5dOhQdT6MkLNMriwIKYUdu\/juUbwueD\/LDDAKlvnasiIizASboFTr1mAwOSULH2ONU0GUET7QmRiRYoy51P777z\/VHlfIOa01rA9nWNZSQvfu3dXDmlYzphZgWRES1\/syP9CYMWNUnresCi1d\/M4svx+G4xtileHzXJ6h57djrUYjwSnbOW+E2KclefPmVX9TikO+H6GgZNkbIxUAz4cCkmVoKLzjSgcgCIIQHyLMBJuhi\/bQZbU4Ti1TYRiT0LcsLphrxzJ5IR+ufLizvmhqQGsZ8xnFhu9rmcuHReh\/+uknjBs3Tm\/JmhQuXFifewzr8Rlw2JnDvgZ0CjZ89X744QdVKoaWKiOHUlpAfxf6H65fv15Z61i0mrCuIDOpG5QpU0YV6yebN2+OM8mnIAhCfIgwE2yGam++CdpAqjRqBAdHI7V5ymDyRz5EOfxEEcS6dRRNHGa6du2acs7nkBRr\/NE6Qwd8DnumFJrgOYTJ992\/f78qx0J\/CfpM8QHP4VUOgfXr1w+NGzdWwtAySEAwDxEacN6wnvXv31\/V6OOQDUUtCyVTLHEYMzX+dvHBcjQM6ODwKotGM\/N9QjDJJ8uOcT9BEASrYboMQbAVVvfta7q+b5++JGQ1PvzwQ33OZNJEkMnPz0\/NDxo0SL0OHDhQvcbFmDFjrE7smRyYYJM5pAw++ugjfc6cc+ncuXP6ksk0dOjQZOW0soYZB2eYMAAmDNemj2AKDpd8f4KQmZA8ZoIgPHVYTJmFi2ldYiBA\/fr1UahQIWVJpBWREVr379\/Hrl27VK08owZhhw4d9CNARbXSKdojDct50frK9zh+\/DjeeOMNZbVbs2aN8l1kYActpfQZ5GdhiRxa8Rjxa\/ijpQZ\/HP4DvRb1gqubK0IfhuLhyIfwcJYSZoKQWRBhJjxVVu68gDNX7sLRIe5R9Wjt55kzuxveaFVBb7GOwKBQ2Meqy5ZU+N7ZPR77OQmCIAhCWiPCTHiqvPPNZjh55YL9oyQZMbGzt8fp01exdrw5rYQ1\/L3tHCYuOQbvHG5I7q+bmu6OfwiGdq2MtvWL660J0+jDxYi0c0BAwENEREYhu6cbXF2d8VATicEhYXB3c4GnJvTCwyNxPzAIDpoY9c7JhJCA7+376hvIlycHwkJDse+HbuaDCoIgCFkKEWbCU+XD7\/6BvadXvFEodvZ2OH\/uBv4e1VpvSZzVuy5g4d7byJPLPdnpExg56XcvGJ1r5UUbK4VZ7XfnonWz6th74DT87gSifNkieKZwbpw8cw2XrtzGM0Xyolypwtq6ABz47zw83F3xbN3yiI42Yd2WQypK9AVt\/227TmLzpI76UTM2t\/2D8c7XG1CzTD5EqnrFycPD1RHfLjmEIoXzqu8rufDveunGPVyd19OqMkabD17BJm1ydnocwZtUaLcNCArH0B51kCt74hbYVTsvICQsIkUW38joaBQvlEP73s3RocLTYWbz5nD39kZEcDCqv\/kmylgMvWcWVrz1Fq7v3Yt3jxzRW2KydeRIPLx5ExW6dkWxJk301oQ5uXgxzm\/YAO\/SpVHv44\/11qyDCDPhqZJWwmz+7lu6MNMbkwifiRRmXevmxwv1Ehdm\/oGhKN19Bt56tQmioqLVQzUyKkqJCFrGHDQREKU9LLmO4sDJ0UGJRlrWiLOTOQqVn3fGX1tw+PeeKJjbU7VlZC7fCsTRC3estjomRPnXf8dLbeooi2Ny4d\/hxPmbmP1JI2TzMFd+SIgvZ+3G9TBXOKYgft1e+5tevXUf\/duUQINKT6YFiU319xaiWoUicea8sx47+PvdxdLRbfRl4Wnwvnat59BemTz7xTFj8OzQoao9M7Fh4EDcPHQIr2\/cqLeYiQgJwYfu7qjFxNq1amH95Mlo8dFHaKkn+o6PX+rUwUVN6DUdMgQn5s\/H9YsXMSGLyZQU3G4EQTDwcHNC3tzZlRCL1MRWeETkI8sOxRiX+UooyLhsiDLCZU5Ukk6aSEuJVehpwLQVdIxn7rYlS5borZQHQGj4k\/nckktkpFncJneiWOarZS65hHByctDEnEkJs+RODtpbOWriLD4\/ytjk8HRB7hzu8M7ulvxJ299LO47wdGFWPWNyiCfH3o+VK2PvtGn4QvtNdtemue3b48HNm+ijzf9Pm7YMH65vCZxftw6faG2vaVM\/bTo6d65q\/75sWcy3qCt8UrsGKQpjc379ekzKlw\/rPvkEr2vruc25NWv0tcDGTz\/FO1objz\/WzU2JK4OE1sXFwV9+wbNt26LX9u1o+c03+PTkSaybMkWt42c7u3Klmid\/adtNr2D2Iz6vibIvtftgs3Hj0O\/CBVWq77J2jKyEdXcKQRAShENdFYrnVw\/+lBChCY9alZ5B4bzZ9JaMAYsnM7cXC7Jb5h8TkoGmySneKc2TPXF\/zgg2g4MTa5s8iVfRoljTrx++0P5gf2nT7hUrMLtVK0zX5scfPYqZo0frWwJjtPZPNOEyS1s3QhM6k7t3V+3vnzqFHUuX4opeZeKbTp0w8c4dNW+Je+7cuH77Njzz58dM7Rh9Fy7E1y+8oNYdmzcPK8ePx09aO49frVcvjPM0W+0pAONbFx91tM\/0ivZZDO5o55hLr0\/8tXZuE9q1U\/M8592rVqHP8eNqebx2fEuY2zJPKkY1ZwREmAlpzqVLl3DgwAE1b9QXTAnTp++Dq+sYzJ5tLq+UXgQHh8PO7mNMnbpHb4lJYFCI1ZaYhAiPSD0LU3Jg3cndu3erlBTWwnJX3J5F4JkuwtZxdHz8dypefCoaNfodhw\/f0lvSBg5pGowYsRXZs4\/Dhg0X9BYhM3F11y5c2LRJlZkj9FC8deQITmtCJfT+fXOjTmRIiBIxBpQ7rSZNUvN5K1ZUD+mwgAC1\/LsmWgJv3MDqvn1xavly0GPRWPel1v7Ds8\/ixypV0Ourr5RvW2wMwd9Au05Juc6d1TGCtGt2\/w8\/oLNF\/dkXpk\/HBX04fd9338W7jgFaiRGsCbHvXnwR\/c6eVcs8t\/9p58hz5TmP1c49LqZoorX9O+\/APU8evSVrIMJMSHOYlZ25qJiTinUEk4qhdY4e9dX2D8D9+6EICwvEa6\/N0tYNw7ffxi2UUgNnZ0dcPHcP57Tp7Nl7Wos9Pvpoifa+A9Gz51IEBJgLVIeER2L\/8SvKdywlcOhs\/9FLuOZnrgNpLaw1ybJAKZ34d3J3d8fNmzeVQGONT1ZMSAz6Q93WeuLbt29X21OgHTl8KE1LJCUXR0d7+PoG4fSpO5qIDEKOHK7aeZ9GtWpfoVChb2IIfgcLMZUSKMoePgzHuTN3cf16oPb3isCDB\/5o0WK6+g1Pnbpb31L7vXPsU8jQrHn\/fUxr1gxGdjleBXv\/+ANft2\/\/+IamQ7HkqFuSCOWOa65c5gUde93aNkDbl8729g4OiAoLU64CdnppuWwFCqBU\/fo4\/t9\/qK8Lr9iYtOvUTZ83cNemiKAg+F+4gByaELLEuJvFu047d+P94+O\/v\/7CAE1Yjbt+Hdl9fPRWqHPkufKcee6x4ZBteU04tvnxR70l6yDCTEhz+KBmIW8WgE5OyRw+SKNCI1G58nAUKTIaQ4eu1lp5y2Pf0h4ffvhYKIWHRiGHV+rlHsuXzwPFS01EqVJjUbXqN1oLhxh5K\/PAn3\/u1R7qg7TPNgOHDtzCM8\/k0m58qTN+ZKduudbDhKcrV65UpaVSMrFUFC1fTtqDgIlaA7TeOOs9sv1GPL1awvdnglUmih05ciQmTpyIf3f+C0c9qMGW8PR0xrjx21G23CjtNzkChw5d01r5uPLSPqP\/I8H\/+y8H1UPSMYVimzg52ePixfsoVWY4ChcepX0\/LGrP3xF\/TxT7f2vvOQD9+66Bh\/adObmk\/D2Fp8drGzYoy1Rsmr34Ilz10mKWUJxZEh3LJcLR1RUnFy1CLq3TNFDrALWaOhWNhg0Du4WGlf6S1om6uHMnGmjib2mvXqotNtw2XJ83CNYm1xw5VASk\/8WL5kYdw2Ye7zrteKYE3Df+nTABc199VQ3LZtPuD5bwHHmuPOfL2rkbRGmdQ\/qg9d24ES2+\/lpvzVqIMBPSnCFDhuDw4cMqmzsztW\/bti3JNSEd6EWthBgfZJbCi+2GUPoXLm698d33e+DuEbc\/R3JwcTJEoGV2dd4M2cvNhT17zqNB\/bG4tckfDi4pu6QiIqJQt2oJFMqTsP9GbCikWPQ7NSbL4Vim8DDa+Hebqzsbx8YoCO9j0SOOUsENSROY6QXF2ePfk6V45Dzb7fC\/t2dhYNffEckh7FSwnFGcmY\/tCXt7S8d84zfsiSnfb8aKsatxeu8NOKjthYyIm7c3fPLnfyRsSJA2NdOESrLQhA2PeT+YMsrMn02aqDuSYU2bqC0PuHwZ3bRO1MY\/\/oCf7rMVAwop7YWO+YRijy78FGa1+vTBYouo0ZXvvIPKejH+2v36xbuOVri4uHHgAFZp9\/5xsUQnua+JvA3aOfJcec7jLNJofOrsjIm+vij2\/PN6S9ZDrnwhzWGx5wsXLmDKlCnK6uLm5qYKfCeFqEhe3Ly1cTIPH5phO5cDUK9eWVw8PxnvvlsLwcGpVww8LII3Q77v45ui+X35HvdRsGAebFwzAC3eqYiwEOv9suLDQhdZDa1cYWFhqTJZ9t45RMk2RlvWrFkTXbt21dfEpF69ehg+fDhOnjypinczEKBa9Wra3y3l30daEBTEv53xe7I8Rz5k+HcOQ5+3m2H8nDfg5OGcKpbQiAge2\/ye0dGWdgsemwET99H95Tpo3q85ytYphCi1vZBR6Tx\/vhI9hL+w0hUqwLtUKXODBcF+fjH8zgK1KdIigIZrwh48QFFNvJSoVg2vajcIRmS+NGcOqmid3Z4uLsoXq0XPnvAqUkTtM3DrVgypWFHNW0LrVoG8eeF77Bje0I4xrUsXDNmwQa0r16kT2mpCipGXXHdaE00f61by8gms47nzM8Rm5dtvg04QjCztpU8vaRMZXLw4Bm7ZouZ5zq3eeAOTNKHnd+IEGLLwUb58j\/bpqk17pk5V22YVJI+ZkOZwGIyWsuXLl6M9fSws2qzJY3bhwk0s+aIVVq48g5w5XfH336cxadImba35p9u1ay3MmfOSyhdGVu+6iPm7b6ZKHrOeTXzgFGhCeGSUEnvt2s3Q1tKqEqKJkYr49df2KFcuD8I1AVOow3S81b2JJmSSLwrp0zZv2S7s\/7kHvL1ie4PED2sycrK0diUH+oSx5mR4eLiyajLaskqVKigQhw9IXPAcLmq94ZIlSypL25Vbgdh7yhedn3vygZRUmMesfcta2nklX+zR1+vcFT+MfLEibl0LQi5vN7zxxlKcOMHhTIolT0yY0ByDBjVQ209euB8XHzjAKQUWM\/5NbvgF4t3niyLMLxwens7444\/D+OWXf7W1ZvH14YdNtY5LKzXfbMgKVK\/wjErrkWy09\/S76YeZQ5rpDcLTYJj2d+BdiXL8zSVLUM4ipcXT4Pq+fZhWu\/YTkY+CbSEWMyHNof\/RtWvXsH\/\/fuzcuVM5mR\/TemzWYlgr2rYtjQYNiqBUKTrG2mP8+Paa8JqAefM6PxJlZlLvpkMn7YaNiqBp02Lq\/Rm83bVrde19J2uf5U0lyggdu1PjXseHeFBwWJJzf9EfjD58efLkSdHk5eWlRBmLiT\/\/\/PNo1aqVVaKMQpvQh3D16tUqbcbSv5fA1c16cZlecLi4TOncaNGyBGrWLKhyo+XI4aUJ\/t7a3\/CLR6KMpKRagSXMS+fm5ojmLUqgfn0f5MvHIU17\/PxzN+09v3okyki0sg4LmYGXZsxQ9lcvJ6enLspIdGTkEz5mgu0hwkxIc3r16qX8k+gUzlQKfGi\/+eab+tqk8847NbSH2ZcYPPjxAzS9MJl+UEIwNiy106hGSfXQTwkUCWVLFEiyj1lq0rFjRzRu3Bi5YkWGWQNF96BBg9RQptmCp6+wMczDimZOn+4Lf\/\/B2udO21xJlkmDR49uon7Db71VXW8RMiPVtPucv\/ba1CIX2dOEw4YvDBmiLwm2iggzIc2hJad79+7KGsTIPQ5h5tcdR1PKrVvm3FP0g7ImrUNqwKE+Ck3CSEYDRo+aswQlH3oW5MxOR\/CMxYMH5vQeTLVhEBgYqP7mQhLRvjJ+bymf9OMJT5X+8+ahweDB+tLTJXuhQiqjvmDbiDAT0hw6hdOSQqdwCig+sJlOIaVw+Oyff\/7Br7\/+qpzfDx06pK9JO5iry9fXVw358f39\/dkfBoJDI7D36OVHNS+Zj8zFxelRUlGmXOCyMRlDryzTw2UjJQP3u3Ttbqql3Ugv+L3QInpEL2S8YsUKFNF65yxP5ZxK0YWRLKWkfZ9xixBrJ56LnRLA8cHfqgGT\/UZGAxHa3yO5E\/cPV+WgrHvP2\/5ByiftZgqmG7cDEfDQMkhGeFqweLcgJAVx\/hfSnPnz56toPsPh37KNzv8O2XJoPYS4f4bMKn3u3HX8PfLJIuazZs1Cly5dlDj6\/fff0aRJExUduGrnBSzafxt5cqbc+b9zrbxoE6sANwUmxSaTqVKAMML0XmAoir38M3p2bghPT1ds2XEUN27ew3MNKqJQQW8cOHIe5y7cVIKMYqVyhaKoULYIDv13ASdOX0HJ4oVQu3pJ3PL1x5K1B\/Dfn73gk8HKMsVFiCZY+07djKL5vWIM5SUVF02wbj96A9my8W+a\/ONQJvveC8LmSS\/GSIHB4XV2Gt59911lDTV+p\/\/+dx1bD19VJbdSAn0G32pbCfm9zSlXjh49qvLO5c6dG2+99RYWLlyofstk78mbeBAcrgrhJxd+16y3WaVk1sqYLgiZARFmQppD4UK\/JT7wKJ5oHWAVgBEjRqDn+HWIdMmWoDC7csUXWyZ11Fsew1QOHL7kw42v9tq2OXLkwJrdF\/H5zAPIpz0Eky3MtIli6\/NuVdA2ljCzhKLwzh0\/lCpVGj3Hrce94EiVLZ7vy0tLPVy1\/83nwX94ZJNuuWE9Q27IZlpzzA9UpmxbPNJcv05IH2bMmIHevXtj+vTpKifbO++8o69JG9hJadmypfr9sDIGS1ox0EIQBEGEmZAubNmyReW4YgoGplJo06aNaj995Z6aOKQXFxQqubzcUL9izKzRhDnRNmzYgBdffFENozG1g6OjIz7\/\/HNllUopvDScYmWupwCkdYVRkCyDxIc4oxidnZww4osv9K2Ep8XZu2dRyjvpqTkYOVyhQgU1P2\/ePJXWxdJfLrXh0Pu5c+dQtmxZnD9\/XhP3d1CnTh19rSAIWRkRZkKG5YcffsB7772HH3\/8UQ1BERZMZ2qOhg0bquW0gA9uWudefvll5fR+4sQJqx6qvkeOqESRNI05aEKuUO3a+hohtbDrbQe\/b\/2Q2z233mIde\/fu1f4sdqrjQIFP627lypXx7LPP6lukPky4TN+8AQMGPIqAtRzuFwQha5I6XrmC8BQwcm6VKFHCPCSoQStEWhfO7tatm7KufPrpp6oou7XlpZb37o1vtAf9VE00\/iLWkVTn651fA9m1v8+ibnqL9bDUFAMXKMpoCWWJq7SEw5ccyvzyyy9VB4MCjUg\/OfPx+6Hf0WGeiG3BesRiJmRopk2bpqI8Oazp6emJSpUqoUePHvratOfbb79F06ZNUTGO8iexmdW8OU5v3Kh6Q565cmHQ3bvmFUKqYDfMztzVDNAEzpSk39YYTEJee+01lSjXGG5PC+hjSb9Lg\/79+2PSpEkqOW\/btm31ViEz4DbWDaE3Q2H6LvM\/aleeWYmL\/hfxbNFnUTVfVb01YQ77Hsb2S9tRLGcxtC0tv30iFjMhQ\/PBBx9g6NChKsCADtvpIcpYkJ3QN4iWlX379lltNRPShmWnlpnLTfKO5g70XtFbtScFCrLq1auriNu0tpi1aNFCDcMb+d8mT56siv0bxeCFzMGBGwcQek\/7YXoC43Zk7vxhFKDt\/myHJaeWoNroaui9PPFr8H\/L\/odqo6qpfbiv85i0He3IKIgwEzIsFER\/\/vmnCiqgtYH+ZXy4Me1BWsFi3kxzwIhQpjhgyo\/mzZtjqhVFdp0snMnt0\/jBn9V4b9V7gKu+oN3bf936q76QNDhEzfQVRYsW1VvSBgYWcAiTQ6eEiZLZuWDUspB5eO3v11RHAS7AZ2s+MzfGAYc7C39TWF8CfB\/6wu49RnAD68+vR8XpFfH9vu9h94kd7Ibb4T\/f\/9S6uDh37xycRzvDrr8dqv8cs7LEc38+B7sB2jE+tcNnmx6fD63NR24dgdMoJ7XfS\/NfUu0OIx2UFcwSuxF2WHhiob5kZv6x+Qh9EArTWBO2vLEF\/l\/749cl5muQ77f\/+n41T\/qt6YcK082BNr8v\/h2m7837cN8Ivwj8c+kftS4rI8JMyLDs3r0bb7zxBjZu3KisHBxSHDx4sMrMn1Yweq5BgwbKQvbcc88pp+3ChQsnGMG36+uv8badHY4tXw7KMdpEAn198Z7Wtrh7d7WNkHz4QLl5\/aa5tjzh80ybn75\/unnZCuh0T+hrNmfOHCxZsgSLFi1SbWmB8X70Z\/vkk0\/U+3388ccqqljIHNwJvoOTZ0+af5d80oYDi08uVutiE2WKQkhkiL6k3SPstbsELcAaHk4eOH71OPZc24Oor6MwpPEQVBlTxbwyDkoNLIXFLy9G8FfB8HbzhvtY872J4u7mg5u4P\/Y+Tn1yCuNWjMPs\/2ardaTzws443e80roy8gr+3\/Y1tl7dheOPh+Hj9x\/oWZtGH20CX8uacewZdK3aFafzjodrwKO3D6h2lff33odbYWmr+gv8FTFs6Dcf7HFfLppmxhnejgLweefWFrIsIMyHDUqZMGWzatAl169ZVRdEDAgJU4tpnnnlG3yL1Yb4pJgfdvHmzEoR8pZ9ZQiWm6g0YoDrNlo9cXngs793ul1\/UcnrAFA3r1q3Tl8xQINDyFxzMUstmKEjiEiV0WOd3bGv0+LsHlOK1RPuy31\/4vr5gPRRKtLpyYq3PtMJw7eXfg1Uw+vTpg681Ab9mzRrVLmR8+qzqo6kqfYFoF3yPJXG7Wtjb2cPBLtYwtv50ZrQwtJ\/izBdnqu3GPT9O+wEBx24fM29gwYwDM1CscjG0K9MObk5u2PDaBlz\/5Lpad\/zgcRx59wi8XLxQJncZTHh5Akb9M0qtQyTwY5sfUTxHcfhk90HBEgWViBrx3AicPXDWvI3GpF2T0LJBS30pfvKNyYdp\/5um5msWqok3WryBF+a8gBKTSmDzkM2qPTatZrdC9UrVUS5POb0l6yLCTMiw0E+HFgbmMqPFgYEATJPBKM20pF+\/fuo9OITJCNDOnTvjpZfMpv\/4aPn+++wwP0K7D6JsjRpw9rC8c6cdDJD466+\/sHXrVr0FqpQVU0Iw4zxzvxH6PbVr105NLEZuwJqgrHJgi8KsUt5K6FCtA2C4+Wlf7rMln0WLSi0QFG6duIqv1mda4+Pj86jGq3EOQsYnKjoKC\/9d+ERvLPROKDZffFKYxI7BU2JMJ9oUHVPgkWxQQq7Y1GKw+9gOdh\/YYeHxhbhw\/wKeyRGzY5rTNSeuPbimxJyrozHer4kn93zKqqfQ1lHIGURERZjfV8O7nDdmHTEHxvy45UdMaD5BzcfF3eC7sOtrh6kdp6Jv7b56K\/BHxz+wZvcaVC9SHU2KPTlcT\/+0oIggHHjngN6StRFhJmRoGjdujM8++0wNZVJcWBMdmRqULl1a5S6jEGRh9sRoMWUKHldDBGifekmPAkwPKDJef\/115SNncPr0aRQrVkzN83OcOnVK+T25uLioyQhoYKWGCxcuoFatWsq3ztb4q9NfWNJ1CWCMBIUBo5qMwroe6+DhbJ3wja\/WZ1pBH7Zx48bh77\/\/VnnwCIVwWkaCCunHmnNrlMO\/KvtFzWXoLi8oR\/fYuDi6wNH+sYqz56NZ12aa7FJDfDHQenkR0RE4\/M5h3Bh5A9fGXkOXCl3UMCDFUWwKZyts7g1awOFTd6fHHRFDiMXmq2ZfYcLOCbh8\/7JSDFXyxT2MetT3KHJ\/nBt7Pt2DfnX66a1mRmwZgYrlKuLgxYM4e++xBY7YfWSHz5\/9HNt7bddbBCp1QRDSgZnNm5s+0y65Ydo0xtVVb01fBg4cqM+ZTMOGDdPnTKa1a9ea9u3bpy+ZTF999ZXp3Llzan7IkCHqdfr06abr16+reVvjTtAdEz7WHn9faNNAmJafXq6vEYSnR9eFXU34TPtNDoMp78S8euuT\/HvlXxPee\/w47ji346PlnVd2mtAHpl1Xd6nlwzcPm9Az7kf3rYe31DqtA6aWv9\/7vcl+pL2adxntYuq3up+aJ46jHE1fbv9SzWMwTNsvb1fzJM9XeUy\/HvxVX9LWvw9T\/7X9TR+t+UhviUlEVIQJfeM+p8DQQBPeNK\/bdGFTjO0wHKY1Z9foS4KBWMwEIZ1oM326spTRsPPi7MdOt0+L0FDdu1iD\/lTMA0dofXz11VfVcO1s7Tw53MbhYg65iQ+UIFiPpUN\/ZHQsk5UF9X3qI3ex3LB7xw5279uhe+XuwH3zOlrGfEr64J0V76gIx6qfVcV3731nXhmLfB758M0738Cht4Pa9v0\/3sf+t8wRkXcH3cW3G75VUZd2b2nHyV8Vnzb8VK2jOT8s8nE0u1+wH4LDH\/udNqrRCJNnT8ZXzb8yN8Tio7UfqVdGe9oN1Kc+dngY\/hDZP8+On\/r8pNY3LdYUdarWQZM\/muCI7xHgGtB6ZuvH+3xgh18OpJ\/fra0iCWYFIR0ZnyMH7gQE4OundNl99NFHqhQQoY8ZSw5xWNZoZ8oG5oZzc3vsb2LA9fSnYxSqrcH0Avk\/zq98b6h+5\/Wdh64VuppXCsJTghn\/lx9drkKxc3nmUuIoIW49vIX8nuZAossBl\/GM1zPYcWUHnv3+WZgmmNQwpbe7t1qfGJfuX0LRHE+mfbn58CYKeBbQl8xcf3AdedzzwNnBnEeM11M2l2yPhjopDu+F3FPCLy7oH\/YgLKaPJIUoh1avBlxFiVwx\/X5P3jmJsrnLqvexhL55Od1yxhhizYqIMBOEdOTU0qW4dfgwnkvnguf0H2PkKtN73L17V\/mL0c+JmeZpLWMheNb\/5DJvCfRFo0WN5acM9uzZoyJhc2ji0tagf4xfkJ\/y06HvDNMEqJQDgvAUYaThuv\/WKWHm6umKkKGPLWjWwrxez017DqZJ8qjOKogwEwRBEIQ0gOko\/r36LxztHJWliykvkgrTYnyw5gOVhFXIGogwE4RU4Nw1f8xafxKuzimz0gSFROC9F6uiUG6zv5e1\/L3tLFycbMNCFBkVjeIFc6Bi8dx6i3VERETGSBPwNOFd0clGvk9BELIWIswEIRVYtv0c5u\/1Rd5cHuqhnhyoSW7fC0LX2vnQ4dmSeivTKGyAvb0dxo9vprfE5PSVu3hn2i4ULextE+ksok12cI4Mwm+DmustQM2aP6Nv39ro2TPuwsb9v9+Ko1eD4OT49OOR+He46fcQ37xTF02q+eitgiAI6YMIM0FIAszOzktm4MCBKucXE7KS1bsuYP7uW8iTyz1FwszvXjC61s2PF+oV11uBN95Yipkzt2lzDtp8A0yd2hpeXi7mlRrnrt3DpzOPoJiPjQgz2CHqwX1M7dtYb+FnG6b9S\/8aN+3826Jfvzqq3WDUzF24b\/KAgw0YzOy1P8RNv0D0fM4HTaunXS4zQRCEuJB0GYJgJSw0Xa1aNSXKGL3okUZZ+z09nTFn1n+amOmrTYM0UcZw9+za5IE\/\/9yLHDkGomnTP7F3r7nUipOTvRKL0dEmJQqf\/mTSztEVQwdv0s6\/n\/oM5lsNh2ft8eGHS7S2gUpwhoQ8TiEQFRWthOXTnqL0V9sYVBUEIashwkwQrIT1MI36iczSfvPmTTWfFmTLRosYQ8Y5MSM4ZQIntntjy5azqFNnAuztRuLixQA42sAQoCU8Uw8PFrCkeOVnMM6f58llD01w7oW7e1\/UqzUDObxcNbGmNQuCIGRxRJgJQhJgqogBAwaokj2DBw9WbXPnzIwz71dKCA9nDRZW1+RkOTxp0iaWSnqIcuXKYMf2\/6FkyZyIjGS7bREWxs\/ApJWWVUIJz5VtwejS5Xls3PQagoIjlLVNEAQhqyPCTBCsJCwsTNU1pJ+Zk5MTZs40h75z6M5OWYNSB4qySpXyomfP5zQR+BxKlcqjtRoiJwCNG5fE2bPDtXN5H\/Ub+mjnxeFA21I1odo5NW1aFG+++RyGDGmqt1JgmmsfvPZaLe17m4IFC7rAI7sLIrTPLBYzQRAEEWaCYDUBAQGPst63atUKjo6OWLduHbJly6ZkkYODvXmyT+ak7WuvTbQ0lSmXG7\/\/3hETJ7ZA+fIUZn545ZUaCA7+Clu39kTJkrnUeZAo+pZRGmrHYLqJpz\/Z42FQBBo\/XwwzZrTHuHGMJmUJ91CMHdtWE2QTNFH7ojp3g6DQCDwMicTD0Kc\/qXPRXiOinn4ghSCkNd\/v2we7N9\/EtL179ZbEWX32LOzeew\/91q7VW4TURKIyBSEJfPPNN6hRowYaNzZHHM6ZMwcnj\/+Hlq8ORL9pW5A7J6Myk3dJUdTcCwjBqNdqoE29YnorcO7cPeTP76mCAuLiXmAIOn+xBnlzetiE3SwiMhqVi+XAFz3r6S3Avn3XUatWIX3pSY5dvIN\/\/7sGZ0fbyB0WGhGFV5qVQw7Px9GvgmANl+7fxx+HD+OL557TW6xj2alTWH3uHMrnyYMP6zyOWr714AEm79mDsIgIvFS+PBo984xq\/3H\/frQuWRIn7txR+9bROo29qlbFohMnEBAaijerV1fbkaO+vliotY9q0kRvMdNs5kwER0bisr8\/Rmrreuv7DFi\/Xs2XzW3ORRil3dN6\/v03Zr30Esbt2IEvt29H5Xz51LmMe\/55tY2QeogwE4QUEhwcDHf39K3tFhgYiOzZGakpCIItcdzPDxVZck27J7zRoAGmtm4NL5eEBX7PpUvxpyZ4xrRvjzGa6ImMjkbEsGE4d+8eSg0ahC6tWiG7szN+XbUK0958E31r10b1n35CiCbWIrVH+AulSuHbZcswrVcv1CxYEPXGjoXphx\/0owOFtQ5lm9Kl8VPbtnqLmZ1Xr6K+jw9yjB+PiS1a4C1dmC3RhF6nKVNg+vFHtew9YQKeK1YMi19+GYcYnZ4\/P+rMmIHnihbFhGZx51cUko8MZQpCElim3fwYkclhzREjRqhAgKvazS2t4XuMGzfuUQFyWuoyIvTPmzhxoppnHjhByKiM2LoVOTXB4jN58qOpiDY1\/fNPTcl4MywZf+7dixwDB6Ll7Nk4rAma+PhTu6+YtGtjaKNGCBk6FD0qVVLtbbTr\/L0XX8SCzp0xQxNtK7X7zQdLlqh17k5OyvP07AcfYKom3Pp16IBfDh5EXbpbaO+98cIFtR25fuwYvtaEV2woykjsQfuXypZFp6ZN0fiPPzBf2\/eedr+jKCMUZSRabDpphggzQbASFvW+p\/VgmcNszJgxGDlypBIaK1eu1LdIOy5evIgO2o33A+0m\/KPWi82I1rL0ygMnCOnB7aAg3NfuB9f8\/R9NV7XpdmAgHU7pmwDQUqaJtPUnT6KaJuK8xo\/HqjNn9COY2XrpEpA3r75k5veOHdXrmevX0a1iRTVPahUsCPj6qvmwqCh0q1BBzRMKNWe+r8a7zz2H0f\/8o+b\/PHwYHqVKIZtz3K4Q8bFIE2J7r11Dt19\/henLL\/VWIT0QYSYIVkIrmY\/ew6xj4QOS2qky4qKR1pOOiIjQ7vcOqFWrFry8vPQ1GQfmgeOwL6HV8cGDB2peEDIiygsoOvrJKbYlicucNKGW39NTTZYoMaWJrDixt0\/Qb5TizMDSgvV548bYtmePmu+\/fj2+a91azScVdkahCT4OqQrphwgzQbCSfPny4d9\/\/8WuXbvQuXNn1fb9998jt+4gm9Zs374dw4cPx759+3BS64EPGzZMibWMBEUsLWYcmqVI41DwgQMH9LWCkHEo5e2NKiVKoF6xYo+mhsWLo1KhQkBkpFmkhYTQIRTda9SA\/5df4nTfvqhBq5cFajhREz7h3F7nNX24spK2bt6xY2qe7L1+HeDxE6FQtmxw0N6H0ZP+Fy+iZ9W4a9QaOGqi0c2RiawfQx+2N2rWxL8ffIBS9JmLhZMmGl1j7SOkDuL8LwhJxNLxnkOMxbQbclqzY8cOZSWrpPuekCitt\/zXX3\/htdde01tsG\/a+586di169ein\/PA4FE0a6fvzxx2peEDI6\/92+jSoUMto9YlzbthjUoIGqv5oQvZYuxR9bt2JIu3aYuns3QsLDYdKuj7OaYCutO\/9zKPK31avx1\/vv4xXtPlBe6xQ214Qh\/cvIh2vXYsP58zihrSdTtOP0X7wYz1WogC09e6q22Hy8bh3cnJzw5ebNeFY7VtX8+dFF2\/7Ww4d4+YcfYJo2TW1X4+ef4aFtt027dsds24aH2vkxvUaxHDnQsmRJlMyVC+9pIk5IHcRiJghJxNK\/Kz1EmUFsnywOaxpDgxkBy6HgnDlzqleSHkPBgpBe5HJ1xS+9e8M0fjyGNGyYqCgj9Clb+PbbuB8SgvHNmilRRkppgufm5MlKAOXQjnt01CglyshHdeuibenSap5wnm0GTHfxVqNGmNGhg94SNw\/CwvB506YqaCBc6+zxfI\/cuoVz+jmQA9q5FdLue7TicH2QJsyM9w+ldVBIVcRiJggZhPHajZ5DlxQ14dqN0c\/PT1meXLUbdkaBn4EWR+aCO3XqFFxcXFC8eHG89NJL+haCIAhZGxFmgpDBoLC5ffs2SpYsqbdkTGhBu3\/\/PooUKaKS6wqCIAgizAQhw0A\/LCayZTmo3bt3486dO3jnnXfSdTg1pXz77be4ceOGKmM1dOhQ1TZ9+nT06dNHzQuCIGR1xMdMEDIA\/\/zzj0oxwfxpW7ZsUdGMHBbcsGGDvoXtQysfhy153u+++y4+\/\/xz1S4+ZoIgCI8RYSYIGQD6kdHSRNq3b69eMxqMKjU+g7e3N15++WVMnjw53ctZCYIg2DIizAQhA8CEtiwHRYf5KlWqKN+st99+Gz169NC3sH3o6F+wYEGsWrVKLVeuXBnNmjWTPGaCIAgWiI+ZIAiCIAiCjSAWM0EQBEEQBBtBhJkgCIIgCIKNIMJMEARBEATBRhBhJgiCIAiCYCOIMBMEQRAEQbARRJgJgiAIgiDYCCLMBEEQBEEQbAQRZoIgCIIg2Dw3b97EuXPn9KXMiwgzQRAEQRBsnqCgIOzfv19fyrxI5n9BEARBEAQbQSxmgiAIgiAINoIIM0EQBEEQBBtBhJkgCIIgCIKNIMJMEARBEATBRhBhJgiCIAiCYCOIMBMEQRAEQbARRJgJgiAIgiDYCCLMBEEQBEEQbAQRZoIgCIIgCDaCCDNBEARBEASbAPg\/fIpRyevOgtQAAAAASUVORK5CYII=)","3ea4bc75":"Nh\u1eadn x\u00e9t: \u0110\u1ed9 bao ph\u1ee7 c\u1ee7a mu\u1ed1i \u1edf \u0111\u00e2y \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng c\u00e1c pixel c\u00f3 ch\u1ee9a mu\u1ed1i c\u1ee7a \u1ea3nh mask chia cho k\u00edch th\u01b0\u1edbc c\u1ee7a \u1ea3nh (101 * 101).\n\nSau \u0111\u00f3 em th\u1ef1c hi\u1ec7n vi\u1ec7c ph\u00e2n chia c\u00e1c \u1ea3nh theo t\u1ec9 l\u1ec7 \u0111\u00e3 t\u00ednh \u0111\u01b0\u1ee3c \u1edf tr\u00ean, bao g\u1ed3m 11 l\u1edbp, t\u1eeb 0 \u0111\u1ebfn 10, t\u1eeb 0.0 l\u00e0 l\u1edbp kh\u00f4ng ch\u1ee9a mu\u1ed1i cho t\u1edbi 1.0 l\u00e0 l\u1edbp ho\u00e0n to\u00e0n l\u00e0 mu\u1ed1i.","a6b3f655":"Nh\u1eadn x\u00e9t: \u1ea2nh b\u00ean tr\u00e1i l\u00e0 \u1ea3nh g\u1ed1c, \u1ea3nh \u1edf gi\u1eefa l\u00e0 \u1ea3nh masking c\u1ee7a \u1ea3nh t\u01b0\u01a1ng \u1ee9ng v\u00e0 \u1ea3nh b\u00ean tr\u00e1i l\u00e0 \u1ea3nh masking do model d\u1ef1 \u0111o\u00e1n. C\u00e1c mask \u0111\u01b0\u1ee3c d\u1ef1 \u0111o\u00e1n g\u1ea7n ch\u00ednh x\u00e1c so v\u1edbi masking th\u1ef1c t\u1ebf. \n\nTi\u1ebfp theo em s\u1ebd vi\u1ebft h\u00e0m \u0111\u1ec3 chuy\u1ec3n \u0111\u1ed5i nh\u1eefng masking th\u00e0nh c\u00e1c chu\u1ed7i c\u00f3 d\u1ea1ng gi\u1ed1ng d\u1eef li\u1ec7u rle_mask c\u1ee7a t\u1eadp train.","5078f9b4":"# I. M\u00f4 t\u1ea3 b\u00e0i to\u00e1n: [TGS Salt Identification Challenge](https:\/\/www.kaggle.com\/c\/tgs-salt-identification-challenge\/)\n\n\n\n1.   Gi\u1edbi thi\u1ec7u b\u00e0i to\u00e1n:  \n\n     Nhi\u1ec1u khu v\u1ef1c tr\u00ean tr\u00e1i \u0111\u1ea5t v\u1edbi tr\u1eef l\u01b0\u1ee3ng l\u1edbn d\u1ea7u m\u1ecf v\u00e0 kh\u00ed ga c\u0169ng c\u00f3 ch\u1ee9a m\u1ed9t l\u01b0\u1ee3ng l\u1edbn mu\u1ed1i ph\u00eda b\u00ean d\u01b0\u1edbi b\u1ec1 m\u1eb7t.\n     \n     Nh\u01b0ng kh\u00f4ng may r\u1eb1ng, vi\u1ec7c x\u00e1c \u0111\u1ecbnh v\u1ecb tr\u00ed c\u1ee7a c\u00e1c m\u1ecf mu\u1ed1i l\u1edbn m\u1ed9t c\u00e1ch ch\u00ednh x\u00e1c l\u00e0 v\u00f4 c\u00f9ng kh\u00f3 kh\u0103n. Nh\u1eefng \u1ea3nh ch\u1ee5p \u0111\u1ecba ch\u1ea5n chuy\u00ean nghi\u1ec7p v\u1eabn c\u1ea7n \u00fd ki\u1ebfn chuy\u00ean m\u00f4n c\u1ee7a c\u00e1c chuy\u00ean gia v\u1ec1 c\u00e1c th\u1ec3 mu\u1ed1i. \u0110i\u1ec1u n\u00e0y d\u1eabn t\u1edbi nh\u1eefng k\u1ebft xu\u1ea5t ch\u1ee7 quan, bi\u1ebfn \u0111\u1ed5i. \u0110\u00e1ng b\u00e1o \u0111\u1ed9ng h\u01a1n, \u0111i\u1ec1u n\u00e0y d\u1eabn t\u1edbi nh\u1eefng t\u00ecnh hu\u1ed1ng nguy hi\u1ec3m ti\u1ec1m t\u00e0ng c\u1ee7a cho nh\u1eefng th\u1ee3 khoan c\u1ee7a c\u00e1c c\u00f4ng ty d\u1ea7u kh\u00ed.\n     \n     \u0110\u1ec3 t\u1ea1o ra nh\u1eefng k\u1ebft xu\u1ea5t 3D v\u00e0 nh\u1eefng \u1ea3nh ch\u1ee5p \u0111\u1ecba ch\u1ea5n ch\u00ednh x\u00e1c nh\u1ea5t, TGS (c\u00f4ng ty h\u00e0ng \u0111\u1ea7u th\u1ebf gi\u1edbi v\u1ec1 d\u1eef li\u1ec7u khoa h\u1ecdc \u0111\u1ecba ch\u1ea5n) t\u1ed5 ch\u1ee9c m\u1ed9t cu\u1ed9c thi v\u1edbi b\u00e0i to\u00e1n x\u00e2y d\u1ef1ng m\u1ed9t thu\u1eadt to\u00e1n x\u00e1c \u0111\u1ecbnh t\u1ef1 \u0111\u1ed9ng v\u00e0 ch\u00ednh x\u00e1c m\u1ee5c ti\u00eau d\u01b0\u1edbi b\u1ec1 m\u1eb7t c\u00f3 ph\u1ea3i l\u00e0 mu\u1ed1i hay kh\u00f4ng. \n\n2.   \u0110\u1ea7u v\u00e0o c\u1ee7a b\u00e0i to\u00e1n:\n  *   Ki\u1ebfn th\u1ee9c n\u1ec1n t\u1ea3ng: \n\n      D\u1eef li\u1ec7u \u0111\u1ecba ch\u1ea5n \u0111\u01b0\u1ee3c thu th\u1eadp b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng ph\u1ea3n x\u1ea1 \u0111\u1ecba ch\u1ea5n. Ph\u01b0\u01a1ng ph\u00e1p n\u00e0y y\u00eau c\u1ea7u m\u1ed9t ngu\u1ed3n n\u0103ng l\u01b0\u1ee3ng \u0111\u1ecba ch\u1ea5n \u0111\u01b0\u1ee3c ki\u1ec3m so\u00e1t, ch\u1eb3ng h\u1ea1n nh\u01b0 kh\u00ed n\u00e9n ho\u1eb7c m\u00e1y rung \u0111\u1ecba ch\u1ea5n v\u00e0 c\u00e1c c\u1ea3m bi\u1ebfn ghi l\u1ea1i ph\u1ea3n x\u1ea1 t\u1eeb c\u00e1c b\u1ec1 m\u1eb7t \u0111\u00e1 b\u00ean trong b\u1ec1 m\u1eb7t. Sau \u0111\u00f3, d\u1eef li\u1ec7u ghi l\u1ea1i \u0111\u01b0\u1ee3c x\u1eed l\u00fd \u0111\u1ec3 t\u1ea1o ch\u1ebf \u0111\u1ed9 xem 3D b\u00ean trong tr\u00e1i \u0111\u1ea5t. \u0110\u1ecba ch\u1ea5n h\u1ecdc ph\u1ea3n x\u1ea1 t\u01b0\u01a1ng t\u1ef1 nh\u01b0 X-quang, sonar v\u00e0 \u0111\u1ecbnh v\u1ecb b\u1eb1ng ti\u1ebfng vang. \n\n      M\u1ed9t h\u00ecnh \u1ea3nh \u0111\u1ecba ch\u1ea5n \u0111\u01b0\u1ee3c t\u1ea1o ra t\u1eeb h\u00ecnh \u1ea3nh ph\u1ea3n x\u1ea1 \u0111\u1ebfn t\u1eeb c\u00e1c ranh gi\u1edbi \u0111\u00e1. H\u00ecnh \u1ea3nh \u0111\u1ecba ch\u1ea5n cho th\u1ea5y ranh gi\u1edbi gi\u1eefa c\u00e1c lo\u1ea1i \u0111\u00e1 kh\u00e1c nhau. V\u1ec1 l\u00fd thuy\u1ebft, c\u01b0\u1eddng \u0111\u1ed9 ph\u1ea3n x\u1ea1 t\u1ef7 l\u1ec7 thu\u1eadn v\u1edbi s\u1ef1 kh\u00e1c bi\u1ec7t v\u1ec1 \u0111\u1eb7c t\u00ednh v\u1eadt l\u00fd \u1edf hai b\u00ean ranh gi\u1edbi. Trong khi h\u00ecnh \u1ea3nh \u0111\u1ecba ch\u1ea5n cho th\u1ea5y ranh gi\u1edbi c\u1ee7a \u0111\u00e1, ch\u00fang kh\u00f4ng n\u00f3i nhi\u1ec1u v\u1ec1 b\u1ea3n th\u00e2n t\u1ea3ng \u0111\u00e1; m\u1ed9t s\u1ed1 lo\u1ea1i \u0111\u00e1 r\u1ea5t d\u1ec5 x\u00e1c \u0111\u1ecbnh trong khi m\u1ed9t s\u1ed1 lo\u1ea1i r\u1ea5t kh\u00f3.\n\n      C\u00f3 m\u1ed9t s\u1ed1 khu v\u1ef1c tr\u00ean th\u1ebf gi\u1edbi c\u00f3 l\u01b0\u1ee3ng mu\u1ed1i kh\u1ed5ng l\u1ed3 \u1edf d\u01b0\u1edbi b\u1ec1 m\u1eb7t. M\u1ed9t trong nh\u1eefng th\u00e1ch th\u1ee9c c\u1ee7a ch\u1ee5p \u1ea3nh \u0111\u1ecba ch\u1ea5n l\u00e0 x\u00e1c \u0111\u1ecbnh ph\u1ea7n d\u01b0\u1edbi b\u1ec1 m\u1eb7t l\u00e0 mu\u1ed1i. Mu\u1ed1i c\u00f3 nh\u1eefng \u0111\u1eb7c \u0111i\u1ec3m v\u1eeba \u0111\u01a1n gi\u1ea3n l\u1ea1i v\u1eeba kh\u00f3 nh\u1eadn bi\u1ebft. M\u1eadt \u0111\u1ed9 mu\u1ed1i th\u01b0\u1eddng l\u00e0 2,14 g\/cc, th\u1ea5p h\u01a1n h\u1ea7u h\u1ebft c\u00e1c lo\u1ea1i \u0111\u00e1 xung quanh. V\u1eadn t\u1ed1c \u0111\u1ecba ch\u1ea5n c\u1ee7a mu\u1ed1i l\u00e0 4,5 km\/gi\u00e2y, th\u01b0\u1eddng nhanh h\u01a1n c\u00e1c \u0111\u00e1 xung quanh n\u00f3. S\u1ef1 kh\u00e1c bi\u1ec7t n\u00e0y t\u1ea1o ra s\u1ef1 ph\u1ea3n x\u1ea1 r\u00f5 n\u00e9t t\u1ea1i b\u1ec1 m\u1eb7t ph\u00e2n c\u00e1ch mu\u1ed1i - tr\u1ea7m t\u00edch. Th\u00f4ng th\u01b0\u1eddng mu\u1ed1i l\u00e0 m\u1ed9t lo\u1ea1i \u0111\u00e1 v\u00f4 \u0111\u1ecbnh h\u00ecnh kh\u00f4ng c\u00f3 nhi\u1ec1u c\u1ea5u tr\u00fac b\u00ean trong. \u0110i\u1ec1u n\u00e0y c\u00f3 ngh\u0129a l\u00e0 th\u01b0\u1eddng kh\u00f4ng c\u00f3 nhi\u1ec1u ph\u1ea3n x\u1ea1 b\u00ean trong mu\u1ed1i, tr\u1eeb khi c\u00f3 tr\u1ea7m t\u00edch b\u1ecb m\u1eafc k\u1eb9t b\u00ean trong n\u00f3. T\u1ed1c \u0111\u1ed9 \u0111\u1ecba ch\u1ea5n cao b\u1ea5t th\u01b0\u1eddng c\u1ee7a mu\u1ed1i c\u00f3 th\u1ec3 t\u1ea1o ra c\u00e1c v\u1ea5n \u0111\u1ec1 v\u1edbi h\u00ecnh \u1ea3nh \u0111\u1ecba ch\u1ea5n.\n  *   B\u1ed9 d\u1eef li\u1ec7u:\n\n      D\u1eef li\u1ec7u l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c h\u00ecnh \u1ea3nh \u0111\u01b0\u1ee3c ch\u1ecdn t\u1ea1i c\u00e1c v\u1ecb tr\u00ed kh\u00e1c nhau \u0111\u01b0\u1ee3c ch\u1ecdn ng\u1eabu nhi\u00ean trong b\u1ec1 m\u1eb7t. H\u00ecnh \u1ea3nh c\u00f3 k\u00edch th\u01b0\u1edbc 101 x 101 pixel v\u00e0 m\u1ed7i pixel \u0111\u01b0\u1ee3c ph\u00e2n lo\u1ea1i l\u00e0 mu\u1ed1i ho\u1eb7c tr\u1ea7m t\u00edch. Ngo\u00e0i c\u00e1c h\u00ecnh \u1ea3nh \u0111\u1ecba ch\u1ea5n, \u0111\u1ed9 s\u00e2u c\u1ee7a v\u1ecb tr\u00ed \u0111\u01b0\u1ee3c ch\u1ee5p \u1ea3nh \u0111\u01b0\u1ee3c cung c\u1ea5p cho m\u1ed7i h\u00ecnh \u1ea3nh.\n\n3.   \u0110\u1ea7u ra c\u1ee7a b\u00e0i to\u00e1n:\n    \n        Ph\u00e2n kh\u00fac c\u00e1c khu v\u1ef1c c\u00f3 ch\u1ee9a mu\u1ed1i tr\u00ean c\u00e1c \u1ea3nh ch\u1ee5p \u0111\u1ecba ch\u1ea5n.","976b7a39":"4. T\u0103ng c\u01b0\u1eddng d\u1eef li\u1ec7u:\n\n    Do s\u1ed1 l\u01b0\u1ee3ng d\u1eef li\u1ec7u c\u1ee7a t\u1eadp train kh\u00e1 l\u00e0 th\u1ea5p so v\u1edbi s\u1ed1 l\u01b0\u1ee3ng d\u1eef li\u1ec7u c\u1ee7a t\u1eadp test, v\u00e0 s\u1ed1 l\u01b0\u1ee3ng d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c g\u1eafn nh\u00e3n c\u00f3 ch\u1ee9a mu\u1ed1i ch\u1ec9 chi\u1ebfm h\u01a1n 50% tr\u00ean t\u1ed5ng s\u1ed1 d\u1eef li\u1ec7u c\u1ee7a t\u1eadp train, em s\u1eed d\u1ee5ng k\u1ef9 thu\u1eadt t\u0103ng c\u01b0\u1eddng d\u1eef li\u1ec7u \u0111\u1ec3 t\u0103ng s\u1ed1 l\u01b0\u1ee3ng d\u1eef li\u1ec7u c\u1ee7a t\u1eadp train.","8a7f81ae":"V\u1edbi b\u00e1o c\u00e1o n\u00e0y, m\u1ea1ng Unet \u0111\u01b0\u1ee3c em s\u1eed d\u1ee5ng l\u00e0 m\u1ea1ng Unet \u0111\u01b0\u1ee3c ch\u1ec9nh s\u1eeda b\u1eb1ng c\u00e1ch thay th\u1ebf c\u00e1c kh\u1ed1i convolution th\u00e0nh kh\u1ed1i residual \u0111\u01a1n gi\u1ea3n.","c1a30bc6":"Cu\u1ed1i c\u00f9ng em th\u1ef1c hi\u1ec7n vi\u1ec7c t\u1ea1o file submission.csv \u0111\u1ec3 n\u1ed9p l\u1ea5y k\u1ebft qu\u1ea3 c\u1ee7a b\u00e1o c\u00e1o.","f7da0b8b":"Ti\u1ebfp theo em \u0111\u01b0a d\u1eef li\u1ec7u v\u00e0o model \u0111\u1ec3 th\u1ef1c hi\u1ec7n vi\u1ec7c hu\u1ea5n luy\u1ec7n. ","6174e39a":"4. Hu\u1ea5n luy\u1ec7n:\n\n    Vi\u1ec7c hu\u1ea5n luy\u1ec7n m\u00f4 h\u00ecnh \u0111\u01b0\u1ee3c chia l\u00e0m hai b\u01b0\u1edbc, b\u01b0\u1edbc m\u1ed9t em s\u1ebd hu\u1ea5n luy\u1ec7n m\u00f4 h\u00ecnh Resnet34 k\u1ebft h\u1ee3p v\u1edbi m\u1ea1ng Unet v\u1edbi h\u00e0m loss l\u00e0 Binary Cross Entropy v\u00e0 b\u01b0\u1edbc hai em s\u1ebd d\u00f9ng weight c\u1ee7a model \u1edf b\u01b0\u1edbc tr\u01b0\u1edbc v\u00e0 ti\u1ebfp t\u1ee5c hu\u1ea5n luy\u1ec7n v\u1edbi h\u00e0m loss l\u00e0 h\u00e0m Lovasz Softmax. \n\n    a. Hu\u1ea5n luy\u1ec7n m\u00f4 h\u00ecnh v\u1edbi Binary Cross Entropy:\n        \n      \u0110\u1ea7u ti\u00ean em \u0111\u1ecbnh ngh\u0129a h\u00e0m x\u00e2y d\u1ef1ng m\u1ea1ng Resnet34 v\u1edbi h\u00e0m loss l\u00e0 Binary Cross Entropy v\u00e0 h\u00e0m t\u1ed1i \u01b0u l\u00e0 Adam.","af6efed8":"# B\u00e1o c\u00e1o h\u1ecdc m\u00e1y\n\nH\u1ecd v\u00e0 t\u00ean: Nguy\u1ec5n H\u1ed3ng Qu\u00e2n\n\nMSSV: 17021324","c621e8ac":"Nh\u1eadn x\u00e9t: File depths.csv c\u0169ng bao g\u1ed3m 2 c\u1ed9t, c\u1ed9t \u0111\u1ea7u ti\u00ean c\u0169ng l\u00e0 c\u1ed9t id nh\u01b0 file train.csv, c\u1ed9t th\u1ee9 hai l\u00e0 c\u1ed9t z ch\u1ee9a d\u1eef li\u1ec7u v\u1ec1 \u0111\u1ed9 s\u00e2u c\u1ee7a \u1ea3nh t\u01b0\u01a1ng \u1ee9ng. D\u1eef li\u1ec7u trong file depths.csv c\u0169ng \u1edf d\u1ea1ng int64, nh\u01b0ng g\u1ed3m 22000 h\u00e0ng cho c\u1ea3 hai c\u1ed9t. Tuy nhi\u00ean, \u1edf \u0111\u00e2y v\u1edbi t\u1eadp train.csv ch\u1ec9 bao g\u1ed3m 4000 \u1ea3nh, c\u00f2n l\u1ea1i 18000 \u1ea3nh c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 l\u00e0m t\u1eadp test. Ti\u1ebfp theo em s\u1ebd ki\u1ec3m tra t\u1eadp test c\u1ee7a dataset(file sample_submission.csv)","a3eae987":"Nh\u1eadn x\u00e9t: \u1ede b\u01b0\u1edbc n\u00e0y tuy vi\u1ec7c t\u0103ng c\u01b0\u1eddng d\u1eef li\u1ec7u c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n b\u1eb1ng nhi\u1ec1u c\u00e1ch, nh\u01b0ng sau khi t\u00ecm hi\u1ec3u, vi\u1ec7c t\u0103ng c\u01b0\u1eddng d\u1eef li\u1ec7u \u0111\u1ed1i v\u1edbi b\u1ed9 d\u1eef li\u1ec7u c\u1ee7a b\u00e0i to\u00e1n v\u1edbi nhi\u1ec1u c\u00e1ch kh\u00e1c nh\u01b0 ph\u00f3ng to \u1ea3nh, ch\u1ec9nh \u0111\u1ed9 s\u00e1ng, ... em th\u1ef1c hi\u1ec7n vi\u1ec7c xoay tr\u00e1i ph\u1ea3i cho t\u1ea5t c\u1ea3 c\u00e1c \u1ea3nh","ed914497":"Nh\u1eadn x\u00e9t: M\u1eadt \u0111\u1ed9 ch\u1ee9a mu\u1ed1i \u1edf c\u00e1c l\u1edbp kh\u00f4ng \u0111\u1ed3ng \u0111\u1ec1u, \u0111\u1eb7c bi\u1ec7t l\u00e0 l\u1edbp 0 (ch\u00fang ta \u0111\u00e3 bi\u1ebft khi ph\u00e2n t\u00edch d\u1eef li\u1ec7u \u1edf ph\u1ea7n tr\u00ean), tuy nhi\u00ean vi\u1ec7c ph\u00e2n l\u1edbp s\u1ebd gi\u00fap vi\u1ec7c ph\u00e2n chia d\u1eef li\u1ec7u hu\u1ea5n luy\u1ec7n t\u1ed1t h\u01a1n \u1edf ph\u1ea7n sau.","3d65334e":"Ti\u1ebfp theo em th\u1ef1c hi\u1ec7n vi\u1ec7c d\u1ef1 \u0111o\u00e1n \u1ea3nh masking cho c\u00e1c \u1ea3nh trong t\u1eadp test v\u00e0 chuy\u1ec3n nh\u1eefng \u1ea3nh masking \u0111\u00f3 v\u1ec1 d\u1ea1ng rle_mask cho file submission.","cdf1c2dc":"Ti\u1ebfp theo em th\u1ef1c hi\u1ec7n vi\u1ec7c t\u00ednh to\u00e1n ng\u01b0\u1ee1ng gi\u00e1 tr\u1ecb t\u1ed1i \u01b0u \u0111\u1ec3 d\u1ef1 \u0111o\u00e1n pixel.","cc023427":"3. H\u00e0m Loss: \n\n    H\u00e0m loss \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho b\u00e1o c\u00e1o l\u00e0 h\u00e0m Binary Cross Entropy k\u1ebft h\u1ee3p v\u1edbi h\u00e0m Lovasz Softmax. H\u00e0m Lovasz Softmax l\u00e0 m\u1ed9t h\u00e0m loss thay th\u1ebf \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho IoU \u0111\u00e3 \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u ho\u00e1. Tuy nhi\u00ean qu\u00e1 tr\u00ecnh hu\u1ea5n luy\u1ec7n v\u1edbi h\u00e0m loss n\u00e0y r\u1ea5t ch\u1eadm, vi\u1ec7c k\u1ebft h\u1ee3p v\u1edbi h\u00e0m Binary Cross Entropy \u1edf tr\u00ean \u0111\u1ea9y nhanh qu\u00e1 tr\u00ecnh hu\u1ea5n luy\u1ec7n.H\u00e0m Lovasz Softmax l\u00e0 m\u1ed9t h\u00e0m loss thay th\u1ebf \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho IoU \u0111\u00e3 \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u ho\u00e1. Tuy nhi\u00ean qu\u00e1 tr\u00ecnh hu\u1ea5n luy\u1ec7n v\u1edbi h\u00e0m loss n\u00e0y r\u1ea5t ch\u1eadm, vi\u1ec7c k\u1ebft h\u1ee3p v\u1edbi h\u00e0m Binary Cross Entropy \u1edf tr\u00ean \u0111\u1ea9y nhanh qu\u00e1 tr\u00ecnh hu\u1ea5n luy\u1ec7n.\n","cf5bbd46":"Nh\u1eadn x\u00e9t: H\u00e0m lovasz_loss l\u1ea5y input trong kho\u1ea3ng (-\u221e\uff0c+\u221e),v\u00ec th\u1ebf n\u00f3 s\u1ebd lo\u1ea1i b\u1ecf h\u00e0m k\u00edch ho\u1ea1t sigmoid \u1edf cu\u1ed1i trong m\u1ea1ng. L\u00fac n\u00e0y ng\u01b0\u1ee1ng m\u1eb7c \u0111\u1ecbnh cho vi\u1ec7c d\u1ef1 \u0111o\u00e1n pixel l\u00e0 0 thay v\u00ec 0,5.\nSau \u0111\u00f3 em hu\u1ea5n luy\u1ec7n m\u00f4 h\u00ecnh v\u1eeba \u0111\u1ecbnh ngh\u0129a.","b2dde2c5":"Sau \u0111\u00f3 em \u0111\u1ecbnh ngh\u0129a m\u00f4 h\u00ecnh Resnet34 \u0111\u1ec3 chu\u1ea9n b\u1ecb cho vi\u1ec7c hu\u1ea5n luy\u1ec7n m\u00f4 h\u00ecnh l\u1ea7n \u0111\u1ea7u ti\u00ean.","6a5e3285":"Nh\u1eadn x\u00e9t: \u1ede \u0111\u00e2y em th\u1ef1c hi\u1ec7n vi\u1ec7c ph\u00e2n chia d\u1eef li\u1ec7u th\u00e0nh hai t\u1eadp l\u00e0 train v\u00e0 validation d\u1ef1a tr\u00ean m\u1eadt \u0111\u1ed9 ch\u1ee9a mu\u1ed1i, do ph\u00e2n b\u1ed1 m\u1eadt \u0111\u1ed9 ch\u1ee9a mu\u1ed1i kh\u00f4ng \u0111\u1ed3ng \u0111\u1ec1u gi\u1eefa c\u00e1c l\u1edbp n\u00ean n\u1ebfu kh\u00f4ng chia theo c\u00e1c l\u1edbp mu\u1ed1i bao ph\u1ee7 c\u00f3 th\u1ec3 d\u1eabn t\u1edbi sai s\u1ed1 l\u1edbn trong k\u1ebft qu\u1ea3. T\u1ec9 l\u1ec7 gi\u1eefa t\u1eadp train v\u00e0 t\u1eadp validation \u0111\u01b0\u1ee3c em chia ra l\u00e0 9:1.","693b51a3":"Nh\u1eadn x\u00e9t: C\u00e1c pixel trong \u1ea3nh v\u00e0 mask s\u1ebd c\u00f3 g\u00eda tr\u1ecb trong kho\u1ea3ng [0,255] n\u00ean em chia ma tr\u1eadn cho 255 \u0111\u1ec3 chu\u1ea9n ho\u00e1. C\u00e1c \u1ea3nh \u0111\u1ec1u l\u00e0 \u1ea3nh \u0111en tr\u1eafng n\u00ean em load \u1ea3nh d\u01b0\u1edbi d\u1ea1ng grayscale. \u0110i\u1ec1u n\u00e0y gi\u00fap ti\u1ebft ki\u1ec7m th\u1eddi gian hu\u1ea5n luy\u1ec7n model khi em hu\u1ea5n luy\u1ec7n m\u00f4 h\u00ecnh \u1edf ph\u1ea7n sau.","2ccc9363":"3. Ph\u00e2n chia d\u1eef li\u1ec7u hu\u1ea5n luy\u1ec7n:\n\n    \u1ede ph\u1ea7n n\u00e0y em s\u1ebd chia d\u1eef li\u1ec7u \u1edf t\u1eadp hu\u1ea5n luy\u1ec7n th\u00e0nh hai ph\u1ea7n l\u00e0 train v\u00e0 validation.","4d56158f":"5. D\u1ef1 \u0111o\u00e1n v\u00e0 \u0111\u00e1nh gi\u00e1 m\u00f4 h\u00ecnh:\n\n    \u0110\u1ea7u ti\u00ean em s\u1ebd vi\u1ebft h\u00e0m d\u1ef1 \u0111o\u00e1n d\u1eef li\u1ec7u masking t\u1eeb model \u0111\u00e3 \u0111\u01b0\u1ee3c train \u1edf ph\u1ea7n tr\u01b0\u1edbc.","73a857ef":"Sau khi \u0111\u00e3 ph\u00e2n l\u1edbp c\u00e1c \u1ea3nh trong t\u1eadp train, em th\u1ef1c hi\u1ec7n visualize s\u1ed1 l\u01b0\u1ee3ng \u1ea3nh trong t\u1eadp train \u1ee9ng v\u1edbi t\u1eebng l\u1edbp."}}