{"cell_type":{"37c1df35":"code","45a60585":"code","beac803f":"code","c190f1fc":"code","5a4bcd07":"code","a0d659f5":"code","10852bb1":"code","61d2c94a":"code","894e6523":"code","db812552":"code","8f6f42b8":"code","30776a7f":"code","549ee014":"code","c631cff3":"code","076dcd84":"code","9534a8f2":"code","af801b6a":"code","0441f376":"code","f83739ce":"code","79ce44a5":"code","3931febc":"code","7cc1129f":"code","d25f47f0":"code","7bf39e53":"code","02b74def":"code","01d55413":"markdown","b02ee5b9":"markdown","bf5b071f":"markdown","4196e1ed":"markdown","df85ef89":"markdown","02126773":"markdown","da89ed7a":"markdown","e0278524":"markdown","fcd68ae5":"markdown","969835a7":"markdown","8a1a8d9d":"markdown"},"source":{"37c1df35":"# target : 'Outcome'\n# \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd\ndf = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\n# print(df)\nprint('df: ', df.shape)\n\n# X_train, X_test \ub370\uc774\ud130 \ubd84\ud560 (8:2)\nfrom sklearn.model_selection import train_test_split\nTrain, Test = train_test_split(df, test_size=0.2, shuffle=True, random_state=77)\nprint('Train, Test: ', Train.shape, Test.shape)\n\n# Train -> X_train\uacfc y_train\uc73c\ub85c \ubd84\ud560\ny_train = Train['Outcome']\nX_train = Train.drop('Outcome', axis=1)\nprint('X_train, y_train: ', X_train.shape, y_train.shape)\n\n# Test -> X_test\uc640 y_test\ub85c \ubd84\ud560\ny_test = Test['Outcome']\nX_test = Test.drop('Outcome',axis=1)\nprint('X_test, y_test: ', X_test.shape, y_test.shape)\n\n# EDA\n# head\n# print('X_train:\\n', X_train.head())\n# print('y_train:\\n', y_train.head())\n# print('X_test:\\n', X_test.head())\n# print('y_test:\\n', y_test.head())\n\n# shape -> pass\n\n# describe\n# \uc774\uc0c1\uce58\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc74c (\uc544\ub798 \uceec\ub7fc\ub4e4\uc758 \ucd5c\uc19f\uac12(min)\uc774 \uac01\uac01 0)\n# (Glucose, BloodPressure, SkinThickness, Insulin, BMI\uac00 0\uc778 \uac12)\n# print('X_train:\\n', X_train.describe())\n# print('y_train:\\n', y_train.describe())\n# print('X_test:\\n', X_test.describe())\n# print('y_test:\\n', y_test.describe())\n\n# info (\ubc94\uc8fc\ud615 \ubcc0\uc218)\n# \ubc94\uc8fc\ud615 \ubcc0\uc218 \uc5c6\uc74c\n# print('X_train:\\n', X_train.info())\n# print('X_test:\\n', X_test.info())\n\n# \uacb0\uce21\uce58\n# \uacb0\uce21\uce58 \uc5c6\uc74c\n# print('X_train:\\n', X_train.isnull().sum())\n# print('y_train:\\n', y_train.isnull().sum())\n# print('X_test:\\n', X_test.isnull().sum())\n# print('y_test:\\n', y_test.isnull().sum())\n\n\n# \ub370\uc774\ud130 \uc804\ucc98\ub9ac\n## \uc774\uc0c1\uce58 \ucc98\ub9ac \ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\n# (Glucose, BloodPressure, SkinThickness, Insulin, BMI\uac00 0\uc778 \uac12)\n\n# ### \uc774\uc0c1\uce58 \uac2f\uc218 \ud655\uc778 (X_train) => (4, 33, 172, 288, 8) \ud83d\udc9b\n# print('Glucose: ', len(X_train[X_train['Glucose']==0]))\n# print('BloodPressure: ', len(X_train[X_train['BloodPressure']==0]))\n# print('SkinThickness: ', len(X_train[X_train['SkinThickness']==0]))\n# print('Insulin: ', len(X_train[X_train['Insulin']==0]))\n# print('BMI: ', len(X_train[X_train['BMI']==0]))\n\n# ### \uc774\uc0c1\uce58 \ud655\uc778 (X_test)      => (1, 2, 55, 86, 3) \ud83d\udc9b\n# print('Glucose: ', len(X_test[X_test['Glucose']==0]))\n# print('BloodPressure: ', len(X_test[X_test['BloodPressure']==0]))\n# print('SkinThickness: ', len(X_test[X_test['SkinThickness']==0]))\n# print('Insulin: ', len(X_test[X_test['Insulin']==0]))\n# print('BMI: ', len(X_test[X_test['BMI']==0]))\n\n### Glucose \uceec\ub7fc\uc758 \uac12\uc774 0\uc778 \ub808\ucf54\ub4dc \uc0ad\uc81c (Train 4\uac1c, Test 1\uac1c)\n\n# \uc774\uc0c1\uce58 \ud574\ub2f9 \ub808\ucf54\ub4dc\uc758 \uc778\ub371\uc2a4 \uc800\uc7a5\ndel_idx_train = X_train[X_train['Glucose']==0].index \ndel_idx_test = X_test[X_test['Glucose']==0].index\nprint('Train_idx: ', del_idx_train)\nprint('Test_idx: ', del_idx_test)\n\n# \uac01 \uc778\ub371\uc2a4\uc5d0 \ud574\ub2f9\ud558\ub294 \ub808\ucf54\ub4dc \uc0ad\uc81c \ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\nprint('\ub808\ucf54\ub4dc \uc0ad\uc81c \uc804\uc758 Train, Test: ', \n      X_train.shape, y_train.shape, X_test.shape, y_test.shape)\n## Train\nX_train = X_train.drop(index=del_idx_train, axis=0)\ny_train = y_train.drop(index=del_idx_train, axis=0)\n\n## Test\nX_test = X_test.drop(index=del_idx_test, axis=0)\ny_test = y_test.drop(index=del_idx_test, axis=0)\n\nprint('\ub808\ucf54\ub4dc \uc0ad\uc81c \ud6c4\uc758 Train, Test: ', \n      X_train.shape, y_train.shape, X_test.shape, y_test.shape)\n\n### \ub098\uba38\uc9c0 \uc774\uc0c1\uce58\ub294 \uac01 \uceec\ub7fc\uc758 \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uccb4 \ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\ncols = ['BloodPressure', 'SkinThickness', 'Insulin', 'BMI']    \n\n# \uac01 \uceec\ub7fc\uc758 \ud3c9\uade0\uac12\ncols_mean_train = X_train[cols].mean()\ncols_mean_test = X_test[cols].mean()\n\n# \uac01 \uceec\ub7fc\uc758 \uac12\uc774 0\uc778 \uac83\uc744 \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uccb4\nX_train[cols] = X_train[cols].replace(0, cols_mean_train) # \ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\nX_test[cols] = X_test[cols].replace(0, cols_mean_test)   # \ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\n\n# \uc774\uc0c1\uce58\uac00 \uc798 \ub300\uccb4\ub410\ub294\uc9c0 \ud655\uc778\n# ## \uc774\uc0c1\uce58 \uac2f\uc218 \ud655\uc778 (X_train) => (4, 33, 172, 288, 8) \ud83d\udc9b\n# print('Glucose: ', len(X_train[X_train['Glucose']==0]))\n# print('BloodPressure: ', len(X_train[X_train['BloodPressure']==0]))\n# print('SkinThickness: ', len(X_train[X_train['SkinThickness']==0]))\n# print('Insulin: ', len(X_train[X_train['Insulin']==0]))\n# print('BMI: ', len(X_train[X_train['BMI']==0]))\n\n# ### \uc774\uc0c1\uce58 \ud655\uc778 (X_test)      => (1, 2, 55, 86, 3) \ud83d\udc9b\n# print('Glucose: ', len(X_test[X_test['Glucose']==0]))\n# print('BloodPressure: ', len(X_test[X_test['BloodPressure']==0]))\n# print('SkinThickness: ', len(X_test[X_test['SkinThickness']==0]))\n# print('Insulin: ', len(X_test[X_test['Insulin']==0]))\n# print('BMI: ', len(X_test[X_test['BMI']==0]))\n\n## \uacb0\uce21\uce58 \ucc98\ub9ac -> pass\n\n\n# \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\n## \uc815\uaddc\ud654 -> pass\n\n## LabelEncoder -> pass\n\n\n# \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14\n# X_train, y_train \ub370\uc774\ud130\ub97c \ud559\uc2b5&\uac80\uc99d \ub370\uc774\ud130\ub85c \ubd84\ud560\nfrom sklearn.model_selection import train_test_split\nprint('X_train, y_train: ', X_train.shape, y_train.shape)\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train, \n                                            test_size=0.2, shuffle=True, random_state=77)\n\nprint('X_tr, X_val, y_tr, y_val : ', X_tr.shape, X_val.shape, y_tr.shape, y_val.shape )\n\n'''\n1. \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8\n2. \uc758\uc0ac\uacb0\uc815\ub098\ubb34\n3. KNN\n4. svm\n5. xgboost\n'''\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\n\n# 1.\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5)\nmodel.fit(X_tr, y_tr)\nprint('RandomForestClassifier: ', round(model.score(X_val, y_val)*100,2))\n\n# 2.\nmodel = DecisionTreeClassifier()\nmodel.fit(X_tr, y_tr)\nprint('DecisionTreeClassifier: ', round(model.score(X_val, y_val)*100,2))\n\n# 3.\nmodel = KNeighborsClassifier()\nmodel.fit(X_tr, y_tr)\nprint('KNeighborsClassifier: ', round(model.score(X_val, y_val)*100,2))\n# 4.\nmodel = SVC()\nmodel.fit(X_tr, y_tr)\nprint('SVC: ', round(model.score(X_val, y_val)*100,2))\n# 5.\nmodel = XGBClassifier()\nmodel.fit(X_tr, y_tr)\nprint('XGBClassifier: ', round(model.score(X_val, y_val)*100,2))\n\n# \ucd5c\uc885 \ubaa8\ub378 \uc120\ud0dd\n# RandomForestClassifier \uc758 score\uac00 \uac00\uc7a5 \ub192\uc74c (77.05)\n\n## \ubaa8\ub378 \uc815\uc758\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5)\n\n## \ud559\uc2b5\nmodel.fit(X_train, y_train)\n\n## \uc608\uce21\npred = model.predict(X_test)\n# print('\uc608\uce21\uac12: ', pred)\n\n# csv \uc0dd\uc131 \ubc0f \ud655\uc778\n\n# \uc815\ub2f5 \ub370\uc774\ud130\ud504\ub808\uc784\noutput = pd.DataFrame({'Outcome: ':pred})\n# print(output)\n\n# csv \uc0dd\uc131\noutput.to_csv('211204.csv', index=False)\n\n# csv \ud655\uc778\nprint('\uc815\ub2f5 csv \ud655\uc778: ', pd.read_csv('211204.csv'))\n\n# \uac00\ucc44\uc810\nprint('\uac00\ucc44\uc810: ', round(model.score(X_test, y_test)*100,2))","45a60585":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, random_state=2021)\n    \n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[target])\n\n    \n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='Outcome')\n\nprint('X_train, X_test, y_train, y_test:\\n', \n      X_train.shape, X_test.shape, y_train.shape, y_test.shape)\n\n###################### \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 ######################\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd\n\n######################             EDA           ######################\n# head\n# shape\n# info\n# \uae30\ucd08\ud1b5\uacc4 & label \uac12\n# \uacb0\uce21\uac12\n\n######################         \ub370\uc774\ud130 \uc804\ucc98\ub9ac       ######################\n# \uacb0\uce21\uac12 \ucc98\ub9ac -> pass (\uacb0\uce21\uac12 \uc5c6\uc74c)\n# \uc774\uc0c1\uac12 \ucc98\ub9ac (Glucose, BloodPressure, SkinThickness, Insulin, BMI\uac00 0\uc778 \uac12)\n# cols=['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\n\n# \uc774\uc0c1\uac12 \uac2f\uc218 \ud655\uc778 (Train)\ncols = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\n\nfor col in cols:\n    print('{0}: '.format(col), len(X_train[X_train[col]==0]))\n    \nfor col in cols:\n    print('{0}: '.format(col), len(X_test[X_test[col]==0]))\n\n\n# Glucose\uc758 \uc774\uc0c1\uce58\ub294 X_train\uc5d0\ub9cc \uc788\uae30 \ub54c\ubb38\uc5d0, X_train\uc5d0\uc11c \uc774\uc0c1\uce58\uc758 \ub808\ucf54\ub4dc\ub9cc \uc0ad\uc81c\nout_idx = X_train[X_train['Glucose']==0].index\n# print(out_idx)\n\n# X_train['Glucose'] = X_train['Glucose'].drop(index = out_idx)\nX_train = X_train.drop(index=out_idx, axis=0)\ny_train = y_train.drop(index=out_idx, axis=0)\n# for col in cols:\n#     print('{0}: '.format(col), len(X_train[X_train[col]==0]))\n\n# \ub098\uba38\uc9c0 \uceec\ub7fc\uc758 \uc774\uc0c1\uce58\ub4e4\uc740 \uac01 \uceec\ub7fc\uc758 \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uccb4\nout_col = ['BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\n\nmean_train = X_train[out_col].mean()\nmean_test = X_test[out_col].mean()\n\nX_train[out_col] = X_train[out_col].replace(0, mean_train)\nX_test[out_col] = X_test[out_col].replace(0, mean_train)\n\nfor col in cols:\n    print('{0}: '.format(col), len(X_train[X_train[col]==0]))\n    \nfor col in cols:\n    print('{0}: '.format(col), len(X_test[X_test[col]==0]))\n\n# X_train, X_test\uc5d0\uc11c 'id', 'target' \uc81c\uac70\n# print(X_train.head())\n# print(X_test.head())\n# print(y_train.head())\n# print(y_test.head())\n\nX_train = X_train.drop('id', axis=1)\nX_test = X_test.drop('id', axis=1)\n\n# y_train, y_test\uc5d0 'id', 'target' \uc788\ub294\uc9c0 \ud655\uc778 -> OK\n\n\n######################        \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1      ######################\n# \uc815\uaddc\ud654 -> pass\n\n# LabelEncoder -> pas (\ubc94\uc8fc\ud615 \ubcc0\uc218 \uc5c6\uc74c)\n\n################  \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14  ##################\n# X_train, y_train  =>  \ud3c9\uac00 & \uac80\uc99d \ub370\uc774\ud130\ub85c \ubd84\ud560\n\nfrom sklearn.model_selection import train_test_split\nprint('X_train, y_train: ', X_train.shape, y_train.shape)\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train, \n                                            test_size=0.2, shuffle=True, random_state=777)\nprint('X_tr, X_val, y_tr, y_val: ', X_tr.shape, X_val.shape, y_tr.shape, y_val.shape)\n\n# \ubaa8\ub378\ub9c1 (\ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8)\nfrom sklearn.ensemble import RandomForestClassifier\n# \ubaa8\ub378 \uc815\uc758\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5)\n\n# \ud559\uc2b5\nmodel.fit(X_train, y_train['Outcome'])\n\n# \uc608\uce21\npred = model.predict(X_test)\n# print('\uc608\uce21\uac12: ', pred)\n\n######################       csv \uc0dd\uc131 \ubc0f \ud655\uc778     ######################\noutput = pd.DataFrame({ 'Outcome' : pred })\n# print(output)\n\noutput.to_csv('dorothy.csv', index=False)\nprint(pd.read_csv('dorothy.csv'))\n\n######################            \uac00\ucc44\uc810         ######################\nprint('\uac00\ucc44\uc810: ', round(model.score(X_test, y_test['Outcome'])*100, 2))","beac803f":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, random_state=2021)\n    \n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[target])\n\n    \n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='Outcome')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","c190f1fc":"# \ub77c\uc774\ube0c\ub7ec\ub9ac\nimport pandas as pd","5a4bcd07":"# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 (\uc0dd\ub7b5)\nX_train.shape, y_train.shape, X_test.shape","a0d659f5":"X_train.head()","10852bb1":"y_train.value_counts()","61d2c94a":"X_train.info()","894e6523":"X_train.isnull().sum()","db812552":"X_test.isnull().sum()","8f6f42b8":"X_train.describe()","30776a7f":"#\uc774\uc0c1\uce58 \ucc98\ub9ac\n#Train\nprint('Glucose:',len(X_train[X_train['Glucose']==0]))\nprint('BloodPressure:',len(X_train[X_train['BloodPressure']==0]))\nprint('SkinThickness:',len(X_train[X_train['SkinThickness']==0]))\nprint('Insulin:',len(X_train[X_train['Insulin']==0]))\nprint('BMI:',len(X_train[X_train['BMI']==0]))","549ee014":"#Test\nprint('Glucose:',len(X_test[X_test['Glucose']==0]))\nprint('BloodPressure:',len(X_test[X_test['BloodPressure']==0]))\nprint('SkinThickness:',len(X_test[X_test['SkinThickness']==0]))\nprint('Insulin:',len(X_test[X_test['Insulin']==0]))\nprint('BMI:',len(X_test[X_test['BMI']==0]))","c631cff3":"# \ud3ec\ub3c4\ub2f9 \uc774\uc0c1\uce58 \uc0ad\uc81c\ndel_idx = X_train[(X_train['Glucose']==0)].index\ndel_idx","076dcd84":"print('Glucose \uc774\uc0c1\uce58 \uc0ad\uc81c \uc804 :', X_train.shape, y_train.shape)\nX_train = X_train.drop(index=del_idx, axis=0)\ny_train = y_train.drop(index=del_idx, axis=0)\nprint('Glucose \uc774\uc0c1\uce58 \uc0ad\uc81c \ud6c4 :', X_train.shape, y_train.shape)","9534a8f2":"# \ud3ec\ub3c4\ub2f9\uc744 \uc81c\uc678\ud55c \uc774\uc0c1\uce58, \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uccb4\ncols = ['BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\ncols_mean = X_train[cols].mean()\nX_train[cols].replace(0, cols_mean)","af801b6a":"#Train\nprint('Glucose:',len(X_train[X_train['Glucose']==0]))\nprint('BloodPressure:',len(X_train[X_train['BloodPressure']==0]))\nprint('SkinThickness:',len(X_train[X_train['SkinThickness']==0]))\nprint('Insulin:',len(X_train[X_train['Insulin']==0]))\nprint('BMI:',len(X_train[X_train['BMI']==0]))","0441f376":"#Test\nprint('Glucose:',len(X_test[X_test['Glucose']==0]))\nprint('BloodPressure:',len(X_test[X_test['BloodPressure']==0]))\nprint('SkinThickness:',len(X_test[X_test['SkinThickness']==0]))\nprint('Insulin:',len(X_test[X_test['Insulin']==0]))\nprint('BMI:',len(X_test[X_test['BMI']==0]))","f83739ce":"# \uc2a4\ucf00\uc77c\ub9c1\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ncols = ['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']\nX_train[cols] = scaler.fit_transform(X_train[cols])\nX_test[cols] = scaler.fit_transform(X_test[cols])","79ce44a5":"# id \uc81c\uc678\nX = X_train.drop('id',axis=1)\ntest = X_test.drop('id',axis=1)","3931febc":"from sklearn.svm import SVC\nmodel = SVC(random_state=2022)\nmodel.fit(X, y_train['Outcome'])\npredictions = model.predict(test)","7cc1129f":"# \uc624\ubc84\ud53c\ud305 \ub418\uc5c8\uc744 \uacbd\uc6b0\uc5d0 \uc810\uc218\uac00 \uc798\ub098\uc62c \uc218 \uc788\uc74c (\uac1d\uad00\uc801\uc778 \ud3c9\uac00 \uc544\ub2d8, \ubc38\ub9ac\ub370\uc774\uc158 \ub370\uc774\ud130\ub85c \ud3c9\uac00 \ud544\uc694\ud568)\nround(model.score(X, y_train['Outcome']) * 100, 2) ","d25f47f0":"output = pd.DataFrame({'idx': X_test.index, 'Outcome': predictions})\noutput.head()","7bf39e53":"# \uc218\ud5d8\ubc88\ud638.csv\ub85c \ucd9c\ub825\noutput.to_csv('1234567.csv', index=False)","02b74def":"round(model.score(test, y_test['Outcome']) * 100, 2) ","01d55413":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac","b02ee5b9":"# \ud83d\udca5\ud83d\udca5\ud83d\udca5 \ud480\uc774 \ud83d\udca5\ud83d\udca5\ud83d\udca5","bf5b071f":"# \ud83d\udc93\ud83d\udc28 \uc5f0\uc2b5_01\ud83d\udc28\ud83d\udc93","4196e1ed":"## [\ucc38\uace0]\uc791\uc5c5\ud6152 \ubb38\uad6c\n- \ucd9c\ub825\uc744 \uc6d0\ud558\uc2e4 \uacbd\uc6b0 print() \ud568\uc218 \ud65c\uc6a9\n- \uc608\uc2dc) print(df.head())\n- getcwd(), chdir() \ub4f1 \uc791\uc5c5 \ud3f4\ub354 \uc124\uc815 \ubd88\ud544\uc694\n- \ud30c\uc77c \uacbd\ub85c \uc0c1 \ub0b4\ubd80 \ub4dc\ub77c\uc774\ube0c \uacbd\ub85c(C: \ub4f1) \uc811\uadfc \ubd88\uac00\n\n### \ub370\uc774\ud130 \ud30c\uc77c \uc77d\uae30 \uc608\uc81c\n- import pandas as pd\n- X_test = pd.read_csv(\"data\/X_test.csv\")\n- X_train = pd.read_csv(\"data\/X_train.csv\")\n- y_train = pd.read_csv(\"data\/y_train.csv\")\n\n### \uc0ac\uc6a9\uc790 \ucf54\ub529\n\n### \ub2f5\uc548 \uc81c\ucd9c \ucc38\uace0\n- \uc544\ub798 \ucf54\ub4dc \uc608\uce21\ubcc0\uc218\uc640 \uc218\ud5d8\ubc88\ud638\ub97c \uac1c\uc778\ubcc4\ub85c \ubcc0\uacbd\ud558\uc5ec \ud65c\uc6a9\n- pd.DataFrame({'cust_id': X_test.cust_id, 'gender': pred}).to_csv('003000000.csv', index=False)","df85ef89":"\ud2b8\ub808\uc778\uc5d0\ub9cc 0\uc774 \uc788\ub294 \ud3ec\ub3c4\ub2f9(Glucose)\ub294 \uc0ad\uc81c\n\ub098\uba38\uc9c0\ub294 \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uccb4 \ud558\uc5ec \uc774\uc0c1\uce58\ub97c \ucc98\ub9ac\ud568","02126773":"# \ud83d\udc93\ud83d\udc28 \uc5f0\uc2b5_02\ud83d\udc28\ud83d\udc93","da89ed7a":"## Start","e0278524":"## EDA","fcd68ae5":"## \ub2f9\ub1e8\ubcd1 \uc5ec\ubd80 \ud310\ub2e8\n- \uc774\uc0c1\uce58 \ucc98\ub9ac (Glucose, BloodPressure, SkinThickness, Insulin, BMI\uac00 0\uc778 \uac12)","969835a7":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","8a1a8d9d":"## \uacb0\uacfc \uccb4\uc810 (\uc218\ud5d8\uc790\ub294 \uc54c \uc218 \uc5c6\ub294 \ubd80\ubd84\uc784)"}}