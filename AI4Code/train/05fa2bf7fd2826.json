{"cell_type":{"5fa79d75":"code","34792e94":"code","7d3d8ec2":"code","531ad736":"code","8db8e51f":"code","20eabca9":"code","6f186468":"code","e27df6bb":"code","8463e7c1":"code","11ae78df":"code","d9fef140":"code","71dd9bc8":"code","59a3849e":"code","8b36f296":"code","322eb63d":"code","d7c3020b":"code","471f05d0":"code","ad32a6fc":"code","c50f3754":"code","f427fd71":"code","e6de3718":"code","c5f35120":"markdown","33f8879c":"markdown","847f9ad3":"markdown","60afe75f":"markdown","f6ffb9da":"markdown","4daef385":"markdown","33d64bcd":"markdown","a8746d25":"markdown","fe822bc6":"markdown","8a46ef67":"markdown","2c2b9caf":"markdown","1646cdf3":"markdown","43f3d89b":"markdown","33d90d96":"markdown","214c80ce":"markdown","fdb3a377":"markdown","48d0903a":"markdown","c74deb78":"markdown","6d88f020":"markdown","77813c00":"markdown"},"source":{"5fa79d75":"# Experimental Kaggle TPU support for PyTorch (should work also on Google Collab)!\n#!curl https:\/\/raw.githubusercontent.com\/pytorch\/xla\/master\/contrib\/scripts\/env-setup.py -o pytorch-xla-env-setup.py\n#!python pytorch-xla-env-setup.py --apt-packages libomp5 libopenblas-dev","34792e94":"# Import torch and other required modules\nimport torch\nimport random\nimport os\nimport numpy as np\nfrom tabulate import tabulate\nimport matplotlib.pyplot as plt","7d3d8ec2":"def seed_everything(seed):\n    \"\"\"\n    Seeds basic parameters for reproductibility of results\n    \n    Arguments:\n        seed {int} -- Number of the seed\n    \"\"\"\n    random.seed(seed)\n    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False","531ad736":"seed = 2020\nseed_everything(seed)","8db8e51f":"# Lazily set the current device to reuse in whole project (important!)\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\n# If GPU, prints: 'cuda:0', where 0 is GPU id (for multi GPU system)\n# If CPU, prints: 'cpu'\n# If TPU, prints: 'cpu' as well\nprint(device)\n\n# Additional GPU nice to have info\nif torch.cuda.is_available():\n    # How to get current GPU\n    print(torch.cuda.get_device_name())\n    print(torch.cuda.get_device_properties(torch.cuda.current_device()))\n    \n    # How to navigate on multi GPU system\n    for i in range(0, torch.cuda.device_count()):\n        print(torch.cuda.get_device_properties(i))","20eabca9":"# Now we initialise Tensor, it is important to supply device parameter everywhere in order to make your code portable!\ntensor = torch.tensor(range(15), device=device)","6f186468":"# Now if we try to print Tensor as a Numpy array, it will break on GPU\nprint(\"Print from Numpy directly:\")\nprint(tensor.numpy())\nprint()\n# The solution is to move it to CPU memory\nprint(\"A better portable solution for multi-platform development (GPU):\")\nprint(tensor.cpu().numpy())","e27df6bb":"# Example 1 - Print 1D Tensor\ntensor_1d = torch.tensor([1.1, 2., 3., 4., 5.], device=device)\n\ntorch.set_printoptions(profile='default', sci_mode=False)\n\nprint('Python default:')\nprint(tensor_1d)\nprint()\nprint('PyTorch Scientific Mode:')\ntorch.set_printoptions(profile='short', sci_mode=True)\nprint(tensor_1d)\ntorch.set_printoptions(profile='default', sci_mode=False)","8463e7c1":"# Example 2 - Convert 1D Tensor to 2D Tensor\ntensor_2d = tensor_1d.view(tensor_1d.size()[0], 1)\n\nprint(tabulate(tensor_2d))","11ae78df":"# Example 3 - breaking it\n# for multi-dimensional tensors we can use charting library to plot them\nplt.imshow(tensor_2d)\n\nplt.imshow(tensor_2d.cpu()) # do not forget for cpu() method call as described in Section 1","d9fef140":"# Example 1 - working\nimport numpy as np\nimport IPython.core.display\n\ndef _html_repr_helper(contents, index, is_horz):\n    dims_left = contents.ndim - len(index)\n    if dims_left == 0:\n        s = contents[index]\n    else:\n        s = '<span class=\"numpy-array-comma\">,<\/span>'.join(\n            _html_repr_helper(contents, index + (i,), is_horz) for i in range(contents.shape[len(index)])\n        )\n        s = ('<span class=\"numpy-array-bracket numpy-array-bracket-open\">[<\/span>'\n            '{}'\n            '<span class=\"numpy-array-bracket numpy-array-bracket-close\">]<\/span>'.format(s))\n        \n    # apply some classes for styling\n    classes = []\n    classes.append('numpy-array-slice')\n    classes.append('numpy-array-ndim-{}'.format(len(index)))\n    classes.append('numpy-array-ndim-m{}'.format(dims_left))\n    if is_horz(contents, len(index)):\n        classes.append('numpy-array-horizontal')\n    else:\n        classes.append('numpy-array-vertical')\n    \n    hover_text = '[{}]'.format(','.join('{}'.format(i) for i in (index + (':',) * dims_left)))\n\n    return \"<span class='{}' title='{}'>{}<\/span>\".format(\n        ' '.join(classes), hover_text, s,\n    )\n\nbasic_css = \"\"\"\n    .numpy-array {\n        display: inline-block;\n    }\n    .numpy-array .numpy-array-slice {\n        border: 1px solid #cfcfcf;\n        border-radius: 4px;\n        margin: 1px;\n        padding: 1px;\n        display: flex;\n        flex: 1;\n        text-align: right;\n        position: relative;\n    }\n    .numpy-array .numpy-array-slice:hover {\n        border: 1px solid #66BB6A;\n    }\n    .numpy-array .numpy-array-slice.numpy-array-vertical {\n        flex-direction: column;\n    }\n    .numpy-array .numpy-array-slice.numpy-array-horizontal {\n        flex-direction: row;\n    }\n    .numpy-array .numpy-array-ndim-m0 {\n        padding: 0 0.5ex;\n    }\n    \n    \/* Hide the comma and square bracket characters which exist to help with copy paste *\/\n    .numpy-array .numpy-array-bracket {\n        font-size: 0;\n        position: absolute;\n    }\n    .numpy-array span .numpy-array-comma {\n        font-size: 0;\n        height: 0;\n    }\n\"\"\"\n\nshow_brackets_css = \"\"\"\n    .numpy-array.show-brackets .numpy-array-slice {\n        border-radius: 0;\n    }\n    .numpy-array.show-brackets .numpy-array-bracket {\n        border: 1px solid black; \n        border-radius: 0;  \/* looks better without... *\/\n    }\n    .numpy-array.show-brackets .numpy-array-horizontal > .numpy-array-bracket-open {\n        top: -1px;\n        bottom: -1px;\n        left: -1px;\n        width: 10px;\n        border-right: none;\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n    }\n    .numpy-array.show-brackets .numpy-array-horizontal > .numpy-array-bracket-close {\n        top: -1px;\n        bottom: -1px;\n        right: -1px;\n        width: 10px;\n        border-left: none;\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n    }\n    .numpy-array.show-brackets .numpy-array-vertical > .numpy-array-bracket-open {\n        top: -1px;\n        right: -1px;\n        left: -1px;\n        height: 10px;\n        border-bottom: none;\n        border-bottom-right-radius: 0;\n        border-bottom-left-radius: 0;\n    }\n    .numpy-array.show-brackets .numpy-array-vertical > .numpy-array-bracket-close {\n        left: -1px;\n        bottom: -1px;\n        right: -1px;\n        height: 10px;\n        border-top: none;\n        border-top-right-radius: 0;\n        border-top-left-radius: 0;\n    }\n\"\"\"\n\ndef make_pretty(self, show_brackets=False, is_horz=lambda arr, ax: ax == arr.ndim - 1):\n\n    classes = ['numpy-array']\n    css = basic_css\n    if show_brackets:\n        classes += ['show-brackets']\n        css += show_brackets_css\n    return IPython.core.display.HTML(\n        \"\"\"<style>{}<\/style><div class='{}'>{}<\/div>\"\"\".format(\n            css,\n            ' '.join(classes),\n            _html_repr_helper(self, (), is_horz))\n    )","71dd9bc8":"tensor_3d = torch.rand(10, 1, 3)\n\nprint(tabulate(tensor_3d, showindex='always', tablefmt='pretty'))","59a3849e":"# Example 2 - working\nmake_pretty(tensor_3d) # make sure this call goes after print()","8b36f296":"# Example 1 - working\nimport plotly.offline as py\nimport plotly.graph_objs as go\n\npy.init_notebook_mode(connected=True)\n\n# Temperature: -40 to +85\u00b0C\n# Humidity: 0-100%\n# Pressure: 300-1100 hPa\n    \ntemperature = [-10, 0, 5, 15, 30]\nhumidity = [20, 40, 40, 60, 70]\npressure = [400, 500, 600, 700, 800]\n\nweather_tensor = torch.tensor([temperature, pressure, humidity], device=device)\n\n# temperature on x axis to represent height in graph\nz, y, x = weather_tensor\n\nfig = go.Figure(data=[\n    go.Mesh3d(\n        x=x,\n        y=y,\n        z=z,\n        colorbar_title='Temperature',\n        colorscale=[[0, 'gold'],\n                    [0.5, 'mediumturquoise'],\n                    [1, 'magenta']],\n        # Intensity of each vertex, which will be interpolated and color-coded\n        intensity=z,\n        showscale=True\n    )\n])\n\nfig.update_layout(\n    title=\"Weather Mesh Example\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=16,\n        color=\"#7f7f7f\"\n    )\n)\n\ncamera = dict(\n    eye=dict(x=-2, y=-2, z=0.1)\n)\n\nfig.update_layout(scene_camera=camera)\n\nfig.show()\n","322eb63d":"# Example 1 - normalizing data\nfrom sklearn.preprocessing import MinMaxScaler\nmin_max_scaler = MinMaxScaler()\n\n# first reshape (-1, 1) to change list dimension from 1D to 2D\ntemperature_normalized = min_max_scaler.fit_transform(weather_tensor[0].numpy().reshape(-1, 1))\n\n# now reshape the list again to single values\ntemperature_normalized = temperature_normalized.reshape(-1)\n\nprint(tabulate([weather_tensor[0].numpy(), temperature_normalized], showindex='always', tablefmt='pretty'))","d7c3020b":"# Example 2 - filter or mask tensor data\ntensor_x = torch.tensor([0.1, 0.5, -1.0, 0, 1.2, 0])\n\nprint(tensor_x)\n\nmask = tensor_x >= 0 # This is the important step, where you define filtering condition\n\nprint(mask)\n\nindices = torch.nonzero(mask)\n\nprint(tensor_x[indices]) # mapping index example\n\nprint(indices) # index from original tensor","471f05d0":"# Example 3 - basic gather example with matrix\nt = torch.tensor([[1,2],[3,4]])\ntorch.gather(t, 1, torch.tensor([[0,0],[1,0]]))","ad32a6fc":"def get_splits(x):\n    bins = np.arange(0, np.ceil(x[:,1].max())+1)\n    d = torch.from_numpy(np.digitize(x.numpy()[:, 1], bins))\n    _, counts = torch.unique(d, return_counts=True)\n    return torch.split(x, counts.tolist())\n\n# create tensor\nN = 50\nc0 = torch.randn(N)\nc1 = torch.arange(N) + 0.1 * torch.randn(N)\nx = torch.stack((c0, c1), dim=1)\n\nprint(*get_splits(x), sep='\\n')\n\nprint(tabulate(get_splits(x), showindex='always', tablefmt='pretty'))","c50f3754":"!pip install jovian --upgrade --quiet","f427fd71":"import jovian","e6de3718":"jovian.commit(project=\"01-tensor-operations\", environment=None)","c5f35120":"## Section 1 - How to work with Tensor seamlessly on CPU, GPU and TPU\n\nIn the past working with PyTorch on both CPU and GPU required you to rewrite the code. Nowadays it is still not perfect, but I will show you how it could be done including a few corner cases.","33f8879c":"## Section 3 - Advanced custom printing technique\n\nNote: you may need to hit \"trust notebook\" at the top to allow it to inject HTML.","847f9ad3":"Remember always initialize your device and pass the device parameter, where possible. For built-in Python functions and external libraries like Numpy or plotting functions, always add cpu() call just to be safe (best practice at the times of writing)","60afe75f":"## Conclusion\n\nHere I wanted to show you how to read & present tensor data, which I find the most important step when learning anything. It comes also handy when you need to quickly debug some data. Also I show you how to overcome some limitations of PyTorch Tensor class with Numpy and SciKit (SKLearn). One would think that this features will be built-in, but as you dig deep into Tensor documentation, you find out that you spend extra hours just to find out how to do basic stuff before you can move on to more serious machine learning.","f6ffb9da":"If you need to get particular index out of tensor, you can use indices matrix and gather() function:","4daef385":"If GPU, prints: 'cuda:0', where 0 is GPU id (for multi GPU system)\n\nIf CPU, prints: 'cpu'\n\nIf TPU, prints: 'cpu' as well","33d64bcd":"## Section 2 - Pretty print & plot your Tensor\n\ntorch.set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, profile=None, sci_mode=None) [[SOURCE]](https:\/\/pytorch.org\/docs\/stable\/_modules\/torch\/_tensor_str.html#set_printoptions)","a8746d25":"The first command `tensor.numpy()` will break on GPU:\n> TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.","fe822bc6":"Explanation about example","8a46ef67":"You might want to filter tensor data, which will take only positive nonzero values and create a new tensor that will return the indexes of these values from original tensor (indices).\n\nIt works by defining a mask, which acts as a condition. So you can filter any data you want:","2c2b9caf":"### Imports","1646cdf3":"### Pre-seed, so we get reproducible results","43f3d89b":"## Section 5 - Tensor Operation API limits & solutions\n\nFor machine learning you will need to scale data from 0.0 to 1.0. This might come handy also when you need to plot and index normalized data. This is not possible to do with built-in functions, so you can use something as MinMaxScaler\n\nLets see how we can normalize our temperature data from previous example (-10 to 30 degrees of Celsius)","33d90d96":"## Reference Links\n\n* Official documentation for `torch.Tensor`: https:\/\/pytorch.org\/docs\/stable\/tensors.html\n* Plotly: https:\/\/plotly.com\/python\/\n* Python Tabulate package for pretty print: https:\/\/pypi.org\/project\/tabulate\/","214c80ce":"Split sequence into blocks according to its content. Imagine you have a sequence of L events stored in a tensor of shape L x W, where for each event its last feature is a timestamp which indicates when the event appears. Now you would like to split this sequence into blocks according to their timestamp and group by 1 second.\n\n tensor([\n    [n1, 0],\n    [n2, 0.25],\n    [n3, 0.75],\n    [n4, 1],\n    [n5, 1.5],\n    [n6, 2.1],\n    ...\n])\n\nto\n\n[\n    tensor([\n        [n1, 0],\n        [n2, 0.25],\n        [n3, 0.75],\n    ]),\n    tensor([\n        [n4, 1],\n        [n5, 1.5]\n    ]),\n    tensor([\n        [n6, 2.1]\n    ]),\n    ...\n]","fdb3a377":"# CyberLuke's Tensor Operations 101\n\n### how to not shoot yourself in the foot\n\nA starter project for PyTorch & Tensor operations\n- Section 1 - How to work with Tensor seamlessly on CPU, GPU and TPU\n- Section 2 - Pretty print & plot your 1D Tensor\n- Section 3 - Advanced custom printing technique\n- Section 4 - Plot multi-dimensional Tensor with Plotly\n- Section 5 - Tensor Operation API limits & solutions","48d0903a":"This will break on GPU: \n> TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.","c74deb78":"### [TPU] Uncomment this line to test on TPU (tested on Kaggle, should work on Google Collab)","6d88f020":"## Section 4 - Plot multi-dimensional Tensor with Plotly\n\nNow I show you how you can plot 3 dimension data of temperature, humidity & pressure as 3d mesh. Notice that we plot the data in order of z, y, x. So that temperature (x axis from tensor) represents z axis on our plot, which is more practical. Mostly the temperature is the most significant data.","77813c00":"The example above will initialise Tensor on any device we have currently set by default. This is an important step to make it portable! Lets call it a best practice until we have a better solution in PyTorch."}}