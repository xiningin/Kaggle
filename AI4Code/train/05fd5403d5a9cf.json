{"cell_type":{"88093dc5":"code","36263dca":"code","1fb9defe":"code","782d4edf":"code","d1952c4e":"code","afd76d14":"code","af8d00f0":"code","d419f1d4":"code","2fc23290":"code","f9464095":"code","070a7469":"code","0e745257":"code","7e19b7ed":"code","c9f2c88b":"code","03af63c0":"code","97c4552a":"code","243f044e":"code","4ee9c102":"code","193268c8":"code","c5c78228":"code","7e3a4e71":"code","eb1dff1a":"code","c8aaf361":"code","f43dd58b":"code","abefb745":"code","34335cba":"code","1d72815f":"code","8fa3720e":"code","a4dcd1d9":"code","cb84c87c":"code","68c74e0c":"code","a484c144":"markdown","5a19ee66":"markdown","c0a03ec7":"markdown","d233f07e":"markdown","2d3ff85c":"markdown","98e85537":"markdown","dc559946":"markdown","f2e78859":"markdown"},"source":{"88093dc5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nsns.set_style('darkgrid')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","36263dca":"#Interactive shell\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","1fb9defe":"train_path = '\/kaggle\/input\/bike-sharing-demand\/train.csv'\ntest_path = '\/kaggle\/input\/bike-sharing-demand\/test.csv'","782d4edf":"df_train = pd.read_csv(train_path)\ndf_test = pd.read_csv(test_path)","d1952c4e":"df_train.head()\ndf_test.head()","afd76d14":"df_train.shape\ndf_test.shape","af8d00f0":"df_train.info()\nprint('='*100)\ndf_test.info()","d419f1d4":"df_train.isnull().sum()\ndf_test.isnull().sum()","2fc23290":"df_train.describe()\ndf_train.dtypes","f9464095":"def handle_datetime_col(df,train=True):\n    hour = []\n    day = []\n    month = []\n    year = []\n    for i in df['datetime']:\n        dt_obj = datetime.strptime(i, \"%Y-%m-%d %H:%M:%S\")\n        hour.append(dt_obj.hour)\n        day.append(dt_obj.day)\n        month.append(dt_obj.month)\n        year.append(dt_obj.year)\n\n    df['hour'] = pd.DataFrame(hour)\n    df['day'] = pd.DataFrame(day)\n    df['month'] = pd.DataFrame(month)\n    df['year'] = pd.DataFrame(year)\n    if train:\n        df.drop('datetime',axis=1,inplace=True)\n    return df\n","070a7469":"df_train=handle_datetime_col(df_train)\ndf_train.head()","0e745257":"# df_train['weather'].unique()\n# df_train['hour'].unique()\n# df_train['year'].unique()\n# df_train['month'].unique()","7e19b7ed":"#Weather and Hours\n__=fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(60, 20))\n\n__=sns.boxplot(x=\"weather\", y=\"count\", data=df_train, ax = ax1, palette=\"Blues_d\")\n__=ax1.set_title(\"Boxplot for weather variable\",fontsize=50)\n__=ax1.set_xlabel(\"Weather\" , fontsize = 50)\n__=ax1.set_ylabel(\"Count\" , fontsize = 50)\n__=ax1.set_xticklabels(range(1,5),fontsize=30)\n\n__=sns.boxplot(x=\"hour\", y=\"count\", data=df_train, ax=ax2, palette='Blues_d')\n__=ax2.set_title(\"Boxplot for hour variable\",fontsize= 50)\n__=ax2.set_xlabel(\"hour\" , fontsize = 50)\n__=ax2.set_ylabel(\"Count\" , fontsize = 50)\n__=ax2.set_xticklabels(range(24),fontsize=30)\n\n__=fig, (ax3, ax4) = plt.subplots(ncols=2, figsize=(60, 20))\n__=sns.boxplot(x=\"season\", y=\"count\", data=df_train, ax = ax3, palette=\"Blues_d\")\n__=ax3.set_title(\"Boxplot for Season variable\",fontsize=50)\n__=ax3.set_xlabel(\"Season\" , fontsize = 50)\n__=ax3.set_ylabel(\"Count\" , fontsize = 50)\n__=ax3.set_xticklabels(range(1,5),fontsize=30)\n\n__=sns.boxplot(x=\"year\", y=\"count\", data=df_train, ax=ax4, palette='Blues_d')\n__= ax4.set_title(\"Boxplot for Year variable\",fontsize= 50)\n__=ax4.set_xlabel(\"Year\" , fontsize = 50)\n__=ax4.set_ylabel(\"Count\" , fontsize = 50)\n__=ax4.set_xticklabels(['2011','2012'],fontsize=30)\n\n__=fig, (ax5, ax6) = plt.subplots(ncols=2, figsize=(60, 20))\n\n__=sns.boxplot(x=\"month\", y=\"count\", data=df_train, ax=ax5, palette='Blues_d')\n__= ax5.set_title(\"Boxplot for month variable\",fontsize= 50)\n__=ax5.set_xlabel(\"Month\" , fontsize = 50)\n__=ax5.set_ylabel(\"Count\" , fontsize = 50)\n__=ax5.set_xticklabels(range(1,13),fontsize=30)\n\n__=sns.boxplot(x=\"workingday\", y=\"count\", data=df_train, ax=ax6, palette='Blues_d')\n__= ax6.set_title(\"Boxplot for workingday variable\",fontsize= 50)\n__=ax6.set_xlabel(\"Workingday\" , fontsize = 50)\n__=ax6.set_ylabel(\"Count\" , fontsize = 50)\n__=ax6.set_xticklabels(range(2),fontsize=30)\n\n\n__=fig, (ax7, ax8) = plt.subplots(ncols=2, figsize=(60, 20))\n\n__=sns.boxplot(x=\"holiday\", y=\"casual\", data=df_train, ax=ax7, palette='Blues_d')\n__= ax7.set_title(\"Boxplot for holiday variable\",fontsize= 50)\n__=ax7.set_xlabel(\"holiday\" , fontsize = 50)\n__=ax7.set_ylabel(\"Casual\" , fontsize = 50)\n__=ax7.set_xticklabels(range(2),fontsize=30)\n\n__=sns.boxplot(x=\"workingday\", y=\"registered\", data=df_train, ax=ax8, palette='Blues_d')\n__= ax8.set_title(\"Boxplot for workingday variable\",fontsize= 50)\n__=ax8.set_xlabel(\"Workingday\" , fontsize = 50)\n__=ax8.set_ylabel(\"Registered\" , fontsize = 50)\n__=ax8.set_xticklabels(range(2),fontsize=30)","c9f2c88b":"def drop_corr_col(df):\n             # Dropping holiday column as it is highly correlated to\u2018workingday\u2019 column\n             df = df.drop('holiday',axis=1) \n             # Dropping atemp column as it is highly correlated to \u2018temp\u2019 column\n             df = df.drop('atemp',axis=1) \n             return df","03af63c0":"#df_train = drop_corr_col(df_train)\ndf_train.head()","97c4552a":"df_train['humidity'].unique()\ndf_train['windspeed'].unique()\ndf_train['workingday'].unique()","243f044e":"cat_col=['season','workingday']","4ee9c102":"def encode_cat_col(df,cat_col):\n    for i in cat_col:\n        df = pd.get_dummies(df,columns=[i],drop_first=True)\n    return df","193268c8":"#df_train= encode_cat_col(df_train,cat_col)\ndf_train.head()","c5c78228":"def preprocessing(df,cat_col,train=True):\n    df= handle_datetime_col(df,train)\n    df= drop_corr_col(df)\n    df= encode_cat_col(df,cat_col)\n    return df","7e3a4e71":"df_train_cleand = preprocessing(df_train,cat_col)\nlabels= df_train_cleand.columns.drop(['casual','registered','count'])\ndf_train_cleand = df_train_cleand[labels]\ndf_train_cleand.head()","eb1dff1a":"X = df_train_cleand\ny = df_train['count']\n","c8aaf361":"# Dividing the data into train and test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X , y,  train_size=0.3, test_size=0.2, random_state =0)","f43dd58b":"from sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\n\n#n_estimators=300\nmodel=RandomForestRegressor(n_estimators=300)\nmodel.fit(X_train,y_train)\npreds=model.predict(X_test)\nscore=np.sqrt(mean_squared_error(y_test,preds))\nprint(\"score of test : {}\".format(score))","abefb745":"print(\"score of test : {}\".format(np.sqrt(mean_squared_error(y_train,model.predict(X_train)))))\n","34335cba":"df_test.head()","1d72815f":"df_test_copy = preprocessing(df_test,cat_col,train=False)\ndf_test_copy.drop('datetime',axis=1,inplace=True)\ndf_test_copy.head()","8fa3720e":"fi=model.predict(df_test_copy)\n","a4dcd1d9":"Submission = pd.read_csv(\"..\/input\/bike-sharing-demand\/sampleSubmission.csv\")\nSubmission.head()","cb84c87c":"Submission['count'] = np.abs(fi)","68c74e0c":"Submission.to_csv(\"second.csv\", index = False)","a484c144":"### Drop Correleated cols","5a19ee66":"### first : there is no nulls in testing and training","c0a03ec7":"# Split based on each target columns count,casual,registered","d233f07e":"## Handle datetime column","2d3ff85c":"## Encode Categorical columns ( season , workingday)","98e85537":"### investigate on humidity,windspeed","dc559946":"# Visualization","f2e78859":"## Month : 6 is the most rent counts\n## Hour : 8,17,18 are the most rent counts\n## Year : rent increasing between 2011 and 2012 \n## Season : People rent more bikes during season 2 (fall) and 3 (summer) and less in winter and spring"}}