{"cell_type":{"a7710ffa":"code","ddd37cb4":"code","6d686aea":"code","f74d000e":"code","39bbac23":"code","126ce051":"code","7bc00cbc":"code","cae74eeb":"code","75325d94":"code","520896ec":"code","e7f21107":"code","f003dce4":"code","3f8b1090":"code","9efdf982":"code","66f7850f":"code","35a03154":"code","fba21018":"code","4a3a98a2":"code","756be544":"code","b3a04a86":"code","97c8e1da":"code","fc6360c6":"code","9ce7abdb":"code","d5d95511":"code","4263d181":"code","6ca5535c":"code","c96ab306":"code","d68a2d3a":"code","be96d2ff":"code","d40c9835":"code","574643b2":"code","86a6e729":"code","125076f9":"code","26e1fe6a":"markdown","ae11bf95":"markdown","52a60e84":"markdown","b968eb8c":"markdown","42895f07":"markdown","4ff87e43":"markdown"},"source":{"a7710ffa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ddd37cb4":"df = pd.read_csv('\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv')","6d686aea":"df.head()","f74d000e":"df=df.drop(['RowNumber','CustomerId','Surname'],axis=1)","39bbac23":"df.head()","126ce051":"import seaborn as sns\nimport matplotlib.pyplot as plt","7bc00cbc":"df.describe()","cae74eeb":"sns.countplot(x='NumOfProducts',data=df)","75325d94":"sns.countplot(x='NumOfProducts',hue='Exited',data=df)G","520896ec":"sns.countplot(x='Exited',hue='Gender',data=df)","e7f21107":"df.Gender.value_counts()","f003dce4":"sns.countplot(x='Exited',hue='Geography',data=df)","3f8b1090":"df.Geography.value_counts()","9efdf982":"plt.figure(figsize=(15,10))\nsns.countplot(x='Tenure',hue='Exited',data=df)","66f7850f":"df=pd.get_dummies(df,drop_first=True)","35a03154":"df.head()","fba21018":"X=df.iloc[:,[0,1,2,3,4,5,6,7,9,10,11]].values\ny=df.iloc[:,8].values","4a3a98a2":"X.shape","756be544":"from sklearn.model_selection import train_test_split\n","b3a04a86":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.22)","97c8e1da":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","fc6360c6":"from sklearn.linear_model import LogisticRegression\nclassifier_lr = LogisticRegression(random_state=0)\nclassifier_lr.fit(X_train,y_train)\n\ny_pred_lr = classifier_lr.predict(X_test)","9ce7abdb":"from sklearn.metrics import confusion_matrix,accuracy_score\ncm_lr = confusion_matrix(y_test,y_pred_lr)\nac_lr = accuracy_score(y_test,y_pred_lr)\nprint(cm_lr)\nprint(ac_lr)","d5d95511":"from sklearn.neighbors import KNeighborsClassifier\nclassifier_knn = KNeighborsClassifier(n_neighbors=10,metric='minkowski',p=2)\nclassifier_knn.fit(X_train,y_train)\n\ny_pred_knn = classifier_knn.predict(X_test)","4263d181":"cm_knn = confusion_matrix(y_test,y_pred_knn)\nac_knn = accuracy_score(y_test,y_pred_knn)\nprint(cm_knn)\nprint(ac_knn)","6ca5535c":"from sklearn.svm import SVC\nclassifier_svc = SVC(kernel='rbf',random_state=0)\nclassifier_svc.fit(X_train,y_train)\n\ny_pred_svc = classifier_svc.predict(X_test)","c96ab306":"cm_svc = confusion_matrix(y_test,y_pred_svc)\nac_svc = accuracy_score(y_test,y_pred_svc)\nprint(cm_svc)\nprint(ac_svc)","d68a2d3a":"from sklearn.naive_bayes import GaussianNB\nclassifier_nb =GaussianNB()\nclassifier_nb.fit(X_train,y_train)\n\n\ny_pred_nb = classifier_nb.predict(X_test)\n","be96d2ff":"cm_nb = confusion_matrix(y_test,y_pred_nb)\nac_nb = accuracy_score(y_test,y_pred_nb)\nprint(cm_nb)\nprint(ac_nb)","d40c9835":"from sklearn.tree import DecisionTreeClassifier\nclassifier_dt =DecisionTreeClassifier(criterion='gini',random_state=0)\nclassifier_dt.fit(X_train,y_train)\n\n\ny_pred_dt = classifier_dt.predict(X_test)","574643b2":"cm_dt = confusion_matrix(y_test,y_pred_dt)\nac_dt = accuracy_score(y_test,y_pred_dt)\nprint(cm_dt)\nprint(ac_dt)","86a6e729":"from sklearn.ensemble import RandomForestClassifier\nclassifier_rf = RandomForestClassifier(n_estimators = 1000, criterion = 'entropy', random_state = 0)\nclassifier_rf.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred_rf = classifier_rf.predict(X_test)\n","125076f9":"cm_rf = confusion_matrix(y_test,y_pred_rf)\nac_rf = accuracy_score(y_test,y_pred_rf)\nprint(cm_rf)\nprint(ac_rf)","26e1fe6a":"Naive Bayes","ae11bf95":"SVC\n***","52a60e84":"Logistic Regression","b968eb8c":"Decision Tree","42895f07":"Random_Forest","4ff87e43":"KNN"}}