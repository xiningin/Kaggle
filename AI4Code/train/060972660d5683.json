{"cell_type":{"d72d8cd2":"code","96c6a9e7":"code","f3383c08":"code","e4ba3d64":"code","4837ce88":"code","73d0c1f0":"code","e5ee1e86":"code","5d96abc0":"code","30dde753":"code","acf31b84":"code","6b9e276d":"code","629be2d3":"code","9ff6773e":"code","ef2c3092":"code","712adf5c":"code","cfefe917":"code","72567f5e":"code","aaeab21c":"code","4f9d15d8":"code","174d94ce":"code","135fa3f2":"code","60fecc9d":"code","5cdb6336":"code","48ee62e0":"code","86621dcf":"code","028a883f":"markdown","2848d8ba":"markdown","83b50bd9":"markdown","4e661058":"markdown","e1973e36":"markdown","95232ca2":"markdown","de8d9d64":"markdown","99b8586d":"markdown","d189ae2d":"markdown","49f50a5f":"markdown","54fa4b39":"markdown","29603f51":"markdown","b8c5df39":"markdown","fbdc12b5":"markdown","60678577":"markdown","7664dc03":"markdown","ce66b06d":"markdown","7445ffca":"markdown","d9220ef2":"markdown","f697d8ad":"markdown"},"source":{"d72d8cd2":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","96c6a9e7":"df = pd.read_csv('KNN_Project_Data')","f3383c08":"df.head()","e4ba3d64":"sns.pairplot(df,hue='TARGET CLASS')","4837ce88":"from sklearn.preprocessing import StandardScaler","73d0c1f0":"sc = StandardScaler()","e5ee1e86":"sc.fit(df.drop('TARGET CLASS',axis=1))","5d96abc0":"scaled_features = sc.transform(df.drop('TARGET CLASS',axis=1))","30dde753":"df_feat = pd.DataFrame(scaled_features,columns=df.columns[:-1])\ndf_feat.head()","acf31b84":"X = df_feat\ny = df['TARGET CLASS']","6b9e276d":"from sklearn.model_selection import train_test_split","629be2d3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","9ff6773e":"y_train","ef2c3092":"from sklearn.neighbors import KNeighborsClassifier","712adf5c":"knn = KNeighborsClassifier(n_neighbors=1)","cfefe917":"knn.fit(X_train,y_train)","72567f5e":"predictions = knn.predict(X_test)","aaeab21c":"np.mean(predictions!= y_test)","4f9d15d8":"from sklearn.metrics import classification_report, confusion_matrix","174d94ce":"print(confusion_matrix(y_test,predictions))","135fa3f2":"print(classification_report(y_test,predictions))","60fecc9d":"k_value=[]\nerror_rate=[]\n\n\nfor i in range(1,40):\n    k_value.append(i)\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    predictions = knn.predict(X_test)\n    error_rate.append(np.mean(predictions!= y_test))","5cdb6336":"plt.figure(figsize=[10,6])\nplt.plot(k_value,error_rate, color='blue',linestyle ='--',marker = 'o',markerfacecolor='red',markersize=10)\nplt.xlabel('K Value')\nplt.ylabel('Error rate')\nplt.title('Error rate vs K value')","48ee62e0":"knn = KNeighborsClassifier(n_neighbors=28)\nknn.fit(X_train,y_train)\npredictions = knn.predict(X_test)\nprint(confusion_matrix(y_test,predictions))\nprint(classification_report(y_test,predictions))","86621dcf":"knn = KNeighborsClassifier(n_neighbors=28)\nknn.fit(X_train,y_train)\npredictions = knn.predict(X_test)\nprint('With K=28' )\nprint(confusion_matrix(y_test,predictions))\nprint(classification_report(y_test,predictions))","028a883f":"**Use the predict method to predict values using your KNN model and X_test.**","2848d8ba":"# Great Job!","83b50bd9":"**Use the .transform() method to transform the features to a scaled version.**","4e661058":"## Get the Data\n** Read the 'KNN_Project_Data csv file into a dataframe **","e1973e36":"# Train Test Split\n\n**Use train_test_split to split your data into a training set and a testing set.**","95232ca2":"# Using KNN\n\n**Import KNeighborsClassifier from scikit learn.**","de8d9d64":"# EDA\n\nSince this data is artificial, we'll just do a large pairplot with seaborn.\n\n**Use seaborn on the dataframe to create a pairplot with the hue indicated by the TARGET CLASS column.**","99b8586d":"# Predictions and Evaluations\nLet's evaluate our KNN model!","d189ae2d":"**Check the head of the dataframe.**","49f50a5f":"** Fit scaler to the features.**","54fa4b39":"# Choosing a K Value\nLet's go ahead and use the elbow method to pick a good K Value!\n\n** Create a for loop that trains various KNN models with different k values, then keep track of the error_rate for each of these models with a list. Refer to the lecture if you are confused on this step.**","29603f51":"**Convert the scaled features to a dataframe and check the head of this dataframe to make sure the scaling worked.**","b8c5df39":"# K Nearest Neighbors Project \n\n## Import Libraries\n**Import pandas,seaborn, and the usual libraries.**","fbdc12b5":"**Now create the following plot using the information from your for loop.**","60678577":"** Create a StandardScaler() object called scaler.**","7664dc03":"** Create a confusion matrix and classification report.**","ce66b06d":"# Standardize the Variables\n\nTime to standardize the variables.\n\n** Import StandardScaler from Scikit learn.**","7445ffca":"**Create a KNN model instance with n_neighbors=1**","d9220ef2":"## Retrain with new K Value\n\n**Retrain your model with the best K value (up to you to decide what you want) and re-do the classification report and the confusion matrix.**","f697d8ad":"**Fit this KNN model to the training data.**"}}