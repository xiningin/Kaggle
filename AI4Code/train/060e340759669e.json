{"cell_type":{"2f0f6d61":"code","ac77703e":"code","e6c79795":"code","00c4783c":"code","d48b5688":"code","b1ce69b6":"code","98de0eb7":"code","c0cf5ef5":"code","49f88975":"code","b392c50f":"code","90fcedfa":"code","03e549ff":"code","dd139152":"code","a6a02dc1":"code","d6382fd8":"code","6f907dce":"code","c3640115":"code","eee29c4d":"code","9d5af73c":"code","980766bc":"code","14420ddc":"code","02971bde":"code","7c69b90f":"code","16595dae":"code","ea41857a":"code","bb16dd15":"code","c69d8573":"code","0a3b7618":"code","ade6f4bd":"code","f249b054":"code","ed3e35f9":"code","d863de8e":"code","10fb67ea":"code","24d843f5":"code","582a133e":"code","8f324905":"code","1348002f":"code","ffecb53a":"code","36f7652a":"code","e672217c":"code","c173a0bb":"code","33be8f35":"code","2cec773a":"code","40c50f0a":"code","4e8e9f7a":"code","95a1e599":"code","a41d0d17":"code","6898156d":"code","8d8748e6":"markdown","e77303e7":"markdown","297d4543":"markdown","7919dbaf":"markdown","1126181d":"markdown","ad611977":"markdown","d29886b2":"markdown","85e53fed":"markdown","1025bea5":"markdown","9658da55":"markdown","6051a137":"markdown","b8d67d55":"markdown","5b36ba70":"markdown","3fd0adf9":"markdown","b68b4223":"markdown","01ed9e43":"markdown","d1a8c6a4":"markdown","79746038":"markdown","45ec321d":"markdown","eac782b0":"markdown","baab45ba":"markdown","c15ab37c":"markdown","21840bb4":"markdown","151bcba3":"markdown"},"source":{"2f0f6d61":"# \u8fd9\u4e2aipython notebook\u4e3b\u8981\u662f\u6211\u89e3\u51b3Kaggle Titanic\u95ee\u9898\u7684\u601d\u8def\u548c\u8fc7\u7a0b\n\nimport pandas as pd #\u6570\u636e\u5206\u6790\nimport numpy as np #\u79d1\u5b66\u8ba1\u7b97\nfrom pandas import Series,DataFrame\n\ndata_train = pd.read_csv(\"..\/input\/titanic\/train.csv\",encoding='UTF-8')\n#data_train.columns\ndata_train.head() \n#data_train[data_train.Cabin.notnull()]['Survived'].value_counts()","ac77703e":"data_test = pd.read_csv(\"..\/input\/titanic\/test.csv\",encoding='UTF-8')\ndata_test.head() ","e6c79795":"data_train.info()","00c4783c":"data_test.info()","d48b5688":"data_train.describe()","b1ce69b6":"data_test.describe()","98de0eb7":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\n#plt.rcParams['font.sans-serif']=['SimHei']\n#plt.rcParams['axes.unicode_minus'] = False    #\u663e\u793a\u4e2d\u6587\u6807\u9898\n\nfig = plt.figure()\nfig.set(alpha=0.2)  # \u8bbe\u5b9a\u56fe\u8868\u989c\u8272alpha\u53c2\u6570\n\nplt.subplot2grid((2,3),(0,0))             # \u5728\u4e00\u5f20\u5927\u56fe\u91cc\u5206\u5217\u51e0\u4e2a\u5c0f\u56fe\ndata_train.Survived.value_counts().plot(kind='bar')# plots a bar graph of those who surived vs those who did not. \nplt.title(u\"Survived\") # puts a title on our graph\nplt.ylabel(u\"Number of People\")  \n\nplt.subplot2grid((2,3),(0,1))\ndata_train.Pclass.value_counts().plot(kind=\"bar\")\nplt.ylabel(u\"Number of People\")\nplt.title(u\"Pclass\")\n\nplt.subplot2grid((2,3),(0,2))\nplt.scatter(data_train.Survived, data_train.Age)\nplt.ylabel(u\"Age\")                         # sets the y axis lable\nplt.grid(b=True, which='major', axis='y') # formats the grid line style of our graphs\nplt.title(u\"Survived\")\n\n\nplt.subplot2grid((2,3),(1,0), colspan=2)\ndata_train.Age[data_train.Pclass == 1].plot(kind='kde')   # plots a kernel desnsity estimate of the subset of the 1st class passanges's age\ndata_train.Age[data_train.Pclass == 2].plot(kind='kde')\ndata_train.Age[data_train.Pclass == 3].plot(kind='kde')\nplt.xlabel(u\"Age\")# plots an axis lable\nplt.ylabel(u\"Density\") \nplt.title(u\"Pclass-Age\")\nplt.legend((u'Pclass_1', u'Pclass_2',u'Pclass_3'),loc='best') # sets our legend for our graph.\n\n\nplt.subplot2grid((2,3),(1,2))\ndata_train.Embarked.value_counts().plot(kind='bar')\nplt.title(u\"Embarked\")\nplt.ylabel(u\"Number of People\")  \n\nplt.tight_layout()    #\u63a7\u5236\u5b50\u56fe\u95f4\u8ddd\nplt.show()\n ","c0cf5ef5":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\ndef bar_chart(feature):\n    survived=data_train[data_train['Survived']==1][feature].value_counts()\n    dead=data_train[data_train['Survived']==0][feature].value_counts()\n    df=pd.DataFrame([survived,dead])\n    df.index=['survived','dead']\n    df.plot(kind='bar',stacked=True, figsize=(7,4))\n    \nbar_chart('Sex')","49f88975":"bar_chart('Pclass')","b392c50f":"bar_chart('Embarked')","90fcedfa":"bar_chart('SibSp')","03e549ff":"bar_chart('Parch')","dd139152":"#\u770b\u770b\u5404\u4e58\u5ba2\u7b49\u7ea7\u7684\u83b7\u6551\u60c5\u51b5\nfig = plt.figure()\nfig.set(alpha=0.2)  # \u8bbe\u5b9a\u56fe\u8868\u989c\u8272alpha\u53c2\u6570\n\nSurvived_0 = data_train.Pclass[data_train.Survived == 0].value_counts()\nSurvived_1 = data_train.Pclass[data_train.Survived == 1].value_counts()\ndf=pd.DataFrame({u'Survived':Survived_1, u'Dead':Survived_0})\ndf.plot(kind='bar', stacked=True)\nplt.title(u\"Survived\")\nplt.xlabel(u\"Pclass\") \nplt.ylabel(u\"Number of People\") \n\nplt.show()","a6a02dc1":"#\u770b\u770b\u5404\u6027\u522b\u7684\u83b7\u6551\u60c5\u51b5\nfig = plt.figure()\nfig.set(alpha=0.2)  # \u8bbe\u5b9a\u56fe\u8868\u989c\u8272alpha\u53c2\u6570\n\nSurvived_m = data_train.Survived[data_train.Sex == 'male'].value_counts()\nSurvived_f = data_train.Survived[data_train.Sex == 'female'].value_counts()\ndf=pd.DataFrame({u'Male':Survived_m, u'Female':Survived_f})\ndf.plot(kind='bar', stacked=True)\nplt.title(u\"Survived\")\nplt.xlabel(u\"Sex\") \nplt.ylabel(u\"Number of People\")\n\nplt.show()","d6382fd8":"#\u7136\u540e\u6211\u4eec\u518d\u6765\u770b\u770b\u5404\u79cd\u8231\u7ea7\u522b\u60c5\u51b5\u4e0b\u5404\u6027\u522b\u7684\u83b7\u6551\u60c5\u51b5\nfig=plt.figure()\nfig.set(alpha=0.65) # \u8bbe\u7f6e\u56fe\u50cf\u900f\u660e\u5ea6\uff0c\u65e0\u6240\u8c13\nplt.title(u\"Survived\")\n\nax1=fig.add_subplot(141)\ndata_train.Survived[data_train.Sex == 'female'][data_train.Pclass != 3].value_counts().plot(kind='bar', label=\"female highclass\", color='#FA2479')\nax1.set_xticklabels([u\"1\", u\"0\"], rotation=0)\nax1.legend([u\"Female\/12\"], loc='best')\n\nax2=fig.add_subplot(142, sharey=ax1)\ndata_train.Survived[data_train.Sex == 'female'][data_train.Pclass == 3].value_counts().plot(kind='bar', label='female, low class', color='pink')\nax2.set_xticklabels([u\"0\", u\"1\"], rotation=0)\nplt.legend([u\"Female\/3\"], loc='best')\n\nax3=fig.add_subplot(143, sharey=ax1)\ndata_train.Survived[data_train.Sex == 'male'][data_train.Pclass != 3].value_counts().plot(kind='bar', label='male, high class',color='lightblue')\nax3.set_xticklabels([u\"0\", u\"1\"], rotation=0)\nplt.legend([u\"Male\/12\"], loc='best')\n\nax4=fig.add_subplot(144, sharey=ax1)\ndata_train.Survived[data_train.Sex == 'male'][data_train.Pclass == 3].value_counts().plot(kind='bar', label='male low class', color='steelblue')\nax4.set_xticklabels([u\"0\", u\"1\"], rotation=0)\nplt.legend([u\"Male\/3\"], loc='best')\n\nplt.tight_layout()    #\u63a7\u5236\u5b50\u56fe\u95f4\u8ddd\nplt.show()","6f907dce":"gs = data_train.groupby(['SibSp','Survived'])\ndf = pd.DataFrame(gs.count()['PassengerId'])\ndf","c3640115":"gp = data_train.groupby(['Parch','Survived'])\ndf = pd.DataFrame(gp.count()['PassengerId'])\ndf","eee29c4d":"#ticket\u662f\u8239\u7968\u7f16\u53f7\uff0c\u5e94\u8be5\u662funique\u7684\uff0c\u548c\u6700\u540e\u7684\u7ed3\u679c\u6ca1\u6709\u592a\u5927\u7684\u5173\u7cfb\uff0c\u4e0d\u7eb3\u5165\u8003\u8651\u7684\u7279\u5f81\u8303\u7574\n#cabin\u53ea\u6709204\u4e2a\u4e58\u5ba2\u6709\u503c\uff0c\u6211\u4eec\u5148\u770b\u770b\u5b83\u7684\u4e00\u4e2a\u5206\u5e03\ndata_train.Cabin.value_counts()","9d5af73c":"#cabin\u7684\u503c\u8ba1\u6570\u592a\u5206\u6563\u4e86\uff0c\u7edd\u5927\u591a\u6570Cabin\u503c\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\u611f\u89c9\u4e0a\u4f5c\u4e3a\u7c7b\u76ee\uff0c\u52a0\u5165\u7279\u5f81\u672a\u5fc5\u4f1a\u6709\u6548\n#\u90a3\u6211\u4eec\u4e00\u8d77\u770b\u770b\u8fd9\u4e2a\u503c\u7684\u6709\u65e0\uff0c\u5bf9\u4e8esurvival\u7684\u5206\u5e03\u72b6\u51b5\uff0c\u5f71\u54cd\u5982\u4f55\u5427\nfig = plt.figure()\nfig.set(alpha=0.2)  # \u8bbe\u5b9a\u56fe\u8868\u989c\u8272alpha\u53c2\u6570\n\nSurvived_cabin = data_train.Survived[pd.notnull(data_train.Cabin)].value_counts()\nSurvived_nocabin = data_train.Survived[pd.isnull(data_train.Cabin)].value_counts()\ndf=pd.DataFrame({u'Yes':Survived_cabin, u'No':Survived_nocabin}).transpose()\ndf.plot(kind='bar', stacked=True)\nplt.title(u\"Survived\")\nplt.xlabel(u\"Cabin\") \nplt.ylabel(u\"Nummber of Peoole\")\n\nplt.show()\n\n#\u4f3c\u4e4e\u6709cabin\u8bb0\u5f55\u7684\u4e58\u5ba2survival\u6bd4\u4f8b\u7a0d\u9ad8\uff0c\u90a3\u5148\u8bd5\u8bd5\u628a\u8fd9\u4e2a\u503c\u5206\u4e3a\u4e24\u7c7b\uff0c\u6709cabin\u503c\/\u65e0cabin\u503c\uff0c\u4e00\u4f1a\u513f\u52a0\u5230\u7c7b\u522b\u7279\u5f81\u597d\u4e86","980766bc":"data_train['Title'] = data_train.Name.apply(lambda name: name.split(',')[1].split('.')[0].strip())\ndata_train.Title.value_counts()","14420ddc":"List=data_train.Title.value_counts().index[4:].tolist()\nmapping={}\nfor s in List:\n    mapping[s]='Else'\ndata_train['Title']=data_train['Title'].map(lambda x: mapping[x] if x in mapping else x)\ndata_train.Title.value_counts()","02971bde":"from sklearn.ensemble import RandomForestRegressor\n \n### \u4f7f\u7528 RandomForestClassifier \u586b\u8865\u7f3a\u5931\u7684\u5e74\u9f84\u5c5e\u6027\ndef set_missing_ages(df):\n    \n    # \u628a\u5df2\u6709\u7684\u6570\u503c\u578b\u7279\u5f81\u53d6\u51fa\u6765\u4e22\u8fdbRandom Forest Regressor\u4e2d\n    age_df = df[['Age','Fare', 'Parch', 'SibSp', 'Pclass']]\n\n    # \u4e58\u5ba2\u5206\u6210\u5df2\u77e5\u5e74\u9f84\u548c\u672a\u77e5\u5e74\u9f84\u4e24\u90e8\u5206\n    known_age = age_df[age_df.Age.notnull()].as_matrix()\n    unknown_age = age_df[age_df.Age.isnull()].as_matrix()\n\n    # y\u5373\u76ee\u6807\u5e74\u9f84\n    y = known_age[:, 0]\n\n    # X\u5373\u7279\u5f81\u5c5e\u6027\u503c\n    X = known_age[:, 1:]\n\n    # fit\u5230RandomForestRegressor\u4e4b\u4e2d\n    rfr = RandomForestRegressor(random_state=0, n_estimators=2000, n_jobs=-1)\n    rfr.fit(X, y)\n    \n    # \u7528\u5f97\u5230\u7684\u6a21\u578b\u8fdb\u884c\u672a\u77e5\u5e74\u9f84\u7ed3\u679c\u9884\u6d4b\n    predictedAges = rfr.predict(unknown_age[:, 1::])\n    \n    # \u7528\u5f97\u5230\u7684\u9884\u6d4b\u7ed3\u679c\u586b\u8865\u539f\u7f3a\u5931\u6570\u636e\n    df.loc[ (df.Age.isnull()), 'Age' ] = predictedAges \n    \n    return df, rfr\n\ndef set_Cabin_type(df):\n    df.loc[ (df.Cabin.notnull()), 'Cabin' ] = \"Yes\"\n    df.loc[ (df.Cabin.isnull()), 'Cabin' ] = \"No\"\n    return df\n\n#data_train, rfr = set_missing_ages(data_train)\n\nmean_ages = np.zeros(5)\nmean_ages[0]=np.average(data_train[data_train['Title'] == 'Miss']['Age'].dropna())\nmean_ages[1]=np.average(data_train[data_train['Title'] == 'Mrs']['Age'].dropna())\nmean_ages[2]=np.average(data_train[data_train['Title'] == 'Mr']['Age'].dropna())\nmean_ages[3]=np.average(data_train[data_train['Title'] == 'Master']['Age'].dropna())\nmean_ages[4]=np.average(data_train[data_train['Title'] == 'Else']['Age'].dropna())\n\ndata_train.loc[ (data_train.Age.isnull()) & (data_train.Title == 'Miss') ,'Age'] = mean_ages[0]\ndata_train.loc[ (data_train.Age.isnull()) & (data_train.Title == 'Mrs') ,'Age'] = mean_ages[1]\ndata_train.loc[ (data_train.Age.isnull()) & (data_train.Title == 'Mr') ,'Age'] = mean_ages[2]\ndata_train.loc[ (data_train.Age.isnull()) & (data_train.Title == 'Master') ,'Age'] = mean_ages[3]\ndata_train.loc[ (data_train.Age.isnull()) & (data_train.Title == 'Else') ,'Age'] = mean_ages[4]\n\ndata_train = set_Cabin_type(data_train)\n","7c69b90f":"data_train.Ticket.value_counts()","16595dae":"#\u770b\u770b\u5404\u6027\u522b\u7684\u83b7\u6551\u60c5\u51b5\nfig = plt.figure()\nfig.set(alpha=0.2)  # \u8bbe\u5b9a\u56fe\u8868\u989c\u8272alpha\u53c2\u6570\n\nSurvived_m = data_train.Survived[(data_train.Ticket == 'CA. 2343')&(data_train.Sex == 'male')].value_counts()\nSurvived_f = data_train.Survived[(data_train.Ticket == 'CA. 2343')&(data_train.Sex == 'female')].value_counts()\ndf=pd.DataFrame({u'Male':Survived_m, u'Female':Survived_f})\ndf.plot(kind='bar', stacked=True)\nplt.title(u\"Survived\")\nplt.xlabel(u\"Sex\") \nplt.ylabel(u\"Number of People\")\n\nplt.show()","ea41857a":"#\u770b\u770b\u5404\u6027\u522b\u7684\u83b7\u6551\u60c5\u51b5\nfig = plt.figure()\nfig.set(alpha=0.2)  # \u8bbe\u5b9a\u56fe\u8868\u989c\u8272alpha\u53c2\u6570\n\nSurvived_m = data_train.Survived[(data_train.Ticket == '347082')&(data_train.Sex == 'male')].value_counts()\nSurvived_f = data_train.Survived[(data_train.Ticket == '347082')&(data_train.Sex == 'female')].value_counts()\ndf=pd.DataFrame({u'Male':Survived_m, u'Female':Survived_f})\ndf.plot(kind='bar', stacked=True)\nplt.title(u\"Survived\")\nplt.xlabel(u\"Sex\") \nplt.ylabel(u\"Number of People\")\n\nplt.show()","bb16dd15":"pd.crosstab(pd.cut(data_train.Age,8)[:len(data_train)],data_train.Survived).plot.bar(stacked=True)","c69d8573":"data_train['Family']=data_train['SibSp']+data_train['Parch']\ndata_train['Sex_Pclass'] = data_train.Sex + \"_\" + data_train.Pclass.map(str)\n\ndata_train['AgeRank']=data_train['Age']\ndata_train.loc[ (data_train.Age<=10) ,'AgeRank'] = 'child'\ndata_train.loc[ (data_train.Age>60),'AgeRank'] = 'aged'\ndata_train.loc[ (data_train.Age>10) & (data_train.Age <=30) ,'AgeRank'] = 'adult'\ndata_train.loc[ (data_train.Age>30) & (data_train.Age <=60) ,'AgeRank'] = 'senior'\n\ndata_train.info()","0a3b7618":"data_train[\"Fname\"] = data_train.Name.apply(lambda name: name.split(\",\")[0])\ndata_train.Fname.value_counts()","ade6f4bd":"#\u6709\u5973\u6027\u6b7b\u4ea1\u7684\u5bb6\u5ead\uff0c\u9664\u4e861\u5c81\u4ee5\u4e0b\u7684\u5a74\u513f\u5916\uff0c\u5bb6\u5ead\u6210\u5458\u5168\u90e8\u6b7b\u4ea1\u3002\n\ndead_train = data_train[data_train[\"Survived\"] == 0]\ndead_fname_ticket = dead_train[(dead_train[\"Sex\"] == \"female\") & (dead_train[\"Family\"] != 0)][[\"Fname\", \"Ticket\"]]\ndata_train[\"dead_family\"] = np.where(data_train[\"Fname\"].isin(dead_fname_ticket[\"Fname\"])\\\n                                & data_train[\"Ticket\"].isin(dead_fname_ticket[\"Ticket\"]), 1, 0)\n\n#\u5bb6\u5ead\u4e2d\u82e5\u6709\u5927\u4e8e18\u5c81\u7537\u6027\u5b58\u6d3b\uff0c\u5219\u8be5\u5bb6\u5ead\u5168\u90e8\u5b58\u6d3b\u3002\n\nlive_train = data_train[data_train[\"Survived\"] == 1]\nlive_fname_ticket = live_train[(live_train[\"Sex\"] == \"male\") & (live_train[\"Family\"] !=0) & ((live_train[\"Age\"] >= 18) )][[\"Fname\", \"Ticket\"]]\ndata_train[\"live_family\"] = np.where(data_train[\"Fname\"].isin(live_fname_ticket[\"Fname\"])\\\n                                & data_train[\"Ticket\"].isin(live_fname_ticket[\"Ticket\"]), 1, 0)","f249b054":"#\u770b\u770b\u5404\u6027\u522b\u7684\u83b7\u6551\u60c5\u51b5\nfig = plt.figure()\nfig.set(alpha=0.2)  # \u8bbe\u5b9a\u56fe\u8868\u989c\u8272alpha\u53c2\u6570\n\nSurvived = data_train.Survived[(data_train[\"Fname\"].isin(dead_fname_ticket[\"Fname\"]))&(data_train[\"Ticket\"].isin(dead_fname_ticket[\"Ticket\"]))].value_counts()\n#Survived = data_train.Survived[(data_train[\"Fname\"].isin(live_fname_ticket[\"Fname\"]))&(data_train[\"Ticket\"].isin(live_fname_ticket[\"Ticket\"]))].value_counts()\ndf=pd.DataFrame({u'Number of People':Survived})\ndf.plot(kind='bar', stacked=True)\nplt.title(u\"Survived\")\nplt.xlabel(u\"dead_family\") \nplt.ylabel(u\"Number of People\")\n\nplt.show()","ed3e35f9":"#\u770b\u770b\u5404\u6027\u522b\u7684\u83b7\u6551\u60c5\u51b5\nfig = plt.figure()\nfig.set(alpha=0.2)  # \u8bbe\u5b9a\u56fe\u8868\u989c\u8272alpha\u53c2\u6570\n\n#Survived = data_train.Survived[(data_train[\"Fname\"].isin(dead_fname_ticket[\"Fname\"]))&(data_train[\"Ticket\"].isin(dead_fname_ticket[\"Ticket\"]))].value_counts()\nSurvived = data_train.Survived[(data_train[\"Fname\"].isin(live_fname_ticket[\"Fname\"]))&(data_train[\"Ticket\"].isin(live_fname_ticket[\"Ticket\"]))].value_counts()\ndf=pd.DataFrame({u'Number of People':Survived})\ndf.plot(kind='bar', stacked=True)\nplt.title(u\"Survived\")\nplt.xlabel(u\"live_family\") \nplt.ylabel(u\"Number of People\")\n\nplt.show()","d863de8e":"data_train.describe()\n#data_train","10fb67ea":"# \u56e0\u4e3a\u903b\u8f91\u56de\u5f52\u5efa\u6a21\u65f6\uff0c\u9700\u8981\u8f93\u5165\u7684\u7279\u5f81\u90fd\u662f\u6570\u503c\u578b\u7279\u5f81\n# \u6211\u4eec\u5148\u5bf9\u7c7b\u76ee\u578b\u7684\u7279\u5f81\u79bb\u6563\/\u56e0\u5b50\u5316\n# \u4ee5Cabin\u4e3a\u4f8b\uff0c\u539f\u672c\u4e00\u4e2a\u5c5e\u6027\u7ef4\u5ea6\uff0c\u56e0\u4e3a\u5176\u53d6\u503c\u53ef\u4ee5\u662f['yes','no']\uff0c\u800c\u5c06\u5176\u5e73\u5c55\u5f00\u4e3a'Cabin_yes','Cabin_no'\u4e24\u4e2a\u5c5e\u6027\n# \u539f\u672cCabin\u53d6\u503c\u4e3ayes\u7684\uff0c\u5728\u6b64\u5904\u7684'Cabin_yes'\u4e0b\u53d6\u503c\u4e3a1\uff0c\u5728'Cabin_no'\u4e0b\u53d6\u503c\u4e3a0\n# \u539f\u672cCabin\u53d6\u503c\u4e3ano\u7684\uff0c\u5728\u6b64\u5904\u7684'Cabin_yes'\u4e0b\u53d6\u503c\u4e3a0\uff0c\u5728'Cabin_no'\u4e0b\u53d6\u503c\u4e3a1\n# \u6211\u4eec\u4f7f\u7528pandas\u7684get_dummies\u6765\u5b8c\u6210\u8fd9\u4e2a\u5de5\u4f5c\uff0c\u5e76\u62fc\u63a5\u5728\u539f\u6765\u7684data_train\u4e4b\u4e0a\uff0c\u5982\u4e0b\u6240\u793a\ndummies_Cabin = pd.get_dummies(data_train['Cabin'], prefix= 'Cabin')\n\ndummies_Embarked = pd.get_dummies(data_train['Embarked'], prefix= 'Embarked')\n\ndummies_Sex = pd.get_dummies(data_train['Sex'], prefix= 'Sex')\n\ndummies_Pclass = pd.get_dummies(data_train['Pclass'], prefix= 'Pclass')\n\ndummies_Sex_Pclass = pd.get_dummies(data_train['Sex_Pclass'], prefix= 'Sex_Pclass')\n\ndummies_AgeRank = pd.get_dummies(data_train['AgeRank'], prefix= 'AgeRank')\n\ndummies_Title = pd.get_dummies(data_train['Title'], prefix= 'Title')\n\ndf = pd.concat([data_train, dummies_Cabin,  dummies_Sex, dummies_Pclass, dummies_AgeRank, dummies_Title, dummies_Sex_Pclass], axis=1)\ndf.drop(['Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked', 'AgeRank', 'Title', 'Sex_Pclass' ,'Fname'], axis=1, inplace=True)\n\n#df['Sex_Pclass_male_4']=df['Sex_Pclass_male_2']+df['Sex_Pclass_male_3']\n#df.drop(['Sex_Pclass_male_2','Sex_Pclass_male_3'], axis=1, inplace=True)\n\n#df['Sex_Pclass_female_4']=df['Sex_Pclass_female_2']+df['Sex_Pclass_female_3']\n#df.drop(['Sex_Pclass_female_2','Sex_Pclass_female_3'], axis=1, inplace=True)\n\ndf.columns","24d843f5":"# \u63a5\u4e0b\u6765\u6211\u4eec\u8981\u63a5\u7740\u505a\u4e00\u4e9b\u6570\u636e\u9884\u5904\u7406\u7684\u5de5\u4f5c\uff0c\u6bd4\u5982scaling\uff0c\u5c06\u4e00\u4e9b\u53d8\u5316\u5e45\u5ea6\u8f83\u5927\u7684\u7279\u5f81\u5316\u5230[-1,1]\u4e4b\u5185\n# \u8fd9\u6837\u53ef\u4ee5\u52a0\u901flogistic regression\u7684\u6536\u655b\nimport sklearn.preprocessing as preprocessing\nscaler = preprocessing.StandardScaler()\n\nage_scale_param = scaler.fit(df['Age'].values.reshape(-1,1))\ndf['Age_scaled'] = scaler.fit_transform(df['Age'].values.reshape(-1,1), age_scale_param)\n\nfare_scale_param = scaler.fit(df['Fare'].values.reshape(-1,1))\ndf['Fare_scaled'] = scaler.fit_transform(df['Fare'].values.reshape(-1,1), fare_scale_param)\n\ndf.columns","582a133e":"# \u6211\u4eec\u628a\u9700\u8981\u7684feature\u5b57\u6bb5\u53d6\u51fa\u6765\uff0c\u8f6c\u6210numpy\u683c\u5f0f\uff0c\u4f7f\u7528scikit-learn\u4e2d\u7684LogisticRegression\u5efa\u6a21\nfrom sklearn import linear_model\n\ntrain_df = df.filter(regex='Survived|Family|dead_family|live_family|AgeRank|Fare_.*|Cabin_.*|Sex_.*|Pclass_.*|Title_.*')\n#train_np = train_df.as_matrix()\ntrain_np = train_df.values\n# y\u5373Survival\u7ed3\u679c\ny = train_np[:, 0]\n\n# X\u5373\u7279\u5f81\u5c5e\u6027\u503c\nX = train_np[:, 1:]\n\n# fit\u5230RandomForestRegressor\u4e4b\u4e2d\nclf = linear_model.LogisticRegression(C=1.0, penalty='l1', solver='liblinear', tol=1e-6)\nclf.fit(X, y)\n    \nclf","8f324905":"X.shape","1348002f":"data_test.loc[ (data_test.Fare.isnull()), 'Fare' ] = 0\n\n# \u63a5\u7740\u6211\u4eec\u5bf9test_data\u505a\u548ctrain_data\u4e2d\u4e00\u81f4\u7684\u7279\u5f81\u53d8\u6362\n# \u9996\u5148\u7528\u540c\u6837\u7684RandomForestRegressor\u6a21\u578b\u586b\u4e0a\u4e22\u5931\u7684\u5e74\u9f84\n\ndata_test['Family']=data_train['SibSp']+data_train['Parch']\ndata_test['Sex_Pclass'] = data_test.Sex + \"_\" + data_test.Pclass.map(str)\n\ndata_test['Title'] = data_test.Name.apply(lambda name: name.split(',')[1].split('.')[0].strip())\nList=data_test.Title.value_counts().index[4:].tolist()\nmapping={}\nfor s in List:\n    mapping[s]='Else'\ndata_test['Title']=data_test['Title'].map(lambda x: mapping[x] if x in mapping else x)\n\n#tmp_df = data_test[['Age', 'Fare', 'Parch', 'SibSp', 'Pclass']]\n#null_age = tmp_df[data_test.Age.isnull()].as_matrix()\n\n# \u6839\u636e\u7279\u5f81\u5c5e\u6027X\u9884\u6d4b\u5e74\u9f84\u5e76\u8865\u4e0a\n#X = null_age[:, 1:]\n#predictedAges = rfr.predict(X)\n#data_test.loc[ (data_test.Age.isnull()), 'Age' ] = predictedAges\n\nmean_ages = np.zeros(5)\nmean_ages[0]=np.average(data_test[data_test['Title'] == 'Miss']['Age'].dropna())\nmean_ages[1]=np.average(data_test[data_test['Title'] == 'Mrs']['Age'].dropna())\nmean_ages[2]=np.average(data_test[data_test['Title'] == 'Mr']['Age'].dropna())\nmean_ages[3]=np.average(data_test[data_test['Title'] == 'Master']['Age'].dropna())\nmean_ages[4]=np.average(data_test[data_test['Title'] == 'Else']['Age'].dropna())\n\ndata_test.loc[ (data_test.Age.isnull()) & (data_test.Title == 'Miss') ,'Age'] = mean_ages[0]\ndata_test.loc[ (data_test.Age.isnull()) & (data_test.Title == 'Mrs') ,'Age'] = mean_ages[1]\ndata_test.loc[ (data_test.Age.isnull()) & (data_test.Title == 'Mr') ,'Age'] = mean_ages[2]\ndata_test.loc[ (data_test.Age.isnull()) & (data_test.Title == 'Master') ,'Age'] = mean_ages[3]\ndata_test.loc[ (data_test.Age.isnull()) & (data_test.Title == 'Else') ,'Age'] = mean_ages[4]\n\ndata_test['AgeRank']=data_test['Age']\ndata_test.loc[ (data_test.Age<=10) ,'AgeRank'] = 'child'\ndata_test.loc[ (data_test.Age>60),'AgeRank'] = 'aged'\ndata_test.loc[ (data_test.Age>10) & (data_test.Age <=30) ,'AgeRank'] = 'adult'\ndata_test.loc[ (data_test.Age>30) & (data_test.Age <=60) ,'AgeRank'] = 'senior'\n\ndata_test = set_Cabin_type(data_test)\n\ndata_test[\"Fname\"] = data_test.Name.apply(lambda name: name.split(\",\")[0])\n#data_train.Fname.value_counts()\n\n#\u6709\u5973\u6027\u6b7b\u4ea1\u7684\u5bb6\u5ead\uff0c\u9664\u4e861\u5c81\u4ee5\u4e0b\u7684\u5a74\u513f\u5916\uff0c\u5bb6\u5ead\u6210\u5458\u5168\u90e8\u6b7b\u4ea1\u3002\uff08\u5206\u6570\u7b2c\u4e00\u6b21\u6709\u5927\u7684\u63d0\u5347\uff0c\u4e5f\u662f\u6dfb\u52a0\u4e86\u8be5\u7279\u5f81\u4e4b\u540e\uff09\ndead_fname_ticket = dead_train[(dead_train[\"Sex\"] == \"female\") & (dead_train[\"Family\"] != 0)][[\"Fname\", \"Ticket\"]]\ndata_test[\"dead_family\"] = np.where(data_test[\"Fname\"].isin(dead_fname_ticket[\"Fname\"])\\\n                                & data_test[\"Ticket\"].isin(dead_fname_ticket[\"Ticket\"]), 1, 0)\n\n#\u5bb6\u5ead\u4e2d\u82e5\u6709\u5927\u4e8e18\u5c81\u7537\u6027\u5b58\u6d3b\uff0c\u6216\u5e74\u9f84\u4e3anan\u7684\u7537\u6027\u5b58\u6d3b\uff0c\u5219\u8be5\u5bb6\u5ead\u5168\u90e8\u5b58\u6d3b\u3002\uff08\u52a0\u5165\u8be5\u7279\u5f81\u540e\uff0c\u516c\u5206\u8fbe\u5230\u4e860.8\uff09\nlive_fname_ticket = live_train[(live_train[\"Sex\"] == \"male\") & (live_train[\"Family\"] !=0) & ((live_train[\"Age\"] >= 18) )][[\"Fname\", \"Ticket\"]]\ndata_test[\"live_family\"] = np.where(data_test[\"Fname\"].isin(live_fname_ticket[\"Fname\"])\\\n                                & data_test[\"Ticket\"].isin(live_fname_ticket[\"Ticket\"]), 1, 0)\n\ndummies_Cabin = pd.get_dummies(data_test['Cabin'], prefix= 'Cabin')\ndummies_Embarked = pd.get_dummies(data_test['Embarked'], prefix= 'Embarked')\ndummies_Sex = pd.get_dummies(data_test['Sex'], prefix= 'Sex')\ndummies_Pclass = pd.get_dummies(data_test['Pclass'], prefix= 'Pclass')\ndummies_Sex_Pclass = pd.get_dummies(data_test['Sex_Pclass'], prefix= 'Sex_Pclass')\ndummies_AgeRank = pd.get_dummies(data_test['AgeRank'], prefix= 'AgeRank')\ndummies_Title = pd.get_dummies(data_test['Title'], prefix= 'Title')\n\ndf_test = pd.concat([data_test, dummies_Cabin, dummies_Sex, dummies_Pclass, dummies_AgeRank, dummies_Title, dummies_Sex_Pclass], axis=1)\ndf_test.drop(['Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked', 'AgeRank', 'Title', 'Sex_Pclass', 'Fname'], axis=1, inplace=True)\n\n#df_test['Sex_Pclass_male_4']=df_test['Sex_Pclass_male_2']+df_test['Sex_Pclass_male_3']\n#df_test.drop(['Sex_Pclass_male_2','Sex_Pclass_male_3'], axis=1, inplace=True)\n\n#df_test['Sex_Pclass_female_4']=df_test['Sex_Pclass_female_2']+df_test['Sex_Pclass_female_3']\n#df_test.drop(['Sex_Pclass_female_2','Sex_Pclass_female_3'], axis=1, inplace=True)\n\ndf_test['Age_scaled'] = scaler.fit_transform(df_test['Age'].values.reshape(-1,1), age_scale_param)\ndf_test['Fare_scaled'] = scaler.fit_transform(df_test['Fare'].values.reshape(-1,1), fare_scale_param)\n\ndf_test.columns","ffecb53a":"test = df_test.filter(regex='Family|dead_family|live_family|AgeRank|Fare_.*|Cabin_.*|Sex_.*|Pclass_.*|Title_.*')\npredictions = clf.predict(test)\nresult = pd.DataFrame({'PassengerId':data_test['PassengerId'].values, 'Survived':predictions.astype(np.int32)})","36f7652a":"result.to_csv(\"logistic_regression_predictions_submission01.csv\", index=False)\npd.read_csv(\"logistic_regression_predictions_submission01.csv\")","e672217c":"pd.DataFrame({\"columns\":list(train_df.columns)[1:], \"coef\":list(clf.coef_.T)})","c173a0bb":"# from sklearn import cross_validation\n# \u53c2\u8003https:\/\/blog.csdn.net\/cheneyshark\/article\/details\/78640887 \uff0c 0.18\u7248\u672c\u4e2d\uff0ccross_validation\u88ab\u5e9f\u5f03\n# \u6539\u4e3a\u4e0b\u9762\u7684\u4ecemodel_selection\u76f4\u63a5import cross_val_score \u548c train_test_split\nfrom sklearn.model_selection import cross_val_score, train_test_split\n\n #\u7b80\u5355\u770b\u770b\u6253\u5206\u60c5\u51b5\nclf = linear_model.LogisticRegression(solver='liblinear',C=1.0, penalty='l1', tol=1e-6)\nall_data = df.filter(regex='Survived|Family|dead_family|live_family|AgeRank|Fare_.*|Cabin_.*|Sex_.*|Pclass_.*|Title_.*')\nX = all_data.values[:,1:]\ny = all_data.values[:,0]\n\ncv_scores=cross_val_score(clf, X, y, cv=10)\nprint(cv_scores,\"\\n\")\nprint(\"Average score:\",np.mean(cv_scores))","33be8f35":"# \u5206\u5272\u6570\u636e\uff0c\u6309\u7167 \u8bad\u7ec3\u6570\u636e:cv\u6570\u636e = 3:1\u7684\u6bd4\u4f8b\n# split_train, split_cv = cross_validation.train_test_split(df, test_size=0.25, random_state=0)\nsplit_train, split_cv = train_test_split(df, test_size=0.25, random_state=0)\n\ntrain_df = split_train.filter(regex='Survived|Family|dead_family|live_family|AgeRank|Fare_.*|Cabin_.*|Sex_.*|Pclass_.*|Title_.*')\n# \u751f\u6210\u6a21\u578b\nclf = linear_model.LogisticRegression(solver='liblinear',C=1.0, penalty='l1', tol=1e-6)\nclf.fit(train_df.values[:,1:], train_df.values[:,0])\n\n# \u5bf9cross validation\u6570\u636e\u8fdb\u884c\u9884\u6d4b\n\ncv_df = split_cv.filter(regex='Survived|Family|dead_family|live_family|AgeRank|Fare_.*|Cabin_.*|Sex_.*|Pclass_.*|Title_.*')\npredictions = clf.predict(cv_df.values[:,1:])\n\n# \u53bb\u9664\u9884\u6d4b\u9519\u8bef\u7684case\u770b\u539f\u59cbdataframe\u6570\u636e\n#split_cv['PredictResult'] = predictions\norigin_data_train = pd.read_csv(\"..\/input\/titanic\/train.csv\",encoding='UTF-8')\nbad_cases = origin_data_train.loc[origin_data_train['PassengerId'].isin(split_cv[predictions != cv_df.values[:,0]]['PassengerId'].values)]\nbad_cases.head(10)","2cec773a":"import numpy as np\nimport matplotlib.pyplot as plt\n# from sklearn.learning_curve import learning_curve\n# from sklearn.learning_curve import learning_curve  \u4fee\u6539\u4ee5fix learning_curve DeprecationWarning\nfrom sklearn.model_selection import learning_curve\n\n# \u7528sklearn\u7684learning_curve\u5f97\u5230training_score\u548ccv_score\uff0c\u4f7f\u7528matplotlib\u753b\u51falearning curve\ndef plot_learning_curve(estimator, title, X, y, ylim=None, cv=None, n_jobs=1, \n                        train_sizes=np.linspace(.05, 1., 20), verbose=0, plot=True):\n    \"\"\"\n    \u753b\u51fadata\u5728\u67d0\u6a21\u578b\u4e0a\u7684learning curve.\n    \u53c2\u6570\u89e3\u91ca\n    ----------\n    estimator : \u4f60\u7528\u7684\u5206\u7c7b\u5668\u3002\n    title : \u8868\u683c\u7684\u6807\u9898\u3002\n    X : \u8f93\u5165\u7684feature\uff0cnumpy\u7c7b\u578b\n    y : \u8f93\u5165\u7684target vector\n    ylim : tuple\u683c\u5f0f\u7684(ymin, ymax), \u8bbe\u5b9a\u56fe\u50cf\u4e2d\u7eb5\u5750\u6807\u7684\u6700\u4f4e\u70b9\u548c\u6700\u9ad8\u70b9\n    cv : \u505across-validation\u7684\u65f6\u5019\uff0c\u6570\u636e\u5206\u6210\u7684\u4efd\u6570\uff0c\u5176\u4e2d\u4e00\u4efd\u4f5c\u4e3acv\u96c6\uff0c\u5176\u4f59n-1\u4efd\u4f5c\u4e3atraining(\u9ed8\u8ba4\u4e3a3\u4efd)\n    n_jobs : \u5e76\u884c\u7684\u7684\u4efb\u52a1\u6570(\u9ed8\u8ba41)\n    \"\"\"\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes, verbose=verbose)\n    \n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    \n    if plot:\n        plt.figure()\n        plt.title(title)\n        if ylim is not None:\n            plt.ylim(*ylim)\n        plt.xlabel(u\"Number of Sample\")\n        plt.ylabel(u\"Score\")\n        plt.gca().invert_yaxis()\n        plt.grid()\n    \n        plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, \n                         alpha=0.1, color=\"b\")\n        plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, \n                         alpha=0.1, color=\"r\")\n        plt.plot(train_sizes, train_scores_mean, 'o-', color=\"b\", label=u\"Test Score\")\n        plt.plot(train_sizes, test_scores_mean, 'o-', color=\"r\", label=u\"Cross Val Score\")\n    \n        plt.legend(loc=\"best\")\n        \n        plt.draw()\n        plt.gca().invert_yaxis()\n        plt.show()\n    \n    midpoint = ((train_scores_mean[-1] + train_scores_std[-1]) + (test_scores_mean[-1] - test_scores_std[-1])) \/ 2\n    diff = (train_scores_mean[-1] + train_scores_std[-1]) - (test_scores_mean[-1] - test_scores_std[-1])\n    return midpoint, diff\n\nplot_learning_curve(clf, u\"Learning Curve\", X, y)","40c50f0a":"from sklearn.ensemble import BaggingRegressor\n\ntrain_df = df.filter(regex='Survived|Family|dead_family|live_family|AgeRank|Fare_.*|Cabin_.*|Sex_.*|Pclass_.*|Title_.*|Embarked_.*')\ntrain_np = train_df.values\n\n# y\u5373Survival\u7ed3\u679c\ny = train_np[:, 0]\n\n# X\u5373\u7279\u5f81\u5c5e\u6027\u503c\nX = train_np[:, 1:]\n\n# fit\u5230BaggingRegressor\u4e4b\u4e2d\nclf = linear_model.LogisticRegression(C=1.0, penalty='l1', solver='liblinear', tol=1e-6)\nbagging_clf = BaggingRegressor(clf, n_estimators=10, max_samples=0.8, max_features=1.0, bootstrap=True, bootstrap_features=False, n_jobs=-1)\nbagging_clf.fit(X, y)\n\ntest = df_test.filter(regex='Survived|Family|dead_family|live_family|AgeRank|Fare_.*|Cabin_.*|Sex_.*|Pclass_.*|Title_.*|Embarked_.*')\npredictions = bagging_clf.predict(test)\nresult = pd.DataFrame({'PassengerId':data_test['PassengerId'].values, 'Survived':predictions.astype(np.int32)})\nresult.to_csv(\"logistic_regression_predictions_submission02.csv\", index=False)","4e8e9f7a":"pd.read_csv(\"logistic_regression_predictions_submission02.csv\").head()","95a1e599":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import cross_val_score\n\nrf=RandomForestClassifier()\nscores=cross_val_score(rf, X, y, cv=10)\nprint(scores)\nprint(scores.mean())\n\n#print(classification_report(y_pred_rf, gender_submission['Survived']))\n#print(y_pred_rf)\n\ngender_submission=pd.read_csv('..\/input\/titanic\/gender_submission.csv')\n\ny_pred_rf=rf.fit(X, y).predict(test)\ndata={'PassengerId': gender_submission['PassengerId'],'Survived':y_pred_rf}\n","a41d0d17":"result_rf=pd.DataFrame(data)\nresult_rf.to_csv('logistic_regression_predictions_submission03.csv', index=False)\nresult_rf=pd.read_csv('logistic_regression_predictions_submission03.csv')\nresult_rf.head()","6898156d":"print(classification_report(y_pred_rf, gender_submission['Survived']))\n#print(y_pred_rf)","8d8748e6":"<font color=red>\u63a5\u4e0b\u6765\u54b1\u4eec\u5bf9\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u505a\u4e00\u6837\u7684\u64cd\u4f5c\u3002<font><br>","e77303e7":"<font color=red>\u6211\u4eec\u628a\u9700\u8981\u7684feature\u5b57\u6bb5\u53d6\u51fa\u6765\uff0c\u8f6c\u6210numpy\u683c\u5f0f\uff0c\u4f7f\u7528scikit-learn\u4e2d\u7684LogisticRegression\u5efa\u6a21\u3002<font>","297d4543":"<font color=red>10\u6298\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u4e0e\u539f\u4ee3\u7801\u76f8\u6bd4\u5e73\u5747\u5f97\u5206\u75310.80\u63d0\u5347\u81f30.89\uff0c\u6548\u679c\u663e\u8457\u3002<font>","7919dbaf":"<font color=black>\u4f5c\u4e1a\u8bf4\u660e\uff1a\u672c\u6b21\u4f5c\u4e1a\u9009\u62e9\u9898\u76ee\u4e3atitanic\uff0c\u53c2\u8003\u4ee3\u7801\u4e3ahttps:\/\/blog.csdn.net\/han_xiaoyang\/article\/details\/49797143<font><br>\n<font color=black>\u5c0f\u7ec4\u6210\u5458\uff1a\u9676\u4ed5\u6797 \u6797\u5cf0\u5370 \u90dd\u6668\u9633 \u6234\u5c21\u9e4f \u84b2\u9756\u5706<font><br>\n<font color=black>\u672c\u90e8\u5206\u7531 \u6797\u5cf0\u5370 \u5b8c\u6210<font><br><br>\n<font color=red>\u4ee5\u4e0b\u4ee3\u7801\u4fee\u6539\u4e86\u539f\u4ee3\u7801\u4e2d\u7684\u5404\u9879\u9519\u8bef\uff0c\u5e76\u5c1d\u8bd5\u901a\u8fc7\u6dfb\u52a0\u7279\u5f81\uff0c\u7ec4\u5408\u7279\u5f81\u548c\u4f18\u5316\u65b9\u6cd5\u7b49\u65b9\u5f0f\uff0c\u63d0\u9ad8\u7ed3\u679c\u7684\u6b63\u786e\u7387\uff0c\u6700\u7ec8Public Score\u4ece0.76555\u63d0\u9ad8\u81f30.80861\uff0c\u6392\u540dtop6%\u3002<font><br>\n<font color=red>\u4ee5\u4e0b\u4ee3\u7801\u4e2dMarkdown\u90e8\u5206\uff0c\u5c06\u4ec5\u5bf9\u6e90\u4ee3\u7801\u4e2d\u91cd\u8981\u90e8\u5206\u548c\u65b0\u6dfb\u52a0\u7684\u4ee3\u7801\u90e8\u5206\u8fdb\u884c\u8bf4\u660e\uff0c\u5176\u4ed6\u539f\u4ee3\u7801\u4e2d\u7684Markdown\u90e8\u5206\u4e3a\u4e86\u65b9\u4fbf\u53d9\u8ff0\u9009\u62e9\u5220\u9664\uff0c\u8001\u5e08\u53ef\u91cd\u70b9\u5173\u6ce8\u65b0\u6dfb\u52a0\u4ee3\u7801\u90e8\u5206\u7684\u8bf4\u660e\u3002<font>\n","1126181d":"<font color=red>\u89c2\u5bdf\u6570\u636e\u96c6\u4e2dSibSp\u548cParch\u5bf9Survived\u7684\u5f71\u54cd\u3002<font><br>\n<font color=red>\u7531\u4e8e\u770b\u4e0d\u51fa\u660e\u663e\u5f71\u54cd\uff0c\u56e0\u6b64\u540e\u9762\u7684\u5206\u6790\u4e2d\u8003\u8651\u53ef\u4e0d\u53ef\u4ee5\u5c06\u8fd9\u4e24\u4e2a\u7279\u5f81\u5408\u5e76\u6210Family\uff0c\u5bf9Survived\u6709\u6240\u5f71\u54cd\uff1f<font>","ad611977":"<font color=red>\u8fd9\u6bb5\u4ee3\u7801\u4e3a\u5bf9train\u96c6\u91cc\u7684Age\u548cCabin\u7f3a\u5931\u503c\u8fdb\u884c\u586b\u5145\u3002<font><br>\n<font color=red>Cabin\u586b\u5145\u65b9\u6cd5\u4e3a\u6709\/\u65e0\u3002<font><br>\n<font color=red>Age\u586b\u5145\u65b9\u6cd5\u539f\u4e3a\u901a\u8fc7RFR\u5b66\u4e60\u540e\u81ea\u52a8\u586b\u5145\uff0c\u7cbe\u5ea6\u4e0d\u9ad8\u3002<font><br>\n<font color=red>\u73b0\u5728\u6709\u4e86\u65b0\u7279\u5f81Title\uff0c\u53ef\u6539\u4e3a\u5229\u7528Title\u4e2d\u5404\u4e2a\u5c5e\u6027\u7684\u5e73\u5747\u503c\uff0c\u5bf9Age\u8fdb\u884c\u586b\u5145,\u8fd9\u6837\u66f4\u7b26\u5408\u5e74\u9f84\u7279\u5f81\uff0c\u66f4\u63a5\u8fd1\u771f\u5b9eAge\u3002<font>","d29886b2":"<font color=red>\u89c2\u5bdf\u6570\u636e\u96c6\u4e2dCabin\u5bf9Survived\u7684\u5f71\u54cd\u3002<font><br>\n<font color=red>\u7531\u4e8eCabin\u5206\u5e03\u8f83\u5206\u6563\u4e14\u7f3a\u5931\u503c\u8f83\u591a\uff0c\u56e0\u6b64\u540e\u9762\u7684\u5206\u6790\u4e2d\u8003\u8651\u53ef\u4e0d\u53ef\u4ee5\u5c06Cabin\u6539\u6210\u6709\u548c\u65e0\uff0c\u5bf9Survived\u6709\u6240\u5f71\u54cd\uff1f<font>","85e53fed":"<font color=red>\u5bfc\u5165\u5e76\u89c2\u5bdf\u6570\u636e\u7279\u5f81\uff1a<font>","1025bea5":"<font color=red>\u505a10\u6298\u4ea4\u53c9\u9a8c\u8bc1\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u54b1\u4eec\u53ef\u4ee5\u770b\u770b\u73b0\u5728\u5f97\u5230\u7684\u6a21\u578b\u7684\u7cfb\u6570\uff0c\u56e0\u4e3a\u7cfb\u6570\u548c\u5b83\u4eec\u6700\u7ec8\u7684\u5224\u5b9a\u80fd\u529b\u5f3a\u5f31\u662f\u6b63\u76f8\u5173\u7684\u3002<\/font><br>\n<font color=red>\u53ef\u4ee5\u770b\u5230\u4f8b\u5982\u5982\u4e0b\u7ed3\u8bba\uff1a<\/font><br>\n<font color=red>1\u3001\u5728\u6240\u6709\u7279\u5f81\u4e2d\uff0c\u65b0\u6dfb\u52a0\u7684dead_family\u3001live_family\u76f8\u5173\u6027\u6700\u5f3a\uff0c\u6210\u4e86\u6700\u91cd\u8981\u7684\u8bc4\u5224\u56e0\u7d20\u3002<\/font><br>\n<font color=red>2\u3001AgeRank_child\u3001Title_Master\u3001Title_Mrs\u76f8\u5173\u6027\u4e5f\u8f83\u5f3a\uff0c\u56e0\u4e3a\u5176\u4e2d\u5206\u522b\u5305\u542b\u4e86\u5c0f\u5b69\u3001\u5c0f\u7537\u5b69\u3001\u548c\u6bcd\u4eb2\u4e09\u7c7b\u7279\u6b8a\u7fa4\u4f53\u3002<\/font><br>\n<font color=red>3\u3001Sex_female\u548cSex_male\u4ecd\u4e3a\u8bc4\u5224\u7684\u91cd\u8981\u7279\u5f81\uff0c\u800c\u56e0\u4e3a\u6dfb\u52a0\u4e86Sex_Pclass\u4f7f\u5f97Pclass\u5bf9\u6a21\u578b\u7684\u5f71\u54cd\u5927\u5927\u964d\u4f4e\u3002<\/font>","9658da55":"<font color=red>\u81f3\u6b64\u7279\u5f81\u5168\u90e8\u6dfb\u52a0\u5b8c\u6bd5\uff0c\u89c2\u5bdf\u6570\u636e\u5904\u7406\u540e\u7684data_train\u3002<font>","6051a137":"### \u7ecf\u5178\u53c8\u517c\u5177\u5907\u8da3\u5473\u6027\u7684Kaggle\u6848\u4f8b[\u6cf0\u5766\u5c3c\u514b\u53f7\u95ee\u9898](https:\/\/www.kaggle.com\/c\/titanic)\n<font color=red>\u8bad\u7ec3\u548c\u6d4b\u8bd5\u6570\u636e\u662f\u4e00\u4e9b\u4e58\u5ba2\u7684\u4e2a\u4eba\u4fe1\u606f\u4ee5\u53ca\u5b58\u6d3b\u72b6\u51b5\uff0c\u8981\u5c1d\u8bd5\u6839\u636e\u5b83\u751f\u6210\u5408\u9002\u7684\u6a21\u578b\u5e76\u9884\u6d4b\u5176\u4ed6\u4eba\u7684\u5b58\u6d3b\u72b6\u51b5\u3002<font><br>\n<font color=red>\u8fd9\u662f\u4e00\u4e2a\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u5f88\u591a\u5206\u7c7b\u7b97\u6cd5\u90fd\u53ef\u4ee5\u89e3\u51b3\u3002<font>","b8d67d55":"<font color=red>\u672c\u6b21\u4f5c\u4e1a\u7684\u6700\u7ec8\u6210\u7ee9\u4e3a0.80861\uff0c\u6392\u540dtop6%\u3002\u770b\u6765\u82e5\u60f3\u7ee7\u7eed\u63d0\u9ad8\u51c6\u786e\u5ea6\uff0c\u5e94\u8be5\u8981\u627e\u5230\u4e00\u7ec4\u65b0\u7684\u7279\u5f81\uff0c\u6216\u8005\u4f7f\u7528\u8bad\u7ec3\u7ed3\u679c\u66f4\u597d\u7684\u5206\u7c7b\u6a21\u578b\u3002<font>","5b36ba70":"<font color=red>\u89c2\u5bdf\u6570\u636e\u96c6\u4e2dTicket\u5bf9Survived\u7684\u5f71\u54cd\u3002<font><br>\n<font color=red>\u8fd9\u4e00\u6b65\u662f\u5728\u539f\u4ee3\u7801\u7684baseline\u8dd1\u51fa\u6765\u540e\uff0c\u4e3a\u4e86\u63d0\u9ad8\u51c6\u786e\u7387\u800c\u60f3\u5230\u7684\u6dfb\u52a0\u7279\u5f81\u7684\u65b9\u6cd5\u3002<font><br>\n<font color=red>\u901a\u8fc7value_counts\u663e\u793a\uff0c\u6709\u7684Ticket\u6570\u91cf\u4e0d\u53ea\u4e3a1\uff0c\u731c\u6d4b\u76f8\u540cTicket\u4e3a\u4e00\u5bb6\u4eba\u3002<font><br>\n<font color=red>\u901a\u8fc7\u89c2\u5bdf\u6570\u636e\u548c\u753b\u56fe\u8003\u8651\uff0c\u662f\u5426\u6301\u6709\u76f8\u540cTicket\u7684\u5bb6\u5eadSurviverd\u76f8\u540c\u6216\u6709\u6240\u5173\u8054\uff1f<font>","3fd0adf9":"<font color=red>\u7528scikit-learn\u91cc\u9762\u7684preprocessing\u6a21\u5757\u5bf9\u8fd9\u4fe9\u8d27\u505a\u4e00\u4e2ascaling\uff0c\u5c06\u4e00\u4e9b\u53d8\u5316\u5e45\u5ea6\u8f83\u5927\u7684\u7279\u5f81\u5316\u5230[-1,1]\u4e4b\u5185\u3002<font>","b68b4223":"<font color=red>\u6211\u4eec\u7528scikit-learn\u91cc\u9762\u7684Bagging\u6765\u5b8c\u6210\u4e0a\u9762\u7684\u601d\u8def\u3002<font><br>\n<font color=red>\u7ecf\u8fc7\u6a21\u578b\u878d\u5408\u540e\uff0c\u81ea\u52a8\u6311\u9009\u51fa\u4e86\u4e00\u7ec4\u5408\u9002\u7684\u7279\u5f81\uff0c\u4f7f\u5f97\u6a21\u578b\u66f4\u52a0\u4f18\u5316\uff0c\u5f97\u5206\u63d0\u5347\u81f30.80861\u3002<font> ","01ed9e43":"<font color=red>\u53ef\u4ee5\u770b\u5230Title\u79cd\u7c7b\u592a\u591a\uff0c\u5bf9\u51fa\u73b0\u6b21\u6570\u5c11\u7684\u5b57\u6bb5\u8fdb\u884c\u5408\u5e76\uff0c\u5f53\u505aElse\u3002\u53ef\u4ee5\u9884\u89c1Else\u5bf9\u9884\u6d4b\u7ed3\u679c\u5f71\u54cd\u8f83\u5c0f<font>","d1a8c6a4":"<font color=red>\u6dfb\u52a0\u51e0\u4e2a\u65b0\u7279\u5f81\uff1a<font><br>\n<font color=red>Family\uff1a\u5bb6\u5ead\u6210\u5458\uff0c\u4e3aSibSp+Parch<font><br>\n<font color=red>Sex_Pclass\uff1aSex\u548cPclass\u662f\u5bf9Survived\u5f71\u54cd\u7a0b\u5ea6\u6700\u9ad8\u7684\u4e24\u4e2a\u7279\u5f81\uff0c\u8003\u8651\u7ec4\u5408\u540e\u662f\u5426\u6709\u65b0\u7684\u5f71\u54cd\uff1f<font><br>\n<font color=red>AgeRank\uff1aAgeRank\u662f\u5bf9Age\u7684\u533a\u95f4\u79bb\u6563\u5316\uff0c\u753b\u56fe\u53ef\u77e5child\u7684Survived\u4e0e\u5176\u4ed6\u5e74\u9f84\u9636\u6bb5\u4e0d\u540c\uff0c\u5176\u4ed6AgeRank\u7684\u5f71\u54cd\u4e5f\u6709\u6240\u4e0d\u540c\u3002<font>","79746038":"<font color=red>\u8be5\u6bb5\u4e3a\u672c\u6b21\u4f5c\u4e1a\u4e2d\u65b0\u6dfb\u52a0\u7684\u6700\u91cd\u8981\u7684\u7279\u5f81\uff1adead_family\u548clive_family\uff0c\u6dfb\u52a0\u8be5\u7279\u5f81\u5bf9\u9884\u6d4b\u7ed3\u679c\u51c6\u786e\u5ea6\u6709\u7740\u91cd\u5927\u63d0\u5347\uff01\uff01\uff01<font><br>\n<font color=red>\u89c2\u5bdftrain\u96c6\u6570\u636e\uff0c\u53d1\u73b0\u4ee5\u4e0b\u7279\u5f81\uff1a<font><br>\n<font color=red>1\u3001\u6709\u5973\u6027\u6b7b\u4ea1\u7684\u5bb6\u5ead\uff0c\u9664\u4e861\u5c81\u4ee5\u4e0b\u7684\u5a74\u513f\u5916\uff0c\u5bb6\u5ead\u6210\u5458\u5168\u90e8\u6b7b\u4ea1\u3002<font><br>\n<font color=red>2\u3001\u5bb6\u5ead\u4e2d\u82e5\u6709\u5927\u4e8e18\u5c81\u7537\u6027\u5b58\u6d3b\uff0c\u5219\u8be5\u5bb6\u5ead\u5168\u90e8\u5b58\u6d3b\u3002<font><br><br>\n<font color=red>\u8bf4\u660e\u5982\u4e0b\uff1a<font><br>\n<font color=red>1\u3001\u600e\u4e48\u5224\u65ad\u662f\u4e00\u5bb6\uff1fFamily\uff01=0\u4e14Fname\u76f8\u540c\u4e14Ticket\u76f8\u540c\u3002<font><br>\n<font color=red>2\u3001\u5bf9Survived\u7684\u5f71\u54cd\u53ea\u662f\u731c\u6d4b\u5417\uff1f\u753b\u56fe\u53ef\u77e5\uff0cdead_family\u5bf9\u5e94\u7684Survived\u51e0\u4e4e\u5168\u4e3a0\uff0c\u800clive_family\u5bf9\u5e94\u7684Survived\u5168\u90e8\u4e3a1\uff0c\u53ef\u89c1\u8be5\u7279\u5f81\u5bf9Survived\u7684\u5f71\u54cd\u5341\u5206\u91cd\u5927\u3002<font><br>\n<font color=red>3\u3001\u4e3a\u4ec0\u4e48\u7537\u6027\u7684\u6807\u51c6\u4e3a18\u5c81\uff1f\u901a\u8fc7\u8bd5\u9a8c\u53ef\u77e5\uff0c\u5206\u754c\u5e74\u9f84\u8fc7\u9ad8\u6216\u8fc7\u4f4e\u9884\u6d4b\u7ed3\u679c\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5206\u5747\u4f1a\u51cf\u5c11\uff0c18\u5c81\u65f6\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5206\u8f83\u9ad8\u3002<font><br>","45ec321d":"<font color=red>\u539f\u4ee3\u7801\u5f97\u52060.76555\uff0c\u7ecf\u8fc7\u4e0a\u8ff0\u6539\u8fdb\u540e\u5f97\u52060.80382\uff0c\u540e\u7eed\u4f7f\u7528BaggingRegressor\u540e\u5206\u6570\u63d0\u5347\u52300.80861\u3002<\/font>","eac782b0":"<font color=red>\u89c2\u5bdf\u6570\u636e\u96c6\u4e2dName\u5bf9Survived\u7684\u5f71\u54cd\u3002<font><br>\n<font color=red>\u8fd9\u4e00\u6b65\u662f\u5728\u539f\u4ee3\u7801\u7684baseline\u8dd1\u51fa\u6765\u540e\uff0c\u4e3a\u4e86\u63d0\u9ad8\u51c6\u786e\u7387\u800c\u60f3\u5230\u7684\u6dfb\u52a0\u7279\u5f81\u7684\u65b9\u6cd5\u3002<font><br>\n<font color=red>\u8003\u8651Name\u4e2d\u7684\u7279\u6b8a\u5b57\u6bb5\uff0c\u5982Mr\u4ee3\u8868\u7537\u6027\uff08\u6210\u5e74\uff09\uff0cMiss\u4ee3\u8868\u5973\u6027\uff08\u672a\u5a5a\uff09\uff0c\u4ee5\u6b64\u6765\u83b7\u53d6\u66f4\u6709\u6548\u7684\u7279\u5f81Title\u3002<font><br>","baab45ba":"<font color=red>\u901a\u8fc7\u753b\u56fe\u6765\u4e86\u89e3\u6570\u636e\u7279\u5f81\u3002<font><br>\n<font color=red>\u6b64\u5904\u4fee\u6539\u4e86\u539f\u4ee3\u7801\u4e2d\u7684\u51e0\u5904\u9519\u8bef\uff0c\u5e76\u65b0\u6dfb\u52a0\u4e86\u51e0\u5f20\u56fe\u8868\uff0c\u4ee5\u4fbf\u4e86\u89e3\u6570\u636e\u7684\u66f4\u591a\u7279\u5f81\u3002<font>","c15ab37c":"<font color=red>\u6700\u540e\uff0c\u6211\u4eec\u518d\u8bd5\u8bd5\u4f7f\u7528\u968f\u673a\u68ee\u6797\u6a21\u578b\u8bad\u7ec3\uff0c\u770b\u770b\u662f\u5426\u6709\u6240\u63d0\u5347\u3002<font><br>\n<font color=red>\u9057\u61be\u7684\u662f\uff0c\u5e76\u6ca1\u6709\u660e\u663e\u63d0\u5347\uff0c\u5f97\u5206\u4ecd\u4e3a0.80861\u3002<font>","21840bb4":"<font color=red>\u56e0\u4e3a\u903b\u8f91\u56de\u5f52\u5efa\u6a21\u65f6\uff0c\u9700\u8981\u8f93\u5165\u7684\u7279\u5f81\u90fd\u662f\u6570\u503c\u578b\u7279\u5f81\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u5148\u5bf9\u7c7b\u76ee\u578b\u7684\u7279\u5f81\u56e0\u5b50\u5316\/one-hot\u7f16\u7801\u3002 <font>","151bcba3":"### \u8981\u5224\u5b9a\u4e00\u4e0b\u5f53\u524d\u6a21\u578b\u6240\u5904\u72b6\u6001(\u6b20\u62df\u5408or\u8fc7\u62df\u5408)\n\n<font color=red>\u56de\u5230\u6211\u4eec\u7684\u95ee\u9898\uff0c\u6211\u4eec\u7528scikit-learn\u91cc\u9762\u7684learning_curve\u6765\u5e2e\u6211\u4eec\u5206\u8fa8\u6211\u4eec\u6a21\u578b\u7684\u72b6\u6001\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u91cc\u6211\u4eec\u4e00\u8d77\u753b\u4e00\u4e0b\u6211\u4eec\u6700\u5148\u5f97\u5230\u7684baseline model\u7684learning curve\u3002<font><br>\n<font color=red>\u4e0e\u539f\u4ee3\u7801\u76f8\u6bd4\uff0c\u5b66\u4e60\u66f2\u7ebf\u7684\u5e73\u5747\u5f97\u5206\u660e\u663e\u4e0a\u5347\uff0c\u5728\u8bad\u7ec3\u6837\u672c\u6570\u589e\u52a0\u81f3300\u540e\u8fc7\u62df\u5408\u60c5\u51b5\u6709\u4e86\u660e\u663e\u7684\u6539\u5584\uff0c\u6a21\u578b\u66f4\u52a0\u53ef\u9760\u3002<font>"}}