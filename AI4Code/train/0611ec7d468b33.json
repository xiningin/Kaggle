{"cell_type":{"d92e473e":"code","d7fbd6d7":"code","e786d075":"code","0f514942":"code","a574e697":"code","26501eea":"code","8b9af9fa":"code","7d6ad555":"code","0c12e583":"code","889b1258":"code","0b1e5608":"code","60775b55":"code","8c1d5955":"code","438aacba":"code","dfb106a7":"code","883db5d6":"code","c00ba6a8":"code","c2b6472b":"code","bcc7f9d0":"code","cb4a49b7":"code","c95bf0ae":"code","008b5589":"code","23a9f74a":"code","7836e707":"code","d790f9d7":"code","0a2c0dc7":"code","fcd0df99":"code","832f53c3":"code","7d8fd900":"markdown"},"source":{"d92e473e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os","d7fbd6d7":"def get_theoretical_length(N):\n    ## By recursive algorithm\n    theoretical = 0\n    factorial = 1\n    for i in range(1,N+1):\n        factorial = factorial*i\n        theoretical += factorial\n    return theoretical,factorial","e786d075":"for N in range(3,10):\n    theoretical,factorial = get_theoretical_length(N)\n    print(N,theoretical,factorial,theoretical\/factorial)","0f514942":"N = 3\nsolution = \"121\"\n\nfor N in range(3,8):\n    new_solution = []\n    for i in range(len(solution)-N+2):\n        substring = solution[i:i+(N-1)]\n        if all(str(x) in substring for x in range(1,N)):\n            new_solution.append(substring+str(N)+substring)\n    solution = new_solution[:1]\n    for i in range(len(new_solution)-1):\n        x1 = new_solution[i]\n        x2 = new_solution[i+1]\n        for j in range(1,len(x1)+1):\n            if x2[:j]==x1[-1*j:]:\n                break\n        solution.append(x2[j:])\n    solution = \"\".join(solution)\n    print(N,len(solution))\n\nsolution = solution.replace('1','t')\nsolution = solution.replace('7','1')\nsolution = solution.replace('t','7')\nsolution = solution.replace('2','t')\nsolution = solution.replace('6','2')\nsolution = solution.replace('t','6')","a574e697":"solution[::]==solution","26501eea":"solution","8b9af9fa":"## Checking if solution is valid\nimport itertools\nLETTERS = list(map(str,range(1,8)))\npermutations = [''.join(x) for x in itertools.permutations(LETTERS)]\nmandatory = [x for x in permutations if x.startswith('12')]\nnon_mandatory = [x for x in permutations if not x.startswith('12')]\nprint(len(permutations),len(mandatory),len(non_mandatory))","7d6ad555":"def contains(string,keyword):\n    if keyword in string:\n        return True\n    else:\n        for i in range(1,8):\n            if keyword in string.replace('*',str(i)):\n                return True\n        return False","0c12e583":"def get_coverage(string):\n    counter = 0\n    for x in mandatory+non_mandatory:\n        if contains(string,x):\n            counter += 1\n    return counter","889b1258":"solutions = {}\nsub_perms = {}\nordered_solutions = []\nstart_idx = 0\nsol = []\nfor i in range(len(solution)-6):\n    perm = solution[i:i+7]\n    if ''.join((sorted(perm)))=='1234567':\n        if start_idx==-1:\n            start_idx = i\n            sol = []\n        sol.append(perm)\n        if perm.startswith('12'):\n            end_idx = i+7\n            \n            solutions[perm] = '12'+solution[start_idx:end_idx][:-8]\n            sub_perms[perm] = sol\n            print(len(solutions[perm]),end=\" \")\n            ordered_solutions.append(solutions[perm])\n            start_idx = -1","0b1e5608":"len(ordered_solutions[0])","60775b55":"solutions['1234567']","8c1d5955":"1324567","438aacba":"124563712456732145673241567324516732456173245671324567","dfb106a7":"solutions['1245673']","883db5d6":"print(sorted(mandatory,key=lambda x:''.join(reversed(x))))","c00ba6a8":"for x in non_mandatory:\n    if not contains(\"|\".join(ordered_solutions),x):\n        if '12' not in x and not (x[0]=='2' and x[-1]=='1'):\n            print(x)","c2b6472b":"special_sequences = ['1234567','1245367','1253467']\nspecial_sequences_swapped = [key[:-2]+key[-1]+key[-2] for key in special_sequences]\nreserved_sequences = {}\ndone_set = set()\nfor x in special_sequences+special_sequences_swapped:\n    \n    swapped_x = x[:-2]+x[-1]+x[-2]\n    reserved_sequences[x] = []\n    reserved_sequences[x].append(x[:2]+x[3]+x[2]+x[4:])\n    reserved_sequences[x].append(x[:4]+x[-1]+x[5]+x[-3])\n    print(x,reserved_sequences[x])\n    assert x not in done_set\n    done_set.add(x)\n    for y in reserved_sequences[x]:\n        assert y not in done_set\n        done_set.add(y)\nlen(done_set)","bcc7f9d0":"done = set()\ncounter = 0\nsets = [[],[],[]]\nsets_category = [[],[],[]]\nfor x,y in zip(special_sequences,special_sequences_swapped):\n    counter += 1\n    none_idx = counter%3\n    swapped_idx = (counter+1)%3\n    key_idx = (counter+2)%3\n    \n    sequence = solutions[x]\n    swapped_sequence = solutions[y]\n    \n    sets[key_idx].append(sequence[:-6]+'*'+sequence[-5:-1]+sequence[-6]+sequence[-1])\n    sets[swapped_idx].append(swapped_sequence[:-6]+'*'+swapped_sequence[-5:-1]+swapped_sequence[-6]+swapped_sequence[-1])\n    sets_category[key_idx].append(0)\n    sets_category[swapped_idx].append(0)\n    done.add(x)\n    done.add(y)\n    \n    prefix = reserved_sequences[x][0]\n    suffix = reserved_sequences[x][1]\n    sets[none_idx].append(prefix+x+suffix)\n    sets_category[none_idx].append(0)\n    \n    prefix = reserved_sequences[y][0]\n    suffix = reserved_sequences[y][1]\n    sets[none_idx].append(prefix+y+suffix)\n    sets_category[none_idx].append(0)\n    \n    for key in reserved_sequences[x]:\n        swapped_key = key[:-2]+key[-1]+key[-2]\n        sets[key_idx].append(swapped_key+solutions[key])\n        sets[swapped_idx].append(key+solutions[swapped_key])\n        sets_category[key_idx].append(1)\n        sets_category[swapped_idx].append(1)\n        done.add(key)\n        done.add(swapped_key)\n        \n    for key in reserved_sequences[y]:\n        if key not in done:\n            swapped_key = key[:-2]+key[-1]+key[-2]\n            sets[key_idx].append(swapped_key+solutions[key])\n            sets[swapped_idx].append(key+solutions[swapped_key])\n            sets_category[key_idx].append(1)\n            sets_category[swapped_idx].append(1)\n            done.add(key)\n            done.add(swapped_key)\n            \n    for key in reserved_sequences[x]+reserved_sequences[y]:\n        swapped_key = key[:-2]+key[-1]+key[-2]\n        if key not in \"\".join(sets[none_idx]):\n            sets[none_idx].append(key)\n            sets_category[none_idx].append(0)\n        if swapped_key not in \"\".join(sets[none_idx]):\n            sets[none_idx].append(swapped_key)\n            sets_category[none_idx].append(0)\n            \nfor key in solutions:\n    if key not in done:\n        counter += 1\n        swapped_key = key[:-2]+key[-1]+key[-2]\n        sequence = solutions[key]\n        swapped_sequence = solutions[swapped_key]\n\n        none_idx = counter%3\n        swapped_idx = (counter+1)%3\n        key_idx = (counter+2)%3\n        \n        sets[key_idx].append(swapped_key+solutions[key])\n        sets[swapped_idx].append(key+solutions[swapped_key])\n        sets[none_idx].append(key)\n        sets[none_idx].append(swapped_key)\n        sets_category[key_idx].append(1)\n        sets_category[swapped_idx].append(1)\n        sets_category[none_idx].append(0)\n        sets_category[none_idx].append(0)\n        done.add(key)\n        done.add(swapped_key)\n            \nprint(\"Done\",len(done))\nprint([len(\"\".join(sets[x])) for x in range(3)])\n\ndigit_counters = {str(x):[0,0,0] for x in range(1,8)}\ndigit_counters_1 = {str(x):[0,0,0] for x in range(1,8)}\nfor i in range(3):\n    for j in range(len(sets[i])):\n        sequence = sets[i][j]\n        digit_counters[sequence[-1]][i] += 1\n        if sets_category[i][j]:\n            digit_counters_1[sequence[-1]][i] += 1\n        print(sequence,sets_category[i][j])\nprint(digit_counters)\nprint()\nprint(digit_counters_1)","cb4a49b7":"output_strings = []\nfor i in range(3):\n    current_set = sets[i]\n    current_set_category = sets_category[i]\n    print(len(current_set),len(current_set_category))\n    \n    last_digits = {str(x):[] for x in range(3,8)}\n    last_digits_category = {str(x):[] for x in range(3,8)}\n    required_digits = {str(x):[] for x in range(3,8)}\n    for x,y in zip(current_set,current_set_category):\n        \n        if y==1:\n            required_digits[x[6]].append(x)\n        else:\n            last_digits[x[-1]].append(x)\n            last_digits_category[x[-1]].append(y)\n            \n    merged = []\n    for x in range(3,8):\n        merged_x = last_digits[str(x)][0]+''.join(required_digits[str(x)])+''.join(last_digits[str(x)][1:])\n        merged.append(merged_x)\n        \n    output_strings.append(''.join(merged))","c95bf0ae":"output_strings","008b5589":"for i in range(3):\n    print(len(output_strings[i]))","23a9f74a":"for i in range(3):\n    counter = 0\n    for x in mandatory:\n        if not contains(output_strings[i],x):\n            print(x)\n            counter += 1\n    print(i,counter)","7836e707":"for x in non_mandatory:\n    if not contains(\"|\".join(output_strings),x):\n        print(x)","d790f9d7":"LETTERS = [\n    '\ud83c\udf85',  # father christmas\n    '\ud83e\udd36',  # mother christmas\n    '\ud83e\udd8c',  # reindeer\n    '\ud83e\udddd',  # elf\n    '\ud83c\udf84',  # christmas tree\n    '\ud83c\udf81',  # gift\n    '\ud83c\udf80',  # ribbon\n]\nwildcard = '\ud83c\udf1f'","0a2c0dc7":"for i,x in enumerate(LETTERS):\n    for j in range(3):\n        output_strings[j] = output_strings[j].replace(str(i+1),x)\n        output_strings[j] = output_strings[j].replace('*','\ud83c\udf1f')","fcd0df99":"# WRITE SUBMISSION CSV\nsub = pd.DataFrame()\nsub['schedule'] = output_strings\nsub.to_csv('submission.csv',index=False)\nsub.head()","832f53c3":"swapped_sequence","7d8fd900":"#### Details here: https:\/\/www.kaggle.com\/c\/santa-2021\/discussion\/300572"}}