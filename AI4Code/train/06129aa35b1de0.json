{"cell_type":{"5d885aaa":"code","d248f240":"code","ac933426":"code","03f48fc8":"code","3e370e3e":"code","2981d66c":"code","f314b458":"code","265621aa":"code","ac3a1f74":"code","c5fd1979":"code","cff3c389":"code","da3cb7aa":"code","9c6e0949":"code","02544b26":"code","49ba848a":"code","3da80128":"code","818199d9":"code","81db1fca":"code","2e94b23b":"code","e0a23ab0":"code","b4b6b420":"code","f0ec1575":"code","081951eb":"code","5daaae9c":"code","602b8440":"code","7db0dadb":"code","11392543":"code","d141372e":"code","347710b3":"code","adbbe73c":"markdown","5793c04a":"markdown","d889cd25":"markdown","37ad65ee":"markdown","1c524741":"markdown","66fd958e":"markdown","e297a8e1":"markdown","2fb95b02":"markdown","99aa957e":"markdown","110c2797":"markdown","b21eb611":"markdown","ec56db76":"markdown","786380d8":"markdown","de8eb8d9":"markdown","c5de2909":"markdown","51ce38d5":"markdown","96ee0ddd":"markdown"},"source":{"5d885aaa":"# Load the data\nimport pandas as pd\nfrom sklearn import metrics\ndata = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')\ndata['diagnosis'].replace({'M':1, 'B':0}, inplace = True)\ndata.to_csv('data.csv')\ndel data","d248f240":"# First, import helpful Python tools for loading\/navigating data\nimport os             # Good for navigating your computer's files \nimport numpy as np    # Great for lists (arrays) of numbers\nimport pandas as pd   # Great for tables (google spreadsheets, microsoft excel, csv)","ac933426":"data_path  = 'data.csv'","03f48fc8":"# Use the 'pd.read_csv('file')' function to read in read our data and store it in a variable called 'dataframe'\ndataframe = pd.read_csv(data_path)","3e370e3e":"# Let's look at just a few of the biopsy sample features to start by subsetting our 'dataframe'\ndataframe = dataframe[['diagnosis','radius_mean','area_mean', 'radius_se', 'area_se', 'smoothness_mean','smoothness_se']]","2981d66c":"dataframe.head()","f314b458":"# Next, we'll use the 'info' method to see the data types of each column\ndataframe.info()","265621aa":"# First, we'll import some handy data visualization tools\nimport seaborn as sns\nimport matplotlib.pyplot as plt ","ac3a1f74":"# To see how well mean radius correlates with diagnosis, we'll plot the data\n# separated based on diagnosis category on the x-axis and have the points' y-value\n# be its mean radius value\n\nsns.catplot(x = 'diagnosis', y = 'radius_mean', data = dataframe)","c5fd1979":"boundary = 10\nsns.scatterplot(x = 'radius_mean', y = 'diagnosis', data = dataframe)\nplt.plot([boundary, boundary], [0, 1], 'g', linewidth = 6)","cff3c389":"def boundary_classifier(target_boundary,x):\n  result = []\n  for i in x:\n    if i > target_boundary:\n      result.append(1)\n    else:\n      result.append(0)\n  return result\n     \nchosen_boundary = 15\ny_pred = boundary_classifier(chosen_boundary, dataframe['radius_mean'])\ndataframe['predicted'] = y_pred\ny_true = dataframe['diagnosis']\nsns.scatterplot(x = 'radius_mean', y = 'diagnosis', hue = 'predicted', data = dataframe)\nplt.plot([chosen_boundary, chosen_boundary], [0, 1], 'g', linewidth = 6)\n","da3cb7aa":"accuracy = metrics.accuracy_score(y_true,y_pred)\naccuracy","9c6e0949":"# Import the metrics class\nfrom sklearn import metrics\n\n# Create the Confusion Matrix\ny_test = dataframe['diagnosis']\ncnf_matrix = metrics.confusion_matrix(y_test, y_pred)\n\n# Visualizing the Confusion Matrix\nclass_names = [0,1] # Our diagnosis categories\n\nfig, ax = plt.subplots()\n# Setting up and visualizing the plot (do not worry about the code below!)\ntick_marks = np.arange(len(class_names)) \nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g') # Creating heatmap\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y = 1.1)\nplt.ylabel('Actual diagnosis')\nplt.xlabel('Predicted diagnosis')","02544b26":"# YOUR CODE HERE:  \ndef model_stats(y_test, y_pred):\n  print(\"Accuracy: \", metrics.accuracy_score(y_test, y_pred))\n  print(\"Precision: \", metrics.precision_score(y_test, y_pred))\n  print(\"Recall: \", metrics.recall_score(y_test, y_pred))","49ba848a":"model_stats(y_test, y_pred)","3da80128":"# Let's pull our handy linear fitter from our 'prediction' toolbox: sklearn!\nfrom sklearn import linear_model","818199d9":"from sklearn.model_selection import train_test_split\n\ntrain_df, test_df = train_test_split(dataframe, test_size = 0.4, random_state = 1)\n","81db1fca":"print('\\n\\nTraining dataframe has %d rows'%train_df.shape[0])\ntrain_df.head()","2e94b23b":"print('\\n\\nTesting dataframe has %d rows'%test_df.shape[0])\ntest_df.head()","e0a23ab0":"input_labels = ['radius_mean']\noutput_label = 'diagnosis'\n\n\nx_train = train_df[input_labels]\nprint('Our x variables')\nprint(x_train.head())\nprint('\\n\\n')\n\ny_train = train_df[output_label]\nprint('Our y variable:')\nprint(y_train.head())","b4b6b420":"# Here, we create a 'reg' object that handles the line fitting for us!\nclass_rm = linear_model.LogisticRegression()","f0ec1575":"class_rm = linear_model.LogisticRegression()\nclass_rm.fit(x_train, y_train)","081951eb":"x_test = test_df[input_labels]","5daaae9c":"y_test = test_df[output_label].values.squeeze()","602b8440":"y_pred = class_rm.predict(x_test)","7db0dadb":"print(y_pred)","11392543":"y_pred = y_pred.squeeze()\nx_test_view = x_test[input_labels].values.squeeze()\nsns.scatterplot(x = x_test_view, y = y_pred, hue = y_test)\nplt.xlabel('Radius')\nplt.ylabel('Predicted')\nplt.legend()","d141372e":"model_stats(y_test, y_pred)","347710b3":"# Let's visualize the probabilities for `x_test`\ny_prob = class_rm.predict_proba(x_test)\nsns.scatterplot(x = x_test_view, y = y_prob[:,1], hue = y_test)","adbbe73c":"The code below chooses a boundary and runs it for us. ","5793c04a":"## Visualization: linear vs. logistic regression\n\n","d889cd25":"Next, we might want to check just how well mean radius can be used to classify, or separate, the datapoints in either category\nLet's pick a boundary value for the radius mean and see how well it separates the data","37ad65ee":" ## Looking at our dataset\n \n A key step in machine learning (and coding in general!) is to view the structure and dimensions of our new dataframe, which stores all our training data from the tumor biopsies. We want to confirm that the size of our table is correct, check out the features present, and get a more visual sense of what it looks like overall.","1c524741":"# Finding a better separation with logistic regression\n","66fd958e":"This plot shows the graphical representations described above. As you can see, the linear model can yield predicted values outside the [0,1] range because it is a continuous linear function. \n\nOn the other hand, the logistic model stays within our bounds. You can see that the logistic model gives a \"line\" with curvy ends in the [0,1] range, which is the best approximation for a line that will also always respect these boundaries. \n\n**Confusingly, the biggest difference between linear and logistic regression is that linear regression is used for regression problems (predicting the value of continuous variables) while logistic regression is used for classification problems!**\n\n*Linear Regression:*\n\n![Linear Regression](https:\/\/i.stack.imgur.com\/kW8YP.png)\n\n*Logistic Regression:*\n\n![Logistic Regression](https:\/\/techdifferences.com\/wp-content\/uploads\/2018\/01\/graph-logistic-regression.jpg)","e297a8e1":"Each biopsy sample in the dataset is labeled with an ID number and whether or not the tumor it came from is malignant (M) or benign (B). Each sample also has 10 different features associated with it, some of which are described above. Remember that each feature value for a given biopsy sample is a real-valued number.","2fb95b02":"### Finally, let's re-evalute the recall, accuracy, and precision for the model by calling the functions we created.","99aa957e":"# Background and data exploration","110c2797":"## Loading our annotated dataset\n\nThe first step in building our breast cancer tumor classification model is to load in the dataset we'll use to \"teach\" (or \"train\") our model.","b21eb611":"Using a boundary value, we can build a boundary classifier function. This function will take in a boundary value of our choosing and then classify the data points based on whether or not they are above or below the boundary\n\n#### Building the boundary classifier\nHere we build the function that takes in a target boundary (value of radius mean). Write a function to implement a boundary classifier. Think about what the return 'type' of this classifier might be.","ec56db76":"\n* $diagnosis$: Whether or not the tumor was diagnosed as malignant (M) or benign (B).\n* $radius$_$mean$: The radius data feature, averaged across cells in that particular biopsy\n* $area$_$mean$: The area data feature, averaged across cells in that particular biopsy\n* $radius$_$se$: The standard error of the radius data feature for cells in that particular biopsy\n* $area$_$se$: The standard error of the area data feature for cells in that particular biopsy\n* $smoothness$_$mean$: The smoothness feature, averaged across cells in that particular biopsy\n* $smoothness$_$se$: The standard error of the smoothness data feature for cells in that particular biopsy\n\nRecall that the term mean refers to taking an average (summing the values for each cell and dividing by the total number of cells observed in that biopsy). Additionally, standarded error gives a sense of the standard deviation (how much variance there is between cells in that biopsy for that feature). ","786380d8":"Run the code below to visualize the results","de8eb8d9":"# Introduction to Logistic Regression\n### This acts as a good benchmark to start understanding Logistic Regression\n### If you find this interesting, do Upvote the kernel!","c5de2909":"**True positive rate (TPR)**: Sometimes called sensitvity, the TPR is the proportion of actual positives that are correctly identified as such. An analogy would be the percentage of sick people who are correctly identified as having the disease in some population.\n\n**True negative rate (TNR)**: Sometimes called specificity, the TNR is the proportion of actual negatives that are correctly identified as such. An analogy would be the the percentage of healthy people who are correctly identified as not having the disease in some population.\n\n**False positive rate (FPR)**: The FPR is the proportion of actual negatives that are incorrectly identified as positives. An analogy would be the percentage of healthy people who are incorrectly identified as having the disease.\n\n**False negative rate (FNR)**: The FPR is the proportion of actual positives that are incorrectly identified as negatives. An analogy would be the percentage of sick people who are incorrectly identified as healthy.\n\nA key insight is that there is a tradeoff when trying to reduce the different types of errors. For instance, if we want to increase our TPR (thus decrease our FNR by correctly identifying more sick people), our improvements will have to increase the number of people we guess to be sick. However, such an improvement will decrease our TNR (thus inrease our FPR by guessing more healty people are sick). \n\nSometimes, one type of error is worse than the others for a given problem. Other times, however, we must strike an acceptable balance between the two.","51ce38d5":"![alt text](https:\/\/drive.google.com\/uc?export=view&id=1S4S2MBM86D74C-Q0aPPwHzbU8iUveLKq)","96ee0ddd":"You can think of dataframes like Google or Microsoft Excel spreadsheets (large tables with row\/column headers) \n\n**Use the 'head()' method to show the first five rows of the table and their corresponding column headers (our 7 biopsy features!)**"}}