{"cell_type":{"e33a6650":"code","b90683db":"code","91986874":"code","a30b0e8f":"code","a92e39eb":"code","f98b0bb7":"code","4b1b714d":"code","448d227b":"code","a54f0b60":"code","0ce8fb44":"code","01d48790":"code","e3356c0f":"code","8c03030b":"code","998afb86":"code","98c7b906":"code","d09edf2a":"code","8b2f005d":"code","11244543":"code","16fa7c5e":"code","8b46ba00":"code","619331d7":"code","9a059060":"code","461e65e4":"code","efc27fdc":"code","53d496f7":"code","3c80c915":"code","31a1d439":"code","1a93521b":"code","b97ded0d":"code","310a9a39":"code","23b31be6":"code","fc0ba8e5":"code","a75f4647":"code","be0ad25d":"code","a3c20be1":"code","ec44e529":"code","0c0a5239":"code","dbbe1f47":"code","0b9f4c21":"code","1ac79f70":"code","67f35386":"code","1cb94087":"markdown","4cc24315":"markdown","3308f074":"markdown","07cdfffc":"markdown","91e33e0a":"markdown","2167ef93":"markdown","e8f453a4":"markdown","9f3990cf":"markdown","ff076a8a":"markdown","61e7c2d3":"markdown","5d76ee6f":"markdown","6a066aeb":"markdown","fe157050":"markdown","2a088c8a":"markdown","89062b2f":"markdown","99f26ee7":"markdown","6fa6213c":"markdown","f4edfbe8":"markdown","2418298e":"markdown","75a3d484":"markdown","7d5258b5":"markdown","00170ad7":"markdown","cac01c27":"markdown","6e30ef29":"markdown","01abaf55":"markdown","25303269":"markdown","dc283a05":"markdown","3572f10f":"markdown","cbc638e4":"markdown","395fef4b":"markdown"},"source":{"e33a6650":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\n\nrandom_state = 42","b90683db":"PATH_TRAIN      = '..\/input\/tabular-playground-series-nov-2021\/train.csv'\nPATH_TEST       = '..\/input\/tabular-playground-series-nov-2021\/test.csv'\nPATH_SUBMISSION = '..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv'","91986874":"PATH_AUTOGLUON_SUBMISSION = 'submission_autogluon.csv'\nPATH_EVALML_SUBMISSION    = 'submission_evalml.csv'","a30b0e8f":"id_column  = 'id'\ntrain_data = pd.read_csv(PATH_TRAIN, index_col = id_column)\ntest_data  = pd.read_csv(PATH_TEST, index_col = id_column)\nsubmission = pd.read_csv(PATH_SUBMISSION, index_col = id_column)","a92e39eb":"train_data[:5]","f98b0bb7":"train_data.info()","4b1b714d":"label    = 'target'\nfeatures = [col for col in train_data.columns if 'f' in col]\n\ncont_features = []\ndisc_features = []\n\nfor col in features:\n    if train_data[col].dtype =='float64':\n        cont_features.append(col)\n    else:\n        disc_features.append(col)\n\ntrain_data[cont_features] = train_data[cont_features].astype('float32')\ntrain_data[disc_features] = train_data[disc_features].astype('uint8')\ntrain_data[cont_features] = train_data[cont_features].astype('float32')\ntrain_data[disc_features] = train_data[disc_features].astype('uint8')","448d227b":"train_data.info()","a54f0b60":"import gc\n\ngc.collect()\n!> log.txt","0ce8fb44":"!python3 -m pip install -q evalml==0.30.0 > \/dev\/null 2>&1","01d48790":"!pip install scikit-learn-intelex -q --progress-bar off > \/dev\/null 2>&1","e3356c0f":"from sklearnex import patch_sklearn\npatch_sklearn()","8c03030b":"import logging\n\nlogger = logging.getLogger()\nfh = logging.FileHandler('log.txt')\nfh.setLevel(10)\nlogger.addHandler(fh)","998afb86":"from sklearn.model_selection import train_test_split\n\ntrain_data, valid_data = train_test_split(train_data, test_size = 0.1, random_state = random_state)\nX_train, y_train = train_data.drop(['target'], axis = 1), train_data['target']\nX_valid, y_valid = valid_data.drop(['target'], axis = 1), valid_data['target']","98c7b906":"from evalml.automl import AutoMLSearch\n\nautoml = AutoMLSearch(X_train = X_train, y_train = y_train, problem_type='binary', max_time = 60 * 5, objective = 'AUC')\nautoml.search()","d09edf2a":"automl.rankings","8b2f005d":"print(\"Number of pipelines:\", len(automl.results['search_order']))","11244543":"predictions = automl.best_pipeline.predict_proba(X_valid)","16fa7c5e":"from sklearn.metrics import roc_auc_score\n\nprint(\"Roc Auc Score on validation data: \", roc_auc_score(y_valid, predictions.iloc[:, 1].values))","8b46ba00":"!cat log.txt | grep 'running accelerated version' | sort | uniq","619331d7":"gc.collect()\n!> log.txt","9a059060":"!pip install autogluon.tabular[all] -q --progress-bar off","461e65e4":"from autogluon.tabular import TabularPredictor","efc27fdc":"# use only Gradient Boosting, Random Forest and KNN to reduce execution time\nhyperparameters = {\n    'GBM': [\n        {'extra_trees': True, 'seed': random_state, 'ag_args': {'name_suffix': 'XT'}},\n        {},\n    ],\n   'RF': [\n        {'criterion': 'gini', 'random_state': random_state, 'max_features': 'log2',\n         'ag_args': {'name_suffix': 'Gini_Log2', 'problem_types': ['binary']},\n         'ag_args_fit': {'use_daal': True}},\n        {'criterion': 'gini', 'random_state': random_state, 'max_features': 'sqrt',\n         'ag_args': {'name_suffix': 'Gini_Sqrt', 'problem_types': ['binary']},\n         'ag_args_fit': {'use_daal': True}},\n    ],\n    'XGB': {},\n    'KNN': {}\n}\n\nautogluon_predictor = TabularPredictor(\n    label = label,\n    eval_metric = \"roc_auc\",\n    learner_kwargs = {'ignored_columns': [id_column]}\n).fit(\n    train_data = train_data,\n    hyperparameters = hyperparameters,\n    verbosity = 2,\n    presets = 'best_quality',\n    time_limit = 60 * 5,\n)","53d496f7":"leaderbord = autogluon_predictor.leaderboard(valid_data)","3c80c915":"leaderbord","31a1d439":"!cat log.txt | grep 'running accelerated version' | sort | uniq","1a93521b":"predictions       = automl.best_pipeline.predict_proba(test_data)\nEvalML_submission = predictions\nsubmission.target = predictions.iloc[:, 1].values\nsubmission[:5]","b97ded0d":"submission.to_csv(PATH_EVALML_SUBMISSION)","310a9a39":"predictions          = autogluon_predictor.predict_proba(test_data)\nAutoGluon_submission = predictions\nsubmission.target    = predictions.iloc[:, 1]\nsubmission[:5]","23b31be6":"submission.to_csv(PATH_AUTOGLUON_SUBMISSION)","fc0ba8e5":"X_valid.shape, y_valid.shape","a75f4647":"evalML_pred    = automl.best_pipeline.predict_proba(X_valid)\nautoGluon_pred = autogluon_predictor.predict_proba(X_valid)","be0ad25d":"table_pred       = {\"evalML_pred\": evalML_pred.iloc[:, 1].values, \"autoGluon_pred\": autoGluon_pred.iloc[:, 1]}\nfinal_train_data = pd.DataFrame(data = table_pred)","a3c20be1":"final_train_data[:5]","ec44e529":"from sklearn.linear_model import LogisticRegression\n\nlogReg = LogisticRegression()\n\nlogReg.fit(final_train_data, y_valid)","0c0a5239":"table_pred       = {\"evalML_pred\": EvalML_submission.iloc[:, 1].values, \"autoGluon_pred\": AutoGluon_submission.iloc[:, 1]}\nfinal_train_data = pd.DataFrame(data = table_pred)","dbbe1f47":"final_train_data[:5]","0b9f4c21":"predictions = logReg.predict_proba(final_train_data)[:, 1]\npredictions[:5]","1ac79f70":"submission.target = predictions\nsubmission[:5]","67f35386":"submission.to_csv(\"submission.csv\")","1cb94087":"### AutoGluon","4cc24315":"*Please upvote if you liked it.*","3308f074":"### Intel\u00ae Extension for Scikit-learn installation:","07cdfffc":"### Reduce DataFrame memory usage\n\nSince data and AutoML task are quite big for Kaggle notebook instance RAM, we need to reduce memory usage by switching data types.","91e33e0a":"### List of algorithms which are accelerated by sklearnex","2167ef93":"Memory usage was reduced from 467 MB to 238 MB","e8f453a4":"In this kernel we use following AutoML implemetations:\n* EvalML\n* AutoGluon ","9f3990cf":"### Import Libraries","ff076a8a":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Tabular Playground Series - Nov 2021\n<\/div>","61e7c2d3":"### Accelerate Scikit-learn with two lines of code:","5d76ee6f":"<h1> Fast AutoML and Intel\u00ae Extension for Scikit-learn* - Kaggle Tabular Playground Series - November 2021 <\/h1>","6a066aeb":"AutoML significantly simplifies building of high quality models but sometimes has insufficient performance, especially for big problems. In this notebook, we will show how to accelerate AutoML frameworks EvalML and AutoGluon using Intel\u00ae Extension for Scikit-learn* which speedups Scikit-learn's algorithms in seamless way with one pip package installation and two lines of code.\n\nThis notebook solves binary classification task, but you can use it as template for many other competitions with few changes depending on task type (multiclass or regression) and your needs.","fe157050":"### EvalML","2a088c8a":"### [[predict sales] Stacking with scikit-learn-intelex](https:\/\/www.kaggle.com\/alexeykolobyanin\/predict-sales-stacking-with-scikit-learn-intelex)\n\n### [[TPS-Aug] NuSVR with Intel Extension for Sklearn](https:\/\/www.kaggle.com\/alexeykolobyanin\/tps-aug-nusvr-with-intel-extension-for-sklearn)\n\n### [Using scikit-learn-intelex for What's Cooking](https:\/\/www.kaggle.com\/kppetrov\/using-scikit-learn-intelex-for-what-s-cooking?scriptVersionId=58739642)\n\n### [Fast KNN using \u202fscikit-learn-intelex for MNIST](https:\/\/www.kaggle.com\/kppetrov\/fast-knn-using-scikit-learn-intelex-for-mnist?scriptVersionId=58738635)\n\n### [Fast SVC using scikit-learn-intelex for MNIST](https:\/\/www.kaggle.com\/kppetrov\/fast-svc-using-scikit-learn-intelex-for-mnist?scriptVersionId=58739300)\n\n### [Fast SVC using scikit-learn-intelex for NLP](https:\/\/www.kaggle.com\/kppetrov\/fast-svc-using-scikit-learn-intelex-for-nlp?scriptVersionId=58739339)\n\n### [Fast AutoML with Intel Extension for Scikit-learn](https:\/\/www.kaggle.com\/lordozvlad\/fast-automl-with-intel-extension-for-scikit-learn)\n\n### [[Titanic] AutoML with Intel Extension for Sklearn](https:\/\/www.kaggle.com\/lordozvlad\/titanic-automl-with-intel-extension-for-sklearn)","89062b2f":"**Intel\u00ae Extension for Scikit-learn** gives you opportunities to:\n* Use your Scikit-learn code for training and inference without modification.\n* Get speed up your kernel\n* Get more pipelines in EvalML\n* Get best predictions quality in AutoGluon\n","99f26ee7":"## EvalML with optimized Scikit-learn\n\n### EvalML Installation","6fa6213c":"### List of algorithms which are accelerated by sklearnex","f4edfbe8":"<center><a><img src=\"https:\/\/i.ibb.co\/PWvpT9F\/header.png\" alt=\"header\" border=\"0\" width=800 height=400 class=\"center\"><\/a>","2418298e":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Other notebooks with sklearnex usage<\/center><\/h1>\n<\/div>","75a3d484":"Setup logging to track accelerated cases:","7d5258b5":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Importing Libraries and Data<\/center><\/h1>\n<\/div>","00170ad7":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Blending<\/center><\/h1>\n<\/div>","cac01c27":"<center><a><img src=\"https:\/\/editor.analyticsvidhya.com\/uploads\/64117evalml_logo.png\" alt=\"header\" border=\"0\" width=300 height=200 class=\"center\"><\/a>","6e30ef29":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Predicition<\/center><\/h1>\n<\/div>","01abaf55":"### Reading Data","25303269":"<div style=\"background-color:rgba(0, 167, 255, 0.6);border-radius:5px;display:fill\">\n    <h1><center>Conclusion<\/center><\/h1>\n<\/div>","dc283a05":"I will show you how to **speed up** your kernel without changing your code using **Intel\u00ae Extension for Scikit-learn**.","3572f10f":"Collect garbage to reduce memory usage","cbc638e4":"<center><a><img src=\"https:\/\/user-images.githubusercontent.com\/16392542\/77208906-224aa500-6aba-11ea-96bd-e81806074030.png\" alt=\"header\" border=\"0\" width=300 height=200 class=\"center\"><\/a>","395fef4b":"### AutoGluon Installation"}}