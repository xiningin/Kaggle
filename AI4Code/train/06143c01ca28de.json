{"cell_type":{"9dcfc0e7":"code","f50e1aba":"code","fde1e7cb":"code","757c1d4f":"code","e7372fa0":"code","11089724":"code","aa6dce46":"code","07739d55":"code","3c609fbf":"code","967d8dcf":"code","389b309e":"code","52280afa":"code","5d61ce70":"code","289e130f":"code","4a810c56":"code","9817ae20":"code","51b71a52":"code","ef94ceda":"code","69912d15":"code","c72590c4":"code","c4ba38af":"code","a54dfa68":"code","27eb6e80":"code","d164fb59":"code","0c316bc9":"code","e576c0fd":"code","ba784659":"code","0fefab9d":"code","142be0f0":"code","f7380fb9":"code","8bfa3572":"code","aeb04755":"code","eee0f024":"code","5e48aa44":"code","2d046239":"code","b6560150":"code","37e8e402":"code","d7c249a8":"code","a6486e5f":"code","f79319e3":"code","4b4910a3":"code","738aca5c":"code","a84c79db":"code","e1487017":"code","7bda7f6b":"code","2b6e3abb":"code","b43e4082":"code","2679770c":"code","4b313e1f":"code","28619e38":"code","6a236285":"code","5ac08cc8":"code","fb826c61":"code","28ddb895":"code","b6930d76":"code","39e0bca3":"code","2d5e6543":"code","548e75ad":"code","5c6f5f5d":"code","178814da":"code","b1dd1e0b":"code","d5dc5945":"code","72656860":"code","d4249a01":"code","bdce460a":"code","8a91100b":"code","2b02286f":"code","de352321":"code","f23d1bdb":"code","bdfe40c2":"code","b91e7bea":"code","a55c817f":"code","1c562963":"code","9320bde7":"code","948f9610":"code","a99fa762":"code","93c64b32":"code","ec527080":"code","ab0f6680":"code","daba3a66":"code","a7e0cb56":"code","191b2afc":"code","1e6b53ba":"code","abaefdd7":"code","edbf0518":"code","b6192e86":"code","9b1013f9":"code","d4c07263":"code","1194a853":"code","a5147499":"code","3932094b":"code","cda8aad0":"code","211b6e3c":"code","d089ea2e":"code","b8b667b1":"code","2e0159ad":"code","aad43c05":"code","e04d9f25":"code","9c4e878e":"code","9ce7f0d7":"code","6d2dcd79":"code","ea02b59e":"code","0a92e91a":"code","18dbbeff":"code","b31e4eff":"code","a7fbca63":"code","0647577a":"code","14b0f435":"code","ef66f24b":"code","d49c84a3":"code","c62c9cd6":"markdown","22fb8779":"markdown","41bb493d":"markdown","2c4eabb4":"markdown","b8d39e57":"markdown","d6ba89b1":"markdown","b3b5c828":"markdown","8fd07895":"markdown","bc269f7d":"markdown","e1bba8f7":"markdown","891a76ac":"markdown","a97c096b":"markdown","f9b507a9":"markdown","7fe892e3":"markdown","4942a376":"markdown","f0cf6feb":"markdown","152c563d":"markdown","e6322a9c":"markdown","c2b1a4ea":"markdown","51e0039f":"markdown","7cb0d93e":"markdown","b5367cfa":"markdown","dbc3437f":"markdown","d050c74a":"markdown","523933e3":"markdown","26496cb9":"markdown","5f8608da":"markdown","7a6ebac8":"markdown","53c83d8d":"markdown","80f328e9":"markdown","0004bee2":"markdown","ee6392ab":"markdown","65314c76":"markdown","cd1e22e7":"markdown","07c0eb84":"markdown","247fd4d7":"markdown","375a164a":"markdown","c19afee7":"markdown","6ab93c6f":"markdown","e580c6a8":"markdown","1ea42e1e":"markdown","3a2bd113":"markdown","9010f1f2":"markdown","82f70888":"markdown","cc0aa382":"markdown","aff66fa4":"markdown","9584dc53":"markdown"},"source":{"9dcfc0e7":"import seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom time import time\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom catboost import CatBoostRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import StackingRegressor\nfrom mlxtend.regressor import StackingCVRegressor\nfrom sklearn import preprocessing\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nimport warnings\npd.set_option(\"display.max_columns\", 100)\n\nfrom datetime import datetime\n\ndef fxn():\n    warnings.warn(\"deprecated\", DeprecationWarning)\n\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    fxn()\n\n\n# for Q-Q plots\nimport scipy.stats as stats\nfrom sklearn.base import clone\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","f50e1aba":"data=pd.read_csv('..\/input\/bike-sharing-demand\/train.csv')\n","fde1e7cb":"data.head()","757c1d4f":"data.info()","e7372fa0":"col_names=list(data.columns)\nfor index,col_name in enumerate(col_names):\n    print(index ,\" :\" ,col_name)","11089724":"data=data.rename(columns={col_names[5]: \"Temperature(C)\",col_names[6]:\"Dew Temperature(C)\",col_names[7]: \"humidity(%)\",\n                          col_names[8]:\"Wind Speed(m\/s)\",col_names[11]:\"Number of rented bikes\"\n              })","aa6dce46":"data.info()","07739d55":"data.isna().sum().plot(kind=\"bar\")\nplt.show()","3c609fbf":"data.isna().sum()","967d8dcf":"\ndata.info()","389b309e":"def convert_date(df):\n    \n    \n    df['datetime'] = pd.to_datetime(df['datetime'])\n    df['month'] = df['datetime'].dt.month\n    df['hour'] = df['datetime'].dt.hour\n    df['weekday'] = df['datetime'].dt.dayofweek\n    df[\"day\"]=df[\"datetime\"].dt.day\n    df[\"year\"]=df[\"datetime\"].dt.year\n    df['dayofweek'] = df['datetime'].dt.dayofweek\n    df['month_start'] = df['datetime'].dt.is_month_start\n    df['woy'] = df['datetime'].dt.isocalendar().week.astype(int)\n    \n    return df","52280afa":"data=convert_date(data)","5d61ce70":"data.head()","289e130f":"data.describe().T","4a810c56":"fig, ax = plt.subplots(2, 3, figsize=(25, 20))\nsns.boxplot(y=data[\"Number of rented bikes\"],ax=ax[0][0])\nax[0][0].set_title(\"Box plot on Count \")\nsns.boxplot(x=\"season\",y=\"Number of rented bikes\",data=data,ax=ax[0][1])\nax[0][1].set_title(\"Box plot on Count Across Seasons\")\nsns.boxplot(x=\"hour\",y=\"Number of rented bikes\",data=data,ax=ax[0][2])\nax[0][2].set_title(\"Box plot on Count Across hour\")\nsns.boxplot(x=\"holiday\",y=\"Number of rented bikes\",data=data,ax=ax[1][0])\nax[1][0].set_title(\"Box plot on Count Across Holiday\")\nsns.boxplot(x=\"workingday\",y=\"Number of rented bikes\",data=data,ax=ax[1][1])\nax[1][1].set_title(\"Box plot on Count Across Functioning day\")\nsns.boxplot(x=\"dayofweek\",y=\"Number of rented bikes\",data=data,ax=ax[1][2])\nax[1][2].set_title(\"Box plot on Count Across Day of week\")","9817ae20":"plt.figure(figsize=(20,20))\nsns.heatmap(data.corr(\"pearson\"),\n            vmin=-1, vmax=1,\n            cmap='coolwarm',\n            annot=True, \n            square=True)","51b71a52":"df1Corr=pd.DataFrame(data.corr().unstack().sort_values(ascending=False)['Number of rented bikes'],columns=['Correlation to the target'])\ndf1Corr.style.background_gradient(cmap=sns.light_palette(\"red\", as_cmap=True))","ef94ceda":"data.plot(x='datetime',y='Number of rented bikes',kind='kde');","69912d15":"df1VizSeasons=pd.DataFrame(data.groupby('season').sum()['Number of rented bikes'].sort_values(ascending=False))\ndf1VizSeasons.style.background_gradient(cmap=sns.light_palette(\"red\", as_cmap=True))","c72590c4":"plt.figure(figsize=(9,8))\ndata.groupby('season').sum()['Number of rented bikes'].plot.pie();\nplt.title(\"Number of rented bikes share per season\");","c4ba38af":"data.groupby('hour').sum()['Number of rented bikes'].plot.bar()","a54dfa68":"df1VizDays=pd.DataFrame(data.groupby('dayofweek').sum()['Number of rented bikes'].sort_values(ascending=False))\ndf1VizDays.style.background_gradient(cmap=sns.light_palette(\"red\", as_cmap=True))","27eb6e80":"data.groupby('Temperature(C)').mean()['Number of rented bikes'].plot()","d164fb59":"#plt.figure(figsize=(14,14))\nsns.barplot(data=data, x='year', y=data['Number of rented bikes']);","0c316bc9":"sns.barplot(data=data, x='month', y=data['Number of rented bikes'], hue='year');\n","e576c0fd":"plt.figure(figsize=(14,14))\nsns.pointplot(data=data, x='hour', y=data['Number of rented bikes'], hue='dayofweek');","ba784659":"data.info()","0fefab9d":"def drop_cols(df):\n    df=df.drop(['datetime','casual','registered'],axis=1)\n    return df","142be0f0":"data=drop_cols(data)","f7380fb9":"data.info()","8bfa3572":"features_plot=['Number of rented bikes',  'Temperature(C)', 'humidity(%)',\n       'Wind Speed(m\/s)',  'Dew Temperature(C)',\n       ]","aeb04755":"data[features_plot].describe()","eee0f024":"def my_plot(feature):\n    plt.hist(data[feature])\n    plt.title(feature)\n    plt.show()\n        \nfor i in features_plot:\n    my_plot(i)","5e48aa44":"def diagnostic_plots(df, variable):\n    # function takes a dataframe (df) and\n    # the variable of interest as arguments\n\n    # define figure size\n    plt.figure(figsize=(16, 4))\n\n    # histogram\n    plt.subplot(1, 3, 1)\n    sns.histplot(df[variable], bins='auto')\n    plt.title('Histogram')\n\n    # Q-Q plot\n    plt.subplot(1, 3, 2)\n    stats.probplot(df[variable], dist=\"norm\", plot=plt)\n    plt.ylabel('Variable quantiles')\n\n    # boxplot\n    plt.subplot(1, 3, 3)\n    sns.boxplot(y=df[variable])\n    plt.title('Boxplot')\n\n    plt.show()","2d046239":"# Average values across each of the categorical columns \nfig = plt.figure(figsize=(15, 12))\naxes = fig.add_subplot(2, 2, 1)\ngroup_season = pd.DataFrame(data.groupby(['season'])['Number of rented bikes'].mean()).reset_index()\nsns.barplot(data=group_season, x='season', y='Number of rented bikes', ax=axes)\naxes.set(xlabel='season', ylabel='Number of rented bikes', title='Average bike rentals across Seasons')\n\naxes = fig.add_subplot(2, 2, 2)\ngroup_workingday = pd.DataFrame(data.groupby(['workingday'])['Number of rented bikes'].mean()).reset_index()\nsns.barplot(data=group_workingday, x='workingday', y='Number of rented bikes', ax=axes)\naxes.set(xlabel='workingday', ylabel='Number of rented bikes', title='Average bike rentals across Working Day')\n\naxes = fig.add_subplot(2, 2, 3)\ngroup_season = pd.DataFrame(data.groupby(['holiday'])['Number of rented bikes'].mean()).reset_index()\nsns.barplot(data=group_season, x='holiday', y='Number of rented bikes', ax=axes)\naxes.set(xlabel='holiday', ylabel='Number of rented bikes', title='Average bike rentals across Holiday')\nplt.show()","b6560150":"# seaborn boxplots across hours\nf, axes = plt.subplots(1, 1, figsize=(15, 6))\nsns.boxplot(data=data, y='Number of rented bikes', x='hour', hue='workingday', ax=axes)\nhandles, _ = axes.get_legend_handles_labels()\naxes.legend(handles, ['Not a workingday', 'workingday'])\naxes.set(title='Hourly Count based on Functioning day or not')\n\nplt.show()","37e8e402":"\n# Plots of average count across hour in a day for various categories\n\nf, axes = plt.subplots(nrows=2, ncols=1, figsize=(15, 18))\ngroup_work_hour = pd.DataFrame(data.groupby(['workingday', 'hour'])['Number of rented bikes'].mean()).reset_index()\nsns.pointplot(data=group_work_hour, x='hour', y='Number of rented bikes', hue='workingday', ax=axes[0], legend=True)\nhandles, _ = axes[0].get_legend_handles_labels()\naxes[0].legend(handles, ['Not a workingday', 'workingday'])\naxes[0].set(xlabel='Hour in the day', ylabel='workingday', title='Average Bike Rentals by the day if Working day or Not')\n\nhue_order= [0,1,2,3,4,5,6]\ngroup_day_hour = pd.DataFrame(data.groupby(['day', 'hour'])['Number of rented bikes'].mean()).reset_index()\nsns.pointplot(data=group_day_hour, x='hour', y='Number of rented bikes', hue='day', ax=axes[1], hue_order=hue_order)\naxes[1].set(xlabel='Hour in the day', ylabel='Number of rented bikes', title='Average Bike Rentals by the day across Weekdays')\n\n\nplt.show()","d7c249a8":"# Average Monthly Count Distribution plot\nf, axes = plt.subplots(nrows=1, ncols=1, figsize=(15, 6))\ngroup_month = pd.DataFrame(data.groupby(['month', 'workingday'])['Number of rented bikes'].mean()).reset_index()\nsns.barplot(data=group_month, x='month', y='Number of rented bikes', hue='workingday', ax=axes)\naxes.set(xlabel='Month', ylabel='Number of rented bikes', title='Average bike rentals per Month')\nhandles, _ = axes.get_legend_handles_labels()\naxes.legend(handles, ['workingday', 'workingday'])\nplt.show()","a6486e5f":"# Regression Plots with respect to Temperature, Humidity and Windspeed\nfig = plt.figure(figsize=(18, 8))\naxes = fig.add_subplot(1, 3, 1)\nsns.regplot(data=data, x='Temperature(C)', y='Number of rented bikes',ax=axes)\naxes.set(title='Reg Plot for Temperature vs. Number of rented bikes')\naxes = fig.add_subplot(1, 3, 2)\nsns.regplot(data=data, x='humidity(%)', y='Number of rented bikes',ax=axes, color='r')\naxes.set(title='Reg Plot for Humidity vs. Number of rented bikes')\naxes = fig.add_subplot(1, 3, 3)\nsns.regplot(data=data, x='Wind Speed(m\/s)', y='Number of rented bikes',ax=axes, color='g')\naxes.set(title='Reg Plot for Windspeed vs. Number of rented bikes')\nplt.show()","f79319e3":"diagnostic_plots(data, 'Number of rented bikes')","4b4910a3":"#showing distribution for temperature\ndiagnostic_plots(data, 'Temperature(C)')","738aca5c":"diagnostic_plots(data, 'humidity(%)')","a84c79db":"diagnostic_plots(data, 'Dew Temperature(C)')","e1487017":"data.shape   # the data size is much larger than number of outliers in data","7bda7f6b":"def find_skewed_boundaries(df, variable, distance):\n\n    # Let's calculate the boundaries outside which sit the outliers\n    # for skewed distributions\n\n    # distance passed as an argument, gives us the option to\n    # estimate 1.5 times or 3 times the IQR to calculate\n    # the boundaries.\n\n    IQR = df[variable].quantile(0.75) - df[variable].quantile(0.25)\n\n    lower_boundary = df[variable].quantile(0.25) - (IQR * distance)\n    upper_boundary = df[variable].quantile(0.75) + (IQR * distance)\n\n    return upper_boundary, lower_boundary","2b6e3abb":"plt.figure(figsize=(20,20))\ncorrelation=data.corr()\nsns.heatmap(correlation,annot=True)","b43e4082":"# data.drop(\"Dew Temperature(C)\",axis=1,inplace=True)","2679770c":"data.columns","4b313e1f":"data.info()","28619e38":"def additional(df):\n    df['ideal'] = df[['Temperature(C)', 'Wind Speed(m\/s)']].apply(lambda x: (0, 1)[x['Temperature(C)'] > 27 and x['Wind Speed(m\/s)'] < 30], axis = 1)\n    df['sticky'] = df[['humidity(%)', 'workingday']].apply(lambda x: (0, 1)[x['workingday'] == 1 and x['humidity(%)'] >= 60], axis = 1)\n    df[\"windchill\"]=13.12+0.6215*df['Temperature(C)']-11.37*(df['Wind Speed(m\/s)']*3.6)**0.16+0.3965*df['Temperature(C)'] \\\n    *(df['Wind Speed(m\/s)']*3.6)**0.16\n    df['newweather']=17.3+df['Temperature(C)']-0.11*df['humidity(%)']+0.34*df['Wind Speed(m\/s)']\n    df['hour_sin'] = np.sin(2 * np.pi * df['hour']\/23.0)\n    df['hour_cos'] = np.cos(2 * np.pi * df['hour']\/23.0)\n    df['month_sin'] = np.sin(2 * np.pi * df['month']\/12)\n    df['month_cos'] = np.cos(2 * np.pi * df['month']\/12)\n    df['log_wind']=np.log1p(df['Wind Speed(m\/s)'])\n    df['log_hum']=np.log1p(df['humidity(%)'])\n    \n    return df","6a236285":"cond1 = data['workingday']== 'Yes'\ncond2 = data['hour'].isin([7,8,9,17,18,19])\ncond3 = data['hour'].isin([10,11,12,13,14,15,16])\ncond4 = data['hour'].isin([0,1,2,3,4,5,6,20,21,22,23])\n\nconditions =[~cond1,cond1&cond2,cond1&cond3,cond1&cond4]\nvals = ['No','High','Medium','Low']\ndata['Map demand'] = np.select(conditions,vals)\n","5ac08cc8":"data=additional(data)","fb826c61":"data.head()","28ddb895":"cat_features = data.columns[data.dtypes=='object']\ncat_features=list(cat_features)\ncat_features","b6930d76":"sns.countplot(x=cat_features[0],data=data)\nplt.show()","39e0bca3":"def count_category(name):\n    print(name)\n    print(data[name].value_counts())\n    print(\"-------------------------------------------------\")\nfor i in cat_features:\n    count_category(i)","2d5e6543":"count_bikes_by_hour = data.groupby(\"hour\")[\"Number of rented bikes\"].sum()\nprint(count_bikes_by_hour)","548e75ad":"count_bikes_by_hour.plot(kind=\"bar\",\ntitle=\"count bikes by hour\")\nplt.savefig('count bikes by hr')\nplt.show()","5c6f5f5d":"count_bikes_by_Holiday = data.groupby(\"holiday\")[\"Number of rented bikes\"].sum()\nprint(count_bikes_by_Holiday)","178814da":"data.groupby(\"holiday\")[\"Number of rented bikes\"].sum().plot(kind=\"bar\")\nplt.savefig(\"count bikes by holiday\")\nplt.show()","b1dd1e0b":"count_bikes_by_funcday = data.groupby(\"workingday\")[\"Number of rented bikes\"].sum()\nprint(count_bikes_by_funcday)","d5dc5945":"data.groupby(\"workingday\")[\"Number of rented bikes\"].sum().plot(kind=\"bar\")\nplt.savefig(\"count_bikes_by_funcday\")\nplt.show()","72656860":"count_bikes_by_Season = data.groupby(\"season\")[\"Number of rented bikes\"].sum()\nprint(count_bikes_by_Season)","d4249a01":"count_bikes_by_Season.plot(kind=\"bar\")","bdce460a":"def rolling_mean(df,cols,window=3):\n    for col in cols:\n        new_col = col+'_rolled'\n        df[new_col] = df[col].rolling(window=window).mean()\n    return df\n","8a91100b":"data =  rolling_mean(data,['Temperature(C)','Wind Speed(m\/s)',\n                        'humidity(%)','weather'])\n","2b02286f":"def shifting(df,cols):\n    for col in cols:\n        new_col = col+'_shifted'\n        df[new_col] = df[col].shift(periods=-1)\n    return df\ndata =  shifting(data,['Temperature(C)','Wind Speed(m\/s)','weather', 'humidity(%)'])\ndef shifting_1(df,cols):\n    for col in cols:\n        new_col = col+'_shifted1'\n        df[new_col] = df[col].shift(periods=-2)\n    return df\ndata =  shifting_1(data,['Temperature(C)','Wind Speed(m\/s)','weather', 'humidity(%)'])\n\ndef shifting_2(df,cols):\n    for col in cols:\n        new_col = col+'_shifted2'\n        df[new_col] = df[col].shift(periods=-3)\n    return df\ndata =  shifting_2(data,['Temperature(C)','Wind Speed(m\/s)','weather', 'humidity(%)'])","de352321":"data=data.fillna(data.mean())","f23d1bdb":"data.head()","bdfe40c2":"def conv_cat_features(df):\n    df['holiday'].replace({\"No Holiday\":1, \"Holiday\":0}, inplace=True)\n    df['workingday'].replace({\"Yes\":1, \"No\":0}, inplace=True)\n    data_cat_transformed = pd.get_dummies(df, drop_first=True)\n    return data_cat_transformed","b91e7bea":"data_cat_transformed=conv_cat_features(data)\n# Print the number of features after one-hot encoding\nprint(\"{} total features after one-hot encoding.\".format(len(data_cat_transformed.columns)))\nprint(data_cat_transformed.columns)#","a55c817f":"# Split the data into features and target label\nX = data_cat_transformed.drop('Number of rented bikes', axis=1)\ny = data_cat_transformed['Number of rented bikes']\ndef custom_train_valid_split(data, cutoff_day=15):\n    train = data[data['day'] <= cutoff_day]\n    valid = data[data['day'] > cutoff_day]\n    return train,valid\n\ntrain,valid =  custom_train_valid_split(data, cutoff_day=15)\ntrain_idx = train.index\nvalid_idx = valid.index\nmyCViterator = []\nmyCViterator.append( (train_idx, valid_idx) )","1c562963":"def RMSLE(y_train,y_pred):\n    return np.sqrt(mean_squared_log_error(y_train, y_pred))","9320bde7":"def train_predict(regressor): \n    '''\n    inputs:\n       - regressor: the learning algorithm to be trained and predicted on\n    '''\n    \n    results = {}\n    \n    # Fit the classifier to the training data and Calculate the time\n    start_train = time()\n    regressor = regressor.fit(X, y)\n    end_train = time()\n    results['train_time'] = round((end_train-start_train), 2)\n\n    # Predict the training\/testing labels and Calculate the time\n    start_test = time()\n    y_pred_train = regressor.predict(X)\n    y_pred_test = regressor.predict(test_cat_transformed)\n    end_test = time()   \n    results['pred_time'] = round((end_test-start_test), 2)\n    results['RMSLE_train'] =round(RMSLE(y, y_pred_train),4) \n    results['Rsquared_train'] = r2_score(y, y_pred_train)\n    results['MSE_train'] = mean_squared_error(y, y_pred_train)\n    return results,y_pred_test","948f9610":"test_df=pd.read_csv('..\/input\/bike-sharing-demand\/test.csv')\ntest_df_copy=test_df.copy()","a99fa762":"test_df.describe()","93c64b32":"test_df.head()","ec527080":"test_df.info()","ab0f6680":"test_df.columns","daba3a66":"test_df=test_df.rename(columns={col_names[5]: \"Temperature(C)\",col_names[6]:\"Dew Temperature(C)\",col_names[7]: \"humidity(%)\",\n                          col_names[8]:\"Wind Speed(m\/s)\"\n              })","a7e0cb56":"test_df=convert_date(test_df)","191b2afc":"test_df.info()","1e6b53ba":"cond1 = test_df['workingday']=='Yes'\ncond2 = test_df['hour'].isin([7,8,9,17,18,19])\ncond3 = test_df['hour'].isin([10,11,12,13,14,15,16])\ncond4 = test_df['hour'].isin([0,1,2,3,4,5,6,20,21,22,23])\nconditions =[~cond1,cond1&cond2,cond1&cond3,cond1&cond4]\nvals = ['No','High','Medium','Low']\ntest_df['Map demand'] = np.select(conditions,vals)","abaefdd7":"test_df=test_df.drop(['datetime',],axis=1)\n","edbf0518":"test_df=additional(test_df)","b6192e86":"test_df =  rolling_mean(test_df,['Temperature(C)','Wind Speed(m\/s)','weather', 'humidity(%)'])\ntest_df =  shifting(test_df,['Temperature(C)','Wind Speed(m\/s)','weather', 'humidity(%)'])\ntest_df =  shifting_1(test_df,['Temperature(C)','Wind Speed(m\/s)','weather', 'humidity(%)'])\ntest_df =  shifting_2(test_df,['Temperature(C)','Wind Speed(m\/s)','weather', 'humidity(%)'])\ntest_df=test_df.fillna(test_df.mean())","9b1013f9":"test_cat_transformed=conv_cat_features(test_df)","d4c07263":"# parameters={\n#  \"learning_rate\"    :np.arange(0.04,0.2,0.01)   ,                             # [0.05,0.06,0.065,0.07,0.075,0.08,0.085,0.09,0.10,0.125,0.15,0.2] ,\n#   \"max_depth\"        :np.arange(4,16,1) ,                    #[4,5,6,7,8,9,10]\n#   \"min_child_weight\" : np.arange(11,17, 1),  #[1,2,3,4,5,6,7,8,9,10],\n#   \"gamma\"            : np.arange(2,10,0.5)  ,               #    [0.5,1,2,3,5,7,6,8,9,10],\n#   \"n_estimators\"     :np.arange(2500,3500, 50),      # [500,700,800,900,1000,1200,1300,1400,1500,1600,1700,1800,1900,2000,2200,2500,2750],\n#   \"subsample\"        :np.arange(0.7, 1, 0.02) ,\n#   \"colsample_bytree\" :np.arange(0.4,1,0.05), # [0.7,0.75,0.8,0.85,0.9,0.95,1],\n#   \"tree_method\"    : [\"gpu_hist\"]\n#      }","1194a853":"# def model_tuning(reg, parameters):    \n\n#     # Evaluate using neg_mean_squared_log_error \n#     #scorer = make_scorer(RMSLE,greater_is_better=False)\n\n#     # Perform grid search on the regressor and tune parameters, using scorer evaluation\n#     grid_obj = RandomizedSearchCV(estimator=reg, param_distributions=parameters,n_iter=300, \n#                                   scoring=\"neg_mean_squared_log_error\",n_jobs=-1,cv=5,verbose=3)\n\n#     # Fit the grid search object to the training data and find the optimal parameters\n#     grid_fit = grid_obj.fit(X, y)\n\n#     # Get the best estimator\n#     best_clf = grid_fit.best_estimator_\n#     print(f\"best mean cross validation score: {grid_fit.best_score_}\")\n#     print(f\"best parameters: {grid_fit.best_params_}\")\n    \n#     # Make predictions using the optimized and the best model\n#     y_best_pred = best_clf.predict(test_cat_transformed)\n    \n#     return best_clf,grid_fit, y_best_pred","a5147499":"# clf, best_clf,grid_fit, y_best_pred=model_tuning(regressor, parameters)","3932094b":"# best_clf","cda8aad0":"# grid_fit","211b6e3c":"X_train=X.copy()\nX_test=test_cat_transformed.copy()","d089ea2e":"print(X_train.shape)\nprint(X_test.shape)","b8b667b1":"X_train_cat = X_train.copy()\nX_test_cat = X_test.copy()","2e0159ad":"# X_train_xgb=X_train.drop(['hour_sin', 'hour_cos','month_sin', 'month_cos','woy','windchill', \n#                       'newweather','Temperature(C)_rolled','Dew Temperature(C)',\n#                       'humidity(%)','Wind Speed(m\/s)_rolled', \n#                       ],axis=1)\n# X_test_xgb=X_test.drop(['hour_sin', 'hour_cos','month_sin', 'month_cos','woy','windchill', \n#                     'newweather','Temperature(C)_rolled','Dew Temperature(C)',\n#                     'humidity(%)','Wind Speed(m\/s)_rolled',\n#                     ],axis=1)","aad43c05":"xgb_v = XGBRegressor(\n   objective='count:poisson',random_state=42)\n\n\n\nxgb= XGBRegressor(\n    objective='count:poisson',random_state=42,\n   subsample= 0.83, n_estimators= 3000, \n   min_child_weight= 16, max_depth= 5, \n   learning_rate= 0.055, gamma= 1, colsample_bytree= 0.5)\n\ncatboost_v=CatBoostRegressor(objective='Poisson',iterations=4000,l2_leaf_reg=1,learning_rate=0.054  , silent = True)\ncatboosttrial=CatBoostRegressor(objective='Poisson',iterations=4000,l2_leaf_reg=1,learning_rate=0.054,silent=True)                              \nxgb_models={\n    \"XGB_vanella\":xgb_v,\n    \"XGB_mod\" : xgb }\ncat_models ={\n    \"Catbbost_mod\" :catboosttrial,\n    \"Catboost_Vanilla\" :catboost_v}","e04d9f25":"columns = ['Classifier', 'RMSLE']\n\ndf_scores_cat = pd.DataFrame(columns=columns)\nfor name, model in cat_models.items():\n    model.fit(X_train_cat, y)\n    Y_predicted = model.predict(X_train_cat)\n    rmsle = np.sqrt(mean_squared_log_error(y, Y_predicted))\n    df_row = pd.DataFrame([[name, rmsle]], columns=columns)\n    df_scores_cat = df_scores_cat.append(df_row, ignore_index=True)","9c4e878e":"columns = ['Classifier', 'RMSLE']\n\ndf_scores_xgb = pd.DataFrame(columns=columns)\nfor name, model in xgb_models.items():\n    model.fit(X_train, y)\n    Y_predicted = model.predict(X_train)\n    rmsle = np.sqrt(mean_squared_log_error(y, Y_predicted))\n    df_row = pd.DataFrame([[name, rmsle]], columns=columns)\n    df_scores_xgb = df_scores_xgb.append(df_row, ignore_index=True)","9ce7f0d7":"df_scores_cat.sort_values(by=['RMSLE'])","6d2dcd79":"df_scores_xgb.sort_values(by=['RMSLE'])","ea02b59e":"from xgboost import plot_importance, plot_tree\nfig = plt.figure(figsize=(15,12))\nfig = plot_importance(xgb_v, height=0.9,max_num_features = 25)\nplt.show()","0a92e91a":"fig = plt.figure(figsize=(15,12))\nfig = plot_importance(xgb, height=0.9,max_num_features = 25)\nplt.show()","18dbbeff":"y_cat_pred=catboosttrial.predict(X_test_cat)","b31e4eff":"y_xgb_pred=xgb.predict(X_test)","a7fbca63":"# # #getting the output from train predicgt func\n# test_df_copy['yxgb']=y_xgb_pred.astype('int')\n# test_df_copy['ycat']=y_cat_pred.astype('int')","0647577a":"# yavg = 0.64*test_df_copy['yxgb'] + 0.36*test_df_copy['ycat']\n","14b0f435":"test_df_copy['count'] = y_cat_pred.astype('int')","ef66f24b":"test_df_copy[test_df_copy[\"workingday\"]=='No']","d49c84a3":"test_df_copy[['datetime','count']].to_csv(\"submissions1.csv\",index=False)","c62c9cd6":"# Visualizing rents with years, months and hours","22fb8779":"# Rented bikes vs Days of the week","41bb493d":"# Model Tuning","2c4eabb4":"# Showing the distribution of categorical variables","b8d39e57":"# Dew Temperature","d6ba89b1":"# Create Training Model","b3b5c828":"# Reading the data","8fd07895":"# Converting Date and splitting it","bc269f7d":"## showing distribution of rented bikes","e1bba8f7":"# Check the outliers of Data","891a76ac":"## Define Loss Function","a97c096b":"# Checking the type of Data","f9b507a9":"# EDA","7fe892e3":"# Temperature vs rented bikes","4942a376":"# Plotting variables to the target","f0cf6feb":"> After Running HyperParameter Tuning jobs on xgboost model and catboost model the optimum parameters reached were:\n> - XGBoost: {}\n> - CatBoost: {}","152c563d":"# applying additional function to data :peak,ideal,sticky","e6322a9c":"Days are encoded 0 Mondays and 6 Sundays","c2b1a4ea":"# Rented bikes vs Temperature, Humidity and Windspeed","51e0039f":"# Statitical description of the features","7cb0d93e":"## Visualizations","b5367cfa":"# Seasons with most rents\u00b6","dbc3437f":"# Checking rents per hours","d050c74a":"# Importing libraries","523933e3":"# Number of rented bikes","26496cb9":"# Bike sharing\n## ITI Alex G1\n\n**Nouhrhan Elaraby**\n\n**Lujain Kotb**\n\n**Ibrahim Yaseen**\n\n**Mohamed Abd Elrazik**\n\n**Sondos Omar**","5f8608da":"# Hourly count based on functioning day","7a6ebac8":"# Correlations between variables","53c83d8d":"# Dropping not important Columns","80f328e9":"# Temperatures","0004bee2":"# Showing the distribution of categorical variables","ee6392ab":"## conclusion","65314c76":"# Converting Categorical Varibales","cd1e22e7":"# Getting the results on Test Data","07c0eb84":"# Checking Null Values","247fd4d7":"# Plotting average bike count for each hour as a function of various categories.","375a164a":"# Test Data","c19afee7":"# Humidity","6ab93c6f":"# Splitting the data into features and Target Label","e580c6a8":"# showing correlation between variables","1ea42e1e":"## Handling Outliers","3a2bd113":"#  Sorted correlation of variables to the target","9010f1f2":"# Plot Feature importance from Xgboostregressor with best parameters after hyperparameter tuning","82f70888":"# Monthly distributions","cc0aa382":"# Rolling Mean with window of 3","aff66fa4":"There is a peak for renting bikes at 8 am and 6 pm which is most probably the time a person is going to or leaving his work\n\nThis is the order of season for number of rented bikes(descending order) ,\n\n1)Autumn\n\n2)Summer\n\n3)Spring,\n\n4)Winter\n\nMost people rent bikes on Functioning days and days which aren't holidays","9584dc53":"# Plot Feature importance from Xgboostregressor without any hyperparameter tuning"}}