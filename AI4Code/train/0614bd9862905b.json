{"cell_type":{"fad32dc9":"code","8f40e90d":"code","e56c7762":"code","93601bb4":"code","9fb676b2":"code","1527c7bb":"code","e5acc32f":"code","30c3834f":"code","3d8ec3db":"code","2a80e943":"code","566f4207":"code","5c492760":"code","3c46ca5d":"code","051462b1":"code","5bcce342":"code","51a15f28":"code","281f8690":"code","c42004b2":"code","89b6ded6":"code","9bdc3870":"code","5c1431cf":"code","e3c6daea":"code","2a6c1f8a":"code","0dedb003":"code","9d5a5bf4":"code","b66c35c7":"code","d924e9c9":"code","823e6f70":"code","e9469a08":"code","ab78654d":"code","a2e37135":"code","30773443":"code","4a7f1c2f":"markdown","7b0e8444":"markdown","e47bf9bc":"markdown","1b3a0df4":"markdown","390100c4":"markdown","bd4c93e6":"markdown","843be7c6":"markdown","eb66635d":"markdown","f78b94f3":"markdown","beb8c6cf":"markdown","968712b2":"markdown","43c03579":"markdown","95e143d4":"markdown","b0c90632":"markdown","23f7a742":"markdown","0ec47562":"markdown","e7616468":"markdown","de2ccb04":"markdown","cb48bfeb":"markdown","cee91a05":"markdown","360c7e50":"markdown","ac36b431":"markdown"},"source":{"fad32dc9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.pyplot import figure","8f40e90d":"#model selction tools\nfrom sklearn.model_selection import train_test_split , GridSearchCV\\\n        , StratifiedKFold , TimeSeriesSplit,KFold,cross_val_score\n#metrics \nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_squared_log_error\n#models \nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.ensemble import AdaBoostRegressor,BaggingRegressor,GradientBoostingRegressor\nimport xgboost as xgb\nimport catboost as cb\n#tools\nfrom sklearn.inspection import permutation_importance\nfrom sklearn.utils import shuffle\nfrom sklearn.pipeline import FeatureUnion, Pipeline, make_pipeline\n","e56c7762":"### loading data\n##### [Jump Top](#Jump)#---------- configs\npd.set_option('max_rows',100)\npd.set_option('max_columns',40)","93601bb4":"train_path = r\"..\/input\/seoul-bike-rental-ai-pro-iti\/train.csv\"\ntest_path = r\"..\/input\/seoul-bike-rental-ai-pro-iti\/test.csv\"","9fb676b2":"df = pd.read_csv(train_path,index_col=0,parse_dates=['Date'],dayfirst=True)\ndf_test = pd.read_csv(test_path,parse_dates=['Date'],dayfirst=True)\n\ndf = df.rename(columns={'Temperature(\ufffdC)':'Temperature(C)'\n                        ,'Dew point temperature(\ufffdC)'  : 'Dew point temperature(C)'})\n\ndf_test = df_test.rename(columns={'Temperature(\ufffdC)':'Temperature(C)'\n                                  ,'Dew point temperature(\ufffdC)'  : 'Dew point temperature(C)'})","1527c7bb":"def rush_hour(df):\n    #from 8 am , 6 pm\n    rush_range_1 = 2 # around the rush hour by +- 2 hrs\n    rush_range_2 = 5 # around the rush hour by +- 4 hrs\n    is_functional = df['Functioning Day'] \n    \n    if (abs(df['Hour'] - 8) <= rush_range_1): \n        return np.exp(-abs(df['Hour'] - 8)) * is_functional\n    \n    elif (abs(df['Hour'] - 18) <= rush_range_2):\n        return np.exp(-abs(df['Hour'] - 18)) * is_functional\n    else:\n        return 0\n        \ndef dead_hour(df):\n    #dead_range_1 = 5 # around the dead hour by +- 3 hrs from 4 am\n    is_functional = df['Functioning Day'] \n    \n    if(df['Hour'] in [22,23,0,1,2,3,4,5]):\n        return np.exp(-abs(df['Hour'] - 4)) * is_functional\n    else:\n        return 0 ","e5acc32f":"day_state = lambda df : 1  if (df['Hour'] >=6 and df['Hour'] <=18) else 0","30c3834f":"humidex = lambda df : df['Temperature(C)'] + (5\/9) *\\\n(6.11 * np.exp(5417.7530 * (1\/273.16-(1\/(273.15 + df['Dew point temperature(C)']) ) ) ) -10)\n\n# get the high Humidity \nHumidity_high = lambda df : 0 if (df['Humidity(%)'] <= 70) else 1","3d8ec3db":"#To change \n#remove unsed\ndef visibility(df):\n    #0:250 , 250:500 : 500:inf\n    \n    if df['Visibility (10m)'] <=250 :\n        return 0\n    elif df['Visibility (10m)'] <=350 :\n        return 1\n    elif df['Visibility (10m)'] <=450 :\n        return 1\n    elif df['Visibility (10m)'] <=550 :\n        return 2\n    elif df['Visibility (10m)'] <=650 :\n        return 2\n    elif df['Visibility (10m)'] <=850 :\n        return 3\n    elif df['Visibility (10m)'] <=1150 :\n        return 3\n    elif df['Visibility (10m)'] <=1350 :\n        return 4\n    else:\n        return 5\n#To change \n#visibility_dist:visibility_Status\ndef visibility_dist(df):\n    #0:250 , 250:500 : 500:inf\n    \n    if df['Visibility (10m)'] <100 :     #can't see\n        return 1\n    elif df['Visibility (10m)'] <400 :   # foggy\n        return 2\n    elif df['Visibility (10m)'] <1000 :  # low fog\n        return 3\n    elif df['Visibility (10m)'] <2000 :  # no fog (good vision)\n        return 4\n    elif df['Visibility (10m)'] <4000 :  # no fog (excellent vision)\n        return 5\n    else:\n        return 5","2a80e943":"rain_fall = lambda df : 0 if df['Rainfall(mm)'] < 0.5 else 1\nsnow_fall = lambda df : 0 if df['Snowfall (cm)'] == 0 else 1","566f4207":"Bad_Weather = lambda df :0 \\\nif (df['Temperature(C)'] < 35) and (df['Humidity(%)'] < 70) and (df['Solar Radiation (MJ\/m2)'] < 1.4) \\\nelse 1\n\nHigh_temperature = lambda df : 0 if (df['Temperature(C)'] <= 35) else 1\n\n\nIdeal = lambda df: 1 if (df['Temperature(C)'] < 30 and df['Wind speed (m\/s)'] < 2.8) else 0","5c492760":"def Sunny_Hot (df):\n    if ((df['Temperature(C)']>25)&((df['Solar Radiation (MJ\/m2)'] >2)&(df['day_night']==1))):\n        return True\n    else:\n        return False\n\ndef Clear_hot (df):\n    if ((df['Temperature(C)']>25)&(((df['Solar Radiation (MJ\/m2)'] <=2)&(df['Solar Radiation (MJ\/m2)'] >1))\\\n                                   &(df['day_night']==1))&(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n\ndef PCloudy_hot(df):  \n    if((df['Temperature(C)']>25)&(((df['Solar Radiation (MJ\/m2)'] <=1)&(df['Solar Radiation (MJ\/m2)'] >0.5))\\\n                                                       &(df['day_night']==1))&(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n    \ndef Cloudy_hot(df): \n    if((df['Temperature(C)']>25)&(((df['Solar Radiation (MJ\/m2)'] <=0.5))&(df['day_night']==1))\\\n                      &(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\ndef Rain_hot(df):  \n    if((df['Temperature(C)']>25)&(df['Rainfall(mm)'] >0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n\ndef Night_hot(df): \n    if((df['Temperature(C)']>25)&(df['day_night']==0)\n                      &(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n    \ndef Sunny_Warm (df):\n    if (((df['Temperature(C)']<=25)&(df['Temperature(C)']>10))&((df['Solar Radiation (MJ\/m2)'] >2)&(df['day_night']==1))):\n        return True\n    else:\n        return False\n\ndef Clear_Warm (df):\n    if (((df['Temperature(C)']<=25)&(df['Temperature(C)']>10))\\\n        &(((df['Solar Radiation (MJ\/m2)'] <=2)&(df['Solar Radiation (MJ\/m2)'] >1))&(df['day_night']==1))\\\n        &(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n\ndef PCloudy_Warm(df):  \n    if(((df['Temperature(C)']<=25)&(df['Temperature(C)']>10))\\\n       &(((df['Solar Radiation (MJ\/m2)'] <=1)&(df['Solar Radiation (MJ\/m2)'] >0.5))&(df['day_night']==1))\\\n       &(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n    \ndef Cloudy_Warm(df): \n    if(((df['Temperature(C)']<=25)&(df['Temperature(C)']>10))\\\n       &(((df['Solar Radiation (MJ\/m2)'] <=0.5))&(df['day_night']==1))\\\n       &(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n    \ndef Rain_Warm(df):  \n    if(((df['Temperature(C)']<=25)&(df['Temperature(C)']>10))&(df['Rainfall(mm)'] >0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n\ndef Night_Warm(df): \n    if(((df['Temperature(C)']<=25)&(df['Temperature(C)']>10))\\\n       &(df['day_night']==0)&(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n    \ndef Sunny_Cold (df):\n    if (((df['Temperature(C)']<=10)&(df['Temperature(C)']>0))&((df['Solar Radiation (MJ\/m2)'] >2)&(df['day_night']==1))):\n        return True\n    else:\n        return False\n\ndef Clear_Cold (df):\n    if (((df['Temperature(C)']<=10)&(df['Temperature(C)']>0))\\\n        &(((df['Solar Radiation (MJ\/m2)'] <=2)&(df['Solar Radiation (MJ\/m2)'] >1))&(df['day_night']==1))\\\n        &(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n\ndef PCloudy_Cold(df):  \n    if(((df['Temperature(C)']<=10)&(df['Temperature(C)']>0))\\\n       &(((df['Solar Radiation (MJ\/m2)'] <=1)&(df['Solar Radiation (MJ\/m2)'] >0.5))&(df['day_night']==1))\\\n       &(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n    \ndef Cloudy_Cold(df): \n    if(((df['Temperature(C)']<=10)&(df['Temperature(C)']>0))\\\n       &(((df['Solar Radiation (MJ\/m2)'] <=0.5))&(df['day_night']==1))\\\n       &(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n    \ndef Rain_Cold(df):  \n    if(((df['Temperature(C)']<=10)&(df['Temperature(C)']>0))&(df['Rainfall(mm)'] >0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n    \ndef Snow_Cold(df):  \n    if(((df['Temperature(C)']<=10)&(df['Temperature(C)']>0))&(df['Rainfall(mm)'] ==0)&(df['Snowfall (cm)'] >0)):\n        return True\n    else:\n        return False\n    \ndef Night_Cold(df): \n    if(((df['Temperature(C)']<=10)&(df['Temperature(C)']>0))\\\n       &(df['day_night']==0)&(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n    \ndef Sunny_Freezing (df):\n    if ((df['Temperature(C)']<=0)&((df['Solar Radiation (MJ\/m2)'] >2)&(df['day_night']==1))):\n        return True\n    else:\n        return False\n\ndef Clear_Freezing (df):\n    if ((df['Temperature(C)']<=0)&(((df['Solar Radiation (MJ\/m2)'] <=2)&(df['Solar Radiation (MJ\/m2)'] >1))\\\n                                   &(df['day_night']==1))&(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n\ndef PCloudy_Freezing(df):  \n    if((df['Temperature(C)']<=0)&(((df['Solar Radiation (MJ\/m2)'] <=1)&(df['Solar Radiation (MJ\/m2)'] >0.5))\\\n                                                       &(df['day_night']==1))&(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n    \ndef Cloudy_Freezing(df): \n    if((df['Temperature(C)']<=0)&(((df['Solar Radiation (MJ\/m2)'] <=0.5))&(df['day_night']==1))\\\n                      &(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n    \ndef Rain_Freezing(df):  \n    if((df['Temperature(C)']<=0)&(df['Rainfall(mm)'] >0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n    \ndef Snow_Freezing(df):  \n    if((df['Temperature(C)']<=0)&(df['Rainfall(mm)'] ==0)&(df['Snowfall (cm)'] >0)):\n        return True\n    else:\n        return False\n\ndef Night_Freezing(df): \n    if((df['Temperature(C)']<=0)&(df['day_night']==0)\n                      &(df['Rainfall(mm)'] == 0)&(df['Snowfall (cm)'] == 0)):\n        return True\n    else:\n        return False\n    \ndef Rain_Snow(df):\n    if (df['Rainfall(mm)'] >0)&(df['Snowfall (cm)'] >0):\n        return True\n    else:\n        return False","3c46ca5d":"Weather_State = lambda df:\\\n                \"Sunny_hot\" if Sunny_Hot(df)\\\n           else \"Clear_hot\" if Clear_hot(df)\\\n           else \"PCloudy_hot\" if PCloudy_hot(df)\\\n           else \"Cloudy_hot\" if Cloudy_hot(df)\\\n           else \"Rain_hot\" if Rain_hot(df)\\\n           else \"Night_hot\" if Night_hot(df)\\\n           else \"Sunny_Warm\" if Sunny_Warm(df)\\\n           else \"Clear_Warm\" if Clear_Warm(df)\\\n           else \"PCloudy_Warm\" if PCloudy_Warm(df)\\\n           else \"Cloudy_Warm\" if Cloudy_Warm(df)\\\n           else \"Rain_Warm\" if Rain_Warm(df)\\\n           else \"Night_Warm\" if Night_Warm(df)\\\n           else \"Sunny_Cold\" if Sunny_Cold(df)\\\n           else \"Clear_Cold\" if Clear_Cold(df)\\\n           else \"PCloudy_Cold\" if PCloudy_Cold(df)\\\n           else \"Cloudy_Cold\" if Cloudy_Cold(df)\\\n           else \"Rain_Cold\" if Rain_Cold(df)\\\n           else \"Snow_Cold\" if Snow_Cold(df)\\\n           else \"Night_Cold\" if Night_Cold(df)\\\n           else \"Sunny_Freezing\" if Sunny_Freezing(df)\\\n           else \"Clear_Freezing\" if Clear_Freezing(df)\\\n           else \"PCloudy_Freezing\" if PCloudy_Freezing(df)\\\n           else \"Cloudy_Freezing\" if Cloudy_Freezing(df)\\\n           else \"Rain_Freezing\" if Rain_Freezing(df)\\\n           else \"Snow_Freezing\" if Snow_Freezing(df)\\\n           else \"Night_Freezing\" if Night_Freezing(df)\\\n           else \"Rain&Snow\" if Rain_Snow(df)\\\n           else 0\n\nWeather_Description_list = ['Night_Freezing', 'Cloudy_Freezing', 'PCloudy_Freezing',\n                            'Clear_Cold', 'PCloudy_Cold', 'Cloudy_Cold', 'Night_Cold',\n                            'Rain_Cold', 'Clear_Freezing', 'Rain&Snow', 'Snow_Freezing',\n                            'Snow_Cold', 'Sunny_Freezing', 'Sunny_Cold', 'Sunny_Warm',\n                            'Clear_Warm', 'PCloudy_Warm', 'Cloudy_Warm', 'Night_Warm',\n                            'Rain_Warm', 'Sunny_hot', 'Clear_hot', 'Cloudy_hot', 'Night_hot',\n                            'PCloudy_hot', 'Rain_hot']\n\n\nlength = len(Weather_Description_list) + 1\nWeather_Description_neumeric = [*range(1, length, 1)]","051462b1":"def Clear(df):\n    if (df['Solar Radiation (MJ\/m2)'] >2) & (df['day_night'] ==1):\n        return 1\n    else:\n        return 0\n    \ndef Few_Clouds(df):\n    if (((df['Solar Radiation (MJ\/m2)'] <=2)&(df['Solar Radiation (MJ\/m2)'] >1.5)) & (df['day_night'] ==1)):\n        return 1  \n    else:\n        return 0\n    \ndef Scatterd_Clouds(df):\n    if (((df['Solar Radiation (MJ\/m2)'] <=1.5)&(df['Solar Radiation (MJ\/m2)'] >1)) & (df['day_night'] ==1)):\n        return 1  \n    else:\n        return 0\n    \ndef Partly_Cloudy(df):\n    if (((df['Solar Radiation (MJ\/m2)'] <=1)&(df['Solar Radiation (MJ\/m2)'] >0.5)) & (df['day_night'] ==1)):\n        return 1  \n    else:\n        return 0\n    \ndef Cloudy(df):\n    if ((df['Solar Radiation (MJ\/m2)'] <= 0.5) & (df['day_night'] ==1)):\n        return 1\n    else:\n        return 0\n    \ndef Night(df):\n    if ((df['Solar Radiation (MJ\/m2)'] <= 0.8) & (df['day_night'] ==0)):\n        return 1\n    else:\n        return 0\n    \n# mist and fog \ndef Mist(df):\n    if df['Visibility_dist'] == 3:\n        return 1\n    else:\n        return 0\n    \ndef Fog(df):\n    if ((df['Visibility_dist'] == 1) | (df['Visibility_dist'] == 2)) :\n        return 1\n    else:\n        return 0\n    \n#Rain State \ndef Light_Rain(df):\n    if ((df['Rainfall(mm)']) >0 & (df['Rainfall(mm)'] < 2.5))  :\n        return 1\n    else:\n        return 0\n    \ndef Heavy_Rain(df):\n    if (df['Rainfall(mm)'] >= 2.5)  :\n        return 1\n    else:\n        return 0\n    \ndef Ice_pallets(df):\n        if ((df['Rainfall(mm)'] > 0 )& (df['Snowfall (cm)'] > 0 ))  :\n            return 1\n        else:\n            return 0\n#Snow State\ndef Light_Snow(df):\n    if ((df['Snowfall (cm)']) >0 & (df['Snowfall (cm)'] < 1))  :\n        return 1\n    else:\n        return 0\n    \ndef Snow(df):\n    if (df['Snowfall (cm)'] >= 1)  :\n        return 1\n    else:\n        return 0","5bcce342":"def Cond1(df):\n    if Clear(df) or Few_Clouds(df) or Partly_Cloudy(df) or Cloudy(df):\n        return 1\n    else:\n        return 0\n    \ndef Cond2(df):\n    if (Mist(df) and Cloudy(df)) or (Mist(df) and Partly_Cloudy(df)) or (Mist(df) and Few_Clouds(df)) or Mist(df):\n        return 1\n    else:\n        return 0\n    \ndef Cond3(df):\n    if Light_Snow(df) or (Light_Rain(df) and Scatterd_Clouds(df)) or Light_Rain(df):\n        return 1\n    else:\n        return 0\n    \ndef Cond4(df):\n    if (Ice_pallets(df) and Mist(df)) or (Snow(df) and Fog(df)) or Snow(df) :\n        return 1\n    else:\n        return 0\n    \ndef Cond5(df):\n    if Night(df):\n        return 1\n    else:\n        return 0\n    \nSky_State = lambda df: 4 if Cond4(df)\\\n                 else 2 if Cond2(df)\\\n                 else 3 if Cond3(df)\\\n                 else 1 if Cond1(df)\\\n                 else 5","51a15f28":"def Hot(df):\n    if (df['Temperature(C)']>25):\n        return 1\n    else:\n        return 0\n    \ndef Warm(df):\n    if ((df['Temperature(C)']<=25)&(df['Temperature(C)']>10)):\n        return 1\n    else:\n        return 0\n    \ndef Cold(df):\n    if ((df['Temperature(C)']<=10)&(df['Temperature(C)']>0)):\n        return 1\n    else:\n        return 0\n    \ndef Freezing(df):\n    if (df['Temperature(C)']<=0):\n        return 1\n    else:\n        return 0\n    \nTemp_State = lambda df: 1 if Warm(df)\\\n                 else 2 if Cold(df)\\\n                 else 3 if Hot(df)\\\n                 else 4 if Freezing(df)\\\n                 else 5","281f8690":"class FeatureEngineering:\n    \n    def __init__(self,df):\n        self.original_df = df\n        self.TransformedDF = self.original_df.copy()\n    \n    def get_date_attributes(self,Date_Col_name):        \n        self.TransformedDF['Year'] = self.original_df[Date_Col_name].dt.year.astype('int')\n        self.TransformedDF['Week'] = self.original_df[Date_Col_name].dt.isocalendar().week.astype('int')\n        self.TransformedDF['Month'] = self.original_df[Date_Col_name].dt.month.astype('int')\n        self.TransformedDF['WeekDay'] = self.original_df[Date_Col_name].dt.weekday.astype('int')\n        \n    def new_feature(self,function,new_col_name):\n        self.TransformedDF[new_col_name]  = self.TransformedDF.apply(function,axis=1)\n        \n    def map_colmun_to_Categorical(self,new_col_name,from_vals,to_vals):\n        self.TransformedDF[new_col_name].replace(from_vals,to_vals,inplace=True)\n        \n    def CreateLag(self,used_col,shift = -1):\n        col_name = f'{used_col}_shift({shift})'\n        self.TransformedDF[col_name] = self.TransformedDF[used_col].shift(shift)\n        self.TransformedDF[col_name].fillna(0, inplace=True)\n    \n    def CreateRoll(self,used_col,roll = 4):\n        col_name = f'{used_col}_rolling({roll}With_Mean)'\n        self.TransformedDF[col_name] = self.TransformedDF[used_col].rolling(roll).mean()\n        self.TransformedDF[col_name].fillna(0, inplace=True)\n        \n    def CreateEWM(self,used_col,com = 0.9):\n        col_name = f'{used_col}_EWM_Com({com}With_Mean)'\n        self.TransformedDF[col_name] = self.TransformedDF[used_col].ewm(com=com).mean()\n        self.TransformedDF[col_name].fillna(0, inplace=True)","c42004b2":"def Transform(df):\n    Transformed  = FeatureEngineering(df)\n    Transformed.get_date_attributes('Date')\n    \n    # map_data_series(df_prep,'Functioning Day',['Yes','No'],[1,0])\n    Transformed.map_colmun_to_Categorical('Functioning Day',['Yes','No'],[1,0])\n    Transformed.map_colmun_to_Categorical('Holiday',['Holiday','No Holiday'],[1,0])\n    Transformed.map_colmun_to_Categorical('Seasons',['Winter','Spring','Summer','Autumn'],[0,1,2,3])\n    \n    #Create Rush and Dead hour\n    Transformed.new_feature(rush_hour,'Rush_hour')\n    Transformed.new_feature(dead_hour,'Dead_hour')\n    \n    #Get morinig or Night\n    #TO change\n    #day_night:morninig and night\n    Transformed.new_feature(day_state,'day_night')\n    \n    #Humidity_high\n    Transformed.new_feature(Humidity_high,'Humidity_high')\n    \n    #Hight Temp\n    Transformed.new_feature(High_temperature,'Temperature_high')\n    \n    #Bad wether\n    Transformed.new_feature(Bad_Weather ,'Weather_bad')\n\n    #Create Humidex\n    Transformed.new_feature(humidex,'Humidex') \n    \n    #Ideal Weather\n    Transformed.new_feature(Ideal,'Ideal')\n    \n    #Visability \n    #To change \n    #Visibility_cat > remove \n    Transformed.new_feature(visibility,'Visibility_cat')\n    \n    #visibility states\n    Transformed.new_feature(visibility_dist,'Visibility_dist')\n    \n    #Rain or Snow \n    #To change \n    #Rain Snow _ cat > isRain , isSnow \n    Transformed.new_feature(rain_fall,'Rain_cat')\n    Transformed.new_feature(snow_fall,'Snow_cat')\n    \n    #Weather State\n    Transformed.new_feature(Weather_State,'Weather_State')\n    \n    #Categorical Weather State\n    Transformed.map_colmun_to_Categorical('Weather_State',Weather_Description_list\n                                          ,Weather_Description_neumeric)\n    #to Change \n    #Weather_stat&visb_dist : Weather_stat@visibility_Status\n    Transformed.new_feature(lambda df :df['Weather_State']*(df['Visibility_dist'])\n                            ,'Weather_stat&visb_dist') # Weather_stat@visb_dist\n    \n    #To change\n    #Weather&visb : #Weather_stat@log(visability)\n    \n    Transformed.new_feature( lambda df :df['Weather_State']*np.log(df['Visibility (10m)']) \n                      ,'Weather&visb') #Weather_stat@log(visb)\n    \n    #Sky_State\n    Transformed.new_feature(Sky_State,'Sky_State')\n    #Temp_State\n    Transformed.new_feature(Temp_State,'Temp_State')\n    \n    #play ground \n    #To change \n    #GBL_Forecast : Sky_State_@_Temp_State\n    Transformed.new_feature(lambda df :df['Sky_State']*(df['Temp_State'])\n                            ,'GBL_Forecast') #Sky_State_@_Temp_State\n\n    #Lag Play Groun\n    ColsForLag =  [\"Temperature(C)\" ,\"Rainfall(mm)\" ,\"Visibility (10m)\"\n                , \"Wind speed (m\/s)\",\"Weather_State\",\"Humidity(%)\",\"Rush_hour\",\"Dead_hour\",\"Ideal\" \n                   ,\"Dew point temperature(C)\"]\n    #To change \n    #Temperature lag1:Temperature(C)_shift(-1)\n    #any Roll f'{used_col}_rolling({roll}With_Mean)'\n    #any EWM f'{used_col}_EWM_Com({com}With_Mean)'\n    t  = -1\n    for col in ColsForLag:\n        Transformed.CreateLag(col,(t))\n        \n    for col in ColsForLag:\n        Transformed.CreateLag(col,(t-1))\n        \n    for col in ColsForLag:\n        Transformed.CreateLag(col,(t-2))\n\n    for col in  ColsForLag:\n        Transformed.CreateRoll(col,4)\n\n    for col in  ColsForLag:\n        Transformed.CreateEWM(col,0.9)\n\n\n    return Transformed.TransformedDF","89b6ded6":"def rmsle(y_true, y_pred, convertExp=True):\n    if convertExp:\n        y_true = 10**(y_true)\n        y_pred = 10**(y_pred)\n        \n    log_true = np.nan_to_num(np.array([np.log(y+1.0) for y in y_true]))\n    log_pred = np.nan_to_num(np.array([np.log(y+1.0) for y in y_pred]))\n    \n    output = np.sqrt(np.mean((log_true - log_pred)**2))\n    return output\n\nrmsle_scorer = metrics.make_scorer(rmsle, greater_is_better=False) \nScoring = rmsle_scorer","9bdc3870":"ColsForLag =  [\"Temperature(C)\" ,\"Rainfall(mm)\" ,\"Visibility (10m)\"\n            , \"Wind speed (m\/s)\",\"Weather_State\",\"Humidity(%)\",\"Rush_hour\",\"Dead_hour\",\"Ideal\" \n               ,\"Dew point temperature(C)\"]","5c1431cf":"lag1_features , lag2_features , lag3_features , rolling_features,ewn_features = [],[],[],[],[]\nt = -1\n\nfor used_col in ColsForLag:\n    col_name = f'{used_col}_shift({+t})'\n    lag1_features.append(col_name)\n    \nfor used_col in ColsForLag:\n    col_name = f'{used_col}_shift({+t-1})'\n    lag2_features.append(col_name)\n    \nfor used_col in ColsForLag:\n    col_name = f'{used_col}_shift({+t-2})'\n    lag3_features.append(col_name)\n\nfor used_col in ColsForLag:\n    col_name = f'{used_col}_rolling({4}With_Mean)'\n    rolling_features.append(col_name)\n\nfor used_col in ColsForLag:\n    col_name = f'{used_col}_EWM_Com({0.9}With_Mean)'\n    ewn_features.append(col_name)","e3c6daea":"from sklearn.datasets import make_regression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_squared_log_error\nfrom sklearn.model_selection import GridSearchCV, StratifiedKFold\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import KFold\nfrom sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor,BaggingRegressor,GradientBoostingRegressor\nfrom sklearn.inspection import permutation_importance\nfrom sklearn.utils import shuffle\nimport xgboost as xgb\nimport catboost as cb\n\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import cross_val_score\n\n","2a6c1f8a":"original_features=['Hour','Week', 'Month','Year', 'Solar Radiation (MJ\/m2)','Rainfall(mm)',\"Dew point temperature(C)\",\n                     'Snowfall (cm)','Wind speed (m\/s)','Visibility (10m)','WeekDay',\n                     'Seasons','Holiday' ,'Temperature(C)', 'Humidity(%)',\n                     'Functioning Day']\n\n\nweather_features=['Rush_hour','Dead_hour','Weather_State',\n                     'Weather&visb','Weather_stat&visb_dist','Sky_State','Temp_State','GBL_Forecast']\n\nselected_features = original_features + weather_features + lag1_features + lag2_features + lag3_features + rolling_features + ewn_features\n\ntrain = Transform(df)\n\ntrain[\"y\"] = np.log10(train[\"y\"]+0.00001) ##--- someone explain why this works better than +1\n#train[\"y\"] = df_prep[\"y\"]\nX1 = train[selected_features]\ny1 = train[\"y\"]\n\n# tss = TimeSeriesSplit(n_splits=2)\n# train_ind,test_ind  = tss.split(X1,groups=[20,1])\n\nX_train, X_test, y_train, y_test = train_test_split(X1, y1, test_size = 0.2, random_state=42,shuffle=True)","0dedb003":"train_dataset = cb.Pool(X_train, y_train) \ntest_dataset = cb.Pool(X_test, y_test)\n\nmodel = cb.CatBoostRegressor(loss_function='RMSE',random_state=0,max_depth=4,iterations=3200,\n                                           l2_leaf_reg=1,learning_rate=0.038,subsample=0.85)\n\n\nmodel.fit(X_train,y_train)\npred_test = model.predict(X_test)\npred_train= model.predict(X_train)\n\nprint('(Test) CatBoost Regression RMSLE:', rmsle(y_test, pred_test, True))\nprint('(Train) CatBoost Regression RMSLE:', rmsle(y_train, pred_train, True))\n","9d5a5bf4":"y_test_st = model.predict(X_test)\ny_train_st = model.predict(X_train)\n\nprint('CatBoost RMSLE Test: ', rmsle(y_test, y_test_st, True))\nprint('CatBoost RMSLE Train: ', rmsle(y_train, y_train_st, True))\n\nprint('CatBoost R2 Test: ', r2_score(y_test, y_test_st))\nprint('CatBoost R2 Train: ', r2_score(y_train, y_train_st))","b66c35c7":"from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedKFold\nk_folds = KFold(n_splits=7)\ncv_score = cross_val_score(model, X_train, y_train, n_jobs=-1, verbose = 2, cv=k_folds, scoring=rmsle_scorer)\nprint(f'CatBoost cv_error : {-cv_score.mean()}')","d924e9c9":"#cv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\n#scores = cross_val_score(model, X_test, y_test, scoring=rmsle_scorer, cv=cv, n_jobs=-1)","823e6f70":"#-scores.mean()","e9469a08":"save_to_path = r'submission.csv'","ab78654d":"test = Transform(df_test)","a2e37135":"test['y'] =  10**(model.predict(test[selected_features]))\ntest[[\"ID\", \"y\"]].to_csv(save_to_path, index=False)","30773443":"test.y","4a7f1c2f":"- getting the rush hour and Dead Hours of our DF","7b0e8444":"---\n<a id='Save_Submission'><\/a>\n### Save Submission\n### [Jump Top](#Jump)","e47bf9bc":"<a id='path'><\/a>\n### loading data\n##### [Jump Top](#Jump)","1b3a0df4":"- Selecting the upcoming features to apply the lag of -1 on them. Lag is applied to know the future of the current features, as what happens always on google climate you can always know the temperature in the coming hours.","390100c4":"- Clustering the Temperature State","bd4c93e6":"#### Using The Temp column to create Humidex \n[Source](https:\/\/en.wikipedia.org\/wiki\/Humidex)\n![image.png](attachment:image.png)","843be7c6":"---\n<a id='Model_Prediction'><\/a>\n### Model Predictions\n### [Jump Top](#Jump)","eb66635d":"##### based on the previous notebook (EDA) we will consider the following \n\n- A) The Hourly cycle has a good correlation. [7am-18pm has the bigger share]\n- B) The Temperature has good corr. [high is good except > ~ 27]\n- C) The Functional Day has good corr. [functional is good for target]\n- D) The Seasons has good corr. [hot season is better]\n\n-------------\n\n- E) The Visibility may prove to be good. [if encoded to very_low visibility vs normal visibiliy].\n- F) The RainFall\/SnowFall may prove to be good. [if encoded to Snowing \/ Raining or not].\n- G) The Humidity may have something to investigate. [if encoded as 0-80 % normal rentals, 80-100% show sharp decay in rentals]\n\n---------------\n- H) the Dew point temperature is strongly corr to Temperature will drop it, if using a linear model.\n- I) the Solar Radiation may be discarded .. i didn't see good relation. if using a linear model also.\n- J) the holidays didn't prove decisive saying on our target. maybe discarded too.\n-----\n\n- **In order to get more features that may help the model understanding relationships among variables, we tended to collect our domain knowledge about the problem, and gathered most of it through searching, thinking, and visualizing. Clustering Weather-State, Sky-State, Day-Night & more, came along from this Point.**","f78b94f3":"---\n<center> <h2> FEATURE ENGINEERING CLASS <\/h2> <\/center>","beb8c6cf":"---\n## CatBoost Model Training\n- We've decided to use the CatBoost Algorithm only, as it gets the best Train, Validation & CV Error, Better than XGB, GBM, LightGBM, RF and StackingRegressor, And deleted their cells because of the time taken to save and run the notebook.","968712b2":"## Feature Engineering","43c03579":"- Visibility Clustering into classes.","95e143d4":"- Manually Putting the Weather State","b0c90632":"- Clustering Sky States into 5 classes","23f7a742":"### Imports","0ec47562":"#### Rain\n- creating a feature to see Sky state (Rain And SnowFall ) to conclude if it rains, snows or not.","e7616468":"- getting The state of the Day , night or morning","de2ccb04":"<a id='Jump'><\/a>\n## [Feature Selection](#Feature_Selection) <br>\n\n---\n\n## Models\n- #### [Random Forest Train](#Random_Forest) (**Deprecated**)\n- #### [XGB Train Model](#XGB_train) [Try Grid search](#Try_grid_search) (**Deprecated**)\n- #### [GBRegressor Train](#GBRegressor_train) (**Deprecated**)\n- #### [CatBoost train](#CatBoosttrain) (**Used**)\n\n---\n\n### [Model Prediction](#Model_Prediction)\n### [Save Submission](#Save_Submission)","cb48bfeb":"####  Our Scoring Metric (RMSLE)","cee91a05":"- Manually Putting the Sky State","360c7e50":"----\n# Training The Model","ac36b431":"---\n<a id='Feature_Selection'><\/a>\n- Selecting features and splitting (do this everytime you change the features! and want to do training)\n### [Jump Top](#Jump)"}}