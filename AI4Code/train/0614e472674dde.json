{"cell_type":{"4341f0c0":"code","408e2abc":"code","a7da991f":"code","1154f13f":"code","f96b9a46":"code","095ba5f1":"code","07403fa6":"code","62d38441":"code","ddab250b":"code","bb7ad23b":"code","5a8d5108":"code","cc52c9b2":"code","c4877150":"code","d0076eb7":"code","ebe6456a":"code","6709575c":"code","4fd008d3":"code","173823de":"code","eb198cb6":"code","ebf8c803":"code","826ee5ae":"code","482b1c32":"code","11e10d2a":"code","04380519":"code","b5e3a527":"code","ab9e7957":"code","44dde702":"code","3e4a49ad":"code","d3578a4b":"code","98eea1b0":"code","0b7c9576":"code","07501717":"code","b1e04c2d":"code","3aa5bd86":"code","dc0019da":"code","2e543887":"code","3307b736":"code","03c33765":"code","2d8c1553":"code","710b9259":"code","fc24ca2f":"code","75ee75bc":"code","992999ec":"code","400c2df5":"code","47d0d84e":"code","844348d1":"code","f876d584":"code","62ca030f":"code","b9d987bf":"code","17572197":"code","373069fa":"code","4f17c237":"code","46fc3ad7":"code","244263aa":"code","2a644643":"code","7fd4c6e7":"code","c0668a7b":"code","4523042d":"code","38f6763c":"code","8d04f91c":"code","7d5c83e3":"code","42349815":"code","5bb69ddb":"code","d55af6d0":"code","6c1c207b":"code","ed41d14b":"code","843392db":"code","5af3a661":"code","dea3bd6e":"code","66f0f9aa":"code","1e181aff":"code","598145fd":"code","01283626":"code","ae4aadcb":"code","40cddd93":"code","c7a303bc":"code","183d7a19":"code","21bfd438":"code","41d75c29":"code","f7fe5d0c":"code","b8ae70c8":"code","9c73610c":"code","7681d437":"code","c8c5d3e0":"code","ff4e6153":"code","1af75b8f":"code","6e54574d":"code","5d526573":"code","f1945dd5":"code","96c964b9":"code","5ab609f2":"code","b5d0465e":"code","13ee6114":"code","e6b7df52":"code","316d4106":"code","ef093c3f":"code","266c2d78":"code","8c764ffa":"code","57472292":"code","41f48dc3":"code","f1e826a7":"code","87554ec6":"code","564b0218":"code","efbef12a":"code","be3cce01":"code","5cec3961":"code","1582fd1d":"code","dc3fb63f":"code","82976d39":"code","77eb8cd9":"code","4f45ea00":"code","e4d6eb90":"code","9ec4894b":"code","1d1fd8aa":"code","f51f93f6":"code","96115884":"code","45b2c624":"code","577dde59":"code","9a323c86":"code","1e60dc2b":"markdown","9c6ff1f2":"markdown","ace411f6":"markdown","2ee1b00d":"markdown","4c0ac5fa":"markdown","ea0285a5":"markdown","a5150c1b":"markdown","d6a2d449":"markdown","e2f95367":"markdown","08082a26":"markdown","593b7b2a":"markdown","372a2d2a":"markdown","6afa8be1":"markdown","ab111d12":"markdown","4f707d61":"markdown","9bf5f9ea":"markdown","b43b9f4b":"markdown","65bf4e81":"markdown","b49e3301":"markdown","93a7fb2c":"markdown","ec9ef55f":"markdown","b21a46fe":"markdown","cbd87924":"markdown","652961cf":"markdown","afa961a5":"markdown","570d6e40":"markdown","272b766c":"markdown","4ccb11ce":"markdown","f1d6f844":"markdown","1e7a30af":"markdown","1de2a9d2":"markdown","31303889":"markdown","573cfb42":"markdown","8106ea6a":"markdown","71bbb2f6":"markdown","01ce8bda":"markdown"},"source":{"4341f0c0":"import pandas as pd","408e2abc":"ls","a7da991f":"df = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","1154f13f":"df.head()","f96b9a46":"df.info()","095ba5f1":"df.describe().T","07403fa6":"df.nunique()","62d38441":"df.gender.unique()","ddab250b":"df.work_type.unique()","bb7ad23b":"df.smoking_status.unique()","5a8d5108":"df.bmi","cc52c9b2":"df.avg_glucose_level","c4877150":"df","d0076eb7":"df.gender.value_counts()","ebe6456a":"df[df['gender'] == 'Other']","6709575c":"df[df['gender'] == 'Other'].index","4fd008d3":"df.drop(df[df['gender'] == 'Other'].index, inplace=True)","173823de":"df","eb198cb6":"df['gender'] = df['gender'].apply(lambda x : 0 if x == 'Female' else 1)","ebf8c803":"df['ever_married'].apply(lambda x : 0 if x == 'No' else 1).unique()","826ee5ae":"df['ever_married'] = df['ever_married'].apply(lambda x : 0 if x == 'No' else 1)","482b1c32":"df['Residence_type'].value_counts()","11e10d2a":"df['Residence_type'] = df['Residence_type'].apply(lambda x : 0 if x == 'Rural' else 1)","04380519":"df","b5e3a527":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","ab9e7957":"import warnings\nwarnings.filterwarnings(\"ignore\")","44dde702":"sns.distplot(df['age']);","3e4a49ad":"def age_classifier(age):\n    if age < 20 :\n        return 'age_under 19'\n    elif age < 40 :\n        return 'age_20 to 39'\n    elif age < 60:\n        return 'age_40 to 59'\n    else:\n        return 'age_over 60'","d3578a4b":"df['age'].apply(lambda x : age_classifier(x))","98eea1b0":"df['age'] = df['age'].apply(lambda x : age_classifier(x))","0b7c9576":"df['age'].unique()","07501717":"df['age'].value_counts()","b1e04c2d":"sns.distplot(df['avg_glucose_level']);","3aa5bd86":"df['avg_glucose_level'].describe()","dc0019da":"def glucose_level_classifier(level):\n    if level < 77:\n        return 'gl_under 25%'\n    elif level < 91:\n        return 'gl_26% to 50%'\n    elif level < 114:\n        return 'gl_50% to 75%'\n    else:\n        return 'gl_over 75%'","2e543887":"df['avg_glucose_level'].apply(lambda x : glucose_level_classifier(x))","3307b736":"# let's check 'is properly distributed?'\ndf['avg_glucose_level'].apply(lambda x : glucose_level_classifier(x)).value_counts()","03c33765":"df['avg_glucose_level'] = df['avg_glucose_level'].apply(lambda x : glucose_level_classifier(x))","2d8c1553":"df['bmi'].describe()","710b9259":"def bmi_classifier(figure):\n    if figure < 23:\n        return 'bmi_under 25%'\n    elif figure < 28:\n        return 'bmi_26% to 50%'\n    elif figure < 33:\n        return 'bmi_50% to 75%'\n    else:\n        return 'bmi_over 75%'","fc24ca2f":"df.info()","75ee75bc":"df[df.bmi.isnull()]","992999ec":"sns.distplot(df['bmi']);","400c2df5":"df['bmi'].fillna(28, inplace=True)","47d0d84e":"df.bmi.isnull().sum()","844348d1":"df['bmi'].apply(lambda x : bmi_classifier(x)).value_counts()","f876d584":"df['bmi'] = df['bmi'].apply(lambda x : bmi_classifier(x))","62ca030f":"df","b9d987bf":"df.info()","17572197":"columns = df.columns","373069fa":"columns","4f17c237":"df[columns[0]].dtype","46fc3ad7":"num_cols = []\ncat_cols = []\nfor col in columns:\n    if df[col].dtype == int:\n        num_cols.append(col)\n    else:\n        cat_cols.append(col)","244263aa":"print('numeric columns : {}'.format(num_cols))\nprint('categorical columns : {}'.format(cat_cols))","2a644643":"from sklearn.preprocessing import LabelBinarizer \n\nlb = LabelBinarizer()\nX_encoded = lb.fit_transform(df['age']) \nX_encoded","7fd4c6e7":"df['age']","c0668a7b":"df['age'].unique()","4523042d":"pd.DataFrame(X_encoded, columns=['age_20 to 39' ,'age_40 to 59', 'age_over 60', 'age_under 19'])","38f6763c":"age_df = pd.DataFrame(X_encoded, columns=['age_20 to 39' ,'age_40 to 59', 'age_over 60', 'age_under 19'])","8d04f91c":"cat_cols","7d5c83e3":"one_hot_encoded = lb.fit_transform(df['work_type'])","42349815":"one_hot_encoded[-20:]","5bb69ddb":"df['work_type'].tail(20)","d55af6d0":"df['work_type'].unique()","6c1c207b":"pd.DataFrame(one_hot_encoded, columns=['Govt_job','Never_worked', 'Private', 'Self-employed', 'Children'])","ed41d14b":"work_type_df = pd.DataFrame(one_hot_encoded, columns=['Govt_job','Never_worked', 'Private', 'Self-employed', 'Children'])","843392db":"df['avg_glucose_level']","5af3a661":"one_hot_encoded = lb.fit_transform(df['avg_glucose_level'])","dea3bd6e":"one_hot_encoded","66f0f9aa":"df['avg_glucose_level'].unique()","1e181aff":"pd.DataFrame(one_hot_encoded, columns=['gl_26% to 50%', 'gl_50% to 75%', 'gl_over 75%', 'gl_under 25%'])","598145fd":"agl_df = pd.DataFrame(one_hot_encoded, columns=['gl_26% to 50%', 'gl_50% to 75%', 'gl_over 75%', 'gl_under 25%'])","01283626":"df['bmi']","ae4aadcb":"one_hot_encoded = lb.fit_transform(df['bmi'])\none_hot_encoded","40cddd93":"df['bmi'].unique()","c7a303bc":"pd.DataFrame(one_hot_encoded, columns=['bmi_26% to 50%', 'bmi_50% to 75%', 'bmi_over 75%', 'bmi_under 25%'])","183d7a19":"bmi_df = pd.DataFrame(one_hot_encoded, columns=['bmi_26% to 50%', 'bmi_50% to 75%', 'bmi_over 75%', 'bmi_under 25%'])","21bfd438":"df['smoking_status']","41d75c29":"df['smoking_status'].unique()","f7fe5d0c":"lb.fit_transform(df['smoking_status'])","b8ae70c8":"one_hot_encoded = lb.fit_transform(df['smoking_status'])","9c73610c":"pd.DataFrame(one_hot_encoded, columns=['Unknown','formerly smoked','never smoked','smokes'])","7681d437":"smoked_df = pd.DataFrame(one_hot_encoded, columns=['Unknown','formerly smoked','never smoked','smokes'])","c8c5d3e0":"cat_cols.append('age')","ff4e6153":"cat_cols","1af75b8f":"df","6e54574d":"df.drop(cat_cols,axis=1,inplace=True)\ndf","5d526573":"# delete meaningless column (for machie learning)\ndf.drop('id', axis=1, inplace=True)","f1945dd5":"df","96c964b9":"cat_cols","5ab609f2":"df.reset_index().iloc[:,1:]","b5d0465e":"df = df.reset_index().iloc[:,1:]","13ee6114":"df","e6b7df52":"pd.concat([df,age_df,agl_df,work_type_df,bmi_df,smoked_df], axis=1)","316d4106":"pd.concat([df,age_df,agl_df,work_type_df,bmi_df,smoked_df], axis=1).isnull().sum()","ef093c3f":"final_df = pd.concat([df,age_df,agl_df,work_type_df,bmi_df,smoked_df], axis=1)","266c2d78":"from sklearn.model_selection import train_test_split","8c764ffa":"X = final_df.drop('stroke', axis=1)\ny = final_df['stroke']","57472292":"X.shape, y.shape","41f48dc3":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=111)","f1e826a7":"X_train.shape, y_train.shape","87554ec6":"X_test.shape, y_test.shape","564b0218":"y_train.value_counts()","efbef12a":"y_test.value_counts()","be3cce01":"plt.bar(x = y_train.value_counts().index, height = y_train.value_counts().values);","5cec3961":"from sklearn.utils import resample","1582fd1d":"train_df = pd.concat([X_train,y_train], axis=1)","dc3fb63f":"train_df","82976d39":"train_0 = train_df[train_df['stroke']==0]\ntrain_1 = train_df[train_df['stroke']==1]\n","77eb8cd9":"train_0.shape, train_1.shape","4f45ea00":"upsampled_train_1 = resample(train_1,\n                             replace=True,\n                             n_samples=3893,\n                             random_state=123\n                            )\nupsampled_train_1.shape","e4d6eb90":"upsampled_train = pd.concat([train_0, upsampled_train_1])","9ec4894b":"upsampled_train['stroke'].value_counts()","1d1fd8aa":"X_train = upsampled_train.drop('stroke',axis=1)\ny_train = upsampled_train['stroke']","f51f93f6":"from sklearn.ensemble import RandomForestClassifier","96115884":"rfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)\nprint('Train Accuracy : {:.2f}'.format(rfc.score(X_train, y_train)))\nprint('Test Accuracy : {:.2f}'.format(rfc.score(X_test, y_test)))","45b2c624":"best_params = {}\nscore = 0\nfrom sklearn.ensemble import GradientBoostingClassifier\nfor i in range(1,8):\n    for j in [50, 100, 150, 200, 250, 300, 350, 400]:\n        gbc = GradientBoostingClassifier(max_depth=i,\n                                         n_estimators=j\n                                        )\n        gbc.fit(X_train, y_train)\n\n        print('max_depth : {}'.format(i))\n        print('n_estimators : {}'.format(j))\n        print('Train Score : {}'.format(gbc.score(X_train,y_train)))\n        print('Train Score : {}'.format(gbc.score(X_test,y_test)))\n        print('----------------------------------------------------')\n        if gbc.score(X_test,y_test) > score:\n            score = gbc.score(X_test, y_test)\n            best_params['max_depth'] = i\n            best_params['n_estimators'] = j","577dde59":"best_params","9a323c86":"score","1e60dc2b":"In This part, We try One-Hot Encoding to All Categorical Features including we tranformed before(age, avg_glucose_level, bmi)","9c6ff1f2":"### Step 1. Data Load & EDA","ace411f6":"We will fill null values with mean of bmi, because 50% line is similar with mean.","2ee1b00d":"### Step 4. Modeling & Prediction","4c0ac5fa":"# Stroke Prediction with ensemble\n - Random Forest Classifier : Accuracy - 0.90 \n - Gradient Boosting Classifier : Accuracy - 0.89\n\n**Context**\n\nAccording to the World Health Organization (WHO) stroke is the 2nd leading cause of death globally, responsible for approximately 11% of total deaths. \nThis dataset is used to predict whether a patient is likely to get stroke based on the input parameters like gender, age, various diseases, and smoking status. Each row in the data provides relavant information about the patient.\n\n**Attribute Information**\n\n- 1) id: unique identifier\n- 2) gender: \"Male\", \"Female\" or \"Other\"\n- 3) age: age of the patient\n- 4) hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n- 5) heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease\n- 6) ever_married: \"No\" or \"Yes\"\n- 7) work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n- 8) Residence_type: \"Rural\" or \"Urban\"\n- 9) avg_glucose_level: average glucose level in blood\n- 10) bmi: body mass index\n- 11) smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*\n- 12) stroke: 1 if the patient had a stroke or 0 if not\n\n*Note: \"Unknown\" in smoking_status means that the information is unavailable for this patient\n\n","ea0285a5":"___\nlet's split by 25%, 50%, 75% line","a5150c1b":"mapping\n- columns : ['Unknown','formerly smoked','never smoked','smokes']","d6a2d449":"3. Residence_type","e2f95367":"1. RandomForestClassifier","08082a26":"1. age","593b7b2a":"Filled well","372a2d2a":"### 2-b. Feature Engineering - Continuous Features","6afa8be1":"4. bmi","ab111d12":"---\nIt's sparse table, so we use RandomForest and GradientBoosting Algorithm instead of KNN","4f707d61":"It's imbalanced data, we have to upsample '1' in **training set-y**","9bf5f9ea":"1. age","b43b9f4b":"---\nmapping\n- colums : ['Govt_job','Never_worked', 'Private', 'Self-employed', 'Children']","65bf4e81":"2. ever_married : 0 or 1","b49e3301":"1. gender : 0 or 1","93a7fb2c":"### 2-c. Feature Engineering - Categorical Features","ec9ef55f":"### Step 3. Train, Test set split & Upsampling","b21a46fe":"### 2-a. Feature Engineering - Binary Features","cbd87924":"---\nmapping\n\n- columns : ['bmi_26% to 50%', 'bmi_50% to 75%', 'bmi_over 75%', 'bmi_under 25%']","652961cf":"3. bmi","afa961a5":"### Step 2. Feature Engineering","570d6e40":"---\n- ID : delete\n- Age : transform to Category ( 20s, 30s, 40s ...)\n- Gender : transfrom by One-hot Encoding\n- work_type : transfrom by One-hot Encoding\n- smoking_status : transfrom by One-hot Encoding\n- bmi : transform to Category ( 20-29, 30-39 ...)\n- avg_glucose_level : transform to Category ( 0-50, 51-100 ...)\n- Others : binary","272b766c":"---\n- colums : [age_20 to 39 ,age_40 to 59, age_over 60, age_under 19]","4ccb11ce":"---\nLet's classify 'bmi' the same as 'avg_glucose_level' (distribution %)","f1d6f844":"3. avg_glucose_level ","1e7a30af":"mapping\n- columns : ['gl_26% to 50%', 'gl_50% to 75%', 'gl_over 75%', 'gl_under 25%']","1de2a9d2":"---\n### Contents(index)\n```\nStep 1. Data Load & EDA\nStep 2. Feature Engineering\n     2-a. Binary Features\n     2-b. Continuous Features\n     2-c. Categorical Features\nStep 3. Train \/ Test set Split & Upsampling\nStep 4. Modeling & Prediction\n```","31303889":"2. GradientBoostingClassifier","573cfb42":"2. avg_glucose_level","8106ea6a":"---\n!! But 'bmi' has 101 null values","71bbb2f6":"finally! merge!","01ce8bda":"2. work_type"}}