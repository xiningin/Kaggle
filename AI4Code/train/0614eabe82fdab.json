{"cell_type":{"01dddb4a":"code","128c59a6":"code","47cd2e71":"code","fa402a27":"code","390beda4":"code","0f9992ae":"code","98b92b10":"code","939c1949":"code","7e1aae60":"code","a26f85c9":"markdown","b2cd96cd":"markdown","3dc2c00b":"markdown","d2ab52ac":"markdown","76824870":"markdown","c72e5bc4":"markdown","61bf463b":"markdown","10714c06":"markdown","91bcf901":"markdown","75514d5a":"markdown","51f4fb8a":"markdown","ab68174e":"markdown"},"source":{"01dddb4a":"!pip install ..\/input\/detectron-05\/whls\/pycocotools-2.0.2\/dist\/pycocotools-2.0.2.tar --no-index --find-links ..\/input\/detectron-05\/whls \n!pip install ..\/input\/detectron-05\/whls\/fvcore-0.1.5.post20211019\/fvcore-0.1.5.post20211019 --no-index --find-links ..\/input\/detectron-05\/whls \n!pip install ..\/input\/detectron-05\/whls\/antlr4-python3-runtime-4.8\/antlr4-python3-runtime-4.8 --no-index --find-links ..\/input\/detectron-05\/whls \n!pip install ..\/input\/detectron-05\/whls\/detectron2-0.5\/detectron2 --no-index --find-links ..\/input\/detectron-05\/whls ","128c59a6":"from PIL import Image\nimport cv2\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom tqdm.notebook import tqdm\ntqdm.pandas()\nimport torch\nimport detectron2\nfrom detectron2 import model_zoo\nfrom detectron2.engine import DefaultPredictor\nfrom detectron2.config import get_cfg\nfrom fastcore.all import *\ndetectron2.__version__","47cd2e71":"import pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport glob\nimport shutil\nimport sys\nsys.path.append('..\/input\/tensorflow-great-barrier-reef')\nimport torch\nfrom PIL import Image\nimport ast\ndef show_img(img, bboxes, bbox_format='yolo'):\n    names  = ['starfish']*len(bboxes)\n    labels = [0]*len(bboxes)\n    img    = draw_bboxes(img = img,\n                           bboxes = bboxes, \n                           classes = names,\n                           class_ids = labels,\n                           class_name = True, \n                           colors = colors, \n                           bbox_format = bbox_format,\n                           line_thickness = 2)\n    return Image.fromarray(img).resize((800, 400))\n\ndef plot_one_box(x, img, color=None, label=None, line_thickness=None):\n    # Plots one bounding box on image img\n    tl = line_thickness or round(0.002 * (img.shape[0] + img.shape[1]) \/ 2) + 1  # line\/font thickness\n    color = color or [random.randint(0, 255) for _ in range(3)]\n    c1, c2 = (int(x[0]), int(x[1])), (int(x[2]), int(x[3]))\n    cv2.rectangle(img, c1, c2, color, thickness=tl, lineType=cv2.LINE_AA)\n    if label:\n        tf = max(tl - 1, 1)  # font thickness\n        t_size = cv2.getTextSize(label, 0, fontScale=tl \/ 3, thickness=tf)[0]\n        c2 = c1[0] + t_size[0], c1[1] - t_size[1] - 3\n        cv2.rectangle(img, c1, c2, color, -1, cv2.LINE_AA)  # filled\n        cv2.putText(img, label, (c1[0], c1[1] - 2), 0, tl \/ 3, [225, 255, 255], thickness=tf, lineType=cv2.LINE_AA)\n\ndef draw_bboxes(img, bboxes, classes, class_ids, colors = None, show_classes = None, bbox_format = 'yolo', class_name = False, line_thickness = 2):  \n     \n    image = img.copy()\n    show_classes = classes if show_classes is None else show_classes\n    colors = (0, 255 ,0) if colors is None else colors\n    \n    if bbox_format == 'yolo':\n        \n        for idx in range(len(bboxes)):  \n            \n            bbox  = bboxes[idx]\n            cls   = classes[idx]\n            cls_id = class_ids[idx]\n            color = colors[cls_id] if type(colors) is list else colors\n            \n            if cls in show_classes:\n            \n                x1 = round(float(bbox[0])*image.shape[1])\n                y1 = round(float(bbox[1])*image.shape[0])\n                w  = round(float(bbox[2])*image.shape[1]\/2) #w\/2 \n                h  = round(float(bbox[3])*image.shape[0]\/2)\n\n                voc_bbox = (x1-w, y1-h, x1+w, y1+h)\n                plot_one_box(voc_bbox, \n                             image,\n                             color = color,\n                             label = cls if class_name else str(get_label(cls)),\n                             line_thickness = line_thickness)\n            \n    elif bbox_format == 'coco':\n        \n        for idx in range(len(bboxes)):  \n            \n            bbox  = bboxes[idx]\n            cls   = classes[idx]\n            cls_id = class_ids[idx]\n            color = colors[cls_id] if type(colors) is list else colors\n            \n            if cls in show_classes:            \n                x1 = int(round(bbox[0]))\n                y1 = int(round(bbox[1]))\n                w  = int(round(bbox[2]))\n                h  = int(round(bbox[3]))\n\n                voc_bbox = (x1, y1, x1+w, y1+h)\n                plot_one_box(voc_bbox, \n                             image,\n                             color = color,\n                             label = cls if class_name else str(cls_id),\n                             line_thickness = line_thickness)\n\n    elif bbox_format == 'voc_pascal':\n        \n        for idx in range(len(bboxes)):  \n            \n            bbox  = bboxes[idx]\n            cls   = classes[idx]\n            cls_id = class_ids[idx]\n            color = colors[cls_id] if type(colors) is list else colors\n            \n            if cls in show_classes: \n                x1 = int(round(bbox[0]))\n                y1 = int(round(bbox[1]))\n                x2 = int(round(bbox[2]))\n                y2 = int(round(bbox[3]))\n                voc_bbox = (x1, y1, x2, y2)\n                plot_one_box(voc_bbox, \n                             image,\n                             color = color,\n                             label = cls if class_name else str(cls_id),\n                             line_thickness = line_thickness)\n    else:\n        raise ValueError('wrong bbox format')\n\n    return image\n\ncolors=(255,0,0)","fa402a27":"cfg = get_cfg()\ncfg.merge_from_file(model_zoo.get_config_file(\"COCO-Detection\/faster_rcnn_R_50_FPN_3x.yaml\"))\ncfg.MODEL.WEIGHTS = \"..\/input\/brdetectron2train2\/A_Fold1_v2_R_50_F2S0.354_AP15.415_best.pth\" \ncfg.MODEL.ROI_HEADS.NUM_CLASSES = 1 \ncfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.40\npredictor = DefaultPredictor(cfg)","390beda4":"def format_prediction(bboxes, confs):\n    annot = ''\n    if len(bboxes)>0:\n        for idx in range(len(bboxes)):\n            xmin, ymin, xmax, ymax = bboxes[idx]\n            w=xmax-xmin\n            h=ymax-ymin\n            conf= confs[idx]\n            if conf >0.5:\n                annot += f'{conf} {xmin} {ymin} {w} {h}'\n                annot +=' '\n        annot = annot.strip(' ')\n    return annot\n","0f9992ae":"img3=cv2.imread(\"..\/input\/tensorflow-great-barrier-reef\/train_images\/video_2\/5745.jpg\")\noutputs = predictor(img3)\npred_boxes = outputs['instances'].pred_boxes.tensor\npred_scores =outputs['instances'].scores\npred_boxes = pred_boxes.cpu().numpy()\npred_scores = pred_scores.cpu().numpy()\ndisplay(show_img(img3[:, :, ::-1], pred_boxes, bbox_format='voc_pascal'))","98b92b10":"import greatbarrierreef\nenv = greatbarrierreef.make_env()# initialize the environment\niter_test = env.iter_test()","939c1949":"for idx, (img, pred_df) in enumerate(tqdm(iter_test)):\n    outputs = predictor(img[:,:,::-1])\n    pred_boxes = outputs['instances'].pred_boxes.tensor\n    pred_scores =outputs['instances'].scores\n    pred_boxes = pred_boxes.cpu().numpy()\n    pred_scores = pred_scores.cpu().numpy()\n    annot = format_prediction(pred_boxes,pred_scores)\n    pred_df['annotations'] = annot\n    env.predict(pred_df)\n    if idx<3:\n        display(show_img(img, pred_boxes, bbox_format='voc_pascal'))","7e1aae60":"sub_df = pd.read_csv('submission.csv')\nsub_df.head()","a26f85c9":"# Load Model","b2cd96cd":"from detectron2.utils.visualizer import ColorMode\nfrom detectron2.utils.visualizer import Visualizer\n\nv = Visualizer(img3,scale=0.8)\nout = v.draw_instance_predictions(outputs[\"instances\"].to(\"cpu\"))\nfig, ax = plt.subplots(figsize =(20,50))\nax.imshow(out.get_image()[:, :, ::-1])","3dc2c00b":"# References\n* https:\/\/www.kaggle.com\/slawekbiel\/positive-score-with-detectron-3-3-inference","d2ab52ac":"### Hi kagglers, This is `inference` notebook using `Detectron2`.\n[Barrier Reef Detectron2 [training]](https:\/\/www.kaggle.com\/ammarnassanalhajali\/barrier-reef-detectron2-training) \n### Please if this kernel is useful, <font color='red'>please upvote !!<\/font>","76824870":"# Detectron2 \nDetectron2 is Facebook AI Research's next generation software system that implements state-of-the-art object detection algorithms. It is a ground-up rewrite of the previous version, Detectron, and it originates from maskrcnn-benchmark\n\n","c72e5bc4":"## Other notebooks in this competition \n- [Barrier Reef YOLOv5 [Training]](https:\/\/www.kaggle.com\/ammarnassanalhajali\/barrier-reef-yolov5-training)\n- [Barrier Reef YOLOv5 [Inference]](https:\/\/www.kaggle.com\/ammarnassanalhajali\/barrier-reef-yolov5-inference)","61bf463b":"# Barrier Reef Detectron2 [Inference]","10714c06":"# Functions","91bcf901":"# inference","75514d5a":"# Inference on a image from the validation set","51f4fb8a":"## Install Detectron2 offline","ab68174e":"# importing libraries"}}