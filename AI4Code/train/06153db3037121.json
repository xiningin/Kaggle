{"cell_type":{"c9ab9d94":"code","1228d590":"code","475aa42f":"code","2753a927":"code","9656893e":"code","a04deb78":"code","cdaf189e":"code","f17578b9":"code","215c674c":"code","ccc26a72":"code","df8df515":"code","ec69d753":"code","02b18f87":"code","e76bf75d":"code","3d60a76d":"code","20a971bc":"code","e16566f1":"code","886d1879":"code","e0a06d51":"code","635a65fd":"code","5fa9206f":"code","e786d695":"code","5dba897a":"code","ef55196a":"code","bf232341":"code","60391a50":"code","c0910993":"code","c75599b7":"code","c6ba6783":"code","170edeb5":"code","b5f97464":"code","bf12e8c8":"code","6f0149e2":"code","1401db1e":"code","0a462936":"code","faf39398":"code","fe8f7b55":"code","75d611e9":"code","14db5b40":"markdown","4838b897":"markdown","960f40af":"markdown","5e7078e8":"markdown","320b163f":"markdown","f9426727":"markdown","f952fd19":"markdown"},"source":{"c9ab9d94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport json\nimport numpy as np\nimport pandas as pd\nfrom pandas.io.json import json_normalize\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport lightgbm as lgb\nfrom sklearn.metrics import explained_variance_score, roc_auc_score, precision_recall_curve, roc_curve, average_precision_score,accuracy_score\nfrom sklearn import model_selection, preprocessing, metrics\nfrom sklearn.model_selection import TimeSeriesSplit, GridSearchCV, cross_val_score, cross_validate\n\n##from keras starter\n#from keras.layers import Dense,Dropout\n#from keras.models import Sequential\n#from keras.optimizers import SGD,RMSprop\n#from sklearn.model_selection import train_test_split\n#from sklearn.preprocessing import MinMaxScaler\n#from keras.layers.normalization import BatchNormalization\n#from keras import backend as K\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport gc\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1228d590":"def load_df(csv_path='..\/input\/train.csv', low_memory=False, nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'}, # Important!!\n                     nrows=nrows)\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df","475aa42f":"%%time\n##One time activity if you export flattened files to CSV to load later\n\ntrain = load_df()\ntest = load_df('..\/input\/test.csv')","2753a927":"train.head()","9656893e":"test.head()","a04deb78":"gc.collect()","cdaf189e":"%%time\n##One time activity if you export flattened files to CSV to load later on your local environment\n\ntrain.to_csv(\"train-flattened.csv\", index=False)\ntest.to_csv(\"test-flattened.csv\", index=False)","f17578b9":"%%time\ntrain_flat = pd.read_csv(\"train-flattened.csv\", low_memory=False, nrows=903653)\ntest_flat = pd.read_csv(\"test-flattened.csv\", low_memory=False, nrows=804684)","215c674c":"del train\ndel test\ngc.collect()","ccc26a72":"train_flat.head()","df8df515":"train_flat.describe()","ec69d753":"print(train_flat.info(), test_flat.info())\n\n#TEST - dtypes: bool(1), float64(4), int64(6), object(42)\n#TRAIN - dtypes: bool(1), float64(5), int64(6), object(43) -- extra column is [trafficSource.campaignCode]\n##On the read csv of the flattened file there are more numerics!","02b18f87":"%%time\nobjcol = test_flat.columns\n\n##For some reason [trafficSource.campaignCode] is not present in the TEST dataset.\n##already checked the vlaues using --------- train_flat['trafficSource.campaignCode'].value_counts(), and there is only 1 value with a count of 1 rest is nan!\n\nfor col in objcol:\n    train_u = train_flat[col].unique()\n    train_ucnt = train_flat[col].nunique()\n    test_u = test_flat[col].unique()\n    test_ucnt = test_flat[col].nunique() \n    train_na = train_flat[col].isna().sum()\n    test_na = test_flat[col].isna().sum()\n\n    if train_flat[col].nunique() <= 20:\n        print(col, ' - ', train_flat[col].dtypes , ' - TRAIN - ', round(train_na * 100 \/ 903653,2), '% is NAN', '--- TOTAL NAN', train_na,  '    ====== UNIQUE VALUES TRAIN-   ', train_ucnt, '     ======', train_u)\n        print('                              TEST - ', round(test_na * 100 \/ 804684,2), '% is NAN', '--- TOTAL NAN', test_na,  '    ====== UNIQUE VALUES TEST-   ', test_ucnt, '     ======', test_u, '\\n')\n    else:\n        print(col, ' - ', train_flat[col].dtypes , ' - TRAIN - ', round(train_na * 100 \/ 903653,2), '% is NAN', '--- TOTAL NAN', '    ====== UNIQUE VALUES TRAIN-   ', train_ucnt, '     ====== TOO MANY VALUES TO PRINT!!')\n        print('                              TEST - ', round(test_na * 100 \/ 804684,2), '% is NAN', '--- TOTAL NAN',  '    ====== UNIQUE VALUES TEST-   ', test_ucnt, '     ====== TOO MANY VALUES TO PRINT!!\\n')","e76bf75d":"##Fillna with 0\ntrain_flat['totals.transactionRevenue'].fillna(0,inplace=True)\n\ndef fillNan(cols):\n    for col in cols:\n        train_flat[col].fillna(0,inplace=True)\n        test_flat[col].fillna(0,inplace=True)\n    \ncols = ['trafficSource.adwordsClickInfo.page', 'trafficSource.isTrueDirect', 'totals.newVisits', 'totals.bounces', 'trafficSource.adwordsClickInfo.isVideoAd']\nfillNan(cols);  ","3d60a76d":"##Create new column TransactionRevenueLog and transform Date\n#had previously set it to np.og but changed to np.log1p to handle ,0, values in revenue based on the dicussion here https:\/\/www.kaggle.com\/c\/favorita-grocery-sales-forecasting\/discussion\/47124\ntrain_flat['totals.transactionRevenueLog'] =  np.log1p(train_flat['totals.transactionRevenue'])\n\n##Create a new NAN column to help with teh reporting aspect as '0' shows up on all the plots and makes it relly hard to see the distribution of the actual transactions with values in there.\ntrain_flat['totals.transactionRevenueLogNAN'] =  np.log1p(train_flat['totals.transactionRevenue'])\ntrain_flat['totals.transactionRevenueLogNAN'].replace(0,np.nan,inplace=True)","20a971bc":"train_flat['totals.transactionRevenueLogNAN'].head()","e16566f1":"##transform the date columns\ntrain_flat['datestr'] = pd.to_datetime(train_flat['date'].astype('str'), format='%Y%m%d')\ntest_flat['datestr'] = pd.to_datetime(test_flat['date'].astype('str'), format='%Y%m%d')\n\n##technically the .dt.day, dt.month should work in Kaggle but it does not seem to!\n\ntrain_flat['year'], train_flat['month'],train_flat['day'], train_flat['week']  = train_flat['datestr'].apply(lambda x: x.year).astype('int64'), train_flat['datestr'].apply(lambda x: x.month).astype('int64'), train_flat['datestr'].apply(lambda x: x.day).astype('int64'), train_flat['datestr'].apply(lambda x: x.week).astype('int64')\ntest_flat['year'], test_flat['month'],test_flat['day'], test_flat['week']  = test_flat['datestr'].apply(lambda x: x.year).astype('int64'), test_flat['datestr'].apply(lambda x: x.month).astype('int64'), test_flat['datestr'].apply(lambda x: x.day).astype('int64'), test_flat['datestr'].apply(lambda x: x.week).astype('int64')","886d1879":"train_flat['day'].unique()","e0a06d51":"#The lineplot of the date columns\n\ndef plot_lineplot(train_flat, cols, col_y):\n    for col in cols:\n        fig = plt.figure(figsize=(15,8))\n        sns.set_style(\"whitegrid\")\n        g = sns.lineplot(col, col_y, hue='device.isMobile', data=train_flat)\n        plt.xlabel(col) # Set text for the x axis\n        plt.ylabel('log of transaction revenue')# Set text for y axis\n        fig.show()\n\ncol_y = train_flat['totals.transactionRevenueLogNAN']\ncat_cols = ['datestr','day', 'month', 'year', 'week']   \nplot_lineplot(train_flat, cat_cols, col_y)","635a65fd":"def plot_box_mobile(train_flat, cols, col_y):\n    for col in cols:\n        fig = plt.figure(figsize=(20,8))\n        sns.set_style(\"whitegrid\")\n        g = sns.boxplot(col, col_y, hue='device.isMobile', data=train_flat)\n        plt.xlabel(col) # Set text for the x axis\n        plt.ylabel('log of transaction revenue')# Set text for y axis\n        for item in g.get_xticklabels():\n            item.set_rotation(90)\n        fig.show()\n\ncol_y = train_flat['totals.transactionRevenueLogNAN']\ncat_cols = ['geoNetwork.continent','geoNetwork.subContinent','geoNetwork.metro', 'geoNetwork.city','trafficSource.source', 'trafficSource.medium']  \nplot_box_mobile(train_flat, cat_cols, col_y)","5fa9206f":"# Device as a violin plot\ndef plot_violin(train_flat, cols, col_y):\n    for col in cols:\n        fig = plt.figure(figsize=(22,10))\n        sns.set_style(\"whitegrid\")\n        g = sns.violinplot(col, col_y, data=train_flat)\n        plt.xlabel(col) # Set text for the x axis\n        plt.ylabel('log of transaction revenue')# Set text for y axis\n        for item in g.get_xticklabels():\n            item.set_rotation(90)\n        fig.show()\n\ncol_y = train_flat['totals.transactionRevenueLogNAN']\ncat_cols = ['device.isMobile','device.browser','device.deviceCategory','device.operatingSystem','trafficSource.adwordsClickInfo.isVideoAd']\n#cat_cols = train_flat.select_dtypes(include='object')    \nplot_violin(train_flat, cat_cols, col_y)","e786d695":"#The KDE of the numeric columns\ndef plot_jointplot(train_flat, cols, col_y):\n    for col in cols:\n        fig = plt.figure(figsize=(15,15))\n        sns.set_style(\"whitegrid\")\n        sns.jointplot(col, col_y , data=train_flat)\n        plt.xlabel(col) # Set text for the x axis\n        plt.ylabel('log of transaction revenue')# Set text for y axis\n        fig.show()\n\ncol_y = train_flat['totals.transactionRevenueLogNAN']\ncat_cols = ['totals.hits','visitNumber', 'totals.pageviews', 'totals.bounces', 'totals.newVisits', 'visitStartTime']\n#cat_cols = train_flat.select_dtypes(include='object')    \nplot_jointplot(train_flat, cat_cols, col_y)\n\n##HITS and PAGEVIEWS have very similar distributions! We could probably drop one of them...., VISTNUMBER seems pretty different","5dba897a":"#One more by all counties\ndef plot_box(train_flat, cols, col_y):\n    for col in cols:\n        fig = plt.figure(figsize=(150,25))\n        sns.set_style(\"whitegrid\")\n        g = sns.boxplot(col, col_y, data=train_flat)\n        plt.xlabel(col) # Set text for the x axis\n        plt.ylabel('log of transaction revenue')# Set text for y axis\n        for item in g.get_xticklabels():\n            item.set_rotation(90)\n        fig.show()\n\ncol_y = train_flat['totals.transactionRevenueLog']\ncat_cols = [ 'geoNetwork.region']\n#cat_cols = train_flat.select_dtypes(include='object')    \nplot_box(train_flat, cat_cols, col_y)","ef55196a":"#Step 3 - Cleanup\/Drop those columns\n\n##Column not in test set\ntrain_flat.drop(columns='trafficSource.campaignCode', axis=1, inplace=True) ## Only for train\n\n##Columns with only one value 'not available in demo dataset'\ncol_check = train_flat.loc[:,(train_flat == 'not available in demo dataset').any(axis=0)].columns\n\nfor col in col_check:\n    if train_flat[col].nunique() <= 1:\n        train_flat.drop(columns=col, axis=1, inplace=True)\n        test_flat.drop(columns=col, axis=1, inplace=True)\n        print(col, 'is dropped')\n        \ncol_drop = [\n    #Constant Values\n    'socialEngagementType',\n    \n    ## (including in test on this run. Without these I get a 1.7681 LB score)\n    ##'device.browser', 'device.deviceCategory', 'trafficSource.source', 'geoNetwork.metro',  'geoNetwork.city',\n    'geoNetwork.networkDomain', \n    \n    #Pageviews is too similar to page hits might be removed when training is capped. 'totals.pageviews'\n    ##Too many NANs\n    'trafficSource.adContent',\n    'trafficSource.adwordsClickInfo.adNetworkType',\n    'trafficSource.adwordsClickInfo.gclId',\n    'trafficSource.keyword',\n    'trafficSource.referralPath',\n    'trafficSource.adwordsClickInfo.slot'    \n    ]\n        \nfor col in col_drop:\n    train_flat.drop(columns=col, axis=1, inplace=True)\n    test_flat.drop(columns=col, axis=1, inplace=True)\n    print(col, 'is dropped')\n\nprint('All cleaned up')","bf232341":"# Impute 0 for missing target values\ntrain_flat[\"totals.transactionRevenue\"].fillna(0, inplace=True)\ntrain_flat[\"totals.transactionRevenueLog\"].fillna(0, inplace=True)\ntrain_id = train_flat[\"fullVisitorId\"].values\ntest_id = test_flat[\"fullVisitorId\"].values\n\n# label encode the categorical variables and convert the numerical variables to float\ncat_cols = ['channelGrouping', \n            'device.operatingSystem', \n            #'geoNetwork.continent', \n            'geoNetwork.region', \n            'geoNetwork.metro',\n            'geoNetwork.city',\n            #'device.isMobile', \n            #'device.browser', \n            #'device.deviceCategory', \n            'trafficSource.source', \n            #'trafficSource.medium', \n            'day', \n            'month', \n            #'year', \n            'week', \n            #'totals.bounces', \n            'totals.newVisits'\n           ]\nfor col in cat_cols:\n    print(col)\n    lbl = preprocessing.LabelEncoder()\n    lbl.fit(list(train_flat[col].values.astype('str')) + list(test_flat[col].values.astype('str')))\n    train_flat[col] = lbl.transform(list(train_flat[col].values.astype('str')))\n    test_flat[col] = lbl.transform(list(test_flat[col].values.astype('str')))\n    \n   # train_flat[col] = train_flat[col].astype('category')\n    #test_flat[col] = test_flat[col].astype('category')\n\nnum_cols = ['totals.hits', 'visitNumber', 'visitStartTime', 'totals.pageviews']    \nfor col in num_cols:\n    train_flat[col] = train_flat[col].astype(float)\n    test_flat[col] = test_flat[col].astype(float)\nprint('Done with transformations!')","60391a50":"train_flat.info()","c0910993":"# Split the train dataset into development and valid based on time \ntrain_s1x = train_flat[train_flat['datestr']<='2017-06-30']\ntrain_s2x = train_flat[train_flat['datestr']>'2017-06-30']\ntrain_s1ylog = train_s1x[\"totals.transactionRevenueLog\"].values\ntrain_s2ylog = train_s2x[\"totals.transactionRevenueLog\"].values\n\ntrain_s1x = train_s1x[cat_cols + num_cols] \ntrain_s2x = train_s2x[cat_cols + num_cols] \ntest_X = test_flat[cat_cols + num_cols] \n\ntrain_flat_x = train_flat[cat_cols + num_cols] \ntrain_flat_ylog = train_flat[\"totals.transactionRevenueLog\"].values\n\n","c75599b7":"train_s1x.info()","c6ba6783":"params = {\"early_stopping_rounds\":200, \n           \"eval_metric\" : 'rmse', \n            \"eval_set\" : [(train_s2x, train_s2ylog)],\n           'eval_names': ['valid'],\n           'verbose': 100,\n          'feature_name': num_cols, # that's actually the default\n         'categorical_feature': cat_cols # that's actually the default\n         }","170edeb5":"print('Start training...')\n# train\ngbm = lgb.LGBMRegressor(n_estimators=4000,                                         \n                        learning_rate=0.017,            \n                        num_leaves=68,            \n                        metric= 'rmse',             \n                        #max_bin=400,            \n                        bagging_fraction=.8, #subsample            \n                        feature_fraction=.8, #colsample_bytree            \n                        bagging_frequency=10,            \n                        bagging_seed=2018,            \n                        max_depth=14,            \n                        #reg_alpha=.2,            \n                        #reg_lambda=.5,            \n                        min_split_gain=.1,            \n                        min_child_weight=.5,            \n                        min_child_samples=300,            \n                        silent=-1)\nbst = gbm.fit(train_s1x, train_s1ylog, **params)\nprint('done')","b5f97464":"gc.collect()","bf12e8c8":"lgb.plot_importance(gbm,max_num_features=30)","6f0149e2":"#predictions = bst.predict(test_X, num_iteration=bst.best_iteration)\npredictions = bst.predict(test_X)","1401db1e":"submission = pd.DataFrame({ 'fullVisitorId': test_id,'PredictedLogRevenue': predictions })\nsubmission = submission.groupby('fullVisitorId')['PredictedLogRevenue'].sum().reset_index()\nsubmission.to_csv(\"GA_submission_LGBM_20180923_log1plimitedfeaturescatv2.csv\", index=False)","0a462936":"#def rmse(y_true, y_pred):\n    #return K.sqrt(K.mean(K.square(y_pred - y_true), axis=-1))\n\n#scalarX, scalarY = MinMaxScaler(), MinMaxScaler()\n#scalarX.fit(train_s1x)\n\n#X = scalarX.transform(train_s1x)\n\n\n#model = Sequential()\n#model.add(Dense(24,input_dim=10,activation='relu'))\n#model.add(Dense(12,input_dim=10,activation='relu'))\n#model.add(Dense(6))\n#model.add(Dense(1))\n#model.compile(optimizer='adam',loss='mse',metrics=[rmse])\n\n#model.fit(X, train_s1ylog, epochs=5, verbose=0)","faf39398":"#history = model.fit(train_s1x, train_s1ylog,validation_data=(train_s2x, train_s2ylog), epochs=5,batch_size=100, verbose=2)","fe8f7b55":"#plt.plot(history.history['rmse'])\n#plt.show()","75d611e9":"#preds = model.predict(test_X)","14db5b40":"**Step 1 -  Handle NANs and missing values** \n\nManage NANs for columns totals.transactionRevenue, trafficSource.isTrueDirect, totals.newVisits, totals.bounces, trafficSource.adwordsClickInfo.isVideoAd (not sure abiout this, NAN may be = TRUE) , trafficSource.isTrueDirect, etc.","4838b897":"**Step 2 - Visualization** \n\nLOG of the transaction revenue sums by continent, subcontinent, & operatingSystem, with a hue of deviceCategory.\n\nUpon analysis, \n--'trafficSource.adwordsClickInfo.isVideoAd' has no impact on transaction values neither does device.deviceCategory even though its varied.\n--'device.operatingSystem' seems imbalance not to mention additional Operating systems like 'Tizen' 'Playstation Vita' 'OS\/2', different values between the test and train.\n--Country, Subcontinent and continent seeme to give a better picture of revenue distribution.","960f40af":"**Dropping and Cleaning columns**\n\nLooks like there are a quite a few columns to drop and transform. Basically anything with only \"1\" value 'not available in demo dataset'. Important, some columns contain this text and have many other values in other rows so be careful not to drop just any column with this value!\n\n1. **Step 1** - Manage NANs for columns trafficSource.isTrueDirect, totals.newVisits, totals.bounces, trafficSource.adwordsClickInfo.isVideoAd (not sure abiout this, NAN may = TRUE) , trafficSource.isTrueDirect, etc.\n2. **Step 2** - Visualization, lets look at the distributions and spreads of the various categories in relation to the **LOG(totals.transactionRevenue)**.\n3. **Step 3** - Delete the columns from both TEST and Train if that is the only value available is 'not available in demo dataset', Remove extra column from tain set 'trafficSource.campaignCode'. Drop columns not useful with too many categories or too many NANs. Word of caution ---- trafficSource.isTrueDirect have 69% NAN however the other value is TRUE, so I would replace NAN with FALSE. A couple of columns like that!","5e7078e8":"**Data Prep**\n\nKudos to [Juli\u00e1n Peller](https:\/\/www.kaggle.com\/julian3833) for his quick start [kernel](https:\/\/www.kaggle.com\/julian3833\/1-quick-start-read-csv-and-flatten-json-fields\/notebook) to flatten json data!!","320b163f":"**KERAS IMPLEMENTATION**\n\nCredit to tutorial [here](https:\/\/machinelearningmastery.com\/regression-tutorial-keras-deep-learning-library-python\/).\nand [here](https:\/\/machinelearningmastery.com\/how-to-make-classification-and-regression-predictions-for-deep-learning-models-in-keras\/)","f9426727":"**This section covers the ENCODING and PREDICTING for LIGHTGBM**\n\nMany thanks to [SKR's](https:\/\/www.kaggle.com\/sudalairajkumar) [kernel](https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-baseline-ga-customer-revenue) for the LabelEncoding code!!","f952fd19":"**CHECKING the DATA**\n\nIn the below section I created a simple priont procedure to see the differences between TRAIN and TEST, as this is a very categorical dense dataset.\n\nFYI: you can change 'objcol' to check only the object colums or exclude='object' the rest to get a less scattered picture."}}