{"cell_type":{"8804df27":"code","a0c4de5d":"code","c733fe7c":"code","0ed4081c":"code","ea8e2077":"code","732e30ad":"code","b79233ca":"code","63cc2b47":"code","4c26e28b":"code","0e298075":"code","5f897f8a":"code","3a2f961b":"code","695d7408":"code","761a9d7e":"code","e7b1236f":"code","626e74c0":"code","d8104bd0":"code","4dddc6b5":"code","a6e466b0":"code","b3c99d6f":"code","bdfe9c81":"code","1b5d83ec":"code","955e9480":"code","ea975cad":"code","1b571057":"code","6347e6a0":"code","178c410f":"code","45f75fca":"code","61cfad25":"code","d228dd75":"code","455c55b7":"code","31e3f638":"code","10058b31":"code","bf98ed2e":"code","302293ee":"code","83b9c5c2":"code","6134c0d5":"code","fc1eabe0":"code","c0879ef9":"code","dfc151a5":"code","4b778b72":"code","c23af55c":"code","2228182f":"code","0d55deaa":"code","97cf88f1":"code","b80c7fa9":"code","a47e1cc1":"code","b934966e":"code","9b4e2c1c":"code","22c84885":"code","1fbb5926":"code","7a3e3621":"code","af797054":"code","306a442c":"code","3c28576a":"code","9baea7bc":"code","21a4c97b":"code","bdf7ac1e":"code","d01120e1":"code","eda856e7":"code","06eb6bce":"code","fd5e4b1b":"code","b1a5932d":"code","64aa4523":"code","6fd0d22b":"code","54040e6b":"markdown"},"source":{"8804df27":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a0c4de5d":"import matplotlib.pyplot as plt\nimport seaborn as sns","c733fe7c":"df=pd.read_csv('\/kaggle\/input\/diamonds\/diamonds.csv')","0ed4081c":"df.head()","ea8e2077":"df=df.drop(['Unnamed: 0'],axis=1)","732e30ad":"df.isnull().sum()","b79233ca":"df.shape","63cc2b47":"df.info()","4c26e28b":"print('X-Values with zero value ',df['x'].value_counts()[0])\nprint('Y-Values with zero value ',df['y'].value_counts()[0])\nprint('Z-Values with zero value ',df['z'].value_counts()[0])","0e298075":"df.loc[df['x']==0]","5f897f8a":"df[['x','y','z']]=df[['x','y','z']].replace(0,np.NaN)","3a2f961b":"df.isnull().sum()","695d7408":"df['x'].describe()","761a9d7e":"df.plot(kind='box',layout=(3,3),subplots=True,figsize=(15,10),title=['Carat','Depth','Table','Price','X','Y','Z'],)","e7b1236f":"cat=list(df.select_dtypes(include='object').columns)\nnumeric=list(df.select_dtypes(exclude='object').columns)","626e74c0":"def iqr(p):\n    a=[]\n    q1=df[p].quantile(0.25)\n    q3=df[p].quantile(0.75)\n    iqr=q3-q1\n    ulim=q3+(1.5*iqr)\n    llim=q1-(1.5*iqr)   \n    for i in df[p]:\n        if (i>ulim) or (i<llim):\n            i=np.NaN\n        else:\n            i=i\n        a.append(i)\n    return (a)","d8104bd0":"for w in numeric:\n    df[w]=iqr(w)   ","4dddc6b5":"df.isna().sum()","a6e466b0":"df.plot(kind='box',layout=(3,3),subplots=True,figsize=(15,10),title=['Carat','Depth','Table','Price','X','Y','Z'],)","b3c99d6f":"df.describe()","bdfe9c81":"cat=df.select_dtypes(include='object')\nnumeric=df.select_dtypes(exclude='object')","1b5d83ec":"for i in numeric:\n    df[i]=df[i].fillna(df[i].mean())","955e9480":"df.isna().sum()","ea975cad":"sns.set()\nf,ax=plt.subplots(1,3,figsize=(15,5))\nsns.countplot(df['color'],ax=ax[0])\nsns.countplot(df['clarity'],ax=ax[1])\nsns.countplot(df['cut'],ax=ax[2])","1b571057":"from sklearn.preprocessing import LabelEncoder","6347e6a0":"le=LabelEncoder()","178c410f":"cat_01=cat.apply(le.fit_transform)","45f75fca":"df=df.drop(cat,axis=1)","61cfad25":"df=pd.concat([df,cat_01],axis=1)","d228dd75":"plt.figure(figsize=(10,7))\nsns.heatmap(df.corr(),annot=True,cmap='YlGnBu')","455c55b7":"import statsmodels.api as sm","31e3f638":"X=df.drop('price',axis=1)\ny=df['price']","10058b31":"y.shape","bf98ed2e":"xc=sm.add_constant(X)","302293ee":"lin_reg=sm.OLS(y,xc).fit()","83b9c5c2":"lin_reg.summary()","6134c0d5":"from statsmodels.stats.outliers_influence import variance_inflation_factor","fc1eabe0":"vif=[variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\npd.DataFrame({'vif':vif},index=X.columns)","c0879ef9":"X=df.drop(['price','depth'],axis=1)\ny=df['price']\nxc=sm.add_constant(X)\nlin_reg=sm.OLS(y,xc).fit()\nlin_reg.summary()\n","dfc151a5":"vif=[variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\npd.DataFrame({'vif':vif},index=X.columns)","4b778b72":"from sklearn.model_selection import train_test_split","c23af55c":"X=df.drop(['price'],axis=1)\ny=df['price']","2228182f":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.33,random_state=42)","0d55deaa":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score","97cf88f1":"lr=LinearRegression()","b80c7fa9":"lr.fit(X_train,y_train)","a47e1cc1":"y_pred=lr.predict(X_test)","b934966e":"r2_score(y_test,y_pred)","9b4e2c1c":"from sklearn.ensemble import RandomForestRegressor\nrfr=RandomForestRegressor()","22c84885":"rfr.fit(X_train,y_train)","1fbb5926":"y_pred=rfr.predict(X_test)","7a3e3621":"r2_score(y_test,y_pred)","af797054":"from sklearn.model_selection import RandomizedSearchCV","306a442c":"n_estimators=np.arange(1,200,2)\nmax_depth=np.arange(10,100,10)\nmin_samples_split=[2,3,4,5,6,7,8,9,10]\nmin_samples_leaf=[2,3,4,5,6,7,8,9,10]\nrandom_state=np.arange(1,100,1)\nparam_grid={'n_estimators':n_estimators,'max_depth':max_depth,'min_samples_leaf':min_samples_leaf,'min_samples_split':min_samples_split,\n            'random_state':random_state}","3c28576a":"rfr_gs=RandomizedSearchCV(estimator=rfr,param_distributions=param_grid,scoring='r2').fit(X_train,y_train)","9baea7bc":"rfr_gs.best_estimator_","21a4c97b":"rfr_gs.best_params_","bdf7ac1e":"y_pred=rfr_gs.predict(X_test)","d01120e1":"r2_score(y_test,y_pred)","eda856e7":"from sklearn.feature_selection import RFE","06eb6bce":"rfe=RFE(lr,6)","fd5e4b1b":"rfe.fit(X_train,y_train)","b1a5932d":"rfe.ranking_","64aa4523":"pd.DataFrame(list(zip(X.columns,rfe.ranking_)),columns=['X','Ranking'])","6fd0d22b":"#no of features\nnof_list=np.arange(1,10)            \nhigh_score=0\n#Variable to store the optimum features\nnof=0           \nscore_list =[]\nfor n in range(len(nof_list)):\n    X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state = 0)\n    model = LinearRegression()\n    rfe = RFE(model,nof_list[n])\n    X_train_rfe = rfe.fit_transform(X_train,y_train)\n    X_test_rfe = rfe.transform(X_test)\n    model.fit(X_train_rfe,y_train)\n    score = model.score(X_test_rfe,y_test)\n    score_list.append(score)\n    if(score>high_score):\n        high_score = score\n        nof = nof_list[n]\nprint(\"Optimum number of features: %d\" %nof)\nprint(\"Score with %d features: %f\" % (nof, high_score))","54040e6b":"# Statistical Method"}}