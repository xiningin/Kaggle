{"cell_type":{"fef87c09":"code","c5c8686b":"code","b49b9caa":"code","62bbbaed":"code","1b0ab65a":"code","d0fef088":"code","0e70f59a":"code","61f8732c":"markdown","38fb3533":"markdown","ec1789cd":"markdown","744afc4d":"markdown","300048f5":"markdown","c9b019c7":"markdown","6c62e7e2":"markdown","0ac3cfb8":"markdown","70540307":"markdown","9244f99a":"markdown","91ce5bc4":"markdown"},"source":{"fef87c09":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport calendar\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt   \nfrom matplotlib.pyplot import pie\nfrom matplotlib import gridspec\nimport matplotlib.ticker as mtick\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c5c8686b":"# Ethereum Data\n\nCSV = '\/kaggle\/input\/ethereum-data\/ETH-USD.csv'\n\ndf = pd.read_csv(CSV)\ndf = df.drop(columns=['Adj Close']) # identical with column 'Close'\ndf['Date'] = pd.to_datetime(df['Date'])\n\ndf['Year'] = df['Date'].dt.year\ndf['Month_Num'] = df['Date'].dt.month\ndf['Month'] = df['Month_Num'].apply(lambda x: calendar.month_abbr[x])\n\ndf['YYYYMM'] = pd.to_datetime(df['Date'], format='%Y%m', errors='coerce')\ndf['YYYYMM'] = pd.to_datetime(df['Date']).dt.strftime('%Y%m')\n\ndf['Close_log'] = np.log(df['Close'])\n\ndf['Return'] = df['Close'] \/ df['Open'][0] -1\n","b49b9caa":"df_hm = pd.pivot_table(df, values=\"Volume\", index=['Year', 'Month_Num'], aggfunc=np.sum)\ndf_hm.reset_index(level=0, inplace=True)\ndf_hm.reset_index(level=0, inplace=True)\ndf_hm['Date'] = pd.to_datetime((df_hm.Year*100+df_hm.Month_Num).apply(str),format='%Y%m').dt.strftime('%Y%m')\ndf_hm['Volume_log'] = np.log(df_hm['Volume'])\n\nfig = plt.figure(figsize=(12,10))\n\nfig.tight_layout() \nfig.subplots_adjust(hspace=.4)\n\nfig.patch.set_facecolor('#F3F7FF')\nfig.patch.set_alpha(1.0)\n\nax1 = plt.subplot(2,1,1)\nax1 = sns.lineplot(data=df, x=\"Date\", y=\"Close\", color=\"dodgerblue\")\n\nax1.patch.set_facecolor('#F3F7FF')\nax1.patch.set_alpha(1.0)\n\nax1 = plt.gca().spines['right'].set_visible(False)\nax1 = plt.gca().spines['top'].set_visible(False)\nax1 = plt.gca().spines['left'].set_visible(True)\nax1 = plt.gca().spines['bottom'].set_visible(True)\n\nax1 = plt.ylabel(\"Close Price (USD)\")\n\nax1 = plt.axhline(0, 8, 0, color='black', linestyle='--', linewidth='1')\n\n\n\nax1 = plt.title('Unit: Close Price USD per 1 Ethereum\\n2015-2021', fontsize = 9, loc='right')\nax1 = plt.title('Ethereum Price',\n          fontsize = 16,\n          fontweight = 'heavy',\n          loc='center', \n          pad=30); #semi-colon for hide text before graph output\n\nax2 = plt.subplot(2,1,2)\nax2 = sns.barplot(x=\"Date\", y=\"Volume\", data=df_hm, color=\"dodgerblue\")\n\nax2.patch.set_facecolor('#F3F7FF')\nax2.patch.set_alpha(1.0)\n\nax2 = plt.gca().spines['right'].set_visible(False)\nax2 = plt.gca().spines['top'].set_visible(False)\nax2 = plt.gca().spines['left'].set_visible(True)\nax2 = plt.gca().spines['bottom'].set_visible(True)\nax2 = plt.xticks([])\n\nax2 = plt.title('Unit: Ethereum Transaction Volumes\\n2015-2021', fontsize = 9, loc='right')\nax2 = plt.title('Ethereum Volumes',\n          fontsize = 16,\n          fontweight = 'heavy',\n          loc='center', \n          pad=30); #semi-colon for hide text before graph output","62bbbaed":"fig = plt.figure(figsize=(12,10))\n\nfig.tight_layout() \nfig.subplots_adjust(hspace=.4)\n\nfig.patch.set_facecolor('#F3F7FF')\nfig.patch.set_alpha(1.0)\n\n\nax1 = plt.subplot(2,1,1)\nax1 = sns.lineplot(data=df, x=\"Date\", y=\"Close_log\", color=\"dodgerblue\")\nax1.patch.set_facecolor('#F3F7FF')\nax1.patch.set_alpha(1.0)\n\nax1 = plt.gca().spines['right'].set_visible(False)\nax1 = plt.gca().spines['top'].set_visible(False)\nax1 = plt.gca().spines['left'].set_visible(True)\nax1 = plt.gca().spines['bottom'].set_visible(True)\n\nax1 = plt.ylabel(\"Close Price (Log)\")\n\nax1 = plt.title('Unit: Close Price USD per 1 Ethereum\\n(Natural logarithm)\\n2015-2021', fontsize = 9, loc='right')\nax1 = plt.title('Ethereum Price (Log)',\n          fontsize = 16,\n          fontweight = 'heavy',\n          loc='center', \n          pad=30); #semi-colon for hide text before graph output\n\nax2 = plt.subplot(2,1,2)\nax2 = sns.barplot(x=\"Date\", y=\"Volume_log\", data=df_hm, color=\"dodgerblue\")\nax2.patch.set_facecolor('#F3F7FF')\nax2.patch.set_alpha(1.0)\n\nax2 = plt.gca().spines['right'].set_visible(False)\nax2 = plt.gca().spines['top'].set_visible(False)\nax2 = plt.gca().spines['left'].set_visible(True)\nax2 = plt.gca().spines['bottom'].set_visible(True)\nax2 = plt.xticks([])\n\nax2 = plt.ylabel(\"Volomes (Log)\")\n\nax2 = plt.title('Unit: Ethereum Transaction\\n(Natural logarithm)\\n2015-2021', fontsize = 9, loc='right')\nax2 = plt.title('Ethereum Volumes (Log)',\n          fontsize = 16,\n          fontweight = 'heavy',\n          loc='center', \n          pad=30); #semi-colon for hide text before graph output","1b0ab65a":"fig = plt.figure(figsize=(12,5))\n\nfig.patch.set_facecolor('#F3F7FF')\nfig.patch.set_alpha(1.0)\n\n\nax1 = sns.lineplot(data=df, x=\"Date\", y=\"Return\", color=\"dodgerblue\")\n\nvals = ax1.get_yticks()\nax1.set_yticklabels(['{:,.0%}'.format(x) for x in vals])\n\nax1.patch.set_facecolor('#F3F7FF')\nax1.patch.set_alpha(1.0)\n\n\nax1 = plt.gca().spines['right'].set_visible(False)\nax1 = plt.gca().spines['top'].set_visible(False)\nax1 = plt.gca().spines['left'].set_visible(True)\nax1 = plt.gca().spines['bottom'].set_visible(True)\n\nax1 = plt.ylabel(\"Return(%)\")\n\n\nax1 = plt.axhline(0, 8, 0, color='black', linestyle='--', linewidth='1')\n\nax1 = plt.title('Unit: Accumlated Return%\\n2015-2021', fontsize = 9, loc='right')\nax1 = plt.title('Ethereum Return%',\n          fontsize = 16,\n          fontweight = 'heavy',\n          loc='center', \n          pad=30); #semi-colon for hide text before graph output","d0fef088":"df2016 = df[df['Year']==2016]\ndf2016 = df2016.drop(columns=['Return'])\ndf2016.reset_index(level=0, inplace=True, drop = True)\ndf2016['Return'] = df2016['Close'] \/ df2016['Open'][0] -1\ndf2016 = df2016.drop([59]) # leap year\ndf2016.reset_index(level=0, inplace=True, drop = True)\ndf2016.reset_index(level=0, inplace=True, drop = False)\ndf2016.rename(columns = {'index' : 'Days365'}, inplace = True)\ndf2016['Days365'] = df2016['Days365']+1\ndf2016['Hue'] = 2016\ndf2016 = df2016[['Days365','Return','Hue']] \n\ndf2017 = df[df['Year']==2017]\ndf2017 = df2017.drop(columns=['Return'])\ndf2017.reset_index(level=0, inplace=True, drop = True)\ndf2017['Return'] = df2017['Close'] \/ df2017['Open'][0] -1\ndf2017.reset_index(level=0, inplace=True, drop = False)\ndf2017.rename(columns = {'index' : 'Days365'}, inplace = True)\ndf2017['Days365'] = df2017['Days365']+1\ndf2017['Hue'] = 2017\ndf2017 = df2017[['Days365','Return','Hue']] \n\ndf2018 = df[df['Year']==2018]\ndf2018 = df2018.drop(columns=['Return'])\ndf2018.reset_index(level=0, inplace=True, drop = True)\ndf2018['Return'] = df2018['Close'] \/ df2018['Open'][0] -1\ndf2018.reset_index(level=0, inplace=True, drop = False)\ndf2018.rename(columns = {'index' : 'Days365'}, inplace = True)\ndf2018['Days365'] = df2018['Days365']+1\ndf2018['Hue'] = 2018\ndf2018 = df2018[['Days365','Return','Hue']] \n\ndf2019 = df[df['Year']==2019]\ndf2019 = df2019.drop(columns=['Return'])\ndf2019.reset_index(level=0, inplace=True, drop = True)\ndf2019['Return'] = df2019['Close'] \/ df2019['Open'][0] -1\ndf2019.reset_index(level=0, inplace=True, drop = False)\ndf2019.rename(columns = {'index' : 'Days365'}, inplace = True)\ndf2019['Days365'] = df2019['Days365']+1\ndf2019['Hue'] = 2019\ndf2019 = df2019[['Days365','Return','Hue']] \n\ndf2020 = df[df['Year']==2020]\ndf2020 = df2020.drop(columns=['Return'])\ndf2020.reset_index(level=0, inplace=True, drop = True)\ndf2020['Return'] = df2020['Close'] \/ df2020['Open'][0] -1\ndf2020 = df2020.drop([59]) # leap year\ndf2020.reset_index(level=0, inplace=True, drop = True)\ndf2020.reset_index(level=0, inplace=True, drop = False)\ndf2020.rename(columns = {'index' : 'Days365'}, inplace = True)\ndf2020['Days365'] = df2020['Days365']+1\ndf2020['Hue'] = 2020\ndf2020 = df2020[['Days365','Return','Hue']] \n\ndf2021 = df[df['Year']==2021]\ndf2021 = df2021.drop(columns=['Return'])\ndf2021.reset_index(level=0, inplace=True, drop = True)\ndf2021['Return'] = df2021['Close'] \/ df2021['Open'][0] -1\ndf2021.reset_index(level=0, inplace=True, drop = False)\ndf2021.rename(columns = {'index' : 'Days365'}, inplace = True)\ndf2021['Days365'] = df2021['Days365']+1\ndf2021['Hue'] = 2021\ndf2021 = df2021[['Days365','Return','Hue']] \n\ndf_RTN = pd.concat([df2016,df2017,df2018,df2019,df2020,df2021])\n\nfig = plt.figure(figsize=(12,5))\n\nfig.patch.set_facecolor('#F3F7FF')\nfig.patch.set_alpha(1.0)\n\nax1 = sns.lineplot(data=df_RTN, x=\"Days365\", y=\"Return\", hue=\"Hue\", palette=\"Blues\")\nvals = ax1.get_yticks()\nax1.set_yticklabels(['{:,.0%}'.format(x) for x in vals])\n\nax1.patch.set_facecolor('#F3F7FF')\nax1.patch.set_alpha(1.0)\n\nax1 = plt.gca().spines['right'].set_visible(False)\nax1 = plt.gca().spines['top'].set_visible(False)\nax1 = plt.gca().spines['left'].set_visible(True)\nax1 = plt.gca().spines['bottom'].set_visible(True)\n\nax1 = plt.ylabel(\"Return(%)\")\n\nax1 = plt.axhline(0, 8, 0, color='black', linestyle='--', linewidth='1')\n\nax1 = plt.title('Unit: Return%\\n2015-2021', fontsize = 9, loc='right')\nax1 = plt.title('Ethereum Annual Return% from Jan 1st',\n          fontsize = 16,\n          fontweight = 'heavy',\n          loc='center', \n          pad=30); #semi-colon for hide text before graph output","0e70f59a":"df_dist1 = df[:]\ndf_dist1['Join Date'] = (df_dist1['Date'] - pd.DateOffset(months=3))\n\ndf_dist2 = df[:]\ndf_dist2.rename(columns = {\"Date\": \"Join Date\", \"Close\": \"Close 3M\"}, inplace=True)\n\ndf_dist = pd.merge(left=df_dist1, right=df_dist2, how='left', on=['Join Date'], sort=False)\ndf_dist['3 Months Return'] = df_dist['Close'] \/ df_dist['Close 3M'] -1 \ndf_dist.rename(columns = {\"Year_x\": \"Year\"}, inplace=True)\n\nfig = plt.figure(figsize=(12,8))\n\nfig.patch.set_facecolor('#F3F7FF')\nfig.patch.set_alpha(1.0)\n\nax1 = sns.boxplot(data=df_dist, x=\"Year\", y=\"3 Months Return\", palette=\"Blues\")\n\nvals = ax1.get_yticks()\nax1.set_yticklabels(['{:,.0%}'.format(x) for x in vals])\n\nax1.patch.set_facecolor('#F3F7FF')\nax1.patch.set_alpha(1.0)\n\n\nax1 = plt.gca().spines['right'].set_visible(False)\nax1 = plt.gca().spines['top'].set_visible(False)\nax1 = plt.gca().spines['left'].set_visible(True)\nax1 = plt.gca().spines['bottom'].set_visible(True)\n\n\nax1 = plt.axhline(0, 8, 0, color='black', linestyle='--', linewidth='1')\n\n\nax1 = plt.title('Unit: Return%\\n2014-2021', fontsize = 9, loc='right')\nax1 = plt.title('Ethereum 3 Months Return%',\n          fontsize = 16,\n          fontweight = 'heavy',\n          loc='center', \n          pad=30); #semi-colon for hide text before graph output","61f8732c":"\u6bce\u5e741\u67081\u65e5\u306bDOGE COIN\u3092\u8cfc\u5165\u3057\u305f\u5834\u5408\u3001\u30ea\u30bf\u30fc\u30f3\u306f\u3069\u3046\u306a\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\n4\u5e74\u9593\u306f\u3042\u307e\u308a\u697d\u3057\u304f\u306a\u304b\u3063\u305f\u3067\u3057\u3087\u3046\u306d\u3002\n\n**2021\u5e74\u306e\u30ea\u30bf\u30fc\u30f3\u306f\u826f\u304b\u3063\u305f\u304c\u30012017\u5e74\u306f\u30a4\u30fc\u30b5\u30ea\u30a2\u30e0\u306b\u3068\u3063\u3066\u6700\u9ad8\u306e\u5e74\u3067\u3057\u305f**\u3002","38fb3533":"\u30a4\u30fc\u30b5\u30ea\u30a2\u30e0\u306e\u4fa1\u683c\u3068\u6570\u91cf\u306e\u81ea\u7136\u5bfe\u6570\u3092\u3068\u308b\u3053\u3068\u3067\u3001\u3088\u308a\u8a73\u7d30\u306b\u30c8\u30ec\u30f3\u30c9\u3092\u5206\u6790\u3057\u307e\u3057\u305f\u3002\n\n\u4eca\u56de\u306f\u3001\u524d\u56de\u306e\u30b0\u30e9\u30d5\u3088\u308a2017\u5e74\u30682021\u5e74\u306b\u5927\u5e45\u306a\u4fa1\u683c\u4e0a\u6607\u304c\u3042\u3063\u305f\u3053\u3068\u304c\u78ba\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002**2016\u5e74\u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u3067\u3059**\u3002\n\n\u53d6\u5f15\u91cf\u306f2015\u5e74\u304b\u3089\u7740\u5b9f\u306b\u5897\u52a0\u3057\u3066\u3044\u307e\u3059\u3002","ec1789cd":"2018\u5e74\u30682021\u5e74\u306b**Dogecoin\u306e\u4fa1\u683c\u3068\u91cf\u304c\u5927\u304d\u304f\u4e0a\u6607\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002**","744afc4d":"\u3082\u3057\u3042\u306a\u305f\u304c\u6700\u521d\u304b\u3089\u30a4\u30fc\u30b5\u30ea\u30a2\u30e0\u3092\u6240\u6709\u3057\u3066\u3044\u305f\u3089\u3001**800\u500d\u306e\u30ea\u30bf\u30fc\u30f3\u3092\u5f97\u3089\u308c\u305f\u3067\u3057\u3087\u3046\u3002**\n\n**\u4e00\u756a\u9ad8\u3044\u3068\u3053\u308d\u3067\u58f2\u3063\u3066\u3044\u305f\u3089\u30011400\u500d\u306b\u306a\u3063\u3066\u3044\u305f\u3060\u308d\u3046\u3002**","300048f5":"\u3053\u3061\u3089\u306e\u6587\u7ae0\u306f\u3001YoungJin Choi\u6c0f\u304c\u66f8\u3044\u305f\u6587\u7ae0\u3092\u65e5\u672c\u8a9e\u7ffb\u8a33\u3057\u307e\u3057\u305f\u3002\nhttps:\/\/www.kaggle.com\/hidelloon\/ethereum-trend","c9b019c7":"<br>\n<br>\n<Center><img src=\"https:\/\/ethereum.org\/static\/28214bb68eb5445dcb063a72535bc90c\/117a6\/hero.png\"><\/Center>","6c62e7e2":"\u3053\u308c\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u65e5\u4ed8\u3092\u9078\u3093\u30673\u30f6\u6708\u9593\u6295\u8cc7\u3092\u884c\u3046\u3053\u3068\u3092\u60f3\u5b9a\u3057\u305f\u30ea\u30bf\u30fc\u30f3\u30dc\u30c3\u30af\u30b9\u306e\u30b0\u30e9\u30d5\u3067\u3059\u3002\n\n\u3053\u306e\u30b0\u30e9\u30d5\u304b\u30893\u3064\u306e\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n1. 2017\u5e74\u306f\u30ea\u30bf\u30fc\u30f3\u306e\u7570\u5e38\u5024\u304c\u591a\u304f\u3001\u4e2d\u592e\u5024\u3082\u6700\u3082\u9ad8\u3044\u3002\n2. \u5916\u308c\u5024\u306e\u89b3\u70b9\u304b\u3089\u898b\u308b\u3068\u30012016\u5e74\u306f\u30a4\u30fc\u30b5\u30ea\u30a2\u30e0\u306b\u3068\u3063\u3066\u3082\u826f\u3044\u5e74\u3067\u3042\u3063\u305f\u3002\n3. 2021\u5e74\u306f\u4e2d\u592e\u5024\u304c2\u756a\u76ee\u306b\u9ad8\u3044\u3002","0ac3cfb8":"# \u30c8\u30ec\u30f3\u30c9","70540307":"# \u306f\u3058\u3081\u306b\n\n[Ethereum](https:\/\/ethereum.org\/en\/) \u306f\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u306b\u6b21\u3050\u6697\u53f7\u901a\u8ca8\u3067\u3001\u6642\u4fa1\u7dcf\u984d\u3067\u306f\u6700\u5927\u306e\u6697\u53f7\u901a\u8ca8\u3067\u3059\u3002\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u306e\u5f8c\u306b\u767b\u5834\u3057\u305f\u30a4\u30fc\u30b5\u30ea\u30a2\u30e0\u306f\u3001\u30d6\u30ed\u30c3\u30af\u30c1\u30a7\u30fc\u30f3\u6280\u8853\u3092\u3055\u3089\u306b\u6d3b\u7528\u3059\u308b\u3053\u3068\u3067\u9ad8\u901f\u5316\u3092\u5b9f\u73fe\u3057\u3001NFTs\u6280\u8853\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002Doge\u30b3\u30a4\u30f3\u306b\u3064\u3044\u3066\u306f\u3001\u524d\u56de\u306e\u30b3\u30fc\u30c9\u3068\u5171\u901a\u3059\u308b\u90e8\u5206\u304c\u591a\u3044\u306e\u3067\u3001\u307e\u305a\u306f\u7c21\u5358\u306a\u4f5c\u696d\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002 [my previous code about Doge coin](https:\/\/www.kaggle.com\/hidelloon\/dogecoin-and-dogefather-elon-musk)\n\n\u7d20\u6674\u3089\u3057\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3001\u5171\u6709\u3057\u3066\u304f\u308c\u3066\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002 [@Arpit Verma](https:\/\/www.kaggle.com\/varpit94) ","9244f99a":"# \u524d\u51e6\u7406","91ce5bc4":"\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u306e\u90e8\u5206\u306f\u7279\u306b\u30b3\u30e1\u30f3\u30c8\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002"}}