{"cell_type":{"414a587f":"code","e2de394e":"code","aa12b46e":"code","f09ef642":"code","966d7fe1":"code","65539062":"code","3c95eb74":"code","4fffc952":"code","9e0122a5":"code","85ac3511":"code","f531e73e":"code","b5d946d7":"code","2b8f7391":"code","31b5619b":"code","c8b8a3c5":"code","56a31c2f":"code","b7b4aebe":"code","b387132f":"code","aa808a8c":"code","f216b44f":"code","39e3c120":"code","c1ab8af4":"code","89a4c798":"code","2dce222c":"code","8af7516a":"code","2c4efbec":"code","1efae30e":"code","30d8d08a":"code","6259da6d":"code","5b2543d6":"code","bfc44cbe":"code","cef67ac3":"code","12f445e5":"code","29cc5e6e":"code","ed42053c":"code","9f10ea2f":"code","a2b44931":"code","5254fd6f":"code","3e95707e":"code","8caac106":"code","2489ba71":"code","4c9f0ee3":"code","454f73b2":"code","d8c7d90e":"code","57cebd01":"code","3bbfbf1e":"code","0ad495b0":"code","23f22307":"code","e6b77f06":"code","4c98a472":"code","c96ce201":"code","0cb04f89":"code","51340e4f":"code","4241f756":"code","5165f63d":"code","4a323453":"code","d32971b8":"code","121298f7":"code","bdca7dd5":"code","593e89e5":"code","29377327":"code","7451847a":"code","9e88f445":"code","1f597c82":"code","d4a2a428":"code","527d3877":"code","ae8efa2c":"code","370c67a4":"code","fe5c2db1":"markdown","8c8ad649":"markdown","0e85898e":"markdown","3594cff1":"markdown","4e81b1c3":"markdown","f8be31bd":"markdown","54f56c75":"markdown","4e82f0e3":"markdown","b29a95d3":"markdown","edd28ae2":"markdown","0453c9b5":"markdown","bcfb4fee":"markdown","525139b5":"markdown","0febaf87":"markdown","12886e27":"markdown","f7ea59c2":"markdown","4fb1a3e1":"markdown","eb9da999":"markdown","b730b6b7":"markdown","c816d043":"markdown","32a6747f":"markdown","f24b919a":"markdown","63387379":"markdown","dca770f3":"markdown","c109c48a":"markdown","0bfaae90":"markdown","04a23fa4":"markdown","70ac7c1d":"markdown","27b72ec6":"markdown","7fb928c5":"markdown","7d77d6b0":"markdown","a5f5e81c":"markdown","130a716a":"markdown","601b1fd3":"markdown","d1cef143":"markdown","ee31c487":"markdown","937bbd93":"markdown","09ef1b57":"markdown","3a378029":"markdown","5a72d2cf":"markdown","b72c6d2a":"markdown","bcda6158":"markdown","ccf7cc53":"markdown","025116b6":"markdown","c29ff77d":"markdown","efc0cf7f":"markdown","54959c3e":"markdown","c1083986":"markdown","31bcba13":"markdown","f31bfe2a":"markdown","159179b2":"markdown","34575524":"markdown","f99bf2f6":"markdown","780fa1bf":"markdown"},"source":{"414a587f":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn import metrics\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\n\nfrom imblearn.over_sampling import SMOTE","e2de394e":"stroke_df = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","aa12b46e":"stroke_df.head()","f09ef642":"stroke_df.describe()","966d7fe1":"stroke_df.count()","65539062":"feat_cols = stroke_df.columns\nfeat_cols","3c95eb74":"stroke_df.isnull().sum()","4fffc952":"median_bmi = stroke_df['bmi'].median()\nprint (\"Median BMI value:\", median_bmi)","9e0122a5":"stroke_df['bmi'] = stroke_df['bmi'].fillna(median_bmi)\n\nstroke_df.isnull().sum()","85ac3511":"sns.heatmap(stroke_df.corr())","f531e73e":"sns.countplot(data = stroke_df, x = 'stroke')","b5d946d7":"plt.hist(stroke_df['stroke'])","2b8f7391":"sns.countplot(data = stroke_df, x = 'heart_disease')","31b5619b":"plt.hist(stroke_df['heart_disease'])","c8b8a3c5":"sns.countplot(data = stroke_df, x = 'hypertension')","56a31c2f":"plt.figure(figsize=(80,7))\nplt.xticks(rotation = 90)\nsns.countplot(data = stroke_df, x = 'avg_glucose_level', order = np.arange(50, 280, 0.5))\nplt.show()","b7b4aebe":"sns.boxplot(data = stroke_df, x = 'avg_glucose_level') ","b387132f":"plt.figure(figsize=(70,7))\nplt.xticks(rotation = 90)\nsns.countplot(data = stroke_df, x = 'bmi', order = np.arange(9, 98, 0.5))\nplt.show()","aa808a8c":"sns.boxplot(data = stroke_df, x = 'bmi') ","f216b44f":"sns.countplot(data = stroke_df, x = 'smoking_status')","39e3c120":"sns.countplot(data = stroke_df, x = 'age', order = np.arange(1, 82, 3)).set(xlabel='age (8 months - 82 year)')","c1ab8af4":"sns.boxplot(data = stroke_df, x = 'age') ","89a4c798":"sns.countplot(data = stroke_df, x = 'gender')","2dce222c":"bmi_outliers = stroke_df.loc[stroke_df['bmi'] > 45]\n\nprint(bmi_outliers['bmi'].count(), \"entries having BMi value greater than 45!\")","8af7516a":"stroke_df[\"bmi\"] = stroke_df[\"bmi\"].apply(lambda x: 45 if x > 45 else x)\nstroke_df[\"bmi\"] = stroke_df[\"bmi\"].fillna(median_bmi)\n\nbmi_outliers = stroke_df.loc[stroke_df['bmi'] > 45]\nprint(bmi_outliers['bmi'].count(), \"entries having BMi value greater than 45!\")","2c4efbec":"gender_encoder = LabelEncoder()\never_married_encoder = LabelEncoder()\nwork_type_encoder = LabelEncoder()\nResidence_type_encoder = LabelEncoder()\nsmoking_status_encoder = LabelEncoder()\n\ngender_encoder.fit(stroke_df['gender'])\never_married_encoder.fit(stroke_df['ever_married'])\nwork_type_encoder.fit(stroke_df['work_type'])\nResidence_type_encoder.fit(stroke_df['Residence_type'])\nsmoking_status_encoder.fit(stroke_df['smoking_status'])\n\nstroke_df['gender'] =  gender_encoder.transform(stroke_df['gender'])\nstroke_df['ever_married'] =  ever_married_encoder.transform(stroke_df['ever_married'])\nstroke_df['work_type'] =  work_type_encoder.transform(stroke_df['work_type'])\nstroke_df['Residence_type'] =  Residence_type_encoder.transform(stroke_df['Residence_type'])\nstroke_df['smoking_status'] =  smoking_status_encoder.transform(stroke_df['smoking_status'])\n\nstroke_df.head()","1efae30e":"plt.figure(figsize=(80,7))\nplt.xticks(rotation = 90)\nsns.countplot(data = stroke_df, x = 'avg_glucose_level', hue = 'stroke')\nplt.show()","30d8d08a":"plt.figure(figsize=(40,7))\nplt.xticks(rotation = 90)\nsns.countplot(data = stroke_df, x = 'bmi', hue = 'stroke', order = np.arange(9, 98, 0.5))\nplt.show()","6259da6d":"plt.figure(figsize=(10, 5))\nsns.countplot(data = stroke_df, x = 'heart_disease', hue = 'stroke')\nplt.show()","5b2543d6":"plt.figure(figsize=(10, 5))\nsns.countplot(data = stroke_df, x = 'hypertension', hue = 'stroke')\nplt.show()","bfc44cbe":"plt.figure(figsize=(10, 5))\nsns.countplot(data = stroke_df, x = 'work_type', hue = 'stroke')\nplt.show()","cef67ac3":"sns.countplot(data = stroke_df, x= 'smoking_status', hue = 'stroke')","12f445e5":"plt.figure(figsize=(29,7))\nplt.xticks(rotation = 90)\nsns.countplot(data = stroke_df, x = 'age', hue = 'stroke')\nplt.show()","29cc5e6e":"sns.countplot(data = stroke_df, x = 'gender', hue = 'stroke')","ed42053c":"plt.figure(figsize=(10, 5))\nsns.countplot(data = stroke_df, x = 'ever_married', hue = 'stroke')\nplt.show()","9f10ea2f":"sns.countplot(data = stroke_df, x = 'Residence_type', hue = 'stroke')","a2b44931":"avg_glucose_level_correlation = round(stroke_df['avg_glucose_level'].corr(stroke_df['stroke']), 4)\n\nprint(avg_glucose_level_correlation)","5254fd6f":"stroke_correlation = round(stroke_df['bmi'].corr(stroke_df['stroke']), 4)\n\nprint(stroke_correlation)","3e95707e":"hypertension_correlation = round(stroke_df['hypertension'].corr(stroke_df['stroke']), 4)\n\nprint(hypertension_correlation)","8caac106":"heart_disease_correlation = round(stroke_df['heart_disease'].corr(stroke_df['stroke']), 4)\n\nprint(heart_disease_correlation)","2489ba71":"age_correlation = round(stroke_df['age'].corr(stroke_df['stroke']), 4)\n\nprint(age_correlation)","4c9f0ee3":"correlation = round(stroke_df['ever_married'].corr(stroke_df['stroke']), 4)\n\nprint(correlation)","454f73b2":"correlation = round(stroke_df[\"Residence_type\"].corr(stroke_df['stroke']), 4)\n\nprint(correlation)","d8c7d90e":"scaler = MinMaxScaler()\n\nnormalized_array = scaler.fit_transform(stroke_df[['age','bmi','avg_glucose_level']])\nnormalized_df = pd.DataFrame(normalized_array, columns=['age','bmi','avg_glucose_level'])\n\nstroke_df[['age', 'bmi', 'avg_glucose_level']] = normalized_df","57cebd01":"stroke_df","3bbfbf1e":"stroke_df = stroke_df.drop(columns = 'id', axis = 1)\n\nstroke_df","0ad495b0":"X = stroke_df.drop(['stroke'], axis = 1).values \ny = stroke_df['stroke'].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)","23f22307":"logreg = LogisticRegression(max_iter = 10000)\nrf = RandomForestClassifier(n_jobs = -1, criterion = 'gini', n_estimators = 50)\n\nrf.fit(X_train, y_train)\nlogreg.fit(X_train, y_train)\n\ny_pred_logreg = logreg.predict(X_test)\ny_pred_rf = rf.predict(X_test)","e6b77f06":"cnf_matrix_logreg = metrics.confusion_matrix(y_test, y_pred_logreg)\n\ncnf_matrix_logreg","4c98a472":"cnf_matrix_rf = metrics.confusion_matrix(y_test, y_pred_rf)\n\ncnf_matrix_rf","c96ce201":"print(\"Accuracy: \", metrics.accuracy_score(y_test, y_pred_logreg))\nprint(\"Precision: \", metrics.precision_score(y_test, y_pred_logreg))\nprint(\"Recall\/Sensitivity: \", metrics.recall_score(y_test, y_pred_logreg))","0cb04f89":"print(\"Accuracy: \", metrics.accuracy_score(y_test, y_pred_rf))\nprint(\"Precision: \", metrics.precision_score(y_test, y_pred_rf))\nprint(\"Recall\/Sensitivity: \", metrics.recall_score(y_test, y_pred_rf))","51340e4f":"smote = SMOTE(random_state = 45)\n\ns_X_train_logreg, s_y_train_logreg =smote.fit_resample(X_train,y_train)\ns_X_train_rf, s_y_train_rf =smote.fit_resample(X_train,y_train)\n\ns_X_test_logreg, s_y_test_logreg = smote.fit_resample(X_test,y_test)\ns_X_test_rf, s_y_test_rf = smote.fit_resample(X_test,y_test)","4241f756":"s_logreg = LogisticRegression(max_iter = 10000)\ns_rf = RandomForestClassifier(n_jobs = -1, criterion = 'gini', n_estimators = 50)","5165f63d":"s_logreg.fit(s_X_train_logreg, s_y_train_logreg)\ns_rf.fit(s_X_train_rf, s_y_train_rf)","4a323453":"s_y_pred_logreg = s_logreg.predict(s_X_test_logreg)\ns_y_pred_rf = s_rf.predict(s_X_test_rf)","d32971b8":"print(f'Logic Regression: After Balancing, Models Accuracy = {round(metrics.accuracy_score(s_y_test_logreg, s_y_pred_logreg) * 100, 2)}%')\nprint(f'Random Forest: After Balancing, Models Accuracy = {round(metrics.accuracy_score(s_y_test_rf, s_y_pred_rf) * 100, 2)}%')","121298f7":"matrix_logreg = metrics.confusion_matrix(s_y_test_logreg, s_y_pred_logreg)\nmatrix_rf = metrics.confusion_matrix(s_y_test_rf, s_y_pred_rf)","bdca7dd5":"matrix_logreg","593e89e5":"matrix_rf","29377327":"roc_score_logreg = metrics.roc_auc_score(s_y_test_logreg, s_y_pred_logreg)\nroc_score_rf = metrics.roc_auc_score(s_y_test_rf, s_y_pred_rf)","7451847a":"roc_score_logreg","9e88f445":"roc_score_rf","1f597c82":"print(\"Accuracy: \", metrics.accuracy_score(s_y_test_logreg, s_y_pred_logreg), round(metrics.accuracy_score(s_y_test_logreg, s_y_pred_logreg) * 100, 2))\nprint(\"Precision: \", metrics.precision_score(s_y_test_logreg, s_y_pred_logreg), round(metrics.precision_score(s_y_test_logreg, s_y_pred_logreg) * 100, 2))\nprint(\"Recall\/Sensitivity: \", metrics.recall_score(s_y_test_logreg, s_y_pred_logreg), round(metrics.recall_score(s_y_test_logreg, s_y_pred_logreg) * 100, 2))","d4a2a428":"print(\"Accuracy: \", metrics.accuracy_score(s_y_test_rf, s_y_pred_rf), round(metrics.accuracy_score(s_y_test_rf, s_y_pred_rf) * 100, 2))\nprint(\"Precision: \", metrics.precision_score(s_y_test_rf, s_y_pred_rf), round(metrics.precision_score(s_y_test_rf, s_y_pred_rf) * 100, 2))\nprint(\"Recall\/Sensitivity: \", metrics.recall_score(s_y_test_rf, s_y_pred_rf), round(metrics.recall_score(s_y_test_rf, s_y_pred_rf) * 100, 2))","527d3877":"classification_scores_logreg = metrics.classification_report(s_y_test_logreg, s_y_pred_logreg)\n\nprint(classification_scores_logreg)","ae8efa2c":"classification_scores_rf = metrics.classification_report(s_y_test_rf, s_y_pred_rf)\n\nprint(classification_scores_rf)","370c67a4":"plt.hist(stroke_df)","fe5c2db1":"<h1>3. Explatory Data Analysis - PART 1<\/h1>","8c8ad649":"- BMI and the frequency of stroke","0e85898e":"- Residence type and the frequency of stroke","3594cff1":"- Number of records","4e81b1c3":"Drop columns that are not relevant for the model","f8be31bd":"Correlation between <code>age<\/code> and <code>stroke<\/code>","54f56c75":"- Check the null existance","4e82f0e3":"- Correlation heatmap","b29a95d3":"- Perform one-hot encoding on categorical features (<code>gender<\/code>, <code>ever_married<\/code>, <code>Residence_type<\/code>)","edd28ae2":" - Divide into training and testing subset","0453c9b5":"- Smoking status and the frequency of stroke","bcfb4fee":"- Hypertension and the frequency of stroke","525139b5":"Apply MinMaxScaler for data normalization. For the fitting, we use the fit() function. It means that we use the training data for estimating the minimum and maximum observable values. The function transform() apply the scale to training data. It means you can use the normalized data to train your model. The default scale for the MinMaxScaler is to rescale variables into the range [0,1].","0febaf87":"- The plot chart of people who had a hypertension in population","12886e27":"- The plot chart of people who had a heart disease in population","f7ea59c2":"<strong style='color:red'>No Gaussian distribution, perform normalization instead of standardization.<\/strong>","4fb1a3e1":"<h1>2. Data cleansing - PART 1<\/h1>","eb9da999":"- Average glucose level and the frequency of stroke","b730b6b7":"Correlation between <code>heart_disease<\/code> and <code>stroke<\/code>","c816d043":"- Age and the frequency of stroke","32a6747f":"<h1>3. Explatory Data Analysis - PART 2<\/h1>","f24b919a":"- The plot chart of people and their age","63387379":"Correlation between <code>Residence_type<\/code> and <code>stroke<\/code>","dca770f3":"- The plot of the distribution of gender in a population","c109c48a":"Since we have <code>null<\/code> values, we have to take care of them either by dropping records or filling them with median values. We have 5110 records, so losing the data is not desirable, and that's the reason I'll take the second approach. I'll fill the <code>null<\/code> values with the <strong>median value<\/strong>.","0bfaae90":"- Gender and the frequency of stroke","04a23fa4":"- Hanlde <code>bmi<\/code> outliers (as we can from the previous count plot, outliers occur for BMI <strong>greater than 45<\/strong>)","70ac7c1d":"- Print feature list","27b72ec6":"Enocding is as it follows:\n    <ul>\n        <li>gender (Male - 1, Female - 0)<\/li>\n        <li>ever_maried (Yes - 1, No - 0)<\/li>\n        <li>work_type (Govt_job - 0, Never_worked - 1, Private -  2, Self-employed -  3,children - 4)<\/li>\n        <li>Residence_type (Urban - 1, Rural - 0)<\/li>\n    <\/ul>","7fb928c5":"<h1>4. Building model<\/h1>","7d77d6b0":"<strong style='color:red'>Here we can see outliers for <code>bmi<\/code> value grather than 45!<\/strong>","a5f5e81c":"- Heart disease and the frequency of stroke","130a716a":"<h1>2. Data cleansing - PART 2<\/h1>","601b1fd3":"<h3>Correlation between independent variables (<code>avg_glucose_level<\/code>, <code>bmi<\/code>, <code>hypertension<\/code>, <code>heart_disease<\/code>, <code>age<\/code>, <code>ever_married<\/code>, <code>Residence_type<\/code>) and denependent variable - <code>stroke<\/code> <\/h3>","d1cef143":"Imbalanced classification involves developing predictive models on classification datasets with a severe class imbalance.","ee31c487":"- Work type and the frequency of stroke","937bbd93":"- The plot chart of people who had a stroke in population","09ef1b57":"- The plot chart of people and their smoking status","3a378029":"- The plot chart of people and their bmi level","5a72d2cf":"Correlation between <code>bmi<\/code> and <code>stroke<\/code>","b72c6d2a":"- Distribution of the BMI witin a population","bcda6158":" - Import necessary packages","ccf7cc53":"- The plot chart of people and their average glucose level in blood","025116b6":"Correlation between <code>avg_glucose_level<\/code> and <code>stroke<\/code>","c29ff77d":"Correlation between <code>hypertension<\/code> and <code>stroke<\/code>","efc0cf7f":"- Describe main characteristics","54959c3e":"<h1>1. Prepare environment<\/h1>","c1083986":"Correlation between <code>ever_married<\/code> and <code>stroke<\/code>","31bcba13":"The next step is to apply the median value to <code>null<\/code> values.","f31bfe2a":"- Distribution of age within a population","159179b2":"- Distribution of avarege gluocose level in blood","34575524":"- Marital status and the frequency of stroke","f99bf2f6":" - Read first five records","780fa1bf":" - Import .csv file"}}