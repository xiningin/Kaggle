{"cell_type":{"c6c91ea2":"code","77f6d875":"code","3bf692b5":"code","355bd0fd":"code","983946cb":"code","57d7e6a5":"code","ae1c1d3d":"code","3d851bca":"code","ec89cdf6":"code","0d7c9e83":"code","fb63cb97":"code","ce0d983c":"code","40340dde":"code","664c4f06":"code","a5f1b0bd":"code","10cf74ee":"code","fc8ee4cc":"code","2b782421":"code","743e08bd":"code","00389c51":"code","82870ece":"code","7189474f":"code","4044d9d4":"code","19524575":"code","6ef143bb":"code","01239799":"code","08da5e9b":"code","57b3f014":"code","516b3c17":"code","749d337e":"code","094a42db":"code","cfaf382c":"markdown","4a49982d":"markdown","438efd7f":"markdown","24910d77":"markdown","41ee72cd":"markdown","c8abe5a6":"markdown"},"source":{"c6c91ea2":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport pydot\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_graphviz\nimport graphviz\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import roc_curve","77f6d875":"train = pd.read_csv('\/kaggle\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv')\ntest = pd.read_csv('\/kaggle\/input\/loan-prediction-based-on-customer-behavior\/Test Data.csv')","3bf692b5":"train.shape, test.shape","355bd0fd":"train.head(4)","983946cb":"test.head(3)","57d7e6a5":"id_train = train['Id']\nid_test = test['ID']\n\ntrain = train.drop(['Id'], axis = 1)\ntest = test.drop(['ID'], axis = 1)","ae1c1d3d":"Y = train['Risk_Flag']\nX = train.drop(['Risk_Flag'], axis = 1)\nY.head(2), X.head(2)","3d851bca":"X.dtypes #, X.info","ec89cdf6":"X.nunique()","0d7c9e83":"X.isna().sum(axis = 0)","fb63cb97":"col_object = X.columns[X.dtypes == \"object\"]\ncol_num = X.columns[X.dtypes == \"int64\"]\ncol_object, col_num","ce0d983c":"# test\nenc_tr = LabelEncoder()\nenc_tr.fit_transform(X['Married\/Single'])","40340dde":"for i in col_object:\n    le = LabelEncoder()\n    col_le = le.fit_transform(X[i])\n    \n    X[i] = col_le\n    print(col_le)\n    ","664c4f06":"test.dtypes","a5f1b0bd":"# same to test data\nfor i in col_object:\n    test[i] = le.fit_transform(test[i])","10cf74ee":"X.head(2)","fc8ee4cc":"test.head(2)","2b782421":"X_train, X_validation, Y_train, Y_validation = train_test_split(X, Y, random_state = 21, test_size = 0.2)","743e08bd":"m1 = DecisionTreeClassifier()\nm1.fit(X_train, Y_train)","00389c51":"pred1 = m1.predict(X_validation)","82870ece":"accuracy_score(Y_validation, pred1)","7189474f":"plot_confusion_matrix(m1, X_validation, Y_validation)","4044d9d4":"export_graphviz(m1, out_file='tree.dot')","19524575":"with open(\"tree.dot\") as f:\n    dot_graph = f.read()","6ef143bb":"# (graph,) = pydot.graph_from_dot_file('tree.dot',\n#                                      encoding = 'utf8')","01239799":"dot=graphviz.Source(dot_graph)","08da5e9b":"dot.format='png'\n# dot.render(filename='tree.dot', directory='images\/tree', cleanup=True)","57b3f014":"feature_importance = pd.DataFrame(m1.feature_importances_.reshape((1, -1)), columns=X_train.columns, index=['feature_importance'])\nfeature_importance.transpose().sort_values(by=['feature_importance'], ascending=False)","516b3c17":"# ROC\nprob_val = m1.predict_proba(X_validation)\nprob_val = prob_val[:, 1]\nfper, tper, thresholds = roc_curve(Y_validation, prob_val)","749d337e":"def plot_roc_curve(fper, tper):\n    plt.plot(fper, tper, color='red', label='ROC')\n    plt.plot([0, 1], [0, 1], color = 'green', linestyle='--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC')\n    plt.legend()\n    plt.show()\n    \n    \nplot_roc_curve(fper,tper)","094a42db":"m1.predict(test)","cfaf382c":"## 3-3. Metrics","4a49982d":"## 3-1. split train and validation set","438efd7f":"# 2. Cleaning","24910d77":"\n# 3. Baseline Modeling","41ee72cd":"## 3-2. Decision Tree","c8abe5a6":"# 1. Load & Wrangling"}}