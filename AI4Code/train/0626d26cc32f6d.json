{"cell_type":{"576e028f":"code","fd02ac61":"code","368b4a40":"code","88a4c551":"code","83702d62":"code","be834af7":"code","555ff741":"code","ce903b3a":"code","8b9d7e34":"code","ef908799":"code","134f8266":"code","d84b588c":"code","f8e416ab":"code","bfd52f38":"code","35bfdc38":"code","108943e0":"code","00e5a35b":"code","6a75d139":"code","73447f8e":"code","34506039":"code","44ee4047":"code","9d9d5f34":"code","f4fffe37":"code","3e83c773":"markdown","3d202331":"markdown","63530a2f":"markdown","840b00d2":"markdown","0f1e2ff4":"markdown","42ffd1a1":"markdown","834380de":"markdown","58a4933a":"markdown","ee82fd6e":"markdown","ce78b66e":"markdown","392d752b":"markdown","01d411d9":"markdown","257a642c":"markdown"},"source":{"576e028f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd02ac61":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom keras import layers, models, optimizers\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.models import Sequential","368b4a40":"train_data = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_data = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","88a4c551":"train_data.head","83702d62":"train_data.shape, test_data.shape","be834af7":"y = train_data['label']\nx = train_data.drop(['label'], axis=1, inplace=True)","555ff741":"train_data = train_data.values.reshape(-1,28,28,1)\ntest_data = test_data.values.reshape(-1,28,28,1)\ntrain_data.shape, test_data.shape","ce903b3a":"plt.imshow(train_data[1])","8b9d7e34":"plt.figure(figsize=(20,20))\nfor i in range(10):\n    plt.subplot(2, 10, i+1)\n    plt.imshow(train_data[i])","ef908799":"train = np.array(train_data)\ny = np.array(y)\ntest = np.array(test_data)","134f8266":"train.shape","d84b588c":"sns.countplot(y)\nplt.title('digit count')","f8e416ab":"y = to_categorical(y,num_classes=10) # it will do suppose y=4 ---> [0,0,0,0,1,0,0,0,0,0]","bfd52f38":"x_train, x_val, y_train, y_val = train_test_split(train, y, test_size = 0.2, random_state = 42)","35bfdc38":"data_gen = ImageDataGenerator(rescale = 1.\/255,\n                              rotation_range=15,\n                              width_shift_range=0.03,\n                              height_shift_range=0.03,\n                              shear_range=0.15,\n                              fill_mode='nearest')\ntrain_generator = data_gen.flow(x_train, y_train, batch_size=64)\nval_generator = data_gen.flow(x_val, y_val, batch_size=64)","108943e0":"model = Sequential()\nmodel.add(Conv2D(filters = 64, kernel_size = 3, strides=(1,1), padding='Same', activation='relu', input_shape = [28,28,1]))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 64, kernel_size = 3, strides=(2,2), padding='Same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2)))\n\nmodel.add(Conv2D(filters = 128, kernel_size = 3, strides=(1,1), padding='Same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 128, kernel_size = 3, strides=(2,2), padding='Same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation=\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(units=128, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(units=64, activation='relu'))\nmodel.add(Dropout(0.10))\nmodel.add(Dense(10, activation=\"softmax\"))\n\nmodel.summary()","00e5a35b":"optimizer = optimizers.Adam(learning_rate=0.0001)","6a75d139":"model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])","73447f8e":"batch_size=64\nimport keras\nes_callback = keras.callbacks.EarlyStopping(monitor ='val_accuracy', patience = 10, mode = 'max', restore_best_weights = True)\nreducelr_callback = keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=8, min_lr=0.00000001)\n\nhistory = model.fit_generator(train_generator, \n                             steps_per_epoch = len(x_train)\/\/batch_size,\n                             epochs=60,\n                             validation_data = val_generator,\n                             validation_steps = len(x_val)\/\/batch_size,\n                             callbacks = [es_callback, reducelr_callback])\n","34506039":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nep = range(1,len(acc) + 1)\n\n#Train and Validation accuracy\nplt.plot(ep, acc, 'b', label='Training Accuracy')\nplt.plot(ep, val_acc, 'r', label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.legend()\n\nplt.figure()\n\n#Train and Validation loss\nplt.plot(ep, loss, 'b', label='Training Loss')\nplt.plot(ep, val_loss, 'r', label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.legend()\n\nplt.show()","44ee4047":"y_result = model.predict(test)\nprint('Prediction Shape is {}'.format(y_result.shape))","9d9d5f34":"results = np.argmax(y_result, axis=1)\nresults = pd.Series(results,name=\"Label\")","f4fffe37":"My_submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nMy_submission.to_csv(\"submission.csv\",index=False)","3e83c773":"## Model Building","3d202331":"## Reading Data","63530a2f":"## Data Visualization","840b00d2":"## Plotting accuracy per epoch","0f1e2ff4":"## Seperating Variables","42ffd1a1":"## Importing Libraries","834380de":"## Data Augmentation","58a4933a":"## Submission","ee82fd6e":"## Digit Counting","ce78b66e":"## Model Testing","392d752b":"## Model Training","01d411d9":"## Splitting Data","257a642c":"## Reshaping"}}