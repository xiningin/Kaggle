{"cell_type":{"a93d2f2b":"code","dab8794c":"code","2c15eb0f":"code","ac2bff86":"code","19fd4b5b":"code","7f187530":"code","46b66c79":"code","2b793178":"code","190ff0d0":"code","3c9d6898":"code","2dbbfa97":"code","fb5f307d":"code","7b1508de":"code","62bba702":"code","0037f8ac":"code","22389524":"code","62ae39f0":"code","bc4ba493":"code","970aa21b":"code","542d6b01":"code","c346ee2c":"code","d9bb9016":"code","37211a79":"code","bb5f7ae0":"code","6dd9dce6":"markdown","aff4dc5b":"markdown","d4bb1e51":"markdown"},"source":{"a93d2f2b":"import numpy as np \nimport pandas as pd \nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom keras.layers import Dense,LSTM,Flatten,SimpleRNN,GRU\nfrom keras.models import Sequential\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","dab8794c":"jena_data = pd.read_csv('\/kaggle\/input\/jena-climate-2009-2016\/jena_climate_2009_2016.csv',index_col = None)","2c15eb0f":"jena_data = jena_data.drop(['Date Time'],axis=1)\njena_data.head()","ac2bff86":"jena_data.columns","19fd4b5b":"temp = jena_data.iloc[:,1]\nh20c = jena_data.iloc[:,9]","7f187530":"fig, axes = plt.subplots(4,2, figsize = (15,15))\n\nfor i in range(4):\n    axes[i][0].plot(temp[:144*365*(i+1)],label=f'{i+1} year Temperature T (degC)')\n    axes[i][1].plot(h20c[:144*365*(i+1)],label=f'{i+1} year H20c mmol\/mol',color = 'g') \n    axes[i][0].legend()\n    axes[i][1].legend()","46b66c79":"mean = np.mean(jena_data.values,axis=0)\nstd = np.std(jena_data.values,axis=0)","2b793178":"jena_data = (jena_data-mean)\/std","190ff0d0":"# %%timeit\n# jena_data.mean()","3c9d6898":"# %%timeit\n# np.mean(jena_data)","2dbbfa97":"def generator(normalized_data, lookback, \n              delay, min_index, max_index,\n             shuffle = False, batch_size = 128,\n             step=6):\n    if max_index is None:\n        max_index = len(normalized_data)-delay-1\n    i= min_index+lookback\n    rows = None\n    while(1):\n        if shuffle:\n            rows = np.random.randint(min_index+lookback, max_index, size = batch_size)\n        else:\n            if i + batch_size >=max_index:\n                i = min_index+batch_size\n            rows = np.arange(i,min(i+batch_size, max_index))\n            i += len(rows)\n        \n        samples = np.zeros((len(rows),lookback\/\/step,normalized_data.shape[-1]))\n        targets = np.zeros((len(rows),))\n        \n        for j,row in enumerate(rows):\n            indices = range(rows[j]-lookback,rows[j],step)\n            samples[j] = normalized_data[indices]\n            targets[j] = normalized_data[rows[j]+delay][1]\n        \n        yield samples, targets","fb5f307d":"# training\nlookback = 1440\nstep=6\ndelay = 144\nbatch_size = 128\n","7b1508de":"train_gen = generator(np.array(jena_data),lookback=lookback,delay=delay,min_index=0,max_index=200000,shuffle=True,\n                     step=step,batch_size=batch_size)\n\nval_gen = generator(np.array(jena_data),lookback=lookback,delay=delay,min_index=200001,max_index=300000,\n                     step=step,batch_size=batch_size)\n\ntest_gen = generator(np.array(jena_data),lookback=lookback,delay=delay,min_index=300001,max_index=None,\n                     step=step,batch_size=batch_size)","62bba702":"val_steps = 300000-200001-lookback\ntest_steps = (len(np.array(jena_data))-lookback)","0037f8ac":"model = Sequential()\n\nmodel.add(Flatten(input_shape=(lookback\/\/step,jena_data.shape[-1])))\nmodel.add(Dense(32,activation='relu'))\nmodel.add(Dense(1,))\nmodel.compile(optimizer = 'rmsprop', loss='mae')","22389524":"history = model.fit_generator(train_gen,steps_per_epoch=500,epochs=4,validation_data = val_gen,validation_steps=500)","62ae39f0":"plt.plot(history.history['val_loss'],label = 'val_loss')\nplt.plot(history.history['loss'], label='loss')\nplt.legend()\n","bc4ba493":"# GRU","970aa21b":"model = Sequential()\n\nmodel.add(GRU(32,input_shape=(lookback\/\/step,jena_data.shape[-1])))\nmodel.add(Dense(32,activation='relu'))\nmodel.add(Dense(1,))\nmodel.compile(optimizer = 'rmsprop', loss='mae')","542d6b01":"# Change epochs to 5-10 when you use\nhistory = model.fit_generator(train_gen,steps_per_epoch=500,epochs=1,validation_data = val_gen,validation_steps=500)","c346ee2c":"model.predict_generator(test_gen,500)","d9bb9016":"tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\n    \n    # instantiate a distribution strategy\ntpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)","37211a79":"#Trying GPUs. Didn't work\nmodel = None\nwith tpu_strategy.scope():\n    model = Sequential()\n\n    model.add(GRU(32,input_shape=(lookback\/\/step,jena_data.shape[-1])))\n    model.add(Dense(32,activation='relu'))\n    model.add(Dense(1,))\n    model.compile(optimizer = 'rmsprop', loss='mae')","bb5f7ae0":"history_tpu = model.fit_generator(train_gen,steps_per_epoch=500,epochs=5,validation_data = val_gen,validation_steps=2000)","6dd9dce6":"### This notebook demonstrates and compares the following for TimeSeries data\n- FeedForward Neural Networks \n- Gated Recurrent Units\n\n### Data Used?\n- Jena Climate Change Data 2009-16\n\n### #Experiment:\n- Tried using TPU at last. Didn't work. Because of data format I guess","aff4dc5b":">  Data Generator ","d4bb1e51":"# 4 Year temperature plot"}}