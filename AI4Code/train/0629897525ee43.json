{"cell_type":{"77959654":"code","25167bad":"code","f2b1d106":"code","2c7b3464":"code","40ead44b":"code","900da462":"code","25d082a7":"code","c4cc3bb2":"code","7eee51d7":"code","8cb6ad4b":"code","40d966b0":"code","f2e19393":"code","33aa140f":"code","51eb8b31":"code","ab5f02f7":"code","6a77e70c":"code","dfd8ed16":"code","79e80edf":"code","03cdb88b":"code","2216b3dd":"code","68e2d02f":"code","a6b2cf46":"code","3b42a054":"code","3f0feb98":"markdown","9bc59db0":"markdown","0679c7bd":"markdown","df7121dd":"markdown","1f4ca6ab":"markdown","68d50ee7":"markdown","4fdafced":"markdown","5de3ab2d":"markdown","5d6120b3":"markdown","00913b4a":"markdown","413ca81e":"markdown","5d6d0ffc":"markdown","ea54df80":"markdown","b7f088be":"markdown","1e6a1ade":"markdown","e0ad6ca2":"markdown","7d92dde2":"markdown","e2d21670":"markdown","d5f27026":"markdown","4ece3825":"markdown","9cde6013":"markdown","98075c81":"markdown","e2028de6":"markdown","d41d9a51":"markdown","77e19f87":"markdown","0d1ea4da":"markdown"},"source":{"77959654":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n#Gets rid of the seaborn 'FutureWarning'","25167bad":"steps = pd.read_csv('..\/input\/com.samsung.shealth.step_daily_trend.201812071026.csv', header=1 ) \nsteps.head()","f2b1d106":"steps['day_time'] = pd.to_datetime(steps['day_time'], unit='ms')\nsteps.head()","2c7b3464":"steps = steps[steps['source_type']==0].groupby('day_time').sum()\nsteps.drop(['source_type','speed', 'calorie'], axis=1, inplace=True)\nsteps.reset_index(inplace=True)\nsteps.head()","40ead44b":"steps['Day'] = steps['day_time'].apply(lambda datestamp: datestamp.day)\nsteps['Year'] = steps['day_time'].apply(lambda datestamp: datestamp.year)\n\n\n#Functions to get days of the week and months as strings instead of indexes \n#(0-6 and 0-12 respectively)\n\ndef dayofweek(datestamp):\n    return ['Mon', 'Tue', 'Wed','Thur','Fri','Sat','Sun'][datestamp.weekday()]\ndef monthname(datestamp):\n    return ['Jan', 'Feb', 'Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'][datestamp.month-1]\n\nsteps['Weekday'] = steps['day_time'].apply(lambda datestamp: dayofweek(datestamp)) \nsteps['MonthName'] = steps['day_time'].apply(lambda datestamp: monthname(datestamp))\n\n#Keeping the month as an index to construct the yearmonth column below:\n\nsteps['Month'] = steps['day_time'].apply(lambda datestamp: datestamp.month)\n\n#Function to get a combined 'YearMonth' column\n\ndef yearmonth(cols):\n    month=cols[0]\n    year=cols[1]\n    return '{}-{}'.format(month, year)\n\nsteps['YearMonth'] = steps[['Month', 'Year']].apply(lambda cols: yearmonth(cols), axis=1)\n\nsteps.head()","900da462":"steps.drop('day_time', inplace=True, axis=1)\n\nsteps.head()","25d082a7":"print ('Number of years = {}'.format(steps['count'].count()\/365))","c4cc3bb2":"steps['count'].describe()","7eee51d7":"steps[steps['count']==steps['count'].max()][['Day','MonthName', 'Year']]","8cb6ad4b":"sns.distplot(steps['count'], bins=25).set(xlim=(0,steps['count'].max()))  ","40d966b0":"plt.figure(figsize=(20,5))\nplt.tight_layout()\nplt.title('Average steps per day in 2017 and 2018')\nsns.barplot(x='Year', y=steps['count'], data=steps[steps['Year']>2016])","f2e19393":"plt.figure(figsize=(20,5))\nplt.tight_layout()\nplt.title('Average steps per day for each month, 2017 vs 2018')\nsns.barplot(x='MonthName', y='count', data=steps[steps['Year']>2016], hue='Year', order = ['Jan', 'Feb', 'Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'] )","33aa140f":"plt.figure(figsize=(20,5))\nplt.tight_layout()\nplt.title('Average steps per day over a typical month')\nsns.barplot(x='Day', y='count', data=steps)","51eb8b31":"plt.figure(figsize=(20,5))\nplt.tight_layout()\nplt.title('Average steps per day over a typical week')\nsns.barplot(x='Weekday', y='count', data=steps, order = ['Mon', 'Tue', 'Wed','Thur','Fri','Sat','Sun'], palette = 'deep')","ab5f02f7":"piv = steps[steps['Year']==2017].pivot_table(index='Month',columns='Day', values='count').fillna(0)\nplt.figure(figsize=(20,5))\nplt.title('Steps in 2017')\nsns.heatmap(piv, cmap='viridis')","6a77e70c":"plt.figure(figsize=(10,5))\nplt.title('Total Distance (km)')\nsns.barplot(x='Year', y=steps['distance']\/1000, data=steps[steps['Year']>2016], estimator= sum)","dfd8ed16":"plt.figure(figsize=(10,5))\nplt.title('Total Steps (in millions)')\nsns.barplot(x='Year', y=steps['count']\/1000000, data=steps[steps['Year']>2016], estimator= sum)","79e80edf":"sns.scatterplot(x='count', y='distance', data=steps)","03cdb88b":"from sklearn.linear_model import LinearRegression  #For step size regression fit\n\nlm= LinearRegression()\nx=steps['count'].values.reshape(-1, 1)\ny=steps['distance'].values.reshape(-1, 1)\nlm.fit(x,y)\nprint('Average step size = {:.2f} cm'.format(lm.coef_[0][0]*100))","2216b3dd":"total_distance = steps['distance'].sum()\ntotal_steps =  steps['count'].sum()\naverage_step = total_distance\/total_steps\nprint('Average step size = {:.2f} cm'.format(average_step))","68e2d02f":"thresh=1000\nlazydays= steps[steps['count']<thresh]['count'].count()\nprint('{} days where steps < {}'.format(lazydays,thresh))","a6b2cf46":"def at_least(n):\n    return steps[steps['count']>n]['count'].count()\n\nprint (at_least(10000))","3b42a054":"print('Laziest day = {}'.format(steps['count'].min()))\nprint('Busiest day = {}'.format(steps['count'].max()))\nsns.lineplot(x= steps['count'], y= steps['count'].apply(lambda values : at_least(values)))\n","3f0feb98":"Now we can get rid of the day_time column since we have extracted all the information into other columns.  \nOur final DataFrame looks like :","9bc59db0":"First let's import the things we'll be needing:","0679c7bd":"Doesn't seem to be a factor.  \n\nWhat about activity through a typical week?  ","df7121dd":"Speaking of distance walked, how far exactly is 1 step?","1f4ca6ab":"## Analysis and Visualization","68d50ee7":"Let's plot that function for every value of steps recorded (laziest day to busiest day)","4fdafced":"Just over 2 year's of data  \nWhat does the distribution of the data look like?","5de3ab2d":"Let's investigate the data:  \n  \nFirstly, how many years' worth of data do we have?","5d6120b3":"Momentum building towards the weekend with a lazy Sunday!  \n\nLet's look at the year 2017 in detail:","00913b4a":"How does this compare to a simple average, taken as total distance \/ total steps?  ","413ca81e":"Thanks for taking a look!","5d6d0ffc":"Let's get the correlation coefficient (i.e. the distance per step : step-size)","ea54df80":"This is different to the value as calculated via regression. Not totally sure why...  \n\nLet's investigate \"lazy days\" when my steps are less than some threshold","b7f088be":"So my all time average is 8810 steps, with a standard deviation of 5587.  \nOn half of all days I walked more than 7761 steps.  \n\nMy record was 38652 steps in one day.   \nIf I recall correctly, I was visiting Budapest!  \n\nWhen was that again? :  ","1e6a1ade":"Table starts on 2nd row so use header=1","e0ad6ca2":"Looks like i'm often walking a lot while on holiday!  \nAnd I went on holiday in July in 2017 vs August in 2018  \n\nAm I more active at the start or the end of a typical month? (Average over years)","7d92dde2":"If you look closely you can spot the holiday periods and weekends.  \n\nWhat about the total distance walked and total steps per year?","e2d21670":"We can create new columns for month,date,year extracted from the time stamp","d5f27026":"We could make a cumulative steps function which returns the number of days with at least 'n' steps  \ne.g. My phone has a 'target reached!' notification when I go through 10,000 steps  \nwhich I have received at_least(10000) times :","4ece3825":"There seems to be a duplicate for each entry,with source_type = -2 or -0.  \nLet's get just the 0s.  \nThere's also more than one log per day, so let's sum those  \nThen let's drop the source_type, speed and calories","9cde6013":"## Importing and Cleaning the Data","98075c81":"A look at the distribution of the number of daily steps","e2028de6":"2017 wins!  \nLet's break that down by month. ","d41d9a51":"## Analysis of Samsung Health Step Data\n\nThis notebook is a quick analysis of my daily steps over the last two years as recorded by the Samsung Health app on my Android phone\n\nIf you want to do the same, this file is obtained from the Samsung Health App  \nGo to Options (top right) -> Settings -> Download Personal Data -> Download  \nYou should see a file in the folder downloaded that looks like: 'com.samsung.shealth.step_daily_trend.YYYYMMDDHHMM.csv'  \nThere's lots other stuff in there, depending which features of the app you use.\n","77e19f87":"Was I more active in 2017 or 2018?","0d1ea4da":"The 'day_time' format looks like unix time (milliseconds since Epoch)  \nLet's convert it to something more useable"}}