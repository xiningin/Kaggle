{"cell_type":{"2eea4700":"code","c943846c":"code","f0dfb4b5":"code","e9ebf739":"code","db50787e":"code","249f2b4c":"code","e3d98e84":"code","995d6002":"code","10acf4db":"code","bc48daaf":"code","e2624d43":"code","b98daed4":"code","b70cf249":"code","6a68fede":"code","ef9918a2":"code","93d90c3c":"code","53d66e24":"code","ceac2c6d":"code","4bc115e7":"code","9494fd4f":"markdown","89eb7ea9":"markdown","3923dfc9":"markdown","cda8a6e6":"markdown"},"source":{"2eea4700":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c943846c":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.feature_selection import chi2\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.feature_selection import mutual_info_classif\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport lightgbm as lgb","f0dfb4b5":"train = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/test.csv')\nsample_sub = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')","e9ebf739":"train.head()","db50787e":"delete_columns = ['id']\ntrain.drop(delete_columns, axis=1, inplace=True)\ntest.drop(delete_columns, axis=1, inplace=True)","249f2b4c":"continuous_features = [i for i in train.columns if 'cont' in i]\ncontinuous = train.filter(items=continuous_features)\n## a lot of useful info are simple functions in pandas, like corr\ncorr_mat= continuous.corr();\n\nmask = np.triu(np.ones_like(corr_mat, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(13,10));\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True);\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_mat, mask=mask, cmap=cmap, vmax=.7, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot=True);","e3d98e84":"\nfor c in train.columns:\n    if train[c].dtype == 'object':\n        lbl = LabelEncoder()\n        lbl.fit(list(train[c].values)+list(test[c].values))\n        train[c] = lbl.transform(train[c].values)\n        test[c] = lbl.transform(test[c].values)\n        \ndisplay(train.head())\n","995d6002":"train['my9t1'] = train['cat9']*train['cat1']\ntrain['my8t1'] = train['cat8']*train['cat1']\ntrain['mycont95'] = train['cont9']*train['cont5']\ntrain['mycont80'] = train['cont8']*train['cont0']\n\ntest['my9t1'] = test['cat9']*test['cat1']\ntest['my8t1'] = test['cat8']*test['cat1']\ntest['mycont95'] = test['cont9']*test['cont5']\ntest['mycont80'] = test['cont8']*test['cont0']","10acf4db":"categorical_features = ['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6','cat7', 'cat8', 'cat9','my9t1', 'my8t1']","bc48daaf":"train.head()","e2624d43":"#delete_columns = ['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9']\ny_train = train['target']\nX_train = train.drop('target', axis = 1)\nX_test = test","b98daed4":"X_train.columns.values","b70cf249":"y_train.shape","6a68fede":"y_preds = []\nmodels = []\noof_train = np.zeros(len(X_train))\ncv = KFold(n_splits=10, shuffle=True, random_state=0)\n\nparams = {\n    'random_state':42,\n    'metric': 'rmse',\n    'n_jobs': -1,\n    #'cat_feature': [x for x in range(len(categorical_features))],\n    'bagging_seed':42,\n    'feature_fraction_seed':42,\n        \n    'learning_rate': 0.003595159587476034,\n    'max_depth': 33,\n    'num_leaves': 90,\n    'reg_alpha': 4.859124490669792,\n    'reg_lambda': 0.4912355149679248,\n    'colsample_bytree': 0.2423175654211017,\n    'min_child_samples': 166,\n    'subsample_freq': 8,\n    'subsample': 0.6257984266472807,\n    'max_bin': 800,\n    'min_data_per_group': 83,\n    'cat_smooth': 24,\n    'cat_l2': 13,\n    \n    'verbose':-1,\n    'force_row_wise':'true',\n}\n\ny_preds = 0\nmses = 0\nX_train_columns = X_train.columns.values\nfeature_importance_df = pd.DataFrame()\n\n\nfor fold_id, (train_index, valid_index) in enumerate(cv.split(X_train, y_train)):\n    X_tr = X_train.loc[train_index, :]\n    X_val = X_train.loc[valid_index, :]\n    y_tr = y_train[train_index]\n    y_val = y_train[valid_index]\n    \n    lgb_train = lgb.Dataset(X_tr, y_tr, categorical_feature=categorical_features)\n    lgb_eval = lgb.Dataset(X_val, y_val, reference=lgb_train, categorical_feature=categorical_features)\n    \n    \n    model = lgb.train(params, lgb_train,\n                      valid_sets=[lgb_train, lgb_eval],\n                      categorical_feature = categorical_features,\n                      verbose_eval = 1000,\n                      num_boost_round = 30000,\n                      early_stopping_rounds=1000,)\n    \n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"Feature\"] = X_train_columns\n    fold_importance_df[\"importance\"] = model.feature_importance()\n    fold_importance_df[\"fold\"] = fold_id + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    \n    y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n    y_preds += y_pred\/10\n    models.append(model)\n    mse = mean_squared_error(y_val, model.predict(X_val,num_iteration=model.best_iteration))\n    mses += mse\/10\n    print(mse)\n    \nprint(mses)","ef9918a2":"#pd.DataFrame(oof_train).to_csv('oof_train_kfold.csv', index=False)","93d90c3c":"cols = (feature_importance_df[[\"Feature\", \"importance\"]]\n        .groupby(\"Feature\")\n        .mean()\n        .sort_values(by=\"importance\", ascending=False)[:3014].index)\nbest_features = feature_importance_df.loc[feature_importance_df.Feature.isin(cols)]\n\nplt.figure()\nsns.barplot(x=\"importance\", y=\"Feature\", data=best_features.sort_values(by=\"importance\",ascending=False))\nplt.title('LightGBM Features (averaged over folds)')\nplt.tight_layout()","53d66e24":"y_preds = pd.DataFrame(y_preds)","ceac2c6d":"y_subs = y_preds","4bc115e7":"sample_sub['target'] = y_subs\nsample_sub.to_csv('submission_CV.csv', index=False)","9494fd4f":"In version 1, I simply copy the way I did in very simple LGBM but with 10 folds CV.","89eb7ea9":"I used LightGBM as a first attempt to submit.\nNot much EDA or Feature engineering, I only did encode the categoricals.\nI think there are so many things for improvment, as I am just new to Kaggle.\nHope you guys like it, and please upvote it!","3923dfc9":"In version 3, I tuned parameters using Optuna for the new features.","cda8a6e6":"In version 2, I added categorical feature, 9t1 and 8t1 and continuous feature cont95 and cont80"}}