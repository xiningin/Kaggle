{"cell_type":{"59a24ca0":"code","10574126":"code","17d70c45":"code","4760d72f":"code","3ff38e4c":"code","7f8a566b":"code","664525bb":"code","8ee1d8e4":"code","9ac7d1c5":"code","dcb00ff7":"code","b7e09f5a":"code","13de2525":"code","0d4a3298":"code","305ed72d":"code","456939c6":"code","ca829bf0":"code","fb517815":"code","2b870bb1":"code","e13dd27d":"code","5265aafe":"code","dc5e9e2a":"code","98fd52f6":"code","f4af5fd5":"code","4ca426ed":"code","49c9ea4d":"code","9b9fb17b":"code","1e8145f4":"code","17f752e6":"code","4b7df4b9":"code","2d9bea81":"code","76a9e7dc":"markdown","fba83504":"markdown","cc656ffb":"markdown","dabb559d":"markdown","71ed1b7f":"markdown","b335ad95":"markdown","15fb051b":"markdown","af29faec":"markdown","bb8c184a":"markdown","a83a46de":"markdown"},"source":{"59a24ca0":"import os \nimport torch\nimport torchvision\nimport torch.nn as nn\nfrom tqdm.notebook import tqdm\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\nimport torchvision.transforms as T\nimport torchvision.models as models\nfrom torch.utils.data import DataLoader\nfrom torchvision.utils import make_grid\nfrom torchvision.datasets import ImageFolder","10574126":"TRAIN_DIR = \"..\/input\/104-flowers-garden-of-eden\/jpeg-224x224\/train\"\nVAL_DIR = \"..\/input\/104-flowers-garden-of-eden\/jpeg-224x224\/val\"","17d70c45":"transform_train = T.Compose([\n    T.RandomCrop(128, padding_mode=\"reflect\"),\n    T.RandomHorizontalFlip(),\n    T.ToTensor()\n])\ntrain_ds = ImageFolder(\n    root=TRAIN_DIR,\n    transform=transform_train\n)","4760d72f":"transform_val = T.Compose([\n    T.ToTensor()\n])\n\nval_ds = ImageFolder(\n    root=VAL_DIR,\n    transform=transform_val\n\n)","3ff38e4c":"batch_size=128","7f8a566b":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=3, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size, num_workers=3, pin_memory=True)","664525bb":"def show_batch(train_dl):\n    for images,_ in train_dl:\n        fig, ax = plt.subplots(figsize=(8,8))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images[:32], nrow=8).permute(1,2,0))\n        break\n        \nshow_batch(train_dl)","8ee1d8e4":"def get_device():\n    if torch.cuda.is_available():\n        return torch.device(\"cuda\") #if the GPU is availble this method will return cuda.\n    else:\n        return torch.device(\"cpu\")\n    \ndef to_device(data, device): #in here we move the data to device of our choice, the GPU\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        for x in self.dl:\n            yield to_device(x, self.device)\n            \n    def __len__(self):\n        return len(self.dl)\n    \ndevice = get_device()\ndevice","9ac7d1c5":"def accuracy(out, labels):\n    _, preds = torch.max(out, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch\n        out =self(images)\n        loss = F.cross_entropy(out, labels)\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        acc = accuracy(out, labels)\n        return {\"val_loss\": loss.detach(), \"val_acc\": acc}\n    \n    def validation_epoch_end(self, outputs):\n        batch_loss = [x[\"val_loss\"] for x in outputs]\n        epoch_loss = torch.stack(batch_loss).mean()\n        batch_acc = [x[\"val_acc\"] for x in outputs]\n        epoch_acc = torch.stack(batch_acc).mean()\n        return {\"val_loss\": epoch_loss.item(), \"val_acc\": epoch_acc.item()}\n    \n    def epoch_end(self, epoch, epochs, result):\n        print(\"Epoch: [{}\/{}], last_lr: {:.4f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n        epoch+1, epochs, result[\"lrs\"][-1], result[\"train_loss\"], result[\"val_loss\"], result[\"val_acc\"]))","dcb00ff7":"class ResNet(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = models.resnet34(pretrained=True)\n        number_of_features = self.network.fc.in_features\n        self.network.fc = nn.Linear(number_of_features, 104)\n        \n    def forward(self, xb):\n        return self.network(xb)\n    \n    def freeze(self): #by freezing all the layers but the last one we allow it to warm up (the others are already good at training)\n        for param in self.network.parameters():\n            param.require_grad=False\n        for param in self.network.fc.parameters():\n            param.require_grad=True\n            \n    def unfreeze(self):\n        for param in self.network.parameters():\n            param.require_grad=True","b7e09f5a":"model = ResNet()\nmodel","13de2525":"model = to_device(model, device) #let's move the model to the GPU","0d4a3298":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","305ed72d":"@torch.no_grad()\ndef evaluate(model, val_dl):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_dl]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group[\"lr\"]\n    \ndef fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, weight_decay=0,\n                 grad_clip=None, opt_func=torch.optim.Adam):\n    torch.cuda.empty_cache()\n    \n    history = []\n    opt = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    sched = torch.optim.lr_scheduler.OneCycleLR(opt, max_lr, epochs=epochs,\n                                               steps_per_epoch=len(train_dl))\n    \n    for epoch in range(epochs):\n        model.train()\n        train_loss = []\n        lrs = []\n        for batch in tqdm(train_dl):\n            loss = model.training_step(batch)\n            train_loss.append(loss)\n            loss.backward()\n            \n            if grad_clip:\n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n                \n            opt.step()\n            opt.zero_grad()\n            \n            lrs.append(get_lr(opt))\n            sched.step()\n            \n        result = evaluate(model, val_dl)\n        result[\"train_loss\"] = torch.stack(train_loss).mean().item()\n        result[\"lrs\"] = lrs\n        model.epoch_end(epoch, epochs, result)\n        history.append(result)\n    return history","456939c6":"result = evaluate(model, val_dl) #let's check the model performance before training it\nresult","ca829bf0":"model.freeze()","fb517815":"epochs = 10\nmax_lr = 10e-4\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","2b870bb1":"%%time\n\nhistory = fit_one_cycle(epochs, max_lr, model, train_dl, val_dl,\n                       weight_decay=weight_decay, grad_clip=grad_clip,\n                       opt_func=opt_func)","e13dd27d":"model.unfreeze()","5265aafe":"epochs = 10\nmax_lr = 0.0005\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","dc5e9e2a":"%%time\n\nhistory = fit_one_cycle(epochs, max_lr, model, train_dl, val_dl,\n                       weight_decay=weight_decay, grad_clip=grad_clip,\n                       opt_func=opt_func)","98fd52f6":"val_loss = [x[\"val_loss\"] for x in history]\ntrain_loss = [x.get(\"train_loss\") for x in history]\nplt.plot(val_loss, \"-rx\")\nplt.plot(train_loss, \"-gx\")\nplt.title(\"Loss vs number of epochs\")\nplt.legend([\"Validation loss\", \"Train loss\"])\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")","f4af5fd5":"accuracy = [x[\"val_acc\"] for x in history]\nplt.plot(accuracy, \"-bx\")\nplt.title(\"Acccuracy vs number of epochs\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")","4ca426ed":"import pandas as pd\nfrom torch.utils.data import Dataset\nfrom torchvision.datasets.folder import default_loader","49c9ea4d":"df = pd.read_csv(\"..\/input\/flowers\/flowers\")\ndf.head()","9b9fb17b":"class TestData(Dataset):\n    def __init__(self, root_dir, csv_file, transform=None):\n        self.root_dir = root_dir\n        self.label = pd.read_csv(csv_file)\n        self.transform = transform\n        \n    def __len__(self):\n        return len(self.label)\n    \n    def __getitem__(self, idx):\n        if torch.is_tensor(idx):\n            idx = idx.item()\n        \n        label = self.label.iloc[idx,1]\n        image_path = os.path.join(self.root_dir, f\"{self.label.iloc[idx,0]}.jpeg\")\n        \n        image = default_loader(image_path)\n        \n        if self.transform:\n            image = self.transform(image)\n        \n        return (image, label)","1e8145f4":"TEST_DIR = \"..\/input\/104-flowers-garden-of-eden\/jpeg-224x224\/test\"","17f752e6":"transform_test = T.Compose([\n    T.ToTensor()\n])\n\ntest_ds = TestData(\n    root_dir=TEST_DIR,\n    csv_file=\"..\/input\/flowers\/flowers\",\n    transform=transform_test\n\n)","4b7df4b9":"def predict_image(image):\n    xb = to_device(image.unsqueeze(0), device)\n    out = model(xb)\n    _, preds = torch.max(out, dim=1)\n    prediction = preds[0].item()\n    return prediction","2d9bea81":"image, label = test_ds[20]\nprint(\"Label:\", label)\nprint(\"Prediction:\", predict_image(image))\nplt.imshow(image.permute(1,2,0))","76a9e7dc":"## Preparing the data","fba83504":"## Moving to the GPU","cc656ffb":"## The model","dabb559d":"This is a helper method to show a batch of images and make sure that everything is working.","71ed1b7f":"## Importing required modules","b335ad95":"# Flowers image classification","15fb051b":"## Model performance","af29faec":"    The following code will be used to make sure a GPU is being used","bb8c184a":"The data loader will allow to access the data in batches.","a83a46de":"## Predictions"}}