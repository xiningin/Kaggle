{"cell_type":{"09224a0a":"code","712de76e":"code","e850cf35":"code","764b254a":"code","de8cfafd":"code","72174d0c":"code","a3358815":"markdown","edef87ca":"markdown","20d8e4e0":"markdown","ac600dfa":"markdown","299c0edc":"markdown"},"source":{"09224a0a":"# add necessary pckgs here:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n","712de76e":"# Loading data into dataframes\ntrain_df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\") # loading train data \ntest_df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\") # loading test data","e850cf35":"# (Quick) Example: \n\n# Print out shape of data (rows, coloumns) for train and test\nprint('Shape of train data: ',train_df.shape, '\\nShape of test data: ' ,test_df.shape)\n\n# Summary stats\nprint(train_df.describe())\n\n\n# corelation plot\ncorrmat = train_df.corr()\ntop_corr_features = corrmat.index[abs(corrmat[\"SalePrice\"])>0.6]\nplt.figure(figsize=(6,6))\ng = sns.heatmap(\n    train_df[top_corr_features].corr(), \n    annot = True, cmap = \"Blues\", \n    cbar = False, vmin = .5, \n    vmax = .7, square=True\n    )\n\n","764b254a":"# NOTE: GrLivArea and OverallQual is strongly correlated to SalePrice. I'll use these two features for my model down below. \n#-----------------------------\n# Your EDA code goes here","de8cfafd":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\n# pull data into target (y) and predictors (X)\ny = train_df.SalePrice\npred_cols = ['OverallQual', 'GrLivArea']\n\n# Create training predictors data\nX = train_df[pred_cols]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y ,test_size=0.3, random_state=0)\n\n# Fit model\nmy_model = RandomForestRegressor()\nmy_model.fit(X_train, y_train)\n\n# Accuracy eval\nprint(my_model.score(X_test, y_test)) # - 0.7522067150061065 (around 75%) - decent, but can definitevly be improved (This is up to you to do)\n\n# Predict\n# Treat the test data in the same way as training data. In this case, pull same columns.\ntest_X = test_df[pred_cols]\n# Use the model to make predictions\npredicted_prices = my_model.predict(test_X)\n# We will look at the predicted prices to ensure we have something sensible.\nprint(predicted_prices)\n\n \n","72174d0c":"my_submission = pd.DataFrame({'Id': test_df.Id, 'SalePrice': predicted_prices})\n# you could use any filename. I went with submission here\nmy_submission.to_csv('submission.csv', index=False)","a3358815":"# Modeling\n\nTry a few models. I'll showcase a simple model to kick off. - inspired by Dan S. Becker: https:\/\/www.kaggle.com\/dansbecker\/submitting-from-a-kernel","edef87ca":"# EDA\n\nSome things you could look at:\n\n* Data exploration\n* Data cleaning\n* Outlier Detection\n* Feature Engineering\n\n... etc","20d8e4e0":"# Introduction\n**Please feel free to use this notebook as a template for your project**. \n\nGoal:\n> It is your job to predict the sales price for each house. For each Id in the test set, you must predict the value of the SalePrice variable. \n\n\n","ac600dfa":"# Submission\n\nWrites your predictions to a csv file.","299c0edc":"## RandomForestRegressor"}}