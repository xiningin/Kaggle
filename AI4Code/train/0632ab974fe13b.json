{"cell_type":{"491e9898":"code","1c15dc43":"code","b4115936":"code","dacae955":"code","77d1dc7c":"code","e613af1c":"code","b0719c74":"code","8be00c4d":"code","79981b28":"code","a9ea489b":"code","b817787e":"code","3790728d":"code","466cd8a7":"code","ce8fb272":"code","6b7f7c1e":"code","5931bbb0":"markdown","d97c98f7":"markdown","271b6e68":"markdown","6fa1d787":"markdown","aa02dd73":"markdown"},"source":{"491e9898":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=Warning)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c15dc43":"df = pd.read_csv(\"\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv\", low_memory=False)\nprint(df.shape)\ndf.head().style.set_properties(**{'background-color':'black',\n                                     'color': '#03e8fc'})","b4115936":"#Code by Lucas Abrah\u00e3o https:\/\/www.kaggle.com\/lucasabrahao\/trabalho-manufatura-an-lise-de-dados-no-brasil\n\ndf[\"pct_black\/hispanic\"].value_counts().plot.bar(color=['DarkSlateBlue','crimson'], title='Ethnicity Percent');","dacae955":"!pip install squarify","77d1dc7c":"#Code by Roshan Sharma https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n\nfrom wordcloud import WordCloud\n\nplt.rcParams['figure.figsize'] = (15, 15)\nwordcloud = WordCloud(background_color = 'Blue', colormap='Reds', width = 1200,  height = 1200, max_words = 100).generate(str(df[\"state\"]))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Locale Closures during Pandemic',fontsize = 20)\nplt.show()","e613af1c":"#Code by Roshan Sharma https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n\n# looking at the frequency of ALS Enrollment Status\n\nplt.rcParams['figure.figsize'] = (16, 8)\ncolor = plt.cm.copper(np.linspace(0, 1, 40))\ndf[\"state\"].value_counts().head(50).plot.bar(color = 'r')\nplt.title('States during Pandemic', fontsize = 20)\nplt.xticks(rotation = 90 )\nplt.grid()\nplt.show()","b0719c74":"df['locale'].value_counts()","8be00c4d":"df['locale'] = 'locale'\nlocale = df.truncate(before = -1, after = 15)","79981b28":"import networkx as nx\n\nlocale = nx.from_pandas_edgelist(locale, source = 'locale', target = \"state\", edge_attr = True)","a9ea489b":"#Code by Roshan Sharma https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (20, 20)\npos = nx.spring_layout(locale)\ncolor = plt.cm.Wistia(np.linspace(0, 15, 1))\nnx.draw_networkx_nodes(locale, pos, node_size = 15000, node_color = 'r')\nnx.draw_networkx_edges(locale, pos, width = 3, alpha = 0.6, edge_color = 'blue')\nnx.draw_networkx_labels(locale, pos, font_size = 20, font_family = 'sans-serif')\nplt.axis('off')\nplt.grid()\nplt.title('Closure during Pandemic', fontsize = 40)\nplt.show()","b817787e":"y = df[\"state\"].value_counts().head().to_frame()\ny.index\ny.head()","3790728d":"#Code by Roshan Sharma https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n\nimport squarify\n# plotting a tree map\n\nplt.rcParams['figure.figsize'] = (16, 16)\ncolor = plt.cm.cool(np.linspace(0, 1,10))\nsquarify.plot(sizes = y.values, label = y.index, alpha=.8, color = color)\nplt.title('Tree Map of States')\nplt.axis('off')\nplt.show()","466cd8a7":"df['states'] = 'State'\nstates = df.truncate(before = -1, after = 15)\n\ndf.head()","ce8fb272":"import networkx as nx\n\nstates = nx.from_pandas_edgelist(states, source = 'states', target = 'locale', edge_attr = True)","6b7f7c1e":"#Code by Roshan Sharma https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n\n\nplt.rcParams['figure.figsize'] = (20, 20)\npos = nx.spring_layout(states)\ncolor = plt.cm.Wistia(np.linspace(0, 15, 1))\nnx.draw_networkx_nodes(states, pos, node_size = 15000, node_color = color)\nnx.draw_networkx_edges(states, pos, width = 3, alpha = 0.6, edge_color = 'black')\nnx.draw_networkx_labels(states, pos, font_size = 20, font_family = 'sans-serif')\nplt.axis('off')\nplt.grid()\nplt.title('Locales', fontsize = 40)\nplt.show()","5931bbb0":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">NetworkX<\/span><\/h1><br>\n\nNetworkX is a Python package for the creation, manipulation, and study of the structure, dynamics, and functions of complex networks.\n\nSoftware for complex networks:\n\nData structures for graphs, digraphs, and multigraphs\n\nMany standard graph algorithms\n\nNetwork structure and analysis measures\n\nGenerators for classic graphs, random graphs, and synthetic networks\n\nNodes can be \"anything\" (e.g., text, images, XML records)\n\nEdges can hold arbitrary data (e.g., weights, time-series)\n\nOpen source 3-clause BSD license\n\nWell tested with over 90% code coverage\n\nAdditional benefits from Python include fast prototyping, easy to teach, and multi-platform\n\nhttps:\/\/networkx.org\/","d97c98f7":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Squarified Tree Map Algorithm<\/span><\/h1><br>\n\nThe squarified tree map algorithm, was invented by Mark Bruls, Kees Huizing, and Jarke J. van Wijk in a 2000 paper as an improvement on the \u201cclassic\u201d tree map, which was in turn invented by Ben Shneiderman in a pioneering 1992 paper. This algorithm is used to lay out probably all the pleasing tree maps you see around.\n \nhttps:\/\/www.huy.dev\/squarified-tree-map-reasonml-part-1-2019-03\/","271b6e68":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRY94C7mADg5f06YKJq9RItWu3oBZstQxJO9w&usqp=CAU)networkx.org","6fa1d787":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRUOTST0O9DS5HuGWTDEKqeZlD7YMjSzMzBMQ&usqp=CAU)analyticssteps.com","aa02dd73":"#That is all for now. Plotting with Networkx and Squarify."}}