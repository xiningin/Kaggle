{"cell_type":{"46780d40":"code","93b6d3bd":"code","a04f0528":"code","06ead36b":"code","6be9fc50":"code","c7942198":"code","c56fa0f1":"code","0f961ad4":"code","6027663b":"code","9a86cfc7":"code","e5f695a2":"code","598dfbab":"code","0a452092":"code","382d4bb7":"code","acd95583":"code","b0375e6d":"code","4adf7393":"code","a80172cd":"code","c24171b2":"code","567c928d":"code","40bb3c58":"code","41d28532":"code","6ce8b0e3":"code","d90265e9":"code","37ca0804":"code","84a23172":"code","6bec16bd":"code","75c98eca":"code","039fd81a":"code","2fcdd9cb":"code","ef597cef":"code","3616c1b0":"code","325866e5":"code","c28f3080":"code","632765dc":"code","7487576a":"code","631c716a":"code","36444509":"code","f026eb7d":"code","32be6e6f":"code","bb632e8e":"code","ed916011":"code","6233d41d":"code","8366f57f":"code","4a534a4f":"code","c739ef9c":"code","d20f42c1":"code","781938eb":"code","128ffcd9":"code","bf66d548":"code","89ec5244":"code","ce27070b":"code","9a1e3033":"code","203ef9f4":"code","e9e0a03f":"code","4212f0b3":"code","cf6e5846":"code","50f1bbd7":"code","974fd8b7":"code","e354b5d9":"code","9bdacf5f":"code","9289a0cd":"code","db5814a6":"code","93ddc37d":"code","97497221":"code","1eae05eb":"code","92b4151b":"code","93fb470e":"code","a781cbb4":"code","1fbc6455":"code","b42a2616":"code","c4eab33f":"code","0e974dff":"code","3d1cb9af":"code","e97829c3":"code","066ffd12":"code","4730e551":"code","fad929e6":"code","f0141c17":"code","bcf8e736":"code","f1db04cd":"code","17c14434":"code","18f0969a":"code","2f6ee746":"code","05f9e3f9":"code","97589144":"code","aaf56de2":"code","9fc0e3aa":"code","39bb5e36":"markdown","d43e0c04":"markdown","1238408a":"markdown","5122ccd7":"markdown","67960c08":"markdown","f4d67274":"markdown","867385a1":"markdown"},"source":{"46780d40":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nplt.rcParams['axes.titlesize'] = 24\nplt.rcParams['axes.labelsize'] = 16\nplt.rcParams['lines.linewidth'] = 3\nplt.rcParams['lines.markersize'] = 10\nplt.rcParams['ytick.labelsize'] = 16\nplt.rcParams['xtick.labelsize'] = 16\nplt.rcParams[\"figure.figsize\"] = '12', '8'\n#plt.xticks(rotation=85)\n","93b6d3bd":"data = pd.read_csv(\"..\/input\/airbnb-price-prediction\/train.csv\")\ndata.head()","a04f0528":"data.info()","06ead36b":"# Prinintg all unique values of the objects data types in the dataset\nfor column in data.columns:\n  if (data[column].dtype) == 'object' and column != 'zipcode' and column != 'neighbourhood':  \n    print(column,\"\\n--------------------------\")\n    print(data[column].unique())\n    print(\"\\n------------------------------\")","6be9fc50":"def bar_plot_object(title,data):\n  x = list(data.value_counts().keys())\n  x = x[::-1]\n  y = list(data.value_counts())\n  y = y[::-1]\n  plt.barh(x,y)\n  plt.title(title)\n  return None","c7942198":"def explore_col(column):\n  bar_plot_object(column+\" histogram\",data[column])\n  print(column,'description\\n', data[column].describe())\n  print('Top 5 frequent:',data[column].value_counts()[:5].index.tolist())","c56fa0f1":"def pie_col(column):\n  data[column].value_counts().plot.pie(autopct='%1.0f%%')","0f961ad4":"plt.rcParams['xtick.labelsize'] = 16\nplt.rcParams['ytick.labelsize'] = 12\nimport matplotlib as mpl\nmpl.rcParams['font.size'] = 20\nexplore_col('property_type')","6027663b":"plt.rcParams['xtick.labelsize'] = 16\nplt.rcParams['ytick.labelsize'] = 17\nexplore_col('room_type')","9a86cfc7":"explore_col('bed_type')","e5f695a2":"explore_col('cancellation_policy')","598dfbab":"pie_col('cancellation_policy')","0a452092":"explore_col('city')","382d4bb7":"pie_col('city')","acd95583":"plt.rcParams['xtick.labelsize'] = 16\n\n#explore_col('neighbourhood')\n#pie_col('neighbourhood')\nneighbourhood_morethan_1000 = data.neighbourhood.value_counts()\nneighbourhood_morethan_1000 [neighbourhood_morethan_1000 >1000].plot.pie(autopct='%1.0f%%')","b0375e6d":"neighbourhood_morethan_1000 [neighbourhood_morethan_1000 >1000].plot.bar()","4adf7393":"def plt_density(column,title=None):\n  if title==None:\n    title=column\n  plt.figure(figsize = (15, 8))\n  sns.distplot(data[column])\n  plt.title(title)\n  plt.show()\n  return","a80172cd":"years =  pd.to_datetime(data['host_since'], format='%Y-%m-%d', errors='coerce').dt.year\nyears.value_counts().plot.bar()","c24171b2":"years =  pd.to_datetime(data['first_review'], format='%Y-%m-%d', errors='coerce').dt.year\nyears.value_counts().plot.bar()","567c928d":"years =  pd.to_datetime(data['last_review'], format='%Y-%m-%d', errors='coerce').dt.year\nyears.value_counts().plot.bar()","40bb3c58":"years_of_host_created = pd.DataFrame({\n    'year of host created':pd.to_datetime(data['host_since'], format='%Y-%m-%d', errors='coerce').dt.year.fillna(0),\n    'log_price': data['log_price']\n})\nplt.figure(figsize=(12,4))\n\nsns.countplot(x=\"year of host created\", data=years_of_host_created)\nplt.title('Host since')\nplt.show()","41d28532":"years_of_first_review = pd.DataFrame({\n    'year of first review':pd.to_datetime(data['first_review'], format='%Y-%m-%d', errors='coerce').dt.year.fillna(0),\n    'log_price': data['log_price']\n})\nplt.figure(figsize=(12,4))\n\nsns.countplot(x=\"year of first review\", data=years_of_first_review)\nplt.title('Years of first review')\nplt.show()","6ce8b0e3":"years_of_last_review = pd.DataFrame({\n    'year of last review':pd.to_datetime(data['last_review'], format='%Y-%m-%d', errors='coerce').dt.year.fillna(0),\n    'log_price': data['log_price']\n})\nplt.figure(figsize=(12,4))\n\nsns.countplot(x=\"year of last review\", data=years_of_last_review)\nplt.title('Years of last review')\nplt.show()","d90265e9":"data.accommodates.value_counts().plot.bar()","37ca0804":"data.bathrooms.value_counts().plot.bar()","84a23172":"#explore_col('host_response_rate')\nhost_response_rate = data.host_response_rate.value_counts()\nexplode = (0.1, 0.2, 0.1)\nhost_response_rate [host_response_rate > 1000].plot.pie(shadow=True, startangle=90,autopct='%1.0f%%')","6bec16bd":"data.bedrooms.value_counts().plot.bar()","75c98eca":"data.beds.value_counts().plot.bar()","039fd81a":"plt_density('log_price')","2fcdd9cb":"data.log_price.describe()","ef597cef":"data.review_scores_rating.plot.box()","3616c1b0":"data.number_of_reviews.plot()","325866e5":"pie_col('host_has_profile_pic')","c28f3080":"pie_col('host_identity_verified')","632765dc":"pie_col('instant_bookable')","7487576a":"#Composite type attr.\namenities_col = []\namenities_map = {}\nfor s in data.amenities:\n  s = s.replace('{','')\n  s = s.replace('}','')\n  s = s.replace('\"','')\n  s = s.split(',')\n  amenities_col.append(max(len(s)-1,0))\n  for k in s:\n    if amenities_map.get(k) != None:\n      amenities_map[k] +=1 \n    else:\n      amenities_map[k] = 1","631c716a":"sorted_values = sorted(amenities_map.values()) # Sort the values\nsorted_dict = {}\nfor i in sorted_values:\n    for k in amenities_map.keys():\n        if amenities_map[k] == i:\n            sorted_dict[k] = amenities_map[k]\n            break\n\nkeys = sorted_dict.keys()\n\nvalues = sorted_dict.values()\n\nplt.xticks(fontsize=12)\nn = 20\nplt.barh(list(keys)[-n:], list(values)[-n:], align='center')\n","36444509":"data.describe()","f026eb7d":"data.info()","32be6e6f":"data.isnull().sum().plot.barh()","bb632e8e":"cleaned_data = data.drop(['id','description','first_review','last_review','host_since','host_has_profile_pic','name','thumbnail_url','zipcode','neighbourhood'],axis=1)\ncleaned_data.columns","ed916011":"# Those columns are needed to be processed\n\"\"\"\n 5   bathrooms               73911 non-null  float64\n 10  host_identity_verified  73923 non-null  object \n 11  host_response_rate      55812 non-null  object \n 15  neighbourhood           67239 non-null  object \n 17  review_scores_rating    57389 non-null  float64\n 18  bedrooms                74020 non-null  float64\n 19  beds                    73980 non-null  float64\n\"\"\"\ncleaned_data.info()","6233d41d":"# Numeric values fill with mean of each column of it\ncleaned_data.bathrooms = cleaned_data.bathrooms.fillna(int(cleaned_data.bathrooms.mean()))\ncleaned_data.bedrooms = cleaned_data.bedrooms.fillna(int(cleaned_data.bedrooms.mean()))\ncleaned_data.beds = cleaned_data.beds.fillna(int(cleaned_data.beds.mean()))\ncleaned_data.review_scores_rating = cleaned_data.review_scores_rating.fillna(cleaned_data.review_scores_rating.mean())","8366f57f":"# Fixing host response rate and change its value to the correct data type\ncleaned_data.host_response_rate = cleaned_data.host_response_rate.apply(lambda x: int(x[:len(x)-1])\/100 if isinstance(x,str) else x)\ncleaned_data.host_response_rate = cleaned_data.host_response_rate.fillna(cleaned_data.host_response_rate.mean())","4a534a4f":"# Changing all boolean objects to 0\/1\ncleaned_data.host_identity_verified = cleaned_data.host_identity_verified.apply(lambda x: True if x=='t' else False)","c739ef9c":"cleaned_data.instant_bookable = cleaned_data.instant_bookable.apply(lambda x: True if x=='t' else False)","d20f42c1":"cleaned_data.info()","781938eb":"# Factorization of categorical columns\n\"\"\"\n 1   property_type           74111 non-null  object # 35 <-----------------\n 2   room_type               74111 non-null  object # 3 \n 6   bed_type                74111 non-null  object # 5\n 7   cancellation_policy     74111 non-null  object # 5\n 9   city                    74111 non-null  object # 6\n\"\"\"\npass","128ffcd9":"def col_price(column):\n  plot_data = pd.DataFrame({\n      'data': cleaned_data[column],\n      'log_price': cleaned_data.log_price\n  })\n  sns.countplot(x=\"data\", data=plot_data)\n  plt.title(column+' with log price')\n  plt.show()\n\n\n  plt.figure(figsize=(12,8))\n  g = sns.boxplot(data=plot_data,orient='v', x = 'data', y = 'log_price')\n  plt.title(column+' with log price')\n  plt.show()\n  return g","bf66d548":"col_price('room_type')","89ec5244":"cleaned_data.room_type.unique()","ce27070b":"cleaned_data.room_type = cleaned_data.room_type.apply(lambda x: 3 if x=='Entire home\/apt' else 2 if x=='Private room' else 1)","9a1e3033":"col_price('bed_type')","203ef9f4":"cleaned_data.bed_type.unique()","e9e0a03f":"cleaned_data.bed_type = cleaned_data.bed_type.apply(lambda x: 2 if x=='Real Bed' else 1)","4212f0b3":"col_price('cancellation_policy')","cf6e5846":"cleaned_data.cancellation_policy.unique()","50f1bbd7":"cleaned_data.cancellation_policy = cleaned_data.cancellation_policy.apply(lambda x: 3 if x=='super_strict_60' else 2 if x=='super_strict_30' else 1)","974fd8b7":"col_price('city')","e354b5d9":"cleaned_data.city.unique()","9bdacf5f":"cleaned_data = pd.concat([cleaned_data, pd.get_dummies(cleaned_data['city'], prefix='city')],axis=1)","9289a0cd":"cleaned_data = cleaned_data.drop(['city'],axis=1)","db5814a6":"cleaned_data = cleaned_data.drop(['latitude',\t'longitude'],axis=1)","93ddc37d":"cleaned_data.info()","97497221":"cleaned_data['amenities_count'] = pd.Series(amenities_col)","1eae05eb":"cleaned_data = cleaned_data.drop(['amenities'], axis=1)","92b4151b":"cleaned_data.review_scores_rating = cleaned_data.review_scores_rating\/100","93fb470e":"types = cleaned_data.property_type.unique()\npt_map = {}\nfor t in types:\n  m = cleaned_data[cleaned_data.property_type == t]['log_price'].mean()\n  pt_map[t] = m\nsorted_values = sorted(pt_map.values()) # Sort the values\nsorted_dict = {}\nfor i in sorted_values:\n    for k in pt_map.keys():\n        if pt_map[k] == i:\n            sorted_dict[k] = pt_map[k]\n            break\ncleaned_data.property_type = cleaned_data.property_type.apply(lambda x : pt_map[x])","a781cbb4":"cleaned_data.info()","1fbc6455":"import plotly.figure_factory as ff\ncorrs = cleaned_data.corr()\nfigure = ff.create_annotated_heatmap(\n    z=corrs.values,\n    x=list(corrs.columns),\n    y=list(corrs.index),\n    annotation_text=corrs.round(2).values,\n    showscale=True)\nfigure.show()","b42a2616":"cleaned_data.corr()","c4eab33f":"## Removing correlated features and unneeded ones\n#cleaned_data = cleaned_data.drop(['beds','bathrooms','bedrooms','instant_bookable','number_of_reviews','host_response_rate'],axis=1)","0e974dff":"#cleaned_data = cleaned_data.drop(['host_response_rate',],axis=1)","3d1cb9af":"import plotly.figure_factory as ff\ncorrs = cleaned_data.corr()\nfigure = ff.create_annotated_heatmap(\n    z=corrs.values,\n    x=list(corrs.columns),\n    y=list(corrs.index),\n    annotation_text=corrs.round(2).values,\n    showscale=True)\nfigure.show()","e97829c3":"import plotly.express as px\ndef create_map(city):\n    price_view = lambda x: 'price: ' + str(round(x, 2))\n\n    if city in {'NYC', 'LA'}:\n        fraction = 0.2\n    else:\n        fraction = 0.6\n        \n    df_temp = data[data['city'] == city].sample(frac=fraction,random_state=101)\n    df_temp['log_price'] = np.round(df_temp['log_price'], 2)\n    \n    fig = px.scatter_mapbox(df_temp, \n                            lat=\"latitude\", \n                            lon=\"longitude\", \n                            hover_data=[\"log_price\"],\n                            color='log_price', \n                            zoom=10)\n    \n    fig.update_layout(\n            title = f'Airbnb prices in {city}',\n            geo_scope='usa',\n            width=1000, \n            height=600,\n            mapbox_style=\"white-bg\",\n            mapbox_layers=[{\n                 \"below\": 'traces',\n                 \"sourcetype\": \"raster\",\n                 \"sourceattribution\": \"United States Geological Survey\",\n                 \"source\": [\"https:\/\/basemap.nationalmap.gov\/arcgis\/rest\/services\/USGSImageryOnly\/MapServer\/tile\/{z}\/{y}\/{x}\"]\n              }]\n    )\n    #fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n    #fig.update_geos(fitbounds=\"locations\")\n    fig.show()\n    \n#city = interact(lambda x: create_map(x), x=['NYC', 'LA', 'SF', 'DC', 'Chicago', 'Boston'])  #widget\ncreate_map('NYC')","066ffd12":"import pandas as pd\nimport pandas as pd\nfrom mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules\n\nfrequent_itemsets = apriori(cleaned_data[['cleaning_fee','host_identity_verified','instant_bookable']], min_support=0.07, use_colnames=True)\nfrequent_itemsets\n","4730e551":"property_types = data.property_type.unique()\nfor pt in property_types:\n  s = data.property_type == pt\n  print('Support of',pt,np.sum(s)\/len(s))","fad929e6":"arr = data.city.unique()\nprint(arr)\nfor ai in arr:\n  s = data.city == ai\n  print('Support of',ai,np.sum(s)\/len(s))","f0141c17":"pp_data = cleaned_data","bcf8e736":"# Spliting the data\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler() \ntrain, val  = train_test_split(pp_data, test_size=0.2)\nX_train = train.drop(['log_price'], axis=1)\n#X_train = scaler.fit_transform(X_train)\ny_train = train.log_price\nX_val = val.drop(['log_price'], axis=1)\n#X_val = scaler.transform(X_val) \ny_val = val.log_price\n","f1db04cd":"def analysis(model, X_train, X_test, y_train, y_test):\n    \n    prediction_test = model.predict(X_test)\n    prediction_train = model.predict(X_train)\n        \n    \n    show_metrics(prediction_test, prediction_train, y_test, y_train)\n    \n    sns.regplot(x = y_test, y = prediction_test, fit_reg=False)\n    plt.title('Prediction and real')\n    plt.show()\n\n    sns.distplot(y_test - prediction_test, bins = 50)\n    plt.title('Error variance')\n    plt.show()","17c14434":"from sklearn import metrics\nfrom scipy import stats\n\ndef show_metrics(prediction_test, prediction_train, y_test, y_train):\n    MAE = round(metrics.mean_absolute_error(y_test, prediction_test), 2)\n    MSE = round(metrics.mean_squared_error(y_test, prediction_test), 2)\n    RMSE = round(np.sqrt(metrics.mean_squared_error(y_test, prediction_test)), 2)\n    RMSE_ratio_test= round(np.sqrt(metrics.mean_squared_error(y_test, prediction_test)) \/ np.mean(y_test),3)\n    RMSE_ratio_train = round(np.sqrt(metrics.mean_squared_error(y_train, prediction_train)) \/ np.mean(y_train),3)\n    R_2_test = round(metrics.explained_variance_score(y_test, prediction_test), 2)\n    R_2_train = round(metrics.explained_variance_score(y_train, prediction_train), 2)\n    \n    metrics_data = pd.DataFrame(data = [MAE, MSE, RMSE, RMSE_ratio_test, \n                                    RMSE_ratio_train, R_2_test, R_2_train]).T\n    \n    metrics_data.columns = ['MAE', 'MSE', 'RMSE', 'RMSE_ratio_test', \n                                    'RMSE_ratio_train', 'R_2_test', 'R_2_train']\n    display(metrics_data)","18f0969a":"from sklearn.ensemble import RandomForestRegressor\n\nrfm = RandomForestRegressor(\n          max_depth = 10,\n          n_jobs = -1, \n          n_estimators = 10\n)\nrfm.fit(X_train, y_train)\nanalysis(\n    model = rfm, \n    X_train = X_train,\n    X_test = X_val,\n    y_train = y_train,\n    y_test =  y_val\n)\n","2f6ee746":"import xgboost as xgb\nfrom xgboost import plot_importance\nfrom sklearn.metrics import  mean_squared_error, r2_score\n\n# Running model a XGB Regressor\nmodel = xgb.XGBRegressor()\n\n# Fit the model on training data\nmodel.fit(X_train, y_train)\n\n# Predict\npred_train = model.predict(X_train)\n\n# Validate\npred_val = model.predict(X_val)\n\nprint(\"\\nTraining MSE:\", round(mean_squared_error(y_train, pred_train),4))\nprint(\"Validation MSE:\", round(mean_squared_error(y_val, pred_val),4))\nprint(\"\\nTraining r2:\", round(r2_score(y_train, pred_train),4))\nprint(\"Validation r2:\", round(r2_score(y_val, pred_val),4))","05f9e3f9":"plot_importance(model)","97589144":"\nanalysis(\n    model = model, \n    X_train = X_train,\n    X_test = X_val,\n    y_train = y_train,\n    y_test =  y_val\n)\n","aaf56de2":"from yellowbrick.regressor import ResidualsPlot\n\nvisualizer = ResidualsPlot(model)\n\nvisualizer.fit(X_train, y_train)  # Fit the training data to the visualizer\nvisualizer.score(X_val, y_val)  # Evaluate the model on the test data","9fc0e3aa":"from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom scipy import stats\nfrom sklearn.naive_bayes import MultinomialNB\n\nmodel2 = LinearRegression()\nmodel2.fit(X_train, y_train)\nanalysis(\n    model = model2, \n    X_train = X_train,\n    X_test = X_val,\n    y_train = y_train,\n    y_test =  y_val\n)\n","39bb5e36":"# **Data associations and Insights**","d43e0c04":"# **Data Exploration and Visualization**","1238408a":"# **Pre-processing and Features Extraction**","5122ccd7":"# **Model selection and tuning and Results\/Evaluations**","67960c08":"# **Data Downloading**","f4d67274":"# **Data Reading**","867385a1":"# Airbnb Price Prediction Challenge\n- Mohamed Mokhtar,"}}