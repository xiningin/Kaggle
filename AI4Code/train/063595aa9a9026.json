{"cell_type":{"7c4e10d6":"code","897ec449":"code","ac5ddb78":"code","3c0e22bd":"code","62af47e1":"code","686702d4":"code","84d37ffc":"code","19986ee7":"code","58685e45":"code","2631039f":"code","e6831e11":"code","a5660eef":"code","2b40c65b":"code","98c3bb2b":"code","10aef620":"code","558435b3":"code","b2b6b624":"code","6e9dfb1f":"code","fde283d6":"code","57fe22dd":"code","31e3fa85":"code","8308dfe9":"code","13ad762f":"code","3cfc23c7":"code","31831dc5":"code","7fc12144":"code","eb929ed9":"code","e3d6fcd3":"code","8dd0bd00":"code","899b0b11":"code","325d9065":"code","65f2d748":"code","889d8d1d":"code","1f2a8a5e":"code","09004e85":"code","2ffaa04f":"code","c61fd6fe":"code","98643d4d":"code","19ebb8cb":"code","aa187a6d":"code","7981e522":"code","521b7c9e":"code","9c86b5b4":"code","b36f5c0f":"code","45296462":"code","a218cfa3":"code","b36c5c46":"code","ced05135":"code","b023c3ee":"code","32698a1d":"code","9bfe1db8":"code","eaec76a5":"code","70f2fd72":"code","1c2abcd8":"code","00d03e51":"code","140e3bba":"code","b67f4ecb":"code","680849d1":"code","6243463c":"code","a1c4be15":"code","49ef35d3":"code","a25cf0a2":"code","baf4d084":"code","907c884c":"code","bc7bc23b":"markdown","16bea2d4":"markdown","e49d7911":"markdown","1db1eeb5":"markdown","d75d2e35":"markdown","e064d549":"markdown","b96f4e4e":"markdown","ee0db69d":"markdown","3bf32fe0":"markdown","201a2911":"markdown","43c757a4":"markdown","de2f6db7":"markdown","42dc60f9":"markdown","24b54b49":"markdown","9e2af7ca":"markdown","a9374ffe":"markdown","0929b1a5":"markdown","a4e79b51":"markdown","de700305":"markdown","e52a2bff":"markdown","999523ed":"markdown","f9f65b32":"markdown","4d6e0974":"markdown","fe90a368":"markdown","25aeb4ca":"markdown"},"source":{"7c4e10d6":"import pandas as pd","897ec449":"train=pd.read_csv('C:\/Users\/kanishk\/Desktop\/titanic data\/train.csv')\ntest=pd.read_csv('C:\/Users\/kanishk\/Desktop\/titanic data\/test.csv')","ac5ddb78":"train.head()","3c0e22bd":"train.shape","62af47e1":"test.head()","686702d4":"test.shape","84d37ffc":"train.info()","19986ee7":"train.isnull().sum()","58685e45":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()#setting seaborn default for plots","2631039f":"def bar_chart(feature):\n    survived=train[train['Survived']==1][feature].value_counts()\n    dead=train[train['Survived']==0][feature].value_counts()\n    df=pd.DataFrame([survived,dead])\n    df.index=['Survived','Dead']\n    df.plot(kind='bar',stacked=False,figsize=(10,5))","e6831e11":"bar_chart('Sex')","a5660eef":"bar_chart('Pclass')","2b40c65b":"bar_chart('Pclass')","98c3bb2b":"bar_chart('SibSp')","10aef620":"bar_chart('Parch')","558435b3":"bar_chart('Embarked')","b2b6b624":"train.head(10)","6e9dfb1f":"train_test_data=[train,test]#combining train and test dataset\nprint(train_test_data)","fde283d6":"for dataset in train_test_data:\n    dataset['Title']=dataset['Name'].str.extract('([A-Za-z]+)\\.',expand=False)","57fe22dd":"train['Title'].value_counts()","31e3fa85":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","8308dfe9":"train.head()","13ad762f":"test.head()","3cfc23c7":"bar_chart('Title')","31831dc5":"# delete unnecessary feature from dataset\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","7fc12144":"sex_mapping={\"male\":0,\"female\":1}\nfor dataset in train_test_data:\n    dataset['Sex']=dataset['Sex'].map(sex_mapping)","eb929ed9":"bar_chart('Sex')","e3d6fcd3":"train.head(100)","8dd0bd00":"# fill missing age with median age for each title (Mr, Mrs, Miss, Others)\ntrain[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","899b0b11":"train.head(30)\ntrain.groupby(\"Title\")[\"Age\"].transform(\"median\")","325d9065":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","65f2d748":"train.head()","889d8d1d":"bar_chart('Age')","1f2a8a5e":"#4.5.1 filling missing values","09004e85":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","2ffaa04f":"#fill out missing embark with S embark","c61fd6fe":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","98643d4d":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","19ebb8cb":"train.head()","aa187a6d":"# fill missing Fare with median fare for each Pclass\ntrain[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntrain.head(50)\n","7981e522":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","521b7c9e":"train.head()","9c86b5b4":"train.Cabin.value_counts()","b36f5c0f":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","45296462":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","a218cfa3":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","b36c5c46":"# fill missing Fare with median fare for each Pclass\ntrain[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","ced05135":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","b023c3ee":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","32698a1d":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","9bfe1db8":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","eaec76a5":"# Importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","70f2fd72":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","1c2abcd8":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","00d03e51":"# kNN Score\nround(np.mean(score)*100, 2)","140e3bba":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","b67f4ecb":"# kNN Score\nround(np.mean(score)*100, 2)","680849d1":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","6243463c":"# Naive Bayes Score\nround(np.mean(score)*100, 2)","a1c4be15":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","49ef35d3":"round(np.mean(score)*100,2)","a25cf0a2":"clf = KNeighborsClassifier()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","baf4d084":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('Submission.csv', index=False)\n","907c884c":"submission = pd.read_csv('Submission.csv')\nsubmission.head()","bc7bc23b":"# data dictionary\nsurvived:0 =No,1=Yes\n\npclass:Ticket class 1=1st,2=2nd,3=3rd\n\nsibsp:# of siblings\/spouses aboard the titanic\n\nparch:#of parents\/children aboard the titanic\n\nticket:ticket number\n\ncabin:cabin number\n\nembarked:Port of Embarkation \n\nC=Cherbourg,Q=Queenstown,S=Southampton","16bea2d4":"# TITANIC :MACHINE LEARNING from Disaster","e49d7911":"this code confirms women more likely survived than men","1db1eeb5":"# Fare","d75d2e35":"# total rows and columns","e064d549":"# 6.2.4 Naive bayes","b96f4e4e":"# 6.2.1 kNN","ee0db69d":"person who boarded from c survived\nperson boarded fromq more likely dead\nperson boarded from s more likely dead","3bf32fe0":"this chart shows that a person who boarded alone with no parents or cchildren miost likely died\n\nand a person who boarded with 2 or more children and parents survived","201a2911":"# TESTING","43c757a4":"# some age is missing","de2f6db7":"# 4.7 Cabin","42dc60f9":"# Title map\nMr : 0\n\nMiss : 1\n\nMrs :2\n\nOthers:3","24b54b49":"# bar chart for categorical features\n\n.pclass\n\n.sex\n\n.sibSp\n\n.parch\n\n.embarked\n\n.cabin","9e2af7ca":"# 6.2 kNN","a9374ffe":"this shows one with no siblings or spouse most probably died","0929b1a5":"this chart confirms third class passengers died the most\nand first  class survivers survived the most","a4e79b51":"# 6.2.5 SVM","de700305":"# Exploratory data analysis","e52a2bff":"# 5.Modelling","999523ed":"# 6.2 Cross validation(K-fold)","f9f65b32":"# 4.4.2 Binning\n\nBinning\/Converting Numerical Age to Categorical Variable\n\nfeature vector map:\n\nchild: 0\n\nyoung: 1\n\nadult: 2\n\nmid-age: 3\n\nsenior: 4","4d6e0974":"# Sex \nmale:0\nfemale:1","fe90a368":"# 4.5 Embarked","25aeb4ca":"# Feature engineering"}}