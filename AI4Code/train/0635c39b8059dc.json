{"cell_type":{"f3b3fdc3":"code","5350a47f":"code","5d09db5b":"code","bffeb3be":"code","878de561":"code","b1eb01f6":"code","dc44610c":"code","156f280f":"code","f35fc03c":"code","736be598":"code","68aab693":"code","ad3c5e0e":"code","aea1c9c4":"markdown","928a6c1c":"markdown","8b2102e6":"markdown","5b328461":"markdown","1a970574":"markdown","034aacab":"markdown","504f0df9":"markdown","ca5776b5":"markdown","0e795874":"markdown","e6cc7f3d":"markdown","c6f5f3b3":"markdown","0763ba70":"markdown"},"source":{"f3b3fdc3":"import pandas \nimport numpy\nimport random\nimport math\nimport seaborn\n\n# Data Visualization\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n# ML\nimport sklearn\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\n\ntrain_data = pandas.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_data = pandas.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","5350a47f":"corrmat = train_data.corr()\nk = 80 # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0443\u0432\u0438\u0434\u0435\u0442\u044c\nfig, ax = plt.subplots(figsize = (14,14))\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = numpy.corrcoef(train_data[cols].values.T)\nseaborn.set(font_scale=1.25)\nhm = seaborn.heatmap(cm, cbar=True, annot=True, square=True, \n                 fmt='.2f', annot_kws={'size': 10}, \n                 yticklabels=cols.values, xticklabels=cols.values)\nplt.show()\n\ncorrmat = train_data.corr()\nk = 13 # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0443\u0432\u0438\u0434\u0435\u0442\u044c\ncorrmat.nlargest(k, 'SalePrice')['SalePrice']","5d09db5b":"\n#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 GrLivArea\nfig, ax = plt.subplots()\nax.scatter(x = train_data['GrLivArea'], y = train_data['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()\n#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 OverallQual\nfig, ax = plt.subplots()\nax.scatter(x = train_data['OverallQual'], y = train_data['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('OverallQual', fontsize=13)\nplt.show()\n#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 GarageArea\nfig, ax = plt.subplots()\nax.scatter(x = train_data['GarageArea'], y = train_data['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GarageArea', fontsize=13)\nplt.show()\n#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 TotalBsmtSF\nfig, ax = plt.subplots()\nax.scatter(x = train_data['TotalBsmtSF'], y = train_data['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('TotalBsmtSF', fontsize=13)\nplt.show()\n#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 MasVnrArea\nfig, ax = plt.subplots()\nax.scatter(x = train_data['MasVnrArea'], y = train_data['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('MasVnrArea', fontsize=13)\nplt.show()","bffeb3be":"train_data = train_data.drop(train_data[(train_data['OverallQual'] > 9) & (train_data['SalePrice'] < 220000)].index)\ntrain_data = train_data.drop(train_data[(train_data['GrLivArea'] > 4000) & (train_data['SalePrice'] < 300000)].index)\ntrain_data = train_data.drop(train_data[(train_data['TotalBsmtSF'] > 6000)].index)\ntrain_data = train_data.drop(train_data[(train_data['GarageArea'] > 1200) & (train_data['SalePrice'] < 300000)].index)\ntrain_data = train_data.drop(train_data[(train_data['SalePrice'] > 650000)].index)\ntrain_data = train_data.drop(train_data[(train_data['MasVnrArea'] > 1200)].index)","878de561":"train_data.isnull().sum().sort_values(ascending=False).head(20)","b1eb01f6":"Target = 'SalePrice'\ntrain_data.dropna(axis=0, subset=[Target], inplace=True)\n\nall_data = pandas.concat([train_data, test_data],keys=['train','test'])\n\nall_data = all_data.drop(columns=['Id'], axis=1)","dc44610c":"def ResolveMissingValues(df):\n    num_cols = [cname for cname in df.columns if df[cname].dtype in ['int64', 'float64']]\n    dog_cols = [cname for cname in df.columns if df[cname].dtype == \"object\"]\n    values = {}\n    for a in dog_cols:\n        values[a] = 'UNKNOWN'\n    for a in num_cols:\n        mean1=df[a].mean() \n        std1=df[a].std()\n        values[a]=random.randint(int(mean1-std1), int(mean1+std1))\n        \n    df.fillna(value=values, inplace=True)\n    \nResolveMissingValues(all_data)","156f280f":"all_data.isnull().sum().sum()","f35fc03c":"def getObjectColumnsList(df):\n    return [cname for cname in df.columns if df[cname].dtype == \"object\"]\n\ndef PerformOneHotEncoding(df, columnsToEncode):\n    return pandas.get_dummies(df, columns=columnsToEncode)\n\ndog_cols = getObjectColumnsList(all_data)\nall_data = PerformOneHotEncoding(all_data, dog_cols)\nall_data.head()","736be598":"train_data = all_data.loc['train']\ntest_data = all_data.loc['test']\ntrain_data.shape,test_data.shape\n\ntarget = train_data['SalePrice']\ntrain_data = train_data.drop(['SalePrice'], axis=1)\ntest_data = test_data.drop(['SalePrice'], axis=1)\n\nX, y = train_data, target","68aab693":"gbr_reg = GradientBoostingRegressor(n_estimators=2000, learning_rate=0.05,max_depth=3, max_features='sqrt',min_samples_leaf=15, min_samples_split=10,loss='huber')\ngbr_reg.fit(X, y)\npred = gbr_reg.predict(X)\nprint(gbr_reg.score(X, y))\nnumpy.sqrt(mean_squared_log_error(pred, y))","ad3c5e0e":"myPrediction = gbr_reg.predict(test_data)\nsubmission = pandas.DataFrame({\n        \"Id\": list(range(1461, 1461+len(test_data))),\n        \"SalePrice\": myPrediction\n    })\nsubmission.to_csv('submission.csv', index=False)","aea1c9c4":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u0442\u0435\u043f\u043b\u043e\u0432\u0443\u044e \u043a\u0430\u0440\u0442\u0443 \u043f\u043e\u043f\u0430\u0440\u043d\u044b\u0445 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0439 \u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c SalePrice","928a6c1c":"\u0421\u0440\u0435\u0434\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0431\u044b\u043b \u0432\u044b\u0431\u0440\u0430\u043d GradientBoostingRegressor, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0442\u0430\u043a \u0436\u0435 \u0431\u044b\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u044b \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u043e\u043c. ","8b2102e6":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0444\u0430\u0439\u043b","5b328461":"\u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0440\u0430\u0437\u0431\u0440\u043e\u0441\u0430 \u0434\u043b\u044f \u0441\u0430\u043c\u044b\u0445 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u0441 SalePrices \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 : GrLivArea, OverallQual, GarageArea, TotalBsmtSF, MasVnrArea","1a970574":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","034aacab":"\u0420\u0430\u0437\u044c\u0435\u0434\u0435\u043d\u0438\u043c \u0440\u0430\u043d\u0435\u0435 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","504f0df9":"\u0414\u0430\u043b\u0435\u0435 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0432\u0435\u0440\u0448\u0430\u0442\u044c \u0438 \u0441 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u043c\u0438 \u0438 \u0441 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0440\u0430\u0437\u0443\u043c\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u044c\u0435\u0434\u0435\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435.","ca5776b5":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043d\u0435\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432","0e795874":"\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","e6cc7f3d":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0437\u0430\u0433\u043b\u0443\u0448\u043a\u043e\u0439 \"UNKNOWN\", \u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043d\u0430 \u0440\u0430\u043d\u0434\u043e\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435 \u043e\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u043c\u0438\u043d\u0443\u0441 \u0441\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435, \u0434\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u043b\u044e\u0441 \u0441\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435","c6f5f3b3":"\u0414\u0430\u043b\u0435\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435. \u0421\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 n \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0433\u0434\u0435 n \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0442\u0441\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430","0763ba70":"\u041b\u0438\u043a\u0432\u0438\u0434\u0438\u0440\u0443\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b"}}