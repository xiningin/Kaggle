{"cell_type":{"bdd812ac":"code","d70cca3d":"code","7792cba0":"code","863da475":"code","ffa78744":"code","3358fd48":"code","2ff06407":"code","0b30717f":"code","d8345038":"code","0b9f51c9":"code","0a813bb3":"code","4d96dcd7":"code","bb888994":"code","68ee835c":"code","5df71981":"code","ce464193":"code","c738a8a8":"code","c40ab9ec":"code","40e362fb":"code","ae5eb1fe":"code","22f365ec":"code","f37a24e6":"markdown","32b298f4":"markdown","45755a75":"markdown","b32c1ae7":"markdown","fda86e10":"markdown"},"source":{"bdd812ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d70cca3d":"## We will be using BERT for the tweet classification task.  ","7792cba0":"pip install bert-for-tf2","863da475":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\nfrom bert import bert_tokenization\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","ffa78744":"df_train=pd.read_csv(\"..\/input\/nlp-getting-started\/train.csv\")\ndf_test=pd.read_csv(\"..\/input\/nlp-getting-started\/test.csv\")","3358fd48":"df_train.head()","2ff06407":"df_train=df_train.drop([\"id\",\"keyword\",\"location\"],axis=1)\ndf_train.head()","0b30717f":"df_train[df_train[\"target\"]==0].head()","d8345038":"df_train.groupby('target').count().plot.bar()","0b9f51c9":"bert_layer=hub.KerasLayer(\"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-12_H-768_A-12\/1\",trainable=True, name = 'keras_bert_layer')\n\nvocab_file=bert_layer.resolved_object.vocab_file.asset_path.numpy()\n\ndo_lower_case=True\n\ntokenizer_for_bert=bert_tokenization.FullTokenizer(vocab_file,do_lower_case)\n\n","0a813bb3":"print(\"The length of the vocab in our tokenizer is:\",len(tokenizer_for_bert.vocab))","4d96dcd7":"def encode_text(texts,tokenizer_for_bert, max_len=512):\n    all_token_ids=[]\n    all_masks=[]\n    all_segments=[]\n    \n    for text in texts:\n        tokens=tokenizer_for_bert.tokenize(text)\n        tokens=tokens[:max_len-2]\n        input_sequence=[\"[CLS]\"]+tokens+[\"[SEP]\"]\n        pad_len=max_len-len(input_sequence)\n        token_ids=tokenizer_for_bert.convert_tokens_to_ids(input_sequence)\n        token_ids+=[0]*pad_len\n        pad_masks=[1]*len(input_sequence)+[0]*pad_len\n        segment_ids=[0]*max_len\n        \n        all_token_ids.append(token_ids)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n        \n    return np.array(all_token_ids),np.array(all_masks), np.array(all_segments)\n","bb888994":"test_text =  \"There was a blast in Lebanon the previous day. 130 people are reported to be dead. \"\n\nprint (\"Test text after tokenization: \" ,  [\"[CLS]\"] + tokenizer_for_bert.tokenize( test_text)  + [\"[SEP]\"] )\n\nprint (\"Test text after encoding: \" ,encode_text( [test_text], tokenizer_for_bert, 7 ) )","68ee835c":"def bert_model(bert_layer,max_len=512):\n    #Input to bert layer\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    #Output from bert layer\n    bert_layer_out = bert_layer([input_word_ids, input_mask, segment_ids]) # Python list of 2 tensors with shape (batch_size, 768) and (batch_size, max_len, 768)\n    \n    #Extrating Embedding for CLS token comming out of bert layer. Note CLS is the first token\n    cls_out = bert_layer_out[1][:,0,:] # Getting hidden-state of 1st tokens from second tensor in bert_layer_out, Tensor shape - (batch size, 768) \n    \n    out = Dense(1, activation='sigmoid')(cls_out)\n    \n     \n    #Model creation using inputs and output\n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out, name='deeplearning_bert__model')\n    \n    \n    \n    learning_rate = 1e-6 # modify learning rate,as needed\n    \n    #Compiles Model depending on model type and number of classes. Loss function as well as metrics is used accordingly\n    \n    model.compile(Adam(lr= learning_rate), loss='binary_crossentropy', metrics=['acc']) # ** For Binary classification\n      \n    return model","5df71981":"max_len=40","ce464193":"model=bert_model(bert_layer,max_len=max_len)\n\nmodel.summary()","c738a8a8":"train_input=encode_text(df_train[\"text\"].values,tokenizer_for_bert,max_len=max_len)\n\ny_train=df[\"target\"].values","c40ab9ec":"# Let's check the accuracy_score of our BERT model without fine tunig\naccuracy_score( y_train, np.round(model.predict(train_input)).flatten() )","40e362fb":"#Model Training (Fine-tuning for tweets classification)\nepochs = 5       #Modify as neded\nbatch_size = 32  #Modify as needed\ntrain_history = model.fit(train_input, y_train ,epochs= epochs,batch_size= batch_size, verbose=1)","ae5eb1fe":"# Now, let us test some tweets and classify them \ntweet=\"Israel striked Iran as the reply to the attack by Iran and Syria\"\n\nprediction=model.predict(encode_text([tweet],tokenizer_for_bert,\n                                    max_len=max_len))\n\nprint ( 'Tweet Type: ', np.where(  prediction >= .5 , \"Disaster\", \"Non Disaster\" ) ,\n       '   Score:',  prediction)","22f365ec":"\ntweet = \"Let's go and have some fun at the beach party orrganised by Akshat\"\n\nprediction = model.predict (  encode_text( [tweet], tokenizer_for_bert, max_len=max_len) ) \nprint('Tweet Text: ', tweet)\nprint ( 'Tweet Type: ', np.where(  prediction >= .5 , \"Disaster\", \"Non Disaster\" ) , '   Score:',  prediction)","f37a24e6":"## Defining helper function for text preprocessig","32b298f4":"## Importing the pre-trained model and tokenizer which is specific to BERT","45755a75":"## Fine-Tuning the model for tweet classification","b32c1ae7":"## Intro to the BERT model\nBERT (Bidirectional Encoder Representations from Transformers) is a paper published by researchers at Google AI Language. It has caused a stir in the Machine Learning community by presenting state-of-the-art results in a wide variety of NLP tasks, including Question Answering (SQuAD v1.1), Natural Language Inference (MNLI), and others.\nBERT\u2019s key technical innovation is applying the bidirectional training of Transformer, a popular attention model, to language modelling. This is in contrast to previous efforts which looked at a text sequence either from left to right or combined left-to-right and right-to-left training. The paper\u2019s results show that a language model which is bidirectionally trained can have a deeper sense of language context and flow than single-direction language models. In the paper, the researchers detail a novel technique named Masked LM (MLM) which allows bidirectional training in models in which it was previously impossible.\n\n![image.png](attachment:image.png)\n\n\n\n\nThere are multiple pre-trained BERT models available. Later on, we can fine-tune the BERT model to perform the specific tasks such as binary or multi-class classification.\n\n![image.png](attachment:image.png)\n\n\nMedium Link:https:\/\/towardsdatascience.com\/bert-explained-state-of-the-art-language-model-for-nlp-f8b21a9b6270","fda86e10":"## Defining the model"}}