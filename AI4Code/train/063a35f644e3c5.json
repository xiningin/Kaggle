{"cell_type":{"670440b4":"code","85cee40a":"code","e2f6ec8e":"code","954f59f3":"code","9a1c17b4":"code","d4a7db02":"code","e5d48789":"code","ded084c6":"code","8afdaaa5":"code","622ea59a":"code","d591cd7a":"code","d20e9c2d":"code","603a2d79":"code","b639caf3":"code","16a40649":"code","9fc9c1ee":"code","6e71596c":"code","275c4135":"code","35b31ce2":"code","31d98869":"code","1e5ca332":"code","5a9daddc":"code","705dc707":"code","244db672":"code","e804b869":"code","e8e6dd3f":"code","f81fddab":"code","c9424974":"code","ee0ded4a":"code","7d952b0f":"code","5ac8c15d":"code","17328a84":"code","f20ab38d":"code","7460a8e6":"code","8a245d70":"code","88277330":"code","e217b88e":"code","e3e5bc26":"code","4657906c":"code","91778ac4":"code","99c6dc9d":"code","01b88e96":"code","0059ecdc":"code","f77a5032":"code","b704569d":"code","2be8c0cf":"code","eaa0fc4e":"code","d39d7de4":"code","b30561fd":"code","ca3dcf01":"code","3e498178":"code","e506819c":"code","d5d0448f":"code","9afad606":"code","1abe3670":"code","6aed013e":"code","ce7d9927":"code","44f0a65a":"code","1a3a5b18":"code","4a34630e":"code","76604888":"code","62d1ebce":"code","560048ed":"code","0c5d6136":"code","11c05fb0":"code","bc7851e6":"code","d3e54e91":"code","c31b4779":"code","bea82262":"code","be0d15bd":"markdown","66d9b6e5":"markdown","4870527b":"markdown","0a0ada1b":"markdown","57f7e200":"markdown","dbfe51c3":"markdown","45029230":"markdown","36612f8b":"markdown","a27cf98b":"markdown","1117ef3a":"markdown","e0c1a359":"markdown","ae1c7e90":"markdown","0e5663a2":"markdown","6abe631b":"markdown","79f2db13":"markdown","9c28979c":"markdown","3009c2e9":"markdown","e2c1432d":"markdown","2b007251":"markdown","df09b84d":"markdown","b37b5634":"markdown","743c4302":"markdown","f309248b":"markdown","d68fcda4":"markdown","b5e4e625":"markdown","4e518dcf":"markdown","40aeeb70":"markdown","24784015":"markdown"},"source":{"670440b4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","85cee40a":"!pip install xlrd\n!pip install openpyxl","e2f6ec8e":"c={}\nfor i in range(8,19):\n  if(i<10):\n    c[\"df\"+\"200\"+str(i)]=pd.read_excel(\"..\/input\/epa-green-vehicles\/all_alpha_0\"+str(i)+\".xls\")\n  elif(i==10):\n    c['df2010']=pd.read_excel(\"..\/input\/epa-green-vehicles\/all_alpha_10.xls\")\n  else:\n    c[\"df\"+\"20\"+str(i)]=pd.read_excel(\"..\/input\/epa-green-vehicles\/all_alpha_\"+str(i)+\".xlsx\")","954f59f3":"c","9a1c17b4":"c['df2015'].head()","d4a7db02":"for i in range(8,19):\n    if(i<10):\n      print('For Year'+' 200'+str(i))\n      print(len(c['df200'+str(i)]))\n    else:\n      print('for year'+' 20'+str(i))\n      print(len(c['df20'+str(i)]))","e5d48789":"for i in range(8,19):\n    if(i<10):\n      print('For Year'+' 200'+str(i))\n      print(len(c['df200'+str(i)].columns))\n    else:\n      print('for year'+' 20'+str(i))\n      print(len(c['df20'+str(i)].columns))","ded084c6":"for i in range(8,19):\n    if(i<10):\n      print('For Year'+' 200'+str(i))\n      print(c['df200'+str(i)].duplicated().sum())\n    else:\n      print('for year'+' 20'+str(i))\n      print(c['df20'+str(i)].duplicated().sum())","8afdaaa5":"for i in range(8,19):\n    if(i<10):\n      print(\"\\n\\n\")\n      print('For Year'+' 200'+str(i))\n      print(\"\\n\")\n      print(c['df200'+str(i)].dtypes)\n    else:\n      print(\"\\n\\n\")\n      print('for year'+' 20'+str(i))\n      print(\"\\n\")\n      print(c['df20'+str(i)].dtypes)","622ea59a":"for I in range(8,19):\n    if(I<10):\n      print(\"\\n\\n\")\n      print('For Year'+' 200'+str(I))\n      print(\"\\n\")\n      print(c['df200'+str(I)].isnull().sum())\n    else:\n      print(\"\\n\\n\")\n      print('for year'+' 20'+str(I))\n      print(\"\\n\")\n      print(c['df20'+str(I)].isnull().sum())","d591cd7a":"for i in range(8,19):\n    if(i<10):\n      print(\"\\n\\n\")\n      print('For Year'+' 200'+str(i))\n      print(\"\\n\")\n      print(c['df200'+str(i)].nunique())\n    else:\n      print(\"\\n\\n\")\n      print('for year'+' 20'+str(i))\n      print(\"\\n\")\n      print(c['df20'+str(i)].nunique())","d20e9c2d":"for i in range(8,19):\n    if(i<10):\n      print(\"\\n\\n\")\n      print('For Year'+' 200'+str(i))\n      print(\"\\n\")\n      for z in c['df200'+str(i)].columns:\n        print(c['df200'+str(i)][z].value_counts())\n    else:\n      print(\"\\n\\n\")\n      print('for year'+' 20'+str(i))\n      print(\"\\n\")\n      for p in c['df20'+str(i)].columns:\n        print(c['df20'+str(i)][p].value_counts())","603a2d79":"c['df2016'].rename(columns={'Cert Region':'Sales Area'},inplace=True)\nc['df2017'].rename(columns={'Cert Region':'Sales Area'},inplace=True)\nc['df2018'].rename(columns={'Cert Region':'Sales Area'},inplace=True)\nc['df2008'].drop(columns=['FE Calc Appr','Unadj Cmb MPG',],inplace=True)\nc['df2013'].drop(columns=['Comb CO2'],inplace=True)\nc['df2014'].drop(columns=['Comb CO2'],inplace=True)\nc['df2015'].drop(columns=['Comb CO2'],inplace=True)\nc['df2016'].drop(columns=['Comb CO2'],inplace=True)\nc['df2017'].drop(columns=['Comb CO2'],inplace=True)\nc['df2018'].drop(columns=['Comb CO2'],inplace=True)","b639caf3":"c['df2008']['Year'] = '2008'\nc['df2009']['Year'] = '2009'\nc['df2010']['Year'] = '2010'\nc['df2011']['Year'] = '2011'\nc['df2012']['Year'] = '2012'\nc['df2013']['Year'] = '2013'\nc['df2014']['Year'] = '2014'\nc['df2015']['Year'] = '2015'\nc['df2016']['Year'] = '2016'\nc['df2017']['Year'] = '2017'\nc['df2018']['Year'] = '2018'","16a40649":"merged_data=pd.concat([c['df2008'],c['df2009'],c['df2010'],c['df2011'],c['df2012'],c['df2013'],c['df2014'],c['df2015'],c['df2016'],c['df2017'],c['df2018']])","9fc9c1ee":"merged_data.info()","6e71596c":"merged_data","275c4135":"merged_data.info()","35b31ce2":"len(merged_data['Model'].unique())","31d98869":"merged_data['Displ'].unique()","1e5ca332":"merged_data['Cyl'].unique()","5a9daddc":"merged_data['Cyl']=merged_data['Cyl'].replace({'(6 cyl)':6, '(4 cyl)':4, '(12 cyl)':12, '(8 cyl)':8, '(10 cyl)':10,'(16 cyl)':16, '(5 cyl)':5})","705dc707":"merged_data['Cyl'].unique()","244db672":"merged_data['Fuel'].unique()","e804b869":"merged_data['Trans'].unique()","e8e6dd3f":"merged_data['Drive'].unique()","f81fddab":"merged_data['Fuel'].unique()","c9424974":"merged_data['Sales Area'].unique()","ee0ded4a":"merged_data['Stnd'].unique()","7d952b0f":"len(merged_data['Underhood ID'].unique())","5ac8c15d":"merged_data['Veh Class'].unique()","17328a84":"merged_data['Air Pollution Score'].unique()","f20ab38d":"merged_data['City MPG'].unique()","7460a8e6":"merged_data['Hwy MPG'].unique()","8a245d70":"merged_data['Cmb MPG'].unique()","88277330":"merged_data['Greenhouse Gas Score'].unique()","e217b88e":"merged_data['SmartWay'].unique()","e3e5bc26":"merged_data['SmartWay']=merged_data['SmartWay'].replace({'no':'No','yes':'Yes'})","4657906c":"merged_data['SmartWay'].unique()","91778ac4":"merged_data['Stnd Description'].unique()","99c6dc9d":"merged_data['Year'].unique()","01b88e96":"sns.heatmap(data = merged_data.isnull(),cmap='viridis')","0059ecdc":"merged_data.to_csv(\"merged_data.csv\",index = False)","f77a5032":"merged_data.fillna(merged_data.select_dtypes(include='number').mean().iloc[0], inplace=True)\nmerged_data.fillna(merged_data.select_dtypes(include='object').mode().iloc[0], inplace=True)","b704569d":"s = merged_data.groupby(\"Model\").Year.agg(lambda x:len(x.unique()))\npd.value_counts(s).plot(kind=\"bar\")","2be8c0cf":"ax = sns.stripplot(x='SmartWay', y='Year', data=merged_data)\nplt.show()","eaa0fc4e":"sns.countplot(x ='Sales Area', data = merged_data)","d39d7de4":"s = merged_data.groupby(\"City MPG\").Year.agg(lambda x:len(x.unique()))\npd.value_counts(s).plot(kind=\"bar\")","b30561fd":"sns.countplot(x ='SmartWay', data = merged_data)","ca3dcf01":"merged_data=pd.DataFrame({col: merged_data[col].astype('category').cat.codes for col in merged_data}, index=merged_data.index)","3e498178":"from pandas_profiling import ProfileReport\nprofile = ProfileReport(merged_data)","e506819c":"profile.to_file('profile_report.html')\nimport IPython\nIPython.display.HTML(filename='profile_report.html')","d5d0448f":"sns.heatmap(data = merged_data.isnull(),cmap='viridis')","9afad606":"merged_data","1abe3670":"corr = merged_data.corr()\nsns.heatmap(corr)","6aed013e":"columns = np.full((corr.shape[0],), True, dtype=bool)\nfor i in range(corr.shape[0]):\n    for j in range(i+1, corr.shape[0]):\n        if corr.iloc[i,j] >= 0.9:\n            if columns[j]:\n                columns[j] = False\nselected_columns = merged_data.columns[columns]\nselected_columns","ce7d9927":"merged_data.columns","44f0a65a":"merged_data = merged_data[selected_columns]","1a3a5b18":"X=merged_data.drop(columns=['SmartWay'])\ny=merged_data['SmartWay']","4a34630e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","76604888":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(random_state=0).fit(X_train, y_train)\npred=clf.predict(X_test)\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test,pred))","62d1ebce":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3).fit(X_train, y_train)\npred=knn.predict(X_test)\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test,pred))","560048ed":"merged_data['City MPG']=merged_data['City MPG'].astype(int)","0c5d6136":"X=merged_data.drop(columns=['City MPG'])\ny=merged_data['City MPG']","11c05fb0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","bc7851e6":"from xgboost import XGBRegressor\nxgb = XGBRegressor()\nxgb.fit(X_train, y_train)\nxgb_pred=xgb.predict(X_test)\nxgb.score(X, y)","d3e54e91":"from sklearn.metrics import r2_score\nr2_score(y_test, xgb_pred)","c31b4779":"from sklearn.experimental import enable_hist_gradient_boosting \nfrom sklearn.ensemble import HistGradientBoostingRegressor\nest = HistGradientBoostingRegressor().fit(X_train, y_train)\nest.score(X, y)\nest_pred=est.predict(X_test)","bea82262":"from sklearn.metrics import r2_score\nr2_score(y_test, est_pred)","be0d15bd":"R2 score","66d9b6e5":"## Logistic Regression","4870527b":"### number of columns in each dataset\n","0a0ada1b":"## KNeighbors Classifier","57f7e200":"## XGBoost","dbfe51c3":"### Original Columns","45029230":"#### Importing Necessary Libraries","36612f8b":"### Draw certain conclusions by creating visuals to communicate the change in the cars in span of 10 years.","a27cf98b":"### what those unique values are and counts for each analysis by grouping certain feature\n","1117ef3a":"R2 score","e0c1a359":"### You need to merge all the datasets with same columns names by adding a column of year to differentiate the data for different year(drop the extra columns.Also make sure that data types of merged columns are same.\n","ae1c7e90":"<br>\n\n# Capstone Project (Mini project)","0e5663a2":"### Feature Selected Columns","6abe631b":"### So from above Two model we can see that XGBoost performs better...","79f2db13":"#### Loading Data","9c28979c":"### datatypes of columns\n","3009c2e9":"### Train Test Split","e2c1432d":"### number of samples in each year","2b007251":"## GradientBoost","df09b84d":"## Feature Selection","b37b5634":"### So from above Two model we can see that KNN performs better...","743c4302":"### number of non-null unique values for features in each dataset\n","f309248b":"### Create a Predictive model to predict whether a vehicle is SmartWay vehicle or not using atleast two Classification Algorithm of your choice. Also conclude, which is the best model and why not other.\n","d68fcda4":"Example: \n\nAre more unique models using alternative fuels in 2018 compared to other years? By how much?\n\nHow much have vehicle classes improved in fuel economy (increased in mpg) per year?\n\nWhat are the characteristics of SmartWay vehicles? Have they changed over time? (mpg, greenhouse gas)What features are associated with better fuel economy (mpg)?","b5e4e625":"### Also, create a model to predict the City Mileage per gallon(City MPG) using the best features.\n","4e518dcf":"> **By: Atharv Chaudhari**","40aeeb70":"### duplicate rows in each dataset\n","24784015":"### features with missing values\n"}}