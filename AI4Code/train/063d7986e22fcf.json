{"cell_type":{"376170cd":"code","2349f2e9":"code","2fed3833":"code","6c0f9bab":"code","2f75fdce":"code","67aed6b0":"code","3b642a44":"code","366edeb8":"code","d9888929":"code","e8653e00":"code","d360aac0":"code","3adb9543":"code","516bc91a":"code","60a6a918":"code","f4dad18a":"code","8db0535b":"code","98290ede":"code","c65e7287":"code","14524820":"code","63801c2c":"code","c8b8b6a4":"code","429c9c67":"code","cb6e7ca9":"code","c10f0573":"code","521428e9":"code","7c197421":"code","b4f4d0ca":"code","dd402e04":"code","4f19ca54":"markdown","6b896102":"markdown","032d14c8":"markdown","ed8b221a":"markdown","d3138260":"markdown"},"source":{"376170cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport scipy \nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\ndf = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')","2349f2e9":"df.info()","2fed3833":"dropList = ['LotFrontage','Alley','FireplaceQu','PoolQC','Fence', 'MiscFeature']\ndf.drop(dropList, axis =1, inplace=True)\ndf_test.drop(dropList, axis =1, inplace=True)","6c0f9bab":"df.loc[:,df.isnull().any()].dtypes","2f75fdce":"df['MasVnrArea'].replace(np.nan, df['MasVnrArea'].mean() ,inplace=True)\ndf['GarageYrBlt'].replace(np.nan, df['GarageYrBlt'].mean(),inplace=True)\n\ndf_test['MasVnrArea'].replace(np.nan, df_test['MasVnrArea'].mean() ,inplace=True)\ndf_test['GarageYrBlt'].replace(np.nan, df_test['GarageYrBlt'].mean(),inplace=True)","67aed6b0":"#list(df.loc[:,df.isnull().any()])\nobjlist = ['MasVnrType', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Electrical', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']\n\nfor x in objlist:\n    df[x].replace(np.nan, 'othervalue', inplace=True)\n    df_test[x].replace(np.nan, 'othervalue', inplace=True)","3b642a44":"df.describe()","366edeb8":"df.describe(include=['object'])","d9888929":"df_test.info()","e8653e00":"df_test.loc[:,df_test.isnull().any()].dtypes","d360aac0":"floatlist = ['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath','GarageCars','GarageArea']\nobjlist = ['MSZoning','Utilities','Exterior1st','Exterior2nd','KitchenQual','Functional','SaleType']\nfor i in floatlist:\n    df_test[i].replace(np.nan, df_test[i].mean() ,inplace=True)\n    \nfor i in objlist:\n    df_test[i].replace(np.nan, 'othervalue', inplace=True)\n","3adb9543":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler, PolynomialFeatures\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn.metrics import r2_score, mean_squared_error\n","516bc91a":"sns.histplot(data = df, x='SalePrice')","60a6a918":"df['SalePrice'] = df['SalePrice'].apply(np.log1p)\nsns.histplot(data = df, x='SalePrice')","f4dad18a":"#standerd scale on numColumns\n\nnum_cols = df.select_dtypes(['int','float']).columns.tolist()\nnum_cols.remove('SalePrice')\nnum_cols.remove('Id')\n#df[num_cols].nunique()\n\ns = StandardScaler()\n\ndf[num_cols] = s.fit_transform(df[num_cols])\ndf_test[num_cols] = s.fit_transform(df_test[num_cols])\n\ndf.describe()","8db0535b":"#one hot encode object type columns\ncat_cols = df.columns[df.dtypes == np.object]\nlist1 = []\nlist2 = []\nfor x in cat_cols:\n    for i in df[x].unique().tolist():\n        list1.append(\"{}_{}\".format(x,i))\n        \nfor x in cat_cols:\n    for i in df_test[x].unique().tolist():\n        list2.append(\"{}_{}\".format(x,i))\n\n","98290ede":"set(list1) ^ set(list2)\n","c65e7287":"dropcols = ['Condition2','Electrical','Exterior1st','Exterior2nd','Functional','GarageQual','Heating','HouseStyle','KitchenQual', 'MSZoning', 'RoofMatl','Utilities', 'SaleType']","14524820":"df.drop(dropcols, axis =1, inplace=True)\ndf_test.drop(dropcols, axis =1, inplace=True)","63801c2c":"cat_cols = df.columns[df.dtypes == np.object]\nohe_cols = (df[cat_cols].apply(lambda x: x.nunique()).sort_values(ascending=False))\n","c8b8b6a4":"ohe_cols","429c9c67":"le = LabelEncoder()\nohe = OneHotEncoder()\n\n\nfor col in ohe_cols.index:\n    \n    dat = le.fit_transform(df[col]).astype(np.int)\n    df = df.drop(col, axis=1)\n    new_dat = ohe.fit_transform(dat.reshape(-1,1))\n\n    n_cols = new_dat.shape[1]\n    col_names = ['_'.join([col, str(x)]) for x in range(n_cols)]\n\n    new_df = pd.DataFrame(new_dat.toarray(), index=df.index, columns=col_names)\n    df = pd.concat([df, new_df], axis=1)\n    \nfor col in ohe_cols.index:\n    \n    dat = le.fit_transform(df_test[col]).astype(np.int)\n    df_test = df_test.drop(col, axis=1)\n    new_dat = ohe.fit_transform(dat.reshape(-1,1))\n\n    n_cols = new_dat.shape[1]\n    col_names = ['_'.join([col, str(x)]) for x in range(n_cols)]\n\n    new_df = pd.DataFrame(new_dat.toarray(), index=df_test.index, columns=col_names)\n    df_test = pd.concat([df_test, new_df], axis=1)\n    \n","cb6e7ca9":"ycol = 'SalePrice'\nxcol = [x for x in df.columns if x != 'SalePrice']\n","c10f0573":"lr = LinearRegression()\nlr.fit(df[xcol],df[ycol])\nypred = lr.predict(df_test[xcol])","521428e9":"ypred_restored = np.exp(ypred) - 1","7c197421":"odf = pd.DataFrame(df_test['Id'], columns=['Id'])\nodf['SalePrice'] = pd.DataFrame(ypred_restored)\nodf.set_index('Id',inplace=True)","b4f4d0ca":"odf","dd402e04":"odf.to_csv('out_df.csv')","4f19ca54":"# House Prices - Advanced Regression Techniques","6b896102":"### Data Wrangling ","032d14c8":"Applying transformations to the output variable, to make it gaussian.","ed8b221a":"Dropping unwanted columns from the dataframe","d3138260":"## Using simple Linear Regression"}}