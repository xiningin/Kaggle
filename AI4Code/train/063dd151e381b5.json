{"cell_type":{"67f92a64":"code","0ab384e1":"code","e0e0fbfc":"code","da093869":"code","ef68e8d0":"code","c0657a61":"code","1fb443f4":"code","0b0d8d58":"code","f289daa9":"code","160b0965":"code","1199ce16":"code","74a8b0bb":"code","81fbe033":"code","c78ce1a1":"code","fc4b9177":"code","e5d7d5a6":"code","4cea5231":"code","f88a7674":"code","219cadc0":"markdown","0563e116":"markdown","5f7c4fa2":"markdown","05023118":"markdown","61b34105":"markdown","62d13cbc":"markdown","303db039":"markdown","e84e247a":"markdown","7b56704a":"markdown","87e6b03a":"markdown","11f91917":"markdown","5ba7f9fd":"markdown","be33667f":"markdown","2db70701":"markdown"},"source":{"67f92a64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/creditcardfraud'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ab384e1":"data_df = pd.read_csv(\"\/kaggle\/input\/creditcardfraud\/creditcard.csv\")\n\nprint(data_df.shape)","e0e0fbfc":"data_df.head()","da093869":"data_df.describe()","ef68e8d0":"data_df.isnull().sum()","c0657a61":"print(data_df[\"Class\"].value_counts())","1fb443f4":"from sklearn.model_selection import train_test_split\n\n#train_df, test_df = train_test_split(data_df, test_size=0.2, random_state=2021, shuffle=True)\ntrain_df, valid_df = train_test_split(data_df, test_size=0.2, random_state=2021, shuffle=True)","0b0d8d58":"print(data_df.columns)","f289daa9":"X_cols = ['Time', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10',\n       'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20',\n       'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount']\ny_col = 'Class'","160b0965":"import xgboost as xgb\n\ntrain_xg = xgb.DMatrix(train_df[X_cols], train_df[y_col].values)\nvalid_xg = xgb.DMatrix(valid_df[X_cols], valid_df[y_col].values)\n#test_xg = xgb.DMatrix(test_df[X_cols], test_df[y_col].values)","1199ce16":"# monitor train and valid\nwatchlist = [(train_xg, 'train'), (valid_xg, 'valid')]\n\n# set parameters\nparams = {'objective':'binary:hinge', 'eta': 0.04, 'max_depth': 6, 'subsample': 0.8, \n          'colsample_bytree': 0.9, 'eval_metric': 'auc', 'random_state': 2021, 'silent': True}\n","74a8b0bb":"xgb_model = xgb.train(params, train_xg, 1000, watchlist, early_stopping_rounds=50, maximize=True, verbose_eval=50)","81fbe033":"import matplotlib.pyplot as plt\n\nfig, (ax) = plt.subplots(ncols=1, figsize=(8,5))\nxgb.plot_importance(xgb_model, height=0.8, ax=ax)\nplt.show()","c78ce1a1":"preds_xgb = xgb_model.predict(valid_xg)","fc4b9177":"from sklearn.metrics import roc_auc_score\n\nroc_auc_score(valid_df[y_col].values, preds_xgb)","e5d7d5a6":"print(valid_df[y_col].values)\nprint(preds_xgb)\n","4cea5231":"from sklearn.metrics import classification_report\n\nprint(classification_report(valid_df[y_col].values, preds_xgb))","f88a7674":"from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\ncm = confusion_matrix(valid_df[y_col].values, preds_xgb, labels=[0, 1])\nCMD = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[0,1])\nCMD.plot()\nplt.show()","219cadc0":"**Predict**","0563e116":"Let's look at **features importance**","5f7c4fa2":"**Confusion matrix**","05023118":"**Add data**\n\nAdded kaggle dataset - Credit Card Fraud Detection","61b34105":"Let's look at **XGBoost**","62d13cbc":"**Split df**","303db039":"**Training**","e84e247a":"Describe df","7b56704a":"prepare datasets","87e6b03a":"**Check for missing values**","11f91917":"**ROC-AUC**","5ba7f9fd":"**Check for data balance**","be33667f":"**Read csv file**","2db70701":"**Classification report**"}}