{"cell_type":{"2638ba1c":"code","2409f50a":"code","a44d5104":"code","0803246d":"code","861fbb33":"code","08435980":"code","ed6d6160":"code","1051ed57":"code","46b76b1d":"code","fd91159d":"code","78345fd8":"code","48f82568":"code","85775728":"code","eb22bdd1":"code","f5497e72":"code","24ea7bc6":"code","949e252f":"code","5cbc5fe4":"code","04fffc63":"code","c9fac854":"code","f15a37ce":"code","3b3218be":"code","5e60e009":"code","900b78e5":"code","00994609":"code","c4b4c38c":"code","0bc18bdc":"code","020cd965":"code","f3fb7ade":"code","3284dccb":"code","f349918a":"code","210909a9":"code","4e09a421":"code","5426b188":"code","601dfe94":"code","b1c0845e":"code","46552846":"code","8c0549a0":"code","31e160f3":"code","d5a4636e":"code","65e51c29":"code","1b54c0a4":"code","507bb60e":"code","0ca0ac9f":"code","81492cb8":"code","8a7a5928":"code","93dc44a9":"code","2c64180b":"markdown","79a6fbed":"markdown","ab2ebd24":"markdown","0ffcff95":"markdown","7742d5c7":"markdown","0ddec9d0":"markdown","cedc72d5":"markdown","0cd653e1":"markdown","757f23bd":"markdown","0158688c":"markdown","756759f8":"markdown","56eee025":"markdown","9b37d0ba":"markdown","96d35e63":"markdown","cefc4f2d":"markdown","b3fed3e8":"markdown","e5e7c099":"markdown","ee1e78ee":"markdown","5b2342bc":"markdown","3179452e":"markdown","5368e5d3":"markdown","162ee179":"markdown","4fd60069":"markdown","2ae7e2d5":"markdown","eb1cb172":"markdown","ca87d4fe":"markdown","a928b902":"markdown","4dc01bc1":"markdown","ac7e47ca":"markdown","8e2eecdc":"markdown","d5ee3cec":"markdown","016d54d2":"markdown","5e7d98de":"markdown","130e8265":"markdown","28664f14":"markdown","e2068a37":"markdown","c52f7269":"markdown","e2f86db2":"markdown","f887a972":"markdown","8f018475":"markdown","c4740c76":"markdown","798436c9":"markdown"},"source":{"2638ba1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2409f50a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#from sklearn.preprocessing import Imputer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.utils import shuffle\nfrom sklearn.ensemble import RandomForestClassifier\n\npd.set_option('display.max_columns', 100)","a44d5104":"import os\nprint(os.listdir(\"..\/input\"))","0803246d":"train = pd.read_csv('..\/input\/porto-seguro-safe-driver-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/porto-seguro-safe-driver-prediction\/test.csv')","861fbb33":"train.shape","08435980":"# \uc911\ubcf5\ub418\ub294 row\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uae30\uc704\ud574 drop_duplicates()\uc0ac\uc6a9\n\ntrain.drop_duplicates()\ntrain.shape","ed6d6160":"test.shape","1051ed57":"train.head()","46b76b1d":"train.tail()","fd91159d":"# _cat\ub85c \ub05d\ub098\ub294 14\uac1c\uc758 categorical \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c \ub354\ubbf8\ubcc0\uc218\ub97c \ub9cc\ub4e4\uac83\uc774\ub2e4.\n# _bin\uc73c\ub85c \ub05d\ub098\ub294 binary \ubcc0\uc218\ub294 \uc774\ubbf8 binary\uc774\uae30\ub54c\ubb38\uc5d0 \ub354\ubbf8\ud654\ud560\ud544\uc694\uc5c6\uc74c.\n## \uc544\ub798 info\ub97c \ubcf4\uba74, \ub370\uc774\ud130 \ud0c0\uc785\uc774 int \ub610\ub294 float\uc774\ub2e4. null\uac12\uc740 -1\ub85c \ub418\uc5b4\uc788\uae30 \ub54c\ubb38\uc5d0 \uc804\ubd80 non-null\ub85c\ub098\uc634. \ntrain.info()","78345fd8":"\"\"\"\nlist\uc5d0 for loop\ub3cc\uba74\uc11c \ub515\uc154\ub108\ub9ac\ub97c append\ud574\uc8fc\uace0, \ucd5c\uc885\uc801\uc73c\ub85c DataFrame\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\ub294 \ubc29\uc2dd\n\"\"\"\n\ndata=[]\ndata.append({'varname':'var1','dtype':'int'})  # 1st for loop\ndata","48f82568":"data.append({'varname':'var2','dtype':'float'})  # 2nd for loop\ndata","85775728":"# final DataFrame\npd.DataFrame(data)","eb22bdd1":"data=[]\nfor f in train.columns:\n    # role \uc815\uc758\n    if f=='target':\n        role='target'\n    elif f=='id':\n        role='id'\n    else:\n        role='input'\n        \n    # level \uc815\uc758\n    if 'bin' in f or f=='target':\n        level='binary'\n    elif 'cat' in f or f=='id':\n        level='nominal'\n    elif train[f].dtype==float:\n        level='interval'\n    elif train[f].dtype==int:\n        level='ordinal'\n        \n    # id\ub97c \uc81c\uc678\ud55c \ub098\uba38\uc9c0\ub294 keep\uc5d0 True\uac12 \uc9c0\uc815\n    keep=True\n    if f=='id':\n        keep=False\n        \n    # \ub370\uc774\ud130\ud0c0\uc785 \uc815\uc758\n    dtype=train[f].dtype\n    \n    # \ubaa8\ub4e0 metadata\ub97c \ud3ec\ud568\ud558\uace0\uc788\ub294 \ub515\uc154\ub108\ub9ac\ub97c \ub9cc\ub4e0\ub2e4.\n    f_dict={\n        'varname':f,\n        'role':role,\n        'level':level,\n        'keep':keep,\n        'dtype':dtype\n    }\n    data.append(f_dict)\n    \nmeta=pd.DataFrame(data,columns=['varname','role','level','keep','dtype'])\nmeta.set_index('varname',inplace=True)\n    ","f5497e72":"meta","24ea7bc6":"# nominal\ubcc0\uc218 \ud655\uc778\nmeta[(meta.level=='nominal')&(meta.keep)].index","949e252f":"# role\ubcc4, level\ubcc4 \ubcc0\uc218 \uac1c\uc218\npd.DataFrame({'count':meta.groupby(['role','level'])['role'].size()}).reset_index()","5cbc5fe4":"v=meta[(meta.level=='interval')&(meta.keep)].index\ntrain[v].describe()","04fffc63":"v=meta[(meta.level=='ordinal') & (meta.keep)].index\ntrain[v].describe()","c9fac854":"v=meta[(meta.level=='binary')&(meta.keep)].index\ntrain[v].describe()","f15a37ce":"desired_apriori=0.1\n\n# Get the indices per target value\nidx_0=train[train.target==0].index   # target=0\uc778 \uac12\uc758 index\nidx_1=train[train.target==1].index   # target=1\uc778 \uac12\uc758 index\n\n# target\uac12(0,1) \uc5d0 \ub530\ub978 \ud589 \uac1c\uc218\nnb_0=len(train.loc[idx_0])\nnb_1=len(train.loc[idx_1])\n\n# target=1\uc740 0.9, target=0\uc740 0.1\n## ((1-0.1) * target=1\uc778 \ub370\uc774\ud130\uac1c\uc218 ) \/ (0.1 * target=0\uc778 \ub370\uc774\ud130\uac1c\uc218) \n## Undersampling => 0.34\nundersampling_rate=((1-desired_apriori)*nb_1)\/(nb_0*desired_apriori)\n\n# \uc5b8\ub354\uc0d8\ud50c\ub9c1\ud55c target=0\uc778 \ub370\uc774\ud130\uac1c\uc218 = undersampling\ube44\uc728 x target=0\uc778 \ub370\uc774\ud130\uac1c\uc218\n## \uae30\uc874 573518 -> 195246\nundersampled_nb_0=int(undersampling_rate*nb_0)\nprint('target=0\uc5d0 \ub300\ud55c undersampling\ube44\uc728 : {}'.format(undersampling_rate))\nprint('undersampling\uc774\ud6c4 target=0 \ub370\uc774\ud130 \uac1c\uc218: {}'.format(undersampled_nb_0))\n\n# target=0\uc778 \uc804\uccb4index \uc911\uc5d0\uc11c \uc5b8\ub354\uc0d8\ud50c\ub9c1\ud560 \uac1c\uc218 \uc9c0\uc815\ud574\uc11c \ub79c\ub364\uc73c\ub85c index\uc120\ud0dd\nundersampled_idx=shuffle(idx_0, random_state=37, n_samples=undersampled_nb_0)\n\n# undersampling\ub41c index\uc758 \ub9ac\uc2a4\ud2b8\uc640 \uae30\uc874 target=1\uc778 index\ud569\uce5c \ub9ac\uc2a4\ud2b8\ub9cc\ub4e4\uae30\nidx_list=list(undersampled_idx)+list(idx_1)\n\n# undersampling\ub41c \ub370\uc774\ud130 \ubc18\ud658\ntrain=train.loc[idx_list].reset_index(drop=True)","3b3218be":"vars_with_missing=[]\n\nfor f in train.columns:\n    # \uacb0\uce21\uce58 \uac1c\uc218\n    missings=train[train[f]==-1][f].count()\n    if missings >0:\n        vars_with_missing.append(f)\n        # \uacb0\uce21\uce58 \ube44\uc911\n        missing_perc=missings\/train.shape[0]\n        \n        print('Variable {} has {}records({:.2%}) with missing values'.format(f,missings,missing_perc))\n        \nprint('In total, there are {}variables with missing values'.format(vars_with_missing))\n","5e60e009":"# \uacb0\uce21\uce58\uac00 \ub108\ubb34 \ub9ce\uc740 \uceec\ub7fc\uc740 drop\nvars_to_drop=['ps_car_03_cat','ps_car_05_cat']\ntrain.drop(vars_to_drop, inplace=True, axis=1)\n\n# \uc800\uc7a5\ud55c meta\ub370\uc774\ud130\uc5d0 drop\ud55c \uceec\ub7fc\uc758 \uc0c1\ud0dc False\ub85c \ubc14\uafb8\uae30\nmeta.loc[(vars_to_drop),'keep']=False","900b78e5":"# \ud3c9\uade0 \ub610\ub294 \ucd5c\ube48\uac12\uc73c\ub85c \ub300\uce58\n# missing_values\uc758 default\uac12\uc740 np.nan\uc778\ub370 \uc5ec\uae30\uc11c\ub294 -1\uc774 \uacb0\uce21\uc774\ubbc0\ub85c \uc9c0\uc815\ud574\uc918\uc57c\ud568.\nmean_imp=SimpleImputer(missing_values=-1, strategy='mean')\nmode_imp=SimpleImputer(missing_values=-1, strategy='most_frequent')\n\n# \ub2e4\ucc28\uc6d0 \ubc30\uc5f4(array)\uc744 1\ucc28\uc6d0 \ubc30\uc5f4\ub85c \ud3c9\ud3c9\ud558\uac8c \ud3b4\uc8fc\ub294 NumPy\uc758 ravel() \ud568\uc218\n## ex) array([[0.83],[0.72]]) -> array([0.83],[0.72])\ntrain['ps_reg_03']=mean_imp.fit_transform(train[['ps_reg_03']]).ravel()\ntrain['ps_car_14']=mean_imp.fit_transform(train[['ps_car_14']]).ravel()\ntrain['ps_car_11']=mode_imp.fit_transform(train[['ps_car_11']]).ravel()","00994609":"v=meta[(meta.level=='nominal')&(meta.keep)].index\nfor f in v:\n    dist_values=train[f].value_counts().shape[0]\n    print('Variable {} has {}distinct values'.format(f,dist_values))","c4b4c38c":"# Script by https:\/\/www.kaggle.com\/ogrellier\n# Code: https:\/\/www.kaggle.com\/ogrellier\/python-target-encoding-for-categorical-features\ndef add_noise(series, noise_level):\n    return series * (1 + noise_level * np.random.randn(len(series)))\n\ndef target_encode(trn_series=None, \n                  tst_series=None, \n                  target=None, \n                  min_samples_leaf=1, \n                  smoothing=1,\n                  noise_level=0):\n    \"\"\"\n    Smoothing is computed like in the following paper by Daniele Micci-Barreca\n    https:\/\/kaggle2.blob.core.windows.net\/forum-message-attachments\/225952\/7441\/high%20cardinality%20categoricals.pdf\n    trn_series : training categorical feature as a pd.Series\n    tst_series : test categorical feature as a pd.Series\n    target : target data as a pd.Series\n    min_samples_leaf (int) : minimum samples to take category average into account\n    smoothing (int) : smoothing effect to balance categorical average vs prior  \n    \"\"\" \n    assert len(trn_series) == len(target)\n    assert trn_series.name == tst_series.name\n    temp = pd.concat([trn_series, target], axis=1)\n    # Compute target mean \n    averages = temp.groupby(by=trn_series.name)[target.name].agg([\"mean\", \"count\"])\n    # Compute smoothing\n    smoothing = 1 \/ (1 + np.exp(-(averages[\"count\"] - min_samples_leaf) \/ smoothing))\n    # Apply average function to all target data\n    prior = target.mean()\n    # The bigger the count the less full_avg is taken into account\n    averages[target.name] = prior * (1 - smoothing) + averages[\"mean\"] * smoothing\n    averages.drop([\"mean\", \"count\"], axis=1, inplace=True)\n    # Apply averages to trn and tst series\n    ft_trn_series = pd.merge(\n        trn_series.to_frame(trn_series.name),\n        averages.reset_index().rename(columns={'index': target.name, target.name: 'average'}),\n        on=trn_series.name,\n        how='left')['average'].rename(trn_series.name + '_mean').fillna(prior)\n    # pd.merge does not keep the index so restore it\n    ft_trn_series.index = trn_series.index \n    ft_tst_series = pd.merge(\n        tst_series.to_frame(tst_series.name),\n        averages.reset_index().rename(columns={'index': target.name, target.name: 'average'}),\n        on=tst_series.name,\n        how='left')['average'].rename(trn_series.name + '_mean').fillna(prior)\n    # pd.merge does not keep the index so restore it\n    ft_tst_series.index = tst_series.index\n    return add_noise(ft_trn_series, noise_level), add_noise(ft_tst_series, noise_level)","0bc18bdc":"train_encoded, test_encoded = target_encode(train[\"ps_car_11_cat\"], \n                             test[\"ps_car_11_cat\"], \n                             target=train.target, \n                             min_samples_leaf=100,\n                             smoothing=10,\n                             noise_level=0.01)\n    \ntrain['ps_car_11_cat_te'] = train_encoded\ntrain.drop('ps_car_11_cat', axis=1, inplace=True)\nmeta.loc['ps_car_11_cat','keep'] = False  # Updating the meta\ntest['ps_car_11_cat_te'] = test_encoded\ntest.drop('ps_car_11_cat', axis=1, inplace=True)","020cd965":"train[['ps_ind_02_cat','target']].groupby(['ps_ind_02_cat'],as_index=False).mean()","f3fb7ade":"v=meta[(meta.level=='nominal')&(meta.keep)].index\nfor f in v:\n    plt.figure()\n    fig,ax=plt.subplots(figsize=(20,10))\n    # target=1\uc778 \uac12\uc758 \ud37c\uc13c\ud14c\uc774\uc9c0\ub97c \uad6c\ud574\ubcf4\uc790\n    cat_perc=train[[f,'target']].groupby([f],as_index=False).mean()\n    cat_perc.sort_values(by='target',ascending=False, inplace=True)\n    # \ub9c9\ub300\uadf8\ub798\ud504\n    sns.barplot(ax=ax, x=f,y='target',data=cat_perc,order=cat_perc[f])\n    plt.ylabel('% target',fontsize=18)\n    plt.xlabel(f, fontsize=18)\n    plt.tick_params(axis='both',which='major',labelsize=18)\n    plt.show();","3284dccb":"def corr_heatmap(v):\n    correlations=train[v].corr()\n    \n    cmap=sns.diverging_palette(220,10,as_cmap=True)\n    \n    fig,ax=plt.subplots(figsize=(10,10))\n    sns.heatmap(correlations,cmap=cmap,vmax=1.0, center=0, fmt='.2f',square=True, \\\n               linewidths=.5, annot=True, cbar_kws={'shrink':.75})\n    plt.show();\n    \nv=meta[(meta.level=='interval')&(meta.keep)].index\ncorr_heatmap(v)","f349918a":"# train\ub370\uc774\ud130\ub97c \uc0d8\ud50c\ub9c1\ud574\uc11c \uc2dc\uac01\ud654 \uc0b4\ud3b4\ubcf4\uae30\ns=train.sample(frac=0.1)","210909a9":"# \ud68c\uadc0\ubaa8\ub378 \ud310\ub2e8\ud560\ub54c, \uc0c1\uad00\uad00\uacc4 \ubcfc\ub54c lmplot \uc0ac\uc6a9\nsns.lmplot(x='ps_reg_02',y='ps_reg_03',data=s, hue='target',palette='Set1',\n          scatter_kws={'alpha':0.3})\nplt.show()","4e09a421":"sns.lmplot(x='ps_car_12', y='ps_car_13', data=s, hue='target', palette='Set1', scatter_kws={'alpha':0.3})\nplt.show()","5426b188":"sns.lmplot(x='ps_car_12', y='ps_car_14', data=s, hue='target', palette='Set1', scatter_kws={'alpha':0.3})\nplt.show()","601dfe94":"sns.lmplot(x='ps_car_15', y='ps_car_13', data=s, hue='target', palette='Set1', scatter_kws={'alpha':0.3})\nplt.show()","b1c0845e":"# ps_car_14 \uc640 ps_reg_03 \uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub294 0.08\nsns.lmplot(x='ps_car_14', y='ps_reg_03', data=s, hue='target', palette='Set1', scatter_kws={'alpha':0.3})\nplt.show()","46552846":"v=meta[(meta.level=='ordinal')&(meta.keep)].index\ncorr_heatmap(v)","8c0549a0":"for f in v:\n    plt.figure()\n    fig,ax=plt.subplots(figsize=(20,10))\n    ordinal_perc=train[[f,'target']].groupby([f],as_index=False).mean()\n    ordinal_perc.sort_values(by='target',ascending=False, inplace=True)\n    \n    sns.barplot(ax=ax, x=f, y='target',data=ordinal_perc, order=ordinal_perc[f])\n    plt.ylabel('% target',fontsize=18)\n    plt.xlabel(f,fontsize=18)\n    plt.tick_params(axis='both',which='major',labelsize=18)\n    plt.show();","31e160f3":"v=meta[(meta.level=='nominal') & (meta.keep)].index\nprint('\ub354\ubbf8\ud654 \ud558\uae30\uc804\uc5d0 train\ub370\uc774\ud130\uc5d0 {}\uac1c\uc758 \ubcc0\uc218\uac00 \uc788\ub2e4'.format(train.shape[1]))\ntrain=pd.get_dummies(train, columns=v, drop_first=True)\nprint('\ub354\ubbf8\ud654 \ud55c \ud6c4\uc5d0 train\ub370\uc774\ud130\uc5d0 {}\uac1c\uc758 \ubcc0\uc218\uac00 \uc788\ub2e4'.format(train.shape[1]))","d5a4636e":"v=meta[(meta.level=='interval')&(meta.keep)].index\n# 2\ucc28\ud56d \ubcc0\uc218 \ub9cc\ub4e4\uae30\npoly=PolynomialFeatures(degree=2,interaction_only=False,include_bias=False)\n\n# interactions\ubcc0\uc218\uc5d0\ub294 \uae30\uc874 \ub370\uc774\ud130\uc640 \uc81c\uacf1\ud55c \ub370\uc774\ud130\uac00 \ubaa8\ub450 \ud3ec\ud568\ub41c\ub2e4.\ninteractions=pd.DataFrame(data=poly.fit_transform(train[v]),columns=poly.get_feature_names(v))\n# \uae30\uc874 \uceec\ub7fc\uc740 \uc81c\uac70\ninteractions.drop(v,axis=1,inplace=True)\n\n# train\ub370\uc774\ud130\uc5d0 interaction\ubcc0\uc218\ub97c concat\ud55c\ub2e4. \uc989, \uae30\uc874 \ubcc0\uc218\uc5d0 interval\ubcc0\uc218\uc758 2\ucc28\ud56d \ubcc0\uc218\ub4e4\uc744 \ucd94\uac00\nprint('interaction\uc744 \ucd94\uac00\ud558\uae30 \uc804\uc5d0\ub294 train\ub370\uc774\ud130\uc5d0 {} \uac1c\uc758 \ubcc0\uc218\uac00 \uc788\uc74c'.format(train.shape[1]))\ntrain=pd.concat([train,interactions],axis=1)\nprint('interaction \ucd94\uac00\ud55c \ud6c4\uc5d0 train\ub370\uc774\ud130\uc5d0 {}\uac1c\uc758 \ubcc0\uc218\uac00 \uc788\uc74c'.format(train.shape[1]))","65e51c29":"interactions.head()","1b54c0a4":"selector=VarianceThreshold(threshold=.01)\nselector.fit(train.drop(['id','target'],axis=1))\n\n# np.vectorize(\uc0ac\uc6a9\uc790 \uc815\uc758 \ud568\uc218\uba85, otypes = ...)\n## Function to toggle boolean array elements\n## get_support() \ud558\uba74 True,False\uac12\uc774 \ub098\uc624\ub294\ub370 \uc774\uc911\uc5d0\uc11c False\uac12\ub9cc \ubc18\ud658\ud558\uae30\uc704\ud574 f\ud568\uc218\uc9c0\uc815\nf=np.vectorize(lambda x: not x)\n\nv=train.drop(['id','target'],axis=1).columns[f(selector.get_support())]\nprint('{} variables have too low variance.'.format(len(v)))\nprint('These variables are {}'.format(list(v)))","507bb60e":"X_train=train.drop(['id','target'],axis=1)\ny_train=train['target']\n\nfeat_labels=X_train.columns\n\nrf=RandomForestClassifier(n_estimators=1000, random_state=0, n_jobs=-1)\n\nrf.fit(X_train,y_train)\nimportances=rf.feature_importances_\n\n# np.argsort() : \uc791\uc740 \uac83 \ubd80\ud130 \uc21c\uc11c\ub300\ub85c \ubf51\uc544\ub0b4\ub294 index\n# [::-1] \ub2e4\uc2dc \uc5ed\uc21c\uc73c\ub85c\nindices=np.argsort(rf.feature_importances_)[::-1]   # \uc911\uc694\ub3c4 \ud070\uc21c\uc73c\ub85c \ub098\uc5f4\n\n# \uc21c\uc11c, 30\uc73c\ub85c \ub098\ub204\uae30, \uc778\ub371\uc2a4\uc640 \uc911\uc694\ub3c4 \ucd9c\ub825\nfor f in range(X_train.shape[1]):\n    print(\"%2d) %-*s %f\" % (f+1,30,feat_labels[indices[f]], importances[indices[f]]))\n","0ca0ac9f":"# rf\ubaa8\ub378 \ub0b4 \ud2b9\uc131 \uc911 \uc9c0\ub2c8\uacc4\uc218 \uac12\uc774 mediand\uc774\uc0c1\uc77c \uacbd\uc6b0\uc758 \ud2b9\uc9d5 \uc120\ud0dd\nsfm=SelectFromModel(rf, threshold='median',prefit=True)\nprint('Number of features before selection: {}'.format(X_train.shape[1]))\n\n# \ud559\uc2b5\uc2dc\ud0a8 sfm\uc744 x_train\uc5d0 \uc801\uc6a9\nn_features=sfm.transform(X_train).shape[1]\nprint('Number of features after selection: {}'.format(n_features))\n\n# sfm.get_support() \ud558\uba74 \uc120\ud0dd\ub41c \ubcc0\uc218\uc77c\uacbd\uc6b0 True, \uc544\ub2c8\uba74 False\n## \ucd5c\uc885 \uc120\ud0dd \ubcc0\uc218\nselected_vars=list(feat_labels[sfm.get_support()])","81492cb8":"selected_vars","8a7a5928":"train = train[selected_vars + ['target']]","93dc44a9":"scaler = StandardScaler()\nscaler.fit_transform(train.drop(['target'], axis=1))","2c64180b":"# Porto Seguro\uc758 \uc6b4\uc804\uc790 \ubcf4\ud5d8\uccad\uad6c \uc608\uce21 (for beginner)\n**Porto Seguro's Safe Driver Prediction**  <br>\n\n* Data Preparation & Exploration\n    * https:\/\/www.kaggle.com\/bertcarremans\/data-preparation-exploration","79a6fbed":"> \uc804\ubc18\uc801\uc73c\ub85c, interval \ubcc0\uc218\ub4e4\uc758 \ubc94\uc704\uac00 \ud06c\uac8c \ucc28\uc774\uac00 \ub098\uc9c0 \uc54a\ub294\uac83\uc73c\ub85c \ubcf4\uc544, \uc544\ub9c8\ub3c4 \ub85c\uadf8\ubcc0\ud658 \uac19\uc740 \ub370\uc774\ud130 \ubcc0\ud658\uc774 \uc801\uc6a9\ub41c \ub370\uc774\ud130\uac00\uc544\ub2d0\uae4c \uc2f6\ub2e4","ab2ebd24":"**Python-Exercise [1]**\n","0ffcff95":"* ps_car_11\uc5d0\ub9cc missing value\uac00 \uc788\uc74c\n* \ubc94\uc704\uac00 \uc11c\ub85c \ub2e4\ub978\uac83\uc5d0 \ub300\ud574\uc11c\ub294 \uc2a4\ucf00\uc77c\ub9c1\uc744 \uc801\uc6a9\ud574\ubcfc\uc218\uc788\uc74c","7742d5c7":"#### SelectFromModel \n* \ubaa8\ub378 \ud6c8\ub828\uc774 \ub05d\ub09c \ud6c4 \uc0ac\uc6a9\uc790\uac00 \uc9c0\uc815\ud55c \uc784\uacc4\uac12\uc744 \uae30\ubc18\uc73c\ub85c \ud2b9\uc131 \uc120\ud0dd\n","0ddec9d0":"### Loading data","cedc72d5":"#### 1-3) calc variables\n* missing value\uac00 \uc5c6\uc74c\n* \uc704\uc758 describe\ub97c \ubcf4\uba74, \ucd5c\ub300\uac12\uc774 0.9\ub85c \ub3d9\uc77c\ud55c\uac83\uc744 \uc54c\uc218\uc788\uc74c\n* \uc138\uac1c\uc758 _calc \ub85c \ub05d\ub098\ub294 \ubcc0\uc218\ub4e4\uc758 \ubd84\ud3ec\uac00 \uc720\uc0ac\ud574\ubcf4\uc784","0cd653e1":"### Data at first sight\n**\ub370\uc774\ud130 \ud2b9\uc9d5** <br>\n1. \uceec\ub7fc \uc774\ub984(ind, reg, car, calc)\ub85c Grouping\ub41c\ub2e4\n2. \uceec\ub7fc \uc774\ub984\uc5d0 '_bin'\uc740 Binary Features, '_cat'\uc740 Categorical Features\ub97c \uc758\ubbf8\n3. \uceec\ub7fc \uc774\ub984\uc5d0 \uc544\ubb34\uac83\ub3c4 \uc548\ubd99\uc5b4\uc788\uc73c\uba74 Continuous or Ordinal Features\ub97c \uc758\ubbf8\n4. -1 \uc740 Null\uac12\uc744 \uc758\ubbf8","757f23bd":"### 2) Ordinal variables","0158688c":"----------------------------------------\n## Feature engineering\n\n#### 1) \ub354\ubbf8\ubcc0\uc218 \ub9cc\ub4e4\uae30\n\uce74\ud14c\uace0\ub9ac\ubcc0\uc218\ub294 \uc5b4\ub5a4 \uc21c\uc11c\ub098 \ub2e8\uc704\ub97c \ub098\ud0c0\ub0b4\uc9c0 \uc54a\ub294\ub2e4. \uc608\ub97c\ub4e4\uc5b4 \uce74\ud14c\uace0\ub9ac 2\uac00 \uce74\ud14c\uace0\ub9ac 1\uc758 \ub450\ubc30\ub77c\uace0 \ud560 \uc218 \uc5c6\ub2e4. ","756759f8":"### 3) Binary variables","56eee025":"**\uc544\ub798\ub294 distinct\ud55c \uac12\uc774 \ub108\ubb34 \ub9ce\uc740 \uce74\ud14c\uace0\ub9ac\ubcc0\uc218 ps_car_11_cat\ub97c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95 (\uc798\uc774\ud574\uc548\uac10..)**","9b37d0ba":"------------------------------------------------\n# test-set \ub3d9\uc77c\ud558\uac8c \uc804\ucc98\ub9ac \ud6c4 submission\ud30c\uc77c \uc0dd\uc131","96d35e63":"### Selecting features with a Random Forest and SelectFromModel\n\nhttps:\/\/blog.naver.com\/PostView.nhn?blogId=bosongmoon&logNo=221807565642","cefc4f2d":"-----------------------------\n## Descriptive statistics\ndescribe\ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc11c \ub370\uc774\ud130\ub97c \uc0b4\ud3b4\ubcfc\uc218\ub3c4\uc788\uc9c0\ub9cc, categorical \ubcc0\uc218\uc640 id\ubcc0\uc218\uc5d0\uc11c \ud3c9\uade0, \ud45c\uc900\ud3b8\ucc28 \ub4f1\uc744 \uacc4\uc0b0\ud558\ub294\uac74 \uc758\ubbf8\uac00 \uc5c6\ub2e4. <br>\n\ub530\ub77c\uc11c, categorical \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c\ub294 \uc774\ud6c4\uc5d0 \ud0d0\uc0c9\ud560\uac83\uc774\ub2e4.","b3fed3e8":"\ubcc0\uc218\uac04\uc5d0 \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc740 \ubcc0\uc218\ub4e4\uc774 \uc788\ub294\uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.\n* ps_reg_02 and ps_reg_03 (0.7)\n* ps_car_12 and ps_car13 (0.67)\n* ps_car_12 and ps_car14 (0.58)\n* ps_car_13 and ps_car15 (0.67)","e5e7c099":"--------------------------------------------\n## Data Quality Checks\n\nMissing values\ub97c \uccb4\ud06c\ud574\ubcf4\uc790 (-1\ub85c \ub418\uc5b4\uc788\uc74c)","ee1e78ee":"#### 1-1) reg variables\n* ps_reg_03 \ubcc0\uc218\uc5d0\ub9cc missing value\uac00 \uc788\uc74c\n    * min\uac12\uc774 -1\uc774\uba74 missing value\n* \ubcc0\uc218\uac04\uc758 \ubc94\uc704(\ucd5c\uc18c,\ucd5c\ub300)\uac00 \uc11c\ub85c \ub2e4\ub974\uae30\ub54c\ubb38\uc5d0 \uc2a4\ucf00\uc77c\ub9c1(StandardScaler)\uc744 \uc0ac\uc6a9\ud574\ubcfc\uc218\uc788\uc74c.","5b2342bc":"* \ub530\ub77c\uc11c, \ub354\ubbf8\ubcc0\uc218\ub97c \ub9cc\ub4ec\uc73c\ub85c\uc368 52\uac1c\uc758 \ubcc0\uc218\uac00 training set\uc5d0 \ucd94\uac00\ub418\uc5c8\ub2e4","3179452e":"\uacb0\uce21\uce58\ub97c \ucd5c\ube48\uac12\uc73c\ub85c \ub300\uce58\ud558\uc9c0 \uc54a\uace0, \uce74\ud14c\uace0\ub9ac \uac12\uc73c\ub85c \ubd84\ub9ac\ud574\uc11c \uc0b4\ud3b4\ubcf8\uac83\uc740 \ubc14\ub78c\uc9c1\ud588\ub358 \uac83\uc73c\ub85c \ubcf4\uc778\ub2e4. \uacb0\uce21\uce58\uac00 \uc788\ub294 \uace0\uac1d\ub4e4\uc740 \ubcf4\ud5d8\uccad\uad6c\ub97c \uc694\uad6c\ud588\uc744 \uac00\ub2a5\uc131\uc774 \ub354 \ub192\uc740\uac83\uc73c\ub85c \ub098\ud0c0\ub0ac\ub2e4. (\uc5b4\ub5a4\uacbd\uc6b0\ub294 \ub0ae\uae30\ub3c4\ud568)","5368e5d3":"(\ucc38\uace0) \uc544\ub798\ub294 \uc0c1\uad00\uad00\uacc4\uac00 \uc11c\ub85c \ub0ae\uc740 \ubcc0\uc218\ub97c lmplot\uc73c\ub85c \uc2dc\uac01\ud654\ud574\uc11c \uc0c1\uad00\uad00\uacc4\uac00 \uc788\ub294 \uc704\uc758 \uc2dc\uac01\ud654 \uacb0\uacfc\uc640 \ube44\uad50","162ee179":"-----------------------------\n### Introduction\n1. Visual inspection of your data\n2. Defining the metadata\n3. Descriptive statistics\n4. Handling imbalanced classes\n5. Data quality checks\n6. Exploratory data visualization\n7. Feature engineering\n8. Feature selection\n9. Feature scaling\n-----------------------------","4fd60069":"------------------------------------------\n## Handling imbalanced classes\ntarget=1 \uc778\uac83\uc758 \ube44\uc728\uc774 target=0\ubcf4\ub2e4 \ub9e4\uc6b0 \uc801\ub2e4. \uc774\ub85c\uc778\ud574 accuracy\uac00 \uc88b\uc744\uc21c\uc788\ub2e4.<br>\n\uc774\ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30\uc704\ud574\uc11c \uc544\ub798 \ub450\uac00\uc9c0 \uc804\ub7b5\uc774 \uc788\ub2e4.\n* target=1 \uc778 record\ub97c oversampling\ud55c\ub2e4\n* target=0 \uc778 record\ub97c undersampling\ud55c\ub2e4\n\n> \uc6b0\ub9ac\uc758 \uacbd\uc6b0 training set \ub370\uc774\ud130\uc218\uac00 \ub9ce\uae30\ub54c\ubb38\uc5d0 undersampling\ud558\ub294 \ubc29\ubc95\uc73c\ub85c \uac00\ub824\uace0\ud55c\ub2e4.","2ae7e2d5":"#### 2) interaction \ubcc0\uc218 \ub9cc\ub4e4\uae30 (\ub2e4\ud56d\ud68c\uadc0)\nhttps:\/\/chana.tistory.com\/entry\/\ud578\uc988\uc628-\uba38\uc2e0\ub7ec\ub2dd5-\ub2e4\ud56d-\ud68c\uadc0\n\n* \uc0ac\uc774\ud0b7\ub7f0\uc758 PolynomialFeatures\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud6c8\ub828 \uc138\ud2b8\uc5d0 \uc788\ub294 \uac01 \ud2b9\uc131\uc744 \uc81c\uacf1\ud558\uc5ec \uc0c8\ub85c\uc6b4 \ud2b9\uc131\uc73c\ub85c \ucd94\uac00\ud55c \ud6c8\ub828 \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uc5b4\ubcf4\uc790 <br>\n\n> Q : 2\ucc28\ud56d \ubcc0\uc218\ub97c \ub9cc\ub4dc\ub294 \uc774\uc720\ub294 ? \uc5b4\ub5a4\uacbd\uc6b0\uc5d0 ? <br>\n> A : \ub370\uc774\ud130\ub4e4\uac04\uc758 \ud615\ud0dc\uac00 \ube44\uc120\ud615\uc77c\ub54c \ub370\uc774\ud130\uc5d0 \uac01 \ud2b9\uc131\uc758 \uc81c\uacf1\uc744 \ucd94\uac00\ud574\uc11c \ud2b9\uc131\uc774 \ucd94\uac00\ub41c \ube44\uc120\ud615 \ub370\uc774\ud130\ub97c \uc120\ud615\ud68c\uadc0 \ubaa8\ub378\ub85c \ud6c8\ub828\uc2dc\ud0a4\ub294 \ubc29\ubc95\n    ","eb1cb172":"#### 1-2) car variables\n* ps_car_12 , ps_car_15\uc5d0 missing value\uac00\uc788\ub2e4.\n* \ub9c8\ucc2c\uac00\uc9c0\ub85c, \ubc94\uc704\uac00 \ub2e4\ub974\uae30\ub54c\ubb38\uc5d0 \uc2a4\ucf00\uc77c\ub9c1\uc774 \ud544\uc694\ud574\ubcf4\uc784","ca87d4fe":"-----------------------------\n### \ub300\ud68c \uc124\uba85\n\uc6b4\uc804\uc790\uac00 \ub0b4\ub144\uc5d0 \ubcf4\ud5d8 \uccad\uad6c\ub97c \ud560 \uac83\uc778\uc9c0\ub97c \uc608\uce21\ud558\ub294 \ub300\ud68c.<br>\n58\uac1c\uc758 \uceec\ub7fc\uacfc 1\uac1c\uc758 Target \uceec\ub7fc\uc73c\ub85c \uc774\ub8e8\uc5b4\uc838\uc788\uc74c\n\n### Normalized Gini Coefficient (\uc9c0\ub2c8\uacc4\uc218)\n* \uba38\uc2e0\ub7ec\ub2dd \ubd84\uc57c\uc5d0\uc11c Decision Tree\ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ud3c9\uac00\ud560 \ub54c \uc5d4\ud2b8\ub85c\ud53c \uc9c0\uc218\uc640 \ud568\uaed8 \uc4f0\uc778\ub2e4. \n    * \uacb0\uc815\ud2b8\ub9ac\ub294 \ud2b8\ub9ac\uad6c\uc870\ub97c \ud615\uc131\ud560\ub54c \uc21c\ub3c4\uac00 \uc99d\uac00\ud558\uace0, \ubd88\uc21c\ub3c4\uac00 \ucd5c\ub300\ud55c \uc791\uc544\uc9c0\ub294 \ubc29\ud5a5\uc73c\ub85c \uacb0\uc815\uc744 \ub0b4\ub824\uac10.\n* \uc9c0\ub2c8 \uacc4\uc218\ub294 0~0.5 \uc758 \uac12\uc744 \uac00\uc9c0\ub294\ub370 \uac12\uc774 \uc791\uc744\uc218\ub85d \ubd84\ub958\uac00 \uc798 \ub418\uc5c8\ub2e4\uace0 \ubcfc \uc218 \uc788\uc74c\n    * \ubd88\uc21c\ub3c4(\uc11e\uc778 \uc815\ub3c4)\uac00 \uc801\uc740\uac83\uc774 \ubd84\ub958\uac00 \uc798\ub41c\uac83\n* \uc774 \ub300\ud68c\uc5d0\uc11c \uc9c0\ub2c8 \uacc4\uc218\ub294 Actual \uac12\uc758 \ub204\uc801 \ube44\uc728\uacfc Prediciton\uac12\uc758 \ub204\uc801 \ube44\uc728\ub85c \uc0b0\ucd9c\uc774\ub418\ub294\ub370, \uc774\uac83\uc744 \ud45c\uc900\ud654 \uc2dc\ud0a8\ub2e4.\n    * \uc774 \ud45c\uc900\ud654\ub294 Actual\uac12\uc774 \uac00\uc9c0\uace0 \uc788\ub294 \ubd88\ud3c9\ub4f1 \uc815\ub3c4\ub85c actual-prediction\uac04\uc758 \ubd88\ud3c9\ub4f1 \uc815\ub3c4\ub97c \ub098\ub204\uc5b4\uc11c \uc0b0\ucd9c\ub41c\ub2e4.","a928b902":"### Categorical\ubcc0\uc218\uc758 cardinality(\uc9d1\ud569\uc758 \ud06c\uae30) \uccb4\ud06c\n* Cardinality\ub294 \ubcc0\uc218\uc548\uc5d0 \uc11c\ub85c\ub2e4\ub978 unique\ud55c \uac12\uc758 \uac1c\uc218\ub97c \ub9d0\ud558\ub294\ub370, categorical\ubcc0\uc218\uc5d0 \ub9ce\uc740 distinct value\uac00 \uc788\uc73c\uba74 \ub354\ubbf8\ubcc0\uc218 \uac1c\uc218\uac00 \ub108\ubb34 \ub9ce\uc544\uc9c8\uc218\uc788\uc74c. \ub530\ub77c\uc11c \uc774\ub7f0 \ubcc0\uc218\ub4e4\uc744 \ub2e4\ub904\ubcf4\ub824\uace0\ud55c\ub2e4.","4dc01bc1":"* ordinal \ubcc0\uc218\uc758 target\ubcc4 \ud3c9\uade0\uc744 \uc0b4\ud3b4\ubcf4\ub2c8 ps_calc_13 \ubcc0\uc218\ucc98\ub7fc \ud2b9\uc815 \uac12\uc77c\ub54c target=1 \ud3c9\uade0\uac12\uc774 \uc720\ub09c\ud788 \ud070 \ud2b9\uc9d5\uc774 \uc788\uc5c8\uc74c","ac7e47ca":"* \uc11c\ub85c \uc0c1\uad00\uc774\uc788\ub294 \ubcc0\uc218\ub97c \uc5b4\ub5bb\uac8c \uacb0\uc815\ud558\uace0 \ub0a8\uaca8\ub458\uac83\uc778\uac00? \uc6b0\ub9ac\ub294 \ucc28\uc6d0\uc744 \uc904\uc774\uae30\uc704\ud574 \ubcc0\uc218\uc5d0 Principal Component Analysis (PCA) \ub97c \uc801\uc6a9\ud574\ubcfc\uc218\uc788\ub2e4. \uadf8\ub7ec\ub098, \uc0c1\uad00\uad00\uacc4\uac00 \uc788\ub294 \ubcc0\uc218\ub4e4\uc758 \uc218\uac00 \uc801\uae30\ub54c\ubb38\uc5d0 \ubaa8\ub378\uc774 \uc54c\uc544\uc11c \ud558\uac8c \ub450\uae30\ub85c\ud55c\ub2e4.\n\nPCA \ucc38\uace0 \ub178\ud2b8\ubd81 <br>\nhttps:\/\/www.kaggle.com\/bertcarremans\/reducing-number-of-numerical-features-with-pca","8e2eecdc":"### Metadata\n\ub370\uc774\ud130 \uad00\ub9ac\ub97c \uc6a9\uc774\ud558\uac8c \ud558\uae30 \uc704\ud574\uc11c \ubcc0\uc218\uc5d0\ub300\ud55c meta\uc815\ubcf4\ub97c DataFrame\uc5d0\uc800\uc7a5\ud560\uac83\uc774\ub2e4.<br>\n\uc774\ub294 \uc774\ud6c4 \ubd84\uc11d, \uc2dc\uac01\ud654, \ubaa8\ub378\ub9c1\uc2dc\uc5d0 \uc720\uc6a9\ud558\ub2e4\n> * role : input, ID, target\n* level:norminal(\uba85\ubaa9\ubcc0\uc218), interval(\uac04\uaca9\ubcc0\uc218), ordinal(\uc21c\uc704\ubcc0\uc218), binary\n    * (\ucc38\uace0) \uba85\ubaa9\ubcc0\uc218, \uc21c\uc704\ubcc0\uc218\ub294 \ubc94\uc8fc\ud615\ubcc0\uc218\uc5d0 \uc18d\ud568. \uac04\uaca9\ubcc0\uc218\ub294 \uc5f0\uc18d\ud615\ubcc0\uc218\n* keep: True or False\n* dtype : int, float, str","d5ee3cec":"----------\n## Feature scaling","016d54d2":"#### 2) Interval variables\n\ud788\ud2b8\ub9f5\uc73c\ub85c interval \ubcc0\uc218\uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uc0b4\ud3b4\ubcf4\uc790. ","5e7d98de":"### 1) Interval variables","130e8265":"**\uacb0\uce21\uce58\uac00 \ub108\ubb34\ub9ce\uc740 \ubcc0\uc218\ub294 \uc81c\uac70\ud558\uace0, \uc77c\ubd80\uc774\uba74 \ud3c9\uade0 \ub610\ub294 \ucd5c\ube48\uac12\uc73c\ub85c \ub300\uce58**\n\n* ps_car_03_cat \ubcc0\uc218\uc640 ps_car_05_cat \ubcc0\uc218\ub294 \uacb0\uce21\uce58\uac00 \uac01\uac01 68%, 44%\ub85c \ub108\ubb34 \ub9ce\uc73c\ubbc0\ub85c \uc81c\uac70\n* \ub098\uba38\uc9c0 categorical \ubcc0\uc218\ub4e4\uc758 \uacb0\uce21\uce58\ub294 \uc720\uc9c0\n* ps_reg_03(continuous) \ubcc0\uc218\ub294 18%\uac00 \uacb0\uce21\uce58\uc774\ubbc0\ub85c, \ud3c9\uade0\uc73c\ub85c \ub300\uce58\n* ps_car_11(ordinal) \ubcc0\uc218\ub294 1\uac1c\uc758 record\ub9cc \uacb0\uce21\uc774\ubbc0\ub85c \ucd5c\ube48\uac12\uc73c\ub85c \ub300\uce58\n* ps_car_14(continuous) \ubcc0\uc218\ub294 7%\uac00 \uacb0\uce21\uce58\uc774\ubbc0\ub85c \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uce58","28664f14":"* ordinal\ubcc0\uc218\uc5d0\uc11c\ub294 \uc0c1\uad00\uad00\uacc4\uac00 \ud070 \ubcc0\uc218\ub4e4\uc740 \ubcf4\uc774\uc9c0 \uc54a\ub294\ub2e4. (target 0,1\uc5d0 \ub530\ub77c \uadf8\ub8f9\ud551\ud588\uc744\ub54c\uc758 \ubd84\ud3ec\ub294 \ud655\uc778\ud574\ubcfc \ud544\uc694 \uc788\uc74c)","e2068a37":"----------\n## Exploratory Data Visualization\n\n#### 1) Categorical variables\nCategorical \ubcc0\uc218\ub97c \uc2dc\uac01\ud654\ud574\ubcf4\uace0 target=1\uc778 \uace0\uac1d\uc758 \ube44\uc728\uc744 \uc0b4\ud3b4\ubcf4\uc790","c52f7269":"#### 3) ordinal \ubcc0\uc218\uac04\uc758 \uc0c1\uad00\uad00\uacc4 \ud655\uc778","e2f86db2":"### Data Preprocessing\n* \uacb0\uce21\uce58 \ucc98\ub9ac (\ud3c9\uade0, \ucd5c\ube48\uac12 \ub300\uce58)\n* distinct value\uac00 \ub108\ubb34 \ub9ce\uc740 \ubcc0\uc218 drop\n* \ub354\ubbf8\ubcc0\uc218 \ucd94\uac00\n* 2\ucc28\ud56d\ubcc0\uc218 \ucd94\uac00\n* train \ub370\uc774\ud130\uc5d0\uc11c \ub2e4\ub978 \uc0ac\ub78c \ucf54\ub4dc\ub85c encoded\ud55c \uceec\ub7fc ps_car_11_cat_te \uc740 \uc6b0\uc120 \uc81c\uac70\n* train-set\uc758 rf, SelectFromModel \uacfc\uc815\uc744 \ud1b5\ud574 \uc8fc\uc694\ubcc0\uc218 (selected_vars) \ub3c4\ucd9c\ud588\uace0 test-set\ub3c4 \uc774 \ubcc0\uc218\ub9cc \ucd94\ucd9c\n* \ub370\uc774\ud130 \uc2a4\ucf00\uc77c\ub9c1 (StandardScaler)\n    * train-set\uc5d0\ub294 fit_transform, test-set\uc5d0\ub294 transform\ub9cc \uc801\uc6a9\n","f887a972":"\n* \ud3c9\uade0\uac12\uc744 \ud1b5\ud574 \ub300\ubd80\ubd84\uc758 \ubcc0\uc218\uc5d0\uc11c \uac12\uc774 0\uc778\uac83\uc744 \uc54c\uc218\uc788\ub2e4. imbalanced\ud55c \ub370\uc774\ud130","8f018475":"-----------------\n## Feature Selection\n* \ubd84\uc0b0\uc774 0\uc774\uac70\ub098 \uc791\uc740 feature\uc81c\uac70\n* \uc0ac\uc774\ud0b7\ub7f0\uc758 VarianceThreshold\ub97c \uc774\uc6a9\ud558\uba74 \uac04\ud3b8\ud558\uac8c \ubd84\uc0b0\uc774 0\uc778 feature\ub97c \uc81c\uac70\ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc, \uc774 \uacbd\uc6b0\uc5d0\ub294 \ubd84\uc0b0\uc774 0\uc778 \ubcc0\uc218\uac00 \uc5c6\uc74c. \ub530\ub77c\uc11c \ubd84\uc0b0\uc774 1% \ubbf8\ub9cc\uc778 \ubcc0\uc218\ub97c \uc81c\uac70\ud55c\ub2e4\uace0\ud558\uba74 31\uac1c\uc758 \ubcc0\uc218\ub97c \uc81c\uac70\ud560 \uc218 \uc788\uc74c.\n\n> Q : \ubd84\uc0b0\uc774 \uc791\uc740 \ubcc0\uc218\ub97c \uc81c\uac70\ud574\uc57c\ud558\ub294 \uc774\uc720 ? <br>\n\n> A : \uc608\uce21\ubaa8\ub378\uc5d0\uc11c \uc911\uc694\ud55c \ud2b9\uc131\uc774\ub780, \ud0c0\uac9f\uacfc\uc758 \uc0c1\uad00\uad00\uacc4\uac00 \ud070 \ud2b9\uc131\uc744 \uc758\ubbf8\ud55c\ub2e4. \uadf8\ub7f0\ub370 \uc0c1\uad00\uad00\uacc4\uc5d0 \uc55e\uc11c \uc5b4\ub5a4 \ud2b9\uc131\uc758 \uac12 \uc790\uccb4\uac00 \ud45c\ubcf8\uc5d0 \ub530\ub77c \uadf8\ub2e4\uc9c0 \ubcc0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \uc608\uce21\uc5d0 \ubcc4 \ub3c4\uc6c0\uc774 \ub418\uc9c0 \uc54a\uc744 \uac00\ub2a5\uc131\uc774 \ub192\ub2e4.  <br>\n(ex. \ub0a8\uc790\ub97c \uc0c1\ub300\ub85c\ud55c \uc124\ubb38\uc870\uc0ac \ub370\uc774\ud130\uc5d0\uc11c \ub0a8\uc790 \ub77c\ub294 \uc131\ubcc4\ud2b9\uc131\uc740 \ubb34\uc758\ubbf8\ud568.)<br>\n\ub530\ub77c\uc11c, \ud45c\ubcf8 \ubcc0\ud654\uc5d0 \ub530\ub978 \ub370\uc774\ud130 \uac12\uc758 \ubcc0\ud654\ub7c9 \uc989, \ubd84\uc0b0\uc774 \uae30\uc900\uce58\ubcf4\ub2e4\ub0ae\uc740 \ud2b9\uc131\uc740 \uc81c\uac70\ud558\ub294\uac83","c4740c76":"**\uc704\uc5d0\uc11c \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc740 \ubcc0\uc218\ub4e4\uc744 lmplot\uc73c\ub85c \uc2dc\uac01\ud654\ud574\ubcf8\ub2e4**","798436c9":"* ps_car_11_cat \ubcc0\uc218\ub9cc\uc774 distinct value\uac1c\uc218\uac00 \ub9ce\ub2e4."}}