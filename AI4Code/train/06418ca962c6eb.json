{"cell_type":{"58b77b42":"code","f9a46245":"code","43fb9728":"code","fd1ccc94":"code","2e47f95a":"code","09cfc71a":"code","2e85812c":"code","e7f38797":"code","bb854455":"code","ef4d4f21":"code","f22ca9ee":"code","c63f1792":"code","0159e2f4":"code","992050c0":"code","d6a09366":"code","55b66632":"code","4ed19b1d":"code","be45a1db":"code","492a3ab3":"markdown","5801ae90":"markdown","49a0de2b":"markdown","b06f4f2d":"markdown","cd2e2f7d":"markdown","79967c1e":"markdown","f4f083ec":"markdown","12837d0e":"markdown","19a2d0a1":"markdown","23f28154":"markdown","07e91272":"markdown"},"source":{"58b77b42":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nfrom itertools import product, combinations\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor, ExtraTreesClassifier\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\n\nrand_state = 719","f9a46245":"data_path = '\/kaggle\/input\/learn-together\/'\ndef reload(x):\n    return pd.read_csv(data_path + x, index_col = 'Id')\n\ntrain = reload('train.csv')\nn_train = len(train)\ntest = reload('test.csv')\nn_test = len(test)\n\nall_data = train.iloc[:,train.columns != 'Cover_Type'].append(test)\nall_data['train'] = [1]*n_train + [0]*n_test","43fb9728":"numerical = ['Elevation', 'Horizontal_Distance_To_Hydrology',\n             'Vertical_Distance_To_Hydrology', 'Horizontal_Distance_To_Roadways',\n             'Horizontal_Distance_To_Fire_Points',\n             'Aspect', 'Slope', \n             'Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm']\n\ncategorical = ['Soil_Type{}'.format(i) for i in range(1,41)] + ['Wilderness_Area{}'.format(i) for i in range(1,5)]","fd1ccc94":"# count % of samples that are zero\ncols_w0 = []\nfor col in numerical:\n    if min(train[col]) <= 0:\n        cols_w0.append(col)\ninitial_values = [0]*len(cols_w0)\nzero_counts = pd.DataFrame(index = cols_w0)\nfor df, col in product(['train','test', 'all_data'], cols_w0):\n    zero_counts.loc[col, '{}_0_count'.format(df)] = eval('len({0}[{0}.{1} == 0])'.format(df,col))\n    zero_counts.loc[col, '{}_0_portion'.format(df)] = eval('sum({0}.{1}==0)\/len({0}.{1})'.format(df, col))\n    zero_counts.loc[col, '1\/{}_nunique'.format(df)] = round(eval('{0}.{1}.nunique()'.format(df, col)) ** (-1), 6)\n    \nzero_counts","2e47f95a":"questionable_0 = ['Hillshade_9am', 'Hillshade_3pm'] # Hillshade_3pm visualization looks weird","09cfc71a":"corr_cols = {'Hillshade_9am': ['Hillshade_3pm', 'Aspect', 'Slope', 'Soil_Type10', 'Wilderness_Area1',\n                   'Wilderness_Area4', 'Vertical_Distance_To_Hydrology'],\n             'Hillshade_3pm': ['Hillshade_9am', 'Hillshade_Noon', 'Slope', 'Aspect']\n            }","2e85812c":"rfr = RandomForestRegressor(n_estimators = 100, random_state = rand_state, verbose = 1, n_jobs = -1)\n\n# for col in questionable_0: \n#     print('='*20)\n#     scores = cross_val_score(rfr,\n#                              all_data_non0[corr_cols[col]], \n#                              all_data_non0[col],\n#                              n_jobs = -1)\n#     print(col + ': {0:.4} (+\/- {1:.4}) ## [{2}]'.format(scores.mean(), scores.std()*2, ', '.join(map(str, np.round(scores,4)))))\n\n# ====================\n# Hillshade_9am: 1.0 (+\/- 0.00056) ## [0.9995, 0.9993, 0.9988]\n# ====================\n# Hillshade_Noon: 1.0 (+\/- 0.00076) ## [0.9995, 0.9995, 0.9987] # Hillshade_Noon is removed\n# ====================\n# Hillshade_3pm: 1.0 (+\/- 0.0029) ## [0.9981, 0.9971, 0.9947]\n# ====================\n# Slope: 0.9985 (+\/- 0.001297) ## [0.9979, 0.9994, 0.9982]     # corr_cols['Slope'] with 12 highest corr columns has 0.85 accuracy\n\n## NEAR PERFECT SCORES FOR ALL => no need further feature engineering for questionable_0 predictions","e7f38797":"for col in questionable_0:\n    print('='*20)\n    print(col)\n    all_data_0 = all_data[all_data[col] == 0].copy()\n    all_data_non0 = all_data[all_data[col] != 0].copy()\n    rfr.fit(all_data_non0[corr_cols[col]], all_data_non0[col])\n    pred = rfr.predict(all_data_0[corr_cols[col]])\n    pred_col = 'predicted_{}'.format(col)\n    \n    all_data[pred_col] = all_data[col].copy()\n    all_data.loc[all_data_0.index, pred_col] = pred\n\nfor col in questionable_0:\n    all_data['predicted_{}'.format(col)] = all_data['predicted_{}'.format(col)].apply(int)","bb854455":"def aspect_slope(df):\n    df['AspectSin'] = np.sin(np.radians(df.Aspect))\n    df['AspectCos'] = np.cos(np.radians(df.Aspect))\n    df['AspectSin_Slope'] = df.AspectSin * df.Slope\n    df['AspectCos_Slope'] = df.AspectCos * df.Slope\n    df['AspectSin_Slope_Abs'] = np.abs(df.AspectSin_Slope)\n    df['AspectCos_Slope_Abs'] = np.abs(df.AspectCos_Slope)\n    df['Hillshade_Mean'] = df[['Hillshade_9am',\n                              'Hillshade_Noon',\n                              'Hillshade_3pm']].apply(np.mean, axis = 1)\n    return df","ef4d4f21":"def distances(df):\n    horizontal = ['Horizontal_Distance_To_Fire_Points', \n                  'Horizontal_Distance_To_Roadways',\n                  'Horizontal_Distance_To_Hydrology']\n    \n    df['Euclidean_to_Hydrology'] = np.sqrt(df['Horizontal_Distance_To_Hydrology']**2 + df['Vertical_Distance_To_Hydrology']**2)\n    df['EuclidHydro_Slope'] = df.Euclidean_to_Hydrology * df.Slope\n    df['Elevation_VDH_sum'] = df.Elevation + df.Vertical_Distance_To_Hydrology\n    df['Elevation_VDH_diff'] = df.Elevation - df.Vertical_Distance_To_Hydrology\n    df['Elevation_2'] = df.Elevation**2\n    df['Elevation_3'] = df.Elevation**3\n    df['Elevation_log1p'] = np.log1p(df.Elevation) # credit: https:\/\/www.kaggle.com\/evimarp\/top-6-roosevelt-national-forest-competition\/notebook\n    \n    for col1, col2 in combinations(zip(horizontal, ['HDFP', 'HDR', 'HDH']), 2):\n        df['{0}_{1}_diff'.format(col1[1], col2[1])] = df[col1[0]] - df[col2[0]]\n        df['{0}_{1}_sum'.format(col1[1], col2[1])] = df[col1[0]] + df[col2[0]]\n    \n    df['Horizontal_sum'] = df[horizontal].sum(axis = 1)\n    return df\n","f22ca9ee":"def OHE_to_cat(df, colname, data_range): # data_range = [min_index, max_index+1]\n    df[colname] = sum([i * df[colname + '{}'.format(i)] for i in range(data_range[0], data_range[1])])\n    return df","c63f1792":"soils = [\n    [7, 15, 8, 14, 16, 17,\n     19, 20, 21, 23], #unknow and complex \n    [3, 4, 5, 10, 11, 13],   # rubbly\n    [6, 12],    # stony\n    [2, 9, 18, 26],      # very stony\n    [1, 24, 25, 27, 28, 29, 30,\n     31, 32, 33, 34, 36, 37, 38, \n     39, 40, 22, 35], # extremely stony and bouldery\n]\nsoil_dict = {}\nfor index, soil_group in enumerate(soils):\n    for soil in soil_group:\n        soil_dict[soil] = index\n\ndef rocky(df):\n    df['Rocky'] = sum(i * df['Soil_Type' + str(i)] for i in range(1,41))\n    df['Rocky'] = df['Rocky'].map(soil_dict)\n    return df","0159e2f4":"all_data = aspect_slope(all_data)\nall_data = distances(all_data)\nall_data = OHE_to_cat(all_data, 'Wilderness_Area', [1,5])\nall_data = OHE_to_cat(all_data, 'Soil_Type', [1,41])\nall_data = rocky(all_data)\nall_data.drop(['Soil_Type7', 'Soil_Type15', 'train'] + questionable_0, axis = 1, inplace = True)","992050c0":"X_train = all_data.iloc[:n_train,:].copy()\ny_train = train.Cover_Type.copy()\ndel train\nX_test = all_data.iloc[n_train:, :].copy()","d6a09366":"# important columns\nrfc = RandomForestClassifier(n_estimators = 719,\n                               max_depth = 464,\n                                max_features = 0.3,\n                               min_samples_split = 2,\n                               min_samples_leaf = 1,\n                                bootstrap = False,\n                               verbose = 0,\n                               random_state = rand_state,\n                               n_jobs = -1)\nrfc.fit(X_train, y_train)\n\nimportances = pd.DataFrame({'Features': X_train.columns, \n                                'Importances': rfc.feature_importances_})\n\nimportant_cols = importances[importances.Importances >= 0.003].Features.copy()\ndel importances","55b66632":"# params = {'n_estimators': np.logspace(2.25,3.3, 6).astype(int)\n#           , 'max_depth': np.logspace(1.8,2.9,5).astype(int)\n#           , 'max_features': [0.1, 0.3, 0.9]\n#           , 'min_samples_split': [2, 5, 10]\n#           , 'min_samples_leaf': [1, 3, 9]\n#           , 'bootstrap': [True, False]\n#          }\n# etc = ExtraTreesClassifier()\n# grid = GridSearchCV(estimator = etc\n#                     , param_grid = params\n#                     , n_jobs = -1\n#                     , cv = 3\n#                     , scoring = 'accuracy'\n#                     , verbose = 2\n#                     , refit = True\n#                    )\n\n# grid.fit(X_train[important_cols], y_train) # train on only important columns\n\n# print('Best hyper-parameters found:')\n# print(grid.best_params_)\n# print('\\nFitting time:')\n# print(grid.refit_time_)\n# print('\\nBest score: ')\n# print(grid.best_score_)\n\n###########OUTPUT#################\n# Best hyper-parameters found:\n# {'bootstrap': False, 'max_depth': 794, 'max_features': 0.9, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 177}\n\n# Fitting time:\n# 13.407391786575317\n\n# Best score: \n# 0.8095899470899471","4ed19b1d":"etc = ExtraTreesClassifier(n_estimators = 177\n                          , max_depth = 794\n                          , max_features = 0.9\n                          , min_samples_split = 2\n                          , min_samples_leaf = 1\n                          , bootstrap = False\n                           , verbose = 1\n                           , random_state = rand_state\n                          )\netc.fit(X_train[important_cols], y_train)","be45a1db":"predict = etc.predict(X_test[important_cols])\n\noutput = pd.DataFrame({'Id': test.index,\n                      'Cover_Type': predict})\noutput.to_csv('Submission.csv', index=False)","492a3ab3":"### Categorical","5801ae90":"### Get important columns","49a0de2b":"### Aspect, Slope & Shadow","b06f4f2d":"### Distances & Elevation","cd2e2f7d":"# Other Features","79967c1e":"# Load Data","f4f083ec":"### Hyper-params tuning - ExtraTreesClassifier","12837d0e":"### Rockiness","19a2d0a1":"### Output & Submission","23f28154":"# Impute \"Fake\" 0s","07e91272":"## Summary and Output"}}