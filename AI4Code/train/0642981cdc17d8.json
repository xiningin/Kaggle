{"cell_type":{"4692e1f6":"code","274ed5d9":"code","39c73d3e":"code","6720c5f0":"code","a0b351d1":"code","298c731d":"code","f86992c9":"code","3a4bf8e0":"code","74a35a54":"code","bdd8fac5":"code","24f83061":"code","eb4c1b77":"code","65234bcd":"code","a9caff49":"code","e575eaac":"code","23cae61e":"markdown","03dced80":"markdown","82e394ec":"markdown","da33b741":"markdown","e7ff84e2":"markdown","159b3d53":"markdown"},"source":{"4692e1f6":"import pandas as pd                                  # for data manipulation\nimport matplotlib.pyplot as plt                      # for data representation\nimport numpy as np                                   # linear algebra\nfrom keras.utils.np_utils import to_categorical      # one hot enconding\nfrom sklearn.model_selection import train_test_split # selecting train and test samples\nfrom keras.models import Sequential                  # to make our model customizable\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom tensorflow.python import keras                  # I'll import loss from here\n\n# Load data:\n\ntrain_data = pd.read_csv('..\/input\/train.csv')\ntest_data  = pd.read_csv('..\/input\/test.csv')","274ed5d9":"print(train_data.head())","39c73d3e":"print(test_data.head())","6720c5f0":"print('train.csv dataset contains %d different images.' %(len(train_data)))\nprint('test.csv dataset contains %d different images.' %(len(test_data)))","a0b351d1":"# defining x and y:\n\nx = train_data.drop(['label'], axis = 'columns')  # we quit y column from the dataset\ny = train_data['label']\n'''\nplt.figure(1)\nplt.title('Y_train')\nplt.hist(Y_train, rwidth = 0.9)\nplt.xlabel('numbers')\nplt.ylabel('count')\nplt.show()\n'''\n# Models usually works better when values are normalized:\n\nx         = x \/ 255.0\ntest_data = test_data \/ 255.0\n\n# We also need Y_train to be categorical in order to train our model\n\ny_categorical = to_categorical(y, num_classes = 10)","298c731d":"x = x.values.reshape(-1, 28, 28, 1)  # (28, 28) is image length, 1 is to build a 3D matrix which contains\n                                       #  all images and -1 is because of Keras channel dimension.\n    \ntest_data = test_data.values.reshape(-1, 28, 28, 1)\n","f86992c9":"for i in range(0, 9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(x[i][:,:,0])\n    plt.title(y[i])\n","3a4bf8e0":"# Define the model:\n\n'''\nmodel = Sequential()\nmodel.add(Conv2D(12, input_shape = (28, 28, 1), kernel_size = 3, activation = 'relu'))\nmodel.add(Conv2D(2, kernel_size = 3, activation = \"relu\"))\nmodel.add(Conv2D(2, kernel_size = 3, activation = \"relu\"))\nmodel.add(Flatten())\nmodel.add(Dense(100, activation = \"relu\"))\nmodel.add(Dense(10, activation = \"softmax\"))\n\n'''\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\n","74a35a54":"# Compile the model\n\nmodel.compile(loss = keras.losses.categorical_crossentropy,\n                     optimizer = \"adam\",\n                     metrics = ['accuracy'])","bdd8fac5":"# Fit the model\n\nhistory = model.fit(x, y_categorical, batch_size = 100, epochs = 20, validation_split = 0.2)","24f83061":"print(history.history.keys())","eb4c1b77":"# copied from https:\/\/machinelearningmastery.com\/display-deep-learning-model-training-history-in-keras\/\n# summarize history for accuracy\nplt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","65234bcd":"answer = model.predict(test_data)\nprint(answer) # array of probabilities. We'll take the most probable.","a9caff49":"answer = np.argmax(answer, axis = 1)\nanswer = pd.Series(answer, name = \"Label\")","e575eaac":"submission = pd.concat([pd.Series(range(1,28001), name = \"ImageId\"), answer], axis = 1)\nsubmission.to_csv(\"my_submission.csv\", index = False)","23cae61e":"Test file doesn't contain label column.","03dced80":"Once we have seen our numbers it's time to split data into train and test for our model.","82e394ec":"**Digit Recognizer**\n\nTry to correctly identify digits from 0 to 9 from MNIST dataset.","da33b741":"Let's explore the data in order to prepare our predictors x and y. ","e7ff84e2":"We are going to work with Conv2D neural network so it's necessary to reshape X_train from pixels to 2d images.","159b3d53":"First column show the index of the row. 'label' contains the number which corresponds to each image (*y* value). Each pixel column contains pixels intensity from 0 to 255 in grey scale."}}