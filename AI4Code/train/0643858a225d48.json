{"cell_type":{"d45ae8c5":"code","bd0278a3":"code","6e733db7":"code","1f788c28":"code","ebb387db":"code","ed44f303":"code","b8757d0f":"code","c20aa2e3":"code","2506ce33":"code","621668e3":"code","de8d9451":"code","c7aca53f":"code","4898aafb":"code","4aaba6c1":"code","0ae395dc":"code","bc35f43f":"code","90cc871a":"code","84a8beb1":"markdown","66d83a21":"markdown","0379f469":"markdown","94d5ec1e":"markdown","5ba2a374":"markdown","81300482":"markdown","a53307f8":"markdown","9a01c2d2":"markdown","ae00ceda":"markdown","e02b3332":"markdown","cd50624d":"markdown","d0e9ff82":"markdown","00f761fd":"markdown","8e08f57f":"markdown","1ae4b1bf":"markdown","a4b35b2c":"markdown","d1342080":"markdown","9cbb8453":"markdown","2467c6f0":"markdown","63c46bcd":"markdown","b3b7b5d7":"markdown","48478e98":"markdown","c8675ba5":"markdown","6d2688f5":"markdown","0fac21e0":"markdown","c94a0e23":"markdown"},"source":{"d45ae8c5":"import pandas as pd\nfrom math import sqrt\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","bd0278a3":"movies_df = pd.read_csv('\/kaggle\/input\/movielens\/movies.dat', sep = '::', engine='python', names = ['MovieID','Title','Genre'])\nratings_df = pd.read_csv('\/kaggle\/input\/movielens\/ratings.dat', sep = '::', engine='python', names = ['UserID','MovieID','Rating','Timestamp'])","6e733db7":"movies_df.head()","1f788c28":"# Remove year from the Title column and store it in a new column\nmovies_df['Year'] = movies_df.Title.str.extract('(\\(\\d\\d\\d\\d\\))',expand=False)\nmovies_df['Year'] = movies_df.Year.str.extract('(\\d\\d\\d\\d)',expand=False)\nmovies_df['Title'] = movies_df.Title.str.replace('(\\(\\d\\d\\d\\d\\))', '')\nmovies_df['Title'] = movies_df['Title'].apply(lambda x: x.strip())\n\n# Split the values in the Genre column\nmovies_df['Genre'] = movies_df.Genre.str.split('|')\n\nmovies_df.head()","ebb387db":"movies_with_genres = movies_df.copy()\n\nfor index, row in movies_df.iterrows():\n    for genre in row['Genre']:\n        movies_with_genres.at[index, genre] = 1\n\nmovies_with_genres = movies_with_genres.fillna(0)\nmovies_with_genres.head()","ed44f303":"ratings_df.head()","b8757d0f":"ratings_df = ratings_df.drop('Timestamp', 1)\nratings_df.head()","c20aa2e3":"import random\nuser = random.choice(ratings_df['UserID'])\nprint(\"User ID: \", user)","2506ce33":"user_input = ratings_df[ratings_df['UserID'] == user].reset_index(drop=True)\nuser_input","621668e3":"input_movies = movies_df[movies_df['MovieID'].isin(user_input['MovieID'].tolist())]\nuser_input = pd.merge(input_movies, user_input)\nuser_input = user_input.drop('Genre', 1).drop('Year', 1).drop('UserID', 1)\nuser_input","de8d9451":"user_movies = movies_with_genres[movies_with_genres['MovieID'].isin(user_input['MovieID'].tolist())]\nuser_movies","c7aca53f":"user_movies = user_movies.reset_index(drop=True)\nuser_genres = user_movies.drop('MovieID', 1).drop('Title', 1).drop('Genre', 1).drop('Year', 1)\nuser_genres.head()","4898aafb":"user_profile = user_genres.transpose().dot(user_input['Rating'])\nuser_profile","4aaba6c1":"genre_table = movies_with_genres.set_index(movies_with_genres['MovieID'])\ngenre_table = genre_table.drop('MovieID', 1).drop('Title', 1).drop('Genre', 1).drop('Year', 1)\ngenre_table.head()","0ae395dc":"recommendations_df = ((genre_table*user_profile).sum(axis=1))\/(user_profile.sum())\nrecommendations_df.head()","bc35f43f":"recommendations_df = recommendations_df.sort_values(ascending=False)\nrecommendations_df.head()","90cc871a":"df = movies_df.loc[~movies_df['MovieID'].isin(user_input.MovieID)].reset_index(drop=True)\ndf.loc[df['MovieID'].isin(recommendations_df.head(20).keys())].reset_index(drop=True)","84a8beb1":"Now, we extract the genre table from the original dataframe containing all movies with their genres in binary values. Then, we drop unnecessary information.","66d83a21":"In this notebook, we will use the content-based movie recommender system to recommend top movies to a randomly chosen user.","0379f469":"With the content-based movie recommender system, we were able to recommend movies that are similar to the ones the user has rated in the past.","94d5ec1e":"Now, we add the movie titles to the user input. \n\nFirst, we filter out the movies by Movie ID from the movies dataframe. Next, we merge it to the user input so we can add their corresponding movie titles. Then, we drop unnecessary information.","5ba2a374":"We get the subset of movies that the user has watched from the dataframe containing the genres with binary values.","81300482":"First, we import the packages that we will need.","a53307f8":"Since we are using the content-based recommendation system technique, having the genres in a list format is not optimal. Thus, we will use the One Hot Encoding technique where each column corresponds to one possible value of the feature\u2014either **0** or **1**. We will store this dataframe in another variable since we will not be using the genres in the first part.","9a01c2d2":"## Preprocessing","ae00ceda":"### Movies Matrix","e02b3332":"Now that we have the user profile and the movies matrix, we take the weighted average of every movie based on the user profile. From that, we recommend the top movies that most satisfy it.","cd50624d":"Now, we look at the ratings dataframe.","d0e9ff82":"We will not need the **Timestamp** column, thus, we can just drop it.","00f761fd":"**Here are the top movie recommendations for the chosen user:**","8e08f57f":"### User's Movies Matrix","1ae4b1bf":"### User Profile","a4b35b2c":"We look at the first 5 columns of the movies dataframe to see how it looks like.","d1342080":"We choose a random user to recommend movies to.","9cbb8453":"### User Input","2467c6f0":"### Recommendation Matrix","63c46bcd":"Now, we store the movie information and ratings information into pandas dataframes.","b3b7b5d7":"To get the user profile, we turn each genre into weights. In order to get this, we multiply the user's reviews with the user's genre table and then sum up the resulting table by column. This can be simply done using the pandas dot function.","48478e98":"## Content-Based Recommendation System","c8675ba5":"# Content-Based Movie Recommender System","6d2688f5":"Since we will only need the genre table, we drop columns that we will not need.","0fac21e0":"Here are the movies rated by the user:","c94a0e23":"We remove the year from the **Title** column and store it in a new **Year** column. Then, we also split the values in the **Genre** column."}}