{"cell_type":{"0faa980d":"code","f6e45167":"code","de918d88":"code","1c129db2":"code","a548214f":"code","d8a379d7":"code","5445eb4b":"code","d2e41873":"code","c09fb185":"code","234c9bb8":"code","1767b141":"code","a0b319ad":"code","4ea25566":"code","0fe4440b":"code","fdf89cab":"code","eb9b411b":"code","54c126ba":"code","a0df8a11":"code","50a57bdd":"code","b6109ec5":"code","b4096be3":"code","a36d0c20":"code","529c64ed":"code","7d56132f":"code","d09d7efc":"code","44abca52":"code","40e2c153":"code","987daaa1":"code","e4b58c9f":"code","781a2b93":"code","b41b134e":"code","a911d759":"code","4f51692b":"code","56e4e6a1":"code","ab9ead9e":"code","83486e69":"code","dbe7cd31":"code","7106a475":"code","f10b1663":"markdown","6dc797b8":"markdown","547c8040":"markdown","ac8c7e5a":"markdown","95f1079e":"markdown","db83ca41":"markdown","e95e7a06":"markdown"},"source":{"0faa980d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Any results you write to the current directory are saved as output.","f6e45167":"from fastai import *\nfrom fastai.text import *","de918d88":"path = \"\/kaggle\/input\/nlp-getting-started\"\n\ndf_train = pd.read_csv(os.path.join(path,'train.csv'))\ndf_test = pd.read_csv(os.path.join(path,'test.csv'))","1c129db2":"df_train.head()","a548214f":"df_train.target.plot.hist() # quite a balance dataset","d8a379d7":"df_test.head()","5445eb4b":"df_train.head()\n\ndf_train.drop(['id','keyword','location'],axis = 1,inplace = True)\ndf_test_ = df_test.copy().drop(['id','keyword','location'],axis = 1)","d2e41873":"df_test_['target'] = 0\ndf_test_.head()","c09fb185":"valid_ix = np.random.choice(np.arange(len(df_train)),round(len(df_train)*0.2),replace = False)\ntrain_ix = np.asarray(list(set(np.arange(len(df_train))) - set(valid_ix)))\nassert(df_train.shape[0] == train_ix.shape[0]+valid_ix.shape[0])","234c9bb8":"bs = 32","1767b141":"df_tr = df_train.iloc[train_ix,[1,0]]\ndf_val = df_train.iloc[valid_ix,[1,0]]\ndf_te = df_test_.iloc[:,[1,0]]","a0b319ad":"data_lm = TextLMDataBunch.from_df(path,train_df = df_tr,valid_df = df_val,\n                                 )\ndata_clas = TextClasDataBunch.from_df(path,train_df = df_tr,valid_df = df_val,\n                                 vocab=data_lm.train_ds.vocab, bs=bs,\n                                     test_df = df_te)","4ea25566":"data_lm.show_batch()","0fe4440b":"x,y = next(iter(data_lm.train_dl))\nexample = x[:15,:15].cpu()\ntexts = pd.DataFrame([data_lm.train_ds.vocab.textify(l).split(' ') for l in example])\ntexts","fdf89cab":"torch.cuda.is_available()\ntorch.cuda.current_device()\ntorch.cuda.set_device(0)","eb9b411b":"opath = '\/kaggle\/working'","54c126ba":"learn = language_model_learner(data_lm, AWD_LSTM, drop_mult=0.1,path = opath)\nlearn.fit_one_cycle(1, 1e-2)","a0df8a11":"learn.unfreeze()\nlearn.fit_one_cycle(5, slice(1e-4,1e-2))","50a57bdd":"learn.predict(\"There is an earthquake\", n_words=15)","b6109ec5":"learn.predict(\"Huge fire\", n_words=15)","b4096be3":"learn.predict(\"I love my gf\", n_words=15)","a36d0c20":"learn.save('ft')\nlearn.save_encoder('ft_enc')","529c64ed":"??learn.load_encoder","7d56132f":"learn = text_classifier_learner(data_clas, AWD_LSTM, drop_mult=0.3)\nlearn = learn.load_encoder(os.path.join(opath,'models','ft_enc'))","d09d7efc":"data_clas.show_batch()","44abca52":"learn.fit_one_cycle(1,1e-2)","40e2c153":"learn.unfreeze()\nlearn.fit_one_cycle(3,slice(1e-6,1e-2))","987daaa1":"valid_probs,valid_y = learn.get_preds(ds_type = DatasetType.Valid,ordered = True)","e4b58c9f":"valid_preds = np.argmax(valid_probs,1)","781a2b93":"from sklearn.metrics import *","b41b134e":"accuracy_score(valid_y,valid_preds)","a911d759":"print(learn.predict('Huge fire near the Leceister Square but it is fake'))\nlearn.predict('Huge fire near the Leceister Square')[0]","4f51692b":"test_probs,_ = learn.get_preds(ds_type = DatasetType.Test,ordered = True)","56e4e6a1":"test_preds = np.argmax(test_probs.numpy(),1)\nprint(f'{test_preds.sum()} positives in {test_preds.shape[0]}')","ab9ead9e":"sample_submission = pd.read_csv(os.path.join(path,'sample_submission.csv'))","83486e69":"sample_submission['target'] = test_preds","dbe7cd31":"sample_submission.head()","7106a475":"sample_submission.to_csv('sub_4.csv',index=False)","f10b1663":"We will load a pretrained model using `language_model_leaner`. There are three models available at the moment: `AWS_LSTM`, `Transformer` and `TransformerXL` (but no pretrained weights now for this)","6dc797b8":"## NB\n\nBy default, `get_preds` returns `probabilities` and `true_labels`, not `predicted_labels`. So use `np.argmax(probs,axis=1)` to get the predicted labels","547c8040":"we will use discriminative learning rate for the training. `slice(1e-4,1e-2)` will set the first layer with a learning rate of 1e-4, while the last layer will have 1e-2, layers in between have equal spaced proportion of learning rates.","ac8c7e5a":"This is a binary text classifcation problem, we are given 7000+ labeled tweets which contain those are related to disasters and those are not. In this notebook, we will explore the fast.ai library, using a pre-trained language model.\n\nI would recommende fasi.ai NLP course for every NLP starters: https:\/\/www.fast.ai\/2019\/07\/08\/fastai-nlp\/\n\nThis notebook is based on https:\/\/github.com\/fastai\/course-nlp\/blob\/master\/review-nlp-transfer.ipynb","95f1079e":"Take a look a the tokenizer","db83ca41":"swap the column so that it matches the format in fast.ai, where by default the first column is the label, the second is the text.","e95e7a06":"Because we fine-tune the model on the tweets about disaster, the result is pretty readable if you start off the sentence with something like"}}