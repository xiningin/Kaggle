{"cell_type":{"1b0dea6b":"code","725e19b0":"code","06fb3193":"code","8a3b4033":"code","f9d14c29":"code","999f0881":"code","1b10cda8":"code","8fa9d19e":"code","72874e64":"code","f27b5c34":"code","cc18bfeb":"code","19eae946":"code","1911b2f8":"code","7a518b9d":"code","3fd066d1":"code","a2794f3b":"code","da9e76cd":"code","f26f2954":"code","447f8bc1":"code","9a67679a":"code","913da09a":"code","67c00395":"code","d273def9":"code","ac1bb30d":"code","8ec0a799":"code","e237c516":"code","2ef5a524":"code","a15c7c56":"code","03a8c07f":"code","00688b0b":"markdown","febcbf51":"markdown","deb311b3":"markdown"},"source":{"1b0dea6b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","725e19b0":"shapes = ['triangles', 'circles', 'squares']\n\npath= '\/kaggle\/input\/basicshapes\/shapes\/'\n\nfiles= []\nresult= []\n\nfor shape in shapes:\n    new_path= path+shape\n    \n    for file in os.listdir(new_path):\n        files.append(os.path.join(new_path,file))\n        result.append(shape)\n        ","06fb3193":"len(files)","8a3b4033":"len(result)","f9d14c29":"files[:5]","999f0881":"from skimage import color\nimages=[]\nfor file in files:\n    img= plt.imread(file)\n    img= color.rgb2gray(img)\n    img= img.ravel()\n    images.append(img)","1b10cda8":"len(images)","8fa9d19e":"df= pd.DataFrame(images)","72874e64":"df.head()","f27b5c34":"df['result']= result\ndf.head()","cc18bfeb":"from sklearn.utils import shuffle\n\ndf= shuffle(df)\ndf.head()","19eae946":"df['result']= df['result'].replace({'circles':0, 'triangles':1, 'squares':2})\ndf.head()","1911b2f8":"y= df['result']\nX= df.drop('result', axis=1)","7a518b9d":"X= X.values.reshape(-1,28,28,1)","3fd066d1":"from keras.utils.np_utils import to_categorical\n\ny= to_categorical(y)\ny.astype('int32')","a2794f3b":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train,y_test= train_test_split(X,y, test_size=0.2, random_state=42)","da9e76cd":"from keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Dropout, Conv2D, BatchNormalization, MaxPool2D","f26f2954":"model= Sequential()\nmodel.add(Conv2D(32, (3,3), activation='relu', padding='same', input_shape=(28,28,1)))\nmodel.add(Conv2D(32, (3,3), activation='relu'))\n\nmodel.add(MaxPool2D(2,2))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3,3), activation='relu'))\nmodel.add(MaxPool2D(2,2))\n\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(3, activation='softmax'))","447f8bc1":"model.summary()","9a67679a":"from keras.callbacks import ModelCheckpoint\n\nmodel_save= ModelCheckpoint('best.hdf5', save_best_only=True, monitor='val_accuracy')","913da09a":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","67c00395":"history= model.fit(X_train, y_train, batch_size=20, epochs=100, verbose=1, validation_data=(X_test, y_test), callbacks=[model_save])","d273def9":"model.load_weights('best.hdf5')\n\nmodel.evaluate(X_test,y_test, batch_size=20)","ac1bb30d":"pred= model.predict(X_test)\npredictions= np.argmax(pred, axis=1)\npredictions","8ec0a799":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])","e237c516":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])","2ef5a524":"plt.imshow(X_test[2])","a15c7c56":"y_train[2]","03a8c07f":"predictions[2]","00688b0b":"# Model","febcbf51":"# Load Data","deb311b3":"# Like and upvote if you liked my notebook :)"}}