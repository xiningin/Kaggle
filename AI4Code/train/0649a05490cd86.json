{"cell_type":{"376879b5":"code","50d03de5":"code","7eed868e":"code","7c0ef84a":"code","d0546245":"code","4125ef7c":"code","ca6854f7":"code","768c6f2e":"code","f38f8e1a":"code","c131cec2":"code","a5c0a6f7":"markdown","59d65a0b":"markdown","e11047f7":"markdown","2e825f2d":"markdown","2e50474a":"markdown","d65b96e8":"markdown","db4aa458":"markdown","cf831efd":"markdown","e876f10a":"markdown","944b9357":"markdown","42874274":"markdown","1e19cd8f":"markdown","e9f313e3":"markdown","63b771d5":"markdown","9d3c3d55":"markdown","76b37f8b":"markdown","6b3095b0":"markdown","034195f0":"markdown","6f1a0716":"markdown","09117918":"markdown","5d2331c2":"markdown","5d7aba85":"markdown","33cc70ac":"markdown","ed0c4efc":"markdown"},"source":{"376879b5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import f1_score, accuracy_score, confusion_matrix\nimport seaborn as sns\nfrom tkinter import *\nfrom tkinter import messagebox\nimport sys \nimport urllib\nimport urllib.request","50d03de5":"cd \/kaggle\/input\/disease-symptom-description-dataset","7eed868e":"df = pd.read_csv('dataset.csv')\nprint(df.head())\n#df.describe()\ndf1 = pd.read_csv('Symptom-severity.csv')\nprint(df1.head())","7c0ef84a":"df.isna().sum()\ndf.isnull().sum()\n\ncols = df.columns\ndata = df[cols].values.flatten()\n\ns = pd.Series(data)\ns = s.str.strip()\ns = s.values.reshape(df.shape)\n\ndf = pd.DataFrame(s, columns=df.columns)\n\ndf = df.fillna(0)\ndf.head()","d0546245":"vals = df.values\nsymptoms = df1['Symptom'].unique()\n\nfor i in range(len(symptoms)):\n    vals[vals == symptoms[i]] = df1[df1['Symptom'] == symptoms[i]]['weight'].values[0]\n    \nd = pd.DataFrame(vals, columns=cols)\n\nd = d.replace('dischromic _patches', 0)\nd = d.replace('spotting_ urination',0)\ndf = d.replace('foul_smell_of urine',0)\ndf.head()","4125ef7c":"(df[cols] == 0).all()\n\ndf['Disease'].value_counts()\n\ndf['Disease'].unique()\n\ndata = df.iloc[:,1:].values\nlabels = df['Disease'].values","ca6854f7":"x_train, x_test, y_train, y_test = train_test_split(data, labels, shuffle=True, train_size = 0.85)\nprint(x_train.shape, x_test.shape, y_train.shape, y_test.shape)\n\nmodel = SVC()\nmodel.fit(x_train, y_train)\n\npreds = model.predict(x_test)\nprint(preds)","768c6f2e":"conf_mat = confusion_matrix(y_test, preds)\ndf_cm = pd.DataFrame(conf_mat, index=df['Disease'].unique(), columns=df['Disease'].unique())\nprint('F1-score% =', f1_score(y_test, preds, average='macro')*100, '|', 'Accuracy% =', accuracy_score(y_test, preds)*100)\nsns.heatmap(df_cm)","f38f8e1a":"def message():\n    if (Symptom1.get() == \"None\" and  Symptom2.get() == \"None\" and Symptom3.get() == \"None\" and Symptom4.get() == \"None\" and Symptom5.get() == \"None\"):\n        messagebox.showinfo(\"OPPS!!\", \"ENTER  SYMPTOMS PLEASE\")\n    else :\n        SVM()\n\ndef SVM():\n    psymptoms = [Symptom1.get(),Symptom2.get(),Symptom3.get(),Symptom4.get(),Symptom5.get()]\n    loc = location.get()\n    a = np.array(df1[\"Symptom\"])\n    b = np.array(df1[\"weight\"])\n    for j in range(len(psymptoms)):\n        for k in range(len(a)):\n            if psymptoms[j]==a[k]:\n                psymptoms[j]=b[k]\n\n    nulls = [0,0,0,0,0,0,0,0,0,0,0,0]\n    psy = [psymptoms + nulls]\n\n    pred2 = model.predict(psy)\n    t3.delete(\"1.0\", END)\n    t3.insert(END, pred2[0])\n\n    if(pred2[0]==\"GERD\"):\n        z=urllib.request.urlopen('https:\/\/api.thingspeak.com\/update?api_key=MP77HD9B13Z7N6BO&field1=1&field2=0&field3='+str(loc))\n        z.read()\n    if(pred2[0]==\"Hepatitis C\"):\n        r=urllib.request.urlopen('https:\/\/api.thingspeak.com\/update?api_key=MP77HD9B13Z7N6BO&field1=0&field2=1&field3='+str(loc))\n        r.read()","c131cec2":"root = Tk()\nroot.title(\" Disease Prediction From Symptoms\")\nroot.configure()\n\nSymptom1 = StringVar()\nSymptom1.set(None)\nSymptom2 = StringVar()\nSymptom2.set(None)\nSymptom3 = StringVar()\nSymptom3.set(None)\nSymptom4 = StringVar()\nSymptom4.set(None)\nSymptom5 = StringVar()\nSymptom5.set(None)\nlocation = StringVar()\nlocation.set(None)\n\nw2 = Label(root, justify=CENTER, text=\" Disease Prediction From Symptoms \")\nw2.config(font=(\"Helvetica\", 30))\nw2.grid(row=1, column=0, columnspan=2, padx=100)\n\nNameLb1 = Label(root, text=\"\")\nNameLb1.config(font=(\"Helvetica\", 20))\nNameLb1.grid(row=5, column=1, pady=10,  sticky=W)\n\nS1Lb = Label(root,  text=\"Symptom 1\")\nS1Lb.config(font=(\"Helvetica\", 15))\nS1Lb.grid(row=7, column=1, pady=10 , sticky=W)\n\nS2Lb = Label(root,  text=\"Symptom 2\")\nS2Lb.config(font=(\"Helvetica\", 15))\nS2Lb.grid(row=8, column=1, pady=10, sticky=W)\n\nS3Lb = Label(root,  text=\"Symptom 3\")\nS3Lb.config(font=(\"Helvetica\", 15))\nS3Lb.grid(row=9, column=1, pady=10, sticky=W)\n\nS4Lb = Label(root,  text=\"Symptom 4\")\nS4Lb.config(font=(\"Helvetica\", 15))\nS4Lb.grid(row=10, column=1, pady=10, sticky=W)\n\nS5Lb = Label(root,  text=\"Symptom 5\")\nS5Lb.config(font=(\"Helvetica\", 15))\nS5Lb.grid(row=11, column=1, pady=10, sticky=W)\n\nlocLb = Label(root,  text=\"Location\")\nlocLb.config(font=(\"Helvetica\", 15))\nlocLb.grid(row=12, column=1, pady=10, sticky=W)\n\nlr = Button(root, text=\"Predict\",height=2, width=20, command=message)\nlr.config(font=(\"Helvetica\", 15))\nlr.grid(row=15, column=1,pady=10)\n\n#OPTIONS = sorted(symptoms)\nOPTIONS = [\"fatigue\", \"yellowish_skin\", \"loss_of_appetite\", \"yellowing_of_eyes\", 'family_history',\"stomach_pain\", \"ulcers_on_tongue\", \"vomiting\", \"cough\", \"chest_pain\"]\nLOCATIONS = [\"New Delhi\", \"Mumbai\", \"Chennai\", \"Kolkata\", \"Bengaluru\"]\n\nS1En = OptionMenu(root, Symptom1,*OPTIONS)\nS1En.grid(row=7, column=1)\n\nS2En = OptionMenu(root, Symptom2,*OPTIONS)\nS2En.grid(row=8, column=1)\n\nS3En = OptionMenu(root, Symptom3,*OPTIONS)\nS3En.grid(row=9, column=1)\n\nS4En = OptionMenu(root, Symptom4,*OPTIONS)\nS4En.grid(row=10, column=1)\n\nS5En = OptionMenu(root, Symptom5,*OPTIONS)\nS5En.grid(row=11, column=1)\n\nLocEn = OptionMenu(root, location,*LOCATIONS)\nLocEn.grid(row=12, column=1)\n\nNameLb = Label(root, text=\"\")\nNameLb.config(font=(\"Helvetica\", 20))\nNameLb.grid(row=13, column=1, pady=10,  sticky=W)\n\nNameLb = Label(root, text=\"\")\nNameLb.config(font=(\"Helvetica\", 15))\nNameLb.grid(row=18, column=1, pady=10,  sticky=W)\n\nt3 = Text(root, height=2, width=20)\nt3.config(font=(\"Helvetica\", 20))\nt3.grid(row=19, column=1 , padx=10)\n\nroot.mainloop()","a5c0a6f7":"<h2>Functions used for prediction of user inputs and sending data to cloud<\/h2>","59d65a0b":"<h2> Storing the diseases and encoded symptoms in seperate dataframes<\/h2>","e11047f7":"You might experience error in the GUI part of the code while running in kaggle notebook. Kindly export the code to jupyter or spyder for better results.","2e825f2d":"<h2>Analytics Dashboard using Tableau software<\/h2>","2e50474a":"The second list named \"OPTIONS\" which has been commented are the symptoms of GERD and Hepatitis C. They can be directly used if needed.","d65b96e8":"![image.png](attachment:image.png)","db4aa458":"<h2>Importing the libraries<\/h2>","cf831efd":"<h2>Importing the dataset<\/h2>","e876f10a":"![image.png](attachment:image.png)","944b9357":"The data has been taken from https:\/\/www.kaggle.com\/itachi9604\/disease-symptom-description-dataset.","42874274":"<h2>Splitting the data and training the model<\/h2>","1e19cd8f":"This dashboard and indivisual sheets can be viewed at https:\/\/public.tableau.com\/views\/DiseaseDashboard_16216759756860\/Dashboard1?:language=en&:display_count=y&:origin=viz_share_link","e9f313e3":"<h1><b>Disease Prediction with GUI<b><\/h1>\n    \nA disease prediction model working on support vector machine (SVM). It takes the symptoms of the user as input along with its location and predicts the most probable disease which the user might be facing. The same data is being sent to cloud and being later analysed using analytical tool tableau.","63b771d5":"**NOTE - Kindly use Jupyter Notebook or Sypder IDE for running the code.**","9d3c3d55":"<p>Thingspeak is being used as the cloud. For simplicity, only when the diseases GERD or Hepatitis C are detected, the data is sent to cloud. The datas sent to cloud are the predicted disease and the location of the user.<\/p>\n<p>Every time GERD is predicted, 1 is sent to GERD field and 0 to Hepatitis field and vice versa if Hepatitis is detected.\n1 and 0 has been choosen for ease in aggrevation while analytics.<p>","76b37f8b":"<h2>Checking accuracy of the model<\/h2>","6b3095b0":"GUI used for taking user input. The drop downs show the list of symptoms from which the user can choose.","034195f0":"<h2>Output Predicted and sent to Thingspeak<\/h2>","6f1a0716":"For demonstration purpose, only the data of the diseases GERD and Hepatitis C is being sent to the cloud and analysed.","09117918":"<h2>Designing of GUI<\/h2>","5d2331c2":"![image.png](attachment:image.png)","5d7aba85":"<h2>Encoding the the symptoms with their severity weight<\/h2>","33cc70ac":"![image.png](attachment:image.png)","ed0c4efc":"<h2>Cleaning of Data<\/h2>"}}