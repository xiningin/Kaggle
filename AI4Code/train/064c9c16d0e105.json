{"cell_type":{"42cd9bab":"code","bf2c0b7a":"code","09ee5abf":"code","138fce72":"code","3f699c58":"code","306c63cc":"code","fd364d79":"code","da52290f":"code","7bcbc088":"code","bb44de24":"code","429d9171":"code","7b9f7662":"code","d3096217":"code","4751aa76":"code","553abc14":"code","f74b2030":"code","738e7a06":"code","935c1ebd":"code","89b6423f":"code","e4b70421":"markdown","dc647f57":"markdown","d7fda6fa":"markdown","b364293e":"markdown","b5cbb95d":"markdown","ff32f2c9":"markdown","21cc23f9":"markdown","b3e2db06":"markdown","cabc808d":"markdown"},"source":{"42cd9bab":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","bf2c0b7a":"# Set up feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.sql_advanced.ex2 import *","09ee5abf":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"london_bicycle\" dataset\ndataset_ref = client.dataset(\"london_bicycles\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)\n\n# Construct a reference to the \"cycle_hire\" and \"cycle_stations\" tables\ncycle_hire_table_ref = dataset_ref.table(\"cycle_hire\")\ncycle_stations_table_ref = dataset_ref.table(\"cycle_stations\")\n\n# API request - fetch the table\ncycle_hire_table = client.get_table(cycle_hire_table_ref)\ncycle_stations_table = client.get_table(cycle_stations_table_ref)","138fce72":"# Preview the first five lines of cycle_hire_table\nclient.list_rows(cycle_hire_table, max_results=5).to_dataframe()","3f699c58":"# Preview the first five lines of cycle_stations_table\nclient.list_rows(cycle_stations_table, max_results=5).to_dataframe()","306c63cc":"# Query to count the trip duration for the top 100 trips \nbike_trips_query = \"\"\"\n                    SELECT\n                        bike_id,\n                        trip_duration_minutes,\n                        start_station_name,\n                        end_station_name,\n                        trip_year\n                    FROM(\n                        SELECT \n                        bike_id,\n                        start_station_name,\n                        end_station_name,\n                        -- Calculating the trip duration in minutes -- \n                        DATETIME_DIFF(end_date,start_date,minute) AS trip_duration_minutes,\n                        -- Identifying the trip year--\n                        EXTRACT(YEAR FROM start_date) as trip_year\n                        FROM `bigquery-public-data.london_bicycles.cycle_hire`\n                        -- Between the years of 2016 and 2017 -- \n                        WHERE EXTRACT(YEAR FROM start_date) BETWEEN 2015 AND 2017\n                        LIMIT 100 \n                    ) AS t\n                    ORDER BY trip_duration_minutes DESC\n                  \"\"\"\n\n# Run the query, and return a pandas DataFrame\ntrip_duration_result = client.query(bike_trips_query).result().to_dataframe()\ntrip_duration_result.head()","fd364d79":"# Query to count the daily number of trips in 2015 as well as the cumalative number of trips\nbike_trips_query = \"\"\"\n                    -- Creating a sub query block trips_by_day with trip dates and number of trips --\n                    WITH trips_by_day AS\n                    (\n                    SELECT \n                        DATE(start_date) AS trip_date,\n                        COUNT(*) as num_trips\n                    FROM `bigquery-public-data.london_bicycles.cycle_hire`\n                    WHERE EXTRACT(YEAR FROM start_date) = 2015\n                    GROUP BY trip_date\n                    )\n\n                    SELECT *,\n                    SUM(num_trips) \n                    OVER (\n                            ORDER BY trip_date\n                            --Calculates the running total of number of trips--\n                            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n                         ) AS cumulative_trips\n                    FROM trips_by_day\n                  \"\"\"\n\n# Run the query, and return a pandas DataFrame\nnumber_of_trips_result = client.query(bike_trips_query).result().to_dataframe()\nnumber_of_trips_result.head()","da52290f":"# Query to identify each bikes location on a certain day at various times (4th of July, 2015)\nbike_trips_query = \"\"\"\n                    SELECT \n                        bike_id,\n                        TIME(start_date) AS trip_time,\n                        -- First station id tells us which station the bike started trips at that day -- \n                        FIRST_VALUE(start_station_id)\n                            OVER (\n                                PARTITION BY bike_id\n                                ORDER BY start_date\n                                ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n                             ) AS first_station_id,\n                         -- Last station id tells us which station the bike ended trips at that day-- \n                         LAST_VALUE(end_station_id)\n                            OVER (\n                                PARTITION BY bike_id\n                                ORDER BY start_date\n                                ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n                            ) AS last_station_id,\n                         start_station_id,\n                         end_station_id\n                    FROM `bigquery-public-data.london_bicycles.cycle_hire`\n                    -- The 21st of June is the summer solstice so which is the longest day of the year --\n                    WHERE DATE(start_date) = '2015-06-21' \n                  \"\"\"\n\n# Run the query, and return a pandas DataFrame\nbike_location_result = client.query(bike_trips_query).result().to_dataframe()\nbike_location_result.head(10)","7bcbc088":"# Query to count the number of trips by start station\njoin_query = \"\"\"\n              -- Creating a sub query block c with start station, number of trips and duration--\n             WITH c AS\n             (\n             SELECT \n                 start_station_id, \n                  -- Calculating avergae trip durarion from each station --\n                 COUNT(*) as number_of_trips,\n                 -- Calculating avergae trip durarion from each station --\n                 ROUND(AVG(trip_duration_minutes)) AS avg_trip_duration_minutes\n             FROM (\n                 SELECT\n                 start_station_id,\n                 -- Calculating the trip duration in minutes -- \n                 DATETIME_DIFF(end_date,start_date,minute) AS trip_duration_minutes,\n                 FROM `bigquery-public-data.london_bicycles.cycle_hire`\n             ) \n             GROUP BY start_station_id\n             )\n             SELECT \n                 s.id as station_id, \n                 s.name,\n                 c.number_of_trips,\n                 c.avg_trip_duration_minutes \n             FROM `bigquery-public-data.london_bicycles.cycle_stations` AS s\n             LEFT JOIN c\n             ON s.id = c.start_station_id\n             ORDER BY c.number_of_trips DESC\n             \"\"\"\n\n# Run the query, and return a pandas DataFrame\nstation_trip_duration_result = client.query(join_query).result().to_dataframe()\nstation_trip_duration_result.head()","bb44de24":"trip_duration_result.groupby('trip_year').agg(total_trip_duration = ('trip_duration_minutes',np.sum),avg_trip_duration = ('trip_duration_minutes',np.mean) )\n\n","429d9171":"#Identifying the top five stations where trips began\nbike_location_result['end_station_id'].value_counts().head(5)","7b9f7662":"#Identifying the top five stations where trips began\nbike_location_result['start_station_id'].value_counts().head(5)","d3096217":"# Analyzing the trip start times to identify how many trips begin at various times throughout the day.\n\n# Isolating the time portion from bks_df['start_time']\nstart_time = data=bike_location_result['trip_time']\n\nstart_time_counts = start_time.value_counts()\n\n#X-axis ticks will have to be set manually since the plot is difficult to read otherwise\n\n#Creating a series that will be populated using a for loop \ntime_series = []\nfor x in range(24):\n    #Note {:02d} ensures there are leading zeros (01,02,etc.) which is consistent with time formatting\n    time_series.append(\"{:02d}:00:00\".format(x))\n\ntime_series.append(\"23:59:00\")\n\nfig_dims = (20, 4)\nfig, ax = plt.subplots(figsize=fig_dims)\n\n#The x-ticks are set to the time series just created\nstart_time_counts.plot(xticks=time_series)\nplt.title(\"Ride Start Times throughout the Day\", fontsize=20)","4751aa76":"from datetime import datetime\n#Identifying number of bikes that were on a trip between noon and 2 pm \nlen(bike_location_result[(bike_location_result['trip_time'] > datetime.strptime('16:00:00','%H:%M:%S').time()) & (bike_location_result['trip_time'] < datetime.strptime('17:00:00','%H:%M:%S').time())])","553abc14":"#Identifying the top five bikes that made the most trips\nbike_location_result['bike_id'].value_counts().head(5)","f74b2030":"#Identifying station with the longest averge trip duration.\nstation_trip_duration_result[station_trip_duration_result['avg_trip_duration_minutes'] == station_trip_duration_result['avg_trip_duration_minutes'].max()]","738e7a06":"#Identifying station with the shortest averge trip duration.\nstation_trip_duration_result[station_trip_duration_result['avg_trip_duration_minutes'] == station_trip_duration_result['avg_trip_duration_minutes'].min()]","935c1ebd":"#Identifying station with the least number of trips\nstation_trip_duration_result[station_trip_duration_result['number_of_trips'] == station_trip_duration_result['number_of_trips'].min()]","89b6423f":"round(station_trip_duration_result['number_of_trips'].mean())","e4b70421":"We now have a table with the number of trips on a given date in 2015 as well as the total number of tips up to that date.\n## Bike Location on a Specific Day","dc647f57":"We now have a table of the 100 longest bike trips along with their duration, origin, destination between 2015 and 2017.\n## Daily Number of Trips","d7fda6fa":"<b>2016<\/b> was the year with the most ride time and the the longest aver trip duration.\n\n## Bike Locations and Number of Trips","b364293e":"On average, \n\n- The most trips start from <b>Belgrove Street , King's Cross station.<\/b>\n- The longest trips start from <b>Black Lion Gate, Kensington Gardens station.<\/b>\n- The least trips start from <b>Here East South, Queen Elizabeth Olympic Park station.<\/b>\n- We see that five stations have the shortest trip duration. The number of trips from these stations are also above average so these stations may be in a high traffic area where people are commuting short distances frequently.","b5cbb95d":"We not have a table with information on each of the bikes movements throught a certain day,which could help us identify the location of a certain bike in a certain time interval.\n\n## Bike Stations: Total Number of Trips and Average Trip Duration","ff32f2c9":"# Extracting Tabular Data Through BigQuery\/SQL \n## Trip Duration","21cc23f9":"- The most trips began and ended at the <b>same five stations.<\/b> \n- The top five bike with the most trips made <b>15-17 trips<\/b> that day.\n- The most trips began between the hours of <b>4 pm and 5 pm<\/b> (2800 in that hour alone). \n\n## Bike Stations","b3e2db06":"We now have a table with statistics on the number of trips and average duration for trips starting at that station\n# Data Analysis\n\nNow that we have completed extracting the information we can perform some basic analysis on the data.","cabc808d":"# London Bicycle Hires Data Analysis\nAnalysis of BigQuery Public Dataset on London Biclycle Hires using BigQuery\/MySQL and Python. \n\nDataset contains the number of hires of London's Santander Cycle Hire Scheme from 2011 to present. Data includes start and stop timestamps, station names and ride duration."}}