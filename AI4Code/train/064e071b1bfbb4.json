{"cell_type":{"e0b25a0c":"code","df640a4b":"code","16b83d2c":"code","718ce3f8":"code","5cb3be35":"code","9a8583c6":"code","5d233e9b":"code","374e45d1":"code","84ef2ce2":"code","d1eba9be":"code","8735fc58":"code","868f0e80":"code","ac07bdd6":"code","dc609b15":"code","75b095fc":"code","8b8b313f":"code","deeb1554":"code","2fb56a6c":"code","109e07a7":"code","d0be6a1f":"code","51bb041b":"code","1ea04b3d":"markdown","849edaaa":"markdown"},"source":{"e0b25a0c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","df640a4b":"brush = pd.read_csv(\"\/kaggle\/input\/order_brush_order.csv\")\nbrush","16b83d2c":"brush.isnull().info()","718ce3f8":"print(type(brush.event_time[0]))\nprint(brush.dtypes)\nprint(brush.size, brush.shape)\n# print(brush.event_time[0])","5cb3be35":"brush.shopid.unique","9a8583c6":"brush.userid.unique","5d233e9b":"brush.insert(3,\"counter\",0)\nbrush","374e45d1":"brush.insert(4,\"brushing\", 0)\nbrush","84ef2ce2":"brush.insert(5,\"event_split\",0)","d1eba9be":"brush","8735fc58":"brush.loc[(brush.shopid==164933170)]","868f0e80":"brush.event_time[0][:10]","ac07bdd6":"done = []\n\nfor i in range(brush.shape[0]):\n    orderid = brush.shopid[i]\n    if orderid in done:\n        continue\n    done.append(orderid)\n    \n    ","dc609b15":"len(done)\ndone","75b095fc":"output = pd.DataFrame({'shopid':done, 'userid':brush.counter[:18770]})\noutput.to_csv('submit1.csv', index=False)","8b8b313f":"ts = brush.loc[(brush.shopid == done[0])]\nts","deeb1554":"ts.index","2fb56a6c":"from datetime import time, timedelta\nold = 0\nnew = 0\nlistindex = ts.index\nbuyer = []\norder = []\n\nfor j in range(1,len(listindex)):\n    old = ts.event_time[listindex[j-1]]\n    olddate = old[:10]\n    old = old[11:19]\n    new = ts.event_time[listindex[j]]\n    newdate = new[:10]\n    new = new[11:19]\n    diff = int(new[0:2]) - int(old[0:2])\n    if diff<=1 and olddate == newdate:\n        if not ts.userid[listindex[j]] in order:\n            buyer.append(ts.userid[listindex[j]])\n        order.append(ts.orderid[listindex[j]])\n        print(buyer)\n        print(\"ini\", order)\n    else:\n        print(olddate, newdate)\n    ","109e07a7":"output2 = pd.DataFrame({'shopid':done, 'userid':brush.counter[:18770], 'counter':brush.counter[:18770]},index=done)\noutput2.counter[93950878] = 1\nprint(output2)","d0be6a1f":"from datetime import time, timedelta\nold = 0\nnew = 0\n\n\nfor i in done:\n    ts = brush.loc[(brush.shopid == i)]\n    listindex = ts.index\n    buyer = []\n    order = []\n    \n    for j in range(1,len(listindex)):\n        old = ts.event_time[listindex[j-1]]\n        olddate = old[:10]\n        old = old[11:19]\n        new = ts.event_time[listindex[j]]\n        newdate = new[:10]\n        new = new[11:19]\n        diff = int(new[0:2]) - int(old[0:2])\n        if diff<=1 and olddate == newdate:\n            if not ts.userid[listindex[j]] in order:\n                buyer.append(ts.userid[listindex[j]])\n            order.append(ts.orderid[listindex[j]])\n        else:\n            continue\n    print(buyer, order)\n    if len(order) > 0:\n        counter = len(buyer)\/len(order)\n    else:\n        counter = 0\n#     if counter >= 3:\n#         buyer.sort()\n#         output2.userid[i] = buyer[0]\n#     else:\n#         output2.userid[i] = 0\n    if counter > 0:\n        output2.userid[i] = buyer[0]\n    else:\n        output2.userid[i] = 0","51bb041b":"output2.drop(['counter'], axis=1)\noutput2.to_csv('submit2.csv', index=False)\noutput2","1ea04b3d":"### Iterate each shop","849edaaa":"### Number of shops in dataframe"}}