{"cell_type":{"b6308a5e":"code","7e347945":"code","d701879d":"code","3f0c42fa":"code","7acf85eb":"code","65b49b46":"code","6e7ef0e9":"code","74ea5ba9":"code","ce0a83a8":"code","2fc9f072":"code","b36ef160":"code","bdc54b34":"code","c9c04b09":"code","24a14b3f":"code","5a773618":"code","26f40490":"code","329172b5":"code","86ddb497":"code","8737372a":"code","493d9cf3":"code","bb8e6703":"code","7d651818":"code","9d1417c8":"code","6c6b8a18":"code","e0a2bc7d":"code","babd5fb8":"code","c4643cce":"code","0905015c":"markdown","2dbee879":"markdown","52784627":"markdown","d8dc3909":"markdown","7178ccfa":"markdown","1c6ce76f":"markdown","a3c528ef":"markdown","9c4197fc":"markdown"},"source":{"b6308a5e":"import pandas as pd\nimport numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport math\n%matplotlib inline","7e347945":"data_input = pd.read_csv(\"\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_confirmed_global.csv\")","d701879d":"data_input.head(10)","3f0c42fa":"data_input.drop('Province\/State', axis = 1, inplace = True)\ndata_input.drop('Lat', axis = 1, inplace = True)\ndata_input.drop('Long', axis = 1, inplace = True)\ndata_input['Total Cases'] = data_input.sum(axis=1)\ntop_six_countries = data_input.sort_values(by = ['Total Cases'], axis = 0, ascending = False)[:7]\n\ndata_france = data_input.loc[(data_input['Country\/Region'] == 'France')]\ndata_france = data_france.sort_values(by = ['Total Cases'], axis = 0, ascending = False)[:1]\n\n\ndata_covid_korea = data_input.loc[(data_input['Country\/Region'] == 'Korea, South')  | (data_input['Country\/Region'] == 'Germany')  ]\ntemp = top_six_countries.append(data_covid_korea)\n\ntop_six_countries = temp.reset_index(drop = True)\ntop_six_countries.index +=1\ntop_six_countries = top_six_countries.drop(2)\ntop_six_countries = top_six_countries.reset_index(drop = True)\ntop_six_countries = top_six_countries.drop(2)\ntop_six_countries = top_six_countries.append(data_france)\ntop_six_countries = top_six_countries.reset_index(drop = True)\n\npd.set_option('display.max_columns', None)\n\nsubject_countries = top_six_countries\n# data_france","7acf85eb":"subject_countries = subject_countries.loc[:,:'5\/12\/20']","65b49b46":"subject_countries = subject_countries.reset_index(drop = True)","6e7ef0e9":"subject_countries","74ea5ba9":"subject_countries = subject_countries.T","ce0a83a8":"subject_countries","2fc9f072":"subject_countries.plot.line()","b36ef160":"subject_countries = subject_countries.T","bdc54b34":"Economy_Data = pd.read_csv(\"\/kaggle\/input\/data-economy\/US_Dow Jones Industrial Average Historical Data.csv\")","c9c04b09":"Economy_Data.head()","24a14b3f":"Economy_Data = Economy_Data.drop(columns = ['Open', 'High', 'Low', 'Vol.', 'Change %']).set_index('Date')[::-1].T.rename(index = {'Price': 'US'}).reset_index().rename( columns = {'index': 'Country\/Region'})\n","5a773618":"Economy_Data","26f40490":"Italy_Data = pd.read_csv(\"\/kaggle\/input\/data-economy\/Italy_FTSE Italia All Share Historical Data.csv\")\nItaly_Data = Italy_Data.drop(columns = ['Open', 'High', 'Low', 'Vol.', 'Change %']).set_index('Date')[::-1].T.rename(index = {'Price': 'Italy'}).reset_index().rename( columns = {'index': 'Country\/Region'})\nEconomy_Data = Economy_Data.append(Italy_Data)\nSpain_Data = pd.read_csv(\"\/kaggle\/input\/data-economy\/Spain_IBEX 35 Historical Data.csv\")\nSpain_Data = Spain_Data.drop(columns = ['Open', 'High', 'Low', 'Vol.', 'Change %']).set_index('Date')[::-1].T.rename(index = {'Price': 'Spain'}).reset_index().rename( columns = {'index': 'Country\/Region'})\nEconomy_Data = Economy_Data.append(Spain_Data)\nGermany_Data = pd.read_csv(\"\/kaggle\/input\/data-economy\/Germany_DAX Historical Data.csv\")\nGermany_Data = Germany_Data.drop(columns = ['Open', 'High', 'Low', 'Vol.', 'Change %']).set_index('Date')[::-1].T.rename(index = {'Price': 'Germany'}).reset_index().rename( columns = {'index': 'Country\/Region'})\nEconomy_Data = Economy_Data.append(Germany_Data)\nFrance_Data = pd.read_csv(\"\/kaggle\/input\/data-economy\/France_CAC 40 Historical Data.csv\")\nFrance_Data = France_Data.drop(columns = ['Open', 'High', 'Low', 'Vol.', 'Change %']).set_index('Date')[::-1].T.rename(index = {'Price': 'France'}).reset_index().rename( columns = {'index': 'Country\/Region'})\nEconomy_Data = Economy_Data.append(France_Data)\nUK_Data = pd.read_csv(\"\/kaggle\/input\/data-economy\/UK_FTSE 100 Historical Data.csv\")\nUK_Data = UK_Data.drop(columns = ['Open', 'High', 'Low', 'Vol.', 'Change %']).set_index('Date')[::-1].T.rename(index = {'Price': 'UK'}).reset_index().rename( columns = {'index': 'Country\/Region'})\nEconomy_Data = Economy_Data.append(UK_Data)\nIndia_Data = pd.read_csv(\"\/kaggle\/input\/data-economy\/India_BSE Sensex 30 Historical Data.csv\")\nIndia_Data = India_Data.drop(columns = ['Open', 'High', 'Low', 'Vol.', 'Change %']).set_index('Date')[::-1].T.rename(index = {'Price': 'India'}).reset_index().rename( columns = {'index': 'Country\/Region'})\nEconomy_Data = Economy_Data.append(India_Data)\nKorea_Data = pd.read_csv(\"\/kaggle\/input\/data-economy\/Korea_KOSPI Historical Data.csv\")\nKorea_Data = Korea_Data.drop(columns = ['Open', 'High', 'Low', 'Vol.', 'Change %']).set_index('Date')[::-1].T.rename(index = {'Price': 'Korea'}).reset_index().rename( columns = {'index': 'Country\/Region'})\nEconomy_Data = Economy_Data.append(Korea_Data)\nEconomy_Data.reset_index(drop=True)\nEconomy_Data.set_index('Country\/Region')","329172b5":"Economy_Data.drop(['Feb 01, 2020', 'Apr 10, 2020', 'Feb 17, 2020'], axis=1, inplace = True)","86ddb497":"\nEconomy_Data.set_index('Country\/Region', inplace = True)\nEconomy_Data = Economy_Data.replace(',','',regex=True).astype('float')","8737372a":"Economy_Data.interpolate(axis = 1, inplace = True)\nEconomy_Data","493d9cf3":"Economy_Data.T.plot.line()","bb8e6703":"subject_countries","7d651818":"subject_countries.drop(['1\/25\/20', '1\/26\/20', '2\/1\/20', '2\/2\/20', '2\/8\/20', '2\/9\/20', '2\/15\/20', '2\/16\/20','2\/17\/20','2\/22\/20','2\/23\/20','2\/29\/20', '3\/1\/20','3\/7\/20','3\/8\/20','3\/14\/20','3\/15\/20','3\/21\/20','3\/22\/20','3\/28\/20', '3\/29\/20', '4\/4\/20','4\/5\/20','4\/10\/20','4\/11\/20','4\/12\/20','4\/18\/20','4\/19\/20','4\/25\/20','4\/26\/20','5\/2\/20','5\/3\/20','5\/9\/20','5\/10\/20'], axis = 1, inplace = True)\n# subject_countries.drop(['1\/25\/20', '1\/26\/20', '2\/1\/20', '2\/2\/20', '2\/8\/20', '2\/9\/20', '2\/15\/20', '2\/16\/20','2\/17\/20','2\/22\/20','2\/23\/20','2\/29\/20', '3\/1\/20','3\/7\/20'], axis = 1, inplace = True)\nsubject_countries.set_index('Country\/Region', inplace = True)\nsubject_countries","9d1417c8":"def correlation(x, y):\n    n = len(x)\n    vals = range(n)\n\n    x_sum = 0.0\n    y_sum = 0.0\n    x_sum_pow = 0.0\n    y_sum_pow = 0.0\n    mul_xy_sum = 0.0\n    \n    for i in vals:\n        mul_xy_sum = mul_xy_sum + float(x[i]) * float(y[i])\n        x_sum = x_sum + float(x[i])\n        y_sum = y_sum + float(y[i])\n        x_sum_pow = x_sum_pow + pow(float(x[i]), 2)\n        y_sum_pow = y_sum_pow + pow(float(y[i]), 2)\n        \n    \n    try:\n        r = ((n * mul_xy_sum) - (x_sum * y_sum)) \/ math.sqrt( ((n*x_sum_pow) - pow(x_sum, 2)) * ((n*y_sum_pow) - pow(y_sum, 2)) )\n    except:\n        r = 0.0\n    \n    return r","6c6b8a18":"Coefficient_US = correlation(list(subject_countries.loc['US']), list(Economy_Data.loc['US']))\nCoefficient_Italy = correlation(list(subject_countries.loc['Italy']), list(Economy_Data.loc['Italy']))\nCoefficient_Spain = correlation(list(subject_countries.loc['Spain']), list(Economy_Data.loc['Spain']))\nCoefficient_UK = correlation(list(subject_countries.loc['United Kingdom']), list(Economy_Data.loc['UK']))\nCoefficient_Germany = correlation(list(subject_countries.loc['Germany']), list(Economy_Data.loc['Germany']))\nCoefficient_France = correlation(list(subject_countries.loc['France']), list(Economy_Data.loc['France']))\nCoefficient_India = correlation(list(subject_countries.loc['India']), list(Economy_Data.loc['India']))\nCoefficient_Korea = correlation(list(subject_countries.loc['Korea, South']), list(Economy_Data.loc['Korea']))","e0a2bc7d":"print(\"US: \", Coefficient_US)\nprint(\"Italy: \", Coefficient_Italy)\nprint(\"Spain: \", Coefficient_Spain)\nprint(\"UK: \", Coefficient_UK)\nprint(\"Germany: \", Coefficient_Germany)\nprint(\"France: \", Coefficient_France)\nprint(\"India: \", Coefficient_India)\nprint(\"Korea: \", Coefficient_Korea)","babd5fb8":"cor = pd.DataFrame({'Country':['US','Italy', 'Spain', 'UK', 'Germany', 'France', 'India', 'Korea'], 'val': [-0.30,-0.66,-0.67,-0.44,-0.46,-0.53,-0.35,-0.79 ]})","c4643cce":"cor.plot.bar(x='Country', y = 'val', rot =0)","0905015c":"The results show the result for the Correlation Analysis. \n\nAll the results show a negative result, ranging from -0.79 ~ 0.30, which means it Economy and COVID Cases does indeed have a negative correlation between each other","2dbee879":"**Organizing Economic Datasets**","52784627":"Now we finished data preprocessing. Now we will implement it using correlation analysis","d8dc3909":"Now, we are going to add the other country's economic data in the same way","7178ccfa":"Filling in the NaN Values using the interpolate method","1c6ce76f":"Trying to make a scatter plot showing the Correlation Analysis...","a3c528ef":"Since The stock Markets are closed for the weekend, and Timezone is different between countries, we would eliminate the Data for Feb 01,Feb 17 Apr10, where there are NaN values for majority country's indexes due to timezone difference. For other NaN values, we would set it as the the average value of the index of the day before and the day after\n","9c4197fc":"**Organizing COVID Dataset\n**"}}