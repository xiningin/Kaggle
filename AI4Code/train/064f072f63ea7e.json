{"cell_type":{"a0cfcf0f":"code","e887a7ee":"code","56a95c88":"code","75c20e65":"code","f71d37e5":"code","8753d68f":"code","9700481c":"code","5ecf6ce3":"code","e7a95ada":"code","794e9411":"code","acf78a7d":"code","19b488f8":"code","1b4c88c9":"code","979addfb":"code","9e494e9c":"markdown","401ce8f6":"markdown","4b779311":"markdown"},"source":{"a0cfcf0f":"# basic imports\nimport os\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\ntqdm.pandas()\n\n# plotting imports\nfrom matplotlib import pyplot as plt \nimport matplotlib.image as mpimg\n%matplotlib inline\nimport seaborn as sns \nsns.set()\n\n# image libs imports\nfrom PIL import Image\n\n# global variables\n# Root folder: \/kaggle\/input\/dog-breed-photos\/\n# CSV file   : \/kaggle\/input\/dog-breed-photos\/dog_breed_photos.csv\n# Images     : \/kaggle\/input\/dog-breed-photos\/dog_breed_photos\/dog_breed_photos\/<image>\nimage_folder = '\/kaggle\/input\/dog-breed-photos\/dog_breed_photos\/dog_breed_photos\/'","e887a7ee":"# load dataframe and look at random 5 rows\ndf = pd.read_csv('\/kaggle\/input\/dog-breed-photos\/dog_breed_photos.csv')\ndf.sample(5, random_state = 13)","56a95c88":"# Show the histogram of number of photos per dog\nax = df[['DogId', 'ImageNumber']].groupby('DogId').max()['ImageNumber'].hist(bins = 10)\n_ = ax.set(xticks=range(1,11), xlabel = '# Images per dog', ylabel='# Dogs')\n_ = ax.set_title('Histogram showing distribution of the number of images per dog')","75c20e65":"# Most common breeds\ndf['Breed'].value_counts().reset_index()\\\n    .rename(columns={'index': 'Most Common Breeds', 'Breed':'Dogs'}).head(10)","f71d37e5":"# inspecting sample images from the images folder!\ndf_plot = df.sample(9, random_state = 10).reset_index()\nfig, ax = plt.subplots(3,3, figsize=(12,12))\nfor i, axi in enumerate(ax.flat):\n    breed = df_plot.Breed[i]                       # get the breed\n    filePath = image_folder + df_plot.Image[i]     # build file path\n    axi.imshow(Image.open(filePath))               # show the image\n    axi.set(xticks=[], yticks=[], xlabel = breed)  # put the breed as xlabel\n    axi.patch.set_edgecolor('black')               # black border\n    \nplt.suptitle('Sample photos in the dataset')\nfig.tight_layout()","8753d68f":"# Get dimensions of images, some images are corrupted or cannot be read.\n# return (0,0) in that case so we can filter out corrupted images.\ndef get_dimensions(path):\n    try:\n        image = Image.open(image_folder + path)\n        return image.size\n    except Exception as e:\n        return (0,0) # if the image is corrupted or un-readable return size (0,0)\n    \n# Get the dimensions of the image \n# use progress_apply to show progress of slow operations\ndf[['Width', 'Height']] = df.progress_apply(lambda row: get_dimensions(row.Image) , axis = 1).tolist()","9700481c":"# 2-d histogram of image width\/height\nwith sns.axes_style('white'):\n    sns.jointplot(x=\"Width\", y=\"Height\", data=df, kind=\"hist\", color ='blue')","5ecf6ce3":"# Add aspect ratio as a new variable\ndf['AspectRatio'] = np.where(df['Height'] > 0, df['Width']\/df['Height'], 0)","e7a95ada":"# check the aspect ratio of all the images\n_ = df['AspectRatio'].hist(bins = 10)","794e9411":"# OUTLIERS in aspect ratio:\n# check the images with outlier aspect ratio\n_ = df[['AspectRatio']].boxplot()","acf78a7d":"## 1. Remove invalid or small images\n\nprint(\"Shape before removing invalid images {}\".format(df.shape))\n\n# remove rows with zero\/tiny width and height\n# this will remove corrupted images or very small images\ndf = df[(df['Width'] >= 100) & (df['Height'] >= 100)].copy()\n\nprint(\"Shape after removing invalid images {}\".format(df.shape))","19b488f8":"## 2. Remove rows with too small, or too high aspect ratio\nprint(\"Shape before removing outlier aspect ratio {}\".format(df.shape))\n\ndf = df[(df['AspectRatio'] > 0.749) & (df['AspectRatio'] < 1.334)].copy()\n\nprint(\"Shape removing removing outlier aspect ratio {}\".format(df.shape))\n\n# check the boxplot of aspect ratio again to make sure we don't have outliers\ndf[['AspectRatio']].boxplot()","1b4c88c9":"## 3. Resize images and convert to greyscale\ndef load_and_resize_image(path):\n    img = Image.open(image_folder + path)\n    img = img.resize((80, 80), Image.ANTIALIAS).convert(mode=\"L\") \n    return np.array(img)\n\n# show progress bar while resizing all images\ndf['data'] = df.progress_apply(lambda row: load_and_resize_image(row.Image), axis = 1)","979addfb":"## save to working folder\ndf.to_pickle('\/kaggle\/working\/dog_breed_photos_v1.pkl')","9e494e9c":"## Data Cleaning decisions:\n","401ce8f6":"## EDA and data cleaning\n\nThis notebook is only for data inspection and cleaning, it doesn't apply any modeling to the dataset.\n\n#### The following methods are applied:  \n- Load the csv file into a dataframe\n- Inspect number of images per dog\n- Inspect most common dog breeds in the dataset\n- Load image dimensions (width and height) and calculate aspect ratio for all images\n\n#### Data cleaning\n- Filter out images that are invalid, or too small (width or height < 100 pixels)\n- Filter out images with outlier aspect ratio (keep images with aspect ratio between 0.75 and 1.33)\n- Resize all images to 80x80 pixels\n- Convert all images to greyscale\n- Save the result into pkl file in the working directory\n\n\n**Note**: this notebook takes ~40 minutes to run!","4b779311":"## Saving clean data as pkl file"}}