{"cell_type":{"e9db96a8":"code","b39dee5c":"code","badfa2e7":"code","3ea1d42a":"code","bb803c32":"code","a9a33002":"code","4ce9469a":"code","664e40e7":"code","2b8c6744":"code","50db54ee":"code","c4063e50":"code","5b90bc40":"code","093bb1c9":"code","a363a9be":"code","15b8508d":"markdown","85ba6382":"markdown","e6800742":"markdown","d8e7a9e6":"markdown","9eab1fcd":"markdown","6da22e5f":"markdown"},"source":{"e9db96a8":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression,PassiveAggressiveClassifier,RidgeClassifier,SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier,RadiusNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\nfrom sklearn.svm import LinearSVC, SVC,NuSVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_validate\nfrom time import perf_counter\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import Markdown, display\n\ndef printmd(string):\n    # Print with Markdowns    \n    display(Markdown(string))\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","b39dee5c":"# Load the data\ndf = pd.read_csv('..\/input\/banknote-authenticationcsv\/BankNote_Authentication.csv')\n\n# Shuffle the data\ndf.sample(frac=1)\n\n# Display the first rows\ndf.head()","badfa2e7":"df.info()","3ea1d42a":"# Create a column with the written class of the bank notes\ndf['Bank Note'] = df['class'].apply(lambda x: 'Real' if x == 0 else 'Fake')","bb803c32":"sns.pairplot(df.drop('class', axis = 1), hue = 'Bank Note')\nplt.show()","a9a33002":"plt.figure(figsize = (9,9))\ndf['Bank Note'].value_counts().plot.pie()\nplt.show()","4ce9469a":"X = df[['variance', 'skewness', 'curtosis', 'entropy']]\ny = df['Bank Note']","664e40e7":"# Scale the dataset\nscaler = MinMaxScaler()\nX_transf = scaler.fit_transform(X)\n\n# Display the result of the transformation\npd.DataFrame(X_transf).head()","2b8c6744":"# Split into train and test set\n# Note: There is a small data leakage for the year, because the dataset was transformed before\n#       spliting it\nX_train, X_test, y_train, y_test = train_test_split(X_transf, y, test_size=0.2, random_state=0)","50db54ee":"# Create a dictionary with the model which will be tested\nmodels = {\n    \"GaussianNB\":{\"model\":GaussianNB()},\n    \"PassiveAggressiveClassifier\":{\"model\":PassiveAggressiveClassifier() },\n    \"RidgeClassifier\":{\"model\":RidgeClassifier() },\n    \"SGDClassifier\":{\"model\":SGDClassifier() },\n    \"KNeighborsClassifier\":{\"model\":KNeighborsClassifier() },\n    \"DecisionTreeClassifier\":{\"model\":DecisionTreeClassifier() },\n    \"ExtraTreeClassifier\":{\"model\":ExtraTreeClassifier() },\n    \"LinearSVC\":{\"model\":LinearSVC() },\n    \"SVC\":{\"model\":SVC() },\n    \"NuSVC\":{\"model\":NuSVC() },\n    \"MLPClassifier\":{\"model\":MLPClassifier() },\n    \"RandomForestClassifier\":{\"model\":RandomForestClassifier() },\n    \"GradientBoostingClassifier\":{\"model\":GradientBoostingClassifier() },\n    \"AdaBoostClassifier\":{\"model\":AdaBoostClassifier() }\n}\n# Use the 10-fold cross validation for each model\n# to get the mean validation accuracy and the mean training time\nfor name, m in models.items():\n    # Cross validation of the model\n    model = m['model']\n    result = cross_validate(model, X_train,y_train,cv = 10)\n    \n    # Mean accuracy and mean training time\n    mean_val_accuracy = round( sum(result['test_score']) \/ len(result['test_score']), 4)\n    mean_fit_time = round( sum(result['fit_time']) \/ len(result['fit_time']), 4)\n    \n    # Add the result to the dictionary witht he models\n    m['val_accuracy'] = mean_val_accuracy\n    m['Training time (sec)'] = mean_fit_time\n    \n    # Display the result\n    print(f\"{name:27} mean accuracy using 10-fold cross validation: {mean_val_accuracy*100:.2f}% - mean training time {mean_fit_time} sec\")","c4063e50":"# Create a DataFrame with the results\nmodels_result = []\n\nfor name, v in models.items():\n    lst = [name, v['val_accuracy'],v['Training time (sec)']]\n    models_result.append(lst)\n\ndf_results = pd.DataFrame(models_result, \n                          columns = ['model','val_accuracy','Training time (sec)'])\ndf_results.sort_values(by='val_accuracy', ascending=False, inplace=True)\ndf_results.reset_index(inplace=True,drop=True)\ndf_results","5b90bc40":"plt.figure(figsize = (15,5))\nsns.barplot(x = 'model', y = 'val_accuracy', data = df_results)\nplt.title('Mean Validation Accuracy for each Model\\ny-axis between 0.8 and 1.0', fontsize = 15)\nplt.ylim(0.8,1.005)\nplt.xlabel('Model', fontsize=15)\nplt.ylabel('Accuracy',fontsize=15)\nplt.xticks(rotation=90, fontsize=12)\nplt.show()","093bb1c9":"plt.figure(figsize = (15,5))\nsns.barplot(x = 'model', y = 'Training time (sec)', data = df_results)\nplt.title('Training time for each Model in sec', fontsize = 15)\nplt.xticks(rotation=90, fontsize=12)\nplt.xlabel('Model', fontsize=15)\nplt.ylabel('Training time (sec)',fontsize=15)\nplt.show()","a363a9be":"# Get the model with the highest mean validation accuracy\nbest_model = df_results.iloc[0]\n\n# Fit the model\nmodel = models[best_model[0]]['model']\nmodel.fit(X_train,y_train)\n\n# Predict the labels with the data set\npred = model.predict(X_test)\n\n# Display the results\nprintmd(f'## Best Model: {best_model[0]} with {best_model[1]*100}% accuracy on the test set')\nprintmd(f'## Trained in: {best_model[2]} sec')\n\n# Display a confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncf_matrix = confusion_matrix(y_test, pred, normalize='true')\nplt.figure(figsize = (10,7))\nsns.heatmap(cf_matrix, annot=True, xticklabels = sorted(set(y_test)), yticklabels = sorted(set(y_test)),cbar=False)\nplt.title('Normalized Confusion Matrix', fontsize = 23)\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.show()","15b8508d":"# Compare 14 Algorithms for Bank Note Forgery Detection\n## *Using Cross validation*\n\n![bank note](https:\/\/i.imgur.com\/bB80wXX.png)\n\n# Table of contents\n\n[<h3>1. Load and visualize the data<\/h3>](#1)\n\n[<h3>2. Data Preprocessing<\/h3>](#2)\n\n[<h3>3. Comparison of 14 algorithms using cross validation<\/h3>](#3)\n\n[<h3>4. Prediction metrics of the best model on the test set<\/h3>](#4)","85ba6382":"# 4. Prediction metrics of the best model on the test set<a class=\"anchor\" id=\"4\"><\/a>","e6800742":"# 2. Data Preprocessing<a class=\"anchor\" id=\"2\"><\/a><a class=\"anchor\" id=\"2\"><\/a>","d8e7a9e6":"# 1. Load and visualize the data <a class=\"anchor\" id=\"1\"><\/a>","9eab1fcd":"# 3. Comparison of 14 algorithms using cross validation<a class=\"anchor\" id=\"3\"><\/a>","6da22e5f":"# Load the libraries"}}