{"cell_type":{"b1dd5592":"code","10776252":"code","b5d8a282":"code","eb0867d4":"code","045449a8":"code","28a2eb8a":"code","dcda6912":"code","df95739e":"code","31949ade":"code","d6fbc8ec":"code","72138819":"code","508d759c":"code","36e288e8":"code","71f15b23":"code","742f8cde":"code","9f3ac888":"code","2463102f":"code","bed74eab":"code","ef0d8322":"code","b51368da":"code","2b02e0b6":"code","9516fb97":"code","0d65c90b":"code","406281e4":"code","a2ed7da3":"code","517da794":"code","5f7a5e4e":"code","539bf5ec":"code","cee01553":"code","0b75e50f":"markdown","1dc9b662":"markdown","7c8bccde":"markdown","0254c12d":"markdown","233c54f3":"markdown","92e3a1b9":"markdown","f6189450":"markdown","3daee35b":"markdown","ea82112a":"markdown","d4a96439":"markdown"},"source":{"b1dd5592":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.metrics import r2_score, make_scorer\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","10776252":"df = pd.read_csv('..\/input\/ai4all-project\/figures\/classifier\/auc_table.csv', encoding='ISO-8859-2')\ndf.head()","b5d8a282":"print(f\"data shape: {df.shape}\")","eb0867d4":"df.describe()","045449a8":"df.isna().sum()","28a2eb8a":"def unique_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    uniques = []\n    for col in data.columns:\n        unique = data[col].nunique()\n        uniques.append(unique)\n    tt['Uniques'] = uniques\n    return(np.transpose(tt))","dcda6912":"unique_values(df)","df95739e":"def most_frequent_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    items = []\n    vals = []\n    for col in data.columns:\n        itm = data[col].value_counts().index[0]\n        val = data[col].value_counts().values[0]\n        items.append(itm)\n        vals.append(val)\n    tt['Most frequent item'] = items\n    tt['Frequence'] = vals\n    tt['Percent from total'] = np.round(vals \/ total * 100, 3)\n    return(np.transpose(tt))","31949ade":"most_frequent_values(df)","d6fbc8ec":"targets = list(df.columns[0:])\ntargets","72138819":"# categorical features\ncategorical_feat = [feature for feature in df.columns if df[feature].dtypes=='O']\nprint('Total categorical features: ', len(categorical_feat))\nprint('\\n',categorical_feat)","508d759c":"from sklearn.preprocessing import LabelEncoder\ncategorical_col = ('Model', 'All', 'COVID vs No virus', 'Covid vs Other virus')\n        \n        \nfor col in categorical_col:\n    label = LabelEncoder() \n    label.fit(list(df[col].values)) \n    df[col] = label.transform(list(df[col].values))\n\nprint('Shape all_data: {}'.format(df.shape))","36e288e8":"plt.figure(figsize=(14,8))\nsns.barplot(data=df,x='Model',y='COVID vs No virus',color=sns.color_palette('Set3')[0])\nplt.title('COVID vs No Virus Model')\nplt.xlabel('Model')\nplt.ylabel('COVID vs No virus')\nplt.xticks(rotation=45)\nfor i in range(df.shape[0]):\n    count = df.iloc[i]['COVID vs No virus']\n    plt.text(i,count+1,df.iloc[i]['COVID vs No virus'],ha='center')\n    \nfrom IPython.display import display, Markdown\ndisplay(Markdown(\"Most Number of COVID vs No Virus **20-50**\"))","71f15b23":"plt.figure(figsize = (10,8))\nsns.set(style = \"darkgrid\")\nplt.title(\"Distribution of COVID vs No virus\", fontdict = {'fontsize':20})\nax = sns.countplot(x = \"COVID vs No virus\", hue = 'Model', data = df)","742f8cde":"(sns.FacetGrid(df, hue = 'COVID vs No virus',\n             height = 6,\n             xlim = (0,500))\n    .map(sns.kdeplot, 'Model', shade = True)\n    .add_legend());","9f3ac888":"plt.figure(figsize = (10,8))\nsns.barplot(x = 'COVID vs No virus', y = 'Model', data = df);","2463102f":"from sklearn.metrics import accuracy_score, roc_auc_score, roc_curve, confusion_matrix, auc\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler ","bed74eab":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neural_network import MLPClassifier\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.metrics import r2_score, make_scorer\nfrom sklearn.metrics import roc_auc_score","ef0d8322":"y = df[\"COVID vs No virus\"]\nX = df.drop([\"COVID vs No virus\"], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state = 42)","b51368da":"cart = DecisionTreeClassifier(max_depth = 12)","2b02e0b6":"cart_model = cart.fit(X_train, y_train)","9516fb97":"y_pred = cart_model.predict(X_test)","0d65c90b":"print('Decision Tree Model')\n\nprint('Accuracy Score: {}\\n\\nConfusion Matrix:\\n {}\\n\\nAUC Score: {}'\n      .format(accuracy_score(y_test,y_pred), confusion_matrix(y_test,y_pred), roc_auc_score(y_test,y_pred)))","406281e4":"pd.DataFrame(data = cart_model.feature_importances_*100,\n                   columns = [\"Importances\"],\n                   index = X_train.columns).sort_values(\"Importances\", ascending = False)[:20].plot(kind = \"barh\", color = \"r\")\n\nplt.xlabel(\"Feature Importances (%)\")","a2ed7da3":"# We can use the functions to apply the models and roc curves to save space.\ndef model(algorithm, X_train, X_test, y_train, y_test):\n    alg = algorithm\n    alg_model = alg.fit(X_train, y_train)\n    global y_prob, y_pred\n    y_prob = alg.predict_proba(X_test)[:,1]\n    y_pred = alg_model.predict(X_test)\n\n    print('Accuracy Score: {}\\n\\nConfusion Matrix:\\n {}'\n      .format(accuracy_score(y_test,y_pred), confusion_matrix(y_test,y_pred)))\n    \n\ndef ROC(y_test, y_prob):\n    \n    false_positive_rate, true_positive_rate, threshold = roc_curve(y_test, y_prob)\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    \n    plt.figure(figsize = (10,10))\n    plt.title('Receiver Operating Characteristic')\n    plt.plot(false_positive_rate, true_positive_rate, color = 'red', label = 'AUC = %0.2f' % roc_auc)\n    plt.legend(loc = 'lower right')\n    plt.plot([0, 1], [0, 1], linestyle = '--')\n    plt.axis('tight')\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')","517da794":"print('Model: Logistic Regression\\n')\nmodel(LogisticRegression(solver = \"liblinear\"), X_train, X_test, y_train, y_test)","5f7a5e4e":"LogR = LogisticRegression(solver = \"liblinear\")\ncv_scores = cross_val_score(LogR, X, y, cv = 3, scoring = 'accuracy')\nprint('Mean Score of CV: ', cv_scores.mean())","539bf5ec":"ROC(y_test, y_prob)","cee01553":"print('Model: Gaussian Naive Bayes\\n')\nmodel(GaussianNB(), X_train, X_test, y_train, y_test)","0b75e50f":"I got Nothing with Density Curve of modeling Covid vs No Virus.","1dc9b662":"Another ValueError: n_splits=2 cannot be greater than the number of members in each class.","7c8bccde":"#ValueError: n_splits=8 cannot be greater than the number of members in each class.","0254c12d":"#ValueError: multi_class must be in ('ovo', 'ovr')","233c54f3":"#Label Encoding","92e3a1b9":"#Model and ROC Curve Comparison","f6189450":"#Unique Values","3daee35b":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke ","ea82112a":"#ValueError: multiclass format is not supported","d4a96439":"#No Missing Data"}}