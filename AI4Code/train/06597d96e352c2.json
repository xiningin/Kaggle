{"cell_type":{"7346ea8f":"code","a37848f3":"code","a88bcd91":"code","bb59c99b":"code","13dd7a25":"code","feac2762":"code","6719b389":"code","61bfd700":"code","9002bfa9":"code","557c46df":"code","d6610c7d":"code","cf207e8c":"code","e6a512f5":"code","7471eea7":"code","f842dd85":"code","2190e367":"code","d855e71e":"code","e8e84aa0":"code","a4371106":"code","c4c13ae8":"code","ca215092":"code","01ee6280":"code","88eb5581":"code","798d8305":"code","61d213c2":"code","fb97baef":"code","852540ac":"code","0e4a3e4c":"code","bf3e49aa":"code","e2018996":"code","26bae9e9":"code","98bc3677":"code","e1020021":"code","ee47cbbb":"code","ed4192ee":"code","b6a02d51":"code","3e1c28ba":"markdown","3024c41a":"markdown","d56323f6":"markdown","9458c9d5":"markdown","d6808be9":"markdown","c467ee42":"markdown","7ca84850":"markdown","5686ae92":"markdown","888df7ba":"markdown","654fa363":"markdown","dd7770d7":"markdown","e5b8d738":"markdown","c64e126f":"markdown","66aba4d1":"markdown","cf6000b7":"markdown","6c9b098f":"markdown","b39fe339":"markdown","adeb9be0":"markdown","b997ca8a":"markdown","f0d1e376":"markdown"},"source":{"7346ea8f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a37848f3":"import tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom tensorflow import keras\nimport matplotlib.image as mpimg \nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import confusion_matrix,classification_report","a88bcd91":"import os \nfrom glob import glob \n#print(os.listdir(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val\"))\npath_train =  '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train'\npath_test = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test'\npath_val= '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val'","bb59c99b":"path_train_pneumonia =  '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/PNEUMONIA'\npath_train_normal = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/NORMAL'\npath_test_normal = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/NORMAL'\npath_test_pneumonia = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/PNEUMONIA'\npath_val_normal =  '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val\/NORMAL'\npath_val_pneumonia =  '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val\/PNEUMONIA'","13dd7a25":"images_path = glob(path_train_normal+\"\/*.jpeg\")\nimages = []\nfor  path in images_path:    \n     images.append((path,0))\nPneumonia_images_path =  glob(path_train_pneumonia+\"\/*.jpeg\")\nfor path in Pneumonia_images_path:\n    images.append((path,1))\n","feac2762":"df = pd.DataFrame(images, columns=['images','labels'])\ndf.groupby('labels').count().plot.barh()","6719b389":"plt.figure(figsize=(10,10))\nim = []\nfor i in range(0,10):\n    im.append(plt.imread(df.loc[i].images))\nlen(im)\nfor i in range(0,9):\n    plt.subplot(3, 3, i+1)\n    plt.imshow(im[i])\n","61bfd700":"IMG_SIZE = 150 \nBATCH_SIZE = 32","9002bfa9":"img_generator =keras.preprocessing.image.ImageDataGenerator(rescale = 1.\/255,\n                                                            rotation_range=10,\n                                                            shear_range=0.2,\n                                                            zoom_range=0.2,\n                                                            width_shift_range=0.1,\n                                                            height_shift_range=0.1,\n                                                            horizontal_flip=True)\n\n\n\ntrain_generator = img_generator.flow_from_directory(path_train,\n                                                  target_size=(IMG_SIZE, IMG_SIZE),\n                                                  batch_size=BATCH_SIZE,\n                                                  #color_mode=\"grayscale\",\n                                                  shuffle=True,\n                                                  class_mode='binary', \n                                                  subset='training')\n\nval_generator  = img_generator.flow_from_directory(path_val,\n                                                  target_size=(IMG_SIZE, IMG_SIZE),\n                                                  #batch_size= BATCH_SIZE,\n                                                  #color_mode=\"grayscale\",\n                                                  shuffle=False,\n                                                  class_mode='binary',\n                                                  )\n\ntest_generator = img_generator.flow_from_directory(path_test,\n                                                  target_size=(IMG_SIZE, IMG_SIZE),\n                                                  #color_mode=\"grayscale\",\n                                                  shuffle=False,\n                                                  class_mode='binary')\nplt.imshow(train_generator[0][0][0])","557c46df":"# sequential model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.utils import plot_model\n# layers\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau,EarlyStopping\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout, BatchNormalization","d6610c7d":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.0001) #0.00001 reduce the learning rate when the metrics isnt improoving\n#early_stopping = EarlyStopping(patience = 5)\ncallback = [learning_rate_reduction]\ncnn_model =  Sequential()\n","cf207e8c":"cnn_model.add(Conv2D(32,(3,3), activation ='relu', input_shape=(IMG_SIZE , IMG_SIZE,3)))#Convlayer mit 32 Filtern der Gr\u00f6\u00dfe 3x3. \ncnn_model.add(Conv2D(64, (3,3),activation='relu')) #increase the non-linearity\ncnn_model.add(MaxPooling2D(2,2)) #die features-Maps werden als 2x2 array transformiert\n#cnn_model.add(Dropout(0.25))\n\ncnn_model.add(Conv2D(64, (3,3), activation='relu'))\ncnn_model.add(Conv2D(64, (3,3), activation='relu'))\ncnn_model.add(MaxPooling2D(2,2))\n\ncnn_model.add(Conv2D(128, (3,3), activation='relu'))\ncnn_model.add(MaxPooling2D(2,2))\n\n\ncnn_model.add(Flatten())#Matrizendaten abflachen, weil die Fully-Connected layer die Daten als Vector nimmt.\ncnn_model.add(Dense(128, activation='relu'))\ncnn_model.add(Dropout(0.5))\ncnn_model.add(Dense(1, activation='sigmoid'))\n\ncnn_model.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\ncnn_model.summary()","e6a512f5":"model = cnn_model.fit_generator(train_generator,\n                                steps_per_epoch = 163,\n                                epochs = 10,\n                                validation_data=val_generator,\n                                validation_steps=len(val_generator),\n                                callbacks = callback)","7471eea7":"plt.figure(figsize=(14, 5))\n\nplt.subplot(1, 2, 1)\nplt.plot(model.history['val_accuracy'],label='validation Accuracy')\nplt.plot(model.history['accuracy'], label='Training Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training  Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(model.history['val_loss'],label='validation loss')\nplt.plot(model.history['loss'], label='Training Loss')\nplt.legend(loc='upper right')\nplt.title('Training  Loss')\n\nplt.show()","f842dd85":"predic= cnn_model.evaluate(test_generator)\npredictions =  cnn_model.predict_generator(test_generator)\n","2190e367":"CNN_prediction_final = np.where(predictions>0.5,1,0)\nprint(classification_report(test_generator.classes,CNN_prediction_final , target_names = ['Pneumonia (Class 1)','Normal (Class 0)']))","d855e71e":"# Get the confusion matrix\nCM = confusion_matrix(test_generator.classes, CNN_prediction_final)\n\nfig, ax = plot_confusion_matrix(conf_mat=CM ,  figsize=(8,8))\nplt.title('Confusion matrix')\nplt.xticks(range(2), ['Normal','Pneumonia'], fontsize=10)\nplt.yticks(range(2), ['Normal','Pneumonia'], fontsize=10)\nplt.show()","e8e84aa0":"from sklearn.metrics import roc_curve,roc_auc_score\nfrom sklearn.metrics import auc\n\nfpr , tpr , thresholds = roc_curve ( test_generator.classes , predictions)\nauc_keras = auc(fpr, tpr)\nprint(\"AUC Score:\",auc_keras)\nplt.figure()\nlw = 2\nplt.plot(fpr, tpr, color='darkorange',\n         lw=lw, label='ROC curve (area = %0.2f)' % auc_keras)\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.legend(loc=\"lower right\")\nplt.show()","a4371106":"model_feat = tf.keras.Model(inputs=cnn_model.input,outputs=cnn_model.get_layer('dense_1').output)\nfeat_train = model_feat.predict_generator(train_generator)\nfeat_test = model_feat.predict_generator(test_generator)\n","c4c13ae8":"df = pd.DataFrame(feat_train)\ndf.shape","ca215092":"from sklearn.svm import SVC\nfrom sklearn import metrics\nsvm = SVC(kernel='sigmoid')\nsvm.fit(feat_train,train_generator.classes)\nsvmpredict = svm.predict(feat_test)\nprint(classification_report(test_generator.classes,svmpredict , target_names = ['Pneumonia (Class 1)','Normal (Class 0)']))","01ee6280":"fpr , tpr , thresholds = roc_curve ( test_generator.classes ,svmpredict)\nauc_keras = auc(fpr, tpr)\nprint(\"AUC Score:\",auc_keras)\nplt.figure()\nlw = 2\nplt.plot(fpr, tpr, color='darkorange',\n         lw=lw, label='ROC curve (area = %0.2f)' % auc_keras)\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.legend(loc=\"lower right\")\nplt.show()","88eb5581":"svmCM = confusion_matrix(test_generator.classes, svmpredict)\n\nfig, ax = plot_confusion_matrix(conf_mat=svmCM ,  figsize=(8,8))\nplt.title('Confusion matrix')\nplt.xticks(range(2), ['Normal','Pneumonia'], fontsize=10)\nplt.yticks(range(2), ['Normal','Pneumonia'], fontsize=10)\nplt.show()","798d8305":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=2)\nknn.fit(feat_train,train_generator.classes)\n\nknnpredict = knn.predict(feat_test)\nprint(classification_report(test_generator.classes,knnpredict , target_names = ['Pneumonia (Class 1)','Normal (Class 0)']))\nknn.score(feat_test,test_generator.classes)","61d213c2":"fpr , tpr , thresholds = roc_curve ( test_generator.classes ,knnpredict)\nauc_keras = auc(fpr, tpr)\nprint(\"AUC Score:\",auc_keras)\nplt.figure()\nlw = 2\nplt.plot(fpr, tpr, color='darkorange',\n         lw=lw, label='ROC curve (area = %0.2f)' % auc_keras)\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.legend(loc=\"lower right\")\nplt.show() ","fb97baef":"# Get the confusion matrix\nknnCM = confusion_matrix(test_generator.classes, knnpredict)\n\nfig, ax = plot_confusion_matrix(conf_mat=knnCM ,  figsize=(8,8))\nplt.title('Confusion matrix')\nplt.xticks(range(2), ['Normal','Pneumonia'], fontsize=10)\nplt.yticks(range(2), ['Normal','Pneumonia'], fontsize=10)\nplt.show()","852540ac":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(random_state = 0)\ndt.fit(feat_train,train_generator.classes)\n\ndtpredict = dt.predict(feat_test)\nprint(classification_report(test_generator.classes,dtpredict , target_names = ['Pneumonia (Class 1)','Normal (Class 0)']))","0e4a3e4c":"fpr , tpr , thresholds = roc_curve ( test_generator.classes ,dtpredict)\nauc_keras = auc(fpr, tpr)\nprint(\"AUC Score:\",auc_keras)\nplt.figure()\nlw = 2\nplt.plot(fpr, tpr, color='darkorange',\n         lw=lw, label='ROC curve (area = %0.2f)' % auc_keras)\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.legend(loc=\"lower right\")\nplt.show()","bf3e49aa":"IMG_SIZ = 64 \nBATCH_SIZ = 16","e2018996":"train_generator_ = img_generator.flow_from_directory(path_train,\n                                                  target_size=(IMG_SIZ, IMG_SIZ),\n                                                  batch_size=BATCH_SIZ,\n                                                  color_mode=\"grayscale\",\n                                                  shuffle=True,\n                                                  class_mode='binary', \n                                                  subset='training')\n\nval_generator_  = img_generator.flow_from_directory(path_val,\n                                                  target_size=(IMG_SIZ, IMG_SIZ),\n                                                  color_mode=\"grayscale\",\n                                                  class_mode='binary',\n                                                  )\n\ntest_generator_ = img_generator.flow_from_directory(path_test,\n                                                  target_size=(IMG_SIZ, IMG_SIZ),\n                                                  color_mode=\"grayscale\",\n                                                  class_mode='binary')","26bae9e9":"cnn2_model = Sequential()\ncnn2_model.add(Flatten(input_shape=(IMG_SIZ, IMG_SIZ,1)))\ncnn2_model.add(Dense(512 ,activation='relu'))\ncnn2_model.add(Dense(256, activation='relu'))\ncnn2_model.add(Dense(1, activation='sigmoid'))\n\n\ncnn2_model.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\ncnn2_model.summary()","98bc3677":"model = cnn2_model.fit_generator(train_generator_,\n                                steps_per_epoch = 163,\n                                epochs = 10,\n                                validation_data=val_generator_,\n                                callbacks = callback)","e1020021":"plt.figure(figsize=(14, 5))\n\nplt.subplot(1, 2, 1)\nplt.plot(model.history['val_accuracy'],label='validation Accuracy')\nplt.plot(model.history['accuracy'], label='Training Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training  Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(model.history['val_loss'],label='validation loss')\nplt.plot(model.history['loss'], label='Training Loss')\nplt.legend(loc='upper right')\nplt.title('Training  Loss')\n\nplt.show()","ee47cbbb":"# evaluate model\npredic2= cnn2_model.evaluate(test_generator_)\npredictions2 =  cnn2_model.predict_generator(test_generator_)\nCNN_prediction_final_ = np.where(predictions2>0.5,1,0)\nprint(classification_report(test_generator_.classes,CNN_prediction_final_ , target_names = ['Pneumonia (Class 1)','Normal (Class 0)']))","ed4192ee":"# Get the confusion matrix\nCM2 = confusion_matrix(test_generator_.classes, CNN_prediction_final_)\n\nfig, ax = plot_confusion_matrix(conf_mat=CM2 ,  figsize=(8,8))\nplt.title('Confusion matrix')\nplt.xticks(range(2), ['Normal','Pneumonia'], fontsize=10)\nplt.yticks(range(2), ['Normal','Pneumonia'], fontsize=10)\nplt.show()","b6a02d51":"fpr , tpr , thresholds = roc_curve (test_generator.classes ,predictions2)\nauc_keras = auc(fpr, tpr)\nprint(\"AUC Score:\",auc_keras)\nplt.figure()\nlw = 2\nplt.plot(fpr, tpr, color='darkorange',\n         lw=lw, label='ROC curve (area = %0.2f)' % auc_keras)\nplt.plot([0, 1], [0, 1], color='navy', linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.legend(loc=\"lower right\")\nplt.show()","3e1c28ba":"##  Building a CNN model","3024c41a":"## Data processing","d56323f6":"## Data augmentation","9458c9d5":"## Confusion matrix","d6808be9":"## ROC K Nearest neighbour","c467ee42":"## Model evaluation","7ca84850":"## Confusion Matrix","5686ae92":" # Convolutional neural network","888df7ba":"##  ROC Decision tree","654fa363":"## Data importation ","dd7770d7":"## SVM","e5b8d738":"## ROC","c64e126f":" ## feature extractor","66aba4d1":"## Classification report","cf6000b7":"## Problems:\n* Data not balanced or not enough images with 0 as label.\n* The images do not have the same size.\n\n## Solutions:\n*  Use data augmentation.\n*  change the size of the images.","6c9b098f":"## Feed Forward NN","b39fe339":"## Decision Tree","adeb9be0":"## ROC Feed Forwad NN","b997ca8a":"## ROC SVM","f0d1e376":"## K Nearest neighbour"}}