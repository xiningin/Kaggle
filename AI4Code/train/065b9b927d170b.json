{"cell_type":{"342b918c":"code","879ba6b7":"code","af10c134":"code","8038f308":"code","20e3d737":"code","dd095031":"code","b9bbb421":"code","21816562":"code","f70fa162":"code","b7a27277":"code","9f1d4dc3":"code","52ac232c":"code","6dbc7512":"code","afe0396e":"code","bcc1fa68":"code","08a2f076":"code","53fd1bc1":"code","d5c7b370":"markdown","ed021e57":"markdown","523d8712":"markdown","a10e9a8b":"markdown","b31b80b9":"markdown","92cf54d1":"markdown","b67d0529":"markdown","d223b6d0":"markdown","f61ec28a":"markdown","d7e65477":"markdown"},"source":{"342b918c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras.preprocessing import image\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout, BatchNormalization\nfrom keras.utils.vis_utils import plot_model\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","879ba6b7":"train_datagen = image.ImageDataGenerator(rotation_range=15, width_shift_range=0.1,\n                                         height_shift_range=0.1,shear_range=0.1,\n                                         zoom_range=0.2,rescale=1\/255,\n                                         horizontal_flip=True)","af10c134":"val_datagen = image.ImageDataGenerator(rescale=1\/255)","8038f308":"train_generator = train_datagen.flow_from_directory(\"..\/input\/cifar10-pngs-in-folders\/cifar10\/train\", target_size=(32,32))\nval_generator = val_datagen.flow_from_directory(\"..\/input\/cifar10-pngs-in-folders\/cifar10\/test\",target_size=(32,32))","20e3d737":"class_names = train_generator.class_indices\nclass_names = {class_names[i]:i for i in class_names.keys()}\nprint(class_names)","dd095031":"train_imgs, labels = next(train_generator)\nprint(train_imgs.shape)","b9bbb421":"plt.imshow(train_imgs[30])\nplt.xticks([])\nplt.yticks([])\nplt.grid(False)\nlabel1 = np.argmax(labels[30])\nplt.xlabel(class_names.get(label1))","21816562":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_imgs[i], cmap=plt.cm.binary)\n    label1 = np.argmax(labels[i])\n    plt.xlabel(class_names.get(label1))\nplt.show()","f70fa162":"model = Sequential()\nmodel.add(Conv2D(filters= 32 , kernel_size=(3,3), padding = 'same', activation = 'relu' , input_shape = (32,32,3)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(512, activation = 'relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(10, activation = 'softmax'))\nmodel.summary()","b7a27277":"plot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)","9f1d4dc3":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","52ac232c":"history = model.fit_generator(train_generator, steps_per_epoch=50000\/\/32, epochs=150,\n                              validation_data=val_generator, validation_steps = 10000\/\/32)","6dbc7512":"model_history = history.history\nloss_accuracy_train = model.evaluate(train_generator)\nprint(\"Training Loss: {:.4f}\".format(loss_accuracy_train[0]))\nprint(\"Training Accuracy: {:.2%}\".format(loss_accuracy_train[1]))\nloss_accuracy = model.evaluate(val_generator)\nprint(\"Validation Loss: {:.4f}\".format(loss_accuracy[0]))\nprint(\"Validation Accuracy: {:.2%}\".format(loss_accuracy[1]))","afe0396e":"fig , ax = plt.subplots(1,2)\ntrain_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\nfig.set_size_inches(12,4)\n\nax[0].plot(history.history['accuracy'])\nax[0].plot(history.history['val_accuracy'])\nax[0].set_title('Training Accuracy vs Validation Accuracy')\nax[0].set_ylabel('Accuracy')\nax[0].set_xlabel('Epoch')\nax[0].legend(['Train', 'Validation'], loc='upper left')\n\nax[1].plot(history.history['loss'])\nax[1].plot(history.history['val_loss'])\nax[1].set_title('Training Loss vs Validation Loss')\nax[1].set_ylabel('Loss')\nax[1].set_xlabel('Epoch')\nax[1].legend(['Train', 'Validation'], loc='upper left')\n\nplt.show()","bcc1fa68":"test_imgs, test_labels = next(val_generator)\npredictions = model.predict(test_imgs)","08a2f076":"def plot_image(i, predictions_array, true_label, img):\n    true_label, img = true_label[i], img[i]\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n\n    plt.imshow(img, cmap=plt.cm.binary)\n\n    predicted_label = np.argmax(predictions_array)\n    true_label1 = np.argmax(true_label)\n    if predicted_label == true_label1:\n        color = 'green'\n    else:\n        color = 'red'\n\n    plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                         100*np.max(predictions_array),\n                                         class_names[true_label1]),\n                                         color=color)\n\ndef plot_value_array(i, predictions_array, true_label):\n    true_label = true_label[i]\n    true_label1 = np.argmax(true_label)\n    plt.grid(False)\n    plt.xticks(range(10))\n    plt.yticks([])\n    thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n    plt.ylim([0, 1])\n    predicted_label = np.argmax(predictions_array)\n\n    thisplot[predicted_label].set_color('red')\n    thisplot[true_label1].set_color('green')","53fd1bc1":"num_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image(i, predictions[i], test_labels, test_imgs)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(i, predictions[i], test_labels)\nplt.tight_layout()\nplt.show()","d5c7b370":"## Training the Model","ed021e57":"Defining an Image Data Generator.","523d8712":"The accurarcy of the model on training set is **approximately 90%**\n\nThe accurarcy of the model on validation set is **approximately 86%**","a10e9a8b":"Loading the data with the data generator defined above.","b31b80b9":"## Importing Important Packages","92cf54d1":"Checking the loaded data.","b67d0529":"## Image Augmentation\/Generator and Data Loader","d223b6d0":"## Defining the Model","f61ec28a":"# CNN CIFAR-10 Classifier","d7e65477":"## Evaluating the Model"}}