{"cell_type":{"136c9ce1":"code","fda58c52":"code","7e25b6b0":"code","5e9c9227":"code","2f52b203":"code","c6f67efe":"code","567f4afc":"code","106ad402":"code","e5954ec7":"code","50ef6317":"code","0ca891df":"code","4bba2ed4":"code","b19d39c8":"code","fe396742":"code","792e02cc":"code","869057c7":"code","53bdc386":"code","2f170e0a":"code","67ced4ea":"code","bae577b7":"code","ec334901":"code","e3ea848b":"code","762f7d4a":"code","0fe61615":"code","2f890d8c":"code","d6c4904a":"code","87cd384a":"code","97c12d8d":"code","98318411":"code","bc666dcb":"code","b2244cff":"code","da86be48":"code","522ac36a":"code","b42ae546":"code","c1b7db6e":"code","16322109":"code","969a16b5":"code","7dd67ddc":"code","239db314":"code","ef6f4035":"code","96b0c44a":"code","0be512b7":"code","73a077af":"code","f632326a":"code","5545ed2f":"code","9a5678f3":"code","0e36392d":"code","29fdd51d":"code","44ff6ab9":"code","0f9330e1":"code","0fa9580d":"code","8dd88aec":"code","e4ed8529":"code","5cc187d0":"code","64993ad7":"code","4eb9cb13":"code","eafde866":"code","364fd654":"code","320f8d95":"code","fb3eb186":"markdown","17a1c2bc":"markdown"},"source":{"136c9ce1":"#!pip install wwf timm -qqq","fda58c52":"#downgrade pytorch because 1.9.1 is causing conflicts\n!pip install --user \/kaggle\/input\/fastaimaster\/torch-1.9.0-cp37-cp37m-manylinux1_x86_64.whl","7e25b6b0":"!pip install ..\/input\/timm-package\/timm-0.4.12-py3-none-any.whl","5e9c9227":"!pip install ..\/input\/wwf0013wheel\/wwf-0.0.13-py3-none-any.whl","2f52b203":"from wwf.utils import *\nimport timm","c6f67efe":"#state_versions(['fastai', 'fastcore'])","567f4afc":"import numpy as np\nimport os\nimport pandas as pd\nfrom fastai.vision.all import *","106ad402":"from timm import create_model\nfrom fastai.vision.learner import _update_first_layer","e5954ec7":"\ndef create_timm_body(arch:str, pretrained=True, cut=None, n_in=3):\n    \"Creates a body from any model in the `timm` library.\"\n    model = create_model(arch, pretrained=pretrained, num_classes=0, global_pool='')\n    _update_first_layer(model, n_in, pretrained)\n    if cut is None:\n        ll = list(enumerate(model.children()))\n        cut = next(i for i,o in reversed(ll) if has_pool_type(o))\n    if isinstance(cut, int): return nn.Sequential(*list(model.children())[:cut])\n    elif callable(cut): return cut(model)\n    else: raise NamedError(\"cut must be either integer or function\")","50ef6317":"if not os.path.exists('\/root\/.cache\/torch\/hub\/checkpoints\/'):\n        os.makedirs('\/root\/.cache\/torch\/hub\/checkpoints\/')\n\n!cp '..\/input\/effnetv2rwm\/efficientnetv2_rw_m_agc-3d90cb1e.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/efficientnetv2_rw_m_agc-3d90cb1e.pth'","0ca891df":"#body = create_timm_body('resnet18', pretrained=True)\nbody = create_timm_body('efficientnetv2_rw_m', pretrained=True)\n#resnetv2_50x1_bitm_in21k\n#efficientnetv2_rw_t","4bba2ed4":"path = Path('..\/input\/petfinder-pawpularity-score')","b19d39c8":"train = pd.read_csv(path\/'train.csv')","fe396742":"train.head()","792e02cc":"train['image'] = train['Id'].apply(lambda x: 'train\/{}.jpg'.format(x))","869057c7":"train = train.drop(columns=['Id'])\ntrain = train.sample(frac=1).reset_index(drop=True)\ntrain.head(10)","53bdc386":"blocks = [ImageBlock, RegressionBlock()]","2f170e0a":"item_tfms = [Resize(320)];# size should be bigger","67ced4ea":"batch_tfms = [*aug_transforms(flip_vert=True,size=(224)), Normalize.from_stats(*imagenet_stats)]","bae577b7":"bs=8","ec334901":"splitter = RandomSplitter()","e3ea848b":"def get_x(row): return path\/row['image']","762f7d4a":"pets = DataBlock(blocks =blocks,\n                  get_x = get_x,\n                  get_y = ColReader('Pawpularity'),\n                  splitter =splitter,\n                  item_tfms=item_tfms,\n                  batch_tfms = batch_tfms,\n                  )","0fe61615":"dls = pets.dataloaders(train, bs=bs)","2f890d8c":"dls.show_batch(nrows=2,ncols=1,figsize=(10,10))","d6c4904a":"nf = num_features_model(body); nf","87cd384a":"head = create_head(nf, dls.c, concat_pool=True)","97c12d8d":"net = nn.Sequential(body, head)","98318411":"learn = Learner(dls, net, splitter=default_split)","bc666dcb":"learn.freeze()\nfrozen = filter(lambda p: not p.requires_grad, learn.model.parameters())\nfrozen = sum([np.prod(p.size()) for p in frozen])\nmodel_parameters = filter(lambda p: p.requires_grad, learn.model.parameters())\nunfrozen = sum([np.prod(p.size()) for p in model_parameters])","b2244cff":"frozen, unfrozen","da86be48":"def create_timm_model(arch:str, n_out, cut=None, pretrained=True, n_in=3, init=nn.init.kaiming_normal_, custom_head=None,\n                     concat_pool=True, **kwargs):\n    \"Create custom architecture using `arch`, `n_in` and `n_out` from the `timm` library\"\n    body = create_timm_body(arch, pretrained, None, n_in)\n    if custom_head is None:\n        nf = num_features_model(nn.Sequential(*body.children()))\n        head = create_head(nf, n_out, concat_pool=concat_pool, **kwargs)\n    else: head = custom_head\n    model = nn.Sequential(body, head)\n    if init is not None: apply_init(model[1], init)\n    return model\n\n# Cell\nfrom fastai.vision.learner import _add_norm\n\n#exports\ndef timm_learner(dls, arch:str, loss_func=None, pretrained=True, cut=None, splitter=None,\n                y_range=None, config=None, n_out=None, normalize=True, **kwargs):\n    \"Build a convnet style learner from `dls` and `arch` using the `timm` library\"\n    if config is None: config = {}\n    if n_out is None: n_out = get_c(dls)\n    assert n_out, \"`n_out` is not defined, and could not be inferred from data, set `dls.c` or pass `n_out`\"\n    if y_range is None and 'y_range' in config: y_range = config.pop('y_range')\n    model = create_timm_model(arch, n_out, default_split, pretrained, y_range=y_range, **config)\n    learn = Learner(dls, model, loss_func=loss_func, splitter=default_split, **kwargs)\n    if pretrained: learn.freeze()\n    return learn","522ac36a":"learn = timm_learner(dls, 'efficientnetv2_rw_m', metrics=[rmse])","b42ae546":"frozen = filter(lambda p: not p.requires_grad, learn.model.parameters())\nfrozen = sum([np.prod(p.size()) for p in frozen])\nmodel_parameters = filter(lambda p: p.requires_grad, learn.model.parameters())\nunfrozen = sum([np.prod(p.size()) for p in model_parameters])","c1b7db6e":"frozen, unfrozen","16322109":"learn.fine_tune(4)","969a16b5":"learn.save('stage_1')","7dd67ddc":"learn.load('stage_1')","239db314":"learn.unfreeze()","ef6f4035":"lrs = learn.lr_find(suggest_funcs=(minimum, steep, valley, slide))","96b0c44a":"lrs.slide","0be512b7":"lrs.valley","73a077af":"\nlearn.fine_tune(4, base_lr=lrs.valley) ","f632326a":"learn.save('stage_2')","5545ed2f":"learn.load('stage_2');","9a5678f3":"sample_df = pd.read_csv(path\/'sample_submission.csv')\nsample_df.head()","0e36392d":"test_df = pd.read_csv(path\/'test.csv')\ntest_df.head()","29fdd51d":"test_imgs = '..\/input\/petfinder-pawpularity-score\/test'","44ff6ab9":"test_df['image'] = test_df['Id'].apply(lambda x: 'test\/{}.jpg'.format(x))","0f9330e1":"test_df.head()","0fa9580d":"sample_copy = test_df.copy()","8dd88aec":"sample_copy.head()","e4ed8529":"test_dl = learn.dls.test_dl(sample_copy)","5cc187d0":"test_dl.show_batch()","64993ad7":"preds = learn.get_preds(dl=test_dl)","4eb9cb13":"import os \ntest_data = pd.DataFrame()","eafde866":"test_data['Id'] = [img[:-4]for img in os.listdir(test_imgs)]\ntest_data","364fd654":"# Now adding the pawpularity score to our dataframe \ntest_data['Pawpularity'] = preds[0].detach().numpy()\ntest_data","320f8d95":"# Making the submission\ntest_data.to_csv('submission.csv' , index=False)","fb3eb186":"Added the next two rows for new getx","17a1c2bc":"Inference"}}