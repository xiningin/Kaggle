{"cell_type":{"3d840a62":"code","1fff1112":"code","c8291f8f":"code","e8490b3c":"code","3b64c36e":"code","d80298b1":"code","8b50d607":"code","bc1fc45d":"code","8ad912a6":"code","21a876f5":"code","e9f122e5":"code","09040eff":"code","f513a354":"code","edb4cc0b":"code","6dd78fe7":"code","c2c3fb88":"code","e1727632":"code","61a90c51":"code","00bfbe89":"markdown","4dc74dc6":"markdown","d8e18254":"markdown","f2dc5635":"markdown","a7bbbfed":"markdown","6f3de662":"markdown","7f3b75d3":"markdown","71255b9a":"markdown","13505806":"markdown","9e677100":"markdown","ce27e251":"markdown","688bf71c":"markdown","e670158e":"markdown","14adfecc":"markdown","da4b8263":"markdown"},"source":{"3d840a62":"import math as m\nimport matplotlib.pyplot as mp\nimport shapely.geometry as sh\nimport fiona as f\nfrom shapely.geometry import shape\nfrom IPython.display import Image as im\nimport os","1fff1112":"#create multiple lists of polygons to determine there area.\npoly0 = [(2,1.3), (5, 1.2), (6,3),(6,4),(3, 5), (1.4, 3), (1.5, 2), (2, 1.3)]\npoly1 = [(5, 6), (7, 6), (4, 9), (6, 3), (3, 6), (0, 4), (1, 7), (5, 6)]\npoly2 = [(1, 2), (1, 3), (3, 3), (4, 5), (4, 4), (6, 0), (1, 2)]","c8291f8f":"#in order to calculate the, are of polygons, the shapely function must be used.\npolygons=[poly0, poly1, poly2]\n#Merging all polygons in one list to deal with them more manageable by using iteration.\nfor i in range(len(polygons)):\n    areaofpolygons = sh.Polygon(polygons[i])\n    print('Area of poly{} is {}'.format([i], areaofpolygons.area))","e8490b3c":"mp.plot((sh.Polygon(polygons[0])).exterior.xy[0], (sh.Polygon(polygons[0])).exterior.xy[1], 'y')\nmp.fill((sh.Polygon(polygons[1])).exterior.xy[0], (sh.Polygon(polygons[1])).exterior.xy[1], \"black\")\nmp.fill((sh.Polygon(polygons[2])).exterior.xy[0], (sh.Polygon(polygons[2])).exterior.xy[1], 'b')\n\n","3b64c36e":"im(\"..\/input\/picture-1\/rxry.png\")","d80298b1":"\"\"\"\nCalculates the spatial mean of a set of xy coordinates\nparameters, then returns: the mean x and y values\nusage: x, y = centroids(polys)\n\"\"\"\ndef centroids(polys):\n    adj = 1\n    if polys[0] != polys[-1]:\n        adj==0\n    \n    x, y = zip(*polys)\n    \n    totx = toty = 0\n    \n    for p in range(len(polys)-adj):\n        x, y = polys[p] \n        totx = totx + x\n        toty = toty + y\n    cx = totx \/ (len(polys)-adj)#divide totale of x coordinates by how many x coordinates to get the mean of x      \n    cy = toty \/ (len(polys)-adj)#divide totale of y coordinates by how many x coordinates to get the mean of y    \n    return cx,  cy","8b50d607":"#Checking the functionality of the function\nfor i in range(len(polygons)): \n    x, y = centroids(polygons[i])\n    print(x, y)","bc1fc45d":"# couning the centroid of each polygon by using iteration.\nfor i in range(len(polygons)):\n    print('the centroid of the poly{} is {}'.format([i], (centroids(polygons[i]))))","8ad912a6":"im(\"..\/input\/function\/function.png\")","21a876f5":"# converting the mathematical function into python code, by starting from the inside out\ndef areaofapolygon(polys):\n    polysarea = 0 # equalizing the sum to Zero\n    \n    cx, cy = centroids(polys)#store the centroid coordinates in cx,cy  \n    adj = 1 \n    for p in range(len(polys)- adj): #iterate through the list, the -1 is to avoide the function from getting out of range\n       xi,yi = polys[p]         \n       xj,yj = polys[p+1]  \n       formula = (((xj-cx)*(yi-cy)) - ((xi-cx)*(yj-cy)))\n       polysarea = polysarea + formula   \n    polysarea = 0.5 * m.fabs(polysarea) #calculate the whole area of the polygon  \n    return polysarea\n","e9f122e5":"# by using itreation, we  can manipulate all the polygons simultaneously.\nfor i in range(len(polygons)):\n    area = areaofapolygon(polygons[i])\n    print('Area of poly{} by using shpley function is {} and from our function is {}'.format([i], int(sh.Polygon(polygons[i]).area), int(area) ))","09040eff":"# Loading shapefile data into a list\ninput_polygonsfile = [] # an empty list to store the polygons we upload\n\n\nipf = f.open('..\/input\/ceg1713-data-files\/polygons.dbf') #Open the shapefile\n\nfor each_poly in ipf:\n    geom = sh.shape(each_poly['geometry'])\n    poly_data = each_poly[\"geometry\"][\"coordinates\"][0]  #EXTERIOR RING ONLY\n    poly = sh.Polygon(poly_data)\n    print(poly)\n    #Converts into the same format as the other data\n    input_polygonsfile.append(list(poly.exterior.coords))\n\ndisplay(input_polygonsfile)","f513a354":"# Comparing the output of shape function to our function tom test the accuracy.\nfor i in range(len(input_polygonsfile)):\n    print(' Area of poly{} by using shpley function is {} and from our function is {}'.format([i], int(sh.Polygon(input_polygonsfile[i]).area), int(areaofapolygon(input_polygonsfile[i]))))","edb4cc0b":"mp.gca().set_aspect('equal', adjustable='box')  #To make the x and y axis the same scale\n\nfor poly in input_polygonsfile:\n    xy = list(zip(*poly))\n    mp.fill(xy[0], xy[1], alpha=0.5)\n    ","6dd78fe7":"for shp in input_polygonsfile:\n    print(areaofapolygon(shp))\n","c2c3fb88":"# Loading shapefile data into a list\ninput_polygonsfile2 = [] #a empty list to store the polygons we upload\n\n\nipf = f.open('..\/input\/ceg1713-data-files\/buildings.shp') #Open the shapefile\n\nfor each_poly in ipf:\n    geom = sh.shape(each_poly['geometry'])\n    poly_data = each_poly[\"geometry\"][\"coordinates\"][0]  #EXTERIOR RING ONLY\n    poly = sh.Polygon(poly_data)\n    print(poly)\n    #Converts into the same format as the other data\n    input_polygonsfile2.append(list(poly.exterior.coords))\n\ndisplay(input_polygonsfile2)","e1727632":"# Comparing the output of shape function to our function tom test the accuracy.\nfor i in range(len(input_polygonsfile2)):\n    print('Area of poly{} by using shpley function is {} and from our function is {}'.format([i], int(sh.Polygon(input_polygonsfile2[i]).area), int(areaofapolygon(input_polygonsfile2[i]))))","61a90c51":"mp.gca().set_aspect('equal', adjustable='box')  #To make the x and y axis the same scale\n\nfor poly in input_polygonsfile2:\n    xy = list(zip(*poly))\n    mp.fill(xy[0], xy[1], alpha=1.0)\n    ","00bfbe89":"# Area of a polygon function","4dc74dc6":"# Comparing the second file to our function ","d8e18254":"# Comparing","f2dc5635":"# plotting the polygons","a7bbbfed":"# Plotting the polygons","6f3de662":"# plotting the polygons","7f3b75d3":"# Calculating the area of  Polygon\n**This Kaggle notebook aims to calculate the area of any given polygon. This notebook will teste known polygons to test the accuracy of the function. Then the function will be reading and calculating the area of a polygon in a given file.**","71255b9a":"# passing shape file","13505806":"# Testing the function then compare it with shapely\n\n* in order to determine the accuracy of the function, the function should be giveng the same output as the shapely function.","9e677100":"# Adding polygons\n\n* in this stage, the area of random polygons will be calculated then plotted. then will calculate the area using shapley function in pyrthon.","ce27e251":"# Area of a polygon \n\n*in order to calculate the are of a polygon:*\n\n1. find the centroid of the polygon by summing the x coordinates and the y coordinates.\n2. applying the centroid into the function.\n","688bf71c":"# import libraries \n\n* in this stage.  all the needed libraries are provided to calculate the area, to plot the coordinates and to read the files .","e670158e":"# Pass these polygons to the function\n","14adfecc":"# The centroid function\n\n* To calculate the spatial mean or ( the centroid ) of any given polygon is by finding the mean of both x-coordinates and y-coordinates then summing them. ","da4b8263":"# adding a file of a coordinate to the function"}}