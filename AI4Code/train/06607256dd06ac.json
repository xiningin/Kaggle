{"cell_type":{"164162a0":"code","aefe39f7":"code","8072bac6":"code","4e50054e":"code","8e87cc94":"code","6e02a3ce":"code","7f351299":"code","af70fd08":"code","99887cf9":"code","67bf414e":"code","8f9c7784":"code","52e95902":"code","6674e37f":"code","406dccc2":"code","03e41aa5":"code","1607b364":"code","33d8654a":"code","665f5db0":"code","fe5e73b5":"code","5fcfe0e4":"code","419e9d52":"code","f012bde4":"code","9f8046c6":"code","be0a95df":"code","7a9b93f5":"code","876d3bbb":"code","9f6e296d":"code","afcea6ce":"code","e7294e3a":"code","a7d9698b":"code","a1fe067a":"code","3a951851":"code","abb1925b":"code","f810c8d8":"code","b26d39ba":"code","3a16e3c3":"code","dfbf560c":"code","92fce36c":"code","f9647c26":"code","14fcaf5a":"code","7fbe15cf":"code","1d12d256":"code","d0e4b236":"code","151f7e87":"code","d5e1c13f":"code","3d3e4a3b":"markdown","dea58c91":"markdown","91d2ddcb":"markdown","5d1057ca":"markdown","83606523":"markdown","47eb8f33":"markdown","8c5542ff":"markdown","8b576fb2":"markdown","59b7f69e":"markdown","3ce82337":"markdown"},"source":{"164162a0":"pip install thop","aefe39f7":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport collections\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler\n\nimport xgboost as xgb\nimport lightgbm as lgb\nimport catboost as cb\n\nimport thop\n\nimport optuna\nfrom optuna.integration import KerasPruningCallback\nfrom optuna.visualization import plot_contour, plot_edf, plot_intermediate_values,  plot_optimization_history, plot_parallel_coordinate, plot_param_importances, plot_slice \n\nimport torch \nimport torch.nn as nn\nfrom torch.utils.data import DataLoader\nimport torch.nn.functional as F\nimport torchvision\n\nimport tensorflow as tf\nimport keras \nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.models import Sequential\n\nimport warnings","8072bac6":"data = pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\ndata.head()","4e50054e":"# Shape of the dataset\ndata.shape","8e87cc94":"# Checking duplicated data\ndata.duplicated().sum()","6e02a3ce":"# checking label or unlabel dataset\nsns.countplot(x=data.DEATH_EVENT, data=data)","7f351299":"data.describe()","af70fd08":"# Increasing the number of features\ndef feature_creation(df):\n    df['age2'] = df['age']\/\/10\n    df['creatinine_phosphokinase2'] = df['creatinine_phosphokinase']\/\/20 #10\n    df['creatinine_phosphokinase3'] = df['creatinine_phosphokinase2']\/\/10\n    df['ejection_fraction2'] = df['ejection_fraction']\/\/10\n    df['platelets2'] = df['platelets']\/\/100\n    df['platelets3'] = df['platelets2']\/\/100\n    df['platelets4'] = df['platelets3']\/\/10\n    df['serum_sodium2'] = df['serum_sodium']\/\/20\n    \n    for i in ['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium','sex', 'smoking','time']:\n        for j in ['age2', 'creatinine_phosphokinase2', 'creatinine_phosphokinase3', 'ejection_fraction2', 'platelets2', 'platelets3', 'platelets4','serum_sodium2']:\n            df[i + \"_\" + j] = df[i].astype('str') + \"_\" + df[j].astype('str')\n    return df\n","99887cf9":"data = feature_creation(data)\ndata.head()","67bf414e":"# Categorical columns\ncat_columns = []\nnumerics = ['int8', 'int16', 'int32', 'int64', 'float16', 'float32', 'float64']\ncolumns = data.columns.values.tolist()\n\nfor col in columns:\n    if data[col].dtype in numerics: continue\n    cat_columns.append(col)\n    \nprint(cat_columns)","8f9c7784":"# Encoding of categorical features\nfor col in cat_columns:\n    if col in data.columns:\n        le = LabelEncoder()\n        le.fit(list(data[col].astype(str).values))\n        data[col] = le.transform(list(data[col].astype(str).values))\ndata.head()\n","52e95902":"print(f\"After feature number increased shape if :{data.shape}\")","6674e37f":"data = data.sample(frac=1).reset_index(drop=True)","406dccc2":"features = data.drop('DEATH_EVENT', axis=1)\nlabel = data.DEATH_EVENT","03e41aa5":"x_train, x_valid, y_train, y_valid = train_test_split(features, label, test_size=.2, stratify=label)\n","1607b364":"# Data Normalize\nscaler = MinMaxScaler()\nnormalized_xtrain = scaler.fit_transform(x_train)\nnormalized_xtest = scaler.fit_transform(x_valid)\n\n\n# Data Standardize\nstd = StandardScaler()\nstandardized_xtrain = scaler.fit_transform(normalized_xtrain)\nstandardized_xtest = scaler.fit_transform(normalized_xtest)","33d8654a":"def objective(trial):\n    #data, target = sklearn.datasets.load_breast_cancer(return_X_y=True)\n    #train_x, valid_x, train_y, valid_y = train_test_split(data, target, test_size=0.25)\n    dtrain = xgb.DMatrix(standardized_xtrain, label=y_train)\n    dvalid = xgb.DMatrix(standardized_xtest, label=y_valid)\n\n    param = {\n        \"verbosity\": 0,\n        \"objective\": \"binary:logistic\",\n        \"eval_metric\": \"auc\",\n        \"booster\": trial.suggest_categorical(\"booster\", [\"gbtree\", \"gblinear\", \"dart\"]),\n        \"lambda\": trial.suggest_float(\"lambda\", 1e-8, 1.0, log=True),\n        \"alpha\": trial.suggest_float(\"alpha\", 1e-8, 1.0, log=True),\n    }\n\n    if param[\"booster\"] == \"gbtree\" or param[\"booster\"] == \"dart\":\n        param[\"max_depth\"] = trial.suggest_int(\"max_depth\", 1, 9)\n        param[\"eta\"] = trial.suggest_float(\"eta\", 1e-8, 1.0, log=True)\n        param[\"gamma\"] = trial.suggest_float(\"gamma\", 1e-8, 1.0, log=True)\n        param[\"grow_policy\"] = trial.suggest_categorical(\"grow_policy\", [\"depthwise\", \"lossguide\"])\n    if param[\"booster\"] == \"dart\":\n        param[\"sample_type\"] = trial.suggest_categorical(\"sample_type\", [\"uniform\", \"weighted\"])\n        param[\"normalize_type\"] = trial.suggest_categorical(\"normalize_type\", [\"tree\", \"forest\"])\n        param[\"rate_drop\"] = trial.suggest_float(\"rate_drop\", 1e-8, 1.0, log=True)\n        param[\"skip_drop\"] = trial.suggest_float(\"skip_drop\", 1e-8, 1.0, log=True)\n\n    # Add a callback for pruning.\n    pruning_callback = optuna.integration.XGBoostPruningCallback(trial, \"validation-auc\")\n    bst = xgb.train(param, dtrain, evals=[(dvalid, \"validation\")], callbacks=[pruning_callback])\n    preds = bst.predict(dvalid)\n    pred_labels = np.rint(preds)\n    accuracy = accuracy_score(y_valid, pred_labels)\n    return accuracy\n","665f5db0":"study = optuna.create_study(\n        pruner=optuna.pruners.MedianPruner(n_warmup_steps=5), direction=\"maximize\"\n    )\nstudy.optimize(objective, n_trials=300)\n#print(study.best_trial)","fe5e73b5":"number_trial = len(study.trials)\nprint('number of trial :\\n', number_trial, '\\n')\n\nbest_trial = study.best_trial\nprint('best trials :\\n', best_trial, '\\n')\n\nbest_params = study.best_params\nprint('best parameters :\\n', best_params, '\\n')\n\nbest_value = study.best_value\nprint('best values :\\n', best_value, '\\n')\n\n#trial = study.trials\n#print('trials :\\n', trial, '\\n')\n","5fcfe0e4":"def objective(trial):\n    #data, target = load_breast_cancer(return_X_y=True)\n    #train_x, valid_x, train_y, valid_y = train_test_split(data, target, test_size=0.3)\n\n    param = {\n        \"objective\": trial.suggest_categorical(\"objective\", [\"Logloss\", \"CrossEntropy\"]),\n        \"colsample_bylevel\": trial.suggest_float(\"colsample_bylevel\", 0.01, 0.1),\n        \"depth\": trial.suggest_int(\"depth\", 1, 12),\n        \"boosting_type\": trial.suggest_categorical(\"boosting_type\", [\"Ordered\", \"Plain\"]),\n        \"bootstrap_type\": trial.suggest_categorical(\n            \"bootstrap_type\", [\"Bayesian\", \"Bernoulli\", \"MVS\"]\n        ),\n        \"used_ram_limit\": \"3gb\",\n    }\n\n    if param[\"bootstrap_type\"] == \"Bayesian\":\n        param[\"bagging_temperature\"] = trial.suggest_float(\"bagging_temperature\", 0, 10)\n    elif param[\"bootstrap_type\"] == \"Bernoulli\":\n        param[\"subsample\"] = trial.suggest_float(\"subsample\", 0.1, 1)\n\n    gbm = cb.CatBoostClassifier(**param)\n\n    gbm.fit(x_train, y_train, eval_set=[(x_valid, y_valid)], verbose=0, early_stopping_rounds=100)\n\n    preds = gbm.predict(x_valid)\n    pred_labels = np.rint(preds)\n    accuracy = accuracy_score(y_valid, pred_labels)\n    return accuracy\n","419e9d52":"study = optuna.create_study(direction=\"maximize\")\nstudy.optimize(objective, n_trials=300, timeout=600)","f012bde4":"print(\"Number of finished trials: {}\".format(len(study.trials)))\n\nprint(\"Best trial:\")\ntrial = study.best_trial\n\nprint(\"  Value: {}\".format(trial.value))\n\nprint(\"  Params: \")\nfor key, value in trial.params.items():\n    print(\"    {}: {}\".format(key, value))","9f8046c6":"def objective(trial):\n    #data, target = sklearn.datasets.load_breast_cancer(return_X_y=True)\n    #train_x, valid_x, train_y, valid_y = train_test_split(data, target, test_size=0.25)\n    dtrain = lgb.Dataset(x_train, label=y_train)\n    dvalid = lgb.Dataset(x_valid, label=y_valid)\n\n    param = {\n        \"objective\": \"binary\",\n        \"metric\": \"auc\",\n        \"verbosity\": -1,\n        \"boosting_type\": \"gbdt\",\n        \"lambda_l1\": trial.suggest_float(\"lambda_l1\", 1e-8, 10.0, log=True),\n        \"lambda_l2\": trial.suggest_float(\"lambda_l2\", 1e-8, 10.0, log=True),\n        \"num_leaves\": trial.suggest_int(\"num_leaves\", 2, 256),\n        \"feature_fraction\": trial.suggest_float(\"feature_fraction\", 0.4, 1.0),\n        \"bagging_fraction\": trial.suggest_float(\"bagging_fraction\", 0.4, 1.0),\n        \"bagging_freq\": trial.suggest_int(\"bagging_freq\", 1, 7),\n        \"min_child_samples\": trial.suggest_int(\"min_child_samples\", 5, 100),\n    }\n\n    # Add a callback for pruning.\n    pruning_callback = optuna.integration.LightGBMPruningCallback(trial, \"auc\")\n    gbm = lgb.train(\n        param, dtrain, valid_sets=[dvalid], verbose_eval=False, callbacks=[pruning_callback]\n    )\n\n    preds = gbm.predict(x_valid)\n    pred_labels = np.rint(preds)\n    accuracy = accuracy_score(y_valid, pred_labels)\n    return accuracy\n","be0a95df":"study = optuna.create_study(\n        pruner=optuna.pruners.MedianPruner(n_warmup_steps=10), direction=\"maximize\"\n    )\nstudy.optimize(objective, n_trials=300)\n  ","7a9b93f5":"print(\"Number of finished trials: {}\".format(len(study.trials)))\n\nprint(\"Best trial:\")\ntrial = study.best_trial\n\nprint(\"  Value: {}\".format(trial.value))\n\nprint(\"  Params: \")\nfor key, value in trial.params.items():\n    print(\"    {}: {}\".format(key, value))","876d3bbb":"# Visualize the optimization history. See :func:`~optuna.visualization.plot_optimization_history` for the details.\nplot_optimization_history(study)","9f6e296d":"# Visualize the learning curves of the trials. See :func:`~optuna.visualization.plot_intermediate_values` for the details.\nplot_intermediate_values(study)","afcea6ce":"# Visualize high-dimensional parameter relationships. See :func:`~optuna.visualization.plot_parallel_coordinate` for the details.\nplot_parallel_coordinate(study)","e7294e3a":"# Select parameters to visualize.\nplot_parallel_coordinate(study, params=[\"bagging_freq\", \"bagging_fraction\"])","a7d9698b":"# Select parameters to visualize.\nplot_contour(study, params=[\"bagging_freq\", \"bagging_fraction\"])","a1fe067a":"# Visualize individual hyperparameters as slice plot. See :func:`~optuna.visualization.plot_slice` for the details.\nplot_slice(study)","3a951851":"# Select parameters to visualize.\nplot_slice(study, params=[\"bagging_freq\", \"bagging_fraction\"])","abb1925b":"# Visualize parameter importances. See :func:`~optuna.visualization.plot_param_importances` for the details.\nplot_param_importances(study)","f810c8d8":"# Visualize empirical distribution function. See :func:`~optuna.visualization.plot_edf` for the details.\nplot_edf(study)","b26d39ba":"def create_model(trial):\n    # We define our MLP.\n    n_layers = trial.suggest_int(\"n_layers\", 1, 3)\n    model = Sequential()\n    for i in range(n_layers):\n        num_hidden = trial.suggest_int(\"n_units_l{}\".format(i), 4, 128, log=True)\n        model.add(Dense(num_hidden, activation=\"relu\"))\n        dropout = trial.suggest_float(\"dropout_l{}\".format(i), 0.2, 0.5)\n        model.add(Dropout(rate=dropout))\n    model.add(Dense(2, activation=\"softmax\"))\n\n#     model.add(Dense(116, activation=tf.nn.relu))\n#     model.add(Dense(58, activation=tf.nn.relu))\n#     model.add(Dense(2, activation=tf.nn.softmax))\n\n    \n    # We compile our model with a sampled learning rate.\n    lr = trial.suggest_float(\"lr\", 1e-5, 1e-1, log=True)\n    model.compile(\n        loss=\"categorical_crossentropy\",\n        optimizer=keras.optimizers.RMSprop(lr=lr),\n        metrics=[\"accuracy\"],\n    )\n    return model\n    ","3a16e3c3":"def create_model2(trial):\n\n    # Hyperparameters to be tuned by Optuna.\n    lr = trial.suggest_float(\"lr\", 1e-4, 1e-1, log=True)\n    momentum = trial.suggest_float(\"momentum\", 0.0, 1.0)\n    units = trial.suggest_categorical(\"units\", [32, 64, 128, 256, 512])\n\n    # Compose neural network with one hidden layer.\n    model = tf.keras.Sequential()\n    #model.add(tf.keras.layers.Flatten())\n    model.add(tf.keras.layers.Dense(units=116, activation=tf.nn.relu))\n    model.add(tf.keras.layers.Dense(units=58, activation=tf.nn.relu))\n    model.add(tf.keras.layers.Dense(2, activation=tf.nn.softmax))\n\n    # Compile model.\n    model.compile(\n        optimizer=tf.keras.optimizers.SGD(lr=lr, momentum=momentum, nesterov=True),\n        loss=\"sparse_categorical_crossentropy\",\n        metrics=[\"accuracy\"],\n    )\n\n    return model","dfbf560c":"def objective(trial):\n    # Clear clutter from previous session graphs.\n    keras.backend.clear_session()\n    \n    # Dataset Loading\n    x_train_ = x_train.values.astype('float32') \/ 255\n    x_valid_ = x_valid.values.astype('float32') \/ 255\n    \n    y_train_ = keras.utils.to_categorical(y_train.values, 2)\n    y_valid_ = keras.utils.to_categorical(y_valid.values, 2)\n    \n    # Generate our trial model.\n    model = create_model(trial)\n    \n    # Fit the model on the training data.\n    # The KerasPruningCallback checks for pruning condition every epoch.\n    model.fit(\n        x_train_,\n        y_train_,\n        batch_size=32,\n        callbacks=[\n            tf.keras.callbacks.EarlyStopping(patience=3),\n            KerasPruningCallback(trial, \"val_accuracy\"),\n        ],\n        epochs=20,\n        validation_data=(x_valid_, y_valid_),\n        verbose=1,\n    )\n    \n    # Evaluate the model accuracy on the validation set.\n    score = model.evaluate(x_valid_, y_valid_, verbose=0)\n    return score[1]","92fce36c":"if __name__ == \"__main__\":\n    warnings.warn(\n        \"Recent Keras release (2.4.0) simply redirects all APIs \"\n        \"in the standalone keras package to point to tf.keras. \"\n        \"There is now only one Keras: tf.keras. \"\n        \"There may be some breaking changes for some workflows by upgrading to keras 2.4.0. \"\n        \"Test before upgrading. \"\n        \"REF:https:\/\/github.com\/keras-team\/keras\/releases\/tag\/2.4.0\"\n    )\n    study = optuna.create_study(direction=\"maximize\", pruner=optuna.pruners.MedianPruner())\n    study.optimize(objective, n_trials=100)","f9647c26":"pruned_trials = [t for t in study.trials if t.state == optuna.trial.TrialState.PRUNED]\ncomplete_trials = [t for t in study.trials if t.state == optuna.trial.TrialState.COMPLETE]\n\nprint(\"Study statistics: \")\nprint(\"  Number of finished trials: \", len(study.trials))\nprint(\"  Number of pruned trials: \", len(pruned_trials))\nprint(\"  Number of complete trials: \", len(complete_trials))\n\nprint(\"Best trial:\")\ntrial = study.best_trial\n\nprint(\"  Value: \", trial.value)\n\nprint(\"  Params: \")\nfor key, value in trial.params.items():\n    print(\"    {}: {}\".format(key, value))","14fcaf5a":"plot_optimization_history(study)","7fbe15cf":"# Visualize the learning curves of the trials. See :func:`~optuna.visualization.plot_intermediate_values` for the details.\nplot_intermediate_values(study)","1d12d256":"# Visualize high-dimensional parameter relationships. See :func:`~optuna.visualization.plot_parallel_coordinate` for the details.\nplot_parallel_coordinate(study)","d0e4b236":"# Visualize individual hyperparameters as slice plot. See :func:`~optuna.visualization.plot_slice` for the details.\nplot_slice(study)","151f7e87":"# Visualize parameter importances. See :func:`~optuna.visualization.plot_param_importances` for the details.\nplot_param_importances(study)","d5e1c13f":"# Visualize empirical distribution function. See :func:`~optuna.visualization.plot_edf` for the details.\nplot_edf(study)","3d3e4a3b":"# Data Standardize and Normalize","dea58c91":"### xgboost classifier","91d2ddcb":"### CatBoost classifier","5d1057ca":"# Feature Engineering","83606523":"# Using Automatic Hyperparameter Tuning(Optuna)","47eb8f33":"# Using Optuna with Keras","8c5542ff":"### lightgbm classifier","8b576fb2":"# Feature and Label data","59b7f69e":"# Shaffle dataset","3ce82337":"# Train and Valid"}}