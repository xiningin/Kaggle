{"cell_type":{"48f583d7":"code","e9100858":"code","f48cb7b7":"code","fb75f0d1":"code","be9ab606":"code","a8931c9a":"code","fdcb35e9":"code","46bb39ff":"code","5dd88669":"code","dd502fae":"code","c6fa59a4":"code","63465270":"code","66c3b24f":"code","4a435346":"code","7c82e399":"code","73de5df9":"code","eaf79624":"code","eabb4746":"code","cd89d4a4":"code","4bcc32d1":"code","4e9a5a34":"code","105200f5":"code","f02c72fc":"markdown","1420a9fd":"markdown","094b22c1":"markdown","bb9b9e99":"markdown","261b2bd7":"markdown","5371a78d":"markdown","d37270b3":"markdown","47fd210e":"markdown","4e87bfa4":"markdown","6f80fa75":"markdown","63de6ed4":"markdown","228bb201":"markdown","514765fe":"markdown","705f049d":"markdown","63b08cb6":"markdown","b14225ac":"markdown","39f4d26a":"markdown","8d42ef6c":"markdown","9545df0a":"markdown"},"source":{"48f583d7":"import numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport math","e9100858":"data = pd.read_csv(\"..\/input\/home-data-for-ml-course\/train.csv\")","f48cb7b7":"data.head()","fb75f0d1":"data.describe()","be9ab606":"corr = data.corr()\ncorr.style.background_gradient(cmap='coolwarm')","a8931c9a":"endog = data['SalePrice']\nexog = sm.add_constant(data[['OverallQual','YearBuilt','YearRemodAdd','TotalBsmtSF','1stFlrSF','GrLivArea','FullBath','TotRmsAbvGrd','GarageCars','GarageArea']])\nprint(exog)","fdcb35e9":"X = exog.to_numpy()\ny = endog.to_numpy()","46bb39ff":"xt = np.transpose(X)\nprint(xt)\n","5dd88669":"xt_X = np.matmul(xt,X)\nprint(xt_X)","dd502fae":"xt_X_inv = np.linalg.inv(xt_X)\nprint(xt_X_inv)","c6fa59a4":"xt_X_inv_xt = np.matmul(xt_X_inv,xt)\nprint(xt_X_inv_xt)","63465270":"beta = np.matmul(xt_X_inv_xt,y)\nprint(beta)","66c3b24f":"mod = sm.OLS(endog,exog)\nresults = mod.fit()\nprint(results.summary())","4a435346":"def RSE(y_true, y_predicted):\n   \n    y_true = np.array(y_true)\n    y_predicted = np.array(y_predicted)\n    RSS = np.sum(np.square(y_true - y_predicted))\n\n    rse = math.sqrt(RSS \/ (len(y_true) - 2))\n    return rse","7c82e399":"yp= results.predict()\nypa = np.array(yp)\nyta = data['SalePrice']\neterms =yta-ypa\n\n\ndata1 = pd.DataFrame(eterms)\ndata1['SalePrice'].hist(bins=10)","73de5df9":"rse= RSE(data['SalePrice'],results.predict())\nprint(rse)","eaf79624":"from sklearn import linear_model\nX = data[['OverallQual','YearBuilt','YearRemodAdd','TotalBsmtSF','1stFlrSF','GrLivArea','FullBath','TotRmsAbvGrd','GarageCars','GarageArea']]\ny = data['SalePrice']\n\nlm = linear_model.LinearRegression()\nmodel = lm.fit(X,y)\nlm.coef_","eabb4746":"lm.intercept_","cd89d4a4":"test = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')","4bcc32d1":"X_test = data[['OverallQual','YearBuilt','YearRemodAdd','TotalBsmtSF','1stFlrSF','GrLivArea','FullBath','TotRmsAbvGrd','GarageCars','GarageArea']]","4e9a5a34":"y_pred = lm.predict(X_test)","105200f5":"y_pred","f02c72fc":"* Ordinary Least Square method through Matrix operation. \n* Ordinary Least Square method from StatsModels\n* Gradient Descent Method from Scikit-Learn","1420a9fd":"Multiplying xt_X_inv with xt using np.matmul(xt_X_inv,xt)","094b22c1":"# 1.Ordinary Least Square method through Matrix operation.","bb9b9e99":"3.Gradient Descent Method from Scikit-Learn","261b2bd7":"Calculating Residual Standard Error","5371a78d":"intiating by importing libraries","d37270b3":"Finally getting beta by multiplying xt_X_inv_xt and y","47fd210e":"2.Ordinary Least Square method from StatsModels","4e87bfa4":"Loading Data","6f80fa75":"Multiplying xt (X Transpose) with X using np.matmul(xt,X)","63de6ed4":"Predicting the result for test data","228bb201":"end","514765fe":"# 3 ways of implementing Multiple Linear Regression are-","705f049d":"Checking Correlation","63b08cb6":"Taking transpose of X using np.transpose(X)","b14225ac":"Data Preprocessing\n\n\n* input vector - exog\n* output vector - endog","39f4d26a":"Input Vectors\n\nLets choose input vectors on the basis of correlation.\n\n>  sm.add_constant() in following cell adds constant unit vector as a coefficient for beta0 or theta0 or intercept","8d42ef6c":"> Predicting House Prices using Multiple Linear Regression","9545df0a":"Taking Inverse of xt_x using np.linalg.inv(xt_x)"}}