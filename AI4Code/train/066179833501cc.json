{"cell_type":{"74341088":"code","5220a5e6":"code","1a79f6ec":"code","5abbc393":"code","23b30f3b":"code","d15837f7":"code","834c854a":"code","1bd44208":"code","f0ac3963":"code","fcc3f456":"code","fe8d169b":"code","0bea778e":"code","081d76f7":"code","ec026b04":"code","b44d5f2b":"code","5022512b":"code","3db3fff7":"code","75b2ce8e":"code","08a52fb3":"code","e13cd4f7":"code","15137c34":"code","d4dd5229":"code","f90759b6":"code","36b8feae":"code","2012e7b1":"code","5da05e14":"code","2876cd24":"code","45adcd61":"code","5a04bb66":"code","11b6f49e":"code","982603b7":"code","0d3294b3":"code","2a3f62db":"markdown","05cfb193":"markdown","695083b1":"markdown","cd0c83b8":"markdown","ab82e7d2":"markdown","60df2d7e":"markdown","c99a0e76":"markdown","2db1486b":"markdown","c8cc7c12":"markdown","8437672b":"markdown"},"source":{"74341088":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5220a5e6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score , mean_squared_error,make_scorer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVR\nimport random\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\nimport tensorflow as tf","1a79f6ec":"diamond = pd.read_csv(os.path.join(dirname, filename),index_col = 'Unnamed: 0')","5abbc393":"diamond.head(5)","23b30f3b":"diamond.shape","d15837f7":"# Missing values\ndiamond.isna().sum()","834c854a":"diamond.duplicated().sum()","1bd44208":"diamond = diamond.loc[~diamond.duplicated(),:]","f0ac3963":"diamond.info()","fcc3f456":"diamond.describe()","fe8d169b":"zero_values = (diamond.loc[:,'x'] == 0) | (diamond.loc[:,'y'] == 0)| (diamond.loc[:,'z'] == 0)\nzero_values.sum()","0bea778e":"diamond = diamond.loc[~zero_values]","081d76f7":"\nfig = px.histogram(diamond, x=\"price\",\n                   hover_data=diamond.columns,)\nfig.show()","ec026b04":"fig = px.histogram(diamond, x=\"carat\",\n                   hover_data=diamond.columns)\nfig.show()","b44d5f2b":"plt.figure(figsize = (20,6))\n\n\nsns.factorplot(x='color', data=diamond , kind='count',aspect=3)\n\n\n\nplt.show()","5022512b":"plt.figure(figsize = (12,6))\n\nsns.factorplot(x='cut', data=diamond , kind='count',aspect=3)\n \nplt.show()","3db3fff7":"plt.figure(figsize = (12,6))\n\nsns.factorplot(x='clarity', data=diamond , kind='count',aspect=3)\n \nplt.show()","75b2ce8e":"lst_features = list(diamond.columns)\ndrop_f = ['price','cut','color','clarity']\n\nfor index in drop_f:\n  lst_features.remove(index)\n\nfig = go.Figure()\n\nfor feature in lst_features:\n\n   fig.add_trace(go.Box(y=diamond.loc[:,feature],name = feature))\n\n\nfig.show()","08a52fb3":"fig = px.scatter(diamond, x=\"carat\", y=\"price\",color = 'color')\nfig.show()","e13cd4f7":"fig = px.scatter(diamond, x=\"carat\", y=\"price\",color = 'clarity')\nfig.show()","15137c34":"fig = px.box(diamond, x=\"cut\", y=\"price\",color = 'color')\nfig.show()","d4dd5229":"plt.figure(figsize = (12,6))\n\nsns.heatmap(diamond.corr(),annot = True,linewidths=3,linecolor='black',cbar = False)\n\nplt.show()","f90759b6":"diamond = pd.get_dummies(data = diamond,drop_first = True)","36b8feae":"diamond.head()","2012e7b1":"X = diamond.drop('price',axis = 1)\ny = diamond.loc[:,'price']\nX_train,X_test, y_train ,y_test = train_test_split(X,y,test_size = .2, random_state = 42)\n\nscaler = StandardScaler()\nX_train_scaled = pd.DataFrame(scaler.fit_transform(X_train.loc[:,['carat','depth','table','x','y','z']]),columns = ['carat','depth','table','x','y','z'],index = X_train.index)\nX_test_scaled = pd.DataFrame(scaler.transform(X_test.loc[:,['carat','depth','table','x','y','z']]),columns = ['carat','depth','table','x','y','z'], index = X_test.index)\n\nX_train_scale_final = X_train.copy()\nX_test_scale_final = X_test.copy()\n\nX_train_scale_final.loc[:,['carat','depth','table','x','y','z']] = X_train_scaled.loc[:,['carat','depth','table','x','y','z']]\nX_test_scale_final.loc[:,['carat','depth','table','x','y','z']] = X_test_scaled.loc[:,['carat','depth','table','x','y','z']]","5da05e14":"lr = LinearRegression()\nlr.fit(X_train_scale_final,y_train)\ny_pred = lr.predict(X_test_scale_final)\n\nmse = (mean_squared_error(y_test,y_pred)) \n\nrmse = mse**.5\nrmse","2876cd24":"model = Sequential()\n\nmodel.add(Dense(256,activation='relu',input_dim= X_train_scale_final.shape[1]))\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(1,activation='linear'))\n","45adcd61":"model.summary()","5a04bb66":"model.compile(optimizer='adam', loss = 'mse')","11b6f49e":"model.fit(x = X_train_scale_final,y = y_train,validation_data=(X_test_scale_final,y_test),epochs = 200,batch_size=512)","982603b7":"y_pred = model.predict(X_test_scale_final)","0d3294b3":"mean_squared_error(y_test,y_pred) ** 0.5","2a3f62db":"Diamonds with color D are most common for character sizes <1.3\nD colors are rare so it is normal to find only a few stone with this color for large stones\nwe can see that the price depends on the weight of the stone (carat)\nLarger diamonds> 2 carat are usually medium H, J colors","05cfb193":"RMSE means that on average we are wrong by 534 dollars so it's a good performance ","695083b1":"Check if there are missing values","cd0c83b8":"Import","ab82e7d2":"RMSE means that on average we are wrong by 1128 dollars","60df2d7e":"Scaling of data , We fit_transform the train and just transform the test to avoid data linkage","c99a0e76":"There are 146 duplicated row to drop","2db1486b":"Linear Regression","c8cc7c12":" we note that there are some rows with x,y,z = 0 \n it's technically not possible we display and drop this row","8437672b":"\nwe can see that the cheapest diamonds are those with a low clarity (I1)\nwe see that some diamonds with very high clarity (IF) even being light 1 carat are worth in the 20k dollars\nhigh quality diamonds> 2.5 carats are diamonds with low clarity"}}