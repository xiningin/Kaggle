{"cell_type":{"113acad9":"code","685e0a32":"code","3c6676bb":"code","18a7aab5":"code","5e53b585":"code","4c276206":"code","535153fc":"code","7f5be311":"code","8344e315":"code","9d65b821":"code","2afa4f6d":"code","5f0dd4a5":"code","f5a5b8e1":"code","ff546f53":"code","90d761ea":"code","601232a8":"code","545d90a3":"code","8b0e2641":"code","43f46c40":"code","a3b3eccb":"code","5c726a2d":"code","766c03bf":"code","50944659":"code","8fd5a664":"code","3bfe3e44":"code","c67d1abe":"code","b61a1ea1":"code","6cbac809":"code","1811365c":"code","88666097":"code","e67b0826":"code","749932c1":"code","f53eca79":"code","9f95768f":"code","32ee85c2":"code","41d83092":"code","5762b8e2":"code","c370e0f6":"markdown","73b665fe":"markdown","619943fc":"markdown","5d93a592":"markdown","b1283e4b":"markdown","297e39a1":"markdown","e63881f5":"markdown","a805e3b1":"markdown","ef707e15":"markdown","b6af2efe":"markdown","fb9c50f2":"markdown","a28401e4":"markdown","753a2e4a":"markdown","84b3854a":"markdown","8b0e2ff5":"markdown","e4bb9caf":"markdown","2944f3eb":"markdown","133d75cf":"markdown","4f0c72a3":"markdown"},"source":{"113acad9":"# supers warnings\nimport warnings\nwarnings.filterwarnings('ignore')","685e0a32":"import pandas as pd\nimport numpy as np","3c6676bb":"# Importing Housing.csv\nhousing = pd.read_csv('..\/input\/housing\/Housing.csv')","18a7aab5":"# Looking at the First rows\nhousing.head()","5e53b585":"# List of variables to map\nvarlist = ['mainroad','guestroom', 'basement' , 'hotwaterheating', 'airconditioning','prefarea']\n\n#Defining the map function\ndef binary_map(x):\n    return x.map({'yes': 1 , \"no\": 0})\n\n#Applying the functions to the housing list\nhousing[varlist] = housing[varlist].apply(binary_map)","4c276206":"housing.head()","535153fc":"status = pd.get_dummies(housing['furnishingstatus'])\nstatus.head()","7f5be311":"# lets drop the first column from status df using drop_first = True\nstatus = pd.get_dummies(housing['furnishingstatus'], drop_first = True)\n\n# Add the results to the original housing data frame\nhousing = pd.concat([housing, status], axis=1)\n\n#lets see the head of our data frame\nhousing.head()","8344e315":"# droping furnishingstatus\nhousing.drop(['furnishingstatus'], axis=1, inplace = True)\n\nhousing.head()","9d65b821":"from sklearn.model_selection import train_test_split\n\ndf_train, df_test = train_test_split(housing, train_size= 0.7, test_size= 0.3, random_state=100)","2afa4f6d":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","5f0dd4a5":"# Apply scaler() to all the columns except the yes=no and dummy variables\nnum_vars = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking', 'price']\n\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])\n\ndf_train.head()","f5a5b8e1":"y_train = df_train.pop('price')\nX_train = df_train","ff546f53":"# importing RFE and Linear Regression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression","90d761ea":"# Running RFE with the output number of the variables equal to 10\nlm = LinearRegression()\nlm.fit(X_train, y_train)\n\nrfe = RFE(lm, 10)\nrfe = rfe.fit(X_train, y_train)","601232a8":"list(zip(X_train.columns, rfe.support_, rfe.ranking_))","545d90a3":"col = X_train.columns[rfe.support_]\ncol","8b0e2641":"X_train.columns[~rfe.support_]","43f46c40":"#creating X_test dataframe with RFE selected variables\nX_train_rfe = X_train[col]","a3b3eccb":"#adding a constant variable\nimport statsmodels.api as sm\nX_train_rfe = sm.add_constant(X_train_rfe)","5c726a2d":"lm = sm.OLS(y_train,X_train_rfe).fit() #Running the linear model","766c03bf":"#Lets see the summary of our linear model\nprint(lm.summary())","50944659":"X_train_new = X_train_rfe.drop(['bedrooms'], axis = 1)","8fd5a664":"#Adding a constant variable\nimport statsmodels.api as sm\nX_train_lm = sm.add_constant(X_train_new)","3bfe3e44":"lm = sm.OLS(y_train, X_train_new).fit() #running the linear model","c67d1abe":"print(lm.summary())","b61a1ea1":"X_train_new.columns","6cbac809":"X_train_new = X_train_new.drop(['const'],axis=1)","1811365c":"# calculate the VIFs for the new model\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nvif = pd.DataFrame()\nX = X_train_new\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'],2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","88666097":"y_train_price = lm.predict(X_train_lm)","e67b0826":"# importing the required libraries for plots\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","749932c1":"# plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_price), bins=20)\nfig.suptitle('Error Terms', fontsize =20)\nplt.xlabel('Errors',fontsize=10)","f53eca79":"num_vars = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking', 'price']\n\ndf_test[num_vars] = scaler.transform(df_test[num_vars])","9f95768f":"y_test = df_test.pop('price')\nX_test = df_test","32ee85c2":"# let's use our model to make predicitons\n\n# creating X_tes_new dataframe by dropping variables from X_test\nX_test_new = X_test[X_train_new.columns]\n\n#Adding a constant variable\nX_test_new = sm.add_constant(X_test_new)","41d83092":"# Making predictions\ny_pred = lm.predict(X_test_new)","5762b8e2":"#plotting y_test and y_pred to understand the spread\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)             #plot heading\nplt.xlabel('y_test', fontsize=18)                         # X-label\nplt.ylabel('y_pred', fontsize=16)                         # y-label","c370e0f6":"**ModelEvaluation**","73b665fe":"**Building our Model**","619943fc":"**Buildong model using for the detailed statistics**","5d93a592":"**Making Predicitons**","b1283e4b":"**Importing and Understanding Data**","297e39a1":"**Model Selection using RFE(Housing case study)**","e63881f5":"Recursive feature elimination","a805e3b1":"This time we will be using LinearRegression Function from Scikit Learn for its compatibility with RFE","ef707e15":"**Rebuilding the model**","b6af2efe":"**Splitting the Data into the Training and Testing Sets**","fb9c50f2":"**Residual Analysis of the train data**","a28401e4":"**Rescaling the Features**","753a2e4a":"**Dividing into X and Y sets for the model building**","84b3854a":"**Dividing into X_test and y_test**","8b0e2ff5":"**RFE**","e4bb9caf":"**Dummy Variables**","2944f3eb":"- 00 will corresponds to furnished\n- 01 will corresponds to unfurnished\n- 10 will corresponds to semi-furnished","133d75cf":"**Data Preparation**","4f0c72a3":"**Appling the scaling on the test sets**"}}