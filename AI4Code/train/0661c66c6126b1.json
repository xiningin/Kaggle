{"cell_type":{"ce5b70fb":"code","360acf6e":"code","e7b8b7d1":"code","b2c217a4":"code","e2e5d4d9":"code","bf2932a0":"code","aed885ad":"code","3ad55dc1":"code","6f2550b6":"code","67dd8f94":"code","dd18088f":"code","7eed3498":"code","d3171456":"code","e1528e25":"code","67b0f191":"code","3e364c72":"code","886d83cb":"code","3549a49e":"code","2cdbee9c":"code","26381760":"markdown"},"source":{"ce5b70fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","360acf6e":"import matplotlib as plt\n%matplotlib inline\nimport seaborn as sns\n","e7b8b7d1":"# we get the data we will use\ndf=pd.read_csv(\"..\/input\/Ecommerce\")\ndf.head()","b2c217a4":"# Firstly I want to get more information about the data\ndf.describe() # I get all the statistical information about the numerical columns in the data","e2e5d4d9":"df.info() #It seem that the data has three nonnumerical data and five numerical data","bf2932a0":"#I want to visualize the data in order to get some relations and better insights about the data\nsns.pairplot(df)","aed885ad":"#It seems that there is a correlation between \"Time on App\" and \"Yearly Amount Spent\"\n#I want to compare them closely\nsns.jointplot(x=\"Time on Website\", y=\"Yearly Amount Spent\", data=df)","3ad55dc1":"sns.jointplot(x=\"Time on App\", y=\"Yearly Amount Spent\", data=df)\n#There is better correlation between time on app and yearly amount spent than between time in website and yearly amount spent","6f2550b6":"#But Length of Membership correlates most with yearly amount spent\nsns.lmplot(x=\"Length of Membership\", y=\"Yearly Amount Spent\", data=df)","67dd8f94":"#After learning some details about the data I will use linear regression model for machine learning\n# First of all I will split the data into training and testing sets.\n# I set a variable X equal to the numerical features of the customers and a variable y equal to the \"Yearly Amount Spent\" column\nX=df[[\"Avg. Session Length\",\"Time on App\",\"Time on Website\",\"Length of Membership\"]]\ny=df[\"Yearly Amount Spent\"] #I want to predict yearly amount spend ","dd18088f":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=101)# I will use %30 of the data for the test size\n","7eed3498":"from sklearn.linear_model import LinearRegression\nlm=LinearRegression()\nlm.fit(X_train,y_train)#I implement Linear Regression for the training set of the data","d3171456":"#In order to evaluate the performance \npredictions=lm.predict(X_test) #here we predict the y_test values from X_test data according to the our trained Linear Regression data\npredictions","e1528e25":"# here I will visualize the real test values(y_test) versus the predicted values.\nsns.scatterplot(y_test,predictions)\n#It seems that our linear regression model predict ver well\n","67b0f191":"# I will evaluate our model performance by calculating the residual sum of squares and the explained variance score\nfrom sklearn import metrics\nprint(\"MAE:\",metrics.mean_absolute_error(y_test,predictions))\nprint (\"MSE:\",metrics.mean_squared_error(y_test,predictions))\nprint(\"RMSE:\",np.sqrt(metrics.mean_squared_error(y_test,predictions)))","3e364c72":"#Evaluation of  the explained variance score (R^2)\nmetrics.explained_variance_score(y_test,predictions) #This shows our model predict %99 of the variance","886d83cb":"sns.distplot(y_test-predictions,bins=50) #this figure also proves that our model fits very good\n#There is no huge differences between our predictions and actual y data","3549a49e":"cdf=pd.DataFrame(lm.coef_,X.columns,columns=[\"Coefficients\"])\ncdf","2cdbee9c":"#This shows that one unit increase in Average session length causes 25 dolars more yearly spent if all other features fixed\n#one unit increase in time on app causes 38 dolar spent money yearly\n# one unit increase in time on website causes 19 cent increase spent money yearly\n# one unit increase in length of membership causes 19 cent increase spent money yearly\n","26381760":"<div class=\"alert alert-success alertsuccess\" style=\"margin-top: 20px\">\n<font size = 3><strong>Linear Regression:<\/strong><\/font>\n<br>\n<br>\n    As you know, <b>Linear regression<\/b> finds a function that relates a continuous dependent variable, <b>y<\/b>, to some predictors (independent variables $x_1$, $x_2$, etc.). For example, Simple linear regression assumes a function of the form:\n<br><br>\n$$\ny = \\theta_0 + \\theta_1  x_1 + \\theta_2  x_2 + \\cdots\n$$\n<br>\nand finds the values of parameters $\\theta_0, \\theta_1, \\theta_2$, etc, where the term $\\theta_0$ is the \"intercept\". It can be generally shown as:\n<br><br>\n$$\n\u210e_\\theta(\ud835\udc65) = \\theta^TX\n$$\n<p><\/p>\n\n<\/div>"}}