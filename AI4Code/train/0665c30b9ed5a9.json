{"cell_type":{"38ea6f0c":"code","2aef004e":"code","63389d1e":"code","75a783d1":"code","2405c439":"code","c299f6a5":"code","60445502":"code","52ffe106":"code","e9ee6832":"code","2e43a20a":"code","e78872a3":"code","540a4d69":"markdown","ca659fc0":"markdown","5fa02ee5":"markdown","8ff57dd5":"markdown","ada1a55c":"markdown","33afd322":"markdown","e0e299a5":"markdown","30376790":"markdown","684d3c1e":"markdown","305cbcd4":"markdown"},"source":{"38ea6f0c":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np","2aef004e":"data=pd.read_csv('..\/input\/glass\/glass.csv')","63389d1e":"data.head(5)\n","75a783d1":"x.shape","2405c439":"y.shape","c299f6a5":"x = data.iloc[:,0:9]\ny = data.iloc[:,9]","60445502":"sample_data = StandardScaler().fit_transform(x)","52ffe106":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\n\npct = pca.fit_transform(x)\n\nprincipal_df = pd.DataFrame(pct,columns=['pc1','pc2'])\n\nfinaldf= pd.concat([principal_df,data[['Type']]],axis=1)","e9ee6832":"import seaborn as sn\nsn.FacetGrid(finaldf, hue=\"Type\", size=6).map(plt.scatter, 'pc1', 'pc2').add_legend()\nplt.show()","2e43a20a":"\npca.n_components = 9\npca_data = pca.fit_transform(sample_data)\n\npercentage_var_explained = pca.explained_variance_ \/ np.sum(pca.explained_variance_);\n\ncum_var_explained = np.cumsum(percentage_var_explained)\n\n# Plot the PCA spectrum\nplt.figure(1, figsize=(6, 4))\n\nplt.clf()\nplt.plot(cum_var_explained, linewidth=2)\nplt.axis('tight')\nplt.grid()\nplt.xlabel('n_components')\nplt.ylabel('Cumulative_explained_variance')\nplt.show()\n","e78872a3":"# TSNE\n\nfrom sklearn.manifold import TSNE\n\n# Picking the top 1000 points as TSNE takes a lot of time for 15K points\ndata_1000 = sample_data[0:214,:]\nlabels_1000 = y[0:214]\n\nmodel = TSNE(n_components=2, random_state=0,perplexity=30,n_iter=5000)\n# configuring the parameteres\n# the number of components = 2\n# default perplexity = 30\n# default learning rate = 200\n# default Maximum number of iterations for the optimization = 1000\n\ntsne_data = model.fit_transform(data_1000)\n\n\n# creating a new data frame which help us in ploting the result data\ntsne_data = np.vstack((tsne_data.T, labels_1000)).T\ntsne_df = pd.DataFrame(data=tsne_data, columns=(\"Dim_1\", \"Dim_2\", \"Type\"))\n\n# Ploting the result of tsne\nsn.FacetGrid(tsne_df, hue=\"Type\", size=6).map(plt.scatter, 'Dim_1', 'Dim_2').add_legend()\nplt.show()","540a4d69":"# (t-SNE) t-Distributed Stochastic Neighbor Embedding \n* t-SNE is a non-linear dimensionality reduction algorithm used for exploring high-dimensional data. It maps multi-dimensional data to two or more dimensions suitable for human observation. With help of the t-SNE algorithms, you may have to plot fewer exploratory data analysis plots next time you work with high dimensional data.\n* t-Distributed Stochastic Neighbor Embedding (t-SNE) is a non-linear technique for dimensionality reduction that is particularly well suited for the visualization of high-dimensional datasets. It is extensively applied in image processing, NLP, genomic data and speech processing. To keep things simple, here\u2019s a brief overview of working of t-SNE\n                                                                                                \n                                                                                                ","ca659fc0":"# Context\nThis is a Glass Identification Data Set from UCI. It contains 10 attributes including id. The response is glass type(discrete 7 values)\n\n# Content\nAttribute Information:\n\nId number: 1 to 214 (removed from CSV file)\nRI: refractive index\nNa: Sodium (unit measurement: weight percent in corresponding oxide, as are attributes 4-10)\nMg: Magnesium\nAl: Aluminum\nSi: Silicon\nK: Potassium\nCa: Calcium\nBa: Barium\nFe: Iron\n\nType of glass: (class attribute) \n* -- 1 buildingwindowsfloatprocessed -- 2 buildingwindowsnonfloatprocessed -- 3 vehiclewindowsfloatprocessed \n* -- 4 vehiclewindowsnonfloatprocessed (none in this database) \n* -- 5 containers \n* -- 6 tableware \n* -- 7 headlamps","5fa02ee5":"# PCA for dimensionality redcution (not for visualization)","8ff57dd5":"# Applying PCA\nIt is only a matter of three lines of code to perform PCA using Python's Scikit-Learn library. The PCA class is used for this purpose. PCA depends only upon the feature set and not the label data. Therefore, PCA can be considered as an unsupervised machine learning technique. Performing PCA using Scikit-Learn is a two-step process:\n\n1. Initialize the PCA class by passing the number of components to the constructor.\n2. Call the fit and then transform methods by passing the feature set to these methods. The transform method returns the specified number of principal components.","ada1a55c":"# Standardization of the data\u00b6\nIf you\u2019re familiar with data analysis and processing, you know that missing out on standardization will probably result in a biased outcome. Standardization is all about scaling your data in such a way that all the variables and their values lie within a similar range.We will perform standard scalar normalization to normalize our feature set. To do this, execute the following code","33afd322":"# Importing Libraries\u00b6\n","e0e299a5":"# Let's take a look at what our dataset looks like:\u00b6\n","30376790":"# Preprocessing\nThe first preprocessing step is to divide the dataset into a feature set and corresponding labels. The following script performs this task: The script above stores the feature sets into the X variable and the series of corresponding labels in to the y variable.","684d3c1e":"# **Principal Component Analysis (PCA)**\nPCA is a dimensionality-reduction technique that is often used to transform a high-dimensional dataset into a smaller-dimensional subspace prior to running a machine learning algorithm on the data\n## So how can this algorithm help us? What are the uses of this algorithm?\n* Identifies the most relevant directions of variance in the data.\n* Helps capture the most \u201cimportant\u201d features.\n* Easier to make computations on the dataset after the dimension reductions since we have fewer data to deal with.\n* Visualization of the data.\n\n## So what are the steps to make PCA work? How do we apply the magic?\n1. Take the dataset you want to apply the algorithm on.\n2. Calculate the covariance matrix.\n3. Calculate the eigenvectors and their eigenvalues.\n4. Sort the eigenvectors according to their eigenvalues in descending order.\n5. Choose the first K eigenvectors (where k is the dimension we\u2019d like to end up with).\n6. Build new reduced dataset.","305cbcd4":"# Importing Dataset\u00b6\n"}}