{"cell_type":{"d73f926e":"code","1e3895f1":"code","2c45f410":"code","3da6b6ac":"code","1608391e":"code","f8b0ad93":"code","93120d81":"code","9e74a37e":"code","9ddced27":"code","592d7014":"code","35490c01":"code","7744be55":"code","ae67856e":"code","75917c04":"code","b73e2ecc":"code","c965ae9b":"code","209cace8":"code","4d9fd0c9":"code","8947f0d4":"code","9cbe54e2":"code","aedd3438":"code","7837fb22":"code","2647c523":"code","af206f38":"code","8775db2e":"code","a22342c5":"code","22120b2d":"code","09ded6c4":"code","7fd76242":"code","0a83ec6b":"code","0f01db11":"code","cb45604f":"code","e5c971ea":"code","5ed37b1e":"code","428a3f11":"code","66d88a6a":"code","4a5c6a94":"code","39911918":"code","d7de2ec1":"code","fec02ed1":"code","8ec853af":"code","767f25da":"code","b12e9333":"markdown","3c9b7a78":"markdown","214913c6":"markdown","d2284421":"markdown","6add3437":"markdown","fe4b0d67":"markdown","3c402dca":"markdown","fcf3362d":"markdown","e23983da":"markdown","6d36713c":"markdown","15cf4ee7":"markdown","241bd896":"markdown","ac0411c9":"markdown","0c9d2deb":"markdown"},"source":{"d73f926e":"\n\nimport numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","1e3895f1":"df = pd.read_csv(\"\/kaggle\/input\/imo-scores\/imo_results.csv\")\ndf","2c45f410":"df.info()","3da6b6ac":"## here we don't require all columns we like first name , last name is useless for us so don't consider this two columns\n\ndf = df.drop(['firstname','lastname'],axis=1)\ndf","1608391e":"df['award'].unique()","f8b0ad93":"## to fill nan values first we have to identify range of each medals\nimport matplotlib.pyplot as plt\nimport seaborn as sns","93120d81":"## let's draw scatter plot for all 3 award categories\ndef getAwardData(df,a):\n    return df[df['award']==a]\n\ngold = df[df['award']==\"Gold medal\"]\nsilver = df[df['award']==\"Silver medal\"]\nbronze = df[df['award']==\"Bronze medal\"]\nhonor_mention = df[df['award']==\"Honourable mention\"]\nnan_award = df[pd.isnull(df['award'])]\n\n# let's draw\nplt.scatter(gold['rank'],gold['total'],color=\"g\",label=\"gold\")\nplt.scatter(silver['rank'],silver['total'],color=\"y\",label=\"silver\")\nplt.scatter(bronze['rank'],bronze['total'],color=\"b\",label=\"bronze\")\nplt.scatter(honor_mention['rank'],honor_mention['total'],color=\"orange\",label=\"Honour mention\")\n# plt.scatter(nan_award[\"rank\"],nan_award[\"total\"],color=\"r\",label=\"nan vals\")\n# let's draw nan values\nplt.legend()\nplt.show()","9e74a37e":"plt.scatter(bronze['rank'],bronze['total'],color=\"b\",label=\"bronze\")\n\nplt.scatter(honor_mention['rank'],honor_mention['total'],color=\"orange\",label=\"Honour mention\")\nplt.legend()\nplt.show()","9ddced27":"fig = plt.figure(figsize=(30,10))\n\nfig.add_subplot(\"121\")\nsns.boxplot(x=\"award\",y=\"total\",order=['Bronze medal',\"Honourable mention\"],data = df)\nplt.title(\"Based on total values\")\n\n\nfig.add_subplot(\"122\")\nsns.boxplot(x=\"award\",y=\"rank\",order=['Bronze medal',\"Honourable mention\"],data = df)\nplt.title(\"Based on rank values\")","592d7014":"print(\"total bronze  lower : \",df[df['award']==\"Bronze medal\"]['total'].quantile(0.25),\"  upper val : \",df[df['award']==\"Bronze medal\"]['total'].quantile(0.75))\nprint(\"total mention  lower : \",df[df['award']==\"Honourable mention\"]['total'].quantile(0.25),\"  upper val : \",df[df['award']==\"Honourable mention\"]['total'].quantile(0.75))\n\nprint(\"rank bronze   lower : \",df[df['award']==\"Bronze medal\"]['rank'].quantile(0.25),\"  upper val : \",df[df['award']==\"Bronze medal\"]['rank'].quantile(0.75))\nprint(\"rank mention  lower : \",df[df['award']==\"Honourable mention\"]['rank'].quantile(0.25),\"  upper val : \",df[df['award']==\"Honourable mention\"]['rank'].quantile(0.75))","35490c01":"dff = df.copy()","7744be55":"# fill nan values for  bronze medals\ndff.loc[(pd.isnull(dff['award'])) & (dff[\"total\"] > 16) & (dff[\"rank\"] < 273) , \"award\"] = \"Bronze medal\"","ae67856e":"# fill nan values for  honourable mention\ndff.loc[(pd.isnull(dff['award'])) & (dff[\"total\"] > 9) & (dff[\"rank\"] < 440) , \"award\"] = \"Honourable mention\"","75917c04":"## now remove other useless nan values records\ndf = dff.dropna()","b73e2ecc":"# let's draw simple boxplot to identify outliers in dataset\n\ndef drawBoxplot(d):\n    fig = plt.figure(figsize=(25,10))\n\n    fig.add_subplot(\"121\")\n    sns.boxplot(x=\"award\",y=\"total\",data=d)\n    plt.title(\"Boxplot for total\")\n\n\n    fig.add_subplot(\"122\")\n    sns.boxplot(x=\"award\",y=\"rank\",data=d)\n    plt.title(\"Boxplot for rank\")\n  \n    \ndrawBoxplot(df)","c965ae9b":"df['total'].hist()","209cace8":"from scipy.stats import zscore\n\n## we are going to use zscore to remove outliers from dataset\ndf['zscore'] = df.groupby(\"award\")['total'].transform(lambda x : zscore(x,ddof=1))\ndf","4d9fd0c9":"main_points = df[(df['zscore']<3) & (df['zscore']>-3)]\noutliers = df[(df['zscore']>3) | (df['zscore']<-3)]\n\ndrawBoxplot(main_points)\nplt.show()\n","8947f0d4":"df = main_points.copy()","9cbe54e2":"from scipy.stats import chi2_contingency","aedd3438":"ct = pd.crosstab(df['country'],df['award'])\nct","7837fb22":"stat,p,dof,expected = chi2_contingency(ct)\nif p<=0.05:\n    print(\"Both are dependent\")\nelse :\n    print(\"Independent\")\n## stat : \n## dof is degree of free dom = ( No. of rows - 1 ) * (No. of cols  - 1 ) = 115*3 = 345\n## H0 : both are dependent , when value of p <= value of alpha (0.05)\n## If the p-value for the test comes out to be strictly greater than the alpha value, then H0 holds true.\n","2647c523":"print(expected)","af206f38":"## Now its may create problem because both are dependent on each other , it may result into bad prediction while applying ML algorithms , \n## But we don't want to predict , we just want to analyse the data so ignore it","8775db2e":"print(p)","a22342c5":"\nsns.set_style(\"darkgrid\")\ndef countrywiseTotalaward(award=\"all\",col=\"country\",country=\"all\"):\n    if col==\"country\":\n        if award==\"all\":\n            d1 = df.copy()\n        else:\n            d1 = df[df['award']==award]\n\n        sns.countplot(x=\"country\",data = d1,order=d1[\"country\"].value_counts()[:10].index)\n        plt.title(f\"countries countplot of {award}\")\n        \n        plt.show()\n        \n    elif col==\"award\":\n        if country==\"all\":\n            d2 = df.copy()\n        else:\n            d2 = df[df['country']==country]\n        \n\n        sns.countplot(x=\"award\",data = d2)\n        plt.title(f\"Awards countplot of {country}\")\n        \n        print(f\"Total medals : \",len(d2[~(d2['award']==\"Honourable mention\")]))\n        plt.show()\n        ","22120b2d":"countrywiseTotalaward()","09ded6c4":"df['award'].unique()","7fd76242":"countrywiseTotalaward(col=\"award\",country=\"IND\")","0a83ec6b":"countrywiseTotalaward(col=\"award\",country=\"CHN\")","0f01db11":"countrywiseTotalaward(col=\"award\",country=\"USA\")","cb45604f":"countrywiseTotalaward(col=\"award\",country=\"RUS\")","e5c971ea":"df['year'] = pd.to_datetime(df['year'],format=\"%Y\")\ndf['year'].dtype","5ed37b1e":"df","428a3f11":"def yearWiseGrowthofCountriesForMedals(country,medal = \"all\"):\n    \n    t = df[df['country']==country]\n    \n    if(medal!=\"all\"):\n        d1 = pd.DataFrame(t[t['award']==medal]['year'].value_counts())\n    else:\n        d1 = pd.DataFrame(t[t['award']!=\"Honourable mention\"]['year'].value_counts())\n    \n    d1.plot(marker=\">\",figsize=(12,8))\n    plt.title(f\"Year wise Growth of country {country} for {medal} medal\")\n    ","66d88a6a":"yearWiseGrowthofCountriesForMedals(\"IND\",medal = \"Silver medal\")","4a5c6a94":"yearWiseGrowthofCountriesForMedals(\"CHN\",medal = \"Gold medal\")","39911918":"df[(df['country']==\"IND\") & (df['year']==\"2008\")]","d7de2ec1":"## Let's see which problem was difficult \n## for that we compute avg marks for each problem\nd1 = {}\nfor i in \"123456\":\n    col = \"problem\"+i\n    d1[col] = df[col].mean()","fec02ed1":"d1.values()","8ec853af":"## sort dict d into descending order\nd1 = dict(sorted(d1.items(),key=lambda x : x[1])[::-1])\nd1","767f25da":"plt.bar(x=d1.keys(),height=d1.values())","b12e9333":"We can conclude that problem 1 and problem 4 are more difficult if we compare with others.","3c9b7a78":"[![image.png](attachment:image.png)](http:\/\/)","214913c6":"### understanding data and quick overview of dataset","d2284421":"#### Let's see which problems were difficult ?","6add3437":"#### let's apply chi-square test to find whether country and award are dependent or not ?","fe4b0d67":"## Let's apply stastical analysis to compute relation between award and country categorical features\n","3c402dca":"### Drop nan values and fill nans values and patterm recognization","fcf3362d":"source link  : https:\/\/www.geeksforgeeks.org\/python-pearsons-chi-square-test\/\n\nExpected Values Table :\n\nNext, we prepare a similar table of calculated(or expected) values. To do this we need to calculate each item in the new table as :","e23983da":"### Recognize pattern to Fill NaN values","6d36713c":"Most of the nan vals are belongs from honourable mention and bronze medal class so lets find boundr for honourable mention\n\njust take bronze and honourable classes under conisderation","15cf4ee7":"## Data Visualization","241bd896":"### Data engineering : remove outliers","ac0411c9":"You can observe that most of the outliers are removed ","0c9d2deb":"## observation :\n\nrange of bronze based on total : 8 to 26\n\nrange of mention based on total : 3 to 17\n\navg upper bound val of total : 22\n\n\n\n\nrange of bronze based on rank : 50 to 250\n\nrange of mention based on rank : 140 to 480\n\navg upper bound val of rank : 320"}}