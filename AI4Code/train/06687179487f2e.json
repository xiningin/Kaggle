{"cell_type":{"1c025dd6":"code","2689ff97":"code","bcdc7389":"code","7e41296d":"code","53a46f74":"code","3bd4ee42":"code","1047578b":"code","d4796c65":"code","f5e88dd5":"code","d4c0f953":"code","182ddf85":"code","3dbf8eef":"markdown","b110c48d":"markdown"},"source":{"1c025dd6":"import numpy as np # linear algebra\nimport tensorflow as tf\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt","2689ff97":"train_df = pd.read_csv(filepath_or_buffer='..\/input\/digit-recognizer\/train.csv')\ntest_df = pd.read_csv(filepath_or_buffer='..\/input\/digit-recognizer\/test.csv')","bcdc7389":"def reshape_data(train_data, test_data):\n    train_np = train_data.to_numpy()\n    test_np = test_data.to_numpy()\n    \n    train_x_flat = train_np[:, 1:]\n    train_x = np.reshape(train_x_flat, (train_x_flat.shape[0], 28, 28))\n    train_y = train_np[:, 0]\n    \n    test_x = np.reshape(test_np, (test_np.shape[0], 28, 28))\n    \n    return (train_x, train_y), test_x\n\n(train_images, train_labels), test_images = reshape_data(train_df, test_df)","7e41296d":"# Let's demonstrate that the reshaping of the data worked\n\nplt.figure(figsize=(10, 10))\nfor i in range(16):\n    plt.subplot(4, 4, i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[40+i])\n    plt.xlabel(train_labels[40+i])\nplt.show()","53a46f74":"train_images = tf.expand_dims(train_images, axis=-1)\nprint(train_images.shape)","3bd4ee42":"# hyper parameters\nlearning_rate = 0.001\nepochs = 10\nbatch_size = 128\n\ncnn_model = tf.keras.Sequential([\n    tf.keras.layers.Rescaling(scale=1.\/255, input_shape=(28, 28, 1)),\n    tf.keras.layers.Conv2D(16, (3, 3), padding='same', activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.MaxPooling2D((2, 2), padding='same'),\n    tf.keras.layers.Conv2D(32, (3, 3), padding='same', activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.MaxPooling2D((2, 2), padding='same'),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(1024, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\ncnn_model.summary()","1047578b":"# Now train\n\ncnn_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate), loss=tf.keras.losses.SparseCategoricalCrossentropy(), metrics=['accuracy'])\n\ncnn_model.fit(train_images, train_labels, epochs=epochs, validation_split=0.2, verbose=1)","d4796c65":"test_images = tf.expand_dims(test_images, axis=-1)\n\ntest_predictions = cnn_model(test_images)\nprint(test_predictions)","f5e88dd5":"# Since the model is very sure of itself with its probabilities, we don't bother with random choices given by the model distribution, we just choose the digit\n# with the highest probability\n\ntest_probabilities = np.max(test_predictions, axis=1)\ntest_labels = np.argmax(test_predictions, axis=1)\ntest_imageIDs = np.arange(1, len(test_labels)+1, dtype=int)\n\nprint(test_labels.shape)\nprint(test_imageIDs.shape)\nprint(test_imageIDs[np.newaxis].T)","d4c0f953":"submission = pd.DataFrame(test_imageIDs[np.newaxis].T, columns=['ImageId'])\nsubmission = submission.join(pd.DataFrame(test_labels[np.newaxis].T, columns=['Label']))\nsubmission.head()","182ddf85":"submission.to_csv('submission.csv', index=False)","3dbf8eef":"# Now use the model to predict stuff","b110c48d":"# The Model (CNN)"}}