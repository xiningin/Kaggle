{"cell_type":{"08bf5b8c":"code","11c2b4ae":"code","b6d58c74":"code","cfc10bc3":"code","edba6d28":"code","ee9a6d7a":"code","62a40ac8":"code","28ecc74c":"code","269182a0":"code","17d47cc3":"code","d2876c8d":"code","65c28202":"code","51b145ca":"code","e117f426":"code","13f96be6":"markdown","a8c1d1e8":"markdown","56df0b1d":"markdown","95954774":"markdown","40d88ca5":"markdown","4e5a4e22":"markdown","fdd806d9":"markdown","be783ac6":"markdown","53e51807":"markdown","20058dda":"markdown","490e7922":"markdown"},"source":{"08bf5b8c":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the data\ndf_train = pd.read_csv(\"..\/input\/train.csv\", sep=\",\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\", sep=\",\")\nids = df_test.pop(\"id\")\ndf_train['date'] = pd.to_datetime(df_train['date'], infer_datetime_format=True)\ndf_test['date'] = pd.to_datetime(df_test['date'], infer_datetime_format=True)\ndf_train['isTrain'] = True\ndf_test['isTrain'] = False\ndf = df_train.append(df_test, ignore_index=True, sort=True)\n\n# Create some additional columns\ndf['year'] = df['date'].dt.year\ndf['month'] = df['date'].dt.month\ndf['week'] = df['date'].dt.week\n\ndf['day'] = df['date'].dt.day\ndf['weekday'] = df['date'].dt.dayofweek\ndf['dayofyear'] = df['date'].dt.dayofyear\ndf['weekend'] = (df['weekday'] >= 5).astype(int)\n\n# Some weird columns which help a bit\nfor div in np.arange(2, 6, 1):\n    df['dayb%i' % div] = df['dayofyear'] % div","11c2b4ae":"all_means = df.groupby(['store', 'item'])['sales'].mean().unstack()\nall_stds = df.groupby(['store', 'item'])['sales'].std().unstack()\n\ndf['normed'] = df['sales'] - all_means.values[df['store'].values - 1, df['item'].values - 1]\ndf['normed'] = df['normed'] \/ all_stds.values[df['store'].values - 1, df['item'].values - 1]\n\ndf_train = df.groupby('isTrain').get_group(True).copy()\ndf_test = df.groupby('isTrain').get_group(False).copy()","b6d58c74":"print('Factor plot - year vs normed')\nsns.factorplot(x=\"year\", y=\"normed\", data=df_train, kind=\"box\", hue=\"store\", size=10)\n\nprint('Factor plot - weekday vs normed')\nsns.factorplot(x=\"weekday\", y=\"normed\", data=df_train, kind=\"box\", size=10)\n\ndf_train_ = df_train.copy()\ndf_train_['jfm'] = df_train_['month'] < 4\nprint('Joint plot - dayofyear vs normed')\nsns.jointplot(x=\"dayofyear\", y=\"normed\", data=df_train_.groupby('jfm').get_group(True), size=10)\n\ndel df_train_","cfc10bc3":"annual_means = df_train.groupby('year')['normed'].mean()\nannual_means.name = \"Annual mean normalized sales\"\nannual_stds = df_train.groupby('year')['normed'].std()\nannual_stds.name = \"Annual std normalized sales\"\n\nfig, axs = plt.subplots(figsize=(10, 10), nrows=2, sharex=True)\nannual_means.plot(ax=axs[0], title=\"Annual mean normalized sales\")\nannual_stds.plot(ax=axs[1], title=\"Annual std normalized sales\")","edba6d28":"annual_mean_diffs = annual_means.diff().dropna()\nannual_std_diffs = annual_stds.diff().dropna()\n\nfig, axs = plt.subplots(figsize=(10, 10), nrows=2, sharex=True)\nannual_mean_diffs.plot(ax=axs[0], title=\"Annual mean normalized sales variations\")\nannual_std_diffs.plot(ax=axs[1], title=\"Annual std normalized sales variations\")","ee9a6d7a":"# Linear model for inter-annual variability\nfrom sklearn.linear_model import LinearRegression\n\nfig, axs = plt.subplots(figsize=(10, 10), nrows=2, sharex=True)\nannual_means.plot(ax=axs[0])\nannual_stds.plot(ax=axs[0])\nplt.legend(['Means', 'Stds'])\n\nannual_mean_diffs.plot(ax=axs[1])\nannual_std_diffs.plot(ax=axs[1])\n\nlr_mean_diffs = LinearRegression().fit(annual_mean_diffs.index.values.reshape(-1, 1),\n                                       annual_mean_diffs.values)\nlr_std_diffs = LinearRegression().fit(annual_std_diffs.index.values.reshape(-1, 1),\n                                      annual_std_diffs.values)\n\nmean_diff_2018 = lr_mean_diffs.predict([[2018]])[0]\nmean_2018 = annual_means[2017] + mean_diff_2018\n\nstd_diff_2018 = lr_std_diffs.predict([[2018]])[0]\nstd_2018 = annual_stds[2017] + std_diff_2018\n\nplt.sca(axs[0])\nplt.plot(2018, mean_2018, 'ko')\nplt.plot(2018, std_2018, 'rd')\nplt.plot([2017, 2018], [annual_means[2017], mean_2018], 'k--')\nplt.plot([2017, 2018], [annual_stds[2017], std_2018], 'r--')\n\nplt.sca(axs[1])\nplt.plot(2018, mean_diff_2018, \"ko\")\nplt.plot(2018, std_diff_2018, \"ro\")\nplt.plot([2017, 2018], [annual_mean_diffs[2017], mean_diff_2018], 'k--')\nplt.plot([2017, 2018], [annual_std_diffs[2017], std_diff_2018], 'r--')\n","62a40ac8":"annual_means[2018] = mean_2018\nannual_stds[2018] = std_2018\ndf['residuals_year'] = df['normed'] - annual_means.values[df['year'].values - 2013]\ndf['residuals_year'] = df['residuals_year'] \/ annual_stds.values[df['year'].values - 2013]\ndf['residuals_year'].hist(bins=100, figsize=(10, 5))\nplt.title(\"Distribution of residuals (year variations removed)\")\npd.concat([annual_means, annual_stds], axis=1)","28ecc74c":"df_train = df.groupby('isTrain').get_group(True).copy()\nweekly_means = df_train.groupby('week')['residuals_year'].mean()\nweekly_stds = df_train.groupby('week')['residuals_year'].std()\n\nweekly_means.plot()\nweekly_stds.plot()\nplt.xlabel('Week')\nplt.legend(['Means', 'Stds'])\n\ndf['residuals'] = df['residuals_year'] - weekly_means.values[df['week'].values - 1]\ndf['residuals'] = df['residuals'] \/ weekly_stds.values[df['week'].values - 1]\n\ndf_train = df.groupby('isTrain').get_group(True).copy().drop('isTrain', axis=1)\ndf_test = df.groupby('isTrain').get_group(False).copy().drop('isTrain', axis=1)","269182a0":"predictors = [c for c in df_train.columns\n              if c not in ['sales',\n                           'normed',\n                           'residuals_year',\n                           'residuals',\n                           'year',\n                           'date',\n                           'isTrain']]\ncategories = [c for c in predictors\n              if c not in ['month', 'week', 'dayofyear']]\nprint('Categorical predictors:', categories)\nprint('Predictors:', predictors)\n","17d47cc3":"from sklearn.model_selection import KFold\nfrom lightgbm import Dataset, train\n\ndf_train['jfm'] = df_train['month'] < 4\ndf_train = df_train.groupby('jfm').get_group(True).copy().drop('jfm', axis=1)\n\nX_train = df_train[predictors].values\nX_test = df_test[predictors].values\ny_train = df_train['residuals'].values # we predict the residuals (after removing yearly and weekly trends\n\nnfolds = 10\nfolds = KFold(n_splits=nfolds, shuffle=True)\n\nparams = {\n    'task': 'train',\n    'boosting_type': 'gbdt',\n    'objective': 'regression',\n    'metric': {'mae'},\n    'num_leaves': 45,\n    'learning_rate': 0.02,\n    'feature_fraction': 0.9,\n    'max_depth': 6,\n    'verbose': 0,\n    'num_boost_round': 15000,\n    'early_stopping_rounds': 100,\n    'nthread': -1}\n\nresiduals = []\nscores = []\nft_imp_split = []\nft_imp_gain = []\n\nprint('\\tRunning %i K-folds...' % nfolds)\nfor ifold, (trn_idx, val_idx) in enumerate(folds.split(X_train, y_train)):\n\n    lgb_train = Dataset(\n        data=X_train[trn_idx, :],\n        label=y_train[trn_idx],\n        feature_name=predictors)\n    lgb_val = Dataset(\n        data=X_train[val_idx, :],\n        label=y_train[val_idx],\n        feature_name=predictors)\n\n    model = train(\n        params,\n        lgb_train,\n        num_boost_round=15000,\n        early_stopping_rounds=100,\n        valid_sets=[lgb_train, lgb_val],\n        verbose_eval=20,\n        categorical_feature=categories,\n    )\n\n    y_pred = model.predict(X_train[val_idx, :], num_iteration=model.best_iteration)\n    score = model.best_score['valid_1']['l1']\n    print('\\toof best score is: {:6.4f} after {:6d} iterations'.format(score, model.best_iteration))\n    \n    ft_imp_split.append(model.feature_importance(importance_type=\"split\", iteration=model.best_iteration))\n    ft_imp_gain.append(model.feature_importance(importance_type=\"gain\", iteration=model.best_iteration))\n\n    residuals.append(model.predict(X_test, num_iteration=model.best_iteration))\n    scores.append(score)\n\nresiduals = np.average(residuals, axis=0, weights=(1.\/np.array(scores))**2)","d2876c8d":"df_test['residuals'] = residuals\n\ndf_test['residuals_year'] = df_test['residuals'] * weekly_stds.values[df_test['week'].values - 1]\ndf_test['residuals_year'] += weekly_means.values[df_test['week'].values - 1]\n\ndf_test['normed'] = df_test['residuals_year'] * annual_stds[2018] + annual_means[2018]\n\ndf_test['sales'] = df_test['normed'] * all_stds.values[df_test['store'].values - 1, df_test['item'].values - 1]\ndf_test['sales'] += all_means.values[df_test['store'].values - 1, df_test['item'].values - 1]","65c28202":"df = df_train.append(df_test, ignore_index=True, sort=True)\n\nsns.factorplot(x=\"weekday\", y=\"residuals\", hue=\"year\", data=df, kind=\"box\", size=8)\nplt.title(\"All items & stores\")\n\nsns.factorplot(x=\"weekday\", y=\"residuals\", hue=\"year\", data=df.groupby('item').get_group(1), kind=\"box\", size=8)\nplt.title(\"Item 1, all stores\")\n\nsns.factorplot(x=\"weekday\", y=\"residuals\", hue=\"year\", data=df.groupby(['store', 'item']).get_group((1, 1)), kind=\"box\", size=8)\nplt.title(\"Item 1, store 1\")","51b145ca":"# Show feature importance\nsns.barplot(x=np.log1p(np.mean(ft_imp_split, axis=0)),\n            y=predictors)\nplt.title('Feature importance (log) by split')\nplt.figure()\nsns.barplot(x=np.log1p(np.mean(ft_imp_gain, axis=0)),\n            y=predictors)\nplt.title('Feature importance (log) by gain')","e117f426":"df_test['ID'] = ids.values\nsub = df_test[['ID', 'sales']]\nprint(sub.head())\nsub.to_csv('homemade-arima.csv', sep=',', index=False)","13f96be6":"So, we are dealing with time series of sales, which of course present some periodicities (I am not going to show these in this notebook, just plot the time series to visualize what I am talking about !) :\n* within a year, there is a clear monthly trend (with a peak in summer), that can also be analyzed week by week,\n* within a week, there is generally a peak during the week-end.\n\nSince ARIMA is pretty slow, I thought I might try something \"manually\". Let's give it a shot.","a8c1d1e8":"Sales vary significantly from one year to another, so we need to account for that when predicting the sales in 2018. Here is where the \"homemade-ARIMA\" starts. First we get the annual mean (normalized) sales and try to recognize a pattern.","56df0b1d":"Let's visualize how important our features were (log-scaled).","95954774":"It is difficult to see if the linear regression is appropriate, because now we only have 4 data points, but we just keep going to see what we get in the end.","40d88ca5":"I usually forget to annotate graphs but the two previous ones show the annual mean (blue) and std (orange) to the top, their variations (same color code) to the bottom ; the forecasted values are shown in black and red respectively. It kind of makes sense !","4e5a4e22":"We have a limited number of data points (5) here, but from these we can reckon that a linear regression would probably over-estimate the next annual mean & std in 2018. So we are going to use a linear regression but on the consecutive differences instead.","fdd806d9":"Now, we remove the sales variations within a year (we choose to do that per week instead of per month but it would probably give similar results), because we want the ML model to focus on the variations of other time scales that we cannot anticipate (apart from the business day \/ weekend variations).","be783ac6":"Et voil\u00e0 ! This model is quite simple and doesn't perform too poorly. Before tuning the ML model hyperparameters, we can investigate other ways of dealing with the periodicities, and try to find solutions to that bias \/ amplitude of variations problem which we saw in the Figs1, 2, 3.\n\n**What do you think ?**","53e51807":"Let's visualize the results and see if we managed to capture significant variations.\n\nFig. 1 : In average, across all items and stores, it seems we are in a range that makes sense, however the amplitude of the variations seems very under-estimated.\nFig. 2 : Focus on the item 1 ; it seems we have a bias here.\nFig. 3 : Focus on the item 1 sold in store 1 ; same conclusions as in Fig1 and Fig2.","20058dda":"Now we normalize the data with regards to the store-specific and item-specific scales, and visualize the normalized sales afterwards.","490e7922":"So now we have the residuals which :\n* have the same scale, for all items and stores,\n* do not vary from one year to another (in mean and std)\n* do not vary from one week to another (in mean and std)\nWe are going to use a LightGBM model to predict the other variations."}}