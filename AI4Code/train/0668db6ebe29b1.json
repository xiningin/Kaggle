{"cell_type":{"ae9ae2b6":"code","5b07c50d":"code","7996956a":"code","a1b43505":"code","593aecb8":"code","77c34fb2":"code","1e108d45":"code","1de3621d":"code","1b0814c1":"code","a0b545a8":"code","9e44a942":"code","7fa05433":"code","af820336":"code","9783aab7":"code","fc3b9a43":"code","2fc4aabb":"code","72143689":"code","0b98db99":"code","e355b623":"code","5f3c6ea8":"code","5c1d1c13":"code","b9100f58":"code","978b1f3b":"code","9c392e56":"code","a9f4b660":"code","cb5b14e9":"markdown","088edd13":"markdown","8c7db8f1":"markdown","0eafe42c":"markdown","e22f42f7":"markdown","587504a7":"markdown","74447829":"markdown","0641316f":"markdown","0440ad83":"markdown","4669e82a":"markdown","c19d34d4":"markdown","06b3ec98":"markdown","75c82d78":"markdown","50f53392":"markdown","cbb28395":"markdown"},"source":{"ae9ae2b6":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5b07c50d":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-oct-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-oct-2021\/test.csv\")","7996956a":"train","a1b43505":"test","593aecb8":"def check(df):\n    col_list = train.columns.values\n    rows = []\n    for col in col_list:\n        tmp = (col,\n              train[col].dtype,\n              train[col].isnull().sum(),\n              train[col].count(),\n              train[col].nunique(),\n              train[col].unique())\n        rows.append(tmp)\n    df = pd.DataFrame(rows) \n    df.columns = ['feature','dtype','nan','count','nunique','unique']\n    return df\n\ncheck(train)","77c34fb2":"def check(df):\n    col_list = test.columns.values\n    rows = []\n    for col in col_list:\n        tmp = (col,\n              test[col].dtype,\n              test[col].isnull().sum(),\n              test[col].count(),\n              test[col].nunique(),\n              test[col].unique())\n        rows.append(tmp)\n    df = pd.DataFrame(rows) \n    df.columns = ['feature','dtype','nan','count','nunique','unique']\n    return df\n\ncheck(test)","1e108d45":"train.info(), test.info()","1de3621d":"# features\n\nfeature = [col for col in train.columns if col not in ['id','target']]\n\ncat_int = []\ncat_float= []\n\nfor col in train[feature]:\n    if 'int' in str(train[col]):\n        cat_int.append(col)\n    else:\n        cat_float.append(col)\n        \nprint('integer features : ', cat_int)\nprint()\nprint('float features : ', cat_float)","1b0814c1":"# time counter \u23f3\nimport time\nstart_1 = time.perf_counter()","a0b545a8":"# Reduce memory usage\n\n# train features\nfor col in train.columns:\n    if train[col].dtype == \"float64\":\n        train[col]=pd.to_numeric(train[col], downcast=\"float\")\n    if train[col].dtype == \"int64\":\n        train[col]=pd.to_numeric(train[col], downcast=\"integer\")\n    \n\n# test features\nfor col in test.columns:\n    if test[col].dtype == \"float64\":\n        test[col]=pd.to_numeric(test[col], downcast=\"float\")\n    if train[col].dtype == \"int64\":\n        test[col]=pd.to_numeric(test[col], downcast=\"integer\")  \n        \ntrain.info(), test.info()","9e44a942":"# bool change int8\n\ncol_1 = ['f' + str(i) for i in range(242, 285)] + ['f22','f43'] + ['target']\ntrain[col_1] = train[col_1].astype('int8')\n\ncol_2 = ['f' + str(i) for i in range(242, 285)] + ['f22','f43'] \ntest[col_2] = test[col_2].astype('int8')\n\ntrain.info(), test.info()","7fa05433":"# done \u231b\ntime_end = time.perf_counter()\nprocess_time = time_end - start_1\nprint(\"process_time:{0}\".format(process_time) )","af820336":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nsns.set_theme(style = 'darkgrid')","9783aab7":"# target\nsns.countplot(x = train['target'], color='#DC143C')\nplt.legend()","fc3b9a43":"i = 22\nsns.countplot(x=train['f'+str(i)], color='#663399',  label='train')\nsns.countplot(x=test['f'+str(i)], color='#FFD700',  label='test')\nplt.legend()","2fc4aabb":"i = 43\nsns.countplot(x=train['f'+str(i)], color='#663399',  label='train')\nsns.countplot(x=test['f'+str(i)], color='#FFD700',  label='test')\nplt.legend()","72143689":"train = train.drop('id' ,axis = 1)","0b98db99":"X = train.drop('target', axis = 1).copy()\ny = train['target'].copy()\n\ndel train\ndel test","e355b623":"# time counter \u23f3\nstart = time.perf_counter()","5f3c6ea8":"from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(n_estimators = 100, random_state = 0)\nclf.fit(X,y)","5c1d1c13":"labels = X.columns.values\nimportances = clf.feature_importances_\nidx = np.argsort(importances)\nprint(idx)","b9100f58":"# done \u231b\ntime_end = time.perf_counter()\nprocess_time = time_end - start\nprint(\"process_time:{0}\".format(process_time) )","978b1f3b":"imp = pd.DataFrame()\nimp['importance'] = importances\nimp = imp['importance']\nimp.head()","9c392e56":"plt.figure(figsize = (50,50))\nplt.title('feature importances')\nplt.barh(range(imp.shape[0]), imp[idx])\nplt.show()","a9f4b660":"plt.figure(figsize = (20,10))\nplt.title('feature importances')\nimp.nlargest(25).plot(kind='barh')\nplt.show()","cb5b14e9":"---------","088edd13":"# Summary \u270d\n1. dataset size : train 1000K rows and 287 columns , test 500k rows and 286 columns\n1. train values : no missing values, numeric only.\n1. test values : no missing values, numeric only.\n1. values dtype : float64 , int64 (f22, f43 f242...f284), int32(id)\n1. target values : binary (0 or 1).\n1. importances features : the most important feature is f22.\n","8c7db8f1":"# feature importances \ud83d\udc40","0eafe42c":"-----------","e22f42f7":"--------------","587504a7":"-----------","74447829":"1.  loading train data and test data\n1.  data description\n1.  reduce memory usage\n1.  visualization\n1.  feature importances\n1.  summary\n1.  conclusion\n","0641316f":"much better \ud83d\udc4d","0440ad83":"-------------","4669e82a":"# TPS_OCT_21_EDA","c19d34d4":"# Conclusion \n1. It is large data.\n1. Target's positive value is almost the same as negative values.\n1. It will be needed reduce memory usage.\n1. It might take a while to figure out.","06b3ec98":"Oh! It's very small.\ud83d\udd0e","75c82d78":"# How to reduce memory usage \ud83d\udca1","50f53392":"# VISUALIZATION \ud83d\udcca","cbb28395":"* It could take a while\n* approximately one hour"}}