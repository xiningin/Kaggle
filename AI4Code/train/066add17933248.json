{"cell_type":{"b1ad6902":"code","022106d1":"code","fb22d6d8":"code","a968f14c":"code","b5817b9f":"code","ab4b2362":"code","efa46bbd":"code","be30612d":"code","6e1c6db3":"code","00a6df37":"code","4cfeaa85":"code","427aa816":"code","98822b27":"code","7ba534f5":"code","74ac28f9":"code","d9d3ab40":"code","6705927a":"code","5f5c1cef":"code","3ca357fc":"code","b7bdb419":"code","12c252bb":"code","351dc934":"code","92bbbad6":"code","3dc6e01d":"code","06687994":"code","03eb878d":"code","1476ca2c":"code","6ae6db6d":"code","0c424bc0":"code","084dee56":"code","ecc0400f":"code","4b2cc8ef":"code","f0805e19":"code","3ae7fd91":"code","ec7cc2ef":"code","94ef387c":"code","7cd53e53":"code","2117b52f":"code","84cd403a":"code","91eae2fc":"code","3d1f435d":"markdown","d28e3339":"markdown","39131e77":"markdown","d4eed32c":"markdown","50b62e31":"markdown","9263b9a2":"markdown","5cc9e3df":"markdown","fafd4217":"markdown","f1301c85":"markdown","04816893":"markdown"},"source":{"b1ad6902":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","022106d1":"import os\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision.datasets import ImageFolder\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport torchvision.transforms as tt\nfrom torch.utils.data import DataLoader\nfrom torchvision.datasets.utils import download_url\nfrom torchvision.utils import make_grid\n%matplotlib inline","fb22d6d8":"train_path = \"..\/input\/intel-image-classification\/seg_train\/seg_train\/\"\nval_path =\"..\/input\/intel-image-classification\/seg_test\/seg_test\/\"\ntest_path = \"..\/input\/intel-image-classification\/seg_pred\/\"\nstats = ((0.485, 0.456, 0.406),(0.229, 0.224, 0.225))\ntrain_tf = tt.Compose([  tt.Resize((150,150)), \n                         tt.RandomHorizontalFlip(),\n                         tt.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0.1),\n                         tt.ToTensor(), \n                         tt.Normalize(*stats,inplace=True)])\nvalid_tf = tt.Compose([tt.Resize((150,150)),tt.ToTensor(), tt.Normalize(*stats)])","a968f14c":"train_ds = ImageFolder(train_path, transform = train_tf)\nval_ds = ImageFolder(val_path, transform = valid_tf)","b5817b9f":"batch_size = 200","ab4b2362":"torch.manual_seed(42)\ntrain_dl = DataLoader(train_ds,batch_size,shuffle = True, num_workers = 4, pin_memory = True)\nvalid_dl = DataLoader(val_ds, 300, num_workers = 4, pin_memory =True)","efa46bbd":"def show_batch(dl):\n    for img, _ in dl:\n        fig, ax = plt.subplots(figsize=(14, 14))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(img[:64], nrow=8).permute(1, 2, 0))\n        break\nshow_batch(train_dl)","be30612d":"classes = train_dl.dataset.classes","6e1c6db3":"def get_default_device():\n    \"\"\"check if gpu is available\"\"\"\n    if torch.cuda.is_available():\n        return torch.device(\"cuda\")\n    else:\n        return torch.device(\"cpu\")","00a6df37":"def to_device(data, device):\n    \"\"\"changing the device\"\"\"\n    if isinstance(data,(list,tuple)):\n        return [to_device(x, device) for x in data]\n    else:\n        return data.to(device, non_blocking = True)","4cfeaa85":"class DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","427aa816":"device = get_default_device()\ndevice","98822b27":"train_dl = DeviceDataLoader(train_dl, device)\nvalid_dl = DeviceDataLoader(valid_dl, device)","7ba534f5":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs,dim = 1)\n    return torch.tensor(torch.sum((preds == labels)).item()\/len(preds))","74ac28f9":"class imgclassificationbase(nn.Module):\n    def training_step(self, batch):\n        imgs, labs = batch\n        out = self(imgs)\n        loss = F.cross_entropy(out,labs)\n        return loss\n    \n    def validation_step(self, batch):\n        img, labs = batch\n        out = self(img)\n        loss = F.cross_entropy(out,labs)\n        acc = accuracy(out,labs)\n        return {\"val_loss\":loss.detach(), \"val_acc\":acc}\n    \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   \n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      \n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.5f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_acc']))","d9d3ab40":"def conv_block(inc,outc,pool = False):\n    block = [\n        nn.Conv2d(inc,outc,kernel_size=3, padding =1),\n        nn.BatchNorm2d(outc),\n        nn.ReLU(inplace=True)\n    ]\n    if pool:\n        block.append(nn.MaxPool2d(2))\n    return nn.Sequential(*block)\n","6705927a":"class ResNet(imgclassificationbase):\n    def __init__(self,inc,nc):\n        super().__init__()\n        self.conv1 = conv_block(inc, 16)\n        self.conv2 = conv_block(16, 32, pool = True)\n        self.res1 = nn.Sequential(conv_block(32,32),conv_block(32,32))\n        \n        self.conv3 = conv_block(32,64,pool = True)\n        self.conv4 = conv_block(64,128,pool = True)\n        self.res2 = nn.Sequential(conv_block(128,128),conv_block(128,128))\n        \n        self.conv5 = conv_block(128,256,pool = True)\n        self.conv6 = conv_block(256,512,pool = True)\n        self.res3 = nn.Sequential(conv_block(512,512),conv_block(512,512))\n        \n        self.classifier = nn.Sequential(nn.MaxPool2d(4), \n                                        nn.Flatten(), \n                                        nn.Linear(512, nc))\n        \n    def forward(self, ip):\n        out = self.conv1(ip)\n        out = self.conv2(out)\n        out = self.res1(out)+out\n        out = self.conv3(out)\n        out = self.conv4(out)\n        out = self.res2(out)+out\n        out = self.conv5(out)\n        out = self.conv6(out)\n        out = self.res3(out)+out\n        out = self.classifier(out)\n        return out","5f5c1cef":"model= to_device(ResNet(3,6),torch.device(\"cuda\"))\nmodel","3ca357fc":"def try_batch(dl):\n    \n    for images, labels in dl:\n        \n        print('images.shape:', images.shape)\n        out = model(images)\n        print('out.shape:', out.shape)\n        print('out[0]:', out[41])\n        break\n\ntry_batch(train_dl)","b7bdb419":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","12c252bb":"history = [evaluate(model, valid_dl)]\nhistory","351dc934":"epochs = 2\nlr = 1e-3\ngrad_clip = 1e-1\nweight_decay = 1e-5\noptim_func = torch.optim.AdamW","92bbbad6":"history+=fit_one_cycle(epochs,lr,model,train_dl,valid_dl,grad_clip = grad_clip, weight_decay = 1e-5, opt_func = optim_func)","3dc6e01d":"epochs = 4\nlr = 1e-4 \nweight_decay = 1e-6","06687994":"history+=fit_one_cycle(epochs,lr,model,train_dl,valid_dl,grad_clip = grad_clip, weight_decay = 1e-5, opt_func = optim_func)","03eb878d":"def plot_losses(history):\n    losses = [x[\"val_loss\"] for x in history]\n    plt.plot(losses,\"-x\")\n    plt.xlabel(\"epoch\")\n    plt.ylabel(\"loss\")\n    plt.title(\"loss vs epochs\")\n    \ndef plot_acc(history):\n    accs = [x[\"val_acc\"] for x in history]\n    plt.plot(accs,\"-x\")\n    plt.xlabel(\"epoch\")\n    plt .ylabel(\"accuracy\")\n    plt.title(\"accuracy vs epochs\")","1476ca2c":"plot_losses(history)","6ae6db6d":"plot_acc(history)","0c424bc0":"def pred_single(img,model):\n    xb = to_device(img.unsqueeze(0), device)\n    yb = model(xb)\n    _, preds = torch.max(yb, dim = 1)\n    return preds[0].item()\n    ","084dee56":"test_ds = ImageFolder(test_path, transform = valid_tf)","ecc0400f":"img, _ = test_ds[0]","4b2cc8ef":"plt.imshow(img.permute(1,2,0))\npred = pred_single(img, model)\nclasses[pred]","f0805e19":"img, _ = test_ds[25]\npred = pred_single(img, model)\nprint(\"prediction:\\t\",classes[pred])\nplt.imshow(img.permute(1,2,0))","3ae7fd91":"img , _ = test_ds[40]\npred = pred_single(img,model)\nprint(\"prediction:\\t\",classes[pred])\nplt.imshow(img.permute(1,2,0))","ec7cc2ef":"img, _ = test_ds[5234]\npred = pred_single(img, model)\nprint(\"prediction:\\t\",classes[pred])\nplt.imshow(img.permute(1,2,0))","94ef387c":"img, _ = test_ds[7200]\npred = pred_single(img, model)\nprint(\"prediction:\\t\",classes[pred])\nplt.imshow(img.permute(1,2,0))","7cd53e53":"img, _ = test_ds[2320]\npred = pred_single(img, model)\nprint(\"prediction:\\t\",classes[pred])\nplt.imshow(img.permute(1,2,0))","2117b52f":"projectname = \"intelproj\"\n!pip install jovian --upgrade --quiet","84cd403a":"import jovian","91eae2fc":"jovian.commit(project = projectname,environment=None)","3d1f435d":"# Training the Model\n","d28e3339":"# Defining Paths and transformations\nwe define paths to get our Datasets and transformations to transform them to suitable tensors","39131e77":"# Our ResNet Model","d4eed32c":"# Predicting Single Images from the test Dataset","50b62e31":"# Showing a batch\njust to check if our data is loaded correctly","9263b9a2":"# Defining a Base Class for Image Classification","5cc9e3df":"# Plotting Losses and Accuracy","fafd4217":"# Getting Our Data\n","f1301c85":"# Accellerating the process(GPU time!)","04816893":"# Importing The Right Modules\n"}}