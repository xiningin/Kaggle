{"cell_type":{"829d619b":"code","5cede171":"code","a882bbd9":"code","32683dfe":"code","d0aa0215":"code","0d718a7d":"code","6ea5c4da":"code","7d49db5a":"code","fd6c42c4":"code","b6c14dab":"code","5cdf2b25":"code","fc4ff9cf":"code","0a296337":"markdown","09cf2ac5":"markdown","9d96cfc7":"markdown","9e894f75":"markdown","db6e56f6":"markdown","50b41097":"markdown"},"source":{"829d619b":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5cede171":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt","a882bbd9":"df = pd.read_csv(\"\/kaggle\/input\/history-of-test-series-in-cricket\/testSeries.csv\")\ndf","32683dfe":"df_stat = pd.DataFrame(columns=[\"Team\", \"Opponent\", \"Date\", \"Result\", \"Won\", \"Lost\", \"Drawn\"])\n\ndef stats(row):\n    global df_stat\n    \n    team1 = row[\"Team\"]\n    team2 = row[\"Opponent\"]\n    team1_result = row[\"Result\"]\n    team1_d = team1_w = team1_l = team2_w = team2_l = team2_d = 0\n    team2_result = \"\"\n    \n    if team1_result == \"Won\":\n        team2_result = \"Lost\"\n    elif team1_result == \"Lost\":\n        team2_result = \"Won\"\n    else:\n        team2_result = \"Drawn\"\n    \n    team1_w = row[\"Won\"]\n    team1_l = row[\"Lost\"]\n    team1_d = row[\"Drawn\"]\n    team2_w = row[\"Lost\"]\n    team2_l = row[\"Won\"]\n    team2_d = row[\"Drawn\"]\n    \n    df_stat = df_stat.append({\"Team\":team1, \"Opponent\":team2, \"Date\":row[\"Date\"], \"Result\":team1_result, \"Won\":team1_w, \"Lost\":team1_l, \"Drawn\":team1_d}, ignore_index=True)\n    df_stat = df_stat.append({\"Team\":team2, \"Opponent\":team1, \"Date\":row[\"Date\"], \"Result\":team2_result, \"Won\":team2_w, \"Lost\":team2_l, \"Drawn\":team2_d}, ignore_index=True)\n\ndf.apply(stats, axis=1)\ndf_stat[\"Won\"] = df_stat[\"Won\"].astype(int)\ndf_stat[\"Lost\"] = df_stat[\"Lost\"].astype(int)\ndf_stat[\"Drawn\"] = df_stat[\"Drawn\"].astype(int)\ndf_stat","d0aa0215":"table_home = pd.pivot_table(df, index=\"Team\", values=[\"Won\",\"Lost\",\"Drawn\"], aggfunc=\"sum\", fill_value=0).reset_index()\ntable_home[\"PCT (%)\"] = round(100*(12*table_home[\"Won\"] + 4*table_home[\"Drawn\"]) \/ (12*(table_home[\"Won\"]+table_home[\"Lost\"]+table_home[\"Drawn\"])),2)\ntable_home","0d718a7d":"table_away = pd.pivot_table(df, index=\"Opponent\", values=[\"Won\",\"Lost\",\"Drawn\"], aggfunc=\"sum\", fill_value=0).reset_index()\ntable_away[\"PCT (%)\"] = round(100*(12*table_away[\"Won\"] + 4*table_away[\"Drawn\"]) \/ (12*(table_away[\"Won\"]+table_away[\"Lost\"]+table_away[\"Drawn\"])),2)\ntable_away","6ea5c4da":"# Merge both tables(home & away)\ndata1 = table_home.merge(table_away, left_on=\"Team\", right_on=\"Opponent\", suffixes=[\"_home\",\"_away\"]).drop('Opponent', axis=1)","7d49db5a":"fig = px.bar(data_frame=data1, x=\"Team\", y=[\"PCT (%)_home\",\"PCT (%)_away\"],\n             custom_data=[\"Drawn_home\",\"Lost_home\",\"Won_home\",\"Drawn_away\",\"Lost_away\",\"Won_away\"], \n             barmode=\"group\", template=\"seaborn\")\nfig.update_traces(hovertemplate=\"<b>%{x}<\/b> : %{y}<br><br><b>Home<\/b><br>Won : %{customdata[2]}<br>Drawn : %{customdata[0]}<br>Lost : %{customdata[1]}<br><br><b>Away<\/b><br>Won : %{customdata[5]}<br>Drawn : %{customdata[3]}<br>Lost : %{customdata[4]}\")\nfig.update_layout(title=\"Team Performance (Home vs Away)\", xaxis={\"title\":\"Teams\"}, yaxis={\"title\":\"Percentage of Points\"}, legend={\"title\":\"Performance\"})\n# Update variables name of legend\nfig.data[0].name = \"Home\"\nfig.data[1].name = \"Away\"\nfig.show()","fd6c42c4":"data2 = pd.DataFrame(columns=[\"Team\",\"Won\",\"Lost\",\"Drawn\"])\nfor team, df_team in df_stat.groupby([\"Team\"]):\n    data2 = data2.append({\"Team\":team, \"Won\":df_team[\"Won\"].sum(), \"Lost\":df_team[\"Lost\"].sum(), \"Drawn\":df_team[\"Drawn\"].sum()}, ignore_index=True)\n\ndata2[\"Won\"] = data2[\"Won\"].astype(int)\ndata2[\"Lost\"] = data2[\"Lost\"].astype(int)\ndata2[\"Drawn\"] = data2[\"Drawn\"].astype(int)\ndata2[\"Won%\"] = round(100*data2[\"Won\"]\/(data2[\"Drawn\"]+data2[\"Lost\"]+data2[\"Won\"]),2)\ndata2[\"Lost%\"] = round(100*data2[\"Lost\"]\/(data2[\"Drawn\"]+data2[\"Lost\"]+data2[\"Won\"]),2)\ndata2[\"Drawn%\"] = round(100*data2[\"Drawn\"]\/(data2[\"Drawn\"]+data2[\"Lost\"]+data2[\"Won\"]),2)","b6c14dab":"data2","5cdf2b25":"fig = px.bar(data_frame=data2, x=\"Team\", y=[\"Won%\",\"Lost%\",\"Drawn%\"], custom_data=[\"Won\", \"Lost\", \"Drawn\"], barmode=\"group\")\nfig.update_traces(hovertemplate=\"<b>%{x}<\/b><br><br>Total matches won: %{customdata[0]}<br>Total matches lost: %{customdata[1]}<br>Total matches drawn: %{customdata[2]}\")\nfig.update_layout(title=\"Team Performance\", xaxis=dict(title=\"Teams\"), yaxis=dict(title=\"Percentage(%)\"), legend=dict(title=\"Result\"))\n# Update variables name of legend\nfig.data[0].name = \"Won%\"\nfig.data[1].name = \"Lost%\"\nfig.data[2].name = \"Drawn%\"\nfig.show()","fc4ff9cf":"for x,y in df_stat.groupby(\"Team\"):\n    df_sub = pd.crosstab(index=[y[\"Team\"], y[\"Opponent\"]], columns=y[\"Result\"]).reset_index()\n    fig = px.bar(df_sub, x=\"Opponent\", y=[\"Won\", \"Lost\", \"Drawn\"], barmode=\"group\")\n    fig.update_layout(title=dict(text=\"Team \"+x, font=dict(size=20)), xaxis=dict(title=None), yaxis=dict(title=None), legend=dict(title=\"Result\"))\n    fig.update_traces(hovertemplate=\"<b>%{y}<\/b>\")\n    fig.update_yaxes(visible=False)\n    fig.show()","0a296337":"<center><b><span style=\"font-size:2.5em;font-family:Georgia\"> Result summary (Opposition) <\/span><\/b><\/center>","09cf2ac5":"**Conclusion**\n* Australia : Home performance is far better than away conditions.\n* England : Home performance is better than away conditions.\n* India : Away performance is better than home conditions.\n* New Zealand : Away performance is quite high but Home perfomance is worst among all the teams.\n* Pakistan : Seems like condition doesn't metter to this team whether it's home or away.\n* South Africa : Same as Pakistan, performance is almost similar in both condition.\n* Sri Lanka : Sri lanka has highest away percentage of points among all the teams but home performance is not looking good.\n* West Indies : Same scenario as India performance is better in Away conditions.","9d96cfc7":"<b><span style=\"font-size:1.4em;font-family:Georgia\"> For Home Condition <\/span><\/b>","9e894f75":"<b><span style=\"font-size:1.4em;font-family:Georgia\"> For Away Condition <\/span><\/b>","db6e56f6":"<center><b><span style=\"font-size:2.5em;font-family:Georgia\"> Overall performance by each Team <\/span><\/b><\/center>","50b41097":"<center><b><span style=\"font-size:2.5em;font-family:Georgia\"> Home Performance v\/s Away Performance <\/span><\/b><\/center>"}}