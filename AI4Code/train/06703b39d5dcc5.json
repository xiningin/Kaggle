{"cell_type":{"9d09345d":"code","972cb4f4":"code","5c46851c":"code","79281e31":"code","70896cce":"code","68c9223f":"code","9e49d769":"code","e0cdf82e":"code","7cf5f9a3":"code","5b89754c":"code","459d3c41":"code","4bba86cb":"code","6614591d":"code","dda24e73":"markdown","4554cc15":"markdown","b5f326aa":"markdown","ea8f8afa":"markdown","e7fbaf78":"markdown","67896a56":"markdown","f4f9a46d":"markdown","2b57639b":"markdown","ff2c0178":"markdown","479ed1f4":"markdown","6c8de111":"markdown","3ec65071":"markdown","12e6a000":"markdown","4e056f10":"markdown","9505dfd9":"markdown","871e6d21":"markdown","7c826d26":"markdown","30c6b4b4":"markdown"},"source":{"9d09345d":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","972cb4f4":"data = pd.read_csv(r'\/kaggle\/input\/airline-passenger-traffic\/airline-passenger-traffic(1).csv')\ndata.columns = ['Month','Passengers']\ndata['Month'] = pd.to_datetime(data['Month'], format='%Y-%m')\ndata = data.set_index('Month')\ndata.head()","5c46851c":"data.plot(figsize=(20, 4))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic')\nplt.show(block=False)","79281e31":"data = data.assign(Passengers_Linear_Interpolation=data.Passengers.interpolate(method='linear'))\ndata[['Passengers_Linear_Interpolation']].plot(figsize=(20, 4))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic: Linear interpolation')\nplt.show(block=False)","70896cce":"data['Passengers'] = data['Passengers_Linear_Interpolation']\ndata.drop(columns=['Passengers_Linear_Interpolation'],inplace=True)\ndata.head()","68c9223f":"import seaborn as sns\nfig = plt.subplots(figsize=(20, 5))\nax = sns.boxplot(x=data['Passengers'],whis=1.5)","9e49d769":"fig = data.Passengers.hist(figsize = (20,5))","e0cdf82e":"from pylab import rcParams\nimport statsmodels.api as sm\nrcParams['figure.figsize'] = 20,24\ndecomposition = sm.tsa.seasonal_decompose(data.Passengers, model='additive') # additive seasonal index\nfig = decomposition.plot()\nplt.show()","7cf5f9a3":"decomposition = sm.tsa.seasonal_decompose(data.Passengers, model='multiplicative') # multiplicative seasonal index\nfig = decomposition.plot()\nplt.show()","5b89754c":"train_len = 120\ntrain = data[0:train_len] # first 120 months as training set\ntest = data[train_len:] # last 24 months as out-of-time test set","459d3c41":"y_hat_naive = test.copy()\ny_hat_naive['naive_forecast'] = train['Passengers'][train_len-1]","4bba86cb":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(train['Passengers'], label='Train')\nplt.plot(test['Passengers'], label='Test')\nplt.plot(y_hat_naive['naive_forecast'], label='Naive forecast')\nplt.legend(loc='best')\nplt.title('Naive Method')\nplt.show()","6614591d":"from sklearn.metrics import mean_squared_error\nrmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_naive['naive_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_naive['naive_forecast'])\/test['Passengers'])*100,2)\n\nresults = pd.DataFrame({'Method':['Naive method'], 'MAPE': [mape], 'RMSE': [rmse]})\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","dda24e73":"# Time series forecasting","4554cc15":"## Plot time series data","b5f326aa":"## Time series Decomposition","ea8f8afa":"# Time series analysis","e7fbaf78":"## Import required packages","67896a56":"## Outlier detection","f4f9a46d":"### Plot train, test and forecast","2b57639b":"## Missing value treatment","ff2c0178":"### Multiplicative seasonal decomposition","479ed1f4":"### Linear interpolation","6c8de111":"### Calculate RMSE and MAPE","3ec65071":"# Build and evaluate time series forecast","12e6a000":"## Import time series data: Airline passenger traffic","4e056f10":"### Split time series data into training and test set","9505dfd9":"### Histogram plot","871e6d21":"### Box plot and interquartile range","7c826d26":"### Additive seasonal decomposition","30c6b4b4":"### Use linear interpolation to impute missing values"}}