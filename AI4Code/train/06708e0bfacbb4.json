{"cell_type":{"f5c5b5a7":"code","fc4c4707":"code","b6f29d40":"code","0f156420":"code","8a4e60ed":"code","885138d4":"code","1f250171":"code","47ce724b":"code","9170bef1":"code","15edf5d6":"code","6d355820":"code","f68fee09":"markdown","9ea79e2e":"markdown","04b23cf3":"markdown","b3540f72":"markdown","0c10878f":"markdown","593890a0":"markdown","b1b3ab67":"markdown"},"source":{"f5c5b5a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc4c4707":"import spacy","b6f29d40":"train = pd.read_csv('\/kaggle\/input\/commonlitreadabilityprize\/train.csv')\ntrain","0f156420":"test=pd.read_csv('\/kaggle\/input\/commonlitreadabilityprize\/test.csv')\ntest","8a4e60ed":"nlp = spacy.load('en_core_web_lg')\nwith nlp.disable_pipes():\n    train_vectors = np.array([nlp(text).vector for text in train.excerpt])\n    \ntrain_vectors.shape","885138d4":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(train_vectors, train.target,\n                                                    test_size=0.1, random_state=1)","1f250171":"from sklearn.linear_model import LinearRegression\n\nmodel=LinearRegression()\nmodel.fit(X_train, y_train)","47ce724b":"with nlp.disable_pipes():\n    test_vectors = np.array([nlp(text).vector for text in test.excerpt])\n    \ntest_vectors.shape","9170bef1":"test['target'] = model.predict(test_vectors)","15edf5d6":"test[['id','target']]","6d355820":"test[['id','target']].to_csv('submission.csv', index=False)","f68fee09":"## Model","9ea79e2e":"# Baseline for complete beginners","04b23cf3":"## Vectorization of text for training","b3540f72":"## Predicted target","0c10878f":"## Predicting the target","593890a0":"## Train test split","b1b3ab67":"## Vectorization of testset for testing"}}