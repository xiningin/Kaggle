{"cell_type":{"64b60b05":"code","aa846039":"code","4e648b49":"code","30a98b46":"code","c2c4d6b8":"code","36083026":"code","56b0133d":"code","f7c7f670":"code","f759a43d":"code","6412cc9f":"code","4c60ad38":"code","0db4bbb3":"code","f04cb2e4":"code","79f4f2aa":"code","557e4cd2":"code","5859b9f4":"code","01a453df":"code","7b2f1b40":"code","6ccee155":"code","c9a9b2cc":"code","9ab981d5":"code","16913c90":"code","3a1720df":"code","1d91a2a0":"code","fc4eab4b":"code","d178283d":"code","466838a4":"code","46735316":"code","691e4d41":"markdown","b7dfd314":"markdown","3a75e1a2":"markdown","88a724cc":"markdown","5faa7adb":"markdown","6aadf335":"markdown","97f667ab":"markdown","f8243150":"markdown","03c0100c":"markdown","81eebad1":"markdown","c2658bef":"markdown","1b876b68":"markdown","1203f98b":"markdown","7f61ea45":"markdown","90541212":"markdown","c469d2cb":"markdown","38432dec":"markdown","d1b0a1c0":"markdown","40fc3f13":"markdown","8452c80b":"markdown","70780ba5":"markdown","8ad205f7":"markdown","df421b98":"markdown","a3733cfc":"markdown","1b01e69f":"markdown","43060957":"markdown","34ba54ba":"markdown","82ec1814":"markdown","018f265a":"markdown","1401c1e3":"markdown","c12da6c5":"markdown","f37f5fb5":"markdown","ed59a921":"markdown","e388bf1f":"markdown","c9f6f112":"markdown","727169b0":"markdown","4b1f1eac":"markdown","f25097ed":"markdown","fdb938f1":"markdown","af16a8e8":"markdown","ace00da4":"markdown"},"source":{"64b60b05":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom xgboost import XGBRegressor\nfrom sklearn.preprocessing import PolynomialFeatures","aa846039":"df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","4e648b49":"df.head()","30a98b46":"df.shape","c2c4d6b8":"df.info()","36083026":"df.describe().T","56b0133d":"plt.figure(figsize=(10,8))\nsns.heatmap(df.corr(), cmap=\"RdBu\")\nplt.title(\"Correlations Between Variables\", size=15)\nplt.show()","f7c7f670":"important_num_cols = list(df.corr()[\"SalePrice\"][(df.corr()[\"SalePrice\"]>0.50) | (df.corr()[\"SalePrice\"]<-0.50)].index)\ncat_cols = [\"MSZoning\", \"Utilities\",\"BldgType\",\"Heating\",\"KitchenQual\",\"SaleCondition\",\"LandSlope\"]\nimportant_cols = important_num_cols + cat_cols\n\ndf = df[important_cols]","f759a43d":"print(\"Missing Values by Column\")\nprint(\"-\"*30)\nprint(df.isna().sum())\nprint(\"-\"*30)\nprint(\"TOTAL MISSING VALUES:\",df.isna().sum().sum())","6412cc9f":"sns.pairplot(df[important_num_cols])","4c60ad38":"plt.figure(figsize=(10,8))\nsns.jointplot(x=df[\"OverallQual\"], y=df[\"SalePrice\"], kind=\"kde\")\nsns.jointplot(x=df[\"YearBuilt\"], y=df[\"SalePrice\"], kind=\"kde\")\nsns.jointplot(x=df[\"YearRemodAdd\"], y=df[\"SalePrice\"], kind=\"kde\")\nsns.jointplot(x=df[\"TotalBsmtSF\"], y=df[\"SalePrice\"], kind=\"kde\")\nsns.jointplot(x=df[\"1stFlrSF\"], y=df[\"SalePrice\"], kind=\"kde\")\nsns.jointplot(x=df[\"GrLivArea\"], y=df[\"SalePrice\"], kind=\"kde\")\nsns.jointplot(x=df[\"FullBath\"], y=df[\"SalePrice\"], kind=\"kde\")\nsns.jointplot(x=df[\"TotRmsAbvGrd\"], y=df[\"SalePrice\"], kind=\"kde\")\nsns.jointplot(x=df[\"GarageCars\"], y=df[\"SalePrice\"], kind=\"kde\")\nsns.jointplot(x=df[\"GarageArea\"], y=df[\"SalePrice\"], kind=\"kde\")\nplt.show()","0db4bbb3":"X = df.drop(\"SalePrice\", axis=1)\ny = df[\"SalePrice\"]","f04cb2e4":"X = pd.get_dummies(X, columns=cat_cols)","79f4f2aa":"important_num_cols.remove(\"SalePrice\")\n\nscaler = StandardScaler()\nX[important_num_cols] = scaler.fit_transform(X[important_num_cols])","557e4cd2":"X.head()","5859b9f4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","01a453df":"def rmse_cv(model):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=5)).mean()\n    return rmse\n    \n\ndef evaluation(y, predictions):\n    mae = mean_absolute_error(y, predictions)\n    mse = mean_squared_error(y, predictions)\n    rmse = np.sqrt(mean_squared_error(y, predictions))\n    r_squared = r2_score(y, predictions)\n    return mae, mse, rmse, r_squared","7b2f1b40":"models = pd.DataFrame(columns=[\"Model\",\"MAE\",\"MSE\",\"RMSE\",\"R2 Score\",\"RMSE (Cross-Validation)\"])","6ccee155":"lin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)\npredictions = lin_reg.predict(X_test)\n\nmae, mse, rmse, r_squared = evaluation(y_test, predictions)\nprint(\"MAE:\", mae)\nprint(\"MSE:\", mse)\nprint(\"RMSE:\", rmse)\nprint(\"R2 Score:\", r_squared)\nprint(\"-\"*30)\nrmse_cross_val = rmse_cv(lin_reg)\nprint(\"RMSE Cross-Validation:\", rmse_cross_val)\n\nnew_row = {\"Model\": \"LinearRegression\",\"MAE\": mae, \"MSE\": mse, \"RMSE\": rmse, \"R2 Score\": r_squared, \"RMSE (Cross-Validation)\": rmse_cross_val}\nmodels = models.append(new_row, ignore_index=True)","c9a9b2cc":"ridge = Ridge()\nridge.fit(X_train, y_train)\npredictions = ridge.predict(X_test)\n\nmae, mse, rmse, r_squared = evaluation(y_test, predictions)\nprint(\"MAE:\", mae)\nprint(\"MSE:\", mse)\nprint(\"RMSE:\", rmse)\nprint(\"R2 Score:\", r_squared)\nprint(\"-\"*30)\nrmse_cross_val = rmse_cv(ridge)\nprint(\"RMSE Cross-Validation:\", rmse_cross_val)\n\nnew_row = {\"Model\": \"Ridge\",\"MAE\": mae, \"MSE\": mse, \"RMSE\": rmse, \"R2 Score\": r_squared, \"RMSE (Cross-Validation)\": rmse_cross_val}\nmodels = models.append(new_row, ignore_index=True)","9ab981d5":"lasso = Lasso()\nlasso.fit(X_train, y_train)\npredictions = lasso.predict(X_test)\n\nmae, mse, rmse, r_squared = evaluation(y_test, predictions)\nprint(\"MAE:\", mae)\nprint(\"MSE:\", mse)\nprint(\"RMSE:\", rmse)\nprint(\"R2 Score:\", r_squared)\nprint(\"-\"*30)\nrmse_cross_val = rmse_cv(lasso)\nprint(\"RMSE Cross-Validation:\", rmse_cross_val)\n\nnew_row = {\"Model\": \"Lasso\",\"MAE\": mae, \"MSE\": mse, \"RMSE\": rmse, \"R2 Score\": r_squared, \"RMSE (Cross-Validation)\": rmse_cross_val}\nmodels = models.append(new_row, ignore_index=True)","16913c90":"elastic_net = ElasticNet()\nelastic_net.fit(X_train, y_train)\npredictions = elastic_net.predict(X_test)\n\nmae, mse, rmse, r_squared = evaluation(y_test, predictions)\nprint(\"MAE:\", mae)\nprint(\"MSE:\", mse)\nprint(\"RMSE:\", rmse)\nprint(\"R2 Score:\", r_squared)\nprint(\"-\"*30)\nrmse_cross_val = rmse_cv(elastic_net)\nprint(\"RMSE Cross-Validation:\", rmse_cross_val)\n\nnew_row = {\"Model\": \"ElasticNet\",\"MAE\": mae, \"MSE\": mse, \"RMSE\": rmse, \"R2 Score\": r_squared, \"RMSE (Cross-Validation)\": rmse_cross_val}\nmodels = models.append(new_row, ignore_index=True)","3a1720df":"svr = SVR(C=100000)\nsvr.fit(X_train, y_train)\npredictions = svr.predict(X_test)\n\nmae, mse, rmse, r_squared = evaluation(y_test, predictions)\nprint(\"MAE:\", mae)\nprint(\"MSE:\", mse)\nprint(\"RMSE:\", rmse)\nprint(\"R2 Score:\", r_squared)\nprint(\"-\"*30)\nrmse_cross_val = rmse_cv(svr)\nprint(\"RMSE Cross-Validation:\", rmse_cross_val)\n\nnew_row = {\"Model\": \"SVR\",\"MAE\": mae, \"MSE\": mse, \"RMSE\": rmse, \"R2 Score\": r_squared, \"RMSE (Cross-Validation)\": rmse_cross_val}\nmodels = models.append(new_row, ignore_index=True)","1d91a2a0":"random_forest = RandomForestRegressor(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\npredictions = random_forest.predict(X_test)\n\nmae, mse, rmse, r_squared = evaluation(y_test, predictions)\nprint(\"MAE:\", mae)\nprint(\"MSE:\", mse)\nprint(\"RMSE:\", rmse)\nprint(\"R2 Score:\", r_squared)\nprint(\"-\"*30)\nrmse_cross_val = rmse_cv(random_forest)\nprint(\"RMSE Cross-Validation:\", rmse_cross_val)\n\nnew_row = {\"Model\": \"RandomForestRegressor\",\"MAE\": mae, \"MSE\": mse, \"RMSE\": rmse, \"R2 Score\": r_squared, \"RMSE (Cross-Validation)\": rmse_cross_val}\nmodels = models.append(new_row, ignore_index=True)","fc4eab4b":"xgb = XGBRegressor(n_estimators=1000, learning_rate=0.01)\nxgb.fit(X_train, y_train)\npredictions = xgb.predict(X_test)\n\nmae, mse, rmse, r_squared = evaluation(y_test, predictions)\nprint(\"MAE:\", mae)\nprint(\"MSE:\", mse)\nprint(\"RMSE:\", rmse)\nprint(\"R2 Score:\", r_squared)\nprint(\"-\"*30)\nrmse_cross_val = rmse_cv(xgb)\nprint(\"RMSE Cross-Validation:\", rmse_cross_val)\n\nnew_row = {\"Model\": \"XGBRegressor\",\"MAE\": mae, \"MSE\": mse, \"RMSE\": rmse, \"R2 Score\": r_squared, \"RMSE (Cross-Validation)\": rmse_cross_val}\nmodels = models.append(new_row, ignore_index=True)","d178283d":"poly_reg = PolynomialFeatures(degree=2)\nX_train_2d = poly_reg.fit_transform(X_train)\nX_test_2d = poly_reg.transform(X_test)\n\nlin_reg = LinearRegression()\nlin_reg.fit(X_train_2d, y_train)\npredictions = lin_reg.predict(X_test_2d)\n\nmae, mse, rmse, r_squared = evaluation(y_test, predictions)\nprint(\"MAE:\", mae)\nprint(\"MSE:\", mse)\nprint(\"RMSE:\", rmse)\nprint(\"R2 Score:\", r_squared)\nprint(\"-\"*30)\nrmse_cross_val = rmse_cv(lin_reg)\nprint(\"RMSE Cross-Validation:\", rmse_cross_val)\n\nnew_row = {\"Model\": \"Polynomial Regression (degree=2)\",\"MAE\": mae, \"MSE\": mse, \"RMSE\": rmse, \"R2 Score\": r_squared, \"RMSE (Cross-Validation)\": rmse_cross_val}\nmodels = models.append(new_row, ignore_index=True)","466838a4":"models.sort_values(by=\"RMSE (Cross-Validation)\")","46735316":"plt.figure(figsize=(12,8))\nsns.barplot(x=models[\"Model\"], y=models[\"RMSE (Cross-Validation)\"])\nplt.title(\"Models' RMSE Scores (Cross-Validated)\", size=15)\nplt.xticks(rotation=30, size=12)\nplt.show()","691e4d41":"<h1 style=\"font-family: 'Times New Roman'; letter-spacing: 0.08em;\">Importing the Essential Libraries, Metrics<\/h1>","b7dfd314":"<h1 style=\"font-family: 'Times New Roman'; letter-spacing: 0.08em;\">Standardizing the Data<\/h1>","3a75e1a2":"<h1 style=\"font-family: 'Times New Roman'; letter-spacing: 0.08em;\">Exploratory Data Analysis<\/h1>","88a724cc":"***Taking a look at the first 5 rows of the dataset***","5faa7adb":"<center><img width=\"300px\" src=\"https:\/\/www.thoughtco.com\/thmb\/gItmqGd5HlnhyPIiLm1YHXOlTnw=\/330x242\/filters:fill(auto,1)\/zscore-56a8fa785f9b58b7d0f6e87b.GIF\"><\/center>","6aadf335":"***Checking the shape\u2014i.e. size\u2014of the data***","97f667ab":"***As you can see, standardization is done successfully***","f8243150":"***Splitting the data into Train and Test chunks for better evaluation***","03c0100c":"***We are selecting numerical features which have more than 0.50 or less than -0.50 correlation rate based on Pearson Correlation Method\u2014which is the default value of parameter \"method\" in corr() function. As for selecting categorical features, I selected the categorical values which I believe have significant effect on the target variable such as Heating and MSZoning.***","81eebad1":"<h1 style=\"font-family: 'Times New Roman'; letter-spacing: 0.08em;\">Loading the Data<\/h1>","c2658bef":"***Visualizing the Correlation between each column and the target variable using jointplot visualization***","1b876b68":"<h1 style=\"font-family: 'Times New Roman'; letter-spacing: 0.08em;\">X, y Split<\/h1>","1203f98b":"<h1 style=\"font-family: 'Times New Roman'; letter-spacing: 0.08em;\">Model Comparison<\/h1>","7f61ea45":"<h1 style=\"font-family: 'Times New Roman'; letter-spacing: 0.08em;\">Feature Selection<\/h1>","90541212":"<h2 style=\"font-family: 'Times New Roman'; letter-spacing: 0.05em;\">Elastic Net<\/h2>","c469d2cb":"<h2 style=\"font-family: 'Times New Roman'; letter-spacing: 0.05em;\">Polynomial Regression (Degree=2)<\/h2>","38432dec":"<h2 style=\"font-family: 'Times New Roman'; letter-spacing: 0.05em;\">Random Forest Regressor<\/h2>","d1b0a1c0":"***Encoding the categorical features in X dataset by using One-Hot Encoding method***","40fc3f13":"***Learning the dtypes of columns' and how many non-null values are there in those columns***","8452c80b":"<center><h1 style=\"font-size:35px; font-family: 'Times New Roman'; letter-spacing: 0.1em;\">House Price Prediction \ud83c\udfe1<\/h1><\/center>","70780ba5":"<h1 style=\"font-family: 'Times New Roman'; letter-spacing: 0.08em;\">Train-Test Split<\/h1>","8ad205f7":"<h1 style=\"font-family: 'Times New Roman'; letter-spacing: 0.08em;\">One-Hot Encoding<\/h1>","df421b98":"***Defining several evaluation functions for convenience***","a3733cfc":"<h2 style=\"font-family: 'Times New Roman'; letter-spacing: 0.05em;\">Support Vector Machines<\/h2>","1b01e69f":"***Getting the statistical summary of dataset***","43060957":"<h2 style=\"font-family: 'Times New Roman'; letter-spacing: 0.05em;\">About the Dataset<\/h2>","34ba54ba":"* **SalePrice** - the property's sale price in dollars. This is the target variable that you're trying to predict.\n* **MSSubClass**: The building class\n* **MSZoning**: The general zoning classification\n* **LotFrontage**: Linear feet of street connected to property\n* **LotArea**: Lot size in square feet\n* **Street**: Type of road access\n* **Alley**: Type of alley access\n* **LotShape**: General shape of property\n* **LandContour**: Flatness of the property\n* **Utilities**: Type of utilities available\n* **LotConfig**: Lot configuration\n* **LandSlope**: Slope of property\n* **Neighborhood**: Physical locations within Ames city limits\n* **Condition1**: Proximity to main road or railroad\n* **Condition2**: Proximity to main road or railroad (if a second is present)\n* **BldgType**: Type of dwelling\n* **HouseStyle**: Style of dwelling\n* **OverallQual**: Overall material and finish quality\n* **OverallCond**: Overall condition rating\n* **YearBuilt**: Original construction date\n* **YearRemodAdd**: Remodel date\n* **RoofStyle**: Type of roof\n* **RoofMatl**: Roof material\n* **Exterior1st**: Exterior covering on house\n* **Exterior2nd**: Exterior covering on house (if more than one material)\n* **MasVnrType**: Masonry veneer type\n* **MasVnrArea**: Masonry veneer area in square feet\n* **ExterQual**: Exterior material quality\n* **ExterCond**: Present condition of the material on the exterior\n* **Foundation**: Type of foundation\n* **BsmtQual**: Height of the basement\n* **BsmtCond**: General condition of the basement\n* **BsmtExposure**: Walkout or garden level basement walls\n* **BsmtFinType1**: Quality of basement finished area\n* **BsmtFinSF1**: Type 1 finished square feet\n* **BsmtFinType2**: Quality of second finished area (if present)\n* **BsmtFinSF2**: Type 2 finished square feet\n* **BsmtUnfSF**: Unfinished square feet of basement area\n* **TotalBsmtSF**: Total square feet of basement area\n* **Heating**: Type of heating\n* **HeatingQC**: Heating quality and condition\n* **CentralAir**: Central air conditioning\n* **Electrical**: Electrical system\n* **1stFlrSF**: First Floor square feet\n* **2ndFlrSF**: Second floor square feet\n* **LowQualFinSF**: Low quality finished square feet (all floors)\n* **GrLivArea**: Above grade (ground) living area square feet\n* **BsmtFullBath**: Basement full bathrooms\n* **BsmtHalfBath**: Basement half bathrooms\n* **FullBath**: Full bathrooms above grade\n* **HalfBath**: Half baths above grade\n* **Bedroom**: Number of bedrooms above basement level\n* **Kitchen**: Number of kitchens\n* **KitchenQual**: Kitchen quality\n* **TotRmsAbvGrd**: Total rooms above grade (does not include bathrooms)\n* **Functional**: Home functionality rating\n* **Fireplaces**: Number of fireplaces\n* **FireplaceQu**: Fireplace quality\n* **GarageType**: Garage location\n* **GarageYrBlt**: Year garage was built\n* **GarageFinish**: Interior finish of the garage\n* **GarageCars**: Size of garage in car capacity\n* **GarageArea**: Size of garage in square feet\n* **GarageQual**: Garage quality\n* **GarageCond**: Garage condition\n* **PavedDrive**: Paved driveway\n* **WoodDeckSF**: Wood deck area in square feet\n* **OpenPorchSF**: Open porch area in square feet\n* **EnclosedPorch**: Enclosed porch area in square feet\n* **3SsnPorch**: Three season porch area in square feet\n* **ScreenPorch**: Screen porch area in square feet\n* **PoolArea**: Pool area in square feet\n* **PoolQC**: Pool quality\n* **Fence**: Fence quality\n* **MiscFeature**: Miscellaneous feature not covered in other categories\n* **MiscVal**: Value of miscellaneous feature\n* **MoSold**: Month Sold\n* **YrSold**: Year Sold\n* **SaleType**: Type of sale\n* **SaleCondition**: Condition of sale","82ec1814":"<h2 style=\"font-family: 'Times New Roman'; letter-spacing: 0.05em;\">Lasso Regression<\/h2>","018f265a":"<h2 style=\"font-family: 'Times New Roman'; letter-spacing: 0.05em;\">XGBoost Regressor<\/h2>","1401c1e3":"***Splitting the data into X and y chunks***","c12da6c5":"***Checking for the missing values***","f37f5fb5":"***Visualizing the Correlation between the numerical variables using pairplot visualization***","ed59a921":"***Standardizing the numerical columns in X dataset. StandardScaler() adjusts the mean of the features as 0 and standard deviation of features as 1. Formula that StandardScaler() uses is as follows:***","e388bf1f":"<center><img src=\"https:\/\/images.unsplash.com\/photo-1516156008625-3a9d6067fab5?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"><\/center>","c9f6f112":"***Visualizing the correlations between numerical variables***","727169b0":"<h1 style=\"font-family: 'Times New Roman'; letter-spacing: 0.08em;\">Data Visualization<\/h1>","4b1f1eac":"<center><h2 style=\"font-family: 'Times New Roman'; letter-spacing: 0.03em;\">Thank you so much for reading notebook. Preparing this notebook took me a great deal of time. If you liked it, please do not forget to give upvote. Peace Out \u270c\ufe0f ...<\/h2><\/center>","f25097ed":"<h1 style=\"font-family: 'Times New Roman'; letter-spacing: 0.08em;\">Machine Learning Models<\/h1>","fdb938f1":"***The less the Root Mean Squared Error (RMSE), The better the model is.***","af16a8e8":"<h2 style=\"font-family: 'Times New Roman'; letter-spacing: 0.05em;\">Ridge Regression<\/h2>","ace00da4":"<h2 style=\"font-family: 'Times New Roman'; letter-spacing: 0.05em;\">Linear Regression<\/h2>"}}