{"cell_type":{"f818c7b6":"code","e0e43dea":"code","c69e0769":"code","34bead8d":"code","541f3318":"code","e346276a":"code","7050e729":"code","c7dd5f7f":"code","ba2f7287":"code","508aa00a":"code","0634ba68":"code","a5e1e90c":"code","727c6bf8":"code","091ce909":"code","e07dad8e":"code","81940cb6":"code","50501a11":"code","c798b1f3":"code","09fcc866":"code","ed770de4":"code","efa281e7":"code","7987c4bc":"markdown","e4aaa2aa":"markdown","2b9bbbfa":"markdown","d36a1437":"markdown","f1d3ad9d":"markdown","83721be0":"markdown","e25842ef":"markdown","d1287f39":"markdown","e2d8b9ef":"markdown","9f4f93d7":"markdown","5fe0d8dc":"markdown","c25773b0":"markdown","b208596c":"markdown","05c055e7":"markdown","ad946579":"markdown","3d3124ec":"markdown","9241ca4b":"markdown","73956921":"markdown"},"source":{"f818c7b6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e0e43dea":"df=pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')","c69e0769":"#show first 5 rows in data\ndf.head()","34bead8d":"print('Number of row are',df.shape[0], 'Number of columns are', df.shape[1])","541f3318":"dict={}\nfor i in list(df.columns):\n    dict[i]=df[i].isnull().sum()\npd.DataFrame(dict,index=['number of null values']).transpose() ","e346276a":"df.info()","7050e729":"cat_cols = ['sex','exng','caa','cp','fbs','restecg','slp','thall']\ncon_cols = [\"age\",\"trtbps\",\"chol\",\"thalachh\",\"oldpeak\"]\ntarget_col = [\"output\"]\nprint(\"The categorial cols are : \", cat_cols)\nprint(\"The continuous cols are : \", con_cols)\nprint(\"The target variable is :  \", target_col)","c7dd5f7f":"df[con_cols].describe().transpose()","ba2f7287":"df_corr=df[con_cols].corr()\ndf_corr","508aa00a":"fig=plt.figure(figsize=(10,10))\ngs=fig.add_gridspec(1,1)\nax0=fig.add_subplot(gs[0,0])\nax0.text(1.5,-0.1,\"Correlation Matrix\",fontsize=22, fontweight='bold', fontfamily='serif', color=\"#000000\")\nsns.heatmap(df_corr,fmt=\".1f\",annot=True,cmap='YlGnBu')\nplt.show()","0634ba68":"x=(df.sex.value_counts())\nprint(f'Number of people having sex as 1 are {x[0]} and Number of people having sex as 0 are {x[1]}')\np = sns.countplot(data=df, x=\"sex\")\nplt.show()","a5e1e90c":"fig = plt.figure(figsize=(18,15))\ngs = fig.add_gridspec(3,3)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[0,2])\nax3 = fig.add_subplot(gs[1,0])\nax4 = fig.add_subplot(gs[1,1])\nax5 = fig.add_subplot(gs[1,2])\nax6 = fig.add_subplot(gs[2,0])\nax7 = fig.add_subplot(gs[2,1])\nax8 = fig.add_subplot(gs[2,2])\n\nbackground_color = \"#ffe6e6\"\ncolor_palette = [\"#800000\",\"#8000ff\",\"#6aac90\",\"#5833ff\",\"#da8829\"]\nfig.patch.set_facecolor(background_color) \n\nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color) \nax2.set_facecolor(background_color) \nax3.set_facecolor(background_color) \nax4.set_facecolor(background_color) \nax5.set_facecolor(background_color) \nax6.set_facecolor(background_color) \nax7.set_facecolor(background_color) \nax8.set_facecolor(background_color) \n\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.tick_params(left=False, bottom=False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.text(0.5,0.5,\n         'Count plot for various\\n categorical features\\n_________________',\n         horizontalalignment='center',\n         verticalalignment='center',\n         fontsize=18, fontweight='bold',\n         fontfamily='serif',\n         color=\"#000000\")\n# Sex count\nax1.text(0.3, 220, 'Sex', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax1,data=df,x='sex',palette=color_palette)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\n# Exng count\nax2.text(0.3, 220, 'Exng', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax2,data=df,x='exng',palette=color_palette)\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\n\n# Caa count\nax3.text(1.5, 200, 'Caa', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax3,data=df,x='caa',palette=color_palette)\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\n# Cp count\nax4.text(1.5, 162, 'Cp', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax4.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax4,data=df,x='cp',palette=color_palette)\nax4.set_xlabel(\"\")\nax4.set_ylabel(\"\")\n\n# Fbs count\nax5.text(0.5, 290, 'Fbs', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax5,data=df,x='fbs',palette=color_palette)\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\n# Restecg count\nax6.text(0.75, 165, 'Restecg', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax6.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax6,data=df,x='restecg',palette=color_palette)\nax6.set_xlabel(\"\")\nax6.set_ylabel(\"\")\n\n# Slp count\nax7.text(0.85, 155, 'Slp', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax7.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax7,data=df,x='slp',palette=color_palette)\nax7.set_xlabel(\"\")\nax7.set_ylabel(\"\")\n\n# Thall count\nax8.text(1.2, 180, 'Thall', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax8.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax8,data=df,x='thall',palette=color_palette)\nax8.set_xlabel(\"\")\nax8.set_ylabel(\"\")\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)\n    ax6.spines[s].set_visible(False)\n    ax7.spines[s].set_visible(False)\n    ax8.spines[s].set_visible(False)","727c6bf8":"fig = plt.figure(figsize=(18,16))\ngs = fig.add_gridspec(2,3)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[0,2])\nax3 = fig.add_subplot(gs[1,0])\nax4 = fig.add_subplot(gs[1,1])\nax5 = fig.add_subplot(gs[1,2])\n\nbackground_color = \"#ffe6e6\"\ncolor_palette = [\"#800000\",\"#8000ff\",\"#6aac90\",\"#5833ff\",\"#da8829\"]\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color) \nax2.set_facecolor(background_color) \nax3.set_facecolor(background_color) \nax4.set_facecolor(background_color) \nax5.set_facecolor(background_color) \n\n# Title of the plot\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.tick_params(left=False, bottom=False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.text(0.5,0.5,\n         'Boxen plot for various\\n continuous features\\n_________________',\n         horizontalalignment='center',\n         verticalalignment='center',\n         fontsize=18, fontweight='bold',\n         fontfamily='serif',\n         color=\"#000000\")\n\n# Age \nax1.text(-0.05, 81, 'Age', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax1,y=df['age'],palette=[\"#800000\"],width=0.6)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\n# Trtbps \nax2.text(-0.05, 208, 'Trtbps', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax2,y=df['trtbps'],palette=[\"#8000ff\"],width=0.6)\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\n\n# Chol \nax3.text(-0.05, 600, 'Chol', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax3,y=df['chol'],palette=[\"#6aac90\"],width=0.6)\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\n# Thalachh \nax4.text(-0.09, 210, 'Thalachh', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax4.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax4,y=df['thalachh'],palette=[\"#5833ff\"],width=0.6)\nax4.set_xlabel(\"\")\nax4.set_ylabel(\"\")\n\n# oldpeak \nax5.text(-0.1, 6.6, 'Oldpeak', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax5,y=df['oldpeak'],palette=[\"#da8829\"],width=0.6)\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)","091ce909":"fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2,figsize=(12,8))\nsns.histplot(ax=ax1,x=df.age, color=\"red\", label=\"Age\", kde= True)\nsns.histplot(df.trtbps , color=\"green\", label=\"Resting Blood Pressure\", kde= True,ax=ax2)\nplt.tight_layout()","e07dad8e":"# Scaling\nfrom sklearn.preprocessing import RobustScaler\n\n# Train Test Split\nfrom sklearn.model_selection import train_test_split\n\n# Models\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier ,RandomForestRegressor\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Metrics\nfrom sklearn.metrics import accuracy_score, classification_report, roc_curve ,confusion_matrix\n\n# Cross Validation\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n","81940cb6":"df1=df\n# define the columns to be encoded and scaled\ncat_cols = ['sex','exng','caa','cp','fbs','restecg','slp','thall']\ncon_cols = [\"age\",\"trtbps\",\"chol\",\"thalachh\",\"oldpeak\"]\n\ndf1=pd.get_dummies(df1,columns=cat_cols, drop_first = True)\nX=df1.drop(['output'],axis=1)\nY=df1.output\nscaler=RobustScaler()\nX[con_cols]=scaler.fit_transform(X[con_cols])\nX.head()","50501a11":"X_train, X_test, y_train, y_test = train_test_split(X,Y, test_size = 0.2 ,random_state = 100)\nprint(\"The shape of X_train is      \", X_train.shape)\nprint(\"The shape of X_test is       \",X_test.shape)\nprint(\"The shape of y_train is      \",y_train.shape)\nprint(\"The shape of y_test is       \",y_test.shape)","c798b1f3":"model = LogisticRegression()\nmodel.fit(X_train, y_train)\npredicted=model.predict(X_test)\nconf = confusion_matrix(y_test, predicted)\nprint (\"Confusion Matrix : \\n\", conf)\nprint()\nprint()\nprint (\"The accuracy of Logistic Regression is : \", accuracy_score(y_test, predicted)*100, \"%\")","09fcc866":"fig=plt.figure(figsize=(8,5))\ngs=fig.add_gridspec(1,1)\nax0=fig.add_subplot(gs[0,0])\nax0.text(0.45,-0.1,\"Confusion Matrix\",fontsize=22, fontweight='bold', fontfamily='serif', color=\"#000000\")\nsns.heatmap(conf , annot=True, annot_kws={\"size\": 16},fmt=\".1f\",cmap='YlGnBu' );","ed770de4":"model = SVC()\nmodel.fit(X_train, y_train)\n  \npredicted = model.predict(X_test)\nprint(\"The accuracy of SVM is : \", accuracy_score(y_test, predicted)*100, \"%\")","efa281e7":"model = RandomForestRegressor(n_estimators = 100, random_state = 0)  \nmodel.fit(X_train, y_train)  \npredicted = model.predict(X_test)\nprint(\"The accuracy of Random Forest is : \", accuracy_score(y_test, predicted.round())*100, \"%\")","7987c4bc":"#### Checking for null values","e4aaa2aa":"## Model of RandomForest","2b9bbbfa":"### Boxen plot of continuous features","d36a1437":"##### about the Dataset :\n\n\nage: Age of the patient\n\nsex: Sex of the patient\n\ncp: Chest pain type, 0 = Typical Angina, 1 = Atypical Angina, 2 = Non-anginal Pain, 3 = Asymptomatic\n\ntrtbps: Resting blood pressure (in mm Hg)\n\nchol: Cholestoral in mg\/dl fetched via BMI sensor\n\nfbs: (fasting blood sugar > 120 mg\/dl), 1 = True, 0 = False\n\nrestecg: Resting electrocardiographic results, 0 = Normal, 1 = ST-T wave normality, 2 = Left ventricular hypertrophy\n\nthalachh: Maximum heart rate achieved\n\noldpeak: Previous peak\n\nslp: Slope\n\ncaa: Number of major vessels\n\nthall: Thalium Stress Test result ~ (0,3)\n\nexng: Exercise induced angina ~ 1 = Yes, 0 = No\n\noutput: Target variable\n\n","f1d3ad9d":"## Model Of LogisticRegression","83721be0":"#### Reading The Dateset","e25842ef":"#### chicking statistical data","d1287f39":"#### Checking For datatypes of the attributes","e2d8b9ef":"#### conclusion : People having gender as 0 are more than twice the people having gender as 1","9f4f93d7":"### Correlation matrix of continuous features","5fe0d8dc":"# Conclusion\n\nMost of the models are performing really well.","c25773b0":"  # \u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164Heart Attack","b208596c":"# \u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164\u3164Data Visualization\n","05c055e7":"#### Train and test split","ad946579":"#### Separating the columns in categorical and continuous","3d3124ec":"#### Scaling and Encoding features","9241ca4b":"#### Checking the shape of DataFrame","73956921":"## Model of Support Vector Machine"}}