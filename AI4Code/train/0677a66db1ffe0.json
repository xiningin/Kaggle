{"cell_type":{"3bf0811c":"code","4a949f80":"code","842a760e":"code","b6b82bca":"code","483731d3":"code","b64e17e7":"code","13ab34dc":"code","0cb86140":"code","1c340041":"code","282340a6":"code","64f91af6":"code","417fc647":"code","9953f4a1":"code","9e7def75":"code","28c9bcf3":"code","44099156":"code","f5ee45fc":"code","6604063a":"code","93de671d":"code","7fffc734":"code","0c4ee228":"code","a40df016":"code","25f401b9":"code","836f9a0d":"code","bc462e38":"code","b64529fc":"code","3fed4215":"code","cb1bf5c9":"code","a3b6be3c":"code","649063fc":"code","61ff4eb0":"code","259bdca7":"code","afefd497":"code","369e2e45":"code","1815d349":"code","a796ade3":"code","5057f652":"code","0dfb7703":"code","2726c4ac":"code","c85d2a36":"code","1ce0a4db":"code","82839dd1":"code","fc3967fe":"code","f501f529":"code","65f7cb5b":"code","01477698":"code","73053b41":"code","1aa59e42":"code","ee85348a":"markdown","248e4a29":"markdown","ffdfec2b":"markdown","44888966":"markdown","ed03961a":"markdown","5ced1b7d":"markdown","9191c185":"markdown","b5713bf3":"markdown","40795d42":"markdown","0714ec1d":"markdown","7a0877dc":"markdown","aa7bcfa3":"markdown","5dc944fa":"markdown","aab843cf":"markdown","fe6dc1b0":"markdown","20b49102":"markdown","95b5c7bb":"markdown","54544f51":"markdown","ab35db51":"markdown","5fab2acd":"markdown","7b41c49c":"markdown"},"source":{"3bf0811c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom collections import Counter\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4a949f80":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_Passenger_Id= test_df[\"PassengerId\"]","842a760e":"train_df.columns","b6b82bca":"train_df.columns","483731d3":"train_df.head()","b64e17e7":"train_df.describe()","13ab34dc":"train_df.info()","0cb86140":"train_df.Parch.unique()","1c340041":"train_df.Pclass.unique()","282340a6":"train_df.SibSp.unique()","64f91af6":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex: \"Sex\"\n    output: bar plot & value count  \n    \n    \"\"\"\n    #get feature\n    var= train_df[variable]\n    print(var)\n    \n    varValue=var.value_counts()\n    \n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable, varValue))\n    ","417fc647":"category1=[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","9953f4a1":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","9e7def75":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} ditribution with hist\".format(variable))\n    plt.show()\n    ","28c9bcf3":"numericVar=[\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","44099156":"#pclass and survived\n\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","f5ee45fc":"#sex and survived\n\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)\n","6604063a":"#Sibsp and survived\n\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","93de671d":"def detect_outliers(df,features):\n    outlier_indices=[]\n    \n    for c in features:\n        Q1=np.percentile(df[c],25)\n     \n        Q3=np.percentile(df[c],75)\n        IQR=Q3-Q1\n        outlier_step=IQR*1.5\n        outlier_list_col=df[(df[c]<Q1-outlier_step) | (df[c] > Q3 + outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices=Counter(outlier_indices)\n\n    multiple_outliers=list(i for i, v in outlier_indices.items() if v >2)\n \n    return multiple_outliers\n        \n        ","7fffc734":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","0c4ee228":"#drop outliers\n\ntrain_df=train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","a40df016":"train_df_len=len(train_df)\ntrain_df=pd.concat([train_df,test_df], axis=0).reset_index(drop=True)","25f401b9":"train_df.head()","836f9a0d":"train_df.columns.unique()","bc462e38":"train_df.columns[train_df.isnull().any()]","b64529fc":"train_df.Survived.value_counts()","3fed4215":"train_df.isnull().sum()","cb1bf5c9":"train_df[train_df[\"Embarked\"].isnull()]","a3b6be3c":"train_df.boxplot(column=\"Fare\", by=\"Embarked\")\nplt.show()","649063fc":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","61ff4eb0":"train_df[train_df[\"Fare\"].isnull()]","259bdca7":"train_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","afefd497":"train_df[train_df[\"Fare\"].isnull()]","369e2e45":"list1=[\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True, fmt=\".2f\")\nplt.show()","1815d349":"g=sns.factorplot(x=\"SibSp\",y=\"Survived\",data=train_df,kind=\"bar\", size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","a796ade3":"g=sns.factorplot(x=\"Parch\", y=\"Survived\", kind=\"bar\", data=train_df, size=6)\ng.set_ylabels(\"Sruvived Probability\")\nplt.show()","5057f652":"g=sns.factorplot(x=\"Pclass\", y=\"Survived\", kind=\"bar\", data=train_df, size=6)\ng.set_ylabels(\"Sruvived Probability\")\nplt.show()","0dfb7703":"g=sns.FacetGrid(train_df,col=\"Survived\")\ng.map(sns.distplot,\"Age\", bins=25)\nplt.show()","2726c4ac":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","c85d2a36":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","1ce0a4db":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","82839dd1":"train_df[train_df[\"Age\"].isnull()]","fc3967fe":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","f501f529":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","65f7cb5b":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","01477698":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","73053b41":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","1aa59e42":"train_df[train_df[\"Age\"].isnull()]","ee85348a":"<a id=\"3\"><\/a> \n\n### -Categorical Variable","248e4a29":"<a id=\"5\"><\/a> \n\n### -Numerical Variable","ffdfec2b":"<a id=\"10\"><\/a> \n\n## Fill Missing Value\n\n- Embarked has 2 missing value\n- Fare has only 1","44888966":"<a id=\"15\"><\/a>\n\n## Pclass -- Survived","ed03961a":"<a id=\"17\"><\/a>\n\n## Pclass -- Survived -- Age","5ced1b7d":"<a id=\"11\"><\/a>\n\n# Visualization\n\n","9191c185":"<font color=\"blue\"\/>\n<a id=\"1\"><\/a>\n\n## 1.Load and Check Data","b5713bf3":"<a id=\"8\"><\/a> \n\n# Missing Value\n\n*Find Missing Value\n\n*Fill Missing Value\n","40795d42":"<a id=\"18\"><\/a>\n\n## Embarked -- Sex -- Pclass -- Survived","0714ec1d":"# Introduction\n\n<font color=\"blue\"\/>\n\nContent\n\n\n1.[Load and check data](#1)\n\n2.[Variable Description](#2)\n\n*[Univariate Variable Analysis](#3)\n\n-[Categorical Variable](#4)\n\n-[Numerical Variable](#5)\n\n3.[Basic Data Analysis](#6)\n\n4.[Outlier Detection](#7)\n\n5.[Missing Value](#8)\n\n*[Find Missing Value](#9)\n\n*[Fill Missing Value](#10)\n\n5.[Visualization](#11)\n\n*[Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n\n*[SibSp -- Survived](#13)\n\n*[Parch -- Survived](#14)\n\n*[Pclass -- Survived](#15)\n\n*[Age -- Survived](#16)\n\n*[Embarked -- Sex -- Pclass -- Survived](#18)\n\n*[Embarked -- Sex -- Fare -- Survived](#19)\n\n*[Fill Missing: Age Feature](#20)\n\n\n\n\n","7a0877dc":"<a id=\"20\"><\/a>\n\n## Fill Missing: Age Feature","aa7bcfa3":"\n\n<a id=\"2\"><\/a> \n\n## 2.Variable Description\n\nPassengerId: unique id number to each passenger\n\nSurvived: passenger survive(1) or died(0)\n\nPclass: passenger class\n\nName: name\n\nSex: gender of passenger\n\nAge: age of passenger\n\nSibSp: number of siblings\/spouses\n\nParch: number of parents\/children\n\nTicket: ticket number\n\nFare: amount of money spent on ticket\n\nCabin: cabin category\n\nEmbarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","5dc944fa":"<a id=\"16\"><\/a>\n\n## Age -- Survived","aab843cf":"<a id=\"19\"><\/a>\n\nEmbarked -- Sex -- Fare -- Survived","fe6dc1b0":"<a id=\"13\"><\/a>\n\n## SibSp -- Survived","20b49102":"<a id=\"7\"><\/a> \n\n# Outlier Detection","95b5c7bb":"<a id=\"9\"><\/a> \n\n## Find Missing Value","54544f51":"<a id=\"12\"><\/a>\n\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","ab35db51":"<a id=\"14\"><\/a>\n\n## Parch -- Survived","5fab2acd":"<a id=\"6\"><\/a> \n\n## Basic Data Analysis\n\n-Pclass - Survived\n\n-Sex - Survived\n\n-SibSp - Survived\n\n-Parch - Survived","7b41c49c":"\n<a id=\"3\"><\/a> \n\n## *Univariate Variable Analysis\n\n-Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n\n-Numerical Variable: Fare, age and passengerId"}}