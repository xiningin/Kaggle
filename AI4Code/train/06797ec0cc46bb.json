{"cell_type":{"daf3e7b6":"code","1d48ff89":"code","7c800b81":"code","70516aa7":"code","21c1db89":"code","d88352ec":"code","83a96613":"code","6d7b91d0":"code","fec2c25a":"code","4c9c6c29":"code","eb8d6882":"code","8d60f671":"code","cf046250":"code","7e106323":"code","3b1b014d":"code","ae93a1ac":"code","cba70128":"code","0e6fd498":"code","be3ac808":"code","d63f9960":"code","e0235cde":"code","084a904c":"code","47534feb":"code","72cf1775":"code","e4be4ba9":"code","a7dca522":"code","a2e4fe69":"code","92fd3a9c":"code","dac4650a":"code","d18ca0fb":"code","9a312c27":"code","d7ecb7e1":"code","7ea2157b":"code","3de97c68":"code","a9812f2c":"code","2bbc8541":"code","af5b900f":"code","38fba1bb":"code","22cabf2f":"code","5016cfda":"code","87994a25":"code","3cfcc7b0":"code","d47e14a3":"code","44c5e8ef":"code","c1e91aec":"code","c76d9155":"code","8ab9e06f":"code","8171946b":"code","61133119":"code","2db85d11":"code","32541282":"code","7488e630":"code","ac898154":"code","5cb21338":"code","f758c192":"code","a868a8c5":"code","22e4e62e":"code","3340c647":"markdown","a5890d06":"markdown","50436200":"markdown","7d326c60":"markdown","f841ed1d":"markdown","69851c7b":"markdown","7231871d":"markdown","fd8074a7":"markdown","aea07957":"markdown","49905208":"markdown","07143a4f":"markdown","33a6ad54":"markdown","3d53f2d8":"markdown","98c5e237":"markdown","17bb30cd":"markdown","d9a8aa8f":"markdown","a4a87250":"markdown","60a1ad52":"markdown","b3f88501":"markdown","aae89267":"markdown","9398d940":"markdown","ebc8e7a9":"markdown","e3f81d52":"markdown","7d2504b3":"markdown","bd41e57f":"markdown","7d0a6d06":"markdown","871d267e":"markdown","4b0ea43e":"markdown","dbcb1732":"markdown","cf63ed61":"markdown","7b46902d":"markdown","f7db963f":"markdown","ed528288":"markdown","b2d4a71a":"markdown","5346db3f":"markdown"},"source":{"daf3e7b6":"import numpy as np\nimport pandas as pd","1d48ff89":"#Reading data from the file path.\ntrain_df=pd.read_csv(\"..\/input\/titanic\/train.csv\", index_col='PassengerId')\ntest_df=pd.read_csv(\"..\/input\/titanic\/test.csv\", index_col='PassengerId')","7c800b81":"#Training data info\ntrain_df.info()","70516aa7":"#Test data info\ntest_df.info()","21c1db89":"#Since the test data is missing Survived column lets as that\n\ntest_df[\"Survived\"] = -9999 #Adding Survived column to test data with some value.","d88352ec":"#Concatinating both test and train data.\n\ndf = pd.concat((train_df,test_df),axis=0) ","83a96613":"#Lets check the info again\ndf.info()","6d7b91d0":"#Lets use the .head() on the dataframe\ndf.head()","fec2c25a":"#Let's use the dataframe's.tail() method to see if the Survived column has the values we set on the test dataset before concatenating.\ndf.tail()","4c9c6c29":"#Let's use the dataframe's.describe() method to see the statistics\ndf.describe()","eb8d6882":"#Let's look at the passenger count by class.\ndf.Pclass.value_counts().plot(kind='bar', rot=0, title='Classwise passanger count', color='c');","8d60f671":"#Let's look at the passenger count by class.\ndf.Sex.value_counts().plot(kind='bar', rot=0, title='Passanger count based on their Sex', color='c');","cf046250":"#Lets check the Age distribution\ndf.Age.plot(kind='hist', title='Histogram for Age', color='c', bins=20);","7e106323":"#Lets check the Fare distribution\ndf.Fare.plot(kind='hist', title='Histogram for Fare', color='c', bins=20);","3b1b014d":"#Servivied by Sex plot\npd.crosstab(df.Sex, df[df.Survived != -9999].Survived).plot(kind='bar');","ae93a1ac":"#Will use .info() to detect missing values \ndf.info()","cba70128":"# extrach rows with Embarked as Null\ndf[df.Embarked.isnull()]","0e6fd498":"#1.how many peoples embarked from each points\ndf.Embarked.value_counts()","be3ac808":"#2. which embarked point has a higher survival count\npd.crosstab(df[df.Survived != -9999].Survived, df[df.Survived != -9999].Embarked)","d63f9960":"#3. Let's get the fare median for Class, Embarked\ndf.groupby(['Pclass','Embarked']).Fare.median()","e0235cde":"#replace the missing value with 'C' because the median fare per class by embarked is close to 80, which is closer to the fare paid by the missing value's passengers\ndf.Embarked.fillna('C', inplace=True)","084a904c":"df[df.Embarked.isnull()]","47534feb":"df[df.Fare.isnull()]","72cf1775":"medianFare = df.loc[(df.Pclass ==3) & (df.Embarked == 'S'),'Fare'].median()\ndf.Fare.fillna(medianFare, inplace=True)","e4be4ba9":"df[df.Fare.isnull()]","a7dca522":"df[df.Age.isnull()]","a2e4fe69":"#Let's let the Age distribution\ndf.Age.plot(kind='hist', bins=20, color='c');","92fd3a9c":"df.Age.mean()","dac4650a":"#median value\ndf.groupby('Sex').Age.median()","d18ca0fb":"#visualize using boxplot\ndf[df.Age.notnull()].boxplot('Age','Sex');","9a312c27":"df[df.Age.notnull()].boxplot('Age','Pclass');","d7ecb7e1":"df.Name","7ea2157b":"def GetTitle(name):\n    titleGroup = {'mr' : 'Mr', ## This is dict of all the possible title found.\n                  'mrs' : 'Mrs',\n                  'miss' : 'Miss',\n                  'master' : 'Master',\n                  'don' : 'Sir',\n                  'rev' : 'Sir',\n                  'dr' : 'Officer',\n                  'mme' : 'Mrs',\n                  'ms' : 'Mrs',\n                  'major' : 'officer',\n                  'lady' : 'Lady',\n                  'sir' : 'Sir',\n                  'mlle' : 'Miss',\n                  'col' : 'Officer',\n                  'capt' : 'Officer',\n                  'the countess' : 'Lady',\n                  'jonkheer' : 'Sir',\n                  'dona' : 'Lady'}\n    firstNameTitle = name.split(',')[1]\n    title = firstNameTitle.split('.')[0]\n    title = title.strip().lower()\n    return titleGroup[title]","3de97c68":"#Create a column and add the title value to it.\ndf['Title'] = df.Name.map(lambda x : GetTitle(x))","a9812f2c":"df.head()","2bbc8541":"df[df.Age.notnull()].boxplot('Age','Title');","af5b900f":"#replace missing value as the tile looks like a good candidate\ntitleAgeMedian= df.groupby('Title').Age.transform('median')\ndf.Age.fillna(titleAgeMedian, inplace=True)","38fba1bb":"df.info()","22cabf2f":"pd.qcut(df.Fare, 4, labels=['veryLow','low','high','veryHigh']).value_counts().plot(kind='bar', color='c', rot=0);","5016cfda":"df['FareBin'] = pd.qcut(df.Fare, 4, labels=['veryLow','low','high','veryHigh'])","87994a25":"#AgeState based on Age\ndf['AgeState'] = np.where(df['Age'] >= 18, 'Adult', 'Child')","3cfcc7b0":"#Female aged more that 18 and who has parch > 0 and is married(Not Miss). \ndf['IsMother'] = np.where(((df.Sex =='female') & (df.Parch > 0) & (df.Age > 18) & (df.Title != 'Miss')), 1,0)","d47e14a3":"#Corsstab IsMother\npd.crosstab(df[df.Survived != -9999].Survived, df[df.Survived != -9999].IsMother)","44c5e8ef":"df.Cabin.unique() #lets get unique","c1e91aec":"df.loc[df.Cabin =='T'] #this could be a Error","c76d9155":"#Let set the cabin T to NAN\ndf.loc[df.Cabin =='T', 'Cabin'] = np.NaN","8ab9e06f":"df.Cabin.unique()","8171946b":"#Extract the first char from Cabin string\ndef getDeck(cabin):\n    return np.where(pd.notnull(cabin),str(cabin)[0].upper(),'Z')\ndf['Deck'] = df['Cabin'].map(lambda x : getDeck(x))","61133119":"df.Deck.value_counts() #Count","2db85d11":"#Corsstab to check servived cabin wise\npd.crosstab(df[df.Survived != -9999].Survived, df[df.Survived != -9999].Deck)","32541282":"#Encoding Sex column\ndf['IsMale'] = np.where(df.Sex == 'male', 1, 0)","7488e630":"#Encoding AgeState column\ndf['IsAdult'] = np.where(df.AgeState == 'Adult', 1, 0)","ac898154":"#Columns Deck, Pclass, Title, FareBin, Embarked\ndf = pd.get_dummies(df,columns=['Deck', 'Pclass', 'Title', 'FareBin', 'Embarked'])","5cb21338":"# Drop columns\ndf.drop(['Cabin','Name','Ticket','Parch','SibSp','Sex','AgeState'], axis=1, inplace=True)","f758c192":"#reorder columns\ncolumns = [column for column in df.columns if column != 'Survived']\ncolumns = ['Survived'] + columns\ndf = df[columns]","a868a8c5":"df.info()","22e4e62e":"#Save train data\ndf.loc[df.Survived != -9999].to_csv('finalTrain.csv')\n#Save test data\ncolumns = [column for column in df.columns if column != 'Survived']\ndf.loc[df.Survived == -9999, columns].to_csv('finalTest.csv')","3340c647":"**Given that we have the fare value for the missing Embarked rows, the last option appears to be fare.**","a5890d06":"**Let's concatenate both test and training data so we can perform EDA and data wrangling on them at the same time.**","50436200":"**We see that there are more passangers in class 3.**","7d326c60":"**We can see that, as expected, the test data lacks the Survived column, which is what we are suppose to predict.**","f841ed1d":"**A large number of passengers paid a lower fare.**","69851c7b":"# 6. Drop columns that have been encoded","7231871d":"**The created title column appears to be a good candidate for fare calculation.**","fd8074a7":"**The first character of the Cabin's name appears to be a deck. So let's extract it and add it to a new column.**","aea07957":"**Cabin is the only remaining column, but it appears to have more missing values.**","49905208":"*Rearrange columns*","07143a4f":"**So we have 1309 entries in total.**","33a6ad54":"**Male passengers outnumber female passengers**","3d53f2d8":"**Cabin**","98c5e237":"# 5. Catagorical column encoding","17bb30cd":"**Age**","d9a8aa8f":"**Fare column**","a4a87250":"# 3. Get Summary Statistics","60a1ad52":"**Let's extract the title and add it to a new column.**","b3f88501":"**There is a odd one in the cabin: 'T'**","aae89267":"# 7. Saving the Dataframe to files","9398d940":"# 1. Importing Test and Training Files","ebc8e7a9":"**Let's take a look at the names to see if they can provide more information about the passengers' ages.**","e3f81d52":"# 4. Data Munging : Working with missing values","7d2504b3":"**Let's make a column to look for Mothers among female passengers.**","bd41e57f":"**Because there is only one entry, let us use the median value.**","7d0a6d06":"**Lets work on Fare column**","871d267e":"**Let us now import the necessary libraries.**","4b0ea43e":"**Lets work on Age column**","dbcb1732":"**Embarked**","cf63ed61":"# 2. Verifying the data's basic structure.","7b46902d":"# 5. Feature Engineering","f7db963f":"**We can see that more females have survived.**","ed528288":"**Age,Fare & Embarked have missing values.**","b2d4a71a":"**We see that large number of passengers ranges from 20 to 30.**","5346db3f":"# Titanic Dataset EDA using Pandas & NumPy."}}