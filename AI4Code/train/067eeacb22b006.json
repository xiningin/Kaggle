{"cell_type":{"6edc9961":"code","1e2b197f":"code","2eac52a2":"code","b3407102":"code","1e88c5d6":"code","a30487fd":"code","1fe8a1bc":"code","e82656a1":"code","9ed57758":"code","9701a170":"code","96b19292":"code","0df64216":"code","a8467c52":"code","4e9065af":"code","aa7e55a2":"code","d6f80111":"code","6f8d2c32":"code","a9560b14":"code","3b302292":"code","fc99508a":"code","6560f48b":"code","22d9cd6d":"code","6fbbd721":"code","ae4f1210":"code","46160444":"code","881cf30a":"code","c331e6b6":"code","027227f7":"code","9e959e78":"code","6a26c374":"code","8ef000ea":"code","d7b11ab7":"code","be96d96f":"code","9dcb483d":"code","66fd3cc0":"code","1fc3124e":"code","a6a2c738":"code","8b40e759":"code","f744a6d0":"code","687954b9":"code","70436656":"code","2df70869":"code","9d52a9a3":"code","823e331d":"code","104d1a70":"code","cefcb24a":"code","dc942d39":"code","ee187996":"code","9ec61fd6":"code","dc12376d":"code","f2190de9":"code","8deab8d9":"code","da7fe8da":"code","8b4030f3":"code","1c08a9e3":"code","ad7b5f33":"markdown","fe7a9dd3":"markdown","be5f6291":"markdown","3950ae7d":"markdown","e6e0f502":"markdown","e26cdd7e":"markdown","9a64094a":"markdown","df7410e4":"markdown","663cd52b":"markdown"},"source":{"6edc9961":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport math","1e2b197f":"titanic_data= pd.read_csv(r'..\/input\/titanic\/train.csv')\ntitanic_data.head(10)","2eac52a2":"print(\"No. of passengers in original data set: \", len(titanic_data.index))","b3407102":"sns.countplot(x=\"Survived\", data=titanic_data)","1e88c5d6":"sns.countplot( x=\"Survived\", hue=\"Sex\",data=titanic_data)","a30487fd":"sns.countplot( x=\"Survived\", hue=\"Pclass\",data=titanic_data)","1fe8a1bc":"titanic_data[\"Age\"].plot.hist()","e82656a1":"titanic_data[\"Fare\"].plot.hist(bins=20,figsize=(10,5))","9ed57758":"titanic_data.info()","9701a170":"sns.countplot( x=\"SibSp\",data=titanic_data)","96b19292":"titanic_data.isnull().sum()","0df64216":"sns.heatmap(titanic_data.isnull(), yticklabels=False, cmap='viridis')","a8467c52":"titanic_data.head(6)","4e9065af":"titanic_data.drop(\"Cabin\",axis=1,inplace=True)","aa7e55a2":"sex=pd.get_dummies(titanic_data['Sex'],drop_first=True)\nembark=pd.get_dummies(titanic_data['Embarked'],drop_first=True)\npclass=pd.get_dummies(titanic_data['Pclass'],drop_first=True)","d6f80111":"titanic_data = pd.concat([titanic_data,sex,embark,pclass], axis=1)","6f8d2c32":"titanic_data.head(6)","a9560b14":"titanic_data.drop(['Sex','Embarked','PassengerId','Name','Ticket'],axis=1,inplace=True)","3b302292":"titanic_data.head(6)","fc99508a":"sns.heatmap(titanic_data.isnull(), yticklabels=False, cmap='viridis')","6560f48b":"#There are two genders and three passenger classes in this dataset. \nmedian_ages = np.zeros((2,3))\nfor i in range(0,2):\n    for j in range(0,3):\n        median_ages[i,j] = titanic_data[ (titanic_data['male'] == i) & \\\n                               (titanic_data['Pclass'] == j+1)]['Age'].dropna().median()\n","22d9cd6d":"titanic_data['AgeFill'] = titanic_data['Age']\ntitanic_data[ titanic_data['Age'].isnull()][['Age', 'AgeFill', 'male', 'Pclass']].head(10)","6fbbd721":"# Put estimates of Age into NaN rows of new column AgeFill.\nfor i in range(0, 2):\n    for j in range(0, 3):\n \n        #Locate all cells in dataframe where `male` == i, `Pclass` == j+1\n        #and `Age` == null. \n        # Replace them with the corresponding estimate from the matrix.\n        titanic_data.loc[ (titanic_data.Age.isnull()) & (titanic_data.male == i) & (titanic_data.Pclass == j+1),\\\n                 'AgeFill'] = median_ages[i,j]","ae4f1210":"titanic_data[ titanic_data['Age'].isnull()][['Age', 'AgeFill', 'male', 'Pclass']].head(10)","46160444":"titanic_data.drop(['Age','Pclass'],axis=1,inplace=True)\ntitanic_data.head(6)","881cf30a":"X_train=titanic_data.drop(\"Survived\",axis=1)\ny_train=titanic_data[\"Survived\"]","c331e6b6":"X_train.head(6)","027227f7":"y_train.head(6)","9e959e78":"from sklearn.ensemble import ExtraTreesClassifier\nclf = ExtraTreesClassifier()","6a26c374":"clf.fit(X_train, y_train)","8ef000ea":"score_extra_Tree = round(clf.score(X_train, y_train) * 100, 2)\nprint('Score ExtraTreesClassifier :', score_extra_Tree)","d7b11ab7":"from sklearn.linear_model import LogisticRegression\nclf2 = LogisticRegression().fit(X_train, y_train)\nprint('Score ExtraTreesClassifier :', round(clf2.score(X_train, y_train) * 100, 2))","be96d96f":"test_data= pd.read_csv(r'..\/input\/titanic\/test.csv')\n\ntest_data.head(10)","9dcb483d":"test_data.dtypes","66fd3cc0":"test_data.isnull().sum()","1fc3124e":"X_test = test_data.drop(\"Cabin\",axis=1)","a6a2c738":"X_test.head()","8b40e759":"#Change to catgorical values\nsex=pd.get_dummies(X_test['Sex'],drop_first=True)\nembark=pd.get_dummies(X_test['Embarked'],drop_first=True)\npclass=pd.get_dummies(X_test['Pclass'],drop_first=True)","f744a6d0":"X_test = pd.concat([X_test,sex,embark,pclass], axis=1)","687954b9":"X_test.head(6)","70436656":"#There are two genders and three passenger classes in this dataset. \nmedian_ages = np.zeros((2,3))\nfor i in range(0,2):\n    for j in range(0,3):\n \n        # Set the value of the cell to be the median of all `Age` values\n        # matching the criterion 'Corresponding gender and Pclass',\n        # leaving out all NaN values\n        median_ages[i,j] = X_test[ (X_test['male'] == i) & \\\n                               (X_test['Pclass'] == j+1)]['Age'].dropna().median()\n ","2df70869":"X_test.shape","9d52a9a3":"X_test['AgeFill'] = X_test['Age']\nX_test[ X_test['Age'].isnull()][['Age', 'AgeFill', 'male', 'Pclass']].head(10)","823e331d":"# Put our estimates into NaN rows of new column AgeFill.\n# df.loc is a purely label-location based indexer for selection by label.\n \nfor i in range(0, 2):\n    for j in range(0, 3):\n \n        #Locate all cells in dataframe where `male` == i, `Pclass` == j+1\n        #and `Age` == null. \n        # Replace them with the corresponding estimate from the matrix.\n        X_test.loc[ (X_test.Age.isnull()) & (X_test.male == i) & (X_test.Pclass == j+1),\\\n                 'AgeFill'] = median_ages[i,j]","104d1a70":"X_test[ X_test['Age'].isnull()][['Age', 'AgeFill', 'male', 'Pclass']].head(10)","cefcb24a":"X_test.drop(['Sex','Embarked','PassengerId','Name','Ticket','Pclass', 'Age'],axis=1,inplace=True)","dc942d39":"X_test.head(6)","ee187996":"X_test.isnull().sum()","9ec61fd6":"median_fare = X_test['Fare'].dropna().median()","dc12376d":"X_test.loc[ (X_test.Fare.isnull()),'Fare'] = median_fare","f2190de9":"X_test.isnull().sum()","8deab8d9":"X_test.head(6)","da7fe8da":"y_pred = clf.predict(X_test)","8b4030f3":"#submission\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_data.PassengerId,\n        \"Survived\": y_pred\n    })\nsubmission.to_csv('\/kaggle\/working\/submission.csv', index=False)","1c08a9e3":"y_pred2 = clf2.predict(X_test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_data.PassengerId,\n        \"Survived\": y_pred2\n    })\nsubmission.to_csv('\/kaggle\/working\/submission2.csv', index=False)","ad7b5f33":"# **Model Training**","fe7a9dd3":"**Drop unnecessary coloumns**","be5f6291":"**Replace NAN values of age col**","3950ae7d":"# **Cleaning test dataset**","e6e0f502":"# **Data wrangling**","e26cdd7e":"# **Prediction**","9a64094a":"# **Analyzing Data**","df7410e4":"**Convert to categorical data**","663cd52b":"**Replace NAN of age**"}}