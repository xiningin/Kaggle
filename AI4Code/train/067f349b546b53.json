{"cell_type":{"0936997c":"code","8d7f43de":"code","fa2b3468":"code","be8be53a":"code","acaea4b3":"code","8e41758c":"code","7a7fab2a":"code","cc20d299":"code","c45eb4f1":"code","1fb242ff":"code","121a31ee":"code","28b6d5f7":"code","aeba17d3":"code","15580956":"code","8e54333b":"code","b99742d2":"code","0d2bb082":"code","a462f0b9":"code","629bf0c7":"markdown"},"source":{"0936997c":"from keras.preprocessing.image import ImageDataGenerator\nimport keras\nimport os\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport numpy as np","8d7f43de":"!mkdir Train\n!mkdir Test\n\n!mkdir Train\/Fake\n!mkdir Train\/Real\n\n!mkdir Test\/Fake\n!mkdir Test\/Real","fa2b3468":"# Train verilerini keras '\u0131n okuyabilece\u011fi \u015fekilde konumlar\u0131n\u0131 yeniden d\u00fczenliyorum.\n\nPATH = \"\/kaggle\/input\/signature-verification-dataset\/sign_data\/train\/\"\n\nfor i in os.listdir(PATH):\n    \n    contol = i.split(\"_\")\n    \n    try:\n    \n        if contol[1]==\"forg\":\n            \n            os.system(\"cp -r {} Train\/Fake\".format(PATH+i))\n            \n    except:\n        \n        os.system(\"cp -r {} Train\/Real\".format(PATH+i))\n        ","be8be53a":"# Test verilerini keras '\u0131n okuyabilece\u011fi \u015fekilde konumlar\u0131n\u0131 yeniden d\u00fczenliyorum.\n\nPATH = \"\/kaggle\/input\/signature-verification-dataset\/sign_data\/test\/\"\n\nfor i in os.listdir(PATH):\n    \n    contol = i.split(\"_\")\n    \n    try:\n    \n        if contol[1]==\"forg\":\n            \n            os.system(\"cp -r {} Test\/Fake\".format(PATH+i))\n            \n    except:\n        \n        os.system(\"cp -r {} Test\/Real\".format(PATH+i))\n        ","acaea4b3":"# konumlar\u0131\n\ntrain_dir = os.path.join(\"\/kaggle\/working\/Train\") \n\ntest_dir = os.path.join(\"\/kaggle\/working\/Test\") ","8e41758c":"train_datagen = ImageDataGenerator(\n\n      # resim pixellerini 0,1 aras\u0131na s\u0131k\u0131\u015ft\u0131rma\n      rescale=1.\/255,\n\n      # derece cinsinden (0-180) resimlerin rastgele d\u00f6nd\u00fcr\u00fclme a\u00e7\u0131s\u0131\n      rotation_range=40,\n\n      # resimlerin yatayda ve dikeyde kayd\u0131r\u0131lma oranlar\u0131\n      width_shift_range=0.2,\n\n      # resimlerin yatayda ve dikeyde kayd\u0131r\u0131lma oranlar\u0131\n      height_shift_range=0.2,\n\n      # burkma i\u015flemi\n      shear_range=0.2,\n\n      # yak\u0131nla\u015ft\u0131rma i\u015flemi\n      zoom_range=0.2,\n\n      # dikeyde resim d\u00f6nd\u00fcrme\n      horizontal_flip=True,\n\n      # i\u015flemlerden sonra ortaya \u00e7\u0131kan  fazla \n      # g\u00f6r\u00fcnt\u00fc noktalar\u0131n\u0131n nas\u0131l doldurulaca\u011f\u0131n\u0131 belirler\n      fill_mode='nearest')\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","7a7fab2a":"train_generator = train_datagen.flow_from_directory(\n\n        # hedef dizin\n        train_dir,\n\n        # t\u00fcm resimler (150x150) olarak boyutland\u0131r\u0131lacak\n        target_size=(200, 200),\n\n        # y\u0131\u011f\u0131n boyutu\n        batch_size=64,\n\n        # binary_crossentropy kulland\u0131\u011f\u0131m\u0131z i\u00e7in\n        # ikili etiketler gerekiyor.\n        class_mode='binary')","cc20d299":"test_generator = test_datagen.flow_from_directory(\n\n        test_dir,\n\n        target_size=(200, 200),\n\n        batch_size=64,\n\n        class_mode='binary')","c45eb4f1":"plt.imshow(train_generator[0][0][5])\nprint(\"Label : \",train_generator[0][1][5])","1fb242ff":"plt.imshow(train_generator[0][0][60])\nprint(\"Label : \",train_generator[0][1][60])","121a31ee":"class MyModel(tf.keras.Model):\n\n  def __init__(self):\n    super(MyModel, self).__init__()\n    \n    self.cnn1 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(3,200,200))\n    self.cnn2 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu')\n    self.cnn3 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu')\n    \n    self.flatten = tf.keras.layers.Flatten()\n    \n    self.dense1 = tf.keras.layers.Dense(512, activation='relu')\n    self.dense2 = tf.keras.layers.Dense(1, activation='sigmoid')\n\n  def call(self, inputs):\n    \n    x = self.cnn1(inputs)\n    x = self.cnn2(x)\n    x = self.cnn3(x)\n    x = self.flatten(x)\n    x = self.dense1(x)\n    x = self.dense2(x)\n    \n    return x\n\nmodel = MyModel()","28b6d5f7":"input_shape = (None, 200, 200, 3)\nmodel.build(input_shape)\nmodel.summary()","aeba17d3":"model.compile(\n    # kay\u0131p fonksiyonu\n    loss=\"binary_crossentropy\",\n    \n    # eniyileme:\n    # a\u011f\u0131m\u0131z\u0131n girdisi olan veri ile olu\u015fturdu\u011fu kayb\u0131 g\u00f6z \u00f6n\u00fcnde\n    # bulundurarak kendisini g\u00fcncelleme mekanizmas\u0131\n    optimizer=tf.keras.optimizers.RMSprop(lr=2e-5),\n\n    # e\u011fitim ve test s\u00fcresince takip edilecek metrikler. \n    metrics=[\"acc\"])","15580956":"# acc, loss, val_acc, val_loss de\u011ferlerini history adl\u0131 de\u011fi\u015fkenden alaca\u011f\u0131z.\nhistory = model.fit_generator(\n\n    # e\u011fitim verileri\n    train_generator,\n\n    # d\u00f6ng\u00fc bitene kadar ge\u00e7ece\u011fi \u00f6rnek say\u0131s\u0131 (al\u0131nacak y\u0131\u011f\u0131n)\n    steps_per_epoch=train_generator.samples\/\/train_generator.batch_size,\n\n    # d\u00f6ng\u00fc say\u0131s\u0131\n    epochs=40,\n\n    verbose=2)\n","8e54333b":"# E\u011fitim ba\u015far\u0131m skoru\nacc = history.history[\"acc\"]\n\n# e\u011fitim kay\u0131p skoru\nloss = history.history[\"loss\"]\n\n# epochs say\u0131s\u0131na g\u00f6re grafik \u00e7izdirece\u011fiz.\nepochs = range(1, len(acc) + 1)\n\n# e\u011fitim ba\u015far\u0131m\u0131n\u0131 kendine \u00f6zel \u00e7izdirdik.\nplt.plot(epochs, acc, \"bo\", label=\"E\u011fitim ba\u015far\u0131m\u0131\")\n\n# \u00e7izdirmemizin ba\u015fl\u0131\u011f\u0131\nplt.title(\"E\u011fitim ba\u015far\u0131m\u0131\")\n\nplt.legend()\n\nplt.figure()\n\n# e\u011fitim kayb\u0131n\u0131 kendine \u00f6zel \u00e7izdirdik.\nplt.plot(epochs, loss, \"bo\", label=\"E\u011fitim kayb\u0131\")\n\n\n# \u00e7izdirmemizin ba\u015fl\u0131\u011f\u0131\nplt.title(\"E\u011fitim kayb\u0131\")\n\nplt.legend()\n\n# ekrana \u00e7\u0131kartma\nplt.show()","b99742d2":"# Test verileri ile kayip ve do\u011frulama \nmodel.evaluate(test_generator)","0d2bb082":"plt.imshow(test_generator[0][0][5])\nprint(\"Label : \",test_generator[0][1][5])\n\ntest_input = test_generator[0][0][5]\ntest_input = np.expand_dims(test_input,axis=0)\ntest_input = np.expand_dims(test_input,axis=0)\ntest_input = np.expand_dims(test_input,axis=0)\n\npred = model.predict(test_input)\n\nif pred>=0.5:\n    pred = 1\n    \nelse:\n    \n    pred = 0\n    \nprint(\"Predict : \",float(pred))","a462f0b9":"plt.imshow(test_generator[0][0][30])\nprint(\"Label : \",test_generator[0][1][30])\n\ntest_input = test_generator[0][0][30]\ntest_input = np.expand_dims(test_input,axis=0)\ntest_input = np.expand_dims(test_input,axis=0)\ntest_input = np.expand_dims(test_input,axis=0)\n\npred = model.predict(test_input)\n\nif pred>=0.5:\n    pred = 1\n    \nelse:\n    \n    pred = 0\n    \nprint(\"Predict : \",float(pred))","629bf0c7":"@author: Ahmet Furkan DEMIR\n\n![](https:\/\/img.shields.io\/badge\/Python-14354C?style=for-the-badge&logo=python&logoColor=white) ![](https:\/\/img.shields.io\/badge\/TensorFlow%20-%23FF6F00.svg?&style=for-the-badge&logo=TensorFlow&logoColor=white) ![](https:\/\/img.shields.io\/badge\/Keras-D00000?style=for-the-badge&logo=Keras&logoColor=white)"}}