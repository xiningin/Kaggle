{"cell_type":{"cf3bb254":"code","b2071102":"code","075d275d":"code","01fa2ed2":"code","fcab8b0b":"code","7b03fe91":"code","02438461":"code","c76225fb":"code","66b879b4":"code","77d691b6":"code","e8e3d8e9":"code","50d138ea":"code","f0d22ea1":"code","91aa6c49":"code","72b2ca81":"code","0df079a4":"code","6a45cc8b":"code","736ae936":"code","9666cb5b":"code","080b1a3f":"code","c874d8fd":"code","914b4572":"code","432923c8":"code","25260e8b":"code","673affe7":"code","3d6ce0f3":"code","11b90c01":"markdown","36379f65":"markdown","b229358b":"markdown","512ca4f6":"markdown","d0aba14a":"markdown","01561381":"markdown","f8921dde":"markdown","23ba2a50":"markdown","357f8b98":"markdown"},"source":{"cf3bb254":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport glob\nfrom tqdm import tqdm\n","b2071102":"train = pd.read_csv('\/kaggle\/input\/predict-volcanic-eruptions-ingv-oe\/train.csv')","075d275d":"print('info: \\n', train.info())","01fa2ed2":"print('info: \\n', train.info())\nprint('-+-'*30)\nprint('Statistics: \\n',train['time_to_eruption'].describe(),\n      '\\nskewness:', train['time_to_eruption'].skew(),\n      '\\nkurtosis: ', train['time_to_eruption'].kurtosis(),\n      '\\nIQR:', train['time_to_eruption'].quantile(0.75) - train['time_to_eruption'].quantile(.25),\n      '\\nrange: ', train['time_to_eruption'].max() - train['time_to_eruption'].min())\nprint('-+-'*30)\nprint('train.head:\\n',train.head())","fcab8b0b":"#Let's look at the histogram of the target value\npx.histogram(train,\n             x='time_to_eruption',\n             nbins=200)","7b03fe91":"px.line(train, \n        x=train.index, \n        y='time_to_eruption',\n        log_y=True)","02438461":"sorted_df = train.sort_values(by='time_to_eruption', ascending=False)\nsorted_df.reset_index(inplace=True)\n# sorted_df.drop('index', axis='columns', inplace=True)","c76225fb":"px.line(sorted_df, \n        x=sorted_df.index,\n        y=(sorted_df['time_to_eruption']))","66b879b4":"px.line(sorted_df, \n        x=sorted_df.index,\n        y=(sorted_df['time_to_eruption']),\n        log_y=True\n       )","77d691b6":"sorted_df['step'] = sorted_df['time_to_eruption'].shift(-1) - sorted_df['time_to_eruption']","e8e3d8e9":"px.line(sorted_df, x=sorted_df.index,\n        y=sorted_df['step'])","50d138ea":"sensor_path = '\/kaggle\/input\/predict-volcanic-eruptions-ingv-oe\/train'\n\ndef read_sensor_data(path=sensor_path, fname='1000015382.csv', dtype='Int16'):\n    df = pd.read_csv(path+'\/'+fname, dtype='Int16')\n    return df","f0d22ea1":"sensor_df = read_sensor_data()\nsensor_df.head()","91aa6c49":"sensor_df.info()","72b2ca81":"sensor_df.describe()","0df079a4":"def plot_sensor_data(df, size=(1000, 1000), fixed_range=[-5000, 5000]):\n    fig = make_subplots(rows=10, \n                        cols=1,\n                        shared_xaxes=True,\n                        vertical_spacing=0.03,\n                        subplot_titles = df.columns.to_list())\n    \n    for i in range(df.shape[1]):\n        fig.add_trace(go.Scatter(x=df.index,\n                                 y=df.iloc[:, i].fillna(0),\n                                 mode='lines',\n                                 name=df.columns[i]),\n                        row=i+1,\n                        col=1)\n        fig.update_yaxes(range=fixed_range)\n        \n    fig.layout.update(\n        {'width':size[0],\n         'height':size[1],\n         'showlegend':False})\n    return fig\n","6a45cc8b":"fig = plot_sensor_data(sensor_df, fixed_range=None)\nfig.show()","736ae936":"def plot_sensors_hist(df, shape=[5, 2]):\n\n    fig = make_subplots(rows=shape[0], \n                        cols=shape[1],\n                        vertical_spacing=0.09,\n                        specs=[[{\"secondary_y\": True}]*shape[1] for i in range(shape[0])],\n                        subplot_titles = df.columns.to_list())\n    \n    for i in range(df.shape[1]):\n        row = int(i % shape[0] + 1)\n        col = int(i \/\/ shape[0] + 1)\n\n        fig.add_trace(go.Histogram(x=df.iloc[:, i].fillna(0),\n                                   name=df.columns[i]),\n                      row=row,\n                      col=col)\n        fig.add_trace(go.Histogram(x=df.iloc[:, i].fillna(0),\n                                   name=df.columns[i],\n                                   cumulative={'enabled':True},\n                                   histnorm='probability',\n                                   opacity=0.5),\n\n                      row=row,\n                      col=col,\n                      secondary_y=True)\n\n    fig.layout.update(\n        {'width': shape[1]*280,\n         'height':shape[0]*280,\n         'showlegend':False})\n    return fig","9666cb5b":"fig = plot_sensors_hist(sensor_df, shape=[2,5])\nfig.show()","080b1a3f":"# 15G training data!\n!du -h -d 1 \/kaggle\/input\/predict-volcanic-eruptions-ingv-oe\/train\/","c874d8fd":"sensors_files = glob.glob(f\"{sensor_path}\/*\")\nprint(len(sensors_files))","914b4572":"\nmeta_df = pd.DataFrame(np.zeros((10,2)), columns=['full_null', 'partial_null'], \n             index=[f'sensor_{i+1}' for i in range(10)])\nfor f in tqdm(sensors_files):\n    df = pd.read_csv(f, dtype='Int16')\n    \n    partial_null = df.columns[df.isnull().any()].to_list()\n    full_null = df.columns[df.isnull().all()].to_list()\n    \n    if partial_null:\n        meta_df.loc[partial_null,'partial_null'] +=1\n    \n    if full_null:\n        meta_df.loc[full_null,'full_null'] +=1","432923c8":"# let's save this data and to not go with the process again\n# meta_df.to_csv('\/kaggle\/working\/null_data.csv')\nmeta_df = pd.read_csv('\/kaggle\/working\/null_data.csv')","25260e8b":"meta_df","673affe7":"fig = go.Figure(data=[go.Bar(x=meta_df.index, \n                             y=meta_df['full_null'], \n                             name='full_null'),\n                      go.Bar(x=meta_df.index, \n                             y=meta_df['partial_null'],\n                             name='partial_null')\n])\nfig.show()","3d6ce0f3":" meta_df.info()","11b90c01":"Let's sort values by `time_to_eruption`","36379f65":"Let's See what a single file look's like.","b229358b":"## Investigating train.csv","512ca4f6":"## Investigating Sensors Data","d0aba14a":"## Preparing Data","01561381":"It seems, `time_to_eruption` uniformly distributed (roughly).","f8921dde":"`train.csv` is containing target value for sensors data. for example this `[1136037770 ,12262005]` tells us given 10 mins of 10 sensors data in `1136037770.csv`, 12262005 time (in some unit) remain to eruption.","23ba2a50":"If an entire sensor is `Null` we will drop it.","357f8b98":"There is no missing value (of course!).\n\nIdeas to investigate:\n1. sort `time_to_eruption` values and see the relation with volano activity and remaining time.\n\n\n"}}