{"cell_type":{"d6b93fa9":"code","565052fb":"code","e70e32e2":"code","a31a676a":"code","327c330e":"code","2ec4597c":"code","266acf35":"code","7f87a690":"code","00c53b68":"code","14e571e9":"code","dab87859":"code","a0c2af2c":"code","0a8eb99c":"code","888a8db1":"code","40494298":"code","90795773":"code","49d2e84c":"code","1fd416ff":"markdown","7e37ac98":"markdown","71f23dd3":"markdown","48af92db":"markdown"},"source":{"d6b93fa9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport os\nfrom sklearn_pandas import CategoricalImputer\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","565052fb":"df = pd.read_csv('\/kaggle\/input\/bitcoin-historical-data\/coinbaseUSD_1-min_data_2014-12-01_to_2019-01-09.csv')\ndf.head()","e70e32e2":"percent_missing = df.isnull().sum() * 100 \/ len(df)\nmissing_values = pd.DataFrame({'column_name': df.columns,\n                               'percent_missing': percent_missing})\nmissing_values","a31a676a":"# imputer = CategoricalImputer()\n# df['Open'] = imputer.fit_transform(df['Open'].values)\n# df['High'] = imputer.fit_transform(df['High'].values)\n# df['Low'] = imputer.fit_transform(df['Low'].values)\n# df['Close'] = imputer.fit_transform(df['Close'].values)\n# df['Volume_(BTC)'] = imputer.fit_transform(df['Volume_(BTC)'].values)\ndf = df.dropna()\npercent_missing = df.isnull().sum() * 100 \/ len(df)\nmissing_values = pd.DataFrame({'column_name': df.columns,\n                               'percent_missing': percent_missing})\nmissing_values","327c330e":"df = df.drop(['Timestamp'], axis=1)\n#df = df.apply(preprocessing.LabelEncoder().fit_transform)\n#df = pd.get_dummies(df)\ndf = df[:2000]\ndf.head()","2ec4597c":"len(df)","266acf35":"X = df.drop(['Close'], axis=1)\ny = df['Close'].values\nscaler = StandardScaler().fit(X)\nX2 = scaler.transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X2, y, test_size=0.05, random_state=42)","7f87a690":"regr = RandomForestRegressor(max_depth=200, random_state=0)\nregr.fit(X_train, y_train)\ny_pred = regr.predict(X_test)\nmean_squared_error(y_test, y_pred)","00c53b68":"plt.figure(figsize=(12,7))\nplt.plot(y_pred, color='green', marker='o', linestyle='dashed', \n         label='Predicted Price')\nplt.plot(y_test, color='red', label='Actual Price')\n#plt.xticks(np.arange(1486,1856, 60), df['Date'][1486:1856:60])\nplt.title('Sales Prediction')\nplt.xlabel('Time')\nplt.ylabel('Sales')\nplt.legend()","14e571e9":"! pip install chart-studio","dab87859":"import chart_studio\nchart_studio.tools.set_credentials_file(username='TODO', api_key='TODO')","a0c2af2c":"import chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly\n\ndef predreport(y_pred, Y_Test):\n    diff = y_pred.flatten() - Y_Test.flatten()\n    perc = (abs(diff)\/y_pred.flatten())*100\n    priority = []\n    for i in perc:\n        if i > 0.4:\n            priority.append(3)\n        elif i> 0.1:\n            priority.append(2)\n        else:\n            priority.append(1)\n\n\n    print(\"Error Importance 1 reported in \", priority.count(1), \"cases \\n\")\n    print(\"Error Importance 2 reported in \", priority.count(2), \"cases \\n\")\n    print(\"Error Importance 3 reported in \", priority.count(3), \"cases \\n\")\n    colors = ['rgb(102, 153, 255)','rgb(0, 255, 0)', 'rgb(255, 153, 51)',\n              'rgb(255, 51, 0)']\n\n    fig = go.Figure(data=[go.Table(header=dict(values=['Actual Values', 'Predictions', \n                                                       '% Difference', \"Error Importance\"],\n                                                        line_color=[np.array(colors)[0]],\n                                                        fill_color=[np.array(colors)[0]],\n                                                        align='left'),\n                     cells=dict(values=[y_pred.flatten(), Y_Test.flatten(), perc, priority],\n                                        line_color=[np.array(colors)[priority]], \n                                        fill_color=[np.array(colors)[priority]],\n                                        align='left'))\n                         ])\n\n    init_notebook_mode(connected=False)\n    #py.plot(fig, filename = 'Predictions_Table', auto_open=True)\n    fig.show()","0a8eb99c":" predreport(y_pred[:200], y_test[:200])","888a8db1":"!pip install dtreeviz","40494298":"regr = DecisionTreeRegressor(max_depth=2, random_state=0)\nregr.fit(X_train, y_train)\ny_pred = regr.predict(X_test)\nmean_squared_error(y_test, y_pred)","90795773":"from dtreeviz.trees import *\n\nviz = dtreeviz(regr,\n               X_train,\n               y_train,\n               target_name='Close',\n               feature_names=list(X.columns))\n              \nviz","49d2e84c":"#viz.svg()","1fd416ff":"## Prediction Table","7e37ac98":"## dtreeviz : Decision Tree Visualization","71f23dd3":"# Machine Learning Visualization 2","48af92db":"## Set-up"}}