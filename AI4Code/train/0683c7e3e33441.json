{"cell_type":{"19527ae9":"code","70d960f7":"code","7bc1dea0":"code","f65c71c3":"code","956ce00c":"code","ab375633":"code","71de6255":"code","e3c8729a":"markdown","f570ddd5":"markdown","eab82cef":"markdown","7554b305":"markdown","0aba12c7":"markdown","d5475512":"markdown"},"source":{"19527ae9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nfrom xgboost import XGBClassifier\n%matplotlib inline\n\ndf = pd.read_csv('..\/input\/YoutubeSpamMergeddata.csv', encoding = \"ISO-8859-1\")\ndata = df[['CONTENT', 'CLASS']]\nclass_names = ['not_spam', 'spam']\n\nX_train, X_test, y_train, y_test = train_test_split(data.CONTENT, data.CLASS, \n                                                    stratify=data.CLASS, \n                                                    test_size=0.25, \n                                                    random_state=42)\n\nvectorizer = TfidfVectorizer(lowercase=False)\ntrain_vectors = vectorizer.fit_transform(X_train)\ntest_vectors = vectorizer.transform(X_test)\n\nrf = RandomForestClassifier(n_estimators=500)\nrf.fit(train_vectors, y_train)\n\npred = rf.predict(test_vectors)\naccuracy_score(y_test, pred)","70d960f7":"from lime import lime_text\nfrom sklearn.pipeline import make_pipeline\nc = make_pipeline(vectorizer, rf)","7bc1dea0":"from lime.lime_text import LimeTextExplainer\nexplainer = LimeTextExplainer(class_names=class_names)","f65c71c3":"idx = 2\nexp = explainer.explain_instance(X_test.iloc[idx], c.predict_proba, num_features=10)\nprint('Document id: %d' % idx)\n#print('Text: %s' % X_test.iloc[idx])\nprint('Probability(spam) =', c.predict_proba([X_test.iloc[idx]])[0,1])\nprint('True class: %s' % class_names[y_test.iloc[idx]])\n\nfig = exp.as_pyplot_figure()\nexp.show_in_notebook(text=False)","956ce00c":"idx = 3\nexp = explainer.explain_instance(X_test.iloc[idx], c.predict_proba, num_features=10)\nprint('Document id: %d' % idx)\n#print('Text: %s' % X_test.iloc[idx])\nprint('Probability(spam) =', c.predict_proba([X_test.iloc[idx]])[0,1])\nprint('True class: %s' % class_names[y_test.iloc[idx]])\n\nfig = exp.as_pyplot_figure()\nexp.show_in_notebook(text=False)","ab375633":"idx = 110\nexp = explainer.explain_instance(X_test.iloc[idx], c.predict_proba, num_features=10)\nprint('Document id: %d' % idx)\n#print('Text: %s' % X_test.iloc[idx])\nprint('Probability(spam) =', c.predict_proba([X_test.iloc[idx]])[0,1])\nprint('True class: %s' % class_names[y_test.iloc[idx]])\n\nfig = exp.as_pyplot_figure()\nexp.show_in_notebook(text=False)","71de6255":"idx = 18\nexp = explainer.explain_instance(X_test.iloc[idx], c.predict_proba, num_features=10)\nprint('Document id: %d' % idx)\n#print('Text: %s' % X_test.iloc[idx])\nprint('Probability(spam) =', c.predict_proba([X_test.iloc[idx]])[0,1])\nprint('True class: %s' % class_names[y_test.iloc[idx]])\n\nfig = exp.as_pyplot_figure()\nexp.show_in_notebook(text=False)","e3c8729a":"Explaining a random **not spam**:","f570ddd5":"## Loading Data and Trainig Random Forest Model","eab82cef":"Explaining a random **spam**:","7554b305":"Explaining a random **spam**:","0aba12c7":"## LIME (Local Interpretable Model-Agnostic Explanations)","d5475512":"Explaining a random **spam**:"}}