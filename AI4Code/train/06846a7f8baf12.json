{"cell_type":{"22d635fb":"code","11ee7643":"code","036c3b62":"code","1206f928":"code","f91e3b8b":"code","0845bf92":"code","7e96e988":"code","0e60fc9b":"code","18a4732e":"code","f613b80b":"code","bd2b553c":"code","dd1dd3bc":"code","dd832984":"code","2f7e9c5d":"code","20f0b1f4":"code","00dd1f36":"code","b104eb02":"code","5dd687c6":"code","d475be40":"code","c630d94b":"code","d4aa9af7":"code","14ededf4":"code","5dc79677":"code","c6976c84":"code","3d05d53e":"code","102dff9d":"code","0df32768":"code","7561fe4e":"code","dc302e6f":"code","4f5dc28e":"code","ebd3c411":"code","87c7dd4e":"code","3f954c23":"markdown","f753f707":"markdown","42686261":"markdown","a9bd989d":"markdown","bc9e94fb":"markdown","ecec0593":"markdown"},"source":{"22d635fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","11ee7643":"import matplotlib.pyplot as plt \nimport numpy as np\nimport os \nimport pandas as pd \n\nimport plotly.express as px\n#import pycountry_convert as pc\nimport datetime\nimport branca\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport warnings\nwarnings.filterwarnings('ignore')\nimport folium \nfrom folium import plugins\nfrom scipy.interpolate import make_interp_spline, BSpline\nimport plotly.express as px\nimport json, requests\n\nfrom keras.layers import Input, Dense, Activation, LeakyReLU\nfrom keras import models\nfrom keras.optimizers import RMSprop, Adam\n%matplotlib inline","036c3b62":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1206f928":"data_1 = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\ndata_1.head()","f91e3b8b":"data_1.isnull().sum()","0845bf92":"data_1.shape","7e96e988":"updated = data_1[data_1['Date'] == max(data_1['Date'])].reset_index()\nupdated_grouped = updated.groupby('State\/UnionTerritory')['State\/UnionTerritory','Deaths'].sum().reset_index()\nupdated = data_1[data_1['Date'] == max(data_1['Date'])]\nupdated = updated.groupby('State\/UnionTerritory')['Confirmed', 'Deaths', 'Cured'].max().reset_index()\nupdated.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='Wistia')","0e60fc9b":"updated.shape","18a4732e":"sns.set(style=\"whitegrid\")\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.barplot(x='Deaths', y='State\/UnionTerritory', data= updated).set(title = 'Deaths')","f613b80b":"fig = px.scatter(updated, y=\"Deaths\",x = \"Cured\", color=\"State\/UnionTerritory\",\n                 size='Confirmed')\nfig.show()","bd2b553c":"df1=data_1.groupby('Date')[['Cured','Deaths','Confirmed']].sum()","dd1dd3bc":"plt.figure(figsize=(20,10))\nplt.style.use('ggplot')\nplt.title('Observed Cases',fontsize=30)\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.xlabel('Date',fontsize=20)\nplt.ylabel('Number of cases',fontsize=20)\nplt.plot(df1.index,df1['Confirmed'],linewidth=3,label='Confirmed',color='blue')\nplt.plot(df1.index,df1['Cured'],linewidth=3,label='Cured',color='green')\nplt.plot(df1.index,df1['Deaths'],linewidth=3,label='Deceased',color='red')\nplt.legend(fontsize=20)","dd832984":"# fig2 = px.line(grouping, x=\"Date\", y=\"Confirmed\", \n#               title=\"India Confirmed Cases\")\n# fig2.show()\n\nplt.figure(figsize=(20,10))\nplt.style.use('ggplot')\nplt.title('Confirmed vs Cured vs Death',fontsize=40)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.xlabel('Date',fontsize=15)\nplt.ylabel('No. of Cases',fontsize=20)\nplt.plot(data_1.index,data_1['Confirmed'],linewidth=3,label='Confirmed',color='blue')\nplt.plot(data_1.index,data_1['Cured'],linewidth=3,label='Cured',color='green')\nplt.plot(data_1.index,data_1['Deaths'],linewidth=3,label='Deceased',color='red')\nplt.legend(fontsize=20)","2f7e9c5d":"from sklearn.preprocessing import LabelEncoder\nlbl=LabelEncoder()\ndata_1['State\/UnionTerritory']=lbl.fit_transform(data_1['State\/UnionTerritory'])\n\ndata_1[\"ConfirmedForeignNational\"]=data_1['ConfirmedForeignNational'].fillna(0,inplace=False)\ndata_1[\"ConfirmedIndianNational\"]=data_1['ConfirmedIndianNational'].fillna(0,inplace=False)\n\ndata_1['Date']=data_1['Date'].astype('datetime64[ns]')","20f0b1f4":"new =data_1.drop(['Sno','Date','Time'], axis = 1)\nnew","00dd1f36":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression,LogisticRegression\ndt=DecisionTreeRegressor()\nlinear=LinearRegression()\nlogistic=LogisticRegression()\ntree=DecisionTreeRegressor()","b104eb02":"from sklearn.model_selection import train_test_split\nx=data_1[['State\/UnionTerritory','date','month','Cured','Deaths','ConfirmedIndianNational','ConfirmedForeignNational']]\ny=data_1['Confirmed']\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)","5dd687c6":"linear.fit(x_train,y_train)\nlogistic.fit(x_train,y_train)\ntree.fit(x_train,y_train)","d475be40":"from sklearn.metrics import r2_score\nprediction=logistic.predict(x_test)\nscore1=r2_score(y_test,prediction)","c630d94b":"prediction=linear.predict(x_test)\nscore2=r2_score(y_test,prediction)","d4aa9af7":"prediction=tree.predict(x_test)\nscore3=r2_score(y_test,prediction)","14ededf4":"scores=[score1,score2,score3]\nmodels=['LogisticRegression','LinearRegression','DecisionTreeRegressor']\nplt.figure(figsize=(10,10))\nplt.title('Accuracy comparison of Logistic Regression vs Linear Regression vs Decision tree models',fontsize=30)\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.xlabel('models',fontsize=30)\nplt.ylabel('Accuracy',fontsize=30)\nplt.bar(models,scores,color=['blue','cyan','hotpink'],alpha=0.5,linewidth=4,edgecolor='black')\nfor i,v in enumerate(scores):\n    plt.text(i-.15,v+.03,format(scores[i],'.2f'),fontsize=20)","5dc79677":"data_2= pd.read_csv('\/kaggle\/input\/covid19-in-india\/AgeGroupDetails.csv')\ndata_2.head(9)","c6976c84":"data_2.shape","3d05d53e":"#agegroup = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\nfig = go.Figure()\nfig.add_trace(go.Scatter(x= data_2['AgeGroup'],y= data_2['TotalCases'],line_shape='spline',fill='tonexty',fillcolor = 'orange')) \nfig.update_layout(title=\"Age wise Trend in India\",yaxis_title=\"Total Number of cases\",xaxis_title=\"Age Group\")\nfig.update_layout(plot_bgcolor='rgb(275, 270, 273)',width=800,height=600)\nfig.show()","102dff9d":"data_6= pd.read_csv('\/kaggle\/input\/covid19-in-india\/population_india_census2011.csv')\ndata_6.head(35)","0df32768":"data_6.shape","7561fe4e":"data_6.isnull().any()","dc302e6f":"data_6.sort_values('Population', ascending= False).style.background_gradient(cmap='Wistia')","4f5dc28e":"# total = [data_1, data_6]\n# results = pd.concat(total)\n# results.head()","ebd3c411":"sns.barplot(x= 'Population',y ='Density', data = data_6)","87c7dd4e":"import requests\ndf_india_test = pd.io.json.json_normalize(requests.get('https:\/\/api.rootnet.in\/covid19-in\/stats\/testing\/history').json()['data']).rename(columns = {\"totalIndividualsTested\":\"c_individualtest\",\"totalPositiveCases\":\"c_positive\",\"totalSamplesTested\":\"c_tests\"})\nindia = folium.Map(location=[23,80], zoom_start=4,max_zoom=6,min_zoom=4,height=500,width=\"80%\")\nindia","3f954c23":"**Visualization**","f753f707":"# Age \n","42686261":"**Data PreProcessing**","a9bd989d":"# **State Wise Covid-19 Data Analysis**","bc9e94fb":"**Library **","ecec0593":"**Encoding**"}}