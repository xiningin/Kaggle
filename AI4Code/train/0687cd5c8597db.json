{"cell_type":{"90ceba0f":"code","24bf16bd":"code","d8ba8f9b":"code","6891a39e":"code","a93ec9f9":"code","6291ade7":"code","b2e7440b":"code","7c5acdf5":"code","88cd4e0e":"code","8780b7d5":"code","274d5b70":"code","c5f871f4":"code","342230e9":"code","8c7b535e":"code","573034f8":"code","47fef225":"code","87f4699c":"code","c05d0ca6":"code","5d481449":"code","63bda704":"code","51214210":"code","9ac66010":"code","6c794f6b":"code","615c6171":"markdown","02b1fb12":"markdown","2439e611":"markdown","49b918e5":"markdown","10f23432":"markdown","8153cde8":"markdown","b617cf28":"markdown","8f0a7c69":"markdown","39c21176":"markdown","6b731947":"markdown","ff91dd1b":"markdown","c868af6e":"markdown","c5808721":"markdown","18607b88":"markdown","5e90f7e5":"markdown","a060f84f":"markdown","5f3dce2d":"markdown","e8adc30a":"markdown","be874005":"markdown","88957076":"markdown","3be39c79":"markdown","04b9fcf9":"markdown","6c804fa1":"markdown","91e62468":"markdown","c87a2fb6":"markdown","b1db486a":"markdown","05d05376":"markdown"},"source":{"90ceba0f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport random\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","24bf16bd":"train_df=pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","d8ba8f9b":"train_df.head()","6891a39e":"test_df.head()","a93ec9f9":"x=train_df.drop('label',axis=1).values\ny=train_df['label'].values","6291ade7":"plt.bar(list(range(10)),train_df['label'].value_counts())\nplt.xticks(list(range(10)))\nplt.xlabel('Digits')\nplt.ylabel('Frequency')\nplt.title('Distribution of various digits in Dataset')\nplt.show()","b2e7440b":"plt.imshow(x[0:1,:].reshape(28,28))\nplt.show()","7c5acdf5":"fig,axes=plt.subplots(3,6,figsize=(18,11),sharex=True,sharey=True)\nfor i,axes in enumerate(axes.flat):\n    random_digit=np.random.randint(0,y.shape[0])\n    axes.set_xlabel(y[random_digit])\n    axes.imshow(x[random_digit].reshape(28,28),cmap='gray')","88cd4e0e":"from tensorflow import keras\nx=x\/255\nx_reshaped=x.reshape(x.shape[0],28,28,1)\nclasses_count=len(np.unique(y))\ny_categorical=keras.utils.to_categorical(y,classes_count)","8780b7d5":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x_reshaped,y_categorical,test_size=0.2,stratify=y)\nx_train,x_cv,y_train,y_cv=train_test_split(x_train,y_train,test_size=0.2,stratify=y_train)","274d5b70":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D,MaxPooling2D,Dropout\nfrom tensorflow.keras.optimizers import Adam\nmodel=Sequential()\nfilters_count=64\nfilter1_size=(5,5)\nfilter2_size=(3,3)\npool_kernel_size=(2,2)\nnode_count=500\nmodel.add(Conv2D(\n          filters_count,\n          filter1_size,\n          input_shape=(x_train.shape[1],x_train.shape[2],1),\n          activation='relu'\n))\nmodel.add(Conv2D(\n          filters_count,\n          filter1_size,\n          activation='relu'\n))\nmodel.add(MaxPooling2D(pool_size=pool_kernel_size))\nmodel.add(Conv2D(\n          filters_count\/\/2,\n          filter1_size,\n          input_shape=(x_train.shape[1],x_train.shape[2],1),\n          activation='relu'\n))\nmodel.add(Conv2D(\n          filters_count\/\/2,\n          filter1_size,\n          input_shape=(x_train.shape[1],x_train.shape[2],1),\n          activation='relu'\n))\nmodel.add(MaxPooling2D(pool_size=pool_kernel_size))\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(Dense(node_count,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(classes_count,activation='softmax'))\nmodel.compile(Adam(learning_rate=0.001),loss='categorical_crossentropy',metrics='accuracy')\n","c5f871f4":"model.summary()","342230e9":"from tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nearlyStopping=EarlyStopping(monitor='accuracy',mode='min',verbose=1,patience=50)\ncheckpoints=ModelCheckpoint(\"Digit_Recognizer.h5\",monitor='val_accuracy',mode='min',save_best_only=True)","8c7b535e":"history=model.fit(\n    x_train,\n    y_train,\n    batch_size=50,\n    epochs=100,\n    validation_data=(x_cv,y_cv),\n    callbacks=[earlyStopping,checkpoints])","573034f8":"plt.plot(history.history['loss'],label='Training_loss')\nplt.plot(history.history['accuracy'],label='Training_accuracy')\nplt.xlabel('Epochs')\nplt.title('Training Loss Vs Accuracy')\nplt.legend()\nplt.show()","47fef225":"plt.plot(history.history['val_loss'],label='Testing_loss')\nplt.plot(history.history['val_accuracy'],label='Testing_accuracy')\nplt.xlabel('Epochs')\nplt.title('Testing Loss Vs Accuracy')\nplt.legend()\nplt.show()","87f4699c":"from tensorflow.keras.models import load_model\nmodel=load_model('Digit_Recognizer.h5')\n_,train_accuracy=model.evaluate(x_train,y_train)\nprint(f\"Training Accuracy: {train_accuracy}\")","c05d0ca6":"_,test_accuracy=model.evaluate(x_test,y_test)\nprint(f\"Testing Accuracy: {test_accuracy}\")","5d481449":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nplt.figure(figsize=(12,10))\ny_hat=model.predict(x_test)\ny_hat=np.argmax(y_hat,axis=1)\ny_true=np.argmax(y_test,axis=1)\nsns.heatmap(confusion_matrix(y_true,y_hat),annot=True)\nplt.show()","63bda704":"print(classification_report(y_true,y_hat))","51214210":"fig,axes=plt.subplots(3,6,figsize=(18,11),sharex=True,sharey=True)\nfor i,axes in enumerate(axes.flat):\n    random_digit=np.random.randint(0,x_test.shape[0])\n    axes.set_xlabel(f\"Predicted: {np.argmax(model.predict(np.expand_dims(x_test[random_digit],0)))}\")\n    axes.set_ylabel(f\"Actual: {np.argmax(y_test[random_digit])}\")\n    axes.imshow(x_test[random_digit].reshape(28,28))","9ac66010":"test_images=test_df.values\ntest_images=test_images.reshape(len(test_df),28,28,1)\ntest_images=test_images\/255","6c794f6b":"\ny_pred=model.predict(test_images)\ny_pred=np.argmax(y_pred,axis=1)\nsubmission=pd.DataFrame({\"ImageId\":list(range(1,len(y_pred)+1)),\"Label\": y_pred})\nsubmission.to_csv(\"submission.csv\",index=False,header=True)","615c6171":"### **Making Predictions on the Unseen Data**","02b1fb12":"### **Plot between Training Loss and Training Accuracy**","2439e611":"### **Displaying single Image**","49b918e5":"### **Distribution of images of digits in the dataset**","10f23432":"### **Splitting the Dataset into Training, Testing and Cross Validation Datasets**","8153cde8":"### **Displaying the Training and Testing Accuracies**","b617cf28":"### **Converting the Fetures into a format that is accepted by the Nerual network for training**","8f0a7c69":"# <center><b><u>Hand Written Digit Recognition using CNN<\/u><\/b> <\/center>","39c21176":"## **Building a Convolution Neural Network**","6b731947":"![image.png](attachment:b76791f2-5484-456d-bc6c-2837661874e5.png)","ff91dd1b":"<img src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRgEwrABViJwTOdkOPaFYAC0qAtZwr3FZmK6g&usqp=CAU\" \n     style=\"display: block;margin-left:auto;margin-right:auto;width:50%;\"\/>","c868af6e":"<img src=\"https:\/\/www.mathworks.com\/help\/deeplearning\/ug\/deep_learning_architecture600pixels.png\"\/>","c5808721":"### **Architecture of the model**","18607b88":"### **Importing Libraries**","5e90f7e5":"### **Plot between Testing Loss and Testing Accuracy**","a060f84f":"### **Displaying Random images as a grid**","5f3dce2d":"# <center style=\"color:red\"> \ud83c\udf89\ud83c\udf8a Upvote the notebook if it is useful and Informative. \ud83c\udf89 \ud83c\udf8a <\/center>","e8adc30a":"### **Reading Training and Testing CSV Files**","be874005":"![image.png](attachment:2a9e5e72-1dfc-43f7-bb54-14491a20e2f3.png)","88957076":"### **Classification Report of Test Predictions**","3be39c79":"<img src=\"https:\/\/ars.els-cdn.com\/content\/image\/1-s2.0-S0893608020301301-gr1.jpg\" \n     style=\"display: block;margin-left:auto;margin-right:auto;width:50%;\"\/>","04b9fcf9":"### **Seperating the Feature and the target columns**","6c804fa1":"### **Predicting the digits in the ramdom images and displaying it on the X-axis**","91e62468":"## <center> **Model Evaluation** <\/center>","c87a2fb6":"### **Training the CNN model with the train datasest**","b1db486a":"### **Confusion Matrix for evaluating predictions on Test dataset.**","05d05376":"### **Adding callbacks to save the best model and to stop training when there is no significant change in the Validation Accuracy**"}}