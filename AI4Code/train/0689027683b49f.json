{"cell_type":{"c6624a0e":"code","7beb34e4":"code","96b0371a":"code","19eae089":"code","de6566f0":"code","c9aba3b5":"code","b1e70e25":"code","159b6afe":"code","9d8ae366":"code","09c62813":"code","98d2d997":"code","56a420e5":"code","e131bfdd":"code","b648a917":"code","36c456ac":"code","88014aed":"code","53b8e420":"code","bb4fd368":"code","65b8d9a4":"code","9d33cb6e":"code","87d921de":"code","142e4dec":"code","b2394111":"code","869849b0":"code","0b2d449e":"code","9b643495":"code","adf45683":"code","70470cad":"markdown","de204c32":"markdown","e2144f6c":"markdown","96d76114":"markdown","e348281f":"markdown","022dd30f":"markdown","1b5a0d3c":"markdown","c06c985f":"markdown"},"source":{"c6624a0e":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN,\\\nLSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D,Reshape, Conv2DTranspose, LeakyReLU, GaussianNoise\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.datasets import mnist\nimport keras\n#SKLEARN CLASSIFIER\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","7beb34e4":"Wave_Train_Data = Path(\"..\/input\/gravity-spy-gravitational-waves\/train\/train\")\nWave_Test_Data = Path(\"..\/input\/gravity-spy-gravitational-waves\/test\/test\")\nWave_Validation_Data = Path(\"..\/input\/gravity-spy-gravitational-waves\/validation\/validation\")","96b0371a":"Train_PNG_Path = list(Wave_Train_Data.glob(r\"*\/*.png\"))\nTest_PNG_Path = list(Wave_Test_Data.glob(r\"*\/*.png\"))\nValidation_PNG_Path = list(Wave_Validation_Data.glob(r\"*\/*.png\"))","19eae089":"Train_PNG_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Train_PNG_Path))\nTest_PNG_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Test_PNG_Path))\nValidation_PNG_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Validation_PNG_Path))","de6566f0":"Train_PNG_Path_Series = pd.Series(Train_PNG_Path,name=\"PNG\").astype(str)\nTest_PNG_Path_Series = pd.Series(Test_PNG_Path,name=\"PNG\").astype(str)\nValidation_PNG_Path_Series = pd.Series(Validation_PNG_Path,name=\"PNG\").astype(str)","c9aba3b5":"Train_PNG_Labels_Series = pd.Series(Train_PNG_Labels,name=\"CATEGORY\")\nTest_PNG_Labels_Series = pd.Series(Test_PNG_Labels,name=\"CATEGORY\")\nValidation_PNG_Labels_Series = pd.Series(Validation_PNG_Labels,name=\"CATEGORY\")","b1e70e25":"Main_Train_Data = pd.concat([Train_PNG_Path_Series,Train_PNG_Labels_Series],axis=1)\nMain_Test_Data = pd.concat([Test_PNG_Path_Series,Test_PNG_Labels_Series],axis=1)\nMain_Validation_Data = pd.concat([Validation_PNG_Path_Series,Validation_PNG_Labels_Series],axis=1)","159b6afe":"Main_Train_Data = Main_Train_Data.sample(frac=1).reset_index(drop=True)\nMain_Test_Data = Main_Test_Data.sample(frac=1).reset_index(drop=True)\nMain_Validation_Data = Main_Validation_Data.sample(frac=1).reset_index(drop=True)","9d8ae366":"Train_Generator = ImageDataGenerator(rescale=1.\/255,\n                              zoom_range=0.3,\n                              shear_range=0.3,\n                              horizontal_flip=True,\n                              vertical_flip=True,\n                              fill_mode=\"nearest\",\n                               height_shift_range=0.2,\n                              width_shift_range=0.2)","09c62813":"Val_Test_Generator = ImageDataGenerator(rescale=1.\/255)","98d2d997":"example_IMG = Main_Train_Data[\"PNG\"][13945]\nload_img = image.load_img(example_IMG,target_size=(180,180))\nArray_Image = image.img_to_array(load_img)\nArray_Image = Array_Image.reshape((1,) + Array_Image.shape)\n\ni = 0 \nfor batch in Train_Generator.flow(Array_Image,batch_size=1):\n    plt.figure(i)\n    IMG = plt.imshow(image.array_to_img(batch[0]))\n    i += 1\n    if i % 4 == 0:\n        break\nplt.show()","56a420e5":"Train_IMG_Set = Train_Generator.flow_from_dataframe(dataframe=Main_Train_Data,\n                                                   x_col=\"PNG\",\n                                                   y_col=\"CATEGORY\",\n                                                   color_mode=\"rgb\",\n                                                   class_mode=\"categorical\",\n                                                   subset=\"training\",\n                                                    batch_size=32,\n                                                   target_size=(180,180))","e131bfdd":"Validation_IMG_Set = Val_Test_Generator.flow_from_dataframe(dataframe=Main_Validation_Data,\n                                                        x_col=\"PNG\",\n                                                        y_col=\"CATEGORY\",\n                                                        color_mode=\"rgb\",\n                                                        class_mode=\"categorical\",\n                                                           batch_size=32,\n                                                           target_size=(180,180))","b648a917":"Test_IMG_Set = Val_Test_Generator.flow_from_dataframe(dataframe=Main_Test_Data,\n                                                        x_col=\"PNG\",\n                                                        y_col=\"CATEGORY\",\n                                                        color_mode=\"rgb\",\n                                                        class_mode=\"categorical\",\n                                                           batch_size=32,\n                                                           target_size=(180,180),\n                                                     shuffle=False)","36c456ac":"for data_batch,label_batch in Train_IMG_Set:\n    print(\"DATA SHAPE: \",data_batch.shape)\n    print(\"LABEL SHAPE: \",label_batch.shape)\n    break","88014aed":"for data_batch,label_batch in Validation_IMG_Set:\n    print(\"DATA SHAPE: \",data_batch.shape)\n    print(\"LABEL SHAPE: \",label_batch.shape)\n    break","53b8e420":"for data_batch,label_batch in Test_IMG_Set:\n    print(\"DATA SHAPE: \",data_batch.shape)\n    print(\"LABEL SHAPE: \",label_batch.shape)\n    break","bb4fd368":"print(\"TRAIN: \")\nprint(Train_IMG_Set.class_indices)\nprint(Train_IMG_Set.classes[0:5])\nprint(Train_IMG_Set.image_shape)\nprint(\"---\"*20)\nprint(\"VALIDATION: \")\nprint(Validation_IMG_Set.class_indices)\nprint(Validation_IMG_Set.classes[0:5])\nprint(Validation_IMG_Set.image_shape)\nprint(\"---\"*20)\nprint(\"TEST: \")\nprint(Test_IMG_Set.class_indices)\nprint(Test_IMG_Set.classes[0:5])\nprint(Test_IMG_Set.image_shape)","65b8d9a4":"Model = Sequential()\n\nModel.add(Conv2D(24,(3,3),activation=\"relu\",input_shape=(180,180,3)))\nModel.add(BatchNormalization())\nModel.add(MaxPooling2D((2,2),strides=2))\n\nModel.add(Conv2D(64,(3,3),activation=\"relu\",padding=\"same\"))\nModel.add(Dropout(0.3))\nModel.add(MaxPooling2D((2,2),strides=2))\n\nModel.add(Conv2D(64,(3,3),activation=\"relu\",padding=\"same\"))\nModel.add(Dropout(0.3))\nModel.add(MaxPooling2D((2,2),strides=2))\n\nModel.add(Conv2D(128,(3,3),activation=\"relu\",padding=\"same\"))\nModel.add(Conv2D(128,(3,3),activation=\"relu\",padding=\"same\"))\nModel.add(Dropout(0.3))\nModel.add(MaxPooling2D((2,2),strides=2))\n\nModel.add(Conv2D(256,(3,3),activation=\"relu\",padding=\"same\"))\nModel.add(Dropout(0.3))\nModel.add(MaxPooling2D((2,2),strides=2))\n\nModel.add(Flatten())\nModel.add(Dense(2352,activation=\"relu\"))\nModel.add(Dropout(0.5))\nModel.add(Dense(22,activation=\"softmax\"))","9d33cb6e":"Call_Back = tf.keras.callbacks.EarlyStopping(monitor=\"loss\",patience=3,mode=\"min\")","87d921de":"Model.compile(optimizer=\"adam\",loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])","142e4dec":"CNN_Model = Model.fit(Train_IMG_Set,validation_data=Validation_IMG_Set,callbacks=Call_Back,epochs=50)","b2394111":"Model_Results = Model.evaluate(Test_IMG_Set,verbose=False)\nprint(\"LOSS:  \" + \"%.4f\" % Model_Results[0])\nprint(\"ACCURACY:  \" + \"%.2f\" % Model_Results[1])","869849b0":"plt.plot(CNN_Model.history[\"accuracy\"])\nplt.plot(CNN_Model.history[\"val_accuracy\"])\nplt.ylabel(\"ACCURACY\")\nplt.legend()\nplt.show()","0b2d449e":"plt.plot(CNN_Model.history[\"loss\"])\nplt.plot(CNN_Model.history[\"val_loss\"])\nplt.ylabel(\"LOSS\")\nplt.legend()\nplt.show()","9b643495":"plt.plot(CNN_Model.history[\"loss\"])\nplt.plot(CNN_Model.history[\"accuracy\"])\nplt.ylabel(\"LOSS - ACCURACY\")\nplt.legend()\nplt.show()","adf45683":"Dict_Summary = pd.DataFrame(CNN_Model.history)\nDict_Summary.plot()","70470cad":"# HISTORY","de204c32":"# CNN","e2144f6c":"# PACKAGES AND LIBRARIES","96d76114":"# IMAGE GENERATOR","e348281f":"#### Context\n* The Laser Interferometer Gravitational-Wave Observatory (LIGO) was designed to open the field of gravitational-wave astrophysics through the direct detection of gravitational waves predicted by Einstein\u2019s General Theory of Relativity. LIGO\u2019s multi-kilometer-scale gravitational wave detectors use laser interferometry to measure the minute ripples in space-time caused by passing gravitational waves from cataclysmic cosmic events such as colliding neutron stars or black holes, or by supernovae. LIGO consists of two widely-separated interferometers within the United States\u2014one in Hanford, Washington and the other in Livingston, Louisiana\u2014operated in unison to detect gravitational waves.\n\n* This dataset is made up of LIGO images that have been classified by people as part of the Gravity Spy Zooniverse project and they've been placed into train,validation and test folders,ready for machine learning.","022dd30f":"# PATH & LABEL PROCESS","1b5a0d3c":"#### HOW TO LOOK WITH GENERATOR","c06c985f":"#### SPLITTING TRAIN, VALIDATION, TEST"}}