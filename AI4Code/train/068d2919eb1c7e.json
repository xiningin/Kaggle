{"cell_type":{"25b4ffee":"code","8ac9e905":"code","50ad5530":"code","396ba928":"code","e781ae53":"code","ca46404c":"code","eaa2db88":"code","4ce109d0":"code","1a40703e":"code","fef742a3":"code","364b6edc":"code","56ab9e0f":"code","03a4313c":"code","1886b803":"code","93125e1a":"code","7158cb23":"code","67272333":"code","be2178a1":"code","ca769b72":"code","66be2edd":"code","d4ff2729":"code","60b35b90":"code","27afcf62":"code","24a2d17a":"code","d4c17aab":"code","a262fca0":"code","17d13e9d":"code","0e84a89a":"code","fc561903":"code","089dee31":"code","7dc404ae":"code","35142111":"code","e56dde29":"code","e7849dab":"code","0a41b7e4":"code","1da1d050":"code","dd1b1241":"code","c0e86d68":"code","07903ffa":"code","1c853eb6":"code","2882430a":"code","264a28ed":"code","5693b4a5":"code","6e176708":"markdown","6f3f8a0f":"markdown","7789b694":"markdown","07c71dda":"markdown","9b4f6909":"markdown"},"source":{"25b4ffee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ac9e905":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom PIL import Image","50ad5530":"pic = Image.open('\/kaggle\/input\/intro-computer-vision\/00-puppy.jpg')","396ba928":"pic","e781ae53":"type(pic)","ca46404c":"pic_arr = np.asarray(pic)\npic_arr.shape","eaa2db88":"pic_arr","4ce109d0":"plt.imshow(pic_arr)","1a40703e":"pic_red = pic_arr.copy()","fef742a3":"pic_arr[:, :, 0]","364b6edc":"#pic_red[:, :, 0] = 0    # Zero out contribution from green\npic_red[:, :, 2] = 0    # Zero out contribution from blue","56ab9e0f":"plt.imshow(pic_red)","03a4313c":"plt.imshow(pic_arr[:, :, 0])","1886b803":"import cv2","93125e1a":"img = cv2.imread('\/kaggle\/input\/intro-computer-vision\/00-puppy.jpg')","7158cb23":"img.shape","67272333":"img_bgr = cv2.imread('\/kaggle\/input\/intro-computer-vision\/00-puppy.jpg')\nplt.imshow(img_bgr)","be2178a1":"img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img_rgb)","ca769b72":"img_gray = cv2.imread('\/kaggle\/input\/intro-computer-vision\/00-puppy.jpg',cv2.IMREAD_GRAYSCALE)\nplt.imshow(img_gray)","66be2edd":"img_gray.shape","d4ff2729":"img_gray = cv2.imread('\/kaggle\/input\/intro-computer-vision\/00-puppy.jpg',cv2.IMREAD_GRAYSCALE)\nplt.imshow(img_gray,cmap='gray')","60b35b90":"img_gray.shape","27afcf62":"## Saving images\ncv2.imwrite('my_new_picture.jpg',img_gray)","24a2d17a":"full = cv2.imread('\/kaggle\/input\/intro-computer-vision\/sammy.jpg')\nfull = cv2.cvtColor(full, cv2.COLOR_BGR2RGB)","d4c17aab":"plt.imshow(full)","a262fca0":"face= cv2.imread('\/kaggle\/input\/intro-computer-vision\/sammy_face.jpg')\nface = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)\nplt.imshow(face)","17d13e9d":"# The Full Image to Search\nfull = cv2.imread('\/kaggle\/input\/intro-computer-vision\/sammy.jpg')\nfull = cv2.cvtColor(full, cv2.COLOR_BGR2RGB)\n\n\n# The Template to Match\nface= cv2.imread('\/kaggle\/input\/intro-computer-vision\/sammy_face.jpg')\nface = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)\n\n\n# All the 6 methods for comparison in a list\n# Note how we are using strings, later on we'll use the eval() function to convert to function\nmethods = ['cv2.TM_CCOEFF', \n           'cv2.TM_CCOEFF_NORMED', \n           'cv2.TM_CCORR',\n           'cv2.TM_CCORR_NORMED', \n           'cv2.TM_SQDIFF', \n           'cv2.TM_SQDIFF_NORMED']","0e84a89a":"height, width, channels = face.shape","fc561903":"for m in methods:\n    \n    # Create a copy of the image\n    full_copy = full.copy()\n    \n    # Get the actual function instead of the string\n    method = eval(m)\n\n    # Apply template Matching with the method\n    res = cv2.matchTemplate(full_copy,face,method)\n    \n    # Grab the Max and Min values, plus their locations\n    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)\n    \n    # Set up drawing of Rectangle\n    \n    # If the method is TM_SQDIFF or TM_SQDIFF_NORMED, take minimum\n    # Notice the coloring on the last 2 left hand side images.\n    if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:\n        top_left = min_loc    \n    else:\n        top_left = max_loc\n        \n    # Assign the Bottom Right of the rectangle\n    bottom_right = (top_left[0] + width, top_left[1] + height)\n\n    # Draw the Red Rectangle\n    cv2.rectangle(full_copy,top_left, bottom_right, (255,0,0), 10)\n\n    # Plot the Images\n    plt.subplot(121)\n    plt.imshow(res)\n    plt.title('Result of Template Matching')\n    \n    plt.subplot(122)\n    plt.imshow(full_copy)\n    plt.title('Detected Point')\n    plt.suptitle(m)\n    \n    \n    plt.show()\n    print('\\n')\n    print('\\n')","089dee31":"nadia = cv2.imread('\/kaggle\/input\/intro-computer-vision\/Nadia_Murad.jpg',0)\ndenis = cv2.imread('\/kaggle\/input\/intro-computer-vision\/Denis_Mukwege.jpg',0)\nsolvay = cv2.imread('\/kaggle\/input\/intro-computer-vision\/solvay_conference.jpg',0)","7dc404ae":"plt.imshow(nadia,cmap='gray')","35142111":"plt.imshow(denis,cmap='gray')","e56dde29":"plt.imshow(solvay,cmap='gray')","e7849dab":"face_cascade = cv2.CascadeClassifier('\/kaggle\/input\/intro-computer-vision\/haarcascade_frontalface_default.xml')","0a41b7e4":"def detect_face(img):\n    \n  \n    face_img = img.copy()\n  \n    face_rects = face_cascade.detectMultiScale(face_img) \n    \n    for (x,y,w,h) in face_rects: \n        cv2.rectangle(face_img, (x,y), (x+w,y+h), (255,255,255), 5) \n        \n    return face_img","1da1d050":"plt.imshow(detect_face(denis),cmap='gray')","dd1b1241":"plt.imshow(detect_face(nadia),cmap='gray')","c0e86d68":"# Gets errors!\nplt.imshow(detect_face(solvay),cmap='gray')","07903ffa":"def adj_detect_face(img):\n    \n    face_img = img.copy()\n  \n    face_rects = face_cascade.detectMultiScale(face_img,\n                                               scaleFactor=1.2, \n                                               minNeighbors=5) \n    \n    for (x,y,w,h) in face_rects: \n        cv2.rectangle(face_img, (x,y), (x+w,y+h), (255,255,255), 10) \n        \n    return face_img","1c853eb6":"# Doesn't detect the side face.\nplt.imshow(adj_detect_face(solvay),cmap='gray')","2882430a":"eye_cascade = cv2.CascadeClassifier('\/kaggle\/input\/intro-computer-vision\/haarcascade_eye.xml')","264a28ed":"def detect_eyes(img):\n    \n    eye_img = img.copy()\n  \n    eyes = eye_cascade.detectMultiScale(eye_img) \n    \n    \n    for (x,y,w,h) in eyes: \n        cv2.rectangle(eye_img, (x,y), (x+w,y+h), (255,255,255), 10) \n        \n    return eye_img","5693b4a5":"plt.imshow(detect_eyes(nadia),cmap='gray')","6e176708":"## Face Detection with Haar Cascades","6f3f8a0f":"## Template Matching","7789b694":"# Object Detection","07c71dda":"## NumPy and Image Basics","9b4f6909":"**The image has been correctly loaded by openCV as a numpy array, but the color of each pixel has been sorted as BGR. Matplotlib's plot expects an RGB image so, for a correct display of the image, it is necessary to swap those channels. This operation can be done either by using openCV conversion functions cv2.cvtColor() or by working directly with the numpy array.**"}}