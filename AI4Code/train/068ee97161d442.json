{"cell_type":{"65ac0b03":"code","39442bcf":"code","0749553a":"code","1bc7849d":"code","c6a45f70":"code","25c5ce8c":"code","465f76f2":"code","a5d8aa24":"code","5cb691f9":"code","5ca4dd82":"code","77d65dfe":"code","619cf8c2":"code","9ad65d82":"code","9d19a1a5":"code","c203a118":"code","ed3436f7":"code","2353a2a2":"code","d0a9d033":"code","ca4c49ce":"code","f2fe561c":"code","478d5103":"code","2aae8baa":"code","c58e4d97":"code","0b50fcc2":"code","6756083d":"code","962bd759":"code","39208f80":"code","16a69cbe":"code","155c81ee":"code","03cfdda8":"code","01a7b136":"code","b2b20554":"code","345cf54b":"code","a4c9ff2b":"code","b6ac5a9e":"code","7b8a2f44":"code","d0d4e927":"code","2c480947":"code","21590d2b":"code","c9e77c40":"code","b6e6d3f4":"code","02a607c9":"code","4eee71c8":"code","e6799e3d":"code","b7291193":"code","81bd182d":"code","c9ef1f7d":"markdown","01b45660":"markdown","3b674856":"markdown","da379a19":"markdown","009f9ab6":"markdown","27b7a311":"markdown","a8226f24":"markdown","69ed8741":"markdown","94c01deb":"markdown","389563ec":"markdown","759d0c5b":"markdown","736be217":"markdown","400ec45a":"markdown","3f71ce1a":"markdown","a2309778":"markdown","8e3ffd3a":"markdown","2b4a7e34":"markdown","ef674ddf":"markdown","8a33b150":"markdown","9632fa41":"markdown","66e5f01d":"markdown","6eabf203":"markdown","5f8e16e5":"markdown","6b3a7961":"markdown","c8ddcd07":"markdown","a172dcd1":"markdown","8981331e":"markdown","04d93248":"markdown","8b39e6f1":"markdown","de82577d":"markdown","0822a0b8":"markdown","e61639a6":"markdown","c701c5d3":"markdown","7c92da33":"markdown","4bc59a5a":"markdown","59f38601":"markdown","4dcbb3e7":"markdown","5ca9069b":"markdown","1609d336":"markdown","21705187":"markdown","c89a4a19":"markdown","237ed3d0":"markdown","be1791e4":"markdown","9f71b0c3":"markdown","996b1724":"markdown"},"source":{"65ac0b03":"# Import libraries\nfrom IPython.display import display, HTML # Display functions\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nsns.set_palette(\"colorblind\") \nsns.set_style(\"darkgrid\")\n\nimport os\n\n# Set Pandas display options\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\n# Import geospaitial libraries\nimport geopandas as gpd\nfrom shapely.geometry import Point\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable","39442bcf":"# Read data\nos.chdir('..\/input')\n\npath = '2004-2019.tsv'\n\ndf = pd.read_csv(path, sep='\\t',parse_dates=True)\ndf.head()","0749553a":"df.info()","1bc7849d":"# Translate column names to English\ndf.columns = [\"Unnamed:_0\", \n\"Analysis_Date\",\n\"Last day of analyses of week\",\n\"Macroregion\",\n\"State\",\n\"Product\",\n\"No of Gas Stations Analyzed\",\n\"Measurement unit\",\n\"Mean Price\",\n\"Std Dev\",\n\"Min Price\",\n\"Max Price\",\n\"Mean Price Margin\",\n\"Coefficient of variation\",\n\"Mean Dist Price\",\n\"Distribution Std Dev\",\n\"Distribution Min Price\",\n\"Distribution Max Price\",\n\"Distribution Coefficient of Variation\",\n\"Month\",\n\"Year\"]\n\n# Replace whitespace with underscore\ndf.columns = df.columns.str.replace(\" \", \"_\")\ndf.columns = df.columns.str.replace(\"'\", \"\")\ndf.columns = df.columns.str.replace(\"Distribution\", \"Dist\")\n\n# Convert datetime columns to datetime objects and rename\ndf[\"Analysis_Date\"] = pd.to_datetime(df[\"Analysis_Date\"])","c6a45f70":"df.info()","25c5ce8c":"# Correct dtypes\nfloat_columns = ['Mean_Price_Margin', 'Mean_Dist_Price', 'Dist_Std_Dev',\n       'Dist_Min_Price', 'Dist_Max_Price',\n       \"Dist_Coefficient_of_Variation\"]\n\n# Replace \"-\" with 0 in order to convert to float\nfor column in float_columns:\n    df[column] = df[column].str.replace(\"-\", \"0\")\n\n# Fill nulls and convert to float\ndf[float_columns] = df[float_columns].fillna(0).astype(float)\n\nassert df[float_columns].dtypes.all() == np.float64\n\n# Rename Product categories\nproducts = {\"\u00d3LEO DIESEL\":\"DIESEL\", \"GASOLINA COMUM\":\"PETROL\", \"GLP\":\"LPG\", \n            \"ETANOL HIDRATADO\":\"HYDROUS ETHANOL\", \"GNV\":\"NATURAL GAS\", \"\u00d3LEO DIESEL S10\":\"DIESEL S10\"}\n\ndf[\"Product\"] = df.Product.map(products)\n\n# Rename Measurement_unit categories\nunits = {\"R$\/l\":\"liter\", \"R$\/13Kg\":\"13kg\", \"R$\/m3\":\"m3\"}\n\ndf[\"Measurement_unit\"] = df[\"Measurement_unit\"].map(units)\n\n# Convert objects to category\nobject_cols = df.select_dtypes(include='object').columns\ndf[object_cols] = df[object_cols].astype('category', inplace=True)","465f76f2":"# Create Price Groups: Group 1 are liquid fuels plus Natural Gas, Group 2 is LPG\ndf['Price_Group'] = df.Measurement_unit.map({'liter':int(1), 'm3':int(1), '13kg':int(2)})\n\n# Normalize Mean Price for each fuel group\nnormalizer = lambda x: (x - x.min()) \/ (x.max() - x.min())\n\n# Normalize Prices for Price_Group_1: all fuels except LPG\ndf[\"Mean_Price_Norm_Price_Group_1\"] = df[df.Price_Group==1].groupby(\"Product\")[\"Mean_Price\"].transform(normalizer)\n\n# Normalize Prices for Price_Group_2: LPG\ndf[\"Mean_Price_Norm_Price_Group_2\"] = df[df.Price_Group==2].groupby(\"Product\")[\"Mean_Price\"].transform(normalizer)\n\n# Combine Price_Group columns into one column\ndf[\"Mean_Price_Norm\"] = df[\"Mean_Price_Norm_Price_Group_1\"].fillna(df[\"Mean_Price_Norm_Price_Group_2\"])\ndf.drop([\"Mean_Price_Norm_Price_Group_1\", \"Mean_Price_Norm_Price_Group_2\"], axis=1, inplace=True)\n\n# Create Year_Month column for time series plots\nyear_month = df.Year.astype(str) + \"-\" + df.Month.astype(str)\ndf[\"Year_Month\"] = pd.to_datetime(year_month)","a5d8aa24":"# Check max\/min values of each Product group to ensure that they were properly normalized\nproducts = df.Product.unique().tolist()\n\nfor product in range(len(products)):\n    mins = df[df.Product==products[product]][\"Mean_Price_Norm\"].min()\n    maxs = df[df.Product==products[product]][\"Mean_Price_Norm\"].max()\n    \n    print(products[product])\n    print(mins, maxs)","5cb691f9":"df.drop(['Unnamed:_0', 'Last_day_of_analyses_of_week'], axis = 1, inplace=True)","5ca4dd82":"display(df.head())\n\n#df.to_csv('..\/data\/interim\/fuel_in_brazil_clean.csv')","77d65dfe":"# Drop unneeded columns\ndf.drop(['Std_Dev', \n         'Min_Price', 'Max_Price', 'Mean_Price_Margin', \n         'Coefficient_of_variation', \n         'Dist_Std_Dev', 'Dist_Min_Price', 'Dist_Max_Price', \n         'Dist_Coefficient_of_Variation'], axis = 1, inplace=True)\n\n# Save to clean data folder\n#df.to_csv('..\/data\/processed\/fuel_in_brazil_clean.csv')","619cf8c2":"def count_plot(column, df, title=None, xlabel=None, ylabel=None, rot=None):\n\n    fig, ax = plt.subplots(figsize=(14,6))\n    ax = sns.countplot(x=column, data=df)\n    plt.title(title, fontsize=28)\n    plt.xlabel(ylabel, fontsize=22)\n    plt.ylabel(xlabel, fontsize=24)\n    plt.xticks(rotation=rot, fontsize=20)\n    plt.yticks(fontsize=16)\n    plt.tight_layout()\n    \n    plt.show()","9ad65d82":"# Define ECDF function\ndef ecdf(data, column, title=None, color=None):\n    n = len(data[column])\n    x = np.sort(data[column])\n    y = np.arange(1, n+1)\/n\n    \n    # Plot\n    plt.figure(figsize=(10,5))\n    plt.plot(x, y, marker='.', linestyle='none', color=color)\n    plt.title(title)\n    plt.xlabel(\"{}\".format(column))\n    plt.ylabel(\"ECDF\")","9d19a1a5":"def ecdf_category(column, group, title=None, xlabel=None):\n\n    # Create figure with ECDF plots for each fuel Mean Price \n    products = df[group].unique().tolist()\n\n    # Group dataframe by Product and select Mean Price\n    product_group = df.groupby(group)[column]\n\n    # Set rows and columns\n    ncols = int(3)\n    nrows = int(len(products) \/ ncols if len(products) % 2 == 0 else (len(products) + 1) \/ ncols)\n    \n\n    # List of colors\n    color = [\"b\", \"y\", \"g\", \"m\", \"r\", \"c\"]\n\n    fig, ax = plt.subplots(nrows=nrows, ncols=ncols, figsize=(18, 10))\n\n    # Index counter\n    n = 0\n\n    # Create subplots\n    for row in range(nrows):\n        for col in range(ncols):\n        \n            df_product = product_group.get_group(products[n]).to_frame(\"Mean Price\")\n   \n            x = np.sort(df_product[\"Mean Price\"]) \n            y = np.arange(1, len(df_product[\"Mean Price\"])+1) \/ len(df_product[\"Mean Price\"])\n        \n            ax[row,col].step(x, y, color=color[n])\n            ax[row,col].set_ylabel(\"ECDF\")\n            ax[row,col].set_xlabel(xlabel)\n            ax[row,col].set_title(products[n])\n        \n            n += 1\n\n    plt.tight_layout(pad=5)\n    plt.suptitle(title, fontsize=18)\n    \n    return plt.show()","c203a118":"# Show names and percentage of observations for each macroregion\ndf.Macroregion.value_counts(normalize=True)","ed3436f7":"# Countplot of observations per Macroregion\ncount_plot(\"Macroregion\", df, title=\"Number of Observations per Region\", xlabel='Macroregion', ylabel='Count')","2353a2a2":"# Examine number of observations per state\ndf['State'].value_counts()","d0a9d033":"# Countplot of observations per State\nfig, ax = plt.subplots(figsize=(18,6))\nax = sns.countplot(x=\"State\", data=df)\nplt.title(\"Number of Observations per State\", fontsize=24)\nplt.xlabel('State', fontsize=18)\nplt.ylabel('Count', fontsize=18)\nplt.xticks(rotation=45, fontsize=12, ha='right')\nplt.show()","ca4c49ce":"# Display percentages of products\ndf['Product'].value_counts(normalize=True)","f2fe561c":"# Countplot of observations per Macroregion\ncount_plot('Product', df, title=\"Proportion of Fuel Products\", xlabel='Fuel', ylabel='Count', rot=12)","478d5103":"## Capture list of products\nproducts = df.Product.unique().tolist()\n\nfuel_years = pd.DataFrame()\n\nproduct_group = df.groupby(\"Product\")\n\n## Extract first and last years of observation for each fuel product\nfor i, product in enumerate(products):\n    \n    df_temp = pd.DataFrame({\"Product\":product, \"First_Year\":product_group.get_group(product)[\"Year\"].min(), \n                            \"Last_Year\":product_group.get_group(product)[\"Year\"].max()}, index=[i])\n    \n    fuel_years = fuel_years.append(df_temp)\n    \nfuel_years.set_index(\"Product\", inplace=True)\n\nfuel_years","2aae8baa":"# Group by state\nfuels_by_state = df.groupby(\"State\")[\"Product\"].value_counts().to_frame(\"Count\").reset_index()\nfuels_by_state = fuels_by_state.pivot(\"State\", \"Product\")\n\nfig, ax = plt.subplots(figsize=(15,10))\n\n# Horizontal stacked bar chart\nfuels_by_state.plot(kind=\"barh\", stacked=True, ax=ax)\n\nplt.title(\"Fuel Products Observed by State\", fontsize=22)\nplt.xlabel(\"Number of Observations\", fontsize=18)\nplt.ylabel(\"State\", fontsize=18)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\n\n# Sort order was confirmed before customizing legend\nax.legend(sorted(df.Product.unique().tolist()), loc='center left', bbox_to_anchor=(1, 0.5),prop={'size': 15})\n\nplt.tight_layout()\n\nplt.show()","c58e4d97":"df.Measurement_unit.value_counts(normalize=True)","0b50fcc2":"# Graph value counts\n\nfig, ax = plt.subplots(1, 1, figsize=(10,3))\n\ndf.Measurement_unit.value_counts(normalize=True).to_frame(\"Measurement_unit\").T.plot(kind=\"barh\", stacked=True, ax=ax,\n                                                    fontsize=14)\n\nplt.legend(bbox_to_anchor=(1.05, 1))\nplt.xlim(0, 1)\nplt.title(\"Proportion of each Measurement Unit\", fontsize=24)\nplt.show()","6756083d":"# Graph value counts\n\nfig, ax = plt.subplots(1, 1, figsize=(10,3))\n\ndf.Price_Group.value_counts(normalize=True).to_frame(\"Price_Group\").T.plot(kind=\"barh\", stacked=True, ax=ax,\n                                                    fontsize=14)\n\nplt.legend(bbox_to_anchor=(1.05, 1))\nplt.xlim(0, 1)\nplt.title(\"Proportion of each Price Group\", fontsize=24)\nplt.show()","962bd759":"# Display count, start and end dates\ncount = len(df.Analysis_Date)\nstart = df.Analysis_Date.min().strftime('%Y-%m-%d')\nend = df.Analysis_Date.max().strftime('%Y-%m-%d')\n\nprint(\"The are {} observations beginning on {} and ending {}\".format(count, start, end))","39208f80":"# Value counts by percentage\ndf.No_of_Gas_Stations_Analyzed.describe()","16a69cbe":"# Create graph of Gas Stations Analyzed per Year\ngas_stations_by_year = df.groupby([\"Year\", \"State\"])[[\"No_of_Gas_Stations_Analyzed\"]].count().reset_index()\n\nfig, ax = plt.subplots(figsize=(28,15))\n\ngas_stations_by_year.pivot(\"Year\", \"State\").sort_values(by=\"Year\", ascending=False).plot(kind=\"barh\", stacked=True, ax=ax)\n\nplt.title(\"Gas Stations Analyzed per State per Year\", fontsize=36)\nplt.xlabel(\"Gas Stations\", fontsize=32)\nplt.ylabel(\"Year\", fontsize=32)\nplt.xticks(fontsize=28)\nplt.yticks(fontsize=28)\n\n# Sort order was confirmed before customizing legend\nax.legend(sorted(gas_stations_by_year.State.unique().tolist()), loc='center left', \n          bbox_to_anchor=(1, 0.5), prop={'size': 20})\n\n\nplt.show()","155c81ee":"df.Mean_Price.describe()","03cfdda8":"ecdf(df, 'Mean_Price')","01a7b136":"# Create a boxplot out of two separate axes with different scales\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,6.5), gridspec_kw={\"width_ratios\":[5,1], \"wspace\":0})\n\n# Axis for Products with similar means\nsns.boxplot(x=\"Product\", y=\"Mean_Price\", data=df[df.Product!=\"LPG\"], order=[\"HYDROUS ETHANOL\", \"PETROL\", \n                                                              \"NATURAL GAS\", \"DIESEL\", \"DIESEL S10\"], \n            ax=ax[0])\n\n# Axis for LPG\nsns.boxplot(x=\"Product\", y=\"Mean_Price\", data=df[df.Product==\"LPG\"], ax=ax[1], color='g', width=4)\n\nplt.suptitle(\"Distributions of Mean Prices for Fuels in Brazil\", fontsize=18)\n\n# Format LPG plot\nax[1].yaxis.tick_right()\nax[1].yaxis.set_label_position(\"right\")\nax[0].set_xlabel('Product', fontsize=16)\nax[1].set_xlabel('LPG')\nax[0].set_ylabel('Price Group 1: Liquid Fuels & Natural Gas', fontsize=16)\nax[1].set_ylabel('Price Group 2: LPG', fontsize=16)\nax[1].set(xticklabels=[])\n\n\n# Add subplot for LPG\nplt.tight_layout(pad=5)","b2b20554":"ecdf_category(\"Mean_Price\", \"Product\", title=\"ECDF Curves for Fuel Mean Price\", xlabel=\"Mean Price\")","345cf54b":"# Create a boxplot out of two separate axes with different scales\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,6.5), gridspec_kw={\"width_ratios\":[5,1], \"wspace\":0})\n\n# Axis for Products with similar means\nsns.boxplot(x=\"Product\", y=\"Mean_Price\", data=df[df.Product!=\"LPG\"], order=[\"HYDROUS ETHANOL\", \"PETROL\", \n                                                              \"NATURAL GAS\", \"DIESEL\", \"DIESEL S10\"], \n            ax=ax[0])\n\n# Axis for LPG\nsns.boxplot(x=\"Product\", y=\"Mean_Price\", data=df[df.Product==\"LPG\"], ax=ax[1], color='g', width=4)\n\nplt.suptitle(\"Distribution of Mean Prices for Fuels in Brazil\", fontsize=18)\n\n# Format LPG plot\nax[1].yaxis.tick_right()\nax[1].yaxis.set_label_position(\"right\")\nax[0].set_xlabel('Product', fontsize=16)\nax[1].set_xlabel('LPG')\nax[0].set_ylabel('Price Group 1: Liquid Fuels & Natural Gas', fontsize=16)\nax[1].set_ylabel('Price Group 2: LPG', fontsize=16)\nax[1].set(xticklabels=[])\n\n\n# Add subplot for LPG\nplt.tight_layout(pad=3.5)","a4c9ff2b":"# Plot yearly Mean_Price\nfig, ax = plt.subplots(nrows=2, ncols=1, figsize=(12,9))\n\n# Plot of fuels not including LPG\nsns.lineplot(x=\"Year_Month\", y=\"Mean_Price\", data=df[df.Product!=\"LPG\"], hue=\"Product\", ax=ax[0], err_style=None)\nax[0].set_xlabel(\"Year\")\nax[0].set_title(\"Liquid Fuels + Natural Gas\", fontsize=14)\n\n# Plot of LPG\nsns.lineplot(x=\"Year_Month\", y=\"Mean_Price\", data=df[df.Product == \"LPG\"], hue=\"Product\", ax=ax[1], err_style=None)\nax[1].set_xlabel(\"Year\")\nax[1].set_title(\"LPG\", fontsize=14)\n\nplt.suptitle(\"Brazil: National Yearly Mean Price of Fuels\", fontsize=18)\nplt.tight_layout(pad=5)\nplt.show()","b6ac5a9e":"ecdf_category(\"Mean_Dist_Price\", \"Product\", title=\"ECDF Curves for Fuel Mean Distribution Price\", \n             xlabel=\"Mean Distribution Price\")","7b8a2f44":"# Create a boxplot out of two separate axes with different scales\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,6.5), gridspec_kw={\"width_ratios\":[5,1], \"wspace\":0})\n\n# Axis for Products with similar means\nsns.boxplot(x=\"Product\", y=\"Mean_Dist_Price\", data=df[df.Product!=\"LPG\"], order=[\"HYDROUS ETHANOL\", \"PETROL\", \n                                                              \"NATURAL GAS\", \"DIESEL\", \"DIESEL S10\"], \n            ax=ax[0])\n\n# Axis for LPG\nsns.boxplot(x=\"Product\", y=\"Mean_Dist_Price\", data=df[df.Product==\"LPG\"], ax=ax[1], color='g', width=4)\n\nplt.suptitle(\"Distributions of Mean Distribution Prices for Fuels in Brazil\", fontsize=18)\n\n# Format LPG plot\nax[1].yaxis.tick_right()\nax[1].yaxis.set_label_position(\"right\")\nax[0].set_xlabel('Product', fontsize=16)\nax[1].set_xlabel('LPG')\nax[0].set_ylabel('Price Group 1: Liquid Fuels & Natural Gas', fontsize=16)\nax[1].set_ylabel('Price Group 2: LPG', fontsize=16)\nax[1].set(xticklabels=[])\n\n\n# Add subplot for LPG\nplt.tight_layout(pad=5)","d0d4e927":"# Plot yearly Mean_Price\nfig, ax = plt.subplots(nrows=2, ncols=1, figsize=(12,9))\n\n# Plot of fuels not including LPG\nsns.lineplot(x=\"Year_Month\", y=\"Mean_Dist_Price\", data=df[df.Product!=\"LPG\"], hue=\"Product\", ax=ax[0], err_style=None)\nax[0].set_xlabel(\"Year\")\nax[0].set_title(\"Liquid Fuels + Natural Gas\", fontsize=14)\n\n# Plot of LPG\nsns.lineplot(x=\"Year_Month\", y=\"Mean_Dist_Price\", data=df[df.Product == \"LPG\"], hue=\"Product\", ax=ax[1], err_style=None)\nax[1].set_xlabel(\"Year\")\nax[1].set_title(\"LPG\", fontsize=14)\n\nplt.suptitle(\"Brazil: National Yearly Mean Distribution Price of Fuels\", fontsize=18)\nplt.tight_layout(pad=5)\nplt.show()","2c480947":"# URL to shape files of Brazil's states, made public courtesy of the Brazilian government\n\nurl = \"ftp:\/\/geoftp.ibge.gov.br\/organizacao_do_territorio\/malhas_territoriais\/malhas_municipais\/municipio_2016\/Brasil\/BR\/br_unidades_da_federacao.zip\"\n\n#url= '..\/data\/external\/br_unidades_da_federacao\/'\n\nbrazil_geo = gpd.read_file(url)\n\n# Correct state names to match current dataset\nstate_dict = {\"ROND\u00d4NIA\":\"RONDONIA\", \"PAR\u00c1\":\"PARA\", \"AMAP\u00c1\":\"AMAPA\", \"MARANH\u00c3O\":\"MARANHAO\",\n             \"PIAU\u00cd\":\"PIAUI\", \"CEAR\u00c1\":\"CEARA\", \"PARA\u00cdBA\":\"PARAIBA\", \"ESP\u00cdRITO SANTO\":\"ESPIRITO SANTO\",\n             \"S\u00c3O PAULO\":\"SAO PAULO\", \"PARAN\u00c1\":\"PARANA\", \"GOI\u00c1S\":\"GOIAS\", \"ACRE\":\"ACRE\",\n             \"AMAZONAS\":\"AMAZONAS\", \"RORAIMA\":\"RORAIMA\", \"TOCANTINS\":\"TOCANTINS\", \n             \"RIO GRANDE DO NORTE\":\"RIO GRANDE DO NORTE\", \"PERNAMBUCO\":\"PERNAMBUCO\", \n             \"ALAGOAS\":\"ALAGOAS\", \"SERGIPE\":\"SERGIPE\", \"BAHIA\":\"BAHIA\", \"MINAS GERAIS\":\"MINAS GERAIS\",\n             \"RIO DE JANEIRO\":\"RIO DE JANEIRO\", \"SANTA CATARINA\":\"SANTA CATARINA\", \"MATO GROSSO DO SUL\":\"MATO GROSSO DO SUL\", \n             \"MATO GROSSO\":\"MATO GROSSO\", \"DISTRITO FEDERAL\":\"DISTRITO FEDERAL\", \"RIO GRANDE DO SUL\":\"RIO GRANDE DO SUL\"}\n\nbrazil_geo[\"NM_ESTADO\"] = brazil_geo.NM_ESTADO.map(state_dict)\n\nbrazil_geo.crs = {\"init\": \"epsg:4326\"}\n\nbrazil_geo.columns = ['State', 'Macroregion', 'CD_GEOCUF', 'geometry']\n\nbrazil_geo[\"Macroregion\"] = brazil_geo.Macroregion.str.replace(\"-\", \" \")\n\n# Extract regions geography\nbrazil_geo_region = brazil_geo.dissolve(by='Macroregion').reset_index()\nbrazil_geo_region = brazil_geo_region[['Macroregion', 'geometry']]","21590d2b":"# Create dataframe df_pct_change with percent change of prices\n\nmacroregions = df.Macroregion.unique().tolist()\n\ndf_pct_change = pd.DataFrame()\n\ncount = 0\n\nfor i in range(len(macroregions)):\n    region = macroregions[i]\n    states = df[df.Macroregion==region][\"State\"].unique()\n    \n    for i in range(len(states)):\n        state = states[i]\n        products = df[(df.Macroregion==region) & (df.State==state)][\"Product\"].unique()\n       \n        for i in range(len(products)):\n            product = products[i]\n            years = df[(df.Macroregion==region) & (df.State==state) & (df.Product==product)][\"Year\"].unique()\n            \n            mean_price = df[(df.Macroregion==region) & (df.State==state) & \n                            (df.Product==product)][\"Mean_Price\"].mean()\n            \n            # Percent change for raw data\n            first_price = df[(df.Macroregion==region) & (df.State==state) & \n                            (df.Product==product) & (df.Year==years[0])][\"Mean_Price\"].iloc[0]\n            last_price = df[(df.Macroregion==region) & (df.State==state) & \n                            (df.Product==product) & (df.Year==years[-1])][\"Mean_Price\"].iloc[-1]\n            price_pct_change = (last_price - first_price) \/ np.abs(first_price)\n        \n        \n            # Percent change for Normalized data\n            first_price_norm = df[(df.Macroregion==region) & (df.State==state) & \n                            (df.Product==product) & (df.Year==years[0])][\"Mean_Price_Norm\"].iloc[0]\n            last_price_norm = df[(df.Macroregion==region) & (df.State==state) & \n                            (df.Product==product) & (df.Year==years[-1])][\"Mean_Price_Norm\"].iloc[-1]\n            price_pct_change_norm = (last_price_norm - first_price_norm) \/ np.abs(first_price_norm)            \n            \n            # Add to dataframe\n            df_temp = pd.DataFrame({\"Macroregion\":region, \"State\":state, \n                                    \"Product\":product, \n                                    \"First_Year\":years[0], \"Last_Year\":years[-1], \"Fuel_Mean_Price\":mean_price,\n                                    \"First_Price\":first_price, \"Last_Price\":last_price, \"Price_Pct_Change\":price_pct_change, \n                                    \"First_Price_Norm\":first_price_norm, \"Last_Price_Norm\":last_price_norm, \n                                    \"Price_Pct_Change_Norm\":price_pct_change_norm\n                                   }, \n                                   index=[count])\n            \n            df_pct_change = df_pct_change.append(df_temp)\n            \n            count += 1","c9e77c40":"# Group by percentage change by macroregion\ndf_pct_change_region = df_pct_change.groupby(['Macroregion', 'Product']).mean().reset_index()\n\n# Merge new datasets with spatial data\nbrazil_geo = brazil_geo.drop('Macroregion', axis=1).merge(df_pct_change, on='State')\nbrazil_geo_region = brazil_geo_region.merge(df_pct_change_region, on='Macroregion')\n\n# Correct datatypes\nfor col in ['First_Year', 'Last_Year']:\n    brazil_geo_region[col] = brazil_geo_region[col].astype(int)\n\n# Save geographical data to disk\n#brazil_geo.to_csv('..\/data\/interim\/brazil_geo.csv')\n#brazil_geo_region.to_csv('..\/data\/interim\/brazil_geo_region.csv')","b6e6d3f4":"# Create plot with raw price data\nnrows = 2\nncols = 3\nproducts = df.Product.unique().tolist()\n\nfig_raw, ax_raw = plt.subplots(figsize=(20,10), nrows=nrows, ncols=ncols)\n\nn = 0\n\nfor row in range(nrows):\n   \n    for col in range(ncols):\n        \n        divider = make_axes_locatable(ax_raw[row,col])\n        cax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n        brazil_geo_region[brazil_geo_region.Product==products[n]].plot(column=\"Price_Pct_Change\", \n                                                                       legend=True, ax=ax_raw[row,col], cmap=\"Reds\", \n                                                                       cax=cax, edgecolor='black')\n        \n        # Plot titles\n        year_range = brazil_geo_region[brazil_geo_region.Product==products[n]][[\"First_Year\", \"Last_Year\"]]\n        year_range = [year_range[\"First_Year\"].min(), year_range[\"Last_Year\"].max()]\n        year_range = str(year_range[0]) + \"-\" + str(year_range[1])\n        \n        ax_raw[row,col].set_title(products[n] + \": \" + year_range)\n        ax_raw[row,col].set_xlabel(\"Longitude\")\n        ax_raw[row,col].set_ylabel(\"Latitude\")\n        n += 1\n\nfig_raw.suptitle(\"Brazil: Percentage Price Change by Product by Region\", fontsize=20)\nplt.tight_layout(pad=5)\nplt.show()","02a607c9":"# Create plot with raw price data\nnrows = 2\nncols = 3\nproducts = df.Product.unique().tolist()\n\nfig_raw, ax_raw = plt.subplots(figsize=(20,12), nrows=nrows, ncols=ncols)\n\nn = 0\n\nfor row in range(nrows):\n   \n    for col in range(ncols):\n        \n        divider = make_axes_locatable(ax_raw[row,col])\n        cax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n        brazil_geo[brazil_geo.Product==products[n]].plot(column=\"Price_Pct_Change\", \n                                                                       legend=True, ax=ax_raw[row,col], cmap=\"Reds\", \n                                                                       cax=cax, edgecolor='black')\n        \n        # Plot titles\n        year_range = brazil_geo[brazil_geo.Product==products[n]][[\"First_Year\", \"Last_Year\"]]\n        year_range = [year_range[\"First_Year\"].min(), year_range[\"Last_Year\"].max()]\n        year_range = str(year_range[0]) + \"-\" + str(year_range[1])\n        \n        ax_raw[row,col].set_title(products[n] + \": \" + year_range, fontsize=20)\n        ax_raw[row,col].set_xlabel(\"Longitude\", fontsize=18)\n        ax_raw[row,col].set_ylabel(\"Latitude\", fontsize=18)\n        n += 1\n\nfig_raw.suptitle(\"Brazil: Percentage Price Change by State\", fontsize=28)\nplt.tight_layout(pad=5)\nplt.show()","4eee71c8":"# Group by State and Product\nbrazil_fuel_state = brazil_geo.groupby([\"State\", \"Product\"])[\"Fuel_Mean_Price\"].mean().reset_index()\n\n# Rejoin with spatial data\nbrazil_fuel_state_geo = brazil_geo.merge(brazil_fuel_state.drop(['Product','Fuel_Mean_Price'], axis=1) , on=\"State\")","e6799e3d":"# Define row and column quantity\nnrows = 2\nncols = 3\nproducts = df.Product.unique()\n\nfig, ax = plt.subplots(figsize=(20,12), nrows=nrows, ncols=ncols)\n\n# set counter\nn = 0\n\n# Iterate through figure axes\nfor row in range(nrows): # iterate through rows\n   \n    for col in range(ncols): # iterate through each column while on one row\n        \n        # Adjust location and size of legend\n        divider = make_axes_locatable(ax[row,col]) \n        cax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n        \n        # Plot choropleth\n        brazil_fuel_state_geo[brazil_fuel_state_geo.Product==products[n]].plot(column=\"Fuel_Mean_Price\", \n                                                                       cmap=\"coolwarm\", \n                                                                       legend=True, ax=ax[row,col], \n                                                                       cax=cax, edgecolor='black')\n        \n        # Set title and labels\n        ax[row,col].set_title(products[n], fontsize=20)\n        ax[row,col].set_xlabel(\"Longitude\", fontsize=18)\n        ax[row,col].set_ylabel(\"Latitude\", fontsize=18)\n        \n        n += 1\n\nfig.suptitle(\"Brazil: Mean Price of Fuels by State\", fontsize=28)\nplt.tight_layout(pad=5)\nplt.show()","b7291193":"states = brazil_fuel_state.State.unique().tolist()\n\n# Create dataframe of cheapest fuels by state\ncheapest_fuels = pd.DataFrame()\n\n# Iterate through group-by objects and extract minimum: extreme_of_group(data, column, extreme)\nfor i in range(len(states)):\n\n    state_group = brazil_fuel_state_geo.groupby(\"State\").get_group(states[i])\n    state_group = state_group[state_group.Fuel_Mean_Price == state_group.Fuel_Mean_Price.min()]\n    cheapest_fuels = cheapest_fuels.append(state_group)\n    cheapest_fuels.rename({\"Fuel_Mean_Price\":\"Fuel_Min_Price\"}, inplace=True)\n    \n# Create dataframe of cheapest fuels by state\nexpensive_fuels = pd.DataFrame()\n\n# Remove LPG from list of products\nbrazil_fuel_state_geo_noLPG = brazil_fuel_state_geo[brazil_fuel_state_geo.Product!=\"LPG\"]\n\n# Iterate through group-by objects and extract minimum: extreme_of_group(data, column, extreme)\nfor i in range(len(states)):\n\n    state_group = brazil_fuel_state_geo_noLPG.groupby(\"State\").get_group(states[i])\n    state_group = state_group[state_group.Fuel_Mean_Price == state_group.Fuel_Mean_Price.max()]\n    expensive_fuels = expensive_fuels.append(state_group)\n    expensive_fuels.rename({\"Fuel_Mean_Price\":\"Fuel_Max_Price\"}, inplace=True)","81bd182d":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(20,10))\n\n# Choropleths of cheapest and most expensive fuels\nexpensive_fuels.plot(column=\"Product\", cmap=\"Pastel2\", legend=True, ax=ax[1], edgecolor='black')\ncheapest_fuels.plot(column=\"Product\", cmap=\"Pastel2\", legend=True, ax=ax[0], edgecolor='black')\n\n# Format figure and axes\nax[0].set_title(\"Least Expensive Fuels\", fontsize=20)\nax[1].set_title(\"Most Expensive Fuels (Excluding LPG)\", fontsize=20)\nax[0].set_ylabel(\"Latitude\", fontsize=18)\nax[0].set_xlabel(\"Longitude\", fontsize=18)\nax[1].set_ylabel(\"Latitude\", fontsize=18)\nax[1].set_xlabel(\"Longitude\", fontsize=18)\n\nplt.suptitle(\"Brazil: Fuel Comparison by State\", fontsize=28)\nplt.tight_layout(pad=3)\nplt.show()","c9ef1f7d":"## Save clean data to file","01b45660":"## Feature by Feature Analysis","3b674856":"The questions posed by this analysis can be answered with *Mean_Price*. The other numeric variables can be excluded with the exception of *Mean_Dist_Price* because of some interesting behavior we will look at. The columns included in this analysis will be:\n* Analysis_Date\n* Macroregion\n* State\n* Product\n* No_of_Gas_Stations_Analyzed\n* Measurement_unit\n* Mean_Price\n* Mean_Dist_Price\n* Month\n* Year\n* Price_Group","da379a19":"#### *Mean_Price*\n\nThe average price paid by the customer at the pump. This is the main metric we are looking at in the analysis.","009f9ab6":"## *2. Within a region, which states increased their prices the most?*","27b7a311":"### *Product*","a8226f24":"Double check that the values were correctly normalized:","69ed8741":"#### *Macroregion*","94c01deb":"The above ECDF plot tells us that the *Mean_Price* variable contains more than one distribution. The question is, what accounts for this? The answer is that each *Product* category has its own distribution, although several of them are in a similar price range.","389563ec":"#### *Analysis_Date*\n\nThis columns is a time unit going by week.","759d0c5b":"# Conclusion\n\nThis concludes the geospatial analysis. A thorough report on the topic would also include more quantitative analysis in addition to the graphs but for this purpose the visualizations are adequate.","736be217":"Create a new dataframe to show percent change during the period data was collected:","400ec45a":"### count_plot( )","3f71ce1a":"### Categorical Variables\n\nCategorical variables should not be confused with the category datatype. The categorical variables are:\n* Macroregion\n* State\n* Product\n* Measurement_unit\n* Price_Group","a2309778":"## Feature Enginering\n\nNew columns created:\n* Price_Group - separating LPG from the other fuels for easier visualization\n* Mean_Price_Norm - Normalized Mean_Price by fuel Product\n* Year_Month - for time series plots","8e3ffd3a":"## Geographic Data","2b4a7e34":"### Comparison of Mean Price of Fuels by State","ef674ddf":"The choropleth provides an easy idea to how prices have changed for different fuel products in Brazil. ","8a33b150":"## Percent Change in Price Data","9632fa41":"## Merging Percentage Change Price with Geographic Data","66e5f01d":"#### *No_of_Gas_Stations_Analyzed*","6eabf203":"For which years do observations exist for each fuel type?","5f8e16e5":"### ecdf_category( ) - Plot multiple ECDFs by column category","6b3a7961":"### Numeric Variables\n\nThe numeric variables are:\n* Analysis_Date\n* No_of_Gas_Stations_Analyzed\n* Mean_Price\n* Mean_Dist_Price\n* Month\n* Year","c8ddcd07":"*Mean_Price* ECDF plots:","a172dcd1":"Notice that S10 DIESEL observations begin in 2012 while the others begin in 2004. ","8981331e":"## Helper Functions","04d93248":"*Mean_Dist_Price* Time Series plots:","8b39e6f1":"#### *Measurement_unit*\n\nLiquid fuels are measured in liters, LPG by 13kg cylinder, and Natural Gas by cubic meter.","de82577d":"### ecdf( ) - Plot empirical distribution function (ECDF)","0822a0b8":"## Fix column labels\n\nA glance at the raw data shows that:\n* Columns are in Portuguese and will be translated into English for convenience\n* Column names will be cleaned and standardized\n* Dates will be converted to Datetime objects\n* Unecessary columns will be removed","e61639a6":"# Clean Data","c701c5d3":"## *1. How did the price change for the different regions of Brazil?*\n\nTo investigate the question of how price changed by region we will create a choropleth map varying by the percentage change in price for each fuel for the entire time data is available.","7c92da33":"### *State*\n\nStates are found within macroregions. The dataset has observations more or less evenly distributed across the *State* column, not the *Macroregion* column.","4bc59a5a":"## *3. Which states are the cheapest (or most expensive) for different types of fuels?*","59f38601":"#### *Price_Group*\n\nPrice Group 1 contains ethanol, petrol, diesel and gas, while Price Group 2 contains only LPG","4dcbb3e7":"# Import Data","5ca9069b":"## Drop unecessary columns","1609d336":"# Questions\n\n* How did the price change for the different regions of Brazil?\n* Within a region, which states increased their prices the most?\n* Which states are the cheapest (or most expensive) for different types of fuels?\n\nTo answer these questions we will 1) include geographical shape files of Brazil's states and 2) create a new dataframe containing the percent change in prices.","21705187":"Note the horizontal and vertical lines, what do these mean? It is possible there were price controls in effect for some fuels.","c89a4a19":"## Fix Values, Datatypes, and NULLs\n\nCleaning the dataset requires a specific strategy: \n* Correct inappropriate characters\n* Address NULL values\n* Convert datatypes\n\nFor this particular dataset:\n* Fix inappropriate string characters in several columns that should be numeric\n* Translate categories in the *Product* column\n* Rename *Measurement_unit* categories\n* Convert object types to category type","237ed3d0":"What is the proportion of fuel products observed in the dataset in each region?","be1791e4":"#### *Mean_Dist_Price*\n\nThe average wholesale price paid by supplier. While not being used in the analysis, it's included because of some interesting behavior it has:","9f71b0c3":"*Mean_Price* Time Series plots:","996b1724":"# Exploratory Data Analysis"}}