{"cell_type":{"891a5b12":"code","aa75cbc2":"code","a3c31623":"code","9fbc64f5":"code","491ccf6d":"code","97b2b857":"code","5d564003":"code","ccdabe1a":"markdown","90a920de":"markdown","110fc016":"markdown","e274eb6d":"markdown"},"source":{"891a5b12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","aa75cbc2":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense","a3c31623":"# Our data is located in three folders:\n# train= contains the training data\/images for teaching our model.\n\n# val=    contains images which we will use to validate our model. The purpose of this data set is to prevent our model from Overfitting.\n#         Overfitting is when your model gets a little too comfortable with the training data and can't handle data it hasn't see....too well.\n\n# test = this contains the data that we use to test the model once it has learned the relationships between the images and their label (Pneumonia\/Not-Pneumonia)","9fbc64f5":"# Initializing the CNN\n\nclassifier = Sequential()\n\n## Step 1 - Convolution\nclassifier.add(Conv2D(32,(3,3),input_shape=(64,64,3),activation='relu'))\n\n## Step 1 - Pooling\nclassifier.add(MaxPooling2D(pool_size=(2,2)))\n\n## Adding a second Convolution layer\nclassifier.add(Conv2D(32,(3,3),activation='relu'))\n\nclassifier.add(MaxPooling2D(pool_size=(2,2)))\n\n# Flattening\nclassifier.add(Flatten())\n\n# Full connection\n#classifier.add(Dense(units=512,activation='relu'))\n#classifier.add(Dense(units=256,activation='relu'))\nclassifier.add(Dense(units=128,activation='relu'))\n\n## Adding a loss layer\nclassifier.add(Dense(units=1,activation='sigmoid'))\n#binary output ..Pneumonia or Normal\n\n# Compiling the CNN\nclassifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n\n\n# Now, we are going to fit the model to our training dataset and we will keep out testing dataset separate \n\n# Fitting the CNN to the images\nfrom keras.preprocessing.image import ImageDataGenerator\n\ntrain_model=ImageDataGenerator(rescale=1.\/255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)\n\ntest_model=ImageDataGenerator(rescale=1.\/255)\n\n\ntrain_set = train_model.flow_from_directory('..\/input\/chest_xray\/chest_xray\/train',target_size=(64,64), batch_size=32, class_mode='binary')\n\nvalidation_generator = test_model.flow_from_directory('..\/input\/chest_xray\/chest_xray\/val', target_size=(64, 64), batch_size=32,\n                                                        class_mode='binary')\n\ntest_set = test_model.flow_from_directory('..\/input\/chest_xray\/chest_xray\/test',target_size=(64,64), batch_size=32, class_mode='binary')\n\n\nclassifier.summary()\n\n\nclassifier.fit_generator(train_set, steps_per_epoch=5216\/32, epochs=10, validation_data = validation_generator, validation_steps=624\/32)   \n\n","491ccf6d":"test_accu = classifier.evaluate_generator(test_set,steps=624)\n\nprint('The testing accuracy is :', test_accu[1]*100, '%')","97b2b857":"import numpy as np  # for linear algebra\nimport matplotlib.pyplot as plt # for plotting graphs\n\n#Accuracy\nplt.plot(classifier.history.history['acc'])\nplt.plot(classifier.history.history['val_acc'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Training_set', 'Validation_set'], loc='upper left')\nplt.show()\n\n# Loss \nplt.plot(classifier.history.history['val_loss'])\nplt.plot(classifier.history.history['loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Training set', 'Test set'], loc='upper left')\nplt.show()","5d564003":"#  Results\n\n# After training, a separate test set was used to evaluate the performance of the CNN classifier. \n# The test set is a little unbalanced as 63% of the test chest x ray images are pneumonia.\n# I also use this number as baseline accuracy. \n# The CNN classifier on Test_set achieved an accuracy of 89%, \n# which is substantially better than the baseline accuracy.\n\nprint('The testing accuracy is :', test_accu[1]*100, '%')\n\nfrom keras.preprocessing import image\ntest_image = image.load_img('..\/input\/chest_xray\/chest_xray\/test\/NORMAL\/IM-0001-0001.jpeg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = classifier.predict(test_image)\nprint(result)\ntrain_set.class_indices\nprint(train_set.class_indices)\nif result[0][0] == 0:\n    prediction = 'Normal'\n    print(\" The test image is\")\n    print(prediction)\nelse:\n    prediction = 'Pneumonia'\n    print(\" The test image is\")\n    print(prediction)\n","ccdabe1a":"# Building the CNN using keras to predict pneumonia","90a920de":"> ","110fc016":"### The Test set accuracy is 89% ...very impressive....our model is doing a great Job..","e274eb6d":"# The training set accuracy is 94% and Validation set accuracy is 87.5% ..Pretty Good...."}}