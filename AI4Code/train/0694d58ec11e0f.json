{"cell_type":{"1e3ddbb2":"code","e90de50a":"code","6991a617":"code","2da003c8":"code","b73e35d9":"code","43ce8be6":"code","2d51c0db":"code","7cc3551f":"code","b1791e4b":"code","cd592ca0":"code","e6031591":"code","406c4419":"code","71a2abdc":"code","04496573":"code","5335a728":"code","8fc8cc0b":"markdown","0be6b290":"markdown","40e73c2a":"markdown","3c434601":"markdown","17eb13fc":"markdown","63f31713":"markdown","05988c1a":"markdown","a1165ed6":"markdown"},"source":{"1e3ddbb2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","e90de50a":"df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf.head()","6991a617":"df.shape","2da003c8":"key_var = 'Id'\ntarget = 'SalePrice'\ncat_vars = df.select_dtypes(include='object').columns.to_list()\nnum_vars = [col for col in df.columns if col not in cat_vars + [target, key_var]]\nfeatures = cat_vars + num_vars\n\nX = df[features].copy()\ny = df[target].copy()","b73e35d9":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=42)","43ce8be6":"# !pip install feature-engine","2d51c0db":"from sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom feature_engine.missing_data_imputers import ArbitraryNumberImputer, CategoricalVariableImputer\nfrom feature_engine.categorical_encoders import OneHotCategoricalEncoder\n\nmodel = Pipeline(steps=[\n    ('numeric_imputer', ArbitraryNumberImputer(arbitrary_number=-999, variables=num_vars)),\n    ('categoric_imputer', CategoricalVariableImputer(fill_value='missing', variables=cat_vars, return_object=True)),\n    ('one_hot_encoder', OneHotCategoricalEncoder(variables=cat_vars)),\n    ('model', RandomForestRegressor(n_estimators=500, max_depth=5, random_state=42))\n])\n\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","7cc3551f":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig, ax = plt.subplots(figsize=(8, 6))\n\nsns.regplot(x=y_test, y=y_pred, ax=ax);\nax.set_title('Regression Plot', fontsize=20);\nax.set_xlabel('Sale Price', fontsize=15)\nax.set_ylabel('Predicted Price', fontsize=15);","b1791e4b":"from sklearn.metrics import mean_squared_error\n\nmse = mean_squared_error(y_test, y_pred)\nprint(f'MSE = {mse:.3f}')","cd592ca0":"from sklearn.metrics import mean_squared_error\n\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nprint(f'RMSE = {rmse:.3f}')","e6031591":"from sklearn.metrics import mean_squared_log_error\n\nrmsle = np.sqrt(mean_squared_log_error(y_test, y_pred))\nprint(f'RMSLE = {rmsle:.3f}')","406c4419":"from sklearn.metrics import mean_absolute_error\n\nmae = mean_absolute_error(y_test, y_pred)\nprint(f'MAE = {mae:.3f}')","71a2abdc":"from sklearn.metrics import median_absolute_error\n\nmedae = median_absolute_error(y_test, y_pred)\nprint(f'MedAE = {medae:.3f}')","04496573":"def mape(y_test, y_pred):\n    return np.mean(np.abs((y_test - y_pred) \/ y_test))\n\nprint(f'MAPE = {mape(y_test, y_pred):.3f}')","5335a728":"from sklearn.metrics import r2_score\n\nr2 = r2_score(y_test, y_pred)\nprint(f'R2 = {r2:.3f}')","8fc8cc0b":"# MSE - Mean Squared Error","0be6b290":"# M\u00e9tricas\n* MSE (Mean Squared Error)\n* RMSE (Root Mean Squared Error)\n* RMSLE (Root Mean Squared Logarithmic Error)\n* MAE (Mean Absolute Error)\n* MedAE (Median Absolute Percentage Error)\n* MAPE (Mean Absolute Percentage Error)\n* R2 (R-Squared)","40e73c2a":"# MAPE - Mean Absolute Percentual Error","3c434601":"# R2 - R-Squared","17eb13fc":"# MedAE - Median Absolute Error","63f31713":"# RMSLE - Root Mean Squared Logarithmic Error","05988c1a":"# RMSE - Root Mean Squared Error","a1165ed6":"# MAE - Mean Absolute Error"}}