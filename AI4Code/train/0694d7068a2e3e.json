{"cell_type":{"8593c186":"code","721dd09a":"code","f75b621d":"code","89862e87":"code","9db4fe01":"code","6bf7afdd":"code","997d3071":"code","a2e758b6":"code","db954b94":"code","22750731":"code","143ef899":"code","429996a5":"code","11981e95":"code","a64beef3":"code","9ac0d814":"code","30cc7acd":"code","20b3d828":"code","27eed979":"code","80f55c30":"code","004d84e8":"code","a936c592":"code","768280a4":"code","1e02cfa6":"code","53c9a554":"code","7c1ed1f4":"code","f7c1e643":"code","0ae14259":"code","d91752a2":"code","334681ae":"code","0eb4438b":"code","4e6b4913":"code","d387f7cc":"code","576f2c55":"code","e7d2e843":"code","a14d06e6":"code","9d42558d":"code","6f5dad74":"code","d2359b0e":"code","86eaf21d":"code","4e419087":"code","d462616a":"code","606ee477":"code","baea2e69":"code","c577e68c":"code","dbe54620":"code","1e6944b8":"code","bd54a51b":"code","c54706d5":"code","877b284a":"code","8b3b98b0":"code","3f284b72":"markdown","a4070c36":"markdown","5a389b11":"markdown","abe3ded9":"markdown","8f8d39d0":"markdown","5f342d45":"markdown","b5116429":"markdown","9388a1b8":"markdown","96be68ae":"markdown","43faf591":"markdown","4183f2e8":"markdown","7f1fdeb5":"markdown","2934aeb9":"markdown","47b7024a":"markdown","8357766d":"markdown","926c389b":"markdown","c57cc822":"markdown","821d7a00":"markdown","80396a08":"markdown","fc9c8db2":"markdown","65101e4d":"markdown","65c20c25":"markdown","04784ab0":"markdown","75ed2041":"markdown","6890a433":"markdown","ca68bcd8":"markdown","cda6fd4c":"markdown","4ddc5e60":"markdown","7aea45f0":"markdown","2c56db08":"markdown","df512c26":"markdown","43277555":"markdown","019200e0":"markdown","c12c523a":"markdown","79753262":"markdown","f7d30f56":"markdown","78638d93":"markdown","587eda23":"markdown","dcce9716":"markdown","efd2470b":"markdown","cf040c33":"markdown","2f7f6f6e":"markdown","038baa49":"markdown","f7679951":"markdown","d3202135":"markdown","9f5d17e3":"markdown","16cc8a44":"markdown","d3f5820c":"markdown","7b550469":"markdown","44d7ac18":"markdown","b02d1149":"markdown","99961b8b":"markdown","1a225e37":"markdown","3174ffeb":"markdown","29a74a1d":"markdown","41902fad":"markdown","4a6d86f8":"markdown"},"source":{"8593c186":"# Import Input from keras.layers\nfrom keras.layers import Input\n\n# Create an input layer of shape 1\ninput_tensor = Input(shape=(1,))","721dd09a":"# Load layers\nfrom keras.layers import Input, Dense\n\n# Input layer\ninput_tensor = Input(shape=(1,))\n\n# Dense layer\noutput_layer = Dense(1)\n\n# Connect the dense layer to the input_tensor\noutput_tensor = output_layer(input_tensor)","f75b621d":"# Load layers\nfrom keras.layers import Input, Dense\n\n# Input layer\ninput_tensor = Input(shape=(1,))\n\n# Create a dense layer and connect the dense layer to the input_tensor in one step\n# Note that we did this in 2 steps in the previous exercise, but are doing it in one step now\noutput_tensor = Dense(1)(input_tensor)","89862e87":"# Input\/dense\/output layers\nfrom keras.layers import Input, Dense\ninput_tensor = Input(shape=(1,))\noutput_tensor = Dense(1)(input_tensor)\n\n# Build the model\nfrom keras.models import Model\nmodel = Model(input_tensor, output_tensor)","9db4fe01":"# Compile the model\nmodel.compile(optimizer='adam', loss='mean_absolute_error')","6bf7afdd":"# Import the plotting function\nfrom keras.utils import plot_model\nimport matplotlib.pyplot as plt\n\n# Summarize the model\nmodel.summary()\n\n# # Plot the model\nplot_model(model, to_file='model.png')\n\n# # Display the image\ndata = plt.imread('model.png')\nplt.imshow(data)\nplt.show()","997d3071":"import pandas as pd\n\ngames_tourney_train = pd.read_csv('..\/input\/games-tourney\/games_tourney.csv')\ngames_tourney_train.head()","a2e758b6":"games_tourney_train.shape","db954b94":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(games_tourney_train['seed_diff'], games_tourney_train['score_diff'])","22750731":"# Now fit the model\nmodel.fit(X_train, y_train,\n          epochs=1,\n          batch_size=128,\n          validation_split=.10,\n          verbose=True)","143ef899":"# Evaluate the model on the test data\nmodel.evaluate(X_test, y_test)","429996a5":"games_season = pd.read_csv('..\/input\/games-season\/games_season.csv')\ngames_season.head()","11981e95":"# Imports\nfrom keras.layers import Embedding\nfrom numpy import unique\n\n# Count the unique number of teams\nn_teams = unique(games_season['team_1']).shape[0]\n\n# Create an embedding layer\nteam_lookup = Embedding(input_dim=n_teams,\n                        output_dim=1,\n                        input_length=1,\n                        name='Team-Strength')","a64beef3":"# Imports\nfrom keras.layers import Input, Embedding, Flatten\nfrom keras.models import Model\n\n# Create an input layer for the team ID\nteamid_in = Input(shape=(1,))\n\n# Lookup the input in the team strength embedding layer\nstrength_lookup = team_lookup(teamid_in)\n\n# Flatten the output\nstrength_lookup_flat = Flatten()(strength_lookup)\n\n# Combine the operations into a single, re-usable model\nteam_strength_model = Model(teamid_in, strength_lookup_flat, name='Team-Strength-Model')","9ac0d814":"# Load the input layer from keras.layers\nfrom keras.layers import Input\n\n# Input layer for team 1\nteam_in_1 = Input((1,), name='Team-1-In')\n\n# Separate input layer for team 2\nteam_in_2 = Input((1,), name='Team-2-In')","30cc7acd":"# Lookup team 1 in the team strength model\nteam_1_strength = team_strength_model(team_in_1)\n\n# Lookup team 2 in the team strength model\nteam_2_strength = team_strength_model(team_in_2)","20b3d828":"# Import the Subtract layer from keras\nfrom keras.layers import Subtract\n\n# Create a subtract layer using the inputs from the previous exercise\nscore_diff = Subtract()([team_1_strength, team_2_strength])","27eed979":"# Imports\nfrom keras.layers import Subtract\nfrom keras.models import Model\n\n# Subtraction layer from previous exercise\nscore_diff = Subtract()([team_1_strength, team_2_strength])\n\n# Create the model\nmodel = Model([team_in_1, team_in_2], score_diff)\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_absolute_error')","80f55c30":"model.summary()","004d84e8":"# Get the team_1 column from the regular season data\ninput_1 = games_season['team_1']\n\n# Get the team_2 column from the regular season data\ninput_2 = games_season['team_2']\n\n# Fit the model to input 1 and 2, using score diff as a target\nmodel.fit([input_1, input_2],\n          games_season['score_diff'],\n          epochs=1,\n          batch_size=2048,\n          validation_split=.1,\n          verbose=True)","a936c592":"games_tourney = pd.read_csv('..\/input\/games-tourney\/games_tourney.csv')\ngames_tourney.head()","768280a4":"# Get team_1 from the tournament data\ninput_1 = games_tourney['team_1']\n\n# Get team_2 from the tournament data\ninput_2 = games_tourney['team_2']\n\n# Evaluate the model using these inputs\nmodel.evaluate([input_1, input_2], games_tourney['score_diff'])","1e02cfa6":"from keras.layers.merge import Concatenate","53c9a554":"# Create an Input for each team\nteam_in_1 = Input(shape=(1,), name='Team-1-In')\nteam_in_2 = Input(shape=(1,), name='Team-2-In')\n\n# Create an input for home vs away\nhome_in = Input(shape=(1,), name='Home-In')\n\n# Lookup the team inputs in the team strength model\nteam_1_strength = team_strength_model(team_in_1)\nteam_2_strength = team_strength_model(team_in_2)\n\n# Combine the team strengths with the home input using a Concatenate layer, then add a Dense layer\nout = Concatenate()([team_1_strength, team_2_strength, home_in])\nout = Dense(1)(out)","7c1ed1f4":"# Import the model class\nfrom keras.models import Model\n\n# Make a Model\nmodel = Model([team_in_1, team_in_2, home_in], out)\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_absolute_error')","f7c1e643":"model.summary()","0ae14259":"# Fit the model to the games_season dataset\nmodel.fit([games_season['team_1'], games_season['team_2'], games_season['home']],\n          games_season['score_diff'],\n          epochs=1,\n          verbose=True,\n          validation_split=.1,\n          batch_size=2048)\n\n# Evaluate the model on the games_tourney dataset\nmodel.evaluate([games_tourney['team_1'], games_tourney['team_2'], games_tourney['home']], games_tourney['score_diff'])","d91752a2":"# Imports\nimport matplotlib.pyplot as plt\nfrom keras.utils import plot_model\n\n# Plot the model\nplot_model(model, to_file='model.png')\n\n# Display the image\ndata = plt.imread('model.png')\nplt.imshow(data)\nplt.show()","334681ae":"# Predict\ngames_tourney['pred'] = model.predict([games_tourney['team_1'],games_tourney['team_2'],games_tourney['home']])","0eb4438b":"games_tourney.head()","4e6b4913":"games_tourney.score_diff.unique()","d387f7cc":"# Create an input layer with 3 columns\ninput_tensor = Input((3,))\n\n# Pass it to a Dense layer with 1 unit\noutput_tensor = Dense(1)(input_tensor)\n\n# Create a model\nmodel = Model(input_tensor, output_tensor)\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_absolute_error')","576f2c55":"games_tourney_train = games_tourney.query('season < 2010')","e7d2e843":"games_tourney_train.shape","a14d06e6":"# Fit the model\nmodel.fit(games_tourney_train[['home', 'seed_diff', 'pred']],\n          games_tourney_train['score_diff'],\n          epochs=1,\n          verbose=True)","9d42558d":"games_tourney_test = games_tourney.query('season >= 2010')","6f5dad74":"games_tourney_test.shape","d2359b0e":"# Evaluate the model on the games_tourney_test dataset\nmodel.evaluate(games_tourney_test[['home', 'seed_diff', 'pred']], \n               games_tourney_test['score_diff'])","86eaf21d":"# Define the input\ninput_tensor = Input((2,))\n\n# Define the output\noutput_tensor = Dense(2)(input_tensor)\n\n# Create a model\nmodel = Model(input_tensor, output_tensor)\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_absolute_error')","4e419087":"games_tourney_train.shape","d462616a":"# Fit the model\nmodel.fit(games_tourney_train[['seed_diff', 'pred']],\n  \t\t  games_tourney_train[['score_1', 'score_2']],\n  \t\t  verbose=False,\n  \t\t  epochs=1000,\n  \t\t  batch_size=64)","606ee477":"import numpy as np","baea2e69":"np.mean(model.history.history['loss'])","c577e68c":"# Print the model's weights\nprint(model.get_weights())\n\n# Print the column means of the training data\nprint(games_tourney_train.mean())","dbe54620":"# Evaluate the model on the tournament test data\nmodel.evaluate(games_tourney_test[['seed_diff', 'pred']],games_tourney_test[['score_1', 'score_2']])","1e6944b8":"# Create an input layer with 2 columns\ninput_tensor = Input((2,))\n\n# Create the first output\noutput_tensor_1 = Dense(1, activation='linear', use_bias=False)(input_tensor)\n\n# Create the second output (use the first output as input here)\noutput_tensor_2 = Dense(1, activation='sigmoid', use_bias=False)(output_tensor_1)\n\n# Create a model with 2 outputs\nmodel = Model(input_tensor, [output_tensor_1, output_tensor_2])","bd54a51b":"# Import the Adam optimizer\nfrom keras.optimizers import Adam\n\n# Compile the model with 2 losses and the Adam optimzer with a higher learning rate\nmodel.compile(loss=['mean_absolute_error', 'binary_crossentropy'], optimizer=Adam(lr=0.01))\n\n# Fit the model to the tournament training data, with 2 inputs and 2 outputs\nmodel.fit(games_tourney_train[['seed_diff', 'pred']],\n          [games_tourney_train[['score_diff']], games_tourney_train[['won']]],\n          epochs=10,\n          verbose=True,\n          batch_size=16384)","c54706d5":"# Print the model weights\nprint(model.get_weights())\n\n# Print the training data means\nprint(games_tourney_train.mean())","877b284a":"# Import the sigmoid function from scipy\nfrom scipy.special import expit as sigmoid\n\n# Weight from the model\nweight = 0.14\n\n# Print the approximate win probability predicted close game\nprint(sigmoid(1 * weight))\n\n# Print the approximate win probability predicted blowout game\nprint(sigmoid(10 * weight))","8b3b98b0":"# Evaluate the model on new data\nmodel.evaluate(games_tourney_test[['seed_diff', 'pred']],\n               [games_tourney_test[['score_diff']], games_tourney_test[['won']]])","3f284b72":"### Evaluate the model on a test set","a4070c36":"### Make an input layer for home vs. away","5a389b11":"You know there is a well-documented home-team advantage in basketball, so you will add a new input to your model to capture this effect.\n\n","abe3ded9":"### Build a model","8f8d39d0":"The output layer allows your model to make predictions.","5f342d45":"So `sigmoid(1 * 0.14)` is `0.53`, which represents a pretty close game and `sigmoid(10 * 0.14)` is `0.80`, which represents a pretty likely win. In other words, if the model predicts a win of 1 point, it is less sure of the win than if it predicts 10 points. Who says neural networks are black boxes?","b5116429":"### Inspect the model (I)","9388a1b8":"### Define team model","96be68ae":"These two inputs will be used later for the shared layer.","43faf591":"### Output layer using shared layer","4183f2e8":"Now you have a model with 3 inputs!","7f1fdeb5":"## Two Input Networks Using Categorical Embeddings, Shared Layers, and Merge Layers","2934aeb9":"### Define team lookup","47b7024a":"### Compile and fit the model","8357766d":"### Compile a model","926c389b":"![](basketball_model_2.png)","c57cc822":"model plays a role as a regressor and a good classifier","821d7a00":"Now our model has learned a strength rating for every team.","80396a08":"### Create an input layer with multiple columns","fc9c8db2":"Now your model knows how strong each team is.","65101e4d":"### Simple two-output model","65c20c25":"## The Keras Functional API\n","04784ab0":"Now you can try building a model for the tournament data based on your regular season predictions","75ed2041":"### Evaluate the model","6890a433":"### Fit a model with two outputs","ca68bcd8":"### Lookup both inputs in the same model","cda6fd4c":"### Classification and regression in one model","4ddc5e60":"### Output layers","7aea45f0":"The embedding layer is a lot like a dictionary, but your model learns the values for each key.","2c56db08":"Keras will return 3 numbers: \n\nthe first number will be the sum of both the loss functions, \n\nthe next 2 numbers will be the loss functions you used when defining the model.","df512c26":"### Plotting models","43277555":"This network will take the input, apply a linear coefficient to it, and return the result.","019200e0":"### Fit the model","c12c523a":"### Evaluate on new data with two metrics","79753262":"Did you notice that both output weights are about ~53? This is because, on average, a team will score about 53 points in the tournament.","f7d30f56":"## Multiple Outputs","78638d93":"### Fit the model to the regular season training data","587eda23":"### Input layers","dcce9716":"The input layer will have 4 weights: 2 for each input times 2 for each output.\n\nThe output layer will have 2 weights, one for each output.","efd2470b":"### Inspect the model (II)","cf040c33":"This finalizes your model, freezes all its settings, and prepares it to meet some data!","2f7f6f6e":"### Dense layers","038baa49":"### Visualize a model","f7679951":"### Model using two inputs and one output","d3202135":" this model will predict the scores of both teams.","9f5d17e3":"### Evaluate the model on the tournament test data","16cc8a44":"## Multiple Inputs: 3 Inputs (and Beyond!)","d3f5820c":"### Evaluate the model","7b550469":"### Fit the model to the tournament basketball data","44d7ac18":"This setup subracts the team strength ratings to determine a winner.","b02d1149":"### Make a model and compile it","99961b8b":"### Defining two inputs","1a225e37":"# Advanced Deep Learning with Keras in Python","3174ffeb":"### Add the model predictions to the tournament data","29a74a1d":"### Evaluate the model","41902fad":"### Fit the model and evaluate","4a6d86f8":"\"multiple target regression\": one model making more than one prediction."}}