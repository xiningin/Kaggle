{"cell_type":{"d1511789":"code","5f372c29":"code","f4766631":"code","3dee8af8":"code","569d467a":"code","53033815":"code","7c6189e0":"code","7018eae9":"code","bc34a1a2":"code","b4c9d960":"code","f226ddcc":"code","73a1c78e":"markdown","a5e9e7aa":"markdown","90771508":"markdown","639f8865":"markdown","80e27410":"markdown","eb424c6b":"markdown","71d2cf3d":"markdown","831d6810":"markdown","bd2da9e4":"markdown","79976057":"markdown","6f32ea61":"markdown","9811d701":"markdown","319a6c52":"markdown"},"source":{"d1511789":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os # operating system\nimport re # regular expression operations\n\n# json library contains functions to handle\n# json-formatted files in python\nimport json\n\n# the pprint module prints Python data\n# structures in a \"pretty\" way\nfrom pprint import pprint\n\n# a deepcopy constructs a new compound\n# object (ie. list, dictionary) and then,\n# recursively, inserts copies into it of \n# the objects found in the original\nfrom copy import deepcopy\n\n# tqdm is a progress bar library\nfrom tqdm.notebook import tqdm","5f372c29":"# print the directories given X levels\ndef walklevel(some_dir, level=1):\n    some_dir = some_dir.rstrip(os.path.sep)\n    dir_list=[some_dir]\n    new_dir_list=[]\n    for i in range(0,level):\n        for d in dir_list:\n            parent_dir = d\n            child_dirs=[d + \"\/\"  + c for c in os.listdir(d)]\n            for child in child_dirs:\n                if os.path.isdir(child):\n                    new_dir_list.append(child)\n            \n        dir_list = new_dir_list\n        new_dir_list = []\n    return(dir_list)","f4766631":"def format_name(author):\n    middle_name = \" \".join(author['middle'])\n    \n    if author['middle']:\n        return \" \".join([author['first'], middle_name, author['last']])\n    else:\n        return \" \".join([author['first'], author['last']])\n\n\ndef format_affiliation(affiliation):\n    text = []\n    location = affiliation.get('location')\n    if location:\n        text.extend(list(affiliation['location'].values()))\n    \n    institution = affiliation.get('institution')\n    if institution:\n        text = [institution] + text\n    return \", \".join(text)\n\ndef format_authors(authors, with_affiliation=False):\n    name_ls = []\n    \n    for author in authors:\n        name = format_name(author)\n        if with_affiliation:\n            affiliation = format_affiliation(author['affiliation'])\n            if affiliation:\n                name_ls.append(f\"{name} ({affiliation})\")\n            else:\n                name_ls.append(name)\n        else:\n            name_ls.append(name)\n    \n    return \", \".join(name_ls)\n\ndef format_body(body_text):\n    texts = [(di['section'], di['text']) for di in body_text]\n    texts_di = {di['section']: \"\" for di in body_text}\n    \n    # merge all text for the same section\n    for section, text in texts:\n        texts_di[section] += text\n    \n    # put both section and text in the `body`\n    # we seperate both text and sections with\n    # \"\\n\\n\". You may need to account for this\n    # when processing the text\n    body = \"\"\n\n    for section, text in texts_di.items():\n        \n        # remove text citations like [18]\n        text_ptn = r'\\[[0-9]{1,2}\\]'\n        text = re.sub(text_ptn,\"\",text)\n        \n        # remove figure citations\n        fig_ptn = r'\\(Fig.*\\)'\n        text = re.sub(fig_ptn,\"\",text)\n        \n        body += section\n        body += \"\\n\\n\"\n        body += text\n        body += \"\\n\\n\"\n    \n    return body\n\ndef format_bib(bibs):\n    if type(bibs) == dict:\n        bibs = list(bibs.values())\n    bibs = deepcopy(bibs)\n    formatted = []\n    \n    for bib in bibs:\n        bib['authors'] = format_authors(\n            bib['authors'], \n            with_affiliation=False\n        )\n        formatted_ls = [str(bib[k]) for k in ['title', 'authors', 'venue', 'year']]\n        formatted.append(\", \".join(formatted_ls))\n\n    return \"; \".join(formatted)\n\ndef load_files(dirname):\n    filenames = os.listdir(dirname)\n    raw_files = []\n\n    for filename in tqdm(filenames):\n        filename = dirname + filename\n        file = json.load(open(filename, 'rb'))\n        raw_files.append(file)\n    \n    return raw_files\n\ndef generate_clean_df(all_files):\n    cleaned_files = []\n    \n    for file in tqdm(all_files):\n        features = [\n            file['paper_id'],\n            file['metadata']['title'],\n            format_authors(file['metadata']['authors']),\n            format_authors(file['metadata']['authors'], \n                           with_affiliation=True),\n            format_body(file['abstract']),\n            format_body(file['body_text']),\n            format_bib(file['bib_entries']),\n            file['metadata']['authors'],\n            file['bib_entries']\n        ]\n\n        cleaned_files.append(features)\n\n    col_names = ['paper_id', 'title', 'authors',\n                 'affiliations', 'abstract', 'text', \n                 'bibliography','raw_authors','raw_bibliography']\n\n    clean_df = pd.DataFrame(cleaned_files, columns=col_names)\n    clean_df.head()\n    \n    return clean_df","3dee8af8":"input_dir=\"\/kaggle\/input\/CORD-19-research-challenge\"\nmetadata = pd.read_csv(input_dir+\"\/metadata.csv\")\nmetadata.full_text_file.unique()","569d467a":"json_dirs = walklevel(input_dir,2) \nfor jd in json_dirs:\n    print(jd)","53033815":"filenames=[]\nfor jd in json_dirs:\n    pdir = os.path.basename(os.path.dirname(jd))\n    sub_filenames = os.listdir(jd + \"\/pdf_json\/\")\n    print(\"Number of articles retrieved from \"+\n          pdir+\": \"+str(len(sub_filenames)))\n    sub_file_paths = [jd + \"\/pdf_json\/\" + f for f in sub_filenames]\n    filenames.extend(sub_file_paths)","7c6189e0":"all_files = []\n\nfor filename in filenames:\n    file = json.load(open(filename, 'rb'))\n    all_files.append(file)","7018eae9":"fileIdx=10\nfor k in (all_files[fileIdx].keys()):\n    print(k+\":\")\n    pprint (all_files[fileIdx][k], depth=2)\n    print(\"\\n\\n\")","bc34a1a2":"cleaned_files = []\n\nfor file in tqdm(all_files):\n    features = [\n        file['paper_id'],\n        file['metadata']['title'],\n        format_authors(file['metadata']['authors']),\n        format_authors(file['metadata']['authors'], \n                       with_affiliation=True),\n        format_body(file['abstract']),\n        format_body(file['body_text']),\n        format_bib(file['bib_entries']),\n        file['metadata']['authors'],\n        file['bib_entries']\n    ]\n    \n    cleaned_files.append(features)","b4c9d960":"col_names = [\n    'paper_id', \n    'title', \n    'authors',\n    'affiliations', \n    'abstract', \n    'text', \n    'bibliography',\n    'raw_authors',\n    'raw_bibliography'\n]\n\nclean_df = pd.DataFrame(cleaned_files, columns=col_names)\nclean_df.head()","f226ddcc":"clean_df.to_csv('json_clean.csv', index=False)","73a1c78e":"Wow that is a lot!\n\nNow let's load each json file into a python nested dictionary object, called `file`, using the `json.load()` function. Then we can put each `file` in a list called `all_files`.","a5e9e7aa":"We use the functions the helper functions to build our new csv file","90771508":"# About this notebook\nThis notebook was inspired by the following notebook:\n* https:\/\/www.kaggle.com\/xhlulu\/cord-19-eda-parse-json-and-generate-clean-csv\n\nRunning machine learning models on texts in JSON format is a struggle so I want to convert the current JSON files into a clean csv format.\n\n","639f8865":"Let's look at the keys of the one of the journals in our list `all_files`","80e27410":"# Processing these Journals","eb424c6b":"Before we process these journals let's look to see how many we have","71d2cf3d":"We see that our dictionary contains:\n* the paper_id: a string to identify the paper\n* metadata: title and author information\n* the abstract: information about the abstract including text\n* the body text: text written in the journal\n * the `body_text` is a list where each item in the list is a dictionary representing a section of the text.\n * each section contains the following keys: `text`, `cite_spans` (citation information), `ref_spans` (figure\/table information), and `section` (which contains the header the section belongs to)\n* bib entries: citations\n* ref enteries: information about tables and figures\n* back matter: resources, funding, copyright, and additional information","831d6810":"# Helper Functions","bd2da9e4":"The first helper function will help us better understand the directory structure of the input files.","79976057":"The papers are located in 5 different directories but can all be found in pdf_json format.","6f32ea61":"The following helper functions were defined in [a previous notebook](https:\/\/www.kaggle.com\/xhlulu\/cord-19-eda-parse-json-and-generate-clean-csv). They use dictionary objects that originated from the json files. The functions are:\n* format_name(author)\n* format_affiliation(affiliation)\n* format_authors(authors, with_affiliation=False)\n* format_body(body_text)\n* format_bib(bibs)\n* load_files(dirname)\n* generate_clean_df(all_files)","9811d701":"## Libraries","319a6c52":"# Input files\nInput data files are available in the \"\/kaggle\/input\/CORD-19-research-challenge\" directory."}}