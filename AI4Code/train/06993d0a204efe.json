{"cell_type":{"df63c45a":"code","6478f50a":"code","f28bf5ab":"code","95195973":"code","69685d19":"code","cf7e1fc7":"code","146d9add":"code","dc25825d":"code","3660cef9":"code","d09612fe":"code","eb518470":"code","7cd6e207":"code","940267e8":"code","7d7bf835":"code","b1546b03":"code","57b970a1":"code","1aee54af":"code","0c8e572a":"code","899f6951":"code","cdc2ce67":"code","4c015f34":"code","612cde20":"code","051dda52":"code","d6b820fc":"code","06c9f2d5":"code","c2801faa":"code","36185b03":"code","a5f57b78":"code","c5383caf":"code","10b8f408":"code","0ed7bb07":"code","43c5e051":"code","78032218":"code","b966d00b":"code","841c44a7":"code","b04fe7f7":"code","1b02581b":"code","b8578baa":"code","3f10bb7b":"code","3b25f77a":"code","34ed2d1e":"markdown","92163028":"markdown","a62b7acd":"markdown","88c59356":"markdown","1496d77d":"markdown","359c6a34":"markdown","b80e68dc":"markdown","8b425d83":"markdown","f32af968":"markdown","16c35b4a":"markdown","be21ea41":"markdown","2bd2a394":"markdown","6707b518":"markdown","17f102a9":"markdown","22aca588":"markdown","c7c0d571":"markdown","d129c4a7":"markdown","451fdbb2":"markdown","84c5e117":"markdown","db350251":"markdown","f9f01d66":"markdown","bd4687dd":"markdown","fdba72aa":"markdown","a4c24a06":"markdown","36e9a739":"markdown","332149d8":"markdown"},"source":{"df63c45a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6478f50a":"df = pd.read_csv(\"..\/input\/used-cars-price-prediction\/train-data.csv\")","f28bf5ab":"df.head()","95195973":"df = df.drop('Unnamed: 0', axis =1)","69685d19":"df.info()","cf7e1fc7":"df.select_dtypes(include = ['object'])","146d9add":"df.isnull().sum()","dc25825d":"columns =  ['Mileage', 'Engine', 'Power', 'New_Price']\nfor column in columns:\n    print(f\"Number of unique units in the column '{column}':\",list(df[column].dropna().apply(lambda x: x.split()[-1]).unique()))","3660cef9":"def process_mileage(x):\n    \"\"\"\n    Function to process an entry in 'Mileage' column\n    Reference: https:\/\/www.kaggle.com\/rushikeshhiray\/converting-km-kg-to-kmpl\/comments\n    \"\"\"\n    if type(x) == str:\n        if x.split()[-1] == 'km\/kg':\n            return float(x.split()[0])*1.40\n        elif x.split()[-1] == 'kmpl':\n            return float(x.split()[0])\n    else:\n        return x\n    \ndef process_engine(x):\n    \"\"\"\n    Function to process an entry in 'Engine' column\n    \"\"\"\n    if type(x) == str:\n        return float(x.split()[0])\n    else:\n        return x\n\ndef process_power(x):\n    \"\"\"\n    Function to process an entry in 'Power' column\n    \"\"\"\n    if type(x) == str:\n        if float(x.split()[0] == 'null'):\n            return np.nan\n        return float(x.split()[0])\n    else:\n        return x\n    \ndef process_new_price(x):\n    \"\"\"\n    Function to process an entry in 'New_Price' column\n    \"\"\"\n    if type(x) == str:\n        if x.split()[-1] == 'Cr':\n            return float(x.split()[0])*100\n        return float(x.split()[0])\n    else:\n        return x","d09612fe":"df['Mileage'] = df['Mileage'].apply(process_mileage)\ndf['Engine'] = df['Engine'].apply(process_engine)\ndf['Power'] = df['Power'].apply(process_power)\ndf['New_Price'] = df['New_Price'].apply(process_new_price)","eb518470":"df.select_dtypes(exclude = ['object']).head()","7cd6e207":"import seaborn as sns\nimport matplotlib.pyplot as plt","940267e8":"import plotly.express as px","7d7bf835":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go","b1546b03":"data = df.copy()","57b970a1":"num_columns = data.select_dtypes(exclude = 'object').columns\nprint('Numerical Columns:',list(num_columns))\nfor column in num_columns:\n    data[column] = data[column].fillna(data[column].median())","1aee54af":"numeric_columns = list(num_columns)\nnumeric_columns.remove('Year')\nnumeric_columns.remove('Price')\nfig = make_subplots(rows=2, cols=3, shared_yaxes=True)\nindex = 0\nfor row in range(1,3):\n    for col in range(1,4):\n        fig.add_trace(go.Box(x=data[numeric_columns[index]], name = numeric_columns[index]),\n                      row = row,\n                      col = col,\n)\n        index = index + 1\nfig.update_layout(height=600, width=1300,\n                  title_text=\"Box-Plots of Numerical Variables\")\n\nfig.show()","0c8e572a":"print(f\"Percentage of values greater than or equal to 3000 in Engine              : {round(len(data[data['Engine'] >=3000]['Engine'])\/len(data)*100, 2)}%\")\nprint(f\"Percentage of values greater than or equal to 250 in Power                : {round(len(data[data['Power'] >=250]['Power'])\/len(data)*100,2)}%\")\nprint(f\"Percentage of values greater than or equal to 30 in Mileage               : {round(len(data[data['Mileage'] >=30]['Mileage'])\/len(data)*100,2)}%\")\nprint(f\"Percentage of values greater than or equal to 130000 in Kilometers_Driven : {round(len(data[data['Kilometers_Driven'] >=130000]['Kilometers_Driven'])\/len(data)*100,2)}%\")","899f6951":"from scipy.stats.mstats import winsorize","cdc2ce67":"winz_columns = ['Power', 'Engine', 'Mileage', 'Kilometers_Driven']\n\nfor col in winz_columns:\n    data[col] = winsorize(data[col].values, limits = [0.03, 0.03]).data","4c015f34":"numeric_columns = list(num_columns)\nnumeric_columns.remove('Year')\nnumeric_columns.remove('Price')\nfig = make_subplots(rows=2, cols=3, shared_yaxes=True)\nindex = 0\nfor row in range(1,3):\n    for col in range(1,4):\n        fig.add_trace(go.Box(x=data[numeric_columns[index]], name = numeric_columns[index]),\n                      row = row,\n                      col = col,\n)\n        index = index + 1\nfig.update_layout(height=600, width=1300,\n                  title_text=\"Box-Plots of Numerical Variables\")\n\nfig.show()","612cde20":"data['Brand_Name'] = data['Name'].apply(lambda x: x.split()[0])\ndata['Brand_Name'].value_counts()","051dda52":"data['Brand_Name'] = data['Brand_Name'].apply(lambda x: 'Isuzu' if x == 'ISUZU' else x)\ndata['Brand_Name'].value_counts()","d6b820fc":"data['Model_Type'] = data['Name'].apply(lambda x: \" \".join(x.split()[:2]))\ndata['Model_Type'].value_counts()","06c9f2d5":"def extract_region(x):\n    if x == 'Mumbai' or x == 'Pune' or x == 'Ahmedabad':\n        return 'West'\n    elif x == 'Bangalore' or x == 'Chennai' or x == 'Coimbatore' or x == 'Hyderabad' or x == 'Kochi':\n        return 'South'\n    elif x == 'Delhi' or x == 'Jaipur':\n        return 'North'\n    elif x == 'Kolkata':\n        return 'East'","c2801faa":"data['Region'] = data['Location'].apply(extract_region)\ndata['Region'].value_counts()","36185b03":"#Before Imputation\ndf_mean = df['New_Price'].mean() \ndf_std = df['New_Price'].std()","a5f57b78":"#After Imputation\ndata_mean = data['New_Price'].mean() \ndata_std = data['New_Price'].std()","c5383caf":"print(\"Mean of New_Price column without imputation:\", df_mean)\nprint(\"Mean of New_Price column with imputation:\", data_mean)\nprint()\nprint(\"Standard Deviation of New_Price column without imputation:\", df_std)\nprint(\"Standard Deviation of New_Price column with imputation:\", data_std)","10b8f408":"numeric_columns = list(num_columns)\nnumeric_columns.remove('Year')\nnumeric_columns.remove('Price')\nindex = 0\nfig, axes = plt.subplots(2, 3, figsize=(20,12))\nfor row in range(2):\n    for col in range(3):\n        sns.scatterplot(data=data.select_dtypes(exclude = 'object'), \n                    x=numeric_columns[index], \n                    y='Price', \n                    ax=axes[row,col],\n                    hue = 'Price',\n                    palette = sns.color_palette(\"flare\", as_cmap=True))\n        axes[row,col].set_xlabel(f\"{numeric_columns[index].title()}\\n\\n{data.describe()[numeric_columns[index]]}\")\n        axes[row,col].set_ylabel(\"Price (INR Lakhs)\")\n        index = index + 1\nplt.subplots_adjust(wspace=0.25, hspace=0.8)","0ed7bb07":"temp = data.groupby(['Year']).mean()\ntemp['Year'] = temp.index\nfig = px.bar(temp,x='Year',y='Price', \n             color = 'Price', \n             title = \"Price v\/s Year\",\n             labels = {'Price': 'Price (INR Lakhs)'},\n             color_continuous_scale = 'Magma_r')\nfig.show()","43c5e051":"temp = data.groupby(['Location']).mean()\ntemp['Location'] = temp.index\nfig = px.bar(temp,x='Location',y='Price', \n             color = 'Price', \n             title = \"Price v\/s Location\", \n             labels = {'Price': 'Price (INR Lakhs)'},\n             color_continuous_scale = 'Magma_r')\nfig.show()","78032218":"temp = data.groupby(['Fuel_Type']).mean()\ntemp['Fuel_Type'] = temp.index\nfig = px.bar(temp,x='Fuel_Type',y='Price', \n             color = 'Price', \n             title = \"Price v\/s Fuel_Type\", \n             labels = {'Price': 'Price (INR Lakhs)'},\n             color_continuous_scale = 'Magma_r')\nfig.show()","b966d00b":"temp = data.groupby(['Transmission']).mean()\ntemp['Transmission'] = temp.index\nfig = px.bar(temp,x='Transmission',y='Price', \n             color = 'Price', \n             title = \"Price v\/s Transmission\", \n             labels = {'Price': 'Price (INR Lakhs)'},\n             color_continuous_scale = 'Magma_r')\nfig.show()","841c44a7":"temp = data.groupby(['Owner_Type']).mean()\ntemp['Owner_Type'] = temp.index\nfig = px.bar(temp,x='Owner_Type',y='Price', \n             color = 'Price', \n             title = \"Price v\/s Owner_Type\", \n             labels = {'Price': 'Price (INR Lakhs)'},\n             color_continuous_scale = 'Magma_r')\nfig.show()","b04fe7f7":"top_brands = list(data['Brand_Name'].value_counts().sort_values(ascending = False)[:15].index)","1b02581b":"temp = data[data['Brand_Name'].isin(top_brands)].groupby(['Brand_Name']).mean()\ntemp['Brand_Name'] = temp.index\nfig = px.bar(temp,x='Brand_Name',y='Price', \n             color = 'Price', \n             title = \"Price v\/s Brand_Name\", \n             labels = {'Price': 'Price (INR Lakhs)'},\n             color_continuous_scale = 'Magma_r')\nfig.show()","b8578baa":"top_models = list(data['Model_Type'].value_counts().sort_values(ascending = False)[:10].index)","3f10bb7b":"temp = data[data['Model_Type'].isin(top_models)].groupby(['Model_Type']).mean()\ntemp['Model_Type'] = temp.index\nfig = px.bar(temp,x='Model_Type',y='Price', \n             color = 'Price', \n             title = \"Price v\/s Model_Type\", \n             labels = {'Price': 'Price (INR Lakhs)'},\n             color_continuous_scale = 'Magma_r')\nfig.show()","3b25f77a":"temp = data.groupby(['Region']).mean()\ntemp['Region'] = temp.index\nfig = px.bar(temp,x='Region',y='Price', \n             color = 'Price', \n             title = \"Price v\/s Region\", \n             labels = {'Price': 'Price (INR Lakhs)'},\n             color_continuous_scale = 'Magma_r')\nfig.show()","34ed2d1e":"### Let's inspect **units** of each categorically-encoded numerical variable i.e.: \n* Mileage \n* Engine \n* Power \n* New_Price","92163028":"#### **Price v\/s Fuel-Type Bar-Plot**","a62b7acd":"### Here, we will treat outliers as follows:\n\n* Keep the outliers in **Seats**, **New_Price** as they are:\n     * **Justification**: \n         * Seats have discrete values and no practical outliers\n         * Removing outliers may disturb the above distribution of **New_Price** since vast majority of values in this column have been imputed by **median**\n* We will use a technique called **Winsorization** for the columns **Power**, **Engine**, **Mileage**, **Kilometers_Driven**\n    * **Justification**: \n        * This technique limits the extreme values within a certain bound\n        * In our case, we limit the lowest and highest 3% values at the respective bounds i.e. **values <= 3rd percentile** are replaced by **value immediately above 3rd percentile** and **values >= 97th percentile** are replaced by **value immediately below 97th percentile**\n* We will **not** remove entries with outliers to prevent data-loss","88c59356":"### Plot Bivariate Analysis on Target variable (Price) and rest of Independent variables\n","1496d77d":"#### Price vs Brand_Name Bar-Plot for **Top 15** most frequent Brand_Names","359c6a34":"### Let's copy the dataframe **df** to **data** for further pre-processing and experimentation","b80e68dc":"#### **Price vs Owner_Type Bar-Plot**","8b425d83":"#### **Bar-Plots in this section are generated using Plotly. Please hover your cursor over the graph to get more information**","f32af968":"## **Data Pre-Processing**","16c35b4a":"#### **Price v\/s Transmission Bar-Plot**","be21ea41":"#### **Scatter Plots of Price vs Numerical Variables**","2bd2a394":"### Treat the outliers appropriately","6707b518":"### Reduce the unique count for Nominal variables like Name and Location (Hint - Combine or Split on Business Sense)\n\n* **Name**: Split the entries\n    * Extract first value (brand name) and create a feature **Brand_Name** \n    * Extract second value (model type) and create a feature **Model_Type**\n* **Location**: Combine the entries\n    * Combine on the basis of region (North, East, West, South) and create a feature **Region**","17f102a9":"#### **Price v\/s Year Bar-Plot**","22aca588":"### Convert variables: Mileage, Engine, Power and New_Price into numerical variables","c7c0d571":"### From the dataframe below, we observe that following variable are actually numerical variables encoded as categories:\n\n* Owner_Type \n* Mileage \n* Engine \n* Power \n* New_Price","d129c4a7":"### Helper functions to process above columns:\n* **process_mileage**: This function convert values in unit **km\/kg** to **kmpl** and removes the scientific unit\n* **process_engine**: This function removes the scientific unit\n* **process_power**: This function removes the scientific unit and convert the corrupt\/invalid entries (**null**) to proper\/valid numpy nan values\n* **process_new_price**: This function coverts the values in unit **Cr** to **lakhs** and removes the scientific unit","451fdbb2":"### On New_Price variable: Compare the Distribution of data before and after imputation","84c5e117":"### Drop the unnecessary column","db350251":"#### **Price vs Region Bar-Plot**","f9f01d66":"#### We observe within **Brand_Name** that **Isuzu** has two spelling variants so we replace ISUZU (upper-case) with Isuzu (lower-case)","bd4687dd":"#### **Price v\/s Location Bar-Plot**","fdba72aa":"#### Price vs Model_Type Bar-Plot for **Top 10** most frequent Model_Type","a4c24a06":"#### **Box-Plots in this section are generated using Plotly. Please hover your cursor over the graph to get more information**","36e9a739":"## **Project Workflow**","332149d8":"### Impute the missing values using the **median** (for numerical variable)\n**Justification**: We choose median as an imputer since it is robust to extreme values\/outliers and is generally a better choice than mean"}}