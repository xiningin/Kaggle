{"cell_type":{"93fc643b":"code","eba72c7b":"code","3eb1518f":"code","8a86ffe0":"code","1c0e2e01":"code","89781ca0":"code","5464892f":"code","4504314e":"code","3b7d2b35":"markdown","d80269c0":"markdown","2cafe671":"markdown","3f904331":"markdown","ad214db2":"markdown"},"source":{"93fc643b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eba72c7b":"TEST_DATA = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ndata = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")","3eb1518f":"data.head()","8a86ffe0":"from sklearn.model_selection import train_test_split\nfrom sklearn.decomposition import PCA\n\ndatay = data['label']\ndataX = data.iloc[:, 1:]\n\nn_components = 100\nxtrain, xtest, ytrain, ytest = train_test_split(dataX, datay, test_size=0.2, random_state=42)\npca = PCA(n_components=n_components, svd_solver='randomized', whiten=True).fit(xtrain)\nxtrain_trans = pca.transform(xtrain)\nxtest_trans = pca.transform(xtest)\nTEST_DATA_trans = pca.transform(TEST_DATA)\nprint(\"pca done\")","1c0e2e01":"from sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n\n\nclf = SVC()\nclf.fit(xtrain_trans, ytrain)\nypred = clf.predict(xtest_trans)\n\nacc = accuracy_score(ytest, ypred)\nprint(acc)\n\n\n# save the model\nimport pickle\nwith open(\".\/svcmodel.pickle\", \"wb\") as f:\n    pickle.dump(clf, f)\nprint(\"# save succussfully!\")","89781ca0":"TEST_DATA_pred = clf.predict(TEST_DATA_trans)\nprint(TEST_DATA_pred.shape)\nprint(TEST_DATA_pred)","5464892f":"df = pd.DataFrame({\"Label\": TEST_DATA_pred})\ndf.index.name=\"ImageId\"\ndf.index=df.index+1\ndf.head()","4504314e":"df.to_csv(\".\/submission.csv\")","3b7d2b35":"# Digit Recognizer\nthe simpliest svm&pca prediction: **0.97457**","d80269c0":"## Load Data\n1. read from .csv file\n2. browse part of the data\n3. split data into 'train' and 'test', and do PCA","2cafe671":"## Create Submission File","3f904331":"## Use SVM to Classify\n1. do grid search to train the model\n2. make prediction\n3. see the accuracy\n4. save the model","ad214db2":"## Done!"}}