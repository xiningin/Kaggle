{"cell_type":{"7bf1d847":"code","65fd27e1":"code","500aaf5b":"code","0034fa27":"code","9c705af1":"code","a31dee05":"code","4f38a579":"code","b6f0f682":"code","8ee65abc":"code","b0269248":"code","af0de953":"markdown","82b70623":"markdown"},"source":{"7bf1d847":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport math\nimport operator\n\n# Any results you write to the current directory are saved as output.","65fd27e1":"iris = pd.read_csv('..\/input\/Iris.csv')\niris.head()","500aaf5b":"iris.drop('Id',axis=1,inplace=True)","0034fa27":"# Creating a function which calculates the distance (eucledian distance) between two data points\ndef euclidian_distance(dp1,dp2,NoOfColumns):\n    distance=0\n    for i in range(NoOfColumns):\n        distance += np.square ( dp1[i] - dp2[i] )\n    return np.sqrt(distance)\n\n# Testing the function \n\ndp1 = [1,3,4,'b']\ndp2 = [3,2,3,'c']\nNoOfColumns = 3 \ntestdistance = euclidian_distance(dp1,dp2,NoOfColumns)\nprint(testdistance)","9c705af1":"nb = [[1,2,3,4],\n     [5,6,7,8]]\nnb[0][-1]","a31dee05":"# Creating \/ Defining the KNN model \n\ndef knn(TrainingData, testData, k) :\n    distances ={}\n    sort = {}\n    NoOfColumns = testData.shape[1]\n    \n    # Calculating euclidean distance between each row of training data and test data\n    for i in range(len(TrainingData)):\n        InterimDistance = euclidian_distance(TrainingData.iloc[i], testData, NoOfColumns)\n        distances[i] = InterimDistance[0]\n    \n    # Sorting them on the basis of distance\n    SortedDistance = sorted(distances.items(),key=operator.itemgetter(1))\n    # Identifying and extracting the top K neighbours \n    neighbour = []\n    for i in range(k):\n        neighbour.append(SortedDistance[i][0])\n        \n    # Calculating the most freq class\/group in the neighbors\n    classvotes = {}\n    for i in range(len(neighbour)):\n        #ClassigiedAs = TrainingData.iloc[][-1] # TrainingData is 2 dimensional array returning value of last column (category of Iris)\n        ClassifiedAs = TrainingData.iloc[neighbour[i]][-1]\n        if ClassifiedAs in classvotes :\n            classvotes[ClassifiedAs] += 1\n        else :\n            classvotes[ClassifiedAs] = 1\n    SortedVotes = sorted(classvotes.items(), key=operator.itemgetter(1), reverse=True)\n    return(SortedVotes[0][0],neighbour)\n    ","4f38a579":"testing = pd.DataFrame([[7.2, 3.6, 5.1, 2.5]])\nkvalue = 5\n#testing\nresult,nb = knn(iris,testing,kvalue)","b6f0f682":"print(\"Classified as :\", result)\nprint(nb)","8ee65abc":"from sklearn.neighbors import KNeighborsClassifier","b0269248":"nbb = KNeighborsClassifier(n_neighbors = 5 )\nnbb.fit(iris.iloc[:,0:4], iris['Species'])\nprint(nbb.predict(testing))\nprint(nbb.kneighbors(testing)[1][0])","af0de953":"### Credits\n\nThanks Analytics Vidhya and MachineLearningMastery.com for writing such simplifying  codes.  Dont Sue me for copyright  infringment. :) ","82b70623":"### Comparing our function with Sklearn "}}