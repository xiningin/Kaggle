{"cell_type":{"d9277415":"code","7573060b":"code","0aae9108":"code","cb070ea6":"code","15819ff8":"code","85d14056":"code","451ea29a":"code","b4b12725":"code","96e8a3ee":"code","dfabcc61":"markdown"},"source":{"d9277415":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7573060b":"datapath = '\/kaggle\/input\/fake-and-real-news-dataset\/'\nfilename = 'True.csv'","0aae9108":"df1 = pd.read_csv(datapath+filename)\ndf1['class'] = 'True'\nprint(df1.shape)\ndf1.head()","cb070ea6":"filename = 'Fake.csv'\ndf2 = pd.read_csv(datapath+filename)\ndf2['class'] = 'Fake'\nprint(df2.shape)\ndf2.head()","15819ff8":"df = df1.append(df2).sample(frac=1.0, random_state=0)\nprint(df.shape)\ndf.head()","85d14056":"!pip install deep_autoviml","451ea29a":"from deep_autoviml import deep_autoviml as deepauto","b4b12725":"target = 'class'\nkeras_model_type = 'fast1'","96e8a3ee":"model, cat_vocab_dict = deepauto.fit(df, target, keras_model_type=keras_model_type,\n            project_name=\"deep_autoviml\", keras_options={}, model_options={}, \n            save_model_flag=True, use_my_model='', model_use_case='', verbose=2)","dfabcc61":"# As you can see, Deep_AutoViML provides accurate results fast! If you liked this notebook, please consider upvoting it!"}}