{"cell_type":{"4ccf49d9":"code","5cea6fa5":"code","14b63d85":"code","d6fd3e11":"code","f386fdb5":"code","9505eece":"code","979684a0":"code","8a7d8419":"code","c4b4bcbf":"code","a1fc84ff":"code","0370d299":"code","eeea6e24":"code","3bf206ad":"code","df07e3b2":"code","42278077":"code","282fdbf0":"code","6788fe84":"code","8d7adb4a":"code","33aaa493":"code","9320d185":"code","4c09404e":"code","85702beb":"markdown","47297801":"markdown","1ac97778":"markdown","f8e0bbdb":"markdown","3c25aac9":"markdown","0f5a38fc":"markdown"},"source":{"4ccf49d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5cea6fa5":"import tensorflow as tf\nfrom tensorflow import keras","14b63d85":"df = pd.read_csv(\"..\/input\/fashion-mnist_train.csv\")\ntrain_labels = df[\"label\"].values\ndf = df.drop(\"label\", axis = 1)","d6fd3e11":"train_data = df.values\ntrain_data.shape","f386fdb5":"import matplotlib.pyplot as plt\n%matplotlib inline\n\ndef show_image(n):\n    img = train_data[n]\n    plt.imshow(img.reshape(28,28))\n    plt.grid(False)\n    plt.show()\n    \nshow_image(6)","9505eece":"plt.figure(figsize = (10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(train_data[i].reshape(28,28))\n    plt.xticks([])\nplt.show()","979684a0":"train_data = train_data.reshape(60000,28,28)","8a7d8419":"train_data = train_data\/255.00","c4b4bcbf":"from keras import layers","a1fc84ff":"model = keras.Sequential([\n    keras.layers.Flatten(input_shape = (28,28)),\n    keras.layers.Dense(128,activation = 'relu'),\n    keras.layers.Dense(10,activation = 'softmax')\n])","0370d299":"model.compile(optimizer='adam',metrics=[\"accuracy\"],loss = \"sparse_categorical_crossentropy\")","eeea6e24":"model.fit(train_data,train_labels,epochs=10)","3bf206ad":"train_labels = train_labels.reshape(60000,)\ntrain_labels = np.uint8(train_labels)","df07e3b2":"df_test = pd.read_csv(\"..\/input\/fashion-mnist_test.csv\")\ntest_labels = df_test[\"label\"].values\ndf_test = df_test.drop(\"label\", axis = 1)","42278077":"test_images = df_test.values","282fdbf0":"classes = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","6788fe84":"plt.imshow(test_images[0].reshape(28,28))","8d7adb4a":"predictions = model.predict(test_images.reshape(-1,28,28))","33aaa493":"preds = np.argmax(predictions,axis=1)","9320d185":"plt.figure(figsize=(15,15))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(test_images[i].reshape(28,28))\n    plt.xlabel(\"pred:{} real: {} class: {:s}\".format(preds[i],test_labels[i],classes[test_labels[i]]))\n    plt.xticks([])","4c09404e":"test_images = test_images.reshape(-1,28,28)\ntest_loss , test_accuracy = model.evaluate(test_images,test_labels)\nprint('\\nTest Accuracy : ', test_accuracy*100,\"%\")","85702beb":"> Dividing the pixels by 255 to make the pixels range from 0 to 1","47297801":"<b>Importing TensorFlow and Keras <\/b>","1ac97778":"**Model**\n> The first layer flattens the image into 784 X 1, this processed data is passed into a Dense layer with relu activation giving a matrix of (n,128) which is further passed through another Dense layer with softmax activation giving a (n,10) matrix n being 60,000. This matrix is a probability matrix giving probabilities of the various labels. The argument with the maximum probability is the label.","f8e0bbdb":"**Extracting and Exploring the data**","3c25aac9":"**Preprocessing the data**","0f5a38fc":"1. Reading the file using pandas \n2. Extracting the training labels\n3. Removing the labels column from the dataframe"}}