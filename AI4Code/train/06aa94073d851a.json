{"cell_type":{"2fc1a6df":"code","fa6df14f":"code","a3fb0d55":"code","eb1df35c":"code","b0146fa7":"code","f44546df":"code","c6c1a3da":"code","2c22da83":"code","b5972bfd":"code","805d4415":"code","a6934730":"code","724415bd":"code","d877e85a":"code","081386af":"code","b5951967":"code","b9623bd3":"code","36aaf887":"code","863cd42f":"code","6210c993":"code","0080e614":"code","ca1fd145":"code","31872308":"markdown","2b1213a6":"markdown","b6db5510":"markdown","dece2a70":"markdown","8866c978":"markdown","16873b87":"markdown","df429c78":"markdown","4a848e38":"markdown","ef936450":"markdown","00d7f1e0":"markdown","0a63eb7e":"markdown","b9bdbd71":"markdown","45d025bc":"markdown","aa784602":"markdown","5dd3fdb7":"markdown"},"source":{"2fc1a6df":"!pip install keras==2.2.4 # critical dependency\n!pip install -q bert-tensorflow==1.0.1","fa6df14f":"!pip freeze > kaggle_image_requirements.txt","a3fb0d55":"# Import neural network libraries\nimport tensorflow as tf\nimport tensorflow_hub as hub\nfrom bert.tokenization import FullTokenizer\nfrom tensorflow.keras import backend as K\n\n# Initialize session\nsess = tf.Session()","eb1df35c":"# Some other key imports\nimport os\nimport re\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm","b0146fa7":"# Params for bert model and tokenization\nNsamp = 1000 # number of samples to generate in each class - 'spam', 'not spam'\nmaxtokens = 200 # the maximum number of tokens per document\nmaxtokenlen = 100 # the maximum length of each token","f44546df":"def tokenize(row):\n    if row is None or row is '':\n        tokens = \"\"\n    else:\n        try:\n            tokens = row.split(\" \")[:maxtokens]\n        except:\n            tokens=\"\"\n    return tokens","c6c1a3da":"def reg_expressions(row):\n    tokens = []\n    try:\n        for token in row:\n            token = token.lower()\n            token = re.sub(r'[\\W\\d]', \"\", token)\n            token = token[:maxtokenlen] # truncate token\n            tokens.append(token)\n    except:\n        token = \"\"\n        tokens.append(token)\n    return tokens","2c22da83":"import nltk\n\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nstopwords = stopwords.words('english')    \n\n# print(stopwords) # see default stopwords\n# it may be beneficial to drop negation words from the removal list, as they can change the positive\/negative meaning\n# of a sentence - but we didn't find it to make a difference for this problem\n# stopwords.remove(\"no\")\n# stopwords.remove(\"nor\")\n# stopwords.remove(\"not\")","b5972bfd":"def stop_word_removal(row):\n    token = [token for token in row if token not in stopwords]\n    token = filter(None, token)\n    return token","805d4415":"!wget -q \"http:\/\/ai.stanford.edu\/~amaas\/data\/sentiment\/aclImdb_v1.tar.gz\"\n!tar xzf aclImdb_v1.tar.gz","a6934730":"# function for shuffling data\ndef unison_shuffle(data, header):\n    p = np.random.permutation(len(header))\n    data = data[p]\n    header = np.asarray(header)[p]\n    return data, header\n\ndef load_data(path):\n    data, sentiments = [], []\n    for folder, sentiment in (('neg', 0), ('pos', 1)):\n        folder = os.path.join(path, folder)\n        for name in os.listdir(folder):\n            with open(os.path.join(folder, name), 'r') as reader:\n                  text = reader.read()\n            text = tokenize(text)\n            text = stop_word_removal(text)\n            text = reg_expressions(text)\n            data.append(text)\n            sentiments.append(sentiment)\n    data_np = np.array(data)\n    data, sentiments = unison_shuffle(data_np, sentiments)\n    \n    return data, sentiments\n\ntrain_path = os.path.join('aclImdb', 'train')\ntest_path = os.path.join('aclImdb', 'test')\nraw_data, raw_header = load_data(train_path)\n\nprint(raw_data.shape)\nprint(len(raw_header))","724415bd":"# Subsample required number of samples\nrandom_indices = np.random.choice(range(len(raw_header)),size=(Nsamp*2,),replace=False)\ndata_train = raw_data[random_indices]\nheader = raw_header[random_indices]\n\nprint(\"DEBUG::data_train::\")\nprint(data_train)","d877e85a":"unique_elements, counts_elements = np.unique(header, return_counts=True)\nprint(\"Sentiments and their frequencies:\")\nprint(unique_elements)\nprint(counts_elements)","081386af":"# function for converting data into the right format, due to the difference in required format from sklearn models\n# we expect a single string per email here, versus a list of tokens for the sklearn models previously explored\ndef convert_data(raw_data,header):\n    converted_data, labels = [], []\n    for i in range(raw_data.shape[0]):\n        # combine list of tokens representing each email into single string\n        out = ' '.join(raw_data[i])\n        converted_data.append(out)\n        labels.append(header[i])\n    converted_data = np.array(converted_data, dtype=object)[:, np.newaxis]\n    \n    return converted_data, np.array(labels)\n\ndata_train, header = unison_shuffle(data_train, header)\n\n# split into independent 70% training and 30% testing sets\nidx = int(0.7*data_train.shape[0])\n# 70% of data for training\ntrain_x, train_y = convert_data(data_train[:idx],header[:idx])\n# remaining 30% for testing\ntest_x, test_y = convert_data(data_train[idx:],header[idx:])\n\nprint(\"train_x\/train_y list details, to make sure it is of the right form:\")\nprint(len(train_x))\nprint(train_x)\nprint(train_y[:5])\nprint(train_y.shape)","b5951967":"class InputExample(object):\n    \"\"\"A single training\/test example for simple sequence classification.\"\"\"\n\n    def __init__(self, guid, text_a, text_b=None, label=None):\n        \"\"\"Constructs a InputExample.\n    Args:\n      guid: Unique id for the example.\n      text_a: string. The untokenized text of the first sequence. For single\n        sequence tasks, only this sequence must be specified.\n      text_b: (Optional) string. The untokenized text of the second sequence.\n        Only must be specified for sequence pair tasks.\n      label: (Optional) string. The label of the example. This should be\n        specified for train examples, but not for test examples.\n    \"\"\"\n        self.guid = guid\n        self.text_a = text_a\n        self.text_b = text_b\n        self.label = label\n\n\ndef create_tokenizer_from_hub_module(bert_path):\n    \"\"\"Get the vocab file and casing info from the Hub module.\"\"\"\n    bert_module = hub.Module(bert_path)\n    tokenization_info = bert_module(signature=\"tokenization_info\", as_dict=True)\n    vocab_file, do_lower_case = sess.run(\n        [tokenization_info[\"vocab_file\"], tokenization_info[\"do_lower_case\"]]\n    )\n\n    return FullTokenizer(vocab_file=vocab_file, do_lower_case=do_lower_case)\n\n\ndef convert_single_example(tokenizer, example, max_seq_length=256):\n    \"\"\"Converts a single `InputExample` into a single `InputFeatures`.\"\"\"\n\n    tokens_a = tokenizer.tokenize(example.text_a)\n    if len(tokens_a) > max_seq_length - 2:\n        tokens_a = tokens_a[0 : (max_seq_length - 2)]\n\n    tokens = []\n    segment_ids = []\n    tokens.append(\"[CLS]\")\n    segment_ids.append(0)\n    for token in tokens_a:\n        tokens.append(token)\n        segment_ids.append(0)\n    tokens.append(\"[SEP]\")\n    segment_ids.append(0)\n\n    input_ids = tokenizer.convert_tokens_to_ids(tokens)\n\n    # The mask has 1 for real tokens and 0 for padding tokens. Only real\n    # tokens are attended to.\n    input_mask = [1] * len(input_ids)\n\n    # Zero-pad up to the sequence length.\n    while len(input_ids) < max_seq_length:\n        input_ids.append(0)\n        input_mask.append(0)\n        segment_ids.append(0)\n\n    assert len(input_ids) == max_seq_length\n    assert len(input_mask) == max_seq_length\n    assert len(segment_ids) == max_seq_length\n\n    return input_ids, input_mask, segment_ids, example.label\n\n\ndef convert_examples_to_features(tokenizer, examples, max_seq_length=256):\n    \"\"\"Convert a set of `InputExample`s to a list of `InputFeatures`.\"\"\"\n\n    input_ids, input_masks, segment_ids, labels = [], [], [], []\n    for example in tqdm(examples, desc=\"Converting examples to features\"):\n        input_id, input_mask, segment_id, label = convert_single_example(\n            tokenizer, example, max_seq_length\n        )\n        input_ids.append(input_id)\n        input_masks.append(input_mask)\n        segment_ids.append(segment_id)\n        labels.append(label)\n    return (\n        np.array(input_ids),\n        np.array(input_masks),\n        np.array(segment_ids),\n        np.array(labels).reshape(-1, 1),\n    )\n\n\ndef convert_text_to_examples(texts, labels):\n    \"\"\"Create InputExamples\"\"\"\n    InputExamples = []\n    for text, label in zip(texts, labels):\n        InputExamples.append(\n            InputExample(guid=None, text_a=\" \".join(text), text_b=None, label=label)\n        )\n    return InputExamples","b9623bd3":"class BertLayer(tf.keras.layers.Layer):\n    def __init__(\n        self,\n        n_fine_tune_layers=10,\n        pooling=\"mean\",\n        bert_path=\"https:\/\/tfhub.dev\/google\/bert_uncased_L-12_H-768_A-12\/1\",\n        **kwargs,\n    ):\n        self.n_fine_tune_layers = n_fine_tune_layers\n        self.trainable = True\n        self.output_size = 768\n        self.pooling = pooling\n        self.bert_path = bert_path\n        if self.pooling not in [\"first\", \"mean\"]:\n            raise NameError(\n                f\"Undefined pooling type (must be either first or mean, but is {self.pooling}\"\n            )\n\n        super(BertLayer, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        self.bert = hub.Module(\n            self.bert_path, trainable=self.trainable, name=f\"{self.name}_module\"\n        )\n\n        # Remove unused layers\n        trainable_vars = self.bert.variables\n        if self.pooling == \"first\":\n            trainable_vars = [var for var in trainable_vars if not \"\/cls\/\" in var.name]\n            trainable_layers = [\"pooler\/dense\"]\n\n        elif self.pooling == \"mean\":\n            trainable_vars = [\n                var\n                for var in trainable_vars\n                if not \"\/cls\/\" in var.name and not \"\/pooler\/\" in var.name\n            ]\n            trainable_layers = []\n        else:\n            raise NameError(\n                f\"Undefined pooling type (must be either first or mean, but is {self.pooling}\"\n            )\n\n        # Select how many layers to fine tune\n        for i in range(self.n_fine_tune_layers):\n            trainable_layers.append(f\"encoder\/layer_{str(11 - i)}\")\n\n        # Update trainable vars to contain only the specified layers\n        trainable_vars = [\n            var\n            for var in trainable_vars\n            if any([l in var.name for l in trainable_layers])\n        ]\n\n        # Add to trainable weights\n        for var in trainable_vars:\n            self._trainable_weights.append(var)\n\n        for var in self.bert.variables:\n            if var not in self._trainable_weights:\n                self._non_trainable_weights.append(var)\n\n        super(BertLayer, self).build(input_shape)\n\n    def call(self, inputs):\n        inputs = [K.cast(x, dtype=\"int32\") for x in inputs]\n        input_ids, input_mask, segment_ids = inputs\n        bert_inputs = dict(\n            input_ids=input_ids, input_mask=input_mask, segment_ids=segment_ids\n        )\n        if self.pooling == \"first\":\n            pooled = self.bert(inputs=bert_inputs, signature=\"tokens\", as_dict=True)[\n                \"pooled_output\"\n            ]\n        elif self.pooling == \"mean\":\n            result = self.bert(inputs=bert_inputs, signature=\"tokens\", as_dict=True)[\n                \"sequence_output\"\n            ]\n\n            mul_mask = lambda x, m: x * tf.expand_dims(m, axis=-1)\n            masked_reduce_mean = lambda x, m: tf.reduce_sum(mul_mask(x, m), axis=1) \/ (\n                    tf.reduce_sum(m, axis=1, keepdims=True) + 1e-10)\n            input_mask = tf.cast(input_mask, tf.float32)\n            pooled = masked_reduce_mean(result, input_mask)\n        else:\n            raise NameError(f\"Undefined pooling type (must be either first or mean, but is {self.pooling}\")\n\n        return pooled\n\n    def compute_output_shape(self, input_shape):\n        return (input_shape[0], self.output_size)","36aaf887":"# Function to build overall model\ndef build_model(max_seq_length):\n    in_id = tf.keras.layers.Input(shape=(max_seq_length,), name=\"input_ids\")\n    in_mask = tf.keras.layers.Input(shape=(max_seq_length,), name=\"input_masks\")\n    in_segment = tf.keras.layers.Input(shape=(max_seq_length,), name=\"segment_ids\")\n    bert_inputs = [in_id, in_mask, in_segment]\n    \n    # just extract BERT features, don't fine-tune\n    bert_output = BertLayer(n_fine_tune_layers=0)(bert_inputs)\n    # train dense classification layer on top of extracted features\n    dense = tf.keras.layers.Dense(256, activation=\"relu\")(bert_output)\n    pred = tf.keras.layers.Dense(1, activation=\"sigmoid\")(dense)\n\n    model = tf.keras.models.Model(inputs=bert_inputs, outputs=pred)\n    model.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n    model.summary()\n\n    return model\n\n# Function to initialize variables correctly\ndef initialize_vars(sess):\n    sess.run(tf.local_variables_initializer())\n    sess.run(tf.global_variables_initializer())\n    sess.run(tf.tables_initializer())\n    K.set_session(sess)","863cd42f":"# tf hub bert model path\nbert_path = \"https:\/\/tfhub.dev\/google\/bert_uncased_L-12_H-768_A-12\/1\" \n\n# Instantiate tokenizer\ntokenizer = create_tokenizer_from_hub_module(bert_path)\n\n# Convert data to InputExample format\ntrain_examples = convert_text_to_examples(train_x, train_y)\ntest_examples = convert_text_to_examples(test_x, test_y)\n\n# Convert to features\n(train_input_ids,train_input_masks,train_segment_ids,train_labels) = \\\nconvert_examples_to_features(tokenizer, train_examples, max_seq_length=maxtokens)\n(test_input_ids,test_input_masks,test_segment_ids,test_labels) = \\\nconvert_examples_to_features(tokenizer, test_examples, max_seq_length=maxtokens)\n\n# Build model\nmodel = build_model(maxtokens)\n\n# Instantiate variables\ninitialize_vars(sess)\n\n# Train model\nhistory = model.fit([train_input_ids, train_input_masks, train_segment_ids],train_labels,\n                    validation_data=([test_input_ids, test_input_masks, test_segment_ids],test_labels),\n                    epochs=5,batch_size=32)","6210c993":"import matplotlib.pyplot as plt\n\ndf_history = pd.DataFrame(history.history)\nfig,ax = plt.subplots()\nplt.plot(range(df_history.shape[0]),df_history['val_acc'],'bs--',label='validation')\nplt.plot(range(df_history.shape[0]),df_history['acc'],'r^--',label='training')\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.title('BERT Email Classification Training')\nplt.legend(loc='best')\nplt.grid()\nplt.show()\n\nfig.savefig('BERTConvergence.eps', format='eps')\nfig.savefig('BERTConvergence.pdf', format='pdf')\nfig.savefig('BERTConvergence.png', format='png')\nfig.savefig('BERTConvergence.svg', format='svg')","0080e614":"from IPython.display import HTML\ndef create_download_link(title = \"Download file\", filename = \"data.csv\"):  \n    html = '<a href={filename}>{title}<\/a>'\n    html = html.format(title=title,filename=filename)\n    return HTML(html)\n\ncreate_download_link(filename='BERTConvergence.svg')","ca1fd145":"!ls\n!rm -rf aclImdb\n!rm aclImdb_v1.tar.gz","31872308":"# WARNING\n**Please make sure to \"COPY AND EDIT NOTEBOOK\" to use compatible library dependencies! DO NOT CREATE A NEW NOTEBOOK AND COPY+PASTE THE CODE - this will use latest Kaggle dependencies at the time you do that, and the code will need to be modified to make it work. Also make sure internet connectivity is enabled on your notebook**","2b1213a6":"Write requirements to file, anytime you run it, in case you have to go back and recover Kaggle dependencies. **MOST OF THESE REQUIREMENTS WOULD NOT BE NECESSARY FOR LOCAL INSTALLATION**\n\nLatest known such requirements are hosted for each notebook in the companion github repo, and can be pulled down and installed here if needed. Companion github repo is located at https:\/\/github.com\/azunre\/transfer-learning-for-nlp","b6db5510":"Next, we define a custom tf hub BERT layer","dece2a70":"Shuffle and preprocess data","8866c978":"**Stop-word removal**\n\nLet\u2019s define a function to remove stopwords - words that occur so frequently in language that they offer no useful information for classification. This includes words such as \u201cthe\u201d and \u201care\u201d, and the popular library NLTK provides a heavily-used list that will employ.","16873b87":"Display sentiments and their frequencies in the dataset, to ensure it is roughly balanced between classes","df429c78":"# Download and Assemble IMDB Review Dataset\n\nDownload the labeled IMDB reviews","4a848e38":"Tokenization","ef936450":"# Preliminaries\nFirst install critical dependencies not already on the Kaggle docker image. **NOTE THAT THIS NOTEBOOK USES TENSORFLOW 1.14 IN ORDER TO BE COMPARED WITH ELMo, WHICH WAS NOT PORTED TO TENSORFLOW 2.X. To see equivalent Tensorflow 2.X BERT Code for the Spam problem, see https:\/\/www.kaggle.com\/azunre\/tlfornlp-chapters2-3-spam-bert-tf2** ","00d7f1e0":"**Use regular expressions to remove unnecessary characters**\n\nNext, we define a function to remove punctuation marks and other nonword characters (using regular expressions) from the emails with the help of the ubiquitous python regex library. In the same step, we truncate all tokens to hyperparameter maxtokenlen defined above.","0a63eb7e":"We now use the custom TF hub BERT embedding layer within a higher-level function to define the overall model. More specifically, we put a dense trainable layer of output dimension 256 on top of the BERT embedding.","b9bdbd71":"**Make figures downloadable to local system in interactive mode**","45d025bc":"# Define Tokenization, Stop-word and Punctuation Removal Functions\n\nBefore proceeding, we must decide how many samples to draw from each class. We must also decide the maximum number of tokens per email, and the maximum length of each token. This is done by setting the following overarching hyperparameters","aa784602":"**Visualize Convergence**","5dd3fdb7":"# Build, Train and Evaluate BERT Model\nFirst define critical functions that define various components of the BERT model"}}