{"cell_type":{"0faaafa7":"code","0e10a971":"code","4b71dce6":"code","38b1795e":"code","2c8edfcb":"code","a78aae1a":"code","07ef8d04":"code","f90efd93":"code","e642fa11":"code","b27f9393":"code","347464e7":"code","faf3de32":"code","db6c8fe2":"code","a86dc59c":"code","d2c6bc66":"code","9eac8e4c":"code","6325c873":"markdown","8471b216":"markdown","b7a544f5":"markdown","00ece26e":"markdown","2d4b5fa8":"markdown","6131de78":"markdown","e210d1b1":"markdown","226ce374":"markdown","0e1f0cfc":"markdown","e70e2218":"markdown","928a6e14":"markdown","9ff5c529":"markdown","945d6b8c":"markdown","54c46252":"markdown","379065f8":"markdown","9a972e01":"markdown"},"source":{"0faaafa7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom glob import glob\nimport cv2\nimport shutil\nimport os","0e10a971":"print(tf.__version__)\nprint(tf.config.list_physical_devices())\ntf.random.set_seed(25081994)","4b71dce6":"!rm -rf *.jpg\n!rm -rf *.png","38b1795e":"for image_path in glob('..\/input\/pokemon-images-and-types\/images\/images\/*'):\n    if image_path.endswith('.png'):\n        img = cv2.imread(image_path, cv2.IMREAD_UNCHANGED)\n        if img.shape[2] == 4:\n            alpha_mask = img[:,:,3] == 0\n            img[alpha_mask] = [255, 255, 255, 255]\n            img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)\n        \n        image_file_name = os.path.basename(image_path)\n        image_file_name = image_file_name[:-3] + 'jpg'\n        cv2.imwrite(image_file_name, img, [int(cv2.IMWRITE_JPEG_QUALITY), 100])\n    else:\n        image_file_name = os.path.basename(image_path)\n        shutil.copy(image_path, image_file_name)","2c8edfcb":"image_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    samplewise_center=True,\n    samplewise_std_normalization=True,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    validation_split=0.1,\n    horizontal_flip=True,\n)","a78aae1a":"df = pd.read_csv('..\/input\/pokemon-images-and-types\/pokemon.csv')\ndf['filename'] = df['Name'].apply(lambda x: x+'.jpg')\ndf","07ef8d04":"IMAGES_DIRECTORY = '.\/'","f90efd93":"training_flow = image_generator.flow_from_dataframe(\n    df,\n    directory=IMAGES_DIRECTORY,\n    x_col='filename',\n    y_col='Type1',\n    subset='training',\n    batch_size=32,\n)\nvalidation_flow = image_generator.flow_from_dataframe(\n    df,\n    directory=IMAGES_DIRECTORY,\n    x_col='filename',\n    y_col='Type1',\n    subset='validation',\n    batch_size=32,\n)","e642fa11":"CLASSES = {**training_flow.class_indices, **validation_flow.class_indices}\nCLASSES","b27f9393":"base_model = tf.keras.applications.MobileNetV2(\n    include_top=False\n)\nbase_model.trainable = False\n\nx = base_model.output\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\npreds = tf.keras.layers.Dense(len(CLASSES), activation='softmax')(x)\n\nmodel = tf.keras.Model(inputs=base_model.input, outputs=preds)\n\nmodel.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])","347464e7":"callback = tf.keras.callbacks.EarlyStopping(\n    monitor='loss',\n    patience=15,\n    restore_best_weights=True\n)","faf3de32":"model.fit(\n    training_flow,\n    validation_data=validation_flow,\n    epochs=500,\n    callbacks=[callback]\n)","db6c8fe2":"base_model.trainable = True\nopt = tf.keras.optimizers.Adam(learning_rate=1e-5)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])","a86dc59c":"model.summary()","d2c6bc66":"model.fit(\n    training_flow,\n    validation_data=validation_flow,\n    epochs=500,\n    callbacks=[callback]\n)","9eac8e4c":"model.save('model')","6325c873":"Loading MobileNetV2 and switching the outmost layers to adapt for our use-case.\n\nFreezing the original lower layers for now.","8471b216":"Training the full model.","b7a544f5":"Where are the images to train from:","00ece26e":"Erasing local temporary images, if there are any.","2d4b5fa8":"Training the new layers inserted in the model.","6131de78":"Loading table of Pok\u00e9mons \ud83d\udc34 image path, name and types.","e210d1b1":"Converting and saving images from dataset to local storage.","226ce374":"Setting callback function that will stop the training when there are 15 epochs without improvement on the validation.","0e1f0cfc":"# Importing stuff \ud83e\udded","e70e2218":"- Checking version and system configuration of accelerators (GPU\/TPUs).\n- Seting seed for reprodutibility.","928a6e14":"Allowing the training of the full model.\n\nSetting a small learning rate.","9ff5c529":"Saving the model for further use.","945d6b8c":"Some info about the model architecture.","54c46252":"Image data generator to load images into the model.\n\nSome random parameters allow for more generalization capability of the network mainly when dealing with small datasets.","379065f8":"Setting traning and validation flows.","9a972e01":"Pok\u00e9mon types in the dataset."}}