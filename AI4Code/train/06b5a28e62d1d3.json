{"cell_type":{"de3296a4":"code","259b43f4":"code","664a2514":"code","1db0b66b":"code","cb46315c":"code","e8ba0872":"code","8c62f1c6":"code","b18ce707":"code","fa5c3fe3":"code","bfabe3f0":"code","7e5e5dd2":"code","7d353257":"code","2da30a7b":"code","3509a4f5":"markdown","ffca2132":"markdown","0e1bd97a":"markdown","2e2f690f":"markdown","abb43576":"markdown","3e6ca8b9":"markdown","7d1e5f1c":"markdown"},"source":{"de3296a4":"from collections import defaultdict #acts just like dictionary except for the fact that it never raises a KeyError. It displays a default value for the Key that doesn't exist. Useful as many movies wouldn't have ratings as users did not watch them so this would avoid KeyErrors.\nfrom surprise import SVD, Dataset #surprise is a scikit library used for recommendation systems","259b43f4":"import pandas as pd\n\nfrom surprise.prediction_algorithms.matrix_factorization import SVD\nfrom sklearn.model_selection import train_test_split\nimport surprise","664a2514":"# Load movielens dataset.\ndata = Dataset.load_builtin('ml-100k')\ndata","1db0b66b":"#We will use entire data into training set\ntrainset = data.build_full_trainset()\ntrainset.ur #ur - user ratings","cb46315c":"#Import packages for SVD\nfrom numpy import array, diag, dot\nfrom scipy.linalg import svd\n\n#Define a sample matrix to be decomposed by SVD\nA = array([[1,2,3],[4,5,6],[7,8,9]])\nA","e8ba0872":"#Applying SVD on A would output 3 parameters namely\nU,s,VT = svd(A)\nprint(\"U = \",U) #Orthogonal matrix\nprint('************************************************')\nprint(\"S = \",s) #Singular values\nprint('************************************************')\nprint(\"VT = \", VT) #Transpose of Orthogonal matrix\n","8c62f1c6":"#Converting all singular values into diagonal matrix\nsigma = diag(s)\nprint('Sigma = ',sigma)","b18ce707":"B = U.dot(sigma.dot(VT))\nprint(B)","fa5c3fe3":"#Initialize and Fit SVD into trainset\nalgo = SVD()\nalgo.fit(trainset)","bfabe3f0":"# Create testset - all movies not available in trainset\ntestset = trainset.build_anti_testset()\ntestset","7e5e5dd2":"#Predict ratings for movies in testset\npred = algo.test(testset)\npred","7d353257":"def get_top_n_movies(pred, n):\n    #Write a function that map predictions to each user\n    top_n = defaultdict(list) #convert list into defaultdict which accomadates empty key values pair\n    for uid, iid, true_r,est, _ in pred:#variable names to all features in predictions\n        top_n[uid].append((iid,est))\n        \n    #Sort the predictions and retrieve n highest scores\n    for uid, user_ratings in top_n.items():\n        user_ratings.sort(key = lambda x:x[1], reverse = True)\n        top_n[uid] = user_ratings[:n]\n        \n    return top_n\n\nn = 10\ntop_n = get_top_n_movies(pred,n)\ntop_n","2da30a7b":"#Finally recommend a list of movies to user\nfor uid, user_ratings in top_n.items():\n    print(uid, [iid for (iid, _) in user_ratings])","3509a4f5":"Above gives you a list of all movies not watched by User 196 and would be the ratings he would give.\n\nwas_impossible = False, means SVD was able to predict the rating given the data it had. It means predicting the rating wasn't impossible as we had some prior data. This would be particularly useful when a new movie never watched or a new user having no previous rating info, in such case it would be was_impossible: True\n\n# Recommend a list of movies to a user\n\n**Things to do:**\n* Write a function that map predictions to each user\n* Sort the predictions and retrieve top n ratings a user would rate a movie\n* Finally recommend a list of movies to user","ffca2132":"Ratings you see here 3.52986 are global mean ratings which is not a reliable metric. This is given to all those movies that have no rating. Next step we will use SVD algorithm to predict user ratings for these movies.","0e1bd97a":"The diagonal values in the Sigma matrix 's' are known as the singular values of the original matrix A. The columns of the U matrix are called the left-singular vectors of A, and the columns of V are called the right-singular vectors of A.\n\n***For further info: [Machine Learning Mastery](https:\/\/machinelearningmastery.com\/singular-value-decomposition-for-machine-learning\/#:~:text=The%20diagonal%20values%20in%20the,calculated%20via%20iterative%20numerical%20methods.)***\n\nNow that we have decomposed A into U, s, VT. Let's reconstruct to form Matrix A ","2e2f690f":"Coming back to our dataset.\n\n**Things to do:**\n* Initialize and Fit SVD into trainset\n* Create testset - all movies not available in trainset\n* Predict ratings for movies in testset","abb43576":"# Summary & Model deployment\n\nThis is how we derive\/ predict ratings for a product just by understanding past interactions of that product with other users OR past interactions of a user with similar products. \n\n**Benefits:**\n* You don't need to have features of user, products as this is purely based on ratings given\n\n**Model deployment:**\nYou should first start with simple popularity based, content based recommender systems and gradually move towards matrix factorization based collaborative recommenders.","3e6ca8b9":"# Matrix Factorization\n\nMatrix factorization is a class of collaborative filtering algorithms and is a method of hybrid recommender system. These algorithms work by decomposing the user-item interaction matrix into the product of 2 lower dimensionality rectangular matrices.\n\n![image.png](attachment:image.png)\n\n*More on this here -> [Wiki](https:\/\/en.wikipedia.org\/wiki\/Matrix_factorization_(recommender_systems))*\nThis algorithm is particularly useful when you have to derive characteristics of user & item purely based on their interactions. So if you want to predict if a user will like a particular movie you've got to look at his past interactions with similar movies to understand whether he will like this movie or not and how he would rate it.\n\n*Further info on [Matrix Factorization](https:\/\/machinelearningmastery.com\/introduction-to-matrix-decompositions-for-machine-learning\/)*\n\n\n**Here, we would use Movie-lens dataset to recommend similar movies based on ratings.**\n\n# Import packages & dataset","7d1e5f1c":"User 0 has given a rating of 4.0 for movie no. 528. What if we would like to know the rating this User 0 will give to a movie that he hasn't watched. We will use Singular Value Decomposition to derive characteristics of this movie and user.\n\n# Singular Value Decomposition\nSVD is a matrix factorization technique that is usually used to reduce the no. of features of a dataset by reducing space dimensions from N to K\n\n![image.png](attachment:image.png)\n\n**What goes behind the scenes:**\n\nDecompose Matrix into U,s, VT"}}