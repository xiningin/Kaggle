{"cell_type":{"5324a122":"code","205a6662":"code","7b263e90":"code","ac38d962":"code","e28539e1":"code","8df7d75e":"code","e078f1fd":"code","80d522c9":"code","96e56b07":"code","496b6c99":"code","47f54d87":"code","fb63314d":"code","59224724":"code","39cd5a7b":"code","c13b5821":"code","4e9ef673":"code","b180aeb6":"code","fc35b6ac":"code","7429d0b2":"code","d79f37bc":"code","e18d5768":"code","4ee847c3":"code","cbc0068c":"code","1b923712":"code","f11a8437":"code","34ad195b":"markdown","15e25191":"markdown","320adbb1":"markdown","07fb4ab2":"markdown","4861e1eb":"markdown","6864b403":"markdown","99f98dc1":"markdown","a30521d8":"markdown","ccc40bf6":"markdown"},"source":{"5324a122":"#Importing Libraries\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","205a6662":"data = pd.read_csv('..\/input\/iris-dataset\/iris.csv',header='infer')","7b263e90":"data.shape","ac38d962":"#Checking for missing \/ null values\ndata.isna().sum()","e28539e1":"data.head()","8df7d75e":"# --- Finding Correlation ---\ndata_feature = pd.DataFrame(data,columns=['sepal_length','sepal_width','petal_length','petal_width'])\n\n\n#plotting the correlation\ncorr = data_feature.corr(method='pearson')\nfig = plt.figure(figsize=(8,8))\nax = fig.add_subplot(111)\ncax = ax.matshow(corr,cmap='YlGnBu', vmin=-1, vmax=1)\nfig.colorbar(cax)\nticks = np.arange(0,len(data_feature.columns),1)\nax.set_xticks(ticks)\nplt.xticks(rotation=90)\nax.set_yticks(ticks)\nax.set_xticklabels(data_feature.columns)\nax.set_yticklabels(data_feature.columns)\nplt.show()","e078f1fd":"#Sepal Width vs Sepal Length\nsns.set(style=\"darkgrid\")\nfig, ax = plt.subplots(figsize=(10,10))\nax = sns.swarmplot (x='sepal_length', y='sepal_width', data=data, hue = 'species')\nplt.title('Sepal Width vs Sepal Length')\nplt.ylabel('Sepal Width')\nplt.xlabel('Sepal Length')","80d522c9":"#Petal Length vs Petal Width\nsns.set(style=\"darkgrid\")\nfig = plt.figure()\nfig = sns.relplot(x=\"petal_length\", y=\"petal_width\", hue=\"species\", data=data, kind=\"scatter\", legend=\"full\", height=10,aspect=1,palette=\"ch:r=-.5,l=.75\")\nfig.fig.set_size_inches(10,10)\nfig.set_titles(\"Petal Length vs Petal Width\")\nfig.set_xlabels(\"Petal Length\")\nfig.set_ylabels(\"Petal Width\")\nplt.show()","96e56b07":"#Pair Plot\nsns.pairplot(data, hue=\"species\")","496b6c99":"# Initialize the matplotlib figure\nf, ax = plt.subplots(figsize=(6, 15))\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"sepal_length\", y=\"species\", data=data,\n            label=\"Sepal Length\", color=\"b\")\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"sepal_width\", y=\"species\", data=data,\n            label=\"Sepal Width\", color=\"b\")\n\nsns.set_color_codes(\"deep\")\nsns.barplot(x=\"petal_length\", y=\"species\", data=data,\n            label=\"Petal Length\", color=\"r\")\n\nsns.set_color_codes(\"dark\")\nsns.barplot(x=\"petal_width\", y=\"species\", data=data,\n            label=\"Petal Width\", color=\"r\")\n\n\n\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"upper right\", frameon=True)\nax.set(xlim=(0, 24), ylabel=\"\",\n       xlabel=\"Sepal&Petal Dimensions\")\nsns.despine(left=True, bottom=True)","47f54d87":"# --- Importing ML libraries ---\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n#Metrics Libraries\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\n\n#ML Classifier Algorithm Libraries\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\n","fb63314d":"data.columns","59224724":"#Feature & Target Selection\nfeatures = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']\ntarget = ['species']\n\n# Feature& Target  Dataset\nX = data[features]\ny = data[target]","39cd5a7b":"#Dataset Split  [train = 90%, test = 10%]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=0) \n\n#Feature Scaling\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","c13b5821":"# -- Building Model List --\nmodels = []\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC()))\nmodels.append(('RFC', RandomForestClassifier()))","4e9ef673":"# -- Model Evaluation --\nmodel_results = []\nmodel_names = []\n\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=None, shuffle=False)\n    cross_val_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')\n    model_results.append(cross_val_results)\n    model_names.append(name)\n    print(name, \":--\", \"Mean Accuracy =\", '{:.2%}'.format(cross_val_results.mean()), \n                       \"Standard Deviation Accuracy =\", '{:.2%}'.format(cross_val_results.std())\n         )\n         \n    ","b180aeb6":"model_names","fc35b6ac":"#Visualisation - Algorithm Compare\n\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(model_results)\nax.set_xticklabels(model_names)\nplt.show()","7429d0b2":"#Instantiating SVC Model\nsvc = SVC()\n\n#Instantiating LDA Model\nlda = LinearDiscriminantAnalysis()","d79f37bc":"#Training the model\nsvc.fit(X_train, y_train)  #SVC \nlda.fit(X_train, y_train) #LDA","e18d5768":"#Converting the X_test to DataFrame\ntest_df = pd.DataFrame(X_test,columns=features)","4ee847c3":"test_df.head()","cbc0068c":"# Making Predictions\npred_svc = svc.predict(X_test)\npred_lda = lda.predict(X_test)\n\n#Appending the predictions to the test - dataset\ntest_df['svc_prediction'] = pred_svc\ntest_df['lda_prediction'] = pred_lda","1b923712":"# -- Calculating Metrics\nprint(\"Accuracy Score - SVC Model: \",'{:.2%}'.format(accuracy_score(y_test,pred_svc)) )\nprint(\"Accuracy Score - LDA Model: \",'{:.2%}'.format(accuracy_score(y_test,pred_lda)) )","f11a8437":"test_df.head(15)","34ad195b":"**Loading Data**","15e25191":"**Importing Generic Libraries**","320adbb1":"**Model Creation & Evaluation**","07fb4ab2":"**Feature Selection, Scaling & Dataset Split**","4861e1eb":"**Iris Dataset - Machine Learning Algorithm Compare **\n\nIn this notebook I have tried to compare some classification algorithms in an easy way to make predictions.","6864b403":"As you can observe, LDA & SVM Models gives us the highest accuracy. Using these two models to make the predictions and calculating the metrics","99f98dc1":"**Data Exploration**","a30521d8":"**Data Visualisation**","ccc40bf6":"**Model Predictions & Metrics**"}}