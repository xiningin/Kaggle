{"cell_type":{"672f2aa0":"code","8b1e6685":"code","219e511e":"code","85fb2fcd":"code","e8634de1":"code","079ce735":"code","60c10f5c":"code","859dcfa4":"code","ea127ebd":"code","73fe1502":"code","c5e8f44d":"code","bf5dc23b":"code","cc58824b":"code","17bae30f":"code","ce4b9f07":"code","b4c69344":"code","949dadc7":"code","6aadb8de":"code","afd4d886":"code","fb69f1fb":"code","f7fab401":"code","703747e3":"code","8afb8cd5":"code","a0c0c183":"code","f82dbab4":"code","0d45c99d":"code","452e0242":"code","b16e4ed5":"code","e6bc1f6d":"code","80f491bd":"markdown","e8a592e4":"markdown","d8e0b21c":"markdown","b6c5dd5f":"markdown","90595eec":"markdown","07d2454c":"markdown","25e8abed":"markdown","b774b94c":"markdown"},"source":{"672f2aa0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b1e6685":"os.chdir('\/kaggle\/input\/buildingdatagenomeproject2')\nos.listdir()","219e511e":"weather = pd.read_csv('weather.csv')\nprint(weather.shape)\nweather.head()","85fb2fcd":"weather.dtypes","e8634de1":"weather.info()","079ce735":"weather['timestamp'] = weather['timestamp'].astype('datetime64')","60c10f5c":"weather.dtypes","859dcfa4":"weather.site_id.unique()","ea127ebd":"weather[weather.site_id == 'Panther'].head(3)","73fe1502":"weather[weather.site_id == 'Panther'].tail(3)","c5e8f44d":"weather[weather.site_id == 'Robin'].head(3)","bf5dc23b":"weather[weather.site_id == 'Robin'].tail(3)","cc58824b":"import missingno as msno\nmsno.matrix(weather);","17bae30f":"weather = weather.drop(['cloudCoverage', 'precipDepth6HR'], axis=1)\nweather.head()","ce4b9f07":"clean_weather = weather[weather.site_id == 'Panther'].drop('site_id', axis=1)\nclean_weather.head()","b4c69344":"clean_weather = clean_weather.rename(columns={\"airTemperature\": \"Panther_airTemperature\", \"dewTemperature\": \"Panther_dewTemperature\",\n                                              \"precipDepth1HR\": \"Panther_precipDepth1HR\", \"seaLvlPressure\": \"Panther_seaLvlPressure\",\n                                              \"windDirection\": \"Panther_windDirection\", \"windSpeed\": \"Panther_windSpeed\"})\nclean_weather.head()","949dadc7":"clean_weather.shape","6aadb8de":"sites_df = weather[weather.site_id != 'Panther']\nsites_df.head()","afd4d886":"sites = sites_df.site_id.unique()\n\nfor site in sites:\n    site_weather = sites_df[sites_df.site_id == site]\n    site_weather = site_weather.drop('site_id', axis=1)\n    site_weather = site_weather.rename(columns={\"airTemperature\": site+\"_airTemperature\", \"dewTemperature\": site+\"_dewTemperature\",\n                                                \"precipDepth1HR\": site+\"_precipDepth1HR\", \"seaLvlPressure\": site+\"_seaLvlPressure\",\n                                                \"windDirection\": site+\"_windDirection\", \"windSpeed\": site+\"_windSpeed\"})\n    clean_weather = pd.merge(left=clean_weather, right=site_weather, how='left', left_on='timestamp', right_on='timestamp')\n\nclean_weather.head()","fb69f1fb":"clean_weather.shape","f7fab401":"msno.matrix(clean_weather);","703747e3":"clean_weather.isnull().sum().sort_values(ascending=False).head(10)","8afb8cd5":"drop_cols = ['Robin_precipDepth1HR', 'Mouse_precipDepth1HR', 'Robin_precipDepth1HR', 'Lamb_precipDepth1HR', 'Lamb_seaLvlPressure',\n             'Wolf_precipDepth1HR', 'Shrew_precipDepth1HR', 'Crow_precipDepth1HR', 'Moose_precipDepth1HR',\n             'Cockatoo_precipDepth1HR']\nclean_weather = clean_weather.drop(drop_cols, axis=1)\nclean_weather.shape","a0c0c183":"clean_weather.isnull().sum().sort_values(ascending=False).head(10)","f82dbab4":"clean_weather = clean_weather.interpolate(method=\"slinear\")\nclean_weather.isnull().sum().sort_values(ascending=False).head(10)","0d45c99d":"msno.matrix(clean_weather);","452e0242":"clean_weather = clean_weather.fillna(method='ffill')\nclean_weather.isnull().sum().sort_values(ascending=False).head(10)","b16e4ed5":"clean_weather = clean_weather.fillna(method='bfill')\nclean_weather.isnull().sum().sort_values(ascending=False).head(10)","e6bc1f6d":"clean_weather.to_csv('\/kaggle\/working\/weather_cleaned.csv')","80f491bd":"### getting rid of columns with too little info\ndrop anything with >50% null values","e8a592e4":"# Handling Null Values","d8e0b21c":"# Fixing the time series data\nThe timestamps go from 2016-01-01 00:00:00 to 2017-12-31 23:00:00 and then restart for each site","b6c5dd5f":"### Filling in nulls","90595eec":"Time stamp is an object and it would make more sense as a datetime","07d2454c":"Initial look at missing values","25e8abed":"# Initial look at the data","b774b94c":"# EDA"}}