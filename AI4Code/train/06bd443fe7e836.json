{"cell_type":{"e19305bf":"code","b9bd505a":"code","b66229fe":"code","c09c9199":"code","b481a30b":"code","f6d53ddb":"code","9a897480":"code","e1df0751":"code","d4887288":"code","c19b65b4":"code","d65a440b":"markdown","2ae070da":"markdown","6917ab49":"markdown"},"source":{"e19305bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport spacy\nimport json\n\n# Any results you write to the current directory are saved as output.","b9bd505a":"data = {\n    \"formatVersion\" : 1,\n    \"passTypeIdentifier\" : \"pass.com.example.boarding-pass\",\n    \"description\" : \"Example Boarding Pass\",\n    \"teamIdentifier\": \"Example\",\n    \"organizationName\": \"Example\",\n    \"serialNumber\" : \"123456\",\n    \"foregroundColor\": \"#866B23\",\n    \"backgroundColor\": \"#FFD248\",\n    \"boardingPass\" : {\n        \"primaryFields\" : [\n            {\n                \"key\" : \"origin\",\n                \"label\" : \"Atlanta\",\n                \"value\" : \"ATL\"\n            },\n            {\n                \"key\" : \"destination\",\n                \"label\" : \"Johannesburg\",\n                \"value\" : \"JNB\"\n            }\n        ],\n        \"secondaryFields\" : [\n            {\n                \"key\" : \"boarding-gate\",\n                \"label\" : \"Gate\",\n                \"value\" : \"F12\"\n            }\n        ],\n        \"auxiliaryFields\" : [\n            {\n                \"key\" : \"seat\",\n                \"label\" : \"Seat\",\n                \"value\" : \"7A\"\n            },\n            {\n                \"key\" : \"passenger-name\",\n                \"label\" : \"Passenger\",\n                \"value\" : \"Honey Badger\"\n            }\n        ],\n        \"transitType\" : \"PKTransitTypeAir\",\n        \"barcode\" : {\n            \"message\" : \"DL123\",\n            \"format\" : \"PKBarcodeFormatQR\",\n            \"messageEncoding\" : \"iso-8859-1\"\n        },\n        \"backFields\" : [\n            {\n                \"key\" : \"terms\",\n                \"label\" : \"Terms and Conditions\",\n                \"value\" : \"Valid for date of travel only\"\n            }\n        ]\n    }\n}","b66229fe":"#data below is a string in json format. We have to convert this to json object\ndata","c09c9199":"#This will dump the data to json format\nser_data = json.dumps(data)","b481a30b":"#This loads the json data so we can access the keys to get the values\njson_data = json.loads(ser_data)","f6d53ddb":"#We just need the fields in boarding pass\njson_data['boardingPass']","9a897480":"boarding_pass = []\nboarding_pass_fields = {}\n#There are multiple primary fields. So we will loop them. We will fetch From and To from this section\nprimary_fields = json_data['boardingPass']['primaryFields']\nfor item in primary_fields:\n    #Remember this is almost the same format we had in that data\n    if item['key'] in ['origin', 'arrival', 'arr', 'From', 'Source']:\n        boarding_pass_fields['origin_place'] = item['label']\n        boarding_pass_fields['origin_code'] = item['value']\n    elif item['key'] in ['destination', 'dest', 'To']:\n        boarding_pass_fields['destination_place'] = item['label']\n        boarding_pass_fields['destination_code'] = item['value']\n\n#Auxilary fields. We will fetch passenger name from this section\naux_fields = json_data['boardingPass']['auxiliaryFields']\nfor item in aux_fields:\n    if item['key'] in ['passenger-name']:\n        boarding_pass_fields['Passenger'] = item['value']\nboarding_pass.append(boarding_pass_fields)","e1df0751":"#Likewise you can keep adding data and send from JSON. I will pass this to spacy to identify the entities of these\nboarding_pass","d4887288":"# Load English tokenizer, tagger, parser, NER and word vectors\nnlp = spacy.load('en_core_web_sm')","c19b65b4":"for item in boarding_pass:\n    for key in list(item.keys()):\n        if key in ['destination_place', 'origin_place', 'Passenger']:\n            doc = nlp(item[key])\n            for entity in doc.ents:\n                print(entity.text, entity.label_)","d65a440b":"# Time for spaCy\n\n## Core Features of SpaCy\n\n**Tokenization:**\tSegmenting text into words, punctuations marks etc.\n\n**Part-of-speech(POS) Tagging:**\tAssigning word types to tokens, like verb or noun.\n\n**Dependency Parsing:**\tAssigning syntactic dependency labels, describing the relations between individual tokens, like subject or object.\n\n**Lemmatization:**\tAssigning the base forms of words. For example, the lemma of \u201cwas\u201d is \u201cbe\u201d, and the lemma of \u201crats\u201d is \u201crat\u201d.\n\n**Sentence Boundary Detection(SBD):**\tFinding and segmenting individual sentences.\n\n**Named Entity Recognition(NER):**\tLabelling named \u201creal-world\u201d objects, like persons, companies or locations.\n\n**Similarity:**\tComparing words, text spans and documents and how similar they are to each other.\n\n**Text Classification:**\tAssigning categories or labels to a whole document, or parts of a document.\n\n**Rule-based Matching:**\tFinding sequences of tokens based on their texts and linguistic annotations, similar to regular expressions.\n\n**Training:**\tUpdating and improving a statistical model\u2019s predictions.\n\n**Serialization:**\tSaving objects to files or byte strings.","2ae070da":"# Let's take the below boarding pass as an example\n\nI have not taken the boarding pass with bounding boxes but a sample and will explain how the information extraction is done.","6917ab49":"This dataset is just to show you how to get data from json and to apply spaCy Named Entity Recognition to boarding pass. I will share another kernel for training in spacy for medical records which will include text pre-processing as well. All the best..."}}