{"cell_type":{"498758db":"code","09ee7842":"code","295cda7f":"code","665df6b1":"code","5ccbf8aa":"code","7e7d82b3":"code","d5c3a8b1":"code","11515555":"code","8a7dfc74":"code","e71507e8":"code","0c372c8c":"code","3d577493":"code","622b9211":"code","bcc62f3d":"code","132f3c78":"code","235ec0bf":"code","92302f4c":"code","90522218":"code","61f2b637":"code","c4d82dd5":"code","a96fc53b":"code","2e7f2df7":"code","283a9f87":"code","fce2c879":"code","94c55416":"code","bb7f4819":"code","2127cf90":"code","49195f7f":"code","b90fdbee":"code","23f0b48b":"code","07c607fd":"code","3bb94f29":"code","4b1a3ee9":"code","fcf8dad4":"code","7fcfb915":"code","2b366501":"code","eecc90a5":"code","bda67629":"code","2bb67e62":"code","c41a1206":"code","78c9d34d":"code","ce9d60c6":"code","1653294e":"code","d4ff5d8f":"code","67995e4b":"code","26b29447":"code","439797f1":"code","349d73f7":"code","147d800f":"code","c6a44c17":"code","9dde2f20":"code","ec955e3b":"code","63a4e6a3":"code","3b973375":"code","02c414a1":"code","4fb6cf0b":"code","99e59e64":"code","b4dbd77d":"code","e96388db":"code","b6657909":"code","8dfc08d1":"code","2213b9a2":"code","64da410a":"code","8f5a9ecb":"code","85b92772":"code","01fbe27b":"code","d68f50bd":"code","b0794238":"code","38b442eb":"code","426508b9":"code","703306c2":"code","e816e48b":"markdown","2e35b99b":"markdown","68fb3b93":"markdown","b879ba40":"markdown","d42d2f87":"markdown","d4ab40c6":"markdown","73427fe7":"markdown","90ba84ac":"markdown","1c08b767":"markdown","9c39b67d":"markdown","4d47dc39":"markdown","48c6f3e6":"markdown","b6cea1b4":"markdown","99f7c829":"markdown","96c855a7":"markdown","6839f285":"markdown","0eecb073":"markdown","f0c87dd8":"markdown","a77f0eb1":"markdown","c0f4004d":"markdown","7a3294d7":"markdown","600ecc6b":"markdown","9f97b4a5":"markdown","acb0dc24":"markdown","921cb631":"markdown"},"source":{"498758db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","09ee7842":"file = open('\/kaggle\/input\/datalab3-samuel-mathieu\/files\/ch03\/adult.data', 'r')","295cda7f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","665df6b1":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])\n","5ccbf8aa":"print (data[1:2])\n","7e7d82b3":"import pandas as pd\n\ndf = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","d5c3a8b1":"df.shape","11515555":"df.tail()","8a7dfc74":"counts = df.groupby('country').size()\n\nprint (counts) ","e71507e8":"counts = df.groupby('age').size() # grouping by age\nprint (max(counts))\nprint (counts[0:20])","0c372c8c":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\nml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","3d577493":"fm =df[(df.sex == 'Female')]\nfm.shape\n","622b9211":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","bcc62f3d":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )\n","132f3c78":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')\n","235ec0bf":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","92302f4c":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)\n","90522218":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","61f2b637":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","c4d82dd5":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","a96fc53b":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)\n","2e7f2df7":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist(density=0, histtype='stepfilled', bins=20)","283a9f87":"fm_age=fm['age']\nfm_age.hist(density=0, histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","fce2c879":"import seaborn as sns\nfm_age.hist(density=0, histtype='stepfilled', alpha=0.5, bins=20)   # default number of bins = 10\nml_age.hist(density=0, histtype='stepfilled', alpha=0.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","94c55416":"ml_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","bb7f4819":"fm_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","2127cf90":"ml_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","49195f7f":"fm_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","b90fdbee":"ml_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","23f0b48b":"ml_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","07c607fd":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())","3bb94f29":"df['age'].median()","4b1a3ee9":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])","fcf8dad4":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","7fcfb915":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","2b366501":"ml1_age=ml1['age']\nfm1_age=fm1['age']","eecc90a5":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","bda67629":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","2bb67e62":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","c41a1206":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","78c9d34d":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","ce9d60c6":"import numpy as np\n\ncountx,divisionx = np.histogram(ml2_age, normed=True)\ncounty,divisiony = np.histogram(fm2_age, normed=True)","1653294e":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","d4ff5d8f":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.)\n","67995e4b":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","26b29447":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","439797f1":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']> df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']> df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","349d73f7":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","147d800f":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","c6a44c17":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","9dde2f20":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","ec955e3b":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)\n","63a4e6a3":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","3b973375":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","02c414a1":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","4fb6cf0b":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","99e59e64":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, density=True, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","b4dbd77d":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","e96388db":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","b6657909":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","8dfc08d1":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","2213b9a2":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])\n","64da410a":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","8f5a9ecb":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","85b92772":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))\n","01fbe27b":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","d68f50bd":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])","b0794238":"plt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","38b442eb":"plt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","426508b9":"plt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.gcf().set_size_inches((10,10))","703306c2":"#exercice\n\n#moyenne\nMEAN=np.mean(X,axis=1)\nprint('les moyennes sont',MEAN,'\\n')\n\n#Variance\nVAR=np.var(X,axis=1)\nprint('les variances sont',VAR,'\\n')\n\n#covariance\nCOV=np.cov(X)\nprint('la matrice de covariance est',COV,'\\n')\n\n#Pearson's correlation\ndef PCorr(Y):\n    return np.cov(Y) \/ np.prod([np.std(V) for V in Y])\nPEAR=PCorr(X)\nprint('la matrice de Pearson est',PEAR,'\\n')\n\n\n#spearman rank\n\n\n\n   \n    ","e816e48b":"- 2 Describe an explain the result.\n\nOn convertit la matrice data en DataFrame afin de pouvoir lui appliquer les fonctions de la librairie Pandas ou Nunpy et optimiser le traitement de ses donn\u00e9es.\ndf.head() affiche les 5 premieres lignes","2e35b99b":"- 9. Describe an explain the result.\n\n\nCette commande nous renvoie la moyenne, la variance et l'\u00e9cart type de l'age des hommes et des femmes.","68fb3b93":"- 22 What does the figure shows?\n\n","b879ba40":"- 14. Show the graphics and an explain the result\n\nCette fois-ci c'est la fonction de densit\u00e9 de la loi de probabilit\u00e9 portant sur l'age des hommes qui est renvoy\u00e9. La forme de l'histogramme est logiquement \u00e9xactement la m\u00eame que celui portant sur la distribution num\u00e9rique vu plus haut. L'interpretation est cependant diff\u00e9rente. Chaque bin renvoie la probabilit\u00e9 d'obtenir un de ses participants parmis l'ensemble des participants disponibles, ici les hommes.","d42d2f87":"Idem pour les femmes,les 20-30 ans sont les plus repr\u00e9sent\u00e9es.","d4ab40c6":"- Exercise: Obtain for the Anscombe's quartet [2] given in the figures bellow, the different estimators (mean, variance, covariance for each pair, Pearson's correlation and Spearman's rank correlation.","73427fe7":"*","90ba84ac":"- 13. Show the graphics and an explain the result.\n\nLa diff\u00e9rence de \"bins\" entre les 2 histogrammes permet d'obtenir une \u00e9chelle diff\u00e9rente (celui avec le bins le plus \u00e9lev\u00e9 vois m\u00e9caniquement la hauteur de ses batons diminuer)\nAinsi les femmes sont d\u00e9crites avec 20 bins et les hommes avec 10. On obtient une repr\u00e9sentation plus pr\u00e9cise que pr\u00e9c\u00e9demment de la distribution d'\u00e2ge chez les femmes et inversement moins pr\u00e9cise pour les hommes.\nGlobalement les 30 - 45 ans sont les plus repr\u00e9sent\u00e9s.","1c08b767":"- 16. Show the graphics and an explain the result.\n\nOn obtient la fonction de r\u00e9partition (fonction de distribution cumulative) pour la variable correspondant \u00e0 l'age des hommes.","9c39b67d":"- 21 Explain the result\n\nUn coefficient positif indique une distribution d\u00e9cal\u00e9e \u00e0 gauche de la m\u00e9diane, et donc une queue de distribution \u00e9tal\u00e9e vers la droite.\nLe co\u00e9fficient est faible dans les 2 cas, on d\u00e9duit donc que l'assym\u00e9trie est faible, mais elle est plus marqu\u00e9e chez les femmes (plus de femmes \"jeunes\" qu'\"ag\u00e9es\" dans la selection. On retrouve visuellement cette interpr\u00e9tation grace aux histogrammes des fr\u00e9quences d'apparitions trac\u00e9s plus haut. (Question 10)","4d47dc39":"- 3 Describe and explain the result.\n\nLe DataFrame comporte 32561 lignes et 15 colonnes;","48c6f3e6":"- 4 Describe and explain the result. Compare with the previous one.\n\nCette fois-ci, la commande nous renvoie les 5 dernieres lignes.","b6cea1b4":"- 7 Describe an explain the result.\n\nParmis la liste de personnes \u00e0 notre disposition\n24 % des personnes gagnent plus que 50k\/an\n30% des hommes gagnent plus que 50k\/an\n10% des femmes gagnent plus que 50k\/an","99f7c829":"- 18. Show the graphics and an explain the result.\n\nSuperposition des histogrammes repr\u00e9sentant les lois de densit\u00e9 probabilit\u00e9 pour la variable \"age\" pour les hommes et pour les femmes.\n(femmes en rouge clair et hommes en rouge fonc\u00e9)","96c855a7":"-  1 What is the obtained result? What did you ask for in the previous command? Explain.\n\nIl s'agit d'un fichier comprenant 15 colonnes, on cherche \u00e0 trier et ordonner les valeurs ainsi que leur type. Ainsi la fonction chr_int permet pout toutes les colonnes d'entiers de convertir l'entier sous format str dans le fichier \"file\" en type \"int\" dans la matrice data cr\u00e9e pour cette occasion afin de pouvoir appliquer des fonctions statistiques pour la future manipulation des donn\u00e9es. Le reste des colonnes comportant des donn\u00e9es de nature intrinseque \"str\" reste inchang\u00e9.","6839f285":"- 10 Show the graphics and explain the result.\n\nOn obtient un histogramme de la r\u00e9partition des ages pour les hommes. bins=20 signifie que l'on repr\u00e9sente celui-ci avec 20 \"batons\"\nOn observe ainsi que les 30 - 40 ans sont les plus repr\u00e9sent\u00e9s dans la selection.","0eecb073":"- 6 What is the age of the most represented people?\n\n36 ans","f0c87dd8":"- 19. Show the graphics and an explain the result.\n\nSuperposition des histogrammes repr\u00e9sentant les fonctions de r\u00e9partition pour la variable \"age\" pour les hommes et pour les femmes.\n(femmes en rouge et hommes en bleu)","a77f0eb1":"- 9. Describe and explain the result.\n\n\nCette commande nous renvoie la moyenne, la variance et l'\u00e9cart type en heures du temps de travail des hommes et des femmes.","c0f4004d":"- 5 How many items are there for USA? and for Mexico?\n\n29170 pour les USA et 643 pour Mexico\n\n","7a3294d7":"- 17. Show the graphics and an explain the result.\n\nIdem, mais appliqu\u00e9 aux femmes.","600ecc6b":"- 15. Show the graphics and an explain the result.\n\nIdem mais avec les femmes","9f97b4a5":" - 8 Describe an explain the result.\n \n Age moyen des hommes: 39,4 ans\n Age moyen des femmes; 36,8 ans \n Coh\u00e9rent avec l'age le plus repr\u00e9sent\u00e9 qui est de 36 ans.\n\n","acb0dc24":"-  10. Describe and explain the result.\n\nLa m\u00e9diante du temps de travail par semaine pour les hommes et les femmes est identique et \u00e9gale \u00e0 40h par semaine.\n\n","921cb631":"- 20. Explain the result.\n\nEn moyenne,les femmes sont moins ag\u00e9es de 2,57 ann\u00e9es que les hommes dans notre s\u00e9lection"}}