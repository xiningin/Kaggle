{"cell_type":{"af379846":"code","2185e5a3":"code","580398f9":"code","52082bcf":"code","77d69d30":"code","ea7310af":"code","14c86814":"code","3a57a391":"code","ed165630":"code","45d6cdfa":"code","a01cd6fc":"code","dbdaa2d4":"code","d6e94416":"code","ce76541c":"code","71d29b61":"code","be3fe808":"code","ef49bccd":"code","9ff762e8":"code","22d850e9":"code","a477077f":"markdown","2c674857":"markdown","ecf1a131":"markdown","4bf5cc88":"markdown","4240d69e":"markdown","6af2bd33":"markdown","cf213a02":"markdown","2a2e2e56":"markdown"},"source":{"af379846":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2185e5a3":"dataset=pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')\ndataset.head()","580398f9":"print(\"null values in the dataset= \",dataset.isnull().sum().sum())","52082bcf":"dataset.info()","77d69d30":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.countplot(dataset.Class)\nplt.savefig(\"class distributions\")\n\nprint(dataset['Class'].value_counts())","ea7310af":"fraud_data=dataset[dataset['Class']==1]\nnon_fraud_data=dataset[dataset['Class']==0]\nnon_fraud_data=non_fraud_data.sample(n=750,random_state=18)\n","14c86814":"#shuffling the data randomly for better data training\nfrom sklearn.utils import shuffle \ndata=pd.concat([fraud_data,non_fraud_data],ignore_index=True)\ndata=shuffle(data)\n","3a57a391":"sns.countplot(data.Class)\nplt.savefig(\"final class distribution\")","ed165630":"data","45d6cdfa":"from sklearn.preprocessing import StandardScaler\nx_data=data.drop(labels=\"Class\",axis=1)\ny_data=data.Class\n\nscaler=StandardScaler()\nscaler.fit(x_data)\nx_data=scaler.transform(x_data)\n","a01cd6fc":"from sklearn.model_selection import train_test_split as tts\nx_train,x_test,y_train,y_test=tts(x_data,y_data,test_size=0.3,random_state=18)\nx_train=x_train.reshape(len(x_train),30,1)\nx_test=x_test.reshape(len(x_test),30,1)\n","dbdaa2d4":"print(\"x_train data shape=\",x_train.shape)\nprint(\"x_test data shape=\",x_test.shape)\nprint(\"y_train data shape=\",y_train.shape)\nprint(\"y_test data shape=\",y_test.shape)\n","d6e94416":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import models,layers","ce76541c":"model=models.Sequential()\nmodel.add(layers.Conv1D(64,7,activation='relu',input_shape=(30,1)))\nmodel.add(layers.Conv1D(32,5,activation='relu',kernel_regularizer='l2'))\nmodel.add(layers.Dropout(0.1))\nmodel.add(layers.Conv1D(16,3,activation='relu',kernel_regularizer='l2'))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(256,activation='relu',kernel_regularizer='l2'))\nmodel.add(layers.Dense(128,activation='relu',kernel_regularizer='l2'))\nmodel.add(layers.Dropout(0.1))\nmodel.add(layers.Dense(2,activation='softmax',kernel_regularizer='l2'))\n","71d29b61":"model.summary()","be3fe808":"keras.utils.plot_model(model)","ef49bccd":"weights={0:0.3,1:0.7}\nmodel.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\n","9ff762e8":"model.fit(x_train,y_train,epochs=20,validation_split=0.2)","22d850e9":"from sklearn.metrics import accuracy_score, confusion_matrix\ny_predict=model.predict(x_test)\ny=[]\nfor i in y_predict:\n    y.append(np.argmax(i))\n\nprint(accuracy_score(y_test,y))\nconfusion_matrix(y_test,y)","a477077f":"now finding out the number of null values in the dataset","2c674857":"**now we standardising the data values so that the our ML model fit the data properly and converges to the global minimum more effectively quickly and efficiently**","ecf1a131":"**getting general imformation about the dataset**","4bf5cc88":"**creating the CNN model for training the data**","4240d69e":"**we are splitting the data into training and testing so that we are able to evaluate the model from test data which is totally unseen to the model**","6af2bd33":"**even after sampling the data we can see that the ratio of non fraud to fraud is 1.5 so to handle we will be assigning class weights t each of the classes. these class weights specify the mdoel how much weightage must be given to the weights of each class . this helps in better training**","cf213a02":"**displaying the resultant class distribution**","2a2e2e56":"**from the above plot and value counts we can see that the dataset is highly imbalanced !! Due to the large imbalance we will not be using SMOTE method of handling imbalance rather we just sample 750 datapoint from the non fraud dataset randomly because in this problem we are ore concerned about predicting the fraud cases rathre than the non fraud cases**"}}