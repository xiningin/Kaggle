{"cell_type":{"7985c657":"code","5bdec356":"code","8989bcfd":"code","8ec1e2a2":"code","6fce60cf":"code","26aa59e7":"code","3f3e5e90":"code","fcdf2de9":"code","49b0bd98":"code","c880d7d0":"code","3d87abfd":"code","933afc1e":"code","4704829c":"code","fdfe59b0":"code","56078f97":"code","6c59ca6c":"code","cdfff86a":"code","19aee95b":"code","e1a9b25c":"code","9d0ac19e":"code","b05991b7":"code","8f2b6690":"code","1cc7fe5d":"code","fe670c63":"code","ba2b6bf0":"code","6cbd9365":"markdown","4de25104":"markdown","8b47a7dd":"markdown","74559ef8":"markdown","2f93cc76":"markdown","de7e0370":"markdown","427852f4":"markdown","de49c9bd":"markdown","c4006384":"markdown","d6fa983a":"markdown","acdce6b7":"markdown","51b36790":"markdown","f4b5d733":"markdown","d92200d8":"markdown","c51504f6":"markdown","d9dd68aa":"markdown","2f286bbf":"markdown","4bf1d7dd":"markdown","0aaa8213":"markdown","0fff1dfb":"markdown","b94e587c":"markdown","c7a46507":"markdown","99faaf1d":"markdown","9d960ef3":"markdown","27f94268":"markdown","346a07c4":"markdown","48c414aa":"markdown","50664259":"markdown","860730dd":"markdown","2117a009":"markdown","abbdd55f":"markdown","2bf3e85e":"markdown","1782722f":"markdown","7dc7d602":"markdown","7d78f101":"markdown"},"source":{"7985c657":"# This Python 3 environment comes with many helpful analytics libraries installed\n# Loading datasets required for analysis\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(style=\"white\", color_codes=True)\nimport warnings # current version of seaborn generates a bunch of warnings that we'll ignore\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/\"))","5bdec356":"full_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head()","8989bcfd":"# Defining COVID-19 cases as per classifications \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Defining Active Case: Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# Renaming Mainland china as China in the data table\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[cases] = full_table[cases].fillna(0)\n\n# cases in the ships\nship = full_table[full_table['Province\/State'].str.contains('Grand Princess')|full_table['Country\/Region'].str.contains('Cruise Ship')]\n\n# china and the row\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\n# latest\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()","8ec1e2a2":"temp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()","6fce60cf":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","26aa59e7":"temp_f = full_latest_grouped.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Reds')","3f3e5e90":"temp_f.head(10)","fcdf2de9":"import plotly as py\nimport plotly.graph_objects as go\nimport pandas as pd\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)    #THIS LINE IS MOST IMPORTANT AS THIS WILL DISPLAY PLOT ON \n#NOTEBOOK WHILE KERNEL IS RUNNING\n\n#Time Series plot for knwoing the spread\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n                x=full_table.Date,\n                y=full_table['Confirmed'],\n                name=\"Confirmed\",\n                line_color='deepskyblue',\n                opacity=0.8))\n\nfig.add_trace(go.Scatter(\n                x=full_table.Date,\n                y=full_table['Recovered'],\n                name=\"Recovered\",\n                line_color='dimgray',\n                opacity=0.8))\nfig.update_layout(title_text='Time Series with Rangeslider',\n                  xaxis_rangeslider_visible=True)\npy.offline.iplot(fig)","49b0bd98":"import plotly.offline as py\npy.init_notebook_mode(connected=True)\n\n# Calculating the count of confirmed cases by country\n\ncountries = np.unique(temp_f['Country\/Region'])\nmean_conf = []\nfor country in countries:\n    mean_conf.append(temp_f[temp_f['Country\/Region'] == country]['Confirmed'].sum())\n    \n# Building the dataframe\n\n    data = [ dict(\n        type = 'choropleth',\n        locations = countries,\n        z = mean_conf,\n        locationmode = 'country names',\n        text = countries,\n        marker = dict(\n            line = dict(color = 'rgb(0,0,0)', width = 1)),\n            colorbar = dict(autotick = True, tickprefix = '', \n            title = 'Count')\n            )\n       ]\n    \n# Building the visual\n\n    layout = dict(\n    title = 'COVID-19 Confirmed Cases',\n    geo = dict(\n        showframe = False,\n        showocean = True,\n        oceancolor = 'rgb(0,255,255)',\n        projection = dict(\n        type = 'orthographic',\n            rotation = dict(\n                    lon = 60,\n                    lat = 10),\n        ),\n        lonaxis =  dict(\n                showgrid = True,\n                gridcolor = 'rgb(102, 102, 102)'\n            ),\n        lataxis = dict(\n                showgrid = True,\n                gridcolor = 'rgb(102, 102, 102)'\n                )\n            ),\n        )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, validate=False, filename='worldmap')","c880d7d0":"import pandas as pd\nglobal_temp_country = pd.read_csv(\"..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCountry.csv\")","3d87abfd":"global_temp_country.head()","933afc1e":"import plotly.offline as py\npy.init_notebook_mode(connected=True)\n\n## Removing the duplicates\n\nglobal_temp_country_clear = global_temp_country[~global_temp_country['Country'].isin(\n    ['Denmark', 'Antarctica', 'France', 'Europe', 'Netherlands',\n     'United Kingdom', 'Africa', 'South America'])]\n\nglobal_temp_country_clear = global_temp_country_clear.replace(\n   ['Denmark (Europe)', 'France (Europe)', 'Netherlands (Europe)', 'United Kingdom (Europe)'],\n   ['Denmark', 'France', 'Netherlands', 'United Kingdom'])\n\n#Calculating average temperature by country\n\ncountries = np.unique(global_temp_country_clear['Country'])\nmean_temp = []\nfor country in countries:\n    mean_temp.append(global_temp_country_clear[global_temp_country_clear['Country'] == \n                                               country]['AverageTemperature'].mean())\n\n# Building the data frame\n    \ndata = [ dict(\n        type = 'choropleth',\n        locations = countries,\n        z = mean_temp,\n        locationmode = 'country names',\n        text = countries,\n        marker = dict(\n            line = dict(color = 'rgb(0,0,0)', width = 1)),\n            colorbar = dict(autotick = True, tickprefix = '', \n            title = '# Average\\nTemperature,\\n\u00b0C')\n            )\n       ]\n\n# Building the visual\n\nlayout = dict(\n    title = 'GLOBAL AVERAGE LAND TEMPERATURES',\n    geo = dict(\n        showframe = False,\n        showocean = True,\n        oceancolor = 'rgb(0,255,255)',\n        projection = dict(\n        type = 'orthographic',\n            rotation = dict(\n                    lon = 60,\n                    lat = 10),\n        ),\n        lonaxis =  dict(\n                showgrid = True,\n                gridcolor = 'rgb(102, 102, 102)'\n            ),\n        lataxis = dict(\n                showgrid = True,\n                gridcolor = 'rgb(102, 102, 102)'\n                )\n            ),\n        )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, validate=False, filename='worldmap')","4704829c":"import plotly.express as px\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nformated_gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Confirmed'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Progression of spread of COVID-19')\nfig.update(layout_coloraxis_showscale=False)\npy.offline.iplot(fig)","fdfe59b0":"import warnings\n\nfrom scipy.optimize import curve_fit\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom tqdm.notebook import tqdm","56078f97":"plt.style.use('ggplot')\nplt.rcParams['figure.figsize'] = [20, 8]\n\nwarnings.filterwarnings('ignore')","6c59ca6c":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/train.csv',\n    parse_dates=['Date']).drop(['Lat', 'Long'], axis=1)\ntest = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/test.csv',\n    parse_dates=['Date']).drop(['Lat', 'Long'], axis=1)\nsubmission = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/submission.csv',\n    index_col='ForecastId')","cdfff86a":"train.iloc[6425,4] = 0","19aee95b":"# Susceptible equation\ndef fa(N, a, b, beta):\n    fa = -beta*a*b\n    return fa\n\n# Infected equation\ndef fb(N, a, b, beta, gamma):\n    fb = beta*a*b - gamma*b\n    return fb\n\n# Recovered\/deceased equation\ndef fc(N, b, gamma):\n    fc = gamma*b\n    return fc","e1a9b25c":"# Runge-Kutta method of 4rth order for 3 dimensions (susceptible a, infected b and recovered r)\ndef rK4(N, a, b, c, fa, fb, fc, beta, gamma, hs):\n    a1 = fa(N, a, b, beta)*hs\n    b1 = fb(N, a, b, beta, gamma)*hs\n    c1 = fc(N, b, gamma)*hs\n    ak = a + a1*0.5\n    bk = b + b1*0.5\n    ck = c + c1*0.5\n    a2 = fa(N, ak, bk, beta)*hs\n    b2 = fb(N, ak, bk, beta, gamma)*hs\n    c2 = fc(N, bk, gamma)*hs\n    ak = a + a2*0.5\n    bk = b + b2*0.5\n    ck = c + c2*0.5\n    a3 = fa(N, ak, bk, beta)*hs\n    b3 = fb(N, ak, bk, beta, gamma)*hs\n    c3 = fc(N, bk, gamma)*hs\n    ak = a + a3\n    bk = b + b3\n    ck = c + c3\n    a4 = fa(N, ak, bk, beta)*hs\n    b4 = fb(N, ak, bk, beta, gamma)*hs\n    c4 = fc(N, bk, gamma)*hs\n    a = a + (a1 + 2*(a2 + a3) + a4)\/6\n    b = b + (b1 + 2*(b2 + b3) + b4)\/6\n    c = c + (c1 + 2*(c2 + c3) + c4)\/6\n    return a, b, c","9d0ac19e":"def SIR(N, b0, beta, gamma, hs):\n    \n    \"\"\"\n    N = total number of population\n    beta = transition rate S->I\n    gamma = transition rate I->R\n    k =  denotes the constant degree distribution of the network (average value for networks in which \n    the probability of finding a node with a different connectivity decays exponentially fast\n    hs = jump step of the numerical integration\n    \"\"\"\n    \n    # Initial condition\n    a = float(N-1)\/N -b0\n    b = float(1)\/N +b0\n    c = 0.\n\n    sus, inf, rec= [],[],[]\n    for i in range(10000): # Run for a certain number of time-steps\n        sus.append(a)\n        inf.append(b)\n        rec.append(c)\n        a,b,c = rK4(N, a, b, c, fa, fb, fc, beta, gamma, hs)\n\n    return sus, inf, rec","b05991b7":" # Parameters of the model\nN = 7800*(10**6)\nb0 = 0\nbeta = 0.6 # Tranmission rate reduced considering factor\ngamma = 0.3\nhs = 0.1\n\nsus, inf, rec = SIR(N, b0, beta, gamma, hs)\n\nf = plt.figure(figsize=(8,5)) \nplt.plot(sus, 'b.', label='susceptible');\nplt.plot(inf, 'r.', label='infected');\nplt.plot(rec, 'c.', label='recovered\/deceased');\nplt.title(\"SIR model\")\nplt.xlabel(\"time\", fontsize=10);\nplt.ylabel(\"Fraction of population\", fontsize=10);\nplt.legend(loc='best')\nplt.xlim(0,1000)\nplt.savefig('SIR_example.png')\nplt.show()","8f2b6690":"def sigmoid(x, m, alpha, beta):\n    return m \/ ( 1 + np.exp(-beta * (x - alpha)))","1cc7fe5d":"def get_curve(covid, which):\n    covid['DaysPassed'] = covid['Date'].dt.dayofyear\n    curve = covid[covid[which] > 0].set_index('DaysPassed')[which]\n    if curve.index.size > 4:\n        return curve\n    \n\ndef plot_curve(curve, test, name, plot_n, popt, ax):\n    if curve is not None:\n        _ = curve.plot(ax=ax[plot_n % 5, plot_n \/\/ 5], title=name)\n        _.set_xlabel('')\n        x = np.append(curve[:-12].index.values, test['Date'].dt.dayofyear.values)\n        y = sigmoid(x, popt[0], popt[1], popt[2])\n        pd.Series(y, x).plot(ax=ax[plot_n % 5, plot_n \/\/ 5], style=':')\n    else:\n        pd.Series(0).plot(ax=ax[plot_n % 5, plot_n \/\/ 5], title=name)\n\n    \ndef predict_curve(covid, test, popt, which):\n    train_curve = get_curve(covid, which)\n    if train_curve is not None:\n        x_train = train_curve.index.values\n        y_train = train_curve.values\n        popt, _ = curve_fit(sigmoid, x_train, y_train, p0=popt, maxfev=1000000)\n        x_test = test['Date'].dt.dayofyear.values\n        y_test = sigmoid(x_test, popt[0], popt[1], popt[2])\n        test[which] = y_test\n        return test.set_index('ForecastId')[which].astype('int'), popt\n    return None, None\n\n\ndef append_predictions(train, test, popts):\n    cases_popt, fatalities_popt = popts\n    cases, cases_popt = predict_curve(train, test, cases_popt, 'ConfirmedCases')\n    if cases is not None:\n        CASES_ALL.append(cases)\n    fatalities, fatalities_popt = predict_curve(train, test, fatalities_popt, 'Fatalities')\n    if fatalities is not None:\n        FATALITIES_ALL.append(fatalities)\n    return cases_popt, fatalities_popt\n   \n    \ndef known_popt(country, region):\n    known = {}\n    known['cases'] = {\n        'Hubei': [67625, 18.7, 0.24],\n        'China': [680, 13.3, 0.265],\n    }\n    known['fatalities'] = {\n        'Hubei': [3007, 23.6, 0.17]\n    }\n    if region in known['cases']:\n        cases_popt = known['cases'][region]\n    elif country in known['cases']:\n        cases_popt = known['cases'][country]\n    else:\n        cases_popt = [5000, 100, 0.2]\n        \n    if region in known['fatalities']:\n        fatalities_popt = known['fatalities'][region]\n    if country in known['fatalities']:\n        fatalities_popt = known['fatalities'][country]\n    else:\n        fatalities_popt = [100, 150, 0.25]\n    \n    return cases_popt, fatalities_popt\n    \n    \ndef main():\n    n = -1\n    for country in tqdm(train['Country\/Region'].unique()):\n        country_train = train[train['Country\/Region'] == country].copy()\n        country_test = test[test['Country\/Region'] == country].copy()\n        if not country_train['Province\/State'].isna().all():\n            for region in country_train['Province\/State'].unique():\n                region_train = country_train[country_train['Province\/State'] == region].copy()\n                region_test = country_test[country_test['Province\/State'] == region].copy()\n                cases_popt, fatalities_popt = append_predictions(region_train, region_test, known_popt(country, region))\n                if region in ['Hubei', 'Guangdong', 'Hunan', 'California', 'France', 'Netherlands']:\n                    n += 1\n                    plot_curve(get_curve(region_train, 'ConfirmedCases'), region_test, region, n, cases_popt, AX)\n                    plot_curve(get_curve(region_train, 'Fatalities'), region_test, region, n, fatalities_popt, AXX)\n        else:\n            cases_popt, fatalities_popt = append_predictions(country_train, country_test, known_popt(country, None))\n            if country in ['Italy', 'Spain', 'Mexico', 'India']:\n                n += 1\n                plot_curve(get_curve(country_train, 'ConfirmedCases'), country_test, country, n, cases_popt, AX)\n                plot_curve(get_curve(country_train, 'Fatalities'), country_test, country, n, fatalities_popt, AXX)","fe670c63":"CASES_ALL = []\nFIG, AX = plt.subplots(5, 2)\nFIG.suptitle('Confirmed Cases')\n\nFATALITIES_ALL = []\nFIGG, AXX = plt.subplots(5, 2)\nFIGG.suptitle('Fatalities')\n\nmain()\n\nFIG.subplots_adjust(hspace=0.5)\nFIGG.subplots_adjust(hspace=0.5)","ba2b6bf0":"final = pd.DataFrame(pd.concat(CASES_ALL).reindex(index=submission.index, fill_value=1))\nfinal = final.join(pd.DataFrame(pd.concat(FATALITIES_ALL).reindex(index=submission.index, fill_value=0)))\nfinal = final.where(final['Fatalities'] <= final['ConfirmedCases'], final['ConfirmedCases'] * 0.06, axis=0)\nfinal.to_csv('submission.csv')","6cbd9365":"Observations from the above\n1. The number of infected cases increases for a certain time period, and then eventually decreases given that individuals recover\/decease from the disease\n1. The susceptible fraction of population decreases as the virus is transmited, to eventually drop to the absorbent state 0\n1. The oposite happens for the recovered\/deceased case\nNotice that different initial conditions and parameter values will lead to other scenarios, feel free to play with these numbers to study the system.","4de25104":"Step 3: Creating a consolidated table , which gives the country wise total defined cases","8b47a7dd":"*Note: The mentioned insights in this notebook are as per the evolving COVID-19 datasets. They are fairly intuitive and may not be 100% accurate at this stage. Detailed statistical analysis will be done, when the dataset stabilises over a period of time.  However, correlations with important factors like temperature, relative humidity and air travel, are performed to predict the transmission rates and my personal opinion is that the insights provided in this notebook is overall in line with globally published research information. *","74559ef8":"**Visual 3 :** Planet Earth - Hot or Cold? ! - A live display of the average land temperatures of the planet","2f93cc76":"**Visual 2 :** The pandemic and the planet - A live display of how the planet is with respect to confirmed cases of COVID-19.\n\nPlease pan the globe to check out the your zone, region , country.","de7e0370":"<font size=\"4\">Section 2: Data Visualisation<\/font>\n\nIn this section, we are just going to see four self-explanatory visuals, which will substantiate the answers and insights in the next section.","427852f4":"**3.1  My insights on the above analysis**\n\n1. Temperature is a very important factor for the virus to thrive. \n1. The virus would not be be able to thrive in warmer climates or surroundings\n1. The rate of transmission now is maximum in the temperate zone of the planet, where the avg. temp is 5-10 deg C\n1. The above mentioned temp range is conducive for the virus to thrive\n1. However, the transmission is minimal in the tropical zone, where the avg. temp is > 25 deg C","de49c9bd":"The below research paper also substantiates my insights. I would quote certain excerpts, directly from this paper, in this report.\nhttps:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC3311988\/","c4006384":"**Closing comments**\n\nSo friends, keep yourself in warm and dry environments. \n\nPlease follow all safety precautions as mentioned by WHO and other health & safety authorities. \n\n**Please read the last line in the above excerpt, again and again. Summers are fast approaching !! Do not worry !**\n\nLets Stay positive and healthy !!","d6fa983a":"![SIR.png](attachment:SIR.png)","acdce6b7":"**Red rectangle (Temperate zone) is a cause of concern. Green rectangle (Tropical zone) is safer. **\nHowever, for more clarity, you can zoom and pan the actual visuals in this notebook.","51b36790":"Step 2: Preparing the data","f4b5d733":"![FIG1.png](attachment:FIG1.png)","d92200d8":"**HOT SPOT 1 :**\n1. Confirmed cases increasing steeply between 1st week of Feb to 3rd week of Feb\n1. Recovered cases increasing steeply from 4th week of March\n1. Rate of increase of confirmed cases significantly drops from March 1st week","c51504f6":"**SECTION 4.1 : PREDICTION THROUGH THE SIR MODEL ** \n\n*Below exerpts from wikipedia*\n\nThe SIR model is one of the simplest compartmental models, and many models are derivations of this basic form. The model consists of three compartments: S for the number of susceptible, I for the number of infectious, and R for the number recovered (or immune) individuals. This model is reasonably predictive for infectious diseases which are transmitted from human to human, and where recovery confers lasting resistance, such as measles, mumps and rubella.\n\n\nSpatial SIR model simulation. Each cell can infect its eight immediate neighbors.\nThese variables (S, I, and R) represent the number of people in each compartment at a particular time. To represent that the number of susceptible, infected and recovered individuals may vary over time (even if the total population size remains constant), we make the precise numbers a function of t (time): S(t), I(t) and R(t). For a specific disease in a specific population, these functions may be worked out in order to predict possible outbreaks and bring them under control.","d9dd68aa":"<font size=\"4\"> Section 3: Discussion and comments <\/font>\n\n\nI would like to keep this section short and sweet. However, i would urge the readers to pan and zoom all the visuals in the previous section to get more clarity on the following answers and insights. \n\nAlso, please revisit the HOT-SPOTs in the earlier sections for help. Apologies, if i am making it too obvious or formal !","2f286bbf":"<font size=\"4\"> Section 4: Predictive analytics <\/font>","4bf1d7dd":"**Visual 1 :** A Time-series graph of the confirmed and recovered cases of COVID-19","0aaa8213":"Step 1: Reading and understanding the data","0fff1dfb":"![FIG%202.png](attachment:FIG%202.png)","b94e587c":"**HOT SPOT 2 :** The spread is much more than in the temperate zone of the planet compared to tropical zones. \nMoreover,  drier parts of the world has lesser transmission. \nYou , can play this multiple times to get a deeper understanding","c7a46507":"Sub-step: To read and understand the data","99faaf1d":"![FIG4.png](attachment:FIG4.png)","9d960ef3":"Note: This work is highly inspired from few other kaggle kernels , github sources and other data science resources. Any traces of replications, which may appear , is purely co-incidental. Due respect & credit to all my fellow kagglers. Thanks !!","27f94268":"1. The image in the top half is the snapshot of the spread , as of 1st Mar 2020. \n1. The image in the bottom half shows major air routes from Beijing to rest of the world. \n1. The red arrows tries to co-relate the air routes to the direction of spread.","346a07c4":"**Visual 4 :** Display of progression of spread across the globe","48c414aa":"Section 4.2 : PLOTS FOR SUBMISSION - Combining a logistic growth model with SIR\n\nRef: https:\/\/assets.tue.nl\/fileadmin\/content\/pers\/2020\/03%20March\/TUe%20-%20Technical_Report_Prediction_Corona_Virus.pdf","50664259":"**3.2 Substantiation from research**\n\nI would like to provide an evedential excerpt from the earlier mentioned research paper, for your reference here, as below. \n\n\n*In the early 1960s, Schulman and Kilbourne developed an influenza virus transmission model in mice. Although mouse-to-mouse transmission is relatively inefficient, they still observed a significant decrease in transmission efficiency with increasing relative humidity (RH) [23] and during summer months, even when laboratory temperature and RH were controlled during experiments [24]. Lowen et al. expanded upon these experiments in the guinea pig transmission model. At 20\u00b0C, transmission efficiency of an influenza A\/H3N2 isolate displayed a bimodal dependence on RH, with airborne (i.e., droplet or aerosol) transmission being maximal at 20\u201335% RH, poor at 50% RH, moderate at 65% RH, and absent at 80% RH. At 5\u00b0C, transmission was overall more efficient than at 20\u00b0C, and the relationship between RH and transmission efficiency was montonic, with efficiency decreasing with increasing RH [25]. Transmission was abolished at high temperature (30\u00b0C), regardless of RH [26].*","860730dd":",<font size=\"4\">Section 1: Data Preperation<\/font>","2117a009":"**Finally, this is how the table looks like and our analysis is baselined with this table**","abbdd55f":"The below model considers a sliglty reduced transmission rate, considering temperature factor","2bf3e85e":"<font size=\"5\"> Summary <\/font>\n\n\nIn this analysis, primary goal is to find the factors that impact transmission rate of COVID-19. \nTo be very precise, i am trying to answer the below question:\n\n***What are the key factors which impact the transmission of COVID-19 ?***\n\nSome of the key factors are:\n\n1. Temperature\n1. Relative Humidity\n1. Air Travel\n\nKindly have a good look at the figures given below. Rest of my analysis predominantly revolves around this.","1782722f":"THE BELOW CODE SNIPPETS ARE FOR IMPLEMENTATION OF THE SIR MODEL","7dc7d602":"The above shows the headers and a top slice of the table. I think this is self-explanatory.","7d78f101":"**Edit 1 : In addition to the above analysis, i have tried pictorially to co-relate air travel with the spread. The below image shows the same**"}}