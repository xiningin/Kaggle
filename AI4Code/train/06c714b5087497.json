{"cell_type":{"62c1367f":"code","b3a91daf":"code","c565e867":"code","853d075e":"code","87488891":"code","0ae97aec":"code","6bb8be8f":"code","f1ea1ea3":"code","deccfd32":"code","1a6da1be":"code","a24802ae":"code","654e08a9":"code","4a992fa0":"code","bb09c95b":"code","03ff0e87":"code","b551c76b":"code","b0501d40":"code","4ee9b263":"code","a2e5e9ec":"code","4e7167b3":"code","3b00268f":"code","d7532f07":"code","82f59da6":"markdown","32e67833":"markdown"},"source":{"62c1367f":"import pandas as pd\nimport numpy as np\nimport scipy.stats as stats\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(10,6)})\nsns.set(font_scale=1.3)\nplt.style.use('fivethirtyeight')\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_selection import SelectKBest, f_regression, chi2\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom catboost import CatBoostRegressor\n\nfrom sklearn.metrics import mean_squared_error\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b3a91daf":"data = pd.read_csv('..\/input\/hitters\/Hitters.csv')","c565e867":"data.head()","853d075e":"data.info()","87488891":"(data.isnull().sum()\/len(data))*100","0ae97aec":"data.dropna(inplace=True)","6bb8be8f":"data.info()","f1ea1ea3":"plt.figure(figsize=(15,15))\ncmap = sns.diverging_palette(0, 230, 90, 60, as_cmap=True)\nsns.heatmap(data.corr(), cmap=cmap, vmin=-1, vmax=1, cbar_kws={'shrink': .8}, square=True, annot=True, fmt='.2f',\n            linewidths=.8)\nplt.show()","deccfd32":"columns = data.columns[:16]\nplt.subplots(figsize=(20,30))\nlength = len(columns)\n\nfor i,j in zip(columns, range(length)):\n    plt.subplot((length\/2),3,j+1)\n    plt.subplots_adjust(wspace=0.2, hspace=0.5)\n    sns.distplot(data[i], kde=False, fit=stats.norm, hist_kws=dict(edgecolor=\"black\", linewidth=2))\n    plt.title(i)","1a6da1be":"columns = data.columns[:16]\nplt.subplots(figsize=(20,30))\nlength = len(columns)\n\nfor i, j in zip(columns, range(length)):\n    plt.subplot((length\/2), 3, j+1)\n    plt.subplots_adjust(wspace=.2, hspace=.5)\n    sns.boxplot(y=data[i])\n    plt.title(i)","a24802ae":"columns = data.columns[:16]\nplt.subplots(figsize=(20,30))\nlength = len(columns)\n\nfor i,j in zip(columns, range(length)):\n    plt.subplot((length\/2),3,j+1)\n    plt.subplots_adjust(wspace=0.2, hspace=0.5)\n    sns.regplot(x=data[i], y=data['Salary'])\n    plt.title(i)","654e08a9":"data2 = data[(data['CAtBat'] < 12000)]","4a992fa0":"data3 = data2[(data2['Years'] < 25)]","bb09c95b":"data4 = data3[(data3['CHmRun'] < 500)]","03ff0e87":"data5 = data4[(data4['CWalks'] < 1200)]","b551c76b":"def encoder(data):\n    le = LabelEncoder()\n    for col in data.select_dtypes('object'):\n        data[col] = le.fit_transform(data[col])\n    return(data)","b0501d40":"colunas = ['Data','Modelo','RMSE']\nresultado = pd.DataFrame(columns=colunas)\nrandom_state = 5","4ee9b263":"data = encoder(data)\nx = data.drop(columns=['Salary'])\ny = data['Salary']\nx = x\/255\n\nx_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size=.2, random_state=random_state)\n\nmodels = []\n\nmodels.append(('Regression', LinearRegression()))\nmodels.append(('Ridge', Ridge()))\nmodels.append(('Lasso', Lasso()))\nmodels.append(('ElasticNet', ElasticNet()))\nmodels.append(('KNN', KNeighborsRegressor()))\nmodels.append(('CART', DecisionTreeRegressor()))\nmodels.append(('RF', RandomForestRegressor()))\nmodels.append(('SVR', SVR()))\nmodels.append(('GBM', GradientBoostingRegressor()))\nmodels.append((\"XGBoost\", XGBRegressor()))\nmodels.append((\"LightGBM\", LGBMRegressor()))\nmodels.append((\"CatBoost\", CatBoostRegressor(verbose = False)))\n\n\nfor name, model in models:\n    model.fit(x_treino,y_treino)\n    y_pred=model.predict(x_teste)\n    rmse = np.sqrt(mean_squared_error(y_teste, y_pred))\n    resultado = resultado.append(pd.DataFrame([['Data 0',name, rmse]], columns=colunas))","a2e5e9ec":"data2 = encoder(data2)\nx = data2.drop(columns=['Salary'])\ny = data2['Salary']\nx = x\/255\n\nx_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size=.2 ,random_state=random_state)\n\nmodels = []\n\nmodels.append(('Regression', LinearRegression()))\nmodels.append(('Ridge', Ridge()))\nmodels.append(('Lasso', Lasso()))\nmodels.append(('ElasticNet', ElasticNet()))\nmodels.append(('KNN', KNeighborsRegressor()))\nmodels.append(('CART', DecisionTreeRegressor()))\nmodels.append(('RF', RandomForestRegressor()))\nmodels.append(('SVR', SVR()))\nmodels.append(('GBM', GradientBoostingRegressor()))\nmodels.append((\"XGBoost\", XGBRegressor()))\nmodels.append((\"LightGBM\", LGBMRegressor()))\nmodels.append((\"CatBoost\", CatBoostRegressor(verbose = False)))\n\n\nfor name, model in models:\n    model.fit(x_treino,y_treino)\n    y_pred=model.predict(x_teste)\n    rmse = np.sqrt(mean_squared_error(y_teste, y_pred))\n    resultado = resultado.append(pd.DataFrame([['Data 2',name, rmse]], columns=colunas))","4e7167b3":"data3 = encoder(data3)\nx = data3.drop(columns=['Salary'])\ny = data3['Salary']\nx = x\/255\n\nx_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size=.2 ,random_state=random_state)\n\nmodels = []\n\nmodels.append(('Regression', LinearRegression()))\nmodels.append(('Ridge', Ridge()))\nmodels.append(('Lasso', Lasso()))\nmodels.append(('ElasticNet', ElasticNet()))\nmodels.append(('KNN', KNeighborsRegressor()))\nmodels.append(('CART', DecisionTreeRegressor()))\nmodels.append(('RF', RandomForestRegressor()))\nmodels.append(('SVR', SVR()))\nmodels.append(('GBM', GradientBoostingRegressor()))\nmodels.append((\"XGBoost\", XGBRegressor()))\nmodels.append((\"LightGBM\", LGBMRegressor()))\nmodels.append((\"CatBoost\", CatBoostRegressor(verbose = False)))\n\n\nfor name, model in models:\n    model.fit(x_treino,y_treino)\n    y_pred=model.predict(x_teste)\n    rmse = np.sqrt(mean_squared_error(y_teste, y_pred))\n    resultado = resultado.append(pd.DataFrame([['Data 3',name, rmse]], columns=colunas))","3b00268f":"data4 = encoder(data4)\nx = data4.drop(columns=['Salary'])\ny = data4['Salary']\nx = x\/255\n\nx_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size=.2 ,random_state=random_state)\n\nmodels = []\n\nmodels.append(('Regression', LinearRegression()))\nmodels.append(('Ridge', Ridge()))\nmodels.append(('Lasso', Lasso()))\nmodels.append(('ElasticNet', ElasticNet()))\nmodels.append(('KNN', KNeighborsRegressor()))\nmodels.append(('CART', DecisionTreeRegressor()))\nmodels.append(('RF', RandomForestRegressor()))\nmodels.append(('SVR', SVR()))\nmodels.append(('GBM', GradientBoostingRegressor()))\nmodels.append((\"XGBoost\", XGBRegressor()))\nmodels.append((\"LightGBM\", LGBMRegressor()))\nmodels.append((\"CatBoost\", CatBoostRegressor(verbose = False)))\n\n\nfor name, model in models:\n    model.fit(x_treino,y_treino)\n    y_pred=model.predict(x_teste)\n    rmse = np.sqrt(mean_squared_error(y_teste, y_pred))\n    resultado = resultado.append(pd.DataFrame([['Data 4',name, rmse]], columns=colunas))","d7532f07":"data5 = encoder(data5)\nx = data5.drop(columns=['Salary'])\ny = data5['Salary']\nx = x\/255\n\nx_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size=.2 ,random_state=random_state)\n\nmodels = []\n\nmodels.append(('Regression', LinearRegression()))\nmodels.append(('Ridge', Ridge()))\nmodels.append(('Lasso', Lasso()))\nmodels.append(('ElasticNet', ElasticNet()))\nmodels.append(('KNN', KNeighborsRegressor()))\nmodels.append(('CART', DecisionTreeRegressor()))\nmodels.append(('RF', RandomForestRegressor()))\nmodels.append(('SVR', SVR()))\nmodels.append(('GBM', GradientBoostingRegressor()))\nmodels.append((\"XGBoost\", XGBRegressor()))\nmodels.append((\"LightGBM\", LGBMRegressor()))\nmodels.append((\"CatBoost\", CatBoostRegressor(verbose = False)))\n\n\nfor name, model in models:\n    model.fit(x_treino,y_treino)\n    y_pred=model.predict(x_teste)\n    rmse = np.sqrt(mean_squared_error(y_teste, y_pred))\n    resultado = resultado.append(pd.DataFrame([['Data 5',name, rmse]], columns=colunas))\n    \nresultado.sort_values(by=['RMSE'], inplace=True)","82f59da6":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Model<\/p>","32e67833":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">EDA<\/p>"}}