{"cell_type":{"8e3a7519":"code","2a65344e":"code","73110add":"code","c2de8b5b":"code","bf02861c":"code","1197d0f9":"code","b38b0168":"code","7697f16d":"code","8d69da62":"code","5cad24ed":"code","fb7f20e4":"code","bbbca8aa":"code","f3c876e1":"code","bcd8de38":"code","a54a9230":"code","8f158c45":"code","652d9410":"code","3145ebcd":"code","401a3e74":"code","4c607c36":"code","c60003f0":"code","5775741d":"code","9ad332bd":"code","ed379d67":"code","3d51e9ec":"code","2073ee0d":"code","d6803910":"markdown","007c54c9":"markdown","294be11c":"markdown","20c3c996":"markdown","936184c2":"markdown","5905bb08":"markdown","1cd7c6db":"markdown","189ab5f4":"markdown","cdce7324":"markdown","ae69dcdc":"markdown","800e6d23":"markdown","a9ba2a11":"markdown","ba93ccd4":"markdown","e4bf41f4":"markdown","68cbfa2f":"markdown"},"source":{"8e3a7519":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a65344e":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop, Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","73110add":"# Load the data\ntrain_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","c2de8b5b":"Y_train = train_data[\"label\"]\n\n# Drop 'label' column\nX_train = train_data.drop(labels = [\"label\"],axis = 1) \n\n# free some space\ndel train_data \n\ng = sns.countplot(Y_train)\n\nY_train.value_counts()","bf02861c":"# Check the data\nX_train.isnull().any().describe()","1197d0f9":"test_data.isnull().any().describe()","b38b0168":"# Normalize the data\nX_train = X_train \/ 255.0\ntest_data = test_data \/ 255.0","7697f16d":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest_data = test_data.values.reshape(-1,28,28,1)","8d69da62":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)","5cad24ed":"# Set the random seed\nrandom_seed = 2","fb7f20e4":"# Split the train and the validation set for the fitting\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.2, random_state=random_seed)","bbbca8aa":"# Some examples\ng = plt.imshow(X_train[0][:,:,0])","f3c876e1":"# Set the CNN model \n# my CNN architechture is In -> [[Conv2D->relu]*2 -> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","bcd8de38":"model.summary()","a54a9230":"# Define the optimizer\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","8f158c45":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","652d9410":"epochs = 50 \nbatch_size = 64","3145ebcd":"# Data augmentation to prevent overfitting \n\ndatagen = ImageDataGenerator(\n        rotation_range = 10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range = 0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range = 0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip = False,  # randomly flip images\n        vertical_flip = False)  # randomly flip images\n\ndatagen.fit(X_train)","401a3e74":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size = batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch = X_train.shape[0] \/\/ batch_size)","4c607c36":"metrics = pd.DataFrame(model.history.history)\nmetrics","c60003f0":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","5775741d":"print(\"training_accuracy\", history.history['accuracy'][-1])\nprint(\"validation_accuracy\", history.history['val_accuracy'][-1])","9ad332bd":"# Look at confusion matrix \n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","ed379d67":"# Display some error results \n\n# Errors are difference between predicted labels and true labels\nerrors = (Y_pred_classes - Y_true != 0)\n\nY_pred_classes_errors = Y_pred_classes[errors]\nY_pred_errors = Y_pred[errors]\nY_true_errors = Y_true[errors]\nX_val_errors = X_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)))\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)","3d51e9ec":"np.random.seed(22)\nrandom_selection = np.random.randint(0,4201,size=1)\nrandom_sample = X_val[random_selection]\nprint('Prediction:')\nprint(model.predict_classes(random_sample.reshape(1,28,28,1))[0])\nplt.imshow(random_sample.reshape(28,28),cmap='binary')\nplt.show","2073ee0d":"np.random.seed(20)\nrandom_selection=np.random.randint(0,4201,size=1)\nrandom_sample = X_val[random_selection]\nprint('Prediction:')\nprint(model.predict_classes(random_sample.reshape(1,28,28,1))[0])\nplt.imshow(random_sample.reshape(28,28),cmap='binary')\nplt.show","d6803910":"### 1.1 - Load Data","007c54c9":"### 1.6 - Split training and valdiation set","294be11c":"## 3 - Evaluate the model","20c3c996":"## 2 - Define the Neural Network","936184c2":"### 1.4 - Reshape","5905bb08":"### 1.5 - Label encoding","1cd7c6db":"## 1 - Data preparation","189ab5f4":"### 1.3 - Normalization","cdce7324":"### 2.3 - Data Augmentation","ae69dcdc":"### 2.1 - Build the model","800e6d23":"### 3.2 - Confusion matrix","a9ba2a11":"## import Libraries","ba93ccd4":"### 1.2 - Check for null and missing values","e4bf41f4":"### 3.1 - Training and validation curves","68cbfa2f":"### 2.2 - Set the optimizer "}}