{"cell_type":{"8e13debd":"code","bffe7ce5":"code","26cd2fec":"code","bada5444":"code","6d8b6e09":"code","df04bc22":"code","2d973f3d":"code","f7bacf46":"code","fc52a97f":"code","668e7cba":"code","a8d510b0":"code","8eb9df72":"code","b27f0c34":"code","7ac7a90e":"code","4e5cecc8":"code","b2c11b61":"code","b3fbfd0a":"code","f3eabd67":"code","51a0c6e5":"code","08320dc2":"code","cec8aa8d":"code","88f1e059":"code","62331ae8":"code","211b89bf":"code","19e01d79":"code","ea6baecf":"code","c2eaaf9d":"code","c1ba5b05":"code","33c45ba3":"code","bd268bc6":"code","6cf0489e":"code","143d2eb5":"code","23b85a91":"code","0ba3f4bb":"code","f936716f":"code","7e077910":"code","a3bd617c":"code","5e141140":"code","e236d2ed":"code","3667220a":"code","f5ec32b1":"code","028f20f6":"code","43ab657b":"code","2d253f94":"code","74a413cc":"code","48f6336a":"code","9815bef1":"code","d196227a":"code","80d15374":"code","297f3f0a":"code","f30619b1":"code","4678aa64":"code","4a594874":"markdown","b0c14c9f":"markdown","e20baa81":"markdown","d0b3f70d":"markdown","b3766cb4":"markdown","c8692e2a":"markdown","23b9fdde":"markdown"},"source":{"8e13debd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bffe7ce5":"!pip install xlrd\n!pip install openpyxl\n!pip install pycountry_convert","26cd2fec":"import matplotlib \nimport seaborn as sns\nimport statsmodels as sm\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport geopy as gpy\nimport geopandas as gpd\nfrom warnings import filterwarnings\nimport pycountry_convert\nimport os","bada5444":"#import dataset\/excel file\n\ndata1 = \"..\/input\/global-school-closures\/global_school_closures_covid19.xlsx\"\ndata2 = \"..\/input\/duration-school-closure-edited\/duration_school_closures_edited (3).csv\"\ndata3 = \"..\/input\/full-school-closure-evolution\/full-school-closure-evolution-for-new-map-master-file-31082021.xlsx\"\ndata4 = '..\/input\/countries-enrollment-data\/countries-enrollment-data-uis-sep-20.xlsx'\ndata5 = '..\/input\/covid-dataset\/owid-covid-data.csv'\ndata6 = \"..\/input\/country-class\/CLASS_1.xlsx\"\n\n\ndf1 = pd.read_excel(data1,'Mar19_Country-wide_school_Clos')\ndf1 = df1.iloc[1:,:]\ndf2 = pd.read_csv(data2)\ndf3 = pd.read_excel(data3, \"Sheet1\")\ndf4 = pd.read_excel(data4,'Sheet1')\ndf5 = pd.read_csv(data5)\ndf6 = pd.read_excel(data6, \"List of economies\")\n\n","6d8b6e09":"df6","df04bc22":"df5_world = df5[df5.location == 'World']","2d973f3d":"df5_country = df5[df5.date == \"2021-09-01\"]\ndf5_country","f7bacf46":"df5_world['Month'] = pd.to_datetime(df5.date).dt.to_period(\"M\")\ndf5_world","fc52a97f":"df5_fig = df5_world.groupby(by=[\"Month\"],as_index = False).sum()\ndf5_fig = df5_fig[df5_fig['Month'] >= \"2021-01\"  ]\ndf5_fig.people_vaccinated = df5_fig.people_vaccinated.div(1000000)\ndf5_fig","668e7cba":"df5_fig2 = df5_world.groupby(by=[\"Month\"],as_index = False).sum()\ndf5_fig2[\"new_deaths\"] = df5_fig2[\"new_deaths\"].div(1000000)\n","a8d510b0":"fig, ax = plt.subplots(figsize=(25, 10))\nax.tick_params(axis='x', rotation=90)\nsns.set_theme(style=\"whitegrid\", font_scale = 2)\n\nsns.barplot(data=df5_fig,x=\"Month\", y=\"people_vaccinated_per_hundred\" , linewidth=4)","8eb9df72":"fig, ax = plt.subplots(figsize=(25, 10))\nax.tick_params(axis='x', rotation=90)\nsns.set_theme(style=\"whitegrid\", font_scale = 2)\n\nsns.barplot(data=df5_fig2,x=\"Month\", y=\"new_deaths_per_million\" , linewidth=4)","b27f0c34":"fig, ax = plt.subplots(figsize=(25, 10))\nax.tick_params(axis='x', rotation=90)\nsns.set_theme(style=\"whitegrid\", font_scale = 2)\n\nsns.barplot(data=df5_fig2,x=\"Month\", y=\"new_cases_per_million\" , linewidth=4)","7ac7a90e":"def Class (data):\n    iso = data.ISO\n    \n    for index, row in df6.iterrows():\n        iso2 = row[\"Code\"]\n        \n        if iso == iso2:\n            return row[\"Income group\"]\n        \n    #return \"unk\"\n    \ndef population_den (data):\n    iso = data.ISO\n    \n    for index, row in df5_country.iterrows():\n        iso2 = row[\"iso_code\"]\n        \n        if iso == iso2:\n            return row[\"population_density\"]\n        \ndef population (data):\n    iso = data.ISO\n    \n    for index, row in df5_country.iterrows():\n        iso2 = row[\"iso_code\"]\n        \n        if iso == iso2:\n            return row[\"population\"]\n        \n        \ndef vaccine (data):\n    iso = data.ISO\n    \n    for index, row in df5_country.iterrows():\n        iso2 = row[\"iso_code\"]\n        \n        if iso == iso2:\n            \n            answer = row.people_vaccinated_per_hundred\n            \n            return row[\"people_vaccinated_per_hundred\"]\n    #return \"unk\"","4e5cecc8":"import pycountry_convert as pc\n\ndef continent(row):\n    \n  \n    Str = row.ISO\n    \n    try:\n        alpha2 = pc.country_alpha3_to_country_alpha2(Str)\n    except:\n        return row.Country\n    \n    try:\n        answer = pc.country_alpha2_to_continent_code(alpha2)\n    except:\n        return row.Country\n    \n    return answer\n\n\nimport pycountry_convert as pc\n\ndef continent2(data):\n    \n    name = data.Country\n    \n    for index, row in df3_iter.iterrows():\n        name2 = row[\"Country\"]\n        \n        if name == name2:\n            return row[\"continent\"]\n    \n    return name\n\ndef Status(data):\n    name = data.Country\n    \n    for index, row in df3_iter.iterrows():\n        name2 = row[\"Country\"]\n        \n        if name == name2:\n            return row[\"Status\"]\n        \n    return \"unk\"","b2c11b61":"df3[\"DATE\"] = pd.to_datetime(df3[\"Date\"])\ndf3_now = df3[df3[\"DATE\"] == \"2021-09-30\"  ]\ndf3_now[\"continent\"] = df3_now.apply(continent, axis=1)\ndf3_now[\"Class\"] = df3_now.apply(Class, axis=1)\ndf3_now[\"Population\"] = df3_now.apply(population, axis=1)\ndf3_now[\"Population dencity\"] = df3_now.apply(population_den, axis=1)\ndf3_now[\"Vaccination in percent\"] = df3_now.apply(vaccine, axis=1)\n\ndf3_now","b3fbfd0a":"df3_fig1 = df3_now.groupby(by=[\"continent\", \"Status\"], as_index = False).count()\ndf3_fig1 ","f3eabd67":"fig, ax = plt.subplots(figsize=(12,12))\n#Set the colou pallete\nsns.set_theme(style=\"whitegrid\", font_scale = 2)\ncolors = [\"#00FF00\", \"#FFFF00\", \"#FF0B04\" , \"#808080\"]\nsns.set_palette(sns.color_palette(colors))\n\n\nsns.barplot(ax = ax, x=\"Country\", y = \"continent\", hue= \"Status\",hue_order = [\"Fully open\", \"Partially open\", \"Closed due to COVID-19\",\"Academic break\"] , data = df3_fig1)","51a0c6e5":"df3_fig2 = df3_now.groupby(by = [\"Status\",\"Class\"], as_index = False).count() \ndf3_fig2 = df3_fig2[df3_fig2[\"Status\"] != 'Academic break']\ndf3_fig2","08320dc2":"fig, ax = plt.subplots(figsize=(12,12))\n#Set the colou pallete\nsns.set_theme(style=\"whitegrid\", font_scale = 2)\ncolors = [\"#00FF00\", \"#FFFF00\", \"#FF4D00\" , \"#FF0B04\"]\nsns.set_palette(sns.color_palette(colors))\n\n\nsns.barplot(ax = ax, x=\"Country\", y = \"Status\", hue= \"Class\",hue_order = [\"High income\", \"Upper middle income\", \"Lower middle income\",\"Low income\"],order = ['Fully open', 'Partially open', 'Closed due to COVID-19'] , data = df3_fig2)","cec8aa8d":"fig, ax = plt.subplots(figsize=(12,12))\n#Set the colou pallete\nsns.set_theme(style=\"whitegrid\", font_scale = 2)\ncolors = [\"#00FF00\", \"#FFFF00\", \"#FF0B04\"]\nsns.set_palette(sns.color_palette(colors))\n\n\nsns.barplot(ax = ax, x=\"Country\", y = \"Class\", hue= \"Status\" ,order = [\"High income\", \"Upper middle income\", \"Lower middle income\",\"Low income\"], hue_order = ['Fully open', 'Partially open', 'Closed due to COVID-19'] ,data = df3_fig2)","88f1e059":"N = 4\n\n\n\nmen = (24.312762 , 130.187042, 88.034918, 29.013427)\nwomen = (26.119773, 143.471269, 93.663060, 28.455448) \n\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\nlabels = [\"Pre-primary\", \"Primary\", \"Secondary\", \"Tertiary\"]\n\nfig, ax = plt.subplots(figsize=(12,12))\n\nax.bar(labels, men, width, label='Men')\nax.bar(labels, women, width, bottom=men,\n       label='Women')\n\nplt.ylabel('Stundents (in million)')\nplt.title('Affected students')\nax.legend()\n\nplt.show()","62331ae8":"df4.sum()","211b89bf":"#df1[\"Continent2\"] = df1.apply(continent2, axis=1)\n#df1[\"Status\"] = df1.apply(Status, axis=1)\n\n\ndf1[\"Number of learners enrolled intertiary education\\nprogrammes\"] = pd.to_numeric(df1[\"Number of learners enrolled intertiary education\\nprogrammes\"], errors='coerce').fillna(0).astype('int')\n\n\ndf1[\"Total affected learner\"] = df1[\"Number of learners enrolled\\nfrom pre-primary to upper-\\nsecondary education\"] + df1[\"Number of learners enrolled intertiary education\\nprogrammes\"]\ndf1.head(15)\n\ndf1[\"Total affected learner\"] = df1[\"Total affected learner\"].astype(str).astype(int)\ndf1[\"Country\"] = df1[\"Country\"].astype(str)","19e01d79":"df3_fig3 = df3[df3[\"Status\"] == \"Closed due to COVID-19\"].groupby(by=[\"Country\",\"Status\"], as_index = False).count()\n#df3_fig2_closed = df3_fig2[df3_fig2[\"Status\"] == \"Closed due to COVID-19\"]\n#df3_fig3 = df3_fig3.sort_values(\"Date\", ascending=\"False\").head(20)\n#df3_fig3","ea6baecf":"df3_fig3 = df3[df3[\"Status\"] == \"Closed due to COVID-19\"].groupby(by=[\"Country\",\"Status\"], as_index = False).count().sort_values(by=\"DATE\", ascending= False).head(20)\n\n\nfig, ax = plt.subplots(figsize=(12,12))\nsns.set_theme(style=\"whitegrid\", font_scale = 2)\n\nsns.barplot(ax = ax, x=\"Date\", y =\"Country\", data = df3_fig3)","c2eaaf9d":"print('andasndask')","c1ba5b05":"df3_fig2 = df3[df3[\"Status\"] == \"Closed due to COVID-19\"].groupby(by=[\"Country\",\"Status\"], as_index = False).count().sort_values(by=\"DATE\", ascending= True).head(20)\nfig, ax = plt.subplots(figsize=(12,12))\n#sns.set_theme(style=\"whitegrid\", font_scale = 2)\n\nsns.barplot(ax = ax, x=\"Date\", y =\"Country\", data = df3_fig2)","33c45ba3":"bottom_closed_list = df3_fig2.Country.tolist()\ntop_closed_list = df3_fig3.Country.tolist()\n\nbottom_closed = df3_now[df3.Country.isin(bottom_closed_list) ]\ntop_closed = df3_now[df3.Country.isin(top_closed_list) ]","bd268bc6":"fig, ax = plt.subplots(figsize=(12,12))\n#Set the colou pallete\nsns.set_theme(style=\"whitegrid\", font_scale = 1.5)\ncolors = [\"#00FF00\", \"#FFFF00\", \"#FF0B04\" , \"#808080\"]\nsns.set_palette(sns.color_palette(colors))\n\n\nsns.barplot(ax = ax, x=\"Population dencity\", y = \"Country\", hue= \"Class\", hue_order = [\"High income\", \"Upper middle income\", \"Lower middle income\",\"Low income\"] , data = top_closed)","6cf0489e":"fig, ax = plt.subplots(figsize=(12,12))\n#Set the colou pallete\nsns.set_theme(style=\"whitegrid\", font_scale = 1.5)\ncolors = [\"#00FF00\", \"#FFFF00\", \"#FF0B04\" , \"#808080\"]\nsns.set_palette(sns.color_palette(colors))\n\n\nsns.barplot(ax = ax, x=\"Population dencity\", y = \"Country\", hue= \"Class\", hue_order = [\"High income\", \"Upper middle income\", \"Lower middle income\",\"Low income\"] , data = bottom_closed)","143d2eb5":"fig, ax = plt.subplots(figsize=(12,12))\n#Set the colou pallete\nsns.set_theme(style=\"whitegrid\", font_scale = 1.5)\ncolors = [\"#00FF00\", \"#FFFF00\", \"#FF0B04\" , \"#808080\"]\nsns.set_palette(sns.color_palette(colors))\n\n\nsns.barplot(ax = ax, x=\"Population\", y = \"Country\", hue= \"Class\", hue_order = [\"High income\", \"Upper middle income\", \"Lower middle income\",\"Low income\"] , data = top_closed)","23b85a91":"fig, ax = plt.subplots(figsize=(12,12))\n#Set the colou pallete\nsns.set_theme(style=\"whitegrid\", font_scale = 1.5)\ncolors = [\"#00FF00\", \"#FFFF00\", \"#FF0B04\" , \"#808080\"]\nsns.set_palette(sns.color_palette(colors))\n\n\nsns.barplot(ax = ax, x=\"Population\", y = \"Country\", hue= \"Class\", hue_order = [\"High income\", \"Upper middle income\", \"Lower middle income\",\"Low income\"] , data = bottom_closed)","0ba3f4bb":"#show the country with biggist affected learner\n\ndf_sort = df1.sort_values(by='Total affected learner', ascending= False)\ndf_sort = df_sort.head(15)\ndf_sort[\"Total affected learner in million\"] = df_sort[\"Total affected learner\"].div(1000000)\n                                                                                    \nfig, ax = plt.subplots(figsize=(12,12))\nsns.set_theme(style=\"whitegrid\", font_scale = 2)\ntips = sns.load_dataset(\"tips\")\n\nsns.barplot(ax = ax, x=\"Total affected learner in million\", y =\"Country\", data = df_sort)","f936716f":"\ndf2.head()","7e077910":"df3","a3bd617c":"df3[\"Month\"] = pd.to_datetime(df3_big_country['DATE']).dt.to_period('M')","5e141140":"df3_fig1 = df3.groupby([\"Month\",\"Status\"], sort = False, as_index=False).count()\n\ndf3_fig1","e236d2ed":"fig, ax = plt.subplots(figsize=(25, 10))\nax.tick_params(axis='x', rotation=90)\n#Set the colou pallete\ncolors = [\"#00FF00\", \"#FFFF00\", \"#FF0B04\" , \"#808080\"]\nsns.set_palette(sns.color_palette(colors))\n\n#sns.set_theme(style=\"whitegrid\")\n\nsns.barplot(data=df3_fig1,x=\"Month\", y=\"Country\", hue=\"Status\" , linewidth=4)","3667220a":"fig, ax = plt.subplots(figsize=(25, 10))\nax.tick_params(axis='x', rotation=90)\n#Set the colou pallete\ncolors = [\"#00FF00\", \"#FFFF00\", \"#FF0B04\" , \"#808080\"]\nsns.set_palette(sns.color_palette(colors))\n\n#sns.set_theme(style=\"whitegrid\")\n\nsns.barplot(data=df3_big_count,x=\"Month\", y=\"Country\", hue=\"Status\" , linewidth=4)","f5ec32b1":"df3","028f20f6":"#Getpercentage data by continent name","43ab657b":"df3_lab = df3.groupby([\"DATE\",\"Status\"], sort = False, as_index=False).count()\n#df3_lab = df3_lab.drop([\"Date\",\"ISO\"], axis=1)\n#df3_lab[\"date\"] = pd.to_datetime(df3_lab[\"DATE\"])\ndf3_lab\n","2d253f94":"df3_wide = df3_lab.pivot(\"DATE\", \"Status\", \"Country\")\n\n\n\ndf3_wide","74a413cc":"\nstart_date = \"2020-02-03\"\nend_date = \"2020-04-01\"\n\nstart_date2 = \"2020-04-01\"\nend_date2 = \"2021-01-01\"\n\nstart_date3 = \"2021-01-01\"\n\n\ncondition = (df3_lab['DATE'] > start_date) & (df3_lab['DATE'] <= end_date)\ncondition2 = (df3_lab['DATE'] > start_date2) & (df3_lab['DATE'] <= end_date2)\ncondition3 = (df3_lab['DATE'] > start_date3)\n\ndf3_1 = df3_lab.loc[condition]\ndf3_2 = df3_lab.loc[condition2]\ndf3_3 = df3_lab.loc[condition3]\n\n\n","48f6336a":"fig, ax = plt.subplots(figsize=(25, 10))\n\nsns.set_theme(style=\"whitegrid\")\n\nsns.lineplot(data=df3_wide, palette=\"tab10\", linewidth=4)","9815bef1":"df3_figure1 = df3_1.pivot(\"DATE\",\"Status\",\"Country\")\ndf3_figure2 = df3_2.pivot(\"DATE\",\"Status\",\"Country\")\ndf3_figure3 = df3_3.pivot(\"DATE\",\"Status\",\"Country\")","d196227a":"fig, ax = plt.subplots(figsize=(25, 10))\n\nsns.set_theme(style=\"whitegrid\")\n\nsns.lineplot(data=df3_figure1, palette=\"tab10\", linewidth=4)","80d15374":"fig, ax = plt.subplots(figsize=(25, 10))\n\nsns.set_theme(style=\"whitegrid\")\n\nsns.lineplot(data=df3_figure2, palette=\"tab10\", linewidth=4)","297f3f0a":"fig, ax = plt.subplots(figsize=(25, 10))\n\nsns.set_theme(style=\"whitegrid\")\n\nsns.lineplot(data=df3_figure3, palette=\"tab10\", linewidth=4)","f30619b1":"df4 = pd.read_excel(data4,'Sheet1')\ndf4.head()","4678aa64":"df3","4a594874":"  Str = row.ISO\n    l = len(Str)\n    code = Str[:l-1]","b0c14c9f":"**WHERE WE STAND TODAY?**","e20baa81":"**DURATION OF WORLDWIDE SCHOOL CLOSURE**","d0b3f70d":"**Countries with the highest number of days of full school closures (March 2020 \u2013 September 2021)**","b3766cb4":"**COUNTRIES ENROLlMENT DATASET**","c8692e2a":"**SCHOOL CLOSURE EVOlUTION DATA SET**","23b9fdde":"**AFFECTED LEARNER DATA SET**"}}