{"cell_type":{"850436b8":"code","9c12adac":"code","a442971f":"code","28f997a8":"code","85688019":"code","7ca033dd":"code","8392ce9d":"code","8eac6702":"code","cebbe79b":"code","74c38bfd":"code","70993072":"code","0961bc64":"code","6f1210ad":"code","4751f471":"code","142db659":"code","5e571b07":"code","1038807c":"code","c6cba5e0":"code","5c18862c":"code","75f5bbbc":"code","269a09e7":"code","3e4e71fc":"code","4186e5ed":"code","fed15dba":"code","ca64d4d8":"code","795a4038":"code","67b040ca":"code","f6a49634":"code","1d5f5adf":"code","0eb134ac":"code","db792b30":"code","7888c948":"code","f385b215":"code","fcbf21ac":"code","70c75d4b":"markdown","59e5e987":"markdown","7839f656":"markdown","c7f2b6b3":"markdown","bf7a3878":"markdown","f8ad719a":"markdown","88aefdb9":"markdown","72616c3d":"markdown","a18c4a60":"markdown","4ced9653":"markdown","436538d4":"markdown","c92f5279":"markdown","5ad5d80b":"markdown","eb9573fc":"markdown","e60fe86f":"markdown","6ad3c3d1":"markdown","f54addd7":"markdown","55819729":"markdown","a4806a06":"markdown","465a4fe5":"markdown","dcf22885":"markdown","38499345":"markdown","192d6234":"markdown","dfc98a62":"markdown","be71f4b4":"markdown","8537e88d":"markdown","23e17ede":"markdown","b610270a":"markdown","a3022af2":"markdown","401ceb3b":"markdown","0506df5d":"markdown","0149c28a":"markdown"},"source":{"850436b8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn import preprocessing\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9c12adac":"data = pd.read_csv('..\/input\/playstore-analysis\/googleplaystore.csv')\ndata.head()","a442971f":"#Checking null values in the data.\ndata.isnull().sum()","28f997a8":"#Dropping records with nulls in any of the columns\ndata.dropna(inplace=True)","85688019":"#Checking data types\ndata.dtypes","7ca033dd":"#Delete the rows with \"Varies with device\" in Size column\nindexNames = data[ data['Size'] == 'Varies with device' ].index\ndata.drop(indexNames , inplace=True)\ndata.head()","8392ce9d":"data['Size']=data['Size'].str[:-1]\ndata['Size'] = data['Size'].astype(float)\ndata.head()","8eac6702":"#Delete ',' and '+' from de column\ndata['Installs'] = data['Installs'].replace({',': ''}, regex=True)\ndata['Installs']=data['Installs'].str[:-1]\n\n#convert to numeric\ndata['Installs']= pd.to_numeric(data['Installs'])\n\ndata.head()","cebbe79b":"#Reviews is a numeric field that is loaded as a string field. It's necessary to convert it \n#to numeric\ndata['Reviews']= pd.to_numeric(data['Reviews'])\n\ndata.head()","74c38bfd":"#Price field is a string and has $ symbol. Remove \u2018$\u2019 sign, and convert it to numeric.\ndata['Price'] = data['Price'].str.replace('$', '')\ndata['Price']=pd.to_numeric(data['Price'])\ndata.head()","70993072":"#Average rating should be between 1 and 5 as only these values are allowed on the play store. \n#Drop the rows that have a value outside this range.\n\ndata[np.logical_or(data['Rating'] > 5, data['Rating'] < 0)]","0961bc64":"#Reviews should not be more than installs as only those who installed can review the app. \n#If there are any such records, drop them.\ndata[data['Installs'] - data['Reviews'] < 0]","6f1210ad":"#Delete the rows with more Reviews than Installs\nindexNames = data[ data['Installs'] - data['Reviews'] < 0 ].index\ndata.drop(indexNames , inplace=True)\ndata.head()","4751f471":"#For free apps (type = \u201cFree\u201d), the price should not be >0. Drop any such rows.\ndata[np.logical_and(data['Type'] == 'Free', data['Price'] > 0)]","142db659":"sns.catplot(y='Price', data=data, kind='box')","5e571b07":"sns.catplot(y='Reviews', data=data, kind='box')","1038807c":"sns.distplot(a=data['Rating'], kde=False)","c6cba5e0":"sns.distplot(a=data['Size'], kde=False)","5c18862c":"#Delete the rows with Price >= 200\nindexNames = data[data['Price'] >= 200].index\ndata.drop(indexNames , inplace=True)\nsns.catplot(y='Price', data=data, kind='box')","75f5bbbc":"#Very few apps have very high number of reviews. These are all star apps that don\u2019t help with \n#the analysis and, in fact, will skew it. Drop records having more than 2 million reviews.\nindexNames = data[data['Reviews'] > 2000000].index\ndata.drop(indexNames , inplace=True)\nsns.catplot(y='Reviews', data=data, kind='box')","269a09e7":"#There seems to be some outliers in this field too. Apps having very high number of installs \n#should be dropped from the analysis.\nsns.catplot(y='Installs', data=data, kind='box')","3e4e71fc":"#Scatter plot with regression line\nsns.regplot(x=data['Price'], y=data['Rating'])","4186e5ed":"#Scatter plot with regression line\nsns.regplot(x=data['Size'], y=data['Rating'])","fed15dba":"#Scatter plot with regression line\nsns.regplot(x=data['Reviews'], y=data['Rating'])","ca64d4d8":"#Boxplot\nsns.catplot(x='Installs', y='Rating', data=data, kind='box')","795a4038":"#Boxplot\nsns.catplot(x='Category', y='Rating', data=data, kind='box')","67b040ca":"#Defining model columns\nX=data[['Reviews', 'Size', 'Installs', 'Price']]\ny=data['Rating']","f6a49634":"#Splitting data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","1d5f5adf":"#Training the algorithm\nreg = LinearRegression()  \nreg.fit(X_train, y_train) ","0eb134ac":"#Making predictions\ny_pred = reg.predict(X_test)","db792b30":"#Creating a DF comparing actual values vs predicted values\ndfReg = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndfReg","7888c948":"#Mean Absolute Error\nmetrics.mean_absolute_error(y_test, y_pred)","f385b215":"#Mean Squared Error\nmetrics.mean_squared_error(y_test, y_pred)","fcbf21ac":"#Root Mean Squared Error\nnp.sqrt(metrics.mean_squared_error(y_test, y_pred))","70c75d4b":"**2. Loading data**","59e5e987":"**5.1 Price**","7839f656":"**3.1 Dealing with null values**","c7f2b6b3":"**4.2 Boxplot for Reviews**","bf7a3878":"**3.2 Fixing variables format**","f8ad719a":"**3.3.2 Relation Reviews\/Installs**","88aefdb9":"**6.2 Rating vs. Size**","72616c3d":"**5.3 Installs**","a18c4a60":"**6. Bivariate analysis**","4ced9653":"**5.2 Reviews**","436538d4":"**6.3 Rating vs. Reviews**","c92f5279":"**4. Performing univariate analysis**","5ad5d80b":"**3.3.1 Average rating**","eb9573fc":"**5. Outlier treatment**","e60fe86f":"**6.4 Rating vs. Content Rating**","6ad3c3d1":"**3.2.4 Column Price**","f54addd7":"The regression line shows a slight positive correlation between Price and Rating, but as the 90% of prices are under 20$, that is not a conclusion we can take","55819729":"**4.4 Histogram for Size**","a4806a06":"**1. Importing libraries**","465a4fe5":"**3. Preprocessing**","dcf22885":"**3.2.1 Column Size**","38499345":"The regression line shows a slight negative correlation between Size and Rating, but as the 90% of sizes are under 200Mb, that is not a conclusion we can take","192d6234":"**4.3 Histogram for Rating**","dfc98a62":"**7 Model building**","be71f4b4":"**3.2.2 Column Installs**","8537e88d":"**6.5 Ratings vs. Category**","23e17ede":"**3.3.3 Free apps**","b610270a":"**3.3 Sanity checks**","a3022af2":"**6.1 Rating vs. Price**","401ceb3b":"**4.1 Boxplot for Price**","0506df5d":"**3.2.3 Column Reviews**","0149c28a":"The regression line shows a slight positive correlation between Reviews and Rating"}}