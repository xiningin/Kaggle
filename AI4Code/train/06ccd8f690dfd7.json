{"cell_type":{"d7f3deba":"code","8210ce57":"code","53be0c5a":"code","1d33be3f":"code","89a39944":"code","9befea7d":"code","f848fe9e":"code","1cf83e2a":"code","c9e4f0e3":"code","5c86e018":"code","1e923fce":"code","d418646d":"code","8abca8c1":"code","b78a0e80":"code","ff07109e":"code","a1e37e65":"code","9c9cdb51":"code","d8290bbb":"code","ed48558b":"code","72f1f1a0":"code","b5cb6032":"code","e0d53dc6":"code","8134502f":"code","12bf4818":"code","7828283d":"code","77a06af3":"code","cb13aa3d":"code","8206bd6e":"markdown","3679a963":"markdown","b7e0d0f8":"markdown","4b8d67fe":"markdown","9dcaee7e":"markdown","a41ea28a":"markdown","5dd81f51":"markdown","0290e8ba":"markdown","831a0db7":"markdown","a16d4288":"markdown","ba6ff199":"markdown","356725a1":"markdown","7634045b":"markdown","51e43d0b":"markdown","9cd75e9d":"markdown","ebcbbfc3":"markdown","9df283ff":"markdown","f5993d8c":"markdown"},"source":{"d7f3deba":"!pip install regressors","8210ce57":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn import linear_model as lm\nfrom regressors import stats\nimport statsmodels.formula.api as sm\nfrom sklearn.preprocessing import PolynomialFeatures,FunctionTransformer \nfrom sklearn.linear_model import LogisticRegression\n\nimport os\nprint(os.listdir(\"..\/input\"))","53be0c5a":"#Data Preprocessing \nd=pd.read_csv(\"..\/input\/survey.csv\")\nd=d.rename(index=str,columns={\"Wr.Hnd\":\"WrHnd\"})\nd = d[[\"WrHnd\",\"Height\"]]\nd = d.dropna()\n\n#Model Fit - Linear Regression\ninputDF = d[[\"WrHnd\"]]\noutcomeDF = d[[\"Height\"]]\nmodel = lm.LinearRegression()\nresults = model.fit(inputDF,outcomeDF)","1d33be3f":"#Regression Coefficients, Adjusted R-Squared and P-value calculation  \nprint(\"Regression Coefficients: \\n\",model.intercept_, model.coef_)\nprint(\"Adjusted R-Squared:\\n\",stats.adj_r2_score(model, inputDF, outcomeDF))\nprint(\"P-value:\\n\",stats.coef_pval(model, inputDF, outcomeDF))","89a39944":"#Data Preprocessing \nd = pd.read_csv(\"..\/input\/survey.csv\")\nd = d.rename(index=str,columns={\"Wr.Hnd\":\"WrHnd\"})\nd = d[[\"WrHnd\",\"Height\",\"Sex\"]]\nd = d.dropna()\n\n#Model Fit - Linear Regression\ninputDF = d[[\"Sex\"]]\ninputDF = (inputDF == \"Male\").astype(np.int)\ninputDF = pd.concat([inputDF,d[[\"WrHnd\"]]],axis=1, join='inner')\noutcomeDF = d[[\"Height\"]]\nmodel = lm.LinearRegression()\nresults = model.fit(inputDF,outcomeDF)","9befea7d":"#Regression Coefficients, Adjusted R-Squared and P-value calculation  \nprint(\"Regression Coefficients: \\n\",model.intercept_, model.coef_)\nprint(\"Adjusted R-Squared:\\n\",stats.adj_r2_score(model, inputDF, outcomeDF))\nprint(\"P-value:\\n\",stats.coef_pval(model, inputDF, outcomeDF))","f848fe9e":"#Data Preprocessing\nd=pd.read_csv(\"..\/input\/rock.csv\")\nd = d[[\"area\",\"peri\",\"perm\",\"shape\"]]\nd = d.dropna()\n\n#Model Fit - Linear Regression (Statsmodels)\nest = sm.ols(formula=\"area ~ peri+perm+shape\", data=d).fit()\nprint(est.summary())\n","1cf83e2a":"#Data Preprocessing\nd=pd.read_csv(\"..\/input\/rock.csv\")\nd = d[[\"area\",\"peri\",\"perm\",\"shape\"]]\nd = d.dropna()\n\n#Model Fit - Linear Regression (Scikit-Learn)\ninputDF = d[[\"peri\",\"perm\",\"shape\"]]\noutcomeDF = d[[\"area\"]]\nmodel = lm.LinearRegression()\nresults = model.fit(inputDF,outcomeDF)","c9e4f0e3":"#Regression Coefficients, Adjusted R-Squared and P-value calculation  \nprint(\"Regression Coefficients: \\n\",model.intercept_, model.coef_)\nprint(\"Adjusted R-Squared:\\n\",stats.adj_r2_score(model, inputDF, outcomeDF))\nprint(\"P-value:\\n\",stats.coef_pval(model, inputDF, outcomeDF))","5c86e018":"#Data Preprocessing\nd=pd.read_csv(\"..\/input\/mtcars.csv\")\nd = d[[\"mpg\",\"disp\"]]\nd = d.dropna()\n\n#Model Fit - Linear Regression (Scikit-Learn)\ninputDF = d[[\"disp\"]]\noutcomeDF = d[[\"mpg\"]]\nmodel = lm.LinearRegression()\nresults = model.fit(inputDF,outcomeDF)","1e923fce":"#Regression Coefficients, Adjusted R-Squared and P-value calculation  \nprint(\"Regression Coefficients: \\n\",model.intercept_, model.coef_)\nprint(\"Adjusted R-Squared:\\n\",stats.adj_r2_score(model, inputDF, outcomeDF))\nprint(\"P-value:\\n\",stats.coef_pval(model, inputDF, outcomeDF))","d418646d":"#Data Preprocessing\nd=pd.read_csv(\"..\/input\/mtcars.csv\")\nd = d[[\"mpg\",\"disp\"]]\nd = d.dropna()\n\n#Model Fit - Polynomial Regression (Quadratic)\ninputDF = d[[\"disp\"]]\npoly_features = PolynomialFeatures ( degree = 2 , include_bias = False ) \ninputDF = poly_features . fit_transform ( inputDF ) \noutcomeDF = d[[\"mpg\"]]\nmodel = lm.LinearRegression()\nresults = model.fit(inputDF,outcomeDF)","8abca8c1":"#Regression Coefficients, Adjusted R-Squared and P-value calculation  \nprint(\"Regression Coefficients: \\n\",model.intercept_, model.coef_)\nprint(\"Adjusted R-Squared:\\n\",stats.adj_r2_score(model, inputDF, outcomeDF))\nprint(\"P-value:\\n\",stats.coef_pval(model, inputDF, outcomeDF))","b78a0e80":"#Data Preprocessing\nd=pd.read_csv(\"..\/input\/mtcars.csv\")\nd = d[[\"mpg\",\"disp\"]]\nd = d.dropna()\n\n#Model Fit - Polynomial Regression (Cubic)\ninputDF = d[[\"disp\"]] \npoly_features = PolynomialFeatures ( degree = 3 , include_bias = False ) \ninputDF = poly_features . fit_transform ( inputDF ) \noutcomeDF = d[[\"mpg\"]]\nmodel = lm.LinearRegression()\nresults = model.fit(inputDF,outcomeDF)","ff07109e":"#Regression Coefficients, Adjusted R-Squared and P-value calculation  \nprint(\"Regression Coefficients: \\n\",model.intercept_, model.coef_)\nprint(\"Adjusted R-Squared:\\n\",stats.adj_r2_score(model, inputDF, outcomeDF))\nprint(\"P-value:\\n\",stats.coef_pval(model, inputDF, outcomeDF))","a1e37e65":"#Data Preprocessing\nd=pd.read_csv(\"..\/input\/mtcars.csv\")\nd = d[[\"mpg\",\"disp\"]]\nd = d.dropna()\n\n#Model Fit - Polynomial Regression (Quartic)\ninputDF = d[[\"disp\"]]\npoly_features = PolynomialFeatures ( degree = 4 , include_bias = False ) \ninputDF = poly_features . fit_transform ( inputDF ) \noutcomeDF = d[[\"mpg\"]]\nmodel = lm.LinearRegression()\nresults = model.fit(inputDF,outcomeDF)","9c9cdb51":"#Regression Coefficients, Adjusted R-Squared and P-value calculation  \nprint(\"Regression Coefficients: \\n\",model.intercept_, model.coef_)\nprint(\"Adjusted R-Squared:\\n\",stats.adj_r2_score(model, inputDF, outcomeDF))\nprint(\"P-value:\\n\",stats.coef_pval(model, inputDF, outcomeDF))","d8290bbb":"#Data Preprocessing\nd=pd.read_csv(\"..\/input\/mtcars.csv\")\nd = d[[\"mpg\",\"hp\",\"am\"]]\nd = d.dropna()\n\n#Model Fit - Linear Regression \ninputDF = d[[\"hp\",\"am\"]]\noutcomeDF = d[[\"mpg\"]]\nmodel = lm.LinearRegression()\nresults = model.fit(inputDF,outcomeDF)","ed48558b":"#Regression Coefficients, Adjusted R-Squared and P-value calculation  \nprint(\"Regression Coefficients: \\n\",model.intercept_, model.coef_)\nprint(\"Adjusted R-Squared:\\n\",stats.adj_r2_score(model, inputDF, outcomeDF))\nprint(\"P-value:\\n\",stats.coef_pval(model, inputDF, outcomeDF))","72f1f1a0":"#Data Preprocessing\nd=pd.read_csv(\"..\/input\/mtcars.csv\")\nd = d[[\"mpg\",\"hp\",\"am\"]]\nd = d.dropna()\n\n#Model Fit - Logarithmic Regression\ninputDF = d[[\"hp\"]]\ntransformer = FunctionTransformer(np.log1p, validate=True)\ninputDF = transformer.transform ( inputDF )\ninputDF = pd.concat([pd.DataFrame(inputDF),d[[\"am\"]]],axis=1, join='inner')\noutcomeDF = d[[\"mpg\"]]\nmodel = lm.LinearRegression()\nresults = model.fit(inputDF,outcomeDF)","b5cb6032":"#Regression Coefficients, Adjusted R-Squared and P-value calculation  \nprint(\"Regression Coefficients: \\n\",model.intercept_, model.coef_)\nprint(\"Adjusted R-Squared:\\n\",stats.adj_r2_score(model, inputDF, outcomeDF))\nprint(\"P-value:\\n\",stats.coef_pval(model, inputDF, outcomeDF))","e0d53dc6":"#Data Preprocessing\nd=pd.read_csv(\"..\/input\/default.csv\")\nd = d[[\"balance\",\"default\"]]\nd = d.dropna()\n\n#Transforming the dependent variable 'default'\ninputDF = d[[\"balance\"]]\noutcomeDF =d[[\"default\"]].values.ravel()\noutcomeDF = (outcomeDF == \"Yes\").astype(np.int)\n\n#Model Fit - Linear Regression\nmodel = lm.LinearRegression()\nresults = model.fit(inputDF,outcomeDF)","8134502f":"#Regression Coefficients, Adjusted R-Squared and P-value calculation  \nprint(\"Regression Coefficients: \\n\",model.intercept_, model.coef_)\nprint(\"Adjusted R-Squared:\\n\",stats.adj_r2_score(model, inputDF, outcomeDF))\nprint(\"P-value:\\n\",stats.coef_pval(model, inputDF, outcomeDF))","12bf4818":"#Data Preprocessing\nd=pd.read_csv(\"..\/input\/default.csv\")\nd = d[[\"balance\",\"default\"]]\nd = d.dropna()\n\n#Transforming the dependent variable 'default'\ninputDF = d[[\"balance\"]]\noutcomeDF =d[[\"default\"]].values.ravel()\noutcomeDF = (outcomeDF == \"Yes\").astype(np.int)\n\n#Model Fit - Logistic Regression\nlog_reg = LogisticRegression(solver='lbfgs')\nlog_reg.fit(inputDF,outcomeDF)\n\n#Regression Coefficients\nprint(log_reg.intercept_, log_reg.coef_)","7828283d":"#Data Preporcessing \nd=pd.read_csv(\"..\/input\/default.csv\")\nd = d[[\"default\",\"student\"]]\nd = d.dropna()\n\n#Model Fit - Logistic Regression\ninputDF = d[[\"student\"]]\ninputDF = (inputDF == \"Yes\").astype(np.int)\noutcomeDF =d[[\"default\"]].values.ravel()\noutcomeDF = (outcomeDF == \"Yes\").astype(np.int)\nlog_reg = LogisticRegression(solver='lbfgs')\nlog_reg.fit(inputDF,outcomeDF)\n\n#Regression Coefficients\nprint(log_reg.intercept_, log_reg.coef_)","77a06af3":"#Data Preporcessing \nd = pd.read_csv(\"..\/input\/default.csv\")\nd = d[[\"default\",\"student\",\"balance\"]]\nd = d.dropna()\n\n#Model Fit - Logistic Regression\ninputDF = d[[\"student\"]]\ninputDF = (inputDF == \"Yes\").astype(np.int)\ninputDF = pd.concat([inputDF,d[[\"balance\"]]],axis=1, join='inner')\noutcomeDF =d[[\"default\"]].values.ravel()\noutcomeDF = (outcomeDF == \"Yes\").astype(np.int)\nlog_reg = LogisticRegression(solver='lbfgs')\nlog_reg.fit(inputDF,outcomeDF)\n\n#Regression Coefficients\nprint(log_reg.intercept_, log_reg.coef_)\n","cb13aa3d":"#Data Preprocessing\nd=pd.read_csv(\"..\/input\/default.csv\")\nd = d[[\"default\",\"student\",\"balance\",\"income\"]]\nd = d.dropna()\n\n#Model Fit - Logistic Regression\ninputDF = d[[\"student\"]]\ninputDF = (inputDF == \"Yes\").astype(np.int)\ninputDF = pd.concat([inputDF,d[[\"balance\",\"income\"]]],axis=1, join='inner')\ninputDF.head()\noutcomeDF =d[[\"default\"]].values.ravel()\noutcomeDF = (outcomeDF == \"Yes\").astype(np.int)\nlog_reg = LogisticRegression(solver='lbfgs')\nlog_reg.fit(inputDF,outcomeDF)\n\n#Regression Coefficients \nprint(log_reg.intercept_, log_reg.coef_)","8206bd6e":"4) Using **rock.csv** to implement linear regression with SKLearn.","3679a963":"5) Linear Regression before logarithmic transformation ","b7e0d0f8":"### **Logistic Regression**\n\n1) Using **default.csv** to apply Linear Regression first by converting 'default' to 1 and 0.","4b8d67fe":"#  **Logistic Regression & Numerical Transformations**\nIn class questions - 04th April, 2019\n\n----------\n","9dcaee7e":"3) Using **default.csv** to apply Logistic Regression with 'student' as predictor.","a41ea28a":"### **Notebook Contents:**\n1. Regression Parameters: Adjusted R-Squared & P-value.\n2. Numerical Transformations.\n3. Logistic Regression. ","5dd81f51":"### **Python Libraries:**","0290e8ba":"### **Regression Parameters**\n\n1) Using **survey.csv** to determine regression coefficients, adjusted R-Squared and P-value with 'WrHnd' as independent variable and 'Height' as dependent variable. ","831a0db7":"2) Polynomial regression (Quadratic)\n","a16d4288":"6) Linear Regression with logarithmic transformation ","ba6ff199":"3) Polynomial regression (Cubic)\n","356725a1":"3) Using **rock.csv** to implement linear regression with Statsmodels.","7634045b":"2) Using **survey.csv** to determine regression coefficients, adjusted R-Squared and P-value with 'WrHnd' and 'Height' as independent variable and 'Height' as dependent variable.","51e43d0b":"4) Polynomial regression (Quartic)\n\n","9cd75e9d":"5) Using **default.csv** to apply Logistic Regression with more predictors. ","ebcbbfc3":"### **Numerical Transformations**\n\n1) Linear Regression","9df283ff":"2) Using **default.csv** to apply Logistic Regression with 'balance' as predictor.","f5993d8c":"4) Using **default.csv** to apply Logistic Regression with two variables."}}