{"cell_type":{"2c0d9659":"code","9791c1de":"code","5d6ec42c":"code","da40ae60":"code","d950067c":"code","0d836641":"code","f7a64c74":"code","006fe991":"code","5f0b5457":"code","dbe6317c":"code","44ee0aad":"code","1a60af7d":"code","ca117815":"code","7a024538":"markdown","700e77e6":"markdown","b19186cb":"markdown","e0e69a2b":"markdown","b364df80":"markdown","c34092bb":"markdown"},"source":{"2c0d9659":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9791c1de":"!pip uninstall kaggle\n!pip install --upgrade pip\n!pip install kaggle==1.5.6\n\n!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\n!ls -lha kaggle.json\n!chmod 600 ~\/.kaggle\/kaggle.json","5d6ec42c":"import pandas as pd\nimport numpy as np\n\nimport torch\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\n\nfrom sklearn import preprocessing","da40ae60":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","d950067c":"learning_rate = 0.1\ntraining_epochs = 100\nbatch_size = 1\nScaler = preprocessing.StandardScaler()","0d836641":"! kaggle competitions download -c predict-number-of-asthma-patient\n!unzip  predict-number-of-asthma-patient.zip\n\ntrain_data=pd.read_csv('train_disease.csv',header=None,skiprows=1,usecols=range(1,6))\ntest_data=pd.read_csv('test_disease.csv',header=None,skiprows=1,usecols=range(1,5))\n\nx_train_data=train_data.loc[:,0:4]\ny_train_data=train_data.loc[:,5]\n\nx_train_data=np.array(x_train_data)\ny_train_data=np.array(y_train_data)\nx_train_data = Scaler.fit_transform(x_train_data)\n\nx_train_data=torch.FloatTensor(x_train_data)\ny_train_data=torch.FloatTensor(y_train_data)","f7a64c74":"train_dataset = torch.utils.data.TensorDataset(x_train_data, y_train_data)\n\ndata_loader = torch.utils.data.DataLoader(dataset=train_dataset,\n                                            batch_size=batch_size,\n                                            shuffle=True,\n                                            drop_last=True)","006fe991":"linear1 = torch.nn.Linear(4,4,bias=True)\n\nrelu = torch.nn.ReLU()","5f0b5457":"torch.nn.init.xavier_uniform_(linear1.weight)","dbe6317c":"model = torch.nn.Sequential(linear1).to(device)","44ee0aad":"loss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate) \n\ntotal_batch = len(data_loader)\nfor epoch in range(training_epochs):\n  avg_cost = 0\n\n  for X, Y in data_loader:\n    \n    X = X.to(device)\n    Y = Y.to(device)\n\n    # \uadf8\ub798\ub514\uc5b8\ud2b8 \ucd08\uae30\ud654\n    optimizer.zero_grad()\n    # Forward \uacc4\uc0b0\n    hypothesis = model(X)\n    # Error \uacc4\uc0b0\n    cost = loss(hypothesis, Y)\n    # Backparopagation\n    cost.backward()\n    # \uac00\uc911\uce58 \uac31\uc2e0\n    optimizer.step()\n\n    # \ud3c9\uade0 Error \uacc4\uc0b0\n    avg_cost += cost \/ total_batch\n\n    print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))\n    \n  print('Learning finished')","1a60af7d":"with torch.no_grad():\n\n  x_test_data=test_data.loc[:,:]\n  x_test_data=np.array(x_test_data)\n  x_test_data = Scaler.transform(x_test_data)\n  x_test_data=torch.from_numpy(x_test_data).float().to(device)\n\n  prediction = model(x_test_data)\n\ncorrect_prediction = prediction.cpu().numpy().reshape(-1,1)\n\nsubmit=pd.read_csv('submission.csv')\n\nfor i in range(len(correct_prediction)):\n  submit['Expect'][i]=correct_prediction[i].item()\n\nsubmit","ca117815":"submit.to_csv('submission.csv',index=False,header=True)\n\n!kaggle competitions submit -c predict-number-of-asthma-patient -f submission.csv -m \"Message\"","7a024538":"\ubaa8\ub378 \ud559\uc2b5","700e77e6":"> \uc124\uba85 \ub3d9\uc601\uc0c1 \ub9c1\ud06c\n> * https:\/\/youtu.be\/278NE0wUIbk","b19186cb":"\ubaa8\ub378 \ud3c9\uac00","e0e69a2b":"**NN \ubaa8\ub378 \uc815\uc758**","b364df80":"> Xavier initialization","c34092bb":"> Activation Fuction : ReLU (Rectified Linear Unit)"}}