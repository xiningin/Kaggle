{"cell_type":{"26c065b3":"code","3791bf1a":"code","3f6ce249":"code","f35d230f":"code","fb6ed826":"code","fa2d7e6f":"code","0099a4a4":"code","025de8c5":"code","7d835765":"code","7c4c130a":"code","2890306f":"code","225f4635":"code","d99bfed8":"code","18508e10":"code","d0f4a105":"code","d536fc22":"code","d8d10dcd":"code","e68da3b9":"code","9a8873ab":"code","ed05445d":"code","722e6386":"code","212edf2e":"code","3b994ab7":"code","0e9a2e45":"code","bdfe80df":"markdown","d9893930":"markdown","a2b9b4d2":"markdown","8e618f76":"markdown"},"source":{"26c065b3":"import numpy as np # Matrix operations\nimport pandas as pd # Data Frame processing\nimport tensorflow as tf # Backend library for neural nets processing\nfrom keras import models, layers # Framework for neural nets creating\nimport os, shutil # filesystem operations \nfrom os import listdir\nfrom os.path import isfile, join\nimport random\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import multilabel_confusion_matrix\nfrom sklearn.metrics import confusion_matrix","3791bf1a":"tf.__version__","3f6ce249":"# GPU checking\ndevice_names = tf.test.gpu_device_name()\ndevice_names","f35d230f":"def create_subfolders(base_dir, class_names):\n    \"\"\"\n    Create subfolders in the base folder\n\n    Parameters\n    ----------\n    base_folder : string with output folder\n    class_names :  list of class names\n    \n    Return\n    ----------\n    created_dirs : list of created folder names    \n    \n    Example\n    ----------\n    create_subfolders(\"\/kaggle\/working\/data\", ['cats', 'dogs'])\n\n    \"\"\"\n    \n    subdir_list = ['train', 'validation', 'test']\n    created_dirs = []\n    try:\n        os.mkdir(base_dir)\n    \n        for names in subdir_list:\n            sub_dir = os.path.join(base_dir, names)\n            os.mkdir(sub_dir)\n            for class_name in class_names:\n                class_dir = os.path.join(sub_dir, class_name)\n                os.mkdir(class_dir)\n                created_dirs.append(class_dir)\n\n    except: print(\"Subfolders already exist\")\n    else: print('Subfolders are created')\n    return created_dirs\n        ","fb6ed826":"def data_split(data, test_ratio=0.3):\n    \"\"\"\n    Splitting the dataset\n\n    Parameters\n    ----------\n    data : original list with data\n    test_ratio : float test-train splitting ratio \n    \n    Return\n    ----------\n    train_data, val_data, test_data : list of created splits    \n \n    \"\"\"\n    \n    all_img_amount = len(data)\n    test_img_amount = val_img_amount = int(test_ratio*all_img_amount)\n    train_img_amount = int(all_img_amount - test_img_amount - val_img_amount) \n\n    random.shuffle(data)\n    train_data = data[:train_img_amount]\n    val_data = data[train_img_amount:train_img_amount+val_img_amount]\n    test_data = data[train_img_amount+val_img_amount:]\n    return train_data, val_data, test_data","fa2d7e6f":"def data_split_list(base_dir, class_list, test_ratio=0.3):\n    \"\"\"\n    Create splitting for all class lists\n\n    Parameters\n    ----------\n    base_dir : dictionary with base train and test directories, e.g. {'train':\"..\/input\/dogs-vs-cats\/train\/train\", 'test':\"..\/input\/dogs-vs-cats\/test\/test\"}\n    class_list :  list of class names, e.g. class_list = ['cat', 'dog']\n    test_ratio : float test-train splitting ratio\n    \n    Return\n    ----------\n    train_data, val_data, test_data : list of lists with file names    \n    \n    \"\"\"\n    \n    all_train = []\n    train_data = []\n    val_data = []\n    test_data = []\n\n    for class_name in class_list:\n        class_files = [f for f in listdir(base_dir['train']) if isfile(join(base_dir['train'], f)) and (class_name in f)]\n        all_train.append(class_files)\n\n    all_test = [f for f in listdir(base_dir['test']) if isfile(join(base_dir['test'], f))]\n    for i in range(len(class_list)):\n        train, val, test = data_split(all_train[i])\n        train_data.append(train)\n        val_data.append(val)\n        test_data.append(test)\n    return [train_data, val_data, test_data]","0099a4a4":"def copy_images_to_folders(base_dir, dataset_dirs, datasets):\n    \"\"\"\n    Distributes original images to appropriate folders. This is alternative to \n    train_test splitting method. It is assumed that files in the original _dataset_dir\n    includes classes in their names\n\n    Parameters\n    ----------\n    base_dir : base folder with original images\n    dataset_dirs : ratio for train\/test splitting like following\n                    ['\/kaggle\/working\/data\/train\/cats', \n                    '\/kaggle\/working\/data\/train\/dogs', \n                    '\/kaggle\/working\/data\/validation\/cats', \n                    '\/kaggle\/working\/data\/validation\/dogs', \n                    '\/kaggle\/working\/data\/test\/cats', \n                    '\/kaggle\/working\/data\/test\/dogs']\n    datasets : list of datasets with splitted images like following\n                    [train_data, val_data, test_data]\n            \n    \"\"\"\n     \n    class_amount = np.shape(datasets[0])[0]\n    dir_count = -1\n    \n    for dataset in datasets:\n        for i in range(class_amount):\n            dir_count = dir_count + 1\n            print(dir_count)\n            for filename in dataset[i]:\n                source = os.path.join(base_dir, filename)\n                destination = os.path.join(dataset_dirs[dir_count], filename)\n                shutil.copyfile(source, destination)\n    ","025de8c5":"def _round(vec, threshold):\n    output = []\n    for i in vec:\n        if i >= threshold:\n            output.append(np.ceil(i))\n        else:\n            output.append(np.floor(i))\n    return np.array(output)\n\ndef plot_confusion_matrix(cm,\n                      classes, \n                      normalized=False, \n                      title=None, \n                      cmap=plt.cm.Blues,\n                      size=(2,2)):\n    fig, ax = plt.subplots(figsize=size)\n    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)\n    ax.figure.colorbar(im, ax=ax)","7d835765":"original_dataset_dir = \"..\/input\/dogs-vs-cats\/train\/train\" \nbase_dir_dic = {'train':\"..\/input\/dogs-vs-cats\/train\/train\", 'test':\"..\/input\/dogs-vs-cats\/test\/test\"}\nclasses_list = ['cat', 'dog']\nsub_dirs = create_subfolders(\"\/kaggle\/working\/data\/\", classes_list)\ndatasets = data_split_list(base_dir_dic, classes_list)\n","7c4c130a":"sub_dirs","2890306f":"copy_images_to_folders(base_dir_dic['train'], sub_dirs, datasets)","225f4635":"#Making a convolutional model\nmodel = models.Sequential()\nmodel.add(layers.Flatten(input_shape=(150, 150, 3)))\nmodel.add(layers.Dense(512, activation=\"relu\"))\nmodel.add(layers.Dense(128, activation=\"relu\"))\nmodel.add(layers.Dense(64, activation = \"relu\"))\nmodel.add(layers.Dense(1, activation = \"softmax\"))","d99bfed8":"model.summary()","18508e10":"model.compile(\n  loss = \"binary_crossentropy\",\n  optimizer = optimizers.RMSprop(lr = 1e-4),\n  metrics = [\"acc\"]\n)","d0f4a105":"#Fetching train data and validation data and processing the data\ntrain_datagen = ImageDataGenerator(rescale = 1.00 \/ 255.0)\nval_datagen = ImageDataGenerator(rescale = 1.00 \/ 255.0)\ntest_datagen = ImageDataGenerator(rescale = 1.00 \/ 255.0)\n\ntrain_generator = train_datagen.flow_from_directory(\n    '\/kaggle\/working\/data\/train',\n    target_size = (150, 150),\n    batch_size = 20,\n    class_mode = \"binary\"\n\n)\n\nvalidation_generator = val_datagen.flow_from_directory(\n    '\/kaggle\/working\/data\/validation',\n    target_size = (150, 150),\n    batch_size = 20,\n    class_mode = \"binary\"\n)\n\ntest_generator = test_datagen.flow_from_directory(\n    '\/kaggle\/working\/data\/test',\n    target_size = (150, 150),\n    batch_size = 20,\n    class_mode = \"binary\"\n)","d536fc22":"#Training the model with train data and judging this training with validation data\nhistory = model.fit(\n    train_generator,\n    steps_per_epoch = 100,\n    epochs = 10,\n    validation_data = validation_generator,\n    validation_steps = 50   \n)","d8d10dcd":"#Train accuracy and validation accuracy vs epoch graph\n\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, label='Training acc')\nplt.plot(epochs, val_acc, label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, label='Training loss')\nplt.plot(epochs, val_loss, label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","e68da3b9":"y_pred = model.predict(test_generator)","9a8873ab":"y_pred = _round(y_pred, 0.5)","ed05445d":"y_true = test_generator.classes","722e6386":"mcm = multilabel_confusion_matrix(y_true, y_pred)\ncmn = confusion_matrix(y_true, y_pred)","212edf2e":"print(cmn)","3b994ab7":"labels = ['dog', 'cat']","0e9a2e45":"plot_confusion_matrix(cmn,\n                      labels, \n                      normalized=True, \n                      title=\"Model Performance\", \n                      cmap=plt.cm.Blues,\n                      size=(2,2))","bdfe80df":"\u041f\u043e\u0447\u0430\u0442\u043a\u043e\u0432\u0456 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0440\u043e\u0437\u043f\u043e\u0434\u0456\u043b\u044f\u044e\u0442\u044c\u0441\u044f \u0437\u0430 \u043f\u0456\u0434\u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0456\u044f\u043c\u0438 train, validation, test. \u0412 \u043a\u043e\u0436\u043d\u0456\u0439 \u0437 \u044f\u043a\u0438\u0445 \u0441\u0442\u0432\u043e\u0440\u044e\u044e\u0442\u044c\u0441\u044f \u043f\u0456\u0434\u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0456\u0457 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u044c \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0443\n","d9893930":"\u041f\u043e\u0431\u0443\u0434\u043e\u0432\u0430 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0457 \u043c\u0435\u0440\u0435\u0436\u0456","a2b9b4d2":"\u041f\u0456\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044f \u0431\u0456\u0431\u043b\u0456\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u043c\u0430\u043d\u0456\u043f\u0443\u043b\u044f\u0446\u0456\u0439 \u0437 \u0434\u0430\u043d\u0438\u043c\u0438 \u0442\u0430 \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0438\u0445 \u043c\u0435\u0440\u0435\u0436","8e618f76":"<table>\n    <tr>\n        <th>Number<\/th> \n        <th>Matrix<\/th> \n        <th>Convolutional model<\/th> \n    <\/tr> \n    <tr> \n        <td>1<\/td>\n        <td>[2681 1069]<br>[2688 1062]<\/td> \n        <td>4 \u0441\u043b\u043e\u044f. 10 \u044d\u043f\u043e\u0445. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440: RMSprop(lr = 1e-4)<br>\n            \u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u043b\u043e\u0439: 512 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u043e\u0439: 128 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0422\u0440\u0435\u0442\u0438\u0439 \u0441\u043b\u043e\u0439: 64 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0427\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u0441\u043b\u043e\u0439: 1 \u0443\u0437\u0435\u043b, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: sigmoid\n        <\/td> \n    <\/tr> \n    <tr> \n        <td>2<\/td>\n        <td>[1195 2555]<br>[1220 2530]<\/td> \n        <td>4 \u0441\u043b\u043e\u044f. 10 \u044d\u043f\u043e\u0445. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440: RMSprop(lr = 1e-4)<br>\n            \u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u043b\u043e\u0439: 512 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: selu.<br>\n            \u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u043e\u0439: 128 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: elu.<br>\n            \u0422\u0440\u0435\u0442\u0438\u0439 \u0441\u043b\u043e\u0439: 64 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0427\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u0441\u043b\u043e\u0439: 1 \u0443\u0437\u0435\u043b, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: sigmoid\n        <\/td> \n    <\/tr> \n    <tr>\n        <td>3<\/td>\n        <center><td>[2072 1678]<br>[2062 1688]<\/td> <\/center>\n        <td>3 \u0441\u043b\u043e\u044f. 10 \u044d\u043f\u043e\u0445. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440: RMSprop(lr = 1e-4)<br>\n            \u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u043b\u043e\u0439: 512 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: selu.<br>\n            \u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u043e\u0439: 128 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0422\u0440\u0435\u0442\u0438\u0439 \u0441\u043b\u043e\u0439: 1 \u0443\u0437\u0435\u043b, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: sigmoid\n        <\/td> \n    <\/tr> \n        <tr>\n        <td>4<\/td>\n        <td>[3673   77]<br>[3676   74]<\/td> \n        <td>4 \u0441\u043b\u043e\u044f. 10 \u044d\u043f\u043e\u0445. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440: RMSprop(lr = 1e-4)<br>\n            \u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u043b\u043e\u0439: 512 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: selu.<br>\n            \u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u043e\u0439: 128 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: selu.<br>\n            \u0422\u0440\u0435\u0442\u0438\u0439 \u0441\u043b\u043e\u0439: 64 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: selu.<br>\n            \u0427\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u0441\u043b\u043e\u0439: 1 \u0443\u0437\u0435\u043b, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: sigmoid\n        <\/td> \n    <\/tr> \n           <tr>\n        <td>5<\/td>\n        <td>[ 304 3446]<br>[ 288 3462]<\/td> \n        <td>4 \u0441\u043b\u043e\u044f. 10 \u044d\u043f\u043e\u0445. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440: RMSprop(lr = 1e-4)<br>\n            \u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u043b\u043e\u0439: 512 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: elu.<br>\n            \u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u043e\u0439: 128 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: elu.<br>\n            \u0422\u0440\u0435\u0442\u0438\u0439 \u0441\u043b\u043e\u0439: 64 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: elu.<br>\n            \u0427\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u0441\u043b\u043e\u0439: 1 \u0443\u0437\u0435\u043b, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: sigmoid\n        <\/td> \n    <\/tr> \n     <tr>\n        <td>6<\/td>\n        <td>[ 644 3106]<br>[ 683 3067]<\/td> \n        <td>4 \u0441\u043b\u043e\u044f. 100 \u044d\u043f\u043e\u0445. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440: RMSprop(lr = 1e-4)<br>\n            \u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u043b\u043e\u0439: 512 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: selu.<br>\n            \u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u043e\u0439: 128 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: selu.<br>\n            \u0422\u0440\u0435\u0442\u0438\u0439 \u0441\u043b\u043e\u0439: 64 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: selu.<br>\n            \u0427\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u0441\u043b\u043e\u0439: 1 \u0443\u0437\u0435\u043b, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: sigmoid\n        <\/td> \n    <\/tr> \n         <tr>\n        <td>7<\/td>\n        <td>[ 660 3090]<br>[ 664 3086]<\/td> \n        <td>4 \u0441\u043b\u043e\u044f. 100 \u044d\u043f\u043e\u0445. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440: RMSprop(lr = 1e-4)<br>\n            \u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u043b\u043e\u0439: 512 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u043e\u0439: 128 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0422\u0440\u0435\u0442\u0438\u0439 \u0441\u043b\u043e\u0439: 64 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0427\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u0441\u043b\u043e\u0439: 1 \u0443\u0437\u0435\u043b, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: sigmoid\n        <\/td> \n    <\/tr> \n             <tr>\n        <td>8<\/td>\n        <td>[ 2811  939]<br>[ 2728 1022]<\/td>\n        <td>4 \u0441\u043b\u043e\u044f. 30 \u044d\u043f\u043e\u0445. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440: RMSprop(lr = 1e-4)<br>\n            \u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u043b\u043e\u0439: 512 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u043e\u0439: 128 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0422\u0440\u0435\u0442\u0438\u0439 \u0441\u043b\u043e\u0439: 64 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0427\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u0441\u043b\u043e\u0439: 1 \u0443\u0437\u0435\u043b, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: sigmoid\n        <\/td> \n    <\/tr>\n    <tr>\n        <td>9<\/td>\n        <td>[ 3749    1]<br>[ 3749    1]<\/td>\n        <td>4 \u0441\u043b\u043e\u044f. 10 \u044d\u043f\u043e\u0445. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440: RMSprop(lr = 1e-2)<br>\n            \u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u043b\u043e\u0439: 512 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u043e\u0439: 128 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0422\u0440\u0435\u0442\u0438\u0439 \u0441\u043b\u043e\u0439: 64 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0427\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u0441\u043b\u043e\u0439: 1 \u0443\u0437\u0435\u043b, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: sigmoid\n        <\/td> \n    <\/tr>\n        <tr>\n        <td>10<\/td>\n        <td>[2567 1183]<br>[2546 1204]<\/td>\n        <td>4 \u0441\u043b\u043e\u044f. 10 \u044d\u043f\u043e\u0445. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440: RMSprop(lr = 1e-6)<br>\n            \u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u043b\u043e\u0439: 512 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u043e\u0439: 128 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0422\u0440\u0435\u0442\u0438\u0439 \u0441\u043b\u043e\u0439: 64 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0427\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u0441\u043b\u043e\u0439: 1 \u0443\u0437\u0435\u043b, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: sigmoid\n        <\/td> \n    <\/tr>\n        <tr>\n        <td>11<\/td>\n        <td>[0 3750]<br>[0 3750]<\/td>\n        <td>4 \u0441\u043b\u043e\u044f. 10 \u044d\u043f\u043e\u0445. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440: RMSprop(lr = 1e-4)<br>\n            \u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u043b\u043e\u0439: 512 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0412\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u043e\u0439: 128 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0422\u0440\u0435\u0442\u0438\u0439 \u0441\u043b\u043e\u0439: 64 \u0443\u0437\u043b\u043e\u0432, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: relu.<br>\n            \u0427\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u0441\u043b\u043e\u0439: 1 \u0443\u0437\u0435\u043b, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438: softmax\n        <\/td> \n    <\/tr>\n<\/table>\n\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044e \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 softmax \u043d\u0435\u043b\u044c\u0437\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e softmax \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043c\u043d\u043e\u0433\u043e\u043c\u0435\u0440\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u0437\u0434\u0435\u0441\u044c \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e 2 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \n    \u041f\u0440\u0438 \u0441\u043c\u0435\u043d\u0435 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 RMSprop(lr = 1e-2) \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0430\u043a\u0436\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u043d\u0435 \u0442\u043e\u0447\u043d\u044b\u043c\u0438, \u043f\u0440\u0438 RMSprop(lr = 1e-6) \u0438 \u043f\u0440\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 RMSprop(lr = 1e-4) \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u2014 \u0441\u0440\u0435\u0434\u043d\u0438\u0435. \n    \u0421\u043c\u0435\u043d\u0430 \u044d\u043f\u043e\u0445 \u0442\u0430\u043a\u0436\u0435 \u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432. \u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u044d\u043f\u043e\u0445 \u2014 \u0442\u0435\u043c \u043b\u0443\u0447\u0448\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n    \u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043d\u0435\u0442\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u044b\u043b\u0438 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 selu \u0438 10 \u044d\u043f\u043e\u0445. \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f."}}