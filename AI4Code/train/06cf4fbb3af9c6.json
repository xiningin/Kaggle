{"cell_type":{"a9eb066a":"code","26ee48f0":"code","6d34b4e5":"code","38990488":"code","d4eec27c":"code","ac39bd0d":"code","0e9fb263":"code","b99028f8":"code","3d7bab57":"code","95efceaf":"code","d70ccca6":"code","99f41705":"code","6657dfcc":"code","1ef9d2b1":"code","aa3ab0e0":"code","83a39130":"code","dd2c3436":"code","353455fe":"code","92840d23":"code","3d0c3efd":"code","f1889b40":"code","c3c9ca93":"code","c83e1a22":"code","83bbbbb4":"code","2ef2ddd2":"code","4b545c4a":"code","b34b24af":"code","df6801ab":"code","e7bc7f3e":"code","e664f987":"code","0ced29d4":"code","9b4f1d08":"code","908cce14":"code","caca3441":"code","77d906fa":"code","8f88911f":"code","86b227e4":"code","4d1267c7":"code","32993afa":"code","4b35fa88":"code","8fa63fb4":"code","12a2ffb2":"code","b10546fc":"code","beb91a18":"code","265d2ce0":"code","a3c25443":"code","1b79cf51":"code","ed2753fc":"code","0171e531":"code","42632e79":"code","d7d33682":"code","d8ea62ca":"code","fb59238a":"code","ef2d34de":"code","5a89ac57":"code","16e821e8":"code","e7456ddd":"code","84a4c0cc":"code","28a36546":"code","4ab138c3":"code","7ef16153":"code","b0b75dc8":"code","5bd7240e":"code","4014fa8b":"code","1562b308":"code","ef7a375d":"code","8a270459":"code","ca80698f":"code","99d3a3c5":"code","8502a42b":"code","25d7ad94":"code","0e560582":"code","ffaebba7":"code","f040e8d1":"code","f4fbaa84":"code","de728a7c":"markdown","17439fa4":"markdown","fa755144":"markdown","904a27e8":"markdown","1ec2875b":"markdown","f9bb2fb3":"markdown","ef10f3e8":"markdown","18c0969a":"markdown","450df67b":"markdown","b730c8fb":"markdown","4481e839":"markdown","ea631fcf":"markdown","e2f9fafb":"markdown","fb9930d6":"markdown","55f816ce":"markdown","cad2f6bd":"markdown","8121b205":"markdown","be9ca96e":"markdown","bff4921e":"markdown","fc837f2e":"markdown","013b200b":"markdown","da0f01f5":"markdown","28439268":"markdown","00558474":"markdown","ffca4c6b":"markdown","ba2fa8d5":"markdown","fa8b24bd":"markdown","9f3a5fb2":"markdown","ff63ad76":"markdown","2753d5cc":"markdown","5be96644":"markdown"},"source":{"a9eb066a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport re\nfrom datetime import datetime, timedelta\nimport math\n\n\n# Any results you write to the current directory are saved as output.","26ee48f0":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","6d34b4e5":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","38990488":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","d4eec27c":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","ac39bd0d":"data.duplicated(subset=None, keep='first').value_counts()","0e9fb263":"len(data['Restaurant_id'].value_counts().loc[lambda x : x > 1].index)","b99028f8":"data['Restaurant_id'].value_counts().loc[lambda x : x > 1].index[:10]","3d7bab57":"data['City'].value_counts().sort_index(ascending=True)","95efceaf":"cities_list = list(data['City'].value_counts().index)","d70ccca6":"data['Cuisine Style'].value_counts(dropna=False).head(20)","99f41705":"data[['City', 'Cuisine Style']].groupby('City').describe()","6657dfcc":"data[['City', 'Cuisine Style']].groupby('City')['Cuisine Style'].value_counts()['London'].head(10)","1ef9d2b1":"data[['City', 'Cuisine Style']].groupby('City')['Cuisine Style'].value_counts()['London'].head(1).index[0]","aa3ab0e0":"cuisine_dict = {}\nstyles_count = []\nfor style_set in data[data['Cuisine Style'].notna()]['Cuisine Style']:\n    style_set_list = style_set.replace('\"', '').replace('[', '').replace(']', '').replace(\"'\", \"\").\\\n                    replace(', ', ',').split(',') \n    styles_count.append(len(style_set_list))\n    for cuisine_style in style_set_list:\n        if cuisine_style in cuisine_dict:\n            cuisine_dict[cuisine_style] += 1\n        else:\n            cuisine_dict[cuisine_style] = 1\n\nsorted_cuisine_dict = {}\nsorted_keys = sorted(cuisine_dict, key=cuisine_dict.get)  # [1, 3, 2]\n\nfor w in sorted_keys:\n    sorted_cuisine_dict[w] = cuisine_dict[w]\n\nsorted_cuisine_dict","83a39130":"data['Price Range'].value_counts(dropna=False)","dd2c3436":"data[['City', 'Price Range']].groupby('City').describe()","353455fe":"data['Number of Reviews'].value_counts(dropna=False)","92840d23":"data['Number of Reviews'].describe()","3d0c3efd":"data[['City', 'Number of Reviews']].groupby('City').describe()","f1889b40":"len(data['Reviews'].value_counts().loc[lambda x : x > 1])","c3c9ca93":"data['Reviews'].value_counts().loc[lambda x : x > 1]","c83e1a22":"data['Number_of_Reviews_isNAN'] = pd.isna(data['Number of Reviews']).astype('uint8')\ndata['Cuisine_Style_isNAN'] = pd.isna(data['Cuisine Style']).astype('uint8')\ndata['Price_Range_isNAN'] = pd.isna(data['Price Range']).astype('uint8')","83bbbbb4":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \n# \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n\nclass FillNaByFeature():\n    def __init__(self, feature, value, data):\n        self.df = data[[feature, value]].groupby(feature).describe()\n        self.feature = feature\n        self.value = value\n    \n    def fill_na(self, row, statistic=0):\n        #if np.isnan(row[self.value]):\n        if pd.isnull(row[self.value]):\n            if statistic == 'mean':\n                return self.df[self.value, 'mean'][row[self.feature]]\n            if statistic == 'median':\n                return self.df[self.value, '50%'][row[self.feature]]\n            if statistic == 'top':\n                return self.df[self.value, 'top'][row[self.feature]]\n            if statistic == 0:\n                return 0\n        else:\n            return row[self.value]","2ef2ddd2":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'Number of Reviews' \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\nfilling_number_of_review = FillNaByFeature('City', 'Number of Reviews', data )","4b545c4a":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'Price Range' \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\nfilling_price_range = FillNaByFeature('City', 'Price Range', data)","b34b24af":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 'Number of Reviews' \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\ndata['Number of Reviews'] = data.apply(filling_number_of_review.fill_na, args=('median',), axis=1)","df6801ab":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 'Price Range' \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u043c\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\ndata['Price Range'] = data.apply(filling_price_range.fill_na, args=('top',), axis=1)","e7bc7f3e":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'Cuisine Style' \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\nfilling_cuisine_style = FillNaByFeature('City', 'Cuisine Style', data)","e664f987":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 'Cuisine Style' \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u043c\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\ndata['Cuisine Style'] = data.apply(filling_cuisine_style.fill_na, args=('top',), axis=1)","0ced29d4":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043b \u0432\u043d\u0430\u0447\u0430\u043b\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u043e\u043b\u0435 'Reviews' \u043f\u0443\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043a\u0430\u043a \u0438 \u0443 \u0434\u0440\u0443\u0433\u0438\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0441 \u043f\u0443\u0441\u0442\u044b\u043c\u0438 \u043e\u0431\u0437\u043e\u0440\u0430\u043c\u0438. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 'Reviews_isNaN' \u0434\u043b\u044f \u043f\u0443\u0441\u0442\u044b\u0445 \u043e\u0431\u0437\u043e\u0440\u043e\u0432.\n# \u0417\u0430\u0442\u0435\u043c \u0440\u0430\u0441\u043f\u0430\u0440\u0441\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u0437\u044b\u0432\u044b \u0438 \u0438\u0445 \u0434\u0430\u0442\u044b.\ndata['Reviews'] = data['Reviews'].fillna('[[], []]')","9b4f1d08":"data['Reviews_isNaN'] = data['Reviews'].apply(lambda x: 1 if x == '[[], []]' else 0)","908cce14":"data.info()","caca3441":"data.nunique(dropna=False)","77d906fa":"# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 'Price Range'\n\ndata['Price Range'] = data['Price Range'].apply(lambda x: 3 if x == '$$$$' else x)\ndata['Price Range'] = data['Price Range'].apply(lambda x: 2 if x == '$$ - $$$' else x)\ndata['Price Range'] = data['Price Range'].apply(lambda x: 1 if x == '$' else x)","8f88911f":"# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'Cuisine Style'\n\ndata['Cuisine Style'] = data['Cuisine Style'].apply(lambda x: x.replace('\"', '').replace('[', '').replace(']', '').replace(\"'\", \"\").replace(', ', ',').split(','))\ndf_cuisine_style = data['Cuisine Style'].str.join('@').str.get_dummies('@')\ndata = pd.concat([data, df_cuisine_style], axis=1)","86b227e4":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0438\u043b\u0435\u0439 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435\n\ndata['cuisine_style_count'] = data['Cuisine Style'].apply(lambda x: len(x))","4d1267c7":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043f\u043e\u043b\u044f 'Reviews' \n# \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: \u0441\u0442\u0440\u043e\u043a\u0430, \u0438\u043d\u0434\u0435\u043a\u0441 (0 - 3)\n# \u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: \u0421\u0442\u0440\u043e\u043a\u0438 \u043e\u0431\u0437\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0434\u0430\u0442\u044b\n\ndef review_parsing(input_str, index=\"\"):\n    input_str = input_str.replace(\"[\", \"\").replace(\"]\", \"\")\n    begin_item = True\n    limiter = \"\"\n    out_list = []\n    out_str =\"\"\n    limiter_count = 0\n    for symbol in enumerate(input_str):\n        if begin_item and symbol[1] != ' ' and symbol[1] != ',' and limiter_count == 0:\n            limiter = symbol[1]\n            begin_item = False\n            limiter_count += 1\n        elif symbol[1] == limiter:\n            if symbol[0] < len(input_str) - 1 and symbol[0] > 0:\n                if input_str[symbol[0] + 1] == ',' and (input_str[symbol[0] - 1] != '\\\\' or \\\n                                                        input_str[symbol[0] - 1] == '\\\\' and input_str[symbol[0] - 2] == '\\\\'):\n                    limiter_count += 1\n            else:\n                limiter_count += 1\n            if limiter_count == 2:\n                out_list.append(out_str)\n                out_str = \"\"\n                begin_item = True\n                limiter_count = 0\n        elif limiter_count == 1:\n            out_str += symbol[1]\n    if len(out_list) == 0:\n        out_list =  [np.NaN, np.NaN, np.NaN, np.NaN]\n    elif len(out_list) == 2:\n        out_list.insert(1, np.NaN)\n        out_list.append(np.NaN)\n    if index == '':\n        return out_list\n    else:\n        return out_list[index]","32993afa":"# \u0418\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 'Reviews' \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043e\u0442\u0437\u044b\u0432\ndata['last_review'] = data['Reviews'].apply(review_parsing, index=0)","4b35fa88":"# \u0418\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 'Reviews' \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043c \u0434\u0430\u0442\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430\ndata['last_review_date'] =  pd.to_datetime(data['Reviews'].apply(review_parsing, index=2))","8fa63fb4":"# \u0418\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 'Reviews' \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043c \u043f\u0440\u0435\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043e\u0442\u0437\u044b\u0432\ndata['prev_review'] = data['Reviews'].apply(review_parsing, index=1)","12a2ffb2":"# \u0418\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 'Reviews' \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043c \u0434\u0430\u0442\u0443 \u043f\u0440\u0435\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430\ndata['prev_review_date'] = pd.to_datetime(data['Reviews'].apply(review_parsing, index=3))","b10546fc":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u043c\ndata['review_days_elasped'] = (data.last_review_date - data.prev_review_date).apply(lambda x: abs(x.days))","beb91a18":"data[['Reviews', 'last_review', 'last_review_date', 'prev_review', 'prev_review_date', 'review_days_elasped' ]]","265d2ce0":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u043b-\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043e\u0442\u0437\u044b\u0432\u0435, \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u043e\u0442\u0437\u044b\u0432\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438\ndata['last_review_len'] = data['last_review'].apply(lambda x: len(x) if pd.notnull(x) else 0)\ndata['prev_review_len'] = data['prev_review'].apply(lambda x: len(x) if pd.notnull(x) else 0)","a3c25443":"data['review_days_elasped'] = data['review_days_elasped'].fillna(9999)","1b79cf51":"data.info(verbose=True, null_counts=True)","ed2753fc":"#\u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndata['number_reviews_ranking'] = data['Number of Reviews'] * data['Ranking']\ndata['numberofr_rank'] = data['Number of Reviews'] \/ data['Ranking']","0171e531":"#\u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432 \u043e\u0442\u0437\u044b\u0432\u0430\u0445\ndef find_good_words(s):\n    \"\"\"\n    \u0412\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432 \u043e\u0442\u0437\u044b\u0432\u0430\u0445\n    \"\"\"\n    good_words = ['good', 'yummy', 'fine', 'great', 'tasty',\n                  'satisfaction', 'amazing', 'nice', 'best',\n                  'friendly', 'pleasant', 'exellent', 'loved',\n                  'love', 'lovely', 'welcoming', 'wonderful',\n                  'perfect', 'delicious', 'favourite', 'sweet',\n                  'yum', 'adequate', 'happy', 'beautiful', 'liked', \n                  'like', 'finest', 'greatest', 'excellent', 'paramount', \n                  'preeminent', 'superlative', 'top', 'unsurpassed', \n                  'amazing', 'astonishing', 'awe-inspiring', 'awesome', \n                  'awful', 'awing']\n    count = 0\n    for item in good_words:\n        if item in s:\n            count += 1\n    return(count)\n\ndef find_bad_words(s):\n    \"\"\"\n    \u0412\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432 \u043e\u0442\u0437\u044b\u0432\u0430\u0445\n    \"\"\"\n    bad_words = ['bad', \"poor\", \"ill\", \"low\", \"inferior\", \"wretched\",\n                 'badly', 'awry', \"unpalatable\", \"unappetizing\", \"unsavory\",\n                 \"istasteful\", \"unpleasant\", \"nasty\", \"dirty\", \"rough\", \"roughly\", \"tough\",\n                 \"ugly\", \"graceless\", \"rudeness\", 'boorishness', 'loutishness', \n                 'disagreeable', 'nasty', 'soiled', 'sordid', 'unclean', 'unwashed',\n                 'indecent', 'lewd', 'obscene', 'raunchy', 'salacious',\n                 'cheating', 'foul', 'unsporting', 'unsportsmanlike']\n    count = 0\n    for item in bad_words:\n        if item in s:\n            count += 1\n    return(count)\n\ndata['Good_rev'] = data.Reviews.str.lower().apply(find_good_words)\ndata['Bad_rev'] = data.Reviews.str.lower().apply(find_bad_words)\ndata['Rev_delta'] = data['Good_rev'] - data['Bad_rev']","42632e79":"# \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndata.drop(['Restaurant_id', 'Cuisine Style', 'Reviews', 'ID_TA','URL_TA', \\\n                 'last_review', 'last_review_date', 'prev_review', 'prev_review_date'], axis = 1, inplace=True)","d7d33682":"data.info(verbose=True, null_counts=True)","d8ea62ca":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 dummi-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0435 'City'\ndata = pd.get_dummies(data, columns=['City'], dummy_na=True)","fb59238a":"plt.rcParams['figure.figsize'] = (10,7)\ndf_train['Ranking'].hist(bins=150)","ef2d34de":"df_train['City'].value_counts(ascending=True).plot(kind='barh')","5a89ac57":"df_train['Ranking'][df_train['City'] =='London'].hist(bins=100)","16e821e8":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nfor x in (df_train['City'].value_counts())[0:10].index:\n    df_train['Ranking'][df_train['City'] == x].hist(bins=100)\nplt.show()","e7456ddd":"df_train['Rating'].value_counts(ascending=True).plot(kind='barh')","84a4c0cc":"df_train['Ranking'][df_train['Rating'] == 5].hist(bins=100)","28a36546":"df_train['Ranking'][df_train['Rating'] < 4].hist(bins=100)","4ab138c3":"df_preproc = data","7ef16153":"df_preproc.info()","b0b75dc8":"# \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","5bd7240e":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","4014fa8b":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","1562b308":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","ef7a375d":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","8a270459":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","ca80698f":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","99d3a3c5":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","8502a42b":"test_data.sample(10)","25d7ad94":"test_data = test_data.drop(['Rating'], axis=1)","0e560582":"sample_submission","ffaebba7":"predict_submission = model.predict(test_data)","f040e8d1":"predict_submission","f4fbaa84":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","de728a7c":"\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0437\u044b\u0432\u044b. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0432\u0443\u0445. \u0422\u0430\u043a\u0436\u0435 8112 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0441 \u043f\u0443\u0441\u0442\u044b\u043c\u0438 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438","17439fa4":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u0438 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432","fa755144":"## 'Number of Revews'","904a27e8":"## \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c\n\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0438\n\n","1ec2875b":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","f9bb2fb3":"\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0442\u0438\u043b\u0435\u0439 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0445 \u043d\u0430\u0431\u043e\u0440\u0430\u0445 \u0441\u0442\u0438\u043b\u0435\u0439.","ef10f3e8":"### 'Restaurant_id'\n","18c0969a":"\u0421\u0442\u0440\u043e\u043a\u0438 \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c 'Restaurant_id' \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435, \u043d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u043f\u043e\u043b\u044f \u043a\u0430\u043a \u0433\u043e\u0440\u043e\u0434\u043e\u0432, \u0442\u0438\u043f\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c, \u0442\u0430\u043a \u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432 ID_TA. \u041c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u043d\u0435 \u043e\u0448\u0438\u0431\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445,  \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u043b\u0435 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442  \u043d\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d, \u0430 \u0441\u0435\u0442\u044c  \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0438\u043b\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430.\n","450df67b":"# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0435\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b","b730c8fb":"### 'City'","4481e839":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**","ea631fcf":"\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0435\u0441\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0412\u044b\u044f\u0441\u043d\u0438\u043c, \u0447\u0442\u043e \u043e\u043d\u0438 \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442.","e2f9fafb":"C \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0432\u0441\u0435 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435","fb9930d6":"# Cleaning and Prepping Data\n\u041e\u0431\u044b\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043a\u0443\u0447\u0443 \u043c\u0443\u0441\u043e\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0447\u0438\u0441\u0442\u0438\u0442\u044c, \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0438\u0445 \u0432 \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442. \u0427\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u2014 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 \u044d\u0442\u0430\u043f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0447\u0442\u0438 \u043b\u044e\u0431\u043e\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.   \n![](https:\/\/analyticsindiamag.com\/wp-content\/uploads\/2018\/01\/data-cleaning.png)","55f816ce":"# Model \n\u0421\u0430\u043c ML","cad2f6bd":"\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d, \u0447\u0442\u043e \u0432 \u043e\u0431\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435, \u0447\u0442\u043e \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u0439 '\\$\\$ \\- \\$\\\\$\\\\$'.","8121b205":"# import","be9ca96e":"# DATA","bff4921e":"### \u0413\u0440\u0430\u0444\u0438\u043a\u0438 \u0438 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b","fc837f2e":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u043a\u0430\u043a\u0438\u0435 \u043a\u0443\u0445\u043d\u0438 \u043f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0431\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c.","013b200b":"## 'Reviews'","da0f01f5":"\u0423 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u0442\u044f\u0433\u0438\u0432\u0430\u044e\u0442 \u0438 \u0434\u043e 2500 \u043c\u0435\u0441\u0442\u0430 \u0432 \u0441\u0432\u043e\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0435, \u0430 \u0447\u0442\u043e \u0442\u0430\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c?","28439268":"## 'Cuisine Style'","00558474":"## 'Price Range'","ffca4c6b":"### 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443 \u043d\u0430\u0441 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438.","ba2fa8d5":"## 1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN \n\u0423 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e. \u041d\u043e \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, **\u0434\u0430\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c!**   \n\u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a ","fa8b24bd":"# Data Preprocessing","9f3a5fb2":"\u0410 \u043a\u0442\u043e-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u043b, \u0447\u0442\u043e \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u044b \u043b\u044e\u0431\u044f\u0442 \u043f\u043e\u0435\u0441\u0442\u044c=) \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435:","ff63ad76":"\u041f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0442\u0440\u043e\u043a \u043d\u0435\u0442.","2753d5cc":"### \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","5be96644":"\u0423 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0435 \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445."}}