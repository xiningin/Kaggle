{"cell_type":{"884a5e6f":"code","74b83b0a":"code","58b19469":"code","df2105cc":"code","6f7f9ca5":"code","6d8efa1f":"code","e15f8d34":"code","60b50c7c":"code","94db6139":"code","b0c79ba4":"code","327a8e90":"code","cc466f95":"code","28885595":"code","8578642c":"code","4f58f76d":"code","57cfb6dd":"code","ded3a3fe":"code","591a270f":"code","159a914d":"code","126015f2":"code","9a35cbbc":"code","bffbce36":"code","86277308":"code","a2b624a6":"code","62515980":"code","33e99532":"code","474ce969":"markdown","fce310e0":"markdown","6e2d83f9":"markdown","41eecce7":"markdown","b8ed816f":"markdown","f9d965e8":"markdown","0415e09d":"markdown","67c03adf":"markdown","1c3ad897":"markdown","3796c03f":"markdown"},"source":{"884a5e6f":"import pandas as pd\nfrom pandas import ExcelWriter\nfrom pandas import ExcelFile\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM\nimport keras.backend as K\n\n# from keras_tqdm import TQDMNotebookCallback","74b83b0a":"Df = pd.read_excel('..\/input\/priceindia\/Prices.xlsx', sheet_name='Daily')","58b19469":"\ndf = Df.loc[8:, ['Unnamed: 3', 'Unnamed: 4']]\n\ndf = df.dropna()\n\ndf['Unnamed: 3'] = pd.to_datetime(df['Unnamed: 3'])\n\ndf = df.set_index('Unnamed: 3')\n\ndata = df.loc[:, ['Unnamed: 4']]","df2105cc":"df.head()","6f7f9ca5":"df.plot(figsize=(15, 10),color='r')\nplt.ylabel(\"Gold ETF Prices\")\nplt.title(\"Gold ETF Price Series\")\nplt.show()","6d8efa1f":"df.describe()","e15f8d34":"train, test = np.split(df, [int(.8*len(df))])\ntrain.shape","60b50c7c":"sc = MinMaxScaler()\n\ntrain_sc = sc.fit_transform(train)\ntest_sc = sc.transform(test)","94db6139":"X_train = train_sc[:-1]\ny_train = train_sc[1:]\n\nX_test = test_sc[:-1]\ny_test = test_sc[1:]","b0c79ba4":"ax = train.plot()\ntest.plot(ax=ax, figsize=(15,10))\nplt.legend(['train', 'test'])","327a8e90":"type(train)","cc466f95":"sc = MinMaxScaler()\n\ntrain_sc = sc.fit_transform(train)\ntest_sc = sc.transform(test)","28885595":"train_sc.shape","8578642c":"X_train = X_train[:, None]\nX_test = X_test[:, None]","4f58f76d":"X_train.shape","57cfb6dd":"K.clear_session()\nmodel = Sequential()\n\nmodel.add(LSTM(50, activation='relu', input_shape=(1, 1)))\n\nmodel.add(Dense(1))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n\nmodel.summary()","ded3a3fe":"%%time\nhistory = model.fit(X_train, y_train, epochs=500, verbose=0)","591a270f":"%%time\ny_pred = model.predict(X_test)\nplt.figure(figsize=(15, 10))\nplt.plot(y_test)\nplt.plot(y_pred)\nplt.legend(['real', 'predict'])\nplt.show()","159a914d":"loss = history.history['loss']\n\nepochs = range(len(loss)) # Get number of epochs","126015f2":"plt.plot(epochs, loss, 'r')\nplt.title('Training loss')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend([\"Loss\"])\n\nplt.figure(figsize=(15, 10))\nplt.show()","9a35cbbc":"score = model.evaluate(X_test,y_test, verbose=1)\nprint(score)","bffbce36":"score = sum(np.absolute(y_pred - y_test)) \/ sc.scale_\nprint(score)","86277308":"import math\nfrom sklearn.metrics import mean_squared_error\n\ndef rmse(y_test, y_pred):\n    return math.sqrt(mean_squared_error(y_test, y_pred))\nprint(rmse)\nprint(\"Accuracy: \", 100 - 100 * rmse(y_test, y_pred))","a2b624a6":"from sklearn.metrics import r2_score\nprint(r2_score(y_test, y_pred) * 100)","62515980":"model.save('my_model')","33e99532":"results = pd.DataFrame()\nepochs = [10]\nfor i in epochs:\n    error_scores = list()\n    for j in range(30):\n        history = model.fit(X_train, y_train, epochs=i, verbose=0)\n        y_pred = model.predict(X_test)\n        error_scores.append(rmse(y_test, y_pred))\n    \n    \n    results[str(i)] = error_scores\n\nprint(results.describe())\n# save boxplot\nresults.boxplot()\nplt.show()","474ce969":"### 5. the goodness of the fit","fce310e0":"sc.inverse_transform(y_pred)[-1]","6e2d83f9":"### 1.1 Import library","41eecce7":"### 1.2 Load dataset","b8ed816f":"### 7. Optimal","f9d965e8":"print(history.history)","0415e09d":"### 3. Pre training","67c03adf":"### 2. visualization","1c3ad897":"plt.semilogx(history.history[\"lr\"], history.history[\"loss\"])\nplt.axis([1e-8, 1e-4, 0, 60])\nplt.show()","3796c03f":"### 4. Create Neural network"}}