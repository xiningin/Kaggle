{"cell_type":{"c80d80df":"code","f95027d9":"code","a8f385f7":"code","d81f945d":"code","07ecfcc6":"code","1d5f167e":"code","aca2e1e4":"code","f02f2d3e":"code","7ec84c6b":"code","e3c70c41":"code","ae2007e7":"code","d08b58d3":"code","e22288e0":"code","9090f077":"code","cdb681bc":"code","a6db01c4":"code","b11fbc1c":"code","4b21802e":"code","10d5b702":"code","6fa0593d":"code","f7d5ee29":"code","cef0f040":"code","d3c2ae6a":"code","bbb93736":"code","85bf9dc0":"code","bdcad1f2":"code","edf54a65":"code","cfeb9852":"code","03fe0c26":"code","646d25ea":"markdown","b001efa6":"markdown","10e4e05e":"markdown","dee0b706":"markdown","b0a26e10":"markdown","1ec2f1e2":"markdown","2f3df047":"markdown","35168024":"markdown","51bf9780":"markdown","86d14875":"markdown","8a40d247":"markdown","cb4b29fd":"markdown","c24fbf09":"markdown","98594373":"markdown","d88955e4":"markdown","b58fcb78":"markdown","3e04754e":"markdown","7c859d49":"markdown","331f7e34":"markdown","f13a6c05":"markdown"},"source":{"c80d80df":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline\n\n# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets","f95027d9":"from keras.datasets import mnist\n\nfrom keras.models import Sequential, load_model\n\nfrom keras.layers import Dense, Dropout, Flatten\n\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\nfrom keras.utils.np_utils import to_categorical","a8f385f7":"# Importation des donn\u00e9es CIFAR10\n\nfrom keras.datasets import cifar10\n\n(X_train, y_train), (X_test, y_test) = cifar10.load_data()","d81f945d":"X_train.shape","07ecfcc6":"plt.imshow(X_test[0])","1d5f167e":"print(y_test[0])","aca2e1e4":"labels = ['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']\nnum_classes = 10","f02f2d3e":"plt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(X_test[i])\n    plt.title(labels[int(y_test[i])])","7ec84c6b":"# Normalisation entre 0 et 1\nX_train = X_train \/ 255\nX_test = X_test \/ 255","e3c70c41":"y_train1 = to_categorical(y_train)\ny_test1 = to_categorical(y_test)","ae2007e7":"y_test1","d08b58d3":"# R\u00e9seau convolutionnel simple\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(32, 32, 3), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","e22288e0":"model.summary()","9090f077":"# Apprentissage\ntrain = model.fit(X_train, y_train1, validation_data=(X_test, y_test1), epochs=20, batch_size=200, verbose=1)","cdb681bc":"# Test\nscores = model.evaluate(X_test, y_test1, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","a6db01c4":"print(train.history['accuracy'])","b11fbc1c":"print(train.history['val_accuracy'])","4b21802e":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","10d5b702":"plot_scores(train)","6fa0593d":"# Prediction\ny_cnn = model.predict_classes(X_test)","f7d5ee29":"cm = confusion_matrix(y_cnn,y_test)\nprint(cm)\nplt.figure(figsize = (12,10))","cef0f040":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j]) & (i<50):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        pred_classe = y_cnn[j].argmax(axis=-1)\n        plt.title('%s \/ %s' % (labels[int(y_cnn[j])], labels[int(y_test[j])]))\n        i+=1","d3c2ae6a":"# Mod\u00e8le CNN plus profond\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(32, 32, 3), activation='relu'))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","bbb93736":"model.summary()","85bf9dc0":"# Apprentissage\ntrain = model.fit(X_train, y_train1, validation_data=(X_test, y_test1), epochs=50, batch_size=200, verbose=1)\n\n# Test\nscores = model.evaluate(X_test, y_test1, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","bdcad1f2":"plot_scores(train)","edf54a65":"model.save('mnist_cnn2.h5')","cfeb9852":"new_model = load_model('mnist_cnn2.h5')\nnew_model.summary()","03fe0c26":"scores = new_model.evaluate(X_test, y_test1, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","646d25ea":"On peut afficher la matrice de confusion :","b001efa6":"On affiche 50 images o\u00f9 l'algorithme s'est tromp\u00e9 :","10e4e05e":"## Lecture des images","dee0b706":"## Mod\u00e8le CNN plus profond","b0a26e10":"## Keras et Tensorflow","1ec2f1e2":"Pour installer Keras et Tensorflow sans GPU :","2f3df047":"# R\u00e9seaux convolutionnels : CNN","35168024":"Le mod\u00e8le entrain\u00e9 peut \u00eatre sauvegard\u00e9 :","51bf9780":"L'apprentissage peut \u00eatre un peu long sans GPU ...","86d14875":"On peut ensuite utiliser le mod\u00e8le sans recommencer l'entra\u00eenement :","8a40d247":"On peut afficher la structure du mod\u00e8le :","cb4b29fd":"et sur l'ensemble de validation :","c24fbf09":"## Une couche convolutionnelle","98594373":"conda install -c conda-forge keras\nconda install -c conda-forge tensorflow ","d88955e4":"On va utiliser utiliser une couche convolutionnelle pour l'extraction des caract\u00e9ristiques, et une couche dense pour la classification :","b58fcb78":"On d\u00e9finit une fonction pour afficher un graphique des scores :","3e04754e":"## Initialisations","7c859d49":"On teste un mod\u00e8le avec plus de couches convolutionnelles :","331f7e34":"La variable *train* m\u00e9morise l'historique des scores sur l'ensemble d'apprentissage :","f13a6c05":"Pour installer la version GPU sous windows, cf https:\/\/medium.com\/@raza.shahzad\/setting-up-tensorflow-gpu-keras-in-conda-on-windows-10-75d4fd498198  \nSous Linux : http:\/\/deeplearning.lipingyang.org\/2017\/08\/01\/install-keras-with-tensorflow-backend\/  \nSous MacOS (avec GPU Nvidia) : https:\/\/blog.wenhaolee.com\/run-keras-on-mac-os-with-gpu\/"}}