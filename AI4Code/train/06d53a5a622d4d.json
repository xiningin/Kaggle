{"cell_type":{"591e93db":"code","1d397b3b":"code","f44b12cc":"code","bb5531ad":"code","1e78f4d5":"code","39099d4b":"code","ed305e36":"code","be79ede9":"code","f49c06b4":"code","32c44e36":"code","3147d786":"code","0ebf957d":"code","e297f35e":"code","44a35b20":"code","bce836b0":"code","2a613e8d":"code","40f33cdc":"code","b9fada85":"code","947da2d0":"code","5c4a1f68":"code","77fb52c9":"code","d2cc6f7c":"code","8c8644c6":"code","019c4985":"code","e51492d9":"code","8861ebf5":"code","05e316ec":"code","e2106596":"code","6019b7ea":"code","eaa9b859":"code","7c36bef5":"code","2c431dde":"code","d4e20af3":"code","91d1a5f5":"code","a2aa3979":"code","2818254c":"code","1ba4a93d":"code","aaaae916":"code","f0898c3c":"code","e9faa476":"code","3de72a44":"code","63f1adae":"code","9441a931":"code","423ccdc1":"code","b191cd8e":"code","8bb45ba1":"code","a93d8e9e":"code","cff510d8":"code","19ecf85e":"code","86b2fcec":"code","ab526db2":"code","009204b8":"code","e58d4c48":"code","e1a6b510":"code","fd5e63c6":"code","f3cd4ee9":"code","d0bbf508":"code","cc62980d":"code","6993fc01":"code","f4b55862":"code","0d7e23e6":"code","08904864":"code","9cedaf9a":"code","0debdd0f":"code","158c7fd9":"code","58ea6f90":"code","230f7447":"code","e75ade82":"code","7ec04ef5":"code","aeb58f4d":"code","251b1ff4":"code","996fdb88":"code","537926a7":"code","ca7593f2":"code","3f2a949c":"code","d2b360fd":"code","5595f4fd":"code","6a474c7e":"code","2cd537ce":"code","94eb8fd5":"code","cce607ee":"code","a84fc48b":"code","16d1f210":"code","4ad548a8":"code","80323a6c":"code","ca6afabf":"code","d03ac375":"code","d7ddfa83":"code","fc82c98c":"code","456c1659":"code","cca1b67a":"code","2b0d971f":"code","0badf7e6":"code","ce63c069":"code","6290aa01":"code","4a4ae85f":"code","c52019e7":"code","f1263262":"code","3e0ebab6":"code","72870c4c":"code","1d997742":"code","6deba204":"code","c7960b03":"code","afc60893":"code","14a8b59e":"code","909b4e6d":"code","91da3311":"code","a1b54df9":"markdown","d2573cba":"markdown","06db12fc":"markdown","81764d5f":"markdown","5dd5be3e":"markdown","53b35c60":"markdown","462fe37f":"markdown","6734cd35":"markdown","5367a201":"markdown","57ba3147":"markdown","2b4010c8":"markdown","d25e2ff6":"markdown","baf303aa":"markdown","26a27b1f":"markdown","4589dc9f":"markdown","bba8ed09":"markdown","31ab56eb":"markdown","549c71de":"markdown","57c950e3":"markdown","86fa23d2":"markdown","4b0134fe":"markdown","852039ff":"markdown","b4135f83":"markdown","64650966":"markdown","dc14e18b":"markdown","de3a01ad":"markdown","f84f922f":"markdown","268f0ac8":"markdown","9acec901":"markdown","b24eefd8":"markdown","5b5c8814":"markdown","c0f34215":"markdown","7bfd91cf":"markdown","05d8775e":"markdown","7eb668b2":"markdown","e8d78616":"markdown","03a04bf9":"markdown","b25d0950":"markdown","e290b81c":"markdown","20f54457":"markdown","42e380ca":"markdown","25700613":"markdown","8ef2e6f3":"markdown","1025f8ea":"markdown","e29ad2ad":"markdown","6b52ced0":"markdown","410eddfb":"markdown","75a43835":"markdown","8b3ef9d3":"markdown","5a3b6c7a":"markdown","c0dfeb35":"markdown","1e321b1a":"markdown","d04e6e73":"markdown","6d501073":"markdown","29b4b5ec":"markdown","20bd1393":"markdown","b113e57f":"markdown","6294f0ea":"markdown","1e1f2974":"markdown","0399f577":"markdown","b6500c43":"markdown","1d738079":"markdown","6c532739":"markdown","e479c7e5":"markdown","56f61934":"markdown","29c97330":"markdown","2f6fe9bb":"markdown","6b46f82a":"markdown","b5df5cce":"markdown","53bf4f9d":"markdown","f828b76a":"markdown","bc02a922":"markdown","3c62dbe9":"markdown","c88d2007":"markdown","c687ba04":"markdown","ab9e69ff":"markdown","15a017c9":"markdown","63b5b6ea":"markdown","b36a67e7":"markdown","256eeca4":"markdown","de7d8087":"markdown","9ab98e2f":"markdown","91b442dc":"markdown","03d78a58":"markdown","936a05d0":"markdown"},"source":{"591e93db":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))","1d397b3b":"IS_LOCAL = False\n\nif IS_LOCAL:\n    PATH=\"Not yet\"\nelse:\n    PATH=\"..\/input\/\"","f44b12cc":"train = pd.read_csv(PATH+\"train.csv\")\ntest = pd.read_csv(PATH+\"test.csv\")","bb5531ad":"print(\"The Dataset's shape for train is {}, for test is {}\".format(train.shape,test.shape))","1e78f4d5":"train.head()","39099d4b":"train.describe()","ed305e36":"train.info()","be79ede9":"def draw_kdeplot(column):\n\n    plt.figure(figsize=[8,6])\n    \n    sns.kdeplot(train[column],bw=0.5,label='train')\n    sns.kdeplot(test[column],bw=0.5,label='test')\n    \n    plt.xlabel(column,fontsize=12)\n    plt.title(f\"Distribution of {column}\",fontsize=20)\n    plt.show()","f49c06b4":"def make_count_df(df,column):\n    dummy = df.copy()\n    result_df = dummy[column].value_counts().sort_index().to_frame().reset_index().rename(columns={\"index\":column,column:\"counts\"})\n    return result_df","32c44e36":"def compare_categorical_ratio(count_train,count_test,column,adjust_x_annotate=5,fontsize=14):\n    fig, ax = plt.subplots(1,2,figsize=[12,6])\n    \n    ax1 = plt.subplot(1,2,1)\n    sns.barplot(x=column,y='counts',data=count_train,label='train')\n\n    for p in ax1.patches:\n        ax1.annotate('{:.2f}%'.format(p.get_height()\/count_train[\"counts\"].sum()) , (p.get_x()+p.get_width()\/adjust_x_annotate, p.get_height()),fontsize=fontsize)\n\n    ax2 = plt.subplot(1,2,2)\n    sns.barplot(x=column,y='counts',data=count_test,label='test')\n\n    for p in ax2.patches:\n        ax2.annotate('{:.2f}%'.format(p.get_height()\/count_test[\"counts\"].sum()) , (p.get_x()+p.get_width()\/adjust_x_annotate, p.get_height()),fontsize=fontsize)\n\n    plt.suptitle(f\"Comparing btw train and test about {column}\")\n    plt.show()","3147d786":"train.date.head(10)","0ebf957d":"train.date.apply(lambda x:str(x)[-7:]).value_counts()","e297f35e":"print(\"Minimum value of Price is {}, Maximum value of Price is {}\".format(train.price.min(),train.price.max()))","44a35b20":"plt.figure(figsize=[8,4])\nsns.distplot(train.price,hist=False,label='train',color='blue')\nplt.xticks(rotation=60)\nplt.title(\"Distribution of Price value\")","bce836b0":"train.bedrooms.value_counts().sort_index()","2a613e8d":"bedroom_train = make_count_df(train,\"bedrooms\")\nbedroom_test = make_count_df(test,\"bedrooms\")","40f33cdc":"plt.figure(figsize=[8,6])\n\n# ax = train.bedrooms.value_counts().sort_index().to_frame().plot(kind='bar',linewidth=2,figsize=[8,6])\n# for p in ax.patches:\n#     ax.annotate(p.get_height(), (p.get_x()-0.05, p.get_height()))\n\nsns.barplot(x='bedrooms',y='counts',data=bedroom_train,label='train',color='red')\nsns.barplot(x='bedrooms',y='counts',data=bedroom_test,label='test',color='blue')\nplt.legend()\nplt.ylabel(\"# of Bedrooms\",fontsize=12)\nplt.xlabel(\"Bedrooms\",fontsize=12)\n\nplt.title(\"Number of Bedrooms\",fontsize=20)","b9fada85":"train.bathrooms.value_counts().head()","947da2d0":"plt.figure(figsize=[8,6])\n\nsns.kdeplot(train.bathrooms,bw=0.5,label='train')\nsns.kdeplot(test.bathrooms,bw=0.5,label='test')\n\nplt.xlabel(\"Bathrooms(# of Bathrooms \/ # of Bedrooms)\",fontsize=12)\nplt.title(\"Distribution of Bathrooms(# of Bathrooms \/ # of Bedrooms)\",fontsize=20)","5c4a1f68":"train.bathrooms.mul(train.bedrooms).head()","77fb52c9":"print(\"The min number of real bathroom is {}, max number of real bathroom is {}\".format(train.bathrooms.mul(train.bedrooms).min(),train.bathrooms.mul(train.bedrooms).max()))","d2cc6f7c":"fig,ax = plt.subplots(1,2,figsize=[12,6])\n\nax1 = plt.subplot(1,2,1)\nsns.kdeplot(train.sqft_living,bw=0.5,label=\"train\")\nsns.kdeplot(test.sqft_living,bw=0.5,label='test')\nax1.set_xlabel(\"sqft_living\",fontsize=12)\n\nax2 = plt.subplot(1,2,2)\nsns.kdeplot(train.sqft_lot,bw=0.5,label=\"train\")\nsns.kdeplot(test.sqft_lot,bw=0.5,label='test')\nax2.set_xlabel(\"sqft_lot\",fontsize=12)\n\nplt.suptitle(\"Distribution of sqft_living and sqft_lot\")","8c8644c6":"train.floors.value_counts()","019c4985":"draw_kdeplot(\"floors\")","e51492d9":"waterfront_train = make_count_df(train,\"waterfront\")\nwaterfront_test = make_count_df(test,\"waterfront\")","8861ebf5":"compare_categorical_ratio(waterfront_train,waterfront_test,\"waterfront\",3)","05e316ec":"train.view.value_counts().sort_index()","e2106596":"view_train= make_count_df(train,\"view\")\nview_test = make_count_df(test,\"view\")","6019b7ea":"compare_categorical_ratio(view_train,view_test,\"view\",10)","eaa9b859":"condition_train = make_count_df(train,\"condition\")\ncondition_test = make_count_df(test,\"condition\")","7c36bef5":"compare_categorical_ratio(condition_train,condition_test,\"condition\",8)","2c431dde":"grade_train = make_count_df(train,\"grade\") \ngrade_test = make_count_df(test,\"grade\")","d4e20af3":"compare_categorical_ratio(grade_train,grade_test,\"grade\",adjust_x_annotate=20,fontsize=10)","91d1a5f5":"fig,ax = plt.subplots(1,2,figsize=[12,6])\n\nax1 = plt.subplot(1,2,1)\nsns.kdeplot(train.sqft_above,bw=0.5,label=\"train\")\nsns.kdeplot(test.sqft_above,bw=0.5,label='test')\nax1.set_xlabel(\"sqft_above\",fontsize=12)\n\nax2 = plt.subplot(1,2,2)\nsns.kdeplot(train.sqft_basement,bw=0.5,label=\"train\")\nsns.kdeplot(test.sqft_basement,bw=0.5,label='test')\nax2.set_xlabel(\"sqft_basement\",fontsize=12)\n\nplt.suptitle(\"Distribution of sqft_above and sqft_basement\")","a2aa3979":"print(\"Ratio of 0 in sqft_basement of train_set {:.2f}% among {}\".format(sum(train.sqft_basement==0)\/len(train)*100,len(train)))\nprint(\"Ratio of 0 in sqft_basement of test_set {:.2f}% among {}\".format(sum(test.sqft_basement==0)\/len(test)*100,len(test)))","2818254c":"train[\"is_basement\"] = ~(train.sqft_basement==0)\ntest[\"is_basement\"] = ~(test.sqft_basement==0)","1ba4a93d":"fig,ax = plt.subplots(1,2,figsize=[12,6])\n\nax1 = plt.subplot(1,2,1)\nsns.kdeplot(train.yr_built,bw=0.5,label=\"train\")\nsns.kdeplot(test.yr_built,bw=0.5,label='test')\nax1.set_xlabel(\"yr_built\",fontsize=12)\n\nax2 = plt.subplot(1,2,2)\nsns.kdeplot(train.yr_renovated,bw=0.5,label=\"train\")\nsns.kdeplot(test.yr_renovated,bw=0.5,label='test')\nax2.set_xlabel(\"yr_renovated\",fontsize=12)\n\nplt.suptitle(\"Distribution of yr_built and yr_renovated\")","aaaae916":"plt.figure(figsize=[6,6])\n\nsns.kdeplot(train.loc[train[\"yr_renovated\"]!= 0,\"yr_renovated\"],bw=0.5,label=\"train\")\nsns.kdeplot(test.loc[test[\"yr_renovated\"]!= 0,\"yr_renovated\"],bw=0.5,label=\"test\")\nplt.xlabel(\"yr_renovated\")\nplt.title(\"yr_renovated except for 0\")","f0898c3c":"print(\"Ratio of 0 in yr_renovated of train_set {:.2f}% among {}\".format(sum(train.yr_renovated==0)\/len(train)*100,len(train)))\nprint(\"Ratio of 0 in yr_renovated of test_set {:.2f}% among {}\".format(sum(test.yr_renovated==0)\/len(test)*100,len(test)))","e9faa476":"train[\"is_renovated\"] = ~(train.yr_renovated==0)\ntest[\"is_renovated\"] = ~(test.yr_renovated==0)","3de72a44":"train.zipcode.head()","63f1adae":"str(train.zipcode[0])","9441a931":"import re\n\nre1='(\\\\d{5})'\nrg = re.compile(re1)\n\ndummy_train = train.zipcode.apply(lambda x :rg.search(str(x)))\ndummy_test = test.zipcode.apply(lambda x :rg.search(str(x)))","423ccdc1":"print(\"The number of unexpected form about zipcode of train_set {}\".format(sum(dummy_train == 0)))\nprint(\"The number of unexpected form about zipcode of test_set {}\".format(sum(dummy_test == 0)))","b191cd8e":"plt.scatter(x=train.long,y=train.lat,color='red',label='train',alpha=0.7)\nplt.scatter(x=test.long,y=test.lat,color='blue',label='test',alpha=0.7)\nplt.legend()\nplt.xlabel(\"longitude\",fontsize=14)\nplt.ylabel(\"latitude\",fontsize=14)\nplt.title(\"Distribution of lat and long about train and test set\")","8bb45ba1":"sns.jointplot(x='long',y='lat',data=train,kind=\"hex\")\nplt.suptitle(\"Longitude and Latitude Distribution of train_set\")","a93d8e9e":"sns.jointplot(x='long',y='lat',data=test,kind=\"hex\")\nplt.suptitle(\"Longitude and Latitude Distribution of test_set\")","cff510d8":"print(\"The number of house which sqft_living is equal with sqft_living15 is {}\".format(sum(train[\"sqft_living\"] == train[\"sqft_living15\"])))\nprint(\"The number of house which sqft_lot is equal with sqft_lot15 is {}\".format(sum(train[\"sqft_lot\"] == train[\"sqft_lot15\"])))","19ecf85e":"print(\"The situation when sqft_living and sqft_lot are equal with 2015 at the same time is {} cases\".format(sum(np.logical_and(train[\"sqft_living\"]==train[\"sqft_living15\"],train[\"sqft_lot\"]==train[\"sqft_lot15\"]))))","86b2fcec":"renovated_train = train.loc[train.is_renovated == 1]\nprint(\"The number of renovated house is {}\".format(len(renovated_train)))","ab526db2":"not_renovated_train = train.loc[train.is_renovated == 0]\n\nprint(\"The number that sqft_living is same with 2015 is {} among {}\".format(sum(not_renovated_train.sqft_living == not_renovated_train.sqft_living15),len(not_renovated_train)))\nprint(\"The number that sqft_lot is same with 2015 is {} among {}\".format(sum(not_renovated_train.sqft_lot == not_renovated_train.sqft_lot15),len(not_renovated_train)))","009204b8":"b4_2015_renovated_train = renovated_train.loc[renovated_train[\"yr_renovated\"] < 2015]\nprint(\"The number that sqft_living is same with 2015 is {} among {} for renovated houses\".format(sum(b4_2015_renovated_train.sqft_living == b4_2015_renovated_train.sqft_living15),len(b4_2015_renovated_train)))\nprint(\"The number that sqft_lot is same with 2015 is {} among {} for renovated houses\".format(sum(b4_2015_renovated_train.sqft_lot == b4_2015_renovated_train.sqft_lot15),len(b4_2015_renovated_train)))","e58d4c48":"after_2015_renovated_train = train.loc[train[\"yr_renovated\"] > 2015]\nafter_2015_renovated_train.head()","e1a6b510":"train[\"date\"]= pd.to_datetime(train.date)\ntest[\"date\"]= pd.to_datetime(test.date)","fd5e63c6":"def decomposition_date(df):\n    dummy = df.copy()\n    \n    dummy[\"year\"] = dummy.date.apply(lambda x: str(x).split(\"-\")[0]).astype('int')\n    dummy[\"month\"] = dummy.date.apply(lambda x:str(x).split(\"-\")[1]).astype('int')\n    dummy[\"day\"] = dummy.date.apply(lambda x:str(x).split(\"-\")[-1]).apply(lambda x:x.split(\" \")[0]).astype('int')\n    \n    return dummy","f3cd4ee9":"decom_train = decomposition_date(train)\ndecom_test = decomposition_date(test)","d0bbf508":"decom_train.groupby('year')['price'].agg(['mean','median'])","cc62980d":"decom_train.groupby('year')['price'].agg(['mean','median']).plot(kind='bar',linewidth=2)\nplt.title(\"Mean and Median by Year\")\n\ndecom_train.groupby('month')['price'].agg(['mean','median']).plot(kind='bar',linewidth=1,figsize=[8,6])\nplt.title(\"Mean and Median by Month\")\n\ndecom_train.groupby('day')['price'].agg(['mean','median']).plot(kind='bar',linewidth=1,figsize=[20,6])\nplt.title(\"Mean and Median by Day\")","6993fc01":"ax = decom_train.groupby('bedrooms')['price'].agg(['mean','median']).plot(kind='bar',linewidth=2,figsize=[10,6])\n\nfor i,p in enumerate(ax.patches):\n    if i < 11:\n        ax.annotate(decom_train.bedrooms.value_counts().sort_index()[i],(p.get_x()+p.get_width()*0.5, p.get_y()+p.get_height()*1.01),fontsize=15,rotation=45)\n\nplt.title(\"Mean, Median value by Bedrooms\",fontsize=20)\nplt.xlabel(\"Bedrooms\",fontsize=12)\nplt.ylabel(\"Price\",fontsize=12)","f4b55862":"plt.figure(figsize=[12,6])\nsns.barplot(x='bathrooms',y='price',data=decom_train)","0d7e23e6":"def float_with_price(xlabel,df):\n    fig,ax = plt.subplots(1,2,figsize=[14,6])\n\n    ax1 = plt.subplot(1,2,1)\n    sns.scatterplot(x=xlabel,y='price',data=df,ci=0.95)\n    ax1.set_title(f\"Scatterplot about {xlabel} with price\",fontsize=14)\n    ax2 = plt.subplot(1,2,2)\n    sns.regplot(x=xlabel,y='price',data=df,ci=0.95)\n    ax2.set_title(f\"Regplot about {xlabel} with price\",fontsize=14)\n    plt.xticks(rotation=60)\n    plt.suptitle(f\"Relationship about {xlabel} with price\",fontsize=20)","08904864":"float_with_price(\"sqft_living\",train)","9cedaf9a":"# fig,ax = plt.subplots(1,2,figsize=[14,6])\n\n# ax1 = plt.subplot(1,2,1)\n# sns.scatterplot(x='sqft_living',y='price',data=train,ci=0.95)\n# ax1.set_title(\"Scatterplot about sqft_living with price\",fontsize=14)\n# ax2 = plt.subplot(1,2,2)\n# sns.regplot(x='sqft_living',y='price',data=train,ci=0.95)\n# ax2.set_title(\"Regplot about sqft_living with price\",fontsize=14)\n# plt.xticks(rotation=60)\n# plt.suptitle(\"Relationship about sqft_living with price\",fontsize=20)","0debdd0f":"float_with_price(\"sqft_lot\",train)","158c7fd9":"# fig,ax = plt.subplots(1,2,figsize=[14,6])\n\n# ax1 = plt.subplot(1,2,1)\n# sns.scatterplot(x='sqft_lot',y='price',data=train,ci=0.95)\n# ax1.set_title(\"Scatterplot about sqft_lot with price\",fontsize=14)\n# ax2 = plt.subplot(1,2,2)\n# sns.regplot(x='sqft_lot',y='price',data=train,ci=0.95)\n# ax2.set_title(\"Regplot about sqft_lot with price\",fontsize=14)\n# plt.xticks(rotation=60)\n# plt.suptitle(\"Relationship about sqft_lot with price\",fontsize=20)","58ea6f90":"train.columns.values","230f7447":"def ordinal_with_price(xlabel,df,rotation=0):\n    \n    fig,ax = plt.subplots(1,2,figsize=[14,6])\n\n    ax1 = plt.subplot(1,2,1)\n    sns.barplot(x=xlabel,y=\"price\",data=train)\n    ax1.set_xlabel(xlabel,fontsize=12)\n    ax1.set_ylabel(\"price\",fontsize=12)\n    ax1.set_title(f\"Barplot about {xlabel} with price\",fontsize=18)\n    \n    for i,p in enumerate(ax1.patches):\n\n        ax1.annotate(s=train[xlabel].value_counts().sort_index().values[i],xy= (p.get_x()+p.get_width()\/len(train[xlabel].value_counts()), p.get_height()*1.05),fontsize=15,rotation=rotation)\n        \n    ax2 = plt.subplot(1,2,2)\n    sns.boxplot(x=xlabel,y='price',data=train)\n    ax2.set_xlabel(xlabel,fontsize=12)\n    ax2.set_ylabel(\"price\",fontsize=12)\n    ax2.set_title(f\"Boxplot about {xlabel} with price\",fontsize=18)\n    \n    plt.suptitle(f\"Relationship about {xlabel} with price\",fontsize=20)","e75ade82":"ordinal_with_price(\"floors\",train)","7ec04ef5":"# fig,ax = plt.subplots(1,2,figsize=[14,6])\n\n# ax1 = plt.subplot(1,2,1)\n# sns.barplot(x=\"floors\",y=\"price\",data=train)\n# ax1.set_xlabel(\"floors\",fontsize=12)\n# ax1.set_ylabel(\"price\",fontsize=12)\n# ax1.set_title(\"Barplot about floors with price\",fontsize=18)\n# for i,p in enumerate(ax1.patches):\n#     if i == 5:\n#         ax1.annotate(s=train.floors.value_counts().sort_index().values[i],xy= (p.get_x()+p.get_width()\/4, p.get_height()*1.2),fontsize=15)\n#     else:\n#         ax1.annotate(s=train.floors.value_counts().sort_index().values[i],xy= (p.get_x()+p.get_width()\/5, p.get_height()*1.2),fontsize=15)\n        \n# ax2 = plt.subplot(1,2,2)\n# sns.boxplot(x='floors',y='price',data=train)\n# ax2.set_xlabel(\"floors\",fontsize=12)\n# ax2.set_ylabel(\"price\",fontsize=12)\n# ax2.set_title(\"Boxplot about floors with price\",fontsize=18)\n# plt.suptitle(\"Relationship about floors with price\",fontsize=20)","aeb58f4d":"ordinal_with_price(\"waterfront\",train)","251b1ff4":"# plt.subplots(1,2,figsize=[14,6])\n\n# ax1 = plt.subplot(1,2,1)\n# ax1 = train.groupby('waterfront')['price'].mean().plot(kind='bar',yerr=train.groupby('waterfront')['price'].std())\n# ax1.set_xlabel(\"waterfront\",fontsize=14)\n# ax1.set_ylabel(\"price\",fontsize=14)\n# ax1.set_title(\"Barplot for waterfront with price\")\n# # for i,p in enumerate(ax1.patches):\n# #     ax1.annotate(s=train.groupby('waterfront')['price'].mean().apply(lambda x:int(np.floor(x))).values[i],xy=(p.get_x()+p.get_width()\/8,p.get_y()+p.get_height()*1.2),fontsize=16)\n\n# ax2 = plt.subplot(1,2,2)\n# sns.boxplot(x=\"waterfront\",y=\"price\",data=train)\n# ax2.set_xlabel(\"waterfront\",fontsize=14)\n# ax2.set_ylabel(\"price\",fontsize=14)\n# ax2.set_title(\"Boxplot for waterfront with price\")\n\n# plt.suptitle(\"Relationship about waterfront with price\",fontsize=20)","996fdb88":"ordinal_with_price(\"view\",train)","537926a7":"# fig,ax = plt.subplots(1,2,figsize=[14,6])\n\n# ax1 = plt.subplot(1,2,1)\n# sns.barplot(x=\"view\",y=\"price\",data=train)\n# ax1.set_xlabel(\"view\",fontsize=12)\n# ax1.set_ylabel(\"price\",fontsize=12)\n# ax1.set_title(\"Barplot about view with price\",fontsize=18)\n# for i,p in enumerate(ax1.patches):\n# #     if i == 5:\n# #         ax1.annotate(s=train.view.value_counts().sort_index().values[i],xy= (p.get_x()+p.get_width()\/4, p.get_height()*1.2),fontsize=15\n#     ax1.annotate(s=train.view.value_counts().sort_index().values[i],xy= (p.get_x()+p.get_width()\/5, p.get_height()*1.1),fontsize=15)\n        \n# ax2 = plt.subplot(1,2,2)\n# sns.boxplot(x='view',y='price',data=train)\n# ax2.set_xlabel(\"view\",fontsize=12)\n# ax2.set_ylabel(\"price\",fontsize=12)\n# ax2.set_title(\"Boxplot about view with price\",fontsize=18)\n# plt.suptitle(\"Relationship about view with price\",fontsize=20)","ca7593f2":"ordinal_with_price(\"condition\",train)","3f2a949c":"ordinal_with_price(\"grade\",train,rotation=60)","d2b360fd":"float_with_price(\"sqft_above\",train)","5595f4fd":"float_with_price(\"sqft_basement\",train.loc[train[\"is_basement\"]])","6a474c7e":"float_with_price(\"yr_built\",train)","2cd537ce":"float_with_price(\"yr_renovated\",train.loc[train[\"is_renovated\"]])","94eb8fd5":"float_with_price(\"sqft_living15\",train)","cce607ee":"float_with_price(\"sqft_lot15\",train)","a84fc48b":"ordinal_with_price(\"is_basement\",train)","16d1f210":"ordinal_with_price(\"is_renovated\",train)","4ad548a8":"# \uc55e\uc5d0\uc11c \ub098\ub208 \ub144,\uc6d4,\uc77c\uacfc is_renovate, is_basement\ub4f1\uc774 \ud3ec\ud568\ub41c decom_train\uacfc decom_test\ub97c \uac01\uac01 train\uacfc test\ub85c \ud560\ub2f9\ud569\ub2c8\ub2e4.\ntrain = decom_train\ntest = decom_test","80323a6c":"plt.figure(figsize=[12,12])\n\n#id\ub294 \uc6b0\ub9ac\uc758 \ubaa8\ub378\uc5d0\uc11c \ud06c\uac8c \uc0c1\uad00\uc5c6\ub294 \ubaa8\ub378\uc774\uae30 \ub54c\ubb38\uc5d0 \uc0c1\uad00\uad00\uacc4\ub97c \ubd84\uc11d\ud568\uc5d0 \uc788\uc5b4\uc11c \ubc30\uc81c\ud558\uace0 heatmap\uc744 \uadf8\ub9bd\ub2c8\ub2e4.\nsns.heatmap(train.drop(\"id\",axis=1).corr(),annot=True,square=True,cmap=plt.cm.summer)","ca6afabf":"# from sklearn.preprocessing import LabelEncoder\n\n# #\ubaa8\ub4e0 \uceec\ub7fc\uac04\uc758 plot\uc744 \uadf8\ub824\ubcf4\uae30 \uc704\ud574 pairplot\uc744 \uc0ac\uc6a9\ud558\ub294\ub370 is_basement\uc640 is_renovated\uac00 boolean\uac12\uc774\ub77c\uc11c \uadf8\ub9ac\uc9c0 \ubabb\ud55c\ub2e4\ub294 \uc5d0\ub7ec \ud574\uacb0\uc744 \uc704\ud55c \ub77c\ubca8\uc778\ucf54\ub529.\n# def labelEncoding(train,test,cols):\n    \n#     dup_train = train.copy()\n#     dup_test = test.copy()\n    \n#     for col in cols:\n#         encoder = LabelEncoder()\n#         dup_train[f\"{col}\"]= encoder.fit_transform(train[f\"{col}\"])\n#         dup_test[f\"{col}\"] = encoder.transform(test[f\"{col}\"])\n\n#     return dup_train,dup_test\n\n# train_encoded, test_encoded = labelEncoding(train,test,[\"is_basement\",\"is_renovated\"])","d03ac375":"# train \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0\uc11c id,date,price\ub97c \uc81c\uc678\ud55c \uac83\ub4e4\uc5d0 \ub300\ud574\uc11c \uc0c1\uad00\uad00\uacc4\ub97c \uad6c\ud558\uace0 \uc808\ub313\uac12\uc744 \ucde8\ud574\uc11c 0.9\ubcf4\ub2e4 \ub192\uc740 \uc0c1\uad00\uad00\uacc4\ub97c \uac00\uc9c0\ub294 \uceec\ub7fc\ub4e4\uc744 \ucd94\ucd9c\ud574\ubd05\uc2dc\ub2e4.\ncorr_train = train[train.columns.values[3:]].corr().abs()\n# \uc544\ub798\uc758 \ucf54\ub4dc\ub97c \ud1b5\ud574 \ud6c8\ub828 \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0\uc11c \uc0c1\uad00\uad00\uacc4\uc758 \uac12\uc740 \uc8fc\ub300\uac01\uc131\ubd84\ub4e4\uc744 \uc81c\uc678\ud55c \uc0c1\uc0bc\uac01\ud589\ub82c\uc5d0 \ub300\ud574\uc11c\ub9cc \uc874\uc7ac\ud558\uac8c \ub429\ub2c8\ub2e4.\ntriu_corr_train = corr_train.where(np.triu(np.ones(corr_train.shape),k=1).astype(np.bool))\n# 0.9\ubcf4\ub2e4 \ub192\uc740 \uc784\uc758\uc758 \uceec\ub7fc\uc744\uac00\uc9c0\ub294 \uceec\ub7fc\uc744 \ub3c4\ucd9c\ud569\ub2c8\ub2e4.\ndel_cols = [col for col in triu_corr_train.columns if any(triu_corr_train[col] > 0.9)]\nprint(\"delcols: \",del_cols)\ntriu_corr_train[del_cols]","d7ddfa83":"train = train.drop(del_cols,axis=1)\ntest = test.drop(del_cols,axis=1)\ntrain.head()","fc82c98c":"corr_train = train[train.columns.values[3:]].corr().abs()\ntriu_corr_train = corr_train.where(np.triu(np.ones(corr_train.shape),k=1).astype(np.bool))\ncorr_df = triu_corr_train.stack().sort_values(ascending=False)\ncorr_df = corr_df.reset_index().rename(columns={\"level_0\":\"col_1\",\"level_1\":\"col_2\",0:\"correaltion\"})\ncorr_df.head()","456c1659":"corr_df[corr_df[\"correaltion\"] > 0.5]","cca1b67a":"unique_cols_1 = corr_df[\"col_1\"].unique()\nunique_cols_2 = corr_df[\"col_2\"].unique()\n\ntotal_cols = []\ndummy_cols = []\n\nfor col1 in unique_cols_1:\n    \n    if col1 in unique_cols_2:\n        dummy_cols.append(col1)\n    else:\n        total_cols.append(col1)\n\nfor col2 in unique_cols_2:\n    \n    total_cols.append(col2)","2b0d971f":"from sklearn.preprocessing import PolynomialFeatures\n\npoly = PolynomialFeatures(degree=2,interaction_only=True,include_bias=False)\ntrain_polyed_array = poly.fit_transform(train[total_cols])\ntest_polyed_array = poly.transform(test[total_cols])\n\n\ntrain_polyed = pd.DataFrame(train_polyed_array,columns=poly.get_feature_names(total_cols))\ntest_polyed = pd.DataFrame(test_polyed_array,columns=poly.get_feature_names(total_cols))\n\nassert train.shape[0] == train_polyed.shape[0]\nassert test.shape[0] == test_polyed.shape[0]\n\ntrain_polyed = pd.concat([train,train_polyed[[col for col in train_polyed.columns if col not in total_cols]]],axis=1)\ntest_polyed = pd.concat([test,test_polyed[[col for col in test_polyed.columns if col not in total_cols]]],axis=1)\n\nprint(\"The shape of train_polyed is {}, test_polyed is {}\".format(train_polyed.shape,test_polyed.shape))","0badf7e6":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import make_scorer\n\ndef rmse(y,preds):\n    return np.sqrt(mean_squared_error(y,preds))\n\nrmse_scorer = make_scorer(rmse,greater_is_better=False)\n\nX_train = train[train.columns.values[3:]]\ny_train = train[\"price\"]\n\nX_test = test[test.columns.values[2:]]\n\nX_train_polyed = train_polyed[train_polyed.columns.values[3:]]\ny_train_polyed = train_polyed[\"price\"]\n\nX_test_polyed = test_polyed[test_polyed.columns.values[2:]]\n\nrf = RandomForestRegressor(random_state=101)\n\norigin = np.mean(-cross_val_score(estimator=rf,X=X_train,y=y_train,cv=5,scoring=rmse_scorer))\npolyed = np.mean(-cross_val_score(estimator=rf,X=X_train_polyed,y=y_train_polyed,cv=5,scoring=rmse_scorer))\nprint(\"The score of origin is {}, polyed is {}\".format(origin,polyed))","ce63c069":"# Polyed dataset\uc744 \uc120\uc815\nrf.fit(X_train_polyed,y_train_polyed)\npreds = rf.predict(X_test_polyed)","6290aa01":"#\uc81c\ucd9c\nsubmission = pd.read_csv(PATH+\"sample_submission.csv\")\nassert len(submission) == len(preds)\nsubmission[\"price\"] = preds\nsubmission.to_csv(\".\/submission.csv\",index=False)","4a4ae85f":"from sklearn.linear_model import LinearRegression,Ridge,Lasso\nfrom sklearn.model_selection import GridSearchCV\n\nlr = LinearRegression()\nridge = Ridge()\nlasso = Lasso()\n\ndef model_cross_val_score(model,name):\n    origin = np.mean(-cross_val_score(model,X_train,y_train,scoring=rmse_scorer,cv=5))\n    polyed = np.mean(-cross_val_score(model,X_train_polyed,y_train_polyed,scoring=rmse_scorer,cv=5))\n    \n    print(f\"{name} model's rmse evaluation value is {origin} for origin, {polyed} for ployed\")\n    \nmodel_cross_val_score(lr,\"LinearRegression\")\nmodel_cross_val_score(ridge,\"Ridge\")\nmodel_cross_val_score(lasso,\"Lasso\")","c52019e7":"ridge_params = {\"alpha\":[0.01,0.1,1,10,100,1000]}\nlasso_params = {\"alpha\":[0.01,0.1,1,10,100,1000]}\n\nridge_grid = GridSearchCV(ridge,ridge_params,cv=5,n_jobs=4,scoring=rmse_scorer)\nlasso_grid = GridSearchCV(lasso,lasso_params,cv=5,n_jobs=4,scoring=rmse_scorer)\n\ndef model_grid_search(grid_model,name):\n    grid_model.fit(X_train,y_train)\n    print(f\"{name}'s origin best_params_ is {grid_model.best_params_}, best_score_ is {-grid_model.best_score_}\")\n    grid_model.fit(X_train_polyed,y_train_polyed)\n    print(f\"{name}'s polyed best_params_ is {grid_model.best_params_}, best_score_ is {-grid_model.best_score_}\")\n    \nmodel_grid_search(ridge_grid,\"RidgeGrid\")\nmodel_grid_search(lasso_grid,\"LassoGrid\")","f1263262":"# import lightgbm as lgb\n# from sklearn.model_selection import StratifiedKFold\n\n# def lgb_rmse(preds,dtrain):\n    \n# #     print(preds)\n# #     print(len(preds))\n    \n#     y= list(dtrain.get_label())\n# #     print(len(y))\n# #     print(y)\n#     score = np.sqrt(-mean_squared_error(y,preds))\n    \n# #     print(pd.concat([pd.Series(preds),pd.Series(y)],axis=1))\n    \n    \n#     return \"lgb_rsme\",score,False\n\n# def model_lgb(X_train,y_train,X_test,nfolds=5):\n    \n#     feature_names = train.columns.values\n    \n#     valid_scores = np.zeros(len(X_train))\n#     predictions = np.zeros(len(X_test))\n    \n#     feature_importance_df = pd.DataFrame()\n    \n#     params = {\n#         \"obejctive\":\"regression\",\n#         \"boosting\":\"gbrt\",\n#         \"learning_rate\":0.2,\n#         \"num_leaves\":31,\n#         \"seed\":1121,\n#         \"max_depth\":10,\n#         \"min_data_in_leaf\":20,\n#         \"min_sum_hessian_in_leaf\":1.0,\n#         \"bagging_fraction\":0.8,\n#         \"bagging_freq\":6,\n#         \"feature_fraction\":0.8,\n#         \"metric\":\"neg_mean_squared_error\"\n#     }\n    \n#     strkfold = StratifiedKFold(n_splits=nfolds,shuffle=True,random_state=12)\n    \n#     for i,(train_indices,valid_indices) in enumerate(strkfold.split(X_train.values,y_train.values)):\n        \n#         print(\"{} fold processing\".format(i+1),\"#\"*20)\n        \n#         d_train = lgb.Dataset(X_train.values[train_indices,:],label=y_train[train_indices])\n#         d_valid = lgb.Dataset(X_train.values[valid_indices,:],label=y_train[valid_indices])\n        \n#         n_rounds = 1000\n        \n#         lgb_model = lgb.train(params,d_train,num_boost_round=n_rounds,valid_sets=[d_train,d_valid],valid_names=[\"train\",\"valid\"],feval=\"neg_mean_squared_error\",verbose_eval=250,early_stopping_rounds=100)","3e0ebab6":"import lightgbm as lgb\nfrom sklearn.model_selection import StratifiedKFold\n\ndef lgb_rmse(y,preds):\n    \n    score = np.sqrt(mean_squared_error(y,preds))\n  \n    return \"lgb_rmse\",score,False\n\n\ndef model_lgb(X_train,y_train,X_test,nfolds=5):\n    \n    feature_names = X_train.columns.values\n    \n    valid_scores = np.zeros(len(X_train))\n    predictions = np.zeros(len(X_test))\n    \n    valid_scores_list = []\n    \n    importances = np.zeros(len(feature_names))\n    \n    feature_importance_df = pd.DataFrame()\n    feature_importance_df[\"features\"] = feature_names\n    \n    params = {'boosting_type': 'gbdt',\n             'class_weight': None,\n             'colsample_bytree': 1.0,\n             'importance_type': 'split',\n             'learning_rate': 0.1,\n             'max_depth': -1,\n             'min_child_samples': 20,\n             'min_child_weight': 0.001,\n             'min_split_gain': 0.0,\n             'n_estimators': 1000,\n             'n_jobs': -1,\n             'num_leaves': 31,\n             'objective': None,\n             'random_state': 101,\n             'reg_alpha': 0.0,\n             'reg_lambda': 0.0,\n             'silent': True,\n             'subsample': 1.0,\n             'subsample_for_bin': 200000,\n             'subsample_freq': 0}\n    \n    lgbr = lgb.LGBMRegressor(**params)\n    \n    strkfold = StratifiedKFold(n_splits=nfolds,shuffle=True,random_state=12)\n    \n    for i,(train_indices,valid_indices) in enumerate(strkfold.split(X_train.values,y_train.values)):\n        \n        X = X_train.values[train_indices]\n        y = y_train.values[train_indices]\n        X_valid = X_train.values[valid_indices]\n        y_valid = y_train.values[valid_indices]\n        \n        print(\"{} fold processing\".format(i+1),\"#\"*20)\n        \n        lgbr.fit(X,y,eval_set=[(X,y),(X_valid,y_valid)],eval_names=[\"train\",\"valid\"],eval_metric=lgb_rmse,verbose=250,early_stopping_rounds=100)\n        \n#         fi_df = pd.DataFrame(lgbr.feature_importances_)\n#         fi_df[\"folds\"] = i+1\n        \n#         feature_importance_df = pd.concat([feature_importance_df,fi_df],axis=0)\n    \n#         importances += lgbr.feature_importances_ \/ nfolds\n\n        valid_scores_list.append(lgbr.best_score_[\"valid\"][\"lgb_rmse\"])\n\n        feature_importance_df[f\"{i+1}\"] = lgbr.feature_importances_\n    \n        valid_score = lgbr.predict(X_valid)\n        prediction = lgbr.predict(X_test)\n        \n        valid_scores[valid_indices] += valid_score\n        predictions += prediction \/ nfolds\n        \n#     feature_importance_df= pd.DataFrame({\"features\":feature_names,\"importances\":importances})\n    print(f\"mean_valid_score is {np.mean(valid_scores_list)} at {nfolds}\")\n        \n    return feature_importance_df,predictions ","72870c4c":"lgb_fi,predictions = model_lgb(X_train,y_train,X_test)","1d997742":"lgb_fi[\"mean\"] = lgb_fi[lgb_fi.columns.values[1:]].mean(axis=1)\nlgb_fi[\"std\"] = lgb_fi[lgb_fi.columns.values[1:]].std(axis=1)\n# lgb_fi.head()\n\nlgb_fi_sorted = lgb_fi.sort_values(\"mean\",ascending=False)\nlgb_fi_sorted.head()","6deba204":"plt.figure(figsize=[6,40])\nsns.barplot(x='mean',y='features',data=lgb_fi_sorted,xerr=lgb_fi_sorted[\"std\"])\nplt.title(\"Feature Importances of lightgbm\",fontsize=12)","c7960b03":"#\uc81c\ucd9c\nsubmission = pd.read_csv(PATH+\"sample_submission.csv\")\nassert len(submission) == len(predictions)\nsubmission[\"price\"] = predictions\nsubmission.to_csv(\".\/lgb_origin_submission.csv\",index=False)","afc60893":"lgb_fi,predictions = model_lgb(X_train_polyed,y_train,X_test_polyed)","14a8b59e":"lgb_fi[\"mean\"] = lgb_fi[lgb_fi.columns.values[1:]].mean(axis=1)\nlgb_fi[\"std\"] = lgb_fi[lgb_fi.columns.values[1:]].std(axis=1)\n# lgb_fi.head()\n\nlgb_fi_sorted = lgb_fi.sort_values(\"mean\",ascending=False)\nlgb_fi_sorted.head()","909b4e6d":"plt.figure(figsize=[6,40])\nsns.barplot(x='mean',y='features',data=lgb_fi_sorted,xerr=lgb_fi_sorted[\"std\"])\nplt.title(\"Feature Importances of lightgbm\",fontsize=12)","91da3311":"#\uc81c\ucd9c\nsubmission = pd.read_csv(PATH+\"sample_submission.csv\")\nassert len(submission) == len(predictions)\nsubmission[\"price\"] = predictions\nsubmission.to_csv(\".\/lgb_ploy_submission.csv\",index=False)","a1b54df9":"## Date\n\n\ub0a0\uc9dc\ub97c \ub098\ud0c0\ub0b4\ub294 Date \ub370\uc774\ud130\uc5d0 \ub300\ud574 \uc54c\uc544\ubd05\uc2dc\ub2e4. \uc721\uc548\uc73c\ub85c \ubd24\uc744 \ub54c T\uc774\ud558\uc758 \uc815\ubcf4\uac00 \ubaa8\ub450 \ub3d9\uc77c\ud574 \ubcf4\uc785\ub2c8\ub2e4. \ub144\ub3c4\/\uc6d4\/\uc77c \uc774\ud558\uc758 \ub0b4\uc6a9\uc774 \ubaa8\ub450 \ub3d9\uc77c\ud574 \ubcf4\uc785\ub2c8\ub2e4. \ud55c \ubc88 \ud655\uc778\ud574\ubcfc\uae4c\uc694?? ","d2573cba":"# <a id='3'>Data Exploration<\/a>  \n## <a id='31'>\ub370\uc774\ud130 \ud655\uc778 \ubc0f \uc804\ucc98\ub9ac<\/a>  ","06db12fc":"# Grade\ngrade\ub294 King county grade\ubc29\uc2dd\uc774 \ubb34\uc5c7\uc778\uc9c0\ub294 \ubaa8\ub974\uaca0\uc9c0\ub9cc \uc0c1\ud0dc\ub97c \ub098\ud0c0\ub0b4\ub294 \uac83\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc774 \ub610\ud55c \uc660\uc9c0 \uc801\uc740 \ubc94\uc704\uc758 \uac12\ub4e4\uc744 \uac00\uc9c8 \uac83 \uac19\uc73c\uba70 \uc6b0\ub9ac\uac00 \uc0b4\ud3b4\ubcf4\uc558\ub358 Condition\uacfc \uc0c1\uad00\uad00\uacc4\uac00 \ud074\uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud55c\ubc88 \ub610 \uc0b4\ud3b4\ubd05\uc2dc\ub2e4.","81764d5f":"# lat and lon\n\uc704\uc758 \ub450 \uc9c0\ud45c\ub294 \uc704\ub3c4\uc640 \uacbd\ub3c4\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \ubb3c\ub860 \uc774\ubbf8 \uc81c \uc0dd\uac01\uc73c\ub85c\ub294 \uc6b0\ud3b8\ubc88\ud638\uc640 \uc704\ub3c4\uc640 \uacbd\ub3c4\ub294 \uad49\uc7a5\ud788 \ubc00\uc811\ud55c \uad00\ub828\uc774 \uc788\uc744 \uac83\uc774\ub77c\uace0 \uc0dd\uac01\ub429\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc704\ub3c4\uc640 \uacbd\ub3c4\ub97c \uc0b0\ud3ec\ub3c4\ub97c \uc774\uc6a9\ud574\uc11c \uac04\ub2e8\ud558\uac8c \uc704\uce58\ub97c \ucc0d\uc5b4\ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4.","5dd5be3e":"### 1. RandomForest","53b35c60":"# is_renovated","462fe37f":"# <a id='4'>Feature Engineering<\/a>\n\uc6b0\ub9ac\ub294 \uc0c1\uad00\uad00\uacc4\ub97c \uc0b4\ud3b4\ubcf4\uc558\ub294\ub370, \ub192\uc740 \uc0c1\uad00\uad00\uacc4\ub97c \uac00\uc9c0\ub294 \uceec\ub7fc\ub4e4 \uac04\uc758 \uc870\ud569\uc744 \ud1b5\ud574\uc11c \uc6b0\ub9ac\uc758 \ubaa9\ud45c\uac12\uc778 \"price\"\ub97c \ub354 \uc798 \uc608\uce21\ud560\uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub4e4\uc744 \uc870\ud569\ud558\uc5ec \ub354 \uac15\ub825\ud55c \uceec\ub7fc\ub4e4\uc744 \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4.","6734cd35":"\uc774\uc81c \uc6b0\ub9ac\ub294 \ud0c0\uac9f \ubcc0\uc218\uc778 Price \uc640 \uac1c\ubcc4 \uceec\ub7fc\ub4e4\uc5d0 \ub300\ud574\uc11c \uc774\uc57c\uae30 \ud574 \ubcfc\uac83\uc785\ub2c8\ub2e4.\n\n\uc77c\ub2e8 \uc6b0\ub9ac\uac00 \uac00\uc9c4 date\uc5d0\uc11c T\uc774\ud558\uc758 \ub0b4\uc6a9\uc740 \uc2dc\ubd84\ucd08\ub97c \ub098\ud0c0\ub0b4\ub294 \uac83 \uac19\uc740\ub370 \ubaa8\ub450 \uac19\uc740 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\ubbc0\ub85c \uc6b0\ub9ac\uac00 \uc720\uc6a9\ud558\ub2e4\uace0 \ud310\ub2e8\ub418\ub294 \ub144,\uc6d4,\uc77c \ud615\ud0dc\ub85c \uac00\uacf5\ud558\uc5ec \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4.","5367a201":"\uc6b0\ub9ac\uac00 heatmap\uc744 \uc0b4\ud3b4\ubcf4\uc558\uc744 \ub54c \uc0c1\uad00\uad00\uacc4\ub4e4 \uc911\uc5d0 is_renovated\uc640 year_renovated\uac00 1\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uac00\uc9c0\uace0 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ud0c0\uac9f\uceec\ub7fc\uacfc\uc758 \uad00\uacc4\uac00 \uc544\ub2cc \ubaa8\ub378\uc744 \uad6c\uc131\ud558\ub294 \uceec\ub7fc\uac04\uc758 \uad00\uacc4\uac00 \ub108\ubb34 \ub192\uc740 \uacbd\uc6b0\uc5d0\ub294 \ub2e4\uc911\uacf5\uc120\uc131\uc744 \uc77c\uc73c\ud0ac \ubb38\uc81c\uc758 \uc18c\uc9c0\uac00 \ub418\uae30 \ub54c\ubb38\uc5d0 \uc81c\uac70\ud574\uc8fc\ub294 \uac83\uc774 \ubc14\ub78c\uc9c1\ud569\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74, \uc6b0\ub9ac\uc758 \uceec\ub7fc\ub4e4\uc5d0 \ub300\ud574\uc11c 0.9\ub97c \ub118\ub294 \uc0c1\uad00\uad00\uacc4\ub97c \uac00\uc9c4 \uceec\ub7fc\ub4e4\uc744 \ucc3e\uc544\uc11c \uc774\ub4e4\uc744 \uc5c6\uc560\uc8fc\ub3c4\ub85d \ud569\uc2dc\ub2e4.","57ba3147":"Bathroom \uc9c0\ud45c\ub294 \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc774 \uc720\uc0ac\ud55c \ubd84\ud3ec\ub97c \ub530\ub974\uace0 \uc788\ub294 \uac83 \uac19\uad70\uc694.\n\n\uadf8\ub807\ub2e4\uba74 \uce68\uc2e4\uc218\ub97c \uacf1\ud574\uc11c \uc2e4\uc81c \ud654\uc7a5\uc2e4\uc758 \uc218\ub97c \ud55c \ubc88 \ud30c\uc545\ud574 \ubcfc\uae4c\uc694??","2b4010c8":"## <a id='33'>\uc804\uccb4 \ub370\uc774\ud130\ub4e4\uc758 \uc0c1\uad00\uad00\uacc4 \ud655\uc778<\/a>  \n\uc774\uc81c \ud0c0\uac9f\ub370\uc774\ud130\uc640 \uac1c\ubcc4\ub370\uc774\ud130\ub4e4\uc758 \uad00\uacc4\uac00 \uc544\ub2cc \ubaa8\ub4e0 \ub370\uc774\ud130\ub4e4\uc758 \uad00\uacc4\ub97c \uc0b4\ud3b4\ubcf4\ub824\uace0\ud569\ub2c8\ub2e4.","d25e2ff6":"### 2. Sklearn [lightgbm.LGBMRegressor]","baf303aa":"view\uac12\uc740 \uc5ec\ub7ec \ucc99\ub3c4\ub4e4 \uc911 \uc21c\uc11c\ucc99\ub3c4\ub97c \uac00\uc9c0\ub294 \uceec\ub7fc\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. (\ucc99\ub3c4\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub9e8 \uc704 Reference\ub97c \ud65c\uc6a9\ud558\uc138\uc694.)\ub2e8\uc9c0 \uc774 \uac12\ub9cc\ubcf4\uace0\ub294 \uc6b0\ub9ac\uac00 \ub2e4\ub8e8\ub294 view\ub77c\ub294 \ubcc0\uc218\uac00 0\uc73c\ub85c \uac08\uc218\ub85d \uc88b\uc740\uc9c0 5\ub85c \uac08\uc218\ub85d \uc88b\uc740\uc9c0 \ud30c\uc545\ud574\uc57c\ub420 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc704\uc758 \ub2e8\uacc4\uc640 \ub3d9\uc77c\ud558\uac8c \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc774 \uac00\uc9c0\ub294 \uac01 \uac12\ub4e4\uc5d0 \ub300\ud55c \ube44\uc911\uc774 \uc720\uc0ac\ud55c\uc9c0 \uc0b4\ud3b4\ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4.","26a27b1f":"# <a id='2'>\ud328\ud0a4\uc9c0 \ub4f1\ub85d \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30<\/a>  ","4589dc9f":"## <a id='32'>\ud0c0\uac9f \ubcc0\uc218\uc640 \uac01 \ub370\uc774\ud130\uc640\uc758 \uad00\uacc4<\/a>  ","bba8ed09":"\uc6b0\ub9ac\uac00 \ub450 \uceec\ub7fc\uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud588\uc744 \ub54c, sqft_living\uacfc sqft_above\uac00 \ub192\uc740 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uc784\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc774\ub7ec\ud55c \uac15\ub825\ud55c \uc0c1\uad00\uad00\uacc4\ub4e4\uc5d0 \ub300\ud574 \uac01\uac01\uc744 \uac1c\ubcc4\uc801\uc73c\ub85c \ub354\ud568\uc73c\ub85c\uc368 \uc88b\uc740 \uceec\ub7fc\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc9c0\ub9cc, PolymonialFeatures \ud328\ud0a4\uc9c0\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc190 \uc27d\uac8c \ub9cc\ub4e4\uc5b4\ubcf4\ub824\uace0\ud569\ub2c8\ub2e4.","31ab56eb":"# View\n\ubdf0\ub294 \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc88b\uc544\ubcf4\uc774\ub294 \uc9c0\uc5d0 \ub300\ud55c \uc815\ub3c4\uc778\ub370, \ubb58 \uc5b4\ub5bb\uac8c \ub098\ud0c0\ub0c8\ub2e4\ub294\uc9c0 \ubaa8\ub974\uaca0\uc73c\ub2c8\uae4c \ud55c\ubc88 \uc54c\uc544\ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4.","549c71de":"\uc704\ub3c4\uc640 \uacbd\ub3c4\uc758 \ubd84\ud3ec\ub294 \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc774 \uc720\uc0ac\ud558\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub450 \ub370\uc774\ud130 \uc14b\uc744 \uac1c\ubcc4\uc801\uc73c\ub85c \ubcf4\uc558\uc744 \ub54c \uc5b4\ub290 \ud2b9\uc815 \uc601\uc5ed\uc5d0 \uc9d1\uc758 \uc218\uac00 \ub9ce\uc740 \uac83 \uac19\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","57c950e3":"# Price\n\uac00\uaca9\uc740 \uc6b0\ub9ac\uac00 \uc608\uce21\ud558\uace0\uc790 \ud558\ub294 \ud0c0\uac9f \uac12\uc73c\ub85c\uc368 \ubaa8\ub378 \ud615\uc131\uc2dc \ub4e4\uc5b4\uac00\uac8c\ub420 label\uac12\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. \uac00\uaca9\uc5d0 \ub300\ud574\uc11c\ub294 \ubd84\ud3ec\ub97c \uc54c\uc544\ubd05\uc2dc\ub2e4.","86fa23d2":"feature engineering\ud560 \uceec\ub7fc\uc744 \uc120\uc815\ud558\ub294 \ub370 \uc788\uc5b4\uc11c \uc5bc\ub9c8\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ud574\uc57c \uc801\uc808\ud55c \uac12\uc774 \ub098\uc624\ub294 \uc9c0\ub294 \ud655\uc2e4\uce58 \uc54a\uc9c0\ub9cc, \uc800\ub294 0.5\ub97c \uae30\uc900\uc73c\ub85c \ub192\uc740 \uceec\ub7fc\ub4e4\uc5d0 \ub300\ud574\uc11c feature engineering\uc744 \uc9c4\ud589\ud560 \uac83\uc785\ub2c8\ub2e4.","4b0134fe":"\uc0c1\uc704 10\uac1c\uc758 \uac12\ub4e4\ub9cc \ud655\uc778\ud574 \ubd05\uc2dc\ub2e4. \uc6b0\ub9ac\uac00 \uc720\ucd94\ud55c\ub300\ub85c \ube44\uc2b7\ud558\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uad70\uc694. \uadf8\ub807\ub2e4\uba74 \ub144\/\uc6d4\/\uc77c \uc544\ub798\uc758 \uac12\ub4e4\uc5d0 \ub300\ud574 \uc790\uc138\ud788 \uc54c\uc544\ubd05\uc2dc\ub2e4.","852039ff":"sqft_above\uc640 sqft_basement\uc758 \ubd84\ud3ec\ub97c \ud55c \ubc88 \uc0b4\ud3b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc6b0\ub9ac\uac00 \ubcf4\uc558\uc744 \ub54c, \uc9c0\ud558\uc2e4\uc744 \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\uc740 \uc9d1\uc740 \uc804\uccb4 \ub370\uc774\ud130\uc14b\uc758 60\ud37c\uc13c\ud2b8\ub098 \ucc28\uc9c0\ud558\uace0 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc6b0\ub9ac\ub294 \uc9c0\ud558\uc2e4\uc744 \uac00\uc9c0\uace0 \uc788\ub294\uc9c0 \uc544\ub2cc\uc9c0\ub97c \ubcf4\uc5ec\uc8fc\ub294 Binary\ud2b9\uc131\uc744 \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\ubd05\uc2dc\ub2e4.","b4135f83":"\uc18c\uc22b\uc810\uc744 \uc808\uc0ad\ud558\uc600\uc9c0\ub9cc \ube44\uc728\uc774 \uc720\uc0ac\ud558\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 3\uc774 \uc911\uac04\uc0c1\ud0dc\ub97c \uc758\ubbf8\ud558\ub294 \uac83\uac19\uc73c\ubbc0\ub85c \uc9d1\uc758 \uc0c1\ud0dc\uac00 \ubcf4\ud1b5\uc778 \uc9d1\uc774 \uac00\uc7a5 \ub9ce\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","64650966":"### 1. Python[lightgbm]","dc14e18b":"\uce68\uc2e4\uc218\ub85c \ub098\ub204\uae30\ub97c \uc218\ud589\ud558\ub2e4 \ubcf4\ub2c8 \uc18c\uc218\uc810 \uac12\uc774 \uc0dd\uaca8\ubc84\ub838\uad70\uc694 \uadf8\ub807\ub2e4\uba74 kdeplot\uc744 \ud1b5\ud574\uc11c \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc758 \ubd84\ud3ec\uac00 \uc720\uc0ac\ud55c\uc9c0 \ud55c\ubc88 \uc0b4\ud3b4\ubd05\uc2dc\ub2e4.","de3a01ad":"Price\uc758 \ucd5c\uc18c\uac12\uc740 7\ub9cc 8\ucc9c\ub2ec\ub7ec\uc774\uba70, \ucd5c\ub300 \uac12\uc740 \ucd5c\uc18c \uac12\ubcf4\ub2e4 100\ubc30 \ub192\uc740 770\ub9cc\ub2ec\ub7ec\uc785\ub2c8\ub2e4. ","f84f922f":"\uc544\ub9c8 2015\ub144\ub3c4\uac00 \uc6b0\ub9ac\uac00 \uac00\uc9c4 yr_renovated\uc758 \ub9c8\uc9c0\ub9c9 \uac12\uc778 \ub4ef\ud558\ub2e4. \ub530\ub77c\uc11c 4\ubc88 \uac00\uc124 \ub610\ud55c \uae30\uac01\ud55c\ub2e4.","268f0ac8":"# Bedrooms\n\uc774 \uceec\ub7fc\uc740 \uc9d1\uc5d0\uc11c \uce68\uc2e4\uc758 \uc218\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uce68\uc2e4\uc758 \uc218\ub294 \ubcf4\ud1b5 \uc815\uc218\ud615\uc73c\ub85c \ud45c\ud604\ub420 \uac83 \uac19\uace0 \uc18c\uc22b\uc810\uac12\uc774 \uae30\ub300\ub418\uc9c0 \uc54a\uace0 \ubc29\uc758 \uac1c\uc218 \ub610\ud55c \ud55c\uc815\uc801\uc77c \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \ucc99\ub3c4\ub4e4 \uc911\uc5d0\uc11c \uba85\ubaa9\ucc99\ub3c4\uc5d0 \ud574\ub2f9\ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud55c \ubc88 \uc54c\uc544\ubcfc\uae4c\uc694? ","9acec901":"\uc8fc\uac70\uacf5\uac04\uacfc \ucd1d \uba74\uc801\uc740 \ubb54\uac00 \ub458 \uac04\uc758 \uc720\uc0ac\uc131\uc774 \uc788\uc744\uac70\ub77c\uace0 \uc9c1\uad00\uc801\uc73c\ub85c \uc0dd\uac01\uc774 \ub4ed\ub2c8\ub2e4\ub9cc \ub098\uc911\uc5d0 \uacc4\uc18d \uc0dd\uac01\ud574\ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4.","b24eefd8":"# <a id='0'> \ubaa9\ucc28 <\/a>\n\n- <a href='#1'>Reference<a>\n- <a href='#2'>\ud328\ud0a4\uc9c0 \ub4f1\ub85d \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30<a>\n- <a href='#3'>Data Exploration<a>\n    - <a href='#31'>\ub370\uc774\ud130 \ud655\uc778 \ubc0f \uc804\ucc98\ub9ac<a>\n    - <a href='#32'>\ud0c0\uac9f \ubcc0\uc218\uc640 \uac01 \ub370\uc774\ud130\uc758 \uad00\uacc4<a>\n    - <a href='#33'>\uc804\uccb4 \ub370\uc774\ud130\ub4e4\uc758 \uc0c1\uad00\uad00\uacc4 \ud655\uc778<a>\n- <a href='#4'>Feature Engineering<a>\n- <a href='#5'>Modeling<a>\n    - <a href='#51'>\uc801\uc808\ud55c \ubaa8\ub378\uc120\uc815<a>\n    - <a href='#52'>Feature Selection<a>\n    - <a href='#53'>Hyperparameter Tuning<a>\n    ","5b5c8814":"# Condition\n\uc774\ubc88 \uceec\ub7fc\uc740 \uc9d1\uc758 \uc0c1\ud0dc\ub97c \ub098\ud0c0\ub0b4\ub294 \uceec\ub7fc\uc785\ub2c8\ub2e4. \uc544\ub9c8\ub3c4 view\uc640 \uc720\uc0ac\ud558\uac8c \uc21c\uc11c\ucc99\ub3c4\uc77c \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ub192\uc740\ucabd\uc73c\ub85c \uac08 \uc218\ub85d \uc88b\uc740 \uc0c1\ud0dc\uc758 \uc9d1\uc784\uc774 \uc608\uc0c1\ub418\uc9c0\ub9cc \uc77c\ub2e8\uc740 \ud6c8\ub828\uc138\ud2b8\uc640 \ud14c\uc2a4\ud2b8\uc138\ud2b8\uc758 \ucee8\ub514\uc158 \uac12\ub4e4\uc5d0 \ub300\ud55c \ubd84\ud3ec\ub97c \uc54c\uc544\ubd05\uc2dc\ub2e4.","c0f34215":"\"T000000\"\uc774 \ubb34\uc2a8 \ub73b\uc778\uc9c0\ub294 \ubaa8\ub974\uaca0\uc9c0\ub9cc \uc544\ub9c8\ub3c4 \uc2dc\ubd84\ucd08\ubcc4\ub85c \ub450 \uc790\ub9ac\uc529 \ubc30\uc815\ub418\uc5b4 \uc788\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 Date\ub97c 5\uac1c\ub9cc \ucd9c\ub825\ud574\ubcf4\uc558\uc744 \ub54c \uc21c\uc11c\ub300\ub85c \uc815\ub82c\ub418\uc5b4 \uc788\ub294 \uac83 \uac19\uc9c0\ub3c4 \uc54a\uc2b5\ub2c8\ub2e4. \uc77c\ub2e8\uc740 Date\ub97c \uc704\ud574 \ub098\uc911\uc5d0 \ubcc0\ud658\uc774 \ud544\uc694\ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","7bfd91cf":"# sqft_above and sqft_basement\n\uc704\ub4e4\uc758 \uc9c0\ud45c\ub294 \uc9c0\ud558\ub97c \uc81c\uc678\ud55c \ud3c9\ub2f9\uba74\uc801\uacfc \uc9c0\ud558\uc2e4\uc758 \ud3c9\ub2f9\uba74\uc801\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc774\ub294 \ub9ce\uc740 \uba74\uc801\ub4e4\uc774 \uc5f0\uc18d\ud558\uc5ec \ubd84\ud3ec\ud560 \uac83\uac19\uae30 \ub54c\ubb38\uc5d0 kdeplot\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubd84\ud3ec\ub97c \uc54c\uc544\ubcfc \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \uc9c0\ud558\uc2e4\uc774 \uc5c6\ub294 \uc9d1\uc774 \uc788\uc744 \uc218 \uc788\ub294\ub370 \uc774\ub4e4 \uc9d1\uc740 \uc5b4\ub5a4 \ud615\ud0dc\ub85c \ub370\uc774\ud130\uac00 \ud45c\ud604\ub420\uc9c0 \uc0b4\ud3b4\ubcf4\uace0 \uadf8 \uac12\uc744 \uae30\uc900\uc810\uc73c\ub85c \uc7a1\uc544 \uc9c0\ud558\uc2e4\uc774 \uc788\ub294\uc9d1\uacfc \uc5c6\ub294\uc9d1\uacfc \uac19\uc740 Binary\ud615\ud0dc\uc758 \ucd94\uac00\uc801\uc778 \uc18d\uc131\uc744 \ub3c4\ucd9c\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","05d8775e":"\uc77c\ub2e8 \uc9d1\uc744 \uc9c0\uc740 \uac74\ucd95\ub144\ub3c4\ub294 \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc774 \uc720\uc0ac\ud55c \ubd84\ud3ec\ub97c \ub098\ud0c0\ub0c8\uace0, \uc218\ub9ac\ub144\ub3c4\ub294 \uc81c\uac00 \uc608\uce21\ud588\ub358 \uac83 \ucc98\ub7fc \uc218\ub9ac\ud558\uc9c0 \uc54a\uc740 \uc9d1\ub4e4\uc740 0\uc774\ub77c\ub294 \ub144\ub3c4\ub97c \uac00\uc9c0\uae30 \ub54c\ubb38\uc5d0 kdeplot\uc774 \ud2b9\uc774\ud55c \ubaa8\uc591\uc744 \uac00\uc9d1\ub2c8\ub2e4. yr_renovated\ub97c \uc218\ub9ac\ud558\uc9c0 \uc54a\uc740 \uc9d1\uc744 \uc81c\uc678\ud55c \ubd84\ud3ec\ub97c \ud55c \ubc88 \uc0b4\ud3b4\ubcf4\ub824\uace0\ud569\ub2c8\ub2e4.","7eb668b2":"\uc218\ub9ac\ub41c \uc9d1\ub4e4\uc744 \ubcf8\ub2e4\uba74 \ucd5c\uc18c 1930\ub144\ub3c4\ubd80\ud130 \ud574\ub2f9 \uac12\uc774 \ubd80\uc5ec\uac00 \ub418\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc6b0\ub9ac\uac00 sqft_basement\uc5d0 \uc2e4\ud589\ud588\ub358 \uac83\uacfc \uac19\uc774 \uc218\ub9ac\uc5ec\ubd80\ub97c \ub17c\ub9ac\ud615 \uac12\uc73c\ub85c \ub098\ud0c0\ub0b4\ub294 \uceec\ub7fc\uc744 \ub9cc\ub4e4\uc5b4 \uc90d\uc2dc\ub2e4.","e8d78616":"\uc6b0\ub9ac\ub294 \ubc14\ub85c zipcode\ub97c \uc6b0\ub9ac\uc758 \ubd84\uc11d\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 \uac04\ub2e8\ud55c \uc815\uaddc\ud45c\ud604\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac80\ud1a0\ud574 \ubcf4\uc558\uc744 \ub54c \uc6b0\ub9ac\uac00 \uc815\ud574\ub454 5\uac1c\uc758 \uc5f0\uc18d\ub41c \uc6b0\ud3b8\ubc88\ud638\ub97c \ub530\ub974\uc9c0 \uc54a\ub294 \uac83\uc740 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc54c\uc544\ub0c8\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. ","03a04bf9":"\uc800\ub294 \uc544\ud30c\ud2b8 \ub610\ud55c \ud3ec\ud568\ub420 \uac83 \uac19\uc558\uc9c0\ub9cc \uce35\uc218\uc758 \ub192\uc774\ub97c \ubcf4\ub2c8 \ub2e8\ub3c5\uc8fc\ud0dd\ub9cc \uc6b0\ub9ac\uc758 \ub370\uc774\ud130\uc14b\uc5d0 \ud3ec\ud568\ub41c \ub4ef\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc608\uc0c1\uacfc\ub2ec\ub9ac \uc18c\uc22b\uc810\uc774 0.5 \ub2e8\uc704\ub85c \uc788\ub294\ub370, \uc81c \uc0dd\uac01\uc5d0\ub294 \ub2e4\ub77d\ubc29 \uac19\uc740 \uac83\ub4e4\uc744 .5\uce35\uc73c\ub85c \uc0dd\uac01\ud588\uc9c0 \uc54a\uc744\uae4c \uc2f6\uc2b5\ub2c8\ub2e4.","b25d0950":"# Bathrooms\n \uce68\uc2e4\uc758 \uac1c\uc218\ub2f9 \ud654\uc7a5\uc2e4 \uc218\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4 (\ud654\uc7a5\uc2e4\uc218 \/ \uce68\uc2e4\uc218). \uc65c \uce68\uc2e4\uc758 \uac1c\uc218 \ub2f9 \ud654\uc7a5\uc2e4 \uc218\ub97c \ub098\ud0c0\ub0c8\ub294\uc9c0\ub294 \ubaa8\ub974\uaca0\uc9c0\ub9cc, \ud654\uc7a5\uc2e4\uc758 \uac1c\uc218\ub3c4 \uc9d1\uac12\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\uc744\uae4c\uc694?? \ubd80\uc7a3\uc9d1 \uce5c\uad6c\uc9d1\uc5d0 \uac00\uba74 \ud654\uc7a5\uc2e4\uc774 3\uac1c\ub098 \uc788\ub294 \uac83 \ucc98\ub7fc\uc694!! \uadf8\ub807\ub2e4\uba74 \uc774\ub97c \uc774\uc6a9\ud558\uba74 \uc21c\uc218\ud55c \ud654\uc7a5\uc2e4\uc758 \uc218\ub3c4 \ub3c4\ucd9c\ud560 \uc218 \uc788\uaca0\uc8e0?","e290b81c":"# sqft_living_15 and sqft_lot_15\n\uc704 \ub450\uac1c\uc758 \uceec\ub7fc\uc740 2015\ub144\ub3c4 \uae30\uc900\uc758 \uc2e4\uc81c \uac70\uc8fc\uacf5\uac04\uc758 \ud3c9\ubc29\ud53c\ud2b8\uc640 \uc804\uccb4 \uacf5\uac04\uc758 \ud3c9\ubc29\ud53c\ud2b8\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc774 \ub450 \uceec\ub7fc\uc5d0 \ub300\ud574\uc11c \uc0dd\uac01\ud574\ubcf4\uba74,\n1. \uc218\ub9ac\uac00 \ub418\uc9c0 \uc54a\uc740 \uc9d1\uc758 \uacbd\uc6b0\uc5d0\ub294 \uae30\uc874\uc758 sqft_living, sqft_lot\uacfc \uac19\uc740 \uac12\uc744 \uac00\uc9c8 \uac83\uc774\ub2e4.\n2. 2015\ub144\ub3c4 \uc804\uc5d0 \uc218\ub9ac\ub97c \ud55c \uc9d1\uc758 \uacbd\uc6b0\uc5d0\ub294 \uac12\uc774 \uc5b4\ub5bb\uac8c \ub418\uc5b4 \uc788\uc744 \uae4c? \uac19\uc744\uae4c \ub2e4\ub97c\uae4c? \ub9cc\uc57d \ub2e4\ub974\ub2e4\uba74 \uc778\uad6c\uc8fc\ud0dd\ucd1d\uc870\uc0ac\uc640 \uac19\uc740 \uc870\uc0ac\uc6d0\ub4e4\uc774 \uac00\uad6c\ub97c \ub3cc\uc544\ub2e4\ub2c8\uba74\uc11c \uac1c\uc870\ub41c \uc9d1\uc5d0 \ub300\ud574\uc11c\ub294 \uae30\ub85d\uc744 \uc0c8\ub85c\uc774 \ud588\uc744\uae4c?\n3. 2015\ub144\ub3c4 \uc774\ud6c4\uc5d0 \uc218\ub9ac\ub97c \ud55c \uc9d1\uc758 \uacbd\uc6b0\uc5d0\ub294 \uae30\uc874\uc758 sqft_living, sqft_lot\uacfc \uac12\uc774 \uac19\uc744\uae4c? -- \uc774\uac74 \ub2f9\uc5f0\ud788 \ub2e4\ub97c \ub4ef\n4. 2015\ub144\ub3c4 \uc774\ud6c4\uc5d0 \uc218\ub9ac\ub97c \ud55c \uc9d1\uc758 \uacbd\uc6b0\uc5d0\ub294 sqft_living15 \uc640 sqft_lot15\uac00 \uae30\ub85d\ub418\uc5b4 \uc788\ub294\uac00?\n\n\uc774 \uc138\uac00\uc9c0\ub97c \uc8fc\ubaa9\ud574\uc11c \uc0dd\uac01\ud574 \ubd10\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","20f54457":"# \uceec\ub7fc\ubcc4 \uc758\ubbf8\n\n1. ID : \uc9d1\uc744 \uad6c\ubd84\ud558\ub294 \ubc88\ud638\n2. date : \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uc9dc\n3. price : \uc9d1\uc758 \uac00\uaca9(Target variable)\n4. bedrooms : \uce68\uc2e4\uc758 \uc218\n5. bathrooms : \uce68\uc2e4 \uac1c\uc218 \ub2f9 \ud654\uc7a5\uc2e4\uc758 \uc218(\ud654\uc7a5\uc2e4\uc758 \uc218 \/ \uce68\uc2e4\uc758 \uc218 )\n6. sqft_living : \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n7. sqft_lot : \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n8. floors : \uc9d1\uc758 \uce35 \uc218\n9. waterfront : \uc9d1\uc758 \uc804\ubc29\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc720\ubb34 (a.k.a. \ub9ac\ubc84\ubdf0)\n10. view : \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc88b\uc544 \ubcf4\uc774\ub294\uc9c0\uc758 \uc815\ub3c4\n11. condition : \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc\n12. grade : King County grading \uc2dc\uc2a4\ud15c \uae30\uc900\uc73c\ub85c \ub9e4\uae34 \uc9d1\uc758 \ub4f1\uae09\n13. sqft_above : \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n14. sqft_basement : \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n15. yr_built : \uc9c0\uc5b4\uc9c4 \ub144\ub3c4\n16. yr_renovated : \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4\n17. zipcode : \uc6b0\ud3b8\ubc88\ud638\n18. lat : \uc704\ub3c4\n19. long : \uacbd\ub3c4\n20. sqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n21. sqft_lot15 : 2015\ub144 \uae30\uc900 \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n","42e380ca":"# yr_renovated","25700613":"grade \uc218\uce58\ub3c4 \ud6c8\ub828\uc138\ud2b8\uc640 \ud14c\uc2a4\ud2b8\uc14b\uc774 \uc720\uc0ac\ud558\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ud6c8\ub828\uc138\ud2b8\uc5d0\ub294 1\uc774\ub77c\ub294 grade\uac00 \uc874\uc7ac\ud558\uc9c0\ub9cc \ud14c\uc2a4\ud2b8\uc14b\uc5d0\ub294 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \uc0c1\ud669\uc774 \uc774 \ubc18\ub300\uc600\uc73c\uba74 \ubb38\uc81c\uac00 \uc0dd\uacbc\uaca0\uc9c0\ub9cc, \uadf8\uac83\uc774 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc81c\uac00 \uc5c6\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. grade\uc5d0\uc11c\ub294 7,8\uc815\ub3c4\uc758 \uc218\uc900\uc744 \ubc1b\ub294 \uc9d1\uc774 \ubcf4\ud1b5 \uc815\ub3c4\uc758 \uc9d1 \uc218\uc900\uc774\ub77c\uace0 \ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","8ef2e6f3":"\uce68\uc2e4\uc218\ub97c \uacf1\ud574\uc8fc\uba74 \ubaa8\ub450 \uc815\uc218\ud654 \ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc558\ub294\ub370 \uc544\ub2c8\uc600\uad70\uc694!! \uadf8\ub9ac\uace0 \ud654\uc7a5\uc2e4\uc758 \uc218\uac00 67.5\uac1c\ub098 \uc788\ub294 \uc9d1\uc774 \uc788\ub2e4\ub2c8... \uc544\ubb34\ub9ac \ub113\uc5b4\ub3c4 \ubd88\uac00\ub2a5\ud560 \uac83 \uac19\uae30 \ub54c\ubb38\uc5d0 \uc9c4\uc9dc \ud654\uc7a5\uc2e4 \uac1c\uc218\ub97c \ub3c4\ucd9c\ud558\uc9c0\ub294 \uc54a\ub3c4\ub85d \ud569\uc2dc\ub2e4.","1025f8ea":"Ridge\uc640 Lasso\uc5d0\ub294 alpha\ub77c\ub294 \uac12\uc744 \uc870\uc815\ud568\uc73c\ub85c\uc368 \uc77c\ubc18 \uc120\ud615\ud68c\uadc0\ubaa8\ub378[Linear Regression]\uc5d0 \uc81c\uc57d\uc744 \uac7a\uc73c\ub85c\uc368 \ub354 \uc88b\uc740 \uc131\ub2a5\uc744 \ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. GridSearchCV\ub97c \uc0ac\uc6a9\ud558\uc5ec \ucd5c\uc801\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \ub3c4\ucd9c\ud558\uae30 \uc704\ud574\uc11c, ridge_params, lasso_params\uc640 \uac19\uc774 \ud14c\uc2a4\ud2b8\ud574 \ubcfc \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \ub118\uaca8\uc11c GridSearchCV\ub97c \ud1b5\ud55c \uac1d\uccb4\uc5d0\uc11c \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Optimization\uc804\uacfc \ube44\uad50\ud574 \ubcf4\uc558\uc744 \ub54c \uc57d\uac04\uc758 \uc131\ub2a5\ud5a5\uc0c1\uc774 \uc788\uc9c0\ub9cc, RandomForest\ub97c \ud65c\uc6a9\ud558\ub294 \ud2b8\ub9ac\ubaa8\ub378\ubcf4\ub2e4\ub294 \ubabb\ud558\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \ud2b8\ub9ac\ubaa8\ub378\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\uace0 \uc788\ub294 LightGBM\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud14c\uc2a4\ud2b8\ud574\ubcf4\ub3c4\ub85d\ud569\uc2dc\ub2e4.","e29ad2ad":"Waterfront\uac12\uc740 \uc5ec\ubd80\ub97c \ub098\ud0c0\ub0b4\ub294 Binary \uac12\uc774\uba70, \uac12\uc758 \ud06c\uae30\ub294 \ub2e4\ub974\ub354\ub77c\ub3c4 \uadf8 \ube44\uc911\uc740 \uc720\uc0ac\ud558\ub2e4\ub294 \uac83\uc744 \uc54c\uc544\ub0c8\uc2b5\ub2c8\ub2e4.","6b52ced0":"floors\uc758 \ubd84\ud3ec \ub610\ud55c \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc774 \uc720\uc0ac\ud558\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","410eddfb":"# sqft_basement","75a43835":"# is_basement","8b3ef9d3":"# condition","5a3b6c7a":"# Waterfront","c0dfeb35":"# WaterFront\n\uc9d1 \uc55e\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc548 \ud750\ub974\ub294\uc9c0 \uc5ec\ubd80\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.","1e321b1a":"## <a id='51'>\uc801\uc808\ud55c \ubaa8\ub378 \uc120\uc815<\/a>\n\ud68c\uadc0\ubb38\uc81c\ub97c \uc704\ud574\uc11c \ub9ce\uc740 \uba38\uc2e0\ub7ec\ub2dd\ubaa8\ub378\ub4e4\uc774 \uc788\uc9c0\ub9cc \uc6b0\ub9ac\uac00 \uc54c\uc544\ubcfc \ubaa8\ub378\uc740 \ud06c\uac8c \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n1. RandomForest [Tree Model]\n2. LinearRegression, Ridge, Lasso [Linear Model]\n3. LGBMRegressor [Tree Model]","d04e6e73":"\ubb54\uac00 \uc774\uc0c1\ud558\ub2e4. \ub0b4\uac00 \uc0dd\uac01\ud588\ub358 \uac83\uacfc\ub294 \ub2ec\ub9ac \uc218\ub9ac\ub41c \uc9d1\uc740 631\uac1c \ubc16\uc5d0 \uc548\ub418\ub294\ub370 2015\ub144\ub3c4\uc640 \ube44\uad50\ub41c sqft_living\uc774\ub098 sqft_lot\uc758 \uc218\uc640 \ube44\uad50\ud574 \ubd24\uc744 \ub54c \uc0c1\ub300\uc801\uc73c\ub85c \uc791\uc740 \uac12\uc774\ub2e4. \uadf8\ub807\ub2e4\ub294\uac74 \uc218\ub9ac\ub97c \ud558\uc9c0 \uc54a\uc558\ub354\ub77c\ub3c4 \uc8fc\uac70\uba74\uc801\uc774\ub098 \uc804\uccb4\uba74\uc801\uc774 \ub298\uc5b4\ub0a0 \uc218 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4.","6d501073":"# zipcode\nzipcode\ub294 \uc6b0\ud3b8\ubc88\ud638\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc8fc\ubcc0\uc744 \ub458\ub7ec\ubcf4\uba74 \uac19\uc740 \ub3d9\ub124\uc5d0\uc11c\ub3c4 \ubd80\ucd0c\uacfc \ube48\ucd0c\uc774 \uc874\uc7ac\ud558\ub4ef\uc774 \uc6b0\ud3b8\ubc88\ud638\ub97c \uc774\uc6a9\ud558\uac8c \ub418\uba74 \uc774 \ub458\uc744 \uad6c\ubd84\ud560 \uc218 \uc788\uc5b4 \uc6b0\ub9ac\uac00 \uc9d1\uac12\uc744 \uc608\uce21\ud558\ub294\ub370 \ub3c4\uc6c0\uc774 \ub420 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 zipcode\uc758 \uac12\uc744 \uc0b4\ud3b4\ubcf4\uace0 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ud560 \uac83\uc778\uc9c0 \uc0dd\uac01\ud574 \ubd05\uc2dc\ub2e4.","29b4b5ec":"# View","20bd1393":"RandomForest \ubaa8\ub378\uc744 \uc81c\uc678\ud55c \ub098\uba38\uc9c0 \ubaa8\ub378\ub4e4\uc740 \uae30\uc874 \ubaa8\ub378\uc5d0\uc11c \ub370\uc774\ud130\uc14b\uc5d0 \ub530\ub77c\uc11c \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130(\uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378\uc758 \uc778\uc218)\ub97c \uc870\uc808\ud574\uc57c \ub354 \uc88b\uc740 \uc131\ub2a5\uc744 \uc774\ub04c\uc5b4\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","b113e57f":"# Bedrooms","6294f0ea":"# yr_bulit and yr_renovate\n\uc774 \ub458\uc740 \uc9d1\uc744 \uac74\ucd95\ud55c \ub144\ub3c4\uc640 \uc9d1\uc744 \uc218\ub9ac\ud55c \ub144\ub3c4\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc9c1\uad00\uc801\uc73c\ub85c \uc0dd\uac01\ud574\ubcf4\uba74 \uc9d1\uc774 \uc5c4\uccad\ub09c \ubb38\ud654\uc720\uc0b0\uc774 \uc544\ub2c8\ub77c\uba74 \uc624\ub798\ub41c \uc9d1\uc758 \uacbd\uc6b0\uc5d0\ub294 \uac00\uaca9\uc774 \ub0ae\uc744 \uac83\uac19\uace0 \uc9d1\uc744 \uc218\ub9ac\ud55c \ub144\ub3c4\uac00 \ud604\uc7ac\uc640 \uac00\uae4c\uc6b8 \uc218\ub85d \uac00\uaca9\uc740 \ub610 \ub192\uc544\uc9c8 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc9d1\uc744 \uc9d3\uc9c0 \uc54a\uc740 \uc9d1\uc740 \uc5c6\uaca0\uc9c0\ub9cc, \uc9d1\uc744 \uc218\ub9ac\ud558\uc9c0 \uc54a\uc740 \uc9d1\ub3c4 \uc788\uc744 \uac83 \uac19\uae30 \ub54c\ubb38\uc5d0 \uc9c0\ud558\uc2e4\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c \ucd94\uac00\uc801\uc73c\ub85c \ub17c\ub9ac\uc2dd\uac12\uc73c\ub85c\ub3c4 \ub098\ud0c0\ub0b4 \ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4.","1e1f2974":"# sqft_living, sqft_lot\nsqft_living\uc740 \uc9d1\uc758 \uc8fc\uac70\uacf5\uac04\uc758 \uba74\uc801\uc744 \uc758\ubbf8\ud558\uba70 lot\uc740 \uc8fc\uac70\uacf5\uac04\uc744 \ud3ec\ud568\ud55c \ucc28\uace0, \ub9c8\ub2f9 \ub4f1\uc758 \uacf5\uac04\uc774 \ud3ec\ud568\ub41c \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4. \ub2e4\ub978 \uc5ec\ud0c0 \uceec\ub7fc\ub4e4\uacfc \uac19\uc774 \ud574\ub2f9 \uceec\ub7fc\uc5d0 \ub300\ud574 \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc758 \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcfc\uae4c\uc694?","0399f577":"# sqft_living15","b6500c43":"\uac00\uaca9\uc758 \ubd84\ud3ec\ub97c \ubcf4\uba74 \uc88c\uce21\uc73c\ub85c \uce58\uc6b0\uce5c \ubd84\ud3ec\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcf4\ud1b5 \uc774\ub807\uac8c \uce58\uc6b0\uce5c \uac12\uc5d0 \ub300\ud574\uc11c \ud3c9\uac00\uc9c0\ud45c\ub85c RMSLE\ub97c \uc0ac\uc6a9\ud558\ub294\ub370 \uc6b0\ub9ac\uc758 \ubb38\uc81c\uc5d0\uc11c\ub294 \ub2e8\uc9c0 RMSE\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.","1d738079":"# Date","6c532739":"\ub144\ub3c4\/\uc6d4\/\uc77c\uc744 \uad6c\ubd84\ud558\uc600\uc744 \ub54c,\n* \ub144\ub3c4\ubcc4\ub85c\ub294 2015\ub144\uc774 \ubbf8\uc138\ud55c \ucc28\uc774\ub85c \uac00\uaca9\uc774 \ub354 \ub192\uc558\uace0\n* \uc6d4 \ubcc4\ub85c\ub294 3,4,5\uc6d4\uc5d0 \uc9d1\uac12\uc774 \ube44\uc2fc\uc2dc\uae30\uc774\uba70\n* \uc77c \ubcc4\ub85c\ub294 1\uc77c\uacfc 13\uc77c\uc5d0 \uc660\uc9c0 \ubaa8\ub974\uaca0\uc9c0\ub9cc \uac00\uaca9\uc774 \ub192\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.","e479c7e5":"RandomForest\ubaa8\ub378\uc740 \ub9d0 \uadf8\ub798\ub3c4 \ub79c\ub364\uc758 \uc758\ubbf8\ub97c \uac00\uc9c0\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \uc5b4\ub5bb\uac8c \uc88b\uc740 \ubaa8\ub378\uc744 \ub3c4\ucd9c\ud588\ub294\uc9c0 \uc124\uba85\ud560 \uc218\ub294 \uc5c6\uc9c0\ub9cc, \ud2b8\ub9ac\ubaa8\ub378\uae30\ubc18\uc73c\ub85c \uc88b\uc740 \uc131\ub2a5\uc744 \ub0b4\uae30 \ub54c\ubb38\uc5d0 baseline\ubaa8\ub378\ub85c \uc4f0\uae30\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4.","56f61934":"# Grade","29c97330":"# Floor\n\uc9d1\uc758 \uce35\uc218\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc774 \ud2b9\uc9d5\uc740 \ubaa8\ub450 \uc815\uc218\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\uba70 \ud55c\ubc88 \uce35\uc218\uc758 \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4.","2f6fe9bb":"# yr_built","6b46f82a":"\uc77c\ub2e8 \uce68\uc2e4\uc758 \uc218\ub294 8\uac1c\ub97c \uacbd\uacfc\ud558\uae30\uae4c\uc9c0\ub294 \uc99d\uac00\ud558\uc9c0\ub9cc 9\uac1c\ub098 10\uac1c\uc758 \uacbd\uc6b0\uc5d0\ub294 \uac11\uc790\uae30 \uac10\uc18c\ud55c\ub2e4 \uc774 \ub450 \uacbd\uc6b0\uc758 \ud45c\ubcf8\uc758 \uc218\uac00 \uc801\uae30 \ub54c\ubb38\uc774\ub2e4.","b5df5cce":"# Bathrooms","53bf4f9d":"# <a id='1'>Reference<\/a>  \n\n> \ucc99\ub3c4\uc758 \uc885\ub958\uc640 \uc758\ubbf8 <br \/>\nhttps:\/\/blog.naver.com\/moses3650\/221202517582","f828b76a":"# sqft_living","bc02a922":"2) Hyperparameter Tuning using GridSearchCV for Linear Models","3c62dbe9":"\uc774\ub97c \ud1b5\ud574 \ub098\uc758 1\ubc88 \uac00\uc124\uc740 \uc544\ub2cc \uac83\uc774 \ub418\uc5c8\ub2e4. \uc218\ub9ac\uac00 \ub418\uc9c0 \uc54a\uc740 \uc9d1\uc774\ub354\ub77c\ub3c4 \uc8fc\uac70\uba74\uc801\uacfc \uc804\uccb4\uba74\uc801\uc774 \ub2ec\ub77c\uc9c4 \uc9d1\uc774 \ub354 \ub9ce\uae30 \ub54c\ubb38\uc774\ub2e4.","c88d2007":"# sqft_lot","c687ba04":"### 3. LightGBM \nlightgbm\uc740 \uc544\uc8fc \uc88b\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. python\uc5d0 \ucda9\uc2e4\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud65c\uc6a9\ud560 \uc218\ub3c4 \uc788\uace0 python\ub0b4\uc5d0 sklearn\uc5d0 \uc911\uc810\uc73c\ub85c \ub9de\ucdb0\uc9c4 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc77c\ub2e8\uc740 sklearn\uc5d0 \ub9de\ucd98 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud65c\uc6a9\ud560 \uac83\uc774\uba70 \ucd94\ud6c4\ub85c python\uc5d0 \ub9de\ucdb0\uc9c4 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud65c\uc6a9\ud574\uc11c\ub3c4 \uc791\uc131\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.[\uac1c\uc778\uc801\uc73c\ub85c \ub450 \uac00\uc9c0\uc5d0 \ub108\ubb34 \ud63c\ub3d9\uc744 \ub290\uaf08\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4]\n\n1. Python <br \/>\n=> **lightgbm**\n2. Sklearn <br \/>\n=> **lightgbm.LGBMRegressor**\n","ab9e69ff":"# sqft_lot15","15a017c9":"\uc6b0\ud3b8\ubc88\ud638\ub294 \ubb54\uac00 \uc22b\uc790\ub85c \uc774\ub8e8\uc5b4\uc9c0\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \uc6b0\ud3b8\ubc88\ud638\uac00 \uc5c6\uac70\ub098, \uc6b0\ud3b8\ubc88\ud638\uac00 \uc22b\uc790\uac00 \uc544\ub2cc \uc5b4\ub290 \ub2e4\ub978 \uac12\ub4e4\ub85c \uad6c\uc131\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc77c\ubc18\uc801\uc778 \uc6b0\ud3b8\ubc88\ud638\uc758 \ud615\ud0dc\uc778 \ub2e4\uc12f\uac1c\uc758 \uc22b\uc790\ub97c \ub530\ub974\uc9c0 \uc54a\ub294 \uc608\uc678\uc758 \uac83\ub4e4\uc744 \uc0b4\ud3b4\ubd05\uc2dc\ub2e4.","63b5b6ea":"\ud574\ub2f9 view\uac12\uc774 \ud074\uc218\ub85d \uc88b\uc740\uc9c0 \uc791\uc744 \uc218\ub85d \uc88b\uc740\uc9c0\uc5d0 \ub300\ud55c \uac83\uc740 \ub098\uc911\uc5d0 Price\uc640 \uac01 \ubcc0\uc218\ub4e4\uc744 \ube44\uad50\ud560 \ub54c \uc54c\uc544\ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4.","b36a67e7":"2015\ub144 \uc774\uc804\uc5d0 \uc218\ub9ac\ud55c \uc9d1\uc758 \uacbd\uc6b0\uc5d0\ub3c4 \uc8fc\uac70\uba74\uc801\uc774\ub098 \uc804\uccb4\uba74\uc801\uc774 \ubcc0\uacbd\ub418\uc5c8\ub2e4. \uc544\ub9c8\ub3c4 2015\ub144\uc5d0 \uc0c8\ub85c\uc6b4 \uc870\uc0ac\ub97c \ud1b5\ud574\uc11c \uae30\ub85d\uc744 \uc0c8\ub86d\uac8c \ubc14\uafbc\ub4ef\ud558\ub2e4.","256eeca4":"# floors","de7d8087":"is_renovated \uc640 yr_renovated\uc758 \uc0c1\uad00\uad00\uacc4\ub294 0.999971\ub85c \uac70\uc758 1\uc5d0 \uac00\uae4c\uc6b4 \uc0c1\uad00\uad00\uacc4\ub97c \ub098\ud0c0\ub0b4\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c is_renovated\ub97c \uc6b0\ub9ac\uc758 \ud6c8\ub828\uc138\ud2b8\uc5d0\uc11c \ubc30\uc81c\ud588\uc2b5\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8\uc14b\uc5d0\uc11c\ub3c4 \ub3d9\uc77c\ud558\uac8c \uc81c\uac70\ud574\ubd05\uc2dc\ub2e4.","9ab98e2f":"col_1\uacfc col_2\uc758 \uceec\ub7fc\ub4e4\uc744 \ucd94\ucd9c\ud574\ub0b4\uace0 \uc911\ubcf5\ub418\ub294 \uac83\ub4e4\uc740 \ud55c \ubc88\ub9cc \ub098\uc624\uace0, \ub2e4\ub978 \uac83\ub4e4\uc740 \ud55c \ubc88\ub9cc \ucd94\uac00\ud558\ub294 \ub9ac\uc2a4\ud2b8\ub97c \ub9cc\ub4e4\uace0 \uc774\ub97c PolynomialFeature\ub97c \uc774\uc6a9\ud560 \uc0dd\uac01\uc785\ub2c8\ub2e4.","91b442dc":"# sqft_above","03d78a58":"# <a id='5'>Modeling<\/a>\n\uc774 \ub2e8\uacc4\uc5d0\uc11c \uc54c\uc544\ubcfc \uac83\uc740 \ud06c\uac8c \uc138 \uac00\uc9c0\uc785\ub2c8\ub2e4.\n\n1. \uc6b0\ub9ac\uac00 Feature Engineering\uc744 \ud1b5\ud574 \ub9cc\ub4e0 \uceec\ub7fc\ub4e4\uc774 \uae30\ubcf8\uc801\uc778 \ub370\uc774\ud130\uc14b\ub9cc \ud65c\uc6a9\ud588\uc744 \ub54c\ubcf4\ub2e4 \ub354 \uc131\ub2a5\ud5a5\uc0c1\uc744 \uac00\uc838\uc624\ub294\uc9c0 \ub2e4\uc591\ud55c \ubaa8\ub378\uc5d0\uc11c \ube44\uad50\n2. RandomForest\ub4f1\uc744 \ud65c\uc6a9\ud558\uc5ec Polynomial Features\ub97c \ud65c\uc6a9\ud574 \ub9cc\ub4e0 \ub370\uc774\ud130\uc14b\uc5d0 \uc720\uc758\ubbf8\ud55c \ud53c\ucc98\ub4e4\ub9cc \uace8\ub77c\ub0b4\ub294 FeatureSelection\uc744 \uc9c4\ud589\n3. \uc6b0\ub9ac\uac00 \ub9cc\ub4e0 \uc5ec\ub7ec\uac1c\uc758 \ub370\uc774\ud130\uc14b\uc744 \ubaa8\ub378\ub4e4\uc5d0 \ub123\uc5b4\ubd04\uc73c\ub85c\uc368 \ucd5c\uc801\uc758 \ubaa8\ub378\uc744 \ub3c4\ucd9c\ud558\uace0, \ubaa8\ub378\uc774 \ub354 \uc88b\uc740 \uc131\ub2a5\uc744 \ub0bc \uc218 \uc788\ub3c4\ub85d \ubaa8\ub378\uc758 hyperparameter\ub97c \uc218\uc815","936a05d0":"### 2. LinearRegression, Ridge, Lasso\n\n1) Model\uc0ac\uc6a9"}}