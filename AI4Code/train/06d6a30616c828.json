{"cell_type":{"17a9c59a":"code","183fdbef":"code","eedaecbb":"code","bfcbc78b":"code","0650f150":"code","2d39b36d":"code","faba9239":"code","69e39638":"code","f211d565":"code","1925297b":"code","6b91139b":"code","09bca2e9":"code","2ab790cd":"code","335f4741":"code","80acb725":"code","c2909457":"code","70e27ea5":"code","b8b7a807":"code","c2cfa30d":"code","f2fa8ec3":"markdown","234e68fc":"markdown","051c55dc":"markdown","5d7342a3":"markdown","5e776f62":"markdown","08adce84":"markdown","7d5db766":"markdown","e9086431":"markdown","247da469":"markdown","7215c321":"markdown","2892cec7":"markdown","4aa9d255":"markdown","b203b82d":"markdown","7a9adece":"markdown","642bfff5":"markdown","1b1fc03b":"markdown","f990e54a":"markdown"},"source":{"17a9c59a":"!pip install pygmt","183fdbef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport geopandas as gpd\n\nfrom bokeh.plotting import output_notebook, figure, show\nfrom bokeh.models import ColumnDataSource, Div, Select, Button, ColorBar, CustomJS\nfrom bokeh.layouts import row, column, layout\nfrom bokeh.transform import cumsum, linear_cmap\nfrom bokeh.palettes import Blues8, Spectral3\nfrom bokeh.plotting import figure, output_file, show\n\n\noutput_notebook()\n\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.offline as py\nimport plotly.figure_factory as ff\npy.init_notebook_mode(connected=True)\n\nimport gc # Garbage Collector","eedaecbb":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bfcbc78b":"corona_df = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv\")\ndeath_df = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_2019_ncov_deaths.csv\")\nconfirmed_df = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_2019_ncov_confirmed.csv\")\nrecovered_df = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_2019_ncov_recovered.csv\")","0650f150":"corona_df.head()","2d39b36d":"death_df.head()","faba9239":"confirmed_df.head()","69e39638":"recovered_df.head()","f211d565":"dates = corona_df.Date.unique()\nconfirmed_df = confirmed_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name='Date', value_name='Confirmed')\ndeath_df = death_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name='Date', value_name='Death')\nrecovered_df = recovered_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name='Date', value_name='Recovered')","1925297b":"Corona_df = pd.DataFrame()\nCorona_df = pd.concat([confirmed_df, death_df['Death'], recovered_df['Recovered']], axis=1, sort=False)\nCorona_df = Corona_df.fillna(0)\n\n## Splitting Date and Time into Data and Time\nCorona_df['Time'] = pd.to_datetime(Corona_df['Date']).dt.time\nCorona_df['Date'] = pd.to_datetime(Corona_df['Date']).dt.date","6b91139b":"Corona_df","09bca2e9":"Corona_df.info()","2ab790cd":"Disease_through_Country = pd.DataFrame()\nDisease_through_Country = Corona_df.groupby([\"Country\/Region\"]).sum().reset_index()\nDisease_through_Country = Disease_through_Country.drop(['Lat','Long'],axis=1)","335f4741":"Names = [\"Confirmed\",\"Death\",\"Recovered\"]\nfor i in Names:\n    Disease_through_Country[i+\"_percentage\"] = Disease_through_Country[i]\/Disease_through_Country[Names].sum(axis=1)*100\n    Disease_through_Country[i+\"_angle\"] = Disease_through_Country[i+\"_percentage\"]\/100 * 2*np.pi","80acb725":"Disease_through_Country_plot = pd.DataFrame({'class': [\"Confirmed\",\"Death\",\"Recovered\"],\n                                              'percent': [float('nan'), float('nan'), float('nan')],\n                                              'angle': [float('nan'), float('nan'), float('nan')],\n                                              'color': [ '#718dbf', '#e84d60','#c9d9d3']})\nDisease_through_Country_plot","c2909457":"# Create the ColumnDataSource objects \"s2\" and \"s2_plot\"\ns2 = ColumnDataSource(Disease_through_Country)\ns2_plot = ColumnDataSource(Disease_through_Country_plot)\n\n# Create the Figure object \"p2\"\np2 = figure(plot_width=275, plot_height=350, y_range=(-0.5, 0.7),toolbar_location=None, tools=['hover'], tooltips='@percent{0.0}%')\n\n# Add circular sectors to \"p2\"\np2.wedge(x=0, y=0, radius=0.8, source=s2_plot,start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),fill_color='color', line_color=None, legend='class')\n\n# Change parameters of \"p2\"\np2.axis.visible = False\np2.grid.grid_line_color = None\np2.legend.orientation = 'horizontal'\np2.legend.location = 'top_center'\n\n# Create the custom JavaScript callback\ncallback2 = CustomJS(args=dict(s2=s2, s2_plot=s2_plot), code='''\n    var ang = ['Confirmed_angle', 'Death_angle','Recovered_percentage'];\n    var per = ['Confirmed_percentage',  'Death_percentage','Recovered_percentage'];\n    if (cb_obj.value != 'Please choose...') {\n        var disease = s2.data['Country\/Region'];\n        var ind = disease.indexOf(cb_obj.value);\n        for (var i = 0; i < ang.length; i++) {\n            s2_plot.data['angle'][i] = s2.data[ang[i]][ind];\n            s2_plot.data['percent'][i] = s2.data[per[i]][ind];\n\n        }\n    }\n    else {\n        for (var i = 0; i < ang.length; i++) {\n            s2_plot.data['angle'][i] = undefined;\n            s2_plot.data['percent'][i] = undefined;\n        }\n\n    }\n    s2_plot.change.emit();\n''')\n\n# When changing the value of the dropdown menu execute \"callback2\"\noptions = ['Please choose...'] + list(s2.data['Country\/Region'])\nselect = Select(title='Country ', value=options[0], options=options)\nselect.js_on_change('value', callback2)\n\n# Display \"select\" and \"p2\" as a column\nshow(column(select, p2))","70e27ea5":"Disease_through_Country = pd.DataFrame()\nDisease_through_Country = Corona_df.groupby([\"Country\/Region\",\"Province\/State\"]).sum().reset_index()\nDisease_through_Country = Disease_through_Country.drop(['Lat','Long'],axis=1)\nDisease_through_Country = Disease_through_Country.loc[Disease_through_Country[\"Country\/Region\"]==\"Mainland China\"]\n\n\n\nNames = [\"Confirmed\",\"Death\",\"Recovered\"]\nfor i in Names:\n    Disease_through_Country[i+\"_percentage\"] = Disease_through_Country[i]\/Disease_through_Country[Names].sum(axis=1)*100\n    Disease_through_Country[i+\"_angle\"] = Disease_through_Country[i+\"_percentage\"]\/100 * 2*np.pi\n    \n    \nDisease_through_Country_plot = pd.DataFrame({'class': [\"Confirmed\",\"Death\",\"Recovered\"],\n                                              'percent': [float('nan'), float('nan'), float('nan')],\n                                              'angle': [float('nan'), float('nan'), float('nan')],\n                                              'color': [ '#718dbf', '#e84d60','#c9d9d3']})\nDisease_through_Country_plot","b8b7a807":"# Create the ColumnDataSource objects \"s2\" and \"s2_plot\"\ns2 = ColumnDataSource(Disease_through_Country)\ns2_plot = ColumnDataSource(Disease_through_Country_plot)\n\n# Create the Figure object \"p2\"\np2 = figure(plot_width=275, plot_height=350, y_range=(-0.5, 0.7),toolbar_location=None, tools=['hover'], tooltips='@percent{0.0}%')\n\n# Add circular sectors to \"p2\"\np2.wedge(x=0, y=0, radius=0.8, source=s2_plot,start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),fill_color='color', line_color=None, legend='class')\n\n# Change parameters of \"p2\"\np2.axis.visible = False\np2.grid.grid_line_color = None\np2.legend.orientation = 'horizontal'\np2.legend.location = 'top_center'\n\n# Create the custom JavaScript callback\ncallback2 = CustomJS(args=dict(s2=s2, s2_plot=s2_plot), code='''\n    var ang = ['Confirmed_angle', 'Death_angle','Recovered_percentage'];\n    var per = ['Confirmed_percentage',  'Death_percentage','Recovered_percentage'];\n    if (cb_obj.value != 'Please choose...') {\n        var disease = s2.data['Province\/State'];\n        var ind = disease.indexOf(cb_obj.value);\n        for (var i = 0; i < ang.length; i++) {\n            s2_plot.data['angle'][i] = s2.data[ang[i]][ind];\n            s2_plot.data['percent'][i] = s2.data[per[i]][ind];\n\n        }\n    }\n    else {\n        for (var i = 0; i < ang.length; i++) {\n            s2_plot.data['angle'][i] = undefined;\n            s2_plot.data['percent'][i] = undefined;\n        }\n\n    }\n    s2_plot.change.emit();\n''')\n\n# When changing the value of the dropdown menu execute \"callback2\"\noptions = ['Please choose...'] + list(s2.data['Province\/State'])\nselect = Select(title='Regions of China', value=options[0], options=options)\nselect.js_on_change('value', callback2)\n\n# Display \"select\" and \"p2\" as a column\nshow(column(select, p2))","c2cfa30d":"Data = Corona_df.groupby(\"Date\").sum()\nsource = ColumnDataSource(Data)\n\np = figure(x_axis_type='datetime')\n\np.line(x='Date', y='Confirmed', line_width=2, source=source, legend_label='Confirmed Corona Cases')\np.line(x='Date', y='Death', line_width=2, source=source, color=Spectral3[1], legend_label='Death by Corona')\np.line(x='Date', y='Recovered', line_width=2, source=source, color=Spectral3[2], legend_label='Recovered from Corona')\n\np.yaxis.axis_label = 'Kilotons of Munitions Dropped'\n\nshow(p)","f2fa8ec3":"![](https:\/\/thumbs.gfycat.com\/RevolvingQuarrelsomeDolphin-size_restricted.gif)","234e68fc":"**Data Wrangling**","051c55dc":"## **Spread Through China**","5d7342a3":"**Difference between the datasets**\n\ncorona_df gives the macro view of the situation where as other data sets gives the micro level view of the cases of death, recovery and confirmation of corona cases","5e776f62":"** Importing Necessary Libraries **","08adce84":"## **Novel Corona Virus**","7d5db766":"Please do to upvote if you find this kerenel useful","e9086431":"**References**\n* Interactive Titanic dashboard using Bokeh [Kernel](http:\/\/https:\/\/www.kaggle.com\/pavlofesenko\/interactive-titanic-dashboard-using-bokeh)","247da469":"## Disease Spread through the world","7215c321":"## Disease Activity over the time","2892cec7":"**Observations:**\n\nFrom this graph we can clearly see that the corona virus has started spreading on a exponential rate from the first week of Feburary","4aa9d255":"**Creating Interactive Dashboards**","b203b82d":"**Coronaviruses** (CoV) are a large family of viruses that cause illness ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS-CoV) and Severe Acute Respiratory Syndrome (SARS-CoV). \n\nA **novel coronavirus** (nCoV) is a new strain that has not been previously identified in humans.  \n\nCoronaviruses are zoonotic, meaning they are transmitted between **animals and people**.  \n\nCommon signs of infection include \n    * Respiratory symptoms\n    * Fever\n    * Cough \n    * Shortness of breath \n    * Breathing difficulties\n\nIn more severe cases infection \n        * Pneumonia \n        * Severe acute respiratory syndrome\n        * Fidney failure \n        * Death. \n\n","7a9adece":"The above made charts are of interactive dashboards please feel free to hover over...","642bfff5":"I will be working on this kernel extensively trying to find out some of the answers for most asked questions....So please stay tuned for more updates","1b1fc03b":"**Tracking down the spread**","f990e54a":"** Reading and Exploring the data**"}}