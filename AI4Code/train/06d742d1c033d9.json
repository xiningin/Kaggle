{"cell_type":{"338889ae":"code","ab22b335":"code","ec05cf66":"code","033194ce":"code","5b716fd9":"code","fec71dcd":"code","38d8cac4":"code","8f4145b0":"code","0a6f8e61":"code","050a97bc":"code","e78183f7":"code","fa7394eb":"code","1c742099":"code","d89ef73e":"code","490d51ac":"code","e9ecc01b":"code","bcb5a012":"code","30b29899":"code","7362f1d5":"code","0ee605f3":"code","651bd55f":"code","dd5b53da":"code","d0ff0b62":"code","90c7f6e9":"code","b5a49856":"code","f2f4cfbb":"code","21d789a8":"code","1ce410da":"code","fd116df3":"code","266229c5":"code","b649f66d":"code","16a0400b":"code","eb18a0e2":"code","f9453a7d":"code","a03d8655":"code","f75388a6":"code","c5c59ec1":"code","3fc57839":"code","207e389e":"code","c23a40eb":"code","1b34657e":"code","9909132d":"code","94cb4b75":"code","686ecd22":"code","ae930909":"code","2e4a31b3":"code","6d84b4d3":"code","1ec581a3":"code","892d549a":"code","43c243d9":"code","743f7e7a":"code","05d96ea1":"code","41ce38c1":"code","2cc9c1af":"code","1fcd5357":"code","53f307da":"code","78e556a6":"code","3057b4de":"code","0508bd05":"code","41528f13":"code","51745cb8":"code","00ce2b3b":"code","d13a3d86":"code","62dea292":"code","3887619b":"code","7dc3eccc":"code","4ccfa2e1":"code","7f4bfe62":"code","d404eb76":"code","1ec84d1e":"code","38438659":"code","51b420e8":"code","61c50f0f":"code","a5667dbf":"code","523069c0":"code","bd14b3c6":"code","46588809":"code","acd9029f":"code","95923599":"code","cf23ebb8":"code","3bf02063":"code","245c9381":"code","0c6c4008":"code","b4606f12":"code","f4f2b648":"code","9375e03b":"code","b7fe3659":"code","6636a68c":"code","8ae6b7c1":"code","b5464efb":"code","83f58392":"code","8b9adafa":"code","22e8ea72":"code","8ca4d714":"code","ba843177":"code","e580642d":"code","0dbeef59":"code","611b0069":"code","aba2e951":"code","08792c31":"code","cf7be811":"code","78828381":"code","cbda5d3e":"code","e6ca3481":"code","3ad6b2dd":"code","b42861bf":"code","ad34f525":"code","6f129f93":"code","44531313":"code","dce785d4":"code","94278c6c":"code","020119bf":"code","701c19fd":"code","01ad5b45":"code","beca997e":"code","3a0b09eb":"code","07398ce2":"code","9410c7d8":"code","099bf843":"code","bcf5e275":"code","3e6d1fb0":"code","0897186c":"code","025d340b":"code","96d0ff8f":"code","2a9ae7c3":"code","1eed393e":"code","15dc91c2":"code","3eb27d49":"code","f3246887":"code","2b8b2bf9":"code","a6b4ca30":"code","8ef1b048":"code","aa0e9591":"code","c27ebd05":"code","14576cd4":"code","b9ec607f":"code","f294b0bf":"code","97c72a84":"code","e887fc78":"code","bda6dce8":"code","77a29287":"code","670bed15":"code","989a63ce":"code","30d9ee37":"code","2fe61e2c":"code","0be4632f":"code","2984dce9":"code","0e79fef0":"code","21c273d5":"code","b05b3f73":"code","4936ac44":"code","f726a7ac":"code","47098c08":"code","075a60e3":"code","fa4b778d":"code","8814a1bc":"code","bb91ea7c":"code","008b9f62":"code","c9ef46c2":"code","938344e6":"code","ca0ffe6d":"code","a4c7539e":"code","847c6d45":"code","4a11cf89":"code","73d84111":"code","29111037":"code","65b49fd1":"code","51122429":"code","739f0023":"code","e24a0a14":"code","9a689e6d":"code","a383f59c":"code","9dcca861":"code","86aec098":"code","78c70e3e":"code","48b66ab1":"code","6ae015b7":"code","6da681ca":"code","ae789814":"code","9e33f87a":"code","d29921eb":"code","f9ba7443":"code","c435a048":"code","71a87f4f":"code","3d13250f":"code","6ffcd77e":"code","5d3610bc":"code","359c7bd1":"code","6bf551e0":"code","0ae3171d":"code","c939df70":"code","e6fb8085":"code","8b47560e":"code","30e0beb7":"code","a0c2bf8c":"code","a75aac4f":"code","870082a1":"code","6be2b9b6":"code","b681a73e":"code","43dde570":"code","7bd2e63b":"code","21f7ebd4":"code","b558d87d":"code","271f4f46":"code","36635c35":"code","b1071cbd":"code","02ffc0b1":"code","6f72b834":"code","549bb9d6":"code","05037c1c":"code","7a7719c1":"code","aaffd18b":"code","01d2c8f4":"code","1a86819f":"code","89070a04":"code","f057fe5e":"code","16ebb648":"code","f206d847":"code","da8ff5ee":"code","e25ad5f1":"code","438c3403":"code","b09f4f82":"code","36773976":"markdown","b2ea074e":"markdown","85d4ff90":"markdown","15db5dcd":"markdown","1dea91ea":"markdown","cf828328":"markdown","729002c6":"markdown","e102f0a1":"markdown","d587da72":"markdown","b6699bd3":"markdown","ee2e20ed":"markdown","db01ec22":"markdown","a372aaa5":"markdown","2fee69b2":"markdown","31453c38":"markdown","9dfd9ab9":"markdown","d23fa89a":"markdown","4c865865":"markdown","f2d767c8":"markdown","28f6af93":"markdown","54f6ce34":"markdown","e06ea0e1":"markdown"},"source":{"338889ae":"import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd \nfrom matplotlib import rcParams\n%matplotlib inline\nimport plotly.express as px\nimport datetime\nfrom fbprophet import diagnostics\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom fbprophet.diagnostics import performance_metrics\npd.set_option('display.max_columns', None)\nimport os\nimport itertools\nimport statsmodels.api as sm\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint\nimport math\nfrom sklearn.preprocessing import MinMaxScaler\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.options.display.float_format = '{:.0f}'.format\nimport math\nfrom zipfile import ZipFile\nimport statsmodels.api as sm\nfrom statsmodels.tsa.ar_model import AutoReg\nfrom pandas.plotting import lag_plot\nfrom pandas.plotting import autocorrelation_plot\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.tsa.arima_model import ARMA\n","ab22b335":"oil_price = pd.read_csv(r'C:\\Users\\205694\\Desktop\\Sentiment Analysis\\Crude Oil\\ntt-data-global-ai-challenge-06-2020\\Crude_oil_trend_From1986-01-02_To2020-06-15.csv')\ncases=pd.read_csv(r'C:\\Users\\205694\\Desktop\\Sentiment Analysis\\Crude Oil\\ntt-data-global-ai-challenge-06-2020\\COVID-19_and_Price_dataset.csv')","ec05cf66":"oil_price_v = oil_price.copy()\noil_price_v['Date']=pd.to_datetime(oil_price_v['Date'])\noil_price_v = oil_price_v.sort_values('Date')\noil_price_v.set_index('Date', inplace=True)\noil_price_v=oil_price_v.loc[datetime.date(year=1986,month=1,day=1):]\nplt.figure(figsize=(15,8))\nplt.plot(oil_price_v,color = 'tab:blue')\nplt.title('Oil Price Fluctuation since 1986 to Present')\nplt.xlabel('Year')\nplt.ylabel('Oil Price ')\nplt.show()","033194ce":"fig, axis1 = plt.subplots(figsize = (25,15))\nplt.grid()\nplt.xticks(rotation=\"vertical\")\nline1, = axis1.plot(cases['Date'], cases['Price'], color = 'tab:red')\naxis1.set_ylabel(\"Oil price\")\naxis1.set_xlabel(\"Date\")\naxis2 = axis1.twinx()\nline2, = axis2.plot(cases['Date'], cases['World_total_cases'], color = 'tab:blue')\naxis2.set_ylabel(\"Number of cases\")\nfig.legend((line1, line2),('Oil price','Total cases'),'upper right')\nplt.title(\"Daily World Cases vs. Oil Price between 31-12-2019 to 15-06-2020\")\nplt.show()","5b716fd9":"fig, axis1 = plt.subplots(figsize = (25,15))\nplt.grid()\nplt.xticks(rotation=\"vertical\")\nline1, = axis1.plot(cases['Date'], cases['Price'], color = 'tab:red')\naxis1.set_ylabel(\"Oil price\")\naxis1.set_xlabel(\"Date\")\naxis2 = axis1.twinx()\nline2, = axis2.plot(cases['Date'], cases['World_total_cases'],color = 'tab:blue')\naxis2.set_ylabel(\"Number of cases\")\naxis3 = axis1.twinx()\nline3, = axis3.plot(cases['Date'], cases['World_total_deaths'],linestyle='dashed',color = 'tab:green')\nfig.legend((line1, line2, line3),('Oil price','Total cases','Total deaths'),'upper right')\nplt.title(\"Daily World Total Cases vs. Daily World Total Death vs. Oil price between 31-12-2019 to 15-06-2020\")\nplt.show()","fec71dcd":"fig,axis = plt.subplots(figsize=(25,15))\nplt.grid()\nplt.xticks(rotation='vertical')\naxis.plot(cases['Date'],cases['World_new_cases'])\naxis.set(xlabel=\"Date\",ylabel=\"World New Cases\",title=\"World New Cases between 31-12-2019 to 15-06-2020\")\nplt.show()","38d8cac4":"fig,axis = plt.subplots(figsize=(25,15))\nplt.grid()\nplt.xticks(rotation='vertical')\naxis.plot(cases['Date'],cases['World_total_deaths'])\naxis.set(xlabel=\"Date\",ylabel=\"World Total Deaths\",title=\"World Total Deaths between 31-12-2019 to 15-06-2020\")\nplt.show()","8f4145b0":"fig, axis = plt.subplots(figsize=(25,15))\nplt.grid()\nplt.xticks(rotation='vertical')\naxis.plot(cases['Date'],cases['World_new_deaths'])\naxis.set(xlabel=\"Date\",ylabel=\"World New Deaths\",title=\"World New Deaths between 31-12-2019 to 15-06-2020\")\nplt.show()","0a6f8e61":"fig, axis1 = plt.subplots(figsize = (25,15))\nplt.grid()\nplt.xticks(rotation=\"vertical\")\nline1, = axis1.plot(cases['Date'], cases['Price'], color = 'tab:red')\naxis1.set_ylabel(\"Oil price\")\naxis1.set_ylabel(\"Date\")\naxis2 = axis1.twinx()\nline2, = axis2.plot(cases['Date'], cases['UnitedStates_total_cases'],color = 'tab:blue')\naxis2.set_ylabel(\"Number of cases\")\nfig.legend((line1, line2),('Oil price', 'Total cases'),'upper right')\nplt.title(\"Daily USA cases vs. Oil price between 31-12-2019 to 15-06-2020\")\nplt.show()","050a97bc":"fig, axis1 = plt.subplots(figsize = (25,15))\nplt.grid()\nplt.xticks(rotation=\"vertical\")\nline1, = axis1.plot(cases['Date'], cases['Price'], color = 'tab:red')\naxis1.set_ylabel(\"Oil price\")\naxis1.set_xlabel(\"Date\")\naxis2 = axis1.twinx()\nline2, = axis2.plot(cases['Date'], cases['Italy_total_cases'],color = 'tab:blue')\naxis2.set_ylabel(\"Number of cases\")\nfig.legend((line1, line2),('Oil price', 'Total cases'),'upper right')\nplt.title(\"Daily Italy cases vs. Oil price between 31-12-2019 to 15-06-2020\")\nplt.show()","e78183f7":"fig, axis1 = plt.subplots(figsize = (25,15))\nplt.grid()\nplt.xticks(rotation=\"vertical\")\nline1, = axis1.plot(cases['Date'], cases['Price'], color = 'tab:red')\naxis1.set_ylabel(\"Oil price\")\naxis1.set_xlabel(\"Date\")\naxis2 = axis1.twinx()\nline2, = axis2.plot(cases['Date'], cases['China_total_cases'],color = 'tab:blue')\naxis2.set_ylabel(\"Number of cases\")\nfig.legend((line1, line2),('Oil price', 'Total cases'),'upper right')\nplt.title(\"Daily China cases vs. Oil price between 31-12-2019 to 15-06-2020\")\nplt.show()","fa7394eb":"fig, axis1 = plt.subplots(figsize = (25,15))\nplt.grid()\nplt.xticks(rotation=\"vertical\")\nline1, = axis1.plot(cases['Date'], cases['Price'], color = 'tab:red')\naxis1.set_ylabel(\"Oil price\")\naxis1.set_xlabel(\"Date\")\naxis2 = axis1.twinx()\nline2, = axis2.plot(cases['Date'], cases['France_total_cases'],color = 'tab:blue')\naxis2.set_ylabel(\"Number of cases\")\nfig.legend((line1, line2),('Oil price', 'Total cases'),'upper right')\nplt.title(\"Daily France cases vs. Oil price between 31-12-2019 to 15-06-2020\")\nplt.show()","1c742099":"oil_price_prophet=oil_price[(oil_price['Date'] >= '2016-06-17') & (oil_price['Date'] < '2020-07-06')]\noil_price_prophet.reset_index(drop=True,inplace=True)","d89ef73e":"oil_price_prophet['ds'] = pd.to_datetime(oil_price_prophet['Date']).dt.date\noil_price_prophet['y']  = oil_price_prophet['Price']\noil_price_prophet = oil_price_prophet[['ds', 'y']]\ntest_y = oil_price_prophet[-30:] \noil_price_prophet = oil_price_prophet[:-30] ","490d51ac":"test_y","e9ecc01b":"from fbprophet import Prophet\nfrom fbprophet.diagnostics import cross_validation","bcb5a012":"prophet = Prophet()\nprophet.fit(oil_price_prophet)","30b29899":"future = prophet.make_future_dataframe(periods=90, freq = 'd')","7362f1d5":"forecast = prophet.predict(future)\n# forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","0ee605f3":"future_pred = forecast[['ds','yhat']]\nfuture_pred = future_pred.rename(columns={'ds': 'Date', 'yhat': 'Predicted Value'})\nfuture_pred.to_csv('Prophet_Oil_crude.csv')","651bd55f":"prophet.plot(forecast)","dd5b53da":"pred = forecast[['ds', 'yhat']][-80:]\npred['ds'] = pd.to_datetime(pred['ds']).dt.date\nresult = pd.merge(test_y, pred, how=\"inner\" ,on=\"ds\")","d0ff0b62":"def mean_abs_p_error(y_true,y_pred):\n    y_true, y_pred =np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true )) * 100","90c7f6e9":"mape_baseline = mean_abs_p_error(result.y, result.yhat)\nprint('Test MAPE: %.3f' % mape_baseline)","b5a49856":"rmse = np.sqrt(mean_squared_error(result['y'] , result['yhat'] ))\nprint('Test RMSE: %.3f' % rmse)","f2f4cfbb":"fig2 = prophet.plot_components(forecast)","21d789a8":"from fbprophet.plot import plot_plotly\nimport plotly.offline as py\npy.init_notebook_mode()\n\nfig = plot_plotly(prophet, forecast) \npy.iplot(fig)","1ce410da":"cases_world_total_prophet = cases[['Date','World_total_cases']]","fd116df3":"cases_world_total_prophet['ds'] = pd.to_datetime(cases_world_total_prophet['Date']).dt.date\ncases_world_total_prophet['y']  = cases_world_total_prophet['World_total_cases']\ncases_world_total_prophet = cases_world_total_prophet[['ds', 'y']]\ncases_world_total_test_y = cases_world_total_prophet[-30:] \ncases_world_total_prophet = cases_world_total_prophet[:-30] ","266229c5":"prophet1 = Prophet(growth='linear')\nprophet1.fit(cases_world_total_prophet)","b649f66d":"future1 = prophet1.make_future_dataframe(periods=75, freq = 'd')","16a0400b":"forecast1 = prophet1.predict(future1)\nforecast1[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","eb18a0e2":"future_pred1 = forecast1[['ds','yhat']]\nfuture_pred1 = future_pred1.rename(columns={'ds': 'Date', 'yhat': 'Predicted Value'})\nfuture_pred1.to_csv('Prophet_World_Cases.csv')","f9453a7d":"prophet1.plot(forecast1)","a03d8655":"pred1 = forecast1[['ds', 'yhat']][-40:]\npred1['ds'] = pd.to_datetime(pred1['ds']).dt.date\nresult1 = pd.merge(cases_world_total_test_y, pred1, how=\"inner\" ,on=\"ds\")","f75388a6":"mape_baseline = mean_abs_p_error(result1.y, result1.yhat)\nprint('Test MAPE: %.3f' % mape_baseline)","c5c59ec1":"rmse = np.sqrt(mean_squared_error(result1['y'] , result1['yhat'] ))\nprint('Test RMSE: %.3f' % rmse)","3fc57839":"fig3 = prophet1.plot_components(forecast1)","207e389e":"fig = plot_plotly(prophet1, forecast1) \npy.iplot(fig)","c23a40eb":"cases_world_death_prophet = cases[['Date','World_total_deaths']]","1b34657e":"cases_world_death_prophet['ds'] = pd.to_datetime(cases_world_death_prophet['Date']).dt.date\ncases_world_death_prophet['y']  = cases_world_death_prophet['World_total_deaths']\ncases_world_death_prophet = cases_world_death_prophet[['ds', 'y']]\ncases_world_death_test_y = cases_world_death_prophet[-30:] \ncases_world_death_prophet = cases_world_death_prophet[:-30] ","9909132d":"prophet2 = Prophet(growth='linear')\nprophet2.fit(cases_world_death_prophet)","94cb4b75":"future2 = prophet2.make_future_dataframe(periods=75, freq = 'd')","686ecd22":"forecast2 = prophet2.predict(future2)\nforecast2[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","ae930909":"future_pred2 = forecast2[['ds','yhat']]\nfuture_pred2 = future_pred2.rename(columns={'ds': 'Date', 'yhat': 'Predicted Value'})\nfuture_pred2.to_csv('Prophet_World_death.csv')","2e4a31b3":"prophet2.plot(forecast2)","6d84b4d3":"pred2 = forecast2[['ds', 'yhat']][-40:]\npred2['ds'] = pd.to_datetime(pred2['ds']).dt.date\nresult2 = pd.merge(cases_world_death_test_y, pred2, how=\"inner\" ,on=\"ds\")","1ec581a3":"mape_baseline = mean_abs_p_error(result2.y, result2.yhat)\nprint('Test MAPE: %.3f' % mape_baseline)","892d549a":"rmse = np.sqrt(mean_squared_error(result2['y'] , result2['yhat'] ))\nprint('Test RMSE: %.3f' % rmse)","43c243d9":"fig2 = prophet2.plot_components(forecast2)","743f7e7a":"fig = plot_plotly(prophet2, forecast2) \npy.iplot(fig)","05d96ea1":"oil_price_lstm=oil_price[(oil_price['Date'] >= '2016-06-17') & (oil_price['Date'] < '2020-06-15')]\noil_price_lstm.reset_index(drop=True,inplace=True)","41ce38c1":"oil_price_lstm['Date']=pd.to_datetime(oil_price_lstm['Date'])\noil_price_lstm = oil_price_lstm.sort_values('Date')\noil_price_lstm.set_index('Date', inplace=True)\n# oil_price_lstm=oil_price_lstm.loc[datetime.date(year=2016,month=1,day=1):]","2cc9c1af":"sc = MinMaxScaler(feature_range = (0, 1))\noil_price_lstm = sc.fit_transform(oil_price_lstm)","1fcd5357":"train_data, test_data = oil_price_lstm[0:int(len(oil_price_lstm)*0.8), :], oil_price_lstm[int(len(oil_price_lstm)*0.8):len(oil_price_lstm), :]","53f307da":"# train_data = oil_price[(oil_price['Date'] >= '2016-06-17') & (oil_price['Date'] < '2020-04-15')]","78e556a6":"def prepare_dataset( dataset, seq ):\n    data, label =[],[]\n    for i in range( len(dataset) - seq - 1 ):\n        d = dataset[ i:( i+seq ), 0 ]\n        data.append(d)\n        label.append(dataset[i+seq,0])\n    return np.array(data), np.array(label)","3057b4de":"train_x, train_y = prepare_dataset(train_data,40)\ntest_x, test_y = prepare_dataset(test_data,40)\ntrain_x = np.reshape(train_x, (train_x.shape[0], train_x.shape[1],1))\ntest_x = np.reshape(test_x, (test_x.shape[0], test_x.shape[1],1))","0508bd05":"model = Sequential()\nmodel.add(LSTM(units = 60,activation = 'relu',input_shape = (train_x.shape[1], 1)))\nmodel.add(Dense(units = 1))\nmodel.compile(optimizer = 'adam', loss = 'mean_squared_error')","41528f13":"history = model.fit(train_x, train_y, epochs = 25, batch_size = 15, validation_data = (test_x, test_y), verbose =1)","51745cb8":"test_predict = model.predict(test_x)","00ce2b3b":"test_predict = sc.inverse_transform(test_predict)\ntest_y = sc.inverse_transform([test_y])","d13a3d86":"y=[x for x in range(159)]\nplt.figure(figsize=(8,4))\nplt.plot(y, test_y[0][:159], marker='.', label=\"actual\")\nplt.plot(y, test_predict[:,0][:159], 'r', label=\"prediction\")\nplt.tight_layout()\nplt.subplots_adjust(left=0.07)\nplt.ylabel('Price', size=15)\nplt.xlabel('Time step', size=15)\nplt.legend(fontsize=15)\nplt.show();","62dea292":"print('Test Mean Absolute Error:', mean_absolute_error(test_y[0], test_predict[:,0]))\nprint('Test Root Mean Squared Error:',np.sqrt(mean_squared_error(test_y[0], test_predict[:,0])))","3887619b":"df = oil_price_lstm.copy()","7dc3eccc":"len(df['Date'])","4ccfa2e1":"close_data = df['Price'].values\nclose_data = close_data.reshape((-1,1))\n\nsplit_percent = 0.80\nsplit = int(split_percent*len(close_data))\n\nclose_train = close_data[:split]\nclose_test = close_data[split:]\n\ndate_train = df['Date'][:split]\ndate_test = df['Date'][split:]","7f4bfe62":"look_back = 15\ntrain_generator = TimeseriesGenerator(close_train, close_train, length=look_back, batch_size=20)     \ntest_generator = TimeseriesGenerator(close_test, close_test, length=look_back, batch_size=1)","d404eb76":"from keras.models import Sequential\nfrom keras.layers import LSTM, Dense\n\nmodel = Sequential()\nmodel.add(\n    LSTM(10,\n        activation='relu',\n        input_shape=(look_back,1))\n)\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\n\nnum_epochs = 25\nmodel.fit_generator(train_generator, epochs=num_epochs, verbose=1)","1ec84d1e":"prediction = model.predict_generator(test_generator)\nclose_train = close_train.reshape((-1))\nclose_test = close_test.reshape((-1))\nprediction = prediction.reshape((-1))","38438659":"close_data = close_data.reshape((-1))\n\ndef predict(num_prediction, model):\n    prediction_list = close_data[-look_back:]\n    \n    for _ in range(num_prediction):\n        x = prediction_list[-look_back:]\n        x = x.reshape((1, look_back, 1))\n        out = model.predict(x)[0][0]\n        prediction_list = np.append(prediction_list, out)\n    prediction_list = prediction_list[look_back-1:]\n        \n    return prediction_list\n    \ndef predict_dates(num_prediction):\n    last_date = df['Date'].values[-1]\n    prediction_dates = pd.date_range(last_date, periods=num_prediction+1).tolist()\n    return prediction_dates\n\nnum_prediction = 85\nforecast = predict(num_prediction, model)\nforecast_dates = predict_dates(num_prediction)","51b420e8":"df_new = pd.DataFrame(columns=columns)","61c50f0f":"df_new['Price'] = forecast.tolist()\ndf_new['Date'] = forecast_dates","a5667dbf":"df_new.to_csv('LSTM_prediction.csv')","523069c0":"cases_world_total_lstm = cases[['Date','World_total_cases']]","bd14b3c6":"# cases_world_total_lstm=cases_world_total[(cases_world_total['Date'] >= '2016-06-17') & (cases_world_total['Date'] < '2020-06-15')]\n# cases_world_total_lstm.reset_index(drop=True,inplace=True)","46588809":"cases_world_total_lstm['Date']=pd.to_datetime(cases_world_total_lstm['Date'])\ncases_world_total_lstm = cases_world_total_lstm.sort_values('Date')\ncases_world_total_lstm.set_index('Date', inplace=True)","acd9029f":"future_test = test_x[158].T\ntime_length = future_test.shape[1]","95923599":"future_test","cf23ebb8":"sc = MinMaxScaler(feature_range = (0, 1))\ncases_world_total_lstm = sc.fit_transform(cases_world_total_lstm)","3bf02063":"train_data, test_data = cases_world_total_lstm[0:int(len(cases_world_total_lstm)*0.8), :], cases_world_total_lstm[int(len(cases_world_total_lstm)*0.8):len(cases_world_total_lstm), :]","245c9381":"def prepare_dataset( dataset, seq ):\n    data, label =[],[]\n    for i in range( len(dataset) - seq - 1 ):\n        d = dataset[ i:( i+seq ), 0 ]\n        data.append(d)\n        label.append(dataset[i+seq,0])\n    return np.array(data), np.array(label)","0c6c4008":"train_x, train_y = prepare_dataset(train_data,10)\ntest_x, test_y = prepare_dataset(test_data,10)","b4606f12":"train_x = np.reshape(train_x, (train_x.shape[0], train_x.shape[1],1))\ntest_x = np.reshape(test_x, (test_x.shape[0], test_x.shape[1],1))","f4f2b648":"model = Sequential()\nmodel.add(LSTM(units = 60,activation = 'relu', input_shape = (train_x.shape[1], 1)))\nmodel.add(Dense(units = 1))\nmodel.compile(optimizer = 'adam', loss = 'mean_squared_error')","9375e03b":"history = model.fit(train_x, train_y, epochs = 25, batch_size = 15, validation_data = (test_x, test_y), verbose =1)","b7fe3659":"test_predict = model.predict(test_x)","6636a68c":"test_predict = sc.inverse_transform(test_predict)\ntest_y = sc.inverse_transform([test_y])","8ae6b7c1":"print('Test Mean Absolute Error:', mean_absolute_error(test_y[0], test_predict[:,0]))\nprint('Test Root Mean Squared Error:',np.sqrt(mean_squared_error(test_y[0], test_predict[:,0])))","b5464efb":"len(train_data)","83f58392":"cases_world_death_lstm = cases[['Date','World_total_deaths']]","8b9adafa":"# cases_world_death_lstm=cases_world_death[(cases_world_death['Date'] >= '2016-06-17') & (cases_world_death['Date'] < '2020-06-15')]\n# cases_world_death_lstm.reset_index(drop=True,inplace=True)","22e8ea72":"cases_world_death_lstm['Date']=pd.to_datetime(cases_world_death_lstm['Date'])\ncases_world_death_lstm = cases_world_death_lstm.sort_values('Date')\ncases_world_death_lstm.set_index('Date', inplace=True)","8ca4d714":"sc = MinMaxScaler(feature_range = (0, 1))\ncases_world_death_lstm = sc.fit_transform(cases_world_death_lstm)","ba843177":"train_data, test_data = cases_world_death_lstm[0:int(len(cases_world_death_lstm)*0.8), :], cases_world_death_lstm[int(len(cases_world_death_lstm)*0.8):len(cases_world_death_lstm), :]","e580642d":"train_x, train_y = prepare_dataset(train_data,10)\ntest_x, test_y = prepare_dataset(test_data,10)","0dbeef59":"train_x = np.reshape(train_x, (train_x.shape[0], train_x.shape[1],1))\ntest_x = np.reshape(test_x, (test_x.shape[0], test_x.shape[1],1))","611b0069":"model = Sequential()\nmodel.add(LSTM(units = 60,activation = 'relu', input_shape = (train_x.shape[1], 1)))\nmodel.add(Dense(units = 1))\nmodel.compile(optimizer = 'adam', loss = 'mean_squared_error')","aba2e951":"history = model.fit(train_x, train_y, epochs = 25, batch_size = 15, validation_data = (test_x, test_y), verbose =1)","08792c31":"test_predict = model.predict(test_x)","cf7be811":"test_predict = sc.inverse_transform(test_predict)\ntest_y = sc.inverse_transform([test_y])","78828381":"print('Test Mean Absolute Error:', mean_absolute_error(test_y[0], test_predict[:,0]))\nprint('Test Root Mean Squared Error:',np.sqrt(mean_squared_error(test_y[0], test_predict[:,0])))","cbda5d3e":"len(train_data)","e6ca3481":"# For Predicting Future Prices\nDate1 = pd.date_range('2020-07-07', periods=85, freq='D')\ncolumns = ['Date','Price']    \ndf2 = pd.DataFrame(columns=columns)\ndf2['Price'] = pd.to_numeric(df2['Price'])\ndf2[\"Date\"] = pd.to_datetime(Date1)\ndf2 = df2.fillna(0)\n#Remove Weekends as in source data and store data frame as Test1 results to be loaded in Test 1\ndf1 = df2[df2[\"Date\"].dt.weekday < 5]\ndf1[\"Date\"] = pd.to_datetime(df1[\"Date\"])\ndf1['Price'] = pd.to_numeric(df1['Price'])","3ad6b2dd":"oil_price_arima=oil_price[(oil_price['Date'] >= '2019-06-17') & (oil_price['Date'] < '2020-07-06')]\noil_price_arima['Date']=pd.to_datetime(oil_price_arima['Date'])","b42861bf":"oil_price_arima = oil_price_arima.append(df1,ignore_index=True)\noil_price_arima[\"Date\"] = pd.to_datetime(oil_price_arima[\"Date\"])","ad34f525":"oil_price_arima.set_index('Date', inplace=True)","6f129f93":"# oil_price_arima.index = pd.to_datetime(oil_price_arima.index)\n# oil_price_arima = oil_price_arima.resample('D').ffill().reset_index()","44531313":"test_data = oil_price_arima.iloc[-84:] \ntrain_data = oil_price_arima.iloc[:-84] ","dce785d4":"autocorrelation_plot(oil_price_arima)\nplt.title(\"Autocorrelation Plot\")\nplt.show()","94278c6c":"plot_pacf(oil_price_arima, lags=31)\nplt.title(\"ACF Plot\")\nplt.show()","020119bf":"plot_acf(oil_price_arima, lags=31)\nplt.title(\"ACF Plot\")\nplt.show()","701c19fd":"decomposition = sm.tsa.seasonal_decompose(train_data, model='addititve', period=7)\nfig = decomposition.plot()\nplt.show()","01ad5b45":"from statsmodels.tsa.arima.model import ARIMA","beca997e":"model = ARIMA(train_data, order=(30,1,5)).fit()","3a0b09eb":"yhat = model.predict(train_data.shape[0], train_data.shape[0]+test_data.shape[0]-1)","07398ce2":"final=pd.DataFrame({\"Date\":test_data.index,\"Predicted\":yhat, \"Actual\":test_data[\"Price\"].values})","9410c7d8":"final.to_csv('Arima_prediction_oil_crude.csv')","099bf843":"final_show=final[(final['Date'] >= '2020-05-04') & (final['Date'] < '2020-06-15')]\nfinal_show.set_index(\"Date\", inplace=True)","bcf5e275":"final_show[\"Actual\"].plot(label=\"Actual\")\nfinal_show[\"Predicted\"].plot(label=\"Predicted\")\nplt.title(\"Actual vs. Predicted\")\nplt.legend()\nplt.show()","3e6d1fb0":"mape_baseline = mean_absolute_error(final_show.Predicted, final_show.Actual)\nprint('Test MAPE: %.3f' % mape_baseline)","0897186c":"print(\"Test RMSE\",math.sqrt(mean_squared_error(final_show.Actual, final_show.Predicted)))","025d340b":"# For Predicting Future Prices\nDate1 = pd.date_range('2020-06-15', periods=60, freq='D')\ncolumns = ['Date','World_total_cases']    \ndf2 = pd.DataFrame(columns=columns)\ndf2['World_total_cases'] = pd.to_numeric(df2['World_total_cases'])\ndf2[\"Date\"] = pd.to_datetime(Date1)\ndf2 = df2.fillna(0)\n#Remove Weekends as in source data and store data frame as Test1 results to be loaded in Test 1\ndf1 = df2[df2[\"Date\"].dt.weekday < 5]\ndf1[\"Date\"] = pd.to_datetime(df1[\"Date\"])\ndf1['World_total_cases'] = pd.to_numeric(df1['World_total_cases'])","96d0ff8f":"cases_world_cases_arima = cases[['Date','World_total_cases']]\ncases_world_cases_arima['Date']=pd.to_datetime(cases_world_cases_arima['Date'])","2a9ae7c3":"cases_world_cases_arima = cases_world_cases_arima.append(df1,ignore_index=True)\ncases_world_cases_arima[\"Date\"] = pd.to_datetime(cases_world_cases_arima[\"Date\"])","1eed393e":"cases_world_cases_arima.set_index('Date', inplace=True)","15dc91c2":"test_data = cases_world_cases_arima.iloc[-72:] \ntrain_data = cases_world_cases_arima.iloc[:-72] ","3eb27d49":"autocorrelation_plot(cases_world_cases_arima)\nplt.title(\"Autocorrelation Plot\")\nplt.show()","f3246887":"plot_pacf(cases_world_cases_arima, lags=31)\nplt.title(\"ACF Plot\")\nplt.show()","2b8b2bf9":"plot_acf(cases_world_cases_arima, lags=31)\nplt.title(\"ACF Plot\")\nplt.show()","a6b4ca30":"decomposition = sm.tsa.seasonal_decompose(train_data, model='addititve', period=7)\nfig = decomposition.plot()\nplt.show()","8ef1b048":"model = ARIMA(train_data, order=(30, 1,5)).fit()","aa0e9591":"yhat = model.predict(train_data.shape[0], train_data.shape[0]+test_data.shape[0]-1)","c27ebd05":"final=pd.DataFrame({\"Date\":test_data.index,\"Predicted\":yhat, \"Actual\":test_data[\"World_total_cases\"].values})","14576cd4":"final.to_csv('Arima_world_total_cases.csv')","b9ec607f":"final_show=final[(final['Date'] >= '2020-05-04') & (final['Date'] < '2020-06-15')]\nfinal_show.set_index(\"Date\", inplace=True)","f294b0bf":"final_show[\"Actual\"].plot(label=\"Actual\")\nfinal_show[\"Predicted\"].plot(label=\"Predicted\")\nplt.title(\"Actual vs. Predicted\")\nplt.legend()\nplt.show()","97c72a84":"mape_baseline = mean_absolute_error(final_show.Predicted, final_show.Actual)\nprint('Test MAPE: %.3f' % mape_baseline)","e887fc78":"print(\"Test RMSE\",math.sqrt(mean_squared_error(final_show.Actual, final_show.Predicted)))","bda6dce8":"# For Predicting Future Prices\nDate1 = pd.date_range('2020-06-15', periods=60, freq='D')\ncolumns = ['Date','World_total_deaths']    \ndf2 = pd.DataFrame(columns=columns)\ndf2['World_total_deaths'] = pd.to_numeric(df2['World_total_deaths'])\ndf2[\"Date\"] = pd.to_datetime(Date1)\ndf2 = df2.fillna(0)\n#Remove Weekends as in source data and store data frame as Test1 results to be loaded in Test 1\ndf1 = df2[df2[\"Date\"].dt.weekday < 5]\ndf1[\"Date\"] = pd.to_datetime(df1[\"Date\"])\ndf1['World_total_deaths'] = pd.to_numeric(df1['World_total_deaths'])","77a29287":"cases_world_death_arima = cases[['Date','World_total_deaths']]\ncases_world_death_arima['Date']=pd.to_datetime(cases_world_death_arima['Date'])","670bed15":"cases_world_death_arima = cases_world_death_arima.append(df1,ignore_index=True)\ncases_world_death_arima[\"Date\"] = pd.to_datetime(cases_world_death_arima[\"Date\"])","989a63ce":"cases_world_death_arima.set_index('Date', inplace=True)","30d9ee37":"test_data = cases_world_death_arima.iloc[-72:] \ntrain_data = cases_world_death_arima.iloc[:-72] ","2fe61e2c":"autocorrelation_plot(cases_world_death_arima)\nplt.title(\"Autocorrelation Plot\")\nplt.show()","0be4632f":"plot_pacf(cases_world_death_arima, lags=31)\nplt.title(\"ACF Plot\")\nplt.show()","2984dce9":"plot_acf(cases_world_death_arima, lags=31)\nplt.title(\"ACF Plot\")\nplt.show()","0e79fef0":"decomposition = sm.tsa.seasonal_decompose(train_data, model='addititve', period=7)\nfig = decomposition.plot()\nplt.show()","21c273d5":"model = ARIMA(train_data, order=(30, 1,5)).fit()","b05b3f73":"yhat = model.predict(train_data.shape[0], train_data.shape[0]+test_data.shape[0]-1)","4936ac44":"final=pd.DataFrame({\"Date\":test_data.index,\"Predicted\":yhat, \"Actual\":test_data[\"World_total_deaths\"].values})","f726a7ac":"final.to_csv('Arima_world_death.csv')","47098c08":"final_show=final[(final['Date'] >= '2020-05-04') & (final['Date'] < '2020-06-15')]\nfinal_show.set_index(\"Date\", inplace=True)","075a60e3":"final_show[\"Actual\"].plot(label=\"Actual\")\nfinal_show[\"Predicted\"].plot(label=\"Predicted\")\nplt.title(\"Actual vs. Predicted\")\nplt.legend()\nplt.show()","fa4b778d":"mape_baseline = mean_absolute_error(final_show.Predicted, final_show.Actual)\nprint('Test MAPE: %.3f' % mape_baseline)","8814a1bc":"print(\"Test RMSE\",math.sqrt(mean_squared_error(final_show.Actual, final_show.Predicted)))","bb91ea7c":"cases_world_total_new_lstm = cases[['Date','World_total_cases','World_total_deaths','Price']]","008b9f62":"cases_world_total_new_lstm=cases_world_total_new_lstm[(cases_world_total_new_lstm['Date'] >= '2019-12-31') & (cases_world_total_new_lstm['Date'] < '2020-07-06')]","c9ef46c2":"cases_world_total_new_lstm['Date'] = pd.to_datetime(cases_world_total_new_lstm['Date'])","938344e6":"new_df = pd.DataFrame()\nnew_df[\"Dates\"] = pd.date_range(start='2020-01-01', end='2020-07-06')\nnew_df[\"Dates\"] = pd.to_datetime(new_df[\"Dates\"])","ca0ffe6d":"# cases_world_total_new_lstm_new = pd.concat([new_df,cases_world_total_new_lstm], join=\"outer\", axis=1)","a4c7539e":"cases_world_total_new_lstm_new = new_df.merge(cases_world_total_new_lstm, left_on=\"Dates\",right_on='Date', how = 'left')","847c6d45":"cases_world_total_new_lstm_new.drop(columns='Date',inplace=True)","4a11cf89":"cases_world_total_new_lstm_new = cases_world_total_new_lstm_new.fillna(0)","73d84111":"cases_world_total_new_lstm_new.tail(21)","29111037":"sat_day=3\nfor i in range(27):\n    sun_day= sat_day+1\n    prev_day =sat_day-1\n    next_day =sat_day+2\n#     print(cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"China_total_cases\")])\n#     print(cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"China_total_cases\")])\n    if (cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_cases\")] != 0 or cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_cases\")] != 0):\n        Threshold = (cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_cases\")] + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_cases\")]) \/ 2\n        Threshold_sat = (Threshold + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_cases\")]) \/ 2\n        Threshold_sun = (Threshold + cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_cases\")]) \/ 2\n        cases_world_total_new_lstm_new.iloc[sat_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_cases\")] = Threshold_sat\n        cases_world_total_new_lstm_new.iloc[sun_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_cases\")] = Threshold_sun\n    else:\n        cases_world_total_new_lstm_new.iloc[sat_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_cases\")] = cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_cases\")]\n        cases_world_total_new_lstm_new.iloc[sun_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_cases\")] = cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_cases\")]\n    sat_day=sat_day+7\n","65b49fd1":"# sat_day=3\n# for i in range(23):\n#     sun_day= sat_day+1\n#     prev_day =sat_day-1\n#     next_day =sat_day+2\n# #     print(cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"China_total_cases\")])\n# #     print(cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"China_total_cases\")])\n#     if (cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_cases\")] != 0 or cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_cases\")] != 0):\n#         Threshold = (cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_cases\")] + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_cases\")]) \/ 2\n#         Threshold_sat = (Threshold + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_cases\")]) \/ 2\n#         Threshold_sun = (Threshold + cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_cases\")]) \/ 2\n#         cases_world_total_new_lstm_new.iloc[sat_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_cases\")] = Threshold_sat\n#         cases_world_total_new_lstm_new.iloc[sun_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_cases\")] = Threshold_sun\n#     else:\n#         cases_world_total_new_lstm_new.iloc[sat_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_cases\")] = cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_cases\")]\n#         cases_world_total_new_lstm_new.iloc[sun_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_cases\")] = cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_cases\")]\n#     sat_day=sat_day+7","51122429":"# sat_day=3\n# for i in range(23):\n#     sun_day= sat_day+1\n#     prev_day =sat_day-1\n#     next_day =sat_day+2\n# #     print(cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"China_total_cases\")])\n# #     print(cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"China_total_cases\")])\n#     if (cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_cases\")] != 0 or cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_cases\")] != 0):\n#         Threshold = (cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_cases\")] + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_cases\")]) \/ 2\n#         Threshold_sat = (Threshold + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_cases\")]) \/ 2\n#         Threshold_sun = (Threshold + cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_cases\")]) \/ 2\n#         cases_world_total_new_lstm_new.iloc[sat_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_cases\")] = Threshold_sat\n#         cases_world_total_new_lstm_new.iloc[sun_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_cases\")] = Threshold_sun\n#     else:\n#         cases_world_total_new_lstm_new.iloc[sat_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_cases\")] = cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_cases\")]\n#         cases_world_total_new_lstm_new.iloc[sun_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_cases\")] = cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_cases\")]\n#     sat_day=sat_day+7","739f0023":"# sat_day=3\n# for i in range(23):\n#     sun_day= sat_day+1\n#     prev_day =sat_day-1\n#     next_day =sat_day+2\n# #     print(cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"China_total_cases\")])\n# #     print(cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"China_total_cases\")])\n#     if (cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_cases\")] != 0 or cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_cases\")] != 0):\n#         Threshold = (cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_cases\")] + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_cases\")]) \/ 2\n#         Threshold_sat = (Threshold + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_cases\")]) \/ 2\n#         Threshold_sun = (Threshold + cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_cases\")]) \/ 2\n#         cases_world_total_new_lstm_new.iloc[sat_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_cases\")] = Threshold_sat\n#         cases_world_total_new_lstm_new.iloc[sun_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_cases\")] = Threshold_sun\n#     else:\n#         cases_world_total_new_lstm_new.iloc[sat_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_cases\")] = cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_cases\")]\n#         cases_world_total_new_lstm_new.iloc[sun_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_cases\")] = cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_cases\")]\n#     sat_day=sat_day+7","e24a0a14":"len(cases_world_total_new_lstm_new)","9a689e6d":"sat_day=3\nfor i in range(27):\n    sun_day= sat_day+1\n    prev_day =sat_day-1\n    next_day =sat_day+2\n    Threshold = (cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"Price\")] + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"Price\")]) \/ 2\n    Threshold_sat = (Threshold + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"Price\")]) \/ 2\n    Threshold_sun = (Threshold + cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"Price\")]) \/ 2\n    cases_world_total_new_lstm_new.iloc[sat_day,cases_world_total_new_lstm_new.columns.get_loc(\"Price\")] = Threshold_sat\n    cases_world_total_new_lstm_new.iloc[sun_day,cases_world_total_new_lstm_new.columns.get_loc(\"Price\")] = Threshold_sun\n    sat_day=sat_day+7","a383f59c":"len(cases_world_total_new_lstm_new)","9dcca861":"sat_day=3\nfor i in range(27):\n    sun_day= sat_day+1\n    prev_day =sat_day-1\n    next_day =sat_day+2\n    \n    Threshold = (cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_deaths\")] + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_deaths\")]) \/ 2\n    Threshold_sat = (Threshold + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_deaths\")]) \/ 2\n    Threshold_sun = (Threshold + cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_deaths\")]) \/ 2\n    cases_world_total_new_lstm_new.iloc[sat_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_deaths\")] = Threshold_sat\n    cases_world_total_new_lstm_new.iloc[sun_day,cases_world_total_new_lstm_new.columns.get_loc(\"World_total_deaths\")] = Threshold_sun\n    sat_day=sat_day+7","86aec098":"# sat_day=3\n# for i in range(23):\n#     sun_day= sat_day+1\n#     prev_day =sat_day-1\n#     next_day =sat_day+2\n    \n#     Threshold = (cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_deaths\")] + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_deaths\")]) \/ 2\n#     Threshold_sat = (Threshold + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_deaths\")]) \/ 2\n#     Threshold_sun = (Threshold + cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_deaths\")]) \/ 2\n#     cases_world_total_new_lstm_new.iloc[sat_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_deaths\")] = Threshold_sat\n#     cases_world_total_new_lstm_new.iloc[sun_day,cases_world_total_new_lstm_new.columns.get_loc(\"Italy_total_deaths\")] = Threshold_sun\n#     sat_day=sat_day+7","78c70e3e":"# sat_day=3\n# for i in range(23):\n#     sun_day= sat_day+1\n#     prev_day =sat_day-1\n#     next_day =sat_day+2\n    \n#     Threshold = (cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_deaths\")] + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_deaths\")]) \/ 2\n#     Threshold_sat = (Threshold + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_deaths\")]) \/ 2\n#     Threshold_sun = (Threshold + cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_deaths\")]) \/ 2\n#     cases_world_total_new_lstm_new.iloc[sat_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_deaths\")] = Threshold_sat\n#     cases_world_total_new_lstm_new.iloc[sun_day,cases_world_total_new_lstm_new.columns.get_loc(\"France_total_deaths\")] = Threshold_sun\n#     sat_day=sat_day+7","48b66ab1":"# sat_day=3\n# for i in range(23):\n#     sun_day= sat_day+1\n#     prev_day =sat_day-1\n#     next_day =sat_day+2\n    \n#     Threshold = (cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_deaths\")] + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_deaths\")]) \/ 2\n#     Threshold_sat = (Threshold + cases_world_total_new_lstm_new.iloc[prev_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_deaths\")]) \/ 2\n#     Threshold_sun = (Threshold + cases_world_total_new_lstm_new.iloc[next_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_deaths\")]) \/ 2\n#     cases_world_total_new_lstm_new.iloc[sat_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_deaths\")] = Threshold_sat\n#     cases_world_total_new_lstm_new.iloc[sun_day,cases_world_total_new_lstm_new.columns.get_loc(\"UnitedStates_total_deaths\")] = Threshold_sun\n#     sat_day=sat_day+7","6ae015b7":"len(cases_world_total_new_lstm_new)","6da681ca":"# cases_world_total_new_lstm.reset_index(drop=True,inplace=True)","ae789814":"# cases_world_total_new_lstm_new.to_csv('cases.csv')","9e33f87a":"# cases_world_total_new_lstm_new['prev_price'] = cases_world_total_new_lstm_new['Price'].shift(1)\n# # cases_world_total_new_lstm_new = cases_world_total_new_lstm_new.dropna()\n# cases_world_total_new_lstm_new['diff'] = (cases_world_total_new_lstm_new['Price'] - cases_world_total_new_lstm_new['prev_price'])\n# df_supervised = cases_world_total_new_lstm_new.drop(['prev_price'],axis=1)\n# for inc in range(1,13):\n#     field_name = 'lag_' + str(inc)\n#     df_supervised[field_name] = df_supervised['diff'].shift(inc)\n#     #drop null values\n# # df_supervised = df_supervised.dropna().reset_index(drop=True)","d29921eb":"# df_supervised['prev_China_total_cases'] = df_supervised['China_total_cases'].shift(1)\n# # df_supervised = df_supervised.dropna()\n# df_supervised['diff_China_total_cases'] = (df_supervised['China_total_cases'] - df_supervised['prev_China_total_cases'])\n# df_supervised_1 = df_supervised.drop(['prev_China_total_cases'],axis=1)\n# for inc in range(1,13):\n#     field_name = 'China_total_cases_lag_' + str(inc)\n#     df_supervised_1[field_name] = df_supervised_1['diff_China_total_cases'].shift(inc)\n#     #drop null values\n# # df_supervised_1 = df_supervised_1.dropna().reset_index(drop=True)","f9ba7443":"# df_supervised_1['prev_China_total_deaths'] = df_supervised_1['China_total_deaths'].shift(1)\n# # df_supervised_1 = df_supervised_1.dropna()\n# df_supervised_1['diff_China_total_deaths'] = (df_supervised_1['China_total_deaths'] - df_supervised_1['prev_China_total_deaths'])\n# df_supervised_2 = df_supervised_1.drop(['prev_China_total_deaths'],axis=1)\n# for inc in range(1,13):\n#     field_name = 'China_total_deaths_lag_' + str(inc)\n#     df_supervised_2[field_name] = df_supervised_2['diff_China_total_deaths'].shift(inc)\n#     #drop null values\n# # df_supervised_2 = df_supervised_2.dropna().reset_index(drop=True)","c435a048":"# len(df_supervised_2)","71a87f4f":"china_feature_matrix = pd.read_csv(r'C:\\Users\\205694\\Desktop\\Sentiment Analysis\\Crude Oil\\ntt-data-global-ai-challenge-06-2020\\Feature_Matrix_ALL_resize.csv')","3d13250f":"china_feature_matrix['Dates'] = pd.date_range('2020-01-01', periods=188, freq='D')","6ffcd77e":"china_feature_matrix.drop(columns=['PC8','PC9','PC10'],inplace=True)","5d3610bc":"# china_feature_matrix['Dates'] = pd.date_range(start='2020-01-01', end='2020-06-08')","359c7bd1":"china_feature_matrix","6bf551e0":"# final_china = pd.merge(df_supervised_2, china_feature_matrix, on=\"Dates\")","0ae3171d":"final_china_1 = pd.merge(cases_world_total_new_lstm_new, china_feature_matrix, on='Dates')","c939df70":"# final_china = final_china.fillna(0)\nfinal_china_1 = final_china_1.fillna(0)","e6fb8085":"final_china_1.head(5)","8b47560e":"final_china_1 = final_china_1[['Dates', 'World_total_cases', 'World_total_deaths', 'PC1', 'PC2', 'PC3','PC4','PC5','PC6','PC7','Price']]","30e0beb7":"# For Predicting Future Prices\nDate1 = pd.date_range('2020-07-07', periods=60, freq='D')\ncolumns = ['Dates', 'World_total_cases', 'World_total_deaths', 'Price', 'PC1',\n       'PC2', 'PC3','PC4','PC5','PC6','PC7']\n# , 'PC4', 'PC5', 'PC6', 'PC7', 'PC8', 'PC9', 'PC10']    \ndf2 = pd.DataFrame(columns=columns)\ndf2['World_total_cases'] = pd.to_numeric(df2['World_total_cases'])\ndf2[\"Dates\"] = pd.to_datetime(Date1)\ndf2['World_total_deaths'] = pd.to_numeric(df2['World_total_deaths'])\ndf2[\"Price\"] = pd.to_numeric(df2['Price'])\ndf2['PC1'] = pd.to_numeric(df2['PC1'])\ndf2[\"PC2\"] = pd.to_numeric(df2['PC2'])\ndf2['PC3'] = pd.to_numeric(df2['PC3'])\ndf2[\"PC4\"] = pd.to_numeric(df2['PC4'])\ndf2['PC5'] = pd.to_numeric(df2['PC5'])\ndf2[\"PC6\"] = pd.to_numeric(df2['PC6'])\ndf2['PC7'] = pd.to_numeric(df2['PC7'])\n# df2[\"PC8\"] = pd.to_numeric(df2['PC8'])\n# df2['PC9'] = pd.to_numeric(df2['PC9'])\n# df2[\"PC10\"] = pd.to_numeric(df2['PC10'])\ndf2 = df2.fillna(0)\n#Remove Weekends as in source data and store data frame as Test1 results to be loaded in Test 1\n# df1 = df2[df2[\"Date\"].dt.weekday < 5]\n# df1[\"Date\"] = pd.to_datetime(df1[\"Date\"])\n# df1['World_total_deaths'] = pd.to_numeric(df1['World_total_deaths'])\nfinal_china_1 = final_china_1.append(df2,ignore_index=True)\nfinal_china_1[\"Dates\"] = pd.to_datetime(final_china_1[\"Dates\"])","a0c2bf8c":"len(final_china_1)","a75aac4f":"final_china_1 = final_china_1.fillna(0)","870082a1":"final_china_1.set_index('Dates', inplace=True)","6be2b9b6":"final_china_1","b681a73e":"test_ind = 85","43dde570":"train = final_china_1.iloc[:-test_ind]\ntest = final_china_1.iloc[-test_ind:]","7bd2e63b":"from sklearn.preprocessing import MinMaxScaler","21f7ebd4":"scaler = MinMaxScaler()\nscaler.fit(train)","b558d87d":"scaled_train = scaler.transform(train)\nscaled_test = scaler.transform(test)","271f4f46":"from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator","36635c35":"length = 5 # Length of the output sequences (in number of timesteps)\nbatch_size = 1 #Number of timeseries samples in each batch\ngenerator = TimeseriesGenerator(scaled_train, scaled_train, length=length, batch_size=batch_size)","b1071cbd":"X,y = generator[0]","02ffc0b1":"scaled_train.shape","6f72b834":"model = Sequential()\n\n# Simple RNN layer\nmodel.add(LSTM(100,input_shape=(length,scaled_train.shape[1])))\n\n# Final Prediction (one neuron per feature)\nmodel.add(Dense(scaled_train.shape[1]))\n\nmodel.compile(optimizer='adam', loss='mse')","549bb9d6":"model.summary()","05037c1c":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss',patience=1)\nvalidation_generator = TimeseriesGenerator(scaled_test,scaled_test,length=length, batch_size=batch_size)","7a7719c1":"model.fit_generator(generator,epochs=10,\n                    validation_data=validation_generator,\n                   callbacks=[early_stop])","aaffd18b":"losses = pd.DataFrame(model.history.history)","01d2c8f4":"first_eval_batch = scaled_train[-length:]","1a86819f":"first_eval_batch = first_eval_batch.reshape((1, length, scaled_train.shape[1]))","89070a04":"model.predict(first_eval_batch)","f057fe5e":"n_features = scaled_train.shape[1]\ntest_predictions = []\n\nfirst_eval_batch = scaled_train[-length:]\ncurrent_batch = first_eval_batch.reshape((1, length, n_features))\n\nfor i in range(len(test)):\n    \n    # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n    current_pred = model.predict(current_batch)[0]\n    \n    # store prediction\n    test_predictions.append(current_pred) \n    \n    # update batch to now include prediction and drop first value\n    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)","16ebb648":"true_predictions = scaler.inverse_transform(test_predictions)\ntrue_predictions = pd.DataFrame(data=true_predictions,columns=test.columns)","f206d847":"rmse = np.sqrt(mean_squared_error(true_predictions['Price'][:21], test['Price'][:21]))\nprint('Test RMSE: %.3f' % rmse)","da8ff5ee":"y=[x for x in range(21)]\nplt.figure(figsize=(8,4))\nplt.plot(y, test['Price'][:21], marker='.', label=\"actual\")\nplt.plot(y, true_predictions['Price'][:21], 'r', label=\"prediction\")\nplt.tight_layout()\nplt.subplots_adjust(left=0.07)\nplt.ylabel('Price', size=15)\nplt.xlabel('Time step', size=15)\nplt.legend(fontsize=15)\nplt.show();","e25ad5f1":"Date1 = pd.date_range('2020-06-12', periods=85, freq='D')\ncolumns = ['Dates','Actual Price','Predicted Price']    \ndf_final = pd.DataFrame(columns=columns)\ndf_final['Actual Price'] = test['Price']\ndf_final['Predicted Price'] = true_predictions['Price'].values\ndf_final[\"Dates\"] = pd.to_datetime(Date1)","438c3403":"df_final","b09f4f82":"df_final.to_csv('multi_lstm.csv')","36773976":"## Prophet Model for Crude Oil","b2ea074e":"### China \n#### China Daily cases vs. Oil price: 31-12-2019 to 15-06-2020","85d4ff90":"## Arima Prediction for World Total Deaths","15db5dcd":"## Arima Prediction for World Total Cases","1dea91ea":"## Importing Libraries","cf828328":"## Plotting Oil Price vs Daily World Cases,Deaths","729002c6":"## Exploratory Data Analysis on Covid Data and Crude Oil Price\n### Oil Price Fluctuation since 1986 to 2020","e102f0a1":"## LSTM Model For Crude Oil Prediction","d587da72":"## LSTM Model For World Total Deaths","b6699bd3":"## Arima Prediction Crude Oil","ee2e20ed":"### Daily World Cases vs Oil Price between 31-12-2019 to 15-06-2020","db01ec22":"## Plotting Oil Price vs Countrywise Daily  Cases","a372aaa5":"### World Total Deaths between 31-12-2019 to 15-06-2020","2fee69b2":"### Daily World Total Cases vs. Daily World Total Death vs. Oil Price between 31-12-2019 to 15-06-2020","31453c38":"## Reading csv files","9dfd9ab9":"### France \n#### France Daily cases vs. Oil price: 31-12-2019 to 15-06-2020","d23fa89a":"### United States \n#### United States Daily cases vs Oil price: 31-12-2019 to 15-06-2020","4c865865":"## LSTM Model For World Total Cases","f2d767c8":"## PRICE FORECASTING USING MULTIVARIATE LSTM","28f6af93":"### World New Cases between 31-12-2019 to 15-06-2020","54f6ce34":"### World New Deaths between 31-12-2019 to 15-06-2020","e06ea0e1":"### Italy \n#### Italy Daily cases vs. Oil price: 31-12-2019 to 15-06-2020"}}