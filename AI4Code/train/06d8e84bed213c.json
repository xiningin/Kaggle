{"cell_type":{"dfe504b4":"code","707f34bc":"code","4cfa2674":"code","d70de66f":"code","ab5b142a":"code","0b098745":"code","7df9c3f4":"code","3a8b092a":"code","7cb901ec":"code","ea65d396":"code","82a6bdf7":"code","ab8908a3":"code","2d7eea02":"code","cbf4e0a9":"code","a2617ea5":"code","ba3d532b":"code","eeb1fc4c":"code","69d64210":"code","41d24385":"code","7261c8c5":"code","10df5e29":"code","80508dee":"code","05ee5c54":"code","c8300320":"code","df490757":"code","a8ca2e53":"code","fc853d3a":"markdown","95cd7fb2":"markdown","f0edd01d":"markdown","39ba6fbd":"markdown","dfd29a0e":"markdown","1f245cf6":"markdown","4239a22d":"markdown","5e52f7b2":"markdown","19f0ace0":"markdown","ce02ffb6":"markdown","019ef9c2":"markdown","3e8aed99":"markdown","536d60e1":"markdown","d7ddfad7":"markdown","b78a58a9":"markdown","880450d9":"markdown","f0b6c663":"markdown","bcde1087":"markdown","1e520d6c":"markdown","24ca88be":"markdown","3c8aca35":"markdown","0e0a40ed":"markdown","58a134ec":"markdown","f8e24bd3":"markdown","159d274c":"markdown","56a074e0":"markdown","0b1c72bd":"markdown"},"source":{"dfe504b4":"# Get all the required libraries \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode,iplot\nimport plotly.figure_factory as ff\ninit_notebook_mode(connected=True)\nimport matplotlib.cm as cm\nimport re\nfrom sklearn import linear_model\n# Reading the Input data\ndf = pd.read_csv(\"..\/input\/data.csv\")","707f34bc":"def pietrace(df, col_name=None):\n    tmp = df[col_name].value_counts()\n    return go.Pie(labels=list(tmp.index), values=list(tmp.values))\n\ndef boxtrace(df=None, col_name=None, boxpoints='outliers', boxmean=True):\n    return go.Box(y=df[col_name],name=col_name,boxpoints = boxpoints, boxmean=boxmean)\n\ndef violintrace(df=None, x_col=None, y_col=None, name=None):\n    if not x_col:\n        return go.Violin(y=df[y_col], box={\"visible\": True}, meanline={\"visible\": True}, name=name)\n    return go.Violin(x=df[x_col], y=df[y_col], box={\"visible\": True}, meanline={\"visible\": True}, name=name)\n\ndef distplot(df=None, col_names=[], show_hist=False):\n    data = [df[x].fillna(-1) for x in col_names]\n    return ff.create_distplot(data, col_names, show_hist=show_hist)\n\ndef bartrace(df=None, x_col=None, y_col=None, name=None):\n    return go.Bar(\n        y=df[y_col],\n        x=df[x_col],\n        name=name\n    )\n\ndef scattertrace(df=None, x_col=None, y_col=None, hover_col=None):\n    return go.Scatter(\n        y = df[y_col],\n        x = df[x_col],\n        hovertext= df[hover_col],\n        mode = 'markers'\n    )","4cfa2674":"df = pd.read_csv(\"..\/input\/data.csv\")\ndf.sample(n=5)","d70de66f":"def convert_currency(x):\n    x = x.replace('\u20ac','')\n    if x.endswith(\"M\"):\n        return float(x.split(\"M\")[0]) * 1000000\n    elif x.endswith(\"K\"):\n        return float(x.split(\"K\")[0]) * 1000\ndf['Value_eur'] = df['Value'].apply(convert_currency) # Numeric value in Euros","ab5b142a":"def feet_to_inches(x):\n    tmp = x.split(\"'\")\n    return int(tmp[0]) * 12 + int(tmp[1])\ndf[\"Height\"].fillna(\"0'0\", inplace=True) # To fill missing values\ndf[\"height_inches\"] = df[\"Height\"].apply(feet_to_inches)","0b098745":"df[\"weight_lbs\"] = df[\"Weight\"].str.replace(\"lbs\", \"\")\ndf[\"weight_lbs\"] = df[\"weight_lbs\"].astype('float')","7df9c3f4":"iplot([pietrace(df=df, col_name=\"Body Type\")])","3a8b092a":"iplot([boxtrace(df=df, col_name=\"Dribbling\"), boxtrace(df=df, col_name=\"HeadingAccuracy\")])","7cb901ec":"df[df[\"Dribbling\"] > 96].head()","ea65d396":"iplot([violintrace(df=df, y_col=\"HeadingAccuracy\")])","82a6bdf7":"data=[violintrace(df=df[df[\"Club\"] == \"FC Barcelona\"], y_col=\"Aggression\", name=\"FC Barcelona\"),\n      violintrace(df=df[df[\"Club\"] == \"Roma\"], y_col=\"Aggression\", name=\"Roma\"),\n      violintrace(df=df[df[\"Club\"] == \"Juventus\"], y_col=\"Aggression\", name=\"Juventus\"),\n      violintrace(df=df[df[\"Club\"] == \"Manchester City\"], y_col=\"Aggression\", name=\"Manchester City\")]\nlayout = {\n        \"title\": \"Aggression\",\n        \"yaxis\": {\n            \"zeroline\": False,\n        },\n        \"violinmode\": \"group\"\n    }\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","ab8908a3":"data=[violintrace(df=df[df[\"Club\"] == \"FC Barcelona\"], x_col=\"Preferred Foot\", y_col=\"Aggression\", name=\"FC Barcelona\"),\n      violintrace(df=df[df[\"Club\"] == \"Juventus\"], x_col=\"Preferred Foot\", y_col=\"Aggression\", name=\"Juventus\"),\n      violintrace(df=df[df[\"Club\"] == \"Manchester City\"], x_col=\"Preferred Foot\", y_col=\"Aggression\", name=\"Manchester City\"),\n      violintrace(df=df[df[\"Club\"] == \"Roma\"], x_col=\"Preferred Foot\", y_col=\"Aggression\", name=\"Roma\")]\nlayout = {\n        \"title\": \"Aggression\",\n        \"yaxis\": {\n            \"zeroline\": False,\n        },\n        \"violinmode\": \"group\"\n    }\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","2d7eea02":"iplot(distplot(df=df[(df[\"Club\"] == \"FC Barcelona\") & (df[\"Preferred Foot\"] == \"Left\")], col_names=[\"Aggression\"]))","cbf4e0a9":"iplot(distplot(df=df[df[\"Club\"] == \"Paris Saint-Germain\"], col_names=[\"Value_eur\"]))","a2617ea5":"df[\"Age\"].hist()","ba3d532b":"# Group by Clubs and get mean of overall ratings\ndf_group1 = df[[\"Club\",\"Overall\"]].groupby([\"Club\"])[\"Overall\"].mean().reset_index().sort_values(\"Overall\", ascending=False)","eeb1fc4c":"df_group1.head()","69d64210":"iplot([bartrace(df=df_group1, x_col=\"Club\", y_col=\"Overall\")])","41d24385":"# We first group by Preferred Foot and Club and get the maximum value of Value_eur (value in euros). Other options are mean(), median() etc\n# To minimize the visualization, we restrict players with Value > 25Million\ndf_grp1 = df[df[\"Value_eur\"] > 25000000][[\"Club\", \"Preferred Foot\", \"Value_eur\"]].groupby([\"Club\", \"Preferred Foot\"]).max().reset_index().sort_values([\"Club\", \"Value_eur\"])\n# Here we combine two barplots into a single one for visualization\ndata = [\n            bartrace(df=df_grp1[df_grp1[\"Preferred Foot\"] == \"Right\"], x_col=\"Club\", y_col=\"Value_eur\", name=\"Right footed\"),\n            bartrace(df=df_grp1[df_grp1[\"Preferred Foot\"] == \"Left\"], x_col=\"Club\", y_col=\"Value_eur\", name=\"Left footed\")\n       ]\nlayout = go.Layout(\n    title='Aggregated player value',\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","7261c8c5":"# Limiting plot to players with Value > 25million\niplot([scattertrace(df=df[df[\"Value_eur\"] > 25000000], x_col=\"height_inches\", y_col=\"weight_lbs\", hover_col=\"Name\")])","10df5e29":"x = df[df[\"Name\"] == \"Neymar Jr\"]\ny = df[df[\"Name\"] == \"L. Modri\u0107\"]\ndata = [go.Scatterpolar(\n  r = [x['Crossing'].values[0],x['Finishing'].values[0],x['Dribbling'].values[0],x['ShortPassing'].values[0],x['LongPassing'].values[0],x['BallControl'].values[0]],\n  theta = ['Crossing', 'Finishing', 'Dribbling', 'ShortPassing', 'LongPassing', 'BallControl'],\n  fill = 'toself',\n  name=x[\"Name\"].values[0]\n),\n       go.Scatterpolar(\n  r = [y['Crossing'].values[0],y['Finishing'].values[0],y['Dribbling'].values[0],y['ShortPassing'].values[0],y['LongPassing'].values[0],y['BallControl'].values[0]],\n  theta = ['Crossing', 'Finishing', 'Dribbling', 'ShortPassing', 'LongPassing', 'BallControl'],\n  fill = 'toself',\n  name=y[\"Name\"].values[0]\n)]\n\nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n    )\n  ),\n  showlegend = True,\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename = \"Player stats\")","80508dee":"from collections import Counter\ndef get_num_vowels(x):\n    x = x.lower()\n    ctr = Counter(x)\n    return sum([ctr[x] for x in ['a','e','i','o','u']]) # Return sum of occurences of a,e,i,o,u\ndf[\"name_vowels_count\"] = df[\"Name\"].apply(get_num_vowels)","05ee5c54":"# Now we group by the count(num_vowels) and get average value binned into different counts\ndf_grp2 = df[[\"name_vowels_count\", \"Value_eur\"]].groupby([\"name_vowels_count\"]).agg([\"max\", \"mean\"]).reset_index()\ndf_grp2.columns = ['_'.join(tup).rstrip('_') for tup in df_grp2.columns.values]","c8300320":"df_grp2.head()","df490757":"data = [\n            bartrace(df=df_grp2, x_col=\"name_vowels_count\", y_col=\"Value_eur_max\", name=\"Value_eur_max\"),\n            bartrace(df=df_grp2, x_col=\"name_vowels_count\", y_col=\"Value_eur_mean\", name=\"Value_eur_mean\")\n       ]\nlayout = go.Layout(\n    title='Vowels player value'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","a8ca2e53":"df[df[\"name_vowels_count\"] == 0].head()","fc853d3a":"Apart from Normal, Lean and Stocky, other values seem to be noise in the data & could be removed","95cd7fb2":"Let's have a look at players marked as upper-end outliers for dribbling score**","f0edd01d":"** Scatterpolar **\n\nBonus pokemon type visualization from t[his kernel ](https:\/\/www.kaggle.com\/thebrownviking20\/intermediate-visualization-tutorial-using-plotly)","39ba6fbd":"We can also check if for these clubs, is the spread is same for Left footed vs right footed players (using column **Preferred Foot**)","dfd29a0e":"Let's try visualizing average **Overall** rating for players for each club","1f245cf6":"**Violin plots**\n\nViolin plots are similar to box plots, except that they also show the probability density of the data at different values\n\nIf we try visualizing HeadingAccuracy as violinplot, now we can see that it has 2 peaks (around 11 and around 59), which is not evident by the boxplot itself","4239a22d":"Thank you for taking the time and reading this kernel. :)","5e52f7b2":"Quick distribution plots however can directly be plotted from pandas","19f0ace0":"At first glance, this EDA looks promising, and shows some correlation between number of vowels and Value.\nBut wait. let's just analyze counts 9 and count 0 in the dataframe","ce02ffb6":"To ensure that we build an entirely unbiased model, we now can actually see that we need do decide on action to take for values like  **P\u00e9p\u00e9** \n\nIs it to be considered as 2 vowels or 0?\n\nMy intent here is not to be a 100% right or to raise a debate on what the definition of a vowel is. *It's about being aware of all that there is while creating a feature, not push our bias and fully explore the data* before ending our hypothesis with **confirmation bias**. \n\nAlthough wouldn't it be a very strange world if we found out that our name actually has an impact on how much we accomplish!","019ef9c2":"This kernel is heavily inspired by this other awesome kernel for [Plotly visualization on Pokemon stats](https:\/\/www.kaggle.com\/thebrownviking20\/intermediate-visualization-tutorial-using-plotly)\n\nHere we will attempt to use most common poltly visualizations and try to make sense (or not to make sense) of the FIFA player dataset.\nVisualizations I've used are:\n* Pie\n* Box\n* Violin\n* Distribution\n* Bar\n* Scatter\n* ScatterPolar\n\nLet's begin! ","3e8aed99":"**Different Body Types**","536d60e1":"Import libs and helper functions for plotly","d7ddfad7":"I guess that's fair :D ","b78a58a9":"**When analysis can go wrong if we're not careful (adding our bias to the analysis)**","880450d9":"**Comparing Dribbling and Heading Accuracy**\n\nBoxplots are good for showing the spread of data and also highlighting possible outliers.\nNote that outliers do not necessarily mean that they should be removed from the data. They just represent the fact that they're bit far off from the distribution and are worth analyzing separately.\n(eg: in credit card transactions, outliers are very important as usually they are the ones that denote a suspicious activity)","f0b6c663":"We can now plot this aggregate result using interactive boxplots (Coolest part is that here we can click & drag on the plot to zoom-in into a specific area of the plot)\nAlso worth noting is that the labels for x-axis do not represent the entire dataset for Clubs (we need to hover or zoom-in)","bcde1087":"**Loading data in a pandas dataframe**","1e520d6c":"Before we proceed further, we need to do some preprocessing for variables like* **Height, Weight*** and monetary variables like ***Value, Wage *** so that they're converted to a numeric format","24ca88be":"**Bar plots**","3c8aca35":"Let's say I have a theory(hypothesis) that maybe the number of vowels in a player's name actually affect what the Value of player is ( not superstitious, just stastistical :P)\n\nLet's extract vowels from a player name and visualize it's spread","0e0a40ed":"Q: players with expensive *Value*  left footed or right footed?","58a134ec":"**Scatterplots**\n\nVisualizing height vs weight for the dataset. Scatterplots can be color coded by clubs\/nationality etc as well (refer: [plotly documentation](https:\/\/plot.ly\/python\/line-and-scatter\/))","f8e24bd3":"Observations:\n* Clubs where only one colored bar is displayed, may probably have other footed players but with value < 25Mil\n* 118Million vs 33million is a noticable difference from PSG \n* 80M vs 110 M for FC Barcelona is a noticeable difference as well\n\nIf \"Preferred foot\" is the variable we want to use as a feature, presense of rows like these between train\/val set make a lot of difference ( If training or validation set split is biased towards left footed players or vice-versa, model performance will get affected)","159d274c":"**Distribution plots**\n\nWe can use distribution plots to view the distribution as well\n\nLet's visualize Left footed player's aggression for FC Barcelona","56a074e0":"Also with plotly, if you click on legend icons, you can filter by legends (eg: clicking on \"Value_eur_mean\" on plot will disable it's display as a toggle switch)","0b1c72bd":"**Compare \"Aggression\" between different clubs**\nTaking example of FC Barcelona, Roma, Juventus and  Manchester City we can compare the spread of Aggression filtered by a variable (**Club** in this case)"}}