{"cell_type":{"6f5882a1":"code","62825111":"code","420021e0":"code","86af0fd8":"code","7352fe23":"code","697ac4fd":"code","f32c6b20":"code","a234c7cb":"code","eea703e7":"code","6fe775ee":"code","13963613":"code","31254d3d":"code","f95b8e14":"code","3df860e5":"code","8f3b64a9":"code","b3e46a2e":"code","6094f5e9":"code","354d1d8b":"code","2847efdd":"code","3cc0e13f":"code","83abf381":"code","74542104":"code","1145a192":"code","75eb63e0":"code","c6531021":"code","c76b59b1":"code","06b201a1":"code","5a9ee826":"code","8a77dec6":"code","8eb03e5f":"code","5074c7ce":"code","9d1d04c2":"code","6ee03dd2":"code","91188926":"code","628f8aad":"code","e83d9645":"code","1bd4eeaa":"code","a6445b20":"code","e8cb1816":"code","4c38c32b":"code","75148101":"code","dd8148f7":"code","2196fb70":"code","9ab73248":"code","08ee222a":"code","ef5811a8":"code","e848f4b6":"code","74f53917":"code","c95b5879":"code","f2fd1deb":"code","f0776840":"code","8addf72d":"code","d9952601":"code","cb2921bf":"code","5e8a4bb2":"code","aed94c41":"code","a3ccdc91":"code","039fc9de":"code","c2f28011":"code","6a29e4d5":"code","edd03b0b":"code","c56a86ad":"code","bb02343f":"code","aaa3f866":"code","994e36e7":"code","8e51fcff":"code","ac2fff4d":"code","367c3788":"code","658389c8":"code","a59d4e5d":"code","e7e6dde4":"code","0e8a2616":"code","0dd037c6":"code","bcca83d0":"code","b6b1a493":"code","4159281f":"code","048840f9":"code","55cd38ea":"code","844a6333":"code","30b3cdc3":"code","1354ee9a":"code","6aa23c43":"code","8c38aaae":"code","22336d95":"code","3952b9ca":"code","8f2eea80":"code","497358ad":"code","3420462f":"code","90fac1d5":"code","3170f85a":"code","859720a3":"code","1ee27eda":"code","ed51c639":"code","b78047a5":"code","3013eac0":"code","f3537ae2":"code","8d673fe9":"code","1b064271":"code","f7602367":"code","3075851b":"code","e0e43380":"code","efcd4cf5":"code","ffc4a858":"code","867f7a24":"code","9cfb1907":"code","bbafa77d":"code","e373fb33":"code","b2250b3e":"code","0c69725f":"code","997e24ee":"code","78b643f4":"code","21d36ecd":"code","1336f502":"code","4566d354":"code","4cf75bab":"code","10fe0302":"code","b2e2239e":"code","c596a521":"code","1380545a":"code","3b15ce46":"code","89b688f4":"code","1f6ec1cf":"code","9ecdad6e":"code","f5798d6a":"code","a984ec4a":"code","0879cc8c":"code","207f1d6e":"code","04153ea4":"code","9cbd89b7":"code","d29a8f34":"code","4c990a8b":"code","e1884ee3":"code","e6a9c1fb":"code","ed17aa6e":"code","312603b5":"code","44b069f2":"code","c1c37637":"code","3c74f8e2":"code","630ecb59":"code","45fd1275":"code","214ec5ef":"code","02e625e0":"code","7af51181":"code","82503380":"code","85d27bc4":"code","22267474":"code","eb6e2406":"code","76865207":"code","2cb05179":"code","a1a175f3":"code","a263df18":"code","64b9d23a":"code","e6b46d94":"code","0ff5b7ee":"code","a95d1747":"code","257fd6ad":"code","3f1500af":"code","d83327a5":"code","980d4a62":"code","e4762aa5":"code","24538de4":"code","8249cfaa":"code","8d625dd4":"code","5274bda5":"code","f5649552":"code","7224124b":"code","891a9cb1":"code","727b393e":"code","09baeff4":"code","0767e2df":"code","d691a618":"code","eebcc616":"code","96ce93b6":"code","f9669bd7":"code","4e9b6757":"code","43e4e024":"code","0f90f2ac":"code","6a005bb3":"code","da9490c7":"code","2ed3e8c7":"code","8eb563d7":"code","1c0eb394":"code","2ec32ae9":"code","d32b864a":"code","5fe38296":"code","2aaa9d8e":"code","10535801":"code","b2ca0da4":"code","e91fb245":"code","7763dd32":"code","b8241ea9":"code","f1326ab5":"code","63bfc555":"code","7a1d0466":"code","f5756ab5":"code","4f3ecc0a":"code","1c8b2460":"code","1162d401":"code","6d38f184":"code","d008ee1f":"code","a83ea08c":"code","50122848":"code","31b8ea7b":"code","1d296a54":"code","470979bd":"code","c61af93d":"code","c022f0df":"code","47c53ea1":"code","d5a34acc":"code","e7911339":"code","ae9b90e9":"code","1a5604f2":"code","5eeb2967":"code","b713a1a5":"code","8c7bd313":"code","75231614":"code","8032715e":"code","664c7cea":"code","68fc4694":"code","f353818a":"code","64846616":"code","6317a19d":"code","d86b39a2":"code","f3e4d54b":"code","f09ac2e5":"code","cfcf92d8":"code","572ea3d1":"code","c3366de7":"code","1236791a":"code","8bc001b6":"code","47792295":"code","204c1a3d":"code","c07a43e7":"code","af7156ae":"code","eb0a89fd":"code","fe03833e":"code","88065ae5":"code","4a3fc34a":"code","d583a725":"code","03bcd245":"code","e09a747a":"code","90ff761d":"code","2af00888":"code","7335bafc":"code","2eaca413":"code","0d355254":"code","feda6348":"code","ff614c0b":"code","4bc183fb":"code","92165a2c":"code","a3099c2c":"code","9e5ce9b6":"code","0daf8117":"code","7abeee85":"code","67d4b743":"code","34ba966d":"code","b28ae748":"code","f3820594":"code","4d9af0d0":"code","d5b32d3d":"code","3f6ed54b":"code","8ce8bd69":"code","3f7cd9b1":"code","962000c9":"code","9f8b9e1e":"code","17c693d4":"code","3b9eca03":"code","c1df4639":"code","eacb97b7":"code","297f68cb":"code","e9f53496":"markdown","2447e56e":"markdown","aa7fa38e":"markdown","19b7953f":"markdown","14ebf610":"markdown","1b367d96":"markdown","2d8cca42":"markdown","e9e2b23e":"markdown","a2619e88":"markdown","8cf493b0":"markdown","063a61cb":"markdown","89a7657b":"markdown","e56b17cb":"markdown","e50145af":"markdown","08d7a580":"markdown","37348faf":"markdown","a8614ee7":"markdown","593ce7e8":"markdown","d4c97e63":"markdown","ed172be6":"markdown","1be0034e":"markdown","042ee72c":"markdown","285d0fa5":"markdown","12633ba3":"markdown","48a4607f":"markdown","6a6f26ae":"markdown","c8ce5a1e":"markdown","37f89d35":"markdown","d9e6b3ff":"markdown","0822d603":"markdown","1578a626":"markdown","d00d792b":"markdown","199a87fd":"markdown","a4c0fe86":"markdown","7337bc55":"markdown","568a7d0b":"markdown","8a35f873":"markdown","f38debc6":"markdown","635c1652":"markdown","400b2270":"markdown","c84fbc31":"markdown","d3c3ce6f":"markdown","8b28920e":"markdown","4f6dfa2d":"markdown","4d9a7dc9":"markdown","5d760da6":"markdown","e27932d2":"markdown","4b460cee":"markdown","9478fb07":"markdown","827fe8ac":"markdown","9ee893ff":"markdown","f66d78a7":"markdown","b874ba82":"markdown","2f370de7":"markdown","37c60c59":"markdown","47a877b8":"markdown","1873e6d4":"markdown","b1c1bba0":"markdown","c591952d":"markdown","27cad9a7":"markdown","df4351a8":"markdown","1d0c11d3":"markdown","54640cf6":"markdown","9c37d74c":"markdown","3c41aa60":"markdown","1ad66304":"markdown","dfc69326":"markdown","27549467":"markdown","55d2c972":"markdown","65058ccb":"markdown","d5a9f70f":"markdown","baea7f0f":"markdown","8614d0aa":"markdown","494b0726":"markdown","466bef74":"markdown","ff04e87d":"markdown","f1bfba6a":"markdown","057edf1e":"markdown","317c5982":"markdown","6008966e":"markdown","5a8a41be":"markdown","b27a72b8":"markdown","57ec3948":"markdown","550297fc":"markdown","5c784765":"markdown","7c20aea5":"markdown","f058407b":"markdown","656071a7":"markdown","436c3055":"markdown","134d3bdc":"markdown","8f209086":"markdown","a45ccd33":"markdown","b69247f3":"markdown","806a4330":"markdown","454dd930":"markdown","dcaf28fc":"markdown","7cd3c2c1":"markdown","6de7389f":"markdown","33df6918":"markdown","fc81a89f":"markdown","95cc4341":"markdown","164acb33":"markdown","bc937923":"markdown","6428fc2c":"markdown","64b30622":"markdown","106f3139":"markdown","1bf74372":"markdown","18c3047a":"markdown","e63471a7":"markdown","58f616e3":"markdown","c3f1d6eb":"markdown","e9998635":"markdown","4ed0dc38":"markdown","cf18a9cc":"markdown","d46cf1f0":"markdown","27ff02b4":"markdown","b6076759":"markdown","09a981af":"markdown","a30c6363":"markdown","76a586ee":"markdown","4be4ce1b":"markdown","d60acb51":"markdown","42ebd01f":"markdown","05242097":"markdown","d587da28":"markdown","6f2d852e":"markdown","e4b00337":"markdown","5a01eff4":"markdown","b67f5371":"markdown","6e737ebf":"markdown","069e6686":"markdown","5bb87faf":"markdown","75849b65":"markdown","55fe6534":"markdown","95ebde23":"markdown","eb44f78f":"markdown","a86bafdd":"markdown","e3330543":"markdown","5c45c1ff":"markdown","925bdd9d":"markdown","3f7cea33":"markdown","6fa1d3b5":"markdown","90c8d8a2":"markdown","dfbcfc3a":"markdown","9ecb626f":"markdown","30dbc84c":"markdown","0b6bba69":"markdown","e8b47d01":"markdown","7871b9f0":"markdown","27d5a7ad":"markdown","2880a89a":"markdown","2006a351":"markdown","88871801":"markdown","05291436":"markdown","64904234":"markdown","9d5326f0":"markdown","d99e9ec7":"markdown","7f432cc6":"markdown","eb7c92f0":"markdown","55159fef":"markdown","bd12f607":"markdown","94323bc6":"markdown","44ac927e":"markdown","87205fe9":"markdown","f23913ae":"markdown","0a233934":"markdown","4157ba1b":"markdown","7e74a200":"markdown","fd47ebd2":"markdown","20962714":"markdown","83d9972b":"markdown","656a815e":"markdown","ed66a651":"markdown","37ccd2e0":"markdown","29a66c09":"markdown","97e8ff5a":"markdown","71fa9e9e":"markdown","269f8cba":"markdown","c2917df8":"markdown","8aeaec0c":"markdown","c4d0e190":"markdown","c3a97aa9":"markdown","06e38265":"markdown","55b9958e":"markdown","9eed6277":"markdown","6c8300ba":"markdown","b2dbe721":"markdown","260cedc7":"markdown","3acc3fc0":"markdown","e660191e":"markdown","7c11eadd":"markdown","2ad32e66":"markdown","c7c39bf0":"markdown","693435c5":"markdown","731cd095":"markdown","e06be80f":"markdown","91873d87":"markdown","e47a1dc6":"markdown","6c406b60":"markdown","2f9ec1d1":"markdown","aa83c9a0":"markdown","4c4daa71":"markdown","5978b1ec":"markdown","3bb96fad":"markdown","639c0a13":"markdown","32dd6264":"markdown","188b81df":"markdown","f4e14048":"markdown","67fd7b10":"markdown","56f026de":"markdown","864e64b0":"markdown","17f4b542":"markdown","c19e7bea":"markdown","e9c84f8e":"markdown","0cf4098f":"markdown","d02ea4e6":"markdown","41629367":"markdown","8a3a488d":"markdown","3d9b8922":"markdown","d10b409a":"markdown","0fe6998c":"markdown","2c5190fb":"markdown","c1c32d23":"markdown","af7040af":"markdown","900399ed":"markdown","c2523dea":"markdown","5b6e0153":"markdown","997924bb":"markdown","c0a53e87":"markdown","e8651d21":"markdown","1a468208":"markdown","e459d5a2":"markdown","d4398ec0":"markdown","ebba95ba":"markdown","135657db":"markdown","53b97f4f":"markdown","0bb53217":"markdown","3dd07eec":"markdown","2c5793f6":"markdown","40a453c4":"markdown","901d3cf6":"markdown","e2b34412":"markdown"},"source":{"6f5882a1":"from datetime import datetime\ntime_format = \"%d%b%Y %H:%M\"\ndatetime.now().strftime(time_format)","62825111":"!pip install git+https:\/\/github.com\/lisphilar\/covid19-sir#egg=covsirphy","420021e0":"import covsirphy as cs\nfrom covsirphy import line_plot, jpn_map\nfrom covsirphy import CleaningBase, JHUData\nfrom covsirphy import select_area, SelectArea, create_target_df\nfrom covsirphy import ModelBase, SIR, SIRD, SIRF, SIRFV, SEWIRF\nfrom covsirphy import Estimator, Predicter, Scenario, simulation, Trend","86af0fd8":"from collections import defaultdict\nfrom datetime import timedelta\nfrom dateutil.relativedelta import relativedelta\nimport functools\nfrom IPython.display import display, Markdown\nimport math\nimport os\nfrom pprint import pprint\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport matplotlib\nfrom matplotlib.ticker import ScalarFormatter\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport dask.dataframe as dd\npd.plotting.register_matplotlib_converters()\nimport seaborn as sns\nimport scipy as sci\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.cluster import KMeans\nimport sympy as sym","7352fe23":"# Ramdam\nnp.random.seed(123)\nos.environ[\"PYTHONHASHSEED\"] = \"123\"\n# Matplotlib\nplt.style.use(\"seaborn-ticks\")\nplt.rcParams[\"xtick.direction\"] = \"in\"\nplt.rcParams[\"ytick.direction\"] = \"in\"\nplt.rcParams[\"font.size\"] = 11.0\nplt.rcParams[\"figure.figsize\"] = (9, 6)\n# Pandas\npd.set_option(\"display.max_colwidth\", 1000)","697ac4fd":"for dirname, _, filenames in os.walk(\"\/kaggle\/input\"):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f32c6b20":"population_raw = pd.read_csv(\n    \"\/kaggle\/input\/covid19-global-forecasting-locations-population\/locations_population.csv\"\n)","a234c7cb":"population_raw.head()","eea703e7":"pd.DataFrame(population_raw.isnull().sum()).T","6fe775ee":"df = population_raw.copy()\ndf = df.rename({\"Province.State\": \"Province\", \"Country.Region\": \"Country\"}, axis=1)\ncols = [\"Country\", \"Province\", \"Population\"]\ndf = df.loc[:, cols].fillna(\"-\")\ndf.loc[df[\"Country\"] == df[\"Province\"], \"Province\"] = \"-\"\n# Add total records\n_total_df = df.loc[df[\"Province\"] != \"-\", :].groupby(\"Country\").sum()\n_total_df = _total_df.reset_index().assign(Province=\"-\")\ndf = pd.concat([df, _total_df], axis=0, sort=True)\ndf = df.drop_duplicates(subset=[\"Country\", \"Province\"], keep=\"first\")\n# Global\nglobal_value = df.loc[df[\"Province\"] == \"-\", \"Population\"].sum()\ndf = df.append(pd.Series([\"Global\", \"-\", global_value], index=cols), ignore_index=True)\n# Correct country name\ndf.loc[df[\"Country\"] == \"Korea, South\", \"Country\"] = \"South Korea\"\n# Sorting\ndf = df.sort_values(\"Population\", ascending=False).reset_index(drop=True)\ndf = df.loc[:, cols]\npopulation_df = df.copy()\npopulation_df.head()","13963613":"df = population_df.loc[population_df[\"Province\"] == \"-\", :]\npopulation_dict = df.set_index(\"Country\").to_dict()[\"Population\"]\npopulation_dict","31254d3d":"pyramid_csv_list = list()\nfor dirname, _, filenames in os.walk(\"\/kaggle\/input\/population-pyramid-2019\/\"):\n    for filename in filenames:\n        name = os.path.join(dirname, filename)\n        df = pd.read_csv(name)\n        df[\"Country\"], df[\"Year\"], _ = filename.replace(\".\", \"-\").split(\"-\")\n        pyramid_csv_list.append(df)\npyramid_raw = pd.concat(pyramid_csv_list, sort=True)\n\nfor dirname, _, filenames in os.walk(\"\/kaggle\/input\/population-pyramid-of-argentina-2019\/\"):\n    for filename in filenames:\n        name = os.path.join(dirname, filename)\n        df = pd.read_csv(name)\n        df[\"Country\"], df[\"Year\"], _ = filename.replace(\".\", \"-\").split(\"-\")\n        pyramid_csv_list.append(df)\npyramid_raw = pd.concat(pyramid_csv_list, sort=True)\n\n\npyramid_raw.head()\n\n","f95b8e14":"pyramid_raw[\"Country\"].unique()","3df860e5":"df = pyramid_raw.copy()\ndf[\"Country\"] = df[\"Country\"].replace(\n    {\n        \"United States of America\": \"US\",\n        \"United Kingdom\": \"UK\",\n    }\n)\n# Global (WORLD)\n_male = [\n    349432556, 342927576, 331497486, 316642222, 308286775, 306059387, 309236984,\n    276447037, 249389688, 241232876, 222609691, 192215395, 157180267, 128939392,\n    87185982, 54754941, 33648953, 15756942, 5327866, 1077791, 124144\n]\n_female = [\n    328509234, 321511867, 309769906, 295553758, 289100903, 288632766, 296293748,\n    268371754, 244399176, 238133281, 223162982, 195633743, 164961323, 140704320,\n    101491347, 69026831, 48281201, 26429329, 11352182, 3055845, 449279\n]\n_df = pd.DataFrame(\n    {\n        \"Age\": df[\"Age\"].unique(),\n        \"Country\": \"Global\",\n        \"F\": _female,\n        \"M\": _male,\n        \"Year\": 2019\n    }\n)\ndf = pd.concat([df, _df], axis=0, ignore_index=True, sort=True)\n# Sweden\n_male = [\n    307116, 304759, 296771, 270840, 291723, 376952, 343311, 315086,\n    312017, 336452, 342117, 306949, 279609, 265511, 273061, 195029,\n    113166, 61775, 26170, 6768, 415\n]\n_female = [\n    290553, 288817, 280944, 257677, 274760, 361526, 330153, 300752,\n    301288, 327453, 331458, 300084, 280009, 272149, 286879, 212480,\n    143654, 97633, 52624, 18130, 1771\n]\n_df = pd.DataFrame(\n    {\n        \"Age\": df[\"Age\"].unique(),\n        \"Country\": \"Sweden\",\n        \"F\": _female,\n        \"M\": _male,\n        \"Year\": 2019\n    }\n)\ndf = pd.concat([df, _df], axis=0, ignore_index=True, sort=True)\n# Philippines\n_male = [\n    5534962, 5820604, 5538414, 5383822, 5149849, 4710777, 4061897, 3581091, 3237426,\n    2832825, 2482953, 2015857, 1556935, 1082875, 668107, 364200, 199400, 73508,\n    17327, 3035, 208\n]\n_female = [\n    5240508, 5541514, 5273495, 5029137, 4896316, 4589506, 3982681,\n    3544279, 3191565, 2825286, 2521463, 2112380, 1714689, 1285782,\n    895866, 567282, 360751, 155294, 57969, 13376, 1411\n]\n_df = pd.DataFrame(\n    {\n        \"Age\": df[\"Age\"].unique(),\n        \"Country\": \"Philippines\",\n        \"F\": _female,\n        \"M\": _male,\n        \"Year\": 2019\n    }\n)\ndf = pd.concat([df, _df], axis=0, ignore_index=True, sort=True)\n# Arrange\ndf[\"Population\"] = df[\"F\"] + df[\"M\"]\ndf = df.pivot_table(\n    index=\"Age\", columns=[\"Country\"], values=\"Population\", aggfunc=\"last\"\n)\ndf = df.astype(np.int64).reset_index().rename({\"Age\": \"Age_bin\"}, axis=1)\nseries = df[\"Age_bin\"].str.replace(\"+\", \"-122\")\ndf[[\"Age_first\", \"Age_last\"]] = series.str.split(\"-\", expand=True).astype(np.int64)\ndf = df.drop(\"Age_bin\", axis=1)\nseries = df[\"Age_last\"]\ndf = df.apply(lambda x: x[:-2] \/ (x[-1] - x[-2] + 1), axis=1)\ndf[\"Age\"] = series\ndf = pd.merge(df, pd.DataFrame({\"Age\": np.arange(0, 123, 1)}), on=\"Age\", how=\"right\", sort=True)\ndf = df.fillna(method=\"bfill\").astype(np.int64)\ndf = df.set_index(\"Age\")\npyramid_df = df.copy()\npyramid_df","8f3b64a9":"# @marcoferrante estimation\n_period_of_life_list = [\n    \"nursery\", \"nursery school\", \"elementary school\", \"middle school\",\n    \"high school\", \"university\/work\", \"work\", \"work\", \"work\", \"work\",\n    \"retired\", \"retired\", \"retired\"\n]\ndf = pd.DataFrame(\n    {\n        \"Age_first\": [0, 3, 6, 11, 14, 19, 26, 36, 46, 56, 66, 76, 86],\n        \"Age_last\": [2, 5, 10, 13, 18, 25, 35, 45, 55, 65, 75, 85, 95],\n        \"Period_of_life\": _period_of_life_list,\n        \"Days\": [3, 5, 6, 6, 7, 7, 6, 5, 5, 5, 4, 3, 2]\n    }\n)\n# Adjustment by author\ndf[\"Types\"] = df[\"Period_of_life\"].replace(\n    {\n        \"nursery\": \"school\",\n        \"nursery school\": \"school\",\n        \"elementary school\": \"school\",\n        \"middle school\": \"school\",\n        \"high school\": \"school\",\n        \"university\/work\": \"school\/work\"\n    }\n)\ndf[\"School\"] = df[[\"Types\", \"Days\"]].apply(lambda x: x[1] if \"school\" in x[0] else 0, axis=1)\ndf[\"Office\"] = df[[\"Types\", \"Days\"]].apply(lambda x: x[1] if \"work\" in x[0] else 0, axis=1)\ndf[\"Others\"] = df[\"Days\"] - df[[\"School\", \"Office\"]].sum(axis=1)\ndf.loc[df[\"Others\"] < 0, \"Others\"] = 0\ndf.loc[df.index[1:5], \"School\"] -= 1\ndf.loc[df.index[1:5], \"Others\"] += 1\ndf.loc[df.index[5], [\"School\", \"Office\", \"Others\"]] = [3, 3, 1]\ndf[[\"School\", \"Office\", \"Others\"]] = df[[\"Days\", \"School\", \"Office\", \"Others\"]].apply(\n    lambda x: x[1:] \/ sum(x[1:]) * x[0], axis=1\n).astype(np.int64)\ndf.loc[df.index[6:10], \"Others\"] += 1\ndf = df.drop([\"Days\", \"Types\"], axis=1)\n# Show dataset\n_out_df = df.copy()\n_out_df","b3e46a2e":"df = pyramid_df.cumsum()\ncountries = df.columns[:]\ndf = pd.merge(_out_df, df, left_on=\"Age_last\", right_on=\"Age\", how=\"left\")\n_first = df.loc[df.index[0], countries]\ndf[countries] = df[countries].diff()\ndf.loc[df.index[0], countries] = _first\ndf[countries] = df[countries].apply(lambda x: x \/ x.sum(), axis=0)\nout_df = df.copy()\nout_df","6094f5e9":"def go_out(country, out_df=out_df):\n    \"\"\"\n    Return the estimated number of days people usually go out.\n    @country <str>: coutry name\n    @out_df <pd.DataFrame>: template dataframe\n    \"\"\"\n    df = out_df.copy()\n    try:\n        series = df[country]\n    except KeyError:\n        raise KeyError(f\"Population pyramid data of {country} is not defined!\")\n    df = df.iloc[:, :6]\n    df[\"Portion\"] = series\n    return df","354d1d8b":"go_out(\"Global\")","2847efdd":"jhu_data = JHUData(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\nraw = jhu_data.raw.copy()\nraw.tail()","3cc0e13f":"raw.info()","83abf381":"raw.describe()","74542104":"pd.DataFrame(raw.isnull().sum()).T","1145a192":"\", \".join(raw[\"Country\/Region\"].unique().tolist())","75eb63e0":"pprint(raw.loc[raw[\"Country\/Region\"] == \"Others\", \"Province\/State\"].unique().tolist(), compact=True)","c6531021":"data_cols = [\"Infected\", \"Fatal\", \"Recovered\"]\ndata_cols_all = [\"Confirmed\", \"Infected\", \"Fatal\", \"Recovered\"]\nrate_cols = [\"Fatal per Confirmed\", \"Recovered per Confirmed\", \"Fatal per (Fatal or Recovered)\"]\nvariable_dict = {\"Susceptible\": \"S\", \"Infected\": \"I\", \"Recovered\": \"R\", \"Fatal\": \"D\"}","c76b59b1":"ncov_df_ungrouped = jhu_data.cleaned()","06b201a1":"ncov_df_ungrouped.info()","5a9ee826":"ncov_df_ungrouped.describe(include=\"all\").fillna(\"-\")","8a77dec6":"pd.DataFrame(ncov_df_ungrouped.isnull().sum()).T","8eb03e5f":"\", \".join(ncov_df_ungrouped[\"Country\"].unique().tolist())","5074c7ce":"total_df = jhu_data.total()\ntotal_df.tail()","9d1d04c2":"f\"{(total_df.index.max() - total_df.index.min()).days} days have passed from the date of the first record.\"","6ee03dd2":"line_plot(total_df[data_cols], \"Total number of cases over time\")","91188926":"line_plot(total_df[rate_cols], \"Global rate over time\", ylabel=\"\", math_scale=False)","628f8aad":"total_df[rate_cols].plot.kde()\nplt.title(\"Kernel density estimation of the rates\")\nplt.show()","e83d9645":"total_df[rate_cols].describe().T","1bd4eeaa":"linelist_open_raw = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv\")\nlinelist_open_raw.info()","a6445b20":"df = linelist_open_raw.loc[:, ~linelist_open_raw.columns.str.startswith(\"Unnamed:\")]\ndf = df.dropna(axis=0, how=\"all\")\ndf = df.drop(\n    [\n        # Unnecessary in this notebook\n        \"ID\", \"wuhan(0)_not_wuhan(1)\", \"admin3\", \"admin2\", \"admin1\", \"country_new\", \"admin_id\",\n        \"data_moderator_initials\", \"source\", \"location\", \"lives_in_Wuhan\", \"notes_for_discussion\",\n        \"sequence_available\", \"reported_market_exposure\",\n        # Maybe useful, but un-used\n        \"city\", \"latitude\", \"longitude\", \"geo_resolution\", \"additional_information\",\n        \"travel_history_dates\", \"travel_history_location\", \n    ],\n    axis=1\n)\n# Personal\nage = linelist_open_raw[\"age\"].str.split(\"-\", expand=True)\nage[0] = pd.to_numeric(age[0], errors=\"coerce\")\nage[1] = pd.to_numeric(age[1], errors=\"coerce\")\ndf[\"Age\"] = age.mean(axis=1)\ndf[\"Age\"] = df[\"Age\"].fillna(df[\"Age\"].median()).astype(np.int64)\ndf[\"Sex\"] = df[\"sex\"].fillna(\"-\").str.replace(\"4000\", \"-\").str.capitalize()\n# Place\ndf[\"Country\"] = df[\"country\"].fillna(\"-\")\ndf[\"Province\"] = df[\"province\"].fillna(\"-\")\n# Onset Date\nseries = df[\"date_onset_symptoms\"].str.replace(\"end of December 2019\", \"31.12.2019\").replace(\"-25.02.2020\", \"25.02.2020\")\nseries = series.replace(\"20.02.220\", \"20.02.2020\").replace(\"none\", np.NaN).replace(\"10.01.2020 - 22.01.2020\", np.NaN)\ndf[\"Onset_date\"] = pd.to_datetime(series)\n# Hospitalized date\nseries = df[\"date_admission_hospital\"].replace(\"18.01.2020 - 23.01.2020\", np.NaN)\ndf[\"Hospitalized_date\"] = pd.to_datetime(series)\n# Confirmed date\nseries = df[\"date_confirmation\"].replace(\"25.02.2020-26.02.2020\", np.NaN)\ndf[\"Confirmed_date\"] = pd.to_datetime(series)\n# Symptoms\/events\ndf[\"Symptoms\"] = df[\"symptoms\"].fillna(\"-\").str.lower()\n# Underlying disease\ndf[\"Underlying_disease\"] = df[[\"chronic_disease_binary\", \"chronic_disease\"]].apply(\n    lambda x: \"No\" if x[0] == 0 else x[1] if x[1] is not np.NaN else \"-\",\n    axis=1\n).str.strip(\";\").str.replace(\"; \", \",\").str.replace(\", \", \",\")\n# Outcome\ndf[\"Outcome\"] = df[\"outcome\"].replace(\n    {\n        \"discharge\": \"discharged\", \"Discharged\": \"discharged\", \"death\": \"died\",\n        \"critical condition, intubated as of 14.02.2020\": \"severe\",\n        \"treated in an intensive care unit (14.02.2020)\": \"severe\", \"05.02.2020\": \"-\",\n        \"Symptoms only improved with cough. Currently hospitalized for follow-up.\": \"stable\"\n    }\n).fillna(\"-\")\nseries = df[\"date_death_or_discharge\"].replace(\"discharge\", np.NaN)\ndf[\"Closed_date\"] = pd.to_datetime(series)\n# Show\nuse_cols = [\n    \"Age\", \"Sex\", \"Country\", \"Province\", \"Onset_date\", \"Hospitalized_date\", \"Confirmed_date\", \n    \"Symptoms\", \"Underlying_disease\", \"Outcome\", \"Closed_date\"\n]\nopen_linelist_df = df.loc[:, use_cols]\nopen_linelist_df.head()","e8cb1816":"linelist_raw = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv\")\nlinelist_raw.info()","4c38c32b":"linelist_raw.head()","75148101":"df = linelist_raw.loc[:, ~linelist_raw.columns.str.startswith(\"Unnamed:\")]\ndf = df.drop([\"id\", \"case_in_country\", \"summary\", \"source\", \"link\"], axis=1)\n# Date\ncase_date_dict = {\n    \"reporting date\": \"Confirmed_date\",\n    \"exposure_start\": \"Exposed_date\",\n    \"exposure_end\": \"Quarantined_date\",\n    \"hosp_visit_date\": \"Hospitalized_date\",\n    \"symptom_onset\": \"Onset_date\",\n    \"death\": \"Deaths_date\",\n    \"recovered\": \"Recovered_date\"    \n}\ndf[\"death\"] = df[\"death\"].replace({\"0\": \"\", \"1\": \"\"})\ndf[\"recovered\"] = df[\"recovered\"].replace({\"0\": \"\", \"1\": \"\", \"12\/30\/1899\": \"12\/30\/2019\"})\nfor (col, _) in case_date_dict.items():\n    df[col] = pd.to_datetime(df[col])\ndf = df.rename(case_date_dict, axis=1)\n# Location\ndf[\"Country\"] = df[\"country\"].fillna(\"-\")\ndf[\"Province\"] = df[\"location\"].fillna(\"-\")\ndf[\"Province\"] = df[[\"Country\", \"Province\"]].apply(lambda x: \"-\" if x[0] == x[1] else x[1], axis=1)\n# Personal\ndf[\"Gender\"] = df[\"gender\"].fillna(\"-\").str.capitalize()\ndf[\"Age\"] = df[\"age\"].fillna(df[\"age\"].median()).astype(np.int64) ## Fill in NA with median\ndf[\"From_Wuhan\"] = df[\"from Wuhan\"]\ndf[\"To_Wuhan\"] = df[\"visiting Wuhan\"]\n# Medical\ndf[\"Events\"] = df[\"symptom\"].fillna(\"-\")\n# Order of columns\nlinelist_df = df.loc[\n    :,\n    [\n        \"Country\", \"Province\",\n        \"Exposed_date\", \"Onset_date\", \"Hospitalized_date\", \"Confirmed_date\", \"Quarantined_date\", \"Deaths_date\", \"Recovered_date\",\n        \"Events\",\n        \"Gender\", \"Age\", \"From_Wuhan\", \"To_Wuhan\"\n    ]\n]\nlinelist_df.tail()","dd8148f7":"linelist_df.info()","2196fb70":"linelist_df.describe(include=\"all\").fillna(\"-\")","9ab73248":"period_df = select_area(linelist_df, group=None)\nperiod_df = period_df.loc[:, [\"Exposed_date\", \"Onset_date\", \"Confirmed_date\"]]\nperiod_df[\"Latent [min]\"] = (period_df[\"Onset_date\"] - period_df[\"Exposed_date\"]).dt.total_seconds() \/ 60\nperiod_df[\"Waiting [min]\"] = (period_df[\"Confirmed_date\"] - period_df[\"Onset_date\"]).dt.total_seconds() \/ 60\nperiod_df[\"Latent [day]\"] = period_df[\"Latent [min]\"] \/ 60 \/ 24\nperiod_df[\"Waiting [day]\"] = period_df[\"Waiting [min]\"] \/ 60 \/ 24\nperiod_df[\"Latent + Waiting [day]\"] = period_df[\"Latent [day]\"] + period_df[\"Waiting [day]\"]\nperiod_df.dropna(axis=0).tail()","08ee222a":"cols = [\"Latent [day]\", \"Waiting [day]\", \"Latent + Waiting [day]\"]\nperiod_df[cols].plot.kde()\nplt.title(\"Kernel density estimation of latent period and waiting time for confirmation [day]\")\nplt.show()\nperiod_df[cols].describe().T","ef5811a8":"action_raw = dd.read_csv(\n    \"\/kaggle\/input\/covid19-containment-and-mitigation-measures\/COVID 19 Containment measures data.csv\"\n).compute()\naction_raw.head()","e848f4b6":"df  = action_raw.copy()\ndf = df.rename(\n    {\n        \"Description of measure implemented\": \"Details\",\n        \"Implementing State\/Province\": \"Province\",\n    },\n    axis=1\n)\n# Country\/Province\ndf[\"Country\"] = df[\"Country\"].replace({\"United Kingdom\": \"UK\"})\ndf[\"Country\"] = df[\"Country\"].str.replace(\"US: \", \"US\/\").str.replace(\"US:\", \"US\/\")\ndf = df.loc[~df[\"Country\"].isnull(), :]\ndf[\"Province\"] = df[\"Province\"].fillna(\"-\")\ndf[[\"Country\", \"Province\", \"-\"]] = (df[\"Country\"] + \"\/\" + df[\"Province\"]).str.split(\"\/\", expand=True)\n# Date\ndf[\"Start_date\"] = pd.to_datetime(df[\"Date Start\"])\ndf[\"End_date\"] = pd.to_datetime(df[\"Date end intended\"])\ndf = df.loc[~df[\"Start_date\"].isnull(), :]\n# Detail\ndf = df.loc[~df[\"Details\"].isnull(), :]\ndf[\"Keywords\"] = df[\"Keywords\"].fillna(\"-\")\ndf[\"Exceptions\"] = df[\"Exceptions\"].fillna(\"-\")\n# _df = df[\"Keywords\"].str.split(\", \", expand=True)\n# df = pd.concat([df, _df], axis=1)\n# Save\ndf = df.loc[:, [\"Country\", \"Province\", \"Start_date\", \"End_date\", \"Keywords\", \"Details\", \"Exceptions\"]]\ndf = df.sort_values([\"Start_date\", \"End_date\", \"Country\", \"Province\"])\naction_df = df.copy()\naction_df.head()","74f53917":"words = pd.Series(\", \".join(action_df[\"Keywords\"].tolist()).split(\", \")).unique().tolist()\nwords","c95b5879":"vectorizer = TfidfVectorizer(use_idf=True)\nvecs = vectorizer.fit_transform(words)\nclusters = KMeans(n_clusters=20, random_state=0).fit_predict(vecs)\ndf = pd.DataFrame(\n    {\n        \"Group\": clusters,\n        \"Word\": words\n    }\n)\ndf = df.sort_values(\"Group\")\ndf = pd.DataFrame(df.groupby(\"Group\")[\"Word\"].apply(lambda x: \", \".join(x)))\ndf","f2fd1deb":"ita_action_raw = pd.read_excel(\n    \"\/kaggle\/input\/covid19-prevention-in-italy\/Dataset_Italy_COVID_19.xlsx\",\n    sheet_name=\"Foglio1\"\n)\nita_action_raw.head()","f0776840":"df = ita_action_raw.copy()\ndf = df.drop([\"Country\", \"Village\", \"link\"], axis=1)\ndf.columns = [col.capitalize().replace(\" \", \"_\") for col in df.columns]\ndf[\"Start_date\"] = pd.to_datetime(df[\"Start_date\"])\ndf[\"End_date\"] = pd.to_datetime(df[\"End_date\"])\ndf[\"Region\"] = df[\"Region\"].fillna(\"-\")\ndf[\"Number_of_people\"] = df[\"Number_of_people\"].fillna(-1)\nita_action_df = df.copy()\nita_action_df.tail()","8addf72d":"df = ncov_df_ungrouped.pivot_table(\n    index=\"Date\", columns=\"Country\", values=\"Confirmed\", aggfunc=\"sum\"\n).fillna(method=\"ffill\").fillna(0)\n# Growth factor: (delta Number_n) \/ (delta Number_n)\ndf = df.diff() \/ df.diff().shift(freq=\"D\")\ndf = df.replace(np.inf, np.nan).fillna(1.0)\n# Rolling mean (window: 7 days)\ndf = df.rolling(7).mean().dropna().loc[:ncov_df_ungrouped[\"Date\"].max(), :]\n# round: 0.01\ngrowth_value_df = df.round(2)\ngrowth_value_df.tail()","d9952601":"df = growth_value_df.copy()\ndf = df.iloc[-7:, :].T\nday_cols = df.columns.strftime(\"%d%b%Y\")\ndf.columns = day_cols\nlast_date = day_cols[-1]\n# Grouping\nmore_col, less_col = \"GF > 1 [straight days]\", \"GF < 1 [straight days]\"\ndf[more_col] = (growth_value_df > 1).iloc[::-1].cumprod().sum(axis=0)\ndf[less_col] = (growth_value_df < 1).iloc[::-1].cumprod().sum(axis=0)\ndf[\"Group\"] = df[[more_col, less_col]].apply(\n    lambda x: \"Outbreaking\" if x[0] >= 7 else \"Stopping\" if x[1] >= 7 else \"Crossroad\",\n    axis=1\n)\n# Sorting\ndf = df.loc[:, [\"Group\", more_col, less_col, *day_cols]]\ndf = df.sort_values([\"Group\", more_col, less_col], ascending=False)\ngrowth_df = df.copy()\ngrowth_df.head()","cb2921bf":"df = pd.merge(ncov_df_ungrouped, growth_df[\"Group\"].reset_index(), on=\"Country\")\nncov_df = df.loc[:, [\"Date\", \"Group\", *ncov_df_ungrouped.columns[1:]]]\nncov_df.tail()","5e8a4bb2":"df = growth_df.loc[growth_df[\"Group\"] == \"Outbreaking\", :]\n\", \".join(df.index.tolist()) + \".\"","aed94c41":"growth_df.loc[growth_df[\"Group\"] == \"Outbreaking\", :].head()","a3ccdc91":"df = ncov_df.loc[ncov_df[\"Group\"] == \"Outbreaking\", [\"Date\", *data_cols]].groupby(\"Date\").sum()\nline_plot(df, \"Group 1 (Outbreaking): Cases over time\", y_integer=True)\ndf.tail()","039fc9de":"df = growth_df.loc[growth_df[\"Group\"] == \"Stopping\", :]\n\", \".join(df.index.tolist()) + \".\"","c2f28011":"growth_df.loc[growth_df[\"Group\"] == \"Stopping\", :].head()","6a29e4d5":"df = ncov_df.loc[ncov_df[\"Group\"] == \"Stopping\", [\"Date\", *data_cols]].groupby(\"Date\").sum()\nline_plot(df, \"Group 2 (Stopping): Cases over time\", y_integer=True)\ndf.tail()","edd03b0b":"df = growth_df.loc[growth_df[\"Group\"] == \"Crossroad\", :]\n\", \".join(df.index.tolist()) + \".\"","c56a86ad":"growth_df.loc[growth_df[\"Group\"] == \"Crossroad\", :].head()","bb02343f":"df = ncov_df.loc[ncov_df[\"Group\"] == \"Crossroad\", [\"Date\", *data_cols]].groupby(\"Date\").sum()\nline_plot(df, \"Group 3 (At a crossroad): Cases over time\", y_integer=True)\ndf.tail()","aaa3f866":"eg_r0, eg_rho = (2.5, 0.2)\neg_sigma = eg_rho \/ eg_r0\neg_initials = (0.999, 0.001, 0)\ndisplay(Markdown(rf\"$\\rho = {eg_rho},\\ \\sigma = {eg_sigma}$.\"))","994e36e7":"%%time\neg_df = simulation(SIR, eg_initials, step_n=180, rho=eg_rho, sigma=eg_sigma)\neg_df.tail()","8e51fcff":"line_plot(\n    eg_df.set_index(\"t\"),\n    title=r\"SIR: $R_0={0}\\ (\\rho={1}, \\sigma={2})$\".format(eg_r0, eg_rho, eg_sigma),\n    ylabel=\"\",\n    h=1\n)","ac2fff4d":"x_max = eg_df.loc[eg_df[\"y\"].idxmax(), \"x\"]\n(x_max, 1\/eg_r0)","367c3788":"eg_tau = 1440\neg_start_date = ncov_df[\"Date\"].min()\neg_total_population = 1_000_000\nprint(f\"The start date is {eg_start_date.strftime('%d%b%Y')}.\")","658389c8":"eg_ori_df = pd.DataFrame(\n    {\n        \"Date\": (eg_df[\"t\"] * eg_tau).apply(lambda x: timedelta(minutes=x)) + eg_start_date,\n        \"Group\": \"Stopping\",\n        \"Country\": \"Example\",\n        \"Province\": \"-\",\n        \"Susceptible\": 0,\n        \"Confirmed\": 0,\n        \"Infected\": (eg_df[\"y\"] * eg_total_population).astype(np.int64)\n    }\n)\neg_ori_df[\"Recovered + Deaths\"] = (eg_df[\"z\"] * eg_total_population).astype(np.int64)\neg_ori_df [\"Confirmed\"] = eg_ori_df[[\"Infected\", \"Recovered + Deaths\"]].sum(axis=1)\neg_ori_df[\"Susceptible\"] = eg_total_population - eg_ori_df[\"Confirmed\"]\neg_ori_df.tail()","a59d4e5d":"line_plot(\n    eg_ori_df.set_index(\"Date\")[[\"Susceptible\", \"Infected\", \"Recovered + Deaths\"]],\n    \"Example data of SIR model\",\n    h=eg_total_population,\n    y_integer=True\n)","e7e6dde4":"eg_r0, eg_kappa, eg_rho = (2.5, 0.005, 0.2)\neg_sigma = eg_rho \/ eg_r0 - eg_kappa\neg_initials = (0.999, 0.001, 0, 0)\ndisplay(Markdown(rf\"$\\kappa = {eg_kappa},\\ \\rho = {eg_rho},\\ \\sigma = {eg_sigma}$.\"))","0e8a2616":"%%time\neg_df = simulation(SIRD, eg_initials, step_n=180, kappa=eg_kappa, rho=eg_rho, sigma=eg_sigma)\neg_df.tail()","0dd037c6":"line_plot(\n    eg_df.set_index(\"t\"),\n    title=r\"SIR-D: $R_0={0}\\ (\\kappa={1}, \\rho={2}, \\sigma={3})$\".format(eg_r0, eg_kappa, eg_rho, eg_sigma),\n    ylabel=\"\",\n    h=1\n)","bcca83d0":"x_max = eg_df.loc[eg_df[\"y\"].idxmax(), \"x\"]\n(x_max, 1\/eg_r0)","b6b1a493":"eg_tau = 1440\neg_start_date = ncov_df[\"Date\"].min()\neg_total_population = 1_000_000\nprint(f\"The start date is {eg_start_date.strftime('%d%b%Y')}.\")","4159281f":"eg_ori_df = pd.DataFrame(\n    {\n        \"Date\": (eg_df[\"t\"] * eg_tau).apply(lambda x: timedelta(minutes=x)) + eg_start_date,\n        \"Group\": \"Stopping\",\n        \"Country\": \"Example\",\n        \"Province\": \"-\",\n        \"Susceptible\": 0,\n        \"Confirmed\": 0,\n        \"Infected\": (eg_df[\"y\"] * eg_total_population).astype(np.int64)\n    }\n)\neg_ori_df[\"Recovered\"] = (eg_df[\"z\"] * eg_total_population).astype(np.int64)\neg_ori_df[\"Deaths\"] = (eg_df[\"w\"] * eg_total_population).astype(np.int64)\neg_ori_df[\"Confirmed\"] = eg_ori_df[[\"Infected\", \"Recovered\", \"Deaths\"]].sum(axis=1)\neg_ori_df[\"Susceptible\"] = eg_total_population - eg_ori_df[\"Confirmed\"]\neg_ori_df.tail()","048840f9":"line_plot(\n    eg_ori_df.set_index(\"Date\")[[\"Susceptible\", \"Infected\", \"Recovered\", \"Deaths\"]],\n    \"Example data of SIR-D model\",\n    h=eg_total_population,\n    y_integer=True\n)","55cd38ea":"eg_r0, eg_theta, eg_kappa, eg_rho = (2.5, 0.002, 0.005, 0.2)\neg_sigma = eg_rho \/ eg_r0 - eg_kappa\neg_initials = (0.999, 0.001, 0, 0)\ndisplay(Markdown(rf\"$\\theta = {eg_theta},\\ \\kappa = {eg_kappa},\\ \\rho = {eg_rho},\\ \\sigma = {eg_sigma}$.\"))","844a6333":"%%time\neg_df = simulation(SIRF, eg_initials, step_n=180, theta=eg_theta, kappa=eg_kappa, rho=eg_rho, sigma=eg_sigma)\neg_df.tail()","30b3cdc3":"line_plot(\n    eg_df.set_index(\"t\"),\n    title=r\"SIR-F: $R_0={0}\\ (\\theta={1}, \\kappa={2}, \\rho={3}, \\sigma={4})$\".format(\n        eg_r0, eg_theta, eg_kappa, eg_rho, eg_sigma\n    ),\n    ylabel=\"\",\n    h=1\n)","1354ee9a":"x_max = eg_df.loc[eg_df[\"y\"].idxmax(), \"x\"]\n(x_max, 1\/eg_r0)","6aa23c43":"eg_tau = 1440\neg_start_date = ncov_df[\"Date\"].min()\neg_total_population = 1_000_000\nprint(f\"The start date is {eg_start_date.strftime('%d%b%Y')}.\")","8c38aaae":"eg_ori_df = pd.DataFrame(\n    {\n        \"Date\": (eg_df[\"t\"] * eg_tau).apply(lambda x: timedelta(minutes=x)) + eg_start_date,\n        \"Group\": \"Stopping\",\n        \"Country\": \"Example\",\n        \"Province\": \"-\",\n        \"Susceptible\": 0,\n        \"Confirmed\": 0,\n        \"Infected\": (eg_df[\"y\"] * eg_total_population).astype(np.int64)\n    }\n)\neg_ori_df[\"Recovered\"] = (eg_df[\"z\"] * eg_total_population).astype(np.int64)\neg_ori_df[\"Fatal\"] = (eg_df[\"w\"] * eg_total_population).astype(np.int64)\neg_ori_df[\"Confirmed\"] = eg_ori_df[[\"Infected\", \"Recovered\", \"Fatal\"]].sum(axis=1)\neg_ori_df[\"Susceptible\"] = eg_total_population - eg_ori_df[\"Confirmed\"]\neg_ori_df.tail()","22336d95":"line_plot(\n    eg_ori_df.set_index(\"Date\")[[\"Susceptible\", \"Infected\", \"Recovered\", \"Fatal\"]],\n    \"Example data of SIR-F model\",\n    h=eg_total_population,\n    y_integer=True\n)","3952b9ca":"%%time\nsirf_estimator = Estimator(\n    # We can replace SIRF with SIR or SIRD\n    SIRF, eg_ori_df, eg_total_population,\n    name=\"Example\", places=[(\"Example\", None)],\n    tau=eg_tau\n)\nsirf_dict = sirf_estimator.run(500)","8f2eea80":"sirf_estimator.history_df().head()","497358ad":"sirf_estimator.history_graph()","3420462f":"_model = SIRF(theta=eg_theta, kappa=eg_kappa, rho=eg_rho, sigma=eg_sigma)\npd.DataFrame.from_dict(\n    {\n        \"Setting\": {\n            \"theta\": eg_theta,\n            \"kappa\": eg_kappa,\n            \"rho\": eg_rho,\n            \"sigma\": eg_sigma,\n            \"tau\": eg_tau,\n            \"R0\": eg_r0,\n            \"score\": np.nan,\n            **_model.calc_days_dict(tau=eg_tau)\n        },\n        \"Estimated\": sirf_dict\n    },\n    orient=\"index\"\n).fillna(\"-\")","90fac1d5":"sirf_estimator.compare_graph()","3170f85a":"sirf_estimator.predict_graph(step_n=180)","859720a3":"period_df = select_area(linelist_df, group=None)\nperiod_df = period_df.loc[:, [\"Exposed_date\", \"Onset_date\", \"Confirmed_date\"]]\nperiod_df[\"Latent [min]\"] = (period_df[\"Onset_date\"] - period_df[\"Exposed_date\"]).dt.total_seconds() \/ 60\nperiod_df[\"Waiting [min]\"] = (period_df[\"Confirmed_date\"] - period_df[\"Onset_date\"]).dt.total_seconds() \/ 60\nperiod_df[\"Latent [day]\"] = period_df[\"Latent [min]\"] \/ 60 \/ 24\nperiod_df[\"Waiting [day]\"] = period_df[\"Waiting [min]\"] \/ 60 \/ 24\nperiod_df[\"Latent + Waiting [day]\"] = period_df[\"Latent [day]\"] + period_df[\"Waiting [day]\"]\nperiod_df.dropna(axis=0).tail()","1ee27eda":"cols = [\"Latent [day]\", \"Waiting [day]\", \"Latent + Waiting [day]\"]\nperiod_df[cols].plot.kde()\nplt.title(\"Kernel density estimation of latent period and waiting time for confirmation [day]\")\nplt.show()\nperiod_df[cols].describe().T","ed51c639":"latent_period = period_df[\"Latent [min]\"].median()\nwaiting_time = period_df[\"Waiting [min]\"].median()\nlatent_waiting_day = period_df[\"Latent + Waiting [day]\"].median()","b78047a5":"tau = sirf_estimator.info()[1][\"tau\"]\neg_rho2, eg_rho3 = tau \/ latent_period, tau \/ waiting_time\n(eg_rho2, eg_rho3)","3013eac0":"eg_theta, eg_kappa, eg_rho1, eg_sigma = (0.002, 0.005, 0.2, 0.08)\neg_initials = (0.994, 0.003, 0.002, 0.001, 0, 0)","f3537ae2":"%%time\neg_df = simulation(\n    SEWIRF, eg_initials, step_n=180,\n    theta=eg_theta, kappa=eg_kappa, rho1=eg_rho1, rho2=eg_rho2, rho3=eg_rho3, sigma=eg_sigma)\neg_df.tail()","8d673fe9":"line_plot(\n    eg_df.set_index(\"t\"),\n    title=r\"SEWIR-F: $\\theta={0}, \\kappa={1}, \\rho_1={2}, \\rho_2={3}, \\rho_3={4}, \\sigma={5}$\".format(\n        eg_theta, eg_kappa, eg_rho1, round(eg_rho2, 2), round(eg_rho3, 2), eg_sigma\n    ),\n    ylabel=\"\",\n    h=1\n)","1b064271":"eg_tau = 1440\neg_start_date = ncov_df[\"Date\"].min()\neg_total_population = 1_000_000\nprint(f\"The start date is {eg_start_date.strftime('%d%b%Y')}.\")","f7602367":"eg_ori_df = pd.DataFrame(\n    {\n        \"Date\": (eg_df[\"t\"] * eg_tau).apply(lambda x: timedelta(minutes=x)) + eg_start_date,\n        \"Group\": \"Stopping\",\n        \"Country\": \"Example\",\n        \"Province\": \"-\",\n        \"Susceptible\": (eg_df[\"x1\"] * eg_total_population).astype(np.int64),\n        \"Exposed\": (eg_df[\"x2\"] * eg_total_population).astype(np.int64),\n        \"Waiting\": (eg_df[\"x3\"] * eg_total_population).astype(np.int64),\n        \"Confirmed\": 0,\n        \"Infected\": (eg_df[\"y\"] * eg_total_population).astype(np.int64)\n    }\n)\neg_ori_df[\"Recovered\"] = (eg_df[\"z\"] * eg_total_population).astype(np.int64)\neg_ori_df[\"Fatal\"] = (eg_df[\"w\"] * eg_total_population).astype(np.int64)\neg_ori_df[\"Confirmed\"] = eg_ori_df[[\"Infected\", \"Recovered\", \"Fatal\"]].sum(axis=1)\neg_ori_df.tail()","3075851b":"cols = [\"Susceptible\", \"Exposed\", \"Waiting\", \"Infected\", \"Recovered\", \"Fatal\"]\nline_plot(\n    eg_ori_df.set_index(\"Date\")[cols],\n    \"Example data of SIR-F model\",\n    h=eg_total_population,\n    y_integer=True\n)","e0e43380":"# Value of beta before actions are taken\n_, info_dict, param_dict = sirf_estimator.info()\nbeta_before = param_dict[\"rho\"] \/ info_dict[\"tau\"]\nbeta_before","efcd4cf5":"eg_out_df = go_out(\"Global\")\neg_out_df","ffc4a858":"gs_before = (eg_out_df[[\"School\", \"Office\", \"Others\"]].sum(axis=1) * eg_out_df[\"Portion\"]).sum()\ngs_before","867f7a24":"df = eg_out_df.copy()\ndf.loc[df[\"School\"] + df[\"Office\"] > 0, \"Others\"] += 1\ndf[\"School\"] = 0\ndf[\"Office\"] *= 0.5\neg_out_df_after = df.copy()\neg_out_df_after","9cfb1907":"df = eg_out_df_after.copy()\ngs_after = (df[[\"School\", \"Office\", \"Others\"]].sum(axis=1) * df[\"Portion\"]).sum()\ngs_after","bbafa77d":"beta_after = beta_before * (gs_after \/ gs_before)\nbeta_after \/ beta_before","e373fb33":"latent_waiting_day","b2250b3e":"first_model, info_dict, param_dict = sirf_estimator.info()\ninfo_dict[\"name\"] = \"Example\"\nlock_param_dict = param_dict.copy()\nlock_param_dict[\"rho\"] = param_dict[\"rho\"] * beta_after \/ beta_before\ndf = pd.DataFrame.from_dict(\n    {\"No actions\": param_dict, \"Lockdown\": lock_param_dict},\n    orient=\"index\"\n)\ndf = df.loc[:, [\"theta\", \"kappa\", \"rho\", \"sigma\"]]\ndf[\"R0\"] = df.apply(lambda x: first_model(**x.to_dict()).calc_r0(), axis=1)\ndf[\"tau\"] = info_dict[\"tau\"]\ndf","0c69725f":"predicter = Predicter(**info_dict)\npredicter.add(SIRF, end_day_n=15, count_from_last=False, vline=False, **param_dict)\npredicter.add(SIRF, end_day_n=latent_waiting_day, count_from_last=True, **param_dict)\npredicter.add(SIRF, end_day_n=180, count_from_last=False, **param_dict)\npredicter.restore_graph(drop_cols=None, y_integer=True)\npred_df_no = predicter.restore_df()","997e24ee":"predicter = Predicter(**info_dict)\npredicter.add(SIRF, end_day_n=15, count_from_last=False, vline=False, **param_dict)\npredicter.add(SIRF, end_day_n=latent_waiting_day, count_from_last=True, **param_dict)\npredicter.add(SIRF, end_day_n=180, count_from_last=False, **lock_param_dict)\npredicter.restore_graph(drop_cols=None, y_integer=True)\npred_df_lock = predicter.restore_df()","78b643f4":"pred_df_no.head()","21d36ecd":"_last_date = pred_df_no.index[-1].strftime(\"%d%b%Y\")\n_dict = {\n    \"No actions\": {\n        \"max(Infected)\": pred_df_no[\"Infected\"].max(),\n        \"argmax(Infected)\": pred_df_no[\"Infected\"].idxmax(),\n        f\"Infected at {_last_date}\": pred_df_no[\"Infected\"][-1],\n    },\n    \"With lockdown\": {\n        \"max(Infected)\": pred_df_lock[\"Infected\"].max(),\n        \"argmax(Infected)\": pred_df_lock[\"Infected\"].idxmax(),\n        f\"Infected at {_last_date}\": pred_df_lock[\"Infected\"][-1],\n    }   \n}\npd.DataFrame.from_dict(_dict, orient=\"index\")","1336f502":"gamma_before = param_dict[\"sigma\"] \/ info_dict[\"tau\"]\nalpha2_before = param_dict[\"kappa\"] \/ info_dict[\"tau\"]\n(gamma_before, alpha2_before)","4566d354":"h_bar_before, s_bar_before = 0.5, 0.5","4cf75bab":"h_bar_after = h_bar_before * 0.1\ns_bar_after = s_bar_before\n(h_bar_after, s_bar_after)","10fe0302":"gamma_after = gamma_before * (1 - h_bar_after * s_bar_after) \/ (1 - h_bar_before * s_bar_before)\ngamma_after","b2e2239e":"alpha2_after = alpha2_before * (h_bar_after * s_bar_after) \/ (h_bar_before * s_bar_before)\nalpha2_after","c596a521":"first_model, info_dict, param_dict = sirf_estimator.info()\ninfo_dict[\"name\"] = \"Example\"\nmed_param_dict = param_dict.copy()\nmed_param_dict[\"sigma\"] = param_dict[\"sigma\"] * gamma_after \/ gamma_before\nmed_param_dict[\"kappa\"] = param_dict[\"kappa\"] * alpha2_after \/ alpha2_before\ndf = pd.DataFrame.from_dict(\n    {\"No actions\": param_dict, \"Medicines\": med_param_dict},\n    orient=\"index\"\n)\ndf = df.loc[:, [\"theta\", \"kappa\", \"rho\", \"sigma\"]]\ndf[\"R0\"] = df.apply(lambda x: first_model(**x.to_dict()).calc_r0(), axis=1)\ndf[\"tau\"] = info_dict[\"tau\"]\ndf","1380545a":"predicter = Predicter(**info_dict)\npredicter.add(SIRF, end_day_n=30, count_from_last=False, vline=True, **param_dict)\npredicter.add(SIRF, end_day_n=180, count_from_last=False, **param_dict)\npredicter.restore_graph(drop_cols=None)\npred_df_no = predicter.restore_df()","3b15ce46":"predicter = Predicter(**info_dict)\npredicter.add(SIRF, end_day_n=30, count_from_last=False, vline=True, **param_dict)\npredicter.add(SIRF, end_day_n=180, count_from_last=False, **med_param_dict)\npredicter.restore_graph(drop_cols=None)\npred_df_med = predicter.restore_df()","89b688f4":"_last_date = pred_df_no.index[-1].strftime(\"%d%b%Y\")\n_dict = {\n    \"No actions\": {\n        \"max(Infected)\": pred_df_no[\"Infected\"].max(),\n        \"argmax(Infected)\": pred_df_no[\"Infected\"].idxmax(),\n        f\"Infected at {_last_date}\": pred_df_no[\"Infected\"][-1],\n        f\"Fatal at {_last_date}\": pred_df_no[\"Fatal\"][-1],\n    },\n    \"Lockdown\": {\n        \"max(Infected)\": pred_df_lock[\"Infected\"].max(),\n        \"argmax(Infected)\": pred_df_lock[\"Infected\"].idxmax(),\n        f\"Infected at {_last_date}\": pred_df_lock[\"Infected\"][-1],\n        f\"Fatal at {_last_date}\": pred_df_lock[\"Fatal\"][-1],\n    },\n    \"Medicine\": {\n        \"max(Infected)\": pred_df_med[\"Infected\"].max(),\n        \"argmax(Infected)\": pred_df_med[\"Infected\"].idxmax(),\n        f\"Infected at {_last_date}\": pred_df_med[\"Infected\"][-1],\n        f\"Fatal at {_last_date}\": pred_df_med[\"Fatal\"][-1],\n    }\n}\npd.DataFrame.from_dict(_dict, orient=\"index\")","1f6ec1cf":"print(f\"Total population is {eg_total_population:,}.\")","9ecdad6e":"first_model, info_dict, param_dict = sirf_estimator.info()\nvac_param_dict = param_dict.copy()\nvac_param_dict[\"n\"] = eg_total_population\nvac_param_dict[\"v_per_day\"] = 1_000\npredicter = Predicter(**info_dict)\npredicter.add(SIRF, end_day_n=15, count_from_last=False, **param_dict)\npredicter.add(SIRFV, end_day_n=300, count_from_last=False, **vac_param_dict)\npredicter.restore_graph(drop_cols=None)\npred_df_vac = predicter.restore_df()","f5798d6a":"_last_date = pred_df_no.index[-1].strftime(\"%d%b%Y\")\n_dict = {\n    \"No actions\": {\n        \"max(Infected)\": pred_df_no[\"Infected\"].max(),\n        \"argmax(Infected)\": pred_df_no[\"Infected\"].idxmax(),\n        f\"Infected at {_last_date}\": pred_df_no[\"Infected\"][-1],\n        f\"Fatal at {_last_date}\": pred_df_no[\"Fatal\"][-1],\n    },\n    \"Lockdown\": {\n        \"max(Infected)\": pred_df_lock[\"Infected\"].max(),\n        \"argmax(Infected)\": pred_df_lock[\"Infected\"].idxmax(),\n        f\"Infected at {_last_date}\": pred_df_lock[\"Infected\"][-1],\n        f\"Fatal at {_last_date}\": pred_df_lock[\"Fatal\"][-1],\n    },\n    \"Medicine\": {\n        \"max(Infected)\": pred_df_med[\"Infected\"].max(),\n        \"argmax(Infected)\": pred_df_med[\"Infected\"].idxmax(),\n        f\"Infected at {_last_date}\": pred_df_med[\"Infected\"][-1],\n        f\"Fatal at {_last_date}\": pred_df_med[\"Fatal\"][-1],\n    },\n    \"Vacctine\": {\n        \"max(Infected)\": pred_df_vac[\"Infected\"].max(),\n        \"argmax(Infected)\": pred_df_vac[\"Infected\"].idxmax(),\n        f\"Infected at {_last_date}\": pred_df_vac[\"Infected\"][-1],\n        f\"Fatal at {_last_date}\": pred_df_vac[\"Fatal\"][-1],\n    }\n}\npd.DataFrame.from_dict(_dict, orient=\"index\")","a984ec4a":"df = pd.DataFrame()\neg_initials = (0.999, 0.001, 0, 0)\neg_total_population = 1_000_000\neg_step_n = 200\neg_param_dict = {\n    \"1\": {\"theta\": 0.0002, \"kappa\": 0.005, \"rho\": 0.20, \"sigma\": 0.075},\n    \"2\": {\"theta\": 0.0002, \"kappa\": 0.005, \"rho\": 0.40, \"sigma\": 0.075},\n    \"3\": {\"theta\": 0.0002, \"kappa\": 0.005, \"rho\": 0.15, \"sigma\": 0.075},\n    \"4\": {\"theta\": 0.0002, \"kappa\": 0.003, \"rho\": 0.20, \"sigma\": 0.150},\n    \"5\": {\"theta\": 0.0000, \"kappa\": 0.005, \"rho\": 0.20, \"sigma\": 0.075},\n}\n\nfor (num, _dict) in eg_param_dict.items():\n    _df = simulation(SIRF, eg_initials, step_n=eg_step_n, **_dict)\n    _df = (_df.set_index(\"t\") * eg_total_population).astype(np.int64)\n    _df = _df.reset_index()\n    _df[\"Country\"] = f\"Example {num}\"\n    df = pd.concat([df, _df], axis=0, ignore_index=True)\n\ndf[\"Date\"] = ncov_df[\"Date\"].min() + pd.Series(df[\"t\"]).apply(lambda x: timedelta(days=x))\ndf[\"Group\"] = \"Stopping\"\ndf[\"Province\"] = \"-\"\ndf = df.rename({\"y\": \"Infected\", \"z\": \"Recovered\", \"w\": \"Deaths\"}, axis=1)\ndf[\"Confirmed\"] = df[[\"Infected\", \"Recovered\", \"Deaths\"]].sum(axis=1)\ndf = df.loc[:, ncov_df.columns]\neg_ncov_df = df.copy()\neg_ncov_df.tail()","0879cc8c":"line_plot(\n    eg_ncov_df.pivot_table(index=\"Date\", columns=\"Country\", values=\"Confirmed\"),\n    \"Example dataset: Confirmed cases over time\"\n)","207f1d6e":"df = eg_ncov_df.pivot_table(index=\"Date\", columns=\"Country\", values=\"Confirmed\")\ndf.plot.scatter(x=\"Example 1\", y=\"Example 5\")\nplt.plot(df[\"Example 1\"], df[\"Example 1\"], color=\"black\", linewidth=0.5)\nplt.xlim(0, None)\nplt.ylim(0, None)\nplt.title(\"Scatter plot of confirmed cases with y=x line\")\nplt.show()","04153ea4":"line_plot(\n    eg_ncov_df.pivot_table(index=\"Date\", columns=\"Country\", values=\"Infected\"),\n    \"Example dataset: Infected cases over time\"\n)","9cbd89b7":"for country in eg_ncov_df[\"Country\"].unique():\n    df = eg_ncov_df.copy()\n    df = df.loc[df[\"Country\"] == country, :]\n    df = df.groupby(\"Date\").last()\n    plt.plot(df[\"Confirmed\"], df[\"Confirmed\"].diff(), label=country)\n\nplt.title(r\"Trajectory of $\\Delta$Confirmed against Confirmed in SIR-F model\")\nplt.xscale(\"log\")\nplt.yscale(\"log\")\nplt.xlabel(\"Confirmed\")\nplt.ylabel(r\"$\\Delta$Confirmed\")\nfmt = matplotlib.ticker.ScalarFormatter(useOffset=False)\nfmt.set_scientific(False)\nplt.gca().xaxis.set_major_formatter(fmt)\nplt.gca().yaxis.set_major_formatter(fmt)\nplt.legend(bbox_to_anchor=(1.02, 0), loc=\"lower left\", borderaxespad=0)\nplt.show()","d29a8f34":"country = \"Example 5\"\ndf = eg_ncov_df.copy()\ndf = df.loc[df[\"Country\"] == country, :].groupby(\"Date\").last()\narg_tt = df[\"Confirmed\"].diff().idxmax()\narg_cc = df.loc[arg_tt, \"Confirmed\"]\n# Plot\ndf[\"Confirmed\"].plot()\nplt.axhline(y=arg_cc, color=\"black\", linestyle=\":\")\nplt.axvline(x=arg_tt, color=\"black\", linestyle=\":\")\nplt.ylabel(\"Confirmed\")\nplt.title(\n    r'{0}: $C({1})={2}$ when $\\Delta C$ shows max value'.format(\n        country, arg_tt.strftime(\"%d%b%Y\"), arg_cc)\n)\nfmt = matplotlib.ticker.ScalarFormatter(useOffset=False)\nfmt.set_scientific(False)\nplt.gca().yaxis.set_major_formatter(fmt)\nplt.show()","4c990a8b":"country = \"Example 5\"\ndf = eg_ncov_df.copy()\ndf = df.loc[df[\"Country\"] == country, :].groupby(\"Date\").last()\nstart_date = df.index.min()\narg_tt = df[\"Confirmed\"].diff().idxmax()\narg_dd = int((arg_tt - start_date).total_seconds() \/ 60 \/ 60 \/ 24)\narg_cc = df.loc[arg_tt, \"Confirmed\"]\n# Convert date to elapsed time (day)\ndf.index = ((df.index - start_date).total_seconds() \/ 60 \/ 60 \/ 24).astype(np.int64)\n# Curve fitting with exponential growth function\nf = lambda x, a, b: a * np.exp(b * x)\nseries = df.loc[df.index <= arg_dd, \"Confirmed\"]\na_ini = series[0]\nb_ini = np.log(arg_cc \/ a_ini) \/ arg_dd\nparam, _ = sci.optimize.curve_fit(f, series.index, series, p0=[a_ini, b_ini])\nf_partial = functools.partial(f, a=param[0], b=param[1])\ndf[\"Exponential_growth\"] = pd.Series(df.index).apply(lambda x: f_partial(x))\n# Curve fitting with negative exponential function\nf = lambda x, a, b, c: c - a * np.exp(- b * (x - arg_dd))\nseries = df.loc[df.index >= arg_dd, \"Confirmed\"]\nc_ini = series.max()\na_ini = c_ini - arg_cc\nb_ini = series.diff()[arg_dd + 1] \/ a_ini\nparam, _ = sci.optimize.curve_fit(f, series.index, series, p0=[a_ini, b_ini, c_ini])\nf_partial = functools.partial(f, a=param[0], b=param[1], c=param[2])\ndf[\"Negative_exponential\"] = pd.Series(df.index).apply(lambda x: f_partial(x))\n# Convert elapsed time (day) to date\ndf.index = start_date + pd.Series(df.index).apply(lambda x: timedelta(days=x))\n# Plot\ndf[[\"Exponential_growth\", \"Negative_exponential\"]].plot(color=[\"red\", \"green\"])\ndf[\"Actual\"] = df[\"Confirmed\"]\ndf[\"Actual\"].plot(color=\"blue\", marker=\".\", markeredgewidth=0, linewidth=0)\nplt.axhline(y=arg_cc, color=\"black\", linestyle=\":\")\nplt.axvline(x=arg_tt, color=\"black\", linestyle=\":\")\nplt.ylabel(\"Confirmed\")\nplt.ylim(0, max(df[\"Confirmed\"]) * 1.05)\nplt.title(r\"{0}: $(t, C(t))$ with exponential growth and negative exponential\".format(country))\nfmt = matplotlib.ticker.ScalarFormatter(useOffset=False)\nfmt.set_scientific(False)\nplt.gca().yaxis.set_major_formatter(fmt)\nplt.legend(bbox_to_anchor=(1.02, 0), loc=\"lower left\", borderaxespad=0)\nplt.show()","e1884ee3":"S = sym.symbols(\"S\", cls=sym.Function)\nN, R = sym.symbols(\"N R\", positive=True)\nbeta, gamma = sym.symbols(r\"\\beta \\gamma\", positive=True)\ndSdR = - beta \/ (N * gamma) * S(R)\nsr = sym.dsolve(S(R).diff(R) - dSdR, hint=\"separable\", ics={S(0): N})\nsr","e6a9c1fb":"sym.Eq(sym.simplify(sym.log(sr.lhs)), sym.simplify(sym.log(sr.rhs)))","ed17aa6e":"for country in eg_ncov_df[\"Country\"].unique():\n    df = eg_ncov_df.copy()\n    df = df.loc[df[\"Country\"] == country, :]\n    df = df.groupby(\"Date\").last()\n    plt.plot(df[\"Recovered\"], eg_total_population - df[\"Confirmed\"], label=country)\n\nplt.title(r\"Trajectory of Susceptible against Recovered in SIR-F model\")\nplt.yscale(\"log\")\nplt.xlabel(\"Recovered\")\nplt.ylabel(\"Susceptible\")\nfmt = matplotlib.ticker.ScalarFormatter(useOffset=False)\nfmt.set_scientific(False)\nplt.gca().xaxis.set_major_formatter(fmt)\nplt.gca().yaxis.set_major_formatter(fmt)\nplt.legend(bbox_to_anchor=(1.02, 0), loc=\"lower left\", borderaxespad=0)\nplt.show()","312603b5":"ita_trend = Trend(ncov_df, population_dict[\"Italy\"], name=\"Italy\", places=[(\"Italy\", None)])\n_ = ita_trend.analyse()","44b069f2":"%%time\nchange_points = ita_trend.analyse(n_points=3)","c1c37637":"\", \".join(change_points)","3c74f8e2":"arg_scenario = Scenario(\n    ncov_df, name=\"Argentina\", population_dict=population_dict\n)\narg_scenario.show_record().tail()","630ecb59":"arg_scenario.growth_factor()\n","45fd1275":"_ = arg_scenario.trend()","214ec5ef":"arg_change_points = arg_scenario.trend(n_points=21)","02e625e0":"arg_scenario.set_phase(start_dates=arg_change_points)","7af51181":"arg_scenario.estimate(SIRF)","82503380":"arg_scenario.compare_estimated_numbers()","85d27bc4":"arg_scenario.show_parameters()","22267474":"arg_scenario.clear_future_param()\narg_scenario.param_history([\"rho\", \"sigma\"])","eb6e2406":"arg_scenario.param_df[[\"start_date\", \"end_date\", \"rho\", \"Rt\"]]","76865207":"# Scenario in 1 week\narg_scenario.predict(days=7).tail(7).style.background_gradient(axis=0)","2cb05179":"# Scenario in 1 month\narg_scenario.predict(days=30).tail(7).style.background_gradient(axis=0)","a1a175f3":"# Scenario in 1000 days\n_ = arg_scenario.predict(days=1000, min_infected=1)","a263df18":"for dirname, _, filenames in os.walk('\/kaggle\/input\/covid19ardata-covid19-argentina-data-spreadsheet'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import date, timedelta\n\n# carga de csv en pandas\ndf_arg_extra = pd.read_csv(os.path.join(dirname, filename))\n\n# print de dataframe\ndf_arg_extra\n\n# datos de ayer\ntoday = date.today()\nyesterday = date.today() - timedelta(days=2)\nyesterday = yesterday.strftime(\"%d\/%m\/%Y\")\n\ndftoday = df_arg_extra[(df_arg_extra['fecha'] == yesterday) & (df_arg_extra['osm_admin_level_4'] != 'Indeterminado')]\ndf_arg_caba = df_arg_extra[(df_arg_extra['osm_admin_level_4']=='CABA')]\n\ndf_arg_caba.tail()","64b9d23a":"df_arg_caba[('tot_casosconf')].plot()","e6b46d94":"ita_scenario = Scenario(\n    ncov_df, name=\"Italy\", population_dict=population_dict\n)\nita_scenario.show_record().tail()","0ff5b7ee":"ita_scenario.growth_factor()","a95d1747":"_ = ita_scenario.trend()","257fd6ad":"ita_change_points = ita_scenario.trend(n_points=3)","3f1500af":"ita_scenario.set_phase(start_dates=ita_change_points)","d83327a5":"ita_scenario.estimate(SIRF)","980d4a62":"ita_scenario.accuracy_graph(phase_n=1)","e4762aa5":"ita_scenario.accuracy_graph(phase_n=2)","24538de4":"ita_scenario.accuracy_graph(phase_n=3)","8249cfaa":"ita_scenario.compare_estimated_numbers(phases=[\"1st\", \"2nd\", \"3rd\"])","8d625dd4":"ita_scenario.show_parameters()","5274bda5":"ita_scenario.clear_future_param()\nita_scenario.param_history([\"rho\", \"sigma\"])","f5649552":"ita_scenario.param_df[[\"start_date\", \"end_date\", \"rho\", \"Rt\"]]","7224124b":"def _color(data_df):\n    df = data_df.copy()\n    df.loc[:, :] = str()\n    df.iloc[[3, 6, 8], :] = \"background-color: lightgreen\"\n    return df\n\nita_action_df.style.apply(_color, axis=None)","891a9cb1":"ita_scenario.phase_dict[\"3rd\"][\"start_date\"]","727b393e":"c_before, c_after = 1.0, 0.81","09baeff4":"ita_out_df = go_out(\"Italy\")\nita_out_df","0767e2df":"df = ita_out_df.copy()\ngs_before = (df[[\"School\", \"Office\", \"Others\"]].sum(axis=1) * df[\"Portion\"]).sum()\nprint(f\"{round(gs_before, 1)} days in a week susceptible people go out.\")","d691a618":"rho_before = ita_scenario.param(\"1st\", \"rho\")\nrho_after = ita_scenario.param(\"3rd\", \"rho\")\ngs_after = rho_after \/ rho_before \/ c_after * gs_before * c_before\nprint(f\"{round(gs_after, 1)} days in a week susceptible people go out after lockdown.\")","eebcc616":"df = ita_out_df.copy()\ndf[\"School\"] = 0\ndf.loc[df[\"Office\"] > 0, \"Office\"] = 1\nsum_so = (df[[\"School\", \"Office\"]].sum(axis=1) * df[\"Portion\"]).sum()\ndf.loc[df[\"Others\"] > 0, \"Others\"] = round(gs_after - sum_so, 1)\nita_out_after_df = df.copy()\nita_out_after_df","96ce93b6":"df = ita_out_after_df.copy()\ngs_after2 = (df[[\"School\", \"Office\", \"Others\"]].sum(axis=1) * df[\"Portion\"]).sum()\nprint(f\"{round(gs_after2, 1)} days in a week susceptible people go out after lockdown.\")","f9669bd7":"ita_scenario.predict(days=7).tail(7).style.background_gradient(axis=0)","4e9b6757":"ita_scenario.predict(days=30).tail(7).style.background_gradient(axis=0)","43e4e024":"_ = ita_scenario.predict(days=1000, min_infected=1)","0f90f2ac":"sigma_before = ita_scenario.param(\"3rd\", \"sigma\")\nkappa_before = ita_scenario.param(\"3rd\", \"kappa\")\n(sigma_before, kappa_before)","6a005bb3":"# Tentative evaluation with clinical study\nsigma_med = ita_scenario.param(\"3rd\", \"tau\") * (25 \/ 53) \/ ((10 + 18) * 1440)\nkappa_med = ita_scenario.param(\"3rd\", \"tau\") * (7 \/ 53) \/ ((10 + 18) * 1440)\n(sigma_med, kappa_med)","da9490c7":"ita_scenario.clear_future_param()\nita_scenario.add_future_param(start_date=\"01Jun2020\", kappa=kappa_med, sigma=sigma_med)","2ed3e8c7":"df = ita_scenario.predict(days=90)","8eb563d7":"df.tail(7).style.background_gradient(axis=0)","1c0eb394":"_ = ita_scenario.predict(days=600, min_infected=1)","2ec32ae9":"ncov_df.tail()","d32b864a":"df = jpn_ncov_df.copy()\ndf = df.rename(\n    {\"Positive\": \"Confirmed\", \"Discharged\": \"Recovered\", \"Fatal\": \"Deaths\"},\n    axis=1\n)\ndf = df.reset_index()\ndf[\"Group\"] = \"-\"\ndf[\"Country\"] = \"Japan\"\ndf[\"Province\"] = \"-\"\ndf[\"Infected\"] = df[\"Confirmed\"] - df[\"Deaths\"] - df[\"Recovered\"]\ndf = df.loc[:, ncov_df.columns]\narranged_jpn_ncov_df = df.copy()\narranged_jpn_ncov_df.tail()","5fe38296":"jpn_scenario = Scenario(\n    arranged_jpn_ncov_df, name=\"Japan\", population_dict=population_dict\n)\njpn_scenario.show_record().tail()","2aaa9d8e":"jpn_scenario.growth_factor()","10535801":"_ = jpn_scenario.trend()","b2ca0da4":"jpn_change_points = jpn_scenario.trend(n_points=3)","e91fb245":"# Manual change, update later\njpn_scenario.set_phase(start_dates=jpn_change_points)","7763dd32":"jpn_scenario.estimate(SIRF)","b8241ea9":"jpn_scenario.accuracy_graph(phase_n=1)","f1326ab5":"jpn_scenario.accuracy_graph(phase_n=2)","63bfc555":"jpn_scenario.accuracy_graph(phase_n=3)","7a1d0466":"jpn_scenario.compare_estimated_numbers([\"1st\", \"2nd\", \"3rd\"])","f5756ab5":"jpn_scenario.show_parameters()","4f3ecc0a":"jpn_scenario.clear_future_param()\njpn_scenario.param_history([\"rho\", \"sigma\"])","1c8b2460":"df = jpn_pref_df.copy()\ndf[\"Infected\"] = df[\"Positive\"] - df[\"Discharged\"] - df[\"Fatal\"]\ndf = df.pivot_table(\n    index=\"Date\", columns=\"Prefecture\", values=\"Infected\", aggfunc=\"last\"\n)\njpn_i_df = df.sort_values(by=df.index[-1], axis=1, ascending=False)\nline_plot(\n    jpn_i_df.iloc[:, :10],\n    \"top 10 prefectures in Japan: Infected cases over time\",\n    y_integer=True\n)","1162d401":"df = jpn_i_df.idxmax(axis=1)\ndf = df[df != df.shift()].reset_index()\ndf.columns = [\"Start_date\", \"Where_highest\"]\ndf","6d38f184":"_date = jpn_i_df.index[-1].strftime(\"%d%b%Y\")\ndf = pd.merge(\n    jpn_meta_df[[\"Population_Total\", \"Area_Habitable\"]],\n    jpn_i_df.loc[jpn_i_df.index[-1], :],\n    left_index=True, right_index=True\n)\ndf.columns = [\"Population\", \"Area\", \"Infected\"]\ndf[\"Density\"] = df[\"Population\"] \/ df[\"Area\"]\ndf[\"I_rate\"] = df[\"Infected\"] \/ df[\"Population\"]\njpn_map(df.index, df[\"Infected\"], f\"Infected cases on {_date}\")\njpn_map(df.index, df[\"Population\"], f\"Total population\")","d008ee1f":"jpn_scenario.param(\"2nd\", \"sigma\") \/ jpn_scenario.param(\"1st\", \"sigma\")","a83ea08c":"line_plot(jpn_ncov_df.drop([\"Tested\"], axis=1), \"Cases over time in Japan\", y_integer=True)","50122848":"line_plot(\n    jpn_ncov_df[\"Hosp_waiting\"], \"Cases who are waiting for hospitalization over time in Japan\",\n    y_integer=True,\n    v=[jpn_scenario.phase_dict[\"2nd\"][\"start_date\"],jpn_scenario.phase_dict[\"3rd\"][\"start_date\"]]\n)","31b8ea7b":"jpn_scenario.predict(days=7).tail(7).style.background_gradient(axis=0)","1d296a54":"jpn_scenario.predict(days=30).tail(7).style.background_gradient(axis=0)","470979bd":"_ = jpn_scenario.predict(days=1000, min_infected=1)","c61af93d":"1 - jpn_scenario.record_df.iloc[-1, :][\"Confirmed\"] \/ population_dict[\"Japan\"]","c022f0df":"jpn_scenario.clear_future_param()\njpn_scenario.param(\"2nd\", \"Rt\")","47c53ea1":"df = jpn_scenario.predict(days=1000, show_figure=False)\ndf[\"Infected\"].idxmax().strftime(\"%d%b%Y\")","d5a34acc":"current_rho = jpn_scenario.param(\"last\", \"rho\")\nlimit_rho = current_rho \/ jpn_scenario.param(\"last\", \"Rt\") * 1.0\nlimit_rho","e7911339":"beta_inv = math.ceil(jpn_scenario.param(\"last\", \"tau\") \/ 24 \/ 60 \/ limit_rho) + 1\ntarget_rho = jpn_scenario.param(\"last\", \"tau\") \/ 24 \/ 60 \/ beta_inv\ntarget_rho","ae9b90e9":"target_rho < limit_rho","1a5604f2":"jpn_scenario.clear_future_param()\n_ = jpn_scenario.add_future_param_gradually(\"25Apr2020\", \"31May2020\", \"rho\", current_rho, target_rho)\njpn_scenario.show_parameters()","5eeb2967":"line_plot(\n    jpn_scenario.show_parameters().set_index(\"start_date\")[\"Rt\"],\n    title=\"Rt over time\", xlabel=\"start_date\", ylabel=\"\", h=1.0, math_scale=False\n)","b713a1a5":"df = jpn_scenario.predict(days=100)\ndf[\"Infected\"].idxmax().strftime(\"%d%b%Y\")","8c7bd313":"target_rho \/ jpn_scenario.param(\"last\", \"rho\")","75231614":"remote_rate = round(0.056 * 23992701 \/ (2651272 + 2128322 + 7928268), 3)\nremote_rate","8032715e":"df = go_out(\"Japan\")\ndf[\"School\"] = 0\ndf[\"Remote\"] = df[\"Office\"] * remote_rate\ndf[\"Workplace\"] = df[\"Office\"] - df[\"Remote\"]\ndf[\"Others_CC\"] = df[\"Others\"] * 0.75 * (1 - 0.25)\ndf[\"Others\"] = df[\"Others\"] - df[\"Others_CC\"]\ndf = pd.concat([df[\"Portion\"], df.loc[:, ~df.columns.isin([\"Portion\"])]], axis=1)\ndf = df.drop(\"Office\", axis=1)\njpn_go_df = df.copy()\njpn_go_df","664c7cea":"df = jpn_go_df.copy()\np_before = (df[[\"School\", \"Workplace\", \"Others_CC\"]].sum(axis=1) * df[\"Portion\"]).sum() \/ 7\np_before","68fc4694":"def calc_target_p(rho_before, rho_after, p_before):\n    return (rho_before \/ rho_after * (1 + 9 * p_before) - 1) \/ 9","f353818a":"target_p = calc_target_p(target_rho, jpn_scenario.param(\"last\", \"rho\"), p_before)\ntarget_p","64846616":"jpn_ncov_df.tail()","6317a19d":"df = jpn_ncov_df.copy()\ndf[\"Grade1\"] = df[\"Asymptomatic\"] + df[\"Hosp_mild\"]\ndf[\"Grade2\"] = df[\"Sym-unknown\"] + df[\"Hosp_unknown\"] + df[\"Hosp_waiting\"]\ndf[\"Grade3\"] = df[\"Hosp_severe\"]\ndf = df.loc[:, [\"Grade1\", \"Grade2\", \"Grade3\"]]\ndf = df.apply(lambda x: x \/ np.sum(x), axis=1)\ngrade_df = df.copy()\ngrade_df.tail()","d86b39a2":"line_plot(grade_df, \"Proportion of each grade over time\")","f3e4d54b":"grade_df.plot.kde(title=\"Kernel density estiomation of protion of each grade\")\nplt.show()","f09ac2e5":"grade_df.describe().T","cfcf92d8":"grade_dict = grade_df.median().to_dict()\ngrade_dict","572ea3d1":"ind_scenario = Scenario(ncov_df, name=\"India\", population_dict=population_dict)","c3366de7":"ind_scenario.show_record().tail()","1236791a":"ind_scenario.growth_factor()","8bc001b6":"_ = ind_scenario.trend()","47792295":"ind_change_points = ind_scenario.trend(n_points=2)","204c1a3d":"ind_scenario.set_phase(start_dates=ind_change_points)","c07a43e7":"ind_scenario.estimate(SIRF)","af7156ae":"ind_scenario.accuracy_graph(phase_n=1)","eb0a89fd":"ind_scenario.accuracy_graph(phase_n=2)","fe03833e":"ind_scenario.compare_estimated_numbers(phases=[\"1st\", \"2nd\"])","88065ae5":"ind_scenario.show_parameters()","4a3fc34a":"ind_scenario.param_history([\"rho\", \"sigma\"])","d583a725":"ind_scenario.predict(days=7).tail(7).style.background_gradient(axis=0)","03bcd245":"ind_scenario.predict(days=30).tail(7).style.background_gradient(axis=0)","e09a747a":"_ = ind_scenario.predict(days=1000, min_infected=1)","90ff761d":"usa_scenario = Scenario(ncov_df, name=\"US\", population_dict=population_dict)","2af00888":"usa_scenario.show_record().tail()","7335bafc":"usa_scenario.growth_factor()","2eaca413":"_ = usa_scenario.trend()","0d355254":"usa_change_points = usa_scenario.trend(n_points=2)","feda6348":"usa_scenario.set_phase(start_dates=usa_change_points)","ff614c0b":"usa_scenario.estimate(SIRF)","4bc183fb":"usa_scenario.accuracy_graph(phase_n=1)","92165a2c":"usa_scenario.accuracy_graph(phase_n=2)","a3099c2c":"usa_scenario.compare_estimated_numbers(phases=[\"1st\", \"2nd\"])","9e5ce9b6":"usa_scenario.show_parameters()","0daf8117":"usa_scenario.param_history([\"rho\", \"sigma\"])","7abeee85":"usa_scenario.predict(days=7).tail(7).style.background_gradient(axis=0)","67d4b743":"usa_scenario.predict(days=30).tail(7).style.background_gradient(axis=0)","34ba966d":"_ = usa_scenario.predict(days=1000, min_infected=1)","b28ae748":"nzl_scenario = Scenario(ncov_df, name=\"New Zealand\", population_dict=population_dict)\nnzl_scenario.show_record().tail()","f3820594":"nzl_scenario.growth_factor()","4d9af0d0":"_ = nzl_scenario.trend()","d5b32d3d":"nzl_change_points = nzl_scenario.trend(n_points=2)","3f6ed54b":"nzl_scenario.set_phase(start_dates=nzl_change_points)","8ce8bd69":"nzl_scenario.estimate(SIRF)","3f7cd9b1":"nzl_scenario.accuracy_graph(phase_n=1)","962000c9":"nzl_scenario.accuracy_graph(phase_n=2)","9f8b9e1e":"nzl_scenario.compare_estimated_numbers(phases=[\"1st\", \"2nd\"])","17c693d4":"nzl_scenario.show_parameters()","3b9eca03":"nzl_scenario.param_history([\"rho\", \"sigma\"])","c1df4639":"nzl_scenario.predict(days=7).tail(7).style.background_gradient(axis=0)","eacb97b7":"nzl_scenario.predict(days=30).tail(7).style.background_gradient(axis=0)","297f68cb":"nzl_ = nzl_scenario.predict(days=1000, min_infected=10)","e9f53496":"## S-R Trend analysis","2447e56e":"# Grouping by growth factor<a id=\"2\"><\/a>\nThe number of confirmed cases is increasing in many countries, but there are two of countries. In a first-type country, growth factor is larger than 1 and the number of cases is rapidly increasing. In a second-type country, growth factor is less than 1.","aa7fa38e":"Tokyo 2020 Olympics was postponed until 2021, and $\\rho$ is decreasing from 2nd phase to 3rd phase.","19b7953f":"## $\\bar{h}$ and $\\bar{s}$ value before actions are taken\nWe assume that $\\bar{h}=0.5$ and $\\bar{s}=0.5$.  \n**(Using population distribution data and case reports, $\\bar{h}\\ \\bar{s}$ and $1 - \\bar{h}\\ \\bar{s}$ can be calculated.)**","14ebf610":"In the long-term,","1b367d96":"### Compare parameters","2d8cca42":"There is an inflection point of y (the number of currentry infected cases per total population). At this point, value of x (the number of susceptible cases per total population) is nearly equal to $\\frac{1}{R_0}$.","e9e2b23e":"@ClusterJapan (expert team to prevent COVID-19 outbreak in Japan) analysed link of patients and summarized as follows. This is from [Twitter @ClusterJapan on 11Apr2020](https:\/\/twitter.com\/ClusterJapan\/status\/1248884086581514242?s=20) (in Japanese).\n* 80% of patients have less than 1 secondary infected patient\n* 10% of patients have 8-12 secondary patients and they are in closed space\/crowd","a2619e88":"## Group 3: At a crossroad, the others","8cf493b0":"In 30 days,","063a61cb":"However, errors were found for curve fitting when $t \\leq \\mathrm{argmax}\\ \\Delta C(t)$.  \nThis is because\n$$\n\\cfrac{\\mathrm{d}C}{\\mathrm{d}T} = \\cfrac{\\beta}{N} S I\n$$\n$S \\simeq N: const.$ for $t \\leq \\mathrm{argmax}\\ \\Delta C(t)$, but $I$ is not proportinal to $C$ in SIR-like model.  \n\nThis means we cannot convert the differencial equation to the following equations.\n\\begin{align*}\n\\frac{\\mathrm{d}x}{\\mathrm{d}t} & = B x \\\\\n\\mathrm{i.e.\\ } x(t) & = A e^{Bt}\n\\end{align*}","89a7657b":"In the long-term,","e56b17cb":"### 2nd phase","e50145af":"In the long-term,","08d7a580":"Set $\\rho$ with the assumtion that $\\rho$ will gradually (log-scale) decrease,","37348faf":"\"Predicter\" class was defined in Preparation part.","a8614ee7":"# Scenario in Argentina <a id=\"77\"><\/a>","593ce7e8":"### Real factors of $\\beta_1$\n\nThe parameter in the math model:  \n\\begin{align*}\n\\rho_1 & = \\tau \\beta_1  \\\\  \n\\beta_1 & = \\cfrac{1}{49}[g_s \\{g_w + g_i (1-q) \\} v (1-m)^2 (1-w_e)^{w_n} e^{-(h_{1}+h_{2})} c \\delta]  \\\\\n\\end{align*}\n\nControl factors:  \n$g_s$: **The number of days in <u>a week<\/u> susceptible persons go out [day]**  \n$g_w$: The number of days in <u>a week<\/u> waiting but un-quarantined persons go out [day]  \n$g_i$: The number of days in <u>a week<\/u> currently infected (confirmed) but un-quarantined persons go out [day]  \n$q$: Quarantine rate of currently infected (confirmed) patients [-]  \n$v$: Probability of virus existance in a droplet [-]  \n$m$: Rate of persons wearing masks effectively (depends logistically on supply of masks) [-]  \n$w_e$: Virus reduction effect of washing hands [-]  \n$w_n$: The number of times people washes their hands before touching their own faces after go out [-]  \n$h_1$: Health condition (active rate of cellular immunity factors) of susceptible and contacted persons [-]  \n$h_2$: Health condition (active rate of humoral immunity factors) of susceptible and contacted persons [-]  \n$c$: **The number of contacts between susceptible persons and patients while on the go in a minute (depends on population density) [1\/min]**  \n$\\delta$:The product of unknown real factors [-]  ","d4c97e63":"Here, we assume $\\rho$ is","ed172be6":"### Compare parameters","1be0034e":"## Example datasets\nWith the same initial values $(x_{(0)}, y_{(0)}, z_{(0)}, w_{(0)})=(0.999, 0.001, 0, 0)$, we will create five SIR-F example datasets.\n* Example 1: $(\\theta, \\kappa, \\rho, \\sigma) = (0.0002, 0.005, 0.20, 0.075)$\n* Example 2: $(\\theta, \\kappa, \\rho, \\sigma) = (0.0002, 0.005, \\underline{0.40}, 0.075)$, spread quickly\n* Example 3: $(\\theta, \\kappa, \\rho, \\sigma) = (0.0002, 0.005, \\underline{0.15}, 0.075)$, spread slowly\n* Example 4: $(\\theta, \\kappa, \\rho, \\sigma) = (0.0002, \\underline{0.003}, 0.20, \\underline{0.150})$, improved heakthcare system\n* Example 5: $(\\theta, \\kappa, \\rho, \\sigma) = (\\underline{0.0000}, 0.005, 0.20, 0.075)$, as the same as SIR-D model\n\nValues are dimensionalized with total population $N=1,000,000$ in the example datasets.","042ee72c":"### How to set $R_t < 1$ by 31May2020\n$R_t < 1$ when $\\rho$ is under","285d0fa5":"# Factors of model parameters<a id=\"6\"><\/a>\nTo figure out what to do for minimizing the damage, we will perform scenario analysis in the next part. In this section, we will define the control factors of the SIR-F parameters.\n\nComment:  \nFor accurate SEWIR-F prediction, we need to calculate $\\rho_1$ and $\\rho_2$ with linelist (case reports) of each country. However, it is difficult to get enough data for all countries and we will use SIR-F model as the main model in scenario analysis part.","12633ba3":"### How many medical staffs, ICU beds, hospitals and other sites we have","48a4607f":"$t$ is a measurable variable, but this is just an intermediate variable. $\\Delta C$ is determined by cummurative number of cases.","6a6f26ae":"## Updates\n * 13Feb2020-29Apr2020: (Please read [Change log](#11) subsection.)\n \n * 01May2020: Change assumed parameter values in \"Factors of model parameters\" section\n * 01May2020: Fix bag of SIR-FV model, calculation of Vaccinated (Immuned)\n * 03May2020: Random seed was fixed in S-R trend analysis\n * 03May2020: Error function of S-R trend anaysis was changed from squared error to weghtend squared error with day numbers\n * 03May2020: Fix bag of Scenario class, the start point of prediction\n * 03May2020: The result of un-controlled clinical study of Remdesivir was applied to scenario analysis in Italy\n * 06May2020: Error function of S-R trend anaysis was changed from weghtend squared error to squared error\n * 06May2020: Update Trend class, S-R trend in recent days will be valued, the last change point will be searched at first\n * 09May2020: Published the functions as a Python package","c8ce5a1e":"### Dimensionalization\nHere, we will dimensionalize the data, assuming that start date is the first date of JHU dataset, $\\tau=1440$ [min] and total population $N=1,000,000$.","37f89d35":"## Control factors of recovery rate $\\gamma$ and mortality rate $\\alpha_2$\nHere, let's reconsider I $\\overset{\\gamma}{\\longrightarrow}$ R and I $\\overset{\\alpha_2}{\\longrightarrow}$ F.  \nBecause balance of immunity (+effect of treatments) and virulence determines whether patients can recover or not, the formulas can be replaced with  \n\n\\begin{align*}\n& \\mathrm{I} \\overset{\\bar{h}}{\\longrightarrow} \\mathrm{I}^\\star \\overset{\\bar{s}}{\\longrightarrow} \\mathrm{F}^\\star \\overset{L^{-1}}{\\longrightarrow} \\mathrm{F}    \\\\\n& \\mathrm{I} \\overset{f_2}{\\longrightarrow} \\mathrm{R}^\\star \\overset{l^{-1}}{\\longrightarrow} \\mathrm{R}    \\\\\n\\end{align*}\n\nI$^\\star$: Confirmed cases whose immune systems did not overcome virus multiplication, and <u>without<\/u> severe events  \nF$^\\star$: Confirmed cases whose immune systems did not overcome virus multiplication, and <u>with<\/u> severe events  \nR$^\\star$: Confirmed cases whose immune systems overcame virus multiplication or comfirmed cases whose severe events can be stopped","d9e6b3ff":"## Predict the future with the last parameters","0822d603":"## Predict the future with the last parameters","1578a626":"In SIR-F model,\n\\begin{align*}\n\\frac{\\mathrm{d}S}{\\mathrm{d}T} &= - \\cfrac{\\beta}{N} S I  \\\\\n\\frac{\\mathrm{d}R}{\\mathrm{d}T} &= \\gamma I  \\\\\nI &> 0 \\\\\nS & \\simeq N \\ \\mathrm{when}\\ R = 0\\\\\n\\end{align*}","d00d792b":"## Calculate growth factor\nWhere $C$ is the number of confirmed cases,  \n$$\\mathrm{Growth\\ Factor} = \\cfrac{\\Delta \\mathrm{C}_{n}}{\\Delta \\mathrm{C}_{n-1}}$$","199a87fd":"### General packages","a4c0fe86":"# SIR to SIR-F<a id=\"4\"><\/a>\nIn this section, we will create a customized mathematical model derived from SIR model.","7337bc55":"## Population pyramid","568a7d0b":"### 3rd phase","8a35f873":"Proportion of each grade is as below.","f38debc6":"### Hyperparameter optimization\nIn the previous paragraphs figures, we calculated the number of cases based on hypothesized parameter values. However, we do not know parameter values of the actual data. Here, we will estimate the ($\\theta, \\kappa, \\rho, \\sigma$) values of the example data using hyperparameter optimization method by Optuna package. $\\tau$ will be fixed as 1440 [min].","635c1652":"## Calculate $\\rho_2$ and $\\rho_3$\nTo estimate $\\rho_2 = \\tau \\beta_2$ and $\\rho_3 = \\tau \\beta_3$ of COVID-19, we first calculate median value of latent period $\\overline{L_{E}}$ and waiting time for confirmation $\\overline{L_{W}}$ using linelist. We assume that patients start to have infectivity from onset dates. This means latent period is equal to incubation period.\n\n$\\beta_2$: Inverse of latent period [1\/min]  \n$\\beta_3$: Inverse of waiting time for confirmation [1\/min]","400b2270":"## Impact of actions on $\\beta$\nIn SIR-F model $g_s$ is a control factor of $\\beta$.  \nActions taken at 15th day:  \nAll schools and offices will be closed.  ","c84fbc31":"## What is SEWIR-F model?\n* S: Susceptible\n* <u>E: Exposed and in latent period (without infectivity)<\/u>\n* <u>W: Waiting cases for confirmation (with infectivity)<\/u>\n* S$^\\ast$: Confirmed and un-categorized\n* I: Confirmed and categorized as I\n* R: Recovered\n* F: Fatal with confirmation\n\nMeasurable variables:  \nTotal population - Confirmed = $S+E+W+S^\\ast$  \nConfirmed = $I+R+F$  \nRecovered = $R$  \nDeaths = $F$  \n\nModel:  \n\\begin{align*}\n\\mathrm{S} \\overset{\\beta_1 (W+I)}{\\longrightarrow} \\mathrm{E} \\overset{\\beta_2}{\\longrightarrow} \\mathrm{W} \\overset{\\beta_3}{\\longrightarrow} \\mathrm{S}^\\ast \\overset{\\alpha_1}{\\longrightarrow}\\ & \\mathrm{F}    \\\\\n\\mathrm{S}^\\ast \\overset{1 - \\alpha_1}{\\longrightarrow}\\ & \\mathrm{I} \\overset{\\gamma}{\\longrightarrow} \\mathrm{R}    \\\\\n& \\mathrm{I} \\overset{\\alpha_2}{\\longrightarrow} \\mathrm{F}    \\\\\n\\end{align*}\n\n$\\alpha_1$: Mortality rate of S$^\\ast$ cases [-]  \n$\\alpha_2$: Mortality rate of I cases [1\/min]  \n$\\beta_1$: <u>Exposure rate (the number of encounter with the virus in a minute)<\/u> [1\/min]  \n$\\beta_2$: <u>Inverse of latent period<\/u> [1\/min]  \n$\\beta_3$: <u>Inverse of waiting time for confirmation<\/u> [1\/min]  \n$\\gamma$: Recovery rate [1\/min]  \n\nOrdinary Differential Equation (ODE):   \n\\begin{align*}\n& \\frac{\\mathrm{d}S}{\\mathrm{d}T}= - N^{-1}\\beta_1 S (W + I)  \\\\\n& \\frac{\\mathrm{d}E}{\\mathrm{d}T}= N^{-1}\\beta_1 S (W + I) - \\beta_2 E  \\\\\n& \\frac{\\mathrm{d}W}{\\mathrm{d}T}= \\beta_2 E - \\beta_3 W  \\\\\n& \\frac{\\mathrm{d}I}{\\mathrm{d}T}= (1 - \\alpha_1)\\beta_3 W - (\\gamma + \\alpha_2) I  \\\\\n& \\frac{\\mathrm{d}R}{\\mathrm{d}T}= \\gamma I  \\\\\n& \\frac{\\mathrm{d}F}{\\mathrm{d}T}= N^{-1}\\alpha_1 \\beta_3 W + \\alpha_2 I  \\\\\n\\end{align*}\n\nWhere $N=S+E+W+I+R+F$ is the total population, $T$ is the elapsed time from the start date.","d3c3ce6f":"### 3rd phase","8b28920e":"Note:  \n\"Score\" is Root Mean Squared Log Error (RMSLE) score.\n\\begin{align*}\n& \\sqrt{\\cfrac{1}{n}\\sum_{i=1}^{n}(log_{10}(A_{i} + 1) - log_{10}(P_{i} + 1))^2}\n\\end{align*}\nWhere $A$ is observed (actual) values, $P$ is estimated (predicted) values. Variables are $S$ ($i=1$), $I$ ($i=2$), $R$ ($i=3$) and $F$ ($i=n=4$) for SIR-F model. When RMSLE socre is low, hyperparameter estimation is highly accurate.  \nPlease refer to [What\u2019s the Difference Between RMSE and RMSLE?](https:\/\/medium.com\/analytics-vidhya\/root-mean-square-log-error-rmse-vs-rmlse-935c6cc1802a)","4f6dfa2d":"Control factors:  \n$g_s$: The number of days in <u>a week<\/u> susceptible persons go out [day]  \n$g_w$: The number of days in <u>a week<\/u> waiting but un-quarantined persons go out [day]  \n$g_i$: The number of days in <u>a week<\/u> currently infected (confirmed) but un-quarantined persons go out [day]  \n$q$: Quarantine rate of currently infected (confirmed) patients [-]  \n$v$: Probability of virus existance in a droplet [-]  \n$m$: Rate of persons wearing masks effectively (depends logistically on supply of masks) [-]  \n$w_e$: Virus reduction effect of washing hands [-]  \n$w_n$: The number of times people washes their hands before touching their own faces after go out [-]  \n$h_1$: Health condition (active rate of cellular immunity factors) of susceptible and contacted persons [-]  \n$h_2$: Health condition (active rate of humoral immunity factors) of susceptible and contacted persons [-]  \n$c$: The number of contacts between susceptible persons and patients while on the go in a minute (depends on population density) [1\/min]  \n$\\delta$:The product of unknown real factors [-]  \n\nThe parameter in the math model:  \n$\\beta_1 = \\cfrac{1}{49}[g_s \\{g_w + g_i (1-q) \\} v (1-m)^2 (1-w_e)^{w_n} e^{-(h_{1}+h_{2})} c \\delta]$ [1\/min]","4d9a7dc9":"## Raw data: the number of cases","5d760da6":"### 1st phase","e27932d2":"We can estimate $P_{before}$ with go-out table.\n* Schools were closed\n* 10.6% of people work remotely because\n  - 5.6% of respondents work remotely (cf.1),\n  - total number of respondents is 23,992,701 (cf.2),\n  - 2,651,272 respondents are working in service industry (cf.2),\n  - 2,128,322 respondents are medical personnel or care worker (cf.2),\n  - 7,928,268 respondents are office workers or workers of logistics companies (cf.2).\n  - The number of days the respondent work remotely is not known.\n* As usual, 75% of people are in closed space\/crowded (CC) area: this is just my point of view, I'm gathering information.\n* Compared to baseline, 25% reduction was shown in Retail & recreation area: cf.3\n\ncf.1: (In Japanese) [Report of 1st survey by Ministry of Health, Labor and Welfare & LINE Corporation](https:\/\/www.mhlw.go.jp\/stf\/newpage_10695.html)  \ncf.2: (In Japanese) [Detailed report of 1st survey by Ministry of Health, Labor and Welfare & LINE Corporation](https:\/\/www.mhlw.go.jp\/stf\/newpage_10798.html)\nMovility reports: [COVID-19 Community Mobility Reports in Japan on 05Apr2020](https:\/\/www.gstatic.com\/covid19\/mobility\/2020-04-05_JP_Mobility_Report_en.pdf)","4b460cee":"## Group 1: Outbreaking, growth factor $>$ 1 for the last 7 days","9478fb07":"### 1st phase","827fe8ac":"As my personal point of view, $\\beta^{\\ast}$ can be estimated as $\\beta^{\\ast} = 10 \\times \\overline{\\beta}$.  \nThis means\n\\begin{align*}\n& \\beta_{(p)} = \\overline{\\beta}(1+9P)\n\\end{align*}\n\n$P$ is the rate of people in the spaces where effcetive contact rate is 10 times as the average value.","9ee893ff":"## How to prevent overwhelming medical system\nWe need to flatten the curve of currently infected cases so that prevent overwhelming medical system. The peak value of currently infected cases must not exceed the number of hospital capacity.","f66d78a7":"In 30 days,","b874ba82":"## Visualize total data","2f370de7":"### In Feb2020\n * 13Feb2020: SIR model\n * 15Feb2020: SIR-D model\n * 22Feb2020: SIR-F model\n * 23Feb2020: Changed the dataset from 2019_ncov_data.csv to covid_19_data.csv\n * 23Feb2020: $\\tau$ was fixed as \"1 day\" because the time format of ObservationDate is MM\/DD\/YYYY\n * 23Feb2020: SIR-F model with other countries\n * 23Feb2020: How to minimize the damage (Change of parameter, Vacctination)\n * 24Feb2020: Use $\\tau$ again","37c60c59":"## Grouping countires based on growth factor\n* Outbreaking: growth factor $>$ 1 for the last 7 days\n* Stopping: growth factor $<$ 1 for the last 7 days\n* At a crossroad: the others","47a877b8":"## Argentina: S-R Trend Analysis","1873e6d4":"## Phase in Japan\nWe will use the change points as the start date of phases. For each phase, will apply SIR-F model. $\\tau$ values will be the same value.","b1c1bba0":"## Why $\\rho$ was reduced?","c591952d":"## Predict the future with the last parameters","27cad9a7":"**We will find the time-points, assuming that there are two change points.**","df4351a8":"### 2nd phase","1d0c11d3":"### $g_s$ value before actions are taken\n$g_s$: The number of days in <u>a week<\/u>, susceptible persons go out [day]  ","54640cf6":"## Estimate SIR-F parameters","9c37d74c":"# Remarks<a id=\"9\"><\/a>\nThank you for reading!  \nLisphilar from Japan","3c41aa60":"## Predict the number of case: with new medicines from 15th day","1ad66304":"# Scenario in New Zealand<a id=\"15\"><\/a>\nIn this section, we will perform scenario analysis using the records of New Zealand.","dfc69326":"**Non-dimensional effective contact rate $\\rho$ was reduced in phases.**","27549467":"### Compare predicted number of confirmed cases","55d2c972":"## argmax($\\Delta C$) in $(x, y) = (t, C(t))$ plot\nWhat can we know from $(C, \\Delta C)$ plot? Here, we will discuss max value of $\\Delta C$.","65058ccb":"In a week,","d5a9f70f":"### 2nd phase","baea7f0f":"### Compare predicted number of confirmed cases","8614d0aa":"In a week,","494b0726":"## S-R trend of actual data in one country\nWe will perform S-R trend analysis for actual data in Italy as an example.","466bef74":"### What is SIR model?\nSIR model is a simple mathematical model to understand outbreak of infectious diseases.  \n[The SIR epidemic model - Learning Scientific Programming with Python](https:\/\/scipython.com\/book\/chapter-8-scipy\/additional-examples\/the-sir-epidemic-model\/)\n\n * S: Susceptible (=All - Confirmed)\n * I: Infected (=Confirmed - Recovered - Deaths)\n * R: Recovered or fatal (=Recovered + Deaths)\n \nNote: THIS IS NOT THE GENERAL MODEL!  \nThough R in SIR model is \"Recovered and have immunity\", I defined \"R as Recovered or fatal\". This is because mortality rate cannot be ignored in the real COVID-19 data.\n\nModel:  \n\\begin{align*}\n\\mathrm{S} \\overset{\\beta I}{\\longrightarrow} \\mathrm{I} \\overset{\\gamma}{\\longrightarrow} \\mathrm{R}  \\\\\n\\end{align*}\n\n$\\beta$: Effective contact rate [1\/min]  \n$\\gamma$: Recovery(+Mortality) rate [1\/min]  \n\nOrdinary Differential Equation (ODE):  \n\\begin{align*}\n& \\frac{\\mathrm{d}S}{\\mathrm{d}T}= - N^{-1}\\beta S I  \\\\\n& \\frac{\\mathrm{d}I}{\\mathrm{d}T}= N^{-1}\\beta S I - \\gamma I  \\\\\n& \\frac{\\mathrm{d}R}{\\mathrm{d}T}= \\gamma I  \\\\\n\\end{align*}\n\nWhere $N=S+I+R$ is the total population, $T$ is the elapsed time from the start date.","ff04e87d":"### In Apr2020\n * 05Apr2020: Update simulation() fucntion, dense_ouput=False\n * 05Apr2020: Create Scenario() class\n * 06Apr2020: Update Scenario() class to reduce running time\n * 11Apr2020: Italy entered 4th phase\n * 11Apr2020: Add \"How to make way by 31May2020 for the number of cases peaking out\" in Japan\n * 13Apr2020: \"excluded_places\" was used for SEWIR-F and showed incorrected graph in the previous versions. Replaced with \"places\"\n * 17Apr2020: Prepare the dataset in Japan\n * 18Apr2020: Update RMSLE score fucntion of Estimator, $\\ln(x)$ to $log_{10}(x)$\n * 18Apr2020: Add explanation of accuracy index of hyperparameter estimation\n * 18Apr2020: Japan entered 3rd phase\n * 18Apr2020: Data in \"Expalanation of concept part\" was changed from actual data to example data\n * 27Apr2020: \"S-R trend analysis\" section\n * 28Apr2020: In scenario analysis, Exponential trend analysis was replaced with S-R trend analysis\n * 28Apr2020: Add scenario analysis in India and USA\n * 29Apr2020: Add scenario analysis in New Zealand","f1bfba6a":"## If 1,000\/day are vaccinated (SIR-FV model) from 15th day\nWe will predict the numbers of cases in the assumption that 10,000 persons will be vacctinated in one day until there are no susceptible people.  \n\n\\begin{align*}\n& \\frac{\\mathrm{d}x}{\\mathrm{d}t}= - \\rho x y - \\omega  \\\\\n& \\frac{\\mathrm{d}y}{\\mathrm{d}t}= \\rho (1-\\theta) x y - (\\sigma + \\kappa) y  \\\\\n& \\frac{\\mathrm{d}z}{\\mathrm{d}t}= \\sigma y  \\\\\n& \\frac{\\mathrm{d}w}{\\mathrm{d}t}= \\rho \\theta x y + \\kappa y  \\\\\n\\end{align*}\n\nWhere $\\omega_{(x>0)}=\\frac{1,000}{N}$ and $N$ is the total population.\n\nReproduction number can be defined as  \n\\begin{align*}\nR_0 = \\rho (1 - \\theta) (\\sigma + \\kappa)^{-1}\n\\end{align*}","057edf1e":"In the logn-term,","317c5982":"## S-R Trend analysis","6008966e":"# Dataset and tools<a id=\"1\"><\/a>","5a8a41be":"## Data cleaning: Linelist (COVID19_line_list_data.csv)\nLinelist in clinical trials is a list of many case reports.","b27a72b8":"Values of Example 1 $(\\kappa=0.002)$ are nealy equal to that of Example 5 $(\\kappa=0.000)$ as shown in the next figure.","57ec3948":"### The current situation\nUnder the assumtion that the current trend continues, when will the number of currently infected cases peak out?  \nWe can use $R_t$ as the index. When $R_t < 1$, $\\frac{\\mathrm{d}y}{\\mathrm{d}t} < 0$.\n\nThis is because  \n\\begin{align*}\n& \\frac{\\mathrm{d}y}{\\mathrm{d}t}= \\rho (1-\\theta) x y - (\\sigma + \\kappa) y\\\\\n& R_t = \\rho (1 - \\theta) (\\sigma + \\kappa)^{-1}\\\\\n& x \\simeq 1 \\\\\n\\end{align*}\n\nwhere $R_t$ is reproduction number (phase\/time-dependent version of $R_0$).","550297fc":"We can calculate weighted average of days with age composion of population. Population pyramid in the entire world (global data) will be used.","5c784765":"There is an inflection point of y (the number of currentry infected cases per total population). At this point, value of x (the number of susceptible cases per total population) is nearly equal to $\\frac{1}{R_0}$.","7c20aea5":"$$\n\\gamma_{med} = \\cfrac{\\tau \\times(\\mathrm{Percentage\\ of\\ discharged)}}{\\mathrm{Total\\ number\\ of\\ minutes\\ with\\ obserbvation}}\n$$","f058407b":"Trajectorie of parameter values in hyperparameter estimation are shown here.","656071a7":"# + Scenario CABA vs Argentina","436c3055":"## Phases in USA\nWe will use the change points as the start date of phases. For each phase, will apply SIR-F model. $\\tau$ values will be the same value.","134d3bdc":"## Predict the future with the last parameters","8f209086":"$\\Longleftrightarrow$ (as substitute for $\\longrightarrow$ with $\\longleftarrow$) means that right side can be return to the left side.  \nS$_\\mathrm{q}$: Susceptible persons with self-quaranting <!--Susceptible in the strict sense-->  \nS$_\\mathrm{g}$: Susceptible persons with family members or friends etc.  \nW$_\\mathrm{q}$: Waiting patients with self-quaranting  \nW$_\\mathrm{g}$: Waiting patients with family members or friends etc.  \nI$_\\mathrm{q}$: Confimered and un-recovered patients with self-quaranting  \nI$_\\mathrm{g}$: Confimered and un-recovered patients with family members or friends etc.  \nI$_\\hat{\\mathrm{q}}$: Confimered and un-recovered patients who was hospitalized  \nE$^\\ast$: Just after being exposed to the virus  \nR$^\\ast$: Being exposed to the virus, fighted with the virus, recovered and immuned without confirmation  ","a45ccd33":"**Thus, slope of $\\log S_{(R)}$ will be changed when SIR-F parameters are changed. We need to split the actual data, considering the change points of S-R line in log-scale. This logic will be used for actual data in scenario analysis section.**","b69247f3":"The prefecture where the highest number of currently infected cases was chronologically changed as follows.","806a4330":"**We will find the time-points, assuming that there are three change points.**","454dd930":"Original: https:\/\/www.kaggle.com\/lisphilar\/covid-19-data-with-sir-model  \n\nSe agrega an\u00e1lisis para Argentina    -> [Scenario in Argentina](#77)\n","dcaf28fc":"### Example of non-dimensional SIR model\nFor example, set $R_0 = 2.5, \\rho=0.2$ and initial values $(x_{(0)}, y_{(0)}, z_{(0)}) = (0.999, 0.001, 0)$.","7cd3c2c1":"In 30 days,","6de7389f":"# Scenario in India<a id=\"12\"><\/a>\nIn this section, we will perform scenario analysis using the records of India.","33df6918":"$x$ is","fc81a89f":"### $g_s$ before the lockdown\nWe will estimate average number peple go out using @marcoferrante estimation table and population pyramid data.\nIt is necessary to replace the population pyramid data for Italy because the situation is different from the average data.","95cc4341":"### 2nd phase","164acb33":"## S-R plane\nHere, we will discuss the replationship of Susceptible and Recovered.","bc937923":"### In Mar2020\n * 01Mar2020: $\\tau$ definition was changed. $1\\leq \\tau \\mathrm{[hour]} \\leq 24$ $\\to$ $1\\leq \\tau \\mathrm{[min]} \\leq 1440$ \n * 01Mar2020: Added \"Test of hyperparameter optimization using example data\" in SIR model section\n * 02Mar2020: Analysis of Linelist (estimation of Effective contact\/Recovery\/Death rate using case reports)\n * 03Mar2020: Trend analysis\n * 03Mar2020: Update estimator error function; Exponential Weighted Moving Average (span=14days) of |observed - estimated|\n * 04Mar2020: \"Analysis of Linelist\" was moved to [EDA of linelist](https:\/\/www.kaggle.com\/lisphilar\/eda-of-linelist?scriptVersionId=29640733#Remarks)\n * 04Mar2020: Data in Hubei and China will be analysed in another notebook. Please refer to [Data in China with SIR model](https:\/\/www.kaggle.com\/lisphilar\/data-in-china-with-sir-model?scriptVersionId=29646940).\n * 06Mar2020: Random seed was fixed as 2019\n * 06Mar2020: Update estimator error function; Weighted Average of |Exponential Weighted Moving Average (span=14days) of observed - estimated|\n * 07Mar2020: Update estimator error function; Total population $\\times$ Wighted Average of |observed - estimated| with step number t\n * 07Mar2020: Priorities of variables in estimator error function was set as $(x, y, z, w) = (1, 10, 10, 1)$ in SIR-F model.\n * 09Mar2020: Update estimator error function; $(\\mathrm{Population})^2$ $\\times$ (Wighted Average of |observed - estimated|\/[observed $\\times$ Population + 1] with step number t)\n * 09Mar2020: Priorities of variables in estimator error function were set as $(x, y, z, w) = (1, 10, 10, 2)$ in SIR-F model.\n * 11Mar2020: Update model.param_dict(); each parametor range was limited to 30%-70% quantiles of the estimated values ($\\frac{\\mathrm{d}z}{\\mathrm{d}t}\\left(\\frac{1}{y}\\right)$ for $\\sigma$) of training dataset.\n * 12Mar2020: Update model.param_dict(); each parameter range was limited to 5%-95% quantiles\n * 12Mar2020: Detailed scenario analysis. Thank you, Marco Ferrante!\n * 13Mar2020: Update model.param_dict(); each parameter range was limited to 0%-100% quantiles\n * 13Mar2020: Update \"Detailed scenario analysis\" > \"Real factors of effective contact rate $\\beta$\"\n * 14Mar2020: Update model.param_dict(); rho\/sigma range was limited to 30%-70% quantiles of their estimated values\n * 14Mar2020: Applied trend analysis on country level data to use only a part of records for estimation\n * 14Mar2020: Recovered without confirmation was added to \"Real factors of effective contact rate $\\beta$\"\n * 15Mar2020: Merge \"How to minimize the damage (Change of parameter, Vacctination)\" with \"Scenario analysis\" section\n * 15Mar2020: Update Estimator, int to np.int. Thank you Enrico Papalini!\n * 15Mar2020: Update Estimator, some parameters can be fixed. Some of SIR parameters can be applied to SIR-F model.\n * 17Mar2020: The number of exposed cases and waiting cases\n * 17Mar2020: Update Scenario analysis\n * 18Mar2020: Scenario analysis in Italy\n * 19Mar2020: Estimation of new drugs effect in \"Scenario analysis in Italy\" section\n * 29Mar2020: Grouping of countries by growth factor\n * 29Mar2020: Update \"Scenario in Italy\" section to include confirmed national lockdown effect","6428fc2c":"Let's apply this value to the go_out table!  \nWe assume that workers go to their office one day in a week.","64b30622":"### Max value of go-out index to meet the goal","106f3139":"### External resources\n* Population pyramid: [PopulationPyramid.net](https:\/\/www.populationpyramid.net\/) licensed under [Creative Commons license CC BY 3.0](https:\/\/creativecommons.org\/licenses\/by\/3.0\/)\n* Movility report in Italy: [COVID-19 Mobility Monitoring project](https:\/\/covid19mm.github.io\/) licenced under [Creative Commons license CC BY 4.0](https:\/\/creativecommons.org\/licenses\/by\/4.0\/)\n* Movility reports: [Google: COVID-19 Community Mobility Reports](https:\/\/www.google.com\/covid19\/mobility\/)\n* Gomperz curve: [Jia, Lin, et al. \"Prediction and analysis of Coronavirus Disease 2019.\" arXiv preprint arXiv:2003.05447 (2020).](https:\/\/arxiv.org\/ftp\/arxiv\/papers\/2003\/2003.05447.pdf)\n\n(In Japanese)\n* Mobility: [Report of 1st survey by Ministry of Health, Labor and Welfare & LINE Corporation](https:\/\/www.mhlw.go.jp\/stf\/newpage_10695.html)  \n* Mobility: [Detailed report of 1st survey by Ministry of Health, Labor and Welfare & LINE Corporation](https:\/\/www.mhlw.go.jp\/stf\/newpage_10798.html)\n* @ClusterJapan (expert team to prevent COVID-19 outbreak in Japan) comments: [Twitter @ClusterJapan on 11Apr2020](https:\/\/twitter.com\/ClusterJapan\/status\/1248884086581514242?s=20)\n* Gomperz curve: [(In Japanese) \u30b4\u30f3\u30da\u30eb\u30c4\u66f2\u7dda\u3068\u306f\u4f55\u304b\uff1f\uff083\uff09](https:\/\/qiita.com\/BMJr\/items\/4e2782e8f1d3c1db6801)","1bf74372":"The current value of $R_t$ is","18c3047a":"Curve fitting with Gamma distribution curve is done by Bill Holst. Please find the URLs in [\"Acknowledgement\" subsection](#3).","e63471a7":"## Group 2: Stopping, growth factor $<$ 1 for the last 7 days","58f616e3":"This leads to","c3f1d6eb":"## $\\Delta$Confirmed vs. Confirmed in log-log plot\nThe numer of new confirmed cases $\\Delta C$ can be desribed as,\n\\begin{align*}\n\\Delta C=N^{-1}\\beta (N - C) I\n\\end{align*}\nThis is because $C=I+R+F$ and $S=N-C$ in SIR-F model.","e9998635":"# Scenario in Italy<a id=\"7\"><\/a>\nIn this section, we will perform scenario analysis using the records of Italy.","4ed0dc38":"## $\\bar{h}$ and $\\bar{s}$ value AFTER actions are taken\nAssumtions of new medicines:  \n\"Protease inhibitor\" inhibits virus multiplication. This will reduce $\\bar{h}$. We assume that $\\bar{h}$ will be 10% of $\\bar{h}_{before}$.","cf18a9cc":"Acccoring the report, we assume average reduction of potential encounters ($c$[-]) of 19%.","d46cf1f0":"Note: This seems Gamma distribution curve.\n\\begin{align*}\nf(x>0) & = \\cfrac{\\lambda^{k}}{\\Gamma(k)} x^{k-1} e^{-\\lambda x}  \\\\\n\\Gamma(k) & = \\int_{0}^{\\infty} t^{k-1} e^{-t} dt\n\\end{align*}","27ff02b4":"New medicines result in:  \n* reduction of max value of Infected,\n* reduction of Fatal, and\n* shortened period with COVID-19.","b6076759":"At the last record, infected cases are mainly in the prefectures with large population.","09a981af":"**Here, we will predict the effect of school closure (started before 04Mar2020), lockdown on 13Mar2020 with assumtion that the effect will be shown from the start date of 3rd phase.**","a30c6363":"## S-R Trend analysis","76a586ee":"In a week,","4be4ce1b":"## Effect of expected new medicines\nNew medicines are necessary so that patients can recover more quicky from the disease. Drug repositioning strategy (i.e.finding effective candidates from library of existing drugs of different diseases) is used to develop the medicines of COVID-19. For example, Remdesivir (USAN) and Favipiravir (AVIGAN) are candidates. \n\n* KEGG DRUG DATABASE: [Remdesivir (USAN)](https:\/\/www.kegg.jp\/dbget-bin\/www_bget?dr:D11472), Antiviral.\n* KEGG DRUG DATABASE: [Favipiravir (AVIGAN)](https:\/\/www.kegg.jp\/dbget-bin\/www_bget?dr:D09537), efficancy is Antiviral, RNA replicase inhibitor.\n\nCertainly, Favipiravir (AVIGAN) may lead many serious adverse reactions and it cannot be provided to expectant mothers [KEGG database AVIGAN](https:\/\/www.kegg.jp\/medicus-bin\/japic_med?japic_code=00066852) (Sorry, this is written in Japanese). However, it may help to save many thousand lives.  ","d60acb51":"In 30 days,","42ebd01f":"Then,\n\\begin{align*}\n\\cfrac{\\mathrm{d}S}{\\mathrm{d}R} &= - \\cfrac{\\beta}{N \\gamma} S  \\\\\n\\end{align*}","05242097":"Vacctines result in:  \n* reduction of max value of Infected,\n* reduction of Fatal, and\n* shortened period with COVID-19.","d587da28":"### Example of non-dimensional SIR-F model\nFor example, set $R_0 = 2.5, \\theta=0.002, \\kappa=0.005, \\rho=0.2$ and initial values $(x_{(0)}, y_{(0)}, z_{(0)}, w_{(0)}) = (0.999, 0.001, 0, 0)$.","6f2d852e":"### Compare predicted number of confirmed cases","e4b00337":"## Why $\\sigma$ was decreased?","5a01eff4":"# Scenario in USA<a id=\"14\"><\/a>\nIn this section, we will perform scenario analysis using the records of USA (United States of America, US).","b67f5371":"### What is SIR-D model?\n* S: Susceptible\n* I: Infected\n* R: Recovered\n* D: Deaths\n\nModel:  \n\\begin{align*}\n\\mathrm{S} \\overset{\\beta  I}{\\longrightarrow}\\ & \\mathrm{I} \\overset{\\gamma}{\\longrightarrow} \\mathrm{R}  \\\\\n& \\mathrm{I} \\overset{\\alpha}{\\longrightarrow} \\mathrm{D}  \\\\\n\\end{align*}\n\n$\\alpha$: Mortality rate [1\/min]  \n$\\beta$: Effective contact rate [1\/min]  \n$\\gamma$: Recovery rate [1\/min]  \n\nOrdinary Differential Equation (ODE):\n\\begin{align*}\n& \\frac{\\mathrm{d}S}{\\mathrm{d}T}= - N^{-1}\\beta S I  \\\\\n& \\frac{\\mathrm{d}I}{\\mathrm{d}T}= N^{-1}\\beta S I - (\\gamma + \\alpha) I  \\\\\n& \\frac{\\mathrm{d}R}{\\mathrm{d}T}= \\gamma I  \\\\\n& \\frac{\\mathrm{d}D}{\\mathrm{d}T}= \\alpha I  \\\\\n\\end{align*}\n\nWhere $N=S+I+R+D$ is the total population, $T$ is the elapsed time from the start date.","6e737ebf":"The number of currently infected cases will peak on","069e6686":"## The number of days go out (template data)\n**As a comment of this notebook, @marcoferrante estimated the number of days persons of each age group usually go out. Thank you for your kind cooperation!!**","5bb87faf":"## Data cleaning: Linelist (COVID19_open_line_list.csv)","75849b65":"### Estimation of $g_s$ after school closure\/lockdown\nHere, we estimate the $g_s$ after school closure\/lockdown with the assumption that only $g_s$ and $c$ was changed.   \n\nBecause\n$$\\cfrac{\\rho_{\\mathrm{after}}}{gs_{\\mathrm{after}}\\times c_{\\mathrm{after}}} = \\cfrac{\\rho_{\\mathrm{before}}}{gs_{\\mathrm{before}}\\times c_{\\mathrm{before}}}$$\n\n$gs_{\\mathrm{after}}$ is","55fe6534":"## Phases in India\nWe will use the change points as the start date of phases. For each phase, will apply SIR-F model. $\\tau$ values will be the same value.","95ebde23":"Measures taken in Italy are shown here.","eb44f78f":"## Acknowledgement<a id=\"3\"><\/a>\n### Datasets in kaggle\n* The number of cases: [Novel Corona Virus 2019 Dataset](https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset)\n* Total population: [covid19-global-forecasting-locations-population](https:\/\/www.kaggle.com\/dgrechka\/covid19-global-forecasting-locations-population\/metadata)\n* Population pyramid: [Population Pyramid 2019](https:\/\/www.kaggle.com\/hotessy\/population-pyramid-2019)\n* Mesaures in each country: [COVID-19 containment and mitigation measures](https:\/\/www.kaggle.com\/paultimothymooney\/covid19-containment-and-mitigation-measures)\n* Measures in Italy: [COVID-19 Prevention in Italy](https:\/\/www.kaggle.com\/marcoferrante\/covid19-prevention-in-italy)\n\n#### Datasets created by the notebook auther\n[COVID-19 dataset in Japan](https:\/\/www.kaggle.com\/lisphilar\/covid19-dataset-in-japan)\n* The number of cases in Japan: PCR-tested, with\/without symptoms, mild\/severe, hospitalized or not etc.\n* The number of cases at prefecture level: PCR-test, confirmed, discharged, fatal\n* Basic information of each prefecture: Population, area, the number of beds\n\nData is from HP of Ministry of Health, Labour and Welefare, Japan:  \n[Ministry of Health, Labour and Welefare HP (in Japanese)](https:\/\/www.mhlw.go.jp\/)  \n[Ministry of Health, Labour and Welefare HP (in English)](https:\/\/www.mhlw.go.jp\/english\/)  \n[COVID-19 Japan \u90fd\u9053\u5e9c\u770c\u5225 \u611f\u67d3\u75c7\u75c5\u5e8a\u6570 (CC BY)](https:\/\/code4sabae.github.io\/bedforinfection\/)  \n[Wikipedia](https:\/\/ja.wikipedia.org\/wiki\/)  ","a86bafdd":"## Phases in Italy\nWe will use the change points as the start date of phases. For each phase, will apply SIR-F model. $\\tau$ values will be the same value.","e3330543":"## Package","5c45c1ff":"### Compare predicted number of confirmed cases","925bdd9d":"For each country, population pyramid data will be combined to the table. The columns with countriy names are the portion of the total population.","3f7cea33":"The number of cases who are waiting for hospitalization was sharply increased after the start date of 23rd phase.  this needs futher investigation.","6fa1d3b5":"**As a example, we will predict the impact of lockdown. The number of days in a week susceptible persons go out, $g_s$, will be minimized.**","90c8d8a2":"When $\\Delta C$ shows max value of $\\Delta C$ in \"Example 5\" dataset (equal to SIR-D model), $t$ and $C(t)$ is","dfbcfc3a":"## SIR-D model\nBecause we are measuring the number of fatal cases and recovered cases separately, we can use two variables (\"Recovered\" and \"Deaths\") instead of \"Recovered + Deaths\" in the mathematical model.","9ecb626f":"In a week,","30dbc84c":"## Predict the number of cases: with actions from 15th day\nThere is a delay between the time point of starting actions and that of appearing the effect. Because $I$ is the main variable, the length of delay can be estimated as sum of latent period and waiting time for confirmation. This value [day] was calculated in \"SIR-F with exposed\/waiting cases\" section.","0b6bba69":"$R_t$ will be","e8b47d01":"### Compare parameters","7871b9f0":"There is an inflection point of y (the number of currentry infected cases per total population). At this point, value of x (the number of susceptible cases per total population) is nearly equal to $\\frac{1}{R_0}$.","27d5a7ad":"In 30 days,","2880a89a":"### $g_s$ value AFTER actions are taken\nWe will assume the following situation (lockdown) here.\n* All schools are closed\n* offices are closed and 50% of people works remotely.\n* People will go out one day for other reasons instead of going to school\/office.","2006a351":"**We will find the time-points, assuming that there are three change points.**","88871801":"Plots of Actual data do not show a line. This means SIR-F parameters changed at some time-points. Next, we will find the time-points, assuming that there are three change points.","05291436":"**We will find the time-points, assuming that there are three change points.**","64904234":"### Max value of $p$ to meet the goal","9d5326f0":"The actions result in:  \n* reduction of max value of Infected,\n* delay of peak point (argmax) of Infected, and\n* extention of period with COVID-19.","d99e9ec7":"With lockdown from 15th day:","7f432cc6":"Check the $g_s$ value calculated with the table.","eb7c92f0":"**We will find the time-points, assuming that there are three change points.**","55159fef":"## Data Cleening: the number of cases\nNote: \"Infected\" = \"Confirmed\" - \"Deaths\" - \"Recovered\"","bd12f607":"$f_2 = 1 - \\bar{h}\\ \\bar{s}$  \n\n$\\bar{h}$: Rate of I whose immune systems does NOT overcame virus multiplication [-]  \n$\\bar{s}$: Rate of I$^\\star$ who have severe events, including respiratory failure  [-]  \n$L_i$: Inverse of F$^\\star$'s mortality rate for people $i$ years old [min]  \n$l_i$: Inverse of R$^\\star$'s mortality rate for people $i$ years old [min]  \n$P_i$: The number of people $i$ years old [-]  \n$N$: Total population  \n\n\\begin{align*}\n& \\alpha_2 = \\cfrac{\\bar{h}\\ \\bar{s}}{N} \\sum_{n=0}^{\\infty}\\cfrac{P_{i}}{L_i} \\\\\n& \\gamma = \\cfrac{1 - \\bar{h}\\ \\bar{s}}{N} \\sum_{n=0}^{\\infty}\\cfrac{P_{i}}{l_i} \\\\\n\\end{align*}","94323bc6":"## Measures in Italy","44ac927e":"## Measures in each country","87205fe9":"### Package for SIR analysis\nI published a Python package for this analysis in GitHub.\n1. Data visualization and data arrangement\n    * Plotting, data selection at country\/province level, data arrangement for math models.\n2. Data cleaning\n3. S-R Trend analysis with Optuna and scipy.optimize.curve_fit\n4. Numerical simulation of ODEs with scipy.integrate.solve_ivp\n5. Description of math models\n    - Basic class of math models, SIR, SIR-D, SIR-F, SIR-FV and SEWIR-F model.\n6. Parameter Estimation of math models with Optuna and numerical simulation\n7. Prediction of the number of cases with numerica simulation\n8. Scenario analysis\n    - Wrapper class of the above","f23913ae":"## Total population","0a233934":"### What is SIR-F model?\n* S: Susceptible\n* S$^\\ast$: Confirmed and un-categorized\n* I: Confirmed and categorized as I\n* R: Recovered\n* F: Fatal with confirmation\n\nMeasurable variables:  \nConfirmed = $I+R+F$  \nRecovered = $R$  \nDeaths = $F$  \n\nModel:  \n\\begin{align*}\n\\mathrm{S} \\overset{\\beta I}{\\longrightarrow} \\mathrm{S}^\\ast \\overset{\\alpha_1}{\\longrightarrow}\\ & \\mathrm{F}    \\\\\n\\mathrm{S}^\\ast \\overset{1 - \\alpha_1}{\\longrightarrow}\\ & \\mathrm{I} \\overset{\\gamma}{\\longrightarrow} \\mathrm{R}    \\\\\n& \\mathrm{I} \\overset{\\alpha_2}{\\longrightarrow} \\mathrm{F}    \\\\\n\\end{align*}\n\n$\\alpha_1$: Mortality rate of S$^\\ast$ cases [-]  \n$\\alpha_2$: Mortality rate of I cases [1\/min]  \n$\\beta$: Effective contact rate [1\/min]  \n$\\gamma$: Recovery rate [1\/min]  \n\nNote: When $\\alpha_1 = 0$, SIR-F model is the same as SIR-D model.\n\nOrdinary Differential Equation (ODE):   \n\\begin{align*}\n& \\frac{\\mathrm{d}S}{\\mathrm{d}T}= - N^{-1}\\beta S I  \\\\\n& \\frac{\\mathrm{d}I}{\\mathrm{d}T}= N^{-1}(1 - \\alpha_1) \\beta S I - (\\gamma + \\alpha_2) I  \\\\\n& \\frac{\\mathrm{d}R}{\\mathrm{d}T}= \\gamma I  \\\\\n& \\frac{\\mathrm{d}F}{\\mathrm{d}T}= N^{-1}\\alpha_1 \\beta S I + \\alpha_2 I  \\\\\n\\end{align*}\n\nWhere $N=S+I+R+F$ is the total population, $T$ is the elapsed time from the start date.","4157ba1b":"### Example of non-dimensional SEWIR-F model\nFor example, set $\\theta=0.002, \\kappa=0.005, \\rho_1=0.2, \\sigma=0.08$ and initial values $(x_{1(0)}, x_{2(0)}, x_{3(0)}, y_{(0)}, z_{(0)}, w_{(0)}) = (0.994, 0.003, 0.002, 0.001, 0, 0)$.","7e74a200":"## S-R Trend analysis","fd47ebd2":"$\\cfrac{\\rho_{after}}{\\rho_{before}}$ is","20962714":"## Control factors of effective contact rate $\\beta_1$\nPlease reconsider S $\\overset{\\beta_1 (W+I)}{\\longrightarrow}$ E formula. Susceptible persons may contact with waiting\/confirmed patients, and susceptible persons will be infected with COVID-19. The formura can be replaced with  \n\\begin{alignat}{1}\n{\\mathrm{S}}_{\\mathrm{q}} & \\overset{g_{s}}{\\Longleftrightarrow} {\\mathrm{S}}_{\\mathrm{g}} \\overset{f_1}\n {\\longrightarrow} \\ & \\mathrm{E}^\\ast \\overset{e^{-h_2}}{\\longrightarrow} \\mathrm{E}   \\\\\n& & \\mathrm{E}^\\ast \\overset{1-e^{-h_2}}{\\longrightarrow} \\mathrm{R}^\\ast  \\\\\n\\mathrm{W}_\\mathrm{q} & \\overset{g_w}{\\Longleftrightarrow} \\mathrm{W}_{\\mathrm{g}}  \\\\\n\\mathrm{I}_\\mathrm{q} & \\overset{g_i}{\\Longleftrightarrow} \\mathrm{I}_{\\mathrm{g}}  \\\\\n\\mathrm{I}_\\mathrm{q} & \\overset{q}{\\longrightarrow} \\mathrm{I}_{\\hat{\\mathrm{q}}}  \\\\\n\\end{alignat}","83d9972b":"**It seems that (quaranitine of person contacted with positive patients), school closure and lockdown reduced $\\rho$ value.**","656a815e":"### Value of control factors of $\\beta_1$ before\/after the national lockdown\nA national lockdown will effect on $g_s$ and $c$.","ed66a651":"Note:  \nThis idea is from [Balkew, Teshome Mogessie, \"The SIR Model When S(t) is a Multi-Exponential Function.\" (2010).Electronic Theses and Dissertations.Paper 1747.](https:\/\/dc.etsu.edu\/cgi\/viewcontent.cgi?article=3102&context=etd) This is for simplest SIR model, but we can apply it to SIR-F model.","37ccd2e0":"Let's see the plot of S-R trend.","29a66c09":"In addition, $I$ is determined by $C$ when the parameters $(\\alpha_1, \\alpha_2, \\beta, \\gamma)$ are fixed.  \nThen,\n$$\\Delta C = f(C)$$","97e8ff5a":"Nete: Because $C(t)$ is a cummurative number, $C(t+\\Delta t) \\geq C(t)$ for all $t$ and $\\Delta t > 0$.","71fa9e9e":"### Max value of $\\gamma$ to meet the goal","269f8cba":"## Impact on $\\gamma$ and $\\alpha_2$\nActions to take:  \nNew Protein inhibitor medicine was introduced.","c2917df8":"### Compare parameters","8aeaec0c":"Trajectory of the number of cases and peak date will be","c4d0e190":"## List of dataset","c3a97aa9":"## Predict the future with the last parameters","06e38265":"### References and reading materials\n\n#### Papers\n* Basic reproduction number: [Van den Driessche, P., & Watmough, J. (2002).](https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC6002118\/)\n* Curve fitting with Logistic function and Gompertz function: [Jia, Lin, et al., 2020.](https:\/\/arxiv.org\/ftp\/arxiv\/papers\/2003\/2003.05447.pdf)\n* S-R place: [Balkew, Teshome Mogessie, \"The SIR Model When S(t) is a Multi-Exponential Function.\" (2010).Electronic Theses and Dissertations.Paper 1747](https:\/\/dc.etsu.edu\/cgi\/viewcontent.cgi?article=3102&context=etd)\n* Un-controlled clinical study of Remdesivir: [Grein, Jonathan, et al., 2020](https:\/\/www.nejm.org\/doi\/full\/10.1056\/NEJMoa2007016?query=RP)\n\n#### KEGG\n* KEGG DRUG DATABASE: [Remdesivir (USAN)](https:\/\/www.kegg.jp\/dbget-bin\/www_bget?dr:D11472)\n* KEGG DRUG DATABASE: [Favipiravir (AVIGAN)](https:\/\/www.kegg.jp\/dbget-bin\/www_bget?dr:D09537)\n* Medical package insert of AVIGAN (In Japanese): [KEGG database \"AVIGAN\"](https:\/\/www.kegg.jp\/medicus-bin\/japic_med?japic_code=00066852)\n\n#### Kaggle\nCurve fitting with Gamma PDF etc. by [Bill Holst](https:\/\/www.kaggle.com\/wjholst). \n* [COVID-19 Growth Patterns in Critical Countries](https:\/\/www.kaggle.com\/wjholst\/covid-19-growth-patterns-in-critical-countries#Gaussian-Approximation-of-Active-Cases)\n* [COVID-19 - Growth of Virus in Specific Countries](https:\/\/www.kaggle.com\/wjholst\/covid-19-growth-of-virus-in-specific-countries#Gaussian-Approximation-of-Active-Cases)\n* [Prediction With a Gamma PDF](https:\/\/www.kaggle.com\/wjholst\/prediction-with-a-gamma-pdf)\n\n#### YouTube\n* Growth Factor: [YouTube \"Exponential growth and epidemics\"](https:\/\/www.youtube.com\/watch?v=Kas0tIxDvrg)\n* Physical distancing (social distancing): [YouTube \"Simulating an epidemic\"](https:\/\/www.youtube.com\/watch?v=gxAaO2rsdIs)\n* $\\Delta$Confirmed vs. Confirmed plot: [YouTube: How To Tell If We're Beating COVID-19](https:\/\/www.youtube.com\/watch?v=54XLXg4fYsc)\n\n#### Other online resources\n* Simple SIR model: [The SIR epidemic model](https:\/\/scipython.com\/book\/chapter-8-scipy\/additional-examples\/the-sir-epidemic-model\/)\n* SEIR model: [Introduction to SEIR model Models](http:\/\/indico.ictp.it\/event\/7960\/session\/3\/contribution\/19\/material\/slides\/)\n* Basic reproduction number: [Estimating the Impact of a Pathogen via Monte Carlo Simulation](https:\/\/towardsdatascience.com\/infection-modeling-part-1-87e74645568a)\n* RMSLE score: [What\u2019s the Difference Between RMSE and RMSLE?](https:\/\/medium.com\/analytics-vidhya\/root-mean-square-log-error-rmse-vs-rmlse-935c6cc1802a)\n","55b9958e":"# SIR-F with exposed\/waiting cases<a id=\"5\"><\/a>\nThe number of exposed cases in latent period (E) and wating cases for confirmation (W) are un-measurable variables, but key variables as well as S, I, R, F. If E and W are large, outbreak will occur in the near future. Let's replace S $\\overset{\\beta I}{\\longrightarrow}$ S$^\\ast$ with S $\\overset{\\beta_1 (W+I)}{\\longrightarrow}$ E $\\overset{\\beta_2}{\\longrightarrow}$ W $\\overset{\\beta_3}{\\longrightarrow}$ S$^\\ast$ because W also has infectivity.\n\nNote:  \nW and some rules were added to explain COVID-19 dataset, but this is like-SEIR model.  \nTo study general SEIR-model, please refer to PDF material in [Introduction to SEIR model Models](http:\/\/indico.ictp.it\/event\/7960\/session\/3\/contribution\/19\/material\/slides\/).","9eed6277":"Un-controlled clinical study of Remdesivir from 25Jan2020 to 07Mar2020:  \nAccording to [Grein, Jonathan, et al., 2020](https:\/\/www.nejm.org\/doi\/full\/10.1056\/NEJMoa2007016?query=RP), 10-day course of Remdesivir administration (200 mg at day 1 followed by 100 mg daily) with median foloow-up of 18 days were performed.  \n\n53 patients in the full analysis set were those with confirmed infection and had oxygen satulation of 94% or less while they were breathing ambient air or receiving oxygen support. They are from USA (22 patients), Europe\/Canada (22 patients) and Japan (9 patients). 36 patients (68%) showed clinical improvement. 25 patients (47%) was discharged, 7 patients (13%) deceased.\n\nclinical trial with placebo is necessary for evaluation, but we can assume $\\gamma$ and $\\alpha$ as follows. (This estimation is not refered in this paper. This just a rough evaluation.)\n<!--\n\\begin{align*}\n& \\kappa \\tau^{-1} = \\alpha_2 = \\cfrac{\\bar{h}\\ \\bar{s}}{N} \\sum_{n=0}^{\\infty}\\cfrac{P_{i}}{L_i} \\\\\n& \\sigma \\tau^{-1} = \\gamma = \\cfrac{1 - \\bar{h}\\ \\bar{s}}{N} \\sum_{n=0}^{\\infty}\\cfrac{P_{i}}{l_i} \\\\\n\\end{align*}\n$\\bar{h}$: Rate of I whose immune systems does NOT overcame virus multiplication [-]  \n$\\bar{s}$: Rate of I$^\\star$ who have severe events, including respiratory failure  [-]  \n$L_i$: Inverse of F$^\\star$'s mortality rate for people $i$ years old [min]  \n$l_i$: Inverse of R$^\\star$'s mortality rate for people $i$ years old [min]  \n$P_i$: The number of people $i$ years old [-]  \n$N$: Total population  \n-->","6c8300ba":"## Estimate SIR-F parameters","b2dbe721":"### 1st phase","260cedc7":"With constant $a=\\frac{\\beta}{N\\gamma}$ and constant $b=\\log N$,\n$$\n\\log S_{(R)} = - a R + b\n$$","3acc3fc0":"## Phases in New Zealand\nWe will use the change points as the start date of phases. For each phase, will apply SIR-F model. $\\tau$ values will be the same value.","e660191e":"## S-R Trend analysis","7c11eadd":"## SIR-F model\nIt is reported that some cases died before clinical diagnosis of COVID-19. To consider this issue, \"S + I $\\to$ Fatal + I\" will be added to the model.","2ad32e66":"## Non-dimensional SEWIR-F model\nSet $(S, E, W, I, R, F) = N \\times (x_1, x_2, x_3, y, z, w)$, $(T, \\alpha_1) = (\\tau t, \\theta)$ and $(\\alpha_2, \\beta_i, \\gamma) = \\tau^{-1} \\times (\\kappa, \\rho_i, \\sigma)$.  \nThis results in the ODE  \n\\begin{align*}\n& \\frac{\\mathrm{d}x_1}{\\mathrm{d}t}= - \\rho_1 x_1 (x_3 + y)  \\\\\n& \\frac{\\mathrm{d}x_2}{\\mathrm{d}t}= \\rho_1 x_1 (x_3 + y) - \\rho_2 x_2  \\\\\n& \\frac{\\mathrm{d}x_3}{\\mathrm{d}t}= \\rho_2 x_2 - \\rho_3 x_3  \\\\\n& \\frac{\\mathrm{d}y}{\\mathrm{d}t}= (1-\\theta) \\rho_3 x_3 - (\\sigma + \\kappa) y  \\\\\n& \\frac{\\mathrm{d}z}{\\mathrm{d}t}= \\sigma y  \\\\\n& \\frac{\\mathrm{d}w}{\\mathrm{d}t}= \\theta \\rho_3 x_3 + \\kappa y  \\\\\n\\end{align*}\n\nWhere $N$ is the total population and $\\tau$ is a coefficient ([min], is an integer to simplify).  \n\nThe range of variables and parameters:  \n\\begin{align*}\n0 < (x_i, y, z, w, \\theta, \\kappa, \\rho_i, \\sigma) < 1\\ \\mathrm{for}\\ i = 1, 2, 3\n\\end{align*}\n\\begin{align*}\n1 \\leq \\tau \\leq 1440\n\\end{align*}\n\nReproduction number can be defined as  \n\\begin{align*}\nR_0 = \\rho_1 (1-\\theta) (\\sigma + \\kappa)^{-1}\n\\end{align*}","c7c39bf0":"### Example of non-dimensional SIR-D model\nFor example, set $R_0 = 2.5, \\kappa=0.005, \\rho=0.2$ and initial values $(x_{(0)}, y_{(0)}, z_{(0)}, w_{(0)}) = (0.999, 0.001, 0, 0)$.","693435c5":"### Severity of the currently infected patients\nWe categoize the patient with severity as the following.\n* Grade1: Asymptomtic or mild symptoms, need self-quarantine at home or hotel\n* Grade2: Severity is unknown and need hospitalization for diagnosis\n* Grade3: Severe and need ICU","731cd095":"Then,\n\\begin{align*}\n& \\cfrac{1+9P_{after}}{1+9P_{before}} = \\cfrac{\\rho_{after}}{\\rho_{before}}\n\\end{align*}","e06be80f":"# S-R trend analysis<a id=\"10\"><\/a>\nIn the previous section, we found that parameter values can be changed by actions. To predict the future, we need to recognize the parameter change from the actual records. Here, trend analysis method will be introduced.","91873d87":"Comparison of observed values and estimated values is shown here.\n\nNote:  \nThis figures show the accuracy for each parameter. When \"v_observed\" and \"v_estimated\" (v=y, z, w) is overlapping, highly accurate.","e47a1dc6":"$f_1 = v(W_{\\mathrm{g}} + I_{\\mathrm{g}})(1-m)^2(1-w_e)^{w_n}e^{-h_1}sc$ [-] ","6c406b60":"## SIR model\nTo understand the trend of infection, we will use mathematical epidemic model. Let's start discussion using the simplest model named SIR.","2f9ec1d1":"## Change log<a id=\"11\"><\/a>","aa83c9a0":"To meet the goal, $P_{after}$ should be under","4c4daa71":"No actions:","5978b1ec":"### Dimensionalization\nHere, we will dimensionalize the data, assuming that start date is the first date of JHU dataset, $\\tau=1440$ [min] and total population $N=1,000,000$.","3bb96fad":"In a week,","639c0a13":"$P_{before}$ can be estimated as","32dd6264":"$g_s$ value is","188b81df":"# Scenario in Japan<a id=\"8\"><\/a>\nIn this section, we will perform scenario analysis using the records of Japan.","f4e14048":"No actions:","67fd7b10":"### Non-dimensional SIR-F model\nSet $(S, I, R, F) = N \\times (x, y, z, w)$ and $(T, \\alpha_1, \\alpha_2, \\beta, \\gamma) = (\\tau t, \\theta, \\tau^{-1} \\kappa, \\tau^{-1} \\rho, \\tau^{-1} \\sigma)$.  \nThis results in the ODE  \n\\begin{align*}\n& \\frac{\\mathrm{d}x}{\\mathrm{d}t}= - \\rho x y  \\\\\n& \\frac{\\mathrm{d}y}{\\mathrm{d}t}= \\rho (1-\\theta) x y - (\\sigma + \\kappa) y  \\\\\n& \\frac{\\mathrm{d}z}{\\mathrm{d}t}= \\sigma y  \\\\\n& \\frac{\\mathrm{d}w}{\\mathrm{d}t}= \\rho \\theta x y + \\kappa y  \\\\\n\\end{align*}\n\nWhere $N$ is the total population and $\\tau$ is a coefficient ([min], is an integer to simplify).  \n\nThe range of variables and parameters:  \n\\begin{align*}\n& 0 \\leq (x, y, z, w, \\theta, \\kappa, \\rho, \\sigma) \\leq 1  \\\\\n\\end{align*}\n\\begin{align*}\n& 1\\leq \\tau \\leq 1440  \\\\\n\\end{align*}\n\nReproduction number can be defined as  \n\\begin{align*}\nR_0 = \\rho (1 - \\theta) (\\sigma + \\kappa)^{-1} = \\beta (1 - \\alpha_1) (\\gamma + \\alpha_2)^{-1}\n\\end{align*}","56f026de":"## Effect of school closure and lockdown\n\nAcording to first report of [COVID-19 Mobility Monitoring project](https:\/\/covid19mm.github.io\/in-progress\/2020\/03\/13\/first-report-assessment.html) on 13Mar2020, the government of Italy declared a national lockdown on 09Mar2020 and all peole are asked to remain home. This resulted in average reduction of potential encounters of 19% during week 3 (from 07Mar2020 to 10Mar2020).","864e64b0":"Nete: Because $R(t)$ is a cummurative number, $R(t+\\Delta t) \\geq R(t)$ for all $t$ and $\\Delta t > 0$.","17f4b542":"\\begin{align*}\n& P_{after} = \\frac{1}{9}\\left[ \\cfrac{\\rho_{after}}{\\rho_{before}}(1+9P_{before}) - 1 \\right]\n\\end{align*}","c19e7bea":"## Conclusion\n(Will be updated)","e9c84f8e":"Estimated parameter values are shown here.","0cf4098f":"# Introduction\nThis notebook analyses the relationship of measures against COVID-19 (Coronavirus disease 2019) and the number of infected cases. The goal is to find measures which enables to settle the situation more quickly.\n\nWe will use SIR-F model that is a customized ODE model derived from SIR model. To evaluate the effect of measures, parameter estimation of SIR-F will be applied to subsets of time series data in each country. Parameter change points will be determined by S-R trend analysis. The details will be explained in \"Method\" part.\n\n** To accerate open data science of COVID-19, I started to I published the code as a package in [GitHub page: COVID-19 data with SIR model](https:\/\/github.com\/lisphilar\/covid19-sir). It is in the development stage, but it may be useful when you apply the models to the data in your country. When you use the codes, please cite this Kaggle notebook. If you find errors and ideas, please kindly tell me by commenting on this notebook or pull request in GitHub.**\n\n1. Preparation\n   * [Dataset and tools](#1)\n   * [Grouping by growth factor](#2)\n\n2. Method\n   * [SIR to SIR-F](#4)\n   * [SIR-F with exposed\/waiting cases](#5)\n   * [Factors of model parameters](#6)\n   * [S-R trend analysis](#10)\n\n3. Scenario analysis\n   * [Scenario in Argentina](#77)\n   * [Scenario in Italy](#7)\n   * [Scenario in Japan](#8)\n\n4. Monitoring\n   * [Scenario in India](#12)\n   * [Scenario in USA](#14)\n   * [Scenario in New Zealand](#15)\n\n5. Remarks\n   * [Conclusion](#9)\n   * [Acknowledgement](#3)\n   * [Change log](#11)\n\nNote:  \n\"Infected\" means the currently infected and confirmed cases.  \nThis can be calculated  as \"Confirmed\" - \"Deaths\" - \"Recovered\" in [COVID-19 Data Repository by CSSE at Johns Hopkins University](https:\/\/github.com\/CSSEGISandData\/COVID-19).","d02ea4e6":"### Non-dimensional SIR model\nTo simplify the model, we will remove the units of the variables from ODE.\n\nSet $(S, I, R) = N \\times (x, y, z)$ and $(T, \\beta, \\gamma) = (\\tau t, \\tau^{-1} \\rho, \\tau^{-1} \\sigma)$.  \n\nThis results in the ODE  \n\\begin{align*}\n& \\frac{\\mathrm{d}x}{\\mathrm{d}t}= - \\rho x y  \\\\\n& \\frac{\\mathrm{d}y}{\\mathrm{d}t}= \\rho x y - \\sigma y  \\\\\n& \\frac{\\mathrm{d}z}{\\mathrm{d}t}= \\sigma y  \\\\\n\\end{align*}\n\nWhere $N$ is the total population and $\\tau$ is a coefficient ([min], is an integer to simplify).  \n\nThe range of variables and parameters:  \n\\begin{align*}\n& 0 \\leq (x, y, z, \\rho, \\sigma) \\leq 1  \\\\\n\\end{align*}\n\\begin{align*}\n& 1\\leq \\tau \\leq 1440  \\\\\n\\end{align*}\n\nBasic reproduction number, Non-dimentional parameter, is defined as  \n\\begin{align*}\nR_0 = \\rho \\sigma^{-1} = \\beta \\gamma^{-1}\n\\end{align*}\n\nEstimated Mean Values of $R_0$:  \n$R_0$ (\"R naught\") means \"the average number of secondary infections caused by an infected host\" ([Infection Modeling \u2014 Part 1](https:\/\/towardsdatascience.com\/infection-modeling-part-1-87e74645568a)).  \n(Secondary data: [Van den Driessche, P., & Watmough, J. (2002).](https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC6002118))  \n2.06: Zika in South America, 2015-2016  \n1.51: Ebola in Guinea, 2014  \n1.33: H1N1 influenza in South Africa, 2009  \n3.5 : SARS in 2002-2003  \n1.68: H2N2 influenza in US, 1957  \n3.8 : Fall wave of 1918 Spanish influenza in Genova  \n1.5 : Spring wave of 1918 Spanish influenza in Genova  \n\nWhen $x=\\frac{1}{R_0}$, $\\frac{\\mathrm{d}y}{\\mathrm{d}t}=0$.\n<!--This means that the max value of confirmed ($=y+z$) is $1-\\frac{1}{R_0}$.-->","41629367":"So,\n\\begin{align*}\n& P_{after} = \\frac{1}{9}\\left[ \\cfrac{\\rho_{after}}{\\rho_{before}}(1+9P_{before}) - 1 \\right]\n\\end{align*}","8a3a488d":"### Prefectures where currently infected cases are\nMost of the currently infected cases are in Tokyo and Osaka as shown in the next figure.","3d9b8922":"With the assumption that $\\overline{\\beta}$ is constant,  \n\\begin{align*}\n& \\cfrac{\\beta_{before}}{1+9P_{before}} = \\cfrac{\\beta_{after}}{1+9P_{after}}\n\\end{align*}\n(\"Before\" means \"before the national emergency declaration on 06Apr2020.)","d10b409a":"Plots of $(x, y) = (C, \\Delta C)$ in log-log scale are shown in the next figure.  \n\nNote:  \nThis idea is from [YouTube: How To Tell If We're Beating COVID-19](https:\/\/www.youtube.com\/watch?v=54XLXg4fYsc). SIR-type models are not mentioned in this video, but we can link the idea with SIR-F model as above.","0fe6998c":"Values are here,","2c5190fb":"### Data provided by kagglers as a comment on this notebook\n* The number of days persons of each age group usually go out provided by [Marco Ferrante](https:\/\/www.kaggle.com\/marcoferrante)","c1c32d23":"Initial phase will be ignored in scenario analysis. The change points (start dates of phases) are","af7040af":"## Curve fitting of $C(t)$\n$C(t)$ is sometimes described by logistic function and Gompertz function.\n\n\\begin{align*}\n\\mathrm{Logistic\\ function:\\ } g(t) & = \\cfrac{N}{1 + A e^{-Bt}}  \\\\\n\\mathrm{Gompertz\\ function:\\ } h(t) & = N e^{-A e^{-Bt}}\n\\end{align*}\n\ncf.)  \nThese functions are used for prediction of the number of case in [Jia, Lin, et al., 2020](https:\/\/arxiv.org\/ftp\/arxiv\/papers\/2003\/2003.05447.pdf).  ","900399ed":"In the long-term,","c2523dea":"With the estimated the parameters, we can predict the number of cases. Vertical broken line indicates today.","5b6e0153":"### Compare parameters","997924bb":"In the long-term,","c0a53e87":"### Are new medicines are effective?","e8651d21":"### 2nd phase","1a468208":"In three 90 days,","e459d5a2":"$f(t)$ can be divided to to stages;\n* exponential growth function $(t \\leq \\mathrm{argmax}\\ \\Delta C(t))$ and\n* negative exponential function $(otherwise)$.\n\nWith constant $(a, b, A, B, C)$,\n$$\nf(t) = \\left\\{\n\\begin{array}{ll}\n    a e^{bt} & (t \\leq \\mathrm{argmax}\\ \\Delta C(t)) \\\\\n    C - Ae^{-Bt} & (otherwise)\n\\end{array}\n\\right.\n$$","d4398ec0":"### Change factor of $\\beta$\nJapan focuses on the rate of people in closed spaces\/crowd. We need to avoid business offices, meeting spaces, entertainment distincts, shopping malls etc.\n\nHere, we assume that $\\beta=\\tau^{-1}\\rho$ is\n\\begin{align*}\n& \\beta_{(p)} = \\overline{\\beta}(1-p) + \\beta^{\\ast}p\n\\end{align*}\nwhere  \n$\\overline{\\beta}$: effective contact rate in average [1\/min]  \n$\\beta^{\\ast}$: effective contact rate in closed spaces\/crowd [1\/min]  \n$p$: rate of people in closed spaces\/crowd [-]","ebba95ba":"## Why $\\rho$ is decreasing?\nJapan declared a state of emergency three times.\n* 07Apr2020 - 15APr2020: Only three metropolitan areas (Tokyo\/Kanagawa\/Saitama\/Chiba, Osaka\/Hyogo, Fukuoka)\n* 16Apr2020 - 06May2020: Nation-wide\n* 07May2020 - (31May2020): Nation-wide\n\nHowever, national\/city lock is not be done. Japan is mainly taking the following three actions.\n\n* Physical (social) distancing: to avoid closed spaces, crowd, conversation at close distance\n* Trace the link of patients and give tests on the linked persons preferentially\n* Maintain medical level to increase recovery rate and decrease mortality rate","135657db":"### 1st phase","53b97f4f":"## How to make way by 31May2020 for the number of cases peaking out","0bb53217":"### Dimensionalization\nHere, we will dimensionalize the data, assuming that start date is the first date of JHU dataset, $\\tau=1440$ [min] and total population $N=1,000,000$.","3dd07eec":"### Non-dimensional SIR-D model\nSet $(S, I, R, D) = N \\times (x, y, z, w)$ and $(T, \\alpha, \\beta, \\gamma) = (\\tau t, \\tau^{-1} \\kappa, \\tau^{-1} \\rho, \\tau^{-1} \\sigma)$.  \nThis results in the ODE  \n\\begin{align*}\n& \\frac{\\mathrm{d}x}{\\mathrm{d}t}= - \\rho x y  \\\\\n& \\frac{\\mathrm{d}y}{\\mathrm{d}t}= \\rho x y - (\\sigma + \\kappa) y  \\\\\n& \\frac{\\mathrm{d}z}{\\mathrm{d}t}= \\sigma y  \\\\\n& \\frac{\\mathrm{d}w}{\\mathrm{d}t}= \\kappa y  \\\\\n\\end{align*}\n\nWhere $N$ is the total population and $\\tau$ is a coefficient ([min], is an integer to simplify).  \n\nThe range of variables and parameters:  \n\\begin{align*}\n& 0 \\leq (x, y, z, w, \\kappa, \\rho, \\sigma) \\leq 1  \\\\\n\\end{align*}\n\\begin{align*}\n& 1\\leq \\tau \\leq 1440  \\\\\n\\end{align*}\n\nReproduction number can be defined as  \n\\begin{align*}\nR_0 = \\rho (\\sigma + \\kappa)^{-1} = \\beta (\\gamma + \\alpha)^{-1}\n\\end{align*}","2c5793f6":"### Dimensionalization\nHere, we will dimensionalize the data, assuming that start date is the first date of JHU dataset, $\\tau=1440$ [min] and total population $N=1,000,000$.","40a453c4":"### Compare predicted number of confirmed cases","901d3cf6":"With new medicines:","e2b34412":"### 1st phase"}}