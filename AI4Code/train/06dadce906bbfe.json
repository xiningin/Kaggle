{"cell_type":{"d7684921":"code","766073f7":"code","cc4c7792":"code","40dcd8c8":"code","6fbd3ed0":"code","697e70c8":"code","ff988b61":"code","463c92d9":"code","9ba2f994":"code","b98b6ed6":"code","5e112543":"code","ca6fe6b6":"code","d3b78908":"code","a899a39a":"code","87d40d8f":"code","a788f54c":"code","e31d0367":"code","69cca0e5":"code","9d0d865c":"code","9f30f7bb":"code","7156b7fe":"code","38419fbb":"code","909224f5":"code","659186a9":"code","cf46b213":"code","2bca6ccb":"code","b982be49":"code","e095ca69":"code","32226863":"code","6bf898ca":"code","807f2553":"code","a41e9eff":"code","d046c9ea":"code","72b385ae":"code","dab1c3f6":"code","50b8771e":"code","fcc8ad33":"code","ba5ed222":"code","33f941c3":"code","6804b046":"code","c07aeee5":"code","b2500138":"code","07495058":"code","7ea866eb":"code","d535742b":"code","ff45ea8b":"code","ebd2b2ad":"code","e6e7003f":"code","81e316f7":"code","e799a0b0":"code","53d242fe":"code","d27df31c":"code","ab2284b9":"code","d4984460":"code","936507df":"code","be608c37":"code","efe8f7c7":"code","7f566b58":"code","c5096c9a":"code","a686c2af":"markdown","910d01de":"markdown","a81e7441":"markdown","b96def9a":"markdown","a0040e24":"markdown","b4a120c8":"markdown","6eb934c3":"markdown","840203b8":"markdown","c2ed20db":"markdown","8bd2dd46":"markdown","92e3f7cb":"markdown","37943c6c":"markdown","b0d25e10":"markdown"},"source":{"d7684921":"import pandas as pd\nimport matplotlib.pyplot as plt \nimport numpy as np\nfrom scipy import stats\nfrom sklearn.impute import SimpleImputer \nfrom keras import models\nfrom keras import layers\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nimport seaborn as sns\nfrom sklearn import metrics\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import  Lasso, LassoCV,RidgeCV, Ridge\nfrom sklearn.linear_model import ElasticNet           \nfrom sklearn.svm import SVR\nfrom sklearn import svm","766073f7":"train=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","cc4c7792":"train.head()","40dcd8c8":"print(train.shape)\nprint(test.shape)","6fbd3ed0":"data=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","697e70c8":"data","ff988b61":"corr = data.corr()\ncorr.shape","463c92d9":"X = train[['MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearBuilt',\n             'YearRemodAdd', 'MasVnrArea', 'ExterQual', 'ExterCond','BsmtQual','BsmtCond', 'BsmtExposure' ,'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'CentralAir',\n             '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n             'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n             'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch',\n             'PoolArea', 'MiscVal', 'MoSold','YrSold', 'BsmtFinType1','BsmtFinType2', 'HeatingQC','KitchenQual',\n              'FireplaceQu','GarageFinish','GarageQual','GarageCond','PavedDrive', 'PoolQC','Fence'\n              ]]","9ba2f994":"Y = test[['MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearBuilt',\n             'YearRemodAdd', 'MasVnrArea', 'ExterQual', 'ExterCond','BsmtQual','BsmtCond', 'BsmtExposure' ,'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'CentralAir',\n             '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n             'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n             'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch',\n             'PoolArea', 'MiscVal', 'MoSold','YrSold', 'BsmtFinType1','BsmtFinType2', 'HeatingQC','KitchenQual',\n              'FireplaceQu','GarageFinish','GarageQual','GarageCond','PavedDrive', 'PoolQC','Fence'\n              ]]","b98b6ed6":"train.style.background_gradient(cmap='coolwarm', axis=None)","5e112543":"X_target = train[['SalePrice']]\nX","ca6fe6b6":"train['SalePrice'].describe()","d3b78908":"fig = plt.figure()\nax = fig.add_subplot()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","a899a39a":"label_1 = {'CentralAir' : {\"Y\": 1 , \"N\":0}}\nX.replace(label_1 , inplace= True)\nY.replace(label_1 , inplace= True)","87d40d8f":"label_2 = {'HeatingQC' : {\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(label_2 , inplace= True)\nY.replace(label_2 , inplace= True)","a788f54c":"label_3 = {'ExterQual' : {\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(label_3 , inplace= True)\nY.replace(label_3 , inplace= True)","e31d0367":"label_4 = {'ExterCond' : {\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(label_4 , inplace= True)\nY.replace(label_4 , inplace= True)\n","69cca0e5":"label_5 = {'BsmtQual' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(label_5 , inplace= True)\nY.replace(label_5 , inplace= True)","9d0d865c":"label_6 = {'BsmtCond' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(label_6 , inplace= True)\nY.replace(label_6 , inplace= True)\n","9f30f7bb":"label_7 = {'BsmtExposure' : {\"NA\":0,\"No\":1, \"Mn\":2, \"Av\":3, \"Gd\":4}}\nX.replace(label_7 , inplace= True)\nY.replace(label_7 , inplace= True)","7156b7fe":"label_8 = {'BsmtFinType1' : {\"NA\":0,\"Unf\":1, \"LwQ\":2, \"Rec\":3, \"BLQ\":4, \"ALQ\":5, \"GLQ\":6}}\nX.replace(label_8 , inplace= True)\nY.replace(label_8 , inplace= True)","38419fbb":"label_9 = {'BsmtFinType2' : {\"NA\":0,\"Unf\":1, \"LwQ\":2, \"Rec\":3, \"BLQ\":4, \"ALQ\":5, \"GLQ\":6}}\nX.replace(label_9 , inplace= True)\nY.replace(label_9 , inplace= True)","909224f5":"label_11 = {'KitchenQual' : {\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(label_11 , inplace= True)\nY.replace(label_11 , inplace= True)","659186a9":"label_12 = {'FireplaceQu' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(label_12 , inplace= True)\nY.replace(label_12 , inplace= True)","cf46b213":"label_13 = {'GarageFinish' : {\"NA\":0,\"Unf\":1, \"RFn\":2, \"Fin\":3}}\nX.replace(label_13 , inplace= True)\nY.replace(label_13 , inplace= True)\n","2bca6ccb":"label_14 = {'GarageQual' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(label_14 , inplace= True)\nY.replace(label_14 , inplace= True)","b982be49":"label_15 = {'GarageCond' : {\"NA\":0,\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5}}\nX.replace(label_15 , inplace= True)\nY.replace(label_15 , inplace= True)","e095ca69":"label_16 = {'PavedDrive' : {\"N\":0,\"P\":1, \"Y\":2}}\nX.replace(label_16 , inplace= True)\nY.replace(label_16 , inplace= True)","32226863":"label_17 = {'PoolQC' : {\"NA\":0, \"Fa\":1, \"TA\":2, \"Gd\":3, \"Ex\":4}}\nX.replace(label_17 , inplace= True)\nY.replace(label_17 , inplace= True)","6bf898ca":"label_18 = {'Fence' : {\"NA\":0, \"MnWw\":1, \"GdWo\":2, \"MnPrv\":3, \"GdPrv\":4}}\nX.replace(label_18 , inplace= True)\nY.replace(label_18 , inplace= True)","807f2553":"X","a41e9eff":"Y","d046c9ea":"print(X.shape)\nprint(Y.shape)","72b385ae":"train.isnull().sum()","dab1c3f6":"test.isnull().sum()","50b8771e":"ImputedModule = SimpleImputer(missing_values = np.nan, strategy = 'mean')\nImputedX = ImputedModule.fit(X)\nX = ImputedX.transform(X)\n\nImputedY = ImputedModule.fit(Y)\nY = ImputedX.transform(Y)","fcc8ad33":"mean = X.mean(axis=0)\nX -= mean\nstd = X.std(axis=0)\nX \/= std\n\nY -= mean\nY \/= std","ba5ed222":"def build_model():\n    model = models.Sequential()\n    model.add(layers.Dense(128, activation='relu', input_shape=(X.shape[1],)))\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(1))\n\n    model.compile(optimizer='rmsprop',\n              loss='mse',\n              metrics=['mae'])\n    return model","33f941c3":"# Create a Linear regressor\nl = LinearRegression()\n# Train the model \nl.fit(X, X_target) ","6804b046":"l.intercept_","c07aeee5":"y_predicted = l.predict(Y)\nprint(y_predicted.shape)","b2500138":"plt.scatter(train[\"Id\"], X_target, color = 'green') \nplt.plot(train[\"Id\"], l.predict(X), color = 'blue')  \nplt.title('ID vs Sale Price Training set') \nplt.xlabel('ID') \nplt.ylabel('Sale Price') \nplt.show()","07495058":"plt.scatter(test[\"Id\"], data[\"SalePrice\"], color = 'red') \nplt.plot(test[\"Id\"], l.predict(Y), color = 'green')  \nplt.title('ID vs Sale Price Testing set') \nplt.xlabel('ID') \nplt.ylabel('Sale Price') \nplt.show()","7ea866eb":"y_predicted","d535742b":"def performance(y, predicted):\n    print(\"MSE: \",np.sqrt(mean_squared_error(y, predicted))) \n    print(\"MAE: \", np.sqrt(mean_absolute_error(y, predicted))) \n    \nperformance(data[\"SalePrice\"], y_predicted)\n# or by using \n#print('MAE:',metrics.mean_absolute_error(data[\"SalePrice\"], y_predicted))\n#print('MSE:',metrics.mean_squared_error(data[\"SalePrice\"], y_predicted))","ff45ea8b":"c = SGDRegressor()\nc.fit(X, X_target)","ebd2b2ad":"plt.scatter(data[\"SalePrice\"],c.predict(Y), color = 'orange') \nplt.xlabel('Actual y')\nplt.ylabel('Predicted y')\nplt.title('ploting between actual y and predicted y')\nplt.show()","e6e7003f":"performance(data[\"SalePrice\"], c.predict(Y))","81e316f7":"LASSO = Lasso(max_iter = 100000, normalize = True)\nLASSOcv = LassoCV(alphas = None, cv = 10, max_iter = 100000, normalize = True)","e799a0b0":"LASSOcv.fit(X, X_target)\nLASSO.set_params(alpha=LASSOcv.alpha_)\nLASSO.fit(X, X_target)","53d242fe":"print(\"Alpha =\", LASSOcv.alpha_)\nperformance(data[\"SalePrice\"], LASSO.predict(Y))","d27df31c":"alpha = np.geomspace(1e-9, 5, num=100)\n\nridgecv = RidgeCV(alphas = alpha, scoring = 'neg_mean_squared_error', normalize = True)\nridgecv.fit(X, X_target)","ab2284b9":"ridge = Ridge(alpha = ridgecv.alpha_, normalize = True)\nridge.fit(X, X_target)","d4984460":"print(\"Alpha =\", ridgecv.alpha_)\nperformance(data[\"SalePrice\"], ridge.predict(Y))","936507df":"m = ElasticNet(alpha=0.1, l1_ratio=0.9, selection='random', random_state=42)\nm.fit(X, X_target)\n\ntest_pred = m.predict(Y)","be608c37":"performance(data[\"SalePrice\"], m.predict(Y))","efe8f7c7":"r = SVR(kernel='rbf', C=1000000, epsilon=0.001)\nr.fit(X, X_target)\ntest_pred = r.predict(Y)\nperformance(data[\"SalePrice\"], r.predict(Y))\n#or using \n#r = svm.SVR()\n#r.fit(X, X_target)\n#test_pred = r.predict(Y)\n#performance(data[\"SalePrice\"], r.predict(Y))","7f566b58":"m1= performance(data[\"SalePrice\"], y_predicted)\nm2=performance(data[\"SalePrice\"], c.predict(Y))\nm3=performance(data[\"SalePrice\"], LASSO.predict(Y))\nm4=performance(data[\"SalePrice\"], r.predict(Y))","c5096c9a":"models = pd.DataFrame({\n    'Model': ['Linear Regression', 'SGDRegressor', 'Ridge, Lasso, Elastic - Add proper regularization', 'SVM'],\n    'MAE': [238.5546810172625,222.90973597995287,231.88651646296967,167.57437250818518]})\nmodels.sort_values(by='MAE', ascending=True)","a686c2af":"SVM","910d01de":"Ridge, Lasso, Elastic - Add proper regularization","a81e7441":"Changing any 'Yes' or 'No' with 0 and 1 ","b96def9a":"The best performance model depending on MAE is \"SVM\" ","a0040e24":"comparision of all the models","b4a120c8":"SGDRegressor","6eb934c3":"**Loading Data**","840203b8":"Replacing The null values with the mean","c2ed20db":"Building the network","8bd2dd46":"Linear regression","92e3f7cb":"First check if there is a null values","37943c6c":"Choosing The numerical data","b0d25e10":"Normalizing The data"}}