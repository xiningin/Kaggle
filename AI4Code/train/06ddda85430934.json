{"cell_type":{"4470a7fb":"code","2ae74653":"code","2babe233":"code","efcea203":"code","c2fc2adf":"code","734a3f91":"code","944848bf":"code","386a9407":"code","0d040081":"code","7d28fd5e":"code","94bdcb6d":"markdown","0ead2775":"markdown","f8672124":"markdown","b3e107c4":"markdown","99a8b389":"markdown","b0a3d984":"markdown","341ebe38":"markdown"},"source":{"4470a7fb":"import numpy as np\nimport pandas as pd\nimport csv\nfrom datetime import datetime\nimport re\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\n%matplotlib inline","2ae74653":"data = pd.read_csv(\"..\/input\/nba2k20-player-dataset\/nba2k20-full.csv\")","2babe233":"def clean_data(data):\n    data['salary'] = data['salary'].apply(lambda x: int(x[1:]))\n    data['jersey'] = data['jersey'].apply(lambda x: int(x[1:]))\n    data['b_day'] = data['b_day'].apply(lambda x: datetime.strptime(x, '%m\/%d\/%y').date())\n    data['height'] = data['height'].apply(lambda x: float(x[2+x.find('\/'):]))\n    data['weight'] = data['weight'].apply(lambda x: float(x[2+x.find('\/'):-4]))\n    data['draft_round'] = data['draft_round'].apply(lambda x: int(x) if len(x) == 1 else 0)\n    data['draft_peak'] = data['draft_peak'].apply(lambda x: int(x) if 1<=len(x)<=2 else 0)\n    data['college'] = data['college'].fillna('no education')\n    data['team'] = data['team'].fillna('no team')\n\nclean_data(data)","efcea203":"#find age of each player\n\ndef age_(birthday):\n    today = datetime.strptime(datetime.today().strftime('%Y-%m-%d'), '%Y-%m-%d').date()\n    age = today.year - birthday.year\n    return int(age)\n\ndata['age'] = data['b_day'].apply(lambda x: age_(x))\ndata.loc[data['country'] != 'USA', 'country'] = 'not USA'\ndata.loc[data['position'] == 'F-G', 'position'] = 'F'\ndata.loc[data['position'] == 'G-F', 'position'] = 'F'\ndata.loc[data['position'] == 'F-C', 'position'] = 'C'\ndata.loc[data['position'] == 'C-F', 'position'] = 'C'\ndata","c2fc2adf":"from sklearn import preprocessing\nfrom scipy import stats\n\ndata_dummy = pd.get_dummies(data, columns=['team', 'position','draft_round', 'country'], drop_first= True)\ndata_dummy = data_dummy.drop(['full_name', 'draft_peak', 'b_day', 'jersey', 'college'], axis = 1)\nX, y = data_dummy.drop(['salary'], axis = 1), data_dummy['salary']\ndata_dummy","734a3f91":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\n# import tensorflow as tf\n# from tensorflow import keras\nfrom sklearn import preprocessing\nfrom xgboost import XGBRegressor\n# from sklearn.neighbors import KNeighborsRegressor","944848bf":"normalizer = preprocessing.Normalizer().fit(X)\nX = normalizer.transform(X)\nX = np.array(X)\ny = np.array(y)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","386a9407":"model = model = XGBRegressor( \n    learning_rate=0.04,\n    colsample_bytree=0.9, \n    min_child_weight=3.5,\n    objective='reg:squarederror',\n    max_depth = 2,\n    subsample = 0.63,\n    eta = 0.1,\n    seed=0)\n\nmodel = model.fit(\n    X_train, \n    y_train, \n    eval_metric=\"rmse\", \n    verbose=True)","0d040081":"predictions = model.predict(X_test)\npredictions","7d28fd5e":"np.sqrt(mean_squared_error(y_test, predictions))","94bdcb6d":"**Next cell normalizes data with the help of \"sklern\" normalizer. We will be using XGBoosterRegressor with custom parameters for our model. After all this manipulations we will split data on train\/test with test size 20%  and random state 0**","0ead2775":"**Now we have our predictions and let's output root mean squared error of our prediction.**","f8672124":"**Next we need to import libraries for our model creation.**","b3e107c4":"**Now let's see what our model predicts.**","99a8b389":"**Now we need to make data more processable for our model, with this problem dummies will help us**","b0a3d984":"**First of all we need to preprocess data.**","341ebe38":"**Let's add age column, change all non USA players to \"not USA\" and change positions.**"}}