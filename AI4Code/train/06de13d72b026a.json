{"cell_type":{"7fabb2d0":"code","222e7800":"code","24882f80":"code","728dd785":"code","07f6ef27":"code","116bf917":"code","b6368082":"code","ba25e5f1":"code","ad9a7554":"code","93193529":"code","7128a439":"code","7c8a45e6":"code","11e1889f":"code","3257d4dd":"code","5682e996":"code","b8e14705":"code","4976113f":"code","87a68787":"code","76c5e900":"code","e96c41d6":"code","526a4421":"code","848215d8":"code","61e65617":"code","2e3f71d7":"code","69ae12b4":"code","191e1d9a":"code","b8ae6a33":"code","115c3f31":"code","43f3baeb":"code","6f48123a":"code","ad69189c":"code","5580c64e":"code","09dcebd5":"code","cedb9799":"code","dd4adad9":"code","9f4252ae":"code","9fdc612a":"code","591369ac":"code","c706ae90":"code","d06ef8c6":"code","0a8c964b":"markdown","c71e975b":"markdown","056a5f0b":"markdown","ac572b22":"markdown","63cc349c":"markdown","4c55a685":"markdown","0f1b2526":"markdown","78b3271a":"markdown","351648a2":"markdown","efa55ac2":"markdown","44524835":"markdown","4d040cfb":"markdown","7641bef9":"markdown","0c804249":"markdown"},"source":{"7fabb2d0":"import numpy as np \nimport pandas as pd \nimport plotly.express as px\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom sklearn import preprocessing\nimport optuna\nfrom optuna.samplers import TPESampler","222e7800":"train = pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/train_data.csv')\ntest = pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/test_data.csv')\nsub = pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/sample_sub.csv')\n\ntrain = train.drop(['case_id'], axis=1)\ntest = test.drop(['case_id'], axis=1)\ntrain['dataset'] = 'train'\ntest['dataset'] = 'test'\n\ndf = pd.concat([train, test])","24882f80":"df","728dd785":"ds = df.groupby(['Hospital_code', 'dataset'])['patientid'].count().reset_index()\nds.columns = ['hospital', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='hospital', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='Cases per hospital distribution', \n    width=900,\n    height=700\n)\nfig.show()","07f6ef27":"ds = df.groupby(['Hospital_type_code', 'dataset'])['patientid'].count().reset_index()\nds.columns = ['hospital', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='hospital', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='Cases hospital type distribution', \n    width=900,\n    height=600\n)\nfig.show()","116bf917":"ds = df.groupby(['Hospital_region_code', 'dataset'])['patientid'].count().reset_index()\nds.columns = ['hospital', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='hospital', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='Cases hospital region distribution', \n    width=900,\n    height=600\n)\nfig.show()","b6368082":"ds = df.groupby(['Department', 'dataset'])['patientid'].count().reset_index()\nds.columns = ['department', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='department', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='Department distribution', \n    width=900,\n    height=600\n)\nfig.show()","ba25e5f1":"ds = df.groupby(['Ward_Type', 'dataset'])['patientid'].count().reset_index()\nds.columns = ['Ward_Type', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='Ward_Type', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='Ward Type distribution', \n    width=900,\n    height=600\n)\nfig.show()","ad9a7554":"ds = ds[ds['dataset']=='train']\nfig = px.pie(\n    ds, \n    names='Ward_Type', \n    values=\"count\", \n    title='Ward type pie chart for train set', \n    width=900,\n    height=600\n)\nfig.show()","93193529":"ds = df.groupby(['Ward_Facility_Code', 'dataset'])['patientid'].count().reset_index()\nds.columns = ['Ward_Facility_Code', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='Ward_Facility_Code', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='Ward Facility Code distribution', \n    width=900,\n    height=600\n)\nfig.show()","7128a439":"ds = df.groupby(['Bed Grade', 'dataset'])['patientid'].count().reset_index()\nds.columns = ['bed_grade', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='bed_grade', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='Bed_grade distribution', \n    width=900,\n    height=600\n)\nfig.show()","7c8a45e6":"ds = df.groupby(['Age', 'dataset'])['patientid'].count().reset_index()\nds.columns = ['age', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='age', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='Age distribution', \n    width=900,\n    height=600\n)\nfig.show()","11e1889f":"\nds = df.groupby(['Type of Admission', 'dataset'])['patientid'].count().reset_index()\nds.columns = ['admission', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='admission', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='Admission type distribution', \n    width=900,\n    height=600\n)\nfig.show()","3257d4dd":"ds = df.groupby(['Severity of Illness', 'dataset'])['patientid'].count().reset_index()\nds.columns = ['Severity of Illness', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='Severity of Illness', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='Severity of Illness type distribution', \n    width=900,\n    height=600\n)\nfig.show()","5682e996":"ds = df.groupby(['Stay', 'dataset'])['patientid'].count().reset_index()\nds.columns = ['Stay', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='Stay', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='Stay length distribution', \n    width=900,\n    height=600\n)\nfig.show()","b8e14705":"data = df['patientid'].value_counts().reset_index()\ndata.columns = ['patientid', 'cases']\ndata['patientid'] = 'patient ' + data['patientid'].astype(str)\ndata = data.sort_values('cases')\nfig = px.bar(\n    data.tail(50), \n    x=\"cases\", \n    y=\"patientid\", \n    orientation='h', \n    title='Top 50 patients',\n    width=800,\n    height=900\n)\nfig.show()","4976113f":"fig = px.histogram(\n    df, \n    \"City_Code_Patient\", \n    nbins=40, \n    color = 'dataset',\n    barmode='group',\n    title='City_Code_Patient', \n    width=700,\n    height=600\n)\nfig.show()","87a68787":"fig = px.histogram(\n    df, \n    \"Visitors with Patient\", \n    nbins=40, \n    color = 'dataset',\n    barmode='group',\n    title='Visitors with Patient', \n    width=700,\n    height=600\n)\nfig.show()","76c5e900":"fig = px.histogram(\n    df, \n    \"Admission_Deposit\", \n    nbins=50, \n    color = 'dataset',\n    barmode='group',\n    title='Admission Deposit destribution', \n    width=700,\n    height=600\n)\nfig.show()","e96c41d6":"df.loc[df['Stay'] == '0-10', 'Stay'] = 0\ndf.loc[df['Stay'] == '11-20', 'Stay'] = 1\ndf.loc[df['Stay'] == '21-30', 'Stay'] = 2\ndf.loc[df['Stay'] == '31-40', 'Stay'] = 3\ndf.loc[df['Stay'] == '41-50', 'Stay'] = 4\ndf.loc[df['Stay'] == '51-60', 'Stay'] = 5\ndf.loc[df['Stay'] == '61-70', 'Stay'] = 6\ndf.loc[df['Stay'] == '71-80', 'Stay'] = 7\ndf.loc[df['Stay'] == '81-90', 'Stay'] = 8\ndf.loc[df['Stay'] == '91-100', 'Stay'] = 9\ndf.loc[df['Stay'] == 'More than 100 Days', 'Stay'] = 10","526a4421":"train = df[df['dataset']=='train']\ntest = df[df['dataset']=='test']\n\ntarget = train['Stay']\n\nfeatures = ['Available Extra Rooms in Hospital', 'Bed Grade', 'Visitors with Patient', 'Admission_Deposit']\n\ntrain = train[features]\ntrain = train.fillna(0)\ntest = test[features]","848215d8":"X, X_val, y, y_val = train_test_split(train, target, random_state=0, test_size=0.2, shuffle=True)\ny=y.astype('int')\ny_val=y_val.astype('int')","61e65617":"model = LogisticRegression(random_state=666)\nmodel.fit(X, y)\npreds = model.predict(X_val)\nprint('Baseline accuracy: ', accuracy_score(y_val, preds)*100, '%')","2e3f71d7":"fig, ax = plt.subplots(figsize=(10, 10))\nplot_confusion_matrix(model, X_val, y_val, ax=ax)","69ae12b4":"need_to_encode = ['Hospital_type_code', 'Hospital_region_code', 'Department', 'Ward_Type', 'Ward_Facility_Code', 'Type of Admission', 'Severity of Illness']\nfor column in need_to_encode:\n    le = preprocessing.LabelEncoder()\n    le.fit(df[column])\n    df[column] = le.transform(df[column])","191e1d9a":"df.loc[df['Age'] == '0-10', 'Age'] = 0\ndf.loc[df['Age'] == '11-20', 'Age'] = 1\ndf.loc[df['Age'] == '21-30', 'Age'] = 2\ndf.loc[df['Age'] == '31-40', 'Age'] = 3\ndf.loc[df['Age'] == '41-50', 'Age'] = 4\ndf.loc[df['Age'] == '51-60', 'Age'] = 5\ndf.loc[df['Age'] == '61-70', 'Age'] = 6\ndf.loc[df['Age'] == '71-80', 'Age'] = 7\ndf.loc[df['Age'] == '81-90', 'Age'] = 8\ndf.loc[df['Age'] == '91-100', 'Age'] = 9","b8ae6a33":"categorical = ['Hospital_code', 'Hospital_type_code', 'City_Code_Hospital', 'Hospital_region_code', 'Department', 'Ward_Type', 'Ward_Facility_Code', \n              'City_Code_Patient', 'Type of Admission', 'Severity of Illness']","115c3f31":"train = df[df['dataset']=='train']\ntest = df[df['dataset']=='test']\n\ntarget = train['Stay']\ntrain = train.fillna(0)\ntest = test.fillna(0)\ntrain = train.drop(['patientid', 'dataset', 'Stay'], axis=1)\ntest = test.drop(['patientid', 'dataset'], axis=1)\ntrain","43f3baeb":"X, X_val, y, y_val = train_test_split(train, target, random_state=0, test_size=0.2, shuffle=True)\ny=y.astype('int')\ny_val=y_val.astype('int')","6f48123a":"model = LGBMClassifier(random_state=666)\nmodel.fit(X, y, categorical_feature=categorical)\npreds = model.predict(X_val)\nprint('LGBM accuracy: ', accuracy_score(y_val, preds)*100, '%')","ad69189c":"fig, ax = plt.subplots(figsize=(10, 10))\nplot_confusion_matrix(model, X_val, y_val, ax=ax)","5580c64e":"sampler = TPESampler(seed=0)\ndef create_model(trial):\n    max_depth = trial.suggest_int(\"max_depth\", 2, 30)\n    n_estimators = trial.suggest_int(\"n_estimators\", 1, 500)\n    learning_rate = trial.suggest_uniform('learning_rate', 0.0000001, 1)\n    num_leaves = trial.suggest_int(\"num_leaves\", 2, 5000)\n    min_child_samples = trial.suggest_int('min_child_samples', 3, 200)\n    model = LGBMClassifier(learning_rate=learning_rate, n_estimators=n_estimators, max_depth=max_depth, num_leaves=num_leaves, min_child_samples=min_child_samples,\n                           random_state=0)\n    return model\n\ndef objective(trial):\n    model = create_model(trial)\n    model.fit(X, y)\n    preds = model.predict(X_val)\n    return accuracy_score(y_val, preds)\n\ndef optimize():\n    study = optuna.create_study(direction=\"maximize\", sampler=sampler)\n    study.optimize(objective, n_trials=20)\n    return study.best_params\n\nparams = optimize()","09dcebd5":"params['random_state'] = 666\nmodel = LGBMClassifier(**params)\nmodel.fit(X, y, categorical_feature=categorical)\npreds = model.predict(X_val)\nprint('LGBM accuracy: ', accuracy_score(y_val, preds)*100, '%')","cedb9799":"fig, ax = plt.subplots(figsize=(10, 10))\nplot_confusion_matrix(model, X_val, y_val, ax=ax)","dd4adad9":"X.columns","9f4252ae":"test.columns","9fdc612a":"preds = model.predict(test.drop('Stay',axis=1))","591369ac":"sub['Stay']=preds","c706ae90":"sub.loc[sub['Stay'] == 0, 'Stay'] = '0-10'\nsub.loc[sub['Stay'] == 1, 'Stay'] = '11-20'\nsub.loc[sub['Stay'] == 2, 'Stay'] = '21-30'\nsub.loc[sub['Stay'] == 3, 'Stay'] = '31-40'\nsub.loc[sub['Stay'] == 4, 'Stay'] = '41-50'\nsub.loc[sub['Stay'] == 5, 'Stay'] = '51-60'\nsub.loc[sub['Stay'] == 6, 'Stay'] = '61-70'\nsub.loc[sub['Stay'] == 7, 'Stay'] = '71-80'\nsub.loc[sub['Stay'] == 8, 'Stay'] = '81-90'\nsub.loc[sub['Stay'] == 9, 'Stay'] = '91-100'\nsub.loc[sub['Stay'] == 10, 'Stay'] = 'More than 100 Days'","d06ef8c6":"sub.to_csv('lgbm.csv',index=False)","0a8c964b":"#### What is Optuna Optimization?\n\nIt is hyperparameter optimization framework, nice Kaggle tutorial I found in Kaggle - https:\/\/www.kaggle.com\/corochann\/optuna-tutorial-for-hyperparameter-optimization","c71e975b":"## Feel free to share your feedback, do Upvote if you like\/found the notebook useful!","056a5f0b":"# Loading Dataset","ac572b22":"<img src='https:\/\/datahack-prod.s3.ap-south-1.amazonaws.com\/__sized__\/contest_cover\/cover_4-thumbnail-1200x1200.png'>","63cc349c":"Recent Covid-19 Pandemic has raised alarms over one of the most overlooked area to focus: Healthcare Management. While healthcare management has various use cases for using data science, patient length of stay is one critical parameter to observe and predict if one wants to improve the efficiency of the healthcare management in a hospital. \n\nThis parameter helps hospitals to identify patients of high LOS risk (patients who will stay longer) at the time of admission. Once identified, patients with high LOS risk can have their treatment plan optimized to miminize LOS and lower the chance of staff\/visitor infection. Also, prior knowledge of LOS can aid in logistics such as room and bed allocation planning.\n\n<b>Suppose you have been hired as Data Scientist of HealthMan<\/b> \u2013 a not for profit organization dedicated to manage the functioning of Hospitals in a professional and optimal manner.\nThe task is to accurately predict the Length of Stay for each patient on case by case basis so that the Hospitals can use this information for optimal resource allocation and better functioning. The length of stay is divided into 11 different classes ranging from 0-10 days to more than 100 days.","4c55a685":"### Let's build LightGBM classifier","0f1b2526":"### Lets try first linear model only on numerical features","78b3271a":"# Final Submission","351648a2":"### We can see that we improved our score without any serious preprocessing of data and hyperparameters tunning. Let's do it next.","efa55ac2":"# Problem Statement","44524835":"# Preparing Dataset For Modelling","4d040cfb":"# References:\n1. Optuna Optimization - https:\/\/www.kaggle.com\/corochann\/optuna-tutorial-for-hyperparameter-optimization\n2. LightGBM - https:\/\/towardsdatascience.com\/understanding-lightgbm-parameters-and-how-to-tune-them-6764e20c6e5b","7641bef9":"### Optuna optimization","0c804249":"# Exploratory Data Analysis"}}