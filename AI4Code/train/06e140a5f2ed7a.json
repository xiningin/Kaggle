{"cell_type":{"8bc27d33":"code","e1fdef70":"code","26f95124":"code","9ef7dad1":"code","4f7a0eb2":"code","29881d34":"code","e842bb6f":"code","9a3d6874":"code","ecf289fa":"code","1b3593da":"code","9604d941":"code","09bb6aa3":"code","fb150c84":"markdown"},"source":{"8bc27d33":"import pandas as pd \nimport numpy as np \nimport os \nimport re \nimport tensorflow as tf \nimport cv2\nfrom sklearn import model_selection,preprocessing\nimport math\nimport matplotlib.pyplot as plt \n\n%matplotlib inline ","e1fdef70":"df_train=pd.read_csv('..\/input\/shopee-product-matching\/train.csv')\n\n\n#Removing the duplicated \n\ndf_train=df_train.drop_duplicates(subset='image').reset_index(drop=True)\n\nroot='..\/input\/shopee-product-matching\/train_images'\n\ndf_train['fullpaths']=df_train['image'].apply(lambda x:os.path.join(root,x))\n\n\n\ntargets=df_train.groupby('label_group')['posting_id'].unique().to_dict()\ndf_train['targets']=df_train['label_group'].map(targets)\n\n\n### In determining similarity case we cannot use the normal kfold or stratified kfold approach \n## Lets split the dataset using  groupkfold. Groupkfold helps to distribute groups amount train and test set . So this will \n## allow us to train on the data and then test the model on some group examples which the model has not seen before\n\ngf=model_selection.GroupKFold(n_splits=10)\n\ndf_train['fold']=-1\n\nfor fold,(train_idx,valid_idx) in enumerate(gf.split(df_train,None,df_train['label_group'])):\n    df_train.loc[valid_idx,'fold']=fold\n    \n## Label encoding the label_group \n\nlb=preprocessing.LabelEncoder()\n\ndf_train['label_group_encoded']=lb.fit_transform(df_train['label_group'].values.reshape(-1,1))\n\ndf_train.to_csv('.\/train_encoded.csv',index=False)","26f95124":"df_train=pd.read_csv('.\/train_encoded.csv')\ndf_train.head()","9ef7dad1":"def _bytes_feature(value):\n  \"\"\"Returns a bytes_list from a string \/ byte.\"\"\"\n  if isinstance(value, type(tf.constant(0))):\n    value = value.numpy() # BytesList won't unpack a string from an EagerTensor.\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\ndef _float_feature(value):\n  \"\"\"Returns a float_list from a float \/ double.\"\"\"\n  return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\ndef _int64_feature(value):\n  \"\"\"Returns an int64_list from a bool \/ enum \/ int \/ uint.\"\"\"\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))","4f7a0eb2":"def serialize_example(feature0, feature1, feature2):\n  feature = {\n      'image': _bytes_feature(feature0),\n      'image_name': _bytes_feature(feature1),\n      'target': _int64_feature(feature2)\n  }\n  example_proto = tf.train.Example(features=tf.train.Features(feature=feature))\n  return example_proto.SerializeToString()","29881d34":"for groupfold in df_train['fold'].unique():\n    images=df_train[df_train['fold']==groupfold].reset_index(drop=True)\n    with tf.io.TFRecordWriter(f'train_{groupfold}-{images.shape[0]}.tfrec') as writer:\n        for k in np.arange(images.shape[0]):\n            img=cv2.imread(images.loc[k,'fullpaths'])\n            #img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR) # Fix incorrect colors\n            img = cv2.imencode('.jpg', img)[1].tobytes()\n            name=images.loc[k,'image']\n            example=serialize_example(\n                img,\n                str.encode(name),\n                df_train.loc[k,'label_group_encoded']\n            )\n            writer.write(example)\n    print(\"Record written for fold {} out of 9 fold\".format(groupfold) )","e842bb6f":"# numpy and matplotlib defaults\nnp.set_printoptions(threshold=15, linewidth=80)\nCLASSES = [0,1]\n\ndef batch_to_numpy_images_and_labels(data):\n    images, labels = data\n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    #if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n    #    numpy_labels = [None for _ in enumerate(numpy_images)]\n    # If no labels, only image IDs, return None for labels (this is the case for test data)\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    if correct_label is None:\n        return CLASSES[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(str(title)) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n    \ndef display_batch_of_images(databatch, predictions=None):\n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = label\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()","9a3d6874":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.image.resize(image, size=[*IMAGE_SIZE]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"image_name\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = example['image_name']\n    return image, label # returns a dataset of (image, label) pairs\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE,drop_remainder=True)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)","ecf289fa":"# INITIALIZE VARIABLES\nIMAGE_SIZE= [512,512]; BATCH_SIZE = 32\nAUTO = tf.data.experimental.AUTOTUNE\nTRAINING_FILENAMES = tf.io.gfile.glob('train*.tfrec')\nprint('There are %i train images'%count_data_items(TRAINING_FILENAMES))","1b3593da":"# DISPLAY TRAIN IMAGES\ntraining_dataset = get_training_dataset()\n\ntraining_dataset = training_dataset.unbatch().take(6)\ntrain_batch = iter(training_dataset)","9604d941":"img=[]\nfor image, _ in training_dataset:\n    img.append(image)\n    \n","09bb6aa3":"plt.figure(figsize=(10,10))\nfor i in range(6):\n    plt.subplot(3,2,i+1)\n    plt.imshow(img[i]);\n    plt.axis('off');","fb150c84":"\n## Creating TF record files \nThis notebook is my attempt to learn creating TF record files . TF-record files are very useful to if you want to you TPU for model solving . A big limiting constrain in TPU using is data feeding into it and TF record helps us to solve that constraint.\n\nI am going to follow Chris [notebook](https:\/\/www.kaggle.com\/cdeotte\/how-to-create-tfrecords) to create the TR-record files for the Shopee Dataset \n"}}