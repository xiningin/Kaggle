{"cell_type":{"c95ea8b8":"code","c0823461":"code","bba56aaa":"code","5c74a7be":"code","55a653df":"code","9a46a682":"code","9f3c3d5d":"code","5e8d8125":"code","199281de":"code","a511840a":"code","47ecb30d":"code","1f7bd5c7":"code","48a9d388":"code","bccd1818":"code","1a3b53ec":"code","8eeca887":"code","87b42f2d":"code","5153f496":"code","b1886951":"code","f6f6f1a7":"code","f60139a8":"code","099c38f9":"markdown","dee24262":"markdown","75c7ab82":"markdown"},"source":{"c95ea8b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0823461":"text = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt'\n\nwith open (text, 'r') as f:\n    print(f.read())","bba56aaa":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","5c74a7be":"train_data_path = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv'\ntest_data_path = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv'\n\ntrain_df = pd.read_csv(train_data_path)\ntest_df = pd.read_csv(test_data_path)\ntrain_df.head()","55a653df":"train_df.describe()","9a46a682":"test_df.describe()","9f3c3d5d":"#measuring missing data\ndef measure_missing_value(df):\n    total = df.isnull().sum().sort_values(ascending=False)\n    percentage = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\n    missing_data = pd.concat([total, percentage], axis=1, keys=['Total', 'Percent'])\n    \n    return missing_data.head(20)\n\nprint(measure_missing_value(train_df))","5e8d8125":"print(measure_missing_value(test_df))","199281de":"combined_df = pd.concat([train_df, test_df], axis=0)","a511840a":"_ , ax = plt.subplots(figsize =(40, 40))\ncolormap = sns.diverging_palette(220, 10, as_cmap = True)\n_ = sns.heatmap(\n    \n                combined_df.corr(), \n                cmap = colormap,\n                square=True, \n                cbar_kws={'shrink':.9}, \n                ax=ax,\n                annot=True, \n                # linewidths=0.1, vmin=-0.8,vmax=0.8, linecolor='white',\n                linewidths=0.1, vmin=-0.8,vmax=0.8, linecolor='white',\n                annot_kws={'fontsize':12 }\n                \n                )","47ecb30d":"sns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', \n        'TotalBsmtSF', 'FullBath', 'YearBuilt']\npairp = sns.pairplot(combined_df[cols], height = 1.5, )\nplt.show();","1f7bd5c7":"from collections import defaultdict\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n","48a9d388":"print(f'Percent of Nans in Train Data : {round(train_df.isna().sum().sum()\/len(train_df), 2)}')\nprint(f'Percent of Nans in Test  Data : {round(test_df.isna().sum().sum()\/len(test_df), 2)}')","bccd1818":"class Preprocssor(object):\n    def __init__(self, df, target_name):\n        self.df = df\n        self.target_name = target_name\n        \n        self.columns = df.columns\n        \n        self.d = defaultdict(LabelEncoder)\n        \n    def get_ready(self, standarize=True):\n        label_encoded_df = self.my_encoder(self.df)\n        nonnal_df = self.my_fillna(label_encoded_df)\n        \n        y = self.get_target(self.df)\n        X = self.my_col_dropper(nonnal_df, self.target_name)\n        \n        if standarize:\n            X = self.standaraizer(X)\n        \n        return X, y\n\n    def my_encoder(self, df):\n        encoded_df = df.apply(lambda x: self.d[x.name].fit_transform(x))\n        \n        return encoded_df\n    \n\n    def my_col_dropper(self, df, name_of_col):\n        df = df.drop(name_of_col, axis=1)\n        \n        return df\n        \n    def standaraizer(self, df): \n        scaler = StandardScaler().fit(df) \n        rescaled_data = scaler.transform(df)\n\n        return rescaled_data\n    \n    def my_fillna(self, df):\n        df = df.apply(lambda x: x.fillna(x.mean()),axis=1)\n        \n        return df \n    \n    def get_target(self, df):\n        y = df[self.target_name]\n        \n        return y \n \n \ntrain_data = Preprocssor(train_df, target_name='SalePrice')\ntest_data =  Preprocssor(test_df, target_name='SalePrice')\n\nX_train, y_train = train_data.get_ready()\nX_test, y_test = train_data.get_ready()\nX_train\n\n","1a3b53ec":"import statsmodels.api as sm\nest = sm.OLS(y_train, X_train).fit()\nsummary = est.summary()\nsummary","8eeca887":"# Here we will prepare data for xgboost and train a model.\n# and we get, 0.999 which is relly good.\n# Note: since we are using xgboost I did not standarize the data.\n\nimport xgboost as xgb\nfrom sklearn.metrics import explained_variance_score\n\nX_train, y_train = train_data.get_ready(standarize=False)\nX_test, y_test = train_data.get_ready(standarize=False)\n\nxgb = xgb.XGBRegressor(n_estimators=100, learning_rate=0.08, gamma=0, subsample=0.75,\n                           colsample_bytree=1, max_depth=30)\n\nmodel = xgb.fit(X_train, y_train)\n\npredictions = model.predict(X_test)\n\nscore = explained_variance_score(y_test, predictions) \n\nscore","87b42f2d":"# Now we caulate feature importances from xgboost. \n# \nimport collections\n\n# importance_type = ['weight', 'gain', 'cover', 'total_gain', 'total_cover']\nweight = model.get_booster().get_score(importance_type='weight')\ngain = model.get_booster().get_score(importance_type='gain')\ncover = model.get_booster().get_score(importance_type='cover')\ntotal_gain = model.get_booster().get_score(importance_type='total_gain')\ntotal_cover = model.get_booster().get_score(importance_type='total_cover')\n\ndicts = [weight, gain, cover, total_gain, total_cover]\nsuper_dict = collections.defaultdict(list)\nfor d in dicts:\n    for k, v in d.items(): \n        super_dict[k].append(v)\n        \nresult_df = pd.DataFrame(super_dict, index=['weight', 'gain', 'cover', 'total_gain', 'total_cover'])\nfinal_df = result_df.transpose()\n\n# change 'by' by which we wish to sort\n# cover: the sum of second order gradient of training data classified to the leaf,\n# if it is square loss, this simply corresponds to the number of instances\n# in that branch. Deeper in the tree a node is, lower this metric will be\n\nfinal_df.sort_values(by='cover', ascending=False)\nfinal_df.head()\n\n\n","5153f496":"\"\"\"\nGain is the improvement in accuracy brought by a feature to the branches it is on. \nThe idea is that before adding a new split on a feature X to the branch \nthere was some wrongly classified elements, after adding the split on this feature, \nthere are two new branches, and each of these branch is more accurate\n(one branch saying if your observation is on this branch then it should be classified as 1,\nand the other branch saying the exact opposite).\n\"\"\"\nfinal_df.sort_values(by='gain', ascending=False)\nfinal_df.head()\n# Show important features for future sales price","b1886951":"ids = np.arange(1461,1461+len(predictions))\nprint(ids)\nSalePrice = np.array(predictions)\n\nnew_submission = pd.DataFrame({'Id': ids, 'PredSalePrice': SalePrice})\nnew_submission = new_submission.drop([1459])\n# new_submission = new_submission.sort_values(by='SalePrice')\nnew_submission.to_csv('my_submission.csv', index=False)\n\nprint(\"Your submission was successfully saved!\")","f6f6f1a7":"sub_df = pd.read_csv('my_submission.csv')\nsub_df","f60139a8":"import os \nos.path.abspath('my_submission.csv')","099c38f9":"**Introduction**\nHouse Pricing Prediction has been one of the most famous challenge, as the price of houses are usually dependent on many features such as size of house, location, etc. The goal of our study is to set up prediction models for Boston house prices, based on 80 given features.\n\nTwo data sets are given: the train data set consist of 1460 rows each representing a distinct house transaction, and 81 columns (1 SalePrice & 80 features), and the test data set consist of 1459 rows, and 80 columns (features).\n\nOur study follows the process: exploratory data analysis - feature engineering - prediction model setting. Finally xgboost is used to caculate a prediction as well as feature importances.\n\n","dee24262":"Preprocessing ","75c7ab82":"**Data Visualization \n**"}}