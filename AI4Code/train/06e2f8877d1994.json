{"cell_type":{"aab11c02":"code","a26825a0":"code","3d83a948":"code","a9ac579f":"code","dadf85af":"code","c164b5eb":"code","466b7d8c":"code","c319fe1b":"code","d379fdf1":"code","8c3287c5":"code","05a55a74":"code","b92dbe9c":"code","8c0e63db":"code","ff4deeb0":"code","65a2e40b":"code","fd791afd":"code","1d8da1ac":"code","7d89d67b":"code","970508a7":"code","ac161e9e":"code","c0917dac":"code","8f1209af":"code","1082e056":"code","6bc62c59":"code","7d360cbe":"code","84fb1e68":"code","f042148a":"code","4e93afa0":"code","211eb5bf":"code","fb875746":"markdown","6352a746":"markdown","8d9a5211":"markdown","d5edd452":"markdown","ad819ab0":"markdown","1b882dfa":"markdown","d7c43a42":"markdown","ca7fa3c1":"markdown","4d3e5b97":"markdown","d9c82c95":"markdown","0b3ef972":"markdown","f54b4fb9":"markdown","bee284f7":"markdown","3c30419e":"markdown","f4afd855":"markdown"},"source":{"aab11c02":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn')\nfrom sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score, roc_auc_score, roc_curve, confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, cross_val_predict\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC","a26825a0":"data = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndata.head()","3d83a948":"data.columns.array","a9ac579f":"data.shape","dadf85af":"data.dtypes","c164b5eb":"data.isna().sum()","466b7d8c":"for col in data.columns:\n    print(data[col].value_counts())","c319fe1b":"data.info()","d379fdf1":"data.describe()","8c3287c5":"data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = \\\ndata[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","05a55a74":"data.isna().sum()","b92dbe9c":"100 * data.isna().sum() \/ data.shape[0]","8c0e63db":"data.hist(figsize = (20,20));","ff4deeb0":"data['Glucose'].fillna(data['Glucose'].mean(), inplace = True)\ndata['BloodPressure'].fillna(data['BloodPressure'].mean(), inplace = True)\ndata['SkinThickness'].fillna(data['SkinThickness'].median(), inplace = True)\ndata['Insulin'].fillna(data['Insulin'].median(), inplace = True)\ndata['BMI'].fillna(data['BMI'].median(), inplace = True)","65a2e40b":"data.isna().sum()","fd791afd":"data.hist(figsize = (20,20));","1d8da1ac":"sns.pairplot(data=data, hue='Outcome')","7d89d67b":"scaler = StandardScaler()\ndata_scaled = pd.DataFrame(\n        scaler.fit_transform((data.drop([\"Outcome\"], axis = 1))),\n        columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age']\n)","970508a7":"y = data.Outcome","ac161e9e":"X_train, X_test, y_train, y_test = train_test_split(data_scaled, y ,test_size=0.3, random_state=42, stratify=y)","c0917dac":"param_grid = {\n                'n_neighbors': np.arange(1, 50, 1)\n             }\n\nknn = KNeighborsClassifier()\nknn_cv = GridSearchCV(knn,param_grid, cv=5)\nknn_cv.fit(X_train, y_train)\n\nprint(\"Best Score:\" + str(knn_cv.best_score_))\nprint(\"Best Parameters: \" + str(knn_cv.best_params_))","8f1209af":"y_pred = knn_cv.best_estimator_.predict(X_test)\ncnf_matrix = confusion_matrix(y_test, y_pred)\np = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","1082e056":"print(classification_report(y_test, y_pred))","6bc62c59":"lr = LogisticRegression(random_state=0)\n\nparam_grid = \\\n{\n    'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000],\n    'max_iter': list(range(100,800,100)),\n    'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n}\n\nlr_cv = GridSearchCV(lr, param_grid=param_grid, cv=5, scoring='roc_auc')\n\nlr_cv.fit(X_train, y_train)\n\nprint('Config: %s' % lr_cv.best_params_)\nprint('Best Score: %s' % lr_cv.best_score_)","7d360cbe":"y_pred = lr_cv.best_estimator_.predict(X_test)\ncnf_matrix = confusion_matrix(y_test, y_pred)\np = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","84fb1e68":"print(classification_report(y_test, y_pred))","f042148a":"svc = SVC(kernel='rbf')\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)","4e93afa0":"y_pred = svc.predict(X_test)\ncnf_matrix = confusion_matrix(y_test, y_pred)\np = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","211eb5bf":"print(classification_report(y_test, y_pred))","fb875746":"- The Distribution of each variable didn't change alot.","6352a746":"- Now we have to impute this values","8d9a5211":"---\n\n<center> <h1> Model Building <\/h1> <\/center>","d5edd452":"- It is always advisable to bring all the features to the same scale for applying distance based algorithms like KNN.","ad819ab0":"- No need to change dtypes.","1b882dfa":"---\n\n#### SVC","d7c43a42":"<center> <h1> Data Wrangling <\/h1> <\/center>","ca7fa3c1":"---","4d3e5b97":"- Inspecting value counts for each variable.","d9c82c95":"- I will fill `BloodPressure and Glucose` with the mean (Normally Distributed).\n- `SkinThickness, Insulin and BMI` with median.","0b3ef972":"#### KNN:","f54b4fb9":"- `Glucose BloodPressure SkinThickness Insulin BMI` columns have non logical 0 values","bee284f7":"----\n\n### LR:","3c30419e":"- Data has no missing values.","f4afd855":"<center> <h1> EDA <\/h1> <\/center>"}}