{"cell_type":{"4221a6ba":"code","3486deb5":"code","fde35c23":"code","b2f8df9f":"code","dee2033b":"code","0258cc12":"code","663c2774":"code","fbe93b52":"code","490ddef5":"code","02d7a58a":"code","341418ce":"code","eccb7e91":"code","46237506":"markdown","4bebed4f":"markdown"},"source":{"4221a6ba":"from keras.datasets import cifar10\nfrom keras.layers import Input, Dense,Conv2D,MaxPooling2D,UpSampling2D,BatchNormalization\nfrom keras.models import Model,Sequential\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","3486deb5":"(X_train, _), (X_test, _) = cifar10.load_data()\nX_train = X_train.astype('float32')\/255\nX_test = X_test.astype('float32')\/255\nX_train = X_train.reshape(len(X_train),X_train.shape[1],X_train.shape[2],3)\nX_test = X_test.reshape(len(X_test), X_test.shape[1],X_test.shape[2],3)\nprint(X_train.shape)\nprint(X_test.shape)","fde35c23":"input_img = Input(shape=(32,32,3))\n\n#Encoder\nx = Conv2D(16,(3,3), activation='relu', padding='same')(input_img)\nx = MaxPooling2D((2,2), padding='same')(x)\n\nx = Conv2D(8,(3,3), activation='relu', padding='same')(x)\nx = MaxPooling2D((2,2), padding='same')(x)\n\nx = Conv2D(8,(3,3), activation='relu', padding='same')(x)\nencoded = MaxPooling2D((2,2), padding='same', name='encoder')(x)\n\n#Decoder\nx = Conv2D(8, (3, 3), activation='relu', padding='same')(encoded)\nx = UpSampling2D((2, 2))(x)\n\nx = Conv2D(8, (3, 3), activation='relu', padding='same')(x)\nx = UpSampling2D((2, 2))(x)\n\nx = Conv2D(16, (3, 3), activation='relu',padding='same')(x)\nx = UpSampling2D((2, 2))(x)\n\ndecoded = Conv2D(3, (3, 3), activation='sigmoid', padding='same')(x)\n\nautoencoder = Model(input_img, decoded)\nautoencoder.compile(optimizer='adam', loss='mse')","b2f8df9f":"model = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=3, strides=1, padding='same', activation='relu', input_shape=(32, 32, 3)))\nmodel.add(BatchNormalization())     # 32x32x32\nmodel.add(Conv2D(32, kernel_size=3, strides=2, padding='same', activation='relu'))      # 16x16x32\nmodel.add(Conv2D(32, kernel_size=3, strides=1, padding='same', activation='relu'))      # 16x16x32\nmodel.add(BatchNormalization())     # 16x16x32\nmodel.add(UpSampling2D())\nmodel.add(Conv2D(32, kernel_size=3, strides=1, padding='same', activation='relu'))      # 32x32x32\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(3,  kernel_size=1, strides=1, padding='same', activation='sigmoid'))   # 32x32x3\n\nmodel.compile(optimizer='adam', metrics=['accuracy'], loss='mean_squared_error')\nmodel.summary()","dee2033b":"autoencoder=Model(input_img, decoded)","0258cc12":"autoencoder.summary()","663c2774":"encoder = Model(input_img, encoded)","fbe93b52":"encoder.summary()","490ddef5":"autoencoder.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","02d7a58a":"model.fit(X_train, X_train,\n                epochs=50,\n                batch_size=256,\n                shuffle=True,\n                validation_data=(X_test, X_test))","341418ce":"#encoded_imgs = model.predict(X_test)\npredicted = model.predict(X_test)","eccb7e91":"plt.figure(figsize=(40,4))\nfor i in range(10):\n    # display original images\n    ax = plt.subplot(3, 20, i + 1)\n    plt.imshow(X_test[i].reshape(32, 32,3))\n    #plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n    \n\n    \n    # display reconstructed images\n    ax = plt.subplot(3, 20, 2*20 +i+ 1)\n    plt.imshow(predicted[i].reshape(32, 32,3))\n    #plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n  \n    \nplt.show()","46237506":"Good for Minist Dataset","4bebed4f":"Good for coloured Image"}}