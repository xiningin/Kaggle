{"cell_type":{"4c66890a":"code","33cdec0f":"code","f370460b":"code","d79d6b96":"code","5adab541":"code","f18d1382":"code","7571bf0b":"code","a4c0c32b":"code","ec1aeac3":"code","4082646c":"code","1b9a9f6b":"code","5b55817e":"code","f30d9b75":"markdown","201b8e79":"markdown","b0b9e818":"markdown"},"source":{"4c66890a":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 100)\n\nimport gc\nimport time\nimport pickle\nimport seaborn as sns\nfrom tqdm import tqdm\nfrom itertools import product\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBRegressor\nfrom sklearn import preprocessing \nfrom xgboost import plot_importance\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\n\ndef plot_features(booster, figsize):    \n    fig, ax = plt.subplots(1,1,figsize=figsize)\n    return plot_importance(booster=booster, ax=ax)\n\ndef downcast_dtypes(df):\n    float_cols = [c for c in df if df[c].dtype == \"float64\"]\n    int_cols = [c for c in df if df[c].dtype in [\"int64\", \"int32\"]]\n    df[float_cols] = df[float_cols].astype(np.float16)\n    df[int_cols] = df[int_cols].astype(np.int16)\n    return df\n\nimport sys\nsys.version_info","33cdec0f":"data = pd.read_pickle('\/kaggle\/input\/all-datta5\/data2.pkl')\n# data = data[[\n#     'date_block_num', \n#     'shop_id', \n#     'item_id', \n#     'item_cnt_month',\n    \n# #     'shop_city', \n# #     'shop_name1',\n# #     'shop_type', \n    \n# #     'name_1', \n# #     'name_2', \n# #     'name_3',\n    \n# #     'item_type', \n# #     'item_subtype', \n# #     'item_category_id', \n    \n# #     'item_cnt_month_lag_1',\n# #     'item_cnt_month_lag_2', \n# #     'item_cnt_month_lag_3',\n# #     'date_block_num_avg_item_cnt_lag_1',\n# #     'date_block_num_and_item_id_avg_item_cnt_lag_1',\n# #     'date_block_num_and_item_id_avg_item_cnt_lag_2',\n# #     'date_block_num_and_item_id_avg_item_cnt_lag_3',\n# #     'date_block_num_and_shop_id_avg_item_cnt_lag_1',\n# #     'date_block_num_and_shop_id_avg_item_cnt_lag_2',\n# #     'date_block_num_and_shop_id_avg_item_cnt_lag_3',\n    \n# #     'date_block_num_and_shop_city_avg_item_cnt_lag_1',\n# #     'date_block_num_and_shop_name1_avg_item_cnt_lag_1',\n# #     'date_block_num_and_shop_type_avg_item_cnt_lag_1',\n    \n# #     'date_block_num_and_item_category_id_avg_item_cnt_lag_1',\n# #     'date_block_num_and_item_type_avg_item_cnt_lag_1',\n# #     'date_block_num_and_item_subtype_avg_item_cnt_lag_1',\n    \n# #     'date_block_num_and_shop_id_and_item_id_avg_item_cnt_lag_1',\n# #     'date_block_num_and_shop_id_and_name_1_avg_item_cnt_lag_1',\n# #     'date_block_num_and_shop_id_and_name_2_avg_item_cnt_lag_1',\n# #     'date_block_num_and_shop_id_and_name_3_avg_item_cnt_lag_1',\n# #     'date_block_num_and_shop_id_and_item_category_id_avg_item_cnt_lag_1',\n    \n# #     'delta_price_lag', \n# #     'item_shop_last_sale', \n# #     'item_last_sale',\n# #     'item_first_sale', \n# #     'year', \n# #     'month', \n# #     'days'\n# ]]\n\nprint(data.shape)\ndata.head(3)","f370460b":"##\u6c42\u51fa\u6bcf\u4e2a\u6708\u7684\u5747\u503c\u9500\u552e\u989d##shop_mean_months\na = []\nfor i in range(3,34):\n    b = data[data.date_block_num==i]##\u53d6\u5230\u6bcf\u4e00\u4e2a\u6708\n    c = b.sum()['item_cnt_month']#\u6c42\u548c\n    d = len(b.shop_id.unique())#\u957f\u5ea6\uff08\u4e2a\u6570\uff09\n    a.append(c\/d)#\u6c42\u5f97\u5747\u503c\nprint(a)","d79d6b96":"len(a)","5adab541":"import matplotlib.pyplot as plt\nfrom pylab import *                                 #\u652f\u6301\u4e2d\u6587\n\n# ax.plot(range(4,34), a, marker='o', mec='r', mfc='w',label='shop_mean_month')\n# ax.legend()  # \u8ba9\u56fe\u4f8b\u751f\u6548\n\nplt.subplots(1,1,figsize=(14,10))\nplt.plot(range(4,34), a, marker='o', mec='r', mfc='w',label='shop_mean_month')\nplt.legend()  # \u8ba9\u56fe\u4f8b\u751f\u6548\nplt.xlabel('month') #X\u8f74\u6807\u7b7e\nplt.ylabel(\"shop_mean_month\") #Y\u8f74\u6807\u7b7e\nplt.title(\"shop_mean_month\") #\u6807\u9898\n\nplt.show()","f18d1382":"##\u6dfb\u52a0\u5468\u7279\u5f81\uff0c\u5468\u7684\u6bcf\u4e00\u5929\u7684\u7279\u5f81\nweekarr = []\nt = 2\ncount = 0\nfor w in range(3):\n    for i in [31,28,31,30,31,30,31,31,30,31,30,31]:\n        a = [0,0,0,0,0,0,0,count]\n        count+=1\n        for j in range(i):\n            a[t]+=1\n            if t==6:\n                t=-1\n            t+=1\n        weekarr.append(a)\nweekarr = pd.DataFrame(np.vstack(weekarr), columns=['week0','week1','week2','week3','week4','week5','week6','date_block_num'])\ndata = pd.merge(data, weekarr, on=['date_block_num'], how='left')#\u52a0\u8fdb\u53bb\ndel weekarr\ngc.collect()","7571bf0b":"##\u6570\u636e\u96c6\u7684\u5212\u5206\nX_zong = data.drop(['item_cnt_month'], axis=1)#\u53bb\u6389\u6807\u7b7e\nY_train = data[data.date_block_num < 33]['item_cnt_month']#\u8bad\u7ec3\u96c6\u7684\u6807\u7b7e\nY_valid = data[data.date_block_num == 33]['item_cnt_month']#\u4ea4\u53c9\u9a8c\u8bc1\u7684\u6807\u7b7e\ndel data##\u5220\u9664\u6570\u636e\u96c6\u51cf\u5c11\u5360\u7528\u5185\u5b58\ngc.collect()##\u5783\u573e\u56de\u6536\u673a\u5236","a4c0c32b":"from sklearn.preprocessing import MinMaxScaler ##\u6570\u636e\u5f52\u4e00\u5316\nminMax = MinMaxScaler()    \n\n\nX_zong_std = minMax.fit_transform(X_zong.iloc[:,:-7])  ##\u53d6\u6240\u6709\u7684\u884c\uff0c\u9664\u4e86\u540e\u4e03\u5217\u7684\u6240\u6709\u7684\nX_zong.iloc[:,:-7] = pd.DataFrame(np.vstack(X_zong_std),columns=X_zong.columns[:-7])\nX_zong.iloc[:,:-7] = downcast_dtypes(X_zong.iloc[:,:-7])#\u8f6c\u6362\u6570\u636e\u7c7b\u578b\uff0c\u4e3a\u4e86\u51cf\u5c11\u5185\u5b58\n\n##\u8fd9\u5c31\u662f\u6392\u9664\u51fa\u53bb\u7684\u540e\u4e03\u5217\nX_zong['week0'] = X_zong['week0'].astype(np.int8)\nX_zong['week1'] = X_zong['week1'].astype(np.int8)\nX_zong['week2'] = X_zong['week2'].astype(np.int8)\nX_zong['week3'] = X_zong['week3'].astype(np.int8)\nX_zong['week4'] = X_zong['week4'].astype(np.int8)\nX_zong['week5'] = X_zong['week5'].astype(np.int8)\nX_zong['week6'] = X_zong['week6'].astype(np.int8)\n\ndel X_zong_std\ngc.collect()","ec1aeac3":"X_train = X_zong[X_zong.date_block_num < 0.96679688]\nX_valid = X_zong[X_zong.date_block_num == 0.96679688]\nX_test = X_zong[X_zong.date_block_num == 1]\ndel X_zong\ngc.collect()","4082646c":"##\u53c2\u6570\u53ef\u4ee5\u81ea\u5df1\u6539\nts = time.time()\n\nmodel = XGBRegressor(\n    max_depth=10,\n    n_estimators=1000,\n    min_child_weight=0.5, \n    colsample_bytree=0.9, \n    subsample=0.8, \n    eta=0.1,    \n    seed=1)\n\nmodel.fit(\n    X_train, \n    Y_train, \n    eval_metric=\"rmse\", \n    eval_set=[(X_train, Y_train), (X_valid, Y_valid)], \n    verbose=True, \n    early_stopping_rounds = 10)\n\ntime.time() - ts","1b9a9f6b":"plot_features(model, (10,14))","5b55817e":"Y_test = model.predict(X_test).clip(0, 20)##clip0-20\u4e4b\u95f4\ntest = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv').set_index('ID')\n\nsubmission = pd.DataFrame({\n    \"ID\": test.index, \n    \"item_cnt_month\": Y_test\n})\nsubmission.to_csv('xgb_submission1.csv', index=False)","f30d9b75":"## \u8bfb\u5165\u4fdd\u5b58\u597d\u7684\u6570\u636e","201b8e79":"## \u4fdd\u5b58\u4e3a\u81ea\u5df1\u6240\u9700\u8981\u7684\u6570\u636e","b0b9e818":"## \u6a21\u578b\u7684\u8bad\u7ec3--lightgbm\u3001catboost \uff0c\u96c6\u6210\uff08\u5806\u53e0\uff09"}}