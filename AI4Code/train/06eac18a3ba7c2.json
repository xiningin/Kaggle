{"cell_type":{"f548feff":"code","63d9e629":"code","5ecdd198":"code","1c7cb945":"code","4e7ad7f9":"code","56d007d6":"code","fb6fc75f":"code","a59dca44":"code","50dcb94d":"code","1075a51f":"code","b7bac211":"code","71593e98":"code","ec32c956":"code","16ef20e5":"code","feab8c82":"code","0fb87542":"code","40f00d73":"code","f552ad67":"code","3feed427":"code","dfdf35f5":"code","b4468dd7":"code","8ce16f9a":"code","28bcca20":"code","1910113b":"code","ca1ef2fc":"code","dcfc9b65":"code","570cf249":"code","9e60fdb8":"code","6b5c4fb7":"code","41ebcbe0":"code","33851c87":"code","83892d36":"code","9749245c":"code","a5874757":"code","519ff6b6":"code","4f2083ee":"code","8b3a601e":"code","81c6f444":"code","9dda6ee5":"code","99d3521e":"code","cd912e8c":"code","c23c40a0":"code","51c0ed08":"code","8a33a404":"code","d840580d":"code","9a404b04":"markdown","c92d3692":"markdown","3e9f4b8d":"markdown","78cab9b7":"markdown","4c428723":"markdown","747387a4":"markdown","e067937d":"markdown","aca01395":"markdown","260f9fb8":"markdown","6280e0a9":"markdown","0eada813":"markdown","1593e216":"markdown","26b62bb4":"markdown","721af938":"markdown","f9785dec":"markdown","ad074476":"markdown","91de8b09":"markdown","a6ecaf36":"markdown","dc7f8dd8":"markdown","82e14897":"markdown","c0cde9d5":"markdown","6b30d653":"markdown","95b766a3":"markdown","bec38a36":"markdown","d567346d":"markdown","be4e65f9":"markdown","404f73a7":"markdown","c598938e":"markdown","08b281bf":"markdown","41842d8b":"markdown","1ab91e8c":"markdown","16d470ab":"markdown","550f1e7a":"markdown"},"source":{"f548feff":"def token_level_to_char_level(text, offsets, preds):\n    probas_char = np.zeros(len(text))\n    for i, offset in enumerate(offsets):\n        if offset[0] or offset[1]: # remove padding and sentiment\n            probas_char[offset[0]:offset[1]] = preds[i]\n    \n    return probas_char","63d9e629":"import re\nimport os\nimport gc\nimport time\nimport torch\nimport pickle\nimport string\nimport random\nimport warnings\nimport datetime\nimport itertools\nimport tokenizers\nimport numpy as np\nimport transformers\nimport pandas as pd\nimport torch.nn as nn\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm\nfrom torch.optim import Adam\nfrom torch.utils.data import *\nfrom torch.nn import functional as F\n\n\n# from torchcontrib.optim import SWA\nfrom torch.utils.data.sampler import *\nfrom torch.utils.data import DataLoader\nfrom keras.preprocessing.text import Tokenizer\nfrom sklearn.model_selection import StratifiedKFold\nfrom keras.preprocessing.sequence import pad_sequences\nfrom transformers import AdamW, get_linear_schedule_with_warmup\n\nwarnings.filterwarnings(\"ignore\")","5ecdd198":"def seed_everything(seed):\n    \"\"\"\n    Seeds basic parameters for reproductibility of results\n    \n    Arguments:\n        seed {int} -- Number of the seed\n    \"\"\"\n    random.seed(seed)\n    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    \nSEED = 2020\nseed_everything(SEED)","1c7cb945":"DATA_PATH = \"..\/input\/tweet-sentiment-extraction\/\"\nPKL_PATH = \"..\/input\/tweet-char-lvl-preds\/\"\n\nK = 5\nNUM_WORKERS = 4","4e7ad7f9":"df_test = pd.read_csv(DATA_PATH + 'test.csv').fillna('')\ndf_test['selected_text'] = ''\nsub = pd.read_csv(DATA_PATH + 'sample_submission.csv')","56d007d6":"MODELS = [\n    ('bert-base-uncased-', 'theo'),\n    ('bert-wwm-neutral-', 'theo'),\n    (\"roberta-\", 'hk'),\n    (\"distil_\", 'hk'),\n    (\"large_\", 'hk'),\n]\n\nadd_spaces_to = [\"bert_\", 'xlnet_', 'electra_', 'bertweet-']","fb6fc75f":"%%time\n!python ..\/input\/distil-roberta\/infer.py","a59dca44":"%%time\n!python ..\/input\/roberta-base\/infer.py","50dcb94d":"%%time\n!python ..\/input\/roberta-large-code\/infer.py","1075a51f":"%%time\n!python ..\/input\/tweet-inference-scripts\/inference_bert_wwm.py","b7bac211":"%%time\n!python ..\/input\/tweet-inference-scripts\/inference_bert_base.py","71593e98":"def create_input_data(models):\n    char_pred_test_starts = []\n    char_pred_test_ends = []\n\n    for model, _ in models:\n        with open(model + 'char_pred_test_start.pkl', \"rb\") as fp:   #Pickling\n            probas = pickle.load(fp)  \n\n            if model in add_spaces_to:\n                probas = [np.concatenate([np.array([0]), p]) for p in probas]\n\n            char_pred_test_starts.append(probas)\n\n        with open(model + 'char_pred_test_end.pkl', \"rb\") as fp:   #Pickling\n            probas = pickle.load(fp)\n\n            if model in add_spaces_to:\n                probas = [np.concatenate([np.array([0]), p]) for p in probas]\n\n            char_pred_test_ends.append(probas)\n            \n    char_pred_test_start = [np.concatenate([char_pred_test_starts[m][i][:, np.newaxis] for m in range(len(models))], \n                                           1) for i in range(len(char_pred_test_starts[0]))]\n\n    char_pred_test_end = [np.concatenate([char_pred_test_ends[m][i][:, np.newaxis] for m in range(len(models))], \n                                         1) for i in range(len(char_pred_test_starts[0]))]\n    \n    return char_pred_test_start, char_pred_test_end","ec32c956":"char_pred_test_start, char_pred_test_end = create_input_data(MODELS)","16ef20e5":"def reorder(order_source, order_target, preds):\n#     assert len(order_source) == len(order_target) and len(order_target) == len(preds)\n    order_source = list(order_source)\n    new_preds = []\n    for tgt_idx in order_target:\n        new_idx = order_source.index(tgt_idx)\n        new_preds.append(preds[new_idx])\n        \n    return new_preds\n\n\ndf_train = pd.read_csv(DATA_PATH + 'train.csv').dropna().reset_index(drop=True)\ndf_train = df_train.sample(frac=1, random_state=SEED).reset_index(drop=True)\norder_t = list(df_train['textID'].values)\n\ndf_train = pd.read_csv(DATA_PATH + 'train.csv').dropna()\ndf_train = df_train.sample(frac=1, random_state=50898).reset_index(drop=True)\norder_hk = list(df_train['textID'].values)\n\nORDERS = {\n    'theo': order_t,\n    'hk': order_hk,\n}","feab8c82":"char_pred_oof_starts = []\nchar_pred_oof_ends = []\n\nfor model, author in tqdm(MODELS):\n    with open(PKL_PATH + model + 'char_pred_oof_start.pkl', \"rb\") as fp:   #Pickling\n        probas = pickle.load(fp)\n        \n        if author != 'hk':\n            probas = reorder(ORDERS[author], ORDERS['hk'], probas)\n        \n        if model in add_spaces_to:\n            probas = [np.concatenate([np.array([0]), p]) for p in probas]\n            \n        char_pred_oof_starts.append(probas)\n\n    with open(PKL_PATH + model + 'char_pred_oof_end.pkl', \"rb\") as fp:   #Pickling\n        probas = pickle.load(fp)\n        \n        if model in add_spaces_to:\n            probas = [np.concatenate([np.array([0]), p]) for p in probas]\n        \n        if author != 'hk':\n            probas = reorder(ORDERS[author], ORDERS['hk'], probas)\n            \n        char_pred_oof_ends.append(probas)","0fb87542":"n_models = len(MODELS)\n\nchar_pred_oof_start = [np.concatenate([char_pred_oof_starts[m][i][:, np.newaxis] for m in range(n_models)], \n                                      1) for i in range(len(df_train))]\n\nchar_pred_oof_end = [np.concatenate([char_pred_oof_ends[m][i][:, np.newaxis] for m in range(n_models)], \n                                      1) for i in range(len(df_train))]","40f00d73":"preds = {\n    'test_start': np.array(char_pred_test_start),\n    'test_end': np.array(char_pred_test_end),\n    'oof_start': np.array(char_pred_oof_start),\n    'oof_end': np.array(char_pred_oof_end),\n}\n\nmodel_names = [a + ' : ' + m for m, a in MODELS]\ncombs = [model_names]\n\nprint('Using models : ', combs)","f552ad67":"tokenizer = Tokenizer(num_words=None, char_level=True, oov_token='UNK', lower=True)\ntokenizer.fit_on_texts(df_train['text'].values)\nlen_voc = len(tokenizer.word_index) + 1\n\nX_train = tokenizer.texts_to_sequences(df_train['text'].values)\nX_test = tokenizer.texts_to_sequences(df_test['text'].values)","3feed427":"def get_start_end_string(text, selected_text):\n    len_selected_text = len(selected_text)\n    idx_start, idx_end = 0, 0\n    \n    candidates_idx = [i for i, e in enumerate(text) if e == selected_text[0]]\n    for idx in candidates_idx:\n        if text[idx : idx + len_selected_text] == selected_text:\n            idx_start = idx\n            idx_end = idx + len_selected_text\n            break\n    assert text[idx_start: idx_end] == selected_text, f'\"{text[idx_start: idx_end]}\" instead of \"{selected_text}\" in \"{text}\"'\n\n    char_targets = np.zeros(len(text))\n    char_targets[idx_start: idx_end] = 1\n    \n    return idx_start, idx_end","dfdf35f5":"class TweetCharDataset(Dataset):\n    def __init__(self, df, X, start_probas, end_probas, n_models=1, max_len=150, train=True):\n        self.max_len = max_len\n\n        self.X = pad_sequences(X, maxlen=max_len, padding='post', truncating='post')\n        \n        self.start_probas = np.zeros((len(df), max_len, n_models), dtype=float)\n        for i, p in enumerate(start_probas):\n            len_ = min(len(p), max_len)\n            self.start_probas[i, :len_] = p[:len_]\n\n        self.end_probas = np.zeros((len(df), max_len, n_models), dtype=float)\n        for i, p in enumerate(end_probas):\n            len_ = min(len(p), max_len)\n            self.end_probas[i, :len_] = p[:len_]\n            \n        self.sentiments_list = ['positive', 'neutral', 'negative']\n        \n        self.texts = df['text'].values\n        self.selected_texts = df['selected_text'].values if train else [''] * len(df)\n        self.sentiments = df['sentiment'].values\n        self.sentiments_input = [self.sentiments_list.index(s) for s in self.sentiments]\n        \n        # Targets\n        self.seg_label = np.zeros((len(df), max_len))\n        \n        if train:\n            self.start_idx = []\n            self.end_idx = []\n            for i, (text, sel_text) in enumerate(zip(df['text'].values, df['selected_text'].values)):\n                start, end = get_start_end_string(text, sel_text.strip())\n                self.start_idx.append(start)\n                self.end_idx.append(end)\n                self.seg_label[i, start:end] = 1\n        else:\n            self.start_idx = [0] * len(df)\n            self.end_idx = [0] * len(df)\n        \n\n    def __len__(self):\n        return len(self.texts)\n\n    def __getitem__(self, idx):\n        return {\n            'ids': torch.tensor(self.X[idx], dtype=torch.long),\n            'probas_start': torch.tensor(self.start_probas[idx]).float(),\n            'probas_end': torch.tensor(self.end_probas[idx]).float(),\n            'target_start': torch.tensor(self.start_idx[idx], dtype=torch.long),\n            'target_end': torch.tensor(self.end_idx[idx], dtype=torch.long),\n            'text': self.texts[idx],\n            'selected_text': self.selected_texts[idx],\n            'sentiment': self.sentiments[idx],\n            'sentiment_input': torch.tensor(self.sentiments_input[idx]),\n            'seg_label': torch.tensor(self.seg_label[idx])\n        }","b4468dd7":"def ce_loss(\n    pred, truth, smoothing=False, neighbour_smoothing=False, trg_pad_idx=-1, eps=0.1\n):\n    truth = truth.contiguous().view(-1)\n\n    one_hot = torch.zeros_like(pred).scatter(1, truth.view(-1, 1), 1)\n    one_hot_ = one_hot.clone()\n\n    if smoothing:\n        n_class = pred.size(1)\n        one_hot = one_hot * (1 - eps) + (1 - one_hot) * eps \/ (n_class - 1)\n\n        if neighbour_smoothing:\n            n = 1\n            for i in range(1, n):\n                one_hot[:, :-i] += ((n - i) * eps) * one_hot_[:, i:]\n                one_hot[:, i:] += ((n - i) * eps) * one_hot_[:, :-i]\n            one_hot = one_hot \/ one_hot.sum(1, keepdim=True)\n\n    loss = -one_hot * F.log_softmax(pred, dim=1)\n\n    if trg_pad_idx >= 0:\n        loss = loss.sum(dim=1)\n        non_pad_mask = truth.ne(trg_pad_idx)\n        loss = loss.masked_select(non_pad_mask)\n\n    return loss.sum()","8ce16f9a":"def loss_fn(start_logits, end_logits, start_positions, end_positions, config):\n\n    bs = start_logits.size(0)\n\n    start_loss = ce_loss(\n        start_logits,\n        start_positions,\n        smoothing=config[\"smoothing\"],\n        eps=config[\"eps\"],\n        neighbour_smoothing=config[\"neighbour_smoothing\"],\n    )\n\n    end_loss = ce_loss(\n        end_logits,\n        end_positions,\n        smoothing=config[\"smoothing\"],\n        eps=config[\"eps\"],\n        neighbour_smoothing=config[\"neighbour_smoothing\"],\n    )\n\n    total_loss = start_loss + end_loss\n\n    return total_loss \/ bs","28bcca20":"def jaccard_from_logits_string(data, start_logits, end_logits):\n    \n    n = start_logits.size(0)\n    score = 0\n\n    start_logits = torch.softmax(start_logits, dim=1).cpu().detach().numpy()\n    end_logits = torch.softmax(end_logits, dim=1).cpu().detach().numpy()\n\n    for i in range(n):\n        start_idx = np.argmax(start_logits[i])\n        end_idx = np.argmax(end_logits[i])\n        text = data[\"text\"][i]\n        pred = text[start_idx: end_idx]\n\n        score += jaccard(data[\"selected_text\"][i], pred)\n\n    return score","1910113b":"def jaccard(str1, str2):\n    a = set(str1.lower().split())\n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    try:\n        return float(len(c)) \/ (len(a) + len(b) - len(c))\n    except:\n        return 0","ca1ef2fc":"def predict(model, dataset, batch_size=32):\n    model.eval()\n    start_probas = []\n    end_probas = []\n\n    loader = DataLoader(\n        dataset, batch_size=batch_size, shuffle=False, num_workers=NUM_WORKERS\n    )\n\n    with torch.no_grad():\n        for data in loader:\n            start_logits, end_logits = model(\n                data[\"ids\"].cuda(), \n                data['sentiment_input'].cuda(), \n                data['probas_start'].cuda(), \n                data['probas_end'].cuda()\n            )\n\n            start_probs = torch.softmax(start_logits, dim=1).cpu().detach().numpy()\n            end_probs = torch.softmax(end_logits, dim=1).cpu().detach().numpy()\n\n            for s, e in zip(start_probs, end_probs):\n                start_probas.append(list(s))\n                end_probas.append(list(e))\n\n    return start_probas, end_probas","dcfc9b65":"from collections import defaultdict\nfrom itertools import chain\nfrom torch.optim import Optimizer\nimport torch\nimport warnings\n\n\nclass SWA(Optimizer):\n    def __init__(self, optimizer, swa_start=None, swa_freq=None, swa_lr=None):\n        r\"\"\"Implements Stochastic Weight Averaging (SWA).\n        Stochastic Weight Averaging was proposed in `Averaging Weights Leads to\n        Wider Optima and Better Generalization`_ by Pavel Izmailov, Dmitrii\n        Podoprikhin, Timur Garipov, Dmitry Vetrov and Andrew Gordon Wilson\n        (UAI 2018).\n        SWA is implemented as a wrapper class taking optimizer instance as input\n        and applying SWA on top of that optimizer.\n        SWA can be used in two modes: automatic and manual. In the automatic\n        mode SWA running averages are automatically updated every\n        :attr:`swa_freq` steps after :attr:`swa_start` steps of optimization. If\n        :attr:`swa_lr` is provided, the learning rate of the optimizer is reset\n        to :attr:`swa_lr` at every step starting from :attr:`swa_start`. To use\n        SWA in automatic mode provide values for both :attr:`swa_start` and\n        :attr:`swa_freq` arguments.\n        Alternatively, in the manual mode, use :meth:`update_swa` or\n        :meth:`update_swa_group` methods to update the SWA running averages.\n        In the end of training use `swap_swa_sgd` method to set the optimized\n        variables to the computed averages.\n        Args:\n            optimizer (torch.optim.Optimizer): optimizer to use with SWA\n            swa_start (int): number of steps before starting to apply SWA in\n                automatic mode; if None, manual mode is selected (default: None)\n            swa_freq (int): number of steps between subsequent updates of\n                SWA running averages in automatic mode; if None, manual mode is\n                selected (default: None)\n            swa_lr (float): learning rate to use starting from step swa_start\n                in automatic mode; if None, learning rate is not changed\n                (default: None)\n        Examples:\n            >>> # automatic mode\n            >>> base_opt = torch.optim.SGD(model.parameters(), lr=0.1)\n            >>> opt = torchcontrib.optim.SWA(\n            >>>                 base_opt, swa_start=10, swa_freq=5, swa_lr=0.05)\n            >>> for _ in range(100):\n            >>>     opt.zero_grad()\n            >>>     loss_fn(model(input), target).backward()\n            >>>     opt.step()\n            >>> opt.swap_swa_sgd()\n            >>> # manual mode\n            >>> opt = torchcontrib.optim.SWA(base_opt)\n            >>> for i in range(100):\n            >>>     opt.zero_grad()\n            >>>     loss_fn(model(input), target).backward()\n            >>>     opt.step()\n            >>>     if i > 10 and i % 5 == 0:\n            >>>         opt.update_swa()\n            >>> opt.swap_swa_sgd()\n        .. note::\n            SWA does not support parameter-specific values of :attr:`swa_start`,\n            :attr:`swa_freq` or :attr:`swa_lr`. In automatic mode SWA uses the\n            same :attr:`swa_start`, :attr:`swa_freq` and :attr:`swa_lr` for all\n            parameter groups. If needed, use manual mode with\n            :meth:`update_swa_group` to use different update schedules for\n            different parameter groups.\n        .. note::\n            Call :meth:`swap_swa_sgd` in the end of training to use the computed\n            running averages.\n        .. note::\n            If you are using SWA to optimize the parameters of a Neural Network\n            containing Batch Normalization layers, you need to update the\n            :attr:`running_mean` and :attr:`running_var` statistics of the\n            Batch Normalization module. You can do so by using\n            `torchcontrib.optim.swa.bn_update` utility.\n        .. note::\n            See the blogpost\n            https:\/\/pytorch.org\/blog\/stochastic-weight-averaging-in-pytorch\/\n            for an extended description of this SWA implementation.\n        .. note::\n            The repo https:\/\/github.com\/izmailovpavel\/contrib_swa_examples\n            contains examples of using this SWA implementation.\n        .. _Averaging Weights Leads to Wider Optima and Better Generalization:\n            https:\/\/arxiv.org\/abs\/1803.05407\n        .. _Improving Consistency-Based Semi-Supervised Learning with Weight\n            Averaging:\n            https:\/\/arxiv.org\/abs\/1806.05594\n        \"\"\"\n        self._auto_mode, (self.swa_start, self.swa_freq) = \\\n            self._check_params(self, swa_start, swa_freq)\n        self.swa_lr = swa_lr\n\n        if self._auto_mode:\n            if swa_start < 0:\n                raise ValueError(\"Invalid swa_start: {}\".format(swa_start))\n            if swa_freq < 1:\n                raise ValueError(\"Invalid swa_freq: {}\".format(swa_freq))\n        else:\n            if self.swa_lr is not None:\n                warnings.warn(\n                    \"Some of swa_start, swa_freq is None, ignoring swa_lr\")\n            # If not in auto mode make all swa parameters None\n            self.swa_lr = None\n            self.swa_start = None\n            self.swa_freq = None\n\n        if self.swa_lr is not None and self.swa_lr < 0:\n            raise ValueError(\"Invalid SWA learning rate: {}\".format(swa_lr))\n\n        self.optimizer = optimizer\n\n        self.defaults = self.optimizer.defaults\n        self.param_groups = self.optimizer.param_groups\n        self.state = defaultdict(dict)\n        self.opt_state = self.optimizer.state\n        for group in self.param_groups:\n            group['n_avg'] = 0\n            group['step_counter'] = 0\n\n    @staticmethod\n    def _check_params(self, swa_start, swa_freq):\n        params = [swa_start, swa_freq]\n        params_none = [param is None for param in params]\n        if not all(params_none) and any(params_none):\n            warnings.warn(\n                \"Some of swa_start, swa_freq is None, ignoring other\")\n        for i, param in enumerate(params):\n            if param is not None and not isinstance(param, int):\n                params[i] = int(param)\n                warnings.warn(\"Casting swa_start, swa_freq to int\")\n        return not any(params_none), params\n\n    def _reset_lr_to_swa(self):\n        if self.swa_lr is None:\n            return\n        for param_group in self.param_groups:\n            if param_group['step_counter'] >= self.swa_start:\n                param_group['lr'] = self.swa_lr\n\n    def update_swa_group(self, group):\n        r\"\"\"Updates the SWA running averages for the given parameter group.\n        Arguments:\n            param_group (dict): Specifies for what parameter group SWA running\n                averages should be updated\n        Examples:\n            >>> # automatic mode\n            >>> base_opt = torch.optim.SGD([{'params': [x]},\n            >>>             {'params': [y], 'lr': 1e-3}], lr=1e-2, momentum=0.9)\n            >>> opt = torchcontrib.optim.SWA(base_opt)\n            >>> for i in range(100):\n            >>>     opt.zero_grad()\n            >>>     loss_fn(model(input), target).backward()\n            >>>     opt.step()\n            >>>     if i > 10 and i % 5 == 0:\n            >>>         # Update SWA for the second parameter group\n            >>>         opt.update_swa_group(opt.param_groups[1])\n            >>> opt.swap_swa_sgd()\n        \"\"\"\n        for p in group['params']:\n            param_state = self.state[p]\n            if 'swa_buffer' not in param_state:\n                param_state['swa_buffer'] = torch.zeros_like(p.data)\n            buf = param_state['swa_buffer']\n            virtual_decay = 1 \/ float(group[\"n_avg\"] + 1)\n            diff = (p.data - buf) * virtual_decay\n            buf.add_(diff)\n        group[\"n_avg\"] += 1\n\n    def update_swa(self):\n        r\"\"\"Updates the SWA running averages of all optimized parameters.\n        \"\"\"\n        for group in self.param_groups:\n            self.update_swa_group(group)\n\n    def swap_swa_sgd(self):\n        r\"\"\"Swaps the values of the optimized variables and swa buffers.\n        It's meant to be called in the end of training to use the collected\n        swa running averages. It can also be used to evaluate the running\n        averages during training; to continue training `swap_swa_sgd`\n        should be called again.\n        \"\"\"\n        for group in self.param_groups:\n            for p in group['params']:\n                param_state = self.state[p]\n                if 'swa_buffer' not in param_state:\n                    # If swa wasn't applied we don't swap params\n                    warnings.warn(\n                        \"SWA wasn't applied to param {}; skipping it\".format(p))\n                    continue\n                buf = param_state['swa_buffer']\n                tmp = torch.empty_like(p.data)\n                tmp.copy_(p.data)\n                p.data.copy_(buf)\n                buf.copy_(tmp)\n\n    def step(self, closure=None):\n        r\"\"\"Performs a single optimization step.\n        In automatic mode also updates SWA running averages.\n        \"\"\"\n        self._reset_lr_to_swa()\n        loss = self.optimizer.step(closure)\n        for group in self.param_groups:\n            group[\"step_counter\"] += 1\n            steps = group[\"step_counter\"]\n            if self._auto_mode:\n                if steps > self.swa_start and steps % self.swa_freq == 0:\n                    self.update_swa_group(group)\n        return loss\n\n    def state_dict(self):\n        r\"\"\"Returns the state of SWA as a :class:`dict`.\n        It contains three entries:\n            * opt_state - a dict holding current optimization state of the base\n                optimizer. Its content differs between optimizer classes.\n            * swa_state - a dict containing current state of SWA. For each\n                optimized variable it contains swa_buffer keeping the running\n                average of the variable\n            * param_groups - a dict containing all parameter groups\n        \"\"\"\n        opt_state_dict = self.optimizer.state_dict()\n        swa_state = {(id(k) if isinstance(k, torch.Tensor) else k): v\n                     for k, v in self.state.items()}\n        opt_state = opt_state_dict[\"state\"]\n        param_groups = opt_state_dict[\"param_groups\"]\n        return {\"opt_state\": opt_state, \"swa_state\": swa_state,\n                \"param_groups\": param_groups}\n\n    def load_state_dict(self, state_dict):\n        r\"\"\"Loads the optimizer state.\n        Args:\n            state_dict (dict): SWA optimizer state. Should be an object returned\n                from a call to `state_dict`.\n        \"\"\"\n        swa_state_dict = {\"state\": state_dict[\"swa_state\"],\n                          \"param_groups\": state_dict[\"param_groups\"]}\n        opt_state_dict = {\"state\": state_dict[\"opt_state\"],\n                          \"param_groups\": state_dict[\"param_groups\"]}\n        super(SWA, self).load_state_dict(swa_state_dict)\n        self.optimizer.load_state_dict(opt_state_dict)\n        self.opt_state = self.optimizer.state\n\n    def add_param_group(self, param_group):\n        r\"\"\"Add a param group to the :class:`Optimizer` s `param_groups`.\n        This can be useful when fine tuning a pre-trained network as frozen\n        layers can be made trainable and added to the :class:`Optimizer` as\n        training progresses.\n        Args:\n            param_group (dict): Specifies what Tensors should be optimized along\n            with group specific optimization options.\n        \"\"\"\n        param_group['n_avg'] = 0\n        param_group['step_counter'] = 0\n        self.optimizer.add_param_group(param_group)\n\n    @staticmethod\n    def bn_update(loader, model, device=None):\n        r\"\"\"Updates BatchNorm running_mean, running_var buffers in the model.\n        It performs one pass over data in `loader` to estimate the activation\n        statistics for BatchNorm layers in the model.\n        Args:\n            loader (torch.utils.data.DataLoader): dataset loader to compute the\n                activation statistics on. Each data batch should be either a\n                tensor, or a list\/tuple whose first element is a tensor\n                containing data.\n            model (torch.nn.Module): model for which we seek to update BatchNorm\n                statistics.\n            device (torch.device, optional): If set, data will be trasferred to\n                :attr:`device` before being passed into :attr:`model`.\n        \"\"\"\n        if not _check_bn(model):\n            return\n        was_training = model.training\n        model.train()\n        momenta = {}\n        model.apply(_reset_bn)\n        model.apply(lambda module: _get_momenta(module, momenta))\n        n = 0\n        for input in loader:\n            if isinstance(input, (list, tuple)):\n                input = input[0]\n            b = input.size(0)\n\n            momentum = b \/ float(n + b)\n            for module in momenta.keys():\n                module.momentum = momentum\n\n            if device is not None:\n                input = input.to(device)\n\n            model(input)\n            n += b\n\n        model.apply(lambda module: _set_momenta(module, momenta))\n        model.train(was_training)\n\n\n# BatchNorm utils\ndef _check_bn_apply(module, flag):\n    if issubclass(module.__class__, torch.nn.modules.batchnorm._BatchNorm):\n        flag[0] = True\n\n\ndef _check_bn(model):\n    flag = [False]\n    model.apply(lambda module: _check_bn_apply(module, flag))\n    return flag[0]\n\n\ndef _reset_bn(module):\n    if issubclass(module.__class__, torch.nn.modules.batchnorm._BatchNorm):\n        module.running_mean = torch.zeros_like(module.running_mean)\n        module.running_var = torch.ones_like(module.running_var)\n\n\ndef _get_momenta(module, momenta):\n    if issubclass(module.__class__, torch.nn.modules.batchnorm._BatchNorm):\n        momenta[module] = module.momentum\n\n\ndef _set_momenta(module, momenta):\n    if issubclass(module.__class__, torch.nn.modules.batchnorm._BatchNorm):\n        module.momentum = momenta[module]","570cf249":"def fit(\n    model,\n    train_dataset,\n    val_dataset,\n    loss_config,\n    epochs=5,\n    swa_first_epoch=5,\n    batch_size=8,\n    acc_steps=1,\n    weight_decay=0,\n    warmup_prop=0.0,\n    lr=5e-4,\n    cp=False,\n    use_len_sampler=True,\n):\n    best_jac = 0\n    \n    train_loader = DataLoader(\n        train_dataset, batch_size=batch_size, num_workers=NUM_WORKERS\n    )\n\n    val_loader = DataLoader(\n        val_dataset, batch_size=batch_size, shuffle=False, num_workers=NUM_WORKERS\n    )\n\n    optimizer = Adam(model.parameters(), lr=lr) #, betas=(0.5, 0.999))\n    optimizer = SWA(optimizer)\n\n    n_steps = float(epochs * len(train_loader)) \/ float(acc_steps)\n    num_warmup_steps = int(warmup_prop * n_steps)\n\n    scheduler = get_linear_schedule_with_warmup(\n        optimizer, num_warmup_steps, n_steps\n    )\n\n    total_steps = 0\n    for epoch in range(epochs):\n        model.train()\n        start_time = time.time()\n\n        optimizer.zero_grad()\n        avg_loss = 0\n\n        for step, data in enumerate(train_loader):\n            total_steps += 1\n            start_logits, end_logits = model(\n                data[\"ids\"].cuda(), \n                data['sentiment_input'].cuda(), \n                data['probas_start'].cuda(), \n                data['probas_end'].cuda()\n            )\n\n            loss = loss_fn(\n                start_logits,\n                end_logits,\n                data[\"target_start\"].cuda(),\n                data[\"target_end\"].cuda(),\n                config=loss_config,\n            )\n\n            avg_loss += loss.item() \/ len(train_loader)\n            loss.backward()\n\n            if (step + 1) % acc_steps == 0:\n                optimizer.step()\n                scheduler.step()\n                model.zero_grad()\n        model.eval()\n        avg_val_loss = 0.0\n        val_jac = 0.0\n\n        if epoch + 1 >= swa_first_epoch:\n            optimizer.update_swa()\n            optimizer.swap_swa_sgd()\n\n        with torch.no_grad():\n            for data in val_loader:\n                \n                start_logits, end_logits = model(\n                    data[\"ids\"].cuda(), \n                    data['sentiment_input'].cuda(), \n                    data['probas_start'].cuda(), \n                    data['probas_end'].cuda()\n                )\n\n                loss = loss_fn(\n                    start_logits.detach(),\n                    end_logits.detach(),\n                    data[\"target_start\"].cuda().detach(),\n                    data[\"target_end\"].cuda().detach(),\n                    config=loss_config,\n                )\n\n                avg_val_loss += loss.item() \/ len(val_loader)\n\n                val_jac += jaccard_from_logits_string(data, start_logits, end_logits) \/ len(\n                    val_dataset\n                )\n        \n        if epoch + 1 >= swa_first_epoch:\n            optimizer.swap_swa_sgd()\n            \n        if val_jac >= best_jac and cp:\n            save_model_weights(model, \"checkpoint.pt\", verbose=0)\n            best_jac = val_jac\n\n        dt = time.time() - start_time\n        lr = scheduler.get_lr()[0]\n        print(f\"Epoch {epoch + 1}\/{epochs} \\t lr={lr:.1e} \\t t={dt:.0f}s \\t\", end=\"\")\n        print(\n            f\"loss={avg_loss:.3f} \\t val_loss={avg_val_loss:.3f} \\t val_jaccard={val_jac:.4f}\"\n        )\n\n    del loss, data, avg_val_loss, avg_loss, train_loader, val_loader\n    torch.cuda.empty_cache()\n    gc.collect()\n    \n    if epoch >= swa_first_epoch: # back to swa weights\n        optimizer.swap_swa_sgd()\n\n    return best_jac if cp else val_jac","9e60fdb8":"import torch\nimport torch.nn as nn\n\nclass ConvBlock(nn.Module):\n    def __init__(self, in_channels, out_channels, kernel_size=3, stride=1, dilation=1, padding=\"same\", use_bn=True):\n        super().__init__()\n        if padding == \"same\":\n            padding = kernel_size \/\/ 2 * dilation\n        \n        if use_bn:\n            self.conv = nn.Sequential(\n                nn.Conv1d(in_channels, out_channels, kernel_size, padding=padding, stride=stride, dilation=dilation),\n                nn.BatchNorm1d(out_channels),\n                nn.ReLU(),\n            )\n        else:\n            self.conv = nn.Sequential(\n                nn.Conv1d(in_channels, out_channels, kernel_size, padding=padding, stride=stride, dilation=dilation),\n                nn.ReLU(),\n            )\n                \n    def forward(self, x):\n        return self.conv(x)\n\nclass Waveblock(nn.Module):\n    def __init__(self, in_channels, out_channels, kernel_size=3, dilations=[1], padding=\"same\"):\n        super().__init__()\n        self.n = len(dilations)\n        \n        if padding == \"same\":\n            padding = kernel_size \/\/ 2\n            \n        self.init_conv = nn.Conv1d(in_channels, out_channels, 1)\n        \n        self.convs_tanh = nn.ModuleList([])\n        self.convs_sigm = nn.ModuleList([])\n        self.convs = nn.ModuleList([])\n        \n        for dilation in dilations:\n            self.convs_tanh.append(\n                nn.Sequential(\n                    nn.Conv1d(out_channels, out_channels, kernel_size, padding=padding*dilation, dilation=dilation),\n                    nn.Tanh(),\n                )\n            )\n            self.convs_sigm.append(\n                nn.Sequential(\n                    nn.Conv1d(out_channels, out_channels, kernel_size, padding=padding*dilation, dilation=dilation),\n                    nn.Sigmoid(),\n                )\n            )\n            self.convs.append(nn.Conv1d(out_channels, out_channels, 1))\n        \n    def forward(self, x):\n        x = self.init_conv(x)\n        res_x = x\n        \n        for i in range(self.n):\n            x_tanh = self.convs_tanh[i](x)\n            x_sigm = self.convs_sigm[i](x)\n            x = x_tanh * x_sigm\n            x = self.convs[i](x)\n            res_x = res_x + x\n        \n        return res_x","6b5c4fb7":"class TweetCharModel(nn.Module):\n    def __init__(self, len_voc, use_msd=True,\n                 embed_dim=64, lstm_dim=64, char_embed_dim=32, sent_embed_dim=32, ft_lstm_dim=32, n_models=1):\n        super().__init__()\n        self.use_msd = use_msd\n        \n        self.char_embeddings = nn.Embedding(len_voc, char_embed_dim)\n        self.sentiment_embeddings = nn.Embedding(3, sent_embed_dim)\n        \n        self.proba_lstm = nn.LSTM(n_models * 2, ft_lstm_dim, batch_first=True, bidirectional=True)\n        \n        self.lstm = nn.LSTM(char_embed_dim + ft_lstm_dim * 2 + sent_embed_dim, lstm_dim, batch_first=True, bidirectional=True)\n        self.lstm2 = nn.LSTM(lstm_dim * 2, lstm_dim, batch_first=True, bidirectional=True)\n\n        self.logits = nn.Sequential(\n            nn.Linear(lstm_dim *  4, lstm_dim),\n            nn.ReLU(),\n            nn.Linear(lstm_dim, 2),\n        )\n        \n        self.high_dropout = nn.Dropout(p=0.5)\n    \n    def forward(self, tokens, sentiment, start_probas, end_probas):\n        bs, T = tokens.size()\n        \n        probas = torch.cat([start_probas, end_probas], -1)\n        probas_fts, _ = self.proba_lstm(probas)\n\n        char_fts = self.char_embeddings(tokens)\n        \n        sentiment_fts = self.sentiment_embeddings(sentiment).view(bs, 1, -1)\n        sentiment_fts = sentiment_fts.repeat((1, T, 1))\n        \n        features = torch.cat([char_fts, sentiment_fts, probas_fts], -1)\n        features, _ = self.lstm(features)\n        features2, _ = self.lstm2(features)\n        \n        features = torch.cat([features, features2], -1)\n        \n        if self.use_msd and self.training:\n            logits = torch.mean(\n                torch.stack(\n                    [self.logits(self.high_dropout(features)) for _ in range(5)],\n                    dim=0,\n                    ),\n                dim=0,\n            )\n        else:\n            logits = self.logits(features)\n\n        start_logits, end_logits = logits[:, :, 0], logits[:, :, 1]\n\n        return start_logits, end_logits","41ebcbe0":"class WaveNet(nn.Module):\n    def __init__(self, len_voc, use_msd=True, dilations=[1], \n                 cnn_dim=64, char_embed_dim=32, sent_embed_dim=32, proba_cnn_dim=32, n_models=1, kernel_size=3, use_bn=True):\n        super().__init__()\n        self.use_msd = use_msd\n        \n        self.char_embeddings = nn.Embedding(len_voc, char_embed_dim)\n        self.sentiment_embeddings = nn.Embedding(3, sent_embed_dim)\n        \n        self.probas_cnn = ConvBlock(n_models * 2, proba_cnn_dim, kernel_size=kernel_size, use_bn=use_bn)\n         \n        self.cnn = nn.Sequential(\n            Waveblock(char_embed_dim + sent_embed_dim + proba_cnn_dim, cnn_dim, kernel_size=kernel_size, dilations=dilations),\n            nn.BatchNorm1d(cnn_dim),\n            Waveblock(cnn_dim, cnn_dim * 2, kernel_size=kernel_size, dilations=dilations),\n            nn.BatchNorm1d(cnn_dim * 2),\n            Waveblock(cnn_dim * 2 , cnn_dim * 4, kernel_size=kernel_size, dilations=dilations),\n            nn.BatchNorm1d(cnn_dim * 4),\n        )\n        \n        self.logits = nn.Sequential(\n            nn.Linear(cnn_dim * 4, cnn_dim),\n            nn.ReLU(),\n            nn.Linear(cnn_dim, 2),\n        )\n        \n        self.high_dropout = nn.Dropout(p=0.5)\n        \n    def forward(self, tokens, sentiment, start_probas, end_probas):\n        bs, T = tokens.size()\n        \n        probas = torch.cat([start_probas, end_probas], -1).permute(0, 2, 1)\n        probas_fts = self.probas_cnn(probas).permute(0, 2, 1)\n\n        char_fts = self.char_embeddings(tokens)\n        \n        sentiment_fts = self.sentiment_embeddings(sentiment).view(bs, 1, -1)\n        sentiment_fts = sentiment_fts.repeat((1, T, 1))\n        \n        x = torch.cat([char_fts, sentiment_fts, probas_fts], -1).permute(0, 2, 1)\n\n        features = self.cnn(x).permute(0, 2, 1) # [Bs x T x nb_ft]\n    \n        if self.use_msd and self.training:\n            logits = torch.mean(\n                torch.stack(\n                    [self.logits(self.high_dropout(features)) for _ in range(5)],\n                    dim=0,\n                    ),\n                dim=0,\n            )\n        else:\n            logits = self.logits(features)\n\n        start_logits, end_logits = logits[:, :, 0], logits[:, :, 1]\n\n        return start_logits, end_logits","33851c87":"class ConvNet(nn.Module):\n    def __init__(self, len_voc, use_msd=True,\n                 cnn_dim=64, char_embed_dim=32, sent_embed_dim=32, proba_cnn_dim=32, n_models=1, kernel_size=3, use_bn=False):\n        super().__init__()\n        self.use_msd = use_msd\n        \n        self.char_embeddings = nn.Embedding(len_voc, char_embed_dim)\n        self.sentiment_embeddings = nn.Embedding(3, sent_embed_dim)\n        \n        self.probas_cnn = ConvBlock(n_models * 2, proba_cnn_dim, kernel_size=kernel_size, use_bn=use_bn)\n         \n        self.cnn = nn.Sequential(\n            ConvBlock(char_embed_dim + sent_embed_dim + proba_cnn_dim, cnn_dim, kernel_size=kernel_size, use_bn=use_bn),\n            ConvBlock(cnn_dim, cnn_dim * 2, kernel_size=kernel_size, use_bn=use_bn),\n            ConvBlock(cnn_dim * 2 , cnn_dim * 4, kernel_size=kernel_size, use_bn=use_bn),\n            ConvBlock(cnn_dim * 4, cnn_dim * 8, kernel_size=kernel_size, use_bn=use_bn),\n        )\n        \n        self.logits = nn.Sequential(\n            nn.Linear(cnn_dim * 8, cnn_dim),\n            nn.ReLU(),\n            nn.Linear(cnn_dim, 2),\n        )\n        \n        self.high_dropout = nn.Dropout(p=0.5)\n        \n    def forward(self, tokens, sentiment, start_probas, end_probas):\n        bs, T = tokens.size()\n        \n        probas = torch.cat([start_probas, end_probas], -1).permute(0, 2, 1)\n        probas_fts = self.probas_cnn(probas).permute(0, 2, 1)\n\n        char_fts = self.char_embeddings(tokens)\n        \n        sentiment_fts = self.sentiment_embeddings(sentiment).view(bs, 1, -1)\n        sentiment_fts = sentiment_fts.repeat((1, T, 1))\n        \n        x = torch.cat([char_fts, sentiment_fts, probas_fts], -1).permute(0, 2, 1)\n\n        features = self.cnn(x).permute(0, 2, 1) # [Bs x T x nb_ft]\n    \n        if self.use_msd and self.training:\n            logits = torch.mean(\n                torch.stack(\n                    [self.logits(self.high_dropout(features)) for _ in range(5)],\n                    dim=0,\n                    ),\n                dim=0,\n            )\n        else:\n            logits = self.logits(features)\n\n        start_logits, end_logits = logits[:, :, 0], logits[:, :, 1]\n\n        return start_logits, end_logits","83892d36":"def k_fold(config, df_train, df_test, X_train, X_test, preds, len_voc, k=5, seed=42, save=True, model_name='model'):\n    time = str(datetime.datetime.now())[:16]\n    score = 0\n    splits = list(StratifiedKFold(n_splits=k, random_state=seed).split(X=df_train, y=df_train['sentiment']))\n    \n    pred_oof = [[[], []] for i in range(len(df_train))]\n    pred_tests = [] \n    \n    test_dataset = TweetCharDataset(\n        df_test, X_test, preds['test_start'], preds['test_end'], \n        max_len=config.max_len_val, train=False, n_models=config.n_models\n    )\n    \n    for i, (train_idx, val_idx) in enumerate(splits):\n        print(f\"\\n-------------   Fold {i + 1}  -------------\")\n        seed_everything(seed + i)\n\n        if config.model == 'rnn':\n            model = TweetCharModel(\n                len_voc,\n                use_msd=config.use_msd, \n                n_models=config.n_models,   \n                lstm_dim=config.lstm_dim,\n                ft_lstm_dim=config.ft_lstm_dim,\n                char_embed_dim=config.char_embed_dim,\n                sent_embed_dim=config.sent_embed_dim,\n            ).cuda()\n        elif config.model == 'cnn':\n            model = ConvNet(\n                len_voc,\n                use_msd=config.use_msd, \n                n_models=config.n_models,  \n                use_bn=config.use_bn,\n                cnn_dim=config.cnn_dim,\n                proba_cnn_dim=config.proba_cnn_dim,\n                char_embed_dim=config.char_embed_dim,\n                sent_embed_dim=config.sent_embed_dim,\n                kernel_size=config.kernel_size,\n            ).cuda()\n        else:\n            model = WaveNet(\n                len_voc,\n                use_msd=config.use_msd, \n                n_models=config.n_models,  \n                use_bn=config.use_bn,\n                cnn_dim=config.cnn_dim,\n                proba_cnn_dim=config.proba_cnn_dim,\n                char_embed_dim=config.char_embed_dim,\n                sent_embed_dim=config.sent_embed_dim,\n                kernel_size=config.kernel_size,\n                dilations=config.dilations, \n            ).cuda()\n        \n        model.zero_grad()\n\n        train_dataset = TweetCharDataset(\n            df_train.iloc[train_idx],\n            X_train[train_idx],\n            preds['oof_start'][train_idx],\n            preds['oof_end'][train_idx],\n            max_len=config.max_len,\n            n_models=config.n_models,\n        )\n        \n        val_dataset = TweetCharDataset(\n            df_train.iloc[val_idx], \n            X_train[val_idx], \n            preds['oof_start'][val_idx], \n            preds['oof_end'][val_idx],\n            max_len=config.max_len_val,\n            n_models=config.n_models,\n        )\n        \n        print('\\n- Training \\n')\n\n        fold_score = fit(\n            model, \n            train_dataset, \n            val_dataset, \n            config.loss_config,\n            epochs=config.epochs, \n            batch_size=config.batch_size, \n            lr=config.lr, \n            warmup_prop=config.warmup_prop,\n            swa_first_epoch=config.swa_first_epoch,\n            use_len_sampler=config.use_len_sampler,\n            cp=False\n        )\n        \n        score += fold_score \/ k\n\n        print('\\n- Predicting ')\n\n        pred_val_start, pred_val_end = predict(model, val_dataset, batch_size=config.batch_size_val)\n        for j, idx in enumerate(val_idx):\n            pred_oof[idx] = [pred_val_start[j], pred_val_end[j]]\n        \n        pred_test = predict(model, test_dataset, batch_size=config.batch_size_val)\n        pred_tests.append(pred_test)            \n\n        del model, train_dataset, val_dataset\n        torch.cuda.empty_cache()\n        gc.collect()\n    \n    print(f'\\n Local CV jaccard is {score:.4f}')\n    return pred_oof, pred_tests","9749245c":"class ConfigWav:\n    model = 'wavenet'\n    n_models = len(MODELS)\n    \n    # Texts\n    max_len = 150\n    max_len_val = 150\n    \n    # Architecture\n    sent_embed_dim = 16\n    char_embed_dim = 16\n    proba_cnn_dim = 16\n    kernel_size = 3\n    dilations = [1]\n    \n    cnn_dim = 32\n    \n    use_bn = True\n    use_msd = True\n    \n    # Loss function\n    loss_config = {\n        \"smoothing\": True,\n        \"neighbour_smoothing\": False,\n        \"eps\": 0.1,\n        \"use_dist_loss\": False,\n        \"dist_loss_weight\": 1,\n    }\n    \n    # Training\n    use_len_sampler = False\n    \n    batch_size = 128\n    batch_size_val = 512\n    \n    epochs = 5\n    swa_first_epoch = 5\n    lr = 4e-3\n    warmup_prop = 0.\n    \n    # Post-processing\n    remove_neutral = False\n    \n    # PL\n    pl_confidence = 0.35","a5874757":"class ConfigCNN:\n    model = 'cnn'\n    n_models = len(MODELS)\n    \n    # Texts\n    max_len = 150\n    max_len_val = 150\n    \n    # Architecture\n    sent_embed_dim = 16\n    char_embed_dim = 16\n    proba_cnn_dim = 16\n    kernel_size = 3\n    \n    cnn_dim = 32\n    \n    use_bn = True\n    use_msd = True\n    \n    # Loss function\n    loss_config = {\n        \"smoothing\": True,\n        \"neighbour_smoothing\": False,\n        \"eps\": 0.1,\n        \"use_dist_loss\": False,\n        \"dist_loss_weight\": 1,\n    }\n    \n    # Training\n    use_len_sampler = False\n    \n    batch_size = 128\n    batch_size_val = 512\n\n    epochs = 5\n    swa_first_epoch = 5\n    lr = 4e-3\n    warmup_prop = 0.\n\n    # Post-processing\n    remove_neutral = False\n    \n    pl_confidence = 0.35","519ff6b6":"class ConfigRNN:\n    model = 'rnn'\n    n_models = len(MODELS)\n    \n    # Texts\n    max_len = 150\n    max_len_val = 150\n    \n    # Architecture\n    sent_embed_dim = 16 # 32 works as well\n    char_embed_dim = 8\n    ft_lstm_dim = 16\n    \n    lstm_dim = 64\n    use_msd = True\n    \n    # Loss function\n    loss_config = {\n        \"smoothing\": True,\n        \"neighbour_smoothing\": False,\n        \"eps\": 0.1,\n        \"use_dist_loss\": False,\n        \"dist_loss_weight\": 1,\n    }\n    \n    # Training\n    use_len_sampler = False\n    \n    batch_size = 128\n    batch_size_val = 512\n\n    epochs = 10\n    swa_first_epoch = 5\n    lr = 5e-3\n    warmup_prop = 0.\n\n    # Post-processing\n    remove_neutral = False\n    \n    pl_confidence = 0.35","4f2083ee":"configs = [ConfigWav(), ConfigRNN(), ConfigCNN()]","8b3a601e":"pred_oofs = []\npred_tests = []","81c6f444":"for idx, comb in enumerate(combs):        \n    print('#' * 80)\n    print(f' -> Combination {idx + 1}\/{len(combs)} : \\n {\" \/ \".join(list(comb))} ')\n    print('#' * 80, \"\\n\")\n    used = [model_names.index(c) for c in comb]\n    \n    used_preds = {}\n    for key in preds.keys():\n        used_preds[key] = np.array([preds[key][i][:, used] for i in range(len(preds[key]))])\n    \n    for config in configs:\n        \n        print(f' -> Training {config.model.upper()}')\n        \n        config.n_models = len(used)\n        pred_oof, pred_test = k_fold(config, df_train, df_test, np.array(X_train), np.array(X_test), used_preds, len_voc, \n                                      k=K, seed=SEED, model_name='wavenet_0_0')\n        \n        pred_oofs.append(pred_oof)\n        pred_tests.append(pred_test)\n        \n        print('\\n')","9dda6ee5":"def string_from_preds_char_level(dataset, preds, test=False, remove_neutral=False, uncensored=False, cleaned=False):\n    selected_texts = []\n    n_models = len(preds)\n\n    for idx in range(len(dataset)):\n        data = dataset[idx]\n\n        if test:\n            start_probas = np.mean([preds[i][0][idx] for i in range(n_models)], 0)\n            end_probas = np.mean([preds[i][1][idx] for i in range(n_models)], 0)\n        else:\n            start_probas = preds[idx][0]\n            end_probas = preds[idx][1]\n\n        start_idx = np.argmax(start_probas)\n        end_idx = np.argmax(end_probas)\n\n        if end_idx < start_idx:\n            selected_text = data[\"text\"]\n        elif remove_neutral and data[\"sentiment\"] == \"neutral\":\n            selected_text = data[\"text\"]\n        else:\n            selected_text = data[\"text\"][start_idx: end_idx]\n\n        selected_texts.append(selected_text.strip())\n\n    return selected_texts","99d3521e":"config = ConfigWav()\nconfig.n_models = len(preds['oof_start'][0][0])\n\ntest_dataset = TweetCharDataset(\n    df_test, X_test, preds['test_start'], preds['test_end'], \n    max_len=config.max_len_val, train=False, n_models=config.n_models, \n)\n\ndataset = TweetCharDataset(\n    df_train, X_train, preds['test_start'], preds['test_end'], \n    max_len=config.max_len_val, train=False, n_models=config.n_models, \n)","cd912e8c":"pred_oof = (np.array(pred_oofs[0]) + np.array(pred_oofs[1]) + np.array(pred_oofs[2])) \/ 3\npred_test = pred_tests[0] + pred_tests[1] + pred_tests[2]","c23c40a0":"selected_texts_oof = string_from_preds_char_level(dataset, pred_oof, test=False, remove_neutral=False)","51c0ed08":"scores = [jaccard(pred, truth) for (pred, truth) in zip(selected_texts_oof, df_train['selected_text'])]\nscore = np.mean(scores)\nprint(f'Local CV score is {score:.4f}')","8a33a404":"selected_texts = string_from_preds_char_level(test_dataset, pred_test, test=True, remove_neutral=False)","d840580d":"sub['selected_text'] = selected_texts  \nsub.to_csv('submission.csv', index=False)\nsub.head()","9a404b04":"## Test predictions","c92d3692":"For inference on the private set, I use some of the first level scripts to retrieve the models. I only use a few models here, for faster inference time.","3e9f4b8d":"## Retrieving predictions","78cab9b7":"### Retrieve everything","4c428723":"## Metric","747387a4":"## Wavenet","e067937d":"## Fit","aca01395":"## Submission","260f9fb8":"### Roberta-large","6280e0a9":"## Dataset\n- The Dataset is similar to the one shared in public kernels, but adapted to our character level network","0eada813":"## CNN","1593e216":"## Initialization","26b62bb4":"## RNN","721af938":"# Train","f9785dec":"### Bert-large-wwm","ad074476":"## Wavenet","91de8b09":"## SWA\n> From [torchcontrib](https:\/\/github.com\/pytorch\/contrib\/blob\/0b8e4271812e8849232f2e2bb6ee129393162d57\/torchcontrib\/optim\/swa.py)","a6ecaf36":"## Text Data","dc7f8dd8":"## RNN","82e14897":"# Retrieveing 1st level model outputs","c0cde9d5":"# Models\nWe have three models : \n- A RNN\n- A 1D-CNN\n- A Wavenet","6b30d653":"Those probabilities for all our models are available [here](https:\/\/www.kaggle.com\/theoviel\/tweet-char-lvl-preds).\n\n**Enjoy !**","95b766a3":"# Configs","bec38a36":"### Bert-base","d567346d":"### DistilRoberta","be4e65f9":"## CNN","404f73a7":"### Roberta","c598938e":"## Predict","08b281bf":"## Loss\n- We use the cross-entropy loss with label smoothing.","41842d8b":"# Introduction\n\nThis notebook shows of how we trained our 2nd level models, which are the key of our solution.\n\nIt assumes that predictions were already generated using transformers, and converted to character level with the following function :","1ab91e8c":"# $k$-fold","16d470ab":"## Oof predictions\nBecause each of us used different folds, I have to make sure everything is put back in order.","550f1e7a":"## Modules"}}