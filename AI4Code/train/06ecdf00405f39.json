{"cell_type":{"163b2d07":"code","845c6967":"code","cf648a2e":"code","7c291e5a":"code","e03b3c4f":"code","018fa23f":"code","7723e398":"code","4d1f9bdf":"code","b69a3001":"code","dc7fc8ba":"code","6c04ad94":"code","f210968c":"code","ff71a6c2":"code","8534e925":"code","e609f1c5":"code","5feda157":"markdown"},"source":{"163b2d07":"# Import the libraries\nimport pandas as pd \nimport sklearn \n\n# Import the models\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.linear_model import Lasso \nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import (\n    RANSACRegressor, HuberRegressor\n)\nfrom sklearn.svm import SVR \n\n\n# Import the training metrics and mean square error \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error \n\nimport warnings\nwarnings.simplefilter(\"ignore\")","845c6967":"# Import and show the data set \n\ndf_17_report = pd.read_csv('..\/input\/world-happiness\/2017.csv')\ndf_17_report.head()","cf648a2e":"df_17_report.describe()","7c291e5a":"df_17_report.columns","e03b3c4f":"# We are going to chosse the columns that we are going to use \n\nX = df_17_report[['Economy..GDP.per.Capita.','Family','Freedom','Trust..Government.Corruption.','Generosity','Dystopia.Residual']]","018fa23f":"# Define the target\ny = df_17_report[['Happiness.Score']]","7723e398":"# Show the shape \n\nX.shape","4d1f9bdf":"y.shape","b69a3001":"# We'll separte train and test dataset \n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.25) ","dc7fc8ba":"# Define the regressors and fit the model \n\nmodelLinear = LinearRegression().fit(X_train, y_train )\n\n# Config penalty with alpha\n\nmodelLasso = Lasso(alpha=0.2).fit(X_train, y_train)\n\nmodelRidge = Ridge(alpha=1).fit(X_train, y_train)","6c04ad94":"# Calculate the prediction \n\ny_predict_linear = modelLinear.predict(X_test)\n\ny_predict_lasso = modelLasso.predict(X_test)\n\ny_predict_ridge = modelRidge.predict(X_test)","f210968c":"# Calculate the loss\n\nlinear_loss = mean_squared_error(y_test, y_predict_lasso)\nprint('Linear Loss: ', linear_loss)\n\nlasso_loss = mean_squared_error(y_test, y_predict_lasso)\nprint('Lasso Loss', lasso_loss)\n\nridge_loss = mean_squared_error(y_test, y_predict_ridge)\nprint(\"Ridge loss: \", ridge_loss)","ff71a6c2":"# Show coefficients\n\nprint('Lasso coefficients: ', modelLasso.coef_)\nprint('Ridge coefficients: ', modelRidge.coef_)","8534e925":"# Define a dictionary\nestimadores = {\n    # Define the key that is estimador name. And the value is the configuration of parameters\n    'SVR' : SVR(gamma= 'auto', C=1.0, epsilon=0.1),\n    # Define RANSAC like meta estimador, by default we work with a linear regression\n    'RANSAC' : RANSACRegressor(),\n    # Define HUBER and define default parameter. We can configurate the default parameter, if it is smaller \n    # there will be less outliers\n    'HUBER' : HuberRegressor(epsilon=1.35)  \n} ","e609f1c5":"for name, estimator in estimadores.items():\n        estimator.fit(X_train, y_train)\n        predictions = estimator.predict(X_test)\n        print(\"=\"*64)\n        print(name)\n        print(\"MSE: \", mean_squared_error(y_test, predictions))","5feda157":"# SVM, RANSAC & HUBER Regressors"}}