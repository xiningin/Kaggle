{"cell_type":{"61697001":"code","887cda74":"code","93f99829":"code","9ab46b8d":"code","a38587b4":"code","d49f8bc0":"code","5cdedcc5":"code","0c72b3a1":"code","003ee664":"code","e2501d69":"code","59a04453":"code","1c0e2326":"code","7c07914b":"code","25d5c253":"code","9d6ea532":"code","5449435b":"code","559b98d0":"code","97220e63":"code","fb95dac8":"code","53ebe744":"code","e5ad5bf5":"markdown","d43cc6cc":"markdown","59d53949":"markdown","90653f52":"markdown","3ba52aba":"markdown","381b3490":"markdown","4b687548":"markdown","737f9625":"markdown","c6defd92":"markdown"},"source":{"61697001":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import linregress\n\nplt.rcParams[\"figure.figsize\"] = (16, 9)\nplt.style.use(\"ggplot\")","887cda74":"FILE_PATH = \"\/kaggle\/input\/ramen-ratings-latest-update-jan-25-2020\/Ramen_ratings_2020.csv\"\ndf_ramen = pd.read_csv(FILE_PATH)","93f99829":"df_ramen.head(3)","9ab46b8d":"df_ramen.dtypes","a38587b4":"def is_float(x):\n    \"\"\"\n    Returns true if x is of type float\n    \"\"\"\n    # This is probably not the best way to do it. \n    try:\n        return type(float(x)) == float\n    except:\n        return False\n\n        \ndf_ramen[~df_ramen[\"Stars\"].apply(is_float)]","d49f8bc0":"# All the observations that had dual ratings were in the format of \"noodle + broth\",\n# thus I searched for varieties that matched this format.\nfilter_ = df_ramen[\"Variety\"].str.match(r\".* \\+ .*\")\ndf_ramen.loc[filter_, \"Stars\"] = df_ramen.loc[filter_,\"Stars\"].apply(lambda x: np.mean(list(map(float, x.split(\"\/\")))))\ndf_ramen[\"Stars\"] = pd.to_numeric(df_ramen[\"Stars\"], errors=\"coerce\")\ndf_ramen.dropna(inplace=True)","5cdedcc5":"df_ramen.info()","0c72b3a1":"df_ramen[\"Brand\"].value_counts().sort_values().tail(10).plot.barh()\n_ = plt.title(\"Top 10 Brands\"), plt.xlabel(\"Count\")","003ee664":"print(\"There are {} unique brands.\".format(len(df_ramen[\"Brand\"].unique())))","e2501d69":"brand_country_count = (df_ramen.groupby(\"Brand\")[\"Country\"].nunique().sort_values(ascending=False) > 1).sum()\nprint(f\"There are {brand_country_count} brands that are based in more than 1 country.\")","59a04453":"df_ramen[\"Country\"].value_counts().sort_values().plot.barh()\n_ = plt.title(\"Country Distribution\"), plt.xlabel(\"Count\")","1c0e2326":"sns.distplot(df_ramen[\"Stars\"], bins=20)\n_ = plt.title(\"Distribution of ratings\")","7c07914b":"df_brand_ramen_ratings = df_ramen.groupby(\"Brand\")[\"Stars\"].mean().sort_index()\ndf_brand_ramen_count = df_ramen[\"Brand\"].value_counts().sort_index()","25d5c253":"plt.scatter(np.log10(df_brand_ramen_count), df_brand_ramen_ratings)\n# We use the log scale since Nissin has released so many ramen varieties compared to other brands. \n\nm, b, r, *_ = linregress(np.log10(df_brand_ramen_count), df_brand_ramen_ratings)\nX = np.linspace(0, 3)\nplt.plot(X, m*X + b)\n\n_ = plt.title(\"Ramen Release Count Against Average Ramen Rating for each Brand\"), \\\nplt.ylabel(\"Rating\"), plt.xlabel(\"Count (log scale)\")","9d6ea532":"print(f\"The correlation coefficient is {r}\")","5449435b":"import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import wordnet\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize\nimport re\n\ndef nltk_tag_to_wordnet_tag(nltk_tag):\n    if nltk_tag.startswith('J'):\n        return wordnet.ADJ\n    elif nltk_tag.startswith('V'):\n        return wordnet.VERB\n    elif nltk_tag.startswith('N'):\n        return wordnet.NOUN\n    elif nltk_tag.startswith('R'):\n        return wordnet.ADV\n    else:          \n        return None\n\nlem = WordNetLemmatizer()\n\ndef tokenize(x):\n    clean = re.sub(\"[^\\w\\s]\", \" \", x) # Get rid of punctuation and newline.\n    token = word_tokenize(clean)\n    pos = nltk.pos_tag(token)\n    res = [(word, nltk_tag_to_wordnet_tag(tag)) for word, tag in pos]\n    return [lem.lemmatize(word, pos=tag) for word, tag in res if tag is not None]","559b98d0":"# Cleaning the text a little \n\ndf_ramen[\"Variety\"] = df_ramen[\"Variety\"].apply(lambda x : x.lower())\ndf_ramen[\"Variety\"] = df_ramen[\"Variety\"].str.replace(\"flavour\", \"flavor\")\n\n# Tokenizing\ntokenized_variety = df_ramen[\"Variety\"].apply(tokenize)","97220e63":"words_dict = {}\nfor token in tokenized_variety:\n    for word in token:\n        if word not in words_dict:\n            words_dict[word] = 0\n        words_dict[word] += 1\n        \ndf_words = pd.DataFrame.from_dict(words_dict, orient=\"index\").reset_index().rename(columns={\"index\": \"Word\", 0: \"Count\"})","fb95dac8":"df_words.sort_values(\"Count\", ascending=False).head(10)","53ebe744":"from wordcloud import WordCloud\n\nplt.imshow(WordCloud(width=600, height=600).generate_from_frequencies(words_dict), interpolation='bilinear')\n_ = plt.axis(\"off\")","e5ad5bf5":"We can see that the Stars column is not of type float, which we might expect. We will investigate and convert them to float if possible. ","d43cc6cc":"Unsurprisingly, the words noodle, flavor, ramen and instant are the top few words.","59d53949":"#### Investigation: Do brands that release a lot of ramens have a higher quality?\n\nIn other words, Is there a correlation between the number of ramen released and the average ratings of the ramen?","90653f52":"### Variety Analysis","3ba52aba":"## Visualization","381b3490":"As an indonesian, it's quite interesting to see that \"segera\" and \"spesial\" (The words for instant and special in indonesian, respectively) can be spotted in the word cloud above. ","4b687548":"We can categorize the non floats into 4 categories:\n\n- NS : No score. Items in this category were not scored as they did not come included with a sachet, which the reviewer states makes in ineligible for review. Strategy: We will drop this column.\n\n- NR : Not rated. Items in this category were not instant ramen. Interestingly, one of these is a lego-like set. Strategy: We will drop this column. \n\n- Dual ratings: All of these come from the brand Nona Lim, and the reviewer gave two different scores as the noodles and the broth come in separate packaging. Strategy: We will take the average of the two scores. \n\n- Unrated: These are plain noodles, which the reviewer has not rated. Strategy: We will drop this column.","737f9625":"### Cleaning the data","c6defd92":"#### Conclusion : Probably not. "}}