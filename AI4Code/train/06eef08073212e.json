{"cell_type":{"bdcf3870":"code","6fb163e4":"code","07ffb5fc":"code","f50b2897":"code","c69ff7da":"code","4050e60b":"code","f0ee6b4d":"code","dded6b16":"code","9863e782":"code","ba4e5f2f":"code","4404fc71":"code","d1762ea2":"code","50cfb68e":"code","66f7b0ca":"code","d5c065ce":"code","56824091":"code","82c746a3":"code","23f3fb6c":"code","68b3bac6":"code","3030d145":"code","c970b4c2":"code","c92b8a63":"code","23ec59f7":"code","a75bd21c":"code","856aef71":"code","4cc3920f":"code","b26d9db1":"code","4040bc00":"code","4af96f7f":"code","77b5ce20":"code","82d7fe59":"code","80cfc1ec":"code","b5188afb":"code","a7d9c02c":"code","041cd0bc":"code","009de0f0":"markdown","627a1f7b":"markdown","06392e25":"markdown","af70979b":"markdown","085ecf6e":"markdown","85b39532":"markdown","fc7e6b66":"markdown","cf2668c3":"markdown","fa66af08":"markdown","e50b371a":"markdown","105491da":"markdown","b214a3d4":"markdown","ec32ee76":"markdown","e291fbae":"markdown","25dadd52":"markdown","283c3932":"markdown","76f11116":"markdown","efbbce1b":"markdown","168703e5":"markdown","a1bf8d52":"markdown","edb0549c":"markdown"},"source":{"bdcf3870":"import numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom os import listdir\n\npd.set_option('display.max_columns',100)\n\nlistdir('..\/input\/csgo-professional-matches\/')","6fb163e4":"base_dir = '..\/input\/csgo-professional-matches\/'\n\nveto_df = pd.read_csv(base_dir+'picks.csv',low_memory=False)","07ffb5fc":"# Reversing the rows in the DataFrame so that the DataFrame is sorted in ascending order by date.\n\nveto_df = veto_df.iloc[::-1]\nveto_df.index = range(1,veto_df.shape[0]+1)\nveto_df.head()","f50b2897":"maps = ['Cache','Cobblestone','Dust2','Inferno','Mirage','Nuke','Overpass','Train','Vertigo']\nmaps_and_zero = maps + ['0.0']","c69ff7da":"picks = ['t1_removed_1','t1_removed_2','t1_removed_3','t2_removed_1','t2_removed_2',\n                't2_removed_3','t1_picked_1','t2_picked_1','left_over']","4050e60b":"veto_df = veto_df[veto_df.loc[:,picks].isin(maps_and_zero).all(axis=1)]","f0ee6b4d":"gb = veto_df.groupby('system').system.count()\npossible_systems = list(gb[gb>100].index)\npossible_systems","dded6b16":"start_date = '2012-01-01'\nfinal_date = '2022-01-01'\n\nroster_changes = {'NRG':['Evil Geniuses',     '2019-09-26',final_date],\n                'Renegades':['100 Thieves',   '2019-11-07',final_date],\n                 'SMASH':['GODSENT',          '2016-04-07',final_date],\n                 'SK':['MIBR',                '2018-07-03',final_date],\n                 'Grayhound':['Renegades',    '2019-11-19',final_date]}\n\nfor old_team, [new_team, start_date, final_date] in roster_changes.items():\n    veto_df.loc[(veto_df.team_1==old_team) & (veto_df.date < start_date),['team_1']] = new_team\n    veto_df.loc[(veto_df.team_2==old_team) & (veto_df.date < start_date),['team_2']] = new_team","9863e782":"first_team_order = {}\nsecond_team_order = {}\n\nfirst_team_order ['1212125'] = [5,np.NaN, 5,np.NaN,4,3,2]\nsecond_team_order['1212125'] = [np.NaN,5, np.NaN,5,3,4,2]\n\nfirst_team_order ['1234125'] = [5,np.NaN, 1,4,4,3,2]\nsecond_team_order['1234125'] = [np.NaN,5, 4,1,3,4,2]\n\nfirst_team_order ['1122215'] = [5,5,np.NaN,np.NaN,np.NaN,   4,2]\nsecond_team_order['1122215'] = [np.NaN,np.NaN,5,4,4,   np.NaN,2]\n\nfirst_team_order ['1234215'] = [5,np.NaN, 1,4,3,4,2]\nsecond_team_order['1234215'] = [np.NaN, 5,4,1,4,3,2]\n\nfirst_team_order ['1221125'] = [5,np.NaN,np.NaN, 4,4,3,2]\nsecond_team_order['1221125'] = [np.NaN,5,5,      np.NaN,np.NaN,4,2]\n\nfirst_team_order ['1212345'] = [5,np.NaN,5,np.NaN, 1,3,2]\nsecond_team_order['1212345'] = [np.NaN,5,np.NaN,5, 3,1,2]","ba4e5f2f":"# actually removing other veto systems\n\ndef filter_odd_systems(veto_df, possible_systems):\n    veto_df = veto_df[veto_df.system.isin(possible_systems)].copy()\n    veto_df.loc[:,['system']] = veto_df.system.astype(str)+'5'\n\n    gb  = veto_df.groupby('match_id').date.count()\n    veto_df = veto_df[veto_df.match_id.isin(gb[gb==1].index)].copy()\n    \n    return veto_df","4404fc71":"# ignoring teams with few matches present in the dataset\n\ndef get_relevant_teams(veto_df, min_matches):\n    relevant_teams = pd.concat((veto_df.team_1,veto_df.team_2))\n    \n    gb = relevant_teams.groupby(relevant_teams).count()\n    relevant_teams = gb[gb>min_matches].index\n    veto_df = veto_df[(veto_df.team_1.isin(relevant_teams)) & (veto_df.team_2.isin(relevant_teams))]\n    \n    return veto_df, relevant_teams","d1762ea2":"#this function is only useful when there already is a trained model, as to not have to retrain everything. Not useful in this notebook\n\ndef get_new_teams(veto_df,teams_dict,relevant_teams):\n    new_teams = []\n    for x in relevant_teams:\n        if x not in teams_dict.keys():\n            new_teams.append(x)\n    relevant_teams = relevant_teams.drop(new_teams)\n    veto_df = veto_df[~((veto_df.team_1.isin(new_teams)) | (veto_df.team_2.isin(new_teams)))]\n    \n    return veto_df,relevant_teams, new_teams","50cfb68e":"def filter_data(veto_df, min_matches, possible_systems, include_new_teams):\n    veto_df = filter_odd_systems(veto_df,possible_systems)\n    veto_df,relevant_teams = get_relevant_teams(veto_df,min_matches)\n    \n    if include_new_teams == 0:\n        veto_df,relevant_teams, new_teams = get_new_teams(veto_df,teams_dict,relevant_teams)\n    else:\n        new_teams = []\n    \n    return veto_df, relevant_teams, new_teams","66f7b0ca":"teams_dict_columns = ['date','start_veto_%','opponent','match_id','best_of','system','Dust2','Inferno',\n 'Mirage','Nuke','Overpass','Train','Vertigo','Cache','Cobblestone','diff_1','diff_else']","d5c065ce":"filter_data_params = {'veto_df' : veto_df,\n                     'min_matches':15,\n                     'possible_systems': possible_systems,\n                      #### this option is only useful when there already is a trained model\n                     'include_new_teams':1}\nveto_df, relevant_teams, new_teams = filter_data(**filter_data_params)\n\nveto_df.loc[:,maps] = np.NaN","56824091":"veto_df.head()","82c746a3":"def create_teams_dict(veto_df, start_elo, start_diff, span, relevant_teams):\n    teams_dict = {}\n    teams_curr_row = {}\n\n    veto_df_columns = ['date','team_1','match_id','best_of','system']\n    veto_df_columns.extend(maps)\n    teams_columns = ['date','team_1','opponent','match_id','best_of','system','Dust2','Inferno','Mirage','Nuke','Overpass','Train','Vertigo','Cache','Cobblestone','diff_1','diff_else']\n\n    first_row = pd.DataFrame([['2012-08-21',0.5,0,0,0,0,start_elo,start_elo,start_elo,start_elo,start_elo,start_elo,start_elo,start_elo,start_elo,start_diff,start_diff]],columns=teams_columns)\n    for team in relevant_teams:\n        teams_dict[team] = veto_df.loc[(veto_df.team_1 == team) | (veto_df.team_2 == team),veto_df_columns]\n        teams_dict[team].loc[teams_dict[team]['team_1'] != team,'team_1'] = 0\n        teams_dict[team].loc[teams_dict[team]['team_1'].astype(str) == team,'team_1'] = 1\n        teams_dict[team].team_1 = teams_dict[team].team_1.ewm(span=span,min_periods=1).mean()\n\n        opponents = pd.concat((veto_df[veto_df.team_1 == team].team_2,veto_df[veto_df.team_2 == team].team_1)).sort_index()\n        teams_dict[team].insert(2,'opponent',opponents)\n\n        teams_dict[team]['diff_1'] = 0\n        teams_dict[team]['diff_else'] = 0\n\n        teams_dict[team] = pd.concat((first_row, teams_dict[team]))\n\n        teams_curr_row[team] = 0\n    \n    return teams_dict, teams_curr_row","23f3fb6c":"#this function is only useful when there already is a trained model, as to not have to retrain everything. Not useful in this notebook\n\ndef get_last_index():\n    for index in veto_df.iloc[::-1].index:\n        try:\n            loc = teams_dict[veto_df.loc[index,'team_1']].loc[index]\n        except:\n            continue\n        break\n    if index == veto_df.index[-1]:\n        complete = 1\n    else:\n        complete = 0\n        \n    if complete == 0:\n        new_data = veto_df.loc[index+1:]\n    else:\n        new_data = 0\n    return index,complete, new_data","68b3bac6":"roc_elo = 0.65\nroc_diff = 0.3\ndiv = 2\nreset_teams_dict = 1\n\n#def compute_map_ratings(teams_dict, roc_elo, roc_diff, div, new):\n\n#this variable is only useful when there already is a trained model.\nif reset_teams_dict == 0:\n    last_index,complete, new_data = get_last_index()\n\n\"\"\"if complete == 1:\n    return teams_dict\"\"\"\n\nrepeat_columns = maps + ['diff_1','diff_else']\n\nif reset_teams_dict == 1:\n    teams_dict_params = {'veto_df':veto_df,\n                        'start_elo':3,\n                        'start_diff':0.5,\n                        'span':8,\n                        'relevant_teams':relevant_teams}\n    teams_dict, teams_curr_row = create_teams_dict(**teams_dict_params)\n    index_list = veto_df.index\nelse:\n    index_list = new_data.index\n\n\nfor match in index_list:\n    team_1, team_2 = veto_df.loc[match,['team_1','team_2']].values\n\n    match_row = veto_df.loc[match]\n\n    if reset_teams_dict == 1:\n        team_1_prev_match = teams_dict[team_1].iloc[teams_curr_row[team_1]]\n        team_2_prev_match = teams_dict[team_2].iloc[teams_curr_row[team_2]]\n\n        teams_curr_row[team_1] += 1\n        teams_curr_row[team_2] += 1\n\n        teams_dict[team_1].loc[match,repeat_columns] = team_1_prev_match[repeat_columns]\n        teams_dict[team_2].loc[match,repeat_columns] = team_2_prev_match[repeat_columns]\n\n        system = teams_dict[team_1].loc[match,'system']\n    else:\n        team_1_prev_match = teams_dict[team_1].iloc[-1]\n        team_2_prev_match = teams_dict[team_2].iloc[-1]\n\n        teams_dict[team_1] = teams_dict[team_1].append(pd.DataFrame([team_1_prev_match],index=[match]))\n        teams_dict[team_2] = teams_dict[team_2].append(pd.DataFrame([team_2_prev_match],index=[match]))\n\n        system = match_row.system\n\n    team_1_diff_1 = team_1_prev_match.diff_1\n    team_2_diff_1 = team_2_prev_match.diff_1\n\n    team_1_diff_else = team_1_prev_match.diff_else\n    team_2_diff_else = team_2_prev_match.diff_else\n\n    team_1_order = first_team_order[system]\n    team_2_order = second_team_order[system]\n\n    count_1, count_2 = 1,1\n\n    for i_pick, pick in enumerate(system):\n\n        if pick == '1' and count_1 == 1:\n            current = 't1_removed_1'\n            count_1 +=1\n            _map = match_row[current]\n\n            if np.isfinite(team_1_order[i_pick]):\n                team_1_delta_elo = (1\/(1+10**((team_1_prev_match[_map]-team_1_order[i_pick])\/div))-0.5)*roc_elo\n            else:\n                team_1_delta_elo = 0\n\n            if np.isfinite(team_2_order[i_pick]):\n                team_2_delta_elo = (1\/(1+10**((team_2_prev_match[_map]-team_2_order[i_pick])\/div))-0.5)*roc_elo\n            else:\n                team_2_delta_elo = 0\n\n            team_1_delta_teams = (1\/(1+10**((team_1_prev_match[_map]-team_2_prev_match[_map])\/div))-0.5)*roc_diff\n\n            teams_dict[team_1].loc[match,'diff_1'] += team_1_delta_teams\n\n            teams_dict[team_1].loc[match,_map] += team_1_delta_elo + team_1_delta_teams*team_1_diff_1\n            teams_dict[team_2].loc[match,_map] += team_2_delta_elo\n\n\n\n            continue\n\n        if pick == '2' and count_2 == 1:\n            current = 't2_removed_1'\n            count_2 +=1\n            _map = match_row[current]\n\n            if np.isfinite(team_1_order[i_pick]):\n                team_1_delta_elo = (1\/(1+10**((team_1_prev_match[_map]-team_1_order[i_pick])\/div))-0.5)*roc_elo\n            else:\n                team_1_delta_elo = 0\n\n            if np.isfinite(team_2_order[i_pick]):\n                team_2_delta_elo = (1\/(1+10**((team_2_prev_match[_map]-team_2_order[i_pick])\/div))-0.5)*roc_elo\n            else:\n                team_2_delta_elo = 0\n\n            team_2_delta_teams = (1\/(1+10**((team_2_prev_match[_map]-team_1_prev_match[_map])\/div))-0.5)*roc_diff\n\n            teams_dict[team_2].loc[match,'diff_1'] += team_2_delta_teams\n\n            teams_dict[team_1].loc[match,_map] += team_1_delta_elo\n            teams_dict[team_2].loc[match,_map] += team_2_delta_elo + team_2_delta_teams*team_2_diff_1\n\n\n\n            continue\n\n        if pick == '1':\n            current = 't1_removed_'+str(count_1)\n            count_1 += 1\n\n        elif pick == '2':\n            current = 't2_removed_'+str(count_2)\n            count_2 += 1\n\n        elif pick == '3':\n            current = 't1_picked_1'\n\n        elif pick == '4':\n            current = 't2_picked_1'\n\n        elif pick == '5':\n            current = 'left_over'\n\n        _map = match_row[current]\n\n        if np.isfinite(team_1_order[i_pick]):\n            team_1_delta_elo = (1\/(1+10**((team_1_prev_match[_map]-team_1_order[i_pick])\/div))-0.5)*roc_elo\n        else:\n            team_1_delta_elo = 0\n\n        if np.isfinite(team_2_order[i_pick]):\n            team_2_delta_elo = (1\/(1+10**((team_2_prev_match[_map]-team_2_order[i_pick])\/div))-0.5)*roc_elo\n        else:\n            team_2_delta_elo = 0 \n\n        team_1_delta_teams = (1\/(1+10**((team_1_prev_match[_map]-team_2_prev_match[_map])\/div))-0.5)*roc_diff\n        team_2_delta_teams = -team_1_delta_teams\n\n        if (pick=='1') or (pick=='3'):\n            teams_dict[team_1].loc[match,'diff_else'] += team_1_delta_teams\n\n            teams_dict[team_1].loc[match,_map] += team_1_delta_elo + team_1_delta_teams*team_1_diff_else\n            teams_dict[team_2].loc[match,_map] += team_2_delta_elo\n\n\n\n        elif (pick=='2') or (pick=='4'):\n            teams_dict[team_2].loc[match,'diff_else'] += team_2_delta_teams\n\n            teams_dict[team_1].loc[match,_map] += team_1_delta_elo\n            teams_dict[team_2].loc[match,_map] += team_2_delta_elo + team_2_delta_teams*team_2_diff_else\n\n\n    teams_dict[team_1].loc[match,'date'] = match_row.date\n    teams_dict[team_2].loc[match,'date'] = match_row.date\n\n    teams_dict[team_1].loc[match,'opponent'] = match_row.team_2\n    teams_dict[team_2].loc[match,'opponent'] = match_row.team_1\n\n    teams_dict[team_1].loc[match,maps] = np.clip(teams_dict[team_1].loc[match,maps],1.001,4.999)\n    teams_dict[team_2].loc[match,maps] = np.clip(teams_dict[team_2].loc[match,maps],1.001,4.999)\n\n    teams_dict[team_1].loc[match,'diff_1'] = np.clip(teams_dict[team_1].loc[match,'diff_1'],0,1)\n    teams_dict[team_2].loc[match,'diff_1'] = np.clip(teams_dict[team_2].loc[match,'diff_1'],0,1)\n\n    teams_dict[team_1].loc[match,'diff_else'] = np.clip(teams_dict[team_1].loc[match,'diff_else'],0,1)\n    teams_dict[team_2].loc[match,'diff_else'] = np.clip(teams_dict[team_2].loc[match,'diff_else'],0,1)\n        \n#    return teams_dict","3030d145":"def remove_not_in_map_pool(teams_dict, maps, picks, relevant_teams):\n    matches_map = {}\n    for _map in maps:\n        matches_map[_map] = veto_df[picks][~veto_df[picks][veto_df[picks]==_map].any(axis=1)].index\n        for team in relevant_teams:\n            teams_dict[team].loc[teams_dict[team].index.isin(matches_map[_map]),_map] = np.NaN\n            \n    return teams_dict","c970b4c2":"teams_dict = remove_not_in_map_pool(teams_dict, maps, picks, relevant_teams)","c92b8a63":"teams_dict['Astralis'].tail()","23ec59f7":"\"\"\"import pickle\npickle.dump(teams_dict, open( \"teams_dict_maps.p\", \"wb\" ) )\"\"\"","a75bd21c":"def Markov_Chain(team1_probs_1,team2_probs_1,team1_probs,team2_probs,team1_inv_probs,team2_inv_probs,team_order,n):\n        \n    def Reshape(array,level,inverted):\n        \n        if level == 1:\n            if inverted == 0:\n                new_shape = [n,1]\n            else:\n                new_shape = [1,n]\n        elif level == 2:\n            if inverted == 0:\n                new_shape = [n,n,1]\n            else:\n                new_shape = [n,1,n]\n        elif level == 3:\n            if inverted == 0:\n                new_shape = [n,n,n,1]\n            else:\n                new_shape = [n,n,1,n]\n        elif level == 4:\n            if inverted == 0:\n                new_shape = [n,n,n,n,1]\n            else:\n                new_shape = [n,n,n,1,n]\n        elif level == 5:\n            if inverted == 0:\n                new_shape = [n,n,n,n,n,1]\n            else:\n                new_shape = [n,n,n,n,1,n]\n        elif level == 6:\n            if inverted == 0:\n                new_shape = [n,n,n,n,n,n,1]\n            else:\n                new_shape = [n,n,n,n,n,1,n]\n        \n        return array.reshape(new_shape)\n    \n    def Branch_probs(probs, level):\n        return Reshape(probs,level,1)\/(1-Reshape(probs,level,0))\n    \n    def Remove_diagonal(probs, level):\n        if level == 1:\n            for _map in range(n):\n                probs[_map,_map] = 0\n        elif level == 2:\n            for _map in range(n):\n                probs[:,_map,_map] = 0\n        elif level == 3:\n            for _map in range(n):\n                probs[:,:,_map,_map] = 0\n        elif level == 4:\n            for _map in range(n):\n                probs[:,:,:,_map,_map] = 0\n        elif level == 5:\n            for _map in range(n):\n                probs[:,:,:,:,_map,_map] = 0\n        elif level == 6:\n            for _map in range(n):\n                probs[:,:,:,:,:,_map,_map] = 0\n        \n        return probs\n    \n    def Weight_branched_probs(probs,old_probs,level):\n        return probs*Reshape(old_probs,level,0)\n\n    def Get_final_probs(level, probs_matrix_list, probs_matrix_weighted):\n        \n        final_probs = probs_matrix_weighted.sum(axis=level-1)\n       \n        for i in range(level-1,0,-1):\n            final_probs = (final_probs * Reshape(probs_matrix_list[i-1], i, 0)).sum(axis=i-1)\n            \n        return final_probs\n \n    def Get_probs_list():\n        \n        probs_matrix_list_1 = [team1_probs]\n        probs_matrix_list_2 = [team2_probs]\n        probs_matrix_list_3 = [team1_inv_probs]\n        probs_matrix_list_4 = [team2_inv_probs]\n        \n        probs_matrix_list_1_1 = [team1_probs_1]\n        probs_matrix_list_2_1 = [team2_probs_1]\n        \n        probs_list = [team1_probs_1]\n        current_probs_matrix_list = probs_matrix_list_1_1\n        probs_matrix_list = [team1_probs_1]\n        \n        probs_matrix_1_1 = Branch_probs(probs_matrix_list_1_1[0],1)\n        probs_matrix_1_1 = Remove_diagonal(probs_matrix_1_1,1)\n        probs_matrix_list_1_1.append(probs_matrix_1_1)\n        \n        cte_2_1 = 0\n        cte_3 = 0\n        cte_4 = 0\n            \n        for level in range(1,n):\n            probs_matrix_1 = Branch_probs(probs_matrix_list_1[level-1],level)\n            probs_matrix_1 = Remove_diagonal(probs_matrix_1,level)\n            probs_matrix_list_1.append(probs_matrix_1)\n            \n            probs_matrix_2 = Branch_probs(probs_matrix_list_2[level-1],level)\n            probs_matrix_2 = Remove_diagonal(probs_matrix_2,level)\n            probs_matrix_list_2.append(probs_matrix_2)\n            \n            if cte_3 == 0:\n                probs_matrix_3 = Branch_probs(probs_matrix_list_3[level-1],level)\n                probs_matrix_3 = Remove_diagonal(probs_matrix_3,level)\n                probs_matrix_list_3.append(probs_matrix_3)\n            if cte_4 == 0:\n                probs_matrix_4 = Branch_probs(probs_matrix_list_4[level-1],level)\n                probs_matrix_4 = Remove_diagonal(probs_matrix_4,level)\n                probs_matrix_list_4.append(probs_matrix_4)\n            if cte_2_1 == 0:\n                probs_matrix_2_1 = Branch_probs(probs_matrix_list_2_1[level-1],level)\n                probs_matrix_2_1 = Remove_diagonal(probs_matrix_2_1,level)\n                probs_matrix_list_2_1.append(probs_matrix_2_1)            \n            \n            if (team_order[level] == '2') and (cte_2_1==0):\n                probs_matrix_weighted = Weight_branched_probs(probs_matrix_list_2_1[level],current_probs_matrix_list[level-1],level)\n                current_probs_matrix_list = probs_matrix_list_2_1\n                probs_matrix_list.append(probs_matrix_list_2_1[level])\n                cte_2_1 = 1\n            elif team_order[level] == '1':\n                probs_matrix_weighted = Weight_branched_probs(probs_matrix_list_1[level],current_probs_matrix_list[level-1],level)\n                current_probs_matrix_list = probs_matrix_list_1\n                probs_matrix_list.append(probs_matrix_list_1[level])\n            elif team_order[level] == '2':\n                probs_matrix_weighted = Weight_branched_probs(probs_matrix_list_2[level],current_probs_matrix_list[level-1],level)\n                current_probs_matrix_list = probs_matrix_list_2\n                probs_matrix_list.append(probs_matrix_list_2[level])\n            elif team_order[level] == '3':\n                probs_matrix_weighted = Weight_branched_probs(probs_matrix_list_3[level],current_probs_matrix_list[level-1],level)\n                current_probs_matrix_list = probs_matrix_list_3\n                probs_matrix_list.append(probs_matrix_list_3[level])\n                cte_3 = 1\n            elif team_order[level] == '4':\n                probs_matrix_weighted = Weight_branched_probs(probs_matrix_list_4[level],current_probs_matrix_list[level-1],level)\n                current_probs_matrix_list = probs_matrix_list_4\n                probs_matrix_list.append(probs_matrix_list_4[level])\n                cte_4 = 1\n            elif team_order[level] == '5':\n                probs_matrix_weighted = Weight_branched_probs(probs_matrix_list_1[level],current_probs_matrix_list[level-1],level)\n                current_probs_matrix_list = probs_matrix_list_1\n                probs_matrix_list.append(probs_matrix_list_1[level])\n            \n            probs = Get_final_probs(level, probs_matrix_list, probs_matrix_weighted)\n            probs_list.append(probs)\n        return probs_list\n    \n    return Get_probs_list()\n\n# This chunk of code could be simplified, but I am keeping it like this because I fear any simplification would make the code harder to read.","856aef71":"def get_in_map_pool():\n    matches_map = {}\n    for _map in maps:\n        matches_map[_map] = veto_df[picks][veto_df[picks]==_map].any(axis=1)\n    in_map_pool = pd.DataFrame(matches_map)\n    return in_map_pool","4cc3920f":"def get_maps_in_match():\n    maps_in_match = {}\n    in_map_pool = get_in_map_pool()\n    for row in veto_df.index:\n        maps_in_match[row] = in_map_pool.loc[row][in_map_pool.loc[row]==True].index\n    return maps_in_match","b26d9db1":"maps_in_match = get_maps_in_match()","4040bc00":"div = 1.5\ndiv_diff = 2\n\nprobs_list_dict = {}\nprobs_df_dict = {}\nfor match in veto_df.index:\n    team_1 = veto_df.loc[match,'team_1']\n    team_2 = veto_df.loc[match,'team_2']\n    count_1,count_2 = 1,1\n    \n    team_1_df = teams_dict[team_1][maps].loc[match]\n    team_1_df = team_1_df[~team_1_df.isna()]\n    curr_maps = team_1_df.index.values\n    team_1_df = team_1_df.values\n    \n    team_2_df = teams_dict[team_2][maps].loc[match]\n    team_2_df = team_2_df[~team_2_df.isna()].values\n    \n    team_1_diff_1 = teams_dict[team_1]['diff_1'].loc[match]\n    team_2_diff_1 = teams_dict[team_2]['diff_1'].loc[match]\n    \n    team_1_diff_else = teams_dict[team_1]['diff_else'].loc[match]\n    team_2_diff_else = teams_dict[team_2]['diff_else'].loc[match]\n    \n    system = veto_df.loc[match,'system']\n    maps_gone = []\n    team_1_diff = team_1_diff_1\n    team_2_diff = team_2_diff_1\n    \n    delta_elo_teams = team_1_df-team_2_df\n    \n    \"\"\"probs_1_1 = 1\/((5-team_1_df)**2)*((1+team_1_diff_1*0.5)**delta_elo_teams)\n    probs_2_1 = 1\/((5-team_2_df)**2)*((1+team_2_diff_1*0.5)**(-delta_elo_teams))\n    \n    probs_1 = 1\/((5-team_1_df)**2)*((1+team_1_diff_else*0.5)**delta_elo_teams)\n    probs_2 = 1\/((5-team_2_df)**2)*((1+team_2_diff_else*0.5)**(-delta_elo_teams))\n    \n    probs_3 = 1\/((team_1_df-1)**2)*((1+team_1_diff_else*0.5)**(-delta_elo_teams))\n    probs_4 = 1\/((team_2_df-1)**2)*((1+team_2_diff_else*0.5)**delta_elo_teams)\"\"\"\n    \n    probs_1_1 = 1\/((5-team_1_df)**2.5)*((1+team_1_diff_1*0.2)**delta_elo_teams)\n    probs_2_1 = 1\/((5-team_2_df)**2.5)*((1+team_2_diff_1*0.2)**(-delta_elo_teams))\n    \n    probs_1 = 1\/((5-team_1_df)**2.5)*((1+team_1_diff_else*0.2)**delta_elo_teams)\n    probs_2 = 1\/((5-team_2_df)**2.5)*((1+team_2_diff_else*0.2)**(-delta_elo_teams))\n    \n    probs_3 = 1\/((team_1_df-1)**2.5)*((1+team_1_diff_else*0.2)**(-delta_elo_teams))\n    probs_4 = 1\/((team_2_df-1)**2.5)*((1+team_2_diff_else*0.2)**delta_elo_teams)\n\n    \n    probs_1_1 = probs_1_1\/np.sum(probs_1_1)\n    probs_2_1 = probs_2_1\/np.sum(probs_2_1)\n    probs_1 = probs_1\/np.sum(probs_1)\n    probs_2 = probs_2\/np.sum(probs_2)\n    probs_3 = probs_3\/np.sum(probs_3)\n    probs_4 = probs_4\/np.sum(probs_4)\n    \n    probs_list_dict[match] = Markov_Chain(probs_1_1,probs_2_1,probs_1,probs_2,probs_3,probs_4,system,7)\n    probs_df_dict[match] = pd.DataFrame(probs_list_dict[match],columns=maps_in_match[match])\ndel probs_list_dict","4af96f7f":"def start_bins():\n\n    got_right_bin = { 0.05:0,\n                 0.1:0,\n                 0.15:0,\n                 0.2:0,\n                 0.25:0,\n                 0.3:0,\n                 0.35:0,\n                 0.4:0,\n                 0.45:0,\n                 0.5:0,\n                 0.55:0,\n                 0.6:0,\n                 0.65:0,\n                 0.7:0,\n                 0.75:0,\n                 0.8:0,\n                 0.85:0,\n                 0.90:0}\n    count_bin = got_right_bin.copy()\n    \n    return got_right_bin, count_bin","77b5ce20":"def compare_predictions(veto,system):\n\n    got_right_bin, count_bin = start_bins()\n\n    match_index = veto_df[(veto_df.system==system) & (veto_df.date>'2017-04-14')].index\n    \n    if system == '1212125':\n        chosen_veto_list = ['t1_removed_1','t2_removed_1','t1_removed_2','t2_removed_2',\n                            't1_removed_3','t2_removed_3','left_over']\n    if system == '1234125':\n        chosen_veto_list = ['t1_removed_1','t2_removed_1','t1_picked_1','t2_picked_1',\n                            't1_removed_2','t2_removed_2','left_over']\n            \n    for match in match_index:\n\n        for key in got_right_bin.keys():\n            for prob in probs_df_dict[match].loc[veto].values:\n                if abs(key-prob) < 0.025:\n                    count_bin[key] += 1\n\n        prob = probs_df_dict[match].loc[veto,veto_df[chosen_veto_list[veto]].loc[match]]\n        for key in got_right_bin.keys():\n            if abs(key-prob) < 0.025:\n                got_right_bin[key] += 1\n\n\n    for key in got_right_bin.keys():\n        if count_bin[key] != 0:\n            got_right_bin[key]\/= count_bin[key]\n            \n    predictions_table = pd.concat([pd.Series(got_right_bin,name='real'),pd.Series(count_bin,name='count')],axis=1).rename_axis('predicted')\n    predictions_table\n    \n    # inefficient code\n        \n    return predictions_table","82d7fe59":"predictions_table = compare_predictions(6, system = '1234125')","80cfc1ec":"predictions_table","b5188afb":"predictions_table","a7d9c02c":"error_bin = {}\nfor predicted, real in zip(predictions_table.index,predictions_table.real.values):\n    error_bin[predicted] = str(round((real - predicted)*100,2)) + '%'","041cd0bc":"# shows the error between percentage of occurrences and predictions:\nerror_bin","009de0f0":"Comparing the probabilities predicted and the percent of times a specific map veto actually occurred shows some positive results. Unsurprisingly, the algorithm works best when predicting maps very likely to be removed or maps very likely to be picked, while struggling when there are multiple maps with high chances of being picked. \n\n(There are some faults in this method of comparing probabilities with frequency of occured events, which I will explain later).","627a1f7b":"<font size=\"5\"><b><center>Predicting CSGO map veto with Markov Chains<\/center><\/b><\/font>\n<center><b>Dataset: <\/b>CS:GO Professional Matches - <b>Date: <\/b>September 23, 2020<\/center>\n<br>\n<i>This is an incomplete work. I will be adding details in the near future to make this notebook more instructive.<\/i>","06392e25":"# Training the model","af70979b":"# Verifying predictions","085ecf6e":"The first team in the veto process is stored in the 'team_1' column. If the teams are in the same order as in the HLTV website, a '0' is placed in the 'inverted_teams' column; otherwise, the teams are inverted in relation to the HLTV order and the column shows a value of '1'.","85b39532":"# Preprocessing data","fc7e6b66":"$  \\Delta Elo_{\\textrm{team2_dependent}} = (\\frac{1}{1+10^\\frac{(\\textrm{Team_1_elo}-\\textrm{Team_2_elo})}{\\textrm{div}}}-0.5)\u00b7\\textrm{RoC}$\n\n$  \\Delta Elo_{\\textrm{team2_independent}} = (\\frac{1}{1+10^\\frac{(\\textrm{Elo}_{(t)}-\\textrm{Pick_value})}{\\textrm{div}}}-0.5)\u00b7\\textrm{RoC}$\n\n$  Elo(t+1) = Elo(t) + \\Delta Elo_{\\textrm{team2_independent}}+ \\Delta Elo_{\\textrm{team2_dependent}}\u00b7diff$","cf2668c3":"The algorithm follows an Elo-like algorithm to train the data, similarly to how Tennis and Chess rank players. In those games, the only parameter that influences Elo change is the Elo of the opposite player (winning against a high-elo player increases your ranking by a lot, while losing to a high elo player does not reduce your Elo by much).\n\nIn CSGO, when choosing which maps to pick or reject, there are normally two factors that are taken into consideration: the team's own willingness to play a map (independent of other team), and the difference in willigness between the two teams. Some teams carefully study their opponents' preferred maps, while others have insta-picks regardless of which opponent they are facing, so there also needs to be a term on the equation that quantifies these different mindsets.\n\nThe starting Elo value for each map is 3, for each team, when there are no previous matches on the team's record. After every match, team 1's Elo has to be recalculated using the following equations, where 'RoC' (rate of change), 'div' and 'diff' are pre-determined parameters:","fa66af08":"## Filtering out unnecessary data","e50b371a":"# Preparation","105491da":"# Index\n1. [Introduction](#Introduction)<br>\n2. [Preparation](#Preparation)<br>\n3. [Preprocessing data](#Preprocessing-data)<br>\n3.1. [Removing incorrect data](#Removing-incorrect-data)<br>\n3.2. [Filtering out unnecessary data](#Filtering-out-unnecessary-data)<br>\n4. [Training the model](#Training-the-model)<br>\n5. [Predicting map veto](#Predicting-map-veto)<br>\n6. [Verifying predictions](#Verifying-predictions)<br>","b214a3d4":"Here, we are hardcoding values for the willingness of teams to play certain maps (5 means the team is not willing to \nplay the map, 1 means that is the teams preferred map).\n\nGenerally, the first maps removed are attributed values of 5 or 4, as the team is not willing to play it, and maps that the team accepts to play are given values of 1 or 2. Maps removed by the other team are generally not assigned values.","ec32ee76":"## Removing incorrect data","e291fbae":"# Introduction","25dadd52":"<b>Background:<\/b> The data used in this notebook was collected at https:\/\/www.hltv.org\/results. It was scraped off using the libraries 'requests' and 'BeautifulSoup'.\n\nAt any given time, there are 7 maps in the competitive map pool in CSGO. At the moment, those maps are: 'Dust 2', 'Inferno', 'Mirage', 'Nuke', 'Overpass', 'Train' and 'Vertigo' ('Cache' and 'Cobblestone' were the two other maps that were once part of the competitive pool). CSGO Matches are normally played as a 'bo3' (Best of 3 maps), with less important matches played in a 'bo1' fashion and finals often played as 'bo5's.\n\nTo determine the maps to be played in a match, there is a veto system, where both teams take turns, in alternating fashion, removing and picking maps they want or don't want to play. This veto system is what I am going to simulate in this notebook. For that, I am using an ELO-like model to express teams' willingness to play a map in a 1-5 scale (1 meaning the team only plays that map, 5 meaning the team has never played that map). These 'map ELOs' serve to indicate the probability of the team to pick a map in a round of the veto.\n\nWhile it is simple to predict the first veto in the veto process, there is an increasing difficulty to predict each subsequent veto, as every future probability event depends on past events. As an example, if Team 1 removes 'Mirage' in the first veto round in a match where both teams had 90% probability of removing 'Mirage', Team 2's probability of removing 'Mirage' drops to 0%, as the map has already been removed. Also, while all other maps had a combined 10% probability of being removed in Team 2's first round if Team 2 had the first veto, these other maps now have a combined 100% probability of being selected in the second round. \n\nLuckily, there are only 6 rounds in the veto process of CSGO, as otherwise it would be really hard to compute the probabilities in the 12th round using this method.\n\nTo determine if the probabilities estimated actually mean anything, there is a section at the end that compares the probabilities attributed to a map veto occuring and the percent of times this map veto actually occurred.\n\nWell, let's get started!","283c3932":"The 'diff' parameter changes with time, as teams may have periods where they insta-lock maps and periods where their picks are more thought out. $\\Delta Elo_{\\textrm{team2_dependent}}$ is most positive when team 1 ignored team 2's map inclinations and picked one of team 2's preferred maps, and is most negative when picking a map the other team does not play. This causes the 'diff' variable to increase and decrease accordingly. The values of the variable are clipped to stay between 0 and 1.\n\n$  diff(t+1) = diff(t) + \\Delta Elo_{\\textrm{team2_dependent}}$\n\nThere are two different 'diff' parameters: one for the first pick, and one for all the other picks. This was decided as many teams have only one insta-lock, and all other vetos are decided taking into account the other team's inclinations.\n\nObviously, there are other factors that could cause a team to pick and remove maps, but we cannot isolate these other factors here.","76f11116":"Importing necessary libraries and loading the veto DataFrame.","efbbce1b":"This test is limited to veto systems with more than 100 matches. We don't have enough data about other veto systems, so it was decided to remove them.","168703e5":"# Predicting map veto","a1bf8d52":"Roster changes and team acquisitions are frequent in CSGO, and they significantly reduce the efficacy of our model. To deal with that, we are going to make the necessary changes to limit the effect of this in the model.\n\nThere are many other roster changes unaccounted here, and there are better but more time demanding ways of dealing with this problem, but we are not going to be concerned with it.","edb0549c":"There are 5 possible digits in a veto system: '1' through '5'. Those digits mean:\n1. Team 1 removes a map\n2. Team 2 removes a map\n3. Team 1 picks a map\n4. Team 2 picks a map\n5. The map was left over and is the deciding map\n\nThe systems stored in the DataFrame are missing a digit '5', which will later be added on.\n\n'Best of 1' systems don't have digits '3' and '4', as the only map to be played is the map left over after the veto process.\n'Best of 3' systems have all digits. 'Best of 5' systems are not present in this DataFrame."}}