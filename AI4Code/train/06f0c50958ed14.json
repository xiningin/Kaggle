{"cell_type":{"b6067e52":"code","692164d0":"code","3b63b577":"code","422463e5":"code","90670ee6":"code","c5b56c56":"code","44304fb8":"code","ef1199ad":"code","06d93b81":"code","a72b44f5":"code","af719a8a":"code","cc67eb18":"code","65605110":"code","0be0e17e":"code","1b86f5ca":"code","ada58ab6":"code","46819b0a":"code","971032e5":"code","5404c00c":"code","353b79dc":"markdown","0a35d4ce":"markdown","b1a7fb90":"markdown","a283b65c":"markdown","e53aee30":"markdown","e2a55dd4":"markdown","7ac47acc":"markdown","0eb2ad7d":"markdown","e978bd77":"markdown","3158c390":"markdown","4627ca88":"markdown","195de143":"markdown","16d492f7":"markdown"},"source":{"b6067e52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","692164d0":"timesData = pd.read_csv('..\/input\/timesData.csv')","3b63b577":"timesData.info()","422463e5":"timesData.head(10)","90670ee6":"df = timesData.iloc[:100, :]\n\nimport plotly.graph_objs as go\n\n# Trace1\ntrace1 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.citations,\n                    mode = \"lines\",\n                    name = \"citations\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text = df.university_name)\n\n# Trace2\ntrace2 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.teaching,\n                    mode = \"lines+markers\",\n                    name = \"teaching\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text = df.university_name)\n\ndata = [trace1, trace2]\nlayout = dict(title = 'Citation and Teaching World Rank of Top100 Universities',\n              xaxis = dict(title = 'World Rank', ticklen = 5, zeroline = False))\nfig = dict(data = data, layout = layout)\niplot(fig)","c5b56c56":"df2014 = timesData[timesData.year == 2014].iloc[:100, :]\ndf2015 = timesData[timesData.year == 2015].iloc[:100, :]\ndf2016 = timesData[timesData.year == 2016].iloc[:100, :]\n\nimport plotly.graph_objs as go\n\n#trace1\ntrace1 = go.Scatter(\n                    x = df2014.world_rank,\n                    y = df2014.citations,\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text = df2014.university_name)\n#trace2\ntrace2 = go.Scatter(\n                    x = df2015.world_rank,\n                    y = df2015.citations,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text = df2015.university_name)\n#trace3\ntrace3 = go.Scatter(\n                    x = df2016.world_rank,\n                    y = df2016.citations,\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text = df2016.university_name)\n\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Citation and World Rank of Top100 Universities with 2014, 2015 and 2016 years',\n              xaxis = dict(title = 'World Rank', ticklen = 5,zeroline = False),\n              yaxis = dict(title = 'Citations', ticklen = 5, zeroline = False))\nfig = dict(data = data, layout = layout)\niplot(fig)","44304fb8":"df2014 = timesData[timesData.year == 2014].iloc[:3, :]\ndf2014","ef1199ad":"import plotly.graph_objs as go\n\n# trace1\ntrace1 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.citations,\n                name = 'citations',\n                marker = dict(color = 'rgba(255, 84, 255, 0.5)',\n                             line = dict(color = 'rgb(0,0,0)', width = 1.5)),\n                text = df2014.country)\n# trace2\ntrace2 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.teaching,\n                name = 'teaching',\n                marker = dict(color = 'rgba(255, 200, 128, 0.5)',\n                              line = dict(color = 'rgb(0,0,0)', width = 1.5)),\n                text = df2014.country)\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = 'group')\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","06d93b81":"df2014 = timesData[timesData.year == 2014].iloc[:3,:]\n\nimport plotly.graph_objs as go\n\nx = df2014.university_name\n\n# trace1\ntrace1 = {\n    'x' : x,\n    'y' : df2014.citations,\n    'name' : 'citation',\n    'type' : 'bar'};\n\n# trace2\ntrace2 = {\n    'x' : x,\n    'y' : df2014.teaching,\n    'name' : 'teaching',\n    'type' : 'bar'};\n\ndata = [trace1, trace2];\nlayout = {\n    'xaxis' : {'title' : 'Top 3 Universities'},\n    'barmode' : 'relative',\n    'title' : 'Citations and Teaching of Top3 Universities in 2014'};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","a72b44f5":"df2016 = timesData[timesData.year == 2016].iloc[:7, :]\npie = df2016.num_students\npie1_list = [float(each.replace(',','.')) for each in df2016.num_students]\nlabels = df2016.university_name\n\nfig = {\n    \"data\" : [\n        {\n            \"values\" : pie1_list,\n            \"labels\" : labels,\n            \"domain\" : {'x' : [0, 0.5]},\n            \"name\" : 'Number of Students Rates',\n            \"hoverinfo\" : 'label+percent+name',\n            \"hole\" : 0.3,\n            \"type\" : 'pie'\n        },\n    ],\n    \"layout\" : {\n        \"title\" : \"Number of Students Rates at Universities\",\n        \"annotations\" : [\n            {\n                \"font\" : { \"size\" : 20},\n                \"showarrow\" : False,\n                \"text\" : \"Number of Students\",\n                \"x\" : 0.05,\n                \"y\" : 1,\n            },\n        ]\n    }\n}\niplot(fig)","af719a8a":"df2016","cc67eb18":"df2016 = timesData[timesData.year == 2016].iloc[:20, :]\nnum_students_size = [float(each.replace(',', '.')) for each in df2016.num_students]\ninternational_color = [float(each) for each in df2016.international]\ndata = [\n    {\n        'x' : df2016.world_rank,\n        'y' : df2016.teaching,\n        'mode' : 'markers',\n        'marker' : {\n            'color' : international_color,\n            'size' : num_students_size,\n            'showscale' : True\n        },\n        'text' : df2016.university_name\n    }\n]\niplot(data)","65605110":"x2011 = timesData.student_staff_ratio[timesData.year == 2011]\nx2012 = timesData.student_staff_ratio[timesData.year == 2012]\n\ntrace1 = go.Histogram(\n                    x = x2011,\n                    opacity = 0.75,\n                    name = '2011',\n                    marker = dict(color = 'rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n                    x = x2012,\n                    opacity = 0.75,\n                    name = '2012',\n                    marker = dict(color = 'rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(\n                xaxis = dict(title = 'Students-Staff Ratio'),\n                yaxis = dict(title = 'Count'),\n                barmode = 'overlay',\n                title = 'Student-Staff Ratio in 2011 and 2012')\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","0be0e17e":"x2011 = timesData.country[timesData.year == 2011]\nplt.subplots(figsize = (8,8))\nwordcloud = WordCloud(\n                    background_color = 'white',\n                    width = 512,\n                    height = 384\n                                ).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\nplt.show()","1b86f5ca":"x2015 = timesData[timesData.year == 2015]\n\ntrace1 = go.Box(\n                y = x2015.total_score,\n                name = 'Total Score of Universities in 2015',\n                marker = dict(color = 'rgb(12, 12, 140)'))\ntrace2 = go.Box(\n                y = x2015.research,\n                name = 'Research of Universities in 2015',\n                marker = dict(color = 'rgb(12, 128, 128)'))\n\ndata = [trace1, trace2]\niplot(data)","ada58ab6":"import plotly.figure_factory as ff\n\ndataframe = timesData[timesData.year == 2015]\ndata2015 = dataframe.loc[:, [\"research\", \"international\", \"total_score\"]]\ndata2015[\"index\"] = np.arange(1, len(data2015)+1)\n\nfig = ff.create_scatterplotmatrix(data2015, diag = 'box', index = 'index', colormap = 'Portland', \n                                  colormap_type = 'cat', width = 700, height = 700)\niplot(fig)","46819b0a":"trace1 = go.Scatter(\n                    x = dataframe.world_rank,\n                    y = dataframe.teaching,\n                    name = 'Teaching',\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'))\ntrace2 = go.Scatter(\n                    x = dataframe.world_rank,\n                    y = dataframe.income,\n                    xaxis = 'x2',\n                    yaxis = 'y2',\n                    name = 'Income',\n                    marker = dict(color = 'rgba(160, 112, 20, 0.8)'))\ndata = [trace1, trace2]\nlayout = go.Layout(\n                    xaxis2 = dict(domain = [0.6, 0.99], anchor = 'y2'),\n                    yaxis2 = dict(domain = [0.6, 0.95], anchor = 'x2'))\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","971032e5":"trace1 = go.Scatter3d(\n                    x = dataframe.world_rank,\n                    y = dataframe.research,\n                    z = dataframe.citations,\n                    mode = 'markers',\n                    marker = dict(size = 10, color = 'rgb(255,0,0)'))\ndata = [trace1]\nlayout = go.Layout(margin = dict(l = 0, r = 0, b = 0, t = 0))\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","5404c00c":"trace1 = go.Scatter(\n                    x = dataframe.world_rank,\n                    y = dataframe.research,\n                    name = 'Research')\ntrace2 = go.Scatter(x = dataframe.world_rank,\n                    y = dataframe.citations,\n                    xaxis = 'x2',\n                    yaxis = 'y2',\n                    name = 'Citations')\ntrace3 = go.Scatter(x = dataframe.world_rank,\n                    y = dataframe.income,\n                    xaxis = 'x3',\n                    yaxis = 'y3',\n                    name = 'Income')\ntrace4 = go.Scatter(x = dataframe.world_rank,\n                    y = dataframe.total_score,\n                    xaxis = 'x4',\n                    yaxis = 'y4',\n                    name = 'Total Score')\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n                xaxis = dict(domain = [0, 0.45]),\n                yaxis = dict(domain = [0, 0.45]),\n                xaxis2 = dict(domain = [0.55, 1]),\n                yaxis2 = dict(domain = [0, 0.45], anchor = 'x3'),\n                xaxis3 = dict(domain = [0, 0.45], anchor = 'y3'),\n                yaxis3 = dict(domain = [0.55, 1]),\n                xaxis4 = dict(domain = [0.55, 1], anchor = 'y4'),\n                yaxis4 = dict(domain = [0.55, 1], anchor = 'x4'))\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","353b79dc":"Thanks.","0a35d4ce":"**BOX PLOTS**\n\nMedian (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are less that median(50th quartile)(quartile)\n\n25th percentile = quartile 1 (Q1) that is lower quartile\n75th percentile = quartile 3 (Q3) that is higher quartile\nheight of box = IQR = interquartile range = Q3-Q1\nWhiskers = 1.5 * IQR from the Q1 and Q3\nOutliers = being more than 1.5*IQR away from median commonly.\n\ntrace = box\ny = data we want to visualize with box plot\nmarker = color","b1a7fb90":"**SCATTER**\n\nImport graph_objs as go\nCreating traces\nx = x axis\ny = y axis\nmode = type of plot like marker, line or line + markers\nname = name of the plots\nmarker = marker is used with dictionary.\ncolor = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\ntext = The hover text (hover is curser)\ndata = is a list that we add traces into it\nlayout = it is dictionary.\ntitle = title of layout\nx axis = it is dictionary\ntitle = label of x axis\nticklen = length of x axis ticks\nzeroline = showing zero line or not\ny axis = it is dictionary and same with x axis\nfig = it includes data and layout\niplot() = plots the figure(fig) that is created by data and layout\n","a283b65c":" **LINE CHARTS**\n\nImport graph_objs as go\nCreating traces\nx = x axis\ny = y axis\nmode = type of plot like marker, line or line + markers\nname = name of the plots\nmarker = marker is used with dictionary.\ncolor = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\ntext = The hover text (hover is curser)\ndata = is a list that we add traces into it\nlayout = it is dictionary.\ntitle = title of layout\nx axis = it is dictionary\ntitle = label of x axis\nticklen = length of x axis ticks\nzeroline = showing zero line or not\nfig = it includes data and layout\niplot() = plots the figure(fig) that is created by data and layout","e53aee30":"**MULTIPLE SUBPLOTS**","e2a55dd4":"**BUBBLE CHARTS**\n\nx = x axis\ny = y axis\nmode = markers(scatter)\nmarker = marker properties\ncolor = third dimension of plot. Internaltional score\nsize = fourth dimension of plot. Number of students\ntext: university names","7ac47acc":"**PIE CHARTS**\n\nfig: create figures\ndata: plot type\nvalues: values of plot\nlabels: labels of plot\nname: name of plots\nhoverinfo: information in hover\nhole: hole width\ntype: plot type like pie\nlayout: layout of plot\ntitle: title of layout\nannotations: font, showarrow, text, x, y","0eb2ad7d":"**SCATTER MATRIX PLOTS**\n\nmport figure factory as ff\ncreate_scatterplotmatrix = creates scatter plot\ndata2015 = prepared data. It includes research, international and total scores with index from 1 to 401\ncolormap = color map of scatter plot\ncolormap_type = color type of scatter plot\nheight and weight","e978bd77":"**3D SCATTER PLOT with COLORSCALING**\n\ngo.Scatter3d: create 3d scatter plot\nx,y,z: axis of plots\nmode: market that is scatter\nsize: marker size\ncolor: axis of colorscale\ncolorscale: actually it is 4th dimension","3158c390":"**INSET PLOTS**","4627ca88":"**HISTOGRAM**\n\ntrace1 = first histogram\nx = x axis\ny = y axis\nopacity = opacity of histogram\nname = name of legend\nmarker = color of histogram\ntrace2 = second histogram\nlayout = layout\nbarmode = mode of histogram like overlay. Also you can change it with stack","195de143":"**WORD CLOUD**\n\nWordCloud = word cloud library that I import at the beginning of kernel\nbackground_color = color of back ground\ngenerate = generates the country name list(x2011) a word cloud","16d492f7":"**BAR CHARTS**\n\nImport graph_objs as go\nCreating traces\nx = x axis\ny = y axis\nmode = type of plot like marker, line or line + markers\nname = name of the plots\nmarker = marker is used with dictionary.\ncolor = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\nline = It is dictionary. line between bars\ncolor = line color around bars\ntext = The hover text (hover is curser)\ndata = is a list that we add traces into it\nlayout = it is dictionary.\nbarmode = bar mode of bars like grouped\nfig = it includes data and layout\niplot() = plots the figure(fig) that is created by data and layout"}}