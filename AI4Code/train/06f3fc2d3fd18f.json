{"cell_type":{"15ca2ef5":"code","abf2ebdd":"code","28e18c82":"code","1b7b9345":"code","69bc3ce6":"code","236c0ca6":"code","65ff1ef4":"code","ff4513e3":"code","ffb72ece":"code","7a9a0800":"code","fc8c30ee":"code","f5a085be":"code","4e469aca":"code","af1c2e7d":"code","764c9cfe":"markdown","1f9fa13f":"markdown","aaa804cb":"markdown","563e3503":"markdown","5e0b9486":"markdown","45613155":"markdown","b76d79ea":"markdown","dc438436":"markdown","512b8b97":"markdown"},"source":{"15ca2ef5":"import numpy as np\nimport pandas as pd\nimport operator\nimport os\nimport json\nfrom pathlib import Path\nimport itertools\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)\n    \nfrom pathlib import Path","abf2ebdd":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ntraining_tasks = sorted(os.listdir(training_path))\nevaluation_tasks = sorted(os.listdir(evaluation_path))\ntest_tasks = sorted(os.listdir(test_path))\nprint(len(training_tasks), len(evaluation_tasks), len(test_tasks))","28e18c82":"cmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n# 0:black, 1:blue, 2:red, 3:greed, 4:yellow,\n# 5:gray, 6:magenta, 7:orange, 8:sky, 9:brown\nplt.figure(figsize=(5, 2), dpi=200)\nplt.imshow([list(range(10))], cmap=cmap, norm=norm)\nplt.xticks(list(range(10)))\nplt.yticks([])\nplt.show()\n\ndef plot_task(task):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(2, n, figsize=(4*n,8), dpi=50)\n    plt.subplots_adjust(wspace=0, hspace=0)\n    fig_num = 0\n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Train-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Train-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    for i, t in enumerate(task[\"test\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Test-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Test-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    \n    plt.tight_layout()\n    plt.show()","1b7b9345":"def get_data(task_filename):\n    with open(task_filename, 'r') as f:\n        task = json.load(f)\n    return task\n\nnum2color = [\"black\", \"blue\", \"red\", \"green\", \"yellow\", \"gray\", \"magenta\", \"orange\", \"sky\", \"brown\"]\ncolor2num = {c: n for n, c in enumerate(num2color)}","69bc3ce6":"def flattener(pred):\n    str_pred = str([row for row in pred])\n    str_pred = str_pred.replace(', ', '')\n    str_pred = str_pred.replace('[[', '|')\n    str_pred = str_pred.replace('][', '|')\n    str_pred = str_pred.replace(']]', '|')\n    return str_pred","236c0ca6":"sample_sub = pd.read_csv(data_path\/'sample_submission.csv')\nsample_sub = sample_sub.set_index('output_id')\nsample_sub.head()","65ff1ef4":"example_grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\nsample_sub.output=flattener(example_grid)\nsample_sub.head()","ff4513e3":"def check(task, learn_func, pred_func):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(3, n, figsize=(4*n,12), dpi=50)\n    plt.subplots_adjust(wspace=0.3, hspace=0.3)\n    fig_num = 0\n    param_ls=[]#Added\n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        t_pred, param = learn_func(t_in,t_out)\n        if param==False:\n            print('Not suitable')\n            plt.close('all')\n            return\n        param_ls.append(param)\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Train-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Train-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        axs[2][fig_num].imshow(t_pred, cmap=cmap, norm=norm)\n        axs[2][fig_num].set_title(f'Train-{i} pred')\n        axs[2][fig_num].set_yticks(list(range(t_pred.shape[0])))\n        axs[2][fig_num].set_xticks(list(range(t_pred.shape[1])))\n        fig_num += 1\n    if len(set(param_ls))==1:\n        param=param_ls[0]\n        for i, t in enumerate(task[\"test\"]):\n            t_in = np.array(t[\"input\"])\n            t_pred = pred_func(t_in,param)\n            axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n            axs[0][fig_num].set_title(f'Test-{i} in')\n            axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n            axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n            axs[1][fig_num].imshow(t_pred, cmap=cmap, norm=norm)\n            axs[1][fig_num].set_title(f'Test-{i} pred')\n            axs[1][fig_num].set_yticks(list(range(t_pred.shape[0])))\n            axs[1][fig_num].set_xticks(list(range(t_pred.shape[1])))\n            fig_num += 1\n            print(t_pred)\n            if mode=='test':\n                print('mode test')\n                sub_ls=flattener(t_pred.tolist())\n                sample_sub.loc[f'{test_tasks[iteration][:-5]}_{i}','output'] = sample_sub.loc[f'{test_tasks[iteration][:-5]}_{i}','output'] +' '+sub_ls\n        plt.show()\n        \n    else:\n        print('NOT THIS TYPE')\n        return","ffb72ece":"def flip_rot(matrix_pred,matrix_out):\n    flip_0=np.flip(matrix_pred, 0)\n    \n    matrix_out=matrix_out.tolist()\n    matrix_out=flattener(matrix_out)\n\n    if matrix_out==flattener(matrix_pred.tolist()):\n        print('!!!match1!!!')\n        return 'y'\n    elif matrix_out==flattener((np.rot90(matrix_pred)).tolist()):\n        print('!!!match2!!!')\n        return 'np.rot90(y)'\n    elif matrix_out==flattener((np.rot90(matrix_pred, 2)).tolist()):\n        print('!!!match3!!!')\n        return 'np.rot90(y, 2)'\n    elif matrix_out==flattener((np.rot90(matrix_pred, 3)).tolist()):\n        print('!!!match4!!!')\n        return 'np.rot90(y, 3)'\n    \n    elif matrix_out==flattener(flip_0.tolist()):\n        print('!!!match5!!!')\n        return 'np.flip(y, 0)'\n    elif matrix_out==flattener((np.rot90(flip_0)).tolist()):\n        print('!!!match6!!!')\n        return 'np.rot90(np.flip(y, 0))'\n    elif matrix_out==flattener((np.rot90(flip_0, 2)).tolist()):\n        print('!!!match7!!!')\n        return 'np.rot90(np.flip(y, 0),2)'\n    elif matrix_out==flattener((np.rot90(flip_0, 3)).tolist()):\n        print('!!!match8!!!')\n        return 'np.rot90(np.flip(y, 0),3)'\n    else:\n        #print('not_match')\n        return 'y'","7a9a0800":"def pattern_1_learn(x,t_out):    \n    def split_by_gray_line(arr):\n        H, W = arr.shape\n        Y = [-1]\n        for y in range(H):\n            if (arr[y, :]==color3).all():\n                Y.append(y)\n                \n        Y.append(H)\n        X = [-1]\n        \n        for x in range(W):\n            if (arr[:, x]==color3).all():\n                X.append(x)\n        \n        X.append(W)\n        res = [[arr[y1+1:y2, x1+1:x2] for x1, x2 in zip(X[:-1], X[1:])] for\n                       y1, y2 in zip(Y[:-1], Y[1:])]\n\n        return res\n    \n    def change_color(arr, d):\n        res = arr.copy()\n        for k, v in d.items():\n            res[arr==k] = v\n        return res\n\n    for color2 in range(10): #output color\n        for color3 in range(10): #border color\n            for color5 in range(10): #input background\n                for color6 in range(10): #output background\n\n                    x_split = split_by_gray_line(x)\n                    if len(x_split)==1 and len(x_split[0])==2:\n                        x1, x2 = x_split[0]\n                    elif len(x_split)==2 and len(x_split[0])==1:\n                        x1, x2 = x_split\n                        x1=x1[0]\n                        x2=x2[0]\n                    else:\n                        continue\n\n                    if x1.shape!=x2.shape:\n                        continue\n                    \n                    rules=['operator.or_(x1,x2)','operator.and_(x1,x2)',\n                           'operator.xor(x1,x2)']\n\n                    for rule in rules:\n\n                        zero_one = lambda t: 0 if (t == color5) else 1\n                        vfunc = np.vectorize(zero_one) \n                        try:\n                            x1=vfunc(x1)\n                            x2=vfunc(x2)\n                        except ValueError as e:\n                            print(e)\n                            continue\n          \n                        try:\n                            y = eval(rule)\n                        except ValueError as e:\n                            continue\n                            \n                        change_color_v2 = lambda t: color6 if (t == 0) else color2\n                        vfunc = np.vectorize(change_color_v2) \n                        y=vfunc(y)\n                        \n                        #--For rotation and flip, just in case.\n                        f_r=flip_rot(y,t_out)\n                        y=eval(f_r)\n                        #-----\n\n                        if flattener(t_out.tolist())==flattener(y.tolist()):\n                            param=(color2,color3,color5,color6,rule,f_r)\n                            return y, param\n                \n    #print('Return False')\n    return _, False\n\ndef pattern_1_pred(x,param):\n    color2,color3,color5,color6,rule,f_r = param\n    \n    def split_by_gray_line(arr):\n        H, W = arr.shape\n        Y = [-1]\n        for y in range(H):\n            if (arr[y, :]==color3).all():\n                Y.append(y)\n        Y.append(H)\n        X = [-1]\n        for x in range(W):\n            if (arr[:, x]==color3).all():\n                X.append(x)\n        X.append(W)\n        \n        res = [[arr[y1+1:y2, x1+1:x2] for x1, x2 in zip(X[:-1], X[1:])] for\n                       y1, y2 in zip(Y[:-1], Y[1:])]\n\n        return res\n    \n    def change_color(arr, d):\n        res = arr.copy()\n        for k, v in d.items():\n            res[arr==k] = v\n        return res\n\n    x_split = split_by_gray_line(x)\n\n\n    if len(x_split)==1 and len(x_split[0])==2:\n        x1, x2 = x_split[0]\n    elif len(x_split)==2 and len(x_split[0])==1:\n        x1, x2 = x_split\n        x1=x1[0]\n        x2=x2[0]\n    else:\n        print('errrrrr')\n\n    zero_one = lambda t: 0 if (t == color5) else 1\n    vfunc = np.vectorize(zero_one) \n    x1=vfunc(x1)\n    x2=vfunc(x2)\n    try:\n        y = eval(rule)\n    except ValueError as e:\n        print(e)\n    \n    change_color_v2 = lambda t: color6 if (t == 0) else color2\n    vfunc = np.vectorize(change_color_v2) \n    y=vfunc(y)\n    y=eval(f_r)\n    return y","fc8c30ee":"mode='train'\nfor iteration in range(400):\n    task = get_data(str(training_path \/ training_tasks[iteration]))\n    acc = check(task, pattern_1_learn, pattern_1_pred)\n    print(f'Task({iteration}):',training_tasks[iteration])","f5a085be":"mode='eval'\nfor iteration in range(400):\n    task = get_data(str(evaluation_path \/ evaluation_tasks[iteration]))\n    acc = check(task, pattern_1_learn, pattern_1_pred)\n    print(f'Task({iteration}):',evaluation_tasks[iteration])","4e469aca":"mode='test'\nfor iteration in range(100):\n    task = get_data(str(test_path \/ test_tasks[iteration]))\n    acc = check(task, pattern_1_learn, pattern_1_pred)\n    print(f'Task({iteration}):',test_tasks[iteration])","af1c2e7d":"pd.options.display.max_rows = 999\ndisplay(sample_sub)\nlen(sample_sub)\nsample_sub.to_csv('submission.csv')","764c9cfe":"# 2. Codes to solve some tasks","1f9fa13f":"# What is this notebook?\nInspired by [@nagiss](https:\/\/www.kaggle.com\/nagiss)'s [great notebook](https:\/\/www.kaggle.com\/nagiss\/manual-coding-for-the-first-10-tasks), I prepared functions to check if task-solving functions (algorithm) are applicable for target tasks. I modified some codes from [@nagiss](https:\/\/www.kaggle.com\/nagiss)'s [notebook](https:\/\/www.kaggle.com\/nagiss\/manual-coding-for-the-first-10-tasks) and [@meaninglesslives](https:\/\/www.kaggle.com\/meaninglesslives)'s [notebook].(https:\/\/www.kaggle.com\/meaninglesslives\/using-decision-trees-for-arc). I also prepared functions (see 2-1. Functions for Pattern-1 tasks) to solve the following tasks as an example.\n\n* [Training dataset] (7\/400): 0520fde7.json, 1b2d62fb.json, 3428a4f5.json, 6430c8c4.json, 99b1bc43.json, ce4f8723.json, f2829549.json\n\n* [Evaluation dataset] (6\/400): 0c9aba6e.json, 195ba7dc.json, 34b99a2b.json, 506d28a5.json, 5d2a5c43.json, e133d23d.json\n\n***This notebook is for the [Abstraction and Reasoning Challenge](https:\/\/www.kaggle.com\/c\/abstraction-and-reasoning-challenge\/overview) competition.***","aaa804cb":"# 3. Create submission CSV","563e3503":"# 2-4. Apply the functions to the 100 test datasets","5e0b9486":"## 1-1. Function to flip and rotate a predicted output to match the true output\nThe flip_rot() function will test whether predicted outputs can match the fliped\/rotated true output. ","45613155":"# 2-3. Apply the functions to the 400 evaluation datasets","b76d79ea":"# 2-2. Apply the functions to the 400 training datasets","dc438436":"# 1. Preparation","512b8b97":"# 2-1. Functions for Pattern-1 tasks \nThe functions below can solve the following tasks (let's say Pattern-1 tasks).\n\n* [Training dataset] (7\/400): 0520fde7.json, 1b2d62fb.json, 3428a4f5.json, 6430c8c4.json, 99b1bc43.json, ce4f8723.json, f2829549.json\n\n* [Evaluation dataset] (6\/400): 0c9aba6e.json, 195ba7dc.json, 34b99a2b.json, 506d28a5.json, 5d2a5c43.json, e133d23d.json"}}