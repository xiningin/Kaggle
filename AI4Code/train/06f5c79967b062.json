{"cell_type":{"18bb9c0e":"code","8d3c3758":"code","ca55eae1":"code","aa73f8d2":"code","c06bd5d9":"code","5d94ea18":"markdown","0be81abd":"markdown","57c8958d":"markdown","d9588671":"markdown","f4c7ab37":"markdown","93390966":"markdown","13eeebb8":"markdown"},"source":{"18bb9c0e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport os\nimport glob\nimport shutil\nimport itertools\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dropout, Flatten, Dense\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import ResNet50, VGG19, MobileNet, InceptionV3, EfficientNetB6","8d3c3758":"os.mkdir('\/kaggle\/working\/train')\nos.mkdir('\/kaggle\/working\/test')\n\npath = '..\/input\/100-images-of-top-50-car-brands\/imgs_zip\/imgs\/'\nfor class_ in os.listdir(path)[:20]:\n    os.mkdir('\/kaggle\/working\/train\/'+class_)\n    os.mkdir('\/kaggle\/working\/test\/'+class_)\n    \n    data = os.listdir(path+class_)\n    for img in itertools.islice(glob.iglob(os.path.join(path+class_, '*jpg')), \n                                 len(data[:round(len(data)*0.8)])):\n        shutil.copy(img, '\/kaggle\/working\/train\/'+class_)\n        \n    for img in itertools.islice(glob.iglob(os.path.join(path+class_, '*jpg')), \n                                 len(data[:round(len(data)*0.8)]), len(data)):\n        shutil.copy(img, '\/kaggle\/working\/test\/'+class_)","ca55eae1":"train_gen = ImageDataGenerator().flow_from_directory('\/kaggle\/working\/train',\n                                              target_size=(128, 128), class_mode='categorical')\ntest_gen = ImageDataGenerator().flow_from_directory('\/kaggle\/working\/test',\n                                              target_size=(128, 128), class_mode='categorical')","aa73f8d2":"names = ['MobileNet', 'InceptionV3', 'EfficientNetB6']\nhistories = []\n\nfor functional in [MobileNet(include_top=False, input_shape=(128, 128, 3)),\n                   InceptionV3(include_top=False, input_shape=(128, 128, 3)),\n                   EfficientNetB6(include_top=False, input_shape=(128, 128, 3))]:\n    model = Sequential()\n    model.add(functional)\n    model.add(Flatten())\n    model.add(Dense(20, activation='softmax'))\n\n    model.compile(loss='categorical_crossentropy', metrics='accuracy', optimizer='adam')\n    histories.append(model.fit_generator(train_gen, validation_data=test_gen, \n                                         steps_per_epoch=10, validation_steps=10, epochs=10))","c06bd5d9":"fig, axes = plt.subplots(2, 2, figsize=(12, 10))\n\nfor metric in histories[0].history:\n    i = 0\n    ax = axes.flatten()[list(histories[0].history).index(metric)]\n    for history in histories:\n        ax.set_title(metric + \" for different models\")\n        ax.plot(history.history[metric], label=names[i])\n        i += 1\n    ax.legend()\n\nplt.show()","5d94ea18":"# Creating directories","0be81abd":"# Augmenting images","57c8958d":"# Training models","d9588671":"# Evaluating performance","f4c7ab37":"# Classifying cars","93390966":"## If you enjoyed this notebook and found it helpful, please give it an upvote and provide feedback as it would help me make more of these.","13eeebb8":"## Thank you for reading my notebook."}}