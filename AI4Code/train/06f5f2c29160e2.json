{"cell_type":{"e09c22a2":"code","ac0a4b9a":"code","8b71c167":"code","ee6c02d4":"code","4c16b62d":"code","15cd2379":"code","0b830127":"code","37a774a6":"code","22cfe7f2":"code","61cfd8a8":"code","1cf06d92":"code","8b14d0c1":"code","43413dd7":"code","39622503":"code","941f2250":"code","6aba9b8e":"code","5a875026":"code","88c70245":"code","2c95b218":"code","f4940fec":"code","78fa8156":"code","3709538e":"code","a4959aa3":"code","ed4e96a9":"code","b0da7835":"code","04f54fdd":"code","720d217b":"code","40fdcecf":"code","a4127222":"code","549576ff":"code","6f5930ae":"code","ec62302c":"code","b0e93cc9":"code","a3c17f75":"code","4fe0ef48":"code","c7dc9cf8":"code","14e10a13":"code","fd8d0353":"code","18cbbd36":"markdown","3767404a":"markdown","62052a8f":"markdown","054618b8":"markdown","7fa6a9ac":"markdown","dbfbc878":"markdown","aa0ef5c9":"markdown","d1d48102":"markdown","65e4862b":"markdown","6289db11":"markdown","0395ec35":"markdown","317fb3cd":"markdown","21745f27":"markdown","973ae8b7":"markdown","8b2d78c2":"markdown","918aed8c":"markdown","80308ce5":"markdown","3cce7bd9":"markdown","f3f4e8f5":"markdown","d7e8514f":"markdown","0cf95f1c":"markdown","6ef71a72":"markdown","ae952177":"markdown","75e71d2e":"markdown","3394858b":"markdown","f64d504d":"markdown","d5054793":"markdown","7ffe4a49":"markdown","6357612d":"markdown","bcb65e28":"markdown","69870951":"markdown"},"source":{"e09c22a2":"%reset -f\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn.cluster import KMeans\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.manifold import TSNE\nimport re  #regular expression\nfrom sklearn.preprocessing import StandardScaler\nfrom pandas.plotting import andrews_curves\nfrom mpl_toolkits.mplot3d import Axes3D","ac0a4b9a":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","8b71c167":"pd.options.display.max_rows = 1000\npd.options.display.max_columns = 1000","ee6c02d4":"%matplotlib inline","4c16b62d":"cc = pd.read_csv(\"\/kaggle\/input\/ccdata\/CC GENERAL.csv\")\ncc.shape\ncc.head()","15cd2379":"cc.columns = [i.lower() for i in cc.columns]\ncc.columns","0b830127":"cc.drop(columns=[\"cust_id\"], inplace=True)","37a774a6":"cc.head()","22cfe7f2":"cc.describe()","61cfd8a8":"cc.info()","1cf06d92":"cc.isnull().sum()","8b14d0c1":"fig = plt.figure(figsize=(15,5))\nax=plt.subplot(1,2,1)\nsns.distplot(cc.credit_limit)\nplt.xlim([0,20000])\nax=plt.subplot(1,2,2)\nsns.distplot(cc.minimum_payments)\nplt.xlim([0,10000])","43413dd7":"cc.fillna(value = {\n                 'minimum_payments' :   cc['minimum_payments'].median(),\n                 'credit_limit'               :     cc['credit_limit'].median()\n               }, inplace=True)","39622503":"cc.isnull().sum()","941f2250":"cc.describe()","6aba9b8e":"from sklearn.preprocessing import normalize","5a875026":"ss =  StandardScaler()\nout = ss.fit_transform(cc)\nout = normalize(out)\nout.shape","88c70245":"df_out = pd.DataFrame(out, columns=cc.columns)\ndf_out.head()","2c95b218":"fig, axes = plt.subplots(nrows=4, ncols=5, figsize=(15,15))\nax = axes.flatten()\nfig.tight_layout()\n# Do not display 18th, 19th and 20th axes\naxes[3,3].set_axis_off()\naxes[3,2].set_axis_off()\naxes[3,4].set_axis_off()\n# Below 'j' is not used.\nfor i,j in enumerate(df_out.columns):\n    sns.distplot(df_out.iloc[:,i], ax = ax[i])\n","f4940fec":"fig = plt.figure(figsize=(15,5))\nax=plt.subplot(2,2,1)\nsns.distplot(df_out.credit_limit)\nax=plt.subplot(2,2,2)\nsns.distplot(df_out.purchases)\nax=plt.subplot(2,2,3)\nsns.distplot(df_out.payments)\nax=plt.subplot(2,2,4)\nsns.distplot(df_out.balance)","78fa8156":"fig = plt.figure(figsize=(15,5))\nax=plt.subplot(2,2,1)\nsns.violinplot(df_out.credit_limit)\nax=plt.subplot(2,2,2)\nsns.violinplot(df_out.purchases)\nax=plt.subplot(2,2,3)\nsns.violinplot(df_out.payments)\nax=plt.subplot(2,2,4)\nsns.violinplot(df_out.balance)\n","3709538e":"fig = plt.figure(figsize=(15,5))\nax=plt.subplot(1,4,1)\nsns.boxplot(y=df_out.credit_limit)\nax=plt.subplot(1,4,2)\nsns.boxplot(y=df_out.purchases)\nax=plt.subplot(1,4,3)\nsns.boxplot(y=df_out.payments)\nax=plt.subplot(1,4,4)\nsns.boxplot(y=df_out.balance)","a4959aa3":"sns.jointplot(df_out.credit_limit,df_out.purchases)","ed4e96a9":"sns.jointplot(df_out.purchases,df_out.payments)","b0da7835":"sns.pairplot(df_out, vars=[\"credit_limit\",\"purchases\",\"payments\",'balance'])","04f54fdd":"bic = []\naic = []\nfor i in range(8):\n    gm = GaussianMixture(\n                     n_components = i+1,\n                     n_init = 10,\n                     max_iter = 100)\n    gm.fit(df_out)\n    bic.append(gm.bic(df_out))\n    aic.append(gm.aic(df_out))\n\nfig = plt.figure()\nplt.plot([1,2,3,4,5,6,7,8], aic)\nplt.plot([1,2,3,4,5,6,7,8], bic)\nplt.show()","720d217b":"df_out.columns","40fdcecf":"gm = GaussianMixture(n_components = 3,\n                     n_init = 10,\n                     max_iter = 100)\ngm.fit(df_out)","a4127222":"fig = plt.figure()\n\nplt.scatter(df_out.iloc[:, 0], df_out.iloc[:, 2],\n            c=gm.predict(df_out),\n            s=5)\nplt.scatter(gm.means_[:, 0], gm.means_[:, 2],\n            marker='v',\n            s=10,               # marker size\n            linewidths=5,      # linewidth of marker edges\n            color='red'\n            )\nplt.show()\n","549576ff":"fig = plt.figure()\n\nplt.scatter(df_out.iloc[:, 2], df_out.iloc[:, 13],\n            c=gm.predict(df_out),\n            s=5)\nplt.scatter(gm.means_[:, 2], gm.means_[:, 13],\n            marker='v',\n            s=10,               # marker size\n            linewidths=5,      # linewidth of marker edges\n            color='red'\n            )\nplt.show()\n","6f5930ae":"gm = GaussianMixture(\n                     n_components = 3,\n                     n_init = 10,\n                     max_iter = 100)\ngm.fit(df_out)\n\ntsne = TSNE(n_components = 2)\ntsne_out = tsne.fit_transform(df_out)\nplt.scatter(tsne_out[:, 0], tsne_out[:, 1],\n            marker='x',\n            s=50,              # marker size\n            linewidths=5,      # linewidth of marker edges\n            c=gm.predict(df_out)   # Colour as per gmm\n            )","ec62302c":"densities = gm.score_samples(df_out)\ndensities\n\ndensity_threshold = np.percentile(densities,4)\ndensity_threshold\n\nanomalies = df_out[densities < density_threshold]\nanomalies.shape\n\nunanomalies = df_out[densities >= density_threshold]\nunanomalies.shape   ","b0e93cc9":"df_anomalies = pd.DataFrame(anomalies)\ndf_anomalies['type'] = 'anomalous'  \ndf_normal = pd.DataFrame(unanomalies)\ndf_normal['type'] = 'unanomalous'\n\ndf_anomalies.shape","a3c17f75":"df_anomalies.head()","4fe0ef48":"df_normal.head()","c7dc9cf8":"\nfig, axes = plt.subplots(nrows=5, ncols=3, figsize=(15,8))\nax = axes.flatten()\nfig.tight_layout()\nfor i in range(15):\n    sns.distplot(df_anomalies.iloc[:,i], ax = ax[i],color='b')\n    sns.distplot(df_normal.iloc[:,i], ax = ax[i],color='g')\n","14e10a13":"df = pd.concat([df_anomalies,df_normal])\ndf.head()","fd8d0353":"fig = plt.figure(figsize=(15,5))\nax=plt.subplot(2,2,1)\nsns.boxplot(x = df['type'], y = df['balance'])\nax=plt.subplot(2,2,2)\nsns.boxplot(x = df['type'], y = df['purchases'])\nax=plt.subplot(2,2,3)\nsns.boxplot(x = df['type'], y = df['credit_limit'])\nax=plt.subplot(2,2,4)\nsns.boxplot(x = df['type'], y = df['payments'])","18cbbd36":"Get both the dataframes into single one","3767404a":"Check whether any column has null value","62052a8f":"<u>Remove Special characters in Column names <\/u>","054618b8":"Pair plots for the 4 columns : credit_limit, purchases, payments, balance","7fa6a9ac":"Box plot for the 4 columns : credit_limit, purchases, payments, balance","dbfbc878":"<u>Settings for Display & Running Mode<\/u>","aa0ef5c9":"Distribution plots for all the fields in the dataset","d1d48102":"Based on the scree plot, we can decide number of clusters as 3","65e4862b":"<u>Scaling of the dataset<\/u>","6289db11":"<u>Import appropriate python libraries<\/u>","0395ec35":"credit_limit and minimum_payments fields have null values. <br\/>\n\nPlot distribution plot for the 2 columns which have null values","317fb3cd":"TSNE Visualization with number of clusters as 3","21745f27":"### Created By : Ezhilarasan Kannaiyan\nTo analyse the Credit Cards Dataset and use **Gaussian Mixture Model** to cluster the data","973ae8b7":"**Analyse the normalized dataset using seaborn graphs**","8b2d78c2":"Distribution plot for the 4 columns : credit_limit, purchases, payments, balance","918aed8c":"Plot boxplots for the dataframe fields based on the type (anomalous and unanomalous)","80308ce5":"Draw distribution plots for all the columns of df_anomalies and df_normal","3cce7bd9":"Violin plot for the 4 columns : credit_limit, purchases, payments, balance","f3f4e8f5":"Find out Anomalous and Normal points","d7e8514f":"Scree Plot to check the number of clusters we could get from the dataset","0cf95f1c":"Convert the anomalous and normal points into dataframes ","6ef71a72":"Draw scatter plot to visualize the GMM output for purchases and payments fields","ae952177":"Replace null valus with Median of the corresponding column","75e71d2e":"Fit the dataset to GMM model with number of clusters as 3","3394858b":"Joint plot between purchases and payments","f64d504d":"Statistical information","d5054793":"Check the dataset fields and decide which column we can use for visualizing the clusters","7ffe4a49":"Drop CustomerID column","6357612d":"Joint plot between credit_limit and purchases","bcb65e28":"Draw scatter plot to visualize the GMM output for balance and purchases fields","69870951":"<u>Read the datset<\/u>"}}