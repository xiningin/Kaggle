{"cell_type":{"0b10b0be":"code","eeb6d048":"code","68feddb5":"code","052281a4":"code","571e41ed":"code","35946550":"code","8fc6e24e":"code","d3f8ba71":"code","23ca0402":"code","ecd7642a":"code","ac63ccc6":"code","5c1042dc":"code","b8e66889":"code","3b5622ba":"code","c0e74f27":"code","196317ef":"code","73d677d0":"code","a3d03d40":"code","0e5db205":"code","cec37642":"code","ff48176f":"code","c5f9b390":"code","5a3dcd27":"code","36142a39":"code","a6739f46":"code","438e4063":"code","0f44c073":"code","cf0a03fc":"code","736e0cf3":"code","9752efc8":"code","dfe55204":"code","7d4c2631":"code","adcac034":"code","9476f8c8":"markdown","329f4562":"markdown","e6ee6664":"markdown"},"source":{"0b10b0be":"# import necessary modules \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport numpy as np \nimport seaborn as sns","eeb6d048":"data_train=pd.read_csv(\"..\/input\/a-fine-windy-day-hackerearth-ml-challenge\/train_data.csv\")\ndata_train","68feddb5":"import missingno as msno\nmsno.matrix(data_train)","052281a4":"msno.heatmap(data_train)","571e41ed":"corr=data_train.corr()\nsns.heatmap(corr)","35946550":"data_train.isnull().sum()","8fc6e24e":"data_train.info()","d3f8ba71":"data_train['wind_speed(m\/s)'] = data_train['wind_speed(m\/s)'].fillna((data_train['wind_speed(m\/s)'].mean()))\ndata_train['atmospheric_temperature(\u00b0C)'] = data_train['atmospheric_temperature(\u00b0C)'].fillna((data_train['atmospheric_temperature(\u00b0C)'].mean()))\ndata_train['shaft_temperature(\u00b0C)'] = data_train['shaft_temperature(\u00b0C)'].fillna((data_train['shaft_temperature(\u00b0C)'].mean()))\ndata_train['blades_angle(\u00b0)'] = data_train['blades_angle(\u00b0)'].fillna((data_train['blades_angle(\u00b0)'].mean()))\ndata_train['gearbox_temperature(\u00b0C)'] = data_train['gearbox_temperature(\u00b0C)'].fillna((data_train['gearbox_temperature(\u00b0C)'].mean()))\ndata_train['engine_temperature(\u00b0C)'] = data_train['engine_temperature(\u00b0C)'].fillna((data_train['engine_temperature(\u00b0C)'].mean()))\ndata_train['motor_torque(N-m)'] = data_train['motor_torque(N-m)'].fillna((data_train['motor_torque(N-m)'].mean()))\ndata_train['generator_temperature(\u00b0C)'] = data_train['generator_temperature(\u00b0C)'].fillna((data_train['generator_temperature(\u00b0C)'].mean()))\ndata_train['atmospheric_pressure(Pascal)'] = data_train['atmospheric_pressure(Pascal)'].fillna((data_train['atmospheric_pressure(Pascal)'].mean()))\ndata_train['windmill_body_temperature(\u00b0C)'] = data_train['windmill_body_temperature(\u00b0C)'].fillna((data_train['windmill_body_temperature(\u00b0C)'].mean()))\ndata_train['wind_direction(\u00b0)'] = data_train['wind_direction(\u00b0)'].fillna((data_train['wind_direction(\u00b0)'].mean()))\ndata_train['resistance(ohm)'] = data_train['resistance(ohm)'].fillna((data_train['resistance(ohm)'].mean()))\ndata_train['rotor_torque(N-m)'] = data_train['rotor_torque(N-m)'].fillna((data_train['rotor_torque(N-m)'].mean()))\ndata_train['blade_length(m)'] = data_train['blade_length(m)'].fillna((data_train['blade_length(m)'].mean()))\ndata_train['windmill_height(m)'] = data_train['windmill_height(m)'].fillna((data_train['windmill_height(m)'].mean()))\ndata_train['windmill_generated_power(kW\/h)'] = data_train['windmill_generated_power(kW\/h)'].fillna((data_train['windmill_generated_power(kW\/h)'].mean()))\ndata_train.head()\ndf_most_common_imputed = data_train.apply(lambda x: x.fillna(x.value_counts().index[0]))\ndf_most_common_imputed","23ca0402":"import missingno as msno\nmsno.matrix(df_most_common_imputed)","ecd7642a":"df_most_common_imputed.isnull().sum()","ac63ccc6":"import pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nfor column_name in df_most_common_imputed.columns:\n    if df_most_common_imputed[column_name].dtype == object:\n        df_most_common_imputed[column_name] = le.fit_transform(df_most_common_imputed[column_name])\n    else:\n        pass\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\ndf_most_common_imputed[df_most_common_imputed < 0] = 0\nX = df_most_common_imputed.iloc[:,0:]  \ny = df_most_common_imputed.iloc[:,-1] \n\ny=y.astype('int')\nbestfeatures = SelectKBest(score_func=chi2, k=22)\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Features','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(22,'Score')) \ndf_most_common_imputed","5c1042dc":"# import pandas as pd\n# import numpy as np\n# from sklearn.ensemble import RandomForestClassifier\n# from boruta import BorutaPy\n# from sklearn.model_selection import train_test_split\n# from sklearn.metrics import accuracy_score \n# rfc = RandomForestClassifier(random_state=1, n_estimators=1000, max_depth=5)\n# boruta_selector = BorutaPy(rfc, n_estimators='auto', verbose=2, random_state=1)\n# boruta_selector.fit(np.array(X), np.array(y))\n# print(\"Ranking: \",boruta_selector.ranking_)          \n# print(\"No. of significant features: \", boruta_selector.n_features_)\n# selected_rf_features = pd.DataFrame({'Feature':list(X.columns),'Ranking':boruta_selector.ranking_})\n# selected_rf_features.sort_values(by='Ranking')","b8e66889":"df_most_common_imputed.drop([\"turbine_status\"], axis=1, inplace=True)\ndf_most_common_imputed.drop([\"windmill_height(m)\"], axis=1, inplace=True)","3b5622ba":"df_most_common_imputed\nimport pandas as pd\nfrom scipy import stats\nz_scores = stats.zscore(df_most_common_imputed)\nabs_z_scores = np.abs(z_scores)\nfiltered_entries = (abs_z_scores < 3).all(axis=1)\nnew_df = df_most_common_imputed[filtered_entries]\nnew_df","c0e74f27":"sns.set(rc={'figure.figsize':(60,15)})\nsns.boxplot(data=df_most_common_imputed)","196317ef":"sns.set(rc={'figure.figsize':(60,15)})\nsns.boxplot(data=new_df)","73d677d0":"sns.pairplot(new_df)","a3d03d40":"data_test=pd.read_csv(\"..\/input\/a-fine-windy-day-hackerearth-ml-challenge\/test_data.csv\")\ndata_test.head()","0e5db205":"data_test.isnull().sum()","cec37642":"import missingno as msno\nmsno.matrix(data_test)","ff48176f":"msno.heatmap(data_test)","c5f9b390":"corr=data_test.corr()\nsns.heatmap(corr)","5a3dcd27":"data_test['wind_speed(m\/s)'] = data_test['wind_speed(m\/s)'].fillna((data_test['wind_speed(m\/s)'].mean()))\ndata_test['atmospheric_temperature(\u00b0C)'] = data_test['atmospheric_temperature(\u00b0C)'].fillna((data_test['atmospheric_temperature(\u00b0C)'].mean()))\ndata_test['shaft_temperature(\u00b0C)'] = data_test['shaft_temperature(\u00b0C)'].fillna((data_test['shaft_temperature(\u00b0C)'].mean()))\ndata_test['blades_angle(\u00b0)'] = data_test['blades_angle(\u00b0)'].fillna((data_test['blades_angle(\u00b0)'].mean()))\ndata_test['gearbox_temperature(\u00b0C)'] = data_test['gearbox_temperature(\u00b0C)'].fillna((data_test['gearbox_temperature(\u00b0C)'].mean()))\ndata_test['engine_temperature(\u00b0C)'] = data_test['engine_temperature(\u00b0C)'].fillna((data_test['engine_temperature(\u00b0C)'].mean()))\ndata_test['motor_torque(N-m)'] = data_test['motor_torque(N-m)'].fillna((data_test['motor_torque(N-m)'].mean()))\ndata_test['generator_temperature(\u00b0C)'] = data_test['generator_temperature(\u00b0C)'].fillna((data_test['generator_temperature(\u00b0C)'].mean()))\ndata_test['atmospheric_pressure(Pascal)'] = data_test['atmospheric_pressure(Pascal)'].fillna((data_test['atmospheric_pressure(Pascal)'].mean()))\ndata_test['area_temperature(\u00b0C)'] = data_test['area_temperature(\u00b0C)'].fillna((data_test['area_temperature(\u00b0C)'].mean()))\ndata_test['windmill_body_temperature(\u00b0C)'] = data_test['windmill_body_temperature(\u00b0C)'].fillna((data_test['windmill_body_temperature(\u00b0C)'].mean()))\ndata_test['wind_direction(\u00b0)'] = data_test['wind_direction(\u00b0)'].fillna((data_test['wind_direction(\u00b0)'].mean()))\ndata_test['rotor_torque(N-m)'] = data_test['rotor_torque(N-m)'].fillna((data_test['rotor_torque(N-m)'].mean()))\ndata_test['blade_length(m)'] = data_test['blade_length(m)'].fillna((data_test['blade_length(m)'].mean()))\ndata_test['windmill_height(m)'] = data_test['windmill_height(m)'].fillna((data_test['windmill_height(m)'].mean()))\ndata_test.head()\ndt_most_common_imputed = data_test.apply(lambda x: x.fillna(x.value_counts().index[0]))\ndt_most_common_imputed","36142a39":"import missingno as msno\nmsno.matrix(dt_most_common_imputed)","a6739f46":"dt_most_common_imputed.isnull().sum()\n","438e4063":"dt_most_common_imputed.drop([\"turbine_status\"], axis=1, inplace=True)\ndt_most_common_imputed.drop([\"windmill_height(m)\"], axis=1, inplace=True)","0f44c073":"sns.set(rc={'figure.figsize':(60,15)})\nsns.boxplot(data=dt_most_common_imputed)","cf0a03fc":"sns.pairplot(dt_most_common_imputed)","736e0cf3":"import pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nfor column_name in dt_most_common_imputed.columns:\n    if dt_most_common_imputed[column_name].dtype == object:\n        dt_most_common_imputed[column_name] = le.fit_transform(dt_most_common_imputed[column_name])\n    else:\n        pass\nfor column_name in df_most_common_imputed.columns:\n    if df_most_common_imputed[column_name].dtype == object:\n        df_most_common_imputed[column_name] = le.fit_transform(df_most_common_imputed[column_name])\n    else:\n        pass\n\nx_train = df_most_common_imputed.iloc[:,0:-1]  \ny_train = df_most_common_imputed.iloc[:,-1] \nx_test=   dt_most_common_imputed\nx_train\ny_train\nx_test","9752efc8":"df=pd.DataFrame()\ndf['tracking_id']=data_test['tracking_id']\ndf['datetime']=data_test['datetime']\ndf['windmill_generated_power(kW\/h)']=df_most_common_imputed['windmill_generated_power(kW\/h)']\ndf","dfe55204":"import xgboost as xgb\n#xg_reg = xgb.XGBRegressor(learning_rate =0.1,max_depth =4,objective=\"reg:linear\",n_estimators=30)\nxg_reg = xgb.XGBRegressor(learning_rate =0.1,max_depth =7,alpha=3,objective=\"reg:linear\",n_estimators=577)                  \nxg_reg.fit(x_train,y_train)\n\nxgbost= xg_reg.predict(x_test)\ndf[\"windmill_generated_power(kW\/h)\"]=xgbost\ndf.head()","7d4c2631":"df.info()","adcac034":"#df.to_csv(\"xg_boost.csv\",index=False)","9476f8c8":"## Data cleaning just doing imputations and filling null with mean and categorical values with most occuring on train data","329f4562":"## Data cleaning just doing imputations and filling null with mean and categorical values with most occuring on test data","e6ee6664":"### TASK\n### https:\/\/www.hackerearth.com\/challenges\/competitive\/hackerearth-machine-learning-challenge-predict-windmill-power\/problems\/\n## Predict The Power Generated By WindMill"}}