{"cell_type":{"786097be":"code","1dd8e3b9":"code","fa8fe7d3":"code","3ae89ce3":"code","07fa12da":"code","dec866c2":"code","1d73ca26":"code","d8731c93":"code","59e04728":"code","b07f0e51":"code","dbbf9d54":"code","1367ac0f":"code","a2439029":"code","ab8a1115":"code","324a21f8":"code","ee9d3f09":"code","30ddd6ea":"code","6890e5c1":"code","96cf013c":"code","ef15344a":"code","ae51f842":"code","7e39c1f6":"code","baae1cea":"code","663a36b3":"code","ae92f9a2":"code","630a20f1":"code","5324a6d4":"code","02604927":"code","ec9f4b76":"code","7d027e77":"code","a1db1a57":"code","248f6096":"code","a8a48743":"code","84cc8b17":"code","610ebf5e":"code","a179dd08":"code","e6e9e0d5":"code","f3b2a35d":"code","2f3a23f0":"code","0806d778":"code","0d8ee5f5":"code","9d804150":"code","16c00436":"code","cfd6e629":"code","9bde1905":"code","71ab9425":"code","94aef73c":"code","1795a838":"code","dfc0f2e0":"code","60e4f117":"code","714d7cab":"code","91116d6e":"code","af8f9108":"code","0fee230e":"code","1846697b":"code","42b9e76e":"code","3e0f2981":"code","9b70af9f":"code","947aef62":"code","eba2af0b":"code","756e77cc":"code","d5847289":"code","43e2167a":"code","0d7ed747":"code","6f05bf6b":"code","8773bdaf":"code","8762def4":"code","92c42870":"code","6b33674e":"code","dc34878f":"code","a9994440":"code","3706e0ae":"code","9c7abfab":"code","420f8ecd":"code","f80bd6c6":"code","3d13aaf1":"code","dba57ba4":"code","77314c0c":"code","a932f191":"code","42c06091":"code","381e4b6a":"code","80cb4c5d":"code","3f921c3c":"code","9b630329":"code","d9392eaf":"code","da5a2d7b":"code","e0327271":"code","c31b4fcf":"code","2c0e47a2":"code","4fb2e469":"code","2bb51005":"code","f9d1f424":"code","bd904dd8":"code","0eb19004":"code","6804eeaa":"code","f5ea035a":"code","af731399":"code","198a81ce":"code","7f9ae17c":"code","5df3a7c1":"code","c54cbf6d":"code","88f46501":"code","d84d11c9":"code","e2790d66":"code","7510bd8b":"code","f475b514":"code","474fccad":"code","a49d54b4":"code","bf780898":"markdown","e6a33b09":"markdown","50e492e7":"markdown","3b38b835":"markdown","05373928":"markdown","e5c225a5":"markdown","4397a9ff":"markdown","5d928f72":"markdown","5482db7a":"markdown","9cee0722":"markdown","791a798e":"markdown","57292749":"markdown","f1668f51":"markdown","ebe72f52":"markdown","7d5c84bd":"markdown","046693a4":"markdown","6f75fe55":"markdown","5a79d681":"markdown","90a17fcb":"markdown","8bf61f96":"markdown","b16c8d00":"markdown","61379ba4":"markdown","947121b7":"markdown","acc53945":"markdown","cf541c91":"markdown","d1a4c259":"markdown","65e94bc3":"markdown","c3efdee7":"markdown","fd58dec2":"markdown","4553aa60":"markdown","29a85ba7":"markdown","581888db":"markdown","47f047d1":"markdown","0c182c9c":"markdown","4a851418":"markdown","2ff3b7b0":"markdown","069613df":"markdown","256884f0":"markdown","08a48a36":"markdown","9d6706b3":"markdown","54b78d30":"markdown","1ea05297":"markdown","d431ce74":"markdown","7033e5af":"markdown","0244239e":"markdown","e74fad0f":"markdown","12457aab":"markdown","a9199f29":"markdown","65a22407":"markdown","de8ad609":"markdown","cd2052a4":"markdown","418d0fb9":"markdown","27634b20":"markdown","70ed0458":"markdown","9d94d236":"markdown","3ff87dc7":"markdown","6beeb9d4":"markdown","b717a9b5":"markdown","4254bedd":"markdown","af56410f":"markdown","aff2e3bd":"markdown","30144326":"markdown","f07bbc1a":"markdown","15590210":"markdown","144d655c":"markdown","ee936e7c":"markdown","0c5c42ed":"markdown","2f5ed328":"markdown","9e51b7f6":"markdown","3abc9ba7":"markdown","78bc0d71":"markdown","fcf338b4":"markdown","96a84345":"markdown","1b15cd3e":"markdown","556b2c65":"markdown","ad21f7fc":"markdown","6542cc9a":"markdown","417c03d1":"markdown","61c0ba65":"markdown","fe6416d2":"markdown","c27f33b2":"markdown","a2272787":"markdown","5c16869a":"markdown","d43b5f9c":"markdown","8d08f71c":"markdown","16606380":"markdown"},"source":{"786097be":"import pandas as pd\nimport numpy as np\nimport datetime as dt\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","1dd8e3b9":"df_raw = pd.read_csv('..\/input\/sales-performance-report-dqlab-store\/raw_data.csv')","fa8fe7d3":"df_raw.head()","3ae89ce3":"df_raw.tail()","07fa12da":"print('The dataframe before cleaning has %d rows and %d columns.' % df_raw.shape)","dec866c2":"df_raw_drop = df_raw.drop(index=[0,5500])","1d73ca26":"df_raw_drop.head()","d8731c93":"df_raw_drop.tail()","59e04728":"df_raw_drop.shape","b07f0e51":"df_raw_drop.shape","dbbf9d54":"df_raw.columns","1367ac0f":"df_raw_drop.index","a2439029":"#Creating string from list from series\ncolumn_string = str(list(df_raw_drop.columns))\n\n#Combining 2 list to become string data type\ncolumn_string = ''.join(column_string )\n\n#Remove space between letters\ncolumn_string = column_string.replace(\" \",\"\")\n\n#Slicing the string to remove square brackets from left and right\ncolumn_string = column_string[2:-3]\n\n#Split string. From string data type to list data type\ndf_columns = column_string.split('|')\n\nprint('The length of dataframe column: ',len(df_columns))\ndf_columns","ab8a1115":"# Import regex library for string manipulation\nimport re","324a21f8":"i = 0\ndf_rows= []\n\nwhile i <5499:\n    #Creating string from list from series\n    row_string = str(list(df_raw_drop.iloc[i]))\n    \n    #Combining 2 list to become string data type\n    row_string = ''.join(row_string)\n    \n    #Remove space between letters\n    row_string = row_string.replace(\" \",\"\")\n    \n    #Slicing the string to remove square brackets from left and right\n    row_string = row_string[3:-3]\n    \n    #Separating word for everty uppercase letter using regex function\n    row_string = re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", row_string)\n    \n    #Split string. From string data type to list data type\n    row_string = row_string.split('|')\n    \n    #Adding list to a list container\n    df_rows.append(row_string)\n    i+= 1\n\nprint('The length of dataframe rows:', len(df_rows))\nprint(df_rows[0:3])","ee9d3f09":"df_clean = pd.DataFrame(df_rows, columns=df_columns)\ndf_clean","30ddd6ea":"df_clean.isnull().sum()","6890e5c1":"df_clean['order_id'].value_counts()","96cf013c":"df_clean['order_status'].value_counts()","ef15344a":"df_clean['customer'].value_counts()","ae51f842":"df_clean['order_date'].value_counts()","7e39c1f6":"df_clean['order_quantity'].value_counts()","baae1cea":"df_clean['sales'].value_counts()","663a36b3":"df_clean['discount'].value_counts()","ae92f9a2":"df_clean['discount_value'].value_counts()","630a20f1":"df_clean['product_category'].value_counts()","5324a6d4":"df_clean['product_sub_category'].value_counts()","02604927":"df_clean['product_sub_category'] = df_clean['product_sub_category'].map({'Bindersand Binder Accessories':'Binders & Binder Accessories',\n                                      'Telephonesand Communication':'Telephones & Communication',\n                                     'Pens&Art Supplies':'Pens & Art Supplies',\n                                     'Chairs&Chairmats':'Chairs & Chairmats',\n                                     'Storage&Organization':'Storage & Organization',\n                                     'Scissors,Rulersand Trimmers':'Scissors, Rulers & Trimmers',\n                                     'Copiersand Fax':'Copiers & Fax'}).fillna(df_clean['product_sub_category'])","ec9f4b76":"df_clean['product_sub_category'].value_counts()","7d027e77":"df_clean.dtypes","a1db1a57":"df_clean['order_date'] = pd.to_datetime(df_clean['order_date'])","248f6096":"df_clean.dtypes","a8a48743":"df_clean['order_quantity'] = df_clean['order_quantity'].astype('int64')\ndf_clean['sales'] = df_clean['sales'].astype('int64')\ndf_clean['sales'] = df_clean['sales'].astype('int64')\ndf_clean['discount'] = df_clean['discount'].astype('float64')\ndf_clean['discount_value'] = df_clean['discount_value'].astype('int64')","84cc8b17":"df_clean.dtypes","610ebf5e":"df_clean.head()","a179dd08":"df_clean.tail()","e6e9e0d5":"print('The dataframe after cleaning has %d rows and %d columns.' % df_clean.shape)","f3b2a35d":"# df_clean.to_csv('clean_data.csv', index=False)","2f3a23f0":"df = pd.read_csv('..\/input\/sales-performance-report-dqlab-store\/clean_data.csv')","0806d778":"df.head()","0d8ee5f5":"df.dtypes","9d804150":"# Change order date data type from object to datetime\ndf['order_date'] = pd.to_datetime(df['order_date'])\ndf.dtypes","16c00436":"# Creating new column containing year from order_date column\ndf['years'] = pd.DatetimeIndex(df['order_date']).year\ndf['years']","cfd6e629":"# Filtering the dataframe data by order_status\nopby = df.loc[df['order_status']=='Order Finished']\nprint(opby.head())\nopby['order_status'].shape","9bde1905":"# Groupby data by years column and do aggregate function for sales and order_id column\nopby = opby.groupby(opby['years']).agg({'sales': 'sum', 'order_id': pd.Series.nunique}).sort_values('years', ascending=True)\nopby = opby.rename(columns={'order_id': 'number_of_order'})","71ab9425":"opby","94aef73c":"#Formulation growth_sales\ni=0\ngrow_sale = []\nwhile i <len(opby):\n    if i ==0:\n        grow_sale.append(0)\n        i+=1\n    \n    grow_sale.append(round(((opby.iloc[i,0]\/opby.iloc[i-1,0])-1),2))\n    i+=1\ngrow_sale","1795a838":"opby['growth_sales_%'] = grow_sale","dfc0f2e0":"opby['growth_sales_%']","60e4f117":"#Formulation growth_order\ni=0\ngrow_order = []\nwhile i <len(opby):\n    if i ==0:\n        grow_order.append(0)\n        i+=1\n    \n    grow_order.append(round(((opby.iloc[i,1]\/opby.iloc[i-1,1])-1),3))\n    i+=1\ngrow_order","714d7cab":"opby['growth_order_%'] = grow_order","91116d6e":"opby['growth_order_%']","af8f9108":"opby\n","0fee230e":"# Filtering the dataframe data by order_status and order_date\nopbpsc = df.loc[(df['order_status']=='Order Finished') & ((df['years']== 2011) | (df['years']== 2012))]\nopbpsc.head()","1846697b":"# Groupby data by years and product_sub_category column, then do aggregate function for sales and order_id column\nopbpsc = opbpsc.groupby(['years', 'product_sub_category']).agg({'sales': 'sum', 'order_id': pd.Series.nunique})\nopbpsc = opbpsc.sort_values(['years','sales'], ascending=[True, False])\nopbpsc = opbpsc.rename(columns={'order_id': 'number_of_order'})","42b9e76e":"opbpsc","3e0f2981":"#opbpsc.to_clipboard()","9b70af9f":"# Filtering the dataframe data by order_status\npeeby = df.loc[(df['order_status']=='Order Finished')]\npeeby.head()","947aef62":"# Groupby data by years, then do aggregate function for sales, discount_value\npeeby = peeby.groupby(['years',]).agg({'sales': 'sum', 'discount_value':'sum'})\npeeby","eba2af0b":"#Creating burn_rate_percentage column\npeeby['burn_rate_percentage'] = ((peeby['discount_value'] \/ peeby['sales'])).round(4)\npeeby = peeby.rename(columns={'discount_value': 'promotion_value'})","756e77cc":"#peeby.to_clipboard()","d5847289":"peeby","43e2167a":"# Filtering the dataframe data by order_status and order_date\npeebsc = df.loc[(df['order_status']=='Order Finished') & (df['years']== 2012)]\npeebsc.head()","0d7ed747":"# Groupby data by years, product_sub_category, and product_category then do aggregate function for sales and discount_value\npeebsc = peebsc.groupby(['years', 'product_category','product_sub_category']).agg({'sales': 'sum', 'discount_value':'sum'})","6f05bf6b":"peebsc.head()","8773bdaf":"#Creating burn_rate_percentage column\npeebsc['burn_rate_percentage'] = ((peebsc['discount_value'] \/ peebsc['sales'])*100).round(2)\npeebsc = peebsc.rename(columns={'discount_value': 'promotion_value'})","8762def4":"#Sort value based on sales\npeebsc = peebsc.sort_values('sales', ascending=False)","92c42870":"peebsc.head()","6b33674e":"# Filtering the dataframe data by order_status\nctpy = df.loc[(df['order_status']=='Order Finished')]\nctpy","dc34878f":"# Groupby data by years, then do aggregate function for customer\nctpy = ctpy.groupby(['years']).agg({'customer': 'nunique'})\nctpy = ctpy.rename(columns={'customer': 'number_of_unique_customer'})","a9994440":"ctpy","3706e0ae":"# Filtering the dataframe data by order_status\nnba0 = df.loc[(df['order_status']=='Order Finished')]","9c7abfab":"nba0","420f8ecd":"nba0 = nba0.sort_values('order_date', ascending=True)","f80bd6c6":"nba0['customer'] = nba0['customer'].drop_duplicates()","3d13aaf1":"nba0","dba57ba4":"nba0.dropna(how='any' , inplace=True)","77314c0c":"nba0","a932f191":"nba0 = nba0.groupby(['years']).agg({'customer': 'nunique'})","42c06091":"nba = nba0.rename(columns={'customer': 'number_of_new_customer'})","381e4b6a":"nba","80cb4c5d":"#Preparing data\n#net_revenue = sales-discount_value\ndf['net_revenue'] = df['sales'] - df['discount_value']\nca_2012 = df.loc[(df['order_status']=='Order Finished')]\nca_2012 = ca_2012.loc[(df['years']==2012)]\nca_2012 = ca_2012.sort_values('order_date', ascending=True)","3f921c3c":"ca_2012.tail()","9b630329":"def get_month(x) : return dt.datetime(x.year,x.month,1)\nca_2012['InvoiceMonth'] = ca_2012['order_date'].apply(get_month)\ngrouping = ca_2012.groupby('customer')['InvoiceMonth']\nca_2012['CohortMonth'] = grouping.transform('min')\nca_2012.tail()","d9392eaf":"def get_month_int (dframe,column):\n    year = dframe[column].dt.year\n    month = dframe[column].dt.month\n    day = dframe[column].dt.day\n    return year, month , day \n\ninvoice_year,invoice_month,_ = get_month_int(ca_2012,'InvoiceMonth')\ncohort_year,cohort_month,_ = get_month_int(ca_2012,'CohortMonth')\n\nyear_diff = invoice_year - cohort_year \nmonth_diff = invoice_month - cohort_month \n\nca_2012['CohortIndex'] = year_diff * 12 + month_diff + 1","da5a2d7b":"ca_2012","e0327271":"#Count monthly active customers from each cohort\ngrouping = ca_2012.groupby(['CohortMonth', 'CohortIndex'])\ncohort_data = grouping['customer'].apply(pd.Series.nunique)\n# Return number of unique elements in the object.\ncohort_data = cohort_data.reset_index()","c31b4fcf":"cohort_data","2c0e47a2":"cohort_counts = cohort_data.pivot(index='CohortMonth',columns='CohortIndex',values='customer')\ncohort_counts","4fb2e469":"# Retention table\ncohort_size = cohort_counts.iloc[:,0]\nretention = cohort_counts.divide(cohort_size,axis=0) #axis=0 to ensure the divide along the row axis \nretention.round(3) * 100 #to show the number as percentage ","2bb51005":"#Build the heatmap\nplt.figure(figsize=(15, 8))\nplt.title('Retention rates')\nsns.heatmap(data=retention,annot = True,fmt = '.0%',vmin = 0.0,vmax = 0.4,cmap=\"RdYlGn\")\nplt.show()","f9d1f424":"#Count monthly active customers from each cohort\ngrouping2 = ca_2012.groupby(['CohortMonth', 'CohortIndex']).agg({'net_revenue':'sum','customer':'nunique'})\n# Return number of unique elements in the object.\ncohort_revenue = grouping2.reset_index()\ncohort_revenue = cohort_revenue.pivot(index='CohortMonth',columns='CohortIndex',values='net_revenue')","bd904dd8":"cohort_revenue","0eb19004":"# Retention table\ncohort_size = cohort_revenue.iloc[:,0]\nretention = cohort_revenue.divide(cohort_size,axis=0) #axis=0 to ensure the divide along the row axis \nretention.round(3) * 100 #to show the number as percentage ","6804eeaa":"#Build the heatmap\nplt.figure(figsize=(15, 8))\nplt.title('Retention rates')\nsns.heatmap(data=retention,annot = True,fmt = '.0%',vmin = 0.0,vmax = 0.7,cmap=\"RdYlGn\")\nplt.show()","f5ea035a":"cohort_cumulative = cohort_revenue.cumsum(axis=1)","af731399":"cohort_cumulative","198a81ce":"unique_customer_amount = cohort_counts[1]","7f9ae17c":"unique_customer_amount = unique_customer_amount.reset_index()","5df3a7c1":"unique_customer_amount1 =[]\nunique_customer_amount1 =unique_customer_amount[1]\nunique_customer_amount1 = list(map(int, unique_customer_amount1))\n","c54cbf6d":"unique_customer_amount1[0]","88f46501":"cohort_revenue_per_customer = cohort_cumulative\n\ncohort_revenue_per_customer = cohort_revenue_per_customer.fillna(0).astype(int)","d84d11c9":"cohort_revenue_per_customer","e2790d66":"i = 0\nwhile i <12:\n    cohort_revenue_per_customer.iloc[i, :] = cohort_revenue_per_customer.iloc[i, :].apply(lambda x: x\/unique_customer_amount1[i])\n    i+=1\n\ncohort_revenue_per_customer","7510bd8b":"cohort_revenue_per_customer = cohort_revenue_per_customer.fillna(0).astype(int)","f475b514":"cohort_revenue_per_customer","474fccad":"cohort_lifetime_net_value = cohort_revenue_per_customer * 0.3","a49d54b4":"cohort_lifetime_net_value.astype(int)","bf780898":"#### Export dataframe to csv","e6a33b09":"- order_status column looks clean.","50e492e7":"#### Promotion Effectiveness and Efficiency by Years\nUsing burn rate analysis\n\n $$ Burn Rate = \\frac{Total Discount}{Total Sales} \\times 100\\% $$\n","3b38b835":"- customer column looks clean.","05373928":"#### Check Value of Every Columns","e5c225a5":"**Cumulative Lifetime Revenue per Customer 2012**","4397a9ff":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/Customer%20acquisition.png?raw=true\">","5d928f72":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/overall%20performance.jpg?raw=truen\">","5482db7a":"#### Creating list for dataframe column","9cee0722":"## Overall Analysis\nObjective: to get overall picture of the company by looking at the key metrics.\n<br>\n<br>\nExample of key metrics:\n<br>\n- Sales revenue \n- Net Profit Margin\n- Cost of Customer Acquisition (CAC)\n    <br>\n\nOverall analysis is starting point to analyze deeper.","791a798e":"#### Suggestion\nCreate a new **marketing strategy or ads** which can significantly **bring** in **new unique customers**.","57292749":"**Customer Retention Cohort 2012**","f1668f51":"#### Project Flow Chart","ebe72f52":"- The data that should be spread to each column, turns out to be stored in only one column, which is on the first column","7d5c84bd":"- In the Scissor, Rulers & Trimmers sub category, the growth of orders is only increasing 3, but the sales growth is up to 191%.\n- There are 5 subcategories with negative sales growth values.","046693a4":"#### Overal Performance by Product Sub Category","6f75fe55":"#### New Buyer Acquisition\nCustomer acquisition is refers to bringing in new customers.","5a79d681":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/burn%20rate.png?raw=true\" >","90a17fcb":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/Flow%20Chart.png?raw=true\">","8bf61f96":"#### 5 rows from below before data cleaning","b16c8d00":"#### Dataset Details\n\nDQLab Store is a retail company that sells three product categories, such as furniture, office supplies, and technology for offices.\n\n\nEach product category has several sub-categories.\nIn this case study, 5499 data were provided for the years 2009-2012.","61379ba4":"Customers who have made the first transaction do not make transactions again in the next month. This is because the products sold by the DQLab store have a consumption duration of more than 1 month.","947121b7":"- discount_value column looks clean.","acc53945":"#### 5 rows from below after cleaning","cf541c91":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/cumulative%20lifetime%20revenue.png?raw=truen\">","d1a4c259":"There is no missing value on a dataset.","65e94bc3":"- the naming for product_sub_category value can be improved. \n1. Changing 'and' to '&'\n2. Giving space on the connected word; \n\n    example: 'Pens&Art' change to 'Pens & Art'","c3efdee7":"#### Drop row with index-0 and index-5500","fd58dec2":"The burn rate value is only in the range of 5%, which means it is still good but there has been **no significant sales growth for the past 4 years** which means that **the promotion is not effective**.","4553aa60":"- discount column looks clean.","29a85ba7":"- product_category column looks clean.","581888db":"- In **2009-2011** there was **no growth in sales** performance and **in 2012** **the growth** seems to **appear** and same thing happened to the orders. *(Insight)*\n- In 2011-2012, the **Scissor, Rulers & Trimmers** sub category, the growth of **orders** is only **increasing 3**, but the **sales growth** is up to **191%**. *(Insight)*\nThere are **5 subcategories** with **negative sales growth** values. *(Insight)*\n- **No significant sales growth for 2009-2012** which means that the **promotion is not effective** even though the burn rate every year is around 5%**. *(Problem)***\n- New unique customers are decreasing every year, the decrease is up to 70%. **(Root Problem)**\n- Customers who have made the **first time order**, **most likely** will **not** make **order again** **in the next month**. This is because the products sold by the DQLab store have a consumption duration of more than 1 month. *(Insight)*\n- On average, **each customer generates** a **profit** of **Rp 3,044,982 within 1 year** (assuming gross margin is 30%).This value is useful to determine customer acquisition costs (CAC). ***(Useful Insight)***","47f047d1":"- 3 sub-category in above have good growth sales while,\n- 5 sub-category on below have bad growth sales.","0c182c9c":"- sales column looks clean.","4a851418":"#### 5 rows from above after cleaning","2ff3b7b0":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/data%20cleaning1.jpg?raw=true\" >","069613df":"#### Check Missing Value","256884f0":"## Conclusion & Suggestion","08a48a36":"- order_date column looks clean.","9d6706b3":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/Burn%20rate%20sub.jpg?raw=true\">","54b78d30":"**Customer Lifetime Net Value 2012**","1ea05297":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/Overal%20Performance%20by%20Product%20Sub%20Category.jpg?raw=true\" width=\"500px\">","d431ce74":"**Net Revenue Cohort 2012**","7033e5af":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/Customer%20Lifetime%20Value%20Cohort%202012.png?raw=truen\">","0244239e":"## Analysis Based on Customer","e74fad0f":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/Overall%20performance.png?raw=true\">","12457aab":"- order_id column looks clean.","a9199f29":"## Data Cleaning","65a22407":"#### Creating list for dataframe row","de8ad609":"- In **2009-2011** there was **no growth in sales** performance and **in 2012** **the growth** seems to **appear** and same thing happened to the orders.","cd2052a4":"#### Check dataframe size after cleaning","418d0fb9":"On average, **each customer generates a profit of Rp 3,044,982 within 1 year** (Assuming gross margin is 30%). This value is useful to determine customer acquisition costs (CAC).","27634b20":"#### Check dataframe size after dropping the row","70ed0458":"**Objective**: To know whether the campaign that we have done so far is effective and efficient.","9d94d236":"- The data in the row with index-0 and index-5500 is not included in the required data","3ff87dc7":"#### Import Library","6beeb9d4":"Forumula Growth sales and Growth Order:\n\n $$ GrowthSales = (\\frac{sales[y]}{sales[y-1]}-1) \\times 100\\% $$\n \n  $$ GrowthOrder = (\\frac{order[y]}{order[y-1]} -1) \\times 100\\% $$","b717a9b5":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/Dataset%20details.png?raw=true\">","4254bedd":"#### 5 rows from above before data cleaning","af56410f":"#### Customer Retention\n\nCustomer retention refers to the ability of a company to retain its customers over some specified period.\n\nCohort analysis is behavioural analytics that breaks the data in a data set into related groups. In this case, we breaks the data into a group of month.","aff2e3bd":"#### Check dataframe size before cleaning","30144326":"#### Change data type of every column","f07bbc1a":"The **subcategory** with a burn rate percentage value of **more than equal 5% is labelled red.**\nThe minimum value of the burn rate is determined by the company and in this case is 5%.","15590210":"**Cumulative Lifetime Revenue 2012**","144d655c":"Link: \n\n[Clean looking version](https:\/\/aromatic-bite-52f.notion.site\/Overall-Performance-Cohort-Analysis-5dd5cd55d4c74363a6c93bfbd56bc003)","ee936e7c":"Processing the data with excel","0c5c42ed":"#### Creating Dataframe","2f5ed328":"#### Promotion Effectiveness and Efficiency by Product Sub Category","9e51b7f6":"## Introduction","3abc9ba7":"#### Import csv file","78bc0d71":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/cumulative%20lifetime%20revenue%20per%20customer.png?raw=true\">","fcf338b4":"#### Conclusion","96a84345":"## Analysis Based on Sales","1b15cd3e":"#### Check column name, and index name ","556b2c65":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/Customer%20acquisition%20graph.png?raw=true\">","ad21f7fc":"Total unique customer for 4 years only 775.\n**New unique customers** are **decreasing every year**, the **decrease** is up to **70%**.","6542cc9a":"- order_quantity column looks clean.","417c03d1":"#### Customers Transactions per Year","61c0ba65":"#### Overal Performance by Year","fe6416d2":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/Burn%20rate%20ovrall2.png?raw=true\">","c27f33b2":"Reference: \n\n- [Data Analyst Role: Apply Data Analysis Flowchart to measure Company Performance with SQL by Nelda Ampulembang Parenta](https:\/\/youtu.be\/J2BbebBcud4\/)\n\n- [Cohort Analysis & Customer Segmentation with RFM by Mahmoud El Fahl](https:\/\/www.kaggle.com\/mahmoudelfahl\/cohort-analysis-customer-segmentation-with-rfm#Let's-Make-Cohort-Analysis\/)\n\n- [Customer Retention & Cohort Analysis | How VCs Calculate Customer Retention by Eric Andrews](https:\/\/youtu.be\/OwCATJh4lNg\/)\n\n","a2272787":"On average, each customer generates a cumulative revenue for the company is around 10 million Rupiah.","5c16869a":"\n<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/Gross%20margin.png?raw=true\"  style=\"width: 800px;\"\/>","d43b5f9c":"<img src=\"https:\/\/github.com\/dhawyfarrasputra\/Project-Sales-Performance-Report-Image\/blob\/main\/Growth%20Sales%20Product%20Sub%20Category.png?raw=true\">","8d08f71c":"- product_sub_category column looks clean after cleaning process.","16606380":"Assuming gross margin is 30%"}}