{"cell_type":{"1c11ee1c":"code","dce8fc04":"code","72d441ff":"code","5057d6b2":"code","571ef840":"code","643b3f85":"code","b59cd8e7":"code","367d5e37":"code","cd1ea870":"code","6f88ab45":"code","a5b59b24":"code","2d159078":"code","d9a08285":"code","1b367af1":"code","1ca7792c":"code","0f7540f5":"code","8c5dcda1":"code","21d622cc":"code","20558d39":"code","641ec21b":"code","ca93bbda":"markdown","4adadb22":"markdown","4dd581e4":"markdown"},"source":{"1c11ee1c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pylab as plt\nfrom datetime import datetime\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import plot_confusion_matrix\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler","dce8fc04":"df = pd.read_csv('..\/input\/gold-price-prediction-dataset\/FINAL_USO.csv', parse_dates = True)\ndf.head()","72d441ff":"df.describe()","5057d6b2":"df.columns","571ef840":"label_name = list(df.columns)\nclose_value = []\nfor i in range(len(label_name)):\n    if str.lower(label_name[i].replace(\" \", \"\")[-6:]) == 'jclose' or str.lower(label_name[i].replace(\"_\", \"\")[-6:]) == 'jclose':\n        close_value.append(label_name[i])\n        \ndel close_value[2]\nclose_value","643b3f85":"close_data = pd.DataFrame(df, columns = close_value)\ncorrelation_mat = close_data.corr()\n\nsns.heatmap(correlation_mat, annot = True)\n\nplt.show()","b59cd8e7":"fig = go.Figure([go.Scatter(x=df['Date'], y=df['Adj Close'])])\nfig.show()","367d5e37":"ma_day = [10, 20, 50]\nfor ma in ma_day:\n    column_name = f\"MA for {ma} days\"\n    df[column_name] = df['Adj Close'].rolling(ma).mean()","cd1ea870":"fig = px.line(df, x=\"Date\", y=['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days'],\n              title='Adj close')\nfig.show()","6f88ab45":"df['Daily Return'] = df['Adj Close'].pct_change()\nfig = px.scatter(df, x=\"Date\", y=\"Daily Return\", title=\"Daily Return\")\nfig.show()","a5b59b24":"fig = px.histogram(df, x=\"Date\", y=\"Daily Return\", histfunc=\"avg\", title=\"Daily Return\")\nfig.show()","2d159078":"fig = px.line(df, x=\"Date\", y=['Volume'],\n              title='Volume')\nfig.show()","d9a08285":"volumn_max = max(df['Volume'])\nindex = df[df['Volume']==volumn_max].index.values[0]\nprint(\"Max Volume's day is:\", df['Date'][index],\"\\n\"\"volume:\", df['Volume'][index],'\\nthe day of close price:', df['Adj Close'][index])\nprint('Average Adj close:', df[\"Adj Close\"].mean())","1b367af1":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten, LSTM, TimeDistributed, RepeatVector\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.optimizers import Adam\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint","1ca7792c":"Adj_data = df.loc[:,close_value]\n\nadj_close = Adj_data[['Adj Close']]\n\ntraining_data_len = int(np.ceil( len(Adj_data) * .90 ))\n\nsc = MinMaxScaler(feature_range = (0, 1))\nscaled_data = sc.fit_transform(Adj_data)\n\nsc1 = MinMaxScaler(feature_range = (0, 1))\nsc_data = sc1.fit_transform(adj_close)","0f7540f5":"train_data = scaled_data[0:int(training_data_len), :]\n\nx_train = []\ny_train = []\n\nfor i in range(60, len(train_data)):\n    x_train.append(train_data[i-60:i, :])\n    y_train.append(train_data[i, 0])\n    \nx_train, y_train = np.array(x_train), np.array(y_train)\n\n# Reshape the data\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 6))\n# x_train.shape","8c5dcda1":"def buildManyToOneModel(shape):\n    model = Sequential()\n    model.add(LSTM(10, input_length=shape[1], input_dim=shape[2]))\n  # output shape: (1, 1)\n    model.add(Dense(1))\n    model.compile(loss=\"mse\", optimizer=\"adam\")\n    model.summary()\n    return model","21d622cc":"model = buildManyToOneModel(x_train.shape)\ncallback = EarlyStopping(monitor=\"loss\", patience=10, verbose=1, mode=\"auto\")\nmodel.fit(x_train, y_train, epochs=1000, batch_size=128, callbacks=[callback])","20558d39":"test_data = scaled_data[training_data_len - 60: , :]\n# Create the data sets x_test and y_test\nx_test = []\ny_test = Adj_data['Adj Close'][training_data_len:].values\nfor i in range(60, len(test_data)):\n    x_test.append(test_data[i-60:i, :])\n    \nx_test = np.array(x_test)\n\n# Reshape the data\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 6))\n\n# Get the models predicted price values \npredictions = model.predict(x_test)\npredictions = sc1.inverse_transform(predictions)","641ec21b":"t = np.linspace(0, len(y_test), len(y_test))\npredictions = np.reshape(predictions,len(predictions))\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=t, y=y_test,\n                    mode='lines',\n                    name='True data'))\n\nfig.add_trace(go.Scatter(x=t, y=predictions,\n                    mode='lines',\n                    name='predict'))\n\n\nfig.show()","ca93bbda":"## Read data","4adadb22":"## data visulization","4dd581e4":"## LSTM"}}