{"cell_type":{"e942b296":"code","31db050e":"code","0846dd99":"code","a9ae8ae6":"code","6b9c25a4":"code","01bb69f6":"code","03cf43dd":"code","3fc5b64c":"code","9e1cc95d":"code","9d07a5cf":"code","9d7a5092":"code","cf1ac324":"code","9c9bae28":"markdown","810ab878":"markdown","c678db39":"markdown","e8e06e12":"markdown","200cc4e4":"markdown","3302f4dd":"markdown","4a4805b3":"markdown","5a47442f":"markdown","a70e52bd":"markdown","58e9e4f0":"markdown","1d60627e":"markdown"},"source":{"e942b296":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nfrom os import listdir","31db050e":"classes = listdir('..\/input\/flowers-recognition\/flowers')\nclasses","0846dd99":"image_size = (128, 128)\nbatch_size = 32\n\n# https:\/\/keras.io\/api\/preprocessing\/image\/#image_dataset_from_directory-function\n\ntrain_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    \"..\/input\/flowers-recognition\/flowers\",\n    validation_split=0.2,\n    subset=\"training\",\n    seed=1337,\n    image_size=image_size,\n    batch_size=batch_size,\n    label_mode=\"categorical\",\n    class_names=classes\n)\n\nval_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    \"..\/input\/flowers-recognition\/flowers\",\n    validation_split=0.2,\n    subset=\"validation\",\n    seed=1337,\n    image_size=image_size,\n    batch_size=batch_size,\n    label_mode=\"categorical\",\n    class_names=classes\n)","a9ae8ae6":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 10))\nfor images, labels in train_ds.take(1):\n    for i in range(9):\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(classes[np.argmax(labels[i])])\n        plt.axis(\"off\")","6b9c25a4":"data_augmentation = keras.Sequential(\n    [\n        layers.experimental.preprocessing.RandomFlip(\"horizontal\"),\n        layers.experimental.preprocessing.RandomRotation(0.5),\n    ]\n)","01bb69f6":"plt.figure(figsize=(10, 10))\nfor images, _ in train_ds.take(1):\n    for i in range(9):\n        augmented_images = data_augmentation(images)\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(augmented_images[0].numpy().astype(\"uint8\"))\n        plt.axis(\"off\")","03cf43dd":"def make_model(input_shape, num_classes):\n    \n    inputs = keras.Input(shape=input_shape)\n\n    # Image augmentation block\n    x = data_augmentation(inputs)\n\n    x = layers.experimental.preprocessing.Rescaling(1.0 \/ 255)(x)\n    \n    x = layers.Flatten()(x)\n    x = layers.Dense(512, activation=\"tanh\")(x)\n    x = layers.Dense(256, activation=\"relu\")(x)\n    x = layers.Dense(128, activation=\"sigmoid\")(x)\n    x = layers.Dense(64, activation=\"relu\")(x)\n    x = layers.Dense(32, activation=\"softmax\")(x)\n    x = layers.Dense(16, activation=\"relu\")(x)\n    \n    if num_classes == 2:\n        activation = \"sigmoid\"\n        units = 1\n    else:\n        activation = \"softmax\"\n        units = num_classes\n\n    outputs = layers.Dense(units, activation=activation)(x)\n    \n    return keras.Model(inputs, outputs)\n\n\nmodel = make_model(input_shape=image_size + (3,), num_classes=len(classes))\nmodel.summary()","3fc5b64c":"epochs = 20\n\n# https:\/\/keras.io\/api\/callbacks\/\n\ncallbacks = [\n    keras.callbacks.ModelCheckpoint(\"save_at_{epoch}.h5\"),\n]\n\nmodel.compile(\n    optimizer=keras.optimizers.Adam(1e-3),\n    loss=\"binary_crossentropy\",\n    metrics=[\"accuracy\"],\n)\n\nmodel.fit(\n    train_ds, epochs=epochs, callbacks=callbacks, validation_data=val_ds,\n)","9e1cc95d":"model_json = model.to_json()\n\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\n    \nmodel.save_weights(\"model.h5\")\nprint(\"Saved model to disk\")","9d07a5cf":"from tensorflow.keras.models import model_from_json\n\n# load json and create model\njson_file = open('model.json', 'r')\nloaded_model_json = json_file.read()\njson_file.close()\nloaded_model = model_from_json(loaded_model_json)\n\n# load weights into new model\nloaded_model.load_weights(\"model.h5\")\nprint(\"Loaded model from disk\")","9d7a5092":"plt.figure(figsize=(10, 10))\nfor images, labels in train_ds.take(1):\n    for i in range(9):\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        \n        pred = loaded_model.predict(np.array([images[i].numpy().astype(\"uint8\")]))\n        \n        plt.title(classes[np.argmax(pred)])\n        plt.axis(\"off\")","cf1ac324":"plt.figure(figsize=(20, 10))\nfor images, targets in train_ds.take(1):\n    for i in range(15):\n        ax = plt.subplot(3, 5, i + 1)\n        \n        img_array = images[i].numpy().astype(\"uint8\")\n        prediction = loaded_model.predict(np.array([img_array]))\n        prediction_name = labels[np.argmax(prediction)]\n        real_name = labels[np.argmax(targets[i])]\n        print(real_name)\n        \n        plt.imshow(img_array)\n        if prediction_name == real_name:\n            plt.title(f'real: {real_name}\\npred:{prediction_name}', fontdict={'color': 'g'})\n        else:\n            plt.title(f'real: {real_name}\\npred:{prediction_name}', fontdict={'color': 'r'})\n        \n        plt.axis(\"off\")\n","9c9bae28":"# Save the model","810ab878":"# Data Augmentation","c678db39":"# Imports","e8e06e12":"![](oel.jpg)","200cc4e4":"# Load Data from directory","3302f4dd":"### Si lo hago de esta manera me da error, no s\u00e9 como solucionarlo","4a4805b3":"# Visualize the data","5a47442f":"# Train the model","a70e52bd":"# Redes profundas de aprendizaje con Keras","58e9e4f0":"# Load the model","1d60627e":"# Model"}}