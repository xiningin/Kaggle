{"cell_type":{"e1262526":"code","08af8ea5":"code","3a99b7a6":"code","60d4b7da":"code","f274e8a5":"code","0f52d03a":"code","fd9bc19d":"code","762ee59d":"code","01a90bcc":"code","097c4eab":"code","5fbbf091":"code","516abdb4":"code","8170e317":"code","e51a1926":"code","e27b1647":"code","8dcadd72":"code","84c53856":"code","e9374186":"code","5edd747c":"code","395b2240":"code","fb230df3":"markdown","fcfbba8e":"markdown","808fbe80":"markdown","984bd063":"markdown","01e788c7":"markdown","688dd61c":"markdown","db35748c":"markdown","207b7b89":"markdown"},"source":{"e1262526":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nfrom scipy.integrate import cumtrapz\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndef from_path_to_df(in_path):\n    \"\"\"Read experiment txt files.\"\"\"\n    with in_path.open('r') as f:\n        cur_df = pd.read_csv(f, sep='\\s+', header=None, skiprows=1)\n        if len(cur_df.columns)==4:\n            cur_df.columns = ['timestamp_ns', 'x', 'y', 'z']\n        else:\n            old_cols = cur_df.columns.tolist()\n            old_cols[0] = 'timestamp_ns'\n            if len(cur_df.columns)==8:\n                old_cols[1] = 'x'\n                old_cols[2] = 'y'\n                old_cols[3] = 'z'\n            cur_df.columns = old_cols\n        cur_df['timestamp_s'] = cur_df['timestamp_ns']\/1.0e9\n        return cur_df.drop('timestamp_ns', axis=1).sort_values('timestamp_s')","08af8ea5":"BASE_DIR = Path('..') \/ 'input' \/ 'data_publish_v2' \/ 'data_publish_v2'","3a99b7a6":"all_files_df = pd.DataFrame({'path': list(BASE_DIR.glob('*\/*.txt'))})\nall_files_df['exp_code'] = all_files_df['path'].map(lambda x: x.parent.stem)\nall_files_df['activity'] = all_files_df['exp_code'].map(lambda x: '_'.join(x.split('_')[1:]))\nall_files_df['person'] = all_files_df['exp_code'].map(lambda x: x.split('_')[0])\nall_files_df['data_src'] = all_files_df['path'].map(lambda x: x.stem)\nall_files_df.sample(5)","60d4b7da":"data_df = all_files_df.pivot_table(values='path', \n                         columns='data_src', \n                         index=['activity', 'person'],\n                        aggfunc='first').\\\n    reset_index().\\\n    dropna(axis=1) # remove mostly empty columns\ndata_df.head(5)","f274e8a5":"cur_exp = data_df.iloc[0]\nprint(cur_exp.iloc[0:2])","0f52d03a":"dict_df = {k: from_path_to_df(v) \n           for k, v in cur_exp.iloc[2:].items()}\nfor k, v in dict_df.items():\n    print(k, v.shape, 'Framerate:{:2.1f}'.format(1\/(np.mean(v['timestamp_s'].diff()))))","fd9bc19d":"dict_df['pose'].plot('timestamp_s')\ndict_df['pose'].sample(3)","762ee59d":"dict_df['linacce'].plot('timestamp_s')","01a90bcc":"dict_df['gravity'].plot('timestamp_s')","097c4eab":"la_df = dict_df['linacce'].copy()\npose_start = dict_df['pose'].iloc[0] # for the initial conditions\nfor c_x in 'xyz':\n    la_df['vel_{}'.format(c_x)] = cumtrapz(la_df['{}'.format(c_x)].values, \n                                           x=la_df['timestamp_s'].values, \n                                           initial=0)\n    la_df['pos_{}'.format(c_x)] = cumtrapz(la_df['vel_{}'.format(c_x)].values, \n                                           x=la_df['timestamp_s'], \n                                           initial=pose_start[c_x])","5fbbf091":"fig, m_axs = plt.subplots(3, 1, figsize=(20, 12))\nc_la_df = la_df\nc_pos_df = dict_df['pose']\nc_pos_valid = c_pos_df['timestamp_s']>=c_la_df['timestamp_s'].iloc[0]\nc_pos_valid &= c_pos_df['timestamp_s']<=c_la_df['timestamp_s'].iloc[-1]\nc_pos_df = c_pos_df[c_pos_valid]\nfor c_x, c_ax in zip('xyz', m_axs):\n    c_ax.plot(c_la_df['timestamp_s'], c_la_df['{}'.format(c_x)], '.', label='Linear Acceleration')\n    c_ax.plot(c_la_df['timestamp_s'], c_la_df['vel_{}'.format(c_x)], label='Integrated Velocity')\n    c_ax.plot(c_la_df['timestamp_s'], c_la_df['pos_{}'.format(c_x)], label='Integrated Position')\n    c_ax.plot(c_pos_df['timestamp_s'], c_pos_df[c_x], '-', label='Actual Pose')\n    c_ax.legend()\n    c_ax.set_title(c_x)\n    ","516abdb4":"fig, ax1 = plt.subplots(1, 1, figsize=(10, 10))\nax1.plot(la_df['pos_x'], la_df['pos_y'], '.-', label='Integrated Position')\nax1.plot(dict_df['pose']['x'], dict_df['pose']['y'], '+-', label='Actual Pose')\nax1.legend()\nax1.axis('equal');","8170e317":"fig = plt.figure(figsize=(10, 10), dpi=300)\nax1 = fig.add_subplot(111, projection='3d')\nax1.plot(la_df['pos_x'], la_df['pos_y'], la_df['pos_z'], '.-', label='Integrated Position')\nax1.plot(dict_df['pose']['x'], dict_df['pose']['y'], dict_df['pose']['z'], '+-', label='Actual Pose')\nax1.legend()\nax1.axis('equal');\nfig.savefig('hr_img.png')","e51a1926":"fig, m_axs = plt.subplots(3, 1, figsize=(15, 12))\nc_la_df = la_df[la_df['timestamp_s']<la_df['timestamp_s'].iloc[1000]]\nc_pos_df = dict_df['pose']\nc_pos_valid = c_pos_df['timestamp_s']>=c_la_df['timestamp_s'].iloc[0]\nc_pos_valid &= c_pos_df['timestamp_s']<=c_la_df['timestamp_s'].iloc[-1]\nc_pos_df = c_pos_df[c_pos_valid]\nfor c_x, c_ax in zip('xyz', m_axs):\n    c_ax.plot(c_la_df['timestamp_s'], c_la_df['{}'.format(c_x)], '.', label='Linear Acceleration')\n    c_ax.plot(c_la_df['timestamp_s'], c_la_df['vel_{}'.format(c_x)], label='Integrated Velocity')\n    c_ax.plot(c_la_df['timestamp_s'], c_la_df['pos_{}'.format(c_x)], label='Integrated Position')\n    c_ax.plot(c_pos_df['timestamp_s'], c_pos_df[c_x], '-', label='Actual Pose')\n    c_ax.legend()\n    c_ax.set_title(c_x)","e27b1647":"la_df = dict_df['linacce'].sort_values('timestamp_s').copy()\npose_start = dict_df['pose'].iloc[0] # for the initial conditions\nfor c_x in 'xyz':\n    vel_vec = cumtrapz(la_df['{}'.format(c_x)].values, \n                                           x=la_df['timestamp_s'].values, \n                                           initial=0)\n    for i in range(0, la_df.shape[0], 1000):\n        vel_vec[(i+1):] -= vel_vec[i]\n    la_df['vel_{}'.format(c_x)] = vel_vec\n    la_df['pos_{}'.format(c_x)] = cumtrapz(la_df['vel_{}'.format(c_x)].values, \n                                           x=la_df['timestamp_s'], \n                                           initial=pose_start[c_x])","8dcadd72":"fig, m_axs = plt.subplots(3, 1, figsize=(20, 12))\nc_la_df = la_df\nc_pos_df = dict_df['pose']\nc_pos_valid = c_pos_df['timestamp_s']>=c_la_df['timestamp_s'].iloc[0]\nc_pos_valid &= c_pos_df['timestamp_s']<=c_la_df['timestamp_s'].iloc[-1]\nc_pos_df = c_pos_df[c_pos_valid]\nfor c_x, c_ax in zip('xyz', m_axs):\n    c_ax.plot(c_la_df['timestamp_s'], \n              c_la_df['vel_{}'.format(c_x)], \n              label='Integrated Velocity')\n    c_ax.plot(c_la_df['timestamp_s'], \n              c_la_df['pos_{}'.format(c_x)], \n              label='Integrated Position')\n    c_ax.plot(c_pos_df['timestamp_s'], c_pos_df[c_x], '-', label='Actual Pose')\n    c_ax.legend()\n    c_ax.set_title(c_x)","84c53856":"fig, ax1 = plt.subplots(1, 1, figsize=(10, 10))\nax1.plot(la_df['pos_x'], la_df['pos_y'], '.-', label='Integrated Position')\nax1.plot(dict_df['pose']['x'], dict_df['pose']['y'], '+-', label='Actual Pose')\nax1.legend()\nax1.axis('equal');","e9374186":"from scipy.signal import detrend\nla_df = dict_df['linacce'].sort_values('timestamp_s').copy()\npose_start = dict_df['pose'].iloc[0] # for the initial conditions\nfor c_x in 'xyz':\n    vel_vec = cumtrapz(la_df['{}'.format(c_x)].values, \n                                           x=la_df['timestamp_s'].values, \n                                           initial=0)\n    ij_idx = range(0, la_df.shape[0], 5000)\n    for i, j in zip(ij_idx, ij_idx[1:]):\n        vel_vec[i:j] = detrend(vel_vec[i:j])\n    la_df['vel_{}'.format(c_x)] = vel_vec\n    la_df['pos_{}'.format(c_x)] = cumtrapz(la_df['vel_{}'.format(c_x)].values, \n                                           x=la_df['timestamp_s'], \n                                           initial=pose_start[c_x])","5edd747c":"fig, m_axs = plt.subplots(3, 1, figsize=(20, 12))\nc_la_df = la_df\nc_pos_df = dict_df['pose']\nc_pos_valid = c_pos_df['timestamp_s']>=c_la_df['timestamp_s'].iloc[0]\nc_pos_valid &= c_pos_df['timestamp_s']<=c_la_df['timestamp_s'].iloc[-1]\nc_pos_df = c_pos_df[c_pos_valid]\nfor c_x, c_ax in zip('xyz', m_axs):\n    c_ax.plot(c_la_df['timestamp_s'], \n              c_la_df['vel_{}'.format(c_x)], \n              label='Integrated Velocity')\n    c_ax.plot(c_la_df['timestamp_s'], \n              c_la_df['pos_{}'.format(c_x)], \n              label='Integrated Position')\n    c_ax.plot(c_pos_df['timestamp_s'], c_pos_df[c_x], '-', label='Actual Pose')\n    c_ax.legend()\n    c_ax.set_title(c_x)","395b2240":"fig, ax1 = plt.subplots(1, 1, figsize=(10, 10))\nax1.plot(la_df['pos_x'], la_df['pos_y'], '.-', label='Integrated Position')\nax1.plot(dict_df['pose']['x'], dict_df['pose']['y'], '+-', label='Actual Pose')\nax1.legend()\nax1.axis('equal');","fb230df3":"# Overview\nA simple notebook to load and display the IMU data for different experiments","fcfbba8e":"### Show curves","808fbe80":"## Detrending to correct drift","984bd063":"## Integration Errors\nAs we can see the errors accumulate quickly and we end up with a very different path","01e788c7":"# Take a single experiment\nWe can take a single experiment to process in more detail","688dd61c":"## Compare Simple Double Integration\nHere we compare simple double integration to the actual pose vector\n$$ \\vec{x} = \\int\\int \\vec{a} $$","db35748c":"## Small Time Window\nWe can look at a small time window and see how the errors start","207b7b89":"## Correcting Drift\nWe can fake drift correction by periodically setting the velocity to 0"}}