{"cell_type":{"479e303e":"code","b08212dd":"code","c37d0c5a":"code","4fe1330a":"code","d2f5d6db":"code","f3b2ded1":"code","15a46ec1":"code","855d5700":"code","a5be3036":"code","2509c1d7":"code","efad9a78":"code","1f347f36":"code","b300e490":"code","8423389f":"code","c4ccc782":"code","768411eb":"code","12edcca0":"code","0b80f1dc":"code","6c722618":"markdown","0ced4df1":"markdown","d6ecc3d8":"markdown","43cecd8f":"markdown","1fd99a12":"markdown","2b302ac3":"markdown","37ec00dd":"markdown","4c58604e":"markdown","4f82788d":"markdown","9a30b23d":"markdown","267fe831":"markdown","5846cd6e":"markdown","fc0b8962":"markdown"},"source":{"479e303e":"import os\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom kaggle_datasets import KaggleDatasets\nimport transformers\nfrom transformers import TFAutoModel, AutoTokenizer\nfrom tqdm.notebook import tqdm\nfrom tokenizers import Tokenizer, models, pre_tokenizers, decoders, processors\nimport pickle","b08212dd":"def build_model(transformer, max_len=512):\n    \"\"\"\n    https:\/\/www.kaggle.com\/xhlulu\/jigsaw-tpu-distilbert-with-huggingface-and-keras\n    \"\"\"\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    sequence_output = transformer(input_word_ids)[0]\n    cls_token = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(cls_token)\n    \n    model = Model(inputs=input_word_ids, outputs=out)\n    model.compile(Adam(lr=0.000009), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","c37d0c5a":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","4fe1330a":"AUTO = tf.data.experimental.AUTOTUNE\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nMAX_LEN = 192\nMODEL = 'jplu\/tf-xlm-roberta-large'","d2f5d6db":"# First load the real tokenizer\ntokenizer = AutoTokenizer.from_pretrained(MODEL)","f3b2ded1":"!ls \/kaggle\/input\/jigsawtpuxlmrobertacopypickledata","15a46ec1":"%%time\n\nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_x_train.pkl\"\nx_train = pickle.load(open(filename, 'rb')) # load data example\nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_x_trainOA.pkl\"\nx_trainOA = pickle.load(open(filename, 'rb')) # load data example\nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_x_trainA.pkl\"\nx_trainA = pickle.load(open(filename, 'rb')) # load data example\nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_x_valid.pkl\"\nx_valid = pickle.load(open(filename, 'rb')) # load data example\nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_x_test.pkl\"\nx_test = pickle.load(open(filename, 'rb')) # load data example\n\nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_y_train.pkl\"\ny_train = pickle.load(open(filename, 'rb')) # load data example\nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_y_trainOA.pkl\"\ny_trainOA = pickle.load(open(filename, 'rb')) # load data example\nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_y_trainA.pkl\"\ny_trainA = pickle.load(open(filename, 'rb')) # load data example\nfilename = \"\/kaggle\/input\/jigsawtpuxlmrobertacopypickledata\/jigsaw_multilingual_y_valid.pkl\"\ny_valid = pickle.load(open(filename, 'rb')) # load data example","855d5700":"train_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((x_train, y_train))\n    .repeat()\n    .shuffle(2048)\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n)\n\ntrain_datasetOA = (\n    tf.data.Dataset\n    .from_tensor_slices((x_trainOA, y_trainOA))\n    .repeat()\n    .shuffle(x_trainOA.shape[0])\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n)\n\ntrain_datasetA = (\n    tf.data.Dataset\n    .from_tensor_slices((x_trainA, y_trainA))\n    .repeat()\n    .shuffle(x_trainOA.shape[0])\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n)\n\nvalid_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((x_valid, y_valid))\n    .batch(BATCH_SIZE)\n    .cache()\n    .prefetch(AUTO)\n)\n\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(x_test)\n    .batch(BATCH_SIZE)\n)","a5be3036":"%%time\nwith strategy.scope():\n    transformer_layer = TFAutoModel.from_pretrained(MODEL)\n    model = build_model(transformer_layer, max_len=MAX_LEN)\nmodel.summary()","2509c1d7":"n_steps = x_train.shape[0] \/\/ BATCH_SIZE\n\nmodel.fit(\n    train_dataset,\n    steps_per_epoch=n_steps,\n    validation_data=valid_dataset,\n    epochs=1\n)","efad9a78":"checkpointPredictions1 = model.predict(test_dataset, verbose=1)\nprint(checkpointPredictions1[:10])","1f347f36":"n_steps = x_trainA.shape[0] \/\/ BATCH_SIZE\n\nmodel.fit(\n    train_datasetA,\n    steps_per_epoch=n_steps,\n    validation_data=valid_dataset,\n    epochs=1\n)","b300e490":"checkpointPredictions2 = model.predict(test_dataset, verbose=1)\nprint(checkpointPredictions2[:10])","8423389f":"n_steps = x_valid.shape[0] \/\/ BATCH_SIZE\n\nmodel.fit(\n    valid_dataset.repeat(),\n    steps_per_epoch=n_steps,\n    epochs=2\n)","c4ccc782":"checkpointPredictions3 = model.predict(test_dataset, verbose=1)\nprint(checkpointPredictions3[:10])","768411eb":"n_steps = x_trainOA.shape[0]  \/\/ BATCH_SIZE\n\nmodel.fit(\n    train_datasetOA,\n    steps_per_epoch=n_steps,\n    epochs=1\n)","12edcca0":"checkpointPredictions4 = model.predict(test_dataset, verbose=1)\nprint(checkpointPredictions4[:10])","0b80f1dc":"sub = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/sample_submission.csv')\nsub['toxic'] = (checkpointPredictions1*0.05)+(checkpointPredictions2*0.10)+(checkpointPredictions3*0.76)+(checkpointPredictions4*0.09)\nsub.to_csv('submission.csv', index=False)","6c722618":"# Load Data","0ced4df1":"# Submission","d6ecc3d8":"# TF Datasets","43cecd8f":"# Train","1fd99a12":"#### Train on English training data","2b302ac3":"\n# Notes:\n\n**Kaggle Sources**\n - https:\/\/www.kaggle.com\/xhlulu\/jigsaw-tpu-xlm-roberta\n     - forked this notebook\n - https:\/\/www.kaggle.com\/shonenkov\/tpu-training-super-fast-xlmroberta\n     - grabed external data from this notebook, i.e. https:\/\/www.kaggle.com\/shonenkov\/open-subtitles-toxic-pseudo-labeling\n     \n**External Sources and More Additions**\n - Used [eda_nlp](https:\/\/github.com\/jasonwei20\/eda_nlp) to create an augmented version of the unintended bias dataset, then downsampled this data to have balanced dataset.  More information can be found here (minus the downsampling):  https:\/\/www.kaggle.com\/yeayates21\/jigsaw-bias-toxicity-eda-nlp-aug16-alpha005\n - pickled encoded data for faster runtime\n - some light manual hyperparameter tuning\n - scored the test set with each \"model.fit\" run as \"checkpoint predictions\" and blended the checkpoint predictions (I didn't checkpoint the models, but that could be easily added).\n\n-----------------------------------------------------------------------\n\n#### Acknowledgements\n\n - [@alexshonenkov](https:\/\/www.kaggle.com\/shonenkov)\n - [@xhlulu](https:\/\/www.kaggle.com\/xhlulu)\n","37ec00dd":"# Configs","4c58604e":"#### Train on multilingual external data (created using SSL techniques)","4f82788d":"#### Train on augmented english data","9a30b23d":"# Tokenizer","267fe831":"# Helper Functions","5846cd6e":"# Load Model","fc0b8962":"#### Train on multilingual validation training data"}}