{"cell_type":{"e43ee68e":"code","12fdb828":"code","9ab2d237":"code","14a2bc37":"code","0d3f7dae":"code","20d87af7":"code","6b50626d":"code","e10937ff":"code","4523024b":"code","8da7f1aa":"code","dff5a59a":"code","9709ab1a":"code","060f2456":"code","025994d5":"code","8b971ae9":"code","38a840fe":"code","70e63c21":"code","db9878e3":"code","68b3791e":"code","86c84ad3":"code","7c017d6e":"code","6c5c104f":"code","859dc500":"code","2aca4350":"code","8a91fc1f":"code","4c38e8ab":"code","dbb85a3e":"code","8971ecff":"code","59ca3c23":"code","2b67c1e0":"code","2647e9d2":"code","43e5df02":"code","41db1c32":"code","bcf86650":"code","1e8272d1":"code","78a0ecd3":"code","90c699c3":"code","05d850b0":"code","a88c3a94":"code","1a2b6442":"code","025ea214":"code","d0e20626":"code","f75dea0e":"markdown","35e05d68":"markdown"},"source":{"e43ee68e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","12fdb828":"import torch\nfrom tqdm.notebook import tqdm","9ab2d237":"import io\n\ndf = pd.read_csv('\/kaggle\/input\/train.tsv', delimiter='\\t')","14a2bc37":"df.head()","0d3f7dae":"df['label'].value_counts()","20d87af7":"possible_labels = df['label'].unique()","6b50626d":"label_dict = {}\nfor index, possible_label in enumerate(possible_labels):\n    label_dict[possible_label] = index","e10937ff":"label_dict","4523024b":"df['label'] = df['label'].replace(label_dict)","8da7f1aa":"df.head()","dff5a59a":"from sklearn.model_selection import train_test_split","9709ab1a":"index = []\nfor i in range(len(df['text'])):\n    index.append(i)","060f2456":"df['index'] = index \ndf.head()","025994d5":"X_train, X_val, y_train, y_val = train_test_split(df['index'].values, \n                                                  df['label'].values, \n                                                  test_size=0.15, \n                                                  random_state=17, \n                                                  stratify=df['label'].values)","8b971ae9":"df['data_type'] = ['not_set']*df.shape[0]","38a840fe":"df.loc[X_train, 'data_type'] = 'train'\ndf.loc[X_val, 'data_type'] = 'val'","70e63c21":"df.groupby(['label', 'data_type']).count()","db9878e3":"!pip install transformers","68b3791e":"from transformers import BertTokenizer\nfrom torch.utils.data import TensorDataset","86c84ad3":"tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', \n                                          do_lower_case=True)","7c017d6e":"encoded_data_train = tokenizer.batch_encode_plus(\n    df[df.data_type=='train'].text.values, \n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=256, \n    return_tensors='pt'\n)\n\nencoded_data_val = tokenizer.batch_encode_plus(\n    df[df.data_type=='val'].text.values, \n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=256, \n    return_tensors='pt'\n)\n\n\ninput_ids_train = encoded_data_train['input_ids']\nattention_masks_train = encoded_data_train['attention_mask']\nlabels_train = torch.tensor(df[df.data_type=='train'].label.values)\n\ninput_ids_val = encoded_data_val['input_ids']\nattention_masks_val = encoded_data_val['attention_mask']\nlabels_val = torch.tensor(df[df.data_type=='val'].label.values)","6c5c104f":"dataset_train = TensorDataset(input_ids_train, attention_masks_train, labels_train)\ndataset_val = TensorDataset(input_ids_val, attention_masks_val, labels_val)","859dc500":"len(dataset_train)","2aca4350":"len(dataset_val)","8a91fc1f":"from transformers import BertForSequenceClassification","4c38e8ab":"model = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\",\n                                                      num_labels=len(label_dict),\n                                                      output_attentions=False,\n                                                      output_hidden_states=False)","dbb85a3e":"from torch.utils.data import DataLoader, RandomSampler, SequentialSampler","8971ecff":"batch_size = 4\n\ndataloader_train = DataLoader(dataset_train, \n                              sampler=RandomSampler(dataset_train), \n                              batch_size=batch_size)\n\ndataloader_validation = DataLoader(dataset_val, \n                                   sampler=SequentialSampler(dataset_val), \n                                   batch_size=batch_size)","59ca3c23":"from transformers import AdamW, get_linear_schedule_with_warmup","2b67c1e0":"optimizer = AdamW(model.parameters(),\n                  lr=1e-5, \n                  eps=1e-8)","2647e9d2":"epochs = 3\n\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps=0,\n                                            num_training_steps=len(dataloader_train)*epochs)","43e5df02":"from sklearn.metrics import f1_score","41db1c32":"def f1_score_func(preds, labels):\n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return f1_score(labels_flat, preds_flat, average='weighted')","bcf86650":"def accuracy_per_class(preds, labels):\n    label_dict_inverse = {v: k for k, v in label_dict.items()}\n    \n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n\n    for label in np.unique(labels_flat):\n        y_preds = preds_flat[labels_flat==label]\n        y_true = labels_flat[labels_flat==label]\n        print(f'Class: {label_dict_inverse[label]}')\n        print(f'Accuracy: {len(y_preds[y_preds==label])}\/{len(y_true)}\\n')","1e8272d1":"import random\n\nseed_val = 17\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)","78a0ecd3":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel.to(device)\n\nprint(device)","90c699c3":"def evaluate(dataloader_val):\n\n    model.eval()\n    \n    loss_val_total = 0\n    predictions, true_vals = [], []\n    \n    for batch in dataloader_val:\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }\n\n        with torch.no_grad():        \n            outputs = model(**inputs)\n            \n        loss = outputs[0]\n        logits = outputs[1]\n        loss_val_total += loss.item()\n\n        logits = logits.detach().cpu().numpy()\n        label_ids = inputs['labels'].cpu().numpy()\n        predictions.append(logits)\n        true_vals.append(label_ids)\n    \n    loss_val_avg = loss_val_total\/len(dataloader_val) \n    \n    predictions = np.concatenate(predictions, axis=0)\n    true_vals = np.concatenate(true_vals, axis=0)\n            \n    return loss_val_avg, predictions, true_vals","05d850b0":"for epoch in tqdm(range(1, epochs+1)):\n    \n    model.train()\n    \n    loss_train_total = 0\n\n    progress_bar = tqdm(dataloader_train, desc='Epoch {:1d}'.format(epoch), leave=False, disable=False)\n    for batch in progress_bar:\n\n        model.zero_grad()\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }       \n\n        outputs = model(**inputs)\n        \n        loss = outputs[0]\n        loss_train_total += loss.item()\n        loss.backward()\n\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        optimizer.step()\n        scheduler.step()\n        \n        progress_bar.set_postfix({'training_loss': '{:.3f}'.format(loss.item()\/len(batch))})\n         \n        \n    torch.save(model.state_dict(), f'BERT_epoch_{epoch}.model')\n        \n    tqdm.write(f'\\nEpoch {epoch}')\n    \n    loss_train_avg = loss_train_total\/len(dataloader_train)            \n    tqdm.write(f'Training loss: {loss_train_avg}')\n    \n    val_loss, predictions, true_vals = evaluate(dataloader_validation)\n    val_f1 = f1_score_func(predictions, true_vals)\n    tqdm.write(f'Validation loss: {val_loss}')\n    tqdm.write(f'F1 Score (Weighted): {val_f1}')","a88c3a94":"model = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\",\n                                                      num_labels=len(label_dict),\n                                                      output_attentions=False,\n                                                      output_hidden_states=False)\n\nmodel.to(device)\npass","1a2b6442":"model.load_state_dict(torch.load('BERT_epoch_2.model', map_location=torch.device('cpu')))","025ea214":"_, predictions, true_vals = evaluate(dataloader_validation)","d0e20626":"accuracy_per_class(predictions, true_vals)","f75dea0e":"edited train file with changed delimiter and text cleaned","35e05d68":"load the best epoch model during training"}}