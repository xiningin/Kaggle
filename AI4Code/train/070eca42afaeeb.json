{"cell_type":{"90a5a9fa":"code","e9158e89":"code","e7d2765c":"code","1ce0da84":"code","dc026219":"code","3573f0b0":"code","1d1931dd":"code","b86a7bc3":"code","b01dd69f":"code","99755c84":"code","5b4232c6":"code","817b7f23":"code","d678cd74":"code","3ec405d5":"code","6e8380e0":"code","eaeef453":"code","8e2d0aff":"code","ad3dced7":"code","6d9513d0":"code","74ab8b86":"code","dc7ed81f":"code","03a867e1":"code","7499be9a":"code","41c5f8b2":"code","21ae9640":"code","992a4612":"code","6ce4ed7d":"code","27ea0984":"code","acfd55a1":"code","7ecc0282":"code","bcb75f95":"code","4bdb804a":"code","8a66c9c1":"code","8fbed2a2":"code","abeeafee":"code","a6695b25":"code","3cd36034":"code","1f19eb5f":"code","e955e56c":"code","0018f824":"code","d8639b26":"code","56c97391":"code","62cd1d51":"code","1bab0078":"code","f7b53a37":"code","9aa4f254":"code","a2dc66f4":"code","13b7f034":"code","4053f449":"code","d7c69a9d":"code","9ea708c1":"code","daac5e6f":"code","ad32f6d9":"code","4c232703":"code","6c1e3d64":"code","39ed0117":"code","a6b43b38":"code","40a96539":"code","877ae37d":"code","fe7e6c2b":"code","c65f2ad4":"code","b556e805":"code","d3b354a1":"code","c44f2915":"code","20be3709":"code","3c3f4065":"code","3dff44f7":"code","6a1ba85b":"code","dfc3e1f8":"code","16ca92e8":"code","e35516e9":"code","86ef3422":"code","99c52ba4":"code","dc7bb0df":"code","0550208a":"code","19431766":"code","041b9d19":"code","04e69ff7":"code","63ee1cf3":"code","0434f663":"code","83c7d946":"code","85ebdb44":"code","e5fe7578":"code","31bab1f4":"code","3b7de17a":"code","2fb139b2":"code","1678f99b":"code","2050b84d":"code","cc4e701a":"code","a16644ff":"markdown","f54d1d79":"markdown","5aeb1ea3":"markdown","df8a9d51":"markdown","fc33a9b3":"markdown","375858e4":"markdown","04e98544":"markdown","e81fbfaf":"markdown","c38dc913":"markdown","3bc3f65b":"markdown","dff9ed90":"markdown","15ae3c28":"markdown","a7b4688c":"markdown","d0cb7173":"markdown","c4aa077e":"markdown","71bc249f":"markdown","2d5d1b95":"markdown","25353c05":"markdown","9b2babd7":"markdown","ca5bfb3d":"markdown","5b3c34a5":"markdown","9e267cb8":"markdown","98d367fb":"markdown"},"source":{"90a5a9fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings; warnings.simplefilter('ignore')\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e9158e89":"\nmd = pd. read_csv(\"\/kaggle\/input\/the-movies-dataset\/movies_metadata.csv\")\nmd.head()","e7d2765c":"md['genres'].head()","1ce0da84":"from ast import literal_eval\nmd['genres'] = md['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])","dc026219":"md['genres'].head()","3573f0b0":"vote_counts = md[md['vote_count'].notnull()]['vote_count'].astype('int')\nvote_averages = md[md['vote_average'].notnull()]['vote_average'].astype('int')\nC = vote_averages.mean()\nC","1d1931dd":"\nm = vote_counts.quantile(0.95)\nm","b86a7bc3":"qualified = md[(md['vote_count'] >= m) & (md['vote_count'].notnull()) & (md['vote_average'].notnull())][['title',  'vote_count', 'vote_average', 'popularity', 'genres']]\nqualified['vote_count'] = qualified['vote_count'].astype('int')\nqualified['vote_average'] = qualified['vote_average'].astype('int')\nqualified.shape","b01dd69f":"def weighted_rating(x):\n    v = x['vote_count']\n    R = x['vote_average']\n    return (v\/(v+m) * R) + (m\/(m+v) * C)","99755c84":"qualified['wr'] = qualified.apply(weighted_rating, axis=1)","5b4232c6":"qualified = qualified.sort_values('wr', ascending=False).head(50)","817b7f23":"qualified","d678cd74":"s = md.apply(lambda x: pd.Series(x['genres']),axis=1).stack().reset_index(level=1, drop=True)\ns.name = 'genre'\ngen_md = md.drop('genres', axis=1).join(s)","3ec405d5":"gen_md.head()","6e8380e0":"def build_chart(genre, percentile=0.85):\n    df = gen_md[gen_md['genre'] == genre]\n    vote_counts = df[df['vote_count'].notnull()]['vote_count'].astype('int')\n    vote_averages = df[df['vote_average'].notnull()]['vote_average'].astype('int')\n    C = vote_averages.mean()\n    m = vote_counts.quantile(percentile)\n    \n    qualified = df[(df['vote_count'] >= m) & (df['vote_count'].notnull()) & (df['vote_average'].notnull())][['title', 'vote_count', 'vote_average', 'popularity']]\n    qualified['vote_count'] = qualified['vote_count'].astype('int')\n    qualified['vote_average'] = qualified['vote_average'].astype('int')\n    \n    qualified['wr'] = qualified.apply(lambda x: (x['vote_count']\/(x['vote_count']+m) * x['vote_average']) + (m\/(m+x['vote_count']) * C), axis=1)\n    qualified = qualified.sort_values('wr', ascending=False).head(250)\n    \n    return qualified","eaeef453":"build_chart('Romance').head(15)","8e2d0aff":"links_small = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/links_small.csv')\n","ad3dced7":"links_small.head()","6d9513d0":"links_small = links_small[links_small['tmdbId'].notnull()]['tmdbId'].astype('int')","74ab8b86":"links_small.head()","dc7ed81f":"md = md.drop([19730, 29503, 35587])","03a867e1":"#Check EDA Notebook for how and why I got these indices.\nmd['id'] = md['id'].astype('int')","7499be9a":"smd = md[md['id'].isin(links_small)]\nsmd.shape","41c5f8b2":"smd['tagline'] = smd['tagline'].fillna('')","21ae9640":"smd['description'] = smd['overview'] + smd['tagline']\nsmd['description'] = smd['description'].fillna('')","992a4612":"from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel, cosine_similarity","6ce4ed7d":"tf = TfidfVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')\ntfidf_matrix = tf.fit_transform(smd['description'])","27ea0984":"cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","acfd55a1":"smd = smd.reset_index()\ntitles = smd['title']","7ecc0282":"smd.head()","bcb75f95":"indices = pd.Series(smd.index, index=smd['title'])","4bdb804a":"indices.head()","8a66c9c1":"def get_recommendations(title):\n    idx = indices[title]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:31]\n    movie_indices = [i[0] for i in sim_scores]\n    return titles.iloc[movie_indices]","8fbed2a2":"get_recommendations('The Godfather').head(10)","abeeafee":"get_recommendations('The Dark Knight').head(10)","a6695b25":"credits = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/credits.csv')\nkeywords = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/keywords.csv')","3cd36034":"credits.head()","1f19eb5f":"credits['cast'][0]","e955e56c":"keywords.head()","0018f824":"keywords['id'] = keywords['id'].astype('int')\ncredits['id'] = credits['id'].astype('int')\nmd['id'] = md['id'].astype('int')","d8639b26":"md.shape","56c97391":"md = md.merge(credits, on='id')\nmd = md.merge(keywords, on='id')","62cd1d51":"smd = md[md['id'].isin(links_small)]\nsmd.shape","1bab0078":"smd['cast'] = smd['cast'].apply(literal_eval)\nsmd['crew'] = smd['crew'].apply(literal_eval)\nsmd['keywords'] = smd['keywords'].apply(literal_eval)\nsmd['cast_size'] = smd['cast'].apply(lambda x: len(x))\nsmd['crew_size'] = smd['crew'].apply(lambda x: len(x))","f7b53a37":"def get_director(x):\n    for i in x:\n        if i['job'] == 'Director':\n            return i['name']\n    return np.nan","9aa4f254":"smd['director'] = smd['crew'].apply(get_director)","a2dc66f4":"smd['cast'] = smd['cast'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])","13b7f034":"smd['cast'] = smd['cast'].apply(lambda x: x[:3] if len(x) >=3 else x)","4053f449":"smd['cast'].head()","d7c69a9d":"smd['keywords'][0]","9ea708c1":"smd['keywords'] = smd['keywords'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])","daac5e6f":"smd['keywords'][0]","ad32f6d9":"smd['cast'] = smd['cast'].apply(lambda x: [str.lower(i.replace(\" \", \"\")) for i in x])","4c232703":"smd['director'] = smd['director'].astype('str').apply(lambda x: str.lower(x.replace(\" \", \"\")))","6c1e3d64":"smd['director'][0]","39ed0117":"smd['director'] = smd['director'].apply(lambda x: [x,x, x])","a6b43b38":"smd['director'][0]","40a96539":"s = smd.apply(lambda x: pd.Series(x['keywords']),axis=1).stack().reset_index(level=1, drop=True)\ns.name = 'keyword'","877ae37d":"pd.DataFrame(s.head(10))","fe7e6c2b":"s = s.value_counts()\ns[:5]","c65f2ad4":"s = s[s > 1]","b556e805":"from nltk.stem.snowball import SnowballStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.corpus import wordnet\nfrom surprise import Reader, Dataset, SVD\n\n","d3b354a1":"stemmer = SnowballStemmer('english')\nstemmer.stem('dogs')","c44f2915":"def filter_keywords(x):\n    words = []\n    for i in x:\n        if i in s:\n            words.append(i)\n    return words","20be3709":"smd['keywords'] = smd['keywords'].apply(filter_keywords)\nsmd['keywords'] = smd['keywords'].apply(lambda x: [stemmer.stem(i) for i in x])\nsmd['keywords'] = smd['keywords'].apply(lambda x: [str.lower(i.replace(\" \", \"\")) for i in x])","3c3f4065":"smd['soup'] = smd['keywords'] + smd['cast'] + smd['director'] + smd['genres']\nsmd['soup'] = smd['soup'].apply(lambda x: ' '.join(x))","3dff44f7":"smd['soup'][0]","6a1ba85b":"count = CountVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')\ncount_matrix = count.fit_transform(smd['soup'])","dfc3e1f8":"cosine_sim = cosine_similarity(count_matrix, count_matrix)","16ca92e8":"smd = smd.reset_index()\ntitles = smd['title']\nindices = pd.Series(smd.index, index=smd['title'])","e35516e9":"get_recommendations('The Dark Knight').head(10)","86ef3422":"get_recommendations('Mean Girls').head(10)","99c52ba4":"reader = Reader()\n","dc7bb0df":"ratings = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/ratings_small.csv')\nratings.head()","0550208a":"data = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)\n\n","19431766":"from surprise.model_selection import cross_validate\n\n\n\n# Use the famous SVD algorithm\nsvd = SVD()\n\n# Run 5-fold cross-validation and then print results\ncross_validate(svd, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)","041b9d19":"trainset = data.build_full_trainset()\nsvd.fit(trainset)\n","04e69ff7":"ratings[ratings['userId'] == 1]","63ee1cf3":"svd.predict(1, 302, 3)","0434f663":"def convert_int(x):\n    try:\n        return int(x)\n    except:\n        return np.nan","83c7d946":"id_map = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/links_small.csv')[['movieId', 'tmdbId']]","85ebdb44":"id_map.head()","e5fe7578":"id_map['tmdbId'] = id_map['tmdbId'].apply(convert_int)","31bab1f4":"id_map.columns = ['movieId', 'id']\nid_map = id_map.merge(smd[['title', 'id']], on='id').set_index('title')  ","3b7de17a":"id_map.head()","2fb139b2":"indices_map = id_map.set_index('id')","1678f99b":"indices_map.head()","2050b84d":"def hybrid(userId, title):\n    idx = indices[title]\n    tmdbId = id_map.loc[title]['id']\n    #print(idx)\n    movie_id = id_map.loc[title]['movieId']\n    \n    sim_scores = list(enumerate(cosine_sim[int(idx)]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:26]\n    movie_indices = [i[0] for i in sim_scores]\n    \n    movies = smd.iloc[movie_indices][['title', 'vote_count', 'vote_average', 'id']]\n    movies['est'] = movies['id'].apply(lambda x: svd.predict(userId, indices_map.loc[x]['movieId']).est)\n    movies = movies.sort_values('est', ascending=False)\n    return movies.head(10)","cc4e701a":"hybrid(1, 'Avatar')","a16644ff":"We see that three Christopher Nolan Films, Inception, The Dark Knight and Interstellar occur at the very top of our chart. The chart also indicates a strong bias of TMDB Users towards particular genres and directors.\n\nLet us now construct our function that builds charts for particular genres. For this, we will use relax our default conditions to the 85th percentile instead of 95.","f54d1d79":"We're all set. Let us now try and get the top recommendations for a few movies and see how good the recommendations are.","5aeb1ea3":"Therefore, to qualify to be considered for the chart, a movie has to have at least 434 votes on TMDB. We also see that the average rating for a movie on TMDB is 5.244 on a scale of 10. 2274 Movies qualify to be on our chart.","df8a9d51":"My approach to building the recommender is going to be extremely hacky. What I plan on doing is creating a metadata dump for every movie which consists of genres, director, main actors and keywords. I then use a Count Vectorizer to create our count matrix as we did in the Description Recommender. The remaining steps are similar to what we did earlier: we calculate the cosine similarities and return movies that are most similar.\n\nThese are steps I follow in the preparation of my genres and credits data:\n\n1. Strip Spaces and Convert to Lowercase from all our features. This way, our engine will not confuse between Johnny Depp and Johnny Galecki.\n2. Mention Director 3 times to give it more weight relative to the entire cast.","fc33a9b3":"I am much more satisfied with the results I get this time around. The recommendations seem to have recognized other Christopher Nolan movies (due to the high weightage given to director) and put them as top recommendations. I enjoyed watching The Dark Knight as well as some of the other ones in the list including Batman Begins, The Prestige and The Dark Knight Rises.\n\nWe can of course experiment on this engine by trying out different weights for our features (directors, actors, genres), limiting the number of keywords that can be used in the soup, weighing genres based on their frequency, only showing movies with the same languages, etc.","375858e4":"We will reuse the get_recommendations function that we had written earlier. Since our cosine similarity scores have changed, we expect it to give us different (and probably better) results. Let us check for The Dark Knight again and see what recommendations I get this time around.","04e98544":"For movie with ID 302, we get an estimated prediction of 2.686. One startling feature of this recommender system is that it doesn't care what the movie is (or what it contains). It works purely on the basis of an assigned movie ID and tries to predict ratings based on how the other users have predicted the movie.\n\n# Hybrid Recommender\n![](https:\/\/www.toonpool.com\/user\/250\/files\/hybrid_20095.jpg)\n\n\nIn this section, I will try to build a simple hybrid recommender that brings together techniques we have implemented in the content based and collaborative filter based engines. This is how it will work:\n\n* Input: User ID and the Title of a Movie\n* Output: Similar movies sorted on the basis of expected ratings by that particular user.","e81fbfaf":"### **Movie Description Based Recommender** \n\nLet us first try to build a recommender using movie descriptions and taglines. We do not have a quantitative metric to judge our machine's performance so this will have to be done qualitatively.","c38dc913":"We get a mean Root Mean Sqaure Error of 0.8963 which is more than good enough for our case. Let us now train on our dataset and arrive at predictions.","3bc3f65b":"# Movies Recommender System\n![](http:\/\/labs.criteo.com\/wp-content\/uploads\/2017\/08\/CustomersWhoBought3.jpg)","dff9ed90":"We have 9099 movies avaiable in our small movies metadata dataset which is 5 times smaller than our original dataset of 45000 movies.","15ae3c28":"Keywords occur in frequencies ranging from 1 to 610. We do not have any use for keywords that occur only once. Therefore, these can be safely removed. Finally, we will convert every word to its stem so that words such as Dogs and Dog are considered the same.","a7b4688c":"**Cosine Similarity**\nI will be using the Cosine Similarity to calculate a numeric quantity that denotes the similarity between two movies. Mathematically, it is defined as follows:\n\ncosine(x,y)=x.y\u22ba \/ (||x||.||y|| )\n\nSince we have used the TF-IDF Vectorizer, calculating the Dot Product will directly give us the Cosine Similarity Score. Therefore, we will use sklearn's linear_kernel instead of cosine_similarities since it is much faster.","d0cb7173":"The top romance movie according to our metrics is Bollywood's **Dilwale Dulhania Le Jayenge**.","c4aa077e":"We see that for The Dark Knight, our system is able to identify it as a Batman film and subsequently recommend other Batman films as its top recommendations. But unfortunately, that is all this system can do at the moment. This is not of much use to most people as it doesn't take into considerations very important features such as cast, crew, director and genre, which determine the rating and the popularity of a movie.\n\n\n\n\n\n# Metadata Based Recommender\nTo build our standard metadata based content recommender, we will need to merge our current dataset with the crew and the keyword datasets. Let us prepare this data as our first step.","71bc249f":"**Top Movies**","2d5d1b95":"We now have our cast, crew, genres and credits, all in one dataframe. Let us wrangle this a little more using the following intuitions:\n\n1. Crew: From the crew, we will only pick the director as our feature since the others don't contribute that much to the feel of the movie.\n2. Cast: Choosing Cast is a little more tricky. Lesser known actors and minor roles do not really affect people's opinion of a movie. \n\n\nTherefore, we must only select the major characters and their respective actors. Arbitrarily we will choose the top 3 actors that appear in the credits list.","25353c05":"**Top Movies**","9b2babd7":"I use the TMDB Ratings to come up with our Top Movies Chart. I will use IMDB's weighted rating formula to construct my chart. Mathematically, it is represented as follows:\n\nWeighted Rating (WR) =  (vv+m.R)+(mv+m.C) \nwhere,\n\n* v is the number of votes for the movie\n* m is the minimum votes required to be listed in the chart\n* R is the average rating of the movie\n* C is the mean vote across the whole report\nThe next step is to determine an appropriate value for m, the minimum votes required to be listed in the chart. We will use 95th percentile as our cutoff. In other words, for a movie to feature in the charts, it must have more votes than at least 95% of the movies in the list.\n\nI will build our overall Top 250 Chart and will define a function to build charts for a particular genre. Let's begin!","ca5bfb3d":"# Content Based Recommender\nThe recommender we built in the previous section suffers some severe limitations. For one, it gives the same recommendation to everyone, regardless of the user's personal taste. If a person who loves romantic movies (and hates action) were to look at our Top 15 Chart, s\/he wouldn't probably like most of the movies. If s\/he were to go one step further and look at our charts by genre, s\/he wouldn't still be getting the best recommendations.\n\nFor instance, consider a person who loves Dilwale Dulhania Le Jayenge, My Name is Khan and Kabhi Khushi Kabhi Gham. One inference we can obtain is that the person loves the actor Shahrukh Khan and the director Karan Johar. Even if s\/he were to access the romance chart, s\/he wouldn't find these as the top recommendations.\n\nTo personalise our recommendations more, I am going to build an engine that computes similarity between movies based on certain metrics and suggests movies that are most similar to a particular movie that a user liked. Since we will be using movie metadata (or content) to build this engine, this also known as Content Based Filtering.\n\nI will build two Content Based Recommenders based on:\n\n* Movie Overviews and Taglines\n* Movie Cast, Crew, Keywords and Genre\n\nAlso, as mentioned in the introduction, I will be using a subset of all the movies available to us due to limiting computing power available to me.\n","5b3c34a5":"# Collaborative Filtering\nOur content based engine suffers from some severe limitations. It is only capable of suggesting movies which are close to a certain movie. That is, it is not capable of capturing tastes and providing recommendations across genres.\n\nAlso, the engine that we built is not really personal in that it doesn't capture the personal tastes and biases of a user. Anyone querying our engine for recommendations based on a movie will receive the same recommendations for that movie, regardless of who s\/he is.\n\nTherefore, in this section, we will use a technique called Collaborative Filtering to make recommendations to Movie Watchers. Collaborative Filtering is based on the idea that users similar to a me can be used to predict how much I will like a particular product or service those users have used\/experienced but I have not.\n\nI will not be implementing Collaborative Filtering from scratch. Instead, I will use the Surprise library that used extremely powerful algorithms like Singular Value Decomposition (SVD) to minimise RMSE (Root Mean Square Error) and give great recommendations.","9e267cb8":"We see that for our hybrid recommender, we get different recommendations for different users although the movie is the same. Hence, our recommendations are more personalized and tailored towards particular users.","98d367fb":"# Simple Recommender\nThe Simple Recommender offers generalized recommnendations to every user based on movie popularity and (sometimes) genre. The basic idea behind this recommender is that movies that are more popular and more critically acclaimed will have a higher probability of being liked by the average audience. This model does not give personalized recommendations based on the user.\n\nThe implementation of this model is extremely trivial. All we have to do is sort our movies based on ratings and popularity and display the top movies of our list. As an added step, we can pass in a genre argument to get the top movies of a particular genre."}}