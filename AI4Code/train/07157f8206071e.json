{"cell_type":{"f0780a7b":"code","3b94a2ce":"code","2e502390":"code","5862c3ee":"code","7f426060":"code","23e41bf7":"code","c7f2b8d8":"code","3bb3a616":"code","09708598":"code","9e7ac876":"code","2d821ce5":"code","83741482":"code","419f71e5":"code","28d6ee80":"code","4058f29d":"code","fbbcc6b7":"code","aa4996c6":"code","b330da60":"code","a18f6927":"code","d9a9ccf7":"code","04ee57a1":"code","c562e44f":"code","a5f21661":"code","401cfd80":"code","4356e088":"code","266840e8":"code","e4094800":"code","bacb0bcc":"code","ed0664d4":"code","b926751e":"code","644e3a2a":"code","ff8822b9":"code","1e173d19":"code","92c494b9":"code","58495c94":"code","578eff87":"code","0fe6b214":"code","68dcd5b9":"code","ea9a7820":"code","ddac467d":"code","e430cef9":"code","be01dbbc":"code","37896498":"code","1c05d86d":"code","64b00a25":"code","990dc0ae":"code","1a0c3ab8":"code","aacf47f0":"code","79008a38":"code","8c5621f9":"code","9bba7d92":"code","e6aafafe":"code","c11966ff":"code","dac76d9c":"code","168be0c1":"code","0190255b":"code","b793a515":"code","50a5e15d":"code","7f5887ad":"code","081ecba5":"code","db9a29ab":"code","b8443de3":"code","c8c42a3d":"code","8d861fff":"code","182d9db9":"code","edf6f665":"code","20cccc48":"code","26c862d6":"code","0fa1cfcc":"code","806b0b63":"code","5d351ff9":"code","8076bd08":"code","86da076d":"code","63bda5a1":"code","ee289e37":"markdown","62a6a33b":"markdown","41d21ed1":"markdown","2669ee53":"markdown","9fe1af1e":"markdown","24dde6e8":"markdown","ba7beb7e":"markdown","ca3c84ff":"markdown","f1b066be":"markdown","936b8795":"markdown","ff189076":"markdown","1051b2c0":"markdown","f2b0bbd0":"markdown","2eb1d85c":"markdown","c3f3bc63":"markdown","47082588":"markdown","b3505c31":"markdown","7a077bb7":"markdown","1fcc5c1e":"markdown","bc21ec2b":"markdown","0f4a056c":"markdown","4cd9c23b":"markdown","9d615d95":"markdown","7466e93b":"markdown","1e471b0d":"markdown","ab325fac":"markdown","5cd91e09":"markdown","03e9dfde":"markdown","c89d9812":"markdown","86638893":"markdown","a294e416":"markdown","0119bd80":"markdown","49dd2b54":"markdown","4be39080":"markdown","35b4b549":"markdown","d3e6c9d8":"markdown","8cc71171":"markdown","de4c307c":"markdown","0a003765":"markdown","287a5007":"markdown","1b4f0a5f":"markdown","0427fcb5":"markdown","0a12c5c5":"markdown","d7371dd5":"markdown","9e4ef27d":"markdown","fbf6b694":"markdown","b029a2cd":"markdown"},"source":{"f0780a7b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom matplotlib import rcParams\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# figure size in inches\nrcParams['figure.figsize'] = 8,6\nrcParams['axes.titlesize'] = 20\nrcParams['axes.labelsize'] = 16\nrcParams['xtick.labelsize'] = 16\nrcParams['ytick.labelsize'] = 16\nrcParams['legend.fontsize'] = 12\n\npalette = sns.color_palette(\"Blues_d\")\ndefault_color = palette[2]\n","3b94a2ce":"df = pd.read_csv('\/kaggle\/input\/steam-store-games\/steam.csv')\nprint(f'Number of games in dataset: {len(df)}')","2e502390":"df.head()","5862c3ee":"df = df.assign(**{'overall_reviews':df.positive_ratings + df.negative_ratings})\ndf = df.assign(**{'positive_rate':df.positive_ratings \/ df.overall_reviews})\n\ndf = df.assign(**{'has_achievments':df.achievements > 0})\ndf = df.assign(**{'free':df.price == 0})\n\ndf['release_date'] = pd.to_datetime(df['release_date'])","7f426060":"english_dict = dict(df.english.value_counts())\nlabels = 'English', 'Non-english'\nsizes = [english_dict[1], english_dict[0]]\ncolors = ['gold', 'lightskyblue']\nexplode = (0, 0.2)  # explode 1st slice\n\n# Plot\nwith sns.color_palette(\"colorblind\"):\n    plt.pie(sizes, explode=explode, labels=labels, # colors=colors,\n    autopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.axis('equal')\nplt.show()","23e41bf7":"df.required_age.value_counts()","c7f2b8d8":"age_dict = dict(df.required_age.value_counts())\nlabels = 'Without rating', 'Have an age rating'\nsizes = [age_dict[0], age_dict[18] + age_dict[16] + age_dict[12] + age_dict[7] + age_dict[3]]\nexplode = (0, 0.15)\n\n# Plot\nwith sns.color_palette(\"colorblind\"):\n    plt.pie(sizes, explode=explode, labels=labels,# colors=colors,\n    autopct='%1.1f%%', shadow=True, startangle=140)\n\n# plt.title(\"\")\nplt.axis('equal')\nplt.show()","3bb3a616":"age_dict = dict(df.required_age.value_counts())\nlabels = '18+', '16+', '12+', '7+', '3+'\nsizes = [age_dict[18], age_dict[16], age_dict[12], age_dict[7], age_dict[3]]\ncolors = ['gold', 'lightskyblue']\nexplode = (0.1, 0, 0.1, 0.05, 0.2)  # explode 1st slice\n\n# Plot\nwith sns.color_palette(\"colorblind\"):\n    plt.pie(sizes, explode=explode, labels=labels,# colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.title('Ratings piechart')\nplt.axis('equal')\nplt.show()","09708598":"df.has_achievments.value_counts()","9e7ac876":"achievment_dict = dict(df.has_achievments.value_counts())\nlabels = 'Have achievements', 'No achievements'\nsizes = [achievment_dict[1], achievment_dict[0]]\ncolors = ['gold', 'lightskyblue']\nexplode = (0.2, 0)  # explode 1st slice\n\n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.axis('equal')\nplt.show()","2d821ce5":"mask = df.owners.isin(['10000000-20000000', '20000000-50000000', '50000000-100000000', '100000000-200000000'])\ndf.loc[mask, 'owners'] = '10mil and more'","83741482":"df.loc[df.owners == '5000000-10000000', 'owners'] = '5mil-10mil'\ndf.loc[df.owners == '2000000-5000000', 'owners'] = '2mil-5mil'\ndf.loc[df.owners == '1000000-2000000', 'owners'] = '1mil-2mil'\ndf.loc[df.owners == '500000-1000000', 'owners'] = '500k-1mil'\ndf.loc[df.owners == '200000-500000', 'owners'] = '200k-500k'\ndf.loc[df.owners == '100000-200000', 'owners'] = '100k-200k'\ndf.loc[df.owners == '50000-100000', 'owners'] = '50k-100k'\ndf.loc[df.owners == '20000-50000', 'owners'] = '20k-50k'\ndf.loc[df.owners == '0-20000', 'owners'] = '20k or less'","419f71e5":"plt.figure(figsize=(8,8))\n\ng = sns.countplot(data=df, y='owners', order=df.owners.value_counts().index, color=default_color)\ng.set_xscale('log')","28d6ee80":"yearly = df.groupby(df.release_date.dt.year.rename('release_year'))\\\n    .agg('count').appid.rename('count')\n\nsep_year = 2006\n\nplt.figure(figsize=(8,6))\n\nyearly_part = yearly[yearly.index < sep_year]\nsns.barplot(y=yearly_part, x=yearly_part.index, color=default_color)\nplt.title(f'Total games released in 1997-{sep_year-1} years')\nplt.xlabel('Year')\nplt.ylabel('Total games')","4058f29d":"plt.figure(figsize=(8,6))\n\nyearly_part = yearly[yearly.index >= sep_year]\nsns.barplot(y=yearly_part, x=yearly_part.index, color=default_color)\nplt.title(f'Total games released in {sep_year}-2019 years')\nplt.xlabel('Year')\nplt.ylabel('Total games')","fbbcc6b7":"monthly = df.groupby(df.release_date.dt.month.rename('release_month'))\\\n    .agg('count').appid.rename('count')\nmonthly\n\nmonths = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n\nplt.figure(figsize=(8,6))\n\ng = sns.barplot(x=monthly.index, y=monthly, color=default_color)\ng.set_xticklabels(months)\nplt.xticks(rotation=45)\nplt.xlabel('Release month')\nplt.ylabel('Release count')","aa4996c6":"platform_set = set()\nfor i in df.platforms.str.split(';'):\n    platform_set.update(i)\nplatform_set","b330da60":"genres_set = set()\nfor i in df.genres.str.split(';'):\n    genres_set.update(i)\ngenres_set","a18f6927":"categories_set = set()\nfor i in df.categories.str.split(';'):\n    categories_set.update(i)\ncategories_set","d9a9ccf7":"platform_sets = df.platforms.str.split(';').apply(set)\nd = dict()\nd['windows'] = platform_sets.apply(lambda row: 'windows' in row)\nd['linux'] = platform_sets.apply(lambda row: 'linux' in row)\nd['mac'] = platform_sets.apply(lambda row: 'mac' in row)\ndf = df.assign(**d)","04ee57a1":"d = dict()\ngenre_sets = df.genres.str.split(';').apply(set)\nfor genre in genres_set:\n    d[genre] = genre_sets.apply(lambda row: genre in row)\ndf = df.assign(**d)","c562e44f":"d = dict()\ncategory_set = df.categories.str.split(';').apply(set)\nfor category in categories_set:\n    d[category] = category_set.apply(lambda row: category in row)\ndf = df.assign(**d)","a5f21661":"genres_count = df[genres_set].sum()\ngenres_count = genres_count.sort_values(ascending=False)\n\nplt.figure(figsize=(10,8))\nsns.set_style(\"whitegrid\")\ng = sns.barplot(y=genres_count.index, x=genres_count\/len(df), color=default_color)\n\nvals = g.get_xticks()\ng.set_xticklabels(['{:,.0%}'.format(x) for x in vals])\ng.set_title(\"Percentage of genres\")","401cfd80":"category_count = df[df.columns & categories_set].sum()\ncategory_count = category_count.sort_values(ascending=False)\n\nplt.figure(figsize=(10,8))\ng = sns.barplot(y=category_count.index, x=category_count\/len(df), color=default_color)\n\nvals = g.get_xticks()\ng.set_xticklabels(['{:,.0%}'.format(x) for x in vals])\n\ng.set_title(\"Percentage of categories\")","4356e088":"platforms_count = df[df.columns & platform_set].sum()\nplatforms_count = platforms_count.sort_values(ascending=False)\nplatforms_count \/ len(df)","266840e8":"plt.figure(figsize=(8,8))\n\nwith sns.color_palette(\"colorblind\"):\n    g = sns.barplot(y=platforms_count.index, x=platforms_count \/ len(df))\n\nvals = g.get_xticks()\ng.set_xticklabels(['{:,.0%}'.format(x) for x in vals])\n\n# plt.xlabel('Percents of games that support platform')\nplt.ylabel('Platform')","e4094800":"df.platforms.value_counts()","bacb0bcc":"good_columns = ['name', 'release_date', 'developer', 'categories', 'genres',\n       'average_playtime', 'owners', 'price',\n       'overall_reviews', 'positive_rate']","ed0664d4":"df[df.platforms=='mac;linux'][good_columns]","b926751e":"df[df.platforms=='linux'][good_columns]","644e3a2a":"df[df.platforms=='mac'][good_columns]","ff8822b9":"plt.figure(figsize=(8,11))\ntop=30\nplt.title(f'Top {top} developers with most games')\n\nsns.countplot(y=\"developer\", data=df,\n             order=df.developer.value_counts().iloc[:top].index,\n             color=default_color)","1e173d19":"agg_developers = df.groupby('developer')\\\n        .agg({'overall_reviews': ['min', 'max', 'median'], 'name':'count', 'positive_rate': 'mean', 'price':'median'})","92c494b9":"agg_developers\\\n    [agg_developers.index.isin(df.developer.value_counts().iloc[:30].index)]\\\n    .sort_values(('name', 'count'), ascending=False)","58495c94":"plt.figure(figsize=(10,8))\n\ng = sns.distplot(agg_developers[('price', 'median')].value_counts(), kde=False,bins=500)\ng.set_yscale('log')\nplt.xlim((0,100))\nplt.xlabel('Median price of developer')","578eff87":"g = sns.scatterplot(x=agg_developers[('price', 'median')], y=agg_developers[('name', 'count')])\nplt.title('Games count - medium price per developer')\nplt.xlabel('Medium price')\nplt.ylabel('Games count')\nplt.xlim((0,100))","0fe6b214":"plt.figure(figsize=(8,11))\ntop=30\nplt.title(f'Top {top} publishers with most games')\n\nsns.countplot(y=\"publisher\", data=df,\n             order=df.publisher.value_counts().iloc[:top].index,\n             color=default_color)","68dcd5b9":"agg_publishers = df.groupby('publisher')\\\n        .agg({'overall_reviews': ['min', 'max', 'median'], 'name':'count', 'positive_rate': 'mean', 'price':'median'})\nagg_publishers\\\n    [agg_publishers.index.isin(df.publisher.value_counts().iloc[:50].index)]\\\n    .sort_values(('name', 'count'), ascending=False)","ea9a7820":"plt.figure(figsize=(10,8))\n\ng = sns.distplot(agg_publishers[('price', 'median')].value_counts(), kde=False,bins=500)\ng.set_yscale('log')\nplt.xlim((0,100))\nplt.xlabel('Median price of publisher')","ddac467d":"g = sns.scatterplot(x=agg_publishers[('price', 'median')], y=agg_publishers[('name', 'count')])\nplt.title('Games count - medium price per publisher')\nplt.xlabel('Medium price')\nplt.ylabel('Games count')\nplt.xlim((0,100))","e430cef9":"plt.figure(figsize=(10,8))\n\nsns.distplot(df[df.overall_reviews > 100].positive_rate, kde=False);\nplt.xlabel('Positive rate')\nplt.title('Distribution of positive rate of user reviews for games with over 100 reviews')","be01dbbc":"df[df.overall_reviews > 500].sort_values('positive_rate', ascending=False)[good_columns].head(5)","37896498":"df[df.overall_reviews > 100000].sort_values('positive_rate', ascending=False)[good_columns].head(5)","1c05d86d":"df[df.overall_reviews > 500].sort_values('positive_rate', ascending=True)[good_columns].head(5)","64b00a25":"df[df.overall_reviews > 100000].sort_values('positive_rate', ascending=True)[good_columns].head(5)","990dc0ae":"plt.figure(figsize=(12,8))\ng = sns.distplot(df.overall_reviews, kde=False)\ng.set_yscale('log')\nplt.ylabel(\"Games count\")\nplt.xlabel('Reviews count')\n# plt.title('Distribution of positive rate of user reviews for games with over 100 reviews')","1a0c3ab8":"free_dict = dict(df.free.value_counts())\nlabels = 'Free', 'Paid'\nsizes = [free_dict[True], free_dict[False]]\nexplode = (0.2, 0)\n\n# Plot\nwith sns.color_palette('colorblind'):\n    plt.pie(sizes, explode=explode, labels=labels,# colors=colors,\n    autopct='%1.1f%%', shadow=True, startangle=140)\n\n# plt.title(\"\")\nplt.axis('equal')\nplt.title('Piechart of free\/paid games among all games')\nplt.show()","aacf47f0":"multiplayer_tags = ['Massively Multiplayer', 'MMO']\nprint(f\"MMO games: {df[multiplayer_tags].any(axis=1).sum()}\")","79008a38":"free_dict = dict(df[df[multiplayer_tags].any(axis=1) == True].free.value_counts())\nlabels = 'Free', 'Paid'\nsizes = [free_dict[True], free_dict[False]]\nexplode = (0.2, 0)\n\n# Plot\nwith sns.color_palette('colorblind'):\n    plt.pie(sizes, explode=explode, labels=labels,# \u042dcolors=colors,\n    autopct='%1.1f%%', shadow=True, startangle=140)\n\n# plt.title(\"\")\nplt.axis('equal')\nplt.title('Piechart of free\/paid games among MMO')\nplt.show()","8c5621f9":"plt.figure(figsize=(10,8))\n\ng = sns.distplot(df[df.price <= 100].price, kde=False)\ng.set_yscale('log')\nplt.xlabel('Price')\nplt.ylabel('Count')","9bba7d92":"plt.figure(figsize=(10,8))\n\ng = sns.distplot(df.average_playtime, kde=False, rug=False)\ng.set_yscale('log')\n\nplt.ylabel(\"Count\")\nplt.xlabel(\"Average playtime\")\n# plt.xlim(0, 50000)","e6aafafe":"not_played_dict = dict((df.average_playtime == 0).value_counts())\nlabels = 'Non-zero playtime', 'Nobody played'\nsizes = [not_played_dict[False], not_played_dict[True]]\nexplode = (0.2, 0)\n\n# Plot\nwith sns.color_palette('colorblind'):\n    plt.pie(sizes, explode=explode, labels=labels,# \u042dcolors=colors,\n    autopct='%1.1f%%', shadow=True, startangle=140)\n\n# plt.title(\"\")\nplt.axis('equal')\nplt.show()","c11966ff":"linux_part = df.groupby(df.release_date.dt.year).linux.mean()\nmac_part = df.groupby(df.release_date.dt.year).mac.mean()","dac76d9c":"plt.figure(figsize=(12,8))\n\ng = sns.barplot(x=yearly.index, y=yearly, color=palette[5], label='Windows')\ng3 = sns.barplot(x=yearly.index, y=yearly * mac_part, color=palette[3], label='Mac')\ng2 = sns.barplot(x=yearly.index, y=yearly * linux_part, color=palette[1], alpha=0.9, label='Linux')\ng.set_yscale('log')\nplt.legend()\nplt.xticks(rotation=45)\nplt.xlabel('Release Year')\nplt.ylabel(\"Count\")\nplt.title('Platform support over the years')","168be0c1":"plt.figure(figsize=(10,8))\n\ng = sns.barplot(x=yearly.index, y=mac_part, color=palette[3], label='Mac')\n\nplt.xticks(rotation=45)\nplt.xlabel('Release Year')\nplt.ylabel(\"Count\")\nplt.title('Mac supported games rate')","0190255b":"plt.figure(figsize=(10,8))\n\ng = sns.barplot(x=yearly.index, y=mac_part, color=palette[1], label='Linux')\n\nplt.xticks(rotation=45)\nplt.xlabel('Release Year')\nplt.ylabel(\"Count\")\nplt.title('Linux supported games rate')","b793a515":"trunc_year = 2005\ntruncated_df = df[df.release_date.dt.year>trunc_year]\n\ndef over_the_years(df, column_name, palette=palette, rate_lim=None):\n\n    fig = plt.figure(figsize=(16, 8))\n    \n    yearly = df.groupby(df.release_date.dt.year.rename('release_year'))\\\n        .agg('count').appid.rename('count')\n    p = df.groupby(df.release_date.dt.year)[column_name].mean()\n    \n    plt.subplot(121)\n    g = sns.barplot(x=yearly.index, y=yearly, color=palette[5],label=\"Overall\")\n    g2 = sns.barplot(x=yearly.index, y=yearly * p, color=palette[2], label=f\"{column_name} games\")\n    plt.legend()\n    plt.xticks(rotation=45)\n    plt.title(f'{column_name} over the years')\n    plt.xlabel('Release year')\n    \n    plt.subplot(122)\n    g3 = sns.barplot(x=p.index, y=p, color=palette[2])\n    plt.xticks(rotation=45)\n    plt.xlabel('Release year')\n    plt.ylabel(f'{column_name} rate')\n    if rate_lim:\n        g3.set_ylim(rate_lim)\n    vals = g3.get_yticks()\n    g3.set_yticklabels(['{:,.0%}'.format(x) for x in vals])\n    \nover_the_years(truncated_df, 'Steam Trading Cards')","50a5e15d":"over_the_years(truncated_df, 'Early Access')","7f5887ad":"over_the_years(truncated_df, 'free')","081ecba5":"over_the_years(truncated_df, 'Indie')","db9a29ab":"over_the_years(truncated_df, 'RPG')","b8443de3":"over_the_years(truncated_df, 'Single-player', rate_lim=(0.9,1.0))","c8c42a3d":"over_the_years(truncated_df, 'Strategy')","8d861fff":"over_the_years(truncated_df, 'Free to Play')","182d9db9":"appid_len = df.appid.apply(lambda i: len(str(i)))\nappid_len.value_counts()","edf6f665":"df[(df.developer == 'Valve') | (df.publisher == 'Valve')].appid.apply(lambda i: len(str(i))).value_counts()","20cccc48":"valve_games = df[(df.developer == 'Valve') | (df.publisher == 'Valve')]\nvalve_games = valve_games.assign(**{'appid_len': appid_len})\nvalve_games[valve_games.appid_len == 6]","26c862d6":"df[(df.developer != 'Valve') & (df.publisher != 'Valve')].appid.apply(lambda i: len(str(i))).value_counts()","0fa1cfcc":"df.assign(**{'appid_len': appid_len})\\\n    .groupby(df.release_date.dt.year.rename('release_year'))\\\n    .agg({'appid_len': 'median'})","806b0b63":"plt.figure(figsize=(8,6))\nsns.scatterplot(x=df.sort_values('appid').index, y=df.sort_values('appid').appid, linewidth=0)\n\nplt.xlabel('Dataset index')","5d351ff9":"df.assign(**{'appid_len': appid_len})[df.release_date.dt.year == 1997]","8076bd08":"plt.figure(figsize=(10,8))\ng = sns.scatterplot(x=\"price\", y=\"positive_rate\", data=df[(df.price <= 100) & (df.overall_reviews > 100)])\n\nvals = g.get_yticks()\n_ = g.set_yticklabels(['{:,.0%}'.format(x) for x in vals])","86da076d":"plt.figure(figsize=(10,8))\ng = sns.scatterplot(x=\"release_date\", y=\"price\", data=df[(df.price <= 100) & (df.overall_reviews > 100)])","63bda5a1":"plt.figure(figsize=(8,8))\ng = sns.scatterplot(x=\"overall_reviews\", y=\"positive_rate\", data=df)\ng.set_xscale('log')\n\nvals = g.get_yticks()\n_ = g.set_yticklabels(['{:,.0%}'.format(x) for x in vals])","ee289e37":"First three of them are japanese games. The third games even from Touhou Project series, as I understand. Interesting","62a6a33b":"# Create additional features","41d21ed1":"## Owners","2669ee53":"# Developers","9fe1af1e":"For some reason, there is noticable dip in releases in June.","24dde6e8":"Rename \"Owners\" values to be more readable","ba7beb7e":"In mid of 2012 Steam Greenlight was introduced. After this number of releases per year started to grow exponentialy.","ca3c84ff":"There are many developers that make a lot of really cheap games","f1b066be":"My theory that much of shovelware from recent years supports just Windows","936b8795":"## Age rating","ff189076":"## Genres","1051b2c0":"# Publishers","f2b0bbd0":"# Release date\n## Release year","2eb1d85c":"### Top \"Worst\" games with reviews > 500","c3f3bc63":"# Platforms","47082588":"## English","b3505c31":"## Various categories and genres","7a077bb7":"Its heavily skewed towards 1.0 rate","1fcc5c1e":"At first Steam were selling only Valve games and games of its partners but then...","bc21ec2b":"Most of these developers looks... suspicious.","0f4a056c":"# Genres, categories and platforms","4cd9c23b":"Valve appids:","9d615d95":"There is some unused appid in range from 100.000 to 200.000 - there are reserved for something special. Half life 3 confirmed?","7466e93b":"### Top \"Best\" games with reviews > 500","1e471b0d":"# Playtime","ab325fac":"# Appid length","5cd91e09":"For non-Valve games:","03e9dfde":"## Categories","c89d9812":"## Release months","86638893":"Median appid throughout years:","a294e416":"### Top \"Worst\" games with reviews > 100k","0119bd80":"# Price","49dd2b54":"I can not actually belieave that Uriel's Chasm have 188 average playtime","4be39080":"Most of these developers have very low median price and overall reviews.","35b4b549":"Valve games that have 6 digit appid","d3e6c9d8":"### Top \"Best\" games with reviews > 100k","8cc71171":"Well, most of the games on Steam have average playtime less then an hour.","de4c307c":"There is many games without ratings. I guess that most games don't get age restrictions because age certification needed for games that sold also in retail","0a003765":"And median price and reviews number are much higher","287a5007":"Unlike developers, most publishers here are really famous","1b4f0a5f":"There is only 5 games that does not support Windows. Its interesting to check them","0427fcb5":"## Achievments","0a12c5c5":"# Feature dynamics\n\n## platform support","d7371dd5":"# Simple piecharts","9e4ef27d":"> ## Prepare binary features","fbf6b694":"# Some scatter plots","b029a2cd":"# Positive rate and overall reviews"}}