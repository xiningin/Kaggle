{"cell_type":{"0d12fe42":"code","cf9679a5":"code","485e3280":"code","f9f3d17d":"code","74833f43":"code","dc593469":"code","7c6849a9":"code","bcdddd3e":"code","4803d360":"code","4dad77ba":"code","90a94f8c":"code","1d2d7806":"code","8390f901":"code","986706f0":"code","c3932ec8":"code","c65ea3ec":"code","50f63207":"code","d840f374":"code","ede5ac74":"code","c61c99d5":"code","96105428":"code","f5d60b04":"code","7bbfa214":"code","50feb797":"code","bc1cd02f":"code","33eca823":"code","a1318381":"code","885c6f6c":"code","7002750f":"code","9a74fabe":"code","7d5acc9c":"code","e79f61d4":"code","381c372c":"code","c3c57166":"code","8220150a":"code","6003c7ba":"code","1430fcb8":"code","45de433b":"markdown","5174abc7":"markdown","41b65042":"markdown","44fed147":"markdown","0588f027":"markdown","d4fe8c16":"markdown","c5e0db8e":"markdown","15496b65":"markdown","7daf628f":"markdown"},"source":{"0d12fe42":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","cf9679a5":"train = pd.read_csv(\"..\/input\/widsdatathon2020\/training_v2.csv\")\ntest = pd.read_csv(\"..\/input\/widsdatathon2020\/unlabeled.csv\")","485e3280":"train.shape, test.shape","f9f3d17d":"train.head()","74833f43":"test.head()","dc593469":"train.describe()","7c6849a9":"test.describe()","bcdddd3e":"train.isnull().sum()\/len(train)*100","4803d360":"f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain['hospital_death'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('hospital_death')\nax[0].set_ylabel('')\nsns.countplot('hospital_death',data=train,ax=ax[1])\nax[1].set_title('hospital_death')\nplt.show()","4dad77ba":"train.drop(\"readmission_status\",inplace=True,axis=1)\ntest.drop(\"readmission_status\",inplace=True,axis=1)","90a94f8c":"test.drop(\"hospital_death\",inplace=True,axis=1)\ny_train = train[['encounter_id', 'patient_id', 'hospital_id',\"hospital_death\"]].copy()\ntrain.drop(\"hospital_death\",inplace=True,axis=1)","1d2d7806":"non_categorical = train.loc[:,train.dtypes!=\"object\"].columns","8390f901":"categorical = [c for c in train[non_categorical].columns if (train[c].nunique()<10)]\nnon_categorical = [c for c in train[non_categorical].columns if (train[c].nunique()>=10)]","986706f0":"print(train[non_categorical].isnull().sum()\/len(train))\na = train[non_categorical].isnull().sum()\/len(train)>0.40 ## editable\nmissing_m40 = train[non_categorical].loc[:,a].columns\n\na = train[non_categorical].isnull().sum()\/len(train)<=0.40 ## editable\nmissing_l40 = train[non_categorical].loc[:,a].columns\ndel a","c3932ec8":"a = train.isnull().sum()\/len(train)!= 0 ## editable\nmissing = train.loc[:,a].columns\ndel a\nfor i in missing:\n    train[str(i)+\"_Na\"]=pd.get_dummies(train[i].isnull(),prefix=i).iloc[:,0]\n    test[str(i)+\"_Na\"]=pd.get_dummies(test[i].isnull(),prefix=i).iloc[:,0]\n\nfor i in missing_l40:\n    for j in train.hospital_id.unique():\n        train[i][train.hospital_id==j]=train[i][train.hospital_id==j].fillna(train[i][train.hospital_id==j].median())\n    for k in test.hospital_id.unique():\n        test[i][test.hospital_id==k]=test[i][test.hospital_id==k].fillna(test[i][test.hospital_id==k].median())","c65ea3ec":"train[\"apache_4a_hospital_death_prob\"]=train[\"apache_4a_hospital_death_prob\"].replace({-1:np.nan})\ntest[\"apache_4a_hospital_death_prob\"]=test[\"apache_4a_hospital_death_prob\"].replace({-1:np.nan})\n\ntrain[\"apache_4a_icu_death_prob\"]=train[\"apache_4a_icu_death_prob\"].replace({-1:np.nan})\ntest[\"apache_4a_icu_death_prob\"]=test[\"apache_4a_icu_death_prob\"].replace({-1:np.nan})","50f63207":"a = train[non_categorical].isnull().sum()\/len(train)<=0.40 ## editable\nmissing_l40 = train[non_categorical].loc[:,a].columns\nfor i in missing_l40:\n    train[i] = train[i].fillna(train[i].median())\n    \na = test[non_categorical].isnull().sum()\/len(test)<=0.40 ## editable\nmissing_l40 = test[non_categorical].loc[:,a].columns\nfor i in missing_l40:\n    test[i] = test[i].fillna(train[i].median())\ndel a, missing_l40, missing_m40","d840f374":"categorical=np.concatenate([train.loc[:,train.dtypes==\"object\"].columns.tolist(),categorical])","ede5ac74":"train[categorical].isnull().sum()\/len(train)","c61c99d5":"test[categorical].isnull().sum()\/len(test)","96105428":"train[categorical].nunique()","f5d60b04":"## imputador gender\ntrain[\"gender\"][train.height>167]=train[\"gender\"][train.height>167].fillna(\"M\")\ntrain[\"gender\"][train.height<=167]=train[\"gender\"][train.height<=167].fillna(\"F\")","7bbfa214":"for i in categorical:\n    train[i] = train[i].fillna(train[i].value_counts().index[0])\n    test[i] = test[i].fillna(train[i].value_counts().index[0])","50feb797":"categorical = train.loc[:,train.dtypes==\"object\"].columns.tolist()","bc1cd02f":"train[categorical].nunique()","33eca823":"train[\"hospital_admit_source\"]=train[\"hospital_admit_source\"].replace({'Other ICU':\"ICU\",'ICU to SDU':\"SDU\",\n                                       'Step-Down Unit (SDU)':\"SDU\",\n                                      'Acute Care\/Floor':\"Floor\",\n                                      'Other Hospital':\"Other\"})\ntest[\"hospital_admit_source\"]=test[\"hospital_admit_source\"].replace({'Other ICU':\"ICU\",'ICU to SDU':\"SDU\",\n                                       'Step-Down Unit (SDU)':\"SDU\",\n                                      'Acute Care\/Floor':\"Floor\",\n                                      'Other Hospital':\"Other\"})\ntrain[\"apache_2_bodysystem\"] = train[\"apache_2_bodysystem\"].replace({'Undefined Diagnoses':\"UD\",\n                                                                    'Undefined diagnoses':\"UD\"})\ntest[\"apache_2_bodysystem\"] = test[\"apache_2_bodysystem\"].replace({'Undefined Diagnoses':\"UD\",\n                                                                    'Undefined diagnoses':\"UD\"})","a1318381":"train = train.join(pd.get_dummies(train[categorical]).drop(\"gender_F\",axis=1))\ntest = test.join(pd.get_dummies(test[categorical]).drop(\"gender_F\",axis=1))\ntrain.drop(categorical,axis=1,inplace=True)\ntest.drop(categorical,axis=1,inplace=True)","885c6f6c":"non = ['encounter_id', 'patient_id', 'hospital_id','icu_id']","7002750f":"correlated_features = set()\ntrain1 = train.drop(non,axis=1) \ncorrelation_matrix = train1.corr()\ndel train1","9a74fabe":"for i in range(len(correlation_matrix.columns)):\n     for j in range(i):\n            if abs(correlation_matrix.iloc[i, j]) ==  1:\n                colname = correlation_matrix.columns[i]\n                correlated_features.add(colname)\ncorrelated_features=list(correlated_features)","7d5acc9c":"train.drop(correlated_features,axis=1,inplace=True)\ntest.drop(correlated_features,axis=1,inplace=True)","e79f61d4":"train.shape, test.shape","381c372c":"train.drop(\"hospital_admit_source_Observation\",axis=1,inplace=True)","c3c57166":"train = train.set_index(\"encounter_id\")\ntest = test.set_index(\"encounter_id\")\ny_train = y_train.set_index(\"encounter_id\")","8220150a":"test = test.fillna(0)","6003c7ba":"from lightgbm import LGBMClassifier\nfrom sklearn.model_selection import StratifiedKFold, GroupKFold\ndrop_cols = ['patient_id', 'hospital_id','icu_id']\n#drop_cols = np.concatenate([drop_cols,perdidos])\ngf = GroupKFold(n_splits=4)\ngroups = np.array(train.hospital_id)\ntest_probs = []\ntrain_probs = []\n\nfor i,(a,b) in enumerate(gf.split(train,y_train.loc[train.index, \"hospital_death\"],groups)) :\n    Xt = train.iloc[a,:]\n    yt = y_train.loc[Xt.index, \"hospital_death\"]\n    Xt = Xt.drop(drop_cols, axis=1)\n    Xt = Xt.fillna(0)\n    \n    Xv = train.iloc[b,:]\n    yv = y_train.loc[Xv.index, \"hospital_death\"]\n    Xv = Xv.drop(drop_cols, axis=1)\n    Xv = Xv.fillna(0)\n    print(\"*+*+*+*+*entrenando fold: {} \".format(i+1))\n    \n    learner = LGBMClassifier(n_estimators=10,learning_rate=0.03,num_iterations=3400,lambda_l2=7 ,lambda_l1 =7\n                                 ,num_leaves =7,max_depth=5,min_data_in_leaf =500,early_stopping_rounds=200,feature_fraction= 0.8\n                            ,bagging_fraction=0.85,bagging_freq=10)\n    \n    learner.fit(Xt, yt  , eval_metric=\"auc\",eval_set= [(Xt, yt),(Xv, yv)], verbose=50)\n    \n    \n    train_probs.append(pd.Series(learner.predict_proba(Xv)[:, -1],\n                                index=Xv.index, name=\"probs\"+ str(i)))\n    test_probs.append(pd.Series(learner.predict_proba(test.drop(drop_cols, axis=1))[:, -1],\n                                index=test.index, name=\"fold_\" + str(i)  ))\n      \ntest_probs = pd.concat(test_probs, axis=1).mean(axis=1)\ntrain_probs = pd.concat(train_probs, axis=1)","1430fcb8":"test_probs = pd.DataFrame(test_probs.rename(\"hospital_death\"))\ntest_probs.to_csv(\"lightgbm_baseline.csv\", header=True)","45de433b":"# Entrenamiento ","5174abc7":"# Tratamiendo de las variables de tipo categ\u00f3rico, ejemplo: gender, ethnicity, etc","41b65042":"# Tratamiento de las variables\n","44fed147":"Variables que no estar\u00e1n en nuestro modelo","0588f027":"Eliminando las variables con correlaci\u00f3n de 1","d4fe8c16":"Imputaremos las variables que tengan menos del 40 % de datos missing","c5e0db8e":"# \u00b0tratamiento de las variables de tipo no categ\u00f3rica","15496b65":"si una variable presenta nivel menor que 10, considerar como categ\u00f3rico","7daf628f":"Eliminando la variable readmission_status, pues no presenta variabilidad."}}