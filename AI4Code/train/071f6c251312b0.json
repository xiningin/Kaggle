{"cell_type":{"ccaa0423":"code","441b8ec7":"code","25106e9e":"code","abfd73ef":"code","72d7c6d5":"code","8b42b64b":"code","cf717337":"code","d0ecc70d":"code","fc5ff790":"code","e32dfad3":"code","347da610":"code","7a188bee":"code","f00222a9":"code","50e3cc79":"code","af27c61d":"markdown","13adcb7e":"markdown","11fd80b1":"markdown","7fadd91b":"markdown","2d509bc6":"markdown","4b5d087a":"markdown","3e5f5e63":"markdown","0a39de05":"markdown","ce618bb2":"markdown","ce0c45e4":"markdown","41de725b":"markdown"},"source":{"ccaa0423":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","441b8ec7":"#import Data\ndf = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')","25106e9e":"df.head(10)","abfd73ef":"print(\"Shape:\",df.shape)\nprint(df.columns)","72d7c6d5":"# Identify the unique values and missing values \ndict = {}\nfor i in list(df.columns):\n    dict[i] = df[i].value_counts().shape[0]\n    \nprint(pd.DataFrame(dict,index = [\"unique count\"]).transpose())\n\n","8b42b64b":"# missing values\nprint('Table of missing values: ')\nprint(df.isnull().sum())","cf717337":"# top 10 Countrys\nNetflix_top_country = df['country'].value_counts().head(10)\ndf2 = pd.DataFrame(Netflix_top_country , columns = ['country'])\n\nprint(df2)\n\n#Last 10 years of Neflix \nLast_ten_years = df[df['release_year']>2010 ]\nLast_ten_years.head()","d0ecc70d":"#Look at Count of type, rating , country and top 10 country \n\nfig = plt.figure(figsize=(20,20))\ngs = fig.add_gridspec(2,2)\ngs.update(wspace = 0.3 , hspace = 0.3)\n\nsns.set(style = \"darkgrid\")\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[1,0])\nax3 = fig.add_subplot(gs[1,1])\n\n#Set title and label \nax0.set_title(\"TV_show vs Movie\")\nax1.set_title(\"Distribution of Rating\")\nax2.set_title(\"Distribution of Top 10  Country\")\nax3.set_title(\"Distribution of Top 10 release_year\")\nax1.set_xticklabels(labels = [], rotation = 90)\nax2.set_xticklabels(labels = [], rotation = 90)\n\n#Construct subplots \nsns.countplot(ax = ax0 , x = \"type\" , data = df , palette=\"Set2\")\nsns.countplot(ax = ax1 , x = \"rating\" ,hue = \"type\", data = df)\nsns.countplot(ax = ax2 , x = \"country\" ,hue = \"type\", data = df, order=df.country.value_counts().iloc[:10].index)\nsns.countplot(ax = ax3 , x = \"release_year\" ,hue = \"type\", data = Last_ten_years)\nplt.show()","fc5ff790":"df['description'].head()","e32dfad3":"#import tfidVectorizer from scikit-learn\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n#Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'\ntfidf = TfidfVectorizer(stop_words='english')\n\n#Replace NaN with an empty string\ndf['description'] = df['description'].fillna('')\n\n#Construct the required TF-IDF matrix by fitting and transforming the data\ntfidf_matrix = tfidf.fit_transform(df['description'])\n\n#Output the shape of tfidf_matrix\ntfidf_matrix.shape\n","347da610":"# Import linear_kernel\nfrom sklearn.metrics.pairwise import linear_kernel\n\n# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","7a188bee":"#Construct a reverse map of indices and movie titles\nindices = pd.Series(df.index, index=df['title']).drop_duplicates()\nindices.head()","f00222a9":"def get_recommendations(title, cosine_sim=cosine_sim):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return df['title'].iloc[movie_indices]","50e3cc79":"get_recommendations('Star Trek')","af27c61d":"## EDA\n- Fisrt Look at the datasets\n- Identify the features  \n- Identify their unique counts \n- Identify any missing values\n","13adcb7e":"# Netflix Recommendation \nHere are will try to make Neflix recommendation using content-based filtering \n\n### Objective \n- Construct a Netflix Recommendation System that can give recommend similar Netflix-Content when given a Item details such as name , director , cast and etc. \n\n### Approach\nWe can see from the datasets there is no user rating stored in the data. So our aproach of recommendation will be based on content Based Filtering. This Approach uses metadata from the ite's features to find similar Item. \n1. Data Processing \n2. Construct a Similarity Score\n3. Validate Similarity Score \n","11fd80b1":"## Introduction\n\n### Objective \n- Have a deeper look at Netflix data structure and potential relation to constructe Recommendation System\n\n### Key \n- Identify any trends or interesting relation between features\n- Construct a reliable Recommondation System \n\n### Approach \n- Conduct Exploratory Analysis\n- Identify Correlations (if any)\n- Construct Recommendation system based on Content-Based Filtering.\n\n\n","7fadd91b":"### so far what we can see from the analysis:\n- show_id does represents the primary key of the datasets.\n- There are only two types of Netflix content type, where as others are distributed in wide range will need futher analysis with graphs. \n- There are significant missing values in director, cast and country. This can effect the prediction on content based filtering recommendation.","2d509bc6":"###  EDA Conclusion \nWe can see there is a trend of TV show is becoming more popular in the recent years as more TV shows are made where as movies are becoming less starting in the 2019. This make sense as online streaming is becoming larger and larger more TV-shows will air on platform like Netflix instead of traditional TV. We can also see how significant United state represents the entire entertainment industry far majority are made in United state. ","4b5d087a":"### Graphs Analysis\nNow we will look at some graphs shows the distributions of each feautres.","3e5f5e63":"### Optional 1 - Description Based Recommender\nWe will be using description to compute pairwise similarity for all Netflix items and recommend movie based on that similarity score.","0a39de05":"### Compute Similarity Score\nwe have used the TF-IDF vectorizer, claculating the dot product will directly give us the cosine similarity score.","ce618bb2":"### Graphs analysis:\nFrom the above graphs indicated ther are biased in features country, type and rating.\n- Neflix_type have more Movies than TV shows\n- Majority of the country are made in United State \n- Majority of the Rating are in TV-Ma and TV-14\n","ce0c45e4":"## Conclusion\n\nUnfortunetly, by the given datasets it is limited to find similar Generes or rating to validate our results. The results shows this recommendation can only identify highly similar items such as movie series and fail to identify other similar movies. \n\nThis results is expected as the system is based on the plot of the item, we can assume the plot will varies but only the TV or movie series will have the most similar plot.\n\nOveral the system is working greate as it is , but not a good reccomendation system for overal Neflix recommendation. ","41de725b":"### Validation\nFrom the above Recommendation results we can see a positive results, that the recommendation system is able to identify all the relavent Star Trek movies.\nHowever the system will continue recommend irrelivent movies that are just seems random. \n\nPossible Problemes:\n- The range is limited by the size of the Dataset, that there is no more relavent movies to 'Star Trek'.\n- The current recommendation solution is not feasible to find more relavent movies. \n\nTo futher Investigate we will do some test"}}