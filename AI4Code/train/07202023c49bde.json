{"cell_type":{"7a65b1b0":"code","5b2acb85":"code","41ca5590":"code","abb7b72c":"code","f7a51544":"code","e6125889":"markdown","ef704dd9":"markdown","2bd46a3a":"markdown"},"source":{"7a65b1b0":"from multiprocessing import Pool, cpu_count\nimport glob, zipfile, os, itertools\nfrom PIL import Image, ImageStat\nfrom sklearn import *\nimport pandas as pd\nimport numpy as np\n\n# \u7d71\u8a08\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\ndef get_features(path):\n    try:\n        st = []\n        # \u753b\u50cf\u306epixcel\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n        img = Image.open(path)\n        # \u753b\u50cf\u306epixcel\u30c7\u30fc\u30bf\u306eRGB\u5225\u306e\u7d71\u8a08\u7d50\u679c\u3092\u958b\u59cb\n        im_stats_ = ImageStat.Stat(img)\n        # \u5408\u8a08\n        st += im_stats_.sum\n        # \u5e73\u5747\u5024\n        st += im_stats_.mean\n        # \u4e8c\u4e57\u5e73\u5747\u5e73\u65b9\u6839\n        st += im_stats_.rms\n        # \u5206\u6563\n        st += im_stats_.var\n        # \u6a19\u6e96\u504f\u5dee\n        st += im_stats_.stddev\n    except:\n        print(path)\n    return [path, st]\n\n# \u4e26\u5217\u51e6\u7406\ndef normalize_img(paths):\n    imf_d = {}\n    p = Pool(cpu_count())\n    # get_features\u95a2\u6570\u3092\u4e26\u5217\u51e6\u7406\n    ret = p.map(get_features, paths)\n    # \u4e26\u5217\u51e6\u7406\u306e\u7d50\u679c\u3092\u914d\u5217\u5316\n    for i in range(len(ret)):\n        imf_d[ret[i][0]] = ret[i][1]\n    ret = []\n    fdata = [imf_d[f] for f in paths]\n    return pd.DataFrame(fdata)\n\n# \u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30d1\u30b9\u3092\u8aad\u307f\u8fbc\u307f\ndog_bytes = pd.DataFrame(glob.glob('..\/input\/all-dogs\/all-dogs\/**'), columns=['Path'])\n# \u753b\u50cf\u6bce\u306bpixcel\u30c7\u30fc\u30bf\u306e\u7d71\u8a08\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\ndog_bytes = pd.concat((dog_bytes, normalize_img(dog_bytes.Path.values)), axis=1)\ndog_bytes.head()","5b2acb85":"# KMeans\u6cd5\u306b\u3088\u3063\u3066\u3001\u753b\u50cf\u30c7\u30fc\u30bf\u3092100\u5206\u985e\u306b\u5206\u5272\ndog_bytes['Group'] = cluster.KMeans(n_clusters=100, random_state=3, n_jobs=-1).fit_predict(dog_bytes[list(range(15))])\n# 100\u5206\u985e\u304b\u3089\u6570\u304c\u591a\u30445\u5206\u985e\u3092\u53d6\u5f97\uff08\u8868\u793a\uff09\ndog_bytes['Group'].value_counts()[:5]","41ca5590":"import matplotlib.pyplot as plt\n%matplotlib inline\n# \u753b\u50cf\u3092\u8868\u793a\u3059\u308bwindow\u3092\u751f\u6210\n# \u5358\u4f4d\u306f\u30a4\u30f3\u30c1\nfig = plt.figure(figsize=(8, 80))\nsamples = []\n# \u7279\u5b9a\u306e\u5206\u985e\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u304b\u30895\u3064\u305a\u3064\u30b5\u30f3\u30d7\u30eb\u3092\u53d6\u5f97\nfor i in range(100):\n    # \u7279\u5b9a\u306e\u5206\u985e\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n    g = dog_bytes[dog_bytes['Group'] == i]\n    if len(g) >= 5:\n        # \u7279\u5b9a\u306e\u5206\u985e\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u304b\u30895\u3064\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u53d6\u5f97\n        samples += list(g['Path'].values[:5])\n\n# \u5206\u985e\u6bce\u306e\u753b\u50cf\u3092\u8868\u793a\nfor i in range(len(samples))[:50]:\n    # 5\u884c5\u5217\u5206\u306ewindow\u306e\u5185\u3001\u4e00\u3064\u3092\u53d6\u5f97\n    ax = fig.add_subplot(len(samples)\/5, 5, i+1, xticks=[], yticks=[])\n    # \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n    img = Image.open(samples[i])\n    # \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30ea\u30b5\u30a4\u30ba\n    # \u5358\u4f4d\u306fpixel\n    # \u89e3\u50cf\u5ea6(dpi) = pixel \/ \u30a4\u30f3\u30c1\n    img = img.resize((100,int(img.size[1]\/(img.size[0]\/100))), Image.ANTIALIAS)\n    img = img.crop((0, 0, 64, 64))\n    plt.imshow(img)","abb7b72c":"def sim_img(path):\n    img = Image.open(path).convert('RGB')\n    img = img.resize((100,int(img.size[1]\/(img.size[0]\/100))), Image.ANTIALIAS)\n    img = img.crop((0, 0, 64, 64))\n    return img\n\nsamples = []\nfor i in range(100):\n    g = dog_bytes[dog_bytes['Group'] == i]\n    if len(g) >= 23:\n        s = g['Path'].values[:23]\n        # \u540c\u3058\u5206\u985e\u5185\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u4e8c\u7d44\u306e\u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u6210\n        s = list([p for p,_ in itertools.groupby(sorted([sorted(p) for p in list(itertools.permutations(s, 2))]))])\n        samples += s\nprint(len(samples))","f7a51544":"z = zipfile.PyZipFile('images.zip', mode='w')\nfor i in range(10000):\n    p1, p2 = samples[i]\n    try:\n        # \u540c\u3058\u5206\u985e\u5185\u306e\uff12\u3064\u306e\u753b\u50cf\u3092\u6df7\u5408\u3057\u3001\u65b0\u3057\u3044\u753b\u50cf\u3092\u4f5c\u6210\n        # out = p1 * (1 - 0.4) + p2 * 0.4\n        im = Image.blend(sim_img(p1), sim_img(p2), alpha=0.4)\n        f = str(i)+'.png'\n        im.save(f,'PNG'); z.write(f); os.remove(f)\n        if i % 1000==0:\n            print(i)\n    except:\n        print(p1, p2)\n\nprint (len(z.namelist()))\nz.close()","e6125889":"Inspiration\n===========","ef704dd9":"Motivation\n==============","2bd46a3a":"Submission\n============="}}