{"cell_type":{"d5a9456a":"code","ef305872":"code","2d1f73dc":"code","ed5477b4":"code","25a3f3b3":"code","45bb5ea9":"code","20b3cd70":"code","e16a6744":"code","49830f1f":"code","e729b5d2":"code","ef3542b8":"code","f9866bed":"code","524648c1":"code","17f4f6f1":"code","39adc379":"code","0178b0a4":"code","cddd5ca6":"markdown","ed46aa70":"markdown","0c4732f0":"markdown","7c8f0ab8":"markdown","95bf245a":"markdown","1420d461":"markdown","b4b9ded7":"markdown","e6d204e4":"markdown","cba72e1b":"markdown","e3b2a01e":"markdown","983b16df":"markdown","d03ca384":"markdown","2dfe9faf":"markdown","34240cff":"markdown","4b82958b":"markdown","4a971b9e":"markdown"},"source":{"d5a9456a":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.utils import np_utils\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.datasets import mnist\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n%matplotlib inline","ef305872":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","2d1f73dc":"Y_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1) ","ed5477b4":"X_train.isnull().any().describe()","25a3f3b3":"test.isnull().any().describe()","45bb5ea9":"X_train = X_train\/255.0\ntest = test\/255.0\n\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","20b3cd70":"# plotting the first five training images\nfig = plt.figure(figsize=(20,20))\nfor i in range(5):\n    ax = fig.add_subplot(1, 5, i+1, xticks=[], yticks=[])\n    ax.imshow(X_train[i].reshape(28,28), cmap='gray')\n    ax.set_title(str(Y_train[i]))","e16a6744":"Y_train = np_utils.to_categorical(Y_train, num_classes=10)\n\n# print the first five encoded training labels\nprint('One-hot Encoded labels:')\nprint(Y_train[:10])","49830f1f":"random_seed = 69\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=random_seed)\nprint(X_train.shape, Y_train.shape)","e729b5d2":"model = Sequential()\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(Conv2D(filters = 128, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters = 256, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(Conv2D(filters = 256, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(filters = 512, kernel_size = (3,3), padding = 'Same',  activation ='relu'))\nmodel.add(Conv2D(filters = 512, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\nmodel.add(Conv2D(filters = 256, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(Conv2D(filters = 256, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.3))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(10, activation = \"softmax\"))\nmodel.summary()","ef3542b8":"from keras.utils import plot_model\nfrom IPython.display import Image\n\nplot_model(model, to_file='keras_CNN_model.png', show_shapes=True, show_layer_names=True)\nImage(\"keras_CNN_model.png\")","f9866bed":"# Define Optimizer\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","524648c1":"model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])","17f4f6f1":"reduce_lr = ReduceLROnPlateau(monitor='val_acc', \n                              patience=3, \n                              verbose=1, \n                              factor=0.5, \n                              min_lr=0.00001)\n\nhist = model.fit(X_train, \n                 Y_train, \n                 batch_size=128, \n                 epochs=10,\n                 validation_data=(X_val, Y_val), \n                 callbacks=[reduce_lr],\n                 verbose=1, \n                 shuffle=True)","39adc379":"Y_test = model.predict_classes(test, verbose=2)","0178b0a4":"submission = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsubmission['Label'] = Y_test\nsubmission.to_csv('submission.csv',index=False)","cddd5ca6":"## Examining the Training Data","ed46aa70":"# Make Submission","0c4732f0":"## Loading The Data","7c8f0ab8":"## Import Required Libraries","95bf245a":"## The Model","1420d461":"### Check for Null or Missing Values","b4b9ded7":"# EDA & A Walkthrough CNN with Keras","e6d204e4":"### Normalization, Reshaping, Label Encoding","cba72e1b":"# Make Predictions","e3b2a01e":"## Model Parameters","983b16df":"### Printing Out Model","d03ca384":"model = Sequential()\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same',  activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(10, activation = \"softmax\"))\nmodel.summary()","2dfe9faf":"### Updated (2020)","34240cff":"## Applying One-hot Encoding to Labels","4b82958b":"### Old Model","4a971b9e":"### Splitting the Data"}}