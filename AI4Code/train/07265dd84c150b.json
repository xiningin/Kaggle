{"cell_type":{"7f51e281":"code","0008acce":"code","012cad24":"code","06ee8794":"code","e45b366a":"code","7383aea9":"code","a087a09c":"code","d141fe1a":"code","22e73735":"code","5614d93d":"code","356500e5":"code","d18223a2":"code","87d10447":"code","643bd839":"code","07da1c9f":"code","bb03bbae":"code","b283e925":"code","55ff344f":"code","2189bd03":"code","cc987c8f":"code","0124b15b":"code","8d20e59f":"code","915534be":"code","15e8753e":"code","a4e26623":"code","b030bbf7":"code","d0e6838e":"code","23a8b1a6":"code","bc2312fa":"code","1003e3ca":"code","87b74fca":"code","f25a1a0e":"code","aafc527f":"code","5ad284b5":"code","f407bdd8":"code","28daf3db":"code","7f4d30da":"code","1fced96a":"code","5c1bd418":"code","d8db08e3":"code","3acf5fe0":"code","2c3715ff":"code","e02bbf53":"code","60bd0f2e":"code","8b56dcf9":"code","90b1c77a":"code","7dcab9d5":"code","16afd9f3":"code","56ef17f3":"code","87c55133":"code","c2068754":"code","55dccbbf":"code","cc1efe53":"code","ee8fa10b":"code","6f18a564":"code","edcba28e":"code","05979d76":"code","1c70bf11":"code","5e7f2a56":"code","126f7f57":"code","7faa3271":"code","7f6f8934":"code","27b945e8":"code","f95d210b":"code","66d22f69":"code","ca688f10":"code","a6c756eb":"code","22766133":"code","fef3d5a7":"code","e9815f89":"code","ae9d05d6":"code","2ad2722a":"code","de0e1f23":"code","df971546":"code","ee3ff697":"code","8b4cebca":"code","8011cb8e":"code","dd140be1":"code","62ea4bd2":"code","8771413e":"code","02570642":"code","2170e138":"code","47dece37":"markdown","9c995f79":"markdown","c47e6baa":"markdown","9ecf1d1e":"markdown","f4836ad7":"markdown","aa1c42a4":"markdown","711a6931":"markdown","3ca1a632":"markdown","50ab860e":"markdown","4d8443f3":"markdown","78f0abf1":"markdown","376ec2b5":"markdown","f8bb0fce":"markdown","37d0f9c1":"markdown","f44f59f2":"markdown","4ab973a3":"markdown","20285b4b":"markdown","6ce1fefc":"markdown","5e3fe79d":"markdown","3d61de66":"markdown","acea05de":"markdown","63ede31c":"markdown","2b9a67ff":"markdown","30dd88dd":"markdown","7ecd3d40":"markdown","4bc2e29c":"markdown","b5b1407f":"markdown","54da94ee":"markdown","89e59f79":"markdown","98843eaa":"markdown","035663bc":"markdown","a7efc9f2":"markdown","6025f5f7":"markdown"},"source":{"7f51e281":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error\nimport statsmodels.api as sm\nfrom statsmodels.tools.eval_measures import mse, rmse\n\n%matplotlib inline\npd.options.display.float_format = '{:.3f}'.format\n\nimport warnings\nwarnings.filterwarnings('ignore')","0008acce":"df = pd.read_csv(\"..\/input\/Admission_Predict_Ver1.1.csv\")\ndf = df.rename(columns={\"Chance of Admit \":\"Chance of Admit\",\n                        \"LOR \":\"LOR\"}) \ndf=df[['Chance of Admit','GRE Score', 'TOEFL Score', 'University Rating', 'SOP','LOR', 'CGPA','Research']]","012cad24":"df.head()","06ee8794":"df.info()","e45b366a":"plt.figure(figsize=(15,10))\n\ncol_list=df.columns\n \nfor i in range(8):\n    plt.subplot(2,4,i+1)\n    plt.boxplot(df[col_list[i]])\n    plt.title(col_list[i],color=\"g\",fontsize=15)\n\n\nplt.show()","7383aea9":"plt.figure(figsize=(15,10))\n\nplt.subplot(2, 2, 1)\nsns.distplot(df['GRE Score'],color='red')\nplt.xlabel(\"GRE Score\",fontsize=14,color='red')\nplt.subplot(2, 2, 2)\nsns.distplot(df['TOEFL Score'],color='green')\nplt.xlabel(\"TOEFL Score\",fontsize=14,color='green')\nplt.subplot(2,2,3)\nsns.distplot(df['CGPA'],color='purple')\nplt.xlabel(\"CGPA\",fontsize=14,color='purple')\nplt.subplot(2,2,4)\nsns.distplot(df['Chance of Admit'],color='blue')\nplt.xlabel(\"Chance of Admit\",fontsize=14,color='blue')\n\nplt.show()","a087a09c":"plt.figure(figsize=(20,10))\n\ndeg=[\"LOR\",\"SOP\",\"University Rating\",\"Research\"]\n\nfor i in range(4):\n    plt.subplot(2,2,i+1)\n    sns.countplot(x=deg[i],data=df)\n    plt.xlabel(deg[i],color=\"purple\",fontsize=20)\n    plt.ylabel(\"Count\",color=\"purple\",fontsize=15)\n    plt.yticks(fontsize=13)\n    plt.xticks(fontsize=13)\nplt.show() ","d141fe1a":"plt.figure(figsize=(18,7))\nplt.subplot(1,3,1)\nsns.scatterplot(x=\"GRE Score\",y=\"Chance of Admit\",data=df,hue=\"Research\",palette=\"prism_r\")\nplt.subplot(1,3,2)\nsns.scatterplot(x=\"TOEFL Score\",y=\"Chance of Admit\",data=df,hue=\"Research\",palette=\"prism_r\")\nplt.subplot(1,3,3)\nsns.scatterplot(x=\"CGPA\",y=\"Chance of Admit\",data=df,hue=\"Research\",palette=\"prism_r\")\nplt.show()","22e73735":"plt.figure(figsize=(18,7))\n\nplt.subplot(131)\nsns.scatterplot('GRE Score','Chance of Admit', data = df,palette='viridis',hue = 'University Rating')\nplt.subplot(132)\nsns.scatterplot('TOEFL Score','Chance of Admit', data = df,palette='viridis',hue = 'University Rating')\nplt.subplot(133)\nsns.scatterplot('CGPA','Chance of Admit', data = df,palette='viridis',hue = 'University Rating')\nplt.show()","5614d93d":"plt.figure(figsize=(15,5))\nsns.swarmplot(x=\"University Rating\",y=\"Chance of Admit\",hue=\"Research\",data=df,palette=\"prism_r\")\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\nplt.xlabel(\"University Rating\",color=\"red\",fontsize=16)\nplt.ylabel(\"Chance of Admit\",color=\"red\",fontsize=15)\nplt.show()","356500e5":"plt.figure(figsize=(15,5))\nsns.swarmplot(x=\"SOP\",y=\"Chance of Admit\",hue=\"Research\",data=df,palette=\"nipy_spectral\")\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\nplt.xlabel(\"SOP\",color=\"darkcyan\",fontsize=16)\nplt.ylabel(\"Chance of Admit\",color=\"darkcyan\",fontsize=15)\nplt.show()","d18223a2":"plt.figure(figsize=(15,5))\nsns.swarmplot(x=\"LOR\",y=\"Chance of Admit\",hue=\"Research\",data=df,palette=\"spring\")\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\nplt.xlabel(\"LOR\",color=\"deeppink\",fontsize=16)\nplt.ylabel(\"Chance of Admit\",color=\"deeppink\",fontsize=15)\nplt.show()","87d10447":"plt.figure(figsize=(15,25))\nplt.subplot(4,2,1)\nsns.boxplot(x=\"LOR\", y=\"Chance of Admit\", data=df)\nplt.title(\"LOR and Chance of Admit\",fontsize=15,color=\"m\")\nplt.subplot(4,2,2)\nsns.boxplot(x=\"SOP\", y=\"Chance of Admit\", data=df)\nplt.title(\"SOP and Chance of Admit\",fontsize=15,color=\"m\")\nplt.subplot(4,2,3)\nsns.boxplot(x=\"LOR\", y=\"GRE Score\", data=df)\nplt.title(\"LOR and GRE Score\",fontsize=15,color=\"m\")\nplt.subplot(4,2,4)\nsns.boxplot(x=\"SOP\", y=\"GRE Score\", data=df)\nplt.title(\"SOP and GRE Score\",fontsize=15,color=\"m\")\nplt.subplot(4,2,5)\nsns.boxplot(x=\"LOR\", y=\"TOEFL Score\", data=df)\nplt.title(\"LOR and TOEFL Score\",fontsize=15,color=\"m\")\nplt.subplot(4,2,6)\nsns.boxplot(x=\"SOP\", y=\"TOEFL Score\", data=df)\nplt.title(\"SOP and TOEFL Score\",fontsize=15,color=\"m\")\nplt.subplot(4,2,7)\nsns.boxplot(x=\"LOR\", y=\"CGPA\", data=df)\nplt.title(\"LOR and CGPA\",fontsize=15,color=\"m\")\nplt.subplot(4,2,8)\nsns.boxplot(x=\"SOP\", y=\"CGPA\", data=df)\nplt.title(\"SOP and CGPA\",fontsize=15,color=\"m\")\n\nplt.show()","643bd839":"plt.figure(figsize=(10,10))\ncorr=df.corr()\nsns.heatmap(corr,square=True,annot=True,linewidths=.5,cmap='viridis')\nplt.title(\"Graduate Admissions Correlation Matrix\",color=\"purple\",fontsize=15)\n\nplt.show()","07da1c9f":"df.describe().T","bb03bbae":"corr[\"Chance of Admit\"].sort_values(ascending=False)","b283e925":"X_dogru = df[\"CGPA\"]\ny = df[\"Chance of Admit\"]","55ff344f":"import statsmodels.api as sm\nX_dogru = sm.add_constant(X_dogru)\nmodel_dogrusal = sm.OLS(y,X_dogru).fit()\nmodel_dogrusal.summary()","2189bd03":"print(\"Chance of Admit = \"+str(\"%.2f\"%model_dogrusal.params[0] +\" + CGPA * \"+str(\"%.2f\"%model_dogrusal.params[1])))","cc987c8f":"import matplotlib.pyplot as plt\nplt.figure(figsize=(7,5))\n\nbaslik_font = {'family': 'arial','color':  'darkblue','weight': 'bold','size': 14 }\neksen_font  = {'family': 'arial','color':  'darkblue','weight': 'bold','size': 13 }\n\nsns.regplot(df[\"CGPA\"],df[\"Chance of Admit\"],ci=None,scatter_kws={\"color\":\"r\",\"s\":9})\nplt.xlabel(\"CGPA\",fontdict=eksen_font)\nplt.ylabel(\"Chance of Admit\",fontdict=eksen_font)\nplt.title(\"Model Equation : Chance of Admit = -1.04 + CGPA * 0.21\",fontdict=baslik_font)\nplt.show()","0124b15b":"X = df [[\"CGPA\",\"University Rating\",\"SOP\",\"LOR\",\"Research\"]]\ny = df [\"Chance of Admit\"]","8d20e59f":"X_train_one,X_test_one,y_train_one,y_test_one = train_test_split(X,y,test_size=0.2,random_state=465)\n\nX_train_one = sm.add_constant(X_train_one)\nX_test_one  = sm.add_constant(X_test_one)\n\nmodel_1 = sm.OLS(y_train_one,X_train_one).fit()\n\ny_preds_train_one = model_1.predict (X_train_one)\ny_preds_test_one = model_1.predict(X_test_one)\nmodel_1.summary()","915534be":"def calc_adj_rsq(r2,n,p):\n    return ((1-(1-r2)*((n-1)\/(n-p-1))))","15e8753e":"plt.figure(figsize=(15,7))\n\nbaslik_font = {'family': 'arial','color':  'darkblue','weight': 'bold','size': 15 }\neksen_font = {'family': 'arial','color':  'darkblue','weight': 'bold','size': 13 }\n\n\nplt.subplot(1,2,1)\nplt.scatter(y_test_one,y_preds_test_one,alpha=0.7,color=\"purple\")\nplt.scatter(y_train_one,y_preds_train_one,alpha=0.4,color=\"green\")\nplt.plot(y_test_one,y_test_one,color=\"blue\")\nplt.xlabel(\"Actual Values\",fontdict=eksen_font)\nplt.ylabel(\"Estimated Values(With Test Set Values)\",fontdict=eksen_font)\nplt.title(\"Chance of Admit : Actual and Estimated Values\",fontdict=baslik_font)\n\nplt.subplot(1,2,2)\nartik_test_one  = y_preds_test_one - y_test_one\nartik_train_one = y_preds_train_one - y_train_one\nplt.scatter(y_test_one,artik_test_one,alpha=0.7,color=\"purple\")\nplt.scatter(y_train_one,artik_train_one,alpha=0.4,color=\"green\")\nplt.hlines(y = 0, xmin = 0, xmax = 1, color = \"blue\")\nplt.xticks(rotation=90)\nplt.xlabel(\"Estimated\",fontdict=eksen_font)\nplt.ylabel(\"Residual\",fontdict=eksen_font)\nplt.title(\"Residual and Estimation\",fontdict=baslik_font)\n\n\nplt.show()\n\nr2_train_one = r2_score(y_train_one,y_preds_train_one)\nr2_test_one  = r2_score(y_test_one,y_preds_test_one)\nadj_rsq_train_one = calc_adj_rsq(r2_train_one,X_train_one.shape[0],len(X_train_one.columns))\nadj_rsq_test_one  = calc_adj_rsq(r2_test_one,X_test_one.shape[0],len(X_test_one.columns))\nrmse_train_one = rmse(y_train_one, y_preds_train_one)\nrmse_test_one  = rmse(y_test_one, y_preds_test_one)\n\nprint(\"Train Set Adjusted R-Squared            : {:.4f}\".format(calc_adj_rsq(r2_train_one,X_train_one.shape[0],len(X_train_one.columns))))\nprint(\"Mean Absolute Error (MAE)               : {:.4f}\".format(mean_absolute_error(y_train_one, y_preds_train_one)))\nprint(\"Mean Square Error (MSE) (MSE)           : {:.4f}\".format(mse(y_train_one, y_preds_train_one)))\nprint(\"Root Mean Square Error (RMSE)           : {:.4f}\".format(rmse(y_train_one, y_preds_train_one)))\nprint(\"Mean Absolute Percentage Error (MAPE)   : {:.4f}\".format(np.mean(np.abs((y_train_one - y_preds_train_one) \/ y_train_one)) * 100),\"\\n\")\n\nprint(\"Test Set Adjusted R-Squared             : {:.4f}\".format(calc_adj_rsq(r2_test_one,X_test_one.shape[0],len(X_test_one.columns))))\nprint(\"Mean Absolute Error(MAE)                : {:.4f}\".format(mean_absolute_error(y_test_one, y_preds_test_one)))\nprint(\"Mean Square Error (MSE)                 : {:.4f}\".format(mse(y_test_one, y_preds_test_one)))\nprint(\"Root Mean Square Error (RMSE)           : {:.4f}\".format(rmse(y_test_one, y_preds_test_one)))\nprint(\"Mean Absolute Percentage Error (MAPE)   : {:.4f}\".format(np.mean(np.abs((y_test_one - y_preds_test_one) \/ y_test_one)) * 100))\n","a4e26623":"X = df[[\"CGPA\",\"GRE Score\",\"TOEFL Score\"]]\ny = df [\"Chance of Admit\"]","b030bbf7":"X_train_two,X_test_two,y_train_two,y_test_two = train_test_split(X,y,test_size=0.2,random_state=465)\n\nX_train_two = sm.add_constant(X_train_two)\nX_test_two  = sm.add_constant(X_test_two)\n\nmodel_2 =sm.OLS(y_train_two,X_train_two).fit()\n\ny_preds_train_two = model_2.predict (X_train_two)\ny_preds_test_two  = model_2.predict(X_test_two)\nmodel_2.summary()\n","d0e6838e":"plt.figure(figsize=(15,7))\n\nbaslik_font = {'family': 'arial','color':  'darkblue','weight': 'bold','size': 15 }\neksen_font = {'family': 'arial','color':  'darkblue','weight': 'bold','size': 13 }\n\n\nplt.subplot(1,2,1)\nplt.scatter(y_test_two,y_preds_test_two,alpha=0.7,color=\"purple\")\nplt.scatter(y_train_two,y_preds_train_two,alpha=0.4,color=\"green\")\nplt.plot(y_test_two,y_test_two,color=\"blue\")\nplt.xlabel(\"Actual Values\",fontdict=eksen_font)\nplt.ylabel(\"Estimated Values (With Test Set Values)\",fontdict=eksen_font)\nplt.title(\"Chance of Admit : Actual and Estimated Values\",fontdict=baslik_font)\n\nplt.subplot(1,2,2)\nartik_test_two  = y_preds_test_two - y_test_two\nartik_train_two = y_preds_train_two - y_train_two\nplt.scatter(y_test_two,artik_test_two,alpha=0.7,color=\"purple\")\nplt.scatter(y_train_two,artik_train_two,alpha=0.4,color=\"green\")\nplt.hlines(y = 0, xmin = 0, xmax = 1, color = \"blue\")\nplt.xticks(rotation=90)\nplt.xlabel(\"Estimated\",fontdict=eksen_font)\nplt.ylabel(\"Residual\",fontdict=eksen_font)\nplt.title(\"Residual and Estimation\",fontdict=baslik_font)\n\nplt.show()\n\nr2_train_two = r2_score(y_train_two,y_preds_train_two)\nr2_test_two  = r2_score(y_test_two,y_preds_test_two)\nadj_rsq_train_two = calc_adj_rsq(r2_train_two,X_train_two.shape[0],len(X_train_two.columns))\nadj_rsq_test_two  = calc_adj_rsq(r2_test_two,X_test_two.shape[0],len(X_test_two.columns))\nrmse_train_two = rmse(y_train_two, y_preds_train_two)\nrmse_test_two  = rmse(y_test_two, y_preds_test_two)\n\n\nprint(\"Train Set Adjusted R-Squared            : {:.4f}\".format(calc_adj_rsq(r2_train_two,X_train_two.shape[0],len(X_train_two.columns))))\nprint(\"Mean Absolute Error (MAE)               : {:.4f}\".format(mean_absolute_error(y_train_two, y_preds_train_two)))\nprint(\"Mean Square Error (MSE)                 : {:.4f}\".format(mse(y_train_two, y_preds_train_two)))\nprint(\"Root Mean Square Error (RMSE)           : {:.4f}\".format(rmse(y_train_two, y_preds_train_two)))\nprint(\"Mean Absolute Percentage Error (MAPE)   : {:.4f}\".format(np.mean(np.abs((y_train_two - y_preds_train_two) \/ y_train_two)) * 100),\"\\n\")\n\nprint(\"Test Set Adjusted R-Squared             : {:.4f}\".format(calc_adj_rsq(r2_test_two,X_test_two.shape[0],len(X_test_two.columns))))\nprint(\"Mean Absolute Error (MAE)               : {:.4f}\".format(mean_absolute_error(y_test_two, y_preds_test_two)))\nprint(\"Mean Square Error (MSE)                 : {:.4f}\".format(mse(y_test_two, y_preds_test_two)))\nprint(\"Root Mean Square Error (RMSE)           : {:.4f}\".format(rmse(y_test_two, y_preds_test_two)))\nprint(\"Mean Absolute Percentage Error (MAPE)   : {:.4f}\".format(np.mean(np.abs((y_test_two - y_preds_test_two) \/ y_test_two)) * 100))\n","23a8b1a6":"uni_dummies = pd.get_dummies(df['SOP'],prefix='SOP')\ndf = pd.concat([df,uni_dummies],axis=1)\ndf.head()","bc2312fa":"y = df[\"Chance of Admit\"]\nX_dummy_sop = df[['GRE Score', 'TOEFL Score','LOR', 'CGPA', 'Research','SOP_1.0',\n       'SOP_1.5', 'SOP_2.0', 'SOP_2.5', 'SOP_3.0', 'SOP_3.5', 'SOP_4.0',\n       'SOP_4.5', 'SOP_5.0']]","1003e3ca":"X_train_dum, X_test_dum, y_train_dum, y_test_dum = train_test_split(X_dummy_sop,y,test_size = 0.2,random_state =465)\n\nX_train_dum = sm.add_constant(X_train_dum)\nX_test_dum  = sm.add_constant(X_test_dum)\n\nmodel_dummy_top_1 = sm.OLS(y_train_dum, X_train_dum).fit()\n\ny_preds_test_dum  = model_dummy_top_1.predict(X_test_dum)\ny_preds_train_dum = model_dummy_top_1.predict(X_train_dum)\n\nmodel_dummy_top_1.summary()","87b74fca":"plt.figure(figsize=(15,7))\n\nbaslik_font = {'family': 'arial','color': 'darkblue' , 'weight': 'bold','size': 15 }\neksen_font =  {'family': 'arial','color': 'darkblue' , 'weight': 'bold','size': 13 }\n\n\nplt.subplot(1,2,1)\nplt.scatter(y_test_dum,y_preds_test_dum,alpha=0.7,color=\"purple\")\nplt.scatter(y_train_dum,y_preds_train_dum,alpha=0.4,color=\"green\")\nplt.plot(y_test_dum,y_test_dum,color=\"blue\")\nplt.xlabel(\"Actual Values\",fontdict=eksen_font)\nplt.ylabel(\"Estimated Values (With Test Set Values)\",fontdict=eksen_font)\nplt.title(\"Chance of Admit : Actual and Estimated Values\",fontdict=baslik_font)\n\nplt.subplot(1,2,2)\nartik_test_dum  = y_preds_test_dum - y_test_dum\nartik_train_dum = y_preds_train_dum - y_train_dum\nplt.scatter(y_test_dum,artik_test_dum,alpha=0.7,color=\"purple\")\nplt.scatter(y_train_dum,artik_train_dum,alpha=0.4,color=\"green\")\nplt.hlines(y = 0, xmin = 0, xmax = 1, color = \"blue\")\nplt.xticks(rotation=90)\nplt.xlabel(\"Estimated\",fontdict=eksen_font)\nplt.ylabel(\"Residual\",fontdict=eksen_font)\nplt.title(\"Residual and Estimation\",fontdict=baslik_font)\n\nplt.show()\n\nr2_train_dum = r2_score(y_train_dum,y_preds_train_dum)\nr2_test_dum  = r2_score(y_test_dum,y_preds_test_dum)\nadj_rsq_train_sop = calc_adj_rsq(r2_train_dum,X_train_dum.shape[0],len(X_train_dum.columns))\nadj_rsq_test_sop  = calc_adj_rsq(r2_test_dum,X_test_dum.shape[0],len(X_test_dum.columns))\nrmse_train_sop = rmse(y_train_dum, y_preds_train_dum)\nrmse_train_sop = rmse(y_test_dum, y_preds_test_dum)\n\nprint(\"Train Set Adjusted R-Squared            : {:.4f}\".format(calc_adj_rsq(r2_train_dum,X_train_dum.shape[0],len(X_train_dum.columns))))\nprint(\"Mean Absolute Error (MAE)               : {:.4f}\".format(mean_absolute_error(y_train_dum, y_preds_train_dum)))\nprint(\"Mean Square Error (MSE)                 : {:.4f}\".format(mse(y_train_dum, y_preds_train_dum)))\nprint(\"Root Mean Square Error (RMSE)           : {:.4f}\".format(rmse(y_train_dum, y_preds_train_dum)))\nprint(\"Mean Absolute Percentage Error (MAPE)   : {:.4f}\".format(np.mean(np.abs((y_train_dum - y_preds_train_dum) \/ y_train_dum)) * 100),\"\\n\")\n\nprint(\"Test Set Adjusted R-Squared             : {:.4f}\".format(calc_adj_rsq(r2_test_dum,X_test_dum.shape[0],len(X_test_dum.columns))))\nprint(\"Mean Absolute Error (MAE)               : {:.4f}\".format(mean_absolute_error(y_test_dum, y_preds_test_dum)))\nprint(\"Mean Square Error (MSE)                 : {:.4f}\".format(mse(y_test_dum, y_preds_test_dum)))\nprint(\"Root Mean Square Error (RMSE)           : {:.4f}\".format(rmse(y_test_dum, y_preds_test_dum)))\nprint(\"Mean Absolute Percentage Error (MAPE)   : {:.4f}\".format(np.mean(np.abs((y_test_dum - y_preds_test_dum) \/ y_test_dum)) * 100))\n","f25a1a0e":"uni_dummies = pd.get_dummies(df['University Rating'],prefix='University Rating')\ndf = pd.concat([df,uni_dummies],axis=1)\ndf.head()","aafc527f":"y = df[\"Chance of Admit\"]\nX_dummy_uni = df[['GRE Score', 'TOEFL Score','LOR', 'CGPA', 'Research','University Rating_1', 'University Rating_2', 'University Rating_3',\n       'University Rating_4', 'University Rating_5']]","5ad284b5":"X_train_dumu, X_test_dumu, y_train_dumu, y_test_dumu = train_test_split(X_dummy_uni,y,test_size = 0.2,random_state =465)\n\nX_train_dumu = sm.add_constant(X_train_dumu)\nX_test_dumu  = sm.add_constant(X_test_dumu)\n\nmodel_dummy_uni_1 = sm.OLS(y_train_dumu, X_train_dumu).fit()\n\n\ny_preds_test_dumu  = model_dummy_uni_1.predict(X_test_dumu)\ny_preds_train_dumu = model_dummy_uni_1.predict(X_train_dumu)\n\nmodel_dummy_uni_1.summary()","f407bdd8":"plt.figure(figsize=(15,7))\n\nbaslik_font = {'family': 'arial','color': 'darkblue','weight': 'bold','size': 15 }\neksen_font = {'family': 'arial','color':  'darkblue','weight': 'bold','size': 13 }\n\n\nplt.subplot(1,2,1)\nplt.scatter(y_test_dumu,y_preds_test_dumu,alpha=0.7,color=\"purple\")\nplt.scatter(y_train_dumu,y_preds_train_dumu,alpha=0.4,color=\"green\")\nplt.plot(y_test_dumu,y_test_dumu,color=\"blue\")\nplt.xlabel(\"Actual Values\",fontdict=eksen_font)\nplt.ylabel(\"Estimated Values (With Test Set Values)\",fontdict=eksen_font)\nplt.title(\"Chance of Admit : Actual and Estimated Values\",fontdict=baslik_font)\n\nplt.subplot(1,2,2)\nartik_test_dumu  = y_preds_test_dumu - y_test_dumu\nartik_train_dumu = y_preds_train_dumu - y_train_dumu\nplt.scatter(y_test_dumu,artik_test_dumu,alpha=0.7,color=\"purple\")\nplt.scatter(y_train_dumu,artik_train_dumu,alpha=0.4,color=\"green\")\nplt.xlabel(\"Estimated\",fontdict=eksen_font)\nplt.ylabel(\"Residual\",fontdict=eksen_font)\nplt.title(\"Residual and Estimation\",fontdict=baslik_font)\nplt.hlines(y = 0, xmin = 0, xmax = 1, color = \"blue\")\nplt.xticks(rotation=90)\n\nplt.show()\n\nr2_train_dumu = r2_score(y_train_dumu,y_preds_train_dumu)\nr2_test_dumu  = r2_score(y_test_dumu,y_preds_test_dumu)\nadj_rsq_train_uni= calc_adj_rsq(r2_train_dumu,X_train_dumu.shape[0],len(X_train_dumu.columns))\nadj_rsq_test_uni = calc_adj_rsq(r2_test_dumu,X_test_dumu.shape[0],len(X_test_dumu.columns))\nrmse_train_uni   = rmse(y_train_dumu, y_preds_train_dumu)\nrmse_test_uni    = rmse(y_test_dumu, y_preds_test_dumu)\n\n\nprint(\"Train Set Adjusted R-Squared             : {:.4f}\".format(calc_adj_rsq(r2_train_dumu,X_train_dumu.shape[0],len(X_train_dumu.columns))))\nprint(\"Mean Absolute Error (MAE)                : {:.4f}\".format(mean_absolute_error(y_train_dumu, y_preds_train_dumu)))\nprint(\"Mean Square Error (MSE)                  : {:.4f}\".format(mse(y_train_dumu, y_preds_train_dumu)))\nprint(\"Root Mean Square Error (RMSE)            : {:.4f}\".format(rmse(y_train_dumu, y_preds_train_dumu)))\nprint(\"Mean Absolute Percentage Error (MAPE)    : {:.4f}\".format(np.mean(np.abs((y_train_dumu - y_preds_train_dumu) \/ y_train_dumu)) * 100),\"\\n\")\n\nprint(\"Test Set Adjusted R-Squared              : {:.4f}\".format(calc_adj_rsq(r2_test_dumu,X_test_dumu.shape[0],len(X_test_dumu.columns))))\nprint(\"Mean Absolute Error (MAE)                : {:.4f}\".format(mean_absolute_error(y_test_dumu, y_preds_test_dumu)))\nprint(\"Mean Square Error (MSE)                  : {:.4f}\".format(mse(y_test_dumu, y_preds_test_dumu)))\nprint(\"Root Mean Square Error (RMSE)            : {:.4f}\".format(rmse(y_test_dumu, y_preds_test_dumu)))\nprint(\"Mean Absolute Percentage Error (MAPE)    : {:.4f}\".format(np.mean(np.abs((y_test_dumu - y_preds_test_dumu) \/ y_test_dumu)) * 100))\n\n","28daf3db":"y = df[\"Chance of Admit\"]\nX_dummy_top = df[['GRE Score', 'TOEFL Score',\n              'LOR', 'CGPA', 'Research', 'SOP_1.0',\n              'SOP_1.5', 'SOP_2.0', 'SOP_2.5', 'SOP_3.0', 'SOP_3.5', 'SOP_4.0',\n              'SOP_4.5', 'SOP_5.0', 'University Rating_1', 'University Rating_2',\n              'University Rating_3', 'University Rating_4', 'University Rating_5']]","7f4d30da":"X_train_dum_top, X_test_dum_top, y_train_dum_top, y_test_dum_top = train_test_split(X_dummy_top,y,test_size = 0.2,random_state =465)\n\nX_train_dum_top = sm.add_constant(X_train_dum_top)\nX_test_dum_top  = sm.add_constant(X_test_dum_top)\n\nmodel_dummy_top_1 = sm.OLS(y_train_dum_top, X_train_dum_top).fit()\n\ny_preds_test_dum_top  = model_dummy_top_1.predict(X_test_dum_top)\ny_preds_train_dum_top = model_dummy_top_1.predict(X_train_dum_top)\n\nmodel_dummy_top_1.summary()\n","1fced96a":"plt.figure(figsize=(15,7))\n\nbaslik_font = {'family': 'arial','color': 'darkblue','weight': 'bold','size': 15 }\neksen_font =  {'family': 'arial','color': 'darkblue','weight': 'bold','size': 13 }\n\n\nplt.subplot(1,2,1)\nplt.scatter(y_test_dum_top,y_preds_test_dum_top,alpha=0.7,color=\"purple\")\nplt.scatter(y_train_dum_top,y_preds_train_dum_top,alpha=0.4,color=\"green\")\nplt.plot(y_test_dum_top,y_test_dum_top,color=\"blue\")\nplt.xlabel(\"Actual Values\",fontdict=eksen_font)\nplt.ylabel(\"Estimated Values (With Test Set Values)\",fontdict=eksen_font)\nplt.title(\"Chance of Admit : Actual and Estimated Values\",fontdict=baslik_font)\n\nplt.subplot(1,2,2)\nartik_test_dum_top  = y_preds_test_dum_top - y_test_dum_top\nartik_train_dum_top = y_preds_train_dum_top - y_train_dum_top\nplt.scatter(y_test_dum_top,artik_test_dum_top,alpha=0.7,color=\"purple\")\nplt.scatter(y_train_dum_top,artik_train_dum_top,alpha=0.4,color=\"green\")\nplt.xlabel(\"Estimated\",fontdict=eksen_font)\nplt.ylabel(\"Residual\",fontdict=eksen_font)\nplt.title(\"Residual and Estimation\",fontdict=baslik_font)\nplt.hlines(y = 0, xmin = 0, xmax = 1, color = \"blue\")\nplt.xticks(rotation=90)\n\nplt.show()\n\nr2_train_dum_top   = r2_score(y_train_dum_top,y_preds_train_dum_top)\nr2_test_dum_top    = r2_score(y_test_dum_top,y_preds_test_dum_top)\nadj_rsq_dum_top    = calc_adj_rsq(r2_train_dum_top,X_train_dum_top.shape[0],len(X_train_dum_top.columns))\nadj_rsq_dum_top    = calc_adj_rsq(r2_test_dum_top,X_test_dum_top.shape[0],len(X_test_dum_top.columns))\nrmse_train_dum_top = rmse(y_train_dum_top, y_preds_train_dum_top)\nrmse_test_dum_top  = rmse(y_test_dum_top, y_preds_test_dum_top)\n\nprint(\"Train Set Adjusted R-Squared            : {:.4f}\".format(calc_adj_rsq(r2_train_dum_top,X_train_dum_top.shape[0],len(X_train_dum_top.columns))))\nprint(\"Mean Absolute Error (MAE)               : {:.4f}\".format(mean_absolute_error(y_train_dum_top, y_preds_train_dum_top)))\nprint(\"Mean Square Error (MSE)                 : {:.4f}\".format(mse(y_train_dum_top, y_preds_train_dum_top)))\nprint(\"Root Mean Square Error (RMSE)           : {:.4f}\".format(rmse(y_train_dum_top, y_preds_train_dum_top)))\nprint(\"Mean Absolute Percentage Error (MAPE)   : {:.4f}\".format(np.mean(np.abs((y_train_dum_top - y_preds_train_dum_top) \/ y_train_dum_top)) * 100),\"\\n\")\n\nprint(\"Test Set Adjusted R-Squared             : {:.4f}\".format(calc_adj_rsq(r2_test_dum_top,X_test_dum_top.shape[0],len(X_test_dum_top.columns))))\nprint(\"Mean Absolute Error (MAE)               : {:.4f}\".format(mean_absolute_error(y_test_dum_top, y_preds_test_dum_top)))\nprint(\"Mean Square Error (MSE)                 : {:.4f}\".format(mse(y_test_dum_top, y_preds_test_dum_top)))\nprint(\"Root Mean Square Error (RMSE)           : {:.4f}\".format(rmse(y_test_dum_top, y_preds_test_dum_top)))\nprint(\"Mean Absolute Percentage Error (MAPE)   : {:.4f}\".format(np.mean(np.abs((y_test_dum_top - y_preds_test_dum_top) \/ y_test_dum_top)) * 100))\n\n","5c1bd418":"def poly_hesapla(X,y,n):\n    from sklearn.preprocessing import PolynomialFeatures\n    import statsmodels.api as sm\n    poly = PolynomialFeatures(n)\n    X_poly=poly.fit_transform(X)\n    X_poly = sm.add_constant(X_poly)\n    model_poly=sm.OLS(y,X_poly).fit()\n    print(\"anlaml\u0131 p de\u011fer say\u0131s\u0131 : {} \".format(len(model_poly.pvalues[model_poly.pvalues < 0.1])),\"\\n\")\n    print(\"R-squared      : {}\".format(model_poly.rsquared))\n    print(\"Adj. R-squared : {}\".format(model_poly.rsquared_adj))\n","d8db08e3":"def model_poly_summary_hesapla(X,y,n):\n    from sklearn.preprocessing import PolynomialFeatures\n    import statsmodels.api as sm\n    poly = PolynomialFeatures(n)\n    X_poly=poly.fit_transform(X)\n    X_poly=pd.DataFrame(X_poly,columns = poly.get_feature_names(X.columns))\n   \n    \n    X_train, X_test, y_train, y_test = train_test_split(X_poly,y,test_size = 0.2,random_state =465)\n\n    X_train = sm.add_constant(X_train)\n\n    model = sm.OLS(y_train, X_train).fit()\n\n    return model.summary()","3acf5fe0":"def grafik_ciz(X,y,n):\n    \n    from sklearn.preprocessing import PolynomialFeatures\n    import statsmodels.api as sm\n    poly = PolynomialFeatures(n)\n    X_poly=poly.fit_transform(X)\n    X_poly=pd.DataFrame(X_poly,columns = poly.get_feature_names(X.columns))\n   \n    \n    X_train, X_test, y_train, y_test = train_test_split(X_poly,y,test_size = 0.2,random_state =465)\n\n    X_train = sm.add_constant(X_train)\n\n    model = sm.OLS(y_train, X_train).fit()\n \n    y_preds_test = model.predict(X_test)\n    y_preds_train = model.predict(X_train)\n\n\n    plt.figure(figsize=(15,7))\n\n    baslik_font = {'family': 'arial','color':  'darkblue','weight': 'bold','size': 15 }\n    eksen_font  = {'family': 'arial','color':  'darkblue','weight': 'bold','size': 13 }\n\n\n    plt.subplot(1,2,1)\n    plt.scatter(y_test,y_preds_test,alpha=0.7,color=\"purple\")\n    plt.scatter(y_train,y_preds_train,alpha=0.4,color=\"green\")\n    plt.plot(y_test,y_test,color=\"blue\")\n    plt.xlabel(\"Actual Values\",fontdict=eksen_font)\n    plt.ylabel(\"Estimated Values (With Test Set Values)\",fontdict=eksen_font)\n    plt.title(\"Chance of Admit : Actual and Estimated Values \",fontdict=baslik_font)\n\n    plt.subplot(1,2,2)\n    artik_test  = y_preds_test - y_test\n    artik_train = y_preds_train - y_train\n    plt.scatter(y_test,artik_test,alpha=0.7,color=\"purple\")\n    plt.scatter(y_train,artik_train,alpha=0.4,color=\"green\")\n    plt.xlabel(\"Estimated\",fontdict=eksen_font)\n    plt.ylabel(\"Residual\",fontdict=eksen_font)\n    plt.title(\"Residual and Estimation\",fontdict=baslik_font)\n    plt.hlines(y = 0, xmin = 0, xmax = 1, color = \"blue\")\n    plt.xticks(rotation=90)\n\n    plt.show()\n    \n    r2_train = r2_score(y_train,y_preds_train)\n    r2_test  = r2_score(y_test,y_preds_test)\n    \n    print(\"Train Set Adjusted R-Squared             : {:.4f}\".format(calc_adj_rsq(r2_train,X_train.shape[0],len(X_train.columns))))\n    print(\"Mean Absolute Error (MAE)                : {:.4f}\".format(mean_absolute_error(y_train, y_preds_train)))\n    print(\"Mean Square Error (MSE)                  : {:.4f}\".format(mse(y_train, y_preds_train)))\n    print(\"Root Mean Square Error (RMSE)            : {:.4f}\".format(rmse(y_train, y_preds_train)))\n    print(\"Mean Absolute Percentage Error (MAPE)    : {:.4f}\".format(np.mean(np.abs((y_train - y_preds_train) \/ y_train)) * 100),\"\\n\")\n    print(\"Test Set Adjusted R-Squared              : {:.4f}\".format(calc_adj_rsq(r2_test,X_test.shape[0],len(X_test.columns))))\n    print(\"Mean Absolute Error(MAE)                 : {:.4f}\".format(mean_absolute_error(y_test, y_preds_test)))\n    print(\"Mean Square Error (MSE)                  : {:.4f}\".format(mse(y_test, y_preds_test)))\n    print(\"Root Mean Square Error (RMSE)            : {:.4f}\".format(rmse(y_test, y_preds_test)))\n    print(\"Mean Absolute Percentage Error (MAPE)    : {:.4f}\".format(np.mean(np.abs((y_test - y_preds_test) \/ y_test)) * 100))\n          \n                ","2c3715ff":"y = df[\"Chance of Admit\"]\nX = df[['GRE Score', 'TOEFL Score',\n        'LOR', 'CGPA', 'Research','SOP','University Rating']]","e02bbf53":"poly_hesapla(X,y,1)","60bd0f2e":"model_poly_summary_hesapla(X,y,1)","8b56dcf9":"grafik_ciz(X,y,1)","90b1c77a":"adj_rsq_train_poly_1 = 0.8326\nadj_rsq_test_poly_1  = 0.7305\nrmse_train_poly_1    = 0.0577\nrmse_test_poly_1     = 0.0667","7dcab9d5":"poly_hesapla(X,y,2)","16afd9f3":"model_poly_summary_hesapla(X,y,2)","56ef17f3":"grafik_ciz(X,y,2)","87c55133":"adj_rsq_train_poly_2 = 0.8426\nadj_rsq_test_poly_2  = 0.5556\nrmse_train_poly_2    = 0.0539\nrmse_test_poly_2     = 0.0713","c2068754":"poly_hesapla(X,y,3)","55dccbbf":"model_poly_summary_hesapla(X,y,3)","cc1efe53":"grafik_ciz(X,y,3)","ee8fa10b":"adj_rsq_train_poly_3 = 0.8468\nadj_rsq_test_poly_3  = 3.4978\nrmse_train_poly_3    = 0.0467\nrmse_test_poly_3     = 0.0975","6f18a564":"X = df [[\"CGPA\",\"University Rating\",\"SOP\",\"LOR\",\"Research\",\"GRE Score\",\"TOEFL Score\"]]\ny = df [\"Chance of Admit\"]\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=465)","edcba28e":"lambdalar = 10**np.linspace(10,-2,100)*0.5","05979d76":"from sklearn.linear_model import RidgeCV\nridge_cv = RidgeCV(alphas = lambdalar,\n                   scoring =\"neg_mean_squared_error\",\n                   normalize=True)","1c70bf11":"ridge_cv.fit(X_train,y_train)","5e7f2a56":"ridge_cv.alpha_","126f7f57":"from sklearn.linear_model import Ridge\nridge_tuned = Ridge(alpha=ridge_cv.alpha_,\n                   normalize = True).fit(X_train,y_train)","7faa3271":"y_preds_train_ridge = ridge_tuned.predict(X_train)\ny_preds_test_ridge = ridge_tuned.predict(X_test)","7f6f8934":"plt.figure(figsize=(15,7))\n\nbaslik_font = {'family': 'arial','color': 'darkblue','weight': 'bold','size': 15 }\neksen_font =  {'family': 'arial','color': 'darkblue','weight': 'bold','size': 13 }\n\n\nplt.subplot(1,2,1)\nplt.scatter(y_test,y_preds_test_ridge,alpha=0.7,color=\"purple\")\nplt.scatter(y_train,y_preds_train_ridge,alpha=0.4,color=\"green\")\nplt.plot(y_test,y_test,color=\"blue\")\nplt.xlabel(\"Actual Values\",fontdict=eksen_font)\nplt.ylabel(\"Estimated Values (With Test Set Values)\",fontdict=eksen_font)\nplt.title(\"Chance of Admit : Actual and Estimated Values\",fontdict=baslik_font)\n\nplt.subplot(1,2,2)\nartik_test_ridge  = y_preds_test_ridge  - y_test\nartik_train_ridge = y_preds_train_ridge - y_train\nplt.scatter(y_test,artik_test_ridge,alpha=0.7,color=\"purple\")\nplt.scatter(y_train,artik_train_ridge,alpha=0.4,color=\"green\")\nplt.xlabel(\"Estimated\",fontdict=eksen_font)\nplt.ylabel(\"Residual\",fontdict=eksen_font)\nplt.title(\"Residual and Estimation\",fontdict=baslik_font)\nplt.hlines(y = 0, xmin = 0, xmax = 1, color = \"blue\")\nplt.xticks(rotation=90)\nr2_train_ridge = r2_score(y_train,y_preds_train_ridge)\nr2_test_ridge  = r2_score(y_test,y_preds_test_ridge)\n\nplt.show()\n\nprint(\"Train Set Adjusted R-Squared             : {:.4f}\".format(calc_adj_rsq(r2_train_ridge,X_train.shape[0],len(X_train.columns))))\nprint(\"Mean Absolute Error (MAE)                : {:.4f}\".format(mean_absolute_error(y_train,ridge_tuned.predict(X_train))))\nprint(\"Mean Square Error (MSE)                  : {:.4f}\".format(mse(y_train,ridge_tuned.predict(X_train))))\nprint(\"Root Mean Square Error (RMSE)            : {:.4f}\".format(rmse(y_train,ridge_tuned.predict(X_train))))\nprint(\"Mean Absolute Percentage Error (MAPE)    : {:.4f}\".format(np.mean(np.abs((y_train - ridge_tuned.predict(X_train)) \/ y_train)) * 100),\"\\n\")\nprint(\"Test Set Adjusted R-Squared              : {:.4f}\".format(calc_adj_rsq(r2_test_ridge,X_test.shape[0],len(X_test.columns))))\nprint(\"Mean Absolute Error(MAE)                 : {:.4f}\".format(mean_absolute_error(y_test,ridge_tuned.predict(X_test))))\nprint(\"Mean Square Error (MSE)                  : {:.4f}\".format(mse(y_test,ridge_tuned.predict(X_test))))\nprint(\"Root Mean Square Error (RMSE)            : {:.4f}\".format(rmse(y_test,ridge_tuned.predict(X_test))))\nprint(\"Mean Absolute Percentage Error (MAPE)    : {:.4f}\".format(np.mean(np.abs((y_test -ridge_tuned.predict(X_test)) \/ y_test)) * 100))\n    \n","27b945e8":"r2_train_ridge = r2_score(y_train,y_preds_train_ridge)\nr2_test_ridge  = r2_score(y_test,y_preds_test_ridge)\nadj_rsq_train_ridge = calc_adj_rsq(r2_train_ridge,X_train.shape[0],len(X_train.columns))\nadj_rsq_test_ridge  = calc_adj_rsq(r2_test_ridge,X_test.shape[0],len(X_test.columns))\nrmse_train_ridge = rmse(y_train,ridge_tuned.predict(X_train))\nrmse_test_ridge  = rmse(y_test,ridge_tuned.predict(X_test))","f95d210b":"from sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV","66d22f69":"lasso_cv_model = LassoCV(alphas=None,\n                         cv =10,\n                         max_iter = 10000,normalize=True)","ca688f10":"lasso_cv_model.fit(X_train,y_train)","a6c756eb":"lasso_cv_model.alpha_","22766133":"lasso_tuned = Lasso(alpha = lasso_cv_model.alpha_)","fef3d5a7":"lasso_tuned.fit(X_train,y_train)\n","e9815f89":"y_preds_train_lasso = lasso_tuned.predict(X_train)\ny_preds_test_lasso = lasso_tuned.predict(X_test)","ae9d05d6":"plt.figure(figsize=(15,7))\n\nbaslik_font = {'family': 'arial','color': 'darkblue','weight': 'bold','size': 15 }\neksen_font =  {'family': 'arial','color': 'darkblue','weight': 'bold','size': 13 }\n\n\nplt.subplot(1,2,1)\nplt.scatter(y_test,y_preds_test_lasso,alpha=0.7,color=\"purple\")\nplt.scatter(y_train,y_preds_train_lasso,alpha=0.4,color=\"green\")\nplt.plot(y_test,y_test,color=\"blue\")\nplt.xlabel(\"Actual Values\",fontdict=eksen_font)\nplt.ylabel(\"Estimated Values (With Test Set Values)\",fontdict=eksen_font)\nplt.title(\"Chance of Admit : Actual and Estimated Values\",fontdict=baslik_font)\n\nplt.subplot(1,2,2)\nartik_test_lasso  = y_preds_test_lasso  - y_test\nartik_train_lasso = y_preds_train_lasso - y_train\nplt.scatter(y_test,artik_test_lasso,alpha=0.7,color=\"purple\")\nplt.scatter(y_train,artik_train_lasso,alpha=0.4,color=\"green\")\nplt.xlabel(\"Estimated\",fontdict=eksen_font)\nplt.ylabel(\"Residual\",fontdict=eksen_font)\nplt.title(\"Residual and Estimation\",fontdict=baslik_font)\nplt.hlines(y = 0, xmin = 0, xmax = 1, color = \"blue\")\nplt.xticks(rotation=90)\nplt.show()\nr2_train_lasso = r2_score(y_train,y_preds_train_lasso)\nr2_test_lasso  = r2_score(y_test,y_preds_test_lasso)\n\n\nprint(\"Train Set Adjusted R-Squared            : {:.4f}\".format(calc_adj_rsq(r2_train_lasso,X_train.shape[0],len(X_train.columns))))\nprint(\"Mean Absolute Error (MAE)               : {:.4f}\".format(mean_absolute_error(y_train, y_preds_train_lasso)))\nprint(\"Mean Square Error (MSE)                 : {:.4f}\".format(mse(y_train, y_preds_train_lasso)))\nprint(\"Root Mean Square Error (RMSE)           : {:.4f}\".format(rmse(y_train, y_preds_train_lasso)))\nprint(\"Mean Absolute Percentage Error (MAPE)   : {:.4f}\".format(np.mean(np.abs((y_train - y_preds_train_lasso) \/ y_train)) * 100),\"\\n\")\nprint(\"Test Set Adjusted R-Squared             : {:.4f}\".format(calc_adj_rsq(r2_test_lasso,X_test.shape[0],len(X_test.columns))))\nprint(\"Mean Absolute Error(MAE)                : {:.4f}\".format(mean_absolute_error(y_test, y_preds_test_lasso)))\nprint(\"Mean Square Error (MSE)                 : {:.4f}\".format(mse(y_test, y_preds_test_lasso)))\nprint(\"Root Mean Square Error (RMSE)           : {:.4f}\".format(rmse(y_test, y_preds_test_lasso)))\nprint(\"Mean Absolute Percentage Error (MAPE)   : {:.4f}\".format(np.mean(np.abs((y_test - y_preds_test_lasso) \/ y_test)) * 100))\n","2ad2722a":"r2_train_lasso = r2_score(y_train,y_preds_train_lasso)\nr2_test_lasso  = r2_score(y_test,y_preds_test_lasso)\nadj_rsq_train_lasso = calc_adj_rsq(r2_train_lasso,X_train.shape[0],len(X_train.columns))\nadj_rsq_test_lasso  = calc_adj_rsq(r2_test_lasso,X_test.shape[0],len(X_test.columns))\nrmse_train_lasso = rmse(y_train, y_preds_train_lasso)\nrmse_test_lasso  = rmse(y_test, y_preds_test_lasso)","de0e1f23":"from sklearn.linear_model import ElasticNet,ElasticNetCV","df971546":"enet_cv_model = ElasticNetCV(cv = 10,random_state=0).fit(X_train,y_train)","ee3ff697":"enet_cv_model.alpha_","8b4cebca":"enet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train,y_train)","8011cb8e":"y_preds_train_elastic = enet_tuned.predict(X_train)\ny_preds_test_elastic  = enet_tuned.predict(X_test)","dd140be1":"plt.figure(figsize=(15,7))\n\nbaslik_font = {'family': 'arial','color': 'darkblue','weight': 'bold','size': 15 }\neksen_font =  {'family': 'arial','color': 'darkblue','weight': 'bold','size': 13 }\n\n\nplt.subplot(1,2,1)\nplt.scatter(y_test,y_preds_test_elastic,alpha=0.7,color=\"purple\")\nplt.scatter(y_train,y_preds_train_elastic,alpha=0.4,color=\"green\")\nplt.plot(y_test,y_test,color=\"blue\")\nplt.xlabel(\"Actual Values\",fontdict=eksen_font)\nplt.ylabel(\"Estimated Values (With Test Set Values)\",fontdict=eksen_font)\nplt.title(\"Chance of Admit : Actual and Estimated Values\",fontdict=baslik_font)\n\nplt.subplot(1,2,2)\nartik_test_elastic  = y_preds_test_elastic  - y_test\nartik_train_elastic = y_preds_train_elastic - y_train\nplt.scatter(y_test,artik_test_elastic,alpha=0.7,color=\"purple\")\nplt.scatter(y_train,artik_train_elastic,alpha=0.4,color=\"green\")\nplt.xlabel(\"Estimated\",fontdict=eksen_font)\nplt.ylabel(\"Residual\",fontdict=eksen_font)\nplt.title(\"Residual and Estimation\",fontdict=baslik_font)\nplt.hlines(y = 0, xmin = 0, xmax = 1, color = \"blue\")\nplt.xticks(rotation=90)\nr2_train_elastic = r2_score(y_train,y_preds_train_elastic)\nr2_test_elastic  = r2_score(y_test,y_preds_test_elastic)\n\nplt.show()\n\nprint(\"Train Set Adjusted R-Squared            : {:.4f}\".format(calc_adj_rsq(r2_train_elastic,X_train.shape[0],len(X_train.columns))))\nprint(\"Mean Absolute Error (MAE)               : {:.4f}\".format(mean_absolute_error(y_train, y_preds_train_elastic)))\nprint(\"Mean Square Error (MSE)                 : {:.4f}\".format(mse(y_train, y_preds_train_elastic)))\nprint(\"Root Mean Square Error (RMSE)           : {:.4f}\".format(rmse(y_train, y_preds_train_elastic)))\nprint(\"Mean Absolute Percentage Error (MAPE)   : {:.4f}\".format(np.mean(np.abs((y_train - y_preds_train_elastic) \/ y_train)) * 100),\"\\n\")\nprint(\"Test Set Adjusted R-Squared             : {:.4f}\".format(calc_adj_rsq(r2_test_elastic,X_test.shape[0],len(X_test.columns))))\nprint(\"Mean Absolute Error (MAE)               : {:.4f}\".format(mean_absolute_error(y_test, y_preds_test_elastic)))\nprint(\"Mean Square Error (MSE)                 : {:.4f}\".format(mse(y_test, y_preds_test_elastic)))\nprint(\"Root Mean Square Error (RMSE)           : {:.4f}\".format(rmse(y_test, y_preds_test_elastic)))\nprint(\"Mean Absolute Percentage Error (MAPE)   : {:.4f}\".format(np.mean(np.abs((y_test - y_preds_test_elastic) \/ y_test)) * 100))\n\n","62ea4bd2":"r2_train_elastic = r2_score(y_train,y_preds_train_elastic)\nr2_test_elastic  = r2_score(y_test,y_preds_test_elastic)\nadj_rsq_train_elastic = calc_adj_rsq(r2_train_elastic,X_train.shape[0],len(X_train.columns))\nadj_rsq_test_elastic  = calc_adj_rsq(r2_test_elastic,X_test.shape[0],len(X_test.columns))\nrmse_train_elastic    = rmse(y_train, y_preds_train_elastic)\nrmse_test_elastic     = rmse(y_test, y_preds_test_elastic)","8771413e":"result = pd.DataFrame(columns=[\"Models\",\"Train_Adjusted_R_Sq\",\"Test_Adjusted_R_Sq\",\"Train_Set_RMSE\",\"Test_Set_RMSE\"])\nresult[\"Models\"] = [\"Model 1\",\"Model 2\",\"Model Dummy SOP\",\"Model Dummy UN\u0130\",\"Model Dummy TOP \",\"Poly 1\",\"Poly 2\",\"Poly 3\",\n                    \"Model Ridge\",\"Model Lasso\",\"Model Elasticnet\"] \nresult[\"Train_Adjusted_R_Sq\"] = [adj_rsq_train_one,adj_rsq_train_two,adj_rsq_train_sop,adj_rsq_train_uni,adj_rsq_dum_top,\n                                adj_rsq_train_poly_1,adj_rsq_train_poly_2,adj_rsq_train_poly_3,adj_rsq_train_ridge,\n                                adj_rsq_train_lasso,adj_rsq_train_elastic]\nresult[\"Test_Adjusted_R_Sq\"] = [adj_rsq_test_one,adj_rsq_test_two,adj_rsq_test_sop,adj_rsq_test_uni,adj_rsq_dum_top,\n                                adj_rsq_test_poly_1,adj_rsq_test_poly_2,adj_rsq_test_poly_3,adj_rsq_test_ridge,\n                                adj_rsq_test_lasso,adj_rsq_test_elastic]\nresult[\"Train_Set_RMSE\"] = [rmse_train_one,rmse_train_two,rmse_train_sop,rmse_train_uni,rmse_train_dum_top,\n                           rmse_train_poly_1,rmse_train_poly_2,rmse_train_poly_3,rmse_train_ridge,\n                           rmse_train_lasso,rmse_train_elastic]\nresult[\"Test_Set_RMSE\"]  = [rmse_test_one,rmse_test_two,rmse_train_sop,rmse_test_uni,rmse_test_dum_top,\n                           rmse_test_poly_1,rmse_test_poly_2,rmse_test_poly_3,rmse_test_ridge,\n                           rmse_test_lasso,rmse_test_elastic]","02570642":"result","2170e138":"model_labels = [\"Model 1\",\"Model 2\",\"Model Dummy SOP\",\"Model Dummy UN\u0130\",\"Model Dummy TOP\",\"Model Poly 1\",\n                \"Model Poly 2\",\"Model Poly 3\",\"Model Ridge\",\"Model Lasso\",\"Model Elasticnet\"]\n\nmodel_adjusted_train =[adj_rsq_train_one,adj_rsq_train_two,adj_rsq_train_sop,adj_rsq_train_uni,adj_rsq_dum_top,\n                       adj_rsq_train_poly_1,adj_rsq_train_poly_2,adj_rsq_train_poly_3,adj_rsq_train_ridge,\n                       adj_rsq_train_lasso,adj_rsq_train_elastic]\n\nmodel_adjusted_test = [adj_rsq_test_one,adj_rsq_test_two,adj_rsq_test_sop,adj_rsq_test_uni,adj_rsq_dum_top,\n                       adj_rsq_test_poly_1,adj_rsq_test_poly_2,adj_rsq_test_poly_3,adj_rsq_test_ridge,\n                       adj_rsq_test_lasso,adj_rsq_test_elastic]\n\nmodel_rmse_train =[rmse_train_one,rmse_train_two,rmse_train_sop,rmse_train_uni,rmse_train_dum_top,\n                   rmse_train_poly_1,rmse_train_poly_2,rmse_train_poly_3,rmse_train_ridge,\n                   rmse_train_lasso,rmse_train_elastic]\n\nmodel_rmse_test =[rmse_test_one,rmse_test_two,rmse_train_sop,rmse_test_uni,rmse_test_dum_top,\n                  rmse_test_poly_1,rmse_test_poly_2,rmse_test_poly_3,rmse_test_ridge,\n                  rmse_test_lasso,rmse_test_elastic]\n\n\nplt.figure(figsize = (20,20))\nplt.subplot(2,1,1)\nn_groups = 11\nindex = np.arange(n_groups)\nbar_width = 0.3\nopacity = 0.7\n \nrects1 = plt.bar(index, model_rmse_train, bar_width,\nalpha=opacity,\ncolor='green',\nlabel='Train Set RMSE.')\n \nrects2 = plt.bar(index + bar_width, model_rmse_test, bar_width,\nalpha=opacity,\ncolor='purple',\nlabel='Test Set RMSE.')\n \nplt.xlabel('Models',fontsize =18)\nplt.ylabel('RMSE Values',fontsize =18)\nplt.title('Train and Test RMSEs',fontsize =20)\nplt.xticks(index + bar_width\/2, (\"Model 1\",\"Model 2\",\"Model Dummy SOP\",\"Model Dummy UN\u0130\",\"Model Dummy TOP\",\"Model Poly 1\",\n                \"Model Poly 2\",\"Model Poly 3\",\"Model Ridge\",\"Model Lasso\",\"Model Elasticnet\"),rotation=90,fontsize=15)\nplt.yticks(fontsize=15)\nplt.legend(fontsize='xx-large')\n\nplt.subplot(2,1,2)\nrects1 = plt.bar(index, model_adjusted_train, bar_width,\nalpha=opacity,\ncolor='green',\nlabel='Train Set Adjusted R Sq.')\n \nrects2 = plt.bar(index + bar_width, model_adjusted_test, bar_width,\nalpha=opacity,\ncolor='purple',\nlabel='Test Set Adjusted R Sq.')\n \nplt.xlabel('Models',fontsize =18)\nplt.ylabel('Adjusted R Squareds',fontsize =18)\nplt.title('Train and Test Adjusted Rs',fontsize =20)\nplt.xticks(index + bar_width\/2, (\"Model 1\",\"Model 2\",\"Model Dummy SOP\",\"Model Dummy UN\u0130\",\"Model Dummy TOP\",\"Model Poly 1\",\n                \"Model Poly 2\",\"Model Poly 3\",\"Model Ridge\",\"Model Lasso\",\"Model Elasticnet\"),rotation=90,fontsize=15)\nplt.yticks(fontsize=15)\nplt.legend(fontsize='xx-large')\n\nplt.tight_layout()\nplt.show()\n","47dece37":"## 1. Introduction","9c995f79":"## 2. General View of the Data","c47e6baa":"### The relationship between Categorical and Continuous Variables ","9ecf1d1e":"We created 11 models used various methods such as lasso,ridge,elasticnet and polynomial regression and used dummy features.The best model is Model Dummy TOP which is used columns as GRE Score,TOEFL Score,LOR,CGPA,Research and SOP dummies as SOP_1.0,SOP_1.5,SOP_2.0,SOP_2.5,SOP_3.0,SOP_3.5, SOP_4.0,SOP_4.5,SOP_5.0 and University Rating dummies as University Rating_1,University Rating_2,University Rating_3, University Rating_4,University Rating_5 because of overfitting's low and the model's test RMSE is 0.68.The others's overfitting's are very high even if the\u0131r test RMSE's are better than the best model.\n","f4836ad7":"### Categorical Variables's Graphs by Count Plot","aa1c42a4":"This project was built with purpose of predicting Graduate Admission by linear regression for students.The predicted values gives us a idea about chance of admit for a universty.The dataset is inspired by the UCLA are in the older format and owned by Mohan S Acharya.","711a6931":"## 4.Models","3ca1a632":"## 3. Exploring the Data","50ab860e":"### Let's start by importing libraries","4d8443f3":"Let's sort to variables related with Chance of Admit big to small and apply OLS this variables ","78f0abf1":"### Simple Linear Regression","376ec2b5":"### Model Lasso (Model Tuning)","f8bb0fce":"### Model Dummy TOP","37d0f9c1":"There are no outliers except Chance of Admit,LOR columns and in this columns the outliers can be neglected.","f44f59f2":"### Continuous Variables's Distribution Graphs","4ab973a3":"### Model 1 (CGPA,Categorical Variables)","20285b4b":" __Categorical Variables__\n \n * SOP \n * LOR\n * Research\n * University Rating\n \n__Continuous Variables__\n  \n * Chance of Admit                   \n * GRE Score         \n * TOEFL Score                          \n * CGPA","6ce1fefc":"### Model ElasticNet ( Model Tuning )","5e3fe79d":"### Model Dummy UN\u0130","3d61de66":"### Model Poly 1","acea05de":"### Contents\n\n### 1. Introduction\n\n### 2. General View of the Data\n\n### 3. Exploring the Data\n\n### 4.Models\n\n### 5.Conclusions ","63ede31c":"# Graduate Admission Prediction","2b9a67ff":"### Model 2 ( CGPA ,GRE ,TOEFL )","30dd88dd":"## 5.Conclusions","7ecd3d40":"### Model Dummy SOP","4bc2e29c":"### Model Ridge (Model Tuning)","b5b1407f":"### Model Poly 2","54da94ee":"## Linear Regression Project","89e59f79":"The dataset contains several parameters which are considered important during the application for Masters Programs.\nThe parameters included are\n* **GRE Score** : ( out of 340 )\n* **TOEFL Score** : ( out of 120 )\n* **University Rating** : ( out of 5 )\n* **SOP** : Statement of Purpose ( out of 5 )\n* **LOR** : Letter of Recommendation Strength ( out of 5 )\n* **CGPA** : Undergraduate GPA ( out of 10 )\n* **Research** :( either 0 or 1 )\n* **Chance of Admit** : ( ranging from 0 to 1 )","98843eaa":"### Are there the outliers ?","035663bc":"### Viewing Data","a7efc9f2":"### Polynomial Models","6025f5f7":"### Model Poly 3"}}