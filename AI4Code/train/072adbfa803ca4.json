{"cell_type":{"13969aca":"code","46455254":"code","8b6243f5":"code","3a115442":"code","91481dc9":"code","6df3968d":"code","be0ec994":"code","0208425a":"code","a6293d6d":"code","74249731":"code","bafcf6cc":"code","507129c1":"code","cab959af":"code","c7ebeaa4":"code","5179234c":"code","67ab4199":"code","a8515903":"code","cac7e747":"code","e3bb15e3":"code","b5ba56de":"code","25843362":"code","b5010e2c":"markdown","5019f1f8":"markdown","1a4559ff":"markdown","77fd5431":"markdown","ae6688bb":"markdown","be9191cf":"markdown","0d27462b":"markdown","ec40e6b4":"markdown","e00d9f53":"markdown","c3c43d55":"markdown","93b21f57":"markdown","3fd1982a":"markdown","fc69f1de":"markdown","89cfe7b9":"markdown","fe9cb043":"markdown","33e2f02e":"markdown","61061c6a":"markdown","a1265a27":"markdown","f65750ef":"markdown"},"source":{"13969aca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46455254":"import seaborn as sns\nimport warnings\nimport xgboost as xgb\nimport matplotlib.pyplot as plt\n\nwarnings.filterwarnings('ignore')\nplt.style.use('fivethirtyeight')\n%matplotlib inline","8b6243f5":"%%time\ndf = pd.read_csv('..\/input\/new-york-city-taxi-fare-prediction\/train.csv', nrows=10000000)\ndf.info()","3a115442":"df.head()","91481dc9":"df['pickup_datetime']=pd.to_datetime(df['pickup_datetime'],format='%Y-%m-%d %H:%M:%S UTC')","6df3968d":"df.dropna(how='any',axis='rows',inplace=True)\ndf.info()","be0ec994":"df.shape","0208425a":"features = df[['pickup_datetime', 'pickup_longitude', 'pickup_latitude', \n               'dropoff_longitude', 'dropoff_latitude', 'passenger_count']]\nprice = df['fare_amount']\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(features, price, test_size=0.3, random_state=42)\nX_train.shape, X_test.shape","a6293d6d":"from sklearn.metrics import r2_score, mean_squared_error\n\ndef adjusted_r2_score(y_true, y_pred, X_test):\n    r2 = r2_score(y_true=y_true, y_pred=y_pred)\n    adjusted_r2 = 1 - (1-r2)*(len(y_true)-1)\/(len(y_true) - X_test.shape[1]-1)\n    return adjusted_r2","74249731":"%%time\n\nxgr = xgb.XGBRegressor(objective='reg:linear', n_estimators=50, max_depth=5, n_jobs=-1, random_state=42)\nxgr.fit(X_train.drop(columns=['pickup_datetime']), y_train)\n\ny_pred = xgr.predict(X_test.drop(columns=['pickup_datetime']))\n\nrsq_baseline_xgb = r2_score(y_true=y_test, y_pred=y_pred)\nadj_rsq_baseline_xgb = adjusted_r2_score(y_true=y_test, y_pred=y_pred, X_test=X_test)\nrmse_baseline_xgb = mean_squared_error(y_true=y_test, y_pred=y_pred) ** 0.5\nprint('R-sq:', rsq_baseline_xgb)\nprint('Adj. R-sq:', adj_rsq_baseline_xgb)\nprint('RMSE:', rmse_baseline_xgb)","bafcf6cc":"df.describe()","507129c1":"sns.kdeplot(df['fare_amount'].values,shade=True)","cab959af":"fig = plt.figure(figsize = (14, 5))\ntitle = fig.suptitle(\"Distribution of trips across the US\", fontsize=14)\nax1 = fig.add_subplot(1,2, 1)\np = sns.kdeplot((df[(df['pickup_latitude']>= 30) & (df['pickup_latitude'] <= 50)]['pickup_latitude'].values),\n                shade=True,\n                ax=ax1)\nt= ax1.set_title(\"Distribution of latitude\")\n\nax2 = fig.add_subplot(1,2, 2)\np = sns.kdeplot((df[(df['pickup_longitude']>= -125) & (df['pickup_longitude'] <= -65)]['pickup_longitude'].values),\n                shade=True,\n                ax=ax2)\nt = ax2.set_title(\"Distribution of longitude\")","c7ebeaa4":"sns.kdeplot(df['passenger_count'].values,shade=True)","5179234c":"lat_long = {\n    'min_lat':30,\n    'max_lat':50,    \n    'min_long':-125,\n    'max_long':-65, \n}","67ab4199":"filter = (df['fare_amount'].between(0.01, 1000) \n                   & df['passenger_count'].between(1, 8)\n                   & df['pickup_latitude'].between(lat_long['min_lat'], lat_long['max_lat'])\n                   & df['dropoff_latitude'].between(lat_long['min_lat'], lat_long['max_lat']) \n                   & df['pickup_longitude'].between(lat_long['min_long'], lat_long['max_long'])\n                   & df['dropoff_longitude'].between(lat_long['min_long'], lat_long['max_long']))\n\ndf = df[filter]\n\nfeatures = df[['pickup_datetime', 'pickup_longitude', 'pickup_latitude', \n               'dropoff_longitude', 'dropoff_latitude', 'passenger_count']]\nprice = df['fare_amount']\n\nX_train, X_test, y_train, y_test = train_test_split(features, price, test_size=0.3, random_state=42)\nX_train.shape, X_test.shape","a8515903":"X_train.head()","cac7e747":"%%time\n\nxgr = xgb.XGBRegressor(objective='reg:linear', n_estimators=50, max_depth=5, n_jobs=-1, random_state=42)\nxgr.fit(X_train.drop(columns=['pickup_datetime']), y_train)\n\ny_pred = xgr.predict(X_test.drop(columns=['pickup_datetime']))\n\nrsq_baseline2_xgb = r2_score(y_true=y_test, y_pred=y_pred)\nadj_rsq_baseline2_xgb = adjusted_r2_score(y_true=y_test, y_pred=y_pred, X_test=X_test)\nrmse_baseline2_xgb = mean_squared_error(y_true=y_test, y_pred=y_pred) ** 0.5\nprint('R-sq:', rsq_baseline2_xgb)\nprint('Adj. R-sq:', adj_rsq_baseline2_xgb)\nprint('RMSE:', rmse_baseline2_xgb)","e3bb15e3":"def manhattan(start_coord, end_coord):\n    \n    pickup_lat, pickup_long = start_coord\n    dropoff_lat, dropoff_long = end_coord    \n    distance = np.abs(dropoff_lat - pickup_lat) + np.abs(dropoff_long - pickup_long)\n    return distance","b5ba56de":"X_train['manhattan_dist'] = X_train.apply(lambda row: manhattan(start_coord=(row['pickup_latitude'], \n                                                                             row['pickup_longitude']),\n                                                                end_coord=(row['dropoff_latitude'], \n                                                                           row['dropoff_longitude'])), axis=1)\n\nX_test['manhattan_dist'] = X_test.apply(lambda row: manhattan(start_coord=(row['pickup_latitude'], \n                                                                             row['pickup_longitude']),\n                                                                end_coord=(row['dropoff_latitude'], \n                                                                           row['dropoff_longitude'])), axis=1)\nX_train.head()","25843362":"%%time\n\nxgr = xgb.XGBRegressor(objective='reg:linear', n_estimators=50, max_depth=5, n_jobs=-1, random_state=42)\nxgr.fit(X_train.drop(columns=['pickup_datetime']), y_train)\n\ny_pred = xgr.predict(X_test.drop(columns=['pickup_datetime']))\n\nrsq_manhattan_xgb = r2_score(y_true=y_test, y_pred=y_pred)\nadj_rsq_manhattan_xgb = adjusted_r2_score(y_true=y_test, y_pred=y_pred, X_test=X_test)\nrmse_manhattan_xgb = mean_squared_error(y_true=y_test, y_pred=y_pred) ** 0.5\nprint('R-sq:', rsq_manhattan_xgb)\nprint('Adj. R-sq:', adj_rsq_manhattan_xgb)\nprint('RMSE:', rmse_manhattan_xgb)","b5010e2c":"**Visualizing pick  up coordinates**","5019f1f8":"**This model gives the better metrics than the previous one**","1a4559ff":"# Model after outlier removal","77fd5431":"**Visualize trip fare amount**","ae6688bb":"**Visualization of passenger count**","be9191cf":"**Thus we experiemented with the various features created and the accuracy was pretty much increased**","0d27462b":"# Baseline model with raw features","ec40e6b4":"**Instead of taking the latitude and logitude values, we will calculate the distance between two co ordinates and take as the feature**","e00d9f53":"**Fixed co ordinates**","c3c43d55":"# Data Preprocessing","93b21f57":"**Now all the features are within the given range**","3fd1982a":"# Manhattan distance as feature","fc69f1de":"**We can see that the values are positively skewed, some are of very high value and there are some negative values too. We have to remove those outliers**","89cfe7b9":"In a plane with  \ud835\udc5d1  at ( \ud835\udc651,\ud835\udc661 ) and  \ud835\udc5d2  at ( \ud835\udc652,\ud835\udc662 ),\n\nManhattan Distance, M = | \ud835\udc651\u2212\ud835\udc652 | + | \ud835\udc661\u2212\ud835\udc662 |","fe9cb043":"# Train test dataset","33e2f02e":"# Filtering the data","61061c6a":"# Exploratory data analysis","a1265a27":"**Things gained from the EDA:**\n\n**Fare amount should be positive and < 1000**\n\n**A typical taxi or cab can maybe take at the max 8 people and minimum 1 person**\n\n**Pickup and Dropoff Co-ordinates to be in the US bounding box**","f65750ef":"**In the above graph, there are some values like 200 passengers, so those are typically outlier**"}}