{"cell_type":{"a8ec9c6d":"code","790d6465":"code","978506db":"code","59ed3878":"code","506c8c24":"code","72df0206":"code","71d41fbb":"code","69506d64":"code","923af203":"code","1f79c5a5":"code","2a0b8c1d":"code","ed2f1b98":"code","358186cf":"code","610a8dfd":"code","04f48daf":"code","8782deb6":"code","a99f066d":"code","0608d4cf":"code","f3083295":"code","fa7ee635":"code","ed20d664":"code","cd633eeb":"code","6401ffef":"code","904953c5":"code","68588082":"code","e99de553":"code","3010520f":"code","b820187f":"code","7f88c38d":"code","a3ebd2fc":"code","fa1961e9":"code","bebd962a":"code","252689f0":"code","ef7544c0":"code","94e0c699":"code","fb3b5521":"code","b53c6116":"code","24c5a0e7":"code","fa4efe23":"code","c24a12c4":"code","1dbe3efe":"code","9ffa4611":"code","e1c2dbf4":"code","f519f9b5":"code","da759bc0":"code","49997fa9":"code","e061887b":"code","7630337e":"markdown","c6be7f3e":"markdown","d3f0bcc0":"markdown","5d8e4e27":"markdown","26a6baf4":"markdown","38104e33":"markdown","21ac18ab":"markdown","64d82861":"markdown","c1348c02":"markdown","c638c1e0":"markdown","fd4b3995":"markdown","1cfd2900":"markdown","0242a948":"markdown","342b25c3":"markdown","26f77e00":"markdown","126a6ead":"markdown","4082063f":"markdown"},"source":{"a8ec9c6d":"import numpy as np \nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline \nfrom wordcloud import WordCloud, STOPWORDS","790d6465":"tweets_df = pd.read_csv(\"..\/input\/metaverse-tweets\/Metaverse_tweets.csv\")","978506db":"print(f\"data shape: {tweets_df.shape}\")","59ed3878":"tweets_df.info()","506c8c24":"tweets_df.describe()","72df0206":"tweets_df.head()","71d41fbb":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","69506d64":"missing_data(tweets_df)","923af203":"def unique_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    uniques = []\n    for col in data.columns:\n        unique = data[col].nunique()\n        uniques.append(unique)\n    tt['Uniques'] = uniques\n    return(np.transpose(tt))","1f79c5a5":"unique_values(tweets_df)","2a0b8c1d":"def most_frequent_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    items = []\n    vals = []\n    for col in data.columns:\n        itm = data[col].value_counts().index[0]\n        val = data[col].value_counts().values[0]\n        items.append(itm)\n        vals.append(val)\n    tt['Most frequent item'] = items\n    tt['Frequence'] = vals\n    tt['Percent from total'] = np.round(vals \/ total * 100, 3)\n    return(np.transpose(tt))","ed2f1b98":"most_frequent_values(tweets_df)","358186cf":"def plot_count(feature, title, df, size=1, ordered=True):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    if ordered:\n        g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set3')\n    else:\n        g = sns.countplot(df[feature], palette='Set3')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()    ","610a8dfd":"plot_count(\"user_name\", \"User name\", tweets_df,4)","04f48daf":"plot_count(\"user_location\", \"User location\", tweets_df,4)","8782deb6":"plot_count(\"source\", \"Source\", tweets_df,4)","a99f066d":"stopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=stopwords,\n        max_words=50,\n        max_font_size=40, \n        scale=5,\n        random_state=1\n    ).generate(str(data))\n\n    fig = plt.figure(1, figsize=(10,10))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()","0608d4cf":"show_wordcloud(tweets_df['text'], title = 'Prevalent words in tweets')","f3083295":"india_df = tweets_df.loc[tweets_df.user_location==\"India\"]\nshow_wordcloud(india_df['text'], title = 'Prevalent words in tweets from India')","fa7ee635":"us_df = tweets_df.loc[tweets_df.user_location==\"United States\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from US')","ed20d664":"us_df = tweets_df.loc[tweets_df.user_location==\"United Kingdom\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from UK')","cd633eeb":"us_df = tweets_df.loc[tweets_df.user_location==\"Canada\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from Canada')","6401ffef":"india_df = tweets_df.loc[tweets_df.user_location==\"South Africa\"]\nshow_wordcloud(india_df['text'], title = 'Prevalent words in tweets from South Africa')","904953c5":"india_df = tweets_df.loc[tweets_df.user_location==\"Switzerland\"]\nshow_wordcloud(india_df['text'], title = 'Prevalent words in tweets from Switzerland')","68588082":"us_df = tweets_df.loc[tweets_df.user_location==\"London\"]\nshow_wordcloud(us_df['text'], title = 'Prevalent words in tweets from London')","e99de553":"def plot_features_distribution(features, title, df, isLog=False):\n    plt.figure(figsize=(12,6))\n    plt.title(title)\n    for feature in features:\n        if(isLog):\n            sns.distplot(np.log1p(df[feature]),kde=True,hist=False, bins=120, label=feature)\n        else:\n            sns.distplot(df[feature],kde=True,hist=False, bins=120, label=feature)\n    plt.xlabel('')\n    plt.legend()\n    plt.show()\n","3010520f":"tweets_df['hashtags'] = tweets_df['hashtags'].replace(np.nan, \"['None']\", regex=True)\ntweets_df['hashtags'] = tweets_df['hashtags'].apply(lambda x: x.replace('\\\\N',''))\ntweets_df['hashtags_count'] = tweets_df['hashtags'].apply(lambda x: len(x.split(',')))\nplot_features_distribution(['hashtags_count'], 'Hashtags per tweet (all data)', tweets_df)","b820187f":"tweets_df['hashtags_individual'] = tweets_df['hashtags'].apply(lambda x: x.split(','))\nfrom itertools import chain\nall_hashtags = set(chain.from_iterable(list(tweets_df['hashtags_individual'])))\nprint(f\"There are totally: {len(all_hashtags)}\")","7f88c38d":"show_wordcloud(tweets_df['hashtags_individual'], title = 'Prevalent words in hashtags')","a3ebd2fc":"country_df = pd.read_csv(\"..\/input\/iso-country-codes-global\/wikipedia-iso-country-codes.csv\")","fa1961e9":"country_df.columns = [\"country\", \"alpha2\", \"alpha3\", \"numeric\", \"iso\"]\ncountry_df.head()","bebd962a":"tweets_df['country'] = tweets_df['user_location']","252689f0":"tweets_df = tweets_df.merge(country_df, on=\"country\")","ef7544c0":"tweets_df.head(10)","94e0c699":"tw_add_df = tweets_df.groupby([\"country\", \"iso\", \"alpha3\"])['text'].count().reset_index()\ntw_add_df.columns = [\"country\", \"iso\", \"alpha3\", \"tweets\"]","fb3b5521":"import plotly.express as px\n\ndef plot_map(dd_df, title):\n    hover_text = []\n    for index, row in dd_df.iterrows():\n        hover_text.append((f\"country: {row['country']}<br>tweets: {row['tweets']}\\\n                          <br>country code: {row['iso']}<br>country alpha3: {row['alpha3']}\"))\n    dd_df['hover_text'] = hover_text\n\n    fig = px.choropleth(dd_df, \n                        locations=\"alpha3\",\n                        hover_name='hover_text',\n                        color=\"tweets\",\n                        projection=\"natural earth\",\n                        color_continuous_scale=px.colors.sequential.Plasma,\n                        width=900, height=700)\n    fig.update_geos(   \n        showcoastlines=True, coastlinecolor=\"DarkBlue\",\n        showland=True, landcolor=\"LightGrey\",\n        showocean=True, oceancolor=\"LightBlue\",\n        showlakes=True, lakecolor=\"Blue\",\n        showrivers=True, rivercolor=\"Blue\",\n        showcountries=True, countrycolor=\"DarkBlue\"\n    )\n    fig.update_layout(title = title, geo_scope=\"world\")\n    fig.show()    ","b53c6116":"plot_map(tw_add_df, \"Tweets per country (where country is specified)\")","24c5a0e7":"tweets_df['datedt'] = pd.to_datetime(tweets_df['date'])","fa4efe23":"tweets_df['year'] = tweets_df['datedt'].dt.year\ntweets_df['month'] = tweets_df['datedt'].dt.month\ntweets_df['day'] = tweets_df['datedt'].dt.day\ntweets_df['dayofweek'] = tweets_df['datedt'].dt.dayofweek\ntweets_df['hour'] = tweets_df['datedt'].dt.hour\ntweets_df['minute'] = tweets_df['datedt'].dt.minute\ntweets_df['dayofyear'] = tweets_df['datedt'].dt.dayofyear\ntweets_df['date_only'] = tweets_df['datedt'].dt.date","c24a12c4":"tweets_agg_df = tweets_df.groupby([\"date_only\"])[\"text\"].count().reset_index()\ntweets_agg_df.columns = [\"date_only\", \"count\"]","1dbe3efe":"def plot_time_variation(df, x='date_only', y='count', hue=None, size=1, title=\"\", is_log=False):\n    f, ax = plt.subplots(1,1, figsize=(4*size,3*size))\n    g = sns.lineplot(x=x, y=y, hue=hue, data=df)\n    plt.xticks(rotation=90)\n    if hue:\n        plt.title(f'{y} grouped by {hue} | {title}')\n    else:\n        plt.title(f'{y} | {title}')\n    if(is_log):\n        ax.set(yscale=\"log\")\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show() ","9ffa4611":"plot_time_variation(tweets_agg_df, title=\"Number of tweets \/ day of year\",size=3)","e1c2dbf4":"plot_count(\"dayofweek\", \"tweets \/ day of week\", tweets_df, size=3, ordered=False)","f519f9b5":"plot_count(\"dayofyear\", \"tweets \/ day of year\", tweets_df, size=3, ordered=False)","da759bc0":"plot_count(\"date_only\", \"tweets \/ date\", tweets_df,size=4, ordered=False)","49997fa9":"plot_count(\"hour\", \"tweets \/ hour\", tweets_df,size=4, ordered=False)","e061887b":"plot_count(\"minute\", \"tweets \/ minute\", tweets_df,size=5, ordered=False)","7630337e":"## Load data","c6be7f3e":"### User location","d3f0bcc0":"### User name","5d8e4e27":"### Extract country from location\n\nWe load the country list from the additional database we added to this Notebook. We also create a `country` column in the original dataset.","26a6baf4":"# Data exploration\n\n\n## Glimpse the data","38104e33":"### Most frequent values","21ac18ab":"### Time variation","64d82861":"## Visualize the data distribution","c1348c02":"### Unique values","c638c1e0":"### Text wordcloauds","fd4b3995":"### Tweet source","1cfd2900":"### Missing data","0242a948":"# Data preparation\n\n## Load packages","342b25c3":"<h1>Meta(verse) Tweets<\/h1>\n\n\n<img src=\"https:\/\/img.20mn.fr\/9deQxVRdR7WiXCeIYdEXwik\/830x532_mark-zuckerberg-face-avatar-metaverse-capture-video.jpg\" width=\"600\"><\/img>\n\n\n# Introduction\n\n\nThe Dataset we are using here is collected using Twitter API, **tweepy** and Python package.\n\n### Original notebook comes from Gabriel Preda here https:\/\/www.kaggle.com\/gpreda\/coronavirus-covid-19-tweets\/notebook. Please upvote him \n","26f77e00":"We merge the countries dataset with the tweets dataset.","126a6ead":"### Hashtags analysis","4082063f":"### Extract date and time features"}}