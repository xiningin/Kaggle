{"cell_type":{"373598a0":"code","57b78e3c":"code","0b32464d":"code","69592103":"code","ffb01fd6":"code","c76fde5c":"code","4a725eae":"code","91637639":"code","dca7ff76":"code","e01bc4e3":"code","7f91293a":"code","725049e3":"code","36ef27e0":"code","7b948b55":"code","29a4d133":"code","c047da32":"code","e361f066":"code","ba5d627d":"code","e55eb1b3":"code","1630cf85":"markdown","04e7c7bf":"markdown","54972da1":"markdown","6c36e36a":"markdown"},"source":{"373598a0":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression,LogisticRegression,Ridge,Lasso,ElasticNet\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier","57b78e3c":"data=pd.read_csv(\"..\/input\/dissolved-oxygen-prediction-in-river-water\/train.csv\")\ndata","0b32464d":"data.info()","69592103":"data.drop(\"Id\",axis=1,inplace=True)","ffb01fd6":"data.isna().sum()","c76fde5c":"null_value=data.columns[data.isna().sum() >100]\ndata.drop(null_value,axis=1,inplace=True)","4a725eae":"data","91637639":"data.isnull().sum()","dca7ff76":"print(\"column missing value :\", (data.isnull().sum(axis=0) !=0) .sum() )\nprint(\"row missing value :\", (data.isnull().sum(axis=1)!=0 ).sum() )","e01bc4e3":"data.dropna(axis=0,inplace=True)","7f91293a":"data.isnull().sum().sum()","725049e3":"data","36ef27e0":"data.columns","7b948b55":"data['target'].mean()","29a4d133":"data_B=data.copy()\n\ndata_B['target'] = data_B['target'].apply(lambda value : 1 if value >=9 else 0)","c047da32":"#splitting\ny=data[\"target\"].copy()\nX=data.drop(\"target\",axis=1).copy() \n    \n#splitting for binary classification\nY=data_B[\"target\"].copy()\n\n    \n#scler\nscaler=StandardScaler()\nX=pd.DataFrame(scaler.fit_transform(X),columns=X.columns)\n    \n    \n#spliting train and test\nX_train,X_test,y_train,y_test =train_test_split(X,y, train_size=0.70,shuffle=True,random_state=123)\nX_train,X_test,Y_train,Y_test =train_test_split(X,Y, train_size=0.70,shuffle=True,random_state=123)","e361f066":"X_train","ba5d627d":"print(\"data:\", y_train.unique())\nprint(\"data_B:\",Y_train.unique())","e55eb1b3":"models ={\n    \"LinearRegression :\":LinearRegression(),\n    \"Ridge            :\":Ridge(),\n    \"Lasso            :\":Lasso(),\n    \"ElasticNet       :\":ElasticNet()\n}\n\nmodels_1={\n    \"LogisticRegression        \":LogisticRegression(),      \n    \"DecisionTreeClassifier    \":DecisionTreeClassifier(),\n    \"RandomForestClassifier    \":RandomForestClassifier(),\n    \"GradientBoostingClassifier\":GradientBoostingClassifier()\n}\n\n#Training Multiclass\nfor model in models.values():\n    model.fit(X_train,y_train)\n    \nprint (\"Model R^2 Scores: \\n------------------------\")\nfor name, model in models.items():\n    print(name+ \": {:.2f}%\".format(model.score(X_test,y_test)*100))\n    \n#Training binary  \nfor name,model in models_1.items():\n    model.fit(X_train,Y_train)\n\nprint(' ')\nprint('Binary Classification \\n--------------------------------')\n#Testing binary \nfor name,model in models_1.items():\n    print(name+ \": {:.2f}%\".format(model.score(X_test,Y_test)*100))\n    ","1630cf85":"# For binary classification","04e7c7bf":"# Training","54972da1":"# Preprocessing","6c36e36a":"# Dissolved Oxygen Prediction\n\nThis dataset has data of the 5 indicators of river water quality from 8 consecutive stations of the state water monitoring system. It's should predict the value in the eighth station by the first seven stations. The numbering of stations in the dataset is done from the target station upstream, ie closest to it - first, upstream - second, etc."}}