{"cell_type":{"07b4ab96":"code","a8b61925":"code","26d00ef1":"code","7e3174b3":"code","4f71d7b1":"code","3c82ecd9":"code","2559ce93":"code","698ed88a":"code","bcad12ca":"code","cd96301e":"code","b248020d":"code","42e209f5":"code","c7298b4c":"code","77b54e56":"code","e77e80c3":"code","a8567759":"code","0559a32d":"code","e7bbacc0":"code","c80bacd4":"code","9e8322a2":"code","fa6f4e97":"code","e4df57be":"code","90d14d6f":"code","56b11504":"code","fd0bc583":"code","4fcb3a2d":"code","40d80e6f":"code","8e2082bc":"code","8013b46d":"code","644d5b41":"code","3e7c3330":"code","4fb3d8ec":"code","e8f8f229":"code","c3e81c00":"code","51838673":"code","5278b2a0":"code","95a5d3cc":"code","151c43f8":"code","59d1e11e":"code","947e37c2":"code","bdcb1693":"code","28ec3cfa":"code","2a047822":"code","d99c6362":"code","688ecfaa":"code","9ee3d73e":"code","e6effe2e":"code","5e36f975":"code","a1d817c6":"code","087eae39":"code","f3438afa":"code","2356302a":"markdown","36101f1b":"markdown","43ab6ed9":"markdown","e7597c8d":"markdown","12ec52e5":"markdown","4dc51052":"markdown","8969e335":"markdown","bac43629":"markdown","ee8e5ef1":"markdown","fb76177c":"markdown","26bd71c4":"markdown","37293fa2":"markdown","60369aaf":"markdown","925bfde0":"markdown","2a718510":"markdown","4a5fc2c8":"markdown","09d89674":"markdown","ab30a6bf":"markdown","1000dae3":"markdown","e1d486a1":"markdown","8bc91d25":"markdown","7e9dd525":"markdown","83247c52":"markdown","3105da7f":"markdown","c570c687":"markdown","27b09413":"markdown","ca6d5e31":"markdown","31266779":"markdown","0d1e2678":"markdown","93988834":"markdown","ec0a5060":"markdown","d69a29be":"markdown","0af2879e":"markdown","2b4cdc48":"markdown","ebc02179":"markdown","4ed8d1ba":"markdown"},"source":{"07b4ab96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a8b61925":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain.shape, test.shape","26d00ef1":"train.head()","7e3174b3":"train.isna().sum().sort_values()","4f71d7b1":"for col in ['Alley','FireplaceQu','Fence','MiscFeature','PoolQC']:\n    train[col].fillna('NA', inplace=True)\n    test[col].fillna('NA', inplace=True)\n    \ntrain['LotFrontage'].fillna(train[\"LotFrontage\"].value_counts().to_frame().index[0], inplace=True)\ntest['LotFrontage'].fillna(test[\"LotFrontage\"].value_counts().to_frame().index[0], inplace=True)\n\ntrain[['GarageQual','GarageFinish','GarageYrBlt','GarageType','GarageCond']].isna().head(7)\nfor col in ['GarageQual','GarageFinish','GarageYrBlt','GarageType','GarageCond']:\n    train[col].fillna('NA',inplace=True)\n    test[col].fillna('NA',inplace=True)\n\nfor col in ['BsmtQual','BsmtCond','BsmtFinType1','BsmtFinType2','BsmtExposure']:\n    train[col].fillna('NA',inplace=True)\n    test[col].fillna('NA',inplace=True)\n\ntrain['Electrical'].fillna('SBrkr',inplace=True)\n\nmissings = ['GarageCars','GarageArea','KitchenQual','Exterior1st','SaleType','TotalBsmtSF','BsmtUnfSF','Exterior2nd',\n            'BsmtFinSF1','BsmtFinSF2','BsmtFullBath','Functional','Utilities','BsmtHalfBath','MSZoning']\n\nnumerical=['GarageCars','GarageArea','TotalBsmtSF','BsmtUnfSF','BsmtFinSF1','BsmtFinSF2','BsmtFullBath','BsmtHalfBath']\ncategorical = ['KitchenQual','Exterior1st','SaleType','Exterior2nd','Functional','Utilities','MSZoning']\n\n# using Imputer class of sklearn libs.\nfrom sklearn.preprocessing import Imputer\nimputer = Imputer(strategy='median',axis=0)\nimputer.fit(test[numerical] + train[numerical])\ntest[numerical] = imputer.transform(test[numerical])\ntrain[numerical] = imputer.transform(train[numerical])\n\nfor i in categorical:\n    train[i].fillna(train[i].value_counts().to_frame().index[0], inplace=True)\n    test[i].fillna(test[i].value_counts().to_frame().index[0], inplace=True)    \n\ntrain[train['MasVnrType'].isna()][['SalePrice','MasVnrType','MasVnrArea']]\n\ntrain[train['MasVnrType']=='None']['SalePrice'].median()\ntrain[train['MasVnrType']=='BrkFace']['SalePrice'].median()\ntrain[train['MasVnrType']=='Stone']['SalePrice'].median()\ntrain[train['MasVnrType']=='BrkCmn']['SalePrice'].median()\n\ntrain['MasVnrArea'].fillna(181000,inplace=True)\ntest['MasVnrArea'].fillna(181000,inplace=True)\n\ntrain['MasVnrType'].fillna('NA',inplace=True)\ntest['MasVnrType'].fillna('NA',inplace=True)\n\nprint(train.isna().sum().sort_values()[-2:-1])\nprint(test.isna().sum().sort_values()[-2:-1])","3c82ecd9":"int64 =[]\nobjects = []\nfor col in train.columns.tolist():\n    if np.dtype(train[col]) == 'int64' or np.dtype(train[col]) == 'float64':\n        int64.append(col)\n    else:\n        objects.append(col)                      #here datatype is 'object'\nlen(int64), len(objects)        ","2559ce93":"train[int64].head()","698ed88a":"continues_int64_cols = ['LotArea', 'LotFrontage', 'MasVnrArea','BsmtFinSF2','BsmtFinSF1','BsmtUnfSF','TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF',\n                  'GrLivArea','GarageArea','WoodDeckSF','OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea','MiscVal']\ncategorical_int64_cols=[]\nfor i in int64:\n    if i not in continues_int64_cols:\n        categorical_int64_cols.append(i)\n\nprint(\"continues int64 columns\",len(continues_int64_cols))\nprint(\"categorical int64 columns\",len(categorical_int64_cols)) \ncontinues_int64_cols, categorical_int64_cols","bcad12ca":"def barplot(X,Y):\n    plt.figure(figsize=(7,7))\n    sns.barplot(x=X, y=Y)\n    plt.show()\ndef scatter(X,Y):\n    plt.figure(figsize=(7,7))\n    sns.scatterplot(alpha=0.4,x=X, y=Y)\n    plt.show()\ndef hist(X):\n    plt.figure(figsize=(7,7))\n    sns.distplot(X, bins=40, kde=True)\n    plt.show()\ndef box(X):\n    plt.figure(figsize=(3,7))\n    sns.boxplot(y=X)\n    plt.show() \ndef line(X,Y):\n    plt.figure(figsize=(7,7))    \n    sns.lineplot(x=X, y=Y,color=\"coral\")\n    plt.show() ","cd96301e":"pd.plotting.scatter_matrix(train[continues_int64_cols[:5]],diagonal='kde', figsize=(10,10))\nplt.show()","b248020d":"# used log to see all small values\nhist(np.log(train['MasVnrArea']+1))","42e209f5":"hist(np.log(train['BsmtFinSF2']+1))","c7298b4c":"print(train['MasVnrArea'].value_counts())\nprint(train['BsmtFinSF2'].value_counts())","77b54e56":"train['MasVnrArea'] = train['MasVnrArea'].apply(lambda row: 1.0 if row>0.0 else 0.0)\ntrain['BsmtFinSF2'] = train['BsmtFinSF2'].apply(lambda row: 1.0 if row>0.0 else 0.0)","e77e80c3":"binary_cate_int64_cols = []\nbinary_cate_int64_cols.append('MasVnrArea')\nbinary_cate_int64_cols.append('BsmtFinSF2')","a8567759":"pd.plotting.scatter_matrix(train[continues_int64_cols[5:11]],diagonal='kde', figsize=(10,10))\nplt.show()","0559a32d":"train['LowQualFinSF'].value_counts()","e7bbacc0":"train['LowQualFinSF'] = train['LowQualFinSF'].apply(lambda row: 1.0 if row>0.0 else 0.0)","c80bacd4":"binary_cate_int64_cols.append('LowQualFinSF')","9e8322a2":"pd.plotting.scatter_matrix(train[continues_int64_cols[11:14]],diagonal='kde', figsize=(8,8))\nplt.show()","fa6f4e97":"pd.plotting.scatter_matrix(train[continues_int64_cols[14:]],diagonal='kde', figsize=(11,11))\nplt.show()","e4df57be":"for i in continues_int64_cols[14:]:\n    train[i] = train[i].apply(lambda row: 1.0 if row>0.0 else 0.0)\n    binary_cate_int64_cols.append(i)\n\nfor j in binary_cate_int64_cols:\n    if j in continues_int64_cols:\n        continues_int64_cols.remove(j)        #these special columns removing from the continues_int64_cols\n        \nprint(len(continues_int64_cols))   \nprint(len(binary_cate_int64_cols))        \ncontinues_int64_cols, binary_cate_int64_cols    ","90d14d6f":"fig, axes = plt.subplots(3, 3, figsize=(20,11))\nm=0\nfor i in range(3):\n    for j in range(3):\n        if m !=8:              # subplots are 9 and columns we have is 8 so ignoring last box, thats why,i apllied this condition\n            sns.barplot(train[binary_cate_int64_cols[m]], train['SalePrice'],ax=axes[i,j])\n            m+=1\nplt.show()","56b11504":"# we changed values of train only, here for test set\nfor i in binary_cate_int64_cols:\n    test[i] = test[i].apply(lambda row: 1.0 if row>0.0 else 0.0)","fd0bc583":"test[binary_cate_int64_cols].head(6)","4fcb3a2d":"train[categorical_int64_cols].head()","40d80e6f":"plt.figure(figsize=(15,7))\ntest.groupby('YearBuilt')['YearBuilt'].count().plot()\ntrain.groupby('YearBuilt')['YearBuilt'].count().plot()\nplt.legend(['test','train'])","8e2082bc":"plt.figure(figsize=(15,7))\ntest.groupby('YrSold')['YrSold'].count().plot()\ntrain.groupby('YrSold')['YrSold'].count().plot()\nplt.legend(['test','train'])","8013b46d":"plt.figure(figsize=(15,7))\ntest.groupby('YearRemodAdd')['YearRemodAdd'].count().plot()\ntrain.groupby('YearRemodAdd')['YearRemodAdd'].count().plot()\nplt.legend(['test','train'])","644d5b41":"fig, axes = plt.subplots(4, 3, figsize=(20,15))\nsns.barplot(train[categorical_int64_cols[1]], train['SalePrice'],ax=axes[0,0])\nsns.barplot(train[categorical_int64_cols[2]], train['SalePrice'],ax=axes[0,1])\nsns.barplot(train[categorical_int64_cols[3]], train['SalePrice'],ax=axes[0,2])\nsns.barplot(train[categorical_int64_cols[6]], train['SalePrice'],ax=axes[1,0])\nsns.barplot(train[categorical_int64_cols[7]], train['SalePrice'],ax=axes[1,1])\nsns.barplot(train[categorical_int64_cols[8]], train['SalePrice'],ax=axes[1,2])\nsns.barplot(train[categorical_int64_cols[9]], train['SalePrice'],ax=axes[2,0])\nsns.barplot(train[categorical_int64_cols[10]], train['SalePrice'],ax=axes[2,1])\nsns.barplot(train[categorical_int64_cols[11]], train['SalePrice'],ax=axes[2,2])\nsns.barplot(train[categorical_int64_cols[12]], train['SalePrice'],ax=axes[3,0])\nsns.barplot(train[categorical_int64_cols[13]], train['SalePrice'],ax=axes[3,1])\nsns.barplot(train[categorical_int64_cols[14]], train['SalePrice'],ax=axes[3,2])\nplt.show()","3e7c3330":"barplot(train[categorical_int64_cols[15]], train['SalePrice'])","4fb3d8ec":"train[objects].head()","e8f8f229":"fig, axes = plt.subplots(4, 4, figsize=(20,15))\nm=0\nfor i in range(4):\n    for j in range(4):\n        sns.barplot(train[objects[m]], train['SalePrice'], ax=axes[i,j])\n        m+=1\nplt.show()        ","c3e81c00":"fig, axes = plt.subplots(4, 4, figsize=(20,15))\nm=16\nfor i in range(4):\n    for j in range(4):\n        sns.barplot(train[objects[m]], train['SalePrice'], ax=axes[i,j])\n        m+=1\nplt.show()        ","51838673":"ordinal_categorical_cols =[]\nordinal_categorical_cols.extend(['ExterQual','ExterCond','BsmtQual','BsmtCond','BsmtExposure','HeatingQC','KitchenQual'])","5278b2a0":"fig, axes = plt.subplots(3, 4, figsize=(20,15))\nm=32\nfor i in range(3):\n    for j in range(4):\n        sns.barplot(train[objects[m]], train['SalePrice'], ax=axes[i,j])\n        m+=1\nplt.show()        ","95a5d3cc":"ordinal_categorical_cols.extend(['FireplaceQu', 'GarageQual','GarageCond','PoolQC'])","151c43f8":"plt.figure(figsize=(15,7))\ntest.groupby('GarageYrBlt')['GarageYrBlt'].count().plot()\ntrain.groupby('GarageYrBlt')['GarageYrBlt'].count().plot()\nplt.legend(['test','train'])","59d1e11e":"for i in ordinal_categorical_cols:\n    if i in objects:\n        objects.remove(i)            # removing ordinal features from the objects\nlen(objects), len(ordinal_categorical_cols)        ","947e37c2":"print('ordinal categorical cols ',len(ordinal_categorical_cols))\nprint('continues int64 cols ',len(continues_int64_cols))             \nprint('numeric categorical int64 cols ',len(categorical_int64_cols))\nprint('objects(text) categorical ',len(objects) ) \nprint('binary int64 categorical ',len(binary_cate_int64_cols) )                   ","bdcb1693":"# removinf 'Id' and 'SalePrice'\ncategorical_int64_cols.remove('Id')\ncategorical_int64_cols.remove('SalePrice')","28ec3cfa":"len(categorical_int64_cols + objects)","2a047822":"train_objs_num = len(train)\ndataset = pd.concat(objs=[train[categorical_int64_cols + objects], test[categorical_int64_cols+ objects]], axis=0)\ndataset_preprocessed = pd.get_dummies(dataset.astype(str), drop_first=True)\ntrain_nominal_onehot = dataset_preprocessed[:train_objs_num]\ntest_nominal_onehot= dataset_preprocessed[train_objs_num:]\ntrain_nominal_onehot.shape, test_nominal_onehot.shape","d99c6362":"train_nominal_onehot.head()","688ecfaa":"test_nominal_onehot.head()","9ee3d73e":"# train[ordinal_categorical_cols].head()\nfor i in ordinal_categorical_cols:\n    print(train[i].value_counts())","e6effe2e":"train['BsmtExposure'] = train['BsmtExposure'].map({'Gd':4, 'Av':3, 'Mn':2, 'No':1,'NA':0})\ntest['BsmtExposure'] = test['BsmtExposure'].map({'Gd':4, 'Av':3, 'Mn':2, 'No':1,'NA':0})\n\norder = {'Ex':5,\n        'Gd':4, \n        'TA':3, \n        'Fa':2, \n        'Po':1,\n        'NA':0 }\nfor i in ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'HeatingQC', 'KitchenQual', 'FireplaceQu', 'GarageQual', 'GarageCond', 'PoolQC']:\n    train[i] = train[i].map(order)\n    test[i] = test[i].map(order)\ntest[ordinal_categorical_cols].head()         ","5e36f975":"train[ordinal_categorical_cols].head()         ","a1d817c6":"X = pd.concat([train[ordinal_categorical_cols], train[continues_int64_cols], train[binary_cate_int64_cols], train_nominal_onehot], axis=1)\ny = train['SalePrice']\ntest_final = pd.concat([test[ordinal_categorical_cols], test[continues_int64_cols], test[binary_cate_int64_cols], test_nominal_onehot], axis=1)","087eae39":"X.shape, y.shape, test_final.shape","f3438afa":"X.to_csv('new_train.csv',index=False)\ntest_final.to_csv('new_test.csv',index=False)","2356302a":"for each columns scatter plot will take more space, so used scatter_matrix","36101f1b":"* here we can see that , ExterQual','ExterCond'....(see above) are ordinal categorical features so i am gonna used different strategy them.\n1.  what is ordinal categorical feature ?: [Click Here](http:\/\/towardsdatascience.com\/understanding-feature-engineering-part-2-categorical-data-f54324193e63)","43ab6ed9":"# Feature extraction","e7597c8d":"### I made a separate kernels for understanding NaNs and choosing best filling NaNs strategy, you can see here :[house-price-fillna-strategy](http:\/\/www.kaggle.com\/ashishbarvaliya\/house-price-fillna-strategy), here i am not gonna repeat.","12ec52e5":"all columns looks almost cool, but 'MasVnrArea' and 'BsmtFinSF2' has interesting values, let's explore it\n### 'MasVnrArea' and 'BsmtFinSF2'","4dc51052":"values different but in same range so no worry\n### 'YearRemodAdd'","8969e335":"the distribution of years is almost same for test and train sets, so no worry","bac43629":"## Thank you, upvote please","ee8e5ef1":"I used get_dummies for onehot of all categorical columns ","fb76177c":"look cool, moving forward","26bd71c4":"* here 'GarageYrBlt' is contains years , lets visualize","37293fa2":"> below are the ordinal feature","60369aaf":"# Filling NaNs","925bfde0":"#### categorical_int64_cols contains categorical feature but as int64 datatype(or float)\n#### objects contains categorical feature but as str datatype\n### OneHot","2a718510":"### continues columns part done , now let's exploring categorical of int64 columns","4a5fc2c8":" ## 3) Ordinal Feature \n       Ex\tExcellent (100+ inches)\t\n       Gd\tGood (90-99 inches)\n       TA\tTypical (80-89 inches)\n       Fa\tFair (70-79 inches)\n       Po\tPoor (<70 inches\n       NA\tNo Basement\n### order : Ex > Gd > TA > Fa > Po > NA \n#### order for 'BsmtExplosure' : Gd > Av > Mn > No > NA  \n       Gd\tGood Exposure\n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n       Mn\tMimimum Exposure\n       No\tNo Exposure\n       NA\tNo Basement","09d89674":"look good, moveing forward[](http:\/\/)","ab30a6bf":"### Here some functions of plot created. we might need.","1000dae3":"here distribution of 'LowQualFinSF' looks similar to above 'MasVnrArea' columns , so used same strategy\n### 'LowQualFinSF'","e1d486a1":"around 90% values has to 0.0 values so i am converting continues to categotrical columns,for all value > 0.0 in class 1 ","8bc91d25":"there are 44 columns in objects, thats why i am using subplots to visualize them all","7e9dd525":"### visualizing remaining colunns of categorical_int64","83247c52":"the distribution of years is almost same for test and train sets, so no worry\n### 'YrSold'","3105da7f":"separating text columns and numerical columns for better understanding.","c570c687":"great distribution, moving forward","27b09413":"### ploting binary_cate_int64_cols","ca6d5e31":"distribution of all columns looks same as 'MasVnrArea', so....","31266779":"in the dataset folder one file 'data_description.txt' is available. in the file you can see that below continues columns. i am separating continues and categorical columns. ","0d1e2678":"looks great, lets exploring objects columns(text)\n## 2) Exploring objects columns(text categorical)","93988834":"looks cool. lets combine all the features[](http:\/\/)","ec0a5060":"almost same distribution for test and train","d69a29be":"# House Price : Feature Extraction Strategy\n### exploring all the columns and preparing dataset for modeling\n*you find anything helpful, please upvote*","0af2879e":"* total = 81, means no worry","2b4cdc48":"we have tree columns which has values as Year, lets visualize\n### 'YearBuilt'","ebc02179":"collecting data","4ed8d1ba":" ## 1) Exploring Numerical columns (int64)"}}