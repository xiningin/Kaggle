{"cell_type":{"310a4fe4":"code","32ef088f":"code","fd808f70":"code","51457646":"code","e3bdd0c1":"code","28ef5939":"code","1cfa074d":"code","ec8a9185":"code","28fb1201":"code","7e30a27a":"code","7fd8530a":"code","42420c85":"code","b8909379":"code","7066c7e0":"code","6fc779ff":"code","cba4f473":"code","9b1a24a6":"code","5347ef36":"code","4c03bb65":"code","b09e0452":"code","9fce2457":"code","cdb613b7":"code","67db0dce":"markdown","d8fcc650":"markdown","7b4ae19f":"markdown","009ce542":"markdown","1705e28f":"markdown","3fa7c5d6":"markdown","4dcd1d91":"markdown","6b8aa1ec":"markdown","c5725ee8":"markdown","65c00e15":"markdown"},"source":{"310a4fe4":"import tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Conv2D,MaxPool2D,Dense,Flatten,BatchNormalization,Dropout,MaxPooling2D\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","32ef088f":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm","fd808f70":"train_dir = \"..\/input\/movie-posters-by-genre\/Posters\/Posters_Train\"\nvalidation_dir = \"..\/input\/movie-posters-by-genre\/Posters\/Posters_Validation\"\n\nos.listdir(train_dir)\n\nindex = []\nx_list =[]\ny_list =[]\n\nx_list = np.sort(os.listdir(train_dir))\n\nfor i in range(len(os.listdir(train_dir))):\n      index.append(i)\n      y_list.append(len(os.listdir(os.path.join(train_dir, str(x_list[i])))))\n\n\nprint(x_list)\nprint(y_list)\n\nplt.bar(index,y_list,align='center',alpha=0.5)\nplt.xticks(index,x_list,rotation='vertical')\nplt.ylabel(\"Number of Movies\")\nplt.title(\"Number of Movies by Genre\")\nplt.show()","51457646":"batch_size = 500\nval_batch_size = 500\nepochs = 1\nIMG_HEIGHT = 300\nIMG_WIDTH = 300","e3bdd0c1":"train_image_generator = ImageDataGenerator(rescale=1.\/255) # Generator for our training data\nvalidation_image_generator = ImageDataGenerator(rescale=1.\/255) # Generator for our validation data","28ef5939":"train_data_gen = train_image_generator.flow_from_directory(batch_size=batch_size,\n                                                           directory=train_dir,\n                                                           shuffle=True,\n                                                           target_size=(IMG_HEIGHT, IMG_WIDTH),\n                                                           class_mode='categorical')  ","1cfa074d":"val_data_gen = validation_image_generator.flow_from_directory(batch_size=val_batch_size,\n                                                              directory=validation_dir,\n                                                              target_size=(IMG_HEIGHT, IMG_WIDTH),\n                                                              class_mode='categorical')","ec8a9185":"sample_training_images, sample_training_labels = next(train_data_gen)","28fb1201":"sample_training_labels","7e30a27a":"# This function will plot images in the form of a grid with 1 row and 5 columns where images are placed in each column.\ndef plotImages(images_arr):\n    fig, axes = plt.subplots(1, 5, figsize=(20,20))\n    axes = axes.flatten()\n    for img, ax in zip( images_arr, axes):\n        ax.imshow(img)\n        ax.axis('off')\n    plt.tight_layout()\n    plt.show()    ","7fd8530a":"plotImages(sample_training_images[:5])\nprint(sample_training_labels[:5])\n\ndf = pd.read_csv('..\/input\/movie-posters-by-genre\/MovieGenre.csv')\nclasses = df.columns[2:]\n\nprint(classes)","42420c85":"sample_training_images[0].shape","b8909379":"model = Sequential([\n    Conv2D(16, 3, padding='same', activation='relu', input_shape=(IMG_HEIGHT, IMG_WIDTH ,3)),\n    MaxPooling2D(),\n    Conv2D(32, 3, padding='same', activation='relu'),\n    MaxPooling2D(),\n    Conv2D(64, 3, padding='same', activation='relu'),\n    MaxPooling2D(),\n    #### ANSWER ####\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dense(19, activation='sigmoid')\n    ################\n])","7066c7e0":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.BinaryCrossentropy(),\n              metrics=['accuracy', tf.keras.metrics.Recall()])","6fc779ff":"model.summary()","cba4f473":"early_stop = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=2)","9b1a24a6":"history = model.fit_generator(\n    train_data_gen,\n    steps_per_epoch=5,\n    epochs=epochs,\n    validation_data=val_data_gen,\n    validation_steps=5,\n    callbacks=[early_stop]\n)","5347ef36":"def plotLearningCurve(history,epochs):\n  epochRange = range(1,epochs+1)\n  plt.plot(epochRange,history.history['accuracy'])\n  plt.plot(epochRange,history.history['val_accuracy'])\n  plt.title('Model Accuracy')\n  plt.xlabel('Epoch')\n  plt.ylabel('Accuracy')\n  plt.legend(['Train','Validation'],loc='best')\n  plt.show()\n\n  plt.plot(epochRange,history.history['loss'])\n  plt.plot(epochRange,history.history['val_loss'])\n  plt.title('Model Loss')\n  plt.xlabel('Epoch')\n  plt.ylabel('Loss')\n  plt.legend(['Train','Validation'],loc='best')\n  plt.show()\n","4c03bb65":"plotLearningCurve(history,epochs)","b09e0452":"def ImagePrediction(img_name):\n    img = image.load_img('..\/input\/movie-posters-by-genre\/'+ str(img_name) +'.jpg',target_size=(IMG_HEIGHT,IMG_WIDTH,3))\n    print(\"Prediction\")\n    print(\"\")\n    plt.imshow(img)\n    img = image.img_to_array(img)\n    img = img\/255.0\n    img = img.reshape(1,IMG_HEIGHT,IMG_WIDTH,3)\n    classes = df.columns[2:]\n    y_pred = model.predict(img)\n    #print(y_pred)\n    top3=np.argsort(y_pred[0])[:-4:-1]\n    for i in range(3):\n      print(\"Score : \",y_pred[0][top3[i]])\n      print(\"Prediction\",i+1,\":\",classes[top3[i]])\n    print(\"\")\n    print(\"Answer\")  \n    print(df.loc[df[\"imdbId\"] == img_name, [\"Genre\"]])\n    \ndef ImagePrediction_test(img_name):\n    img = image.load_img('..\/input\/movie-posters-by-genre\/'+ str(img_name) +'.jpg',target_size=(IMG_HEIGHT,IMG_WIDTH,3))\n    print(\"Prediction\")\n    print(\"\")\n    plt.imshow(img)\n    img = image.img_to_array(img)\n    img = img\/255.0\n    img = img.reshape(1,IMG_HEIGHT,IMG_WIDTH,3)\n    classes = df.columns[2:]\n    y_pred = model.predict(img)\n    print(y_pred)\n    top3=np.argsort(y_pred[0])[:-4:-1]\n    for i in range(3):\n      print(\"Score : \",y_pred[0][top3[i]])\n      print(\"Prediction\",i+1,\":\",classes[top3[i]])\n    print(\"\")  ","9fce2457":"img_name = \"tt0088247\"\n#..\/input\/movie-posters-by-genre\/tt0088247.jpg\nImagePrediction_test(img_name)","cdb613b7":"img_name = \"tt0099612\"\nImagePrediction_test(img_name)","67db0dce":"# \uc0d8\ud50c \ucd94\ucd9c","d8fcc650":"# DEFINE BATCH SIZE AND EPOCH AND IMG_SIZE\n\nCPU \uba54\ubaa8\ub9ac \uad00\uacc4\ub85c epochs\ub294 1\ub85c \uc124\uc815\ud568.","7b4ae19f":"# \uc2e4\uc81c \ud3ec\uc2a4\ud130\ub97c \uc774\uc6a9\ud55c \uc608\uce21","009ce542":"# \uc0d8\ud50c\ub4e4\uacfc \ud074\ub798\uc2a4 \ub370\uc774\ud130 \ud615\ud0dc","1705e28f":"# \ubaa8\ub378 \ud559\uc2b5","3fa7c5d6":"# \ubcf8 \uc790\ub8cc\ub294 2020 LG CNS AI \uc2e4\uc804 workshop 4\ucc28\uc218 \ud504\ub85c\uc81d\ud2b8 \uc0b0\ucd9c\ubb3c \uc785\ub2c8\ub2e4. \n\n# \ubaa8\ub378 \ud559\uc2b5\uc5d0 \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ub85c\ub529\n# Importing Neccessary Libraries","4dcd1d91":"# \ud559\uc2b5 \uacb0\uacfc \ubcf4\uae30","6b8aa1ec":"# DEFINE IMAGE GENERATOR\n\n\uc218\ub9cc\uc7a5\uc758 \uc774\ubbf8\uc9c0\ub97c \ud55c\ubc88\uc5d0 \uba54\ubaa8\ub9ac\uc5d0 \uc5c5\ub85c\ub4dc\ud558\uc5ec \ud559\uc2b5\ud560 \uc218 \uc5c6\uc73c\ubbc0\ub85c Image Generator\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubc30\uce58\uc0ac\uc774\uc988\ub9cc\ud07c \ub79c\ub364\ud558\uac8c \uc774\ubbf8\uc9c0\ub97c \ucde8\ud558\uc5ec \uc0ac\uc6a9\ud55c\ub2e4.","c5725ee8":"# Train Set\uacfc Validation Set\uc744 \uad6c\ubd84\n\n# Reading the Dataset\n\n# Simple EDA","65c00e15":"# \uc774\ubbf8\uc9c0 \ucc28\uc6d0 \ud655\uc778"}}