{"cell_type":{"c1a79d8d":"code","086c52ad":"code","fdd2fc96":"code","d49f1e01":"code","ec7d1c8e":"code","5c81e18f":"code","096cd104":"code","ea6a91d2":"code","46b99795":"code","c11a277d":"code","4cb7d604":"code","f752a7e2":"code","537902ba":"code","29cad959":"code","a54a2d82":"code","c0ab8522":"code","bdf6efb4":"code","111ce82a":"code","58fdc6e0":"code","c643847b":"code","a09b81c9":"code","09ce08b6":"code","a75404b3":"code","73ed9738":"code","2307171d":"code","c68a7ec1":"code","fdda3469":"code","654c2577":"code","7cb3ed6a":"code","9bef22b9":"code","a31153ce":"code","eede7c17":"code","7287901a":"code","6d89bfa3":"code","3b6bfeb7":"code","96484430":"code","ac38d705":"code","42e08861":"code","68d56ff0":"code","1ad5e59d":"code","48e7fb2c":"code","9a907395":"code","fa15630f":"code","fde6695b":"code","17c609e0":"code","6a9c5c39":"code","1f7defe1":"code","b6e9d267":"code","d2bc7744":"code","a559be03":"code","cbe52113":"code","03d59b89":"code","ed2e8494":"code","238ae146":"code","f684b190":"code","9ab47259":"code","99c1d46d":"code","f9bf8340":"code","3acf5b08":"code","6f6e33a6":"code","46482c15":"code","acacf713":"code","910f1427":"code","2961fd9e":"code","85a15e5a":"code","3bab6434":"code","fa5d0a0f":"code","8e83ab36":"code","a402c02c":"code","e1fbe49e":"code","46cfb9b3":"code","c4390232":"code","2da67ace":"code","13423646":"code","e983905c":"code","9073e5c5":"code","dabd8405":"code","d359029c":"code","3393d96c":"code","cd8ed95a":"code","2298d2ca":"code","4dfbb270":"markdown","755383e1":"markdown","c5d2d43d":"markdown","9c025172":"markdown","faf3a398":"markdown","f28e5636":"markdown","f02fb57a":"markdown","4afbf7dd":"markdown","c6e362be":"markdown","2d58db8a":"markdown","3612f96a":"markdown","b73e0620":"markdown","2c1171df":"markdown","0ee275d1":"markdown","cfeca99c":"markdown","c7680640":"markdown","7d978830":"markdown","dc1f84cb":"markdown","9c14b95a":"markdown","c30651e3":"markdown","0bf1cfb2":"markdown","6b8b7d8c":"markdown","c8bf8a2c":"markdown","6e3c60dd":"markdown","52822766":"markdown","613cc005":"markdown","79d7fc41":"markdown","cef812cd":"markdown","538b5a4d":"markdown","4ac4addb":"markdown","63107ee2":"markdown","79298b92":"markdown","20bb6e55":"markdown","93622041":"markdown","a5ec12a8":"markdown"},"source":{"c1a79d8d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","086c52ad":"file = open('\/kaggle\/input\/ense3ict2020\/files\/adult.data', 'r')","fdd2fc96":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","d49f1e01":"print (data[1:2])\n#print (data[:])","ec7d1c8e":"import pandas as pd\n\ndf = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\n#df\ndf.head()","5c81e18f":"df = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.shape","096cd104":"df.tail()","ea6a91d2":"df.shape","46b99795":"counts = df.groupby('country').size()\n\nprint (counts) ","c11a277d":"counts = df.groupby('age').size() # grouping by age\nprint (counts)","4cb7d604":"a=counts.max()\nprint('the max number is', a)\ncounts[5:30]\nprint('the age of most represanted people is : 36')","f752a7e2":"cond_ = ((df[\"age\"] > 17) & (df[\"age\"] <22))\ndf.loc[cond_,:]","537902ba":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\nml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","29cad959":"fm =df[(df.sex == 'Female')]\nfm.shape","a54a2d82":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","c0ab8522":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","bdf6efb4":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","111ce82a":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')\n","58fdc6e0":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","c643847b":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","a09b81c9":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","09ce08b6":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","a75404b3":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","73ed9738":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist(density=0, histtype='stepfilled', bins=10)","2307171d":"fm_age=fm['age']\nfm_age.hist(density=0, histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","c68a7ec1":"import seaborn as sns\nfm_age.hist(density=0, histtype='stepfilled', alpha=.5, bins=10)   # default number of bins = 10\nml_age.hist(density=0, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","fdda3469":"fm_age.hist(density=1, histtype='stepfilled', alpha=.5, bins=10)   # default number of bins = 10\nml_age.hist(density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","654c2577":"ml_age.hist(density=1, histtype='stepfilled', bins=10)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","7cb3ed6a":"fm_age.hist(density=1, histtype='stepfilled', bins=10)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","9bef22b9":"fm_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=10)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","a31153ce":"ml_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=10)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","eede7c17":"ml_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","7287901a":"ml_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=10)\nfm_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=10, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","6d89bfa3":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())","3b6bfeb7":"df['age'].median()","96484430":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])","ac38d705":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","42e08861":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape\n","68d56ff0":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] < df['age'].median()-15)])\n\ndf2.shape","1ad5e59d":"ml1_age=ml1['age']\nfm1_age=fm1['age']","48e7fb2c":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","9a907395":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age<df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age < df['age'].median()- 15)])","fa15630f":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","fde6695b":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","17c609e0":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","6a9c5c39":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","1f7defe1":"import numpy as np\n\ncountx,divisionx = np.histogram(ml2_age, density=True)\ncounty,divisiony = np.histogram(fm2_age, density=True)","b6e9d267":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","d2bc7744":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()),","a559be03":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))\na=df.skew(axis = 1, skipna = True)\nprint(a)\nb=df.skew(axis = 0, skipna = True)\nprint(b)","cbe52113":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","03d59b89":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']< df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']< df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","ed2e8494":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","238ae146":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","f684b190":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","9ab47259":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","99c1d46d":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(fm2_young\/ml2_young))","f9bf8340":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*(ml2_elder\/fm2_elder))","3acf5b08":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","6f6e33a6":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","46482c15":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","acacf713":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","910f1427":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, density=True, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","2961fd9e":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","85a15e5a":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","3bab6434":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28, density=True )\nplt.plot(xgrid, density(xgrid), 'r-')","fa5d0a0f":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18, density=True)","8e83ab36":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","a402c02c":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50,density='True')","e1fbe49e":"print ('The empirical mean of the sample is ', x.mean())","46cfb9b3":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)","c4390232":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","2da67ace":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])","13423646":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","e983905c":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","9073e5c5":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","dabd8405":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","d359029c":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])","3393d96c":"plt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","cd8ed95a":"plt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","2298d2ca":"plt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.gcf().set_size_inches((10,10))","4dfbb270":"the average age in men is higher than the average age of women (3)","755383e1":"we have the maximum number of female samples for the age between 17 and 32 and the minimum samples for the age between 70 to 90 which means we can ignore them.","c5d2d43d":"With the Python statistics module, you can find the median, or middle value, of a data set. The Python median() function allows you to calculate the median of any data set without first sorting the list. here we can see the median age for men is 38 and for women is 35.","9c025172":" the PMF for the women with the age between 18 to 32 is higher than men however the PMF for men who are between 32 to 68 is higher than women with the same age. and we can ignore the datas for all people who are more than 70.","faf3a398":"only 24% of society have high income and most of them are men.(the rate of men with high income is 20% more than the rate of women with high income).","f28e5636":"What is the obtained result? What did you ask for in the previous command? Explain.\n\nwe split our datas into a list and we choosed specefic information including both integer(digit) and string type based on the length of data1 (15). and then we choosed to show only the first list(only one list) of our data. we can print(data[:]) to see all lists and information.","f02fb57a":"tail function with no arguments gets the last five rows(32556-32560) of data from the data frame.","4afbf7dd":"Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.","c6e362be":"the average age of men is bigger than the average age of women.","2d58db8a":"The difference between the mean and mode, or mean and median, will tell you how far the distribution departs from symmetry. A symmetric distribution (for example, the normal distribution) has a skewness of zero. therefor, the mean, mode and median can be used to figure out if you have a positively or negatively skewed distribution.\n\nIf the mean is greater than the mode, the distribution is positively skewed.\nIf the mean is less than the mode, the distribution is negatively skewed.\nIf the mean is greater than the median, the distribution is positively skewed.\nIf the mean is less than the median, the distribution is negatively skewed\n\nfor the male there is a very slight positive skewness and we can say it is approximately symmetric distribution. and for the female we have more weight in the left tail of distribution.  ","3612f96a":"Note that the CDF completely describes the distribution of a discrete random variable. In particular, we can find the PMF values by looking at the values of the jumps in the CDF function, we can compare CDF for men and women, for the people whose age are between 17 to 52 the value of  CDF for women is bigger than men, ","b73e0620":"the average age of high-income men is aproximately 45 however the average age of high-income women is 42 we can conclude that women with high income are younger than high-income men.","2c1171df":"based on statistics of hours per week for men and women we can see the average for men is higher than women, and we can see std is same for men and women and it is 12 and when we look at var and std we can see these values are far from the mean\/average which means we have deviation in our study and datas.","0ee275d1":"Plot a histogram.\n\nCompute and draw the histogram of x. The return value is a tuple (n, bins, patches) or ([n0, n1, ...], bins, [patches0, patches1,...]) if the input contains multiple data. See the documentation of the weights parameter to draw a histogram of already-binned data.\n\nMultiple data can be provided via x as a list of datasets of potentially different length ([x0, x1, ...]), or as a 2-D ndarray in which each column is a dataset. Note that the ndarray form is transposed relative to the list form.\n\nMasked arrays are not supported at present.\n\nParameters:\t\nx : (n,) array or sequence of (n,) arrays\nInput values, this takes either a single array or a sequence of arrays which are not required to be of the same length.\n\nbins : int or sequence or str, optional\nIf an integer is given, bins + 1 bin edges are calculated and returned, consistent with numpy.histogram.\n\nIf bins is a sequence, gives bin edges, including left edge of first bin and right edge of last bin. In this case, bins is returned unmodified.\n\nAll but the last (righthand-most) bin is half-open. In other words, if bins is:\n\n[1, 2, 3, 4] then the first bin is [1, 2) (including 1, but excluding 2) and the second [2, 3). The last bin, however, is [3, 4], which includes 4.\n\nUnequally spaced bins are supported if bins is a sequence.\n\nWith Numpy 1.11 or newer, you can alternatively provide a string describing a binning strategy, such as 'auto', 'sturges', 'fd', 'doane', 'scott', 'rice' or 'sqrt', see numpy.histogram.\n\nThe default is taken from rcParams[\"hist.bins\"] = 10.\n\nrange : tuple or None, optional\nThe lower and upper range of the bins. Lower and upper outliers are ignored. If not provided, range is (x.min(), x.max()). Range has no effect if bins is a sequence.\n\nIf bins is a sequence or range is specified, autoscaling is based on the specified bin range instead of the range of x.\n\nDefault is None\n\ndensity : bool, optional\nIf True, the first element of the return tuple will be the counts normalized to form a probability density, i.e., the area (or integral) under the histogram will sum to 1. This is achieved by dividing the count by the number of observations times the bin width and not dividing by the total number of observations. If stacked is also True, the sum of the histograms is normalized to 1.\n\nDefault is None for both normed and density. If either is set, then that value will be used. If neither are set, then the args will be treated as False.\n\nIf both density and normed are set an error is raised.\n\nweights : (n, ) array_like or None, optional\nAn array of weights, of the same shape as x. Each value in x only contributes its associated weight towards the bin count (instead of 1). If normed or density is True, the weights are normalized, so that the integral of the density over the range remains 1.\n\nDefault is None.\n\nThis parameter can be used to draw a histogram of data that has already been binned, e.g. using np.histogram (by treating each bin as a single point with a weight equal to its count)\n\ncounts, bins = np.histogram(data)\nplt.hist(bins[:-1], bins, weights=counts)\n(or you may alternatively use bar()).\n\ncumulative : bool, optional\nIf True, then a histogram is computed where each bin gives the counts in that bin plus all bins for smaller values. The last bin gives the total number of datapoints. If normed or density is also True then the histogram is normalized such that the last bin equals 1. If cumulative evaluates to less than 0 (e.g., -1), the direction of accumulation is reversed. In this case, if normed and\/or density is also True, then the histogram is normalized such that the first bin equals 1.\n\nDefault is False\n\nbottom : array_like, scalar, or None\nLocation of the bottom baseline of each bin. If a scalar, the base line for each bin is shifted by the same amount. If an array, each bin is shifted independently and the length of bottom must match the number of bins. If None, defaults to 0.\n\nDefault is None\n\nhisttype : {'bar', 'barstacked', 'step', 'stepfilled'}, optional\nThe type of histogram to draw.\n\n'bar' is a traditional bar-type histogram. If multiple data are given the bars are arranged side by side.\n'barstacked' is a bar-type histogram where multiple data are stacked on top of each other.\n'step' generates a lineplot that is by default unfilled.\n'stepfilled' generates a lineplot that is by default filled.\nDefault is 'bar'\n\nalign : {'left', 'mid', 'right'}, optional\nControls how the histogram is plotted.\n\n'left': bars are centered on the left bin edges.\n'mid': bars are centered between the bin edges.\n'right': bars are centered on the right bin edges.\nDefault is 'mid'\n\norientation : {'horizontal', 'vertical'}, optional\nIf 'horizontal', barh will be used for bar-type histograms and the bottom kwarg will be the left edges.\n\nrwidth : scalar or None, optional\nThe relative width of the bars as a fraction of the bin width. If None, automatically compute the width.\n\nIgnored if histtype is 'step' or 'stepfilled'.\n\nDefault is None\n\nlog : bool, optional\nIf True, the histogram axis will be set to a log scale. If log is True and x is a 1D array, empty bins will be filtered out and only the non-empty (n, bins, patches) will be returned.\n\nDefault is False\n\ncolor : color or array_like of colors or None, optional\nColor spec or sequence of color specs, one per dataset. Default (None) uses the standard line color sequence.\n\nDefault is None\n\nlabel : str or None, optional\nString, or sequence of strings to match multiple datasets. Bar charts yield multiple patches per dataset, but only the first gets the label, so that the legend command will work as expected.\n\ndefault is None\n\nstacked : bool, optional\nIf True, multiple data are stacked on top of each other If False multiple data are arranged side by side if histtype is 'bar' or on top of each other if histtype is 'step'\n\nDefault is False\n\nnormed : bool, optional\nDeprecated; use the density keyword argument instead.\n\nReturns:\t\nn : array or list of arrays\nThe values of the histogram bins. See density and weights for a description of the possible semantics. If input x is an array, then this is an array of length nbins. If input is a sequence of arrays [data1, data2,..], then this is a list of arrays with the values of the histograms for each of the arrays in the same order. The dtype of the array n (or of its element arrays) will always be float even if no weighting or normalization is used.\n\nbins : array\nThe edges of the bins. Length nbins + 1 (nbins left edges and right edge of last bin). Always a single array even when multiple data sets are passed in.\n\npatches : list or list of lists\nSilent list of individual patches used to create the histogram or list of such list if multiple input datasets\n","cfeca99c":"the distribution of our data is high for the men whose age are between 25 to 46 which means the data and information for this range is important, and we can ignore the information for the the men who are bigger than 65.","c7680640":"we have the highest probability of .034 for the women whose age arein the range of 20 to 25. if we look at the integral of this curve we can simply filter our data for people whose age are between 20 and 58 and we can remove the rest of information.","7d978830":"we see that our MSE is really close to zero which means we have afew errors and it is good result.","dc1f84cb":"head function with no arguments gets the first five rows of data from the data frame and we defined  ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"] for the columns.","9c14b95a":"median hours per week per men and women is same and it equals to 40.","c30651e3":"we can compare the samples between men and women and the difference between the samples of men and women are very high in the age between 30 to 42. and in general we have more samples which belong to men.","0bf1cfb2":"for people between 17 to 31 the probability for women is higher than men but for the people between 31 to 67 the probability for men is higher than women.","6b8b7d8c":"the median age per men with high income is 44 and for women is 41, we can conclude that the median age of women with high income are less than men.","c8bf8a2c":"we have highly positive value for capital_gain which means we have more weight in the left tail of the distribution and for education_num we have a small negative value which means we have more weight in the right tail of the distribution. for all values which are close to zero we can say they have been distributed normally.","6e3c60dd":"there is only afew people whose ages are smaller than 22 and have a high income","52822766":"we can see the number of people based on their age","613cc005":"here we have the list of information(different types of data like int (50), string('United-States',..) and It contains approximately 32,000 observations concerning different financial parameters related to the US population: age, sex, marital (marital status of the individual), country, income (Boolean variable: whether the person makes more than $50,000 per annum), education (the highest level of education achieved by the individual), occupation, capital gain, etc","79d7fc41":"If X is a discrete random variable then its range RX is a countable set, so, we can list the elements in RX. In other words, we can write\nRX={x1,x2,x3,...}.\nNote that here x1,x2,x3,... are possible values of the random variable X. While random variables are usually denoted by capital letters, to represent the numbers in the range we usually use lowercase letters such as x, x1, y, z, etc. For a discrete random variable X, we are interested in knowing the probabilities of X=xk. Note that here, the event A={X=xk} is defined as the set of outcomes s in the sample space S for which the corresponding value of X is equal to xk. In particular,\nA={s\u2208S|X(s)=xk}.\nhe probabilities of events {X=xk} are formally shown by the probability mass function (pmf) of X. We can normalize the frequencies of the histogram by dividing\/normalizing by n, the number of samples. The normalized histogram is called the Probability Mass Function (PMF).","cef812cd":"I think we should remove data for people whose age is less than 22.","538b5a4d":"we can see that the bigest jump of step belong to [18<age<25 & 25<age<31] and [25<age<31 & 31<age<38] and [31<age<38 & 38<age<46] which means we have high value of pmf for the aproximatley age of 25,31,38 ","4ac4addb":"The cumulative distribution function (CDF) of random variable X is defined as FX(x)=P(X\u2264x), for all x\u2208R. Note that the subscript X indicates that this is the CDF of the random variable X. Also, note that the CDF is defined for all x\u2208R. the CDf is 1 and flat for people who are more than 68. and we have the big jump for the age of 18,24,31,38 which means the pmf is very high for these values.","63107ee2":"we have the highest probability for the age between 26 to 47, we can also filter our data for people whose age are between 20 to 58 and we can remove the rest of information.","79298b92":"What is the age of the most represented people ? 36","20bb6e55":" The shape property returns a tuple representing the dimensionality of the DataFrame. The format of shape would be (rows, columns), we have 32561 rows and 15 columns.","93622041":"it is the number of people whose ages are bigger than 72 and have a high income","a5ec12a8":"for the united states:29170\nfor the mexico: 643"}}