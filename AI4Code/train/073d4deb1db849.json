{"cell_type":{"5dc446eb":"code","d7232b3e":"code","c7f9e3a7":"code","4f487808":"code","e7c60c4f":"code","904c97f9":"code","539260cd":"code","fd3ce9d2":"code","ad509d86":"code","4eb91eec":"code","4c74c4f1":"code","1a8198bd":"code","6f673ed2":"code","c9082b61":"code","e8963a59":"code","7b453a4e":"code","0d8a181c":"code","10a4494c":"code","56d00000":"code","46e56a53":"code","01335c42":"code","d8296a4d":"code","1b4a84ea":"code","a0f498c6":"code","c9f8c84d":"code","36bff9fa":"code","dba53467":"code","8e0c060f":"code","845bef8a":"code","15ee8c9d":"code","a5493ae8":"code","a5110fb1":"code","8d9ae20e":"code","5d822539":"code","0e9fb46e":"code","85308857":"code","84b24c0e":"code","9aa37e64":"code","4ada21fc":"code","71d2201d":"code","587dc0a9":"code","7e684803":"code","911e8d96":"code","69df4514":"code","2d2fbd79":"code","23d90fc0":"code","b34ba765":"code","30a35a2c":"code","b177b212":"code","8f318aff":"code","1aa68f53":"code","25f25a2b":"code","fb243f1c":"code","eb99c503":"code","3fddcd69":"code","47d6035a":"code","fd4d8d45":"code","39e34de8":"code","efd7c365":"code","ff840795":"code","55fcc2bd":"code","7e841385":"code","4f461ce3":"markdown","0bbc4197":"markdown"},"source":{"5dc446eb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d7232b3e":"ROOT = \"..\/input\/vinbigdata-chest-xray-abnormalities-detection\/\"","c7f9e3a7":"!ls {ROOT}","4f487808":"train = pd.read_csv(ROOT+'train.csv')\ntrain.head()","e7c60c4f":"sub = pd.read_csv(ROOT+'sample_submission.csv')\nsub.head()","904c97f9":"train.shape","539260cd":"sub.shape","fd3ce9d2":"import os\nos.listdir(ROOT+'train\/')[:4]","ad509d86":"len(os.listdir(ROOT+'train\/'))","4eb91eec":"len(os.listdir(ROOT+'test\/'))","4c74c4f1":"len(train.image_id.unique()), len(sub.image_id.unique())","1a8198bd":"train.head()","6f673ed2":"import seaborn as sns\nfig = plt.figure(figsize=(6,6))\nsns.countplot(y='class_name', data=train);","c9082b61":"fig = plt.figure(figsize=(6,6))\nsns.countplot(y ='class_name', data=train[train['class_name']!=\"No finding\"]);","e8963a59":"train.head()","7b453a4e":"train.image_id.value_counts()","0d8a181c":"train[train['image_id'] == '7a1d72be9ef473df66d225c53e61f77e']","10a4494c":"len(train.rad_id.unique())","56d00000":"fig = plt.figure(figsize=(12,6))\nsns.countplot(x='rad_id', data=train);","46e56a53":"train.isna().sum(axis=0)","01335c42":"train[train['class_name']!=\"No finding\"].isna().sum(axis=0)","d8296a4d":"new_train = train[train['class_name']!=\"No finding\"]","1b4a84ea":"new_train.head()","a0f498c6":"new_train.shape","c9f8c84d":"new_train.describe()","36bff9fa":"fig = plt.figure(figsize=(12,6))\nsns.distplot(new_train['x_min']);","dba53467":"fig = plt.figure(figsize=(12,6))\nsns.distplot(new_train['x_max']);","8e0c060f":"fig = plt.figure(figsize=(12,6))\nsns.distplot(new_train['y_min']);","845bef8a":"fig = plt.figure(figsize=(12,6))\nsns.distplot(new_train['y_max']);","15ee8c9d":"import pydicom\n\npath = ROOT + 'train\/4d390e07733ba06e5ff07412f09c0a92.dicom'","a5493ae8":"dicom = pydicom.dcmread(path)","a5110fb1":"print(dicom)","8d9ae20e":"dir(dicom)","5d822539":"dicom.Rows","0e9fb46e":"dicom.Columns","85308857":"dicom.PatientSex","84b24c0e":"from tqdm import tqdm\nrows, columns, sex = [], [], []\nids = new_train['image_id'].unique()\nfor i in ids:\n    path = ROOT+ 'train\/' + i + '.dicom'\n    dicom = pydicom.dcmread(path, stop_before_pixels=True)\n    rows.append(dicom.Rows)\n    columns.append(dicom.Columns)\n    sex.append(dicom.PatientSex)","9aa37e64":"info = pd.DataFrame({'image_id':ids, 'rows':rows, 'columns':columns, 'sex':sex})\ninfo.head()","4ada21fc":"fig = plt.figure(figsize=(12,6))\nsns.countplot(info['sex']);","71d2201d":"fig = plt.figure(figsize=(12,6))\nsns.distplot(info['rows']);","587dc0a9":"fig = plt.figure(figsize=(12,6))\nsns.distplot(info['columns']);","7e684803":"fig = plt.figure(figsize=(12,6))\nax = sns.scatterplot(x='rows', y='columns', data=info, alpha=0.3)\nplt.title(\"row(x) column(x) scatter plot\")\nplt.show()","911e8d96":"fig = plt.figure(figsize=(12,6))\nax = sns.scatterplot(x='x_min', y='y_min', data=new_train, alpha=0.3)\nplt.title(\"min coordinate scatter plot\")\nplt.show()","69df4514":"fig = plt.figure(figsize=(12,6))\nax = sns.scatterplot(x='x_max', y='y_max', data=new_train, alpha=0.3)\nplt.title(\"max coordinate scatter plot\")\nplt.show()","2d2fbd79":"train = pd.merge(train, info)\ntrain.head()","23d90fc0":"assert (train['x_min'] < train['columns']).all()\nassert (train['x_min'] < train['x_max']).all()\nassert (train['y_min'] < train['y_max']).all()\nassert (train['x_max'] <= train['columns']).all()\nassert (train['y_min'] < train['rows']).all()\nassert (train['y_max'] <= train['rows']).all()","b34ba765":"fig = plt.figure(figsize=(12,6))\nsns.distplot(train['rows']*train['columns']);\nplt.title(\"total pixels in images\");","30a35a2c":"fig = plt.figure(figsize=(12,6))\nsns.distplot(train['x_max'] - train['x_min']);\nplt.title(\"width of bounding box\");","b177b212":"fig, axes = plt.subplots(7, 2, figsize=(16, 40), sharex=True)\nfig.suptitle(\"width of bounding box for different categories\", fontsize=16)\nfor j, i in enumerate(train.class_name.unique()):\n    ttrain = train[train['class_name'] == i]\n    sns.distplot(ttrain['x_max'] - ttrain['x_min'], ax=axes[j%7, j\/\/7]);\n    axes[j%7, j\/\/7].title.set_text(i);\nplt.show()","8f318aff":"fig = plt.figure(figsize=(12,6))\nsns.distplot(train['y_max'] - train['y_min']);\nplt.title(\"height of bounding box\");","1aa68f53":"fig, axes = plt.subplots(7, 2, figsize=(16, 40), sharex=True)\nfig.suptitle(\"height of bounding box for different categories\", fontsize=16)\nfor j, i in enumerate(train.class_name.unique()):\n    ttrain = train[train['class_name'] == i]\n    sns.distplot(ttrain['y_max'] - ttrain['y_min'], ax=axes[j%7, j\/\/7]);\n    axes[j%7, j\/\/7].title.set_text(i);\nplt.show()","25f25a2b":"fig = plt.figure(figsize=(12,6))\nsns.distplot((train['y_max'] - train['y_min']) * (train['x_max'] - train['x_min']));\nplt.title(\"area of bounding box\");","fb243f1c":"fig, axes = plt.subplots(7, 2, figsize=(16, 40), sharex=True)\nfig.suptitle(\"area of bounding box for different categories\", fontsize=16)\nfor j, i in enumerate(train.class_name.unique()):\n    ttrain = train[train['class_name'] == i]\n    sns.distplot((ttrain['y_max'] - ttrain['y_min']) * (ttrain['x_max'] - ttrain['x_min']), ax=axes[j%7, j\/\/7]);\n    axes[j%7, j\/\/7].title.set_text(i);\nplt.show()","eb99c503":"# from here https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\n\ndef read_xray(path, voi_lut = True, fix_monochrome = True):\n    dicom = pydicom.read_file(path)\n\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    return (data * 255).astype(np.uint8)","3fddcd69":"_ = plt.figure(figsize=(10, 10))\nplt.imshow(read_xray(path), cmap='gray');","47d6035a":"import random\nimport matplotlib.patches as patches\n\n_, axes = plt.subplots(4,4, figsize=(20, 20))\nfor i in range(4):\n    for j in range(4):\n        path = ROOT + 'train\/' + train.iloc[random.randint(0, len(train))]['image_id'] + '.dicom'\n        axes[i][j].imshow(read_xray(path), cmap='gray');\nplt.show()","fd4d8d45":"train.head()","39e34de8":"train['class_name'].unique()","efd7c365":"def plot(name):\n    ttrain = train[train['class_name'] == name]\n    fig, axes = plt.subplots(4,4, figsize=(20, 20))\n    fig.suptitle(name+\" examples\", fontsize=16)\n    for i in range(4):\n        for j in range(4):\n            row = ttrain.iloc[random.randint(0, len(ttrain))]\n            path = ROOT + 'train\/' + row['image_id'] + '.dicom'\n            axes[i][j].imshow(read_xray(path), cmap='gray')\n            axes[i][j].add_patch(patches.Rectangle(\n                (row['x_min'], row['y_min']), \n                row['x_max'] - row['x_min'], \n                row['y_max'] - row['y_min'], \n                edgecolor='blue', \n                fill=False)\n            )\n    plt.show()","ff840795":"plot(\"Cardiomegaly\")","55fcc2bd":"plot(\"Pleural effusion\")","7e841385":"plot(\"Pleural thickening\")","4f461ce3":"# VinBigData Chest X-ray Abnormalities Detection\n### Automatically localize and classify thoracic abnormalities from chest radiographs\n\n![image](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/24800\/logos\/header.png)","0bbc4197":"the notebook is still WIP but\n### do upvote if it helped :)"}}