{"cell_type":{"4bf9ff15":"code","7a8193db":"code","f54d1f39":"code","530c7968":"code","c20f4e99":"code","44a1e829":"code","5dad9e5b":"code","ed49dfde":"code","d4c9bdc6":"code","bcd40ed4":"code","9f173e0f":"code","91e336c3":"code","3f1a6961":"code","78c4584d":"code","c2588cd8":"code","d3f03d51":"code","913cc466":"code","36aa478c":"code","85db2a72":"code","f5891b89":"code","bc068d3f":"code","f13e2758":"markdown","6d43ec9b":"markdown","1f154924":"markdown","6999c9c6":"markdown"},"source":{"4bf9ff15":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a8193db":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pylab as pl\nimport matplotlib.pyplot as plt\n%matplotlib inline\ndata=pd.read_csv(\"..\/input\/real-estate-dataset\/data.csv\")","f54d1f39":"data.head()","530c7968":"data.isnull().any()","c20f4e99":"data.fillna(data.mean(), inplace=True)","44a1e829":"data.isnull().any()","5dad9e5b":"data.corr() ","ed49dfde":"plt.subplots(figsize=(12,7))\nsns.heatmap(data.corr(), annot=True, cmap='YlGnBu', linewidths=1 );","d4c9bdc6":"plt.scatter(data.CRIM, data.MEDV, color='green', alpha=0.8)\nplt.xlabel(\"Criminal\")\nplt.ylabel(\"Value\")\nplt.show()","bcd40ed4":"house = np.random.rand(len(data)) < 0.8\ntrain = data[house]\ntest = data[~house]","9f173e0f":"plt.scatter(train.CRIM, train.MEDV,  color='blue')\nplt.xlabel(\"Criminal\")\nplt.ylabel(\"Value\")\nplt.show()\n\nfrom sklearn import linear_model\nregr = linear_model.LinearRegression()\ntrain_x = np.asanyarray(train[['CRIM']])\ntrain_y = np.asanyarray(train[['MEDV']])\nregr.fit (train_x, train_y)\n# The coefficients\nprint ('Coefficients: ', regr.coef_)\nprint ('Intercept: ',regr.intercept_)\n","91e336c3":"plt.scatter(train.CRIM, train.MEDV,  color='blue')\nplt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-r')\nplt.xlabel(\"Criminal\")\nplt.ylabel(\"Value\")\n\nfrom sklearn.metrics import r2_score\n\ntest_x = np.asanyarray(test[['CRIM']])\ntest_y = np.asanyarray(test[['MEDV']])\ntest_y_hat = regr.predict(test_x)\n\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_hat - test_y)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_hat - test_y) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(test_y_hat , test_y) )","3f1a6961":"plt.scatter(data.RM, data.MEDV, color='purple', alpha=0.8)\nplt.xlabel(\"Room\")\nplt.ylabel(\"Value\")\nplt.show()","78c4584d":"plt.scatter(train.RM, train.MEDV,  color='blue')\nplt.xlabel(\"Room\")\nplt.ylabel(\"Value\")\nplt.show()\n\nregr = linear_model.LinearRegression()\ntrain_x = np.asanyarray(train[['RM']])\ntrain_y = np.asanyarray(train[['MEDV']])\nregr.fit (train_x, train_y)\n# The coefficients\nprint ('Coefficients: ', regr.coef_)\nprint ('Intercept: ',regr.intercept_)","c2588cd8":"plt.scatter(train.RM, train.MEDV,  color='blue')\nplt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-r')\nplt.xlabel(\"Room\")\nplt.ylabel(\"Value\")\n\n\ntest_x = np.asanyarray(test[['RM']])\ntest_y = np.asanyarray(test[['MEDV']])\ntest_y_hat = regr.predict(test_x)\n\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_hat - test_y)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_hat - test_y) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(test_y_hat , test_y) )","d3f03d51":"from sklearn.cluster import KMeans\nfrom sklearn.datasets import make_blobs \nfrom sklearn.preprocessing import StandardScaler\ndt = data[['CRIM','RM', 'MEDV']]\nX = dt.values[:,1:]\nX = np.nan_to_num(X)\nClus_dataSet = StandardScaler().fit_transform(X)\nClus_dataSet","913cc466":"clusterNum = 3\nk_means = KMeans(init = \"k-means++\", n_clusters = clusterNum, n_init = 12)\nk_means.fit(X)\nlabels = k_means.labels_\nprint(labels)","36aa478c":"dt[\"data_km\"] = labels\ndt.head(5)","85db2a72":"dt.groupby('data_km').mean()","f5891b89":"area = np.pi * ( X[:, 1])**2  \nplt.scatter(X[:, 0], X[:, 1], s=area, c=labels.astype(np.float), alpha=0.5)\nplt.xlabel('Room', fontsize=18)\nplt.ylabel('Value', fontsize=16)\n\nplt.show()","bc068d3f":"from mpl_toolkits.mplot3d import Axes3D \nfig = plt.figure(1, figsize=(8, 6))\nplt.clf()\nax = Axes3D(fig, rect=[0, 0, .95, 1], elev=48, azim=134)\n\nplt.cla()\n# plt.ylabel('Age', fontsize=18)\n# plt.xlabel('Income', fontsize=16)\n# plt.zlabel('Education', fontsize=16)\nax.set_xlabel('Criminal')\nax.set_ylabel('Room')\nax.set_zlabel('Value')\n\nax.scatter(X[:, 1], X[:, 0], X[:, 1], c= labels.astype(np.float))","f13e2758":"Conclusion\n\n1. The value of a residence is very much influenced by the surrounding environment, one of which is the level of crime, the higher the crime rate in the area where the occupancy is, the value of the occupancy will gradually decrease\n\n2. The number of rooms in an area will affect the price of an occupancy, because the more the number of rooms in an occupancy, the occupancy price will increase\n\n\n\nI hope to get an opinion for the coding I made, Thank You","6d43ec9b":"Correlation between CRIM and MEDV","1f154924":"Real Estate Boston Correlation for MEDV","6999c9c6":"Correlation between RM and MEDV"}}