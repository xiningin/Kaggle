{"cell_type":{"3f784312":"code","4ff90c09":"code","97c3d5f2":"code","753c8af6":"code","c85889da":"code","4513f3da":"code","9118697e":"code","f8c57a88":"code","9123f9a0":"code","c3cc3ee0":"code","8f07d04f":"code","9610ce0e":"code","755bd12f":"code","955768b0":"code","47c2cff9":"code","7817a64c":"code","021814eb":"code","931bfa3d":"code","1a1da475":"code","470161fe":"code","7bf8b3fa":"code","b7a571be":"code","21c349c1":"code","1d928721":"code","34c69ad2":"code","f78c0c77":"code","b849fdbc":"code","d1811110":"code","60ddbf9b":"code","f4f7cad6":"code","e0579f90":"code","2f9762cb":"markdown","4e67630b":"markdown","2f56b283":"markdown","12468bf1":"markdown","cacc8a4e":"markdown","e0a970a1":"markdown","97988688":"markdown","52cdfbd3":"markdown","e6e0163a":"markdown","9f2e6d03":"markdown","757f5d48":"markdown","50960992":"markdown","6fa787e9":"markdown","43b92410":"markdown","3bc3ddfa":"markdown","4a62f4e5":"markdown","2a1cd64b":"markdown","c5021b4f":"markdown","a31dfd47":"markdown","0548bb67":"markdown","1b408cc2":"markdown","315471d2":"markdown","1bf5bc30":"markdown","d40bcdb3":"markdown","fa9d0842":"markdown","e43cd7db":"markdown","f1b6e498":"markdown","88b915ed":"markdown","4f728116":"markdown"},"source":{"3f784312":"ENABLE_MULTIPROCESSING = True # This allows to solve 4 tasks at the same moment.\n\nimport numpy as np\n\nimport time\nfrom collections import defaultdict\nimport os\nimport random\nimport copy\nfrom pathlib import Path\nimport json\nimport pandas as pd\nimport multiprocessing\n\ndata_path = Path('..\/input\/abstraction-and-reasoning-challenge\/')\n\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ntrain_tasks = { task.stem: json.load(task.open()) for task in training_path.iterdir() }\nvalid_tasks = { task.stem: json.load(task.open()) for task in evaluation_path.iterdir() }\ntest_path = { task.stem: json.load(task.open()) for task in test_path.iterdir() }\n\ntrain_task_ids = np.sort(list(train_tasks.keys()))\nvalid_task_ids = np.sort(list(valid_tasks.keys()))\ntest_task_ids = np.sort(list(test_path.keys()))\n\ndef load_data(p, phase=None):\n    \"\"\"\n        Load task data\n\n    \"\"\"\n    if phase in {'training', 'test', 'evaluation'}:\n        p = data_path \/ phase \/ p\n\n    task = json.loads(Path(p).read_text())\n    dict_vals_to_np = lambda x: {k: np.array(v) for k, v in x.items()}\n    assert set(task) == {'test', 'train'}\n    res = dict(test=[], train=[])\n    for t in task['train']:\n        assert set(t) == {'input', 'output'}\n        res['train'].append(dict_vals_to_np(t))\n    for t in task['test']:\n        if phase == 'test':\n            assert set(t) == {'input'}\n        else:\n            assert set(t) == {'input', 'output'}\n        res['test'].append(dict_vals_to_np(t))\n\n    return res\n\nimport numpy as np\n\nfrom tqdm.notebook import tqdm\nfrom PIL import Image, ImageDraw\nimport time\nfrom collections import defaultdict\nimport os\nimport json\nimport random\nimport copy\nimport networkx as nx\nfrom pathlib import Path\n\nimport matplotlib.colors as colors\nimport matplotlib.pyplot as plt\n\nfrom itertools import product\nimport pandas as pd\nimport multiprocessing\nimport subprocess\n\ndata_path = Path('..\/input\/abstraction-and-reasoning-challenge\/')\n\ncmap_lookup = [\n    '#000000', '#0074D9', '#FF4136', '#2ECC40', '#FFDC00',\n    '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'\n]\n\ncmap_lookup = [np.array([int(x[1:3], 16), int(x[3:5], 16), int(x[5:], 16)]) for x in cmap_lookup]\n\ndef cmap(x):\n    \"\"\"\n        Translate a task matrix to a color coded version\n\n        arguments\n            x : a h x w task matrix\n        returns\n            a h x w x 3 matrix with colors instead of numbers\n    \"\"\"\n    y = np.zeros((*x.shape, 3))\n    y[x < 0, :] = np.array([112, 128, 144])\n    y[x > 9, :] = np.array([255, 248, 220])\n    for i, c in enumerate(cmap_lookup):\n        y[x == i, :] = c\n    return y\n\ndef draw_one(x, k=20):\n    \"\"\"\n        Create a PIL image from a task matrix, the task will be\n        drawn using the default color coding with grid lines\n\n        arguments\n            x : a task matrix\n            k = 20 : an up scaling factor\n        returns\n            a PIL image\n\n    \"\"\"\n    img = Image.fromarray(cmap(x).astype(np.uint8)).resize((x.shape[1] * k, x.shape[0] * k), Image.NEAREST)\n\n    draw = ImageDraw.Draw(img)\n    for i in range(x.shape[0]):\n        draw.line((0, i * k, img.width, i * k), fill=(80, 80, 80), width=1)\n    for j in range(x.shape[1]):\n        draw.line((j * k, 0, j * k, img.height), fill=(80, 80, 80), width=1)\n    return img\n\ndef vcat_imgs(imgs, border=10):\n    \"\"\"\n        Concatenate images vertically\n\n        arguments:\n            imgs : an array of PIL images\n            border = 10 : the size of space between images\n        returns:\n            a PIL image\n    \"\"\"\n\n    h = max(img.height for img in imgs)\n    w = sum(img.width for img in imgs)\n    res_img = Image.new('RGB', (w + border * (len(imgs) - 1), h), color=(255, 255, 255))\n\n    offset = 0\n    for img in imgs:\n        res_img.paste(img, (offset, 0))\n        offset += img.width + border\n\n    return res_img\n\ndef plot_task(task):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(2, n, figsize=(n * 4, 8))\n    plt.subplots_adjust(wspace=0, hspace=0)\n    fig_num = 0\n\n    def go(ax, title, x):\n        ax.imshow(draw_one(x), interpolation='nearest')\n        ax.set_title(title)\n        ax.set_yticks([])\n        ax.set_xticks([])\n\n    for i, t in enumerate(task[\"train\"]):\n        go(axs[0][fig_num], f'Train-{i} in', t[\"input\"])\n        go(axs[1][fig_num], f'Train-{i} out', t[\"output\"])\n        fig_num += 1\n    for i, t in enumerate(task[\"test\"]):\n        go(axs[0][fig_num], f'Test-{i} in', t[\"input\"])\n        try:\n            go(axs[1][fig_num], f'Test-{i} out', t[\"output\"])\n        except:\n            go(axs[1][fig_num], f'Test-{i} out', np.zeros_like(t[\"input\"]))\n        fig_num += 1\n\n    plt.tight_layout()\n    plt.show()","4ff90c09":"name = '070dd51e'\ntask = load_data(f'{name}.json', phase='evaluation')\n\nplot_task(task)","97c3d5f2":"name = '0d87d2a6'\ntask = load_data(f'{name}.json', phase='evaluation')\n\nplot_task(task)","753c8af6":"name = '08ed6ac7'\ntask = load_data(f'{name}.json', phase='training')\n\nplot_task(task)","c85889da":"\nencoded_files = {\n\"algorithms.h\": \"H4sIAP57zl4C\/81XTY\/aSBC9+1dUWIUxwQFyHZhIqz2ttEmkDUgrsZbV2G1oxm4Tu814kvDft\/rDxm3MiI1yCAfs7n5VXe9V9YenU2c6hc9ZSqEsaFwmQJJtljOxS4sJDjnOb4ecbFMCGQ+p4ziCpoeECAoL8XygnKDh8r1zzFgEh5xxEbCUbKkbZrwQsIRhRATxAAdgR9l2J\/T7E4vEbuR8cwB\/cZaDK3uf4QFmc3wsDBjfx+MRaJj8HUoR7kju3n2\/G82dprvxUGkPFXpQU+Cr7UA5kXHG7uB1NPBAxrd+hjcaD2OofPRcQ09Oe+rCHXwfmNGTc7pVjCBicdxVpGkSnokdzX8xjVgMbo808OoBTMBd0ToO\/qfQSlKgSUH7\/NSM3t51TX5apkiek+dzko40bKQ3NAoR0RzzNFjDoBZWiaqNSCkyFPUepGmLxIX56whQjqqJrn8S\/18uZ8FhXJ\/90ePANQKLOMmIeG94IPCb\/GvnRJMwnVdpNBmM65hrN0pj3\/iwBC55wbacRpBkfAsrS+UNEwUVZirken+vexYrjBWfN2teykpmupIZVjLaTgr2lbojbNvlLEtZDgtaCJeNuoV6JT\/M2gVuy1QjwmWRlQesfxqkpGJpmbqKOhFZysLFEqmb\/uBIkpK2NgfVriNeooj0qDHI3LLRwT7tWELBbcEWoJ\/DIbyyDCZhlh5ITgNa4driuEs9UfLYMvW0ZaOXtYxaBD1o3jHXOi9c0LygoWAZD1RWbEJFzVDJUPIsRylpFNSFIMgmaVhLh2FW4r9Mdv+yGx5lwSrX7fRqs\/EDKIcT1XSP9sLLqShzrqHzqxRVKTeF\/WM8W5V+G0FFDR3dwk0VN6J+CrlOuG2aP8SwM5jT4maaiJ3IHQNHvC7VXq7K+fVds4ctIpcQswRJ3souJcXj6LynLvWs06m1n\/byMoB6X5KOWoRsQM3\/UBa7YEPCR5PgFuRUN06t2dtK2Jvz1WWr9qgtFUHJ2ZcS9wK8AAZ6vRSCCBbq42WBZh9XH4I\/Pv316e\/PKESYJVleeE26LLBcIxd4dNnIuqp1PhfK9bninH5xzx0ezF48ELTja2eCdLbWkDXz\/fHYKiXNaoICSuvznKbgNIne4evxnGEXwejpMA5EMysQVXdFlssTU4W0oVvG3ZFXh0h5JFvroa+uduamvUHvdRUopsQHLeB648\/h9GKgxvMV4TR3Haty2ATvW5FLpxzPGo4741eaZwXiFZuYYchGwRYb1TZsZiN4CzZk3pcYy39vbrqI00tHtCz\/DZpHjG\/xpdLKDFPG8+zJg6aFQTQtUrXHSKXGmk2Ecbwm1eopDJoHUuvVnx+XwYff\/\/FUz97uIZXCzPTrvnssdBOmZpkUO3Kg65l\/WeqNjfaED9vmHdrs+78AFMxlHuxHWECzvjt+zUglFxuu6rDvTw3WMNNYUrmqA7H4NfCuD2+0sXzvZTT9vvdd3xLb4\/vUf7PTmZY3K01B59q09yobZlyHrfNt2ntZXf8Btumlo04PAAA=\",\n\"dsl.h\": \"H4sIAP57zl4C\/71WTW\/iMBC951fMaqXIKVlE9wgFqdJedqWeelkJIZQGFxwgjmyn3W7Ff9\/xRxJDEmirVXNxMDNvZt4bjxN8LUSy3ifA85QGQVBKlq9hlahkqV4KClNIN4mYBEG6S6SE21LxfaJ4fq8SReE1KMqHHUvHAeBjfaXiiEgrd4mGLF0mQiQvNzVuDHe3v5c\/ft7dw1X9OsMwGucIIeU7jvHt\/mo8tkAly1UM32cgN0lB0c8YHGdHtBGwGMyaRTC21uQV97JDhNmDe0yQoaCS\/aXEGM1HC8zMvl4vosmJ6SPb7cjIbR9sdPqnQCqYOk0j5blUncmHBr9JzP381LwyyfPr6\/H4F64QsrwolZ8Bik6FImZ\/yKTVkUSRk8pGPsVxhUIo+LPEHrDeZm\/JFN1LcpR4rzvWNEJ3jYJ1nwLUCEbfDWXrjXLWQ0NYFMMzW6mNbmJEcptN5JrQqfOOa2Jxy7gelelpYXGvnJ+fzCMX4DoPQUYTXG6cGb4PBj65HsGmRrboofgyzRVNbNHH83EwRwZMXaGn0ZoyMltGhmVYSiBrV9GdIIRPyc5mNs8Wkw4PpHTOkEfL5wAyzTw6DTHyEteSnpZwCI7fXJM3EyvkBRXY5YJErQnQJC2oKkXuZVArr5OYdEOfQbbFvxvfzbXzI3IGa6qWSKKL2o5WnVLUqGpqv88v4mNXE2+mBGe7oDLsbAREmhsRz1buseuRhb5HxL+NFwxE+lRwvPhZf5CX0eLiIa8MO4+55oX9B1467jn8f8+fqG4Q6V82D0xJqm6aasw4bpPUQpOv9WT8VpGUJlKZi2tmRtUw5WWucEg1I\/PQz08M2zfSxB6BfHGDrGvGvL8hPQHINtZNMgVypTZMRkR\/B0TtsXQIWlvbwaB\/DF3q4265sBEuyKUt3iWXd391CafxauEO\/ce8lusiuUYuDYtn\/rxcbz0nvlwoz\/aT5TLrA+e7etbjDelUOiE+THKuNlT0zn5Tp75gneHQboShnQH+P95HrsvvibMVFIJprVoBzP6S7fEjmRjXGNotUH8EotL\/AAW9Jq3mCwAA\",\n\"static_array.h\": \"H4sIAP57zl4C\/9VWUW+bMBB+969wNamCpmuy15DsT4y3KEIOOI1VYzMwXZIp\/32HbRwToFHabtL8ArLvvu\/u893BdIqmU\/xDEcVSTMqSHHDKSVU9wTZCX4qSPOcES5FShJCiecGJonihDgUVJKc4fsQ1EwrnZJ9U7Ei\/I+2OK42YGMTfCMOKsVkZUSRZtQ7rSB9qEFjNVhIhVNQbztK5PqP7At6Z6oAGjUN1xEs8Cy1Bs0raIATVMTS4J6QfA56PENAr4W85N2vLOA8au3G8VIqqG9wCZHGK4HsipNrRcoDKnjzptIHiTCtLHGhRWJNiBI+FFQezycSHOmvK1mDbQrZb51ROfgavkmUmOS3DpY7v5wewEcqrOsmClkQB8\/I\/0tSjV3Up8IPasapTLDF+2NBnJgJgaK00UmT1AQMqst4xnrTRdQT04MzGMKgzNtBDpj0CsG4ORgN1mNbqLX4ttL6Qnp0jbew2UnIMg0Ud+oZ3w\/m7Qlmt7X1me+fr7gPGEC1VAGftNXtt7Ue8ApP1xY0NU3wKuO48W6saWtBfuqoH8NsjvFi64veINDHUZ2vW4TlPa81ia9hOaaf8uefGmq7j6DXepd4aDvKCeFRZ0\/c3XoNxv\/T677YGBPeODjouwnlCf9aEJ0oGdvD\/ywQupuK1mDVXKmuhxoLVFibY2ccinXxWpG35ZPP5thapYlIsGk2DOIS64STfZOQvJ2JIgjaf8JZMbuyXu4\/2SzvjAv3F8Ko87I+Loq52yYakL0Hvp6V2P0Jm2Eb93xmY89+8faNOdex8rd3kK2RhmHyS2N6QOehTmDH\/tUMzInOMt6WEahkVxOgRrmaXM9lGdcXNzEQIxbmfIvQH7i1\/GecKAAA=\",\n\"dsl_tables.h\": \"H4sIAP57zl4C\/2VVy27bOBRdj79C6DpogFl22gFkm7GJ0qKHppNmNoQs0RJRmtRIVFK36L8Pn4qSLATD95x77oOH0u3t4vY2o60YsrOQPLO\/5Wh0wxXvS8Pr7NzrS1YP8mPVdTdZrTOlTVa1pWr4R5u6WAym\/vRpVLqvec9rdim7zz40mF6oxqaUpmTm2vG\/sxD6k6vxkn3Jfi3++PWh0t2VVVrqnp2urBY9r4zQ6sNNtsL7R7bCCBO2fGRrSMCKQlz8vglpvW2QVS2vvnsuKQBhqy1YfQ0EdWontFhu51AoMqFBeU4Q6g0FFu9JoedauJlO49Sza3cND5TA5fGl3bMUnYXvENyHQK+N3a4NEUxzClJjUYwzt3V28jv1LUZBwO4I3rElJmtA5n2c7SOUXckwdXFnH1jYtRyiel8+MykUd5Q1yR8YggV4CzKj5zCj+F1vvuLwui1fMmqNSpirhY8FpI8hNHRSGHfArY0f9ghSd6bbN+DzHHwIoLVTKGixXb4PheLkve4Yv3S+2IrgPQO7farowbNoxp4n9A5ujgQk2e+ctVr6Zezyr4BtMUrLaPryKYywIfn9NETFpfTrBQhFZijggkE8hu0Vaa3RnfUw3cJi8+qoppx4TvNMV+NZDJz5gV2lB3gALI2sR9ONxkr0g7E4PtL9kVoFcqCvCLKc4yhPcClFo1hXGsN759ccwU3B9jmlgESr2js8Vt6ZYH1cTeuy+2SXURrRyatfmV0p2x0RhXsU92O08zjF0eInbYy+2MgSU4p3ISj52TWGwF3sqBdN6yIEbrZ00mGRZ8XYCzcoJizIzmCXl+Rc4kwyZiY0ps4I\/In31+eWe7eAe0AeH7YgmaXVvfiplSmlBbeYwH9xQXMUQJtoROUhm0bhKgE268nfXptxn25rLcpGK89ew3yDi8RWWnHvlwKkluPlf3fZk3MiTzQN96e9hJsNSCc9XEopQ\/ywyxECLxaQ\/uDR9K7jP8IrDnyLZxTM8+KaMMY0Q6vjVNFy7l\/6U6raqRfruNb\/Rj8r+OeYBv3h+d9SQiP1qZSsH6Ubf4PwMkeMHBF4BQtlDVv6L8MbKiysdXP\/ZZilVWWirfIU\/v3XYvE\/VDOS0O4GAAA=\",\n\"helpers.h\": \"H4sIAP57zl4C\/61UbWvbMBD+rl9xq8kqBZO0X+1tkC3tyMi8kXZjHwpCtWVXw5aDXkqh9L\/vJCUlY9lgYyYkd+e7e57npMt8TuZzuBoHCd7K1vdgRu+UlnaGLwjJtkZ0g4BR15IQ4q3SHXilHbwGr63qtGwA3ZKQetTWQduPwsHl+pp\/XHzDJOuaotB+kEbVvFeDcvZVzHlTFIN4oAwridI9QsL9qBqojbB3lAHnwjmjbr2TnFOqRyOdN5phwZF08kgy1epGtlhY90J3nBPAZ0oD2SmDMyRzVpJM6ka18RXnt171KJY7I7aByRMJ09g3qpYXb7+8J5mPnrBWGkcyQCegJ5+++1QtGdzEhqoF+iJFGDzuguHZGiTR0pNUo0YNpxN7Cq1QPY4P5zWxxaS50Sc5ZKE8R26Xq\/UF58Faryq0WHnQcKd6H3qKtGVvZTSOUUwZUTshcXJNZEXTsdV3wsDUOpPDYaCRtv450iLlPJw4hDMIcz8UGHWgGvxENSk7ZOaQeiFEGvQhh9DuXvT\/C7v5DTZC\/IqdAL7bUZ+fF8UH\/IWXwfs3MvG6o8awJraModBs1vhhSy0r\/3Zas5pjN8oS72x3sMvPm1V1Tb8uNmwvA228PPH7yN2JO+bACLwAu3mj3T3TTruV2Ick3L9Jyoi4+9q4uPQPRfO0\/3SzqJbhDyDS\/gHFLtt6ZAQAAA==\",\n\"json11.hpp\": \"H4sIAP57zl4C\/71abW8bNxL+7l8x9QGO5MpykrbXQnYMyLbSqLUlQ5KdC4qesF5RFtvV7h65sqMLcr\/9nhlyV6u1\/FYczkglkZz3GQ5nyO7v0h82id+82aJd\/PMD0pYCynS8pF+G\/R5F+toEZknTxNDJt9++edOg1CS3eqLjGweRBsbyIIgnZJXRQaT\/HWQ6iZue8GimKEyMouT6DxVmHl9N6HpJGdZyFuDsZGi1fsF3k9rE3zmaUalRVsUZBPTSMfXbIFqoFsWLKGrQdZLgM17Mr5Whmo4zgtiTZHEdqXqDbGZY0JrNJq2WG2A2MCZY+slbMEoMJhPDtD1ntzYP0nquUkkuSAOQSP+pnCi2xUotKQxiulYUWKtvYjVpwASp5u95cuuGc1gOVmDLqn8tYLZsmfM1E2UapLKwydaD6QL+L7IJzVSUQre5ymbJxIogrdZkMU8blCWF\/QHsZMRc4PVusIdy4Vstdpti1eCrsM6AbobBC\/NA\/JyS0zY3QDfOlImDKFo2xIe3gdHJwlK2TJWlZLrmORa+8N7K7wxyxSajMIKZmOxMK4RCOFvmfNoUJxkiJ\/ZOtbTnos6mKtRTDWZMyi7jLPjMfL3vYdR5kGWswvUiYyKk4Sqr5kEMfW2DicOcNpkrR1DP00jNIaDErqWJtoy+0HYGP2Z3SsWEgFI3LATH+jRKAobYSxMONC9fg+5mOlKOPGhPkvhV1oS9fGxjHfrOkgSmluCHlMo06ViFwQJzDwtUi4O5ipbiweA2sKHRqWiloin8Z1QAS0dRYajAmwZY4pZGWSU2DK9mdwlFKpiI9REDwjmbgdSdBi0E8K6FOnEWLXchdhDfOP8FZJJFPNlDlKSAx+Bmhm\/WqiI3e5JOGRFA9hsaISJvEz1xXIy2fzby1GOx9+DQihJu+4rt84hjl\/JuYNI+m9jcOX6H2DyC3icmW8RBphjR0dpDKIbaQjrqdjqdH3\/4nmqv3NKrumxcBwAUJ5MknJy+jtlyTNqwVvTt\/t7bf\/7wnTg+nGE5jBYsj7pVSGqvgPaK43ee2AxxajM1t02qjfRcYe\/NU94tGWKLnQ\/Yv3\/vEgBFCVwkH9nKYoo+vX393U+\/staQdn4AR3j7sKDs1bkODdwQJjHSAxJz6GNKpUk4Y9q5Y9VnTlycfaABvf3xB1oqZIBmHUD7W1v7u3SSpEujb2bIgMgQb1+\/+Y5OTZJeJ58bCOgwt\/CFMnNtxZxI4ZyuECA3ME7GeW5qlOKNieAxN0qyFFuTXSQZIgt0LJmGE6REN4CzGShZGOZOEh92GxJEEuqA08ckCRdFfNEU4YnNwbbZHnqM7brwmaggYoLOY5SvwgKI1AWfKJzlQibT8H5jSfLlSM+1Z8LoYol8n8BbktGXnM8nesrfSvRL4Q1sMLfbjEaoYtLyZKhixoI2+zA6okuEk2PBOqVXMgqYJGU2bubNZXnmbpbM1\/XRItV0YWIwVoI24dQmfCUDY4YxpkkUJXesI4eHlv3ZKp3SwTXOJlHLuR1pE1I7Udgj6crTfsnOAhdNPuwn+MHUeDbXzLAYiHUk3iCiFPtR8llF46Ja+NChYf\/96GN70KHukC4G\/avuaeeUtttDjLcb9LE7+tC\/HBEgBu3e6BP131O794l+7fZOG9T5x8WgMxxSfyDn1PnFWbeD6W7v5OzytNv7mY6B2uuP6Kx73h2B7qgvPD21bmfI9M47g5MPGLaPu2fd0Sc5Lt53Rz2m\/L4\/wLl00R6MuieXZ+0BXVwOLvrDDoQ4BeVet\/d+AEad805vhMzfwxx1rjCg4Yf22Rlzk6PtEmoMWFA66V98GnR\/\/jCiD\/2z0w4mjzuQr3181nHcoN3JWbt73qDT9nn7545g9UFIlGRIJyZ9\/NDhWebaxr+TURf5HPqc9HujAYYNqDsYFdgfu8NOg9qD7pAt837QPxdN2bpA6gsdoPY6jhBbft1BAOHx5bBT0KTTTvsM5OCtXtWhTZdb\/paa4GYeIC2GCiMfO3Toio6j0owryMozKMPWhmqemGV5Bukkc0WQGWMnZkfMYTpRUxqfD0\/GV2wz\/GGumKDDd\/Tmp9evaX+froaS6QTGw8WMHCfqc6jSrFiQRazoWBWLchTe1eorbIV9Nt26R83GKVTNphup5Ys0zn+NbZVi6WfOg+sDmwbYlf48\/bK1pXCQSqF1IcXdF8EbjhCp7QF2xUn\/nKN0uPX1YGtLqrBVVbY2gzSLsxf4kt7CltCBtUZc78lAOPHQM+G\/3uVZAx\/nx51Bg477fYyGI94bHHODNuK1f\/wLYksQWARPtS0lOacdX0Fy\/QLjOE5+QKWK\/ZBlPHKl\/MF9IMTMYamqbZADd8RXbE+QljKzYIJWDsbNlS2XSFLqNwWRadXqRQgcUOUPhGGHFagIwu1KmplxtoZYBfVHuzCrH9ynyoZdQXMVugl0MzS3Sg+AA5qdtYIN2TBrfcFOjglY59KKgjnczhqLDdCONlcHeTNXyPMgtGvZHGlboi1BtQL2YBW4B4AdZR9v6ygALsWpQOdwG2ivoPO46qIi1iFO8XAVYC2ugrJZXm9wz52M\/3ChNF3EoW+gOZIV0FH40KHbjsjh7sc7FDhhxHFZ2xm1Wh6\/flTVaUQ7hDhrubmsWTCq05evTwiJnbMnvW3e7Ba9cMPFwyKWZlVNxjKHlrW+UWocXSwp5yiHiJ+I7bGeHhbpQua1HRcSaECsb9xCY5nlERxweH5Uqzev1Y2GUntHU21sVj9CbmDfFNR3dh5gwGZ5HmVXVhekG2vZG9sPC0wCnnl9zwvn8MK88IIzZ22e00b52EQah0+e4RSX8zb5hc+7Rjkx+oFV2SO+ufrLvqmYbnfNdlcl2\/01m13BZreFzWQ7125XJrvdZLKRFKoG3RffFLmEhP5nLF26MthdBvVzEIZoGtFDoJ\/kZmqyCF0TwmmxSZdW5fSKZLlOpk566lrYazULbjVOC\/BF36exF0oHgzRuu3XZrJHKVOmQC0OFpsa4Q01OTjFi3TnbA0qaht35wMASuUX6guYlQ8Gfo7x7xyfHAX2tIHEXnVPcjMSnQhVP1H2UGZ8PVSy3Rx\/j5rJ5Fc\/5tf4IN0nVVTS\/hR5h59Iw4+U2H3gQnOsK9SL65Ik7c5w34UG5\/nR2a9BrSgBq7rRVTerxRZR43JdXkwQFAfqgnPgjN0ZSy8RJvJePV7dZ7tdYpIDYDAigfJzTlttECCNXiimSgmvzAu\/APSl3Vnd0+PO1Q4W8Dy2\/98qc1qLu+aZib6gASWAaRCgwV\/Za+Yo\/NgnwABNfOaxxydP\/9naVw4bSxH2\/iGORL9fYxq7Q4NtgHiBrZkuffDeL4QsO+Rprvul5Pn8cnxXmzpvr3BlqI+u8IHHfVeYV7gH2yhSHNl8OcRQZ85v+fbPqvrrdyFMagx1KUmUC2OS332sWXdcYYfWA1hW+kPW3P9Xy9wf0fhnrDYEA2vcsMMxvyB01Sc98fb5etSaLbE2F8qJAF1ln\/YD0IEA\/KBYEngmupnymKsBWCUratCZ1p\/42fhroyDZyBG8Rfx+mb2IJDGMSfhCwNrgRs2Ki6aXmu31nKyG3yUjIAetn8upvHQ5kHwJcNZiARmFxs8R5V0y2WnnDWT94VC7fBPw\/BSo5EEGIFqo8U3KVE7PEn0EbIkLBouTgr6QiqyqkAAwptvkkh47pIts+2MTKt4YlYlurzzxEaL6IMp1GRQHIt5FxCDliuSOVC0YIHfj3lrsZMoJcDpQ9cL+DFj3HQrxWCPBU1JRW8C0pgKuZHUfNoDBIUhROdiNG1ZEviKWyKjqO5Orkf67RX5Zvc24oG6hinnv5oSw6pLtnzo3h97VUN+bpEbVQrZw3zcyupbc14EN6AfA3D1JeFWTf1HYlu0MKXl6r4wqmz6KDWTokobaZzBE9TYaeQeYFWh0WSrkNukuzALXwLEAVKndG4iZ\/I7jrv4oywFTrKbldyt9NY34\/4efhgB+WcKTLU4YjOpOn2alWEXb7NKfLdcWNRu8jYHKQoEItDhBXpLmX+kwSkhSRaFvkNRGI+UHS9BT379+mVS9YXYeeBtqs9+rc0hwdkZiiFDor8\/hdyL\/5isLpdW\/rrY7w1OhbhHqrdCTP+Al9jHR5WNxbHtF8LPmTLxS5h\/YPh\/7WpHhi5pfk4gW6eMs3Sh6L1edUSjP31GNs8SjVvug2qzelfC1q0B2ESLZOuKnRaE1pBXeweRqyPbByKuW7W7zVJltAAfdwf69T5NZ5HVDsLP9PgS3FsZN11xVUj+NGCIIXYz5ZS91HebJJyQEfaFbuCf5Qr5EDvahdWEdy1n+qxL+PAws8USBv4vN4Pf8MTk\/Uw2UK\/yl8XJOrFN44X7nUqL4obP0XXIVzvzQkAAA=\",\n\"json11.cpp\": \"H4sIAP57zl4C\/908YXPaSLLf+RUTXm0MMRCcTe1lscMVsfGGfbZJ2SS5rdhFCRhAsZB0kkjs5\/V\/f909I2lGGglIcntXx+0FI033dPf09HT39MzzZ+zY8+8De7GMWG1aZy\/aBz+zk8DzJ95dgw3caavCnsF\/7B0PVnYY2p7L7JAtecAn92wRWG7EZw02Dzhn3pxNl1aw4A0Wecxy75nPgxAAvElk2a7tLpjFptAd4oPG0RIwhd48+moFHNrPmBWG3tS2ACWbedP1iruRFWGXc9vhIatFS86qVxKiWqd+ZtxyEKHtMnwdv2Vf7WjprSMW8DAK7CmiaUCjqbOeISXxa8de2bITBCdJhIgPUK9DYAUJbrCVN7Pn+M2JP389cexw2WAzG7FP1hE8DPHhlLsIBdw89wIWcoeIAyQ2MEBMpzRSM+zIR+FGUlwhPvm69FY6PzZRNV8HLnTMCWzmgfio3898GuEThJh7juN9RR6nnjuzkbWwI0dxBO+tifeFE1ti2F0vAqoFKTgifjrS8lW4tByHTbgUH3Ruu4gNn8acBUhGGIE+2JbDfC+gfrMcx9o0ettnV8PT0cfeZZ8Nrti7y+GHwUn\/hFV7V\/C72mAfB6O3w\/cjBi0uexejP9jwlPUu\/mD\/O7g4abD+P95d9q+u2PASsQ3O350N+vB4cHF89v5kcPEbewOgF8MROxucD0aAdzSkPiW2Qf8K8Z33L4\/fws\/em8HZYPRHA3GdDkYXiPl0eMl67F3vcjQ4fn\/Wu2Tv3l++G171gYgTwHwxuDi9hI765\/2LUQs6hmes\/wF+sKu3vbMz7A3R9d4DG5dIKDsevvvjcvDb2xF7Ozw76cPDN32gr\/fmrC96A+6Oz3qD8wY76Z33fusT1BAQEZPYUpDJPr7t41PstQf\/HY8Gwwvk53h4MbqEnw1g93KUQH8cXPUbrHc5uELJnF4Oz4lTlC4ADQkPgF70BSKUvD5A0AR\/v7\/qJzjZSb93BuhgtC6yA4qD\/LxS+R+pLaz6GbT64KC19P1q5flzlrw4msKE50HUrSiPVla01B6E0cyxJ9lHtqc+oVkcdisV11rx0LdAaUWn7KFSCXF+T3E2hBFobsRW1t14xv1oyV6DwWsfVirrEOcLoO10cD67i0P10ReYXV6gPVpZfub3LR\/DPAn4THsOZg8nhP1\/PBiDxYh0IJiI0PnzZ+wtd2DawdQNwF75YLLA8mEzdw1TrMk+r4FyC+Z7E2bkUsAH62kEhshZh8DZyrcCGxgmywqYLKAXbStNviUhD9FC\/g5tPljOGsyjF9y22EcwBJa7F6Gpo878KBhHMNWnFjwhs4riukdLgAbAC2aAfOJwMcaCCnYBgFfiz4cKg8\/E85yEjteva2mDuhyGB+AzAlvG4Ck\/ZI95sKMyqLnlhAT2KOS31f+QnSse0HCQxRd6KtXji2fDqrNe+Uq\/DSa0gT2FpaIumcNVY\/81q6K4qoeVRwOGmQdLAWdfUNJGHPac1YR+hHNUEV6jtvX4PX5wLWWT9fzTzy9uDpOnoesDtmhegzeAGhQLTCz9Xf2pdfC3BZhOgSoFkQRDI\/HskXGQntJThiNqY+QLJ08xU3mCy4idZShVqTT1TcpR3LkEpwbs76yKelVlHVYlVSkYJ6FVMbaNyPeqe4JWnKc1ZAfmig1GpH0IX0ei85bD3UW0rNXh2f6+NqDUG0lpiqaHmn+ylcFFtcBX0NX19Z4Kqw7TNXyqKZAcTgW2WgZaLQW9npTATspB5yWg83JQtwTULQcNSkCDctCoBDQygwoVGsPCFR2tQbVfjaMu4KuzI9CCu4N5FmEyJ14pw7xhalxfr39qv7yD+QGID030JVN5W+peI3X8BXv6lBnbSFXcP7iRbV+1tX7lZxP4ixjcelUs2fWL9otXVZ0vG9+9+A\/n6ddynn7djicjiulSaVdJ\/1UNT7EBw1W907GCABZqYcVCoxkjEzq3AwB5LRZebUH7VFWsm8BsrSGoECjBlgrUqhRwgJ4QxrpRMqDNKWPCPBLdSFT6IiZJrOp59qs31c3seyII+g7+H4r4v\/3y\/cwTvbdfWtS+wXQBxBAdFQIahxxDuG8S2aMQGclKCIiwaFKRThXBrcbg+jW7SlePu3lW0q0MLB+dTeFaRXzlOxDOsyNBwuje5yyyFhC4w1\/oq7NRtzJ1IAyQ8B0RWk8VT\/Wh4gdeBGPLZ50K0QoxxDGSji6ah33Bh9\/5AAbeKgHJ4RtJdagD3tWY\/pSOFnt4NIEBQAxBnxQMffXUSXtMCPmNR8QMskXPVE7hn1osZoAPAnumGoDYBbYW8Qim7MUefZhqLv\/nGkZbUXohH\/D4wcsPNvcjWUFrplo8AUa4jmhsRl32rFsTSJtdCaXqGFHj8PAH0HL0HaRUUqdqxLR3qYUw6HtKlIwR5dSQGOTclLGF0E1k8ET49OCuW06qpoJWMeYX78\/f9C8bTHj\/Xcm0jAXc9WoCMaBQJgMpulziiAgdbvj\/RjBViNC+GzNT10KrXRXIoDjUstnVuTncXi\/Yxk6OWHEnQugdfeamg6PFXTjnP2RmvD6iAxDuFsOJ8vwrxzID9l8+cjAIaVi5eczeAKHccsvG7c1weNYgjrrquo\/\/7CL7QoolCUpAupnsK2GGSqi+GmE6MXZbYsr1AFV8\/xAmBEGmANjETBF4DJhZMz8YV0xdIj3yVksEgpnaPxqqb6sLRXN66Wtsg78Rbj+zUjzsaZJ2+nSTBPZZRIfF4iRuCr3xrUQqUGjA3yDWofCCS+Q6fPN7H1PEqtdskmzsT4vvHyVbXeFu+f0OQha8FTv9W4lZItHBv0HQmCQsXz3ACKWZRJSwyliMopYS\/fCYdLNTRlMERQvHm8ASwZrSF2hiWrEZWnOuZmpF4zBjXTDrTalrjAGOEtvfFenn10xJbh\/FhHdrMhrZiCQyYJA2tFvDKGxbRPMyRBQIZTCRkkEIEt2P46x++lok9QlJVzaK8\/xpo5XlHwlQMWHilpT+x2ZSoLVk6LTNhljccYqB2onMqKkZjMujQBu7dWrYq00p6fC5QoUe4rhhhBt4S4u2ECechRyiCAv3JjF\/b7txT404w0\/oAIE1ncLiz8OUzhaibuVppf7Rb6a+NWqVpzvGjno0h5GjmESSOtfjd1PuR\/nkTUfErTWdbBoMBQPpVLK7oePbDoPuWJppyKqm8Em7qglRMCo+TyFXWYwDNypCpzojReji3HjKagTv0l\/zLFKjd7CBRuEZFJFpdBi2xKjaYzOllGx9lhXDt1FamFmrF2OkJVwiDHMYDUt7WN9Ao8SYsh7WSynVk2D1QrxiFdxAqr46hvVyUmOUeVp3MgU9skQZO0DZFPGnzKkUfzI7hTKvJcAOWZpklVNaYM1EdLtgzsc6OLUFWjXcYzvTrEAfCppplgvUWjizK2YV+JAw61Nd9pGJN7bBrIMcJpi11fapOq8Sz3IDZq3xYUpzfol+qk0GFb8Zs94upVkutRJZ4sMyJUAoorn2jHDXcXdPkdlGzIXucR4zvLxR9TlWaMMn8aHKFT3TUzvWZfNHQVqm5iakpMabkJYpeFE1QEaLzYjLtDqDOF0bNS+ySKuzPRXo9zY9SVd0o5bLnvKqvnVP6MpmFbNoTPKToF7ejXRQv6kDfTDrGzvIzy2xJG07w8iVpQ0fEGOAsYbQkRZEebMattS83ZpolTbj0AoWvL9nfPMOoQPLSHs56Brn6KRVvsjEqNThjpPNummf2Aw7NcpEBL+456jH6FRysLOHrpQYwbqsrERpnQ+rqaxpqcmUfjJfSUKyJaxZbksk2ZxLQOI1nD3RQOPHORRyZ6yibToQgEymKkhaCx4BCpKKgbOjH8eYsl\/3zZzpQEcmGCPflN8t4HoXXXhnBVjDJhQBAHk4rU3rsrLz1AtWVlzlwsK1HVm0beIFjAoecNpBIGq5jAcBPFwBUdYiqSejSNN2HdvlSQCP6AldrtDoIC40Ki4UqON0ad+9aBdu9E9l8cbftOKNkvqMvZ+me6z206yOFRrwX72grKoERQxdV7fVkklMuVVoWFfDfykUUk\/bHQeWu+A1xwMB3TUYfTveVx7Iv9e4CxvzE1usO5QFtUJh3CHboh31k5ZOPuCooq7jSPNAjqxMLUZLGN4osKa3IRUAI3lU+w1DartNP\/AWAYwp8xFWKxNMMcrE2YPc7xRJLC4EB+2NmW9ZUSbtovwlX4MqHSo7\/JbtYBmmnoeknhECelrcHyZdY+vaKoR1FbCMQVRg+UXeQU68Z\/KLnVvBrSyRJlxWKLtqaZSTkSCsSbQL6Ov5PVDRM4ZL+L4R96ptb6Y76OqOOb4Z5ftoJLuhkpV8tQLRq5crQFv2Oi1IJWKUQgOC0OolFBZkP\/r29TMiY73i469LWPtIp2pZYfZmXywXdG0NJsGhMtXpOgi4K0yHNcXFFSTtem4zxaILmnZ5TV0pXMNjsD4oJVj1qOoL\/vfnn0x5cB3knri5J9GeLjR7f7+I6am3woMLhRzL9yEsKs0wund4PLWxAn+1dkAe8Kuu80qKneshYVS+psfjubd2Z3ptSGwhE4aea6VvCTepk0FFAkHsYCi8q8pbXbv8zqfSDAbuD1oB2\/XXEbPmOH5gGoKIjoUIysDiqWnaIrIwkSlFIgErBsGLDzS1NE0CgvBQh4v7+IFGlAIltcKm8oOYSbFAEClPzDWJmb4fK6qTrcteny1pS6WsLWH6Wcx0Mvib+ZaeoEJ+84WuoVuNk+2GuItDHTfVng1DZRD21PGomj3ybrmsVNEE\/ERnM5Hw\/kEy3BtkvA2nOq+5Gr8fxLw62tnSvt3Gv2gyrSwH3KQVnxXSEeORYFqnReZoYQUTcLB+jAEmG4WPZNclBjnpNxlgk6lOzVMtXppRM5IFu9M5Hp7jGZsrVVE2mzus1dA0K9s6Z0uzs0sulVLW+lgX86GONU2CmtZxZiTT0QJXfIyma0xTKTdYlzIsglEiA5cZlWTEWmwgDlxJRcc\/pbKHwIk1XfJZI0Y6d6xF6ojjyMZJGn1Yyd3OEpipa9dGXDfvuiD1ei\/A3K2161svPtuZtWrD2EscFem+Nlij\/Zvs5OHu1Jvx8Tqav6r5slwzMyR9asL8CP3A96PT5itxhHE2wzMzkYcwhumhYiZP3VdOmTClWDWWBnRwxNomISjspA3vXrULypTzIvHVilKl5DrBtD0qhOl22S919idAHrfNdetmuKcA8fOpgHzVLiXpoN3enaiDFwJ3f3uqUnYKiftutnZk4pXAdLozE8j+N3LxrxVDZs5RUCVTrDkDKKI3i8U5UHIt6URxpK1dPjgkeLRLn3lyfuk9qJG6eA98pOSJkBp4GfNwavl8NsaJ63uYEX\/NmgeH2RiDShmy3swmc7aDpyapxLLyqmrKEhNNh4pSi5YjpPB0EDkmql0ycp0tWs+QrwlPGVlNFHHeYrpssHZDnJjZLBBBCauyfZkMqsNf1Q0ioWoIcG\/CtQW+ggWuBK2aMbJkyQxNcnpiPoH1fYLaSplKDoYo6y2ovupfGsQN7L+F9QgUU\/QY\/pv0ciuVXBslDSz07zDTFLGXzcl9FLPCQv7PNQwDz0GkGUMmWcMz6UHNbrCXhgGhDkRtmHMPtPLpLROn92LfScADzhYpU3q03vE834Qv4A4dh3fVw8RSkhQpAZYID9i7Fpmvi\/dnYD+4a8IlinLkad9PgrCbFjtGOvEpXsIAqGdraMYmgR1F0AYgWjlkKGoQSnI0EdbSlyaJ50Z9Ys3Y9fVaCr4TT0E51FnQx9wT9aDkZ3FQ8jN2Dl\/62cgstU8SUwHdffp802B71h78g2cMIYo0vO7h69O9eqVso90M2kbQX\/fqxbDfJZS8IfDocobUAMD4Rp5DQzSzIqtWb8SHsRvs4JfspJLq8fvV8IKFMCftOaoc5WVTq4YGhMJb1Lg35+\/SSxyEAcPLNmA99S07MCEH\/X\/ZXPK75sxegDubcBsKcKnKNt76ANHDAjOUiIqOonsuprekopqQg8LjLgT7yvfwYgsR16zsGVor6Dhcg1mwgFSwlx165wf8i+3RSfdYaF+RfOO0iS28w2Gcakt7ActFQmUjvefCRv7BvED0C574V6WReQKlSfcCq9++OwGXmb7fnJ4WKxMoYboQauDHEvwUwItmB3B4yfHehBXuq5A9+eplhgHP+mMEgklFDKudpu9YrhInNvCWjyL0iBMDmoNfmOUsPDAsy1XL2FhdC+FTsMA1pWTA7Byxg3b5DKXPn6yWAQfJ1HHVlyFA0RK78zJr9MW\/f6kvpSP5eytjQbmml9\/oBXwbB6USLFrDJ8Y1PD7Aej3ZyxCaO449L0cw34jALUfgbkQQlCMINiKIyhFEGxFUaeMhvQJA+fW8DHfWTSxUa20hs90vloM5CeFWpXk\/xdM2rGqPG0I4UWNUGMKJOiXDnpkOrYZnwoGgmG8MER5oop1Jfih55qZpq6ai2LeBG\/EFcAn9RUVI2nvbJaZjOy5AS30JTfS4OOEi2g6pNFtcABXRzUryeFlYNWdC8l0exF1uojje9tiBaA2HUauMGhUrkOghCdcEZxpjxmHE8Ku1l9mQ4dkH\/b2KYWmFuKaZqgrt7auJCaFL3bgmfMUDeCOuD6KTk50OeTzhQTsnzyRnCJBW5NlIbWuK+YQacpj2aWQPFO8EfLUV3o5Vonit7RTvyTdrHniJDnpW5B0I7y6AeMoOhPLN0QTYnivJzEV0361DmkQg\/CJvsVQkPLsb2zfLKCckBWQ\/i6O5V0DoXydqLpn\/V8pY1VmKMmZFWpuEHPVcMpwCf4Rr4G16uUQ4vRbxxx402hM4wyQ1lywr1AQdd7rPKgATSPsVIJaZh1c2yM3FGHG6eaHsTQABBARWs6HvYBhWFEm5XksS5zFEwQVxpGiTuJEMjAhYGG1jotnM7Vq3xMVbHPMLMdYkxk4fiftDciqL63YO6tBkcYDEXYywqE4hmXSSHoRJjn\/s4+0UC1h4qqQCaqIkR1J9Y872MxWuFCz3FKaK+tTCNf9zfCKGbmXL7oCIq9q66bVt9TLu8WgPx\/gWmtur9Yq5PKRUC4EWrD1p\/jS7z2XcyzL1Lqp3Mm6J9N2aZH3wV5d8C1yn4AcsTcZ1W1U1pQfdPypcQ1Nf1IRETglxP1aDyfN3JgTzcgTiXq10h9qEwi1HQfeNKXVPFXO2ulgWcSrfDPqQWybyVdSYbjnMpyyLtSDTx+Ne4RogUJsM+4HJk1cyz9WCLFZGz+Vc3ruGqMF25RxLp7V04E3ZI2kKb\/k98JoVpYkwk95v0v8dBJrhv7Mb\/51d2ceR+ZQWvGFp900iCLJFwuTss4N\/uzyKlIzKIGAJvS2VZGM3STZ2leQWvDxWCudGuQH7lJu+2nGL7525Nz9u5mbtdaxjLX8dLscTa3pbM+rWf4Ry3fy1yoWXoP4o1cJPDasq6rn8x05KZyZY3gaUJ1Xej3lYeXz+XC2apsOK8ugAjXfG8bTdhlqx3DCUJcfqpZRK++LrgSF4m6qU5aLbSMCYPDYeO7RrJ4rtWdBSVK8dCxqvmKLtrjlV\/tyLPDhSJot4qJVEUFDfQ2UZokVWYzNammlNvrXt5vYd1aVd4NS2HRMS49Gw3U8xxpt65siDEII42gCBt7xMXMRd6XXEFc2iKCM3pqLA\/PhtSl0rm37wTakGPLr6VNAJi6znU6y1GU+qJpva\/nAtyhBL23aVnP2l0\/7wRLyS9tE4wrTrpmuKYkVjPFljmVHcjCNeoHiK4VLTDKqu0wEYucYlbco1fftOdXyqCGPJGA58pJLc8SDO1dLyeXMq94NzB7OWVogHtP3EDuHf7CldS6dckIi6kD\/N9MQOx0JINS1AEacFUiuphHepraT71OqHJYeftNvb8NDdU0QiDjAC\/syR3PRaRnEhIx6pW7GO4CR\/xa48xCfwCCTiEB\/+KW5gzJYcRnRwK2k9pcN8GLTZUXx0r5We0iI84mnWIZDywT1imvpINYok7TpOhpoEZRZWLvLWTsnBs0dU8uzV55X\/B0Hf1JTdYQAA\",\n\"dsl.cpp\": \"H4sIAP57zl4C\/+19a1cbSbLgd35FmTltVEbQFD2zOysBc3CbtrmDwRfj6enLaOsIqYASkkqtkjBqL\/99MyLfr3pI4HHf2z4zTakqMyIyMiIyMjMycu1P6bg3nPeTYK87nXYXB2vKi+FNNk1ntyPt5SwbpT31zVU6y5OZ+qY3TEfkpfYqn\/XT8cx8NUyvrFKZ8Waajm\/UV9fzcW+WZuPuUH1roxzPR8lUJ3U+zqb9ZJr041F34v5gNOU+6c2y6cHaWi8b57OANCE4\/fQ+\/vHs5Oz8Y7AfRDtt5dP7w3\/Gb47fw4cfyAcJZ32QZ+Mo2r6dTNaVt7fJcJJM8+3bdSh7Hbw4Oj18fXIUvz88PlWImCyu0nE\/ir7nD9u3B67PpMWTBXxbG3dHST7p9pJgsiDE8BLttT8l4z5B9P33gYpKISmfdWdpL0ZhALrkFyEOuf6+nw\/1F6ytPWjr2hrpwHlvFnzIgEFf1gLybw6PD81gQVgEv\/FbIwxawcOXR\/L6y2Pw5VH5guW7TVrvipbrYsErLIlFr7JsGGSEnURCp8Feg\/YKRfuyO85mt8k0DOhbSgb8myaz+XQcNB6CF\/sBK7X9EAZ\/Cx6CPfmCoFwovwnhUPlx7ZG0YJ4TAQ2O82F33Ce8JiLcalGx2UPsB6aEHJ4fHZKCQlheiUcCbS0hvRicz4fJxWKSMEp\/PPvwC5W5+PUvpOT50Y8Xx2enTfbx\/PToPP7x3dGPf6dvTl+\/U3\/S8uqb41P7HQX\/5vjjxfnx608UPH746eT4Ay1yfnZxeHHEgbKCR\/FP52fv49dn52+OzlVQP5H\/H58S0j6yGueHP8cnx6dH5u\/44syCSRWMvv50enzxC338+OHk+AJ48M74\/TP9\/f7wA63KCDk\/+xAfvf\/Aq+Pvn47ffjo\/4uX\/fhS\/OzvhNL09P\/wHIqPFj05O2Ada6SP7cHp28e749K3WWq0A1Pz5+ONRzCk5+3Tx4dMFKXX+8UJ7c3IIL\/DN4cnx29P4w+HFxdE5Z\/750ZtPPwpiCf3x+08nF8cfTgiNIHwoLW\/SaYImkYkL0e7T5GEW\/DW47w7nSR6M5kT8sl5vTqzBZEjMQh5cT7NRsBPMsuB\/Y52LM9bJr88uLs7e0+eTo58YtefHb99xOknRWH6h5ZUX8JkVV76rAI7+cXT+y8\/vjqAX8MW7s\/Pj\/zo7vTg8oXXI94vjH\/kv8vUfXLTeHB++PTuFL6wjTo84GkP+WInXx2\/fHnGef3x\/eHJypDD8ROjD0T9Zk2V\/CKTvAJrg9vtkepOAgjJu8y4+PH1DH47+8xMn\/Z96zW5vmilq\/fbk7PXhSXz+6YQ1gr04PiUScIgqrnz88ZD9eNRGFmJ+41n3apjQYYSZW4U+iXUET\/GMPDLDi7aKjt97clg7CNIbMh4mcS8bZtOc2jphkWh17Ashdn3+VAK3l00WFCqF0O\/OukhPMMyyu\/iq27vjnwvhjK9u495twkvnJjT5PZvP2nLMke\/z+YjhgPf0XTqOk9FktjChIQ7y1f0eMZS0mtJoVCcj7XQWX3kYQkaaOJ9lE2+Bz2Qo1pglu2OU9ROldbdk2P4tG8+6wyFrG7y9T6ZkoJfvJGTylTglBBaDIbr+Ztq9T2eLWIoADrrYd91Z\/PmW\/GeWxaPsPnHzCkp4ZSculKz4Cj00E678rjAJmpfPkkkeo1fImiH1dgRP8ZQ8WqzLs+nMxEF4lH1W4cvi3clkSPiRWVXYeyI1\/eTBwnKbfTZrTDNwvIifQBDNxzNLWojXFvfipH+TWJ\/uTFh3kfVm13yT36WTipIXE8cmhvJmyet0OIxVOZTuEPA5N7wheEecIW6iDudkKkGctfGH7rQ7ypm1ohVvhtlVd4hdpNifPOh1zXdBPhmmM9aZ4qXaw4\/CqzpN0vw90Q2GCn4eDodN8YN2kPx9PO6zN+LVp8lJcq0U+TQ5T29ulRevsxlpll6IvmMFJY8QP\/jZyCfpdu8JDjeDvx606YAOfieo0XzYD64SMrSPEwLvKptP86A7Iyqfz9DZluymHulBcJPMSP+MxyB7qL7p+Dpj7rHog48EfxK8TMeT+axJ1ZoNAlfEX7hrCoe5\/B9WBkGNr4nsELml9o808ro7zJOQtN9AS7UFequYLPoRO\/gllCagjJK9bERKJvEERCohU8ffyJSuS8t0qwLPKfQcKGWuO\/KVdo7ySOxMM9g9gF4CIxGTLoFmfqHi9WUragY7ZJqCD1sRPO3wh0h52GF\/eYmI14keHx\/b1Sj48wEzhV4idkyMO3URpGM\/CrtVRiuqYfnhIJhP4iHRHj8So0WVW0BhT0ELXcAt2PVAX81GTrojB9u36oN2ks2ptoheW5O2BdRf2gqPDoD5IdYGBs6U\/hk0pbkEfyJUjSYCnnIzbLWDER+8YvSO58PhZDZVHTHygQ505PMO95\/IUNK7DRoqul43T7ihbgkjxOByndsGg9kImzpY8TUnVqARtkXtq2nSZWOmAE9Nv4VBEXg3ErVAFTx8SLEwacrlxqUX8WDT0dHhykKm6pgbl1aiSsPYQOhCJWXXi0spUgWZHGQtfJoeuvHpRarjczdQ104\/xvImUu8que7Ohwqabp4TT73Bx0667oR\/yPAa0LWxO9Qi8mdPwUt+b26GyloXXUYDQQo2sdzlXedyp0OGe\/JuoLyLOowYdKavg0aXAEYTsZ3fdicJqRS8fEmq6W+jjoqNrq7l25N5foszuwaWbXQJvlBp\/KPaJLYch6aFvFojjg9hCHMQpKfXYGP2bdrvJ+Om4gOGLc0H0u3cgQ2osr+hoJCrLIQ38v3lBrhsG51gfz\/YgIVC4uNttHhRpXWXOvlhZ43zWQLbRgebQGJLTaG9ZvkFoTxqIlFIE53+j4h0pYQLOml36Kwr9e4iUutVoL\/b3eiolW6maR\/qXTbGk22Y29OGgfSz36yFIcpqTCxYMO2Ob5LGXR52HJxBgEXc0JfAVKYU9boYqYQWGM3dvotIW9Xfu4oGgBST\/yfTeyRc+SI1MKUamBKVuMvJX13zbF2gjFK1wOxeQbTsWle\/BhvX6c2cFN7gpeRM0ehSRRTMOsRvHs3H6SzFSZt7xsCEVp0W7F9M58RtsJ39fUlE6MYBE+2k31BeNoO7BKZCQyIwHmGGSqwFV+nNTZLPdCnWUSi\/Llutragjlyw8PBJyxlZz22umaPFJVQ2GzZBHCkP40owu4tA2QM0WLC3Znib3sCqjcmz7KrlJxzDaqC+Tcb8RhqbsaLr6WzLNYHHkLlE1Vnnr01vSNyoBIdPiIuVDxJQafBSqpNJMR0TOGUIu4E0L8GrdDoUnuNFDKqi9nna0coIG8oGMYZdYp4OeFWEC+7nmVWybYEvRaQuTES6yK5pOR0hF380RZ9jNwVGg9bGeZWe0Da1J0DJaatobgNiYbD80g8n2IuSNlG88IzBIpWjFbEE6xWqe24rpIzjr9UdjCJfrMhRJU1mpIX3qXBdQ6pTKmT5my5rl6xcrjPVF4yr2O2FWnvDeBcHb6VCBsEqihpJJlCiBXU9egGRjdW3YJDQRRwN0FydejUsVHTFst1id\/CG1KfxOuE3mRY3Q0gvWb9wMNBpRyK2w7ifEkcNTMIrsmkUMxyGbz4jgwMxQoJOUg3f5ChE1FfYR75K+3RV0CdUgo7fiWcSR3TostauV2rVLSdIuG3fRK42ksNUg7zajEBwF7UPTBYb9a9ztvtLagGB2LTDkQ0cICEGNPNwkJIOsOLqB9RYldjmHiQo8rI0RgXdJKRXAtsfZiahNpBbBYw01e0JMFBPpF\/tK083ySut0DaerHW2t8KPLf2IOniGnxMVr2qK5zRfGHTaZMvdLdcF8dHqGdxGbnEXoG8YRPNp8Uirssgq7tMIuPNoVZB+aYwmwW\/RjA11bIU9h8J3WZ+pMr9Cr1djg7Gm7+oBWH+jVyewyGPirSyWkpOv834T1KcIZQ3vI+0HI2twgJQZh2wn8ca34zWOBQ06Jcky35DCjDQu9ZDj8nOZJnE31McGyftTnUkYHy8KhK4RmXrhDWDwMqWdrmTJCluLpMMUjVFHc9HeR\/VMqH+xI00T9Jv1jsV0iH5Khn0m0ZHydTk1fXnBJ4UsNiOD+FAIkXFMg6oQLiypxCIuqhHaoIuw2HrotdRsIKBOn\/Qfh\/lHNDLbAxoqPxGh+Oj69iN8f\/lO+3drym1textP5LvVzKr4T2lI2wA2pgjnQtpFFBwpAXOG99YEpUPMg2ClCo1gehIhTyGHbW\/7xeU0MkXIyHnukUI0ncqwNUUG6nmYQV1cDHkS\/eMHxaYkC7UvRMmUJPdbkAOMOunQ3X50isMnBfUaGNU\/JoonBS8fMwPbtLTvSHaY343jSnRFUY2ZJWCM1zmlRW8oMlkYN8G19IksUg\/5ausWEBGnViaT+pVW4PqZHFL49P37zEQPuDj8QNw\/jhAjGv7TNOR0zLQfeWnbnmwMeDkcQ1RBjCJk2RWdjkjU5p+WJpylKSwibxJuy6iqWSKKiJkn+trxPCVMzJyYwQse+CmcTnVn+yQ11ltkmCnoNJsBxKsdHAVUMLlbpgVF6llllnevRbjTtChUdGA1rCcTF42wM7ggRzs859U66vLMQvTD94SX5Nuo+8A8HO82g+5Dm+1HY8YMltnQ+GhdBjvyQd2zIgzKCBz6CB0UEDyoQPPARPCgg2OLMtcFzublCzMpOAHpj0mIVMYGa\/wYlGAbFGFou+MT2zNLxPClrXzxKxwQr5R95bujNDZ0V6AhvVWDUuep0HyQS6AgdCWi3s5JEpFXiiFz1BlaLBsUtGlgtGpS2aGC1aFDeooHVooG7RZbaX9ymeUD+B+tI2WSWjrrDVknHarFKc9zs5wHsB7YZwfgD5RVXbWOGVh2uVEsVNHm7LOhBRZIHS8MtJdkG7bAWhmjzBVq3oZAfXSo88EIa+CA5Rj9lGQINQttV4FEXOToOM0VqCp1vCk1uCvXUwQHnrrL5uJ+Ob8gD6GwVIM3ALRSUn0yfD\/alIUFuMrXl78mzZ\/nF0W5XgweC1oGgdSBoHVRrcDUgvMEDR4MHSoMHSoMHSoMHqzYYfETcXoT4V\/Si+eZDnF5ylre0nkLkLc7qjg9cl0xbZgLY4JI3p6VxgQIbOIEpQUpzHqVkEBuz6XLwRYjEli6w1NJuCcKNRckiHNgCiWEgMWidyzEMJAaTJ1dJDssmGD\/l\/JbC1yZ9HrCSNIjOFk8VWFOprvzmICBYy2GbDCZKL2JPb7v8QMTOXSnyVeLLXFXcEZB2Z8c6aIoLaIp9NMW+mJdCgwiTZr0R1kRalXu0RXhOQM6cGl5Wb3lYHW7yHREH965R\/avhiHw4omIciCe9wRV5A\/Ila1+rwRu66WtFk9PZagwKy8JmShEpsGs22R5mN3D8AYLbG0WlaayXXl43SAegJNqrF\/vqZB9DIjb4RlERGh3ui33KtXC7O140itnrVQSrG9jCcz4f6c3Y36fISjgHAA6EwSilyWuKWHeLTq0EiFYl\/y1aumSyQVcL2I+9wGsMtnzGgC4LUACVVjpVxIMSxJEPccQQD8oQC+Mt7bKvmKSxS6nrek0g+VaMUod3ReFdea0j+VYOT1\/jZRDobIYN9dJz2YSDwMJf2QyuwnYN2Hk2n\/YSDXYq3cDNQBqhbp0jD+5VZ0mktFdXRevU6uClcIHYlwDOFiuvXtDlxG3FwDiKyNZW6QH0ObNZFkyTAR7+Kiv8WN4SkM3NfY3t+wqRxTge15bATAd+1UaVtV23LIb7I8yUZrxYf7aXIZBytxVU36B0mUbSTEm3tVBT5h1xRmkgfHxyOzMFpBGxRx4xrdpSOOou333wlVdGeNPdcYEaKKipBy27zV1eojbLe1FHNmocdwqa3fbUqNNwaaKdwIqa7qtRp\/HSojs7HSMRcYUal9MIyCaRKH\/JASs5KCiZjPsUIqwEksJiZit9Ql+1Aas2cFSLHNXoJIg3AWdwajvaBRUGaoWBtwIOl7xFtDyhD95i20JH4wqADCwgAxeQqBO6uwtk7CbGBhBIDdb0LWhv6C+fYIILn0JuYUO2sI1OIAMX0sHWwId0UIo0IkgHHOkgdPOrqK3toipOzLGzuR44RS0urFKE2mh02zc+0CmIcUZ3o1M8XPClFcalFjavyUUdfw46zmmcaGlLcK+pMqAlWuY03fbM2NxDJNBghjqZZv15b9agM1Wkb4urLvGciQ7IL4MtrqPwpXgGBdsxeuNpsJGEMCjhnTANpVC8ffPKWrVQOUtBDbQXA5c1I0M7uocGgsJhXp8kKFjpdEF0aukMQZ8dDFRAME8YSEAVpgbc\/+fM3Ap0fnQla7cMzlxBAMe\/yp1texbQbarOe9EMo3IIiG+V59vlvJw0veznyqprQVcsN2Py91\/JVAnEHEnbL4\/rwRZhM5yK8Wo1MSibrawaJyTiZYz9\/dkUjhngYfdap9zN1AsvEUTeFNkzSP\/OEmIvgt2\/KGEyRw9Jbw5x+eOAY8NZJ4tOIZNRSFNA84eMkn4KiPHQX75txDCTGeB8lIxnuRYqgjS2yJ90lnaHHAdk5QAgaklKb0spgif2WyxxBFL146Ee3Kfjuk7HXhTVzrTAEWPPuURK3rZyjqCtHNk0A5GCFq+gpr3wRLAYgXllodco7TLvD+iKknUI+UTL8IwlNKTpxNw3xJmrWQ7TJiGMFH5q32nmEyPauBJUiEGTQM2QyNCl6TwgVXSJDB8jb1kEWdu17l7MIzMRkwt3hdi1doliry3Xx04VV0J1zWhThM0XRmFpkmo5\/LCFxxnPSg\/VFWTY0OWfZ2sxDTnuvVJieVCqi7PKSWzPigNvsRo36TtT7DuAxGhVzgo51VcGK1biAD1AB64z5UDreTOVSBvtCS5nVfsg4PtEEKjT6A5aVk6sPRon8pw+uFKe7tPYr8lE1I7sk2KuQ7AE3RlNrIN3xhDjxLUnzvcB9Z01axVGlnAGEsPJ1WQ4zIPPt2nvloxcZPzrD8i4S+oSgwUDXm8+ncLPbJy4wuqubnngh0zDwQ\/TAkK7Cs\/zgDW\/3LWCe3qCqUkeCPsR5jbR3VFOjCLRpjt4+6UBeUAI+xtb\/AESgrC\/W1H4+Ghjkjkl6uOKOK4t8YQPEcemoZOJQ8pZ0uQpPwzTqcLQ6C4DRdN7FEAz+FAGj6fxcAhLmseYPKsJT1eYOCK+wqQL+7ibjn91gYdxzQEGc1RQODR5BM3TQMEMTDCRDwwiZ0RhdItCFv1JEbEfDNWaldJJwFDaYrfQblnbCYrhlA2yW2m3ztpP59CWa2N7zRmT2YMdl5YjWqjnO0Eg7C61MTiL662VnC0gRUrjaAi56CGm3MG1z4w5vEnLf7RbyABerqupHtc7Lf9agpYTcpv49DPgSPgkuwY8848IrAeoRcta61BoHddj1mVSSchYJxICrtttwXwunly6LU871LU0AZvnIEAR2whYL9kF4Mj+4jNkbtto+aAr53iFBKP3S8csEHuUKd5jG7K9BAspWQRYnENF3YxQ\/AXc3SZb0qJwjRScG52wVQbaFHqd5LLa6N+t+Wb2KAuCoZgZATPJcm7r32RK2aKVAID7QnD55UsKSDKUiTX1BVgziIT7mFzE4QbncCimRgaDw5pnkQyyilcjcCO3TxyS+mtXZWqwLlWMKiDh5rrQAeur1IH1ijogLLeqBpuGGihqv15TDawhalfVi01DL9aNbltfXi82n0cvLs4+PIVSaGwvVIzN+opRwPMG5\/mTa8rmt6Yp6Hc8qa4wt0bRFHANiYlYVVMG5oBB4e6uphjPCNqtc5wbT61zmM78KbRO6cAincN2RFVVbmCORVh996kVjDH3G1Iw4OaT6hefkhgKtvlECmZNcXYNtdh8PrXYfAa1gFsAnkIrVLaXqQVu7dbQiwKec4DPoimbz6kp5W94kkn35rt7YjUdJ1OaMN8\/m5KXjxRMoej0jK6tUDxmCv91ryzm8xGr+YOvCGG6Bzj54oGsZK115Ox\/aVK87b5zwBnDoVDsLiX3VnXKt42LCwrsH8RvR7gCoCzT0es+6DrdPU2GxloRBnvBDy2vJouU\/7B\/gdsNCLBpACgSfv+Ev8SWx\/PJMGGyVncVUl993PGudRr4pukK+CJ7ibUIWz9bunWicdXb1s+WbpuyfFuhZT4S+mk\/zrNRgulPCf6fICGErzCQxaiFHCeEjEtTHJpWhzUtpjathncKx0WKdohWX0p46VBqa52k3VC9\/X0KF8cRZg4qOcfGcM3MQ5WaJuMhNWeVev4hXjpDGuzW8k4DNV3VoVFIRdLTMK4YaakWqyDcxqhGt5Xo455ywxt7Vxwtw9LLUKzUPWGdj9vrxUN+yUYDTeAdbmNG54YlU64N9XrgMan1s8GXibqfGUVxM+p6bUztflfemnAdfK6auBXu2f00syb54q+2jO\/mH34mU7gCEABiUn3NK6ruTalQHK7UQSWTXt+UF5i7r+KtGjXxjqwnd19ZIgPSL1RZL192FGt8TzSVR2wYNvU+bAePCvMrJBCsrM8lulxHYysrLNtwLtRZ9ZrG\/0lqKzfj\/9Deb1B7le75H67EIm6kUI31+1b\/JymyGlfzhyp\/g6qsddB\/T2Wus+I5xFss4NLxq3lxFIl5W3KBVouFcEzvjvvlzWCd7rfCE+5aNPn2YBN31Pk7Wor\/Ih9EIfqF\/vRqN1zmSG\/OhAsq+imjwlf8skgr1BCVprlZ39R3JJvGBkqzKmCcM+ugKlTV9q5r17YQ1yDahdkVQqfU9naWmuvS20O4pb6FG9tN8rQpnshfuloIT5tRWEg9A8EqbCrP+H5TeQ\/J6usOAzRzDZH7phR+sN1wDSfc0J40pE6EZVtxzr088bPKsp1TCy6RwE6lZTm+23W5rl8VTGmJ1O1B0YcMfocGDXpWOcxdQT+SnWIkYo+Q31ZcdTveMUKqgKgT4ASkJLqCOEy8BtNhawoGhae3KMuakxVsydKGZAUr8tj29AikIwyq3lmq5db94u8meS3mpnWbKHnYJA\/FdWnRTe0Kz03xbpNdWumqrmZclpZkz5Yz4wohl7NjWwAdbKdke8t9yeXL7PqauIG5llPYhNyunNucbhgzmOLGA\/6b3XTgcmqsjXndiKBk8WwyJUuuL4rq841xbmdqLq0qdbP57BtYYbU6xLyA0SGOZpZzNxZjzxMa0io+o8TPMT2uiVuyP42J\/PxEJIux2ZNx9PD86PAADqd08fhSIm4QF\/XpAZr8tzBoYblG\/hvd8KPFG\/Cl5MRh\/pvznCEFQI\/fpZ4GskxVnIwH617KaZbBqaUHpUc+36bDJGgw8FCgg4mPyIN1uR6trRZ13q2ng3zwwmOX1D7MYlpUwn4wdFmCopD0r5BgRQFTdN+fAZ8VwKT3cMlXQhk3b1La7lWKOf\/iOWZmACbDKSx4c8\/f3IfGnZ6sAmNAfG+dHoXz6EROECg8XM47Tfrmnr+57zhO9rFKe6ysyz6gGc0\/dyeMCk5sWHggQund+J7zO57rdZAu+qHDyCTEbDJibOnE25K\/4WvTOfuo9pIxjo8R1Ihqd8lKWzGHpxg7Hgoo1xL0stFVOk6CvDtie5\/5Vz+X5x7zXIfvnFfcmhc7m\/fcako8Z\/fd8kr8ztt7duet+t6X3IhI9RxS41IXHER7jJmi4de9\/HAPHyCpszMYjU+8kOeXROTvOyJMgHnejmGZO+sNWzLo7rIC7mAH9zwbCkjyypX2BNR0bvWvaIQRIYd4aB8BnpCR7fMifJSqEHBKxGjFH4U7tFKat5kp5AkbtpWkifdwts7xflBhoHaOWdpQa4y0YGG4avnHS\/KdKQ2UpyOk0hjUz5TLfOHITmr9Ok\/iFI1Trin119RcigbvKnLz2jEe4HRGMYp6tGXoO1Ont\/gSLvrRucfdjr45JHuTrbhBimuVqskEjFwZ8QF1YPIqVuM9v41VGvHxfMS\/8ixetE49kMFW4C5P22F8myZoLBXc6jW0JiC86Af0k\/NGc9f0whOY8yo3A+GsVqLZ2mp7dcoUctqju6RfUMCbEr0t6iiDIOzkYU9FiK90yZVwLx0igG5r\/6FtdbPhEHDdc\/DwG1NBqzhlALtkzDJA\/YfQUYc2kdVROChhOS6R4R0GN0p0x0zt+3RijC2mFgCHBfuArcT4wi162kYTIfK6sU5K73\/XV1oIvyQk8utf4\/UmMKypFGoqRRzDA5vmKQTt8e6X6wzWoMplStTqKFfl4r29X8DiPVbLB8LvC9rGlnLtgpbPZ3ljvZ\/MiHgmvK15a12UUDM2NNRrPmlRMv\/j4ivTRqCazGe92+60sXG5YcHySzmCcqUoUdYZeWc1vus3v+uHwTrnP1wK+qD+WMh2So7oZND2\/+uqI1tsW2fLhmrGsxlcdhhnqHYHL7s8rwZ\/caXNsGBew7PQEOG84mJgXfJOc43wonuipDLzcA1PrCI2YJg8pL3sZtqd3GLGcUgVQiSXECBa0+XtuJLvrrSbvxHTIzdQDDw3kbDAgB2JG37xJH0gJBXPbei0HdNbskfIrImPC\/l2AW\/XLB8fovGUaQxipTmrFW0DiMGedVTw5UuEan6RqS11sQQSqWQCvBKru8DCYHgXWNhhbimtm9okRfjtxas5WBV5zdZy0AZ8TGZiKUduIiuDIHZGW3Lrc9qf3bK2cgiG8NJ+bdqLlOICipfs0scWBddw3V7gvmWcwrbWfJDKbUI63ChOxiEES4afgqvFcYZ7280NHCEj27p1kOHArWYfEjqBx1WS3pR4Iumoe5M0TBmm62p1hFiT12zYjylq\/Q5NnDAqy0Wf41sIVMV1LBDZLYYLvvD6C\/oBJa\/AeZDAqjkOAoVTiBnRbGJIGCkp2hRBEbIEHp0F0uGWatn4TZwwA+UdTw+rUITLKVC9UlrFuk\/lJuxByAIK1x7pgqjzcnjM5FQxW5J17WOtXEkyx0erGbTkWTr8VZZNiW9vOBNdMOieeyj12+XjO\/1SW6MVs5Swg0s7u3t9Q79O2GS5YW5f0RX6u6bpWfIPj5VdA01VDA\/YuJvdkmdTzVSpdh6ZIDL7nTF0wKG778xBw1xuMgA+lnkf6raBFkei9tn1MJ2wfsJokZ9Ojj\/IVRi1o2+zz6zOfTLd0MrItgn9xMuehbxpuz23cGPcfvCPo3P\/zeLVJyerTlLMvrGSAkH2UOuIZO2FGrsTJD9vsyr8JMyE+7NFOT0pIGPqu7NvkqlNR4YkyKK6PFNdnqlny0tZm6+kEnjjbaIqxfnZxeHFkRo2ZRgzUuX\/7BjWjF+cm8foXW0o2Y9FrxlliA3YxSgNk59yF8KwVE3T\/Ljb7UXoQiY7fUE7feEQmEWZwLBFjweHwDz4BQar9vNZDNUX7eIyi2DfLVcPnq11Jo5Yt0nRSAkkbx7qS2ARZ3e\/Wc76uFaL3cI8Lr4Ndv\/wu2C3yrVSdn9FQa5oSmmNanY06c97uh09evPpR9OO5nfpJBa3yKJza+bpXHOE8fHQPXkVXNQ0GB1agyrHRfc3GixErSNyLVymZIQN4a4iesWoVoI2EEHwtGO0pIc8kTuWXVHsre8nEyoqmRIt+Ox2NF5+f38nPNjxuxKUGslwItjSnzDn+PRmWF7YzNBbx4PWRBvVNaLXNeLzruNKsNqOtrUOEuFCiLiQSg\/t2ZeeuDdFGaNtc9+qi\/ZHdmNhIABnHy4\/EAgN3nxreh7gSW\/KD+tj6B\/WBQYaER\/afeGeYsuZ9DQZZfcJvT6YQ9PxWepKL9z1aWy0pMZGPo2l6DSlJe6wqrfw06m6otzy2ktALKXAjOo6OkyrlKmxnBFonVFVm\/E2s7WVVW0Zba5pMHRtHpRqsz\/L0xNqMymG2jzwa\/NOkTbvlGozYPBoc1RVm\/HGbg6tfAR3n\/pkh0sSDBRlYenrynguDpUcxT+dn72PX5+dvzk6N8Z3ofNE0LuekXorsnWIkCSDvXe0HFb0dJlVQ4bQKzV1A7MVOQBBZxVU2N9X6XBiVSPT5RolreAZNyPXRBwzBxdekKAmtZWi7IlKkTsbw24uZcQ9H3fFI2OSKwsvAEMbS6GqYHfCCrePLrWU4D6ZJdC2V765xJTZQaHMRiUyu2OmAK0us4ZmuAGpMuuoIGQW6SiT2VZTXVqndTwDROTqOCq2g3piu4OJOWuJraUrjji8+mJLCSkV2\/qrZ8Viu+NP+Fn\/wh3rEGHJwcFrDIgfJ0SUFHtOjwr+RP5\/fHp6dP7RsOT0pgj3JoTqRgW9W1CZvub3GFsOFJZxgYMWYMqAtDXFpFHRAj5BIGW7n9mXKkhK9Kvn5Xuc4rad+cyf4A6Jb2ERtvRuCVvvym6a0D1Ylm4eVIt2Kz+epXWPI1bUe+OrPPRrQJZ+W\/QsGd6u2YUBGPnnviQgwLGBF\/Kk\/y9sts4k4yYEk0UOVVqKk0\/SrCKe6x1k3oDgVr7ZdF5wYmbZXqSXoFS++kTTE+elGrRprjtQtLpf5S4U\/q\/qBSMq7cYNI3VyNjpyI4j8cVFoX0PxjCLvSeyxg+FO2gd35NPzCW2NcZuf72FgQ32YY45Yo8GHXLg3cJu4LcQ4N8joC1v9cAOnuJrK+kptpPuIrGdIh8S1DGFYstrnONbhm7VQgDygwzwfrL939ZQeENIpOZe3imfUn3Y\/E49mnGg+0Zvzw5\/jk+PTI80bYrHQOCNO+jGssrzhRygPlCwKSrdqARWiRKi7WN500c580EigTFfcWvs3Z3OQ+IgM4gbCl4uzD012HUYTcy43aULyJtwFENMX9DP7Aa9ZCfYef5mhqOaZSL1XTe7dZtP0NzKadIcm996dnR\/\/19npxeFJGfd0ZpU2XGnrarSTjp9BcKVJOen2i+Mfy+nWe71Oh63M83uxXKTymxC+oqQuLXWrtaifdm+ysd0Tb44P356dVuqJp9eup9Yh9W5r5wFjq10Ws0rJ1k2ghyzP\/sMky\/P0apjENY3bWkFSCfZvlQ7y5TMQowKmMXATrw96T2Yx9Z6lJ\/6puwEMM\/lxie5npxlcsr\/M\/RT+qFlByWi9qeW23hTv9HwsS6V8EAQbSR9kogdXngczzcMSqR0qpYZx9Kcy8VdcJyjA3Cd83HOJgnSl4KXtTglZUsjZdwFiqVacl8ZpLZFV7EvkFLqogy19Ft+FbX3oL5FdgnYdo2WtepaKIjDuU6\/GtqI3CsCQYLHK61zBaa099VrgUyyBs0WKsZIER2xMzrrTGVwsxzYnW0VA4N9sNIlTduiYMv1yp1Ol0oCdSGaVotJKdLKzAycjKFLXgd4yIPyfADNwHgCuCobyEMlpUnAKLyENU445cqqzU1lQN6AyoPIW941OFWCUVZv71TtHdpCsVdA7Yo\/b3A7VJKksbQrBXU+SlErVJYknenCiarqBtdfKaGCCubePYPdqCKXCdVZ9sFdDGNVNowJBXLcEcb1AEGsI47oUxvVOVYA1BHJ5oVSSnygGA1YMuOlgJ3OJ7z2DUePANPiVbtjRDQkHPygDH1UHTzVL5b7UMKtby5RM2UcyIFKAsjvbpXDsbmw6OqgYzuMT5zkqXrixV2Pii7NWWRKgCkPzKkOyaT1f1LKetW6dte+A0KdQvp7np\/ivkmm8E+zrhyh5uPoOLg7vWKHk7EqdsBhs5APLLjW0AtaXRbRbQL8LyaAa2B\/qgB042qTS78YE5+hY+gTy2BAPvGOagpdk4mR+3RVff3Ad5XbPCXAC6NkYR2r2hVT45FMFR2aYDjGVEdk6yKgKSDpTrQF1twpUmBB7YZZXZ2yroJDuhYiWd\/LuyCtVfTL857LJcNVJ8eOjRxf4\/FQd+uY49slJnz\/3AJvRqjQW5DhcduLnJLyeN+g3qzIAMPCN0DGkSoByjjYxf8U\/t\/HMVwq27HkiAoQJmSIQAk8SofkAZRm31dRVRkXvBhvUeeFjhciw+KKUWUV+jbHQV2FzVw2RhK5iu9WMFPmlQjTOUl6Uh6xlHaq6LlDBBR0iVJMFiLmjNGnydyOsZ0z8BwjnwQhwWBrsOL\/SMGO7gAwoqnyIQ6lTPZLcHdGsEd+0qG0bq48snY\/QDZrTh4LSGtIwD+iqIYZ1YFFCjFZRcGtLLGEt6+gSFLR7+ImWNXs0KmqQUnkbIgyQRaG9wkjFjwWD57RfWc4oUqXJEibQQ1v5Ptz8FvopoTkh1FsLdPC6RgFZLGkS02Nxw5aoAekbPzvIvsmyPlMdSjMS0LjsOSIv8U4+cb1D3gnto5qO+xZ0DOotloJEJWIxdK7dQpSoAme7O140Qmt3xhsPhGGRVn130L1rcvLo6e2A5RjJLxXgHbsskwj6UFj2KslnYjhmsLFTbsAzpgDCjpMarsA0VkACMgtrhmO7O5kkmOGujjDChRS9JGf95063hOKQZrNug5VW8vywFyw\/jhnDDDqO5NO8Vq\/4xCBOhskI0uCWAYTLMdBSdFm2kCtXV7MMJg2lOy7Zn26nE\/yNd1e3E7QgQmPPN7C6IFypEK4oBLiIw8y9x5tqdDlvvjF0FvazXlTvZTyE5T58oQZ9l2wHLLtmYJjglhWHWWlY0aww+d0Y\/B6tMD2U8ocV\/m9thdkBuEFFQ8xcNm6LB3\/Y4t+VLXb3tscc877Gg3ReiyymOjJ+a8gvMrHOtMhzZqrNdx59UY9qmYOJK1+NRP6UyVVoxll1fMJjKunXPEJltv5pj1GJ\/uMxbMW9N9B6j4lIUQfyc0sOIbS7UdLw1JsAllRjP37VM0UODjz9ibgK2lWvG+1Ihp3S45XaxT98AF\/vrDxBrqWNq2pikdTI4Gi5K79TQxRQ2IVn036m3TjvUhSkPV+oy0+fTo8vfml5wpxHWT\/xx7kK3YViLGcYxrzCop\/2gYaVOjzuOjE+q\/QqQQXHCtnq51hfCYt2eI4+Hru\/5TjbYCdxVx0cHXpDfsLQu6eJi1rVMFW\/LcH2qFVDILx9loxdOP2gGjojLpV6HbzgoOXVOHokVINJlQ5mI0UaBpUNtOSJoqsQHSOkXY25MKxdQfwEPwxS1PDNIApb3DaWnfPzxvs+JRE1o0yk6FynQ0gkDPLTMBblmSn8G4pXy16yL8SgX9Dh6s5NOMUM13ak3os6PLb3jtleTvvysRNFEV5FvCe97q3qaqt2\/9FTOAjKaKAYdefBC8usy0MY9Qx7Vdu2il37Zg37cpGry\/krfxj2ZzTskBaq1Kw+t2GvTsTv2bAP6hp20vq7f7dhH9Q07IOvYdgdZ6Ess87PRTnn23jL3jCdUHuET3vBLn3yWmKoCZjjtK9nZ9ly5QaxLhyJfKYRcy4yuPvBlispD\/+Myf1npskV3wvTMOj9hakhaw4lbkCL5QDVGZfiB3tkWhnmosJopw73LB\/Hb+mkIbveysfBe2oz8Bby3Df8FAszYpSVZKTttZLzHBiJ7Ikcwm\/2eN0qHNSqhxo92YAdP1QdsjVWgb5Pkj6GazXgBwwDVuYJzOtGRoZBu+JgY\/gpAktYMpis5E743QrCnMqOxRM4GO4xXqpDYc\/BabiU6JEsXgeXPS7FCwv8IKzjztRya34fTcderQu7utP1pM5XFUR498h1bvlfhAEo91uBUx9KlLGKh8c1a4nJuwBfyQQ1oH2b4A5SUyR+tysjkqsF0h5Vdi7LncwKzmaBM1J9PaHAEanuu3oU5qFkeaKg6qLEAX6+oyvLr5aPuixidb1l33xyyXN76klcUjhi703sgmvu7w8\/ULfqWzgj48y4WnYne8272J9s+2LUvUvi22woksCYu8t0WDAzurZcV8UMPOUjR3lkljuDkzhQI7JPGfUm02ySTKEyBrVoSZpc5a9pyDRebqpnuIx23JSxrjSyQql4eS4oFn5Nnv7qheTYztspKosdpwr334\/id2cnekaef4d0qzm4SruOJt86HA59GStTJWcVMpDuBMJbPhdIlXxX\/AMtW1GPdp5RdW6m3Xtj7+\/t+eE\/7N0\/lvMqzkd4z1ik7QyORIZMZzpIXokm4XLuKTI6YoW06\/RmPhUqrUVojUawY5kmOes9vMwwVt430lFTvxV4P9Aj5vSU3rqL6sSjB9BXNi\/LmBiXmbnWte+gYNfdoJ3HZl2yEd6IzjeuoVUqth130aj9BL300\/HbT+dHH+1rDc0usu+6Z\/eggVCUXV+ptoaIRDK956sDajqzsEoK86+Uv9MaQw+K55BqC+Wtrl+Ua10fnzhdsp6Kp+M+J6FkwpFXSMqaDZVsK3zPfQFld0jsUn8RQ8bzvn2egkCkAaICsCuIFz7H4pJm8WsvsAmSn123b6rXXALqfRXCJa\/ZcUXr0mKwjDdMcZ1hFHrCKtMbmadZ1CPSh2dUtBeRmYdJP0OsgQKMpA5ccMueFu7YV2phh1l2F3dn8edb8p9ZhvxngV38aBhD8EJ3U6GCmcBA2AMXVDe4bQnNs1CsJK9hJmv9NBsn66GrsDd5qpJRR3Qf4dnp2elRe+lo3QdUkgkM6SCEE1VEF1Y07YKVjiqVtlOXqaOglsDfMPjqMVgTBKvXqZCMiLLG3b86TUARvS\/AmQLcIGfbpKa9Zq0MFTdenWUZA0QBhTiJ8siYelxURepboIG+x0tWH+iBcOJ5k5+Nh5wuOEFMNXl2VaM3vi60agul2sJdTTn4zy4Z4XGTQEdHuusFlSOrMr39GDdTqoHYtfE3g9aiMgk\/uOo3FlWpUEXpcn2OWeL62eexI62gEt1+aR\/OF0\/KkfxO2Fk6WYP7RDN0jcgWkI5FhDlRehldDj9oZLlzHBdXhrOLi8WN4ew3BJ\/LC8Af8O7vB4gF3zp4aPvIUpIYfCWyDsrJWnx1bi2QWwtK1sJL1tfm1gK5JclaOhUINVFPng0E5Gfz35kOhNrQJ88IsnC16+umBPkjy4d\/tueq7s3yUQma52ZEt69nu6Eyn4brvkVJ5l7wZwO6xxkVr32HaLQrM+jyiWvGb6yvyOsy9ETl+N2a++h1i6\/UYLMymURTmSV54\/aeaJIG\/\/gULaV\/vbM0s57b4XX1ikcllWrUUX6S1FCV5o9PNYesP4WpP42RCweVU8Vm19d5gqcaV0iMU+bH6RNmKj1szix\/LDwBmx6RSZ3M0rK0wk2q88mGN4npDNbgtdOytGMwAgoY7uI4yqNeLGSxH0q3hD6cD\/rxXF0QkCB\/3YVZN6pel96WyCZNRPl3vFxR1chRpgABn2M85GRwzzv8cgX9mkcXNt+itpOyUVzIwwp9wOEU8rMiHGkL4gc8nA1gO9alSUW1qCDJmkJlSugXlhcPY15aQumyFhZI9Ig\/JrNgAg8xHvNHldT9Mn8KK3XcZcbEfYRYrvQ5EljRmmAjKIhLAdYxnNBNje6YLnP5bhXRVlCxmerq6Tj5HGOTc9begrRb7hVstVZhaJs29YCgTWbzfEdGaclfv0y2YZZOGYLjy4RMVcSLqPNYkIPqV5gDOq\/W\/BXmO64rdL2L4i+EaGzfdvPGr6F6kSggav66HSxKo7uUDmNeTlHpggRXBXEaslepUvxayQ\/ApF2cOmhbgyWjTCZwT9sonQHjXmhL5tJl8Tbcue3mKugBTC\/V8UdbGnLVYnJV4bzjBEZeIk2ebc0CBq+oCk510DqtIKzJQbwwlX5JEcoG+d6r79081c5uPhmmmNH0nbq5+\/HDyfFF\/PqX+J19utPUWaKsu9aUY9Kd4t3BfFUP4qrJSHY9zLKpuQX6\/W4YdlwAdpXrVmn9XpIOXdVbHc+OrewX625DJDF0XPPJAuKT6U0SwzPjlLbEbI+VCO4Ab4TGR\/GipM6urLMrXph11EB9k67k17kWq68ewu6zVeVhdgPnbyF1X8P4ychsBgx3SJ+i\/X18ERYlWaBGgDYXftQhm+CuQbRF5XOR9eDrZossUvKJyJKuqa5Vzmu56R6J1C1Z5ftgt+0rD6pk4YAldlqrfEOcoa23E17lrnHnlCwK9Nu8cc1tV3lJaGcNKzioJk+tiF6GPnbv+niiahqI+G8Ufwt\/RvRnhGlWfNvtxvaTTsHRf36yj86UEBGxrZDdUEG\/DPLD0ze1UbOt2pVx\/7Me78GRRgLC4P8G\/Acx91Wp8GMqWOpbIjYUx81pNonTUVeE6+CiMlMb11q4fXP7EqP2z85R++eSUTuqOGo3g4KBO6o0cLeagXfsjuyx+48B+48B+3c4YEf1B+yo7oAd1RuwjcG+3sAtRvsnG7Bpgn3Wtj8G7D8G7G90wHbtLzNtWGXARmTJaKLHUP94fvYhPnr\/wQqjHmdjHPhSFhTUfWgwIiFOzroRuBl0H9J8Xx8cOYxBLRg7vthntkAPW9WcuFBkaTe+sMxWLe\/Azh5eKavQvvDqUTpOZWiUPNJgxlFfCrL296OOZdcJeQozlweTjgel1EQKmIGPmkEpNeVgDH5eAq9asO2e4kWNQCz+HJCfytq6Goz06fj0In5\/+M8mj7eRL1hc0I4IT9tpl9wdXWXMWWmiaMZL+2yTEWnVoJEvqcdwPBghG\/DbX9qIS2rQ6JOBt7QOe4GwXaUrxGND85HYPWyh2Xr1Pu1tOHnY2CkNmbeNoBLIiDfiKBGK4H+sagTpeQ3LCtITAuZpkgpHOMQ5HOUYx755iAM4N0zGWjxCiYnS5x70dVhqrVz5NK7Sm5skn7m9VPZR2d4X22ZKxCLQLrb\/Q08EfCe0LYSTyGp4iWgvj1eCF\/uX7JXLpMZXSvQrKwczx52Ou\/TCWTrykkFhBVv7DFlBsUgWW5TKRqPBLLhOMwSN2R8i+BAaCTxKDgux6iWnhfhlgPPJUFS5TDvKQfwGY\/JmID+jd8PYqb2POupgUXL6p8q5nSaPkr2Oe3HSv0lC48yQGumDTpKdNHsJ28bTHRsjlz16RXT0csUbFeT31fLhvD5++\/bo4wXzu9Wtb37qT+MaplwWnzx7mxLBiyoI9rwICi\/qoQxK2zWdZ+1IjNR2iwTHBHdFz8O\/v8gtjKO5bodgsv3gGIjd7oC7rNsZmGCwUDVXwC5rsNoRAcEaaoVAFMg4NBjFfB\/bV3E5YIG1BlBrgbVKzrIZW\/HKubSwxjRy57nmdyu7Nv3kujsfzqQVdkxLGRksfJuibq\/BVffY83Cb0\/gmgB114gsNEybGvdvuNHgFL8bdUcKZ9dPxyRF9C1EJ2YQMx7wIHG24Wmc4kffwReUyv2asl82HfQwBAwDBdzleMyZQyVYnD+msEenNuM6T5A6R4lT449HR3+Oj0zesEAoKgXNDg0NnCbHLSEbbW\/nj0QWXVHVogfYfBFfz6+tk2mAQsY92lCZeA9catNA2rD9BrD0pQ8vTNuFlnfSFixnISwATJNMpkfWa3OgNszxRm8i6WaMJe3uQZ+MoarX+g\/yFNcQ8ieFVQwkxYqLwcpY8CKOlfkAKKRoNGvyAXBjKu1YLUTQAlOAM1m9q5T5AqVbrx7P3749OLz6yRhBfggnyCyi8nebxeA5hcXoj4Ru2zXcFB20mWCjaSo3ql\/BLa6YDAkHFDxQrNl6Hk86SEeSLAkrRtYzhTa6Pc\/wCQ\/KFNgdi0LWYr2nCbo3BIsRqYV4FUURXYySLvDqHdTHaTBieS9uJ5UnlL492q7rzWYatmfLWZFcDog2u5jik5i4BNxiqE39omiuZM1xEYeN4+TwhRdRTtSpg+ifmFfDvtvqyYR7enRFnNScNGzXUYvI0jPaW3ZrhLLlmHJKZj3MyrUv61Dr2QnEohqIlvuBn0qk9864LCMolLSSOE0Si0xbkmsOJvCNTM5ycmiMTEx1KGpEdSqoVLwjyQ88SandrQo9fkNcHjBm7QAPpIdJstc3h1gHtBduLVQnEaeQKBFL\/VCNQBLs\/DYUiEHIVMtUY6mekVUsfsQK5enqDZ+x+47jrU3DYRfRziQQ\/XvwkdFNYz0u5sru4itIpWygate\/hA0jI01DbnUyGRAizVWjlMJ6Xr3k2na1CJdR\/Xgpvs8+rEHiLycOfUzK7ZD6zshWQUEzJhA817Za2vjqeJTdEO42x1slo5b6nsqY43DbJcQlHuCmKG1fITeXSohVIkFBqEyAucVkFvwBSG33vNundxXB6GbckV6BBh1SfEJ72bhUSGIwlkUN+vZWxZ\/P6nUD0bzoT12qvQoMOqTYh1hXfq9Bi3yhem5yr25iK1YpdowFagYx8PnoaMgig2mQoiWFNGgC4muu1JmRnqh8XDmf2nuWUDbMEuXDIz7Uhm+lZXOCNMkvoqjhr44SvnsVZqh8gkVcB\/UaZ2ji4m0fMZD95cKLQi9THMCSz8YIWKN9rw55m4Kpk45xeOeuEb5RZQor47pRHgPjn2pDvnADv6sOJ3ICi+pB23ZB26+vFXTop6HT5efVBCcJKYwDoxOQvXhsz5mwuMbtGGTcO1UHGhco8yK65q1zoJOsp+V0EaCVolCpbeqV+esWhrQCDWagukgLQywKcLAq6RH52Ai7eK+bbA\/Px3Tj7jAv23VFC3OtW8K\/17\/J\/reMuAaFkuwfzK2uc94QnPhYsJROhuM\/SfgDXD8STaXZDMGqbQbNufhdPurCxAdsseXc0GSZw8pJnC6LFWNWYLzuzwADyB5kQ\/MfHs9MAYPEv2sIwfBD8wg0KuTMlCIDWssp8nwC+afsE33\/vgs\/OUQezaZfMEWgToOOh+uU6vl3v6Kv4ApVrGRtJomDwyKoC9VIyqKOSczifZaPuLBt\/JANEgrNe1jRaAa4anUCObd4Ii4Oz2yRgXHbyEFZ68pjtyjg5qfWRzUwJwGCpl5+0BnlmKchYbTcjGRpRR0lEvBs6WfUBxD+nWpCrJbybMrja1ZJ0QcYMa3NGiVlRaLpUFzc6xlYDXbcdZlfdIVuXa6tgKIXbSgE1MaqyUQP\/UXj6uFSboidsU69b0B72sVZb1pREFy62sE7ftHCIAJXIaA95nM7HKP6fIW867lihfKilUKGoMvaSGIHHrGC3gR+bDKVCMrfBNrZukBNWwa4ZIW5Nv1G4oF0G6Sph1LFFzmnkaGAguErrCReJKtReNiJWgzU4If37W9L3tFuw2sDg6UDyh0WaAefJcDEfzvg3hLuNoxVTcNiOJbjjGXAvFj2EF0ZTA9eg4wTdom4GrDT9GcMvfTyhpnE25WOsYyAptM62HRQQ5U6+KKkYPMduPVrmIM0xeqELPhYZMKFaK9j4Lt\/AQdmAroy0O9pOrk1wq0U3XCnhbFSKHTuxMrB15bFNRLauMLatFQ5rdNGWDWrWeq1zUPP1pzawKbCpWEvgbS+DKYdeVhuuSsaqP4dm041ham31EUr12CUlrNnqGjxveoXhaumxSg08WWmMepJWKQPWUqOV0hpWj55iZftkRg3amF1+SpbV0HbWnDV+gBpC1H3DFw8PHccYfkH8oL+0obwi4\/STwhJr+lh94GsyRCpptolHmJpxnmS5EvzoPHJBBwTviQvnaQu1juewBSXgUtKxuQnRxBs7G8SBoLYm1Y8xKNF3vsr\/b0OTAiaKSlv39tVhiQFn0La2ZEGE9q+dDUcIFnym0XZ\/IuPM0enh65Oj+P3h8enaGk3OmY7xSsju9KbXZCMeeb6\/7OgRWMksJh02SsfQ1MtOI\/wivHUySbztjvvDpB8kD71kQoMflBgUet6gASio3ZIjKaZ1Uyd8iBuSitKkU7Mspa924bpDfPqhI4eNRzGAcuDamVNsDuHD5f\/6c\/AqiHZ2\/wycgtgjGVPs8RFILeoaZNfwTJDL2QujMVTmvrqAsYkoSiup3MbndoA9HyK59CPKQMhLkuF7o20N+VQvWv8as8g8IIaJjTlxF5P2vHuTtILviAAhb+FUyTaYyQOEgOTvdIQJIsLxJ4REGDonfyaLK6LxUbRGRYSGDmFLqcGdLFot2uEYRuWK1FPN5Rfy323cVIWK5MtBI3xUIx6fPlxquVApjD9L6b560ZYvK4732OCNVWpxpM\/lutH4MfDbrrP5uN\/ikZZaS+zFFM9CitOjYy\/TmfRDCoITSQHYsFXCE4s61gHACE1UarOIRK3j4djMgc4aLeIQCxJWHVSJOOS0KzGHgKOfgvMK\/60db6hWqhhgaAq1GXBosLMg3HDFAL3SyDtFhakILxFkVx49VxOLP1CuYgRcTXyFwW6Vo9iWbaQfbdVItKUxe4LO6kWT1RUhf+BY1Yiwmhi9wV\/VorpqYnMGcJVHZtXE4grCKo2uqttT\/kCqqhFSLozPEAzljXJSho5lo5w84UtVIfvDl9xxSVXhlsQlFQQcVcbgCzhyRhLVg+oKV3GHCFWFWxIiVBD7UxVDeexPcVBPZTyFQT3+aJ368F3ROv4wnKrw64fhVIX8NGE49SS1ThhOVcirhOFU14f6YTi1+mHJMJyqOJYPw6mMYYkwnKqwVwnDqS5FdcNwqkIuC8OpDKc0DKcypNIwnMp6UTsMZ+nxYeUwnKqYVwnD0XB8zTAcdZHhGQNxaqKpEopTG2T1YBwX6G8uHAdjcTilxErSLY2Gudf0kq\/oyzUPWOnh72P4wRnCqFC+uHazXCs0sJqkVIOtqqKFpeKdJW3xSK498QUkgOXdbPJSFFWiyLEzVJsa2LGcz\/KGsjalsvRyt2MuTIWGVLi2mzQyfOA4Qf49KC+YH5xgLDkTS\/F0T8XY1H3JdpGkrNGtvdleTjeKDkjfwD6vkDjorqv5NU\/8sj1NfiVT0Bk3tWyhfjbFRIH4I4Ty2+QV29RiO1DA6H6yIwDR33ljhy1G95PI+haF\/4adKmUzChrF6X8ZBqRNl2nwSjRlk4Dkv6KObRVI5zhZLPoYt+mYYjh7itPmBMOSXNAmGRdSG33H0noYncebxvtP\/Fa68KuzXzJZLQq87rAFFMdOoaLdoqnIiy86lU0D7KPcCdO3iwIs0Qq+6wcP5D84OsA2X6hlSEHhdbyOjDwHSs4Ot0BMJrFz09dZmiVCEiOFYiWahVeMOFKsiC1rNTiHcUKB29J5YA9ANh\/H\/XSUG\/WodsMXVw0vy5X7zxWOq28jFzhqRABg0wlPMUCu91GohriYAwa7Br54nCgZaYqq+8Z7yjw+3quJKRTe8kBMb1zPF3Uhco5+rcrOEHY3m0FZoagTsp3gwgAa39jExiI63rT1osJd4t6R6g21rXAMPRBjuTgKRV8NA01NMQ0C+PDL6+PTN1EUvz978+nkqNHPh81gxLVntN1PIEGOR5+JBL70fVNVd\/0wuJ6P6e7N59u0dxvk6Wg+JFTkQXcsW7tOifpTQrr9eu3\/Aybtw2X1igEA\",\n\"setup.py\": \"H4sIAP57zl4C\/41XW2\/bNhR+16\/g0gfKjS3HRdduGTRsbdMLULRF064FAkOhRcrmKpEcSdlxgvz3HZK6Or0JaCOR58ZzvvMdutCyQobZWlkpS4N4paS2YWWKzq4sE4ZLERVjuSSXVUUETVY1L2nGrmyr2S1Eram9iYZWvX4UZdmWaWc6y1CK8ElykixwFEV5SYxBa2YztV9xQTMu8rKmLJarf1luJ6cRgufo6OglKxXTKMhbiSizTFdcMGQ3DAXlxQI16kgRu4m87ge3XWslDUOyAGluGivcG4INqyTYCVFzse6sef1aWF4ibp04yW1NynIPboyFF0anyEiwSawP4\/LSnaQ9wuTy0luomN1IinIi0ArciK38wmjiDhUipKxAWWaszrLYsLJoDu2eJpOjgNyjIbVadOvJyC2kFQqSVZLWJTOQ7guv11U37sxgako87T7voXPnjQtVQ\/VkrXOGCu5sQJ5At9YMrbidFVLP4C9EoTQ4yfmqZAEJprNlwBKj8YVzkeRK4eWkd9SEmlGuTXrRLYcY3kHpfGHamm4YoQCekdhXEDOwv+xfSyLWNVmzFOfHx9gvg+AScnQP5QXaWKtO5\/NVvTaJ2kOdRCL1es6NqdmDR49++z1y1dkQkxUlWcfQBwoSoqfIfQpSsR6h70NNCFoB5BkUG4LjOfGI2m0AAwBf4vWQU3R4MrVSPk8Ies6ZcSAyiuW84LDYektaF9EAE5ZVyhVnuCZDknbcZbDZT96AM\/qBOQmi989hKcY7DMCti4JfpdhXZwooLKGl0uekNGyCiEFFD8Mi2WluQY8LiyrCBYrdG9HrfIryDdHo\/n342E7QTQvNkz\/QLZ70FvyRU7DkXsJZ9b730B21eYkvvMZyigDKmmSuS8EDoKVN\/DIYZ1c5U0OuSSg3toaeNQnTWmqTPA0mz9zX6WEL+fP6xYIL19u9xChA90iTaFbJLYt9cP3pmiDenh\/4cI8CqokGDj\/omgH6HKwg8WNY3QGTw8PMWJoCeC8Wi\/ni4XzxeNlly6Mp6XlOsB0sNkzrAKY0K5h2+No68jw+hnaKAYyiJbQt4SWB9p2MMebseubArffFY8BI\/\/Vw9LXAyxAEMENAOEDE2xhQ2TfbaDJOWJMntxOMasKBu987Iq5CFWP8UfS902VjNkNAxNB7xqKn\/qyNEMIjD4MHQxIEY5TRX\/Ckm0dPHJcBX8bdeOsr8zfKa2NhPPo9B8\/Aqv7shFLX7m1Es6aXcySVBRmTtAnOM1hxGb7pybgy2xyfQs7nZy9NjgckhmvBr9xWs3br\/y+\/Y+O7ylFTD5jViSqJhcgrlMJYpkTvuMB9PcJC6yegoeSrFP45OnUYgItBLs3VrEHdDGZyujhJHgMkuub2Bi5CIEt0nA7t9kz9XaluUnYlCWk3hyMztxCpW0sOOUVndq9YJ9gcKoh6J26MxrmdQqr63i65+JINZcu7skOQO\/9pm\/QxfTg1ohQTNO5afxTpZGAq8IrjvmY3C\/z3LSQ30xPPCkMEt\/yapYBGzYwZTPgf69QCkgzXKvozWrVhs5Kma1n+jPiz7MXrV0+efv6cPTt78vHFDzTw7JOQM0U0E8CChv3MMT55xv+B4DK6WxUPJxrfzfdBQYYkNqqc64Riyw1f8ZLbfbrhlDKBD6jtEAVf1+ldOkrxl20RoNej\/vQQJ0koWwbdqKVv1hj\/c\/b+\/NXbN9mrN8\/ful49urk9wonrdmJD+G5War6qHTn5S2TTxfFkMlnecXE3PeBn1MNjSd86jVjXRv3puk5Ovt7TQMd+rIf7qpu46eDC2kSaDn5ZhA1SwzVOp\/hdfX1dsgqGAWshEbYyWORlioX8i12RSsEdCc7UiNQadtyt0MC1cLfbJV\/Ieh0k5vmcrCBf8CvAER38HpppmDVSAOXP4BYEvwfEms0bQ5SZXHNP+ymGaQQ\/HnK4YmniRtaz89eNWCnFOhvJNhuDK3w6eA+bPi+ZZv\/VHDo8vcDtZfnP9EHya3LSDo+8on6ipTe4yzGMgna+3Qapa64yQ4rm8jeNJtH\/BrLvQygOAAA=\",\n}\n\nimport base64, gzip\nfrom pathlib import Path\n\nfor path, encoded in encoded_files.items():\n    print('unpacking', path)\n    Path(path).write_bytes(gzip.decompress(base64.b64decode(encoded)))\n    \n\nimport subprocess\n\nprint('invoking pip install')\nres = subprocess.run('pip install . --no-color --verbose --no-deps --disable-pip-version-check'.split(),\n                     capture_output=True)\nprint('res', res.returncode)\nprint('pip\\'s stdout')\nprint(res.stdout.decode())\nprint('pip\\'s stderr')\nprint(res.stderr.decode())\nfrom dsl import cpp_trace_param_automata","4513f3da":"def python_trace_param_automata(input, params, n_iter, n_hidden):\n\n    # We never use it. We just store zeros and pass it through all the commands. \n    # We thought we could use it later but we actually never did.\n    hidden = np.zeros((n_hidden, *input.shape)) if n_hidden > 0 else None \n\n    # This is the program that containes these 4 parts. All of them are trained with genetic algorithm.\n    global_rules, ca_rules, split_rule, merge_rule = params\n\n    # If there is some split rule, the algorithm makes many grids from one input grid (for example it splits it by figures.)\n    grids = apply_split_rule(input, hidden, split_rule)\n    \n    # At firsy we apply the global rules\n    for rule in global_rules:\n        for i, (inp, hid) in enumerate(grids):\n            # If it just the rule grid->grid we apply it to all grids or to (some grid) - that is parametrized. \n            if rule['macro_type'] == 'global_rule':\n                if rule['apply_to'] == 'all' or \\\n                    (rule['apply_to'] == 'index' and i == rule['apply_to_index']%len(grids) or\n                    (rule['apply_to'] == 'last' and i == len(grids) - 1)):\n                    grids[i] = apply_rule(inp, hid, rule)\n            \n            # There are some rules [grid] -> [grid], so we apply it to the whole set.\n            elif rule['macro_type'] == 'global_interaction_rule':\n                grids = apply_interaction_rule(grids, rule)\n    \n    # Then we apply cellular automata rules to the grids\n    for i, (input, hidden) in enumerate(grids):\n        for _ in range(n_iter):\n            output, hidden = compute_parametrized_automata(input, hidden, ca_rules)\n\n            if np.array_equal(input, output):\n                break\n\n            input = output\n\n        grids[i] = (output, hidden)\n        \n    # Then we merge all grids into one output\n    output = apply_merge_rule(grids, merge_rule, split_rule)\n\n    return output\n\n# We also have C++ version of the \"python_trace_param_automata\" command. \n# It's absolutely the same as python version that are written here but works 100x faster.\n\ndef trace_param_automata(input, params, n_iter, n_hidden):\n    # output = python_trace_param_automata(input, params, n_iter, n_hidden)\n    output = cpp_trace_param_automata(input, params, n_iter)\n    \n    return [[output]]","9118697e":"name = '2c737e39'\ntask = load_data(f'{name}.json', phase='evaluation')\n\nplot_task(task)","f8c57a88":"def apply_interaction_rule(grids, rule):\n    if rule['type'] == 'align_pattern':\n        if len(grids) > 5:\n            return grids\n        for index_from in range(len(grids)):\n            for index_to in range(index_from+1, len(grids)):\n                input_i = grids[index_from][0]\n                input_j = grids[index_to][0]\n\n                i_nonzero_rows = np.arange(input_i.shape[0])[np.max(input_i>0, axis=1)]\n                i_nonzero_columns = np.arange(input_i.shape[1])[np.max(input_i>0, axis=0)]\n                j_nonzero_rows = np.arange(input_j.shape[0])[np.max(input_j>0, axis=1)]\n                j_nonzero_columns = np.arange(input_j.shape[1])[np.max(input_j>0, axis=0)]\n                if i_nonzero_rows.shape[0] == 0 or i_nonzero_columns.shape[0] == 0 or \\\n                                j_nonzero_rows.shape[0] == 0 or j_nonzero_columns.shape[0] == 0:\n                    continue\n                i_minrow = np.min(i_nonzero_rows)\n                i_mincol = np.min(i_nonzero_columns)\n                i_maxrow = np.max(i_nonzero_rows) + 1\n                i_maxcol = np.max(i_nonzero_columns) + 1\n                j_minrow = np.min(j_nonzero_rows)\n                j_mincol = np.min(j_nonzero_columns)\n                j_maxrow = np.max(j_nonzero_rows) + 1\n                j_maxcol = np.max(j_nonzero_columns) + 1\n\n                figure_to_align = input_i[i_minrow:i_maxrow, i_mincol:i_maxcol]\n                figure_target = input_j[j_minrow:j_maxrow, j_mincol:j_maxcol]\n\n                best_fit = 0\n                best_i_fit, best_j_fit = -1, -1\n\n                if figure_to_align.shape[0] < figure_target.shape[0] or figure_to_align.shape[1] < figure_target.shape[1]:\n                    continue\n                else:\n                    for i_start in range((figure_to_align.shape[0] - figure_target.shape[0])+1):\n                        for j_start in range((figure_to_align.shape[1] - figure_target.shape[1])+1):\n                            fig_1 = figure_to_align[i_start:(i_start + figure_target.shape[0]), j_start:(j_start + figure_target.shape[1])]\n                            if np.logical_and(np.logical_and(figure_target > 0, figure_target!=rule['allow_color']), figure_target != fig_1).any():\n                                continue\n                            fit = np.sum(figure_target==fig_1)\n                            if fit > best_fit:\n                                best_i_fit, best_j_fit = i_start, j_start\n                                best_fit = fit\n\n                    if best_fit == 0:\n                        continue\n\n                    imin = j_minrow-best_i_fit\n                    imax = j_minrow-best_i_fit + figure_to_align.shape[0]\n                    jmin = j_mincol - best_j_fit\n                    jmax = j_mincol - best_j_fit + figure_to_align.shape[1]\n\n                    begin_i = max(imin, 0)\n                    begin_j = max(jmin, 0)\n                    end_i = min(imax, input_j.shape[0])\n                    end_j = min(jmax, input_j.shape[1])\n\n                    i_fig_begin = (begin_i-imin)\n                    i_fig_end = figure_to_align.shape[0]-(imax-end_i)\n                    j_fig_begin = (begin_j-jmin)\n                    j_fig_end = figure_to_align.shape[1]-(jmax-end_j)\n                    if rule['fill_with_color'] == 0:\n                        input_j[begin_i:end_i, begin_j:end_j] = figure_to_align[i_fig_begin:i_fig_end, j_fig_begin:j_fig_end]\n                    else:\n                        for i, j in product(range(end_i-begin_i + 1), range(end_j-begin_j + 1)):\n                            if input_j[begin_i + i, begin_j + j] == 0:\n                                input_j[begin_i + i, begin_j + j] = rule['fill_with_color'] * (figure_to_align[i_fig_begin + i, j_fig_begin + j])\n\n\n    return grids","9123f9a0":"def get_connectivity_info(color: np.array, ignore_black = False, von_neumann_only = False, edge_for_difcolors = False):\n\n    # UnionFind structure allows us to detect all connected areas in a linear time.\n    class UnionFind:\n        def __init__(self) -> None:\n            self.area = np.ones(color.size)\n            self.parent = np.arange(color.size)\n        def find(self, x: int) -> int:\n            if self.parent[x] != x:\n                self.parent[x] = self.find(self.parent[x])\n            return self.parent[x]\n        def union(self, u: int, v: int) -> None:\n            root_u, root_v = self.find(u), self.find(v)\n            if root_u != root_v:\n                area_u, area_v = self.area[root_u], self.area[root_v]\n                if area_u < area_v:\n                    root_u, root_v = root_v, root_u\n                self.parent[root_v] = root_u\n                self.area[root_u] = area_u + area_v\n\n    union_find = UnionFind()\n    neighbours = [[-1, 0], [0, -1], [1, 0], [0, 1]]\n    if not von_neumann_only:\n        neighbours.extend([[-1, -1], [1, -1], [1, 1], [-1, 1]])\n    nrows, ncols = color.shape\n    for i in range(nrows):\n        for j in range(ncols):\n            for s, t in neighbours:\n                u, v = i + s, j + t\n                if u >= 0 and u < nrows and v >= 0 and v < ncols and \\\n                        (color[u, v] == color[i, j] or (edge_for_difcolors and (color[u, v]>0) == (color[i, j]>0))):\n                    union_find.union(u * ncols + v, i * ncols + j)\n    # for every cell: write down the area of its corresponding area\n    communities = defaultdict(list)\n    for i, j in product(range(nrows), range(ncols)):\n        if not ignore_black or color[i, j] > 0:\n            communities[union_find.find(i * ncols + j)].append((i, j))\n    # the result is always sorted for consistency\n    communities = sorted(communities.values(), key = lambda area: (len(area), area))\n    return communities","c3cc3ee0":"def apply_rule(input, hidden_i, rule):\n    output = np.zeros_like(input, dtype=int)\n    hidden = np.zeros_like(input)\n    output[:, :] = input[:, :]\n    if rule['type'] == 'macro_multiply_k':\n        output = np.tile(output, rule['k'])\n    elif rule['type'] == 'flip':\n        if rule['how'] == 'ver':\n            output = output[::-1, :]\n        elif rule['how'] == 'hor':\n            output = output[:, ::-1]\n\n    elif rule['type'] == 'reduce':\n        skip_row = np.zeros(input.shape[0])\n\n        for i in range(1, input.shape[0]):\n            skip_row[i] = (input[i] == input[i-1]).all() or (input[i] == rule['skip_color']).all()\n\n        if (input[0] == rule['skip_color']).all():\n            skip_row[0] = 1\n\n        if np.sum(skip_row==0)>0:\n            output = input[skip_row == 0]\n\n        skip_column = np.zeros(input.shape[1])\n\n        for i in range(1, input.shape[1]):\n            skip_column[i] = (input[:, i] == input[:, i-1]).all() or (input[:, i] == rule['skip_color']).all()\n\n        if (input[:, 0] == rule['skip_color']).all():\n            skip_column[0] = 1\n\n        if np.sum(skip_column==0)>0:\n            output = output[:, skip_column == 0]\n\n\n    elif rule['type'] == 'rotate':\n        output = np.rot90(output, rule['rotations_count'])\n\n    elif rule['type'] == 'micro_multiply_by':\n        if rule['how_many'] == 'size':\n            k = output.shape[0]\n        else:\n            k = rule['how_many']\n        output = np.repeat(output, k, axis=0)\n        output = np.repeat(output, k, axis=1)\n\n    elif rule['type'] == 'macro_multiply_by':\n        if rule['how_many'] == 'both':\n            k = (2, 2)\n        elif rule['how_many'] == 'hor':\n            k = (1, 2)\n        elif rule['how_many'] == 'ver':\n            k = (2, 1)\n        output = np.tile(output, k)\n        if input.shape[0] == input.shape[1]:\n            for i in range(k[0]):\n                for j in range(k[1]):\n                    sub = output[i * input.shape[0]: (i + 1) * input.shape[0],\n                          j * input.shape[1]: (j + 1) * input.shape[1]]\n                    sub_rotated = np.rot90(sub, rule['rotates'][i * 2 + j])\n                    output[i * input.shape[0]: (i + 1) * input.shape[0],\n                    j * input.shape[1]: (j + 1) * input.shape[1]] = sub_rotated\n        for i in range(k[0]):\n            for j in range(k[1]):\n                sub = output[i * input.shape[0]: (i + 1) * input.shape[0], j * input.shape[1]: (j + 1) * input.shape[1]]\n                if 'ver' in rule['flips'][i * 2 + j]:\n                    sub = sub[::-1, :]\n                if 'hor' in rule['flips'][i * 2 + j]:\n                    sub = sub[:, ::-1]\n                output[i * input.shape[0]: (i + 1) * input.shape[0], j * input.shape[1]: (j + 1) * input.shape[1]] = sub\n\n    elif rule['type'] == 'distribute_from_border':\n        hidden = np.zeros_like(input)\n        for i in range(1, input.shape[0] - 1):\n            if output[i, 0] in rule['colors']:\n                if not output[i, input.shape[1] - 1] in rule['colors'] or output[i, input.shape[1] - 1] == output[i, 0]:\n                    output[i] = output[i, 0]\n\n        for j in range(1, input.shape[1] - 1):\n            if output[0, j] in rule['colors']:\n                if not output[input.shape[0] - 1, j] in rule['colors'] or output[input.shape[0] - 1, j] == output[0, j]:\n                    output[:, j] = output[0, j]\n\n    elif rule['type'] == 'color_for_inners':\n        hidden = np.zeros_like(input)\n        changed = 1\n        while changed == 1:\n            changed = 0\n            for i, j in product(range(input.shape[0]), range(input.shape[1])):\n                i_c = input[i, j]\n\n                if i_c > 0 or hidden[i, j] == 1:\n                    continue\n\n                if i == 0 or i == input.shape[0] - 1 or j == 0 or j == input.shape[1] - 1:\n                    hidden[i, j] = 1\n                    changed = 1\n                    continue\n\n                i_nbh = nbh(hidden, i, j)\n                # cells adagent to the current one\n                i_direct_nbh = {k: v for k, v in i_nbh.items() if k in {(1, 0), (-1, 0), (0, 1), (0, -1)}}\n\n                if sum(1 for v in i_direct_nbh.values() if v == 1) > 0:\n                    hidden[i, j] = 1\n                    changed = 1\n        output[((hidden == 0).astype(np.int) * (input == 0).astype(np.int)) == 1] = rule['color_out']\n        hidden = np.copy(hidden)\n\n    elif rule['type'] == 'draw_lines':\n        hidden = np.zeros_like(input)\n        if rule['direction'] == 'everywhere':\n            directions = ['top', 'bottom', 'left', 'right', 'top_left', 'bottom_left', 'top_right', 'bottom_right']\n        elif rule['direction'] == 'horizontal':\n            directions = ['left', 'right']\n        elif rule['direction'] == 'vertical':\n            directions = ['top', 'bottom']\n        elif rule['direction'] == 'horver':\n            directions = ['top', 'bottom', 'left', 'right']\n        elif rule['direction'] == 'diagonal':\n            directions = ['top_left', 'bottom_left', 'top_right', 'bottom_right']\n        else:\n            directions = [rule['direction']]\n\n        possible_directions = ['top', 'bottom', 'left', 'right',\n                               'top_left', 'bottom_left', 'top_right', 'bottom_right']\n\n        index_change = \\\n            [\n                [-1, 0],\n                [1, 0],\n                (0, -1),\n                (0, 1),\n                (-1, -1),\n                (+1, -1),\n                (-1, +1),\n                (+1, +1)\n            ]\n        for i_dir, direction in enumerate(possible_directions):\n            if direction in directions:\n                idx_ch = index_change[i_dir]\n                for i in range(input.shape[0]):\n                    for j in range(input.shape[1]):\n                        if input[i, j] == rule['start_by_color']:\n                            tmp_i = i + idx_ch[0]\n                            tmp_j = j + idx_ch[1]\n                            while 0 <= tmp_i < input.shape[0] and \\\n                                    0 <= tmp_j < input.shape[1] and \\\n                                    input[tmp_i, tmp_j] == rule['not_stop_by_color']:\n                                output[tmp_i, tmp_j] = rule['with_color']\n                                tmp_i += idx_ch[0]\n                                tmp_j += idx_ch[1]\n\n    elif rule['type'] == 'draw_line_to':\n        hidden = np.zeros_like(input)\n\n        index_change = \\\n            [\n                [-1, 0],\n                [1, 0],\n                (0, -1),\n                (0, 1),\n            ]\n        for i, j in product(range(input.shape[0]), range(input.shape[1])):\n            if input[i, j] != rule['start_by_color']:\n                continue\n\n            number_0 = np.sum(output[:i] == rule['direction_color'])\n            number_1 = np.sum(output[(i + 1):] == rule['direction_color'])\n            number_2 = np.sum(output[:, :j] == rule['direction_color'])\n            number_3 = np.sum(output[:, (j + 1):] == rule['direction_color'])\n            i_dir = np.argmax([number_0, number_1, number_2, number_3])\n            # print([number_0, number_1, number_2, number_3])\n            # 1\/0\n\n            idx_ch = index_change[i_dir]\n            tmp_i = i + idx_ch[0]\n            tmp_j = j + idx_ch[1]\n            while 0 <= tmp_i < input.shape[0] and \\\n                                    0 <= tmp_j < input.shape[1] and \\\n                    (input[tmp_i, tmp_j] in [rule['not_stop_by_color'], rule['not_stop_by_color_and_skip']]):\n\n                skip_color = rule['not_stop_by_color_and_skip']\n                if skip_color == 0 or input[tmp_i, tmp_j] != skip_color:\n                    output[tmp_i, tmp_j] = rule['with_color']\n                tmp_i += idx_ch[0]\n                tmp_j += idx_ch[1]\n\n    elif rule['type'] == 'distribute_colors':\n\n        non_zero_rows = []\n        non_zero_columns = []\n        color_for_row = np.zeros(input.shape[0])\n        color_for_column = np.zeros(input.shape[1])\n\n        for i in range(input.shape[0]):\n            row = input[i]\n            colors, counts = np.unique(row, return_counts=True)\n            good_colors = np.array([c in rule['colors'] for c in colors])\n            if not good_colors.any():\n                continue\n\n            colors = colors[good_colors]\n            counts = counts[good_colors]\n\n            best_color = colors[np.argmax(counts)]\n            color_for_row[i] = best_color\n            non_zero_rows.append(i)\n\n        for j in range(input.shape[1]):\n            row = input[:, j]\n            colors, counts = np.unique(row, return_counts=True)\n            good_colors = np.array([c in rule['colors'] for c in colors])\n            if not good_colors.any():\n                continue\n\n            colors = colors[good_colors]\n            counts = counts[good_colors]\n\n            best_color = colors[np.argmax(counts)]\n            color_for_column[j] = best_color\n            non_zero_columns.append(j)\n\n        if rule['horizontally'] == 1:\n            for i in non_zero_rows:\n                output[i] = color_for_row[i]\n\n        if rule['vertically'] == 1:\n            for j in non_zero_columns:\n                output[:, j] = color_for_column[j]\n\n        for i in non_zero_rows:\n            for j in non_zero_columns:\n                if input[i, j] == 0:\n                    output[i, j] = rule['intersect']\n        hidden = np.copy(hidden_i)\n\n    elif rule['type'] == 'unity':\n        hidden = np.copy(hidden_i)\n        if rule['mode'] == 'vertical':\n            for j in range(input.shape[1]):\n                last_color_now = np.zeros(10, dtype=np.int) - 1\n                for i in range(input.shape[0]):\n                    if not input[i, j] in rule['ignore_colors'] and last_color_now[input[i, j]] >= 0:\n                        if rule['with_color'] == 0:\n                            output[(last_color_now[input[i, j]] + 1):i, j] = input[i, j]\n                        else:\n                            output[(last_color_now[input[i, j]] + 1):i, j] = rule['with_color']\n                        last_color_now[input[i, j]] = i\n                    elif not input[i, j] in rule['ignore_colors']:\n                        last_color_now[input[i, j]] = i\n\n\n        elif rule['mode'] == 'horizontal':\n            for i in range(input.shape[0]):\n                last_color_now = np.zeros(10, dtype=np.int) - 1\n                for j in range(input.shape[1]):\n                    if not input[i, j] in rule['ignore_colors'] and last_color_now[input[i, j]] >= 0:\n                        if rule['with_color'] == 0:\n                            output[i, (last_color_now[input[i, j]] + 1):j] = input[i, j]\n                        else:\n                            output[i, (last_color_now[input[i, j]] + 1):j] = rule['with_color']\n                        last_color_now[input[i, j]] = j\n                    elif not input[i, j] in rule['ignore_colors']:\n                        last_color_now[input[i, j]] = j\n\n        elif rule['mode'] == 'horver':\n            for j in range(input.shape[1]):\n                last_color_now = np.zeros(10, dtype=np.int) - 1\n                for i in range(input.shape[0]):\n                    if not input[i, j] in rule['ignore_colors'] and last_color_now[input[i, j]] >= 0:\n                        if rule['with_color'] == 0:\n                            output[(last_color_now[input[i, j]] + 1):i, j] = input[i, j]\n                        else:\n                            output[(last_color_now[input[i, j]] + 1):i, j] = rule['with_color']\n                        last_color_now[input[i, j]] = i\n                    elif not input[i, j] in rule['ignore_colors']:\n                        last_color_now[input[i, j]] = i\n\n            for i in range(input.shape[0]):\n                last_color_now = np.zeros(10, dtype=np.int) - 1\n                for j in range(input.shape[1]):\n                    if not input[i, j] in rule['ignore_colors'] and last_color_now[input[i, j]] >= 0:\n                        if rule['with_color'] == 0:\n                            output[i, (last_color_now[input[i, j]] + 1):j] = input[i, j]\n                        else:\n                            output[i, (last_color_now[input[i, j]] + 1):j] = rule['with_color']\n                        last_color_now[input[i, j]] = j\n                    elif not input[i, j] in rule['ignore_colors']:\n                        last_color_now[input[i, j]] = j\n\n        elif rule['mode'] == 'diagonal':\n            for diag_id in range(-input.shape[0] - 1, input.shape[1] + 1):\n                last_color_now_x = np.zeros(10, dtype=np.int) - 1\n                last_color_now_y = np.zeros(10, dtype=np.int) - 1\n                for i, j in zip(np.arange(input.shape[0]), diag_id + np.arange(input.shape[0])):\n                    if 0 <= i < input.shape[0] and 0 <= j < input.shape[1]:\n                        if not input[i, j] in rule['ignore_colors'] and last_color_now_x[input[i, j]] >= 0:\n\n                            if rule['with_color'] == 0:\n                                output[np.arange(last_color_now_x[input[i, j]] + 1, i), np.arange(\n                                    last_color_now_y[input[i, j]] + 1, j)] = input[i, j]\n                            else:\n                                output[np.arange(last_color_now_x[input[i, j]] + 1, i), np.arange(\n                                    last_color_now_y[input[i, j]] + 1, j)] = rule[\n                                    'with_color']\n                            last_color_now_x[input[i, j]] = i\n                            last_color_now_y[input[i, j]] = j\n\n                        elif not input[i, j] in rule['ignore_colors']:\n                            last_color_now_x[input[i, j]] = i\n                            last_color_now_y[input[i, j]] = j\n\n            reflected_input = input[:, ::-1]\n            output = output[:, ::-1]\n            for diag_id in range(-reflected_input.shape[0] - 1, reflected_input.shape[1] + 1):\n                last_color_now_x = np.zeros(10, dtype=np.int) - 1\n                last_color_now_y = np.zeros(10, dtype=np.int) - 1\n                for i, j in zip(np.arange(reflected_input.shape[0]), diag_id + np.arange(reflected_input.shape[0])):\n                    if 0 <= i < reflected_input.shape[0] and 0 <= j < reflected_input.shape[1]:\n                        if not reflected_input[i, j] in rule['ignore_colors'] and last_color_now_x[\n                            reflected_input[i, j]] >= 0:\n\n                            if rule['with_color'] == 0:\n                                output[np.arange(last_color_now_x[reflected_input[i, j]] + 1, i), np.arange(\n                                    last_color_now_y[reflected_input[i, j]] + 1, j)] = reflected_input[i, j]\n                            else:\n                                output[np.arange(last_color_now_x[reflected_input[i, j]] + 1, i), np.arange(\n                                    last_color_now_y[reflected_input[i, j]] + 1, j)] = rule[\n                                    'with_color']\n                            last_color_now_x[reflected_input[i, j]] = i\n                            last_color_now_y[reflected_input[i, j]] = j\n\n                        elif not reflected_input[i, j] in rule['ignore_colors']:\n                            last_color_now_x[reflected_input[i, j]] = i\n                            last_color_now_y[reflected_input[i, j]] = j\n            output = output[:, ::-1]\n    elif rule['type'] == 'split_by_H':\n        hidden = np.copy(hidden_i)\n\n        if output.shape[0] >= 2:\n            part1 = output[:int(np.floor(output.shape[0] \/ 2))]\n            part2 = output[int(np.ceil(output.shape[0] \/ 2)):]\n\n            output = np.zeros_like(part1)\n            if rule['merge_rule'] == 'or':\n                output[part1 > 0] = part1[part1 > 0]\n                output[part2 > 0] = part2[part2 > 0]\n            elif rule['merge_rule'] == 'equal':\n                idx = np.logical_and(np.logical_and(part1 > 0, part2 > 0), part1 == part2)\n                output[idx] = part1[idx]\n            elif rule['merge_rule'] == 'and':\n                idx = np.logical_and(part1 > 0, part2 > 0)\n                output[idx] = part1[idx]\n            elif rule['merge_rule'] == 'xor':\n                idx = np.logical_xor(part1 > 0, part2 > 0)\n                output[idx] = part1[idx]\n\n    elif rule['type'] == 'split_by_W':\n        hidden = np.copy(hidden_i)\n\n        if output.shape[1] >= 2:\n            part1 = output[:, :int(np.floor(output.shape[1] \/ 2))]\n            part2 = output[:, int(np.ceil(output.shape[1] \/ 2)):]\n            output = np.zeros_like(part1)\n            if rule['merge_rule'] == 'or':\n                output[part1 > 0] = part1[part1 > 0]\n                output[part2 > 0] = part2[part2 > 0]\n            elif rule['merge_rule'] == 'equal':\n                idx = np.logical_and(np.logical_and(part1 > 0, part2 > 0), part1 == part2)\n                output[idx] = part1[idx]\n            elif rule['merge_rule'] == 'and':\n                idx = np.logical_and(part1 > 0, part2 > 0)\n                output[idx] = part1[idx]\n            elif rule['merge_rule'] == 'xor':\n                idx = np.logical_xor(part1 > 0, part2 > 0)\n                output[idx] = part1[idx]\n\n\n    elif rule['type'] == 'map_color':\n        hidden = np.copy(hidden_i)\n        output[output == rule['color_in']] = rule['color_out']\n    elif rule['type'] == 'crop_empty':\n\n        hidden = np.copy(hidden_i)\n\n        nonzerosi = np.max((output != 0).astype(np.int), axis=1)\n        nonzerosj = np.max((output != 0).astype(np.int), axis=0)\n        if np.max(nonzerosi) == 0 or np.max(nonzerosj) == 0:\n            output = output * 0\n        else:\n            mini = np.min(np.arange(output.shape[0])[nonzerosi == 1])\n            maxi = np.max(np.arange(output.shape[0])[nonzerosi == 1])\n            minj = np.min(np.arange(output.shape[1])[nonzerosj == 1])\n            maxj = np.max(np.arange(output.shape[1])[nonzerosj == 1])\n\n            output = output[mini:(maxi + 1), minj:(maxj + 1)]\n\n    elif rule['type'] == 'crop_figure':\n        hidden = np.copy(hidden_i)\n\n        communities = get_connectivity_info(output, ignore_black=True, edge_for_difcolors=rule['dif_c_edge'])\n        if len(communities) == 0:\n            output = np.zeros_like(output)\n        else:\n            if rule['mode'] == 'biggest':\n                biggest = list(communities[np.argmax([len(list(com)) for com in communities])])\n            else:\n                biggest = list(communities[np.argmin([len(list(com)) for com in communities])])\n            biggest = np.array(biggest)\n            min_bx = np.min(biggest[:, 0])\n            min_by = np.min(biggest[:, 1])\n            biggest[:, 0] -= min_bx\n            biggest[:, 1] -= min_by\n            output = np.zeros((np.max(biggest[:, 0]) + 1, np.max(biggest[:, 1]) + 1), dtype=np.int)\n            for i in range(biggest.shape[0]):\n                output[tuple(biggest[i])] = input[(min_bx + biggest[i][0], min_by + biggest[i][1])]\n\n    elif rule['type'] == 'make_holes':\n        hidden = np.copy(hidden_i)\n\n        for i in range(output.shape[0]):\n            for j in range(output.shape[1]):\n                i_nbh = nbh(output, i, j)\n                proper_nbhs = i_nbh.values()\n                for color in range(1, 10):\n                    if sum(1 for v in proper_nbhs if v == color) == 8:\n                        output[i, j] = 0\n                        break\n\n    elif rule['type'] == 'gravity':\n        changed_smth = 1\n        hidden = np.copy(hidden_i)\n        im = output\n\n        if rule['gravity_type'] == 'figures':\n            communities = get_connectivity_info(im, ignore_black=True)\n\n        else:\n            communities = []\n            for i in range(output.shape[0]):\n                for j in range(output.shape[1]):\n                    if output[i, j] > 0:\n                        communities.append([[i, j]])\n\n        directions = []\n\n        for com in communities:\n            community = list(com)\n            color_fig = output[community[0][0], community[0][1]]\n            if rule['look_at_what_to_move'] == 1 and color_fig != rule['color_what']:\n                directions.append('None')\n                continue\n\n            xs = [p[0] for p in community]\n            ys = [p[1] for p in community]\n\n            if rule['direction_type'] == 'border':\n                direction = rule['direction_border']\n            elif rule['direction_type'] == 'color':\n                color = rule['direction_color']\n                xmin, xmax = np.min(xs), np.max(xs)\n                ymin, ymax = np.min(ys), np.max(ys)\n                number_0 = np.sum(output[:xmin] == color)\n                number_1 = np.sum(output[(xmax + 1):] == color)\n                number_2 = np.sum(output[:, :ymin] == color)\n                number_3 = np.sum(output[:, (ymax + 1):] == color)\n                direction = ['top', 'bottom', 'left', 'right'][np.argmax([number_0, number_1, number_2, number_3])]\n\n            directions.append(direction)\n\n        already_moved = np.zeros(len(communities))\n        while changed_smth > 0:\n\n            changed_smth = 0\n\n            for i, com in enumerate(communities):\n                community = list(com)\n                color_fig = output[community[0][0], community[0][1]]\n                xs = [p[0] for p in community]\n                ys = [p[1] for p in community]\n\n                direction = directions[i]\n                if direction == 'top':\n                    toper = np.array([[p[0] - 1, p[1]] for p in community if (p[0] - 1, p[1]) not in community])\n                    xs = np.array([p[0] for p in toper])\n                    ys = np.array([p[1] for p in toper])\n                    if np.min(xs) < 0:\n                        continue\n\n                    if (output[xs, ys] == 0).all() and (rule['steps_limit']==1 or already_moved[i]==0):\n                        changed_smth = 1\n                        already_moved[i]=1\n                        com_xs = np.array([p[0] for p in community])\n                        com_ys = np.array([p[1] for p in community])\n                        output[com_xs, com_ys] = 0\n                        output[com_xs - 1, com_ys] = color_fig\n                        communities[i] = [(p[0] - 1, p[1]) for p in community]\n\n                if direction == 'bottom':\n                    toper = np.array([[p[0] + 1, p[1]] for p in community if (p[0] + 1, p[1]) not in community])\n                    xs = np.array([p[0] for p in toper])\n                    ys = np.array([p[1] for p in toper])\n\n                    if np.max(xs) == input.shape[0]:\n                        continue\n\n                    if (output[xs, ys] == 0).all() and (rule['steps_limit']==1 or already_moved[i]==0):\n                        changed_smth = 1\n                        already_moved[i]=1\n                        com_xs = np.array([p[0] for p in community])\n                        com_ys = np.array([p[1] for p in community])\n\n                        output[com_xs, com_ys] = 0\n                        output[com_xs + 1, com_ys] = color_fig\n                        communities[i] = [(p[0] + 1, p[1]) for p in community]\n\n                if direction == 'left':\n                    toper = np.array([[p[0], p[1] - 1] for p in community if (p[0], p[1] - 1) not in community])\n                    xs = np.array([p[0] for p in toper])\n                    ys = np.array([p[1] for p in toper])\n\n                    if np.min(ys) < 0:\n                        continue\n\n                    if (output[xs, ys] == 0).all() and (rule['steps_limit']==1 or already_moved[i]==0):\n                        changed_smth = 1\n                        already_moved[i]=1\n                        com_xs = np.array([p[0] for p in community])\n                        com_ys = np.array([p[1] for p in community])\n                        output[com_xs, com_ys] = 0\n                        output[com_xs, com_ys - 1] = color_fig\n                        communities[i] = [(p[0], p[1] - 1) for p in community]\n\n                if direction == 'right':\n                    toper = np.array([[p[0], p[1] + 1] for p in community if (p[0], p[1] + 1) not in community])\n                    xs = np.array([p[0] for p in toper])\n                    ys = np.array([p[1] for p in toper])\n\n                    if np.max(ys) == input.shape[1]:\n                        continue\n\n                    if (output[xs, ys] == 0).all() and (rule['steps_limit']==1 or already_moved[i]==0):\n                        changed_smth = 1\n                        already_moved[i]=1\n                        com_xs = np.array([p[0] for p in community])\n                        com_ys = np.array([p[1] for p in community])\n                        output[com_xs, com_ys] = 0\n                        output[com_xs, com_ys + 1] = color_fig\n                        communities[i] = [(p[0], p[1] + 1) for p in community]\n\n\n    return output, hidden","8f07d04f":"name = '292dd178'\ntask = load_data(f'{name}.json', phase='evaluation')\n\nplot_task(task)","9610ce0e":"nbh = lambda x, i, j: {\n    (ip, jp) : x[i+ip, j+jp]\n        for ip, jp in product([1, -1, 0], repeat=2)\n            if 0 <= i+ip < x.shape[0] and 0 <= j+jp < x.shape[1] and (not (ip==0 and jp==0))\n}\n\ndef compute_parametrized_automata(input, hidden_i, rules):\n    output = np.zeros_like(input, dtype=int)\n\n    hidden_o = np.copy(hidden_i)\n\n    for i, j in product(range(input.shape[0]), range(input.shape[1])):\n        i_c = input[i, j]\n        i_nbh = nbh(input, i, j)\n        # cells adagent to the current one\n        i_direct_nbh = {k: v for k, v in i_nbh.items() if k in {(1, 0), (-1, 0), (0, 1), (0, -1)}}\n        i_indirect_nbh = {k: v for k, v in i_nbh.items() if k in {(1, 1), (-1, -1), (-1, 1), (1, -1)}}\n\n        is_top_b, is_bottom_b = i == 0, i == input.shape[0] - 1\n        is_left_b, is_right_b = j == 0, j == input.shape[1] - 1\n        is_b = is_top_b or is_bottom_b or is_left_b or is_right_b\n\n        if i_c > 0:\n            output[i, j] = i_c\n\n        for rule in rules:\n\n            if i_c in rule['ignore_colors']:\n                continue\n\n            if rule['type'] == 'copy_color_by_direction':\n                if rule['direction'] == 'bottom' or rule['direction'] == 'everywhere':\n                    if not is_top_b and input[i - 1, j] in rule['copy_color'] and \\\n                            (i == 1 or input[i - 2, j] == rule['look_back_color']):\n                        output[i, j] = input[i - 1, j]\n                        break\n\n                if rule['direction'] == 'top' or rule['direction'] == 'everywhere':\n                    if not is_bottom_b and input[i + 1, j] in rule['copy_color'] and \\\n                            (i == input.shape[0] - 2 or input[i + 2, j] == rule['look_back_color']):\n                        output[i, j] = input[i + 1, j]\n                        break\n\n                if rule['direction'] == 'right' or rule['direction'] == 'everywhere':\n                    if not is_left_b and input[i, j - 1] in rule['copy_color'] and \\\n                            (j == 1 or input[i, j - 2] == rule['look_back_color']):\n                        output[i, j] = input[i, j - 1]\n                        break\n\n                if rule['direction'] == 'left' or rule['direction'] == 'everywhere':\n                    if not is_right_b and input[i, j + 1] in rule['copy_color'] and \\\n                            (j == input.shape[1] - 2 or input[i, j + 2] == rule['look_back_color']):\n                        output[i, j] = input[i, j + 1]\n                        break\n            elif rule['type'] == 'corner_check':\n                color_nbh = rule['nbh_check_colors']\n                sum_nbh = 3\n                out_nbh = rule['nbh_check_out']\n\n                i_uplecorner_nbh = {k: v for k, v in i_nbh.items() if k in {(-1, -1), (-1, 0), (0, -1)}}\n                i_upricorner_nbh = {k: v for k, v in i_nbh.items() if k in {(-1, 1), (-1, 0), (0, 1)}}\n                i_dolecorner_nbh = {k: v for k, v in i_nbh.items() if k in {(1, -1), (1, 0), (0, -1)}}\n                i_doricorner_nbh = {k: v for k, v in i_nbh.items() if k in {(1, 1), (1, 0), (0, 1)}}\n                if sum(1 for v in i_nbh.values() if v in color_nbh) < 3:\n                    continue\n                did_something = False\n                for corner_idx in [i_uplecorner_nbh, i_upricorner_nbh, i_dolecorner_nbh, i_doricorner_nbh]:\n                    for color in color_nbh:\n                        if sum(1 for v in corner_idx.values() if v == color) == sum_nbh:\n                            output[i, j] = out_nbh\n                            did_something = True\n                            break\n                    if did_something:\n                        break\n                if did_something:\n                    break\n\n\n            elif rule['type'] == 'nbh_check':\n                color_nbh = rule['nbh_check_colors']\n                sum_nbh = rule['nbh_check_sum']\n                out_nbh = rule['nbh_check_out']\n\n                proper_nbhs = i_nbh.values()\n\n                if sum(1 for v in proper_nbhs if v in color_nbh) > sum_nbh:\n                    output[i, j] = out_nbh\n                    break\n\n            elif rule['type'] == 'direct_check':\n                color_nbh = rule['nbh_check_colors']\n                sum_nbh = rule['nbh_check_sum']\n                out_nbh = rule['nbh_check_out']\n\n                proper_nbhs = i_direct_nbh.values()\n\n                if sum(1 for v in proper_nbhs if v in color_nbh) > sum_nbh:\n                    output[i, j] = out_nbh\n                    break\n\n            elif rule['type'] == 'indirect_check':\n                color_nbh = rule['nbh_check_colors']\n                sum_nbh = rule['nbh_check_sum']\n                out_nbh = rule['nbh_check_out']\n\n                proper_nbhs = i_indirect_nbh.values()\n\n                if sum(1 for v in proper_nbhs if v in color_nbh) > sum_nbh:\n                    output[i, j] = out_nbh\n                    break\n\n\n            elif rule['type'] == 'color_distribution':\n                directions = ['top', 'bottom', 'left', 'right', 'top_left', 'bottom_left', 'top_right', 'bottom_right']\n                not_border_conditions = \\\n                    [\n                        not is_top_b,\n                        not is_bottom_b,\n                        not is_left_b,\n                        not is_right_b,\n                        not is_top_b and not is_left_b,\n                        not is_bottom_b and not is_left_b,\n                        not is_top_b and not is_right_b,\n                        not is_bottom_b and not is_right_b\n                    ]\n                index_from = \\\n                    [\n                        (i - 1, j),\n                        (i + 1, j),\n                        (i, j - 1),\n                        (i, j + 1),\n                        (i - 1, j - 1),\n                        (i + 1, j - 1),\n                        (i - 1, j + 1),\n                        (i + 1, j + 1)\n                    ]\n\n                did_something = False\n                for i_dir, direction in enumerate(directions):\n                    if rule['direction'] == direction:\n                        if not_border_conditions[i_dir]:\n                            if (rule['check_in_empty'] == 1 and input[index_from[i_dir]] > 0) or \\\n                                    (rule['check_in_empty'] == 0 and input[index_from[i_dir]] == rule['color_in']):\n                                output[i, j] = rule['color_out']\n                                did_something = True\n                                break\n                if did_something:\n                    break\n\n    return output, hidden_o","755bd12f":"name = '00576224'\ntask = load_data(f'{name}.json', phase='evaluation')\n\nplot_task(task)","955768b0":"def apply_split_rule(input, hidden, split_rule):\n    if split_rule['type'] == 'nothing':\n        return [(input, hidden)]\n\n    if split_rule['type'] == 'macro_multiply':\n        ks = split_rule['k1'] *  split_rule['k2']\n        grids = [(np.copy(input), np.copy(hidden)) for _ in range(ks)]\n        return grids\n\n    dif_c_edge = split_rule['type'] == 'figures'\n    \n    # communities are always sorted by the size and \n    communities = get_connectivity_info(input, ignore_black=True, edge_for_difcolors=dif_c_edge)\n\n    if len(communities) > 0:\n        if split_rule['sort'] == 'biggest':\n            communities = communities[::-1]\n\n        grids = [(np.zeros_like(input), np.zeros_like(hidden)) for _ in range(len(communities))]\n        for i in range(len(communities)):\n            for point in communities[i]:\n                grids[i][0][point] = input[point]\n    else:\n        grids = [(input, hidden)]\n\n    return grids\n\n\ndef apply_merge_rule(grids, merge_rule, split_rule):\n\n    if split_rule['type'] == 'macro_multiply':\n        shape_base = grids[0][0].shape\n        shapes = [arr[0].shape for arr in grids]\n        if not np.array([shape_base == sh for sh in shapes]).all():\n            return np.zeros((1, 1), dtype=np.int)\n\n        ks_1 = split_rule['k1']\n        ks_2 = split_rule['k2']\n        output = np.zeros((shape_base[0] * ks_1, shape_base[1] * ks_2), dtype=np.int8)\n        for k1 in range(ks_1):\n            for k2 in range(ks_2):\n                output[(k1*shape_base[0]):((k1+1) * shape_base[0]), (k2*shape_base[1]):((k2+1) * shape_base[1])] = grids[k1*ks_2 + k2][0]\n\n        return output\n\n    if merge_rule['type'] == 'cellwise_or':\n        output = np.zeros_like(grids[0][0])\n        for i in np.arange(len(grids))[::-1]:\n            if grids[i][0].shape == output.shape:\n                output[grids[i][0]>0] = grids[i][0][grids[i][0]>0]\n        return output\n    elif merge_rule['type'] == 'output_first':\n        output = grids[0][0]\n    elif merge_rule['type'] == 'output_last':\n        output = grids[-1][0]\n    return output","47c2cff9":"def get_random_split_rule(all_colors, best_candidates={}, temp=0, config={}, r_type=None):\n    rule = {}\n    rule['type'] = random.choice(['nothing', 'color_figures', 'figures', 'macro_multiply'])\n    if rule['type'] in ['color_figures', 'figures']:\n        rule['sort'] = random.choice(['biggest', 'smallest'])\n\n    if rule['type'] == 'macro_multiply':\n        rule['k1'] = np.random.randint(config['mink1'], config['maxk1']+1)\n        rule['k2'] = np.random.randint(config['mink2'], config['maxk2']+1)\n\n    return rule\n\n\ndef get_random_merge_rule(all_colors, best_candidates={}, temp=0, config={}, r_type=None):\n    rule = {}\n    rule['type'] = random.choice(['cellwise_or', 'output_first', 'output_last'])\n    return rule\n\n\ndef get_random_ca_rule(all_colors, best_candidates={}, temp=0, config={}, r_type=None):\n    types_possible = \\\n        [\n            'copy_color_by_direction',\n            'direct_check',\n            'indirect_check',\n            'nbh_check',\n            'corner_check',\n            'color_distribution',\n        ]\n\n    ca_rules = []\n    best_candidates_items = list(best_candidates.items())\n    if len(best_candidates_items) > 0:\n        for best_score, best_candidates_score in best_candidates_items:\n            for best_c in best_candidates_score:\n                gl, ca, _, _ = best_c\n                ca_rules += [c['type'] for c in ca]\n        type_counts = dict(zip(types_possible, np.zeros(len(types_possible))))\n\n        rules, counts = np.unique(ca_rules, return_counts=True)\n        for i in range(rules.shape[0]):\n            type_counts[rules[i]] += counts[i]\n        counts = np.array(list(type_counts.values()))\n        if np.sum(counts) > 0:\n            counts \/= np.sum(counts)\n        else:\n            counts = np.ones(counts.shape[0]) \/ counts.shape[0]\n        uniform = np.ones(counts.shape[0]) \/ counts.shape[0]\n        probs = temp * counts + (1 - temp) * uniform\n\n    else:\n        probs = np.ones(len(types_possible)) \/ len(types_possible)\n\n    colors = all_colors[1:]\n\n    type_probs = np.ones(len(types_possible)) \/ len(types_possible)\n\n    if r_type is None:\n        random_type = types_possible[np.random.choice(len(types_possible), p=probs)]\n    else:\n        random_type = r_type\n\n    def get_random_out_color():\n        possible_colors = config['possible_colors_out']\n        return np.random.choice(possible_colors)\n\n    def get_random_ignore_colors():\n        if config['possible_ignore_colors'].shape[0] > 0:\n            possible_colors = config['possible_ignore_colors']\n            return possible_colors[np.random.randint(2, size=possible_colors.shape[0]) == 1]\n        else:\n            return []\n\n    def get_random_all_colors():\n        return all_colors[np.random.randint(2, size=all_colors.shape[0]) == 1]\n\n    def get_random_colors():\n        return get_random_all_colors()\n\n    def get_random_all_color():\n        return np.random.choice(all_colors)\n\n    def get_random_color():\n        return get_random_all_color()\n\n    rule = {}\n    rule['type'] = random_type\n    rule['macro_type'] = 'ca_rule'\n    rule['ignore_colors'] = list(config['ignore_colors'])\n\n    if np.random.rand() < 0.5 and config['possible_ignore_colors'].shape[0]:\n        rule['ignore_colors'] += [random.choice(config['possible_ignore_colors'])]\n\n    if random_type == 'copy_color_by_direction':\n        rule['direction'] = random.choice(['everywhere'])\n        rule['copy_color'] = [get_random_out_color()]\n        rule['look_back_color'] = rule['copy_color'][0]\n\n    elif random_type == 'corner_check':\n        if np.random.rand() < 0.5:\n            rule['nbh_check_colors'] = [get_random_all_color()]\n        else:\n            rule['nbh_check_colors'] = list(np.unique([get_random_all_color(), get_random_all_color()]))\n        rule['nbh_check_out'] = get_random_out_color()\n        rule['ignore_colors'] = list(np.unique(rule['ignore_colors'] + [rule['nbh_check_out']]))\n\n    elif random_type == 'direct_check':\n        rule['nbh_check_sum'] = np.random.randint(4)\n        if np.random.rand() < 0.5:\n            rule['nbh_check_colors'] = [get_random_all_color()]\n        else:\n            rule['nbh_check_colors'] = list(np.unique([get_random_all_color(), get_random_all_color()]))\n        rule['nbh_check_out'] = get_random_out_color()\n        rule['ignore_colors'] = list(np.unique(rule['ignore_colors'] + [rule['nbh_check_out']]))\n\n    elif random_type == 'indirect_check':\n        rule['nbh_check_sum'] = np.random.randint(4)\n        if np.random.rand() < 0.5:\n            rule['nbh_check_colors'] = [get_random_all_color()]\n        else:\n            rule['nbh_check_colors'] = list(np.unique([get_random_all_color(), get_random_all_color()]))\n        rule['nbh_check_out'] = get_random_out_color()\n        rule['ignore_colors'] = list(np.unique(rule['ignore_colors'] + [rule['nbh_check_out']]))\n\n    elif random_type == 'nbh_check':\n        rule['nbh_check_sum'] = np.random.randint(8)\n        if np.random.rand() < 0.5:\n            rule['nbh_check_colors'] = [get_random_all_color()]\n        else:\n            rule['nbh_check_colors'] = list(np.unique([get_random_all_color(), get_random_all_color()]))\n        rule['nbh_check_out'] = get_random_out_color()\n        rule['ignore_colors'] = list(np.unique(rule['ignore_colors'] + [rule['nbh_check_out']]))\n\n    elif random_type == 'color_distribution':\n        rule['direction'] = random.choice(\n            ['top', 'bottom', 'left', 'right', 'top_left', 'bottom_left', 'top_right', 'bottom_right'])\n        rule['check_in_empty'] = np.random.randint(2)\n        rule['color_out'] = get_random_out_color()\n        if rule['check_in_empty'] == 0:\n            rule['color_in'] = rule['color_out']\n        else:\n            rule['color_in'] = get_random_all_color()\n\n        rule['ignore_colors'] = list(np.unique(rule['ignore_colors'] + [rule['color_out']]))\n\n    return rule\n\n\ndef get_random_global_rule(all_colors, best_candidates={}, temp=0, config={}, r_type=None):\n    types_possible = \\\n        [\n            'distribute_colors',\n            'unity',\n            'color_for_inners',\n            'map_color',\n            'draw_lines',\n            'draw_line_to',\n            'gravity',\n            'make_holes',\n            'distribute_from_border',\n            'align_pattern',\n            'rotate',\n            'flip'\n        ]\n\n    if config['allow_make_smaller']:\n        types_possible += \\\n            [\n                'crop_empty',\n                'crop_figure',\n                'split_by_H',\n                'split_by_W',\n                'reduce'\n            ]\n\n    gl_rules = []\n    best_candidates_items = list(best_candidates.items())\n    if len(best_candidates_items) > 0:\n        for best_score, best_candidates_score in best_candidates_items:\n            for best_c in best_candidates_score:\n                gl, ca, _, _ = best_c\n                gl_rules += [c['type'] for c in gl]\n        type_counts = dict(zip(types_possible, np.zeros(len(types_possible))))\n\n        rules, counts = np.unique(gl_rules, return_counts=True)\n        for i in range(rules.shape[0]):\n            type_counts[rules[i]] += counts[i]\n        counts = np.array(list(type_counts.values()))\n        if np.sum(counts) > 0:\n            counts \/= np.sum(counts)\n        else:\n            counts = np.ones(counts.shape[0]) \/ counts.shape[0]\n        uniform = np.ones(counts.shape[0]) \/ counts.shape[0]\n        probs = temp * counts + (1 - temp) * uniform\n    else:\n        probs = np.ones(len(types_possible)) \/ len(types_possible)\n\n\n    if r_type is None:\n        random_type = types_possible[np.random.choice(len(types_possible), p=probs)]\n    else:\n        random_type = r_type\n\n    def get_random_all_color():\n        return np.random.choice(all_colors)\n\n    def get_random_color():\n        return get_random_all_color()\n\n    def get_random_out_color():\n        possible_colors = config['possible_colors_out']\n        return np.random.choice(possible_colors)\n\n    rule = {}\n    rule['type'] = random_type\n    rule['macro_type'] = 'global_rule'\n    rule['apply_to'] = random.choice(['all', 'index'])\n\n    if np.random.rand()<0.2:\n        rule['apply_to'] = 'last'\n\n    if rule['apply_to'] == 'index':\n        rule['apply_to_index'] = np.random.choice(10)\n\n    if random_type == 'macro_multiply_k':\n        rule['k'] = (np.random.randint(1, 4), np.random.randint(1, 4))\n    elif random_type == 'flip':\n        rule['how'] = random.choice(['ver', 'hor'])\n\n    elif random_type == 'rotate':\n        rule['rotations_count'] = np.random.randint(1, 4)\n\n    elif random_type == 'micro_multiply_by':\n        rule['how_many'] = random.choice([2, 3, 4, 5, 'size'])\n\n    elif random_type == 'macro_multiply_by':\n        rule['how_many'] = random.choice(['both', 'hor', 'ver'])\n        rule['rotates'] = [np.random.randint(1) for _ in range(4)]\n        rule['flips'] = [random.choice(['hor', 'ver', 'horver', 'no']) for _ in range(4)]\n\n\n    elif random_type == 'distribute_from_border':\n        rule['colors'] = list(np.unique([get_random_out_color(), get_random_all_color()]))\n\n    elif random_type == 'draw_lines':\n        rule['direction'] = random.choice(['everywhere', 'horizontal', 'vertical', 'horver', 'diagonal'])\n        # 'top', 'bottom', 'left', 'right',\n        # 'top_left', 'bottom_left', 'top_right', 'bottom_right'])\n        rule['not_stop_by_color'] = 0  # get_random_all_color()\n        rule['start_by_color'] = get_random_all_color()\n        rule['with_color'] = get_random_out_color()\n\n    elif random_type == 'reduce':\n        rule['skip_color'] = get_random_all_color()\n    elif random_type == 'draw_line_to':\n\n        rule['direction_color'] = get_random_all_color()\n\n        rule['not_stop_by_color'] = 0\n        if np.random.rand() < 0.5:\n            rule['not_stop_by_color_and_skip'] = get_random_all_color()\n        else:\n            rule['not_stop_by_color_and_skip'] = 0\n\n        rule['start_by_color'] = get_random_all_color()\n        rule['with_color'] = get_random_out_color()\n\n    elif random_type == 'distribute_colors':\n        rule['colors'] = list(np.unique([get_random_out_color(), get_random_all_color()]))\n        rule['horizontally'] = np.random.randint(2)\n        rule['vertically'] = np.random.randint(2)\n        rule['intersect'] = get_random_out_color()\n\n    elif random_type == 'color_for_inners':\n        rule['color_out'] = get_random_out_color()\n\n    elif random_type == 'crop_figure':\n        rule['mode'] = random.choice(['smallest', 'biggest'])\n        rule['dif_c_edge'] = random.choice([True, False])\n\n\n    elif random_type == 'unity':\n        rule['mode'] = random.choice(['diagonal', 'horizontal', 'vertical', 'horver'])\n        rule['ignore_colors'] = [0]\n        if np.random.rand() < 0.5:\n            rule['ignore_colors'] += [get_random_all_color()]\n        rule['with_color'] = random.choice([get_random_out_color(), 0])\n\n    elif random_type == 'map_color':\n        rule['color_in'] = get_random_all_color()\n        rule['color_out'] = get_random_out_color()\n\n    elif random_type == 'gravity':\n        rule['gravity_type'] = random.choice(['figures', 'cells'])\n        rule['steps_limit'] = np.random.choice(2)\n        rule['look_at_what_to_move'] = np.random.choice(2)\n        if rule['look_at_what_to_move'] == 1:\n            rule['color_what'] = get_random_out_color()\n        rule['direction_type'] = random.choice(['border', 'color'])\n        if rule['direction_type'] == 'border':\n            rule['direction_border'] = random.choice(['top', 'bottom', 'left', 'right'])\n        else:\n            rule['direction_color'] = get_random_color()\n\n    elif random_type == 'split_by_H' or random_type == 'split_by_W':\n        rule['merge_rule'] = random.choice(['and', 'equal', 'or', 'xor'])\n\n    elif random_type == 'align_pattern':\n        rule['macro_type'] = 'global_interaction_rule'\n        # rule['allow_rotation'] = False\n        rule['allow_color'] = get_random_all_color()\n        rule['fill_with_color'] = 0 #random.choice([0, get_random_all_color()])\n\n    return rule","7817a64c":"def get_task_metadata(task):\n    colors = []\n    shapes_input = [[], []]\n    shapes_output = [[], []]\n    for part in ['train']:\n        for uni_task in task[part]:\n            inp = uni_task['input']\n            colors += list(np.unique(inp))\n            out = uni_task['output']\n            colors += list(np.unique(out))\n\n            shapes_input[0].append(inp.shape[0])\n            shapes_input[1].append(inp.shape[1])\n            shapes_output[0].append(out.shape[0])\n            shapes_output[1].append(out.shape[1])\n\n    all_colors = np.unique(colors)\n\n    min_k1 = int(np.floor(np.min(np.array(shapes_output[0])\/np.array(shapes_input[0]))))\n    min_k2 = int(np.floor(np.min(np.array(shapes_output[1])\/np.array(shapes_input[1]))))\n    max_k1 = int(np.ceil(np.max(np.array(shapes_output[0])\/np.array(shapes_input[0]))))\n    max_k2 = int(np.ceil(np.max(np.array(shapes_output[1])\/np.array(shapes_input[1]))))\n\n    max_shape = np.max([shapes_input])\n\n    config = {}\n\n    config['mink1'] = max(1, min(min(min_k1, 30\/\/max_shape), 3))\n    config['mink2'] = max(1, min(min(min_k2, 30\/\/max_shape), 3))\n    config['maxk1'] = max(1, min(min(max_k1, 30\/\/max_shape), 3))\n    config['maxk2'] = max(1, min(min(max_k2, 30\/\/max_shape), 3))\n\n\n    config['allow_make_smaller'] = False\n    config['allow_make_bigger'] = False\n\n    for uni_task in task['train']:\n        if uni_task['input'].shape[0] > uni_task['output'].shape[0] or \\\n                uni_task['input'].shape[1] > uni_task['output'].shape[1]:\n            config['allow_make_smaller'] = True\n\n        if uni_task['input'].shape[0] < uni_task['output'].shape[0] or \\\n                uni_task['input'].shape[1] < uni_task['output'].shape[1]:\n            config['allow_make_bigger'] = True\n\n    colors_out = []\n    changed_colors = []\n    inp_colors = []\n    for uni_task in task['train']:\n        inp = uni_task['input']\n        out = uni_task['output']\n        for i in range(min(inp.shape[0], out.shape[0])):\n            for j in range(min(inp.shape[1], out.shape[1])):\n                inp_colors.append(inp[i, j])\n                if out[i, j] != inp[i, j]:\n                    colors_out.append(out[i, j])\n                    changed_colors.append(inp[i, j])\n\n    inp_colors = np.unique(inp_colors)\n    changed_colors = np.unique(changed_colors)\n\n    config['ignore_colors'] = [c for c in inp_colors if not c in changed_colors]\n    config['possible_ignore_colors'] = np.array([c for c in all_colors if not c in config['ignore_colors']])\n    if len(colors_out) == 0:\n        colors_out = [0]\n    config['possible_colors_out'] = np.unique(colors_out)\n\n    return all_colors, config","021814eb":"def compute_metrics(prediction_grid, answer_grid):\n\n    def get_metrics(prediction, answer):\n        right = (prediction == answer).astype(np.int)\n\n        accuracy = np.mean(right)\n\n        color_rights = []\n\n        for color in range(10):\n            idx = answer != color\n            color_right = float((np.logical_or(idx, right).all() and not (prediction[idx]==color).any()))\n            color_rights.append(color_right)\n\n        return [accuracy] + color_rights\n\n    if prediction_grid.shape == answer_grid.shape:\n        return get_metrics(prediction_grid, answer_grid) + [1]\n\n\n    return list(np.array(get_metrics(answer_grid, answer_grid)) * 0) + [0]","931bfa3d":"def validate_automata(task_global, params, n_iter_max, n_hidden):\n    def validate(task):\n        inp = task['input']\n\n        out = trace_param_automata(inp, params, n_iter_max, n_hidden)[-1][0]\n\n        metrics = compute_metrics(out, task['output'])\n\n        return metrics\n\n    metrics = []\n    for task in task_global['train']:\n        metrics.append(validate(task))\n\n    mean_metrics = list(np.round(np.mean(metrics, axis=0), 3))\n    min_metrics = list(np.round(np.min(metrics, axis=0), 3))\n\n    return tuple(mean_metrics + list(np.array(metrics)[:, 0].reshape(-1)))#tuple(mean_metrics + min_metrics)\n\n\ndef product_better(a, b):\n    \"\"\" Return True iff the two tuples a and b respect a<b for the partial order. \"\"\"\n    a = np.array(a)\n    b = np.array(b)\n    return (np.array(a) >= np.array(b)).all() and (np.array(a) > np.array(b)).any()","1a1da475":"def generate_random_ca(all_colors, best_candidates, temp, config, length=1):\n    rules = []\n    for _ in range(length):\n        rules.append(get_random_ca_rule(all_colors, best_candidates, temp, config))\n    return rules\n\ndef generate_random_global(all_colors, best_candidates, temp, config, length=1):\n    rules = []\n    for _ in range(length):\n        rules.append(get_random_global_rule(all_colors, best_candidates, temp, config))\n    return rules\n\ndef generate_population(all_colors, config, size=64, length=1):\n    population = []\n    for i in range(size):\n        split_rule = get_random_split_rule(all_colors, {}, 0, config)\n        merge_rule = get_random_merge_rule(all_colors, {}, 0, config)\n        global_rules = generate_random_global(all_colors, {}, 0, config, np.random.choice(2, p=[0.2, 0.8]))\n        ca_rules = generate_random_ca(all_colors, {}, 0, config, np.random.choice(2, p=[0.2, 0.8]))\n        population.append([global_rules, ca_rules, split_rule, merge_rule])\n\n    return population","470161fe":"from functools import partial\nfrom itertools import product\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef change_color(colors_in, colors_out, grid):\n    out_grid = np.zeros_like(grid)\n    out_grid[:] = grid[:]\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            for color_in, color_out in zip(colors_in, colors_out):\n                if grid[i, j] == color_in:\n                    out_grid[i, j] = color_out\n                    break\n    return out_grid\n\n\ndef reduce_grid(grid_rows, grid_columns, color, grid):\n    out_grid = np.zeros((len(grid_rows), len(grid_columns)), dtype=np.int)\n    for i, j in product(range(len(grid_rows)), range(len(grid_columns))):\n        out_grid[i, j] = grid[grid_rows[i][0], grid_columns[j][0]]\n    return out_grid\n\n\ndef unreduce_grid(line_rows, line_columns, n, m, grid_rows, grid_columns, color, grid):\n    out_grid = np.zeros((n, m), dtype=np.int)\n    for i in range(len(line_rows)):\n        out_grid[line_rows[i]] = color\n\n    for j in range(len(line_columns)):\n        out_grid[:, line_columns[j]] = color\n\n    for i, j in product(range(len(grid_rows)), range(len(grid_columns))):\n        if grid[i, j] != 0:\n            for i_gr_row in list(grid_rows[i]):\n                for j_gr_col in list(grid_columns[j]):\n                    out_grid[i_gr_row, j_gr_col] = grid[i, j]\n\n    return out_grid\n\n\ndef get_color_features(input_grid):\n    colors = np.unique(input_grid)\n    colors_numbers = np.array([np.mean(input_grid == color) for color in colors]).reshape((-1, 1))\n\n    colors_borders = np.array([np.mean(input_grid[0] == color) for color in colors]).reshape((-1, 1))\n    colors_borders += np.array([np.mean(input_grid[-1] == color) for color in colors]).reshape((-1, 1))\n    colors_borders += np.array([np.mean(input_grid[:, 0] == color) for color in colors]).reshape((-1, 1))\n    colors_borders += np.array([np.mean(input_grid[:, -1] == color) for color in colors]).reshape((-1, 1))\n\n    colors_borders \/= np.sum(colors_borders)\n\n    colors_features = np.concatenate([colors_numbers, colors_borders], axis=1)\n\n    return colors_features, colors\n\n\ndef get_train_color_features(task):\n    colors_in_train = []\n    colors_in_each_train = []\n    for uni_task in task['train']:\n        inp = uni_task['input']\n        colors_unique, color_numbers = np.unique(inp, return_counts=True)\n\n        colors_in_train += list(colors_unique)\n        colors_in_each_train.append(colors_unique)\n\n    max_color_task = np.argmax([clrs.shape[0] for clrs in colors_in_each_train])\n\n    input_grid = task['train'][max_color_task]['input']\n\n    train_colors_features, _ = get_color_features(input_grid)\n\n    scaler = MinMaxScaler()\n    train_colors_features = scaler.fit_transform(train_colors_features)\n\n    sums = np.sum(train_colors_features, axis=1)\n\n    train_colors_features = train_colors_features[np.argsort(sums)[::-1]]\n\n    return train_colors_features, scaler, np.unique(colors_in_train)\n\n\ndef build_mapping(task, config):\n    reverse_functions = []\n    for part in ['train', 'test']:\n        for uni_task in task[part]:\n            if part == 'test':\n                reverse_functions.append({})\n\n    if config['reduce_grid']:\n        can_reduce_grid = True\n        for uni_task in task['train']:\n            if uni_task['input'].shape != uni_task['output'].shape:\n                can_reduce_grid = False\n                break\n\n            inp = uni_task['input']\n\n            colors_rows = []\n            line_rows = []\n\n            for i in range(inp.shape[0]):\n                if (inp[i] == inp[i][0]).all():\n                    colors_rows.append(inp[i][0])\n                    line_rows.append(i)\n\n            row_colors, row_counts = np.unique(colors_rows, return_counts=True)\n\n            colors_columns = []\n            line_columns = []\n\n            for i in range(inp.shape[1]):\n                if (inp[:, i] == inp[0, i]).all():\n                    colors_columns.append(inp[0, i])\n                    line_columns.append(i)\n\n            column_colors, column_counts = np.unique(colors_columns, return_counts=True)\n\n            if row_colors.shape[0] != 1 or column_colors.shape[0] != 1 or \\\n                    row_counts[0] < 2 or column_counts[0] < 2:\n\n                can_reduce_grid = False\n                break\n\n            line_rows.append(inp.shape[0])\n            line_rows = [-1] + line_rows\n\n            line_columns.append(inp.shape[1])\n            line_columns = [-1] + line_columns\n\n            for i in range(len(line_rows) - 1):\n                if (line_rows[i] + 1) < line_rows[i + 1]:\n                    for j in range(len(line_columns) - 1):\n                        if (line_columns[j] + 1) < line_columns[j + 1]:\n                            color = inp[line_rows[i] + 1][line_columns[j] + 1]\n                            if not (inp[(line_rows[i] + 1):(line_rows[i + 1]),\n                                    (line_columns[j] + 1):(line_columns[j + 1])] == color).all():\n                                can_reduce_grid = False\n                                break\n\n            for i in range(1, len(line_rows) - 1):\n                if not (uni_task['input'][line_rows[i]] == uni_task['output'][line_rows[i]]).all():\n                    can_reduce_grid = False\n                    break\n\n            for j in range(1, len(line_columns) - 1):\n                if not (uni_task['input'][:, line_columns[j]] == uni_task['output'][:, line_columns[j]]).all():\n                    can_reduce_grid = False\n                    break\n\n            if not can_reduce_grid:\n                break\n\n        if can_reduce_grid:\n            for part in ['train', 'test']:\n                for i_task, uni_task in enumerate(task[part]):\n                    inp = uni_task['input']\n\n                    colors_rows = []\n                    line_rows = []\n\n                    for i in range(inp.shape[0]):\n                        if (inp[i] == inp[i][0]).all():\n                            colors_rows.append(inp[i][0])\n                            line_rows.append(i)\n\n                    row_colors, row_counts = np.unique(colors_rows, return_counts=True)\n\n                    colors_columns = []\n                    line_columns = []\n\n                    for i in range(inp.shape[1]):\n                        if (inp[:, i] == inp[0, i]).all():\n                            colors_columns.append(inp[0, i])\n                            line_columns.append(i)\n\n                    column_colors, column_counts = np.unique(colors_columns, return_counts=True)\n\n                    line_rows.append(inp.shape[0])\n                    line_rows = [-1] + line_rows\n\n                    line_columns.append(inp.shape[1])\n                    line_columns = [-1] + line_columns\n\n                    grid_rows = []\n                    grid_columns = []\n\n                    for i in range(len(line_rows) - 1):\n                        if (line_rows[i] + 1) < line_rows[i + 1]:\n                            grid_rows.append(np.arange(line_rows[i] + 1, line_rows[i + 1]))\n\n                    for j in range(len(line_columns) - 1):\n                        if (line_columns[j] + 1) < line_columns[j + 1]:\n                            grid_columns.append(np.arange(line_columns[j] + 1, line_columns[j + 1]))\n\n                    uni_task['input'] = reduce_grid(grid_rows, grid_columns, row_colors[0], inp)\n                    if part == 'train':\n                        uni_task['output'] = reduce_grid(grid_rows, grid_columns, row_colors[0], uni_task['output'])\n                    if part == 'test':\n                        reverse_functions[i_task]['unreduce_grid'] = partial(unreduce_grid, line_rows[1:-1],\n                                                                             line_columns[1:-1], inp.shape[0],\n                                                                             inp.shape[1],\n                                                                             grid_rows, grid_columns, row_colors[0])\n\n    if config['map_color']:\n        go_map_color = True\n        train_colors_features, scaler, unique_train_colors = get_train_color_features(task)\n\n        for uni_task in task['test']:\n            inp = uni_task['input']\n            colors_test = list(np.unique(inp))\n            for color in colors_test:\n                if not color in unique_train_colors:\n                    go_map_color = True\n\n        if go_map_color:\n            colors_in_all = [[], []]\n            colors_out_all = [[], []]\n\n            for i_part, part in enumerate(['train', 'test']):\n                for i_task, uni_task in enumerate(task[part]):\n\n                    input_grid = uni_task['input']\n\n                    colors_features, colors = get_color_features(input_grid)\n                    proper_colors = list(np.arange(train_colors_features.shape[0]))\n                    colors_features = scaler.transform(colors_features)\n                    colors_in = []\n                    colors_out = []\n                    for i, color in enumerate(colors):\n                        color_features = colors_features[i].reshape((1, -1))\n                        distances = np.sum(np.power(train_colors_features - color_features, 2), axis=1)\n                        closests = list(np.argsort(distances))\n                        for closest in closests:\n                            if closest in proper_colors:\n                                proper_colors.remove(closest)\n                                colors_in.append(color)\n                                colors_out.append(closest)\n                                break\n\n                    if part == 'train':\n                        colors_in_all[i_part].append(colors_in)\n                        colors_out_all[i_part].append(colors_out)\n                    if part == 'test':\n                        colors_in_all[i_part].append(colors_out)\n                        colors_out_all[i_part].append(colors_in)\n                        reverse_functions[i_task]['train_colors_in'] = colors_out\n                        reverse_functions[i_task]['train_colors_out'] = colors_in\n\n            unique_test_colors = []\n\n            for i_task, uni_task in enumerate(task['train']):\n\n                output_grid = uni_task['output']\n                colors = np.unique(output_grid)\n\n                for color in colors:\n                    if not color in unique_train_colors:\n                        unique_test_colors.append(color)\n\n            unique_test_colors = np.unique(unique_test_colors)\n            colors_out = 9 - np.arange(unique_test_colors.shape[0])\n            for part in ['train', 'test']:\n                for i_task, uni_task in enumerate(task[part]):\n                    if part == 'train':\n                        uni_task['input'] = change_color(colors_in_all[0][i_task], colors_out_all[0][i_task],\n                                                         uni_task['input'])\n                        colors_in_all[0][i_task] += list(unique_test_colors)\n                        colors_out_all[0][i_task] += list(colors_out)\n                        uni_task['output'] = change_color(colors_in_all[0][i_task], colors_out_all[0][i_task],\n                                                          uni_task['output'])\n                    if part == 'test':\n                        reverse_functions[i_task]['test_colors_in'] = list(colors_out)\n                        reverse_functions[i_task]['test_colors_out'] = list(unique_test_colors)\n\n    if config['find_wall']:\n        for i_part, part in enumerate(['train', 'test']):\n            for i_task, uni_task in enumerate(task[part]):\n\n                input_grid = uni_task['input']\n\n                colors_features, colors = get_color_features(input_grid)\n\n                sums = np.sum(colors_features, axis=1)\n\n                color_wall = colors[np.argsort(sums)[::-1][0]]\n                #print(color_wall)\n                if color_wall == 0:\n                    continue\n\n                colors_in = [0, color_wall]\n                colors_out = [color_wall, 0]\n\n                uni_task['input'] = change_color(colors_in, colors_out, input_grid)\n                if part == 'train':\n                    uni_task['output'] = change_color(colors_in, colors_out, uni_task['output'])\n                if part == 'test':\n                    reverse_functions[i_task]['return_wall'] = partial(change_color, colors_out,\n                                                                       colors_in)\n\n    return task, reverse_functions","7bf8b3fa":"def update_pool(task, best_candidates, candidate, num_params):\n    start = time.time()\n    score = validate_automata(task, candidate, 25, 1)\n    is_uncomp = True\n    updated_keys = False\n    best_candidates_items = list(best_candidates.items())\n    for best_score, best_candidates_score in best_candidates_items:\n        if product_better(score, best_score):\n            # Remove previous best candidate and add the new one\n            del best_candidates[best_score]\n            best_candidates[score] = [candidate]\n            is_uncomp = False  # The candidates are comparable\n            updated_keys = True\n        if product_better(best_score, score):\n            is_uncomp = False  # The candidates are comparable\n\n    if is_uncomp:  # The two candidates are uncomparable\n        best_candidates[score].append(candidate)\n        best_candidates[score] = sorted(best_candidates[score], key=lambda x: len(x[0]) + len(x[1]))\n\n        if len(best_candidates[score]) > num_params:\n            best_candidates[score] = [cand for cand in best_candidates[score] if\n            (len(cand[0]) + len(cand[1])) <= len(best_candidates[score][0][0]) + len(best_candidates[score][0][1]) + 2]\n\n    return updated_keys\n\ndef generate_asexual_part(best_candidates, temp, part, generate_func, all_colors, config, alpha_mutate_rule_same_type):\n    if type(part) == list:\n        if np.random.rand() < (1 \/ (len(part) + 1))**0.75:\n            part.append(generate_func(all_colors, best_candidates, temp, config))\n        else:\n            index = np.random.randint(len(part))\n            if np.random.rand() < 0.3:\n                part = part[:index] + part[(index + 1):]\n            else:\n                r_type = None\n                if np.random.rand() < alpha_mutate_rule_same_type:\n                    r_type = part[index]['type']\n                if np.random.rand() < 0.5:\n                    part[index] = generate_func(all_colors, best_candidates, temp, config, r_type)\n                else:\n                    part = part[:index] + [generate_func(all_colors, best_candidates, temp, config, r_type)] + part[index:]\n    else:\n        part = generate_func(all_colors, best_candidates, temp, config)\n    return part\n\n\ndef generate_sexual_part(best_candidates, temp, first, second, generate_func, all_colors, config, alpha_sexual_mutate,\n                         alpha_mutate_rule_same_type, alpha_mutate_rule_same_type_one_parameter):\n    if type(first) == list:\n        if len(first) == 0 and len(second) == 0:\n            child = []\n\n        elif len(first) == 0:\n            split2 = np.random.randint(len(second))\n\n            if np.random.rand() <= 0.5:\n                child = second[split2:]\n            else:\n                child = second[:split2]\n\n        elif len(second) == 0:\n            split1 = np.random.randint(len(first))\n\n            if np.random.rand() <= 0.5:\n                child = first[split1:]\n            else:\n                child = first[:split1]\n\n        else:\n            split1 = np.random.randint(len(first))\n            split2 = np.random.randint(len(second))\n\n            if np.random.rand() <= 0.5:\n                child = first[:split1] + second[split2:]\n            else:\n                child = second[:split2] + first[split1:]\n\n        if np.random.rand() < alpha_sexual_mutate:\n            index = np.random.randint(len(child) + 1)\n            if index == len(child):\n                child.append(generate_func(all_colors, best_candidates, temp, config))\n            else:\n                r_type = None\n                same_type = np.random.rand() < alpha_mutate_rule_same_type\n                one_param_modification = np.random.rand() < alpha_mutate_rule_same_type_one_parameter\n                if same_type:\n                    r_type = child[index]['type']\n                    same_type_rule = generate_func(all_colors, best_candidates, temp, config, r_type)\n                    if not one_param_modification:\n                        child[index] = same_type_rule\n                    else:\n                        key = random.choice(list(child[index].keys()))\n                        child[index][key] = same_type_rule[key]\n                else:\n                    if np.random.rand() < 0.5:\n                        child[index] = generate_func(all_colors, best_candidates, temp, config)\n                    else:\n                        child = child[:index] + [generate_func(all_colors, best_candidates, temp, config, r_type)] + child[\n                                                                                                                     index:]\n    else:\n        if np.random.rand() < 0.5:\n            child = copy.deepcopy(first)\n        else:\n            child = copy.deepcopy(second)\n    return child\n\n\ndef generate_asexual_program(best_candidates, temp, parent, all_colors, config, alpha_mutate_rule_same_type):\n    child = copy.deepcopy(parent)\n\n    gen_functions = [get_random_global_rule, get_random_ca_rule, get_random_split_rule, get_random_merge_rule]\n    idx_to_mutate = np.random.choice(len(child), p =[0.4, 0.4, 0.1, 0.1])\n    child[idx_to_mutate] = generate_asexual_part(best_candidates, temp, child[idx_to_mutate], gen_functions[idx_to_mutate],\n                                                 all_colors, config, alpha_mutate_rule_same_type)\n    return child\n\n\ndef generate_sexual_program(best_candidates, temp, first, second, all_colors, config, alpha_sexual_mutate,\n                          alpha_mutate_rule_same_type, alpha_mutate_rule_same_type_one_parameter):\n\n    gen_functions = [get_random_global_rule, get_random_ca_rule, get_random_split_rule, get_random_merge_rule]\n    what_to_mutate = np.random.choice(len(gen_functions), p=[0.5, 0.5, 0.0, 0.0])\n\n    child = []\n    for idx_to_mutate, gen_func in enumerate(gen_functions):\n        child.append(generate_sexual_part(best_candidates, temp, first[idx_to_mutate], second[idx_to_mutate],\n                                          gen_func, all_colors, config,\n                                          (what_to_mutate==idx_to_mutate) * alpha_sexual_mutate, alpha_mutate_rule_same_type,\n                                    alpha_mutate_rule_same_type_one_parameter))\n\n    return child","b7a571be":"def post_solved_process(task, solved, all_colors, config, reverse_functions, config_mapping):\n    test_preds = []\n\n    best_candidates = defaultdict(list)\n    update_pool(task, best_candidates, solved, 1)\n\n    start_time = time.time()\n\n    while time.time() - start_time < 30:\n        best_scores = list(best_candidates.keys())\n        first_score = random.choice(best_scores)\n        idx = np.random.choice(len(list(best_candidates[first_score])))\n        first = list(best_candidates[first_score])[idx]\n        child = generate_asexual_program(best_candidates, 0.5, first, all_colors, config, 0.)\n        update_pool(task, best_candidates, child, 1)\n\n    train_colors_features, scaler, _ = get_train_color_features(task)\n    print(list(best_candidates.values())[0][0])\n    for i_task, uni_task in enumerate(task['test']):\n        predictions = []\n        for solved in list(best_candidates.values())[0]:\n            if reverse_functions[i_task].get('train_colors_in', None):\n                inp = uni_task['input']\n                colors_unique, color_numbers = np.unique(inp, return_counts=True)\n\n                input_grid = uni_task['input']\n                colors_features, colors = get_color_features(input_grid)\n                colors_features = scaler.transform(colors_features)\n\n                colors_in = []\n                colors_out = []\n                if colors_unique.shape[0] <= train_colors_features.shape[0]:\n                    proper_colors = list(np.arange(train_colors_features.shape[0]))\n                    for i, color in enumerate(colors):\n                        color_features = colors_features[i].reshape((1, -1))\n                        distances = np.sum(np.power(train_colors_features - color_features, 2), axis=1)\n                        closests = list(np.argsort(distances))\n                        for closest in closests:\n                            if closest in proper_colors:\n                                proper_colors.remove(closest)\n                                colors_in.append(color)\n                                colors_out.append(closest)\n                                break\n\n                    colors_in += list(reverse_functions[i_task]['train_colors_out'])\n                    colors_out += list(reverse_functions[i_task]['train_colors_in'])\n\n                    input_task = change_color(colors_in, colors_out, uni_task['input'])\n\n                    trace = trace_param_automata(input_task, solved, 25, 0)\n                    t_pred = trace[-1][0]\n\n                    if not reverse_functions[i_task].get('unreduce_grid', None) is None:\n                        t_pred = reverse_functions[i_task]['unreduce_grid'](t_pred)\n                    if not reverse_functions[i_task].get('train_colors_in', None) is None:\n                        colors_in = reverse_functions[i_task]['train_colors_in'] + reverse_functions[i_task][\n                            'test_colors_in']\n                        colors_out = reverse_functions[i_task]['train_colors_out'] + reverse_functions[i_task][\n                            'test_colors_out']\n                        t_pred = change_color(colors_in, colors_out, t_pred)\n                    predictions.append(t_pred)\n                else:\n                    closests_to = [[] for _ in range(train_colors_features.shape[0])]\n                    for i, color in enumerate(colors):\n                        color_features = colors_features[i].reshape((1, -1))\n                        distances = np.sum(np.power(train_colors_features - color_features, 2), axis=1)\n                        closest = np.argsort(distances)[0]\n                        closests_to[closest].append(color)\n\n                    for i in range(len(closests_to)):\n                        if len(closests_to[i]) == 0:\n                            closests_to[i] = [-1]\n\n                    answers = []\n                    for color_map in product(*closests_to):\n                        input_task = np.zeros_like(uni_task['input'])\n\n                        for i, color in enumerate(list(color_map)):\n                            input_task[uni_task['input'] == color] = i\n\n                        colors_in = np.array(list(color_map) + reverse_functions[i_task]['test_colors_out'])\n                        colors_out = list(np.arange(colors_in.shape[0])) + reverse_functions[i_task]['test_colors_in']\n\n                        trace = trace_param_automata(input_task, solved, 25, 0)\n                        t_pred = trace[-1][0]\n                        t_pred = change_color(colors_out, colors_in, t_pred)\n                        if not reverse_functions[i_task].get('unreduce_grid', None) is None:\n                            t_pred = reverse_functions[i_task]['unreduce_grid'](t_pred)\n\n                        answers.append(t_pred)\n\n                    shapes = [ans.shape for ans in answers]\n                    diff_shapes, counts = np.unique(shapes, return_counts=True, axis=0)\n                    best_shape = diff_shapes[np.argmax(counts)]\n                    answers = [ans for ans in answers if ans.shape == tuple(best_shape)]\n                    final_answer = np.zeros((10, best_shape[0], best_shape[1]))\n                    for i in range(10):\n                        for ans in answers:\n                            final_answer[i][ans == i] += 1\n                    final_answer = np.argmax(final_answer, axis=0)\n\n                    predictions.append(final_answer)\n\n            else:\n                inp = uni_task['input']\n\n                trace = trace_param_automata(inp, solved, 25, 0)\n                t_pred = trace[-1][0]\n\n                if not reverse_functions[i_task].get('unreduce_grid', None) is None:\n                    t_pred = reverse_functions[i_task]['unreduce_grid'](t_pred)\n\n                if not reverse_functions[i_task].get('return_wall', None) is None:\n                    t_pred = reverse_functions[i_task]['return_wall'](t_pred)\n\n                predictions.append(t_pred)\n\n\n        shapes = [ans.shape for ans in predictions]\n        diff_shapes, counts = np.unique(shapes, return_counts=True, axis=0)\n        best_shape = diff_shapes[np.argmax(counts)]\n        predictions = [ans for ans in predictions if ans.shape == tuple(best_shape)]\n\n        unique_preds, nums = np.unique(np.array(predictions), return_counts=True, axis=0)\n\n        indexes = np.argsort(nums)[::-1]\n\n        preds = unique_preds[indexes[:3]]\n        preds = [pr for pr in preds]\n        test_preds.append(preds)\n\n    return test_preds","21c349c1":"def train_model(name, task, params, time_for_task, config_mapping, print_stats=False):\n    alpha_asexual_mutation = params['alpha_asexual_mutation']\n    alpha_sexual_mutate = params['alpha_sexual_mutate']\n    alpha_mutate_rule_same_type = params['alpha_mutate_rule_same_type']\n    alpha_mutate_rule_same_type_one_parameter = params['alpha_mutate_rule_same_type_one_parameter']\n    add_random = params['add_random']\n    num_params = params['num_params']\n    start_time = time.time()\n    param_name = str([alpha_asexual_mutation,\n                      alpha_sexual_mutate,\n                      alpha_mutate_rule_same_type,\n                      alpha_mutate_rule_same_type_one_parameter,\n                      add_random])\n\n    task, reverse_functions = build_mapping(task, config_mapping)\n\n    all_colors, config = get_task_metadata(task)\n\n    print(f'Trying to solve {name}... {param_name}')\n\n    best_candidates = defaultdict(list)\n    test_preds = []\n    population = generate_population(all_colors, config, size=2500)\n\n    for cand in population:\n        if time.time() - start_time >= time_for_task:\n            break\n        update_pool(task, best_candidates, cand, num_params)\n\n    i_iteration = 0\n\n    while True:\n        temp = min(0.9, (time.time() - start_time) \/ 500)\n\n        if np.random.rand() < add_random:\n            split_rule = get_random_split_rule(all_colors, {}, 0, config)\n            merge_rule = get_random_merge_rule(all_colors, {}, 0, config)\n            child = [generate_random_global(all_colors, best_candidates, temp, config),\n                     generate_random_ca(all_colors, best_candidates, temp, config), split_rule, merge_rule]\n\n        else:\n            best_scores = list(best_candidates.keys())\n            first_score = random.choice(best_scores)\n            first = random.choice(list(best_candidates[first_score]))\n            if np.random.rand() < alpha_asexual_mutation:\n                child = generate_asexual_program(best_candidates, temp, first, all_colors, config,\n                                               alpha_mutate_rule_same_type)\n            else:\n\n                second_score = random.choice(best_scores)\n                second = random.choice(list(best_candidates[second_score]))\n\n                child = generate_sexual_program(best_candidates, temp, first, second, all_colors, config,\n                                              alpha_sexual_mutate,\n                                              alpha_mutate_rule_same_type,\n                                              alpha_mutate_rule_same_type_one_parameter)\n\n        updated_keys = update_pool(task, best_candidates, child, num_params)\n\n        if i_iteration % 100 == 0:\n            solved = None\n            max_scores = np.zeros(len(list(best_candidates.keys())[0]))\n            for score, params in best_candidates.items():\n                max_scores = np.maximum(max_scores, score)\n                if np.mean(score) == 1.:\n                    solved = params[0]\n                    break\n\n            # print(np.round(max_scores, 4), len(list(best_candidates.keys())), np.round(temp, 3),\n            #      num_successful_sexuals, num_sexuals, num_successful_asexuals, num_asexuals)\n\n            if solved is not None:\n                break\n\n        if time.time() - start_time >= time_for_task:\n            break\n        i_iteration += 1\n\n    if solved is not None:\n        print(f'Solved {name}', time.time() - start_time)\n\n        test_preds = post_solved_process(task, solved, all_colors, config, reverse_functions,\n                                         config_mapping)\n\n\n    else:\n        for task_test in task['test']:\n            test_preds.append([np.zeros_like(task_test['input'])])\n    return solved, test_preds","1d928721":"if False:\n    task_ids = train_task_ids\n    mode = 'training'\nelif False:\n    task_ids = valid_task_ids\n    mode = 'evaluation'\nelse:\n    task_ids = test_task_ids\n    mode = 'test'\n\nall_tasks = []\n\nfor task_id in range(len(task_ids)):\n    name = task_ids[task_id]\n    task = load_data(f'{name}.json', phase=mode)\n    all_tasks.append(task_id)\n\ngood_tasks = np.arange(100) # here we just choose what task we solve\n\n# We give this number of seconds to each task. Given the multiprocessing it's about 6 hours for all the tasks.\ntime_for_task = 100\n\n# Here are some parameters of the genetics. Better not to touch them, it may be dangerous!\nnum_params = 5\nalpha_asexual_mutation = 0.5\nalpha_sexual_mutate = 0.5\nalpha_mutate_rule_same_type = 0.5\nalpha_mutate_rule_same_type_one_parameter = 0.0\nalpha_add_random = 0.05\ntest_predictions = []\n\n\ndef try_to_solve_task(task_id_big):\n    \n    #Here we get the numbers from 0 to 200 so we solve the 100 tasks with 2 different mapping configs\n    if task_id_big >= 100:\n        config_mapping = {'map_color': True, 'reduce_grid': True, 'find_wall': False}\n    else:\n        config_mapping = {'map_color': False, 'reduce_grid': True, 'find_wall': True}\n\n    task_id = task_id_big % 100\n\n    name = task_ids[task_id]\n    task = load_data(f'{name}.json', phase=mode)\n\n    exclude_list = []\n    \n    # Here is the hack: we check the name of the test task to understand whether it is the public or private test. \n    # It's private we solve all the tasks, otherwise we solve only first 4 task (to make sure everything works)\n    is_public_test = ('00576224' in test_task_ids)\n    \n    if not task_id in good_tasks or (task_id in exclude_list) or (is_public_test and task_id > 3):\n        test_preds = []\n        if task_id in exclude_list:\n            for task_test in task['test']:\n                test_preds.append([np.ones_like(task_test['input'])])\n        else:\n            for task_test in task['test']:\n                test_preds.append([np.zeros_like(task_test['input'])])\n\n        return (test_preds, False), task_id_big\n\n    params = {}\n    params['alpha_asexual_mutation'] = alpha_asexual_mutation\n    params['alpha_sexual_mutate'] = alpha_sexual_mutate\n    params['alpha_mutate_rule_same_type'] = alpha_mutate_rule_same_type\n    params['alpha_mutate_rule_same_type_one_parameter'] = alpha_mutate_rule_same_type_one_parameter\n    params['add_random'] = alpha_add_random\n    params['num_params'] = num_params\n    solved, test_preds = train_model(name, task, params, time_for_task, config_mapping)\n\n    return (test_preds, solved is not None), task_id_big\n\n\ndef main():\n    answers = {}\n    solved_tasks = 0\n\n    if ENABLE_MULTIPROCESSING:\n        pool = multiprocessing.Pool()\n        iterator = pool.imap_unordered(try_to_solve_task, range(2*len(task_ids)))\n    else:\n        iterator = map(try_to_solve_task, range(2*len(task_ids)))\n\n\n    for (test_preds, solved), answer_id in iterator:\n        answers[answer_id] = test_preds\n\n        if solved:\n            solved_tasks += 1\n            print(answer_id)\n            print(test_preds)\n\n    if ENABLE_MULTIPROCESSING:\n        pool.close()\n        pool.join()\n\n    return answers, solved_tasks\n\nanswers, solved_tasks = main()\n\n# Here we merge the answers from 2 mapping configs\nmap_color_answers = {k:answers[k] for k in answers if k<100}\n\nfind_wall_answers = {k:answers[k] for k in answers if k>=100}\n\ntest_map_color_predictions = []\nfor answer_id in sorted(map_color_answers.keys()):\n    test_map_color_predictions += map_color_answers[answer_id]\n\ntest_find_wall_predictions = []\nfor answer_id in sorted(find_wall_answers.keys()):\n    test_find_wall_predictions += find_wall_answers[answer_id]\n\n\ndef flattener(preds):\n    preds = copy.deepcopy(preds)\n    str_final = ''\n    str_preds = []\n    for pred in preds:\n\n        str_pred = str([row for row in pred])\n        str_pred = str_pred.replace(', ', '')\n        str_pred = str_pred.replace('[[', '|')\n        str_pred = str_pred.replace('][', '|')\n        str_pred = str_pred.replace(']]', '|')\n        str_preds.append(str_pred)\n    return \" \".join(str_preds)\n\n\ntest_map_color_predictions = [[[list(pred) for pred in test_pred] for test_pred in test_task] for test_task in test_map_color_predictions]\ntest_find_wall_predictions = [[[list(pred) for pred in test_pred] for test_pred in test_task] for test_task in test_find_wall_predictions]\n\nsubmission = pd.read_csv(data_path \/ \"sample_submission.csv\")\n\nfor idx in range(len(test_map_color_predictions)):\n    map_color_preds = test_map_color_predictions[idx]\n    find_wall_preds = test_find_wall_predictions[idx]\n\n    if np.mean(map_color_preds) == 0 and np.mean(find_wall_preds) == 0:\n        submission.loc[idx, \"output\"] = \"|0|\"\n    elif np.mean(map_color_preds) > 0 and np.mean(find_wall_preds) == 0:\n        submission.loc[idx, \"output\"] = flattener(map_color_preds)\n    elif np.mean(map_color_preds) == 0 and np.mean(find_wall_preds) > 0:\n        submission.loc[idx, \"output\"] = flattener(find_wall_preds)\n    else:\n        preds_here = find_wall_preds + map_color_preds\n\n        preds_here = copy.deepcopy(preds_here)\n        str_final = ''\n        str_preds = []\n        for pred in preds_here:\n            str_pred = str([row for row in pred])\n            str_pred = str_pred.replace(', ', '')\n            str_pred = str_pred.replace('[[', '|')\n            str_pred = str_pred.replace('][', '|')\n            str_pred = str_pred.replace(']]', '|')\n            str_preds.append(str_pred)\n\n        unique_preds, nums = np.unique(str_preds, return_counts=True)\n\n        indexes = np.argsort(nums)[::-1]\n\n        preds = unique_preds[indexes[:3]]\n        preds = [pr for pr in preds]\n\n        submission.loc[idx, \"output\"] = \" \".join(preds)\n\nprint(submission.head())\n\nsubmission.to_csv(\"submission.csv\", index=False)\n\nprint(solved_tasks)","34c69ad2":"params = {}\nnum_params = 5\nalpha_asexual_mutation = 0.5\nalpha_sexual_mutate = 0.5\nalpha_mutate_rule_same_type = 0.5\nalpha_mutate_rule_same_type_one_parameter = 0.0\nalpha_add_random = 0.05\nparams['alpha_asexual_mutation'] = alpha_asexual_mutation\nparams['alpha_sexual_mutate'] = alpha_sexual_mutate\nparams['alpha_mutate_rule_same_type'] = alpha_mutate_rule_same_type\nparams['alpha_mutate_rule_same_type_one_parameter'] = alpha_mutate_rule_same_type_one_parameter\nparams['add_random'] = alpha_add_random\nparams['num_params'] = num_params\nconfig_mapping = {'map_color': False, 'reduce_grid': True, 'find_wall': True}\nis_public_test = ('00576224' in test_task_ids)","f78c0c77":"if is_public_test:\n    name = '070dd51e'\n    task = load_data(f'{name}.json', phase='test')\n\n    plot_task(task)\n\n    solved, test_preds = train_model(name, task, params, time_for_task=2000, config_mapping=config_mapping)","b849fdbc":"if is_public_test and (solved is not None):\n    print(solved[2])\n    for rule in solved[0]:\n        print(rule)\n    for rule in solved[1]:\n        print(rule)\n    print(solved[1])\n    print(solved[3])","d1811110":"if is_public_test:\n    name = '0d87d2a6'\n    task = load_data(f'{name}.json', phase='test')\n\n    plot_task(task)\n\n    solved, test_preds = train_model(name, task, params, time_for_task=2000, config_mapping=config_mapping)","60ddbf9b":"if is_public_test and (solved is not None):\n    print(solved[2])\n    for rule in solved[0]:\n        print(rule)\n    for rule in solved[1]:\n        print(rule)\n    print(solved[1])\n    print(solved[3])","f4f7cad6":"if is_public_test:\n\n    name = '08ed6ac7'\n    task = load_data(f'{name}.json', phase='training')\n\n    plot_task(task)\n\n    solved, test_preds = train_model(name, task, params, time_for_task=2000, config_mapping=config_mapping)","e0579f90":"if is_public_test and (solved is not None):\n\n    print(solved[2])\n    for rule in solved[0]:\n        print(rule)\n    for rule in solved[1]:\n        print(rule)\n    print(solved[1])\n    print(solved[3])","2f9762cb":"# The \"postprocess\" of the solution\nWhen the solution is found by the genetics we are not done yet.\n\nWe should do 2 more things:\n\n1) We continue to train genetics because we would like to create more **different** programs that solve training samples. This will helps us to generate more than 1 prediction of the test output and prevents overfitting. More over, genetics always prioritizes programs that are shorter because it also helps against overfitting. So this is the moment when genetic algorithm could simplify the program that solves training samples.\n\n2) We should predict test outputs and do **\"mapping back\"**. This was already mentioned above.","4e67630b":"> # **DSL**","2f56b283":"# Rules generation\nHere in 4 functions random rules of 4 types are generated. In global and ca_rules we use information about the pool of the programs that we have. We compute the statistics about how often each rule is used in our population and adjust the probability distribution over rules to this distribution. We use a temperature parameter that is depended on the time that is passed after the moment when we start learning.","12468bf1":"# How can we solve these tasks using one algorithm?","cacc8a4e":"## Interaction rule\n\nThere is only one such command in our DSL since we added interaction rules only in the last days of the competition.\nThis rule tries to copy figure from one grid to another grid, while making sure that it fits correctly, and chooses the best position. \n\nIt is used to solve tasks like this:","e0a970a1":"## We are ready to solve something!","97988688":"### Let's try something harder!","52cdfbd3":"### A few words about C++","e6e0163a":"# Cellular automata\n\nThis is the application of the given cellular automata to the grid.\n\nCA-rules used to solve something like this:","9f2e6d03":"The code below just solves all the tasks and generates a submission file. This is not quite interesting except one detail:\nwe tries to solve the task with 2 different \"color mappings\" and then merge the solutions. I don't know how much it helps.","757f5d48":"\"python_trace_param_automata\" applies sequence of rules to the input grid. What are these commands are written below.","50960992":"Let's start with a simple one: 070dd51e","6fa787e9":"# Let's make some fun!\n\nSince or submission file is generated, now we can show how it actually works and solves some tasks.","43b92410":"# Global rule \nThese are grid->grid rules. There are many of them, so this function is pretty big.","3bc3ddfa":"#### Connected components in the grid\nThis is the function that computes connected components (figures) on the grid. It is also parametrized. It is used is some rules and in other parts of the algorithm.","4a62f4e5":"So it was simple because there is a command in the DSL called \"unity\" - it doesn in fact what is required in this task. \nLet's understand the program.\n\n","2a1cd64b":"This is the part of the 10th place solution that is described here:\nhttps:\/\/www.kaggle.com\/c\/abstraction-and-reasoning-challenge\/discussion\/154294\n\nHere you can see everything implemented via python. All DSL-commands are presented here. For the competition we used the C++ version of the rules written by my teammate @artyomp. This allows algorithm to learn much faster. ","c5021b4f":"# The search algorithm\n\nThis is the genetics algorithm that tries to guess the DSL-program.\n\nIt tries to randomly modify and do crossover with the programs from the pool. Then we update the pool with the first function here.\n\nThis was grealy inspired by the https:\/\/www.kaggle.com\/zenol42\/dsl-and-genetic-algorithm-applied-to-arc. I would like to thank @zenol42 for that contribution.\n\nP.S. Please forgive us for these function names. This is too funny to change.","a31dfd47":"# \"Task mapping\"\n\nHere is another interesting part that I called \"mapping\".\nSuppose we have a task where we have a grid of cells that are divided by lines of some color (for example 06df4c85)\n\nWe would like to \"reduce\" this grid (to delete lines) so we can solve our task without them. But then we should map our grid back to match with the real output.\n\nSo how the logic works.\n\nWe have a task:\n\nunmapped input -> unmapped output\n\nunmapped test> -> *\n\nWe find a proper mapping and apply to to the train pairs so we have \n\nmapped input -> mapped output\n\nThen we find a DSL-program that solves this task.\n\nThen to find the final test prediction, we map test input and **map back** the output of the program. How to do it? \nWe store the information about the mapping for each task in the dictionary called \"reverse_functions\". We use it later at the prediction stage when we make this mapping back.\n\nThere are three mappings in this algorithm:\n\n- Grid mapping\n\nAs I explained, it is for tasks like 06df4c85\n\n- Color mapping\n\nThis is our interesting invention (but I am not sure it helped comparing with the simplified version :D)\nIt makes a transformation of the grid which gives the same output for every color permutation.\n\nThe main idea:\n\n1) We take training input that contains the biggest number of different colors.\n\nFor each color we compute its \"features\" which is a part of cells of this color and part of *border cells* of this color.\n\nI do a reversed sort the colors it by the sum of this features and change the color to the color indexed by the index in the sorted array.\nThis is our \"template\". We have colors from 0 to n in this grid. We make a sort because we want a color that is the most frequent to have the number 0.\n\n2) Then we map all the other grids:\n\nFor each color we compute its \"features\" that are mentioned above. Then using K-NN (the only ML we have here :D) we find the closest color from the template grid. Then we map the color to the right color. After the mapping we delete the resulting color from the pool because we shouldn't map 2 different colors to one color.\n\n3) Some colors are met only in the outputs. \n\nI made an assumption that these colors should stay the same. So if color = 8 exists in all outputs and there is no 8 in the inputs, we should not change this color (at least with respect to each other).\n\n4) At the test stage:\n\nWe do the same mapping for the test input and then we map the colors back after the prediction. One thing can go wrong: if there are more colors in the test input than in the \"template\". In this case I made some strange things:\n\nI change some colors to black in different ways, do the mapping, apply the program and then I merge these outputs. I have no idea if it works but it's here.\n\n- \"find wall\" mapping\n\nThis is **very** simplified version of the previous mapping. At each input grid we find a color with the best sum of features (that are described above) and then change it with the black. \n\nHere is all the code that is related to the task mapping.\n    \n    \n","0548bb67":"### Finally, let's solve something using multi-grid DSL","1b408cc2":"# Split\/merge rules.\n\nHere are grid -> [grid] and [grid] -> grid rules that were added recently.\nPay attention that here is a small hack. We use information about split rule in the merge. It's not very good but we had no time to make a better solution.\n\nWith these rules we can solve for example the following task:","315471d2":"## We are almost ready!\n\nHere the function do the genetic algorithm: it produces samples, mutations, crossovers and updates the pool.\nIt also checks if the task is solved by some program.\n\nIf it solved it passes the program to the \"postprocess\" that you can find above.","1bf5bc30":"The first row is a split rule. \n\nThe last row is a merge rule.\n\nFrom the second to pre-last row are global rules and CA-rules. ","d40bcdb3":"This function takes a program and a task and produces an array of metrics that is used by the genetic algorithm to select the best programs","fa9d0842":"****\n# Quality measurement\n\nHere we compute the quality of the prediction. We use accuracy and we measure if each possible color is **absolutely correct**","e43cd7db":"These functions generate random programs that are then modified by the genetic algorithm","f1b6e498":"So what this program does? (Besides junky commands)\n\nIt splits the input grid with gray figures into 4 different grids that are sorted by the size of the figure.\n\nThen it applies the rule \"map color\" that maps gray color to some color. It applies it 4 times to different grids so it maps gray to blue in grid 0, gray to red in grid 1 and so on. Then it merges everything back and we obtain the right answer.","88b915ed":"C++ version works 100x times faster but I think here it's more convienient to see all the parts of the algorithm here. C++ version would solve more tasks in the public and private test in the given 400 seconds. This version should be lucky to solve some hard tasks that should be solved with complex programs.\n\nThanks everyone for your interest in our solution!","4f728116":"#### \"Task metadata\"\n\nThis is a function that computes some \"facts\" about the task that is then used during the training.\nFor example, it checks:\n\n1) What are colors are produced if we compare input-output\n\n2) What colors are never changed \n\n3) Is output smaller than input?\n\n4) What are minimum and maximum coefficients by which we can \"repeat\" our input grid and then merge (there are not many such tasks)"}}