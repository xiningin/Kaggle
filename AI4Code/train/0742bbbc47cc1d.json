{"cell_type":{"d0c99433":"code","7a29b2c4":"code","8a11ecaa":"code","89679a28":"code","efcb70d1":"code","4085b163":"code","5a5a8a66":"code","f654779b":"code","2cc01afa":"code","cb526be4":"code","95e313e0":"code","e208122b":"code","fec6089e":"code","150e5372":"code","fd13f8cf":"code","9789a6d8":"code","394058ac":"markdown","6fd3b016":"markdown","34ca4893":"markdown","9966788f":"markdown","58fc979e":"markdown","faae9cfb":"markdown","e502f9fb":"markdown","c8bcbf4b":"markdown"},"source":{"d0c99433":"import copy\nimport secrets  # python 3.6 necessary\nimport random\nimport numpy as np\nimport pandas as pd  # we try not to depend on pandas, to better translate later?\nimport matplotlib.pyplot as plt  # for viz\n\nDEATH_RATE = 0.05\ndef generate_hex():\n    return secrets.token_hex(4)","7a29b2c4":"def utility_function(amenities):\n    # KIV: can add idiosyncracies\n    return amenities[\"location\"]\n\ndef generate_person():\n    person = {\n        \"age\": 20,\n        \"income\": 10,\n        \"wealth\": 400*np.random.uniform(),\n        \"housing_staying\": None,\n        \"housing_selling\": None,\n        \"utility\": utility_function\n    }\n    return person\n\n\nglobal persons\npersons = {}\nfor _ in range(10):\n    persons[generate_hex()] = generate_person()","8a11ecaa":"global houses\nhouses = {}\nfor x in range(10):\n    for y in range(10):\n        # on init, houses have last_bought_price = market_price = value from rand expression\n        houses[(x,y)] = {\n            \"last_bought_price\": 400*np.random.uniform(),\n            \"status\": \"empty\",  # \"empty\", \"occupied\", \"selling\" \n            \"amenities\": {\"location\" : np.random.uniform() + 1.\/ ((x-5.67)**2. + (y-5.43)**2.)},\n            \"occupant\": None\n        }\n        # set market_price of house to be the same val as last_bought_price\n        houses[(x,y)][\"market_price\"] = houses[(x,y)][\"last_bought_price\"]\n        \ndef status_to_float(status):\n    if status == \"empty\": return 0 \n    if status == \"occupied\": return 1 \n    if status == \"selling\": return 2\n","89679a28":"def aging(verbose = False): # change this a function of age\n    for person_id in persons:\n        persons[person_id][\"age\"] += 1","efcb70d1":"def dying_prob_function(age):\n    return 1.\/(1.+np.exp(-(0.04*(age-50))))\nplt.figure(figsize = (14,2))\nplt.plot([dying_prob_function(age) for age in np.arange(100)])\nplt.title(\"death probability over age\")\nplt.show()","4085b163":"def dying(verbose = False): # change this a function of age\n    persons_id_dead = []\n    for person_id in persons:\n        if np.random.uniform() < dying_prob_function(persons[person_id][\"age\"]):\n            if verbose: print(person_id, \" died\")\n            dead_person = persons[person_id]\n            if \"addr\" in dead_person:\n                if verbose: print(\"vacated \", dead_person[\"addr\"])\n                houses[dead_person[\"addr\"]][\"status\"] = \"empty\"\n                houses[dead_person[\"addr\"]][\"occupant\"] = None\n            persons_id_dead.append(person_id)\n            \n    for person_id_dead in persons_id_dead:\n        del persons[person_id_dead]","5a5a8a66":"def birth(verbose = False):\n    born = np.random.binomial(10, 0.2)\n    for _ in range(born):\n        persons[generate_hex()] = generate_person()","f654779b":"def choose(person_id):\n    # original\n    candidates = []\n    if \"addr\" in persons[person_id]:\n        return None\n    for h,house in houses.items():\n        if house[\"price\"] > persons[person_id][\"wealth\"]:\n            continue\n        if house[\"status\"] != \"empty\":\n            continue\n        candidates.append((h,house))\n    \n    best = 0\n    best_option = None\n    for h,c in candidates:\n        user_utility_on_house = persons[person_id][\"utility\"](c[\"amenities\"])\n        if user_utility_on_house > best:\n            best = user_utility_on_house\n            best_option = h,c\n    return best_option","2cc01afa":"def allocation():\n    # original\n    for person_id,v in persons.items():\n        decision = choose(person_id)\n        if not decision:\n            continue\n        addr, house = decision\n        persons[person_id][\"wealth\"] -= house[\"price\"]\n        persons[person_id][\"addr\"] = addr\n        houses[addr][\"status\"] = \"occupied\"\n        houses[addr][\"occupant\"] = person_id","cb526be4":"# this is meant to be ran just once at the start\nask_df = pd.DataFrame(columns = ['house_pos','current_occupant_id','amenities', 'ask_price']) # init empty ask_df with col\n\ndef gen_empty_house_listing(house_pos, house_detail_dt):\n    ''' Phase 2: bid-ask, used in gen_asks()\n    Generates a listing dict for empty house.\n    Input\n    -----\n    house_pos: (x,y), the key for each item in `houses`\n    house_detail_dt: a house dict value from `houses`, containing key:value pairs\n        \"last_bought_price\": 400*np.random.uniform(),\n        \"market_price\": same as last_bought_price on init\n        \"status\": \"empty\",  # \"empty\", \"occupied\", \"selling\" \n        \"amenities\": {\"location\" : np.random.uniform() + 1.\/ ((x-5.67)**2. + (y-5.43)**2.)},\n        \"occupant\": None\n    Output\n    ------\n    empty_house_listing_dt = \n        {'house_pos': (x,y),\n        'current_occupant_id': hex id,\n        'amenities': amenities value,\n        'ask_price': num}\n    '''\n    empty_house_listing_dt = {'house_pos':house_pos,\n                             'current_occupant_id': house_detail_dt['occupant'],\n                             'amenities': house_detail_dt['amenities'], # TODO: check\n                             'ask_price': house_detail_dt['last_bought_price'] # ask_price will be the initial-generated price of the empty house \n                             }\n    return empty_house_listing_dt\n\ndef gen_listing_if_can_and_want_sell(person_id, person_dt):\n    ''' Phase 2: bid-ask, used in gen_asks()\n    1. Check if can sell\n    2. Check if want to sell\n    3. Generate listing\n    \n    Note:\n    - ask_price is set to be market price for that house\n    - this assumes that market price changes with each time step -- there should be a function for it later\n    - also, a PROBA_SELL is defined here, set to 0.4 arbitrarily\n    '''\n\n    PROBA_SELL = 0.4 # arbitrary threshold\n    \n    # 1. Check if can sell\n    house_pos_to_sell = person_dt['housing_selling']\n    if house_pos_to_sell != None: # must have a second house to sell\n        house_to_sell_dt = houses[house_pos_to_sell] # this is the house dict obj\n        cost_price = house_to_sell_dt['last_bought_price']\n        market_price = house_to_sell_dt['market_price']\n        \n        # 2. Check if want to sell\n        if market_price >= cost_price: # makes sense to sell\n            if np.random.uniform() <= PROBA_SELL: # random chance that person wants to sell given that it is sensible to do so\n                assert person_id == house_to_sell_dt['occupant'], \"ERROR: person_id != occupant_id of house being sold\"\n                \n                # 3. Generate listing\n                house_listing_dt = {'house_pos': house_pos_to_sell,\n                             'current_occupant_id': house_to_sell_dt['occupant'],\n                             'amenities': house_to_sell_dt['amenities'], # TODO: check\n                             'ask_price': market_price # TODO: check & update if nec\n                             }\n                return house_listing_dt\n\ndef gen_asks():\n    ''' phase 2 bid-ask\n    1. Refresh ask_df pd.DataFrame()\n    2. Add empty houses from `houses` to ask_df\n    3. Add more listings from persons who can and want to sell houses\n    '''\n    global ask_df # may not be necessary\n    # 1. Refresh ask_df pd.DataFrame()\n    ask_df.drop(ask_df.index, inplace=True)\n    \n    # 2. Add empty houses from `houses` to ask_df\n    empty_houses_ask_ls = \\\n    [gen_empty_house_listing(house_pos, house_detail_dt) \\\n     for house_pos, house_detail_dt in houses.items() if house_detail_dt['status']=='empty']\n    \n    ## convert ls of dt to df and append new df to main ask_df\n    empty_houses_ask_df = pd.DataFrame(empty_houses_ask_ls)\n    ask_df = ask_df.append(empty_houses_ask_df, ignore_index=True)\n    \n    # 3. Add more listings from persons who can and want to sell houses\n    main_listing_ask_ls = [gen_listing_if_can_and_want_sell(person_id, person_dt) for person_id, person_dt in persons.items()]\n    main_listing_ask_df = pd.DataFrame(main_listing_ask_ls)\n    ask_df = ask_df.append(main_listing_ask_ls, ignore_index=True)\n\n# test run\ngen_asks() #works","95e313e0":"#     person = {\n#         \"age\": 20,\n#         \"income\": 10,\n#         \"wealth\": 400*np.random.uniform(),\n#         \"housing_staying\": None,\n#         \"housing_selling\": None,\n#         \"utility\": utility_function\n#     }","e208122b":"ask_df.sample(10)","fec6089e":"!apt-get -y install ffmpeg > \/dev\/null","150e5372":"from IPython.display import display, HTML\nimport matplotlib.animation as animation\n","fd13f8cf":"from pprint import pprint\n\nfig, ax = plt.subplots(1,3)\nim0 = ax[0].imshow(np.random.randn(10,10), vmin=0, vmax=5)\nim1 = ax[1].imshow(np.random.randn(10,10), vmin=0, vmax=500)\nim2 = ax[2].imshow(np.random.randn(10,10), vmin=0, vmax=1)\nax[0].set_title(\"amenities\")\nax[1].set_title(\"price\")\nax[2].set_title(\"status\")\npatches = [im0, im1, im2]\n\ndef update_plot():\n    xarr = np.random.randn(10,10)\n    parr = np.random.randn(10,10)\n    oarr = np.random.randn(10,10)\n    for x in range(10):\n        for y in range(10):\n            xarr[x,y] = utility_function(houses[(x,y)][\"amenities\"])\n            parr[x,y] = houses[(x,y)][\"price\"]\n            oarr[x,y] = status_to_float(houses[(x,y)][\"status\"])\n    im0.set_data(xarr)\n    im1.set_data(parr)\n    im2.set_data(oarr)\n\ndef init():\n    return patches\n\ndef next_time_step(i):\n    aging()\n    birth()\n    dying()\n    allocation()\n    update_plot()\n    return patches\n\n# call the animator. blit=True means only re-draw the parts that have changed.\nanim = animation.FuncAnimation(fig, next_time_step, init_func=init,\n                               frames=100, interval=100, blit=True)\n\nvid = anim.to_html5_video()\nplt.close()","9789a6d8":"HTML(vid)","394058ac":"### Death","6fd3b016":"# Transactions\nPeople without a house will try and buy the best house available to them.","34ca4893":"# Initial state","9966788f":"# Begin simulation","58fc979e":"### Aging","faae9cfb":"lifecycle of a person\n- born with a certain wealth\n- buys a house immediately\n- dies and goes nowhere (probability of death) \n\ncharacterisitics of a person\n- age\n- net income\n- wealth (which changes with purchases and net income)\n- satisfaction (an indicator which cumulates)\n- probability of death\n\nobjective of a person\n- maximise satisfaction\n\nobjective of the government\n- maximise satisfaction of all the people\n\nlifecycle of a house\n- empty initially\n- bought by a person\n- vacated when it is empty\n\ncharacteristics of a house\n- location and coordinates \n- occupancy\n- amentities\n\npricing mechanism\n- ???\n\nprocess of purchase\n- each person only know a limited number of choices\n- each person will get the option that is \n  - possible (house is empty and they have the money)\n  - best utility (x-factor for now)","e502f9fb":"### Birth","c8bcbf4b":"# Activities in timestep\nIn every time step, people age, people die, and people get born."}}