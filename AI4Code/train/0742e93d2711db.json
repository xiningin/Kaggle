{"cell_type":{"4a68688e":"code","799712e4":"code","35caac7d":"code","ea6134ea":"code","e6cb691b":"code","796099c7":"code","8e82b4b2":"code","87b1aace":"code","9de55771":"code","a6348b9a":"code","1d7e8d23":"code","bf7fc81c":"code","645ce02f":"code","9b1eaf54":"code","8e8d6682":"code","fc9eee54":"code","2cc15fa7":"code","0389cfdc":"code","18a938b5":"code","66e18730":"code","d72463f1":"code","cdcb5fca":"code","c1a8cc96":"code","a5e5ef58":"code","4b06e9ed":"code","ffd6f4be":"code","907655d7":"code","cc288329":"code","1174c9fc":"code","971d8695":"code","680cb558":"code","8374ad77":"code","ec3c7601":"code","62ca0382":"code","6ac1c924":"code","b54a2cba":"code","0c56afde":"code","31d9ae35":"code","eb58c92c":"code","24899244":"code","4f0d6ebf":"code","a52d12d4":"code","5e84063b":"code","5a7cc7ac":"code","b42a5e45":"code","cde2de21":"code","586182d0":"code","ebceab8c":"code","6ae4a4a2":"code","6301ca1b":"code","35c0e693":"code","448317a9":"code","a5ad334c":"code","833e053e":"code","2c3603e9":"code","bf7018fb":"code","a0b27b19":"code","18760a6e":"code","5a2281b7":"code","17567c8c":"code","86373d2f":"code","fc87f61f":"code","7908bba7":"code","43dee141":"code","7522bcea":"code","042112a9":"code","74142744":"code","ef783f59":"code","816678f8":"code","c58273bf":"code","faa7d9dc":"code","c762b17a":"code","5d85ef80":"code","6e2e46aa":"code","a1ebc643":"code","f382f415":"code","62ecb113":"code","9717f980":"code","576861e9":"code","3b1091ab":"code","aa68f674":"code","e2ef8a51":"code","f3230132":"code","d2ef9243":"code","4ed8e907":"code","203a0372":"code","33afc946":"code","415734c6":"code","9b435493":"code","b7e66d09":"code","c5e91ed3":"code","e2785fd4":"code","699a6164":"code","1ee73f86":"code","43721b73":"code","3d608d75":"code","b524964d":"code","e7b1f5b6":"code","c0e278b9":"code","4d70f1e6":"code","389da798":"code","74af4b28":"code","c9e9606b":"code","caa48d37":"code","f928e190":"code","59afa5a5":"code","cef2ea30":"code","3e53565c":"code","a5718ff3":"code","0e4aa536":"code","b8e01a88":"code","292d452d":"code","0db89517":"code","850b5ac7":"code","2cb14508":"code","1f5d7134":"code","3d608e5f":"code","a9c5ae7e":"code","a8540dce":"code","6bc35a9d":"code","df4b6c06":"code","c6cc9952":"code","8364ebb3":"code","4b7be55d":"code","e84f7131":"code","207db7f2":"code","4eb76c84":"code","61d8b786":"code","a404d223":"code","198e7fdf":"code","11585d5d":"code","f7e463af":"code","a101b733":"code","f78b2606":"code","6df0db10":"code","ff4cbb39":"code","b1d50b17":"code","ad3af2f0":"code","4d5e01f4":"code","2f4e2be7":"code","4831c3a1":"code","8638d688":"markdown","f1b282f5":"markdown","f81d3ff1":"markdown","bef7cc8b":"markdown","b79c80a5":"markdown","35789fe7":"markdown","bbe64802":"markdown","17279bbf":"markdown","dadda09f":"markdown","27c083f8":"markdown","4132852a":"markdown","9745a8a6":"markdown","20960347":"markdown","73a5cb86":"markdown","884ef2c4":"markdown","90d616e3":"markdown","b50c8c31":"markdown","1bd7a2f2":"markdown","c31fa922":"markdown","47e251b9":"markdown","a24eed90":"markdown","ee278ff5":"markdown","42cf468c":"markdown","d99860ba":"markdown","e5ee48f2":"markdown","4ddac880":"markdown","143810df":"markdown","84197301":"markdown","65b65789":"markdown","d4daad98":"markdown","1a7d0fef":"markdown","f27be448":"markdown","9bb5fc9e":"markdown","664b1dc1":"markdown","e37d7235":"markdown","ada3ae1a":"markdown","60c3c66a":"markdown","fdda62b3":"markdown","da8f6057":"markdown","9d5c777c":"markdown","162f5cac":"markdown","3667a0d5":"markdown","7211c313":"markdown","05935ca3":"markdown","1fd2e0bd":"markdown","f66ec601":"markdown","cbe6b6ab":"markdown","b48f81f1":"markdown","0d9737bc":"markdown","6930ee9c":"markdown","51e6b30e":"markdown","8848651f":"markdown","3351292c":"markdown","f6c816ca":"markdown","93a9c811":"markdown","fd8d4f2b":"markdown","c5d16dd0":"markdown","81acbdf5":"markdown","e45f22a2":"markdown","51f33530":"markdown","abf5f284":"markdown","b6ba66af":"markdown","50ff814e":"markdown","6d992392":"markdown","44b16749":"markdown","f6f72764":"markdown","134bbe0e":"markdown","407c8fa8":"markdown","91b94bf6":"markdown","8d1beb72":"markdown","b3c9b065":"markdown"},"source":{"4a68688e":"!pip install ipython-autotime\n%load_ext autotime","799712e4":"from google.colab import drive\ndrive.mount(\"gdrive\")\n","35caac7d":"!pwd\n!ls -al","ea6134ea":"%cd \"\/content\/gdrive\/My Drive\/4th_2020\/kisti_kaggle\"\n!ls -al\n","e6cb691b":"import os\nos.listdir(\".\/datasets\")","796099c7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# seaborn scheme \uc124\uc815\nplt.style.use('seaborn')\n# \uadf8\ub798\ud504\uc758 \ud3f0\ud2b8 \uc124\uc815\nsns.set(font_scale=1.5) \n# \ub370\uc774\ud130\uc14b\uc758 missing data \uc27d\uac8c \ubcf4\uc5ec\uc8fc\uae30\nimport missingno as msno\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","8e82b4b2":"WORK_DIR = '.\/datasets\/'\ndf_train = pd.read_csv(WORK_DIR + 'train.csv')\ndf_test = pd.read_csv(WORK_DIR + 'test.csv')","87b1aace":"# \ub370\uc774\ud130 \uc14b \uc0b4\ud3b4\ubcf4\uae30\ndf_train.head()","9de55771":"df_test.head()","a6348b9a":"# \ud1b5\uacc4\uc801 \uc218\uce58 \ubcf4\uae30\ndf_train.describe()","1d7e8d23":"df_test.describe()","bf7fc81c":"# \ud559\uc2b5 \ub370\uc774\ud130 \uccb4\ud06c\nfor col in df_train.columns:\n    print('column: {:>10}\\t Percent of NULL value: {:.2f}%'.format(col, \n          100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0])))\n","645ce02f":"df_train.info()","9b1eaf54":"# \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uccb4\ud06c\nfor col in df_test.columns:\n    print('column: {:>10}\\t Percent of NULL value: {:.2f}%'.format(col, \n          100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0])))","8e8d6682":"df_test.info()","fc9eee54":"df_train.shape","2cc15fa7":"# null data \ubd84\ud3ec \ud655\uc778\nmsno.matrix(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))","0389cfdc":"# null data \uc218\ub85c \ud655\uc778\nmsno.bar(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))","18a938b5":"df_train['Survived'].value_counts()","66e18730":"# 1\ud589 2\uc5f4 \ud314\ub808\ud2b8, \ud06c\uae30(\uc138\ub85c:18, \uac00\ub85c:8)\nf, ax = plt.subplots(1, 2, figsize=(16,8))\n\n# \ud30c\uc774 \ucc28\ud2b8\ub85c \uadf8\ub9ac\uae30\n# value_counts() \uc758 data type\uc740 series\uc774\uba70,\n# series \ud0c0\uc785\uc740 plot\uc744 \uac00\uc9d0\n# plt.plot(df_train['Survived'].value_counts()) \uc740 df_train[..]...plot()\uacfc \ub3d9\uc77c\ndf_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], \n                           autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('')\n\nsns.countplot('Survived', data=df_train, ax=ax[1])\nax[1].set_title('Count plot - Survived')\n\nplt.show()","d72463f1":"df_train['Survived'].value_counts().plot()","cdcb5fca":"plt.plot(df_train['Survived'].value_counts())","c1a8cc96":"# 11\uac1c\uc758 feature, 1\uac1c\uc758 target label \ndf_train.shape","a5e5ef58":"# Pclass \ubcc4 \ud56d\ubaa9 \uac2f\uc218\ndf_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count()","4b06e9ed":"# Pclass\ubcc4 \uc0dd\uc874\uc790 \uc218\n# P1(136\/216), P2(87\/184), P3(119\/491)\ndf_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).sum()  # mean()","ffd6f4be":"# crosstab \uc73c\ub85c \ud655\uc778\npd.crosstab(df_train['Pclass'], df_train['Survived'], \n            margins=True).style.background_gradient(cmap='summer_r')","907655d7":"# \ud074\ub798\uc2a4\ubcc4 \uc0dd\uc874\ub960\n# P1 : (136 \/ (80+136)) => 63%\ndf_train[['Pclass', 'Survived']].groupby(['Pclass'], \n             as_index=True).mean().sort_values(by='Survived', \n                                   ascending=False).plot.bar()","cc288329":"# label\uc5d0 \ub530\ub978 \uac2f\uc218 \ud655\uc778\ny_position = 1.02\nf, ax = plt.subplots(1, 2, figsize=(16, 8))\ndf_train['Pclass'].value_counts().plot.bar(\n    color=['#CD7F32','#FFDF00','#D3D3D3'], ax=ax[0])\nax[0].set_title('Number of Passengers By Pclass', y=y_position)\nax[0].set_ylabel('Count')\nsns.countplot('Pclass', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Pclass: Survived vs Dead', y=y_position)\nplt.show()","1174c9fc":"f, ax = plt.subplots(1, 2, figsize=(16, 8))\ndf_train[['Sex', 'Survived']].groupby(['Sex'], \n                          as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","971d8695":"df_train[['Sex', 'Survived']].groupby(['Sex'], \n            as_index=False).mean().sort_values(by='Survived', ascending=False)","680cb558":"# crosstab \uc73c\ub85c \ud655\uc778\npd.crosstab(df_train['Sex'], df_train['Survived'], \n            margins=True).style.background_gradient(cmap='summer_r')","8374ad77":"# 3\uac1c\uc758 \ucc28\uc6d0 \ub370\uc774\ud130\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\nsns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, \n               size=6, aspect=1.5)","ec3c7601":"# cloumn \ub300\uc2e0 hue \uc0ac\uc6a9\nsns.factorplot(x='Sex', y='Survived', col='Pclass',\n              data=df_train, satureation=.5,\n               size=9, aspect=1)\nsns.factorplot(x='Sex', y='Survived', hue='Pclass',\n              data=df_train, satureation=.5,\n               size=9, aspect=1)","62ca0382":"# \uac04\ub2e8\ud55c \ud1b5\uacc4 \ubcf4\uae30\nprint('\uc81c\uc77c \ub098\uc774 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].max()))\nprint('\uc81c\uc77c \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].min()))\nprint('\ud0d1\uc2b9\uac1d \ud3c9\uade0 \ub098\uc774 : {:.1f} Years'.format(df_train['Age'].mean()))","6ac1c924":"df_train.info()","b54a2cba":"df_train[df_train['Survived'] == 1]['Age'].isnull().sum()","0c56afde":"# \uc0dd\uc874\uc5d0 \ub530\ub978 Age\uc758 \ud788\uc2a4\ud1a0\uadf8\ub7a8\n# kdeplot()\nfig, ax = plt.subplots(1, 1, figsize=(9, 5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'].dropna(), ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'].dropna(), ax=ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","31d9ae35":"# \ud788\uc2a4\ud1a0\uadf8\ub7a8 vs. kdeplot()\n# kdeplot()\uc774 \ubd80\ub4dc\ub7fd\uac8c \uadf8\ub9bc\n# (\ucc38\uace0) \ucee4\ub110\ubc00\ub3c4\ucd94\uc815 https:\/\/blog.naver.com\/loiu870422\/220660847923\ndf_train[df_train['Survived']==1]['Age'].hist()","eb58c92c":"# pandas indexing\ndf_train.iloc[0,:]","24899244":"for row in df_train.iterrows():\n  break\nrow","4f0d6ebf":"df_train['Survived'] == 1","a52d12d4":"df_train[df_train['Survived']==1]","5e84063b":"# figsize\n# \uc544\ub798 \uc138 \uc608\uc81c\ub294 \ub3d9\uc77c\n#f = plt.figure(figsize=(10,10))\n#f, ax = plt.subplots(1,1,figsize=(10,10))\n#plt.figure(figsize=(10,10))\nf, ax = plt.subplots(1,1,figsize=(5,5))\na = np.arange(100)\nb = np.sin(a)\nax.plot(b)\n\nplt.figure(figsize=(5,5))\nplt.plot(b)","5a7cc7ac":"# Pclass\uc640 Age \ub85c \ud655\uc778\nplt.figure(figsize=(8, 6))\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='kde')\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])","b42a5e45":"fig, ax = plt.subplots(1,3,figsize=(20,5))\nsns.kdeplot(df_train[(df_train['Survived']==0) & (df_train['Pclass']==1)]['Age'], ax=ax[0])\nsns.kdeplot(df_train[(df_train['Survived']==1) & (df_train['Pclass']==1)]['Age'], ax=ax[0])\nax[0].set_title('1st class')\nax[0].legend(['Survived==0', 'Survived==1'])   \nsns.kdeplot(df_train[(df_train['Survived']==0) & (df_train['Pclass']==2)]['Age'], ax=ax[1])\nsns.kdeplot(df_train[(df_train['Survived']==1) & (df_train['Pclass']==2)]['Age'], ax=ax[1])\nax[1].set_title('2nc class')\nax[1].legend(['Survived==0', 'Survived==1'])   \nsns.kdeplot(df_train[(df_train['Survived']==0) & (df_train['Pclass']==3)]['Age'], ax=ax[2])\nsns.kdeplot(df_train[(df_train['Survived']==1) & (df_train['Pclass']==3)]['Age'], ax=ax[2])\nax[2].set_title('3rd class')\nax[2].legend(['Survived==0', 'Survived==1'])                               \nplt.show()\n","cde2de21":"# \ub098\uc774 \ubc94\uc704\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960\ncummulate_survival_ratio = []\nfor i in range(1, 80):\n    cummulate_survival_ratio.append(\n        df_train[df_train['Age'] < i]['Survived'].sum() \/ \n        len(df_train[df_train['Age'] < i]['Survived']))\n    \nplt.figure(figsize=(7, 7))\nplt.plot(cummulate_survival_ratio)\nplt.title('Survival rate change depending on range of Age', y=1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()","586182d0":"# scale='count', scale='area'\nf,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=df_train, scale='count', \n               split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=df_train, scale='count', \n               split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","ebceab8c":"f, ax = plt.subplots(1, 1, figsize=(7, 7))\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], \n              as_index=True).mean().sort_values(by='Survived', \n                                      ascending=False).plot.bar(ax=ax)","6ae4a4a2":"# \ub2e4\ub978 feature\ub85c split\ud558\uc5ec \ud655\uc778\nf,ax=plt.subplots(2, 2, figsize=(20,15))\n\nsns.countplot('Embarked', data=df_train, ax=ax[0,0])\nax[0,0].set_title('(1) No. Of Passengers Boarded')\n\nsns.countplot('Embarked', hue='Sex', data=df_train, ax=ax[0,1])\nax[0,1].set_title('(2) Male-Female Split for Embarked')\n\nsns.countplot('Embarked', hue='Survived', data=df_train, ax=ax[1,0])\nax[1,0].set_title('(3) Embarked vs Survived')\n\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax=ax[1,1])\nax[1,1].set_title('(4) Embarked vs Pclass')\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","6301ca1b":"# \uc0c8\ub85c\uc6b4 \uceec\ub7fc(Family) \ucd94\uac00\n# series \ud0c0\uc785\uc740 \uc11c\ub85c \ub354\ud560 \uc218 \uc788\uc74c\n# \uc790\uc2e0\uc744 \ud3ec\ud568\ud558\uae30 \uc704\ud574 1\uc744 \ub354\ud568\ndf_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 \ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1 \n\nprint(\"Maximum size of Family: \", df_train['FamilySize'].max())\nprint(\"Minimum size of Family: \", df_train['FamilySize'].min())","35c0e693":"# Family \ud06c\uae30\uc640 \uc0dd\uc874 \uad00\uacc4\nf,ax=plt.subplots(1, 3, figsize=(40,10))\n\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('(1) No. Of Passengers Boarded', y=1.02)\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize',  y=1.02)\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], \n                    as_index=True).mean().sort_values(by='Survived', \n                                         ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize',  y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","448317a9":"# histogram\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', \n                 label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","a5ad334c":"df_train.info()","833e053e":"# NULL\uac12 \uce58\ud658\ndf_train.loc[df_train.Fare.isnull(), 'Fare'] = df_train['Fare'].mean()\ndf_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean()\n\n# log \uc801\uc6a9 (\ud3b8\ud5a5\ub41c \ub370\uc774\ud130 \ubcf4\uc815)\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i>0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i>0 else 0)\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', \n            label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","2c3603e9":"df_train.head()","bf7018fb":"df_train['Ticket'].value_counts()\n","a0b27b19":"df_train['Age'].isnull().sum()","18760a6e":"df_train['Name']","5a2281b7":"df_train['Name'].str.extract('([A-Za-z]+)\\.')","17567c8c":"# initial \ud56d\ubaa9\uc73c\ub85c \ucd94\ucd9c\ndf_train['Initial']=0\ndf_train['Initial']= df_train.Name.str.extract('([A-Za-z]+)\\.') \n    \ndf_test['Initial']=0\ndf_test['Initial']= df_test.Name.str.extract('([A-Za-z]+)\\.')","86373d2f":"# Sex\uc640 Initial\uc5d0 \ub300\ud55c crosstab \ud655\uc778\npd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r')","fc87f61f":"# \uc704 \ud14c\uc774\ube14\uc744 \ucc38\uace0\ud558\uc5ec,\n# initial \uce58\ud658\ndf_train['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess',\n                          'Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other',\n                       'Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)\n\ndf_test['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess',\n                          'Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other',\n                         'Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)","7908bba7":"pd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r')","43dee141":"df_train.groupby('Initial').mean()","7522bcea":"# \uc0dd\uc874\ub960 \ud655\uc778\ndf_train.groupby('Initial')['Survived'].mean().plot.bar()","042112a9":"df_train.head(5)","74142744":"df_all = pd.concat([df_train, df_test])\ndf_all.head(10)","ef783f59":"df_all.tail(5)","816678f8":"df_all.reset_index(drop=True)\ndf_all.head()","c58273bf":"df_all.groupby('Initial').mean()","faa7d9dc":"df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age']=33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age']=37\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age']=5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age']=22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age']=45\n\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age']=33\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age']=37\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age']=5\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age']=22\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Other'),'Age']=45","c762b17a":"df_train['Age'].isnull().sum()","5d85ef80":"df_test['Age'].isnull().sum()","6e2e46aa":"df_train['Embarked'].isnull().sum()","a1ebc643":"df_train.shape","f382f415":"df_train['Embarked'].fillna('S', inplace=True)","62ecb113":"df_train['Age_cat'] = 0\n\ndf_train.head()","9717f980":"# loc \uc774\uc6a9\n# 10\uc0b4 \uac04\uaca9\uc73c\ub85c \ub098\ub204\uae30\ndf_train['Age_cat'] = 0\ndf_train.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_train.loc[(10 <= df_train['Age']) & (df_train['Age'] < 20), 'Age_cat'] = 1\ndf_train.loc[(20 <= df_train['Age']) & (df_train['Age'] < 30), 'Age_cat'] = 2\ndf_train.loc[(30 <= df_train['Age']) & (df_train['Age'] < 40), 'Age_cat'] = 3\ndf_train.loc[(40 <= df_train['Age']) & (df_train['Age'] < 50), 'Age_cat'] = 4\ndf_train.loc[(50 <= df_train['Age']) & (df_train['Age'] < 60), 'Age_cat'] = 5\ndf_train.loc[(60 <= df_train['Age']) & (df_train['Age'] < 70), 'Age_cat'] = 6\ndf_train.loc[70 <= df_train['Age'], 'Age_cat'] = 7\n\ndf_test['Age_cat'] = 0\ndf_test.loc[df_test['Age'] < 10, 'Age_cat'] = 0\ndf_test.loc[(10 <= df_test['Age']) & (df_test['Age'] < 20), 'Age_cat'] = 1\ndf_test.loc[(20 <= df_test['Age']) & (df_test['Age'] < 30), 'Age_cat'] = 2\ndf_test.loc[(30 <= df_test['Age']) & (df_test['Age'] < 40), 'Age_cat'] = 3\ndf_test.loc[(40 <= df_test['Age']) & (df_test['Age'] < 50), 'Age_cat'] = 4\ndf_test.loc[(50 <= df_test['Age']) & (df_test['Age'] < 60), 'Age_cat'] = 5\ndf_test.loc[(60 <= df_test['Age']) & (df_test['Age'] < 70), 'Age_cat'] = 6\ndf_test.loc[70 <= df_test['Age'], 'Age_cat'] = 7","576861e9":"df_train.head()","3b1091ab":"# apply() \ud568\uc218 \uc0ac\uc6a9\ud55c \ubc29\ubc95\ndef category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7    \n    \ndf_train['Age_cat_2'] = df_train['Age'].apply(category_age)\n","aa68f674":"df_train.head()","e2ef8a51":"# \ub450 \uac00\uc9c0 \ubc29\ubc95\uc758 \ube44\uad50\n# all() : \ubaa8\ub450 True \uc77c \ub54c, True\n# any() : \ud558\ub098\ub77c\ub3c4 True\uc774\uba74 True\n(df_train['Age_cat'] == df_train['Age_cat_2']).all()","f3230132":"# Age \uceec\ub7fc \uc0ad\uc81c\n# axis=1\ndf_train.drop(['Age', 'Age_cat_2'], axis=1, inplace=True)\ndf_test.drop(['Age'], axis=1, inplace=True)","d2ef9243":"df_train.Initial.unique()","4ed8e907":"df_train['Initial'] = df_train['Initial'].map(\n    {'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_test['Initial'] = df_test['Initial'].map(\n    {'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_train.Initial.unique() ","203a0372":"df_train['Embarked'].unique()","33afc946":"df_train['Embarked'].value_counts()","415734c6":"df_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})","9b435493":"df_train.head()","b7e66d09":"# null \ud655\uc778\ndf_train['Embarked'].isnull().any()","c5e91ed3":"df_train['Sex'].unique()","e2785fd4":"df_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1})\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1})","699a6164":"df_train['Sex'].unique()","1ee73f86":"heatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', \n                         'Embarked', 'FamilySize', 'Initial', 'Age_cat']] \n\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14, 12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0,\n           square=True, cmap=colormap, linecolor='white', annot=True, \n            annot_kws={\"size\": 16})\n\ndel heatmap_data","43721b73":"df_train = pd.get_dummies(df_train, columns=['Initial'], prefix='Initial')\ndf_test = pd.get_dummies(df_test, columns=['Initial'], prefix='Initial')\n\ndf_train.head()","3d608d75":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","b524964d":"df_train.head()","e7b1f5b6":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Name',  'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\n","c0e278b9":"df_train.head()","4d70f1e6":"df_test.head()","389da798":"from sklearn.ensemble import RandomForestClassifier  \nfrom sklearn import metrics \nfrom sklearn.model_selection import train_test_split","74af4b28":"# \ud559\uc2b5\uc5d0 \uc4f0\uc77c \ub370\uc774\ud130\uc640 target label \ubd84\ub9ac\nX_train = df_train.drop('Survived', axis=1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values","c9e9606b":"X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size=0.3, random_state=2018)","caa48d37":"# \ud559\uc2b5\nmodel = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\n","f928e190":"# \uc608\uce21\nprediction = model.predict(X_vld)","59afa5a5":"# \uc815\ud655\ub3c4\nprint('\ucd1d {}\uba85 \uc911 {:.2f}% \uc815\ud655\ub3c4\ub85c \uc0dd\uc874\uc744 \ub9de\ucda4'.format(y_vld.shape[0], 100 * metrics.accuracy_score(prediction, y_vld)))","cef2ea30":"print(X_tr.shape)\nprint(X_vld.shape)","3e53565c":"(prediction == y_vld).sum()\/prediction.shape[0]","a5718ff3":"#pred_train_rf = model.predict(X_tr)\n#pred_test_rf = model.predict(X_vld)\n#score_train_rf = metrics.accuracy_score(pred_train_rf, y_tr)\n#score_test_rf = metrics.accuracy_score(pred_test_rf, y_vld)\n#print(\"RandomForest Train Score: \", score_train_rf)\n#print(\"RandomForest Test Score: \", score_test_rf)","0e4aa536":"model.feature_importances_","b8e01a88":"df_train.head()\n","292d452d":"from pandas import Series\nfeature_importance = model.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)","0db89517":"plt.figure(figsize=(8, 8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","850b5ac7":"%%time\n\nimport xgboost as xgb\n\nmodel_xgb = xgb.XGBClassifier(max_depth=9, learning_rate=0.01, n_estimators=500, reg_alpah=1.1,\n                             colsample_bytree=0.9, subsample=0.9, n_jobs=5)\nmodel_xgb.fit(X_tr, y_tr, eval_set=[(X_vld, y_vld)], verbose=False, early_stopping_rounds=50)\npred_xgb = model_xgb.predict(X_vld)\nscore_xgb = metrics.accuracy_score(pred_xgb, y_vld)\nprint(\"XGBoost Test score: \", score_xgb)","2cb14508":"from pandas import Series\nfeature_importance = model_xgb.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)\nplt.figure(figsize=(8, 8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.title(\"XGBoost\")\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","1f5d7134":"%%time \n\nimport lightgbm as lgbm\n\nmodel_lgbm = lgbm.LGBMClassifier(max_depth=9, lambda_l1=0.1, lambda_l2=0.01, learning_rate=0.01,\n                               n_estimators=500, reg_alpha=1.1, colsample_bytree=0.9, subsample=0.9, n_jobs=5)\nmodel_lgbm.fit(X_tr, y_tr, eval_set=[(X_vld, y_vld)], verbose=False, early_stopping_rounds=50,\n              eval_metric=\"accuracy\")\npred_lgbm = model_lgbm.predict(X_vld)\nscore_lgbm = metrics.accuracy_score(pred_lgbm, y_vld)\nprint(\"LightGBM Test Score: \", score_lgbm)\n","3d608e5f":"from pandas import Series\nfeature_importance = model_lgbm.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)\nplt.figure(figsize=(8, 8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.title(\"LightGBM\")\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","a9c5ae7e":"!pip install catboost","a8540dce":"%%time \n\nimport catboost as cboost\n\nmodel_cboost = cboost.CatBoostClassifier(depth=9, reg_lambda=0.1, learning_rate=0.01, iterations=500)\nmodel_cboost.fit(X_tr, y_tr, eval_set=[(X_vld, y_vld)], verbose=False, early_stopping_rounds=50)\npred_cboost = model_cboost.predict(X_vld)\nscore_cboost = metrics.accuracy_score(pred_cboost, y_vld)\nprint(\"CatBoost Test Score: \", score_cboost)\n","6bc35a9d":"from pandas import Series\nfeature_importance = model_cboost.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)\nplt.figure(figsize=(8, 8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.title(\"CatBoost\")\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","df4b6c06":"\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, BatchNormalization, Activation\nfrom keras.optimizers import Adam\nfrom keras import backend as K\n\nmodel_mlp = Sequential()\nmodel_mlp.add(Dense(45 ,activation='linear', input_dim=13))\nmodel_mlp.add(BatchNormalization())\n\nmodel_mlp.add(Dense(9,activation='linear'))\nmodel_mlp.add(BatchNormalization())\nmodel_mlp.add(Dropout(0.4))\n\nmodel_mlp.add(Dense(5,activation='linear'))\nmodel_mlp.add(BatchNormalization())\nmodel_mlp.add(Dropout(0.2))\n\nmodel_mlp.add(Dense(1,activation='relu', ))\n\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0)\nmodel_mlp.compile(optimizer=optimizer, \n            loss='binary_crossentropy', \n            metrics=['accuracy'])\n\nhist = model_mlp.fit(X_tr, y_tr, epochs=500, batch_size=30, validation_data=(X_vld,y_vld), verbose=False)\n\npred_mlp = model_mlp.predict_classes(X_vld)[:,0]\nscore_mlp = metrics.accuracy_score(pred_mlp, y_vld)\nprint(\"MLP Test Score: \", score_mlp)\n","c6cc9952":"fig, loss_ax = plt.subplots(figsize=(10,10))\n\nacc_ax = loss_ax.twinx()\n\nloss_ax.plot(hist.history['loss'], 'y', label='train loss')\nloss_ax.plot(hist.history['val_loss'], 'r', label='val loss')\n\nacc_ax.plot(hist.history['accuracy'], 'b', label='train acc')\nacc_ax.plot(hist.history['val_accuracy'], 'g', label='val acc')\n\nloss_ax.set_xlabel('epoch')\nloss_ax.set_ylabel('loss')\nacc_ax.set_ylabel('accuray')\n\nloss_ax.legend(loc='upper left')\nacc_ax.legend(loc='lower left')\n\nplt.show()","8364ebb3":"X_tr.shape","4b7be55d":"\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, BatchNormalization, Activation\nfrom keras.optimizers import Adam\nfrom keras import backend as K\n\nmodel_mlp = Sequential()\nmodel_mlp.add(Dense(32 ,activation='relu', input_dim=13))  # X_tr.shape: (623, 13)\n#model_mlp.add(BatchNormalization())\n\nmodel_mlp.add(Dense(16,activation='relu'))\n#model_mlp.add(BatchNormalization())\n#model_mlp.add(Dropout(0.4))\n\nmodel_mlp.add(Dense(8,activation='relu'))\n#model_mlp.add(BatchNormalization())\n#model_mlp.add(Dropout(0.2))\n\nmodel_mlp.add(Dense(1,activation='sigmoid'))\n\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0)\nmodel_mlp.compile(optimizer=optimizer, \n            loss='binary_crossentropy', \n            metrics=['accuracy'])\n\nhist = model_mlp.fit(X_tr, y_tr, epochs=500, batch_size=30, validation_data=(X_vld,y_vld), verbose=False)\n\npred_mlp = model_mlp.predict_classes(X_vld)[:,0]\nscore_mlp = metrics.accuracy_score(pred_mlp, y_vld)\nprint(\"MLP Test Score: \", score_mlp)\n","e84f7131":"fig, loss_ax = plt.subplots(figsize=(10,10))\n\nacc_ax = loss_ax.twinx()\n\nloss_ax.plot(hist.history['loss'], 'y', label='train loss')\nloss_ax.plot(hist.history['val_loss'], 'r', label='val loss')\n\nacc_ax.plot(hist.history['accuracy'], 'b', label='train acc')\nacc_ax.plot(hist.history['val_accuracy'], 'g', label='val acc')\n\nloss_ax.set_xlabel('epoch')\nloss_ax.set_ylabel('loss')\nacc_ax.set_ylabel('accuray')\n\nloss_ax.legend(loc='upper left')\nacc_ax.legend(loc='lower left')\n\nplt.show()","207db7f2":"WORK_DIR = '.\/datasets\/'\nsubmission = pd.read_csv(WORK_DIR + 'sample_submission.csv')","4eb76c84":"submission.head()","61d8b786":"# best model \uc120\ud0dd\nmodel = model_cboost\n\nprediction = model.predict(X_test).astype('uint8')\nsubmission['Survived'] = prediction\n\nsubmission.to_csv('.\/titanic_best_model.csv', index=False)","a404d223":"type(prediction)","198e7fdf":"!head -10 .\/titanic_best_model.csv","11585d5d":"ROUND_NUM = 4","f7e463af":"pred_rf = model.predict(X_vld)\nscore_rf = metrics.accuracy_score(pred_rf, y_vld)\nscore_rf = round(score_rf, ROUND_NUM)\nprint(\"RandomForest: \", score_rf)","a101b733":"pred_xgb = model_xgb.predict(X_vld)\nscore_xgb = metrics.accuracy_score(pred_xgb, y_vld)\nscore_xgb = round(score_xgb, ROUND_NUM)\nprint(\"XGBoost: \", score_xgb)","f78b2606":"pred_lgbm = model_lgbm.predict(X_vld)\nscore_lgbm = metrics.accuracy_score(pred_lgbm, y_vld)\nscore_lgbm = round(score_lgbm, ROUND_NUM)\nprint(\"LGBM: \", score_lgbm)","6df0db10":"pred_cboost = model_cboost.predict(X_vld)\nscore_cboost = metrics.accuracy_score(pred_cboost, y_vld)\nscore_cboost = round(score_cboost, ROUND_NUM)\nprint(\"CatBoost: \", score_cboost)","ff4cbb39":"pred_mlp = model_mlp.predict_classes(X_vld)[:,0]\nscore_mlp = metrics.accuracy_score(pred_mlp, y_vld)\nscore_mlp = round(score_mlp, ROUND_NUM)\nprint(\"MLP: \", score_mlp)","b1d50b17":"df_score = pd.DataFrame({'model': ['RandomForest', 'XGBoost', 'LGBM', 'CatBoost', 'MLP'],\n                        'score': [score_rf, score_xgb, score_lgbm, score_cboost, score_mlp]})\nax = df_score.plot.bar(x='model', y='score', rot=0, figsize=(10,5))\nax.legend(loc='center left', bbox_to_anchor=(1.0, 0.5))\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","ad3af2f0":"pred_avg = np.round(np.average([pred_rf, pred_xgb, pred_lgbm, pred_cboost, pred_mlp], axis=0)).astype(int)\nscore_avg = metrics.accuracy_score(pred_avg, y_vld)\nscore_avg = round(score_avg, ROUND_NUM)\nprint(\"AVG: \", score_avg)","4d5e01f4":"\npred_wavg = np.round(np.average([pred_rf, pred_xgb, pred_lgbm, pred_cboost, pred_mlp], \n                               weights=[0.2, 0.3, 0.2, 0.2, 0.1], axis=0)).astype(int)\nscore_wavg = metrics.accuracy_score(pred_wavg, y_vld)\nscore_wavg = round(score_wavg, ROUND_NUM)\nprint(\"Weighted Average: \", score_wavg)","2f4e2be7":"# \ucd5c\uc885 \ub2f5\uc548 \uc81c\ucd9c: \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc0ac\uc6a9\npred_rf = model.predict(X_test)\npred_xgb = model_xgb.predict(X_test)\npred_lgbm = model_lgbm.predict(X_test)\npred_cboost = model_cboost.predict(X_test)\npred_mlp = model_mlp.predict_classes(X_test)[:,0]\n# \uc559\uc0c1\ube14 \npred_wavg = np.round(np.average([pred_rf, pred_xgb, pred_lgbm, pred_cboost, pred_mlp],  \n                                weights=[0.2, 0.3, 0.2, 0.2, 0.1], axis=0)).astype(int)\n\nsubmission['Survived'] = pred_wavg\nsubmission.to_csv('.\/titanic_wavg.csv', index=False)","4831c3a1":"from google.colab import files\nfiles.download('.\/titanic_best_model.csv')\n","8638d688":"## LightGBM","f1b282f5":"### \uc131\ubcc4(Sex)\n- \uc131\ubcc4\ub85c \uc0dd\uc874\ub960 \ud655\uc778\n- pandas groupby\uc640 seaborn countplot \uc0ac\uc6a9\n","f81d3ff1":"### Pclass \uc640 Sex\n- Pclass\uc640 Sex \ub450 feature\uc5d0 \ub300\ud55c \uc0dd\uc874 \ud655\ub960 \ud655\uc778","bef7cc8b":"- Age\uc758 \ud3c9\uade0\uc744 \uc774\uc6a9\ud558\uc5ec Null \uac12 \ucc44\uc6b0\uae30\n  - Mr\uc778 \uacbd\uc6b0, Age \uac12\uc744 33\uc73c\ub85c \uce58\ud658\n- loc + boolean + column\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac12\uc744 \uce58\ud658\ud558\ub294 \ubc29\ubc95\n- [\ucc38\uace0] \ub2e4\ub978 \ubc29\ubc95 \ucc38\uace0:\n  - https:\/\/www.kaggle.com\/yassineghouzam\/titanic-top-4-with-ensemble-modeling","b79c80a5":"## MLP (Multi Layer Perceptron)","35789fe7":"- ticket number \uac00 \ub9e4\uc6b0 \ub2e4\uc591\ud568\n- \uc77c\ub2e8, \uc81c\uc678\n- [\ucc38\uace0] \ucc38\uace0\ud55c \uc0ac\uc774\ud2b8\n  - https:\/\/www.kaggle.com\/arthurtok\/introduction-to-ensembling-stacking-in-python, https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions, https:\/\/www.kaggle.com\/ash316\/eda-to-prediction-dietanic, https:\/\/www.kaggle.com\/yassineghouzam\/titanic-top-4-with-ensemble-modeling ","bbe64802":"- [\ucc3e\uc544\ubcf4\uae30] error bar","17279bbf":"#### Pearson Correlation\n- feature \ub4e4 \uac04\uc758 \uc0c1\uad00 \uad00\uacc4 \uc54c\uc544\ubcf4\uae30\n- (-1, 1) \uc0ac\uc774\uc758 \uac12\n  - -1\ub85c \uac08\uc218\ub85d \uc74c\uc758 \uc0c1\uad00 \uad00\uacc4\n  - 1\ub85c \uac08\uc218\ub85d \uc591\uc758 \uc0c1\uad00 \uad00\uacc4\n  - 0 : \uc0c1\uad00 \uad00\uacc4\uac00 \uc5c6\uc74c\n- matrix \ud615\ud0dc\uc758 heatmap plot \uc0ac\uc6a9","dadda09f":"- Figure 1: S\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc740 \uc0ac\ub78c\uc774 \ud0d1\uc2b9\n- Figure 2: C\uc640 Q\ub294 \ub0a8\ub140 \ube44\uc728\uc774 \ube44\uc2b7, S\ub294 \ub0a8\uc790\uac00 \ub354 \ub9ce\uc74c\n- Figure 3: S\uac00 \uc0dd\uc874\ud655\ub960\uc774 \uac00\uc7a5 \ub0ae\uc74c\n- Figure 4: C\uac00 \uc0dd\uc874 \ud655\ub960\uc774 \ub192\uc74c. \ud074\ub798\uc2a4\uac00 \ub192\uc740 \uc0ac\ub78c\uc774 \ub9ce\uc774 \ud0c4 \uc774\uc720. S\ub294 3rd class\uac00 \ub9ce\uc544\uc11c \uc0dd\uc874 \ud655\ub960\uc774 \ub0ae\uc74c","27c083f8":"## 2. Exploratory Data Analysis (EDA, \ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d)","4132852a":"### Age\n- \ub098\uc774\uc5d0 \ub530\ub978 \uc0dd\uc874 \ud655\ub960 \ud655\uc778","9745a8a6":"### NULL \ub370\uc774\ud130 \uccb4\ud06c","20960347":"### Age \ubcc0\ud658\n- continus \uac12\uc744 categorical \uac12\uc73c\ub85c \ubcc0\ud658\n  - \uc815\ubcf4 \uc190\uc2e4\uc774 \uc788\uc744 \uc218 \uc788\uc73c\ubbc0\ub85c \uc8fc\uc758\uac00 \ud544\uc694\n- Age\ub97c \uba87 \uac1c\uc758 group\uc73c\ub85c \ub098\ub204\uc5b4\uc11c category\ud654 \uc2dc\ud0b4\n- dataframe\uc758 loc \ub610\ub294 apply() \uc0ac\uc6a9","73a5cb86":"#### Embarked\uc758 Null \uac12 \ucc98\ub9ac\n- null \uac12\uc774 2\uac1c \uc788\uc73c\uba70, S\uc5d0\uc11c \ud0d1\uc2b9\uac1d\uc774 \uac00\uc7a5 \ub9ce\uc74c\ubbc0\ub85c null\uc744 S\ub85c \ucc44\uc6c0\n- dataframe\uc758 fillna() \uc0ac\uc6a9","884ef2c4":"### Fare (\ud0d1\uc2b9 \uc694\uae08)\n- continuous feature\n","90d616e3":"### Initial \ubcc0\uacbd\n- Mr, Mrs, Miss, Master, Other \ub85c \uad6c\uc131\n- \uce74\ud14c\uace0\ub9ac\ub85c \ud45c\ud604\ub418\uc5b4\uc838 \uc788\ub294 \ub370\uc774\ud130\ub97c \ucef4\ud4e8\ud130\uac00 \uc778\uc2dd\ud560 \uc218 \uc788\ub3c4\ub85d \uc218\uce58\ud654\n- map() \uc0ac\uc6a9","b50c8c31":"## \uc559\uc0c1\ube14\n- RandomForest: \n- XGBoost:\n- LightGBM:\n- CatBoost:\n- MLP:","1bd7a2f2":"### Sex \ubcc0\uacbd\n- male, female \ub85c \uad6c\uc131","c31fa922":"- [\ucc38\uace0] \uba38\uc2e0\ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\n  - http:\/\/scikit-learn.org\/stable\/supervised_learning.html#supervised-learning","47e251b9":"- Sex, Pclass\uc640 Survived\uc5d0 \uc0c1\uad00 \uad00\uacc4\uac00 \uc5b4\ub290 \uc815\ub3c4 \uc788\uc74c\n- Pclass\uc640 Age_cat, Age_cat\uacfc Initial \uc740 \uc0c1\uad00 \uad00\uacc4 \uc788\uc74c\n- \uc11c\ub85c \uac15\ud55c \uc0c1\uad00 \uad00\uacc4\ub97c \uac00\uc9c0\ub294 feature\ub4e4\uc740 \uc5c6\uc74c\n  - \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0ac \ub54c, \ubd88\ud544\uc694\ud55c feature\ub294 \uc5c6\uc74c\uc744 \uc758\ubbf8 (redundant, superfluous feature \ub4e4)\n  ","a24eed90":"- \ub098\uc774\uac00 \uc5b4\ub9b4 \uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\uc74c","ee278ff5":"##### MSNO \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec null data \ud655\uc778","42cf468c":"- female(\uc5ec\uc131)\uc774 \uc0dd\uc874\ud560 \ud655\ub960\uc774 \ub192\uc74c","d99860ba":"- 38.4% \uac00 \uc0b4\uc544\ub0a8\uc74c\n- target label \uc758 \ubd84\ud3ec\uac00 \uc5b4\ub290 \uc815\ub3c4 \uade0\uc77c(balanced)\ud568\n","e5ee48f2":"### Pclass, Sex, Age\n- Pclass, Sex, Age \uc138 \uac1c\uc758 feature\uc5d0 \ub300\ud55c \uc2dc\uac01\ud654\n- seaborn violinplot \uc0ac\uc6a9\n  - x\ucd95 : \ub098\ub204\uc5b4 \ubcf4\uace0 \uc2f6\uc740 case (Pclass, Sex)\n  - y\ucd95 : \ubcf4\uace0 \uc2f6\uc740 distribution (Age)","4ddac880":"## One-hot encoding\n- \uce74\ud14c\uace0\ub9ac \ub370\uc774\ud130\ub97c (0, 1)\ub85c \uc774\ub8e8\uc5b4\uc9c4 N\ucc28\uc6d0 \ubca1\ud130\ub85c \ub098\ud0c0\ub0b4\ub294 \uac83\n- pandas.get_dummies() \uc0ac\uc6a9","143810df":"### Pclass (\ud074\ub798\uc2a4)\n- ordinal, \uc11c\uc218\ud615 \ub370\uc774\ud130, \uce74\ud14c\uace0\ub9ac\ud615, \uc21c\uc11c \uc788\uc74c\n- pclass\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960 \ucc28\uc774 \uc0b4\ud3b4\ubcf4\uae30\n  - pandas\uc758 group by \uc0ac\uc6a9","84197301":"- Pclass\uac00 \uc88b\uc744 \uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\uc74c","65b65789":"### \uc900\ube44 - \ub370\uc774\ud130 \uc14b\uc744 train, valid, test set\uc73c\ub85c \ub098\ub204\uae30\n- \ubcf4\ud1b5\uc740 train, test set\uc73c\ub85c \ub098\ub204\uc9c0\ub9cc, valid set\uc73c\ub85c \ubaa8\ub378 \ud3c9\uac00\n  - train : \ud300 \ud6c8\ub828\n  - valid : \ud3c9\uac00\uc804\n  - test : \ub300\ud68c","d4daad98":"- \uc67c\ucabd \uadf8\ub9bc: Pclass \ubcc4\ub85c Age\uc758 \ubd84\ud3ec\uac00 \uc5b4\ub5bb\uac8c \ub2e4\ub978\uc9c0, \uc0dd\uc874 \uc5ec\ubd80\uc5d0 \ub530\ub77c \uad6c\ubd84\ud55c \uadf8\ub798\ud504\n- \uc624\ub978\ucabd \uadf8\ub9bc: Sex, Age\uc5d0 \ub530\ub978 \uc0dd\uc874 \uc5ec\ubd80\n- \ubaa8\ub4e0 \ud074\ub798\uc2a4\uc5d0\uc11c \ub098\uc774\uac00 \uc5b4\ub9b4 \uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\uc74c\n- \uc624\ub978\ucabd \uadf8\ub9bc\uc5d0\uc11c, female \uc774 \uc0dd\uc874\ub960\uc774 \ub192\uc74c\n- \uc5ec\uc131\uacfc \uc544\uc774\ub97c \uba3c\uc800 \ucc59\uae34 \uac83\uc744 \uc54c \uc218 \uc788\uc74c","1a7d0fef":"### Family\n- SibSp(\ud615\uc81c \uc790\ub9e4)\n- Parch(\ubd80\ubaa8, \uc790\ub140)","f27be448":"- \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8 \ubaa8\ub378\n  - \uacb0\uc815 \ud2b8\ub9ac \uae30\ubc18 \ubaa8\ub378\n  - \uc5ec\ub7ec \uacb0\uc815 \ud2b8\ub9ac\ub4e4\uc744 \uc559\uc0c1\ube14\ud55c \ubaa8\ub378\n  - \ud30c\ub77c\ubbf8\ud130\n    - n_estimators, max_features, max_depth, min_samples_split, min_samples_leaf\n  - \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc5d0 \ub530\ub77c \ubaa8\ub378 \uc131\ub2a5\uc774 \ub2ec\ub77c\uc9d0\n  ","9bb5fc9e":"## 1. Dataset \ud655\uc778\n- \ub370\uc774\ud130\ub97c \ud14c\uc774\ube14\ud654\ud558\uc5ec \ub2e4\ub8e8\ub294 \uac83\uc774 \ud3b8\ub9ac\n- pandas\ub97c \uc0ac\uc6a9\n  - \uac04\ub2e8\ud55c \ud1b5\uacc4\uc801 \ubd84\uc11d\ubd80\ud130 \ubcf5\uc7a1\ud55c \ucc98\ub9ac\ub4e4\uc744 \uac04\ub2e8\ud55c \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ucc98\ub9ac\n","664b1dc1":"### \ubaa8\ub378 \uc0dd\uc131 \ubc0f \uc608\uce21\n- RandomForestClassifier()\n- fit()\n- predict()","e37d7235":"### Ticket\n- \ub2e4\uc591\ud55c \ubb38\uc790\uc5f4\uc774 \ub9ce\uc74c\n- \ubaa8\ub378\uc5d0 \uc801\uc6a9\ud558\uae30 \uc704\ud574\uc11c \ub2e4\uc591\ud55c \uc544\uc774\ub514\uc5b4 \ud544\uc694","ada3ae1a":"- \ubaa8\ub4e0 \ud074\ub798\uc2a4\uc5d0\uc11c female\uc774 \uc0dd\uc874\ud560 \ud655\ub960\uc774 male \ubcf4\ub2e4 \ub192\uc74c\n- \ub0a8, \uc5ec \uc0c1\uad00\uc5c6\uc774 \ud074\ub798\uc2a4\uac00 \ub192\uc744 \uc218\ub85d \uc0dd\uc874 \ud655\ub960\uc774 \ub192\uc74c","60c3c66a":"### Target Label \ud655\uc778\n- target label \uc774 \uc5b4\ub5a4 \ubd84\ud3ec\ub97c \uac00\uc9c0\uace0 \uc788\ub294\uc9c0 \ud655\uc778\n- binary classification \uac19\uc740 \uacbd\uc6b0, 1\uacfc 0\uc758 \ubd84\ud3ec\uc5d0 \ub530\ub77c \ubaa8\ub378 \ud3c9\uac00 \ubc29\ubc95\uc774 \ub2ec\ub77c\uc9c8 \uc218 \uc788\uc74c","fdda62b3":"- Age(\uc57d 20%), Cabin(\uc57d 80%), Embarked(\uc57d 0.2%)\uc758 null data \uc874\uc7ac \ud655\uc778","da8f6057":"### \uce90\uae00\uc5d0 \uc81c\ucd9c\ud558\uae30\n- kaggle.com \uc811\uc18d\n- Commit\n- OUTPUT\n- Submit to Competition\n","9d5c777c":"## 3. Feature Engineering\n- dataset\uc5d0 \uc874\uc7ac\ud558\ub294 null data \ucc44\uc6b0\uae30\n- null data\ub97c \ud3ec\ud568\ud558\ub294 feature\uc758 statistics\ub97c \ucc38\uace0\ud558\uac70\ub098, \ub2e4\ub978 \uc544\uc774\ub514\uc5b4 \ud544\uc694\n- \ubaa8\ub378\uc758 \uc131\ub2a5\uc5d0 \uc601\ud5a5\uc744 \uc8fc\ub294 \uc911\uc694\ud55c \uc791\uc5c5\n- train \ubfd0\ub9cc \uc544\ub2c8\ub77c test dataset\uc5d0\ub3c4 \ub3d9\uc77c\ud558\uac8c \uc801\uc6a9\ud574\uc57c \ud568","162f5cac":"### Cabin\n- NaN \uc774 \uc57d 80%\n- \uc0dd\uc874\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce60 \uc911\uc694\ud55c \uc815\ubcf4\ub97c \uc5bb\uc5b4\ub0b4\uae30\ub294 \uc27d\uc9c0 \uc54a\uc74c\n- \ubaa8\ub378\uc5d0 \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294 \uac83\uc774 \uc88b\uc74c","3667a0d5":"## 4. \ubaa8\ub378 \ub9cc\ub4e4\uae30\n- sklearn \uc0ac\uc6a9\n  - feature engineering, preprocessing, \uc9c0\ub3c4 \ud559\uc2b5 \uc54c\uace0\ub9ac\uc998, \ube44\uc9c0\ub3c4 \ud559\uc2b5 \uc54c\uace0\ub9ac\uc998, \ubaa8\ub378 \ud3c9\uac00, \ud30c\uc774\ud504 \ub77c\uc778 \ub4f1 \uad6c\ud604\n- titanic \ubb38\uc81c\n  - target class : Survived\n    - 0, 1 \ub85c \uc774\ub8e8\uc5b4\uc9c4 binary classification \ubb38\uc81c\n  - train set\uc758 Survived \ud56d\ubaa9\uc744 \uc81c\uc678\ud55c \uc785\ub825\uc744 \uac00\uc9c0\uace0, \ubaa8\ub378\uc744 \ucd5c\uc801\ud654\uc2dc\ucf1c\uc11c \uac01 \uc0d8\ud50c(\ud0d1\uc2b9\uac1d)\uc758 \uc0dd\uc874 \uc720\ubb34\ub97c \ud310\ub2e8\ud558\ub294 \ubaa8\ub378 \ub9cc\ub4e4\uae30\n  - \ubaa8\ub378\uc774 \ud559\uc2b5\ud558\uc9c0 \uc54a\uc740 test set\uc744 \uc785\ub825\uc73c\ub85c \uc8fc\uc5b4\uc11c test set\uc758 \uac01 \uc0d8\ud50c(\ud0d1\uc2b9\uac1d)\uc758 \uc0dd\uc874 \uc720\ubb34 \uc608\uce21","7211c313":"### 3) \uc559\uc0c1\ube14: \uac00\uc911 \ud3c9\uade0\n\n$$\naverage = \\frac{val_1 \\cdot w_1 + val_2 \\cdot w_2 + ... + val_n \\cdot w_n}{\\sum_{i=1}^{n}w_i} \n$$\n\n- rf(0.2), xgb(0.3), lgbm(0.2), cboost(0.2), mlp(0.1)","05935ca3":"- log\ub97c \ucde8\ud558\ub2c8, \ube44\ub300\uce6d\uc131\uc774 \ub9ce\uc774 \uc0ac\ub77c\uc9d0\n- feature engineering \uc801\uc6a9\n- \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a4\uace0, \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ub192\uc774\uae30 \uc704\ud574 feature \ub4e4\uc5d0 \uc5ec\ub7ec \uc870\uc791\uc744 \uac00\ud558\uac70\ub098, \uc0c8\ub85c\uc6b4 feature\ub97c \ucd94\uac00\ud558\ub294 \uc791\uc5c5","1fd2e0bd":"- \uc5b4\ub9b0 \uc544\uc774(Master)\uc640 \uc5ec\uc131\uacfc \uad00\uacc4 \uc788\ub294 Miss, Mrs\uac00 \uc0dd\uc874\ub960\uc774 \ub192\uc74c","f66ec601":"### Embarked\n- \ud0d1\uc2b9\ud55c \ud56d\uad6c\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960 \ud655\uc778","cbe6b6ab":"- distribution\uc774 \ube44\ub300\uce6d (high skewness)\n  - \uc774\ub300\ub85c \ubaa8\ub378\uc5d0 \ub123\uc5b4 \uc904 \uacbd\uc6b0, \ubaa8\ub378\uc774 \uc798\ubabb \ud559\uc2b5\ud560 \uc218 \uc788\uc74c\n  - outlier\uc5d0 \ubbfc\uac10\ud558\uac8c \ubc18\uc751\ud55c\ub2e4\uba74 \uc608\uce21\uc2dc\uc5d0 \uc88b\uc9c0 \ubabb\ud55c \uacb0\uacfc\ub97c \ubd80\ub984\n- outlier\uc758 \uc601\ud5a5\uc744 \uc904\uc774\uae30 \uc704\ud574 Fare\uc5d0 log \uc801\uc6a9\n- pandas DataFrame\uc758 \ud2b9\uc815 \uceec\ub7fc\uc5d0 \uacf5\ud1b5\ub41c \uc791\uc5c5(\ud568\uc218)\uc744 \uc801\uc6a9\ud558\ub294 \uacbd\uc6b0,  map \ub610\ub294 apply \uc0ac\uc6a9\n","b48f81f1":"### 1) \uac1c\ubcc4 \ubaa8\ub378 \ube44\uad50 ","0d9737bc":"### Embarked\ub97c one-hot encoding\n\n","6930ee9c":"- \ud074\ub798\uc2a4\uac00 \ub192\uc744 \uc218\ub85d(1st class) \uc0dd\uc874 \ud655\ub960\uc774 \ub192\uc74c\n  - P1(63%), P2(48%), P3(25%)\n- \uc0dd\uc874\uc5d0 Pclass\uac00 \ud070 \uc601\ud5a5\uc744 \ubbf8\uce5c\ub2e4\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\uc74c\n  - \ubaa8\ub378\uc744 \ub9cc\ub4e4 \ub54c, Pclass feature\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc744 \uac83\uc774\ub77c \ud310\ub2e8\ud560 \uc218 \uc788\uc74c","51e6b30e":"### Initial \uc744 One-hot encoding\uc73c\ub85c \ub9cc\ub4e4\uae30","8848651f":"- Fare\uac00 \uac00\uc7a5 \ud070 \uc601\ud5a5\ub825\uc744 \uac00\uc9d0. \uadf8 \ub4a4\uc5d0 Initial_2, Age_cat, Pclass \uc21c\uc73c\ub85c \uc911\uc694\ub3c4\ub97c \uac00\uc9d0\n- Fare\uac00 \uc911\uc694\ud55c feature\uc77c \uc218 \uc788\ub2e4\uace0 \ud310\ub2e8\uc744 \ub0b4\ub9b4 \uc218\ub3c4 \uc788\uc9c0\ub9cc, \uacb0\uad6d \ubaa8\ub378\uc5d0 \uadc0\uc18d\ub418\ub294 \ud558\ub098\uc758 \uacb0\ub860\uc784. \ud1b5\uacc4\uc801\uc73c\ub85c \ub354 \uc0b4\ud3b4\ubd10\uc57c \ud568\n- \uc880 \ub354 \uc815\ud655\ub3c4 \ub192\uc740 \ubaa8\ub378\uc744 \uc5bb\uae30 \uc704\ud574 feature selection\uc744 \ud560 \uc218\ub3c4 \uc788\uace0, \uc880 \ub354 \ube60\ub978 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c\ub294 feature\ub97c \uc81c\uac00\ud560 \uc218\ub3c4 \uc788\uc74c","3351292c":"#### train, test \uc804\uccb4 \uc14b\uc744 \uc0ac\uc6a9\ud558\uc5ec Age\uc758 null \uac12 \ucc98\ub9ac\n- pandas\uc758 concat\uc744 \uc774\uc6a9\ud558\uc5ec dataframe\uc744 \ud569\uce68\n","f6c816ca":"## Drop columns \n- \ubd88\ud544\uc694\ud55c \uceec\ub7fc\ub4e4 \uc9c0\uc6b0\uae30\n","93a9c811":"### Test Set\uc744 \uc0ac\uc6a9\ud558\uc5ec Prediction\n- \ubaa8\ub378\uc744 \ud559\uc2b5\ud558\uc9c0 \uc54a\uc558\ub358 \ud14c\uc2a4\ud2b8 \uc14b\uc73c\ub85c \uc0dd\uc874 \uc5ec\ubd80 \uc608\uce21\n- \uce90\uae00\uc5d0\uc11c \uc900 \ud30c\uc77c gender_submission.csv \uc744 \uc0ac\uc6a9\ud558\uc5ec \uc81c\ucd9c \uc900\ube44\n","fd8d4f2b":"## CatBoost","c5d16dd0":"- Pclass\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c, Sex\ub3c4 \uc608\uce21 \ubaa8\ub378\uc5d0 \uc911\uc694\ud55c feature \uc784\uc744 \uc54c \uc218 \uc788\uc74c","81acbdf5":"### 2) \uc559\uc0c1\ube14: \ud3c9\uade0\n","e45f22a2":"- \ub098\uc774\uac00 \uc5b4\ub9b4 \uc218\ub85d \uc0dd\uc874 \ud655\ub960\uc774 \ub192\uc74c\n- Age\ub294 \uc911\uc694\ud55c feature \uc784\uc744 \uc54c \uc218 \uc788\uc74c","51f33530":"### Age\uc758 NULL \ucc98\ub9ac\n- Age\uc5d0\ub294 null \ub370\uc774\ud130\uac00 177\uac1c\ub098 \uc874\uc7ac\n- title\uacfc statistics\ub97c \uc0ac\uc6a9\ud558\uc5ec \ucc44\uc6cc\ubcf4\uae30\n  - Miss, Mrr, Mrs \uc0ac\uc6a9\n- pandas\uc758 str.extract()\ub97c \uc0ac\uc6a9\ud558\uc5ec title \ucd94\ucd9c (\uc815\uaddc\ud45c\ud604\uc2dd \uc0ac\uc6a9)","abf5f284":"### Embarked \ubcc0\uacbd\n- S, C, Q\ub85c \uad6c\uc131","b6ba66af":"### Feature Importance\n- \ud559\uc2b5\ub41c \ubaa8\ub378\uc740 feature importance\ub97c \uac00\uc9d0\n- \ub9cc\ub4e0 \ubaa8\ub378\uc774 \uc5b4\ub5a4 feature\uc5d0 \uc601\ud5a5\uc744 \ub9ce\uc774 \ubc1b\ub294\uc9c0 \ud655\uc778\ud560 \uc218 \uc788\uc74c\n- pandas series \uc0ac\uc6a9","50ff814e":"#### test set\uc5d0 \ub300\ud558\uc5ec \uc608\uce21\ud558\uace0, \uacb0\uacfc\ub97c csv\uc5d0 \uc800\uc7a5","6d992392":"- Figure 1: \uac00\uc871 \ud06c\uae30\ub294 1 ~ 11. \ub300\ubd80\ubd84 1\uba85, \uadf8 \ub2e4\uc74c\uc740 2~4\uba85\n- Figure 2, 3: \n  - \uac00\uc871\uc774 4\uba85\uc778 \uacbd\uc6b0 \uc0dd\uc874 \ud655\ub960\uc774 \uac00\uc7a5 \ub192\uc74c\n  - \uac00\uc871 \uc218\uac00 \ub9ce\uc544\uc9c8 \uc218\ub85d \uc0dd\uc874 \ud655\ub960\uc774 \ub0ae\uc544\uc9d0\n  - \uac00\uc871 \uc218\uac00 \ub108\ubb34 \uc791\uac70\ub098, \ub108\ubb34 \ucee4\ub3c4 \uc0dd\uc874 \ud655\ub960\uc774 \ub0ae\uc74c\n  - \uac00\uc871 \uc218 3~4\uba85\uc774 \uc0dd\uc874 \ud655\ub960\uc774 \ub192\uc74c","44b16749":"##### Features\n- pclass : \ud074\ub798\uc2a4, Integer\n- age : \ub098\uc774, Integer\n- sibsp : \ud615\uc81c\uc640 \ubc30\uc6b0\uc790\uc758 \uc218, Integer\n- parch : \ubd80\ubaa8\uc640 \uc544\uc774\uc758 \uc218, Integer\n- fare : \ud0d1\uc2b9\ub8cc, Float\n- survived : \uc0dd\uc874\uc5ec\ubd80, Integer (target label)\n","f6f72764":"- \uc0dd\uc874\ub960\uc774 \ube44\uc2b7","134bbe0e":"## XGBoost","407c8fa8":"- [\ucc38\uace0] matplotlib style\n  - https:\/\/tonysyu.github.io\/raw_content\/matplotlib-style-gallery\/gallery.html","91b94bf6":"### \uc791\uc5c5 \ub0b4\uc6a9\n- 1) \ub370\uc774\ud130\uc14b \ud655\uc778\n  - null data \uc640 \uac19\uc740 \ub370\uc774\ud130\ub97c \ud655\uc778 \ubc0f \uc218\uc815\n- 2) \ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d(Exploratory Data Analysis)\n  - \uc5ec\ub7ec feature\ub4e4\uc744 \uac1c\ubcc4\uc801\uc73c\ub85c \ubd84\uc11d\n  - feature\ub4e4 \uac04\uc758 \uc0c1\uad00 \uad00\uacc4 \ud655\uc778\n  - \uc5ec\ub7ec \uc2dc\uac01\ud654 \ub3c4\uad6c\ub4e4\uc744 \uc0ac\uc6a9\n- 3) Feature Engineering\n  - \ubaa8\ub378\uc744 \ub9cc\ub4e4\uae30 \uc804, \ubaa8\ub378 \uc131\ub2a5\uc744 \ub192\uc774\uae30 \uc704\ud55c feature\ub4e4\uc744 engineering\n  - one-hot encoding, class\ub85c \ub098\ub204\uae30, text \ub370\uc774\ud130 \ucc98\ub9ac \ub4f1\n- 4) Model \ub9cc\ub4e4\uae30\n  - sklearn\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub378 \ub9cc\ub4e4\uae30\n  - tensorflow, pytorch \ub4f1 \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c \uc0ac\uc6a9\ub3c4 \uac00\ub2a5\n- 5) \ubaa8\ub378 \ud559\uc2b5 \ubc0f \uc608\uce21\n  - train set \uc744 \uac00\uc9c0\uace0 \ubaa8\ub378 \ud559\uc2b5\n  - test set\uc744 \uc0ac\uc6a9\ud558\uc5ec prediction\n- 6) \ubaa8\ub378 \ud3c9\uac00\n  - \ud559\uc2b5\ub41c \ubaa8\ub378\uc5d0 \ub300\ud55c \uc608\uce21 \uc131\ub2a5 \ud3c9\uac00","8d1beb72":"- [\ucc38\uace0] plotly","b3c9b065":"- Class\uac00 \ub192\uc744 \uc218\ub85d \ub098\uc774 \ub9ce\uc740 \uc0ac\ub78c\uc758 \ube44\uc911\uc774 \ucee4\uc9d0"}}