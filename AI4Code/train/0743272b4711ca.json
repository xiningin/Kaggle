{"cell_type":{"7b20f655":"code","f4cd1144":"code","f2014e7f":"code","7c62e8c3":"code","fb336938":"code","3d0dcc4d":"code","a1f7613d":"code","3db6560e":"code","56bcb90f":"code","2d949d41":"code","fd1528ad":"code","92f2061c":"code","12bc6319":"code","d0ba340e":"code","28566220":"code","2941fcce":"code","9a6ef93b":"code","deacd9ba":"code","e9b2b7a0":"code","68c5be1a":"code","b4c1990f":"code","1654412e":"code","d26c5b25":"code","dce53558":"code","78873f1b":"code","10c6ecc5":"code","f42b5596":"code","9c51f217":"code","3b177cb8":"code","09b7769a":"code","58c9ce2c":"code","3f2b1498":"code","7311ba7a":"markdown","3bb2b61c":"markdown","daef743d":"markdown"},"source":{"7b20f655":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f4cd1144":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\nhistorical= pd.read_csv(\"..\/input\/historical_transactions.csv\")\nmerchant =  pd.read_csv(\"..\/input\/merchants.csv\")\nnew_merchant =  pd.read_csv(\"..\/input\/new_merchant_transactions.csv\")","f2014e7f":"print(historical.merchant_id.value_counts()[:10])","7c62e8c3":"#best merchant_id\ntmp = historical[historical.merchant_id == 'M_ID_00a6ca8a8a']\n#card_id from best merchandisor\ntmp.card_id.value_counts()\ntmp11 = tmp[tmp.card_id == 'C_ID_5846bc1b5b']\ntrain.card_id \nhistorical.head()\n#train.card_id.str.slice()\n","fb336938":"print(train.feature_1.value_counts())\nprint(train.feature_2.value_counts())\nprint(train.feature_3.value_counts())","3d0dcc4d":"print(pd.crosstab(historical.category_1,historical.category_3).apply(lambda r: r\/r.sum(), axis=1))\nprint(pd.crosstab(historical.category_2,historical.category_3).apply(lambda r: r\/r.sum(), axis=1))\nprint(pd.crosstab(historical.category_1,historical.category_2).apply(lambda r: r\/r.sum(), axis=1))","a1f7613d":"#best count buyers\n\nfor i,idx in enumerate(historical.card_id.value_counts()[:10].index):\n    if i == 0 :\n        most10 = historical[historical.card_id ==idx]\n    else:\n        most10 = most10.append(historical[historical.card_id ==idx])\n#check if there is specific city who has power buyers        \nmost10.city_id.value_counts()[:10]        \n\n","3db6560e":"historical.city_id.value_counts()","56bcb90f":"#fisrt of all lets check first power buyer\nmost1 = historical[historical.card_id =='C_ID_3d3dfdc692']\nprint(most1.city_id.value_counts()) \nprint(most1.columns)","2d949d41":"import datetime\nmost1.index = most1.purchase_date\nmost1.index = pd.to_datetime(most1.index, format='%Y-%m-%d %H:%M:%S.%f')\nmost1 = most1.sort_index()","fd1528ad":"most1['month_lag'].tail()","92f2061c":"most1[['month_lag','purchase_amount']].groupby(by='month_lag').mean().plot()\n","12bc6319":"most1[['month_lag','purchase_amount']].groupby(by='month_lag').count().plot()\n    \n\n\n","d0ba340e":"#d = pd.date_range(start=most1.index.min().date(), end=most1.index.max().date(), freq='M').tolist()   \nd = most1.index.strftime('%Y-%m').unique()\nfor month in d:\n    plt.scatter(x=most1[month].month_lag,y=most1[month].merchant_category_id)\n    #most1[month]['merchant_category_id'].plot()\n","28566220":"\n\n#d = pd.date_range(start=most1.index.min().date(), end=most1.index.max().date(), freq='M').tolist()   \nd = most1.index.strftime('%Y-%m').unique()\nfor month in d:\n    plt.scatter(x=most1[month].month_lag,y=most1[month].installments)\n    #most1[month]['merchant_category_id'].plot()\n","2941fcce":"print(len(historical.card_id.unique()))\nprint(len(train.card_id.unique()))","9a6ef93b":"#card_id that can be used for modeling\ntrain_card_id = set(train.card_id.unique()).intersection(set(historical.card_id.unique())) ","deacd9ba":"test_card_id = set(historical.card_id.unique()).intersection(set(test.card_id.unique())) ","e9b2b7a0":"train_historical = historical[historical.card_id == train_card_id]","68c5be1a":"train_history = historical[historical.card_id.isin(list(train.index))]","b4c1990f":"a = historical[historical.card_id =='C_ID_0ed4255e62' ]","1654412e":"print(a.category_1.value_counts())\nprint(a.category_2.value_counts())\nprint(a.category_3.value_counts())\n\n","d26c5b25":"train[train.card_id == 'C_ID_0ed4255e62']","dce53558":"train_merged = train.merge(train_history,on=\"card_id\",how = \"outer\")","78873f1b":"pd.crosstab(train_merged.feature_3,train_merged.category_1)","10c6ecc5":"pd.crosstab(train_merged.feature_2,train_merged.category_3)","f42b5596":"merchant.columns","9c51f217":"merchant.loc[(merchant.merchant_id.value_counts() == 1).values]","3b177cb8":"train_merchant_id =  set(train_merged.merchant_id.unique()).intersection(set(merchants.merchant_id.unique())) ","09b7769a":"historical[historical.card_id == 'C_ID_a4e600deef']","58c9ce2c":"new_merchant.head(30)\nnew_merchant.month_lag.value_counts()\nhistorical.merchant_id.value_counts()\nhistorical.merchant_id.value_counts()[:10].index\nfor i,idx in enumerate(historical.merchant_id.value_counts()[:10].index):\n    if i == 0 :\n        most_merchant10 = historical[historical.merchant_id ==idx]\n    else:\n        most_merchant10 = most_merchant10.append(historical[historical.merchant_id ==idx])\npd.crosstab(most_merchant10.merchant_id,most_merchant10.month_lag)\npd.crosstab(most1.merchant_id,most1.month_lag)","3f2b1498":"historical.\n","7311ba7a":"# Loading Training & Historical Data","3bb2b61c":"## feature1  <> category 2\n## feature2 <> category 3\n## feature3 <> category 1","daef743d":"# Check first merchant who has the most client"}}