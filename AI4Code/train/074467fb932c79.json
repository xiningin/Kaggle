{"cell_type":{"ba298ed1":"code","84c7f40e":"code","dec4a89e":"code","4be586a9":"code","3bcf19bb":"code","f563f146":"code","d4fbe70f":"markdown","c14212d4":"markdown","2335aa91":"markdown","23973bf1":"markdown","973298c7":"markdown","3dc2da0c":"markdown","18d903dd":"markdown"},"source":{"ba298ed1":"%%writefile boilergoose.py\n\nimport dataclasses\nfrom dataclasses import dataclass\nfrom typing import List, NamedTuple, Set, Dict, Optional, Tuple, Callable\nimport numpy as np\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Action\nfrom abc import ABC, abstractmethod\nimport sys\nimport traceback\n\n\ntrans_action_map: Dict[Tuple[int, int], Action] = {\n    (-1, 0): Action.NORTH,\n    (1, 0): Action.SOUTH,\n    (0, 1): Action.EAST,\n    (0, -1): Action.WEST,\n}\n\n\nclass Pos(NamedTuple):\n    x: int\n    y: int\n\n    def __repr__(self):\n        return f\"[{self.x}:{self.y}]\"\n\n\n@dataclass\nclass Goose:\n    head: Pos = dataclasses.field(init=False)\n    poses: List[Pos]\n\n    def __post_init__(self):\n        self.head = self.poses[0]\n\n    def __repr__(self):\n        return \"Goose(\" + \"-\".join(map(str, self.poses)) + \")\"\n\n    def __iter__(self):\n        return iter(self.poses)\n\n    def __len__(self):\n        return len(self.poses)\n\n\ndef field_idx_to_pos(field_idx: int, *, num_cols: int, num_rows: int) -> Pos:\n    x = field_idx \/\/ num_cols\n    y = field_idx % num_cols\n\n    if not (0 <= x < num_rows and 0 <= y < num_cols):\n        raise ValueError(\"Illegal field_idx {field_idx} with x={x} and y={y}\")\n\n    return Pos(x, y)\n\n\nclass Geometry:\n    def __init__(self, size_x, size_y):\n        self.size_x = size_x\n        self.size_y = size_y\n\n    @property\n    def shape(self) -> Tuple[int, int]:\n        return (self.size_x, self.size_y)\n\n    def prox(self, pos: Pos) -> Set[Pos]:\n        return {\n            self.translate(pos, direction)\n            for direction in [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        }\n\n    def translate(self, pos: Pos, diff: Tuple[int, int]) -> Pos:\n        x, y = pos\n        dx, dy = diff\n        return Pos((x + dx) % self.size_x, (y + dy) % self.size_y)\n\n    def trans_to(self, pos1: Pos, pos2: Pos) -> Tuple[int, int]:\n        dx = pos2.x - pos1.x\n        dy = pos2.y - pos1.y\n\n        if dx <= self.size_x \/\/ 2:\n            dx += self.size_x\n\n        if dx > self.size_x \/\/ 2:\n            dx -= self.size_x\n\n        if dy <= self.size_y \/\/ 2:\n            dy += self.size_y\n\n        if dy > self.size_y \/\/ 2:\n            dy -= self.size_y\n\n        return (dx, dy)\n\n    def action_to(self, pos1, pos2):\n        diff = self.trans_to(pos1, pos2)\n\n        result = trans_action_map.get(diff)\n\n        if result is None:\n            raise ValueError(f\"Cannot step from {pos1} to {pos2}\")\n\n        return result","84c7f40e":"%%writefile -a boilergoose.py\n\n@dataclass\nclass State:\n    food: Set[Pos]\n    geese: Dict[int, Goose]\n    index: int\n    step: int\n    geo: Geometry\n\n    field: np.ndarray = dataclasses.field(init=False)\n    my_goose: Goose = dataclasses.field(init=False)\n    danger_poses: Set[Pos] = dataclasses.field(init=False)\n\n    def __post_init__(self):\n        self.field = np.full(fill_value=0, shape=self.geo.shape)\n        for goose in self.geese.values():\n            for pos in goose.poses[:-1]:  # not considering tail!\n                self.field[pos.x, pos.y] = 1\n                \n            if self.geo.prox(goose.head) & self.food:\n                tail = goose.poses[-1]\n                self.field[tail.x, tail.y] = 1\n                \n\n        self.my_goose = self.geese[self.index]\n\n        self.danger_poses = {\n            pos\n            for i, goose in self.geese.items()\n            if i != self.index\n            for pos in self.geo.prox(goose.head)\n        }\n\n    @classmethod\n    def from_obs_conf(cls, obs, conf):\n        num_cols = conf[\"columns\"]\n        num_rows = conf[\"rows\"]\n        step = obs[\"step\"]\n        index = obs[\"index\"]\n\n        geese = {\n            idx: Goose(\n                poses=[\n                    field_idx_to_pos(idx, num_cols=num_cols, num_rows=num_rows)\n                    for idx in goose_data\n                ]\n            )\n            for idx, goose_data in enumerate(obs[\"geese\"])\n            if goose_data\n        }\n\n        food = {\n            field_idx_to_pos(idx, num_cols=num_cols, num_rows=num_rows)\n            for idx in obs[\"food\"]\n        }\n\n        return cls(\n            food=food,\n            geese=geese,\n            index=index,\n            step=step,\n            geo=Geometry(size_x=num_rows, size_y=num_cols),\n        )\n\n    def __repr__(self):\n        return (\n            f\"State(step:{self.step}, index:{self.index}, Geese(\"\n            + \",\".join(f\"{idx}:{len(goose.poses)}\" for idx, goose in self.geese.items())\n            + f\"), food:{len(self.food)})\"\n        )","dec4a89e":"%%writefile -a boilergoose.py\n\n@dataclass\nclass FloodfillResult:\n    field_dist: np.ndarray\n    frontiers: List[List[Tuple[int, int]]]\n\n\ndef flood_fill(is_occupied: np.ndarray, seeds: List[Pos]) -> FloodfillResult:\n    \"\"\"\n    Flood will start with distance 0 at seeds and only flow where is_occupied[x,y]==0\n    \"\"\"\n    size_x, size_y = is_occupied.shape\n\n    field_dist = np.full(fill_value=-1, shape=(size_x, size_y))\n\n    frontier = [(s.x, s.y) for s in seeds]\n\n    frontiers = [frontier]\n\n    for seed in seeds:\n        field_dist[seed] = 0\n\n    dist = 1\n\n    while frontier:\n        new_frontier: List[Tuple[int, int]] = []\n        for x, y in frontier:\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_x = (x + dx) % size_x\n                new_y = (y + dy) % size_y\n                if is_occupied[new_x, new_y] == 0 and field_dist[new_x, new_y] == -1:\n                    field_dist[new_x, new_y] = dist\n                    new_frontier.append((new_x, new_y))\n        frontier = new_frontier\n        frontiers.append(frontier)\n        dist += 1\n\n    return FloodfillResult(field_dist=field_dist, frontiers=frontiers)\n\n\ndef get_dist(\n    floodfill_result: FloodfillResult, test_func: Callable[[Tuple[int, int]], bool]\n) -> Optional[int]:\n    for dist, frontier in enumerate(floodfill_result.frontiers):\n        for pos in frontier:\n            if test_func(pos):\n                return dist\n\n    return None","4be586a9":"%%writefile -a boilergoose.py\n\nclass BaseAgent(ABC):\n    def __init__(self):\n        self.last_pos: Optional[Pos] = None\n\n    def __call__(self, obs, conf):\n        try:\n            state = State.from_obs_conf(obs, conf)\n\n            next_pos = self.step(state)\n\n            action = state.geo.action_to(state.my_goose.head, next_pos)\n\n            self.last_pos = state.my_goose.head\n\n            return action.name\n        except Exception as exc:\n            traceback.print_exc(file=sys.stderr)\n            raise\n\n    @abstractmethod\n    def step(self, state: State) -> Pos:\n        \"\"\"\n        return: next position\n\n        Implement this\n        \"\"\"\n        pass\n\n    def next_poses(self, state: State) -> Set[Pos]:\n        head_next_poses = state.geo.prox(state.my_goose.head)\n\n        result = {\n            pos\n            for pos in head_next_poses\n            if pos != self.last_pos and state.field[pos] == 0\n        }\n\n        return result","3bcf19bb":"%%writefile -a boilergoose.py\n\nfrom operator import itemgetter\nimport random\n\nclass FloodGoose(BaseAgent):\n    def __init__(self, min_length=13):\n        super().__init__()\n        self.min_length = min_length\n        \n    def step(self, state):\n        result = None\n        \n        if len(state.my_goose) < self.min_length:\n            result = self.goto(state, lambda pos:pos in state.food)\n        elif len(state.my_goose) >= 3:\n            result = self.goto(state, lambda pos:pos==state.my_goose.poses[-1])\n            \n        if result is None:\n            result = self.random_step(state)\n            \n        return result\n    \n    def goto(self, state, test_func):\n        result = None\n        \n        pos_dists = {}\n        for pos in self.next_poses(state):\n            flood = flood_fill(state.field, [pos])\n            dist = get_dist(flood, test_func)\n            if dist is not None:\n                pos_dists[pos] = dist\n\n        if pos_dists:\n            closest_pos, _ = min(pos_dists.items(), key=itemgetter(1))\n\n            if closest_pos not in state.danger_poses:\n                result = closest_pos\n                \n        return result\n        \n    \n    def random_step(self, state):\n        next_poses = self.next_poses(state) - state.danger_poses - state.food\n        if not next_poses:\n            next_poses = self.next_poses(state) - state.danger_poses\n\n            if not next_poses:\n                next_poses = self.next_poses(state)\n\n                if not next_poses:\n                    next_poses = state.geo.prox(state.my_goose.head)\n                        \n        result = random.choice(list(next_poses))\n        \n        return result\n    \n\nagent = FloodGoose(min_length=8)\n\ndef call_agent(obs, conf):\n    return agent(obs, conf)","f563f146":"%run boilergoose.py\n\nfrom kaggle_environments import make\n\nenv = make(\"hungry_geese\", debug=True)\nenv.reset()\nenv.run([FloodGoose(), FloodGoose(), FloodGoose(), FloodGoose()])\n\nenv.render(mode=\"ipython\", width=8*80, height=7*80)","d4fbe70f":"# BaseAgent class\n\nThe `BaseAgent` class can be subclassed for convenience:","c14212d4":"# Flood fill\n\nThe flood fill algorithm will calculate what is reachable for all of our next possible steps:","2335aa91":"# Say hello to BoilerGoose\n\nAnd finally, here comes our Flood-fill-based BoilerGoose. It tries to maintain a certain length and follows it's butt otherwise.","23973bf1":"# Goose!\n\nAnd here we goo....oooose....!","973298c7":"# State class\n\nThe observation and the configuration are parsed into a custom class format for convenience and for precalculating information:","3dc2da0c":"First some library code","18d903dd":"This is a structure for a flood-fill based algorithm. I think it may be developed into something useful.\n\nWith this structure it should be easy to prevent the Goose from dying in dead end, but this is left as an exercise for the reader \ud83d\ude00"}}