{"cell_type":{"9e953511":"code","533e22a2":"code","3548ad95":"code","dbab19de":"code","7ade30b1":"code","bf331d03":"code","98348ff0":"code","f2fb91c7":"code","d16e4849":"code","9f5ed1e5":"code","4cec2d2e":"code","e0c9ff3f":"code","881a6967":"code","6492ea14":"code","19a8c180":"code","af14b31f":"code","71449276":"code","3a7ea064":"code","2aaff620":"code","8f7b4683":"code","0281259f":"code","545e1a80":"code","f93cd2d0":"code","d42ec8be":"code","34425d3e":"code","a7e4790b":"code","fe88c40f":"code","c0e4a920":"markdown","85857562":"markdown","e541e261":"markdown","c744520e":"markdown","6ba14b41":"markdown","2dda5baf":"markdown","b548d2d5":"markdown","d9f4b330":"markdown"},"source":{"9e953511":"import numpy as np \nimport pandas as pd \n\ndftrain_raw = pd.read_csv('..\/input\/train.csv')\ndftest_raw = pd.read_csv('..\/input\/test.csv')\n\ndftrain_raw.head(10)","533e22a2":"%matplotlib inline\n%config InlineBackend.figure_format = 'png'\nax = dftrain_raw['Survived'].value_counts().plot(kind = 'bar',\n     figsize = (12,8),fontsize=15,rot = 0)\nax.set_ylabel('Counts',fontsize = 15)\nax.set_xlabel('Survived',fontsize = 15)","3548ad95":"%matplotlib inline\n%config InlineBackend.figure_format = 'png'\nax = dftrain_raw['Age'].plot(kind = 'hist',bins = 20,color= 'purple',\n                    figsize = (12,8),fontsize=15)\n\nax.set_ylabel('Frequency',fontsize = 15)\nax.set_xlabel('Age',fontsize = 15)","dbab19de":"%matplotlib inline\n%config InlineBackend.figure_format = 'svg'\nax = dftrain_raw.query('Survived == 0')['Age'].plot(kind = 'density',\n                      fontsize=10)\ndftrain_raw.query('Survived == 1')['Age'].plot(kind = 'density',\n                      fontsize=10)\nax.legend(['Survived==0','Survived==1'],fontsize = 10)\nax.set_ylabel('Density',fontsize = 10)\nax.set_xlabel('Age',fontsize = 10)","7ade30b1":"%matplotlib inline\n%config InlineBackend.figure_format = 'svg'\nax = dftrain_raw['Sex'].value_counts(dropna= False).plot(kind = 'bar',\n     fontsize=15,rot = 0)\n\nax.set_ylabel('Count',fontsize = 15)\nax.set_xlabel('Sex',fontsize = 15)\n","bf331d03":"# \u6570\u636e\u9884\u5904\u7406\ndef preprocessing(dfdata):\n\n    dfresult= pd.DataFrame()\n\n    #Pclass\n    dfPclass = pd.get_dummies(dfdata['Pclass'])\n    dfPclass.columns = ['Pclass_' +str(x) for x in dfPclass.columns ]\n    dfresult = pd.concat([dfresult,dfPclass],axis = 1)\n\n    #Sex\n    dfSex = pd.get_dummies(dfdata['Sex'])\n    dfresult = pd.concat([dfresult,dfSex],axis = 1)\n\n    #Age\n    dfresult['Age'] = dfdata['Age'].fillna(dfdata['Age'].mean())\n    dfresult['Age_null'] = pd.isna(dfdata['Age']).astype('int32')\n\n    #SibSp,Parch,Fare\n    dfresult['SibSp'] = dfdata['SibSp']\n    dfresult['Parch'] = dfdata['Parch']\n    dfresult['Fare'] = dfdata['Fare']\n\n    #Carbin\n    dfresult['Cabin_null'] =  pd.isna(dfdata['Cabin']).astype('int32')\n\n    #Embarked\n    dfEmbarked = pd.get_dummies(dfdata['Embarked'],dummy_na=True)\n    dfEmbarked.columns = ['Embarked_' + str(x) for x in dfEmbarked.columns]\n    dfresult = pd.concat([dfresult,dfEmbarked],axis = 1)\n    \n    return(dfresult)\n\nx_train = preprocessing(dftrain_raw)\ny_train = dftrain_raw['Survived'].values\n\nx_test = preprocessing(dftest_raw)","98348ff0":"print('x_train.shape:',x_train.shape)\nprint('x_test.shape:',x_test.shape)","f2fb91c7":"from keras import models,layers\nfrom keras import backend as K\nK.clear_session()\n\nmodel = models.Sequential()\nmodel.add(layers.Dense(64,activation = 'relu',input_shape=(15,)))\nmodel.add(layers.Dense(64,activation = 'relu' ))\nmodel.add(layers.Dense(64,activation = 'relu' ))\nmodel.add(layers.Dense(64,activation = 'relu' ))\nmodel.add(layers.Dense(1,activation = 'sigmoid' ))\n\n# \u4e8c\u5206\u7c7b\u95ee\u9898\u9009\u62e9\u4e8c\u5143\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\nmodel.compile(optimizer='adam',\n            loss='binary_crossentropy',\n            metrics=['accuracy'])\nmodel.summary()","d16e4849":"history = model.fit(x_train,y_train,\n                    batch_size= 64,\n                    epochs= 150,\n                    validation_split=0.2 #\u5206\u5272\u4e00\u90e8\u5206\u8bad\u7ec3\u6570\u636e\u7528\u4e8e\u9a8c\u8bc1\n                   )\n\nimport pandas as pd \ndfhistory = pd.DataFrame(history.history)\ndfhistory.index = range(1,len(dfhistory) + 1)\ndfhistory.index.name = 'epoch'\ndfhistory ","9f5ed1e5":"history = model.fit(x_train,y_train,\n                    batch_size= 64,\n                    epochs= 150,\n                    validation_data =(x_train,y_train) #\u91cd\u65b0\u7528\u5168\u90e8\u6837\u672c\u8fdb\u884c\u8bad\u7ec3\n                   )","4cec2d2e":"import pandas as pd \ndfhistory = pd.DataFrame(history.history)\ndfhistory.index = range(1,len(dfhistory) + 1)\ndfhistory.index.name = 'epoch'","e0c9ff3f":"dfhistory","881a6967":"import matplotlib.pyplot as plt\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'svg'\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(loss) + 1)\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","6492ea14":"import matplotlib.pyplot as plt\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'svg'\n\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'bo', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()","19a8c180":"# \u8f93\u51fa\u6982\u7387\nmodel.predict(x_test[0:5])","af14b31f":"# \u8f93\u51fa\u7c7b\u522b\nmodel.predict_classes(x_train[0:5])","71449276":"y_test_pred = model.predict_classes(x_test)\ny_test_pred","3a7ea064":"dfresult = pd.DataFrame()\ndfresult['PassengerId'] = dftest_raw['PassengerId']\ndfresult['Survived'] = y_test_pred\n\ndfresult.head(10)\ndfresult.index = range(1,len(dfresult) + 1)\n\ndfresult.to_csv('submission.csv',index = None)","2aaff620":"!head submission.csv","8f7b4683":"# \u4fdd\u5b58\u6a21\u578b\u7ed3\u6784\njson_str = model.to_json()\nyaml_str = model.to_yaml()\n\n#\u4fdd\u5b58\u6a21\u578b\u6743\u91cd\n#model.save_weights('model_weights.h5')\n\n# \u6062\u590d\u6a21\u578b\u7ed3\u6784\n#model_json = models.model_from_json(json_str)\n#model_json.compile(optimizer='adam',\n#            loss='binary_crossentropy',\n#            metrics=['accuracy'])\n# \u52a0\u8f7d\u6743\u91cd\n#model_json.load_weights('model_weights.h5')\n\n#model_json.evaluate(x_train,y_train)","0281259f":"!pip install kaggle","545e1a80":"!pip install --upgrade pip ","f93cd2d0":"import json\nj = {\"username\":\"lyhue1991\",\"key\":\"783423432ed3418189b6c\"}","d42ec8be":"with open('\/tmp\/.kaggle\/kaggle.json','w') as f:\n    json.dump(j,f)","34425d3e":"!kaggle competitions submit -c titanic -f submission.csv -m \"give me seven\"","a7e4790b":"!kaggle config view","fe88c40f":"!kaggle kernels list ","c0e4a920":"**4\uff0c\u8bc4\u4f30\u6a21\u578b**","85857562":"**2\uff0c\u6784\u5efa\u6a21\u578b**","e541e261":"**1\uff0c\u51c6\u5907\u6570\u636e**","c744520e":"**6\uff0c\u4fdd\u5b58\u6a21\u578b**","6ba14b41":"**5\uff0c\u4f7f\u7528\u6a21\u578b**","2dda5baf":"**3\uff0c\u8bad\u7ec3\u6a21\u578b**","b548d2d5":"### \u4e00\uff0c\u7ed3\u6784\u5316\u6570\u636e\u8303\u4f8b\u2014\u2014Titanic\u751f\u5b58\u9884\u6d4b","d9f4b330":"\u5b57\u6bb5\u8bf4\u660e\uff1a\n\nSurvived:0\u4ee3\u8868\u6b7b\u4ea1\uff0c1\u4ee3\u8868\u5b58\u6d3b\u3010y\u6807\u7b7e\u3011\n\nPclass:\u4e58\u5ba2\u6240\u6301\u7968\u7c7b\uff0c\u6709\u4e09\u79cd\u503c(1,2,3) \u3010\u8f6c\u6362\u6210onehot\u7f16\u7801\u3011\n\nName:\u4e58\u5ba2\u59d3\u540d \u3010\u820d\u53bb\u3011\n\nSex:\u4e58\u5ba2\u6027\u522b \u3010\u8f6c\u6362\u6210bool\u7279\u5f81\u3011\n\nAge:\u4e58\u5ba2\u5e74\u9f84(\u6709\u7f3a\u5931)  \u3010\u6570\u503c\u7279\u5f81\uff0c\u6dfb\u52a0\u201c\u5e74\u9f84\u662f\u5426\u7f3a\u5931\u201d\u4f5c\u4e3a\u8f85\u52a9\u7279\u5f81\u3011\n\nSibSp:\u4e58\u5ba2\u5144\u5f1f\u59d0\u59b9\/\u914d\u5076\u7684\u4e2a\u6570(\u6574\u6570\u503c) \u3010\u6570\u503c\u7279\u5f81\u3011\n\nParch:\u4e58\u5ba2\u7236\u6bcd\/\u5b69\u5b50\u7684\u4e2a\u6570(\u6574\u6570\u503c)\u3010\u6570\u503c\u7279\u5f81\u3011\n\nTicket:\u7968\u53f7(\u5b57\u7b26\u4e32)\u3010\u820d\u53bb\u3011\n\nFare:\u4e58\u5ba2\u6240\u6301\u7968\u7684\u4ef7\u683c(\u6d6e\u70b9\u6570\uff0c0-500\u4e0d\u7b49) \u3010\u6570\u503c\u7279\u5f81\u3011\n\nCabin:\u4e58\u5ba2\u6240\u5728\u8239\u8231(\u6709\u7f3a\u5931) \u3010\u6dfb\u52a0\u201c\u6240\u5728\u8239\u8231\u662f\u5426\u7f3a\u5931\u201d\u4f5c\u4e3a\u8f85\u52a9\u7279\u5f81\u3011\n\nEmbarked:\u4e58\u5ba2\u767b\u8239\u6e2f\u53e3:S\u3001C\u3001Q(\u6709\u7f3a\u5931)\u3010\u8f6c\u6362\u6210onehot\u7f16\u7801\uff0c\u56db\u7ef4\u5ea6 S,C,Q,nan\u3011"}}