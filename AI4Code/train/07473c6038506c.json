{"cell_type":{"d8f2d5c9":"code","8006a987":"code","567fd960":"code","2ae720ff":"code","b1db501d":"code","4542db24":"code","54c0166b":"code","1a9c04f5":"code","2a593b57":"code","e544cba9":"code","05cbd849":"code","80e41db6":"code","f58a4fd2":"code","4de3d587":"code","ab8a1413":"code","c7335ae6":"code","86605de1":"code","665eaf1e":"code","c0abecb1":"code","d107b47b":"code","95bc0a53":"code","889f1225":"code","946b1587":"code","88b740c4":"code","73c8ee07":"code","7b1b36d8":"code","ab8dacc8":"code","2a3637ab":"code","261dfed1":"code","235d8ab8":"code","596ec308":"code","2c8380c0":"code","bcddc87b":"code","aa0edb3d":"code","c6cea36f":"code","b3a875d4":"code","0e21d1ed":"code","4c9cb20f":"code","fe30d618":"code","462183ab":"code","b67cfcad":"code","5e3b59ff":"code","63926eb0":"code","a95039b9":"code","a62b7bdf":"code","21318a23":"code","4680b709":"code","f74634ce":"code","91db3db6":"code","c14b37c4":"code","b52384f0":"code","26337c24":"code","3b44449a":"code","fbb57ec8":"code","0b4e96f9":"code","1f1b09b3":"code","ddab42d3":"code","4aa21ab2":"code","c97afcd7":"code","1c1f5120":"code","0b714fa2":"code","054eafea":"code","783dc50d":"code","eedc15c1":"code","278ae5f2":"code","662d268e":"code","d1503ea2":"code","5074ee28":"code","2d4fa3d8":"code","29da0299":"code","cb313f81":"code","6d6480cf":"code","0f2c9ab3":"code","68ce1286":"code","da81c6a1":"code","a874bd45":"code","8fa1f36a":"code","9e0e950c":"code","c1034af3":"code","a656574e":"code","9bd0a71a":"code","b53a828f":"code","d1bf2d8d":"code","9bb998f5":"code","4fd4a271":"code","7c4dbfd3":"code","d8bf0027":"code","269d2037":"code","153524d8":"code","38e03731":"code","a3bfdca5":"code","f3d82810":"code","d18347ab":"code","e858b7bf":"code","6d20e151":"code","d6e408d8":"code","be9ed5c1":"code","3eed4929":"code","0fa56a20":"code","f8aad4ac":"markdown","8a8272a3":"markdown","0ae46b08":"markdown","04e0491e":"markdown","8cfa2bc0":"markdown","97ed0903":"markdown","20c11a46":"markdown","5ce706bc":"markdown","363a580b":"markdown","3805b1ad":"markdown","b307c048":"markdown","7134ffa9":"markdown","38ad80d3":"markdown","660a85c3":"markdown","f713294e":"markdown","32378c79":"markdown","b1c80e34":"markdown","8912082b":"markdown","c2fc9ff6":"markdown","8d36cc80":"markdown","98e02c19":"markdown","2967f23e":"markdown","9c703078":"markdown","70f42ac0":"markdown","61c7ca99":"markdown","73a426fa":"markdown","09042afd":"markdown","3c730f85":"markdown","a184553c":"markdown","11dded05":"markdown","18bf6bfc":"markdown","55c6de52":"markdown","e1e18045":"markdown","21d0e4f0":"markdown","3a498ad8":"markdown","0282e964":"markdown","8966825e":"markdown","8b003831":"markdown","6ad37ced":"markdown","e271741e":"markdown","bb6083e1":"markdown","dc7aff41":"markdown","b5acae02":"markdown","d16adc40":"markdown","9cb52c83":"markdown","be3ee5a7":"markdown","52a9733c":"markdown","73e4d45b":"markdown","1d08d6d7":"markdown","fc8b9741":"markdown","1cc3b57f":"markdown","ed2913f6":"markdown","2009401d":"markdown","970f5811":"markdown","64880c15":"markdown","cbce21e0":"markdown","cda679f2":"markdown","702ebb61":"markdown","b5ddf470":"markdown"},"source":{"d8f2d5c9":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot\nfrom plotly.subplots import make_subplots\n\nimport cufflinks as cf\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","8006a987":"df_matches = pd.read_csv('\/kaggle\/input\/ipl\/matches.csv')\ndf_deliveries = pd.read_csv('\/kaggle\/input\/ipl\/deliveries.csv')","567fd960":"df_matches.head()","2ae720ff":"#checking info\ndf_matches.info()","b1db501d":"#describing the data\ndf_matches.describe()","4542db24":"#visuvalising the  null values\nplt.figure(figsize=(10,8))\nsns.heatmap(df_matches.isnull())\nplt.title('Heatmap for checking Null Values')\nplt.show()","54c0166b":"# checking for any NaN values in rows\ndf_matches.isna().any()","1a9c04f5":"#getting sum of null values\ndf_matches.isnull().sum().sort_values(ascending=False)","2a593b57":"# get the number of missing data points per column\nmissing_values_count = df_matches.isnull().sum()\ntotal_cells = np.product(df_matches.shape)\ntotal_missing = missing_values_count.sum()\n\n# percent of data that is missing\n\npercent_missing = (total_missing\/total_cells) * 100\nprint(\"Percentage of missing : {}\".format(percent_missing))","e544cba9":"#checking head\ndf_deliveries.head()","05cbd849":"#checking info\ndf_deliveries.info()","80e41db6":"df_deliveries.describe()","f58a4fd2":"#visuvalising the  null values\nplt.figure(figsize=(10,8))\nsns.heatmap(df_deliveries.isnull())\nplt.title('Heatmap for checking Null Values')\nplt.show()","4de3d587":"# checking for any NaN values\ndf_deliveries.isna().any()","ab8a1413":"#getting sum of null values\ndf_deliveries.isnull().sum().sort_values(ascending=False)","c7335ae6":"# get the number of missing data points per column\nmissing_values_count = df_deliveries.isnull().sum()\ntotal_cells = np.product(df_deliveries.shape)\ntotal_missing = missing_values_count.sum()\n\n# percent of data that is missing\n\npercent_missing = (total_missing\/total_cells) * 100\nprint(\"Percentage of missing : {}\".format(percent_missing))","86605de1":"df_matches['team1'].value_counts()","665eaf1e":"df_matches['team2'].value_counts()","c0abecb1":"px.bar(df_matches['team1'].value_counts(),template = \"plotly_dark\")","d107b47b":"px.bar(df_matches['team2'].value_counts(),template = \"ggplot2\")","95bc0a53":"df_matches.columns","889f1225":"df_deliveries.columns","946b1587":"df_matches['team1'].replace({\"Rising Pune Supergiant\":\"Rising Pune Supergiants\"},inplace = True)\ndf_matches['team2'].replace({\"Rising Pune Supergiant\":\"Rising Pune Supergiants\"},inplace = True)\n\ndf_matches['winner'].replace({\"Rising Pune Supergiant\":\"Rising Pune Supergiants\"},inplace = True)\ndf_matches['toss_winner'].replace({\"Rising Pune Supergiant\":\"Rising Pune Supergiants\"},inplace = True)\n\ndf_deliveries['batting_team'].replace({\"Rising Pune Supergiant\":\"Rising Pune Supergiants\"},inplace = True)\ndf_deliveries['bowling_team'].replace({\"Rising Pune Supergiant\":\"Rising Pune Supergiants\"},inplace = True)","88b740c4":"df_matches['season'].value_counts()","73c8ee07":"px.bar(df_matches['season'].value_counts(),template = \"ggplot2\")","7b1b36d8":"df_matches['venue'].value_counts()","ab8dacc8":"#method for getting values for pie chart\ndef pie_chart_values(df,col):\n    vals = []\n    nam = []\n    t = df[col].values\n    t = set(t)\n    nam = list(t)\n    for i in nam:\n        x = df[df[col]==i][col].count()\n        vals.append(x)\n        \n    return vals,nam","2a3637ab":"#plot code\nvalues , names = pie_chart_values(df_matches,'venue')\nfig = px.pie(data_frame=df_matches,names= names,values = values,\n       title='Number of matches in different venues')\nfig.update_traces(hovertemplate='venue: %{label}'+'<br>matches: %{value}')\nfig.show()","261dfed1":"#method for getting venues year wise\ndef year_wise_venues(df,col,year):\n    vals = []\n    nams = []\n    t = df[df['season']==year][col].values\n    t = set(t)\n    nam = list(t)\n    for i in nam:\n        x = df[(df[col]==i) & (df['season'] == year)][col].count()\n        vals.append(x)\n        \n    return vals,nam","235d8ab8":"for i in range(2008,2018):\n    values,names = year_wise_venues(df_matches,'venue',i)\n    graph_title = \"Number of matches in different venues in year {}\".format(i)\n    fig = px.pie(data_frame=df_matches,names=names,values = values,\n       title = graph_title,template='ggplot2')\n    fig.update_traces(hovertemplate = 'venue: %{label}'+'<br>matches: %{value}')\n    fig.show()","596ec308":"def venue(id):\n    return(df_matches[df_matches['id'] == id]['venue'].values[0])\n\ndf_deliveries['venue'] = df_deliveries['match_id'].apply(venue)\n","2c8380c0":"years = list(range(2008,2018))\nyears_count = [df_matches[df_matches['season']==x]['season'].count() for x in years]","bcddc87b":"#same plot using seaborn\nsns.set(style='darkgrid',rc = {'figure.figsize':(15,8)})\nsns.countplot(data=df_matches,x= 'season').set(title = 'year wise matches')","aa0edb3d":"fig = px.bar(x=years,y = years_count,template='plotly_dark',title='Number of matches Every year')\nfig.update_xaxes(title='years')\nfig.update_yaxes(title='Number of matches')\nfig.update_traces(hovertemplate='Num of matches:%{y}'+'<br>year: %{x}',marker_color = 'white' )\nfig.show()","c6cea36f":"#method  for getting number of teams each year\ndef number_of_teams(y):\n    t= df_matches[df_matches['season'] == y]['team1'].values\n    return(len(set(t)))\ncoun = [number_of_teams(x) for x in years]\n","b3a875d4":"#plot using plotly\nfig = px.bar(x=years,y = coun,title='Number of teams in Each Season',template='simple_white')\nfig.update_xaxes(title='years')\nfig.update_yaxes(title='number of teams')\nfig.update_traces(hovertemplate='Num of teams:%{y}'+'<br>year: %{x}',marker_color = 'skyblue' )\nfig.show()","0e21d1ed":"df_matches[df_matches['season'] == 2011]['team1'].value_counts()","4c9cb20f":"df_matches[df_matches['season'] == 2013]['team1'].value_counts()","fe30d618":"df_matches['winner'].value_counts()[:5]","462183ab":"fig = px.bar(df_matches, x=df_matches['winner'].value_counts().keys()[:5],\n             y=df_matches['winner'].value_counts()[:5],\n             color=df_matches['winner'].value_counts().keys()[:5],\n             title='Top five most succesful Teams',\n             template = \"ggplot2\"\n                    )\nfig.update_xaxes(title = \"Team Names\")\nfig.update_yaxes(title=\"Number of Wins\")\nfig.update_traces(hovertemplate='Num of wins:%{y}'+'<br>Team: %{x}' )\nfig.show()","b67cfcad":"df_matches['result'].value_counts()","5e3b59ff":"fig = px.pie(values=df_matches['result'].value_counts(),\n             names=df_matches['result'].value_counts().keys(),\n             title='Results type in all seasons')\nfig.update_traces(hovertemplate = 'Type: %{label}'+'<br>matches: %{value}')\nfig.show()","63926eb0":"df_deliveries['batsman'].nunique()","a95039b9":"df_deliveries['bowler'].nunique()","a62b7bdf":"v1 = list(df_deliveries['batsman'].values)\nv2 = list(df_deliveries['non_striker'].values)\nv3 = list(df_deliveries['bowler'].values)\nv = v1+v2+v3\nv = set(v)\nprint(\"Number of players : {}\".format(len(v)))","21318a23":"df_matches['player_of_match'].value_counts()[:10]","4680b709":"#most valuable player plot\nfig = px.bar(df_matches, x=df_matches['player_of_match'].value_counts().keys()[:10],\n             y=df_matches['player_of_match'].value_counts()[:10],\n             color=df_matches['player_of_match'].value_counts().keys()[:10],\n            title='Ten most valuable players',\n            template='plotly_dark')\nfig.update_xaxes(title = \"player Names\")\nfig.update_yaxes(title=\"Number of player of the matches\")\nfig.update_traces(hovertemplate='Num of poms:%{y}'+'<br>player: %{x}' )\nfig.show()","f74634ce":"df_matches['umpire1'].value_counts()","91db3db6":"df_matches['umpire2'].value_counts()","c14b37c4":"df_matches['umpire3'].value_counts()","b52384f0":"def team_summary(team,year):\n    df_team = pd.DataFrame()\n    \n    df_team['team1'] = df_matches[df_matches['season'] == year]['team1']\n    df_team['team2'] = df_matches[df_matches['season'] == year]['team2']\n    \n    df_team['winner'] = df_matches[df_matches['season'] == year]['winner']\n    df_team['venue'] = df_matches[df_matches['season']==year]['venue']\n    \n    df_team['toss_winner'] = df_matches[df_matches['season'] == year]['toss_winner']\n    df_team['toss_decision'] = df_matches[df_matches['season'] == year]['toss_decision']\n    \n    df = df_team[(df_team['team1']== team) | (df_team['team2']== team)]\n    \n    df['team'] = [team]*len(df)\n    \n    li = []\n    \n    \n    for i in range(len(df)):\n        if df.iloc[i]['team1']==team:\n            li.append(df.iloc[i]['team2'])\n        else:\n            li.append(df.iloc[i]['team1'])\n    df['oponent team'] = li\n    \n    \n    li = []\n    count = 0\n    \n    \n    for i in range(len(df)):\n        if df.iloc[i]['winner'] == team:\n            li.append(team)\n            count+=1\n        else:\n            li.append('team')\n    df['winners'] = li\n    \n    \n    df.drop(['team1','team2'],axis=1,inplace = True)\n    \n    \n    print(\"Team Summary :\")\n    print(\"\\n\")\n   \n    print(\"Team Name:{}\".format(team))\n    print(\"\\n\")\n    \n    print(\"year : {}\".format(year))\n    print(\"\\n\")\n    \n    print(\"Number of matches {}\".format(len(df)))\n    print(\"\\n\")\n    \n    print(\"Number of wins : {}\".format(count))\n    print(\"\\n\")\n    \n    print(\"winning percentage : {}\".format((count\/len(df)*100)))\n    print(\"\\n\")\n    \n    print(\"Differnt venues for {} in {}\".format(team,year))\n    print(\"\\n\")\n    \n    #plot for venues\n    values,names = pie_chart_values(df,'venue')\n    fig = px.pie(data_frame=df_matches,names=names,values = values,title='Number of matches in different venues',template='plotly_dark')\n    fig.update_traces(hovertemplate = 'venue: %{label}'+'<br>matches: %{value}')\n    fig.show()\n    \n    print(\"\\n\")\n    print(\"Toss wins for {} in {}:\".format(team,year))\n    print(\"\\n\")\n    \n    #plot for toss winners\n    values,names = pie_chart_values(df,'toss_winner')\n    fig = px.pie(data_frame=df_matches,names=names,values = values,title='toss_winners %',template='ggplot2')\n    fig.update_traces(hovertemplate = 'Team: %{label}'+'<br>matches: %{value}')\n    fig.show()\n    \n    print(\"\\n\")\n    print(\"Toss descisons for {} in {}:\".format(team,year))\n    print(\"\\n\")\n    \n    \n    #plot for toss descion\n    values,names = pie_chart_values(df,'toss_decision')\n    fig = px.pie(data_frame=df_matches,names=names,values = values,title='toss_descion %',template='simple_white')\n    fig.update_traces(hovertemplate = 'Type: %{label}'+'<br>matches: %{value}')\n    fig.show()\n    \n    print(\"\\n\") \n    print(\"wins for {} in {}:\".format(team,year))\n    print(\"\\n\")\n    \n    #plot for number of wins aganist different teams      \n    fig = px.bar(data_frame=df,x='oponent team',color='winners',\n                 barmode='group',\n                 template='plotly_dark',\n                 title=\"Number of wins aganist other teams\")\n    fig.show() \n\n","26337c24":"team_summary('Mumbai Indians',2008)","3b44449a":"team_summary('Chennai Super Kings',2014)","fbb57ec8":"team_summary('Royal Challengers Bangalore',2017)","0b4e96f9":"team_summary('Mumbai Indians',2017)","1f1b09b3":"def number_of_wickets(name):\n    li = list(df_deliveries[(df_deliveries['bowler']==name)]['dismissal_kind'])\n    wickets = 0\n    for i in li:\n        if i in['caught','bowled','lbw','stumped','caught and bowled']:\n            wickets+=1\n    return wickets","ddab42d3":"player_scores =  pd.DataFrame()\n\n\nli = []\n#getting players names\nli1 = list(df_deliveries['batsman'].values)\nli2 = list(df_deliveries['non_striker'].values)\nli3 = list(df_deliveries['bowler'].values)\nli = li1+li2+li3\nnames = set(li)\n\n\nplayer_scores['Names'] = list(names)\n\n\nli=[]\n#getting team names\nli1 = []\nli2 = []\nli1 = list(df_matches['team1'].values)\nli2 = list(df_matches['team2'].values)\nli = li1+li2\nli = set(li)\nteams = list(li)\n\n\nfor i in range(len(teams)):\n    player_scores.insert(i+1, teams[i], [0]*len(player_scores), True)\n\n    \nplayer_scores = player_scores.set_index('Names')\n\n\nfor i in player_scores.index:\n    for j in player_scores.columns:\n        s = sum(df_deliveries[(df_deliveries['batsman']==i) & (df_deliveries['bowling_team'] == j)]['batsman_runs'])\n        player_scores.loc[i,j] = s\n\n\n\nplayer_scores.head()\n","4aa21ab2":"player_scores_venues = pd.DataFrame()\n\n#getting venues\nvenues = set(df_matches['venue'])\nvenues = list(venues)\n\nplayer_scores_venues['Names'] = list(names)\n\nfor i in range(len(venues)):\n    player_scores_venues.insert(i+1, venues[i], [0]*len(player_scores_venues), True)\n\n\n\nplayer_scores_venues = player_scores_venues.set_index('Names')\n\n\nfor i in player_scores_venues.index:\n    for j in player_scores_venues.columns:\n        s = sum(df_deliveries[(df_deliveries['batsman']==i) & (df_deliveries['venue'] == j)]['batsman_runs'])\n        player_scores_venues.loc[i,j] = s\n\n\nplayer_scores_venues.head()","c97afcd7":"player_wickets = pd.DataFrame()\n\nplayer_wickets['Names'] = list(names)\n\nfor i in range(13):\n    player_wickets.insert(i+1, teams[i], [0]*len(player_scores), True)\n    \n    \nplayer_wickets = player_wickets.set_index('Names')\n\n\nfor i in player_scores.index:\n    for j in player_scores.columns:\n        wickets = 0\n        s = list(df_deliveries[(df_deliveries['bowler']==i) & (df_deliveries['batting_team'] == j)]['dismissal_kind'])\n        for k in s:\n            if k in['caught','bowled','lbw','stumped','caught and bowled']:\n                wickets+=1\n        player_wickets.loc[i,j] = wickets\n\n\nplayer_wickets.head()","1c1f5120":"player_wickets_venues = pd.DataFrame()\n\nplayer_wickets_venues['Names'] = list(names)\n\nfor i in range(len(venues)):\n    player_wickets_venues.insert(i+1, venues[i], [0]*len(player_wickets_venues), True)\n    \nplayer_wickets_venues = player_wickets_venues.set_index('Names')\n\nfor i in player_wickets_venues.index:\n    for j in player_wickets_venues.columns:\n        wickets = 0\n        s = list(df_deliveries[(df_deliveries['bowler']==i) & (df_deliveries['venue'] == j)]['dismissal_kind'])\n        for k in s:\n            if k in['caught','bowled','lbw','stumped','caught and bowled']:\n                wickets+=1\n        player_wickets_venues.loc[i,j] = wickets\n\n        \nplayer_wickets_venues.head()","0b714fa2":"li = []\nfor i in player_scores.index:\n    li.append(sum(player_scores.loc[i]))\nplayer_scores[\"total_runs\"] = li\nplayer_scores = player_scores.sort_values(by = 'total_runs',ascending=False)\n","054eafea":"fig = px.bar(data_frame=player_scores,x = player_scores.index[:11],\n             y = player_scores['total_runs'][:11],\n             title = \"Top 10 highest runs\",\n            template='ggplot2')\nfig.update_yaxes(title = \"Runs\")\nfig.update_xaxes(title = \"player Nmaes\")\nfig.update_traces(marker_color = \"brown\")\nfig.update_traces(hovertemplate = 'Player: %{x}'+'<br> Runs: %{y}')\nfig.show()","783dc50d":"player_scores.drop('total_runs',axis = 1,inplace = True)","eedc15c1":"li = []\nfor i in player_wickets.index:\n    li.append(sum(player_wickets.loc[i]))\nplayer_wickets[\"total_wickets\"] = li\nplayer_wickets = player_wickets.sort_values(by = 'total_wickets',ascending=False)","278ae5f2":"fig = px.bar(data_frame=player_wickets,x = player_wickets.index[:11],\n             y = player_wickets['total_wickets'][:11],\n             title = \"Top 10 wicket takers\",\n            template='ggplot2')\nfig.update_yaxes(title = \"Runs\")\nfig.update_xaxes(title = \"player Nmaes\")\nfig.update_traces(marker_color = \"blue\")\nfig.update_traces(hovertemplate = 'Player: %{x}'+'<br> wickets: %{y}')\nfig.show()","662d268e":"player_wickets.drop('total_wickets',axis = 1,inplace = True)","d1503ea2":"class player_stats:\n    \n    def __init__(self,name):\n        self.name = name\n        self.total_runs = sum(df_deliveries[df_deliveries['batsman']== self.name]['batsman_runs'])\n        self.total_wickets = number_of_wickets(self.name)\n        \n    def player_information(self):\n        print(\"Name : {}\".format(self.name))\n        print(\"Total runs {}\".format(self.total_runs))\n        print(\"TOtal wickets :{}\".format(self.total_wickets))\n    \n    def player_runs(self):\n        title = \"{} runs \".format(self.name)\n        sns.set(style='darkgrid',rc = {'figure.figsize':(15,8)})\n        sns.countplot(df_deliveries[df_deliveries['batsman']==self.name]['batsman_runs']).set(title = title)\n    \n    def player_scatter_runs(self):\n        title = \"{} runs \".format(self.name)\n        fig = px.scatter(df_deliveries[df_deliveries['batsman']==self.name]['batsman_runs'],template='ggplot2',title=title)\n        fig.update_xaxes(title = \"count\")\n        fig.update_yaxes(title = \"Index\")\n        fig.update_traces(marker_color = 'black')\n        fig.show()\n    \n    def player_dismmisals(self):\n        title = \"Dissmisal Types of {}\".format(self.name)\n        (df_deliveries[df_deliveries['batsman']==self.name]['dismissal_kind']).iplot(kind = \"histogram\",title = title,\n                                                                             xTitle=\"Dismissal types\",yTitle=\"count\",color = \"red\")\n    def super_over_runs(self):\n        title = \"Super over Runs of {}\".format(self.name)\n        sns.set(style='darkgrid',rc = {'figure.figsize':(15,8)})\n        sns.countplot(df_deliveries[(df_deliveries['batsman']==self.name) & (df_deliveries['is_super_over']==1)]['batsman_runs']).set(title = title)\n    \n    def player_scores_innings1(self):\n        title = \"{} Runs in innings 1 \".format(self.name)\n        sns.set(style='darkgrid',rc = {'figure.figsize':(15,8)})\n        sns.countplot(df_deliveries[(df_deliveries['batsman']==self.name) & (df_deliveries['inning']==1)]['batsman_runs']).set(title = title)\n    \n    def player_scores_innings2(self):\n        title = \"{} Runs in innings 2\".format(self.name)\n        sns.set(style='darkgrid',rc = {'figure.figsize':(15,8)})\n        sns.countplot(df_deliveries[(df_deliveries['batsman']==self.name) & (df_deliveries['inning']==1)]['batsman_runs']).set(title = title)\n    \n        \n    def player_wicket_types(self):\n        title = \"{}wicket types\".format(self.name)\n        (df_deliveries[(df_deliveries['bowler']==self.name)]['dismissal_kind']).iplot(kind='histogram',xTitle = \"wicket type\",\n                                                                             yTitle=\"number of wickets\",\n                                                                             title = title,\n                                                                             color = \"black\")\n    def player_runs_given(self):\n        title = \"Runs given by {}\".format(self.name)\n        (df_deliveries[(df_deliveries['bowler']==self.name)]['total_runs']).iplot(kind=\"histogram\",title = title,xTitle=\"Runs types\",yTitle=\"count\",\n                                                                         color = \"skyblue\")\n    \n    def player_extra_runs_given(self):\n        title = \"extra _runs _given by {}\".format(self.name)\n        sns.set(style='darkgrid',rc = {'figure.figsize':(15,8)})\n        sns.countplot(df_deliveries[(df_deliveries['bowler']==self.name)]['extra_runs']).set(title = title)\n        \n    def team_wise_runs(self):\n        title = \"{} runs aganist other teams\".format(self.name)\n        fig = px.bar(x = teams ,y = player_scores.loc[self.name].values,template = \"ggplot2\",title = title)\n        fig.update_xaxes(title=\"Teams\")\n        fig.update_yaxes(title='Runs')\n        fig.update_traces(hovertemplate = 'Team: %{x}'+'<br> Runs: %{y}')\n        fig.show()\n    \n    def venue_wise_runs(self):\n        title = \"{} runs in different venues\".format(self.name)\n        fig = px.bar(x = venues ,y =player_scores_venues.loc[self.name].values,template = \"plotly_dark\",title = title)\n        fig.update_xaxes(title=\"Venues\")\n        fig.update_yaxes(title='Runs')\n        fig.update_traces(hovertemplate = 'venue: %{x}'+'<br> Runs: %{y}')\n        fig.show()\n    \n    def team_wise_wickets(self):\n        title = \"{} wickets aganist other teams\".format(self.name)\n        fig = px.bar(x = teams ,y =player_wickets.loc[self.name].values,template = \"ggplot2\",title = title)\n        fig.update_xaxes(title = \"Teams\")\n        fig.update_yaxes(title = \"Wickets\")\n        fig.update_traces(hovertemplate = 'Team: %{x}'+'<br> Wickets: %{y}')\n        fig.show()\n        \n    def venue_wise_wickets(self):\n        title = \"{} wickets in different venues\".format(self.name)\n        fig = px.bar(x = venues ,y =player_wickets_venues.loc[self.name].values,template = \"plotly_dark\",title = title)\n        fig.update_xaxes(title = \"venues\")\n        fig.update_yaxes(title = \"Wickets\")\n        fig.update_traces(hovertemplate = 'venue : %{x}'+'<br> Wickets : %{y}')\n        fig.show()\n        \n    def box_team_wise_scores(self):\n        for i in teams:\n            fig = px.box(df_deliveries[(df_deliveries['batsman'] == self.name) & (df_deliveries['bowling_team']==i)]['batsman_runs'],template = \"ggplot2\",)\n            fig.update_xaxes(title = \"runs aganist {}\".format(i))\n            fig.update_yaxes(title = self.name)\n            fig.show()\n            print(\"\\n\")\n            \n            \n    def box_venue_wise_scores(self):\n        for i in venues:\n            fig = px.box(df_deliveries[(df_deliveries['batsman'] == self.name) & (df_deliveries['venue']==i)]['batsman_runs'],template = \"plotly_dark\",)\n            fig.update_xaxes(title = \"runs in {}\".format(i))\n            fig.update_yaxes(title = self.name)\n            fig.show()\n            print(\"\\n\")\n            \n    def violin_team_wise_scores(self):\n        for i in teams:\n            fig = px.violin(df_deliveries[(df_deliveries['batsman'] == self.name) & (df_deliveries['bowling_team']==i)]['batsman_runs'],template = \"ggplot2\",)\n            fig.update_xaxes(title = \"runs aganist {}\".format(i))\n            fig.update_yaxes(title = self.name)\n            fig.show()\n            print(\"\\n\")\n            \n    def violin_venue_wise_scores(self):\n        for i in venues:\n            fig = px.violin(df_deliveries[(df_deliveries['batsman'] == self.name) & (df_deliveries['venue']==i)]['batsman_runs'],template = \"plotly_dark\")\n            fig.update_xaxes(title = \"runs in {}\".format(i))\n            fig.update_yaxes(title = self.name)\n            fig.show()\n            print(\"\\n\")\n            \n        \n        \n        ","5074ee28":"p = player_stats(\"V Kohli\")","2d4fa3d8":"p.player_information()","29da0299":"p.player_runs()","cb313f81":"p.player_scatter_runs()","6d6480cf":"p.player_dismmisals()","0f2c9ab3":"p.super_over_runs()","68ce1286":"p.player_scores_innings1()","da81c6a1":"p.player_scores_innings2()","a874bd45":"p.player_wicket_types()","8fa1f36a":"p.player_runs_given()","9e0e950c":"p.player_extra_runs_given()","c1034af3":"p.team_wise_runs()","a656574e":"p.box_team_wise_scores()","9bd0a71a":"p.violin_team_wise_scores()","b53a828f":"p.venue_wise_runs()","d1bf2d8d":"p.box_venue_wise_scores()","9bb998f5":"p.violin_venue_wise_scores()","4fd4a271":"p.team_wise_wickets()","7c4dbfd3":"p.venue_wise_wickets()","d8bf0027":"h = player_stats('HH Pandya')","269d2037":"h.player_information()","153524d8":"h.player_runs()","38e03731":"h.player_wicket_types()","a3bfdca5":"h.player_scores_innings1()","f3d82810":"h.player_scores_innings2()","d18347ab":"h.player_dismmisals()","e858b7bf":"h.player_runs_given()","6d20e151":"h.player_extra_runs_given()","d6e408d8":"h.team_wise_runs()","be9ed5c1":"h.venue_wise_runs()","3eed4929":"h.team_wise_wickets()","0fa56a20":"h.venue_wise_wickets()","f8aad4ac":"<h4> let us check players who has more number of player of match <\/h4>","8a8272a3":"<h4> Number of runs given Player <\/h4>","0ae46b08":"Now let us find total Number of players","04e0491e":"<h2> Reading Given Data <\/h2>","8cfa2bc0":"<h4> player runs aganist other teams <\/h4>","97ed0903":"<h4> Now let us try to create a Summary for every team in a particular season <\/h4>\n\n<h2>Team Summary Function for getting all details about team in a particular Season<\/h2>","20c11a46":"<h4> let us see Number of different umpiers <\/h4>","5ce706bc":"<h4> player wickets in different venues<\/h4>","363a580b":"<h4> Data Frame for getting wickets in  each venue <\/h4>","3805b1ad":"<h4> count for different type of dismmisals in all seasons <\/h4>","b307c048":"<h4> Checking Venues : <\/h4>","7134ffa9":"<h4> Number of extra runs given Player <\/h4>","38ad80d3":"<h4>let us add venue section for deliveries data frame so that we can get runs and wickets of players in different venues<\/h4>","660a85c3":"<h4>Checking Number of matches every season <\/h4>","f713294e":"<h4> In 2011 we have More Number of teams <\/h4>","32378c79":"<h2>Checking variables behaviour<\/h2>","b1c80e34":" For creating player profile we need player scores and wickets aganist each team and in each venue\n,now let us create data frames for getting information \n<h2> creating Data frames<\/h2>","8912082b":"for getting clear understanding about players runs in different venues","c2fc9ff6":"<h3> Understanding The Given Data <\/h3>","8d36cc80":"most of the matches have normal resluts ","98e02c19":"<h4>In 2013 we have more Number of matches so let us check about Number of teams every season<\/h4><\/br>\n<h4> Checking Number of Teams (in Each Season) <\/h4>","2967f23e":"**NOTE** : Rising Pune Supergiant and Rising Pune Supergiants are Same <\/br>\nso Replacing Rising Pune Supergiant with Rising Pune Supergiants (two teams are same)","9c703078":"<h4>Data Frame for getting wickets aganist each team<\/h4>","70f42ac0":"Let us create some plots using created Data frames","61c7ca99":"Mumbai Indians In 2017","73a426fa":"<h4>Deliveries Data Frame <\/h4>","09042afd":"Royal Challengers Bangalore in 2017","3c730f85":"<h4>plots using created Data Frames<\/h4>","a184553c":"player with more number of player_of_matches is valuable  ","11dded05":"<h2>Importing useful Libraries<\/h2>","18bf6bfc":"<h4> player wickets aganist other teams <\/h4>","55c6de52":"<h4> Data Frame for getting runs aganist each team <\/h4>","e1e18045":"<h4> Now let us check about Number of players <\/h4> <\/br>\n<h4> checking players:<\/h4>","21d0e4f0":"wickets only counts when it is bowled,caught,lbw,stumped and caught and bowled","3a498ad8":"for getting clear understanding about players scores aganist each team ","0282e964":"<h4> Now let us see the Hardik pandya stats <\/h4>","8966825e":"<h4> Checking Seasons : <\/h4>","8b003831":"<h4> checking Teams <\/h4>","6ad37ced":"Now let us see Chennai Super kings team in season 2014","e271741e":"<h4> player runs in different venues <\/h4>","bb6083e1":"<h2>Creating Class for getting all plots of player profile <\/h2>","dc7aff41":"<h4> Player scores in innings 2 <\/h4>","b5acae02":"<h4> Player's Number of different wickets <\/h4>","d16adc40":"<h2><\/h2>","9cb52c83":"<h4> players super over runs (if played super over) <\/h4>","be3ee5a7":"<h4> Now let us check most succesful teams in 10 seasons<\/h4>","52a9733c":"<h2><\/h2>","73e4d45b":"The Given Data is about 10 seasons","1d08d6d7":"<h4> Now let us see how venues are changing every year <\/h4>","fc8b9741":"<h4> Player runs (different runs: singles,doubles...) <\/h4>","1cc3b57f":"<h4> Player Runs in total seasons <\/h4>","ed2913f6":"<h4> Data Frame for getting runs in each venue <\/h4>","2009401d":"<h4> Player information <\/h4>","970f5811":"<h4>Now let us try to create a player profile class where we can get everything about player <\/h4>","64880c15":"<h4> Let us check Result types (tie or match cancelled) <\/h4> <\/br>\n<h4> Checking Reults tpye : <\/h4>","cbce21e0":"umpire 3 has null values completly","cda679f2":"<h4> Player scores in innings 1 <\/h4>","702ebb61":"<h4> Matches Dataframe <\/h4>","b5ddf470":"checking all countries columns in data frames"}}