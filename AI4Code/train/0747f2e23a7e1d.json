{"cell_type":{"2470ba2e":"code","a26e102d":"code","fdf43573":"code","8874e38b":"code","f598d584":"code","4c036bf9":"code","75901726":"code","c5f09281":"code","bc4e9d9a":"code","7c20f956":"code","11f1eee7":"code","63566ac1":"code","049eae75":"code","dc16c1d8":"code","c1382fac":"code","6b909766":"code","f1fc73d4":"code","23606caf":"code","423f5b81":"code","3371eca6":"code","5c06b095":"code","e2199278":"code","2391a58e":"code","38acc1c6":"code","95def53d":"code","04621110":"code","1a398203":"code","64aa02a0":"code","e2fb144d":"code","66a8ce6e":"code","99db8744":"code","afd3a6b0":"code","779164c4":"code","e014883c":"code","dad569f8":"code","8604790d":"code","50299469":"code","f77e4b9f":"code","240e6cca":"code","2d1376e1":"code","0a7e1b8a":"code","49055aeb":"code","03809957":"code","3cb6d90c":"code","2b80f0f7":"code","7604fd94":"code","4f59575d":"code","6592857b":"code","c5481688":"markdown","c47bd7d5":"markdown","97eba857":"markdown","6760ab2e":"markdown","746e2657":"markdown","ecfad097":"markdown","8c2cddea":"markdown","fa874afe":"markdown","fc259e6d":"markdown","862d0bed":"markdown","ba937c94":"markdown","8bd53375":"markdown","ea97301f":"markdown"},"source":{"2470ba2e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport json\nimport cv2\n\nimport seaborn as sn\nimport random\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.utils import to_categorical\nfrom keras.preprocessing import image\n\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm\n%matplotlib inline\n\nimport numpy as np\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a26e102d":"# mount google drive\n# file authorization\n\n# from google.colab import drive\n\n# drive.mount('\/content\/drive')","fdf43573":"# # open file from \n# try:\n#   zipLeafImages = ZipFile('\/content\/drive\/My Drive\/Data\/cassavaleafdiseaseclassification.zip')\n#   zipLeafImages.extractall()\n# except:\n#   print('file not found !!!')\n#   exit()","8874e38b":"# from google.colab import drive\n# drive.mount('\/content\/drive')","f598d584":"BASE_DIR = \"..\/input\/cassava-leaf-disease-classification\/\"\n# BASE_DIR = \"\/content\/drive\/MyDrive\/Data\/cassava-leaf-disease-classification\/\"","4c036bf9":"with open(os.path.join(BASE_DIR, \"label_num_to_disease_map.json\")) as file:\n    map_classes = json.loads(file.read())\n    map_classes = {int(k) : v for k, v in map_classes.items()}\n\nprint(json.dumps(map_classes, indent=4))","75901726":"inputs_files = os.listdir(os.path.join(BASE_DIR, \"train_images\"))\nprint(f\"Number of input images : {len(inputs_files)}\")","c5f09281":"image_shape = {}\nfor image_name in os.listdir(os.path.join(BASE_DIR, \"train_images\"))[:5]:\n    images = cv2.imread(os.path.join(BASE_DIR, \"train_images\", image_name))\n    image_shape[images.shape] = image_shape.get(images.shape, 0) + 1\n\nprint(image_shape)","bc4e9d9a":"df_train = pd.read_csv(os.path.join(BASE_DIR, \"train.csv\"))\ndf_train['class_name'] = df_train['label'].map(map_classes)\ndf_train = df_train.sample(n=1000)\ndf_train.shape","7c20f956":"plt.figure(figsize = (12, 8))\nsn.countplot(y = \"class_name\", data = df_train)","11f1eee7":"def f(row):\n    if row['label'] == 0:\n        val = 1\n    else:\n        val = 0\n    return val","63566ac1":"def e(row):\n    if row['label'] == 3:\n        val = 1\n    else:\n        val = 0\n    return val","049eae75":"def d(row):\n    if row['label'] == 1:\n        val = 1\n    else:\n        val = 0\n    return val","dc16c1d8":"def c(row):\n    if row['label'] == 4:\n        val = 1\n    else:\n        val = 0\n    return val","c1382fac":"def b(row):\n    if row['label'] == 2:\n        val = 1\n    else:\n        val = 0\n    return val","6b909766":"df_train_with_label = df_train\ndf_train_with_label['class_name'] = df_train['label'].map(map_classes)\ndf_train_with_label['cbb'] = df_train_with_label.apply(f, axis=1)\ndf_train_with_label['cmd'] = df_train_with_label.apply(e, axis=1)\ndf_train_with_label['cbsd'] = df_train_with_label.apply(d, axis=1)\ndf_train_with_label['cgm'] = df_train_with_label.apply(b, axis=1)\ndf_train_with_label['healthy'] = df_train_with_label.apply(c, axis=1)\ndf_train_with_label.reset_index(drop=True, inplace=True)\ndf_train_with_label","f1fc73d4":"y = np.array(df_train_with_label.drop(['image_id','label', 'class_name'],axis=1))","23606caf":"y.shape","423f5b81":"# df_train_with_label","3371eca6":"plt.figure(figsize=(10,10))\nfolder= BASE_DIR + '\/train_images'\nfor images in os.listdir(os.path.join(BASE_DIR, \"train_images\"))[:30]:\n    ax = plt.subplot(3,3, random.randint(1,9))\n    img = cv2.imread(os.path.join(folder,images))\n    plt.imshow(img)\n    plt.axis(\"off\")","5c06b095":"def print_random_images(label):\n    plt.figure(figsize=(10,10))\n    folder= BASE_DIR + '\/train_images'\n    cbb_images = df_train[df_train.label == label]\n    for images in cbb_images.image_id.head(29):\n        ax = plt.subplot(3,3, random.randint(1,9))\n        img = cv2.imread(os.path.join(folder,images))\n        plt.imshow(img)\n        plt.axis(\"off\")","e2199278":"df_train.columns","2391a58e":"df_train.reset_index(drop=True, inplace=True)\ndf_train","38acc1c6":"train_image = []\nfor i in tqdm(range(df_train.shape[0])):\n    img = image.load_img(BASE_DIR + 'train_images\/'+df_train['image_id'][i],target_size=(400,400,3))\n    img = image.img_to_array(img)\n    img = img\/255\n    train_image.append(img)\n\nX = np.array(train_image)","95def53d":"def transfer_mages(df_train_pool):\n  train_image = []\n  for i in tqdm(range(df_train_pool.shape[0])):\n    img = image.load_img(BASE_DIR + 'train_images\/'+df_train_pool['image_id'][i],target_size=(400,400,3))\n    img = image.img_to_array(img)\n    img = img\/255\n    train_image.append(img)\n    \n  X = np.array(train_image)\n  return X","04621110":"X.shape","1a398203":"plt.imshow(X[2])","64aa02a0":"print_random_images(0)","e2fb144d":"print_random_images(1)","66a8ce6e":"print_random_images(2)","99db8744":"print_random_images(3)","afd3a6b0":"print_random_images(4)","779164c4":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.2)","e014883c":"# model = Sequential()\n# model.add(Conv2D(filters=16, kernel_size=(5, 5), activation=\"relu\", input_shape=(400,400,3)))\n# model.add(MaxPooling2D(pool_size=(2, 2)))\n# model.add(Dropout(0.25))\n# model.add(Conv2D(filters=32, kernel_size=(5, 5), activation='relu'))\n# model.add(MaxPooling2D(pool_size=(2, 2)))\n# model.add(Dropout(0.25))\n# model.add(Conv2D(filters=64, kernel_size=(5, 5), activation=\"relu\"))\n# model.add(MaxPooling2D(pool_size=(2, 2)))\n# model.add(Dropout(0.25))\n# model.add(Conv2D(filters=64, kernel_size=(5, 5), activation='relu'))\n# model.add(MaxPooling2D(pool_size=(2, 2)))\n# model.add(Dropout(0.25))\n# model.add(Flatten())\n# model.add(Dense(128, activation='relu'))\n# model.add(Dropout(0.5))\n# model.add(Dense(64, activation='relu'))\n# model.add(Dropout(0.5))\n# model.add(Dense(5, activation='sigmoid'))","dad569f8":"image_size = (400, 400)","8604790d":"data_augmentation = keras.Sequential(\n    [\n        layers.experimental.preprocessing.RandomFlip(\"horizontal\"),\n        layers.experimental.preprocessing.RandomRotation(0.1),\n    ]\n)","50299469":"def make_model(input_shape, num_classes):\n    inputs = keras.Input(shape=input_shape)\n    # Image augmentation block\n    x = data_augmentation(inputs)\n\n    # Entry block\n    x = layers.experimental.preprocessing.Rescaling(1.0 \/ 255)(x)\n    \n    x = layers.Conv2D(32, 3, strides=2, padding=\"same\")(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation(\"relu\")(x)\n\n    x = layers.Conv2D(64, 3, padding=\"same\")(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation(\"relu\")(x)\n\n    previous_block_activation = x  # Set aside residual\n\n    for size in [128, 256, 512, 728]:\n        x = layers.Activation(\"relu\")(x)\n        x = layers.SeparableConv2D(size, 3, padding=\"same\")(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.Activation(\"relu\")(x)\n        x = layers.SeparableConv2D(size, 3, padding=\"same\")(x)\n        x = layers.BatchNormalization()(x)\n\n        x = layers.MaxPooling2D(3, strides=2, padding=\"same\")(x)\n\n        # Project residual\n        residual = layers.Conv2D(size, 1, strides=2, padding=\"same\")(\n            previous_block_activation\n        )\n        x = layers.add([x, residual])  # Add back residual\n        previous_block_activation = x  # Set aside next residual\n\n    x = layers.SeparableConv2D(1024, 3, padding=\"same\")(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation(\"relu\")(x)\n\n    x = layers.GlobalAveragePooling2D()(x)\n    if num_classes == 2:\n        activation = \"sigmoid\"\n        units = 1\n    else:\n        activation = \"softmax\"\n        units = num_classes\n\n    x = layers.Dropout(0.5)(x)\n    outputs = layers.Dense(units, activation=activation)(x)\n    return keras.Model(inputs, outputs)\n\n\nmodel = make_model(input_shape=image_size + (3,), num_classes=5)\nkeras.utils.plot_model(model, show_shapes=True)","f77e4b9f":"model.summary()","240e6cca":"model.compile(optimizer=keras.optimizers.Adam(1e-3), loss='binary_crossentropy', metrics=['accuracy'])","2d1376e1":"X_test.shape, y_test.shape","0a7e1b8a":"X_train.shape, y_train.shape","49055aeb":"model.fit(X_train, y_train, epochs=50, validation_data=(X_test, y_test), batch_size=16)","03809957":"img = image.load_img(BASE_DIR+'test_images\/2216849948.jpg',target_size=(400,400,3))\nimg = image.img_to_array(img)\nimg = img\/255","3cb6d90c":"classes = np.array(df_train.columns[3:])\nproba = model.predict(img.reshape(1,400,400,3))\ntop_3 = np.argsort(proba[0])\nfor i in range(5):\n    print(\"{}\".format(classes[top_3[i]])+\" ({:.3})\".format(proba[0][top_3[i]]))\nplt.imshow(img)","2b80f0f7":"output = dict(zip(classes[top_3],proba.ravel()))\noutput_value = max(output, key=output.get)\noutput_value","7604fd94":"val = 4\ndef get_label_value(label):\n    if label == 'cbb':\n        val = 0\n    elif label == 'cbsd':\n        val = 1\n    elif label == 'cgm':\n        val = 2\n    elif label == 'cmd':\n        val = 3\n    else:\n        val = 4\n    return val","4f59575d":"test_df = pd.DataFrame({'image_id': ['2216849948.jpg']})\ntest_df['label'] = get_label_value(output_value)\ntest_df","6592857b":"test_df.to_csv('submission.csv', encoding='utf-8')","c5481688":"# Data needs to be labeled before to identify is our module did the job or not","c47bd7d5":"#    \"3\": \"Cassava Mosaic Disease (CMD)\"\n","97eba857":"Lets see image for each deases","6760ab2e":"#    \"4\": \"Healthy\"","746e2657":"# \"2\": \"Cassava Green Mottle (CGM)\"","ecfad097":"# Test","8c2cddea":"#     \"1\": \"Cassava Brown Streak Disease (CBSD)\"","fa874afe":"Merging images with labels","fc259e6d":"Labeling data in different way","862d0bed":"# Visual Image Selector","ba937c94":"#     \"0\": \"Cassava Bacterial Blight (CBB)\",","8bd53375":"Get the images shape, shape should be same for all images","ea97301f":"# Make a model"}}