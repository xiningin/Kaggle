{"cell_type":{"22945867":"code","bbf7d650":"code","e80ffb8d":"code","94addc2c":"code","e548c19a":"code","d94ed7d3":"code","8a584347":"code","51ba9260":"code","f134f81f":"code","bf30042b":"code","5aaddab4":"code","04ea45e1":"code","0675531d":"code","8e9ee4e6":"markdown","e100ed7b":"markdown"},"source":{"22945867":"import pandas as pd\nimport numpy as np\nimport os\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom mpl_toolkits.basemap import Basemap\nfrom matplotlib.collections import PolyCollection\n%matplotlib inline","bbf7d650":"listings = pd.read_csv('\/kaggle\/input\/boston\/listings.csv')","e80ffb8d":"listings.head()","94addc2c":"listings.columns","e548c19a":"listings.price = listings.price.apply(lambda x:x.split('.')[0]).replace('[^0-9]','', regex=True).apply(lambda x:int(x))","d94ed7d3":"fig = plt.figure(figsize=(25,25))\nm = Basemap(projection='merc', llcrnrlat=42.23, urcrnrlat=42.4, llcrnrlon=71.18, urcrnrlon=70.99,)\nm.drawcounties()\n\nnum_colors = 20\nvalues = listings.price\ncm = plt.get_camp('coolwarm')\nscheme = [cm(i\/num_colors) for i in range(num_colors)]\nbins = np.linspace(values.min(), values.max(), num_colors)\nlistings['bin'] = np.digitize(values, bins) - 1\ncmap = mpl.colors.ListedColormap(scheme)\n\ncolor = [schema[listings[(listings.latitude==x)&(listings.longitude==y)]['bin'].values]\n        for x,y in zip(listings.latitude, listings.longitude)]\nx,y = m(listings.longitude.values, listings.latitude.values)\nscat = m.scatter(x,y, s=listings.price, color = color, cmap = cmap, alpha=0.8)\n\n# Draw color legend, [left, top, width, height]\nax_legend = fig.add_axes([0.21, 0.12, 0.6, 0.02])\ncb = mpl.colorbar.ColorbarBase(ax_legend, cmap=cmap, ticks=bins, boundaries=bins, orientation='horizontal')\ncb.ax.set_xticklabels([str(round(i, 1)) for i in bins])\n\nplt.show()","8a584347":"plt.figure(figsize=(12,6))\nsns.boxplot(x='neighbourhood_cleansed', y='price', data = listings)\nxt = plt.xticks(rotation=90)","51ba9260":"sns.violinplot('neighbourhood_cleansed', 'price', data = listings)\nxt = plt.xticks(rotation = 90)","f134f81f":"sns.factorplot('neighbourhood_cleansed', 'price', data = listings, color = 'm', estimator = np.median, size = 4.5, aspect = 1.35)\nxt. plt.xticks(rotation = 90)","bf30042b":"plt.figure(figsize=(10,10))\nsns.heatmap(listings.groupby(['neighbourhood_cleansed', 'bedrooms']).price.mean().unstack(),annot=True, fmt='.0f')","5aaddab4":"plt.figure(figsize=(10,10))\nsns.heatmap(listings.groupby(['city', 'bedrooms']).price.mean().unstack(),annot=True, fmt='.0f')","04ea45e1":"plt.figure(figsize=(10,10))\nsns.heatmap(listings.groupby(['property_type','bedrooms']).price.mean().unstack(), annot=True, fmt='.0f')","0675531d":"plt.figure(figsize=(10,10))\nsns.heatmap(listings.groupby(['beds','bedrooms']).price.mean().unstack(), annot=True, fmt='.0f')","8e9ee4e6":"### Price data is object, and includes a sign. So we remove it first. ","e100ed7b":"### Make a map which the size and color of points depend on the price."}}