{"cell_type":{"93be8a57":"code","91d5fca5":"code","9373186a":"code","609bf70a":"code","9743366e":"code","50287178":"code","021f2ea4":"code","b67f6353":"code","e818c3b1":"code","e1d09e9c":"code","8d63642b":"code","e32ae84f":"code","50231138":"code","3b8ad2b7":"code","b5438291":"code","f7768680":"code","5f52e8db":"code","cbb5d6e6":"code","ee8fcae1":"code","dc78d81b":"code","cbac74eb":"code","e5ce2074":"code","779b6a00":"code","485ab673":"code","2b909d41":"code","15982592":"code","41196eef":"code","bf5ba414":"code","1c736744":"code","0cdecffc":"code","5117b2a5":"code","041d53fd":"code","7568d816":"code","57eaeaf3":"code","61a8795b":"code","f41e189d":"code","bf4a870f":"code","50f2d177":"code","aea3a5bc":"code","92d409a4":"code","9cb51ac9":"code","db2dfa12":"code","ea47fa2a":"code","4b26be74":"code","d996bc4b":"code","7c696695":"code","3467ef56":"code","db555c1c":"code","4debb5d4":"code","c8197bba":"code","65aee57d":"code","6ad93422":"code","b5549c66":"code","12046615":"markdown","0a4a5a58":"markdown","36bffa8a":"markdown","795e53b9":"markdown","412b71c1":"markdown","bda564d3":"markdown","45abfb26":"markdown","ee2d7c49":"markdown","073c2785":"markdown","221981cf":"markdown","fed3c7de":"markdown","eafd1c92":"markdown","1bc4e603":"markdown","053dd12e":"markdown","252dea12":"markdown","b3366342":"markdown","32cbc8a3":"markdown","f8a35fa0":"markdown","cd4c41cd":"markdown","16d63c6e":"markdown","bf15cb60":"markdown","a77ac7ca":"markdown","40eb88a3":"markdown","5499825a":"markdown","86ee5a02":"markdown","2411bf20":"markdown","17be27da":"markdown","c4c18019":"markdown","b1536820":"markdown"},"source":{"93be8a57":"import pandas as pd \nimport numpy as np\nimport missingno as ms\nimport plotly.express as px\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nfrom pandas_profiling import ProfileReport\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","91d5fca5":"train = pd.read_csv('\/kaggle\/input\/mobile-price-classification\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/mobile-price-classification\/test.csv')","9373186a":"train.profile_report()","609bf70a":"# Observing our data\ntrain.head()\n# from the results we can see that the dataset contains, numerical and categorical data types","9743366e":"# Clearly our test set is missing the price range column which is our target variable\ntest.head()","50287178":"train.describe()","021f2ea4":"train.columns","b67f6353":"train.shape\ntest.shape","e818c3b1":"test.columns","e1d09e9c":"train.isnull().sum()\n# No missing values","8d63642b":"train.isna().sum()\n# No na values","e32ae84f":"train.notnull().sum()\n# all values intact","50231138":"ms.bar(train, figsize = (10,10), fontsize= 16, color = 'teal', sort = 'descending')\n# From this visualization it is clear that there are no missing values","3b8ad2b7":"train.hist(figsize=(20,20))\nplt.show()","b5438291":"corr = train.corr()\nplt.figure(figsize=(15,10))\nsns.heatmap(corr, vmax=.5, annot=True, fmt='.2f', linewidths=.2,)\nplt.title('Dataset showing correlation between different variables in the dataset')\nplt.show()","f7768680":"priceCorr = corr.price_range.sort_values(ascending = False)\nprint('Most Positive Correlations\\n',priceCorr.head(),'\\n')\nprint('Most Negative Correlations\\n', priceCorr.tail())","5f52e8db":"sns.countplot(train['price_range'])\nplt.show()","cbb5d6e6":"train.head()","ee8fcae1":"priceCorr.head(6)","dc78d81b":"# Relationship between Ram and Price Range\ndef positiveCorrDiagram(width,y='price_range', hue = 'price_range', data=train):\n    plt.figure(figsize=(15,15))\n    diagram = sns.relplot(x= width, y=\"price_range\", hue = 'price_range' ,data=train)\n    plt.title(width.upper() + ' relationship with Price Range', fontsize = 20, color = 'black', verticalalignment= 'top')\n    return diagram\n\npositiveCorrDiagram('ram')\npositiveCorrDiagram('battery_power')\npositiveCorrDiagram('px_width')\npositiveCorrDiagram('px_height')\n","cbac74eb":"maxMemory = np.max(train['int_memory'].unique())\nminMemory = np.min(train['int_memory'].unique())\n\nprint('Max Memory: ' + str(maxMemory) +'\\n'\n     'Min Memory: ' + str(minMemory))","e5ce2074":"plt.figure(figsize=(15,15))\nsns.pointplot(y='int_memory', x='price_range', data = train,)\n","779b6a00":"plt.figure(figsize=(7,8))\npx.pie(train['three_g'].value_counts().reset_index(),values= 'three_g', names = ['3G', 'No 3G'] , hole =0.6)\n#dualplot = px.pie(train['dual_sim'].value_counts().reset_index(), values = 'dual_sim', names = ['Dual', 'Not-Dual'] , hole = 0.5, color_discrete_sequence = ['#C2A7B5','#DE1A82'] )","485ab673":"plt.figure(figsize=(7,8))\npx.pie(train['four_g'].value_counts().reset_index(),values= 'four_g', names = ['3G', 'No 3G'] , hole =0.6)\n","2b909d41":"generation = train[['three_g', 'four_g', 'price_range']]\ngeneration.head()","15982592":"fourthGen = generation[['four_g', 'price_range']]\nthirdGen = generation[['three_g', 'price_range']]\nfourthGen.head()","41196eef":"pd.crosstab(index=train['three_g'], columns= train['four_g'], values = 'price_range', aggfunc = 'count')","bf5ba414":"sns.boxplot(data = train, x ='four_g',y ='price_range')","1c736744":"sns.boxplot(data = train, x ='three_g',y ='price_range')","0cdecffc":"plt.figure(figsize=(8,8))\nsns.boxplot(x='price_range', y='fc', data=train)","5117b2a5":"sns.boxplot(x='price_range', y='fc', data=train)","041d53fd":"sns.boxplot(x = 'price_range', y = 'ram', data = train)","7568d816":"dualplot = px.pie(train['dual_sim'].value_counts().reset_index(), values = 'dual_sim', names = ['Dual', 'Not-Dual'] , hole = 0.5, color_discrete_sequence = ['#C2A7B5','#DE1A82'] )\ndualplot\n# about half the phones had dual sims","57eaeaf3":"train['px_height'].value_counts().count()","61a8795b":"px.bar(train, y='px_height', x= 'price_range')","f41e189d":"px.histogram(train, x='px_height', color = 'price_range')","bf4a870f":"px.histogram(train, x='px_width', color = 'price_range')","50f2d177":"px.bar(train, y=train['px_width'], x= train['price_range'])","aea3a5bc":"#Only highly correlated values were used to generate this, but features will also be adjusted later to improve the model\n#features = ['ram', 'battery_power','px_height', 'px_width', 'int_memory']","92d409a4":"X=train.drop('price_range',axis=1)\nX\n","9cb51ac9":"y = train['price_range']\ny","db2dfa12":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import accuracy_score\nimport graphviz\nfrom sklearn import tree","ea47fa2a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =0.2, random_state = 1)","4b26be74":"from sklearn.linear_model import LinearRegression\n# Define Model\nlr = LinearRegression()\n# Fit Model\nlr.fit(X_train, y_train)\n#Predict Model\nlrRange = lr.predict(X_test)\nlrScore = lr.score(X_test, y_test)\nprint(lrScore)\nlrMae = mean_absolute_error(y_test, lrRange)\nprint(lrMae)","d996bc4b":"from sklearn.tree import DecisionTreeRegressor\n\n# Define Model\ndt = DecisionTreeRegressor(max_leaf_nodes=200,random_state = 1)\n#Model Fit\ndt.fit(X_train, y_train)\n#Model Preidict\ndtRange = dt.predict(X_test)\n# Model Score\ndtScore = dt.score(X_test, y_test)\nprint(dtScore)\ndtMae = mean_absolute_error(y_test, dtRange)\nprint(dtMae)\n","7c696695":"#dot_data = tree.export_graphviz(X_train, out_file = None, feature_names = X_train, class_names = X_test, filled = True, rounded = True, special_characters = True)\n#graph = graphviz.source(dot_data)\n#graph                       ","3467ef56":"from sklearn.tree import DecisionTreeClassifier\n# Define Model\ndtc = DecisionTreeClassifier(max_leaf_nodes=200,random_state = 1)\n#Model Fit\ndtc.fit(X_train, y_train)\n#Model Preidict\ndtcRange = dtc.predict(X_test)\n# Model Score\ndtcScore = dtc.score(X_test, y_test)\nprint(dtScore)\ndtcMae = mean_absolute_error(y_test, dtcRange)\nprint(dtMae)","db555c1c":"from sklearn.ensemble import RandomForestRegressor\n# Define Model\nrf = RandomForestRegressor()\n#Model Fit\nrf.fit(X_train, y_train)\n#Model Predict\nrfRange = rf.predict(X_test)\n#Model Score\nrfScore = rf.score(X_test,y_test)\nprint(rfScore)\nrfMae = mean_absolute_error(y_test, rfRange)\nprint(rfMae)","4debb5d4":"test.head()","c8197bba":"test = test.drop('id', axis = 1)","65aee57d":"testPrice= rf.predict(test)","6ad93422":"testPrice","b5549c66":"test['price_range'] = testPrice.round().astype(int)\ntest","12046615":"## Do Phones with 4G sell better than phones with 3G","0a4a5a58":"## Decision Tree Regression","36bffa8a":"# Exploratory Data Analysis","795e53b9":"## Adding TestPrice to the test.csv file","412b71c1":"* #### We have confirmed that there are no missing values in the dataset, let us now look through our data to check if all columns are properly formatted","bda564d3":"## Comparing Pixel width and price_range","45abfb26":"#### Feature Selection","ee2d7c49":"## Visualizing the Decision Tree","073c2785":"## Internal Memory comparison with price range","221981cf":"## From this we can see that Random Forest Model generates the best result","fed3c7de":"### This shows the correlations between the feature variables and the price_range, it helps us make a decision of which features to use for our ML model","eafd1c92":"## Linear Regression","1bc4e603":"## Relationship between front camera and price range","053dd12e":"### How does phone height compare with Price prange","252dea12":"## Studying our Dataset","b3366342":"## Price Prediction Using Random Forest","32cbc8a3":"## Int_memory Max and Min","f8a35fa0":"## Machine Learning and Predictions","cd4c41cd":"## Train Test Split\n","16d63c6e":"##### from all the plots we can see that the relationship between these variables and price_range weakens as shown in the table","bf15cb60":"## From this cross tab we can infer that:\n\n1. Where the phone is neither four nor three g it fell into the same price range 477 times\n2. Where the phone is 4G it was never not 3G (Likely because most 4G ohines support 3G) \n3. Where the phone is 3G only it fell in the same price range 480 times\n4. Most 4G and 3G supported phones share the same price_range\n","a77ac7ca":"## Checking for missing values","40eb88a3":"This shows the different price ranges and how they are evenly distributed","5499825a":"#### From this we can see the following\n1. The price range slightly increases with and increase in pixel width in all cases but the price range 2 where there is a slight decrease, where it remains relatively even but there is a clear difference between 0-1 and 2-3 price ranges","86ee5a02":"#### From this we can see the following\n1. The price range slightly increases with and increase in pixel height in all cases but the price range 2 where there is a slight decrease.\n","2411bf20":"## Random Forest","17be27da":"#### From this box plt we can see that, the highest and lowest value of the price-range of all the valuse\n#### An increase infront camera leads to an initial increase in price_range, but it does not really show for the range 1-3 in the diag\n#### Clearly aside from 0 price range they all share similar quartiles and medians, with 0 having the highest outliers, 1 & 3 having the same range of outliers and 2 having the least number of outliers.","c4c18019":"#### How many phones are 3G supported","b1536820":"## Data Cleaning"}}