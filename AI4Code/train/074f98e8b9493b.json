{"cell_type":{"7df654d0":"code","147f4c39":"code","d33277a8":"code","9baed74c":"code","2aee9662":"code","f72a4b2a":"code","9351214c":"code","20eccaf7":"code","8d275a2e":"code","19fee06e":"code","0552f1cb":"code","50b732a2":"code","98cc2f98":"code","24dee44c":"code","23c70a25":"code","48239241":"code","4eedafa8":"code","dad8747c":"code","627ddac7":"code","63deadb9":"code","7b429fcb":"code","3746acea":"code","b33cf766":"code","09da070f":"code","507a35fa":"code","f69ffe57":"code","79245666":"markdown","7b9588b9":"markdown","69e86a74":"markdown","dd781076":"markdown","e262946b":"markdown","8f1d3807":"markdown","a61b537b":"markdown","57130582":"markdown","3ea16dc9":"markdown","cc388a55":"markdown","f24af65c":"markdown","1d0c6c91":"markdown","165a60df":"markdown"},"source":{"7df654d0":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBw8PERISEhQSExARFhUQERcQFhcVGhcQFhEXFhcWGBoYHSkgGBslHhUYIT0hJykrLjEuGB84ODM4NygtLisBCgoKDg0OGxAQGy0lICUtLy4tLS0tLS0wLi0rLS0tNS0tLS0tLS0vLS0tLS0tLS0tLS0vLS4tLS0tLS0tLS0tLf\/AABEIAHwBlQMBEQACEQEDEQH\/xAAZAAEAAwEBAAAAAAAAAAAAAAAAAwQFAQL\/xABEEAACAgECAwQECwYFAgcAAAABAgADEQQSBSExEyJBUTJhcYEGFCMzNHJzgpGhshVCQ1JikiRUk7HBU7NEY4PR0tPw\/8QAGgEBAAMBAQEAAAAAAAAAAAAAAAIDBAEFB\/\/EAD4RAAIBAgMECAMFBwMFAAAAAAABAgMRBCExEkFRcRMiMmGBkbHRFKHBNEJScvAjM1NikrLhQ4LxBRUkosL\/2gAMAwEAAhEDEQA\/AKk8g+iCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIBrHQ06cA6je1rAMKayF2qRkG1yDtJHPaBnpmWuMY9rXgYVWq13ajZR\/E878l9WePj2m\/yiY+2uz+O7H5SO3H8PzJ9BW\/iv8ApidfRUXIz6dmVkBZ6biM7R1atxgOB5EA+2dcU1ePkcVarTko1ldPSS+q3c9DLlZsEA1KuGKirZqXNSsNyIo3WuvmFJARfW34SzYSV5mOWJlOThQW1bV6Je77kcOs0i8l0xYed1zkn3V7QI2obl8zqo4h9qpblFfW4Gr0bcn07J\/VRa2R7rNwP5RtQeq+fuc6LELONS\/Ne1hqOGKUa3Tv2ta87FI22VjzZcnK\/wBSkj2TjhleOaOwxLUlCstlvTg+T49zMyQNYgCAIAgCAIAgG3wvg6W0O7Ei59w0qj981Lvs9vLkPXLY07wvv3eB5+IxcqdZRS6qttPhtZL3MSVHoCAIBrinT1aei162se5rgcWbABWygcgpz6UttFRTa1uYXOtOvOEZJKKW6+viQ\/GtJ\/ln\/wBc\/wDwkdqHD5k+ixH8Rf0r3OrqtH46d8eq8\/8AKRtQ4fMOliP4i\/p\/ye102jt5V2vS\/gNSAyE+XaJ6PtKzuzB6O3Mi6mIp5zipL+XXyf0ZR1ukspcpYpVhz8wVPRgRyIPmJCUXF2ZppVYVY7UHdEE4WCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIBpfByhbNXQrc1Lgkee3LY9+MSykrzRlx03DDza4euRR1Goa12sY5ZyXY+snMru3my+EFTioR0WRHBMQBANTg9SIr6mwBlqISpW6PqGBKg+aqAWI9Q85ZDqrbfhz\/wYsVKU5KhB2cs2+EV9XoihqL3tdndizscsT1Jlbd3dmqEI04qMVZIigmIBNpNU9LrZWdrqcgj\/Y+YPlOxk4u6K6tKNWLhNXTL3GtOnyd9Q21XgnaOldynFiD1ZII9Rk6kUs1ozPhZy61KbvKO\/itz9zLlZsEAQBAEAQD3VUzsqqMsxCqPNicATqTbsiMpKMXJ6LM1+K6006itajldFtrrPgzo2bG+8+73Ylkp2nluMWHo9JQk6mtTN8np5Irce06pcSnzVwF9X2dnPHuOV+7I1I7Msi3B1HOlaXaj1XzXvqZ0gahANbX\/AELR\/X1P665ZPsx8fUxUftVXlH0Zkys2iAIBs8Is+Mr8UsPM5OlY\/uXddmf5H6Y8Dgy2HXWy\/AwYmPQS+Ih\/uXFceaMdgQSCMEciD4EdRKjcnfNHIOiAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCATaPUtTYli+lWwce0HOD6p2MtlpldWmqkHCWjVjT1vC+23XaUdpUe81a87KSeqsvUrnow5Ylkqd846GSjiejtSr5SWSe6Xjx7jGlRv7xAEA1uKdzT6SrzR9S3raywqp9y1ge+W1MlFGLD9etVn3qK8F7syZUbRAEAQDW0Xf0epQ\/wnq1C+8mp\/yZfwlizpvuZirdXFU5fiTj9UZunGXQHoWUH2bhIQ7SNVR9RvuZa44gXU6hVACrdaFAGAALCAAPATs+0+ZVhG3Qg3rsr0KMiaDq9ROx1RyWjL\/wAIK1XVahVAVVtcAKMAAMcADwnanaZnwcnLDwb1sjPkTSa\/AfkhbqT\/AAFxXnx1FmVT8O833RLafVTl+rmHGftHGgvvPP8AKtfPQyJUbjWT5fRkfxNI28evT2kBv7XwfY5lmsOXoYX+yxV90\/7l7r0MmVm4QDW1\/wBC0f19T+uuWT7MfH1MVH7VV5R9GZMrNogCAekcqQynDKQynyYHIM6nZ3OOKknF6M0\/hQgGpdlGFtCXj\/1K1c\/mTJ1VabMf\/T5N0EnqrrydjKlZtEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQD3VYyEMpKsOhUkEewjmJ1NrQjKMZK0ldGl+3bH5XpXqB0zYuHx6rEw345k+lb7SuZPgYRzpScOWnk8vQ7ZoablZ9MXDIN9lNuCwUdWrYemB5YBhxTV4+QjXqUpKNe1nkpLS\/Brd6GTKzaanHRy0p8Dpase57AfzEsqarkjHg9an536Iy5WbBAEAQDX4R9H132VY951CSyPYl4ephxP76j+Z+hm6X00+sv6hIw7SNdTsPk\/Qt\/CD6Xqftrf+40VO2+bKcH9np\/lXoZ8iaTq9R7Z2OqOS0Zo\/CT6XqftbP1mSqdt8zNgfs1P8qM2QNRr8X+Rqo037wHxi\/7WwDap9apgfeMsqZJR4ephw37WpOvu7K5L3ZkSs3F\/gmrWm5S\/wA04NVw86XG1vwzn3CTptKVno8vMzYuk6lJqOqzXNEHENI1FtlTda2K58x4H3jB98jJWdmWUKqq041FvK84Wmtr\/oWj+vqf1VyyfZj4+pio\/aqvKPozJlZtEAQBANf4TfOVDxGm04Pt7Ef+8srdrwRhwH7uT\/nl6mRKzcIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIAgCAIBd4Jayamhl6i1B7iwUj3gke+TpO00Z8XFSoTT4Mi4jWqXWqvorY6r9UOQJF6k6EnKlFvWy9C9qB2ujqcddM7Uv9Sw9pW3szvWTlnBPhkZ6f7PFSi9JpNc1k16MyZWbRAEAQDXA7LQnPpauwY+xpzz97tj7st0p24\/Qw36TF5aQXzl\/gzdN6afWX9QkIdpGup2HyZb+EH0vU\/bW\/8Acadqdt82U4P7PT\/KvQz5A0nV6j2zsdUclozR+En0vU\/a2frMlU7b5mbA\/Zqf5Uc4DplsuBf5qoG+77OvmR7zhfvTtNK93osxjKjhStHtSyXN+2pLqOPPY7O1OlLMSxLVAn3knnDqt5tIrhgIwioqcrL+axH+1z\/0NJ\/orHSdy8ifwa\/HP+pj9rn\/AKGk\/wBFY6TuXkPg1+Of9TLHGbPjNNWpwocf4a8KMAMozWwHrTl92dqdZKfnzKsLHoKsqG7tK\/fr8\/UxZUega2v+haP6+p\/XXLJ9mPj6mKj9qq8o+jMmVm0QBALPDtG19tdS9bGC58h+83uGT7pKEdqSRVXqqlTlN7ibjurW\/UW2L6BbCfZqAi\/koictqTZXg6TpUYxets+bzKEiaRAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBALnDdAdQWVWUWgZrRuXaHxVT03Y548ZKMNrTUz166o2lJdXe+He+4qMpBIIII5EEYIPkR4SJemmrrM5B01+B1dl\/i7Biuok1A8u01A9BV8wDzJ8MS2C2eu\/Aw4ufSf+PDV690d7fPRGSzEkk8yeZ9plRtSsrIucK1wpY7hvqsU13J03Vny8mBwQfMScJW10KMTQdWK2XaSzT7\/Z7z1xHhhqAsQ9pp29Cxf0uP3HHkfdE4bOe7iRoYlTexPKa1XtxRQkDUIBo8O4ZvXtbSatMvpOern+SofvsfwHjLIw3y0MtfE7L6On1p8OHe+C9SLiuu7ezcBsRQK6kHRKl9FfX558yZGctp3J4eh0MLXu3m3xZUBI5jqOY9sinYuaurM1fhKmbu3X5rVAXof6iPlF9qtkY9ksqrrX3Mx4CVqfRPWGT+j8UZMrNpocL0Af5WwlNNWRvfxZvCtP5nP5dTLKcfvPQyYmvsrYhnN6Lh3vgj18JPpep+1s\/UZyp23zO4H7NT5Ilb5DRgfxNW24+rT1Hl\/c+T7Ekn1YW45la\/a4q+6C\/wDZ+yMiVG4QBANf4PEWNZpj6OpXYufC9e9Ufxyv3pbTzvHj6mHGpwUa61g8+TyZksCCQRgjkQfA+IlRuTTV0auv+haP6+p\/XXLJ9mPj6mKj9qq8o+jMmVm0QCXTad7WCVqzueioMn8p2MXJ2RCpUjTjtTdl3mpYy6NHrVlfVWjZYyHK1Vn0q1Yek56EjkByHjLG1BWWr19jElLFTU5K0Fmk9ZPi1w4GNKj0BAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEA6D+PX3wGr6mmeNu4Avrq1GBgNaCHx5dohDH35lnSX7SuYvgoxd6UnHuTy8ndHF4nUvNNLQD5ubbB\/a74\/ERtrdFep14apLtVZW7rL0RV12utvYNYxYgYXoAq+SqOSj1CQlJyd2X0aEKUbQVvrzZWnC0QCzotfdQSanZCeTY5hh5Mp5MPaJKM3HQqq0KdVWmr\/AK3MtNxRG9PTadj5oHq\/EVuB+Ultp6pFCwso9ipJc7P1QXiqJ83p9Oh82V7SD5jtWI\/KOktokHhJS7dST8l6JFirifxodlq36kmm4gfJOcd1sfwjgcvDrJKe31ZeD\/W4qlhvh30lBc48V7+pl63SWUu1dg2uvUf7EHxB65lTTTszbSqxqwU4PJkE4WF3RcTsqUphLKmO5q7V3Lu\/mHiresEScZtK24z1sNCo9q7UuKdmSjiNI5rpaN39TXOP7S+J3bjuiQ+HqPJ1ZeFl87FfW6+24gu2QvJFACqo8lUclEi5tu7LaWHp0k1Fa6vVvmyPWalrrHsbG6xi7Y5DJOTicbu7snSpqnBQjosj1rNW9xUtgbUWtQowAiDAA\/39pM7KTk7sjSpRpJpb22+bK8iWiAIB6RypBBwQQQR4EHIM6nZ3RySUlZkms1JtsexgoZyWbaMDceuB+cN3dyFKmqcFBaItU8VZa0qaumxKyzJ2qsSC5BbmGHkJJTytZFM8KnNzUpJu17NbvA7+1F\/y2l\/ts\/8AsjbXBHPhZfxJ+a9jo4qo\/wDDaT3o5\/IvO9J3IPCt\/wCpPzXseb+M6hlKBhXWeqUKtSn27AC3vzOOpJ5HYYOjGW01d8W7+pnyBqEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEA1qNbXdV2OoODWD8XtwWK\/+U4HMofD+X2SzaUlaWu5+5inRnSqdJSWT7UePeu\/1MmVm0QBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQCxpdStec1V2ZxjtN\/LHlsYfn5SUZW3FVSk52tJrlb6pmlxuyquxqkopUbayGHa7gXqRzjL46sfCWVGk7JGPCxqTpqpKb35Zbm1wPXGeCOL7xWqAKzstYdd\/ZA5yEznGOfsidN7TsMLjYOjDbbvkm7O1+Zn6bh1lih8oiElVa11rDMOoXceeMj1StQbVzVUxEIS2c2+5N252K99LVsyOCrqcMD4Gcas7MthOM4qUXdM17Ur09VDfF1tS1A9ljmz0ySDWpRgEK4x4nMtaUUsrmCMp1qk49JstOyStpxd83cgThe\/TtcuwZtCKGtrGK9jkg7iO9kD1nriR2LxuuJY8TsVlTd+zn1XrdfIip4Tc6gjZllNiIXQOyAZ3KmcnkCfXicUGyyWLpxlZ3ydm7OyfezzRwu10WzuLUxKh7HVBuHUd49YUG1c7PFQjNwzcuCTZd4Xwhu1tW1UzRW9hR7FUM23KZO4ZTmDkHGMc+clCm9p33GfE4tdHF02+s0rpN247te4qnh9lhd8U1oGCk9oq179oO1WLHccc+ROJHYb4F3xEIJR6zfJ3txeR5ThGoaw1BM2Be0wCOaYB3Kc4IwRzBhU5XsdeLpKn0jeV7eJ0cJsJbBq2oAXftU2DdnA35xu5Hl1jo2Hi4WWTu9FZ38uHeScX0fYpphhQzVszFSGDfLuFbIOD3QJ2cbJEMLW6SVR7r5X3ZI5o6Kq6TfavaZc1VV5KgsqhndiOe0blGBjJMRSUdpirOc6vQ03ayu3r3JLvJ9KKdWTWKkqv2s1RqL7WZVLbGVmPUA4YEc8TqtPK1mQqOphrT2nKOV72ur700l5GXfp2rCMwwLE7ROecpuK59XNTK2mjZCpGbkludnzLP7Ku7SyshQaudpZlVVHLGWJxzyPbJdHK7XAq+Kp7CmvvaZZvwOHhd29UAU71LqyspQoM7m352gDBzk8sRsO9h8VT2XJvTK1s78Ld+4s8N4QX1FVbNWyWEEmu1DlQcMAc9fV1nY07ySZVWxajRlON01xTI6tC6V2sUqsATmVurY199RvARznmcdPGFFpPL5nZV4ynBKTWf4Wr5aZo80cIucIRsBsGa1exFZx4FVY5OfDz8JxU2yU8ZTi2s8tWk2lzZHpuGW2KzAALW2yw2MqBWwfS3EY6Y9s4oN5kqmKpwaTebV1ZXv5Ees0b0kB8d5Q6lSGVkPRlI5Ecj+E5KLjqTpVo1U3Hdk9zRNwbTLZZlxmqpWut8Mog9H7xKr96Spxu89CvFVJQp2h2m7Lm\/ZZnrimiC3Ba\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\/wDySaklus\/kVSpzpTmm7qcXu3pd3FEWlsX45qDkbW+Oc8jB3V245+Ocici+u\/EnUi\/haaS\/B6on0VRsrQahKjQtZC3B1D1qAxVeTd4g8tjKTznYptdZZcSurJU5y6Fvav2bZPv0yy3pnjSapPiotLAX6dLNMgz3iLiNjD6oe78pyLWxfesjtWnL4jo0urJqT\/26rx6pJxLWVipbVIazVtXZeo8OxGGU+W6zve6dnJWvx+hGhRm6jpvJQTSf5tPJZE2ssu7Z9RUNKayzWpaeyBw2SAcndv54xjOZ2Te1tK3MhSjT6JUqjne1nHP20MfiDg6fSKDnbXbkZ6E6hzz8uWPylU+zH9bzfQVq1V96\/tRpaq1S+r7y89JQo5jmwGmyB5nkeXqMsbzfJfQyU4y2aWX35f\/AEQcKY9lSqH5Qa2t1AG4jFY723xGR+U5Dsq3EniUulm5adG18+JY19C41A0wpYPln2agWt2KPv7ilVIHdBPpHAnZLXZ9SujN7VN1m8tLxtm1bN3fJaFD4MOF1dBJAAfmScAd09SZCl20asem8NNLh9SOngtvLtDVUn7zvZWQB7FYlj6gIVN7zssbD7icnuST9jRsFWqe65E7VgyV11u4rxQtW0WtzBb0AMAjGecm7SbaVzKnPDxhTk9lNNtpXzbvZcNSdmU6mpQagTo2pAR8oLTRYoQMSfHA5nynfvrkV2kqEm7\/ALy+aztdZ2KWk4VtRia0tvV9rIbVUImwMHbawzkkj0gBtOZCMLLi+ZoqYpuatJxi1rsvN30V19My3qnsNzCkUWqaNOtlZYMjBal9DcwZtpHUHIk5N7WVtEUU4wVJOo5Re1KztmrvflbNd1jlfZVtfVWKlsuqqbZYyuguV9z072ODywRk9RjMKyvFb0v+BLpJxhUndqMnmlZ2aylb9ZFc2W1Pp1tFNSC9LStewEEMoLsEJwMeflI5qydlmXKNOcZypuTey1d38lcocZ0r12vux33dlwytld5we6TgH1yE4tN3NOFqxnTWzuSTyfAoyBpEAQBAEAQBAEAQBAGIAgDEAQBiAIAgAicAnQDAEAQCfRap6W3IQCQVYEAhkYYKsDyIPlOxk1oV1aUasbS\/45EE4WCAMQBAGIAxAEAQBAEAQBiAIAgDEAQBAJdNe1Tq6HDodyn1+\/rOptO6IVKcakXCWjLT8UOGCV01FwVZqlIJU9VG5iFB\/pAktvgilYVXW1KTtmk3v46K\/iUJA0jEAEQBAGIAxAEAAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQcEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQBAEAQD\/\/2Q==',width=400,height=400)","147f4c39":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcR3ryD2KDjHpKTy6WVvQtFXn0T7WluWJSWAKPpFe6ln5cHAz4Xc',width=400,height=400)","d33277a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9baed74c":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMSEBUQERATFRUQFxcZGBUXGBUXGRURFxkYFhgVFxUdHSggGR0nGxoVITEiJiktOi4uGCAzODUsNygtLisBCgoKDg0OGhAQGCshHyU1Mi8tMjUuLi0rLS0rLS0xLy43LysuLS0tOC81LTAuLS0tLS4uNy4yLS8rKy8rLS0vK\/\/AABEIAJ8BPAMBIgACEQEDEQH\/xAAbAAEAAgMBAQAAAAAAAAAAAAAABAUDBgcCAf\/EAEoQAAICAQIDBAUGCgkBCQEAAAECAAMRBBIFITETIkFRBjJhcYEUQlJykaEHFSM0YoKSsbPBJENTVGOT0dLhM0RzdIOio7LT8Bf\/xAAaAQEAAwEBAQAAAAAAAAAAAAAAAQIDBAUG\/8QAMBEAAgECAggFBAIDAAAAAAAAAAECAxEhMQQSE0FRYdHwcYGhseEiMpHBUvEFFUL\/2gAMAwEAAhEDEQA\/AK+IifXgREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBESVodA1uWBVUT1rHO1Fz0BPiT4AAk+UhySV2CLEsfkmn6fLD7xS+37Swb\/wBMx6vhrInaKyWVk47RCSA30WBAZD7GA9mZVVI3t+mvcEKIn1EJIVQSScAAZJJ6ADxMuD5Es24SE5X311HxQZssB8mVMhT7GIM8jSac9NWQf0qXA+1WY\/dM9rHdf8MFdEmavhr1r2mVesnHaVtuTPkT1U+xgDIcvGSligIiJIEREAREQBEm38LdNOmoONlrEAeI64JHgDtfH1TIUiMlLICIkzQaHtFsc2Ki0qCxIY+swQYCgnqREpKKuwQ4k\/5HT\/fE\/wAu\/wD2T6NFSf8AtlfxrvA+3ZK7Rc\/w+gK+JO1HCbFQ2KUsRer1MHC\/WHrJ+sBIMtGSlkwIibH6O+iF2qHaEiuo9HIyW+qviPbkfGVqVIU1rTdkDXInSR+DenH5xbnzwmM+7H85rfpH6HXaVTarC2sdWAwyjzZfL2g\/ZOenptGctVMGtRETrAiJsXo56I3asdpkV1eDkElvPaviPbkfGUqVI04603ZA12J0j\/8Am9OPzi3PnhMZ92P5zWPSP0Su0g7TIsq+moIK+W5fD385hT02jUlqp4g16IidQEREAREQBLTjR2rRQPVSpLCPO25Q7MfbgqvuWVcuAF1NaLvVL6lCAOQq3Vj1MOeSuPVwcZGOfKZ1MGm8l3cFPPaWsAQGIDjDAEgMAcgEePPnMms0dlR221sh8NwIz7j4j2iYJdNSWGIEuGs+S1KE5X3ruZ\/Gqlh3UU\/NZl7xPXBA85X8O0\/aXV1H+sdF+DMB\/OZOMajtNRbZ9J2x7FzhR8FAHwmc1rSUXln0BDiImoJOg1r0tuTBBGGU81dPFHXxEzcX0ioVsqz2V67kzzK88NWT4lWyPdg+MgS0r7+hcf2FyMPYtqsrAfFEMyn9MlJeDBVxLDg1Ssbdyg7aLiMjOGCkgj2iV80UrtoCIk\/W1qNPp2CgFhbk45nFhAyfHlyhys0uPR9AQJn0Ola21Kl62MFz5Z6k+wDJ+EwS04d+Sot1Hzm\/I1\/WcZsYe6vl\/wCYJWpJqOGe4E2rVrfqLNOvKq9RVVnopq\/Nz8SMH\/vGmvkY5EYI8PI+UKSCCDgjmCPAjoZZ8eUM66lRhdUu846C4Hbav7eT7mEpGKpySWT918ewKuWnDPzbV\/Uq\/jJKuWnDPzbV\/Uq\/jJLVft817oFXERNAZdLqXqcWVsVZehH7j5j2HrJ3EaVetdVWoUM2yxB0S7GQVHgjDJA8CGHlKyWnBTuTU1Ho9DP+vSRYD9gcfGZVFb61u9u8QYOC6MXaiqknAscAnp3erc\/PAM6P6ccbOkoSmghXs5DGO5UoAyB4eAHx8pyvETOtoyq1Iyk8FuBn+W27t\/a2bvpb23ftZzOqehHFG1ekIuwzIxrYnHfXAIJHuOD7pySda9EdGNFoC93dJ3Wvn5owMD37QOXmZzf5JQ2awxvgDl\/FNMKr7ah0rsdR7gxA+6RZm1uoNtr2nrY7Njy3EnH3zDPQhfVV8wWXo7w35Tqa6fBjlj5IvNvuGPjOh+m\/Gzo6Eqowr2DauMfk61wCQPPmAP8Aia7+C6oHU2P9GrH7TD\/SRvwlXFtbt8K60H25b+YnnVVttLUJZRV+\/QGuDW27+07Wzf8AS3tuz9bOZ0\/0J40dZp3qvwz191s4\/KVsCASPPkQf+ZymbZ+DS4jWlfB62HxBVh+4zbTqMZUW7YrFApPSDhvybU2Uc8Ie6T4oea\/ccfAyum5fhRqA1VbfTqx+yzf6zTZvo03OlGTAiImwEREAREQCZpOKXVDalh2f2bYdD762yv3SUK69SrFKxVdWpfaueztRRltqn1HA54HIgHpKmWno3y1Af5tSWu31BW2c+8kD4zGpFRTmsH3+QYOBuF1VDHoLayfdvEj6urbY6HqjMp94JEwrLbji9oV1a+rqPXx83UgDtFPvPfHmG9ks8Jp8cO\/UFVERNAJaaTloryfn20KPrAWsfulWJbcXHZVV6T5yE2W+y5wAE96oAD7WaZ1MWo8\/bEHjgXW7\/wAPf\/8AAyslnwH17R4tp7wPaezJ\/cDKyI\/e\/ICWWv8AzbS+67+KZWyy4gP6Npfat32dqYn90fH9MFaB5TYONcK1A7PTpp7mXTpgla3Ia5+\/YwIHMZwvuQSHwBQrtqGGV0q78Hobc7al+LkH3KZXNaxJJYkk5Jz1J6mVleU8N3u\/j3BL\/E2p\/uuo\/wAqz\/bLDT8NuOltrsotXsfyyM1bqOWFtXJHiu1sf4cotx8z9skcP1rU2paMnYwOPpL0ZT7CMj4xOM2s135gjS04Z+bav6lX8ZJH4vpBVcyKcocNWfOpxuQ\/YR8QZI4Z+bav6lX8ZInJSgmuXugVcRE2AlpwDre3gumvz+suwfewlXLZh2OlIP8A1NZtOPFdMp3Any3uAR7Ez4zOritXiCpiJvnoV6JdNVqlwB3krb7Q7g+HiB8TK168aMdaX9g++hPopjGr1IwB3kRuXTmLHz08wPjK7039KflJ7Ck\/kUPNv7Vh0P1R4efXynv019Le3J09Dfkge8w\/rSPAfofv901Cc1ChOcttWz3Lh33yCIkk8Pu7Ptuxs7P6e1tvv3Yxj2zucks2DbfwWP8A0i5fE1g\/AN\/zIH4R0xr2P0kQj3YK\/wApE9C+IijWVsxwr5Rj5Buh\/aCzafwncKZlTVIM9mCr48EJyre4HP7U86T2emJvKSBzqbR+DevOuB+jW5\/cv85q86P+DLhLIj6lxjtcKmfGscy3uJx+zN9NqKFGV9+AK38Kbj5RUPEVk\/ax\/wBJpUu\/TLiIv1ljqcqmEU+YXqfcW3H4ykl9Fg4UYp8AIiJ0AREQD1W5Vgw6qQR0PMHI5HkZaWrRf31ddPYfWRg3YlvEoyglPqkYHgZUxKyhfG9mCxHCx87VaYDzDsx+CqpJn3U6utKzRRuIfHaWsNpswchFXPcTPPzJAz0xK2JXUu\/qdwJL4frzVuUqHrs5PW3quB0OeqsPBhzEiRLyipKzBZtpKH51agV5+ZeGGPdagKt7yFnkcLHztVpgPPezfYqqSZXRKakl\/wBP0BsPD66kR20rG3UV8wXXbhMHc9FeTucfpcwOYHKa+Wyck5J5565J8c+M9U2sjB0YqykEEciCOhEs9Wi6hGvrCrYgzdUMAMPG6seX0l8OvSVS2crvG+\/vcCBoNW1VqWrjKHOD0I6FT7CMj4ybboaXO6i+tVP9XaSjJn5u7G1wPMH4SriXlC7unZgs001FfettW0jpVUWwT+naQAo+rk+7rPvGOJdvXTkjcgsBUDCopfKKo8guMSriRs8VJu7QLC7UqNKlKHLOxst5HkRlK0z44G5v1\/ZK+Il4xsBERJBYanUrZp6gT+VoLJjB71By6nPTutuHuYeU98JsTstRW1iobUQKW3YytiuQdqkjkD4SsiZumtXV8\/W4J\/4uT+96f\/3\/AP6oHD08dZp8e68\/d2UgRJ1Jfyfp0BaJZpqeahtQ46F12VA+ZTJaz3HaPMGQNTqGsc2WMWZjkk+J\/wD3hMUSYwSd82C49FH066pX1RArQEjIJBsGNuQAc+J+E6Nd6W6B1KPerK3UFLCCPIjbznIYnNX0OFaWtJsHVPx3wn\/A\/wAg\/wCyffx3wn\/A\/wAg\/wCycqiZf66H8pfn4BZektlLaq1tPt7JiNu0bR6q7sLgY726dFf0u0fyXO8epjscHdnGNmMdPDPScoibVdEhUjGLb+kHwCb76M+nKrWKdXkhRgW43ZXph16n3jOfHzmhxNK1CFaOrJA6h2vB89p\/Rs9cYP8ADxj7pVek\/pyroadJkBhg2kbe75IOo95xjw85okTCGgQUlKTcrcQIiJ2gREQBLTQ1ad0sZkuzTWHOLEAY70rIA7I7fXz1PSVcm8PsATUAkAvSAufFu2pbA9uAT8JnUV13xBIHDRbT2tCP\/wBUqdzqQqhFPN8KMliZDTh9pdq+zO6v1gcLsxy7xOAvPzmVrV+SBMjd27Nt8dvZqAce\/IltZrEfta1aks40rA2EbG7OjY67iQAwY+J8G8Zk5zje3eKBr+ooatijqVYeB9vMH2gjBzLDU6WmpUFguLW1K4dSgXLDcAEI7wHIE7hzz5SPxW1mdQxqOxAo7L1QuSduehIyeYyPbLPhjmsAPqan0xBLVFw2SQe6tLd5X3fOAHnmTOT1U+uPfAEHU8HtRam2Me2UHAGe+XdVUAcySFU\/rTFZwu5WVDWc2EhcEHcw5FQQSMjIyPDMnJTXYNKXtRUSvY\/fUOHFlrAbeZAO5e9jAz7JO0WoqrOnBNNezUh2CWGwKm1RuZ9xXw+afASjrTXPPd48wUVvDLlAJqbvHaOnr4yFPPutjwODJnFODMl3YV1WEpuyzFcPswGcDACLnzJ6jnImksA0tyEjc5pIHidvabj8M\/fLLVXpZbrUWxB8os3I5ICMFtLbd\/QZBBBPLKiWlKopeHJ8sc91\/QFYeG3bxV2TF2G4KOe5cE7lxyYcj08p6\/FF2WHZ80xnvJgEjIG7OCT5A5llRqFrWuo2oWrq1eWVgVVrayErVxyJyM8vF5EVBbpq61srRqnsLK7BMhwmHGfWxtIIGT05c5O0n5eD5458vUEfjOlFNz1jOE29eoJRWIPxJki\/TUUns7ha9gA37GRFrJAOwZVt5GefQZ5e2YuP2K+odkYMpCYYdDitRn7QZK4hSuosN6W0r2uC6WOtZSwjvDvY3LnJBXPI9Mxd6sdZvLHxw+QRNbw4qd1ZL1msWBsYIrLbO8M8iHypx4zBXpLG2bUY9qSEwM7ivI4Hsl9qMIX0e9Rt0wRXYhUssNy6gsGPIKe8FJ64HTM+abUV1LTW1lRbs9ShOd6I9uNu4jqD0JGRgnriVVaWrhj0tmCmfhtoZU7Mk2Z24wwbHXDKSOXjz5eMz6XgtruUKkYrdwRtYHarFQGBwcsu3rJS6ixCiB9Gvec7VKlTlChFjDKgMpK4JHtx1nqsUrYApqRraL1cLZuqW1ldUAsJIGRtz3iBnr5HVnb47\/YK\/UcPZEXdVaHdyAeRVhgYVQOZfJ+8THqeG21gF6yATtzkEb\/okgnDew85a8N1VdK1K1i5TUW5KndtV6UQWDHUBsnI+jykehFppsVrKmNpqChHV+SOHNhI9UYBAzz755dZKqTWHXHH9Zgiajhd1alnqZQhw2cZXJwCy5yAT0JGDI+moax1rQZZ2CgfpMcCWtmpT5RrW3jFq3BTn1s2qy48+Qz8Jg4LetRsubBZFxWhJBZ7O6WGOeFTec+ZWXU56rbWPUHzjGgWuxexY2V2juMcZLBijD9oEj2Msxajhd1alnqZQpAbOMrnkNy5yoPgT1k2jV1PV2exKjTYtid5juBKpYmWJxyCNgfQM+PqENutO8YtW3ac+uTcjDHnyGfhKRnNYcPXHlyBE\/FN\/d\/JNlyAByzluagrnKk+GcZkZaGKGwKdikAt4BmyQPuMuNbaNpvZqflCujJZU+TYQclrKwe70BzhTnwMl2aqhrPk4sC0akO7t4V22EWKD9TYi\/rNI207ZdrP45goquHWsSAh5KrEkhQFcZQliQBkHlnrPVXC7mZkFTbqyAwPLaTkjcT0HI85a\/jAXJaAKQzXdoq3FVU1bRWqhiQAUAAwT0Y4kfVavNV6M9ZYnTKBX6pSsOMD6QXuDPsHskqpUeFlu\/QIjcPZiiV1WFyhLDutu2uykoB83lj3gzHbw61WVDWc2epjDbjnBClSQTn7JZU6pAiDeuRo7kPP57WWkL7yCOXtnvgVq7aVLDuW6hnH0aDTWGY+IBAcZHlyyeUOpOKb4X48wVWp4fbWod0IUnAYEMpPkGBIz7Jn0unqGnN1i2Me1CAI6py2FsnKNnpMnEax2C9kazVW5ztZ2btbF5bt6Icba8DA8DmNMofSGsPWGFwbDuid3syuRuIzzk67cbvj4AxXaJWrFun3kbwjVthnV2BKYKjvhsMByByMY5iefxRcHRGQjtG2g8jzGNw5HkQOZB5ybplqRRp3uU9vbWbGQ5WutN2BvxgsSx5jIAHj0mR7a0qRcUoV1Nbla7DaezVWBYtuKn9X4gcpXaTWC8sO\/YFffwi0WvWEJ2ZOTgDYGKhixOFzjxMxpwy0uydmQ1eN2cKFz0yxIAz4c+fhLGzSV9pexemxi+5F7ZVQozPlmcEZI7vd3A972YmbUXhrGVDpnrNenDI7lFLJUFyjswYFTuHrZ59DG2nkuHDw59AU9XDrWLAVnNZw2SFCt0CksQM9eUz0cHtaux9jA1MqlcYOTu3A56EYH2ywayo1tTQaSK7nYC4gBq2VFBV2Kg42kc+ZBHtmE2dquoRrad7NQQdwRGWtXQ7S2M4BX2nBxmNrN8st3NApIiJ1AREQBERAEREAREQBERAEREAREQD3ZczBVZiQgwoJztBOcDyGczxEQBERAEREAREQBERAEREAREQBMmnvZGDoxVl6EdfL90xxDVwSNVrrLAA7ZCnIUBVXJ6naoAz7ZHiJCSSsgIiJIEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERIuBERFwIiIuBERFwIiIuBERFwIiIuBERFwIiIuBERFwIiIuBERFwIiIuBERFwIiIuBERFwIiIuBERFwIiIuBERFwf\/\/Z',width=400,height=400)","2aee9662":"df = pd.read_excel('\/kaggle\/input\/the-2019-ai-index-report\/AI INDEX 2019 PUBLIC DATA\/3. Technical Performance\/Compute Economics\/STANFORD DAWN\/SQuAD.xlsx')\ndf.head()","f72a4b2a":"plt.figure(figsize=(12,4))\nsns.countplot(hue=df['Hardware'], x=df['Framework'])\nplt.show()","9351214c":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nlowerdf = df.groupby('Hardware').size()\/df['Framework'].count()*100\nlabels = lowerdf.index\nvalues = lowerdf.values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.6)])\nfig.show()","20eccaf7":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSDIyP1tv8y7KppXWWpa5c4conAN0NgHaehZaJcxmdFuYxevNqa',width=400,height=400)","8d275a2e":"plt.figure(figsize=(8,4))\nsns.scatterplot(x='Hardware',y='Framework',data=df)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\nplt.show()","19fee06e":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSG6jXVip8j-Q8S5Uqklcc2X9Qr3bBEikkCZ5MPhZsnVKrlrDZM',width=400,height=400)","0552f1cb":"df.plot(subplots=True, figsize=(10, 10), sharex=False, sharey=False)\nplt.show()","50b732a2":"sns.countplot(df[\"Hardware\"])\nplt.xticks(rotation=90)\nplt.show()","98cc2f98":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Hardware)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","24dee44c":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Framework)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"purple\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","23c70a25":"df1 = pd.read_excel('\/kaggle\/input\/the-2019-ai-index-report\/AI INDEX 2019 PUBLIC DATA\/3. Technical Performance\/Vision\/Image Classification\/ImageNet\/CIFAR-100.xlsx')\ndf1.head()","48239241":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRjaMxHoOMBcR2H__jl5anE9uFJduN1n93kh5a9A4Kjso8fuaiK',width=400,height=400)","4eedafa8":"plt.figure(figsize=(12,4))\nsns.countplot(hue=df1['Method'], x=df1['Date'])\nplt.show()","dad8747c":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nlowerdf = df1.groupby('Method').size()\/df1['Date'].count()*100\nlabels = lowerdf.index\nvalues = lowerdf.values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.6)])\nfig.show()","627ddac7":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRhTOMhK5pwgmOaSHhn3BT_3Gd4t_boUmMfu9dsu7IB5t9L9C6n',width=400,height=400)","63deadb9":"plt.figure(figsize=(8,4))\nsns.scatterplot(x='Method',y='Date',data=df1)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\nplt.show()","7b429fcb":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcTdLbkki6tFpFTYfLKThlUP3J5Vdu20PkqU-9nrCv5rE7da8h8G',width=400,height=400)","3746acea":"df1.plot(subplots=True, figsize=(10, 10), sharex=False, sharey=False)\nplt.show()","b33cf766":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcTCfWGJcGFufnDc1ywfcNl1e7exq2IAcqb4XkuEY5lzOuWKdBBo',width=400,height=400)","09da070f":"sns.countplot(df1[\"Method\"])\nplt.xticks(rotation=90)\nplt.show()","507a35fa":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df1.Method)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"green\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","f69ffe57":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQyNKezpg9qr4tDiQpuxQ6wDGG5I3BmfnQkXr7kRcTmdxd3WQTP',width=400,height=400)","79245666":"Image slideshare.net - Fine-tuning BERT for Question Answering","7b9588b9":"What is SQuAD?\n\nStanford Question Answering Dataset (SQuAD) is a reading comprehension dataset, consisting of questions posed by crowdworkers on a set of Wikipedia articles, where the answer to every question is a segment of text, or span, from the corresponding reading passage, or the question might be unanswerable. https:\/\/rajpurkar.github.io\/SQuAD-explorer\/","69e86a74":"Image pythonawesome.com","dd781076":"Image slideshare.net ","e262946b":"Image academia.edu","8f1d3807":"The CIFAR-10 dataset (Canadian Institute For Advanced Research)\n\nIt's a collection of images that are commonly used to train machine learning and computer vision algorithms. It's one of the most widely used datasets for machine learning research. The CIFAR-10 dataset contains 60,000 32x32 color images in 10 different classes. The 10 different classes represent airplanes, cars, birds, cats, deer, dogs, frogs, horses, ships, and trucks. There are 6,000 images of each class. https:\/\/en.wikipedia.org\/wiki\/CIFAR-10","a61b537b":"Image imasters.com.br","57130582":"Image youtube.com - Deep Learning with Keras - Introduction and Decoding CIFAR-10 ","3ea16dc9":"Image slideshare.net","cc388a55":"Image medium.com","f24af65c":"Image medium.com","1d0c6c91":"Image slideshare.net   -   Cifar-10","165a60df":"Kaggle Notebook Runner: Mar\u00edlia Prata @mpwolke"}}