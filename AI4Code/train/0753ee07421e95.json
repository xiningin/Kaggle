{"cell_type":{"939d1036":"code","e2891b4d":"code","78f60fb4":"code","8e763237":"code","31e098b4":"code","2e071b19":"code","5c803ee1":"code","85332a5c":"code","9f028b09":"code","a607f7d8":"code","8f522ad5":"code","d0917cf7":"code","81f93e0c":"code","08734a8c":"code","a749b30f":"code","34435f9f":"code","12f0cd7f":"code","10def751":"code","85ac5126":"code","14644889":"code","546fd8f8":"code","d36d688c":"code","4c80ffa4":"code","d49a0cec":"code","c553f5a0":"code","444e0688":"code","ef7884c6":"code","79038b6a":"code","0cab4678":"code","84b8c1a3":"code","e5236486":"code","3bc2caa8":"code","a25ab19b":"code","97aa0368":"code","58c3ecd3":"code","4cdc681b":"code","79ffab57":"code","ce5a8836":"code","875e8a2d":"code","48906bb5":"markdown","adaed7ce":"markdown","41ff33b5":"markdown","2a62ecdd":"markdown","b17937ae":"markdown","be2e28da":"markdown","c029169b":"markdown","a6c70eb0":"markdown","cc0c9073":"markdown","eb153781":"markdown","984df89e":"markdown","5f1f683e":"markdown","8ec44de3":"markdown","ee75044b":"markdown","9aaa5639":"markdown","d5385250":"markdown","a141320d":"markdown","11a8ee97":"markdown","85753fd9":"markdown","752e72c0":"markdown","1364a31e":"markdown","1a3408d0":"markdown","83d5c2cf":"markdown","603b8ac1":"markdown","3aae6f1c":"markdown","c992895d":"markdown","bb215a88":"markdown","289a5bdf":"markdown","aa8056d9":"markdown"},"source":{"939d1036":"# Install TensorFlow using Colab's tensorflow_version command (only runs these if in colab)\ntry:\n  # %tensorflow_version only exists in Colab.\n  %tensorflow_version 2.x\nexcept Exception:\n  pass\n","e2891b4d":"# Import libraries\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nprint(tf.__version__)","78f60fb4":"# Define class names to display\nclass_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n                  'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","8e763237":"fashion_mnist = tf.keras.datasets.fashion_mnist\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()\n","31e098b4":"# Print the shape of the data tensors we loaded.  Should be:\n#   60,000 training 28X28 images and their labels, and 10,000 testing images and their labels\nprint ('Training data:', train_images.shape, train_labels.shape)\nprint ('Test data:', test_images.shape, test_labels.shape)","2e071b19":"def show_training_image(index):\n  img_label = str(train_labels[index]) + ' (' +  class_names[train_labels[index]] + ')'\n  plt.figure()\n  plt.title('Image Label ' + img_label) \n  plt.imshow(train_images[index], cmap='gray')  # data is grayscale, but displays in color without cmap='gray'\n  plt.colorbar()\n  plt.show()\n","5c803ee1":"img_index = 100\nshow_training_image(img_index)","85332a5c":"# scale training and testing image values\ntrain_images = train_images \/ 255.0\ntest_images = test_images \/ 255.0\n\n# Print the image again and notice the values now range from 0 to 1.\n#   And the image looks the same, just on a different scale. \nshow_training_image(img_index)","9f028b09":"\nmodel = tf.keras.models.Sequential()      # Create a new sequential model\nmodel.add(tf.keras.layers.Flatten(input_shape=(28,28)))    # keras processing layer - no neurons\nmodel.add(tf.keras.layers.Dense(128, activation='relu', name='dense-128-relu'))   # 128 neurons connected to pixels\nmodel.add(tf.keras.layers.Dense(10, activation='softmax', name='dense-10-softmax')) # determines probability of each of the 10 classes\n","a607f7d8":"print('Input Shape:', train_images.shape)\nprint()\nprint(model.summary())","8f522ad5":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n","d0917cf7":"train_hist = model.fit(train_images, train_labels, epochs=40)","81f93e0c":"def plot_acc(hist):\n  # plot the accuracy\n  plt.title('Accuracy History')\n  plt.plot(hist.history['accuracy'])\n  plt.ylabel('Accuracy')\n  plt.xlabel('epoch')\n  plt.show()\n  \ndef plot_loss(hist):\n  # plot the loss\n  plt.title('Loss History')\n  plt.plot(hist.history['loss'])\n  plt.ylabel('loss')\n  plt.xlabel('epoch')\n  plt.show()\n\n","08734a8c":"plot_loss(train_hist)\nplot_acc(train_hist)","a749b30f":"test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=0)\n\nprint('max training accuracy:', max(train_hist.history['accuracy']), '  test accuracy:', test_acc)","34435f9f":"import datetime","12f0cd7f":"# Load the tensorboard extension\n%reload_ext tensorboard","10def751":"# Clear any logs from previous runs\n!rm -rf .\/logs\/ ","85ac5126":"# Start with a fresh model\nmodel = tf.keras.models.Sequential()      # Create a new sequential model\nmodel.add(tf.keras.layers.Flatten(input_shape=(28,28)))    # keras processing layer - no neurons\nmodel.add(tf.keras.layers.Dense(128, activation='relu', name='dense-128-relu'))   # 128 neurons connected to pixels\nmodel.add(tf.keras.layers.Dense(10, activation='softmax', name='dense-10-softmax')) # determine probability of each of the 10 classes","14644889":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n\nlog_dir='logs\/fit\/' + datetime.datetime.now().strftime('%Y%m%d-%H%M%S')\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n\n# We add to the fit method the validation\/test data.  This will cause the training model \n# to evaluate itself on the validation\/test data on each epoch.  This provides per \n# epoch data points TensorBoard can plot so we can see the trend.\ntrain_hist = model.fit(train_images, train_labels, epochs=40,\n                       validation_data=(test_images, test_labels), \n                        callbacks=[tensorboard_callback])\n\n","546fd8f8":"#!kill 1234   # sometime TensorBoard does not show all data.  If it shows reusing previous instance use kill command listed\n%tensorboard --logdir logs\/fit","d36d688c":"# Load the tensorboard extension\n%reload_ext tensorboard","4c80ffa4":"# Clear any logs from previous runs\n!rm -rf .\/logs\/ ","d49a0cec":"\nmodel = tf.keras.models.Sequential()      # Create a new sequential model\nmodel.add(tf.keras.layers.Flatten(input_shape=(28,28)))    # keras processing layer - no neurons\nmodel.add(tf.keras.layers.Dense(64, activation='relu', name='dense-64-relu'))   # 64 neurons connected to pixels\n#model.add(tf.keras.layers.Dense(128, activation='relu', name='dense-128-relu'))   # 128 neurons connected to pixels\nmodel.add(tf.keras.layers.Dense(10, activation='softmax', name='dense-10-softmax')) # determine probability of each of the 10 classes","c553f5a0":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n\nlog_dir= 'logs\/fit\/' + datetime.datetime.now().strftime('%Y%m%d-%H%M%S')\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n\n# We add to the fit method the validation\/test data.  This will cause the training model \n# to evaluate itself on the validation\/test data on each epoch.  This provides per \n# epoch data points TensorBoard can plot so we can see the trend.\ntrain_hist = model.fit(train_images, train_labels, epochs=40,\n                       validation_data=(test_images, test_labels), \n                        callbacks=[tensorboard_callback])\n\n","444e0688":"#!kill 1234   # sometime TensorBoard does not show all data.  If it shows reusing previous instance use kill command listed\n%tensorboard --logdir logs\/fit","ef7884c6":"# Load the tensorboard extension\n%reload_ext tensorboard","79038b6a":"# Clear any logs from previous runs\n!rm -rf .\/logs\/ ","0cab4678":"model = tf.keras.models.Sequential()      # Create a new sequential model\nmodel.add(tf.keras.layers.Flatten(input_shape=(28,28)))    # keras processing layer - no neurons\nmodel.add(tf.keras.layers.Dense(128, activation='relu', name='dense-128-relu'))   # 128 neurons connected to pixels\nmodel.add(tf.keras.layers.Dropout(0.2))  # dropout 20%\nmodel.add(tf.keras.layers.Dense(10, activation='softmax', name='dense-10-softmax')) # determine probability of each of the 10 classes","84b8c1a3":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","e5236486":"log_dir='logs\/fit\/' + datetime.datetime.now().strftime('%Y%m%d-%H%M%S')\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n\nmodel.fit(x=train_images, \n          y=train_labels, \n          epochs=40, \n          validation_data=(test_images, test_labels), \n          callbacks=[tensorboard_callback])\n","3bc2caa8":"#!kill 1234   # sometime TensorBoard does not show all data.  If it shows reusing previous instance use kill command listed\n%tensorboard --logdir logs\/fit","a25ab19b":"# Load the tensorboard extension\n%reload_ext tensorboard","97aa0368":"# Clear any logs from previous runs\n!rm -rf .\/logs\/ ","58c3ecd3":"model = tf.keras.models.Sequential()      # Create a new sequential model\nmodel.add(tf.keras.layers.Flatten(input_shape=(28,28)))    # keras processing layer - no neurons\nmodel.add(tf.keras.layers.Dense(128, activation='relu', name='dense-128-relu'))   # 128 neurons connected to pixels\nmodel.add(tf.keras.layers.Dense(10, activation='softmax', name='dense-10-softmax')) # determine probability of each of the 10 classes","4cdc681b":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","79ffab57":"log_dir='logs\/fit\/' + datetime.datetime.now().strftime('%Y%m%d-%H%M%S')\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\nearly_stopping_callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=4)\n\nmodel.fit(x=train_images, \n          y=train_labels, \n          epochs=40, \n          validation_data=(test_images, test_labels), \n          callbacks=[tensorboard_callback, early_stopping_callback])\n","ce5a8836":"#!kill 1234   # sometime TensorBoard does not show all data.  If it shows reusing previous instance use kill command listed\n%tensorboard --logdir logs\/fit","875e8a2d":"# We use the Python tempfile library to create files in a generated folder.  \n# If you want to used a defined path, replace this code with your own \n# path definitions. \nimport tempfile\nimport os\n\n# get the tempfile location for this Colab session\nMODEL_DIR = tempfile.gettempdir()\nversion = 1   # NOTE: Adjust if you don't want to replace a version of your model\nexport_path = os.path.join(MODEL_DIR, str(version))  # the final path includes the version\nprint('Saving model to : {}\\n'.format(export_path))\n\n# if path already exists delete everything at the location\nif os.path.isdir(export_path):\n  print('\\nPreviously saved model found, deleting it\\n')\n  !rm -r {export_path}\n\n# Save the model  \ntf.saved_model.save(model, export_path)\n\n# Print save complete message\nprint('Model saved')\n","48906bb5":"## Train the Model\nNow that we have our data and model, and have specified how the model will learn from the data we can train it.","adaed7ce":"## Save Your Model\n\nNow that we have our model working well.  We can save it for reuse.\n\nBy saving the model's structure and the associated trained weights we preserve our work.  Those weights are well over 101,000 values for which we had to work hard to get to the proper numbers!!\n","41ff33b5":"## Prepare Data\n\nAs usual we need to do some pre-processing of the data.  Here we want to scale the pixels values from 0 to 255 to 0.0 to 1.0.  We scale both the training and testing image values.","2a62ecdd":"Continued: 2-FashionMNIST (https:\/\/www.kaggle.com\/just4jcgeorge\/2-fashionmnist-colab)","b17937ae":"## Import Libraries\n\nWe import TensorFlow, Numpy, and Matplotlib libraries.  \n\nNumpy is a powerful n-dimensional array library that\nallows us to easily create and manipulate arrays of data, and more!\n\nNumpy also allows us to convert TensorFlow's native data structures,\nto Python native data types.\n\nMatplotlib is a graphics plot library","be2e28da":"## Get Data\n\n### About the Fashion-MNIST dataset\n\nThe Fashion-MNIST dataset is a widely available dataset.  It is documented at the https:\/\/github.com\/zalandoresearch\/fashion-mnist\n\nEach image in the dataset is 28 X 28 pixels.  The pixel values are a grayscale with values ranging from 0 to 255.\n\nAssociated with each image is a number from 0 to 9 specifying the class of the fashion item in the image.  The values for the classes are:\n\n| Label | Description |\n|-------|-------------|\n| 0     | T-shirt\/top |\n|   1    | Trouser    | \n|  2     |  Pullover  |\n|   3    |    Dress    |\n|    4   |    Coat      |\n|   5    | Sandal     |\n|   6    | Shirt         |\n|    7   |  Sneaker  |\n|   8    |  Bag          |\n|  9     | Ankle boot |\n\nThere are 60,000 Training examples and 10,000 Testing examples. ","c029169b":"### Reducing Model Complexity\n\nIn a large model we can consider reducing the number of hidden layers.  But our model only has one hidden layer and we need it.  So the only thing to do is reduce the number of neurons in the hidden layer.  Everthing else is the same \nas above.","a6c70eb0":"We start with the same model, optimizer, loss, and log clearing code as before.","cc0c9073":"# Monitoring and Improving our Trained Model\u2019s Performance \n\nIn this section, we want to make changes to improve the performance of our trained model.  By improved performance we mean having the model not overfit the training data and perform poorly on the testing data.\n\nThere are serveral common techniques to fix this problem.  These include:\n\n1.   Reducing Model Complexity - removing neurons or layers\n2.   Dropout - Randomly removing the contributions from some neurons\n3.   Early Stopping - Terminating training as early as possible\n\nWe will try these below.\n\n","eb153781":"## Training Results\n\nThe model has **about 96% accuracy** on the training data.  And **only 88% accuracy** on testing data on which it was not trained. This is a classic sign that the model overfits the training data.  \n\nWe need to determine how we can reduce this overfitting and get **good accuracy on both training and test data!**\n\n\n","984df89e":"### Inspect data\nEach image should be a 28 X 28 image and have a gray scale value of 0-255. Let's display an arbitrary image.\n\nYou should see:  \n* A title that specifies the class of the image, whose description is shown on the table above.\n* The image \n* The 28 by 28 width and height pixel index \n* and on the right the grayscale legend associated with the pixel values.","5f1f683e":"### Implementing Early Stopping\n\nEarly stopping involves having the training stop when the model has been trained enough.  \n\nOften training is slow in terms of time, and expensive in terms of compute time on big clusters or a cloud service.  So it is useful to be able to stop training as soon as reasonable.  And reasonable is usually when the metric like lose quits decreasing.  So the question is, how can we know when the loss quits decreasing?  \n\nWe could run a bunch of trials and use a tool like TensorBoard to plot curves.  But it is tedious to write a model with 20 epochs, run it, see loss was decreasing, then repeat that with 40 epochs, etc.  Worse, if we change the model or it's parameters, like adjusting the dropout percentage, the number of epochs required to see when the loss stops decreasing might be different.\n\nSo what we need is an automated way to detect when training has quit improving and terminate training.  And fortunately Keras has an early stopping feature that does just this!","8ec44de3":"## Monitoring performance with TensorBoard\n\nWe want to ensure we are getting good data to evaluate the performance of our changes.  Fortunately the TensorFlow family include the tool **TensorBoard**.  \n\nTensorBoard provides us various ways to monitor the performance of our models including:\n\n*    Visualizing metrics such as loss and accuracy\n*    Comparision of training and evaluation metrics\n*    Visualizing the model graph (ops and layers)\n*    Viewing histograms of weights, biases, or other tensors as they change over time\n","ee75044b":"Show the results with TensorBoard","9aaa5639":"### Structure of the model\n\nTo make it easy for us to visualize the model, Keras models have a summary method.  When we call it we see our model structure.  \n\nFor completeness we also show the shape of the input data.\n","d5385250":"### Explore the data\n\nLet's look at our data.","a141320d":"### Compile the model\n\nBefore we can train the model we need to specify how the model will learn from the training data.  To do this we specify:\n*  loss - how we measure loss (error).  We will use sparse_categorical_crossentropy, which determines the highest predicted class and calculates loss based on how often this is the correct class.\n*     optimizer - how the model will update the model's weights to reduce the loss.  We use the Adam variant of Mini-batch Gradient Descent.\n* metrics  - the metrics used for evaluation of training and test.  In this case we use accuracy, that is how often the images are correctly classified.  Higher is better. (1.00 would be perfect (100%), 0,75 = 75%, 0.25 = 25%, ...) \n","11a8ee97":"Plot the training to makes sure it is converging.","85753fd9":"### Randomly dropout some neurons\n\nTo randomly shut down the contribution from some neurons, we add a Keras dropout layer.  This layer randomly sets the outputs from the previous layer to 0.  How many outputs are set to 0 is defined by the parameter we pass.  To set 50% of \nthe outputs to 0 pass 0.5.  For 20% pass 0.2.\n\nAlso, the decision on which connections get dropped is a random selection that \nchanges from epoch to epoch.","752e72c0":"## Load correct version of TensorFlow\n\nBefore we use TensorFlow we must load the correct version. We want version 2.x. To do this we execute the Colab commands below. Note that these commands ONLY WORK IN COLAB.","1364a31e":"Fashion-MNIST is one of the datasets provided with Keras in Tensorflow.  Keras' Dataset library provides a load_data() method that will download the dataset of 60,000 Training images and their corresponding 60,000 labels, and 10,000 Test images and their corresponding 10,000 labels.","1a3408d0":"# Fashion-MNIST Neural Network\n\nPurpose: This notebook implements a simple NN consisting of two dense layers, and uses this network to classify Fashion-MNIST images.\n\nThese Fashion-MNIST images consist of clothing items from these ten classes. (*T-shirt\/top, Trouser, Pullover, Dress, Coat, Sandal, Shirt, Sneaker, Bag, Ankle boot)*","83d5c2cf":"We will need these class names later in the code.  So we create an list of names we can index by the class label number.  For example, class_names[2] = 'Pullover' and class_names[9] = 'Ankle boot'.","603b8ac1":"We create a new EarlyStopping callback.\n\nAnd we set the **monitor** parameter to the parameter to monitor, which is **validation loss**. And the  **patience** parameter to the maximum number of epochs without improvement allowed.  And if the parameter does not improve within the patience number of epochs, the training will be terminated.\n\nThis new callback gets added to the list of callbacks.","3aae6f1c":"## Create Model\n\nWe can now create the model we are going to train with the data.\n\nThis will be a simple model that:\n* Flattens the 28 X 28 pixel values into a long stream of 28 by 28 = 784 pixel values - Note this is a Keras layer but is not a neural network layer. Notice the input_shape parameter contains only the shape of a single data element.  There are n data elements each with this same shape. \n* Passes each pixel value as the input to each of the 128 neurons.  \n* And finally passes values to the last layer that contains 10 neurons, one for each of the ten classes (t-shirt, pullover, etc).  Each of these 10 neurons uses the Softmax activation function to determine the probability that the image is each class.  The final output from the model is a vector of probabilities that the image is of each class.  Such as :\n[0.01, 0.05, 0.04, 0.06, 0.50, 0.20, 0.04, 0.00, 0.03, 0.07].  This example vector adds up to 1.0 and shows the probability that the image is class 0 (T-shirt\/top) is 0.01 (1%), class 1 (Trousers) is 0.05 (5%), class 2 (Pullover) is 0.04 (4%), ....\n","c992895d":"## Problem Statement\n\nUsing example data, train a model that will correctly predict the class of images of fashion items.\n\n","bb215a88":"## Evaluate Trained Model\n\nOnce we have the model trained, we need to see how it will perform on data that it was not trained on, that is, test data. \n\nWe do this with Keras' evaluation function and the test dataset we retrieved earlier.\n","289a5bdf":"## Fixing Fashion MNIST ","aa8056d9":"TensorBoard can be run inside a Colab notebook, or if you are running your code directly in Python you can invoke TensorBoard from the command line."}}