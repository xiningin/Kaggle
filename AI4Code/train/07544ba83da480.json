{"cell_type":{"9c8ac49a":"code","a60e738d":"code","030d430b":"code","88194ce3":"code","6038a501":"code","fb221a9b":"code","62b0e618":"code","814ee094":"code","fc4e015f":"code","78677399":"code","2eeb6524":"code","4104c880":"code","9b467683":"code","1b578aa4":"code","69336aef":"code","872bf917":"code","454db897":"code","d31f03ab":"code","16f212db":"code","bb5ff6a9":"code","10c00ef1":"markdown","ded4b4c5":"markdown","dc345103":"markdown","7ebd2b43":"markdown","47be6e32":"markdown","eda9b541":"markdown","3e81c810":"markdown"},"source":{"9c8ac49a":"import numpy as np \nimport pandas as pd \nimport os\n\nimport matplotlib.pyplot as plt\nfrom itertools import combinations\nfrom collections import Counter","a60e738d":"files = [file for file in os.listdir('..\/input')]\n\ntotdata = pd.DataFrame()\n\nfor file in files:\n    df = pd.read_csv(\"..\/input\/\" + file)\n    totdata = pd.concat([totdata, df])\n    \n\ntotdata.to_csv(\"totdata.csv\", index=False)","030d430b":"totdata = pd.read_csv(\"totdata.csv\")\ntotdata.head(60)","88194ce3":"nan_df = totdata[totdata.isna().any(axis=1)]   #finds nan values across dataframe\n\ntotdata = totdata.dropna(how='all') #drops all nan values in dataframe","6038a501":"totdata = totdata[totdata['Order Date'].str[0:2] != 'Or'] ## filters out wrong values 'Or'in 'Order Date' to avoid previous error\n\ntotdata['month'] = totdata['Order Date'].str[0:2]  #strips first 2 characters of values in 'Order Date'\n\ntotdata['month'] = totdata['month'].astype('int32') # Converts str to int in month column","fb221a9b":"totdata['Quantity Ordered'] = pd.to_numeric(totdata['Quantity Ordered'])\n\ntotdata['Price Each'] = pd.to_numeric(totdata['Price Each'])","62b0e618":"totdata['Sales'] = totdata['Quantity Ordered'] * totdata['Price Each']  #calculates total sales \n\ntotdata","814ee094":"results = totdata.groupby(['month']).sum() #groups by month and sums sales\n\nresults","fc4e015f":"months = range(1, 13)\n\n\nplt.figure(figsize=(18,9))\nplt.bar(months, results['Sales'], color='lightskyblue')\nplt.xticks(months, size =14)\nplt.yticks(size =14)\nplt.title('Sales by Month', size=24, color='r')\nplt.xlabel('Month Number', size=16)\nplt.ylabel('Sales in USD ($)', size=16)\n\nplt.show()","78677399":"def get_city(address):\n    return address.split(',')[1]  #function to get city from address column  \n\ndef get_state(address):\n    return address.split(',')[2].split(' ')[1] #function to get Sate without zip code from address column\n    \n    \ntotdata['city'] = totdata['Purchase Address'].apply(lambda x: f\"{get_city(x)} ({get_state(x)})\") #creates new column adding city and State from address column\n\n\ntotdata","2eeb6524":"results = totdata.groupby(['city']).sum() #groups by month and sums sales\n\nresults","4104c880":"cities = [city for city, df in totdata.groupby('city')]\n\nplt.figure(figsize=(18,9))\nplt.bar(cities, results['Sales'], color='aquamarine')\nplt.xticks(rotation=45, ha='right', size=14)\nplt.yticks(size=14)\nplt.title('Sales by City', size=24, color='green')\nplt.xlabel('City Name', size=16)\nplt.ylabel('Sales in USD ($)', size=16)\n\nplt.show()","9b467683":"totdata['Order Date'] = pd.to_datetime(totdata['Order Date'])\n\ntotdata['hour'] = totdata['Order Date'].dt.hour\n\ntotdata['minute'] = totdata['Order Date'].dt.minute\n\ntotdata","1b578aa4":"hourresults = totdata.groupby(['hour']).count().sort_values('Sales', ascending=False) #groups by hour and sorts by highest sales number\n\nhourresults","69336aef":"hours = [hour for hour, df in totdata.groupby('hour')]\n\nplt.figure(figsize=(18,9))\nplt.plot(hours, totdata.groupby('hour').count(), color='red')\nplt.xticks(hours, size =14)\nplt.yticks(size =14)\nplt.grid()\nplt.title('Number of Orders', size=24, color='green')\nplt.xlabel('Time', size=16)\nplt.ylabel('Number of Sales', size=16)\n\nplt.show()","872bf917":"df = totdata[totdata['Order ID'].duplicated(keep=False)]  ### new dataframe only including duplicated order IDs\n\ndf['order group'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x)) ###new column concatenates products with same order ID\n\ndf = df[['Order ID', 'order group']].drop_duplicates() ### now we can keep only one order ID. Dropping the duplicates\n\ndf","454db897":"count = Counter()\n\nfor row in df['order group']:\n    row_list = row.split(',')\n    count.update(Counter(combinations(row_list, 2)))  ### 2 items most commonly sold together\n    \nfor key, value in count.most_common(10):\n    print(key, value)","d31f03ab":"totdata.groupby(['Product']).sum().sort_values('Quantity Ordered', ascending=False)\n","16f212db":"product_group = totdata.groupby(['Product']) ### groups by product\n\nquantity = product_group.sum()['Quantity Ordered'] ### sums up quantities\n\nproducts = [product for product, df in product_group]\n\nprices = totdata.groupby('Product').mean()['Price Each']","bb5ff6a9":"fig, ax1 = plt.subplots(figsize=(18,9))\nax2 = ax1.twinx()\n\nax1.bar(products, quantity, color='plum')\nax2.plot(products, prices, 'g--', linewidth=3)\n\nax1.set_xticklabels(products, rotation = 45, ha='right', size=14)\n\nax1.set_xlabel('Product', size=18)\nax1.set_ylabel('Quantity', size=18)\nax2.set_ylabel('Price', size=18)\n\nplt.show()","10c00ef1":"# Question 5: What product sold the most?","ded4b4c5":"# SALES ANALYSIS","dc345103":"# Cleaning the data ","7ebd2b43":"# Question 4: What products are most often sold together?","47be6e32":"# Question 3: What time should we display advertisiments to maximise likelyhood of the customer buying the product?","eda9b541":"# Question 2: What City had the highest number of sales?","3e81c810":"# Question 1: What was the best month for sales? How much was earned that month?"}}