{"cell_type":{"0da11fbb":"code","f3ee3a6f":"code","7838c824":"code","aeeb4f79":"code","37813abc":"code","5a42b91d":"code","337a81a2":"code","b477f2de":"code","ca34a4b5":"code","eda463c9":"code","b9022838":"code","62f29318":"code","1c691b7c":"code","7bbc65f3":"code","a05a653f":"code","d0a9dc5c":"code","470dfbc1":"code","f3669527":"code","acaeaf4d":"code","31c90b9f":"code","dba99c0a":"code","fc6610a2":"code","9d297498":"code","a4b42628":"code","22c1e308":"code","7983dff2":"code","89dbcabc":"code","33f2a5ac":"code","82e70da0":"code","9b479f18":"code","bcfa74cb":"code","84a2b478":"code","82e18341":"code","fba4d569":"code","c79cb6f2":"code","85d301de":"code","2fcc86fa":"code","01fa2085":"code","88148b17":"code","fe867cfc":"code","4d5b6e75":"code","59c65ac1":"code","d8406abc":"code","89a3aa01":"code","cbb0cada":"code","85cfabd1":"code","84be381b":"code","f390cb4a":"code","1796f7b6":"code","c4f4f23b":"code","96251a90":"code","845da3fc":"code","6a0d4923":"code","0e3750d2":"code","5ddb0acf":"code","ac335d77":"code","83ad4faa":"code","3aa4e6e8":"code","027fea38":"code","10018855":"code","0d960d69":"code","dace952b":"code","35864bca":"code","bede98f0":"code","877f5a1a":"code","42f822cf":"code","29046f82":"code","a3d7dee9":"code","42446fdf":"code","02db9265":"code","3184885e":"code","8e29f1f8":"code","4be4f307":"code","62820721":"code","b98a50a0":"code","e7c65484":"code","05109f05":"code","f5f40abb":"code","c64d8a2c":"code","2908dc5d":"code","5baec2ea":"markdown","fb29cdb9":"markdown","aa5f5367":"markdown","ab0507fd":"markdown","8c8da7c0":"markdown","2eaa80a5":"markdown","febee131":"markdown","50898781":"markdown","cdc5fcd1":"markdown","966265e2":"markdown","19713fab":"markdown","feea5dd3":"markdown","9cf24b4e":"markdown","c0c05368":"markdown","00fb281f":"markdown","c2b0e0ab":"markdown","c30230fa":"markdown","3b168a37":"markdown","4ce3c9df":"markdown","d5d5aa13":"markdown","981e14fa":"markdown","da230687":"markdown"},"source":{"0da11fbb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import MinMaxScaler\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier,AdaBoostClassifier,ExtraTreesClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import svm\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report,f1_score,recall_score ,precision_score,roc_curve","f3ee3a6f":"a=pd.read_csv(\"..\/input\/employee-future-prediction\/Employee.csv\", encoding='utf-8', sep=\",\")\na.head()","7838c824":"a.shape","aeeb4f79":"a.columns","37813abc":"a.info()","5a42b91d":"a.describe()","337a81a2":"a.isnull().sum()","b477f2de":"sns.heatmap(a.isnull())","ca34a4b5":"f, ax =plt.subplots(figsize=(10,8))\nax=sns.heatmap(a.corr(),annot=True)","eda463c9":"fig, axs = plt.subplots(ncols=2,figsize=(16, 8))\n(a['LeaveOrNot'].value_counts(normalize=True)*100).plot.pie(autopct='%1.1f%%', ax=axs[0])\n(a['LeaveOrNot'].value_counts(normalize=True)*100).plot.bar(ax=axs[1])","b9022838":"fig, axs = plt.subplots(ncols=2,figsize=(16, 8))\nexplode = [0.0,0.0,0.09,0.09,0.3,0.3]\nsns.histplot(data=a, x=\"Education\", hue=\"LeaveOrNot\", multiple=\"dodge\", shrink=.8, ax=axs[0])\n(a[['Education','LeaveOrNot']].value_counts(normalize=True)*100).plot.pie(autopct='%1.1f%%', ax=axs[1] ,explode=explode)","62f29318":"fig, axs = plt.subplots(ncols=2,figsize=(16, 8))\nexplode = [0.09,0.0,0.0,0.09,0.09,0.0,0.0,0.2,0.0,0.0,0.0,0.0,0.5,.5]\nsns.histplot(data=a, x=\"JoiningYear\", hue=\"LeaveOrNot\", multiple=\"dodge\", shrink=2, ax=axs[0])\n(a[['JoiningYear','LeaveOrNot']].value_counts(normalize=True)*100).plot.pie(autopct='%1.1f%%', ax=axs[1] ,explode=explode)","1c691b7c":"fig, axs = plt.subplots(ncols=2,figsize=(16, 8))\nexplode = [0.01,0.01,0.01,0.02,0.01,0.01]\nsns.histplot(data=a, x=\"City\", hue=\"LeaveOrNot\", multiple=\"dodge\", shrink=.6, ax=axs[0])\n(a[['City','LeaveOrNot']].value_counts(normalize=True)*100).plot.pie(autopct='%1.1f%%', ax=axs[1] ,explode=explode)","7bbc65f3":"fig, axs= plt.subplots(figsize=(14, 8))\nsns.histplot(data=a, x=\"Age\", hue=\"LeaveOrNot\", multiple=\"dodge\", shrink=.6)","a05a653f":"fig, axs = plt.subplots(ncols=2,figsize=(16, 8))\nexplode = [0.1,0.0,0.0,0.1]\nsns.histplot(data=a, x=\"Gender\", hue=\"LeaveOrNot\", multiple=\"dodge\", shrink=.6, ax=axs[0])\n(a[['Gender','LeaveOrNot']].value_counts(normalize=True)*100).plot.pie(autopct='%1.1f%%', ax=axs[1] ,explode=explode)","d0a9dc5c":"fig, axs = plt.subplots(ncols=2,figsize=(16, 8))\nexplode = [0.1,0.1,0.0,0.0,0.0,0.0]\nsns.histplot(data=a, x=\"PaymentTier\", hue=\"LeaveOrNot\", multiple=\"dodge\", shrink=4, ax=axs[0])\n(a[['PaymentTier','LeaveOrNot']].value_counts(normalize=True)*100).plot.pie(autopct='%1.1f%%', ax=axs[1] ,explode=explode)","470dfbc1":"fig, axs = plt.subplots(ncols=2,figsize=(16, 8))\nexplode = [0.1,0.1,0.0,0.0,.1,0.0,0.,0.0,0.0,0.0,0.0,0.0,.0,0.2,0.4,0.6]\nsns.histplot(data=a, x=\"ExperienceInCurrentDomain\", hue=\"LeaveOrNot\", multiple=\"dodge\", shrink=1.5, ax=axs[0])\n(a[['ExperienceInCurrentDomain','LeaveOrNot']].value_counts(normalize=True)*100).plot.pie(autopct='%1.1f%%', ax=axs[1],explode=explode)","f3669527":"fig, axs = plt.subplots(ncols=2,figsize=(16, 8))\nsns.histplot(data=a, x=\"EverBenched\", hue=\"LeaveOrNot\", multiple=\"dodge\", shrink=.6, ax=axs[0])\n(a[['EverBenched','LeaveOrNot']].value_counts(normalize=True)*100).plot.pie(autopct='%1.1f%%', ax=axs[1])","acaeaf4d":"le = preprocessing.LabelEncoder()","31c90b9f":"a['Education']=le.fit_transform(a['Education'])\na['City']=le.fit_transform(a['City'])\na['Gender']=le.fit_transform(a['Gender'])\na['EverBenched']=le.fit_transform(a['EverBenched'])\na['JoiningYear']=le.fit_transform(a['JoiningYear'])","dba99c0a":"a.head()","fc6610a2":"a.columns","9d297498":"a.describe()","a4b42628":"fg ,ax=plt.subplots(figsize=(12,8))\nax=sns.heatmap(a.corr(),annot=True)","22c1e308":"sc= MinMaxScaler()","7983dff2":"X =pd.DataFrame(sc.fit_transform(a.drop([\"LeaveOrNot\"],axis = 1)))","89dbcabc":"y= a['LeaveOrNot'].values","33f2a5ac":"sm = SMOTE(random_state=42)","82e70da0":"X,y=sm.fit_resample(X, y)","9b479f18":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)","bcfa74cb":"K=KNeighborsClassifier(n_neighbors=13)","84a2b478":"K.fit(X_train,y_train)","82e18341":"K.score(X_train,y_train)","fba4d569":"K.score(X_test,y_test)","c79cb6f2":"K1=K.predict(X_test)\nprint(\"F1-score\",f1_score(y_test,K1))\nprint(\"Recall: \",recall_score(y_test,K1))\nprint(\"percision: \",precision_score(y_test,K1))\nprint(\"accuracy:\", metrics.accuracy_score(y_test,K1))\nprint(classification_report(y_test, K1))","85d301de":"FPR, TPR, cutoffs = metrics.roc_curve(y_test,K1,pos_label=1)\nplt.plot(FPR,TPR,c='red',linewidth=1.0)\nplt.xlabel('False Positive')\nplt.ylabel('True Positive')\nplt.title('ROC Curve')\nplt.show()","2fcc86fa":"l=LogisticRegression()","01fa2085":"l.fit(X_train,y_train)","88148b17":"l.score(X_train,y_train)","fe867cfc":"l.score(X_test,y_test)","4d5b6e75":"l1=l.predict(X_test)\nprint(\"F1-score\",f1_score(y_test,l1))\nprint(\"Recall: \",recall_score(y_test,l1))\nprint(\"percision: \",precision_score(y_test,l1))\nprint(\"accuracy:\" , metrics.accuracy_score(y_test,l1))\nprint(classification_report(y_test, l1))","59c65ac1":"FPR, TPR, cutoffs = metrics.roc_curve(y_test,l1,pos_label=1)\nplt.plot(FPR,TPR,c='red',linewidth=1.0)\nplt.xlabel('False Positive')\nplt.ylabel('True Positive')\nplt.title('ROC Curve')\nplt.show()","d8406abc":"D=DecisionTreeClassifier(max_depth=8,max_features=8,random_state=42)","89a3aa01":"D.fit(X_train,y_train)","cbb0cada":"D.score(X_train,y_train)","85cfabd1":"D.score(X_test,y_test)","84be381b":"D1=D.predict(X_test)\nprint(\"F1-score\",f1_score(y_test,D1))\nprint(\"Recall: \",recall_score(y_test,D1))\nprint(\"percision: \",precision_score(y_test,D1))\nprint(\"accuracy:\",metrics.accuracy_score(y_test,D1))\nprint(classification_report(y_test, D1))","f390cb4a":"FPR, TPR, cutoffs = metrics.roc_curve(y_test,D1,pos_label=1)\nplt.plot(FPR,TPR,c='red',linewidth=1.0)\nplt.xlabel('False Positive')\nplt.ylabel('True Positive')\nplt.title('ROC Curve')\nplt.show()","1796f7b6":"R=RandomForestClassifier(n_estimators=5,max_depth=8,max_features=8,random_state=42)","c4f4f23b":"R.fit(X_train,y_train)","96251a90":"R.score(X_train,y_train)","845da3fc":"R.score(X_test,y_test)","6a0d4923":"R1=R.predict(X_test)\nprint(\"F1-score\",f1_score(y_test,R1))\nprint(\"Recall: \",recall_score(y_test,R1))\nprint(\"percision: \",precision_score(y_test,R1))\nprint(\"accuracy:\" ,metrics.accuracy_score(y_test,R1))\nprint(classification_report(y_test, R1))","0e3750d2":"FPR, TPR, cutoffs = metrics.roc_curve(y_test,R1,pos_label=1)\nplt.plot(FPR,TPR,c='red',linewidth=1.0)\nplt.xlabel('False Positive')\nplt.ylabel('True Positive')\nplt.title('ROC Curve')\nplt.show()","5ddb0acf":"G=GradientBoostingClassifier(n_estimators =5, max_depth =8, learning_rate = 0.3, max_features=8,random_state=42 )","ac335d77":"G.fit(X_train,y_train)","83ad4faa":"G.score(X_train,y_train)","3aa4e6e8":"G.score(X_test,y_test)","027fea38":"G1=G.predict(X_test)\nprint(\"F1-score\",f1_score(y_test,G1))\nprint(\"Recall: \",recall_score(y_test,G1))\nprint(\"percision: \",precision_score(y_test,G1))\nprint(\"accuracy:\", metrics.accuracy_score(y_test,G1))\nprint(classification_report(y_test, G1))","10018855":"FPR, TPR, cutoffs = metrics.roc_curve(y_test,G1,pos_label=1)\nplt.plot(FPR,TPR,c='red',linewidth=1.0)\nplt.xlabel('False Positive')\nplt.ylabel('True Positive')\nplt.title('ROC Curve')\nplt.show()","0d960d69":"A=AdaBoostClassifier(n_estimators=5,learning_rate=.5)","dace952b":"A.fit(X_train,y_train)","35864bca":"A.score(X_train,y_train)","bede98f0":"A.score(X_test,y_test)","877f5a1a":"A1=A.predict(X_test)\nprint(\"F1-score\",f1_score(y_test,A1))\nprint(\"Recall: \",recall_score(y_test,A1))\nprint(\"percision: \",precision_score(y_test,A1))\nprint(\"accuracy:\", metrics.accuracy_score(y_test,A1))\nprint(classification_report(y_test, A1))","42f822cf":"FPR, TPR, cutoffs = metrics.roc_curve(y_test,A1,pos_label=1)\nplt.plot(FPR,TPR,c='red',linewidth=1.0)\nplt.xlabel('False Positive')\nplt.ylabel('True Positive')\nplt.title('ROC Curve')\nplt.show()","29046f82":"GNB = GaussianNB()\nGNB.fit(X_train,y_train)\ny_pred2 = GNB.predict(X_test) ","a3d7dee9":"GNB.score(X_train,y_train)","42446fdf":"GNB.score(X_test,y_test)","02db9265":"GNB1=GNB.predict(X_test)\nprint(\"F1-score\",f1_score(y_test,GNB1))\nprint(\"Recall: \",recall_score(y_test,GNB1))\nprint(\"percision: \",precision_score(y_test,GNB1))\nprint(\"accuracy:\", metrics.accuracy_score(y_test,GNB1))\nprint(classification_report(y_test, GNB1))","3184885e":"FPR, TPR, cutoffs = metrics.roc_curve(y_test,GNB1,pos_label=1)\nplt.plot(FPR,TPR,c='red',linewidth=1.0)\nplt.xlabel('False Positive')\nplt.ylabel('True Positive')\nplt.title('ROC Curve')\nplt.show()","8e29f1f8":"rbf = svm.SVC(kernel='rbf', gamma=4,C=2).fit(X_train,y_train)\nrbf.score(X_train,y_train)","4be4f307":"rbf.score(X_test,y_test)","62820721":"rbfp=rbf.predict(X_test)\nprint(\"F1-score\",f1_score(y_test,rbfp))\nprint(\"Recall: \",recall_score(y_test,rbfp))\nprint(\"percision: \",precision_score(y_test,rbfp))\nprint(\"accuracy:\" ,metrics.accuracy_score(y_test,rbfp))\nprint(classification_report(y_test, rbfp))","b98a50a0":"FPR, TPR, cutoffs = metrics.roc_curve(y_test,rbfp,pos_label=1)\nplt.plot(FPR,TPR,c='red',linewidth=1.0)\nplt.xlabel('False Positive')\nplt.ylabel('True Positive')\nplt.title('ROC Curve')\nplt.show()","e7c65484":"E = ExtraTreesClassifier(n_estimators=6,min_samples_split=10, random_state=0)\nE.fit(X_train, y_train)","05109f05":"E.score(X_train, y_train)","f5f40abb":"E.score(X_test,y_test)","c64d8a2c":"E1=E.predict(X_test)\nprint(\"F1-score\",f1_score(y_test,E1))\nprint(\"Recall: \",recall_score(y_test,E1))\nprint(\"percision: \",precision_score(y_test,E1))\nprint(\"accuracy:\" ,metrics.accuracy_score(y_test,E1))\nprint(classification_report(y_test, E1))","2908dc5d":"FPR, TPR, cutoffs = metrics.roc_curve(y_test,E1,pos_label=1)\nplt.plot(FPR,TPR,c='red',linewidth=1.0)\nplt.xlabel('False Positive')\nplt.ylabel('True Positive')\nplt.title('ROC Curve')\nplt.show()","5baec2ea":"### 3- Decision tree","fb29cdb9":"### Bachelors >>> 53% Staying , 24%  leaving\n### Master >>> 9.2% leaving, 9.2% staying","aa5f5367":"## Pre Processing","ab0507fd":"### 6- Ada - boost","8c8da7c0":"### Correlation  is very weak between features !!!","2eaa80a5":"## Modeling\n### 1- KNN classifier","febee131":"### 28 years is the highest and lowest in leaving and staying\n","50898781":"### 6- Naive_bayes","cdc5fcd1":"### 2- Logistic Regression","966265e2":"## it means ever kept out of the projects for 1 month ot more\n### 30% from not behanced leaving \n### 5.6% behanced and not leaving ","19713fab":"### 0 >>> 65% staying  \n### 1 >>> 34% leaving\n### imbalnceing in the target","feea5dd3":" ### 8- SVM","9cf24b4e":"### Spliting & Normalization, Oversampling","c0c05368":"### 2years exp. >>> highest in staying and leaving","00fb281f":"### Bangalore >>> 12.8% leaving\n### New Delhi >>> 8% leaving","c2b0e0ab":"### 9- ExtraTreesClassifier","c30230fa":"### Male >>> 44% staying, 15% leaving\n### Female >>> 21% staying, 19% leaving","3b168a37":"### 2018 >>> all in 2017 leaving \n### 2012, 2016 is the lowest year ","4ce3c9df":"### The type of \u00a0payment tier \n### -1: HIGHEST -2: MID LEVEL -3:LOWEST\n### tier payment >>> the lowest 54% staying ,20% leaving\n","d5d5aa13":"## Data visualization ","981e14fa":"### 4- Random forest","da230687":"### 5- XGBOOST"}}