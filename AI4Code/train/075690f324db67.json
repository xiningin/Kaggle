{"cell_type":{"05e9fc4e":"code","af07219b":"code","d8e40ba5":"code","a66b6b2f":"code","ac440514":"code","66617926":"code","8b81dfeb":"code","2f36fb0a":"code","fc4ca1d9":"code","c7e8b57e":"code","f3f4684b":"code","f6fe7aac":"code","ead986dc":"code","fbd6496c":"code","b93095d8":"code","36f0955d":"code","ac9d6b2e":"code","db560aa8":"code","077669da":"code","2aeda4ec":"code","252e0fcb":"code","58e36770":"code","086cf104":"code","856cae8e":"code","2b9dd728":"code","36976383":"code","7e94cc74":"code","8a06fb1e":"markdown","799d3811":"markdown","d9e37a4d":"markdown","314634f2":"markdown","72e9b5a4":"markdown","4fe338d7":"markdown","6f56aa21":"markdown"},"source":{"05e9fc4e":"import numpy as np\nimport pandas as pd\n\nimport re\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport optuna\nimport xgboost as xgb\n\nfrom sklearn.metrics import r2_score","af07219b":"data = pd.read_csv('..\/input\/SolarEnergy\/SolarPrediction.csv')","d8e40ba5":"data","a66b6b2f":"data.info()","ac440514":"print(\"Total missing values:\", data.isna().sum().sum())","66617926":"data","8b81dfeb":"data['Month'] = data['Data'].apply(lambda x: re.search(r'^\\d+', x).group(0)).astype(np.int)\ndata['Day'] = data['Data'].apply(lambda x: re.search(r'(?<=\\\/)\\d+(?=\\\/)', x).group(0)).astype(np.int)\ndata['Year'] = data['Data'].apply(lambda x: re.search(r'(?<=\\\/)\\d+(?=\\s)', x).group(0)).astype(np.int)\n\ndata = data.drop('Data', axis=1)","2f36fb0a":"data","fc4ca1d9":"data['Hour'] = data['Time'].apply(lambda x: re.search(r'^\\d+', x).group(0)).astype(np.int)\ndata['Minute'] = data['Time'].apply(lambda x: re.search(r'(?<=:)\\d+(?=:)', x).group(0)).astype(np.int)\ndata['Second'] = data['Time'].apply(lambda x: re.search(r'\\d+$', x).group(0)).astype(np.int)\n\ndata = data.drop('Time', axis=1)","c7e8b57e":"data","f3f4684b":"data['SunriseHour'] = data['TimeSunRise'].apply(lambda x: re.search(r'^\\d+', x).group(0)).astype(np.int)\ndata['SunriseMinute'] = data['TimeSunRise'].apply(lambda x: re.search(r'(?<=:)\\d+(?=:)', x).group(0)).astype(np.int)\n\ndata['SunsetHour'] = data['TimeSunSet'].apply(lambda x: re.search(r'^\\d+', x).group(0)).astype(np.int)\ndata['SunsetMinute'] = data['TimeSunSet'].apply(lambda x: re.search(r'(?<=:)\\d+(?=:)', x).group(0)).astype(np.int)\n\ndata = data.drop(['TimeSunRise', 'TimeSunSet'], axis=1)","f6fe7aac":"data","ead986dc":"data.dtypes","fbd6496c":"data['Year'].unique()","b93095d8":"data['SunriseHour'].unique()","36f0955d":"data = data.drop(['Year', 'SunriseHour'], axis=1)","ac9d6b2e":"y = data['Radiation'].copy()\nX = data.drop('Radiation', axis=1).copy()","db560aa8":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","077669da":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=100)\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, train_size=0.8, random_state=200)","2aeda4ec":"dtrain = xgb.DMatrix(X_train, label=y_train)\ndval = xgb.DMatrix(X_val, label=y_val)\ndtest = xgb.DMatrix(X_test, label=y_test)","252e0fcb":"def get_model_rmse(params):\n    model = xgb.train(params, dtrain, num_boost_round=100, evals=[(dval, 'eval')], early_stopping_rounds=10, verbose_eval=0)\n    results = model.eval(dval)\n    rmse = np.float(re.search(r'[\\d.]+$', results).group(0))\n    return rmse","58e36770":"def objective(trial):\n    learning_rate = trial.suggest_loguniform('learning_rate', 0.00001, 10.0)\n    max_depth = trial.suggest_int('max_depth', 4, 8)\n    l1_reg = trial.suggest_loguniform('l1_reg', 0.00001, 10.0)\n    l2_reg = trial.suggest_loguniform('l2_reg', 0.00001, 10.0)\n    \n    params = {'learning_rate': learning_rate, 'max_depth': max_depth, 'alpha': l1_reg, 'lambda': l2_reg}\n    \n    return get_model_rmse(params)","086cf104":"study = optuna.create_study()\nstudy.optimize(objective, n_trials=100, show_progress_bar=True)","856cae8e":"best_params = study.best_params\nbest_params","2b9dd728":"model = xgb.train(best_params, dtrain, num_boost_round=10000, evals=[(dval, 'eval')], early_stopping_rounds=10)","36976383":"y_true = np.array(y_test, dtype=np.float)\ny_pred = np.array(model.predict(dtest), dtype=np.float)","7e94cc74":"r2 = r2_score(y_true, y_pred)\n\nprint(\"R^2 Score: {:.4f}\".format(r2))","8a06fb1e":"# Splitting\/Scaling","799d3811":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/LhZFarrxb-E","d9e37a4d":"# Hyperparameter Search","314634f2":"# Feature Engineering","72e9b5a4":"# Task for Today  \n\n***\n\n## Solar Radiation Regression  \n\nGiven *solar data from different time periods*, let's try to predict the **solar radiation** of a given period.  \n  \nWe will use XGBoost to make our predictions.","4fe338d7":"# Results","6f56aa21":"# Getting Started"}}