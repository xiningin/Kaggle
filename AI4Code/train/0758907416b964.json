{"cell_type":{"19237c55":"code","5eac22ce":"code","19f90fca":"code","7fd9cf0b":"code","d9d74f46":"code","0c159764":"code","7ec15e94":"code","caab4eee":"code","b8746117":"code","6777475c":"code","c6a0a826":"code","f88c900a":"code","db77a7b8":"code","d0d570cc":"markdown","f2d0b336":"markdown","dedfe880":"markdown","e0cf2877":"markdown","a63d2659":"markdown","1eea1da0":"markdown","cceb432e":"markdown","3dde91e8":"markdown","f1a69c22":"markdown","71a3d738":"markdown","18ecf869":"markdown","6dde2538":"markdown","d0197f97":"markdown","9c0354f1":"markdown"},"source":{"19237c55":"#\u5bfc\u5165\u5fc5\u8981\u7684\u5e93\nimport pandas as pd\nimport numpy as np\nimport os\nimport gc\nimport copy\nimport warnings\n\nimport pickle\nimport lightgbm as lgb\nfrom lightgbm import LGBMRegressor\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nwarnings.filterwarnings('ignore')\npd.set_option(\"max_columns\", 500)\n%matplotlib inline","5eac22ce":"train = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/train.csv\", parse_dates=[\"timestamp\"])\ntest = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/test.csv\", parse_dates=[\"timestamp\"])\nbuilding = pd.read_csv('..\/input\/ashrae-energy-prediction\/building_metadata.csv')\nweather_train = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_train.csv', parse_dates=[\"timestamp\"])\nweather_test = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/weather_test.csv\", parse_dates=[\"timestamp\"])","19f90fca":"train_plot = train.merge(building, on='building_id', how='left')\n\nsite = 0 #\u5efa\u7b51\u7269\u7684\u5730\u70b9\nmeter_type = 1 #\u4eea\u8868\u7684\u7c7b\u578b\nprimary_use = 'Education' #\u5efa\u7b51\u7269\u7684\u7528\u9014\n\nr = int(np.ceil(len(train_plot[(train_plot['site_id'] == site) & (train_plot['primary_use'] == primary_use) & (train_plot['meter'] == meter_type)]['building_id'].value_counts(dropna=False).index.to_list())\/2))\nfig, axes = plt.subplots(r,2,figsize=(14, 36), dpi=100)\nfor i, building_id in enumerate(train_plot[(train_plot['site_id'] == site) & (train_plot['primary_use'] == primary_use) & (train_plot['meter'] == meter_type)]['building_id'].value_counts(dropna=False).index.to_list()):\n    train_plot[(train_plot['site_id'] == site) & (train_plot['primary_use'] == primary_use) & (train_plot['meter'] == meter_type) & \n               (train_plot['building_id'] == building_id )][['timestamp', 'meter_reading']].set_index('timestamp').resample('H').mean()['meter_reading'].plot(ax=axes[i%r][i\/\/r], \n               alpha=0.8, label='By hour', color='tab:blue').set_ylabel('Mean meter reading', fontsize=13);\n    train_plot[(train_plot['site_id'] == site) & (train_plot['primary_use'] == primary_use) & (train_plot['meter'] == meter_type) & \n               (train_plot['building_id'] == building_id )][['timestamp', 'meter_reading']].set_index('timestamp').resample('D').mean()['meter_reading'].plot(ax=axes[i%r][i\/\/r], \n               alpha=1, label='By day', color='tab:orange').set_xlabel('');\n    axes[i%r][i\/\/r].legend();\n    axes[i%r][i\/\/r].set_title('building_id: ' + str(building_id ), fontsize=13);\n    plt.subplots_adjust(hspace=0.45)\n    \ndel train_plot,fig,axes,r\ngc.collect();","7fd9cf0b":"def compress_dataframe(df):\n    '''\u5c06\u6240\u6709\u6570\u636e\u7684\u7c7b\u578b\u90fd\u8f6c\u6362\u4e3a\u6570\u503c\u578b'''\n    result = df.copy()\n    for col in result.columns:\n        col_data = result[col]\n        dn = col_data.dtype.name\n        if dn == \"object\":\n            result[col] = pd.to_numeric(col_data.astype(\"category\").cat.codes, downcast=\"integer\")\n        elif dn == \"bool\":\n            result[col] = col_data.astype(\"int8\")\n        elif dn.startswith(\"int\") or (col_data.round() == col_data).all():\n            result[col] = pd.to_numeric(col_data, downcast=\"integer\")\n        else:\n            result[col] = pd.to_numeric(col_data, downcast='float')\n    return result","d9d74f46":"def set_time(df):\n    df.timestamp = (df.timestamp - pd.to_datetime(\"2016-01-01\")).dt.total_seconds() \/\/ 3600\n    #\u8fd9\u91cc\u5c06timestamp\u8f6c\u6362\u6210\u4e8616\u5e741\u67081\u65e50\u70b9\u5f00\u59cb\u8ba1\u7b97\u7684\u5c0f\u65f6\u6570\u2018\/\/\u2019\u4ee3\u8868\u9664\u6cd5\u8fd0\u7b97\u540e\u53d6\u6574\n    return df\n\n# \u6839\u636e\u5206\u6790\u5f97\u51fa\u5404\u4e2asite\u6765\u81ea\u54ea\u4e2a\u65f6\u533a\uff0c\u6765\u4fee\u6b63\u65f6\u95f4\n# https:\/\/www.kaggle.com\/patrick0302\/locate-cities-according-weather-temperature\nsite_GMT_offsets = [-5, 0, -7, -5, -8, 0, -5, -5, -5, -6, -7, -5, 0, -6, -5, -5]\n\n#\u8f6c\u6362\u5929\u6c14\u6570\u636e\u8868\u683c\u4e2d\u7684\u65f6\u95f4,\u5e76\u586b\u5145\u7f3a\u5931\u503c\ndef weather_set_time(df,time_zone):\n    df.timestamp = (df.timestamp - pd.to_datetime(\"2016-01-01\")).dt.total_seconds() \/\/ 3600\n    \n    GMT_offset_map = {site: offset for site, offset in enumerate(site_GMT_offsets)}\n    df.timestamp = df.timestamp + df.site_id.map(GMT_offset_map)\n    #\u6839\u636e\u65f6\u533a\u7684\u4e0d\u540c\uff0c\u7edf\u4e00\u65f6\u95f4\n    site_dfs = []\n    for site_id in df.site_id.unique():\n        # \u786e\u4fdd\u5305\u62ec\u6240\u6709\u53ef\u80fd\u7684\u5c0f\u65f6\u6570\n        site_df = df[df.site_id == site_id].set_index(\"timestamp\").reindex(time_zone)\n        site_df.site_id = site_id\n        for col in [c for c in site_df.columns if c != \"site_id\"]:\n            site_df[f\"had_{col}\"] = ~site_df[col].isna()\n            site_df[col] = site_df[col].interpolate(limit_direction='both', method='linear')\n            # \u8fd9\u91cc\u4f7f\u7528\u4e2d\u4f4d\u6570\u6765\u586b\u5145\u7f3a\u5931\u503c\n            site_df[col] = site_df[col].fillna(df[col].median())\n        site_dfs.append(site_df)\n    df = pd.concat(site_dfs).reset_index()  # make timestamp back into a regular column\n    for col in df.columns:\n        if df[col].isna().any(): df[f\"had_{col}\"] = ~df[col].isna()\n    #\u5982\u679c\u67d0\u5217\u5176\u4e2d\u6709\u7f3a\u5931\u503c\uff0c\u5c31\u589e\u52a0\u4e00\u5217\u65b0\u7684\u7279\u5f81\uff1ahad_xxx \u8868\u793a\u8fd9\u4e00\u884c\u5728xxx\u8fd9\u4e00\u5217\u662f\u5426\u6709\u8bb0\u5f55\n    return df\n    \n#\u589e\u52a0\u661f\u671f\uff0c\u6708\u4efd\uff0c\u65f6\u95f4\u7684\u7279\u5f81\ndef _add_time_features(X):\n    return X.assign(tm_day_of_week=((X.timestamp \/\/ 24) % 7), tm_hour_of_day=(X.timestamp % 24))\n\nbuilding = compress_dataframe(building.fillna(-1)).set_index(\"building_id\")\n\ntrain = compress_dataframe(set_time(train))\ntest = compress_dataframe(set_time(test)).set_index(\"row_id\")\nweather_train = compress_dataframe(weather_set_time(weather_train,range(8784))).set_index([\"site_id\", \"timestamp\"])\nweather_test = compress_dataframe(weather_set_time(weather_test,range(8784,26304))).set_index([\"site_id\", \"timestamp\"])","0c159764":"def combined_data(df,weather):\n    df = compress_dataframe(df.join(building, on=\"building_id\").join(weather,\n        on=[\"site_id\", \"timestamp\"]).fillna(-1))\n    return df.drop(columns=[\"meter_reading\"]),df.meter_reading","7ec15e94":"def make_is_bad_zero(Xy_subset, min_interval=48, summer_start=3000, summer_end=7500):\n    #\u590f\u5929\uff0c3000\/24=125\uff0c7500\/24=312.5,\u7b2c125\u5929\u5230\u7b2c312.5\u5929\u4e3a\u590f\u5929\u3002\n\n    meter = Xy_subset.meter_id.iloc[0]\n    is_zero = Xy_subset.meter_reading == 0 #\u8fd4\u56de\u8bfb\u6570\u4e3a0\u7684\u7535\u8868\u7684indices\n    if meter == 0:\n        #\u7535\u8868\u7684\u5ea6\u6570\u4e0d\u5e94\u8be5\u4e3a0\uff0c\u6240\u4ee5\u7535\u8868\uff08meter\u4e3a0\uff09\u8bfb\u6570\u4e3a0\u7684\u884c\u4ecetraining dataframe\u4e2ddrop\u6389\n        return is_zero\n\n    transitions = (is_zero != is_zero.shift(1))#\u51fa\u73b00\u548c\u975e0\u53d8\u5316\u7684\u4f4d\u7f6e\n    all_sequence_ids = transitions.cumsum()#\u5230\u5404\u4f4d\u7f6e\u51fa\u73b0\u7684\u53d8\u5316\u7684\u548c\uff0c\u662f\u4e00\u4e2apd.Seires\n    ids = all_sequence_ids[is_zero].rename(\"ids\")#\u5c06\u5176\u4e2d\u8bfb\u6570\u4e3a0\u7684\u63d0\u53d6\u51fa\u6765\n    if meter in [2, 3]:\n        # \u84b8\u6c7d\u548c\u70ed\u6c34\u6709\u53ef\u80fd\u5728\u590f\u5929\u88ab\u5173\u95ed\n        keep = set(ids[(Xy_subset.timestamp < summer_start) |\n                       (Xy_subset.timestamp > summer_end)].unique())#\u4e0d\u5728\u590f\u5929\u7684indices\n        is_bad = ids.isin(keep) & (ids.map(ids.value_counts()) >= min_interval) \n        #\u5c06\u4e0d\u5728\u590f\u5929\u5374\u88ab\u5173\u95ed\u7684\u84b8\u6c7d\u548c\u70ed\u6c34\u8868\u63d0\u53d6\u51fa\u6765\uff0c\u81f3\u5c11\u88ab\u5173\u95ed\u4e8648\u5c0f\u65f6\u4ee5\u4e0a\u7684\n    elif meter == 1:\n        time_ids = ids.to_frame().join(Xy_subset.timestamp).set_index(\"timestamp\").ids#\u5c06ids\u548ctimestamp\u5bf9\u5e94\u8d77\u6765\n        is_bad = ids.map(ids.value_counts()) >= min_interval#\u5173\u95ed\u65f6\u95f4\u5927\u4e8e48\u5c0f\u65f6\u7684\n\n        # \u51b7\u6c34\u5728\u51ac\u5929\u53ef\u80fd\u88ab\u5173\u95ed\n        jan_id = time_ids.get(0, False)#\u4e00\u6708\u4efd\u7684\u5f00\u59cb\u7684id\n        dec_id = time_ids.get(8283, False)#\u5341\u4e8c\u6708\u4efd\u5f00\u59cb\u7684id\n        if (jan_id and dec_id and jan_id == time_ids.get(500, False) and\n                dec_id == time_ids.get(8783, False)):\n        #\u5982\u679c\u4e00\u6708500\u5c0f\u65f6\u548c\u5341\u4e8c\u6708500\u5c0f\u65f6\u7684\u8bfb\u8868\u90fd\u4e3a0\u7684\u8bdd\n            is_bad = is_bad & (~(ids.isin(set([jan_id, dec_id]))))\n            #\u5c06\u8fd9\u4e00\u90e8\u5206\u7684\u7684\u884c\u4eceis_bad\u4e2d\u5220\u9664\n    else:\n        raise Exception(f\"Unexpected meter type: {meter}\")\n\n    result = is_zero.copy()\n    result.update(is_bad)\n    return result\n\ndef find_bad_zeros(X, y):\n    \"\"\"\u8fd4\u56de\u4ec5\u5305\u542b\u5e94\u8be5\u5220\u9664\u7684\u884c\u7684Index\"\"\"\n    Xy = X.assign(meter_reading=y, meter_id=X.meter)\n    is_bad_zero = Xy.groupby([\"building_id\", \"meter\"]).apply(make_is_bad_zero)\n    return is_bad_zero[is_bad_zero].index.droplevel([0, 1])\n\ndef find_bad_sitezero(X):\n    \"\"\"\u8fd4\u56deSite 0 \u8bfb\u6570\u5f02\u5e38\u7684\u884c\u7684index.\"\"\"\n    return X[(X.timestamp < 3378) & (X.site_id == 0) & (X.meter == 0)].index\n\ndef find_bad_building1099(X, y):\n    \"\"\"\u8fd4\u56de\u5efa\u7b511099\u7684\u8bfb\u6570\u5f02\u5e38\u9ad8\u7684\u884c\u7684index .\"\"\"\n    return X[(X.building_id == 1099) & (X.meter == 2) & (y > 3e4)].index\n\ndef find_bad_rows(X, y):\n    return find_bad_zeros(X, y).union(find_bad_sitezero(X)).union(find_bad_building1099(X, y))","caab4eee":"X, y = combined_data(train,weather_train)\n\nbad_rows = find_bad_rows(X, y)\n#\u8f93\u51fa\u5f02\u5e38\u503c\u7684index\npd.Series(bad_rows.sort_values()).to_csv(\"rows_to_drop.csv\", header=False, index=False)\n\nX = X.drop(index=bad_rows)\ny = y.reindex_like(X)\n\nX = _add_time_features(X)\nX = compress_dataframe(X)\nX = X.drop(columns=\"timestamp\")  # drop\u6389\u539f\u672c\u7684timestamp\n\ndel bad_rows,train,weather_train\ngc.collect();","b8746117":"#\u5bf9\u76ee\u6807\u503c\u8fdb\u884c\u53d8\u6362\ny = np.log1p(y)","6777475c":"params = {\n    'boosting_type': 'gbdt',  \n    'objective': 'regression',  \n    'eval_metric': 'rmse',  \n    'num_leaves': 40,  \n    'subsample':0.8,\n    'learning_rate': 0.03,  \n    'verbose': 1,\n    'reg_lambda':3\n }\n\nnum_trees = 1000\n\n#\u8bbe\u7f6e\u5206\u7c7b\u53d8\u91cf\ncategorical_features=['building_id', 'site_id', 'primary_use', 'had_air_temperature', 'had_cloud_coverage', \n                      'had_dew_temperature', 'had_precip_depth_1_hr','had_sea_level_pressure', 'had_wind_direction',\n                      'had_wind_speed', 'tm_day_of_week', 'tm_hour_of_day']","c6a0a826":"n_splits = 3\n\nfor val in X['meter'].unique():\n    X1 = X[X['meter'] == val].drop(columns=['meter'])\n    kf = StratifiedKFold(n_splits=n_splits,random_state=42)\n    #\u4f7f\u7528StratifiedKFold\uff0c\u8ba9\u6307\u5b9a\u5217\u5728\u6bcf\u4e00\u4e2afold\u4e2d\u7684\u5206\u5e03\u76f8\u540c\uff0c\u8fd9\u91cc\u8bbe\u7f6e\u5206\u4e3a3\u4e2afold\n    t = 0\n    for train_index, test_index in kf.split(X1, X1['tm_hour_of_day']):\n        #\u8ba9\u6bcf\u4e2afold\u4e2d['tm_hour_of_day']\u7684\u5206\u5e03\u76f8\u540c\n        train_features = X1.iloc[train_index]\n        train_target = y[X1.iloc[train_index].index]\n        \n        test_features = X1.iloc[test_index]\n        test_target = y[X1.iloc[test_index].index]\n        \n        d_train = lgb.Dataset(train_features, train_target, categorical_feature=categorical_features)\n        d_eval = lgb.Dataset(test_features,test_target, categorical_feature=categorical_features)\n        print(\"Building model meter :\",val,'fold:',t)        \n        \n#         md = lgb.train(params, d_train, num_boost_round=num_trees, valid_sets=(d_train, d_eval), \n#                        early_stopping_rounds=200,verbose_eval=20)\n        md=lgb.LGBMRegressor(boosting_type='gbdt', objective = 'regression',eval_metric='rmse',num_leaves=40,\n                             n_estimators=num_trees, subsample=0.8, learning_rate=0.03,verbose=1,reg_lambda=3 )\n        md.fit(train_features,train_target,eval_set=(test_features, test_target), \n                       early_stopping_rounds=200,verbose=20,categorical_feature=categorical_features,)\n    \n        locals()['lgb_val{}_fold{}'.format(val,t)]=pickle.dumps(md) \n        t += 1\n    del X1  \n        \ndel d_train, d_eval, train_features, test_features, md\ngc.collect();","f88c900a":"X = compress_dataframe(test.join(building, on=\"building_id\").join(weather_test, on=[\"site_id\", \"timestamp\"]).fillna(-1))\nX = compress_dataframe(_add_time_features(X))\nX = X.drop(columns=\"timestamp\")  # drop\u6389\u539f\u672c\u7684timestamp\n\ndel test, weather_test\ngc.collect();","db77a7b8":"#\u8f93\u51fa\u9884\u6d4b\u7ed3\u679c\nresult = np.zeros(len(X))\nfor val in X['meter'].unique():\n    ix = np.nonzero((X['meter'] == val).to_numpy())\n    for i in tqdm(range(n_splits)):\n        #\u52a0\u8f7d\u521a\u624d\u4fdd\u5b58\u7684\u6a21\u578b \n        model =pickle.loads(locals()['lgb_val{}_fold{}'.format(val, i)])      \n        result[ix] += model.predict(X.iloc[ix].drop(columns=['meter']), num_iteration=model.best_iteration_)\/n_splits\n        del model\n        gc.collect();\n    \npredictions = pd.DataFrame({\n    \"row_id\": X.index,\n    \"meter_reading\": np.clip(np.expm1(result), 0, None)\n})\n\n# float_format\u8bbe\u7f6e\u4fdd\u7559\u56db\u4f4d\u5c0f\u6570\uff0c\u51cf\u5c11\u6587\u4ef6\u5927\u5c0f\uff0c\u4e3a\u6587\u4ef6\u4e0a\u4f20\u8282\u7701\u65f6\u95f4\npredictions.to_csv(\"submission.csv\", index=False, float_format=\"%.4f\")","d0d570cc":"<a id='step1'><\/a>\n# 1. \u5bfc\u5165\u6570\u636e\n\nASHRAE\u7ed9\u51fa\u7684\u6570\u636e\u5305\u542b\u5927\u91cf\u7684\u7279\u5f81\u6570\u636e\uff0c\u5305\u62ec\u4eea\u8868\u8bfb\u6570\uff0c\u5929\u6c14\u548c\u5efa\u7b51\u7684\u6570\u636e\u7b49\u7b49\u3002\u8be5\u95ee\u9898\u4e3a\u5178\u578b\u7684\u76d1\u7763\u5b66\u4e60\u95ee\u9898\u3002\u6bd4\u8d5b\u4e3e\u529e\u65b9\u63d0\u4f9b\u4e866\u4e2acsv\u6587\u4ef6\uff0c\u5305\u62ec5\u4e2a\u6570\u636e\u96c6\u4e0e1\u4e2a\u63d0\u4ea4\u6837\u672c\u3002\u5176\u4e2d\u6570\u636e\u96c6\u7684\u5b57\u6bb5\u542b\u4e49\u4e3a\uff1a\n\n`[train\/test].csv`\n- building_id\uff1a\u5efa\u7b51\u539f\u6570\u636e\u7684\u5916\u952e\n- meter : \u4eea\u8868\u7684id\u7801, {0: \u7535\u8868 , 1: \u51b7\u6c34\u8868, 2: \u84b8\u6c7d\u8868, 3: \u70ed\u6c34\u8868}\uff0c\u4e0d\u662f\u6bcf\u680b\u5efa\u7b51\u90fd\u6709\u5168\u90e8\u7c7b\u578b\u7684\u4eea\u8868\n- timestamp\uff1a\u8bfb\u8868\u7684\u65f6\u95f4\n- meter_reading\uff1a\u76ee\u6807\u53d8\u91cf, \u7528\u5343\u74e6\u65f6\uff08\u6216\u7b49\u6548\u503c\uff09\u8868\u793a\u7684\u80fd\u8017\u3002\u8fd9\u662f\u5e26\u6709\u6d4b\u91cf\u8bef\u5dee\u7684\u771f\u5b9e\u6570\u636e\uff0c\u5176\u4e2dsite0\u7684\u7535\u8868\u8bfb\u6570\u51fa\u73b0\u95ee\u9898\uff0c\u5355\u4f4d\u662f\u5343\u82f1\u70ed\n\n`building_meta.csv`\n- site_id: \u5929\u6c14\u6587\u4ef6\u7684\u5916\u952e\n- building_id: training.csv\u5bf9\u5e94\u7684\u5916\u952e\n- primary_use: \u57fa\u4e8eEnergyStar property type definitions\u7684\u5efa\u7b51\u7269\u6d3b\u52a8\u7684\u4e3b\u8981\u7c7b\u522b\u7684\u6307\u6807\uff08education, office\u2026)\n- square_feet: \u5efa\u7b51\u7269\u7684\u603b\u5efa\u7b51\u9762\u79ef\n- year_built: \u5efa\u7b51\u5b8c\u6210\u7684\u5e74\u4efd\n- floor_count: \u5efa\u7b51\u7269\u5c42\u6570\n\n`weather_[train\/test].csv`\uff1a\u6c14\u8c61\u7ad9\u63d0\u4f9b\u7684\u6c14\u8c61\u6570\u636e,\u5c3d\u53ef\u80fd\u63a5\u8fd1\u73b0\u573a\u3002\n- site_id: \u5929\u6c14\u6587\u4ef6\u7684\u5916\u952e\n- air_temperature: \u6c14\u6e29\uff0c\u5355\u4f4d\u4e3a\u6444\u6c0f\u5ea6\n- cloud_coverage: \u5929\u7a7a\u4e2d\u88ab\u4e91\u5c42\u8986\u76d6\u7684\u90e8\u5206\uff0c\u5355\u4f4d\u4e3aoktas\n- dew_temperature: \u9732\u70b9\u6e29\u5ea6\uff0c\u5355\u4f4d\u4e3a\u6444\u6c0f\u5ea6\n- precip_depth_1_hr: \u964d\u6c34\u6df1\u5ea6\uff0c\u5355\u4f4d\u4e3a\u6beb\u7c73\n- sea_level_pressure: \u6d77\u5e73\u9762\u538b\u529b\uff0c\u5355\u4f4d\u4e3a\u6beb\u5df4\/\u516c\u9877\n- wind_direction: \u98ce\u5411\uff0c\u4f7f\u7528\u7684\u662f\u6307\u5357\u9488\u65b9\u5411\uff080-360\uff09\n- wind_speed: \u98ce\u901f\uff0c\u5355\u4f4d\u4e3a\u7c73\u6bcf\u79d2","f2d0b336":"<a id='step2'><\/a>\n# 2. \u63a2\u7d22\u6027\u6570\u636e\u5206\u6790\n\n- \u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684\u6570\u636e\uff0c\"meter\"\u4ee3\u8868\u4eea\u8868\u7684\u7c7b\u578b\uff0c\u5bf9\u5e94\u5173\u7cfb\u4e3a {0: \u7535\u8868 , 1: \u51b7\u6c34\u8868, 2: \u84b8\u6c7d\u8868, 3: \u70ed\u6c34\u8868}\n- \u89c2\u5bdf\u5404\u4e2a\u5efa\u7b51\u7684\u4eea\u8868\u8bfb\u6570\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u4e2d\u4e00\u4e9b\u5efa\u7b51\u7684\u8bfb\u6570\u5728\u67d0\u4e9b\u533a\u95f4\u51fa\u73b0\u4e86\u6301\u7eed\u4e3a0\u7684\u5f02\u5e38\u60c5\u51b5,\u4e5f\u6709\u8bfb\u6570\u5f02\u5e38\u7684\u9ad8\u7684\u503c\n- \u53ef\u4ee5\u901a\u8fc7\u4fee\u6539`site`,`meter_type`,`primary_use`\u4e09\u4e2a\u53c2\u6570\u9009\u62e9\u60f3\u8981\u7ed8\u5236\u7684\u6570\u636e\n\n\u5173\u8054train\u8868\u683c\u548cbuilding\u8868\u683c\u7528\u4e8e\u4f5c\u56fe","dedfe880":"## 4.2 \u6a21\u578b\u8bad\u7ec3","e0cf2877":"<a id='question2'><\/a>\n### __\u95ee\u9898 2:__\n\n\u601d\u8003\u6b64\u5904\u4e3a\u4f55\u8981\u8fdb\u884c\u5bf9\u6570\u8f6c\u6362\u3002\n\n__\u56de\u7b54:__ ","a63d2659":"# \u65b0\u6d0b\u6559\u80b2Kaggle\u96f6\u57fa\u7840\u6559\u5b66\u8ba1\u5212 - \u6570\u636e\u6316\u6398\u9879\u76ee\n# \u9884\u6d4b\u5efa\u7b51\u7269\u7684\u80fd\u6e90\u6d88\u8017\n\nASHRAE\uff08American Society of Heating, Refrigerating and Air-Conditioning Engineers\uff09\uff0c\u4e2d\u6587\u540d\u79f0\u201c\u7f8e\u56fd\u91c7\u6696\u3001\u5236\u51b7\u4e0e\u7a7a\u8c03\u5de5\u7a0b\u5e08\u5b66\u4f1a\u201d\uff0c\u4e8e1894\u5e74\u5728\u7f8e\u56fd\u7ebd\u7ea6\u6210\u7acb\uff0c\u662f\u7531\u6696\u901a\u7a7a\u8c03\uff08HVAC\uff09\u5de5\u7a0b\u5e08\u6240\u7ec4\u6210\u7684\u5b66\u4f1a\uff0c\u5168\u7403\u62e5\u6709\u8d85\u8fc754,000\u540d\u6210\u5458\u3002\u534f\u4f1a\u53ca\u5176\u6210\u5458\u4e13\u6ce8\u4e8e\u5efa\u7b51\u7cfb\u7edf\u3001\u80fd\u6e90\u6548\u7387\u3001\u5ba4\u5185\u7a7a\u6c14\u8d28\u91cf\u3001\u5236\u51b7\u548c\u884c\u4e1a\u5185\u7684\u53ef\u6301\u7eed\u6027\u3002\u901a\u8fc7\u8c03\u7814\u3001\u6807\u51c6\u7f16\u5199\u3001\u51fa\u7248\u548c\u7ee7\u7eed\u6559\u80b2\uff0cASHRAE\u53d1\u5c55\u81f3\u73b0\u5728\u7684\u89c4\u6a21\u3002\n\n![image](https:\/\/www.shell.com\/energy-and-innovation\/the-energy-future\/shell-energy-transition-report\/_jcr_content\/par\/pageHeader\/image.img.960.jpeg\/1523515186785\/cityscape-river-sunshine-hong-kong-china.jpeg?imformat=chrome&imwidth=1280)\n\n\u95ee\uff1a\u590f\u5929\u7ed9\u5927\u697c\u964d\u6e29\u9700\u8981\u591a\u5c11\u94b1\uff1f\n\n\u7b54\uff1a\u975e\u5e38\u591a\uff01\u653f\u5e9c\u6b63\u5728\u8fdb\u884c\u6295\u8d44\uff0c\u4ee5\u964d\u4f4e\u80fd\u6e90\u6210\u672c\uff0c\u51cf\u5c11\u6392\u653e\u3002\u4f46\u662f\u95ee\u9898\u662f\uff0c\u8fd9\u4e9b\u6539\u8fdb\u662f\u5426\u771f\u7684\u6709\u6548\uff1f\n\n\u5728\u8fd9\u6b21\u7ade\u8d5b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7**\u9884\u6d4b\u51b7\u6c34\u8868\u3001\u7535\u8868\u3001\u70ed\u6c34\u8868\u548c\u84b8\u6c7d\u8868\u7684\u8bfb\u6570**\u6765\u5bf9\u8fd9\u4e9b\u8282\u80fd\u6295\u8d44\u8fdb\u884c\u66f4\u597d\u7684\u4f30\u8ba1\u3002\u6570\u636e\u6765\u81ea\u8fd1\u4e09\u5e74\u67651000\u680b\u5efa\u7b51\u4e2d\u7684\u5404\u8868\u8bfb\u6570\u3002\u5927\u578b\u6295\u8d44\u8005\u548c\u91d1\u878d\u673a\u6784\u5c06\u66f4\u503e\u5411\u4e8e\u5728\u8fd9\u4e00\u9886\u57df\u6295\u8d44\uff0c\u4ee5\u63d0\u9ad8\u5efa\u7b51\u80fd\u6e90\u4f7f\u7528\u6548\u7387\u3002\n\n>**\u63d0\u793a\uff1a**Code \u548c Markdown \u533a\u57df\u53ef\u901a\u8fc7 **Shift + Enter** \u5feb\u6377\u952e\u8fd0\u884c\u3002\u6b64\u5916\uff0cMarkdown\u53ef\u4ee5\u901a\u8fc7\u53cc\u51fb\u8fdb\u5165\u7f16\u8f91\u6a21\u5f0f\u3002\n\n\u6211\u4eec\u5c06\u8fd9\u4e2anotebook\u5206\u4e3a\u4e0d\u540c\u7684\u6b65\u9aa4\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u94fe\u63a5\u6765\u6d4f\u89c8\u6b64notebook\u3002\n\n* [Step 1](#step1): \u5bfc\u5165\u6570\u636e\n* [Step 2](#step2): \u63a2\u7d22\u6027\u6570\u636e\u5206\u6790\n* [Step 3](#step3): \u6570\u636e\u9884\u5904\u7406\n* [Step 4](#step4): LightGBM\n* [Step 5](#step5): \u7ed3\u679c\u9884\u6d4b\n\n\u5728\u8be5\u9879\u76ee\u4e2d\u5305\u542b\u4e86\u5982\u4e0b\u7684\u95ee\u9898\uff1a\n\n* [\u95ee\u9898 1](#question1): \u56de\u987e\u8bfe\u4e0a\u5185\u5bb9\u5e76\u67e5\u9605\u8d44\u6599\uff0c\u5f52\u7eb3\u603b\u7ed3\u6570\u636e\u9884\u5904\u7406\u9700\u8981\u7684\u6b65\u9aa4\u3002\n* [\u95ee\u9898 2](#question2): \u601d\u8003\u6b64\u5904\u4e3a\u4f55\u8981\u8fdb\u884c\u5bf9\u6570\u8f6c\u6362\u3002\n* [\u95ee\u9898 3](#question3): \u67e5\u9605\u8d44\u6599\uff0c\u603b\u7ed3LightGBM\u4e0eCatBoost\u7684\u5dee\u5f02\u3002","1eea1da0":"## 3.4 \u5f02\u5e38\u503c\u5904\u7406 ","cceb432e":"<a id='question3'><\/a>\n### __\u95ee\u9898 3:__\n\n\u67e5\u9605\u8d44\u6599\uff0c\u603b\u7ed3LightGBM\u4e0eCatBoost\u7684\u5dee\u5f02\u3002\n\n__\u56de\u7b54:__ \n","3dde91e8":"## 3.5 \u8bc4\u4ef7\u51fd\u6570\n\n\u7531\u4e8e\u9700\u8981\u9884\u6d4b\u8fde\u7eed\u503c\uff0c\u56e0\u6b64\u9700\u8981\u91c7\u7528\u56de\u5f52\u6a21\u578b\u3002\u7531\u4e8e\u8be5\u9879\u76ee\u662fKaggle\u8d5b\u9898\uff0c\u6d4b\u8bd5\u96c6\u662f\u4f7f\u7528\u5747\u65b9\u6839\u5bf9\u6570\u8bef\u5dee RMSLE\uff08Root Mean Squared Logarithmic Error, RMSLE)\u8bc4\u6d4b\u7684\uff0c\u56e0\u6b64\u8fd9\u91cc\u53ea\u80fd\u4f7f\u7528RMSLE\u3002RMSLE\u7684\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a\n\n$${\\rm RMSLE} = \\sqrt{\\frac{1}{n} \\sum_{i=1}^n (\\log(p_i + 1) - \\log(a_i+1))^2 }$$\n\n\u5176\u4e2d\n- $n$\uff08public\/private\uff09\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u603b\u6570,\n- $p_i$ \u662f\u76ee\u6807\u7684\u9884\u6d4b\u503c\n- $a_i$ \u7b2ci\u4e2a\u76ee\u6807\u7684\u771f\u5b9e\u503c.\n- $\\log(x)$ \u662f\u81ea\u7136\u5bf9\u6570\n\n\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u76ee\u6807\u503c\u8fdb\u884c$y = \\log(y+1)$\u7684\u53d8\u6362\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c1\u7684RMSE\u4f5c\u4e3a\u8bc4\u4ef7\u51fd\u6570\uff0c\u6211\u4eec\u4f7f\u7528numpy\u4e2d\u7684log1p\u5c31\u53ef\u4ee5\u5b9e\u73b0\u3002\n\n\u6ce8\u610f\uff1a\u8fdb\u884c\u9884\u6d4b\u7684\u65f6\u5019\u9700\u8981\u4f7f\u7528$y = e^y-1$\u5c06\u76ee\u6807\u503c\u8f6c\u6362\u56de\u53bb\uff0c\u53ef\u4ee5\u4f7f\u7528 y = np.exp1m(y)\u3002","f1a69c22":"<a id='step5'><\/a>\n# 5. \u7ed3\u679c\u9884\u6d4b","71a3d738":"<a id='step4'><\/a>\n# 4. LightGBM\n## 4.1 \u6a21\u578b\u53c2\u6570\nLightGBM \u4e3b\u8981\u8c03\u8282\u7684\u53c2\u6570\u5305\u62ec\uff1a\n- `learning_rate`\uff1a\u8fed\u4ee3\u6b65\u957f,\u5b66\u4e60\u7387\uff1b\n- `num_leaves`\uff1aLightGBM\u4f7f\u7528leaf-wise\u7684\u7b97\u6cd5\uff0c\u5728\u8c03\u8282\u6811\u7684\u590d\u6742\u5ea6\u65f6\uff0c\u4f7f\u7528num_leaves\uff0c\u8f83\u5c0f\u5bfc\u81f4\u6b20\u62df\u5408\uff0c\u8f83\u5927\u5bfc\u81f4\u8fc7\u62df\u5408\uff1b\n- `subsample`\uff1a0-1\u4e4b\u95f4\uff0c\u63a7\u5236\u6bcf\u68f5\u6811\u968f\u673a\u91c7\u6837\u7684\u6bd4\u4f8b\uff0c\u51cf\u5c0f\u8fd9\u4e2a\u53c2\u6570\u7684\u503c\uff0c\u7b97\u6cd5\u4f1a\u66f4\u52a0\u4fdd\u5b88\uff0c\u907f\u514d\u8fc7\u62df\u5408\u3002\u4f46\u5982\u679c\u8fd9\u4e2a\u503c\u8bbe\u7f6e\u5f97\u8fc7\u5c0f\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6b20\u62df\u5408\uff1b\n- `lambda_l2`\uff1aL2\u6b63\u5219\u5316\u7cfb\u6570\uff0c\u7528\u6765\u63a7\u5236\u8fc7\u62df\u5408\uff1b\n- `num_trees`\uff1a\u8fed\u4ee3\u6b65\u6570\u3002","18ecf869":"## 3.3 \u5173\u8054\u6570\u636e","6dde2538":"## 3.2 \u7f3a\u5931\u503c\u586b\u5145\u4e0e\u7279\u5f81\u6269\u5c55","d0197f97":"## 3.1 \u6570\u636e\u7c7b\u578b\u8f6c\u6362","9c0354f1":"<a id='step3'><\/a>\n# 3. \u6570\u636e\u9884\u5904\u7406\n\n<a id='question1'><\/a>\n### __\u95ee\u9898 1:__\n\n\u56de\u987e\u8bfe\u4e0a\u5185\u5bb9\u5e76\u67e5\u9605\u8d44\u6599\uff0c\u5f52\u7eb3\u603b\u7ed3\u6570\u636e\u9884\u5904\u7406\u9700\u8981\u7684\u6b65\u9aa4\u3002\n\n__\u56de\u7b54:__ "}}