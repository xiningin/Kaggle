{"cell_type":{"36573f40":"code","7419060d":"code","c945ad66":"code","2d4cd363":"code","970c49cc":"code","b631de74":"code","4cf25e62":"code","a7bb6979":"code","2f07f00c":"code","1ca5b236":"code","d6af2673":"code","4c3acdbf":"code","07a68a51":"code","48dc9be6":"code","26d603f3":"code","5b891ab2":"code","dcf1d412":"code","e2a4a774":"code","4e561459":"code","60e002c8":"code","57fb3e9a":"code","8ec2245c":"code","c96e9be4":"code","03c24089":"code","fb69eb54":"code","e5b888ce":"code","fc0d4671":"code","36217556":"code","2c947b75":"code","fc0c434c":"code","ae67dda2":"code","3cd78918":"code","f5b558af":"code","4d196bb5":"code","25aa5500":"code","c336d70a":"code","00b68399":"code","089e5f34":"code","90c8a89d":"code","ee7e2357":"code","899ca20b":"code","8e0c8ce9":"code","4be242be":"code","8961e035":"code","6db1d1f6":"code","41bc8044":"code","4c9f3b97":"code","7393d63d":"code","80a2d886":"code","4e01f450":"code","bd6be02d":"code","6a22c4f2":"code","92a17bac":"code","050babdc":"code","5a150569":"code","a3aa7e2d":"code","96d52a4a":"code","79cee52f":"code","e776dc30":"code","6376a95c":"code","e59657f5":"code","2d2fce48":"code","cab83548":"markdown","aee542d2":"markdown","baaef8da":"markdown","805735b6":"markdown","72cc4e3d":"markdown","92165b1a":"markdown","32c354c2":"markdown","dbfccdd5":"markdown"},"source":{"36573f40":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\npd.set_option('display.max_columns',None)\nimport warnings\nwarnings.filterwarnings(\"ignore\")","7419060d":"df_train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","c945ad66":"df_train.head()","2d4cd363":"df_test.head()","970c49cc":"df_train.shape","b631de74":"df_test.shape","4cf25e62":"df_train.columns","a7bb6979":"df_test.columns","2f07f00c":"df_train.info()","1ca5b236":"df_train.isnull().sum()","d6af2673":"df_train.corr()","4c3acdbf":"corr = df_train.corr()\nsns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 2.5})\nplt.figure(figsize=(36,18))\na = sns.heatmap(corr, annot=True, fmt='.2f')\nrotx = a.set_xticklabels(a.get_xticklabels(), rotation=90)\nroty = a.set_yticklabels(a.get_yticklabels(), rotation=30)","07a68a51":"df_train.describe().T","48dc9be6":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False)","26d603f3":"df_train.isnull().sum()","5b891ab2":"df_train.info()","dcf1d412":"df_train[\"LotFrontage\"] = df_train[\"LotFrontage\"].fillna(df_train[\"LotFrontage\"].mean())\ndf_train.drop([\"Alley\"],axis=1,inplace=True) #Aa alley has more than 3\/4 values are null values.so we drop the column","e2a4a774":"df_train['MasVnrType']=df_train['MasVnrType'].fillna(df_train['MasVnrType'].mode()[0])\ndf_train['MasVnrArea']=df_train['MasVnrArea'].fillna(df_train['MasVnrArea'].mode()[0])\ndf_train['BsmtCond']=df_train['BsmtCond'].fillna(df_train['BsmtCond'].mode()[0])\ndf_train['BsmtQual']=df_train['BsmtQual'].fillna(df_train['BsmtQual'].mode()[0])\ndf_train['FireplaceQu']=df_train['FireplaceQu'].fillna(df_train['FireplaceQu'].mode()[0])\ndf_train['GarageType']=df_train['GarageType'].fillna(df_train['GarageType'].mode()[0])\ndf_train['GarageFinish']=df_train['GarageFinish'].fillna(df_train['GarageFinish'].mode()[0])\ndf_train['GarageQual']=df_train['GarageQual'].fillna(df_train['GarageQual'].mode()[0])\ndf_train['GarageCond']=df_train['GarageCond'].fillna(df_train['GarageCond'].mode()[0])\ndf_train['Electrical']=df_train['Electrical'].fillna(df_train['Electrical'].mode()[0])","4e561459":"df_train.drop(['GarageYrBlt'],axis=1,inplace=True)\ndf_train.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\n#I'm droping these columns because they contain more null values","60e002c8":"df_train.shape","57fb3e9a":"df_train.drop([\"Id\"],axis=1,inplace=True)\n#As id did'nt affect our target variable i'm going to delete it","8ec2245c":"df_train.isnull().sum()","c96e9be4":"df_train['BsmtExposure']=df_train['BsmtExposure'].fillna(df_train['BsmtExposure'].mode()[0])\ndf_train['BsmtFinType2']=df_train['BsmtFinType2'].fillna(df_train['BsmtFinType2'].mode()[0])","03c24089":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='YlGnBu')","fb69eb54":"df_train.isnull().sum()","e5b888ce":"df_train.dropna(inplace=True)\ndf_train.shape","fc0d4671":"#Categorical features handling\ncat_feature = [feature for feature in df_train.columns if df_train[feature].dtype==\"O\"]\nlen(cat_feature)","36217556":"def category_onehot_multcols(multcolumns):\n    df_final=final_df\n    i=0\n    for fields in multcolumns:\n        \n        print(fields)\n        df1=pd.get_dummies(final_df[fields],drop_first=True)\n        \n        final_df.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([final_df,df_final],axis=1)\n        \n    return df_final","2c947b75":"main_df = df_train.copy()","fc0c434c":"main_df.head()","ae67dda2":"df_test.head()","3cd78918":"sol = df_test[\"Id\"]\ndf_test.shape","f5b558af":"test_num = [feature for feature in df_test.columns if df_test[feature].isnull().sum()>1]\ntest_num","4d196bb5":"df_test['MSZoning']=df_test['MSZoning'].fillna(df_test['MSZoning'].mode()[0])\ndf_test['LotFrontage']=df_test['LotFrontage'].fillna(df_test['LotFrontage'].mean())","25aa5500":"df_test.drop(['Alley'],axis=1,inplace=True)\ndf_test.drop(['GarageYrBlt'],axis=1,inplace=True)\ndf_test.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\ndf_test.drop(['Id'],axis=1,inplace=True)\n#Dropping columns not present in train data","c336d70a":"df_test['Utilities']=df_test['Utilities'].fillna(df_test['Utilities'].mode()[0])\ndf_test['MasVnrType']=df_test['MasVnrType'].fillna(df_test['MasVnrType'].mode()[0])\ndf_test['MasVnrArea']=df_test['MasVnrArea'].fillna(df_test['MasVnrArea'].mode()[0])\ndf_test['BsmtCond']=df_test['BsmtCond'].fillna(df_test['BsmtCond'].mode()[0])\ndf_test['BsmtQual']=df_test['BsmtQual'].fillna(df_test['BsmtQual'].mode()[0])\ndf_test['BsmtExposure']=df_test['BsmtExposure'].fillna(df_test['BsmtExposure'].mode()[0])\ndf_test['BsmtFinType1']=df_test['BsmtFinType1'].fillna(df_test['BsmtFinType1'].mode()[0])\ndf_test['BsmtFinType2']=df_test['BsmtFinType2'].fillna(df_test['BsmtFinType2'].mode()[0])\ndf_test['BsmtFullBath']=df_test['BsmtFullBath'].fillna(df_test['BsmtFullBath'].mode()[0])\ndf_test['BsmtHalfBath']=df_test['BsmtHalfBath'].fillna(df_test['BsmtHalfBath'].mode()[0])\ndf_test['Functional']=df_test['Functional'].fillna(df_test['Functional'].mode()[0])\ndf_test['FireplaceQu']=df_test['FireplaceQu'].fillna(df_test['FireplaceQu'].mode()[0])\ndf_test['GarageType']=df_test['GarageType'].fillna(df_test['GarageType'].mode()[0])\ndf_test['GarageFinish']=df_test['GarageFinish'].fillna(df_test['GarageFinish'].mode()[0])\ndf_test['GarageQual']=df_test['GarageQual'].fillna(df_test['GarageQual'].mode()[0])\ndf_test['GarageCond']=df_test['GarageCond'].fillna(df_test['GarageCond'].mode()[0])","00b68399":"df_test.shape","089e5f34":"df_test.loc[:, df_test.isnull().any()].head()","90c8a89d":"df_test['Exterior1st']=df_test['Exterior1st'].fillna(df_test['Exterior1st'].mode()[0])\ndf_test['Exterior2nd']=df_test['Exterior2nd'].fillna(df_test['Exterior2nd'].mode()[0])\ndf_test['BsmtFinSF1']=df_test['BsmtFinSF1'].fillna(df_test['BsmtFinSF1'].mean())\ndf_test['BsmtFinSF2']=df_test['BsmtFinSF2'].fillna(df_test['BsmtFinSF2'].mean())\ndf_test['BsmtUnfSF']=df_test['BsmtUnfSF'].fillna(df_test['BsmtUnfSF'].mean())\ndf_test['TotalBsmtSF']=df_test['TotalBsmtSF'].fillna(df_test['TotalBsmtSF'].mean())\ndf_test['KitchenQual']=df_test['KitchenQual'].fillna(df_test['KitchenQual'].mode()[0])\ndf_test['GarageCars']=df_test['GarageCars'].fillna(df_test['GarageCars'].mean())\ndf_test['GarageArea']=df_test['GarageArea'].fillna(df_test['GarageArea'].mean())\ndf_test['SaleType']=df_test['SaleType'].fillna(df_test['SaleType'].mode()[0])","ee7e2357":"df_test.isnull().sum().any()","899ca20b":"df_test.shape","8e0c8ce9":"df_train.shape","4be242be":"final_df = pd.concat([df_train,df_test],axis=0)","8961e035":"final_df.shape","6db1d1f6":"final_df = category_onehot_multcols(cat_feature)","41bc8044":"final_df.shape #After one hot encoding categorical data","4c9f3b97":"final_df =final_df.loc[:,~final_df.columns.duplicated()]","7393d63d":"final_df.shape","80a2d886":"train_df = final_df.iloc[:1422,:]\ntest_df = final_df.iloc[1422:,:]","4e01f450":"test_df.head()","bd6be02d":"train_df.head()","6a22c4f2":"test_df.drop([\"SalePrice\"],axis=1,inplace=True)","92a17bac":"train_df[\"SalePrice\"]","050babdc":"X_train=train_df.drop(['SalePrice'],axis=1)\ny_train=train_df['SalePrice']","5a150569":"from sklearn.preprocessing import StandardScaler\nscalar = StandardScaler()\nX_train = scalar.fit_transform(X_train)\ntest_df = scalar.transform(test_df)","a3aa7e2d":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(X_train,y_train)","96d52a4a":"y_tr=lr.predict(X_train)","79cee52f":"lr.coef_","e776dc30":"lr.intercept_","6376a95c":"y_pred = lr.predict(test_df)","e59657f5":"lst = sol\n  \n# list of int\nlst2 = list(y_pred)\n  \n# Calling DataFrame constructor after zipping\n# both lists, with columns specified\ndf = pd.DataFrame(list(zip(lst, lst2)),\n               columns =['id', 'SalePrice'])","2d2fce48":"df.to_csv('result.csv',index=False)","cab83548":"# Multiple Linear Regression","aee542d2":"# Reading the files","baaef8da":"# Handling training data","805735b6":"# Finding predictions for Test data and make .csv file(result.csv)","72cc4e3d":"COncatinating train and test data to do one hot encoding for categorical data","92165b1a":"# Handling Test Data","32c354c2":"Handling missing values","dbfccdd5":"# Importing Libraries"}}