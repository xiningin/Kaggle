{"cell_type":{"ca9bd821":"code","1aeb4b6f":"code","dc64ca9a":"code","56fa0de2":"code","3afefffe":"code","e83f2ed2":"code","2840ddd0":"code","2c931bf8":"code","0d3509f7":"code","0ea6ab18":"code","cace2f48":"code","7a6dc4b9":"code","134a4c21":"code","d8aa55c4":"code","4d79a1c2":"code","bfe1cb5f":"code","279ecf7b":"code","b9e91ab2":"code","d47ee916":"code","2fe8d787":"code","d4e049f4":"code","fd8b9616":"code","56d9e681":"code","9119497d":"code","888680c5":"code","14da98cd":"code","3fbb4b02":"code","64aad85a":"code","c0206fe5":"code","3a3c13b7":"code","4f24c8ec":"code","9822b7d6":"code","17680f21":"code","3a466029":"markdown","91e1fcfd":"markdown","46c613b8":"markdown","8389f732":"markdown"},"source":{"ca9bd821":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, recall_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom statistics import mean\nfrom sklearn.svm import SVC\nimport xgboost as xgb\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import confusion_matrix\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1aeb4b6f":"df=pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')","dc64ca9a":"df.info","56fa0de2":"df.head","3afefffe":"df.shape","e83f2ed2":"df.isnull().sum()","2840ddd0":"df.corr()","2c931bf8":"numerical = ['Age','Resting Blood Pressure','Cholesterol','Max. Heart Rate','Previous Peak']\ncategorical= ['Sex','Chest Pain Type','Fasting Blood Sugar','Resting ECG','Exercise Induced Angina','Slope','No. Major Blood Vessels','Thal Rate']","0d3509f7":"sns.pairplot(df, hue= 'output')","0ea6ab18":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(), annot=True)","cace2f48":"ax = sns.countplot(data=df, x='output',palette=['lightgrey','#eeb977'])\nax.set(xticklabels=['Less chance of Heart Attack', 'More chance of Heart Attack'], title=\"Target Distribution\")\nax.tick_params(bottom=False)","7a6dc4b9":"corr = df.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\nf, ax = plt.subplots(figsize=(8, 8))\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0, square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","134a4c21":"labels = ['More Chance of Heart Attack', 'Less Chance of Heart Attack']\nsizes = df['output'].value_counts(sort = True)\n\ncolors = [\"#ffb3b3\",\"#C2C4E2\"]\nexplode = (0.05,0) \n \nplt.figure(figsize=(7,7))\nplt.suptitle(\"Number of Targets in the dataset\",y=0.9, family='Sherif', size=18, weight='bold')\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90,)\n\nplt.show()","d8aa55c4":"df.columns = ['Age', 'Sex', 'Chest Pain Type', 'Resting Blood Pressure', 'Cholesterol', 'Fasting Blood Sugar', 'Resting ECG', 'Max. Heart Rate',\n       'Exercise Induced Angina', 'Previous Peak', 'Slope', 'No. Major Blood Vessels', 'Thal Rate', 'Condition']\ncolors = [\"#D0DBEE\", \"#C2C4E2\", \"#EED4E5\", \"#D1E6DC\", \"#BDE2E2\"]\nj=0\nfig=plt.figure(figsize=(10,10),constrained_layout =True)\nplt.suptitle(\"Count of the Categorical Variables\",y=1.07, family='Sherif', size=18, weight='bold')\nfig.text(0.31,1.02,\"Categorical Data without Condition\", size=13, fontweight='light', fontfamily='monospace')\nfor i in df[categorical]:\n    ax=plt.subplot(241+j)\n    ax.set_aspect('auto')\n    ax.grid(color='gray', linestyle=':', axis='y', zorder=0, dashes=(1,5))\n    ax=sns.countplot(data=df, x=i, palette=colors, alpha=1)\n    for s in ['left','right','top','bottom']:\n        ax.spines[s].set_visible(False)\n    j=j+1","4d79a1c2":"colors = ['#ccccff','#ffcccc']\nj=0\nfig=plt.figure(figsize=(10,10),constrained_layout =True)\nplt.suptitle(\"Count of the Categorical Variables\",y=1.07, family='Sherif', size=18, weight='bold')\nfig.text(0.33,1.02,\"Categorical Data with Condition\", size=13, fontweight='light', fontfamily='monospace')\nfor i in df[categorical]:\n    ax=plt.subplot(241+j)\n    ax.set_aspect('auto')\n    ax.grid(color='gray', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\n    ax=sns.countplot(data=df, x=i, hue='Condition', palette=colors, alpha=1)\n    for s in ['left','right','top','bottom']:\n        ax.spines[s].set_visible(False)\n    j=j+1","bfe1cb5f":"colors = ['#D0DBEE','#ff3333']\nnum_cols = ['Resting Blood Pressure','Cholesterol','Max. Heart Rate','Previous Peak']\nj=0\nfig=plt.figure(figsize=(10,10),constrained_layout =True)\nplt.suptitle(\"Scatter Plot of the Numeric Variables\",y=1.07, family='Sherif', size=18, weight='bold')\nfig.text(0.333,1.02,\"Numerical Data with Condition\", size=13, fontweight='light', fontfamily='monospace')\nfor i in df[num_cols]:\n    ax=plt.subplot(321+j)\n    ax.set_aspect('auto')\n    ax.grid(color='gray', linestyle=':', axis='x', zorder=0,  dashes=(1,5))\n    ax=sns.scatterplot(data=df,x=df['Age'],y=i,hue=df['Condition'],ec='black',palette=colors)\n    for s in ['left','right','top','bottom']:\n        ax.spines[s].set_visible(False)\n    j=j+1","279ecf7b":"colors = ['#CBE4F9','#CDF5F6','#EFF9DA','#F9EBDF','#F9D8D6']\nplt.figure(figsize=(9,9))\nplt.suptitle(\"Outliers of Numeric Variables\",y=0.94, family='Sherif', size=18, weight='bold')\nplt.text(-0.4, 1.64, 'Detecting Outliers in Numerical Columns', horizontalalignment='center',verticalalignment='center', transform=ax.transAxes,size=14,fontweight='light', fontfamily='monospace')\nsns.boxenplot(data = df[numerical],palette = colors)\nplt.grid(color='gray', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nplt.xticks(rotation=45)\nplt.show()","b9e91ab2":"for i in df[numerical]:\n    q1 = df[i].quantile(0.25)\n    q3 = df[i].quantile(0.75)\n    iqr = q3-q1\n    Lower_tail = q1 - 1.5 * iqr\n    Upper_tail = q3 + 1.5 * iqr\n    med = np.median(df[i])\n    for j in df[i]:\n        if j > Upper_tail or j < Lower_tail:\n            df[i] = df[i].replace(j, med)","d47ee916":"colors = ['#CBE4F9','#CDF5F6','#EFF9DA','#F9EBDF','#F9D8D6']\nplt.figure(figsize=(9,9))\nplt.suptitle(\"Outliers of Numeric Variables\",y=0.94, family='Sherif', size=18, weight='bold')\nplt.text(-0.405, 1.64, 'Removing Outliers in Numerical Columns', horizontalalignment='center',verticalalignment='center', transform=ax.transAxes,size=14,fontweight='light', fontfamily='monospace')\nsns.boxenplot(data = df[numerical],palette = colors)\nplt.grid(color='gray', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nplt.xticks(rotation=45)\nplt.show()","2fe8d787":"colors = ['#80d4ff','#ff3333']\nsns.pairplot(data=df,hue='Condition',diag_kind='kde',palette=colors)\nplt.show()","d4e049f4":"x = df.iloc[:, 1:-1].values\ny = df.iloc[:, -1].values\nx,y","fd8b9616":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size= 0.2, random_state= 0)","56d9e681":"print('Shape for training data', x_train.shape, y_train.shape)\nprint('Shape for testing data', x_test.shape, y_test.shape)","9119497d":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","888680c5":"x_train,x_test","14da98cd":"model = LogisticRegression()\nmodel.fit(x_train, y_train)\npredicted=model.predict(x_test)\nconf = confusion_matrix(y_test, predicted)\nprint (\"Confusion Matrix : \\n\", conf)\nprint (\"The accuracy of Logistic Regression is : \", accuracy_score(y_test, predicted)*100, \"%\")","3fbb4b02":"model = GaussianNB()\nmodel.fit(x_train, y_train)\n  \npredicted = model.predict(x_test)\n  \nprint(\"The accuracy of Gaussian Naive Bayes model is : \", accuracy_score(y_test, predicted)*100, \"%\")","64aad85a":"model = SVC()\nmodel.fit(x_train, y_train)\n  \npredicted = model.predict(x_test)\nprint(\"The accuracy of SVM is : \", accuracy_score(y_test, predicted)*100, \"%\")","c0206fe5":"model = RandomForestRegressor(n_estimators = 100, random_state = 0)  \nmodel.fit(x_train, y_train)  \npredicted = model.predict(x_test)\nprint(\"The accuracy of Random Forest is : \", accuracy_score(y_test, predicted.round())*100, \"%\")","3a3c13b7":"model = KNeighborsClassifier(n_neighbors = 1)  \nmodel.fit(x_train, y_train)\npredicted = model.predict(x_test)\n  \n\nprint(confusion_matrix(y_test, predicted))\nprint(\"The accuracy of KNN is : \", accuracy_score(y_test, predicted.round())*100, \"%\")","4f24c8ec":"error_rate = []\n  \nfor i in range(1, 40):\n      \n    model = KNeighborsClassifier(n_neighbors = i)\n    model.fit(x_train, y_train)\n    pred_i = model.predict(x_test)\n    error_rate.append(np.mean(pred_i != y_test))\n  \nplt.figure(figsize =(10, 6))\nplt.plot(range(1, 40), error_rate, color ='blue',\n                linestyle ='dashed', marker ='o',\n         markerfacecolor ='red', markersize = 10)\n  \nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","9822b7d6":"model = KNeighborsClassifier(n_neighbors = 7)\n  \nmodel.fit(x_train, y_train)\npredicted = model.predict(x_test)\n  \n\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test, predicted))\n\nprint(\"The accuracy of KNN is : \", accuracy_score(y_test, predicted.round())*100, \"%\")","17680f21":"model = xgb.XGBClassifier(use_label_encoder=False)\nmodel.fit(x_train, y_train)\n   \npredicted = model.predict(x_test)\n   \ncm = confusion_matrix(y_test, predicted)\nprint()\nprint (\"The accuracy of X Gradient Boosting is : \", accuracy_score(y_test, predicted)*100, \"%\")","3a466029":"Data Bilgi Edindik","91e1fcfd":"**G\u00d6RSELLE\u015eT\u0130RME**","46c613b8":"Mahir Yusuf A.","8389f732":"**DATAYI \u0130\u015eLEYEME GE\u00c7\u0130YORUZ**"}}