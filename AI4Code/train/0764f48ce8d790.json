{"cell_type":{"932054b7":"code","f3b1465c":"code","50aedb8d":"code","a43bcf50":"code","e938e9c1":"code","68bbb9d5":"code","302956b4":"code","a1433273":"code","5a10c865":"code","809c6028":"code","096a8e5d":"code","5d002ceb":"code","12d55f86":"code","ddbd3b4d":"code","d5f6fa18":"code","9dd9453a":"code","e691a4ed":"code","84f24340":"code","a82718af":"code","cd06a288":"code","40f8e31b":"code","38aa52ac":"code","52c8c52c":"code","806e912c":"code","e4dafb19":"code","94e2e0d7":"code","3d672629":"code","8cbd8668":"code","3bdcb9c3":"code","c0ce3565":"code","b309128e":"code","74865a59":"code","5354750f":"code","9ba0d0d5":"markdown","3315fd6d":"markdown","a631718a":"markdown","a717d2c0":"markdown","b2a862e8":"markdown","77f5ebec":"markdown","a4c9353e":"markdown","acf0566b":"markdown","c85bb577":"markdown","bd72ae3c":"markdown"},"source":{"932054b7":"import numpy as np\nimport pandas as pd\nfrom pandas import set_option\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport scipy\nimport sklearn\nfrom sklearn.utils import shuffle\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport os\nprint(os.listdir(\"..\/input\"))","f3b1465c":"# Reading the dataset\ndata = pd.read_csv('..\/input\/sonar.all-data.csv')","50aedb8d":"data.info()","a43bcf50":"data.head(10)","e938e9c1":"# Describe data\ndata.shape\nset_option('precision', 3)\ndata.describe()","68bbb9d5":"print(\"Total Columns : \", len(data.columns))","302956b4":"# Total Labels\ndata[data.columns[60]].value_counts()","a1433273":"# histograms\ndata.hist(sharex=False, sharey=False, xlabelsize=13, ylabelsize=13, figsize=(20,20))\nplt.show()","5a10c865":"# density\ndata.plot(kind='density', subplots=True, layout=(8,8), sharex=False, legend=True, fontsize=13, figsize=(40,40))\nplt.show()","809c6028":"# correlation matrix\nfig = plt.figure()\nax = fig.add_subplot(111)\ncax = ax.matshow(data.corr(), vmin=-1, vmax=1, interpolation='none')\nfig.colorbar(cax)\nfig.set_size_inches(10,10)\nplt.show()","096a8e5d":"X = data[data.columns[0:60]].values\ny = data[data.columns[60]].values","5d002ceb":"print(X.shape)\nprint(y.shape)","12d55f86":"def one_hot_encode(labels):\n    n_labels = len(labels)\n    # np.unique - Find the unique elements of an array (pour \u00e9viter les doublons)\n    n_unique_labels = len(np.unique(labels))\n    # np.zeros([n,p]) - Repr\u00e9sente la matrice nulle de taille n*p\n    one_hot_encode = np.zeros((n_labels,n_unique_labels))\n    # np.arange(a,b,i) - Construit le tableau g\u00e9n\u00e9rique [a; a+i; a+2i;...; b]\n    one_hot_encode[np.arange(n_labels), labels] = 1\n    return one_hot_encode","ddbd3b4d":"encoder = LabelEncoder()\nencoder.fit(y)\ny = encoder.transform(y)\nY = one_hot_encode(y)","d5f6fa18":"encoder = LabelEncoder()\nencoder.fit(y)\ny = encoder.transform(y)\nY = one_hot_encode(y)","9dd9453a":"Y[0]","e691a4ed":"#We shuffle the data\nX,Y = shuffle (X, Y, random_state = 0)","84f24340":"train_x, test_x, train_y, test_y = train_test_split(X, Y, test_size = 0.20, random_state = 0)","a82718af":"print(train_x.shape)\nprint(train_y.shape)\nprint(test_x.shape)\nprint(test_y.shape)","cd06a288":"learning_rate = 0.2\ntraining_epochs = 1000","40f8e31b":"#Annonce en sortie la dimension de la matrice X, soit 60 colonnes\nn_dim = X.shape[1]\nprint(\"n_dim = \", n_dim)\nn_class = 2","38aa52ac":"cost_history = np.empty(shape=[1],dtype=float)","52c8c52c":"n_hidden_1 = 60","806e912c":"x = tf.placeholder(tf.float32, [None, n_dim])\nW = tf.Variable(tf.zeros([n_dim, n_class]))\nb = tf.Variable(tf.zeros([n_class]))\ny_ = tf.placeholder(tf.float32, [None, n_class])","e4dafb19":"# Define the model\ndef multilayer_perceptron(x, weights, biases):\n \n    # Hidden layer with sigmoid activations\n    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])\n    layer_1 = tf.nn.relu(layer_1)\n \n    # Output layer with linear activation\n    out_layer = tf.matmul(layer_1, weights['out']) + biases['out']\n    return out_layer","94e2e0d7":"# Define the weights for each layers\n \nweights = {\n    'h1': tf.Variable(tf.truncated_normal([n_dim, n_hidden_1])),\n    'out': tf.Variable(tf.truncated_normal([n_hidden_1, n_class]))\n}","3d672629":"# Define the bias for each layers\nbiases = {\n    'b1': tf.Variable(tf.truncated_normal([n_hidden_1])),\n    'out': tf.Variable(tf.truncated_normal([n_class]))\n}","8cbd8668":"init = tf.global_variables_initializer()","3bdcb9c3":"# Calling model\ny = multilayer_perceptron(x, weights, biases)","c0ce3565":"cost_function = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=y, labels=y_))\ntraining_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost_function)","b309128e":"sess = tf.Session()\nsess.run(init) ","74865a59":"mse_history = []\naccuracy_history = []","5354750f":"for epoch in range(training_epochs):\n    sess.run(training_step, feed_dict = {x: train_x, y_: train_y})\n    cost = sess.run(cost_function, feed_dict={x: train_x, y_: train_y})\n    cost_history = np.append(cost_history, cost)\n    correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n    pred_y = sess.run(y, feed_dict = {x: test_x})\n    mse = tf.reduce_mean(tf.square(pred_y - test_y))\n    mse_ = sess.run(mse)\n    mse_history.append(mse_)\n    accuracy = (sess.run(accuracy, feed_dict={x: train_x, y_: train_y}))\n    accuracy_history.append(accuracy)\n    \n    if epoch % 50 == 0:\n        print('epoch : ', epoch, ' ; ', 'cost: ', cost, \" ; MSE: \", mse_, \"- Train Accuracy: \", accuracy )\n","9ba0d0d5":"**Initializing Session**","3315fd6d":"**Data visualisation**","a631718a":"**Training Model**","a717d2c0":"**Neural Net Model**","b2a862e8":"**Input and Output Data**","77f5ebec":"**Hidden layer**","a4c9353e":"**OneHotEncoder**","acf0566b":"**Training and Testing Data**","c85bb577":"**Import**","bd72ae3c":"**Cost Function**"}}