{"cell_type":{"65dbc8e5":"code","36409119":"code","b3323941":"code","6a5861a8":"code","4a28bda2":"code","5592cfc9":"code","ea6acc00":"code","f8294338":"code","dd64a17a":"code","1504f02a":"code","6e797c6f":"code","ebab8e79":"code","b49ea597":"code","42e71932":"code","c676be7b":"code","04d9699a":"code","17556ff1":"code","5a755dd4":"code","8641254f":"code","dee75455":"code","c370c138":"code","a82ca039":"code","2d0633ca":"code","ead74c38":"code","c6f863e5":"code","109dccee":"code","4408bc49":"code","c5580df1":"code","8d5e5d8a":"code","7a60b5f9":"code","5a2b21bf":"code","a2e50d0d":"code","9605af01":"code","029d4321":"code","69dd9441":"code","1e2c964b":"code","7883da90":"code","0eabeeb2":"code","e07d27e2":"code","1bbf5d1a":"code","2804aa3b":"code","c5657268":"code","1a77ef94":"code","110ea96c":"code","ee5520fb":"code","764e1b54":"code","ef1c2edd":"markdown","7214e4cd":"markdown","aa509e62":"markdown","e01231e7":"markdown","2905b210":"markdown","c153fa95":"markdown","471d1d6e":"markdown","117daed2":"markdown","eaa09e38":"markdown","984eb6dd":"markdown","4ea72289":"markdown","25b90fef":"markdown","ead727e3":"markdown","e078d341":"markdown","12736f63":"markdown","fe466b63":"markdown","ecf151cf":"markdown","a867814b":"markdown","551022f0":"markdown","5971539f":"markdown","866f606a":"markdown","79fc7c89":"markdown","e131e56a":"markdown","81c3d13b":"markdown","a70037b9":"markdown","7dbec47c":"markdown","157646aa":"markdown","6376090f":"markdown","32309842":"markdown","4574f528":"markdown","b152299e":"markdown","a448b3b7":"markdown","8358af7d":"markdown"},"source":{"65dbc8e5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","36409119":"messages = pd.read_csv(\"\/kaggle\/input\/sms-spam-collection-dataset\/spam.csv\",encoding='latin-1')","b3323941":"#Displaying top five rows\nmessages.head()","6a5861a8":"#remove unneccessary columns\nmessages = messages.drop([\"Unnamed: 2\", \"Unnamed: 3\", \"Unnamed: 4\"], axis=1)","4a28bda2":"#renaming columns names\nmessages.columns= ['label','message']","5592cfc9":"#basic descriptive stats\nmessages.describe()","ea6acc00":"messages.groupby('label').describe().T","f8294338":"messages['length'] = messages['message'].apply(len)\nmessages.head()","dd64a17a":"sns.set()","1504f02a":"#Let's visualize this!\nmessages['length'].plot(bins=50, kind='hist');","6e797c6f":"messages.length.describe()","ebab8e79":"messages.hist(column='length', by='label', bins=50,figsize=(12,4));","b49ea597":"import string\n\nmess = 'Sample message! Notice: it has punctuation.'\n\n# Check characters to see if they are in punctuation\nnopunc = [char for char in mess if char not in string.punctuation]\n\n# Join the characters again to form the string.\nnopunc = ''.join(nopunc)","42e71932":"from nltk.corpus import stopwords\nstopwords.words('english')[0:10] # Show some stop words","c676be7b":"nopunc.split()","04d9699a":"# Now just remove any stopwords\nclean_mess = [word for word in nopunc.split() if word.lower() not in stopwords.words('english')]","17556ff1":"clean_mess","5a755dd4":"def text_process(mess):\n    \"\"\"\n    Takes in a string of text, then performs the following:\n    1. Remove all punctuation\n    2. Remove all stopwords\n    3. Returns a list of the cleaned text\n    \"\"\"\n    # Check characters to see if they are in punctuation\n    nopunc = [char for char in mess if char not in string.punctuation]\n\n    # Join the characters again to form the string.\n    nopunc = ''.join(nopunc)\n    \n    # Now just remove any stopwords\n    return [word for word in nopunc.split() if word.lower() not in stopwords.words('english')]","8641254f":"# Check to make sure its working\nmessages['message'].head(5).apply(text_process)","dee75455":"from sklearn.feature_extraction.text import CountVectorizer","c370c138":"bow_transformer = CountVectorizer(analyzer=text_process).fit(messages['message'])\n\n# Print total number of vocab words\nprint(len(bow_transformer.vocabulary_))","a82ca039":"message4 = messages['message'][3]\nbow4 = bow_transformer.transform([message4])\nprint(bow4)\nprint(bow4.shape)","2d0633ca":"messages_bow = bow_transformer.transform(messages['message'])\nprint('Shape of Sparse Matrix: ', messages_bow.shape)\nprint('Amount of Non-Zero occurences: ', messages_bow.nnz)","ead74c38":"sparsity = (100.0 * messages_bow.nnz \/ (messages_bow.shape[0] * messages_bow.shape[1]))\nprint('sparsity: {}'.format(round(sparsity,4)))","c6f863e5":"from sklearn.feature_extraction.text import TfidfTransformer\n\ntfidf_transformer = TfidfTransformer().fit(messages_bow)\ntfidf4 = tfidf_transformer.transform(bow4)\nprint(tfidf4)","109dccee":"print(tfidf_transformer.idf_[bow_transformer.vocabulary_['u']])\nprint(tfidf_transformer.idf_[bow_transformer.vocabulary_['university']])","4408bc49":"messages_tfidf = tfidf_transformer.transform(messages_bow)\nprint(messages_tfidf.shape)","c5580df1":"from sklearn.naive_bayes import MultinomialNB\nspam_detect_model = MultinomialNB().fit(messages_tfidf, messages['label'])","8d5e5d8a":"print('predicted:', spam_detect_model.predict(tfidf4)[0])\nprint('expected :', messages.label[3])","7a60b5f9":"all_predictions = spam_detect_model.predict(messages_tfidf)\nprint(all_predictions)","5a2b21bf":"from sklearn.metrics import classification_report\nprint (classification_report(messages['label'], all_predictions))","a2e50d0d":"from sklearn.model_selection import train_test_split\n\nmsg_train, msg_test, label_train, label_test = \\\ntrain_test_split(messages['message'], messages['label'], test_size=0.2)\n\nprint(len(msg_train), len(msg_test), len(msg_train) + len(msg_test))","9605af01":"from sklearn.pipeline import Pipeline\n\npipeline = Pipeline([\n    ('bow', CountVectorizer(analyzer=text_process)),  # strings to token integer counts\n    ('tfidf', TfidfTransformer()),  # integer counts to weighted TF-IDF scores\n    ('classifier', MultinomialNB()),  # train on TF-IDF vectors w\/ Naive Bayes classifier\n])","029d4321":"pipeline.fit(msg_train,label_train)","69dd9441":"predictions = pipeline.predict(msg_test)\nprint(classification_report(predictions,label_test))","1e2c964b":"from sklearn.metrics import accuracy_score","7883da90":"accuracy_score(predictions,label_test) * 100","0eabeeb2":"from nltk.stem.porter import PorterStemmer","e07d27e2":"#Stemming is the process of reducing words to its root words\nport_stem  = PorterStemmer()\nimport re\nfrom nltk.tokenize import word_tokenize","1bbf5d1a":"#Data cleaning and preprocessing\nsms = []\nfor i in range(0,len(messages['message'])):\n    review  = re.sub('[^a-zA-Z]',' ',messages['message'][i])\n    review = review.lower()\n    review = word_tokenize(review) #tokenization\n    \n    #stemming process\n    \n    review = [port_stem.stem(word) for word in review if word not in stopwords.words('english')]\n    review = ' '.join(review)\n    sms.append(review)\n    ","2804aa3b":"#creating bag of words model\nX = CountVectorizer(max_features=4000).fit_transform(sms) # limiting only 4000 features(columns)\ny = messages.iloc[:,0]","c5657268":"#trian test split\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","1a77ef94":"#Fitting our model\nspam_model = MultinomialNB()\nspam_model.fit(x_train,y_train)","110ea96c":"#Make Predictions\npred_stem = spam_model.predict(x_test)","ee5520fb":"#Model evaluation \nfrom sklearn.metrics import confusion_matrix,accuracy_score,f1_score\nprint ( confusion_matrix(y_test,pred_stem))\nprint('\\n')\nprint (classification_report(y_test,pred_stem))","764e1b54":"#comparing results \nprint ('Model accuracy score without stemming process :',accuracy_score(predictions,label_test) *int(100))\nprint('Model accuracy score with stemming : ',accuracy_score(y_test,pred_stem) *int(100)) ","ef1c2edd":"# NLP (Natural Language Processing) with Python\n\nIn this kernel, we will discuss a higher level overview of the basics of Natural Language Processing, which basically consists of combining machine learning techniques with text, and using math and statistics to get that text in a format that the machine learning algorithms can understand!","7214e4cd":"# Feature Engineering\n\nAs we continue our analysis we want to start thinking about the features we are going to be using. This goes along with the general idea of feature engineering. The better your domain knowledge on the data, the better your ability to engineer more features from it. Feature engineering is a very large part of spam detection in general\n\nLet's make a new column to detect how long the text messages are:","aa509e62":"Let's take one text message and get its bag-of-words counts as a vector, putting to use our new `bow_transformer`:","e01231e7":"# Training a model","2905b210":"# Exploratory Data Analysis\nLet's check out some of the stats with some plots and the built-in methods in pandas!","c153fa95":"## More Resources\n\nCheck out the links below for more info on Natural Language Processing:\n\n[NLTK Book Online](http:\/\/www.nltk.org\/book\/)\n\n[Kaggle Walkthrough](https:\/\/www.kaggle.com\/c\/word2vec-nlp-tutorial\/details\/part-1-for-beginners-bag-of-words)\n\n[SciKit Learn's Tutorial](http:\/\/scikit-learn.org\/stable\/tutorial\/text_analytics\/working_with_text_data.html)","471d1d6e":"There are many ways the data can be preprocessed and vectorized. These steps involve feature engineering and building a \"pipeline\". I encourage you to check out SciKit Learn's documentation on dealing with text data as well as the expansive collection of available papers and books on the general topic of NLP.","117daed2":"Fantastic! We've developed a model that can attempt to predict spam vs ham classification!\n\n# Model Evaluation\nNow we want to determine how well our model will do overall on the entire dataset. Let's begin by getting all the predictions:","eaa09e38":"Now let's put both of these together in a function to apply it to our DataFrame later on:","984eb6dd":"Since there are so many messages, we can expect a lot of zero counts for the presence of that word in that document. Because of this, SciKit Learn will output a [Sparse Matrix](https:\/\/en.wikipedia.org\/wiki\/Sparse_matrix).","4ea72289":"\nConsider a document containing 100 words wherein the word cat appears 3 times. \n\nThe term frequency (i.e., tf) for cat is then (3 \/ 100) = 0.03. Now, assume we have 10 million documents and the word cat appears in one thousand of these. Then, the inverse document frequency (i.e., idf) is calculated as log(10,000,000 \/ 1,000) = 4. Thus, the Tf-idf weight is the product of these quantities: 0.03 * 4 = 0.12.\n\nLet's go ahead and see how we can do this in SciKit Learn:","25b90fef":"`We'll be using scikit-learn here, choosing the [Naive Bayes](http:\/\/en.wikipedia.org\/wiki\/Naive_Bayes_classifier) classifier to start with:","ead727e3":"# Conclusion\n\nJust by applying stemming process to our model,\n\n**We increased our model performance by almost 1 percentage which is incredible!!**\nNot only that,precision,f1_score has also increased significantly.","e078d341":"Let's use **groupby** to use describe by label, this way we can begin to think about the features that separate ham and spam!","12736f63":"## Import dependencies","fe466b63":"# Vectorization","ecf151cf":"**Fantastic!!**\n**Our model accuracy score is 96% which is quite awesome for my first NLP project**\n\nWe can improve our model by doing feature engg task such as stemming,lemmatization techniques!!!","a867814b":"We could have created pipeline workflow to ease our work!!","551022f0":"Now let's \"tokenize\" these messages. Tokenization is just the term used to describe the process of converting the normal text strings in to a list of tokens (words that we actually want).\n\n**Let's see an example output on on column:**","5971539f":"## Text Pre-processing","866f606a":"In this kernel, we'll convert the raw messages (sequence of characters) into vectors (sequences of numbers).\n\nAs a first step, let's write a function that will split a message into its individual words and return a list. We'll also remove very common words, ('the', 'a', etc..). To do this we will take advantage of the NLTK library. We'll only use some of the basic ones here.\n\nLet's create a function that will process the string in the message column, then we can just use **apply()** in pandas do process all the text in the DataFrame.","79fc7c89":"Now we have a classification report for our model on a true testing set! There is a lot more to Natural Language Processing and its vast expanse of topic could fill up several college courses! Check out the resources below for more information on NLP!","e131e56a":"Looks like text length may be a good feature to think about! Let's try to explain why the x-axis goes all the way to 1000ish, this must mean that there is some really long message!","81c3d13b":"The test size is 20% of the entire dataset (1115 messages out of total 5572), and the training is the rest (4457 out of 5572).\n\n## Creating a Data Pipeline\n\nLet's run our model again and then predict off the test set. We will use SciKit Learn's [pipeline](http:\/\/scikit-learn.org\/stable\/modules\/pipeline.html) capabilities to store a pipeline of workflow. This will allow us to set up all the transformations that we will do to the data for future use. Let's see an example of how it works:","a70037b9":"Currently, we have the messages as lists of tokens and now we need to convert each of those messages into a vector the SciKit Learn's algorithm models can work with.\n\nNow we'll convert each message, represented as a list of tokens above, into a vector that machine learning models can understand.\n\nWe'll do that in three steps using the bag-of-words model:\n\n1. Count how many times does a word occur in each message (Known as term frequency)\n\n2. Weigh the counts, so that frequent tokens get lower weight (inverse document frequency)\n\n3. Normalize the vectors to unit length, to abstract from the original text length (L2 norm)\n\nLet's begin the first step:","7dbec47c":"# TF-IDF transformer","157646aa":"Now we can use **.transform** on our Bag-of-Words (bow) transformed object and transform the entire DataFrame of messages. Let's go ahead and check out how the bag-of-words counts for the entire SMS corpus is a large, sparse matrix:","6376090f":"## Improving Model performance (Apply stemming)","32309842":"We can use classification report, which returns [precision, recall,](https:\/\/en.wikipedia.org\/wiki\/Precision_and_recall) [f1-score](https:\/\/en.wikipedia.org\/wiki\/F1_score), and a column for support (meaning how many cases supported that classification). Check out the links for more detailed info on each of these metrics and the figure below:","4574f528":"<img src='https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/2\/26\/Precisionrecall.svg\/700px-Precisionrecall.svg.png' width=400 \/>","b152299e":"**Very interesting! Through just basic EDA we've been able to discover a trend that spam messages tend to have more characters!!**\n\nNow let's begin to process the data so we can eventually use it with SciKit Learn!**","a448b3b7":"let's focus back on the idea of trying to see if message length is a distinguishing feature between ham and spam:","8358af7d":"## Train - Test split:"}}