{"cell_type":{"b56e7e56":"code","9203dec5":"code","e0902007":"code","860683e5":"code","32ed4bb6":"code","eda42a0b":"code","2d8a0ca8":"code","59dc6058":"markdown","0f657af7":"markdown"},"source":{"b56e7e56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9203dec5":"#Reading the train and test data\n\ntrain_data = pd.read_csv('..\/input\/titanic\/train.csv',index_col = 'PassengerId')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv',index_col = 'PassengerId')\n\n#Dropping columns which seem to be un-important\n\ntrain_data.drop(['Name','Ticket','Cabin'],axis=1,inplace=True)\ntest_data.drop(['Name','Ticket','Cabin'],axis=1,inplace=True)\n\n#Filling NaN values and replacing categorical values with numeric data\n\ntrain_data['Sex'].replace({'male': 1 , 'female' : 0} ,inplace = True)\ntrain_data['Embarked'].replace( {'S' : 2 , 'C' : 1 , 'Q' : 0 } , inplace = True )\ntrain_data['Age'].fillna( (train_data['Age'].mean()) , inplace = True) \ntrain_data['Embarked'].fillna(3,inplace=True)\n\ntest_data['Sex'].replace({'male': 1 , 'female' : 0} ,inplace = True)\ntest_data['Embarked'].replace( {'S' : 2 , 'C' : 1 , 'Q' : 0 } , inplace = True )\ntest_data['Age'].fillna((test_data['Age'].mean()), inplace = True)\ntest_data['Embarked'].fillna(3,inplace=True)\ntest_data['Fare'].fillna(test_data['Fare'].mean(), inplace=True)\n\n#train_data.isnull().sum()\n","e0902007":"#defining features and target\n\nfeatures = ['Pclass', 'Sex', 'SibSp', 'Fare', 'Age','Parch','Embarked']\nX = train_data[features]\ny = train_data.Survived\n","860683e5":"#splitting of data into training and testing data\n\nfrom sklearn.model_selection import train_test_split\ntrain_X,val_X,train_y,val_y = train_test_split(X,y,random_state=11,test_size=0.25)","32ed4bb6":"#Using Random Forest Classification for fitting data and prediction\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error\n\nRf_model = RandomForestClassifier(n_estimators=1000,max_depth=15,random_state=3)\nRf_model.fit(train_X,train_y.values.ravel())\npreds = Rf_model.predict(val_X)\nmean_absolute_error(preds,val_y)","eda42a0b":"#Fitting the model to test data\n\nFullRf_model = RandomForestClassifier(n_estimators=1000,max_depth=15,random_state=3)\nFullRf_model.fit(X,y)\nfinal_pred = FullRf_model.predict(test_data)","2d8a0ca8":"#Exporting as .csv \n\noutput = pd.DataFrame({'PassengerId': test_data.index, 'Survived': final_pred})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Saved!\")","59dc6058":"**This is a very beginner's guide to help with the classic Titanic Problem.\nI am a beginner myself and thus am using a very simple algorithm RandomForestClassification without any advanced improvements.**","0f657af7":"The RandomForestClassification uses a high number of n_estimators and thus this execution may take a while"}}