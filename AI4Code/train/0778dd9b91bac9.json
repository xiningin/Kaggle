{"cell_type":{"e93421f8":"code","bf40c286":"code","d0232337":"code","14bfed2d":"code","ca53596a":"code","eda33206":"code","55562ced":"code","a615c915":"code","a5707d17":"code","64849847":"code","9bedcc3b":"code","ad392c30":"code","798f63aa":"code","ad7c48c5":"code","d4956215":"code","a5a9f4a9":"code","662a3ddf":"code","f970d397":"code","c7ff041a":"code","86a7b4ee":"code","431f690b":"code","d0c5fd96":"code","4866f1a9":"code","ba665b3d":"code","539895e0":"code","e0ea9397":"code","2291bb78":"code","284ee8a7":"code","e9190227":"code","2e3521ea":"code","bb12872b":"code","ca09eced":"code","1d9ed7ef":"code","2e952a55":"code","466a545e":"code","2084d1b1":"code","e6a7dd68":"code","32b4fc97":"code","7b638c52":"code","b8b4df03":"code","ee1291c0":"code","7d2ee48b":"code","5b255b62":"code","3fffcd11":"code","9f5e0f06":"code","626231e8":"code","ad282bdd":"code","a30a137b":"code","f859b49c":"code","98553533":"code","2f9d1e9e":"code","6184d631":"code","cddd8c71":"code","9887f370":"code","84f0c690":"code","59cd2453":"code","c064d5fc":"code","3d14b917":"code","cc09021c":"code","220047ae":"code","49be5560":"code","d678ec27":"code","b7d0d5f6":"code","e48aec8e":"code","554912e2":"code","b2beb3c6":"code","9493ba5a":"code","1a24013c":"code","8fa879d4":"code","6a2803a7":"code","df176007":"code","34e0be4d":"code","e9d810f1":"code","43f882aa":"code","faf49763":"markdown","12226a60":"markdown","7c7ac13a":"markdown","800bac2b":"markdown","1abf1064":"markdown","669a11ef":"markdown","3a065dfd":"markdown","1e993804":"markdown","6c22ba60":"markdown","5829b13c":"markdown","b47f1534":"markdown","9cc62279":"markdown","56127936":"markdown","f5d109bd":"markdown","af17199b":"markdown","741c8eb0":"markdown","b1397486":"markdown","d8ae8e05":"markdown"},"source":{"e93421f8":"#Project1 PM2.5 Forecasting (72 hours in advance)","bf40c286":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt, time\nimport warnings\nimport math\nimport itertools\nwarnings.filterwarnings(\"ignore\")\nfrom datetime import datetime,timedelta\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom numpy import array\nfrom keras.models import Sequential\n# from keras.layers import LSTM\nfrom keras.layers.convolutional import Conv1D    \nfrom keras.layers import LSTM,Dense, Dropout, Activation, Bidirectional, Masking\nfrom keras import optimizers\nfrom keras.callbacks import ModelCheckpoint\nfrom sklearn.metrics import mean_squared_error\nfrom numpy.random import seed","d0232337":"def toDF(city,pm25_filename,temp_filename,wind_filename,plus):\n    pm25 = pd.read_csv('..\/input\/pm2520212\/DS_kaggle_edited_v2\/' + city + '\/Train\/'+pm25_filename, sep='\\t', header=None, skiprows=10)\n    pm25['Time'] = pd.to_datetime({'year': pm25[0], 'month': pm25[1], 'day':pm25[2],'hour': pm25[3]})\n    pm25=pm25.drop([0,1,2,3,5,6],axis=1)\n    pm25['Time'] = pm25['Time'].dt.tz_localize('UTC').dt.tz_convert('Asia\/Bangkok')\n    pm25['Time'] = pm25['Time'].dt.tz_localize(None)\n    pm25.columns = ['PM25', 'Time']\n    pm25 = pm25.set_index('Time')\n    pm25 = pm25[~pm25.index.duplicated(keep='first')]\n    pm25.index = pd.DatetimeIndex(pm25.index)\n    pm25['PM25']+=plus\n    pm25['PM25'][pm25['PM25'] < 0] = 0\n    temp_df = pd.read_csv('..\/input\/pm2520212\/DS_kaggle_edited_v2\/' + city + '\/Train\/'+temp_filename)\n    temp_df['datetime'] = pd.to_datetime(temp_df['datetime'])\n    temp_df.set_index(temp_df['datetime'],inplace=True)\n    temp_df.drop(columns={'datetime','lat','long'},inplace=True)\n    temp_df.columns = ['Temp']\n    temp_df = temp_df.resample('h').ffill()\n\n    wind_df = pd.read_csv('..\/input\/pm2520212\/DS_kaggle_edited_v2\/' + city + '\/Train\/' + wind_filename)\n    wind_df['datetime'] = pd.to_datetime(wind_df['datetime'])\n    wind_df.set_index(wind_df['datetime'],inplace=True)\n    wind_df.drop(columns={'datetime','lat','long'},inplace=True)\n    wind_df.columns = ['WindDir', 'WindSpeed']\n    wind_df = wind_df.resample('h').ffill()\n\n    df = pm25.merge(temp_df,left_index=True,right_index=True)\n    df = df.merge(wind_df,left_index=True,right_index=True)\n\n    df = df[['Temp','WindSpeed','WindDir','PM25']]\n\n    return df","14bfed2d":"def toDFtest(city,pm25_filename,temp_filename,wind_filename):\n    pm25 = pd.read_csv('..\/input\/pm2520212\/DS_kaggle_edited_v2\/' + city + '\/Test\/'+pm25_filename)\n    pm25.columns = ['Time','PM25']\n    pm25 = pm25.set_index('Time')\n    pm25.index = pd.DatetimeIndex(pm25.index)\n\n    temp_df = pd.read_csv('..\/input\/pm2520212\/DS_kaggle_edited_v2\/' + city + '\/Test\/'+temp_filename)\n    temp_df['datetime'] = pd.to_datetime(temp_df['datetime'])\n    temp_df.set_index(temp_df['datetime'],inplace=True)\n    temp_df.drop(columns={'datetime','lat','long'},inplace=True)\n    temp_df.columns = ['Temp']\n    temp_df = temp_df.resample('h').ffill()\n\n    wind_df = pd.read_csv('..\/input\/pm2520212\/DS_kaggle_edited_v2\/' + city + '\/Test\/'+wind_filename)\n    wind_df['datetime'] = pd.to_datetime(wind_df['datetime'])\n    wind_df.set_index(wind_df['datetime'],inplace=True)\n    wind_df.drop(columns={'datetime','lat','long'},inplace=True)\n    wind_df.columns = ['WindDir', 'WindSpeed']\n    wind_df = wind_df.resample('h').ffill()\n\n    df = pm25.merge(temp_df,left_index=True,right_index=True)\n    df = df.merge(wind_df,left_index=True,right_index=True)\n    df = df[['Temp','WindSpeed','WindDir','PM25']]\n\n    return df","ca53596a":"df_Chanthaburi = toDF('Chanthaburi','Chanthaburi.txt','3H_temperature_Chanthaburi.csv','3H_wind_Chanthaburi.csv',0)\ndf_Chanthaburi","eda33206":"df_Chanthaburi_test = toDFtest('Chanthaburi','Chanthaburi (Thailand timezone).csv','3H_temperature_Chanthaburi.csv','3H_wind_Chanthaburi.csv')\ndf_Chanthaburi_test","55562ced":"df_Chiangmai = toDF('Chiang Mai','Chiang_Mai.txt','3H_temperature_Chiang Mai.csv','3H_wind_Chiang Mai.csv',0)\ndf_Chiangmai","a615c915":"df_Chiangmai_test = toDFtest('Chiang Mai','Chiang Mai (Thailand timezone).csv','3H_temperature_Chiang Mai.csv','3H_wind_Chiang Mai.csv')\ndf_Chiangmai_test","a5707d17":"df_Kanchanaburi = toDF('Kanchanaburi','Kanchanaburi.txt','3H_temperature_Kanchanaburi.csv','3H_wind_Kanchanaburi.csv',0)\ndf_Kanchanaburi","64849847":"df_Kanchanaburi_test = toDFtest('Kanchanaburi','Kanchanaburi (Thailand timezone).csv','3H_temperature_Kanchanaburi.csv','3H_wind_Kanchanaburi.csv')\ndf_Kanchanaburi_test","9bedcc3b":"df_Bangkok = toDF('Bangkok','Bangkok.txt','3H_temperature_Bangkok.csv','3H_wind_Bangkok.csv',0)\ndf_Bangkok","ad392c30":"df_Bangkok_test = toDFtest('Bangkok','Bangkok (Thailand timezone).csv','3H_temperature_Bangkok.csv','3H_wind_Bangkok.csv')\ndf_Bangkok_test","798f63aa":"df_Khonkaen = toDF('Khon Kaen','Khon_Kaen.txt','3H_temperature_Khon Kaen.csv','3H_wind_Khon Kaen.csv',0)\ndf_Khonkaen","ad7c48c5":"df_Khonkaen_test = toDFtest('Khon Kaen','Khon Kaen (Thailand timezone).csv','3H_temperature_Khon Kaen.csv','3H_wind_Khon Kaen.csv')\ndf_Khonkaen_test","d4956215":"df_Songkhla = toDF('Songkhla','Songkhla.txt','3H_temperature_Songkhla.csv','3H_wind_Songkhla.csv',0)\ndf_Songkhla","a5a9f4a9":"df_Songkhla_test = toDFtest('Songkhla','Songkhla (Thailand timezone).csv','3H_temperature_Songkhla.csv','3H_wind_Songkhla.csv')\ndf_Songkhla_test","662a3ddf":"#Normalize training data\ndef normalize_data(df): # nomalize stock data\n    min_max_scaler = preprocessing.MinMaxScaler() #min max scaler\n    df['PM25'] = min_max_scaler.fit_transform(df.PM25.values.reshape(-1,1))\n    df['Temp'] = min_max_scaler.fit_transform(df.Temp.values.reshape(-1,1))\n    df['WindDir'] = min_max_scaler.fit_transform(df.WindDir.values.reshape(-1,1))\n    df['WindSpeed'] = min_max_scaler.fit_transform(df.WindSpeed.values.reshape(-1,1))\n    return df","f970d397":"def load_data(df,df_test):\n    train_data = df.to_numpy()\n    test_data = df_test.to_numpy()\n    \n    train = []\n    for index in range(len(train_data) - 2): \n        train.append(train_data[index: index + 2]) \n    train = np.array(train)\n    \n    test = []\n    for index in range(len(test_data) - 2): \n        test.append(test_data[index: index + 2]) \n    test = np.array(test)\n    \n    x_train = train[:, :-1] \n    y_train = train[:, -1][:,-1]\n    \n    x_test = test[:, :-1] \n    y_test = test[:, -1][:,-1]\n    return [x_train,y_train,x_test,y_test]","c7ff041a":"from numpy.random import seed\nimport tensorflow\nseed(5)\ntensorflow.random.set_seed(5)\nn_features = 4\nprev_days = 1\ndef build_model(layers,opt,p,hidden_unit):\n    ## model 1 vanilla lstm \n    seed(5)\n    tensorflow.random.set_seed(5)\n    model = Sequential()\n    model.add(Conv1D(filters=32, kernel_size=3,strides=1, padding=\"causal\",activation=\"linear\",input_shape=[None, n_features]),)\n    model.add(Dropout(p)) \n    model.add(LSTM(hidden_unit, activation='linear', input_shape=(prev_days, n_features)))\n    model.add(Dropout(p)) \n    model.add(Dense(1,activation='linear',input_shape=(prev_days, n_features)))\n    model.compile(loss='mse', optimizer=opt, metrics=['mse']) \n    return model\n\ndef build_model_khonkaen(layers,opt,p,hidden_unit):\n    seed(5)\n    tensorflow.random.set_seed(5)\n    model = Sequential()\n    model.add(Dropout(p)) \n    model.add(LSTM(hidden_unit, activation='linear', input_shape=(prev_days, n_features)))\n    model.add(Dropout(p)) \n    model.add(Dense(1,activation='linear',input_shape=(prev_days, n_features)))\n    model.compile(loss='mse', optimizer=opt, metrics=['mse']) \n    return model\n\n","86a7b4ee":"def denormalize(df, normalized_value): \n    df = df['PM25'].values.reshape(-1,1)\n    normalized_value = normalized_value.reshape(-1,1)\n\n    min_max_scaler = preprocessing.MinMaxScaler()\n    _ = min_max_scaler.fit_transform(df)\n    denorm = min_max_scaler.inverse_transform(normalized_value)\n    return denorm\n","431f690b":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nfrom matplotlib.pyplot import figure\ndef evaluate(newy_test, new_pred,y_test,yhat,df_normalize_test,province):   \n    figure(num=None, figsize=(18, 6), dpi=80, facecolor='w', edgecolor='k')\n    plt.title(province+' model predict vs ground truth')\n    plt.plot(df_normalize_test.index[1:-1], newy_test, color='g',label='ground truth')\n    plt.plot(df_normalize_test.index[:-2], new_pred, alpha=.7, color='r',label='predict')\n    plt.legend(loc=\"upper right\")\n    \n    plt.show()\n     \n    print(\"rsme :\",math.sqrt(mean_squared_error(newy_test, new_pred))) #RMSE\n    print(\"r^2 :\",r2_score(newy_test, new_pred))","d0c5fd96":"def train_and_test_model(df,df_test,province,opt,p,hidden_unit):\n    n_cols = df.shape[1]\n    if (province == \"Khon Kaen\"):\n        model = build_model_khonkaen([n_features, prev_days, 1],opt,p,hidden_unit)\n    else:\n        model = build_model([n_features, prev_days, 1],opt,p,hidden_unit)\n    df_normalize = normalize_data(df)\n    df_normalize_test = normalize_data(df_test)\n    X_train, y_train, X_test, y_test = load_data(df_normalize, df_normalize_test)\n    tf.keras.backend.clear_session()\n    my_callbacks = [\n        tf.keras.callbacks.EarlyStopping(patience=2),\n        tf.keras.callbacks.ModelCheckpoint(filepath=province+'_model.{epoch:02d}.h5',save_weights_only=True),\n    ]\n    hist = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=100 ,verbose = 1, callbacks = my_callbacks)\n    plt.plot(hist.history['loss'])\n    plt.plot(hist.history['val_loss'])\n    plt.title('model train vs validation loss')\n    plt.ylabel('loss')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'validation'], loc='upper right')\n    plt.show()\n    yhat = model.predict(X_test)\n    df = toDF(province,province.replace(\" \",\"_\")+'.txt','3H_temperature_'+province+'.csv','3H_wind_'+province+'.csv',0)\n    df_test = toDFtest(province,province+\" (Thailand timezone)\"+'.csv','3H_temperature_'+province+'.csv','3H_wind_'+province+'.csv')\n    new_pred = denormalize(df, yhat)\n    newy_test = denormalize(df_test, y_test)\n    evaluate(newy_test, new_pred,y_test,yhat,df_normalize_test,province)\n    \n    return [model,new_pred,newy_test]","4866f1a9":"#rmse 2.781862703243144\nBangkok_model,Bangkok_new_pred,Bangkok_newy_test=train_and_test_model(toDF('Bangkok','Bangkok.txt','3H_temperature_Bangkok.csv','3H_wind_Bangkok.csv',0),df_Bangkok_test,\"Bangkok\",\"RMSprop\",0.081,32)","ba665b3d":"#rmse 3.6636290437799506 bfil adam 0.265 32 \n#3.9574509270490803\nChanthaburi_model,Chanthaburi_new_pred,Chanthaburi_newy_test=train_and_test_model(toDF('Chanthaburi','Chanthaburi.txt','3H_temperature_Chanthaburi.csv','3H_wind_Chanthaburi.csv',0),df_Chanthaburi_test,\"Chanthaburi\",\"adam\",0.2655,32)","539895e0":"#rmse  6.590754145964834 0.005 32\nChiangmai_model,Chiangmai_new_pred,Chiangmai_newy_test=train_and_test_model(toDF('Chiang Mai','Chiang_Mai.txt','3H_temperature_Chiang Mai.csv','3H_wind_Chiang Mai.csv',0),df_Chiangmai_test,\"Chiang Mai\",\"Rmsprop\",0.005,32)","e0ea9397":"#rmse 4.594019316549222\nKanchanaburi_model,Kanchanaburi_new_pred,Kanchanaburi_newy_test=train_and_test_model(toDF('Kanchanaburi','Kanchanaburi.txt','3H_temperature_Kanchanaburi.csv','3H_wind_Kanchanaburi.csv',-35),df_Kanchanaburi_test,\"Kanchanaburi\",\"adam\",0.9051,149)","2291bb78":"# 5.55624075356698\nKhonkaen_model,Khonkaen_new_pred,Khonkaen_newy_test=train_and_test_model(toDF('Khon Kaen','Khon_Kaen.txt','3H_temperature_Khon Kaen.csv','3H_wind_Khon Kaen.csv',-50),df_Khonkaen_test,\"Khon Kaen\",\"adam\",0.741,1024)","284ee8a7":"# 3.878369039138354\nSongkhla_model,Songkhla_new_pred,Songkhla_newy_test=train_and_test_model(toDF('Songkhla','Songkhla.txt','3H_temperature_Songkhla.csv','3H_wind_Songkhla.csv',0),df_Songkhla_test,\"Songkhla\",\"Rmsprop\",0.24,90)","e9190227":"output = pd.DataFrame()\noutput_test = pd.DataFrame()\ndf_Chanthaburi_new_pred = pd.DataFrame(Chanthaburi_new_pred)\ndf_Chanthaburi_newy_test = pd.DataFrame(Chanthaburi_newy_test)\nfor i in range(1112):\n    i *= 6\n    output = pd.concat([output, df_Chanthaburi_new_pred[i+4:i+76]])\n    output_test = pd.concat([output_test, df_Chanthaburi_newy_test[i+4:i+76]])\noutput","2e3521ea":"df_Chiangmai_new_pred = pd.DataFrame(Chiangmai_new_pred)\ndf_Chiangmai_newy_test = pd.DataFrame(Chiangmai_newy_test)\nfor i in range(1112):\n    i *= 6\n    output = pd.concat([output, df_Chiangmai_new_pred[i+4:i+76]])\n    output_test = pd.concat([output_test, df_Chiangmai_newy_test[i+4:i+76]])","bb12872b":"df_Kanchanaburi_new_pred = pd.DataFrame(Kanchanaburi_new_pred)\ndf_Kanchanaburi_newy_test = pd.DataFrame(Kanchanaburi_newy_test)\nfor i in range(1112):\n    i *= 6\n    output = pd.concat([output, df_Kanchanaburi_new_pred[i+4:i+76]])\n    output_test = pd.concat([output_test, df_Kanchanaburi_newy_test[i+4:i+76]])","ca09eced":"df_Bangkok_new_pred = pd.DataFrame(Bangkok_new_pred)\ndf_Bangkok_newy_test = pd.DataFrame(Bangkok_newy_test)\nfor i in range(1112):\n    i *= 6\n    output = pd.concat([output, df_Bangkok_new_pred[i+4:i+76]])\n    output_test = pd.concat([output_test, df_Bangkok_newy_test[i+4:i+76]])","1d9ed7ef":"df_Khonkaen_new_pred = pd.DataFrame(Khonkaen_new_pred)\ndf_Khonkaen_newy_test = pd.DataFrame(Khonkaen_newy_test)\nfor i in range(1110):\n    i *= 6\n    output = pd.concat([output, df_Khonkaen_new_pred[i+4:i+76]])\n    output_test = pd.concat([output_test, df_Khonkaen_newy_test[i+4:i+76]])","2e952a55":"df_Songkhla_new_pred = pd.DataFrame(Songkhla_new_pred)\ndf_Songkhla_newy_test = pd.DataFrame(Songkhla_newy_test)\nfor i in range(1127):\n    i *= 6\n    output = pd.concat([output, df_Songkhla_new_pred[i+4:i+76]])\n    output_test = pd.concat([output_test, df_Songkhla_newy_test[i+4:i+76]])","466a545e":"#r2      0.930160 , rmse    4.702418\nfrom sklearn.metrics import r2_score, mean_squared_error\n\ndef r2_rmse( p,r ):\n    r2 = r2_score( p[0], r[0] )\n    rmse = np.sqrt( mean_squared_error( p[0], r[0] ) )\n    return pd.Series( dict(  r2 = r2, rmse = rmse ) )\n\nr2_rmse(output, output_test)","2084d1b1":"df = pd.DataFrame({'Id': list(range(0, len(output))), 'Predicted': output.to_numpy().flatten()})\ndf.to_csv('submission.csv', index=False)\ndf = pd.DataFrame({'Id': list(range(0, len(output))), 'Predicted': output_test.to_numpy().flatten()})\ndf.to_csv('real.csv', index=False)","e6a7dd68":"def hotspot_to_DF(filename):\n  data = pd.read_csv('..\/input\/pm2520212\/DS_kaggle_edited_v2\/Fire hotspot\/'+filename)\n  df = pd.DataFrame(data)\n  df.drop(columns=['scan','track','satellite','instrument','confidence','version','daynight','type'], inplace=True)\n  df['date'] = pd.to_datetime(df['acq_date'])\n  df['time'] = pd.to_datetime(df['acq_time'], format='%H%M').dt.time\n  df['datetime'] = pd.to_datetime(df['date'].astype(str)+' '+df['time'].astype(str))\n  df['datetime'] = df['datetime'].dt.tz_localize('UTC').dt.tz_convert('Asia\/Bangkok')\n  df['datetime'] = df['datetime'].dt.tz_localize(None)\n\n  df.drop(columns=['date','time','acq_date','acq_time'], inplace=True)\n  return df","32b4fc97":"df_hotspot_thailand = hotspot_to_DF('viirs-snpp_2016_Thailand.csv')\ndf_hotspot_thailand_2017 = hotspot_to_DF('viirs-snpp_2017_Thailand.csv')\ndf_hotspot_thailand_2018 = hotspot_to_DF('viirs-snpp_2018_Thailand.csv')\ndf_hotspot_thailand_2019 = hotspot_to_DF('viirs-snpp_2019_Thailand.csv')\n\ndf_hotspot_thailand = df_hotspot_thailand.append([df_hotspot_thailand_2017,df_hotspot_thailand_2018])\ndf_hotspot_thailand","7b638c52":"df_hotspot_Cambodia = hotspot_to_DF('viirs-snpp_2016_Cambodia.csv')\ndf_hotspot_Cambodia_2017 = hotspot_to_DF('viirs-snpp_2017_Cambodia.csv')\ndf_hotspot_Cambodia_2018 = hotspot_to_DF('viirs-snpp_2018_Cambodia.csv')\ndf_hotspot_Cambodia_2019 = hotspot_to_DF('viirs-snpp_2019_Cambodia.csv')\n\ndf_hotspot_Cambodia = df_hotspot_Cambodia.append([df_hotspot_Cambodia_2017,df_hotspot_Cambodia_2018,df_hotspot_Cambodia_2019])\ndf_hotspot_Cambodia","b8b4df03":"test=df_hotspot_Cambodia.groupby(\"datetime\").filter(lambda x: True)\ntest","ee1291c0":"df_hotspot_Lao = hotspot_to_DF('viirs-snpp_2016_Lao_PDR.csv')\ndf_hotspot_Lao_2017 = hotspot_to_DF('viirs-snpp_2017_Lao_PDR.csv')\ndf_hotspot_Lao_2018 = hotspot_to_DF('viirs-snpp_2018_Lao_PDR.csv')\ndf_hotspot_Lao_2019 = hotspot_to_DF('viirs-snpp_2019_Lao_PDR.csv')\n\ndf_hotspot_Lao = df_hotspot_Lao.append([df_hotspot_Lao_2017,df_hotspot_Lao_2018,df_hotspot_Lao_2019])\ndf_hotspot_Lao","7d2ee48b":"df_hotspot_Myanmar = hotspot_to_DF('viirs-snpp_2016_Myanmar.csv')\ndf_hotspot_Myanmar_2017 = hotspot_to_DF('viirs-snpp_2017_Myanmar.csv')\ndf_hotspot_Myanmar_2018 = hotspot_to_DF('viirs-snpp_2018_Myanmar.csv')\ndf_hotspot_Myanmar_2019 = hotspot_to_DF('viirs-snpp_2019_Myanmar.csv')\n\ndf_hotspot_Myanmar = df_hotspot_Myanmar.append([df_hotspot_Myanmar_2017,df_hotspot_Myanmar_2018,df_hotspot_Myanmar_2019])\ndf_hotspot_Myanmar","5b255b62":"df_hotspot = df_hotspot_thailand.append([df_hotspot_Cambodia,df_hotspot_Lao,df_hotspot_Myanmar])\ndf_hotspot['month'] = pd.to_datetime(df_hotspot['datetime']).dt.month\ndf_hotspot['year'] = pd.to_datetime(df_hotspot['datetime']).dt.year\ndf_hotspot['month_year'] = pd.to_datetime(df_hotspot[['year', 'month']].assign(DAY=1)).dt.strftime(\"%Y-%m\")\ndf_hotspot\ndf_hotspot.to_csv('hotspot.csv')","3fffcd11":"def windandtemp_to_DF(city,filename):\n    data = pd.read_csv('..\/input\/pm2520212\/DS_kaggle_edited_v2\/' + city + '\/Train\/'+filename)\n    df = pd.DataFrame(data)\n    df['datetime'] = pd.to_datetime(df['datetime'])\n    \n    data_test = pd.read_csv('..\/input\/pm2520212\/DS_kaggle_edited_v2\/' + city + '\/Test\/'+filename)\n    df_test = pd.DataFrame(data_test)\n    df_test['datetime'] = pd.to_datetime(df_test['datetime'])\n    \n    df = pd.concat([df, df_test])\n    df['City'] = city\n    return df","9f5e0f06":"df_temp= windandtemp_to_DF('Bangkok','3H_temperature_Bangkok.csv')\ndf_temp_output = pd.DataFrame(df_temp)\ndf_temp= windandtemp_to_DF('Chanthaburi','3H_temperature_Chanthaburi.csv')\ndf_temp_output = pd.concat([df_temp_output, df_temp])\ndf_temp= windandtemp_to_DF('Chiang Mai','3H_temperature_Chiang Mai.csv')\ndf_temp_output = pd.concat([df_temp_output, df_temp])\ndf_temp= windandtemp_to_DF('Kanchanaburi','3H_temperature_Kanchanaburi.csv')\ndf_temp_output = pd.concat([df_temp_output, df_temp])\ndf_temp= windandtemp_to_DF('Khon Kaen','3H_temperature_Khon Kaen.csv')\ndf_temp_output = pd.concat([df_temp_output, df_temp])\ndf_temp= windandtemp_to_DF('Songkhla','3H_temperature_Songkhla.csv')\ndf_temp_output = pd.concat([df_temp_output, df_temp])\n\ndf_temp_output","626231e8":"df = pd.DataFrame(df_temp_output)\ndf['month'] = pd.to_datetime(df['datetime']).dt.month\ndf['year'] = pd.to_datetime(df['datetime']).dt.year\ndf['month_year'] = pd.to_datetime(df[['year', 'month']].assign(DAY=1)).dt.strftime(\"%Y-%m\")\ndf.to_csv('temp.csv', index=False)","ad282bdd":"df_wind= windandtemp_to_DF('Bangkok','3H_wind_Bangkok.csv')\ndf_wind_output = pd.DataFrame(df_wind)\ndf_wind= windandtemp_to_DF('Chanthaburi','3H_wind_Chanthaburi.csv')\ndf_wind_output = pd.concat([df_wind_output, df_wind])\ndf_wind= windandtemp_to_DF('Chiang Mai','3H_wind_Chiang Mai.csv')\ndf_wind_output = pd.concat([df_wind_output, df_wind])\ndf_wind= windandtemp_to_DF('Kanchanaburi','3H_wind_Kanchanaburi.csv')\ndf_wind_output = pd.concat([df_wind_output, df_wind])\ndf_wind= windandtemp_to_DF('Khon Kaen','3H_wind_Khon Kaen.csv')\ndf_wind_output = pd.concat([df_wind_output, df_wind])\ndf_wind= windandtemp_to_DF('Songkhla','3H_wind_Songkhla.csv')\ndf_wind_output = pd.concat([df_wind_output, df_wind])\ndf_wind_output","a30a137b":"df = pd.DataFrame(df_wind_output)\ndf['month'] = pd.to_datetime(df['datetime']).dt.month\ndf['year'] = pd.to_datetime(df['datetime']).dt.year\ndf['month_year'] = pd.to_datetime(df[['year', 'month']].assign(DAY=1)).dt.strftime(\"%Y-%m\")\ndf.to_csv('wind.csv', index=False)","f859b49c":"def pm_to_DF_train(city,filename):\n    \n    pm25 = pd.read_csv('..\/input\/pm2520212\/DS_kaggle_edited_v2\/' + city + '\/Train\/'+ filename, sep='\\t', header=None, skiprows=10)\n    pm25['Time'] = pd.to_datetime({'year': pm25[0], 'month': pm25[1], 'day':pm25[2],'hour': pm25[3]})\n    pm25=pm25.drop([0,1,2,3,5,6],axis=1)\n    pm25['Time'] = pm25['Time'].dt.tz_localize('UTC').dt.tz_convert('Asia\/Bangkok')\n    pm25['Time'] = pm25['Time'].dt.tz_localize(None)\n    pm25.columns = ['PM25', 'datetime']\n    pm25 = pm25[~pm25.datetime.duplicated(keep='first')]\n    pm25.datetime = pd.DatetimeIndex(pm25.datetime)\n\n    return pm25","98553533":"def pm_to_DF_test(city,filename):\n    data = pd.read_csv('..\/input\/pm2520212\/DS_kaggle_edited_v2\/' + city + '\/Test\/'+ filename)\n    pm25 = pd.DataFrame(data)\n    pm25['datetime'] = pd.to_datetime(pm25['Time'])\n    pm25['PM25'] = pm25['PM2.5(\u00b5g\/m3)']\n    pm25.drop(columns=['Time','PM2.5(\u00b5g\/m3)'],inplace=True)\n    \n    df['City'] = city\n    return pm25","2f9d1e9e":"def latlong_to_DF(df,city,filename):\n    data = pd.read_csv('..\/input\/pm2520212\/DS_kaggle_edited_v2\/' + city + '\/Train\/'+filename)\n    df['lat'] = data['lat'][0]\n    df['long'] = data['long'][0]\n    df['City'] = city\n    return df","6184d631":"df_pm_Bangkok= pm_to_DF_train('Bangkok','Bangkok.txt')\ndf_pm_output_Bangkok = pd.DataFrame(df_pm_Bangkok)\ndf_pm_Bangkok = pm_to_DF_test('Bangkok','Bangkok (Thailand timezone).csv')\ndf_pm_output_Bangkok = pd.concat([df_pm_output_Bangkok, df_pm_Bangkok])\ndf_pm_output_Bangkok = latlong_to_DF(df_pm_output_Bangkok,'Bangkok','3H_temperature_Bangkok.csv')\n\ndf_pm_output_Bangkok","cddd8c71":"df_pm_Chanthaburi= pm_to_DF_train('Chanthaburi','Chanthaburi.txt')\ndf_pm_output_Chanthaburi = pd.DataFrame(df_pm_Chanthaburi)\ndf_pm_Chanthaburi = pm_to_DF_test('Chanthaburi','Chanthaburi (Thailand timezone).csv')\ndf_pm_output_Chanthaburi = pd.concat([df_pm_output_Chanthaburi, df_pm_Chanthaburi])\ndf_pm_output_Chanthaburi = latlong_to_DF(df_pm_output_Chanthaburi,'Chanthaburi','3H_temperature_Chanthaburi.csv')\n\ndf_pm_output_Chanthaburi\n","9887f370":"df_pm_Chiangmai= pm_to_DF_train('Chiang Mai','Chiang_Mai.txt')\ndf_pm_output_Chiangmai = pd.DataFrame(df_pm_Chiangmai)\ndf_pm_Chiangmai = pm_to_DF_test('Chiang Mai','Chiang Mai (Thailand timezone).csv')\ndf_pm_output_Chiangmai = pd.concat([df_pm_output_Chiangmai, df_pm_Chiangmai])\ndf_pm_output_Chiangmai = latlong_to_DF(df_pm_output_Chiangmai,'Chiang Mai','3H_temperature_Chiang Mai.csv')\n\ndf_pm_output_Chiangmai\n","84f0c690":"df_pm_Kanchanaburi= pm_to_DF_train('Kanchanaburi','Kanchanaburi.txt')\ndf_pm_output_Kanchanaburi = pd.DataFrame(df_pm_Kanchanaburi)\ndf_pm_Kanchanaburi = pm_to_DF_test('Kanchanaburi','Kanchanaburi (Thailand timezone).csv')\ndf_pm_output_Kanchanaburi = pd.concat([df_pm_output_Kanchanaburi, df_pm_Kanchanaburi])\ndf_pm_output_Kanchanaburi = latlong_to_DF(df_pm_output_Kanchanaburi,'Kanchanaburi','3H_temperature_Kanchanaburi.csv')\n\ndf_pm_output_Kanchanaburi\n","59cd2453":"df_pm_Khonkaen= pm_to_DF_train('Khon Kaen','Khon_Kaen.txt')\ndf_pm_output_Khonkaen = pd.DataFrame(df_pm_Khonkaen)\ndf_pm_Khonkaen = pm_to_DF_test('Khon Kaen','Khon Kaen (Thailand timezone).csv')\ndf_pm_output_Khonkaen = pd.concat([df_pm_output_Khonkaen, df_pm_Khonkaen])\ndf_pm_output_Khonkaen = latlong_to_DF(df_pm_output_Khonkaen,'Khon Kaen','3H_temperature_Khon Kaen.csv')\n\ndf_pm_output_Khonkaen\n","c064d5fc":"df_pm_Songkhla= pm_to_DF_train('Songkhla','Songkhla.txt')\ndf_pm_output_Songkhla = pd.DataFrame(df_pm_Songkhla)\ndf_pm_Songkhla = pm_to_DF_test('Songkhla','Songkhla (Thailand timezone).csv')\ndf_pm_output_Songkhla = pd.concat([df_pm_output_Songkhla, df_pm_Songkhla])\ndf_pm_output_Songkhla = latlong_to_DF(df_pm_output_Songkhla,'Songkhla','3H_temperature_Songkhla.csv')\n\ndf_pm_output_Songkhla\n","3d14b917":"df_pm25 = pd.DataFrame(df_pm_output_Bangkok)\ndf_pm25 = pd.concat([df_pm25,df_pm_output_Chanthaburi])\ndf_pm25 = pd.concat([df_pm25,df_pm_output_Chiangmai])\ndf_pm25 = pd.concat([df_pm25,df_pm_output_Kanchanaburi])\ndf_pm25 = pd.concat([df_pm25,df_pm_output_Khonkaen])\ndf_pm25 = pd.concat([df_pm25,df_pm_output_Songkhla])\ndf_pm25","cc09021c":"df = pd.DataFrame(df_pm25)\ndf.to_csv('PM25.csv', index=True)","220047ae":"from sklearn.cluster import DBSCAN\nfrom sklearn import metrics\nfrom geopy.distance import great_circle\nfrom shapely.geometry import MultiPoint\nimport matplotlib","49be5560":"pm2016 = pd.read_csv('..\/input\/pm2520212\/PM2.5(2016).csv')\npm2017 = pd.read_csv('..\/input\/pm2520212\/PM2.5(2017).csv')\npm2018 = pd.read_csv('..\/input\/pm2520212\/PM2.5(2018).csv')\npm2019 = pd.read_csv('..\/input\/pm2520212\/PM2.5(2019).csv')\npm2020 = pd.read_csv('..\/input\/pm2520212\/PM2.5(2020).csv')\nlatlong = pd.read_csv('..\/input\/pm2520212\/latlng.csv')","d678ec27":"pm2019.drop(columns=['70T*','70T**'],inplace=True)","b7d0d5f6":"pm2016.drop([366,367],inplace=True)\npm2017.drop([365,366],inplace=True)\npm2018.drop([365,366],inplace=True)\npm2019.drop([365,366],inplace=True)\npm2020.drop([366,367],inplace=True)","e48aec8e":"df_pm25 = pd.concat([pm2016,pm2017,pm2018,pm2019,pm2020],keys=['2016','2017','2018','2019','2020'])\ndf_pm25","554912e2":"df_pm25['month_year'] = pd.to_datetime(df_pm25['Date']).dt.to_period('M')\ndf_pm25['year'] = pd.DatetimeIndex(df_pm25['Date']).year\ndf_pm25['month'] = pd.DatetimeIndex(df_pm25['Date']).month\ndf_pm25","b2beb3c6":"df_pm25 = df_pm25.melt(id_vars=['Date','month_year','year','month'], \n        var_name=\"Station\", \n        value_name=\"PM25\")","9493ba5a":"df_pm25","1a24013c":"df_pm25_latlong = df_pm25.merge(latlong, left_on='Station', right_on='title')\ndf_pm25_latlong.drop(columns=['Date', 'Station', 'title'],inplace=True)\ndf_clean = df_pm25_latlong.dropna()","8fa879d4":"df_clean.reset_index(inplace=True)","6a2803a7":"k_pm25 = df_clean.drop(columns=['index'])\nyears = k_pm25['year'].unique()\nmonths = [1,2,3,4,5,6,7,8,9,10,11,12]\nk_pm25","df176007":"def cluster(df_pm25):\n    dbscan=DBSCAN()\n    dbscan.fit(df_pm25[[\"Lat\", \"Lng\"]])\n    df_pm25['DBSCAN_labels']=dbscan.labels_\n    tmp = df_pm25['DBSCAN_labels']\n    return tmp","34e0be4d":"k_pm25_mean = k_pm25\ndata_all = pd.DataFrame()\nfor i in years:\n    for j in months:\n        data = cluster(k_pm25_mean[(k_pm25_mean['year'] == i) & (k_pm25_mean['month'] == j)])\n        data_all = pd.concat([data_all,data])\nk_pm25_mean = k_pm25_mean.join(data_all)","e9d810f1":"k_pm25_mean.rename(columns = {0: 'color'}, inplace = True)\nk_pm25_mean","43f882aa":"k_pm25_mean.to_csv('k_pm25_color.csv', index=False)","faf49763":"####Wind","12226a60":"**DBSCAN**","7c7ac13a":"###Chanthaburi","800bac2b":"###Chiangmai","1abf1064":"**LSTM**","669a11ef":"###Khonkaen","3a065dfd":"#Project 2","1e993804":"**Evaluate model**","6c22ba60":"###Bangkok\n","5829b13c":"Data description\n\n1. PM2.5\n\n   - \u0e0a\u0e48\u0e27\u0e07\u0e40\u0e27\u0e25\u0e32: 1 \u0e0a\u0e21.\n\n   \u0e04\u0e33\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e4c\n\n   - PM2.5: \u0e04\u0e48\u0e32 pm2.5 (\u00b5g \/ m3)\n\n   - \u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e0a\u0e31\u0e48\u0e27\u0e42\u0e21\u0e07\u0e41\u0e25\u0e30\u0e04\u0e38\u0e13\u0e25\u0e31\u0e01\u0e29\u0e13\u0e30\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e41\u0e25\u0e30\u0e40\u0e27\u0e25\u0e32\u0e2d\u0e37\u0e48\u0e19 \u0e46 \u0e43\u0e19 UTC (\u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e08\u0e31\u0e14\u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e02\u0e15\u0e40\u0e27\u0e25\u0e32\u0e40\u0e2d\u0e40\u0e0a\u0e35\u0e22 \/ \u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e01\u0e48\u0e2d\u0e19\u0e19\u0e33\u0e44\u0e1b\u0e43\u0e0a\u0e49 (+7))\n\n2. \u0e25\u0e21\n\n   \u0e04\u0e33\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e4c\n\n   - Win dir: \u0e1b\u0e31\u0e14\u0e25\u0e21 (\u0e2d\u0e07\u0e28\u0e32)\n\n   - \u0e04\u0e27\u0e32\u0e21\u0e40\u0e23\u0e47\u0e27\u0e25\u0e21: \u0e04\u0e27\u0e32\u0e21\u0e40\u0e23\u0e47\u0e27\u0e25\u0e21\u0e17\u0e35\u0e48\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e39\u0e07 850 hpa \u0e2b\u0e23\u0e37\u0e2d 1.5 \u0e01\u0e21.\n\n   - lat, long: \u0e25\u0e30\u0e15\u0e34\u0e08\u0e39\u0e14, \u0e25\u0e2d\u0e07\u0e15\u0e34\u0e08\u0e39\u0e14\n\n   - \u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e41\u0e25\u0e30\u0e40\u0e27\u0e25\u0e32\u0e43\u0e19\u0e42\u0e0b\u0e19\u0e40\u0e27\u0e25\u0e32\u0e40\u0e2d\u0e40\u0e0a\u0e35\u0e22 \/ \u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e2f\n\n3. \u0e2d\u0e38\u0e13\u0e2b\u0e20\u0e39\u0e21\u0e34\n\n   \u0e04\u0e33\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e4c\n\n    - \u0e2d\u0e38\u0e13\u0e2b\u0e20\u0e39\u0e21\u0e34: \u0e41\u0e1a\u0e1a\u0e17\u0e35\u0e48\u0e23\u0e30\u0e14\u0e31\u0e1a\u0e1e\u0e37\u0e49\u0e19\u0e1c\u0e34\u0e27 (\u00b0 c)\n\n    - lat, long: \u0e25\u0e30\u0e15\u0e34\u0e08\u0e39\u0e14, \u0e25\u0e2d\u0e07\u0e15\u0e34\u0e08\u0e39\u0e14\n\n    - \u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e41\u0e25\u0e30\u0e40\u0e27\u0e25\u0e32\u0e43\u0e19\u0e42\u0e0b\u0e19\u0e40\u0e27\u0e25\u0e32\u0e40\u0e2d\u0e40\u0e0a\u0e35\u0e22 \/ \u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e2f\n\n4. \u0e08\u0e38\u0e14\u0e44\u0e1f\n\n    \u0e04\u0e33\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e4c\n\n    - frp (\u0e1e\u0e25\u0e31\u0e07\u0e01\u0e32\u0e23\u0e41\u0e1c\u0e48\u0e23\u0e31\u0e07\u0e2a\u0e35\u0e44\u0e1f): \u0e01\u0e33\u0e25\u0e31\u0e07\u0e02\u0e2d\u0e07 firehotspot (MW)\n\n   - \u0e04\u0e27\u0e32\u0e21\u0e2a\u0e27\u0e48\u0e32\u0e07: \u0e04\u0e27\u0e32\u0e21\u0e2a\u0e27\u0e48\u0e32\u0e07\u0e02\u0e2d\u0e07 fire hotspot \u0e42\u0e14\u0e22\u0e08\u0e30\u0e21\u0e35 bright_ti4, bright_ti5 \u0e0b\u0e36\u0e48\u0e07\u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07 chanel \u0e17\u0e35\u0e48\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e01\u0e31\u0e19\u0e43\u0e19\u0e01\u0e32\u0e23\u0e27\u0e31\u0e14\n\n  - lat, long: \u0e08\u0e38\u0e14\u0e2d\u0e31\u0e1a\u0e14\u0e31\u0e1a\u0e40\u0e1e\u0e25\u0e34\u0e07\n\n  - acq_date, acq_time \u0e43\u0e19 UTC (\u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e40\u0e23\u0e35\u0e22\u0e07\u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e02\u0e15\u0e40\u0e27\u0e25\u0e32 Asia \/ BKK \u0e01\u0e48\u0e2d\u0e19\u0e19\u0e33\u0e44\u0e1b\u0e43\u0e0a\u0e49)","b47f1534":"**Clustering**","9cc62279":"https:\/\/docs.google.com\/presentation\/d\/18KoEohzXjadHBcKxbkhgMuEXkSOlvcwJtEs5K1oPQa8\/edit#slide=id.p1\n\n*   6 stations in each region\n*   Training data: 2016\/03 \u2013 2019\/03\n*   Testing data: 2019\/04 \u2013 2020\/03\n*   It is hourly data.\n*   The forecast must be every 6 hours (12PM, 6PM, 12AM, 6AM). \n*   At each prediction, you must forecast 3 days in advance (72 data points).\n\nYou must combine at least 2 exogeneous variables into your model.\n\nThere are 4 types of data\n\n1.   PM2.5 (hourly)\n2.   Wind (every 3 hours)\n3.   Temperature (every 3 hours)\n4.   Fire hot spot (event based)\n  *   There are 6 important features:\n  *   Latitude, longitude\n  *   ACQ_Date, ACQ_Time (You need to combine these two columns and convert to be UTC. Finally, you must use UTC+7 for Thailand.)\n  *   FRQ, Bright","56127936":"####Fire hotspot","f5d109bd":"###Kanchanaburi","af17199b":"####Temp","741c8eb0":"We've got the hotspot dataframe\n\nvariable: **df_hotspot**","b1397486":"###Songkhla","d8ae8e05":"####PM2.5"}}