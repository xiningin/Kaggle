{"cell_type":{"cfae1be2":"code","72f91792":"code","57d2721a":"code","26f8e081":"code","ad831692":"code","a793d247":"code","30cbd5d2":"code","741f3e9e":"code","b573e42e":"code","b27dae2e":"code","826998c5":"code","866bb784":"code","f6ab40d2":"code","ef85a817":"code","13f9425d":"code","b8707da4":"code","238ce8a0":"code","8ebf73cf":"code","6f02ba52":"code","f3cb3b9b":"code","5ca783eb":"markdown","f5922b7e":"markdown","5097a4ec":"markdown","05e1ea1e":"markdown","b6cfbe33":"markdown","92beed76":"markdown","7d2445ed":"markdown","936e7425":"markdown","894d6e62":"markdown","eb37bc7c":"markdown"},"source":{"cfae1be2":"# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split\n\nfrom IPython.core.display import HTML # permet d'afficher du code html dans jupyter","72f91792":"from sklearn.model_selection import learning_curve\ndef plot_learning_curve(est, X_train, y_train) :\n    train_sizes, train_scores, test_scores = learning_curve(estimator=est, X=X_train, y=y_train, train_sizes=np.linspace(0.1, 1.0, 10),\n                                                        cv=5,\n                                                        n_jobs=-1)\n    train_mean = np.mean(train_scores, axis=1)\n    train_std = np.std(train_scores, axis=1)\n    test_mean = np.mean(test_scores, axis=1)\n    test_std = np.std(test_scores, axis=1)\n    plt.figure(figsize=(8,10))\n    plt.plot(train_sizes, train_mean, color='blue', marker='o', markersize=5, label='training accuracy')\n    plt.fill_between(train_sizes, train_mean + train_std, train_mean - train_std, alpha=0.15, color='blue')\n    plt.plot(train_sizes, test_mean,color='green', linestyle='--',marker='s', markersize=5,label='validation accuracy')\n    plt.fill_between(train_sizes,test_mean + test_std,test_mean - test_std,alpha=0.15, color='green')\n    plt.grid(b='on')\n    plt.xlabel('Number of training samples')\n    plt.ylabel('Accuracy')\n    plt.legend(loc='lower right')\n    plt.ylim([0.6, 1.0])\n    plt.show()","57d2721a":"def plot_roc_curve(est,X_test,y_test) :\n    probas = est.predict_proba(X_test)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,probas[:, 1])\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    plt.figure(figsize=(8,8))\n    plt.title('Receiver Operating Characteristic')\n    plt.plot(false_positive_rate, true_positive_rate, 'b', label='AUC = %0.2f'% roc_auc)\n    plt.legend(loc='lower right')\n    plt.plot([0,1],[0,1],'r--')        # plus mauvaise courbe\n    plt.plot([0,0,1],[0,1,1],'g:')     # meilleure courbe\n    plt.xlim([-0.05,1.2])\n    plt.ylim([-0.05,1.2])\n    plt.ylabel('Taux de vrais positifs')\n    plt.xlabel('Taux de faux positifs')\n    plt.show","26f8e081":"df = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_train.csv')","ad831692":"df.head()","a793d247":"labels = [\"T-shirt\/top\",\"Trouser\",\"Pullover\",\"Dress\",\"Coat\",\"Sandal\",\"Shirt\",\n          \"Sneaker\",\"Bag\",\"Ankle boot\"]","30cbd5d2":"print(labels[df.label[0]])","741f3e9e":"y = df['label']","b573e42e":"X = df.drop(['label'], axis=1)","b27dae2e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","826998c5":"X1 = np.array(X)","866bb784":"image = X1[0].reshape(28,28)\nprint(image)","f6ab40d2":"plt.imshow(image)","ef85a817":"plt.imshow(image, cmap=\"gray_r\")\nplt.axis('off')\nplt.title(y[0])","13f9425d":"n_samples = len(df.index)\nimages = X1.reshape(n_samples,28,28)","b8707da4":"plt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(images[i], cmap=\"gray_r\")\n    plt.title(y[i])","238ce8a0":"from sklearn import ensemble\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","8ebf73cf":"plot_learning_curve(rf, X, y)","6f02ba52":"print(classification_report(y_test, y_rf))","f3cb3b9b":"cm = confusion_matrix(y_test, y_rf)\nprint(cm)","5ca783eb":"La premi\u00e8re image du dataset est un pull :","f5922b7e":"Fonction pour tracer les courbes d'apprentissage sur l'ensemble d'apprentissage et l'ensemble de validation :","5097a4ec":"# Exercice : Zalando Fashion MNIST","05e1ea1e":"**Afficher les 50 premiers \u00e9l\u00e9ments du dataset avec leur label**  \n","b6cfbe33":"<img src=\"https:\/\/github.com\/zalandoresearch\/fashion-mnist\/blob\/master\/doc\/img\/fashion-mnist-sprite.png?raw=true\">","92beed76":"## Librairies et fonctions utiles","7d2445ed":"Le dataset a \u00e9t\u00e9 constitu\u00e9 par Zalando :  \nhttps:\/\/github.com\/zalandoresearch\/fashion-mnist  \n  \nOn a un ensemble d'apprentissage de 60 000 images 28x28 pixels en niveaux de gris, et 10 classes de v\u00eatements : jupes, pantalons, baskets, ...","936e7425":"**Appliquer des m\u00e9thodes de machine learning \u00e0 la reconnaissance des objets (for\u00eats al\u00e9atoires, xgboost, ...)**  ","894d6e62":"Fonction pour tracer la courbe ROC :","eb37bc7c":"## Zalando Fashion MNIST"}}