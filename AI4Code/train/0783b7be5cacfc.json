{"cell_type":{"7a24bef9":"code","541e83df":"code","aa18aa34":"code","c12da603":"code","adafc674":"code","ac0672c9":"code","3634d54f":"code","76ea04fd":"code","4f263ee9":"code","f1d030a4":"code","beb7f538":"code","e37437b7":"code","746e12ab":"code","6edfc231":"code","ba090795":"code","500ef533":"code","a806d482":"code","665ed7bd":"code","1631242e":"code","12254e97":"code","df181c1d":"code","b9e9f0f7":"code","ea58ffdc":"code","f5ff416b":"code","8c036ccc":"code","4d5da8e9":"code","8b37c7d3":"code","e1cd9650":"code","6e1e8112":"code","29a752b5":"code","9185a5b3":"code","79868451":"code","1c57bab0":"code","5573ef2b":"code","b5b8448a":"code","3ad8e268":"code","a3ba153b":"code","e841505c":"code","b3716b83":"code","ee7acce7":"code","f53ce9bf":"code","b963956a":"code","801a5ea5":"code","1e802a3b":"code","ee46f68a":"code","6e6afcce":"code","ea35861a":"code","54532c67":"markdown","82dde457":"markdown","90f06a05":"markdown","4932931b":"markdown","3b7e5d3e":"markdown","2fb5c223":"markdown"},"source":{"7a24bef9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","541e83df":"%config Completer.use_jedi = False","aa18aa34":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\ndf_train = pd.read_csv('\/kaggle\/input\/ml-study-meetup-osaka\/OsakaWinter_train.csv', index_col=0)\ndf_test = pd.read_csv('\/kaggle\/input\/ml-study-meetup-osaka\/OsakaWinter_test.csv', index_col=0)","c12da603":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5148\u982d5\u884c\u3092\u305d\u308c\u305e\u308c\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_train.head()","adafc674":"df_test.head()","ac0672c9":"# \u5e9c\u770c\u306e\u5185\u8a33\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u5b66\u7fd2\u30c7\u30fc\u30bf\u5185\u3067\u306f\u5175\u5eab\u306b\u7269\u4ef6\u304c\u591a\u304f\u3001\u6b21\u3044\u3067\u4eac\u90fd\u306b\u591a\u3044\u3088\u3046\u3067\u3059\u3002\ndf_train.Prefecture.value_counts()","3634d54f":"df_test.Prefecture.value_counts()","76ea04fd":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u5185\u306e\u5404\u5e9c\u770c\u306e\u5e73\u5747TradePrice\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u3002\u5b66\u7fd2\u30c7\u30fc\u30bf\u5185\u3067\u306f\u4eac\u90fd\u3001\u3064\u3044\u3067\u5175\u5eab\u306e\u7269\u4ef6\u304c\u5e73\u5747\u7684\u306b\u306f\u9ad8\u3044\u3088\u3046\u3067\u3059\u3002\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5206\u306f\uff08\u305d\u308c\u304c\u4e88\u6e2c\u30bf\u30fc\u30b2\u30c3\u30c8\u306a\u306e\u3067\uff09\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u304a\u305d\u3089\u304f\u306f\u4eac\u90fd\u3088\u308a\u3055\u3089\u306b\u4e0a\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\u809d\u5fc3\u306e\u5927\u962a\u304c\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3044\u3046\u306e\u306f\u5b9f\u306b\u5384\u4ecb\u3067\u3059\u306d\uff01\ndf_train.groupby(['Prefecture']).TradePrice.mean().sort_values(ascending=False)","4f263ee9":"# \u30b5\u30d6\u306e\u5e02\u753a\u6751\u30c7\u30fc\u30bf\u3068\u9244\u9053\u99c5\u30c7\u30fc\u30bf\u3082\u3056\u3063\u3068\u773a\u3081\u3066\u307f\u307e\u3057\u3087\u3046\ndf_city = pd.read_csv('\/kaggle\/input\/ml-study-meetup-osaka\/OsakaWinter_city.csv')\ndf_station = pd.read_csv('\/kaggle\/input\/ml-study-meetup-osaka\/OsakaWinter_station.csv')","f1d030a4":"df_city.head()","beb7f538":"df_station.head()","e37437b7":"# wiki_desctiption\u306e\u4e2d\u3082\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u307e\u305a\u306f\u5e02\u753a\u6751\u30c7\u30fc\u30bf\ndf_city.wiki_description[0]","746e12ab":"# \u3064\u3044\u3067\u9244\u9053\u99c5\u30c7\u30fc\u30bf\u3002\u3069\u3046\u3067\u3057\u3087\u3046\uff1f\u6709\u7528\u305d\u3046\u306a\u60c5\u5831\u306f\u3042\u308a\u305d\u3046\u3067\u3057\u3087\u3046\u304b\uff1f\ndf_station.wiki_description[0]","6edfc231":"# \u3055\u3066\u3001\u307e\u305a\u306f\u30b7\u30f3\u30d7\u30eb\u306a\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n# \u307e\u305a\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u3068\u7279\u5fb4\u91cf\u306b\u5206\u5272\u3057\u307e\u3059\ny_train = df_train.TradePrice\nX_train = df_train.drop(['TradePrice'], axis=1)\nX_test = df_test.copy()\ngroups = df_train.Prefecture","ba090795":"X_train = X_train.merge(df_station, left_on=['NearestStation'], right_on=['Station'], how='left')\nX_test = X_test.merge(df_station, left_on=['NearestStation'], right_on=['Station'], how='left')\n\nX_train = X_train.merge(df_city, on=['Prefecture', 'Municipality'], how='left', suffixes=['_station', '_city'])\nX_test = X_test.merge(df_city, on=['Prefecture', 'Municipality'], how='left', suffixes=['_station', '_city'])","500ef533":"# Station\u306f\u91cd\u8907\u3059\u308b\u306e\u3067drop\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306f\u3042\u3068\u3067\u3069\u3046\u7528\u3044\u308b\u304b\u8003\u3048\u308b\u3068\u3057\u3066\u3001\u4eca\u56de\u306f\u4e00\u65e6\u9664\u3044\u3066\u304a\u304d\u307e\u3059\u3002\nX_train.drop(['Station', 'wiki_description_city', 'wiki_description_station'], axis=1, inplace=True)\nX_test.drop(['Station', 'wiki_description_city', 'wiki_description_station'], axis=1, inplace=True)","a806d482":"X_train.head()","665ed7bd":"X_test.head()","1631242e":"# \u5730\u7406\u60c5\u5831\u3092\u6271\u3046\u305f\u3081\u306b\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092import\u3057\u3066\u304a\u304d\u307e\u3059\nfrom geopy.distance import great_circle","12254e97":"# \u81ea\u6cbb\u4f53 <> \u6700\u5bc4\u308a\u99c5\u9593\u306e\u8ddd\u96e2\u8a08\u7b97\u3092\u884c\u3046\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n# \u81ea\u6cbb\u4f53\u306e\u7def\u5ea6\u7d4c\u5ea6\u306f\u5e02\u306e\u4e2d\u5fc3\u90e8\u3067\u3042\u308d\u3046\u3068\u306e\u8003\u3048\u304b\u3089\u3053\u306e\u8ddd\u96e2\u304c\u8fd1\u3044\u307b\u3069\u5f53\u8a72\u81ea\u6cbb\u4f53\u306e\u4e2d\u5fc3\u90e8\u306b\u4f4d\u7f6e\u3059\u308b\u7269\u4ef6\u3068\u306e\u4eee\u8aac\u3067\u3059\n# \u4ed6\u306b\u3082geopy\u3092\u7528\u3044\u3066\u5f37\u529b\u306a\u7279\u5fb4\u91cf\u3092\u8272\u3005\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u3001\u5404\u81ea\u3067\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\ndef calc_Municipality_NearestStation_distance(df):\n    try:\n        # \u3053\u3053\u3067\u306f\u5927\u570f\u8ddd\u96e2 (Great Circle Distance)\u3092\u7528\u3044\u307e\u3059\u304c\u3001\u95a2\u897f\u9650\u5b9a\u306a\u306e\u3067\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u3067\u3082\u5927\u304d\u306a\u554f\u984c\u306f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3093\u3002\n        distance = great_circle((df.Latitude_city, df.Longitude_city), (df.Latitude_station, df.Longitude_station)).meters\n    except:\n        distance = -1\n    return distance","df181c1d":"# \u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u3092apply\u3057\u3066\u8ddd\u96e2\u7279\u5fb4\u91cf\u3092\u8a08\u7b97\u3057\u307e\u3059\nX_train['Municipality_NearestStation_distance'] = X_train.apply(calc_Municipality_NearestStation_distance, axis=1)\nX_test['Municipality_NearestStation_distance'] = X_test.apply(calc_Municipality_NearestStation_distance, axis=1)","b9e9f0f7":"# \u6700\u5bc4\u308a\u99c5\u306e\u7def\u5ea6\u7d4c\u5ea6\u304c\u6b20\u640d\u3057\u3066\u3044\u308b\u30b1\u30fc\u30b9\u304c\u591a\u3044\u305f\u3081\u306b-1\u304c\u76ee\u7acb\u3061\u307e\u3059\u306d\nX_train['Municipality_NearestStation_distance']","ea58ffdc":"X_test['Municipality_NearestStation_distance']","f5ff416b":"# \u5b66\u7fd2\u3068\u30c6\u30b9\u30c8\u306f\u5730\u7406\u3067\u533a\u5207\u3089\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u308c\u3089\u306e\u5730\u540d\u306f\u76f4\u63a5\u306f\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\ncol_geo = ['Prefecture', 'Municipality', 'DistrictName', 'NearestStation']","8c036ccc":"# \u5730\u540d\u305d\u306e\u307e\u307e\u306f\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001\u3088\u308a\u4e00\u822c\u5316\u3057\u305f\u8868\u73fe\u3068\u3057\u3066\u3053\u3053\u3067\u306fCount Encoding(\u51fa\u73fe\u56de\u6570\u306b\u7f6e\u63db\u3059\u308b)\u3092\u884c\u306a\u3063\u3066\u307f\u307e\u3059\u3002\n# \u5148\u307b\u3069\u306e\u770c\u540d\u3067value_counts\u3057\u305f\u969b\u306b\u307b\u307c\u4eba\u53e3\u6bd4\u306b\u306a\u3063\u3066\u3044\u305f\u3088\u3046\u306b\u898b\u3048\u305f\u306e\u3067\u3001\u3053\u308c\u3067\u5404\u5730\u57df\u306e\u4eba\u53e3\u6bd4\u306e\u8fd1\u4f3c\u5024\u306e\u3088\u3046\u306a\u7279\u5fb4\u91cf\u306b\u306a\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u307e\u3059\u3002\nfor col in col_geo:\n    summary_train = X_train[col].value_counts()\n    summary_test = X_test[col].value_counts()\n    \n    X_train[col] = X_train[col].map(summary_train)\n    X_test[col] = X_test[col].map(summary_test)","4d5da8e9":"# \u3053\u306e\u3088\u3046\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u307e\u3057\u305f\nX_train[col_geo]","8b37c7d3":"X_test[col_geo]","e1cd9650":"# \u5148\u307b\u3069head\u3092\u307f\u305f\u3068\u304d\u306b\u6700\u5bc4\u308a\u99c5\u307e\u3067\u306e\u6240\u8981\u6642\u9593\u306b\u6587\u5b57\u5217\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u306e\u304c\u6c17\u306b\u306a\u308a\u307e\u3057\u305f\u3088\u306d\u3002\nX_train.TimeToNearestStation.value_counts()","6e1e8112":"# \u6570\u5024\u3067\u7d71\u4e00\u3067\u304d\u308b\u3088\u3046\u306b\u7f6e\u63db\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\nreplace_dict = {'30-60minutes':30, '1H-1H30':60, '1H30-2H':90, '2H-':120}\nX_train['TimeToNearestStation'].replace(replace_dict, inplace=True)\nX_test['TimeToNearestStation'].replace(replace_dict, inplace=True)\n\nX_train['TimeToNearestStation'] = X_train['TimeToNearestStation'].astype(float)\nX_test['TimeToNearestStation'] = X_test['TimeToNearestStation'].astype(float)","29a752b5":"from category_encoders import OrdinalEncoder\n\ncol_cat = []\nfor col in X_train.columns:\n    if X_train[col].dtype=='object':\n        col_cat.append(col)\n        \nencoder = OrdinalEncoder()\nencoder.fit(X_train[col_cat])\nX_train[col_cat] = encoder.transform(X_train[col_cat])\nX_test[col_cat] = encoder.transform(X_test[col_cat])","9185a5b3":"# \u307e\u305a\u306f\u6700\u4f4e\u9650\u306e\u524d\u51e6\u7406\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046\nX_train.head()","79868451":"X_test.head()","1c57bab0":"from pandas import DataFrame\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.metrics import mean_squared_error\nfrom lightgbm import LGBMRegressor","5573ef2b":"# \u3055\u3066\u3001Discussion\u3067\u3082\u8a55\u4fa1\u7cfb\u306e\u69cb\u7bc9\u3067\u56f0\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u8a71\u984c\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u3053\u3053\u3067\u89e6\u308c\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# \u5927\u962a\u306b\u96a3\u63a5\u3057\u3066\u3044\u308b\u5e02\u753a\u6751\u306e\u30c7\u30fc\u30bf\u3092\u4eee\u60f3\u5927\u962a\u3068\u898b\u7acb\u3066\u3066\u7cbe\u5ea6\u8a55\u4fa1\u306b\u7528\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# \u884c\u653f\u533a\u5206\u7684\u306b\u306f\u975e\u9023\u7d9a\u3067\u3059\u304c\u3001\u5730\u7406\u7684\u306b\u306f\u9023\u7d9a\u3057\u3066\u304a\u308a\"\u5927\u962a\u306b\u6027\u8cea\u304c\u8fd1\u3044\"\u3068\u60f3\u5b9a\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n# \u3053\u306e\u8fba\u306f\u56de\u5e30\u4e0d\u9023\u7d9a\u30c7\u30b6\u30a4\u30f3\u306b\u3082\u901a\u3058\u308b\u3082\u306e\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\nimport cupy as cp # PFN\u8b39\u88fd\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3001numpy\u306eGPU\u7248\u307f\u305f\u3044\u306a\u3082\u306e\nfrom cuml.neighbors import NearestNeighbors # NVIDIA\u8b39\u88fd\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067scikit-learn\uff08\u306e\u4e00\u90e8\uff09\u306eGPU\u7248\u307f\u305f\u3044\u306a\u3082\u306e\u3002\u3053\u3053\u3067\u306f\u8fd1\u508d\u63a2\u7d22\u3057\u305f\u3044\u306e\u3067\u3053\u308c\u3092import","b5b8448a":"# \u5927\u962a\u3068\u975e\u5927\u962a\u306b\u5206\u3051\u308b\ndf_city_osaka = df_city[df_city.Prefecture=='Osaka Prefecture']\ndf_city_noosaka = df_city[df_city.Prefecture!='Osaka Prefecture']","3ad8e268":"# \u975e\u5927\u962a\u306e\u5404\u81ea\u6cbb\u4f53\u306b\u5bfe\u3057\u3066\u3001\u6700\u3082\u8fd1\u3044\u5927\u962a\u306e\u81ea\u6cbb\u4f53\u3068\u305d\u3053\u307e\u3067\u306e\uff08\u7def\u5ea6\u7d4c\u5ea6\u3092XY\u5ea7\u6a19\u3068\u3057\u305f\u5834\u5408\u306e\uff09\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u3092\u6c42\u3081\u307e\u3059\u3002\nmodel = NearestNeighbors(n_neighbors=1)\nposition = ['Longitude', 'Latitude']\n\nmodel.fit(df_city_osaka[position])\ndistances, indices = model.kneighbors(df_city_noosaka[position])","a3ba153b":"# \u5927\u962a\u3078\u306e\u8fd1\u3055\u3067\u30bd\u30fc\u30c8\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3088\u3046\u3067\u3059\u306d\u3002\ndf_city_noosaka.iloc[np.argsort(distances.ravel())]","e841505c":"# \u5927\u962a\u3078\u306e\u8fd1\u3055\u4e0a\u4f4d30\u81ea\u6cbb\u4f53\u3092\u7cbe\u5ea6\u8a55\u4fa1\u306b\u7528\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# \u3053\u308c\u304c\u30d9\u30b9\u30c8\u3068\u8a00\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u4e00\u4f8b\u3067\u306e\u3067\u3001\u7686\u3055\u3093\u3067\u3088\u308a\u59a5\u5f53\u306a\u8a55\u4fa1\u7cfb\u306e\u3042\u308a\u65b9\u306b\u3064\u3044\u3066\u6df1\u6398\u308a\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n# \u5927\u962a\u529b\u306f\u7686\u3055\u3093\u306e\u65b9\u304c\u305a\u3063\u3068\u4e0a\u3060\u3068\u601d\u3044\u307e\u3059\u306e\u3067\uff01\n# \u7686\u3055\u3093\u306f\u5927\u962a\u3092\u3088\u304f\u3054\u5b58\u77e5\u306a\u306e\u3067\u3001\u30c7\u30fc\u30bf\u304c\u306a\u304f\u3066\u3082\u540c\u69d8\u306b\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nval_cities = df_city_noosaka.iloc[np.argsort(distances.ravel())].Municipality.values[:30]\nval_cities","b3716b83":"seed = 71\nlgb_params = {\n                    'boosting_type': 'gbdt',\n                    'objective': 'rmse',\n                    'metric': 'rmse',\n                    'subsample': 0.71,\n                    'subsample_freq': 1,\n                    'learning_rate': 0.05,\n                    'n_estimators':9999,\n                    'num_leaves': 7,\n                    'min_data_in_leaf': 10,\n                    'feature_fraction': 0.71,\n                    'importance_type':'gain',\n                    'verbose': -1,\n                    'seed':seed,\n                    'device': 'gpu',# \u4eca\u56de\u306fGPU\u3092\u7528\u3044\u3066\u307f\u307e\u3057\u3087\u3046\n                    'gpu_use_dp': False\n                } ","ee7acce7":"X_train_, y_train_ = X_train[~df_train.Municipality.isin(val_cities)], y_train[~df_train.Municipality.isin(val_cities)]\nX_val, y_val = X_train[df_train.Municipality.isin(val_cities)], y_train[df_train.Municipality.isin(val_cities)]\n\nmodel = LGBMRegressor(**lgb_params)\nmodel.fit(X_train_, np.log1p(y_train_), eval_set=[(X_val, np.log1p(y_val))], early_stopping_rounds=50, eval_metric='rmse')# Evaluation\u306e\u30da\u30fc\u30b8\u306e\u8a55\u4fa1\u5f0f\u3092\u898b\u308b\u3068\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u5bfe\u6570\u5909\u63db\u3057\u3066RMSE\u3092\u7528\u3044\u308b\u3068RMSLE\u3068\u7b49\u4fa1\u306b\u306a\u308a\u307e\u3059\u3002\ny_pred_val = np.expm1(model.predict(X_val))\n\nscore = mean_squared_error(np.log1p(y_val), np.log1p(y_pred_val))**0.5\nprint(\"Validation Score (RMSLE): %f\"%score)","f53ce9bf":"best_iter = model.best_iteration_\nbest_iter","b963956a":"seed = 71\nlgb_params = {\n                    'boosting_type': 'gbdt',\n                    'objective': 'rmse',\n                    'metric': 'rmse',\n                    'subsample': 0.71,\n                    'subsample_freq': 1,\n                    'learning_rate': 0.05,\n                    'n_estimators':best_iter, # \u4eee\u60f3\u5927\u962a\u306e\u8a55\u4fa1\u7cfb\u3067\u6c42\u3081\u305f\u30e9\u30a6\u30f3\u30c9\u6570\u3092\u7528\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u624b\u5143\u306e\u8a55\u4fa1\u7cfb\u3067\u59a5\u5f53\u306a\u30e2\u30c7\u30eb\u306e\u8907\u96d1\u3055\u306e\u5ea6\u5408\u3044\u3092\u898b\u7a4d\u3082\u3063\u305f\u3053\u3068\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\n                    'num_leaves': 7,\n                    'min_data_in_leaf': 10,\n                    'feature_fraction': 0.71,\n                    'importance_type':'gain',\n                    'verbose': -1,\n                    'seed':seed,\n                    'device': 'gpu',# \u4eca\u56de\u306fGPU\u3092\u7528\u3044\u3066\u307f\u307e\u3057\u3087\u3046\n                    'gpu_use_dp': False\n                } ","801a5ea5":"model = LGBMRegressor(**lgb_params)\nmodel.fit(X_train, np.log1p(y_train))\ny_pred_test = np.expm1(model.predict(X_test))","1e802a3b":"import matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline","ee46f68a":"# \u5909\u6570\u91cd\u8981\u5ea6\u3082\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\nimportances = DataFrame(model.feature_importances_, index=X_train.columns, columns=['importance'])\nimportances.sort_values(['importance'], ascending=False, inplace=True)\n\nplt.figure(figsize=[6,10])\nplt.title('Feature Importance')\nplt.barh(importances.index[::-1], importances.importance[::-1])\nplt.xlabel('importance')\nplt.show()","6e6afcce":"# \u4e88\u6e2c\u5024\u3092\u6240\u5b9a\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u4ee3\u5165\u3057\u3066\u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\nsubmission = pd.read_csv('\/kaggle\/input\/ml-study-meetup-osaka\/OsakaWinter_sample_submission.csv')\nsubmission['TradePrice'] = y_pred_test\nsubmission","ea35861a":"# \u4fdd\u5b58\u3057\u307e\u3059\nsubmission.to_csv('submission.csv', index=False)","54532c67":"## \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u307f\u3088\u3046","82dde457":"## \u30b5\u30d6\u30c6\u30fc\u30d6\u30eb\u3092\u30e1\u30a4\u30f3\u30c6\u30fc\u30d6\u30eb\u306b\u30de\u30fc\u30b8\u3057\u307e\u3059","90f06a05":"## [New!] \u5730\u7406\u60c5\u5831\u304b\u3089\u7c21\u5358\u306a\u7279\u5fb4\u91cf\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046","4932931b":"## \u30c7\u30fc\u30bf\u306e\u6e96\u5099\u3092\u3057\u307e\u3057\u3087\u3046","3b7e5d3e":"## \u307e\u305a\u306f\u3088\u304f\u30c7\u30fc\u30bf\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046","2fb5c223":"## \u7cbe\u5ea6\u8a55\u4fa1\u7cfb\u3092\u3069\u306e\u3088\u3046\u306b\u69cb\u7bc9\u3059\u3079\u304d\u304b\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046"}}