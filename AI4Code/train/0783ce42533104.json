{"cell_type":{"06dc1cc7":"code","5d52fdf7":"code","ce196afc":"code","f64b3618":"code","10ef9cab":"markdown","639f7970":"markdown","16a0373d":"markdown","4d73bd1b":"markdown","d392bc00":"markdown"},"source":{"06dc1cc7":"import pandas as pd\nfrom random import randint\n\ndata = pd.read_csv(\"..\/input\/santa-workshop-tour-2019\/family_data.csv\")\n\nfamily_size_dict = data[['n_people']].to_dict()['n_people']\n\ncols = [f'choice_{i}' for i in range(10)]\nchoice_dict = data[cols].to_dict()\n\nN_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\n\ndays = list(range(N_DAYS,0,-1))\n\ndef cost_function(prediction):\n\n    penalty = 0\n\n    # We'll use this to count the number of people scheduled each day\n    daily_occupancy = {k:0 for k in days}\n\n    # Looping over each family; d is the day for each family f\n    for f, d in enumerate(prediction):\n\n        # Using our lookup dictionaries to make simpler variable names\n        n = family_size_dict[f]\n        choice_0 = choice_dict['choice_0'][f]\n        choice_1 = choice_dict['choice_1'][f]\n        choice_2 = choice_dict['choice_2'][f]\n        choice_3 = choice_dict['choice_3'][f]\n        choice_4 = choice_dict['choice_4'][f]\n        choice_5 = choice_dict['choice_5'][f]\n        choice_6 = choice_dict['choice_6'][f]\n        choice_7 = choice_dict['choice_7'][f]\n        choice_8 = choice_dict['choice_8'][f]\n        choice_9 = choice_dict['choice_9'][f]\n\n        # add the family member count to the daily occupancy\n        daily_occupancy[d] += n\n\n        # Calculate the penalty for not getting top preference\n        if d == choice_0:\n            penalty += 0\n        elif d == choice_1:\n            penalty += 50\n        elif d == choice_2:\n            penalty += 50 + 9 * n\n        elif d == choice_3:\n            penalty += 100 + 9 * n\n        elif d == choice_4:\n            penalty += 200 + 9 * n\n        elif d == choice_5:\n            penalty += 200 + 18 * n\n        elif d == choice_6:\n            penalty += 300 + 18 * n\n        elif d == choice_7:\n            penalty += 300 + 36 * n\n        elif d == choice_8:\n            penalty += 400 + 36 * n\n        elif d == choice_9:\n            penalty += 500 + 36 * n + 199 * n\n        else:\n            penalty += 500 + 36 * n + 398 * n\n\n    # for each date, check total occupancy\n    #  (using soft constraints instead of hard constraints)\n    for _, v in daily_occupancy.items():\n        if (v > MAX_OCCUPANCY) or (v < MIN_OCCUPANCY):\n            penalty += 100000000\n\n    # Calculate the accounting cost\n    # The first day (day 100) is treated special\n    accounting_cost = (daily_occupancy[days[0]]-125.0) \/ 400.0 * daily_occupancy[days[0]]**(0.5)\n    # using the max function because the soft constraints might allow occupancy to dip below 125\n    accounting_cost = max(0, accounting_cost)\n\n    # Loop over the rest of the days, keeping track of previous count\n    yesterday_count = daily_occupancy[days[0]]\n    for day in days[1:]:\n        today_count = daily_occupancy[day]\n        diff = abs(today_count - yesterday_count)\n        accounting_cost += max(0, (daily_occupancy[day]-125.0) \/ 400.0 * daily_occupancy[day]**(0.5 + diff \/ 50.0))\n        yesterday_count = today_count\n\n    penalty += accounting_cost\n\n    return penalty","5d52fdf7":"\ndef swap(df, i1, i2):\n    values = df.values\n\n    temp = values[i1].copy()\n    values[i1] = values[i2]\n    values[i2] = temp\n\n    df['assigned_day'] = values\n\n    return df\n\ndef changeval(df, index, val):\n    values = df.values\n\n    values[index] = val\n\n    df['assigned_day'] = values\n\n    return df","ce196afc":"csv = pd.read_csv(\"..\/input\/submission-file\/submission_76169.41944832797.csv\", index_col=0)\ninit_cost = cost_function(csv['assigned_day'].tolist())\ncurrent_cost = init_cost\nlowest_cost = 1000000000\n\nprint(cost_function(changeval(csv, 0, 3)['assigned_day'].tolist()))\n\noffset = 0\n\ncount = 0","f64b3618":"print(\"Step 0\")\nprint(\"---------\")\n\"\"\"\nwhile(True):\n    for index in range(offset, 4999):\n        if(not index == 0):\n            print(\"Step\", str(index))\n            print(\"Lowest Cost:\", lowest_cost)\n            print(\"Initial Cost:\", init_cost)\n            print(\"---------\")\n        for val in range(1, 100):\n            swap = csv.copy()\n            swap = changeval(swap, index, val)\n\n            current_cost = cost_function(swap['assigned_day'].values)\n\n            if(current_cost < lowest_cost and not current_cost == init_cost):\n                lowest_cost = current_cost\n\n            if(lowest_cost < init_cost):\n                csv = temp.copy()\n\n                print(\"********\")\n                print(\"Low score!\")\n                print(\"Current cost is:\", str(lowest_cost))\n                print(\"I1:\", i1)\n                print(\"I2:\", i2)\n                print(\"********\")\n\n                csv.to_csv(f'submission_{lowest_cost}.csv')\n\n                init_cost = lowest_cost\n\"\"\"","10ef9cab":"More default stuff","639f7970":"The meta-optimization\n\nThe code is commented so Kaggle doesn't try to run it all","16a0373d":"Default stuff","4d73bd1b":"Swap methods to swap values at indeces, and to change the value of an index","d392bc00":"This is a script that I wrote to parse through submission CSVs and change each assigned day to each value from 1 to 100. It takes forever to run, and so far hasn't given any output worth mentioning. Does anybody have any advice? I don't understand optimization algorithms enough, so this is my supplement for not being able to advance my score any more."}}